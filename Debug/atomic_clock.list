
atomic_clock.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000298  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .itcm         00001b00  00000000  08000298  00020000  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .text         00019e10  08001da0  08001da0  00021da0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  3 .user_flash   00000000  08100000  08100000  0004022c  2**0
                  CONTENTS
  4 .rodata       00003868  0801bbb0  0801bbb0  0003bbb0  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .ARM          00000008  0801f418  0801f418  0003f418  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  6 .init_array   00000004  0801f420  0801f420  0003f420  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0801f424  0801f424  0003f424  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000022c  20000000  0801f428  00040000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00007150  20000230  0801f654  00040230  2**3
                  ALLOC
 10 ._user_heap_stack 00000600  20007380  0801f654  00047380  2**0
                  ALLOC
 11 .lwip_sec     00044b83  30000000  30000000  00050000  2**2
                  ALLOC
 12 .ARM.attributes 0000002e  00000000  00000000  0004022c  2**0
                  CONTENTS, READONLY
 13 .comment      00000043  00000000  00000000  0004025a  2**0
                  CONTENTS, READONLY
 14 .debug_info   00038dfc  00000000  00000000  0004029d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_abbrev 00007530  00000000  00000000  00079099  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_aranges 000029e0  00000000  00000000  000805d0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_rnglists 00002167  00000000  00000000  00082fb0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_macro  00011f0b  00000000  00000000  00085117  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_line   000415b0  00000000  00000000  00097022  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_str    001a981a  00000000  00000000  000d85d2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_frame  0000c064  00000000  00000000  00281dec  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 00000052  00000000  00000000  0028de50  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .itcm:

00000000 <start_laser_tuning>:
/**
  * @brief  Function x.
  * @retval None
  */

void start_laser_tuning(void) {
       0:	b580      	push	{r7, lr}
       2:	af00      	add	r7, sp, #0
	stop_MW_operation(); //releases timers and ensures that sample pulse is generated for ADC
       4:	f001 fa34 	bl	1470 <stop_MW_operation>
	laser_state = LASER_STEPPED_UP;
       8:	4b17      	ldr	r3, [pc, #92]	; (68 <start_laser_tuning+0x68>)
       a:	2202      	movs	r2, #2
       c:	701a      	strb	r2, [r3, #0]
	HAL_GPIO_WritePin(LASER_TUNING_GPIO_Port, LASER_TUNING_Pin, GPIO_PIN_SET); //Laser_tuning output high
       e:	2201      	movs	r2, #1
      10:	f44f 5180 	mov.w	r1, #4096	; 0x1000
      14:	4815      	ldr	r0, [pc, #84]	; (6c <start_laser_tuning+0x6c>)
      16:	f001 fd5f 	bl	1ad8 <__HAL_GPIO_WritePin_veneer>
	if (laser_mod_value > (LASER_MAX_MOD - LASER_STEP)) {
      1a:	4b15      	ldr	r3, [pc, #84]	; (70 <start_laser_tuning+0x70>)
      1c:	881b      	ldrh	r3, [r3, #0]
      1e:	461a      	mov	r2, r3
      20:	2303      	movs	r3, #3
      22:	4619      	mov	r1, r3
      24:	f640 13c4 	movw	r3, #2500	; 0x9c4
      28:	1a5b      	subs	r3, r3, r1
      2a:	429a      	cmp	r2, r3
      2c:	dd0a      	ble.n	44 <start_laser_tuning+0x44>
	    printf("LOSS OF LASER LOCK\r\n");
      2e:	4811      	ldr	r0, [pc, #68]	; (74 <start_laser_tuning+0x74>)
      30:	f001 fd5e 	bl	1af0 <__puts_veneer>
	    printf("Modulation value outside bounds: %u\r\n", laser_mod_value);
      34:	4b0e      	ldr	r3, [pc, #56]	; (70 <start_laser_tuning+0x70>)
      36:	881b      	ldrh	r3, [r3, #0]
      38:	4619      	mov	r1, r3
      3a:	480f      	ldr	r0, [pc, #60]	; (78 <start_laser_tuning+0x78>)
      3c:	f001 fd50 	bl	1ae0 <__printf_veneer>
		Error_Handler();
      40:	f001 fd3e 	bl	1ac0 <__Error_Handler_veneer>
	}
	laser_mod_value += LASER_STEP;
      44:	4b0a      	ldr	r3, [pc, #40]	; (70 <start_laser_tuning+0x70>)
      46:	881b      	ldrh	r3, [r3, #0]
      48:	2203      	movs	r2, #3
      4a:	4413      	add	r3, r2
      4c:	b29a      	uxth	r2, r3
      4e:	4b08      	ldr	r3, [pc, #32]	; (70 <start_laser_tuning+0x70>)
      50:	801a      	strh	r2, [r3, #0]
	HAL_DAC_SetValue(&hdac1, DAC_CHANNEL_2, DAC_ALIGN_12B_R, laser_mod_value); //
      52:	4b07      	ldr	r3, [pc, #28]	; (70 <start_laser_tuning+0x70>)
      54:	881b      	ldrh	r3, [r3, #0]
      56:	2200      	movs	r2, #0
      58:	2110      	movs	r1, #16
      5a:	4808      	ldr	r0, [pc, #32]	; (7c <start_laser_tuning+0x7c>)
      5c:	f001 fd4c 	bl	1af8 <__HAL_DAC_SetValue_veneer>
	reset_adc_samples(); //reset ADC samples including sample count
      60:	f000 faea 	bl	638 <reset_adc_samples>
	#ifdef LASER_VERBOSE
	printf("Started laser tuning\r\n");
	#endif //LASER_VERBOSE
}
      64:	bf00      	nop
      66:	bd80      	pop	{r7, pc}
      68:	2000024c 	.word	0x2000024c
      6c:	58020400 	.word	0x58020400
      70:	20000000 	.word	0x20000000
      74:	0801bbb0 	.word	0x0801bbb0
      78:	0801bbc4 	.word	0x0801bbc4
      7c:	200002bc 	.word	0x200002bc

00000080 <start_laser_ramp>:
  * @brief  Starts a laser scan
  * @retval None
  * This function initiates a laser frequency scan using an n-point moving average
  * ADC value where n = ADC_SAMPLES
  */
void start_laser_ramp(void) {
      80:	b580      	push	{r7, lr}
      82:	af00      	add	r7, sp, #0
	stop_MW_operation(); //releases timers and ensures that sample pulse is generated for ADC
      84:	f001 f9f4 	bl	1470 <stop_MW_operation>
	laser_state = LASER_RAMP_PHASE_ONE;
      88:	4b15      	ldr	r3, [pc, #84]	; (e0 <start_laser_ramp+0x60>)
      8a:	2204      	movs	r2, #4
      8c:	701a      	strb	r2, [r3, #0]
	HAL_GPIO_WritePin(LASER_TUNING_GPIO_Port, LASER_TUNING_Pin, GPIO_PIN_SET); //Laser_tuning output high
      8e:	2201      	movs	r2, #1
      90:	f44f 5180 	mov.w	r1, #4096	; 0x1000
      94:	4813      	ldr	r0, [pc, #76]	; (e4 <start_laser_ramp+0x64>)
      96:	f001 fd1f 	bl	1ad8 <__HAL_GPIO_WritePin_veneer>
	HAL_GPIO_WritePin(SCOPE_TRIG_OUT_GPIO_Port, SCOPE_TRIG_OUT_Pin, GPIO_PIN_SET); // Sets trigger output high
      9a:	2201      	movs	r2, #1
      9c:	2101      	movs	r1, #1
      9e:	4812      	ldr	r0, [pc, #72]	; (e8 <start_laser_ramp+0x68>)
      a0:	f001 fd1a 	bl	1ad8 <__HAL_GPIO_WritePin_veneer>
	adc_averaged_max = 0;
      a4:	4b11      	ldr	r3, [pc, #68]	; (ec <start_laser_ramp+0x6c>)
      a6:	2200      	movs	r2, #0
      a8:	601a      	str	r2, [r3, #0]
	adc_averaged_min = 0xFFFF;
      aa:	4b11      	ldr	r3, [pc, #68]	; (f0 <start_laser_ramp+0x70>)
      ac:	f64f 72ff 	movw	r2, #65535	; 0xffff
      b0:	601a      	str	r2, [r3, #0]
	laser_mod_value = LASER_MIN_MOD;
      b2:	4b10      	ldr	r3, [pc, #64]	; (f4 <start_laser_ramp+0x74>)
      b4:	220a      	movs	r2, #10
      b6:	801a      	strh	r2, [r3, #0]
	if (ADC_SAMPLES > 1) moving_average_offset = ADC_SAMPLES / 2;
      b8:	4b0f      	ldr	r3, [pc, #60]	; (f8 <start_laser_ramp+0x78>)
      ba:	2204      	movs	r2, #4
      bc:	801a      	strh	r2, [r3, #0]
	HAL_DAC_SetValue(&hdac1, DAC_CHANNEL_2, DAC_ALIGN_12B_R, laser_mod_value); //
      be:	4b0d      	ldr	r3, [pc, #52]	; (f4 <start_laser_ramp+0x74>)
      c0:	881b      	ldrh	r3, [r3, #0]
      c2:	2200      	movs	r2, #0
      c4:	2110      	movs	r1, #16
      c6:	480d      	ldr	r0, [pc, #52]	; (fc <start_laser_ramp+0x7c>)
      c8:	f001 fd16 	bl	1af8 <__HAL_DAC_SetValue_veneer>
	start_timer(MW_TIMER); //using MW for 1s delay
      cc:	4b0c      	ldr	r3, [pc, #48]	; (100 <start_laser_ramp+0x80>)
      ce:	681b      	ldr	r3, [r3, #0]
      d0:	4618      	mov	r0, r3
      d2:	f001 fca3 	bl	1a1c <start_timer>
    printf("LD temperature equalising.\r\n");
      d6:	480b      	ldr	r0, [pc, #44]	; (104 <start_laser_ramp+0x84>)
      d8:	f001 fd0a 	bl	1af0 <__puts_veneer>
}
      dc:	bf00      	nop
      de:	bd80      	pop	{r7, pc}
      e0:	2000024c 	.word	0x2000024c
      e4:	58020400 	.word	0x58020400
      e8:	58021800 	.word	0x58021800
      ec:	20000638 	.word	0x20000638
      f0:	2000063c 	.word	0x2000063c
      f4:	20000000 	.word	0x20000000
      f8:	20000250 	.word	0x20000250
      fc:	200002bc 	.word	0x200002bc
     100:	2000001c 	.word	0x2000001c
     104:	0801bbec 	.word	0x0801bbec

00000108 <stop_laser_tuning>:

/**
  * @brief  Stops laser tuning ready to return to POP
  * @retval None
  */
void stop_laser_tuning(void) {
     108:	b580      	push	{r7, lr}
     10a:	af00      	add	r7, sp, #0
	laser_state = LASER_ON_FREQ;
     10c:	4b0b      	ldr	r3, [pc, #44]	; (13c <stop_laser_tuning+0x34>)
     10e:	2200      	movs	r2, #0
     110:	701a      	strb	r2, [r3, #0]
	stop_timer(MW_TIMER); //release MW_timer
     112:	4b0b      	ldr	r3, [pc, #44]	; (140 <stop_laser_tuning+0x38>)
     114:	681b      	ldr	r3, [r3, #0]
     116:	4618      	mov	r0, r3
     118:	f001 fc9e 	bl	1a58 <stop_timer>
	stop_timer(SWEEP_TIMER); //release SWEEP_timer
     11c:	4b09      	ldr	r3, [pc, #36]	; (144 <stop_laser_tuning+0x3c>)
     11e:	681b      	ldr	r3, [r3, #0]
     120:	4618      	mov	r0, r3
     122:	f001 fc99 	bl	1a58 <stop_timer>
	HAL_GPIO_WritePin(LASER_TUNING_GPIO_Port, LASER_TUNING_Pin, GPIO_PIN_RESET); // Laser_tuning output low
     126:	2200      	movs	r2, #0
     128:	f44f 5180 	mov.w	r1, #4096	; 0x1000
     12c:	4806      	ldr	r0, [pc, #24]	; (148 <stop_laser_tuning+0x40>)
     12e:	f001 fcd3 	bl	1ad8 <__HAL_GPIO_WritePin_veneer>
	reset_adc_samples(); //reset ADC samples including sample count
     132:	f000 fa81 	bl	638 <reset_adc_samples>
}
     136:	bf00      	nop
     138:	bd80      	pop	{r7, pc}
     13a:	bf00      	nop
     13c:	2000024c 	.word	0x2000024c
     140:	2000001c 	.word	0x2000001c
     144:	20000020 	.word	0x20000020
     148:	58020400 	.word	0x58020400

0000014c <laser_update>:

/**
  * @brief  Checks laser locking status to see if an action is needed.
  * @retval True if an action was taken
  */
const bool laser_update(void) {
     14c:	b580      	push	{r7, lr}
     14e:	b086      	sub	sp, #24
     150:	af00      	add	r7, sp, #0
	bool action_taken = false;
     152:	2300      	movs	r3, #0
     154:	75fb      	strb	r3, [r7, #23]
	double sweep_time_s = 0;
     156:	f04f 0200 	mov.w	r2, #0
     15a:	f04f 0300 	mov.w	r3, #0
     15e:	e9c7 2302 	strd	r2, r3, [r7, #8]
	uint8_t local_copy_of_laser_state = laser_state; //hack to make switch statement behave
     162:	4b93      	ldr	r3, [pc, #588]	; (3b0 <_Min_Heap_Size+0x1b0>)
     164:	781b      	ldrb	r3, [r3, #0]
     166:	71fb      	strb	r3, [r7, #7]
	switch (local_copy_of_laser_state)
     168:	79fb      	ldrb	r3, [r7, #7]
     16a:	2b07      	cmp	r3, #7
     16c:	f200 81d4 	bhi.w	518 <_Min_Stack_Size+0x118>
     170:	a201      	add	r2, pc, #4	; (adr r2, 178 <laser_update+0x2c>)
     172:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
     176:	bf00      	nop
     178:	00000531 	.word	0x00000531
     17c:	00000199 	.word	0x00000199
     180:	000001c7 	.word	0x000001c7
     184:	0000022f 	.word	0x0000022f
     188:	000002a3 	.word	0x000002a3
     18c:	000002f1 	.word	0x000002f1
     190:	00000409 	.word	0x00000409
     194:	000004dd 	.word	0x000004dd
	{
		case LASER_ON_FREQ:
			break; //no action to take
		case LASER_TEMP_STABILISING:
			if (check_timer(MW_TIMER) < LASER_STAB_US) return(false); //Still waiting, no action taken
     198:	4b86      	ldr	r3, [pc, #536]	; (3b4 <_Min_Heap_Size+0x1b4>)
     19a:	681b      	ldr	r3, [r3, #0]
     19c:	4618      	mov	r0, r3
     19e:	f001 fc6d 	bl	1a7c <check_timer>
     1a2:	4603      	mov	r3, r0
     1a4:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
     1a8:	d201      	bcs.n	1ae <laser_update+0x62>
     1aa:	2300      	movs	r3, #0
     1ac:	e1ca      	b.n	544 <_Min_Stack_Size+0x144>
			action_taken = true;
     1ae:	2301      	movs	r3, #1
     1b0:	75fb      	strb	r3, [r7, #23]
			stop_timer(MW_TIMER); //release timer
     1b2:	4b80      	ldr	r3, [pc, #512]	; (3b4 <_Min_Heap_Size+0x1b4>)
     1b4:	681b      	ldr	r3, [r3, #0]
     1b6:	4618      	mov	r0, r3
     1b8:	f001 fc4e 	bl	1a58 <stop_timer>
			laser_state = LASER_ON_FREQ;
     1bc:	4b7c      	ldr	r3, [pc, #496]	; (3b0 <_Min_Heap_Size+0x1b0>)
     1be:	2200      	movs	r2, #0
     1c0:	701a      	strb	r2, [r3, #0]
			reset_adc_samples(); //reset ADC samples including sample count
     1c2:	f000 fa39 	bl	638 <reset_adc_samples>
		case LASER_STEPPED_UP:
			if(adc_average_updated) {
     1c6:	4b7c      	ldr	r3, [pc, #496]	; (3b8 <_Min_Heap_Size+0x1b8>)
     1c8:	781b      	ldrb	r3, [r3, #0]
     1ca:	2b00      	cmp	r3, #0
     1cc:	f000 81b2 	beq.w	534 <_Min_Stack_Size+0x134>
				adc_polled_above = adc_averaged_val;
     1d0:	4b7a      	ldr	r3, [pc, #488]	; (3bc <_Min_Heap_Size+0x1bc>)
     1d2:	681b      	ldr	r3, [r3, #0]
     1d4:	4a7a      	ldr	r2, [pc, #488]	; (3c0 <_Min_Heap_Size+0x1c0>)
     1d6:	6013      	str	r3, [r2, #0]
				laser_state = LASER_STEPPED_DOWN;
     1d8:	4b75      	ldr	r3, [pc, #468]	; (3b0 <_Min_Heap_Size+0x1b0>)
     1da:	2203      	movs	r2, #3
     1dc:	701a      	strb	r2, [r3, #0]
				if (laser_mod_value < LASER_MIN_MOD + (2 * LASER_STEP)) {
     1de:	4b79      	ldr	r3, [pc, #484]	; (3c4 <_Min_Heap_Size+0x1c4>)
     1e0:	881b      	ldrh	r3, [r3, #0]
     1e2:	461a      	mov	r2, r3
     1e4:	2303      	movs	r3, #3
     1e6:	3305      	adds	r3, #5
     1e8:	005b      	lsls	r3, r3, #1
     1ea:	429a      	cmp	r2, r3
     1ec:	da0a      	bge.n	204 <_Min_Heap_Size+0x4>
				    printf("LOSS OF LASER LOCK\r\n");
     1ee:	4876      	ldr	r0, [pc, #472]	; (3c8 <_Min_Heap_Size+0x1c8>)
     1f0:	f001 fc7e 	bl	1af0 <__puts_veneer>
				    printf("Modulation value outside bounds: %u\r\n", laser_mod_value);
     1f4:	4b73      	ldr	r3, [pc, #460]	; (3c4 <_Min_Heap_Size+0x1c4>)
     1f6:	881b      	ldrh	r3, [r3, #0]
     1f8:	4619      	mov	r1, r3
     1fa:	4874      	ldr	r0, [pc, #464]	; (3cc <_Min_Heap_Size+0x1cc>)
     1fc:	f001 fc70 	bl	1ae0 <__printf_veneer>
					Error_Handler();
     200:	f001 fc5e 	bl	1ac0 <__Error_Handler_veneer>
				}
				laser_mod_value = laser_mod_value - (2 * LASER_STEP);
     204:	4b6f      	ldr	r3, [pc, #444]	; (3c4 <_Min_Heap_Size+0x1c4>)
     206:	881a      	ldrh	r2, [r3, #0]
     208:	2303      	movs	r3, #3
     20a:	005b      	lsls	r3, r3, #1
     20c:	b29b      	uxth	r3, r3
     20e:	1ad3      	subs	r3, r2, r3
     210:	b29a      	uxth	r2, r3
     212:	4b6c      	ldr	r3, [pc, #432]	; (3c4 <_Min_Heap_Size+0x1c4>)
     214:	801a      	strh	r2, [r3, #0]
				HAL_DAC_SetValue(&hdac1, DAC_CHANNEL_2, DAC_ALIGN_12B_R, laser_mod_value); //
     216:	4b6b      	ldr	r3, [pc, #428]	; (3c4 <_Min_Heap_Size+0x1c4>)
     218:	881b      	ldrh	r3, [r3, #0]
     21a:	2200      	movs	r2, #0
     21c:	2110      	movs	r1, #16
     21e:	486c      	ldr	r0, [pc, #432]	; (3d0 <_Min_Heap_Size+0x1d0>)
     220:	f001 fc6a 	bl	1af8 <__HAL_DAC_SetValue_veneer>
				reset_adc_samples(); //reset ADC samples including sample count
     224:	f000 fa08 	bl	638 <reset_adc_samples>
				action_taken = true;
     228:	2301      	movs	r3, #1
     22a:	75fb      	strb	r3, [r7, #23]
			}
			break;
     22c:	e182      	b.n	534 <_Min_Stack_Size+0x134>
		case LASER_STEPPED_DOWN:
			if(adc_average_updated) {
     22e:	4b62      	ldr	r3, [pc, #392]	; (3b8 <_Min_Heap_Size+0x1b8>)
     230:	781b      	ldrb	r3, [r3, #0]
     232:	2b00      	cmp	r3, #0
     234:	f000 8180 	beq.w	538 <_Min_Stack_Size+0x138>
				adc_polled_below = adc_averaged_val;
     238:	4b60      	ldr	r3, [pc, #384]	; (3bc <_Min_Heap_Size+0x1bc>)
     23a:	681b      	ldr	r3, [r3, #0]
     23c:	4a65      	ldr	r2, [pc, #404]	; (3d4 <_Min_Heap_Size+0x1d4>)
     23e:	6013      	str	r3, [r2, #0]
				laser_mod_value += LASER_STEP; //return laser modulation value to pre-tuned value
     240:	4b60      	ldr	r3, [pc, #384]	; (3c4 <_Min_Heap_Size+0x1c4>)
     242:	881b      	ldrh	r3, [r3, #0]
     244:	2203      	movs	r2, #3
     246:	4413      	add	r3, r2
     248:	b29a      	uxth	r2, r3
     24a:	4b5e      	ldr	r3, [pc, #376]	; (3c4 <_Min_Heap_Size+0x1c4>)
     24c:	801a      	strh	r2, [r3, #0]
				action_taken = true;
     24e:	2301      	movs	r3, #1
     250:	75fb      	strb	r3, [r7, #23]
				if (adc_polled_below > adc_polled_above) {
     252:	4b60      	ldr	r3, [pc, #384]	; (3d4 <_Min_Heap_Size+0x1d4>)
     254:	681a      	ldr	r2, [r3, #0]
     256:	4b5a      	ldr	r3, [pc, #360]	; (3c0 <_Min_Heap_Size+0x1c0>)
     258:	681b      	ldr	r3, [r3, #0]
     25a:	429a      	cmp	r2, r3
     25c:	d905      	bls.n	26a <_Min_Heap_Size+0x6a>
					laser_mod_value++; //increase current by incrementing laser modulation value
     25e:	4b59      	ldr	r3, [pc, #356]	; (3c4 <_Min_Heap_Size+0x1c4>)
     260:	881b      	ldrh	r3, [r3, #0]
     262:	3301      	adds	r3, #1
     264:	b29a      	uxth	r2, r3
     266:	4b57      	ldr	r3, [pc, #348]	; (3c4 <_Min_Heap_Size+0x1c4>)
     268:	801a      	strh	r2, [r3, #0]
				}
				if (adc_polled_above > adc_polled_below) {
     26a:	4b55      	ldr	r3, [pc, #340]	; (3c0 <_Min_Heap_Size+0x1c0>)
     26c:	681a      	ldr	r2, [r3, #0]
     26e:	4b59      	ldr	r3, [pc, #356]	; (3d4 <_Min_Heap_Size+0x1d4>)
     270:	681b      	ldr	r3, [r3, #0]
     272:	429a      	cmp	r2, r3
     274:	d905      	bls.n	282 <_Min_Heap_Size+0x82>
					laser_mod_value--; //decrease current by decrementing laser modulation value
     276:	4b53      	ldr	r3, [pc, #332]	; (3c4 <_Min_Heap_Size+0x1c4>)
     278:	881b      	ldrh	r3, [r3, #0]
     27a:	3b01      	subs	r3, #1
     27c:	b29a      	uxth	r2, r3
     27e:	4b51      	ldr	r3, [pc, #324]	; (3c4 <_Min_Heap_Size+0x1c4>)
     280:	801a      	strh	r2, [r3, #0]
				}
				HAL_DAC_SetValue(&hdac1, DAC_CHANNEL_2, DAC_ALIGN_12B_R, laser_mod_value);
     282:	4b50      	ldr	r3, [pc, #320]	; (3c4 <_Min_Heap_Size+0x1c4>)
     284:	881b      	ldrh	r3, [r3, #0]
     286:	2200      	movs	r2, #0
     288:	2110      	movs	r1, #16
     28a:	4851      	ldr	r0, [pc, #324]	; (3d0 <_Min_Heap_Size+0x1d0>)
     28c:	f001 fc34 	bl	1af8 <__HAL_DAC_SetValue_veneer>
				/* If adding a short delay for LD to stabilise after polling */
//				laser_state = LASER_TEMP_STABILISING; //for normal operation
				laser_state = LASER_STEPPED_UP; //for cycling as part of a stability test
     290:	4b47      	ldr	r3, [pc, #284]	; (3b0 <_Min_Heap_Size+0x1b0>)
     292:	2202      	movs	r2, #2
     294:	701a      	strb	r2, [r3, #0]
				start_timer(MW_TIMER); //using MW for short delay
     296:	4b47      	ldr	r3, [pc, #284]	; (3b4 <_Min_Heap_Size+0x1b4>)
     298:	681b      	ldr	r3, [r3, #0]
     29a:	4618      	mov	r0, r3
     29c:	f001 fbbe 	bl	1a1c <start_timer>
				/* Substituted with this if no stabilising time is required after polling
				 * laser_state = LASER_ON_FREQ;
				 * reset_adc_samples(); //reset ADC samples including sample count
				 */
			}
			break;
     2a0:	e14a      	b.n	538 <_Min_Stack_Size+0x138>
		case LASER_RAMP_PHASE_ONE: //waiting for the LD temperature to stabilise
			if (check_timer(MW_TIMER) < 1000000) return(false); //Still waiting, no action taken
     2a2:	4b44      	ldr	r3, [pc, #272]	; (3b4 <_Min_Heap_Size+0x1b4>)
     2a4:	681b      	ldr	r3, [r3, #0]
     2a6:	4618      	mov	r0, r3
     2a8:	f001 fbe8 	bl	1a7c <check_timer>
     2ac:	4603      	mov	r3, r0
     2ae:	4a4a      	ldr	r2, [pc, #296]	; (3d8 <_Min_Heap_Size+0x1d8>)
     2b0:	4293      	cmp	r3, r2
     2b2:	d801      	bhi.n	2b8 <_Min_Heap_Size+0xb8>
     2b4:	2300      	movs	r3, #0
     2b6:	e145      	b.n	544 <_Min_Stack_Size+0x144>
			action_taken = true;
     2b8:	2301      	movs	r3, #1
     2ba:	75fb      	strb	r3, [r7, #23]
			stop_timer(MW_TIMER); //release MW_timer
     2bc:	4b3d      	ldr	r3, [pc, #244]	; (3b4 <_Min_Heap_Size+0x1b4>)
     2be:	681b      	ldr	r3, [r3, #0]
     2c0:	4618      	mov	r0, r3
     2c2:	f001 fbc9 	bl	1a58 <stop_timer>
			laser_state = LASER_RAMP_PHASE_TWO;
     2c6:	4b3a      	ldr	r3, [pc, #232]	; (3b0 <_Min_Heap_Size+0x1b0>)
     2c8:	2205      	movs	r2, #5
     2ca:	701a      	strb	r2, [r3, #0]
			HAL_GPIO_WritePin(SCOPE_TRIG_OUT_GPIO_Port, SCOPE_TRIG_OUT_Pin, GPIO_PIN_RESET); // Sets trigger output low
     2cc:	2200      	movs	r2, #0
     2ce:	2101      	movs	r1, #1
     2d0:	4842      	ldr	r0, [pc, #264]	; (3dc <_Min_Heap_Size+0x1dc>)
     2d2:	f001 fc01 	bl	1ad8 <__HAL_GPIO_WritePin_veneer>
			reset_adc_samples(); //reset ADC samples including sample count
     2d6:	f000 f9af 	bl	638 <reset_adc_samples>
			start_timer(SWEEP_TIMER); //
     2da:	4b41      	ldr	r3, [pc, #260]	; (3e0 <_Min_Heap_Size+0x1e0>)
     2dc:	681b      	ldr	r3, [r3, #0]
     2de:	4618      	mov	r0, r3
     2e0:	f001 fb9c 	bl	1a1c <start_timer>
		    printf("Starting laser frequency scan. Allow %.2g seconds \r\n", (float)((LASER_MAX_MOD - LASER_MIN_MOD) / 186));
     2e4:	f04f 0200 	mov.w	r2, #0
     2e8:	4b3e      	ldr	r3, [pc, #248]	; (3e4 <_Min_Heap_Size+0x1e4>)
     2ea:	483f      	ldr	r0, [pc, #252]	; (3e8 <_Min_Heap_Size+0x1e8>)
     2ec:	f001 fbf8 	bl	1ae0 <__printf_veneer>
		    //break statement not required here

		case LASER_RAMP_PHASE_TWO: //finding F=2 dip
			if(adc_average_updated) {
     2f0:	4b31      	ldr	r3, [pc, #196]	; (3b8 <_Min_Heap_Size+0x1b8>)
     2f2:	781b      	ldrb	r3, [r3, #0]
     2f4:	2b00      	cmp	r3, #0
     2f6:	f000 8121 	beq.w	53c <_Min_Stack_Size+0x13c>
				if (adc_averaged_val < adc_averaged_min) {//if new minimum detected
     2fa:	4b30      	ldr	r3, [pc, #192]	; (3bc <_Min_Heap_Size+0x1bc>)
     2fc:	681a      	ldr	r2, [r3, #0]
     2fe:	4b3b      	ldr	r3, [pc, #236]	; (3ec <_Min_Heap_Size+0x1ec>)
     300:	681b      	ldr	r3, [r3, #0]
     302:	429a      	cmp	r2, r3
     304:	d207      	bcs.n	316 <_Min_Heap_Size+0x116>
					adc_averaged_min = adc_averaged_val; //record new mininum
     306:	4b2d      	ldr	r3, [pc, #180]	; (3bc <_Min_Heap_Size+0x1bc>)
     308:	681b      	ldr	r3, [r3, #0]
     30a:	4a38      	ldr	r2, [pc, #224]	; (3ec <_Min_Heap_Size+0x1ec>)
     30c:	6013      	str	r3, [r2, #0]
					saved_mod_value = laser_mod_value; //record the associated modulation value
     30e:	4b2d      	ldr	r3, [pc, #180]	; (3c4 <_Min_Heap_Size+0x1c4>)
     310:	881a      	ldrh	r2, [r3, #0]
     312:	4b37      	ldr	r3, [pc, #220]	; (3f0 <_Min_Heap_Size+0x1f0>)
     314:	801a      	strh	r2, [r3, #0]
				}
				/* Detect when we've passed F=2 dip
				 * If the latest reading is significantly higher than the minimum
				 * then record F=2 and look for F=3
				 */
				if ((adc_averaged_val - adc_averaged_min) >= DIP_THRESHOLD ) {//if the latest reading is significantly above the minimum
     316:	4b29      	ldr	r3, [pc, #164]	; (3bc <_Min_Heap_Size+0x1bc>)
     318:	681a      	ldr	r2, [r3, #0]
     31a:	4b34      	ldr	r3, [pc, #208]	; (3ec <_Min_Heap_Size+0x1ec>)
     31c:	681b      	ldr	r3, [r3, #0]
     31e:	1ad3      	subs	r3, r2, r3
     320:	2bf7      	cmp	r3, #247	; 0xf7
     322:	d90a      	bls.n	33a <_Min_Heap_Size+0x13a>
					F2_mod_value = saved_mod_value - moving_average_offset; //record the modulation value for the F=2 dip
     324:	4b32      	ldr	r3, [pc, #200]	; (3f0 <_Min_Heap_Size+0x1f0>)
     326:	881a      	ldrh	r2, [r3, #0]
     328:	4b32      	ldr	r3, [pc, #200]	; (3f4 <_Min_Heap_Size+0x1f4>)
     32a:	881b      	ldrh	r3, [r3, #0]
     32c:	1ad3      	subs	r3, r2, r3
     32e:	b29a      	uxth	r2, r3
     330:	4b31      	ldr	r3, [pc, #196]	; (3f8 <_Min_Heap_Size+0x1f8>)
     332:	801a      	strh	r2, [r3, #0]
//					adc_averaged_min = 0xFFFF; //reset the saved minimum
					laser_state = LASER_RAMP_PHASE_THREE;
     334:	4b1e      	ldr	r3, [pc, #120]	; (3b0 <_Min_Heap_Size+0x1b0>)
     336:	2206      	movs	r2, #6
     338:	701a      	strb	r2, [r3, #0]
				}
				laser_mod_value += LASER_STEP; //next laser step
     33a:	4b22      	ldr	r3, [pc, #136]	; (3c4 <_Min_Heap_Size+0x1c4>)
     33c:	881b      	ldrh	r3, [r3, #0]
     33e:	2203      	movs	r2, #3
     340:	4413      	add	r3, r2
     342:	b29a      	uxth	r2, r3
     344:	4b1f      	ldr	r3, [pc, #124]	; (3c4 <_Min_Heap_Size+0x1c4>)
     346:	801a      	strh	r2, [r3, #0]
				if (laser_mod_value >= LASER_MAX_MOD) {//if no longer in range
     348:	4b1e      	ldr	r3, [pc, #120]	; (3c4 <_Min_Heap_Size+0x1c4>)
     34a:	881b      	ldrh	r3, [r3, #0]
     34c:	f640 12c3 	movw	r2, #2499	; 0x9c3
     350:	4293      	cmp	r3, r2
     352:	d91c      	bls.n	38e <_Min_Heap_Size+0x18e>
				    printf("Have completed absorption scan without detecting any dips.\r\n");
     354:	4829      	ldr	r0, [pc, #164]	; (3fc <_Min_Heap_Size+0x1fc>)
     356:	f001 fbcb 	bl	1af0 <__puts_veneer>
				    printf("DIP_THRESHOLD: %u\r\n", DIP_THRESHOLD);
     35a:	21f8      	movs	r1, #248	; 0xf8
     35c:	4828      	ldr	r0, [pc, #160]	; (400 <_Min_Stack_Size>)
     35e:	f001 fbbf 	bl	1ae0 <__printf_veneer>
					sweep_time_s = (double) (stop_timer(SWEEP_TIMER)) / 1000000;
     362:	4b1f      	ldr	r3, [pc, #124]	; (3e0 <_Min_Heap_Size+0x1e0>)
     364:	681b      	ldr	r3, [r3, #0]
     366:	4618      	mov	r0, r3
     368:	f001 fb76 	bl	1a58 <stop_timer>
     36c:	ee07 0a90 	vmov	s15, r0
     370:	eeb8 6b67 	vcvt.f64.u32	d6, s15
     374:	ed9f 5b0c 	vldr	d5, [pc, #48]	; 3a8 <_Min_Heap_Size+0x1a8>
     378:	ee86 7b05 	vdiv.f64	d7, d6, d5
     37c:	ed87 7b02 	vstr	d7, [r7, #8]
					printf("Sweep complete in %.3g s.\r\n", sweep_time_s);
     380:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
     384:	481f      	ldr	r0, [pc, #124]	; (404 <_Min_Stack_Size+0x4>)
     386:	f001 fbab 	bl	1ae0 <__printf_veneer>
					Error_Handler();
     38a:	f001 fb99 	bl	1ac0 <__Error_Handler_veneer>
				}
				HAL_DAC_SetValue(&hdac1, DAC_CHANNEL_2, DAC_ALIGN_12B_R, laser_mod_value); //set DAC output pin
     38e:	4b0d      	ldr	r3, [pc, #52]	; (3c4 <_Min_Heap_Size+0x1c4>)
     390:	881b      	ldrh	r3, [r3, #0]
     392:	2200      	movs	r2, #0
     394:	2110      	movs	r1, #16
     396:	480e      	ldr	r0, [pc, #56]	; (3d0 <_Min_Heap_Size+0x1d0>)
     398:	f001 fbae 	bl	1af8 <__HAL_DAC_SetValue_veneer>
				//reset_adc_samples(); //reset ADC samples including sample count
				adc_average_updated = false; //clears new reading flag
     39c:	4b06      	ldr	r3, [pc, #24]	; (3b8 <_Min_Heap_Size+0x1b8>)
     39e:	2200      	movs	r2, #0
     3a0:	701a      	strb	r2, [r3, #0]
				action_taken = true;
     3a2:	2301      	movs	r3, #1
     3a4:	75fb      	strb	r3, [r7, #23]
			}
			break;
     3a6:	e0c9      	b.n	53c <_Min_Stack_Size+0x13c>
     3a8:	00000000 	.word	0x00000000
     3ac:	412e8480 	.word	0x412e8480
     3b0:	2000024c 	.word	0x2000024c
     3b4:	2000001c 	.word	0x2000001c
     3b8:	2000062c 	.word	0x2000062c
     3bc:	20000600 	.word	0x20000600
     3c0:	20000630 	.word	0x20000630
     3c4:	20000000 	.word	0x20000000
     3c8:	0801bbb0 	.word	0x0801bbb0
     3cc:	0801bbc4 	.word	0x0801bbc4
     3d0:	200002bc 	.word	0x200002bc
     3d4:	20000634 	.word	0x20000634
     3d8:	000f423f 	.word	0x000f423f
     3dc:	58021800 	.word	0x58021800
     3e0:	20000020 	.word	0x20000020
     3e4:	402a0000 	.word	0x402a0000
     3e8:	0801bc08 	.word	0x0801bc08
     3ec:	2000063c 	.word	0x2000063c
     3f0:	2000024e 	.word	0x2000024e
     3f4:	20000250 	.word	0x20000250
     3f8:	20000252 	.word	0x20000252
     3fc:	0801bc40 	.word	0x0801bc40
     400:	0801bc7c 	.word	0x0801bc7c
     404:	0801bc90 	.word	0x0801bc90

		case LASER_RAMP_PHASE_THREE: //rest of sweep including finding F=3 dip
			if(adc_average_updated) {
     408:	4b53      	ldr	r3, [pc, #332]	; (558 <_Min_Stack_Size+0x158>)
     40a:	781b      	ldrb	r3, [r3, #0]
     40c:	2b00      	cmp	r3, #0
     40e:	f000 8097 	beq.w	540 <_Min_Stack_Size+0x140>
				if (adc_averaged_val < adc_averaged_min) {//if new minimum detected
     412:	4b52      	ldr	r3, [pc, #328]	; (55c <_Min_Stack_Size+0x15c>)
     414:	681a      	ldr	r2, [r3, #0]
     416:	4b52      	ldr	r3, [pc, #328]	; (560 <_Min_Stack_Size+0x160>)
     418:	681b      	ldr	r3, [r3, #0]
     41a:	429a      	cmp	r2, r3
     41c:	d207      	bcs.n	42e <_Min_Stack_Size+0x2e>
					adc_averaged_min = adc_averaged_val; //record new mininum
     41e:	4b4f      	ldr	r3, [pc, #316]	; (55c <_Min_Stack_Size+0x15c>)
     420:	681b      	ldr	r3, [r3, #0]
     422:	4a4f      	ldr	r2, [pc, #316]	; (560 <_Min_Stack_Size+0x160>)
     424:	6013      	str	r3, [r2, #0]
					saved_mod_value = laser_mod_value; //record the associated modulation value
     426:	4b4f      	ldr	r3, [pc, #316]	; (564 <_Min_Stack_Size+0x164>)
     428:	881a      	ldrh	r2, [r3, #0]
     42a:	4b4f      	ldr	r3, [pc, #316]	; (568 <_Min_Stack_Size+0x168>)
     42c:	801a      	strh	r2, [r3, #0]
				}
				laser_mod_value += LASER_STEP; //next laser step
     42e:	4b4d      	ldr	r3, [pc, #308]	; (564 <_Min_Stack_Size+0x164>)
     430:	881b      	ldrh	r3, [r3, #0]
     432:	2203      	movs	r2, #3
     434:	4413      	add	r3, r2
     436:	b29a      	uxth	r2, r3
     438:	4b4a      	ldr	r3, [pc, #296]	; (564 <_Min_Stack_Size+0x164>)
     43a:	801a      	strh	r2, [r3, #0]
				if (laser_mod_value >= LASER_MAX_MOD) {//if no longer in range
     43c:	4b49      	ldr	r3, [pc, #292]	; (564 <_Min_Stack_Size+0x164>)
     43e:	881b      	ldrh	r3, [r3, #0]
     440:	f640 12c3 	movw	r2, #2499	; 0x9c3
     444:	4293      	cmp	r3, r2
     446:	d93c      	bls.n	4c2 <_Min_Stack_Size+0xc2>
					F3_mod_value = saved_mod_value - moving_average_offset; //record the modulation value for the F=3 dip
     448:	4b47      	ldr	r3, [pc, #284]	; (568 <_Min_Stack_Size+0x168>)
     44a:	881a      	ldrh	r2, [r3, #0]
     44c:	4b47      	ldr	r3, [pc, #284]	; (56c <_Min_Stack_Size+0x16c>)
     44e:	881b      	ldrh	r3, [r3, #0]
     450:	1ad3      	subs	r3, r2, r3
     452:	b29a      	uxth	r2, r3
     454:	4b46      	ldr	r3, [pc, #280]	; (570 <_Min_Stack_Size+0x170>)
     456:	801a      	strh	r2, [r3, #0]
					sweep_time_s = (double) (stop_timer(SWEEP_TIMER)) / 1000000;
     458:	4b46      	ldr	r3, [pc, #280]	; (574 <_Min_Stack_Size+0x174>)
     45a:	681b      	ldr	r3, [r3, #0]
     45c:	4618      	mov	r0, r3
     45e:	f001 fafb 	bl	1a58 <stop_timer>
     462:	ee07 0a90 	vmov	s15, r0
     466:	eeb8 6b67 	vcvt.f64.u32	d6, s15
     46a:	ed9f 5b39 	vldr	d5, [pc, #228]	; 550 <_Min_Stack_Size+0x150>
     46e:	ee86 7b05 	vdiv.f64	d7, d6, d5
     472:	ed87 7b02 	vstr	d7, [r7, #8]
					printf("Absorption spectroscopy complete in %.3g s.\r\n", sweep_time_s);
     476:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
     47a:	483f      	ldr	r0, [pc, #252]	; (578 <_Min_Stack_Size+0x178>)
     47c:	f001 fb30 	bl	1ae0 <__printf_veneer>
					printf("F=2 dip detected at step %u.\r\n", F2_mod_value);
     480:	4b3e      	ldr	r3, [pc, #248]	; (57c <_Min_Stack_Size+0x17c>)
     482:	881b      	ldrh	r3, [r3, #0]
     484:	4619      	mov	r1, r3
     486:	483e      	ldr	r0, [pc, #248]	; (580 <_Min_Stack_Size+0x180>)
     488:	f001 fb2a 	bl	1ae0 <__printf_veneer>
					printf("F=3 dip detected at step %u.\r\n", F3_mod_value);
     48c:	4b38      	ldr	r3, [pc, #224]	; (570 <_Min_Stack_Size+0x170>)
     48e:	881b      	ldrh	r3, [r3, #0]
     490:	4619      	mov	r1, r3
     492:	483c      	ldr	r0, [pc, #240]	; (584 <_Min_Stack_Size+0x184>)
     494:	f001 fb24 	bl	1ae0 <__printf_veneer>
					HAL_GPIO_WritePin(SCOPE_TRIG_OUT_GPIO_Port, SCOPE_TRIG_OUT_Pin, GPIO_PIN_SET); // Resets trigger output
     498:	2201      	movs	r2, #1
     49a:	2101      	movs	r1, #1
     49c:	483a      	ldr	r0, [pc, #232]	; (588 <_Min_Stack_Size+0x188>)
     49e:	f001 fb1b 	bl	1ad8 <__HAL_GPIO_WritePin_veneer>
					if (LOCK_TO_DIP == 2) {
						laser_mod_value = F2_mod_value;
					} else if (LOCK_TO_DIP == 3) {
						laser_mod_value = F3_mod_value;
     4a2:	4b33      	ldr	r3, [pc, #204]	; (570 <_Min_Stack_Size+0x170>)
     4a4:	881a      	ldrh	r2, [r3, #0]
     4a6:	4b2f      	ldr	r3, [pc, #188]	; (564 <_Min_Stack_Size+0x164>)
     4a8:	801a      	strh	r2, [r3, #0]
					} else {
						printf("Illegal DIP specified. LOCK_TO_DIP = %u.\r\n", LOCK_TO_DIP);
						Error_Handler();
					}
					printf("F=%u dip selected.\r\n", LOCK_TO_DIP);
     4aa:	2103      	movs	r1, #3
     4ac:	4837      	ldr	r0, [pc, #220]	; (58c <_Min_Stack_Size+0x18c>)
     4ae:	f001 fb17 	bl	1ae0 <__printf_veneer>
					laser_state = LASER_RAMP_PHASE_FOUR;
     4b2:	4b37      	ldr	r3, [pc, #220]	; (590 <_Min_Stack_Size+0x190>)
     4b4:	2207      	movs	r2, #7
     4b6:	701a      	strb	r2, [r3, #0]
					start_timer(MW_TIMER); //start 1s delay to allow laser to settle
     4b8:	4b36      	ldr	r3, [pc, #216]	; (594 <_Min_Stack_Size+0x194>)
     4ba:	681b      	ldr	r3, [r3, #0]
     4bc:	4618      	mov	r0, r3
     4be:	f001 faad 	bl	1a1c <start_timer>
				}
				HAL_DAC_SetValue(&hdac1, DAC_CHANNEL_2, DAC_ALIGN_12B_R, laser_mod_value); //set DAC output pin
     4c2:	4b28      	ldr	r3, [pc, #160]	; (564 <_Min_Stack_Size+0x164>)
     4c4:	881b      	ldrh	r3, [r3, #0]
     4c6:	2200      	movs	r2, #0
     4c8:	2110      	movs	r1, #16
     4ca:	4833      	ldr	r0, [pc, #204]	; (598 <_Min_Stack_Size+0x198>)
     4cc:	f001 fb14 	bl	1af8 <__HAL_DAC_SetValue_veneer>
				//reset_adc_samples(); //reset ADC samples including sample count
				adc_average_updated = false; //clears new reading flag
     4d0:	4b21      	ldr	r3, [pc, #132]	; (558 <_Min_Stack_Size+0x158>)
     4d2:	2200      	movs	r2, #0
     4d4:	701a      	strb	r2, [r3, #0]
				action_taken = true;
     4d6:	2301      	movs	r3, #1
     4d8:	75fb      	strb	r3, [r7, #23]
			}
			break;
     4da:	e031      	b.n	540 <_Min_Stack_Size+0x140>

		case LASER_RAMP_PHASE_FOUR: //waiting for the LD temperature to stabilise
			if (check_timer(MW_TIMER) < 1000000) return(false); //Still waiting, no action taken
     4dc:	4b2d      	ldr	r3, [pc, #180]	; (594 <_Min_Stack_Size+0x194>)
     4de:	681b      	ldr	r3, [r3, #0]
     4e0:	4618      	mov	r0, r3
     4e2:	f001 facb 	bl	1a7c <check_timer>
     4e6:	4603      	mov	r3, r0
     4e8:	4a2c      	ldr	r2, [pc, #176]	; (59c <_Min_Stack_Size+0x19c>)
     4ea:	4293      	cmp	r3, r2
     4ec:	d801      	bhi.n	4f2 <_Min_Stack_Size+0xf2>
     4ee:	2300      	movs	r3, #0
     4f0:	e028      	b.n	544 <_Min_Stack_Size+0x144>
			action_taken = true;
     4f2:	2301      	movs	r3, #1
     4f4:	75fb      	strb	r3, [r7, #23]
			stop_timer(MW_TIMER); //release MW_timer
     4f6:	4b27      	ldr	r3, [pc, #156]	; (594 <_Min_Stack_Size+0x194>)
     4f8:	681b      	ldr	r3, [r3, #0]
     4fa:	4618      	mov	r0, r3
     4fc:	f001 faac 	bl	1a58 <stop_timer>
			laser_state = LASER_ON_FREQ;
     500:	4b23      	ldr	r3, [pc, #140]	; (590 <_Min_Stack_Size+0x190>)
     502:	2200      	movs	r2, #0
     504:	701a      	strb	r2, [r3, #0]
			reset_adc_samples(); //reset ADC samples including sample count
     506:	f000 f897 	bl	638 <reset_adc_samples>
		    printf("LD temperature stabilised.\r\n");
     50a:	4825      	ldr	r0, [pc, #148]	; (5a0 <_Min_Stack_Size+0x1a0>)
     50c:	f001 faf0 	bl	1af0 <__puts_veneer>
		    absorption_dip_locked = 1;
     510:	4b24      	ldr	r3, [pc, #144]	; (5a4 <_Min_Stack_Size+0x1a4>)
     512:	2201      	movs	r2, #1
     514:	701a      	strb	r2, [r3, #0]
		    break;
     516:	e014      	b.n	542 <_Min_Stack_Size+0x142>

		default: // Other state
	       printf("laser_update has detected illegal state: %u \r\n", laser_state);
     518:	4b1d      	ldr	r3, [pc, #116]	; (590 <_Min_Stack_Size+0x190>)
     51a:	781b      	ldrb	r3, [r3, #0]
     51c:	4619      	mov	r1, r3
     51e:	4822      	ldr	r0, [pc, #136]	; (5a8 <_Min_Stack_Size+0x1a8>)
     520:	f001 fade 	bl	1ae0 <__printf_veneer>
	       printf("state: %u \r\n", local_copy_of_laser_state);
     524:	79fb      	ldrb	r3, [r7, #7]
     526:	4619      	mov	r1, r3
     528:	4820      	ldr	r0, [pc, #128]	; (5ac <_Min_Stack_Size+0x1ac>)
     52a:	f001 fad9 	bl	1ae0 <__printf_veneer>
     52e:	e008      	b.n	542 <_Min_Stack_Size+0x142>
			break; //no action to take
     530:	bf00      	nop
     532:	e006      	b.n	542 <_Min_Stack_Size+0x142>
			break;
     534:	bf00      	nop
     536:	e004      	b.n	542 <_Min_Stack_Size+0x142>
			break;
     538:	bf00      	nop
     53a:	e002      	b.n	542 <_Min_Stack_Size+0x142>
			break;
     53c:	bf00      	nop
     53e:	e000      	b.n	542 <_Min_Stack_Size+0x142>
			break;
     540:	bf00      	nop
	}
    return(action_taken);
     542:	7dfb      	ldrb	r3, [r7, #23]
}
     544:	4618      	mov	r0, r3
     546:	3718      	adds	r7, #24
     548:	46bd      	mov	sp, r7
     54a:	bd80      	pop	{r7, pc}
     54c:	f3af 8000 	nop.w
     550:	00000000 	.word	0x00000000
     554:	412e8480 	.word	0x412e8480
     558:	2000062c 	.word	0x2000062c
     55c:	20000600 	.word	0x20000600
     560:	2000063c 	.word	0x2000063c
     564:	20000000 	.word	0x20000000
     568:	2000024e 	.word	0x2000024e
     56c:	20000250 	.word	0x20000250
     570:	20000254 	.word	0x20000254
     574:	20000020 	.word	0x20000020
     578:	0801bcac 	.word	0x0801bcac
     57c:	20000252 	.word	0x20000252
     580:	0801bcdc 	.word	0x0801bcdc
     584:	0801bcfc 	.word	0x0801bcfc
     588:	58021800 	.word	0x58021800
     58c:	0801bd1c 	.word	0x0801bd1c
     590:	2000024c 	.word	0x2000024c
     594:	2000001c 	.word	0x2000001c
     598:	200002bc 	.word	0x200002bc
     59c:	000f423f 	.word	0x000f423f
     5a0:	0801bd34 	.word	0x0801bd34
     5a4:	20000256 	.word	0x20000256
     5a8:	0801bd50 	.word	0x0801bd50
     5ac:	0801bd80 	.word	0x0801bd80

000005b0 <measure_POP_cycle_time>:
  * @brief  Measure POP cycle time
  * @param  None
  * @retval None
  */
void measure_POP_cycle_time (void)
{
     5b0:	b580      	push	{r7, lr}
     5b2:	af00      	add	r7, sp, #0
	/* Measure the period of a POP cycle *AFTER* the ADC has been initialised
	 * Should be performed before calculating sweep settings
	 */
	stop_laser_tuning(); //ensure MW_timer not being used and laser tuning pin high
     5b4:	f7ff fda8 	bl	108 <stop_laser_tuning>
	start_timer(SWEEP_TIMER); //Using sweep timer for 3s timeout
     5b8:	4b13      	ldr	r3, [pc, #76]	; (608 <measure_POP_cycle_time+0x58>)
     5ba:	681b      	ldr	r3, [r3, #0]
     5bc:	4618      	mov	r0, r3
     5be:	f001 fa2d 	bl	1a1c <start_timer>
	start_POP_cycle_calibration(true);
     5c2:	2001      	movs	r0, #1
     5c4:	f000 fe90 	bl	12e8 <start_POP_cycle_calibration>
	//loop here until period of POP cycle has been measured or 3s has elapsed
	//When correctly connected, POP cycle measurement should take 1.3s
	while (!POP_period_us && (check_timer(SWEEP_TIMER) < 3000000)) {
     5c8:	e001      	b.n	5ce <measure_POP_cycle_time+0x1e>
		MW_update();
     5ca:	f000 ff71 	bl	14b0 <MW_update>
	while (!POP_period_us && (check_timer(SWEEP_TIMER) < 3000000)) {
     5ce:	4b0f      	ldr	r3, [pc, #60]	; (60c <measure_POP_cycle_time+0x5c>)
     5d0:	681b      	ldr	r3, [r3, #0]
     5d2:	2b00      	cmp	r3, #0
     5d4:	d108      	bne.n	5e8 <measure_POP_cycle_time+0x38>
     5d6:	4b0c      	ldr	r3, [pc, #48]	; (608 <measure_POP_cycle_time+0x58>)
     5d8:	681b      	ldr	r3, [r3, #0]
     5da:	4618      	mov	r0, r3
     5dc:	f001 fa4e 	bl	1a7c <check_timer>
     5e0:	4603      	mov	r3, r0
     5e2:	4a0b      	ldr	r2, [pc, #44]	; (610 <measure_POP_cycle_time+0x60>)
     5e4:	4293      	cmp	r3, r2
     5e6:	d9f0      	bls.n	5ca <measure_POP_cycle_time+0x1a>
//		printf("POP_period_us %lu, SWEEP_TIMER value %lu \r\n", POP_period_us, check_timer(SWEEP_TIMER));
	}
//	printf("Finished loop - POP_period_us %lu, SWEEP_TIMER value %lu \r\n", POP_period_us, check_timer(SWEEP_TIMER));
	stop_timer(SWEEP_TIMER); //stop SWEEP_TIMER
     5e8:	4b07      	ldr	r3, [pc, #28]	; (608 <measure_POP_cycle_time+0x58>)
     5ea:	681b      	ldr	r3, [r3, #0]
     5ec:	4618      	mov	r0, r3
     5ee:	f001 fa33 	bl	1a58 <stop_timer>
	if (!POP_period_us) {//if the calibration loop timed out
     5f2:	4b06      	ldr	r3, [pc, #24]	; (60c <measure_POP_cycle_time+0x5c>)
     5f4:	681b      	ldr	r3, [r3, #0]
     5f6:	2b00      	cmp	r3, #0
     5f8:	d102      	bne.n	600 <measure_POP_cycle_time+0x50>
		printf("WARNING - STM32 is not receiving a periodic sample from the FPGA \r\n");
     5fa:	4806      	ldr	r0, [pc, #24]	; (614 <measure_POP_cycle_time+0x64>)
     5fc:	f001 fa78 	bl	1af0 <__puts_veneer>
	}
	stop_MW_operation(); //release MW_SWEEP timer and ensure MW_INVALID is cleared
     600:	f000 ff36 	bl	1470 <stop_MW_operation>
}
     604:	bf00      	nop
     606:	bd80      	pop	{r7, pc}
     608:	20000020 	.word	0x20000020
     60c:	200005f8 	.word	0x200005f8
     610:	002dc6bf 	.word	0x002dc6bf
     614:	0801bd90 	.word	0x0801bd90

00000618 <system_mode_laser_tuning>:
{
     618:	b580      	push	{r7, lr}
     61a:	af00      	add	r7, sp, #0
	stop_MW_operation(); //resets MW timers, sets MW_invalid pin low (to ensure ADC sample pulse) and sets correct MW state
     61c:	f000 ff28 	bl	1470 <stop_MW_operation>
	HAL_GPIO_WritePin(LASER_TUNING_GPIO_Port, LASER_TUNING_Pin, GPIO_PIN_SET); // Laser_tuning output high
     620:	2201      	movs	r2, #1
     622:	f44f 5180 	mov.w	r1, #4096	; 0x1000
     626:	4803      	ldr	r0, [pc, #12]	; (634 <system_mode_laser_tuning+0x1c>)
     628:	f001 fa56 	bl	1ad8 <__HAL_GPIO_WritePin_veneer>
	reset_adc_samples(); //reset ADC samples including sample count
     62c:	f000 f804 	bl	638 <reset_adc_samples>
}
     630:	bf00      	nop
     632:	bd80      	pop	{r7, pc}
     634:	58020400 	.word	0x58020400

00000638 <reset_adc_samples>:
{
     638:	b480      	push	{r7}
     63a:	af00      	add	r7, sp, #0
	adc_average_updated = false; //signals to other functions that adc_averaged_val shouldn't be read
     63c:	4b08      	ldr	r3, [pc, #32]	; (660 <reset_adc_samples+0x28>)
     63e:	2200      	movs	r2, #0
     640:	701a      	strb	r2, [r3, #0]
	adc_sample_no = 0; //reset cyclical sample counter
     642:	4b08      	ldr	r3, [pc, #32]	; (664 <reset_adc_samples+0x2c>)
     644:	2200      	movs	r2, #0
     646:	801a      	strh	r2, [r3, #0]
	adc_readings_total = 0; //zeroes the total counter
     648:	4b07      	ldr	r3, [pc, #28]	; (668 <reset_adc_samples+0x30>)
     64a:	2200      	movs	r2, #0
     64c:	601a      	str	r2, [r3, #0]
	sample_count=0; //reset the main ADC sample counter
     64e:	4b07      	ldr	r3, [pc, #28]	; (66c <reset_adc_samples+0x34>)
     650:	2200      	movs	r2, #0
     652:	801a      	strh	r2, [r3, #0]
}
     654:	bf00      	nop
     656:	46bd      	mov	sp, r7
     658:	f85d 7b04 	ldr.w	r7, [sp], #4
     65c:	4770      	bx	lr
     65e:	bf00      	nop
     660:	2000062c 	.word	0x2000062c
     664:	20000624 	.word	0x20000624
     668:	20000628 	.word	0x20000628
     66c:	200005f6 	.word	0x200005f6

00000670 <synth_writereg>:
  * @param  Address
  * @param  Chip address
  * @param  Verify
  * @retval Contents read back from register
  */
static uint32_t synth_writereg(const uint32_t data, const uint32_t reg_address, const uint32_t chip_address, const bool verify) {
     670:	b580      	push	{r7, lr}
     672:	b08a      	sub	sp, #40	; 0x28
     674:	af00      	add	r7, sp, #0
     676:	60f8      	str	r0, [r7, #12]
     678:	60b9      	str	r1, [r7, #8]
     67a:	607a      	str	r2, [r7, #4]
     67c:	70fb      	strb	r3, [r7, #3]

	uint32_t read_data = 0;
     67e:	2300      	movs	r3, #0
     680:	627b      	str	r3, [r7, #36]	; 0x24
	const uint32_t write_data = (data << 8) | (reg_address << 3) | chip_address; // This is what we will write, 32 bits in total.
     682:	68fb      	ldr	r3, [r7, #12]
     684:	021a      	lsls	r2, r3, #8
     686:	68bb      	ldr	r3, [r7, #8]
     688:	00db      	lsls	r3, r3, #3
     68a:	4313      	orrs	r3, r2
     68c:	687a      	ldr	r2, [r7, #4]
     68e:	4313      	orrs	r3, r2
     690:	61fb      	str	r3, [r7, #28]
	#ifdef SPI_DEBUG
		printf("SPI BYTES WRITTEN: 0x%X \r\n", write_data);
	#endif //SPI_DEBUG
	HAL_GPIO_WritePin(SCLK_GPIO_Port, SCLK_Pin, 0);
     692:	2200      	movs	r2, #0
     694:	f44f 7180 	mov.w	r1, #256	; 0x100
     698:	4830      	ldr	r0, [pc, #192]	; (75c <synth_writereg+0xec>)
     69a:	f001 fa1d 	bl	1ad8 <__HAL_GPIO_WritePin_veneer>
	HAL_GPIO_WritePin(SEN_GPIO_Port, SEN_Pin, 0); // Take SEN low to indicate we are sending data
     69e:	2200      	movs	r2, #0
     6a0:	f44f 6100 	mov.w	r1, #2048	; 0x800
     6a4:	482d      	ldr	r0, [pc, #180]	; (75c <synth_writereg+0xec>)
     6a6:	f001 fa17 	bl	1ad8 <__HAL_GPIO_WritePin_veneer>

	/* Clock in the data */
	for (uint32_t i = 0; i < SYNTH_SPI_BITS; i++) {
     6aa:	2300      	movs	r3, #0
     6ac:	623b      	str	r3, [r7, #32]
     6ae:	e036      	b.n	71e <synth_writereg+0xae>

		/* Data written on the rising edge */
		uint32_t bit = (SYNTH_SPI_BITS - 1 - i);
     6b0:	2220      	movs	r2, #32
     6b2:	6a3b      	ldr	r3, [r7, #32]
     6b4:	1ad3      	subs	r3, r2, r3
     6b6:	3b01      	subs	r3, #1
     6b8:	617b      	str	r3, [r7, #20]
		HAL_GPIO_WritePin(MOSI_GPIO_Port, MOSI_Pin, !!(write_data & (1 << bit)));
     6ba:	2201      	movs	r2, #1
     6bc:	697b      	ldr	r3, [r7, #20]
     6be:	fa02 f303 	lsl.w	r3, r2, r3
     6c2:	461a      	mov	r2, r3
     6c4:	69fb      	ldr	r3, [r7, #28]
     6c6:	4013      	ands	r3, r2
     6c8:	2b00      	cmp	r3, #0
     6ca:	bf14      	ite	ne
     6cc:	2301      	movne	r3, #1
     6ce:	2300      	moveq	r3, #0
     6d0:	b2db      	uxtb	r3, r3
     6d2:	461a      	mov	r2, r3
     6d4:	f44f 7100 	mov.w	r1, #512	; 0x200
     6d8:	4820      	ldr	r0, [pc, #128]	; (75c <synth_writereg+0xec>)
     6da:	f001 f9fd 	bl	1ad8 <__HAL_GPIO_WritePin_veneer>
		HAL_GPIO_WritePin(SCLK_GPIO_Port, SCLK_Pin, 1);
     6de:	2201      	movs	r2, #1
     6e0:	f44f 7180 	mov.w	r1, #256	; 0x100
     6e4:	481d      	ldr	r0, [pc, #116]	; (75c <synth_writereg+0xec>)
     6e6:	f001 f9f7 	bl	1ad8 <__HAL_GPIO_WritePin_veneer>
		HAL_GPIO_WritePin(SCLK_GPIO_Port, SCLK_Pin, 0);
     6ea:	2200      	movs	r2, #0
     6ec:	f44f 7180 	mov.w	r1, #256	; 0x100
     6f0:	481a      	ldr	r0, [pc, #104]	; (75c <synth_writereg+0xec>)
     6f2:	f001 f9f1 	bl	1ad8 <__HAL_GPIO_WritePin_veneer>

		/* Data read on the falling edge */
		read_data = read_data
				| (HAL_GPIO_ReadPin(MISO_GPIO_Port, MISO_Pin)
     6f6:	f44f 6180 	mov.w	r1, #1024	; 0x400
     6fa:	4818      	ldr	r0, [pc, #96]	; (75c <synth_writereg+0xec>)
     6fc:	f001 f9e4 	bl	1ac8 <__HAL_GPIO_ReadPin_veneer>
     700:	4603      	mov	r3, r0
     702:	4619      	mov	r1, r3
						<< (SYNTH_SPI_BITS - 1 - i));
     704:	2220      	movs	r2, #32
     706:	6a3b      	ldr	r3, [r7, #32]
     708:	1ad3      	subs	r3, r2, r3
     70a:	3b01      	subs	r3, #1
     70c:	fa01 f303 	lsl.w	r3, r1, r3
     710:	461a      	mov	r2, r3
		read_data = read_data
     712:	6a7b      	ldr	r3, [r7, #36]	; 0x24
     714:	4313      	orrs	r3, r2
     716:	627b      	str	r3, [r7, #36]	; 0x24
	for (uint32_t i = 0; i < SYNTH_SPI_BITS; i++) {
     718:	6a3b      	ldr	r3, [r7, #32]
     71a:	3301      	adds	r3, #1
     71c:	623b      	str	r3, [r7, #32]
     71e:	2220      	movs	r2, #32
     720:	6a3b      	ldr	r3, [r7, #32]
     722:	4293      	cmp	r3, r2
     724:	d3c4      	bcc.n	6b0 <synth_writereg+0x40>
	}

	HAL_GPIO_WritePin(SEN_GPIO_Port, SEN_Pin, 1); // Assert the SEN line to register the transmitted data
     726:	2201      	movs	r2, #1
     728:	f44f 6100 	mov.w	r1, #2048	; 0x800
     72c:	480b      	ldr	r0, [pc, #44]	; (75c <synth_writereg+0xec>)
     72e:	f001 f9d3 	bl	1ad8 <__HAL_GPIO_WritePin_veneer>

	if (verify) {
     732:	78fb      	ldrb	r3, [r7, #3]
     734:	2b00      	cmp	r3, #0
     736:	d00c      	beq.n	752 <synth_writereg+0xe2>
		const uint32_t verify_data = synth_readreg(reg_address); // Data returned on the second cycle
     738:	68b8      	ldr	r0, [r7, #8]
     73a:	f000 f813 	bl	764 <synth_readreg>
     73e:	61b8      	str	r0, [r7, #24]
		if (verify_data != data) {
     740:	69ba      	ldr	r2, [r7, #24]
     742:	68fb      	ldr	r3, [r7, #12]
     744:	429a      	cmp	r2, r3
     746:	d004      	beq.n	752 <synth_writereg+0xe2>
			printf("SPI transmission error!\n");
     748:	4805      	ldr	r0, [pc, #20]	; (760 <synth_writereg+0xf0>)
     74a:	f001 f9d1 	bl	1af0 <__puts_veneer>
			Error_Handler(); // We enter an infinite loop here
     74e:	f001 f9b7 	bl	1ac0 <__Error_Handler_veneer>
		}
	}

	return read_data;
     752:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
     754:	4618      	mov	r0, r3
     756:	3728      	adds	r7, #40	; 0x28
     758:	46bd      	mov	sp, r7
     75a:	bd80      	pop	{r7, pc}
     75c:	58020800 	.word	0x58020800
     760:	0801c064 	.word	0x0801c064

00000764 <synth_readreg>:
/**
  * @brief  Reads a register.
  * @param  Address
  * @retval Register contents
  */
static uint32_t synth_readreg(const uint32_t reg_address){
     764:	b580      	push	{r7, lr}
     766:	b084      	sub	sp, #16
     768:	af00      	add	r7, sp, #0
     76a:	6078      	str	r0, [r7, #4]

    synth_writereg(reg_address, 0x0, 0x0, DONT_VERIFY); // First cycle to send the read address
     76c:	2300      	movs	r3, #0
     76e:	2200      	movs	r2, #0
     770:	2100      	movs	r1, #0
     772:	6878      	ldr	r0, [r7, #4]
     774:	f7ff ff7c 	bl	670 <synth_writereg>
    const uint32_t read_data = synth_writereg(reg_address, 0x0, 0x0, DONT_VERIFY);  // Data returned on the second cycle
     778:	2300      	movs	r3, #0
     77a:	2200      	movs	r2, #0
     77c:	2100      	movs	r1, #0
     77e:	6878      	ldr	r0, [r7, #4]
     780:	f7ff ff76 	bl	670 <synth_writereg>
     784:	60f8      	str	r0, [r7, #12]

    return (read_data >> 8); // We only care about the first 24 bits returned.
     786:	68fb      	ldr	r3, [r7, #12]
     788:	0a1b      	lsrs	r3, r3, #8

}
     78a:	4618      	mov	r0, r3
     78c:	3710      	adds	r7, #16
     78e:	46bd      	mov	sp, r7
     790:	bd80      	pop	{r7, pc}

00000792 <set_MW_power>:
/**
  * @brief  Program LO2 output gain.
  * @param  MW power setting
  * @retval Success/fail
  */
uint32_t set_MW_power (const uint8_t mw_power) {
     792:	b580      	push	{r7, lr}
     794:	b084      	sub	sp, #16
     796:	af00      	add	r7, sp, #0
     798:	4603      	mov	r3, r0
     79a:	71fb      	strb	r3, [r7, #7]
	if (mw_power > 3) {//check that LO2GAIN is an integer from 0 to 3 inclusive
     79c:	79fb      	ldrb	r3, [r7, #7]
     79e:	2b03      	cmp	r3, #3
     7a0:	d904      	bls.n	7ac <set_MW_power+0x1a>
		printf("illegal mw_power - must be an integer from 0 to 3!\n");
     7a2:	4811      	ldr	r0, [pc, #68]	; (7e8 <set_MW_power+0x56>)
     7a4:	f001 f9a4 	bl	1af0 <__puts_veneer>
		Error_Handler(); // We enter an infinite loop here
     7a8:	f001 f98a 	bl	1ac0 <__Error_Handler_veneer>
	}
	uint32_t read_data = synth_readreg(GAIN_DIVIDER_REGISTER); // Get the current value.
     7ac:	2016      	movs	r0, #22
     7ae:	f7ff ffd9 	bl	764 <synth_readreg>
     7b2:	60f8      	str	r0, [r7, #12]
	read_data &= 0xFFFFFCFF; 		// Zero bits 8:9.
     7b4:	68fb      	ldr	r3, [r7, #12]
     7b6:	f423 7340 	bic.w	r3, r3, #768	; 0x300
     7ba:	60fb      	str	r3, [r7, #12]
	read_data |= (mw_power << 8);	// Set LO2GAIN value.
     7bc:	79fb      	ldrb	r3, [r7, #7]
     7be:	021b      	lsls	r3, r3, #8
     7c0:	461a      	mov	r2, r3
     7c2:	68fb      	ldr	r3, [r7, #12]
     7c4:	4313      	orrs	r3, r2
     7c6:	60fb      	str	r3, [r7, #12]
	synth_writereg(read_data, GAIN_DIVIDER_REGISTER, 0x0, VERIFY); // Update the VCO divide register.
     7c8:	2301      	movs	r3, #1
     7ca:	2200      	movs	r2, #0
     7cc:	2116      	movs	r1, #22
     7ce:	68f8      	ldr	r0, [r7, #12]
     7d0:	f7ff ff4e 	bl	670 <synth_writereg>
	#ifdef MW_VERBOSE
		printf("PROGRAMMED GAIN DIVIDER REGISTER: 0x%lX \r\n", read_data);
	#endif
	printf("LO2 gain setting: %u \r\n", mw_power);
     7d4:	79fb      	ldrb	r3, [r7, #7]
     7d6:	4619      	mov	r1, r3
     7d8:	4804      	ldr	r0, [pc, #16]	; (7ec <set_MW_power+0x5a>)
     7da:	f001 f981 	bl	1ae0 <__printf_veneer>
	return SUCCESS;
     7de:	2300      	movs	r3, #0
}
     7e0:	4618      	mov	r0, r3
     7e2:	3710      	adds	r7, #16
     7e4:	46bd      	mov	sp, r7
     7e6:	bd80      	pop	{r7, pc}
     7e8:	0801c07c 	.word	0x0801c07c
     7ec:	0801c0b0 	.word	0x0801c0b0

000007f0 <init_synthesiser>:
/**
  * @brief  Initialises HMC835 synthesiser.
  * @param  MW power setting
  * @retval Success/fail
  */
uint32_t init_synthesiser(const uint8_t mw_power) {
     7f0:	b580      	push	{r7, lr}
     7f2:	b084      	sub	sp, #16
     7f4:	af00      	add	r7, sp, #0
     7f6:	4603      	mov	r3, r0
     7f8:	71fb      	strb	r3, [r7, #7]

	//Set pins to required initial conditions
	HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET); // Turn off the amber lock LED
     7fa:	2200      	movs	r2, #0
     7fc:	2102      	movs	r1, #2
     7fe:	4856      	ldr	r0, [pc, #344]	; (958 <init_synthesiser+0x168>)
     800:	f001 f96a 	bl	1ad8 <__HAL_GPIO_WritePin_veneer>
	HAL_GPIO_WritePin(SCOPE_TRIG_OUT_GPIO_Port, SCOPE_TRIG_OUT_Pin, GPIO_PIN_SET); // Sets trigger output high
     804:	2201      	movs	r2, #1
     806:	2101      	movs	r1, #1
     808:	4854      	ldr	r0, [pc, #336]	; (95c <init_synthesiser+0x16c>)
     80a:	f001 f965 	bl	1ad8 <__HAL_GPIO_WritePin_veneer>
	HAL_GPIO_WritePin(SCLK_GPIO_Port, SCLK_Pin, 0);
     80e:	2200      	movs	r2, #0
     810:	f44f 7180 	mov.w	r1, #256	; 0x100
     814:	4852      	ldr	r0, [pc, #328]	; (960 <init_synthesiser+0x170>)
     816:	f001 f95f 	bl	1ad8 <__HAL_GPIO_WritePin_veneer>
	HAL_GPIO_WritePin(SEN_GPIO_Port, SEN_Pin, 1);
     81a:	2201      	movs	r2, #1
     81c:	f44f 6100 	mov.w	r1, #2048	; 0x800
     820:	484f      	ldr	r0, [pc, #316]	; (960 <init_synthesiser+0x170>)
     822:	f001 f959 	bl	1ad8 <__HAL_GPIO_WritePin_veneer>
	HAL_GPIO_WritePin(REG_EN_GPIO_Port, REG_EN_Pin, 1); // Enable the main regulator.
     826:	2201      	movs	r2, #1
     828:	f44f 5180 	mov.w	r1, #4096	; 0x1000
     82c:	484c      	ldr	r0, [pc, #304]	; (960 <init_synthesiser+0x170>)
     82e:	f001 f953 	bl	1ad8 <__HAL_GPIO_WritePin_veneer>

	HAL_Delay(100); // Wait 100 ms for the supply to stabilise.
     832:	2064      	movs	r0, #100	; 0x64
     834:	f001 f94c 	bl	1ad0 <__HAL_Delay_veneer>

	synth_writereg(0x1UL << 5, OPEN_MODE_READ_ADDRESS, 0x0, DONT_VERIFY); // Soft reset.
     838:	2300      	movs	r3, #0
     83a:	2200      	movs	r2, #0
     83c:	2100      	movs	r1, #0
     83e:	2020      	movs	r0, #32
     840:	f7ff ff16 	bl	670 <synth_writereg>
	synth_writereg(0x41BFFF, ANALOG_EN_REGISTER, 0x0, VERIFY); // Set the SDO output level to 3.3 Volts
     844:	2301      	movs	r3, #1
     846:	2200      	movs	r2, #0
     848:	2108      	movs	r1, #8
     84a:	4846      	ldr	r0, [pc, #280]	; (964 <init_synthesiser+0x174>)
     84c:	f7ff ff10 	bl	670 <synth_writereg>

	uint32_t read_data = synth_readreg(ID_REGISTER); // Read the ID register to check the chip is communicating
     850:	2000      	movs	r0, #0
     852:	f7ff ff87 	bl	764 <synth_readreg>
     856:	60f8      	str	r0, [r7, #12]
	/* Check we have the correct ID */
	if (read_data != SYNTH_ID) {
     858:	4a43      	ldr	r2, [pc, #268]	; (968 <init_synthesiser+0x178>)
     85a:	68fb      	ldr	r3, [r7, #12]
     85c:	4293      	cmp	r3, r2
     85e:	d00a      	beq.n	876 <init_synthesiser+0x86>
		HAL_GPIO_WritePin(REG_EN_GPIO_Port, REG_EN_Pin, 0); // Disable the main regulator.
     860:	2200      	movs	r2, #0
     862:	f44f 5180 	mov.w	r1, #4096	; 0x1000
     866:	483e      	ldr	r0, [pc, #248]	; (960 <init_synthesiser+0x170>)
     868:	f001 f936 	bl	1ad8 <__HAL_GPIO_WritePin_veneer>
		printf("Incorrect synthesiser ID!\r\n");
     86c:	483f      	ldr	r0, [pc, #252]	; (96c <init_synthesiser+0x17c>)
     86e:	f001 f93f 	bl	1af0 <__puts_veneer>
		return ERROR;
     872:	2301      	movs	r3, #1
     874:	e066      	b.n	944 <init_synthesiser+0x154>
	}

	/* Everything looks good, we can communicate with the chip :-) */
	printf("HMC835 Detected.\r\n");
     876:	483e      	ldr	r0, [pc, #248]	; (970 <init_synthesiser+0x180>)
     878:	f001 f93a 	bl	1af0 <__puts_veneer>

	/* Enables Single-Ended output mode for LO2 output */
	read_data = synth_readreg(MODES_REGISTER); // Get the current value of the modes register
     87c:	2017      	movs	r0, #23
     87e:	f7ff ff71 	bl	764 <synth_readreg>
     882:	60f8      	str	r0, [r7, #12]
#ifdef MW_VERBOSE
	printf("READ MODES REGISTER: 0x%lX \r\n", read_data);
#endif
	read_data |= (0x1UL << 9);     // Enable single ended output for LO2 (LO2_P)
     884:	68fb      	ldr	r3, [r7, #12]
     886:	f443 7300 	orr.w	r3, r3, #512	; 0x200
     88a:	60fb      	str	r3, [r7, #12]
	read_data  &= ~(!AUTO_MUTE << 7); //can disable auto_mute - see variable declarations
     88c:	2301      	movs	r3, #1
     88e:	f083 0301 	eor.w	r3, r3, #1
     892:	b2db      	uxtb	r3, r3
     894:	01db      	lsls	r3, r3, #7
     896:	43db      	mvns	r3, r3
     898:	461a      	mov	r2, r3
     89a:	68fb      	ldr	r3, [r7, #12]
     89c:	4013      	ands	r3, r2
     89e:	60fb      	str	r3, [r7, #12]
	synth_writereg(read_data, MODES_REGISTER, 0x0, VERIFY); // Send
     8a0:	2301      	movs	r3, #1
     8a2:	2200      	movs	r2, #0
     8a4:	2117      	movs	r1, #23
     8a6:	68f8      	ldr	r0, [r7, #12]
     8a8:	f7ff fee2 	bl	670 <synth_writereg>
	//read_data = synth_readreg(LOCK_DETECT_REGISTER); // Get the current value.
	//read_data &= 0xFFFFFFF8; // Zero the first 3 LSBs.
	//read_data |= 0x07;
	//synth_writereg(read_data, LOCK_DETECT_REGISTER, 0x0, VERIFY); // Update the VCO divide register.

	synth_writereg(1, REFDIV_REGISTER, 0x0, VERIFY); // Reference divider setting.
     8ac:	2301      	movs	r3, #1
     8ae:	2200      	movs	r2, #0
     8b0:	2102      	movs	r1, #2
     8b2:	2001      	movs	r0, #1
     8b4:	f7ff fedc 	bl	670 <synth_writereg>
	printf("PROGRAMMED DIVIDER REGISTER: 0x01 \r\n");
#endif

	/* Lock detect training: This must be done after any change to the PD
	 * reference frequency or after power cycle. */
	read_data = synth_readreg(LOCK_DETECT_REGISTER); // Get contents of lock detect register
     8b8:	2007      	movs	r0, #7
     8ba:	f7ff ff53 	bl	764 <synth_readreg>
     8be:	60f8      	str	r0, [r7, #12]
#ifdef MW_VERBOSE
	printf("READ LOCK_DETECT_REGISTER: 0x%lX \r\n", read_data);
#endif
	read_data |= (0x1UL << 11);      // Enable lock-detect counters.
     8c0:	68fb      	ldr	r3, [r7, #12]
     8c2:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
     8c6:	60fb      	str	r3, [r7, #12]
	read_data |= (0x1UL << 14);      // Enable the lock-detect timer.
     8c8:	68fb      	ldr	r3, [r7, #12]
     8ca:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
     8ce:	60fb      	str	r3, [r7, #12]
	read_data |= (0x1UL << 20);      // Train the lock-detect timer.
     8d0:	68fb      	ldr	r3, [r7, #12]
     8d2:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
     8d6:	60fb      	str	r3, [r7, #12]
	synth_writereg(read_data, LOCK_DETECT_REGISTER, 0x0, VERIFY); // Send
     8d8:	2301      	movs	r3, #1
     8da:	2200      	movs	r2, #0
     8dc:	2107      	movs	r1, #7
     8de:	68f8      	ldr	r0, [r7, #12]
     8e0:	f7ff fec6 	bl	670 <synth_writereg>
#ifdef MW_VERBOSE
	printf("PROGRAMMED LOCK DETECT REGISTER: 0x%lX \r\n", read_data);
#endif
	HAL_Delay(10); // Wait 10 ms for training to complete, not sure if we really need to do this.
     8e4:	200a      	movs	r0, #10
     8e6:	f001 f8f3 	bl	1ad0 <__HAL_Delay_veneer>

	/* Program LO2 output gain */
	if (mw_power > 3) {//check that LO2GAIN is an integer from 0 to 3 inclusive
     8ea:	79fb      	ldrb	r3, [r7, #7]
     8ec:	2b03      	cmp	r3, #3
     8ee:	d904      	bls.n	8fa <init_synthesiser+0x10a>
		printf("illegal mw_power - must be an integer from 0 to 3!\n");
     8f0:	4820      	ldr	r0, [pc, #128]	; (974 <init_synthesiser+0x184>)
     8f2:	f001 f8fd 	bl	1af0 <__puts_veneer>
		Error_Handler();
     8f6:	f001 f8e3 	bl	1ac0 <__Error_Handler_veneer>
	}
	read_data = synth_readreg(GAIN_DIVIDER_REGISTER); // Get the current value.
     8fa:	2016      	movs	r0, #22
     8fc:	f7ff ff32 	bl	764 <synth_readreg>
     900:	60f8      	str	r0, [r7, #12]
	read_data &= 0xFFFFFCFF; 		// Zero bits 8:9.
     902:	68fb      	ldr	r3, [r7, #12]
     904:	f423 7340 	bic.w	r3, r3, #768	; 0x300
     908:	60fb      	str	r3, [r7, #12]
	read_data |= (mw_power << 8);	// Set LO2GAIN value.
     90a:	79fb      	ldrb	r3, [r7, #7]
     90c:	021b      	lsls	r3, r3, #8
     90e:	461a      	mov	r2, r3
     910:	68fb      	ldr	r3, [r7, #12]
     912:	4313      	orrs	r3, r2
     914:	60fb      	str	r3, [r7, #12]
	synth_writereg(read_data, GAIN_DIVIDER_REGISTER, 0x0, VERIFY); // Update the VCO divide register.
     916:	2301      	movs	r3, #1
     918:	2200      	movs	r2, #0
     91a:	2116      	movs	r1, #22
     91c:	68f8      	ldr	r0, [r7, #12]
     91e:	f7ff fea7 	bl	670 <synth_writereg>
	printf("PROGRAMMED GAIN DIVIDER REGISTER: 0x%lX \r\n", read_data);
	printf("LO2 gain setting: %u \r\n", mw_power);
#endif

	/* Sets output frequency to the hyperfine value */
	set_frequency_hz(HYPERFINE + MW_DELTA);
     922:	ed9f 0b0b 	vldr	d0, [pc, #44]	; 950 <init_synthesiser+0x160>
     926:	f000 f83e 	bl	9a6 <set_frequency_hz>
	//printf("Single frequency output: %f Hz \r\n", HYPERFINE);
	printf("Single frequency output: %.10g Hz \r\n", (double)(HYPERFINE + MW_DELTA));
     92a:	a309      	add	r3, pc, #36	; (adr r3, 950 <init_synthesiser+0x160>)
     92c:	e9d3 2300 	ldrd	r2, r3, [r3]
     930:	4811      	ldr	r0, [pc, #68]	; (978 <init_synthesiser+0x188>)
     932:	f001 f8d5 	bl	1ae0 <__printf_veneer>
	mw_sweep_settings.state = MW_STABILISING;
     936:	4b11      	ldr	r3, [pc, #68]	; (97c <init_synthesiser+0x18c>)
     938:	2202      	movs	r2, #2
     93a:	701a      	strb	r2, [r3, #0]
	mw_sweep_settings.next_state = MW_FIXED_FREQ;
     93c:	4b0f      	ldr	r3, [pc, #60]	; (97c <init_synthesiser+0x18c>)
     93e:	2201      	movs	r2, #1
     940:	705a      	strb	r2, [r3, #1]
	//mw_sweep_settings.valid = true;
	//HAL_GPIO_WritePin(MW_INVALID_GPIO_Port, MW_INVALID_Pin, GPIO_PIN_RESET); // MW_invalid output low
	return SUCCESS;
     942:	2300      	movs	r3, #0
}
     944:	4618      	mov	r0, r3
     946:	3710      	adds	r7, #16
     948:	46bd      	mov	sp, r7
     94a:	bd80      	pop	{r7, pc}
     94c:	f3af 8000 	nop.w
     950:	ea600000 	.word	0xea600000
     954:	41e69e35 	.word	0x41e69e35
     958:	58021000 	.word	0x58021000
     95c:	58021800 	.word	0x58021800
     960:	58020800 	.word	0x58020800
     964:	0041bfff 	.word	0x0041bfff
     968:	00c7701a 	.word	0x00c7701a
     96c:	0801c0c8 	.word	0x0801c0c8
     970:	0801c0e4 	.word	0x0801c0e4
     974:	0801c07c 	.word	0x0801c07c
     978:	0801c0f8 	.word	0x0801c0f8
     97c:	20000648 	.word	0x20000648

00000980 <lock_status>:
/**
  * @brief  Checks for MW frequency lock
  * @param  None
  * @retval Lock status
  */
static const bool lock_status(void) {
     980:	b580      	push	{r7, lr}
     982:	b082      	sub	sp, #8
     984:	af00      	add	r7, sp, #0

	bool locked = synth_readreg(GPOLD_REGISTER) & (1UL << 1);
     986:	2012      	movs	r0, #18
     988:	f7ff feec 	bl	764 <synth_readreg>
     98c:	4603      	mov	r3, r0
     98e:	f003 0302 	and.w	r3, r3, #2
     992:	2b00      	cmp	r3, #0
     994:	bf14      	ite	ne
     996:	2301      	movne	r3, #1
     998:	2300      	moveq	r3, #0
     99a:	71fb      	strb	r3, [r7, #7]
	return locked;
     99c:	79fb      	ldrb	r3, [r7, #7]

}
     99e:	4618      	mov	r0, r3
     9a0:	3708      	adds	r7, #8
     9a2:	46bd      	mov	sp, r7
     9a4:	bd80      	pop	{r7, pc}

000009a6 <set_frequency_hz>:
/**
  * @brief  Translate a frequency into register values for programming to HMC835
  * @param  Frequency
  * @retval None
  */
void set_frequency_hz(const double fo) {
     9a6:	b580      	push	{r7, lr}
     9a8:	b088      	sub	sp, #32
     9aa:	af00      	add	r7, sp, #0
     9ac:	ed87 0b00 	vstr	d0, [r7]

#ifdef OPTIMISED_FOR_3_035GHZ_GENERATION
	/* Code optimisation for Generation of frequencies close to 3.035GHz
	 * k always equals 1
	 */
	uint32_t k = 1;
     9b0:	2301      	movs	r3, #1
     9b2:	61fb      	str	r3, [r7, #28]
//		}
//	}
#endif //OPTIMISED_FOR_3_035GHZ_GENERATION

	/* Calculate the N division ratio */
	const double N = ((fo * k) / REF_FREQ);
     9b4:	69fb      	ldr	r3, [r7, #28]
     9b6:	ee07 3a90 	vmov	s15, r3
     9ba:	eeb8 6b67 	vcvt.f64.u32	d6, s15
     9be:	ed97 7b00 	vldr	d7, [r7]
     9c2:	ee26 6b07 	vmul.f64	d6, d6, d7
     9c6:	ed9f 5b2a 	vldr	d5, [pc, #168]	; a70 <set_frequency_hz+0xca>
     9ca:	ee86 7b05 	vdiv.f64	d7, d6, d5
     9ce:	ed87 7b04 	vstr	d7, [r7, #16]

	/* Extract the fractional and integer parts */
	const uint32_t NINT = N;
     9d2:	ed97 7b04 	vldr	d7, [r7, #16]
     9d6:	eefc 7bc7 	vcvt.u32.f64	s15, d7
     9da:	ee17 3a90 	vmov	r3, s15
     9de:	60fb      	str	r3, [r7, #12]
	const uint32_t NFRAC = ((N - NINT) * (1 << 24)) + 0.5;
     9e0:	68fb      	ldr	r3, [r7, #12]
     9e2:	ee07 3a90 	vmov	s15, r3
     9e6:	eeb8 7b67 	vcvt.f64.u32	d7, s15
     9ea:	ed97 6b04 	vldr	d6, [r7, #16]
     9ee:	ee36 7b47 	vsub.f64	d7, d6, d7
     9f2:	ed9f 6b21 	vldr	d6, [pc, #132]	; a78 <set_frequency_hz+0xd2>
     9f6:	ee27 7b06 	vmul.f64	d7, d7, d6
     9fa:	eeb6 6b00 	vmov.f64	d6, #96	; 0x3f000000  0.5
     9fe:	ee37 7b06 	vadd.f64	d7, d7, d6
     a02:	eefc 7bc7 	vcvt.u32.f64	s15, d7
     a06:	ee17 3a90 	vmov	r3, s15
     a0a:	60bb      	str	r3, [r7, #8]
		printf("Failed to establish synthesiser frequency accurately\r\n");
		Error_Handler();
	}
#endif

	HAL_GPIO_WritePin(MW_INVALID_GPIO_Port, MW_INVALID_Pin, GPIO_PIN_SET); //Sets MW_invalid pin high
     a0c:	2201      	movs	r2, #1
     a0e:	2102      	movs	r1, #2
     a10:	481b      	ldr	r0, [pc, #108]	; (a80 <set_frequency_hz+0xda>)
     a12:	f001 f861 	bl	1ad8 <__HAL_GPIO_WritePin_veneer>
	//set_frequency(NINT, NFRAC, k, MANUAL_MUTE); //Sets only the necessary Hittite registers
	set_freq_regs(NINT, NFRAC, k); //Sets only the necessary Hittite registers
     a16:	69fa      	ldr	r2, [r7, #28]
     a18:	68b9      	ldr	r1, [r7, #8]
     a1a:	68f8      	ldr	r0, [r7, #12]
     a1c:	f000 f838 	bl	a90 <set_freq_regs>

	//MW stabilisation delay and check for lock
	timer_delay(MW_TIMER, MW_STABILISE_TIME_US);
     a20:	4b18      	ldr	r3, [pc, #96]	; (a84 <set_frequency_hz+0xde>)
     a22:	681b      	ldr	r3, [r3, #0]
     a24:	f241 7270 	movw	r2, #6000	; 0x1770
     a28:	4611      	mov	r1, r2
     a2a:	4618      	mov	r0, r3
     a2c:	f001 f832 	bl	1a94 <timer_delay>
	//if (!poll_until_locked(LOCK_WAIT_US)) {
	if (!lock_status()) {
     a30:	f7ff ffa6 	bl	980 <lock_status>
     a34:	4603      	mov	r3, r0
     a36:	f083 0301 	eor.w	r3, r3, #1
     a3a:	b2db      	uxtb	r3, r3
     a3c:	2b00      	cmp	r3, #0
     a3e:	d011      	beq.n	a64 <set_frequency_hz+0xbe>
		HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET); //turn off amber LED
     a40:	2200      	movs	r2, #0
     a42:	2102      	movs	r1, #2
     a44:	4810      	ldr	r0, [pc, #64]	; (a88 <set_frequency_hz+0xe2>)
     a46:	f001 f847 	bl	1ad8 <__HAL_GPIO_WritePin_veneer>
		printf("Failed to establish MW Lock within %ld us of setting frequency!\r\n", MW_STABILISE_TIME_US);
     a4a:	f241 7370 	movw	r3, #6000	; 0x1770
     a4e:	4619      	mov	r1, r3
     a50:	480e      	ldr	r0, [pc, #56]	; (a8c <set_frequency_hz+0xe6>)
     a52:	f001 f845 	bl	1ae0 <__printf_veneer>
#ifdef HALT_ON_LOSS_OF_LOCK
		Error_Handler();
     a56:	f001 f833 	bl	1ac0 <__Error_Handler_veneer>
#endif //HALT_ON_LOSS_OF_LOCK
		HAL_GPIO_WritePin(MW_INVALID_GPIO_Port, MW_INVALID_Pin, GPIO_PIN_RESET); //Sets MW_invalid pin low
     a5a:	2200      	movs	r2, #0
     a5c:	2102      	movs	r1, #2
     a5e:	4808      	ldr	r0, [pc, #32]	; (a80 <set_frequency_hz+0xda>)
     a60:	f001 f83a 	bl	1ad8 <__HAL_GPIO_WritePin_veneer>
	}

}
     a64:	bf00      	nop
     a66:	3720      	adds	r7, #32
     a68:	46bd      	mov	sp, r7
     a6a:	bd80      	pop	{r7, pc}
     a6c:	f3af 8000 	nop.w
     a70:	00000000 	.word	0x00000000
     a74:	4187d784 	.word	0x4187d784
     a78:	00000000 	.word	0x00000000
     a7c:	41700000 	.word	0x41700000
     a80:	58020400 	.word	0x58020400
     a84:	2000001c 	.word	0x2000001c
     a88:	58021000 	.word	0x58021000
     a8c:	0801c120 	.word	0x0801c120

00000a90 <set_freq_regs>:
static void set_freq_regs(const uint32_t integer, const uint32_t fraction, const uint32_t vco_divider) {
     a90:	b580      	push	{r7, lr}
     a92:	b086      	sub	sp, #24
     a94:	af00      	add	r7, sp, #0
     a96:	60f8      	str	r0, [r7, #12]
     a98:	60b9      	str	r1, [r7, #8]
     a9a:	607a      	str	r2, [r7, #4]
	uint32_t read_data = 0x0;
     a9c:	2300      	movs	r3, #0
     a9e:	617b      	str	r3, [r7, #20]
	if (last_vcodiv == -1 || (last_vcodiv != vco_divider)) {
     aa0:	4b24      	ldr	r3, [pc, #144]	; (b34 <set_freq_regs+0xa4>)
     aa2:	681b      	ldr	r3, [r3, #0]
     aa4:	f1b3 3fff 	cmp.w	r3, #4294967295
     aa8:	d004      	beq.n	ab4 <set_freq_regs+0x24>
     aaa:	4b22      	ldr	r3, [pc, #136]	; (b34 <set_freq_regs+0xa4>)
     aac:	681b      	ldr	r3, [r3, #0]
     aae:	687a      	ldr	r2, [r7, #4]
     ab0:	429a      	cmp	r2, r3
     ab2:	d014      	beq.n	ade <set_freq_regs+0x4e>
		read_data = synth_readreg(GAIN_DIVIDER_REGISTER); // Get the current value.
     ab4:	2016      	movs	r0, #22
     ab6:	f7ff fe55 	bl	764 <synth_readreg>
     aba:	6178      	str	r0, [r7, #20]
		read_data &= 0xFFFFFFC0; // Zero the first 6 LSBs (VCO division value - mute).
     abc:	697b      	ldr	r3, [r7, #20]
     abe:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
     ac2:	617b      	str	r3, [r7, #20]
		read_data |= vco_divider; // This will set k which will un-mute the outputs */
     ac4:	697a      	ldr	r2, [r7, #20]
     ac6:	687b      	ldr	r3, [r7, #4]
     ac8:	4313      	orrs	r3, r2
     aca:	617b      	str	r3, [r7, #20]
		synth_writereg(read_data, GAIN_DIVIDER_REGISTER, 0x0, VERIFY); // Update the VCO divide register.
     acc:	2301      	movs	r3, #1
     ace:	2200      	movs	r2, #0
     ad0:	2116      	movs	r1, #22
     ad2:	6978      	ldr	r0, [r7, #20]
     ad4:	f7ff fdcc 	bl	670 <synth_writereg>
		last_vcodiv = vco_divider;
     ad8:	4a16      	ldr	r2, [pc, #88]	; (b34 <set_freq_regs+0xa4>)
     ada:	687b      	ldr	r3, [r7, #4]
     adc:	6013      	str	r3, [r2, #0]
	if (last_integer == -1 || (last_integer != integer)) {
     ade:	4b16      	ldr	r3, [pc, #88]	; (b38 <set_freq_regs+0xa8>)
     ae0:	681b      	ldr	r3, [r3, #0]
     ae2:	f1b3 3fff 	cmp.w	r3, #4294967295
     ae6:	d004      	beq.n	af2 <set_freq_regs+0x62>
     ae8:	4b13      	ldr	r3, [pc, #76]	; (b38 <set_freq_regs+0xa8>)
     aea:	681b      	ldr	r3, [r3, #0]
     aec:	68fa      	ldr	r2, [r7, #12]
     aee:	429a      	cmp	r2, r3
     af0:	d008      	beq.n	b04 <set_freq_regs+0x74>
		synth_writereg(integer, INTEGER_FREQUENCY_REGISTER, 0x0, VERIFY);   // Integer register.
     af2:	2301      	movs	r3, #1
     af4:	2200      	movs	r2, #0
     af6:	2103      	movs	r1, #3
     af8:	68f8      	ldr	r0, [r7, #12]
     afa:	f7ff fdb9 	bl	670 <synth_writereg>
		last_integer = integer;
     afe:	4a0e      	ldr	r2, [pc, #56]	; (b38 <set_freq_regs+0xa8>)
     b00:	68fb      	ldr	r3, [r7, #12]
     b02:	6013      	str	r3, [r2, #0]
	if (last_fraction == -1 || (last_fraction != fraction)) {
     b04:	4b0d      	ldr	r3, [pc, #52]	; (b3c <set_freq_regs+0xac>)
     b06:	681b      	ldr	r3, [r3, #0]
     b08:	f1b3 3fff 	cmp.w	r3, #4294967295
     b0c:	d004      	beq.n	b18 <set_freq_regs+0x88>
     b0e:	4b0b      	ldr	r3, [pc, #44]	; (b3c <set_freq_regs+0xac>)
     b10:	681b      	ldr	r3, [r3, #0]
     b12:	68ba      	ldr	r2, [r7, #8]
     b14:	429a      	cmp	r2, r3
     b16:	d008      	beq.n	b2a <set_freq_regs+0x9a>
		synth_writereg(fraction, FRACTIONAL_FREQUENCY_REGISTER, 0x0, VERIFY);  // Fractional register.
     b18:	2301      	movs	r3, #1
     b1a:	2200      	movs	r2, #0
     b1c:	2104      	movs	r1, #4
     b1e:	68b8      	ldr	r0, [r7, #8]
     b20:	f7ff fda6 	bl	670 <synth_writereg>
		last_fraction = fraction;
     b24:	4a05      	ldr	r2, [pc, #20]	; (b3c <set_freq_regs+0xac>)
     b26:	68bb      	ldr	r3, [r7, #8]
     b28:	6013      	str	r3, [r2, #0]
}
     b2a:	bf00      	nop
     b2c:	3718      	adds	r7, #24
     b2e:	46bd      	mov	sp, r7
     b30:	bd80      	pop	{r7, pc}
     b32:	bf00      	nop
     b34:	20000004 	.word	0x20000004
     b38:	20000008 	.word	0x20000008
     b3c:	2000000c 	.word	0x2000000c

00000b40 <calc_defined_step_MW_sweep>:
  * @param  POP cycles per point
  * @param  Number of points
  * @param	POP_period in us
  * @retval Success/failure or early termination
  */
bool calc_defined_step_MW_sweep(const double centre_freq, const double span, const uint32_t pop_cycles_per_point, const uint32_t num_points_req) {
     b40:	b580      	push	{r7, lr}
     b42:	b094      	sub	sp, #80	; 0x50
     b44:	af02      	add	r7, sp, #8
     b46:	ed87 0b04 	vstr	d0, [r7, #16]
     b4a:	ed87 1b02 	vstr	d1, [r7, #8]
     b4e:	6078      	str	r0, [r7, #4]
     b50:	6039      	str	r1, [r7, #0]
	printf("MW sweep will have %.10g GHz centre frequency with %.5g Hz span\r\n", centre_freq/1000000000, span);
     b52:	ed97 7b04 	vldr	d7, [r7, #16]
     b56:	ed9f 6b8e 	vldr	d6, [pc, #568]	; d90 <calc_defined_step_MW_sweep+0x250>
     b5a:	ee87 5b06 	vdiv.f64	d5, d7, d6
     b5e:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
     b62:	e9cd 2300 	strd	r2, r3, [sp]
     b66:	ec53 2b15 	vmov	r2, r3, d5
     b6a:	4893      	ldr	r0, [pc, #588]	; (db8 <calc_defined_step_MW_sweep+0x278>)
     b6c:	f000 ffb8 	bl	1ae0 <__printf_veneer>
	printf("and %ld POP cycles per point\r\n", pop_cycles_per_point);
     b70:	6879      	ldr	r1, [r7, #4]
     b72:	4892      	ldr	r0, [pc, #584]	; (dbc <calc_defined_step_MW_sweep+0x27c>)
     b74:	f000 ffb4 	bl	1ae0 <__printf_veneer>
	mw_sweep_settings.sweep_type = FIXED_STEPS;
     b78:	4b91      	ldr	r3, [pc, #580]	; (dc0 <calc_defined_step_MW_sweep+0x280>)
     b7a:	2200      	movs	r2, #0
     b7c:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48
	mw_sweep_settings.pop_cycles_per_point = pop_cycles_per_point;
     b80:	4a8f      	ldr	r2, [pc, #572]	; (dc0 <calc_defined_step_MW_sweep+0x280>)
     b82:	687b      	ldr	r3, [r7, #4]
     b84:	6193      	str	r3, [r2, #24]
	mw_sweep_settings.centre_freq = centre_freq;
     b86:	498e      	ldr	r1, [pc, #568]	; (dc0 <calc_defined_step_MW_sweep+0x280>)
     b88:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
     b8c:	e9c1 230c 	strd	r2, r3, [r1, #48]	; 0x30
	mw_sweep_settings.span = span;
     b90:	498b      	ldr	r1, [pc, #556]	; (dc0 <calc_defined_step_MW_sweep+0x280>)
     b92:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
     b96:	e9c1 230e 	strd	r2, r3, [r1, #56]	; 0x38

	/* Calculate start frequency */
	double start_freq = centre_freq - 0.5* span;
     b9a:	ed97 7b02 	vldr	d7, [r7, #8]
     b9e:	eeb6 6b00 	vmov.f64	d6, #96	; 0x3f000000  0.5
     ba2:	ee27 7b06 	vmul.f64	d7, d7, d6
     ba6:	ed97 6b04 	vldr	d6, [r7, #16]
     baa:	ee36 7b47 	vsub.f64	d7, d6, d7
     bae:	ed87 7b10 	vstr	d7, [r7, #64]	; 0x40
	mw_sweep_settings.k = calculate_k(start_freq);
     bb2:	ed97 0b10 	vldr	d0, [r7, #64]	; 0x40
     bb6:	f000 fb6d 	bl	1294 <calculate_k>
     bba:	4603      	mov	r3, r0
     bbc:	b2da      	uxtb	r2, r3
     bbe:	4b80      	ldr	r3, [pc, #512]	; (dc0 <calc_defined_step_MW_sweep+0x280>)
     bc0:	709a      	strb	r2, [r3, #2]

	/* Extrapolate step size requested versus achievable  */
	const double step_size_Hz = span / (num_points_req - 1);
     bc2:	683b      	ldr	r3, [r7, #0]
     bc4:	3b01      	subs	r3, #1
     bc6:	ee07 3a90 	vmov	s15, r3
     bca:	eeb8 6b67 	vcvt.f64.u32	d6, s15
     bce:	ed97 5b02 	vldr	d5, [r7, #8]
     bd2:	ee85 7b06 	vdiv.f64	d7, d5, d6
     bd6:	ed87 7b0e 	vstr	d7, [r7, #56]	; 0x38
	printf("Requested %ld steps, therefore step size of %.3g Hz\r\n", num_points_req, step_size_Hz);
     bda:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
     bde:	6839      	ldr	r1, [r7, #0]
     be0:	4878      	ldr	r0, [pc, #480]	; (dc4 <calc_defined_step_MW_sweep+0x284>)
     be2:	f000 ff7d 	bl	1ae0 <__printf_veneer>
	const double unit_step_size_Hz = REF_FREQ / (double) (mw_sweep_settings.k * (1 << 24)); //minimum step size possible
     be6:	ed9f 5b6c 	vldr	d5, [pc, #432]	; d98 <calc_defined_step_MW_sweep+0x258>
     bea:	4b75      	ldr	r3, [pc, #468]	; (dc0 <calc_defined_step_MW_sweep+0x280>)
     bec:	789b      	ldrb	r3, [r3, #2]
     bee:	061b      	lsls	r3, r3, #24
     bf0:	ee07 3a90 	vmov	s15, r3
     bf4:	eeb8 6be7 	vcvt.f64.s32	d6, s15
     bf8:	ee85 7b06 	vdiv.f64	d7, d5, d6
     bfc:	ed87 7b0c 	vstr	d7, [r7, #48]	; 0x30
	//printf("Unit step size: %.3g Hz\r\n", unit_step_size_Hz);
	mw_sweep_settings.step_size = (step_size_Hz / unit_step_size_Hz + 0.5);
     c00:	ed97 5b0e 	vldr	d5, [r7, #56]	; 0x38
     c04:	ed97 6b0c 	vldr	d6, [r7, #48]	; 0x30
     c08:	ee85 7b06 	vdiv.f64	d7, d5, d6
     c0c:	eeb6 6b00 	vmov.f64	d6, #96	; 0x3f000000  0.5
     c10:	ee37 7b06 	vadd.f64	d7, d7, d6
     c14:	eefc 7bc7 	vcvt.u32.f64	s15, d7
     c18:	ee17 2a90 	vmov	r2, s15
     c1c:	4b68      	ldr	r3, [pc, #416]	; (dc0 <calc_defined_step_MW_sweep+0x280>)
     c1e:	615a      	str	r2, [r3, #20]
	if (!mw_sweep_settings.step_size) { //step_size must be a positive non-zero integer
     c20:	4b67      	ldr	r3, [pc, #412]	; (dc0 <calc_defined_step_MW_sweep+0x280>)
     c22:	695b      	ldr	r3, [r3, #20]
     c24:	2b00      	cmp	r3, #0
     c26:	d104      	bne.n	c32 <calc_defined_step_MW_sweep+0xf2>
		mw_sweep_settings.step_size++;
     c28:	4b65      	ldr	r3, [pc, #404]	; (dc0 <calc_defined_step_MW_sweep+0x280>)
     c2a:	695b      	ldr	r3, [r3, #20]
     c2c:	3301      	adds	r3, #1
     c2e:	4a64      	ldr	r2, [pc, #400]	; (dc0 <calc_defined_step_MW_sweep+0x280>)
     c30:	6153      	str	r3, [r2, #20]
	}
	const double achieved_step_size = (double) (mw_sweep_settings.step_size * unit_step_size_Hz);
     c32:	4b63      	ldr	r3, [pc, #396]	; (dc0 <calc_defined_step_MW_sweep+0x280>)
     c34:	695b      	ldr	r3, [r3, #20]
     c36:	ee07 3a90 	vmov	s15, r3
     c3a:	eeb8 7b67 	vcvt.f64.u32	d7, s15
     c3e:	ed97 6b0c 	vldr	d6, [r7, #48]	; 0x30
     c42:	ee26 7b07 	vmul.f64	d7, d6, d7
     c46:	ed87 7b0a 	vstr	d7, [r7, #40]	; 0x28
	printf("Step size achieved: %.3g Hz\r\n", achieved_step_size);
     c4a:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
     c4e:	485e      	ldr	r0, [pc, #376]	; (dc8 <calc_defined_step_MW_sweep+0x288>)
     c50:	f000 ff46 	bl	1ae0 <__printf_veneer>
	mw_sweep_settings.num_steps = span / achieved_step_size;
     c54:	ed97 5b02 	vldr	d5, [r7, #8]
     c58:	ed97 6b0a 	vldr	d6, [r7, #40]	; 0x28
     c5c:	ee85 7b06 	vdiv.f64	d7, d5, d6
     c60:	eefc 7bc7 	vcvt.u32.f64	s15, d7
     c64:	ee17 2a90 	vmov	r2, s15
     c68:	4b55      	ldr	r3, [pc, #340]	; (dc0 <calc_defined_step_MW_sweep+0x280>)
     c6a:	611a      	str	r2, [r3, #16]

	/* Can avoid spurs if frequency requested can be encoded exactly  */
	start_freq = ((long)(start_freq/unit_step_size_Hz)) * unit_step_size_Hz;
     c6c:	ed97 5b10 	vldr	d5, [r7, #64]	; 0x40
     c70:	ed97 6b0c 	vldr	d6, [r7, #48]	; 0x30
     c74:	ee85 7b06 	vdiv.f64	d7, d5, d6
     c78:	eefd 7bc7 	vcvt.s32.f64	s15, d7
     c7c:	eeb8 7be7 	vcvt.f64.s32	d7, s15
     c80:	ed97 6b0c 	vldr	d6, [r7, #48]	; 0x30
     c84:	ee26 7b07 	vmul.f64	d7, d6, d7
     c88:	ed87 7b10 	vstr	d7, [r7, #64]	; 0x40

	/* Calculate the N division ratio, extracting the fractional and integer parts */
	const double N = ((start_freq * mw_sweep_settings.k) / REF_FREQ);
     c8c:	4b4c      	ldr	r3, [pc, #304]	; (dc0 <calc_defined_step_MW_sweep+0x280>)
     c8e:	789b      	ldrb	r3, [r3, #2]
     c90:	ee07 3a90 	vmov	s15, r3
     c94:	eeb8 6be7 	vcvt.f64.s32	d6, s15
     c98:	ed97 7b10 	vldr	d7, [r7, #64]	; 0x40
     c9c:	ee26 6b07 	vmul.f64	d6, d6, d7
     ca0:	ed9f 5b3d 	vldr	d5, [pc, #244]	; d98 <calc_defined_step_MW_sweep+0x258>
     ca4:	ee86 7b05 	vdiv.f64	d7, d6, d5
     ca8:	ed87 7b08 	vstr	d7, [r7, #32]
	mw_sweep_settings.NINT = N;
     cac:	ed97 7b08 	vldr	d7, [r7, #32]
     cb0:	eefc 7bc7 	vcvt.u32.f64	s15, d7
     cb4:	ee17 2a90 	vmov	r2, s15
     cb8:	4b41      	ldr	r3, [pc, #260]	; (dc0 <calc_defined_step_MW_sweep+0x280>)
     cba:	605a      	str	r2, [r3, #4]
	mw_sweep_settings.NFRAC_start_of_ramp = ((N - mw_sweep_settings.NINT) * (1 << 24)) + 0.5;
     cbc:	4b40      	ldr	r3, [pc, #256]	; (dc0 <calc_defined_step_MW_sweep+0x280>)
     cbe:	685b      	ldr	r3, [r3, #4]
     cc0:	ee07 3a90 	vmov	s15, r3
     cc4:	eeb8 7b67 	vcvt.f64.u32	d7, s15
     cc8:	ed97 6b08 	vldr	d6, [r7, #32]
     ccc:	ee36 7b47 	vsub.f64	d7, d6, d7
     cd0:	ed9f 6b33 	vldr	d6, [pc, #204]	; da0 <calc_defined_step_MW_sweep+0x260>
     cd4:	ee27 7b06 	vmul.f64	d7, d7, d6
     cd8:	eeb6 6b00 	vmov.f64	d6, #96	; 0x3f000000  0.5
     cdc:	ee37 7b06 	vadd.f64	d7, d7, d6
     ce0:	eefc 7bc7 	vcvt.u32.f64	s15, d7
     ce4:	ee17 2a90 	vmov	r2, s15
     ce8:	4b35      	ldr	r3, [pc, #212]	; (dc0 <calc_defined_step_MW_sweep+0x280>)
     cea:	60da      	str	r2, [r3, #12]

	/* Calculate dwell time at each MW frequency */
	mw_sweep_settings.stabilise_time = MW_STABILISE_TIME_US; //Global MW stabilisation time
     cec:	f241 7270 	movw	r2, #6000	; 0x1770
     cf0:	4b33      	ldr	r3, [pc, #204]	; (dc0 <calc_defined_step_MW_sweep+0x280>)
     cf2:	61da      	str	r2, [r3, #28]
	mw_sweep_settings.dwell_time = pop_cycles_per_point * POP_period_us + TIMING_MARGIN_US;
     cf4:	4b35      	ldr	r3, [pc, #212]	; (dcc <calc_defined_step_MW_sweep+0x28c>)
     cf6:	681b      	ldr	r3, [r3, #0]
     cf8:	687a      	ldr	r2, [r7, #4]
     cfa:	fb02 f303 	mul.w	r3, r2, r3
     cfe:	2264      	movs	r2, #100	; 0x64
     d00:	4413      	add	r3, r2
     d02:	4a2f      	ldr	r2, [pc, #188]	; (dc0 <calc_defined_step_MW_sweep+0x280>)
     d04:	6213      	str	r3, [r2, #32]

	/* Calculate the period of a sweep */
	const double calc_sweep_time = (double)(MW_STABILISE_TIME_US + MW_PROCESSING_TIME_US + mw_sweep_settings.dwell_time) * (double)(mw_sweep_settings.num_steps+1)/1000000;
     d06:	f241 7270 	movw	r2, #6000	; 0x1770
     d0a:	2301      	movs	r3, #1
     d0c:	441a      	add	r2, r3
     d0e:	4b2c      	ldr	r3, [pc, #176]	; (dc0 <calc_defined_step_MW_sweep+0x280>)
     d10:	6a1b      	ldr	r3, [r3, #32]
     d12:	4413      	add	r3, r2
     d14:	ee07 3a90 	vmov	s15, r3
     d18:	eeb8 6b67 	vcvt.f64.u32	d6, s15
     d1c:	4b28      	ldr	r3, [pc, #160]	; (dc0 <calc_defined_step_MW_sweep+0x280>)
     d1e:	691b      	ldr	r3, [r3, #16]
     d20:	3301      	adds	r3, #1
     d22:	ee07 3a90 	vmov	s15, r3
     d26:	eeb8 7b67 	vcvt.f64.u32	d7, s15
     d2a:	ee26 6b07 	vmul.f64	d6, d6, d7
     d2e:	ed9f 5b1e 	vldr	d5, [pc, #120]	; da8 <calc_defined_step_MW_sweep+0x268>
     d32:	ee86 7b05 	vdiv.f64	d7, d6, d5
     d36:	ed87 7b06 	vstr	d7, [r7, #24]
	printf("Sweep period: %.3g s\r\n", calc_sweep_time);
     d3a:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
     d3e:	4824      	ldr	r0, [pc, #144]	; (dd0 <calc_defined_step_MW_sweep+0x290>)
     d40:	f000 fece 	bl	1ae0 <__printf_veneer>
	printf("%ld points, %.3g ms each\r\n", mw_sweep_settings.num_steps, 1000 * calc_sweep_time / (mw_sweep_settings.num_steps + 1));
     d44:	4b1e      	ldr	r3, [pc, #120]	; (dc0 <calc_defined_step_MW_sweep+0x280>)
     d46:	6919      	ldr	r1, [r3, #16]
     d48:	ed97 7b06 	vldr	d7, [r7, #24]
     d4c:	ed9f 6b18 	vldr	d6, [pc, #96]	; db0 <calc_defined_step_MW_sweep+0x270>
     d50:	ee27 6b06 	vmul.f64	d6, d7, d6
     d54:	4b1a      	ldr	r3, [pc, #104]	; (dc0 <calc_defined_step_MW_sweep+0x280>)
     d56:	691b      	ldr	r3, [r3, #16]
     d58:	3301      	adds	r3, #1
     d5a:	ee07 3a90 	vmov	s15, r3
     d5e:	eeb8 7b67 	vcvt.f64.u32	d7, s15
     d62:	ee86 5b07 	vdiv.f64	d5, d6, d7
     d66:	ec53 2b15 	vmov	r2, r3, d5
     d6a:	481a      	ldr	r0, [pc, #104]	; (dd4 <calc_defined_step_MW_sweep+0x294>)
     d6c:	f000 feb8 	bl	1ae0 <__printf_veneer>

	mw_sweep_settings.current_point = 0;
     d70:	4b13      	ldr	r3, [pc, #76]	; (dc0 <calc_defined_step_MW_sweep+0x280>)
     d72:	2200      	movs	r2, #0
     d74:	629a      	str	r2, [r3, #40]	; 0x28
	mw_sweep_settings.sweep_period = calc_sweep_time;
     d76:	4912      	ldr	r1, [pc, #72]	; (dc0 <calc_defined_step_MW_sweep+0x280>)
     d78:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
     d7c:	e9c1 2310 	strd	r2, r3, [r1, #64]	; 0x40

	//print_mw_sweep_settings();
	return(true);
     d80:	2301      	movs	r3, #1
}
     d82:	4618      	mov	r0, r3
     d84:	3748      	adds	r7, #72	; 0x48
     d86:	46bd      	mov	sp, r7
     d88:	bd80      	pop	{r7, pc}
     d8a:	bf00      	nop
     d8c:	f3af 8000 	nop.w
     d90:	00000000 	.word	0x00000000
     d94:	41cdcd65 	.word	0x41cdcd65
     d98:	00000000 	.word	0x00000000
     d9c:	4187d784 	.word	0x4187d784
     da0:	00000000 	.word	0x00000000
     da4:	41700000 	.word	0x41700000
     da8:	00000000 	.word	0x00000000
     dac:	412e8480 	.word	0x412e8480
     db0:	00000000 	.word	0x00000000
     db4:	408f4000 	.word	0x408f4000
     db8:	0801c164 	.word	0x0801c164
     dbc:	0801c1a8 	.word	0x0801c1a8
     dc0:	20000648 	.word	0x20000648
     dc4:	0801c1c8 	.word	0x0801c1c8
     dc8:	0801c200 	.word	0x0801c200
     dcc:	200005f8 	.word	0x200005f8
     dd0:	0801c220 	.word	0x0801c220
     dd4:	0801c238 	.word	0x0801c238

00000dd8 <calc_fixed_time_MW_sweep>:
  * @param  Span in Hz
  * @param  Sweep period in s
  * @param  Additional time for scope sync
  * @retval Success/failure or early termination
  */
bool calc_fixed_time_MW_sweep(const double centre_freq, const double span, const double requested_sweep_period, const bool scope_sync_time) {
     dd8:	b580      	push	{r7, lr}
     dda:	b09e      	sub	sp, #120	; 0x78
     ddc:	af04      	add	r7, sp, #16
     dde:	ed87 0b06 	vstr	d0, [r7, #24]
     de2:	ed87 1b04 	vstr	d1, [r7, #16]
     de6:	ed87 2b02 	vstr	d2, [r7, #8]
     dea:	4603      	mov	r3, r0
     dec:	71fb      	strb	r3, [r7, #7]
	//Dwell time must be a minimum of one POP cycle
	//Overall dwell time should be at least 50% of sweep time
	//Number of points shall be maximised within the available time

	printf("MW sweep will have %.10g GHz centre frequency with %.5g Hz span, over %.3g s\r\n", centre_freq/1000000000, span, requested_sweep_period);
     dee:	ed97 7b06 	vldr	d7, [r7, #24]
     df2:	ed9f 6b97 	vldr	d6, [pc, #604]	; 1050 <calc_fixed_time_MW_sweep+0x278>
     df6:	ee87 5b06 	vdiv.f64	d5, d7, d6
     dfa:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
     dfe:	e9cd 2302 	strd	r2, r3, [sp, #8]
     e02:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
     e06:	e9cd 2300 	strd	r2, r3, [sp]
     e0a:	ec53 2b15 	vmov	r2, r3, d5
     e0e:	4898      	ldr	r0, [pc, #608]	; (1070 <calc_fixed_time_MW_sweep+0x298>)
     e10:	f000 fe66 	bl	1ae0 <__printf_veneer>
	mw_sweep_settings.sweep_type = FIXED_TIME;
     e14:	4b97      	ldr	r3, [pc, #604]	; (1074 <calc_fixed_time_MW_sweep+0x29c>)
     e16:	2201      	movs	r2, #1
     e18:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48
	mw_sweep_settings.centre_freq = centre_freq;
     e1c:	4995      	ldr	r1, [pc, #596]	; (1074 <calc_fixed_time_MW_sweep+0x29c>)
     e1e:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
     e22:	e9c1 230c 	strd	r2, r3, [r1, #48]	; 0x30
	mw_sweep_settings.span = span;
     e26:	4993      	ldr	r1, [pc, #588]	; (1074 <calc_fixed_time_MW_sweep+0x29c>)
     e28:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
     e2c:	e9c1 230e 	strd	r2, r3, [r1, #56]	; 0x38

	mw_sweep_settings.dwell_time = POP_period_us + TIMING_MARGIN_US; //minimum possible value of dwell_time in us
     e30:	4b91      	ldr	r3, [pc, #580]	; (1078 <calc_fixed_time_MW_sweep+0x2a0>)
     e32:	681b      	ldr	r3, [r3, #0]
     e34:	2264      	movs	r2, #100	; 0x64
     e36:	4413      	add	r3, r2
     e38:	4a8e      	ldr	r2, [pc, #568]	; (1074 <calc_fixed_time_MW_sweep+0x29c>)
     e3a:	6213      	str	r3, [r2, #32]
	uint32_t point_time = MW_STABILISE_TIME_US + MW_PROCESSING_TIME_US + mw_sweep_settings.dwell_time; //minimum possible value in us
     e3c:	f241 7270 	movw	r2, #6000	; 0x1770
     e40:	2301      	movs	r3, #1
     e42:	441a      	add	r2, r3
     e44:	4b8b      	ldr	r3, [pc, #556]	; (1074 <calc_fixed_time_MW_sweep+0x29c>)
     e46:	6a1b      	ldr	r3, [r3, #32]
     e48:	4413      	add	r3, r2
     e4a:	65fb      	str	r3, [r7, #92]	; 0x5c
	uint32_t points_in_sweep = requested_sweep_period * (double)(1000000 / point_time); //maximum possible number of steps in sweep, rounded down to an integer
     e4c:	4a8b      	ldr	r2, [pc, #556]	; (107c <calc_fixed_time_MW_sweep+0x2a4>)
     e4e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
     e50:	fbb2 f3f3 	udiv	r3, r2, r3
     e54:	ee07 3a90 	vmov	s15, r3
     e58:	eeb8 6b67 	vcvt.f64.u32	d6, s15
     e5c:	ed97 7b02 	vldr	d7, [r7, #8]
     e60:	ee26 7b07 	vmul.f64	d7, d6, d7
     e64:	eefc 7bc7 	vcvt.u32.f64	s15, d7
     e68:	ee17 3a90 	vmov	r3, s15
     e6c:	65bb      	str	r3, [r7, #88]	; 0x58
	//printf("%lu points in sweep, maximum\r\n", points_in_sweep);

	/* now figure out the unit_step_size and how many steps will be taken in the span */

	/* Calculate start frequency */
	double start_freq = centre_freq - 0.5* span;
     e6e:	ed97 7b04 	vldr	d7, [r7, #16]
     e72:	eeb6 6b00 	vmov.f64	d6, #96	; 0x3f000000  0.5
     e76:	ee27 7b06 	vmul.f64	d7, d7, d6
     e7a:	ed97 6b06 	vldr	d6, [r7, #24]
     e7e:	ee36 7b47 	vsub.f64	d7, d6, d7
     e82:	ed87 7b14 	vstr	d7, [r7, #80]	; 0x50
	mw_sweep_settings.k = calculate_k(start_freq);
     e86:	ed97 0b14 	vldr	d0, [r7, #80]	; 0x50
     e8a:	f000 fa03 	bl	1294 <calculate_k>
     e8e:	4603      	mov	r3, r0
     e90:	b2da      	uxtb	r2, r3
     e92:	4b78      	ldr	r3, [pc, #480]	; (1074 <calc_fixed_time_MW_sweep+0x29c>)
     e94:	709a      	strb	r2, [r3, #2]

	//steps should be evenly sized
	//selected step size should be an integer multiple of the unit step size
	//increase the step_size value until the sweep fits into the available period
	const double unit_step_size_Hz = REF_FREQ / (double) (mw_sweep_settings.k * (1 << 24)); //minimum step size possible
     e96:	ed9f 5b70 	vldr	d5, [pc, #448]	; 1058 <calc_fixed_time_MW_sweep+0x280>
     e9a:	4b76      	ldr	r3, [pc, #472]	; (1074 <calc_fixed_time_MW_sweep+0x29c>)
     e9c:	789b      	ldrb	r3, [r3, #2]
     e9e:	061b      	lsls	r3, r3, #24
     ea0:	ee07 3a90 	vmov	s15, r3
     ea4:	eeb8 6be7 	vcvt.f64.s32	d6, s15
     ea8:	ee85 7b06 	vdiv.f64	d7, d5, d6
     eac:	ed87 7b12 	vstr	d7, [r7, #72]	; 0x48
	//printf("Unit step size: %.3g Hz\r\n", unit_step_size_Hz);
	mw_sweep_settings.step_size = 1;
     eb0:	4b70      	ldr	r3, [pc, #448]	; (1074 <calc_fixed_time_MW_sweep+0x29c>)
     eb2:	2201      	movs	r2, #1
     eb4:	615a      	str	r2, [r3, #20]
	while ((mw_sweep_settings.step_size * points_in_sweep) < (span / unit_step_size_Hz)) {
     eb6:	e004      	b.n	ec2 <calc_fixed_time_MW_sweep+0xea>
		mw_sweep_settings.step_size++;
     eb8:	4b6e      	ldr	r3, [pc, #440]	; (1074 <calc_fixed_time_MW_sweep+0x29c>)
     eba:	695b      	ldr	r3, [r3, #20]
     ebc:	3301      	adds	r3, #1
     ebe:	4a6d      	ldr	r2, [pc, #436]	; (1074 <calc_fixed_time_MW_sweep+0x29c>)
     ec0:	6153      	str	r3, [r2, #20]
	while ((mw_sweep_settings.step_size * points_in_sweep) < (span / unit_step_size_Hz)) {
     ec2:	4b6c      	ldr	r3, [pc, #432]	; (1074 <calc_fixed_time_MW_sweep+0x29c>)
     ec4:	695b      	ldr	r3, [r3, #20]
     ec6:	6dba      	ldr	r2, [r7, #88]	; 0x58
     ec8:	fb02 f303 	mul.w	r3, r2, r3
     ecc:	ee07 3a90 	vmov	s15, r3
     ed0:	eeb8 6b67 	vcvt.f64.u32	d6, s15
     ed4:	ed97 4b04 	vldr	d4, [r7, #16]
     ed8:	ed97 5b12 	vldr	d5, [r7, #72]	; 0x48
     edc:	ee84 7b05 	vdiv.f64	d7, d4, d5
     ee0:	eeb4 6bc7 	vcmpe.f64	d6, d7
     ee4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
     ee8:	d4e6      	bmi.n	eb8 <calc_fixed_time_MW_sweep+0xe0>
	}
	const double achieved_step_size = (double) (mw_sweep_settings.step_size * unit_step_size_Hz);
     eea:	4b62      	ldr	r3, [pc, #392]	; (1074 <calc_fixed_time_MW_sweep+0x29c>)
     eec:	695b      	ldr	r3, [r3, #20]
     eee:	ee07 3a90 	vmov	s15, r3
     ef2:	eeb8 7b67 	vcvt.f64.u32	d7, s15
     ef6:	ed97 6b12 	vldr	d6, [r7, #72]	; 0x48
     efa:	ee26 7b07 	vmul.f64	d7, d6, d7
     efe:	ed87 7b10 	vstr	d7, [r7, #64]	; 0x40
	printf("Step size: %lu x unit step i.e. %.3g Hz\r\n", mw_sweep_settings.step_size, achieved_step_size);
     f02:	4b5c      	ldr	r3, [pc, #368]	; (1074 <calc_fixed_time_MW_sweep+0x29c>)
     f04:	6959      	ldr	r1, [r3, #20]
     f06:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
     f0a:	485d      	ldr	r0, [pc, #372]	; (1080 <calc_fixed_time_MW_sweep+0x2a8>)
     f0c:	f000 fde8 	bl	1ae0 <__printf_veneer>

	//calculate number of steps in sweep and round down to an integer (must fit in time available)
	mw_sweep_settings.num_steps = (span / achieved_step_size);
     f10:	ed97 5b04 	vldr	d5, [r7, #16]
     f14:	ed97 6b10 	vldr	d6, [r7, #64]	; 0x40
     f18:	ee85 7b06 	vdiv.f64	d7, d5, d6
     f1c:	eefc 7bc7 	vcvt.u32.f64	s15, d7
     f20:	ee17 2a90 	vmov	r2, s15
     f24:	4b53      	ldr	r3, [pc, #332]	; (1074 <calc_fixed_time_MW_sweep+0x29c>)
     f26:	611a      	str	r2, [r3, #16]

	const uint32_t point_time_us = 1000000 * requested_sweep_period / (mw_sweep_settings.num_steps + 1); //period of each point in us
     f28:	ed97 7b02 	vldr	d7, [r7, #8]
     f2c:	ed9f 6b4c 	vldr	d6, [pc, #304]	; 1060 <calc_fixed_time_MW_sweep+0x288>
     f30:	ee27 5b06 	vmul.f64	d5, d7, d6
     f34:	4b4f      	ldr	r3, [pc, #316]	; (1074 <calc_fixed_time_MW_sweep+0x29c>)
     f36:	691b      	ldr	r3, [r3, #16]
     f38:	3301      	adds	r3, #1
     f3a:	ee07 3a90 	vmov	s15, r3
     f3e:	eeb8 6b67 	vcvt.f64.u32	d6, s15
     f42:	ee85 7b06 	vdiv.f64	d7, d5, d6
     f46:	eefc 7bc7 	vcvt.u32.f64	s15, d7
     f4a:	ee17 3a90 	vmov	r3, s15
     f4e:	63fb      	str	r3, [r7, #60]	; 0x3c
//	printf("DEBUG point_time_us: %lu \r\n", point_time_us);
//	printf("DEBUG sweep time in us: %lu \r\n", point_time_us * (mw_sweep_settings.num_steps + 1));
	mw_sweep_settings.pop_cycles_per_point = (point_time_us - MW_STABILISE_TIME_US - TIMING_MARGIN_US - MW_PROCESSING_TIME_US)/POP_period_us;
     f50:	f241 7270 	movw	r2, #6000	; 0x1770
     f54:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
     f56:	1a9b      	subs	r3, r3, r2
     f58:	2264      	movs	r2, #100	; 0x64
     f5a:	1a9b      	subs	r3, r3, r2
     f5c:	2201      	movs	r2, #1
     f5e:	1a9a      	subs	r2, r3, r2
     f60:	4b45      	ldr	r3, [pc, #276]	; (1078 <calc_fixed_time_MW_sweep+0x2a0>)
     f62:	681b      	ldr	r3, [r3, #0]
     f64:	fbb2 f3f3 	udiv	r3, r2, r3
     f68:	4a42      	ldr	r2, [pc, #264]	; (1074 <calc_fixed_time_MW_sweep+0x29c>)
     f6a:	6193      	str	r3, [r2, #24]
	printf("%lu points in sweep, %lu ms and %lu POP cycles each\r\n", mw_sweep_settings.num_steps + 1, point_time_us / 1000, mw_sweep_settings.pop_cycles_per_point);
     f6c:	4b41      	ldr	r3, [pc, #260]	; (1074 <calc_fixed_time_MW_sweep+0x29c>)
     f6e:	691b      	ldr	r3, [r3, #16]
     f70:	1c59      	adds	r1, r3, #1
     f72:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
     f74:	4a43      	ldr	r2, [pc, #268]	; (1084 <calc_fixed_time_MW_sweep+0x2ac>)
     f76:	fba2 2303 	umull	r2, r3, r2, r3
     f7a:	099a      	lsrs	r2, r3, #6
     f7c:	4b3d      	ldr	r3, [pc, #244]	; (1074 <calc_fixed_time_MW_sweep+0x29c>)
     f7e:	699b      	ldr	r3, [r3, #24]
     f80:	4841      	ldr	r0, [pc, #260]	; (1088 <calc_fixed_time_MW_sweep+0x2b0>)
     f82:	f000 fdad 	bl	1ae0 <__printf_veneer>
	uint32_t min_dwell_required_us = mw_sweep_settings.pop_cycles_per_point * POP_period_us + TIMING_MARGIN_US; //minimum dwell_time to achieve above
     f86:	4b3b      	ldr	r3, [pc, #236]	; (1074 <calc_fixed_time_MW_sweep+0x29c>)
     f88:	699b      	ldr	r3, [r3, #24]
     f8a:	4a3b      	ldr	r2, [pc, #236]	; (1078 <calc_fixed_time_MW_sweep+0x2a0>)
     f8c:	6812      	ldr	r2, [r2, #0]
     f8e:	fb02 f303 	mul.w	r3, r2, r3
     f92:	2264      	movs	r2, #100	; 0x64
     f94:	4413      	add	r3, r2
     f96:	63bb      	str	r3, [r7, #56]	; 0x38
	mw_sweep_settings.dwell_time = point_time_us - MW_STABILISE_TIME_US - MW_PROCESSING_TIME_US; //actual programmed dwell time
     f98:	f241 7270 	movw	r2, #6000	; 0x1770
     f9c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
     f9e:	1a9b      	subs	r3, r3, r2
     fa0:	2201      	movs	r2, #1
     fa2:	1a9b      	subs	r3, r3, r2
     fa4:	4a33      	ldr	r2, [pc, #204]	; (1074 <calc_fixed_time_MW_sweep+0x29c>)
     fa6:	6213      	str	r3, [r2, #32]
	if (mw_sweep_settings.dwell_time < min_dwell_required_us) {
     fa8:	4b32      	ldr	r3, [pc, #200]	; (1074 <calc_fixed_time_MW_sweep+0x29c>)
     faa:	6a1b      	ldr	r3, [r3, #32]
     fac:	6bba      	ldr	r2, [r7, #56]	; 0x38
     fae:	429a      	cmp	r2, r3
     fb0:	d902      	bls.n	fb8 <calc_fixed_time_MW_sweep+0x1e0>
		mw_sweep_settings.dwell_time = min_dwell_required_us;
     fb2:	4a30      	ldr	r2, [pc, #192]	; (1074 <calc_fixed_time_MW_sweep+0x29c>)
     fb4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
     fb6:	6213      	str	r3, [r2, #32]
	}
//	printf("DEBUG dwell_time: %lu \r\n", mw_sweep_settings.dwell_time);
//	printf("DEBUG sweep time in us: %lu \r\n", (mw_sweep_settings.dwell_time + MW_STABILISE_TIME_US + MW_PROCESSING_TIME_US) * (mw_sweep_settings.num_steps + 1));

	/* Double check - calculate the period of a sweep */
	double point_period = (double)(MW_STABILISE_TIME_US + MW_PROCESSING_TIME_US + mw_sweep_settings.dwell_time)/1000000;
     fb8:	f241 7270 	movw	r2, #6000	; 0x1770
     fbc:	2301      	movs	r3, #1
     fbe:	441a      	add	r2, r3
     fc0:	4b2c      	ldr	r3, [pc, #176]	; (1074 <calc_fixed_time_MW_sweep+0x29c>)
     fc2:	6a1b      	ldr	r3, [r3, #32]
     fc4:	4413      	add	r3, r2
     fc6:	ee07 3a90 	vmov	s15, r3
     fca:	eeb8 6b67 	vcvt.f64.u32	d6, s15
     fce:	ed9f 5b24 	vldr	d5, [pc, #144]	; 1060 <calc_fixed_time_MW_sweep+0x288>
     fd2:	ee86 7b05 	vdiv.f64	d7, d6, d5
     fd6:	ed87 7b0c 	vstr	d7, [r7, #48]	; 0x30
//	printf("Point period %f\r\n", point_period);
	double calc_sweep_time = point_period * (mw_sweep_settings.num_steps + 1);
     fda:	4b26      	ldr	r3, [pc, #152]	; (1074 <calc_fixed_time_MW_sweep+0x29c>)
     fdc:	691b      	ldr	r3, [r3, #16]
     fde:	3301      	adds	r3, #1
     fe0:	ee07 3a90 	vmov	s15, r3
     fe4:	eeb8 7b67 	vcvt.f64.u32	d7, s15
     fe8:	ed97 6b0c 	vldr	d6, [r7, #48]	; 0x30
     fec:	ee26 7b07 	vmul.f64	d7, d6, d7
     ff0:	ed87 7b18 	vstr	d7, [r7, #96]	; 0x60
//	printf("calc_sweep_time %f\r\n", calc_sweep_time);
	double min_sweep_time = (double)((min_dwell_required_us + MW_STABILISE_TIME_US + MW_PROCESSING_TIME_US) * (mw_sweep_settings.num_steps + 1)) / 1000000;
     ff4:	f241 7270 	movw	r2, #6000	; 0x1770
     ff8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
     ffa:	4413      	add	r3, r2
     ffc:	2201      	movs	r2, #1
     ffe:	4413      	add	r3, r2
    1000:	4a1c      	ldr	r2, [pc, #112]	; (1074 <calc_fixed_time_MW_sweep+0x29c>)
    1002:	6912      	ldr	r2, [r2, #16]
    1004:	3201      	adds	r2, #1
    1006:	fb02 f303 	mul.w	r3, r2, r3
    100a:	ee07 3a90 	vmov	s15, r3
    100e:	eeb8 6b67 	vcvt.f64.u32	d6, s15
    1012:	ed9f 5b13 	vldr	d5, [pc, #76]	; 1060 <calc_fixed_time_MW_sweep+0x288>
    1016:	ee86 7b05 	vdiv.f64	d7, d6, d5
    101a:	ed87 7b0a 	vstr	d7, [r7, #40]	; 0x28
	if (calc_sweep_time/min_sweep_time > 1.02) {
    101e:	ed97 5b18 	vldr	d5, [r7, #96]	; 0x60
    1022:	ed97 6b0a 	vldr	d6, [r7, #40]	; 0x28
    1026:	ee85 7b06 	vdiv.f64	d7, d5, d6
    102a:	ed9f 6b0f 	vldr	d6, [pc, #60]	; 1068 <calc_fixed_time_MW_sweep+0x290>
    102e:	eeb4 7bc6 	vcmpe.f64	d7, d6
    1032:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    1036:	dd2b      	ble.n	1090 <calc_fixed_time_MW_sweep+0x2b8>
		printf("Sweep period %.4g s but could be reduced to %.4g s\r\n", calc_sweep_time, min_sweep_time);
    1038:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
    103c:	e9cd 2300 	strd	r2, r3, [sp]
    1040:	e9d7 2318 	ldrd	r2, r3, [r7, #96]	; 0x60
    1044:	4811      	ldr	r0, [pc, #68]	; (108c <calc_fixed_time_MW_sweep+0x2b4>)
    1046:	f000 fd4b 	bl	1ae0 <__printf_veneer>
    104a:	e029      	b.n	10a0 <calc_fixed_time_MW_sweep+0x2c8>
    104c:	f3af 8000 	nop.w
    1050:	00000000 	.word	0x00000000
    1054:	41cdcd65 	.word	0x41cdcd65
    1058:	00000000 	.word	0x00000000
    105c:	4187d784 	.word	0x4187d784
    1060:	00000000 	.word	0x00000000
    1064:	412e8480 	.word	0x412e8480
    1068:	851eb852 	.word	0x851eb852
    106c:	3ff051eb 	.word	0x3ff051eb
    1070:	0801c254 	.word	0x0801c254
    1074:	20000648 	.word	0x20000648
    1078:	200005f8 	.word	0x200005f8
    107c:	000f4240 	.word	0x000f4240
    1080:	0801c2a4 	.word	0x0801c2a4
    1084:	10624dd3 	.word	0x10624dd3
    1088:	0801c2d0 	.word	0x0801c2d0
    108c:	0801c308 	.word	0x0801c308
	} else {
		printf("Sweep period %.4g s is pretty much optimal for %lu POP samples per point\r\n", calc_sweep_time, mw_sweep_settings.pop_cycles_per_point);
    1090:	4b57      	ldr	r3, [pc, #348]	; (11f0 <calc_fixed_time_MW_sweep+0x418>)
    1092:	699b      	ldr	r3, [r3, #24]
    1094:	9300      	str	r3, [sp, #0]
    1096:	e9d7 2318 	ldrd	r2, r3, [r7, #96]	; 0x60
    109a:	4856      	ldr	r0, [pc, #344]	; (11f4 <calc_fixed_time_MW_sweep+0x41c>)
    109c:	f000 fd20 	bl	1ae0 <__printf_veneer>

	//Period of MW sweep isn't precise as it's based on measured average processing time
	//Steps are increased by up to 10% to increase the sweep period to guarantee horizontal scope sync
	//These are added to the end of the sweep so that the centre frequency is still central
	//Sweep period will be increased by a maximum of 1s
	if (scope_sync_time) {
    10a0:	79fb      	ldrb	r3, [r7, #7]
    10a2:	2b00      	cmp	r3, #0
    10a4:	d044      	beq.n	1130 <calc_fixed_time_MW_sweep+0x358>

		mw_sweep_settings.num_steps = mw_sweep_settings.num_steps * 1.1 + 0.5;
    10a6:	4b52      	ldr	r3, [pc, #328]	; (11f0 <calc_fixed_time_MW_sweep+0x418>)
    10a8:	691b      	ldr	r3, [r3, #16]
    10aa:	ee07 3a90 	vmov	s15, r3
    10ae:	eeb8 7b67 	vcvt.f64.u32	d7, s15
    10b2:	ed9f 6b49 	vldr	d6, [pc, #292]	; 11d8 <calc_fixed_time_MW_sweep+0x400>
    10b6:	ee27 7b06 	vmul.f64	d7, d7, d6
    10ba:	eeb6 6b00 	vmov.f64	d6, #96	; 0x3f000000  0.5
    10be:	ee37 7b06 	vadd.f64	d7, d7, d6
    10c2:	eefc 7bc7 	vcvt.u32.f64	s15, d7
    10c6:	ee17 2a90 	vmov	r2, s15
    10ca:	4b49      	ldr	r3, [pc, #292]	; (11f0 <calc_fixed_time_MW_sweep+0x418>)
    10cc:	611a      	str	r2, [r3, #16]
//		printf("DEBUG #steps: %lu \r\n", mw_sweep_settings.num_steps);
		calc_sweep_time = point_period * (mw_sweep_settings.num_steps + 1);
    10ce:	4b48      	ldr	r3, [pc, #288]	; (11f0 <calc_fixed_time_MW_sweep+0x418>)
    10d0:	691b      	ldr	r3, [r3, #16]
    10d2:	3301      	adds	r3, #1
    10d4:	ee07 3a90 	vmov	s15, r3
    10d8:	eeb8 7b67 	vcvt.f64.u32	d7, s15
    10dc:	ed97 6b0c 	vldr	d6, [r7, #48]	; 0x30
    10e0:	ee26 7b07 	vmul.f64	d7, d6, d7
    10e4:	ed87 7b18 	vstr	d7, [r7, #96]	; 0x60

		/* Decrease number of steps if additional 10% is >1s */
//		printf("DEBUG calc_sweep_time - requested_sweep_period: %f \r\n", calc_sweep_time - requested_sweep_period);
		if ((calc_sweep_time - requested_sweep_period) > 1){
    10e8:	ed97 6b18 	vldr	d6, [r7, #96]	; 0x60
    10ec:	ed97 7b02 	vldr	d7, [r7, #8]
    10f0:	ee36 7b47 	vsub.f64	d7, d6, d7
    10f4:	eeb7 6b00 	vmov.f64	d6, #112	; 0x3f800000  1.0
    10f8:	eeb4 7bc6 	vcmpe.f64	d7, d6
    10fc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    1100:	dd11      	ble.n	1126 <calc_fixed_time_MW_sweep+0x34e>
			mw_sweep_settings.num_steps--;
    1102:	4b3b      	ldr	r3, [pc, #236]	; (11f0 <calc_fixed_time_MW_sweep+0x418>)
    1104:	691b      	ldr	r3, [r3, #16]
    1106:	3b01      	subs	r3, #1
    1108:	4a39      	ldr	r2, [pc, #228]	; (11f0 <calc_fixed_time_MW_sweep+0x418>)
    110a:	6113      	str	r3, [r2, #16]
			calc_sweep_time = point_period * (mw_sweep_settings.num_steps + 1);
    110c:	4b38      	ldr	r3, [pc, #224]	; (11f0 <calc_fixed_time_MW_sweep+0x418>)
    110e:	691b      	ldr	r3, [r3, #16]
    1110:	3301      	adds	r3, #1
    1112:	ee07 3a90 	vmov	s15, r3
    1116:	eeb8 7b67 	vcvt.f64.u32	d7, s15
    111a:	ed97 6b0c 	vldr	d6, [r7, #48]	; 0x30
    111e:	ee26 7b07 	vmul.f64	d7, d6, d7
    1122:	ed87 7b18 	vstr	d7, [r7, #96]	; 0x60
		}
//		printf("DEBUG #steps: %lu \r\n", mw_sweep_settings.num_steps);

		//Double check of the sweep period selected
		printf("Final calculated sweep period, including scope sync: %.3g s\r\n", calc_sweep_time);
    1126:	e9d7 2318 	ldrd	r2, r3, [r7, #96]	; 0x60
    112a:	4833      	ldr	r0, [pc, #204]	; (11f8 <calc_fixed_time_MW_sweep+0x420>)
    112c:	f000 fcd8 	bl	1ae0 <__printf_veneer>
	}

	/* Can avoid spurs if frequency requested can be encoded exactly  */
	start_freq = ((long)(start_freq/unit_step_size_Hz)) * unit_step_size_Hz;
    1130:	ed97 5b14 	vldr	d5, [r7, #80]	; 0x50
    1134:	ed97 6b12 	vldr	d6, [r7, #72]	; 0x48
    1138:	ee85 7b06 	vdiv.f64	d7, d5, d6
    113c:	eefd 7bc7 	vcvt.s32.f64	s15, d7
    1140:	eeb8 7be7 	vcvt.f64.s32	d7, s15
    1144:	ed97 6b12 	vldr	d6, [r7, #72]	; 0x48
    1148:	ee26 7b07 	vmul.f64	d7, d6, d7
    114c:	ed87 7b14 	vstr	d7, [r7, #80]	; 0x50

	/* Calculate the N division ratio, extracting the fractional and integer parts */
	const double N = ((start_freq * mw_sweep_settings.k) / REF_FREQ);
    1150:	4b27      	ldr	r3, [pc, #156]	; (11f0 <calc_fixed_time_MW_sweep+0x418>)
    1152:	789b      	ldrb	r3, [r3, #2]
    1154:	ee07 3a90 	vmov	s15, r3
    1158:	eeb8 6be7 	vcvt.f64.s32	d6, s15
    115c:	ed97 7b14 	vldr	d7, [r7, #80]	; 0x50
    1160:	ee26 6b07 	vmul.f64	d6, d6, d7
    1164:	ed9f 5b1e 	vldr	d5, [pc, #120]	; 11e0 <calc_fixed_time_MW_sweep+0x408>
    1168:	ee86 7b05 	vdiv.f64	d7, d6, d5
    116c:	ed87 7b08 	vstr	d7, [r7, #32]
	mw_sweep_settings.NINT = N;
    1170:	ed97 7b08 	vldr	d7, [r7, #32]
    1174:	eefc 7bc7 	vcvt.u32.f64	s15, d7
    1178:	ee17 2a90 	vmov	r2, s15
    117c:	4b1c      	ldr	r3, [pc, #112]	; (11f0 <calc_fixed_time_MW_sweep+0x418>)
    117e:	605a      	str	r2, [r3, #4]
	mw_sweep_settings.NFRAC_start_of_ramp = ((N - mw_sweep_settings.NINT) * (1 << 24)) + 0.5;
    1180:	4b1b      	ldr	r3, [pc, #108]	; (11f0 <calc_fixed_time_MW_sweep+0x418>)
    1182:	685b      	ldr	r3, [r3, #4]
    1184:	ee07 3a90 	vmov	s15, r3
    1188:	eeb8 7b67 	vcvt.f64.u32	d7, s15
    118c:	ed97 6b08 	vldr	d6, [r7, #32]
    1190:	ee36 7b47 	vsub.f64	d7, d6, d7
    1194:	ed9f 6b14 	vldr	d6, [pc, #80]	; 11e8 <calc_fixed_time_MW_sweep+0x410>
    1198:	ee27 7b06 	vmul.f64	d7, d7, d6
    119c:	eeb6 6b00 	vmov.f64	d6, #96	; 0x3f000000  0.5
    11a0:	ee37 7b06 	vadd.f64	d7, d7, d6
    11a4:	eefc 7bc7 	vcvt.u32.f64	s15, d7
    11a8:	ee17 2a90 	vmov	r2, s15
    11ac:	4b10      	ldr	r3, [pc, #64]	; (11f0 <calc_fixed_time_MW_sweep+0x418>)
    11ae:	60da      	str	r2, [r3, #12]
	mw_sweep_settings.current_point = 0;
    11b0:	4b0f      	ldr	r3, [pc, #60]	; (11f0 <calc_fixed_time_MW_sweep+0x418>)
    11b2:	2200      	movs	r2, #0
    11b4:	629a      	str	r2, [r3, #40]	; 0x28
	mw_sweep_settings.sweep_period = calc_sweep_time;
    11b6:	490e      	ldr	r1, [pc, #56]	; (11f0 <calc_fixed_time_MW_sweep+0x418>)
    11b8:	e9d7 2318 	ldrd	r2, r3, [r7, #96]	; 0x60
    11bc:	e9c1 2310 	strd	r2, r3, [r1, #64]	; 0x40
	mw_sweep_settings.stabilise_time = MW_STABILISE_TIME_US; //Global MW stabilisation time
    11c0:	f241 7270 	movw	r2, #6000	; 0x1770
    11c4:	4b0a      	ldr	r3, [pc, #40]	; (11f0 <calc_fixed_time_MW_sweep+0x418>)
    11c6:	61da      	str	r2, [r3, #28]
//	print_mw_sweep_settings();
	return(true);
    11c8:	2301      	movs	r3, #1
}
    11ca:	4618      	mov	r0, r3
    11cc:	3768      	adds	r7, #104	; 0x68
    11ce:	46bd      	mov	sp, r7
    11d0:	bd80      	pop	{r7, pc}
    11d2:	bf00      	nop
    11d4:	f3af 8000 	nop.w
    11d8:	9999999a 	.word	0x9999999a
    11dc:	3ff19999 	.word	0x3ff19999
    11e0:	00000000 	.word	0x00000000
    11e4:	4187d784 	.word	0x4187d784
    11e8:	00000000 	.word	0x00000000
    11ec:	41700000 	.word	0x41700000
    11f0:	20000648 	.word	0x20000648
    11f4:	0801c340 	.word	0x0801c340
    11f8:	0801c38c 	.word	0x0801c38c

000011fc <calc_hyperfine_settings>:

/**
  * @brief Populates the k, integer N, and fractional N values for the hyperfine frequency
  * @retval None
  */
static void calc_hyperfine_settings(const double centre_freq) {
    11fc:	b580      	push	{r7, lr}
    11fe:	b084      	sub	sp, #16
    1200:	af00      	add	r7, sp, #0
    1202:	ed87 0b00 	vstr	d0, [r7]
	mw_sweep_settings.k = calculate_k(centre_freq);
    1206:	ed97 0b00 	vldr	d0, [r7]
    120a:	f000 f843 	bl	1294 <calculate_k>
    120e:	4603      	mov	r3, r0
    1210:	b2da      	uxtb	r2, r3
    1212:	4b1f      	ldr	r3, [pc, #124]	; (1290 <calc_hyperfine_settings+0x94>)
    1214:	709a      	strb	r2, [r3, #2]
	const double N = ((centre_freq * mw_sweep_settings.k) / REF_FREQ);
    1216:	4b1e      	ldr	r3, [pc, #120]	; (1290 <calc_hyperfine_settings+0x94>)
    1218:	789b      	ldrb	r3, [r3, #2]
    121a:	ee07 3a90 	vmov	s15, r3
    121e:	eeb8 6be7 	vcvt.f64.s32	d6, s15
    1222:	ed97 7b00 	vldr	d7, [r7]
    1226:	ee26 6b07 	vmul.f64	d6, d6, d7
    122a:	ed9f 5b15 	vldr	d5, [pc, #84]	; 1280 <calc_hyperfine_settings+0x84>
    122e:	ee86 7b05 	vdiv.f64	d7, d6, d5
    1232:	ed87 7b02 	vstr	d7, [r7, #8]
	mw_sweep_settings.NINT = N;
    1236:	ed97 7b02 	vldr	d7, [r7, #8]
    123a:	eefc 7bc7 	vcvt.u32.f64	s15, d7
    123e:	ee17 2a90 	vmov	r2, s15
    1242:	4b13      	ldr	r3, [pc, #76]	; (1290 <calc_hyperfine_settings+0x94>)
    1244:	605a      	str	r2, [r3, #4]
	mw_sweep_settings.NFRAC_hyperfine = ((N - mw_sweep_settings.NINT) * (1 << 24)) + 0.5;
    1246:	4b12      	ldr	r3, [pc, #72]	; (1290 <calc_hyperfine_settings+0x94>)
    1248:	685b      	ldr	r3, [r3, #4]
    124a:	ee07 3a90 	vmov	s15, r3
    124e:	eeb8 7b67 	vcvt.f64.u32	d7, s15
    1252:	ed97 6b02 	vldr	d6, [r7, #8]
    1256:	ee36 7b47 	vsub.f64	d7, d6, d7
    125a:	ed9f 6b0b 	vldr	d6, [pc, #44]	; 1288 <calc_hyperfine_settings+0x8c>
    125e:	ee27 7b06 	vmul.f64	d7, d7, d6
    1262:	eeb6 6b00 	vmov.f64	d6, #96	; 0x3f000000  0.5
    1266:	ee37 7b06 	vadd.f64	d7, d7, d6
    126a:	eefc 7bc7 	vcvt.u32.f64	s15, d7
    126e:	ee17 2a90 	vmov	r2, s15
    1272:	4b07      	ldr	r3, [pc, #28]	; (1290 <calc_hyperfine_settings+0x94>)
    1274:	609a      	str	r2, [r3, #8]
}
    1276:	bf00      	nop
    1278:	3710      	adds	r7, #16
    127a:	46bd      	mov	sp, r7
    127c:	bd80      	pop	{r7, pc}
    127e:	bf00      	nop
    1280:	00000000 	.word	0x00000000
    1284:	4187d784 	.word	0x4187d784
    1288:	00000000 	.word	0x00000000
    128c:	41700000 	.word	0x41700000
    1290:	20000648 	.word	0x20000648

00001294 <calculate_k>:

/**
  * @brief  Calculates k value
  * @retval k
  */
static const uint32_t calculate_k(const double frequency) {
    1294:	b480      	push	{r7}
    1296:	b085      	sub	sp, #20
    1298:	af00      	add	r7, sp, #0
    129a:	ed87 0b00 	vstr	d0, [r7]
	/* For the k divider we need to find the smallest even integer or use a max of 62*/
	uint32_t k = VCO_MAX_FREQ / frequency;
    129e:	ed9f 5b10 	vldr	d5, [pc, #64]	; 12e0 <calculate_k+0x4c>
    12a2:	ed97 6b00 	vldr	d6, [r7]
    12a6:	ee85 7b06 	vdiv.f64	d7, d5, d6
    12aa:	eefc 7bc7 	vcvt.u32.f64	s15, d7
    12ae:	ee17 3a90 	vmov	r3, s15
    12b2:	60fb      	str	r3, [r7, #12]

	if (k != 1) {
    12b4:	68fb      	ldr	r3, [r7, #12]
    12b6:	2b01      	cmp	r3, #1
    12b8:	d00b      	beq.n	12d2 <calculate_k+0x3e>
		while (k > 62 || k % 2) {
    12ba:	e002      	b.n	12c2 <calculate_k+0x2e>
			k --;
    12bc:	68fb      	ldr	r3, [r7, #12]
    12be:	3b01      	subs	r3, #1
    12c0:	60fb      	str	r3, [r7, #12]
		while (k > 62 || k % 2) {
    12c2:	68fb      	ldr	r3, [r7, #12]
    12c4:	2b3e      	cmp	r3, #62	; 0x3e
    12c6:	d8f9      	bhi.n	12bc <calculate_k+0x28>
    12c8:	68fb      	ldr	r3, [r7, #12]
    12ca:	f003 0301 	and.w	r3, r3, #1
    12ce:	2b00      	cmp	r3, #0
    12d0:	d1f4      	bne.n	12bc <calculate_k+0x28>
		}
	}
	return (k);
    12d2:	68fb      	ldr	r3, [r7, #12]
}
    12d4:	4618      	mov	r0, r3
    12d6:	3714      	adds	r7, #20
    12d8:	46bd      	mov	sp, r7
    12da:	f85d 7b04 	ldr.w	r7, [sp], #4
    12de:	4770      	bx	lr
    12e0:	20000000 	.word	0x20000000
    12e4:	41ee8c21 	.word	0x41ee8c21

000012e8 <start_POP_cycle_calibration>:

/**
  * @brief  Starts the process of measuring the POP period
  * @retval None
  */
void start_POP_cycle_calibration(const bool cal_only) {
    12e8:	b580      	push	{r7, lr}
    12ea:	b082      	sub	sp, #8
    12ec:	af00      	add	r7, sp, #0
    12ee:	4603      	mov	r3, r0
    12f0:	71fb      	strb	r3, [r7, #7]
	/* Requires ADC to be initialised and for HAL_ADC_ConvCpltCallback to be active */
	if (cal_only == true) {
    12f2:	79fb      	ldrb	r3, [r7, #7]
    12f4:	2b00      	cmp	r3, #0
    12f6:	d003      	beq.n	1300 <start_POP_cycle_calibration+0x18>
		mw_sweep_settings.sweep_mode = POP_CAL_ONLY;
    12f8:	4b0f      	ldr	r3, [pc, #60]	; (1338 <start_POP_cycle_calibration+0x50>)
    12fa:	2201      	movs	r2, #1
    12fc:	f883 2049 	strb.w	r2, [r3, #73]	; 0x49
	}
	HAL_GPIO_WritePin(MW_INVALID_GPIO_Port, MW_INVALID_Pin, GPIO_PIN_SET); 	//Sets MW_invalid pin high to reset POP cycle
    1300:	2201      	movs	r2, #1
    1302:	2102      	movs	r1, #2
    1304:	480d      	ldr	r0, [pc, #52]	; (133c <start_POP_cycle_calibration+0x54>)
    1306:	f000 fbe7 	bl	1ad8 <__HAL_GPIO_WritePin_veneer>
	HAL_Delay(10); // 10ms in case ADC was part-way through a conversion
    130a:	200a      	movs	r0, #10
    130c:	f000 fbe0 	bl	1ad0 <__HAL_Delay_veneer>
	sample_count = 0; //reset sample count
    1310:	4b0b      	ldr	r3, [pc, #44]	; (1340 <start_POP_cycle_calibration+0x58>)
    1312:	2200      	movs	r2, #0
    1314:	801a      	strh	r2, [r3, #0]
	mw_sweep_settings.state = MW_CALIBRATE;
    1316:	4b08      	ldr	r3, [pc, #32]	; (1338 <start_POP_cycle_calibration+0x50>)
    1318:	2206      	movs	r2, #6
    131a:	701a      	strb	r2, [r3, #0]
	start_timer(MW_TIMER); //reset MW_timer and start counting
    131c:	4b09      	ldr	r3, [pc, #36]	; (1344 <start_POP_cycle_calibration+0x5c>)
    131e:	681b      	ldr	r3, [r3, #0]
    1320:	4618      	mov	r0, r3
    1322:	f000 fb7b 	bl	1a1c <start_timer>
	HAL_GPIO_WritePin(MW_INVALID_GPIO_Port, MW_INVALID_Pin, GPIO_PIN_RESET); //Restart POP cycle
    1326:	2200      	movs	r2, #0
    1328:	2102      	movs	r1, #2
    132a:	4804      	ldr	r0, [pc, #16]	; (133c <start_POP_cycle_calibration+0x54>)
    132c:	f000 fbd4 	bl	1ad8 <__HAL_GPIO_WritePin_veneer>
	#ifdef MW_VERBOSE
		printf("POP calibration started\r\n");
	#endif //MW_VERBOSE
}
    1330:	bf00      	nop
    1332:	3708      	adds	r7, #8
    1334:	46bd      	mov	sp, r7
    1336:	bd80      	pop	{r7, pc}
    1338:	20000648 	.word	0x20000648
    133c:	58020400 	.word	0x58020400
    1340:	200005f6 	.word	0x200005f6
    1344:	2000001c 	.word	0x2000001c

00001348 <start_MW_sweep>:

/**
  * @brief  Starts a MW sweep
  * @retval Success/failure
  */
static const bool start_MW_sweep(const bool single_sweep) {
    1348:	b580      	push	{r7, lr}
    134a:	b082      	sub	sp, #8
    134c:	af00      	add	r7, sp, #0
    134e:	4603      	mov	r3, r0
    1350:	71fb      	strb	r3, [r7, #7]
	//uses settings from the mw_sweep_settings structure
	if (single_sweep == true) {
    1352:	79fb      	ldrb	r3, [r7, #7]
    1354:	2b00      	cmp	r3, #0
    1356:	d003      	beq.n	1360 <start_MW_sweep+0x18>
		mw_sweep_settings.sweep_mode = SWEEP_ONCE;
    1358:	4b1c      	ldr	r3, [pc, #112]	; (13cc <start_MW_sweep+0x84>)
    135a:	2202      	movs	r2, #2
    135c:	f883 2049 	strb.w	r2, [r3, #73]	; 0x49
	}
	HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_SET); // Assume MW lock, the LED will be disabled if lock fails.
    1360:	2201      	movs	r2, #1
    1362:	2102      	movs	r1, #2
    1364:	481a      	ldr	r0, [pc, #104]	; (13d0 <start_MW_sweep+0x88>)
    1366:	f000 fbb7 	bl	1ad8 <__HAL_GPIO_WritePin_veneer>

	#ifdef MW_VERBOSE
		printf("Setting trigger output low \r\n");
	#endif //MW_VERBOSE

	HAL_GPIO_WritePin(MW_INVALID_GPIO_Port, MW_INVALID_Pin, GPIO_PIN_SET); //Sets MW_invalid pin high
    136a:	2201      	movs	r2, #1
    136c:	2102      	movs	r1, #2
    136e:	4819      	ldr	r0, [pc, #100]	; (13d4 <start_MW_sweep+0x8c>)
    1370:	f000 fbb2 	bl	1ad8 <__HAL_GPIO_WritePin_veneer>
//	set_frequency(mw_sweep_settings.NINT, mw_sweep_settings.NFRAC_start, mw_sweep_settings.k, MANUAL_MUTE); //program initial MW frequency
	set_freq_regs(mw_sweep_settings.NINT, mw_sweep_settings.NFRAC_start_of_ramp, mw_sweep_settings.k); //program initial MW frequency
    1374:	4b15      	ldr	r3, [pc, #84]	; (13cc <start_MW_sweep+0x84>)
    1376:	685b      	ldr	r3, [r3, #4]
    1378:	4a14      	ldr	r2, [pc, #80]	; (13cc <start_MW_sweep+0x84>)
    137a:	68d1      	ldr	r1, [r2, #12]
    137c:	4a13      	ldr	r2, [pc, #76]	; (13cc <start_MW_sweep+0x84>)
    137e:	7892      	ldrb	r2, [r2, #2]
    1380:	4618      	mov	r0, r3
    1382:	f7ff fb85 	bl	a90 <set_freq_regs>
	mw_sweep_settings.state = MW_STABILISING; //waiting for MW output to stabilise
    1386:	4b11      	ldr	r3, [pc, #68]	; (13cc <start_MW_sweep+0x84>)
    1388:	2202      	movs	r2, #2
    138a:	701a      	strb	r2, [r3, #0]
	mw_sweep_settings.next_state = MW_RAMP_DWELL;
    138c:	4b0f      	ldr	r3, [pc, #60]	; (13cc <start_MW_sweep+0x84>)
    138e:	2205      	movs	r2, #5
    1390:	705a      	strb	r2, [r3, #1]
	mw_sweep_settings.current_point = 0; //currently on at start of ramp i.e. point 0
    1392:	4b0e      	ldr	r3, [pc, #56]	; (13cc <start_MW_sweep+0x84>)
    1394:	2200      	movs	r2, #0
    1396:	629a      	str	r2, [r3, #40]	; 0x28
	HAL_Delay(10); // 10ms in case ADC was part-way through a conversion
    1398:	200a      	movs	r0, #10
    139a:	f000 fb99 	bl	1ad0 <__HAL_Delay_veneer>
	/* Output used for triggering external scope */
	HAL_GPIO_WritePin(SCOPE_TRIG_OUT_GPIO_Port, SCOPE_TRIG_OUT_Pin, GPIO_PIN_RESET); // Sets trigger output low
    139e:	2200      	movs	r2, #0
    13a0:	2101      	movs	r1, #1
    13a2:	480d      	ldr	r0, [pc, #52]	; (13d8 <start_MW_sweep+0x90>)
    13a4:	f000 fb98 	bl	1ad8 <__HAL_GPIO_WritePin_veneer>
	start_timer(MW_TIMER); //reset MW_timer (MW step timer) and start counting
    13a8:	4b0c      	ldr	r3, [pc, #48]	; (13dc <start_MW_sweep+0x94>)
    13aa:	681b      	ldr	r3, [r3, #0]
    13ac:	4618      	mov	r0, r3
    13ae:	f000 fb35 	bl	1a1c <start_timer>
	start_timer(SWEEP_TIMER); //reset general (sweep) timer and start counting
    13b2:	4b0b      	ldr	r3, [pc, #44]	; (13e0 <start_MW_sweep+0x98>)
    13b4:	681b      	ldr	r3, [r3, #0]
    13b6:	4618      	mov	r0, r3
    13b8:	f000 fb30 	bl	1a1c <start_timer>
	sample_count = 0; //reset sample count
    13bc:	4b09      	ldr	r3, [pc, #36]	; (13e4 <start_MW_sweep+0x9c>)
    13be:	2200      	movs	r2, #0
    13c0:	801a      	strh	r2, [r3, #0]
	//known limitation - if the ADC has been recently triggered then HAL_ADC_ConvCpltCallback will increment sample_count by 1
	//workround is to introduce a small delay after setting MW_invalid high
	return(true);
    13c2:	2301      	movs	r3, #1
}
    13c4:	4618      	mov	r0, r3
    13c6:	3708      	adds	r7, #8
    13c8:	46bd      	mov	sp, r7
    13ca:	bd80      	pop	{r7, pc}
    13cc:	20000648 	.word	0x20000648
    13d0:	58021000 	.word	0x58021000
    13d4:	58020400 	.word	0x58020400
    13d8:	58021800 	.word	0x58021800
    13dc:	2000001c 	.word	0x2000001c
    13e0:	20000020 	.word	0x20000020
    13e4:	200005f6 	.word	0x200005f6

000013e8 <start_POP_tuning>:

/**
  * @brief  Starts the MW tuning process
  * @retval None
  */
void start_POP_tuning(const double centre_freq) {
    13e8:	b580      	push	{r7, lr}
    13ea:	b082      	sub	sp, #8
    13ec:	af00      	add	r7, sp, #0
    13ee:	ed87 0b00 	vstr	d0, [r7]
	stop_MW_operation(); //releases timers and ensures that sample pulse is generated for ADC
    13f2:	f000 f83d 	bl	1470 <stop_MW_operation>
//	if (test for straying above bound) {
//		printf("LOSS OF MW LOCK\r\n");
//		printf("Error message: %u\r\n", variable);
//		Error_Handler();
//	}
	HAL_GPIO_WritePin(MW_INVALID_GPIO_Port, MW_INVALID_Pin, GPIO_PIN_SET); //Sets MW_invalid pin high
    13f6:	2201      	movs	r2, #1
    13f8:	2102      	movs	r1, #2
    13fa:	4812      	ldr	r0, [pc, #72]	; (1444 <start_POP_tuning+0x5c>)
    13fc:	f000 fb6c 	bl	1ad8 <__HAL_GPIO_WritePin_veneer>
	calc_hyperfine_settings(centre_freq); //calculates HMC835 k and N settings and places them in mw_sweep_settings
    1400:	ed97 0b00 	vldr	d0, [r7]
    1404:	f7ff fefa 	bl	11fc <calc_hyperfine_settings>
	set_freq_regs(mw_sweep_settings.NINT, mw_sweep_settings.NFRAC_hyperfine + POP_STEP, mw_sweep_settings.k); //MW f set above hyperfine
    1408:	4b0f      	ldr	r3, [pc, #60]	; (1448 <start_POP_tuning+0x60>)
    140a:	6858      	ldr	r0, [r3, #4]
    140c:	4b0e      	ldr	r3, [pc, #56]	; (1448 <start_POP_tuning+0x60>)
    140e:	689b      	ldr	r3, [r3, #8]
    1410:	3308      	adds	r3, #8
    1412:	4a0d      	ldr	r2, [pc, #52]	; (1448 <start_POP_tuning+0x60>)
    1414:	7892      	ldrb	r2, [r2, #2]
    1416:	4619      	mov	r1, r3
    1418:	f7ff fb3a 	bl	a90 <set_freq_regs>
	mw_sweep_settings.state = MW_STABILISING; //waiting for MW output to stabilise
    141c:	4b0a      	ldr	r3, [pc, #40]	; (1448 <start_POP_tuning+0x60>)
    141e:	2202      	movs	r2, #2
    1420:	701a      	strb	r2, [r3, #0]
	mw_sweep_settings.next_state = POP_SAMPLE_BELOW;
    1422:	4b09      	ldr	r3, [pc, #36]	; (1448 <start_POP_tuning+0x60>)
    1424:	2204      	movs	r2, #4
    1426:	705a      	strb	r2, [r3, #1]
	start_timer(SWEEP_TIMER); //Restart timer for MW settling time time
    1428:	4b08      	ldr	r3, [pc, #32]	; (144c <start_POP_tuning+0x64>)
    142a:	681b      	ldr	r3, [r3, #0]
    142c:	4618      	mov	r0, r3
    142e:	f000 faf5 	bl	1a1c <start_timer>
	start_timer(MW_TIMER); //Restart timer for MW settling time time
    1432:	4b07      	ldr	r3, [pc, #28]	; (1450 <start_POP_tuning+0x68>)
    1434:	681b      	ldr	r3, [r3, #0]
    1436:	4618      	mov	r0, r3
    1438:	f000 faf0 	bl	1a1c <start_timer>
//	reset_adc_samples(); //reset ADC samples including sample count
	#ifdef POP_VERBOSE
	printf("POP tuning - MW sampling above hyperfine\r\n");
	#endif //POP_VERBOSE
}
    143c:	bf00      	nop
    143e:	3708      	adds	r7, #8
    1440:	46bd      	mov	sp, r7
    1442:	bd80      	pop	{r7, pc}
    1444:	58020400 	.word	0x58020400
    1448:	20000648 	.word	0x20000648
    144c:	20000020 	.word	0x20000020
    1450:	2000001c 	.word	0x2000001c

00001454 <start_continuous_MW_sweep>:

/**
  * @brief  Starts a continuous MW calibrate/sweep cycle
  * @retval None
  */
void start_continuous_MW_sweep(void) {
    1454:	b580      	push	{r7, lr}
    1456:	af00      	add	r7, sp, #0
	mw_sweep_settings.sweep_mode = CONTINUOUS_SWEEP;
    1458:	4b04      	ldr	r3, [pc, #16]	; (146c <start_continuous_MW_sweep+0x18>)
    145a:	2200      	movs	r2, #0
    145c:	f883 2049 	strb.w	r2, [r3, #73]	; 0x49
	start_POP_cycle_calibration(false);
    1460:	2000      	movs	r0, #0
    1462:	f7ff ff41 	bl	12e8 <start_POP_cycle_calibration>
}
    1466:	bf00      	nop
    1468:	bd80      	pop	{r7, pc}
    146a:	bf00      	nop
    146c:	20000648 	.word	0x20000648

00001470 <stop_MW_operation>:

/**
  * @brief  Stops MW operation e.g. for laser tuning
  * @retval None
  */
void stop_MW_operation(void) {
    1470:	b580      	push	{r7, lr}
    1472:	af00      	add	r7, sp, #0
	mw_sweep_settings.sweep_mode = MW_STOPPED;
    1474:	4b0b      	ldr	r3, [pc, #44]	; (14a4 <stop_MW_operation+0x34>)
    1476:	2200      	movs	r2, #0
    1478:	f883 2049 	strb.w	r2, [r3, #73]	; 0x49
	synth_writereg(mw_sweep_settings.NFRAC_hyperfine, FRACTIONAL_FREQUENCY_REGISTER, 0x0, VERIFY);  //MW f set to hyperfine
    147c:	4b09      	ldr	r3, [pc, #36]	; (14a4 <stop_MW_operation+0x34>)
    147e:	6898      	ldr	r0, [r3, #8]
    1480:	2301      	movs	r3, #1
    1482:	2200      	movs	r2, #0
    1484:	2104      	movs	r1, #4
    1486:	f7ff f8f3 	bl	670 <synth_writereg>
	stop_timer(MW_TIMER);
    148a:	4b07      	ldr	r3, [pc, #28]	; (14a8 <stop_MW_operation+0x38>)
    148c:	681b      	ldr	r3, [r3, #0]
    148e:	4618      	mov	r0, r3
    1490:	f000 fae2 	bl	1a58 <stop_timer>
	HAL_GPIO_WritePin(MW_INVALID_GPIO_Port, MW_INVALID_Pin, GPIO_PIN_RESET); //Ensures the ADC sample pulse is being generated
    1494:	2200      	movs	r2, #0
    1496:	2102      	movs	r1, #2
    1498:	4804      	ldr	r0, [pc, #16]	; (14ac <stop_MW_operation+0x3c>)
    149a:	f000 fb1d 	bl	1ad8 <__HAL_GPIO_WritePin_veneer>
}
    149e:	bf00      	nop
    14a0:	bd80      	pop	{r7, pc}
    14a2:	bf00      	nop
    14a4:	20000648 	.word	0x20000648
    14a8:	2000001c 	.word	0x2000001c
    14ac:	58020400 	.word	0x58020400

000014b0 <MW_update>:

/**
  * @brief  Checks MW status to see if a timer has elapsed and if frequency needs changing.
  * @retval True if an action was taken
  */
const bool MW_update(void) {
    14b0:	b580      	push	{r7, lr}
    14b2:	b08a      	sub	sp, #40	; 0x28
    14b4:	af04      	add	r7, sp, #16
	uint8_t local_copy_of_MW_state = mw_sweep_settings.state; //hack to make switch statement behave
    14b6:	4b98      	ldr	r3, [pc, #608]	; (1718 <MW_update+0x268>)
    14b8:	781b      	ldrb	r3, [r3, #0]
    14ba:	75bb      	strb	r3, [r7, #22]
	//switch (mw_sweep_settings.state)
	bool action_taken = false;
    14bc:	2300      	movs	r3, #0
    14be:	75fb      	strb	r3, [r7, #23]
	uint32_t sweep_period_us;
	switch (local_copy_of_MW_state)
    14c0:	7dbb      	ldrb	r3, [r7, #22]
    14c2:	2b06      	cmp	r3, #6
    14c4:	f200 817a 	bhi.w	17bc <MW_update+0x30c>
    14c8:	a201      	add	r2, pc, #4	; (adr r2, 14d0 <MW_update+0x20>)
    14ca:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
    14ce:	bf00      	nop
    14d0:	000017d5 	.word	0x000017d5
    14d4:	000017d5 	.word	0x000017d5
    14d8:	000014ed 	.word	0x000014ed
    14dc:	0000153d 	.word	0x0000153d
    14e0:	00001587 	.word	0x00001587
    14e4:	000015d1 	.word	0x000015d1
    14e8:	00001749 	.word	0x00001749
		case MW_STOPPED:
		case MW_FIXED_FREQ:
			break; //no action to take

		case MW_STABILISING: //waiting for MW output to stabilise
			if (check_timer(MW_TIMER) < MW_STABILISE_TIME_US) return(false); //Still waiting, no action taken
    14ec:	4b8b      	ldr	r3, [pc, #556]	; (171c <MW_update+0x26c>)
    14ee:	681b      	ldr	r3, [r3, #0]
    14f0:	4618      	mov	r0, r3
    14f2:	f000 fac3 	bl	1a7c <check_timer>
    14f6:	4603      	mov	r3, r0
    14f8:	f241 7270 	movw	r2, #6000	; 0x1770
    14fc:	4293      	cmp	r3, r2
    14fe:	d201      	bcs.n	1504 <MW_update+0x54>
    1500:	2300      	movs	r3, #0
    1502:	e16f      	b.n	17e4 <MW_update+0x334>
			//Otherwise MW stabilisation timer has elapsed
			stop_timer(MW_TIMER);
    1504:	4b85      	ldr	r3, [pc, #532]	; (171c <MW_update+0x26c>)
    1506:	681b      	ldr	r3, [r3, #0]
    1508:	4618      	mov	r0, r3
    150a:	f000 faa5 	bl	1a58 <stop_timer>
			reset_adc_samples(); //clear any data in the adc sample buffer
    150e:	f7ff f893 	bl	638 <reset_adc_samples>
			HAL_GPIO_WritePin(MW_INVALID_GPIO_Port, MW_INVALID_Pin, GPIO_PIN_RESET); //Sets MW_invalid pin low as MW now stable
    1512:	2200      	movs	r2, #0
    1514:	2102      	movs	r1, #2
    1516:	4882      	ldr	r0, [pc, #520]	; (1720 <MW_update+0x270>)
    1518:	f000 fade 	bl	1ad8 <__HAL_GPIO_WritePin_veneer>
//			mw_sweep_settings.state = MW_RAMP_DWELL;
			if (mw_sweep_settings.next_state == MW_RAMP_DWELL) start_timer(MW_TIMER); //Restart timer for DWELL time
    151c:	4b7e      	ldr	r3, [pc, #504]	; (1718 <MW_update+0x268>)
    151e:	785b      	ldrb	r3, [r3, #1]
    1520:	2b05      	cmp	r3, #5
    1522:	d104      	bne.n	152e <MW_update+0x7e>
    1524:	4b7d      	ldr	r3, [pc, #500]	; (171c <MW_update+0x26c>)
    1526:	681b      	ldr	r3, [r3, #0]
    1528:	4618      	mov	r0, r3
    152a:	f000 fa77 	bl	1a1c <start_timer>
			mw_sweep_settings.state = mw_sweep_settings.next_state;
    152e:	4b7a      	ldr	r3, [pc, #488]	; (1718 <MW_update+0x268>)
    1530:	785a      	ldrb	r2, [r3, #1]
    1532:	4b79      	ldr	r3, [pc, #484]	; (1718 <MW_update+0x268>)
    1534:	701a      	strb	r2, [r3, #0]
			action_taken = true;
    1536:	2301      	movs	r3, #1
    1538:	75fb      	strb	r3, [r7, #23]
			break;
    153a:	e152      	b.n	17e2 <MW_update+0x332>

		case POP_SAMPLE_ABOVE: //POP with elevated MW frequency
			if(adc_average_updated) {
    153c:	4b79      	ldr	r3, [pc, #484]	; (1724 <MW_update+0x274>)
    153e:	781b      	ldrb	r3, [r3, #0]
    1540:	2b00      	cmp	r3, #0
    1542:	f000 8149 	beq.w	17d8 <MW_update+0x328>
				adc_polled_above = adc_averaged_val;
    1546:	4b78      	ldr	r3, [pc, #480]	; (1728 <MW_update+0x278>)
    1548:	681b      	ldr	r3, [r3, #0]
    154a:	4a78      	ldr	r2, [pc, #480]	; (172c <MW_update+0x27c>)
    154c:	6013      	str	r3, [r2, #0]
//				if (test for straying below bounds) {
//				    printf("LOSS OF MW LOCK\r\n");
//				    printf("Error message: %u\r\n", variable);
//					Error_Handler();
//				}
				HAL_GPIO_WritePin(MW_INVALID_GPIO_Port, MW_INVALID_Pin, GPIO_PIN_SET); //Sets MW_invalid pin high
    154e:	2201      	movs	r2, #1
    1550:	2102      	movs	r1, #2
    1552:	4873      	ldr	r0, [pc, #460]	; (1720 <MW_update+0x270>)
    1554:	f000 fac0 	bl	1ad8 <__HAL_GPIO_WritePin_veneer>
//				set_freq_regs(mw_sweep_settings.NINT, mw_sweep_settings.NFRAC_hyperfine - POP_STEP, mw_sweep_settings.k); //MW f set below hyperfine
				synth_writereg(mw_sweep_settings.NFRAC_hyperfine - POP_STEP, FRACTIONAL_FREQUENCY_REGISTER, 0x0, VERIFY);  //MW f set below hyperfine
    1558:	4b6f      	ldr	r3, [pc, #444]	; (1718 <MW_update+0x268>)
    155a:	689b      	ldr	r3, [r3, #8]
    155c:	f1a3 0008 	sub.w	r0, r3, #8
    1560:	2301      	movs	r3, #1
    1562:	2200      	movs	r2, #0
    1564:	2104      	movs	r1, #4
    1566:	f7ff f883 	bl	670 <synth_writereg>
				mw_sweep_settings.state = MW_STABILISING; //waiting for MW output to stabilise
    156a:	4b6b      	ldr	r3, [pc, #428]	; (1718 <MW_update+0x268>)
    156c:	2202      	movs	r2, #2
    156e:	701a      	strb	r2, [r3, #0]
				mw_sweep_settings.next_state = POP_SAMPLE_BELOW;
    1570:	4b69      	ldr	r3, [pc, #420]	; (1718 <MW_update+0x268>)
    1572:	2204      	movs	r2, #4
    1574:	705a      	strb	r2, [r3, #1]
				start_timer(MW_TIMER); //Restart timer for MW settling time time
    1576:	4b69      	ldr	r3, [pc, #420]	; (171c <MW_update+0x26c>)
    1578:	681b      	ldr	r3, [r3, #0]
    157a:	4618      	mov	r0, r3
    157c:	f000 fa4e 	bl	1a1c <start_timer>
//				reset_adc_samples(); //reset ADC samples including sample count
				#ifdef POP_VERBOSE
				printf("POP tuning - MW sampling above hyperfine\r\n");
				#endif //POP_VERBOSE
				action_taken = true;
    1580:	2301      	movs	r3, #1
    1582:	75fb      	strb	r3, [r7, #23]
			}
			break;
    1584:	e128      	b.n	17d8 <MW_update+0x328>
		case POP_SAMPLE_BELOW: //POP with reduced MW frequency
			if(adc_average_updated) {
    1586:	4b67      	ldr	r3, [pc, #412]	; (1724 <MW_update+0x274>)
    1588:	781b      	ldrb	r3, [r3, #0]
    158a:	2b00      	cmp	r3, #0
    158c:	f000 8126 	beq.w	17dc <MW_update+0x32c>
				adc_polled_above = adc_averaged_val;
    1590:	4b65      	ldr	r3, [pc, #404]	; (1728 <MW_update+0x278>)
    1592:	681b      	ldr	r3, [r3, #0]
    1594:	4a65      	ldr	r2, [pc, #404]	; (172c <MW_update+0x27c>)
    1596:	6013      	str	r3, [r2, #0]
//				if (test for straying above bounds) {
//				    printf("LOSS OF MW LOCK\r\n");
//				    printf("Error message: %u\r\n", variable);
//					Error_Handler();
//				}
				HAL_GPIO_WritePin(MW_INVALID_GPIO_Port, MW_INVALID_Pin, GPIO_PIN_SET); //Sets MW_invalid pin high
    1598:	2201      	movs	r2, #1
    159a:	2102      	movs	r1, #2
    159c:	4860      	ldr	r0, [pc, #384]	; (1720 <MW_update+0x270>)
    159e:	f000 fa9b 	bl	1ad8 <__HAL_GPIO_WritePin_veneer>
//				set_freq_regs(mw_sweep_settings.NINT, mw_sweep_settings.NFRAC_hyperfine + POP_STEP, mw_sweep_settings.k); //MW f set above hyperfine
				synth_writereg(mw_sweep_settings.NFRAC_hyperfine + POP_STEP, FRACTIONAL_FREQUENCY_REGISTER, 0x0, VERIFY);  //MW f set above hyperfine
    15a2:	4b5d      	ldr	r3, [pc, #372]	; (1718 <MW_update+0x268>)
    15a4:	689b      	ldr	r3, [r3, #8]
    15a6:	f103 0008 	add.w	r0, r3, #8
    15aa:	2301      	movs	r3, #1
    15ac:	2200      	movs	r2, #0
    15ae:	2104      	movs	r1, #4
    15b0:	f7ff f85e 	bl	670 <synth_writereg>
				mw_sweep_settings.state = MW_STABILISING; //waiting for MW output to stabilise
    15b4:	4b58      	ldr	r3, [pc, #352]	; (1718 <MW_update+0x268>)
    15b6:	2202      	movs	r2, #2
    15b8:	701a      	strb	r2, [r3, #0]
				mw_sweep_settings.next_state = POP_SAMPLE_ABOVE;
    15ba:	4b57      	ldr	r3, [pc, #348]	; (1718 <MW_update+0x268>)
    15bc:	2203      	movs	r2, #3
    15be:	705a      	strb	r2, [r3, #1]
				start_timer(MW_TIMER); //Restart timer for MW settling time time
    15c0:	4b56      	ldr	r3, [pc, #344]	; (171c <MW_update+0x26c>)
    15c2:	681b      	ldr	r3, [r3, #0]
    15c4:	4618      	mov	r0, r3
    15c6:	f000 fa29 	bl	1a1c <start_timer>
//				reset_adc_samples(); //reset ADC samples including sample count
				#ifdef POP_VERBOSE
				printf("POP tuning - MW sampling above hyperfine\r\n");
				#endif //POP_VERBOSE
				action_taken = true;
    15ca:	2301      	movs	r3, #1
    15cc:	75fb      	strb	r3, [r7, #23]
			}
			break;
    15ce:	e105      	b.n	17dc <MW_update+0x32c>

		case MW_RAMP_DWELL: //valid MW output waiting for end of dwell time
			if (check_timer(MW_TIMER) < mw_sweep_settings.dwell_time) return(false); //Still waiting
    15d0:	4b52      	ldr	r3, [pc, #328]	; (171c <MW_update+0x26c>)
    15d2:	681b      	ldr	r3, [r3, #0]
    15d4:	4618      	mov	r0, r3
    15d6:	f000 fa51 	bl	1a7c <check_timer>
    15da:	4602      	mov	r2, r0
    15dc:	4b4e      	ldr	r3, [pc, #312]	; (1718 <MW_update+0x268>)
    15de:	6a1b      	ldr	r3, [r3, #32]
    15e0:	429a      	cmp	r2, r3
    15e2:	d201      	bcs.n	15e8 <MW_update+0x138>
    15e4:	2300      	movs	r3, #0
    15e6:	e0fd      	b.n	17e4 <MW_update+0x334>
			//Otherwise dwell timer has elapsed
			action_taken = true;
    15e8:	2301      	movs	r3, #1
    15ea:	75fb      	strb	r3, [r7, #23]
			stop_timer(MW_TIMER);
    15ec:	4b4b      	ldr	r3, [pc, #300]	; (171c <MW_update+0x26c>)
    15ee:	681b      	ldr	r3, [r3, #0]
    15f0:	4618      	mov	r0, r3
    15f2:	f000 fa31 	bl	1a58 <stop_timer>
			HAL_GPIO_TogglePin(LD3_GPIO_Port, LD3_Pin); //toggles red LED
    15f6:	f44f 4180 	mov.w	r1, #16384	; 0x4000
    15fa:	4849      	ldr	r0, [pc, #292]	; (1720 <MW_update+0x270>)
    15fc:	f000 fa74 	bl	1ae8 <__HAL_GPIO_TogglePin_veneer>
			HAL_GPIO_WritePin(MW_INVALID_GPIO_Port, MW_INVALID_Pin, GPIO_PIN_SET); //Sets MW_invalid pin high as about to change frequency
    1600:	2201      	movs	r2, #1
    1602:	2102      	movs	r1, #2
    1604:	4846      	ldr	r0, [pc, #280]	; (1720 <MW_update+0x270>)
    1606:	f000 fa67 	bl	1ad8 <__HAL_GPIO_WritePin_veneer>
			mw_sweep_settings.state = MW_STABILISING;
    160a:	4b43      	ldr	r3, [pc, #268]	; (1718 <MW_update+0x268>)
    160c:	2202      	movs	r2, #2
    160e:	701a      	strb	r2, [r3, #0]
			if (mw_sweep_settings.current_point == mw_sweep_settings.num_steps) { // All steps completed, tidy up and restart next sweep
    1610:	4b41      	ldr	r3, [pc, #260]	; (1718 <MW_update+0x268>)
    1612:	6a9a      	ldr	r2, [r3, #40]	; 0x28
    1614:	4b40      	ldr	r3, [pc, #256]	; (1718 <MW_update+0x268>)
    1616:	691b      	ldr	r3, [r3, #16]
    1618:	429a      	cmp	r2, r3
    161a:	d15c      	bne.n	16d6 <MW_update+0x226>
				HAL_GPIO_WritePin(SCOPE_TRIG_OUT_GPIO_Port, SCOPE_TRIG_OUT_Pin, GPIO_PIN_SET); // Sets trigger output high
    161c:	2201      	movs	r2, #1
    161e:	2101      	movs	r1, #1
    1620:	4843      	ldr	r0, [pc, #268]	; (1730 <MW_update+0x280>)
    1622:	f000 fa59 	bl	1ad8 <__HAL_GPIO_WritePin_veneer>
				sweep_period_us=check_timer(SWEEP_TIMER);
    1626:	4b43      	ldr	r3, [pc, #268]	; (1734 <MW_update+0x284>)
    1628:	681b      	ldr	r3, [r3, #0]
    162a:	4618      	mov	r0, r3
    162c:	f000 fa26 	bl	1a7c <check_timer>
    1630:	60b8      	str	r0, [r7, #8]
				stop_timer(SWEEP_TIMER);
    1632:	4b40      	ldr	r3, [pc, #256]	; (1734 <MW_update+0x284>)
    1634:	681b      	ldr	r3, [r3, #0]
    1636:	4618      	mov	r0, r3
    1638:	f000 fa0e 	bl	1a58 <stop_timer>
				printf("Sweep complete in %.4g s. Expected %.4g s. %u samples\r\n", (double)(sweep_period_us)/1000000, mw_sweep_settings.sweep_period, sample_count);
    163c:	68bb      	ldr	r3, [r7, #8]
    163e:	ee07 3a90 	vmov	s15, r3
    1642:	eeb8 7b67 	vcvt.f64.u32	d7, s15
    1646:	ed9f 6b32 	vldr	d6, [pc, #200]	; 1710 <MW_update+0x260>
    164a:	ee87 5b06 	vdiv.f64	d5, d7, d6
    164e:	4b32      	ldr	r3, [pc, #200]	; (1718 <MW_update+0x268>)
    1650:	e9d3 2310 	ldrd	r2, r3, [r3, #64]	; 0x40
    1654:	4938      	ldr	r1, [pc, #224]	; (1738 <MW_update+0x288>)
    1656:	8809      	ldrh	r1, [r1, #0]
    1658:	b289      	uxth	r1, r1
    165a:	9102      	str	r1, [sp, #8]
    165c:	e9cd 2300 	strd	r2, r3, [sp]
    1660:	ec53 2b15 	vmov	r2, r3, d5
    1664:	4835      	ldr	r0, [pc, #212]	; (173c <MW_update+0x28c>)
    1666:	f000 fa3b 	bl	1ae0 <__printf_veneer>
				/* Check if the ADC registered the correct number of samples */
				uint16_t expected_samples = mw_sweep_settings.pop_cycles_per_point * (mw_sweep_settings.num_steps + 1);
    166a:	4b2b      	ldr	r3, [pc, #172]	; (1718 <MW_update+0x268>)
    166c:	699b      	ldr	r3, [r3, #24]
    166e:	b29a      	uxth	r2, r3
    1670:	4b29      	ldr	r3, [pc, #164]	; (1718 <MW_update+0x268>)
    1672:	691b      	ldr	r3, [r3, #16]
    1674:	3301      	adds	r3, #1
    1676:	b29b      	uxth	r3, r3
    1678:	fb12 f303 	smulbb	r3, r2, r3
    167c:	80fb      	strh	r3, [r7, #6]
				uint16_t possible_samples = expected_samples + mw_sweep_settings.num_steps + 1;
    167e:	4b26      	ldr	r3, [pc, #152]	; (1718 <MW_update+0x268>)
    1680:	691b      	ldr	r3, [r3, #16]
    1682:	b29a      	uxth	r2, r3
    1684:	88fb      	ldrh	r3, [r7, #6]
    1686:	4413      	add	r3, r2
    1688:	b29b      	uxth	r3, r3
    168a:	3301      	adds	r3, #1
    168c:	80bb      	strh	r3, [r7, #4]
//				printf("Sweep generated %u full POP cycles and registered %u samples\r\n", expected_samples, sample_count);
				if ((sample_count == expected_samples) || (sample_count == possible_samples)) {
    168e:	4b2a      	ldr	r3, [pc, #168]	; (1738 <MW_update+0x288>)
    1690:	881b      	ldrh	r3, [r3, #0]
    1692:	b29b      	uxth	r3, r3
    1694:	88fa      	ldrh	r2, [r7, #6]
    1696:	429a      	cmp	r2, r3
    1698:	d010      	beq.n	16bc <MW_update+0x20c>
    169a:	4b27      	ldr	r3, [pc, #156]	; (1738 <MW_update+0x288>)
    169c:	881b      	ldrh	r3, [r3, #0]
    169e:	b29b      	uxth	r3, r3
    16a0:	88ba      	ldrh	r2, [r7, #4]
    16a2:	429a      	cmp	r2, r3
    16a4:	d00a      	beq.n	16bc <MW_update+0x20c>
					#ifdef MW_VERBOSE
					printf("Sweep generated and successfully registered %u samples\r\n", sample_count);
					#endif //MW_VERBOSE
				} else {
					printf("Warning - sweep generated %u samples but %u registered\r\n", expected_samples, sample_count);
    16a6:	88fb      	ldrh	r3, [r7, #6]
    16a8:	4a23      	ldr	r2, [pc, #140]	; (1738 <MW_update+0x288>)
    16aa:	8812      	ldrh	r2, [r2, #0]
    16ac:	b292      	uxth	r2, r2
    16ae:	4619      	mov	r1, r3
    16b0:	4823      	ldr	r0, [pc, #140]	; (1740 <MW_update+0x290>)
    16b2:	f000 fa15 	bl	1ae0 <__printf_veneer>
					printf("Timing of last sample is marginal\r\n");
    16b6:	4823      	ldr	r0, [pc, #140]	; (1744 <MW_update+0x294>)
    16b8:	f000 fa1a 	bl	1af0 <__puts_veneer>
//				printf("MW processing time: %lu us\r\n", measured_processing_time_us);
//				if ((double)(measured_processing_time_us)/MW_PROCESSING_TIME_US > 1.1) {
//					printf("Warning - measured MW processing time (%lu us)is larger than the %lu us expected\r\n", measured_processing_time_us, MW_PROCESSING_TIME_US);
//				}
				#endif //MW_VERBOSE
				if (mw_sweep_settings.sweep_mode == SWEEP_ONCE) {//have reached the end of a single sweep and should stop
    16bc:	4b16      	ldr	r3, [pc, #88]	; (1718 <MW_update+0x268>)
    16be:	f893 3049 	ldrb.w	r3, [r3, #73]	; 0x49
    16c2:	2b02      	cmp	r3, #2
    16c4:	d103      	bne.n	16ce <MW_update+0x21e>
					mw_sweep_settings.state = MW_STOPPED;
    16c6:	4b14      	ldr	r3, [pc, #80]	; (1718 <MW_update+0x268>)
    16c8:	2200      	movs	r2, #0
    16ca:	701a      	strb	r2, [r3, #0]
						printf("Failure to program value to DAC \r\n");
						Error_Handler();
					}
				#endif //RAMP_DAC
			}
			break;
    16cc:	e089      	b.n	17e2 <MW_update+0x332>
					start_MW_sweep(false); //restart the next MW sweep without updating mw_sweep_settings.sweep_mode
    16ce:	2000      	movs	r0, #0
    16d0:	f7ff fe3a 	bl	1348 <start_MW_sweep>
			break;
    16d4:	e085      	b.n	17e2 <MW_update+0x332>
				mw_sweep_settings.current_point++; //increment point counter
    16d6:	4b10      	ldr	r3, [pc, #64]	; (1718 <MW_update+0x268>)
    16d8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    16da:	3301      	adds	r3, #1
    16dc:	4a0e      	ldr	r2, [pc, #56]	; (1718 <MW_update+0x268>)
    16de:	6293      	str	r3, [r2, #40]	; 0x28
				uint32_t local_NFRAC = mw_sweep_settings.NFRAC_start_of_ramp + mw_sweep_settings.step_size * mw_sweep_settings.current_point;
    16e0:	4b0d      	ldr	r3, [pc, #52]	; (1718 <MW_update+0x268>)
    16e2:	68da      	ldr	r2, [r3, #12]
    16e4:	4b0c      	ldr	r3, [pc, #48]	; (1718 <MW_update+0x268>)
    16e6:	695b      	ldr	r3, [r3, #20]
    16e8:	490b      	ldr	r1, [pc, #44]	; (1718 <MW_update+0x268>)
    16ea:	6a89      	ldr	r1, [r1, #40]	; 0x28
    16ec:	fb01 f303 	mul.w	r3, r1, r3
    16f0:	4413      	add	r3, r2
    16f2:	60fb      	str	r3, [r7, #12]
				set_freq_regs(mw_sweep_settings.NINT, local_NFRAC, mw_sweep_settings.k); //program new MW frequency
    16f4:	4b08      	ldr	r3, [pc, #32]	; (1718 <MW_update+0x268>)
    16f6:	685b      	ldr	r3, [r3, #4]
    16f8:	4a07      	ldr	r2, [pc, #28]	; (1718 <MW_update+0x268>)
    16fa:	7892      	ldrb	r2, [r2, #2]
    16fc:	68f9      	ldr	r1, [r7, #12]
    16fe:	4618      	mov	r0, r3
    1700:	f7ff f9c6 	bl	a90 <set_freq_regs>
				start_timer(MW_TIMER); //Restart timer for MW stabilisation time
    1704:	4b05      	ldr	r3, [pc, #20]	; (171c <MW_update+0x26c>)
    1706:	681b      	ldr	r3, [r3, #0]
    1708:	4618      	mov	r0, r3
    170a:	f000 f987 	bl	1a1c <start_timer>
			break;
    170e:	e068      	b.n	17e2 <MW_update+0x332>
    1710:	00000000 	.word	0x00000000
    1714:	412e8480 	.word	0x412e8480
    1718:	20000648 	.word	0x20000648
    171c:	2000001c 	.word	0x2000001c
    1720:	58020400 	.word	0x58020400
    1724:	2000062c 	.word	0x2000062c
    1728:	20000600 	.word	0x20000600
    172c:	20000630 	.word	0x20000630
    1730:	58021800 	.word	0x58021800
    1734:	20000020 	.word	0x20000020
    1738:	200005f6 	.word	0x200005f6
    173c:	0801c3cc 	.word	0x0801c3cc
    1740:	0801c404 	.word	0x0801c404
    1744:	0801c440 	.word	0x0801c440

		case MW_CALIBRATE: //Measures the elapsed time taken for 101 samples (100 POP cycles)
			if (sample_count >= 100) {//100 or more POP cycles have elapsed
    1748:	4b28      	ldr	r3, [pc, #160]	; (17ec <MW_update+0x33c>)
    174a:	881b      	ldrh	r3, [r3, #0]
    174c:	b29b      	uxth	r3, r3
    174e:	2b63      	cmp	r3, #99	; 0x63
    1750:	d946      	bls.n	17e0 <MW_update+0x330>
				uint32_t total_POP_cal_period = check_timer(MW_TIMER);
    1752:	4b27      	ldr	r3, [pc, #156]	; (17f0 <MW_update+0x340>)
    1754:	681b      	ldr	r3, [r3, #0]
    1756:	4618      	mov	r0, r3
    1758:	f000 f990 	bl	1a7c <check_timer>
    175c:	6138      	str	r0, [r7, #16]
				POP_period_us = (float)(total_POP_cal_period) / 100 + 0.5;
    175e:	693b      	ldr	r3, [r7, #16]
    1760:	ee07 3a90 	vmov	s15, r3
    1764:	eeb8 7a67 	vcvt.f32.u32	s14, s15
    1768:	eddf 6a22 	vldr	s13, [pc, #136]	; 17f4 <MW_update+0x344>
    176c:	eec7 7a26 	vdiv.f32	s15, s14, s13
    1770:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
    1774:	eeb6 6b00 	vmov.f64	d6, #96	; 0x3f000000  0.5
    1778:	ee37 7b06 	vadd.f64	d7, d7, d6
    177c:	eefc 7bc7 	vcvt.u32.f64	s15, d7
    1780:	ee17 2a90 	vmov	r2, s15
    1784:	4b1c      	ldr	r3, [pc, #112]	; (17f8 <MW_update+0x348>)
    1786:	601a      	str	r2, [r3, #0]
				stop_timer(MW_TIMER);
    1788:	4b19      	ldr	r3, [pc, #100]	; (17f0 <MW_update+0x340>)
    178a:	681b      	ldr	r3, [r3, #0]
    178c:	4618      	mov	r0, r3
    178e:	f000 f963 	bl	1a58 <stop_timer>
				printf("POP period, averaged over 100 cycles: %lu us\r\n", POP_period_us);
    1792:	4b19      	ldr	r3, [pc, #100]	; (17f8 <MW_update+0x348>)
    1794:	681b      	ldr	r3, [r3, #0]
    1796:	4619      	mov	r1, r3
    1798:	4818      	ldr	r0, [pc, #96]	; (17fc <MW_update+0x34c>)
    179a:	f000 f9a1 	bl	1ae0 <__printf_veneer>
				action_taken = true;
    179e:	2301      	movs	r3, #1
    17a0:	75fb      	strb	r3, [r7, #23]
				if (mw_sweep_settings.sweep_mode == POP_CAL_ONLY) {//have reached the end of calibration and should stop
    17a2:	4b17      	ldr	r3, [pc, #92]	; (1800 <MW_update+0x350>)
    17a4:	f893 3049 	ldrb.w	r3, [r3, #73]	; 0x49
    17a8:	2b01      	cmp	r3, #1
    17aa:	d103      	bne.n	17b4 <MW_update+0x304>
					mw_sweep_settings.state = MW_STOPPED;
    17ac:	4b14      	ldr	r3, [pc, #80]	; (1800 <MW_update+0x350>)
    17ae:	2200      	movs	r2, #0
    17b0:	701a      	strb	r2, [r3, #0]
				} else {
						start_MW_sweep(false); //start MW_sweep without updating mw_sweep_settings.sweep_mode
				}
			}
			break;
    17b2:	e015      	b.n	17e0 <MW_update+0x330>
						start_MW_sweep(false); //start MW_sweep without updating mw_sweep_settings.sweep_mode
    17b4:	2000      	movs	r0, #0
    17b6:	f7ff fdc7 	bl	1348 <start_MW_sweep>
			break;
    17ba:	e011      	b.n	17e0 <MW_update+0x330>

		default: // Other state
	       printf("MW_update has detected illegal state: %u \r\n", mw_sweep_settings.state);
    17bc:	4b10      	ldr	r3, [pc, #64]	; (1800 <MW_update+0x350>)
    17be:	781b      	ldrb	r3, [r3, #0]
    17c0:	4619      	mov	r1, r3
    17c2:	4810      	ldr	r0, [pc, #64]	; (1804 <MW_update+0x354>)
    17c4:	f000 f98c 	bl	1ae0 <__printf_veneer>
	       printf("local version: %u \r\n", local_copy_of_MW_state);
    17c8:	7dbb      	ldrb	r3, [r7, #22]
    17ca:	4619      	mov	r1, r3
    17cc:	480e      	ldr	r0, [pc, #56]	; (1808 <MW_update+0x358>)
    17ce:	f000 f987 	bl	1ae0 <__printf_veneer>
    17d2:	e006      	b.n	17e2 <MW_update+0x332>
			break; //no action to take
    17d4:	bf00      	nop
    17d6:	e004      	b.n	17e2 <MW_update+0x332>
			break;
    17d8:	bf00      	nop
    17da:	e002      	b.n	17e2 <MW_update+0x332>
			break;
    17dc:	bf00      	nop
    17de:	e000      	b.n	17e2 <MW_update+0x332>
			break;
    17e0:	bf00      	nop
	}
    return(action_taken);
    17e2:	7dfb      	ldrb	r3, [r7, #23]
}
    17e4:	4618      	mov	r0, r3
    17e6:	3718      	adds	r7, #24
    17e8:	46bd      	mov	sp, r7
    17ea:	bd80      	pop	{r7, pc}
    17ec:	200005f6 	.word	0x200005f6
    17f0:	2000001c 	.word	0x2000001c
    17f4:	42c80000 	.word	0x42c80000
    17f8:	200005f8 	.word	0x200005f8
    17fc:	0801c464 	.word	0x0801c464
    1800:	20000648 	.word	0x20000648
    1804:	0801c494 	.word	0x0801c494
    1808:	0801c4c0 	.word	0x0801c4c0

0000180c <MW_frequency_toggle>:

/* Function to check MW settling time
 * Toggles between two MW frequencies
 */
void MW_frequency_toggle (const double f_one, const double f_two) {
    180c:	b580      	push	{r7, lr}
    180e:	b090      	sub	sp, #64	; 0x40
    1810:	af02      	add	r7, sp, #8
    1812:	ed87 0b02 	vstr	d0, [r7, #8]
    1816:	ed87 1b00 	vstr	d1, [r7]
	printf("MW frequency toggling experiment\r\n");
    181a:	4869      	ldr	r0, [pc, #420]	; (19c0 <MW_frequency_toggle+0x1b4>)
    181c:	f000 f968 	bl	1af0 <__puts_veneer>
	printf("Toggling between %.10g and %.10g GHz\r\n", f_one/1000000000, f_two/1000000000);
    1820:	ed97 7b02 	vldr	d7, [r7, #8]
    1824:	ed9f 6b5e 	vldr	d6, [pc, #376]	; 19a0 <MW_frequency_toggle+0x194>
    1828:	ee87 4b06 	vdiv.f64	d4, d7, d6
    182c:	ed97 6b00 	vldr	d6, [r7]
    1830:	ed9f 5b5b 	vldr	d5, [pc, #364]	; 19a0 <MW_frequency_toggle+0x194>
    1834:	ee86 7b05 	vdiv.f64	d7, d6, d5
    1838:	ed8d 7b00 	vstr	d7, [sp]
    183c:	ec53 2b14 	vmov	r2, r3, d4
    1840:	4860      	ldr	r0, [pc, #384]	; (19c4 <MW_frequency_toggle+0x1b8>)
    1842:	f000 f94d 	bl	1ae0 <__printf_veneer>

	/* For the k divider we need to find the smallest even integer or use a max of 62*/
	uint32_t k_one = VCO_MAX_FREQ / f_one;
    1846:	ed9f 5b58 	vldr	d5, [pc, #352]	; 19a8 <MW_frequency_toggle+0x19c>
    184a:	ed97 6b02 	vldr	d6, [r7, #8]
    184e:	ee85 7b06 	vdiv.f64	d7, d5, d6
    1852:	eefc 7bc7 	vcvt.u32.f64	s15, d7
    1856:	ee17 3a90 	vmov	r3, s15
    185a:	637b      	str	r3, [r7, #52]	; 0x34
	if (k_one != 1) {
    185c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    185e:	2b01      	cmp	r3, #1
    1860:	d00b      	beq.n	187a <MW_frequency_toggle+0x6e>
		while (k_one > 62 || k_one % 2) {
    1862:	e002      	b.n	186a <MW_frequency_toggle+0x5e>
			k_one--;
    1864:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    1866:	3b01      	subs	r3, #1
    1868:	637b      	str	r3, [r7, #52]	; 0x34
		while (k_one > 62 || k_one % 2) {
    186a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    186c:	2b3e      	cmp	r3, #62	; 0x3e
    186e:	d8f9      	bhi.n	1864 <MW_frequency_toggle+0x58>
    1870:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    1872:	f003 0301 	and.w	r3, r3, #1
    1876:	2b00      	cmp	r3, #0
    1878:	d1f4      	bne.n	1864 <MW_frequency_toggle+0x58>
		}
	}
	uint32_t k_two = VCO_MAX_FREQ / f_two;
    187a:	ed9f 5b4b 	vldr	d5, [pc, #300]	; 19a8 <MW_frequency_toggle+0x19c>
    187e:	ed97 6b00 	vldr	d6, [r7]
    1882:	ee85 7b06 	vdiv.f64	d7, d5, d6
    1886:	eefc 7bc7 	vcvt.u32.f64	s15, d7
    188a:	ee17 3a90 	vmov	r3, s15
    188e:	633b      	str	r3, [r7, #48]	; 0x30
	if (k_two != 1) {
    1890:	6b3b      	ldr	r3, [r7, #48]	; 0x30
    1892:	2b01      	cmp	r3, #1
    1894:	d00b      	beq.n	18ae <MW_frequency_toggle+0xa2>
		while (k_two > 62 || k_two % 2) {
    1896:	e002      	b.n	189e <MW_frequency_toggle+0x92>
			k_two--;
    1898:	6b3b      	ldr	r3, [r7, #48]	; 0x30
    189a:	3b01      	subs	r3, #1
    189c:	633b      	str	r3, [r7, #48]	; 0x30
		while (k_two > 62 || k_two % 2) {
    189e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
    18a0:	2b3e      	cmp	r3, #62	; 0x3e
    18a2:	d8f9      	bhi.n	1898 <MW_frequency_toggle+0x8c>
    18a4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
    18a6:	f003 0301 	and.w	r3, r3, #1
    18aa:	2b00      	cmp	r3, #0
    18ac:	d1f4      	bne.n	1898 <MW_frequency_toggle+0x8c>
		}
	}

	const double N_one = ((f_one * k_one) / REF_FREQ);
    18ae:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    18b0:	ee07 3a90 	vmov	s15, r3
    18b4:	eeb8 6b67 	vcvt.f64.u32	d6, s15
    18b8:	ed97 7b02 	vldr	d7, [r7, #8]
    18bc:	ee26 6b07 	vmul.f64	d6, d6, d7
    18c0:	ed9f 5b3b 	vldr	d5, [pc, #236]	; 19b0 <MW_frequency_toggle+0x1a4>
    18c4:	ee86 7b05 	vdiv.f64	d7, d6, d5
    18c8:	ed87 7b0a 	vstr	d7, [r7, #40]	; 0x28
	const double N_two = ((f_two * k_two) / REF_FREQ);
    18cc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
    18ce:	ee07 3a90 	vmov	s15, r3
    18d2:	eeb8 6b67 	vcvt.f64.u32	d6, s15
    18d6:	ed97 7b00 	vldr	d7, [r7]
    18da:	ee26 6b07 	vmul.f64	d6, d6, d7
    18de:	ed9f 5b34 	vldr	d5, [pc, #208]	; 19b0 <MW_frequency_toggle+0x1a4>
    18e2:	ee86 7b05 	vdiv.f64	d7, d6, d5
    18e6:	ed87 7b08 	vstr	d7, [r7, #32]

	/* Extract the fractional and integer parts */
	const uint32_t N_one_INT = N_one;
    18ea:	ed97 7b0a 	vldr	d7, [r7, #40]	; 0x28
    18ee:	eefc 7bc7 	vcvt.u32.f64	s15, d7
    18f2:	ee17 3a90 	vmov	r3, s15
    18f6:	61fb      	str	r3, [r7, #28]
	const uint32_t N_one_FRAC = ((N_one - N_one_INT) * (1 << 24)) + 0.5;
    18f8:	69fb      	ldr	r3, [r7, #28]
    18fa:	ee07 3a90 	vmov	s15, r3
    18fe:	eeb8 7b67 	vcvt.f64.u32	d7, s15
    1902:	ed97 6b0a 	vldr	d6, [r7, #40]	; 0x28
    1906:	ee36 7b47 	vsub.f64	d7, d6, d7
    190a:	ed9f 6b2b 	vldr	d6, [pc, #172]	; 19b8 <MW_frequency_toggle+0x1ac>
    190e:	ee27 7b06 	vmul.f64	d7, d7, d6
    1912:	eeb6 6b00 	vmov.f64	d6, #96	; 0x3f000000  0.5
    1916:	ee37 7b06 	vadd.f64	d7, d7, d6
    191a:	eefc 7bc7 	vcvt.u32.f64	s15, d7
    191e:	ee17 3a90 	vmov	r3, s15
    1922:	61bb      	str	r3, [r7, #24]
	const uint32_t N_two_INT = N_two;
    1924:	ed97 7b08 	vldr	d7, [r7, #32]
    1928:	eefc 7bc7 	vcvt.u32.f64	s15, d7
    192c:	ee17 3a90 	vmov	r3, s15
    1930:	617b      	str	r3, [r7, #20]
	const uint32_t N_two_FRAC = ((N_two - N_two_INT) * (1 << 24)) + 0.5;
    1932:	697b      	ldr	r3, [r7, #20]
    1934:	ee07 3a90 	vmov	s15, r3
    1938:	eeb8 7b67 	vcvt.f64.u32	d7, s15
    193c:	ed97 6b08 	vldr	d6, [r7, #32]
    1940:	ee36 7b47 	vsub.f64	d7, d6, d7
    1944:	ed9f 6b1c 	vldr	d6, [pc, #112]	; 19b8 <MW_frequency_toggle+0x1ac>
    1948:	ee27 7b06 	vmul.f64	d7, d7, d6
    194c:	eeb6 6b00 	vmov.f64	d6, #96	; 0x3f000000  0.5
    1950:	ee37 7b06 	vadd.f64	d7, d7, d6
    1954:	eefc 7bc7 	vcvt.u32.f64	s15, d7
    1958:	ee17 3a90 	vmov	r3, s15
    195c:	613b      	str	r3, [r7, #16]

	while (1) {
	set_freq_regs(N_one_INT, N_one_FRAC, k_one); //Program necessary values for f_one
    195e:	6b7a      	ldr	r2, [r7, #52]	; 0x34
    1960:	69b9      	ldr	r1, [r7, #24]
    1962:	69f8      	ldr	r0, [r7, #28]
    1964:	f7ff f894 	bl	a90 <set_freq_regs>
	HAL_GPIO_WritePin(SCOPE_TRIG_OUT_GPIO_Port, SCOPE_TRIG_OUT_Pin, GPIO_PIN_RESET); // Sets trigger output low
    1968:	2200      	movs	r2, #0
    196a:	2101      	movs	r1, #1
    196c:	4816      	ldr	r0, [pc, #88]	; (19c8 <MW_frequency_toggle+0x1bc>)
    196e:	f000 f8b3 	bl	1ad8 <__HAL_GPIO_WritePin_veneer>
	timer_delay(SLOW_TIMER, 100); //10ms delay
    1972:	4b16      	ldr	r3, [pc, #88]	; (19cc <MW_frequency_toggle+0x1c0>)
    1974:	681b      	ldr	r3, [r3, #0]
    1976:	2164      	movs	r1, #100	; 0x64
    1978:	4618      	mov	r0, r3
    197a:	f000 f88b 	bl	1a94 <timer_delay>
	set_freq_regs(N_two_INT, N_two_FRAC, k_two); //Program necessary values for f_two
    197e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
    1980:	6939      	ldr	r1, [r7, #16]
    1982:	6978      	ldr	r0, [r7, #20]
    1984:	f7ff f884 	bl	a90 <set_freq_regs>
	HAL_GPIO_WritePin(SCOPE_TRIG_OUT_GPIO_Port, SCOPE_TRIG_OUT_Pin, GPIO_PIN_SET); // Sets trigger output high
    1988:	2201      	movs	r2, #1
    198a:	2101      	movs	r1, #1
    198c:	480e      	ldr	r0, [pc, #56]	; (19c8 <MW_frequency_toggle+0x1bc>)
    198e:	f000 f8a3 	bl	1ad8 <__HAL_GPIO_WritePin_veneer>
	timer_delay(SLOW_TIMER, 100); //10ms delay
    1992:	4b0e      	ldr	r3, [pc, #56]	; (19cc <MW_frequency_toggle+0x1c0>)
    1994:	681b      	ldr	r3, [r3, #0]
    1996:	2164      	movs	r1, #100	; 0x64
    1998:	4618      	mov	r0, r3
    199a:	f000 f87b 	bl	1a94 <timer_delay>
	set_freq_regs(N_one_INT, N_one_FRAC, k_one); //Program necessary values for f_one
    199e:	e7de      	b.n	195e <MW_frequency_toggle+0x152>
    19a0:	00000000 	.word	0x00000000
    19a4:	41cdcd65 	.word	0x41cdcd65
    19a8:	20000000 	.word	0x20000000
    19ac:	41ee8c21 	.word	0x41ee8c21
    19b0:	00000000 	.word	0x00000000
    19b4:	4187d784 	.word	0x4187d784
    19b8:	00000000 	.word	0x00000000
    19bc:	41700000 	.word	0x41700000
    19c0:	0801c4d8 	.word	0x0801c4d8
    19c4:	0801c4fc 	.word	0x0801c4fc
    19c8:	58021800 	.word	0x58021800
    19cc:	20000018 	.word	0x20000018

000019d0 <set_SDO_output>:
/* Selects SDO pin connectivity/functionality
 * By default, the SDO pin will output 'Lock detect' but can be connected
 * to other internal signals. See table 2.15 of HMC835 datasheet (v04.1113)
 * for more details all options
 */
 void set_SDO_output(const uint32_t GPO_setting) {
    19d0:	b580      	push	{r7, lr}
    19d2:	b084      	sub	sp, #16
    19d4:	af00      	add	r7, sp, #0
    19d6:	6078      	str	r0, [r7, #4]
	//Default output on SDO pin is 'Lock detect output', value 0x01
	//VCO divider is 0x0A
	//See table 2.15 of HMC835 datasheet for more details (v04.1113)
	uint32_t read_data = 0x0;
    19d8:	2300      	movs	r3, #0
    19da:	60fb      	str	r3, [r7, #12]

	if (GPO_setting > 31) {
    19dc:	687b      	ldr	r3, [r7, #4]
    19de:	2b1f      	cmp	r3, #31
    19e0:	d904      	bls.n	19ec <set_SDO_output+0x1c>
		printf("SDO pin value must be less that 32\r\n");
    19e2:	480d      	ldr	r0, [pc, #52]	; (1a18 <set_SDO_output+0x48>)
    19e4:	f000 f884 	bl	1af0 <__puts_veneer>
		Error_Handler();
    19e8:	f000 f86a 	bl	1ac0 <__Error_Handler_veneer>
	}
	read_data = synth_readreg(GPO_REGISTER); // Get the current value.
    19ec:	200f      	movs	r0, #15
    19ee:	f7fe feb9 	bl	764 <synth_readreg>
    19f2:	60f8      	str	r0, [r7, #12]
	read_data &= 0xFFFFFFE0; // Zero the first 5 LSBs.
    19f4:	68fb      	ldr	r3, [r7, #12]
    19f6:	f023 031f 	bic.w	r3, r3, #31
    19fa:	60fb      	str	r3, [r7, #12]
	//read_data |= 0x0A; //Select VCO divider output
	read_data |= GPO_setting; //Select GPO output dependent on function input value
    19fc:	68fa      	ldr	r2, [r7, #12]
    19fe:	687b      	ldr	r3, [r7, #4]
    1a00:	4313      	orrs	r3, r2
    1a02:	60fb      	str	r3, [r7, #12]
	synth_writereg(read_data, GPO_REGISTER, 0x0, VERIFY); // Update the GPO register.
    1a04:	2301      	movs	r3, #1
    1a06:	2200      	movs	r2, #0
    1a08:	210f      	movs	r1, #15
    1a0a:	68f8      	ldr	r0, [r7, #12]
    1a0c:	f7fe fe30 	bl	670 <synth_writereg>
}
    1a10:	bf00      	nop
    1a12:	3710      	adds	r7, #16
    1a14:	46bd      	mov	sp, r7
    1a16:	bd80      	pop	{r7, pc}
    1a18:	0801c524 	.word	0x0801c524

00001a1c <start_timer>:

/**
  * @brief  Starts a timer.
  * @retval uint32_t
  */
uint32_t start_timer(TIM_TypeDef * timer) {
    1a1c:	b480      	push	{r7}
    1a1e:	b083      	sub	sp, #12
    1a20:	af00      	add	r7, sp, #0
    1a22:	6078      	str	r0, [r7, #4]

	timer->CR1 &= ~(TIM_CR1_CEN);
    1a24:	687b      	ldr	r3, [r7, #4]
    1a26:	681b      	ldr	r3, [r3, #0]
    1a28:	f023 0201 	bic.w	r2, r3, #1
    1a2c:	687b      	ldr	r3, [r7, #4]
    1a2e:	601a      	str	r2, [r3, #0]
	timer->EGR |= TIM_EGR_UG;  // Reset CNT and PSC
    1a30:	687b      	ldr	r3, [r7, #4]
    1a32:	695b      	ldr	r3, [r3, #20]
    1a34:	f043 0201 	orr.w	r2, r3, #1
    1a38:	687b      	ldr	r3, [r7, #4]
    1a3a:	615a      	str	r2, [r3, #20]
	timer->CR1 |= TIM_CR1_CEN;
    1a3c:	687b      	ldr	r3, [r7, #4]
    1a3e:	681b      	ldr	r3, [r3, #0]
    1a40:	f043 0201 	orr.w	r2, r3, #1
    1a44:	687b      	ldr	r3, [r7, #4]
    1a46:	601a      	str	r2, [r3, #0]
	//printf("Started timer with returned CNT value: %ld \r\n", timer->CNT);
	return timer->CNT;
    1a48:	687b      	ldr	r3, [r7, #4]
    1a4a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
}
    1a4c:	4618      	mov	r0, r3
    1a4e:	370c      	adds	r7, #12
    1a50:	46bd      	mov	sp, r7
    1a52:	f85d 7b04 	ldr.w	r7, [sp], #4
    1a56:	4770      	bx	lr

00001a58 <stop_timer>:

/**
  * @brief  Stops a timer.
  * @retval uint32_t
  */
uint32_t stop_timer(TIM_TypeDef *timer) {
    1a58:	b480      	push	{r7}
    1a5a:	b083      	sub	sp, #12
    1a5c:	af00      	add	r7, sp, #0
    1a5e:	6078      	str	r0, [r7, #4]

	timer->CR1 &= ~(TIM_CR1_CEN);
    1a60:	687b      	ldr	r3, [r7, #4]
    1a62:	681b      	ldr	r3, [r3, #0]
    1a64:	f023 0201 	bic.w	r2, r3, #1
    1a68:	687b      	ldr	r3, [r7, #4]
    1a6a:	601a      	str	r2, [r3, #0]
	return timer->CNT;
    1a6c:	687b      	ldr	r3, [r7, #4]
    1a6e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
}
    1a70:	4618      	mov	r0, r3
    1a72:	370c      	adds	r7, #12
    1a74:	46bd      	mov	sp, r7
    1a76:	f85d 7b04 	ldr.w	r7, [sp], #4
    1a7a:	4770      	bx	lr

00001a7c <check_timer>:
/**
  * @brief  Returns timer counter value
  * @param  Timer
  * @retval Counter value
  */
uint32_t check_timer(TIM_TypeDef *timer) {
    1a7c:	b480      	push	{r7}
    1a7e:	b083      	sub	sp, #12
    1a80:	af00      	add	r7, sp, #0
    1a82:	6078      	str	r0, [r7, #4]

	return timer->CNT;
    1a84:	687b      	ldr	r3, [r7, #4]
    1a86:	6a5b      	ldr	r3, [r3, #36]	; 0x24
}
    1a88:	4618      	mov	r0, r3
    1a8a:	370c      	adds	r7, #12
    1a8c:	46bd      	mov	sp, r7
    1a8e:	f85d 7b04 	ldr.w	r7, [sp], #4
    1a92:	4770      	bx	lr

00001a94 <timer_delay>:

/**
  * @brief  Uses a H/W timer to loop for the cycle count requested.
  */
void timer_delay(TIM_TypeDef *timer, const uint32_t delay_count){
    1a94:	b580      	push	{r7, lr}
    1a96:	b084      	sub	sp, #16
    1a98:	af00      	add	r7, sp, #0
    1a9a:	6078      	str	r0, [r7, #4]
    1a9c:	6039      	str	r1, [r7, #0]
	/* Note that we don't consider overflow.
	 * FAST_TIMER will take approximately 65 ms to overflow.
	 * SLOW_TIMER will take 650ms
	 * MW_TIMER and SWEEP_TIMER will take 71 minutes */

	uint32_t start = start_timer(timer);
    1a9e:	6878      	ldr	r0, [r7, #4]
    1aa0:	f7ff ffbc 	bl	1a1c <start_timer>
    1aa4:	60f8      	str	r0, [r7, #12]
//	timer->EGR |= TIM_EGR_UG;  // Reset CNT and PSC
//	timer->CR1 |= TIM_CR1_CEN; // Enable the timer
//	uint32_t start = timer->CNT; // Get the start value of the timer

//	while((timer->CNT - start) < delay_count){} // Loop until delay_us has expired
	while(timer->CNT < delay_count){} // Loop until delay_us has expired
    1aa6:	bf00      	nop
    1aa8:	687b      	ldr	r3, [r7, #4]
    1aaa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
    1aac:	683a      	ldr	r2, [r7, #0]
    1aae:	429a      	cmp	r2, r3
    1ab0:	d8fa      	bhi.n	1aa8 <timer_delay+0x14>

	stop_timer(timer);
    1ab2:	6878      	ldr	r0, [r7, #4]
    1ab4:	f7ff ffd0 	bl	1a58 <stop_timer>
//	timer->CR1 &= ~(TIM_CR1_CEN); // Disable the timer

}
    1ab8:	bf00      	nop
    1aba:	3710      	adds	r7, #16
    1abc:	46bd      	mov	sp, r7
    1abe:	bd80      	pop	{r7, pc}

00001ac0 <__Error_Handler_veneer>:
    1ac0:	f85f f000 	ldr.w	pc, [pc]	; 1ac4 <__Error_Handler_veneer+0x4>
    1ac4:	0800329d 	.word	0x0800329d

00001ac8 <__HAL_GPIO_ReadPin_veneer>:
    1ac8:	f85f f000 	ldr.w	pc, [pc]	; 1acc <__HAL_GPIO_ReadPin_veneer+0x4>
    1acc:	08007bc1 	.word	0x08007bc1

00001ad0 <__HAL_Delay_veneer>:
    1ad0:	f85f f000 	ldr.w	pc, [pc]	; 1ad4 <__HAL_Delay_veneer+0x4>
    1ad4:	08004019 	.word	0x08004019

00001ad8 <__HAL_GPIO_WritePin_veneer>:
    1ad8:	f85f f000 	ldr.w	pc, [pc]	; 1adc <__HAL_GPIO_WritePin_veneer+0x4>
    1adc:	08007bf1 	.word	0x08007bf1

00001ae0 <__printf_veneer>:
    1ae0:	f85f f000 	ldr.w	pc, [pc]	; 1ae4 <__printf_veneer+0x4>
    1ae4:	08019c51 	.word	0x08019c51

00001ae8 <__HAL_GPIO_TogglePin_veneer>:
    1ae8:	f85f f000 	ldr.w	pc, [pc]	; 1aec <__HAL_GPIO_TogglePin_veneer+0x4>
    1aec:	08007c23 	.word	0x08007c23

00001af0 <__puts_veneer>:
    1af0:	f85f f000 	ldr.w	pc, [pc]	; 1af4 <__puts_veneer+0x4>
    1af4:	08019d1d 	.word	0x08019d1d

00001af8 <__HAL_DAC_SetValue_veneer>:
    1af8:	f85f f000 	ldr.w	pc, [pc]	; 1afc <__HAL_DAC_SetValue_veneer+0x4>
    1afc:	08005f99 	.word	0x08005f99

Disassembly of section .text:

08001da0 <__do_global_dtors_aux>:
 8001da0:	b510      	push	{r4, lr}
 8001da2:	4c05      	ldr	r4, [pc, #20]	; (8001db8 <__do_global_dtors_aux+0x18>)
 8001da4:	7823      	ldrb	r3, [r4, #0]
 8001da6:	b933      	cbnz	r3, 8001db6 <__do_global_dtors_aux+0x16>
 8001da8:	4b04      	ldr	r3, [pc, #16]	; (8001dbc <__do_global_dtors_aux+0x1c>)
 8001daa:	b113      	cbz	r3, 8001db2 <__do_global_dtors_aux+0x12>
 8001dac:	4804      	ldr	r0, [pc, #16]	; (8001dc0 <__do_global_dtors_aux+0x20>)
 8001dae:	f3af 8000 	nop.w
 8001db2:	2301      	movs	r3, #1
 8001db4:	7023      	strb	r3, [r4, #0]
 8001db6:	bd10      	pop	{r4, pc}
 8001db8:	20000230 	.word	0x20000230
 8001dbc:	00000000 	.word	0x00000000
 8001dc0:	0801bb58 	.word	0x0801bb58

08001dc4 <frame_dummy>:
 8001dc4:	b508      	push	{r3, lr}
 8001dc6:	4b03      	ldr	r3, [pc, #12]	; (8001dd4 <frame_dummy+0x10>)
 8001dc8:	b11b      	cbz	r3, 8001dd2 <frame_dummy+0xe>
 8001dca:	4903      	ldr	r1, [pc, #12]	; (8001dd8 <frame_dummy+0x14>)
 8001dcc:	4803      	ldr	r0, [pc, #12]	; (8001ddc <frame_dummy+0x18>)
 8001dce:	f3af 8000 	nop.w
 8001dd2:	bd08      	pop	{r3, pc}
 8001dd4:	00000000 	.word	0x00000000
 8001dd8:	20000234 	.word	0x20000234
 8001ddc:	0801bb58 	.word	0x0801bb58

08001de0 <memchr>:
 8001de0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8001de4:	2a10      	cmp	r2, #16
 8001de6:	db2b      	blt.n	8001e40 <memchr+0x60>
 8001de8:	f010 0f07 	tst.w	r0, #7
 8001dec:	d008      	beq.n	8001e00 <memchr+0x20>
 8001dee:	f810 3b01 	ldrb.w	r3, [r0], #1
 8001df2:	3a01      	subs	r2, #1
 8001df4:	428b      	cmp	r3, r1
 8001df6:	d02d      	beq.n	8001e54 <memchr+0x74>
 8001df8:	f010 0f07 	tst.w	r0, #7
 8001dfc:	b342      	cbz	r2, 8001e50 <memchr+0x70>
 8001dfe:	d1f6      	bne.n	8001dee <memchr+0xe>
 8001e00:	b4f0      	push	{r4, r5, r6, r7}
 8001e02:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8001e06:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 8001e0a:	f022 0407 	bic.w	r4, r2, #7
 8001e0e:	f07f 0700 	mvns.w	r7, #0
 8001e12:	2300      	movs	r3, #0
 8001e14:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8001e18:	3c08      	subs	r4, #8
 8001e1a:	ea85 0501 	eor.w	r5, r5, r1
 8001e1e:	ea86 0601 	eor.w	r6, r6, r1
 8001e22:	fa85 f547 	uadd8	r5, r5, r7
 8001e26:	faa3 f587 	sel	r5, r3, r7
 8001e2a:	fa86 f647 	uadd8	r6, r6, r7
 8001e2e:	faa5 f687 	sel	r6, r5, r7
 8001e32:	b98e      	cbnz	r6, 8001e58 <memchr+0x78>
 8001e34:	d1ee      	bne.n	8001e14 <memchr+0x34>
 8001e36:	bcf0      	pop	{r4, r5, r6, r7}
 8001e38:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8001e3c:	f002 0207 	and.w	r2, r2, #7
 8001e40:	b132      	cbz	r2, 8001e50 <memchr+0x70>
 8001e42:	f810 3b01 	ldrb.w	r3, [r0], #1
 8001e46:	3a01      	subs	r2, #1
 8001e48:	ea83 0301 	eor.w	r3, r3, r1
 8001e4c:	b113      	cbz	r3, 8001e54 <memchr+0x74>
 8001e4e:	d1f8      	bne.n	8001e42 <memchr+0x62>
 8001e50:	2000      	movs	r0, #0
 8001e52:	4770      	bx	lr
 8001e54:	3801      	subs	r0, #1
 8001e56:	4770      	bx	lr
 8001e58:	2d00      	cmp	r5, #0
 8001e5a:	bf06      	itte	eq
 8001e5c:	4635      	moveq	r5, r6
 8001e5e:	3803      	subeq	r0, #3
 8001e60:	3807      	subne	r0, #7
 8001e62:	f015 0f01 	tst.w	r5, #1
 8001e66:	d107      	bne.n	8001e78 <memchr+0x98>
 8001e68:	3001      	adds	r0, #1
 8001e6a:	f415 7f80 	tst.w	r5, #256	; 0x100
 8001e6e:	bf02      	ittt	eq
 8001e70:	3001      	addeq	r0, #1
 8001e72:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8001e76:	3001      	addeq	r0, #1
 8001e78:	bcf0      	pop	{r4, r5, r6, r7}
 8001e7a:	3801      	subs	r0, #1
 8001e7c:	4770      	bx	lr
 8001e7e:	bf00      	nop

08001e80 <strlen>:
 8001e80:	4603      	mov	r3, r0
 8001e82:	f813 2b01 	ldrb.w	r2, [r3], #1
 8001e86:	2a00      	cmp	r2, #0
 8001e88:	d1fb      	bne.n	8001e82 <strlen+0x2>
 8001e8a:	1a18      	subs	r0, r3, r0
 8001e8c:	3801      	subs	r0, #1
 8001e8e:	4770      	bx	lr

08001e90 <__aeabi_uldivmod>:
 8001e90:	b953      	cbnz	r3, 8001ea8 <__aeabi_uldivmod+0x18>
 8001e92:	b94a      	cbnz	r2, 8001ea8 <__aeabi_uldivmod+0x18>
 8001e94:	2900      	cmp	r1, #0
 8001e96:	bf08      	it	eq
 8001e98:	2800      	cmpeq	r0, #0
 8001e9a:	bf1c      	itt	ne
 8001e9c:	f04f 31ff 	movne.w	r1, #4294967295
 8001ea0:	f04f 30ff 	movne.w	r0, #4294967295
 8001ea4:	f000 b970 	b.w	8002188 <__aeabi_idiv0>
 8001ea8:	f1ad 0c08 	sub.w	ip, sp, #8
 8001eac:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8001eb0:	f000 f806 	bl	8001ec0 <__udivmoddi4>
 8001eb4:	f8dd e004 	ldr.w	lr, [sp, #4]
 8001eb8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8001ebc:	b004      	add	sp, #16
 8001ebe:	4770      	bx	lr

08001ec0 <__udivmoddi4>:
 8001ec0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8001ec4:	9e08      	ldr	r6, [sp, #32]
 8001ec6:	460d      	mov	r5, r1
 8001ec8:	4604      	mov	r4, r0
 8001eca:	460f      	mov	r7, r1
 8001ecc:	2b00      	cmp	r3, #0
 8001ece:	d14a      	bne.n	8001f66 <__udivmoddi4+0xa6>
 8001ed0:	428a      	cmp	r2, r1
 8001ed2:	4694      	mov	ip, r2
 8001ed4:	d965      	bls.n	8001fa2 <__udivmoddi4+0xe2>
 8001ed6:	fab2 f382 	clz	r3, r2
 8001eda:	b143      	cbz	r3, 8001eee <__udivmoddi4+0x2e>
 8001edc:	fa02 fc03 	lsl.w	ip, r2, r3
 8001ee0:	f1c3 0220 	rsb	r2, r3, #32
 8001ee4:	409f      	lsls	r7, r3
 8001ee6:	fa20 f202 	lsr.w	r2, r0, r2
 8001eea:	4317      	orrs	r7, r2
 8001eec:	409c      	lsls	r4, r3
 8001eee:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 8001ef2:	fa1f f58c 	uxth.w	r5, ip
 8001ef6:	fbb7 f1fe 	udiv	r1, r7, lr
 8001efa:	0c22      	lsrs	r2, r4, #16
 8001efc:	fb0e 7711 	mls	r7, lr, r1, r7
 8001f00:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 8001f04:	fb01 f005 	mul.w	r0, r1, r5
 8001f08:	4290      	cmp	r0, r2
 8001f0a:	d90a      	bls.n	8001f22 <__udivmoddi4+0x62>
 8001f0c:	eb1c 0202 	adds.w	r2, ip, r2
 8001f10:	f101 37ff 	add.w	r7, r1, #4294967295
 8001f14:	f080 811c 	bcs.w	8002150 <__udivmoddi4+0x290>
 8001f18:	4290      	cmp	r0, r2
 8001f1a:	f240 8119 	bls.w	8002150 <__udivmoddi4+0x290>
 8001f1e:	3902      	subs	r1, #2
 8001f20:	4462      	add	r2, ip
 8001f22:	1a12      	subs	r2, r2, r0
 8001f24:	b2a4      	uxth	r4, r4
 8001f26:	fbb2 f0fe 	udiv	r0, r2, lr
 8001f2a:	fb0e 2210 	mls	r2, lr, r0, r2
 8001f2e:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8001f32:	fb00 f505 	mul.w	r5, r0, r5
 8001f36:	42a5      	cmp	r5, r4
 8001f38:	d90a      	bls.n	8001f50 <__udivmoddi4+0x90>
 8001f3a:	eb1c 0404 	adds.w	r4, ip, r4
 8001f3e:	f100 32ff 	add.w	r2, r0, #4294967295
 8001f42:	f080 8107 	bcs.w	8002154 <__udivmoddi4+0x294>
 8001f46:	42a5      	cmp	r5, r4
 8001f48:	f240 8104 	bls.w	8002154 <__udivmoddi4+0x294>
 8001f4c:	4464      	add	r4, ip
 8001f4e:	3802      	subs	r0, #2
 8001f50:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8001f54:	1b64      	subs	r4, r4, r5
 8001f56:	2100      	movs	r1, #0
 8001f58:	b11e      	cbz	r6, 8001f62 <__udivmoddi4+0xa2>
 8001f5a:	40dc      	lsrs	r4, r3
 8001f5c:	2300      	movs	r3, #0
 8001f5e:	e9c6 4300 	strd	r4, r3, [r6]
 8001f62:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8001f66:	428b      	cmp	r3, r1
 8001f68:	d908      	bls.n	8001f7c <__udivmoddi4+0xbc>
 8001f6a:	2e00      	cmp	r6, #0
 8001f6c:	f000 80ed 	beq.w	800214a <__udivmoddi4+0x28a>
 8001f70:	2100      	movs	r1, #0
 8001f72:	e9c6 0500 	strd	r0, r5, [r6]
 8001f76:	4608      	mov	r0, r1
 8001f78:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8001f7c:	fab3 f183 	clz	r1, r3
 8001f80:	2900      	cmp	r1, #0
 8001f82:	d149      	bne.n	8002018 <__udivmoddi4+0x158>
 8001f84:	42ab      	cmp	r3, r5
 8001f86:	d302      	bcc.n	8001f8e <__udivmoddi4+0xce>
 8001f88:	4282      	cmp	r2, r0
 8001f8a:	f200 80f8 	bhi.w	800217e <__udivmoddi4+0x2be>
 8001f8e:	1a84      	subs	r4, r0, r2
 8001f90:	eb65 0203 	sbc.w	r2, r5, r3
 8001f94:	2001      	movs	r0, #1
 8001f96:	4617      	mov	r7, r2
 8001f98:	2e00      	cmp	r6, #0
 8001f9a:	d0e2      	beq.n	8001f62 <__udivmoddi4+0xa2>
 8001f9c:	e9c6 4700 	strd	r4, r7, [r6]
 8001fa0:	e7df      	b.n	8001f62 <__udivmoddi4+0xa2>
 8001fa2:	b902      	cbnz	r2, 8001fa6 <__udivmoddi4+0xe6>
 8001fa4:	deff      	udf	#255	; 0xff
 8001fa6:	fab2 f382 	clz	r3, r2
 8001faa:	2b00      	cmp	r3, #0
 8001fac:	f040 8090 	bne.w	80020d0 <__udivmoddi4+0x210>
 8001fb0:	1a8a      	subs	r2, r1, r2
 8001fb2:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8001fb6:	fa1f fe8c 	uxth.w	lr, ip
 8001fba:	2101      	movs	r1, #1
 8001fbc:	fbb2 f5f7 	udiv	r5, r2, r7
 8001fc0:	fb07 2015 	mls	r0, r7, r5, r2
 8001fc4:	0c22      	lsrs	r2, r4, #16
 8001fc6:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 8001fca:	fb0e f005 	mul.w	r0, lr, r5
 8001fce:	4290      	cmp	r0, r2
 8001fd0:	d908      	bls.n	8001fe4 <__udivmoddi4+0x124>
 8001fd2:	eb1c 0202 	adds.w	r2, ip, r2
 8001fd6:	f105 38ff 	add.w	r8, r5, #4294967295
 8001fda:	d202      	bcs.n	8001fe2 <__udivmoddi4+0x122>
 8001fdc:	4290      	cmp	r0, r2
 8001fde:	f200 80cb 	bhi.w	8002178 <__udivmoddi4+0x2b8>
 8001fe2:	4645      	mov	r5, r8
 8001fe4:	1a12      	subs	r2, r2, r0
 8001fe6:	b2a4      	uxth	r4, r4
 8001fe8:	fbb2 f0f7 	udiv	r0, r2, r7
 8001fec:	fb07 2210 	mls	r2, r7, r0, r2
 8001ff0:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8001ff4:	fb0e fe00 	mul.w	lr, lr, r0
 8001ff8:	45a6      	cmp	lr, r4
 8001ffa:	d908      	bls.n	800200e <__udivmoddi4+0x14e>
 8001ffc:	eb1c 0404 	adds.w	r4, ip, r4
 8002000:	f100 32ff 	add.w	r2, r0, #4294967295
 8002004:	d202      	bcs.n	800200c <__udivmoddi4+0x14c>
 8002006:	45a6      	cmp	lr, r4
 8002008:	f200 80bb 	bhi.w	8002182 <__udivmoddi4+0x2c2>
 800200c:	4610      	mov	r0, r2
 800200e:	eba4 040e 	sub.w	r4, r4, lr
 8002012:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 8002016:	e79f      	b.n	8001f58 <__udivmoddi4+0x98>
 8002018:	f1c1 0720 	rsb	r7, r1, #32
 800201c:	408b      	lsls	r3, r1
 800201e:	fa22 fc07 	lsr.w	ip, r2, r7
 8002022:	ea4c 0c03 	orr.w	ip, ip, r3
 8002026:	fa05 f401 	lsl.w	r4, r5, r1
 800202a:	fa20 f307 	lsr.w	r3, r0, r7
 800202e:	40fd      	lsrs	r5, r7
 8002030:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8002034:	4323      	orrs	r3, r4
 8002036:	fbb5 f8f9 	udiv	r8, r5, r9
 800203a:	fa1f fe8c 	uxth.w	lr, ip
 800203e:	fb09 5518 	mls	r5, r9, r8, r5
 8002042:	0c1c      	lsrs	r4, r3, #16
 8002044:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8002048:	fb08 f50e 	mul.w	r5, r8, lr
 800204c:	42a5      	cmp	r5, r4
 800204e:	fa02 f201 	lsl.w	r2, r2, r1
 8002052:	fa00 f001 	lsl.w	r0, r0, r1
 8002056:	d90b      	bls.n	8002070 <__udivmoddi4+0x1b0>
 8002058:	eb1c 0404 	adds.w	r4, ip, r4
 800205c:	f108 3aff 	add.w	sl, r8, #4294967295
 8002060:	f080 8088 	bcs.w	8002174 <__udivmoddi4+0x2b4>
 8002064:	42a5      	cmp	r5, r4
 8002066:	f240 8085 	bls.w	8002174 <__udivmoddi4+0x2b4>
 800206a:	f1a8 0802 	sub.w	r8, r8, #2
 800206e:	4464      	add	r4, ip
 8002070:	1b64      	subs	r4, r4, r5
 8002072:	b29d      	uxth	r5, r3
 8002074:	fbb4 f3f9 	udiv	r3, r4, r9
 8002078:	fb09 4413 	mls	r4, r9, r3, r4
 800207c:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 8002080:	fb03 fe0e 	mul.w	lr, r3, lr
 8002084:	45a6      	cmp	lr, r4
 8002086:	d908      	bls.n	800209a <__udivmoddi4+0x1da>
 8002088:	eb1c 0404 	adds.w	r4, ip, r4
 800208c:	f103 35ff 	add.w	r5, r3, #4294967295
 8002090:	d26c      	bcs.n	800216c <__udivmoddi4+0x2ac>
 8002092:	45a6      	cmp	lr, r4
 8002094:	d96a      	bls.n	800216c <__udivmoddi4+0x2ac>
 8002096:	3b02      	subs	r3, #2
 8002098:	4464      	add	r4, ip
 800209a:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 800209e:	fba3 9502 	umull	r9, r5, r3, r2
 80020a2:	eba4 040e 	sub.w	r4, r4, lr
 80020a6:	42ac      	cmp	r4, r5
 80020a8:	46c8      	mov	r8, r9
 80020aa:	46ae      	mov	lr, r5
 80020ac:	d356      	bcc.n	800215c <__udivmoddi4+0x29c>
 80020ae:	d053      	beq.n	8002158 <__udivmoddi4+0x298>
 80020b0:	b156      	cbz	r6, 80020c8 <__udivmoddi4+0x208>
 80020b2:	ebb0 0208 	subs.w	r2, r0, r8
 80020b6:	eb64 040e 	sbc.w	r4, r4, lr
 80020ba:	fa04 f707 	lsl.w	r7, r4, r7
 80020be:	40ca      	lsrs	r2, r1
 80020c0:	40cc      	lsrs	r4, r1
 80020c2:	4317      	orrs	r7, r2
 80020c4:	e9c6 7400 	strd	r7, r4, [r6]
 80020c8:	4618      	mov	r0, r3
 80020ca:	2100      	movs	r1, #0
 80020cc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80020d0:	f1c3 0120 	rsb	r1, r3, #32
 80020d4:	fa02 fc03 	lsl.w	ip, r2, r3
 80020d8:	fa20 f201 	lsr.w	r2, r0, r1
 80020dc:	fa25 f101 	lsr.w	r1, r5, r1
 80020e0:	409d      	lsls	r5, r3
 80020e2:	432a      	orrs	r2, r5
 80020e4:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80020e8:	fa1f fe8c 	uxth.w	lr, ip
 80020ec:	fbb1 f0f7 	udiv	r0, r1, r7
 80020f0:	fb07 1510 	mls	r5, r7, r0, r1
 80020f4:	0c11      	lsrs	r1, r2, #16
 80020f6:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 80020fa:	fb00 f50e 	mul.w	r5, r0, lr
 80020fe:	428d      	cmp	r5, r1
 8002100:	fa04 f403 	lsl.w	r4, r4, r3
 8002104:	d908      	bls.n	8002118 <__udivmoddi4+0x258>
 8002106:	eb1c 0101 	adds.w	r1, ip, r1
 800210a:	f100 38ff 	add.w	r8, r0, #4294967295
 800210e:	d22f      	bcs.n	8002170 <__udivmoddi4+0x2b0>
 8002110:	428d      	cmp	r5, r1
 8002112:	d92d      	bls.n	8002170 <__udivmoddi4+0x2b0>
 8002114:	3802      	subs	r0, #2
 8002116:	4461      	add	r1, ip
 8002118:	1b49      	subs	r1, r1, r5
 800211a:	b292      	uxth	r2, r2
 800211c:	fbb1 f5f7 	udiv	r5, r1, r7
 8002120:	fb07 1115 	mls	r1, r7, r5, r1
 8002124:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8002128:	fb05 f10e 	mul.w	r1, r5, lr
 800212c:	4291      	cmp	r1, r2
 800212e:	d908      	bls.n	8002142 <__udivmoddi4+0x282>
 8002130:	eb1c 0202 	adds.w	r2, ip, r2
 8002134:	f105 38ff 	add.w	r8, r5, #4294967295
 8002138:	d216      	bcs.n	8002168 <__udivmoddi4+0x2a8>
 800213a:	4291      	cmp	r1, r2
 800213c:	d914      	bls.n	8002168 <__udivmoddi4+0x2a8>
 800213e:	3d02      	subs	r5, #2
 8002140:	4462      	add	r2, ip
 8002142:	1a52      	subs	r2, r2, r1
 8002144:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 8002148:	e738      	b.n	8001fbc <__udivmoddi4+0xfc>
 800214a:	4631      	mov	r1, r6
 800214c:	4630      	mov	r0, r6
 800214e:	e708      	b.n	8001f62 <__udivmoddi4+0xa2>
 8002150:	4639      	mov	r1, r7
 8002152:	e6e6      	b.n	8001f22 <__udivmoddi4+0x62>
 8002154:	4610      	mov	r0, r2
 8002156:	e6fb      	b.n	8001f50 <__udivmoddi4+0x90>
 8002158:	4548      	cmp	r0, r9
 800215a:	d2a9      	bcs.n	80020b0 <__udivmoddi4+0x1f0>
 800215c:	ebb9 0802 	subs.w	r8, r9, r2
 8002160:	eb65 0e0c 	sbc.w	lr, r5, ip
 8002164:	3b01      	subs	r3, #1
 8002166:	e7a3      	b.n	80020b0 <__udivmoddi4+0x1f0>
 8002168:	4645      	mov	r5, r8
 800216a:	e7ea      	b.n	8002142 <__udivmoddi4+0x282>
 800216c:	462b      	mov	r3, r5
 800216e:	e794      	b.n	800209a <__udivmoddi4+0x1da>
 8002170:	4640      	mov	r0, r8
 8002172:	e7d1      	b.n	8002118 <__udivmoddi4+0x258>
 8002174:	46d0      	mov	r8, sl
 8002176:	e77b      	b.n	8002070 <__udivmoddi4+0x1b0>
 8002178:	3d02      	subs	r5, #2
 800217a:	4462      	add	r2, ip
 800217c:	e732      	b.n	8001fe4 <__udivmoddi4+0x124>
 800217e:	4608      	mov	r0, r1
 8002180:	e70a      	b.n	8001f98 <__udivmoddi4+0xd8>
 8002182:	4464      	add	r4, ip
 8002184:	3802      	subs	r0, #2
 8002186:	e742      	b.n	800200e <__udivmoddi4+0x14e>

08002188 <__aeabi_idiv0>:
 8002188:	4770      	bx	lr
 800218a:	bf00      	nop

0800218c <__io_putchar>:
PUTCHAR_PROTOTYPE {
 800218c:	b580      	push	{r7, lr}
 800218e:	b082      	sub	sp, #8
 8002190:	af00      	add	r7, sp, #0
 8002192:	6078      	str	r0, [r7, #4]
	HAL_UART_Transmit(&huart3, (uint8_t*) &ch, 1, 0xFFFF);
 8002194:	1d39      	adds	r1, r7, #4
 8002196:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800219a:	2201      	movs	r2, #1
 800219c:	4803      	ldr	r0, [pc, #12]	; (80021ac <__io_putchar+0x20>)
 800219e:	f00b fd19 	bl	800dbd4 <HAL_UART_Transmit>
	return ch;
 80021a2:	687b      	ldr	r3, [r7, #4]
}
 80021a4:	4618      	mov	r0, r3
 80021a6:	3708      	adds	r7, #8
 80021a8:	46bd      	mov	sp, r7
 80021aa:	bd80      	pop	{r7, pc}
 80021ac:	20000560 	.word	0x20000560

080021b0 <main>:
{
 80021b0:	b580      	push	{r7, lr}
 80021b2:	b084      	sub	sp, #16
 80021b4:	af00      	add	r7, sp, #0
  memcpy(&_sitcm, &_siitcm, ((void*) &_eitcm - (void*) &_sitcm));
 80021b6:	4ab2      	ldr	r2, [pc, #712]	; (8002480 <main+0x2d0>)
 80021b8:	4bb2      	ldr	r3, [pc, #712]	; (8002484 <main+0x2d4>)
 80021ba:	1ad3      	subs	r3, r2, r3
 80021bc:	461a      	mov	r2, r3
 80021be:	49b2      	ldr	r1, [pc, #712]	; (8002488 <main+0x2d8>)
 80021c0:	48b0      	ldr	r0, [pc, #704]	; (8002484 <main+0x2d4>)
 80021c2:	f017 ff14 	bl	8019fee <memcpy>
  MPU_Config();
 80021c6:	f001 f817 	bl	80031f8 <MPU_Config>
  \details Turns on I-Cache
  */
__STATIC_FORCEINLINE void SCB_EnableICache (void)
{
  #if defined (__ICACHE_PRESENT) && (__ICACHE_PRESENT == 1U)
    if (SCB->CCR & SCB_CCR_IC_Msk) return;  /* return if ICache is already enabled */
 80021ca:	4bb0      	ldr	r3, [pc, #704]	; (800248c <main+0x2dc>)
 80021cc:	695b      	ldr	r3, [r3, #20]
 80021ce:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80021d2:	2b00      	cmp	r3, #0
 80021d4:	d11b      	bne.n	800220e <main+0x5e>
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 80021d6:	f3bf 8f4f 	dsb	sy
}
 80021da:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 80021dc:	f3bf 8f6f 	isb	sy
}
 80021e0:	bf00      	nop

    __DSB();
    __ISB();
    SCB->ICIALLU = 0UL;                     /* invalidate I-Cache */
 80021e2:	4baa      	ldr	r3, [pc, #680]	; (800248c <main+0x2dc>)
 80021e4:	2200      	movs	r2, #0
 80021e6:	f8c3 2250 	str.w	r2, [r3, #592]	; 0x250
  __ASM volatile ("dsb 0xF":::"memory");
 80021ea:	f3bf 8f4f 	dsb	sy
}
 80021ee:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 80021f0:	f3bf 8f6f 	isb	sy
}
 80021f4:	bf00      	nop
    __DSB();
    __ISB();
    SCB->CCR |=  (uint32_t)SCB_CCR_IC_Msk;  /* enable I-Cache */
 80021f6:	4ba5      	ldr	r3, [pc, #660]	; (800248c <main+0x2dc>)
 80021f8:	695b      	ldr	r3, [r3, #20]
 80021fa:	4aa4      	ldr	r2, [pc, #656]	; (800248c <main+0x2dc>)
 80021fc:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002200:	6153      	str	r3, [r2, #20]
  __ASM volatile ("dsb 0xF":::"memory");
 8002202:	f3bf 8f4f 	dsb	sy
}
 8002206:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8002208:	f3bf 8f6f 	isb	sy
}
 800220c:	e000      	b.n	8002210 <main+0x60>
    if (SCB->CCR & SCB_CCR_IC_Msk) return;  /* return if ICache is already enabled */
 800220e:	bf00      	nop
  #if defined (__DCACHE_PRESENT) && (__DCACHE_PRESENT == 1U)
    uint32_t ccsidr;
    uint32_t sets;
    uint32_t ways;

    if (SCB->CCR & SCB_CCR_DC_Msk) return;  /* return if DCache is already enabled */
 8002210:	4b9e      	ldr	r3, [pc, #632]	; (800248c <main+0x2dc>)
 8002212:	695b      	ldr	r3, [r3, #20]
 8002214:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002218:	2b00      	cmp	r3, #0
 800221a:	d138      	bne.n	800228e <main+0xde>

    SCB->CSSELR = 0U;                       /* select Level 1 data cache */
 800221c:	4b9b      	ldr	r3, [pc, #620]	; (800248c <main+0x2dc>)
 800221e:	2200      	movs	r2, #0
 8002220:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  __ASM volatile ("dsb 0xF":::"memory");
 8002224:	f3bf 8f4f 	dsb	sy
}
 8002228:	bf00      	nop
    __DSB();

    ccsidr = SCB->CCSIDR;
 800222a:	4b98      	ldr	r3, [pc, #608]	; (800248c <main+0x2dc>)
 800222c:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8002230:	60fb      	str	r3, [r7, #12]

                                            /* invalidate D-Cache */
    sets = (uint32_t)(CCSIDR_SETS(ccsidr));
 8002232:	68fb      	ldr	r3, [r7, #12]
 8002234:	0b5b      	lsrs	r3, r3, #13
 8002236:	f3c3 030e 	ubfx	r3, r3, #0, #15
 800223a:	60bb      	str	r3, [r7, #8]
    do {
      ways = (uint32_t)(CCSIDR_WAYS(ccsidr));
 800223c:	68fb      	ldr	r3, [r7, #12]
 800223e:	08db      	lsrs	r3, r3, #3
 8002240:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8002244:	607b      	str	r3, [r7, #4]
      do {
        SCB->DCISW = (((sets << SCB_DCISW_SET_Pos) & SCB_DCISW_SET_Msk) |
 8002246:	68bb      	ldr	r3, [r7, #8]
 8002248:	015a      	lsls	r2, r3, #5
 800224a:	f643 73e0 	movw	r3, #16352	; 0x3fe0
 800224e:	4013      	ands	r3, r2
                      ((ways << SCB_DCISW_WAY_Pos) & SCB_DCISW_WAY_Msk)  );
 8002250:	687a      	ldr	r2, [r7, #4]
 8002252:	0792      	lsls	r2, r2, #30
        SCB->DCISW = (((sets << SCB_DCISW_SET_Pos) & SCB_DCISW_SET_Msk) |
 8002254:	498d      	ldr	r1, [pc, #564]	; (800248c <main+0x2dc>)
 8002256:	4313      	orrs	r3, r2
 8002258:	f8c1 3260 	str.w	r3, [r1, #608]	; 0x260
        #if defined ( __CC_ARM )
          __schedule_barrier();
        #endif
      } while (ways-- != 0U);
 800225c:	687b      	ldr	r3, [r7, #4]
 800225e:	1e5a      	subs	r2, r3, #1
 8002260:	607a      	str	r2, [r7, #4]
 8002262:	2b00      	cmp	r3, #0
 8002264:	d1ef      	bne.n	8002246 <main+0x96>
    } while(sets-- != 0U);
 8002266:	68bb      	ldr	r3, [r7, #8]
 8002268:	1e5a      	subs	r2, r3, #1
 800226a:	60ba      	str	r2, [r7, #8]
 800226c:	2b00      	cmp	r3, #0
 800226e:	d1e5      	bne.n	800223c <main+0x8c>
  __ASM volatile ("dsb 0xF":::"memory");
 8002270:	f3bf 8f4f 	dsb	sy
}
 8002274:	bf00      	nop
    __DSB();

    SCB->CCR |=  (uint32_t)SCB_CCR_DC_Msk;  /* enable D-Cache */
 8002276:	4b85      	ldr	r3, [pc, #532]	; (800248c <main+0x2dc>)
 8002278:	695b      	ldr	r3, [r3, #20]
 800227a:	4a84      	ldr	r2, [pc, #528]	; (800248c <main+0x2dc>)
 800227c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002280:	6153      	str	r3, [r2, #20]
  __ASM volatile ("dsb 0xF":::"memory");
 8002282:	f3bf 8f4f 	dsb	sy
}
 8002286:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8002288:	f3bf 8f6f 	isb	sy
}
 800228c:	e000      	b.n	8002290 <main+0xe0>
    if (SCB->CCR & SCB_CCR_DC_Msk) return;  /* return if DCache is already enabled */
 800228e:	bf00      	nop
  HAL_Init();
 8002290:	f001 fe30 	bl	8003ef4 <HAL_Init>
  SystemClock_Config();
 8002294:	f000 f92e 	bl	80024f4 <SystemClock_Config>
  MX_GPIO_Init();
 8002298:	f000 fde4 	bl	8002e64 <MX_GPIO_Init>
  MX_LPTIM1_Init();
 800229c:	f000 fbd8 	bl	8002a50 <MX_LPTIM1_Init>
  MX_DAC1_Init();
 80022a0:	f000 fa48 	bl	8002734 <MX_DAC1_Init>
  MX_USART3_UART_Init();
 80022a4:	f000 fd90 	bl	8002dc8 <MX_USART3_UART_Init>
  MX_TIM3_Init();
 80022a8:	f000 fca2 	bl	8002bf0 <MX_TIM3_Init>
  MX_TIM1_Init();
 80022ac:	f000 fbfe 	bl	8002aac <MX_TIM1_Init>
  MX_HRTIM_Init();
 80022b0:	f000 fa7c 	bl	80027ac <MX_HRTIM_Init>
  MX_ADC3_Init();
 80022b4:	f000 f9dc 	bl	8002670 <MX_ADC3_Init>
  MX_LWIP_Init();
 80022b8:	f00c fda0 	bl	800edfc <MX_LWIP_Init>
  MX_TIM2_Init();
 80022bc:	f000 fc4a 	bl	8002b54 <MX_TIM2_Init>
  MX_TIM5_Init();
 80022c0:	f000 fd34 	bl	8002d2c <MX_TIM5_Init>
  MX_TIM4_Init();
 80022c4:	f000 fce2 	bl	8002c8c <MX_TIM4_Init>
  printf("\033c"); //clears screen
 80022c8:	4871      	ldr	r0, [pc, #452]	; (8002490 <main+0x2e0>)
 80022ca:	f017 fcc1 	bl	8019c50 <iprintf>
  printf("Atomic Clock - Source __TIMESTAMP__: %s\r\n", __TIMESTAMP__);
 80022ce:	4971      	ldr	r1, [pc, #452]	; (8002494 <main+0x2e4>)
 80022d0:	4871      	ldr	r0, [pc, #452]	; (8002498 <main+0x2e8>)
 80022d2:	f017 fcbd 	bl	8019c50 <iprintf>
		if (init_synthesiser(MW_power) != SUCCESS) {
 80022d6:	4b71      	ldr	r3, [pc, #452]	; (800249c <main+0x2ec>)
 80022d8:	781b      	ldrb	r3, [r3, #0]
 80022da:	4618      	mov	r0, r3
 80022dc:	f019 fc4c 	bl	801bb78 <__init_synthesiser_veneer>
 80022e0:	4603      	mov	r3, r0
 80022e2:	2b00      	cmp	r3, #0
 80022e4:	d004      	beq.n	80022f0 <main+0x140>
			printf("Synthesiser initialisation failed!\r\n");
 80022e6:	486e      	ldr	r0, [pc, #440]	; (80024a0 <main+0x2f0>)
 80022e8:	f017 fd18 	bl	8019d1c <puts>
			Error_Handler();
 80022ec:	f000 ffd6 	bl	800329c <Error_Handler>
			printf("MW power setting (LO2GAIN): 0x%x \r\n", MW_power);
 80022f0:	4b6a      	ldr	r3, [pc, #424]	; (800249c <main+0x2ec>)
 80022f2:	781b      	ldrb	r3, [r3, #0]
 80022f4:	4619      	mov	r1, r3
 80022f6:	486b      	ldr	r0, [pc, #428]	; (80024a4 <main+0x2f4>)
 80022f8:	f017 fcaa 	bl	8019c50 <iprintf>
	if (HAL_LPTIM_Counter_Start_IT(&hlptim1, 1024) != HAL_OK) {
 80022fc:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8002300:	4869      	ldr	r0, [pc, #420]	; (80024a8 <main+0x2f8>)
 8002302:	f007 f803 	bl	800930c <HAL_LPTIM_Counter_Start_IT>
 8002306:	4603      	mov	r3, r0
 8002308:	2b00      	cmp	r3, #0
 800230a:	d004      	beq.n	8002316 <main+0x166>
		printf("Failed to start slow flashing LED!\r\n");
 800230c:	4867      	ldr	r0, [pc, #412]	; (80024ac <main+0x2fc>)
 800230e:	f017 fd05 	bl	8019d1c <puts>
		Error_Handler();
 8002312:	f000 ffc3 	bl	800329c <Error_Handler>
	if (HAL_DAC_Start(&hdac1, DAC_CHANNEL_1) != HAL_OK) {
 8002316:	2100      	movs	r1, #0
 8002318:	4865      	ldr	r0, [pc, #404]	; (80024b0 <main+0x300>)
 800231a:	f003 fdeb 	bl	8005ef4 <HAL_DAC_Start>
 800231e:	4603      	mov	r3, r0
 8002320:	2b00      	cmp	r3, #0
 8002322:	d004      	beq.n	800232e <main+0x17e>
		printf("Failure to initialise DAC channel 1 \r\n");
 8002324:	4863      	ldr	r0, [pc, #396]	; (80024b4 <main+0x304>)
 8002326:	f017 fcf9 	bl	8019d1c <puts>
		Error_Handler();
 800232a:	f000 ffb7 	bl	800329c <Error_Handler>
	if (HAL_DAC_Start(&hdac1, DAC_CHANNEL_2) != HAL_OK) {
 800232e:	2110      	movs	r1, #16
 8002330:	485f      	ldr	r0, [pc, #380]	; (80024b0 <main+0x300>)
 8002332:	f003 fddf 	bl	8005ef4 <HAL_DAC_Start>
 8002336:	4603      	mov	r3, r0
 8002338:	2b00      	cmp	r3, #0
 800233a:	d004      	beq.n	8002346 <main+0x196>
		printf("Failure to initialise DAC channel 2 \r\n");
 800233c:	485e      	ldr	r0, [pc, #376]	; (80024b8 <main+0x308>)
 800233e:	f017 fced 	bl	8019d1c <puts>
		Error_Handler();
 8002342:	f000 ffab 	bl	800329c <Error_Handler>
	printf("Setting DAC output 1 (OCXO control) to 0V \r\n");
 8002346:	485d      	ldr	r0, [pc, #372]	; (80024bc <main+0x30c>)
 8002348:	f017 fce8 	bl	8019d1c <puts>
	if(HAL_DAC_SetValue(&hdac1, DAC_CHANNEL_1, DAC_ALIGN_12B_R, 0) != HAL_OK){
 800234c:	2300      	movs	r3, #0
 800234e:	2200      	movs	r2, #0
 8002350:	2100      	movs	r1, #0
 8002352:	4857      	ldr	r0, [pc, #348]	; (80024b0 <main+0x300>)
 8002354:	f003 fe20 	bl	8005f98 <HAL_DAC_SetValue>
 8002358:	4603      	mov	r3, r0
 800235a:	2b00      	cmp	r3, #0
 800235c:	d004      	beq.n	8002368 <main+0x1b8>
			printf("DAC setup failed for channel 1!\r\n");
 800235e:	4858      	ldr	r0, [pc, #352]	; (80024c0 <main+0x310>)
 8002360:	f017 fcdc 	bl	8019d1c <puts>
		Error_Handler();
 8002364:	f000 ff9a 	bl	800329c <Error_Handler>
	printf("Setting DAC output 2 (laser control) to 0V \r\n");
 8002368:	4856      	ldr	r0, [pc, #344]	; (80024c4 <main+0x314>)
 800236a:	f017 fcd7 	bl	8019d1c <puts>
	if(HAL_DAC_SetValue(&hdac1, DAC_CHANNEL_2, DAC_ALIGN_12B_R, 0) != HAL_OK){
 800236e:	2300      	movs	r3, #0
 8002370:	2200      	movs	r2, #0
 8002372:	2110      	movs	r1, #16
 8002374:	484e      	ldr	r0, [pc, #312]	; (80024b0 <main+0x300>)
 8002376:	f003 fe0f 	bl	8005f98 <HAL_DAC_SetValue>
 800237a:	4603      	mov	r3, r0
 800237c:	2b00      	cmp	r3, #0
 800237e:	d004      	beq.n	800238a <main+0x1da>
			printf("DAC setup failed for channel 2!\r\n");
 8002380:	4851      	ldr	r0, [pc, #324]	; (80024c8 <main+0x318>)
 8002382:	f017 fccb 	bl	8019d1c <puts>
		Error_Handler();
 8002386:	f000 ff89 	bl	800329c <Error_Handler>
	if(HAL_ADCEx_Calibration_Start(&hadc3, ADC_CALIB_OFFSET, ADC_SINGLE_ENDED) != HAL_OK){
 800238a:	f240 72ff 	movw	r2, #2047	; 0x7ff
 800238e:	2100      	movs	r1, #0
 8002390:	484e      	ldr	r0, [pc, #312]	; (80024cc <main+0x31c>)
 8002392:	f003 fb6b 	bl	8005a6c <HAL_ADCEx_Calibration_Start>
 8002396:	4603      	mov	r3, r0
 8002398:	2b00      	cmp	r3, #0
 800239a:	d004      	beq.n	80023a6 <main+0x1f6>
		printf("ADC calibration failure \r\n");
 800239c:	484c      	ldr	r0, [pc, #304]	; (80024d0 <main+0x320>)
 800239e:	f017 fcbd 	bl	8019d1c <puts>
		Error_Handler();
 80023a2:	f000 ff7b 	bl	800329c <Error_Handler>
	if(HAL_ADC_Start_IT(&hadc3) != HAL_OK){
 80023a6:	4849      	ldr	r0, [pc, #292]	; (80024cc <main+0x31c>)
 80023a8:	f002 fa4e 	bl	8004848 <HAL_ADC_Start_IT>
 80023ac:	4603      	mov	r3, r0
 80023ae:	2b00      	cmp	r3, #0
 80023b0:	d004      	beq.n	80023bc <main+0x20c>
		printf("Failed to start ADC with interrupt capability \r\n");
 80023b2:	4848      	ldr	r0, [pc, #288]	; (80024d4 <main+0x324>)
 80023b4:	f017 fcb2 	bl	8019d1c <puts>
	                Error_Handler();
 80023b8:	f000 ff70 	bl	800329c <Error_Handler>
	printf("ADC calibrated successfully and interrupt callback enabled \r\n");
 80023bc:	4846      	ldr	r0, [pc, #280]	; (80024d8 <main+0x328>)
 80023be:	f017 fcad 	bl	8019d1c <puts>
	measure_POP_cycle_time();
 80023c2:	f019 fbdd 	bl	801bb80 <__measure_POP_cycle_time_veneer>
	calc_fixed_time_MW_sweep((double)(HYPERFINE + MW_DELTA), 10000, 50, ADD_SCOPE_SYNC_TIME); //10kHz sweep, 50s
 80023c6:	2000      	movs	r0, #0
 80023c8:	ed9f 2b27 	vldr	d2, [pc, #156]	; 8002468 <main+0x2b8>
 80023cc:	ed9f 1b28 	vldr	d1, [pc, #160]	; 8002470 <main+0x2c0>
 80023d0:	ed9f 0b29 	vldr	d0, [pc, #164]	; 8002478 <main+0x2c8>
 80023d4:	f019 fbcc 	bl	801bb70 <__calc_fixed_time_MW_sweep_veneer>
	stop_MW_operation();
 80023d8:	f019 fbd6 	bl	801bb88 <__stop_MW_operation_veneer>
	start_laser_ramp();
 80023dc:	f019 fbdc 	bl	801bb98 <__start_laser_ramp_veneer>
	while(!absorption_dip_locked) {
 80023e0:	e001      	b.n	80023e6 <main+0x236>
		laser_update();
 80023e2:	f019 fbd5 	bl	801bb90 <__laser_update_veneer>
	while(!absorption_dip_locked) {
 80023e6:	4b3d      	ldr	r3, [pc, #244]	; (80024dc <main+0x32c>)
 80023e8:	781b      	ldrb	r3, [r3, #0]
 80023ea:	f083 0301 	eor.w	r3, r3, #1
 80023ee:	b2db      	uxtb	r3, r3
 80023f0:	2b00      	cmp	r3, #0
 80023f2:	d1f6      	bne.n	80023e2 <main+0x232>
	printf("Entering main while loop\r\n");
 80023f4:	483a      	ldr	r0, [pc, #232]	; (80024e0 <main+0x330>)
 80023f6:	f017 fc91 	bl	8019d1c <puts>
		blue_button_status = HAL_GPIO_ReadPin(BLUE_BUTTON_GPIO_Port, BLUE_BUTTON_Pin);
 80023fa:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80023fe:	4839      	ldr	r0, [pc, #228]	; (80024e4 <main+0x334>)
 8002400:	f005 fbde 	bl	8007bc0 <HAL_GPIO_ReadPin>
 8002404:	4603      	mov	r3, r0
 8002406:	2b00      	cmp	r3, #0
 8002408:	bf14      	ite	ne
 800240a:	2301      	movne	r3, #1
 800240c:	2300      	moveq	r3, #0
 800240e:	b2da      	uxtb	r2, r3
 8002410:	4b35      	ldr	r3, [pc, #212]	; (80024e8 <main+0x338>)
 8002412:	701a      	strb	r2, [r3, #0]
		if (blue_button_status) {// If blue button is pressed
 8002414:	4b34      	ldr	r3, [pc, #208]	; (80024e8 <main+0x338>)
 8002416:	781b      	ldrb	r3, [r3, #0]
 8002418:	b2db      	uxtb	r3, r3
 800241a:	2b00      	cmp	r3, #0
 800241c:	d01d      	beq.n	800245a <main+0x2aa>
			printf("Blue button pressed....\r\n");
 800241e:	4833      	ldr	r0, [pc, #204]	; (80024ec <main+0x33c>)
 8002420:	f017 fc7c 	bl	8019d1c <puts>
			start_laser_ramp();
 8002424:	f019 fbb8 	bl	801bb98 <__start_laser_ramp_veneer>
			while(blue_button_status) {//remain here polling button until it is released
 8002428:	e012      	b.n	8002450 <main+0x2a0>
				timer_delay(SLOW_TIMER, 100); //1ms delay
 800242a:	4b31      	ldr	r3, [pc, #196]	; (80024f0 <main+0x340>)
 800242c:	681b      	ldr	r3, [r3, #0]
 800242e:	2164      	movs	r1, #100	; 0x64
 8002430:	4618      	mov	r0, r3
 8002432:	f019 fbb5 	bl	801bba0 <__timer_delay_veneer>
				blue_button_status = HAL_GPIO_ReadPin(BLUE_BUTTON_GPIO_Port, BLUE_BUTTON_Pin);
 8002436:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800243a:	482a      	ldr	r0, [pc, #168]	; (80024e4 <main+0x334>)
 800243c:	f005 fbc0 	bl	8007bc0 <HAL_GPIO_ReadPin>
 8002440:	4603      	mov	r3, r0
 8002442:	2b00      	cmp	r3, #0
 8002444:	bf14      	ite	ne
 8002446:	2301      	movne	r3, #1
 8002448:	2300      	moveq	r3, #0
 800244a:	b2da      	uxtb	r2, r3
 800244c:	4b26      	ldr	r3, [pc, #152]	; (80024e8 <main+0x338>)
 800244e:	701a      	strb	r2, [r3, #0]
			while(blue_button_status) {//remain here polling button until it is released
 8002450:	4b25      	ldr	r3, [pc, #148]	; (80024e8 <main+0x338>)
 8002452:	781b      	ldrb	r3, [r3, #0]
 8002454:	b2db      	uxtb	r3, r3
 8002456:	2b00      	cmp	r3, #0
 8002458:	d1e7      	bne.n	800242a <main+0x27a>
		MW_update();
 800245a:	f019 fba5 	bl	801bba8 <__MW_update_veneer>
		laser_update();
 800245e:	f019 fb97 	bl	801bb90 <__laser_update_veneer>
		blue_button_status = HAL_GPIO_ReadPin(BLUE_BUTTON_GPIO_Port, BLUE_BUTTON_Pin);
 8002462:	e7ca      	b.n	80023fa <main+0x24a>
 8002464:	f3af 8000 	nop.w
 8002468:	00000000 	.word	0x00000000
 800246c:	40490000 	.word	0x40490000
 8002470:	00000000 	.word	0x00000000
 8002474:	40c38800 	.word	0x40c38800
 8002478:	ea600000 	.word	0xea600000
 800247c:	41e69e35 	.word	0x41e69e35
 8002480:	00001b00 	.word	0x00001b00
 8002484:	00000000 	.word	0x00000000
 8002488:	08000298 	.word	0x08000298
 800248c:	e000ed00 	.word	0xe000ed00
 8002490:	0801bdd4 	.word	0x0801bdd4
 8002494:	0801bdd8 	.word	0x0801bdd8
 8002498:	0801bdf4 	.word	0x0801bdf4
 800249c:	20000002 	.word	0x20000002
 80024a0:	0801be20 	.word	0x0801be20
 80024a4:	0801be44 	.word	0x0801be44
 80024a8:	200003ac 	.word	0x200003ac
 80024ac:	0801be68 	.word	0x0801be68
 80024b0:	200002bc 	.word	0x200002bc
 80024b4:	0801be8c 	.word	0x0801be8c
 80024b8:	0801beb4 	.word	0x0801beb4
 80024bc:	0801bedc 	.word	0x0801bedc
 80024c0:	0801bf08 	.word	0x0801bf08
 80024c4:	0801bf2c 	.word	0x0801bf2c
 80024c8:	0801bf5c 	.word	0x0801bf5c
 80024cc:	20000258 	.word	0x20000258
 80024d0:	0801bf80 	.word	0x0801bf80
 80024d4:	0801bf9c 	.word	0x0801bf9c
 80024d8:	0801bfcc 	.word	0x0801bfcc
 80024dc:	20000256 	.word	0x20000256
 80024e0:	0801c00c 	.word	0x0801c00c
 80024e4:	58020800 	.word	0x58020800
 80024e8:	200005f4 	.word	0x200005f4
 80024ec:	0801c028 	.word	0x0801c028
 80024f0:	20000018 	.word	0x20000018

080024f4 <SystemClock_Config>:
{
 80024f4:	b580      	push	{r7, lr}
 80024f6:	b0a4      	sub	sp, #144	; 0x90
 80024f8:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80024fa:	f107 0344 	add.w	r3, r7, #68	; 0x44
 80024fe:	224c      	movs	r2, #76	; 0x4c
 8002500:	2100      	movs	r1, #0
 8002502:	4618      	mov	r0, r3
 8002504:	f017 fcfa 	bl	8019efc <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8002508:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800250c:	2220      	movs	r2, #32
 800250e:	2100      	movs	r1, #0
 8002510:	4618      	mov	r0, r3
 8002512:	f017 fcf3 	bl	8019efc <memset>
  RCC_CRSInitTypeDef RCC_CRSInitStruct = {0};
 8002516:	f107 030c 	add.w	r3, r7, #12
 800251a:	2200      	movs	r2, #0
 800251c:	601a      	str	r2, [r3, #0]
 800251e:	605a      	str	r2, [r3, #4]
 8002520:	609a      	str	r2, [r3, #8]
 8002522:	60da      	str	r2, [r3, #12]
 8002524:	611a      	str	r2, [r3, #16]
 8002526:	615a      	str	r2, [r3, #20]
  HAL_PWREx_ConfigSupply(PWR_LDO_SUPPLY);
 8002528:	2002      	movs	r0, #2
 800252a:	f007 fa4d 	bl	80099c8 <HAL_PWREx_ConfigSupply>
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 800252e:	2300      	movs	r3, #0
 8002530:	60bb      	str	r3, [r7, #8]
 8002532:	4b4c      	ldr	r3, [pc, #304]	; (8002664 <SystemClock_Config+0x170>)
 8002534:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002536:	4a4b      	ldr	r2, [pc, #300]	; (8002664 <SystemClock_Config+0x170>)
 8002538:	f023 0301 	bic.w	r3, r3, #1
 800253c:	62d3      	str	r3, [r2, #44]	; 0x2c
 800253e:	4b49      	ldr	r3, [pc, #292]	; (8002664 <SystemClock_Config+0x170>)
 8002540:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002542:	f003 0301 	and.w	r3, r3, #1
 8002546:	60bb      	str	r3, [r7, #8]
 8002548:	4b47      	ldr	r3, [pc, #284]	; (8002668 <SystemClock_Config+0x174>)
 800254a:	699b      	ldr	r3, [r3, #24]
 800254c:	4a46      	ldr	r2, [pc, #280]	; (8002668 <SystemClock_Config+0x174>)
 800254e:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8002552:	6193      	str	r3, [r2, #24]
 8002554:	4b44      	ldr	r3, [pc, #272]	; (8002668 <SystemClock_Config+0x174>)
 8002556:	699b      	ldr	r3, [r3, #24]
 8002558:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 800255c:	60bb      	str	r3, [r7, #8]
 800255e:	68bb      	ldr	r3, [r7, #8]
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 8002560:	bf00      	nop
 8002562:	4b41      	ldr	r3, [pc, #260]	; (8002668 <SystemClock_Config+0x174>)
 8002564:	699b      	ldr	r3, [r3, #24]
 8002566:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800256a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800256e:	d1f8      	bne.n	8002562 <SystemClock_Config+0x6e>
  HAL_PWR_EnableBkUpAccess();
 8002570:	f007 fa1a 	bl	80099a8 <HAL_PWR_EnableBkUpAccess>
  __HAL_RCC_LSEDRIVE_CONFIG(RCC_LSEDRIVE_LOW);
 8002574:	f001 fd74 	bl	8004060 <HAL_GetREVID>
 8002578:	4b3c      	ldr	r3, [pc, #240]	; (800266c <SystemClock_Config+0x178>)
 800257a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800257c:	4a3b      	ldr	r2, [pc, #236]	; (800266c <SystemClock_Config+0x178>)
 800257e:	f023 0318 	bic.w	r3, r3, #24
 8002582:	6713      	str	r3, [r2, #112]	; 0x70
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI48|RCC_OSCILLATORTYPE_HSE
 8002584:	2325      	movs	r3, #37	; 0x25
 8002586:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 8002588:	f44f 23a0 	mov.w	r3, #327680	; 0x50000
 800258c:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.LSEState = RCC_LSE_ON;
 800258e:	2301      	movs	r3, #1
 8002590:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.HSI48State = RCC_HSI48_ON;
 8002592:	2301      	movs	r3, #1
 8002594:	65fb      	str	r3, [r7, #92]	; 0x5c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8002596:	2302      	movs	r3, #2
 8002598:	66bb      	str	r3, [r7, #104]	; 0x68
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800259a:	2302      	movs	r3, #2
 800259c:	66fb      	str	r3, [r7, #108]	; 0x6c
  RCC_OscInitStruct.PLL.PLLM = 1;
 800259e:	2301      	movs	r3, #1
 80025a0:	673b      	str	r3, [r7, #112]	; 0x70
  RCC_OscInitStruct.PLL.PLLN = 80;
 80025a2:	2350      	movs	r3, #80	; 0x50
 80025a4:	677b      	str	r3, [r7, #116]	; 0x74
  RCC_OscInitStruct.PLL.PLLP = 2;
 80025a6:	2302      	movs	r3, #2
 80025a8:	67bb      	str	r3, [r7, #120]	; 0x78
  RCC_OscInitStruct.PLL.PLLQ = 4;
 80025aa:	2304      	movs	r3, #4
 80025ac:	67fb      	str	r3, [r7, #124]	; 0x7c
  RCC_OscInitStruct.PLL.PLLR = 2;
 80025ae:	2302      	movs	r3, #2
 80025b0:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
  RCC_OscInitStruct.PLL.PLLRGE = RCC_PLL1VCIRANGE_3;
 80025b4:	230c      	movs	r3, #12
 80025b6:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  RCC_OscInitStruct.PLL.PLLVCOSEL = RCC_PLL1VCOWIDE;
 80025ba:	2300      	movs	r3, #0
 80025bc:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  RCC_OscInitStruct.PLL.PLLFRACN = 0;
 80025c0:	2300      	movs	r3, #0
 80025c2:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80025c6:	f107 0344 	add.w	r3, r7, #68	; 0x44
 80025ca:	4618      	mov	r0, r3
 80025cc:	f007 fa36 	bl	8009a3c <HAL_RCC_OscConfig>
 80025d0:	4603      	mov	r3, r0
 80025d2:	2b00      	cmp	r3, #0
 80025d4:	d001      	beq.n	80025da <SystemClock_Config+0xe6>
    Error_Handler();
 80025d6:	f000 fe61 	bl	800329c <Error_Handler>
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80025da:	233f      	movs	r3, #63	; 0x3f
 80025dc:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80025de:	2303      	movs	r3, #3
 80025e0:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV1;
 80025e2:	2300      	movs	r3, #0
 80025e4:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV4;
 80025e6:	2309      	movs	r3, #9
 80025e8:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_ClkInitStruct.APB3CLKDivider = RCC_APB3_DIV1;
 80025ea:	2300      	movs	r3, #0
 80025ec:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV1;
 80025ee:	2300      	movs	r3, #0
 80025f0:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_ClkInitStruct.APB2CLKDivider = RCC_APB2_DIV16;
 80025f2:	f44f 63e0 	mov.w	r3, #1792	; 0x700
 80025f6:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_ClkInitStruct.APB4CLKDivider = RCC_APB4_DIV1;
 80025f8:	2300      	movs	r3, #0
 80025fa:	643b      	str	r3, [r7, #64]	; 0x40
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 80025fc:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002600:	2101      	movs	r1, #1
 8002602:	4618      	mov	r0, r3
 8002604:	f007 fe74 	bl	800a2f0 <HAL_RCC_ClockConfig>
 8002608:	4603      	mov	r3, r0
 800260a:	2b00      	cmp	r3, #0
 800260c:	d001      	beq.n	8002612 <SystemClock_Config+0x11e>
    Error_Handler();
 800260e:	f000 fe45 	bl	800329c <Error_Handler>
  HAL_RCC_EnableCSS();
 8002612:	f008 f823 	bl	800a65c <HAL_RCC_EnableCSS>
  __HAL_RCC_CRS_CLK_ENABLE();
 8002616:	4b15      	ldr	r3, [pc, #84]	; (800266c <SystemClock_Config+0x178>)
 8002618:	f8d3 30ec 	ldr.w	r3, [r3, #236]	; 0xec
 800261c:	4a13      	ldr	r2, [pc, #76]	; (800266c <SystemClock_Config+0x178>)
 800261e:	f043 0302 	orr.w	r3, r3, #2
 8002622:	f8c2 30ec 	str.w	r3, [r2, #236]	; 0xec
 8002626:	4b11      	ldr	r3, [pc, #68]	; (800266c <SystemClock_Config+0x178>)
 8002628:	f8d3 30ec 	ldr.w	r3, [r3, #236]	; 0xec
 800262c:	f003 0302 	and.w	r3, r3, #2
 8002630:	607b      	str	r3, [r7, #4]
 8002632:	687b      	ldr	r3, [r7, #4]
  RCC_CRSInitStruct.Prescaler = RCC_CRS_SYNC_DIV1;
 8002634:	2300      	movs	r3, #0
 8002636:	60fb      	str	r3, [r7, #12]
  RCC_CRSInitStruct.Source = RCC_CRS_SYNC_SOURCE_LSE;
 8002638:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 800263c:	613b      	str	r3, [r7, #16]
  RCC_CRSInitStruct.Polarity = RCC_CRS_SYNC_POLARITY_RISING;
 800263e:	2300      	movs	r3, #0
 8002640:	617b      	str	r3, [r7, #20]
  RCC_CRSInitStruct.ReloadValue = __HAL_RCC_CRS_RELOADVALUE_CALCULATE(48000000,32768);
 8002642:	f240 53b7 	movw	r3, #1463	; 0x5b7
 8002646:	61bb      	str	r3, [r7, #24]
  RCC_CRSInitStruct.ErrorLimitValue = 34;
 8002648:	2322      	movs	r3, #34	; 0x22
 800264a:	61fb      	str	r3, [r7, #28]
  RCC_CRSInitStruct.HSI48CalibrationValue = 32;
 800264c:	2320      	movs	r3, #32
 800264e:	623b      	str	r3, [r7, #32]
  HAL_RCCEx_CRSConfig(&RCC_CRSInitStruct);
 8002650:	f107 030c 	add.w	r3, r7, #12
 8002654:	4618      	mov	r0, r3
 8002656:	f00a fd9d 	bl	800d194 <HAL_RCCEx_CRSConfig>
}
 800265a:	bf00      	nop
 800265c:	3790      	adds	r7, #144	; 0x90
 800265e:	46bd      	mov	sp, r7
 8002660:	bd80      	pop	{r7, pc}
 8002662:	bf00      	nop
 8002664:	58000400 	.word	0x58000400
 8002668:	58024800 	.word	0x58024800
 800266c:	58024400 	.word	0x58024400

08002670 <MX_ADC3_Init>:
{
 8002670:	b580      	push	{r7, lr}
 8002672:	b088      	sub	sp, #32
 8002674:	af00      	add	r7, sp, #0
  ADC_ChannelConfTypeDef sConfig = {0};
 8002676:	1d3b      	adds	r3, r7, #4
 8002678:	2200      	movs	r2, #0
 800267a:	601a      	str	r2, [r3, #0]
 800267c:	605a      	str	r2, [r3, #4]
 800267e:	609a      	str	r2, [r3, #8]
 8002680:	60da      	str	r2, [r3, #12]
 8002682:	611a      	str	r2, [r3, #16]
 8002684:	615a      	str	r2, [r3, #20]
 8002686:	619a      	str	r2, [r3, #24]
  hadc3.Instance = ADC3;
 8002688:	4b28      	ldr	r3, [pc, #160]	; (800272c <MX_ADC3_Init+0xbc>)
 800268a:	4a29      	ldr	r2, [pc, #164]	; (8002730 <MX_ADC3_Init+0xc0>)
 800268c:	601a      	str	r2, [r3, #0]
  hadc3.Init.Resolution = ADC_RESOLUTION_16B;
 800268e:	4b27      	ldr	r3, [pc, #156]	; (800272c <MX_ADC3_Init+0xbc>)
 8002690:	2200      	movs	r2, #0
 8002692:	609a      	str	r2, [r3, #8]
  hadc3.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8002694:	4b25      	ldr	r3, [pc, #148]	; (800272c <MX_ADC3_Init+0xbc>)
 8002696:	2200      	movs	r2, #0
 8002698:	60da      	str	r2, [r3, #12]
  hadc3.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 800269a:	4b24      	ldr	r3, [pc, #144]	; (800272c <MX_ADC3_Init+0xbc>)
 800269c:	2204      	movs	r2, #4
 800269e:	611a      	str	r2, [r3, #16]
  hadc3.Init.LowPowerAutoWait = DISABLE;
 80026a0:	4b22      	ldr	r3, [pc, #136]	; (800272c <MX_ADC3_Init+0xbc>)
 80026a2:	2200      	movs	r2, #0
 80026a4:	751a      	strb	r2, [r3, #20]
  hadc3.Init.ContinuousConvMode = DISABLE;
 80026a6:	4b21      	ldr	r3, [pc, #132]	; (800272c <MX_ADC3_Init+0xbc>)
 80026a8:	2200      	movs	r2, #0
 80026aa:	755a      	strb	r2, [r3, #21]
  hadc3.Init.NbrOfConversion = 1;
 80026ac:	4b1f      	ldr	r3, [pc, #124]	; (800272c <MX_ADC3_Init+0xbc>)
 80026ae:	2201      	movs	r2, #1
 80026b0:	619a      	str	r2, [r3, #24]
  hadc3.Init.DiscontinuousConvMode = DISABLE;
 80026b2:	4b1e      	ldr	r3, [pc, #120]	; (800272c <MX_ADC3_Init+0xbc>)
 80026b4:	2200      	movs	r2, #0
 80026b6:	771a      	strb	r2, [r3, #28]
  hadc3.Init.ExternalTrigConv = ADC_EXTERNALTRIG_EXT_IT11;
 80026b8:	4b1c      	ldr	r3, [pc, #112]	; (800272c <MX_ADC3_Init+0xbc>)
 80026ba:	f44f 6298 	mov.w	r2, #1216	; 0x4c0
 80026be:	625a      	str	r2, [r3, #36]	; 0x24
  hadc3.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_RISING;
 80026c0:	4b1a      	ldr	r3, [pc, #104]	; (800272c <MX_ADC3_Init+0xbc>)
 80026c2:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80026c6:	629a      	str	r2, [r3, #40]	; 0x28
  hadc3.Init.ConversionDataManagement = ADC_CONVERSIONDATA_DR;
 80026c8:	4b18      	ldr	r3, [pc, #96]	; (800272c <MX_ADC3_Init+0xbc>)
 80026ca:	2200      	movs	r2, #0
 80026cc:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc3.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 80026ce:	4b17      	ldr	r3, [pc, #92]	; (800272c <MX_ADC3_Init+0xbc>)
 80026d0:	2200      	movs	r2, #0
 80026d2:	631a      	str	r2, [r3, #48]	; 0x30
  hadc3.Init.LeftBitShift = ADC_LEFTBITSHIFT_NONE;
 80026d4:	4b15      	ldr	r3, [pc, #84]	; (800272c <MX_ADC3_Init+0xbc>)
 80026d6:	2200      	movs	r2, #0
 80026d8:	635a      	str	r2, [r3, #52]	; 0x34
  hadc3.Init.OversamplingMode = DISABLE;
 80026da:	4b14      	ldr	r3, [pc, #80]	; (800272c <MX_ADC3_Init+0xbc>)
 80026dc:	2200      	movs	r2, #0
 80026de:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  if (HAL_ADC_Init(&hadc3) != HAL_OK)
 80026e2:	4812      	ldr	r0, [pc, #72]	; (800272c <MX_ADC3_Init+0xbc>)
 80026e4:	f001 ff0e 	bl	8004504 <HAL_ADC_Init>
 80026e8:	4603      	mov	r3, r0
 80026ea:	2b00      	cmp	r3, #0
 80026ec:	d001      	beq.n	80026f2 <MX_ADC3_Init+0x82>
    Error_Handler();
 80026ee:	f000 fdd5 	bl	800329c <Error_Handler>
  sConfig.Channel = ADC_CHANNEL_0;
 80026f2:	2301      	movs	r3, #1
 80026f4:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 80026f6:	2306      	movs	r3, #6
 80026f8:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
 80026fa:	2300      	movs	r3, #0
 80026fc:	60fb      	str	r3, [r7, #12]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 80026fe:	f240 73ff 	movw	r3, #2047	; 0x7ff
 8002702:	613b      	str	r3, [r7, #16]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 8002704:	2304      	movs	r3, #4
 8002706:	617b      	str	r3, [r7, #20]
  sConfig.Offset = 0;
 8002708:	2300      	movs	r3, #0
 800270a:	61bb      	str	r3, [r7, #24]
  sConfig.OffsetSignedSaturation = DISABLE;
 800270c:	2300      	movs	r3, #0
 800270e:	777b      	strb	r3, [r7, #29]
  if (HAL_ADC_ConfigChannel(&hadc3, &sConfig) != HAL_OK)
 8002710:	1d3b      	adds	r3, r7, #4
 8002712:	4619      	mov	r1, r3
 8002714:	4805      	ldr	r0, [pc, #20]	; (800272c <MX_ADC3_Init+0xbc>)
 8002716:	f002 fc31 	bl	8004f7c <HAL_ADC_ConfigChannel>
 800271a:	4603      	mov	r3, r0
 800271c:	2b00      	cmp	r3, #0
 800271e:	d001      	beq.n	8002724 <MX_ADC3_Init+0xb4>
    Error_Handler();
 8002720:	f000 fdbc 	bl	800329c <Error_Handler>
}
 8002724:	bf00      	nop
 8002726:	3720      	adds	r7, #32
 8002728:	46bd      	mov	sp, r7
 800272a:	bd80      	pop	{r7, pc}
 800272c:	20000258 	.word	0x20000258
 8002730:	58026000 	.word	0x58026000

08002734 <MX_DAC1_Init>:
{
 8002734:	b580      	push	{r7, lr}
 8002736:	b08a      	sub	sp, #40	; 0x28
 8002738:	af00      	add	r7, sp, #0
  DAC_ChannelConfTypeDef sConfig = {0};
 800273a:	1d3b      	adds	r3, r7, #4
 800273c:	2224      	movs	r2, #36	; 0x24
 800273e:	2100      	movs	r1, #0
 8002740:	4618      	mov	r0, r3
 8002742:	f017 fbdb 	bl	8019efc <memset>
  hdac1.Instance = DAC1;
 8002746:	4b17      	ldr	r3, [pc, #92]	; (80027a4 <MX_DAC1_Init+0x70>)
 8002748:	4a17      	ldr	r2, [pc, #92]	; (80027a8 <MX_DAC1_Init+0x74>)
 800274a:	601a      	str	r2, [r3, #0]
  if (HAL_DAC_Init(&hdac1) != HAL_OK)
 800274c:	4815      	ldr	r0, [pc, #84]	; (80027a4 <MX_DAC1_Init+0x70>)
 800274e:	f003 fbaf 	bl	8005eb0 <HAL_DAC_Init>
 8002752:	4603      	mov	r3, r0
 8002754:	2b00      	cmp	r3, #0
 8002756:	d001      	beq.n	800275c <MX_DAC1_Init+0x28>
    Error_Handler();
 8002758:	f000 fda0 	bl	800329c <Error_Handler>
  sConfig.DAC_SampleAndHold = DAC_SAMPLEANDHOLD_DISABLE;
 800275c:	2300      	movs	r3, #0
 800275e:	607b      	str	r3, [r7, #4]
  sConfig.DAC_Trigger = DAC_TRIGGER_NONE;
 8002760:	2300      	movs	r3, #0
 8002762:	60bb      	str	r3, [r7, #8]
  sConfig.DAC_OutputBuffer = DAC_OUTPUTBUFFER_ENABLE;
 8002764:	2300      	movs	r3, #0
 8002766:	60fb      	str	r3, [r7, #12]
  sConfig.DAC_ConnectOnChipPeripheral = DAC_CHIPCONNECT_DISABLE;
 8002768:	2301      	movs	r3, #1
 800276a:	613b      	str	r3, [r7, #16]
  sConfig.DAC_UserTrimming = DAC_TRIMMING_FACTORY;
 800276c:	2300      	movs	r3, #0
 800276e:	617b      	str	r3, [r7, #20]
  if (HAL_DAC_ConfigChannel(&hdac1, &sConfig, DAC_CHANNEL_1) != HAL_OK)
 8002770:	1d3b      	adds	r3, r7, #4
 8002772:	2200      	movs	r2, #0
 8002774:	4619      	mov	r1, r3
 8002776:	480b      	ldr	r0, [pc, #44]	; (80027a4 <MX_DAC1_Init+0x70>)
 8002778:	f003 fc34 	bl	8005fe4 <HAL_DAC_ConfigChannel>
 800277c:	4603      	mov	r3, r0
 800277e:	2b00      	cmp	r3, #0
 8002780:	d001      	beq.n	8002786 <MX_DAC1_Init+0x52>
    Error_Handler();
 8002782:	f000 fd8b 	bl	800329c <Error_Handler>
  if (HAL_DAC_ConfigChannel(&hdac1, &sConfig, DAC_CHANNEL_2) != HAL_OK)
 8002786:	1d3b      	adds	r3, r7, #4
 8002788:	2210      	movs	r2, #16
 800278a:	4619      	mov	r1, r3
 800278c:	4805      	ldr	r0, [pc, #20]	; (80027a4 <MX_DAC1_Init+0x70>)
 800278e:	f003 fc29 	bl	8005fe4 <HAL_DAC_ConfigChannel>
 8002792:	4603      	mov	r3, r0
 8002794:	2b00      	cmp	r3, #0
 8002796:	d001      	beq.n	800279c <MX_DAC1_Init+0x68>
    Error_Handler();
 8002798:	f000 fd80 	bl	800329c <Error_Handler>
}
 800279c:	bf00      	nop
 800279e:	3728      	adds	r7, #40	; 0x28
 80027a0:	46bd      	mov	sp, r7
 80027a2:	bd80      	pop	{r7, pc}
 80027a4:	200002bc 	.word	0x200002bc
 80027a8:	40007400 	.word	0x40007400

080027ac <MX_HRTIM_Init>:
{
 80027ac:	b580      	push	{r7, lr}
 80027ae:	b0a4      	sub	sp, #144	; 0x90
 80027b0:	af00      	add	r7, sp, #0
  HRTIM_TimeBaseCfgTypeDef pTimeBaseCfg = {0};
 80027b2:	f107 0380 	add.w	r3, r7, #128	; 0x80
 80027b6:	2200      	movs	r2, #0
 80027b8:	601a      	str	r2, [r3, #0]
 80027ba:	605a      	str	r2, [r3, #4]
 80027bc:	609a      	str	r2, [r3, #8]
 80027be:	60da      	str	r2, [r3, #12]
  HRTIM_TimerCfgTypeDef pTimerCfg = {0};
 80027c0:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80027c4:	2254      	movs	r2, #84	; 0x54
 80027c6:	2100      	movs	r1, #0
 80027c8:	4618      	mov	r0, r3
 80027ca:	f017 fb97 	bl	8019efc <memset>
  HRTIM_CompareCfgTypeDef pCompareCfg = {0};
 80027ce:	f107 0320 	add.w	r3, r7, #32
 80027d2:	2200      	movs	r2, #0
 80027d4:	601a      	str	r2, [r3, #0]
 80027d6:	605a      	str	r2, [r3, #4]
 80027d8:	609a      	str	r2, [r3, #8]
  HRTIM_OutputCfgTypeDef pOutputCfg = {0};
 80027da:	463b      	mov	r3, r7
 80027dc:	2220      	movs	r2, #32
 80027de:	2100      	movs	r1, #0
 80027e0:	4618      	mov	r0, r3
 80027e2:	f017 fb8b 	bl	8019efc <memset>
  hhrtim.Instance = HRTIM1;
 80027e6:	4b98      	ldr	r3, [pc, #608]	; (8002a48 <MX_HRTIM_Init+0x29c>)
 80027e8:	4a98      	ldr	r2, [pc, #608]	; (8002a4c <MX_HRTIM_Init+0x2a0>)
 80027ea:	601a      	str	r2, [r3, #0]
  hhrtim.Init.HRTIMInterruptResquests = HRTIM_IT_NONE;
 80027ec:	4b96      	ldr	r3, [pc, #600]	; (8002a48 <MX_HRTIM_Init+0x29c>)
 80027ee:	2200      	movs	r2, #0
 80027f0:	605a      	str	r2, [r3, #4]
  hhrtim.Init.SyncOptions = HRTIM_SYNCOPTION_NONE;
 80027f2:	4b95      	ldr	r3, [pc, #596]	; (8002a48 <MX_HRTIM_Init+0x29c>)
 80027f4:	2200      	movs	r2, #0
 80027f6:	609a      	str	r2, [r3, #8]
  if (HAL_HRTIM_Init(&hhrtim) != HAL_OK)
 80027f8:	4893      	ldr	r0, [pc, #588]	; (8002a48 <MX_HRTIM_Init+0x29c>)
 80027fa:	f005 fa51 	bl	8007ca0 <HAL_HRTIM_Init>
 80027fe:	4603      	mov	r3, r0
 8002800:	2b00      	cmp	r3, #0
 8002802:	d001      	beq.n	8002808 <MX_HRTIM_Init+0x5c>
    Error_Handler();
 8002804:	f000 fd4a 	bl	800329c <Error_Handler>
  pTimeBaseCfg.Period = PUMP_WIDTH+(2*MICROWAVE_DELAY)+(2*MICROWAVE_WIDTH)+RAMSEY_TIME+PROBE_WIDTH+POP_CYCLE_DELAY;
 8002808:	f24c 2318 	movw	r3, #49688	; 0xc218
 800280c:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
  pTimeBaseCfg.RepetitionCounter = 0x00;
 8002810:	2300      	movs	r3, #0
 8002812:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  pTimeBaseCfg.PrescalerRatio = HRTIM_PRESCALERRATIO_DIV4;
 8002816:	2307      	movs	r3, #7
 8002818:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  pTimeBaseCfg.Mode = HRTIM_MODE_CONTINUOUS;
 800281c:	2308      	movs	r3, #8
 800281e:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
  if (HAL_HRTIM_TimeBaseConfig(&hhrtim, HRTIM_TIMERINDEX_TIMER_A, &pTimeBaseCfg) != HAL_OK)
 8002822:	f107 0380 	add.w	r3, r7, #128	; 0x80
 8002826:	461a      	mov	r2, r3
 8002828:	2100      	movs	r1, #0
 800282a:	4887      	ldr	r0, [pc, #540]	; (8002a48 <MX_HRTIM_Init+0x29c>)
 800282c:	f005 fb08 	bl	8007e40 <HAL_HRTIM_TimeBaseConfig>
 8002830:	4603      	mov	r3, r0
 8002832:	2b00      	cmp	r3, #0
 8002834:	d001      	beq.n	800283a <MX_HRTIM_Init+0x8e>
    Error_Handler();
 8002836:	f000 fd31 	bl	800329c <Error_Handler>
  pTimerCfg.InterruptRequests = HRTIM_TIM_IT_CMP3|HRTIM_TIM_IT_REP;
 800283a:	2314      	movs	r3, #20
 800283c:	62fb      	str	r3, [r7, #44]	; 0x2c
  pTimerCfg.DMARequests = HRTIM_TIM_DMA_NONE;
 800283e:	2300      	movs	r3, #0
 8002840:	633b      	str	r3, [r7, #48]	; 0x30
  pTimerCfg.DMASrcAddress = 0x0000;
 8002842:	2300      	movs	r3, #0
 8002844:	637b      	str	r3, [r7, #52]	; 0x34
  pTimerCfg.DMADstAddress = 0x0000;
 8002846:	2300      	movs	r3, #0
 8002848:	63bb      	str	r3, [r7, #56]	; 0x38
  pTimerCfg.DMASize = 0x1;
 800284a:	2301      	movs	r3, #1
 800284c:	63fb      	str	r3, [r7, #60]	; 0x3c
  pTimerCfg.HalfModeEnable = HRTIM_HALFMODE_DISABLED;
 800284e:	2300      	movs	r3, #0
 8002850:	643b      	str	r3, [r7, #64]	; 0x40
  pTimerCfg.StartOnSync = HRTIM_SYNCSTART_DISABLED;
 8002852:	2300      	movs	r3, #0
 8002854:	647b      	str	r3, [r7, #68]	; 0x44
  pTimerCfg.ResetOnSync = HRTIM_SYNCRESET_DISABLED;
 8002856:	2300      	movs	r3, #0
 8002858:	64bb      	str	r3, [r7, #72]	; 0x48
  pTimerCfg.DACSynchro = HRTIM_DACSYNC_NONE;
 800285a:	2300      	movs	r3, #0
 800285c:	64fb      	str	r3, [r7, #76]	; 0x4c
  pTimerCfg.PreloadEnable = HRTIM_PRELOAD_DISABLED;
 800285e:	2300      	movs	r3, #0
 8002860:	653b      	str	r3, [r7, #80]	; 0x50
  pTimerCfg.UpdateGating = HRTIM_UPDATEGATING_INDEPENDENT;
 8002862:	2300      	movs	r3, #0
 8002864:	657b      	str	r3, [r7, #84]	; 0x54
  pTimerCfg.BurstMode = HRTIM_TIMERBURSTMODE_MAINTAINCLOCK;
 8002866:	2300      	movs	r3, #0
 8002868:	65bb      	str	r3, [r7, #88]	; 0x58
  pTimerCfg.RepetitionUpdate = HRTIM_UPDATEONREPETITION_DISABLED;
 800286a:	2300      	movs	r3, #0
 800286c:	65fb      	str	r3, [r7, #92]	; 0x5c
  pTimerCfg.PushPull = HRTIM_TIMPUSHPULLMODE_DISABLED;
 800286e:	2300      	movs	r3, #0
 8002870:	663b      	str	r3, [r7, #96]	; 0x60
  pTimerCfg.FaultEnable = HRTIM_TIMFAULTENABLE_NONE;
 8002872:	2300      	movs	r3, #0
 8002874:	667b      	str	r3, [r7, #100]	; 0x64
  pTimerCfg.FaultLock = HRTIM_TIMFAULTLOCK_READWRITE;
 8002876:	2300      	movs	r3, #0
 8002878:	66bb      	str	r3, [r7, #104]	; 0x68
  pTimerCfg.DeadTimeInsertion = HRTIM_TIMDEADTIMEINSERTION_DISABLED;
 800287a:	2300      	movs	r3, #0
 800287c:	66fb      	str	r3, [r7, #108]	; 0x6c
  pTimerCfg.DelayedProtectionMode = HRTIM_TIMER_A_B_C_DELAYEDPROTECTION_DISABLED;
 800287e:	2300      	movs	r3, #0
 8002880:	673b      	str	r3, [r7, #112]	; 0x70
  pTimerCfg.UpdateTrigger = HRTIM_TIMUPDATETRIGGER_NONE;
 8002882:	2300      	movs	r3, #0
 8002884:	677b      	str	r3, [r7, #116]	; 0x74
  pTimerCfg.ResetTrigger = HRTIM_TIMRESETTRIGGER_NONE;
 8002886:	2300      	movs	r3, #0
 8002888:	67bb      	str	r3, [r7, #120]	; 0x78
  pTimerCfg.ResetUpdate = HRTIM_TIMUPDATEONRESET_DISABLED;
 800288a:	2300      	movs	r3, #0
 800288c:	67fb      	str	r3, [r7, #124]	; 0x7c
  if (HAL_HRTIM_WaveformTimerConfig(&hhrtim, HRTIM_TIMERINDEX_TIMER_A, &pTimerCfg) != HAL_OK)
 800288e:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8002892:	461a      	mov	r2, r3
 8002894:	2100      	movs	r1, #0
 8002896:	486c      	ldr	r0, [pc, #432]	; (8002a48 <MX_HRTIM_Init+0x29c>)
 8002898:	f005 fafa 	bl	8007e90 <HAL_HRTIM_WaveformTimerConfig>
 800289c:	4603      	mov	r3, r0
 800289e:	2b00      	cmp	r3, #0
 80028a0:	d001      	beq.n	80028a6 <MX_HRTIM_Init+0xfa>
    Error_Handler();
 80028a2:	f000 fcfb 	bl	800329c <Error_Handler>
  pTimerCfg.InterruptRequests = HRTIM_TIM_IT_CMP2|HRTIM_TIM_IT_CMP3;
 80028a6:	2306      	movs	r3, #6
 80028a8:	62fb      	str	r3, [r7, #44]	; 0x2c
  pTimerCfg.DelayedProtectionMode = HRTIM_TIMER_D_E_DELAYEDPROTECTION_DISABLED;
 80028aa:	2300      	movs	r3, #0
 80028ac:	673b      	str	r3, [r7, #112]	; 0x70
  if (HAL_HRTIM_WaveformTimerConfig(&hhrtim, HRTIM_TIMERINDEX_TIMER_E, &pTimerCfg) != HAL_OK)
 80028ae:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80028b2:	461a      	mov	r2, r3
 80028b4:	2104      	movs	r1, #4
 80028b6:	4864      	ldr	r0, [pc, #400]	; (8002a48 <MX_HRTIM_Init+0x29c>)
 80028b8:	f005 faea 	bl	8007e90 <HAL_HRTIM_WaveformTimerConfig>
 80028bc:	4603      	mov	r3, r0
 80028be:	2b00      	cmp	r3, #0
 80028c0:	d001      	beq.n	80028c6 <MX_HRTIM_Init+0x11a>
    Error_Handler();
 80028c2:	f000 fceb 	bl	800329c <Error_Handler>
  pCompareCfg.CompareValue = PUMP_WIDTH;
 80028c6:	f240 631b 	movw	r3, #1563	; 0x61b
 80028ca:	623b      	str	r3, [r7, #32]
  if (HAL_HRTIM_WaveformCompareConfig(&hhrtim, HRTIM_TIMERINDEX_TIMER_A, HRTIM_COMPAREUNIT_1, &pCompareCfg) != HAL_OK)
 80028cc:	f107 0320 	add.w	r3, r7, #32
 80028d0:	2201      	movs	r2, #1
 80028d2:	2100      	movs	r1, #0
 80028d4:	485c      	ldr	r0, [pc, #368]	; (8002a48 <MX_HRTIM_Init+0x29c>)
 80028d6:	f005 fb4d 	bl	8007f74 <HAL_HRTIM_WaveformCompareConfig>
 80028da:	4603      	mov	r3, r0
 80028dc:	2b00      	cmp	r3, #0
 80028de:	d001      	beq.n	80028e4 <MX_HRTIM_Init+0x138>
    Error_Handler();
 80028e0:	f000 fcdc 	bl	800329c <Error_Handler>
  pCompareCfg.CompareValue = PUMP_WIDTH+(2*MICROWAVE_DELAY)+(2*MICROWAVE_WIDTH)+RAMSEY_TIME;
 80028e4:	f244 5395 	movw	r3, #17813	; 0x4595
 80028e8:	623b      	str	r3, [r7, #32]
  pCompareCfg.AutoDelayedMode = HRTIM_AUTODELAYEDMODE_REGULAR;
 80028ea:	2300      	movs	r3, #0
 80028ec:	627b      	str	r3, [r7, #36]	; 0x24
  pCompareCfg.AutoDelayedTimeout = 0x0000;
 80028ee:	2300      	movs	r3, #0
 80028f0:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_HRTIM_WaveformCompareConfig(&hhrtim, HRTIM_TIMERINDEX_TIMER_A, HRTIM_COMPAREUNIT_2, &pCompareCfg) != HAL_OK)
 80028f2:	f107 0320 	add.w	r3, r7, #32
 80028f6:	2202      	movs	r2, #2
 80028f8:	2100      	movs	r1, #0
 80028fa:	4853      	ldr	r0, [pc, #332]	; (8002a48 <MX_HRTIM_Init+0x29c>)
 80028fc:	f005 fb3a 	bl	8007f74 <HAL_HRTIM_WaveformCompareConfig>
 8002900:	4603      	mov	r3, r0
 8002902:	2b00      	cmp	r3, #0
 8002904:	d001      	beq.n	800290a <MX_HRTIM_Init+0x15e>
    Error_Handler();
 8002906:	f000 fcc9 	bl	800329c <Error_Handler>
  pCompareCfg.CompareValue = PUMP_WIDTH+MICROWAVE_DELAY+MICROWAVE_WIDTH;
 800290a:	f640 536e 	movw	r3, #3438	; 0xd6e
 800290e:	623b      	str	r3, [r7, #32]
  if (HAL_HRTIM_WaveformCompareConfig(&hhrtim, HRTIM_TIMERINDEX_TIMER_E, HRTIM_COMPAREUNIT_2, &pCompareCfg) != HAL_OK)
 8002910:	f107 0320 	add.w	r3, r7, #32
 8002914:	2202      	movs	r2, #2
 8002916:	2104      	movs	r1, #4
 8002918:	484b      	ldr	r0, [pc, #300]	; (8002a48 <MX_HRTIM_Init+0x29c>)
 800291a:	f005 fb2b 	bl	8007f74 <HAL_HRTIM_WaveformCompareConfig>
 800291e:	4603      	mov	r3, r0
 8002920:	2b00      	cmp	r3, #0
 8002922:	d001      	beq.n	8002928 <MX_HRTIM_Init+0x17c>
    Error_Handler();
 8002924:	f000 fcba 	bl	800329c <Error_Handler>
  pCompareCfg.CompareValue = PUMP_WIDTH+(2*MICROWAVE_DELAY)+(2*MICROWAVE_WIDTH)+RAMSEY_TIME+PROBE_WIDTH;
 8002928:	f644 0306 	movw	r3, #18438	; 0x4806
 800292c:	623b      	str	r3, [r7, #32]
  if (HAL_HRTIM_WaveformCompareConfig(&hhrtim, HRTIM_TIMERINDEX_TIMER_A, HRTIM_COMPAREUNIT_3, &pCompareCfg) != HAL_OK)
 800292e:	f107 0320 	add.w	r3, r7, #32
 8002932:	2204      	movs	r2, #4
 8002934:	2100      	movs	r1, #0
 8002936:	4844      	ldr	r0, [pc, #272]	; (8002a48 <MX_HRTIM_Init+0x29c>)
 8002938:	f005 fb1c 	bl	8007f74 <HAL_HRTIM_WaveformCompareConfig>
 800293c:	4603      	mov	r3, r0
 800293e:	2b00      	cmp	r3, #0
 8002940:	d001      	beq.n	8002946 <MX_HRTIM_Init+0x19a>
    Error_Handler();
 8002942:	f000 fcab 	bl	800329c <Error_Handler>
  pCompareCfg.CompareValue = PUMP_WIDTH+MICROWAVE_DELAY+MICROWAVE_WIDTH+RAMSEY_TIME+MICROWAVE_WIDTH;
 8002946:	f244 435d 	movw	r3, #17501	; 0x445d
 800294a:	623b      	str	r3, [r7, #32]
  if (HAL_HRTIM_WaveformCompareConfig(&hhrtim, HRTIM_TIMERINDEX_TIMER_E, HRTIM_COMPAREUNIT_4, &pCompareCfg) != HAL_OK)
 800294c:	f107 0320 	add.w	r3, r7, #32
 8002950:	2208      	movs	r2, #8
 8002952:	2104      	movs	r1, #4
 8002954:	483c      	ldr	r0, [pc, #240]	; (8002a48 <MX_HRTIM_Init+0x29c>)
 8002956:	f005 fb0d 	bl	8007f74 <HAL_HRTIM_WaveformCompareConfig>
 800295a:	4603      	mov	r3, r0
 800295c:	2b00      	cmp	r3, #0
 800295e:	d001      	beq.n	8002964 <MX_HRTIM_Init+0x1b8>
    Error_Handler();
 8002960:	f000 fc9c 	bl	800329c <Error_Handler>
  pOutputCfg.Polarity = HRTIM_OUTPUTPOLARITY_LOW;
 8002964:	2302      	movs	r3, #2
 8002966:	603b      	str	r3, [r7, #0]
  pOutputCfg.SetSource = HRTIM_OUTPUTSET_TIMCMP1|HRTIM_OUTPUTSET_TIMCMP3;
 8002968:	2328      	movs	r3, #40	; 0x28
 800296a:	607b      	str	r3, [r7, #4]
  pOutputCfg.ResetSource = HRTIM_OUTPUTRESET_TIMCMP2|HRTIM_OUTPUTRESET_TIMPER;
 800296c:	2314      	movs	r3, #20
 800296e:	60bb      	str	r3, [r7, #8]
  pOutputCfg.IdleMode = HRTIM_OUTPUTIDLEMODE_NONE;
 8002970:	2300      	movs	r3, #0
 8002972:	60fb      	str	r3, [r7, #12]
  pOutputCfg.IdleLevel = HRTIM_OUTPUTIDLELEVEL_ACTIVE;
 8002974:	2308      	movs	r3, #8
 8002976:	613b      	str	r3, [r7, #16]
  pOutputCfg.FaultLevel = HRTIM_OUTPUTFAULTLEVEL_NONE;
 8002978:	2300      	movs	r3, #0
 800297a:	617b      	str	r3, [r7, #20]
  pOutputCfg.ChopperModeEnable = HRTIM_OUTPUTCHOPPERMODE_DISABLED;
 800297c:	2300      	movs	r3, #0
 800297e:	61bb      	str	r3, [r7, #24]
  pOutputCfg.BurstModeEntryDelayed = HRTIM_OUTPUTBURSTMODEENTRY_REGULAR;
 8002980:	2300      	movs	r3, #0
 8002982:	61fb      	str	r3, [r7, #28]
  if (HAL_HRTIM_WaveformOutputConfig(&hhrtim, HRTIM_TIMERINDEX_TIMER_A, HRTIM_OUTPUT_TA1, &pOutputCfg) != HAL_OK)
 8002984:	463b      	mov	r3, r7
 8002986:	2201      	movs	r2, #1
 8002988:	2100      	movs	r1, #0
 800298a:	482f      	ldr	r0, [pc, #188]	; (8002a48 <MX_HRTIM_Init+0x29c>)
 800298c:	f005 fc60 	bl	8008250 <HAL_HRTIM_WaveformOutputConfig>
 8002990:	4603      	mov	r3, r0
 8002992:	2b00      	cmp	r3, #0
 8002994:	d001      	beq.n	800299a <MX_HRTIM_Init+0x1ee>
    Error_Handler();
 8002996:	f000 fc81 	bl	800329c <Error_Handler>
  pOutputCfg.Polarity = HRTIM_OUTPUTPOLARITY_HIGH;
 800299a:	2300      	movs	r3, #0
 800299c:	603b      	str	r3, [r7, #0]
  pOutputCfg.ResetSource = HRTIM_OUTPUTRESET_TIMCMP2|HRTIM_OUTPUTRESET_TIMCMP4;
 800299e:	2350      	movs	r3, #80	; 0x50
 80029a0:	60bb      	str	r3, [r7, #8]
  pOutputCfg.IdleLevel = HRTIM_OUTPUTIDLELEVEL_INACTIVE;
 80029a2:	2300      	movs	r3, #0
 80029a4:	613b      	str	r3, [r7, #16]
  if (HAL_HRTIM_WaveformOutputConfig(&hhrtim, HRTIM_TIMERINDEX_TIMER_E, HRTIM_OUTPUT_TE1, &pOutputCfg) != HAL_OK)
 80029a6:	463b      	mov	r3, r7
 80029a8:	f44f 7280 	mov.w	r2, #256	; 0x100
 80029ac:	2104      	movs	r1, #4
 80029ae:	4826      	ldr	r0, [pc, #152]	; (8002a48 <MX_HRTIM_Init+0x29c>)
 80029b0:	f005 fc4e 	bl	8008250 <HAL_HRTIM_WaveformOutputConfig>
 80029b4:	4603      	mov	r3, r0
 80029b6:	2b00      	cmp	r3, #0
 80029b8:	d001      	beq.n	80029be <MX_HRTIM_Init+0x212>
    Error_Handler();
 80029ba:	f000 fc6f 	bl	800329c <Error_Handler>
  pOutputCfg.Polarity = HRTIM_OUTPUTPOLARITY_LOW;
 80029be:	2302      	movs	r3, #2
 80029c0:	603b      	str	r3, [r7, #0]
  pOutputCfg.SetSource = HRTIM_OUTPUTSET_TIMCMP3;
 80029c2:	2320      	movs	r3, #32
 80029c4:	607b      	str	r3, [r7, #4]
  pOutputCfg.ResetSource = HRTIM_OUTPUTRESET_TIMCMP2;
 80029c6:	2310      	movs	r3, #16
 80029c8:	60bb      	str	r3, [r7, #8]
  pOutputCfg.IdleLevel = HRTIM_OUTPUTIDLELEVEL_ACTIVE;
 80029ca:	2308      	movs	r3, #8
 80029cc:	613b      	str	r3, [r7, #16]
  if (HAL_HRTIM_WaveformOutputConfig(&hhrtim, HRTIM_TIMERINDEX_TIMER_A, HRTIM_OUTPUT_TA2, &pOutputCfg) != HAL_OK)
 80029ce:	463b      	mov	r3, r7
 80029d0:	2202      	movs	r2, #2
 80029d2:	2100      	movs	r1, #0
 80029d4:	481c      	ldr	r0, [pc, #112]	; (8002a48 <MX_HRTIM_Init+0x29c>)
 80029d6:	f005 fc3b 	bl	8008250 <HAL_HRTIM_WaveformOutputConfig>
 80029da:	4603      	mov	r3, r0
 80029dc:	2b00      	cmp	r3, #0
 80029de:	d001      	beq.n	80029e4 <MX_HRTIM_Init+0x238>
    Error_Handler();
 80029e0:	f000 fc5c 	bl	800329c <Error_Handler>
  if (HAL_HRTIM_TimeBaseConfig(&hhrtim, HRTIM_TIMERINDEX_TIMER_E, &pTimeBaseCfg) != HAL_OK)
 80029e4:	f107 0380 	add.w	r3, r7, #128	; 0x80
 80029e8:	461a      	mov	r2, r3
 80029ea:	2104      	movs	r1, #4
 80029ec:	4816      	ldr	r0, [pc, #88]	; (8002a48 <MX_HRTIM_Init+0x29c>)
 80029ee:	f005 fa27 	bl	8007e40 <HAL_HRTIM_TimeBaseConfig>
 80029f2:	4603      	mov	r3, r0
 80029f4:	2b00      	cmp	r3, #0
 80029f6:	d001      	beq.n	80029fc <MX_HRTIM_Init+0x250>
    Error_Handler();
 80029f8:	f000 fc50 	bl	800329c <Error_Handler>
  pCompareCfg.CompareValue = PUMP_WIDTH+MICROWAVE_DELAY;
 80029fc:	f240 7353 	movw	r3, #1875	; 0x753
 8002a00:	623b      	str	r3, [r7, #32]
  if (HAL_HRTIM_WaveformCompareConfig(&hhrtim, HRTIM_TIMERINDEX_TIMER_E, HRTIM_COMPAREUNIT_1, &pCompareCfg) != HAL_OK)
 8002a02:	f107 0320 	add.w	r3, r7, #32
 8002a06:	2201      	movs	r2, #1
 8002a08:	2104      	movs	r1, #4
 8002a0a:	480f      	ldr	r0, [pc, #60]	; (8002a48 <MX_HRTIM_Init+0x29c>)
 8002a0c:	f005 fab2 	bl	8007f74 <HAL_HRTIM_WaveformCompareConfig>
 8002a10:	4603      	mov	r3, r0
 8002a12:	2b00      	cmp	r3, #0
 8002a14:	d001      	beq.n	8002a1a <MX_HRTIM_Init+0x26e>
    Error_Handler();
 8002a16:	f000 fc41 	bl	800329c <Error_Handler>
  pCompareCfg.CompareValue = PUMP_WIDTH+MICROWAVE_DELAY+MICROWAVE_WIDTH+RAMSEY_TIME;
 8002a1a:	f643 6342 	movw	r3, #15938	; 0x3e42
 8002a1e:	623b      	str	r3, [r7, #32]
  if (HAL_HRTIM_WaveformCompareConfig(&hhrtim, HRTIM_TIMERINDEX_TIMER_E, HRTIM_COMPAREUNIT_3, &pCompareCfg) != HAL_OK)
 8002a20:	f107 0320 	add.w	r3, r7, #32
 8002a24:	2204      	movs	r2, #4
 8002a26:	2104      	movs	r1, #4
 8002a28:	4807      	ldr	r0, [pc, #28]	; (8002a48 <MX_HRTIM_Init+0x29c>)
 8002a2a:	f005 faa3 	bl	8007f74 <HAL_HRTIM_WaveformCompareConfig>
 8002a2e:	4603      	mov	r3, r0
 8002a30:	2b00      	cmp	r3, #0
 8002a32:	d001      	beq.n	8002a38 <MX_HRTIM_Init+0x28c>
    Error_Handler();
 8002a34:	f000 fc32 	bl	800329c <Error_Handler>
  HAL_HRTIM_MspPostInit(&hhrtim);
 8002a38:	4803      	ldr	r0, [pc, #12]	; (8002a48 <MX_HRTIM_Init+0x29c>)
 8002a3a:	f000 fd71 	bl	8003520 <HAL_HRTIM_MspPostInit>
}
 8002a3e:	bf00      	nop
 8002a40:	3790      	adds	r7, #144	; 0x90
 8002a42:	46bd      	mov	sp, r7
 8002a44:	bd80      	pop	{r7, pc}
 8002a46:	bf00      	nop
 8002a48:	200002d0 	.word	0x200002d0
 8002a4c:	40017400 	.word	0x40017400

08002a50 <MX_LPTIM1_Init>:
{
 8002a50:	b580      	push	{r7, lr}
 8002a52:	af00      	add	r7, sp, #0
  hlptim1.Instance = LPTIM1;
 8002a54:	4b13      	ldr	r3, [pc, #76]	; (8002aa4 <MX_LPTIM1_Init+0x54>)
 8002a56:	4a14      	ldr	r2, [pc, #80]	; (8002aa8 <MX_LPTIM1_Init+0x58>)
 8002a58:	601a      	str	r2, [r3, #0]
  hlptim1.Init.Clock.Source = LPTIM_CLOCKSOURCE_APBCLOCK_LPOSC;
 8002a5a:	4b12      	ldr	r3, [pc, #72]	; (8002aa4 <MX_LPTIM1_Init+0x54>)
 8002a5c:	2200      	movs	r2, #0
 8002a5e:	605a      	str	r2, [r3, #4]
  hlptim1.Init.Clock.Prescaler = LPTIM_PRESCALER_DIV32;
 8002a60:	4b10      	ldr	r3, [pc, #64]	; (8002aa4 <MX_LPTIM1_Init+0x54>)
 8002a62:	f44f 6220 	mov.w	r2, #2560	; 0xa00
 8002a66:	609a      	str	r2, [r3, #8]
  hlptim1.Init.Trigger.Source = LPTIM_TRIGSOURCE_SOFTWARE;
 8002a68:	4b0e      	ldr	r3, [pc, #56]	; (8002aa4 <MX_LPTIM1_Init+0x54>)
 8002a6a:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8002a6e:	615a      	str	r2, [r3, #20]
  hlptim1.Init.OutputPolarity = LPTIM_OUTPUTPOLARITY_HIGH;
 8002a70:	4b0c      	ldr	r3, [pc, #48]	; (8002aa4 <MX_LPTIM1_Init+0x54>)
 8002a72:	2200      	movs	r2, #0
 8002a74:	621a      	str	r2, [r3, #32]
  hlptim1.Init.UpdateMode = LPTIM_UPDATE_IMMEDIATE;
 8002a76:	4b0b      	ldr	r3, [pc, #44]	; (8002aa4 <MX_LPTIM1_Init+0x54>)
 8002a78:	2200      	movs	r2, #0
 8002a7a:	625a      	str	r2, [r3, #36]	; 0x24
  hlptim1.Init.CounterSource = LPTIM_COUNTERSOURCE_INTERNAL;
 8002a7c:	4b09      	ldr	r3, [pc, #36]	; (8002aa4 <MX_LPTIM1_Init+0x54>)
 8002a7e:	2200      	movs	r2, #0
 8002a80:	629a      	str	r2, [r3, #40]	; 0x28
  hlptim1.Init.Input1Source = LPTIM_INPUT1SOURCE_GPIO;
 8002a82:	4b08      	ldr	r3, [pc, #32]	; (8002aa4 <MX_LPTIM1_Init+0x54>)
 8002a84:	2200      	movs	r2, #0
 8002a86:	62da      	str	r2, [r3, #44]	; 0x2c
  hlptim1.Init.Input2Source = LPTIM_INPUT2SOURCE_GPIO;
 8002a88:	4b06      	ldr	r3, [pc, #24]	; (8002aa4 <MX_LPTIM1_Init+0x54>)
 8002a8a:	2200      	movs	r2, #0
 8002a8c:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_LPTIM_Init(&hlptim1) != HAL_OK)
 8002a8e:	4805      	ldr	r0, [pc, #20]	; (8002aa4 <MX_LPTIM1_Init+0x54>)
 8002a90:	f006 fb8c 	bl	80091ac <HAL_LPTIM_Init>
 8002a94:	4603      	mov	r3, r0
 8002a96:	2b00      	cmp	r3, #0
 8002a98:	d001      	beq.n	8002a9e <MX_LPTIM1_Init+0x4e>
    Error_Handler();
 8002a9a:	f000 fbff 	bl	800329c <Error_Handler>
}
 8002a9e:	bf00      	nop
 8002aa0:	bd80      	pop	{r7, pc}
 8002aa2:	bf00      	nop
 8002aa4:	200003ac 	.word	0x200003ac
 8002aa8:	40002400 	.word	0x40002400

08002aac <MX_TIM1_Init>:
{
 8002aac:	b580      	push	{r7, lr}
 8002aae:	b088      	sub	sp, #32
 8002ab0:	af00      	add	r7, sp, #0
  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8002ab2:	f107 0310 	add.w	r3, r7, #16
 8002ab6:	2200      	movs	r2, #0
 8002ab8:	601a      	str	r2, [r3, #0]
 8002aba:	605a      	str	r2, [r3, #4]
 8002abc:	609a      	str	r2, [r3, #8]
 8002abe:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002ac0:	1d3b      	adds	r3, r7, #4
 8002ac2:	2200      	movs	r2, #0
 8002ac4:	601a      	str	r2, [r3, #0]
 8002ac6:	605a      	str	r2, [r3, #4]
 8002ac8:	609a      	str	r2, [r3, #8]
  htim1.Instance = TIM1;
 8002aca:	4b20      	ldr	r3, [pc, #128]	; (8002b4c <MX_TIM1_Init+0xa0>)
 8002acc:	4a20      	ldr	r2, [pc, #128]	; (8002b50 <MX_TIM1_Init+0xa4>)
 8002ace:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 1249;
 8002ad0:	4b1e      	ldr	r3, [pc, #120]	; (8002b4c <MX_TIM1_Init+0xa0>)
 8002ad2:	f240 42e1 	movw	r2, #1249	; 0x4e1
 8002ad6:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002ad8:	4b1c      	ldr	r3, [pc, #112]	; (8002b4c <MX_TIM1_Init+0xa0>)
 8002ada:	2200      	movs	r2, #0
 8002adc:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 65535;
 8002ade:	4b1b      	ldr	r3, [pc, #108]	; (8002b4c <MX_TIM1_Init+0xa0>)
 8002ae0:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8002ae4:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002ae6:	4b19      	ldr	r3, [pc, #100]	; (8002b4c <MX_TIM1_Init+0xa0>)
 8002ae8:	2200      	movs	r2, #0
 8002aea:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8002aec:	4b17      	ldr	r3, [pc, #92]	; (8002b4c <MX_TIM1_Init+0xa0>)
 8002aee:	2200      	movs	r2, #0
 8002af0:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002af2:	4b16      	ldr	r3, [pc, #88]	; (8002b4c <MX_TIM1_Init+0xa0>)
 8002af4:	2200      	movs	r2, #0
 8002af6:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8002af8:	4814      	ldr	r0, [pc, #80]	; (8002b4c <MX_TIM1_Init+0xa0>)
 8002afa:	f00a fd05 	bl	800d508 <HAL_TIM_Base_Init>
 8002afe:	4603      	mov	r3, r0
 8002b00:	2b00      	cmp	r3, #0
 8002b02:	d001      	beq.n	8002b08 <MX_TIM1_Init+0x5c>
    Error_Handler();
 8002b04:	f000 fbca 	bl	800329c <Error_Handler>
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8002b08:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002b0c:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8002b0e:	f107 0310 	add.w	r3, r7, #16
 8002b12:	4619      	mov	r1, r3
 8002b14:	480d      	ldr	r0, [pc, #52]	; (8002b4c <MX_TIM1_Init+0xa0>)
 8002b16:	f00a fd4f 	bl	800d5b8 <HAL_TIM_ConfigClockSource>
 8002b1a:	4603      	mov	r3, r0
 8002b1c:	2b00      	cmp	r3, #0
 8002b1e:	d001      	beq.n	8002b24 <MX_TIM1_Init+0x78>
    Error_Handler();
 8002b20:	f000 fbbc 	bl	800329c <Error_Handler>
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002b24:	2300      	movs	r3, #0
 8002b26:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 8002b28:	2300      	movs	r3, #0
 8002b2a:	60bb      	str	r3, [r7, #8]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002b2c:	2300      	movs	r3, #0
 8002b2e:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8002b30:	1d3b      	adds	r3, r7, #4
 8002b32:	4619      	mov	r1, r3
 8002b34:	4805      	ldr	r0, [pc, #20]	; (8002b4c <MX_TIM1_Init+0xa0>)
 8002b36:	f00a ff6f 	bl	800da18 <HAL_TIMEx_MasterConfigSynchronization>
 8002b3a:	4603      	mov	r3, r0
 8002b3c:	2b00      	cmp	r3, #0
 8002b3e:	d001      	beq.n	8002b44 <MX_TIM1_Init+0x98>
    Error_Handler();
 8002b40:	f000 fbac 	bl	800329c <Error_Handler>
}
 8002b44:	bf00      	nop
 8002b46:	3720      	adds	r7, #32
 8002b48:	46bd      	mov	sp, r7
 8002b4a:	bd80      	pop	{r7, pc}
 8002b4c:	200003e4 	.word	0x200003e4
 8002b50:	40010000 	.word	0x40010000

08002b54 <MX_TIM2_Init>:
{
 8002b54:	b580      	push	{r7, lr}
 8002b56:	b088      	sub	sp, #32
 8002b58:	af00      	add	r7, sp, #0
  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8002b5a:	f107 0310 	add.w	r3, r7, #16
 8002b5e:	2200      	movs	r2, #0
 8002b60:	601a      	str	r2, [r3, #0]
 8002b62:	605a      	str	r2, [r3, #4]
 8002b64:	609a      	str	r2, [r3, #8]
 8002b66:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002b68:	1d3b      	adds	r3, r7, #4
 8002b6a:	2200      	movs	r2, #0
 8002b6c:	601a      	str	r2, [r3, #0]
 8002b6e:	605a      	str	r2, [r3, #4]
 8002b70:	609a      	str	r2, [r3, #8]
  htim2.Instance = TIM2;
 8002b72:	4b1e      	ldr	r3, [pc, #120]	; (8002bec <MX_TIM2_Init+0x98>)
 8002b74:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8002b78:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 124;
 8002b7a:	4b1c      	ldr	r3, [pc, #112]	; (8002bec <MX_TIM2_Init+0x98>)
 8002b7c:	227c      	movs	r2, #124	; 0x7c
 8002b7e:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002b80:	4b1a      	ldr	r3, [pc, #104]	; (8002bec <MX_TIM2_Init+0x98>)
 8002b82:	2200      	movs	r2, #0
 8002b84:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 4294967295;
 8002b86:	4b19      	ldr	r3, [pc, #100]	; (8002bec <MX_TIM2_Init+0x98>)
 8002b88:	f04f 32ff 	mov.w	r2, #4294967295
 8002b8c:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002b8e:	4b17      	ldr	r3, [pc, #92]	; (8002bec <MX_TIM2_Init+0x98>)
 8002b90:	2200      	movs	r2, #0
 8002b92:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002b94:	4b15      	ldr	r3, [pc, #84]	; (8002bec <MX_TIM2_Init+0x98>)
 8002b96:	2200      	movs	r2, #0
 8002b98:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8002b9a:	4814      	ldr	r0, [pc, #80]	; (8002bec <MX_TIM2_Init+0x98>)
 8002b9c:	f00a fcb4 	bl	800d508 <HAL_TIM_Base_Init>
 8002ba0:	4603      	mov	r3, r0
 8002ba2:	2b00      	cmp	r3, #0
 8002ba4:	d001      	beq.n	8002baa <MX_TIM2_Init+0x56>
    Error_Handler();
 8002ba6:	f000 fb79 	bl	800329c <Error_Handler>
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8002baa:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002bae:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8002bb0:	f107 0310 	add.w	r3, r7, #16
 8002bb4:	4619      	mov	r1, r3
 8002bb6:	480d      	ldr	r0, [pc, #52]	; (8002bec <MX_TIM2_Init+0x98>)
 8002bb8:	f00a fcfe 	bl	800d5b8 <HAL_TIM_ConfigClockSource>
 8002bbc:	4603      	mov	r3, r0
 8002bbe:	2b00      	cmp	r3, #0
 8002bc0:	d001      	beq.n	8002bc6 <MX_TIM2_Init+0x72>
    Error_Handler();
 8002bc2:	f000 fb6b 	bl	800329c <Error_Handler>
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002bc6:	2300      	movs	r3, #0
 8002bc8:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002bca:	2300      	movs	r3, #0
 8002bcc:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8002bce:	1d3b      	adds	r3, r7, #4
 8002bd0:	4619      	mov	r1, r3
 8002bd2:	4806      	ldr	r0, [pc, #24]	; (8002bec <MX_TIM2_Init+0x98>)
 8002bd4:	f00a ff20 	bl	800da18 <HAL_TIMEx_MasterConfigSynchronization>
 8002bd8:	4603      	mov	r3, r0
 8002bda:	2b00      	cmp	r3, #0
 8002bdc:	d001      	beq.n	8002be2 <MX_TIM2_Init+0x8e>
    Error_Handler();
 8002bde:	f000 fb5d 	bl	800329c <Error_Handler>
}
 8002be2:	bf00      	nop
 8002be4:	3720      	adds	r7, #32
 8002be6:	46bd      	mov	sp, r7
 8002be8:	bd80      	pop	{r7, pc}
 8002bea:	bf00      	nop
 8002bec:	20000430 	.word	0x20000430

08002bf0 <MX_TIM3_Init>:
{
 8002bf0:	b580      	push	{r7, lr}
 8002bf2:	b088      	sub	sp, #32
 8002bf4:	af00      	add	r7, sp, #0
  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8002bf6:	f107 0310 	add.w	r3, r7, #16
 8002bfa:	2200      	movs	r2, #0
 8002bfc:	601a      	str	r2, [r3, #0]
 8002bfe:	605a      	str	r2, [r3, #4]
 8002c00:	609a      	str	r2, [r3, #8]
 8002c02:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002c04:	1d3b      	adds	r3, r7, #4
 8002c06:	2200      	movs	r2, #0
 8002c08:	601a      	str	r2, [r3, #0]
 8002c0a:	605a      	str	r2, [r3, #4]
 8002c0c:	609a      	str	r2, [r3, #8]
  htim3.Instance = TIM3;
 8002c0e:	4b1d      	ldr	r3, [pc, #116]	; (8002c84 <MX_TIM3_Init+0x94>)
 8002c10:	4a1d      	ldr	r2, [pc, #116]	; (8002c88 <MX_TIM3_Init+0x98>)
 8002c12:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 124;
 8002c14:	4b1b      	ldr	r3, [pc, #108]	; (8002c84 <MX_TIM3_Init+0x94>)
 8002c16:	227c      	movs	r2, #124	; 0x7c
 8002c18:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002c1a:	4b1a      	ldr	r3, [pc, #104]	; (8002c84 <MX_TIM3_Init+0x94>)
 8002c1c:	2200      	movs	r2, #0
 8002c1e:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 65535;
 8002c20:	4b18      	ldr	r3, [pc, #96]	; (8002c84 <MX_TIM3_Init+0x94>)
 8002c22:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8002c26:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002c28:	4b16      	ldr	r3, [pc, #88]	; (8002c84 <MX_TIM3_Init+0x94>)
 8002c2a:	2200      	movs	r2, #0
 8002c2c:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002c2e:	4b15      	ldr	r3, [pc, #84]	; (8002c84 <MX_TIM3_Init+0x94>)
 8002c30:	2200      	movs	r2, #0
 8002c32:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8002c34:	4813      	ldr	r0, [pc, #76]	; (8002c84 <MX_TIM3_Init+0x94>)
 8002c36:	f00a fc67 	bl	800d508 <HAL_TIM_Base_Init>
 8002c3a:	4603      	mov	r3, r0
 8002c3c:	2b00      	cmp	r3, #0
 8002c3e:	d001      	beq.n	8002c44 <MX_TIM3_Init+0x54>
    Error_Handler();
 8002c40:	f000 fb2c 	bl	800329c <Error_Handler>
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8002c44:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002c48:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8002c4a:	f107 0310 	add.w	r3, r7, #16
 8002c4e:	4619      	mov	r1, r3
 8002c50:	480c      	ldr	r0, [pc, #48]	; (8002c84 <MX_TIM3_Init+0x94>)
 8002c52:	f00a fcb1 	bl	800d5b8 <HAL_TIM_ConfigClockSource>
 8002c56:	4603      	mov	r3, r0
 8002c58:	2b00      	cmp	r3, #0
 8002c5a:	d001      	beq.n	8002c60 <MX_TIM3_Init+0x70>
    Error_Handler();
 8002c5c:	f000 fb1e 	bl	800329c <Error_Handler>
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002c60:	2300      	movs	r3, #0
 8002c62:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002c64:	2300      	movs	r3, #0
 8002c66:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8002c68:	1d3b      	adds	r3, r7, #4
 8002c6a:	4619      	mov	r1, r3
 8002c6c:	4805      	ldr	r0, [pc, #20]	; (8002c84 <MX_TIM3_Init+0x94>)
 8002c6e:	f00a fed3 	bl	800da18 <HAL_TIMEx_MasterConfigSynchronization>
 8002c72:	4603      	mov	r3, r0
 8002c74:	2b00      	cmp	r3, #0
 8002c76:	d001      	beq.n	8002c7c <MX_TIM3_Init+0x8c>
    Error_Handler();
 8002c78:	f000 fb10 	bl	800329c <Error_Handler>
}
 8002c7c:	bf00      	nop
 8002c7e:	3720      	adds	r7, #32
 8002c80:	46bd      	mov	sp, r7
 8002c82:	bd80      	pop	{r7, pc}
 8002c84:	2000047c 	.word	0x2000047c
 8002c88:	40000400 	.word	0x40000400

08002c8c <MX_TIM4_Init>:
{
 8002c8c:	b580      	push	{r7, lr}
 8002c8e:	b088      	sub	sp, #32
 8002c90:	af00      	add	r7, sp, #0
  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8002c92:	f107 0310 	add.w	r3, r7, #16
 8002c96:	2200      	movs	r2, #0
 8002c98:	601a      	str	r2, [r3, #0]
 8002c9a:	605a      	str	r2, [r3, #4]
 8002c9c:	609a      	str	r2, [r3, #8]
 8002c9e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002ca0:	1d3b      	adds	r3, r7, #4
 8002ca2:	2200      	movs	r2, #0
 8002ca4:	601a      	str	r2, [r3, #0]
 8002ca6:	605a      	str	r2, [r3, #4]
 8002ca8:	609a      	str	r2, [r3, #8]
  htim4.Instance = TIM4;
 8002caa:	4b1e      	ldr	r3, [pc, #120]	; (8002d24 <MX_TIM4_Init+0x98>)
 8002cac:	4a1e      	ldr	r2, [pc, #120]	; (8002d28 <MX_TIM4_Init+0x9c>)
 8002cae:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 62499;
 8002cb0:	4b1c      	ldr	r3, [pc, #112]	; (8002d24 <MX_TIM4_Init+0x98>)
 8002cb2:	f24f 4223 	movw	r2, #62499	; 0xf423
 8002cb6:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002cb8:	4b1a      	ldr	r3, [pc, #104]	; (8002d24 <MX_TIM4_Init+0x98>)
 8002cba:	2200      	movs	r2, #0
 8002cbc:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 65535;
 8002cbe:	4b19      	ldr	r3, [pc, #100]	; (8002d24 <MX_TIM4_Init+0x98>)
 8002cc0:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8002cc4:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002cc6:	4b17      	ldr	r3, [pc, #92]	; (8002d24 <MX_TIM4_Init+0x98>)
 8002cc8:	2200      	movs	r2, #0
 8002cca:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002ccc:	4b15      	ldr	r3, [pc, #84]	; (8002d24 <MX_TIM4_Init+0x98>)
 8002cce:	2200      	movs	r2, #0
 8002cd0:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim4) != HAL_OK)
 8002cd2:	4814      	ldr	r0, [pc, #80]	; (8002d24 <MX_TIM4_Init+0x98>)
 8002cd4:	f00a fc18 	bl	800d508 <HAL_TIM_Base_Init>
 8002cd8:	4603      	mov	r3, r0
 8002cda:	2b00      	cmp	r3, #0
 8002cdc:	d001      	beq.n	8002ce2 <MX_TIM4_Init+0x56>
    Error_Handler();
 8002cde:	f000 fadd 	bl	800329c <Error_Handler>
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8002ce2:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002ce6:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim4, &sClockSourceConfig) != HAL_OK)
 8002ce8:	f107 0310 	add.w	r3, r7, #16
 8002cec:	4619      	mov	r1, r3
 8002cee:	480d      	ldr	r0, [pc, #52]	; (8002d24 <MX_TIM4_Init+0x98>)
 8002cf0:	f00a fc62 	bl	800d5b8 <HAL_TIM_ConfigClockSource>
 8002cf4:	4603      	mov	r3, r0
 8002cf6:	2b00      	cmp	r3, #0
 8002cf8:	d001      	beq.n	8002cfe <MX_TIM4_Init+0x72>
    Error_Handler();
 8002cfa:	f000 facf 	bl	800329c <Error_Handler>
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002cfe:	2300      	movs	r3, #0
 8002d00:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002d02:	2300      	movs	r3, #0
 8002d04:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 8002d06:	1d3b      	adds	r3, r7, #4
 8002d08:	4619      	mov	r1, r3
 8002d0a:	4806      	ldr	r0, [pc, #24]	; (8002d24 <MX_TIM4_Init+0x98>)
 8002d0c:	f00a fe84 	bl	800da18 <HAL_TIMEx_MasterConfigSynchronization>
 8002d10:	4603      	mov	r3, r0
 8002d12:	2b00      	cmp	r3, #0
 8002d14:	d001      	beq.n	8002d1a <MX_TIM4_Init+0x8e>
    Error_Handler();
 8002d16:	f000 fac1 	bl	800329c <Error_Handler>
}
 8002d1a:	bf00      	nop
 8002d1c:	3720      	adds	r7, #32
 8002d1e:	46bd      	mov	sp, r7
 8002d20:	bd80      	pop	{r7, pc}
 8002d22:	bf00      	nop
 8002d24:	200004c8 	.word	0x200004c8
 8002d28:	40000800 	.word	0x40000800

08002d2c <MX_TIM5_Init>:
{
 8002d2c:	b580      	push	{r7, lr}
 8002d2e:	b088      	sub	sp, #32
 8002d30:	af00      	add	r7, sp, #0
  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8002d32:	f107 0310 	add.w	r3, r7, #16
 8002d36:	2200      	movs	r2, #0
 8002d38:	601a      	str	r2, [r3, #0]
 8002d3a:	605a      	str	r2, [r3, #4]
 8002d3c:	609a      	str	r2, [r3, #8]
 8002d3e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002d40:	1d3b      	adds	r3, r7, #4
 8002d42:	2200      	movs	r2, #0
 8002d44:	601a      	str	r2, [r3, #0]
 8002d46:	605a      	str	r2, [r3, #4]
 8002d48:	609a      	str	r2, [r3, #8]
  htim5.Instance = TIM5;
 8002d4a:	4b1d      	ldr	r3, [pc, #116]	; (8002dc0 <MX_TIM5_Init+0x94>)
 8002d4c:	4a1d      	ldr	r2, [pc, #116]	; (8002dc4 <MX_TIM5_Init+0x98>)
 8002d4e:	601a      	str	r2, [r3, #0]
  htim5.Init.Prescaler = 124;
 8002d50:	4b1b      	ldr	r3, [pc, #108]	; (8002dc0 <MX_TIM5_Init+0x94>)
 8002d52:	227c      	movs	r2, #124	; 0x7c
 8002d54:	605a      	str	r2, [r3, #4]
  htim5.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002d56:	4b1a      	ldr	r3, [pc, #104]	; (8002dc0 <MX_TIM5_Init+0x94>)
 8002d58:	2200      	movs	r2, #0
 8002d5a:	609a      	str	r2, [r3, #8]
  htim5.Init.Period = 4294967295;
 8002d5c:	4b18      	ldr	r3, [pc, #96]	; (8002dc0 <MX_TIM5_Init+0x94>)
 8002d5e:	f04f 32ff 	mov.w	r2, #4294967295
 8002d62:	60da      	str	r2, [r3, #12]
  htim5.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002d64:	4b16      	ldr	r3, [pc, #88]	; (8002dc0 <MX_TIM5_Init+0x94>)
 8002d66:	2200      	movs	r2, #0
 8002d68:	611a      	str	r2, [r3, #16]
  htim5.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002d6a:	4b15      	ldr	r3, [pc, #84]	; (8002dc0 <MX_TIM5_Init+0x94>)
 8002d6c:	2200      	movs	r2, #0
 8002d6e:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim5) != HAL_OK)
 8002d70:	4813      	ldr	r0, [pc, #76]	; (8002dc0 <MX_TIM5_Init+0x94>)
 8002d72:	f00a fbc9 	bl	800d508 <HAL_TIM_Base_Init>
 8002d76:	4603      	mov	r3, r0
 8002d78:	2b00      	cmp	r3, #0
 8002d7a:	d001      	beq.n	8002d80 <MX_TIM5_Init+0x54>
    Error_Handler();
 8002d7c:	f000 fa8e 	bl	800329c <Error_Handler>
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8002d80:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002d84:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim5, &sClockSourceConfig) != HAL_OK)
 8002d86:	f107 0310 	add.w	r3, r7, #16
 8002d8a:	4619      	mov	r1, r3
 8002d8c:	480c      	ldr	r0, [pc, #48]	; (8002dc0 <MX_TIM5_Init+0x94>)
 8002d8e:	f00a fc13 	bl	800d5b8 <HAL_TIM_ConfigClockSource>
 8002d92:	4603      	mov	r3, r0
 8002d94:	2b00      	cmp	r3, #0
 8002d96:	d001      	beq.n	8002d9c <MX_TIM5_Init+0x70>
    Error_Handler();
 8002d98:	f000 fa80 	bl	800329c <Error_Handler>
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002d9c:	2300      	movs	r3, #0
 8002d9e:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002da0:	2300      	movs	r3, #0
 8002da2:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim5, &sMasterConfig) != HAL_OK)
 8002da4:	1d3b      	adds	r3, r7, #4
 8002da6:	4619      	mov	r1, r3
 8002da8:	4805      	ldr	r0, [pc, #20]	; (8002dc0 <MX_TIM5_Init+0x94>)
 8002daa:	f00a fe35 	bl	800da18 <HAL_TIMEx_MasterConfigSynchronization>
 8002dae:	4603      	mov	r3, r0
 8002db0:	2b00      	cmp	r3, #0
 8002db2:	d001      	beq.n	8002db8 <MX_TIM5_Init+0x8c>
    Error_Handler();
 8002db4:	f000 fa72 	bl	800329c <Error_Handler>
}
 8002db8:	bf00      	nop
 8002dba:	3720      	adds	r7, #32
 8002dbc:	46bd      	mov	sp, r7
 8002dbe:	bd80      	pop	{r7, pc}
 8002dc0:	20000514 	.word	0x20000514
 8002dc4:	40000c00 	.word	0x40000c00

08002dc8 <MX_USART3_UART_Init>:
{
 8002dc8:	b580      	push	{r7, lr}
 8002dca:	af00      	add	r7, sp, #0
  huart3.Instance = USART3;
 8002dcc:	4b22      	ldr	r3, [pc, #136]	; (8002e58 <MX_USART3_UART_Init+0x90>)
 8002dce:	4a23      	ldr	r2, [pc, #140]	; (8002e5c <MX_USART3_UART_Init+0x94>)
 8002dd0:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 1000000;
 8002dd2:	4b21      	ldr	r3, [pc, #132]	; (8002e58 <MX_USART3_UART_Init+0x90>)
 8002dd4:	4a22      	ldr	r2, [pc, #136]	; (8002e60 <MX_USART3_UART_Init+0x98>)
 8002dd6:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8002dd8:	4b1f      	ldr	r3, [pc, #124]	; (8002e58 <MX_USART3_UART_Init+0x90>)
 8002dda:	2200      	movs	r2, #0
 8002ddc:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8002dde:	4b1e      	ldr	r3, [pc, #120]	; (8002e58 <MX_USART3_UART_Init+0x90>)
 8002de0:	2200      	movs	r2, #0
 8002de2:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8002de4:	4b1c      	ldr	r3, [pc, #112]	; (8002e58 <MX_USART3_UART_Init+0x90>)
 8002de6:	2200      	movs	r2, #0
 8002de8:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8002dea:	4b1b      	ldr	r3, [pc, #108]	; (8002e58 <MX_USART3_UART_Init+0x90>)
 8002dec:	220c      	movs	r2, #12
 8002dee:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8002df0:	4b19      	ldr	r3, [pc, #100]	; (8002e58 <MX_USART3_UART_Init+0x90>)
 8002df2:	2200      	movs	r2, #0
 8002df4:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8002df6:	4b18      	ldr	r3, [pc, #96]	; (8002e58 <MX_USART3_UART_Init+0x90>)
 8002df8:	2200      	movs	r2, #0
 8002dfa:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8002dfc:	4b16      	ldr	r3, [pc, #88]	; (8002e58 <MX_USART3_UART_Init+0x90>)
 8002dfe:	2200      	movs	r2, #0
 8002e00:	621a      	str	r2, [r3, #32]
  huart3.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8002e02:	4b15      	ldr	r3, [pc, #84]	; (8002e58 <MX_USART3_UART_Init+0x90>)
 8002e04:	2200      	movs	r2, #0
 8002e06:	625a      	str	r2, [r3, #36]	; 0x24
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8002e08:	4b13      	ldr	r3, [pc, #76]	; (8002e58 <MX_USART3_UART_Init+0x90>)
 8002e0a:	2200      	movs	r2, #0
 8002e0c:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8002e0e:	4812      	ldr	r0, [pc, #72]	; (8002e58 <MX_USART3_UART_Init+0x90>)
 8002e10:	f00a fe90 	bl	800db34 <HAL_UART_Init>
 8002e14:	4603      	mov	r3, r0
 8002e16:	2b00      	cmp	r3, #0
 8002e18:	d001      	beq.n	8002e1e <MX_USART3_UART_Init+0x56>
    Error_Handler();
 8002e1a:	f000 fa3f 	bl	800329c <Error_Handler>
  if (HAL_UARTEx_SetTxFifoThreshold(&huart3, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8002e1e:	2100      	movs	r1, #0
 8002e20:	480d      	ldr	r0, [pc, #52]	; (8002e58 <MX_USART3_UART_Init+0x90>)
 8002e22:	f00b ff20 	bl	800ec66 <HAL_UARTEx_SetTxFifoThreshold>
 8002e26:	4603      	mov	r3, r0
 8002e28:	2b00      	cmp	r3, #0
 8002e2a:	d001      	beq.n	8002e30 <MX_USART3_UART_Init+0x68>
    Error_Handler();
 8002e2c:	f000 fa36 	bl	800329c <Error_Handler>
  if (HAL_UARTEx_SetRxFifoThreshold(&huart3, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8002e30:	2100      	movs	r1, #0
 8002e32:	4809      	ldr	r0, [pc, #36]	; (8002e58 <MX_USART3_UART_Init+0x90>)
 8002e34:	f00b ff55 	bl	800ece2 <HAL_UARTEx_SetRxFifoThreshold>
 8002e38:	4603      	mov	r3, r0
 8002e3a:	2b00      	cmp	r3, #0
 8002e3c:	d001      	beq.n	8002e42 <MX_USART3_UART_Init+0x7a>
    Error_Handler();
 8002e3e:	f000 fa2d 	bl	800329c <Error_Handler>
  if (HAL_UARTEx_DisableFifoMode(&huart3) != HAL_OK)
 8002e42:	4805      	ldr	r0, [pc, #20]	; (8002e58 <MX_USART3_UART_Init+0x90>)
 8002e44:	f00b fed6 	bl	800ebf4 <HAL_UARTEx_DisableFifoMode>
 8002e48:	4603      	mov	r3, r0
 8002e4a:	2b00      	cmp	r3, #0
 8002e4c:	d001      	beq.n	8002e52 <MX_USART3_UART_Init+0x8a>
    Error_Handler();
 8002e4e:	f000 fa25 	bl	800329c <Error_Handler>
}
 8002e52:	bf00      	nop
 8002e54:	bd80      	pop	{r7, pc}
 8002e56:	bf00      	nop
 8002e58:	20000560 	.word	0x20000560
 8002e5c:	40004800 	.word	0x40004800
 8002e60:	000f4240 	.word	0x000f4240

08002e64 <MX_GPIO_Init>:
{
 8002e64:	b580      	push	{r7, lr}
 8002e66:	b08e      	sub	sp, #56	; 0x38
 8002e68:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002e6a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002e6e:	2200      	movs	r2, #0
 8002e70:	601a      	str	r2, [r3, #0]
 8002e72:	605a      	str	r2, [r3, #4]
 8002e74:	609a      	str	r2, [r3, #8]
 8002e76:	60da      	str	r2, [r3, #12]
 8002e78:	611a      	str	r2, [r3, #16]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8002e7a:	4ba0      	ldr	r3, [pc, #640]	; (80030fc <MX_GPIO_Init+0x298>)
 8002e7c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002e80:	4a9e      	ldr	r2, [pc, #632]	; (80030fc <MX_GPIO_Init+0x298>)
 8002e82:	f043 0310 	orr.w	r3, r3, #16
 8002e86:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8002e8a:	4b9c      	ldr	r3, [pc, #624]	; (80030fc <MX_GPIO_Init+0x298>)
 8002e8c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002e90:	f003 0310 	and.w	r3, r3, #16
 8002e94:	623b      	str	r3, [r7, #32]
 8002e96:	6a3b      	ldr	r3, [r7, #32]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8002e98:	4b98      	ldr	r3, [pc, #608]	; (80030fc <MX_GPIO_Init+0x298>)
 8002e9a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002e9e:	4a97      	ldr	r2, [pc, #604]	; (80030fc <MX_GPIO_Init+0x298>)
 8002ea0:	f043 0304 	orr.w	r3, r3, #4
 8002ea4:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8002ea8:	4b94      	ldr	r3, [pc, #592]	; (80030fc <MX_GPIO_Init+0x298>)
 8002eaa:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002eae:	f003 0304 	and.w	r3, r3, #4
 8002eb2:	61fb      	str	r3, [r7, #28]
 8002eb4:	69fb      	ldr	r3, [r7, #28]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8002eb6:	4b91      	ldr	r3, [pc, #580]	; (80030fc <MX_GPIO_Init+0x298>)
 8002eb8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002ebc:	4a8f      	ldr	r2, [pc, #572]	; (80030fc <MX_GPIO_Init+0x298>)
 8002ebe:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002ec2:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8002ec6:	4b8d      	ldr	r3, [pc, #564]	; (80030fc <MX_GPIO_Init+0x298>)
 8002ec8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002ecc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002ed0:	61bb      	str	r3, [r7, #24]
 8002ed2:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8002ed4:	4b89      	ldr	r3, [pc, #548]	; (80030fc <MX_GPIO_Init+0x298>)
 8002ed6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002eda:	4a88      	ldr	r2, [pc, #544]	; (80030fc <MX_GPIO_Init+0x298>)
 8002edc:	f043 0301 	orr.w	r3, r3, #1
 8002ee0:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8002ee4:	4b85      	ldr	r3, [pc, #532]	; (80030fc <MX_GPIO_Init+0x298>)
 8002ee6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002eea:	f003 0301 	and.w	r3, r3, #1
 8002eee:	617b      	str	r3, [r7, #20]
 8002ef0:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8002ef2:	4b82      	ldr	r3, [pc, #520]	; (80030fc <MX_GPIO_Init+0x298>)
 8002ef4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002ef8:	4a80      	ldr	r2, [pc, #512]	; (80030fc <MX_GPIO_Init+0x298>)
 8002efa:	f043 0302 	orr.w	r3, r3, #2
 8002efe:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8002f02:	4b7e      	ldr	r3, [pc, #504]	; (80030fc <MX_GPIO_Init+0x298>)
 8002f04:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002f08:	f003 0302 	and.w	r3, r3, #2
 8002f0c:	613b      	str	r3, [r7, #16]
 8002f0e:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8002f10:	4b7a      	ldr	r3, [pc, #488]	; (80030fc <MX_GPIO_Init+0x298>)
 8002f12:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002f16:	4a79      	ldr	r2, [pc, #484]	; (80030fc <MX_GPIO_Init+0x298>)
 8002f18:	f043 0320 	orr.w	r3, r3, #32
 8002f1c:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8002f20:	4b76      	ldr	r3, [pc, #472]	; (80030fc <MX_GPIO_Init+0x298>)
 8002f22:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002f26:	f003 0320 	and.w	r3, r3, #32
 8002f2a:	60fb      	str	r3, [r7, #12]
 8002f2c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8002f2e:	4b73      	ldr	r3, [pc, #460]	; (80030fc <MX_GPIO_Init+0x298>)
 8002f30:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002f34:	4a71      	ldr	r2, [pc, #452]	; (80030fc <MX_GPIO_Init+0x298>)
 8002f36:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8002f3a:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8002f3e:	4b6f      	ldr	r3, [pc, #444]	; (80030fc <MX_GPIO_Init+0x298>)
 8002f40:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002f44:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002f48:	60bb      	str	r3, [r7, #8]
 8002f4a:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8002f4c:	4b6b      	ldr	r3, [pc, #428]	; (80030fc <MX_GPIO_Init+0x298>)
 8002f4e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002f52:	4a6a      	ldr	r2, [pc, #424]	; (80030fc <MX_GPIO_Init+0x298>)
 8002f54:	f043 0308 	orr.w	r3, r3, #8
 8002f58:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8002f5c:	4b67      	ldr	r3, [pc, #412]	; (80030fc <MX_GPIO_Init+0x298>)
 8002f5e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002f62:	f003 0308 	and.w	r3, r3, #8
 8002f66:	607b      	str	r3, [r7, #4]
 8002f68:	687b      	ldr	r3, [r7, #4]
  HAL_GPIO_WritePin(GPIOE, ATT_4_Pin|ATT_8_Pin|ATT_16_Pin, GPIO_PIN_SET);
 8002f6a:	2201      	movs	r2, #1
 8002f6c:	2134      	movs	r1, #52	; 0x34
 8002f6e:	4864      	ldr	r0, [pc, #400]	; (8003100 <MX_GPIO_Init+0x29c>)
 8002f70:	f004 fe3e 	bl	8007bf0 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(GPIOB, LD1_Pin|MW_INVALID_Pin|LASER_TUNING_Pin|LD3_Pin
 8002f74:	2200      	movs	r2, #0
 8002f76:	f245 1103 	movw	r1, #20739	; 0x5103
 8002f7a:	4862      	ldr	r0, [pc, #392]	; (8003104 <MX_GPIO_Init+0x2a0>)
 8002f7c:	f004 fe38 	bl	8007bf0 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(SCOPE_TRIG_OUT_GPIO_Port, SCOPE_TRIG_OUT_Pin, GPIO_PIN_RESET);
 8002f80:	2200      	movs	r2, #0
 8002f82:	2101      	movs	r1, #1
 8002f84:	4860      	ldr	r0, [pc, #384]	; (8003108 <MX_GPIO_Init+0x2a4>)
 8002f86:	f004 fe33 	bl	8007bf0 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(USB_OTG_FS_PWR_EN_GPIO_Port, USB_OTG_FS_PWR_EN_Pin, GPIO_PIN_RESET);
 8002f8a:	2200      	movs	r2, #0
 8002f8c:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8002f90:	485e      	ldr	r0, [pc, #376]	; (800310c <MX_GPIO_Init+0x2a8>)
 8002f92:	f004 fe2d 	bl	8007bf0 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(GPIOC, SCLK_Pin|MOSI_Pin|REG_EN_Pin, GPIO_PIN_RESET);
 8002f96:	2200      	movs	r2, #0
 8002f98:	f44f 5198 	mov.w	r1, #4864	; 0x1300
 8002f9c:	485c      	ldr	r0, [pc, #368]	; (8003110 <MX_GPIO_Init+0x2ac>)
 8002f9e:	f004 fe27 	bl	8007bf0 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(SEN_GPIO_Port, SEN_Pin, GPIO_PIN_SET);
 8002fa2:	2201      	movs	r2, #1
 8002fa4:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8002fa8:	4859      	ldr	r0, [pc, #356]	; (8003110 <MX_GPIO_Init+0x2ac>)
 8002faa:	f004 fe21 	bl	8007bf0 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(GPIOD, ATT_2_Pin|ATT_1_Pin|ATT_05_Pin|ATT_025_Pin
 8002fae:	2201      	movs	r2, #1
 8002fb0:	21f8      	movs	r1, #248	; 0xf8
 8002fb2:	4856      	ldr	r0, [pc, #344]	; (800310c <MX_GPIO_Init+0x2a8>)
 8002fb4:	f004 fe1c 	bl	8007bf0 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 8002fb8:	2200      	movs	r2, #0
 8002fba:	2102      	movs	r1, #2
 8002fbc:	4850      	ldr	r0, [pc, #320]	; (8003100 <MX_GPIO_Init+0x29c>)
 8002fbe:	f004 fe17 	bl	8007bf0 <HAL_GPIO_WritePin>
  GPIO_InitStruct.Pin = ATT_4_Pin|ATT_8_Pin|ATT_16_Pin|LD2_Pin;
 8002fc2:	2336      	movs	r3, #54	; 0x36
 8002fc4:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002fc6:	2301      	movs	r3, #1
 8002fc8:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002fca:	2300      	movs	r3, #0
 8002fcc:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002fce:	2300      	movs	r3, #0
 8002fd0:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8002fd2:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002fd6:	4619      	mov	r1, r3
 8002fd8:	4849      	ldr	r0, [pc, #292]	; (8003100 <MX_GPIO_Init+0x29c>)
 8002fda:	f004 fc41 	bl	8007860 <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = BLUE_BUTTON_Pin;
 8002fde:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8002fe2:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8002fe4:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8002fe8:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002fea:	2300      	movs	r3, #0
 8002fec:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(BLUE_BUTTON_GPIO_Port, &GPIO_InitStruct);
 8002fee:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002ff2:	4619      	mov	r1, r3
 8002ff4:	4846      	ldr	r0, [pc, #280]	; (8003110 <MX_GPIO_Init+0x2ac>)
 8002ff6:	f004 fc33 	bl	8007860 <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = LD1_Pin|MW_INVALID_Pin|LASER_TUNING_Pin|LD3_Pin
 8002ffa:	f245 1303 	movw	r3, #20739	; 0x5103
 8002ffe:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8003000:	2301      	movs	r3, #1
 8003002:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003004:	2300      	movs	r3, #0
 8003006:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003008:	2300      	movs	r3, #0
 800300a:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800300c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8003010:	4619      	mov	r1, r3
 8003012:	483c      	ldr	r0, [pc, #240]	; (8003104 <MX_GPIO_Init+0x2a0>)
 8003014:	f004 fc24 	bl	8007860 <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = GPIO_PIN_11;
 8003018:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800301c:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 800301e:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8003022:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003024:	2300      	movs	r3, #0
 8003026:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8003028:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800302c:	4619      	mov	r1, r3
 800302e:	4839      	ldr	r0, [pc, #228]	; (8003114 <MX_GPIO_Init+0x2b0>)
 8003030:	f004 fc16 	bl	8007860 <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = SCOPE_TRIG_OUT_Pin;
 8003034:	2301      	movs	r3, #1
 8003036:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8003038:	2301      	movs	r3, #1
 800303a:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800303c:	2300      	movs	r3, #0
 800303e:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003040:	2300      	movs	r3, #0
 8003042:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(SCOPE_TRIG_OUT_GPIO_Port, &GPIO_InitStruct);
 8003044:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8003048:	4619      	mov	r1, r3
 800304a:	482f      	ldr	r0, [pc, #188]	; (8003108 <MX_GPIO_Init+0x2a4>)
 800304c:	f004 fc08 	bl	8007860 <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = USB_OTG_FS_PWR_EN_Pin|ATT_2_Pin|ATT_1_Pin|ATT_05_Pin
 8003050:	f44f 639f 	mov.w	r3, #1272	; 0x4f8
 8003054:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8003056:	2301      	movs	r3, #1
 8003058:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800305a:	2300      	movs	r3, #0
 800305c:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800305e:	2300      	movs	r3, #0
 8003060:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8003062:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8003066:	4619      	mov	r1, r3
 8003068:	4828      	ldr	r0, [pc, #160]	; (800310c <MX_GPIO_Init+0x2a8>)
 800306a:	f004 fbf9 	bl	8007860 <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = USB_OTG_FS_OVCR_Pin;
 800306e:	2380      	movs	r3, #128	; 0x80
 8003070:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8003072:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8003076:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003078:	2300      	movs	r3, #0
 800307a:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(USB_OTG_FS_OVCR_GPIO_Port, &GPIO_InitStruct);
 800307c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8003080:	4619      	mov	r1, r3
 8003082:	4821      	ldr	r0, [pc, #132]	; (8003108 <MX_GPIO_Init+0x2a4>)
 8003084:	f004 fbec 	bl	8007860 <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = SCLK_Pin|MOSI_Pin|SEN_Pin|REG_EN_Pin;
 8003088:	f44f 53d8 	mov.w	r3, #6912	; 0x1b00
 800308c:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800308e:	2301      	movs	r3, #1
 8003090:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8003092:	2302      	movs	r3, #2
 8003094:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003096:	2300      	movs	r3, #0
 8003098:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800309a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800309e:	4619      	mov	r1, r3
 80030a0:	481b      	ldr	r0, [pc, #108]	; (8003110 <MX_GPIO_Init+0x2ac>)
 80030a2:	f004 fbdd 	bl	8007860 <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_11|GPIO_PIN_12;
 80030a6:	f44f 53c8 	mov.w	r3, #6400	; 0x1900
 80030aa:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80030ac:	2302      	movs	r3, #2
 80030ae:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80030b0:	2300      	movs	r3, #0
 80030b2:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80030b4:	2300      	movs	r3, #0
 80030b6:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG1_FS;
 80030b8:	230a      	movs	r3, #10
 80030ba:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80030bc:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80030c0:	4619      	mov	r1, r3
 80030c2:	4815      	ldr	r0, [pc, #84]	; (8003118 <MX_GPIO_Init+0x2b4>)
 80030c4:	f004 fbcc 	bl	8007860 <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = MISO_Pin;
 80030c8:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80030cc:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80030ce:	2300      	movs	r3, #0
 80030d0:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80030d2:	2300      	movs	r3, #0
 80030d4:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(MISO_GPIO_Port, &GPIO_InitStruct);
 80030d6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80030da:	4619      	mov	r1, r3
 80030dc:	480c      	ldr	r0, [pc, #48]	; (8003110 <MX_GPIO_Init+0x2ac>)
 80030de:	f004 fbbf 	bl	8007860 <HAL_GPIO_Init>
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 80030e2:	2200      	movs	r2, #0
 80030e4:	2100      	movs	r1, #0
 80030e6:	2028      	movs	r0, #40	; 0x28
 80030e8:	f002 fe31 	bl	8005d4e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 80030ec:	2028      	movs	r0, #40	; 0x28
 80030ee:	f002 fe48 	bl	8005d82 <HAL_NVIC_EnableIRQ>
}
 80030f2:	bf00      	nop
 80030f4:	3738      	adds	r7, #56	; 0x38
 80030f6:	46bd      	mov	sp, r7
 80030f8:	bd80      	pop	{r7, pc}
 80030fa:	bf00      	nop
 80030fc:	58024400 	.word	0x58024400
 8003100:	58021000 	.word	0x58021000
 8003104:	58020400 	.word	0x58020400
 8003108:	58021800 	.word	0x58021800
 800310c:	58020c00 	.word	0x58020c00
 8003110:	58020800 	.word	0x58020800
 8003114:	58021400 	.word	0x58021400
 8003118:	58020000 	.word	0x58020000

0800311c <HAL_ADC_ConvCpltCallback>:
{
 800311c:	b580      	push	{r7, lr}
 800311e:	b082      	sub	sp, #8
 8003120:	af00      	add	r7, sp, #0
 8003122:	6078      	str	r0, [r7, #4]
  adc_val = 0x0000FFFF & HAL_ADC_GetValue(&hadc3); //ensure that only 16 bits are recorded
 8003124:	482a      	ldr	r0, [pc, #168]	; (80031d0 <HAL_ADC_ConvCpltCallback+0xb4>)
 8003126:	f001 fccd 	bl	8004ac4 <HAL_ADC_GetValue>
 800312a:	4603      	mov	r3, r0
 800312c:	b29b      	uxth	r3, r3
 800312e:	4a29      	ldr	r2, [pc, #164]	; (80031d4 <HAL_ADC_ConvCpltCallback+0xb8>)
 8003130:	6013      	str	r3, [r2, #0]
  sample_count++;
 8003132:	4b29      	ldr	r3, [pc, #164]	; (80031d8 <HAL_ADC_ConvCpltCallback+0xbc>)
 8003134:	881b      	ldrh	r3, [r3, #0]
 8003136:	b29b      	uxth	r3, r3
 8003138:	3301      	adds	r3, #1
 800313a:	b29a      	uxth	r2, r3
 800313c:	4b26      	ldr	r3, [pc, #152]	; (80031d8 <HAL_ADC_ConvCpltCallback+0xbc>)
 800313e:	801a      	strh	r2, [r3, #0]
		adc_readings_total = adc_readings_total + adc_val;
 8003140:	4b26      	ldr	r3, [pc, #152]	; (80031dc <HAL_ADC_ConvCpltCallback+0xc0>)
 8003142:	681a      	ldr	r2, [r3, #0]
 8003144:	4b23      	ldr	r3, [pc, #140]	; (80031d4 <HAL_ADC_ConvCpltCallback+0xb8>)
 8003146:	681b      	ldr	r3, [r3, #0]
 8003148:	4413      	add	r3, r2
 800314a:	4a24      	ldr	r2, [pc, #144]	; (80031dc <HAL_ADC_ConvCpltCallback+0xc0>)
 800314c:	6013      	str	r3, [r2, #0]
		if (sample_count >= ADC_SAMPLES) {//if the sample buffer is full
 800314e:	4b22      	ldr	r3, [pc, #136]	; (80031d8 <HAL_ADC_ConvCpltCallback+0xbc>)
 8003150:	881b      	ldrh	r3, [r3, #0]
 8003152:	b29b      	uxth	r3, r3
 8003154:	2b07      	cmp	r3, #7
 8003156:	d912      	bls.n	800317e <HAL_ADC_ConvCpltCallback+0x62>
			adc_readings_total = adc_readings_total - adc_readings[adc_sample_no]; //subtract the expired value from the total
 8003158:	4b20      	ldr	r3, [pc, #128]	; (80031dc <HAL_ADC_ConvCpltCallback+0xc0>)
 800315a:	681a      	ldr	r2, [r3, #0]
 800315c:	4b20      	ldr	r3, [pc, #128]	; (80031e0 <HAL_ADC_ConvCpltCallback+0xc4>)
 800315e:	881b      	ldrh	r3, [r3, #0]
 8003160:	4619      	mov	r1, r3
 8003162:	4b20      	ldr	r3, [pc, #128]	; (80031e4 <HAL_ADC_ConvCpltCallback+0xc8>)
 8003164:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8003168:	1ad3      	subs	r3, r2, r3
 800316a:	4a1c      	ldr	r2, [pc, #112]	; (80031dc <HAL_ADC_ConvCpltCallback+0xc0>)
 800316c:	6013      	str	r3, [r2, #0]
			adc_averaged_val = adc_readings_total >> ADC_SAMPLE_POWER; //truncate as a cycle-efficient division
 800316e:	4b1b      	ldr	r3, [pc, #108]	; (80031dc <HAL_ADC_ConvCpltCallback+0xc0>)
 8003170:	681b      	ldr	r3, [r3, #0]
 8003172:	08db      	lsrs	r3, r3, #3
 8003174:	4a1c      	ldr	r2, [pc, #112]	; (80031e8 <HAL_ADC_ConvCpltCallback+0xcc>)
 8003176:	6013      	str	r3, [r2, #0]
			adc_average_updated = true;
 8003178:	4b1c      	ldr	r3, [pc, #112]	; (80031ec <HAL_ADC_ConvCpltCallback+0xd0>)
 800317a:	2201      	movs	r2, #1
 800317c:	701a      	strb	r2, [r3, #0]
		adc_readings[adc_sample_no] = adc_val;
 800317e:	4b18      	ldr	r3, [pc, #96]	; (80031e0 <HAL_ADC_ConvCpltCallback+0xc4>)
 8003180:	881b      	ldrh	r3, [r3, #0]
 8003182:	4619      	mov	r1, r3
 8003184:	4b13      	ldr	r3, [pc, #76]	; (80031d4 <HAL_ADC_ConvCpltCallback+0xb8>)
 8003186:	681b      	ldr	r3, [r3, #0]
 8003188:	4a16      	ldr	r2, [pc, #88]	; (80031e4 <HAL_ADC_ConvCpltCallback+0xc8>)
 800318a:	f842 3021 	str.w	r3, [r2, r1, lsl #2]
		adc_sample_no++;
 800318e:	4b14      	ldr	r3, [pc, #80]	; (80031e0 <HAL_ADC_ConvCpltCallback+0xc4>)
 8003190:	881b      	ldrh	r3, [r3, #0]
 8003192:	3301      	adds	r3, #1
 8003194:	b29a      	uxth	r2, r3
 8003196:	4b12      	ldr	r3, [pc, #72]	; (80031e0 <HAL_ADC_ConvCpltCallback+0xc4>)
 8003198:	801a      	strh	r2, [r3, #0]
		if (adc_sample_no >= ADC_SAMPLES) adc_sample_no = 0; //set back to zero if loop complete
 800319a:	4b11      	ldr	r3, [pc, #68]	; (80031e0 <HAL_ADC_ConvCpltCallback+0xc4>)
 800319c:	881b      	ldrh	r3, [r3, #0]
 800319e:	2b07      	cmp	r3, #7
 80031a0:	d902      	bls.n	80031a8 <HAL_ADC_ConvCpltCallback+0x8c>
 80031a2:	4b0f      	ldr	r3, [pc, #60]	; (80031e0 <HAL_ADC_ConvCpltCallback+0xc4>)
 80031a4:	2200      	movs	r2, #0
 80031a6:	801a      	strh	r2, [r3, #0]
	if(adc_average_updated) {
 80031a8:	4b10      	ldr	r3, [pc, #64]	; (80031ec <HAL_ADC_ConvCpltCallback+0xd0>)
 80031aa:	781b      	ldrb	r3, [r3, #0]
 80031ac:	2b00      	cmp	r3, #0
 80031ae:	d00b      	beq.n	80031c8 <HAL_ADC_ConvCpltCallback+0xac>
		dac_val = adc_averaged_val >> 4;
 80031b0:	4b0d      	ldr	r3, [pc, #52]	; (80031e8 <HAL_ADC_ConvCpltCallback+0xcc>)
 80031b2:	681b      	ldr	r3, [r3, #0]
 80031b4:	091b      	lsrs	r3, r3, #4
 80031b6:	4a0e      	ldr	r2, [pc, #56]	; (80031f0 <HAL_ADC_ConvCpltCallback+0xd4>)
 80031b8:	6013      	str	r3, [r2, #0]
		HAL_DAC_SetValue(&hdac1, DAC_CHANNEL_1, DAC_ALIGN_12B_R, dac_val);
 80031ba:	4b0d      	ldr	r3, [pc, #52]	; (80031f0 <HAL_ADC_ConvCpltCallback+0xd4>)
 80031bc:	681b      	ldr	r3, [r3, #0]
 80031be:	2200      	movs	r2, #0
 80031c0:	2100      	movs	r1, #0
 80031c2:	480c      	ldr	r0, [pc, #48]	; (80031f4 <HAL_ADC_ConvCpltCallback+0xd8>)
 80031c4:	f002 fee8 	bl	8005f98 <HAL_DAC_SetValue>
}
 80031c8:	bf00      	nop
 80031ca:	3708      	adds	r7, #8
 80031cc:	46bd      	mov	sp, r7
 80031ce:	bd80      	pop	{r7, pc}
 80031d0:	20000258 	.word	0x20000258
 80031d4:	200005fc 	.word	0x200005fc
 80031d8:	200005f6 	.word	0x200005f6
 80031dc:	20000628 	.word	0x20000628
 80031e0:	20000624 	.word	0x20000624
 80031e4:	20000604 	.word	0x20000604
 80031e8:	20000600 	.word	0x20000600
 80031ec:	2000062c 	.word	0x2000062c
 80031f0:	20000640 	.word	0x20000640
 80031f4:	200002bc 	.word	0x200002bc

080031f8 <MPU_Config>:
/* USER CODE END 4 */

/* MPU Configuration */

void MPU_Config(void)
{
 80031f8:	b580      	push	{r7, lr}
 80031fa:	b084      	sub	sp, #16
 80031fc:	af00      	add	r7, sp, #0
  MPU_Region_InitTypeDef MPU_InitStruct = {0};
 80031fe:	463b      	mov	r3, r7
 8003200:	2200      	movs	r2, #0
 8003202:	601a      	str	r2, [r3, #0]
 8003204:	605a      	str	r2, [r3, #4]
 8003206:	609a      	str	r2, [r3, #8]
 8003208:	60da      	str	r2, [r3, #12]

  /* Disables the MPU */
  HAL_MPU_Disable();
 800320a:	f002 fdd5 	bl	8005db8 <HAL_MPU_Disable>

  /** Initializes and configures the Region and the memory to be protected
  */
  MPU_InitStruct.Enable = MPU_REGION_ENABLE;
 800320e:	2301      	movs	r3, #1
 8003210:	703b      	strb	r3, [r7, #0]
  MPU_InitStruct.Number = MPU_REGION_NUMBER0;
 8003212:	2300      	movs	r3, #0
 8003214:	707b      	strb	r3, [r7, #1]
  MPU_InitStruct.BaseAddress = 0x0;
 8003216:	2300      	movs	r3, #0
 8003218:	607b      	str	r3, [r7, #4]
  MPU_InitStruct.Size = MPU_REGION_SIZE_4GB;
 800321a:	231f      	movs	r3, #31
 800321c:	723b      	strb	r3, [r7, #8]
  MPU_InitStruct.SubRegionDisable = 0x87;
 800321e:	2387      	movs	r3, #135	; 0x87
 8003220:	727b      	strb	r3, [r7, #9]
  MPU_InitStruct.TypeExtField = MPU_TEX_LEVEL0;
 8003222:	2300      	movs	r3, #0
 8003224:	72bb      	strb	r3, [r7, #10]
  MPU_InitStruct.AccessPermission = MPU_REGION_NO_ACCESS;
 8003226:	2300      	movs	r3, #0
 8003228:	72fb      	strb	r3, [r7, #11]
  MPU_InitStruct.DisableExec = MPU_INSTRUCTION_ACCESS_DISABLE;
 800322a:	2301      	movs	r3, #1
 800322c:	733b      	strb	r3, [r7, #12]
  MPU_InitStruct.IsShareable = MPU_ACCESS_SHAREABLE;
 800322e:	2301      	movs	r3, #1
 8003230:	737b      	strb	r3, [r7, #13]
  MPU_InitStruct.IsCacheable = MPU_ACCESS_NOT_CACHEABLE;
 8003232:	2300      	movs	r3, #0
 8003234:	73bb      	strb	r3, [r7, #14]
  MPU_InitStruct.IsBufferable = MPU_ACCESS_NOT_BUFFERABLE;
 8003236:	2300      	movs	r3, #0
 8003238:	73fb      	strb	r3, [r7, #15]

  HAL_MPU_ConfigRegion(&MPU_InitStruct);
 800323a:	463b      	mov	r3, r7
 800323c:	4618      	mov	r0, r3
 800323e:	f002 fdf3 	bl	8005e28 <HAL_MPU_ConfigRegion>

  /** Initializes and configures the Region and the memory to be protected
  */
  MPU_InitStruct.Number = MPU_REGION_NUMBER1;
 8003242:	2301      	movs	r3, #1
 8003244:	707b      	strb	r3, [r7, #1]
  MPU_InitStruct.BaseAddress = 0x30020000;
 8003246:	4b13      	ldr	r3, [pc, #76]	; (8003294 <MPU_Config+0x9c>)
 8003248:	607b      	str	r3, [r7, #4]
  MPU_InitStruct.Size = MPU_REGION_SIZE_128KB;
 800324a:	2310      	movs	r3, #16
 800324c:	723b      	strb	r3, [r7, #8]
  MPU_InitStruct.SubRegionDisable = 0x0;
 800324e:	2300      	movs	r3, #0
 8003250:	727b      	strb	r3, [r7, #9]
  MPU_InitStruct.TypeExtField = MPU_TEX_LEVEL1;
 8003252:	2301      	movs	r3, #1
 8003254:	72bb      	strb	r3, [r7, #10]
  MPU_InitStruct.AccessPermission = MPU_REGION_FULL_ACCESS;
 8003256:	2303      	movs	r3, #3
 8003258:	72fb      	strb	r3, [r7, #11]
  MPU_InitStruct.IsShareable = MPU_ACCESS_NOT_SHAREABLE;
 800325a:	2300      	movs	r3, #0
 800325c:	737b      	strb	r3, [r7, #13]

  HAL_MPU_ConfigRegion(&MPU_InitStruct);
 800325e:	463b      	mov	r3, r7
 8003260:	4618      	mov	r0, r3
 8003262:	f002 fde1 	bl	8005e28 <HAL_MPU_ConfigRegion>

  /** Initializes and configures the Region and the memory to be protected
  */
  MPU_InitStruct.Number = MPU_REGION_NUMBER2;
 8003266:	2302      	movs	r3, #2
 8003268:	707b      	strb	r3, [r7, #1]
  MPU_InitStruct.BaseAddress = 0x30040000;
 800326a:	4b0b      	ldr	r3, [pc, #44]	; (8003298 <MPU_Config+0xa0>)
 800326c:	607b      	str	r3, [r7, #4]
  MPU_InitStruct.Size = MPU_REGION_SIZE_512B;
 800326e:	2308      	movs	r3, #8
 8003270:	723b      	strb	r3, [r7, #8]
  MPU_InitStruct.TypeExtField = MPU_TEX_LEVEL0;
 8003272:	2300      	movs	r3, #0
 8003274:	72bb      	strb	r3, [r7, #10]
  MPU_InitStruct.IsShareable = MPU_ACCESS_SHAREABLE;
 8003276:	2301      	movs	r3, #1
 8003278:	737b      	strb	r3, [r7, #13]
  MPU_InitStruct.IsBufferable = MPU_ACCESS_BUFFERABLE;
 800327a:	2301      	movs	r3, #1
 800327c:	73fb      	strb	r3, [r7, #15]

  HAL_MPU_ConfigRegion(&MPU_InitStruct);
 800327e:	463b      	mov	r3, r7
 8003280:	4618      	mov	r0, r3
 8003282:	f002 fdd1 	bl	8005e28 <HAL_MPU_ConfigRegion>
  /* Enables the MPU */
  HAL_MPU_Enable(MPU_PRIVILEGED_DEFAULT);
 8003286:	2004      	movs	r0, #4
 8003288:	f002 fdae 	bl	8005de8 <HAL_MPU_Enable>

}
 800328c:	bf00      	nop
 800328e:	3710      	adds	r7, #16
 8003290:	46bd      	mov	sp, r7
 8003292:	bd80      	pop	{r7, pc}
 8003294:	30020000 	.word	0x30020000
 8003298:	30040000 	.word	0x30040000

0800329c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800329c:	b580      	push	{r7, lr}
 800329e:	af00      	add	r7, sp, #0
  __ASM volatile ("cpsid i" : : : "memory");
 80032a0:	b672      	cpsid	i
}
 80032a2:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
	__disable_irq();

	printf("Error handler routine called\r\n");
 80032a4:	4810      	ldr	r0, [pc, #64]	; (80032e8 <Error_Handler+0x4c>)
 80032a6:	f016 fd39 	bl	8019d1c <puts>

	/* Disable the AOM */
	HAL_HRTIM_WaveformOutputStop(&hhrtim, HRTIM_OUTPUT_TA1 | HRTIM_OUTPUT_TA2 | HRTIM_OUTPUT_TE1);
 80032aa:	f240 1103 	movw	r1, #259	; 0x103
 80032ae:	480f      	ldr	r0, [pc, #60]	; (80032ec <Error_Handler+0x50>)
 80032b0:	f004 ffff 	bl	80082b2 <HAL_HRTIM_WaveformOutputStop>
	HAL_HRTIM_WaveformCounterStop_IT(&hhrtim, HRTIM_TIMERID_TIMER_A | HRTIM_TIMERID_TIMER_E);
 80032b4:	f44f 1108 	mov.w	r1, #2228224	; 0x220000
 80032b8:	480c      	ldr	r0, [pc, #48]	; (80032ec <Error_Handler+0x50>)
 80032ba:	f005 f827 	bl	800830c <HAL_HRTIM_WaveformCountStop_IT>

	/* Power down the synthesiser */
	HAL_GPIO_WritePin(REG_EN_GPIO_Port, REG_EN_Pin, 0);
 80032be:	2200      	movs	r2, #0
 80032c0:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80032c4:	480a      	ldr	r0, [pc, #40]	; (80032f0 <Error_Handler+0x54>)
 80032c6:	f004 fc93 	bl	8007bf0 <HAL_GPIO_WritePin>

	while (1) {
		HAL_GPIO_TogglePin(LD3_GPIO_Port, LD3_Pin); //toggle red LED
 80032ca:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80032ce:	4809      	ldr	r0, [pc, #36]	; (80032f4 <Error_Handler+0x58>)
 80032d0:	f004 fca7 	bl	8007c22 <HAL_GPIO_TogglePin>
		timer_delay(SLOW_TIMER, ERROR_LED_DELAY);
 80032d4:	4b08      	ldr	r3, [pc, #32]	; (80032f8 <Error_Handler+0x5c>)
 80032d6:	681b      	ldr	r3, [r3, #0]
 80032d8:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80032dc:	4611      	mov	r1, r2
 80032de:	4618      	mov	r0, r3
 80032e0:	f018 fc5e 	bl	801bba0 <__timer_delay_veneer>
		HAL_GPIO_TogglePin(LD3_GPIO_Port, LD3_Pin); //toggle red LED
 80032e4:	e7f1      	b.n	80032ca <Error_Handler+0x2e>
 80032e6:	bf00      	nop
 80032e8:	0801c044 	.word	0x0801c044
 80032ec:	200002d0 	.word	0x200002d0
 80032f0:	58020800 	.word	0x58020800
 80032f4:	58020400 	.word	0x58020400
 80032f8:	20000018 	.word	0x20000018

080032fc <HAL_MspInit>:
void HAL_HRTIM_MspPostInit(HRTIM_HandleTypeDef *hhrtim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80032fc:	b480      	push	{r7}
 80032fe:	b083      	sub	sp, #12
 8003300:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003302:	4b0a      	ldr	r3, [pc, #40]	; (800332c <HAL_MspInit+0x30>)
 8003304:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8003308:	4a08      	ldr	r2, [pc, #32]	; (800332c <HAL_MspInit+0x30>)
 800330a:	f043 0302 	orr.w	r3, r3, #2
 800330e:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 8003312:	4b06      	ldr	r3, [pc, #24]	; (800332c <HAL_MspInit+0x30>)
 8003314:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8003318:	f003 0302 	and.w	r3, r3, #2
 800331c:	607b      	str	r3, [r7, #4]
 800331e:	687b      	ldr	r3, [r7, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8003320:	bf00      	nop
 8003322:	370c      	adds	r7, #12
 8003324:	46bd      	mov	sp, r7
 8003326:	f85d 7b04 	ldr.w	r7, [sp], #4
 800332a:	4770      	bx	lr
 800332c:	58024400 	.word	0x58024400

08003330 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8003330:	b580      	push	{r7, lr}
 8003332:	b0b4      	sub	sp, #208	; 0xd0
 8003334:	af00      	add	r7, sp, #0
 8003336:	6078      	str	r0, [r7, #4]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8003338:	f107 0310 	add.w	r3, r7, #16
 800333c:	22c0      	movs	r2, #192	; 0xc0
 800333e:	2100      	movs	r1, #0
 8003340:	4618      	mov	r0, r3
 8003342:	f016 fddb 	bl	8019efc <memset>
  if(hadc->Instance==ADC3)
 8003346:	687b      	ldr	r3, [r7, #4]
 8003348:	681b      	ldr	r3, [r3, #0]
 800334a:	4a2b      	ldr	r2, [pc, #172]	; (80033f8 <HAL_ADC_MspInit+0xc8>)
 800334c:	4293      	cmp	r3, r2
 800334e:	d14e      	bne.n	80033ee <HAL_ADC_MspInit+0xbe>

  /* USER CODE END ADC3_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_ADC;
 8003350:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 8003354:	f04f 0300 	mov.w	r3, #0
 8003358:	e9c7 2304 	strd	r2, r3, [r7, #16]
    PeriphClkInitStruct.PLL2.PLL2M = 1;
 800335c:	2301      	movs	r3, #1
 800335e:	61bb      	str	r3, [r7, #24]
    PeriphClkInitStruct.PLL2.PLL2N = 19;
 8003360:	2313      	movs	r3, #19
 8003362:	61fb      	str	r3, [r7, #28]
    PeriphClkInitStruct.PLL2.PLL2P = 79;
 8003364:	234f      	movs	r3, #79	; 0x4f
 8003366:	623b      	str	r3, [r7, #32]
    PeriphClkInitStruct.PLL2.PLL2Q = 2;
 8003368:	2302      	movs	r3, #2
 800336a:	627b      	str	r3, [r7, #36]	; 0x24
    PeriphClkInitStruct.PLL2.PLL2R = 2;
 800336c:	2302      	movs	r3, #2
 800336e:	62bb      	str	r3, [r7, #40]	; 0x28
    PeriphClkInitStruct.PLL2.PLL2RGE = RCC_PLL2VCIRANGE_3;
 8003370:	23c0      	movs	r3, #192	; 0xc0
 8003372:	62fb      	str	r3, [r7, #44]	; 0x2c
    PeriphClkInitStruct.PLL2.PLL2VCOSEL = RCC_PLL2VCOMEDIUM;
 8003374:	2320      	movs	r3, #32
 8003376:	633b      	str	r3, [r7, #48]	; 0x30
    PeriphClkInitStruct.PLL2.PLL2FRACN = 0;
 8003378:	2300      	movs	r3, #0
 800337a:	637b      	str	r3, [r7, #52]	; 0x34
    PeriphClkInitStruct.AdcClockSelection = RCC_ADCCLKSOURCE_PLL2;
 800337c:	2300      	movs	r3, #0
 800337e:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8003382:	f107 0310 	add.w	r3, r7, #16
 8003386:	4618      	mov	r0, r3
 8003388:	f007 fb6a 	bl	800aa60 <HAL_RCCEx_PeriphCLKConfig>
 800338c:	4603      	mov	r3, r0
 800338e:	2b00      	cmp	r3, #0
 8003390:	d001      	beq.n	8003396 <HAL_ADC_MspInit+0x66>
    {
      Error_Handler();
 8003392:	f7ff ff83 	bl	800329c <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_ADC3_CLK_ENABLE();
 8003396:	4b19      	ldr	r3, [pc, #100]	; (80033fc <HAL_ADC_MspInit+0xcc>)
 8003398:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800339c:	4a17      	ldr	r2, [pc, #92]	; (80033fc <HAL_ADC_MspInit+0xcc>)
 800339e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80033a2:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80033a6:	4b15      	ldr	r3, [pc, #84]	; (80033fc <HAL_ADC_MspInit+0xcc>)
 80033a8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80033ac:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80033b0:	60fb      	str	r3, [r7, #12]
 80033b2:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 80033b4:	4b11      	ldr	r3, [pc, #68]	; (80033fc <HAL_ADC_MspInit+0xcc>)
 80033b6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80033ba:	4a10      	ldr	r2, [pc, #64]	; (80033fc <HAL_ADC_MspInit+0xcc>)
 80033bc:	f043 0304 	orr.w	r3, r3, #4
 80033c0:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80033c4:	4b0d      	ldr	r3, [pc, #52]	; (80033fc <HAL_ADC_MspInit+0xcc>)
 80033c6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80033ca:	f003 0304 	and.w	r3, r3, #4
 80033ce:	60bb      	str	r3, [r7, #8]
 80033d0:	68bb      	ldr	r3, [r7, #8]
    /**ADC3 GPIO Configuration
    PC2_C     ------> ADC3_INP0
    */
    HAL_SYSCFG_AnalogSwitchConfig(SYSCFG_SWITCH_PC2, SYSCFG_SWITCH_PC2_OPEN);
 80033d2:	f04f 6180 	mov.w	r1, #67108864	; 0x4000000
 80033d6:	f04f 6080 	mov.w	r0, #67108864	; 0x4000000
 80033da:	f000 fe61 	bl	80040a0 <HAL_SYSCFG_AnalogSwitchConfig>

    /* ADC3 interrupt Init */
    HAL_NVIC_SetPriority(ADC3_IRQn, 0, 0);
 80033de:	2200      	movs	r2, #0
 80033e0:	2100      	movs	r1, #0
 80033e2:	207f      	movs	r0, #127	; 0x7f
 80033e4:	f002 fcb3 	bl	8005d4e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ADC3_IRQn);
 80033e8:	207f      	movs	r0, #127	; 0x7f
 80033ea:	f002 fcca 	bl	8005d82 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN ADC3_MspInit 1 */

  /* USER CODE END ADC3_MspInit 1 */
  }

}
 80033ee:	bf00      	nop
 80033f0:	37d0      	adds	r7, #208	; 0xd0
 80033f2:	46bd      	mov	sp, r7
 80033f4:	bd80      	pop	{r7, pc}
 80033f6:	bf00      	nop
 80033f8:	58026000 	.word	0x58026000
 80033fc:	58024400 	.word	0x58024400

08003400 <HAL_DAC_MspInit>:
* This function configures the hardware resources used in this example
* @param hdac: DAC handle pointer
* @retval None
*/
void HAL_DAC_MspInit(DAC_HandleTypeDef* hdac)
{
 8003400:	b580      	push	{r7, lr}
 8003402:	b08a      	sub	sp, #40	; 0x28
 8003404:	af00      	add	r7, sp, #0
 8003406:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003408:	f107 0314 	add.w	r3, r7, #20
 800340c:	2200      	movs	r2, #0
 800340e:	601a      	str	r2, [r3, #0]
 8003410:	605a      	str	r2, [r3, #4]
 8003412:	609a      	str	r2, [r3, #8]
 8003414:	60da      	str	r2, [r3, #12]
 8003416:	611a      	str	r2, [r3, #16]
  if(hdac->Instance==DAC1)
 8003418:	687b      	ldr	r3, [r7, #4]
 800341a:	681b      	ldr	r3, [r3, #0]
 800341c:	4a18      	ldr	r2, [pc, #96]	; (8003480 <HAL_DAC_MspInit+0x80>)
 800341e:	4293      	cmp	r3, r2
 8003420:	d129      	bne.n	8003476 <HAL_DAC_MspInit+0x76>
  {
  /* USER CODE BEGIN DAC1_MspInit 0 */

  /* USER CODE END DAC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_DAC12_CLK_ENABLE();
 8003422:	4b18      	ldr	r3, [pc, #96]	; (8003484 <HAL_DAC_MspInit+0x84>)
 8003424:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8003428:	4a16      	ldr	r2, [pc, #88]	; (8003484 <HAL_DAC_MspInit+0x84>)
 800342a:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 800342e:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8003432:	4b14      	ldr	r3, [pc, #80]	; (8003484 <HAL_DAC_MspInit+0x84>)
 8003434:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8003438:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800343c:	613b      	str	r3, [r7, #16]
 800343e:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003440:	4b10      	ldr	r3, [pc, #64]	; (8003484 <HAL_DAC_MspInit+0x84>)
 8003442:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8003446:	4a0f      	ldr	r2, [pc, #60]	; (8003484 <HAL_DAC_MspInit+0x84>)
 8003448:	f043 0301 	orr.w	r3, r3, #1
 800344c:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8003450:	4b0c      	ldr	r3, [pc, #48]	; (8003484 <HAL_DAC_MspInit+0x84>)
 8003452:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8003456:	f003 0301 	and.w	r3, r3, #1
 800345a:	60fb      	str	r3, [r7, #12]
 800345c:	68fb      	ldr	r3, [r7, #12]
    /**DAC1 GPIO Configuration
    PA4     ------> DAC1_OUT1
    PA5     ------> DAC1_OUT2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5;
 800345e:	2330      	movs	r3, #48	; 0x30
 8003460:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8003462:	2303      	movs	r3, #3
 8003464:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003466:	2300      	movs	r3, #0
 8003468:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800346a:	f107 0314 	add.w	r3, r7, #20
 800346e:	4619      	mov	r1, r3
 8003470:	4805      	ldr	r0, [pc, #20]	; (8003488 <HAL_DAC_MspInit+0x88>)
 8003472:	f004 f9f5 	bl	8007860 <HAL_GPIO_Init>
  /* USER CODE BEGIN DAC1_MspInit 1 */

  /* USER CODE END DAC1_MspInit 1 */
  }

}
 8003476:	bf00      	nop
 8003478:	3728      	adds	r7, #40	; 0x28
 800347a:	46bd      	mov	sp, r7
 800347c:	bd80      	pop	{r7, pc}
 800347e:	bf00      	nop
 8003480:	40007400 	.word	0x40007400
 8003484:	58024400 	.word	0x58024400
 8003488:	58020000 	.word	0x58020000

0800348c <HAL_HRTIM_MspInit>:
* This function configures the hardware resources used in this example
* @param hhrtim: HRTIM handle pointer
* @retval None
*/
void HAL_HRTIM_MspInit(HRTIM_HandleTypeDef* hhrtim)
{
 800348c:	b580      	push	{r7, lr}
 800348e:	b0b4      	sub	sp, #208	; 0xd0
 8003490:	af00      	add	r7, sp, #0
 8003492:	6078      	str	r0, [r7, #4]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8003494:	f107 0310 	add.w	r3, r7, #16
 8003498:	22c0      	movs	r2, #192	; 0xc0
 800349a:	2100      	movs	r1, #0
 800349c:	4618      	mov	r0, r3
 800349e:	f016 fd2d 	bl	8019efc <memset>
  if(hhrtim->Instance==HRTIM1)
 80034a2:	687b      	ldr	r3, [r7, #4]
 80034a4:	681b      	ldr	r3, [r3, #0]
 80034a6:	4a1c      	ldr	r2, [pc, #112]	; (8003518 <HAL_HRTIM_MspInit+0x8c>)
 80034a8:	4293      	cmp	r3, r2
 80034aa:	d131      	bne.n	8003510 <HAL_HRTIM_MspInit+0x84>

  /* USER CODE END HRTIM1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_HRTIM1;
 80034ac:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80034b0:	f04f 0300 	mov.w	r3, #0
 80034b4:	e9c7 2304 	strd	r2, r3, [r7, #16]
    PeriphClkInitStruct.Hrtim1ClockSelection = RCC_HRTIM1CLK_TIMCLK;
 80034b8:	2300      	movs	r3, #0
 80034ba:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80034be:	f107 0310 	add.w	r3, r7, #16
 80034c2:	4618      	mov	r0, r3
 80034c4:	f007 facc 	bl	800aa60 <HAL_RCCEx_PeriphCLKConfig>
 80034c8:	4603      	mov	r3, r0
 80034ca:	2b00      	cmp	r3, #0
 80034cc:	d001      	beq.n	80034d2 <HAL_HRTIM_MspInit+0x46>
    {
      Error_Handler();
 80034ce:	f7ff fee5 	bl	800329c <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_HRTIM1_CLK_ENABLE();
 80034d2:	4b12      	ldr	r3, [pc, #72]	; (800351c <HAL_HRTIM_MspInit+0x90>)
 80034d4:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 80034d8:	4a10      	ldr	r2, [pc, #64]	; (800351c <HAL_HRTIM_MspInit+0x90>)
 80034da:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 80034de:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 80034e2:	4b0e      	ldr	r3, [pc, #56]	; (800351c <HAL_HRTIM_MspInit+0x90>)
 80034e4:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 80034e8:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80034ec:	60fb      	str	r3, [r7, #12]
 80034ee:	68fb      	ldr	r3, [r7, #12]
    /* HRTIM1 interrupt Init */
    HAL_NVIC_SetPriority(HRTIM1_TIMA_IRQn, 0, 0);
 80034f0:	2200      	movs	r2, #0
 80034f2:	2100      	movs	r1, #0
 80034f4:	2068      	movs	r0, #104	; 0x68
 80034f6:	f002 fc2a 	bl	8005d4e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(HRTIM1_TIMA_IRQn);
 80034fa:	2068      	movs	r0, #104	; 0x68
 80034fc:	f002 fc41 	bl	8005d82 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(HRTIM1_TIME_IRQn, 0, 0);
 8003500:	2200      	movs	r2, #0
 8003502:	2100      	movs	r1, #0
 8003504:	206c      	movs	r0, #108	; 0x6c
 8003506:	f002 fc22 	bl	8005d4e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(HRTIM1_TIME_IRQn);
 800350a:	206c      	movs	r0, #108	; 0x6c
 800350c:	f002 fc39 	bl	8005d82 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN HRTIM1_MspInit 1 */

  /* USER CODE END HRTIM1_MspInit 1 */
  }

}
 8003510:	bf00      	nop
 8003512:	37d0      	adds	r7, #208	; 0xd0
 8003514:	46bd      	mov	sp, r7
 8003516:	bd80      	pop	{r7, pc}
 8003518:	40017400 	.word	0x40017400
 800351c:	58024400 	.word	0x58024400

08003520 <HAL_HRTIM_MspPostInit>:

void HAL_HRTIM_MspPostInit(HRTIM_HandleTypeDef* hhrtim)
{
 8003520:	b580      	push	{r7, lr}
 8003522:	b08a      	sub	sp, #40	; 0x28
 8003524:	af00      	add	r7, sp, #0
 8003526:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003528:	f107 0314 	add.w	r3, r7, #20
 800352c:	2200      	movs	r2, #0
 800352e:	601a      	str	r2, [r3, #0]
 8003530:	605a      	str	r2, [r3, #4]
 8003532:	609a      	str	r2, [r3, #8]
 8003534:	60da      	str	r2, [r3, #12]
 8003536:	611a      	str	r2, [r3, #16]
  if(hhrtim->Instance==HRTIM1)
 8003538:	687b      	ldr	r3, [r7, #4]
 800353a:	681b      	ldr	r3, [r3, #0]
 800353c:	4a22      	ldr	r2, [pc, #136]	; (80035c8 <HAL_HRTIM_MspPostInit+0xa8>)
 800353e:	4293      	cmp	r3, r2
 8003540:	d13d      	bne.n	80035be <HAL_HRTIM_MspPostInit+0x9e>
  {
  /* USER CODE BEGIN HRTIM1_MspPostInit 0 */

  /* USER CODE END HRTIM1_MspPostInit 0 */

    __HAL_RCC_GPIOG_CLK_ENABLE();
 8003542:	4b22      	ldr	r3, [pc, #136]	; (80035cc <HAL_HRTIM_MspPostInit+0xac>)
 8003544:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8003548:	4a20      	ldr	r2, [pc, #128]	; (80035cc <HAL_HRTIM_MspPostInit+0xac>)
 800354a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800354e:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8003552:	4b1e      	ldr	r3, [pc, #120]	; (80035cc <HAL_HRTIM_MspPostInit+0xac>)
 8003554:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8003558:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800355c:	613b      	str	r3, [r7, #16]
 800355e:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8003560:	4b1a      	ldr	r3, [pc, #104]	; (80035cc <HAL_HRTIM_MspPostInit+0xac>)
 8003562:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8003566:	4a19      	ldr	r2, [pc, #100]	; (80035cc <HAL_HRTIM_MspPostInit+0xac>)
 8003568:	f043 0304 	orr.w	r3, r3, #4
 800356c:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8003570:	4b16      	ldr	r3, [pc, #88]	; (80035cc <HAL_HRTIM_MspPostInit+0xac>)
 8003572:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8003576:	f003 0304 	and.w	r3, r3, #4
 800357a:	60fb      	str	r3, [r7, #12]
 800357c:	68fb      	ldr	r3, [r7, #12]
    /**HRTIM GPIO Configuration
    PG6     ------> HRTIM_CHE1
    PC6     ------> HRTIM_CHA1
    PC7     ------> HRTIM_CHA2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6;
 800357e:	2340      	movs	r3, #64	; 0x40
 8003580:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003582:	2302      	movs	r3, #2
 8003584:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003586:	2300      	movs	r3, #0
 8003588:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800358a:	2303      	movs	r3, #3
 800358c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_HRTIM1;
 800358e:	2302      	movs	r3, #2
 8003590:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8003592:	f107 0314 	add.w	r3, r7, #20
 8003596:	4619      	mov	r1, r3
 8003598:	480d      	ldr	r0, [pc, #52]	; (80035d0 <HAL_HRTIM_MspPostInit+0xb0>)
 800359a:	f004 f961 	bl	8007860 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 800359e:	23c0      	movs	r3, #192	; 0xc0
 80035a0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80035a2:	2302      	movs	r3, #2
 80035a4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80035a6:	2300      	movs	r3, #0
 80035a8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80035aa:	2303      	movs	r3, #3
 80035ac:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_HRTIM1;
 80035ae:	2301      	movs	r3, #1
 80035b0:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80035b2:	f107 0314 	add.w	r3, r7, #20
 80035b6:	4619      	mov	r1, r3
 80035b8:	4806      	ldr	r0, [pc, #24]	; (80035d4 <HAL_HRTIM_MspPostInit+0xb4>)
 80035ba:	f004 f951 	bl	8007860 <HAL_GPIO_Init>
  /* USER CODE BEGIN HRTIM1_MspPostInit 1 */

  /* USER CODE END HRTIM1_MspPostInit 1 */
  }

}
 80035be:	bf00      	nop
 80035c0:	3728      	adds	r7, #40	; 0x28
 80035c2:	46bd      	mov	sp, r7
 80035c4:	bd80      	pop	{r7, pc}
 80035c6:	bf00      	nop
 80035c8:	40017400 	.word	0x40017400
 80035cc:	58024400 	.word	0x58024400
 80035d0:	58021800 	.word	0x58021800
 80035d4:	58020800 	.word	0x58020800

080035d8 <HAL_LPTIM_MspInit>:
* This function configures the hardware resources used in this example
* @param hlptim: LPTIM handle pointer
* @retval None
*/
void HAL_LPTIM_MspInit(LPTIM_HandleTypeDef* hlptim)
{
 80035d8:	b580      	push	{r7, lr}
 80035da:	b0b4      	sub	sp, #208	; 0xd0
 80035dc:	af00      	add	r7, sp, #0
 80035de:	6078      	str	r0, [r7, #4]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80035e0:	f107 0310 	add.w	r3, r7, #16
 80035e4:	22c0      	movs	r2, #192	; 0xc0
 80035e6:	2100      	movs	r1, #0
 80035e8:	4618      	mov	r0, r3
 80035ea:	f016 fc87 	bl	8019efc <memset>
  if(hlptim->Instance==LPTIM1)
 80035ee:	687b      	ldr	r3, [r7, #4]
 80035f0:	681b      	ldr	r3, [r3, #0]
 80035f2:	4a19      	ldr	r2, [pc, #100]	; (8003658 <HAL_LPTIM_MspInit+0x80>)
 80035f4:	4293      	cmp	r3, r2
 80035f6:	d12a      	bne.n	800364e <HAL_LPTIM_MspInit+0x76>

  /* USER CODE END LPTIM1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_LPTIM1;
 80035f8:	f04f 0220 	mov.w	r2, #32
 80035fc:	f04f 0300 	mov.w	r3, #0
 8003600:	e9c7 2304 	strd	r2, r3, [r7, #16]
    PeriphClkInitStruct.Lptim1ClockSelection = RCC_LPTIM1CLKSOURCE_LSE;
 8003604:	f04f 5340 	mov.w	r3, #805306368	; 0x30000000
 8003608:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800360c:	f107 0310 	add.w	r3, r7, #16
 8003610:	4618      	mov	r0, r3
 8003612:	f007 fa25 	bl	800aa60 <HAL_RCCEx_PeriphCLKConfig>
 8003616:	4603      	mov	r3, r0
 8003618:	2b00      	cmp	r3, #0
 800361a:	d001      	beq.n	8003620 <HAL_LPTIM_MspInit+0x48>
    {
      Error_Handler();
 800361c:	f7ff fe3e 	bl	800329c <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_LPTIM1_CLK_ENABLE();
 8003620:	4b0e      	ldr	r3, [pc, #56]	; (800365c <HAL_LPTIM_MspInit+0x84>)
 8003622:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8003626:	4a0d      	ldr	r2, [pc, #52]	; (800365c <HAL_LPTIM_MspInit+0x84>)
 8003628:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800362c:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8003630:	4b0a      	ldr	r3, [pc, #40]	; (800365c <HAL_LPTIM_MspInit+0x84>)
 8003632:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8003636:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800363a:	60fb      	str	r3, [r7, #12]
 800363c:	68fb      	ldr	r3, [r7, #12]
    /* LPTIM1 interrupt Init */
    HAL_NVIC_SetPriority(LPTIM1_IRQn, 0, 0);
 800363e:	2200      	movs	r2, #0
 8003640:	2100      	movs	r1, #0
 8003642:	205d      	movs	r0, #93	; 0x5d
 8003644:	f002 fb83 	bl	8005d4e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(LPTIM1_IRQn);
 8003648:	205d      	movs	r0, #93	; 0x5d
 800364a:	f002 fb9a 	bl	8005d82 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN LPTIM1_MspInit 1 */

  /* USER CODE END LPTIM1_MspInit 1 */
  }

}
 800364e:	bf00      	nop
 8003650:	37d0      	adds	r7, #208	; 0xd0
 8003652:	46bd      	mov	sp, r7
 8003654:	bd80      	pop	{r7, pc}
 8003656:	bf00      	nop
 8003658:	40002400 	.word	0x40002400
 800365c:	58024400 	.word	0x58024400

08003660 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8003660:	b480      	push	{r7}
 8003662:	b089      	sub	sp, #36	; 0x24
 8003664:	af00      	add	r7, sp, #0
 8003666:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 8003668:	687b      	ldr	r3, [r7, #4]
 800366a:	681b      	ldr	r3, [r3, #0]
 800366c:	4a35      	ldr	r2, [pc, #212]	; (8003744 <HAL_TIM_Base_MspInit+0xe4>)
 800366e:	4293      	cmp	r3, r2
 8003670:	d10f      	bne.n	8003692 <HAL_TIM_Base_MspInit+0x32>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8003672:	4b35      	ldr	r3, [pc, #212]	; (8003748 <HAL_TIM_Base_MspInit+0xe8>)
 8003674:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8003678:	4a33      	ldr	r2, [pc, #204]	; (8003748 <HAL_TIM_Base_MspInit+0xe8>)
 800367a:	f043 0301 	orr.w	r3, r3, #1
 800367e:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 8003682:	4b31      	ldr	r3, [pc, #196]	; (8003748 <HAL_TIM_Base_MspInit+0xe8>)
 8003684:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8003688:	f003 0301 	and.w	r3, r3, #1
 800368c:	61fb      	str	r3, [r7, #28]
 800368e:	69fb      	ldr	r3, [r7, #28]
  /* USER CODE BEGIN TIM5_MspInit 1 */

  /* USER CODE END TIM5_MspInit 1 */
  }

}
 8003690:	e052      	b.n	8003738 <HAL_TIM_Base_MspInit+0xd8>
  else if(htim_base->Instance==TIM2)
 8003692:	687b      	ldr	r3, [r7, #4]
 8003694:	681b      	ldr	r3, [r3, #0]
 8003696:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800369a:	d10f      	bne.n	80036bc <HAL_TIM_Base_MspInit+0x5c>
    __HAL_RCC_TIM2_CLK_ENABLE();
 800369c:	4b2a      	ldr	r3, [pc, #168]	; (8003748 <HAL_TIM_Base_MspInit+0xe8>)
 800369e:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 80036a2:	4a29      	ldr	r2, [pc, #164]	; (8003748 <HAL_TIM_Base_MspInit+0xe8>)
 80036a4:	f043 0301 	orr.w	r3, r3, #1
 80036a8:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 80036ac:	4b26      	ldr	r3, [pc, #152]	; (8003748 <HAL_TIM_Base_MspInit+0xe8>)
 80036ae:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 80036b2:	f003 0301 	and.w	r3, r3, #1
 80036b6:	61bb      	str	r3, [r7, #24]
 80036b8:	69bb      	ldr	r3, [r7, #24]
}
 80036ba:	e03d      	b.n	8003738 <HAL_TIM_Base_MspInit+0xd8>
  else if(htim_base->Instance==TIM3)
 80036bc:	687b      	ldr	r3, [r7, #4]
 80036be:	681b      	ldr	r3, [r3, #0]
 80036c0:	4a22      	ldr	r2, [pc, #136]	; (800374c <HAL_TIM_Base_MspInit+0xec>)
 80036c2:	4293      	cmp	r3, r2
 80036c4:	d10f      	bne.n	80036e6 <HAL_TIM_Base_MspInit+0x86>
    __HAL_RCC_TIM3_CLK_ENABLE();
 80036c6:	4b20      	ldr	r3, [pc, #128]	; (8003748 <HAL_TIM_Base_MspInit+0xe8>)
 80036c8:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 80036cc:	4a1e      	ldr	r2, [pc, #120]	; (8003748 <HAL_TIM_Base_MspInit+0xe8>)
 80036ce:	f043 0302 	orr.w	r3, r3, #2
 80036d2:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 80036d6:	4b1c      	ldr	r3, [pc, #112]	; (8003748 <HAL_TIM_Base_MspInit+0xe8>)
 80036d8:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 80036dc:	f003 0302 	and.w	r3, r3, #2
 80036e0:	617b      	str	r3, [r7, #20]
 80036e2:	697b      	ldr	r3, [r7, #20]
}
 80036e4:	e028      	b.n	8003738 <HAL_TIM_Base_MspInit+0xd8>
  else if(htim_base->Instance==TIM4)
 80036e6:	687b      	ldr	r3, [r7, #4]
 80036e8:	681b      	ldr	r3, [r3, #0]
 80036ea:	4a19      	ldr	r2, [pc, #100]	; (8003750 <HAL_TIM_Base_MspInit+0xf0>)
 80036ec:	4293      	cmp	r3, r2
 80036ee:	d10f      	bne.n	8003710 <HAL_TIM_Base_MspInit+0xb0>
    __HAL_RCC_TIM4_CLK_ENABLE();
 80036f0:	4b15      	ldr	r3, [pc, #84]	; (8003748 <HAL_TIM_Base_MspInit+0xe8>)
 80036f2:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 80036f6:	4a14      	ldr	r2, [pc, #80]	; (8003748 <HAL_TIM_Base_MspInit+0xe8>)
 80036f8:	f043 0304 	orr.w	r3, r3, #4
 80036fc:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8003700:	4b11      	ldr	r3, [pc, #68]	; (8003748 <HAL_TIM_Base_MspInit+0xe8>)
 8003702:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8003706:	f003 0304 	and.w	r3, r3, #4
 800370a:	613b      	str	r3, [r7, #16]
 800370c:	693b      	ldr	r3, [r7, #16]
}
 800370e:	e013      	b.n	8003738 <HAL_TIM_Base_MspInit+0xd8>
  else if(htim_base->Instance==TIM5)
 8003710:	687b      	ldr	r3, [r7, #4]
 8003712:	681b      	ldr	r3, [r3, #0]
 8003714:	4a0f      	ldr	r2, [pc, #60]	; (8003754 <HAL_TIM_Base_MspInit+0xf4>)
 8003716:	4293      	cmp	r3, r2
 8003718:	d10e      	bne.n	8003738 <HAL_TIM_Base_MspInit+0xd8>
    __HAL_RCC_TIM5_CLK_ENABLE();
 800371a:	4b0b      	ldr	r3, [pc, #44]	; (8003748 <HAL_TIM_Base_MspInit+0xe8>)
 800371c:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8003720:	4a09      	ldr	r2, [pc, #36]	; (8003748 <HAL_TIM_Base_MspInit+0xe8>)
 8003722:	f043 0308 	orr.w	r3, r3, #8
 8003726:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 800372a:	4b07      	ldr	r3, [pc, #28]	; (8003748 <HAL_TIM_Base_MspInit+0xe8>)
 800372c:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8003730:	f003 0308 	and.w	r3, r3, #8
 8003734:	60fb      	str	r3, [r7, #12]
 8003736:	68fb      	ldr	r3, [r7, #12]
}
 8003738:	bf00      	nop
 800373a:	3724      	adds	r7, #36	; 0x24
 800373c:	46bd      	mov	sp, r7
 800373e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003742:	4770      	bx	lr
 8003744:	40010000 	.word	0x40010000
 8003748:	58024400 	.word	0x58024400
 800374c:	40000400 	.word	0x40000400
 8003750:	40000800 	.word	0x40000800
 8003754:	40000c00 	.word	0x40000c00

08003758 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8003758:	b580      	push	{r7, lr}
 800375a:	b0ba      	sub	sp, #232	; 0xe8
 800375c:	af00      	add	r7, sp, #0
 800375e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003760:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 8003764:	2200      	movs	r2, #0
 8003766:	601a      	str	r2, [r3, #0]
 8003768:	605a      	str	r2, [r3, #4]
 800376a:	609a      	str	r2, [r3, #8]
 800376c:	60da      	str	r2, [r3, #12]
 800376e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8003770:	f107 0310 	add.w	r3, r7, #16
 8003774:	22c0      	movs	r2, #192	; 0xc0
 8003776:	2100      	movs	r1, #0
 8003778:	4618      	mov	r0, r3
 800377a:	f016 fbbf 	bl	8019efc <memset>
  if(huart->Instance==USART3)
 800377e:	687b      	ldr	r3, [r7, #4]
 8003780:	681b      	ldr	r3, [r3, #0]
 8003782:	4a27      	ldr	r2, [pc, #156]	; (8003820 <HAL_UART_MspInit+0xc8>)
 8003784:	4293      	cmp	r3, r2
 8003786:	d146      	bne.n	8003816 <HAL_UART_MspInit+0xbe>

  /* USER CODE END USART3_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART3;
 8003788:	f04f 0202 	mov.w	r2, #2
 800378c:	f04f 0300 	mov.w	r3, #0
 8003790:	e9c7 2304 	strd	r2, r3, [r7, #16]
    PeriphClkInitStruct.Usart234578ClockSelection = RCC_USART234578CLKSOURCE_D2PCLK1;
 8003794:	2300      	movs	r3, #0
 8003796:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800379a:	f107 0310 	add.w	r3, r7, #16
 800379e:	4618      	mov	r0, r3
 80037a0:	f007 f95e 	bl	800aa60 <HAL_RCCEx_PeriphCLKConfig>
 80037a4:	4603      	mov	r3, r0
 80037a6:	2b00      	cmp	r3, #0
 80037a8:	d001      	beq.n	80037ae <HAL_UART_MspInit+0x56>
    {
      Error_Handler();
 80037aa:	f7ff fd77 	bl	800329c <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 80037ae:	4b1d      	ldr	r3, [pc, #116]	; (8003824 <HAL_UART_MspInit+0xcc>)
 80037b0:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 80037b4:	4a1b      	ldr	r2, [pc, #108]	; (8003824 <HAL_UART_MspInit+0xcc>)
 80037b6:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80037ba:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 80037be:	4b19      	ldr	r3, [pc, #100]	; (8003824 <HAL_UART_MspInit+0xcc>)
 80037c0:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 80037c4:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80037c8:	60fb      	str	r3, [r7, #12]
 80037ca:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 80037cc:	4b15      	ldr	r3, [pc, #84]	; (8003824 <HAL_UART_MspInit+0xcc>)
 80037ce:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80037d2:	4a14      	ldr	r2, [pc, #80]	; (8003824 <HAL_UART_MspInit+0xcc>)
 80037d4:	f043 0308 	orr.w	r3, r3, #8
 80037d8:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80037dc:	4b11      	ldr	r3, [pc, #68]	; (8003824 <HAL_UART_MspInit+0xcc>)
 80037de:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80037e2:	f003 0308 	and.w	r3, r3, #8
 80037e6:	60bb      	str	r3, [r7, #8]
 80037e8:	68bb      	ldr	r3, [r7, #8]
    /**USART3 GPIO Configuration
    PD8     ------> USART3_TX
    PD9     ------> USART3_RX
    */
    GPIO_InitStruct.Pin = STLINK_RX_Pin|STLINK_TX_Pin;
 80037ea:	f44f 7340 	mov.w	r3, #768	; 0x300
 80037ee:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80037f2:	2302      	movs	r3, #2
 80037f4:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80037f8:	2300      	movs	r3, #0
 80037fa:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80037fe:	2300      	movs	r3, #0
 8003800:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8003804:	2307      	movs	r3, #7
 8003806:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800380a:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 800380e:	4619      	mov	r1, r3
 8003810:	4805      	ldr	r0, [pc, #20]	; (8003828 <HAL_UART_MspInit+0xd0>)
 8003812:	f004 f825 	bl	8007860 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 8003816:	bf00      	nop
 8003818:	37e8      	adds	r7, #232	; 0xe8
 800381a:	46bd      	mov	sp, r7
 800381c:	bd80      	pop	{r7, pc}
 800381e:	bf00      	nop
 8003820:	40004800 	.word	0x40004800
 8003824:	58024400 	.word	0x58024400
 8003828:	58020c00 	.word	0x58020c00

0800382c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800382c:	b580      	push	{r7, lr}
 800382e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */
  /* USER CODE END NonMaskableInt_IRQn 0 */
  HAL_RCC_NMI_IRQHandler();
 8003830:	f007 f8fa 	bl	800aa28 <HAL_RCC_NMI_IRQHandler>
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
	while (1) {
		Error_Handler();
 8003834:	f7ff fd32 	bl	800329c <Error_Handler>
 8003838:	e7fc      	b.n	8003834 <NMI_Handler+0x8>

0800383a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800383a:	b580      	push	{r7, lr}
 800383c:	af00      	add	r7, sp, #0

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
  {
    /* USER CODE BEGIN W1_HardFault_IRQn 0 */
	  Error_Handler();
 800383e:	f7ff fd2d 	bl	800329c <Error_Handler>
 8003842:	e7fc      	b.n	800383e <HardFault_Handler+0x4>

08003844 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8003844:	b580      	push	{r7, lr}
 8003846:	af00      	add	r7, sp, #0

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
  {
    /* USER CODE BEGIN W1_MemoryManagement_IRQn 0 */
	  Error_Handler();
 8003848:	f7ff fd28 	bl	800329c <Error_Handler>
 800384c:	e7fc      	b.n	8003848 <MemManage_Handler+0x4>

0800384e <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800384e:	b580      	push	{r7, lr}
 8003850:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */
  /* USER CODE END BusFault_IRQn 0 */
  while (1)
  {
    /* USER CODE BEGIN W1_BusFault_IRQn 0 */
	  Error_Handler();
 8003852:	f7ff fd23 	bl	800329c <Error_Handler>
 8003856:	e7fc      	b.n	8003852 <BusFault_Handler+0x4>

08003858 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8003858:	b580      	push	{r7, lr}
 800385a:	af00      	add	r7, sp, #0

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
  {
    /* USER CODE BEGIN W1_UsageFault_IRQn 0 */
	  Error_Handler();
 800385c:	f7ff fd1e 	bl	800329c <Error_Handler>
 8003860:	e7fc      	b.n	800385c <UsageFault_Handler+0x4>

08003862 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8003862:	b480      	push	{r7}
 8003864:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8003866:	bf00      	nop
 8003868:	46bd      	mov	sp, r7
 800386a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800386e:	4770      	bx	lr

08003870 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8003870:	b480      	push	{r7}
 8003872:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8003874:	bf00      	nop
 8003876:	46bd      	mov	sp, r7
 8003878:	f85d 7b04 	ldr.w	r7, [sp], #4
 800387c:	4770      	bx	lr

0800387e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800387e:	b480      	push	{r7}
 8003880:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8003882:	bf00      	nop
 8003884:	46bd      	mov	sp, r7
 8003886:	f85d 7b04 	ldr.w	r7, [sp], #4
 800388a:	4770      	bx	lr

0800388c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800388c:	b580      	push	{r7, lr}
 800388e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8003890:	f000 fba2 	bl	8003fd8 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8003894:	bf00      	nop
 8003896:	bd80      	pop	{r7, pc}

08003898 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8003898:	b580      	push	{r7, lr}
 800389a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_11);
 800389c:	f44f 6000 	mov.w	r0, #2048	; 0x800
 80038a0:	f004 f9d9 	bl	8007c56 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(BLUE_BUTTON_Pin);
 80038a4:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 80038a8:	f004 f9d5 	bl	8007c56 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 80038ac:	bf00      	nop
 80038ae:	bd80      	pop	{r7, pc}

080038b0 <LPTIM1_IRQHandler>:

/**
  * @brief This function handles LPTIM1 global interrupt.
  */
void LPTIM1_IRQHandler(void)
{
 80038b0:	b580      	push	{r7, lr}
 80038b2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN LPTIM1_IRQn 0 */
  /* USER CODE END LPTIM1_IRQn 0 */
  HAL_LPTIM_IRQHandler(&hlptim1);
 80038b4:	4802      	ldr	r0, [pc, #8]	; (80038c0 <LPTIM1_IRQHandler+0x10>)
 80038b6:	f005 fd90 	bl	80093da <HAL_LPTIM_IRQHandler>
  /* USER CODE BEGIN LPTIM1_IRQn 1 */
  /* USER CODE END LPTIM1_IRQn 1 */
}
 80038ba:	bf00      	nop
 80038bc:	bd80      	pop	{r7, pc}
 80038be:	bf00      	nop
 80038c0:	200003ac 	.word	0x200003ac

080038c4 <HRTIM1_TIMA_IRQHandler>:

/**
  * @brief This function handles HRTIM timer A global interrupt.
  */
void HRTIM1_TIMA_IRQHandler(void)
{
 80038c4:	b580      	push	{r7, lr}
 80038c6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HRTIM1_TIMA_IRQn 0 */

  /* USER CODE END HRTIM1_TIMA_IRQn 0 */
  HAL_HRTIM_IRQHandler(&hhrtim,HRTIM_TIMERINDEX_TIMER_A);
 80038c8:	2100      	movs	r1, #0
 80038ca:	4802      	ldr	r0, [pc, #8]	; (80038d4 <HRTIM1_TIMA_IRQHandler+0x10>)
 80038cc:	f004 fd9c 	bl	8008408 <HAL_HRTIM_IRQHandler>
  /* USER CODE BEGIN HRTIM1_TIMA_IRQn 1 */

  /* USER CODE END HRTIM1_TIMA_IRQn 1 */
}
 80038d0:	bf00      	nop
 80038d2:	bd80      	pop	{r7, pc}
 80038d4:	200002d0 	.word	0x200002d0

080038d8 <HRTIM1_TIME_IRQHandler>:

/**
  * @brief This function handles HRTIM timer E global interrupt.
  */
void HRTIM1_TIME_IRQHandler(void)
{
 80038d8:	b580      	push	{r7, lr}
 80038da:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HRTIM1_TIME_IRQn 0 */

  /* USER CODE END HRTIM1_TIME_IRQn 0 */
  HAL_HRTIM_IRQHandler(&hhrtim,HRTIM_TIMERINDEX_TIMER_E);
 80038dc:	2104      	movs	r1, #4
 80038de:	4802      	ldr	r0, [pc, #8]	; (80038e8 <HRTIM1_TIME_IRQHandler+0x10>)
 80038e0:	f004 fd92 	bl	8008408 <HAL_HRTIM_IRQHandler>
  /* USER CODE BEGIN HRTIM1_TIME_IRQn 1 */

  /* USER CODE END HRTIM1_TIME_IRQn 1 */
}
 80038e4:	bf00      	nop
 80038e6:	bd80      	pop	{r7, pc}
 80038e8:	200002d0 	.word	0x200002d0

080038ec <ADC3_IRQHandler>:

/**
  * @brief This function handles ADC3 global interrupt.
  */
void ADC3_IRQHandler(void)
{
 80038ec:	b580      	push	{r7, lr}
 80038ee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ADC3_IRQn 0 */

  /* USER CODE END ADC3_IRQn 0 */
  HAL_ADC_IRQHandler(&hadc3);
 80038f0:	4802      	ldr	r0, [pc, #8]	; (80038fc <ADC3_IRQHandler+0x10>)
 80038f2:	f001 f8f5 	bl	8004ae0 <HAL_ADC_IRQHandler>
  /* USER CODE BEGIN ADC3_IRQn 1 */

  /* USER CODE END ADC3_IRQn 1 */
}
 80038f6:	bf00      	nop
 80038f8:	bd80      	pop	{r7, pc}
 80038fa:	bf00      	nop
 80038fc:	20000258 	.word	0x20000258

08003900 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8003900:	b480      	push	{r7}
 8003902:	af00      	add	r7, sp, #0
	return 1;
 8003904:	2301      	movs	r3, #1
}
 8003906:	4618      	mov	r0, r3
 8003908:	46bd      	mov	sp, r7
 800390a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800390e:	4770      	bx	lr

08003910 <_kill>:

int _kill(int pid, int sig)
{
 8003910:	b480      	push	{r7}
 8003912:	b083      	sub	sp, #12
 8003914:	af00      	add	r7, sp, #0
 8003916:	6078      	str	r0, [r7, #4]
 8003918:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 800391a:	4b05      	ldr	r3, [pc, #20]	; (8003930 <_kill+0x20>)
 800391c:	2216      	movs	r2, #22
 800391e:	601a      	str	r2, [r3, #0]
	return -1;
 8003920:	f04f 33ff 	mov.w	r3, #4294967295
}
 8003924:	4618      	mov	r0, r3
 8003926:	370c      	adds	r7, #12
 8003928:	46bd      	mov	sp, r7
 800392a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800392e:	4770      	bx	lr
 8003930:	20007370 	.word	0x20007370

08003934 <_exit>:

void _exit (int status)
{
 8003934:	b580      	push	{r7, lr}
 8003936:	b082      	sub	sp, #8
 8003938:	af00      	add	r7, sp, #0
 800393a:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 800393c:	f04f 31ff 	mov.w	r1, #4294967295
 8003940:	6878      	ldr	r0, [r7, #4]
 8003942:	f7ff ffe5 	bl	8003910 <_kill>
	while (1) {}		/* Make sure we hang here */
 8003946:	e7fe      	b.n	8003946 <_exit+0x12>

08003948 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8003948:	b580      	push	{r7, lr}
 800394a:	b086      	sub	sp, #24
 800394c:	af00      	add	r7, sp, #0
 800394e:	60f8      	str	r0, [r7, #12]
 8003950:	60b9      	str	r1, [r7, #8]
 8003952:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8003954:	2300      	movs	r3, #0
 8003956:	617b      	str	r3, [r7, #20]
 8003958:	e00a      	b.n	8003970 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 800395a:	f3af 8000 	nop.w
 800395e:	4601      	mov	r1, r0
 8003960:	68bb      	ldr	r3, [r7, #8]
 8003962:	1c5a      	adds	r2, r3, #1
 8003964:	60ba      	str	r2, [r7, #8]
 8003966:	b2ca      	uxtb	r2, r1
 8003968:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800396a:	697b      	ldr	r3, [r7, #20]
 800396c:	3301      	adds	r3, #1
 800396e:	617b      	str	r3, [r7, #20]
 8003970:	697a      	ldr	r2, [r7, #20]
 8003972:	687b      	ldr	r3, [r7, #4]
 8003974:	429a      	cmp	r2, r3
 8003976:	dbf0      	blt.n	800395a <_read+0x12>
	}

return len;
 8003978:	687b      	ldr	r3, [r7, #4]
}
 800397a:	4618      	mov	r0, r3
 800397c:	3718      	adds	r7, #24
 800397e:	46bd      	mov	sp, r7
 8003980:	bd80      	pop	{r7, pc}

08003982 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8003982:	b580      	push	{r7, lr}
 8003984:	b086      	sub	sp, #24
 8003986:	af00      	add	r7, sp, #0
 8003988:	60f8      	str	r0, [r7, #12]
 800398a:	60b9      	str	r1, [r7, #8]
 800398c:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800398e:	2300      	movs	r3, #0
 8003990:	617b      	str	r3, [r7, #20]
 8003992:	e009      	b.n	80039a8 <_write+0x26>
	{
		__io_putchar(*ptr++);
 8003994:	68bb      	ldr	r3, [r7, #8]
 8003996:	1c5a      	adds	r2, r3, #1
 8003998:	60ba      	str	r2, [r7, #8]
 800399a:	781b      	ldrb	r3, [r3, #0]
 800399c:	4618      	mov	r0, r3
 800399e:	f7fe fbf5 	bl	800218c <__io_putchar>
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80039a2:	697b      	ldr	r3, [r7, #20]
 80039a4:	3301      	adds	r3, #1
 80039a6:	617b      	str	r3, [r7, #20]
 80039a8:	697a      	ldr	r2, [r7, #20]
 80039aa:	687b      	ldr	r3, [r7, #4]
 80039ac:	429a      	cmp	r2, r3
 80039ae:	dbf1      	blt.n	8003994 <_write+0x12>
	}
	return len;
 80039b0:	687b      	ldr	r3, [r7, #4]
}
 80039b2:	4618      	mov	r0, r3
 80039b4:	3718      	adds	r7, #24
 80039b6:	46bd      	mov	sp, r7
 80039b8:	bd80      	pop	{r7, pc}

080039ba <_close>:

int _close(int file)
{
 80039ba:	b480      	push	{r7}
 80039bc:	b083      	sub	sp, #12
 80039be:	af00      	add	r7, sp, #0
 80039c0:	6078      	str	r0, [r7, #4]
	return -1;
 80039c2:	f04f 33ff 	mov.w	r3, #4294967295
}
 80039c6:	4618      	mov	r0, r3
 80039c8:	370c      	adds	r7, #12
 80039ca:	46bd      	mov	sp, r7
 80039cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039d0:	4770      	bx	lr

080039d2 <_fstat>:


int _fstat(int file, struct stat *st)
{
 80039d2:	b480      	push	{r7}
 80039d4:	b083      	sub	sp, #12
 80039d6:	af00      	add	r7, sp, #0
 80039d8:	6078      	str	r0, [r7, #4]
 80039da:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 80039dc:	683b      	ldr	r3, [r7, #0]
 80039de:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80039e2:	605a      	str	r2, [r3, #4]
	return 0;
 80039e4:	2300      	movs	r3, #0
}
 80039e6:	4618      	mov	r0, r3
 80039e8:	370c      	adds	r7, #12
 80039ea:	46bd      	mov	sp, r7
 80039ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039f0:	4770      	bx	lr

080039f2 <_isatty>:

int _isatty(int file)
{
 80039f2:	b480      	push	{r7}
 80039f4:	b083      	sub	sp, #12
 80039f6:	af00      	add	r7, sp, #0
 80039f8:	6078      	str	r0, [r7, #4]
	return 1;
 80039fa:	2301      	movs	r3, #1
}
 80039fc:	4618      	mov	r0, r3
 80039fe:	370c      	adds	r7, #12
 8003a00:	46bd      	mov	sp, r7
 8003a02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a06:	4770      	bx	lr

08003a08 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8003a08:	b480      	push	{r7}
 8003a0a:	b085      	sub	sp, #20
 8003a0c:	af00      	add	r7, sp, #0
 8003a0e:	60f8      	str	r0, [r7, #12]
 8003a10:	60b9      	str	r1, [r7, #8]
 8003a12:	607a      	str	r2, [r7, #4]
	return 0;
 8003a14:	2300      	movs	r3, #0
}
 8003a16:	4618      	mov	r0, r3
 8003a18:	3714      	adds	r7, #20
 8003a1a:	46bd      	mov	sp, r7
 8003a1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a20:	4770      	bx	lr
	...

08003a24 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8003a24:	b480      	push	{r7}
 8003a26:	b087      	sub	sp, #28
 8003a28:	af00      	add	r7, sp, #0
 8003a2a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8003a2c:	4a14      	ldr	r2, [pc, #80]	; (8003a80 <_sbrk+0x5c>)
 8003a2e:	4b15      	ldr	r3, [pc, #84]	; (8003a84 <_sbrk+0x60>)
 8003a30:	1ad3      	subs	r3, r2, r3
 8003a32:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8003a34:	697b      	ldr	r3, [r7, #20]
 8003a36:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8003a38:	4b13      	ldr	r3, [pc, #76]	; (8003a88 <_sbrk+0x64>)
 8003a3a:	681b      	ldr	r3, [r3, #0]
 8003a3c:	2b00      	cmp	r3, #0
 8003a3e:	d102      	bne.n	8003a46 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8003a40:	4b11      	ldr	r3, [pc, #68]	; (8003a88 <_sbrk+0x64>)
 8003a42:	4a12      	ldr	r2, [pc, #72]	; (8003a8c <_sbrk+0x68>)
 8003a44:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8003a46:	4b10      	ldr	r3, [pc, #64]	; (8003a88 <_sbrk+0x64>)
 8003a48:	681a      	ldr	r2, [r3, #0]
 8003a4a:	687b      	ldr	r3, [r7, #4]
 8003a4c:	4413      	add	r3, r2
 8003a4e:	693a      	ldr	r2, [r7, #16]
 8003a50:	429a      	cmp	r2, r3
 8003a52:	d205      	bcs.n	8003a60 <_sbrk+0x3c>
  {
    errno = ENOMEM;
 8003a54:	4b0e      	ldr	r3, [pc, #56]	; (8003a90 <_sbrk+0x6c>)
 8003a56:	220c      	movs	r2, #12
 8003a58:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8003a5a:	f04f 33ff 	mov.w	r3, #4294967295
 8003a5e:	e009      	b.n	8003a74 <_sbrk+0x50>
  }

  prev_heap_end = __sbrk_heap_end;
 8003a60:	4b09      	ldr	r3, [pc, #36]	; (8003a88 <_sbrk+0x64>)
 8003a62:	681b      	ldr	r3, [r3, #0]
 8003a64:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8003a66:	4b08      	ldr	r3, [pc, #32]	; (8003a88 <_sbrk+0x64>)
 8003a68:	681a      	ldr	r2, [r3, #0]
 8003a6a:	687b      	ldr	r3, [r7, #4]
 8003a6c:	4413      	add	r3, r2
 8003a6e:	4a06      	ldr	r2, [pc, #24]	; (8003a88 <_sbrk+0x64>)
 8003a70:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8003a72:	68fb      	ldr	r3, [r7, #12]
}
 8003a74:	4618      	mov	r0, r3
 8003a76:	371c      	adds	r7, #28
 8003a78:	46bd      	mov	sp, r7
 8003a7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a7e:	4770      	bx	lr
 8003a80:	20020000 	.word	0x20020000
 8003a84:	00000400 	.word	0x00000400
 8003a88:	20000698 	.word	0x20000698
 8003a8c:	20007380 	.word	0x20007380
 8003a90:	20007370 	.word	0x20007370

08003a94 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8003a94:	b480      	push	{r7}
 8003a96:	b083      	sub	sp, #12
 8003a98:	af00      	add	r7, sp, #0
 __IO uint32_t tmpreg;
#endif /* DATA_IN_D2_SRAM */

  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8003a9a:	4b3f      	ldr	r3, [pc, #252]	; (8003b98 <SystemInit+0x104>)
 8003a9c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003aa0:	4a3d      	ldr	r2, [pc, #244]	; (8003b98 <SystemInit+0x104>)
 8003aa2:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8003aa6:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/

   /* Increasing the CPU frequency */
  if(FLASH_LATENCY_DEFAULT  > (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 8003aaa:	4b3c      	ldr	r3, [pc, #240]	; (8003b9c <SystemInit+0x108>)
 8003aac:	681b      	ldr	r3, [r3, #0]
 8003aae:	f003 030f 	and.w	r3, r3, #15
 8003ab2:	2b06      	cmp	r3, #6
 8003ab4:	d807      	bhi.n	8003ac6 <SystemInit+0x32>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */

	  MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 8003ab6:	4b39      	ldr	r3, [pc, #228]	; (8003b9c <SystemInit+0x108>)
 8003ab8:	681b      	ldr	r3, [r3, #0]
 8003aba:	f023 030f 	bic.w	r3, r3, #15
 8003abe:	4a37      	ldr	r2, [pc, #220]	; (8003b9c <SystemInit+0x108>)
 8003ac0:	f043 0307 	orr.w	r3, r3, #7
 8003ac4:	6013      	str	r3, [r2, #0]
  }

  /* Set HSION bit */
  RCC->CR |= RCC_CR_HSION;
 8003ac6:	4b36      	ldr	r3, [pc, #216]	; (8003ba0 <SystemInit+0x10c>)
 8003ac8:	681b      	ldr	r3, [r3, #0]
 8003aca:	4a35      	ldr	r2, [pc, #212]	; (8003ba0 <SystemInit+0x10c>)
 8003acc:	f043 0301 	orr.w	r3, r3, #1
 8003ad0:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 8003ad2:	4b33      	ldr	r3, [pc, #204]	; (8003ba0 <SystemInit+0x10c>)
 8003ad4:	2200      	movs	r2, #0
 8003ad6:	611a      	str	r2, [r3, #16]

  /* Reset HSEON, HSECSSON, CSION, HSI48ON, CSIKERON, PLL1ON, PLL2ON and PLL3ON bits */
  RCC->CR &= 0xEAF6ED7FU;
 8003ad8:	4b31      	ldr	r3, [pc, #196]	; (8003ba0 <SystemInit+0x10c>)
 8003ada:	681a      	ldr	r2, [r3, #0]
 8003adc:	4930      	ldr	r1, [pc, #192]	; (8003ba0 <SystemInit+0x10c>)
 8003ade:	4b31      	ldr	r3, [pc, #196]	; (8003ba4 <SystemInit+0x110>)
 8003ae0:	4013      	ands	r3, r2
 8003ae2:	600b      	str	r3, [r1, #0]

   /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLASH_LATENCY_DEFAULT  < (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 8003ae4:	4b2d      	ldr	r3, [pc, #180]	; (8003b9c <SystemInit+0x108>)
 8003ae6:	681b      	ldr	r3, [r3, #0]
 8003ae8:	f003 0308 	and.w	r3, r3, #8
 8003aec:	2b00      	cmp	r3, #0
 8003aee:	d007      	beq.n	8003b00 <SystemInit+0x6c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 8003af0:	4b2a      	ldr	r3, [pc, #168]	; (8003b9c <SystemInit+0x108>)
 8003af2:	681b      	ldr	r3, [r3, #0]
 8003af4:	f023 030f 	bic.w	r3, r3, #15
 8003af8:	4a28      	ldr	r2, [pc, #160]	; (8003b9c <SystemInit+0x108>)
 8003afa:	f043 0307 	orr.w	r3, r3, #7
 8003afe:	6013      	str	r3, [r2, #0]
  }

#if defined(D3_SRAM_BASE)
  /* Reset D1CFGR register */
  RCC->D1CFGR = 0x00000000;
 8003b00:	4b27      	ldr	r3, [pc, #156]	; (8003ba0 <SystemInit+0x10c>)
 8003b02:	2200      	movs	r2, #0
 8003b04:	619a      	str	r2, [r3, #24]

  /* Reset D2CFGR register */
  RCC->D2CFGR = 0x00000000;
 8003b06:	4b26      	ldr	r3, [pc, #152]	; (8003ba0 <SystemInit+0x10c>)
 8003b08:	2200      	movs	r2, #0
 8003b0a:	61da      	str	r2, [r3, #28]

  /* Reset D3CFGR register */
  RCC->D3CFGR = 0x00000000;
 8003b0c:	4b24      	ldr	r3, [pc, #144]	; (8003ba0 <SystemInit+0x10c>)
 8003b0e:	2200      	movs	r2, #0
 8003b10:	621a      	str	r2, [r3, #32]

  /* Reset SRDCFGR register */
  RCC->SRDCFGR = 0x00000000;
#endif
  /* Reset PLLCKSELR register */
  RCC->PLLCKSELR = 0x02020200;
 8003b12:	4b23      	ldr	r3, [pc, #140]	; (8003ba0 <SystemInit+0x10c>)
 8003b14:	4a24      	ldr	r2, [pc, #144]	; (8003ba8 <SystemInit+0x114>)
 8003b16:	629a      	str	r2, [r3, #40]	; 0x28

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x01FF0000;
 8003b18:	4b21      	ldr	r3, [pc, #132]	; (8003ba0 <SystemInit+0x10c>)
 8003b1a:	4a24      	ldr	r2, [pc, #144]	; (8003bac <SystemInit+0x118>)
 8003b1c:	62da      	str	r2, [r3, #44]	; 0x2c
  /* Reset PLL1DIVR register */
  RCC->PLL1DIVR = 0x01010280;
 8003b1e:	4b20      	ldr	r3, [pc, #128]	; (8003ba0 <SystemInit+0x10c>)
 8003b20:	4a23      	ldr	r2, [pc, #140]	; (8003bb0 <SystemInit+0x11c>)
 8003b22:	631a      	str	r2, [r3, #48]	; 0x30
  /* Reset PLL1FRACR register */
  RCC->PLL1FRACR = 0x00000000;
 8003b24:	4b1e      	ldr	r3, [pc, #120]	; (8003ba0 <SystemInit+0x10c>)
 8003b26:	2200      	movs	r2, #0
 8003b28:	635a      	str	r2, [r3, #52]	; 0x34

  /* Reset PLL2DIVR register */
  RCC->PLL2DIVR = 0x01010280;
 8003b2a:	4b1d      	ldr	r3, [pc, #116]	; (8003ba0 <SystemInit+0x10c>)
 8003b2c:	4a20      	ldr	r2, [pc, #128]	; (8003bb0 <SystemInit+0x11c>)
 8003b2e:	639a      	str	r2, [r3, #56]	; 0x38

  /* Reset PLL2FRACR register */

  RCC->PLL2FRACR = 0x00000000;
 8003b30:	4b1b      	ldr	r3, [pc, #108]	; (8003ba0 <SystemInit+0x10c>)
 8003b32:	2200      	movs	r2, #0
 8003b34:	63da      	str	r2, [r3, #60]	; 0x3c
  /* Reset PLL3DIVR register */
  RCC->PLL3DIVR = 0x01010280;
 8003b36:	4b1a      	ldr	r3, [pc, #104]	; (8003ba0 <SystemInit+0x10c>)
 8003b38:	4a1d      	ldr	r2, [pc, #116]	; (8003bb0 <SystemInit+0x11c>)
 8003b3a:	641a      	str	r2, [r3, #64]	; 0x40

  /* Reset PLL3FRACR register */
  RCC->PLL3FRACR = 0x00000000;
 8003b3c:	4b18      	ldr	r3, [pc, #96]	; (8003ba0 <SystemInit+0x10c>)
 8003b3e:	2200      	movs	r2, #0
 8003b40:	645a      	str	r2, [r3, #68]	; 0x44

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8003b42:	4b17      	ldr	r3, [pc, #92]	; (8003ba0 <SystemInit+0x10c>)
 8003b44:	681b      	ldr	r3, [r3, #0]
 8003b46:	4a16      	ldr	r2, [pc, #88]	; (8003ba0 <SystemInit+0x10c>)
 8003b48:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003b4c:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 8003b4e:	4b14      	ldr	r3, [pc, #80]	; (8003ba0 <SystemInit+0x10c>)
 8003b50:	2200      	movs	r2, #0
 8003b52:	661a      	str	r2, [r3, #96]	; 0x60

#if (STM32H7_DEV_ID == 0x450UL)
  /* dual core CM7 or single core line */
  if((DBGMCU->IDCODE & 0xFFFF0000U) < 0x20000000U)
 8003b54:	4b17      	ldr	r3, [pc, #92]	; (8003bb4 <SystemInit+0x120>)
 8003b56:	681a      	ldr	r2, [r3, #0]
 8003b58:	4b17      	ldr	r3, [pc, #92]	; (8003bb8 <SystemInit+0x124>)
 8003b5a:	4013      	ands	r3, r2
 8003b5c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8003b60:	d202      	bcs.n	8003b68 <SystemInit+0xd4>
  {
    /* if stm32h7 revY*/
    /* Change  the switch matrix read issuing capability to 1 for the AXI SRAM target (Target 7) */
    *((__IO uint32_t*)0x51008108) = 0x000000001U;
 8003b62:	4b16      	ldr	r3, [pc, #88]	; (8003bbc <SystemInit+0x128>)
 8003b64:	2201      	movs	r2, #1
 8003b66:	601a      	str	r2, [r3, #0]
#endif /* STM32H7_DEV_ID */

#if defined(DATA_IN_D2_SRAM)
  /* in case of initialized data in D2 SRAM (AHB SRAM), enable the D2 SRAM clock (AHB SRAM clock) */
#if defined(RCC_AHB2ENR_D2SRAM3EN)
  RCC->AHB2ENR |= (RCC_AHB2ENR_D2SRAM1EN | RCC_AHB2ENR_D2SRAM2EN | RCC_AHB2ENR_D2SRAM3EN);
 8003b68:	4b0d      	ldr	r3, [pc, #52]	; (8003ba0 <SystemInit+0x10c>)
 8003b6a:	f8d3 30dc 	ldr.w	r3, [r3, #220]	; 0xdc
 8003b6e:	4a0c      	ldr	r2, [pc, #48]	; (8003ba0 <SystemInit+0x10c>)
 8003b70:	f043 4360 	orr.w	r3, r3, #3758096384	; 0xe0000000
 8003b74:	f8c2 30dc 	str.w	r3, [r2, #220]	; 0xdc
  RCC->AHB2ENR |= (RCC_AHB2ENR_D2SRAM1EN | RCC_AHB2ENR_D2SRAM2EN);
#else
  RCC->AHB2ENR |= (RCC_AHB2ENR_AHBSRAM1EN | RCC_AHB2ENR_AHBSRAM2EN);
#endif /* RCC_AHB2ENR_D2SRAM3EN */

  tmpreg = RCC->AHB2ENR;
 8003b78:	4b09      	ldr	r3, [pc, #36]	; (8003ba0 <SystemInit+0x10c>)
 8003b7a:	f8d3 30dc 	ldr.w	r3, [r3, #220]	; 0xdc
 8003b7e:	607b      	str	r3, [r7, #4]
  (void) tmpreg;
 8003b80:	687b      	ldr	r3, [r7, #4]
  /*
   * Disable the FMC bank1 (enabled after reset).
   * This, prevents CPU speculation access on this bank which blocks the use of FMC during
   * 24us. During this time the others FMC master (such as LTDC) cannot use it!
   */
  FMC_Bank1_R->BTCR[0] = 0x000030D2;
 8003b82:	4b0f      	ldr	r3, [pc, #60]	; (8003bc0 <SystemInit+0x12c>)
 8003b84:	f243 02d2 	movw	r2, #12498	; 0x30d2
 8003b88:	601a      	str	r2, [r3, #0]
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal D1 AXI-RAM or in Internal FLASH */
#endif /* USER_VECT_TAB_ADDRESS */

#endif /*DUAL_CORE && CORE_CM4*/
}
 8003b8a:	bf00      	nop
 8003b8c:	370c      	adds	r7, #12
 8003b8e:	46bd      	mov	sp, r7
 8003b90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b94:	4770      	bx	lr
 8003b96:	bf00      	nop
 8003b98:	e000ed00 	.word	0xe000ed00
 8003b9c:	52002000 	.word	0x52002000
 8003ba0:	58024400 	.word	0x58024400
 8003ba4:	eaf6ed7f 	.word	0xeaf6ed7f
 8003ba8:	02020200 	.word	0x02020200
 8003bac:	01ff0000 	.word	0x01ff0000
 8003bb0:	01010280 	.word	0x01010280
 8003bb4:	5c001000 	.word	0x5c001000
 8003bb8:	ffff0000 	.word	0xffff0000
 8003bbc:	51008108 	.word	0x51008108
 8003bc0:	52004000 	.word	0x52004000

08003bc4 <HAL_LPTIM_AutoReloadMatchCallback>:
//		}
//
//	}
//}

void HAL_LPTIM_AutoReloadMatchCallback(LPTIM_HandleTypeDef *hlptim){
 8003bc4:	b580      	push	{r7, lr}
 8003bc6:	b082      	sub	sp, #8
 8003bc8:	af00      	add	r7, sp, #0
 8003bca:	6078      	str	r0, [r7, #4]
	HAL_GPIO_TogglePin(LD1_GPIO_Port, LD1_Pin); //toggle green LED
 8003bcc:	2101      	movs	r1, #1
 8003bce:	4803      	ldr	r0, [pc, #12]	; (8003bdc <HAL_LPTIM_AutoReloadMatchCallback+0x18>)
 8003bd0:	f004 f827 	bl	8007c22 <HAL_GPIO_TogglePin>
}
 8003bd4:	bf00      	nop
 8003bd6:	3708      	adds	r7, #8
 8003bd8:	46bd      	mov	sp, r7
 8003bda:	bd80      	pop	{r7, pc}
 8003bdc:	58020400 	.word	0x58020400

08003be0 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack      /* set stack pointer */
 8003be0:	f8df d034 	ldr.w	sp, [pc, #52]	; 8003c18 <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit
 8003be4:	f7ff ff56 	bl	8003a94 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8003be8:	480c      	ldr	r0, [pc, #48]	; (8003c1c <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8003bea:	490d      	ldr	r1, [pc, #52]	; (8003c20 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8003bec:	4a0d      	ldr	r2, [pc, #52]	; (8003c24 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8003bee:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8003bf0:	e002      	b.n	8003bf8 <LoopCopyDataInit>

08003bf2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8003bf2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8003bf4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8003bf6:	3304      	adds	r3, #4

08003bf8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8003bf8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8003bfa:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8003bfc:	d3f9      	bcc.n	8003bf2 <CopyDataInit>
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8003bfe:	4a0a      	ldr	r2, [pc, #40]	; (8003c28 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8003c00:	4c0a      	ldr	r4, [pc, #40]	; (8003c2c <LoopFillZerobss+0x22>)
  movs r3, #0
 8003c02:	2300      	movs	r3, #0
  b LoopFillZerobss
 8003c04:	e001      	b.n	8003c0a <LoopFillZerobss>

08003c06 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8003c06:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8003c08:	3204      	adds	r2, #4

08003c0a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8003c0a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8003c0c:	d3fb      	bcc.n	8003c06 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8003c0e:	f016 f9c7 	bl	8019fa0 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8003c12:	f7fe facd 	bl	80021b0 <main>
  bx  lr
 8003c16:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8003c18:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8003c1c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8003c20:	2000022c 	.word	0x2000022c
  ldr r2, =_sidata
 8003c24:	0801f428 	.word	0x0801f428
  ldr r2, =_sbss
 8003c28:	20000230 	.word	0x20000230
  ldr r4, =_ebss
 8003c2c:	20007380 	.word	0x20007380

08003c30 <ADC_IRQHandler>:
 * @retval None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8003c30:	e7fe      	b.n	8003c30 <ADC_IRQHandler>

08003c32 <LAN8742_RegisterBusIO>:
  * @param  ioctx: holds device IO functions.  
  * @retval LAN8742_STATUS_OK  if OK
  *         LAN8742_STATUS_ERROR if missing mandatory function
  */
int32_t  LAN8742_RegisterBusIO(lan8742_Object_t *pObj, lan8742_IOCtx_t *ioctx)
{
 8003c32:	b480      	push	{r7}
 8003c34:	b083      	sub	sp, #12
 8003c36:	af00      	add	r7, sp, #0
 8003c38:	6078      	str	r0, [r7, #4]
 8003c3a:	6039      	str	r1, [r7, #0]
  if(!pObj || !ioctx->ReadReg || !ioctx->WriteReg || !ioctx->GetTick)
 8003c3c:	687b      	ldr	r3, [r7, #4]
 8003c3e:	2b00      	cmp	r3, #0
 8003c40:	d00b      	beq.n	8003c5a <LAN8742_RegisterBusIO+0x28>
 8003c42:	683b      	ldr	r3, [r7, #0]
 8003c44:	68db      	ldr	r3, [r3, #12]
 8003c46:	2b00      	cmp	r3, #0
 8003c48:	d007      	beq.n	8003c5a <LAN8742_RegisterBusIO+0x28>
 8003c4a:	683b      	ldr	r3, [r7, #0]
 8003c4c:	689b      	ldr	r3, [r3, #8]
 8003c4e:	2b00      	cmp	r3, #0
 8003c50:	d003      	beq.n	8003c5a <LAN8742_RegisterBusIO+0x28>
 8003c52:	683b      	ldr	r3, [r7, #0]
 8003c54:	691b      	ldr	r3, [r3, #16]
 8003c56:	2b00      	cmp	r3, #0
 8003c58:	d102      	bne.n	8003c60 <LAN8742_RegisterBusIO+0x2e>
  {
    return LAN8742_STATUS_ERROR;
 8003c5a:	f04f 33ff 	mov.w	r3, #4294967295
 8003c5e:	e014      	b.n	8003c8a <LAN8742_RegisterBusIO+0x58>
  }
  
  pObj->IO.Init = ioctx->Init;
 8003c60:	683b      	ldr	r3, [r7, #0]
 8003c62:	681a      	ldr	r2, [r3, #0]
 8003c64:	687b      	ldr	r3, [r7, #4]
 8003c66:	609a      	str	r2, [r3, #8]
  pObj->IO.DeInit = ioctx->DeInit;
 8003c68:	683b      	ldr	r3, [r7, #0]
 8003c6a:	685a      	ldr	r2, [r3, #4]
 8003c6c:	687b      	ldr	r3, [r7, #4]
 8003c6e:	60da      	str	r2, [r3, #12]
  pObj->IO.ReadReg = ioctx->ReadReg;
 8003c70:	683b      	ldr	r3, [r7, #0]
 8003c72:	68da      	ldr	r2, [r3, #12]
 8003c74:	687b      	ldr	r3, [r7, #4]
 8003c76:	615a      	str	r2, [r3, #20]
  pObj->IO.WriteReg = ioctx->WriteReg;
 8003c78:	683b      	ldr	r3, [r7, #0]
 8003c7a:	689a      	ldr	r2, [r3, #8]
 8003c7c:	687b      	ldr	r3, [r7, #4]
 8003c7e:	611a      	str	r2, [r3, #16]
  pObj->IO.GetTick = ioctx->GetTick;
 8003c80:	683b      	ldr	r3, [r7, #0]
 8003c82:	691a      	ldr	r2, [r3, #16]
 8003c84:	687b      	ldr	r3, [r7, #4]
 8003c86:	619a      	str	r2, [r3, #24]
  
  return LAN8742_STATUS_OK;
 8003c88:	2300      	movs	r3, #0
}
 8003c8a:	4618      	mov	r0, r3
 8003c8c:	370c      	adds	r7, #12
 8003c8e:	46bd      	mov	sp, r7
 8003c90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c94:	4770      	bx	lr

08003c96 <LAN8742_Init>:
  *         LAN8742_STATUS_READ_ERROR if connot read register
  *         LAN8742_STATUS_WRITE_ERROR if connot write to register
  *         LAN8742_STATUS_RESET_TIMEOUT if cannot perform a software reset
  */
 int32_t LAN8742_Init(lan8742_Object_t *pObj)
 {
 8003c96:	b580      	push	{r7, lr}
 8003c98:	b086      	sub	sp, #24
 8003c9a:	af00      	add	r7, sp, #0
 8003c9c:	6078      	str	r0, [r7, #4]
   uint32_t tickstart = 0, regvalue = 0, addr = 0;
 8003c9e:	2300      	movs	r3, #0
 8003ca0:	60fb      	str	r3, [r7, #12]
 8003ca2:	2300      	movs	r3, #0
 8003ca4:	60bb      	str	r3, [r7, #8]
 8003ca6:	2300      	movs	r3, #0
 8003ca8:	617b      	str	r3, [r7, #20]
   int32_t status = LAN8742_STATUS_OK;
 8003caa:	2300      	movs	r3, #0
 8003cac:	613b      	str	r3, [r7, #16]
   
   if(pObj->Is_Initialized == 0)
 8003cae:	687b      	ldr	r3, [r7, #4]
 8003cb0:	685b      	ldr	r3, [r3, #4]
 8003cb2:	2b00      	cmp	r3, #0
 8003cb4:	d17c      	bne.n	8003db0 <LAN8742_Init+0x11a>
   {
     if(pObj->IO.Init != 0)
 8003cb6:	687b      	ldr	r3, [r7, #4]
 8003cb8:	689b      	ldr	r3, [r3, #8]
 8003cba:	2b00      	cmp	r3, #0
 8003cbc:	d002      	beq.n	8003cc4 <LAN8742_Init+0x2e>
     {
       /* GPIO and Clocks initialization */
       pObj->IO.Init();
 8003cbe:	687b      	ldr	r3, [r7, #4]
 8003cc0:	689b      	ldr	r3, [r3, #8]
 8003cc2:	4798      	blx	r3
     }
   
     /* for later check */
     pObj->DevAddr = LAN8742_MAX_DEV_ADDR + 1;
 8003cc4:	687b      	ldr	r3, [r7, #4]
 8003cc6:	2220      	movs	r2, #32
 8003cc8:	601a      	str	r2, [r3, #0]
   
     /* Get the device address from special mode register */  
     for(addr = 0; addr <= LAN8742_MAX_DEV_ADDR; addr ++)
 8003cca:	2300      	movs	r3, #0
 8003ccc:	617b      	str	r3, [r7, #20]
 8003cce:	e01c      	b.n	8003d0a <LAN8742_Init+0x74>
     {
       if(pObj->IO.ReadReg(addr, LAN8742_SMR, &regvalue) < 0)
 8003cd0:	687b      	ldr	r3, [r7, #4]
 8003cd2:	695b      	ldr	r3, [r3, #20]
 8003cd4:	f107 0208 	add.w	r2, r7, #8
 8003cd8:	2112      	movs	r1, #18
 8003cda:	6978      	ldr	r0, [r7, #20]
 8003cdc:	4798      	blx	r3
 8003cde:	4603      	mov	r3, r0
 8003ce0:	2b00      	cmp	r3, #0
 8003ce2:	da03      	bge.n	8003cec <LAN8742_Init+0x56>
       { 
         status = LAN8742_STATUS_READ_ERROR;
 8003ce4:	f06f 0304 	mvn.w	r3, #4
 8003ce8:	613b      	str	r3, [r7, #16]
         /* Can't read from this device address 
            continue with next address */
         continue;
 8003cea:	e00b      	b.n	8003d04 <LAN8742_Init+0x6e>
       }
     
       if((regvalue & LAN8742_SMR_PHY_ADDR) == addr)
 8003cec:	68bb      	ldr	r3, [r7, #8]
 8003cee:	f003 031f 	and.w	r3, r3, #31
 8003cf2:	697a      	ldr	r2, [r7, #20]
 8003cf4:	429a      	cmp	r2, r3
 8003cf6:	d105      	bne.n	8003d04 <LAN8742_Init+0x6e>
       {
         pObj->DevAddr = addr;
 8003cf8:	687b      	ldr	r3, [r7, #4]
 8003cfa:	697a      	ldr	r2, [r7, #20]
 8003cfc:	601a      	str	r2, [r3, #0]
         status = LAN8742_STATUS_OK;
 8003cfe:	2300      	movs	r3, #0
 8003d00:	613b      	str	r3, [r7, #16]
         break;
 8003d02:	e005      	b.n	8003d10 <LAN8742_Init+0x7a>
     for(addr = 0; addr <= LAN8742_MAX_DEV_ADDR; addr ++)
 8003d04:	697b      	ldr	r3, [r7, #20]
 8003d06:	3301      	adds	r3, #1
 8003d08:	617b      	str	r3, [r7, #20]
 8003d0a:	697b      	ldr	r3, [r7, #20]
 8003d0c:	2b1f      	cmp	r3, #31
 8003d0e:	d9df      	bls.n	8003cd0 <LAN8742_Init+0x3a>
       }
     }
   
     if(pObj->DevAddr > LAN8742_MAX_DEV_ADDR)
 8003d10:	687b      	ldr	r3, [r7, #4]
 8003d12:	681b      	ldr	r3, [r3, #0]
 8003d14:	2b1f      	cmp	r3, #31
 8003d16:	d902      	bls.n	8003d1e <LAN8742_Init+0x88>
     {
       status = LAN8742_STATUS_ADDRESS_ERROR;
 8003d18:	f06f 0302 	mvn.w	r3, #2
 8003d1c:	613b      	str	r3, [r7, #16]
     }
     
     /* if device address is matched */
     if(status == LAN8742_STATUS_OK)
 8003d1e:	693b      	ldr	r3, [r7, #16]
 8003d20:	2b00      	cmp	r3, #0
 8003d22:	d145      	bne.n	8003db0 <LAN8742_Init+0x11a>
     {
       /* set a software reset  */
       if(pObj->IO.WriteReg(pObj->DevAddr, LAN8742_BCR, LAN8742_BCR_SOFT_RESET) >= 0)
 8003d24:	687b      	ldr	r3, [r7, #4]
 8003d26:	691b      	ldr	r3, [r3, #16]
 8003d28:	687a      	ldr	r2, [r7, #4]
 8003d2a:	6810      	ldr	r0, [r2, #0]
 8003d2c:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 8003d30:	2100      	movs	r1, #0
 8003d32:	4798      	blx	r3
 8003d34:	4603      	mov	r3, r0
 8003d36:	2b00      	cmp	r3, #0
 8003d38:	db37      	blt.n	8003daa <LAN8742_Init+0x114>
       { 
         /* get software reset status */
         if(pObj->IO.ReadReg(pObj->DevAddr, LAN8742_BCR, &regvalue) >= 0)
 8003d3a:	687b      	ldr	r3, [r7, #4]
 8003d3c:	695b      	ldr	r3, [r3, #20]
 8003d3e:	687a      	ldr	r2, [r7, #4]
 8003d40:	6810      	ldr	r0, [r2, #0]
 8003d42:	f107 0208 	add.w	r2, r7, #8
 8003d46:	2100      	movs	r1, #0
 8003d48:	4798      	blx	r3
 8003d4a:	4603      	mov	r3, r0
 8003d4c:	2b00      	cmp	r3, #0
 8003d4e:	db28      	blt.n	8003da2 <LAN8742_Init+0x10c>
         { 
           tickstart = pObj->IO.GetTick();
 8003d50:	687b      	ldr	r3, [r7, #4]
 8003d52:	699b      	ldr	r3, [r3, #24]
 8003d54:	4798      	blx	r3
 8003d56:	4603      	mov	r3, r0
 8003d58:	60fb      	str	r3, [r7, #12]
           
           /* wait until software reset is done or timeout occured  */
           while(regvalue & LAN8742_BCR_SOFT_RESET)
 8003d5a:	e01c      	b.n	8003d96 <LAN8742_Init+0x100>
           {
             if((pObj->IO.GetTick() - tickstart) <= LAN8742_SW_RESET_TO)
 8003d5c:	687b      	ldr	r3, [r7, #4]
 8003d5e:	699b      	ldr	r3, [r3, #24]
 8003d60:	4798      	blx	r3
 8003d62:	4603      	mov	r3, r0
 8003d64:	461a      	mov	r2, r3
 8003d66:	68fb      	ldr	r3, [r7, #12]
 8003d68:	1ad3      	subs	r3, r2, r3
 8003d6a:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 8003d6e:	d80e      	bhi.n	8003d8e <LAN8742_Init+0xf8>
             {
               if(pObj->IO.ReadReg(pObj->DevAddr, LAN8742_BCR, &regvalue) < 0)
 8003d70:	687b      	ldr	r3, [r7, #4]
 8003d72:	695b      	ldr	r3, [r3, #20]
 8003d74:	687a      	ldr	r2, [r7, #4]
 8003d76:	6810      	ldr	r0, [r2, #0]
 8003d78:	f107 0208 	add.w	r2, r7, #8
 8003d7c:	2100      	movs	r1, #0
 8003d7e:	4798      	blx	r3
 8003d80:	4603      	mov	r3, r0
 8003d82:	2b00      	cmp	r3, #0
 8003d84:	da07      	bge.n	8003d96 <LAN8742_Init+0x100>
               { 
                 status = LAN8742_STATUS_READ_ERROR;
 8003d86:	f06f 0304 	mvn.w	r3, #4
 8003d8a:	613b      	str	r3, [r7, #16]
                 break;
 8003d8c:	e010      	b.n	8003db0 <LAN8742_Init+0x11a>
               }
             }
             else
             {
               status = LAN8742_STATUS_RESET_TIMEOUT;
 8003d8e:	f06f 0301 	mvn.w	r3, #1
 8003d92:	613b      	str	r3, [r7, #16]
               break;
 8003d94:	e00c      	b.n	8003db0 <LAN8742_Init+0x11a>
           while(regvalue & LAN8742_BCR_SOFT_RESET)
 8003d96:	68bb      	ldr	r3, [r7, #8]
 8003d98:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8003d9c:	2b00      	cmp	r3, #0
 8003d9e:	d1dd      	bne.n	8003d5c <LAN8742_Init+0xc6>
 8003da0:	e006      	b.n	8003db0 <LAN8742_Init+0x11a>
             }
           } 
         }
         else
         {
           status = LAN8742_STATUS_READ_ERROR;
 8003da2:	f06f 0304 	mvn.w	r3, #4
 8003da6:	613b      	str	r3, [r7, #16]
 8003da8:	e002      	b.n	8003db0 <LAN8742_Init+0x11a>
         }
       }
       else
       {
         status = LAN8742_STATUS_WRITE_ERROR;
 8003daa:	f06f 0303 	mvn.w	r3, #3
 8003dae:	613b      	str	r3, [r7, #16]
       }
     }
   }
      
   if(status == LAN8742_STATUS_OK)
 8003db0:	693b      	ldr	r3, [r7, #16]
 8003db2:	2b00      	cmp	r3, #0
 8003db4:	d112      	bne.n	8003ddc <LAN8742_Init+0x146>
   {
     tickstart =  pObj->IO.GetTick();
 8003db6:	687b      	ldr	r3, [r7, #4]
 8003db8:	699b      	ldr	r3, [r3, #24]
 8003dba:	4798      	blx	r3
 8003dbc:	4603      	mov	r3, r0
 8003dbe:	60fb      	str	r3, [r7, #12]
     
     /* Wait for 2s to perform initialization */
     while((pObj->IO.GetTick() - tickstart) <= LAN8742_INIT_TO)
 8003dc0:	bf00      	nop
 8003dc2:	687b      	ldr	r3, [r7, #4]
 8003dc4:	699b      	ldr	r3, [r3, #24]
 8003dc6:	4798      	blx	r3
 8003dc8:	4603      	mov	r3, r0
 8003dca:	461a      	mov	r2, r3
 8003dcc:	68fb      	ldr	r3, [r7, #12]
 8003dce:	1ad3      	subs	r3, r2, r3
 8003dd0:	f5b3 6ffa 	cmp.w	r3, #2000	; 0x7d0
 8003dd4:	d9f5      	bls.n	8003dc2 <LAN8742_Init+0x12c>
     {
     }
     pObj->Is_Initialized = 1;
 8003dd6:	687b      	ldr	r3, [r7, #4]
 8003dd8:	2201      	movs	r2, #1
 8003dda:	605a      	str	r2, [r3, #4]
   }
   
   return status;
 8003ddc:	693b      	ldr	r3, [r7, #16]
 }
 8003dde:	4618      	mov	r0, r3
 8003de0:	3718      	adds	r7, #24
 8003de2:	46bd      	mov	sp, r7
 8003de4:	bd80      	pop	{r7, pc}

08003de6 <LAN8742_GetLinkState>:
  *         LAN8742_STATUS_10MBITS_HALFDUPLEX  if 10Mb/s HD       
  *         LAN8742_STATUS_READ_ERROR if connot read register
  *         LAN8742_STATUS_WRITE_ERROR if connot write to register
  */
int32_t LAN8742_GetLinkState(lan8742_Object_t *pObj)
{
 8003de6:	b580      	push	{r7, lr}
 8003de8:	b084      	sub	sp, #16
 8003dea:	af00      	add	r7, sp, #0
 8003dec:	6078      	str	r0, [r7, #4]
  uint32_t readval = 0;
 8003dee:	2300      	movs	r3, #0
 8003df0:	60fb      	str	r3, [r7, #12]
  
  /* Read Status register  */
  if(pObj->IO.ReadReg(pObj->DevAddr, LAN8742_BSR, &readval) < 0)
 8003df2:	687b      	ldr	r3, [r7, #4]
 8003df4:	695b      	ldr	r3, [r3, #20]
 8003df6:	687a      	ldr	r2, [r7, #4]
 8003df8:	6810      	ldr	r0, [r2, #0]
 8003dfa:	f107 020c 	add.w	r2, r7, #12
 8003dfe:	2101      	movs	r1, #1
 8003e00:	4798      	blx	r3
 8003e02:	4603      	mov	r3, r0
 8003e04:	2b00      	cmp	r3, #0
 8003e06:	da02      	bge.n	8003e0e <LAN8742_GetLinkState+0x28>
  {
    return LAN8742_STATUS_READ_ERROR;
 8003e08:	f06f 0304 	mvn.w	r3, #4
 8003e0c:	e06e      	b.n	8003eec <LAN8742_GetLinkState+0x106>
  }
  
  /* Read Status register again */
  if(pObj->IO.ReadReg(pObj->DevAddr, LAN8742_BSR, &readval) < 0)
 8003e0e:	687b      	ldr	r3, [r7, #4]
 8003e10:	695b      	ldr	r3, [r3, #20]
 8003e12:	687a      	ldr	r2, [r7, #4]
 8003e14:	6810      	ldr	r0, [r2, #0]
 8003e16:	f107 020c 	add.w	r2, r7, #12
 8003e1a:	2101      	movs	r1, #1
 8003e1c:	4798      	blx	r3
 8003e1e:	4603      	mov	r3, r0
 8003e20:	2b00      	cmp	r3, #0
 8003e22:	da02      	bge.n	8003e2a <LAN8742_GetLinkState+0x44>
  {
    return LAN8742_STATUS_READ_ERROR;
 8003e24:	f06f 0304 	mvn.w	r3, #4
 8003e28:	e060      	b.n	8003eec <LAN8742_GetLinkState+0x106>
  }
  
  if((readval & LAN8742_BSR_LINK_STATUS) == 0)
 8003e2a:	68fb      	ldr	r3, [r7, #12]
 8003e2c:	f003 0304 	and.w	r3, r3, #4
 8003e30:	2b00      	cmp	r3, #0
 8003e32:	d101      	bne.n	8003e38 <LAN8742_GetLinkState+0x52>
  {
    /* Return Link Down status */
    return LAN8742_STATUS_LINK_DOWN;    
 8003e34:	2301      	movs	r3, #1
 8003e36:	e059      	b.n	8003eec <LAN8742_GetLinkState+0x106>
  }
  
  /* Check Auto negotiaition */
  if(pObj->IO.ReadReg(pObj->DevAddr, LAN8742_BCR, &readval) < 0)
 8003e38:	687b      	ldr	r3, [r7, #4]
 8003e3a:	695b      	ldr	r3, [r3, #20]
 8003e3c:	687a      	ldr	r2, [r7, #4]
 8003e3e:	6810      	ldr	r0, [r2, #0]
 8003e40:	f107 020c 	add.w	r2, r7, #12
 8003e44:	2100      	movs	r1, #0
 8003e46:	4798      	blx	r3
 8003e48:	4603      	mov	r3, r0
 8003e4a:	2b00      	cmp	r3, #0
 8003e4c:	da02      	bge.n	8003e54 <LAN8742_GetLinkState+0x6e>
  {
    return LAN8742_STATUS_READ_ERROR;
 8003e4e:	f06f 0304 	mvn.w	r3, #4
 8003e52:	e04b      	b.n	8003eec <LAN8742_GetLinkState+0x106>
  }
  
  if((readval & LAN8742_BCR_AUTONEGO_EN) != LAN8742_BCR_AUTONEGO_EN)
 8003e54:	68fb      	ldr	r3, [r7, #12]
 8003e56:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8003e5a:	2b00      	cmp	r3, #0
 8003e5c:	d11b      	bne.n	8003e96 <LAN8742_GetLinkState+0xb0>
  {
    if(((readval & LAN8742_BCR_SPEED_SELECT) == LAN8742_BCR_SPEED_SELECT) && ((readval & LAN8742_BCR_DUPLEX_MODE) == LAN8742_BCR_DUPLEX_MODE)) 
 8003e5e:	68fb      	ldr	r3, [r7, #12]
 8003e60:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8003e64:	2b00      	cmp	r3, #0
 8003e66:	d006      	beq.n	8003e76 <LAN8742_GetLinkState+0x90>
 8003e68:	68fb      	ldr	r3, [r7, #12]
 8003e6a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003e6e:	2b00      	cmp	r3, #0
 8003e70:	d001      	beq.n	8003e76 <LAN8742_GetLinkState+0x90>
    {
      return LAN8742_STATUS_100MBITS_FULLDUPLEX;
 8003e72:	2302      	movs	r3, #2
 8003e74:	e03a      	b.n	8003eec <LAN8742_GetLinkState+0x106>
    }
    else if ((readval & LAN8742_BCR_SPEED_SELECT) == LAN8742_BCR_SPEED_SELECT)
 8003e76:	68fb      	ldr	r3, [r7, #12]
 8003e78:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8003e7c:	2b00      	cmp	r3, #0
 8003e7e:	d001      	beq.n	8003e84 <LAN8742_GetLinkState+0x9e>
    {
      return LAN8742_STATUS_100MBITS_HALFDUPLEX;
 8003e80:	2303      	movs	r3, #3
 8003e82:	e033      	b.n	8003eec <LAN8742_GetLinkState+0x106>
    }        
    else if ((readval & LAN8742_BCR_DUPLEX_MODE) == LAN8742_BCR_DUPLEX_MODE)
 8003e84:	68fb      	ldr	r3, [r7, #12]
 8003e86:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003e8a:	2b00      	cmp	r3, #0
 8003e8c:	d001      	beq.n	8003e92 <LAN8742_GetLinkState+0xac>
    {
      return LAN8742_STATUS_10MBITS_FULLDUPLEX;
 8003e8e:	2304      	movs	r3, #4
 8003e90:	e02c      	b.n	8003eec <LAN8742_GetLinkState+0x106>
    }
    else
    {
      return LAN8742_STATUS_10MBITS_HALFDUPLEX;
 8003e92:	2305      	movs	r3, #5
 8003e94:	e02a      	b.n	8003eec <LAN8742_GetLinkState+0x106>
    }  		
  }
  else /* Auto Nego enabled */
  {
    if(pObj->IO.ReadReg(pObj->DevAddr, LAN8742_PHYSCSR, &readval) < 0)
 8003e96:	687b      	ldr	r3, [r7, #4]
 8003e98:	695b      	ldr	r3, [r3, #20]
 8003e9a:	687a      	ldr	r2, [r7, #4]
 8003e9c:	6810      	ldr	r0, [r2, #0]
 8003e9e:	f107 020c 	add.w	r2, r7, #12
 8003ea2:	211f      	movs	r1, #31
 8003ea4:	4798      	blx	r3
 8003ea6:	4603      	mov	r3, r0
 8003ea8:	2b00      	cmp	r3, #0
 8003eaa:	da02      	bge.n	8003eb2 <LAN8742_GetLinkState+0xcc>
    {
      return LAN8742_STATUS_READ_ERROR;
 8003eac:	f06f 0304 	mvn.w	r3, #4
 8003eb0:	e01c      	b.n	8003eec <LAN8742_GetLinkState+0x106>
    }
    
    /* Check if auto nego not done */
    if((readval & LAN8742_PHYSCSR_AUTONEGO_DONE) == 0)
 8003eb2:	68fb      	ldr	r3, [r7, #12]
 8003eb4:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8003eb8:	2b00      	cmp	r3, #0
 8003eba:	d101      	bne.n	8003ec0 <LAN8742_GetLinkState+0xda>
    {
      return LAN8742_STATUS_AUTONEGO_NOTDONE;
 8003ebc:	2306      	movs	r3, #6
 8003ebe:	e015      	b.n	8003eec <LAN8742_GetLinkState+0x106>
    }
    
    if((readval & LAN8742_PHYSCSR_HCDSPEEDMASK) == LAN8742_PHYSCSR_100BTX_FD)
 8003ec0:	68fb      	ldr	r3, [r7, #12]
 8003ec2:	f003 031c 	and.w	r3, r3, #28
 8003ec6:	2b18      	cmp	r3, #24
 8003ec8:	d101      	bne.n	8003ece <LAN8742_GetLinkState+0xe8>
    {
      return LAN8742_STATUS_100MBITS_FULLDUPLEX;
 8003eca:	2302      	movs	r3, #2
 8003ecc:	e00e      	b.n	8003eec <LAN8742_GetLinkState+0x106>
    }
    else if ((readval & LAN8742_PHYSCSR_HCDSPEEDMASK) == LAN8742_PHYSCSR_100BTX_HD)
 8003ece:	68fb      	ldr	r3, [r7, #12]
 8003ed0:	f003 031c 	and.w	r3, r3, #28
 8003ed4:	2b08      	cmp	r3, #8
 8003ed6:	d101      	bne.n	8003edc <LAN8742_GetLinkState+0xf6>
    {
      return LAN8742_STATUS_100MBITS_HALFDUPLEX;
 8003ed8:	2303      	movs	r3, #3
 8003eda:	e007      	b.n	8003eec <LAN8742_GetLinkState+0x106>
    }
    else if ((readval & LAN8742_PHYSCSR_HCDSPEEDMASK) == LAN8742_PHYSCSR_10BT_FD)
 8003edc:	68fb      	ldr	r3, [r7, #12]
 8003ede:	f003 031c 	and.w	r3, r3, #28
 8003ee2:	2b14      	cmp	r3, #20
 8003ee4:	d101      	bne.n	8003eea <LAN8742_GetLinkState+0x104>
    {
      return LAN8742_STATUS_10MBITS_FULLDUPLEX;
 8003ee6:	2304      	movs	r3, #4
 8003ee8:	e000      	b.n	8003eec <LAN8742_GetLinkState+0x106>
    }
    else
    {
      return LAN8742_STATUS_10MBITS_HALFDUPLEX;
 8003eea:	2305      	movs	r3, #5
    }				
  }
}
 8003eec:	4618      	mov	r0, r3
 8003eee:	3710      	adds	r7, #16
 8003ef0:	46bd      	mov	sp, r7
 8003ef2:	bd80      	pop	{r7, pc}

08003ef4 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8003ef4:	b580      	push	{r7, lr}
 8003ef6:	b082      	sub	sp, #8
 8003ef8:	af00      	add	r7, sp, #0
   __HAL_ART_CONFIG_BASE_ADDRESS(0x08100000UL);  /* Configure the Cortex-M4 ART Base address to the Flash Bank 2 : */
   __HAL_ART_ENABLE();                           /* Enable the Cortex-M4 ART */
#endif /* DUAL_CORE &&  CORE_CM4 */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8003efa:	2003      	movs	r0, #3
 8003efc:	f001 ff1c 	bl	8005d38 <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8003f00:	f006 fbbc 	bl	800a67c <HAL_RCC_GetSysClockFreq>
 8003f04:	4602      	mov	r2, r0
 8003f06:	4b15      	ldr	r3, [pc, #84]	; (8003f5c <HAL_Init+0x68>)
 8003f08:	699b      	ldr	r3, [r3, #24]
 8003f0a:	0a1b      	lsrs	r3, r3, #8
 8003f0c:	f003 030f 	and.w	r3, r3, #15
 8003f10:	4913      	ldr	r1, [pc, #76]	; (8003f60 <HAL_Init+0x6c>)
 8003f12:	5ccb      	ldrb	r3, [r1, r3]
 8003f14:	f003 031f 	and.w	r3, r3, #31
 8003f18:	fa22 f303 	lsr.w	r3, r2, r3
 8003f1c:	607b      	str	r3, [r7, #4]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

  /* Update the SystemD2Clock global variable */
#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8003f1e:	4b0f      	ldr	r3, [pc, #60]	; (8003f5c <HAL_Init+0x68>)
 8003f20:	699b      	ldr	r3, [r3, #24]
 8003f22:	f003 030f 	and.w	r3, r3, #15
 8003f26:	4a0e      	ldr	r2, [pc, #56]	; (8003f60 <HAL_Init+0x6c>)
 8003f28:	5cd3      	ldrb	r3, [r2, r3]
 8003f2a:	f003 031f 	and.w	r3, r3, #31
 8003f2e:	687a      	ldr	r2, [r7, #4]
 8003f30:	fa22 f303 	lsr.w	r3, r2, r3
 8003f34:	4a0b      	ldr	r2, [pc, #44]	; (8003f64 <HAL_Init+0x70>)
 8003f36:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8003f38:	4a0b      	ldr	r2, [pc, #44]	; (8003f68 <HAL_Init+0x74>)
 8003f3a:	687b      	ldr	r3, [r7, #4]
 8003f3c:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8003f3e:	2000      	movs	r0, #0
 8003f40:	f000 f814 	bl	8003f6c <HAL_InitTick>
 8003f44:	4603      	mov	r3, r0
 8003f46:	2b00      	cmp	r3, #0
 8003f48:	d001      	beq.n	8003f4e <HAL_Init+0x5a>
  {
    return HAL_ERROR;
 8003f4a:	2301      	movs	r3, #1
 8003f4c:	e002      	b.n	8003f54 <HAL_Init+0x60>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 8003f4e:	f7ff f9d5 	bl	80032fc <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8003f52:	2300      	movs	r3, #0
}
 8003f54:	4618      	mov	r0, r3
 8003f56:	3708      	adds	r7, #8
 8003f58:	46bd      	mov	sp, r7
 8003f5a:	bd80      	pop	{r7, pc}
 8003f5c:	58024400 	.word	0x58024400
 8003f60:	0801ef28 	.word	0x0801ef28
 8003f64:	20000014 	.word	0x20000014
 8003f68:	20000010 	.word	0x20000010

08003f6c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8003f6c:	b580      	push	{r7, lr}
 8003f6e:	b082      	sub	sp, #8
 8003f70:	af00      	add	r7, sp, #0
 8003f72:	6078      	str	r0, [r7, #4]
  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that don't take the value zero)*/
  if((uint32_t)uwTickFreq == 0UL)
 8003f74:	4b15      	ldr	r3, [pc, #84]	; (8003fcc <HAL_InitTick+0x60>)
 8003f76:	781b      	ldrb	r3, [r3, #0]
 8003f78:	2b00      	cmp	r3, #0
 8003f7a:	d101      	bne.n	8003f80 <HAL_InitTick+0x14>
  {
    return HAL_ERROR;
 8003f7c:	2301      	movs	r3, #1
 8003f7e:	e021      	b.n	8003fc4 <HAL_InitTick+0x58>
  }

    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000UL / (uint32_t)uwTickFreq)) > 0U)
 8003f80:	4b13      	ldr	r3, [pc, #76]	; (8003fd0 <HAL_InitTick+0x64>)
 8003f82:	681a      	ldr	r2, [r3, #0]
 8003f84:	4b11      	ldr	r3, [pc, #68]	; (8003fcc <HAL_InitTick+0x60>)
 8003f86:	781b      	ldrb	r3, [r3, #0]
 8003f88:	4619      	mov	r1, r3
 8003f8a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8003f8e:	fbb3 f3f1 	udiv	r3, r3, r1
 8003f92:	fbb2 f3f3 	udiv	r3, r2, r3
 8003f96:	4618      	mov	r0, r3
 8003f98:	f001 ff01 	bl	8005d9e <HAL_SYSTICK_Config>
 8003f9c:	4603      	mov	r3, r0
 8003f9e:	2b00      	cmp	r3, #0
 8003fa0:	d001      	beq.n	8003fa6 <HAL_InitTick+0x3a>
    {
      return HAL_ERROR;
 8003fa2:	2301      	movs	r3, #1
 8003fa4:	e00e      	b.n	8003fc4 <HAL_InitTick+0x58>
    }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8003fa6:	687b      	ldr	r3, [r7, #4]
 8003fa8:	2b0f      	cmp	r3, #15
 8003faa:	d80a      	bhi.n	8003fc2 <HAL_InitTick+0x56>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8003fac:	2200      	movs	r2, #0
 8003fae:	6879      	ldr	r1, [r7, #4]
 8003fb0:	f04f 30ff 	mov.w	r0, #4294967295
 8003fb4:	f001 fecb 	bl	8005d4e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8003fb8:	4a06      	ldr	r2, [pc, #24]	; (8003fd4 <HAL_InitTick+0x68>)
 8003fba:	687b      	ldr	r3, [r7, #4]
 8003fbc:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8003fbe:	2300      	movs	r3, #0
 8003fc0:	e000      	b.n	8003fc4 <HAL_InitTick+0x58>
    return HAL_ERROR;
 8003fc2:	2301      	movs	r3, #1
}
 8003fc4:	4618      	mov	r0, r3
 8003fc6:	3708      	adds	r7, #8
 8003fc8:	46bd      	mov	sp, r7
 8003fca:	bd80      	pop	{r7, pc}
 8003fcc:	20000028 	.word	0x20000028
 8003fd0:	20000010 	.word	0x20000010
 8003fd4:	20000024 	.word	0x20000024

08003fd8 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8003fd8:	b480      	push	{r7}
 8003fda:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8003fdc:	4b06      	ldr	r3, [pc, #24]	; (8003ff8 <HAL_IncTick+0x20>)
 8003fde:	781b      	ldrb	r3, [r3, #0]
 8003fe0:	461a      	mov	r2, r3
 8003fe2:	4b06      	ldr	r3, [pc, #24]	; (8003ffc <HAL_IncTick+0x24>)
 8003fe4:	681b      	ldr	r3, [r3, #0]
 8003fe6:	4413      	add	r3, r2
 8003fe8:	4a04      	ldr	r2, [pc, #16]	; (8003ffc <HAL_IncTick+0x24>)
 8003fea:	6013      	str	r3, [r2, #0]
}
 8003fec:	bf00      	nop
 8003fee:	46bd      	mov	sp, r7
 8003ff0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ff4:	4770      	bx	lr
 8003ff6:	bf00      	nop
 8003ff8:	20000028 	.word	0x20000028
 8003ffc:	2000069c 	.word	0x2000069c

08004000 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8004000:	b480      	push	{r7}
 8004002:	af00      	add	r7, sp, #0
  return uwTick;
 8004004:	4b03      	ldr	r3, [pc, #12]	; (8004014 <HAL_GetTick+0x14>)
 8004006:	681b      	ldr	r3, [r3, #0]
}
 8004008:	4618      	mov	r0, r3
 800400a:	46bd      	mov	sp, r7
 800400c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004010:	4770      	bx	lr
 8004012:	bf00      	nop
 8004014:	2000069c 	.word	0x2000069c

08004018 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8004018:	b580      	push	{r7, lr}
 800401a:	b084      	sub	sp, #16
 800401c:	af00      	add	r7, sp, #0
 800401e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8004020:	f7ff ffee 	bl	8004000 <HAL_GetTick>
 8004024:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8004026:	687b      	ldr	r3, [r7, #4]
 8004028:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800402a:	68fb      	ldr	r3, [r7, #12]
 800402c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004030:	d005      	beq.n	800403e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8004032:	4b0a      	ldr	r3, [pc, #40]	; (800405c <HAL_Delay+0x44>)
 8004034:	781b      	ldrb	r3, [r3, #0]
 8004036:	461a      	mov	r2, r3
 8004038:	68fb      	ldr	r3, [r7, #12]
 800403a:	4413      	add	r3, r2
 800403c:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 800403e:	bf00      	nop
 8004040:	f7ff ffde 	bl	8004000 <HAL_GetTick>
 8004044:	4602      	mov	r2, r0
 8004046:	68bb      	ldr	r3, [r7, #8]
 8004048:	1ad3      	subs	r3, r2, r3
 800404a:	68fa      	ldr	r2, [r7, #12]
 800404c:	429a      	cmp	r2, r3
 800404e:	d8f7      	bhi.n	8004040 <HAL_Delay+0x28>
  {
  }
}
 8004050:	bf00      	nop
 8004052:	bf00      	nop
 8004054:	3710      	adds	r7, #16
 8004056:	46bd      	mov	sp, r7
 8004058:	bd80      	pop	{r7, pc}
 800405a:	bf00      	nop
 800405c:	20000028 	.word	0x20000028

08004060 <HAL_GetREVID>:
/**
  * @brief  Returns the device revision identifier.
  * @retval Device revision identifier
  */
uint32_t HAL_GetREVID(void)
{
 8004060:	b480      	push	{r7}
 8004062:	af00      	add	r7, sp, #0
   return((DBGMCU->IDCODE) >> 16);
 8004064:	4b03      	ldr	r3, [pc, #12]	; (8004074 <HAL_GetREVID+0x14>)
 8004066:	681b      	ldr	r3, [r3, #0]
 8004068:	0c1b      	lsrs	r3, r3, #16
}
 800406a:	4618      	mov	r0, r3
 800406c:	46bd      	mov	sp, r7
 800406e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004072:	4770      	bx	lr
 8004074:	5c001000 	.word	0x5c001000

08004078 <HAL_SYSCFG_ETHInterfaceSelect>:
  *   @arg SYSCFG_ETH_MII : Select the Media Independent Interface
  *   @arg SYSCFG_ETH_RMII: Select the Reduced Media Independent Interface
  * @retval None
  */
void HAL_SYSCFG_ETHInterfaceSelect(uint32_t SYSCFG_ETHInterface)
{
 8004078:	b480      	push	{r7}
 800407a:	b083      	sub	sp, #12
 800407c:	af00      	add	r7, sp, #0
 800407e:	6078      	str	r0, [r7, #4]
  /* Check the parameter */
  assert_param(IS_SYSCFG_ETHERNET_CONFIG(SYSCFG_ETHInterface));

  MODIFY_REG(SYSCFG->PMCR, SYSCFG_PMCR_EPIS_SEL, (uint32_t)(SYSCFG_ETHInterface));
 8004080:	4b06      	ldr	r3, [pc, #24]	; (800409c <HAL_SYSCFG_ETHInterfaceSelect+0x24>)
 8004082:	685b      	ldr	r3, [r3, #4]
 8004084:	f423 0260 	bic.w	r2, r3, #14680064	; 0xe00000
 8004088:	4904      	ldr	r1, [pc, #16]	; (800409c <HAL_SYSCFG_ETHInterfaceSelect+0x24>)
 800408a:	687b      	ldr	r3, [r7, #4]
 800408c:	4313      	orrs	r3, r2
 800408e:	604b      	str	r3, [r1, #4]
}
 8004090:	bf00      	nop
 8004092:	370c      	adds	r7, #12
 8004094:	46bd      	mov	sp, r7
 8004096:	f85d 7b04 	ldr.w	r7, [sp], #4
 800409a:	4770      	bx	lr
 800409c:	58000400 	.word	0x58000400

080040a0 <HAL_SYSCFG_AnalogSwitchConfig>:
  *   @arg SYSCFG_SWITCH_PC3_CLOSE
  * @retval None
  */

void HAL_SYSCFG_AnalogSwitchConfig(uint32_t SYSCFG_AnalogSwitch , uint32_t SYSCFG_SwitchState )
{
 80040a0:	b480      	push	{r7}
 80040a2:	b083      	sub	sp, #12
 80040a4:	af00      	add	r7, sp, #0
 80040a6:	6078      	str	r0, [r7, #4]
 80040a8:	6039      	str	r1, [r7, #0]
  /* Check the parameter */
  assert_param(IS_SYSCFG_ANALOG_SWITCH(SYSCFG_AnalogSwitch));
  assert_param(IS_SYSCFG_SWITCH_STATE(SYSCFG_SwitchState));

  MODIFY_REG(SYSCFG->PMCR, (uint32_t) SYSCFG_AnalogSwitch, (uint32_t)(SYSCFG_SwitchState));
 80040aa:	4b07      	ldr	r3, [pc, #28]	; (80040c8 <HAL_SYSCFG_AnalogSwitchConfig+0x28>)
 80040ac:	685a      	ldr	r2, [r3, #4]
 80040ae:	687b      	ldr	r3, [r7, #4]
 80040b0:	43db      	mvns	r3, r3
 80040b2:	401a      	ands	r2, r3
 80040b4:	4904      	ldr	r1, [pc, #16]	; (80040c8 <HAL_SYSCFG_AnalogSwitchConfig+0x28>)
 80040b6:	683b      	ldr	r3, [r7, #0]
 80040b8:	4313      	orrs	r3, r2
 80040ba:	604b      	str	r3, [r1, #4]
}
 80040bc:	bf00      	nop
 80040be:	370c      	adds	r7, #12
 80040c0:	46bd      	mov	sp, r7
 80040c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040c6:	4770      	bx	lr
 80040c8:	58000400 	.word	0x58000400

080040cc <LL_ADC_SetCommonClock>:
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV128
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV256
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonClock(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t CommonClock)
{
 80040cc:	b480      	push	{r7}
 80040ce:	b083      	sub	sp, #12
 80040d0:	af00      	add	r7, sp, #0
 80040d2:	6078      	str	r0, [r7, #4]
 80040d4:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 80040d6:	687b      	ldr	r3, [r7, #4]
 80040d8:	689b      	ldr	r3, [r3, #8]
 80040da:	f423 127c 	bic.w	r2, r3, #4128768	; 0x3f0000
 80040de:	683b      	ldr	r3, [r7, #0]
 80040e0:	431a      	orrs	r2, r3
 80040e2:	687b      	ldr	r3, [r7, #4]
 80040e4:	609a      	str	r2, [r3, #8]
}
 80040e6:	bf00      	nop
 80040e8:	370c      	adds	r7, #12
 80040ea:	46bd      	mov	sp, r7
 80040ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040f0:	4770      	bx	lr

080040f2 <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 80040f2:	b480      	push	{r7}
 80040f4:	b083      	sub	sp, #12
 80040f6:	af00      	add	r7, sp, #0
 80040f8:	6078      	str	r0, [r7, #4]
 80040fa:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 80040fc:	687b      	ldr	r3, [r7, #4]
 80040fe:	689b      	ldr	r3, [r3, #8]
 8004100:	f023 72e0 	bic.w	r2, r3, #29360128	; 0x1c00000
 8004104:	683b      	ldr	r3, [r7, #0]
 8004106:	431a      	orrs	r2, r3
 8004108:	687b      	ldr	r3, [r7, #4]
 800410a:	609a      	str	r2, [r3, #8]
}
 800410c:	bf00      	nop
 800410e:	370c      	adds	r7, #12
 8004110:	46bd      	mov	sp, r7
 8004112:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004116:	4770      	bx	lr

08004118 <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON)
{
 8004118:	b480      	push	{r7}
 800411a:	b083      	sub	sp, #12
 800411c:	af00      	add	r7, sp, #0
 800411e:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 8004120:	687b      	ldr	r3, [r7, #4]
 8004122:	689b      	ldr	r3, [r3, #8]
 8004124:	f003 73e0 	and.w	r3, r3, #29360128	; 0x1c00000
}
 8004128:	4618      	mov	r0, r3
 800412a:	370c      	adds	r7, #12
 800412c:	46bd      	mov	sp, r7
 800412e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004132:	4770      	bx	lr

08004134 <LL_ADC_SetOffset>:
  *             Other channels are slow channels (conversion rate: refer to reference manual).
  * @param  OffsetLevel Value between Min_Data=0x000 and Max_Data=0x3FFFFFF
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffset(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t Channel, uint32_t OffsetLevel)
{
 8004134:	b480      	push	{r7}
 8004136:	b087      	sub	sp, #28
 8004138:	af00      	add	r7, sp, #0
 800413a:	60f8      	str	r0, [r7, #12]
 800413c:	60b9      	str	r1, [r7, #8]
 800413e:	607a      	str	r2, [r7, #4]
 8004140:	603b      	str	r3, [r7, #0]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8004142:	68fb      	ldr	r3, [r7, #12]
 8004144:	3360      	adds	r3, #96	; 0x60
 8004146:	461a      	mov	r2, r3
 8004148:	68bb      	ldr	r3, [r7, #8]
 800414a:	009b      	lsls	r3, r3, #2
 800414c:	4413      	add	r3, r2
 800414e:	617b      	str	r3, [r7, #20]
               ADC3_OFR1_OFFSET1_EN | (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
  }
  else
#endif /* ADC_VER_V5_V90 */
  {
    MODIFY_REG(*preg,
 8004150:	697b      	ldr	r3, [r7, #20]
 8004152:	681b      	ldr	r3, [r3, #0]
 8004154:	f003 4200 	and.w	r2, r3, #2147483648	; 0x80000000
 8004158:	687b      	ldr	r3, [r7, #4]
 800415a:	f003 41f8 	and.w	r1, r3, #2080374784	; 0x7c000000
 800415e:	683b      	ldr	r3, [r7, #0]
 8004160:	430b      	orrs	r3, r1
 8004162:	431a      	orrs	r2, r3
 8004164:	697b      	ldr	r3, [r7, #20]
 8004166:	601a      	str	r2, [r3, #0]
               ADC_OFR1_OFFSET1_CH | ADC_OFR1_OFFSET1,
               (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
  }
}
 8004168:	bf00      	nop
 800416a:	371c      	adds	r7, #28
 800416c:	46bd      	mov	sp, r7
 800416e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004172:	4770      	bx	lr

08004174 <LL_ADC_SetDataRightShift>:
  *         @arg @ref LL_ADC_OFFSET_RSHIFT_ENABLE
  *         @arg @ref LL_ADC_OFFSET_RSHIFT_DISABLE
  * @retval Returned None
  */
__STATIC_INLINE void LL_ADC_SetDataRightShift(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t RigthShift)
{
 8004174:	b480      	push	{r7}
 8004176:	b085      	sub	sp, #20
 8004178:	af00      	add	r7, sp, #0
 800417a:	60f8      	str	r0, [r7, #12]
 800417c:	60b9      	str	r1, [r7, #8]
 800417e:	607a      	str	r2, [r7, #4]
  MODIFY_REG(ADCx->CFGR2, (ADC_CFGR2_RSHIFT1 | ADC_CFGR2_RSHIFT2 | ADC_CFGR2_RSHIFT3 | ADC_CFGR2_RSHIFT4), RigthShift << (Offsety & 0x1FUL));
 8004180:	68fb      	ldr	r3, [r7, #12]
 8004182:	691b      	ldr	r3, [r3, #16]
 8004184:	f423 42f0 	bic.w	r2, r3, #30720	; 0x7800
 8004188:	68bb      	ldr	r3, [r7, #8]
 800418a:	f003 031f 	and.w	r3, r3, #31
 800418e:	6879      	ldr	r1, [r7, #4]
 8004190:	fa01 f303 	lsl.w	r3, r1, r3
 8004194:	431a      	orrs	r2, r3
 8004196:	68fb      	ldr	r3, [r7, #12]
 8004198:	611a      	str	r2, [r3, #16]
}
 800419a:	bf00      	nop
 800419c:	3714      	adds	r7, #20
 800419e:	46bd      	mov	sp, r7
 80041a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041a4:	4770      	bx	lr

080041a6 <LL_ADC_SetOffsetSignedSaturation>:
  *         @arg @ref LL_ADC_OFFSET_SIGNED_SATURATION_ENABLE
  *         @arg @ref LL_ADC_OFFSET_SIGNED_SATURATION_DISABLE
  * @retval Returned None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSignedSaturation(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSignedSaturation)
{
 80041a6:	b480      	push	{r7}
 80041a8:	b087      	sub	sp, #28
 80041aa:	af00      	add	r7, sp, #0
 80041ac:	60f8      	str	r0, [r7, #12]
 80041ae:	60b9      	str	r1, [r7, #8]
 80041b0:	607a      	str	r2, [r7, #4]
    /* Function not available on this instance */
  }
  else
#endif  /* ADC_VER_V5_V90 */
  {
    __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 80041b2:	68fb      	ldr	r3, [r7, #12]
 80041b4:	3360      	adds	r3, #96	; 0x60
 80041b6:	461a      	mov	r2, r3
 80041b8:	68bb      	ldr	r3, [r7, #8]
 80041ba:	009b      	lsls	r3, r3, #2
 80041bc:	4413      	add	r3, r2
 80041be:	617b      	str	r3, [r7, #20]
    MODIFY_REG(*preg, ADC_OFR1_SSATE, OffsetSignedSaturation);
 80041c0:	697b      	ldr	r3, [r7, #20]
 80041c2:	681b      	ldr	r3, [r3, #0]
 80041c4:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 80041c8:	687b      	ldr	r3, [r7, #4]
 80041ca:	431a      	orrs	r2, r3
 80041cc:	697b      	ldr	r3, [r7, #20]
 80041ce:	601a      	str	r2, [r3, #0]
  }
}
 80041d0:	bf00      	nop
 80041d2:	371c      	adds	r7, #28
 80041d4:	46bd      	mov	sp, r7
 80041d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041da:	4770      	bx	lr

080041dc <LL_ADC_REG_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsTriggerSourceSWStart(ADC_TypeDef *ADCx)
{
 80041dc:	b480      	push	{r7}
 80041de:	b083      	sub	sp, #12
 80041e0:	af00      	add	r7, sp, #0
 80041e2:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CFGR, ADC_CFGR_EXTEN) == (LL_ADC_REG_TRIG_SOFTWARE & ADC_CFGR_EXTEN)) ? 1UL : 0UL);
 80041e4:	687b      	ldr	r3, [r7, #4]
 80041e6:	68db      	ldr	r3, [r3, #12]
 80041e8:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 80041ec:	2b00      	cmp	r3, #0
 80041ee:	d101      	bne.n	80041f4 <LL_ADC_REG_IsTriggerSourceSWStart+0x18>
 80041f0:	2301      	movs	r3, #1
 80041f2:	e000      	b.n	80041f6 <LL_ADC_REG_IsTriggerSourceSWStart+0x1a>
 80041f4:	2300      	movs	r3, #0
}
 80041f6:	4618      	mov	r0, r3
 80041f8:	370c      	adds	r7, #12
 80041fa:	46bd      	mov	sp, r7
 80041fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004200:	4770      	bx	lr

08004202 <LL_ADC_REG_SetSequencerRanks>:
  *         (3) On STM32H7, fast channel (0.125 us for 14-bit resolution (ADC conversion rate up to 8 Ms/s)).
  *             Other channels are slow channels (conversion rate: refer to reference manual).
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 8004202:	b480      	push	{r7}
 8004204:	b087      	sub	sp, #28
 8004206:	af00      	add	r7, sp, #0
 8004208:	60f8      	str	r0, [r7, #12]
 800420a:	60b9      	str	r1, [r7, #8]
 800420c:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1, ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));
 800420e:	68fb      	ldr	r3, [r7, #12]
 8004210:	3330      	adds	r3, #48	; 0x30
 8004212:	461a      	mov	r2, r3
 8004214:	68bb      	ldr	r3, [r7, #8]
 8004216:	0a1b      	lsrs	r3, r3, #8
 8004218:	009b      	lsls	r3, r3, #2
 800421a:	f003 030c 	and.w	r3, r3, #12
 800421e:	4413      	add	r3, r2
 8004220:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8004222:	697b      	ldr	r3, [r7, #20]
 8004224:	681a      	ldr	r2, [r3, #0]
 8004226:	68bb      	ldr	r3, [r7, #8]
 8004228:	f003 031f 	and.w	r3, r3, #31
 800422c:	211f      	movs	r1, #31
 800422e:	fa01 f303 	lsl.w	r3, r1, r3
 8004232:	43db      	mvns	r3, r3
 8004234:	401a      	ands	r2, r3
 8004236:	687b      	ldr	r3, [r7, #4]
 8004238:	0e9b      	lsrs	r3, r3, #26
 800423a:	f003 011f 	and.w	r1, r3, #31
 800423e:	68bb      	ldr	r3, [r7, #8]
 8004240:	f003 031f 	and.w	r3, r3, #31
 8004244:	fa01 f303 	lsl.w	r3, r1, r3
 8004248:	431a      	orrs	r2, r3
 800424a:	697b      	ldr	r3, [r7, #20]
 800424c:	601a      	str	r2, [r3, #0]
             ADC_CHANNEL_ID_NUMBER_MASK_POSBIT0 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS) << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 800424e:	bf00      	nop
 8004250:	371c      	adds	r7, #28
 8004252:	46bd      	mov	sp, r7
 8004254:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004258:	4770      	bx	lr

0800425a <LL_ADC_INJ_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsTriggerSourceSWStart(ADC_TypeDef *ADCx)
{
 800425a:	b480      	push	{r7}
 800425c:	b083      	sub	sp, #12
 800425e:	af00      	add	r7, sp, #0
 8004260:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->JSQR, ADC_JSQR_JEXTEN) == (LL_ADC_INJ_TRIG_SOFTWARE & ADC_JSQR_JEXTEN)) ? 1UL : 0UL);
 8004262:	687b      	ldr	r3, [r7, #4]
 8004264:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004266:	f403 73c0 	and.w	r3, r3, #384	; 0x180
 800426a:	2b00      	cmp	r3, #0
 800426c:	d101      	bne.n	8004272 <LL_ADC_INJ_IsTriggerSourceSWStart+0x18>
 800426e:	2301      	movs	r3, #1
 8004270:	e000      	b.n	8004274 <LL_ADC_INJ_IsTriggerSourceSWStart+0x1a>
 8004272:	2300      	movs	r3, #0
}
 8004274:	4618      	mov	r0, r3
 8004276:	370c      	adds	r7, #12
 8004278:	46bd      	mov	sp, r7
 800427a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800427e:	4770      	bx	lr

08004280 <LL_ADC_SetChannelSamplingTime>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_387CYCLES_5
  *         @arg @ref LL_ADC_SAMPLINGTIME_810CYCLES_5
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 8004280:	b480      	push	{r7}
 8004282:	b087      	sub	sp, #28
 8004284:	af00      	add	r7, sp, #0
 8004286:	60f8      	str	r0, [r7, #12]
 8004288:	60b9      	str	r1, [r7, #8]
 800428a:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1, ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));
 800428c:	68fb      	ldr	r3, [r7, #12]
 800428e:	3314      	adds	r3, #20
 8004290:	461a      	mov	r2, r3
 8004292:	68bb      	ldr	r3, [r7, #8]
 8004294:	0e5b      	lsrs	r3, r3, #25
 8004296:	009b      	lsls	r3, r3, #2
 8004298:	f003 0304 	and.w	r3, r3, #4
 800429c:	4413      	add	r3, r2
 800429e:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 80042a0:	697b      	ldr	r3, [r7, #20]
 80042a2:	681a      	ldr	r2, [r3, #0]
 80042a4:	68bb      	ldr	r3, [r7, #8]
 80042a6:	0d1b      	lsrs	r3, r3, #20
 80042a8:	f003 031f 	and.w	r3, r3, #31
 80042ac:	2107      	movs	r1, #7
 80042ae:	fa01 f303 	lsl.w	r3, r1, r3
 80042b2:	43db      	mvns	r3, r3
 80042b4:	401a      	ands	r2, r3
 80042b6:	68bb      	ldr	r3, [r7, #8]
 80042b8:	0d1b      	lsrs	r3, r3, #20
 80042ba:	f003 031f 	and.w	r3, r3, #31
 80042be:	6879      	ldr	r1, [r7, #4]
 80042c0:	fa01 f303 	lsl.w	r3, r1, r3
 80042c4:	431a      	orrs	r2, r3
 80042c6:	697b      	ldr	r3, [r7, #20]
 80042c8:	601a      	str	r2, [r3, #0]
             ADC_SMPR1_SMP0 << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS),
             SamplingTime   << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS));
}
 80042ca:	bf00      	nop
 80042cc:	371c      	adds	r7, #28
 80042ce:	46bd      	mov	sp, r7
 80042d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042d4:	4770      	bx	lr
	...

080042d8 <LL_ADC_SetChannelSingleDiff>:
  *         @arg @ref LL_ADC_SINGLE_ENDED
  *         @arg @ref LL_ADC_DIFFERENTIAL_ENDED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSingleDiff(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SingleDiff)
{
 80042d8:	b480      	push	{r7}
 80042da:	b085      	sub	sp, #20
 80042dc:	af00      	add	r7, sp, #0
 80042de:	60f8      	str	r0, [r7, #12]
 80042e0:	60b9      	str	r1, [r7, #8]
 80042e2:	607a      	str	r2, [r7, #4]
  }
#else  /* ADC_VER_V5_V90 */
  /* Bits of channels in single or differential mode are set only for         */
  /* differential mode (for single mode, mask of bits allowed to be set is    */
  /* shifted out of range of bits of channels in single or differential mode. */
  MODIFY_REG(ADCx->DIFSEL,
 80042e4:	68fb      	ldr	r3, [r7, #12]
 80042e6:	f8d3 20c0 	ldr.w	r2, [r3, #192]	; 0xc0
 80042ea:	68bb      	ldr	r3, [r7, #8]
 80042ec:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80042f0:	43db      	mvns	r3, r3
 80042f2:	401a      	ands	r2, r3
 80042f4:	687b      	ldr	r3, [r7, #4]
 80042f6:	f003 0318 	and.w	r3, r3, #24
 80042fa:	4908      	ldr	r1, [pc, #32]	; (800431c <LL_ADC_SetChannelSingleDiff+0x44>)
 80042fc:	40d9      	lsrs	r1, r3
 80042fe:	68bb      	ldr	r3, [r7, #8]
 8004300:	400b      	ands	r3, r1
 8004302:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8004306:	431a      	orrs	r2, r3
 8004308:	68fb      	ldr	r3, [r7, #12]
 800430a:	f8c3 20c0 	str.w	r2, [r3, #192]	; 0xc0
             Channel & ADC_SINGLEDIFF_CHANNEL_MASK,
             (Channel & ADC_SINGLEDIFF_CHANNEL_MASK) & (ADC_DIFSEL_DIFSEL >> (SingleDiff & ADC_SINGLEDIFF_CHANNEL_SHIFT_MASK)));
#endif /* ADC_VER_V5_V90 */
}
 800430e:	bf00      	nop
 8004310:	3714      	adds	r7, #20
 8004312:	46bd      	mov	sp, r7
 8004314:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004318:	4770      	bx	lr
 800431a:	bf00      	nop
 800431c:	000fffff 	.word	0x000fffff

08004320 <LL_ADC_GetMultimode>:
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_SIM
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_ALT
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_INT_INJ_SIM
  */
__STATIC_INLINE uint32_t LL_ADC_GetMultimode(ADC_Common_TypeDef *ADCxy_COMMON)
{
 8004320:	b480      	push	{r7}
 8004322:	b083      	sub	sp, #12
 8004324:	af00      	add	r7, sp, #0
 8004326:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_DUAL));
 8004328:	687b      	ldr	r3, [r7, #4]
 800432a:	689b      	ldr	r3, [r3, #8]
 800432c:	f003 031f 	and.w	r3, r3, #31
}
 8004330:	4618      	mov	r0, r3
 8004332:	370c      	adds	r7, #12
 8004334:	46bd      	mov	sp, r7
 8004336:	f85d 7b04 	ldr.w	r7, [sp], #4
 800433a:	4770      	bx	lr

0800433c <LL_ADC_GetMultiDMATransfer>:
  *         @arg @ref LL_ADC_MULTI_REG_DMA_EACH_ADC
  *         @arg @ref LL_ADC_MULTI_REG_DMA_RES_32_10B
  *         @arg @ref LL_ADC_MULTI_REG_DMA_RES_8B
  */
__STATIC_INLINE uint32_t LL_ADC_GetMultiDMATransfer(ADC_Common_TypeDef *ADCxy_COMMON)
{
 800433c:	b480      	push	{r7}
 800433e:	b083      	sub	sp, #12
 8004340:	af00      	add	r7, sp, #0
 8004342:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_DAMDF));
 8004344:	687b      	ldr	r3, [r7, #4]
 8004346:	689b      	ldr	r3, [r3, #8]
 8004348:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
}
 800434c:	4618      	mov	r0, r3
 800434e:	370c      	adds	r7, #12
 8004350:	46bd      	mov	sp, r7
 8004352:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004356:	4770      	bx	lr

08004358 <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
 8004358:	b480      	push	{r7}
 800435a:	b083      	sub	sp, #12
 800435c:	af00      	add	r7, sp, #0
 800435e:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 8004360:	687b      	ldr	r3, [r7, #4]
 8004362:	689a      	ldr	r2, [r3, #8]
 8004364:	4b04      	ldr	r3, [pc, #16]	; (8004378 <LL_ADC_DisableDeepPowerDown+0x20>)
 8004366:	4013      	ands	r3, r2
 8004368:	687a      	ldr	r2, [r7, #4]
 800436a:	6093      	str	r3, [r2, #8]
}
 800436c:	bf00      	nop
 800436e:	370c      	adds	r7, #12
 8004370:	46bd      	mov	sp, r7
 8004372:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004376:	4770      	bx	lr
 8004378:	5fffffc0 	.word	0x5fffffc0

0800437c <LL_ADC_IsDeepPowerDownEnabled>:
  * @rmtoll CR       DEEPPWD        LL_ADC_IsDeepPowerDownEnabled
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(ADC_TypeDef *ADCx)
{
 800437c:	b480      	push	{r7}
 800437e:	b083      	sub	sp, #12
 8004380:	af00      	add	r7, sp, #0
 8004382:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 8004384:	687b      	ldr	r3, [r7, #4]
 8004386:	689b      	ldr	r3, [r3, #8]
 8004388:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800438c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8004390:	d101      	bne.n	8004396 <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 8004392:	2301      	movs	r3, #1
 8004394:	e000      	b.n	8004398 <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 8004396:	2300      	movs	r3, #0
}
 8004398:	4618      	mov	r0, r3
 800439a:	370c      	adds	r7, #12
 800439c:	46bd      	mov	sp, r7
 800439e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043a2:	4770      	bx	lr

080043a4 <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 80043a4:	b480      	push	{r7}
 80043a6:	b083      	sub	sp, #12
 80043a8:	af00      	add	r7, sp, #0
 80043aa:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 80043ac:	687b      	ldr	r3, [r7, #4]
 80043ae:	689a      	ldr	r2, [r3, #8]
 80043b0:	4b05      	ldr	r3, [pc, #20]	; (80043c8 <LL_ADC_EnableInternalRegulator+0x24>)
 80043b2:	4013      	ands	r3, r2
 80043b4:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 80043b8:	687b      	ldr	r3, [r7, #4]
 80043ba:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 80043bc:	bf00      	nop
 80043be:	370c      	adds	r7, #12
 80043c0:	46bd      	mov	sp, r7
 80043c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043c6:	4770      	bx	lr
 80043c8:	6fffffc0 	.word	0x6fffffc0

080043cc <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(ADC_TypeDef *ADCx)
{
 80043cc:	b480      	push	{r7}
 80043ce:	b083      	sub	sp, #12
 80043d0:	af00      	add	r7, sp, #0
 80043d2:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 80043d4:	687b      	ldr	r3, [r7, #4]
 80043d6:	689b      	ldr	r3, [r3, #8]
 80043d8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80043dc:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80043e0:	d101      	bne.n	80043e6 <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 80043e2:	2301      	movs	r3, #1
 80043e4:	e000      	b.n	80043e8 <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 80043e6:	2300      	movs	r3, #0
}
 80043e8:	4618      	mov	r0, r3
 80043ea:	370c      	adds	r7, #12
 80043ec:	46bd      	mov	sp, r7
 80043ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043f2:	4770      	bx	lr

080043f4 <LL_ADC_Enable>:
  * @rmtoll CR       ADEN           LL_ADC_Enable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Enable(ADC_TypeDef *ADCx)
{
 80043f4:	b480      	push	{r7}
 80043f6:	b083      	sub	sp, #12
 80043f8:	af00      	add	r7, sp, #0
 80043fa:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 80043fc:	687b      	ldr	r3, [r7, #4]
 80043fe:	689a      	ldr	r2, [r3, #8]
 8004400:	4b05      	ldr	r3, [pc, #20]	; (8004418 <LL_ADC_Enable+0x24>)
 8004402:	4013      	ands	r3, r2
 8004404:	f043 0201 	orr.w	r2, r3, #1
 8004408:	687b      	ldr	r3, [r7, #4]
 800440a:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADEN);
}
 800440c:	bf00      	nop
 800440e:	370c      	adds	r7, #12
 8004410:	46bd      	mov	sp, r7
 8004412:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004416:	4770      	bx	lr
 8004418:	7fffffc0 	.word	0x7fffffc0

0800441c <LL_ADC_Disable>:
  * @rmtoll CR       ADDIS          LL_ADC_Disable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Disable(ADC_TypeDef *ADCx)
{
 800441c:	b480      	push	{r7}
 800441e:	b083      	sub	sp, #12
 8004420:	af00      	add	r7, sp, #0
 8004422:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8004424:	687b      	ldr	r3, [r7, #4]
 8004426:	689a      	ldr	r2, [r3, #8]
 8004428:	4b05      	ldr	r3, [pc, #20]	; (8004440 <LL_ADC_Disable+0x24>)
 800442a:	4013      	ands	r3, r2
 800442c:	f043 0202 	orr.w	r2, r3, #2
 8004430:	687b      	ldr	r3, [r7, #4]
 8004432:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADDIS);
}
 8004434:	bf00      	nop
 8004436:	370c      	adds	r7, #12
 8004438:	46bd      	mov	sp, r7
 800443a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800443e:	4770      	bx	lr
 8004440:	7fffffc0 	.word	0x7fffffc0

08004444 <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(ADC_TypeDef *ADCx)
{
 8004444:	b480      	push	{r7}
 8004446:	b083      	sub	sp, #12
 8004448:	af00      	add	r7, sp, #0
 800444a:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 800444c:	687b      	ldr	r3, [r7, #4]
 800444e:	689b      	ldr	r3, [r3, #8]
 8004450:	f003 0301 	and.w	r3, r3, #1
 8004454:	2b01      	cmp	r3, #1
 8004456:	d101      	bne.n	800445c <LL_ADC_IsEnabled+0x18>
 8004458:	2301      	movs	r3, #1
 800445a:	e000      	b.n	800445e <LL_ADC_IsEnabled+0x1a>
 800445c:	2300      	movs	r3, #0
}
 800445e:	4618      	mov	r0, r3
 8004460:	370c      	adds	r7, #12
 8004462:	46bd      	mov	sp, r7
 8004464:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004468:	4770      	bx	lr

0800446a <LL_ADC_IsDisableOngoing>:
  * @rmtoll CR       ADDIS          LL_ADC_IsDisableOngoing
  * @param  ADCx ADC instance
  * @retval 0: no ADC disable command on going.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDisableOngoing(ADC_TypeDef *ADCx)
{
 800446a:	b480      	push	{r7}
 800446c:	b083      	sub	sp, #12
 800446e:	af00      	add	r7, sp, #0
 8004470:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADDIS) == (ADC_CR_ADDIS)) ? 1UL : 0UL);
 8004472:	687b      	ldr	r3, [r7, #4]
 8004474:	689b      	ldr	r3, [r3, #8]
 8004476:	f003 0302 	and.w	r3, r3, #2
 800447a:	2b02      	cmp	r3, #2
 800447c:	d101      	bne.n	8004482 <LL_ADC_IsDisableOngoing+0x18>
 800447e:	2301      	movs	r3, #1
 8004480:	e000      	b.n	8004484 <LL_ADC_IsDisableOngoing+0x1a>
 8004482:	2300      	movs	r3, #0
}
 8004484:	4618      	mov	r0, r3
 8004486:	370c      	adds	r7, #12
 8004488:	46bd      	mov	sp, r7
 800448a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800448e:	4770      	bx	lr

08004490 <LL_ADC_REG_StartConversion>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_StartConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StartConversion(ADC_TypeDef *ADCx)
{
 8004490:	b480      	push	{r7}
 8004492:	b083      	sub	sp, #12
 8004494:	af00      	add	r7, sp, #0
 8004496:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8004498:	687b      	ldr	r3, [r7, #4]
 800449a:	689a      	ldr	r2, [r3, #8]
 800449c:	4b05      	ldr	r3, [pc, #20]	; (80044b4 <LL_ADC_REG_StartConversion+0x24>)
 800449e:	4013      	ands	r3, r2
 80044a0:	f043 0204 	orr.w	r2, r3, #4
 80044a4:	687b      	ldr	r3, [r7, #4]
 80044a6:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTART);
}
 80044a8:	bf00      	nop
 80044aa:	370c      	adds	r7, #12
 80044ac:	46bd      	mov	sp, r7
 80044ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044b2:	4770      	bx	lr
 80044b4:	7fffffc0 	.word	0x7fffffc0

080044b8 <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 80044b8:	b480      	push	{r7}
 80044ba:	b083      	sub	sp, #12
 80044bc:	af00      	add	r7, sp, #0
 80044be:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 80044c0:	687b      	ldr	r3, [r7, #4]
 80044c2:	689b      	ldr	r3, [r3, #8]
 80044c4:	f003 0304 	and.w	r3, r3, #4
 80044c8:	2b04      	cmp	r3, #4
 80044ca:	d101      	bne.n	80044d0 <LL_ADC_REG_IsConversionOngoing+0x18>
 80044cc:	2301      	movs	r3, #1
 80044ce:	e000      	b.n	80044d2 <LL_ADC_REG_IsConversionOngoing+0x1a>
 80044d0:	2300      	movs	r3, #0
}
 80044d2:	4618      	mov	r0, r3
 80044d4:	370c      	adds	r7, #12
 80044d6:	46bd      	mov	sp, r7
 80044d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044dc:	4770      	bx	lr

080044de <LL_ADC_INJ_IsConversionOngoing>:
  * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 80044de:	b480      	push	{r7}
 80044e0:	b083      	sub	sp, #12
 80044e2:	af00      	add	r7, sp, #0
 80044e4:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 80044e6:	687b      	ldr	r3, [r7, #4]
 80044e8:	689b      	ldr	r3, [r3, #8]
 80044ea:	f003 0308 	and.w	r3, r3, #8
 80044ee:	2b08      	cmp	r3, #8
 80044f0:	d101      	bne.n	80044f6 <LL_ADC_INJ_IsConversionOngoing+0x18>
 80044f2:	2301      	movs	r3, #1
 80044f4:	e000      	b.n	80044f8 <LL_ADC_INJ_IsConversionOngoing+0x1a>
 80044f6:	2300      	movs	r3, #0
}
 80044f8:	4618      	mov	r0, r3
 80044fa:	370c      	adds	r7, #12
 80044fc:	46bd      	mov	sp, r7
 80044fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004502:	4770      	bx	lr

08004504 <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8004504:	b590      	push	{r4, r7, lr}
 8004506:	b089      	sub	sp, #36	; 0x24
 8004508:	af00      	add	r7, sp, #0
 800450a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800450c:	2300      	movs	r3, #0
 800450e:	77fb      	strb	r3, [r7, #31]
  uint32_t tmpCFGR;
  uint32_t tmp_adc_reg_is_conversion_on_going;
  __IO uint32_t wait_loop_index = 0UL;
 8004510:	2300      	movs	r3, #0
 8004512:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;

  /* Check ADC handle */
  if (hadc == NULL)
 8004514:	687b      	ldr	r3, [r7, #4]
 8004516:	2b00      	cmp	r3, #0
 8004518:	d101      	bne.n	800451e <HAL_ADC_Init+0x1a>
  {
    return HAL_ERROR;
 800451a:	2301      	movs	r3, #1
 800451c:	e18f      	b.n	800483e <HAL_ADC_Init+0x33a>
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 800451e:	687b      	ldr	r3, [r7, #4]
 8004520:	68db      	ldr	r3, [r3, #12]
 8004522:	2b00      	cmp	r3, #0
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8004524:	687b      	ldr	r3, [r7, #4]
 8004526:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004528:	2b00      	cmp	r3, #0
 800452a:	d109      	bne.n	8004540 <HAL_ADC_Init+0x3c>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 800452c:	6878      	ldr	r0, [r7, #4]
 800452e:	f7fe feff 	bl	8003330 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8004532:	687b      	ldr	r3, [r7, #4]
 8004534:	2200      	movs	r2, #0
 8004536:	659a      	str	r2, [r3, #88]	; 0x58

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 8004538:	687b      	ldr	r3, [r7, #4]
 800453a:	2200      	movs	r2, #0
 800453c:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 8004540:	687b      	ldr	r3, [r7, #4]
 8004542:	681b      	ldr	r3, [r3, #0]
 8004544:	4618      	mov	r0, r3
 8004546:	f7ff ff19 	bl	800437c <LL_ADC_IsDeepPowerDownEnabled>
 800454a:	4603      	mov	r3, r0
 800454c:	2b00      	cmp	r3, #0
 800454e:	d004      	beq.n	800455a <HAL_ADC_Init+0x56>
  {
    /* Disable ADC deep power down mode */
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
 8004550:	687b      	ldr	r3, [r7, #4]
 8004552:	681b      	ldr	r3, [r3, #0]
 8004554:	4618      	mov	r0, r3
 8004556:	f7ff feff 	bl	8004358 <LL_ADC_DisableDeepPowerDown>
    /* System was in deep power down mode, calibration must
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 800455a:	687b      	ldr	r3, [r7, #4]
 800455c:	681b      	ldr	r3, [r3, #0]
 800455e:	4618      	mov	r0, r3
 8004560:	f7ff ff34 	bl	80043cc <LL_ADC_IsInternalRegulatorEnabled>
 8004564:	4603      	mov	r3, r0
 8004566:	2b00      	cmp	r3, #0
 8004568:	d114      	bne.n	8004594 <HAL_ADC_Init+0x90>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 800456a:	687b      	ldr	r3, [r7, #4]
 800456c:	681b      	ldr	r3, [r3, #0]
 800456e:	4618      	mov	r0, r3
 8004570:	f7ff ff18 	bl	80043a4 <LL_ADC_EnableInternalRegulator>

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8004574:	4b87      	ldr	r3, [pc, #540]	; (8004794 <HAL_ADC_Init+0x290>)
 8004576:	681b      	ldr	r3, [r3, #0]
 8004578:	099b      	lsrs	r3, r3, #6
 800457a:	4a87      	ldr	r2, [pc, #540]	; (8004798 <HAL_ADC_Init+0x294>)
 800457c:	fba2 2303 	umull	r2, r3, r2, r3
 8004580:	099b      	lsrs	r3, r3, #6
 8004582:	3301      	adds	r3, #1
 8004584:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 8004586:	e002      	b.n	800458e <HAL_ADC_Init+0x8a>
    {
      wait_loop_index--;
 8004588:	68bb      	ldr	r3, [r7, #8]
 800458a:	3b01      	subs	r3, #1
 800458c:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 800458e:	68bb      	ldr	r3, [r7, #8]
 8004590:	2b00      	cmp	r3, #0
 8004592:	d1f9      	bne.n	8004588 <HAL_ADC_Init+0x84>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8004594:	687b      	ldr	r3, [r7, #4]
 8004596:	681b      	ldr	r3, [r3, #0]
 8004598:	4618      	mov	r0, r3
 800459a:	f7ff ff17 	bl	80043cc <LL_ADC_IsInternalRegulatorEnabled>
 800459e:	4603      	mov	r3, r0
 80045a0:	2b00      	cmp	r3, #0
 80045a2:	d10d      	bne.n	80045c0 <HAL_ADC_Init+0xbc>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80045a4:	687b      	ldr	r3, [r7, #4]
 80045a6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80045a8:	f043 0210 	orr.w	r2, r3, #16
 80045ac:	687b      	ldr	r3, [r7, #4]
 80045ae:	655a      	str	r2, [r3, #84]	; 0x54

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80045b0:	687b      	ldr	r3, [r7, #4]
 80045b2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80045b4:	f043 0201 	orr.w	r2, r3, #1
 80045b8:	687b      	ldr	r3, [r7, #4]
 80045ba:	659a      	str	r2, [r3, #88]	; 0x58

    tmp_hal_status = HAL_ERROR;
 80045bc:	2301      	movs	r3, #1
 80045be:	77fb      	strb	r3, [r7, #31]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_reg_is_conversion_on_going = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 80045c0:	687b      	ldr	r3, [r7, #4]
 80045c2:	681b      	ldr	r3, [r3, #0]
 80045c4:	4618      	mov	r0, r3
 80045c6:	f7ff ff77 	bl	80044b8 <LL_ADC_REG_IsConversionOngoing>
 80045ca:	6178      	str	r0, [r7, #20]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 80045cc:	687b      	ldr	r3, [r7, #4]
 80045ce:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80045d0:	f003 0310 	and.w	r3, r3, #16
 80045d4:	2b00      	cmp	r3, #0
 80045d6:	f040 8129 	bne.w	800482c <HAL_ADC_Init+0x328>
      && (tmp_adc_reg_is_conversion_on_going == 0UL)
 80045da:	697b      	ldr	r3, [r7, #20]
 80045dc:	2b00      	cmp	r3, #0
 80045de:	f040 8125 	bne.w	800482c <HAL_ADC_Init+0x328>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80045e2:	687b      	ldr	r3, [r7, #4]
 80045e4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80045e6:	f423 7381 	bic.w	r3, r3, #258	; 0x102
 80045ea:	f043 0202 	orr.w	r2, r3, #2
 80045ee:	687b      	ldr	r3, [r7, #4]
 80045f0:	655a      	str	r2, [r3, #84]	; 0x54
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 80045f2:	687b      	ldr	r3, [r7, #4]
 80045f4:	681b      	ldr	r3, [r3, #0]
 80045f6:	4618      	mov	r0, r3
 80045f8:	f7ff ff24 	bl	8004444 <LL_ADC_IsEnabled>
 80045fc:	4603      	mov	r3, r0
 80045fe:	2b00      	cmp	r3, #0
 8004600:	d136      	bne.n	8004670 <HAL_ADC_Init+0x16c>
    {
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8004602:	687b      	ldr	r3, [r7, #4]
 8004604:	681b      	ldr	r3, [r3, #0]
 8004606:	4a65      	ldr	r2, [pc, #404]	; (800479c <HAL_ADC_Init+0x298>)
 8004608:	4293      	cmp	r3, r2
 800460a:	d004      	beq.n	8004616 <HAL_ADC_Init+0x112>
 800460c:	687b      	ldr	r3, [r7, #4]
 800460e:	681b      	ldr	r3, [r3, #0]
 8004610:	4a63      	ldr	r2, [pc, #396]	; (80047a0 <HAL_ADC_Init+0x29c>)
 8004612:	4293      	cmp	r3, r2
 8004614:	d10e      	bne.n	8004634 <HAL_ADC_Init+0x130>
 8004616:	4861      	ldr	r0, [pc, #388]	; (800479c <HAL_ADC_Init+0x298>)
 8004618:	f7ff ff14 	bl	8004444 <LL_ADC_IsEnabled>
 800461c:	4604      	mov	r4, r0
 800461e:	4860      	ldr	r0, [pc, #384]	; (80047a0 <HAL_ADC_Init+0x29c>)
 8004620:	f7ff ff10 	bl	8004444 <LL_ADC_IsEnabled>
 8004624:	4603      	mov	r3, r0
 8004626:	4323      	orrs	r3, r4
 8004628:	2b00      	cmp	r3, #0
 800462a:	bf0c      	ite	eq
 800462c:	2301      	moveq	r3, #1
 800462e:	2300      	movne	r3, #0
 8004630:	b2db      	uxtb	r3, r3
 8004632:	e008      	b.n	8004646 <HAL_ADC_Init+0x142>
 8004634:	485b      	ldr	r0, [pc, #364]	; (80047a4 <HAL_ADC_Init+0x2a0>)
 8004636:	f7ff ff05 	bl	8004444 <LL_ADC_IsEnabled>
 800463a:	4603      	mov	r3, r0
 800463c:	2b00      	cmp	r3, #0
 800463e:	bf0c      	ite	eq
 8004640:	2301      	moveq	r3, #1
 8004642:	2300      	movne	r3, #0
 8004644:	b2db      	uxtb	r3, r3
 8004646:	2b00      	cmp	r3, #0
 8004648:	d012      	beq.n	8004670 <HAL_ADC_Init+0x16c>
        /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
        /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() or                             */
        /*     HAL_ADCEx_InjectedConfigChannel() )                              */
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 800464a:	687b      	ldr	r3, [r7, #4]
 800464c:	681b      	ldr	r3, [r3, #0]
 800464e:	4a53      	ldr	r2, [pc, #332]	; (800479c <HAL_ADC_Init+0x298>)
 8004650:	4293      	cmp	r3, r2
 8004652:	d004      	beq.n	800465e <HAL_ADC_Init+0x15a>
 8004654:	687b      	ldr	r3, [r7, #4]
 8004656:	681b      	ldr	r3, [r3, #0]
 8004658:	4a51      	ldr	r2, [pc, #324]	; (80047a0 <HAL_ADC_Init+0x29c>)
 800465a:	4293      	cmp	r3, r2
 800465c:	d101      	bne.n	8004662 <HAL_ADC_Init+0x15e>
 800465e:	4a52      	ldr	r2, [pc, #328]	; (80047a8 <HAL_ADC_Init+0x2a4>)
 8004660:	e000      	b.n	8004664 <HAL_ADC_Init+0x160>
 8004662:	4a52      	ldr	r2, [pc, #328]	; (80047ac <HAL_ADC_Init+0x2a8>)
 8004664:	687b      	ldr	r3, [r7, #4]
 8004666:	685b      	ldr	r3, [r3, #4]
 8004668:	4619      	mov	r1, r3
 800466a:	4610      	mov	r0, r2
 800466c:	f7ff fd2e 	bl	80040cc <LL_ADC_SetCommonClock>
                  ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
    }

#else

    if ((HAL_GetREVID() > REV_ID_Y) && (ADC_RESOLUTION_8B == hadc->Init.Resolution))
 8004670:	f7ff fcf6 	bl	8004060 <HAL_GetREVID>
 8004674:	4603      	mov	r3, r0
 8004676:	f241 0203 	movw	r2, #4099	; 0x1003
 800467a:	4293      	cmp	r3, r2
 800467c:	d914      	bls.n	80046a8 <HAL_ADC_Init+0x1a4>
 800467e:	687b      	ldr	r3, [r7, #4]
 8004680:	689b      	ldr	r3, [r3, #8]
 8004682:	2b10      	cmp	r3, #16
 8004684:	d110      	bne.n	80046a8 <HAL_ADC_Init+0x1a4>
    {
      /* for STM32H7 silicon rev.B and above , ADC_CFGR_RES value for 8bits resolution is : b111 */
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 8004686:	687b      	ldr	r3, [r7, #4]
 8004688:	7d5b      	ldrb	r3, [r3, #21]
 800468a:	035a      	lsls	r2, r3, #13
                  hadc->Init.Overrun                                                    |
 800468c:	687b      	ldr	r3, [r7, #4]
 800468e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 8004690:	431a      	orrs	r2, r3
                  hadc->Init.Resolution | (ADC_CFGR_RES_1 | ADC_CFGR_RES_0)                |
 8004692:	687b      	ldr	r3, [r7, #4]
 8004694:	689b      	ldr	r3, [r3, #8]
                  hadc->Init.Overrun                                                    |
 8004696:	431a      	orrs	r2, r3
                  ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 8004698:	687b      	ldr	r3, [r7, #4]
 800469a:	7f1b      	ldrb	r3, [r3, #28]
 800469c:	041b      	lsls	r3, r3, #16
                  hadc->Init.Resolution | (ADC_CFGR_RES_1 | ADC_CFGR_RES_0)                |
 800469e:	4313      	orrs	r3, r2
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 80046a0:	f043 030c 	orr.w	r3, r3, #12
 80046a4:	61bb      	str	r3, [r7, #24]
 80046a6:	e00d      	b.n	80046c4 <HAL_ADC_Init+0x1c0>
    }
    else
    {

      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 80046a8:	687b      	ldr	r3, [r7, #4]
 80046aa:	7d5b      	ldrb	r3, [r3, #21]
 80046ac:	035a      	lsls	r2, r3, #13
                  hadc->Init.Overrun                                                    |
 80046ae:	687b      	ldr	r3, [r7, #4]
 80046b0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 80046b2:	431a      	orrs	r2, r3
                  hadc->Init.Resolution                                                 |
 80046b4:	687b      	ldr	r3, [r7, #4]
 80046b6:	689b      	ldr	r3, [r3, #8]
                  hadc->Init.Overrun                                                    |
 80046b8:	431a      	orrs	r2, r3
                  ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 80046ba:	687b      	ldr	r3, [r7, #4]
 80046bc:	7f1b      	ldrb	r3, [r3, #28]
 80046be:	041b      	lsls	r3, r3, #16
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 80046c0:	4313      	orrs	r3, r2
 80046c2:	61bb      	str	r3, [r7, #24]
    }

#endif /* ADC_VER_V5_3 */

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 80046c4:	687b      	ldr	r3, [r7, #4]
 80046c6:	7f1b      	ldrb	r3, [r3, #28]
 80046c8:	2b01      	cmp	r3, #1
 80046ca:	d106      	bne.n	80046da <HAL_ADC_Init+0x1d6>
    {
      tmpCFGR |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 80046cc:	687b      	ldr	r3, [r7, #4]
 80046ce:	6a1b      	ldr	r3, [r3, #32]
 80046d0:	3b01      	subs	r3, #1
 80046d2:	045b      	lsls	r3, r3, #17
 80046d4:	69ba      	ldr	r2, [r7, #24]
 80046d6:	4313      	orrs	r3, r2
 80046d8:	61bb      	str	r3, [r7, #24]
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 80046da:	687b      	ldr	r3, [r7, #4]
 80046dc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80046de:	2b00      	cmp	r3, #0
 80046e0:	d009      	beq.n	80046f6 <HAL_ADC_Init+0x1f2>
    {
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 80046e2:	687b      	ldr	r3, [r7, #4]
 80046e4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80046e6:	f403 7278 	and.w	r2, r3, #992	; 0x3e0
                  | hadc->Init.ExternalTrigConvEdge
 80046ea:	687b      	ldr	r3, [r7, #4]
 80046ec:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80046ee:	4313      	orrs	r3, r2
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 80046f0:	69ba      	ldr	r2, [r7, #24]
 80046f2:	4313      	orrs	r3, r2
 80046f4:	61bb      	str	r3, [r7, #24]
      /* Update Configuration Register CFGR */
      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmpCFGR);
    }
#else
    /* Update Configuration Register CFGR */
    MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmpCFGR);
 80046f6:	687b      	ldr	r3, [r7, #4]
 80046f8:	681b      	ldr	r3, [r3, #0]
 80046fa:	68da      	ldr	r2, [r3, #12]
 80046fc:	4b2c      	ldr	r3, [pc, #176]	; (80047b0 <HAL_ADC_Init+0x2ac>)
 80046fe:	4013      	ands	r3, r2
 8004700:	687a      	ldr	r2, [r7, #4]
 8004702:	6812      	ldr	r2, [r2, #0]
 8004704:	69b9      	ldr	r1, [r7, #24]
 8004706:	430b      	orrs	r3, r1
 8004708:	60d3      	str	r3, [r2, #12]
    /* Parameters that can be updated when ADC is disabled or enabled without */
    /* conversion on going on regular and injected groups:                    */
    /*  - Conversion data management      Init.ConversionDataManagement       */
    /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
    /*  - Oversampling parameters         Init.Oversampling                   */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 800470a:	687b      	ldr	r3, [r7, #4]
 800470c:	681b      	ldr	r3, [r3, #0]
 800470e:	4618      	mov	r0, r3
 8004710:	f7ff fed2 	bl	80044b8 <LL_ADC_REG_IsConversionOngoing>
 8004714:	6138      	str	r0, [r7, #16]
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8004716:	687b      	ldr	r3, [r7, #4]
 8004718:	681b      	ldr	r3, [r3, #0]
 800471a:	4618      	mov	r0, r3
 800471c:	f7ff fedf 	bl	80044de <LL_ADC_INJ_IsConversionOngoing>
 8004720:	60f8      	str	r0, [r7, #12]
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8004722:	693b      	ldr	r3, [r7, #16]
 8004724:	2b00      	cmp	r3, #0
 8004726:	d15f      	bne.n	80047e8 <HAL_ADC_Init+0x2e4>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8004728:	68fb      	ldr	r3, [r7, #12]
 800472a:	2b00      	cmp	r3, #0
 800472c:	d15c      	bne.n	80047e8 <HAL_ADC_Init+0x2e4>
                    ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
                    ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.ConversionDataManagement));
      }
#else
      tmpCFGR = (
                  ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 800472e:	687b      	ldr	r3, [r7, #4]
 8004730:	7d1b      	ldrb	r3, [r3, #20]
 8004732:	039a      	lsls	r2, r3, #14
                  ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.ConversionDataManagement));
 8004734:	687b      	ldr	r3, [r7, #4]
 8004736:	6adb      	ldr	r3, [r3, #44]	; 0x2c
      tmpCFGR = (
 8004738:	4313      	orrs	r3, r2
 800473a:	61bb      	str	r3, [r7, #24]
#endif

      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmpCFGR);
 800473c:	687b      	ldr	r3, [r7, #4]
 800473e:	681b      	ldr	r3, [r3, #0]
 8004740:	68da      	ldr	r2, [r3, #12]
 8004742:	4b1c      	ldr	r3, [pc, #112]	; (80047b4 <HAL_ADC_Init+0x2b0>)
 8004744:	4013      	ands	r3, r2
 8004746:	687a      	ldr	r2, [r7, #4]
 8004748:	6812      	ldr	r2, [r2, #0]
 800474a:	69b9      	ldr	r1, [r7, #24]
 800474c:	430b      	orrs	r3, r1
 800474e:	60d3      	str	r3, [r2, #12]

      if (hadc->Init.OversamplingMode == ENABLE)
 8004750:	687b      	ldr	r3, [r7, #4]
 8004752:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8004756:	2b01      	cmp	r3, #1
 8004758:	d130      	bne.n	80047bc <HAL_ADC_Init+0x2b8>
#endif
        assert_param(IS_ADC_RIGHT_BIT_SHIFT(hadc->Init.Oversampling.RightBitShift));
        assert_param(IS_ADC_TRIGGERED_OVERSAMPLING_MODE(hadc->Init.Oversampling.TriggeredMode));
        assert_param(IS_ADC_REGOVERSAMPLING_MODE(hadc->Init.Oversampling.OversamplingStopReset));

        if ((hadc->Init.ExternalTrigConv == ADC_SOFTWARE_START)
 800475a:	687b      	ldr	r3, [r7, #4]
 800475c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800475e:	2b00      	cmp	r3, #0
        /*  - Oversampling Ratio                                               */
        /*  - Right bit shift                                                  */
        /*  - Left bit shift                                                   */
        /*  - Triggered mode                                                   */
        /*  - Oversampling mode (continued/resumed)                            */
        MODIFY_REG(hadc->Instance->CFGR2, ADC_CFGR2_FIELDS,
 8004760:	687b      	ldr	r3, [r7, #4]
 8004762:	681b      	ldr	r3, [r3, #0]
 8004764:	691a      	ldr	r2, [r3, #16]
 8004766:	4b14      	ldr	r3, [pc, #80]	; (80047b8 <HAL_ADC_Init+0x2b4>)
 8004768:	4013      	ands	r3, r2
 800476a:	687a      	ldr	r2, [r7, #4]
 800476c:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 800476e:	3a01      	subs	r2, #1
 8004770:	0411      	lsls	r1, r2, #16
 8004772:	687a      	ldr	r2, [r7, #4]
 8004774:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8004776:	4311      	orrs	r1, r2
 8004778:	687a      	ldr	r2, [r7, #4]
 800477a:	6c52      	ldr	r2, [r2, #68]	; 0x44
 800477c:	4311      	orrs	r1, r2
 800477e:	687a      	ldr	r2, [r7, #4]
 8004780:	6c92      	ldr	r2, [r2, #72]	; 0x48
 8004782:	430a      	orrs	r2, r1
 8004784:	431a      	orrs	r2, r3
 8004786:	687b      	ldr	r3, [r7, #4]
 8004788:	681b      	ldr	r3, [r3, #0]
 800478a:	f042 0201 	orr.w	r2, r2, #1
 800478e:	611a      	str	r2, [r3, #16]
 8004790:	e01c      	b.n	80047cc <HAL_ADC_Init+0x2c8>
 8004792:	bf00      	nop
 8004794:	20000010 	.word	0x20000010
 8004798:	053e2d63 	.word	0x053e2d63
 800479c:	40022000 	.word	0x40022000
 80047a0:	40022100 	.word	0x40022100
 80047a4:	58026000 	.word	0x58026000
 80047a8:	40022300 	.word	0x40022300
 80047ac:	58026300 	.word	0x58026300
 80047b0:	fff0c003 	.word	0xfff0c003
 80047b4:	ffffbffc 	.word	0xffffbffc
 80047b8:	fc00f81e 	.word	0xfc00f81e

      }
      else
      {
        /* Disable ADC oversampling scope on ADC group regular */
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 80047bc:	687b      	ldr	r3, [r7, #4]
 80047be:	681b      	ldr	r3, [r3, #0]
 80047c0:	691a      	ldr	r2, [r3, #16]
 80047c2:	687b      	ldr	r3, [r7, #4]
 80047c4:	681b      	ldr	r3, [r3, #0]
 80047c6:	f022 0201 	bic.w	r2, r2, #1
 80047ca:	611a      	str	r2, [r3, #16]
      }

      /* Set the LeftShift parameter: it is applied to the final result with or without oversampling */
      MODIFY_REG(hadc->Instance->CFGR2, ADC_CFGR2_LSHIFT, hadc->Init.LeftBitShift);
 80047cc:	687b      	ldr	r3, [r7, #4]
 80047ce:	681b      	ldr	r3, [r3, #0]
 80047d0:	691b      	ldr	r3, [r3, #16]
 80047d2:	f023 4170 	bic.w	r1, r3, #4026531840	; 0xf0000000
 80047d6:	687b      	ldr	r3, [r7, #4]
 80047d8:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80047da:	687b      	ldr	r3, [r7, #4]
 80047dc:	681b      	ldr	r3, [r3, #0]
 80047de:	430a      	orrs	r2, r1
 80047e0:	611a      	str	r2, [r3, #16]
        /* Configure the BOOST Mode */
        ADC_ConfigureBoostMode(hadc);
      }
#else
      /* Configure the BOOST Mode */
      ADC_ConfigureBoostMode(hadc);
 80047e2:	6878      	ldr	r0, [r7, #4]
 80047e4:	f001 f804 	bl	80057f0 <ADC_ConfigureBoostMode>
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 80047e8:	687b      	ldr	r3, [r7, #4]
 80047ea:	68db      	ldr	r3, [r3, #12]
 80047ec:	2b01      	cmp	r3, #1
 80047ee:	d10c      	bne.n	800480a <HAL_ADC_Init+0x306>
    {
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 80047f0:	687b      	ldr	r3, [r7, #4]
 80047f2:	681b      	ldr	r3, [r3, #0]
 80047f4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80047f6:	f023 010f 	bic.w	r1, r3, #15
 80047fa:	687b      	ldr	r3, [r7, #4]
 80047fc:	699b      	ldr	r3, [r3, #24]
 80047fe:	1e5a      	subs	r2, r3, #1
 8004800:	687b      	ldr	r3, [r7, #4]
 8004802:	681b      	ldr	r3, [r3, #0]
 8004804:	430a      	orrs	r2, r1
 8004806:	631a      	str	r2, [r3, #48]	; 0x30
 8004808:	e007      	b.n	800481a <HAL_ADC_Init+0x316>
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 800480a:	687b      	ldr	r3, [r7, #4]
 800480c:	681b      	ldr	r3, [r3, #0]
 800480e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8004810:	687b      	ldr	r3, [r7, #4]
 8004812:	681b      	ldr	r3, [r3, #0]
 8004814:	f022 020f 	bic.w	r2, r2, #15
 8004818:	631a      	str	r2, [r3, #48]	; 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 800481a:	687b      	ldr	r3, [r7, #4]
 800481c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800481e:	f023 0303 	bic.w	r3, r3, #3
 8004822:	f043 0201 	orr.w	r2, r3, #1
 8004826:	687b      	ldr	r3, [r7, #4]
 8004828:	655a      	str	r2, [r3, #84]	; 0x54
 800482a:	e007      	b.n	800483c <HAL_ADC_Init+0x338>
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800482c:	687b      	ldr	r3, [r7, #4]
 800482e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004830:	f043 0210 	orr.w	r2, r3, #16
 8004834:	687b      	ldr	r3, [r7, #4]
 8004836:	655a      	str	r2, [r3, #84]	; 0x54

    tmp_hal_status = HAL_ERROR;
 8004838:	2301      	movs	r3, #1
 800483a:	77fb      	strb	r3, [r7, #31]
  }

  /* Return function status */
  return tmp_hal_status;
 800483c:	7ffb      	ldrb	r3, [r7, #31]
}
 800483e:	4618      	mov	r0, r3
 8004840:	3724      	adds	r7, #36	; 0x24
 8004842:	46bd      	mov	sp, r7
 8004844:	bd90      	pop	{r4, r7, pc}
 8004846:	bf00      	nop

08004848 <HAL_ADC_Start_IT>:
  *          before calling HAL_ADC_Start_IT().
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start_IT(ADC_HandleTypeDef *hadc)
{
 8004848:	b580      	push	{r7, lr}
 800484a:	b086      	sub	sp, #24
 800484c:	af00      	add	r7, sp, #0
 800484e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status;
  const ADC_TypeDef *tmpADC_Master;
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8004850:	687b      	ldr	r3, [r7, #4]
 8004852:	681b      	ldr	r3, [r3, #0]
 8004854:	4a92      	ldr	r2, [pc, #584]	; (8004aa0 <HAL_ADC_Start_IT+0x258>)
 8004856:	4293      	cmp	r3, r2
 8004858:	d004      	beq.n	8004864 <HAL_ADC_Start_IT+0x1c>
 800485a:	687b      	ldr	r3, [r7, #4]
 800485c:	681b      	ldr	r3, [r3, #0]
 800485e:	4a91      	ldr	r2, [pc, #580]	; (8004aa4 <HAL_ADC_Start_IT+0x25c>)
 8004860:	4293      	cmp	r3, r2
 8004862:	d101      	bne.n	8004868 <HAL_ADC_Start_IT+0x20>
 8004864:	4b90      	ldr	r3, [pc, #576]	; (8004aa8 <HAL_ADC_Start_IT+0x260>)
 8004866:	e000      	b.n	800486a <HAL_ADC_Start_IT+0x22>
 8004868:	4b90      	ldr	r3, [pc, #576]	; (8004aac <HAL_ADC_Start_IT+0x264>)
 800486a:	4618      	mov	r0, r3
 800486c:	f7ff fd58 	bl	8004320 <LL_ADC_GetMultimode>
 8004870:	6138      	str	r0, [r7, #16]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Perform ADC enable and conversion start if no conversion is on going */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8004872:	687b      	ldr	r3, [r7, #4]
 8004874:	681b      	ldr	r3, [r3, #0]
 8004876:	4618      	mov	r0, r3
 8004878:	f7ff fe1e 	bl	80044b8 <LL_ADC_REG_IsConversionOngoing>
 800487c:	4603      	mov	r3, r0
 800487e:	2b00      	cmp	r3, #0
 8004880:	f040 8118 	bne.w	8004ab4 <HAL_ADC_Start_IT+0x26c>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 8004884:	687b      	ldr	r3, [r7, #4]
 8004886:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 800488a:	2b01      	cmp	r3, #1
 800488c:	d101      	bne.n	8004892 <HAL_ADC_Start_IT+0x4a>
 800488e:	2302      	movs	r3, #2
 8004890:	e113      	b.n	8004aba <HAL_ADC_Start_IT+0x272>
 8004892:	687b      	ldr	r3, [r7, #4]
 8004894:	2201      	movs	r2, #1
 8004896:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Enable the ADC peripheral */
    tmp_hal_status = ADC_Enable(hadc);
 800489a:	6878      	ldr	r0, [r7, #4]
 800489c:	f000 febe 	bl	800561c <ADC_Enable>
 80048a0:	4603      	mov	r3, r0
 80048a2:	75fb      	strb	r3, [r7, #23]

    /* Start conversion if ADC is effectively enabled */
    if (tmp_hal_status == HAL_OK)
 80048a4:	7dfb      	ldrb	r3, [r7, #23]
 80048a6:	2b00      	cmp	r3, #0
 80048a8:	f040 80f5 	bne.w	8004a96 <HAL_ADC_Start_IT+0x24e>
    {
      /* Set ADC state                                                        */
      /* - Clear state bitfield related to regular group conversion results   */
      /* - Set state bitfield related to regular operation                    */
      ADC_STATE_CLR_SET(hadc->State,
 80048ac:	687b      	ldr	r3, [r7, #4]
 80048ae:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80048b0:	4b7f      	ldr	r3, [pc, #508]	; (8004ab0 <HAL_ADC_Start_IT+0x268>)
 80048b2:	4013      	ands	r3, r2
 80048b4:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 80048b8:	687b      	ldr	r3, [r7, #4]
 80048ba:	655a      	str	r2, [r3, #84]	; 0x54
                        HAL_ADC_STATE_REG_BUSY);

      /* Reset HAL_ADC_STATE_MULTIMODE_SLAVE bit
        - if ADC instance is master or if multimode feature is not available
        - if multimode setting is disabled (ADC instance slave in independent mode) */
      if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 80048bc:	687b      	ldr	r3, [r7, #4]
 80048be:	681b      	ldr	r3, [r3, #0]
 80048c0:	4a78      	ldr	r2, [pc, #480]	; (8004aa4 <HAL_ADC_Start_IT+0x25c>)
 80048c2:	4293      	cmp	r3, r2
 80048c4:	d002      	beq.n	80048cc <HAL_ADC_Start_IT+0x84>
 80048c6:	687b      	ldr	r3, [r7, #4]
 80048c8:	681b      	ldr	r3, [r3, #0]
 80048ca:	e000      	b.n	80048ce <HAL_ADC_Start_IT+0x86>
 80048cc:	4b74      	ldr	r3, [pc, #464]	; (8004aa0 <HAL_ADC_Start_IT+0x258>)
 80048ce:	687a      	ldr	r2, [r7, #4]
 80048d0:	6812      	ldr	r2, [r2, #0]
 80048d2:	4293      	cmp	r3, r2
 80048d4:	d002      	beq.n	80048dc <HAL_ADC_Start_IT+0x94>
          || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 80048d6:	693b      	ldr	r3, [r7, #16]
 80048d8:	2b00      	cmp	r3, #0
 80048da:	d105      	bne.n	80048e8 <HAL_ADC_Start_IT+0xa0>
         )
      {
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 80048dc:	687b      	ldr	r3, [r7, #4]
 80048de:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80048e0:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 80048e4:	687b      	ldr	r3, [r7, #4]
 80048e6:	655a      	str	r2, [r3, #84]	; 0x54
      }

      /* Set ADC error code */
      /* Check if a conversion is on going on ADC group injected */
      if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) != 0UL)
 80048e8:	687b      	ldr	r3, [r7, #4]
 80048ea:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80048ec:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80048f0:	2b00      	cmp	r3, #0
 80048f2:	d006      	beq.n	8004902 <HAL_ADC_Start_IT+0xba>
      {
        /* Reset ADC error code fields related to regular conversions only */
        CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 80048f4:	687b      	ldr	r3, [r7, #4]
 80048f6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80048f8:	f023 0206 	bic.w	r2, r3, #6
 80048fc:	687b      	ldr	r3, [r7, #4]
 80048fe:	659a      	str	r2, [r3, #88]	; 0x58
 8004900:	e002      	b.n	8004908 <HAL_ADC_Start_IT+0xc0>
      }
      else
      {
        /* Reset all ADC error code fields */
        ADC_CLEAR_ERRORCODE(hadc);
 8004902:	687b      	ldr	r3, [r7, #4]
 8004904:	2200      	movs	r2, #0
 8004906:	659a      	str	r2, [r3, #88]	; 0x58
      }

      /* Clear ADC group regular conversion flag and overrun flag               */
      /* (To ensure of no unknown state from potential previous ADC operations) */
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 8004908:	687b      	ldr	r3, [r7, #4]
 800490a:	681b      	ldr	r3, [r3, #0]
 800490c:	221c      	movs	r2, #28
 800490e:	601a      	str	r2, [r3, #0]

      /* Process unlocked */
      /* Unlock before starting ADC conversions: in case of potential         */
      /* interruption, to let the process to ADC IRQ Handler.                 */
      __HAL_UNLOCK(hadc);
 8004910:	687b      	ldr	r3, [r7, #4]
 8004912:	2200      	movs	r2, #0
 8004914:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

      /* Disable all interruptions before enabling the desired ones */
      __HAL_ADC_DISABLE_IT(hadc, (ADC_IT_EOC | ADC_IT_EOS | ADC_IT_OVR));
 8004918:	687b      	ldr	r3, [r7, #4]
 800491a:	681b      	ldr	r3, [r3, #0]
 800491c:	685a      	ldr	r2, [r3, #4]
 800491e:	687b      	ldr	r3, [r7, #4]
 8004920:	681b      	ldr	r3, [r3, #0]
 8004922:	f022 021c 	bic.w	r2, r2, #28
 8004926:	605a      	str	r2, [r3, #4]

      /* Enable ADC end of conversion interrupt */
      switch (hadc->Init.EOCSelection)
 8004928:	687b      	ldr	r3, [r7, #4]
 800492a:	691b      	ldr	r3, [r3, #16]
 800492c:	2b08      	cmp	r3, #8
 800492e:	d108      	bne.n	8004942 <HAL_ADC_Start_IT+0xfa>
      {
        case ADC_EOC_SEQ_CONV:
          __HAL_ADC_ENABLE_IT(hadc, ADC_IT_EOS);
 8004930:	687b      	ldr	r3, [r7, #4]
 8004932:	681b      	ldr	r3, [r3, #0]
 8004934:	685a      	ldr	r2, [r3, #4]
 8004936:	687b      	ldr	r3, [r7, #4]
 8004938:	681b      	ldr	r3, [r3, #0]
 800493a:	f042 0208 	orr.w	r2, r2, #8
 800493e:	605a      	str	r2, [r3, #4]
          break;
 8004940:	e008      	b.n	8004954 <HAL_ADC_Start_IT+0x10c>
        /* case ADC_EOC_SINGLE_CONV */
        default:
          __HAL_ADC_ENABLE_IT(hadc, ADC_IT_EOC);
 8004942:	687b      	ldr	r3, [r7, #4]
 8004944:	681b      	ldr	r3, [r3, #0]
 8004946:	685a      	ldr	r2, [r3, #4]
 8004948:	687b      	ldr	r3, [r7, #4]
 800494a:	681b      	ldr	r3, [r3, #0]
 800494c:	f042 0204 	orr.w	r2, r2, #4
 8004950:	605a      	str	r2, [r3, #4]
          break;
 8004952:	bf00      	nop

      /* Enable ADC overrun interrupt */
      /* If hadc->Init.Overrun is set to ADC_OVR_DATA_PRESERVED, only then is
         ADC_IT_OVR enabled; otherwise data overwrite is considered as normal
         behavior and no CPU time is lost for a non-processed interruption */
      if (hadc->Init.Overrun == ADC_OVR_DATA_PRESERVED)
 8004954:	687b      	ldr	r3, [r7, #4]
 8004956:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004958:	2b00      	cmp	r3, #0
 800495a:	d107      	bne.n	800496c <HAL_ADC_Start_IT+0x124>
      {
        __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 800495c:	687b      	ldr	r3, [r7, #4]
 800495e:	681b      	ldr	r3, [r3, #0]
 8004960:	685a      	ldr	r2, [r3, #4]
 8004962:	687b      	ldr	r3, [r7, #4]
 8004964:	681b      	ldr	r3, [r3, #0]
 8004966:	f042 0210 	orr.w	r2, r2, #16
 800496a:	605a      	str	r2, [r3, #4]
      /* trigger event.                                                       */
      /* Case of multimode enabled (when multimode feature is available):     */
      /*  - if ADC is slave and dual regular conversions are enabled, ADC is  */
      /*    enabled only (conversion is not started),                         */
      /*  - if ADC is master, ADC is enabled and conversion is started.       */
      if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 800496c:	687b      	ldr	r3, [r7, #4]
 800496e:	681b      	ldr	r3, [r3, #0]
 8004970:	4a4c      	ldr	r2, [pc, #304]	; (8004aa4 <HAL_ADC_Start_IT+0x25c>)
 8004972:	4293      	cmp	r3, r2
 8004974:	d002      	beq.n	800497c <HAL_ADC_Start_IT+0x134>
 8004976:	687b      	ldr	r3, [r7, #4]
 8004978:	681b      	ldr	r3, [r3, #0]
 800497a:	e000      	b.n	800497e <HAL_ADC_Start_IT+0x136>
 800497c:	4b48      	ldr	r3, [pc, #288]	; (8004aa0 <HAL_ADC_Start_IT+0x258>)
 800497e:	687a      	ldr	r2, [r7, #4]
 8004980:	6812      	ldr	r2, [r2, #0]
 8004982:	4293      	cmp	r3, r2
 8004984:	d008      	beq.n	8004998 <HAL_ADC_Start_IT+0x150>
          || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8004986:	693b      	ldr	r3, [r7, #16]
 8004988:	2b00      	cmp	r3, #0
 800498a:	d005      	beq.n	8004998 <HAL_ADC_Start_IT+0x150>
          || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 800498c:	693b      	ldr	r3, [r7, #16]
 800498e:	2b05      	cmp	r3, #5
 8004990:	d002      	beq.n	8004998 <HAL_ADC_Start_IT+0x150>
          || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 8004992:	693b      	ldr	r3, [r7, #16]
 8004994:	2b09      	cmp	r3, #9
 8004996:	d13a      	bne.n	8004a0e <HAL_ADC_Start_IT+0x1c6>
         )
      {
        /* ADC instance is not a multimode slave instance with multimode regular conversions enabled */
        if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_JAUTO) != 0UL)
 8004998:	687b      	ldr	r3, [r7, #4]
 800499a:	681b      	ldr	r3, [r3, #0]
 800499c:	68db      	ldr	r3, [r3, #12]
 800499e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80049a2:	2b00      	cmp	r3, #0
 80049a4:	d02d      	beq.n	8004a02 <HAL_ADC_Start_IT+0x1ba>
        {
          ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 80049a6:	687b      	ldr	r3, [r7, #4]
 80049a8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80049aa:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 80049ae:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 80049b2:	687b      	ldr	r3, [r7, #4]
 80049b4:	655a      	str	r2, [r3, #84]	; 0x54

          /* Enable as well injected interruptions in case
           HAL_ADCEx_InjectedStart_IT() has not been called beforehand. This
           allows to start regular and injected conversions when JAUTO is
           set with a single call to HAL_ADC_Start_IT() */
          switch (hadc->Init.EOCSelection)
 80049b6:	687b      	ldr	r3, [r7, #4]
 80049b8:	691b      	ldr	r3, [r3, #16]
 80049ba:	2b08      	cmp	r3, #8
 80049bc:	d110      	bne.n	80049e0 <HAL_ADC_Start_IT+0x198>
          {
            case ADC_EOC_SEQ_CONV:
              __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOC);
 80049be:	687b      	ldr	r3, [r7, #4]
 80049c0:	681b      	ldr	r3, [r3, #0]
 80049c2:	685a      	ldr	r2, [r3, #4]
 80049c4:	687b      	ldr	r3, [r7, #4]
 80049c6:	681b      	ldr	r3, [r3, #0]
 80049c8:	f022 0220 	bic.w	r2, r2, #32
 80049cc:	605a      	str	r2, [r3, #4]
              __HAL_ADC_ENABLE_IT(hadc, ADC_IT_JEOS);
 80049ce:	687b      	ldr	r3, [r7, #4]
 80049d0:	681b      	ldr	r3, [r3, #0]
 80049d2:	685a      	ldr	r2, [r3, #4]
 80049d4:	687b      	ldr	r3, [r7, #4]
 80049d6:	681b      	ldr	r3, [r3, #0]
 80049d8:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80049dc:	605a      	str	r2, [r3, #4]
              break;
 80049de:	e010      	b.n	8004a02 <HAL_ADC_Start_IT+0x1ba>
            /* case ADC_EOC_SINGLE_CONV */
            default:
              __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOS);
 80049e0:	687b      	ldr	r3, [r7, #4]
 80049e2:	681b      	ldr	r3, [r3, #0]
 80049e4:	685a      	ldr	r2, [r3, #4]
 80049e6:	687b      	ldr	r3, [r7, #4]
 80049e8:	681b      	ldr	r3, [r3, #0]
 80049ea:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80049ee:	605a      	str	r2, [r3, #4]
              __HAL_ADC_ENABLE_IT(hadc, ADC_IT_JEOC);
 80049f0:	687b      	ldr	r3, [r7, #4]
 80049f2:	681b      	ldr	r3, [r3, #0]
 80049f4:	685a      	ldr	r2, [r3, #4]
 80049f6:	687b      	ldr	r3, [r7, #4]
 80049f8:	681b      	ldr	r3, [r3, #0]
 80049fa:	f042 0220 	orr.w	r2, r2, #32
 80049fe:	605a      	str	r2, [r3, #4]
              break;
 8004a00:	bf00      	nop
          }
        }

        /* Start ADC group regular conversion */
        LL_ADC_REG_StartConversion(hadc->Instance);
 8004a02:	687b      	ldr	r3, [r7, #4]
 8004a04:	681b      	ldr	r3, [r3, #0]
 8004a06:	4618      	mov	r0, r3
 8004a08:	f7ff fd42 	bl	8004490 <LL_ADC_REG_StartConversion>
 8004a0c:	e054      	b.n	8004ab8 <HAL_ADC_Start_IT+0x270>
      }
      else
      {
        /* ADC instance is a multimode slave instance with multimode regular conversions enabled */
        SET_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8004a0e:	687b      	ldr	r3, [r7, #4]
 8004a10:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004a12:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8004a16:	687b      	ldr	r3, [r7, #4]
 8004a18:	655a      	str	r2, [r3, #84]	; 0x54
        /* if Master ADC JAUTO bit is set, Slave injected interruptions
           are enabled nevertheless (for same reason as above) */
        tmpADC_Master = __LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance);
 8004a1a:	687b      	ldr	r3, [r7, #4]
 8004a1c:	681b      	ldr	r3, [r3, #0]
 8004a1e:	4a21      	ldr	r2, [pc, #132]	; (8004aa4 <HAL_ADC_Start_IT+0x25c>)
 8004a20:	4293      	cmp	r3, r2
 8004a22:	d002      	beq.n	8004a2a <HAL_ADC_Start_IT+0x1e2>
 8004a24:	687b      	ldr	r3, [r7, #4]
 8004a26:	681b      	ldr	r3, [r3, #0]
 8004a28:	e000      	b.n	8004a2c <HAL_ADC_Start_IT+0x1e4>
 8004a2a:	4b1d      	ldr	r3, [pc, #116]	; (8004aa0 <HAL_ADC_Start_IT+0x258>)
 8004a2c:	60fb      	str	r3, [r7, #12]
        if (READ_BIT(tmpADC_Master->CFGR, ADC_CFGR_JAUTO) != 0UL)
 8004a2e:	68fb      	ldr	r3, [r7, #12]
 8004a30:	68db      	ldr	r3, [r3, #12]
 8004a32:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004a36:	2b00      	cmp	r3, #0
 8004a38:	d03e      	beq.n	8004ab8 <HAL_ADC_Start_IT+0x270>
        {
          /* First, update Slave State in setting HAL_ADC_STATE_INJ_BUSY bit
             and in resetting HAL_ADC_STATE_INJ_EOC bit */
          ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 8004a3a:	687b      	ldr	r3, [r7, #4]
 8004a3c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004a3e:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8004a42:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8004a46:	687b      	ldr	r3, [r7, #4]
 8004a48:	655a      	str	r2, [r3, #84]	; 0x54
          /* Next, set Slave injected interruptions */
          switch (hadc->Init.EOCSelection)
 8004a4a:	687b      	ldr	r3, [r7, #4]
 8004a4c:	691b      	ldr	r3, [r3, #16]
 8004a4e:	2b08      	cmp	r3, #8
 8004a50:	d110      	bne.n	8004a74 <HAL_ADC_Start_IT+0x22c>
          {
            case ADC_EOC_SEQ_CONV:
              __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOC);
 8004a52:	687b      	ldr	r3, [r7, #4]
 8004a54:	681b      	ldr	r3, [r3, #0]
 8004a56:	685a      	ldr	r2, [r3, #4]
 8004a58:	687b      	ldr	r3, [r7, #4]
 8004a5a:	681b      	ldr	r3, [r3, #0]
 8004a5c:	f022 0220 	bic.w	r2, r2, #32
 8004a60:	605a      	str	r2, [r3, #4]
              __HAL_ADC_ENABLE_IT(hadc, ADC_IT_JEOS);
 8004a62:	687b      	ldr	r3, [r7, #4]
 8004a64:	681b      	ldr	r3, [r3, #0]
 8004a66:	685a      	ldr	r2, [r3, #4]
 8004a68:	687b      	ldr	r3, [r7, #4]
 8004a6a:	681b      	ldr	r3, [r3, #0]
 8004a6c:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8004a70:	605a      	str	r2, [r3, #4]
              break;
 8004a72:	e021      	b.n	8004ab8 <HAL_ADC_Start_IT+0x270>
            /* case ADC_EOC_SINGLE_CONV */
            default:
              __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOS);
 8004a74:	687b      	ldr	r3, [r7, #4]
 8004a76:	681b      	ldr	r3, [r3, #0]
 8004a78:	685a      	ldr	r2, [r3, #4]
 8004a7a:	687b      	ldr	r3, [r7, #4]
 8004a7c:	681b      	ldr	r3, [r3, #0]
 8004a7e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004a82:	605a      	str	r2, [r3, #4]
              __HAL_ADC_ENABLE_IT(hadc, ADC_IT_JEOC);
 8004a84:	687b      	ldr	r3, [r7, #4]
 8004a86:	681b      	ldr	r3, [r3, #0]
 8004a88:	685a      	ldr	r2, [r3, #4]
 8004a8a:	687b      	ldr	r3, [r7, #4]
 8004a8c:	681b      	ldr	r3, [r3, #0]
 8004a8e:	f042 0220 	orr.w	r2, r2, #32
 8004a92:	605a      	str	r2, [r3, #4]
              break;
 8004a94:	e010      	b.n	8004ab8 <HAL_ADC_Start_IT+0x270>
      }
    }
    else
    {
      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 8004a96:	687b      	ldr	r3, [r7, #4]
 8004a98:	2200      	movs	r2, #0
 8004a9a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
 8004a9e:	e00b      	b.n	8004ab8 <HAL_ADC_Start_IT+0x270>
 8004aa0:	40022000 	.word	0x40022000
 8004aa4:	40022100 	.word	0x40022100
 8004aa8:	40022300 	.word	0x40022300
 8004aac:	58026300 	.word	0x58026300
 8004ab0:	fffff0fe 	.word	0xfffff0fe
    }

  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 8004ab4:	2302      	movs	r3, #2
 8004ab6:	75fb      	strb	r3, [r7, #23]
  }

  /* Return function status */
  return tmp_hal_status;
 8004ab8:	7dfb      	ldrb	r3, [r7, #23]
}
 8004aba:	4618      	mov	r0, r3
 8004abc:	3718      	adds	r7, #24
 8004abe:	46bd      	mov	sp, r7
 8004ac0:	bd80      	pop	{r7, pc}
 8004ac2:	bf00      	nop

08004ac4 <HAL_ADC_GetValue>:
  *         or @ref __HAL_ADC_CLEAR_FLAG(&hadc, ADC_FLAG_EOS).
  * @param hadc ADC handle
  * @retval ADC group regular conversion data
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef *hadc)
{
 8004ac4:	b480      	push	{r7}
 8004ac6:	b083      	sub	sp, #12
 8004ac8:	af00      	add	r7, sp, #0
 8004aca:	6078      	str	r0, [r7, #4]

  /* Note: EOC flag is not cleared here by software because automatically     */
  /*       cleared by hardware when reading register DR.                      */

  /* Return ADC converted value */
  return hadc->Instance->DR;
 8004acc:	687b      	ldr	r3, [r7, #4]
 8004ace:	681b      	ldr	r3, [r3, #0]
 8004ad0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
}
 8004ad2:	4618      	mov	r0, r3
 8004ad4:	370c      	adds	r7, #12
 8004ad6:	46bd      	mov	sp, r7
 8004ad8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004adc:	4770      	bx	lr
	...

08004ae0 <HAL_ADC_IRQHandler>:
  * @brief  Handle ADC interrupt request.
  * @param hadc ADC handle
  * @retval None
  */
void HAL_ADC_IRQHandler(ADC_HandleTypeDef *hadc)
{
 8004ae0:	b580      	push	{r7, lr}
 8004ae2:	b08a      	sub	sp, #40	; 0x28
 8004ae4:	af00      	add	r7, sp, #0
 8004ae6:	6078      	str	r0, [r7, #4]
  uint32_t overrun_error = 0UL; /* flag set if overrun occurrence has to be considered as an error */
 8004ae8:	2300      	movs	r3, #0
 8004aea:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t tmp_isr = hadc->Instance->ISR;
 8004aec:	687b      	ldr	r3, [r7, #4]
 8004aee:	681b      	ldr	r3, [r3, #0]
 8004af0:	681b      	ldr	r3, [r3, #0]
 8004af2:	61fb      	str	r3, [r7, #28]
  uint32_t tmp_ier = hadc->Instance->IER;
 8004af4:	687b      	ldr	r3, [r7, #4]
 8004af6:	681b      	ldr	r3, [r3, #0]
 8004af8:	685b      	ldr	r3, [r3, #4]
 8004afa:	61bb      	str	r3, [r7, #24]
  uint32_t tmp_adc_inj_is_trigger_source_sw_start;
  uint32_t tmp_adc_reg_is_trigger_source_sw_start;
  uint32_t tmp_cfgr;
  const ADC_TypeDef *tmpADC_Master;
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8004afc:	687b      	ldr	r3, [r7, #4]
 8004afe:	681b      	ldr	r3, [r3, #0]
 8004b00:	4a87      	ldr	r2, [pc, #540]	; (8004d20 <HAL_ADC_IRQHandler+0x240>)
 8004b02:	4293      	cmp	r3, r2
 8004b04:	d004      	beq.n	8004b10 <HAL_ADC_IRQHandler+0x30>
 8004b06:	687b      	ldr	r3, [r7, #4]
 8004b08:	681b      	ldr	r3, [r3, #0]
 8004b0a:	4a86      	ldr	r2, [pc, #536]	; (8004d24 <HAL_ADC_IRQHandler+0x244>)
 8004b0c:	4293      	cmp	r3, r2
 8004b0e:	d101      	bne.n	8004b14 <HAL_ADC_IRQHandler+0x34>
 8004b10:	4b85      	ldr	r3, [pc, #532]	; (8004d28 <HAL_ADC_IRQHandler+0x248>)
 8004b12:	e000      	b.n	8004b16 <HAL_ADC_IRQHandler+0x36>
 8004b14:	4b85      	ldr	r3, [pc, #532]	; (8004d2c <HAL_ADC_IRQHandler+0x24c>)
 8004b16:	4618      	mov	r0, r3
 8004b18:	f7ff fc02 	bl	8004320 <LL_ADC_GetMultimode>
 8004b1c:	6178      	str	r0, [r7, #20]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));

  /* ========== Check End of Sampling flag for ADC group regular ========== */
  if (((tmp_isr & ADC_FLAG_EOSMP) == ADC_FLAG_EOSMP) && ((tmp_ier & ADC_IT_EOSMP) == ADC_IT_EOSMP))
 8004b1e:	69fb      	ldr	r3, [r7, #28]
 8004b20:	f003 0302 	and.w	r3, r3, #2
 8004b24:	2b00      	cmp	r3, #0
 8004b26:	d017      	beq.n	8004b58 <HAL_ADC_IRQHandler+0x78>
 8004b28:	69bb      	ldr	r3, [r7, #24]
 8004b2a:	f003 0302 	and.w	r3, r3, #2
 8004b2e:	2b00      	cmp	r3, #0
 8004b30:	d012      	beq.n	8004b58 <HAL_ADC_IRQHandler+0x78>
  {
    /* Update state machine on end of sampling status if not in error state */
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8004b32:	687b      	ldr	r3, [r7, #4]
 8004b34:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004b36:	f003 0310 	and.w	r3, r3, #16
 8004b3a:	2b00      	cmp	r3, #0
 8004b3c:	d105      	bne.n	8004b4a <HAL_ADC_IRQHandler+0x6a>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOSMP);
 8004b3e:	687b      	ldr	r3, [r7, #4]
 8004b40:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004b42:	f443 6200 	orr.w	r2, r3, #2048	; 0x800
 8004b46:	687b      	ldr	r3, [r7, #4]
 8004b48:	655a      	str	r2, [r3, #84]	; 0x54

    /* End Of Sampling callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->EndOfSamplingCallback(hadc);
#else
    HAL_ADCEx_EndOfSamplingCallback(hadc);
 8004b4a:	6878      	ldr	r0, [r7, #4]
 8004b4c:	f001 f81a 	bl	8005b84 <HAL_ADCEx_EndOfSamplingCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear regular group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOSMP);
 8004b50:	687b      	ldr	r3, [r7, #4]
 8004b52:	681b      	ldr	r3, [r3, #0]
 8004b54:	2202      	movs	r2, #2
 8004b56:	601a      	str	r2, [r3, #0]
  }

  /* ====== Check ADC group regular end of unitary conversion sequence conversions ===== */
  if ((((tmp_isr & ADC_FLAG_EOC) == ADC_FLAG_EOC) && ((tmp_ier & ADC_IT_EOC) == ADC_IT_EOC)) ||
 8004b58:	69fb      	ldr	r3, [r7, #28]
 8004b5a:	f003 0304 	and.w	r3, r3, #4
 8004b5e:	2b00      	cmp	r3, #0
 8004b60:	d004      	beq.n	8004b6c <HAL_ADC_IRQHandler+0x8c>
 8004b62:	69bb      	ldr	r3, [r7, #24]
 8004b64:	f003 0304 	and.w	r3, r3, #4
 8004b68:	2b00      	cmp	r3, #0
 8004b6a:	d10a      	bne.n	8004b82 <HAL_ADC_IRQHandler+0xa2>
      (((tmp_isr & ADC_FLAG_EOS) == ADC_FLAG_EOS) && ((tmp_ier & ADC_IT_EOS) == ADC_IT_EOS)))
 8004b6c:	69fb      	ldr	r3, [r7, #28]
 8004b6e:	f003 0308 	and.w	r3, r3, #8
  if ((((tmp_isr & ADC_FLAG_EOC) == ADC_FLAG_EOC) && ((tmp_ier & ADC_IT_EOC) == ADC_IT_EOC)) ||
 8004b72:	2b00      	cmp	r3, #0
 8004b74:	f000 8083 	beq.w	8004c7e <HAL_ADC_IRQHandler+0x19e>
      (((tmp_isr & ADC_FLAG_EOS) == ADC_FLAG_EOS) && ((tmp_ier & ADC_IT_EOS) == ADC_IT_EOS)))
 8004b78:	69bb      	ldr	r3, [r7, #24]
 8004b7a:	f003 0308 	and.w	r3, r3, #8
 8004b7e:	2b00      	cmp	r3, #0
 8004b80:	d07d      	beq.n	8004c7e <HAL_ADC_IRQHandler+0x19e>
  {
    /* Update state machine on conversion status if not in error state */
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8004b82:	687b      	ldr	r3, [r7, #4]
 8004b84:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004b86:	f003 0310 	and.w	r3, r3, #16
 8004b8a:	2b00      	cmp	r3, #0
 8004b8c:	d105      	bne.n	8004b9a <HAL_ADC_IRQHandler+0xba>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8004b8e:	687b      	ldr	r3, [r7, #4]
 8004b90:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004b92:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8004b96:	687b      	ldr	r3, [r7, #4]
 8004b98:	655a      	str	r2, [r3, #84]	; 0x54
    }

    /* Determine whether any further conversion upcoming on group regular     */
    /* by external trigger, continuous mode or scan sequence on going         */
    /* to disable interruption.                                               */
    if (LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 8004b9a:	687b      	ldr	r3, [r7, #4]
 8004b9c:	681b      	ldr	r3, [r3, #0]
 8004b9e:	4618      	mov	r0, r3
 8004ba0:	f7ff fb1c 	bl	80041dc <LL_ADC_REG_IsTriggerSourceSWStart>
 8004ba4:	4603      	mov	r3, r0
 8004ba6:	2b00      	cmp	r3, #0
 8004ba8:	d062      	beq.n	8004c70 <HAL_ADC_IRQHandler+0x190>
    {
      /* Get relevant register CFGR in ADC instance of ADC master or slave    */
      /* in function of multimode state (for devices with multimode           */
      /* available).                                                          */
      if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8004baa:	687b      	ldr	r3, [r7, #4]
 8004bac:	681b      	ldr	r3, [r3, #0]
 8004bae:	4a5d      	ldr	r2, [pc, #372]	; (8004d24 <HAL_ADC_IRQHandler+0x244>)
 8004bb0:	4293      	cmp	r3, r2
 8004bb2:	d002      	beq.n	8004bba <HAL_ADC_IRQHandler+0xda>
 8004bb4:	687b      	ldr	r3, [r7, #4]
 8004bb6:	681b      	ldr	r3, [r3, #0]
 8004bb8:	e000      	b.n	8004bbc <HAL_ADC_IRQHandler+0xdc>
 8004bba:	4b59      	ldr	r3, [pc, #356]	; (8004d20 <HAL_ADC_IRQHandler+0x240>)
 8004bbc:	687a      	ldr	r2, [r7, #4]
 8004bbe:	6812      	ldr	r2, [r2, #0]
 8004bc0:	4293      	cmp	r3, r2
 8004bc2:	d008      	beq.n	8004bd6 <HAL_ADC_IRQHandler+0xf6>
          || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8004bc4:	697b      	ldr	r3, [r7, #20]
 8004bc6:	2b00      	cmp	r3, #0
 8004bc8:	d005      	beq.n	8004bd6 <HAL_ADC_IRQHandler+0xf6>
          || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 8004bca:	697b      	ldr	r3, [r7, #20]
 8004bcc:	2b05      	cmp	r3, #5
 8004bce:	d002      	beq.n	8004bd6 <HAL_ADC_IRQHandler+0xf6>
          || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 8004bd0:	697b      	ldr	r3, [r7, #20]
 8004bd2:	2b09      	cmp	r3, #9
 8004bd4:	d104      	bne.n	8004be0 <HAL_ADC_IRQHandler+0x100>
         )
      {
        /* check CONT bit directly in handle ADC CFGR register */
        tmp_cfgr = READ_REG(hadc->Instance->CFGR);
 8004bd6:	687b      	ldr	r3, [r7, #4]
 8004bd8:	681b      	ldr	r3, [r3, #0]
 8004bda:	68db      	ldr	r3, [r3, #12]
 8004bdc:	623b      	str	r3, [r7, #32]
 8004bde:	e00c      	b.n	8004bfa <HAL_ADC_IRQHandler+0x11a>
      }
      else
      {
        /* else need to check Master ADC CONT bit */
        tmpADC_Master = __LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance);
 8004be0:	687b      	ldr	r3, [r7, #4]
 8004be2:	681b      	ldr	r3, [r3, #0]
 8004be4:	4a4f      	ldr	r2, [pc, #316]	; (8004d24 <HAL_ADC_IRQHandler+0x244>)
 8004be6:	4293      	cmp	r3, r2
 8004be8:	d002      	beq.n	8004bf0 <HAL_ADC_IRQHandler+0x110>
 8004bea:	687b      	ldr	r3, [r7, #4]
 8004bec:	681b      	ldr	r3, [r3, #0]
 8004bee:	e000      	b.n	8004bf2 <HAL_ADC_IRQHandler+0x112>
 8004bf0:	4b4b      	ldr	r3, [pc, #300]	; (8004d20 <HAL_ADC_IRQHandler+0x240>)
 8004bf2:	613b      	str	r3, [r7, #16]
        tmp_cfgr = READ_REG(tmpADC_Master->CFGR);
 8004bf4:	693b      	ldr	r3, [r7, #16]
 8004bf6:	68db      	ldr	r3, [r3, #12]
 8004bf8:	623b      	str	r3, [r7, #32]
      }

      /* Carry on if continuous mode is disabled */
      if (READ_BIT(tmp_cfgr, ADC_CFGR_CONT) != ADC_CFGR_CONT)
 8004bfa:	6a3b      	ldr	r3, [r7, #32]
 8004bfc:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8004c00:	2b00      	cmp	r3, #0
 8004c02:	d135      	bne.n	8004c70 <HAL_ADC_IRQHandler+0x190>
      {
        /* If End of Sequence is reached, disable interrupts */
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS))
 8004c04:	687b      	ldr	r3, [r7, #4]
 8004c06:	681b      	ldr	r3, [r3, #0]
 8004c08:	681b      	ldr	r3, [r3, #0]
 8004c0a:	f003 0308 	and.w	r3, r3, #8
 8004c0e:	2b08      	cmp	r3, #8
 8004c10:	d12e      	bne.n	8004c70 <HAL_ADC_IRQHandler+0x190>
        {
          /* Allowed to modify bits ADC_IT_EOC/ADC_IT_EOS only if bit         */
          /* ADSTART==0 (no conversion on going)                              */
          if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8004c12:	687b      	ldr	r3, [r7, #4]
 8004c14:	681b      	ldr	r3, [r3, #0]
 8004c16:	4618      	mov	r0, r3
 8004c18:	f7ff fc4e 	bl	80044b8 <LL_ADC_REG_IsConversionOngoing>
 8004c1c:	4603      	mov	r3, r0
 8004c1e:	2b00      	cmp	r3, #0
 8004c20:	d11a      	bne.n	8004c58 <HAL_ADC_IRQHandler+0x178>
          {
            /* Disable ADC end of sequence conversion interrupt */
            /* Note: Overrun interrupt was enabled with EOC interrupt in      */
            /* HAL_Start_IT(), but is not disabled here because can be used   */
            /* by overrun IRQ process below.                                  */
            __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC | ADC_IT_EOS);
 8004c22:	687b      	ldr	r3, [r7, #4]
 8004c24:	681b      	ldr	r3, [r3, #0]
 8004c26:	685a      	ldr	r2, [r3, #4]
 8004c28:	687b      	ldr	r3, [r7, #4]
 8004c2a:	681b      	ldr	r3, [r3, #0]
 8004c2c:	f022 020c 	bic.w	r2, r2, #12
 8004c30:	605a      	str	r2, [r3, #4]

            /* Set ADC state */
            CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8004c32:	687b      	ldr	r3, [r7, #4]
 8004c34:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004c36:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8004c3a:	687b      	ldr	r3, [r7, #4]
 8004c3c:	655a      	str	r2, [r3, #84]	; 0x54

            if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 8004c3e:	687b      	ldr	r3, [r7, #4]
 8004c40:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004c42:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8004c46:	2b00      	cmp	r3, #0
 8004c48:	d112      	bne.n	8004c70 <HAL_ADC_IRQHandler+0x190>
            {
              SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8004c4a:	687b      	ldr	r3, [r7, #4]
 8004c4c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004c4e:	f043 0201 	orr.w	r2, r3, #1
 8004c52:	687b      	ldr	r3, [r7, #4]
 8004c54:	655a      	str	r2, [r3, #84]	; 0x54
 8004c56:	e00b      	b.n	8004c70 <HAL_ADC_IRQHandler+0x190>
            }
          }
          else
          {
            /* Change ADC state to error state */
            SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8004c58:	687b      	ldr	r3, [r7, #4]
 8004c5a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004c5c:	f043 0210 	orr.w	r2, r3, #16
 8004c60:	687b      	ldr	r3, [r7, #4]
 8004c62:	655a      	str	r2, [r3, #84]	; 0x54

            /* Set ADC error code to ADC peripheral internal error */
            SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8004c64:	687b      	ldr	r3, [r7, #4]
 8004c66:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004c68:	f043 0201 	orr.w	r2, r3, #1
 8004c6c:	687b      	ldr	r3, [r7, #4]
 8004c6e:	659a      	str	r2, [r3, #88]	; 0x58
    /*       possibility to use:                                              */
    /*        " if( __HAL_ADC_GET_FLAG(&hadc, ADC_FLAG_EOS)) "                */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8004c70:	6878      	ldr	r0, [r7, #4]
 8004c72:	f7fe fa53 	bl	800311c <HAL_ADC_ConvCpltCallback>
    /* Clear regular group conversion flag */
    /* Note: in case of overrun set to ADC_OVR_DATA_PRESERVED, end of         */
    /*       conversion flags clear induces the release of the preserved data.*/
    /*       Therefore, if the preserved data value is needed, it must be     */
    /*       read preliminarily into HAL_ADC_ConvCpltCallback().              */
    __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS));
 8004c76:	687b      	ldr	r3, [r7, #4]
 8004c78:	681b      	ldr	r3, [r3, #0]
 8004c7a:	220c      	movs	r2, #12
 8004c7c:	601a      	str	r2, [r3, #0]
  }

  /* ====== Check ADC group injected end of unitary conversion sequence conversions ===== */
  if ((((tmp_isr & ADC_FLAG_JEOC) == ADC_FLAG_JEOC) && ((tmp_ier & ADC_IT_JEOC) == ADC_IT_JEOC)) ||
 8004c7e:	69fb      	ldr	r3, [r7, #28]
 8004c80:	f003 0320 	and.w	r3, r3, #32
 8004c84:	2b00      	cmp	r3, #0
 8004c86:	d004      	beq.n	8004c92 <HAL_ADC_IRQHandler+0x1b2>
 8004c88:	69bb      	ldr	r3, [r7, #24]
 8004c8a:	f003 0320 	and.w	r3, r3, #32
 8004c8e:	2b00      	cmp	r3, #0
 8004c90:	d10b      	bne.n	8004caa <HAL_ADC_IRQHandler+0x1ca>
      (((tmp_isr & ADC_FLAG_JEOS) == ADC_FLAG_JEOS) && ((tmp_ier & ADC_IT_JEOS) == ADC_IT_JEOS)))
 8004c92:	69fb      	ldr	r3, [r7, #28]
 8004c94:	f003 0340 	and.w	r3, r3, #64	; 0x40
  if ((((tmp_isr & ADC_FLAG_JEOC) == ADC_FLAG_JEOC) && ((tmp_ier & ADC_IT_JEOC) == ADC_IT_JEOC)) ||
 8004c98:	2b00      	cmp	r3, #0
 8004c9a:	f000 80a0 	beq.w	8004dde <HAL_ADC_IRQHandler+0x2fe>
      (((tmp_isr & ADC_FLAG_JEOS) == ADC_FLAG_JEOS) && ((tmp_ier & ADC_IT_JEOS) == ADC_IT_JEOS)))
 8004c9e:	69bb      	ldr	r3, [r7, #24]
 8004ca0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004ca4:	2b00      	cmp	r3, #0
 8004ca6:	f000 809a 	beq.w	8004dde <HAL_ADC_IRQHandler+0x2fe>
  {
    /* Update state machine on conversion status if not in error state */
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8004caa:	687b      	ldr	r3, [r7, #4]
 8004cac:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004cae:	f003 0310 	and.w	r3, r3, #16
 8004cb2:	2b00      	cmp	r3, #0
 8004cb4:	d105      	bne.n	8004cc2 <HAL_ADC_IRQHandler+0x1e2>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_INJ_EOC);
 8004cb6:	687b      	ldr	r3, [r7, #4]
 8004cb8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004cba:	f443 5200 	orr.w	r2, r3, #8192	; 0x2000
 8004cbe:	687b      	ldr	r3, [r7, #4]
 8004cc0:	655a      	str	r2, [r3, #84]	; 0x54
    }

    /* Retrieve ADC configuration */
    tmp_adc_inj_is_trigger_source_sw_start = LL_ADC_INJ_IsTriggerSourceSWStart(hadc->Instance);
 8004cc2:	687b      	ldr	r3, [r7, #4]
 8004cc4:	681b      	ldr	r3, [r3, #0]
 8004cc6:	4618      	mov	r0, r3
 8004cc8:	f7ff fac7 	bl	800425a <LL_ADC_INJ_IsTriggerSourceSWStart>
 8004ccc:	60f8      	str	r0, [r7, #12]
    tmp_adc_reg_is_trigger_source_sw_start = LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance);
 8004cce:	687b      	ldr	r3, [r7, #4]
 8004cd0:	681b      	ldr	r3, [r3, #0]
 8004cd2:	4618      	mov	r0, r3
 8004cd4:	f7ff fa82 	bl	80041dc <LL_ADC_REG_IsTriggerSourceSWStart>
 8004cd8:	60b8      	str	r0, [r7, #8]
    /* Get relevant register CFGR in ADC instance of ADC master or slave  */
    /* in function of multimode state (for devices with multimode         */
    /* available).                                                        */
    if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8004cda:	687b      	ldr	r3, [r7, #4]
 8004cdc:	681b      	ldr	r3, [r3, #0]
 8004cde:	4a11      	ldr	r2, [pc, #68]	; (8004d24 <HAL_ADC_IRQHandler+0x244>)
 8004ce0:	4293      	cmp	r3, r2
 8004ce2:	d002      	beq.n	8004cea <HAL_ADC_IRQHandler+0x20a>
 8004ce4:	687b      	ldr	r3, [r7, #4]
 8004ce6:	681b      	ldr	r3, [r3, #0]
 8004ce8:	e000      	b.n	8004cec <HAL_ADC_IRQHandler+0x20c>
 8004cea:	4b0d      	ldr	r3, [pc, #52]	; (8004d20 <HAL_ADC_IRQHandler+0x240>)
 8004cec:	687a      	ldr	r2, [r7, #4]
 8004cee:	6812      	ldr	r2, [r2, #0]
 8004cf0:	4293      	cmp	r3, r2
 8004cf2:	d008      	beq.n	8004d06 <HAL_ADC_IRQHandler+0x226>
        || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8004cf4:	697b      	ldr	r3, [r7, #20]
 8004cf6:	2b00      	cmp	r3, #0
 8004cf8:	d005      	beq.n	8004d06 <HAL_ADC_IRQHandler+0x226>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_REG_SIMULT)
 8004cfa:	697b      	ldr	r3, [r7, #20]
 8004cfc:	2b06      	cmp	r3, #6
 8004cfe:	d002      	beq.n	8004d06 <HAL_ADC_IRQHandler+0x226>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_REG_INTERL)
 8004d00:	697b      	ldr	r3, [r7, #20]
 8004d02:	2b07      	cmp	r3, #7
 8004d04:	d104      	bne.n	8004d10 <HAL_ADC_IRQHandler+0x230>
       )
    {
      tmp_cfgr = READ_REG(hadc->Instance->CFGR);
 8004d06:	687b      	ldr	r3, [r7, #4]
 8004d08:	681b      	ldr	r3, [r3, #0]
 8004d0a:	68db      	ldr	r3, [r3, #12]
 8004d0c:	623b      	str	r3, [r7, #32]
 8004d0e:	e014      	b.n	8004d3a <HAL_ADC_IRQHandler+0x25a>
    }
    else
    {
      tmpADC_Master = __LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance);
 8004d10:	687b      	ldr	r3, [r7, #4]
 8004d12:	681b      	ldr	r3, [r3, #0]
 8004d14:	4a03      	ldr	r2, [pc, #12]	; (8004d24 <HAL_ADC_IRQHandler+0x244>)
 8004d16:	4293      	cmp	r3, r2
 8004d18:	d00a      	beq.n	8004d30 <HAL_ADC_IRQHandler+0x250>
 8004d1a:	687b      	ldr	r3, [r7, #4]
 8004d1c:	681b      	ldr	r3, [r3, #0]
 8004d1e:	e008      	b.n	8004d32 <HAL_ADC_IRQHandler+0x252>
 8004d20:	40022000 	.word	0x40022000
 8004d24:	40022100 	.word	0x40022100
 8004d28:	40022300 	.word	0x40022300
 8004d2c:	58026300 	.word	0x58026300
 8004d30:	4b84      	ldr	r3, [pc, #528]	; (8004f44 <HAL_ADC_IRQHandler+0x464>)
 8004d32:	613b      	str	r3, [r7, #16]
      tmp_cfgr = READ_REG(tmpADC_Master->CFGR);
 8004d34:	693b      	ldr	r3, [r7, #16]
 8004d36:	68db      	ldr	r3, [r3, #12]
 8004d38:	623b      	str	r3, [r7, #32]
    /* Disable interruption if no further conversion upcoming by injected     */
    /* external trigger or by automatic injected conversion with regular      */
    /* group having no further conversion upcoming (same conditions as        */
    /* regular group interruption disabling above),                           */
    /* and if injected scan sequence is completed.                            */
    if (tmp_adc_inj_is_trigger_source_sw_start != 0UL)
 8004d3a:	68fb      	ldr	r3, [r7, #12]
 8004d3c:	2b00      	cmp	r3, #0
 8004d3e:	d047      	beq.n	8004dd0 <HAL_ADC_IRQHandler+0x2f0>
    {
      if ((READ_BIT(tmp_cfgr, ADC_CFGR_JAUTO) == 0UL) ||
 8004d40:	6a3b      	ldr	r3, [r7, #32]
 8004d42:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004d46:	2b00      	cmp	r3, #0
 8004d48:	d007      	beq.n	8004d5a <HAL_ADC_IRQHandler+0x27a>
 8004d4a:	68bb      	ldr	r3, [r7, #8]
 8004d4c:	2b00      	cmp	r3, #0
 8004d4e:	d03f      	beq.n	8004dd0 <HAL_ADC_IRQHandler+0x2f0>
          ((tmp_adc_reg_is_trigger_source_sw_start != 0UL) &&
           (READ_BIT(tmp_cfgr, ADC_CFGR_CONT) == 0UL)))
 8004d50:	6a3b      	ldr	r3, [r7, #32]
 8004d52:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
          ((tmp_adc_reg_is_trigger_source_sw_start != 0UL) &&
 8004d56:	2b00      	cmp	r3, #0
 8004d58:	d13a      	bne.n	8004dd0 <HAL_ADC_IRQHandler+0x2f0>
      {
        /* If End of Sequence is reached, disable interrupts */
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOS))
 8004d5a:	687b      	ldr	r3, [r7, #4]
 8004d5c:	681b      	ldr	r3, [r3, #0]
 8004d5e:	681b      	ldr	r3, [r3, #0]
 8004d60:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004d64:	2b40      	cmp	r3, #64	; 0x40
 8004d66:	d133      	bne.n	8004dd0 <HAL_ADC_IRQHandler+0x2f0>
          /* when the last context has been fully processed, JSQR is reset      */
          /* by the hardware. Even if no injected conversion is planned to come */
          /* (queue empty, triggers are ignored), it can start again            */
          /* immediately after setting a new context (JADSTART is still set).   */
          /* Therefore, state of HAL ADC injected group is kept to busy.        */
          if (READ_BIT(tmp_cfgr, ADC_CFGR_JQM) == 0UL)
 8004d68:	6a3b      	ldr	r3, [r7, #32]
 8004d6a:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8004d6e:	2b00      	cmp	r3, #0
 8004d70:	d12e      	bne.n	8004dd0 <HAL_ADC_IRQHandler+0x2f0>
          {
            /* Allowed to modify bits ADC_IT_JEOC/ADC_IT_JEOS only if bit       */
            /* JADSTART==0 (no conversion on going)                             */
            if (LL_ADC_INJ_IsConversionOngoing(hadc->Instance) == 0UL)
 8004d72:	687b      	ldr	r3, [r7, #4]
 8004d74:	681b      	ldr	r3, [r3, #0]
 8004d76:	4618      	mov	r0, r3
 8004d78:	f7ff fbb1 	bl	80044de <LL_ADC_INJ_IsConversionOngoing>
 8004d7c:	4603      	mov	r3, r0
 8004d7e:	2b00      	cmp	r3, #0
 8004d80:	d11a      	bne.n	8004db8 <HAL_ADC_IRQHandler+0x2d8>
            {
              /* Disable ADC end of sequence conversion interrupt  */
              __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOC | ADC_IT_JEOS);
 8004d82:	687b      	ldr	r3, [r7, #4]
 8004d84:	681b      	ldr	r3, [r3, #0]
 8004d86:	685a      	ldr	r2, [r3, #4]
 8004d88:	687b      	ldr	r3, [r7, #4]
 8004d8a:	681b      	ldr	r3, [r3, #0]
 8004d8c:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8004d90:	605a      	str	r2, [r3, #4]

              /* Set ADC state */
              CLEAR_BIT(hadc->State, HAL_ADC_STATE_INJ_BUSY);
 8004d92:	687b      	ldr	r3, [r7, #4]
 8004d94:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004d96:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8004d9a:	687b      	ldr	r3, [r7, #4]
 8004d9c:	655a      	str	r2, [r3, #84]	; 0x54

              if ((hadc->State & HAL_ADC_STATE_REG_BUSY) == 0UL)
 8004d9e:	687b      	ldr	r3, [r7, #4]
 8004da0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004da2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004da6:	2b00      	cmp	r3, #0
 8004da8:	d112      	bne.n	8004dd0 <HAL_ADC_IRQHandler+0x2f0>
              {
                SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8004daa:	687b      	ldr	r3, [r7, #4]
 8004dac:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004dae:	f043 0201 	orr.w	r2, r3, #1
 8004db2:	687b      	ldr	r3, [r7, #4]
 8004db4:	655a      	str	r2, [r3, #84]	; 0x54
 8004db6:	e00b      	b.n	8004dd0 <HAL_ADC_IRQHandler+0x2f0>
              }
            }
            else
            {
              /* Update ADC state machine to error */
              SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8004db8:	687b      	ldr	r3, [r7, #4]
 8004dba:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004dbc:	f043 0210 	orr.w	r2, r3, #16
 8004dc0:	687b      	ldr	r3, [r7, #4]
 8004dc2:	655a      	str	r2, [r3, #84]	; 0x54

              /* Set ADC error code to ADC peripheral internal error */
              SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8004dc4:	687b      	ldr	r3, [r7, #4]
 8004dc6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004dc8:	f043 0201 	orr.w	r2, r3, #1
 8004dcc:	687b      	ldr	r3, [r7, #4]
 8004dce:	659a      	str	r2, [r3, #88]	; 0x58
              interruption has been triggered by end of conversion or end of
              sequence.    */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->InjectedConvCpltCallback(hadc);
#else
    HAL_ADCEx_InjectedConvCpltCallback(hadc);
 8004dd0:	6878      	ldr	r0, [r7, #4]
 8004dd2:	f000 feaf 	bl	8005b34 <HAL_ADCEx_InjectedConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear injected group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_JEOC | ADC_FLAG_JEOS);
 8004dd6:	687b      	ldr	r3, [r7, #4]
 8004dd8:	681b      	ldr	r3, [r3, #0]
 8004dda:	2260      	movs	r2, #96	; 0x60
 8004ddc:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check Analog watchdog 1 flag ========== */
  if (((tmp_isr & ADC_FLAG_AWD1) == ADC_FLAG_AWD1) && ((tmp_ier & ADC_IT_AWD1) == ADC_IT_AWD1))
 8004dde:	69fb      	ldr	r3, [r7, #28]
 8004de0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004de4:	2b00      	cmp	r3, #0
 8004de6:	d011      	beq.n	8004e0c <HAL_ADC_IRQHandler+0x32c>
 8004de8:	69bb      	ldr	r3, [r7, #24]
 8004dea:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004dee:	2b00      	cmp	r3, #0
 8004df0:	d00c      	beq.n	8004e0c <HAL_ADC_IRQHandler+0x32c>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD1);
 8004df2:	687b      	ldr	r3, [r7, #4]
 8004df4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004df6:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8004dfa:	687b      	ldr	r3, [r7, #4]
 8004dfc:	655a      	str	r2, [r3, #84]	; 0x54

    /* Level out of window 1 callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->LevelOutOfWindowCallback(hadc);
#else
    HAL_ADC_LevelOutOfWindowCallback(hadc);
 8004dfe:	6878      	ldr	r0, [r7, #4]
 8004e00:	f000 f8a8 	bl	8004f54 <HAL_ADC_LevelOutOfWindowCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear ADC analog watchdog flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD1);
 8004e04:	687b      	ldr	r3, [r7, #4]
 8004e06:	681b      	ldr	r3, [r3, #0]
 8004e08:	2280      	movs	r2, #128	; 0x80
 8004e0a:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check analog watchdog 2 flag ========== */
  if (((tmp_isr & ADC_FLAG_AWD2) == ADC_FLAG_AWD2) && ((tmp_ier & ADC_IT_AWD2) == ADC_IT_AWD2))
 8004e0c:	69fb      	ldr	r3, [r7, #28]
 8004e0e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004e12:	2b00      	cmp	r3, #0
 8004e14:	d012      	beq.n	8004e3c <HAL_ADC_IRQHandler+0x35c>
 8004e16:	69bb      	ldr	r3, [r7, #24]
 8004e18:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004e1c:	2b00      	cmp	r3, #0
 8004e1e:	d00d      	beq.n	8004e3c <HAL_ADC_IRQHandler+0x35c>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD2);
 8004e20:	687b      	ldr	r3, [r7, #4]
 8004e22:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004e24:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 8004e28:	687b      	ldr	r3, [r7, #4]
 8004e2a:	655a      	str	r2, [r3, #84]	; 0x54

    /* Level out of window 2 callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->LevelOutOfWindow2Callback(hadc);
#else
    HAL_ADCEx_LevelOutOfWindow2Callback(hadc);
 8004e2c:	6878      	ldr	r0, [r7, #4]
 8004e2e:	f000 fe95 	bl	8005b5c <HAL_ADCEx_LevelOutOfWindow2Callback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear ADC analog watchdog flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD2);
 8004e32:	687b      	ldr	r3, [r7, #4]
 8004e34:	681b      	ldr	r3, [r3, #0]
 8004e36:	f44f 7280 	mov.w	r2, #256	; 0x100
 8004e3a:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check analog watchdog 3 flag ========== */
  if (((tmp_isr & ADC_FLAG_AWD3) == ADC_FLAG_AWD3) && ((tmp_ier & ADC_IT_AWD3) == ADC_IT_AWD3))
 8004e3c:	69fb      	ldr	r3, [r7, #28]
 8004e3e:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8004e42:	2b00      	cmp	r3, #0
 8004e44:	d012      	beq.n	8004e6c <HAL_ADC_IRQHandler+0x38c>
 8004e46:	69bb      	ldr	r3, [r7, #24]
 8004e48:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8004e4c:	2b00      	cmp	r3, #0
 8004e4e:	d00d      	beq.n	8004e6c <HAL_ADC_IRQHandler+0x38c>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD3);
 8004e50:	687b      	ldr	r3, [r7, #4]
 8004e52:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004e54:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 8004e58:	687b      	ldr	r3, [r7, #4]
 8004e5a:	655a      	str	r2, [r3, #84]	; 0x54

    /* Level out of window 3 callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->LevelOutOfWindow3Callback(hadc);
#else
    HAL_ADCEx_LevelOutOfWindow3Callback(hadc);
 8004e5c:	6878      	ldr	r0, [r7, #4]
 8004e5e:	f000 fe87 	bl	8005b70 <HAL_ADCEx_LevelOutOfWindow3Callback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear ADC analog watchdog flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD3);
 8004e62:	687b      	ldr	r3, [r7, #4]
 8004e64:	681b      	ldr	r3, [r3, #0]
 8004e66:	f44f 7200 	mov.w	r2, #512	; 0x200
 8004e6a:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check Overrun flag ========== */
  if (((tmp_isr & ADC_FLAG_OVR) == ADC_FLAG_OVR) && ((tmp_ier & ADC_IT_OVR) == ADC_IT_OVR))
 8004e6c:	69fb      	ldr	r3, [r7, #28]
 8004e6e:	f003 0310 	and.w	r3, r3, #16
 8004e72:	2b00      	cmp	r3, #0
 8004e74:	d043      	beq.n	8004efe <HAL_ADC_IRQHandler+0x41e>
 8004e76:	69bb      	ldr	r3, [r7, #24]
 8004e78:	f003 0310 	and.w	r3, r3, #16
 8004e7c:	2b00      	cmp	r3, #0
 8004e7e:	d03e      	beq.n	8004efe <HAL_ADC_IRQHandler+0x41e>
    /* overrun event is not considered as an error.                           */
    /* (cf ref manual "Managing conversions without using the DMA and without */
    /* overrun ")                                                             */
    /* Exception for usage with DMA overrun event always considered as an     */
    /* error.                                                                 */
    if (hadc->Init.Overrun == ADC_OVR_DATA_PRESERVED)
 8004e80:	687b      	ldr	r3, [r7, #4]
 8004e82:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004e84:	2b00      	cmp	r3, #0
 8004e86:	d102      	bne.n	8004e8e <HAL_ADC_IRQHandler+0x3ae>
    {
      overrun_error = 1UL;
 8004e88:	2301      	movs	r3, #1
 8004e8a:	627b      	str	r3, [r7, #36]	; 0x24
 8004e8c:	e021      	b.n	8004ed2 <HAL_ADC_IRQHandler+0x3f2>
    }
    else
    {
      /* Check DMA configuration */
      if (tmp_multimode_config != LL_ADC_MULTI_INDEPENDENT)
 8004e8e:	697b      	ldr	r3, [r7, #20]
 8004e90:	2b00      	cmp	r3, #0
 8004e92:	d015      	beq.n	8004ec0 <HAL_ADC_IRQHandler+0x3e0>
      {
        /* Multimode (when feature is available) is enabled,
           Common Control Register MDMA bits must be checked. */
        if (LL_ADC_GetMultiDMATransfer(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) != LL_ADC_MULTI_REG_DMA_EACH_ADC)
 8004e94:	687b      	ldr	r3, [r7, #4]
 8004e96:	681b      	ldr	r3, [r3, #0]
 8004e98:	4a2a      	ldr	r2, [pc, #168]	; (8004f44 <HAL_ADC_IRQHandler+0x464>)
 8004e9a:	4293      	cmp	r3, r2
 8004e9c:	d004      	beq.n	8004ea8 <HAL_ADC_IRQHandler+0x3c8>
 8004e9e:	687b      	ldr	r3, [r7, #4]
 8004ea0:	681b      	ldr	r3, [r3, #0]
 8004ea2:	4a29      	ldr	r2, [pc, #164]	; (8004f48 <HAL_ADC_IRQHandler+0x468>)
 8004ea4:	4293      	cmp	r3, r2
 8004ea6:	d101      	bne.n	8004eac <HAL_ADC_IRQHandler+0x3cc>
 8004ea8:	4b28      	ldr	r3, [pc, #160]	; (8004f4c <HAL_ADC_IRQHandler+0x46c>)
 8004eaa:	e000      	b.n	8004eae <HAL_ADC_IRQHandler+0x3ce>
 8004eac:	4b28      	ldr	r3, [pc, #160]	; (8004f50 <HAL_ADC_IRQHandler+0x470>)
 8004eae:	4618      	mov	r0, r3
 8004eb0:	f7ff fa44 	bl	800433c <LL_ADC_GetMultiDMATransfer>
 8004eb4:	4603      	mov	r3, r0
 8004eb6:	2b00      	cmp	r3, #0
 8004eb8:	d00b      	beq.n	8004ed2 <HAL_ADC_IRQHandler+0x3f2>
        {
          overrun_error = 1UL;
 8004eba:	2301      	movs	r3, #1
 8004ebc:	627b      	str	r3, [r7, #36]	; 0x24
 8004ebe:	e008      	b.n	8004ed2 <HAL_ADC_IRQHandler+0x3f2>
        }
      }
      else
      {
        /* Multimode not set or feature not available or ADC independent */
        if ((hadc->Instance->CFGR & ADC_CFGR_DMNGT) != 0UL)
 8004ec0:	687b      	ldr	r3, [r7, #4]
 8004ec2:	681b      	ldr	r3, [r3, #0]
 8004ec4:	68db      	ldr	r3, [r3, #12]
 8004ec6:	f003 0303 	and.w	r3, r3, #3
 8004eca:	2b00      	cmp	r3, #0
 8004ecc:	d001      	beq.n	8004ed2 <HAL_ADC_IRQHandler+0x3f2>
        {
          overrun_error = 1UL;
 8004ece:	2301      	movs	r3, #1
 8004ed0:	627b      	str	r3, [r7, #36]	; 0x24
        }
      }
    }

    if (overrun_error == 1UL)
 8004ed2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004ed4:	2b01      	cmp	r3, #1
 8004ed6:	d10e      	bne.n	8004ef6 <HAL_ADC_IRQHandler+0x416>
    {
      /* Change ADC state to error state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_OVR);
 8004ed8:	687b      	ldr	r3, [r7, #4]
 8004eda:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004edc:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 8004ee0:	687b      	ldr	r3, [r7, #4]
 8004ee2:	655a      	str	r2, [r3, #84]	; 0x54

      /* Set ADC error code to overrun */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_OVR);
 8004ee4:	687b      	ldr	r3, [r7, #4]
 8004ee6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004ee8:	f043 0202 	orr.w	r2, r3, #2
 8004eec:	687b      	ldr	r3, [r7, #4]
 8004eee:	659a      	str	r2, [r3, #88]	; 0x58
      /*       Therefore, old ADC conversion data can be retrieved in         */
      /*       function "HAL_ADC_ErrorCallback()".                            */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->ErrorCallback(hadc);
#else
      HAL_ADC_ErrorCallback(hadc);
 8004ef0:	6878      	ldr	r0, [r7, #4]
 8004ef2:	f000 f839 	bl	8004f68 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    }

    /* Clear ADC overrun flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 8004ef6:	687b      	ldr	r3, [r7, #4]
 8004ef8:	681b      	ldr	r3, [r3, #0]
 8004efa:	2210      	movs	r2, #16
 8004efc:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check Injected context queue overflow flag ========== */
  if (((tmp_isr & ADC_FLAG_JQOVF) == ADC_FLAG_JQOVF) && ((tmp_ier & ADC_IT_JQOVF) == ADC_IT_JQOVF))
 8004efe:	69fb      	ldr	r3, [r7, #28]
 8004f00:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004f04:	2b00      	cmp	r3, #0
 8004f06:	d018      	beq.n	8004f3a <HAL_ADC_IRQHandler+0x45a>
 8004f08:	69bb      	ldr	r3, [r7, #24]
 8004f0a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004f0e:	2b00      	cmp	r3, #0
 8004f10:	d013      	beq.n	8004f3a <HAL_ADC_IRQHandler+0x45a>
  {
    /* Change ADC state to overrun state */
    SET_BIT(hadc->State, HAL_ADC_STATE_INJ_JQOVF);
 8004f12:	687b      	ldr	r3, [r7, #4]
 8004f14:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004f16:	f443 4280 	orr.w	r2, r3, #16384	; 0x4000
 8004f1a:	687b      	ldr	r3, [r7, #4]
 8004f1c:	655a      	str	r2, [r3, #84]	; 0x54

    /* Set ADC error code to Injected context queue overflow */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_JQOVF);
 8004f1e:	687b      	ldr	r3, [r7, #4]
 8004f20:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004f22:	f043 0208 	orr.w	r2, r3, #8
 8004f26:	687b      	ldr	r3, [r7, #4]
 8004f28:	659a      	str	r2, [r3, #88]	; 0x58

    /* Clear the Injected context queue overflow flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_JQOVF);
 8004f2a:	687b      	ldr	r3, [r7, #4]
 8004f2c:	681b      	ldr	r3, [r3, #0]
 8004f2e:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8004f32:	601a      	str	r2, [r3, #0]

    /* Injected context queue overflow callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->InjectedQueueOverflowCallback(hadc);
#else
    HAL_ADCEx_InjectedQueueOverflowCallback(hadc);
 8004f34:	6878      	ldr	r0, [r7, #4]
 8004f36:	f000 fe07 	bl	8005b48 <HAL_ADCEx_InjectedQueueOverflowCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
  }

}
 8004f3a:	bf00      	nop
 8004f3c:	3728      	adds	r7, #40	; 0x28
 8004f3e:	46bd      	mov	sp, r7
 8004f40:	bd80      	pop	{r7, pc}
 8004f42:	bf00      	nop
 8004f44:	40022000 	.word	0x40022000
 8004f48:	40022100 	.word	0x40022100
 8004f4c:	40022300 	.word	0x40022300
 8004f50:	58026300 	.word	0x58026300

08004f54 <HAL_ADC_LevelOutOfWindowCallback>:
  * @brief  Analog watchdog 1 callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_LevelOutOfWindowCallback(ADC_HandleTypeDef *hadc)
{
 8004f54:	b480      	push	{r7}
 8004f56:	b083      	sub	sp, #12
 8004f58:	af00      	add	r7, sp, #0
 8004f5a:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_LevelOutOfWindowCallback must be implemented in the user file.
  */
}
 8004f5c:	bf00      	nop
 8004f5e:	370c      	adds	r7, #12
 8004f60:	46bd      	mov	sp, r7
 8004f62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f66:	4770      	bx	lr

08004f68 <HAL_ADC_ErrorCallback>:
  *           (this function is also clearing overrun flag)
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 8004f68:	b480      	push	{r7}
 8004f6a:	b083      	sub	sp, #12
 8004f6c:	af00      	add	r7, sp, #0
 8004f6e:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ErrorCallback must be implemented in the user file.
  */
}
 8004f70:	bf00      	nop
 8004f72:	370c      	adds	r7, #12
 8004f74:	46bd      	mov	sp, r7
 8004f76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f7a:	4770      	bx	lr

08004f7c <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param sConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *sConfig)
{
 8004f7c:	b590      	push	{r4, r7, lr}
 8004f7e:	b0a1      	sub	sp, #132	; 0x84
 8004f80:	af00      	add	r7, sp, #0
 8004f82:	6078      	str	r0, [r7, #4]
 8004f84:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8004f86:	2300      	movs	r3, #0
 8004f88:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
  uint32_t tmpOffsetShifted;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0;
 8004f8c:	2300      	movs	r3, #0
 8004f8e:	60bb      	str	r3, [r7, #8]
  /* if ROVSE is set, the value of the OFFSETy_EN bit in ADCx_OFRy register is
     ignored (considered as reset) */
  assert_param(!((sConfig->OffsetNumber != ADC_OFFSET_NONE) && (hadc->Init.OversamplingMode == ENABLE)));

  /* Verification of channel number */
  if (sConfig->SingleDiff != ADC_DIFFERENTIAL_ENDED)
 8004f90:	683b      	ldr	r3, [r7, #0]
 8004f92:	68db      	ldr	r3, [r3, #12]
 8004f94:	4a9d      	ldr	r2, [pc, #628]	; (800520c <HAL_ADC_ConfigChannel+0x290>)
 8004f96:	4293      	cmp	r3, r2
    }
#endif
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8004f98:	687b      	ldr	r3, [r7, #4]
 8004f9a:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8004f9e:	2b01      	cmp	r3, #1
 8004fa0:	d101      	bne.n	8004fa6 <HAL_ADC_ConfigChannel+0x2a>
 8004fa2:	2302      	movs	r3, #2
 8004fa4:	e321      	b.n	80055ea <HAL_ADC_ConfigChannel+0x66e>
 8004fa6:	687b      	ldr	r3, [r7, #4]
 8004fa8:	2201      	movs	r2, #1
 8004faa:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8004fae:	687b      	ldr	r3, [r7, #4]
 8004fb0:	681b      	ldr	r3, [r3, #0]
 8004fb2:	4618      	mov	r0, r3
 8004fb4:	f7ff fa80 	bl	80044b8 <LL_ADC_REG_IsConversionOngoing>
 8004fb8:	4603      	mov	r3, r0
 8004fba:	2b00      	cmp	r3, #0
 8004fbc:	f040 8306 	bne.w	80055cc <HAL_ADC_ConfigChannel+0x650>
      /* ADC channels preselection */
      hadc->Instance->PCSEL_RES0 |= (1UL << (__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) & 0x1FUL));
    }
#else
    /* ADC channels preselection */
    hadc->Instance->PCSEL |= (1UL << (__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) & 0x1FUL));
 8004fc0:	683b      	ldr	r3, [r7, #0]
 8004fc2:	681b      	ldr	r3, [r3, #0]
 8004fc4:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8004fc8:	2b00      	cmp	r3, #0
 8004fca:	d108      	bne.n	8004fde <HAL_ADC_ConfigChannel+0x62>
 8004fcc:	683b      	ldr	r3, [r7, #0]
 8004fce:	681b      	ldr	r3, [r3, #0]
 8004fd0:	0e9b      	lsrs	r3, r3, #26
 8004fd2:	f003 031f 	and.w	r3, r3, #31
 8004fd6:	2201      	movs	r2, #1
 8004fd8:	fa02 f303 	lsl.w	r3, r2, r3
 8004fdc:	e016      	b.n	800500c <HAL_ADC_ConfigChannel+0x90>
 8004fde:	683b      	ldr	r3, [r7, #0]
 8004fe0:	681b      	ldr	r3, [r3, #0]
 8004fe2:	667b      	str	r3, [r7, #100]	; 0x64
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004fe4:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8004fe6:	fa93 f3a3 	rbit	r3, r3
 8004fea:	663b      	str	r3, [r7, #96]	; 0x60
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8004fec:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8004fee:	66bb      	str	r3, [r7, #104]	; 0x68
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 8004ff0:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8004ff2:	2b00      	cmp	r3, #0
 8004ff4:	d101      	bne.n	8004ffa <HAL_ADC_ConfigChannel+0x7e>
  {
    return 32U;
 8004ff6:	2320      	movs	r3, #32
 8004ff8:	e003      	b.n	8005002 <HAL_ADC_ConfigChannel+0x86>
  }
  return __builtin_clz(value);
 8004ffa:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8004ffc:	fab3 f383 	clz	r3, r3
 8005000:	b2db      	uxtb	r3, r3
 8005002:	f003 031f 	and.w	r3, r3, #31
 8005006:	2201      	movs	r2, #1
 8005008:	fa02 f303 	lsl.w	r3, r2, r3
 800500c:	687a      	ldr	r2, [r7, #4]
 800500e:	6812      	ldr	r2, [r2, #0]
 8005010:	69d1      	ldr	r1, [r2, #28]
 8005012:	687a      	ldr	r2, [r7, #4]
 8005014:	6812      	ldr	r2, [r2, #0]
 8005016:	430b      	orrs	r3, r1
 8005018:	61d3      	str	r3, [r2, #28]
#endif /* ADC_VER_V5_V90 */

    /* Set ADC group regular sequence: channel on the selected scan sequence rank */
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, sConfig->Rank, sConfig->Channel);
 800501a:	687b      	ldr	r3, [r7, #4]
 800501c:	6818      	ldr	r0, [r3, #0]
 800501e:	683b      	ldr	r3, [r7, #0]
 8005020:	6859      	ldr	r1, [r3, #4]
 8005022:	683b      	ldr	r3, [r7, #0]
 8005024:	681b      	ldr	r3, [r3, #0]
 8005026:	461a      	mov	r2, r3
 8005028:	f7ff f8eb 	bl	8004202 <LL_ADC_REG_SetSequencerRanks>
    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated when ADC is disabled or enabled without   */
    /* conversion on going on regular group:                                    */
    /*  - Channel sampling time                                                 */
    /*  - Channel offset                                                        */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 800502c:	687b      	ldr	r3, [r7, #4]
 800502e:	681b      	ldr	r3, [r3, #0]
 8005030:	4618      	mov	r0, r3
 8005032:	f7ff fa41 	bl	80044b8 <LL_ADC_REG_IsConversionOngoing>
 8005036:	67b8      	str	r0, [r7, #120]	; 0x78
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8005038:	687b      	ldr	r3, [r7, #4]
 800503a:	681b      	ldr	r3, [r3, #0]
 800503c:	4618      	mov	r0, r3
 800503e:	f7ff fa4e 	bl	80044de <LL_ADC_INJ_IsConversionOngoing>
 8005042:	6778      	str	r0, [r7, #116]	; 0x74
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8005044:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8005046:	2b00      	cmp	r3, #0
 8005048:	f040 80b3 	bne.w	80051b2 <HAL_ADC_ConfigChannel+0x236>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 800504c:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800504e:	2b00      	cmp	r3, #0
 8005050:	f040 80af 	bne.w	80051b2 <HAL_ADC_ConfigChannel+0x236>
       )
    {
      /* Set sampling time of the selected ADC channel */
      LL_ADC_SetChannelSamplingTime(hadc->Instance, sConfig->Channel, sConfig->SamplingTime);
 8005054:	687b      	ldr	r3, [r7, #4]
 8005056:	6818      	ldr	r0, [r3, #0]
 8005058:	683b      	ldr	r3, [r7, #0]
 800505a:	6819      	ldr	r1, [r3, #0]
 800505c:	683b      	ldr	r3, [r7, #0]
 800505e:	689b      	ldr	r3, [r3, #8]
 8005060:	461a      	mov	r2, r3
 8005062:	f7ff f90d 	bl	8004280 <LL_ADC_SetChannelSamplingTime>
        tmpOffsetShifted = ADC3_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)sConfig->Offset);
      }
      else
#endif /* ADC_VER_V5_V90 */
      {
        tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)sConfig->Offset);
 8005066:	4b6a      	ldr	r3, [pc, #424]	; (8005210 <HAL_ADC_ConfigChannel+0x294>)
 8005068:	681b      	ldr	r3, [r3, #0]
 800506a:	f003 4370 	and.w	r3, r3, #4026531840	; 0xf0000000
 800506e:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8005072:	d10b      	bne.n	800508c <HAL_ADC_ConfigChannel+0x110>
 8005074:	683b      	ldr	r3, [r7, #0]
 8005076:	695a      	ldr	r2, [r3, #20]
 8005078:	687b      	ldr	r3, [r7, #4]
 800507a:	681b      	ldr	r3, [r3, #0]
 800507c:	68db      	ldr	r3, [r3, #12]
 800507e:	089b      	lsrs	r3, r3, #2
 8005080:	f003 0307 	and.w	r3, r3, #7
 8005084:	005b      	lsls	r3, r3, #1
 8005086:	fa02 f303 	lsl.w	r3, r2, r3
 800508a:	e01d      	b.n	80050c8 <HAL_ADC_ConfigChannel+0x14c>
 800508c:	687b      	ldr	r3, [r7, #4]
 800508e:	681b      	ldr	r3, [r3, #0]
 8005090:	68db      	ldr	r3, [r3, #12]
 8005092:	f003 0310 	and.w	r3, r3, #16
 8005096:	2b00      	cmp	r3, #0
 8005098:	d10b      	bne.n	80050b2 <HAL_ADC_ConfigChannel+0x136>
 800509a:	683b      	ldr	r3, [r7, #0]
 800509c:	695a      	ldr	r2, [r3, #20]
 800509e:	687b      	ldr	r3, [r7, #4]
 80050a0:	681b      	ldr	r3, [r3, #0]
 80050a2:	68db      	ldr	r3, [r3, #12]
 80050a4:	089b      	lsrs	r3, r3, #2
 80050a6:	f003 0307 	and.w	r3, r3, #7
 80050aa:	005b      	lsls	r3, r3, #1
 80050ac:	fa02 f303 	lsl.w	r3, r2, r3
 80050b0:	e00a      	b.n	80050c8 <HAL_ADC_ConfigChannel+0x14c>
 80050b2:	683b      	ldr	r3, [r7, #0]
 80050b4:	695a      	ldr	r2, [r3, #20]
 80050b6:	687b      	ldr	r3, [r7, #4]
 80050b8:	681b      	ldr	r3, [r3, #0]
 80050ba:	68db      	ldr	r3, [r3, #12]
 80050bc:	089b      	lsrs	r3, r3, #2
 80050be:	f003 0304 	and.w	r3, r3, #4
 80050c2:	005b      	lsls	r3, r3, #1
 80050c4:	fa02 f303 	lsl.w	r3, r2, r3
 80050c8:	673b      	str	r3, [r7, #112]	; 0x70
      }
      
      if (sConfig->OffsetNumber != ADC_OFFSET_NONE)
 80050ca:	683b      	ldr	r3, [r7, #0]
 80050cc:	691b      	ldr	r3, [r3, #16]
 80050ce:	2b04      	cmp	r3, #4
 80050d0:	d027      	beq.n	8005122 <HAL_ADC_ConfigChannel+0x1a6>
      {
        /* Set ADC selected offset number */
        LL_ADC_SetOffset(hadc->Instance, sConfig->OffsetNumber, sConfig->Channel, tmpOffsetShifted);
 80050d2:	687b      	ldr	r3, [r7, #4]
 80050d4:	6818      	ldr	r0, [r3, #0]
 80050d6:	683b      	ldr	r3, [r7, #0]
 80050d8:	6919      	ldr	r1, [r3, #16]
 80050da:	683b      	ldr	r3, [r7, #0]
 80050dc:	681a      	ldr	r2, [r3, #0]
 80050de:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80050e0:	f7ff f828 	bl	8004134 <LL_ADC_SetOffset>
        else
#endif /* ADC_VER_V5_V90 */
        {
          assert_param(IS_FUNCTIONAL_STATE(sConfig->OffsetSignedSaturation));
          /* Set ADC selected offset signed saturation */
          LL_ADC_SetOffsetSignedSaturation(hadc->Instance, sConfig->OffsetNumber, (sConfig->OffsetSignedSaturation == ENABLE) ? LL_ADC_OFFSET_SIGNED_SATURATION_ENABLE : LL_ADC_OFFSET_SIGNED_SATURATION_DISABLE);
 80050e4:	687b      	ldr	r3, [r7, #4]
 80050e6:	6818      	ldr	r0, [r3, #0]
 80050e8:	683b      	ldr	r3, [r7, #0]
 80050ea:	6919      	ldr	r1, [r3, #16]
 80050ec:	683b      	ldr	r3, [r7, #0]
 80050ee:	7e5b      	ldrb	r3, [r3, #25]
 80050f0:	2b01      	cmp	r3, #1
 80050f2:	d102      	bne.n	80050fa <HAL_ADC_ConfigChannel+0x17e>
 80050f4:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 80050f8:	e000      	b.n	80050fc <HAL_ADC_ConfigChannel+0x180>
 80050fa:	2300      	movs	r3, #0
 80050fc:	461a      	mov	r2, r3
 80050fe:	f7ff f852 	bl	80041a6 <LL_ADC_SetOffsetSignedSaturation>

          assert_param(IS_FUNCTIONAL_STATE(sConfig->OffsetRightShift));
          /* Set ADC selected offset right shift */
          LL_ADC_SetDataRightShift(hadc->Instance, sConfig->OffsetNumber, (sConfig->OffsetRightShift == ENABLE) ? LL_ADC_OFFSET_RSHIFT_ENABLE : LL_ADC_OFFSET_RSHIFT_DISABLE);
 8005102:	687b      	ldr	r3, [r7, #4]
 8005104:	6818      	ldr	r0, [r3, #0]
 8005106:	683b      	ldr	r3, [r7, #0]
 8005108:	6919      	ldr	r1, [r3, #16]
 800510a:	683b      	ldr	r3, [r7, #0]
 800510c:	7e1b      	ldrb	r3, [r3, #24]
 800510e:	2b01      	cmp	r3, #1
 8005110:	d102      	bne.n	8005118 <HAL_ADC_ConfigChannel+0x19c>
 8005112:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8005116:	e000      	b.n	800511a <HAL_ADC_ConfigChannel+0x19e>
 8005118:	2300      	movs	r3, #0
 800511a:	461a      	mov	r2, r3
 800511c:	f7ff f82a 	bl	8004174 <LL_ADC_SetDataRightShift>
 8005120:	e047      	b.n	80051b2 <HAL_ADC_ConfigChannel+0x236>
          }
        }
        else
#endif /* ADC_VER_V5_V90 */
        {
          if (((hadc->Instance->OFR1) & ADC_OFR1_OFFSET1_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8005122:	687b      	ldr	r3, [r7, #4]
 8005124:	681b      	ldr	r3, [r3, #0]
 8005126:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005128:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 800512c:	683b      	ldr	r3, [r7, #0]
 800512e:	681b      	ldr	r3, [r3, #0]
 8005130:	069b      	lsls	r3, r3, #26
 8005132:	429a      	cmp	r2, r3
 8005134:	d107      	bne.n	8005146 <HAL_ADC_ConfigChannel+0x1ca>
          {
            CLEAR_BIT(hadc->Instance->OFR1, ADC_OFR1_SSATE);
 8005136:	687b      	ldr	r3, [r7, #4]
 8005138:	681b      	ldr	r3, [r3, #0]
 800513a:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 800513c:	687b      	ldr	r3, [r7, #4]
 800513e:	681b      	ldr	r3, [r3, #0]
 8005140:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 8005144:	661a      	str	r2, [r3, #96]	; 0x60
          }
          if (((hadc->Instance->OFR2) & ADC_OFR2_OFFSET2_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8005146:	687b      	ldr	r3, [r7, #4]
 8005148:	681b      	ldr	r3, [r3, #0]
 800514a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800514c:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8005150:	683b      	ldr	r3, [r7, #0]
 8005152:	681b      	ldr	r3, [r3, #0]
 8005154:	069b      	lsls	r3, r3, #26
 8005156:	429a      	cmp	r2, r3
 8005158:	d107      	bne.n	800516a <HAL_ADC_ConfigChannel+0x1ee>
          {
            CLEAR_BIT(hadc->Instance->OFR2, ADC_OFR2_SSATE);
 800515a:	687b      	ldr	r3, [r7, #4]
 800515c:	681b      	ldr	r3, [r3, #0]
 800515e:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 8005160:	687b      	ldr	r3, [r7, #4]
 8005162:	681b      	ldr	r3, [r3, #0]
 8005164:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 8005168:	665a      	str	r2, [r3, #100]	; 0x64
          }
          if (((hadc->Instance->OFR3) & ADC_OFR3_OFFSET3_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 800516a:	687b      	ldr	r3, [r7, #4]
 800516c:	681b      	ldr	r3, [r3, #0]
 800516e:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8005170:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8005174:	683b      	ldr	r3, [r7, #0]
 8005176:	681b      	ldr	r3, [r3, #0]
 8005178:	069b      	lsls	r3, r3, #26
 800517a:	429a      	cmp	r2, r3
 800517c:	d107      	bne.n	800518e <HAL_ADC_ConfigChannel+0x212>
          {
            CLEAR_BIT(hadc->Instance->OFR3, ADC_OFR3_SSATE);
 800517e:	687b      	ldr	r3, [r7, #4]
 8005180:	681b      	ldr	r3, [r3, #0]
 8005182:	6e9a      	ldr	r2, [r3, #104]	; 0x68
 8005184:	687b      	ldr	r3, [r7, #4]
 8005186:	681b      	ldr	r3, [r3, #0]
 8005188:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 800518c:	669a      	str	r2, [r3, #104]	; 0x68
          }
          if (((hadc->Instance->OFR4) & ADC_OFR4_OFFSET4_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 800518e:	687b      	ldr	r3, [r7, #4]
 8005190:	681b      	ldr	r3, [r3, #0]
 8005192:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8005194:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8005198:	683b      	ldr	r3, [r7, #0]
 800519a:	681b      	ldr	r3, [r3, #0]
 800519c:	069b      	lsls	r3, r3, #26
 800519e:	429a      	cmp	r2, r3
 80051a0:	d107      	bne.n	80051b2 <HAL_ADC_ConfigChannel+0x236>
          {
            CLEAR_BIT(hadc->Instance->OFR4, ADC_OFR4_SSATE);
 80051a2:	687b      	ldr	r3, [r7, #4]
 80051a4:	681b      	ldr	r3, [r3, #0]
 80051a6:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 80051a8:	687b      	ldr	r3, [r7, #4]
 80051aa:	681b      	ldr	r3, [r3, #0]
 80051ac:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 80051b0:	66da      	str	r2, [r3, #108]	; 0x6c

    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated only when ADC is disabled:                */
    /*  - Single or differential mode                                           */
    /*  - Internal measurement channels: Vbat/VrefInt/TempSensor                */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 80051b2:	687b      	ldr	r3, [r7, #4]
 80051b4:	681b      	ldr	r3, [r3, #0]
 80051b6:	4618      	mov	r0, r3
 80051b8:	f7ff f944 	bl	8004444 <LL_ADC_IsEnabled>
 80051bc:	4603      	mov	r3, r0
 80051be:	2b00      	cmp	r3, #0
 80051c0:	f040 820d 	bne.w	80055de <HAL_ADC_ConfigChannel+0x662>
    {
      /* Set mode single-ended or differential input of the selected ADC channel */
      LL_ADC_SetChannelSingleDiff(hadc->Instance, sConfig->Channel, sConfig->SingleDiff);
 80051c4:	687b      	ldr	r3, [r7, #4]
 80051c6:	6818      	ldr	r0, [r3, #0]
 80051c8:	683b      	ldr	r3, [r7, #0]
 80051ca:	6819      	ldr	r1, [r3, #0]
 80051cc:	683b      	ldr	r3, [r7, #0]
 80051ce:	68db      	ldr	r3, [r3, #12]
 80051d0:	461a      	mov	r2, r3
 80051d2:	f7ff f881 	bl	80042d8 <LL_ADC_SetChannelSingleDiff>

      /* Configuration of differential mode */
      if (sConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 80051d6:	683b      	ldr	r3, [r7, #0]
 80051d8:	68db      	ldr	r3, [r3, #12]
 80051da:	4a0c      	ldr	r2, [pc, #48]	; (800520c <HAL_ADC_ConfigChannel+0x290>)
 80051dc:	4293      	cmp	r3, r2
 80051de:	f040 8133 	bne.w	8005448 <HAL_ADC_ConfigChannel+0x4cc>
      {
        /* Set sampling time of the selected ADC channel */
        /* Note: ADC channel number masked with value "0x1F" to ensure shift value within 32 bits range */
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 80051e2:	687b      	ldr	r3, [r7, #4]
 80051e4:	6818      	ldr	r0, [r3, #0]
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 80051e6:	683b      	ldr	r3, [r7, #0]
 80051e8:	681b      	ldr	r3, [r3, #0]
 80051ea:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80051ee:	2b00      	cmp	r3, #0
 80051f0:	d110      	bne.n	8005214 <HAL_ADC_ConfigChannel+0x298>
 80051f2:	683b      	ldr	r3, [r7, #0]
 80051f4:	681b      	ldr	r3, [r3, #0]
 80051f6:	0e9b      	lsrs	r3, r3, #26
 80051f8:	3301      	adds	r3, #1
 80051fa:	f003 031f 	and.w	r3, r3, #31
 80051fe:	2b09      	cmp	r3, #9
 8005200:	bf94      	ite	ls
 8005202:	2301      	movls	r3, #1
 8005204:	2300      	movhi	r3, #0
 8005206:	b2db      	uxtb	r3, r3
 8005208:	e01e      	b.n	8005248 <HAL_ADC_ConfigChannel+0x2cc>
 800520a:	bf00      	nop
 800520c:	47ff0000 	.word	0x47ff0000
 8005210:	5c001000 	.word	0x5c001000
 8005214:	683b      	ldr	r3, [r7, #0]
 8005216:	681b      	ldr	r3, [r3, #0]
 8005218:	65bb      	str	r3, [r7, #88]	; 0x58
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800521a:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800521c:	fa93 f3a3 	rbit	r3, r3
 8005220:	657b      	str	r3, [r7, #84]	; 0x54
  return result;
 8005222:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8005224:	65fb      	str	r3, [r7, #92]	; 0x5c
  if (value == 0U)
 8005226:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8005228:	2b00      	cmp	r3, #0
 800522a:	d101      	bne.n	8005230 <HAL_ADC_ConfigChannel+0x2b4>
    return 32U;
 800522c:	2320      	movs	r3, #32
 800522e:	e003      	b.n	8005238 <HAL_ADC_ConfigChannel+0x2bc>
  return __builtin_clz(value);
 8005230:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8005232:	fab3 f383 	clz	r3, r3
 8005236:	b2db      	uxtb	r3, r3
 8005238:	3301      	adds	r3, #1
 800523a:	f003 031f 	and.w	r3, r3, #31
 800523e:	2b09      	cmp	r3, #9
 8005240:	bf94      	ite	ls
 8005242:	2301      	movls	r3, #1
 8005244:	2300      	movhi	r3, #0
 8005246:	b2db      	uxtb	r3, r3
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8005248:	2b00      	cmp	r3, #0
 800524a:	d079      	beq.n	8005340 <HAL_ADC_ConfigChannel+0x3c4>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 800524c:	683b      	ldr	r3, [r7, #0]
 800524e:	681b      	ldr	r3, [r3, #0]
 8005250:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8005254:	2b00      	cmp	r3, #0
 8005256:	d107      	bne.n	8005268 <HAL_ADC_ConfigChannel+0x2ec>
 8005258:	683b      	ldr	r3, [r7, #0]
 800525a:	681b      	ldr	r3, [r3, #0]
 800525c:	0e9b      	lsrs	r3, r3, #26
 800525e:	3301      	adds	r3, #1
 8005260:	069b      	lsls	r3, r3, #26
 8005262:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8005266:	e015      	b.n	8005294 <HAL_ADC_ConfigChannel+0x318>
 8005268:	683b      	ldr	r3, [r7, #0]
 800526a:	681b      	ldr	r3, [r3, #0]
 800526c:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800526e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005270:	fa93 f3a3 	rbit	r3, r3
 8005274:	64bb      	str	r3, [r7, #72]	; 0x48
  return result;
 8005276:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8005278:	653b      	str	r3, [r7, #80]	; 0x50
  if (value == 0U)
 800527a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800527c:	2b00      	cmp	r3, #0
 800527e:	d101      	bne.n	8005284 <HAL_ADC_ConfigChannel+0x308>
    return 32U;
 8005280:	2320      	movs	r3, #32
 8005282:	e003      	b.n	800528c <HAL_ADC_ConfigChannel+0x310>
  return __builtin_clz(value);
 8005284:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8005286:	fab3 f383 	clz	r3, r3
 800528a:	b2db      	uxtb	r3, r3
 800528c:	3301      	adds	r3, #1
 800528e:	069b      	lsls	r3, r3, #26
 8005290:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8005294:	683b      	ldr	r3, [r7, #0]
 8005296:	681b      	ldr	r3, [r3, #0]
 8005298:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800529c:	2b00      	cmp	r3, #0
 800529e:	d109      	bne.n	80052b4 <HAL_ADC_ConfigChannel+0x338>
 80052a0:	683b      	ldr	r3, [r7, #0]
 80052a2:	681b      	ldr	r3, [r3, #0]
 80052a4:	0e9b      	lsrs	r3, r3, #26
 80052a6:	3301      	adds	r3, #1
 80052a8:	f003 031f 	and.w	r3, r3, #31
 80052ac:	2101      	movs	r1, #1
 80052ae:	fa01 f303 	lsl.w	r3, r1, r3
 80052b2:	e017      	b.n	80052e4 <HAL_ADC_ConfigChannel+0x368>
 80052b4:	683b      	ldr	r3, [r7, #0]
 80052b6:	681b      	ldr	r3, [r3, #0]
 80052b8:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80052ba:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80052bc:	fa93 f3a3 	rbit	r3, r3
 80052c0:	63fb      	str	r3, [r7, #60]	; 0x3c
  return result;
 80052c2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80052c4:	647b      	str	r3, [r7, #68]	; 0x44
  if (value == 0U)
 80052c6:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80052c8:	2b00      	cmp	r3, #0
 80052ca:	d101      	bne.n	80052d0 <HAL_ADC_ConfigChannel+0x354>
    return 32U;
 80052cc:	2320      	movs	r3, #32
 80052ce:	e003      	b.n	80052d8 <HAL_ADC_ConfigChannel+0x35c>
  return __builtin_clz(value);
 80052d0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80052d2:	fab3 f383 	clz	r3, r3
 80052d6:	b2db      	uxtb	r3, r3
 80052d8:	3301      	adds	r3, #1
 80052da:	f003 031f 	and.w	r3, r3, #31
 80052de:	2101      	movs	r1, #1
 80052e0:	fa01 f303 	lsl.w	r3, r1, r3
 80052e4:	ea42 0103 	orr.w	r1, r2, r3
 80052e8:	683b      	ldr	r3, [r7, #0]
 80052ea:	681b      	ldr	r3, [r3, #0]
 80052ec:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80052f0:	2b00      	cmp	r3, #0
 80052f2:	d10a      	bne.n	800530a <HAL_ADC_ConfigChannel+0x38e>
 80052f4:	683b      	ldr	r3, [r7, #0]
 80052f6:	681b      	ldr	r3, [r3, #0]
 80052f8:	0e9b      	lsrs	r3, r3, #26
 80052fa:	3301      	adds	r3, #1
 80052fc:	f003 021f 	and.w	r2, r3, #31
 8005300:	4613      	mov	r3, r2
 8005302:	005b      	lsls	r3, r3, #1
 8005304:	4413      	add	r3, r2
 8005306:	051b      	lsls	r3, r3, #20
 8005308:	e018      	b.n	800533c <HAL_ADC_ConfigChannel+0x3c0>
 800530a:	683b      	ldr	r3, [r7, #0]
 800530c:	681b      	ldr	r3, [r3, #0]
 800530e:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005310:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005312:	fa93 f3a3 	rbit	r3, r3
 8005316:	633b      	str	r3, [r7, #48]	; 0x30
  return result;
 8005318:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800531a:	63bb      	str	r3, [r7, #56]	; 0x38
  if (value == 0U)
 800531c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800531e:	2b00      	cmp	r3, #0
 8005320:	d101      	bne.n	8005326 <HAL_ADC_ConfigChannel+0x3aa>
    return 32U;
 8005322:	2320      	movs	r3, #32
 8005324:	e003      	b.n	800532e <HAL_ADC_ConfigChannel+0x3b2>
  return __builtin_clz(value);
 8005326:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005328:	fab3 f383 	clz	r3, r3
 800532c:	b2db      	uxtb	r3, r3
 800532e:	3301      	adds	r3, #1
 8005330:	f003 021f 	and.w	r2, r3, #31
 8005334:	4613      	mov	r3, r2
 8005336:	005b      	lsls	r3, r3, #1
 8005338:	4413      	add	r3, r2
 800533a:	051b      	lsls	r3, r3, #20
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 800533c:	430b      	orrs	r3, r1
 800533e:	e07e      	b.n	800543e <HAL_ADC_ConfigChannel+0x4c2>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8005340:	683b      	ldr	r3, [r7, #0]
 8005342:	681b      	ldr	r3, [r3, #0]
 8005344:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8005348:	2b00      	cmp	r3, #0
 800534a:	d107      	bne.n	800535c <HAL_ADC_ConfigChannel+0x3e0>
 800534c:	683b      	ldr	r3, [r7, #0]
 800534e:	681b      	ldr	r3, [r3, #0]
 8005350:	0e9b      	lsrs	r3, r3, #26
 8005352:	3301      	adds	r3, #1
 8005354:	069b      	lsls	r3, r3, #26
 8005356:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 800535a:	e015      	b.n	8005388 <HAL_ADC_ConfigChannel+0x40c>
 800535c:	683b      	ldr	r3, [r7, #0]
 800535e:	681b      	ldr	r3, [r3, #0]
 8005360:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005362:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005364:	fa93 f3a3 	rbit	r3, r3
 8005368:	627b      	str	r3, [r7, #36]	; 0x24
  return result;
 800536a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800536c:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (value == 0U)
 800536e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005370:	2b00      	cmp	r3, #0
 8005372:	d101      	bne.n	8005378 <HAL_ADC_ConfigChannel+0x3fc>
    return 32U;
 8005374:	2320      	movs	r3, #32
 8005376:	e003      	b.n	8005380 <HAL_ADC_ConfigChannel+0x404>
  return __builtin_clz(value);
 8005378:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800537a:	fab3 f383 	clz	r3, r3
 800537e:	b2db      	uxtb	r3, r3
 8005380:	3301      	adds	r3, #1
 8005382:	069b      	lsls	r3, r3, #26
 8005384:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8005388:	683b      	ldr	r3, [r7, #0]
 800538a:	681b      	ldr	r3, [r3, #0]
 800538c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8005390:	2b00      	cmp	r3, #0
 8005392:	d109      	bne.n	80053a8 <HAL_ADC_ConfigChannel+0x42c>
 8005394:	683b      	ldr	r3, [r7, #0]
 8005396:	681b      	ldr	r3, [r3, #0]
 8005398:	0e9b      	lsrs	r3, r3, #26
 800539a:	3301      	adds	r3, #1
 800539c:	f003 031f 	and.w	r3, r3, #31
 80053a0:	2101      	movs	r1, #1
 80053a2:	fa01 f303 	lsl.w	r3, r1, r3
 80053a6:	e017      	b.n	80053d8 <HAL_ADC_ConfigChannel+0x45c>
 80053a8:	683b      	ldr	r3, [r7, #0]
 80053aa:	681b      	ldr	r3, [r3, #0]
 80053ac:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80053ae:	69fb      	ldr	r3, [r7, #28]
 80053b0:	fa93 f3a3 	rbit	r3, r3
 80053b4:	61bb      	str	r3, [r7, #24]
  return result;
 80053b6:	69bb      	ldr	r3, [r7, #24]
 80053b8:	623b      	str	r3, [r7, #32]
  if (value == 0U)
 80053ba:	6a3b      	ldr	r3, [r7, #32]
 80053bc:	2b00      	cmp	r3, #0
 80053be:	d101      	bne.n	80053c4 <HAL_ADC_ConfigChannel+0x448>
    return 32U;
 80053c0:	2320      	movs	r3, #32
 80053c2:	e003      	b.n	80053cc <HAL_ADC_ConfigChannel+0x450>
  return __builtin_clz(value);
 80053c4:	6a3b      	ldr	r3, [r7, #32]
 80053c6:	fab3 f383 	clz	r3, r3
 80053ca:	b2db      	uxtb	r3, r3
 80053cc:	3301      	adds	r3, #1
 80053ce:	f003 031f 	and.w	r3, r3, #31
 80053d2:	2101      	movs	r1, #1
 80053d4:	fa01 f303 	lsl.w	r3, r1, r3
 80053d8:	ea42 0103 	orr.w	r1, r2, r3
 80053dc:	683b      	ldr	r3, [r7, #0]
 80053de:	681b      	ldr	r3, [r3, #0]
 80053e0:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80053e4:	2b00      	cmp	r3, #0
 80053e6:	d10d      	bne.n	8005404 <HAL_ADC_ConfigChannel+0x488>
 80053e8:	683b      	ldr	r3, [r7, #0]
 80053ea:	681b      	ldr	r3, [r3, #0]
 80053ec:	0e9b      	lsrs	r3, r3, #26
 80053ee:	3301      	adds	r3, #1
 80053f0:	f003 021f 	and.w	r2, r3, #31
 80053f4:	4613      	mov	r3, r2
 80053f6:	005b      	lsls	r3, r3, #1
 80053f8:	4413      	add	r3, r2
 80053fa:	3b1e      	subs	r3, #30
 80053fc:	051b      	lsls	r3, r3, #20
 80053fe:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8005402:	e01b      	b.n	800543c <HAL_ADC_ConfigChannel+0x4c0>
 8005404:	683b      	ldr	r3, [r7, #0]
 8005406:	681b      	ldr	r3, [r3, #0]
 8005408:	613b      	str	r3, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800540a:	693b      	ldr	r3, [r7, #16]
 800540c:	fa93 f3a3 	rbit	r3, r3
 8005410:	60fb      	str	r3, [r7, #12]
  return result;
 8005412:	68fb      	ldr	r3, [r7, #12]
 8005414:	617b      	str	r3, [r7, #20]
  if (value == 0U)
 8005416:	697b      	ldr	r3, [r7, #20]
 8005418:	2b00      	cmp	r3, #0
 800541a:	d101      	bne.n	8005420 <HAL_ADC_ConfigChannel+0x4a4>
    return 32U;
 800541c:	2320      	movs	r3, #32
 800541e:	e003      	b.n	8005428 <HAL_ADC_ConfigChannel+0x4ac>
  return __builtin_clz(value);
 8005420:	697b      	ldr	r3, [r7, #20]
 8005422:	fab3 f383 	clz	r3, r3
 8005426:	b2db      	uxtb	r3, r3
 8005428:	3301      	adds	r3, #1
 800542a:	f003 021f 	and.w	r2, r3, #31
 800542e:	4613      	mov	r3, r2
 8005430:	005b      	lsls	r3, r3, #1
 8005432:	4413      	add	r3, r2
 8005434:	3b1e      	subs	r3, #30
 8005436:	051b      	lsls	r3, r3, #20
 8005438:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 800543c:	430b      	orrs	r3, r1
 800543e:	683a      	ldr	r2, [r7, #0]
 8005440:	6892      	ldr	r2, [r2, #8]
 8005442:	4619      	mov	r1, r3
 8005444:	f7fe ff1c 	bl	8004280 <LL_ADC_SetChannelSamplingTime>
      /* If internal channel selected, enable dedicated internal buffers and    */
      /* paths.                                                                 */
      /* Note: these internal measurement paths can be disabled using           */
      /* HAL_ADC_DeInit().                                                      */

      if (__LL_ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 8005448:	683b      	ldr	r3, [r7, #0]
 800544a:	681b      	ldr	r3, [r3, #0]
 800544c:	2b00      	cmp	r3, #0
 800544e:	f280 80c6 	bge.w	80055de <HAL_ADC_ConfigChannel+0x662>
      {
        /* Configuration of common ADC parameters                                 */

        tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8005452:	687b      	ldr	r3, [r7, #4]
 8005454:	681b      	ldr	r3, [r3, #0]
 8005456:	4a67      	ldr	r2, [pc, #412]	; (80055f4 <HAL_ADC_ConfigChannel+0x678>)
 8005458:	4293      	cmp	r3, r2
 800545a:	d004      	beq.n	8005466 <HAL_ADC_ConfigChannel+0x4ea>
 800545c:	687b      	ldr	r3, [r7, #4]
 800545e:	681b      	ldr	r3, [r3, #0]
 8005460:	4a65      	ldr	r2, [pc, #404]	; (80055f8 <HAL_ADC_ConfigChannel+0x67c>)
 8005462:	4293      	cmp	r3, r2
 8005464:	d101      	bne.n	800546a <HAL_ADC_ConfigChannel+0x4ee>
 8005466:	4b65      	ldr	r3, [pc, #404]	; (80055fc <HAL_ADC_ConfigChannel+0x680>)
 8005468:	e000      	b.n	800546c <HAL_ADC_ConfigChannel+0x4f0>
 800546a:	4b65      	ldr	r3, [pc, #404]	; (8005600 <HAL_ADC_ConfigChannel+0x684>)
 800546c:	4618      	mov	r0, r3
 800546e:	f7fe fe53 	bl	8004118 <LL_ADC_GetCommonPathInternalCh>
 8005472:	66f8      	str	r0, [r7, #108]	; 0x6c

        /* Software is allowed to change common parameters only when all ADCs   */
        /* of the common group are disabled.                                    */
        if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8005474:	687b      	ldr	r3, [r7, #4]
 8005476:	681b      	ldr	r3, [r3, #0]
 8005478:	4a5e      	ldr	r2, [pc, #376]	; (80055f4 <HAL_ADC_ConfigChannel+0x678>)
 800547a:	4293      	cmp	r3, r2
 800547c:	d004      	beq.n	8005488 <HAL_ADC_ConfigChannel+0x50c>
 800547e:	687b      	ldr	r3, [r7, #4]
 8005480:	681b      	ldr	r3, [r3, #0]
 8005482:	4a5d      	ldr	r2, [pc, #372]	; (80055f8 <HAL_ADC_ConfigChannel+0x67c>)
 8005484:	4293      	cmp	r3, r2
 8005486:	d10e      	bne.n	80054a6 <HAL_ADC_ConfigChannel+0x52a>
 8005488:	485a      	ldr	r0, [pc, #360]	; (80055f4 <HAL_ADC_ConfigChannel+0x678>)
 800548a:	f7fe ffdb 	bl	8004444 <LL_ADC_IsEnabled>
 800548e:	4604      	mov	r4, r0
 8005490:	4859      	ldr	r0, [pc, #356]	; (80055f8 <HAL_ADC_ConfigChannel+0x67c>)
 8005492:	f7fe ffd7 	bl	8004444 <LL_ADC_IsEnabled>
 8005496:	4603      	mov	r3, r0
 8005498:	4323      	orrs	r3, r4
 800549a:	2b00      	cmp	r3, #0
 800549c:	bf0c      	ite	eq
 800549e:	2301      	moveq	r3, #1
 80054a0:	2300      	movne	r3, #0
 80054a2:	b2db      	uxtb	r3, r3
 80054a4:	e008      	b.n	80054b8 <HAL_ADC_ConfigChannel+0x53c>
 80054a6:	4857      	ldr	r0, [pc, #348]	; (8005604 <HAL_ADC_ConfigChannel+0x688>)
 80054a8:	f7fe ffcc 	bl	8004444 <LL_ADC_IsEnabled>
 80054ac:	4603      	mov	r3, r0
 80054ae:	2b00      	cmp	r3, #0
 80054b0:	bf0c      	ite	eq
 80054b2:	2301      	moveq	r3, #1
 80054b4:	2300      	movne	r3, #0
 80054b6:	b2db      	uxtb	r3, r3
 80054b8:	2b00      	cmp	r3, #0
 80054ba:	d07d      	beq.n	80055b8 <HAL_ADC_ConfigChannel+0x63c>
        {
          /* If the requested internal measurement path has already been enabled, */
          /* bypass the configuration processing.                                 */
          if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 80054bc:	683b      	ldr	r3, [r7, #0]
 80054be:	681b      	ldr	r3, [r3, #0]
 80054c0:	4a51      	ldr	r2, [pc, #324]	; (8005608 <HAL_ADC_ConfigChannel+0x68c>)
 80054c2:	4293      	cmp	r3, r2
 80054c4:	d130      	bne.n	8005528 <HAL_ADC_ConfigChannel+0x5ac>
 80054c6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80054c8:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80054cc:	2b00      	cmp	r3, #0
 80054ce:	d12b      	bne.n	8005528 <HAL_ADC_ConfigChannel+0x5ac>
          {
            if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 80054d0:	687b      	ldr	r3, [r7, #4]
 80054d2:	681b      	ldr	r3, [r3, #0]
 80054d4:	4a4b      	ldr	r2, [pc, #300]	; (8005604 <HAL_ADC_ConfigChannel+0x688>)
 80054d6:	4293      	cmp	r3, r2
 80054d8:	f040 8081 	bne.w	80055de <HAL_ADC_ConfigChannel+0x662>
            {
              LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance), LL_ADC_PATH_INTERNAL_TEMPSENSOR | tmp_config_internal_channel);
 80054dc:	687b      	ldr	r3, [r7, #4]
 80054de:	681b      	ldr	r3, [r3, #0]
 80054e0:	4a44      	ldr	r2, [pc, #272]	; (80055f4 <HAL_ADC_ConfigChannel+0x678>)
 80054e2:	4293      	cmp	r3, r2
 80054e4:	d004      	beq.n	80054f0 <HAL_ADC_ConfigChannel+0x574>
 80054e6:	687b      	ldr	r3, [r7, #4]
 80054e8:	681b      	ldr	r3, [r3, #0]
 80054ea:	4a43      	ldr	r2, [pc, #268]	; (80055f8 <HAL_ADC_ConfigChannel+0x67c>)
 80054ec:	4293      	cmp	r3, r2
 80054ee:	d101      	bne.n	80054f4 <HAL_ADC_ConfigChannel+0x578>
 80054f0:	4a42      	ldr	r2, [pc, #264]	; (80055fc <HAL_ADC_ConfigChannel+0x680>)
 80054f2:	e000      	b.n	80054f6 <HAL_ADC_ConfigChannel+0x57a>
 80054f4:	4a42      	ldr	r2, [pc, #264]	; (8005600 <HAL_ADC_ConfigChannel+0x684>)
 80054f6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80054f8:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 80054fc:	4619      	mov	r1, r3
 80054fe:	4610      	mov	r0, r2
 8005500:	f7fe fdf7 	bl	80040f2 <LL_ADC_SetCommonPathInternalCh>
              /* Delay for temperature sensor stabilization time */
              /* Wait loop initialization and execution */
              /* Note: Variable divided by 2 to compensate partially              */
              /*       CPU processing cycles, scaling in us split to not          */
              /*       exceed 32 bits register capacity and handle low frequency. */
              wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8005504:	4b41      	ldr	r3, [pc, #260]	; (800560c <HAL_ADC_ConfigChannel+0x690>)
 8005506:	681b      	ldr	r3, [r3, #0]
 8005508:	099b      	lsrs	r3, r3, #6
 800550a:	4a41      	ldr	r2, [pc, #260]	; (8005610 <HAL_ADC_ConfigChannel+0x694>)
 800550c:	fba2 2303 	umull	r2, r3, r2, r3
 8005510:	099b      	lsrs	r3, r3, #6
 8005512:	3301      	adds	r3, #1
 8005514:	005b      	lsls	r3, r3, #1
 8005516:	60bb      	str	r3, [r7, #8]
              while (wait_loop_index != 0UL)
 8005518:	e002      	b.n	8005520 <HAL_ADC_ConfigChannel+0x5a4>
              {
                wait_loop_index--;
 800551a:	68bb      	ldr	r3, [r7, #8]
 800551c:	3b01      	subs	r3, #1
 800551e:	60bb      	str	r3, [r7, #8]
              while (wait_loop_index != 0UL)
 8005520:	68bb      	ldr	r3, [r7, #8]
 8005522:	2b00      	cmp	r3, #0
 8005524:	d1f9      	bne.n	800551a <HAL_ADC_ConfigChannel+0x59e>
            if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8005526:	e05a      	b.n	80055de <HAL_ADC_ConfigChannel+0x662>
              }
            }
          }
          else if ((sConfig->Channel == ADC_CHANNEL_VBAT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 8005528:	683b      	ldr	r3, [r7, #0]
 800552a:	681b      	ldr	r3, [r3, #0]
 800552c:	4a39      	ldr	r2, [pc, #228]	; (8005614 <HAL_ADC_ConfigChannel+0x698>)
 800552e:	4293      	cmp	r3, r2
 8005530:	d11e      	bne.n	8005570 <HAL_ADC_ConfigChannel+0x5f4>
 8005532:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005534:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8005538:	2b00      	cmp	r3, #0
 800553a:	d119      	bne.n	8005570 <HAL_ADC_ConfigChannel+0x5f4>
          {
            if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 800553c:	687b      	ldr	r3, [r7, #4]
 800553e:	681b      	ldr	r3, [r3, #0]
 8005540:	4a30      	ldr	r2, [pc, #192]	; (8005604 <HAL_ADC_ConfigChannel+0x688>)
 8005542:	4293      	cmp	r3, r2
 8005544:	d14b      	bne.n	80055de <HAL_ADC_ConfigChannel+0x662>
            {
              LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance), LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
 8005546:	687b      	ldr	r3, [r7, #4]
 8005548:	681b      	ldr	r3, [r3, #0]
 800554a:	4a2a      	ldr	r2, [pc, #168]	; (80055f4 <HAL_ADC_ConfigChannel+0x678>)
 800554c:	4293      	cmp	r3, r2
 800554e:	d004      	beq.n	800555a <HAL_ADC_ConfigChannel+0x5de>
 8005550:	687b      	ldr	r3, [r7, #4]
 8005552:	681b      	ldr	r3, [r3, #0]
 8005554:	4a28      	ldr	r2, [pc, #160]	; (80055f8 <HAL_ADC_ConfigChannel+0x67c>)
 8005556:	4293      	cmp	r3, r2
 8005558:	d101      	bne.n	800555e <HAL_ADC_ConfigChannel+0x5e2>
 800555a:	4a28      	ldr	r2, [pc, #160]	; (80055fc <HAL_ADC_ConfigChannel+0x680>)
 800555c:	e000      	b.n	8005560 <HAL_ADC_ConfigChannel+0x5e4>
 800555e:	4a28      	ldr	r2, [pc, #160]	; (8005600 <HAL_ADC_ConfigChannel+0x684>)
 8005560:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005562:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8005566:	4619      	mov	r1, r3
 8005568:	4610      	mov	r0, r2
 800556a:	f7fe fdc2 	bl	80040f2 <LL_ADC_SetCommonPathInternalCh>
            if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 800556e:	e036      	b.n	80055de <HAL_ADC_ConfigChannel+0x662>
            }
          }
          else if ((sConfig->Channel == ADC_CHANNEL_VREFINT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 8005570:	683b      	ldr	r3, [r7, #0]
 8005572:	681b      	ldr	r3, [r3, #0]
 8005574:	4a28      	ldr	r2, [pc, #160]	; (8005618 <HAL_ADC_ConfigChannel+0x69c>)
 8005576:	4293      	cmp	r3, r2
 8005578:	d131      	bne.n	80055de <HAL_ADC_ConfigChannel+0x662>
 800557a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800557c:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8005580:	2b00      	cmp	r3, #0
 8005582:	d12c      	bne.n	80055de <HAL_ADC_ConfigChannel+0x662>
          {
            if (ADC_VREFINT_INSTANCE(hadc))
 8005584:	687b      	ldr	r3, [r7, #4]
 8005586:	681b      	ldr	r3, [r3, #0]
 8005588:	4a1e      	ldr	r2, [pc, #120]	; (8005604 <HAL_ADC_ConfigChannel+0x688>)
 800558a:	4293      	cmp	r3, r2
 800558c:	d127      	bne.n	80055de <HAL_ADC_ConfigChannel+0x662>
            {
              LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance), LL_ADC_PATH_INTERNAL_VREFINT | tmp_config_internal_channel);
 800558e:	687b      	ldr	r3, [r7, #4]
 8005590:	681b      	ldr	r3, [r3, #0]
 8005592:	4a18      	ldr	r2, [pc, #96]	; (80055f4 <HAL_ADC_ConfigChannel+0x678>)
 8005594:	4293      	cmp	r3, r2
 8005596:	d004      	beq.n	80055a2 <HAL_ADC_ConfigChannel+0x626>
 8005598:	687b      	ldr	r3, [r7, #4]
 800559a:	681b      	ldr	r3, [r3, #0]
 800559c:	4a16      	ldr	r2, [pc, #88]	; (80055f8 <HAL_ADC_ConfigChannel+0x67c>)
 800559e:	4293      	cmp	r3, r2
 80055a0:	d101      	bne.n	80055a6 <HAL_ADC_ConfigChannel+0x62a>
 80055a2:	4a16      	ldr	r2, [pc, #88]	; (80055fc <HAL_ADC_ConfigChannel+0x680>)
 80055a4:	e000      	b.n	80055a8 <HAL_ADC_ConfigChannel+0x62c>
 80055a6:	4a16      	ldr	r2, [pc, #88]	; (8005600 <HAL_ADC_ConfigChannel+0x684>)
 80055a8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80055aa:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 80055ae:	4619      	mov	r1, r3
 80055b0:	4610      	mov	r0, r2
 80055b2:	f7fe fd9e 	bl	80040f2 <LL_ADC_SetCommonPathInternalCh>
 80055b6:	e012      	b.n	80055de <HAL_ADC_ConfigChannel+0x662>
        /* enabled and other ADC of the common group are enabled, internal      */
        /* measurement paths cannot be enabled.                                 */
        else
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80055b8:	687b      	ldr	r3, [r7, #4]
 80055ba:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80055bc:	f043 0220 	orr.w	r2, r3, #32
 80055c0:	687b      	ldr	r3, [r7, #4]
 80055c2:	655a      	str	r2, [r3, #84]	; 0x54

          tmp_hal_status = HAL_ERROR;
 80055c4:	2301      	movs	r3, #1
 80055c6:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
 80055ca:	e008      	b.n	80055de <HAL_ADC_ConfigChannel+0x662>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80055cc:	687b      	ldr	r3, [r7, #4]
 80055ce:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80055d0:	f043 0220 	orr.w	r2, r3, #32
 80055d4:	687b      	ldr	r3, [r7, #4]
 80055d6:	655a      	str	r2, [r3, #84]	; 0x54

    tmp_hal_status = HAL_ERROR;
 80055d8:	2301      	movs	r3, #1
 80055da:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80055de:	687b      	ldr	r3, [r7, #4]
 80055e0:	2200      	movs	r2, #0
 80055e2:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Return function status */
  return tmp_hal_status;
 80055e6:	f897 307f 	ldrb.w	r3, [r7, #127]	; 0x7f
}
 80055ea:	4618      	mov	r0, r3
 80055ec:	3784      	adds	r7, #132	; 0x84
 80055ee:	46bd      	mov	sp, r7
 80055f0:	bd90      	pop	{r4, r7, pc}
 80055f2:	bf00      	nop
 80055f4:	40022000 	.word	0x40022000
 80055f8:	40022100 	.word	0x40022100
 80055fc:	40022300 	.word	0x40022300
 8005600:	58026300 	.word	0x58026300
 8005604:	58026000 	.word	0x58026000
 8005608:	cb840000 	.word	0xcb840000
 800560c:	20000010 	.word	0x20000010
 8005610:	053e2d63 	.word	0x053e2d63
 8005614:	c7520000 	.word	0xc7520000
 8005618:	cfb80000 	.word	0xcfb80000

0800561c <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef *hadc)
{
 800561c:	b580      	push	{r7, lr}
 800561e:	b084      	sub	sp, #16
 8005620:	af00      	add	r7, sp, #0
 8005622:	6078      	str	r0, [r7, #4]

  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8005624:	687b      	ldr	r3, [r7, #4]
 8005626:	681b      	ldr	r3, [r3, #0]
 8005628:	4618      	mov	r0, r3
 800562a:	f7fe ff0b 	bl	8004444 <LL_ADC_IsEnabled>
 800562e:	4603      	mov	r3, r0
 8005630:	2b00      	cmp	r3, #0
 8005632:	d16e      	bne.n	8005712 <ADC_Enable+0xf6>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_ADCAL | ADC_CR_JADSTP | ADC_CR_ADSTP | ADC_CR_JADSTART | ADC_CR_ADSTART | ADC_CR_ADDIS | ADC_CR_ADEN)) != 0UL)
 8005634:	687b      	ldr	r3, [r7, #4]
 8005636:	681b      	ldr	r3, [r3, #0]
 8005638:	689a      	ldr	r2, [r3, #8]
 800563a:	4b38      	ldr	r3, [pc, #224]	; (800571c <ADC_Enable+0x100>)
 800563c:	4013      	ands	r3, r2
 800563e:	2b00      	cmp	r3, #0
 8005640:	d00d      	beq.n	800565e <ADC_Enable+0x42>
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8005642:	687b      	ldr	r3, [r7, #4]
 8005644:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005646:	f043 0210 	orr.w	r2, r3, #16
 800564a:	687b      	ldr	r3, [r7, #4]
 800564c:	655a      	str	r2, [r3, #84]	; 0x54

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800564e:	687b      	ldr	r3, [r7, #4]
 8005650:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005652:	f043 0201 	orr.w	r2, r3, #1
 8005656:	687b      	ldr	r3, [r7, #4]
 8005658:	659a      	str	r2, [r3, #88]	; 0x58

      return HAL_ERROR;
 800565a:	2301      	movs	r3, #1
 800565c:	e05a      	b.n	8005714 <ADC_Enable+0xf8>
    }

    /* Enable the ADC peripheral */
    LL_ADC_Enable(hadc->Instance);
 800565e:	687b      	ldr	r3, [r7, #4]
 8005660:	681b      	ldr	r3, [r3, #0]
 8005662:	4618      	mov	r0, r3
 8005664:	f7fe fec6 	bl	80043f4 <LL_ADC_Enable>

    /* Wait for ADC effectively enabled */
    tickstart = HAL_GetTick();
 8005668:	f7fe fcca 	bl	8004000 <HAL_GetTick>
 800566c:	60f8      	str	r0, [r7, #12]

    /* Poll for ADC ready flag raised except case of multimode enabled
       and ADC slave selected. */
    uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 800566e:	687b      	ldr	r3, [r7, #4]
 8005670:	681b      	ldr	r3, [r3, #0]
 8005672:	4a2b      	ldr	r2, [pc, #172]	; (8005720 <ADC_Enable+0x104>)
 8005674:	4293      	cmp	r3, r2
 8005676:	d004      	beq.n	8005682 <ADC_Enable+0x66>
 8005678:	687b      	ldr	r3, [r7, #4]
 800567a:	681b      	ldr	r3, [r3, #0]
 800567c:	4a29      	ldr	r2, [pc, #164]	; (8005724 <ADC_Enable+0x108>)
 800567e:	4293      	cmp	r3, r2
 8005680:	d101      	bne.n	8005686 <ADC_Enable+0x6a>
 8005682:	4b29      	ldr	r3, [pc, #164]	; (8005728 <ADC_Enable+0x10c>)
 8005684:	e000      	b.n	8005688 <ADC_Enable+0x6c>
 8005686:	4b29      	ldr	r3, [pc, #164]	; (800572c <ADC_Enable+0x110>)
 8005688:	4618      	mov	r0, r3
 800568a:	f7fe fe49 	bl	8004320 <LL_ADC_GetMultimode>
 800568e:	60b8      	str	r0, [r7, #8]
    if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8005690:	687b      	ldr	r3, [r7, #4]
 8005692:	681b      	ldr	r3, [r3, #0]
 8005694:	4a23      	ldr	r2, [pc, #140]	; (8005724 <ADC_Enable+0x108>)
 8005696:	4293      	cmp	r3, r2
 8005698:	d002      	beq.n	80056a0 <ADC_Enable+0x84>
 800569a:	687b      	ldr	r3, [r7, #4]
 800569c:	681b      	ldr	r3, [r3, #0]
 800569e:	e000      	b.n	80056a2 <ADC_Enable+0x86>
 80056a0:	4b1f      	ldr	r3, [pc, #124]	; (8005720 <ADC_Enable+0x104>)
 80056a2:	687a      	ldr	r2, [r7, #4]
 80056a4:	6812      	ldr	r2, [r2, #0]
 80056a6:	4293      	cmp	r3, r2
 80056a8:	d02c      	beq.n	8005704 <ADC_Enable+0xe8>
        || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 80056aa:	68bb      	ldr	r3, [r7, #8]
 80056ac:	2b00      	cmp	r3, #0
 80056ae:	d130      	bne.n	8005712 <ADC_Enable+0xf6>
       )
    {
      while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 80056b0:	e028      	b.n	8005704 <ADC_Enable+0xe8>
            The workaround is to continue setting ADEN until ADRDY is becomes 1.
            Additionally, ADC_ENABLE_TIMEOUT is defined to encompass this
            4 ADC clock cycle duration */
        /* Note: Test of ADC enabled required due to hardware constraint to     */
        /*       not enable ADC if already enabled.                             */
        if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 80056b2:	687b      	ldr	r3, [r7, #4]
 80056b4:	681b      	ldr	r3, [r3, #0]
 80056b6:	4618      	mov	r0, r3
 80056b8:	f7fe fec4 	bl	8004444 <LL_ADC_IsEnabled>
 80056bc:	4603      	mov	r3, r0
 80056be:	2b00      	cmp	r3, #0
 80056c0:	d104      	bne.n	80056cc <ADC_Enable+0xb0>
        {
          LL_ADC_Enable(hadc->Instance);
 80056c2:	687b      	ldr	r3, [r7, #4]
 80056c4:	681b      	ldr	r3, [r3, #0]
 80056c6:	4618      	mov	r0, r3
 80056c8:	f7fe fe94 	bl	80043f4 <LL_ADC_Enable>
        }

        if ((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 80056cc:	f7fe fc98 	bl	8004000 <HAL_GetTick>
 80056d0:	4602      	mov	r2, r0
 80056d2:	68fb      	ldr	r3, [r7, #12]
 80056d4:	1ad3      	subs	r3, r2, r3
 80056d6:	2b02      	cmp	r3, #2
 80056d8:	d914      	bls.n	8005704 <ADC_Enable+0xe8>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 80056da:	687b      	ldr	r3, [r7, #4]
 80056dc:	681b      	ldr	r3, [r3, #0]
 80056de:	681b      	ldr	r3, [r3, #0]
 80056e0:	f003 0301 	and.w	r3, r3, #1
 80056e4:	2b01      	cmp	r3, #1
 80056e6:	d00d      	beq.n	8005704 <ADC_Enable+0xe8>
          {
            /* Update ADC state machine to error */
            SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80056e8:	687b      	ldr	r3, [r7, #4]
 80056ea:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80056ec:	f043 0210 	orr.w	r2, r3, #16
 80056f0:	687b      	ldr	r3, [r7, #4]
 80056f2:	655a      	str	r2, [r3, #84]	; 0x54

            /* Set ADC error code to ADC peripheral internal error */
            SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80056f4:	687b      	ldr	r3, [r7, #4]
 80056f6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80056f8:	f043 0201 	orr.w	r2, r3, #1
 80056fc:	687b      	ldr	r3, [r7, #4]
 80056fe:	659a      	str	r2, [r3, #88]	; 0x58

            return HAL_ERROR;
 8005700:	2301      	movs	r3, #1
 8005702:	e007      	b.n	8005714 <ADC_Enable+0xf8>
      while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8005704:	687b      	ldr	r3, [r7, #4]
 8005706:	681b      	ldr	r3, [r3, #0]
 8005708:	681b      	ldr	r3, [r3, #0]
 800570a:	f003 0301 	and.w	r3, r3, #1
 800570e:	2b01      	cmp	r3, #1
 8005710:	d1cf      	bne.n	80056b2 <ADC_Enable+0x96>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 8005712:	2300      	movs	r3, #0
}
 8005714:	4618      	mov	r0, r3
 8005716:	3710      	adds	r7, #16
 8005718:	46bd      	mov	sp, r7
 800571a:	bd80      	pop	{r7, pc}
 800571c:	8000003f 	.word	0x8000003f
 8005720:	40022000 	.word	0x40022000
 8005724:	40022100 	.word	0x40022100
 8005728:	40022300 	.word	0x40022300
 800572c:	58026300 	.word	0x58026300

08005730 <ADC_Disable>:
  *         stopped.
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Disable(ADC_HandleTypeDef *hadc)
{
 8005730:	b580      	push	{r7, lr}
 8005732:	b084      	sub	sp, #16
 8005734:	af00      	add	r7, sp, #0
 8005736:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  const uint32_t tmp_adc_is_disable_on_going = LL_ADC_IsDisableOngoing(hadc->Instance);
 8005738:	687b      	ldr	r3, [r7, #4]
 800573a:	681b      	ldr	r3, [r3, #0]
 800573c:	4618      	mov	r0, r3
 800573e:	f7fe fe94 	bl	800446a <LL_ADC_IsDisableOngoing>
 8005742:	60f8      	str	r0, [r7, #12]

  /* Verification if ADC is not already disabled:                             */
  /* Note: forbidden to disable ADC (set bit ADC_CR_ADDIS) if ADC is already  */
  /*       disabled.                                                          */
  if ((LL_ADC_IsEnabled(hadc->Instance) != 0UL)
 8005744:	687b      	ldr	r3, [r7, #4]
 8005746:	681b      	ldr	r3, [r3, #0]
 8005748:	4618      	mov	r0, r3
 800574a:	f7fe fe7b 	bl	8004444 <LL_ADC_IsEnabled>
 800574e:	4603      	mov	r3, r0
 8005750:	2b00      	cmp	r3, #0
 8005752:	d047      	beq.n	80057e4 <ADC_Disable+0xb4>
      && (tmp_adc_is_disable_on_going == 0UL)
 8005754:	68fb      	ldr	r3, [r7, #12]
 8005756:	2b00      	cmp	r3, #0
 8005758:	d144      	bne.n	80057e4 <ADC_Disable+0xb4>
     )
  {
    /* Check if conditions to disable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_JADSTART | ADC_CR_ADSTART | ADC_CR_ADEN)) == ADC_CR_ADEN)
 800575a:	687b      	ldr	r3, [r7, #4]
 800575c:	681b      	ldr	r3, [r3, #0]
 800575e:	689b      	ldr	r3, [r3, #8]
 8005760:	f003 030d 	and.w	r3, r3, #13
 8005764:	2b01      	cmp	r3, #1
 8005766:	d10c      	bne.n	8005782 <ADC_Disable+0x52>
    {
      /* Disable the ADC peripheral */
      LL_ADC_Disable(hadc->Instance);
 8005768:	687b      	ldr	r3, [r7, #4]
 800576a:	681b      	ldr	r3, [r3, #0]
 800576c:	4618      	mov	r0, r3
 800576e:	f7fe fe55 	bl	800441c <LL_ADC_Disable>
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOSMP | ADC_FLAG_RDY));
 8005772:	687b      	ldr	r3, [r7, #4]
 8005774:	681b      	ldr	r3, [r3, #0]
 8005776:	2203      	movs	r2, #3
 8005778:	601a      	str	r2, [r3, #0]
      return HAL_ERROR;
    }

    /* Wait for ADC effectively disabled */
    /* Get tick count */
    tickstart = HAL_GetTick();
 800577a:	f7fe fc41 	bl	8004000 <HAL_GetTick>
 800577e:	60b8      	str	r0, [r7, #8]

    while ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 8005780:	e029      	b.n	80057d6 <ADC_Disable+0xa6>
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8005782:	687b      	ldr	r3, [r7, #4]
 8005784:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005786:	f043 0210 	orr.w	r2, r3, #16
 800578a:	687b      	ldr	r3, [r7, #4]
 800578c:	655a      	str	r2, [r3, #84]	; 0x54
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800578e:	687b      	ldr	r3, [r7, #4]
 8005790:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005792:	f043 0201 	orr.w	r2, r3, #1
 8005796:	687b      	ldr	r3, [r7, #4]
 8005798:	659a      	str	r2, [r3, #88]	; 0x58
      return HAL_ERROR;
 800579a:	2301      	movs	r3, #1
 800579c:	e023      	b.n	80057e6 <ADC_Disable+0xb6>
    {
      if ((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 800579e:	f7fe fc2f 	bl	8004000 <HAL_GetTick>
 80057a2:	4602      	mov	r2, r0
 80057a4:	68bb      	ldr	r3, [r7, #8]
 80057a6:	1ad3      	subs	r3, r2, r3
 80057a8:	2b02      	cmp	r3, #2
 80057aa:	d914      	bls.n	80057d6 <ADC_Disable+0xa6>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 80057ac:	687b      	ldr	r3, [r7, #4]
 80057ae:	681b      	ldr	r3, [r3, #0]
 80057b0:	689b      	ldr	r3, [r3, #8]
 80057b2:	f003 0301 	and.w	r3, r3, #1
 80057b6:	2b00      	cmp	r3, #0
 80057b8:	d00d      	beq.n	80057d6 <ADC_Disable+0xa6>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80057ba:	687b      	ldr	r3, [r7, #4]
 80057bc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80057be:	f043 0210 	orr.w	r2, r3, #16
 80057c2:	687b      	ldr	r3, [r7, #4]
 80057c4:	655a      	str	r2, [r3, #84]	; 0x54

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80057c6:	687b      	ldr	r3, [r7, #4]
 80057c8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80057ca:	f043 0201 	orr.w	r2, r3, #1
 80057ce:	687b      	ldr	r3, [r7, #4]
 80057d0:	659a      	str	r2, [r3, #88]	; 0x58

          return HAL_ERROR;
 80057d2:	2301      	movs	r3, #1
 80057d4:	e007      	b.n	80057e6 <ADC_Disable+0xb6>
    while ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 80057d6:	687b      	ldr	r3, [r7, #4]
 80057d8:	681b      	ldr	r3, [r3, #0]
 80057da:	689b      	ldr	r3, [r3, #8]
 80057dc:	f003 0301 	and.w	r3, r3, #1
 80057e0:	2b00      	cmp	r3, #0
 80057e2:	d1dc      	bne.n	800579e <ADC_Disable+0x6e>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 80057e4:	2300      	movs	r3, #0
}
 80057e6:	4618      	mov	r0, r3
 80057e8:	3710      	adds	r7, #16
 80057ea:	46bd      	mov	sp, r7
 80057ec:	bd80      	pop	{r7, pc}
	...

080057f0 <ADC_ConfigureBoostMode>:
  *         stopped.
  * @param  hadc ADC handle
  * @retval None.
  */
void ADC_ConfigureBoostMode(ADC_HandleTypeDef *hadc)
{
 80057f0:	b580      	push	{r7, lr}
 80057f2:	b084      	sub	sp, #16
 80057f4:	af00      	add	r7, sp, #0
 80057f6:	6078      	str	r0, [r7, #4]
  uint32_t freq;
  if (ADC_IS_SYNCHRONOUS_CLOCK_MODE(hadc))
 80057f8:	687b      	ldr	r3, [r7, #4]
 80057fa:	681b      	ldr	r3, [r3, #0]
 80057fc:	4a7a      	ldr	r2, [pc, #488]	; (80059e8 <ADC_ConfigureBoostMode+0x1f8>)
 80057fe:	4293      	cmp	r3, r2
 8005800:	d004      	beq.n	800580c <ADC_ConfigureBoostMode+0x1c>
 8005802:	687b      	ldr	r3, [r7, #4]
 8005804:	681b      	ldr	r3, [r3, #0]
 8005806:	4a79      	ldr	r2, [pc, #484]	; (80059ec <ADC_ConfigureBoostMode+0x1fc>)
 8005808:	4293      	cmp	r3, r2
 800580a:	d109      	bne.n	8005820 <ADC_ConfigureBoostMode+0x30>
 800580c:	4b78      	ldr	r3, [pc, #480]	; (80059f0 <ADC_ConfigureBoostMode+0x200>)
 800580e:	689b      	ldr	r3, [r3, #8]
 8005810:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8005814:	2b00      	cmp	r3, #0
 8005816:	bf14      	ite	ne
 8005818:	2301      	movne	r3, #1
 800581a:	2300      	moveq	r3, #0
 800581c:	b2db      	uxtb	r3, r3
 800581e:	e008      	b.n	8005832 <ADC_ConfigureBoostMode+0x42>
 8005820:	4b74      	ldr	r3, [pc, #464]	; (80059f4 <ADC_ConfigureBoostMode+0x204>)
 8005822:	689b      	ldr	r3, [r3, #8]
 8005824:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8005828:	2b00      	cmp	r3, #0
 800582a:	bf14      	ite	ne
 800582c:	2301      	movne	r3, #1
 800582e:	2300      	moveq	r3, #0
 8005830:	b2db      	uxtb	r3, r3
 8005832:	2b00      	cmp	r3, #0
 8005834:	d01c      	beq.n	8005870 <ADC_ConfigureBoostMode+0x80>
  {
    freq = HAL_RCC_GetHCLKFreq();
 8005836:	f005 f89b 	bl	800a970 <HAL_RCC_GetHCLKFreq>
 800583a:	60f8      	str	r0, [r7, #12]
    switch (hadc->Init.ClockPrescaler)
 800583c:	687b      	ldr	r3, [r7, #4]
 800583e:	685b      	ldr	r3, [r3, #4]
 8005840:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8005844:	d010      	beq.n	8005868 <ADC_ConfigureBoostMode+0x78>
 8005846:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 800584a:	d873      	bhi.n	8005934 <ADC_ConfigureBoostMode+0x144>
 800584c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005850:	d002      	beq.n	8005858 <ADC_ConfigureBoostMode+0x68>
 8005852:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8005856:	d16d      	bne.n	8005934 <ADC_ConfigureBoostMode+0x144>
    {
      case ADC_CLOCK_SYNC_PCLK_DIV1:
      case ADC_CLOCK_SYNC_PCLK_DIV2:
        freq /= (hadc->Init.ClockPrescaler >> ADC_CCR_CKMODE_Pos);
 8005858:	687b      	ldr	r3, [r7, #4]
 800585a:	685b      	ldr	r3, [r3, #4]
 800585c:	0c1b      	lsrs	r3, r3, #16
 800585e:	68fa      	ldr	r2, [r7, #12]
 8005860:	fbb2 f3f3 	udiv	r3, r2, r3
 8005864:	60fb      	str	r3, [r7, #12]
        break;
 8005866:	e068      	b.n	800593a <ADC_ConfigureBoostMode+0x14a>
      case ADC_CLOCK_SYNC_PCLK_DIV4:
        freq /= 4UL;
 8005868:	68fb      	ldr	r3, [r7, #12]
 800586a:	089b      	lsrs	r3, r3, #2
 800586c:	60fb      	str	r3, [r7, #12]
        break;
 800586e:	e064      	b.n	800593a <ADC_ConfigureBoostMode+0x14a>
        break;
    }
  }
  else
  {
    freq = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_ADC);
 8005870:	f44f 2000 	mov.w	r0, #524288	; 0x80000
 8005874:	f04f 0100 	mov.w	r1, #0
 8005878:	f006 fafc 	bl	800be74 <HAL_RCCEx_GetPeriphCLKFreq>
 800587c:	60f8      	str	r0, [r7, #12]
    switch (hadc->Init.ClockPrescaler)
 800587e:	687b      	ldr	r3, [r7, #4]
 8005880:	685b      	ldr	r3, [r3, #4]
 8005882:	f5b3 1f30 	cmp.w	r3, #2883584	; 0x2c0000
 8005886:	d051      	beq.n	800592c <ADC_ConfigureBoostMode+0x13c>
 8005888:	f5b3 1f30 	cmp.w	r3, #2883584	; 0x2c0000
 800588c:	d854      	bhi.n	8005938 <ADC_ConfigureBoostMode+0x148>
 800588e:	f5b3 1f20 	cmp.w	r3, #2621440	; 0x280000
 8005892:	d047      	beq.n	8005924 <ADC_ConfigureBoostMode+0x134>
 8005894:	f5b3 1f20 	cmp.w	r3, #2621440	; 0x280000
 8005898:	d84e      	bhi.n	8005938 <ADC_ConfigureBoostMode+0x148>
 800589a:	f5b3 1f10 	cmp.w	r3, #2359296	; 0x240000
 800589e:	d03d      	beq.n	800591c <ADC_ConfigureBoostMode+0x12c>
 80058a0:	f5b3 1f10 	cmp.w	r3, #2359296	; 0x240000
 80058a4:	d848      	bhi.n	8005938 <ADC_ConfigureBoostMode+0x148>
 80058a6:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80058aa:	d033      	beq.n	8005914 <ADC_ConfigureBoostMode+0x124>
 80058ac:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80058b0:	d842      	bhi.n	8005938 <ADC_ConfigureBoostMode+0x148>
 80058b2:	f5b3 1fe0 	cmp.w	r3, #1835008	; 0x1c0000
 80058b6:	d029      	beq.n	800590c <ADC_ConfigureBoostMode+0x11c>
 80058b8:	f5b3 1fe0 	cmp.w	r3, #1835008	; 0x1c0000
 80058bc:	d83c      	bhi.n	8005938 <ADC_ConfigureBoostMode+0x148>
 80058be:	f5b3 1fc0 	cmp.w	r3, #1572864	; 0x180000
 80058c2:	d01a      	beq.n	80058fa <ADC_ConfigureBoostMode+0x10a>
 80058c4:	f5b3 1fc0 	cmp.w	r3, #1572864	; 0x180000
 80058c8:	d836      	bhi.n	8005938 <ADC_ConfigureBoostMode+0x148>
 80058ca:	f5b3 1fa0 	cmp.w	r3, #1310720	; 0x140000
 80058ce:	d014      	beq.n	80058fa <ADC_ConfigureBoostMode+0x10a>
 80058d0:	f5b3 1fa0 	cmp.w	r3, #1310720	; 0x140000
 80058d4:	d830      	bhi.n	8005938 <ADC_ConfigureBoostMode+0x148>
 80058d6:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80058da:	d00e      	beq.n	80058fa <ADC_ConfigureBoostMode+0x10a>
 80058dc:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80058e0:	d82a      	bhi.n	8005938 <ADC_ConfigureBoostMode+0x148>
 80058e2:	f5b3 2f40 	cmp.w	r3, #786432	; 0xc0000
 80058e6:	d008      	beq.n	80058fa <ADC_ConfigureBoostMode+0x10a>
 80058e8:	f5b3 2f40 	cmp.w	r3, #786432	; 0xc0000
 80058ec:	d824      	bhi.n	8005938 <ADC_ConfigureBoostMode+0x148>
 80058ee:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 80058f2:	d002      	beq.n	80058fa <ADC_ConfigureBoostMode+0x10a>
 80058f4:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 80058f8:	d11e      	bne.n	8005938 <ADC_ConfigureBoostMode+0x148>
      case ADC_CLOCK_ASYNC_DIV4:
      case ADC_CLOCK_ASYNC_DIV6:
      case ADC_CLOCK_ASYNC_DIV8:
      case ADC_CLOCK_ASYNC_DIV10:
      case ADC_CLOCK_ASYNC_DIV12:
        freq /= ((hadc->Init.ClockPrescaler >> ADC_CCR_PRESC_Pos) << 1UL);
 80058fa:	687b      	ldr	r3, [r7, #4]
 80058fc:	685b      	ldr	r3, [r3, #4]
 80058fe:	0c9b      	lsrs	r3, r3, #18
 8005900:	005b      	lsls	r3, r3, #1
 8005902:	68fa      	ldr	r2, [r7, #12]
 8005904:	fbb2 f3f3 	udiv	r3, r2, r3
 8005908:	60fb      	str	r3, [r7, #12]
        break;
 800590a:	e016      	b.n	800593a <ADC_ConfigureBoostMode+0x14a>
      case ADC_CLOCK_ASYNC_DIV16:
        freq /= 16UL;
 800590c:	68fb      	ldr	r3, [r7, #12]
 800590e:	091b      	lsrs	r3, r3, #4
 8005910:	60fb      	str	r3, [r7, #12]
        break;
 8005912:	e012      	b.n	800593a <ADC_ConfigureBoostMode+0x14a>
      case ADC_CLOCK_ASYNC_DIV32:
        freq /= 32UL;
 8005914:	68fb      	ldr	r3, [r7, #12]
 8005916:	095b      	lsrs	r3, r3, #5
 8005918:	60fb      	str	r3, [r7, #12]
        break;
 800591a:	e00e      	b.n	800593a <ADC_ConfigureBoostMode+0x14a>
      case ADC_CLOCK_ASYNC_DIV64:
        freq /= 64UL;
 800591c:	68fb      	ldr	r3, [r7, #12]
 800591e:	099b      	lsrs	r3, r3, #6
 8005920:	60fb      	str	r3, [r7, #12]
        break;
 8005922:	e00a      	b.n	800593a <ADC_ConfigureBoostMode+0x14a>
      case ADC_CLOCK_ASYNC_DIV128:
        freq /= 128UL;
 8005924:	68fb      	ldr	r3, [r7, #12]
 8005926:	09db      	lsrs	r3, r3, #7
 8005928:	60fb      	str	r3, [r7, #12]
        break;
 800592a:	e006      	b.n	800593a <ADC_ConfigureBoostMode+0x14a>
      case ADC_CLOCK_ASYNC_DIV256:
        freq /= 256UL;
 800592c:	68fb      	ldr	r3, [r7, #12]
 800592e:	0a1b      	lsrs	r3, r3, #8
 8005930:	60fb      	str	r3, [r7, #12]
        break;
 8005932:	e002      	b.n	800593a <ADC_ConfigureBoostMode+0x14a>
        break;
 8005934:	bf00      	nop
 8005936:	e000      	b.n	800593a <ADC_ConfigureBoostMode+0x14a>
      default:
        break;
 8005938:	bf00      	nop
  else /* if(freq > 25000000UL) */
  {
    MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1 | ADC_CR_BOOST_0);
  }
#else
  if (HAL_GetREVID() <= REV_ID_Y) /* STM32H7 silicon Rev.Y */
 800593a:	f7fe fb91 	bl	8004060 <HAL_GetREVID>
 800593e:	4603      	mov	r3, r0
 8005940:	f241 0203 	movw	r2, #4099	; 0x1003
 8005944:	4293      	cmp	r3, r2
 8005946:	d815      	bhi.n	8005974 <ADC_ConfigureBoostMode+0x184>
  {
    if (freq > 20000000UL)
 8005948:	68fb      	ldr	r3, [r7, #12]
 800594a:	4a2b      	ldr	r2, [pc, #172]	; (80059f8 <ADC_ConfigureBoostMode+0x208>)
 800594c:	4293      	cmp	r3, r2
 800594e:	d908      	bls.n	8005962 <ADC_ConfigureBoostMode+0x172>
    {
      SET_BIT(hadc->Instance->CR, ADC_CR_BOOST_0);
 8005950:	687b      	ldr	r3, [r7, #4]
 8005952:	681b      	ldr	r3, [r3, #0]
 8005954:	689a      	ldr	r2, [r3, #8]
 8005956:	687b      	ldr	r3, [r7, #4]
 8005958:	681b      	ldr	r3, [r3, #0]
 800595a:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800595e:	609a      	str	r2, [r3, #8]
    {
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1 | ADC_CR_BOOST_0);
    }
  }
#endif /* ADC_VER_V5_3 */
}
 8005960:	e03e      	b.n	80059e0 <ADC_ConfigureBoostMode+0x1f0>
      CLEAR_BIT(hadc->Instance->CR, ADC_CR_BOOST_0);
 8005962:	687b      	ldr	r3, [r7, #4]
 8005964:	681b      	ldr	r3, [r3, #0]
 8005966:	689a      	ldr	r2, [r3, #8]
 8005968:	687b      	ldr	r3, [r7, #4]
 800596a:	681b      	ldr	r3, [r3, #0]
 800596c:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8005970:	609a      	str	r2, [r3, #8]
}
 8005972:	e035      	b.n	80059e0 <ADC_ConfigureBoostMode+0x1f0>
    freq /= 2U; /* divider by 2 for Rev.V */
 8005974:	68fb      	ldr	r3, [r7, #12]
 8005976:	085b      	lsrs	r3, r3, #1
 8005978:	60fb      	str	r3, [r7, #12]
    if (freq <= 6250000UL)
 800597a:	68fb      	ldr	r3, [r7, #12]
 800597c:	4a1f      	ldr	r2, [pc, #124]	; (80059fc <ADC_ConfigureBoostMode+0x20c>)
 800597e:	4293      	cmp	r3, r2
 8005980:	d808      	bhi.n	8005994 <ADC_ConfigureBoostMode+0x1a4>
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, 0UL);
 8005982:	687b      	ldr	r3, [r7, #4]
 8005984:	681b      	ldr	r3, [r3, #0]
 8005986:	689a      	ldr	r2, [r3, #8]
 8005988:	687b      	ldr	r3, [r7, #4]
 800598a:	681b      	ldr	r3, [r3, #0]
 800598c:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 8005990:	609a      	str	r2, [r3, #8]
}
 8005992:	e025      	b.n	80059e0 <ADC_ConfigureBoostMode+0x1f0>
    else if (freq <= 12500000UL)
 8005994:	68fb      	ldr	r3, [r7, #12]
 8005996:	4a1a      	ldr	r2, [pc, #104]	; (8005a00 <ADC_ConfigureBoostMode+0x210>)
 8005998:	4293      	cmp	r3, r2
 800599a:	d80a      	bhi.n	80059b2 <ADC_ConfigureBoostMode+0x1c2>
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_0);
 800599c:	687b      	ldr	r3, [r7, #4]
 800599e:	681b      	ldr	r3, [r3, #0]
 80059a0:	689b      	ldr	r3, [r3, #8]
 80059a2:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80059a6:	687b      	ldr	r3, [r7, #4]
 80059a8:	681b      	ldr	r3, [r3, #0]
 80059aa:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80059ae:	609a      	str	r2, [r3, #8]
}
 80059b0:	e016      	b.n	80059e0 <ADC_ConfigureBoostMode+0x1f0>
    else if (freq <= 25000000UL)
 80059b2:	68fb      	ldr	r3, [r7, #12]
 80059b4:	4a13      	ldr	r2, [pc, #76]	; (8005a04 <ADC_ConfigureBoostMode+0x214>)
 80059b6:	4293      	cmp	r3, r2
 80059b8:	d80a      	bhi.n	80059d0 <ADC_ConfigureBoostMode+0x1e0>
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1);
 80059ba:	687b      	ldr	r3, [r7, #4]
 80059bc:	681b      	ldr	r3, [r3, #0]
 80059be:	689b      	ldr	r3, [r3, #8]
 80059c0:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80059c4:	687b      	ldr	r3, [r7, #4]
 80059c6:	681b      	ldr	r3, [r3, #0]
 80059c8:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80059cc:	609a      	str	r2, [r3, #8]
}
 80059ce:	e007      	b.n	80059e0 <ADC_ConfigureBoostMode+0x1f0>
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1 | ADC_CR_BOOST_0);
 80059d0:	687b      	ldr	r3, [r7, #4]
 80059d2:	681b      	ldr	r3, [r3, #0]
 80059d4:	689a      	ldr	r2, [r3, #8]
 80059d6:	687b      	ldr	r3, [r7, #4]
 80059d8:	681b      	ldr	r3, [r3, #0]
 80059da:	f442 7240 	orr.w	r2, r2, #768	; 0x300
 80059de:	609a      	str	r2, [r3, #8]
}
 80059e0:	bf00      	nop
 80059e2:	3710      	adds	r7, #16
 80059e4:	46bd      	mov	sp, r7
 80059e6:	bd80      	pop	{r7, pc}
 80059e8:	40022000 	.word	0x40022000
 80059ec:	40022100 	.word	0x40022100
 80059f0:	40022300 	.word	0x40022300
 80059f4:	58026300 	.word	0x58026300
 80059f8:	01312d00 	.word	0x01312d00
 80059fc:	005f5e10 	.word	0x005f5e10
 8005a00:	00bebc20 	.word	0x00bebc20
 8005a04:	017d7840 	.word	0x017d7840

08005a08 <LL_ADC_StartCalibration>:
{
 8005a08:	b480      	push	{r7}
 8005a0a:	b085      	sub	sp, #20
 8005a0c:	af00      	add	r7, sp, #0
 8005a0e:	60f8      	str	r0, [r7, #12]
 8005a10:	60b9      	str	r1, [r7, #8]
 8005a12:	607a      	str	r2, [r7, #4]
  MODIFY_REG(ADCx->CR,
 8005a14:	68fb      	ldr	r3, [r7, #12]
 8005a16:	689a      	ldr	r2, [r3, #8]
 8005a18:	4b09      	ldr	r3, [pc, #36]	; (8005a40 <LL_ADC_StartCalibration+0x38>)
 8005a1a:	4013      	ands	r3, r2
 8005a1c:	68ba      	ldr	r2, [r7, #8]
 8005a1e:	f402 3180 	and.w	r1, r2, #65536	; 0x10000
 8005a22:	687a      	ldr	r2, [r7, #4]
 8005a24:	f002 4280 	and.w	r2, r2, #1073741824	; 0x40000000
 8005a28:	430a      	orrs	r2, r1
 8005a2a:	4313      	orrs	r3, r2
 8005a2c:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 8005a30:	68fb      	ldr	r3, [r7, #12]
 8005a32:	609a      	str	r2, [r3, #8]
}
 8005a34:	bf00      	nop
 8005a36:	3714      	adds	r7, #20
 8005a38:	46bd      	mov	sp, r7
 8005a3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a3e:	4770      	bx	lr
 8005a40:	3ffeffc0 	.word	0x3ffeffc0

08005a44 <LL_ADC_IsCalibrationOnGoing>:
{
 8005a44:	b480      	push	{r7}
 8005a46:	b083      	sub	sp, #12
 8005a48:	af00      	add	r7, sp, #0
 8005a4a:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADCAL) == (ADC_CR_ADCAL)) ? 1UL : 0UL);
 8005a4c:	687b      	ldr	r3, [r7, #4]
 8005a4e:	689b      	ldr	r3, [r3, #8]
 8005a50:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8005a54:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8005a58:	d101      	bne.n	8005a5e <LL_ADC_IsCalibrationOnGoing+0x1a>
 8005a5a:	2301      	movs	r3, #1
 8005a5c:	e000      	b.n	8005a60 <LL_ADC_IsCalibrationOnGoing+0x1c>
 8005a5e:	2300      	movs	r3, #0
}
 8005a60:	4618      	mov	r0, r3
 8005a62:	370c      	adds	r7, #12
 8005a64:	46bd      	mov	sp, r7
 8005a66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a6a:	4770      	bx	lr

08005a6c <HAL_ADCEx_Calibration_Start>:
  *           @arg @ref ADC_SINGLE_ENDED       Channel in mode input single ended
  *           @arg @ref ADC_DIFFERENTIAL_ENDED Channel in mode input differential ended
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_Calibration_Start(ADC_HandleTypeDef *hadc, uint32_t CalibrationMode, uint32_t SingleDiff)
{
 8005a6c:	b580      	push	{r7, lr}
 8005a6e:	b086      	sub	sp, #24
 8005a70:	af00      	add	r7, sp, #0
 8005a72:	60f8      	str	r0, [r7, #12]
 8005a74:	60b9      	str	r1, [r7, #8]
 8005a76:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status;
  __IO uint32_t wait_loop_index = 0UL;
 8005a78:	2300      	movs	r3, #0
 8005a7a:	613b      	str	r3, [r7, #16]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_SINGLE_DIFFERENTIAL(SingleDiff));

  /* Process locked */
  __HAL_LOCK(hadc);
 8005a7c:	68fb      	ldr	r3, [r7, #12]
 8005a7e:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8005a82:	2b01      	cmp	r3, #1
 8005a84:	d101      	bne.n	8005a8a <HAL_ADCEx_Calibration_Start+0x1e>
 8005a86:	2302      	movs	r3, #2
 8005a88:	e04c      	b.n	8005b24 <HAL_ADCEx_Calibration_Start+0xb8>
 8005a8a:	68fb      	ldr	r3, [r7, #12]
 8005a8c:	2201      	movs	r2, #1
 8005a8e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Calibration prerequisite: ADC must be disabled. */

  /* Disable the ADC (if not already disabled) */
  tmp_hal_status = ADC_Disable(hadc);
 8005a92:	68f8      	ldr	r0, [r7, #12]
 8005a94:	f7ff fe4c 	bl	8005730 <ADC_Disable>
 8005a98:	4603      	mov	r3, r0
 8005a9a:	75fb      	strb	r3, [r7, #23]

  /* Check if ADC is effectively disabled */
  if (tmp_hal_status == HAL_OK)
 8005a9c:	7dfb      	ldrb	r3, [r7, #23]
 8005a9e:	2b00      	cmp	r3, #0
 8005aa0:	d135      	bne.n	8005b0e <HAL_ADCEx_Calibration_Start+0xa2>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8005aa2:	68fb      	ldr	r3, [r7, #12]
 8005aa4:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8005aa6:	4b21      	ldr	r3, [pc, #132]	; (8005b2c <HAL_ADCEx_Calibration_Start+0xc0>)
 8005aa8:	4013      	ands	r3, r2
 8005aaa:	f043 0202 	orr.w	r2, r3, #2
 8005aae:	68fb      	ldr	r3, [r7, #12]
 8005ab0:	655a      	str	r2, [r3, #84]	; 0x54
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);

    /* Start ADC calibration in mode single-ended or differential */
    LL_ADC_StartCalibration(hadc->Instance, CalibrationMode, SingleDiff);
 8005ab2:	68fb      	ldr	r3, [r7, #12]
 8005ab4:	681b      	ldr	r3, [r3, #0]
 8005ab6:	687a      	ldr	r2, [r7, #4]
 8005ab8:	68b9      	ldr	r1, [r7, #8]
 8005aba:	4618      	mov	r0, r3
 8005abc:	f7ff ffa4 	bl	8005a08 <LL_ADC_StartCalibration>

    /* Wait for calibration completion */
    while (LL_ADC_IsCalibrationOnGoing(hadc->Instance) != 0UL)
 8005ac0:	e014      	b.n	8005aec <HAL_ADCEx_Calibration_Start+0x80>
    {
      wait_loop_index++;
 8005ac2:	693b      	ldr	r3, [r7, #16]
 8005ac4:	3301      	adds	r3, #1
 8005ac6:	613b      	str	r3, [r7, #16]
      if (wait_loop_index >= ADC_CALIBRATION_TIMEOUT)
 8005ac8:	693b      	ldr	r3, [r7, #16]
 8005aca:	4a19      	ldr	r2, [pc, #100]	; (8005b30 <HAL_ADCEx_Calibration_Start+0xc4>)
 8005acc:	4293      	cmp	r3, r2
 8005ace:	d30d      	bcc.n	8005aec <HAL_ADCEx_Calibration_Start+0x80>
      {
        /* Update ADC state machine to error */
        ADC_STATE_CLR_SET(hadc->State,
 8005ad0:	68fb      	ldr	r3, [r7, #12]
 8005ad2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005ad4:	f023 0312 	bic.w	r3, r3, #18
 8005ad8:	f043 0210 	orr.w	r2, r3, #16
 8005adc:	68fb      	ldr	r3, [r7, #12]
 8005ade:	655a      	str	r2, [r3, #84]	; 0x54
                          HAL_ADC_STATE_BUSY_INTERNAL,
                          HAL_ADC_STATE_ERROR_INTERNAL);

        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 8005ae0:	68fb      	ldr	r3, [r7, #12]
 8005ae2:	2200      	movs	r2, #0
 8005ae4:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_ERROR;
 8005ae8:	2301      	movs	r3, #1
 8005aea:	e01b      	b.n	8005b24 <HAL_ADCEx_Calibration_Start+0xb8>
    while (LL_ADC_IsCalibrationOnGoing(hadc->Instance) != 0UL)
 8005aec:	68fb      	ldr	r3, [r7, #12]
 8005aee:	681b      	ldr	r3, [r3, #0]
 8005af0:	4618      	mov	r0, r3
 8005af2:	f7ff ffa7 	bl	8005a44 <LL_ADC_IsCalibrationOnGoing>
 8005af6:	4603      	mov	r3, r0
 8005af8:	2b00      	cmp	r3, #0
 8005afa:	d1e2      	bne.n	8005ac2 <HAL_ADCEx_Calibration_Start+0x56>
      }
    }

    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8005afc:	68fb      	ldr	r3, [r7, #12]
 8005afe:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005b00:	f023 0303 	bic.w	r3, r3, #3
 8005b04:	f043 0201 	orr.w	r2, r3, #1
 8005b08:	68fb      	ldr	r3, [r7, #12]
 8005b0a:	655a      	str	r2, [r3, #84]	; 0x54
 8005b0c:	e005      	b.n	8005b1a <HAL_ADCEx_Calibration_Start+0xae>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8005b0e:	68fb      	ldr	r3, [r7, #12]
 8005b10:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005b12:	f043 0210 	orr.w	r2, r3, #16
 8005b16:	68fb      	ldr	r3, [r7, #12]
 8005b18:	655a      	str	r2, [r3, #84]	; 0x54
    /* Note: No need to update variable "tmp_hal_status" here: already set    */
    /*       to state "HAL_ERROR" by function disabling the ADC.              */
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8005b1a:	68fb      	ldr	r3, [r7, #12]
 8005b1c:	2200      	movs	r2, #0
 8005b1e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Return function status */
  return tmp_hal_status;
 8005b22:	7dfb      	ldrb	r3, [r7, #23]
}
 8005b24:	4618      	mov	r0, r3
 8005b26:	3718      	adds	r7, #24
 8005b28:	46bd      	mov	sp, r7
 8005b2a:	bd80      	pop	{r7, pc}
 8005b2c:	ffffeefd 	.word	0xffffeefd
 8005b30:	25c3f800 	.word	0x25c3f800

08005b34 <HAL_ADCEx_InjectedConvCpltCallback>:
  * @brief  Injected conversion complete callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_InjectedConvCpltCallback(ADC_HandleTypeDef *hadc)
{
 8005b34:	b480      	push	{r7}
 8005b36:	b083      	sub	sp, #12
 8005b38:	af00      	add	r7, sp, #0
 8005b3a:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_InjectedConvCpltCallback must be implemented in the user file.
  */
}
 8005b3c:	bf00      	nop
 8005b3e:	370c      	adds	r7, #12
 8005b40:	46bd      	mov	sp, r7
 8005b42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b46:	4770      	bx	lr

08005b48 <HAL_ADCEx_InjectedQueueOverflowCallback>:
            contexts).
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_InjectedQueueOverflowCallback(ADC_HandleTypeDef *hadc)
{
 8005b48:	b480      	push	{r7}
 8005b4a:	b083      	sub	sp, #12
 8005b4c:	af00      	add	r7, sp, #0
 8005b4e:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_InjectedQueueOverflowCallback must be implemented in the user file.
  */
}
 8005b50:	bf00      	nop
 8005b52:	370c      	adds	r7, #12
 8005b54:	46bd      	mov	sp, r7
 8005b56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b5a:	4770      	bx	lr

08005b5c <HAL_ADCEx_LevelOutOfWindow2Callback>:
  * @brief  Analog watchdog 2 callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_LevelOutOfWindow2Callback(ADC_HandleTypeDef *hadc)
{
 8005b5c:	b480      	push	{r7}
 8005b5e:	b083      	sub	sp, #12
 8005b60:	af00      	add	r7, sp, #0
 8005b62:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_LevelOutOfWindow2Callback must be implemented in the user file.
  */
}
 8005b64:	bf00      	nop
 8005b66:	370c      	adds	r7, #12
 8005b68:	46bd      	mov	sp, r7
 8005b6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b6e:	4770      	bx	lr

08005b70 <HAL_ADCEx_LevelOutOfWindow3Callback>:
  * @brief  Analog watchdog 3 callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_LevelOutOfWindow3Callback(ADC_HandleTypeDef *hadc)
{
 8005b70:	b480      	push	{r7}
 8005b72:	b083      	sub	sp, #12
 8005b74:	af00      	add	r7, sp, #0
 8005b76:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_LevelOutOfWindow3Callback must be implemented in the user file.
  */
}
 8005b78:	bf00      	nop
 8005b7a:	370c      	adds	r7, #12
 8005b7c:	46bd      	mov	sp, r7
 8005b7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b82:	4770      	bx	lr

08005b84 <HAL_ADCEx_EndOfSamplingCallback>:
  * @brief  End Of Sampling callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_EndOfSamplingCallback(ADC_HandleTypeDef *hadc)
{
 8005b84:	b480      	push	{r7}
 8005b86:	b083      	sub	sp, #12
 8005b88:	af00      	add	r7, sp, #0
 8005b8a:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_EndOfSamplingCallback must be implemented in the user file.
  */
}
 8005b8c:	bf00      	nop
 8005b8e:	370c      	adds	r7, #12
 8005b90:	46bd      	mov	sp, r7
 8005b92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b96:	4770      	bx	lr

08005b98 <__NVIC_SetPriorityGrouping>:
{
 8005b98:	b480      	push	{r7}
 8005b9a:	b085      	sub	sp, #20
 8005b9c:	af00      	add	r7, sp, #0
 8005b9e:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8005ba0:	687b      	ldr	r3, [r7, #4]
 8005ba2:	f003 0307 	and.w	r3, r3, #7
 8005ba6:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8005ba8:	4b0b      	ldr	r3, [pc, #44]	; (8005bd8 <__NVIC_SetPriorityGrouping+0x40>)
 8005baa:	68db      	ldr	r3, [r3, #12]
 8005bac:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8005bae:	68ba      	ldr	r2, [r7, #8]
 8005bb0:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8005bb4:	4013      	ands	r3, r2
 8005bb6:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8005bb8:	68fb      	ldr	r3, [r7, #12]
 8005bba:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8005bbc:	68bb      	ldr	r3, [r7, #8]
 8005bbe:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8005bc0:	4b06      	ldr	r3, [pc, #24]	; (8005bdc <__NVIC_SetPriorityGrouping+0x44>)
 8005bc2:	4313      	orrs	r3, r2
 8005bc4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8005bc6:	4a04      	ldr	r2, [pc, #16]	; (8005bd8 <__NVIC_SetPriorityGrouping+0x40>)
 8005bc8:	68bb      	ldr	r3, [r7, #8]
 8005bca:	60d3      	str	r3, [r2, #12]
}
 8005bcc:	bf00      	nop
 8005bce:	3714      	adds	r7, #20
 8005bd0:	46bd      	mov	sp, r7
 8005bd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005bd6:	4770      	bx	lr
 8005bd8:	e000ed00 	.word	0xe000ed00
 8005bdc:	05fa0000 	.word	0x05fa0000

08005be0 <__NVIC_GetPriorityGrouping>:
{
 8005be0:	b480      	push	{r7}
 8005be2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8005be4:	4b04      	ldr	r3, [pc, #16]	; (8005bf8 <__NVIC_GetPriorityGrouping+0x18>)
 8005be6:	68db      	ldr	r3, [r3, #12]
 8005be8:	0a1b      	lsrs	r3, r3, #8
 8005bea:	f003 0307 	and.w	r3, r3, #7
}
 8005bee:	4618      	mov	r0, r3
 8005bf0:	46bd      	mov	sp, r7
 8005bf2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005bf6:	4770      	bx	lr
 8005bf8:	e000ed00 	.word	0xe000ed00

08005bfc <__NVIC_EnableIRQ>:
{
 8005bfc:	b480      	push	{r7}
 8005bfe:	b083      	sub	sp, #12
 8005c00:	af00      	add	r7, sp, #0
 8005c02:	4603      	mov	r3, r0
 8005c04:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8005c06:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8005c0a:	2b00      	cmp	r3, #0
 8005c0c:	db0b      	blt.n	8005c26 <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8005c0e:	88fb      	ldrh	r3, [r7, #6]
 8005c10:	f003 021f 	and.w	r2, r3, #31
 8005c14:	4907      	ldr	r1, [pc, #28]	; (8005c34 <__NVIC_EnableIRQ+0x38>)
 8005c16:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8005c1a:	095b      	lsrs	r3, r3, #5
 8005c1c:	2001      	movs	r0, #1
 8005c1e:	fa00 f202 	lsl.w	r2, r0, r2
 8005c22:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 8005c26:	bf00      	nop
 8005c28:	370c      	adds	r7, #12
 8005c2a:	46bd      	mov	sp, r7
 8005c2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c30:	4770      	bx	lr
 8005c32:	bf00      	nop
 8005c34:	e000e100 	.word	0xe000e100

08005c38 <__NVIC_SetPriority>:
{
 8005c38:	b480      	push	{r7}
 8005c3a:	b083      	sub	sp, #12
 8005c3c:	af00      	add	r7, sp, #0
 8005c3e:	4603      	mov	r3, r0
 8005c40:	6039      	str	r1, [r7, #0]
 8005c42:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8005c44:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8005c48:	2b00      	cmp	r3, #0
 8005c4a:	db0a      	blt.n	8005c62 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8005c4c:	683b      	ldr	r3, [r7, #0]
 8005c4e:	b2da      	uxtb	r2, r3
 8005c50:	490c      	ldr	r1, [pc, #48]	; (8005c84 <__NVIC_SetPriority+0x4c>)
 8005c52:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8005c56:	0112      	lsls	r2, r2, #4
 8005c58:	b2d2      	uxtb	r2, r2
 8005c5a:	440b      	add	r3, r1
 8005c5c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 8005c60:	e00a      	b.n	8005c78 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8005c62:	683b      	ldr	r3, [r7, #0]
 8005c64:	b2da      	uxtb	r2, r3
 8005c66:	4908      	ldr	r1, [pc, #32]	; (8005c88 <__NVIC_SetPriority+0x50>)
 8005c68:	88fb      	ldrh	r3, [r7, #6]
 8005c6a:	f003 030f 	and.w	r3, r3, #15
 8005c6e:	3b04      	subs	r3, #4
 8005c70:	0112      	lsls	r2, r2, #4
 8005c72:	b2d2      	uxtb	r2, r2
 8005c74:	440b      	add	r3, r1
 8005c76:	761a      	strb	r2, [r3, #24]
}
 8005c78:	bf00      	nop
 8005c7a:	370c      	adds	r7, #12
 8005c7c:	46bd      	mov	sp, r7
 8005c7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c82:	4770      	bx	lr
 8005c84:	e000e100 	.word	0xe000e100
 8005c88:	e000ed00 	.word	0xe000ed00

08005c8c <NVIC_EncodePriority>:
{
 8005c8c:	b480      	push	{r7}
 8005c8e:	b089      	sub	sp, #36	; 0x24
 8005c90:	af00      	add	r7, sp, #0
 8005c92:	60f8      	str	r0, [r7, #12]
 8005c94:	60b9      	str	r1, [r7, #8]
 8005c96:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8005c98:	68fb      	ldr	r3, [r7, #12]
 8005c9a:	f003 0307 	and.w	r3, r3, #7
 8005c9e:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8005ca0:	69fb      	ldr	r3, [r7, #28]
 8005ca2:	f1c3 0307 	rsb	r3, r3, #7
 8005ca6:	2b04      	cmp	r3, #4
 8005ca8:	bf28      	it	cs
 8005caa:	2304      	movcs	r3, #4
 8005cac:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8005cae:	69fb      	ldr	r3, [r7, #28]
 8005cb0:	3304      	adds	r3, #4
 8005cb2:	2b06      	cmp	r3, #6
 8005cb4:	d902      	bls.n	8005cbc <NVIC_EncodePriority+0x30>
 8005cb6:	69fb      	ldr	r3, [r7, #28]
 8005cb8:	3b03      	subs	r3, #3
 8005cba:	e000      	b.n	8005cbe <NVIC_EncodePriority+0x32>
 8005cbc:	2300      	movs	r3, #0
 8005cbe:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8005cc0:	f04f 32ff 	mov.w	r2, #4294967295
 8005cc4:	69bb      	ldr	r3, [r7, #24]
 8005cc6:	fa02 f303 	lsl.w	r3, r2, r3
 8005cca:	43da      	mvns	r2, r3
 8005ccc:	68bb      	ldr	r3, [r7, #8]
 8005cce:	401a      	ands	r2, r3
 8005cd0:	697b      	ldr	r3, [r7, #20]
 8005cd2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8005cd4:	f04f 31ff 	mov.w	r1, #4294967295
 8005cd8:	697b      	ldr	r3, [r7, #20]
 8005cda:	fa01 f303 	lsl.w	r3, r1, r3
 8005cde:	43d9      	mvns	r1, r3
 8005ce0:	687b      	ldr	r3, [r7, #4]
 8005ce2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8005ce4:	4313      	orrs	r3, r2
}
 8005ce6:	4618      	mov	r0, r3
 8005ce8:	3724      	adds	r7, #36	; 0x24
 8005cea:	46bd      	mov	sp, r7
 8005cec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005cf0:	4770      	bx	lr
	...

08005cf4 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8005cf4:	b580      	push	{r7, lr}
 8005cf6:	b082      	sub	sp, #8
 8005cf8:	af00      	add	r7, sp, #0
 8005cfa:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8005cfc:	687b      	ldr	r3, [r7, #4]
 8005cfe:	3b01      	subs	r3, #1
 8005d00:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8005d04:	d301      	bcc.n	8005d0a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8005d06:	2301      	movs	r3, #1
 8005d08:	e00f      	b.n	8005d2a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8005d0a:	4a0a      	ldr	r2, [pc, #40]	; (8005d34 <SysTick_Config+0x40>)
 8005d0c:	687b      	ldr	r3, [r7, #4]
 8005d0e:	3b01      	subs	r3, #1
 8005d10:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8005d12:	210f      	movs	r1, #15
 8005d14:	f04f 30ff 	mov.w	r0, #4294967295
 8005d18:	f7ff ff8e 	bl	8005c38 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8005d1c:	4b05      	ldr	r3, [pc, #20]	; (8005d34 <SysTick_Config+0x40>)
 8005d1e:	2200      	movs	r2, #0
 8005d20:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8005d22:	4b04      	ldr	r3, [pc, #16]	; (8005d34 <SysTick_Config+0x40>)
 8005d24:	2207      	movs	r2, #7
 8005d26:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8005d28:	2300      	movs	r3, #0
}
 8005d2a:	4618      	mov	r0, r3
 8005d2c:	3708      	adds	r7, #8
 8005d2e:	46bd      	mov	sp, r7
 8005d30:	bd80      	pop	{r7, pc}
 8005d32:	bf00      	nop
 8005d34:	e000e010 	.word	0xe000e010

08005d38 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8005d38:	b580      	push	{r7, lr}
 8005d3a:	b082      	sub	sp, #8
 8005d3c:	af00      	add	r7, sp, #0
 8005d3e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8005d40:	6878      	ldr	r0, [r7, #4]
 8005d42:	f7ff ff29 	bl	8005b98 <__NVIC_SetPriorityGrouping>
}
 8005d46:	bf00      	nop
 8005d48:	3708      	adds	r7, #8
 8005d4a:	46bd      	mov	sp, r7
 8005d4c:	bd80      	pop	{r7, pc}

08005d4e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8005d4e:	b580      	push	{r7, lr}
 8005d50:	b086      	sub	sp, #24
 8005d52:	af00      	add	r7, sp, #0
 8005d54:	4603      	mov	r3, r0
 8005d56:	60b9      	str	r1, [r7, #8]
 8005d58:	607a      	str	r2, [r7, #4]
 8005d5a:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8005d5c:	f7ff ff40 	bl	8005be0 <__NVIC_GetPriorityGrouping>
 8005d60:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8005d62:	687a      	ldr	r2, [r7, #4]
 8005d64:	68b9      	ldr	r1, [r7, #8]
 8005d66:	6978      	ldr	r0, [r7, #20]
 8005d68:	f7ff ff90 	bl	8005c8c <NVIC_EncodePriority>
 8005d6c:	4602      	mov	r2, r0
 8005d6e:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8005d72:	4611      	mov	r1, r2
 8005d74:	4618      	mov	r0, r3
 8005d76:	f7ff ff5f 	bl	8005c38 <__NVIC_SetPriority>
}
 8005d7a:	bf00      	nop
 8005d7c:	3718      	adds	r7, #24
 8005d7e:	46bd      	mov	sp, r7
 8005d80:	bd80      	pop	{r7, pc}

08005d82 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32h7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8005d82:	b580      	push	{r7, lr}
 8005d84:	b082      	sub	sp, #8
 8005d86:	af00      	add	r7, sp, #0
 8005d88:	4603      	mov	r3, r0
 8005d8a:	80fb      	strh	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8005d8c:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8005d90:	4618      	mov	r0, r3
 8005d92:	f7ff ff33 	bl	8005bfc <__NVIC_EnableIRQ>
}
 8005d96:	bf00      	nop
 8005d98:	3708      	adds	r7, #8
 8005d9a:	46bd      	mov	sp, r7
 8005d9c:	bd80      	pop	{r7, pc}

08005d9e <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status   - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8005d9e:	b580      	push	{r7, lr}
 8005da0:	b082      	sub	sp, #8
 8005da2:	af00      	add	r7, sp, #0
 8005da4:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8005da6:	6878      	ldr	r0, [r7, #4]
 8005da8:	f7ff ffa4 	bl	8005cf4 <SysTick_Config>
 8005dac:	4603      	mov	r3, r0
}
 8005dae:	4618      	mov	r0, r3
 8005db0:	3708      	adds	r7, #8
 8005db2:	46bd      	mov	sp, r7
 8005db4:	bd80      	pop	{r7, pc}
	...

08005db8 <HAL_MPU_Disable>:
/**
  * @brief  Disables the MPU
  * @retval None
  */
void HAL_MPU_Disable(void)
{
 8005db8:	b480      	push	{r7}
 8005dba:	af00      	add	r7, sp, #0
  __ASM volatile ("dmb 0xF":::"memory");
 8005dbc:	f3bf 8f5f 	dmb	sy
}
 8005dc0:	bf00      	nop
  /* Make sure outstanding transfers are done */
  __DMB();

  /* Disable fault exceptions */
  SCB->SHCSR &= ~SCB_SHCSR_MEMFAULTENA_Msk;
 8005dc2:	4b07      	ldr	r3, [pc, #28]	; (8005de0 <HAL_MPU_Disable+0x28>)
 8005dc4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005dc6:	4a06      	ldr	r2, [pc, #24]	; (8005de0 <HAL_MPU_Disable+0x28>)
 8005dc8:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8005dcc:	6253      	str	r3, [r2, #36]	; 0x24

  /* Disable the MPU and clear the control register*/
  MPU->CTRL = 0;
 8005dce:	4b05      	ldr	r3, [pc, #20]	; (8005de4 <HAL_MPU_Disable+0x2c>)
 8005dd0:	2200      	movs	r2, #0
 8005dd2:	605a      	str	r2, [r3, #4]
}
 8005dd4:	bf00      	nop
 8005dd6:	46bd      	mov	sp, r7
 8005dd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ddc:	4770      	bx	lr
 8005dde:	bf00      	nop
 8005de0:	e000ed00 	.word	0xe000ed00
 8005de4:	e000ed90 	.word	0xe000ed90

08005de8 <HAL_MPU_Enable>:
  *            @arg MPU_PRIVILEGED_DEFAULT
  *            @arg MPU_HFNMI_PRIVDEF
  * @retval None
  */
void HAL_MPU_Enable(uint32_t MPU_Control)
{
 8005de8:	b480      	push	{r7}
 8005dea:	b083      	sub	sp, #12
 8005dec:	af00      	add	r7, sp, #0
 8005dee:	6078      	str	r0, [r7, #4]
  /* Enable the MPU */
  MPU->CTRL = MPU_Control | MPU_CTRL_ENABLE_Msk;
 8005df0:	4a0b      	ldr	r2, [pc, #44]	; (8005e20 <HAL_MPU_Enable+0x38>)
 8005df2:	687b      	ldr	r3, [r7, #4]
 8005df4:	f043 0301 	orr.w	r3, r3, #1
 8005df8:	6053      	str	r3, [r2, #4]

  /* Enable fault exceptions */
  SCB->SHCSR |= SCB_SHCSR_MEMFAULTENA_Msk;
 8005dfa:	4b0a      	ldr	r3, [pc, #40]	; (8005e24 <HAL_MPU_Enable+0x3c>)
 8005dfc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005dfe:	4a09      	ldr	r2, [pc, #36]	; (8005e24 <HAL_MPU_Enable+0x3c>)
 8005e00:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005e04:	6253      	str	r3, [r2, #36]	; 0x24
  __ASM volatile ("dsb 0xF":::"memory");
 8005e06:	f3bf 8f4f 	dsb	sy
}
 8005e0a:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8005e0c:	f3bf 8f6f 	isb	sy
}
 8005e10:	bf00      	nop

  /* Ensure MPU setting take effects */
  __DSB();
  __ISB();
}
 8005e12:	bf00      	nop
 8005e14:	370c      	adds	r7, #12
 8005e16:	46bd      	mov	sp, r7
 8005e18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e1c:	4770      	bx	lr
 8005e1e:	bf00      	nop
 8005e20:	e000ed90 	.word	0xe000ed90
 8005e24:	e000ed00 	.word	0xe000ed00

08005e28 <HAL_MPU_ConfigRegion>:
  * @param  MPU_Init Pointer to a MPU_Region_InitTypeDef structure that contains
  *                  the initialization and configuration information.
  * @retval None
  */
void HAL_MPU_ConfigRegion(MPU_Region_InitTypeDef *MPU_Init)
{
 8005e28:	b480      	push	{r7}
 8005e2a:	b083      	sub	sp, #12
 8005e2c:	af00      	add	r7, sp, #0
 8005e2e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_MPU_REGION_NUMBER(MPU_Init->Number));
  assert_param(IS_MPU_REGION_ENABLE(MPU_Init->Enable));

  /* Set the Region number */
  MPU->RNR = MPU_Init->Number;
 8005e30:	687b      	ldr	r3, [r7, #4]
 8005e32:	785a      	ldrb	r2, [r3, #1]
 8005e34:	4b1d      	ldr	r3, [pc, #116]	; (8005eac <HAL_MPU_ConfigRegion+0x84>)
 8005e36:	609a      	str	r2, [r3, #8]

  if ((MPU_Init->Enable) != 0UL)
 8005e38:	687b      	ldr	r3, [r7, #4]
 8005e3a:	781b      	ldrb	r3, [r3, #0]
 8005e3c:	2b00      	cmp	r3, #0
 8005e3e:	d029      	beq.n	8005e94 <HAL_MPU_ConfigRegion+0x6c>
    assert_param(IS_MPU_ACCESS_CACHEABLE(MPU_Init->IsCacheable));
    assert_param(IS_MPU_ACCESS_BUFFERABLE(MPU_Init->IsBufferable));
    assert_param(IS_MPU_SUB_REGION_DISABLE(MPU_Init->SubRegionDisable));
    assert_param(IS_MPU_REGION_SIZE(MPU_Init->Size));

    MPU->RBAR = MPU_Init->BaseAddress;
 8005e40:	4a1a      	ldr	r2, [pc, #104]	; (8005eac <HAL_MPU_ConfigRegion+0x84>)
 8005e42:	687b      	ldr	r3, [r7, #4]
 8005e44:	685b      	ldr	r3, [r3, #4]
 8005e46:	60d3      	str	r3, [r2, #12]
    MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 8005e48:	687b      	ldr	r3, [r7, #4]
 8005e4a:	7b1b      	ldrb	r3, [r3, #12]
 8005e4c:	071a      	lsls	r2, r3, #28
                ((uint32_t)MPU_Init->AccessPermission        << MPU_RASR_AP_Pos)   |
 8005e4e:	687b      	ldr	r3, [r7, #4]
 8005e50:	7adb      	ldrb	r3, [r3, #11]
 8005e52:	061b      	lsls	r3, r3, #24
    MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 8005e54:	431a      	orrs	r2, r3
                ((uint32_t)MPU_Init->TypeExtField            << MPU_RASR_TEX_Pos)  |
 8005e56:	687b      	ldr	r3, [r7, #4]
 8005e58:	7a9b      	ldrb	r3, [r3, #10]
 8005e5a:	04db      	lsls	r3, r3, #19
                ((uint32_t)MPU_Init->AccessPermission        << MPU_RASR_AP_Pos)   |
 8005e5c:	431a      	orrs	r2, r3
                ((uint32_t)MPU_Init->IsShareable             << MPU_RASR_S_Pos)    |
 8005e5e:	687b      	ldr	r3, [r7, #4]
 8005e60:	7b5b      	ldrb	r3, [r3, #13]
 8005e62:	049b      	lsls	r3, r3, #18
                ((uint32_t)MPU_Init->TypeExtField            << MPU_RASR_TEX_Pos)  |
 8005e64:	431a      	orrs	r2, r3
                ((uint32_t)MPU_Init->IsCacheable             << MPU_RASR_C_Pos)    |
 8005e66:	687b      	ldr	r3, [r7, #4]
 8005e68:	7b9b      	ldrb	r3, [r3, #14]
 8005e6a:	045b      	lsls	r3, r3, #17
                ((uint32_t)MPU_Init->IsShareable             << MPU_RASR_S_Pos)    |
 8005e6c:	431a      	orrs	r2, r3
                ((uint32_t)MPU_Init->IsBufferable            << MPU_RASR_B_Pos)    |
 8005e6e:	687b      	ldr	r3, [r7, #4]
 8005e70:	7bdb      	ldrb	r3, [r3, #15]
 8005e72:	041b      	lsls	r3, r3, #16
                ((uint32_t)MPU_Init->IsCacheable             << MPU_RASR_C_Pos)    |
 8005e74:	431a      	orrs	r2, r3
                ((uint32_t)MPU_Init->SubRegionDisable        << MPU_RASR_SRD_Pos)  |
 8005e76:	687b      	ldr	r3, [r7, #4]
 8005e78:	7a5b      	ldrb	r3, [r3, #9]
 8005e7a:	021b      	lsls	r3, r3, #8
                ((uint32_t)MPU_Init->IsBufferable            << MPU_RASR_B_Pos)    |
 8005e7c:	431a      	orrs	r2, r3
                ((uint32_t)MPU_Init->Size                    << MPU_RASR_SIZE_Pos) |
 8005e7e:	687b      	ldr	r3, [r7, #4]
 8005e80:	7a1b      	ldrb	r3, [r3, #8]
 8005e82:	005b      	lsls	r3, r3, #1
                ((uint32_t)MPU_Init->SubRegionDisable        << MPU_RASR_SRD_Pos)  |
 8005e84:	4313      	orrs	r3, r2
                ((uint32_t)MPU_Init->Enable                  << MPU_RASR_ENABLE_Pos);
 8005e86:	687a      	ldr	r2, [r7, #4]
 8005e88:	7812      	ldrb	r2, [r2, #0]
 8005e8a:	4611      	mov	r1, r2
    MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 8005e8c:	4a07      	ldr	r2, [pc, #28]	; (8005eac <HAL_MPU_ConfigRegion+0x84>)
                ((uint32_t)MPU_Init->Size                    << MPU_RASR_SIZE_Pos) |
 8005e8e:	430b      	orrs	r3, r1
    MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 8005e90:	6113      	str	r3, [r2, #16]
  else
  {
    MPU->RBAR = 0x00;
    MPU->RASR = 0x00;
  }
}
 8005e92:	e005      	b.n	8005ea0 <HAL_MPU_ConfigRegion+0x78>
    MPU->RBAR = 0x00;
 8005e94:	4b05      	ldr	r3, [pc, #20]	; (8005eac <HAL_MPU_ConfigRegion+0x84>)
 8005e96:	2200      	movs	r2, #0
 8005e98:	60da      	str	r2, [r3, #12]
    MPU->RASR = 0x00;
 8005e9a:	4b04      	ldr	r3, [pc, #16]	; (8005eac <HAL_MPU_ConfigRegion+0x84>)
 8005e9c:	2200      	movs	r2, #0
 8005e9e:	611a      	str	r2, [r3, #16]
}
 8005ea0:	bf00      	nop
 8005ea2:	370c      	adds	r7, #12
 8005ea4:	46bd      	mov	sp, r7
 8005ea6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005eaa:	4770      	bx	lr
 8005eac:	e000ed90 	.word	0xe000ed90

08005eb0 <HAL_DAC_Init>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Init(DAC_HandleTypeDef *hdac)
{
 8005eb0:	b580      	push	{r7, lr}
 8005eb2:	b082      	sub	sp, #8
 8005eb4:	af00      	add	r7, sp, #0
 8005eb6:	6078      	str	r0, [r7, #4]
  /* Check DAC handle */
  if (hdac == NULL)
 8005eb8:	687b      	ldr	r3, [r7, #4]
 8005eba:	2b00      	cmp	r3, #0
 8005ebc:	d101      	bne.n	8005ec2 <HAL_DAC_Init+0x12>
  {
    return HAL_ERROR;
 8005ebe:	2301      	movs	r3, #1
 8005ec0:	e014      	b.n	8005eec <HAL_DAC_Init+0x3c>
  }
  /* Check the parameters */
  assert_param(IS_DAC_ALL_INSTANCE(hdac->Instance));

  if (hdac->State == HAL_DAC_STATE_RESET)
 8005ec2:	687b      	ldr	r3, [r7, #4]
 8005ec4:	791b      	ldrb	r3, [r3, #4]
 8005ec6:	b2db      	uxtb	r3, r3
 8005ec8:	2b00      	cmp	r3, #0
 8005eca:	d105      	bne.n	8005ed8 <HAL_DAC_Init+0x28>
      hdac->MspInitCallback             = HAL_DAC_MspInit;
    }
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

    /* Allocate lock resource and initialize it */
    hdac->Lock = HAL_UNLOCKED;
 8005ecc:	687b      	ldr	r3, [r7, #4]
 8005ece:	2200      	movs	r2, #0
 8005ed0:	715a      	strb	r2, [r3, #5]
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
    /* Init the low level hardware */
    hdac->MspInitCallback(hdac);
#else
    /* Init the low level hardware */
    HAL_DAC_MspInit(hdac);
 8005ed2:	6878      	ldr	r0, [r7, #4]
 8005ed4:	f7fd fa94 	bl	8003400 <HAL_DAC_MspInit>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
  }

  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_BUSY;
 8005ed8:	687b      	ldr	r3, [r7, #4]
 8005eda:	2202      	movs	r2, #2
 8005edc:	711a      	strb	r2, [r3, #4]

  /* Set DAC error code to none */
  hdac->ErrorCode = HAL_DAC_ERROR_NONE;
 8005ede:	687b      	ldr	r3, [r7, #4]
 8005ee0:	2200      	movs	r2, #0
 8005ee2:	611a      	str	r2, [r3, #16]

  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_READY;
 8005ee4:	687b      	ldr	r3, [r7, #4]
 8005ee6:	2201      	movs	r2, #1
 8005ee8:	711a      	strb	r2, [r3, #4]

  /* Return function status */
  return HAL_OK;
 8005eea:	2300      	movs	r3, #0
}
 8005eec:	4618      	mov	r0, r3
 8005eee:	3708      	adds	r7, #8
 8005ef0:	46bd      	mov	sp, r7
 8005ef2:	bd80      	pop	{r7, pc}

08005ef4 <HAL_DAC_Start>:
  *            @arg DAC_CHANNEL_1: DAC Channel1 selected
  *            @arg DAC_CHANNEL_2: DAC Channel2 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Start(DAC_HandleTypeDef *hdac, uint32_t Channel)
{
 8005ef4:	b480      	push	{r7}
 8005ef6:	b083      	sub	sp, #12
 8005ef8:	af00      	add	r7, sp, #0
 8005efa:	6078      	str	r0, [r7, #4]
 8005efc:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_DAC_CHANNEL(Channel));

  /* Process locked */
  __HAL_LOCK(hdac);
 8005efe:	687b      	ldr	r3, [r7, #4]
 8005f00:	795b      	ldrb	r3, [r3, #5]
 8005f02:	2b01      	cmp	r3, #1
 8005f04:	d101      	bne.n	8005f0a <HAL_DAC_Start+0x16>
 8005f06:	2302      	movs	r3, #2
 8005f08:	e040      	b.n	8005f8c <HAL_DAC_Start+0x98>
 8005f0a:	687b      	ldr	r3, [r7, #4]
 8005f0c:	2201      	movs	r2, #1
 8005f0e:	715a      	strb	r2, [r3, #5]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
 8005f10:	687b      	ldr	r3, [r7, #4]
 8005f12:	2202      	movs	r2, #2
 8005f14:	711a      	strb	r2, [r3, #4]

  /* Enable the Peripheral */
  __HAL_DAC_ENABLE(hdac, Channel);
 8005f16:	687b      	ldr	r3, [r7, #4]
 8005f18:	681b      	ldr	r3, [r3, #0]
 8005f1a:	6819      	ldr	r1, [r3, #0]
 8005f1c:	683b      	ldr	r3, [r7, #0]
 8005f1e:	f003 0310 	and.w	r3, r3, #16
 8005f22:	2201      	movs	r2, #1
 8005f24:	409a      	lsls	r2, r3
 8005f26:	687b      	ldr	r3, [r7, #4]
 8005f28:	681b      	ldr	r3, [r3, #0]
 8005f2a:	430a      	orrs	r2, r1
 8005f2c:	601a      	str	r2, [r3, #0]

  if (Channel == DAC_CHANNEL_1)
 8005f2e:	683b      	ldr	r3, [r7, #0]
 8005f30:	2b00      	cmp	r3, #0
 8005f32:	d10f      	bne.n	8005f54 <HAL_DAC_Start+0x60>
  {
    /* Check if software trigger enabled */
    if ((hdac->Instance->CR & (DAC_CR_TEN1 | DAC_CR_TSEL1)) == DAC_TRIGGER_SOFTWARE)
 8005f34:	687b      	ldr	r3, [r7, #4]
 8005f36:	681b      	ldr	r3, [r3, #0]
 8005f38:	681b      	ldr	r3, [r3, #0]
 8005f3a:	f003 033e 	and.w	r3, r3, #62	; 0x3e
 8005f3e:	2b02      	cmp	r3, #2
 8005f40:	d11d      	bne.n	8005f7e <HAL_DAC_Start+0x8a>
    {
      /* Enable the selected DAC software conversion */
      SET_BIT(hdac->Instance->SWTRIGR, DAC_SWTRIGR_SWTRIG1);
 8005f42:	687b      	ldr	r3, [r7, #4]
 8005f44:	681b      	ldr	r3, [r3, #0]
 8005f46:	685a      	ldr	r2, [r3, #4]
 8005f48:	687b      	ldr	r3, [r7, #4]
 8005f4a:	681b      	ldr	r3, [r3, #0]
 8005f4c:	f042 0201 	orr.w	r2, r2, #1
 8005f50:	605a      	str	r2, [r3, #4]
 8005f52:	e014      	b.n	8005f7e <HAL_DAC_Start+0x8a>
  }

  else
  {
    /* Check if software trigger enabled */
    if ((hdac->Instance->CR & (DAC_CR_TEN2 | DAC_CR_TSEL2)) == (DAC_TRIGGER_SOFTWARE << (Channel & 0x10UL)))
 8005f54:	687b      	ldr	r3, [r7, #4]
 8005f56:	681b      	ldr	r3, [r3, #0]
 8005f58:	681b      	ldr	r3, [r3, #0]
 8005f5a:	f403 1278 	and.w	r2, r3, #4063232	; 0x3e0000
 8005f5e:	683b      	ldr	r3, [r7, #0]
 8005f60:	f003 0310 	and.w	r3, r3, #16
 8005f64:	2102      	movs	r1, #2
 8005f66:	fa01 f303 	lsl.w	r3, r1, r3
 8005f6a:	429a      	cmp	r2, r3
 8005f6c:	d107      	bne.n	8005f7e <HAL_DAC_Start+0x8a>
    {
      /* Enable the selected DAC software conversion*/
      SET_BIT(hdac->Instance->SWTRIGR, DAC_SWTRIGR_SWTRIG2);
 8005f6e:	687b      	ldr	r3, [r7, #4]
 8005f70:	681b      	ldr	r3, [r3, #0]
 8005f72:	685a      	ldr	r2, [r3, #4]
 8005f74:	687b      	ldr	r3, [r7, #4]
 8005f76:	681b      	ldr	r3, [r3, #0]
 8005f78:	f042 0202 	orr.w	r2, r2, #2
 8005f7c:	605a      	str	r2, [r3, #4]
    }
  }


  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_READY;
 8005f7e:	687b      	ldr	r3, [r7, #4]
 8005f80:	2201      	movs	r2, #1
 8005f82:	711a      	strb	r2, [r3, #4]

  /* Process unlocked */
  __HAL_UNLOCK(hdac);
 8005f84:	687b      	ldr	r3, [r7, #4]
 8005f86:	2200      	movs	r2, #0
 8005f88:	715a      	strb	r2, [r3, #5]

  /* Return function status */
  return HAL_OK;
 8005f8a:	2300      	movs	r3, #0
}
 8005f8c:	4618      	mov	r0, r3
 8005f8e:	370c      	adds	r7, #12
 8005f90:	46bd      	mov	sp, r7
 8005f92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f96:	4770      	bx	lr

08005f98 <HAL_DAC_SetValue>:
  *            @arg DAC_ALIGN_12B_R: 12bit right data alignment selected
  * @param  Data Data to be loaded in the selected data holding register.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_SetValue(DAC_HandleTypeDef *hdac, uint32_t Channel, uint32_t Alignment, uint32_t Data)
{
 8005f98:	b480      	push	{r7}
 8005f9a:	b087      	sub	sp, #28
 8005f9c:	af00      	add	r7, sp, #0
 8005f9e:	60f8      	str	r0, [r7, #12]
 8005fa0:	60b9      	str	r1, [r7, #8]
 8005fa2:	607a      	str	r2, [r7, #4]
 8005fa4:	603b      	str	r3, [r7, #0]
  __IO uint32_t tmp = 0UL;
 8005fa6:	2300      	movs	r3, #0
 8005fa8:	617b      	str	r3, [r7, #20]
  /* Check the parameters */
  assert_param(IS_DAC_CHANNEL(Channel));
  assert_param(IS_DAC_ALIGN(Alignment));
  assert_param(IS_DAC_DATA(Data));

  tmp = (uint32_t)hdac->Instance;
 8005faa:	68fb      	ldr	r3, [r7, #12]
 8005fac:	681b      	ldr	r3, [r3, #0]
 8005fae:	617b      	str	r3, [r7, #20]
  if (Channel == DAC_CHANNEL_1)
 8005fb0:	68bb      	ldr	r3, [r7, #8]
 8005fb2:	2b00      	cmp	r3, #0
 8005fb4:	d105      	bne.n	8005fc2 <HAL_DAC_SetValue+0x2a>
  {
    tmp += DAC_DHR12R1_ALIGNMENT(Alignment);
 8005fb6:	697a      	ldr	r2, [r7, #20]
 8005fb8:	687b      	ldr	r3, [r7, #4]
 8005fba:	4413      	add	r3, r2
 8005fbc:	3308      	adds	r3, #8
 8005fbe:	617b      	str	r3, [r7, #20]
 8005fc0:	e004      	b.n	8005fcc <HAL_DAC_SetValue+0x34>
  }

  else
  {
    tmp += DAC_DHR12R2_ALIGNMENT(Alignment);
 8005fc2:	697a      	ldr	r2, [r7, #20]
 8005fc4:	687b      	ldr	r3, [r7, #4]
 8005fc6:	4413      	add	r3, r2
 8005fc8:	3314      	adds	r3, #20
 8005fca:	617b      	str	r3, [r7, #20]
  }


  /* Set the DAC channel selected data holding register */
  *(__IO uint32_t *) tmp = Data;
 8005fcc:	697b      	ldr	r3, [r7, #20]
 8005fce:	461a      	mov	r2, r3
 8005fd0:	683b      	ldr	r3, [r7, #0]
 8005fd2:	6013      	str	r3, [r2, #0]

  /* Return function status */
  return HAL_OK;
 8005fd4:	2300      	movs	r3, #0
}
 8005fd6:	4618      	mov	r0, r3
 8005fd8:	371c      	adds	r7, #28
 8005fda:	46bd      	mov	sp, r7
 8005fdc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005fe0:	4770      	bx	lr
	...

08005fe4 <HAL_DAC_ConfigChannel>:
  *            @arg DAC_CHANNEL_1: DAC Channel1 selected
  *            @arg DAC_CHANNEL_2: DAC Channel2 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_ConfigChannel(DAC_HandleTypeDef *hdac, DAC_ChannelConfTypeDef *sConfig, uint32_t Channel)
{
 8005fe4:	b580      	push	{r7, lr}
 8005fe6:	b088      	sub	sp, #32
 8005fe8:	af00      	add	r7, sp, #0
 8005fea:	60f8      	str	r0, [r7, #12]
 8005fec:	60b9      	str	r1, [r7, #8]
 8005fee:	607a      	str	r2, [r7, #4]
    assert_param(IS_DAC_REFRESHTIME(sConfig->DAC_SampleAndHoldConfig.DAC_RefreshTime));
  }
  assert_param(IS_DAC_CHANNEL(Channel));

  /* Process locked */
  __HAL_LOCK(hdac);
 8005ff0:	68fb      	ldr	r3, [r7, #12]
 8005ff2:	795b      	ldrb	r3, [r3, #5]
 8005ff4:	2b01      	cmp	r3, #1
 8005ff6:	d101      	bne.n	8005ffc <HAL_DAC_ConfigChannel+0x18>
 8005ff8:	2302      	movs	r3, #2
 8005ffa:	e12a      	b.n	8006252 <HAL_DAC_ConfigChannel+0x26e>
 8005ffc:	68fb      	ldr	r3, [r7, #12]
 8005ffe:	2201      	movs	r2, #1
 8006000:	715a      	strb	r2, [r3, #5]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
 8006002:	68fb      	ldr	r3, [r7, #12]
 8006004:	2202      	movs	r2, #2
 8006006:	711a      	strb	r2, [r3, #4]

  /* Sample and hold configuration */
  if (sConfig->DAC_SampleAndHold == DAC_SAMPLEANDHOLD_ENABLE)
 8006008:	68bb      	ldr	r3, [r7, #8]
 800600a:	681b      	ldr	r3, [r3, #0]
 800600c:	2b04      	cmp	r3, #4
 800600e:	f040 8081 	bne.w	8006114 <HAL_DAC_ConfigChannel+0x130>
  {
    /* Get timeout */
    tickstart = HAL_GetTick();
 8006012:	f7fd fff5 	bl	8004000 <HAL_GetTick>
 8006016:	61b8      	str	r0, [r7, #24]

    if (Channel == DAC_CHANNEL_1)
 8006018:	687b      	ldr	r3, [r7, #4]
 800601a:	2b00      	cmp	r3, #0
 800601c:	d140      	bne.n	80060a0 <HAL_DAC_ConfigChannel+0xbc>
    {
      /* SHSR1 can be written when BWST1 is cleared */
      while (((hdac->Instance->SR) & DAC_SR_BWST1) != 0UL)
 800601e:	e018      	b.n	8006052 <HAL_DAC_ConfigChannel+0x6e>
      {
        /* Check for the Timeout */
        if ((HAL_GetTick() - tickstart) > TIMEOUT_DAC_CALIBCONFIG)
 8006020:	f7fd ffee 	bl	8004000 <HAL_GetTick>
 8006024:	4602      	mov	r2, r0
 8006026:	69bb      	ldr	r3, [r7, #24]
 8006028:	1ad3      	subs	r3, r2, r3
 800602a:	2b01      	cmp	r3, #1
 800602c:	d911      	bls.n	8006052 <HAL_DAC_ConfigChannel+0x6e>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if(((hdac->Instance->SR) & DAC_SR_BWST1) != 0UL)
 800602e:	68fb      	ldr	r3, [r7, #12]
 8006030:	681b      	ldr	r3, [r3, #0]
 8006032:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8006034:	4b89      	ldr	r3, [pc, #548]	; (800625c <HAL_DAC_ConfigChannel+0x278>)
 8006036:	4013      	ands	r3, r2
 8006038:	2b00      	cmp	r3, #0
 800603a:	d00a      	beq.n	8006052 <HAL_DAC_ConfigChannel+0x6e>
          {
            /* Update error code */
            SET_BIT(hdac->ErrorCode, HAL_DAC_ERROR_TIMEOUT);
 800603c:	68fb      	ldr	r3, [r7, #12]
 800603e:	691b      	ldr	r3, [r3, #16]
 8006040:	f043 0208 	orr.w	r2, r3, #8
 8006044:	68fb      	ldr	r3, [r7, #12]
 8006046:	611a      	str	r2, [r3, #16]

            /* Change the DMA state */
            hdac->State = HAL_DAC_STATE_TIMEOUT;
 8006048:	68fb      	ldr	r3, [r7, #12]
 800604a:	2203      	movs	r2, #3
 800604c:	711a      	strb	r2, [r3, #4]

            return HAL_TIMEOUT;
 800604e:	2303      	movs	r3, #3
 8006050:	e0ff      	b.n	8006252 <HAL_DAC_ConfigChannel+0x26e>
      while (((hdac->Instance->SR) & DAC_SR_BWST1) != 0UL)
 8006052:	68fb      	ldr	r3, [r7, #12]
 8006054:	681b      	ldr	r3, [r3, #0]
 8006056:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8006058:	4b80      	ldr	r3, [pc, #512]	; (800625c <HAL_DAC_ConfigChannel+0x278>)
 800605a:	4013      	ands	r3, r2
 800605c:	2b00      	cmp	r3, #0
 800605e:	d1df      	bne.n	8006020 <HAL_DAC_ConfigChannel+0x3c>
          }
        }
      }
      HAL_Delay(1);
 8006060:	2001      	movs	r0, #1
 8006062:	f7fd ffd9 	bl	8004018 <HAL_Delay>
      hdac->Instance->SHSR1 = sConfig->DAC_SampleAndHoldConfig.DAC_SampleTime;
 8006066:	68fb      	ldr	r3, [r7, #12]
 8006068:	681b      	ldr	r3, [r3, #0]
 800606a:	68ba      	ldr	r2, [r7, #8]
 800606c:	6992      	ldr	r2, [r2, #24]
 800606e:	641a      	str	r2, [r3, #64]	; 0x40
 8006070:	e023      	b.n	80060ba <HAL_DAC_ConfigChannel+0xd6>
    {
      /* SHSR2 can be written when BWST2 is cleared */
      while (((hdac->Instance->SR) & DAC_SR_BWST2) != 0UL)
      {
        /* Check for the Timeout */
        if ((HAL_GetTick() - tickstart) > TIMEOUT_DAC_CALIBCONFIG)
 8006072:	f7fd ffc5 	bl	8004000 <HAL_GetTick>
 8006076:	4602      	mov	r2, r0
 8006078:	69bb      	ldr	r3, [r7, #24]
 800607a:	1ad3      	subs	r3, r2, r3
 800607c:	2b01      	cmp	r3, #1
 800607e:	d90f      	bls.n	80060a0 <HAL_DAC_ConfigChannel+0xbc>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if(((hdac->Instance->SR) & DAC_SR_BWST2) != 0UL)
 8006080:	68fb      	ldr	r3, [r7, #12]
 8006082:	681b      	ldr	r3, [r3, #0]
 8006084:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006086:	2b00      	cmp	r3, #0
 8006088:	da0a      	bge.n	80060a0 <HAL_DAC_ConfigChannel+0xbc>
          {
            /* Update error code */
            SET_BIT(hdac->ErrorCode, HAL_DAC_ERROR_TIMEOUT);
 800608a:	68fb      	ldr	r3, [r7, #12]
 800608c:	691b      	ldr	r3, [r3, #16]
 800608e:	f043 0208 	orr.w	r2, r3, #8
 8006092:	68fb      	ldr	r3, [r7, #12]
 8006094:	611a      	str	r2, [r3, #16]

            /* Change the DMA state */
            hdac->State = HAL_DAC_STATE_TIMEOUT;
 8006096:	68fb      	ldr	r3, [r7, #12]
 8006098:	2203      	movs	r2, #3
 800609a:	711a      	strb	r2, [r3, #4]

            return HAL_TIMEOUT;
 800609c:	2303      	movs	r3, #3
 800609e:	e0d8      	b.n	8006252 <HAL_DAC_ConfigChannel+0x26e>
      while (((hdac->Instance->SR) & DAC_SR_BWST2) != 0UL)
 80060a0:	68fb      	ldr	r3, [r7, #12]
 80060a2:	681b      	ldr	r3, [r3, #0]
 80060a4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80060a6:	2b00      	cmp	r3, #0
 80060a8:	dbe3      	blt.n	8006072 <HAL_DAC_ConfigChannel+0x8e>
          }
        }
      }
      HAL_Delay(1U);
 80060aa:	2001      	movs	r0, #1
 80060ac:	f7fd ffb4 	bl	8004018 <HAL_Delay>
      hdac->Instance->SHSR2 = sConfig->DAC_SampleAndHoldConfig.DAC_SampleTime;
 80060b0:	68fb      	ldr	r3, [r7, #12]
 80060b2:	681b      	ldr	r3, [r3, #0]
 80060b4:	68ba      	ldr	r2, [r7, #8]
 80060b6:	6992      	ldr	r2, [r2, #24]
 80060b8:	645a      	str	r2, [r3, #68]	; 0x44
    }


    /* HoldTime */
    MODIFY_REG(hdac->Instance->SHHR, DAC_SHHR_THOLD1 << (Channel & 0x10UL),
 80060ba:	68fb      	ldr	r3, [r7, #12]
 80060bc:	681b      	ldr	r3, [r3, #0]
 80060be:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 80060c0:	687b      	ldr	r3, [r7, #4]
 80060c2:	f003 0310 	and.w	r3, r3, #16
 80060c6:	f240 31ff 	movw	r1, #1023	; 0x3ff
 80060ca:	fa01 f303 	lsl.w	r3, r1, r3
 80060ce:	43db      	mvns	r3, r3
 80060d0:	ea02 0103 	and.w	r1, r2, r3
 80060d4:	68bb      	ldr	r3, [r7, #8]
 80060d6:	69da      	ldr	r2, [r3, #28]
 80060d8:	687b      	ldr	r3, [r7, #4]
 80060da:	f003 0310 	and.w	r3, r3, #16
 80060de:	409a      	lsls	r2, r3
 80060e0:	68fb      	ldr	r3, [r7, #12]
 80060e2:	681b      	ldr	r3, [r3, #0]
 80060e4:	430a      	orrs	r2, r1
 80060e6:	649a      	str	r2, [r3, #72]	; 0x48
               (sConfig->DAC_SampleAndHoldConfig.DAC_HoldTime) << (Channel & 0x10UL));
    /* RefreshTime */
    MODIFY_REG(hdac->Instance->SHRR, DAC_SHRR_TREFRESH1 << (Channel & 0x10UL),
 80060e8:	68fb      	ldr	r3, [r7, #12]
 80060ea:	681b      	ldr	r3, [r3, #0]
 80060ec:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80060ee:	687b      	ldr	r3, [r7, #4]
 80060f0:	f003 0310 	and.w	r3, r3, #16
 80060f4:	21ff      	movs	r1, #255	; 0xff
 80060f6:	fa01 f303 	lsl.w	r3, r1, r3
 80060fa:	43db      	mvns	r3, r3
 80060fc:	ea02 0103 	and.w	r1, r2, r3
 8006100:	68bb      	ldr	r3, [r7, #8]
 8006102:	6a1a      	ldr	r2, [r3, #32]
 8006104:	687b      	ldr	r3, [r7, #4]
 8006106:	f003 0310 	and.w	r3, r3, #16
 800610a:	409a      	lsls	r2, r3
 800610c:	68fb      	ldr	r3, [r7, #12]
 800610e:	681b      	ldr	r3, [r3, #0]
 8006110:	430a      	orrs	r2, r1
 8006112:	64da      	str	r2, [r3, #76]	; 0x4c
               (sConfig->DAC_SampleAndHoldConfig.DAC_RefreshTime) << (Channel & 0x10UL));
  }

  if (sConfig->DAC_UserTrimming == DAC_TRIMMING_USER)
 8006114:	68bb      	ldr	r3, [r7, #8]
 8006116:	691b      	ldr	r3, [r3, #16]
 8006118:	2b01      	cmp	r3, #1
 800611a:	d11d      	bne.n	8006158 <HAL_DAC_ConfigChannel+0x174>
    /* USER TRIMMING */
  {
    /* Get the DAC CCR value */
    tmpreg1 = hdac->Instance->CCR;
 800611c:	68fb      	ldr	r3, [r7, #12]
 800611e:	681b      	ldr	r3, [r3, #0]
 8006120:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006122:	617b      	str	r3, [r7, #20]
    /* Clear trimming value */
    tmpreg1 &= ~(((uint32_t)(DAC_CCR_OTRIM1)) << (Channel & 0x10UL));
 8006124:	687b      	ldr	r3, [r7, #4]
 8006126:	f003 0310 	and.w	r3, r3, #16
 800612a:	221f      	movs	r2, #31
 800612c:	fa02 f303 	lsl.w	r3, r2, r3
 8006130:	43db      	mvns	r3, r3
 8006132:	697a      	ldr	r2, [r7, #20]
 8006134:	4013      	ands	r3, r2
 8006136:	617b      	str	r3, [r7, #20]
    /* Configure for the selected trimming offset */
    tmpreg2 = sConfig->DAC_TrimmingValue;
 8006138:	68bb      	ldr	r3, [r7, #8]
 800613a:	695b      	ldr	r3, [r3, #20]
 800613c:	613b      	str	r3, [r7, #16]
    /* Calculate CCR register value depending on DAC_Channel */
    tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 800613e:	687b      	ldr	r3, [r7, #4]
 8006140:	f003 0310 	and.w	r3, r3, #16
 8006144:	693a      	ldr	r2, [r7, #16]
 8006146:	fa02 f303 	lsl.w	r3, r2, r3
 800614a:	697a      	ldr	r2, [r7, #20]
 800614c:	4313      	orrs	r3, r2
 800614e:	617b      	str	r3, [r7, #20]
    /* Write to DAC CCR */
    hdac->Instance->CCR = tmpreg1;
 8006150:	68fb      	ldr	r3, [r7, #12]
 8006152:	681b      	ldr	r3, [r3, #0]
 8006154:	697a      	ldr	r2, [r7, #20]
 8006156:	639a      	str	r2, [r3, #56]	; 0x38
  }
  /* else factory trimming is used (factory setting are available at reset)*/
  /* SW Nothing has nothing to do */

  /* Get the DAC MCR value */
  tmpreg1 = hdac->Instance->MCR;
 8006158:	68fb      	ldr	r3, [r7, #12]
 800615a:	681b      	ldr	r3, [r3, #0]
 800615c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800615e:	617b      	str	r3, [r7, #20]
  /* Clear DAC_MCR_MODEx bits */
  tmpreg1 &= ~(((uint32_t)(DAC_MCR_MODE1)) << (Channel & 0x10UL));
 8006160:	687b      	ldr	r3, [r7, #4]
 8006162:	f003 0310 	and.w	r3, r3, #16
 8006166:	2207      	movs	r2, #7
 8006168:	fa02 f303 	lsl.w	r3, r2, r3
 800616c:	43db      	mvns	r3, r3
 800616e:	697a      	ldr	r2, [r7, #20]
 8006170:	4013      	ands	r3, r2
 8006172:	617b      	str	r3, [r7, #20]
  /* Configure for the selected DAC channel: mode, buffer output & on chip peripheral connect */
  if (sConfig->DAC_ConnectOnChipPeripheral == DAC_CHIPCONNECT_EXTERNAL)
 8006174:	68bb      	ldr	r3, [r7, #8]
 8006176:	68db      	ldr	r3, [r3, #12]
 8006178:	2b01      	cmp	r3, #1
 800617a:	d102      	bne.n	8006182 <HAL_DAC_ConfigChannel+0x19e>
  {
    connectOnChip = 0x00000000UL;
 800617c:	2300      	movs	r3, #0
 800617e:	61fb      	str	r3, [r7, #28]
 8006180:	e00f      	b.n	80061a2 <HAL_DAC_ConfigChannel+0x1be>
  }
  else if (sConfig->DAC_ConnectOnChipPeripheral == DAC_CHIPCONNECT_INTERNAL)
 8006182:	68bb      	ldr	r3, [r7, #8]
 8006184:	68db      	ldr	r3, [r3, #12]
 8006186:	2b02      	cmp	r3, #2
 8006188:	d102      	bne.n	8006190 <HAL_DAC_ConfigChannel+0x1ac>
  {
    connectOnChip = DAC_MCR_MODE1_0;
 800618a:	2301      	movs	r3, #1
 800618c:	61fb      	str	r3, [r7, #28]
 800618e:	e008      	b.n	80061a2 <HAL_DAC_ConfigChannel+0x1be>
  }
  else /* (sConfig->DAC_ConnectOnChipPeripheral == DAC_CHIPCONNECT_BOTH) */
  {
    if (sConfig->DAC_OutputBuffer == DAC_OUTPUTBUFFER_ENABLE)
 8006190:	68bb      	ldr	r3, [r7, #8]
 8006192:	689b      	ldr	r3, [r3, #8]
 8006194:	2b00      	cmp	r3, #0
 8006196:	d102      	bne.n	800619e <HAL_DAC_ConfigChannel+0x1ba>
    {
      connectOnChip = DAC_MCR_MODE1_0;
 8006198:	2301      	movs	r3, #1
 800619a:	61fb      	str	r3, [r7, #28]
 800619c:	e001      	b.n	80061a2 <HAL_DAC_ConfigChannel+0x1be>
    }
    else
    {
      connectOnChip = 0x00000000UL;
 800619e:	2300      	movs	r3, #0
 80061a0:	61fb      	str	r3, [r7, #28]
    }
  }
  tmpreg2 = (sConfig->DAC_SampleAndHold | sConfig->DAC_OutputBuffer | connectOnChip);
 80061a2:	68bb      	ldr	r3, [r7, #8]
 80061a4:	681a      	ldr	r2, [r3, #0]
 80061a6:	68bb      	ldr	r3, [r7, #8]
 80061a8:	689b      	ldr	r3, [r3, #8]
 80061aa:	4313      	orrs	r3, r2
 80061ac:	69fa      	ldr	r2, [r7, #28]
 80061ae:	4313      	orrs	r3, r2
 80061b0:	613b      	str	r3, [r7, #16]
  /* Calculate MCR register value depending on DAC_Channel */
  tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 80061b2:	687b      	ldr	r3, [r7, #4]
 80061b4:	f003 0310 	and.w	r3, r3, #16
 80061b8:	693a      	ldr	r2, [r7, #16]
 80061ba:	fa02 f303 	lsl.w	r3, r2, r3
 80061be:	697a      	ldr	r2, [r7, #20]
 80061c0:	4313      	orrs	r3, r2
 80061c2:	617b      	str	r3, [r7, #20]
  /* Write to DAC MCR */
  hdac->Instance->MCR = tmpreg1;
 80061c4:	68fb      	ldr	r3, [r7, #12]
 80061c6:	681b      	ldr	r3, [r3, #0]
 80061c8:	697a      	ldr	r2, [r7, #20]
 80061ca:	63da      	str	r2, [r3, #60]	; 0x3c

  /* DAC in normal operating mode hence clear DAC_CR_CENx bit */
  CLEAR_BIT(hdac->Instance->CR, DAC_CR_CEN1 << (Channel & 0x10UL));
 80061cc:	68fb      	ldr	r3, [r7, #12]
 80061ce:	681b      	ldr	r3, [r3, #0]
 80061d0:	6819      	ldr	r1, [r3, #0]
 80061d2:	687b      	ldr	r3, [r7, #4]
 80061d4:	f003 0310 	and.w	r3, r3, #16
 80061d8:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 80061dc:	fa02 f303 	lsl.w	r3, r2, r3
 80061e0:	43da      	mvns	r2, r3
 80061e2:	68fb      	ldr	r3, [r7, #12]
 80061e4:	681b      	ldr	r3, [r3, #0]
 80061e6:	400a      	ands	r2, r1
 80061e8:	601a      	str	r2, [r3, #0]

  /* Get the DAC CR value */
  tmpreg1 = hdac->Instance->CR;
 80061ea:	68fb      	ldr	r3, [r7, #12]
 80061ec:	681b      	ldr	r3, [r3, #0]
 80061ee:	681b      	ldr	r3, [r3, #0]
 80061f0:	617b      	str	r3, [r7, #20]
  /* Clear TENx, TSELx, WAVEx and MAMPx bits */
  tmpreg1 &= ~(((uint32_t)(DAC_CR_MAMP1 | DAC_CR_WAVE1 | DAC_CR_TSEL1 | DAC_CR_TEN1)) << (Channel & 0x10UL));
 80061f2:	687b      	ldr	r3, [r7, #4]
 80061f4:	f003 0310 	and.w	r3, r3, #16
 80061f8:	f640 72fe 	movw	r2, #4094	; 0xffe
 80061fc:	fa02 f303 	lsl.w	r3, r2, r3
 8006200:	43db      	mvns	r3, r3
 8006202:	697a      	ldr	r2, [r7, #20]
 8006204:	4013      	ands	r3, r2
 8006206:	617b      	str	r3, [r7, #20]
  /* Configure for the selected DAC channel: trigger */
  /* Set TSELx and TENx bits according to DAC_Trigger value */
  tmpreg2 = sConfig->DAC_Trigger;
 8006208:	68bb      	ldr	r3, [r7, #8]
 800620a:	685b      	ldr	r3, [r3, #4]
 800620c:	613b      	str	r3, [r7, #16]
  /* Calculate CR register value depending on DAC_Channel */
  tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 800620e:	687b      	ldr	r3, [r7, #4]
 8006210:	f003 0310 	and.w	r3, r3, #16
 8006214:	693a      	ldr	r2, [r7, #16]
 8006216:	fa02 f303 	lsl.w	r3, r2, r3
 800621a:	697a      	ldr	r2, [r7, #20]
 800621c:	4313      	orrs	r3, r2
 800621e:	617b      	str	r3, [r7, #20]
  /* Write to DAC CR */
  hdac->Instance->CR = tmpreg1;
 8006220:	68fb      	ldr	r3, [r7, #12]
 8006222:	681b      	ldr	r3, [r3, #0]
 8006224:	697a      	ldr	r2, [r7, #20]
 8006226:	601a      	str	r2, [r3, #0]
  /* Disable wave generation */
  CLEAR_BIT(hdac->Instance->CR, (DAC_CR_WAVE1 << (Channel & 0x10UL)));
 8006228:	68fb      	ldr	r3, [r7, #12]
 800622a:	681b      	ldr	r3, [r3, #0]
 800622c:	6819      	ldr	r1, [r3, #0]
 800622e:	687b      	ldr	r3, [r7, #4]
 8006230:	f003 0310 	and.w	r3, r3, #16
 8006234:	22c0      	movs	r2, #192	; 0xc0
 8006236:	fa02 f303 	lsl.w	r3, r2, r3
 800623a:	43da      	mvns	r2, r3
 800623c:	68fb      	ldr	r3, [r7, #12]
 800623e:	681b      	ldr	r3, [r3, #0]
 8006240:	400a      	ands	r2, r1
 8006242:	601a      	str	r2, [r3, #0]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_READY;
 8006244:	68fb      	ldr	r3, [r7, #12]
 8006246:	2201      	movs	r2, #1
 8006248:	711a      	strb	r2, [r3, #4]

  /* Process unlocked */
  __HAL_UNLOCK(hdac);
 800624a:	68fb      	ldr	r3, [r7, #12]
 800624c:	2200      	movs	r2, #0
 800624e:	715a      	strb	r2, [r3, #5]

  /* Return function status */
  return HAL_OK;
 8006250:	2300      	movs	r3, #0
}
 8006252:	4618      	mov	r0, r3
 8006254:	3720      	adds	r7, #32
 8006256:	46bd      	mov	sp, r7
 8006258:	bd80      	pop	{r7, pc}
 800625a:	bf00      	nop
 800625c:	20008000 	.word	0x20008000

08006260 <HAL_ETH_Init>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Init(ETH_HandleTypeDef *heth)
{
 8006260:	b580      	push	{r7, lr}
 8006262:	b084      	sub	sp, #16
 8006264:	af00      	add	r7, sp, #0
 8006266:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if (heth == NULL)
 8006268:	687b      	ldr	r3, [r7, #4]
 800626a:	2b00      	cmp	r3, #0
 800626c:	d101      	bne.n	8006272 <HAL_ETH_Init+0x12>
  {
    return HAL_ERROR;
 800626e:	2301      	movs	r3, #1
 8006270:	e0cf      	b.n	8006412 <HAL_ETH_Init+0x1b2>
  }
  if (heth->gState == HAL_ETH_STATE_RESET)
 8006272:	687b      	ldr	r3, [r7, #4]
 8006274:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8006278:	2b00      	cmp	r3, #0
 800627a:	d106      	bne.n	800628a <HAL_ETH_Init+0x2a>
  {
    heth->gState = HAL_ETH_STATE_BUSY;
 800627c:	687b      	ldr	r3, [r7, #4]
 800627e:	2223      	movs	r2, #35	; 0x23
 8006280:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    /* Init the low level hardware */
    heth->MspInitCallback(heth);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC. */
    HAL_ETH_MspInit(heth);
 8006284:	6878      	ldr	r0, [r7, #4]
 8006286:	f009 f851 	bl	800f32c <HAL_ETH_MspInit>

#endif /* (USE_HAL_ETH_REGISTER_CALLBACKS) */
  }

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800628a:	4b64      	ldr	r3, [pc, #400]	; (800641c <HAL_ETH_Init+0x1bc>)
 800628c:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8006290:	4a62      	ldr	r2, [pc, #392]	; (800641c <HAL_ETH_Init+0x1bc>)
 8006292:	f043 0302 	orr.w	r3, r3, #2
 8006296:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 800629a:	4b60      	ldr	r3, [pc, #384]	; (800641c <HAL_ETH_Init+0x1bc>)
 800629c:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 80062a0:	f003 0302 	and.w	r3, r3, #2
 80062a4:	60bb      	str	r3, [r7, #8]
 80062a6:	68bb      	ldr	r3, [r7, #8]

  if (heth->Init.MediaInterface == HAL_ETH_MII_MODE)
 80062a8:	687b      	ldr	r3, [r7, #4]
 80062aa:	7a1b      	ldrb	r3, [r3, #8]
 80062ac:	2b00      	cmp	r3, #0
 80062ae:	d103      	bne.n	80062b8 <HAL_ETH_Init+0x58>
  {
    HAL_SYSCFG_ETHInterfaceSelect(SYSCFG_ETH_MII);
 80062b0:	2000      	movs	r0, #0
 80062b2:	f7fd fee1 	bl	8004078 <HAL_SYSCFG_ETHInterfaceSelect>
 80062b6:	e003      	b.n	80062c0 <HAL_ETH_Init+0x60>
  }
  else
  {
    HAL_SYSCFG_ETHInterfaceSelect(SYSCFG_ETH_RMII);
 80062b8:	f44f 0000 	mov.w	r0, #8388608	; 0x800000
 80062bc:	f7fd fedc 	bl	8004078 <HAL_SYSCFG_ETHInterfaceSelect>
  }

  /* Dummy read to sync with ETH */
  (void)SYSCFG->PMCR;
 80062c0:	4b57      	ldr	r3, [pc, #348]	; (8006420 <HAL_ETH_Init+0x1c0>)
 80062c2:	685b      	ldr	r3, [r3, #4]

  /* Ethernet Software reset */
  /* Set the SWR bit: resets all MAC subsystem internal registers and logic */
  /* After reset all the registers holds their respective reset values */
  SET_BIT(heth->Instance->DMAMR, ETH_DMAMR_SWR);
 80062c4:	687b      	ldr	r3, [r7, #4]
 80062c6:	681b      	ldr	r3, [r3, #0]
 80062c8:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80062cc:	681b      	ldr	r3, [r3, #0]
 80062ce:	687a      	ldr	r2, [r7, #4]
 80062d0:	6812      	ldr	r2, [r2, #0]
 80062d2:	f043 0301 	orr.w	r3, r3, #1
 80062d6:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 80062da:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 80062dc:	f7fd fe90 	bl	8004000 <HAL_GetTick>
 80062e0:	60f8      	str	r0, [r7, #12]

  /* Wait for software reset */
  while (READ_BIT(heth->Instance->DMAMR, ETH_DMAMR_SWR) > 0U)
 80062e2:	e011      	b.n	8006308 <HAL_ETH_Init+0xa8>
  {
    if (((HAL_GetTick() - tickstart) > ETH_SWRESET_TIMEOUT))
 80062e4:	f7fd fe8c 	bl	8004000 <HAL_GetTick>
 80062e8:	4602      	mov	r2, r0
 80062ea:	68fb      	ldr	r3, [r7, #12]
 80062ec:	1ad3      	subs	r3, r2, r3
 80062ee:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 80062f2:	d909      	bls.n	8006308 <HAL_ETH_Init+0xa8>
    {
      /* Set Error Code */
      heth->ErrorCode = HAL_ETH_ERROR_TIMEOUT;
 80062f4:	687b      	ldr	r3, [r7, #4]
 80062f6:	2204      	movs	r2, #4
 80062f8:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
      /* Set State as Error */
      heth->gState = HAL_ETH_STATE_ERROR;
 80062fc:	687b      	ldr	r3, [r7, #4]
 80062fe:	22e0      	movs	r2, #224	; 0xe0
 8006300:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
      /* Return Error */
      return HAL_ERROR;
 8006304:	2301      	movs	r3, #1
 8006306:	e084      	b.n	8006412 <HAL_ETH_Init+0x1b2>
  while (READ_BIT(heth->Instance->DMAMR, ETH_DMAMR_SWR) > 0U)
 8006308:	687b      	ldr	r3, [r7, #4]
 800630a:	681b      	ldr	r3, [r3, #0]
 800630c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8006310:	681b      	ldr	r3, [r3, #0]
 8006312:	f003 0301 	and.w	r3, r3, #1
 8006316:	2b00      	cmp	r3, #0
 8006318:	d1e4      	bne.n	80062e4 <HAL_ETH_Init+0x84>
    }
  }

  /*------------------ MDIO CSR Clock Range Configuration --------------------*/
  HAL_ETH_SetMDIOClockRange(heth);
 800631a:	6878      	ldr	r0, [r7, #4]
 800631c:	f000 fcd4 	bl	8006cc8 <HAL_ETH_SetMDIOClockRange>

  /*------------------ MAC LPI 1US Tic Counter Configuration --------------------*/
  WRITE_REG(heth->Instance->MAC1USTCR, (((uint32_t)HAL_RCC_GetHCLKFreq() / ETH_MAC_US_TICK) - 1U));
 8006320:	f004 fb26 	bl	800a970 <HAL_RCC_GetHCLKFreq>
 8006324:	4603      	mov	r3, r0
 8006326:	4a3f      	ldr	r2, [pc, #252]	; (8006424 <HAL_ETH_Init+0x1c4>)
 8006328:	fba2 2303 	umull	r2, r3, r2, r3
 800632c:	0c9a      	lsrs	r2, r3, #18
 800632e:	687b      	ldr	r3, [r7, #4]
 8006330:	681b      	ldr	r3, [r3, #0]
 8006332:	3a01      	subs	r2, #1
 8006334:	f8c3 20dc 	str.w	r2, [r3, #220]	; 0xdc

  /*------------------ MAC, MTL and DMA default Configuration ----------------*/
  ETH_MACDMAConfig(heth);
 8006338:	6878      	ldr	r0, [r7, #4]
 800633a:	f000 febf 	bl	80070bc <ETH_MACDMAConfig>

  /* SET DSL to 64 bit */
  MODIFY_REG(heth->Instance->DMACCR, ETH_DMACCR_DSL, ETH_DMACCR_DSL_64BIT);
 800633e:	687b      	ldr	r3, [r7, #4]
 8006340:	681b      	ldr	r3, [r3, #0]
 8006342:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8006346:	f8d3 3100 	ldr.w	r3, [r3, #256]	; 0x100
 800634a:	f423 13e0 	bic.w	r3, r3, #1835008	; 0x1c0000
 800634e:	687a      	ldr	r2, [r7, #4]
 8006350:	6812      	ldr	r2, [r2, #0]
 8006352:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8006356:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 800635a:	f8c2 3100 	str.w	r3, [r2, #256]	; 0x100

  /* Set Receive Buffers Length (must be a multiple of 4) */
  if ((heth->Init.RxBuffLen % 0x4U) != 0x0U)
 800635e:	687b      	ldr	r3, [r7, #4]
 8006360:	695b      	ldr	r3, [r3, #20]
 8006362:	f003 0303 	and.w	r3, r3, #3
 8006366:	2b00      	cmp	r3, #0
 8006368:	d009      	beq.n	800637e <HAL_ETH_Init+0x11e>
  {
    /* Set Error Code */
    heth->ErrorCode = HAL_ETH_ERROR_PARAM;
 800636a:	687b      	ldr	r3, [r7, #4]
 800636c:	2201      	movs	r2, #1
 800636e:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
    /* Set State as Error */
    heth->gState = HAL_ETH_STATE_ERROR;
 8006372:	687b      	ldr	r3, [r7, #4]
 8006374:	22e0      	movs	r2, #224	; 0xe0
 8006376:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    /* Return Error */
    return HAL_ERROR;
 800637a:	2301      	movs	r3, #1
 800637c:	e049      	b.n	8006412 <HAL_ETH_Init+0x1b2>
  }
  else
  {
    MODIFY_REG(heth->Instance->DMACRCR, ETH_DMACRCR_RBSZ, ((heth->Init.RxBuffLen) << 1));
 800637e:	687b      	ldr	r3, [r7, #4]
 8006380:	681b      	ldr	r3, [r3, #0]
 8006382:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8006386:	f8d3 2108 	ldr.w	r2, [r3, #264]	; 0x108
 800638a:	4b27      	ldr	r3, [pc, #156]	; (8006428 <HAL_ETH_Init+0x1c8>)
 800638c:	4013      	ands	r3, r2
 800638e:	687a      	ldr	r2, [r7, #4]
 8006390:	6952      	ldr	r2, [r2, #20]
 8006392:	0051      	lsls	r1, r2, #1
 8006394:	687a      	ldr	r2, [r7, #4]
 8006396:	6812      	ldr	r2, [r2, #0]
 8006398:	430b      	orrs	r3, r1
 800639a:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 800639e:	f8c2 3108 	str.w	r3, [r2, #264]	; 0x108
  }

  /*------------------ DMA Tx Descriptors Configuration ----------------------*/
  ETH_DMATxDescListInit(heth);
 80063a2:	6878      	ldr	r0, [r7, #4]
 80063a4:	f000 ff27 	bl	80071f6 <ETH_DMATxDescListInit>

  /*------------------ DMA Rx Descriptors Configuration ----------------------*/
  ETH_DMARxDescListInit(heth);
 80063a8:	6878      	ldr	r0, [r7, #4]
 80063aa:	f000 ff6d 	bl	8007288 <ETH_DMARxDescListInit>

  /*--------------------- ETHERNET MAC Address Configuration ------------------*/
  /* Set MAC addr bits 32 to 47 */
  heth->Instance->MACA0HR = (((uint32_t)(heth->Init.MACAddr[5]) << 8) | (uint32_t)heth->Init.MACAddr[4]);
 80063ae:	687b      	ldr	r3, [r7, #4]
 80063b0:	685b      	ldr	r3, [r3, #4]
 80063b2:	3305      	adds	r3, #5
 80063b4:	781b      	ldrb	r3, [r3, #0]
 80063b6:	021a      	lsls	r2, r3, #8
 80063b8:	687b      	ldr	r3, [r7, #4]
 80063ba:	685b      	ldr	r3, [r3, #4]
 80063bc:	3304      	adds	r3, #4
 80063be:	781b      	ldrb	r3, [r3, #0]
 80063c0:	4619      	mov	r1, r3
 80063c2:	687b      	ldr	r3, [r7, #4]
 80063c4:	681b      	ldr	r3, [r3, #0]
 80063c6:	430a      	orrs	r2, r1
 80063c8:	f8c3 2300 	str.w	r2, [r3, #768]	; 0x300
  /* Set MAC addr bits 0 to 31 */
  heth->Instance->MACA0LR = (((uint32_t)(heth->Init.MACAddr[3]) << 24) | ((uint32_t)(heth->Init.MACAddr[2]) << 16) |
 80063cc:	687b      	ldr	r3, [r7, #4]
 80063ce:	685b      	ldr	r3, [r3, #4]
 80063d0:	3303      	adds	r3, #3
 80063d2:	781b      	ldrb	r3, [r3, #0]
 80063d4:	061a      	lsls	r2, r3, #24
 80063d6:	687b      	ldr	r3, [r7, #4]
 80063d8:	685b      	ldr	r3, [r3, #4]
 80063da:	3302      	adds	r3, #2
 80063dc:	781b      	ldrb	r3, [r3, #0]
 80063de:	041b      	lsls	r3, r3, #16
 80063e0:	431a      	orrs	r2, r3
                             ((uint32_t)(heth->Init.MACAddr[1]) << 8) | (uint32_t)heth->Init.MACAddr[0]);
 80063e2:	687b      	ldr	r3, [r7, #4]
 80063e4:	685b      	ldr	r3, [r3, #4]
 80063e6:	3301      	adds	r3, #1
 80063e8:	781b      	ldrb	r3, [r3, #0]
 80063ea:	021b      	lsls	r3, r3, #8
  heth->Instance->MACA0LR = (((uint32_t)(heth->Init.MACAddr[3]) << 24) | ((uint32_t)(heth->Init.MACAddr[2]) << 16) |
 80063ec:	431a      	orrs	r2, r3
                             ((uint32_t)(heth->Init.MACAddr[1]) << 8) | (uint32_t)heth->Init.MACAddr[0]);
 80063ee:	687b      	ldr	r3, [r7, #4]
 80063f0:	685b      	ldr	r3, [r3, #4]
 80063f2:	781b      	ldrb	r3, [r3, #0]
 80063f4:	4619      	mov	r1, r3
  heth->Instance->MACA0LR = (((uint32_t)(heth->Init.MACAddr[3]) << 24) | ((uint32_t)(heth->Init.MACAddr[2]) << 16) |
 80063f6:	687b      	ldr	r3, [r7, #4]
 80063f8:	681b      	ldr	r3, [r3, #0]
                             ((uint32_t)(heth->Init.MACAddr[1]) << 8) | (uint32_t)heth->Init.MACAddr[0]);
 80063fa:	430a      	orrs	r2, r1
  heth->Instance->MACA0LR = (((uint32_t)(heth->Init.MACAddr[3]) << 24) | ((uint32_t)(heth->Init.MACAddr[2]) << 16) |
 80063fc:	f8c3 2304 	str.w	r2, [r3, #772]	; 0x304

  heth->ErrorCode = HAL_ETH_ERROR_NONE;
 8006400:	687b      	ldr	r3, [r7, #4]
 8006402:	2200      	movs	r2, #0
 8006404:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  heth->gState = HAL_ETH_STATE_READY;
 8006408:	687b      	ldr	r3, [r7, #4]
 800640a:	2210      	movs	r2, #16
 800640c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 8006410:	2300      	movs	r3, #0
}
 8006412:	4618      	mov	r0, r3
 8006414:	3710      	adds	r7, #16
 8006416:	46bd      	mov	sp, r7
 8006418:	bd80      	pop	{r7, pc}
 800641a:	bf00      	nop
 800641c:	58024400 	.word	0x58024400
 8006420:	58000400 	.word	0x58000400
 8006424:	431bde83 	.word	0x431bde83
 8006428:	ffff8001 	.word	0xffff8001

0800642c <HAL_ETH_Start>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Start(ETH_HandleTypeDef *heth)
{
 800642c:	b580      	push	{r7, lr}
 800642e:	b082      	sub	sp, #8
 8006430:	af00      	add	r7, sp, #0
 8006432:	6078      	str	r0, [r7, #4]
  if (heth->gState == HAL_ETH_STATE_READY)
 8006434:	687b      	ldr	r3, [r7, #4]
 8006436:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800643a:	2b10      	cmp	r3, #16
 800643c:	d153      	bne.n	80064e6 <HAL_ETH_Start+0xba>
  {
    heth->gState = HAL_ETH_STATE_BUSY;
 800643e:	687b      	ldr	r3, [r7, #4]
 8006440:	2223      	movs	r2, #35	; 0x23
 8006442:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    /* Set nombre of descriptors to build */
    heth->RxDescList.RxBuildDescCnt = ETH_RX_DESC_CNT;
 8006446:	687b      	ldr	r3, [r7, #4]
 8006448:	2204      	movs	r2, #4
 800644a:	66da      	str	r2, [r3, #108]	; 0x6c

    /* Build all descriptors */
    ETH_UpdateDescriptor(heth);
 800644c:	6878      	ldr	r0, [r7, #4]
 800644e:	f000 f936 	bl	80066be <ETH_UpdateDescriptor>

    /* Enable the MAC transmission */
    SET_BIT(heth->Instance->MACCR, ETH_MACCR_TE);
 8006452:	687b      	ldr	r3, [r7, #4]
 8006454:	681b      	ldr	r3, [r3, #0]
 8006456:	681a      	ldr	r2, [r3, #0]
 8006458:	687b      	ldr	r3, [r7, #4]
 800645a:	681b      	ldr	r3, [r3, #0]
 800645c:	f042 0202 	orr.w	r2, r2, #2
 8006460:	601a      	str	r2, [r3, #0]

    /* Enable the MAC reception */
    SET_BIT(heth->Instance->MACCR, ETH_MACCR_RE);
 8006462:	687b      	ldr	r3, [r7, #4]
 8006464:	681b      	ldr	r3, [r3, #0]
 8006466:	681a      	ldr	r2, [r3, #0]
 8006468:	687b      	ldr	r3, [r7, #4]
 800646a:	681b      	ldr	r3, [r3, #0]
 800646c:	f042 0201 	orr.w	r2, r2, #1
 8006470:	601a      	str	r2, [r3, #0]

    /* Set the Flush Transmit FIFO bit */
    SET_BIT(heth->Instance->MTLTQOMR, ETH_MTLTQOMR_FTQ);
 8006472:	687b      	ldr	r3, [r7, #4]
 8006474:	681b      	ldr	r3, [r3, #0]
 8006476:	f8d3 2d00 	ldr.w	r2, [r3, #3328]	; 0xd00
 800647a:	687b      	ldr	r3, [r7, #4]
 800647c:	681b      	ldr	r3, [r3, #0]
 800647e:	f042 0201 	orr.w	r2, r2, #1
 8006482:	f8c3 2d00 	str.w	r2, [r3, #3328]	; 0xd00

    /* Enable the DMA transmission */
    SET_BIT(heth->Instance->DMACTCR, ETH_DMACTCR_ST);
 8006486:	687b      	ldr	r3, [r7, #4]
 8006488:	681b      	ldr	r3, [r3, #0]
 800648a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800648e:	f8d3 3104 	ldr.w	r3, [r3, #260]	; 0x104
 8006492:	687a      	ldr	r2, [r7, #4]
 8006494:	6812      	ldr	r2, [r2, #0]
 8006496:	f043 0301 	orr.w	r3, r3, #1
 800649a:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 800649e:	f8c2 3104 	str.w	r3, [r2, #260]	; 0x104

    /* Enable the DMA reception */
    SET_BIT(heth->Instance->DMACRCR, ETH_DMACRCR_SR);
 80064a2:	687b      	ldr	r3, [r7, #4]
 80064a4:	681b      	ldr	r3, [r3, #0]
 80064a6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80064aa:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 80064ae:	687a      	ldr	r2, [r7, #4]
 80064b0:	6812      	ldr	r2, [r2, #0]
 80064b2:	f043 0301 	orr.w	r3, r3, #1
 80064b6:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 80064ba:	f8c2 3108 	str.w	r3, [r2, #264]	; 0x108

    /* Clear Tx and Rx process stopped flags */
    heth->Instance->DMACSR |= (ETH_DMACSR_TPS | ETH_DMACSR_RPS);
 80064be:	687b      	ldr	r3, [r7, #4]
 80064c0:	681b      	ldr	r3, [r3, #0]
 80064c2:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80064c6:	f8d3 3160 	ldr.w	r3, [r3, #352]	; 0x160
 80064ca:	687a      	ldr	r2, [r7, #4]
 80064cc:	6812      	ldr	r2, [r2, #0]
 80064ce:	f443 7381 	orr.w	r3, r3, #258	; 0x102
 80064d2:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 80064d6:	f8c2 3160 	str.w	r3, [r2, #352]	; 0x160

    heth->gState = HAL_ETH_STATE_STARTED;
 80064da:	687b      	ldr	r3, [r7, #4]
 80064dc:	2223      	movs	r2, #35	; 0x23
 80064de:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    return HAL_OK;
 80064e2:	2300      	movs	r3, #0
 80064e4:	e000      	b.n	80064e8 <HAL_ETH_Start+0xbc>
  }
  else
  {
    return HAL_ERROR;
 80064e6:	2301      	movs	r3, #1
  }
}
 80064e8:	4618      	mov	r0, r3
 80064ea:	3708      	adds	r7, #8
 80064ec:	46bd      	mov	sp, r7
 80064ee:	bd80      	pop	{r7, pc}

080064f0 <HAL_ETH_Stop>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Stop(ETH_HandleTypeDef *heth)
{
 80064f0:	b480      	push	{r7}
 80064f2:	b083      	sub	sp, #12
 80064f4:	af00      	add	r7, sp, #0
 80064f6:	6078      	str	r0, [r7, #4]
  if (heth->gState == HAL_ETH_STATE_STARTED)
 80064f8:	687b      	ldr	r3, [r7, #4]
 80064fa:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80064fe:	2b23      	cmp	r3, #35	; 0x23
 8006500:	d13f      	bne.n	8006582 <HAL_ETH_Stop+0x92>
  {
    /* Set the ETH peripheral state to BUSY */
    heth->gState = HAL_ETH_STATE_BUSY;
 8006502:	687b      	ldr	r3, [r7, #4]
 8006504:	2223      	movs	r2, #35	; 0x23
 8006506:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    /* Disable the DMA transmission */
    CLEAR_BIT(heth->Instance->DMACTCR, ETH_DMACTCR_ST);
 800650a:	687b      	ldr	r3, [r7, #4]
 800650c:	681b      	ldr	r3, [r3, #0]
 800650e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8006512:	f8d3 3104 	ldr.w	r3, [r3, #260]	; 0x104
 8006516:	687a      	ldr	r2, [r7, #4]
 8006518:	6812      	ldr	r2, [r2, #0]
 800651a:	f023 0301 	bic.w	r3, r3, #1
 800651e:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8006522:	f8c2 3104 	str.w	r3, [r2, #260]	; 0x104

    /* Disable the DMA reception */
    CLEAR_BIT(heth->Instance->DMACRCR, ETH_DMACRCR_SR);
 8006526:	687b      	ldr	r3, [r7, #4]
 8006528:	681b      	ldr	r3, [r3, #0]
 800652a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800652e:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 8006532:	687a      	ldr	r2, [r7, #4]
 8006534:	6812      	ldr	r2, [r2, #0]
 8006536:	f023 0301 	bic.w	r3, r3, #1
 800653a:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 800653e:	f8c2 3108 	str.w	r3, [r2, #264]	; 0x108

    /* Disable the MAC reception */
    CLEAR_BIT(heth->Instance->MACCR, ETH_MACCR_RE);
 8006542:	687b      	ldr	r3, [r7, #4]
 8006544:	681b      	ldr	r3, [r3, #0]
 8006546:	681a      	ldr	r2, [r3, #0]
 8006548:	687b      	ldr	r3, [r7, #4]
 800654a:	681b      	ldr	r3, [r3, #0]
 800654c:	f022 0201 	bic.w	r2, r2, #1
 8006550:	601a      	str	r2, [r3, #0]

    /* Set the Flush Transmit FIFO bit */
    SET_BIT(heth->Instance->MTLTQOMR, ETH_MTLTQOMR_FTQ);
 8006552:	687b      	ldr	r3, [r7, #4]
 8006554:	681b      	ldr	r3, [r3, #0]
 8006556:	f8d3 2d00 	ldr.w	r2, [r3, #3328]	; 0xd00
 800655a:	687b      	ldr	r3, [r7, #4]
 800655c:	681b      	ldr	r3, [r3, #0]
 800655e:	f042 0201 	orr.w	r2, r2, #1
 8006562:	f8c3 2d00 	str.w	r2, [r3, #3328]	; 0xd00

    /* Disable the MAC transmission */
    CLEAR_BIT(heth->Instance->MACCR, ETH_MACCR_TE);
 8006566:	687b      	ldr	r3, [r7, #4]
 8006568:	681b      	ldr	r3, [r3, #0]
 800656a:	681a      	ldr	r2, [r3, #0]
 800656c:	687b      	ldr	r3, [r7, #4]
 800656e:	681b      	ldr	r3, [r3, #0]
 8006570:	f022 0202 	bic.w	r2, r2, #2
 8006574:	601a      	str	r2, [r3, #0]

    heth->gState = HAL_ETH_STATE_READY;
 8006576:	687b      	ldr	r3, [r7, #4]
 8006578:	2210      	movs	r2, #16
 800657a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    /* Return function status */
    return HAL_OK;
 800657e:	2300      	movs	r3, #0
 8006580:	e000      	b.n	8006584 <HAL_ETH_Stop+0x94>
  }
  else
  {
    return HAL_ERROR;
 8006582:	2301      	movs	r3, #1
  }
}
 8006584:	4618      	mov	r0, r3
 8006586:	370c      	adds	r7, #12
 8006588:	46bd      	mov	sp, r7
 800658a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800658e:	4770      	bx	lr

08006590 <HAL_ETH_Transmit>:
  * @param  pTxConfig: Hold the configuration of packet to be transmitted
  * @param  Timeout: timeout value
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Transmit(ETH_HandleTypeDef *heth, ETH_TxPacketConfig *pTxConfig, uint32_t Timeout)
{
 8006590:	b580      	push	{r7, lr}
 8006592:	b086      	sub	sp, #24
 8006594:	af00      	add	r7, sp, #0
 8006596:	60f8      	str	r0, [r7, #12]
 8006598:	60b9      	str	r1, [r7, #8]
 800659a:	607a      	str	r2, [r7, #4]
  uint32_t tickstart;
  ETH_DMADescTypeDef *dmatxdesc;

  if (pTxConfig == NULL)
 800659c:	68bb      	ldr	r3, [r7, #8]
 800659e:	2b00      	cmp	r3, #0
 80065a0:	d109      	bne.n	80065b6 <HAL_ETH_Transmit+0x26>
  {
    heth->ErrorCode |= HAL_ETH_ERROR_PARAM;
 80065a2:	68fb      	ldr	r3, [r7, #12]
 80065a4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80065a8:	f043 0201 	orr.w	r2, r3, #1
 80065ac:	68fb      	ldr	r3, [r7, #12]
 80065ae:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
    return HAL_ERROR;
 80065b2:	2301      	movs	r3, #1
 80065b4:	e07f      	b.n	80066b6 <HAL_ETH_Transmit+0x126>
  }

  if (heth->gState == HAL_ETH_STATE_STARTED)
 80065b6:	68fb      	ldr	r3, [r7, #12]
 80065b8:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80065bc:	2b23      	cmp	r3, #35	; 0x23
 80065be:	d179      	bne.n	80066b4 <HAL_ETH_Transmit+0x124>
  {
    /* Config DMA Tx descriptor by Tx Packet info */
    if (ETH_Prepare_Tx_Descriptors(heth, pTxConfig, 0) != HAL_ETH_ERROR_NONE)
 80065c0:	2200      	movs	r2, #0
 80065c2:	68b9      	ldr	r1, [r7, #8]
 80065c4:	68f8      	ldr	r0, [r7, #12]
 80065c6:	f000 febd 	bl	8007344 <ETH_Prepare_Tx_Descriptors>
 80065ca:	4603      	mov	r3, r0
 80065cc:	2b00      	cmp	r3, #0
 80065ce:	d009      	beq.n	80065e4 <HAL_ETH_Transmit+0x54>
    {
      /* Set the ETH error code */
      heth->ErrorCode |= HAL_ETH_ERROR_BUSY;
 80065d0:	68fb      	ldr	r3, [r7, #12]
 80065d2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80065d6:	f043 0202 	orr.w	r2, r3, #2
 80065da:	68fb      	ldr	r3, [r7, #12]
 80065dc:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
      return HAL_ERROR;
 80065e0:	2301      	movs	r3, #1
 80065e2:	e068      	b.n	80066b6 <HAL_ETH_Transmit+0x126>
  __ASM volatile ("dsb 0xF":::"memory");
 80065e4:	f3bf 8f4f 	dsb	sy
}
 80065e8:	bf00      	nop
    }

    /* Ensure completion of descriptor preparation before transmission start */
    __DSB();

    dmatxdesc = (ETH_DMADescTypeDef *)(&heth->TxDescList)->TxDesc[heth->TxDescList.CurTxDesc];
 80065ea:	68fb      	ldr	r3, [r7, #12]
 80065ec:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80065ee:	68fb      	ldr	r3, [r7, #12]
 80065f0:	3206      	adds	r2, #6
 80065f2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80065f6:	617b      	str	r3, [r7, #20]

    /* Incr current tx desc index */
    INCR_TX_DESC_INDEX(heth->TxDescList.CurTxDesc, 1U);
 80065f8:	68fb      	ldr	r3, [r7, #12]
 80065fa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80065fc:	1c5a      	adds	r2, r3, #1
 80065fe:	68fb      	ldr	r3, [r7, #12]
 8006600:	629a      	str	r2, [r3, #40]	; 0x28
 8006602:	68fb      	ldr	r3, [r7, #12]
 8006604:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006606:	2b03      	cmp	r3, #3
 8006608:	d904      	bls.n	8006614 <HAL_ETH_Transmit+0x84>
 800660a:	68fb      	ldr	r3, [r7, #12]
 800660c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800660e:	1f1a      	subs	r2, r3, #4
 8006610:	68fb      	ldr	r3, [r7, #12]
 8006612:	629a      	str	r2, [r3, #40]	; 0x28

    /* Start transmission */
    /* issue a poll command to Tx DMA by writing address of next immediate free descriptor */
    WRITE_REG(heth->Instance->DMACTDTPR, (uint32_t)(heth->TxDescList.TxDesc[heth->TxDescList.CurTxDesc]));
 8006614:	68fb      	ldr	r3, [r7, #12]
 8006616:	6a99      	ldr	r1, [r3, #40]	; 0x28
 8006618:	68fb      	ldr	r3, [r7, #12]
 800661a:	681a      	ldr	r2, [r3, #0]
 800661c:	68fb      	ldr	r3, [r7, #12]
 800661e:	3106      	adds	r1, #6
 8006620:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8006624:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8006628:	f8c2 3120 	str.w	r3, [r2, #288]	; 0x120

    tickstart = HAL_GetTick();
 800662c:	f7fd fce8 	bl	8004000 <HAL_GetTick>
 8006630:	6138      	str	r0, [r7, #16]

    /* Wait for data to be transmitted or timeout occurred */
    while ((dmatxdesc->DESC3 & ETH_DMATXNDESCWBF_OWN) != (uint32_t)RESET)
 8006632:	e039      	b.n	80066a8 <HAL_ETH_Transmit+0x118>
    {
      if ((heth->Instance->DMACSR & ETH_DMACSR_FBE) != (uint32_t)RESET)
 8006634:	68fb      	ldr	r3, [r7, #12]
 8006636:	681b      	ldr	r3, [r3, #0]
 8006638:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800663c:	f8d3 3160 	ldr.w	r3, [r3, #352]	; 0x160
 8006640:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8006644:	2b00      	cmp	r3, #0
 8006646:	d012      	beq.n	800666e <HAL_ETH_Transmit+0xde>
      {
        heth->ErrorCode |= HAL_ETH_ERROR_DMA;
 8006648:	68fb      	ldr	r3, [r7, #12]
 800664a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800664e:	f043 0208 	orr.w	r2, r3, #8
 8006652:	68fb      	ldr	r3, [r7, #12]
 8006654:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
        heth->DMAErrorCode = heth->Instance->DMACSR;
 8006658:	68fb      	ldr	r3, [r7, #12]
 800665a:	681b      	ldr	r3, [r3, #0]
 800665c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8006660:	f8d3 2160 	ldr.w	r2, [r3, #352]	; 0x160
 8006664:	68fb      	ldr	r3, [r7, #12]
 8006666:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        /* Return function status */
        return HAL_ERROR;
 800666a:	2301      	movs	r3, #1
 800666c:	e023      	b.n	80066b6 <HAL_ETH_Transmit+0x126>
      }

      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 800666e:	687b      	ldr	r3, [r7, #4]
 8006670:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006674:	d018      	beq.n	80066a8 <HAL_ETH_Transmit+0x118>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8006676:	f7fd fcc3 	bl	8004000 <HAL_GetTick>
 800667a:	4602      	mov	r2, r0
 800667c:	693b      	ldr	r3, [r7, #16]
 800667e:	1ad3      	subs	r3, r2, r3
 8006680:	687a      	ldr	r2, [r7, #4]
 8006682:	429a      	cmp	r2, r3
 8006684:	d302      	bcc.n	800668c <HAL_ETH_Transmit+0xfc>
 8006686:	687b      	ldr	r3, [r7, #4]
 8006688:	2b00      	cmp	r3, #0
 800668a:	d10d      	bne.n	80066a8 <HAL_ETH_Transmit+0x118>
        {
          heth->ErrorCode |= HAL_ETH_ERROR_TIMEOUT;
 800668c:	68fb      	ldr	r3, [r7, #12]
 800668e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006692:	f043 0204 	orr.w	r2, r3, #4
 8006696:	68fb      	ldr	r3, [r7, #12]
 8006698:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
          /* Clear TX descriptor so that we can proceed */
          dmatxdesc->DESC3 = (ETH_DMATXNDESCWBF_FD | ETH_DMATXNDESCWBF_LD);
 800669c:	697b      	ldr	r3, [r7, #20]
 800669e:	f04f 5240 	mov.w	r2, #805306368	; 0x30000000
 80066a2:	60da      	str	r2, [r3, #12]
          return HAL_ERROR;
 80066a4:	2301      	movs	r3, #1
 80066a6:	e006      	b.n	80066b6 <HAL_ETH_Transmit+0x126>
    while ((dmatxdesc->DESC3 & ETH_DMATXNDESCWBF_OWN) != (uint32_t)RESET)
 80066a8:	697b      	ldr	r3, [r7, #20]
 80066aa:	68db      	ldr	r3, [r3, #12]
 80066ac:	2b00      	cmp	r3, #0
 80066ae:	dbc1      	blt.n	8006634 <HAL_ETH_Transmit+0xa4>
        }
      }
    }

    /* Return function status */
    return HAL_OK;
 80066b0:	2300      	movs	r3, #0
 80066b2:	e000      	b.n	80066b6 <HAL_ETH_Transmit+0x126>
  }
  else
  {
    return HAL_ERROR;
 80066b4:	2301      	movs	r3, #1
  }
}
 80066b6:	4618      	mov	r0, r3
 80066b8:	3718      	adds	r7, #24
 80066ba:	46bd      	mov	sp, r7
 80066bc:	bd80      	pop	{r7, pc}

080066be <ETH_UpdateDescriptor>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
static void ETH_UpdateDescriptor(ETH_HandleTypeDef *heth)
{
 80066be:	b580      	push	{r7, lr}
 80066c0:	b088      	sub	sp, #32
 80066c2:	af00      	add	r7, sp, #0
 80066c4:	6078      	str	r0, [r7, #4]
  uint32_t descidx;
  uint32_t desccount;
  ETH_DMADescTypeDef *dmarxdesc;
  uint8_t *buff = NULL;
 80066c6:	2300      	movs	r3, #0
 80066c8:	60fb      	str	r3, [r7, #12]
  uint8_t allocStatus = 1U;
 80066ca:	2301      	movs	r3, #1
 80066cc:	74fb      	strb	r3, [r7, #19]

  descidx = heth->RxDescList.RxBuildDescIdx;
 80066ce:	687b      	ldr	r3, [r7, #4]
 80066d0:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80066d2:	61fb      	str	r3, [r7, #28]
  dmarxdesc = (ETH_DMADescTypeDef *)heth->RxDescList.RxDesc[descidx];
 80066d4:	687b      	ldr	r3, [r7, #4]
 80066d6:	69fa      	ldr	r2, [r7, #28]
 80066d8:	3212      	adds	r2, #18
 80066da:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80066de:	617b      	str	r3, [r7, #20]
  desccount = heth->RxDescList.RxBuildDescCnt;
 80066e0:	687b      	ldr	r3, [r7, #4]
 80066e2:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80066e4:	61bb      	str	r3, [r7, #24]

  while ((desccount > 0U) && (allocStatus != 0U))
 80066e6:	e03b      	b.n	8006760 <ETH_UpdateDescriptor+0xa2>
  {
    /* Check if a buffer's attached the descriptor */
    if (READ_REG(dmarxdesc->BackupAddr0) == 0U)
 80066e8:	697b      	ldr	r3, [r7, #20]
 80066ea:	691b      	ldr	r3, [r3, #16]
 80066ec:	2b00      	cmp	r3, #0
 80066ee:	d112      	bne.n	8006716 <ETH_UpdateDescriptor+0x58>
#if (USE_HAL_ETH_REGISTER_CALLBACKS == 1)
      /*Call registered Allocate callback*/
      heth->rxAllocateCallback(&buff);
#else
      /* Allocate callback */
      HAL_ETH_RxAllocateCallback(&buff);
 80066f0:	f107 030c 	add.w	r3, r7, #12
 80066f4:	4618      	mov	r0, r3
 80066f6:	f008 ffc1 	bl	800f67c <HAL_ETH_RxAllocateCallback>
#endif  /* USE_HAL_ETH_REGISTER_CALLBACKS */
      if (buff == NULL)
 80066fa:	68fb      	ldr	r3, [r7, #12]
 80066fc:	2b00      	cmp	r3, #0
 80066fe:	d102      	bne.n	8006706 <ETH_UpdateDescriptor+0x48>
      {
        allocStatus = 0U;
 8006700:	2300      	movs	r3, #0
 8006702:	74fb      	strb	r3, [r7, #19]
 8006704:	e007      	b.n	8006716 <ETH_UpdateDescriptor+0x58>
      }
      else
      {
        WRITE_REG(dmarxdesc->BackupAddr0, (uint32_t)buff);
 8006706:	68fb      	ldr	r3, [r7, #12]
 8006708:	461a      	mov	r2, r3
 800670a:	697b      	ldr	r3, [r7, #20]
 800670c:	611a      	str	r2, [r3, #16]
        WRITE_REG(dmarxdesc->DESC0, (uint32_t)buff);
 800670e:	68fb      	ldr	r3, [r7, #12]
 8006710:	461a      	mov	r2, r3
 8006712:	697b      	ldr	r3, [r7, #20]
 8006714:	601a      	str	r2, [r3, #0]
      }
    }

    if (allocStatus != 0U)
 8006716:	7cfb      	ldrb	r3, [r7, #19]
 8006718:	2b00      	cmp	r3, #0
 800671a:	d021      	beq.n	8006760 <ETH_UpdateDescriptor+0xa2>
  __ASM volatile ("dmb 0xF":::"memory");
 800671c:	f3bf 8f5f 	dmb	sy
}
 8006720:	bf00      	nop
    {
      /* Ensure rest of descriptor is written to RAM before the OWN bit */
      __DMB();

      if (heth->RxDescList.ItMode != 0U)
 8006722:	687b      	ldr	r3, [r7, #4]
 8006724:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006726:	2b00      	cmp	r3, #0
 8006728:	d004      	beq.n	8006734 <ETH_UpdateDescriptor+0x76>
      {
        WRITE_REG(dmarxdesc->DESC3, ETH_DMARXNDESCRF_OWN | ETH_DMARXNDESCRF_BUF1V | ETH_DMARXNDESCRF_IOC);
 800672a:	697b      	ldr	r3, [r7, #20]
 800672c:	f04f 4241 	mov.w	r2, #3238002688	; 0xc1000000
 8006730:	60da      	str	r2, [r3, #12]
 8006732:	e003      	b.n	800673c <ETH_UpdateDescriptor+0x7e>
      }
      else
      {
        WRITE_REG(dmarxdesc->DESC3, ETH_DMARXNDESCRF_OWN | ETH_DMARXNDESCRF_BUF1V);
 8006734:	697b      	ldr	r3, [r7, #20]
 8006736:	f04f 4201 	mov.w	r2, #2164260864	; 0x81000000
 800673a:	60da      	str	r2, [r3, #12]
      }

      /* Increment current rx descriptor index */
      INCR_RX_DESC_INDEX(descidx, 1U);
 800673c:	69fb      	ldr	r3, [r7, #28]
 800673e:	3301      	adds	r3, #1
 8006740:	61fb      	str	r3, [r7, #28]
 8006742:	69fb      	ldr	r3, [r7, #28]
 8006744:	2b03      	cmp	r3, #3
 8006746:	d902      	bls.n	800674e <ETH_UpdateDescriptor+0x90>
 8006748:	69fb      	ldr	r3, [r7, #28]
 800674a:	3b04      	subs	r3, #4
 800674c:	61fb      	str	r3, [r7, #28]
      /* Get current descriptor address */
      dmarxdesc = (ETH_DMADescTypeDef *)heth->RxDescList.RxDesc[descidx];
 800674e:	687b      	ldr	r3, [r7, #4]
 8006750:	69fa      	ldr	r2, [r7, #28]
 8006752:	3212      	adds	r2, #18
 8006754:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006758:	617b      	str	r3, [r7, #20]
      desccount--;
 800675a:	69bb      	ldr	r3, [r7, #24]
 800675c:	3b01      	subs	r3, #1
 800675e:	61bb      	str	r3, [r7, #24]
  while ((desccount > 0U) && (allocStatus != 0U))
 8006760:	69bb      	ldr	r3, [r7, #24]
 8006762:	2b00      	cmp	r3, #0
 8006764:	d002      	beq.n	800676c <ETH_UpdateDescriptor+0xae>
 8006766:	7cfb      	ldrb	r3, [r7, #19]
 8006768:	2b00      	cmp	r3, #0
 800676a:	d1bd      	bne.n	80066e8 <ETH_UpdateDescriptor+0x2a>
    }
  }

  if (heth->RxDescList.RxBuildDescCnt != desccount)
 800676c:	687b      	ldr	r3, [r7, #4]
 800676e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8006770:	69ba      	ldr	r2, [r7, #24]
 8006772:	429a      	cmp	r2, r3
 8006774:	d00d      	beq.n	8006792 <ETH_UpdateDescriptor+0xd4>
  {
    /* Set the Tail pointer address */
    WRITE_REG(heth->Instance->DMACRDTPR, 0);
 8006776:	687b      	ldr	r3, [r7, #4]
 8006778:	681b      	ldr	r3, [r3, #0]
 800677a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800677e:	461a      	mov	r2, r3
 8006780:	2300      	movs	r3, #0
 8006782:	f8c2 3128 	str.w	r3, [r2, #296]	; 0x128

    heth->RxDescList.RxBuildDescIdx = descidx;
 8006786:	687b      	ldr	r3, [r7, #4]
 8006788:	69fa      	ldr	r2, [r7, #28]
 800678a:	669a      	str	r2, [r3, #104]	; 0x68
    heth->RxDescList.RxBuildDescCnt = desccount;
 800678c:	687b      	ldr	r3, [r7, #4]
 800678e:	69ba      	ldr	r2, [r7, #24]
 8006790:	66da      	str	r2, [r3, #108]	; 0x6c
  }
}
 8006792:	bf00      	nop
 8006794:	3720      	adds	r7, #32
 8006796:	46bd      	mov	sp, r7
 8006798:	bd80      	pop	{r7, pc}

0800679a <HAL_ETH_ReadPHYRegister>:
  * @param pRegValue: parameter to hold read value
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_ReadPHYRegister(ETH_HandleTypeDef *heth, uint32_t PHYAddr, uint32_t PHYReg,
                                          uint32_t *pRegValue)
{
 800679a:	b580      	push	{r7, lr}
 800679c:	b086      	sub	sp, #24
 800679e:	af00      	add	r7, sp, #0
 80067a0:	60f8      	str	r0, [r7, #12]
 80067a2:	60b9      	str	r1, [r7, #8]
 80067a4:	607a      	str	r2, [r7, #4]
 80067a6:	603b      	str	r3, [r7, #0]
  uint32_t tickstart;
  uint32_t tmpreg;

  /* Check for the Busy flag */
  if (READ_BIT(heth->Instance->MACMDIOAR, ETH_MACMDIOAR_MB) != (uint32_t)RESET)
 80067a8:	68fb      	ldr	r3, [r7, #12]
 80067aa:	681b      	ldr	r3, [r3, #0]
 80067ac:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 80067b0:	f003 0301 	and.w	r3, r3, #1
 80067b4:	2b00      	cmp	r3, #0
 80067b6:	d001      	beq.n	80067bc <HAL_ETH_ReadPHYRegister+0x22>
  {
    return HAL_ERROR;
 80067b8:	2301      	movs	r3, #1
 80067ba:	e03e      	b.n	800683a <HAL_ETH_ReadPHYRegister+0xa0>
  }

  /* Get the  MACMDIOAR value */
  WRITE_REG(tmpreg, heth->Instance->MACMDIOAR);
 80067bc:	68fb      	ldr	r3, [r7, #12]
 80067be:	681b      	ldr	r3, [r3, #0]
 80067c0:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 80067c4:	617b      	str	r3, [r7, #20]
     - Set the PHY device address
     - Set the PHY register address
     - Set the read mode
     - Set the MII Busy bit */

  MODIFY_REG(tmpreg, ETH_MACMDIOAR_PA, (PHYAddr << 21));
 80067c6:	697b      	ldr	r3, [r7, #20]
 80067c8:	f023 7278 	bic.w	r2, r3, #65011712	; 0x3e00000
 80067cc:	68bb      	ldr	r3, [r7, #8]
 80067ce:	055b      	lsls	r3, r3, #21
 80067d0:	4313      	orrs	r3, r2
 80067d2:	617b      	str	r3, [r7, #20]
  MODIFY_REG(tmpreg, ETH_MACMDIOAR_RDA, (PHYReg << 16));
 80067d4:	697b      	ldr	r3, [r7, #20]
 80067d6:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 80067da:	687b      	ldr	r3, [r7, #4]
 80067dc:	041b      	lsls	r3, r3, #16
 80067de:	4313      	orrs	r3, r2
 80067e0:	617b      	str	r3, [r7, #20]
  MODIFY_REG(tmpreg, ETH_MACMDIOAR_MOC, ETH_MACMDIOAR_MOC_RD);
 80067e2:	697b      	ldr	r3, [r7, #20]
 80067e4:	f043 030c 	orr.w	r3, r3, #12
 80067e8:	617b      	str	r3, [r7, #20]
  SET_BIT(tmpreg, ETH_MACMDIOAR_MB);
 80067ea:	697b      	ldr	r3, [r7, #20]
 80067ec:	f043 0301 	orr.w	r3, r3, #1
 80067f0:	617b      	str	r3, [r7, #20]

  /* Write the result value into the MDII Address register */
  WRITE_REG(heth->Instance->MACMDIOAR, tmpreg);
 80067f2:	68fb      	ldr	r3, [r7, #12]
 80067f4:	681b      	ldr	r3, [r3, #0]
 80067f6:	697a      	ldr	r2, [r7, #20]
 80067f8:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200

  tickstart = HAL_GetTick();
 80067fc:	f7fd fc00 	bl	8004000 <HAL_GetTick>
 8006800:	6138      	str	r0, [r7, #16]

  /* Wait for the Busy flag */
  while (READ_BIT(heth->Instance->MACMDIOAR, ETH_MACMDIOAR_MB) > 0U)
 8006802:	e009      	b.n	8006818 <HAL_ETH_ReadPHYRegister+0x7e>
  {
    if (((HAL_GetTick() - tickstart) > ETH_MDIO_BUS_TIMEOUT))
 8006804:	f7fd fbfc 	bl	8004000 <HAL_GetTick>
 8006808:	4602      	mov	r2, r0
 800680a:	693b      	ldr	r3, [r7, #16]
 800680c:	1ad3      	subs	r3, r2, r3
 800680e:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8006812:	d901      	bls.n	8006818 <HAL_ETH_ReadPHYRegister+0x7e>
    {
      return HAL_ERROR;
 8006814:	2301      	movs	r3, #1
 8006816:	e010      	b.n	800683a <HAL_ETH_ReadPHYRegister+0xa0>
  while (READ_BIT(heth->Instance->MACMDIOAR, ETH_MACMDIOAR_MB) > 0U)
 8006818:	68fb      	ldr	r3, [r7, #12]
 800681a:	681b      	ldr	r3, [r3, #0]
 800681c:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8006820:	f003 0301 	and.w	r3, r3, #1
 8006824:	2b00      	cmp	r3, #0
 8006826:	d1ed      	bne.n	8006804 <HAL_ETH_ReadPHYRegister+0x6a>
    }
  }

  /* Get MACMIIDR value */
  WRITE_REG(*pRegValue, (uint16_t)heth->Instance->MACMDIODR);
 8006828:	68fb      	ldr	r3, [r7, #12]
 800682a:	681b      	ldr	r3, [r3, #0]
 800682c:	f8d3 3204 	ldr.w	r3, [r3, #516]	; 0x204
 8006830:	b29b      	uxth	r3, r3
 8006832:	461a      	mov	r2, r3
 8006834:	683b      	ldr	r3, [r7, #0]
 8006836:	601a      	str	r2, [r3, #0]

  return HAL_OK;
 8006838:	2300      	movs	r3, #0
}
 800683a:	4618      	mov	r0, r3
 800683c:	3718      	adds	r7, #24
 800683e:	46bd      	mov	sp, r7
 8006840:	bd80      	pop	{r7, pc}
	...

08006844 <HAL_ETH_WritePHYRegister>:
  * @param  RegValue: the value to write
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_WritePHYRegister(ETH_HandleTypeDef *heth, uint32_t PHYAddr, uint32_t PHYReg,
                                           uint32_t RegValue)
{
 8006844:	b580      	push	{r7, lr}
 8006846:	b086      	sub	sp, #24
 8006848:	af00      	add	r7, sp, #0
 800684a:	60f8      	str	r0, [r7, #12]
 800684c:	60b9      	str	r1, [r7, #8]
 800684e:	607a      	str	r2, [r7, #4]
 8006850:	603b      	str	r3, [r7, #0]
  uint32_t tickstart;
  uint32_t tmpreg;

  /* Check for the Busy flag */
  if (READ_BIT(heth->Instance->MACMDIOAR, ETH_MACMDIOAR_MB) != (uint32_t)RESET)
 8006852:	68fb      	ldr	r3, [r7, #12]
 8006854:	681b      	ldr	r3, [r3, #0]
 8006856:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 800685a:	f003 0301 	and.w	r3, r3, #1
 800685e:	2b00      	cmp	r3, #0
 8006860:	d001      	beq.n	8006866 <HAL_ETH_WritePHYRegister+0x22>
  {
    return HAL_ERROR;
 8006862:	2301      	movs	r3, #1
 8006864:	e03c      	b.n	80068e0 <HAL_ETH_WritePHYRegister+0x9c>
  }

  /* Get the  MACMDIOAR value */
  WRITE_REG(tmpreg, heth->Instance->MACMDIOAR);
 8006866:	68fb      	ldr	r3, [r7, #12]
 8006868:	681b      	ldr	r3, [r3, #0]
 800686a:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 800686e:	617b      	str	r3, [r7, #20]
     - Set the PHY device address
     - Set the PHY register address
     - Set the write mode
     - Set the MII Busy bit */

  MODIFY_REG(tmpreg, ETH_MACMDIOAR_PA, (PHYAddr << 21));
 8006870:	697b      	ldr	r3, [r7, #20]
 8006872:	f023 7278 	bic.w	r2, r3, #65011712	; 0x3e00000
 8006876:	68bb      	ldr	r3, [r7, #8]
 8006878:	055b      	lsls	r3, r3, #21
 800687a:	4313      	orrs	r3, r2
 800687c:	617b      	str	r3, [r7, #20]
  MODIFY_REG(tmpreg, ETH_MACMDIOAR_RDA, (PHYReg << 16));
 800687e:	697b      	ldr	r3, [r7, #20]
 8006880:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 8006884:	687b      	ldr	r3, [r7, #4]
 8006886:	041b      	lsls	r3, r3, #16
 8006888:	4313      	orrs	r3, r2
 800688a:	617b      	str	r3, [r7, #20]
  MODIFY_REG(tmpreg, ETH_MACMDIOAR_MOC, ETH_MACMDIOAR_MOC_WR);
 800688c:	697b      	ldr	r3, [r7, #20]
 800688e:	f023 030c 	bic.w	r3, r3, #12
 8006892:	f043 0304 	orr.w	r3, r3, #4
 8006896:	617b      	str	r3, [r7, #20]
  SET_BIT(tmpreg, ETH_MACMDIOAR_MB);
 8006898:	697b      	ldr	r3, [r7, #20]
 800689a:	f043 0301 	orr.w	r3, r3, #1
 800689e:	617b      	str	r3, [r7, #20]


  /* Give the value to the MII data register */
  WRITE_REG(ETH->MACMDIODR, (uint16_t)RegValue);
 80068a0:	683b      	ldr	r3, [r7, #0]
 80068a2:	b29a      	uxth	r2, r3
 80068a4:	4b10      	ldr	r3, [pc, #64]	; (80068e8 <HAL_ETH_WritePHYRegister+0xa4>)
 80068a6:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204

  /* Write the result value into the MII Address register */
  WRITE_REG(ETH->MACMDIOAR, tmpreg);
 80068aa:	4a0f      	ldr	r2, [pc, #60]	; (80068e8 <HAL_ETH_WritePHYRegister+0xa4>)
 80068ac:	697b      	ldr	r3, [r7, #20]
 80068ae:	f8c2 3200 	str.w	r3, [r2, #512]	; 0x200

  tickstart = HAL_GetTick();
 80068b2:	f7fd fba5 	bl	8004000 <HAL_GetTick>
 80068b6:	6138      	str	r0, [r7, #16]

  /* Wait for the Busy flag */
  while (READ_BIT(heth->Instance->MACMDIOAR, ETH_MACMDIOAR_MB) > 0U)
 80068b8:	e009      	b.n	80068ce <HAL_ETH_WritePHYRegister+0x8a>
  {
    if (((HAL_GetTick() - tickstart) > ETH_MDIO_BUS_TIMEOUT))
 80068ba:	f7fd fba1 	bl	8004000 <HAL_GetTick>
 80068be:	4602      	mov	r2, r0
 80068c0:	693b      	ldr	r3, [r7, #16]
 80068c2:	1ad3      	subs	r3, r2, r3
 80068c4:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80068c8:	d901      	bls.n	80068ce <HAL_ETH_WritePHYRegister+0x8a>
    {
      return HAL_ERROR;
 80068ca:	2301      	movs	r3, #1
 80068cc:	e008      	b.n	80068e0 <HAL_ETH_WritePHYRegister+0x9c>
  while (READ_BIT(heth->Instance->MACMDIOAR, ETH_MACMDIOAR_MB) > 0U)
 80068ce:	68fb      	ldr	r3, [r7, #12]
 80068d0:	681b      	ldr	r3, [r3, #0]
 80068d2:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 80068d6:	f003 0301 	and.w	r3, r3, #1
 80068da:	2b00      	cmp	r3, #0
 80068dc:	d1ed      	bne.n	80068ba <HAL_ETH_WritePHYRegister+0x76>
    }
  }

  return HAL_OK;
 80068de:	2300      	movs	r3, #0
}
 80068e0:	4618      	mov	r0, r3
 80068e2:	3718      	adds	r7, #24
 80068e4:	46bd      	mov	sp, r7
 80068e6:	bd80      	pop	{r7, pc}
 80068e8:	40028000 	.word	0x40028000

080068ec <HAL_ETH_GetMACConfig>:
  * @param  macconf: pointer to a ETH_MACConfigTypeDef structure that will hold
  *         the configuration of the MAC.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_ETH_GetMACConfig(ETH_HandleTypeDef *heth, ETH_MACConfigTypeDef *macconf)
{
 80068ec:	b480      	push	{r7}
 80068ee:	b083      	sub	sp, #12
 80068f0:	af00      	add	r7, sp, #0
 80068f2:	6078      	str	r0, [r7, #4]
 80068f4:	6039      	str	r1, [r7, #0]
  if (macconf == NULL)
 80068f6:	683b      	ldr	r3, [r7, #0]
 80068f8:	2b00      	cmp	r3, #0
 80068fa:	d101      	bne.n	8006900 <HAL_ETH_GetMACConfig+0x14>
  {
    return HAL_ERROR;
 80068fc:	2301      	movs	r3, #1
 80068fe:	e1c3      	b.n	8006c88 <HAL_ETH_GetMACConfig+0x39c>
  }

  /* Get MAC parameters */
  macconf->PreambleLength = READ_BIT(heth->Instance->MACCR, ETH_MACCR_PRELEN);
 8006900:	687b      	ldr	r3, [r7, #4]
 8006902:	681b      	ldr	r3, [r3, #0]
 8006904:	681b      	ldr	r3, [r3, #0]
 8006906:	f003 020c 	and.w	r2, r3, #12
 800690a:	683b      	ldr	r3, [r7, #0]
 800690c:	62da      	str	r2, [r3, #44]	; 0x2c
  macconf->DeferralCheck = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_DC) >> 4) > 0U) ? ENABLE : DISABLE;
 800690e:	687b      	ldr	r3, [r7, #4]
 8006910:	681b      	ldr	r3, [r3, #0]
 8006912:	681b      	ldr	r3, [r3, #0]
 8006914:	f003 0310 	and.w	r3, r3, #16
 8006918:	2b00      	cmp	r3, #0
 800691a:	bf14      	ite	ne
 800691c:	2301      	movne	r3, #1
 800691e:	2300      	moveq	r3, #0
 8006920:	b2db      	uxtb	r3, r3
 8006922:	461a      	mov	r2, r3
 8006924:	683b      	ldr	r3, [r7, #0]
 8006926:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
  macconf->BackOffLimit = READ_BIT(heth->Instance->MACCR, ETH_MACCR_BL);
 800692a:	687b      	ldr	r3, [r7, #4]
 800692c:	681b      	ldr	r3, [r3, #0]
 800692e:	681b      	ldr	r3, [r3, #0]
 8006930:	f003 0260 	and.w	r2, r3, #96	; 0x60
 8006934:	683b      	ldr	r3, [r7, #0]
 8006936:	625a      	str	r2, [r3, #36]	; 0x24
  macconf->RetryTransmission = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_DR) >> 8) == 0U) ? ENABLE : DISABLE;
 8006938:	687b      	ldr	r3, [r7, #4]
 800693a:	681b      	ldr	r3, [r3, #0]
 800693c:	681b      	ldr	r3, [r3, #0]
 800693e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006942:	2b00      	cmp	r3, #0
 8006944:	bf0c      	ite	eq
 8006946:	2301      	moveq	r3, #1
 8006948:	2300      	movne	r3, #0
 800694a:	b2db      	uxtb	r3, r3
 800694c:	461a      	mov	r2, r3
 800694e:	683b      	ldr	r3, [r7, #0]
 8006950:	f883 2020 	strb.w	r2, [r3, #32]
  macconf->CarrierSenseDuringTransmit = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_DCRS) >> 9) > 0U)
 8006954:	687b      	ldr	r3, [r7, #4]
 8006956:	681b      	ldr	r3, [r3, #0]
 8006958:	681b      	ldr	r3, [r3, #0]
 800695a:	f403 7300 	and.w	r3, r3, #512	; 0x200
                                        ? ENABLE : DISABLE;
 800695e:	2b00      	cmp	r3, #0
 8006960:	bf14      	ite	ne
 8006962:	2301      	movne	r3, #1
 8006964:	2300      	moveq	r3, #0
 8006966:	b2db      	uxtb	r3, r3
 8006968:	461a      	mov	r2, r3
  macconf->CarrierSenseDuringTransmit = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_DCRS) >> 9) > 0U)
 800696a:	683b      	ldr	r3, [r7, #0]
 800696c:	77da      	strb	r2, [r3, #31]
  macconf->ReceiveOwn = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_DO) >> 10) == 0U) ? ENABLE : DISABLE;
 800696e:	687b      	ldr	r3, [r7, #4]
 8006970:	681b      	ldr	r3, [r3, #0]
 8006972:	681b      	ldr	r3, [r3, #0]
 8006974:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8006978:	2b00      	cmp	r3, #0
 800697a:	bf0c      	ite	eq
 800697c:	2301      	moveq	r3, #1
 800697e:	2300      	movne	r3, #0
 8006980:	b2db      	uxtb	r3, r3
 8006982:	461a      	mov	r2, r3
 8006984:	683b      	ldr	r3, [r7, #0]
 8006986:	779a      	strb	r2, [r3, #30]
  macconf->CarrierSenseBeforeTransmit = ((READ_BIT(heth->Instance->MACCR,
 8006988:	687b      	ldr	r3, [r7, #4]
 800698a:	681b      	ldr	r3, [r3, #0]
 800698c:	681b      	ldr	r3, [r3, #0]
                                                   ETH_MACCR_ECRSFD) >> 11) > 0U) ? ENABLE : DISABLE;
 800698e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8006992:	2b00      	cmp	r3, #0
 8006994:	bf14      	ite	ne
 8006996:	2301      	movne	r3, #1
 8006998:	2300      	moveq	r3, #0
 800699a:	b2db      	uxtb	r3, r3
 800699c:	461a      	mov	r2, r3
  macconf->CarrierSenseBeforeTransmit = ((READ_BIT(heth->Instance->MACCR,
 800699e:	683b      	ldr	r3, [r7, #0]
 80069a0:	775a      	strb	r2, [r3, #29]
  macconf->LoopbackMode = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_LM) >> 12) > 0U) ? ENABLE : DISABLE;
 80069a2:	687b      	ldr	r3, [r7, #4]
 80069a4:	681b      	ldr	r3, [r3, #0]
 80069a6:	681b      	ldr	r3, [r3, #0]
 80069a8:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80069ac:	2b00      	cmp	r3, #0
 80069ae:	bf14      	ite	ne
 80069b0:	2301      	movne	r3, #1
 80069b2:	2300      	moveq	r3, #0
 80069b4:	b2db      	uxtb	r3, r3
 80069b6:	461a      	mov	r2, r3
 80069b8:	683b      	ldr	r3, [r7, #0]
 80069ba:	771a      	strb	r2, [r3, #28]
  macconf->DuplexMode = READ_BIT(heth->Instance->MACCR, ETH_MACCR_DM);
 80069bc:	687b      	ldr	r3, [r7, #4]
 80069be:	681b      	ldr	r3, [r3, #0]
 80069c0:	681b      	ldr	r3, [r3, #0]
 80069c2:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 80069c6:	683b      	ldr	r3, [r7, #0]
 80069c8:	619a      	str	r2, [r3, #24]
  macconf->Speed = READ_BIT(heth->Instance->MACCR, ETH_MACCR_FES);
 80069ca:	687b      	ldr	r3, [r7, #4]
 80069cc:	681b      	ldr	r3, [r3, #0]
 80069ce:	681b      	ldr	r3, [r3, #0]
 80069d0:	f403 4280 	and.w	r2, r3, #16384	; 0x4000
 80069d4:	683b      	ldr	r3, [r7, #0]
 80069d6:	615a      	str	r2, [r3, #20]
  macconf->JumboPacket = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_JE) >> 16) > 0U) ? ENABLE : DISABLE;
 80069d8:	687b      	ldr	r3, [r7, #4]
 80069da:	681b      	ldr	r3, [r3, #0]
 80069dc:	681b      	ldr	r3, [r3, #0]
 80069de:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80069e2:	2b00      	cmp	r3, #0
 80069e4:	bf14      	ite	ne
 80069e6:	2301      	movne	r3, #1
 80069e8:	2300      	moveq	r3, #0
 80069ea:	b2db      	uxtb	r3, r3
 80069ec:	461a      	mov	r2, r3
 80069ee:	683b      	ldr	r3, [r7, #0]
 80069f0:	749a      	strb	r2, [r3, #18]
  macconf->Jabber = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_JD) >> 17) == 0U) ? ENABLE : DISABLE;
 80069f2:	687b      	ldr	r3, [r7, #4]
 80069f4:	681b      	ldr	r3, [r3, #0]
 80069f6:	681b      	ldr	r3, [r3, #0]
 80069f8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80069fc:	2b00      	cmp	r3, #0
 80069fe:	bf0c      	ite	eq
 8006a00:	2301      	moveq	r3, #1
 8006a02:	2300      	movne	r3, #0
 8006a04:	b2db      	uxtb	r3, r3
 8006a06:	461a      	mov	r2, r3
 8006a08:	683b      	ldr	r3, [r7, #0]
 8006a0a:	745a      	strb	r2, [r3, #17]
  macconf->Watchdog = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_WD) >> 19) == 0U) ? ENABLE : DISABLE;
 8006a0c:	687b      	ldr	r3, [r7, #4]
 8006a0e:	681b      	ldr	r3, [r3, #0]
 8006a10:	681b      	ldr	r3, [r3, #0]
 8006a12:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8006a16:	2b00      	cmp	r3, #0
 8006a18:	bf0c      	ite	eq
 8006a1a:	2301      	moveq	r3, #1
 8006a1c:	2300      	movne	r3, #0
 8006a1e:	b2db      	uxtb	r3, r3
 8006a20:	461a      	mov	r2, r3
 8006a22:	683b      	ldr	r3, [r7, #0]
 8006a24:	741a      	strb	r2, [r3, #16]
  macconf->AutomaticPadCRCStrip = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_ACS) >> 20) > 0U) ? ENABLE : DISABLE;
 8006a26:	687b      	ldr	r3, [r7, #4]
 8006a28:	681b      	ldr	r3, [r3, #0]
 8006a2a:	681b      	ldr	r3, [r3, #0]
 8006a2c:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8006a30:	2b00      	cmp	r3, #0
 8006a32:	bf14      	ite	ne
 8006a34:	2301      	movne	r3, #1
 8006a36:	2300      	moveq	r3, #0
 8006a38:	b2db      	uxtb	r3, r3
 8006a3a:	461a      	mov	r2, r3
 8006a3c:	683b      	ldr	r3, [r7, #0]
 8006a3e:	73da      	strb	r2, [r3, #15]
  macconf->CRCStripTypePacket = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_CST) >> 21) > 0U) ? ENABLE : DISABLE;
 8006a40:	687b      	ldr	r3, [r7, #4]
 8006a42:	681b      	ldr	r3, [r3, #0]
 8006a44:	681b      	ldr	r3, [r3, #0]
 8006a46:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8006a4a:	2b00      	cmp	r3, #0
 8006a4c:	bf14      	ite	ne
 8006a4e:	2301      	movne	r3, #1
 8006a50:	2300      	moveq	r3, #0
 8006a52:	b2db      	uxtb	r3, r3
 8006a54:	461a      	mov	r2, r3
 8006a56:	683b      	ldr	r3, [r7, #0]
 8006a58:	739a      	strb	r2, [r3, #14]
  macconf->Support2KPacket = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_S2KP) >> 22) > 0U) ? ENABLE : DISABLE;
 8006a5a:	687b      	ldr	r3, [r7, #4]
 8006a5c:	681b      	ldr	r3, [r3, #0]
 8006a5e:	681b      	ldr	r3, [r3, #0]
 8006a60:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8006a64:	2b00      	cmp	r3, #0
 8006a66:	bf14      	ite	ne
 8006a68:	2301      	movne	r3, #1
 8006a6a:	2300      	moveq	r3, #0
 8006a6c:	b2db      	uxtb	r3, r3
 8006a6e:	461a      	mov	r2, r3
 8006a70:	683b      	ldr	r3, [r7, #0]
 8006a72:	735a      	strb	r2, [r3, #13]
  macconf->GiantPacketSizeLimitControl = ((READ_BIT(heth->Instance->MACCR,
 8006a74:	687b      	ldr	r3, [r7, #4]
 8006a76:	681b      	ldr	r3, [r3, #0]
 8006a78:	681b      	ldr	r3, [r3, #0]
                                                    ETH_MACCR_GPSLCE) >> 23) > 0U) ? ENABLE : DISABLE;
 8006a7a:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8006a7e:	2b00      	cmp	r3, #0
 8006a80:	bf14      	ite	ne
 8006a82:	2301      	movne	r3, #1
 8006a84:	2300      	moveq	r3, #0
 8006a86:	b2db      	uxtb	r3, r3
 8006a88:	461a      	mov	r2, r3
  macconf->GiantPacketSizeLimitControl = ((READ_BIT(heth->Instance->MACCR,
 8006a8a:	683b      	ldr	r3, [r7, #0]
 8006a8c:	731a      	strb	r2, [r3, #12]
  macconf->InterPacketGapVal = READ_BIT(heth->Instance->MACCR, ETH_MACCR_IPG);
 8006a8e:	687b      	ldr	r3, [r7, #4]
 8006a90:	681b      	ldr	r3, [r3, #0]
 8006a92:	681b      	ldr	r3, [r3, #0]
 8006a94:	f003 62e0 	and.w	r2, r3, #117440512	; 0x7000000
 8006a98:	683b      	ldr	r3, [r7, #0]
 8006a9a:	609a      	str	r2, [r3, #8]
  macconf->ChecksumOffload = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_IPC) >> 27) > 0U) ? ENABLE : DISABLE;
 8006a9c:	687b      	ldr	r3, [r7, #4]
 8006a9e:	681b      	ldr	r3, [r3, #0]
 8006aa0:	681b      	ldr	r3, [r3, #0]
 8006aa2:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8006aa6:	2b00      	cmp	r3, #0
 8006aa8:	bf14      	ite	ne
 8006aaa:	2301      	movne	r3, #1
 8006aac:	2300      	moveq	r3, #0
 8006aae:	b2db      	uxtb	r3, r3
 8006ab0:	461a      	mov	r2, r3
 8006ab2:	683b      	ldr	r3, [r7, #0]
 8006ab4:	711a      	strb	r2, [r3, #4]
  macconf->SourceAddrControl = READ_BIT(heth->Instance->MACCR, ETH_MACCR_SARC);
 8006ab6:	687b      	ldr	r3, [r7, #4]
 8006ab8:	681b      	ldr	r3, [r3, #0]
 8006aba:	681b      	ldr	r3, [r3, #0]
 8006abc:	f003 42e0 	and.w	r2, r3, #1879048192	; 0x70000000
 8006ac0:	683b      	ldr	r3, [r7, #0]
 8006ac2:	601a      	str	r2, [r3, #0]

  macconf->GiantPacketSizeLimit = READ_BIT(heth->Instance->MACECR, ETH_MACECR_GPSL);
 8006ac4:	687b      	ldr	r3, [r7, #4]
 8006ac6:	681b      	ldr	r3, [r3, #0]
 8006ac8:	685b      	ldr	r3, [r3, #4]
 8006aca:	f3c3 020d 	ubfx	r2, r3, #0, #14
 8006ace:	683b      	ldr	r3, [r7, #0]
 8006ad0:	635a      	str	r2, [r3, #52]	; 0x34
  macconf->CRCCheckingRxPackets = ((READ_BIT(heth->Instance->MACECR, ETH_MACECR_DCRCC) >> 16) == 0U) ? ENABLE : DISABLE;
 8006ad2:	687b      	ldr	r3, [r7, #4]
 8006ad4:	681b      	ldr	r3, [r3, #0]
 8006ad6:	685b      	ldr	r3, [r3, #4]
 8006ad8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8006adc:	2b00      	cmp	r3, #0
 8006ade:	bf0c      	ite	eq
 8006ae0:	2301      	moveq	r3, #1
 8006ae2:	2300      	movne	r3, #0
 8006ae4:	b2db      	uxtb	r3, r3
 8006ae6:	461a      	mov	r2, r3
 8006ae8:	683b      	ldr	r3, [r7, #0]
 8006aea:	f883 2032 	strb.w	r2, [r3, #50]	; 0x32
  macconf->SlowProtocolDetect = ((READ_BIT(heth->Instance->MACECR, ETH_MACECR_SPEN) >> 17) > 0U) ? ENABLE : DISABLE;
 8006aee:	687b      	ldr	r3, [r7, #4]
 8006af0:	681b      	ldr	r3, [r3, #0]
 8006af2:	685b      	ldr	r3, [r3, #4]
 8006af4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006af8:	2b00      	cmp	r3, #0
 8006afa:	bf14      	ite	ne
 8006afc:	2301      	movne	r3, #1
 8006afe:	2300      	moveq	r3, #0
 8006b00:	b2db      	uxtb	r3, r3
 8006b02:	461a      	mov	r2, r3
 8006b04:	683b      	ldr	r3, [r7, #0]
 8006b06:	f883 2031 	strb.w	r2, [r3, #49]	; 0x31
  macconf->UnicastSlowProtocolPacketDetect = ((READ_BIT(heth->Instance->MACECR,
 8006b0a:	687b      	ldr	r3, [r7, #4]
 8006b0c:	681b      	ldr	r3, [r3, #0]
 8006b0e:	685b      	ldr	r3, [r3, #4]
                                                        ETH_MACECR_USP) >> 18) > 0U) ? ENABLE : DISABLE;
 8006b10:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8006b14:	2b00      	cmp	r3, #0
 8006b16:	bf14      	ite	ne
 8006b18:	2301      	movne	r3, #1
 8006b1a:	2300      	moveq	r3, #0
 8006b1c:	b2db      	uxtb	r3, r3
 8006b1e:	461a      	mov	r2, r3
  macconf->UnicastSlowProtocolPacketDetect = ((READ_BIT(heth->Instance->MACECR,
 8006b20:	683b      	ldr	r3, [r7, #0]
 8006b22:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  macconf->ExtendedInterPacketGap = ((READ_BIT(heth->Instance->MACECR, ETH_MACECR_EIPGEN) >> 24) > 0U)
 8006b26:	687b      	ldr	r3, [r7, #4]
 8006b28:	681b      	ldr	r3, [r3, #0]
 8006b2a:	685b      	ldr	r3, [r3, #4]
 8006b2c:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
                                    ? ENABLE : DISABLE;
 8006b30:	2b00      	cmp	r3, #0
 8006b32:	bf14      	ite	ne
 8006b34:	2301      	movne	r3, #1
 8006b36:	2300      	moveq	r3, #0
 8006b38:	b2db      	uxtb	r3, r3
 8006b3a:	461a      	mov	r2, r3
  macconf->ExtendedInterPacketGap = ((READ_BIT(heth->Instance->MACECR, ETH_MACECR_EIPGEN) >> 24) > 0U)
 8006b3c:	683b      	ldr	r3, [r7, #0]
 8006b3e:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  macconf->ExtendedInterPacketGapVal = READ_BIT(heth->Instance->MACECR, ETH_MACECR_EIPG) >> 25;
 8006b42:	687b      	ldr	r3, [r7, #4]
 8006b44:	681b      	ldr	r3, [r3, #0]
 8006b46:	685b      	ldr	r3, [r3, #4]
 8006b48:	0e5b      	lsrs	r3, r3, #25
 8006b4a:	f003 021f 	and.w	r2, r3, #31
 8006b4e:	683b      	ldr	r3, [r7, #0]
 8006b50:	63da      	str	r2, [r3, #60]	; 0x3c


  macconf->ProgrammableWatchdog = ((READ_BIT(heth->Instance->MACWTR, ETH_MACWTR_PWE) >> 8) > 0U) ? ENABLE : DISABLE;
 8006b52:	687b      	ldr	r3, [r7, #4]
 8006b54:	681b      	ldr	r3, [r3, #0]
 8006b56:	68db      	ldr	r3, [r3, #12]
 8006b58:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006b5c:	2b00      	cmp	r3, #0
 8006b5e:	bf14      	ite	ne
 8006b60:	2301      	movne	r3, #1
 8006b62:	2300      	moveq	r3, #0
 8006b64:	b2db      	uxtb	r3, r3
 8006b66:	461a      	mov	r2, r3
 8006b68:	683b      	ldr	r3, [r7, #0]
 8006b6a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
  macconf->WatchdogTimeout = READ_BIT(heth->Instance->MACWTR, ETH_MACWTR_WTO);
 8006b6e:	687b      	ldr	r3, [r7, #4]
 8006b70:	681b      	ldr	r3, [r3, #0]
 8006b72:	68db      	ldr	r3, [r3, #12]
 8006b74:	f003 020f 	and.w	r2, r3, #15
 8006b78:	683b      	ldr	r3, [r7, #0]
 8006b7a:	645a      	str	r2, [r3, #68]	; 0x44

  macconf->TransmitFlowControl = ((READ_BIT(heth->Instance->MACTFCR, ETH_MACTFCR_TFE) >> 1) > 0U) ? ENABLE : DISABLE;
 8006b7c:	687b      	ldr	r3, [r7, #4]
 8006b7e:	681b      	ldr	r3, [r3, #0]
 8006b80:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006b82:	f003 0302 	and.w	r3, r3, #2
 8006b86:	2b00      	cmp	r3, #0
 8006b88:	bf14      	ite	ne
 8006b8a:	2301      	movne	r3, #1
 8006b8c:	2300      	moveq	r3, #0
 8006b8e:	b2db      	uxtb	r3, r3
 8006b90:	461a      	mov	r2, r3
 8006b92:	683b      	ldr	r3, [r7, #0]
 8006b94:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54
  macconf->ZeroQuantaPause = ((READ_BIT(heth->Instance->MACTFCR, ETH_MACTFCR_DZPQ) >> 7) == 0U) ? ENABLE : DISABLE;
 8006b98:	687b      	ldr	r3, [r7, #4]
 8006b9a:	681b      	ldr	r3, [r3, #0]
 8006b9c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006b9e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006ba2:	2b00      	cmp	r3, #0
 8006ba4:	bf0c      	ite	eq
 8006ba6:	2301      	moveq	r3, #1
 8006ba8:	2300      	movne	r3, #0
 8006baa:	b2db      	uxtb	r3, r3
 8006bac:	461a      	mov	r2, r3
 8006bae:	683b      	ldr	r3, [r7, #0]
 8006bb0:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
  macconf->PauseLowThreshold = READ_BIT(heth->Instance->MACTFCR, ETH_MACTFCR_PLT);
 8006bb4:	687b      	ldr	r3, [r7, #4]
 8006bb6:	681b      	ldr	r3, [r3, #0]
 8006bb8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006bba:	f003 0270 	and.w	r2, r3, #112	; 0x70
 8006bbe:	683b      	ldr	r3, [r7, #0]
 8006bc0:	651a      	str	r2, [r3, #80]	; 0x50
  macconf->PauseTime = (READ_BIT(heth->Instance->MACTFCR, ETH_MACTFCR_PT) >> 16);
 8006bc2:	687b      	ldr	r3, [r7, #4]
 8006bc4:	681b      	ldr	r3, [r3, #0]
 8006bc6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006bc8:	0c1b      	lsrs	r3, r3, #16
 8006bca:	b29a      	uxth	r2, r3
 8006bcc:	683b      	ldr	r3, [r7, #0]
 8006bce:	649a      	str	r2, [r3, #72]	; 0x48


  macconf->ReceiveFlowControl = (READ_BIT(heth->Instance->MACRFCR, ETH_MACRFCR_RFE) > 0U) ? ENABLE : DISABLE;
 8006bd0:	687b      	ldr	r3, [r7, #4]
 8006bd2:	681b      	ldr	r3, [r3, #0]
 8006bd4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006bd8:	f003 0301 	and.w	r3, r3, #1
 8006bdc:	2b00      	cmp	r3, #0
 8006bde:	bf14      	ite	ne
 8006be0:	2301      	movne	r3, #1
 8006be2:	2300      	moveq	r3, #0
 8006be4:	b2db      	uxtb	r3, r3
 8006be6:	461a      	mov	r2, r3
 8006be8:	683b      	ldr	r3, [r7, #0]
 8006bea:	f883 2056 	strb.w	r2, [r3, #86]	; 0x56
  macconf->UnicastPausePacketDetect = ((READ_BIT(heth->Instance->MACRFCR, ETH_MACRFCR_UP) >> 1) > 0U)
 8006bee:	687b      	ldr	r3, [r7, #4]
 8006bf0:	681b      	ldr	r3, [r3, #0]
 8006bf2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006bf6:	f003 0302 	and.w	r3, r3, #2
                                      ? ENABLE : DISABLE;
 8006bfa:	2b00      	cmp	r3, #0
 8006bfc:	bf14      	ite	ne
 8006bfe:	2301      	movne	r3, #1
 8006c00:	2300      	moveq	r3, #0
 8006c02:	b2db      	uxtb	r3, r3
 8006c04:	461a      	mov	r2, r3
  macconf->UnicastPausePacketDetect = ((READ_BIT(heth->Instance->MACRFCR, ETH_MACRFCR_UP) >> 1) > 0U)
 8006c06:	683b      	ldr	r3, [r7, #0]
 8006c08:	f883 2055 	strb.w	r2, [r3, #85]	; 0x55

  macconf->TransmitQueueMode = READ_BIT(heth->Instance->MTLTQOMR, (ETH_MTLTQOMR_TTC | ETH_MTLTQOMR_TSF));
 8006c0c:	687b      	ldr	r3, [r7, #4]
 8006c0e:	681b      	ldr	r3, [r3, #0]
 8006c10:	f8d3 3d00 	ldr.w	r3, [r3, #3328]	; 0xd00
 8006c14:	f003 0272 	and.w	r2, r3, #114	; 0x72
 8006c18:	683b      	ldr	r3, [r7, #0]
 8006c1a:	659a      	str	r2, [r3, #88]	; 0x58

  macconf->ReceiveQueueMode = READ_BIT(heth->Instance->MTLRQOMR, (ETH_MTLRQOMR_RTC | ETH_MTLRQOMR_RSF));
 8006c1c:	687b      	ldr	r3, [r7, #4]
 8006c1e:	681b      	ldr	r3, [r3, #0]
 8006c20:	f8d3 3d30 	ldr.w	r3, [r3, #3376]	; 0xd30
 8006c24:	f003 0223 	and.w	r2, r3, #35	; 0x23
 8006c28:	683b      	ldr	r3, [r7, #0]
 8006c2a:	65da      	str	r2, [r3, #92]	; 0x5c
  macconf->ForwardRxUndersizedGoodPacket = ((READ_BIT(heth->Instance->MTLRQOMR,
 8006c2c:	687b      	ldr	r3, [r7, #4]
 8006c2e:	681b      	ldr	r3, [r3, #0]
 8006c30:	f8d3 3d30 	ldr.w	r3, [r3, #3376]	; 0xd30
                                                      ETH_MTLRQOMR_FUP) >> 3) > 0U) ? ENABLE : DISABLE;
 8006c34:	f003 0308 	and.w	r3, r3, #8
 8006c38:	2b00      	cmp	r3, #0
 8006c3a:	bf14      	ite	ne
 8006c3c:	2301      	movne	r3, #1
 8006c3e:	2300      	moveq	r3, #0
 8006c40:	b2db      	uxtb	r3, r3
 8006c42:	461a      	mov	r2, r3
  macconf->ForwardRxUndersizedGoodPacket = ((READ_BIT(heth->Instance->MTLRQOMR,
 8006c44:	683b      	ldr	r3, [r7, #0]
 8006c46:	f883 2062 	strb.w	r2, [r3, #98]	; 0x62
  macconf->ForwardRxErrorPacket = ((READ_BIT(heth->Instance->MTLRQOMR, ETH_MTLRQOMR_FEP) >> 4) > 0U) ? ENABLE : DISABLE;
 8006c4a:	687b      	ldr	r3, [r7, #4]
 8006c4c:	681b      	ldr	r3, [r3, #0]
 8006c4e:	f8d3 3d30 	ldr.w	r3, [r3, #3376]	; 0xd30
 8006c52:	f003 0310 	and.w	r3, r3, #16
 8006c56:	2b00      	cmp	r3, #0
 8006c58:	bf14      	ite	ne
 8006c5a:	2301      	movne	r3, #1
 8006c5c:	2300      	moveq	r3, #0
 8006c5e:	b2db      	uxtb	r3, r3
 8006c60:	461a      	mov	r2, r3
 8006c62:	683b      	ldr	r3, [r7, #0]
 8006c64:	f883 2061 	strb.w	r2, [r3, #97]	; 0x61
  macconf->DropTCPIPChecksumErrorPacket = ((READ_BIT(heth->Instance->MTLRQOMR,
 8006c68:	687b      	ldr	r3, [r7, #4]
 8006c6a:	681b      	ldr	r3, [r3, #0]
 8006c6c:	f8d3 3d30 	ldr.w	r3, [r3, #3376]	; 0xd30
                                                     ETH_MTLRQOMR_DISTCPEF) >> 6) == 0U) ? ENABLE : DISABLE;
 8006c70:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006c74:	2b00      	cmp	r3, #0
 8006c76:	bf0c      	ite	eq
 8006c78:	2301      	moveq	r3, #1
 8006c7a:	2300      	movne	r3, #0
 8006c7c:	b2db      	uxtb	r3, r3
 8006c7e:	461a      	mov	r2, r3
  macconf->DropTCPIPChecksumErrorPacket = ((READ_BIT(heth->Instance->MTLRQOMR,
 8006c80:	683b      	ldr	r3, [r7, #0]
 8006c82:	f883 2060 	strb.w	r2, [r3, #96]	; 0x60

  return HAL_OK;
 8006c86:	2300      	movs	r3, #0
}
 8006c88:	4618      	mov	r0, r3
 8006c8a:	370c      	adds	r7, #12
 8006c8c:	46bd      	mov	sp, r7
 8006c8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c92:	4770      	bx	lr

08006c94 <HAL_ETH_SetMACConfig>:
  * @param  macconf: pointer to a ETH_MACConfigTypeDef structure that contains
  *         the configuration of the MAC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_SetMACConfig(ETH_HandleTypeDef *heth,  ETH_MACConfigTypeDef *macconf)
{
 8006c94:	b580      	push	{r7, lr}
 8006c96:	b082      	sub	sp, #8
 8006c98:	af00      	add	r7, sp, #0
 8006c9a:	6078      	str	r0, [r7, #4]
 8006c9c:	6039      	str	r1, [r7, #0]
  if (macconf == NULL)
 8006c9e:	683b      	ldr	r3, [r7, #0]
 8006ca0:	2b00      	cmp	r3, #0
 8006ca2:	d101      	bne.n	8006ca8 <HAL_ETH_SetMACConfig+0x14>
  {
    return HAL_ERROR;
 8006ca4:	2301      	movs	r3, #1
 8006ca6:	e00b      	b.n	8006cc0 <HAL_ETH_SetMACConfig+0x2c>
  }

  if (heth->gState == HAL_ETH_STATE_READY)
 8006ca8:	687b      	ldr	r3, [r7, #4]
 8006caa:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8006cae:	2b10      	cmp	r3, #16
 8006cb0:	d105      	bne.n	8006cbe <HAL_ETH_SetMACConfig+0x2a>
  {
    ETH_SetMACConfig(heth, macconf);
 8006cb2:	6839      	ldr	r1, [r7, #0]
 8006cb4:	6878      	ldr	r0, [r7, #4]
 8006cb6:	f000 f85f 	bl	8006d78 <ETH_SetMACConfig>

    return HAL_OK;
 8006cba:	2300      	movs	r3, #0
 8006cbc:	e000      	b.n	8006cc0 <HAL_ETH_SetMACConfig+0x2c>
  }
  else
  {
    return HAL_ERROR;
 8006cbe:	2301      	movs	r3, #1
  }
}
 8006cc0:	4618      	mov	r0, r3
 8006cc2:	3708      	adds	r7, #8
 8006cc4:	46bd      	mov	sp, r7
 8006cc6:	bd80      	pop	{r7, pc}

08006cc8 <HAL_ETH_SetMDIOClockRange>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
void HAL_ETH_SetMDIOClockRange(ETH_HandleTypeDef *heth)
{
 8006cc8:	b580      	push	{r7, lr}
 8006cca:	b084      	sub	sp, #16
 8006ccc:	af00      	add	r7, sp, #0
 8006cce:	6078      	str	r0, [r7, #4]
  uint32_t hclk;
  uint32_t tmpreg;

  /* Get the ETHERNET MACMDIOAR value */
  tmpreg = (heth->Instance)->MACMDIOAR;
 8006cd0:	687b      	ldr	r3, [r7, #4]
 8006cd2:	681b      	ldr	r3, [r3, #0]
 8006cd4:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8006cd8:	60fb      	str	r3, [r7, #12]

  /* Clear CSR Clock Range bits */
  tmpreg &= ~ETH_MACMDIOAR_CR;
 8006cda:	68fb      	ldr	r3, [r7, #12]
 8006cdc:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8006ce0:	60fb      	str	r3, [r7, #12]

  /* Get hclk frequency value */
  hclk = HAL_RCC_GetHCLKFreq();
 8006ce2:	f003 fe45 	bl	800a970 <HAL_RCC_GetHCLKFreq>
 8006ce6:	60b8      	str	r0, [r7, #8]

  /* Set CR bits depending on hclk value */
  if ((hclk >= 20000000U) && (hclk < 35000000U))
 8006ce8:	68bb      	ldr	r3, [r7, #8]
 8006cea:	4a1e      	ldr	r2, [pc, #120]	; (8006d64 <HAL_ETH_SetMDIOClockRange+0x9c>)
 8006cec:	4293      	cmp	r3, r2
 8006cee:	d908      	bls.n	8006d02 <HAL_ETH_SetMDIOClockRange+0x3a>
 8006cf0:	68bb      	ldr	r3, [r7, #8]
 8006cf2:	4a1d      	ldr	r2, [pc, #116]	; (8006d68 <HAL_ETH_SetMDIOClockRange+0xa0>)
 8006cf4:	4293      	cmp	r3, r2
 8006cf6:	d804      	bhi.n	8006d02 <HAL_ETH_SetMDIOClockRange+0x3a>
  {
    /* CSR Clock Range between 20-35 MHz */
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV16;
 8006cf8:	68fb      	ldr	r3, [r7, #12]
 8006cfa:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8006cfe:	60fb      	str	r3, [r7, #12]
 8006d00:	e027      	b.n	8006d52 <HAL_ETH_SetMDIOClockRange+0x8a>
  }
  else if ((hclk >= 35000000U) && (hclk < 60000000U))
 8006d02:	68bb      	ldr	r3, [r7, #8]
 8006d04:	4a18      	ldr	r2, [pc, #96]	; (8006d68 <HAL_ETH_SetMDIOClockRange+0xa0>)
 8006d06:	4293      	cmp	r3, r2
 8006d08:	d908      	bls.n	8006d1c <HAL_ETH_SetMDIOClockRange+0x54>
 8006d0a:	68bb      	ldr	r3, [r7, #8]
 8006d0c:	4a17      	ldr	r2, [pc, #92]	; (8006d6c <HAL_ETH_SetMDIOClockRange+0xa4>)
 8006d0e:	4293      	cmp	r3, r2
 8006d10:	d204      	bcs.n	8006d1c <HAL_ETH_SetMDIOClockRange+0x54>
  {
    /* CSR Clock Range between 35-60 MHz */
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV26;
 8006d12:	68fb      	ldr	r3, [r7, #12]
 8006d14:	f443 7340 	orr.w	r3, r3, #768	; 0x300
 8006d18:	60fb      	str	r3, [r7, #12]
 8006d1a:	e01a      	b.n	8006d52 <HAL_ETH_SetMDIOClockRange+0x8a>
  }
  else if ((hclk >= 60000000U) && (hclk < 100000000U))
 8006d1c:	68bb      	ldr	r3, [r7, #8]
 8006d1e:	4a13      	ldr	r2, [pc, #76]	; (8006d6c <HAL_ETH_SetMDIOClockRange+0xa4>)
 8006d20:	4293      	cmp	r3, r2
 8006d22:	d303      	bcc.n	8006d2c <HAL_ETH_SetMDIOClockRange+0x64>
 8006d24:	68bb      	ldr	r3, [r7, #8]
 8006d26:	4a12      	ldr	r2, [pc, #72]	; (8006d70 <HAL_ETH_SetMDIOClockRange+0xa8>)
 8006d28:	4293      	cmp	r3, r2
 8006d2a:	d911      	bls.n	8006d50 <HAL_ETH_SetMDIOClockRange+0x88>
  {
    /* CSR Clock Range between 60-100 MHz */
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV42;
  }
  else if ((hclk >= 100000000U) && (hclk < 150000000U))
 8006d2c:	68bb      	ldr	r3, [r7, #8]
 8006d2e:	4a10      	ldr	r2, [pc, #64]	; (8006d70 <HAL_ETH_SetMDIOClockRange+0xa8>)
 8006d30:	4293      	cmp	r3, r2
 8006d32:	d908      	bls.n	8006d46 <HAL_ETH_SetMDIOClockRange+0x7e>
 8006d34:	68bb      	ldr	r3, [r7, #8]
 8006d36:	4a0f      	ldr	r2, [pc, #60]	; (8006d74 <HAL_ETH_SetMDIOClockRange+0xac>)
 8006d38:	4293      	cmp	r3, r2
 8006d3a:	d804      	bhi.n	8006d46 <HAL_ETH_SetMDIOClockRange+0x7e>
  {
    /* CSR Clock Range between 100-150 MHz */
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV62;
 8006d3c:	68fb      	ldr	r3, [r7, #12]
 8006d3e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8006d42:	60fb      	str	r3, [r7, #12]
 8006d44:	e005      	b.n	8006d52 <HAL_ETH_SetMDIOClockRange+0x8a>
  }
  else /* (hclk >= 150000000)&&(hclk <= 200000000) */
  {
    /* CSR Clock Range between 150-200 MHz */
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV102;
 8006d46:	68fb      	ldr	r3, [r7, #12]
 8006d48:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8006d4c:	60fb      	str	r3, [r7, #12]
 8006d4e:	e000      	b.n	8006d52 <HAL_ETH_SetMDIOClockRange+0x8a>
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV42;
 8006d50:	bf00      	nop
  }

  /* Configure the CSR Clock Range */
  (heth->Instance)->MACMDIOAR = (uint32_t)tmpreg;
 8006d52:	687b      	ldr	r3, [r7, #4]
 8006d54:	681b      	ldr	r3, [r3, #0]
 8006d56:	68fa      	ldr	r2, [r7, #12]
 8006d58:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
}
 8006d5c:	bf00      	nop
 8006d5e:	3710      	adds	r7, #16
 8006d60:	46bd      	mov	sp, r7
 8006d62:	bd80      	pop	{r7, pc}
 8006d64:	01312cff 	.word	0x01312cff
 8006d68:	02160ebf 	.word	0x02160ebf
 8006d6c:	03938700 	.word	0x03938700
 8006d70:	05f5e0ff 	.word	0x05f5e0ff
 8006d74:	08f0d17f 	.word	0x08f0d17f

08006d78 <ETH_SetMACConfig>:
  * @{
  */


static void ETH_SetMACConfig(ETH_HandleTypeDef *heth,  ETH_MACConfigTypeDef *macconf)
{
 8006d78:	b480      	push	{r7}
 8006d7a:	b085      	sub	sp, #20
 8006d7c:	af00      	add	r7, sp, #0
 8006d7e:	6078      	str	r0, [r7, #4]
 8006d80:	6039      	str	r1, [r7, #0]
  uint32_t macregval;

  /*------------------------ MACCR Configuration --------------------*/
  macregval = (macconf->InterPacketGapVal |
 8006d82:	683b      	ldr	r3, [r7, #0]
 8006d84:	689a      	ldr	r2, [r3, #8]
               macconf->SourceAddrControl |
 8006d86:	683b      	ldr	r3, [r7, #0]
 8006d88:	681b      	ldr	r3, [r3, #0]
  macregval = (macconf->InterPacketGapVal |
 8006d8a:	431a      	orrs	r2, r3
               ((uint32_t)macconf->ChecksumOffload << 27) |
 8006d8c:	683b      	ldr	r3, [r7, #0]
 8006d8e:	791b      	ldrb	r3, [r3, #4]
 8006d90:	06db      	lsls	r3, r3, #27
               macconf->SourceAddrControl |
 8006d92:	431a      	orrs	r2, r3
               ((uint32_t)macconf->GiantPacketSizeLimitControl << 23) |
 8006d94:	683b      	ldr	r3, [r7, #0]
 8006d96:	7b1b      	ldrb	r3, [r3, #12]
 8006d98:	05db      	lsls	r3, r3, #23
               ((uint32_t)macconf->ChecksumOffload << 27) |
 8006d9a:	431a      	orrs	r2, r3
               ((uint32_t)macconf->Support2KPacket  << 22) |
 8006d9c:	683b      	ldr	r3, [r7, #0]
 8006d9e:	7b5b      	ldrb	r3, [r3, #13]
 8006da0:	059b      	lsls	r3, r3, #22
               ((uint32_t)macconf->GiantPacketSizeLimitControl << 23) |
 8006da2:	431a      	orrs	r2, r3
               ((uint32_t)macconf->CRCStripTypePacket << 21) |
 8006da4:	683b      	ldr	r3, [r7, #0]
 8006da6:	7b9b      	ldrb	r3, [r3, #14]
 8006da8:	055b      	lsls	r3, r3, #21
               ((uint32_t)macconf->Support2KPacket  << 22) |
 8006daa:	431a      	orrs	r2, r3
               ((uint32_t)macconf->AutomaticPadCRCStrip << 20) |
 8006dac:	683b      	ldr	r3, [r7, #0]
 8006dae:	7bdb      	ldrb	r3, [r3, #15]
 8006db0:	051b      	lsls	r3, r3, #20
               ((uint32_t)macconf->CRCStripTypePacket << 21) |
 8006db2:	4313      	orrs	r3, r2
               ((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 19) |
 8006db4:	683a      	ldr	r2, [r7, #0]
 8006db6:	7c12      	ldrb	r2, [r2, #16]
 8006db8:	2a00      	cmp	r2, #0
 8006dba:	d102      	bne.n	8006dc2 <ETH_SetMACConfig+0x4a>
 8006dbc:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 8006dc0:	e000      	b.n	8006dc4 <ETH_SetMACConfig+0x4c>
 8006dc2:	2200      	movs	r2, #0
               ((uint32_t)macconf->AutomaticPadCRCStrip << 20) |
 8006dc4:	4313      	orrs	r3, r2
               ((uint32_t)((macconf->Jabber == DISABLE) ? 1U : 0U) << 17) |
 8006dc6:	683a      	ldr	r2, [r7, #0]
 8006dc8:	7c52      	ldrb	r2, [r2, #17]
 8006dca:	2a00      	cmp	r2, #0
 8006dcc:	d102      	bne.n	8006dd4 <ETH_SetMACConfig+0x5c>
 8006dce:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8006dd2:	e000      	b.n	8006dd6 <ETH_SetMACConfig+0x5e>
 8006dd4:	2200      	movs	r2, #0
               ((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 19) |
 8006dd6:	431a      	orrs	r2, r3
               ((uint32_t)macconf->JumboPacket << 16) |
 8006dd8:	683b      	ldr	r3, [r7, #0]
 8006dda:	7c9b      	ldrb	r3, [r3, #18]
 8006ddc:	041b      	lsls	r3, r3, #16
               ((uint32_t)((macconf->Jabber == DISABLE) ? 1U : 0U) << 17) |
 8006dde:	431a      	orrs	r2, r3
               macconf->Speed |
 8006de0:	683b      	ldr	r3, [r7, #0]
 8006de2:	695b      	ldr	r3, [r3, #20]
               ((uint32_t)macconf->JumboPacket << 16) |
 8006de4:	431a      	orrs	r2, r3
               macconf->DuplexMode |
 8006de6:	683b      	ldr	r3, [r7, #0]
 8006de8:	699b      	ldr	r3, [r3, #24]
               macconf->Speed |
 8006dea:	431a      	orrs	r2, r3
               ((uint32_t)macconf->LoopbackMode << 12) |
 8006dec:	683b      	ldr	r3, [r7, #0]
 8006dee:	7f1b      	ldrb	r3, [r3, #28]
 8006df0:	031b      	lsls	r3, r3, #12
               macconf->DuplexMode |
 8006df2:	431a      	orrs	r2, r3
               ((uint32_t)macconf->CarrierSenseBeforeTransmit << 11) |
 8006df4:	683b      	ldr	r3, [r7, #0]
 8006df6:	7f5b      	ldrb	r3, [r3, #29]
 8006df8:	02db      	lsls	r3, r3, #11
               ((uint32_t)macconf->LoopbackMode << 12) |
 8006dfa:	4313      	orrs	r3, r2
               ((uint32_t)((macconf->ReceiveOwn == DISABLE) ? 1U : 0U) << 10) |
 8006dfc:	683a      	ldr	r2, [r7, #0]
 8006dfe:	7f92      	ldrb	r2, [r2, #30]
 8006e00:	2a00      	cmp	r2, #0
 8006e02:	d102      	bne.n	8006e0a <ETH_SetMACConfig+0x92>
 8006e04:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8006e08:	e000      	b.n	8006e0c <ETH_SetMACConfig+0x94>
 8006e0a:	2200      	movs	r2, #0
               ((uint32_t)macconf->CarrierSenseBeforeTransmit << 11) |
 8006e0c:	431a      	orrs	r2, r3
               ((uint32_t)macconf->CarrierSenseDuringTransmit << 9) |
 8006e0e:	683b      	ldr	r3, [r7, #0]
 8006e10:	7fdb      	ldrb	r3, [r3, #31]
 8006e12:	025b      	lsls	r3, r3, #9
               ((uint32_t)((macconf->ReceiveOwn == DISABLE) ? 1U : 0U) << 10) |
 8006e14:	4313      	orrs	r3, r2
               ((uint32_t)((macconf->RetryTransmission == DISABLE) ? 1U : 0U) << 8) |
 8006e16:	683a      	ldr	r2, [r7, #0]
 8006e18:	f892 2020 	ldrb.w	r2, [r2, #32]
 8006e1c:	2a00      	cmp	r2, #0
 8006e1e:	d102      	bne.n	8006e26 <ETH_SetMACConfig+0xae>
 8006e20:	f44f 7280 	mov.w	r2, #256	; 0x100
 8006e24:	e000      	b.n	8006e28 <ETH_SetMACConfig+0xb0>
 8006e26:	2200      	movs	r2, #0
               ((uint32_t)macconf->CarrierSenseDuringTransmit << 9) |
 8006e28:	431a      	orrs	r2, r3
               macconf->BackOffLimit |
 8006e2a:	683b      	ldr	r3, [r7, #0]
 8006e2c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
               ((uint32_t)((macconf->RetryTransmission == DISABLE) ? 1U : 0U) << 8) |
 8006e2e:	431a      	orrs	r2, r3
               ((uint32_t)macconf->DeferralCheck << 4) |
 8006e30:	683b      	ldr	r3, [r7, #0]
 8006e32:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8006e36:	011b      	lsls	r3, r3, #4
               macconf->BackOffLimit |
 8006e38:	431a      	orrs	r2, r3
               macconf->PreambleLength);
 8006e3a:	683b      	ldr	r3, [r7, #0]
 8006e3c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
  macregval = (macconf->InterPacketGapVal |
 8006e3e:	4313      	orrs	r3, r2
 8006e40:	60fb      	str	r3, [r7, #12]

  /* Write to MACCR */
  MODIFY_REG(heth->Instance->MACCR, ETH_MACCR_MASK, macregval);
 8006e42:	687b      	ldr	r3, [r7, #4]
 8006e44:	681b      	ldr	r3, [r3, #0]
 8006e46:	681a      	ldr	r2, [r3, #0]
 8006e48:	4b56      	ldr	r3, [pc, #344]	; (8006fa4 <ETH_SetMACConfig+0x22c>)
 8006e4a:	4013      	ands	r3, r2
 8006e4c:	687a      	ldr	r2, [r7, #4]
 8006e4e:	6812      	ldr	r2, [r2, #0]
 8006e50:	68f9      	ldr	r1, [r7, #12]
 8006e52:	430b      	orrs	r3, r1
 8006e54:	6013      	str	r3, [r2, #0]

  /*------------------------ MACECR Configuration --------------------*/
  macregval = ((macconf->ExtendedInterPacketGapVal << 25) |
 8006e56:	683b      	ldr	r3, [r7, #0]
 8006e58:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006e5a:	065a      	lsls	r2, r3, #25
               ((uint32_t)macconf->ExtendedInterPacketGap << 24) |
 8006e5c:	683b      	ldr	r3, [r7, #0]
 8006e5e:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8006e62:	061b      	lsls	r3, r3, #24
  macregval = ((macconf->ExtendedInterPacketGapVal << 25) |
 8006e64:	431a      	orrs	r2, r3
               ((uint32_t)macconf->UnicastSlowProtocolPacketDetect << 18) |
 8006e66:	683b      	ldr	r3, [r7, #0]
 8006e68:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8006e6c:	049b      	lsls	r3, r3, #18
               ((uint32_t)macconf->ExtendedInterPacketGap << 24) |
 8006e6e:	431a      	orrs	r2, r3
               ((uint32_t)macconf->SlowProtocolDetect << 17) |
 8006e70:	683b      	ldr	r3, [r7, #0]
 8006e72:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 8006e76:	045b      	lsls	r3, r3, #17
               ((uint32_t)macconf->UnicastSlowProtocolPacketDetect << 18) |
 8006e78:	4313      	orrs	r3, r2
               ((uint32_t)((macconf->CRCCheckingRxPackets == DISABLE) ? 1U : 0U) << 16) |
 8006e7a:	683a      	ldr	r2, [r7, #0]
 8006e7c:	f892 2032 	ldrb.w	r2, [r2, #50]	; 0x32
 8006e80:	2a00      	cmp	r2, #0
 8006e82:	d102      	bne.n	8006e8a <ETH_SetMACConfig+0x112>
 8006e84:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8006e88:	e000      	b.n	8006e8c <ETH_SetMACConfig+0x114>
 8006e8a:	2200      	movs	r2, #0
               ((uint32_t)macconf->SlowProtocolDetect << 17) |
 8006e8c:	431a      	orrs	r2, r3
               macconf->GiantPacketSizeLimit);
 8006e8e:	683b      	ldr	r3, [r7, #0]
 8006e90:	6b5b      	ldr	r3, [r3, #52]	; 0x34
  macregval = ((macconf->ExtendedInterPacketGapVal << 25) |
 8006e92:	4313      	orrs	r3, r2
 8006e94:	60fb      	str	r3, [r7, #12]

  /* Write to MACECR */
  MODIFY_REG(heth->Instance->MACECR, ETH_MACECR_MASK, macregval);
 8006e96:	687b      	ldr	r3, [r7, #4]
 8006e98:	681b      	ldr	r3, [r3, #0]
 8006e9a:	685a      	ldr	r2, [r3, #4]
 8006e9c:	4b42      	ldr	r3, [pc, #264]	; (8006fa8 <ETH_SetMACConfig+0x230>)
 8006e9e:	4013      	ands	r3, r2
 8006ea0:	687a      	ldr	r2, [r7, #4]
 8006ea2:	6812      	ldr	r2, [r2, #0]
 8006ea4:	68f9      	ldr	r1, [r7, #12]
 8006ea6:	430b      	orrs	r3, r1
 8006ea8:	6053      	str	r3, [r2, #4]

  /*------------------------ MACWTR Configuration --------------------*/
  macregval = (((uint32_t)macconf->ProgrammableWatchdog << 8) |
 8006eaa:	683b      	ldr	r3, [r7, #0]
 8006eac:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8006eb0:	021a      	lsls	r2, r3, #8
               macconf->WatchdogTimeout);
 8006eb2:	683b      	ldr	r3, [r7, #0]
 8006eb4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
  macregval = (((uint32_t)macconf->ProgrammableWatchdog << 8) |
 8006eb6:	4313      	orrs	r3, r2
 8006eb8:	60fb      	str	r3, [r7, #12]

  /* Write to MACWTR */
  MODIFY_REG(heth->Instance->MACWTR, ETH_MACWTR_MASK, macregval);
 8006eba:	687b      	ldr	r3, [r7, #4]
 8006ebc:	681b      	ldr	r3, [r3, #0]
 8006ebe:	68da      	ldr	r2, [r3, #12]
 8006ec0:	4b3a      	ldr	r3, [pc, #232]	; (8006fac <ETH_SetMACConfig+0x234>)
 8006ec2:	4013      	ands	r3, r2
 8006ec4:	687a      	ldr	r2, [r7, #4]
 8006ec6:	6812      	ldr	r2, [r2, #0]
 8006ec8:	68f9      	ldr	r1, [r7, #12]
 8006eca:	430b      	orrs	r3, r1
 8006ecc:	60d3      	str	r3, [r2, #12]

  /*------------------------ MACTFCR Configuration --------------------*/
  macregval = (((uint32_t)macconf->TransmitFlowControl << 1) |
 8006ece:	683b      	ldr	r3, [r7, #0]
 8006ed0:	f893 3054 	ldrb.w	r3, [r3, #84]	; 0x54
 8006ed4:	005a      	lsls	r2, r3, #1
               macconf->PauseLowThreshold |
 8006ed6:	683b      	ldr	r3, [r7, #0]
 8006ed8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
  macregval = (((uint32_t)macconf->TransmitFlowControl << 1) |
 8006eda:	4313      	orrs	r3, r2
               ((uint32_t)((macconf->ZeroQuantaPause == DISABLE) ? 1U : 0U) << 7) |
 8006edc:	683a      	ldr	r2, [r7, #0]
 8006ede:	f892 204c 	ldrb.w	r2, [r2, #76]	; 0x4c
 8006ee2:	2a00      	cmp	r2, #0
 8006ee4:	d101      	bne.n	8006eea <ETH_SetMACConfig+0x172>
 8006ee6:	2280      	movs	r2, #128	; 0x80
 8006ee8:	e000      	b.n	8006eec <ETH_SetMACConfig+0x174>
 8006eea:	2200      	movs	r2, #0
               macconf->PauseLowThreshold |
 8006eec:	431a      	orrs	r2, r3
               (macconf->PauseTime << 16));
 8006eee:	683b      	ldr	r3, [r7, #0]
 8006ef0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006ef2:	041b      	lsls	r3, r3, #16
  macregval = (((uint32_t)macconf->TransmitFlowControl << 1) |
 8006ef4:	4313      	orrs	r3, r2
 8006ef6:	60fb      	str	r3, [r7, #12]

  /* Write to MACTFCR */
  MODIFY_REG(heth->Instance->MACTFCR, ETH_MACTFCR_MASK, macregval);
 8006ef8:	687b      	ldr	r3, [r7, #4]
 8006efa:	681b      	ldr	r3, [r3, #0]
 8006efc:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8006efe:	f64f 730d 	movw	r3, #65293	; 0xff0d
 8006f02:	4013      	ands	r3, r2
 8006f04:	687a      	ldr	r2, [r7, #4]
 8006f06:	6812      	ldr	r2, [r2, #0]
 8006f08:	68f9      	ldr	r1, [r7, #12]
 8006f0a:	430b      	orrs	r3, r1
 8006f0c:	6713      	str	r3, [r2, #112]	; 0x70

  /*------------------------ MACRFCR Configuration --------------------*/
  macregval = ((uint32_t)macconf->ReceiveFlowControl |
 8006f0e:	683b      	ldr	r3, [r7, #0]
 8006f10:	f893 3056 	ldrb.w	r3, [r3, #86]	; 0x56
 8006f14:	461a      	mov	r2, r3
               ((uint32_t)macconf->UnicastPausePacketDetect << 1));
 8006f16:	683b      	ldr	r3, [r7, #0]
 8006f18:	f893 3055 	ldrb.w	r3, [r3, #85]	; 0x55
 8006f1c:	005b      	lsls	r3, r3, #1
  macregval = ((uint32_t)macconf->ReceiveFlowControl |
 8006f1e:	4313      	orrs	r3, r2
 8006f20:	60fb      	str	r3, [r7, #12]

  /* Write to MACRFCR */
  MODIFY_REG(heth->Instance->MACRFCR, ETH_MACRFCR_MASK, macregval);
 8006f22:	687b      	ldr	r3, [r7, #4]
 8006f24:	681b      	ldr	r3, [r3, #0]
 8006f26:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006f2a:	f023 0103 	bic.w	r1, r3, #3
 8006f2e:	687b      	ldr	r3, [r7, #4]
 8006f30:	681b      	ldr	r3, [r3, #0]
 8006f32:	68fa      	ldr	r2, [r7, #12]
 8006f34:	430a      	orrs	r2, r1
 8006f36:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

  /*------------------------ MTLTQOMR Configuration --------------------*/
  /* Write to MTLTQOMR */
  MODIFY_REG(heth->Instance->MTLTQOMR, ETH_MTLTQOMR_MASK, macconf->TransmitQueueMode);
 8006f3a:	687b      	ldr	r3, [r7, #4]
 8006f3c:	681b      	ldr	r3, [r3, #0]
 8006f3e:	f8d3 3d00 	ldr.w	r3, [r3, #3328]	; 0xd00
 8006f42:	f023 0172 	bic.w	r1, r3, #114	; 0x72
 8006f46:	683b      	ldr	r3, [r7, #0]
 8006f48:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8006f4a:	687b      	ldr	r3, [r7, #4]
 8006f4c:	681b      	ldr	r3, [r3, #0]
 8006f4e:	430a      	orrs	r2, r1
 8006f50:	f8c3 2d00 	str.w	r2, [r3, #3328]	; 0xd00

  /*------------------------ MTLRQOMR Configuration --------------------*/
  macregval = (macconf->ReceiveQueueMode |
 8006f54:	683b      	ldr	r3, [r7, #0]
 8006f56:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
               ((uint32_t)((macconf->DropTCPIPChecksumErrorPacket == DISABLE) ? 1U : 0U) << 6) |
 8006f58:	683a      	ldr	r2, [r7, #0]
 8006f5a:	f892 2060 	ldrb.w	r2, [r2, #96]	; 0x60
 8006f5e:	2a00      	cmp	r2, #0
 8006f60:	d101      	bne.n	8006f66 <ETH_SetMACConfig+0x1ee>
 8006f62:	2240      	movs	r2, #64	; 0x40
 8006f64:	e000      	b.n	8006f68 <ETH_SetMACConfig+0x1f0>
 8006f66:	2200      	movs	r2, #0
  macregval = (macconf->ReceiveQueueMode |
 8006f68:	431a      	orrs	r2, r3
               ((uint32_t)macconf->ForwardRxErrorPacket << 4) |
 8006f6a:	683b      	ldr	r3, [r7, #0]
 8006f6c:	f893 3061 	ldrb.w	r3, [r3, #97]	; 0x61
 8006f70:	011b      	lsls	r3, r3, #4
               ((uint32_t)((macconf->DropTCPIPChecksumErrorPacket == DISABLE) ? 1U : 0U) << 6) |
 8006f72:	431a      	orrs	r2, r3
               ((uint32_t)macconf->ForwardRxUndersizedGoodPacket << 3));
 8006f74:	683b      	ldr	r3, [r7, #0]
 8006f76:	f893 3062 	ldrb.w	r3, [r3, #98]	; 0x62
 8006f7a:	00db      	lsls	r3, r3, #3
  macregval = (macconf->ReceiveQueueMode |
 8006f7c:	4313      	orrs	r3, r2
 8006f7e:	60fb      	str	r3, [r7, #12]

  /* Write to MTLRQOMR */
  MODIFY_REG(heth->Instance->MTLRQOMR, ETH_MTLRQOMR_MASK, macregval);
 8006f80:	687b      	ldr	r3, [r7, #4]
 8006f82:	681b      	ldr	r3, [r3, #0]
 8006f84:	f8d3 3d30 	ldr.w	r3, [r3, #3376]	; 0xd30
 8006f88:	f023 017b 	bic.w	r1, r3, #123	; 0x7b
 8006f8c:	687b      	ldr	r3, [r7, #4]
 8006f8e:	681b      	ldr	r3, [r3, #0]
 8006f90:	68fa      	ldr	r2, [r7, #12]
 8006f92:	430a      	orrs	r2, r1
 8006f94:	f8c3 2d30 	str.w	r2, [r3, #3376]	; 0xd30
}
 8006f98:	bf00      	nop
 8006f9a:	3714      	adds	r7, #20
 8006f9c:	46bd      	mov	sp, r7
 8006f9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006fa2:	4770      	bx	lr
 8006fa4:	00048083 	.word	0x00048083
 8006fa8:	c0f88000 	.word	0xc0f88000
 8006fac:	fffffef0 	.word	0xfffffef0

08006fb0 <ETH_SetDMAConfig>:

static void ETH_SetDMAConfig(ETH_HandleTypeDef *heth,  ETH_DMAConfigTypeDef *dmaconf)
{
 8006fb0:	b480      	push	{r7}
 8006fb2:	b085      	sub	sp, #20
 8006fb4:	af00      	add	r7, sp, #0
 8006fb6:	6078      	str	r0, [r7, #4]
 8006fb8:	6039      	str	r1, [r7, #0]
  uint32_t dmaregval;

  /*------------------------ DMAMR Configuration --------------------*/
  MODIFY_REG(heth->Instance->DMAMR, ETH_DMAMR_MASK, dmaconf->DMAArbitration);
 8006fba:	687b      	ldr	r3, [r7, #4]
 8006fbc:	681b      	ldr	r3, [r3, #0]
 8006fbe:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8006fc2:	681a      	ldr	r2, [r3, #0]
 8006fc4:	4b38      	ldr	r3, [pc, #224]	; (80070a8 <ETH_SetDMAConfig+0xf8>)
 8006fc6:	4013      	ands	r3, r2
 8006fc8:	683a      	ldr	r2, [r7, #0]
 8006fca:	6811      	ldr	r1, [r2, #0]
 8006fcc:	687a      	ldr	r2, [r7, #4]
 8006fce:	6812      	ldr	r2, [r2, #0]
 8006fd0:	430b      	orrs	r3, r1
 8006fd2:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8006fd6:	6013      	str	r3, [r2, #0]

  /*------------------------ DMASBMR Configuration --------------------*/
  dmaregval = (((uint32_t)dmaconf->AddressAlignedBeats << 12) |
 8006fd8:	683b      	ldr	r3, [r7, #0]
 8006fda:	791b      	ldrb	r3, [r3, #4]
 8006fdc:	031a      	lsls	r2, r3, #12
               dmaconf->BurstMode |
 8006fde:	683b      	ldr	r3, [r7, #0]
 8006fe0:	689b      	ldr	r3, [r3, #8]
  dmaregval = (((uint32_t)dmaconf->AddressAlignedBeats << 12) |
 8006fe2:	431a      	orrs	r2, r3
               ((uint32_t)dmaconf->RebuildINCRxBurst << 15));
 8006fe4:	683b      	ldr	r3, [r7, #0]
 8006fe6:	7b1b      	ldrb	r3, [r3, #12]
 8006fe8:	03db      	lsls	r3, r3, #15
  dmaregval = (((uint32_t)dmaconf->AddressAlignedBeats << 12) |
 8006fea:	4313      	orrs	r3, r2
 8006fec:	60fb      	str	r3, [r7, #12]

  MODIFY_REG(heth->Instance->DMASBMR, ETH_DMASBMR_MASK, dmaregval);
 8006fee:	687b      	ldr	r3, [r7, #4]
 8006ff0:	681b      	ldr	r3, [r3, #0]
 8006ff2:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8006ff6:	685a      	ldr	r2, [r3, #4]
 8006ff8:	4b2c      	ldr	r3, [pc, #176]	; (80070ac <ETH_SetDMAConfig+0xfc>)
 8006ffa:	4013      	ands	r3, r2
 8006ffc:	687a      	ldr	r2, [r7, #4]
 8006ffe:	6812      	ldr	r2, [r2, #0]
 8007000:	68f9      	ldr	r1, [r7, #12]
 8007002:	430b      	orrs	r3, r1
 8007004:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8007008:	6053      	str	r3, [r2, #4]

  /*------------------------ DMACCR Configuration --------------------*/
  dmaregval = (((uint32_t)dmaconf->PBLx8Mode << 16) |
 800700a:	683b      	ldr	r3, [r7, #0]
 800700c:	7b5b      	ldrb	r3, [r3, #13]
 800700e:	041a      	lsls	r2, r3, #16
               dmaconf->MaximumSegmentSize);
 8007010:	683b      	ldr	r3, [r7, #0]
 8007012:	6a1b      	ldr	r3, [r3, #32]
  dmaregval = (((uint32_t)dmaconf->PBLx8Mode << 16) |
 8007014:	4313      	orrs	r3, r2
 8007016:	60fb      	str	r3, [r7, #12]

  MODIFY_REG(heth->Instance->DMACCR, ETH_DMACCR_MASK, dmaregval);
 8007018:	687b      	ldr	r3, [r7, #4]
 800701a:	681b      	ldr	r3, [r3, #0]
 800701c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8007020:	f8d3 2100 	ldr.w	r2, [r3, #256]	; 0x100
 8007024:	4b22      	ldr	r3, [pc, #136]	; (80070b0 <ETH_SetDMAConfig+0x100>)
 8007026:	4013      	ands	r3, r2
 8007028:	687a      	ldr	r2, [r7, #4]
 800702a:	6812      	ldr	r2, [r2, #0]
 800702c:	68f9      	ldr	r1, [r7, #12]
 800702e:	430b      	orrs	r3, r1
 8007030:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8007034:	f8c2 3100 	str.w	r3, [r2, #256]	; 0x100

  /*------------------------ DMACTCR Configuration --------------------*/
  dmaregval = (dmaconf->TxDMABurstLength |
 8007038:	683b      	ldr	r3, [r7, #0]
 800703a:	691a      	ldr	r2, [r3, #16]
               ((uint32_t)dmaconf->SecondPacketOperate << 4) |
 800703c:	683b      	ldr	r3, [r7, #0]
 800703e:	7d1b      	ldrb	r3, [r3, #20]
 8007040:	011b      	lsls	r3, r3, #4
  dmaregval = (dmaconf->TxDMABurstLength |
 8007042:	431a      	orrs	r2, r3
               ((uint32_t)dmaconf->TCPSegmentation << 12));
 8007044:	683b      	ldr	r3, [r7, #0]
 8007046:	7f5b      	ldrb	r3, [r3, #29]
 8007048:	031b      	lsls	r3, r3, #12
  dmaregval = (dmaconf->TxDMABurstLength |
 800704a:	4313      	orrs	r3, r2
 800704c:	60fb      	str	r3, [r7, #12]

  MODIFY_REG(heth->Instance->DMACTCR, ETH_DMACTCR_MASK, dmaregval);
 800704e:	687b      	ldr	r3, [r7, #4]
 8007050:	681b      	ldr	r3, [r3, #0]
 8007052:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8007056:	f8d3 2104 	ldr.w	r2, [r3, #260]	; 0x104
 800705a:	4b16      	ldr	r3, [pc, #88]	; (80070b4 <ETH_SetDMAConfig+0x104>)
 800705c:	4013      	ands	r3, r2
 800705e:	687a      	ldr	r2, [r7, #4]
 8007060:	6812      	ldr	r2, [r2, #0]
 8007062:	68f9      	ldr	r1, [r7, #12]
 8007064:	430b      	orrs	r3, r1
 8007066:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 800706a:	f8c2 3104 	str.w	r3, [r2, #260]	; 0x104

  /*------------------------ DMACRCR Configuration --------------------*/
  dmaregval = (((uint32_t)dmaconf->FlushRxPacket  << 31) |
 800706e:	683b      	ldr	r3, [r7, #0]
 8007070:	7f1b      	ldrb	r3, [r3, #28]
 8007072:	07da      	lsls	r2, r3, #31
               dmaconf->RxDMABurstLength);
 8007074:	683b      	ldr	r3, [r7, #0]
 8007076:	699b      	ldr	r3, [r3, #24]
  dmaregval = (((uint32_t)dmaconf->FlushRxPacket  << 31) |
 8007078:	4313      	orrs	r3, r2
 800707a:	60fb      	str	r3, [r7, #12]

  /* Write to DMACRCR */
  MODIFY_REG(heth->Instance->DMACRCR, ETH_DMACRCR_MASK, dmaregval);
 800707c:	687b      	ldr	r3, [r7, #4]
 800707e:	681b      	ldr	r3, [r3, #0]
 8007080:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8007084:	f8d3 2108 	ldr.w	r2, [r3, #264]	; 0x108
 8007088:	4b0b      	ldr	r3, [pc, #44]	; (80070b8 <ETH_SetDMAConfig+0x108>)
 800708a:	4013      	ands	r3, r2
 800708c:	687a      	ldr	r2, [r7, #4]
 800708e:	6812      	ldr	r2, [r2, #0]
 8007090:	68f9      	ldr	r1, [r7, #12]
 8007092:	430b      	orrs	r3, r1
 8007094:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8007098:	f8c2 3108 	str.w	r3, [r2, #264]	; 0x108
}
 800709c:	bf00      	nop
 800709e:	3714      	adds	r7, #20
 80070a0:	46bd      	mov	sp, r7
 80070a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80070a6:	4770      	bx	lr
 80070a8:	ffff87fd 	.word	0xffff87fd
 80070ac:	ffff2ffe 	.word	0xffff2ffe
 80070b0:	fffec000 	.word	0xfffec000
 80070b4:	ffc0efef 	.word	0xffc0efef
 80070b8:	7fc0ffff 	.word	0x7fc0ffff

080070bc <ETH_MACDMAConfig>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
static void ETH_MACDMAConfig(ETH_HandleTypeDef *heth)
{
 80070bc:	b580      	push	{r7, lr}
 80070be:	b0a4      	sub	sp, #144	; 0x90
 80070c0:	af00      	add	r7, sp, #0
 80070c2:	6078      	str	r0, [r7, #4]
  ETH_MACConfigTypeDef macDefaultConf;
  ETH_DMAConfigTypeDef dmaDefaultConf;

  /*--------------- ETHERNET MAC registers default Configuration --------------*/
  macDefaultConf.AutomaticPadCRCStrip = ENABLE;
 80070c4:	2301      	movs	r3, #1
 80070c6:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
  macDefaultConf.BackOffLimit = ETH_BACKOFFLIMIT_10;
 80070ca:	2300      	movs	r3, #0
 80070cc:	653b      	str	r3, [r7, #80]	; 0x50
  macDefaultConf.CarrierSenseBeforeTransmit = DISABLE;
 80070ce:	2300      	movs	r3, #0
 80070d0:	f887 3049 	strb.w	r3, [r7, #73]	; 0x49
  macDefaultConf.CarrierSenseDuringTransmit = DISABLE;
 80070d4:	2300      	movs	r3, #0
 80070d6:	f887 304b 	strb.w	r3, [r7, #75]	; 0x4b
  macDefaultConf.ChecksumOffload = ENABLE;
 80070da:	2301      	movs	r3, #1
 80070dc:	f887 3030 	strb.w	r3, [r7, #48]	; 0x30
  macDefaultConf.CRCCheckingRxPackets = ENABLE;
 80070e0:	2301      	movs	r3, #1
 80070e2:	f887 305e 	strb.w	r3, [r7, #94]	; 0x5e
  macDefaultConf.CRCStripTypePacket = ENABLE;
 80070e6:	2301      	movs	r3, #1
 80070e8:	f887 303a 	strb.w	r3, [r7, #58]	; 0x3a
  macDefaultConf.DeferralCheck = DISABLE;
 80070ec:	2300      	movs	r3, #0
 80070ee:	f887 3054 	strb.w	r3, [r7, #84]	; 0x54
  macDefaultConf.DropTCPIPChecksumErrorPacket = ENABLE;
 80070f2:	2301      	movs	r3, #1
 80070f4:	f887 308c 	strb.w	r3, [r7, #140]	; 0x8c
  macDefaultConf.DuplexMode = ETH_FULLDUPLEX_MODE;
 80070f8:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80070fc:	647b      	str	r3, [r7, #68]	; 0x44
  macDefaultConf.ExtendedInterPacketGap = DISABLE;
 80070fe:	2300      	movs	r3, #0
 8007100:	f887 3064 	strb.w	r3, [r7, #100]	; 0x64
  macDefaultConf.ExtendedInterPacketGapVal = 0x0;
 8007104:	2300      	movs	r3, #0
 8007106:	66bb      	str	r3, [r7, #104]	; 0x68
  macDefaultConf.ForwardRxErrorPacket = DISABLE;
 8007108:	2300      	movs	r3, #0
 800710a:	f887 308d 	strb.w	r3, [r7, #141]	; 0x8d
  macDefaultConf.ForwardRxUndersizedGoodPacket = DISABLE;
 800710e:	2300      	movs	r3, #0
 8007110:	f887 308e 	strb.w	r3, [r7, #142]	; 0x8e
  macDefaultConf.GiantPacketSizeLimit = 0x618;
 8007114:	f44f 63c3 	mov.w	r3, #1560	; 0x618
 8007118:	663b      	str	r3, [r7, #96]	; 0x60
  macDefaultConf.GiantPacketSizeLimitControl = DISABLE;
 800711a:	2300      	movs	r3, #0
 800711c:	f887 3038 	strb.w	r3, [r7, #56]	; 0x38
  macDefaultConf.InterPacketGapVal = ETH_INTERPACKETGAP_96BIT;
 8007120:	2300      	movs	r3, #0
 8007122:	637b      	str	r3, [r7, #52]	; 0x34
  macDefaultConf.Jabber = ENABLE;
 8007124:	2301      	movs	r3, #1
 8007126:	f887 303d 	strb.w	r3, [r7, #61]	; 0x3d
  macDefaultConf.JumboPacket = DISABLE;
 800712a:	2300      	movs	r3, #0
 800712c:	f887 303e 	strb.w	r3, [r7, #62]	; 0x3e
  macDefaultConf.LoopbackMode = DISABLE;
 8007130:	2300      	movs	r3, #0
 8007132:	f887 3048 	strb.w	r3, [r7, #72]	; 0x48
  macDefaultConf.PauseLowThreshold = ETH_PAUSELOWTHRESHOLD_MINUS_4;
 8007136:	2300      	movs	r3, #0
 8007138:	67fb      	str	r3, [r7, #124]	; 0x7c
  macDefaultConf.PauseTime = 0x0;
 800713a:	2300      	movs	r3, #0
 800713c:	677b      	str	r3, [r7, #116]	; 0x74
  macDefaultConf.PreambleLength = ETH_PREAMBLELENGTH_7;
 800713e:	2300      	movs	r3, #0
 8007140:	65bb      	str	r3, [r7, #88]	; 0x58
  macDefaultConf.ProgrammableWatchdog = DISABLE;
 8007142:	2300      	movs	r3, #0
 8007144:	f887 306c 	strb.w	r3, [r7, #108]	; 0x6c
  macDefaultConf.ReceiveFlowControl = DISABLE;
 8007148:	2300      	movs	r3, #0
 800714a:	f887 3082 	strb.w	r3, [r7, #130]	; 0x82
  macDefaultConf.ReceiveOwn = ENABLE;
 800714e:	2301      	movs	r3, #1
 8007150:	f887 304a 	strb.w	r3, [r7, #74]	; 0x4a
  macDefaultConf.ReceiveQueueMode = ETH_RECEIVESTOREFORWARD;
 8007154:	2320      	movs	r3, #32
 8007156:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  macDefaultConf.RetryTransmission = ENABLE;
 800715a:	2301      	movs	r3, #1
 800715c:	f887 304c 	strb.w	r3, [r7, #76]	; 0x4c
  macDefaultConf.SlowProtocolDetect = DISABLE;
 8007160:	2300      	movs	r3, #0
 8007162:	f887 305d 	strb.w	r3, [r7, #93]	; 0x5d
  macDefaultConf.SourceAddrControl = ETH_SOURCEADDRESS_REPLACE_ADDR0;
 8007166:	f04f 5340 	mov.w	r3, #805306368	; 0x30000000
 800716a:	62fb      	str	r3, [r7, #44]	; 0x2c
  macDefaultConf.Speed = ETH_SPEED_100M;
 800716c:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8007170:	643b      	str	r3, [r7, #64]	; 0x40
  macDefaultConf.Support2KPacket = DISABLE;
 8007172:	2300      	movs	r3, #0
 8007174:	f887 3039 	strb.w	r3, [r7, #57]	; 0x39
  macDefaultConf.TransmitQueueMode = ETH_TRANSMITSTOREFORWARD;
 8007178:	2302      	movs	r3, #2
 800717a:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  macDefaultConf.TransmitFlowControl = DISABLE;
 800717e:	2300      	movs	r3, #0
 8007180:	f887 3080 	strb.w	r3, [r7, #128]	; 0x80
  macDefaultConf.UnicastPausePacketDetect = DISABLE;
 8007184:	2300      	movs	r3, #0
 8007186:	f887 3081 	strb.w	r3, [r7, #129]	; 0x81
  macDefaultConf.UnicastSlowProtocolPacketDetect = DISABLE;
 800718a:	2300      	movs	r3, #0
 800718c:	f887 305c 	strb.w	r3, [r7, #92]	; 0x5c
  macDefaultConf.Watchdog = ENABLE;
 8007190:	2301      	movs	r3, #1
 8007192:	f887 303c 	strb.w	r3, [r7, #60]	; 0x3c
  macDefaultConf.WatchdogTimeout =  ETH_MACWTR_WTO_2KB;
 8007196:	2300      	movs	r3, #0
 8007198:	673b      	str	r3, [r7, #112]	; 0x70
  macDefaultConf.ZeroQuantaPause = ENABLE;
 800719a:	2301      	movs	r3, #1
 800719c:	f887 3078 	strb.w	r3, [r7, #120]	; 0x78

  /* MAC default configuration */
  ETH_SetMACConfig(heth, &macDefaultConf);
 80071a0:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80071a4:	4619      	mov	r1, r3
 80071a6:	6878      	ldr	r0, [r7, #4]
 80071a8:	f7ff fde6 	bl	8006d78 <ETH_SetMACConfig>

  /*--------------- ETHERNET DMA registers default Configuration --------------*/
  dmaDefaultConf.AddressAlignedBeats = ENABLE;
 80071ac:	2301      	movs	r3, #1
 80071ae:	733b      	strb	r3, [r7, #12]
  dmaDefaultConf.BurstMode = ETH_BURSTLENGTH_FIXED;
 80071b0:	2301      	movs	r3, #1
 80071b2:	613b      	str	r3, [r7, #16]
  dmaDefaultConf.DMAArbitration = ETH_DMAARBITRATION_RX1_TX1;
 80071b4:	2300      	movs	r3, #0
 80071b6:	60bb      	str	r3, [r7, #8]
  dmaDefaultConf.FlushRxPacket = DISABLE;
 80071b8:	2300      	movs	r3, #0
 80071ba:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
  dmaDefaultConf.PBLx8Mode = DISABLE;
 80071be:	2300      	movs	r3, #0
 80071c0:	757b      	strb	r3, [r7, #21]
  dmaDefaultConf.RebuildINCRxBurst = DISABLE;
 80071c2:	2300      	movs	r3, #0
 80071c4:	753b      	strb	r3, [r7, #20]
  dmaDefaultConf.RxDMABurstLength = ETH_RXDMABURSTLENGTH_32BEAT;
 80071c6:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 80071ca:	623b      	str	r3, [r7, #32]
  dmaDefaultConf.SecondPacketOperate = DISABLE;
 80071cc:	2300      	movs	r3, #0
 80071ce:	773b      	strb	r3, [r7, #28]
  dmaDefaultConf.TxDMABurstLength = ETH_TXDMABURSTLENGTH_32BEAT;
 80071d0:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 80071d4:	61bb      	str	r3, [r7, #24]
  dmaDefaultConf.TCPSegmentation = DISABLE;
 80071d6:	2300      	movs	r3, #0
 80071d8:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
  dmaDefaultConf.MaximumSegmentSize = ETH_SEGMENT_SIZE_DEFAULT;
 80071dc:	f44f 7306 	mov.w	r3, #536	; 0x218
 80071e0:	62bb      	str	r3, [r7, #40]	; 0x28

  /* DMA default configuration */
  ETH_SetDMAConfig(heth, &dmaDefaultConf);
 80071e2:	f107 0308 	add.w	r3, r7, #8
 80071e6:	4619      	mov	r1, r3
 80071e8:	6878      	ldr	r0, [r7, #4]
 80071ea:	f7ff fee1 	bl	8006fb0 <ETH_SetDMAConfig>
}
 80071ee:	bf00      	nop
 80071f0:	3790      	adds	r7, #144	; 0x90
 80071f2:	46bd      	mov	sp, r7
 80071f4:	bd80      	pop	{r7, pc}

080071f6 <ETH_DMATxDescListInit>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_DMATxDescListInit(ETH_HandleTypeDef *heth)
{
 80071f6:	b480      	push	{r7}
 80071f8:	b085      	sub	sp, #20
 80071fa:	af00      	add	r7, sp, #0
 80071fc:	6078      	str	r0, [r7, #4]
  ETH_DMADescTypeDef *dmatxdesc;
  uint32_t i;

  /* Fill each DMATxDesc descriptor with the right values */
  for (i = 0; i < (uint32_t)ETH_TX_DESC_CNT; i++)
 80071fe:	2300      	movs	r3, #0
 8007200:	60fb      	str	r3, [r7, #12]
 8007202:	e01d      	b.n	8007240 <ETH_DMATxDescListInit+0x4a>
  {
    dmatxdesc = heth->Init.TxDesc + i;
 8007204:	687b      	ldr	r3, [r7, #4]
 8007206:	68d9      	ldr	r1, [r3, #12]
 8007208:	68fa      	ldr	r2, [r7, #12]
 800720a:	4613      	mov	r3, r2
 800720c:	005b      	lsls	r3, r3, #1
 800720e:	4413      	add	r3, r2
 8007210:	00db      	lsls	r3, r3, #3
 8007212:	440b      	add	r3, r1
 8007214:	60bb      	str	r3, [r7, #8]

    WRITE_REG(dmatxdesc->DESC0, 0x0);
 8007216:	68bb      	ldr	r3, [r7, #8]
 8007218:	2200      	movs	r2, #0
 800721a:	601a      	str	r2, [r3, #0]
    WRITE_REG(dmatxdesc->DESC1, 0x0);
 800721c:	68bb      	ldr	r3, [r7, #8]
 800721e:	2200      	movs	r2, #0
 8007220:	605a      	str	r2, [r3, #4]
    WRITE_REG(dmatxdesc->DESC2, 0x0);
 8007222:	68bb      	ldr	r3, [r7, #8]
 8007224:	2200      	movs	r2, #0
 8007226:	609a      	str	r2, [r3, #8]
    WRITE_REG(dmatxdesc->DESC3, 0x0);
 8007228:	68bb      	ldr	r3, [r7, #8]
 800722a:	2200      	movs	r2, #0
 800722c:	60da      	str	r2, [r3, #12]

    WRITE_REG(heth->TxDescList.TxDesc[i], (uint32_t)dmatxdesc);
 800722e:	68b9      	ldr	r1, [r7, #8]
 8007230:	687b      	ldr	r3, [r7, #4]
 8007232:	68fa      	ldr	r2, [r7, #12]
 8007234:	3206      	adds	r2, #6
 8007236:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  for (i = 0; i < (uint32_t)ETH_TX_DESC_CNT; i++)
 800723a:	68fb      	ldr	r3, [r7, #12]
 800723c:	3301      	adds	r3, #1
 800723e:	60fb      	str	r3, [r7, #12]
 8007240:	68fb      	ldr	r3, [r7, #12]
 8007242:	2b03      	cmp	r3, #3
 8007244:	d9de      	bls.n	8007204 <ETH_DMATxDescListInit+0xe>

  }

  heth->TxDescList.CurTxDesc = 0;
 8007246:	687b      	ldr	r3, [r7, #4]
 8007248:	2200      	movs	r2, #0
 800724a:	629a      	str	r2, [r3, #40]	; 0x28

  /* Set Transmit Descriptor Ring Length */
  WRITE_REG(heth->Instance->DMACTDRLR, (ETH_TX_DESC_CNT - 1U));
 800724c:	687b      	ldr	r3, [r7, #4]
 800724e:	681b      	ldr	r3, [r3, #0]
 8007250:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8007254:	461a      	mov	r2, r3
 8007256:	2303      	movs	r3, #3
 8007258:	f8c2 312c 	str.w	r3, [r2, #300]	; 0x12c

  /* Set Transmit Descriptor List Address */
  WRITE_REG(heth->Instance->DMACTDLAR, (uint32_t) heth->Init.TxDesc);
 800725c:	687b      	ldr	r3, [r7, #4]
 800725e:	68da      	ldr	r2, [r3, #12]
 8007260:	687b      	ldr	r3, [r7, #4]
 8007262:	681b      	ldr	r3, [r3, #0]
 8007264:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8007268:	f8c3 2114 	str.w	r2, [r3, #276]	; 0x114

  /* Set Transmit Descriptor Tail pointer */
  WRITE_REG(heth->Instance->DMACTDTPR, (uint32_t) heth->Init.TxDesc);
 800726c:	687b      	ldr	r3, [r7, #4]
 800726e:	68da      	ldr	r2, [r3, #12]
 8007270:	687b      	ldr	r3, [r7, #4]
 8007272:	681b      	ldr	r3, [r3, #0]
 8007274:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8007278:	f8c3 2120 	str.w	r2, [r3, #288]	; 0x120
}
 800727c:	bf00      	nop
 800727e:	3714      	adds	r7, #20
 8007280:	46bd      	mov	sp, r7
 8007282:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007286:	4770      	bx	lr

08007288 <ETH_DMARxDescListInit>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_DMARxDescListInit(ETH_HandleTypeDef *heth)
{
 8007288:	b480      	push	{r7}
 800728a:	b085      	sub	sp, #20
 800728c:	af00      	add	r7, sp, #0
 800728e:	6078      	str	r0, [r7, #4]
  ETH_DMADescTypeDef *dmarxdesc;
  uint32_t i;

  for (i = 0; i < (uint32_t)ETH_RX_DESC_CNT; i++)
 8007290:	2300      	movs	r3, #0
 8007292:	60fb      	str	r3, [r7, #12]
 8007294:	e023      	b.n	80072de <ETH_DMARxDescListInit+0x56>
  {
    dmarxdesc =  heth->Init.RxDesc + i;
 8007296:	687b      	ldr	r3, [r7, #4]
 8007298:	6919      	ldr	r1, [r3, #16]
 800729a:	68fa      	ldr	r2, [r7, #12]
 800729c:	4613      	mov	r3, r2
 800729e:	005b      	lsls	r3, r3, #1
 80072a0:	4413      	add	r3, r2
 80072a2:	00db      	lsls	r3, r3, #3
 80072a4:	440b      	add	r3, r1
 80072a6:	60bb      	str	r3, [r7, #8]

    WRITE_REG(dmarxdesc->DESC0, 0x0);
 80072a8:	68bb      	ldr	r3, [r7, #8]
 80072aa:	2200      	movs	r2, #0
 80072ac:	601a      	str	r2, [r3, #0]
    WRITE_REG(dmarxdesc->DESC1, 0x0);
 80072ae:	68bb      	ldr	r3, [r7, #8]
 80072b0:	2200      	movs	r2, #0
 80072b2:	605a      	str	r2, [r3, #4]
    WRITE_REG(dmarxdesc->DESC2, 0x0);
 80072b4:	68bb      	ldr	r3, [r7, #8]
 80072b6:	2200      	movs	r2, #0
 80072b8:	609a      	str	r2, [r3, #8]
    WRITE_REG(dmarxdesc->DESC3, 0x0);
 80072ba:	68bb      	ldr	r3, [r7, #8]
 80072bc:	2200      	movs	r2, #0
 80072be:	60da      	str	r2, [r3, #12]
    WRITE_REG(dmarxdesc->BackupAddr0, 0x0);
 80072c0:	68bb      	ldr	r3, [r7, #8]
 80072c2:	2200      	movs	r2, #0
 80072c4:	611a      	str	r2, [r3, #16]
    WRITE_REG(dmarxdesc->BackupAddr1, 0x0);
 80072c6:	68bb      	ldr	r3, [r7, #8]
 80072c8:	2200      	movs	r2, #0
 80072ca:	615a      	str	r2, [r3, #20]


    /* Set Rx descritors addresses */
    WRITE_REG(heth->RxDescList.RxDesc[i], (uint32_t)dmarxdesc);
 80072cc:	68b9      	ldr	r1, [r7, #8]
 80072ce:	687b      	ldr	r3, [r7, #4]
 80072d0:	68fa      	ldr	r2, [r7, #12]
 80072d2:	3212      	adds	r2, #18
 80072d4:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  for (i = 0; i < (uint32_t)ETH_RX_DESC_CNT; i++)
 80072d8:	68fb      	ldr	r3, [r7, #12]
 80072da:	3301      	adds	r3, #1
 80072dc:	60fb      	str	r3, [r7, #12]
 80072de:	68fb      	ldr	r3, [r7, #12]
 80072e0:	2b03      	cmp	r3, #3
 80072e2:	d9d8      	bls.n	8007296 <ETH_DMARxDescListInit+0xe>

  }

  WRITE_REG(heth->RxDescList.RxDescIdx, 0);
 80072e4:	687b      	ldr	r3, [r7, #4]
 80072e6:	2200      	movs	r2, #0
 80072e8:	65da      	str	r2, [r3, #92]	; 0x5c
  WRITE_REG(heth->RxDescList.RxDescCnt, 0);
 80072ea:	687b      	ldr	r3, [r7, #4]
 80072ec:	2200      	movs	r2, #0
 80072ee:	661a      	str	r2, [r3, #96]	; 0x60
  WRITE_REG(heth->RxDescList.RxBuildDescIdx, 0);
 80072f0:	687b      	ldr	r3, [r7, #4]
 80072f2:	2200      	movs	r2, #0
 80072f4:	669a      	str	r2, [r3, #104]	; 0x68
  WRITE_REG(heth->RxDescList.RxBuildDescCnt, 0);
 80072f6:	687b      	ldr	r3, [r7, #4]
 80072f8:	2200      	movs	r2, #0
 80072fa:	66da      	str	r2, [r3, #108]	; 0x6c
  WRITE_REG(heth->RxDescList.ItMode, 0);
 80072fc:	687b      	ldr	r3, [r7, #4]
 80072fe:	2200      	movs	r2, #0
 8007300:	659a      	str	r2, [r3, #88]	; 0x58

  /* Set Receive Descriptor Ring Length */
  WRITE_REG(heth->Instance->DMACRDRLR, ((uint32_t)(ETH_RX_DESC_CNT - 1U)));
 8007302:	687b      	ldr	r3, [r7, #4]
 8007304:	681b      	ldr	r3, [r3, #0]
 8007306:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800730a:	461a      	mov	r2, r3
 800730c:	2303      	movs	r3, #3
 800730e:	f8c2 3130 	str.w	r3, [r2, #304]	; 0x130

  /* Set Receive Descriptor List Address */
  WRITE_REG(heth->Instance->DMACRDLAR, (uint32_t) heth->Init.RxDesc);
 8007312:	687b      	ldr	r3, [r7, #4]
 8007314:	691a      	ldr	r2, [r3, #16]
 8007316:	687b      	ldr	r3, [r7, #4]
 8007318:	681b      	ldr	r3, [r3, #0]
 800731a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800731e:	f8c3 211c 	str.w	r2, [r3, #284]	; 0x11c

  /* Set Receive Descriptor Tail pointer Address */
  WRITE_REG(heth->Instance->DMACRDTPR, ((uint32_t)(heth->Init.RxDesc + (uint32_t)(ETH_RX_DESC_CNT - 1U))));
 8007322:	687b      	ldr	r3, [r7, #4]
 8007324:	691b      	ldr	r3, [r3, #16]
 8007326:	f103 0248 	add.w	r2, r3, #72	; 0x48
 800732a:	687b      	ldr	r3, [r7, #4]
 800732c:	681b      	ldr	r3, [r3, #0]
 800732e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8007332:	f8c3 2128 	str.w	r2, [r3, #296]	; 0x128
}
 8007336:	bf00      	nop
 8007338:	3714      	adds	r7, #20
 800733a:	46bd      	mov	sp, r7
 800733c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007340:	4770      	bx	lr
	...

08007344 <ETH_Prepare_Tx_Descriptors>:
  * @param  pTxConfig: Tx packet configuration
  * @param  ItMode: Enable or disable Tx EOT interrept
  * @retval Status
  */
static uint32_t ETH_Prepare_Tx_Descriptors(ETH_HandleTypeDef *heth, ETH_TxPacketConfig *pTxConfig, uint32_t ItMode)
{
 8007344:	b480      	push	{r7}
 8007346:	b08d      	sub	sp, #52	; 0x34
 8007348:	af00      	add	r7, sp, #0
 800734a:	60f8      	str	r0, [r7, #12]
 800734c:	60b9      	str	r1, [r7, #8]
 800734e:	607a      	str	r2, [r7, #4]
  ETH_TxDescListTypeDef *dmatxdesclist = &heth->TxDescList;
 8007350:	68fb      	ldr	r3, [r7, #12]
 8007352:	3318      	adds	r3, #24
 8007354:	617b      	str	r3, [r7, #20]
  uint32_t descidx = dmatxdesclist->CurTxDesc;
 8007356:	697b      	ldr	r3, [r7, #20]
 8007358:	691b      	ldr	r3, [r3, #16]
 800735a:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t firstdescidx = dmatxdesclist->CurTxDesc;
 800735c:	697b      	ldr	r3, [r7, #20]
 800735e:	691b      	ldr	r3, [r3, #16]
 8007360:	613b      	str	r3, [r7, #16]
  uint32_t idx;
  uint32_t descnbr = 0;
 8007362:	2300      	movs	r3, #0
 8007364:	627b      	str	r3, [r7, #36]	; 0x24
  ETH_DMADescTypeDef *dmatxdesc = (ETH_DMADescTypeDef *)dmatxdesclist->TxDesc[descidx];
 8007366:	697b      	ldr	r3, [r7, #20]
 8007368:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800736a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800736e:	623b      	str	r3, [r7, #32]

  ETH_BufferTypeDef  *txbuffer = pTxConfig->TxBuffer;
 8007370:	68bb      	ldr	r3, [r7, #8]
 8007372:	689b      	ldr	r3, [r3, #8]
 8007374:	61fb      	str	r3, [r7, #28]
  uint32_t           bd_count = 0;
 8007376:	2300      	movs	r3, #0
 8007378:	61bb      	str	r3, [r7, #24]

  /* Current Tx Descriptor Owned by DMA: cannot be used by the application  */
  if ((READ_BIT(dmatxdesc->DESC3, ETH_DMATXNDESCWBF_OWN) == ETH_DMATXNDESCWBF_OWN)
 800737a:	6a3b      	ldr	r3, [r7, #32]
 800737c:	68db      	ldr	r3, [r3, #12]
 800737e:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8007382:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8007386:	d007      	beq.n	8007398 <ETH_Prepare_Tx_Descriptors+0x54>
      || (dmatxdesclist->PacketAddress[descidx] != NULL))
 8007388:	697a      	ldr	r2, [r7, #20]
 800738a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800738c:	3304      	adds	r3, #4
 800738e:	009b      	lsls	r3, r3, #2
 8007390:	4413      	add	r3, r2
 8007392:	685b      	ldr	r3, [r3, #4]
 8007394:	2b00      	cmp	r3, #0
 8007396:	d001      	beq.n	800739c <ETH_Prepare_Tx_Descriptors+0x58>
  {
    return HAL_ETH_ERROR_BUSY;
 8007398:	2302      	movs	r3, #2
 800739a:	e259      	b.n	8007850 <ETH_Prepare_Tx_Descriptors+0x50c>

  /***************************************************************************/
  /*****************    Context descriptor configuration (Optional) **********/
  /***************************************************************************/
  /* If VLAN tag is enabled for this packet */
  if (READ_BIT(pTxConfig->Attributes, ETH_TX_PACKETS_FEATURES_VLANTAG) != (uint32_t)RESET)
 800739c:	68bb      	ldr	r3, [r7, #8]
 800739e:	681b      	ldr	r3, [r3, #0]
 80073a0:	f003 0304 	and.w	r3, r3, #4
 80073a4:	2b00      	cmp	r3, #0
 80073a6:	d044      	beq.n	8007432 <ETH_Prepare_Tx_Descriptors+0xee>
  {
    /* Set vlan tag value */
    MODIFY_REG(dmatxdesc->DESC3, ETH_DMATXCDESC_VT, pTxConfig->VlanTag);
 80073a8:	6a3b      	ldr	r3, [r7, #32]
 80073aa:	68da      	ldr	r2, [r3, #12]
 80073ac:	4b75      	ldr	r3, [pc, #468]	; (8007584 <ETH_Prepare_Tx_Descriptors+0x240>)
 80073ae:	4013      	ands	r3, r2
 80073b0:	68ba      	ldr	r2, [r7, #8]
 80073b2:	6a52      	ldr	r2, [r2, #36]	; 0x24
 80073b4:	431a      	orrs	r2, r3
 80073b6:	6a3b      	ldr	r3, [r7, #32]
 80073b8:	60da      	str	r2, [r3, #12]
    /* Set vlan tag valid bit */
    SET_BIT(dmatxdesc->DESC3, ETH_DMATXCDESC_VLTV);
 80073ba:	6a3b      	ldr	r3, [r7, #32]
 80073bc:	68db      	ldr	r3, [r3, #12]
 80073be:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 80073c2:	6a3b      	ldr	r3, [r7, #32]
 80073c4:	60da      	str	r2, [r3, #12]
    /* Set the descriptor as the vlan input source */
    SET_BIT(heth->Instance->MACVIR, ETH_MACVIR_VLTI);
 80073c6:	68fb      	ldr	r3, [r7, #12]
 80073c8:	681b      	ldr	r3, [r3, #0]
 80073ca:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 80073cc:	68fb      	ldr	r3, [r7, #12]
 80073ce:	681b      	ldr	r3, [r3, #0]
 80073d0:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
 80073d4:	661a      	str	r2, [r3, #96]	; 0x60

    /* if inner VLAN is enabled */
    if (READ_BIT(pTxConfig->Attributes, ETH_TX_PACKETS_FEATURES_INNERVLANTAG) != (uint32_t)RESET)
 80073d6:	68bb      	ldr	r3, [r7, #8]
 80073d8:	681b      	ldr	r3, [r3, #0]
 80073da:	f003 0308 	and.w	r3, r3, #8
 80073de:	2b00      	cmp	r3, #0
 80073e0:	d027      	beq.n	8007432 <ETH_Prepare_Tx_Descriptors+0xee>
    {
      /* Set inner vlan tag value */
      MODIFY_REG(dmatxdesc->DESC2, ETH_DMATXCDESC_IVT, (pTxConfig->InnerVlanTag << 16));
 80073e2:	6a3b      	ldr	r3, [r7, #32]
 80073e4:	689b      	ldr	r3, [r3, #8]
 80073e6:	b29a      	uxth	r2, r3
 80073e8:	68bb      	ldr	r3, [r7, #8]
 80073ea:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80073ec:	041b      	lsls	r3, r3, #16
 80073ee:	431a      	orrs	r2, r3
 80073f0:	6a3b      	ldr	r3, [r7, #32]
 80073f2:	609a      	str	r2, [r3, #8]
      /* Set inner vlan tag valid bit */
      SET_BIT(dmatxdesc->DESC3, ETH_DMATXCDESC_IVLTV);
 80073f4:	6a3b      	ldr	r3, [r7, #32]
 80073f6:	68db      	ldr	r3, [r3, #12]
 80073f8:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 80073fc:	6a3b      	ldr	r3, [r7, #32]
 80073fe:	60da      	str	r2, [r3, #12]

      /* Set Vlan Tag control */
      MODIFY_REG(dmatxdesc->DESC3, ETH_DMATXCDESC_IVTIR, pTxConfig->InnerVlanCtrl);
 8007400:	6a3b      	ldr	r3, [r7, #32]
 8007402:	68db      	ldr	r3, [r3, #12]
 8007404:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8007408:	68bb      	ldr	r3, [r7, #8]
 800740a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800740c:	431a      	orrs	r2, r3
 800740e:	6a3b      	ldr	r3, [r7, #32]
 8007410:	60da      	str	r2, [r3, #12]

      /* Set the descriptor as the inner vlan input source */
      SET_BIT(heth->Instance->MACIVIR, ETH_MACIVIR_VLTI);
 8007412:	68fb      	ldr	r3, [r7, #12]
 8007414:	681b      	ldr	r3, [r3, #0]
 8007416:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 8007418:	68fb      	ldr	r3, [r7, #12]
 800741a:	681b      	ldr	r3, [r3, #0]
 800741c:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
 8007420:	665a      	str	r2, [r3, #100]	; 0x64
      /* Enable double VLAN processing */
      SET_BIT(heth->Instance->MACVTR, ETH_MACVTR_EDVLP);
 8007422:	68fb      	ldr	r3, [r7, #12]
 8007424:	681b      	ldr	r3, [r3, #0]
 8007426:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8007428:	68fb      	ldr	r3, [r7, #12]
 800742a:	681b      	ldr	r3, [r3, #0]
 800742c:	f042 6280 	orr.w	r2, r2, #67108864	; 0x4000000
 8007430:	651a      	str	r2, [r3, #80]	; 0x50
    }
  }

  /* if tcp segmentation is enabled for this packet */
  if (READ_BIT(pTxConfig->Attributes, ETH_TX_PACKETS_FEATURES_TSO) != (uint32_t)RESET)
 8007432:	68bb      	ldr	r3, [r7, #8]
 8007434:	681b      	ldr	r3, [r3, #0]
 8007436:	f003 0310 	and.w	r3, r3, #16
 800743a:	2b00      	cmp	r3, #0
 800743c:	d00e      	beq.n	800745c <ETH_Prepare_Tx_Descriptors+0x118>
  {
    /* Set MSS value */
    MODIFY_REG(dmatxdesc->DESC2, ETH_DMATXCDESC_MSS, pTxConfig->MaxSegmentSize);
 800743e:	6a3b      	ldr	r3, [r7, #32]
 8007440:	689a      	ldr	r2, [r3, #8]
 8007442:	4b51      	ldr	r3, [pc, #324]	; (8007588 <ETH_Prepare_Tx_Descriptors+0x244>)
 8007444:	4013      	ands	r3, r2
 8007446:	68ba      	ldr	r2, [r7, #8]
 8007448:	6992      	ldr	r2, [r2, #24]
 800744a:	431a      	orrs	r2, r3
 800744c:	6a3b      	ldr	r3, [r7, #32]
 800744e:	609a      	str	r2, [r3, #8]
    /* Set MSS valid bit */
    SET_BIT(dmatxdesc->DESC3, ETH_DMATXCDESC_TCMSSV);
 8007450:	6a3b      	ldr	r3, [r7, #32]
 8007452:	68db      	ldr	r3, [r3, #12]
 8007454:	f043 6280 	orr.w	r2, r3, #67108864	; 0x4000000
 8007458:	6a3b      	ldr	r3, [r7, #32]
 800745a:	60da      	str	r2, [r3, #12]
  }

  if ((READ_BIT(pTxConfig->Attributes, ETH_TX_PACKETS_FEATURES_VLANTAG) != (uint32_t)RESET)
 800745c:	68bb      	ldr	r3, [r7, #8]
 800745e:	681b      	ldr	r3, [r3, #0]
 8007460:	f003 0304 	and.w	r3, r3, #4
 8007464:	2b00      	cmp	r3, #0
 8007466:	d105      	bne.n	8007474 <ETH_Prepare_Tx_Descriptors+0x130>
      || (READ_BIT(pTxConfig->Attributes, ETH_TX_PACKETS_FEATURES_TSO) != (uint32_t)RESET))
 8007468:	68bb      	ldr	r3, [r7, #8]
 800746a:	681b      	ldr	r3, [r3, #0]
 800746c:	f003 0310 	and.w	r3, r3, #16
 8007470:	2b00      	cmp	r3, #0
 8007472:	d036      	beq.n	80074e2 <ETH_Prepare_Tx_Descriptors+0x19e>
  {
    /* Set as context descriptor */
    SET_BIT(dmatxdesc->DESC3, ETH_DMATXCDESC_CTXT);
 8007474:	6a3b      	ldr	r3, [r7, #32]
 8007476:	68db      	ldr	r3, [r3, #12]
 8007478:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 800747c:	6a3b      	ldr	r3, [r7, #32]
 800747e:	60da      	str	r2, [r3, #12]
  __ASM volatile ("dmb 0xF":::"memory");
 8007480:	f3bf 8f5f 	dmb	sy
}
 8007484:	bf00      	nop
    /* Ensure rest of descriptor is written to RAM before the OWN bit */
    __DMB();
    /* Set own bit */
    SET_BIT(dmatxdesc->DESC3, ETH_DMATXCDESC_OWN);
 8007486:	6a3b      	ldr	r3, [r7, #32]
 8007488:	68db      	ldr	r3, [r3, #12]
 800748a:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 800748e:	6a3b      	ldr	r3, [r7, #32]
 8007490:	60da      	str	r2, [r3, #12]
    /* Increment current tx descriptor index */
    INCR_TX_DESC_INDEX(descidx, 1U);
 8007492:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007494:	3301      	adds	r3, #1
 8007496:	62fb      	str	r3, [r7, #44]	; 0x2c
 8007498:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800749a:	2b03      	cmp	r3, #3
 800749c:	d902      	bls.n	80074a4 <ETH_Prepare_Tx_Descriptors+0x160>
 800749e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80074a0:	3b04      	subs	r3, #4
 80074a2:	62fb      	str	r3, [r7, #44]	; 0x2c
    /* Get current descriptor address */
    dmatxdesc = (ETH_DMADescTypeDef *)dmatxdesclist->TxDesc[descidx];
 80074a4:	697b      	ldr	r3, [r7, #20]
 80074a6:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80074a8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80074ac:	623b      	str	r3, [r7, #32]

    descnbr += 1U;
 80074ae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80074b0:	3301      	adds	r3, #1
 80074b2:	627b      	str	r3, [r7, #36]	; 0x24

    /* Current Tx Descriptor Owned by DMA: cannot be used by the application  */
    if (READ_BIT(dmatxdesc->DESC3, ETH_DMATXNDESCWBF_OWN) == ETH_DMATXNDESCWBF_OWN)
 80074b4:	6a3b      	ldr	r3, [r7, #32]
 80074b6:	68db      	ldr	r3, [r3, #12]
 80074b8:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80074bc:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80074c0:	d10f      	bne.n	80074e2 <ETH_Prepare_Tx_Descriptors+0x19e>
    {
      dmatxdesc = (ETH_DMADescTypeDef *)dmatxdesclist->TxDesc[firstdescidx];
 80074c2:	697b      	ldr	r3, [r7, #20]
 80074c4:	693a      	ldr	r2, [r7, #16]
 80074c6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80074ca:	623b      	str	r3, [r7, #32]
  __ASM volatile ("dmb 0xF":::"memory");
 80074cc:	f3bf 8f5f 	dmb	sy
}
 80074d0:	bf00      	nop
      /* Ensure rest of descriptor is written to RAM before the OWN bit */
      __DMB();
      /* Clear own bit */
      CLEAR_BIT(dmatxdesc->DESC3, ETH_DMATXCDESC_OWN);
 80074d2:	6a3b      	ldr	r3, [r7, #32]
 80074d4:	68db      	ldr	r3, [r3, #12]
 80074d6:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 80074da:	6a3b      	ldr	r3, [r7, #32]
 80074dc:	60da      	str	r2, [r3, #12]

      return HAL_ETH_ERROR_BUSY;
 80074de:	2302      	movs	r3, #2
 80074e0:	e1b6      	b.n	8007850 <ETH_Prepare_Tx_Descriptors+0x50c>

  /***************************************************************************/
  /*****************    Normal descriptors configuration     *****************/
  /***************************************************************************/

  descnbr += 1U;
 80074e2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80074e4:	3301      	adds	r3, #1
 80074e6:	627b      	str	r3, [r7, #36]	; 0x24

  /* Set header or buffer 1 address */
  WRITE_REG(dmatxdesc->DESC0, (uint32_t)txbuffer->buffer);
 80074e8:	69fb      	ldr	r3, [r7, #28]
 80074ea:	681b      	ldr	r3, [r3, #0]
 80074ec:	461a      	mov	r2, r3
 80074ee:	6a3b      	ldr	r3, [r7, #32]
 80074f0:	601a      	str	r2, [r3, #0]
  /* Set header or buffer 1 Length */
  MODIFY_REG(dmatxdesc->DESC2, ETH_DMATXNDESCRF_B1L, txbuffer->len);
 80074f2:	6a3b      	ldr	r3, [r7, #32]
 80074f4:	689a      	ldr	r2, [r3, #8]
 80074f6:	4b24      	ldr	r3, [pc, #144]	; (8007588 <ETH_Prepare_Tx_Descriptors+0x244>)
 80074f8:	4013      	ands	r3, r2
 80074fa:	69fa      	ldr	r2, [r7, #28]
 80074fc:	6852      	ldr	r2, [r2, #4]
 80074fe:	431a      	orrs	r2, r3
 8007500:	6a3b      	ldr	r3, [r7, #32]
 8007502:	609a      	str	r2, [r3, #8]

  if (txbuffer->next != NULL)
 8007504:	69fb      	ldr	r3, [r7, #28]
 8007506:	689b      	ldr	r3, [r3, #8]
 8007508:	2b00      	cmp	r3, #0
 800750a:	d012      	beq.n	8007532 <ETH_Prepare_Tx_Descriptors+0x1ee>
  {
    txbuffer = txbuffer->next;
 800750c:	69fb      	ldr	r3, [r7, #28]
 800750e:	689b      	ldr	r3, [r3, #8]
 8007510:	61fb      	str	r3, [r7, #28]
    /* Set buffer 2 address */
    WRITE_REG(dmatxdesc->DESC1, (uint32_t)txbuffer->buffer);
 8007512:	69fb      	ldr	r3, [r7, #28]
 8007514:	681b      	ldr	r3, [r3, #0]
 8007516:	461a      	mov	r2, r3
 8007518:	6a3b      	ldr	r3, [r7, #32]
 800751a:	605a      	str	r2, [r3, #4]
    /* Set buffer 2 Length */
    MODIFY_REG(dmatxdesc->DESC2, ETH_DMATXNDESCRF_B2L, (txbuffer->len << 16));
 800751c:	6a3b      	ldr	r3, [r7, #32]
 800751e:	689a      	ldr	r2, [r3, #8]
 8007520:	4b1a      	ldr	r3, [pc, #104]	; (800758c <ETH_Prepare_Tx_Descriptors+0x248>)
 8007522:	4013      	ands	r3, r2
 8007524:	69fa      	ldr	r2, [r7, #28]
 8007526:	6852      	ldr	r2, [r2, #4]
 8007528:	0412      	lsls	r2, r2, #16
 800752a:	431a      	orrs	r2, r3
 800752c:	6a3b      	ldr	r3, [r7, #32]
 800752e:	609a      	str	r2, [r3, #8]
 8007530:	e008      	b.n	8007544 <ETH_Prepare_Tx_Descriptors+0x200>
  }
  else
  {
    WRITE_REG(dmatxdesc->DESC1, 0x0);
 8007532:	6a3b      	ldr	r3, [r7, #32]
 8007534:	2200      	movs	r2, #0
 8007536:	605a      	str	r2, [r3, #4]
    /* Set buffer 2 Length */
    MODIFY_REG(dmatxdesc->DESC2, ETH_DMATXNDESCRF_B2L, 0x0U);
 8007538:	6a3b      	ldr	r3, [r7, #32]
 800753a:	689a      	ldr	r2, [r3, #8]
 800753c:	4b13      	ldr	r3, [pc, #76]	; (800758c <ETH_Prepare_Tx_Descriptors+0x248>)
 800753e:	4013      	ands	r3, r2
 8007540:	6a3a      	ldr	r2, [r7, #32]
 8007542:	6093      	str	r3, [r2, #8]
  }

  if (READ_BIT(pTxConfig->Attributes, ETH_TX_PACKETS_FEATURES_TSO) != (uint32_t)RESET)
 8007544:	68bb      	ldr	r3, [r7, #8]
 8007546:	681b      	ldr	r3, [r3, #0]
 8007548:	f003 0310 	and.w	r3, r3, #16
 800754c:	2b00      	cmp	r3, #0
 800754e:	d021      	beq.n	8007594 <ETH_Prepare_Tx_Descriptors+0x250>
  {
    /* Set TCP Header length */
    MODIFY_REG(dmatxdesc->DESC3, ETH_DMATXNDESCRF_THL, (pTxConfig->TCPHeaderLen << 19));
 8007550:	6a3b      	ldr	r3, [r7, #32]
 8007552:	68db      	ldr	r3, [r3, #12]
 8007554:	f423 02f0 	bic.w	r2, r3, #7864320	; 0x780000
 8007558:	68bb      	ldr	r3, [r7, #8]
 800755a:	6a1b      	ldr	r3, [r3, #32]
 800755c:	04db      	lsls	r3, r3, #19
 800755e:	431a      	orrs	r2, r3
 8007560:	6a3b      	ldr	r3, [r7, #32]
 8007562:	60da      	str	r2, [r3, #12]
    /* Set TCP payload length */
    MODIFY_REG(dmatxdesc->DESC3, ETH_DMATXNDESCRF_TPL, pTxConfig->PayloadLen);
 8007564:	6a3b      	ldr	r3, [r7, #32]
 8007566:	68da      	ldr	r2, [r3, #12]
 8007568:	4b09      	ldr	r3, [pc, #36]	; (8007590 <ETH_Prepare_Tx_Descriptors+0x24c>)
 800756a:	4013      	ands	r3, r2
 800756c:	68ba      	ldr	r2, [r7, #8]
 800756e:	69d2      	ldr	r2, [r2, #28]
 8007570:	431a      	orrs	r2, r3
 8007572:	6a3b      	ldr	r3, [r7, #32]
 8007574:	60da      	str	r2, [r3, #12]
    /* Set TCP Segmentation Enabled bit */
    SET_BIT(dmatxdesc->DESC3, ETH_DMATXNDESCRF_TSE);
 8007576:	6a3b      	ldr	r3, [r7, #32]
 8007578:	68db      	ldr	r3, [r3, #12]
 800757a:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 800757e:	6a3b      	ldr	r3, [r7, #32]
 8007580:	60da      	str	r2, [r3, #12]
 8007582:	e02e      	b.n	80075e2 <ETH_Prepare_Tx_Descriptors+0x29e>
 8007584:	ffff0000 	.word	0xffff0000
 8007588:	ffffc000 	.word	0xffffc000
 800758c:	c000ffff 	.word	0xc000ffff
 8007590:	fffc0000 	.word	0xfffc0000
  }
  else
  {
    MODIFY_REG(dmatxdesc->DESC3, ETH_DMATXNDESCRF_FL, pTxConfig->Length);
 8007594:	6a3b      	ldr	r3, [r7, #32]
 8007596:	68da      	ldr	r2, [r3, #12]
 8007598:	4b7b      	ldr	r3, [pc, #492]	; (8007788 <ETH_Prepare_Tx_Descriptors+0x444>)
 800759a:	4013      	ands	r3, r2
 800759c:	68ba      	ldr	r2, [r7, #8]
 800759e:	6852      	ldr	r2, [r2, #4]
 80075a0:	431a      	orrs	r2, r3
 80075a2:	6a3b      	ldr	r3, [r7, #32]
 80075a4:	60da      	str	r2, [r3, #12]

    if (READ_BIT(pTxConfig->Attributes, ETH_TX_PACKETS_FEATURES_CSUM) != (uint32_t)RESET)
 80075a6:	68bb      	ldr	r3, [r7, #8]
 80075a8:	681b      	ldr	r3, [r3, #0]
 80075aa:	f003 0301 	and.w	r3, r3, #1
 80075ae:	2b00      	cmp	r3, #0
 80075b0:	d008      	beq.n	80075c4 <ETH_Prepare_Tx_Descriptors+0x280>
    {
      MODIFY_REG(dmatxdesc->DESC3, ETH_DMATXNDESCRF_CIC, pTxConfig->ChecksumCtrl);
 80075b2:	6a3b      	ldr	r3, [r7, #32]
 80075b4:	68db      	ldr	r3, [r3, #12]
 80075b6:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 80075ba:	68bb      	ldr	r3, [r7, #8]
 80075bc:	695b      	ldr	r3, [r3, #20]
 80075be:	431a      	orrs	r2, r3
 80075c0:	6a3b      	ldr	r3, [r7, #32]
 80075c2:	60da      	str	r2, [r3, #12]
    }

    if (READ_BIT(pTxConfig->Attributes, ETH_TX_PACKETS_FEATURES_CRCPAD) != (uint32_t)RESET)
 80075c4:	68bb      	ldr	r3, [r7, #8]
 80075c6:	681b      	ldr	r3, [r3, #0]
 80075c8:	f003 0320 	and.w	r3, r3, #32
 80075cc:	2b00      	cmp	r3, #0
 80075ce:	d008      	beq.n	80075e2 <ETH_Prepare_Tx_Descriptors+0x29e>
    {
      MODIFY_REG(dmatxdesc->DESC3, ETH_DMATXNDESCRF_CPC, pTxConfig->CRCPadCtrl);
 80075d0:	6a3b      	ldr	r3, [r7, #32]
 80075d2:	68db      	ldr	r3, [r3, #12]
 80075d4:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 80075d8:	68bb      	ldr	r3, [r7, #8]
 80075da:	691b      	ldr	r3, [r3, #16]
 80075dc:	431a      	orrs	r2, r3
 80075de:	6a3b      	ldr	r3, [r7, #32]
 80075e0:	60da      	str	r2, [r3, #12]
    }
  }

  if (READ_BIT(pTxConfig->Attributes, ETH_TX_PACKETS_FEATURES_VLANTAG) != (uint32_t)RESET)
 80075e2:	68bb      	ldr	r3, [r7, #8]
 80075e4:	681b      	ldr	r3, [r3, #0]
 80075e6:	f003 0304 	and.w	r3, r3, #4
 80075ea:	2b00      	cmp	r3, #0
 80075ec:	d008      	beq.n	8007600 <ETH_Prepare_Tx_Descriptors+0x2bc>
  {
    /* Set Vlan Tag control */
    MODIFY_REG(dmatxdesc->DESC2, ETH_DMATXNDESCRF_VTIR, pTxConfig->VlanCtrl);
 80075ee:	6a3b      	ldr	r3, [r7, #32]
 80075f0:	689b      	ldr	r3, [r3, #8]
 80075f2:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 80075f6:	68bb      	ldr	r3, [r7, #8]
 80075f8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80075fa:	431a      	orrs	r2, r3
 80075fc:	6a3b      	ldr	r3, [r7, #32]
 80075fe:	609a      	str	r2, [r3, #8]
  }

  /* Mark it as First Descriptor */
  SET_BIT(dmatxdesc->DESC3, ETH_DMATXNDESCRF_FD);
 8007600:	6a3b      	ldr	r3, [r7, #32]
 8007602:	68db      	ldr	r3, [r3, #12]
 8007604:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 8007608:	6a3b      	ldr	r3, [r7, #32]
 800760a:	60da      	str	r2, [r3, #12]
  /* Mark it as NORMAL descriptor */
  CLEAR_BIT(dmatxdesc->DESC3, ETH_DMATXNDESCRF_CTXT);
 800760c:	6a3b      	ldr	r3, [r7, #32]
 800760e:	68db      	ldr	r3, [r3, #12]
 8007610:	f023 4280 	bic.w	r2, r3, #1073741824	; 0x40000000
 8007614:	6a3b      	ldr	r3, [r7, #32]
 8007616:	60da      	str	r2, [r3, #12]
  __ASM volatile ("dmb 0xF":::"memory");
 8007618:	f3bf 8f5f 	dmb	sy
}
 800761c:	bf00      	nop
  /* Ensure rest of descriptor is written to RAM before the OWN bit */
  __DMB();
  /* set OWN bit of FIRST descriptor */
  SET_BIT(dmatxdesc->DESC3, ETH_DMATXNDESCRF_OWN);
 800761e:	6a3b      	ldr	r3, [r7, #32]
 8007620:	68db      	ldr	r3, [r3, #12]
 8007622:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 8007626:	6a3b      	ldr	r3, [r7, #32]
 8007628:	60da      	str	r2, [r3, #12]

  /* If source address insertion/replacement is enabled for this packet */
  if (READ_BIT(pTxConfig->Attributes, ETH_TX_PACKETS_FEATURES_SAIC) != (uint32_t)RESET)
 800762a:	68bb      	ldr	r3, [r7, #8]
 800762c:	681b      	ldr	r3, [r3, #0]
 800762e:	f003 0302 	and.w	r3, r3, #2
 8007632:	2b00      	cmp	r3, #0
 8007634:	f000 80da 	beq.w	80077ec <ETH_Prepare_Tx_Descriptors+0x4a8>
  {
    MODIFY_REG(dmatxdesc->DESC3, ETH_DMATXNDESCRF_SAIC, pTxConfig->SrcAddrCtrl);
 8007638:	6a3b      	ldr	r3, [r7, #32]
 800763a:	68db      	ldr	r3, [r3, #12]
 800763c:	f023 7260 	bic.w	r2, r3, #58720256	; 0x3800000
 8007640:	68bb      	ldr	r3, [r7, #8]
 8007642:	68db      	ldr	r3, [r3, #12]
 8007644:	431a      	orrs	r2, r3
 8007646:	6a3b      	ldr	r3, [r7, #32]
 8007648:	60da      	str	r2, [r3, #12]
  }

  /* only if the packet is split into more than one descriptors > 1 */
  while (txbuffer->next != NULL)
 800764a:	e0cf      	b.n	80077ec <ETH_Prepare_Tx_Descriptors+0x4a8>
  {
    /* Clear the LD bit of previous descriptor */
    CLEAR_BIT(dmatxdesc->DESC3, ETH_DMATXNDESCRF_LD);
 800764c:	6a3b      	ldr	r3, [r7, #32]
 800764e:	68db      	ldr	r3, [r3, #12]
 8007650:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 8007654:	6a3b      	ldr	r3, [r7, #32]
 8007656:	60da      	str	r2, [r3, #12]
    /* Increment current tx descriptor index */
    INCR_TX_DESC_INDEX(descidx, 1U);
 8007658:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800765a:	3301      	adds	r3, #1
 800765c:	62fb      	str	r3, [r7, #44]	; 0x2c
 800765e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007660:	2b03      	cmp	r3, #3
 8007662:	d902      	bls.n	800766a <ETH_Prepare_Tx_Descriptors+0x326>
 8007664:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007666:	3b04      	subs	r3, #4
 8007668:	62fb      	str	r3, [r7, #44]	; 0x2c
    /* Get current descriptor address */
    dmatxdesc = (ETH_DMADescTypeDef *)dmatxdesclist->TxDesc[descidx];
 800766a:	697b      	ldr	r3, [r7, #20]
 800766c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800766e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007672:	623b      	str	r3, [r7, #32]

    /* Clear the FD bit of new Descriptor */
    CLEAR_BIT(dmatxdesc->DESC3, ETH_DMATXNDESCRF_FD);
 8007674:	6a3b      	ldr	r3, [r7, #32]
 8007676:	68db      	ldr	r3, [r3, #12]
 8007678:	f023 5200 	bic.w	r2, r3, #536870912	; 0x20000000
 800767c:	6a3b      	ldr	r3, [r7, #32]
 800767e:	60da      	str	r2, [r3, #12]

    /* Current Tx Descriptor Owned by DMA: cannot be used by the application  */
    if ((READ_BIT(dmatxdesc->DESC3, ETH_DMATXNDESCRF_OWN) == ETH_DMATXNDESCRF_OWN)
 8007680:	6a3b      	ldr	r3, [r7, #32]
 8007682:	68db      	ldr	r3, [r3, #12]
 8007684:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8007688:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800768c:	d007      	beq.n	800769e <ETH_Prepare_Tx_Descriptors+0x35a>
        || (dmatxdesclist->PacketAddress[descidx] != NULL))
 800768e:	697a      	ldr	r2, [r7, #20]
 8007690:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007692:	3304      	adds	r3, #4
 8007694:	009b      	lsls	r3, r3, #2
 8007696:	4413      	add	r3, r2
 8007698:	685b      	ldr	r3, [r3, #4]
 800769a:	2b00      	cmp	r3, #0
 800769c:	d029      	beq.n	80076f2 <ETH_Prepare_Tx_Descriptors+0x3ae>
    {
      descidx = firstdescidx;
 800769e:	693b      	ldr	r3, [r7, #16]
 80076a0:	62fb      	str	r3, [r7, #44]	; 0x2c
      dmatxdesc = (ETH_DMADescTypeDef *)dmatxdesclist->TxDesc[descidx];
 80076a2:	697b      	ldr	r3, [r7, #20]
 80076a4:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80076a6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80076aa:	623b      	str	r3, [r7, #32]

      /* clear previous desc own bit */
      for (idx = 0; idx < descnbr; idx ++)
 80076ac:	2300      	movs	r3, #0
 80076ae:	62bb      	str	r3, [r7, #40]	; 0x28
 80076b0:	e019      	b.n	80076e6 <ETH_Prepare_Tx_Descriptors+0x3a2>
  __ASM volatile ("dmb 0xF":::"memory");
 80076b2:	f3bf 8f5f 	dmb	sy
}
 80076b6:	bf00      	nop
      {
        /* Ensure rest of descriptor is written to RAM before the OWN bit */
        __DMB();

        CLEAR_BIT(dmatxdesc->DESC3, ETH_DMATXNDESCRF_OWN);
 80076b8:	6a3b      	ldr	r3, [r7, #32]
 80076ba:	68db      	ldr	r3, [r3, #12]
 80076bc:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 80076c0:	6a3b      	ldr	r3, [r7, #32]
 80076c2:	60da      	str	r2, [r3, #12]

        /* Increment current tx descriptor index */
        INCR_TX_DESC_INDEX(descidx, 1U);
 80076c4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80076c6:	3301      	adds	r3, #1
 80076c8:	62fb      	str	r3, [r7, #44]	; 0x2c
 80076ca:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80076cc:	2b03      	cmp	r3, #3
 80076ce:	d902      	bls.n	80076d6 <ETH_Prepare_Tx_Descriptors+0x392>
 80076d0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80076d2:	3b04      	subs	r3, #4
 80076d4:	62fb      	str	r3, [r7, #44]	; 0x2c
        /* Get current descriptor address */
        dmatxdesc = (ETH_DMADescTypeDef *)dmatxdesclist->TxDesc[descidx];
 80076d6:	697b      	ldr	r3, [r7, #20]
 80076d8:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80076da:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80076de:	623b      	str	r3, [r7, #32]
      for (idx = 0; idx < descnbr; idx ++)
 80076e0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80076e2:	3301      	adds	r3, #1
 80076e4:	62bb      	str	r3, [r7, #40]	; 0x28
 80076e6:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80076e8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80076ea:	429a      	cmp	r2, r3
 80076ec:	d3e1      	bcc.n	80076b2 <ETH_Prepare_Tx_Descriptors+0x36e>
      }

      return HAL_ETH_ERROR_BUSY;
 80076ee:	2302      	movs	r3, #2
 80076f0:	e0ae      	b.n	8007850 <ETH_Prepare_Tx_Descriptors+0x50c>
    }

    descnbr += 1U;
 80076f2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80076f4:	3301      	adds	r3, #1
 80076f6:	627b      	str	r3, [r7, #36]	; 0x24

    /* Get the next Tx buffer in the list */
    txbuffer = txbuffer->next;
 80076f8:	69fb      	ldr	r3, [r7, #28]
 80076fa:	689b      	ldr	r3, [r3, #8]
 80076fc:	61fb      	str	r3, [r7, #28]

    /* Set header or buffer 1 address */
    WRITE_REG(dmatxdesc->DESC0, (uint32_t)txbuffer->buffer);
 80076fe:	69fb      	ldr	r3, [r7, #28]
 8007700:	681b      	ldr	r3, [r3, #0]
 8007702:	461a      	mov	r2, r3
 8007704:	6a3b      	ldr	r3, [r7, #32]
 8007706:	601a      	str	r2, [r3, #0]
    /* Set header or buffer 1 Length */
    MODIFY_REG(dmatxdesc->DESC2, ETH_DMATXNDESCRF_B1L, txbuffer->len);
 8007708:	6a3b      	ldr	r3, [r7, #32]
 800770a:	689a      	ldr	r2, [r3, #8]
 800770c:	4b1f      	ldr	r3, [pc, #124]	; (800778c <ETH_Prepare_Tx_Descriptors+0x448>)
 800770e:	4013      	ands	r3, r2
 8007710:	69fa      	ldr	r2, [r7, #28]
 8007712:	6852      	ldr	r2, [r2, #4]
 8007714:	431a      	orrs	r2, r3
 8007716:	6a3b      	ldr	r3, [r7, #32]
 8007718:	609a      	str	r2, [r3, #8]

    if (txbuffer->next != NULL)
 800771a:	69fb      	ldr	r3, [r7, #28]
 800771c:	689b      	ldr	r3, [r3, #8]
 800771e:	2b00      	cmp	r3, #0
 8007720:	d012      	beq.n	8007748 <ETH_Prepare_Tx_Descriptors+0x404>
    {
      /* Get the next Tx buffer in the list */
      txbuffer = txbuffer->next;
 8007722:	69fb      	ldr	r3, [r7, #28]
 8007724:	689b      	ldr	r3, [r3, #8]
 8007726:	61fb      	str	r3, [r7, #28]
      /* Set buffer 2 address */
      WRITE_REG(dmatxdesc->DESC1, (uint32_t)txbuffer->buffer);
 8007728:	69fb      	ldr	r3, [r7, #28]
 800772a:	681b      	ldr	r3, [r3, #0]
 800772c:	461a      	mov	r2, r3
 800772e:	6a3b      	ldr	r3, [r7, #32]
 8007730:	605a      	str	r2, [r3, #4]
      /* Set buffer 2 Length */
      MODIFY_REG(dmatxdesc->DESC2, ETH_DMATXNDESCRF_B2L, (txbuffer->len << 16));
 8007732:	6a3b      	ldr	r3, [r7, #32]
 8007734:	689a      	ldr	r2, [r3, #8]
 8007736:	4b16      	ldr	r3, [pc, #88]	; (8007790 <ETH_Prepare_Tx_Descriptors+0x44c>)
 8007738:	4013      	ands	r3, r2
 800773a:	69fa      	ldr	r2, [r7, #28]
 800773c:	6852      	ldr	r2, [r2, #4]
 800773e:	0412      	lsls	r2, r2, #16
 8007740:	431a      	orrs	r2, r3
 8007742:	6a3b      	ldr	r3, [r7, #32]
 8007744:	609a      	str	r2, [r3, #8]
 8007746:	e008      	b.n	800775a <ETH_Prepare_Tx_Descriptors+0x416>
    }
    else
    {
      WRITE_REG(dmatxdesc->DESC1, 0x0);
 8007748:	6a3b      	ldr	r3, [r7, #32]
 800774a:	2200      	movs	r2, #0
 800774c:	605a      	str	r2, [r3, #4]
      /* Set buffer 2 Length */
      MODIFY_REG(dmatxdesc->DESC2, ETH_DMATXNDESCRF_B2L, 0x0U);
 800774e:	6a3b      	ldr	r3, [r7, #32]
 8007750:	689a      	ldr	r2, [r3, #8]
 8007752:	4b0f      	ldr	r3, [pc, #60]	; (8007790 <ETH_Prepare_Tx_Descriptors+0x44c>)
 8007754:	4013      	ands	r3, r2
 8007756:	6a3a      	ldr	r2, [r7, #32]
 8007758:	6093      	str	r3, [r2, #8]
    }

    if (READ_BIT(pTxConfig->Attributes, ETH_TX_PACKETS_FEATURES_TSO) != (uint32_t)RESET)
 800775a:	68bb      	ldr	r3, [r7, #8]
 800775c:	681b      	ldr	r3, [r3, #0]
 800775e:	f003 0310 	and.w	r3, r3, #16
 8007762:	2b00      	cmp	r3, #0
 8007764:	d018      	beq.n	8007798 <ETH_Prepare_Tx_Descriptors+0x454>
    {
      /* Set TCP payload length */
      MODIFY_REG(dmatxdesc->DESC3, ETH_DMATXNDESCRF_TPL, pTxConfig->PayloadLen);
 8007766:	6a3b      	ldr	r3, [r7, #32]
 8007768:	68da      	ldr	r2, [r3, #12]
 800776a:	4b0a      	ldr	r3, [pc, #40]	; (8007794 <ETH_Prepare_Tx_Descriptors+0x450>)
 800776c:	4013      	ands	r3, r2
 800776e:	68ba      	ldr	r2, [r7, #8]
 8007770:	69d2      	ldr	r2, [r2, #28]
 8007772:	431a      	orrs	r2, r3
 8007774:	6a3b      	ldr	r3, [r7, #32]
 8007776:	60da      	str	r2, [r3, #12]
      /* Set TCP Segmentation Enabled bit */
      SET_BIT(dmatxdesc->DESC3, ETH_DMATXNDESCRF_TSE);
 8007778:	6a3b      	ldr	r3, [r7, #32]
 800777a:	68db      	ldr	r3, [r3, #12]
 800777c:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 8007780:	6a3b      	ldr	r3, [r7, #32]
 8007782:	60da      	str	r2, [r3, #12]
 8007784:	e020      	b.n	80077c8 <ETH_Prepare_Tx_Descriptors+0x484>
 8007786:	bf00      	nop
 8007788:	ffff8000 	.word	0xffff8000
 800778c:	ffffc000 	.word	0xffffc000
 8007790:	c000ffff 	.word	0xc000ffff
 8007794:	fffc0000 	.word	0xfffc0000
    }
    else
    {
      /* Set the packet length */
      MODIFY_REG(dmatxdesc->DESC3, ETH_DMATXNDESCRF_FL, pTxConfig->Length);
 8007798:	6a3b      	ldr	r3, [r7, #32]
 800779a:	68da      	ldr	r2, [r3, #12]
 800779c:	4b2f      	ldr	r3, [pc, #188]	; (800785c <ETH_Prepare_Tx_Descriptors+0x518>)
 800779e:	4013      	ands	r3, r2
 80077a0:	68ba      	ldr	r2, [r7, #8]
 80077a2:	6852      	ldr	r2, [r2, #4]
 80077a4:	431a      	orrs	r2, r3
 80077a6:	6a3b      	ldr	r3, [r7, #32]
 80077a8:	60da      	str	r2, [r3, #12]

      if (READ_BIT(pTxConfig->Attributes, ETH_TX_PACKETS_FEATURES_CSUM) != (uint32_t)RESET)
 80077aa:	68bb      	ldr	r3, [r7, #8]
 80077ac:	681b      	ldr	r3, [r3, #0]
 80077ae:	f003 0301 	and.w	r3, r3, #1
 80077b2:	2b00      	cmp	r3, #0
 80077b4:	d008      	beq.n	80077c8 <ETH_Prepare_Tx_Descriptors+0x484>
      {
        /* Checksum Insertion Control */
        MODIFY_REG(dmatxdesc->DESC3, ETH_DMATXNDESCRF_CIC, pTxConfig->ChecksumCtrl);
 80077b6:	6a3b      	ldr	r3, [r7, #32]
 80077b8:	68db      	ldr	r3, [r3, #12]
 80077ba:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 80077be:	68bb      	ldr	r3, [r7, #8]
 80077c0:	695b      	ldr	r3, [r3, #20]
 80077c2:	431a      	orrs	r2, r3
 80077c4:	6a3b      	ldr	r3, [r7, #32]
 80077c6:	60da      	str	r2, [r3, #12]
      }
    }

    bd_count += 1U;
 80077c8:	69bb      	ldr	r3, [r7, #24]
 80077ca:	3301      	adds	r3, #1
 80077cc:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("dmb 0xF":::"memory");
 80077ce:	f3bf 8f5f 	dmb	sy
}
 80077d2:	bf00      	nop

    /* Ensure rest of descriptor is written to RAM before the OWN bit */
    __DMB();
    /* Set Own bit */
    SET_BIT(dmatxdesc->DESC3, ETH_DMATXNDESCRF_OWN);
 80077d4:	6a3b      	ldr	r3, [r7, #32]
 80077d6:	68db      	ldr	r3, [r3, #12]
 80077d8:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 80077dc:	6a3b      	ldr	r3, [r7, #32]
 80077de:	60da      	str	r2, [r3, #12]
    /* Mark it as NORMAL descriptor */
    CLEAR_BIT(dmatxdesc->DESC3, ETH_DMATXNDESCRF_CTXT);
 80077e0:	6a3b      	ldr	r3, [r7, #32]
 80077e2:	68db      	ldr	r3, [r3, #12]
 80077e4:	f023 4280 	bic.w	r2, r3, #1073741824	; 0x40000000
 80077e8:	6a3b      	ldr	r3, [r7, #32]
 80077ea:	60da      	str	r2, [r3, #12]
  while (txbuffer->next != NULL)
 80077ec:	69fb      	ldr	r3, [r7, #28]
 80077ee:	689b      	ldr	r3, [r3, #8]
 80077f0:	2b00      	cmp	r3, #0
 80077f2:	f47f af2b 	bne.w	800764c <ETH_Prepare_Tx_Descriptors+0x308>
  }

  if (ItMode != ((uint32_t)RESET))
 80077f6:	687b      	ldr	r3, [r7, #4]
 80077f8:	2b00      	cmp	r3, #0
 80077fa:	d006      	beq.n	800780a <ETH_Prepare_Tx_Descriptors+0x4c6>
  {
    /* Set Interrupt on completion bit */
    SET_BIT(dmatxdesc->DESC2, ETH_DMATXNDESCRF_IOC);
 80077fc:	6a3b      	ldr	r3, [r7, #32]
 80077fe:	689b      	ldr	r3, [r3, #8]
 8007800:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 8007804:	6a3b      	ldr	r3, [r7, #32]
 8007806:	609a      	str	r2, [r3, #8]
 8007808:	e005      	b.n	8007816 <ETH_Prepare_Tx_Descriptors+0x4d2>
  }
  else
  {
    /* Clear Interrupt on completion bit */
    CLEAR_BIT(dmatxdesc->DESC2, ETH_DMATXNDESCRF_IOC);
 800780a:	6a3b      	ldr	r3, [r7, #32]
 800780c:	689b      	ldr	r3, [r3, #8]
 800780e:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8007812:	6a3b      	ldr	r3, [r7, #32]
 8007814:	609a      	str	r2, [r3, #8]
  }

  /* Mark it as LAST descriptor */
  SET_BIT(dmatxdesc->DESC3, ETH_DMATXNDESCRF_LD);
 8007816:	6a3b      	ldr	r3, [r7, #32]
 8007818:	68db      	ldr	r3, [r3, #12]
 800781a:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 800781e:	6a3b      	ldr	r3, [r7, #32]
 8007820:	60da      	str	r2, [r3, #12]
  /* Save the current packet address to expose it to the application */
  dmatxdesclist->PacketAddress[descidx] = dmatxdesclist->CurrentPacketAddress;
 8007822:	697b      	ldr	r3, [r7, #20]
 8007824:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8007826:	6979      	ldr	r1, [r7, #20]
 8007828:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800782a:	3304      	adds	r3, #4
 800782c:	009b      	lsls	r3, r3, #2
 800782e:	440b      	add	r3, r1
 8007830:	605a      	str	r2, [r3, #4]

  dmatxdesclist->CurTxDesc = descidx;
 8007832:	697b      	ldr	r3, [r7, #20]
 8007834:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8007836:	611a      	str	r2, [r3, #16]
  __ASM volatile ("cpsid i" : : : "memory");
 8007838:	b672      	cpsid	i
}
 800783a:	bf00      	nop

  /* disable the interrupt */
  __disable_irq();

  dmatxdesclist->BuffersInUse += bd_count + 1U;
 800783c:	697b      	ldr	r3, [r7, #20]
 800783e:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8007840:	69bb      	ldr	r3, [r7, #24]
 8007842:	4413      	add	r3, r2
 8007844:	1c5a      	adds	r2, r3, #1
 8007846:	697b      	ldr	r3, [r7, #20]
 8007848:	629a      	str	r2, [r3, #40]	; 0x28
  __ASM volatile ("cpsie i" : : : "memory");
 800784a:	b662      	cpsie	i
}
 800784c:	bf00      	nop
  /* Enable interrupts back */
  __enable_irq();


  /* Return function status */
  return HAL_ETH_ERROR_NONE;
 800784e:	2300      	movs	r3, #0
}
 8007850:	4618      	mov	r0, r3
 8007852:	3734      	adds	r7, #52	; 0x34
 8007854:	46bd      	mov	sp, r7
 8007856:	f85d 7b04 	ldr.w	r7, [sp], #4
 800785a:	4770      	bx	lr
 800785c:	ffff8000 	.word	0xffff8000

08007860 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8007860:	b480      	push	{r7}
 8007862:	b089      	sub	sp, #36	; 0x24
 8007864:	af00      	add	r7, sp, #0
 8007866:	6078      	str	r0, [r7, #4]
 8007868:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 800786a:	2300      	movs	r3, #0
 800786c:	61fb      	str	r3, [r7, #28]
  EXTI_Core_TypeDef *EXTI_CurrentCPU;

#if defined(DUAL_CORE) && defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_D2; /* EXTI for CM4 CPU */
#else
  EXTI_CurrentCPU = EXTI_D1; /* EXTI for CM7 CPU */
 800786e:	4b89      	ldr	r3, [pc, #548]	; (8007a94 <HAL_GPIO_Init+0x234>)
 8007870:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8007872:	e194      	b.n	8007b9e <HAL_GPIO_Init+0x33e>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8007874:	683b      	ldr	r3, [r7, #0]
 8007876:	681a      	ldr	r2, [r3, #0]
 8007878:	2101      	movs	r1, #1
 800787a:	69fb      	ldr	r3, [r7, #28]
 800787c:	fa01 f303 	lsl.w	r3, r1, r3
 8007880:	4013      	ands	r3, r2
 8007882:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00U)
 8007884:	693b      	ldr	r3, [r7, #16]
 8007886:	2b00      	cmp	r3, #0
 8007888:	f000 8186 	beq.w	8007b98 <HAL_GPIO_Init+0x338>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 800788c:	683b      	ldr	r3, [r7, #0]
 800788e:	685b      	ldr	r3, [r3, #4]
 8007890:	f003 0303 	and.w	r3, r3, #3
 8007894:	2b01      	cmp	r3, #1
 8007896:	d005      	beq.n	80078a4 <HAL_GPIO_Init+0x44>
 8007898:	683b      	ldr	r3, [r7, #0]
 800789a:	685b      	ldr	r3, [r3, #4]
 800789c:	f003 0303 	and.w	r3, r3, #3
 80078a0:	2b02      	cmp	r3, #2
 80078a2:	d130      	bne.n	8007906 <HAL_GPIO_Init+0xa6>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80078a4:	687b      	ldr	r3, [r7, #4]
 80078a6:	689b      	ldr	r3, [r3, #8]
 80078a8:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 80078aa:	69fb      	ldr	r3, [r7, #28]
 80078ac:	005b      	lsls	r3, r3, #1
 80078ae:	2203      	movs	r2, #3
 80078b0:	fa02 f303 	lsl.w	r3, r2, r3
 80078b4:	43db      	mvns	r3, r3
 80078b6:	69ba      	ldr	r2, [r7, #24]
 80078b8:	4013      	ands	r3, r2
 80078ba:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80078bc:	683b      	ldr	r3, [r7, #0]
 80078be:	68da      	ldr	r2, [r3, #12]
 80078c0:	69fb      	ldr	r3, [r7, #28]
 80078c2:	005b      	lsls	r3, r3, #1
 80078c4:	fa02 f303 	lsl.w	r3, r2, r3
 80078c8:	69ba      	ldr	r2, [r7, #24]
 80078ca:	4313      	orrs	r3, r2
 80078cc:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80078ce:	687b      	ldr	r3, [r7, #4]
 80078d0:	69ba      	ldr	r2, [r7, #24]
 80078d2:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80078d4:	687b      	ldr	r3, [r7, #4]
 80078d6:	685b      	ldr	r3, [r3, #4]
 80078d8:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 80078da:	2201      	movs	r2, #1
 80078dc:	69fb      	ldr	r3, [r7, #28]
 80078de:	fa02 f303 	lsl.w	r3, r2, r3
 80078e2:	43db      	mvns	r3, r3
 80078e4:	69ba      	ldr	r2, [r7, #24]
 80078e6:	4013      	ands	r3, r2
 80078e8:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80078ea:	683b      	ldr	r3, [r7, #0]
 80078ec:	685b      	ldr	r3, [r3, #4]
 80078ee:	091b      	lsrs	r3, r3, #4
 80078f0:	f003 0201 	and.w	r2, r3, #1
 80078f4:	69fb      	ldr	r3, [r7, #28]
 80078f6:	fa02 f303 	lsl.w	r3, r2, r3
 80078fa:	69ba      	ldr	r2, [r7, #24]
 80078fc:	4313      	orrs	r3, r2
 80078fe:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8007900:	687b      	ldr	r3, [r7, #4]
 8007902:	69ba      	ldr	r2, [r7, #24]
 8007904:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8007906:	683b      	ldr	r3, [r7, #0]
 8007908:	685b      	ldr	r3, [r3, #4]
 800790a:	f003 0303 	and.w	r3, r3, #3
 800790e:	2b03      	cmp	r3, #3
 8007910:	d017      	beq.n	8007942 <HAL_GPIO_Init+0xe2>
      {
       /* Check the Pull parameter */
       assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8007912:	687b      	ldr	r3, [r7, #4]
 8007914:	68db      	ldr	r3, [r3, #12]
 8007916:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8007918:	69fb      	ldr	r3, [r7, #28]
 800791a:	005b      	lsls	r3, r3, #1
 800791c:	2203      	movs	r2, #3
 800791e:	fa02 f303 	lsl.w	r3, r2, r3
 8007922:	43db      	mvns	r3, r3
 8007924:	69ba      	ldr	r2, [r7, #24]
 8007926:	4013      	ands	r3, r2
 8007928:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 800792a:	683b      	ldr	r3, [r7, #0]
 800792c:	689a      	ldr	r2, [r3, #8]
 800792e:	69fb      	ldr	r3, [r7, #28]
 8007930:	005b      	lsls	r3, r3, #1
 8007932:	fa02 f303 	lsl.w	r3, r2, r3
 8007936:	69ba      	ldr	r2, [r7, #24]
 8007938:	4313      	orrs	r3, r2
 800793a:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 800793c:	687b      	ldr	r3, [r7, #4]
 800793e:	69ba      	ldr	r2, [r7, #24]
 8007940:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8007942:	683b      	ldr	r3, [r7, #0]
 8007944:	685b      	ldr	r3, [r3, #4]
 8007946:	f003 0303 	and.w	r3, r3, #3
 800794a:	2b02      	cmp	r3, #2
 800794c:	d123      	bne.n	8007996 <HAL_GPIO_Init+0x136>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 800794e:	69fb      	ldr	r3, [r7, #28]
 8007950:	08da      	lsrs	r2, r3, #3
 8007952:	687b      	ldr	r3, [r7, #4]
 8007954:	3208      	adds	r2, #8
 8007956:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800795a:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 800795c:	69fb      	ldr	r3, [r7, #28]
 800795e:	f003 0307 	and.w	r3, r3, #7
 8007962:	009b      	lsls	r3, r3, #2
 8007964:	220f      	movs	r2, #15
 8007966:	fa02 f303 	lsl.w	r3, r2, r3
 800796a:	43db      	mvns	r3, r3
 800796c:	69ba      	ldr	r2, [r7, #24]
 800796e:	4013      	ands	r3, r2
 8007970:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8007972:	683b      	ldr	r3, [r7, #0]
 8007974:	691a      	ldr	r2, [r3, #16]
 8007976:	69fb      	ldr	r3, [r7, #28]
 8007978:	f003 0307 	and.w	r3, r3, #7
 800797c:	009b      	lsls	r3, r3, #2
 800797e:	fa02 f303 	lsl.w	r3, r2, r3
 8007982:	69ba      	ldr	r2, [r7, #24]
 8007984:	4313      	orrs	r3, r2
 8007986:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8007988:	69fb      	ldr	r3, [r7, #28]
 800798a:	08da      	lsrs	r2, r3, #3
 800798c:	687b      	ldr	r3, [r7, #4]
 800798e:	3208      	adds	r2, #8
 8007990:	69b9      	ldr	r1, [r7, #24]
 8007992:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8007996:	687b      	ldr	r3, [r7, #4]
 8007998:	681b      	ldr	r3, [r3, #0]
 800799a:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 800799c:	69fb      	ldr	r3, [r7, #28]
 800799e:	005b      	lsls	r3, r3, #1
 80079a0:	2203      	movs	r2, #3
 80079a2:	fa02 f303 	lsl.w	r3, r2, r3
 80079a6:	43db      	mvns	r3, r3
 80079a8:	69ba      	ldr	r2, [r7, #24]
 80079aa:	4013      	ands	r3, r2
 80079ac:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80079ae:	683b      	ldr	r3, [r7, #0]
 80079b0:	685b      	ldr	r3, [r3, #4]
 80079b2:	f003 0203 	and.w	r2, r3, #3
 80079b6:	69fb      	ldr	r3, [r7, #28]
 80079b8:	005b      	lsls	r3, r3, #1
 80079ba:	fa02 f303 	lsl.w	r3, r2, r3
 80079be:	69ba      	ldr	r2, [r7, #24]
 80079c0:	4313      	orrs	r3, r2
 80079c2:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80079c4:	687b      	ldr	r3, [r7, #4]
 80079c6:	69ba      	ldr	r2, [r7, #24]
 80079c8:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 80079ca:	683b      	ldr	r3, [r7, #0]
 80079cc:	685b      	ldr	r3, [r3, #4]
 80079ce:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80079d2:	2b00      	cmp	r3, #0
 80079d4:	f000 80e0 	beq.w	8007b98 <HAL_GPIO_Init+0x338>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80079d8:	4b2f      	ldr	r3, [pc, #188]	; (8007a98 <HAL_GPIO_Init+0x238>)
 80079da:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 80079de:	4a2e      	ldr	r2, [pc, #184]	; (8007a98 <HAL_GPIO_Init+0x238>)
 80079e0:	f043 0302 	orr.w	r3, r3, #2
 80079e4:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 80079e8:	4b2b      	ldr	r3, [pc, #172]	; (8007a98 <HAL_GPIO_Init+0x238>)
 80079ea:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 80079ee:	f003 0302 	and.w	r3, r3, #2
 80079f2:	60fb      	str	r3, [r7, #12]
 80079f4:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80079f6:	4a29      	ldr	r2, [pc, #164]	; (8007a9c <HAL_GPIO_Init+0x23c>)
 80079f8:	69fb      	ldr	r3, [r7, #28]
 80079fa:	089b      	lsrs	r3, r3, #2
 80079fc:	3302      	adds	r3, #2
 80079fe:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8007a02:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8007a04:	69fb      	ldr	r3, [r7, #28]
 8007a06:	f003 0303 	and.w	r3, r3, #3
 8007a0a:	009b      	lsls	r3, r3, #2
 8007a0c:	220f      	movs	r2, #15
 8007a0e:	fa02 f303 	lsl.w	r3, r2, r3
 8007a12:	43db      	mvns	r3, r3
 8007a14:	69ba      	ldr	r2, [r7, #24]
 8007a16:	4013      	ands	r3, r2
 8007a18:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8007a1a:	687b      	ldr	r3, [r7, #4]
 8007a1c:	4a20      	ldr	r2, [pc, #128]	; (8007aa0 <HAL_GPIO_Init+0x240>)
 8007a1e:	4293      	cmp	r3, r2
 8007a20:	d052      	beq.n	8007ac8 <HAL_GPIO_Init+0x268>
 8007a22:	687b      	ldr	r3, [r7, #4]
 8007a24:	4a1f      	ldr	r2, [pc, #124]	; (8007aa4 <HAL_GPIO_Init+0x244>)
 8007a26:	4293      	cmp	r3, r2
 8007a28:	d031      	beq.n	8007a8e <HAL_GPIO_Init+0x22e>
 8007a2a:	687b      	ldr	r3, [r7, #4]
 8007a2c:	4a1e      	ldr	r2, [pc, #120]	; (8007aa8 <HAL_GPIO_Init+0x248>)
 8007a2e:	4293      	cmp	r3, r2
 8007a30:	d02b      	beq.n	8007a8a <HAL_GPIO_Init+0x22a>
 8007a32:	687b      	ldr	r3, [r7, #4]
 8007a34:	4a1d      	ldr	r2, [pc, #116]	; (8007aac <HAL_GPIO_Init+0x24c>)
 8007a36:	4293      	cmp	r3, r2
 8007a38:	d025      	beq.n	8007a86 <HAL_GPIO_Init+0x226>
 8007a3a:	687b      	ldr	r3, [r7, #4]
 8007a3c:	4a1c      	ldr	r2, [pc, #112]	; (8007ab0 <HAL_GPIO_Init+0x250>)
 8007a3e:	4293      	cmp	r3, r2
 8007a40:	d01f      	beq.n	8007a82 <HAL_GPIO_Init+0x222>
 8007a42:	687b      	ldr	r3, [r7, #4]
 8007a44:	4a1b      	ldr	r2, [pc, #108]	; (8007ab4 <HAL_GPIO_Init+0x254>)
 8007a46:	4293      	cmp	r3, r2
 8007a48:	d019      	beq.n	8007a7e <HAL_GPIO_Init+0x21e>
 8007a4a:	687b      	ldr	r3, [r7, #4]
 8007a4c:	4a1a      	ldr	r2, [pc, #104]	; (8007ab8 <HAL_GPIO_Init+0x258>)
 8007a4e:	4293      	cmp	r3, r2
 8007a50:	d013      	beq.n	8007a7a <HAL_GPIO_Init+0x21a>
 8007a52:	687b      	ldr	r3, [r7, #4]
 8007a54:	4a19      	ldr	r2, [pc, #100]	; (8007abc <HAL_GPIO_Init+0x25c>)
 8007a56:	4293      	cmp	r3, r2
 8007a58:	d00d      	beq.n	8007a76 <HAL_GPIO_Init+0x216>
 8007a5a:	687b      	ldr	r3, [r7, #4]
 8007a5c:	4a18      	ldr	r2, [pc, #96]	; (8007ac0 <HAL_GPIO_Init+0x260>)
 8007a5e:	4293      	cmp	r3, r2
 8007a60:	d007      	beq.n	8007a72 <HAL_GPIO_Init+0x212>
 8007a62:	687b      	ldr	r3, [r7, #4]
 8007a64:	4a17      	ldr	r2, [pc, #92]	; (8007ac4 <HAL_GPIO_Init+0x264>)
 8007a66:	4293      	cmp	r3, r2
 8007a68:	d101      	bne.n	8007a6e <HAL_GPIO_Init+0x20e>
 8007a6a:	2309      	movs	r3, #9
 8007a6c:	e02d      	b.n	8007aca <HAL_GPIO_Init+0x26a>
 8007a6e:	230a      	movs	r3, #10
 8007a70:	e02b      	b.n	8007aca <HAL_GPIO_Init+0x26a>
 8007a72:	2308      	movs	r3, #8
 8007a74:	e029      	b.n	8007aca <HAL_GPIO_Init+0x26a>
 8007a76:	2307      	movs	r3, #7
 8007a78:	e027      	b.n	8007aca <HAL_GPIO_Init+0x26a>
 8007a7a:	2306      	movs	r3, #6
 8007a7c:	e025      	b.n	8007aca <HAL_GPIO_Init+0x26a>
 8007a7e:	2305      	movs	r3, #5
 8007a80:	e023      	b.n	8007aca <HAL_GPIO_Init+0x26a>
 8007a82:	2304      	movs	r3, #4
 8007a84:	e021      	b.n	8007aca <HAL_GPIO_Init+0x26a>
 8007a86:	2303      	movs	r3, #3
 8007a88:	e01f      	b.n	8007aca <HAL_GPIO_Init+0x26a>
 8007a8a:	2302      	movs	r3, #2
 8007a8c:	e01d      	b.n	8007aca <HAL_GPIO_Init+0x26a>
 8007a8e:	2301      	movs	r3, #1
 8007a90:	e01b      	b.n	8007aca <HAL_GPIO_Init+0x26a>
 8007a92:	bf00      	nop
 8007a94:	58000080 	.word	0x58000080
 8007a98:	58024400 	.word	0x58024400
 8007a9c:	58000400 	.word	0x58000400
 8007aa0:	58020000 	.word	0x58020000
 8007aa4:	58020400 	.word	0x58020400
 8007aa8:	58020800 	.word	0x58020800
 8007aac:	58020c00 	.word	0x58020c00
 8007ab0:	58021000 	.word	0x58021000
 8007ab4:	58021400 	.word	0x58021400
 8007ab8:	58021800 	.word	0x58021800
 8007abc:	58021c00 	.word	0x58021c00
 8007ac0:	58022000 	.word	0x58022000
 8007ac4:	58022400 	.word	0x58022400
 8007ac8:	2300      	movs	r3, #0
 8007aca:	69fa      	ldr	r2, [r7, #28]
 8007acc:	f002 0203 	and.w	r2, r2, #3
 8007ad0:	0092      	lsls	r2, r2, #2
 8007ad2:	4093      	lsls	r3, r2
 8007ad4:	69ba      	ldr	r2, [r7, #24]
 8007ad6:	4313      	orrs	r3, r2
 8007ad8:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8007ada:	4938      	ldr	r1, [pc, #224]	; (8007bbc <HAL_GPIO_Init+0x35c>)
 8007adc:	69fb      	ldr	r3, [r7, #28]
 8007ade:	089b      	lsrs	r3, r3, #2
 8007ae0:	3302      	adds	r3, #2
 8007ae2:	69ba      	ldr	r2, [r7, #24]
 8007ae4:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8007ae8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8007aec:	681b      	ldr	r3, [r3, #0]
 8007aee:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8007af0:	693b      	ldr	r3, [r7, #16]
 8007af2:	43db      	mvns	r3, r3
 8007af4:	69ba      	ldr	r2, [r7, #24]
 8007af6:	4013      	ands	r3, r2
 8007af8:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8007afa:	683b      	ldr	r3, [r7, #0]
 8007afc:	685b      	ldr	r3, [r3, #4]
 8007afe:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8007b02:	2b00      	cmp	r3, #0
 8007b04:	d003      	beq.n	8007b0e <HAL_GPIO_Init+0x2ae>
        {
          temp |= iocurrent;
 8007b06:	69ba      	ldr	r2, [r7, #24]
 8007b08:	693b      	ldr	r3, [r7, #16]
 8007b0a:	4313      	orrs	r3, r2
 8007b0c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR1 = temp;
 8007b0e:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8007b12:	69bb      	ldr	r3, [r7, #24]
 8007b14:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 8007b16:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8007b1a:	685b      	ldr	r3, [r3, #4]
 8007b1c:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8007b1e:	693b      	ldr	r3, [r7, #16]
 8007b20:	43db      	mvns	r3, r3
 8007b22:	69ba      	ldr	r2, [r7, #24]
 8007b24:	4013      	ands	r3, r2
 8007b26:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8007b28:	683b      	ldr	r3, [r7, #0]
 8007b2a:	685b      	ldr	r3, [r3, #4]
 8007b2c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8007b30:	2b00      	cmp	r3, #0
 8007b32:	d003      	beq.n	8007b3c <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 8007b34:	69ba      	ldr	r2, [r7, #24]
 8007b36:	693b      	ldr	r3, [r7, #16]
 8007b38:	4313      	orrs	r3, r2
 8007b3a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR1 = temp;
 8007b3c:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8007b40:	69bb      	ldr	r3, [r7, #24]
 8007b42:	6053      	str	r3, [r2, #4]

        temp = EXTI_CurrentCPU->EMR1;
 8007b44:	697b      	ldr	r3, [r7, #20]
 8007b46:	685b      	ldr	r3, [r3, #4]
 8007b48:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8007b4a:	693b      	ldr	r3, [r7, #16]
 8007b4c:	43db      	mvns	r3, r3
 8007b4e:	69ba      	ldr	r2, [r7, #24]
 8007b50:	4013      	ands	r3, r2
 8007b52:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8007b54:	683b      	ldr	r3, [r7, #0]
 8007b56:	685b      	ldr	r3, [r3, #4]
 8007b58:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8007b5c:	2b00      	cmp	r3, #0
 8007b5e:	d003      	beq.n	8007b68 <HAL_GPIO_Init+0x308>
        {
          temp |= iocurrent;
 8007b60:	69ba      	ldr	r2, [r7, #24]
 8007b62:	693b      	ldr	r3, [r7, #16]
 8007b64:	4313      	orrs	r3, r2
 8007b66:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->EMR1 = temp;
 8007b68:	697b      	ldr	r3, [r7, #20]
 8007b6a:	69ba      	ldr	r2, [r7, #24]
 8007b6c:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI_CurrentCPU->IMR1;
 8007b6e:	697b      	ldr	r3, [r7, #20]
 8007b70:	681b      	ldr	r3, [r3, #0]
 8007b72:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8007b74:	693b      	ldr	r3, [r7, #16]
 8007b76:	43db      	mvns	r3, r3
 8007b78:	69ba      	ldr	r2, [r7, #24]
 8007b7a:	4013      	ands	r3, r2
 8007b7c:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8007b7e:	683b      	ldr	r3, [r7, #0]
 8007b80:	685b      	ldr	r3, [r3, #4]
 8007b82:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8007b86:	2b00      	cmp	r3, #0
 8007b88:	d003      	beq.n	8007b92 <HAL_GPIO_Init+0x332>
        {
          temp |= iocurrent;
 8007b8a:	69ba      	ldr	r2, [r7, #24]
 8007b8c:	693b      	ldr	r3, [r7, #16]
 8007b8e:	4313      	orrs	r3, r2
 8007b90:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->IMR1 = temp;
 8007b92:	697b      	ldr	r3, [r7, #20]
 8007b94:	69ba      	ldr	r2, [r7, #24]
 8007b96:	601a      	str	r2, [r3, #0]
      }
    }

    position++;
 8007b98:	69fb      	ldr	r3, [r7, #28]
 8007b9a:	3301      	adds	r3, #1
 8007b9c:	61fb      	str	r3, [r7, #28]
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8007b9e:	683b      	ldr	r3, [r7, #0]
 8007ba0:	681a      	ldr	r2, [r3, #0]
 8007ba2:	69fb      	ldr	r3, [r7, #28]
 8007ba4:	fa22 f303 	lsr.w	r3, r2, r3
 8007ba8:	2b00      	cmp	r3, #0
 8007baa:	f47f ae63 	bne.w	8007874 <HAL_GPIO_Init+0x14>
  }
}
 8007bae:	bf00      	nop
 8007bb0:	bf00      	nop
 8007bb2:	3724      	adds	r7, #36	; 0x24
 8007bb4:	46bd      	mov	sp, r7
 8007bb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007bba:	4770      	bx	lr
 8007bbc:	58000400 	.word	0x58000400

08007bc0 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8007bc0:	b480      	push	{r7}
 8007bc2:	b085      	sub	sp, #20
 8007bc4:	af00      	add	r7, sp, #0
 8007bc6:	6078      	str	r0, [r7, #4]
 8007bc8:	460b      	mov	r3, r1
 8007bca:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != 0x00U)
 8007bcc:	687b      	ldr	r3, [r7, #4]
 8007bce:	691a      	ldr	r2, [r3, #16]
 8007bd0:	887b      	ldrh	r3, [r7, #2]
 8007bd2:	4013      	ands	r3, r2
 8007bd4:	2b00      	cmp	r3, #0
 8007bd6:	d002      	beq.n	8007bde <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8007bd8:	2301      	movs	r3, #1
 8007bda:	73fb      	strb	r3, [r7, #15]
 8007bdc:	e001      	b.n	8007be2 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8007bde:	2300      	movs	r3, #0
 8007be0:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8007be2:	7bfb      	ldrb	r3, [r7, #15]
}
 8007be4:	4618      	mov	r0, r3
 8007be6:	3714      	adds	r7, #20
 8007be8:	46bd      	mov	sp, r7
 8007bea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007bee:	4770      	bx	lr

08007bf0 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8007bf0:	b480      	push	{r7}
 8007bf2:	b083      	sub	sp, #12
 8007bf4:	af00      	add	r7, sp, #0
 8007bf6:	6078      	str	r0, [r7, #4]
 8007bf8:	460b      	mov	r3, r1
 8007bfa:	807b      	strh	r3, [r7, #2]
 8007bfc:	4613      	mov	r3, r2
 8007bfe:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8007c00:	787b      	ldrb	r3, [r7, #1]
 8007c02:	2b00      	cmp	r3, #0
 8007c04:	d003      	beq.n	8007c0e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8007c06:	887a      	ldrh	r2, [r7, #2]
 8007c08:	687b      	ldr	r3, [r7, #4]
 8007c0a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
  }
}
 8007c0c:	e003      	b.n	8007c16 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 8007c0e:	887b      	ldrh	r3, [r7, #2]
 8007c10:	041a      	lsls	r2, r3, #16
 8007c12:	687b      	ldr	r3, [r7, #4]
 8007c14:	619a      	str	r2, [r3, #24]
}
 8007c16:	bf00      	nop
 8007c18:	370c      	adds	r7, #12
 8007c1a:	46bd      	mov	sp, r7
 8007c1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c20:	4770      	bx	lr

08007c22 <HAL_GPIO_TogglePin>:
  * @param  GPIOx: Where x can be (A..K) to select the GPIO peripheral.
  * @param  GPIO_Pin: Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8007c22:	b480      	push	{r7}
 8007c24:	b085      	sub	sp, #20
 8007c26:	af00      	add	r7, sp, #0
 8007c28:	6078      	str	r0, [r7, #4]
 8007c2a:	460b      	mov	r3, r1
 8007c2c:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8007c2e:	687b      	ldr	r3, [r7, #4]
 8007c30:	695b      	ldr	r3, [r3, #20]
 8007c32:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8007c34:	887a      	ldrh	r2, [r7, #2]
 8007c36:	68fb      	ldr	r3, [r7, #12]
 8007c38:	4013      	ands	r3, r2
 8007c3a:	041a      	lsls	r2, r3, #16
 8007c3c:	68fb      	ldr	r3, [r7, #12]
 8007c3e:	43d9      	mvns	r1, r3
 8007c40:	887b      	ldrh	r3, [r7, #2]
 8007c42:	400b      	ands	r3, r1
 8007c44:	431a      	orrs	r2, r3
 8007c46:	687b      	ldr	r3, [r7, #4]
 8007c48:	619a      	str	r2, [r3, #24]
}
 8007c4a:	bf00      	nop
 8007c4c:	3714      	adds	r7, #20
 8007c4e:	46bd      	mov	sp, r7
 8007c50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c54:	4770      	bx	lr

08007c56 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin: Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8007c56:	b580      	push	{r7, lr}
 8007c58:	b082      	sub	sp, #8
 8007c5a:	af00      	add	r7, sp, #0
 8007c5c:	4603      	mov	r3, r0
 8007c5e:	80fb      	strh	r3, [r7, #6]
    __HAL_GPIO_EXTID2_CLEAR_IT(GPIO_Pin);
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
  }
#else
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00U)
 8007c60:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8007c64:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 8007c68:	88fb      	ldrh	r3, [r7, #6]
 8007c6a:	4013      	ands	r3, r2
 8007c6c:	2b00      	cmp	r3, #0
 8007c6e:	d008      	beq.n	8007c82 <HAL_GPIO_EXTI_IRQHandler+0x2c>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8007c70:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8007c74:	88fb      	ldrh	r3, [r7, #6]
 8007c76:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8007c7a:	88fb      	ldrh	r3, [r7, #6]
 8007c7c:	4618      	mov	r0, r3
 8007c7e:	f000 f804 	bl	8007c8a <HAL_GPIO_EXTI_Callback>
  }
#endif
}
 8007c82:	bf00      	nop
 8007c84:	3708      	adds	r7, #8
 8007c86:	46bd      	mov	sp, r7
 8007c88:	bd80      	pop	{r7, pc}

08007c8a <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callback.
  * @param  GPIO_Pin: Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8007c8a:	b480      	push	{r7}
 8007c8c:	b083      	sub	sp, #12
 8007c8e:	af00      	add	r7, sp, #0
 8007c90:	4603      	mov	r3, r0
 8007c92:	80fb      	strh	r3, [r7, #6]
  UNUSED(GPIO_Pin);

  /* NOTE: This function Should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 8007c94:	bf00      	nop
 8007c96:	370c      	adds	r7, #12
 8007c98:	46bd      	mov	sp, r7
 8007c9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c9e:	4770      	bx	lr

08007ca0 <HAL_HRTIM_Init>:
  * @brief  Initialize a HRTIM instance
  * @param  hhrtim pointer to HAL HRTIM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HRTIM_Init(HRTIM_HandleTypeDef * hhrtim)
{
 8007ca0:	b580      	push	{r7, lr}
 8007ca2:	b086      	sub	sp, #24
 8007ca4:	af00      	add	r7, sp, #0
 8007ca6:	6078      	str	r0, [r7, #4]
  uint8_t timer_idx;
  uint32_t hrtim_mcr;

  /* Check the HRTIM handle allocation */
  if(hhrtim == NULL)
 8007ca8:	687b      	ldr	r3, [r7, #4]
 8007caa:	2b00      	cmp	r3, #0
 8007cac:	d101      	bne.n	8007cb2 <HAL_HRTIM_Init+0x12>
  {
    return HAL_ERROR;
 8007cae:	2301      	movs	r3, #1
 8007cb0:	e0bd      	b.n	8007e2e <HAL_HRTIM_Init+0x18e>
    }
  }
#endif /* USE_HAL_HRTIM_REGISTER_CALLBACKS */

  /* Set the HRTIM state */
  hhrtim->State = HAL_HRTIM_STATE_BUSY;
 8007cb2:	687b      	ldr	r3, [r7, #4]
 8007cb4:	2202      	movs	r2, #2
 8007cb6:	f883 20c1 	strb.w	r2, [r3, #193]	; 0xc1

  /* Initialize the DMA handles */
  hhrtim->hdmaMaster = (DMA_HandleTypeDef *)NULL;
 8007cba:	687b      	ldr	r3, [r7, #4]
 8007cbc:	2200      	movs	r2, #0
 8007cbe:	f8c3 20c4 	str.w	r2, [r3, #196]	; 0xc4
  hhrtim->hdmaTimerA = (DMA_HandleTypeDef *)NULL;
 8007cc2:	687b      	ldr	r3, [r7, #4]
 8007cc4:	2200      	movs	r2, #0
 8007cc6:	f8c3 20c8 	str.w	r2, [r3, #200]	; 0xc8
  hhrtim->hdmaTimerB = (DMA_HandleTypeDef *)NULL;
 8007cca:	687b      	ldr	r3, [r7, #4]
 8007ccc:	2200      	movs	r2, #0
 8007cce:	f8c3 20cc 	str.w	r2, [r3, #204]	; 0xcc
  hhrtim->hdmaTimerC = (DMA_HandleTypeDef *)NULL;
 8007cd2:	687b      	ldr	r3, [r7, #4]
 8007cd4:	2200      	movs	r2, #0
 8007cd6:	f8c3 20d0 	str.w	r2, [r3, #208]	; 0xd0
  hhrtim->hdmaTimerD = (DMA_HandleTypeDef *)NULL;
 8007cda:	687b      	ldr	r3, [r7, #4]
 8007cdc:	2200      	movs	r2, #0
 8007cde:	f8c3 20d4 	str.w	r2, [r3, #212]	; 0xd4
  hhrtim->hdmaTimerE = (DMA_HandleTypeDef *)NULL;
 8007ce2:	687b      	ldr	r3, [r7, #4]
 8007ce4:	2200      	movs	r2, #0
 8007ce6:	f8c3 20d8 	str.w	r2, [r3, #216]	; 0xd8

  /* HRTIM output synchronization configuration (if required) */
  if ((hhrtim->Init.SyncOptions & HRTIM_SYNCOPTION_MASTER) != (uint32_t)RESET)
 8007cea:	687b      	ldr	r3, [r7, #4]
 8007cec:	689b      	ldr	r3, [r3, #8]
 8007cee:	f003 0301 	and.w	r3, r3, #1
 8007cf2:	2b00      	cmp	r3, #0
 8007cf4:	d031      	beq.n	8007d5a <HAL_HRTIM_Init+0xba>
    assert_param(IS_HRTIM_SYNCOUTPUTPOLARITY(hhrtim->Init.SyncOutputPolarity));

    /* The synchronization output initialization procedure must be done prior
       to the configuration of the MCU outputs (done within HAL_HRTIM_MspInit)
    */
    if (hhrtim->Instance == HRTIM1)
 8007cf6:	687b      	ldr	r3, [r7, #4]
 8007cf8:	681b      	ldr	r3, [r3, #0]
 8007cfa:	4a4f      	ldr	r2, [pc, #316]	; (8007e38 <HAL_HRTIM_Init+0x198>)
 8007cfc:	4293      	cmp	r3, r2
 8007cfe:	d10e      	bne.n	8007d1e <HAL_HRTIM_Init+0x7e>
    {
      /* Enable the HRTIM peripheral clock */
      __HAL_RCC_HRTIM1_CLK_ENABLE();
 8007d00:	4b4e      	ldr	r3, [pc, #312]	; (8007e3c <HAL_HRTIM_Init+0x19c>)
 8007d02:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8007d06:	4a4d      	ldr	r2, [pc, #308]	; (8007e3c <HAL_HRTIM_Init+0x19c>)
 8007d08:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8007d0c:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 8007d10:	4b4a      	ldr	r3, [pc, #296]	; (8007e3c <HAL_HRTIM_Init+0x19c>)
 8007d12:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8007d16:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8007d1a:	60fb      	str	r3, [r7, #12]
 8007d1c:	68fb      	ldr	r3, [r7, #12]
    }

    hrtim_mcr = hhrtim->Instance->sMasterRegs.MCR;
 8007d1e:	687b      	ldr	r3, [r7, #4]
 8007d20:	681b      	ldr	r3, [r3, #0]
 8007d22:	681b      	ldr	r3, [r3, #0]
 8007d24:	613b      	str	r3, [r7, #16]

    /* Set the event to be sent on the synchronization output */
    hrtim_mcr &= ~(HRTIM_MCR_SYNC_SRC);
 8007d26:	693b      	ldr	r3, [r7, #16]
 8007d28:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8007d2c:	613b      	str	r3, [r7, #16]
    hrtim_mcr |= (hhrtim->Init.SyncOutputSource & HRTIM_MCR_SYNC_SRC);
 8007d2e:	687b      	ldr	r3, [r7, #4]
 8007d30:	691b      	ldr	r3, [r3, #16]
 8007d32:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8007d36:	693a      	ldr	r2, [r7, #16]
 8007d38:	4313      	orrs	r3, r2
 8007d3a:	613b      	str	r3, [r7, #16]

    /* Set the polarity of the synchronization output */
    hrtim_mcr &= ~(HRTIM_MCR_SYNC_OUT);
 8007d3c:	693b      	ldr	r3, [r7, #16]
 8007d3e:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8007d42:	613b      	str	r3, [r7, #16]
    hrtim_mcr |= (hhrtim->Init.SyncOutputPolarity & HRTIM_MCR_SYNC_OUT);
 8007d44:	687b      	ldr	r3, [r7, #4]
 8007d46:	695b      	ldr	r3, [r3, #20]
 8007d48:	f403 5340 	and.w	r3, r3, #12288	; 0x3000
 8007d4c:	693a      	ldr	r2, [r7, #16]
 8007d4e:	4313      	orrs	r3, r2
 8007d50:	613b      	str	r3, [r7, #16]

    /* Update the HRTIM registers */
    hhrtim->Instance->sMasterRegs.MCR = hrtim_mcr;
 8007d52:	687b      	ldr	r3, [r7, #4]
 8007d54:	681b      	ldr	r3, [r3, #0]
 8007d56:	693a      	ldr	r2, [r7, #16]
 8007d58:	601a      	str	r2, [r3, #0]

  /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
#if (USE_HAL_HRTIM_REGISTER_CALLBACKS == 1)
  hhrtim->MspInitCallback(hhrtim);
#else
  HAL_HRTIM_MspInit(hhrtim);
 8007d5a:	6878      	ldr	r0, [r7, #4]
 8007d5c:	f7fb fb96 	bl	800348c <HAL_HRTIM_MspInit>
#endif /* USE_HAL_HRTIM_REGISTER_CALLBACKS */

  /* HRTIM input synchronization configuration (if required) */
  if ((hhrtim->Init.SyncOptions & HRTIM_SYNCOPTION_SLAVE) != (uint32_t)RESET)
 8007d60:	687b      	ldr	r3, [r7, #4]
 8007d62:	689b      	ldr	r3, [r3, #8]
 8007d64:	f003 0302 	and.w	r3, r3, #2
 8007d68:	2b00      	cmp	r3, #0
 8007d6a:	d012      	beq.n	8007d92 <HAL_HRTIM_Init+0xf2>
  {
    /* Check parameters */
    assert_param(IS_HRTIM_SYNCINPUTSOURCE(hhrtim->Init.SyncInputSource));

    hrtim_mcr = hhrtim->Instance->sMasterRegs.MCR;
 8007d6c:	687b      	ldr	r3, [r7, #4]
 8007d6e:	681b      	ldr	r3, [r3, #0]
 8007d70:	681b      	ldr	r3, [r3, #0]
 8007d72:	613b      	str	r3, [r7, #16]

    /* Set the synchronization input source */
    hrtim_mcr &= ~(HRTIM_MCR_SYNC_IN);
 8007d74:	693b      	ldr	r3, [r7, #16]
 8007d76:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8007d7a:	613b      	str	r3, [r7, #16]
    hrtim_mcr |= (hhrtim->Init.SyncInputSource & HRTIM_MCR_SYNC_IN);
 8007d7c:	687b      	ldr	r3, [r7, #4]
 8007d7e:	68db      	ldr	r3, [r3, #12]
 8007d80:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8007d84:	693a      	ldr	r2, [r7, #16]
 8007d86:	4313      	orrs	r3, r2
 8007d88:	613b      	str	r3, [r7, #16]

    /* Update the HRTIM registers */
    hhrtim->Instance->sMasterRegs.MCR = hrtim_mcr;
 8007d8a:	687b      	ldr	r3, [r7, #4]
 8007d8c:	681b      	ldr	r3, [r3, #0]
 8007d8e:	693a      	ldr	r2, [r7, #16]
 8007d90:	601a      	str	r2, [r3, #0]
  }

  /* Initialize the HRTIM state*/
  hhrtim->State = HAL_HRTIM_STATE_READY;
 8007d92:	687b      	ldr	r3, [r7, #4]
 8007d94:	2201      	movs	r2, #1
 8007d96:	f883 20c1 	strb.w	r2, [r3, #193]	; 0xc1

  /* Initialize the lock status of the HRTIM HAL API */
  __HAL_UNLOCK(hhrtim);
 8007d9a:	687b      	ldr	r3, [r7, #4]
 8007d9c:	2200      	movs	r2, #0
 8007d9e:	f883 20c0 	strb.w	r2, [r3, #192]	; 0xc0

  /* Initialize timer related parameters */
  for (timer_idx = HRTIM_TIMERINDEX_TIMER_A ;
 8007da2:	2300      	movs	r3, #0
 8007da4:	75fb      	strb	r3, [r7, #23]
 8007da6:	e03e      	b.n	8007e26 <HAL_HRTIM_Init+0x186>
       timer_idx <= HRTIM_TIMERINDEX_MASTER ;
       timer_idx++)
  {
    hhrtim->TimerParam[timer_idx].CaptureTrigger1 = HRTIM_CAPTURETRIGGER_NONE;
 8007da8:	7dfa      	ldrb	r2, [r7, #23]
 8007daa:	6879      	ldr	r1, [r7, #4]
 8007dac:	4613      	mov	r3, r2
 8007dae:	00db      	lsls	r3, r3, #3
 8007db0:	1a9b      	subs	r3, r3, r2
 8007db2:	009b      	lsls	r3, r3, #2
 8007db4:	440b      	add	r3, r1
 8007db6:	3318      	adds	r3, #24
 8007db8:	2200      	movs	r2, #0
 8007dba:	601a      	str	r2, [r3, #0]
    hhrtim->TimerParam[timer_idx].CaptureTrigger2 = HRTIM_CAPTURETRIGGER_NONE;
 8007dbc:	7dfa      	ldrb	r2, [r7, #23]
 8007dbe:	6879      	ldr	r1, [r7, #4]
 8007dc0:	4613      	mov	r3, r2
 8007dc2:	00db      	lsls	r3, r3, #3
 8007dc4:	1a9b      	subs	r3, r3, r2
 8007dc6:	009b      	lsls	r3, r3, #2
 8007dc8:	440b      	add	r3, r1
 8007dca:	331c      	adds	r3, #28
 8007dcc:	2200      	movs	r2, #0
 8007dce:	601a      	str	r2, [r3, #0]
    hhrtim->TimerParam[timer_idx].InterruptRequests = HRTIM_IT_NONE;
 8007dd0:	7dfa      	ldrb	r2, [r7, #23]
 8007dd2:	6879      	ldr	r1, [r7, #4]
 8007dd4:	4613      	mov	r3, r2
 8007dd6:	00db      	lsls	r3, r3, #3
 8007dd8:	1a9b      	subs	r3, r3, r2
 8007dda:	009b      	lsls	r3, r3, #2
 8007ddc:	440b      	add	r3, r1
 8007dde:	3320      	adds	r3, #32
 8007de0:	2200      	movs	r2, #0
 8007de2:	601a      	str	r2, [r3, #0]
    hhrtim->TimerParam[timer_idx].DMARequests = HRTIM_IT_NONE;
 8007de4:	7dfa      	ldrb	r2, [r7, #23]
 8007de6:	6879      	ldr	r1, [r7, #4]
 8007de8:	4613      	mov	r3, r2
 8007dea:	00db      	lsls	r3, r3, #3
 8007dec:	1a9b      	subs	r3, r3, r2
 8007dee:	009b      	lsls	r3, r3, #2
 8007df0:	440b      	add	r3, r1
 8007df2:	3324      	adds	r3, #36	; 0x24
 8007df4:	2200      	movs	r2, #0
 8007df6:	601a      	str	r2, [r3, #0]
    hhrtim->TimerParam[timer_idx].DMASrcAddress = 0U;
 8007df8:	7dfa      	ldrb	r2, [r7, #23]
 8007dfa:	6879      	ldr	r1, [r7, #4]
 8007dfc:	4613      	mov	r3, r2
 8007dfe:	00db      	lsls	r3, r3, #3
 8007e00:	1a9b      	subs	r3, r3, r2
 8007e02:	009b      	lsls	r3, r3, #2
 8007e04:	440b      	add	r3, r1
 8007e06:	3328      	adds	r3, #40	; 0x28
 8007e08:	2200      	movs	r2, #0
 8007e0a:	601a      	str	r2, [r3, #0]
    hhrtim->TimerParam[timer_idx].DMASize = 0U;
 8007e0c:	7dfa      	ldrb	r2, [r7, #23]
 8007e0e:	6879      	ldr	r1, [r7, #4]
 8007e10:	4613      	mov	r3, r2
 8007e12:	00db      	lsls	r3, r3, #3
 8007e14:	1a9b      	subs	r3, r3, r2
 8007e16:	009b      	lsls	r3, r3, #2
 8007e18:	440b      	add	r3, r1
 8007e1a:	3330      	adds	r3, #48	; 0x30
 8007e1c:	2200      	movs	r2, #0
 8007e1e:	601a      	str	r2, [r3, #0]
       timer_idx++)
 8007e20:	7dfb      	ldrb	r3, [r7, #23]
 8007e22:	3301      	adds	r3, #1
 8007e24:	75fb      	strb	r3, [r7, #23]
       timer_idx <= HRTIM_TIMERINDEX_MASTER ;
 8007e26:	7dfb      	ldrb	r3, [r7, #23]
 8007e28:	2b05      	cmp	r3, #5
 8007e2a:	d9bd      	bls.n	8007da8 <HAL_HRTIM_Init+0x108>
  }

  return HAL_OK;
 8007e2c:	2300      	movs	r3, #0
}
 8007e2e:	4618      	mov	r0, r3
 8007e30:	3718      	adds	r7, #24
 8007e32:	46bd      	mov	sp, r7
 8007e34:	bd80      	pop	{r7, pc}
 8007e36:	bf00      	nop
 8007e38:	40017400 	.word	0x40017400
 8007e3c:	58024400 	.word	0x58024400

08007e40 <HAL_HRTIM_TimeBaseConfig>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HRTIM_TimeBaseConfig(HRTIM_HandleTypeDef *hhrtim,
                                           uint32_t TimerIdx,
                                           const HRTIM_TimeBaseCfgTypeDef * pTimeBaseCfg)
{
 8007e40:	b580      	push	{r7, lr}
 8007e42:	b084      	sub	sp, #16
 8007e44:	af00      	add	r7, sp, #0
 8007e46:	60f8      	str	r0, [r7, #12]
 8007e48:	60b9      	str	r1, [r7, #8]
 8007e4a:	607a      	str	r2, [r7, #4]
  /* Check the parameters */
  assert_param(IS_HRTIM_TIMERINDEX(TimerIdx));
  assert_param(IS_HRTIM_PRESCALERRATIO(pTimeBaseCfg->PrescalerRatio));
  assert_param(IS_HRTIM_MODE(pTimeBaseCfg->Mode));

  if(hhrtim->State == HAL_HRTIM_STATE_BUSY)
 8007e4c:	68fb      	ldr	r3, [r7, #12]
 8007e4e:	f893 30c1 	ldrb.w	r3, [r3, #193]	; 0xc1
 8007e52:	b2db      	uxtb	r3, r3
 8007e54:	2b02      	cmp	r3, #2
 8007e56:	d101      	bne.n	8007e5c <HAL_HRTIM_TimeBaseConfig+0x1c>
  {
     return HAL_BUSY;
 8007e58:	2302      	movs	r3, #2
 8007e5a:	e015      	b.n	8007e88 <HAL_HRTIM_TimeBaseConfig+0x48>
  }

  /* Set the HRTIM state */
  hhrtim->State = HAL_HRTIM_STATE_BUSY;
 8007e5c:	68fb      	ldr	r3, [r7, #12]
 8007e5e:	2202      	movs	r2, #2
 8007e60:	f883 20c1 	strb.w	r2, [r3, #193]	; 0xc1

  if (TimerIdx == HRTIM_TIMERINDEX_MASTER)
 8007e64:	68bb      	ldr	r3, [r7, #8]
 8007e66:	2b05      	cmp	r3, #5
 8007e68:	d104      	bne.n	8007e74 <HAL_HRTIM_TimeBaseConfig+0x34>
  {
    /* Configure master timer time base unit */
    HRTIM_MasterBase_Config(hhrtim, pTimeBaseCfg);
 8007e6a:	6879      	ldr	r1, [r7, #4]
 8007e6c:	68f8      	ldr	r0, [r7, #12]
 8007e6e:	f000 fbd0 	bl	8008612 <HRTIM_MasterBase_Config>
 8007e72:	e004      	b.n	8007e7e <HAL_HRTIM_TimeBaseConfig+0x3e>
  }
  else
  {
    /* Configure timing unit time base unit */
    HRTIM_TimingUnitBase_Config(hhrtim, TimerIdx, pTimeBaseCfg);
 8007e74:	687a      	ldr	r2, [r7, #4]
 8007e76:	68b9      	ldr	r1, [r7, #8]
 8007e78:	68f8      	ldr	r0, [r7, #12]
 8007e7a:	f000 fbf9 	bl	8008670 <HRTIM_TimingUnitBase_Config>
  }

  /* Set HRTIM state */
  hhrtim->State = HAL_HRTIM_STATE_READY;
 8007e7e:	68fb      	ldr	r3, [r7, #12]
 8007e80:	2201      	movs	r2, #1
 8007e82:	f883 20c1 	strb.w	r2, [r3, #193]	; 0xc1

  return HAL_OK;
 8007e86:	2300      	movs	r3, #0
}
 8007e88:	4618      	mov	r0, r3
 8007e8a:	3710      	adds	r7, #16
 8007e8c:	46bd      	mov	sp, r7
 8007e8e:	bd80      	pop	{r7, pc}

08007e90 <HAL_HRTIM_WaveformTimerConfig>:
  * @note This function must be called before starting the timer
  */
HAL_StatusTypeDef HAL_HRTIM_WaveformTimerConfig(HRTIM_HandleTypeDef * hhrtim,
                                                uint32_t TimerIdx,
                                                const HRTIM_TimerCfgTypeDef * pTimerCfg)
{
 8007e90:	b580      	push	{r7, lr}
 8007e92:	b084      	sub	sp, #16
 8007e94:	af00      	add	r7, sp, #0
 8007e96:	60f8      	str	r0, [r7, #12]
 8007e98:	60b9      	str	r1, [r7, #8]
 8007e9a:	607a      	str	r2, [r7, #4]
  assert_param(IS_HRTIM_DACSYNC(pTimerCfg->DACSynchro));
  assert_param(IS_HRTIM_PRELOAD(pTimerCfg->PreloadEnable));
  assert_param(IS_HRTIM_TIMERBURSTMODE(pTimerCfg->BurstMode));
  assert_param(IS_HRTIM_UPDATEONREPETITION(pTimerCfg->RepetitionUpdate));

  if(hhrtim->State == HAL_HRTIM_STATE_BUSY)
 8007e9c:	68fb      	ldr	r3, [r7, #12]
 8007e9e:	f893 30c1 	ldrb.w	r3, [r3, #193]	; 0xc1
 8007ea2:	b2db      	uxtb	r3, r3
 8007ea4:	2b02      	cmp	r3, #2
 8007ea6:	d101      	bne.n	8007eac <HAL_HRTIM_WaveformTimerConfig+0x1c>
  {
     return HAL_BUSY;
 8007ea8:	2302      	movs	r3, #2
 8007eaa:	e05f      	b.n	8007f6c <HAL_HRTIM_WaveformTimerConfig+0xdc>
  }

  /* Process Locked */
  __HAL_LOCK(hhrtim);
 8007eac:	68fb      	ldr	r3, [r7, #12]
 8007eae:	f893 30c0 	ldrb.w	r3, [r3, #192]	; 0xc0
 8007eb2:	2b01      	cmp	r3, #1
 8007eb4:	d101      	bne.n	8007eba <HAL_HRTIM_WaveformTimerConfig+0x2a>
 8007eb6:	2302      	movs	r3, #2
 8007eb8:	e058      	b.n	8007f6c <HAL_HRTIM_WaveformTimerConfig+0xdc>
 8007eba:	68fb      	ldr	r3, [r7, #12]
 8007ebc:	2201      	movs	r2, #1
 8007ebe:	f883 20c0 	strb.w	r2, [r3, #192]	; 0xc0

  hhrtim->State = HAL_HRTIM_STATE_BUSY;
 8007ec2:	68fb      	ldr	r3, [r7, #12]
 8007ec4:	2202      	movs	r2, #2
 8007ec6:	f883 20c1 	strb.w	r2, [r3, #193]	; 0xc1

  if (TimerIdx == HRTIM_TIMERINDEX_MASTER)
 8007eca:	68bb      	ldr	r3, [r7, #8]
 8007ecc:	2b05      	cmp	r3, #5
 8007ece:	d104      	bne.n	8007eda <HAL_HRTIM_WaveformTimerConfig+0x4a>
    assert_param(IS_HRTIM_UPDATEGATING_MASTER(pTimerCfg->UpdateGating));
    assert_param(IS_HRTIM_MASTER_IT(pTimerCfg->InterruptRequests));
    assert_param(IS_HRTIM_MASTER_DMA(pTimerCfg->DMARequests));

    /* Configure master timer */
    HRTIM_MasterWaveform_Config(hhrtim, pTimerCfg);
 8007ed0:	6879      	ldr	r1, [r7, #4]
 8007ed2:	68f8      	ldr	r0, [r7, #12]
 8007ed4:	f000 fc0c 	bl	80086f0 <HRTIM_MasterWaveform_Config>
 8007ed8:	e004      	b.n	8007ee4 <HAL_HRTIM_WaveformTimerConfig+0x54>
    assert_param(IS_HRTIM_TIMUPDATETRIGGER(pTimerCfg->UpdateTrigger));
    assert_param(IS_HRTIM_TIMRESETTRIGGER(pTimerCfg->ResetTrigger));
    assert_param(IS_HRTIM_TIMUPDATEONRESET(pTimerCfg->ResetUpdate));

    /* Configure timing unit */
    HRTIM_TimingUnitWaveform_Config(hhrtim, TimerIdx, pTimerCfg);
 8007eda:	687a      	ldr	r2, [r7, #4]
 8007edc:	68b9      	ldr	r1, [r7, #8]
 8007ede:	68f8      	ldr	r0, [r7, #12]
 8007ee0:	f000 fc6c 	bl	80087bc <HRTIM_TimingUnitWaveform_Config>
  }

  /* Update timer parameters */
  hhrtim->TimerParam[TimerIdx].InterruptRequests = pTimerCfg->InterruptRequests;
 8007ee4:	687b      	ldr	r3, [r7, #4]
 8007ee6:	6819      	ldr	r1, [r3, #0]
 8007ee8:	68f8      	ldr	r0, [r7, #12]
 8007eea:	68ba      	ldr	r2, [r7, #8]
 8007eec:	4613      	mov	r3, r2
 8007eee:	00db      	lsls	r3, r3, #3
 8007ef0:	1a9b      	subs	r3, r3, r2
 8007ef2:	009b      	lsls	r3, r3, #2
 8007ef4:	4403      	add	r3, r0
 8007ef6:	3320      	adds	r3, #32
 8007ef8:	6019      	str	r1, [r3, #0]
  hhrtim->TimerParam[TimerIdx].DMARequests = pTimerCfg->DMARequests;
 8007efa:	687b      	ldr	r3, [r7, #4]
 8007efc:	6859      	ldr	r1, [r3, #4]
 8007efe:	68f8      	ldr	r0, [r7, #12]
 8007f00:	68ba      	ldr	r2, [r7, #8]
 8007f02:	4613      	mov	r3, r2
 8007f04:	00db      	lsls	r3, r3, #3
 8007f06:	1a9b      	subs	r3, r3, r2
 8007f08:	009b      	lsls	r3, r3, #2
 8007f0a:	4403      	add	r3, r0
 8007f0c:	3324      	adds	r3, #36	; 0x24
 8007f0e:	6019      	str	r1, [r3, #0]
  hhrtim->TimerParam[TimerIdx].DMASrcAddress = pTimerCfg->DMASrcAddress;
 8007f10:	687b      	ldr	r3, [r7, #4]
 8007f12:	6899      	ldr	r1, [r3, #8]
 8007f14:	68f8      	ldr	r0, [r7, #12]
 8007f16:	68ba      	ldr	r2, [r7, #8]
 8007f18:	4613      	mov	r3, r2
 8007f1a:	00db      	lsls	r3, r3, #3
 8007f1c:	1a9b      	subs	r3, r3, r2
 8007f1e:	009b      	lsls	r3, r3, #2
 8007f20:	4403      	add	r3, r0
 8007f22:	3328      	adds	r3, #40	; 0x28
 8007f24:	6019      	str	r1, [r3, #0]
  hhrtim->TimerParam[TimerIdx].DMADstAddress = pTimerCfg->DMADstAddress;
 8007f26:	687b      	ldr	r3, [r7, #4]
 8007f28:	68d9      	ldr	r1, [r3, #12]
 8007f2a:	68f8      	ldr	r0, [r7, #12]
 8007f2c:	68ba      	ldr	r2, [r7, #8]
 8007f2e:	4613      	mov	r3, r2
 8007f30:	00db      	lsls	r3, r3, #3
 8007f32:	1a9b      	subs	r3, r3, r2
 8007f34:	009b      	lsls	r3, r3, #2
 8007f36:	4403      	add	r3, r0
 8007f38:	332c      	adds	r3, #44	; 0x2c
 8007f3a:	6019      	str	r1, [r3, #0]
  hhrtim->TimerParam[TimerIdx].DMASize = pTimerCfg->DMASize;
 8007f3c:	687b      	ldr	r3, [r7, #4]
 8007f3e:	6919      	ldr	r1, [r3, #16]
 8007f40:	68f8      	ldr	r0, [r7, #12]
 8007f42:	68ba      	ldr	r2, [r7, #8]
 8007f44:	4613      	mov	r3, r2
 8007f46:	00db      	lsls	r3, r3, #3
 8007f48:	1a9b      	subs	r3, r3, r2
 8007f4a:	009b      	lsls	r3, r3, #2
 8007f4c:	4403      	add	r3, r0
 8007f4e:	3330      	adds	r3, #48	; 0x30
 8007f50:	6019      	str	r1, [r3, #0]

  /* Force a software update */
  HRTIM_ForceRegistersUpdate(hhrtim, TimerIdx);
 8007f52:	68b9      	ldr	r1, [r7, #8]
 8007f54:	68f8      	ldr	r0, [r7, #12]
 8007f56:	f000 fe49 	bl	8008bec <HRTIM_ForceRegistersUpdate>

  hhrtim->State = HAL_HRTIM_STATE_READY;
 8007f5a:	68fb      	ldr	r3, [r7, #12]
 8007f5c:	2201      	movs	r2, #1
 8007f5e:	f883 20c1 	strb.w	r2, [r3, #193]	; 0xc1

  /* Process Unlocked */
  __HAL_UNLOCK(hhrtim);
 8007f62:	68fb      	ldr	r3, [r7, #12]
 8007f64:	2200      	movs	r2, #0
 8007f66:	f883 20c0 	strb.w	r2, [r3, #192]	; 0xc0

  return HAL_OK;
 8007f6a:	2300      	movs	r3, #0
}
 8007f6c:	4618      	mov	r0, r3
 8007f6e:	3710      	adds	r7, #16
 8007f70:	46bd      	mov	sp, r7
 8007f72:	bd80      	pop	{r7, pc}

08007f74 <HAL_HRTIM_WaveformCompareConfig>:
  */
HAL_StatusTypeDef HAL_HRTIM_WaveformCompareConfig(HRTIM_HandleTypeDef * hhrtim,
                                                  uint32_t TimerIdx,
                                                  uint32_t CompareUnit,
                                                  const HRTIM_CompareCfgTypeDef* pCompareCfg)
{
 8007f74:	b480      	push	{r7}
 8007f76:	b085      	sub	sp, #20
 8007f78:	af00      	add	r7, sp, #0
 8007f7a:	60f8      	str	r0, [r7, #12]
 8007f7c:	60b9      	str	r1, [r7, #8]
 8007f7e:	607a      	str	r2, [r7, #4]
 8007f80:	603b      	str	r3, [r7, #0]
  /* Check parameters */
  assert_param(IS_HRTIM_TIMERINDEX(TimerIdx));

  if(hhrtim->State == HAL_HRTIM_STATE_BUSY)
 8007f82:	68fb      	ldr	r3, [r7, #12]
 8007f84:	f893 30c1 	ldrb.w	r3, [r3, #193]	; 0xc1
 8007f88:	b2db      	uxtb	r3, r3
 8007f8a:	2b02      	cmp	r3, #2
 8007f8c:	d101      	bne.n	8007f92 <HAL_HRTIM_WaveformCompareConfig+0x1e>
  {
     return HAL_BUSY;
 8007f8e:	2302      	movs	r3, #2
 8007f90:	e157      	b.n	8008242 <HAL_HRTIM_WaveformCompareConfig+0x2ce>
  }

  /* Process Locked */
  __HAL_LOCK(hhrtim);
 8007f92:	68fb      	ldr	r3, [r7, #12]
 8007f94:	f893 30c0 	ldrb.w	r3, [r3, #192]	; 0xc0
 8007f98:	2b01      	cmp	r3, #1
 8007f9a:	d101      	bne.n	8007fa0 <HAL_HRTIM_WaveformCompareConfig+0x2c>
 8007f9c:	2302      	movs	r3, #2
 8007f9e:	e150      	b.n	8008242 <HAL_HRTIM_WaveformCompareConfig+0x2ce>
 8007fa0:	68fb      	ldr	r3, [r7, #12]
 8007fa2:	2201      	movs	r2, #1
 8007fa4:	f883 20c0 	strb.w	r2, [r3, #192]	; 0xc0

  hhrtim->State = HAL_HRTIM_STATE_BUSY;
 8007fa8:	68fb      	ldr	r3, [r7, #12]
 8007faa:	2202      	movs	r2, #2
 8007fac:	f883 20c1 	strb.w	r2, [r3, #193]	; 0xc1

  /* Configure the compare unit */
  if (TimerIdx == HRTIM_TIMERINDEX_MASTER)
 8007fb0:	68bb      	ldr	r3, [r7, #8]
 8007fb2:	2b05      	cmp	r3, #5
 8007fb4:	d140      	bne.n	8008038 <HAL_HRTIM_WaveformCompareConfig+0xc4>
  {
    switch (CompareUnit)
 8007fb6:	687b      	ldr	r3, [r7, #4]
 8007fb8:	3b01      	subs	r3, #1
 8007fba:	2b07      	cmp	r3, #7
 8007fbc:	d82a      	bhi.n	8008014 <HAL_HRTIM_WaveformCompareConfig+0xa0>
 8007fbe:	a201      	add	r2, pc, #4	; (adr r2, 8007fc4 <HAL_HRTIM_WaveformCompareConfig+0x50>)
 8007fc0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007fc4:	08007fe5 	.word	0x08007fe5
 8007fc8:	08007ff1 	.word	0x08007ff1
 8007fcc:	08008015 	.word	0x08008015
 8007fd0:	08007ffd 	.word	0x08007ffd
 8007fd4:	08008015 	.word	0x08008015
 8007fd8:	08008015 	.word	0x08008015
 8007fdc:	08008015 	.word	0x08008015
 8007fe0:	08008009 	.word	0x08008009
    {
      case HRTIM_COMPAREUNIT_1:
        {
        hhrtim->Instance->sMasterRegs.MCMP1R = pCompareCfg->CompareValue;
 8007fe4:	68fb      	ldr	r3, [r7, #12]
 8007fe6:	681b      	ldr	r3, [r3, #0]
 8007fe8:	683a      	ldr	r2, [r7, #0]
 8007fea:	6812      	ldr	r2, [r2, #0]
 8007fec:	61da      	str	r2, [r3, #28]
        break;
 8007fee:	e01a      	b.n	8008026 <HAL_HRTIM_WaveformCompareConfig+0xb2>
        }

      case HRTIM_COMPAREUNIT_2:
        {
        hhrtim->Instance->sMasterRegs.MCMP2R = pCompareCfg->CompareValue;
 8007ff0:	68fb      	ldr	r3, [r7, #12]
 8007ff2:	681b      	ldr	r3, [r3, #0]
 8007ff4:	683a      	ldr	r2, [r7, #0]
 8007ff6:	6812      	ldr	r2, [r2, #0]
 8007ff8:	625a      	str	r2, [r3, #36]	; 0x24
        break;
 8007ffa:	e014      	b.n	8008026 <HAL_HRTIM_WaveformCompareConfig+0xb2>
        }

      case HRTIM_COMPAREUNIT_3:
        {
        hhrtim->Instance->sMasterRegs.MCMP3R = pCompareCfg->CompareValue;
 8007ffc:	68fb      	ldr	r3, [r7, #12]
 8007ffe:	681b      	ldr	r3, [r3, #0]
 8008000:	683a      	ldr	r2, [r7, #0]
 8008002:	6812      	ldr	r2, [r2, #0]
 8008004:	629a      	str	r2, [r3, #40]	; 0x28
        break;
 8008006:	e00e      	b.n	8008026 <HAL_HRTIM_WaveformCompareConfig+0xb2>
        }

      case HRTIM_COMPAREUNIT_4:
        {
        hhrtim->Instance->sMasterRegs.MCMP4R = pCompareCfg->CompareValue;
 8008008:	68fb      	ldr	r3, [r7, #12]
 800800a:	681b      	ldr	r3, [r3, #0]
 800800c:	683a      	ldr	r2, [r7, #0]
 800800e:	6812      	ldr	r2, [r2, #0]
 8008010:	62da      	str	r2, [r3, #44]	; 0x2c
        break;
 8008012:	e008      	b.n	8008026 <HAL_HRTIM_WaveformCompareConfig+0xb2>
        }

      default:
        {
        hhrtim->State = HAL_HRTIM_STATE_ERROR;
 8008014:	68fb      	ldr	r3, [r7, #12]
 8008016:	2207      	movs	r2, #7
 8008018:	f883 20c1 	strb.w	r2, [r3, #193]	; 0xc1

        /* Process Unlocked */
        __HAL_UNLOCK(hhrtim);
 800801c:	68fb      	ldr	r3, [r7, #12]
 800801e:	2200      	movs	r2, #0
 8008020:	f883 20c0 	strb.w	r2, [r3, #192]	; 0xc0

        break;
 8008024:	bf00      	nop
        }
    }

    if(hhrtim->State == HAL_HRTIM_STATE_ERROR)
 8008026:	68fb      	ldr	r3, [r7, #12]
 8008028:	f893 30c1 	ldrb.w	r3, [r3, #193]	; 0xc1
 800802c:	b2db      	uxtb	r3, r3
 800802e:	2b07      	cmp	r3, #7
 8008030:	f040 80fe 	bne.w	8008230 <HAL_HRTIM_WaveformCompareConfig+0x2bc>
    {
     return HAL_ERROR;
 8008034:	2301      	movs	r3, #1
 8008036:	e104      	b.n	8008242 <HAL_HRTIM_WaveformCompareConfig+0x2ce>
    }

  }
  else
  {
    switch (CompareUnit)
 8008038:	687b      	ldr	r3, [r7, #4]
 800803a:	3b01      	subs	r3, #1
 800803c:	2b07      	cmp	r3, #7
 800803e:	f200 80e3 	bhi.w	8008208 <HAL_HRTIM_WaveformCompareConfig+0x294>
 8008042:	a201      	add	r2, pc, #4	; (adr r2, 8008048 <HAL_HRTIM_WaveformCompareConfig+0xd4>)
 8008044:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008048:	08008069 	.word	0x08008069
 800804c:	0800807d 	.word	0x0800807d
 8008050:	08008209 	.word	0x08008209
 8008054:	08008139 	.word	0x08008139
 8008058:	08008209 	.word	0x08008209
 800805c:	08008209 	.word	0x08008209
 8008060:	08008209 	.word	0x08008209
 8008064:	0800814d 	.word	0x0800814d
    {
    case HRTIM_COMPAREUNIT_1:
      {
        /* Set the compare value */
        hhrtim->Instance->sTimerxRegs[TimerIdx].CMP1xR = pCompareCfg->CompareValue;
 8008068:	68fb      	ldr	r3, [r7, #12]
 800806a:	6819      	ldr	r1, [r3, #0]
 800806c:	683b      	ldr	r3, [r7, #0]
 800806e:	681a      	ldr	r2, [r3, #0]
 8008070:	68bb      	ldr	r3, [r7, #8]
 8008072:	01db      	lsls	r3, r3, #7
 8008074:	440b      	add	r3, r1
 8008076:	339c      	adds	r3, #156	; 0x9c
 8008078:	601a      	str	r2, [r3, #0]
        break;
 800807a:	e0d1      	b.n	8008220 <HAL_HRTIM_WaveformCompareConfig+0x2ac>
      {
        /* Check parameters */
        assert_param(IS_HRTIM_COMPAREUNIT_AUTODELAYEDMODE(CompareUnit, pCompareCfg->AutoDelayedMode));

        /* Set the compare value */
        hhrtim->Instance->sTimerxRegs[TimerIdx].CMP2xR = pCompareCfg->CompareValue;
 800807c:	68fb      	ldr	r3, [r7, #12]
 800807e:	6819      	ldr	r1, [r3, #0]
 8008080:	683b      	ldr	r3, [r7, #0]
 8008082:	681a      	ldr	r2, [r3, #0]
 8008084:	68bb      	ldr	r3, [r7, #8]
 8008086:	01db      	lsls	r3, r3, #7
 8008088:	440b      	add	r3, r1
 800808a:	33a4      	adds	r3, #164	; 0xa4
 800808c:	601a      	str	r2, [r3, #0]

        if (pCompareCfg->AutoDelayedMode != HRTIM_AUTODELAYEDMODE_REGULAR)
 800808e:	683b      	ldr	r3, [r7, #0]
 8008090:	685b      	ldr	r3, [r3, #4]
 8008092:	2b00      	cmp	r3, #0
 8008094:	d03f      	beq.n	8008116 <HAL_HRTIM_WaveformCompareConfig+0x1a2>
        {
          /* Configure auto-delayed mode */
          /* DELCMP2 bitfield must be reset when reprogrammed from one value */
          /* to the other to reinitialize properly the auto-delayed mechanism */
          hhrtim->Instance->sTimerxRegs[TimerIdx].TIMxCR &= ~HRTIM_TIMCR_DELCMP2;
 8008096:	68fb      	ldr	r3, [r7, #12]
 8008098:	681a      	ldr	r2, [r3, #0]
 800809a:	68bb      	ldr	r3, [r7, #8]
 800809c:	3301      	adds	r3, #1
 800809e:	01db      	lsls	r3, r3, #7
 80080a0:	4413      	add	r3, r2
 80080a2:	681b      	ldr	r3, [r3, #0]
 80080a4:	68fa      	ldr	r2, [r7, #12]
 80080a6:	6811      	ldr	r1, [r2, #0]
 80080a8:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 80080ac:	68bb      	ldr	r3, [r7, #8]
 80080ae:	3301      	adds	r3, #1
 80080b0:	01db      	lsls	r3, r3, #7
 80080b2:	440b      	add	r3, r1
 80080b4:	601a      	str	r2, [r3, #0]
          hhrtim->Instance->sTimerxRegs[TimerIdx].TIMxCR |= pCompareCfg->AutoDelayedMode;
 80080b6:	68fb      	ldr	r3, [r7, #12]
 80080b8:	681a      	ldr	r2, [r3, #0]
 80080ba:	68bb      	ldr	r3, [r7, #8]
 80080bc:	3301      	adds	r3, #1
 80080be:	01db      	lsls	r3, r3, #7
 80080c0:	4413      	add	r3, r2
 80080c2:	681a      	ldr	r2, [r3, #0]
 80080c4:	683b      	ldr	r3, [r7, #0]
 80080c6:	685b      	ldr	r3, [r3, #4]
 80080c8:	68f9      	ldr	r1, [r7, #12]
 80080ca:	6809      	ldr	r1, [r1, #0]
 80080cc:	431a      	orrs	r2, r3
 80080ce:	68bb      	ldr	r3, [r7, #8]
 80080d0:	3301      	adds	r3, #1
 80080d2:	01db      	lsls	r3, r3, #7
 80080d4:	440b      	add	r3, r1
 80080d6:	601a      	str	r2, [r3, #0]

          /* Set the compare value for timeout compare unit (if any) */
          if (pCompareCfg->AutoDelayedMode == HRTIM_AUTODELAYEDMODE_AUTODELAYED_TIMEOUTCMP1)
 80080d8:	683b      	ldr	r3, [r7, #0]
 80080da:	685b      	ldr	r3, [r3, #4]
 80080dc:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80080e0:	d109      	bne.n	80080f6 <HAL_HRTIM_WaveformCompareConfig+0x182>
          {
            hhrtim->Instance->sTimerxRegs[TimerIdx].CMP1xR = pCompareCfg->AutoDelayedTimeout;
 80080e2:	68fb      	ldr	r3, [r7, #12]
 80080e4:	6819      	ldr	r1, [r3, #0]
 80080e6:	683b      	ldr	r3, [r7, #0]
 80080e8:	689a      	ldr	r2, [r3, #8]
 80080ea:	68bb      	ldr	r3, [r7, #8]
 80080ec:	01db      	lsls	r3, r3, #7
 80080ee:	440b      	add	r3, r1
 80080f0:	339c      	adds	r3, #156	; 0x9c
 80080f2:	601a      	str	r2, [r3, #0]
        else
        {
          /* Clear HRTIM_TIMxCR.DELCMP2 bitfield */
          MODIFY_REG(hhrtim->Instance->sTimerxRegs[TimerIdx].TIMxCR, HRTIM_TIMCR_DELCMP2, 0U);
        }
         break;
 80080f4:	e091      	b.n	800821a <HAL_HRTIM_WaveformCompareConfig+0x2a6>
          else if (pCompareCfg->AutoDelayedMode == HRTIM_AUTODELAYEDMODE_AUTODELAYED_TIMEOUTCMP3)
 80080f6:	683b      	ldr	r3, [r7, #0]
 80080f8:	685b      	ldr	r3, [r3, #4]
 80080fa:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 80080fe:	f040 808c 	bne.w	800821a <HAL_HRTIM_WaveformCompareConfig+0x2a6>
            hhrtim->Instance->sTimerxRegs[TimerIdx].CMP3xR = pCompareCfg->AutoDelayedTimeout;
 8008102:	68fb      	ldr	r3, [r7, #12]
 8008104:	6819      	ldr	r1, [r3, #0]
 8008106:	683b      	ldr	r3, [r7, #0]
 8008108:	689a      	ldr	r2, [r3, #8]
 800810a:	68bb      	ldr	r3, [r7, #8]
 800810c:	01db      	lsls	r3, r3, #7
 800810e:	440b      	add	r3, r1
 8008110:	33a8      	adds	r3, #168	; 0xa8
 8008112:	601a      	str	r2, [r3, #0]
         break;
 8008114:	e081      	b.n	800821a <HAL_HRTIM_WaveformCompareConfig+0x2a6>
          MODIFY_REG(hhrtim->Instance->sTimerxRegs[TimerIdx].TIMxCR, HRTIM_TIMCR_DELCMP2, 0U);
 8008116:	68fb      	ldr	r3, [r7, #12]
 8008118:	681a      	ldr	r2, [r3, #0]
 800811a:	68bb      	ldr	r3, [r7, #8]
 800811c:	3301      	adds	r3, #1
 800811e:	01db      	lsls	r3, r3, #7
 8008120:	4413      	add	r3, r2
 8008122:	681b      	ldr	r3, [r3, #0]
 8008124:	68fa      	ldr	r2, [r7, #12]
 8008126:	6811      	ldr	r1, [r2, #0]
 8008128:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 800812c:	68bb      	ldr	r3, [r7, #8]
 800812e:	3301      	adds	r3, #1
 8008130:	01db      	lsls	r3, r3, #7
 8008132:	440b      	add	r3, r1
 8008134:	601a      	str	r2, [r3, #0]
         break;
 8008136:	e070      	b.n	800821a <HAL_HRTIM_WaveformCompareConfig+0x2a6>
      }

    case HRTIM_COMPAREUNIT_3:
      {
        /* Set the compare value */
        hhrtim->Instance->sTimerxRegs[TimerIdx].CMP3xR = pCompareCfg->CompareValue;
 8008138:	68fb      	ldr	r3, [r7, #12]
 800813a:	6819      	ldr	r1, [r3, #0]
 800813c:	683b      	ldr	r3, [r7, #0]
 800813e:	681a      	ldr	r2, [r3, #0]
 8008140:	68bb      	ldr	r3, [r7, #8]
 8008142:	01db      	lsls	r3, r3, #7
 8008144:	440b      	add	r3, r1
 8008146:	33a8      	adds	r3, #168	; 0xa8
 8008148:	601a      	str	r2, [r3, #0]
        break;
 800814a:	e069      	b.n	8008220 <HAL_HRTIM_WaveformCompareConfig+0x2ac>
      {
        /* Check parameters */
        assert_param(IS_HRTIM_COMPAREUNIT_AUTODELAYEDMODE(CompareUnit, pCompareCfg->AutoDelayedMode));

        /* Set the compare value */
        hhrtim->Instance->sTimerxRegs[TimerIdx].CMP4xR = pCompareCfg->CompareValue;
 800814c:	68fb      	ldr	r3, [r7, #12]
 800814e:	6819      	ldr	r1, [r3, #0]
 8008150:	683b      	ldr	r3, [r7, #0]
 8008152:	681a      	ldr	r2, [r3, #0]
 8008154:	68bb      	ldr	r3, [r7, #8]
 8008156:	01db      	lsls	r3, r3, #7
 8008158:	440b      	add	r3, r1
 800815a:	33ac      	adds	r3, #172	; 0xac
 800815c:	601a      	str	r2, [r3, #0]

        if (pCompareCfg->AutoDelayedMode != HRTIM_AUTODELAYEDMODE_REGULAR)
 800815e:	683b      	ldr	r3, [r7, #0]
 8008160:	685b      	ldr	r3, [r3, #4]
 8008162:	2b00      	cmp	r3, #0
 8008164:	d03f      	beq.n	80081e6 <HAL_HRTIM_WaveformCompareConfig+0x272>
        {
          /* Configure auto-delayed mode */
          /* DELCMP4 bitfield must be reset when reprogrammed from one value */
          /* to the other to reinitialize properly the auto-delayed mechanism */
          hhrtim->Instance->sTimerxRegs[TimerIdx].TIMxCR &= ~HRTIM_TIMCR_DELCMP4;
 8008166:	68fb      	ldr	r3, [r7, #12]
 8008168:	681a      	ldr	r2, [r3, #0]
 800816a:	68bb      	ldr	r3, [r7, #8]
 800816c:	3301      	adds	r3, #1
 800816e:	01db      	lsls	r3, r3, #7
 8008170:	4413      	add	r3, r2
 8008172:	681b      	ldr	r3, [r3, #0]
 8008174:	68fa      	ldr	r2, [r7, #12]
 8008176:	6811      	ldr	r1, [r2, #0]
 8008178:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 800817c:	68bb      	ldr	r3, [r7, #8]
 800817e:	3301      	adds	r3, #1
 8008180:	01db      	lsls	r3, r3, #7
 8008182:	440b      	add	r3, r1
 8008184:	601a      	str	r2, [r3, #0]
          hhrtim->Instance->sTimerxRegs[TimerIdx].TIMxCR |= (pCompareCfg->AutoDelayedMode << 2U);
 8008186:	68fb      	ldr	r3, [r7, #12]
 8008188:	681a      	ldr	r2, [r3, #0]
 800818a:	68bb      	ldr	r3, [r7, #8]
 800818c:	3301      	adds	r3, #1
 800818e:	01db      	lsls	r3, r3, #7
 8008190:	4413      	add	r3, r2
 8008192:	681a      	ldr	r2, [r3, #0]
 8008194:	683b      	ldr	r3, [r7, #0]
 8008196:	685b      	ldr	r3, [r3, #4]
 8008198:	009b      	lsls	r3, r3, #2
 800819a:	68f9      	ldr	r1, [r7, #12]
 800819c:	6809      	ldr	r1, [r1, #0]
 800819e:	431a      	orrs	r2, r3
 80081a0:	68bb      	ldr	r3, [r7, #8]
 80081a2:	3301      	adds	r3, #1
 80081a4:	01db      	lsls	r3, r3, #7
 80081a6:	440b      	add	r3, r1
 80081a8:	601a      	str	r2, [r3, #0]

          /* Set the compare value for timeout compare unit (if any) */
          if (pCompareCfg->AutoDelayedMode == HRTIM_AUTODELAYEDMODE_AUTODELAYED_TIMEOUTCMP1)
 80081aa:	683b      	ldr	r3, [r7, #0]
 80081ac:	685b      	ldr	r3, [r3, #4]
 80081ae:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80081b2:	d109      	bne.n	80081c8 <HAL_HRTIM_WaveformCompareConfig+0x254>
          {
            hhrtim->Instance->sTimerxRegs[TimerIdx].CMP1xR = pCompareCfg->AutoDelayedTimeout;
 80081b4:	68fb      	ldr	r3, [r7, #12]
 80081b6:	6819      	ldr	r1, [r3, #0]
 80081b8:	683b      	ldr	r3, [r7, #0]
 80081ba:	689a      	ldr	r2, [r3, #8]
 80081bc:	68bb      	ldr	r3, [r7, #8]
 80081be:	01db      	lsls	r3, r3, #7
 80081c0:	440b      	add	r3, r1
 80081c2:	339c      	adds	r3, #156	; 0x9c
 80081c4:	601a      	str	r2, [r3, #0]
        else
        {
          /* Clear HRTIM_TIMxCR.DELCMP4 bitfield */
          MODIFY_REG(hhrtim->Instance->sTimerxRegs[TimerIdx].TIMxCR, HRTIM_TIMCR_DELCMP4, 0U);
        }
         break;
 80081c6:	e02a      	b.n	800821e <HAL_HRTIM_WaveformCompareConfig+0x2aa>
          else if (pCompareCfg->AutoDelayedMode == HRTIM_AUTODELAYEDMODE_AUTODELAYED_TIMEOUTCMP3)
 80081c8:	683b      	ldr	r3, [r7, #0]
 80081ca:	685b      	ldr	r3, [r3, #4]
 80081cc:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 80081d0:	d125      	bne.n	800821e <HAL_HRTIM_WaveformCompareConfig+0x2aa>
            hhrtim->Instance->sTimerxRegs[TimerIdx].CMP3xR = pCompareCfg->AutoDelayedTimeout;
 80081d2:	68fb      	ldr	r3, [r7, #12]
 80081d4:	6819      	ldr	r1, [r3, #0]
 80081d6:	683b      	ldr	r3, [r7, #0]
 80081d8:	689a      	ldr	r2, [r3, #8]
 80081da:	68bb      	ldr	r3, [r7, #8]
 80081dc:	01db      	lsls	r3, r3, #7
 80081de:	440b      	add	r3, r1
 80081e0:	33a8      	adds	r3, #168	; 0xa8
 80081e2:	601a      	str	r2, [r3, #0]
         break;
 80081e4:	e01b      	b.n	800821e <HAL_HRTIM_WaveformCompareConfig+0x2aa>
          MODIFY_REG(hhrtim->Instance->sTimerxRegs[TimerIdx].TIMxCR, HRTIM_TIMCR_DELCMP4, 0U);
 80081e6:	68fb      	ldr	r3, [r7, #12]
 80081e8:	681a      	ldr	r2, [r3, #0]
 80081ea:	68bb      	ldr	r3, [r7, #8]
 80081ec:	3301      	adds	r3, #1
 80081ee:	01db      	lsls	r3, r3, #7
 80081f0:	4413      	add	r3, r2
 80081f2:	681b      	ldr	r3, [r3, #0]
 80081f4:	68fa      	ldr	r2, [r7, #12]
 80081f6:	6811      	ldr	r1, [r2, #0]
 80081f8:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 80081fc:	68bb      	ldr	r3, [r7, #8]
 80081fe:	3301      	adds	r3, #1
 8008200:	01db      	lsls	r3, r3, #7
 8008202:	440b      	add	r3, r1
 8008204:	601a      	str	r2, [r3, #0]
         break;
 8008206:	e00a      	b.n	800821e <HAL_HRTIM_WaveformCompareConfig+0x2aa>
      }

  default:
     {
      hhrtim->State = HAL_HRTIM_STATE_ERROR;
 8008208:	68fb      	ldr	r3, [r7, #12]
 800820a:	2207      	movs	r2, #7
 800820c:	f883 20c1 	strb.w	r2, [r3, #193]	; 0xc1

      /* Process Unlocked */
      __HAL_UNLOCK(hhrtim);
 8008210:	68fb      	ldr	r3, [r7, #12]
 8008212:	2200      	movs	r2, #0
 8008214:	f883 20c0 	strb.w	r2, [r3, #192]	; 0xc0

      break;
 8008218:	e002      	b.n	8008220 <HAL_HRTIM_WaveformCompareConfig+0x2ac>
         break;
 800821a:	bf00      	nop
 800821c:	e000      	b.n	8008220 <HAL_HRTIM_WaveformCompareConfig+0x2ac>
         break;
 800821e:	bf00      	nop
     }
   }

   if(hhrtim->State == HAL_HRTIM_STATE_ERROR)
 8008220:	68fb      	ldr	r3, [r7, #12]
 8008222:	f893 30c1 	ldrb.w	r3, [r3, #193]	; 0xc1
 8008226:	b2db      	uxtb	r3, r3
 8008228:	2b07      	cmp	r3, #7
 800822a:	d101      	bne.n	8008230 <HAL_HRTIM_WaveformCompareConfig+0x2bc>
   {
     return HAL_ERROR;
 800822c:	2301      	movs	r3, #1
 800822e:	e008      	b.n	8008242 <HAL_HRTIM_WaveformCompareConfig+0x2ce>
   }

  }
  hhrtim->State = HAL_HRTIM_STATE_READY;
 8008230:	68fb      	ldr	r3, [r7, #12]
 8008232:	2201      	movs	r2, #1
 8008234:	f883 20c1 	strb.w	r2, [r3, #193]	; 0xc1

  /* Process Unlocked */
  __HAL_UNLOCK(hhrtim);
 8008238:	68fb      	ldr	r3, [r7, #12]
 800823a:	2200      	movs	r2, #0
 800823c:	f883 20c0 	strb.w	r2, [r3, #192]	; 0xc0

  return HAL_OK;
 8008240:	2300      	movs	r3, #0
}
 8008242:	4618      	mov	r0, r3
 8008244:	3714      	adds	r7, #20
 8008246:	46bd      	mov	sp, r7
 8008248:	f85d 7b04 	ldr.w	r7, [sp], #4
 800824c:	4770      	bx	lr
 800824e:	bf00      	nop

08008250 <HAL_HRTIM_WaveformOutputConfig>:
  */
HAL_StatusTypeDef HAL_HRTIM_WaveformOutputConfig(HRTIM_HandleTypeDef * hhrtim,
                                                uint32_t TimerIdx,
                                                uint32_t Output,
                                                const HRTIM_OutputCfgTypeDef * pOutputCfg)
{
 8008250:	b580      	push	{r7, lr}
 8008252:	b084      	sub	sp, #16
 8008254:	af00      	add	r7, sp, #0
 8008256:	60f8      	str	r0, [r7, #12]
 8008258:	60b9      	str	r1, [r7, #8]
 800825a:	607a      	str	r2, [r7, #4]
 800825c:	603b      	str	r3, [r7, #0]
  assert_param(IS_HRTIM_OUTPUTIDLEMODE(pOutputCfg->IdleMode));
  assert_param(IS_HRTIM_OUTPUTFAULTLEVEL(pOutputCfg->FaultLevel));
  assert_param(IS_HRTIM_OUTPUTCHOPPERMODE(pOutputCfg->ChopperModeEnable));
  assert_param(IS_HRTIM_OUTPUTBURSTMODEENTRY(pOutputCfg->BurstModeEntryDelayed));

  if(hhrtim->State == HAL_HRTIM_STATE_BUSY)
 800825e:	68fb      	ldr	r3, [r7, #12]
 8008260:	f893 30c1 	ldrb.w	r3, [r3, #193]	; 0xc1
 8008264:	b2db      	uxtb	r3, r3
 8008266:	2b02      	cmp	r3, #2
 8008268:	d101      	bne.n	800826e <HAL_HRTIM_WaveformOutputConfig+0x1e>
  {
     return HAL_BUSY;
 800826a:	2302      	movs	r3, #2
 800826c:	e01d      	b.n	80082aa <HAL_HRTIM_WaveformOutputConfig+0x5a>
  }

  /* Process Locked */
  __HAL_LOCK(hhrtim);
 800826e:	68fb      	ldr	r3, [r7, #12]
 8008270:	f893 30c0 	ldrb.w	r3, [r3, #192]	; 0xc0
 8008274:	2b01      	cmp	r3, #1
 8008276:	d101      	bne.n	800827c <HAL_HRTIM_WaveformOutputConfig+0x2c>
 8008278:	2302      	movs	r3, #2
 800827a:	e016      	b.n	80082aa <HAL_HRTIM_WaveformOutputConfig+0x5a>
 800827c:	68fb      	ldr	r3, [r7, #12]
 800827e:	2201      	movs	r2, #1
 8008280:	f883 20c0 	strb.w	r2, [r3, #192]	; 0xc0

  hhrtim->State = HAL_HRTIM_STATE_BUSY;
 8008284:	68fb      	ldr	r3, [r7, #12]
 8008286:	2202      	movs	r2, #2
 8008288:	f883 20c1 	strb.w	r2, [r3, #193]	; 0xc1

  /* Configure the timer output */
  HRTIM_OutputConfig(hhrtim,
 800828c:	683b      	ldr	r3, [r7, #0]
 800828e:	687a      	ldr	r2, [r7, #4]
 8008290:	68b9      	ldr	r1, [r7, #8]
 8008292:	68f8      	ldr	r0, [r7, #12]
 8008294:	f000 fbd2 	bl	8008a3c <HRTIM_OutputConfig>
                     TimerIdx,
                     Output,
                     pOutputCfg);

  hhrtim->State = HAL_HRTIM_STATE_READY;
 8008298:	68fb      	ldr	r3, [r7, #12]
 800829a:	2201      	movs	r2, #1
 800829c:	f883 20c1 	strb.w	r2, [r3, #193]	; 0xc1

  /* Process Unlocked */
  __HAL_UNLOCK(hhrtim);
 80082a0:	68fb      	ldr	r3, [r7, #12]
 80082a2:	2200      	movs	r2, #0
 80082a4:	f883 20c0 	strb.w	r2, [r3, #192]	; 0xc0

  return HAL_OK;
 80082a8:	2300      	movs	r3, #0
}
 80082aa:	4618      	mov	r0, r3
 80082ac:	3710      	adds	r7, #16
 80082ae:	46bd      	mov	sp, r7
 80082b0:	bd80      	pop	{r7, pc}

080082b2 <HAL_HRTIM_WaveformOutputStop>:
  *                    @arg HRTIM_OUTPUT_TE2: Timer E - Output 2
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HRTIM_WaveformOutputStop(HRTIM_HandleTypeDef * hhrtim,
                                               uint32_t OutputsToStop)
{
 80082b2:	b480      	push	{r7}
 80082b4:	b083      	sub	sp, #12
 80082b6:	af00      	add	r7, sp, #0
 80082b8:	6078      	str	r0, [r7, #4]
 80082ba:	6039      	str	r1, [r7, #0]
   /* Check the parameters */
  assert_param(IS_HRTIM_OUTPUT(OutputsToStop));

  /* Process Locked */
  __HAL_LOCK(hhrtim);
 80082bc:	687b      	ldr	r3, [r7, #4]
 80082be:	f893 30c0 	ldrb.w	r3, [r3, #192]	; 0xc0
 80082c2:	2b01      	cmp	r3, #1
 80082c4:	d101      	bne.n	80082ca <HAL_HRTIM_WaveformOutputStop+0x18>
 80082c6:	2302      	movs	r3, #2
 80082c8:	e01a      	b.n	8008300 <HAL_HRTIM_WaveformOutputStop+0x4e>
 80082ca:	687b      	ldr	r3, [r7, #4]
 80082cc:	2201      	movs	r2, #1
 80082ce:	f883 20c0 	strb.w	r2, [r3, #192]	; 0xc0

  hhrtim->State = HAL_HRTIM_STATE_BUSY;
 80082d2:	687b      	ldr	r3, [r7, #4]
 80082d4:	2202      	movs	r2, #2
 80082d6:	f883 20c1 	strb.w	r2, [r3, #193]	; 0xc1

  /* Enable the HRTIM outputs */
  hhrtim->Instance->sCommonRegs.ODISR |= (OutputsToStop);
 80082da:	687b      	ldr	r3, [r7, #4]
 80082dc:	681b      	ldr	r3, [r3, #0]
 80082de:	f8d3 1398 	ldr.w	r1, [r3, #920]	; 0x398
 80082e2:	687b      	ldr	r3, [r7, #4]
 80082e4:	681b      	ldr	r3, [r3, #0]
 80082e6:	683a      	ldr	r2, [r7, #0]
 80082e8:	430a      	orrs	r2, r1
 80082ea:	f8c3 2398 	str.w	r2, [r3, #920]	; 0x398

  hhrtim->State = HAL_HRTIM_STATE_READY;
 80082ee:	687b      	ldr	r3, [r7, #4]
 80082f0:	2201      	movs	r2, #1
 80082f2:	f883 20c1 	strb.w	r2, [r3, #193]	; 0xc1

  /* Process Unlocked */
  __HAL_UNLOCK(hhrtim);
 80082f6:	687b      	ldr	r3, [r7, #4]
 80082f8:	2200      	movs	r2, #0
 80082fa:	f883 20c0 	strb.w	r2, [r3, #192]	; 0xc0

  return HAL_OK;
 80082fe:	2300      	movs	r3, #0
}
 8008300:	4618      	mov	r0, r3
 8008302:	370c      	adds	r7, #12
 8008304:	46bd      	mov	sp, r7
 8008306:	f85d 7b04 	ldr.w	r7, [sp], #4
 800830a:	4770      	bx	lr

0800830c <HAL_HRTIM_WaveformCountStop_IT>:
  * @note The counter of a timer is stopped only if all timer outputs are disabled
  * @note All enabled timer related interrupts are disabled.
  */
HAL_StatusTypeDef HAL_HRTIM_WaveformCountStop_IT(HRTIM_HandleTypeDef * hhrtim,
                                                   uint32_t Timers)
{
 800830c:	b480      	push	{r7}
 800830e:	b085      	sub	sp, #20
 8008310:	af00      	add	r7, sp, #0
 8008312:	6078      	str	r0, [r7, #4]
 8008314:	6039      	str	r1, [r7, #0]
  /* ++ WA */
  __IO uint32_t delai = (uint32_t)(0x17FU);
 8008316:	f240 137f 	movw	r3, #383	; 0x17f
 800831a:	60bb      	str	r3, [r7, #8]

  /* Check the parameters */
  assert_param(IS_HRTIM_TIMERID(Timers));

  /* Process Locked */
  __HAL_LOCK(hhrtim);
 800831c:	687b      	ldr	r3, [r7, #4]
 800831e:	f893 30c0 	ldrb.w	r3, [r3, #192]	; 0xc0
 8008322:	2b01      	cmp	r3, #1
 8008324:	d101      	bne.n	800832a <HAL_HRTIM_WaveformCountStop_IT+0x1e>
 8008326:	2302      	movs	r3, #2
 8008328:	e065      	b.n	80083f6 <HAL_HRTIM_WaveformCountStop_IT+0xea>
 800832a:	687b      	ldr	r3, [r7, #4]
 800832c:	2201      	movs	r2, #1
 800832e:	f883 20c0 	strb.w	r2, [r3, #192]	; 0xc0

  hhrtim->State = HAL_HRTIM_STATE_BUSY;
 8008332:	687b      	ldr	r3, [r7, #4]
 8008334:	2202      	movs	r2, #2
 8008336:	f883 20c1 	strb.w	r2, [r3, #193]	; 0xc1

  /* Disable HRTIM interrupts (if required) */
  __HAL_HRTIM_DISABLE_IT(hhrtim, hhrtim->Init.HRTIMInterruptResquests);
 800833a:	687b      	ldr	r3, [r7, #4]
 800833c:	681b      	ldr	r3, [r3, #0]
 800833e:	f8d3 1390 	ldr.w	r1, [r3, #912]	; 0x390
 8008342:	687b      	ldr	r3, [r7, #4]
 8008344:	685b      	ldr	r3, [r3, #4]
 8008346:	43da      	mvns	r2, r3
 8008348:	687b      	ldr	r3, [r7, #4]
 800834a:	681b      	ldr	r3, [r3, #0]
 800834c:	400a      	ands	r2, r1
 800834e:	f8c3 2390 	str.w	r2, [r3, #912]	; 0x390

  /* Disable master timer related interrupts (if required) */
  if ((Timers & HRTIM_TIMERID_MASTER) != 0U)
 8008352:	683b      	ldr	r3, [r7, #0]
 8008354:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8008358:	2b00      	cmp	r3, #0
 800835a:	d00a      	beq.n	8008372 <HAL_HRTIM_WaveformCountStop_IT+0x66>
  {
    /* Interrupts enable flag must be cleared one by one */
    __HAL_HRTIM_MASTER_DISABLE_IT(hhrtim, hhrtim->TimerParam[HRTIM_TIMERINDEX_MASTER].InterruptRequests);
 800835c:	687b      	ldr	r3, [r7, #4]
 800835e:	681b      	ldr	r3, [r3, #0]
 8008360:	68d9      	ldr	r1, [r3, #12]
 8008362:	687b      	ldr	r3, [r7, #4]
 8008364:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 8008368:	43da      	mvns	r2, r3
 800836a:	687b      	ldr	r3, [r7, #4]
 800836c:	681b      	ldr	r3, [r3, #0]
 800836e:	400a      	ands	r2, r1
 8008370:	60da      	str	r2, [r3, #12]
  }

  /* Disable timing unit related interrupts (if required) */
  for (timer_idx = HRTIM_TIMERINDEX_TIMER_A ;
 8008372:	2300      	movs	r3, #0
 8008374:	73fb      	strb	r3, [r7, #15]
 8008376:	e023      	b.n	80083c0 <HAL_HRTIM_WaveformCountStop_IT+0xb4>
       timer_idx < HRTIM_TIMERINDEX_MASTER ;
       timer_idx++)
  {
    if ((Timers & TimerIdxToTimerId[timer_idx]) != 0U)
 8008378:	7bfb      	ldrb	r3, [r7, #15]
 800837a:	4a22      	ldr	r2, [pc, #136]	; (8008404 <HAL_HRTIM_WaveformCountStop_IT+0xf8>)
 800837c:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8008380:	683b      	ldr	r3, [r7, #0]
 8008382:	4013      	ands	r3, r2
 8008384:	2b00      	cmp	r3, #0
 8008386:	d018      	beq.n	80083ba <HAL_HRTIM_WaveformCountStop_IT+0xae>
    {
      __HAL_HRTIM_TIMER_DISABLE_IT(hhrtim, timer_idx, hhrtim->TimerParam[timer_idx].InterruptRequests);
 8008388:	687b      	ldr	r3, [r7, #4]
 800838a:	681a      	ldr	r2, [r3, #0]
 800838c:	7bfb      	ldrb	r3, [r7, #15]
 800838e:	01db      	lsls	r3, r3, #7
 8008390:	4413      	add	r3, r2
 8008392:	338c      	adds	r3, #140	; 0x8c
 8008394:	6818      	ldr	r0, [r3, #0]
 8008396:	7bfa      	ldrb	r2, [r7, #15]
 8008398:	6879      	ldr	r1, [r7, #4]
 800839a:	4613      	mov	r3, r2
 800839c:	00db      	lsls	r3, r3, #3
 800839e:	1a9b      	subs	r3, r3, r2
 80083a0:	009b      	lsls	r3, r3, #2
 80083a2:	440b      	add	r3, r1
 80083a4:	3320      	adds	r3, #32
 80083a6:	681b      	ldr	r3, [r3, #0]
 80083a8:	43da      	mvns	r2, r3
 80083aa:	687b      	ldr	r3, [r7, #4]
 80083ac:	6819      	ldr	r1, [r3, #0]
 80083ae:	7bfb      	ldrb	r3, [r7, #15]
 80083b0:	4002      	ands	r2, r0
 80083b2:	01db      	lsls	r3, r3, #7
 80083b4:	440b      	add	r3, r1
 80083b6:	338c      	adds	r3, #140	; 0x8c
 80083b8:	601a      	str	r2, [r3, #0]
       timer_idx++)
 80083ba:	7bfb      	ldrb	r3, [r7, #15]
 80083bc:	3301      	adds	r3, #1
 80083be:	73fb      	strb	r3, [r7, #15]
       timer_idx < HRTIM_TIMERINDEX_MASTER ;
 80083c0:	7bfb      	ldrb	r3, [r7, #15]
 80083c2:	2b04      	cmp	r3, #4
 80083c4:	d9d8      	bls.n	8008378 <HAL_HRTIM_WaveformCountStop_IT+0x6c>
    }
  }

  /* ++ WA */
  do { delai--; } while (delai != 0U);
 80083c6:	68bb      	ldr	r3, [r7, #8]
 80083c8:	3b01      	subs	r3, #1
 80083ca:	60bb      	str	r3, [r7, #8]
 80083cc:	68bb      	ldr	r3, [r7, #8]
 80083ce:	2b00      	cmp	r3, #0
 80083d0:	d1f9      	bne.n	80083c6 <HAL_HRTIM_WaveformCountStop_IT+0xba>
  /* -- WA */

  /* Disable timer(s) counter */
  hhrtim->Instance->sMasterRegs.MCR &= ~(Timers);
 80083d2:	687b      	ldr	r3, [r7, #4]
 80083d4:	681b      	ldr	r3, [r3, #0]
 80083d6:	6819      	ldr	r1, [r3, #0]
 80083d8:	683b      	ldr	r3, [r7, #0]
 80083da:	43da      	mvns	r2, r3
 80083dc:	687b      	ldr	r3, [r7, #4]
 80083de:	681b      	ldr	r3, [r3, #0]
 80083e0:	400a      	ands	r2, r1
 80083e2:	601a      	str	r2, [r3, #0]

  hhrtim->State = HAL_HRTIM_STATE_READY;
 80083e4:	687b      	ldr	r3, [r7, #4]
 80083e6:	2201      	movs	r2, #1
 80083e8:	f883 20c1 	strb.w	r2, [r3, #193]	; 0xc1

  /* Process Unlocked */
  __HAL_UNLOCK(hhrtim);
 80083ec:	687b      	ldr	r3, [r7, #4]
 80083ee:	2200      	movs	r2, #0
 80083f0:	f883 20c0 	strb.w	r2, [r3, #192]	; 0xc0

  return HAL_OK;
 80083f4:	2300      	movs	r3, #0
}
 80083f6:	4618      	mov	r0, r3
 80083f8:	3714      	adds	r7, #20
 80083fa:	46bd      	mov	sp, r7
 80083fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008400:	4770      	bx	lr
 8008402:	bf00      	nop
 8008404:	2000002c 	.word	0x2000002c

08008408 <HAL_HRTIM_IRQHandler>:
  *                   This parameter can be any value of HRTIM_Timer_Index
  * @retval None
  */
void HAL_HRTIM_IRQHandler(HRTIM_HandleTypeDef * hhrtim,
                          uint32_t TimerIdx)
{
 8008408:	b580      	push	{r7, lr}
 800840a:	b082      	sub	sp, #8
 800840c:	af00      	add	r7, sp, #0
 800840e:	6078      	str	r0, [r7, #4]
 8008410:	6039      	str	r1, [r7, #0]
  /* HRTIM interrupts handling */
  if (TimerIdx == HRTIM_TIMERINDEX_COMMON)
 8008412:	683b      	ldr	r3, [r7, #0]
 8008414:	2bff      	cmp	r3, #255	; 0xff
 8008416:	d103      	bne.n	8008420 <HAL_HRTIM_IRQHandler+0x18>
  {
    HRTIM_HRTIM_ISR(hhrtim);
 8008418:	6878      	ldr	r0, [r7, #4]
 800841a:	f000 fc49 	bl	8008cb0 <HRTIM_HRTIM_ISR>
  {
    /* Timing unit related interrupts handling */
    HRTIM_Timer_ISR(hhrtim, TimerIdx);
  }

}
 800841e:	e00a      	b.n	8008436 <HAL_HRTIM_IRQHandler+0x2e>
  else if (TimerIdx == HRTIM_TIMERINDEX_MASTER)
 8008420:	683b      	ldr	r3, [r7, #0]
 8008422:	2b05      	cmp	r3, #5
 8008424:	d103      	bne.n	800842e <HAL_HRTIM_IRQHandler+0x26>
    HRTIM_Master_ISR(hhrtim);
 8008426:	6878      	ldr	r0, [r7, #4]
 8008428:	f000 fcc0 	bl	8008dac <HRTIM_Master_ISR>
}
 800842c:	e003      	b.n	8008436 <HAL_HRTIM_IRQHandler+0x2e>
    HRTIM_Timer_ISR(hhrtim, TimerIdx);
 800842e:	6839      	ldr	r1, [r7, #0]
 8008430:	6878      	ldr	r0, [r7, #4]
 8008432:	f000 fd65 	bl	8008f00 <HRTIM_Timer_ISR>
}
 8008436:	bf00      	nop
 8008438:	3708      	adds	r7, #8
 800843a:	46bd      	mov	sp, r7
 800843c:	bd80      	pop	{r7, pc}

0800843e <HAL_HRTIM_Fault1Callback>:
  * @brief  Callback function invoked when a fault 1 interrupt occurred
  * @param  hhrtim pointer to HAL HRTIM handle  * @retval None
  * @retval None
  */
__weak void HAL_HRTIM_Fault1Callback(HRTIM_HandleTypeDef * hhrtim)
{
 800843e:	b480      	push	{r7}
 8008440:	b083      	sub	sp, #12
 8008442:	af00      	add	r7, sp, #0
 8008444:	6078      	str	r0, [r7, #4]
  UNUSED(hhrtim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_HRTIM_Fault1Callback could be implemented in the user file
   */
}
 8008446:	bf00      	nop
 8008448:	370c      	adds	r7, #12
 800844a:	46bd      	mov	sp, r7
 800844c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008450:	4770      	bx	lr

08008452 <HAL_HRTIM_Fault2Callback>:
  * @brief  Callback function invoked when a fault 2 interrupt occurred
  * @param  hhrtim pointer to HAL HRTIM handle
  * @retval None
  */
__weak void HAL_HRTIM_Fault2Callback(HRTIM_HandleTypeDef * hhrtim)
{
 8008452:	b480      	push	{r7}
 8008454:	b083      	sub	sp, #12
 8008456:	af00      	add	r7, sp, #0
 8008458:	6078      	str	r0, [r7, #4]
  UNUSED(hhrtim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_HRTIM_Fault2Callback could be implemented in the user file
   */
}
 800845a:	bf00      	nop
 800845c:	370c      	adds	r7, #12
 800845e:	46bd      	mov	sp, r7
 8008460:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008464:	4770      	bx	lr

08008466 <HAL_HRTIM_Fault3Callback>:
  * @brief  Callback function invoked when a fault 3 interrupt occurred
  * @param  hhrtim pointer to HAL HRTIM handle
  * @retval None
  */
__weak void HAL_HRTIM_Fault3Callback(HRTIM_HandleTypeDef * hhrtim)
{
 8008466:	b480      	push	{r7}
 8008468:	b083      	sub	sp, #12
 800846a:	af00      	add	r7, sp, #0
 800846c:	6078      	str	r0, [r7, #4]
  UNUSED(hhrtim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_HRTIM_Fault3Callback could be implemented in the user file
   */
}
 800846e:	bf00      	nop
 8008470:	370c      	adds	r7, #12
 8008472:	46bd      	mov	sp, r7
 8008474:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008478:	4770      	bx	lr

0800847a <HAL_HRTIM_Fault4Callback>:
  * @brief  Callback function invoked when a fault 4 interrupt occurred
  * @param  hhrtim pointer to HAL HRTIM handle
  * @retval None
  */
__weak void HAL_HRTIM_Fault4Callback(HRTIM_HandleTypeDef * hhrtim)
{
 800847a:	b480      	push	{r7}
 800847c:	b083      	sub	sp, #12
 800847e:	af00      	add	r7, sp, #0
 8008480:	6078      	str	r0, [r7, #4]
  UNUSED(hhrtim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_HRTIM_Fault4Callback could be implemented in the user file
   */
}
 8008482:	bf00      	nop
 8008484:	370c      	adds	r7, #12
 8008486:	46bd      	mov	sp, r7
 8008488:	f85d 7b04 	ldr.w	r7, [sp], #4
 800848c:	4770      	bx	lr

0800848e <HAL_HRTIM_Fault5Callback>:
  * @brief  Callback function invoked when a fault 5 interrupt occurred
  * @param  hhrtim pointer to HAL HRTIM handle
  * @retval None
  */
__weak void HAL_HRTIM_Fault5Callback(HRTIM_HandleTypeDef * hhrtim)
{
 800848e:	b480      	push	{r7}
 8008490:	b083      	sub	sp, #12
 8008492:	af00      	add	r7, sp, #0
 8008494:	6078      	str	r0, [r7, #4]
  UNUSED(hhrtim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_HRTIM_Fault5Callback could be implemented in the user file
   */
}
 8008496:	bf00      	nop
 8008498:	370c      	adds	r7, #12
 800849a:	46bd      	mov	sp, r7
 800849c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80084a0:	4770      	bx	lr

080084a2 <HAL_HRTIM_SystemFaultCallback>:
  * @brief  Callback function invoked when a system fault interrupt occurred
  * @param  hhrtim pointer to HAL HRTIM handle
  * @retval None
  */
__weak void HAL_HRTIM_SystemFaultCallback(HRTIM_HandleTypeDef * hhrtim)
{
 80084a2:	b480      	push	{r7}
 80084a4:	b083      	sub	sp, #12
 80084a6:	af00      	add	r7, sp, #0
 80084a8:	6078      	str	r0, [r7, #4]
  UNUSED(hhrtim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_HRTIM_SystemFaultCallback could be implemented in the user file
   */
}
 80084aa:	bf00      	nop
 80084ac:	370c      	adds	r7, #12
 80084ae:	46bd      	mov	sp, r7
 80084b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80084b4:	4770      	bx	lr

080084b6 <HAL_HRTIM_BurstModePeriodCallback>:
  * @brief  Callback function invoked when the end of the burst mode period is reached
  * @param  hhrtim pointer to HAL HRTIM handle
  * @retval None
  */
__weak void HAL_HRTIM_BurstModePeriodCallback(HRTIM_HandleTypeDef * hhrtim)
{
 80084b6:	b480      	push	{r7}
 80084b8:	b083      	sub	sp, #12
 80084ba:	af00      	add	r7, sp, #0
 80084bc:	6078      	str	r0, [r7, #4]
  UNUSED(hhrtim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_HRTIM_BurstModeCallback could be implemented in the user file
   */
}
 80084be:	bf00      	nop
 80084c0:	370c      	adds	r7, #12
 80084c2:	46bd      	mov	sp, r7
 80084c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80084c8:	4770      	bx	lr

080084ca <HAL_HRTIM_SynchronizationEventCallback>:
  * @brief  Callback function invoked when a synchronization input event is received
  * @param  hhrtim pointer to HAL HRTIM handle
  * @retval None
  */
__weak void HAL_HRTIM_SynchronizationEventCallback(HRTIM_HandleTypeDef * hhrtim)
{
 80084ca:	b480      	push	{r7}
 80084cc:	b083      	sub	sp, #12
 80084ce:	af00      	add	r7, sp, #0
 80084d0:	6078      	str	r0, [r7, #4]
  UNUSED(hhrtim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_HRTIM_SynchronizationEventCallback could be implemented in the user file
   */
}
 80084d2:	bf00      	nop
 80084d4:	370c      	adds	r7, #12
 80084d6:	46bd      	mov	sp, r7
 80084d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80084dc:	4770      	bx	lr

080084de <HAL_HRTIM_RegistersUpdateCallback>:
  *                   @arg HRTIM_TIMERINDEX_TIMER_E for timer E
  * @retval None
  */
__weak void HAL_HRTIM_RegistersUpdateCallback(HRTIM_HandleTypeDef * hhrtim,
                                              uint32_t TimerIdx)
{
 80084de:	b480      	push	{r7}
 80084e0:	b083      	sub	sp, #12
 80084e2:	af00      	add	r7, sp, #0
 80084e4:	6078      	str	r0, [r7, #4]
 80084e6:	6039      	str	r1, [r7, #0]
  UNUSED(TimerIdx);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_HRTIM_Master_RegistersUpdateCallback could be implemented in the user file
   */
}
 80084e8:	bf00      	nop
 80084ea:	370c      	adds	r7, #12
 80084ec:	46bd      	mov	sp, r7
 80084ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80084f2:	4770      	bx	lr

080084f4 <HAL_HRTIM_RepetitionEventCallback>:
  *                   @arg HRTIM_TIMERINDEX_TIMER_E for timer E
  * @retval None
  */
__weak void HAL_HRTIM_RepetitionEventCallback(HRTIM_HandleTypeDef * hhrtim,
                                              uint32_t TimerIdx)
{
 80084f4:	b480      	push	{r7}
 80084f6:	b083      	sub	sp, #12
 80084f8:	af00      	add	r7, sp, #0
 80084fa:	6078      	str	r0, [r7, #4]
 80084fc:	6039      	str	r1, [r7, #0]
  UNUSED(TimerIdx);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_HRTIM_Master_RepetitionEventCallback could be implemented in the user file
   */
}
 80084fe:	bf00      	nop
 8008500:	370c      	adds	r7, #12
 8008502:	46bd      	mov	sp, r7
 8008504:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008508:	4770      	bx	lr

0800850a <HAL_HRTIM_Compare1EventCallback>:
  *                   @arg HRTIM_TIMERINDEX_TIMER_E for timer E
  * @retval None
  */
__weak void HAL_HRTIM_Compare1EventCallback(HRTIM_HandleTypeDef * hhrtim,
                                              uint32_t TimerIdx)
{
 800850a:	b480      	push	{r7}
 800850c:	b083      	sub	sp, #12
 800850e:	af00      	add	r7, sp, #0
 8008510:	6078      	str	r0, [r7, #4]
 8008512:	6039      	str	r1, [r7, #0]
  UNUSED(TimerIdx);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_HRTIM_Master_Compare1EventCallback could be implemented in the user file
   */
}
 8008514:	bf00      	nop
 8008516:	370c      	adds	r7, #12
 8008518:	46bd      	mov	sp, r7
 800851a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800851e:	4770      	bx	lr

08008520 <HAL_HRTIM_Compare2EventCallback>:
  *                   @arg HRTIM_TIMERINDEX_TIMER_D for timer D
  *                   @arg HRTIM_TIMERINDEX_TIMER_E for timer E
  */
__weak void HAL_HRTIM_Compare2EventCallback(HRTIM_HandleTypeDef * hhrtim,
                                              uint32_t TimerIdx)
{
 8008520:	b480      	push	{r7}
 8008522:	b083      	sub	sp, #12
 8008524:	af00      	add	r7, sp, #0
 8008526:	6078      	str	r0, [r7, #4]
 8008528:	6039      	str	r1, [r7, #0]
  UNUSED(TimerIdx);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_HRTIM_Master_Compare2EventCallback could be implemented in the user file
   */
}
 800852a:	bf00      	nop
 800852c:	370c      	adds	r7, #12
 800852e:	46bd      	mov	sp, r7
 8008530:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008534:	4770      	bx	lr

08008536 <HAL_HRTIM_Compare3EventCallback>:
  *                   @arg HRTIM_TIMERINDEX_TIMER_E for timer E
  * @retval None
  */
__weak void HAL_HRTIM_Compare3EventCallback(HRTIM_HandleTypeDef * hhrtim,
                                              uint32_t TimerIdx)
{
 8008536:	b480      	push	{r7}
 8008538:	b083      	sub	sp, #12
 800853a:	af00      	add	r7, sp, #0
 800853c:	6078      	str	r0, [r7, #4]
 800853e:	6039      	str	r1, [r7, #0]
  UNUSED(TimerIdx);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_HRTIM_Master_Compare3EventCallback could be implemented in the user file
   */
}
 8008540:	bf00      	nop
 8008542:	370c      	adds	r7, #12
 8008544:	46bd      	mov	sp, r7
 8008546:	f85d 7b04 	ldr.w	r7, [sp], #4
 800854a:	4770      	bx	lr

0800854c <HAL_HRTIM_Compare4EventCallback>:
  *                   @arg HRTIM_TIMERINDEX_TIMER_E for timer E
  * @retval None
  */
__weak void HAL_HRTIM_Compare4EventCallback(HRTIM_HandleTypeDef * hhrtim,
                                              uint32_t TimerIdx)
{
 800854c:	b480      	push	{r7}
 800854e:	b083      	sub	sp, #12
 8008550:	af00      	add	r7, sp, #0
 8008552:	6078      	str	r0, [r7, #4]
 8008554:	6039      	str	r1, [r7, #0]
  UNUSED(TimerIdx);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_HRTIM_Master_Compare4EventCallback could be implemented in the user file
   */
}
 8008556:	bf00      	nop
 8008558:	370c      	adds	r7, #12
 800855a:	46bd      	mov	sp, r7
 800855c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008560:	4770      	bx	lr

08008562 <HAL_HRTIM_Capture1EventCallback>:
  *                   @arg HRTIM_TIMERINDEX_TIMER_E for timer E
  * @retval None
  */
__weak void HAL_HRTIM_Capture1EventCallback(HRTIM_HandleTypeDef * hhrtim,
                                              uint32_t TimerIdx)
{
 8008562:	b480      	push	{r7}
 8008564:	b083      	sub	sp, #12
 8008566:	af00      	add	r7, sp, #0
 8008568:	6078      	str	r0, [r7, #4]
 800856a:	6039      	str	r1, [r7, #0]
  UNUSED(TimerIdx);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_HRTIM_Timer_Capture1EventCallback could be implemented in the user file
   */
}
 800856c:	bf00      	nop
 800856e:	370c      	adds	r7, #12
 8008570:	46bd      	mov	sp, r7
 8008572:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008576:	4770      	bx	lr

08008578 <HAL_HRTIM_Capture2EventCallback>:
  *                   @arg HRTIM_TIMERINDEX_TIMER_E for timer E
  * @retval None
  */
__weak void HAL_HRTIM_Capture2EventCallback(HRTIM_HandleTypeDef * hhrtim,
                                              uint32_t TimerIdx)
{
 8008578:	b480      	push	{r7}
 800857a:	b083      	sub	sp, #12
 800857c:	af00      	add	r7, sp, #0
 800857e:	6078      	str	r0, [r7, #4]
 8008580:	6039      	str	r1, [r7, #0]
  UNUSED(TimerIdx);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_HRTIM_Timer_Capture2EventCallback could be implemented in the user file
   */
}
 8008582:	bf00      	nop
 8008584:	370c      	adds	r7, #12
 8008586:	46bd      	mov	sp, r7
 8008588:	f85d 7b04 	ldr.w	r7, [sp], #4
 800858c:	4770      	bx	lr

0800858e <HAL_HRTIM_DelayedProtectionCallback>:
  *                   @arg HRTIM_TIMERINDEX_TIMER_E for timer E
  * @retval None
  */
__weak void HAL_HRTIM_DelayedProtectionCallback(HRTIM_HandleTypeDef * hhrtim,
                                              uint32_t TimerIdx)
{
 800858e:	b480      	push	{r7}
 8008590:	b083      	sub	sp, #12
 8008592:	af00      	add	r7, sp, #0
 8008594:	6078      	str	r0, [r7, #4]
 8008596:	6039      	str	r1, [r7, #0]
  UNUSED(TimerIdx);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_HRTIM_Timer_DelayedProtectionCallback could be implemented in the user file
   */
}
 8008598:	bf00      	nop
 800859a:	370c      	adds	r7, #12
 800859c:	46bd      	mov	sp, r7
 800859e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80085a2:	4770      	bx	lr

080085a4 <HAL_HRTIM_CounterResetCallback>:
  *                   @arg HRTIM_TIMERINDEX_TIMER_E for timer E
  * @retval None
  */
__weak void HAL_HRTIM_CounterResetCallback(HRTIM_HandleTypeDef * hhrtim,
                                              uint32_t TimerIdx)
{
 80085a4:	b480      	push	{r7}
 80085a6:	b083      	sub	sp, #12
 80085a8:	af00      	add	r7, sp, #0
 80085aa:	6078      	str	r0, [r7, #4]
 80085ac:	6039      	str	r1, [r7, #0]
  UNUSED(TimerIdx);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_HRTIM_Timer_CounterResetCallback could be implemented in the user file
   */
}
 80085ae:	bf00      	nop
 80085b0:	370c      	adds	r7, #12
 80085b2:	46bd      	mov	sp, r7
 80085b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80085b8:	4770      	bx	lr

080085ba <HAL_HRTIM_Output1SetCallback>:
  *                   @arg HRTIM_TIMERINDEX_TIMER_E for timer E
  * @retval None
  */
__weak void HAL_HRTIM_Output1SetCallback(HRTIM_HandleTypeDef * hhrtim,
                                              uint32_t TimerIdx)
{
 80085ba:	b480      	push	{r7}
 80085bc:	b083      	sub	sp, #12
 80085be:	af00      	add	r7, sp, #0
 80085c0:	6078      	str	r0, [r7, #4]
 80085c2:	6039      	str	r1, [r7, #0]
  UNUSED(TimerIdx);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_HRTIM_Timer_Output1SetCallback could be implemented in the user file
   */
}
 80085c4:	bf00      	nop
 80085c6:	370c      	adds	r7, #12
 80085c8:	46bd      	mov	sp, r7
 80085ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80085ce:	4770      	bx	lr

080085d0 <HAL_HRTIM_Output1ResetCallback>:
  *                   @arg HRTIM_TIMERINDEX_TIMER_E for timer E
  * @retval None
  */
__weak void HAL_HRTIM_Output1ResetCallback(HRTIM_HandleTypeDef * hhrtim,
                                              uint32_t TimerIdx)
{
 80085d0:	b480      	push	{r7}
 80085d2:	b083      	sub	sp, #12
 80085d4:	af00      	add	r7, sp, #0
 80085d6:	6078      	str	r0, [r7, #4]
 80085d8:	6039      	str	r1, [r7, #0]
  UNUSED(TimerIdx);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_HRTIM_Timer_Output1ResetCallback could be implemented in the user file
   */
}
 80085da:	bf00      	nop
 80085dc:	370c      	adds	r7, #12
 80085de:	46bd      	mov	sp, r7
 80085e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80085e4:	4770      	bx	lr

080085e6 <HAL_HRTIM_Output2SetCallback>:
  *                   @arg HRTIM_TIMERINDEX_TIMER_E for timer E
  * @retval None
  */
__weak void HAL_HRTIM_Output2SetCallback(HRTIM_HandleTypeDef * hhrtim,
                                              uint32_t TimerIdx)
{
 80085e6:	b480      	push	{r7}
 80085e8:	b083      	sub	sp, #12
 80085ea:	af00      	add	r7, sp, #0
 80085ec:	6078      	str	r0, [r7, #4]
 80085ee:	6039      	str	r1, [r7, #0]
  UNUSED(TimerIdx);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_HRTIM_Timer_Output2SetCallback could be implemented in the user file
   */
}
 80085f0:	bf00      	nop
 80085f2:	370c      	adds	r7, #12
 80085f4:	46bd      	mov	sp, r7
 80085f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80085fa:	4770      	bx	lr

080085fc <HAL_HRTIM_Output2ResetCallback>:
  *                   @arg HRTIM_TIMERINDEX_TIMER_E for timer E
  * @retval None
  */
__weak void HAL_HRTIM_Output2ResetCallback(HRTIM_HandleTypeDef * hhrtim,
                                              uint32_t TimerIdx)
{
 80085fc:	b480      	push	{r7}
 80085fe:	b083      	sub	sp, #12
 8008600:	af00      	add	r7, sp, #0
 8008602:	6078      	str	r0, [r7, #4]
 8008604:	6039      	str	r1, [r7, #0]
  UNUSED(TimerIdx);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_HRTIM_Timer_Output2ResetCallback could be implemented in the user file
   */
}
 8008606:	bf00      	nop
 8008608:	370c      	adds	r7, #12
 800860a:	46bd      	mov	sp, r7
 800860c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008610:	4770      	bx	lr

08008612 <HRTIM_MasterBase_Config>:
  * @param  pTimeBaseCfg pointer to the time base configuration structure
  * @retval None
  */
static void HRTIM_MasterBase_Config(HRTIM_HandleTypeDef * hhrtim,
                                    const HRTIM_TimeBaseCfgTypeDef * pTimeBaseCfg)
{
 8008612:	b480      	push	{r7}
 8008614:	b085      	sub	sp, #20
 8008616:	af00      	add	r7, sp, #0
 8008618:	6078      	str	r0, [r7, #4]
 800861a:	6039      	str	r1, [r7, #0]
  uint32_t hrtim_mcr;

  /* Configure master timer */
  hrtim_mcr = hhrtim->Instance->sMasterRegs.MCR;
 800861c:	687b      	ldr	r3, [r7, #4]
 800861e:	681b      	ldr	r3, [r3, #0]
 8008620:	681b      	ldr	r3, [r3, #0]
 8008622:	60fb      	str	r3, [r7, #12]

  /* Set the prescaler ratio */
  hrtim_mcr &= (uint32_t) ~(HRTIM_MCR_CK_PSC);
 8008624:	68fb      	ldr	r3, [r7, #12]
 8008626:	f023 0307 	bic.w	r3, r3, #7
 800862a:	60fb      	str	r3, [r7, #12]
  hrtim_mcr |= (uint32_t)pTimeBaseCfg->PrescalerRatio;
 800862c:	683b      	ldr	r3, [r7, #0]
 800862e:	689b      	ldr	r3, [r3, #8]
 8008630:	68fa      	ldr	r2, [r7, #12]
 8008632:	4313      	orrs	r3, r2
 8008634:	60fb      	str	r3, [r7, #12]

  /* Set the operating mode */
  hrtim_mcr &= (uint32_t) ~(HRTIM_MCR_CONT | HRTIM_MCR_RETRIG);
 8008636:	68fb      	ldr	r3, [r7, #12]
 8008638:	f023 0318 	bic.w	r3, r3, #24
 800863c:	60fb      	str	r3, [r7, #12]
  hrtim_mcr |= (uint32_t)pTimeBaseCfg->Mode;
 800863e:	683b      	ldr	r3, [r7, #0]
 8008640:	68db      	ldr	r3, [r3, #12]
 8008642:	68fa      	ldr	r2, [r7, #12]
 8008644:	4313      	orrs	r3, r2
 8008646:	60fb      	str	r3, [r7, #12]

  /* Update the HRTIM registers */
  hhrtim->Instance->sMasterRegs.MCR = hrtim_mcr;
 8008648:	687b      	ldr	r3, [r7, #4]
 800864a:	681b      	ldr	r3, [r3, #0]
 800864c:	68fa      	ldr	r2, [r7, #12]
 800864e:	601a      	str	r2, [r3, #0]
  hhrtim->Instance->sMasterRegs.MPER = pTimeBaseCfg->Period;
 8008650:	687b      	ldr	r3, [r7, #4]
 8008652:	681b      	ldr	r3, [r3, #0]
 8008654:	683a      	ldr	r2, [r7, #0]
 8008656:	6812      	ldr	r2, [r2, #0]
 8008658:	615a      	str	r2, [r3, #20]
  hhrtim->Instance->sMasterRegs.MREP = pTimeBaseCfg->RepetitionCounter;
 800865a:	687b      	ldr	r3, [r7, #4]
 800865c:	681b      	ldr	r3, [r3, #0]
 800865e:	683a      	ldr	r2, [r7, #0]
 8008660:	6852      	ldr	r2, [r2, #4]
 8008662:	619a      	str	r2, [r3, #24]
}
 8008664:	bf00      	nop
 8008666:	3714      	adds	r7, #20
 8008668:	46bd      	mov	sp, r7
 800866a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800866e:	4770      	bx	lr

08008670 <HRTIM_TimingUnitBase_Config>:
  * @retval None
  */
static void HRTIM_TimingUnitBase_Config(HRTIM_HandleTypeDef * hhrtim,
                                        uint32_t TimerIdx ,
                                        const HRTIM_TimeBaseCfgTypeDef * pTimeBaseCfg)
{
 8008670:	b480      	push	{r7}
 8008672:	b087      	sub	sp, #28
 8008674:	af00      	add	r7, sp, #0
 8008676:	60f8      	str	r0, [r7, #12]
 8008678:	60b9      	str	r1, [r7, #8]
 800867a:	607a      	str	r2, [r7, #4]
  uint32_t hrtim_timcr;

  /* Configure master timing unit */
  hrtim_timcr = hhrtim->Instance->sTimerxRegs[TimerIdx].TIMxCR;
 800867c:	68fb      	ldr	r3, [r7, #12]
 800867e:	681a      	ldr	r2, [r3, #0]
 8008680:	68bb      	ldr	r3, [r7, #8]
 8008682:	3301      	adds	r3, #1
 8008684:	01db      	lsls	r3, r3, #7
 8008686:	4413      	add	r3, r2
 8008688:	681b      	ldr	r3, [r3, #0]
 800868a:	617b      	str	r3, [r7, #20]

  /* Set the prescaler ratio */
  hrtim_timcr &= (uint32_t) ~(HRTIM_TIMCR_CK_PSC);
 800868c:	697b      	ldr	r3, [r7, #20]
 800868e:	f023 0307 	bic.w	r3, r3, #7
 8008692:	617b      	str	r3, [r7, #20]
  hrtim_timcr |= (uint32_t)pTimeBaseCfg->PrescalerRatio;
 8008694:	687b      	ldr	r3, [r7, #4]
 8008696:	689b      	ldr	r3, [r3, #8]
 8008698:	697a      	ldr	r2, [r7, #20]
 800869a:	4313      	orrs	r3, r2
 800869c:	617b      	str	r3, [r7, #20]

  /* Set the operating mode */
  hrtim_timcr &= (uint32_t) ~(HRTIM_TIMCR_CONT | HRTIM_TIMCR_RETRIG);
 800869e:	697b      	ldr	r3, [r7, #20]
 80086a0:	f023 0318 	bic.w	r3, r3, #24
 80086a4:	617b      	str	r3, [r7, #20]
  hrtim_timcr |= (uint32_t)pTimeBaseCfg->Mode;
 80086a6:	687b      	ldr	r3, [r7, #4]
 80086a8:	68db      	ldr	r3, [r3, #12]
 80086aa:	697a      	ldr	r2, [r7, #20]
 80086ac:	4313      	orrs	r3, r2
 80086ae:	617b      	str	r3, [r7, #20]

  /* Update the HRTIM registers */
  hhrtim->Instance->sTimerxRegs[TimerIdx].TIMxCR = hrtim_timcr;
 80086b0:	68fb      	ldr	r3, [r7, #12]
 80086b2:	681a      	ldr	r2, [r3, #0]
 80086b4:	68bb      	ldr	r3, [r7, #8]
 80086b6:	3301      	adds	r3, #1
 80086b8:	01db      	lsls	r3, r3, #7
 80086ba:	4413      	add	r3, r2
 80086bc:	697a      	ldr	r2, [r7, #20]
 80086be:	601a      	str	r2, [r3, #0]
  hhrtim->Instance->sTimerxRegs[TimerIdx].PERxR = pTimeBaseCfg->Period;
 80086c0:	68fb      	ldr	r3, [r7, #12]
 80086c2:	6819      	ldr	r1, [r3, #0]
 80086c4:	687b      	ldr	r3, [r7, #4]
 80086c6:	681a      	ldr	r2, [r3, #0]
 80086c8:	68bb      	ldr	r3, [r7, #8]
 80086ca:	01db      	lsls	r3, r3, #7
 80086cc:	440b      	add	r3, r1
 80086ce:	3394      	adds	r3, #148	; 0x94
 80086d0:	601a      	str	r2, [r3, #0]
  hhrtim->Instance->sTimerxRegs[TimerIdx].REPxR = pTimeBaseCfg->RepetitionCounter;
 80086d2:	68fb      	ldr	r3, [r7, #12]
 80086d4:	6819      	ldr	r1, [r3, #0]
 80086d6:	687b      	ldr	r3, [r7, #4]
 80086d8:	685a      	ldr	r2, [r3, #4]
 80086da:	68bb      	ldr	r3, [r7, #8]
 80086dc:	01db      	lsls	r3, r3, #7
 80086de:	440b      	add	r3, r1
 80086e0:	3398      	adds	r3, #152	; 0x98
 80086e2:	601a      	str	r2, [r3, #0]
}
 80086e4:	bf00      	nop
 80086e6:	371c      	adds	r7, #28
 80086e8:	46bd      	mov	sp, r7
 80086ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80086ee:	4770      	bx	lr

080086f0 <HRTIM_MasterWaveform_Config>:
  * @param  pTimerCfg pointer to the timer configuration data structure
  * @retval None
  */
static void HRTIM_MasterWaveform_Config(HRTIM_HandleTypeDef * hhrtim,
                                        const HRTIM_TimerCfgTypeDef * pTimerCfg)
{
 80086f0:	b480      	push	{r7}
 80086f2:	b085      	sub	sp, #20
 80086f4:	af00      	add	r7, sp, #0
 80086f6:	6078      	str	r0, [r7, #4]
 80086f8:	6039      	str	r1, [r7, #0]
  uint32_t hrtim_mcr;
  uint32_t hrtim_bmcr;

  /* Configure master timer */
  hrtim_mcr = hhrtim->Instance->sMasterRegs.MCR;
 80086fa:	687b      	ldr	r3, [r7, #4]
 80086fc:	681b      	ldr	r3, [r3, #0]
 80086fe:	681b      	ldr	r3, [r3, #0]
 8008700:	60fb      	str	r3, [r7, #12]
  hrtim_bmcr = hhrtim->Instance->sCommonRegs.BMCR;
 8008702:	687b      	ldr	r3, [r7, #4]
 8008704:	681b      	ldr	r3, [r3, #0]
 8008706:	f8d3 33a0 	ldr.w	r3, [r3, #928]	; 0x3a0
 800870a:	60bb      	str	r3, [r7, #8]

  /* Enable/Disable the half mode */
  hrtim_mcr &= ~(HRTIM_MCR_HALF);
 800870c:	68fb      	ldr	r3, [r7, #12]
 800870e:	f023 0320 	bic.w	r3, r3, #32
 8008712:	60fb      	str	r3, [r7, #12]
  hrtim_mcr |= pTimerCfg->HalfModeEnable;
 8008714:	683b      	ldr	r3, [r7, #0]
 8008716:	695b      	ldr	r3, [r3, #20]
 8008718:	68fa      	ldr	r2, [r7, #12]
 800871a:	4313      	orrs	r3, r2
 800871c:	60fb      	str	r3, [r7, #12]

  /* Enable/Disable the timer start upon synchronization event reception */
  hrtim_mcr &= ~(HRTIM_MCR_SYNCSTRTM);
 800871e:	68fb      	ldr	r3, [r7, #12]
 8008720:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8008724:	60fb      	str	r3, [r7, #12]
  hrtim_mcr |= pTimerCfg->StartOnSync;
 8008726:	683b      	ldr	r3, [r7, #0]
 8008728:	699b      	ldr	r3, [r3, #24]
 800872a:	68fa      	ldr	r2, [r7, #12]
 800872c:	4313      	orrs	r3, r2
 800872e:	60fb      	str	r3, [r7, #12]

  /* Enable/Disable the timer reset upon synchronization event reception */
  hrtim_mcr &= ~(HRTIM_MCR_SYNCRSTM);
 8008730:	68fb      	ldr	r3, [r7, #12]
 8008732:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8008736:	60fb      	str	r3, [r7, #12]
  hrtim_mcr |= pTimerCfg->ResetOnSync;
 8008738:	683b      	ldr	r3, [r7, #0]
 800873a:	69db      	ldr	r3, [r3, #28]
 800873c:	68fa      	ldr	r2, [r7, #12]
 800873e:	4313      	orrs	r3, r2
 8008740:	60fb      	str	r3, [r7, #12]

  /* Enable/Disable the DAC synchronization event generation */
  hrtim_mcr &= ~(HRTIM_MCR_DACSYNC);
 8008742:	68fb      	ldr	r3, [r7, #12]
 8008744:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 8008748:	60fb      	str	r3, [r7, #12]
  hrtim_mcr |= pTimerCfg->DACSynchro;
 800874a:	683b      	ldr	r3, [r7, #0]
 800874c:	6a1b      	ldr	r3, [r3, #32]
 800874e:	68fa      	ldr	r2, [r7, #12]
 8008750:	4313      	orrs	r3, r2
 8008752:	60fb      	str	r3, [r7, #12]

  /* Enable/Disable preload mechanism for timer registers */
  hrtim_mcr &= ~(HRTIM_MCR_PREEN);
 8008754:	68fb      	ldr	r3, [r7, #12]
 8008756:	f023 6300 	bic.w	r3, r3, #134217728	; 0x8000000
 800875a:	60fb      	str	r3, [r7, #12]
  hrtim_mcr |= pTimerCfg->PreloadEnable;
 800875c:	683b      	ldr	r3, [r7, #0]
 800875e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008760:	68fa      	ldr	r2, [r7, #12]
 8008762:	4313      	orrs	r3, r2
 8008764:	60fb      	str	r3, [r7, #12]

  /* Master timer registers update handling */
  hrtim_mcr &= ~(HRTIM_MCR_BRSTDMA);
 8008766:	68fb      	ldr	r3, [r7, #12]
 8008768:	f023 4340 	bic.w	r3, r3, #3221225472	; 0xc0000000
 800876c:	60fb      	str	r3, [r7, #12]
  hrtim_mcr |= (pTimerCfg->UpdateGating << 2U);
 800876e:	683b      	ldr	r3, [r7, #0]
 8008770:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008772:	009b      	lsls	r3, r3, #2
 8008774:	68fa      	ldr	r2, [r7, #12]
 8008776:	4313      	orrs	r3, r2
 8008778:	60fb      	str	r3, [r7, #12]

  /* Enable/Disable registers update on repetition */
  hrtim_mcr &= ~(HRTIM_MCR_MREPU);
 800877a:	68fb      	ldr	r3, [r7, #12]
 800877c:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 8008780:	60fb      	str	r3, [r7, #12]
  hrtim_mcr |= pTimerCfg->RepetitionUpdate;
 8008782:	683b      	ldr	r3, [r7, #0]
 8008784:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008786:	68fa      	ldr	r2, [r7, #12]
 8008788:	4313      	orrs	r3, r2
 800878a:	60fb      	str	r3, [r7, #12]

  /* Set the timer burst mode */
  hrtim_bmcr &= ~(HRTIM_BMCR_MTBM);
 800878c:	68bb      	ldr	r3, [r7, #8]
 800878e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8008792:	60bb      	str	r3, [r7, #8]
  hrtim_bmcr |= pTimerCfg->BurstMode;
 8008794:	683b      	ldr	r3, [r7, #0]
 8008796:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008798:	68ba      	ldr	r2, [r7, #8]
 800879a:	4313      	orrs	r3, r2
 800879c:	60bb      	str	r3, [r7, #8]

  /* Update the HRTIM registers */
  hhrtim->Instance->sMasterRegs.MCR = hrtim_mcr;
 800879e:	687b      	ldr	r3, [r7, #4]
 80087a0:	681b      	ldr	r3, [r3, #0]
 80087a2:	68fa      	ldr	r2, [r7, #12]
 80087a4:	601a      	str	r2, [r3, #0]
  hhrtim->Instance->sCommonRegs.BMCR = hrtim_bmcr;
 80087a6:	687b      	ldr	r3, [r7, #4]
 80087a8:	681b      	ldr	r3, [r3, #0]
 80087aa:	68ba      	ldr	r2, [r7, #8]
 80087ac:	f8c3 23a0 	str.w	r2, [r3, #928]	; 0x3a0
}
 80087b0:	bf00      	nop
 80087b2:	3714      	adds	r7, #20
 80087b4:	46bd      	mov	sp, r7
 80087b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80087ba:	4770      	bx	lr

080087bc <HRTIM_TimingUnitWaveform_Config>:
  * @retval None
  */
static void  HRTIM_TimingUnitWaveform_Config(HRTIM_HandleTypeDef * hhrtim,
                                             uint32_t TimerIdx,
                                             const HRTIM_TimerCfgTypeDef * pTimerCfg)
{
 80087bc:	b480      	push	{r7}
 80087be:	b08b      	sub	sp, #44	; 0x2c
 80087c0:	af00      	add	r7, sp, #0
 80087c2:	60f8      	str	r0, [r7, #12]
 80087c4:	60b9      	str	r1, [r7, #8]
 80087c6:	607a      	str	r2, [r7, #4]
  uint32_t hrtim_timoutr;
  uint32_t hrtim_timrstr;
  uint32_t hrtim_bmcr;

  /* UPDGAT bitfield must be reset before programming a new value */
  hhrtim->Instance->sTimerxRegs[TimerIdx].TIMxCR &= ~(HRTIM_TIMCR_UPDGAT);
 80087c8:	68fb      	ldr	r3, [r7, #12]
 80087ca:	681a      	ldr	r2, [r3, #0]
 80087cc:	68bb      	ldr	r3, [r7, #8]
 80087ce:	3301      	adds	r3, #1
 80087d0:	01db      	lsls	r3, r3, #7
 80087d2:	4413      	add	r3, r2
 80087d4:	681b      	ldr	r3, [r3, #0]
 80087d6:	68fa      	ldr	r2, [r7, #12]
 80087d8:	6811      	ldr	r1, [r2, #0]
 80087da:	f023 4270 	bic.w	r2, r3, #4026531840	; 0xf0000000
 80087de:	68bb      	ldr	r3, [r7, #8]
 80087e0:	3301      	adds	r3, #1
 80087e2:	01db      	lsls	r3, r3, #7
 80087e4:	440b      	add	r3, r1
 80087e6:	601a      	str	r2, [r3, #0]

  /* Configure timing unit (Timer A to Timer E) */
  hrtim_timcr = hhrtim->Instance->sTimerxRegs[TimerIdx].TIMxCR;
 80087e8:	68fb      	ldr	r3, [r7, #12]
 80087ea:	681a      	ldr	r2, [r3, #0]
 80087ec:	68bb      	ldr	r3, [r7, #8]
 80087ee:	3301      	adds	r3, #1
 80087f0:	01db      	lsls	r3, r3, #7
 80087f2:	4413      	add	r3, r2
 80087f4:	681b      	ldr	r3, [r3, #0]
 80087f6:	627b      	str	r3, [r7, #36]	; 0x24
  hrtim_timfltr = hhrtim->Instance->sTimerxRegs[TimerIdx].FLTxR;
 80087f8:	68fb      	ldr	r3, [r7, #12]
 80087fa:	681a      	ldr	r2, [r3, #0]
 80087fc:	68bb      	ldr	r3, [r7, #8]
 80087fe:	01db      	lsls	r3, r3, #7
 8008800:	4413      	add	r3, r2
 8008802:	33e8      	adds	r3, #232	; 0xe8
 8008804:	681b      	ldr	r3, [r3, #0]
 8008806:	61bb      	str	r3, [r7, #24]
  hrtim_timoutr = hhrtim->Instance->sTimerxRegs[TimerIdx].OUTxR;
 8008808:	68fb      	ldr	r3, [r7, #12]
 800880a:	681a      	ldr	r2, [r3, #0]
 800880c:	68bb      	ldr	r3, [r7, #8]
 800880e:	01db      	lsls	r3, r3, #7
 8008810:	4413      	add	r3, r2
 8008812:	33e4      	adds	r3, #228	; 0xe4
 8008814:	681b      	ldr	r3, [r3, #0]
 8008816:	623b      	str	r3, [r7, #32]
  hrtim_bmcr = hhrtim->Instance->sCommonRegs.BMCR;
 8008818:	68fb      	ldr	r3, [r7, #12]
 800881a:	681b      	ldr	r3, [r3, #0]
 800881c:	f8d3 33a0 	ldr.w	r3, [r3, #928]	; 0x3a0
 8008820:	61fb      	str	r3, [r7, #28]

  /* Enable/Disable the half mode */
  hrtim_timcr &= ~(HRTIM_TIMCR_HALF);
 8008822:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008824:	f023 0320 	bic.w	r3, r3, #32
 8008828:	627b      	str	r3, [r7, #36]	; 0x24
  hrtim_timcr |= pTimerCfg->HalfModeEnable;
 800882a:	687b      	ldr	r3, [r7, #4]
 800882c:	695b      	ldr	r3, [r3, #20]
 800882e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008830:	4313      	orrs	r3, r2
 8008832:	627b      	str	r3, [r7, #36]	; 0x24

  /* Enable/Disable the timer start upon synchronization event reception */
  hrtim_timcr &= ~(HRTIM_TIMCR_SYNCSTRT);
 8008834:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008836:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800883a:	627b      	str	r3, [r7, #36]	; 0x24
  hrtim_timcr |= pTimerCfg->StartOnSync;
 800883c:	687b      	ldr	r3, [r7, #4]
 800883e:	699b      	ldr	r3, [r3, #24]
 8008840:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008842:	4313      	orrs	r3, r2
 8008844:	627b      	str	r3, [r7, #36]	; 0x24

  /* Enable/Disable the timer reset upon synchronization event reception */
  hrtim_timcr &= ~(HRTIM_TIMCR_SYNCRST);
 8008846:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008848:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800884c:	627b      	str	r3, [r7, #36]	; 0x24
  hrtim_timcr |= pTimerCfg->ResetOnSync;
 800884e:	687b      	ldr	r3, [r7, #4]
 8008850:	69db      	ldr	r3, [r3, #28]
 8008852:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008854:	4313      	orrs	r3, r2
 8008856:	627b      	str	r3, [r7, #36]	; 0x24

  /* Enable/Disable the DAC synchronization event generation */
  hrtim_timcr &= ~(HRTIM_TIMCR_DACSYNC);
 8008858:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800885a:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 800885e:	627b      	str	r3, [r7, #36]	; 0x24
  hrtim_timcr |= pTimerCfg->DACSynchro;
 8008860:	687b      	ldr	r3, [r7, #4]
 8008862:	6a1b      	ldr	r3, [r3, #32]
 8008864:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008866:	4313      	orrs	r3, r2
 8008868:	627b      	str	r3, [r7, #36]	; 0x24

  /* Enable/Disable preload mechanism for timer registers */
  hrtim_timcr &= ~(HRTIM_TIMCR_PREEN);
 800886a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800886c:	f023 6300 	bic.w	r3, r3, #134217728	; 0x8000000
 8008870:	627b      	str	r3, [r7, #36]	; 0x24
  hrtim_timcr |= pTimerCfg->PreloadEnable;
 8008872:	687b      	ldr	r3, [r7, #4]
 8008874:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008876:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008878:	4313      	orrs	r3, r2
 800887a:	627b      	str	r3, [r7, #36]	; 0x24

  /* Timing unit registers update handling */
  hrtim_timcr &= ~(HRTIM_TIMCR_UPDGAT);
 800887c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800887e:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 8008882:	627b      	str	r3, [r7, #36]	; 0x24
  hrtim_timcr |= pTimerCfg->UpdateGating;
 8008884:	687b      	ldr	r3, [r7, #4]
 8008886:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008888:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800888a:	4313      	orrs	r3, r2
 800888c:	627b      	str	r3, [r7, #36]	; 0x24

  /* Enable/Disable registers update on repetition */
  hrtim_timcr &= ~(HRTIM_TIMCR_TREPU);
 800888e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008890:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 8008894:	627b      	str	r3, [r7, #36]	; 0x24
  if (pTimerCfg->RepetitionUpdate == HRTIM_UPDATEONREPETITION_ENABLED)
 8008896:	687b      	ldr	r3, [r7, #4]
 8008898:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800889a:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800889e:	d103      	bne.n	80088a8 <HRTIM_TimingUnitWaveform_Config+0xec>
  {
    hrtim_timcr |= HRTIM_TIMCR_TREPU;
 80088a0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80088a2:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80088a6:	627b      	str	r3, [r7, #36]	; 0x24
  }

  /* Set the push-pull mode */
  hrtim_timcr &= ~(HRTIM_TIMCR_PSHPLL);
 80088a8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80088aa:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80088ae:	627b      	str	r3, [r7, #36]	; 0x24
  hrtim_timcr |= pTimerCfg->PushPull;
 80088b0:	687b      	ldr	r3, [r7, #4]
 80088b2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80088b4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80088b6:	4313      	orrs	r3, r2
 80088b8:	627b      	str	r3, [r7, #36]	; 0x24

  /* Enable/Disable registers update on timer counter reset */
  hrtim_timcr &= ~(HRTIM_TIMCR_TRSTU);
 80088ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80088bc:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80088c0:	627b      	str	r3, [r7, #36]	; 0x24
  hrtim_timcr |= pTimerCfg->ResetUpdate;
 80088c2:	687b      	ldr	r3, [r7, #4]
 80088c4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80088c6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80088c8:	4313      	orrs	r3, r2
 80088ca:	627b      	str	r3, [r7, #36]	; 0x24

  /* Set the timer update trigger */
  hrtim_timcr &= ~(HRTIM_TIMCR_TIMUPDATETRIGGER);
 80088cc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80088ce:	f023 73fc 	bic.w	r3, r3, #33030144	; 0x1f80000
 80088d2:	627b      	str	r3, [r7, #36]	; 0x24
  hrtim_timcr |= pTimerCfg->UpdateTrigger;
 80088d4:	687b      	ldr	r3, [r7, #4]
 80088d6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80088d8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80088da:	4313      	orrs	r3, r2
 80088dc:	627b      	str	r3, [r7, #36]	; 0x24

  /* Enable/Disable the fault channel at timer level */
  hrtim_timfltr &= ~(HRTIM_FLTR_FLTxEN);
 80088de:	69bb      	ldr	r3, [r7, #24]
 80088e0:	f023 031f 	bic.w	r3, r3, #31
 80088e4:	61bb      	str	r3, [r7, #24]
  hrtim_timfltr |= (pTimerCfg->FaultEnable & HRTIM_FLTR_FLTxEN);
 80088e6:	687b      	ldr	r3, [r7, #4]
 80088e8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80088ea:	f003 031f 	and.w	r3, r3, #31
 80088ee:	69ba      	ldr	r2, [r7, #24]
 80088f0:	4313      	orrs	r3, r2
 80088f2:	61bb      	str	r3, [r7, #24]

  /* Lock/Unlock fault sources at timer level */
  hrtim_timfltr &= ~(HRTIM_FLTR_FLTLCK);
 80088f4:	69bb      	ldr	r3, [r7, #24]
 80088f6:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80088fa:	61bb      	str	r3, [r7, #24]
  hrtim_timfltr |= pTimerCfg->FaultLock;
 80088fc:	687b      	ldr	r3, [r7, #4]
 80088fe:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008900:	69ba      	ldr	r2, [r7, #24]
 8008902:	4313      	orrs	r3, r2
 8008904:	61bb      	str	r3, [r7, #24]

  /* The deadtime cannot be used simultaneously with the push-pull mode */
  if (pTimerCfg->PushPull == HRTIM_TIMPUSHPULLMODE_DISABLED)
 8008906:	687b      	ldr	r3, [r7, #4]
 8008908:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800890a:	2b00      	cmp	r3, #0
 800890c:	d108      	bne.n	8008920 <HRTIM_TimingUnitWaveform_Config+0x164>
  {
    /* Enable/Disable dead time insertion at timer level */
    hrtim_timoutr &= ~(HRTIM_OUTR_DTEN);
 800890e:	6a3b      	ldr	r3, [r7, #32]
 8008910:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8008914:	623b      	str	r3, [r7, #32]
    hrtim_timoutr |= pTimerCfg->DeadTimeInsertion;
 8008916:	687b      	ldr	r3, [r7, #4]
 8008918:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800891a:	6a3a      	ldr	r2, [r7, #32]
 800891c:	4313      	orrs	r3, r2
 800891e:	623b      	str	r3, [r7, #32]

  /* Enable/Disable delayed protection at timer level
     Delayed Idle is available whatever the timer operating mode (regular, push-pull)
     Balanced Idle is only available in push-pull mode
  */
  if ( ((pTimerCfg->DelayedProtectionMode != HRTIM_TIMER_A_B_C_DELAYEDPROTECTION_BALANCED_EEV6)
 8008920:	687b      	ldr	r3, [r7, #4]
 8008922:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008924:	f5b3 6f60 	cmp.w	r3, #3584	; 0xe00
 8008928:	d004      	beq.n	8008934 <HRTIM_TimingUnitWaveform_Config+0x178>
       && (pTimerCfg->DelayedProtectionMode != HRTIM_TIMER_A_B_C_DELAYEDPROTECTION_BALANCED_EEV7))
 800892a:	687b      	ldr	r3, [r7, #4]
 800892c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800892e:	f5b3 5ff0 	cmp.w	r3, #7680	; 0x1e00
 8008932:	d103      	bne.n	800893c <HRTIM_TimingUnitWaveform_Config+0x180>
       || (pTimerCfg->PushPull == HRTIM_TIMPUSHPULLMODE_ENABLED))
 8008934:	687b      	ldr	r3, [r7, #4]
 8008936:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008938:	2b40      	cmp	r3, #64	; 0x40
 800893a:	d108      	bne.n	800894e <HRTIM_TimingUnitWaveform_Config+0x192>
  {
    hrtim_timoutr &= ~(HRTIM_OUTR_DLYPRT| HRTIM_OUTR_DLYPRTEN);
 800893c:	6a3b      	ldr	r3, [r7, #32]
 800893e:	f423 53f0 	bic.w	r3, r3, #7680	; 0x1e00
 8008942:	623b      	str	r3, [r7, #32]
    hrtim_timoutr |= pTimerCfg->DelayedProtectionMode;
 8008944:	687b      	ldr	r3, [r7, #4]
 8008946:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008948:	6a3a      	ldr	r2, [r7, #32]
 800894a:	4313      	orrs	r3, r2
 800894c:	623b      	str	r3, [r7, #32]
  }

  /* Set the timer counter reset trigger */
  hrtim_timrstr = pTimerCfg->ResetTrigger;
 800894e:	687b      	ldr	r3, [r7, #4]
 8008950:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8008952:	617b      	str	r3, [r7, #20]

  /* Set the timer burst mode */
  switch (TimerIdx)
 8008954:	68bb      	ldr	r3, [r7, #8]
 8008956:	2b04      	cmp	r3, #4
 8008958:	d843      	bhi.n	80089e2 <HRTIM_TimingUnitWaveform_Config+0x226>
 800895a:	a201      	add	r2, pc, #4	; (adr r2, 8008960 <HRTIM_TimingUnitWaveform_Config+0x1a4>)
 800895c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008960:	08008975 	.word	0x08008975
 8008964:	0800898b 	.word	0x0800898b
 8008968:	080089a1 	.word	0x080089a1
 800896c:	080089b7 	.word	0x080089b7
 8008970:	080089cd 	.word	0x080089cd
  {
  case HRTIM_TIMERINDEX_TIMER_A:
    {
      hrtim_bmcr &= ~(HRTIM_BMCR_TABM);
 8008974:	69fb      	ldr	r3, [r7, #28]
 8008976:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 800897a:	61fb      	str	r3, [r7, #28]
      hrtim_bmcr |= ( pTimerCfg->BurstMode << 1U);
 800897c:	687b      	ldr	r3, [r7, #4]
 800897e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008980:	005b      	lsls	r3, r3, #1
 8008982:	69fa      	ldr	r2, [r7, #28]
 8008984:	4313      	orrs	r3, r2
 8008986:	61fb      	str	r3, [r7, #28]
      break;
 8008988:	e02c      	b.n	80089e4 <HRTIM_TimingUnitWaveform_Config+0x228>
    }

  case HRTIM_TIMERINDEX_TIMER_B:
    {
      hrtim_bmcr &= ~(HRTIM_BMCR_TBBM);
 800898a:	69fb      	ldr	r3, [r7, #28]
 800898c:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8008990:	61fb      	str	r3, [r7, #28]
      hrtim_bmcr |= ( pTimerCfg->BurstMode << 2U);
 8008992:	687b      	ldr	r3, [r7, #4]
 8008994:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008996:	009b      	lsls	r3, r3, #2
 8008998:	69fa      	ldr	r2, [r7, #28]
 800899a:	4313      	orrs	r3, r2
 800899c:	61fb      	str	r3, [r7, #28]
      break;
 800899e:	e021      	b.n	80089e4 <HRTIM_TimingUnitWaveform_Config+0x228>
    }

  case HRTIM_TIMERINDEX_TIMER_C:
    {
      hrtim_bmcr &= ~(HRTIM_BMCR_TCBM);
 80089a0:	69fb      	ldr	r3, [r7, #28]
 80089a2:	f423 2300 	bic.w	r3, r3, #524288	; 0x80000
 80089a6:	61fb      	str	r3, [r7, #28]
      hrtim_bmcr |= ( pTimerCfg->BurstMode << 3U);
 80089a8:	687b      	ldr	r3, [r7, #4]
 80089aa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80089ac:	00db      	lsls	r3, r3, #3
 80089ae:	69fa      	ldr	r2, [r7, #28]
 80089b0:	4313      	orrs	r3, r2
 80089b2:	61fb      	str	r3, [r7, #28]
      break;
 80089b4:	e016      	b.n	80089e4 <HRTIM_TimingUnitWaveform_Config+0x228>
    }

  case HRTIM_TIMERINDEX_TIMER_D:
    {
      hrtim_bmcr &= ~(HRTIM_BMCR_TDBM);
 80089b6:	69fb      	ldr	r3, [r7, #28]
 80089b8:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 80089bc:	61fb      	str	r3, [r7, #28]
      hrtim_bmcr |= ( pTimerCfg->BurstMode << 4U);
 80089be:	687b      	ldr	r3, [r7, #4]
 80089c0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80089c2:	011b      	lsls	r3, r3, #4
 80089c4:	69fa      	ldr	r2, [r7, #28]
 80089c6:	4313      	orrs	r3, r2
 80089c8:	61fb      	str	r3, [r7, #28]
      break;
 80089ca:	e00b      	b.n	80089e4 <HRTIM_TimingUnitWaveform_Config+0x228>
    }

  case HRTIM_TIMERINDEX_TIMER_E:
    {
      hrtim_bmcr &= ~(HRTIM_BMCR_TEBM);
 80089cc:	69fb      	ldr	r3, [r7, #28]
 80089ce:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 80089d2:	61fb      	str	r3, [r7, #28]
      hrtim_bmcr |= ( pTimerCfg->BurstMode << 5U);
 80089d4:	687b      	ldr	r3, [r7, #4]
 80089d6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80089d8:	015b      	lsls	r3, r3, #5
 80089da:	69fa      	ldr	r2, [r7, #28]
 80089dc:	4313      	orrs	r3, r2
 80089de:	61fb      	str	r3, [r7, #28]
      break;
 80089e0:	e000      	b.n	80089e4 <HRTIM_TimingUnitWaveform_Config+0x228>
    }

  default:
    break;
 80089e2:	bf00      	nop
  }

  /* Update the HRTIM registers */
  hhrtim->Instance->sTimerxRegs[TimerIdx].TIMxCR = hrtim_timcr;
 80089e4:	68fb      	ldr	r3, [r7, #12]
 80089e6:	681a      	ldr	r2, [r3, #0]
 80089e8:	68bb      	ldr	r3, [r7, #8]
 80089ea:	3301      	adds	r3, #1
 80089ec:	01db      	lsls	r3, r3, #7
 80089ee:	4413      	add	r3, r2
 80089f0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80089f2:	601a      	str	r2, [r3, #0]
  hhrtim->Instance->sTimerxRegs[TimerIdx].FLTxR = hrtim_timfltr;
 80089f4:	68fb      	ldr	r3, [r7, #12]
 80089f6:	681a      	ldr	r2, [r3, #0]
 80089f8:	68bb      	ldr	r3, [r7, #8]
 80089fa:	01db      	lsls	r3, r3, #7
 80089fc:	4413      	add	r3, r2
 80089fe:	33e8      	adds	r3, #232	; 0xe8
 8008a00:	69ba      	ldr	r2, [r7, #24]
 8008a02:	601a      	str	r2, [r3, #0]
  hhrtim->Instance->sTimerxRegs[TimerIdx].OUTxR = hrtim_timoutr;
 8008a04:	68fb      	ldr	r3, [r7, #12]
 8008a06:	681a      	ldr	r2, [r3, #0]
 8008a08:	68bb      	ldr	r3, [r7, #8]
 8008a0a:	01db      	lsls	r3, r3, #7
 8008a0c:	4413      	add	r3, r2
 8008a0e:	33e4      	adds	r3, #228	; 0xe4
 8008a10:	6a3a      	ldr	r2, [r7, #32]
 8008a12:	601a      	str	r2, [r3, #0]
  hhrtim->Instance->sTimerxRegs[TimerIdx].RSTxR = hrtim_timrstr;
 8008a14:	68fb      	ldr	r3, [r7, #12]
 8008a16:	681a      	ldr	r2, [r3, #0]
 8008a18:	68bb      	ldr	r3, [r7, #8]
 8008a1a:	01db      	lsls	r3, r3, #7
 8008a1c:	4413      	add	r3, r2
 8008a1e:	33d4      	adds	r3, #212	; 0xd4
 8008a20:	697a      	ldr	r2, [r7, #20]
 8008a22:	601a      	str	r2, [r3, #0]
  hhrtim->Instance->sCommonRegs.BMCR = hrtim_bmcr;
 8008a24:	68fb      	ldr	r3, [r7, #12]
 8008a26:	681b      	ldr	r3, [r3, #0]
 8008a28:	69fa      	ldr	r2, [r7, #28]
 8008a2a:	f8c3 23a0 	str.w	r2, [r3, #928]	; 0x3a0
}
 8008a2e:	bf00      	nop
 8008a30:	372c      	adds	r7, #44	; 0x2c
 8008a32:	46bd      	mov	sp, r7
 8008a34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a38:	4770      	bx	lr
 8008a3a:	bf00      	nop

08008a3c <HRTIM_OutputConfig>:
  */
static void  HRTIM_OutputConfig(HRTIM_HandleTypeDef * hhrtim,
                                uint32_t TimerIdx,
                                uint32_t Output,
                                const HRTIM_OutputCfgTypeDef * pOutputCfg)
{
 8008a3c:	b480      	push	{r7}
 8008a3e:	b089      	sub	sp, #36	; 0x24
 8008a40:	af00      	add	r7, sp, #0
 8008a42:	60f8      	str	r0, [r7, #12]
 8008a44:	60b9      	str	r1, [r7, #8]
 8008a46:	607a      	str	r2, [r7, #4]
 8008a48:	603b      	str	r3, [r7, #0]
  uint32_t hrtim_outr;
  uint32_t hrtim_dtr;

  uint32_t shift = 0U;
 8008a4a:	2300      	movs	r3, #0
 8008a4c:	61bb      	str	r3, [r7, #24]

  hrtim_outr = hhrtim->Instance->sTimerxRegs[TimerIdx].OUTxR;
 8008a4e:	68fb      	ldr	r3, [r7, #12]
 8008a50:	681a      	ldr	r2, [r3, #0]
 8008a52:	68bb      	ldr	r3, [r7, #8]
 8008a54:	01db      	lsls	r3, r3, #7
 8008a56:	4413      	add	r3, r2
 8008a58:	33e4      	adds	r3, #228	; 0xe4
 8008a5a:	681b      	ldr	r3, [r3, #0]
 8008a5c:	61fb      	str	r3, [r7, #28]
  hrtim_dtr = hhrtim->Instance->sTimerxRegs[TimerIdx].DTxR;
 8008a5e:	68fb      	ldr	r3, [r7, #12]
 8008a60:	681a      	ldr	r2, [r3, #0]
 8008a62:	68bb      	ldr	r3, [r7, #8]
 8008a64:	01db      	lsls	r3, r3, #7
 8008a66:	4413      	add	r3, r2
 8008a68:	33b8      	adds	r3, #184	; 0xb8
 8008a6a:	681b      	ldr	r3, [r3, #0]
 8008a6c:	617b      	str	r3, [r7, #20]

  switch (Output)
 8008a6e:	687b      	ldr	r3, [r7, #4]
 8008a70:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8008a74:	d04d      	beq.n	8008b12 <HRTIM_OutputConfig+0xd6>
 8008a76:	687b      	ldr	r3, [r7, #4]
 8008a78:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8008a7c:	d85e      	bhi.n	8008b3c <HRTIM_OutputConfig+0x100>
 8008a7e:	687b      	ldr	r3, [r7, #4]
 8008a80:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8008a84:	d032      	beq.n	8008aec <HRTIM_OutputConfig+0xb0>
 8008a86:	687b      	ldr	r3, [r7, #4]
 8008a88:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8008a8c:	d856      	bhi.n	8008b3c <HRTIM_OutputConfig+0x100>
 8008a8e:	687b      	ldr	r3, [r7, #4]
 8008a90:	2b80      	cmp	r3, #128	; 0x80
 8008a92:	d03e      	beq.n	8008b12 <HRTIM_OutputConfig+0xd6>
 8008a94:	687b      	ldr	r3, [r7, #4]
 8008a96:	2b80      	cmp	r3, #128	; 0x80
 8008a98:	d850      	bhi.n	8008b3c <HRTIM_OutputConfig+0x100>
 8008a9a:	687b      	ldr	r3, [r7, #4]
 8008a9c:	2b40      	cmp	r3, #64	; 0x40
 8008a9e:	d025      	beq.n	8008aec <HRTIM_OutputConfig+0xb0>
 8008aa0:	687b      	ldr	r3, [r7, #4]
 8008aa2:	2b40      	cmp	r3, #64	; 0x40
 8008aa4:	d84a      	bhi.n	8008b3c <HRTIM_OutputConfig+0x100>
 8008aa6:	687b      	ldr	r3, [r7, #4]
 8008aa8:	2b01      	cmp	r3, #1
 8008aaa:	d01f      	beq.n	8008aec <HRTIM_OutputConfig+0xb0>
 8008aac:	687b      	ldr	r3, [r7, #4]
 8008aae:	2b00      	cmp	r3, #0
 8008ab0:	d044      	beq.n	8008b3c <HRTIM_OutputConfig+0x100>
 8008ab2:	687b      	ldr	r3, [r7, #4]
 8008ab4:	2b20      	cmp	r3, #32
 8008ab6:	d841      	bhi.n	8008b3c <HRTIM_OutputConfig+0x100>
 8008ab8:	687b      	ldr	r3, [r7, #4]
 8008aba:	2b02      	cmp	r3, #2
 8008abc:	d33e      	bcc.n	8008b3c <HRTIM_OutputConfig+0x100>
 8008abe:	687b      	ldr	r3, [r7, #4]
 8008ac0:	3b02      	subs	r3, #2
 8008ac2:	2201      	movs	r2, #1
 8008ac4:	409a      	lsls	r2, r3
 8008ac6:	4b48      	ldr	r3, [pc, #288]	; (8008be8 <HRTIM_OutputConfig+0x1ac>)
 8008ac8:	4013      	ands	r3, r2
 8008aca:	2b00      	cmp	r3, #0
 8008acc:	bf14      	ite	ne
 8008ace:	2301      	movne	r3, #1
 8008ad0:	2300      	moveq	r3, #0
 8008ad2:	b2db      	uxtb	r3, r3
 8008ad4:	2b00      	cmp	r3, #0
 8008ad6:	d11c      	bne.n	8008b12 <HRTIM_OutputConfig+0xd6>
 8008ad8:	f244 0304 	movw	r3, #16388	; 0x4004
 8008adc:	4013      	ands	r3, r2
 8008ade:	2b00      	cmp	r3, #0
 8008ae0:	bf14      	ite	ne
 8008ae2:	2301      	movne	r3, #1
 8008ae4:	2300      	moveq	r3, #0
 8008ae6:	b2db      	uxtb	r3, r3
 8008ae8:	2b00      	cmp	r3, #0
 8008aea:	d027      	beq.n	8008b3c <HRTIM_OutputConfig+0x100>
  case HRTIM_OUTPUT_TC1:
  case HRTIM_OUTPUT_TD1:
  case HRTIM_OUTPUT_TE1:
    {
      /* Set the output set/reset crossbar */
      hhrtim->Instance->sTimerxRegs[TimerIdx].SETx1R = pOutputCfg->SetSource;
 8008aec:	68fb      	ldr	r3, [r7, #12]
 8008aee:	6819      	ldr	r1, [r3, #0]
 8008af0:	683b      	ldr	r3, [r7, #0]
 8008af2:	685a      	ldr	r2, [r3, #4]
 8008af4:	68bb      	ldr	r3, [r7, #8]
 8008af6:	01db      	lsls	r3, r3, #7
 8008af8:	440b      	add	r3, r1
 8008afa:	33bc      	adds	r3, #188	; 0xbc
 8008afc:	601a      	str	r2, [r3, #0]
      hhrtim->Instance->sTimerxRegs[TimerIdx].RSTx1R = pOutputCfg->ResetSource;
 8008afe:	68fb      	ldr	r3, [r7, #12]
 8008b00:	6819      	ldr	r1, [r3, #0]
 8008b02:	683b      	ldr	r3, [r7, #0]
 8008b04:	689a      	ldr	r2, [r3, #8]
 8008b06:	68bb      	ldr	r3, [r7, #8]
 8008b08:	01db      	lsls	r3, r3, #7
 8008b0a:	440b      	add	r3, r1
 8008b0c:	33c0      	adds	r3, #192	; 0xc0
 8008b0e:	601a      	str	r2, [r3, #0]
      break;
 8008b10:	e015      	b.n	8008b3e <HRTIM_OutputConfig+0x102>
  case HRTIM_OUTPUT_TC2:
  case HRTIM_OUTPUT_TD2:
  case HRTIM_OUTPUT_TE2:
    {
      /* Set the output set/reset crossbar */
      hhrtim->Instance->sTimerxRegs[TimerIdx].SETx2R = pOutputCfg->SetSource;
 8008b12:	68fb      	ldr	r3, [r7, #12]
 8008b14:	6819      	ldr	r1, [r3, #0]
 8008b16:	683b      	ldr	r3, [r7, #0]
 8008b18:	685a      	ldr	r2, [r3, #4]
 8008b1a:	68bb      	ldr	r3, [r7, #8]
 8008b1c:	01db      	lsls	r3, r3, #7
 8008b1e:	440b      	add	r3, r1
 8008b20:	33c4      	adds	r3, #196	; 0xc4
 8008b22:	601a      	str	r2, [r3, #0]
      hhrtim->Instance->sTimerxRegs[TimerIdx].RSTx2R = pOutputCfg->ResetSource;
 8008b24:	68fb      	ldr	r3, [r7, #12]
 8008b26:	6819      	ldr	r1, [r3, #0]
 8008b28:	683b      	ldr	r3, [r7, #0]
 8008b2a:	689a      	ldr	r2, [r3, #8]
 8008b2c:	68bb      	ldr	r3, [r7, #8]
 8008b2e:	01db      	lsls	r3, r3, #7
 8008b30:	440b      	add	r3, r1
 8008b32:	33c8      	adds	r3, #200	; 0xc8
 8008b34:	601a      	str	r2, [r3, #0]
      shift = 16U;
 8008b36:	2310      	movs	r3, #16
 8008b38:	61bb      	str	r3, [r7, #24]
      break;
 8008b3a:	e000      	b.n	8008b3e <HRTIM_OutputConfig+0x102>
    }

  default:
    break;
 8008b3c:	bf00      	nop
  hrtim_outr &= ~((HRTIM_OUTR_POL1 |
                   HRTIM_OUTR_IDLM1 |
                   HRTIM_OUTR_IDLES1|
                   HRTIM_OUTR_FAULT1|
                   HRTIM_OUTR_CHP1 |
                   HRTIM_OUTR_DIDL1) << shift);
 8008b3e:	22fe      	movs	r2, #254	; 0xfe
 8008b40:	69bb      	ldr	r3, [r7, #24]
 8008b42:	fa02 f303 	lsl.w	r3, r2, r3
  hrtim_outr &= ~((HRTIM_OUTR_POL1 |
 8008b46:	43db      	mvns	r3, r3
 8008b48:	69fa      	ldr	r2, [r7, #28]
 8008b4a:	4013      	ands	r3, r2
 8008b4c:	61fb      	str	r3, [r7, #28]

  /* Set the polarity */
  hrtim_outr |= (pOutputCfg->Polarity << shift);
 8008b4e:	683b      	ldr	r3, [r7, #0]
 8008b50:	681a      	ldr	r2, [r3, #0]
 8008b52:	69bb      	ldr	r3, [r7, #24]
 8008b54:	fa02 f303 	lsl.w	r3, r2, r3
 8008b58:	69fa      	ldr	r2, [r7, #28]
 8008b5a:	4313      	orrs	r3, r2
 8008b5c:	61fb      	str	r3, [r7, #28]

  /* Set the IDLE mode */
  hrtim_outr |= (pOutputCfg->IdleMode << shift);
 8008b5e:	683b      	ldr	r3, [r7, #0]
 8008b60:	68da      	ldr	r2, [r3, #12]
 8008b62:	69bb      	ldr	r3, [r7, #24]
 8008b64:	fa02 f303 	lsl.w	r3, r2, r3
 8008b68:	69fa      	ldr	r2, [r7, #28]
 8008b6a:	4313      	orrs	r3, r2
 8008b6c:	61fb      	str	r3, [r7, #28]

  /* Set the IDLE state */
  hrtim_outr |= (pOutputCfg->IdleLevel << shift);
 8008b6e:	683b      	ldr	r3, [r7, #0]
 8008b70:	691a      	ldr	r2, [r3, #16]
 8008b72:	69bb      	ldr	r3, [r7, #24]
 8008b74:	fa02 f303 	lsl.w	r3, r2, r3
 8008b78:	69fa      	ldr	r2, [r7, #28]
 8008b7a:	4313      	orrs	r3, r2
 8008b7c:	61fb      	str	r3, [r7, #28]

  /* Set the FAULT state */
  hrtim_outr |= (pOutputCfg->FaultLevel << shift);
 8008b7e:	683b      	ldr	r3, [r7, #0]
 8008b80:	695a      	ldr	r2, [r3, #20]
 8008b82:	69bb      	ldr	r3, [r7, #24]
 8008b84:	fa02 f303 	lsl.w	r3, r2, r3
 8008b88:	69fa      	ldr	r2, [r7, #28]
 8008b8a:	4313      	orrs	r3, r2
 8008b8c:	61fb      	str	r3, [r7, #28]

  /* Set the chopper mode */
  hrtim_outr |= (pOutputCfg->ChopperModeEnable << shift);
 8008b8e:	683b      	ldr	r3, [r7, #0]
 8008b90:	699a      	ldr	r2, [r3, #24]
 8008b92:	69bb      	ldr	r3, [r7, #24]
 8008b94:	fa02 f303 	lsl.w	r3, r2, r3
 8008b98:	69fa      	ldr	r2, [r7, #28]
 8008b9a:	4313      	orrs	r3, r2
 8008b9c:	61fb      	str	r3, [r7, #28]
     state during a burst mode operation is allowed only under the following
     conditions:
     - the outputs is active during the burst mode (IDLES=1U)
     - positive deadtimes (SDTR/SDTF set to 0U)
  */
  if ((pOutputCfg->IdleLevel == HRTIM_OUTPUTIDLELEVEL_ACTIVE) &&
 8008b9e:	683b      	ldr	r3, [r7, #0]
 8008ba0:	691b      	ldr	r3, [r3, #16]
 8008ba2:	2b08      	cmp	r3, #8
 8008ba4:	d111      	bne.n	8008bca <HRTIM_OutputConfig+0x18e>
      ((hrtim_dtr & HRTIM_DTR_SDTR) == (uint32_t)RESET) &&
 8008ba6:	697b      	ldr	r3, [r7, #20]
 8008ba8:	f403 7300 	and.w	r3, r3, #512	; 0x200
  if ((pOutputCfg->IdleLevel == HRTIM_OUTPUTIDLELEVEL_ACTIVE) &&
 8008bac:	2b00      	cmp	r3, #0
 8008bae:	d10c      	bne.n	8008bca <HRTIM_OutputConfig+0x18e>
      ((hrtim_dtr & HRTIM_DTR_SDTF) == (uint32_t)RESET))
 8008bb0:	697b      	ldr	r3, [r7, #20]
 8008bb2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
      ((hrtim_dtr & HRTIM_DTR_SDTR) == (uint32_t)RESET) &&
 8008bb6:	2b00      	cmp	r3, #0
 8008bb8:	d107      	bne.n	8008bca <HRTIM_OutputConfig+0x18e>
  {
    hrtim_outr |= (pOutputCfg->BurstModeEntryDelayed << shift);
 8008bba:	683b      	ldr	r3, [r7, #0]
 8008bbc:	69da      	ldr	r2, [r3, #28]
 8008bbe:	69bb      	ldr	r3, [r7, #24]
 8008bc0:	fa02 f303 	lsl.w	r3, r2, r3
 8008bc4:	69fa      	ldr	r2, [r7, #28]
 8008bc6:	4313      	orrs	r3, r2
 8008bc8:	61fb      	str	r3, [r7, #28]
  }

  /* Update HRTIM register */
  hhrtim->Instance->sTimerxRegs[TimerIdx].OUTxR = hrtim_outr;
 8008bca:	68fb      	ldr	r3, [r7, #12]
 8008bcc:	681a      	ldr	r2, [r3, #0]
 8008bce:	68bb      	ldr	r3, [r7, #8]
 8008bd0:	01db      	lsls	r3, r3, #7
 8008bd2:	4413      	add	r3, r2
 8008bd4:	33e4      	adds	r3, #228	; 0xe4
 8008bd6:	69fa      	ldr	r2, [r7, #28]
 8008bd8:	601a      	str	r2, [r3, #0]
}
 8008bda:	bf00      	nop
 8008bdc:	3724      	adds	r7, #36	; 0x24
 8008bde:	46bd      	mov	sp, r7
 8008be0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008be4:	4770      	bx	lr
 8008be6:	bf00      	nop
 8008be8:	40000041 	.word	0x40000041

08008bec <HRTIM_ForceRegistersUpdate>:
  * @param  TimerIdx Timer index
  * @retval None
  */
static void HRTIM_ForceRegistersUpdate(HRTIM_HandleTypeDef * hhrtim,
                                       uint32_t TimerIdx)
{
 8008bec:	b480      	push	{r7}
 8008bee:	b083      	sub	sp, #12
 8008bf0:	af00      	add	r7, sp, #0
 8008bf2:	6078      	str	r0, [r7, #4]
 8008bf4:	6039      	str	r1, [r7, #0]
  switch (TimerIdx)
 8008bf6:	683b      	ldr	r3, [r7, #0]
 8008bf8:	2b05      	cmp	r3, #5
 8008bfa:	d851      	bhi.n	8008ca0 <HRTIM_ForceRegistersUpdate+0xb4>
 8008bfc:	a201      	add	r2, pc, #4	; (adr r2, 8008c04 <HRTIM_ForceRegistersUpdate+0x18>)
 8008bfe:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008c02:	bf00      	nop
 8008c04:	08008c33 	.word	0x08008c33
 8008c08:	08008c49 	.word	0x08008c49
 8008c0c:	08008c5f 	.word	0x08008c5f
 8008c10:	08008c75 	.word	0x08008c75
 8008c14:	08008c8b 	.word	0x08008c8b
 8008c18:	08008c1d 	.word	0x08008c1d
  {
  case HRTIM_TIMERINDEX_MASTER:
    {
      hhrtim->Instance->sCommonRegs.CR2 |= HRTIM_CR2_MSWU;
 8008c1c:	687b      	ldr	r3, [r7, #4]
 8008c1e:	681b      	ldr	r3, [r3, #0]
 8008c20:	f8d3 2384 	ldr.w	r2, [r3, #900]	; 0x384
 8008c24:	687b      	ldr	r3, [r7, #4]
 8008c26:	681b      	ldr	r3, [r3, #0]
 8008c28:	f042 0201 	orr.w	r2, r2, #1
 8008c2c:	f8c3 2384 	str.w	r2, [r3, #900]	; 0x384
      break;
 8008c30:	e037      	b.n	8008ca2 <HRTIM_ForceRegistersUpdate+0xb6>
    }

  case HRTIM_TIMERINDEX_TIMER_A:
    {
      hhrtim->Instance->sCommonRegs.CR2 |= HRTIM_CR2_TASWU;
 8008c32:	687b      	ldr	r3, [r7, #4]
 8008c34:	681b      	ldr	r3, [r3, #0]
 8008c36:	f8d3 2384 	ldr.w	r2, [r3, #900]	; 0x384
 8008c3a:	687b      	ldr	r3, [r7, #4]
 8008c3c:	681b      	ldr	r3, [r3, #0]
 8008c3e:	f042 0202 	orr.w	r2, r2, #2
 8008c42:	f8c3 2384 	str.w	r2, [r3, #900]	; 0x384
      break;
 8008c46:	e02c      	b.n	8008ca2 <HRTIM_ForceRegistersUpdate+0xb6>
    }

  case HRTIM_TIMERINDEX_TIMER_B:
    {
      hhrtim->Instance->sCommonRegs.CR2 |= HRTIM_CR2_TBSWU;
 8008c48:	687b      	ldr	r3, [r7, #4]
 8008c4a:	681b      	ldr	r3, [r3, #0]
 8008c4c:	f8d3 2384 	ldr.w	r2, [r3, #900]	; 0x384
 8008c50:	687b      	ldr	r3, [r7, #4]
 8008c52:	681b      	ldr	r3, [r3, #0]
 8008c54:	f042 0204 	orr.w	r2, r2, #4
 8008c58:	f8c3 2384 	str.w	r2, [r3, #900]	; 0x384
      break;
 8008c5c:	e021      	b.n	8008ca2 <HRTIM_ForceRegistersUpdate+0xb6>
    }

  case HRTIM_TIMERINDEX_TIMER_C:
    {
      hhrtim->Instance->sCommonRegs.CR2 |= HRTIM_CR2_TCSWU;
 8008c5e:	687b      	ldr	r3, [r7, #4]
 8008c60:	681b      	ldr	r3, [r3, #0]
 8008c62:	f8d3 2384 	ldr.w	r2, [r3, #900]	; 0x384
 8008c66:	687b      	ldr	r3, [r7, #4]
 8008c68:	681b      	ldr	r3, [r3, #0]
 8008c6a:	f042 0208 	orr.w	r2, r2, #8
 8008c6e:	f8c3 2384 	str.w	r2, [r3, #900]	; 0x384
      break;
 8008c72:	e016      	b.n	8008ca2 <HRTIM_ForceRegistersUpdate+0xb6>
    }

  case HRTIM_TIMERINDEX_TIMER_D:
    {
      hhrtim->Instance->sCommonRegs.CR2 |= HRTIM_CR2_TDSWU;
 8008c74:	687b      	ldr	r3, [r7, #4]
 8008c76:	681b      	ldr	r3, [r3, #0]
 8008c78:	f8d3 2384 	ldr.w	r2, [r3, #900]	; 0x384
 8008c7c:	687b      	ldr	r3, [r7, #4]
 8008c7e:	681b      	ldr	r3, [r3, #0]
 8008c80:	f042 0210 	orr.w	r2, r2, #16
 8008c84:	f8c3 2384 	str.w	r2, [r3, #900]	; 0x384
      break;
 8008c88:	e00b      	b.n	8008ca2 <HRTIM_ForceRegistersUpdate+0xb6>
    }

  case HRTIM_TIMERINDEX_TIMER_E:
    {
      hhrtim->Instance->sCommonRegs.CR2 |= HRTIM_CR2_TESWU;
 8008c8a:	687b      	ldr	r3, [r7, #4]
 8008c8c:	681b      	ldr	r3, [r3, #0]
 8008c8e:	f8d3 2384 	ldr.w	r2, [r3, #900]	; 0x384
 8008c92:	687b      	ldr	r3, [r7, #4]
 8008c94:	681b      	ldr	r3, [r3, #0]
 8008c96:	f042 0220 	orr.w	r2, r2, #32
 8008c9a:	f8c3 2384 	str.w	r2, [r3, #900]	; 0x384
      break;
 8008c9e:	e000      	b.n	8008ca2 <HRTIM_ForceRegistersUpdate+0xb6>
    }

  default:
    break;
 8008ca0:	bf00      	nop
  }
}
 8008ca2:	bf00      	nop
 8008ca4:	370c      	adds	r7, #12
 8008ca6:	46bd      	mov	sp, r7
 8008ca8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008cac:	4770      	bx	lr
 8008cae:	bf00      	nop

08008cb0 <HRTIM_HRTIM_ISR>:
  * @brief  HRTIM interrupts service routine
  * @param  hhrtim pointer to HAL HRTIM handle
  * @retval None
  */
static void HRTIM_HRTIM_ISR(HRTIM_HandleTypeDef * hhrtim)
{
 8008cb0:	b580      	push	{r7, lr}
 8008cb2:	b084      	sub	sp, #16
 8008cb4:	af00      	add	r7, sp, #0
 8008cb6:	6078      	str	r0, [r7, #4]
  uint32_t isrflags = READ_REG(hhrtim->Instance->sCommonRegs.ISR);
 8008cb8:	687b      	ldr	r3, [r7, #4]
 8008cba:	681b      	ldr	r3, [r3, #0]
 8008cbc:	f8d3 3388 	ldr.w	r3, [r3, #904]	; 0x388
 8008cc0:	60fb      	str	r3, [r7, #12]
  uint32_t ierits   = READ_REG(hhrtim->Instance->sCommonRegs.IER);
 8008cc2:	687b      	ldr	r3, [r7, #4]
 8008cc4:	681b      	ldr	r3, [r3, #0]
 8008cc6:	f8d3 3390 	ldr.w	r3, [r3, #912]	; 0x390
 8008cca:	60bb      	str	r3, [r7, #8]

  /* Fault 1 event */
  if((uint32_t)(isrflags & HRTIM_FLAG_FLT1) != (uint32_t)RESET)
 8008ccc:	68fb      	ldr	r3, [r7, #12]
 8008cce:	f003 0301 	and.w	r3, r3, #1
 8008cd2:	2b00      	cmp	r3, #0
 8008cd4:	d00c      	beq.n	8008cf0 <HRTIM_HRTIM_ISR+0x40>
  {
    if((uint32_t)(ierits & HRTIM_IT_FLT1) != (uint32_t)RESET)
 8008cd6:	68bb      	ldr	r3, [r7, #8]
 8008cd8:	f003 0301 	and.w	r3, r3, #1
 8008cdc:	2b00      	cmp	r3, #0
 8008cde:	d007      	beq.n	8008cf0 <HRTIM_HRTIM_ISR+0x40>
    {
      __HAL_HRTIM_CLEAR_IT(hhrtim, HRTIM_IT_FLT1);
 8008ce0:	687b      	ldr	r3, [r7, #4]
 8008ce2:	681b      	ldr	r3, [r3, #0]
 8008ce4:	2201      	movs	r2, #1
 8008ce6:	f8c3 238c 	str.w	r2, [r3, #908]	; 0x38c

      /* Invoke Fault 1 event callback */
#if (USE_HAL_HRTIM_REGISTER_CALLBACKS == 1)
      hhrtim->Fault1Callback(hhrtim);
#else
      HAL_HRTIM_Fault1Callback(hhrtim);
 8008cea:	6878      	ldr	r0, [r7, #4]
 8008cec:	f7ff fba7 	bl	800843e <HAL_HRTIM_Fault1Callback>
#endif /* USE_HAL_HRTIM_REGISTER_CALLBACKS */
    }
  }

  /* Fault 2 event */
  if((uint32_t)(isrflags & HRTIM_FLAG_FLT2) != (uint32_t)RESET)
 8008cf0:	68fb      	ldr	r3, [r7, #12]
 8008cf2:	f003 0302 	and.w	r3, r3, #2
 8008cf6:	2b00      	cmp	r3, #0
 8008cf8:	d00c      	beq.n	8008d14 <HRTIM_HRTIM_ISR+0x64>
  {
    if((uint32_t)(ierits & HRTIM_IT_FLT2) != (uint32_t)RESET)
 8008cfa:	68bb      	ldr	r3, [r7, #8]
 8008cfc:	f003 0302 	and.w	r3, r3, #2
 8008d00:	2b00      	cmp	r3, #0
 8008d02:	d007      	beq.n	8008d14 <HRTIM_HRTIM_ISR+0x64>
    {
      __HAL_HRTIM_CLEAR_IT(hhrtim, HRTIM_IT_FLT2);
 8008d04:	687b      	ldr	r3, [r7, #4]
 8008d06:	681b      	ldr	r3, [r3, #0]
 8008d08:	2202      	movs	r2, #2
 8008d0a:	f8c3 238c 	str.w	r2, [r3, #908]	; 0x38c

      /* Invoke Fault 2 event callback */
#if (USE_HAL_HRTIM_REGISTER_CALLBACKS == 1)
      hhrtim->Fault2Callback(hhrtim);
#else
      HAL_HRTIM_Fault2Callback(hhrtim);
 8008d0e:	6878      	ldr	r0, [r7, #4]
 8008d10:	f7ff fb9f 	bl	8008452 <HAL_HRTIM_Fault2Callback>
#endif /* USE_HAL_HRTIM_REGISTER_CALLBACKS */
    }
  }

  /* Fault 3 event */
  if((uint32_t)(isrflags & HRTIM_FLAG_FLT3) != (uint32_t)RESET)
 8008d14:	68fb      	ldr	r3, [r7, #12]
 8008d16:	f003 0304 	and.w	r3, r3, #4
 8008d1a:	2b00      	cmp	r3, #0
 8008d1c:	d00c      	beq.n	8008d38 <HRTIM_HRTIM_ISR+0x88>
  {
    if((uint32_t)(ierits & HRTIM_IT_FLT3) != (uint32_t)RESET)
 8008d1e:	68bb      	ldr	r3, [r7, #8]
 8008d20:	f003 0304 	and.w	r3, r3, #4
 8008d24:	2b00      	cmp	r3, #0
 8008d26:	d007      	beq.n	8008d38 <HRTIM_HRTIM_ISR+0x88>
    {
      __HAL_HRTIM_CLEAR_IT(hhrtim, HRTIM_IT_FLT3);
 8008d28:	687b      	ldr	r3, [r7, #4]
 8008d2a:	681b      	ldr	r3, [r3, #0]
 8008d2c:	2204      	movs	r2, #4
 8008d2e:	f8c3 238c 	str.w	r2, [r3, #908]	; 0x38c

      /* Invoke Fault 3 event callback */
#if (USE_HAL_HRTIM_REGISTER_CALLBACKS == 1)
      hhrtim->Fault3Callback(hhrtim);
#else
      HAL_HRTIM_Fault3Callback(hhrtim);
 8008d32:	6878      	ldr	r0, [r7, #4]
 8008d34:	f7ff fb97 	bl	8008466 <HAL_HRTIM_Fault3Callback>
#endif /* USE_HAL_HRTIM_REGISTER_CALLBACKS */
    }
  }

  /* Fault 4 event */
  if((uint32_t)(isrflags & HRTIM_FLAG_FLT4) != (uint32_t)RESET)
 8008d38:	68fb      	ldr	r3, [r7, #12]
 8008d3a:	f003 0308 	and.w	r3, r3, #8
 8008d3e:	2b00      	cmp	r3, #0
 8008d40:	d00c      	beq.n	8008d5c <HRTIM_HRTIM_ISR+0xac>
  {
    if((uint32_t)(ierits & HRTIM_IT_FLT4) != (uint32_t)RESET)
 8008d42:	68bb      	ldr	r3, [r7, #8]
 8008d44:	f003 0308 	and.w	r3, r3, #8
 8008d48:	2b00      	cmp	r3, #0
 8008d4a:	d007      	beq.n	8008d5c <HRTIM_HRTIM_ISR+0xac>
    {
      __HAL_HRTIM_CLEAR_IT(hhrtim, HRTIM_IT_FLT4);
 8008d4c:	687b      	ldr	r3, [r7, #4]
 8008d4e:	681b      	ldr	r3, [r3, #0]
 8008d50:	2208      	movs	r2, #8
 8008d52:	f8c3 238c 	str.w	r2, [r3, #908]	; 0x38c

      /* Invoke Fault 4 event callback */
#if (USE_HAL_HRTIM_REGISTER_CALLBACKS == 1)
      hhrtim->Fault4Callback(hhrtim);
#else
      HAL_HRTIM_Fault4Callback(hhrtim);
 8008d56:	6878      	ldr	r0, [r7, #4]
 8008d58:	f7ff fb8f 	bl	800847a <HAL_HRTIM_Fault4Callback>
#endif /* USE_HAL_HRTIM_REGISTER_CALLBACKS */
    }
  }

  /* Fault 5 event */
  if((uint32_t)(isrflags & HRTIM_FLAG_FLT5) != (uint32_t)RESET)
 8008d5c:	68fb      	ldr	r3, [r7, #12]
 8008d5e:	f003 0310 	and.w	r3, r3, #16
 8008d62:	2b00      	cmp	r3, #0
 8008d64:	d00c      	beq.n	8008d80 <HRTIM_HRTIM_ISR+0xd0>
  {
    if((uint32_t)(ierits & HRTIM_IT_FLT5) != (uint32_t)RESET)
 8008d66:	68bb      	ldr	r3, [r7, #8]
 8008d68:	f003 0310 	and.w	r3, r3, #16
 8008d6c:	2b00      	cmp	r3, #0
 8008d6e:	d007      	beq.n	8008d80 <HRTIM_HRTIM_ISR+0xd0>
    {
      __HAL_HRTIM_CLEAR_IT(hhrtim, HRTIM_IT_FLT5);
 8008d70:	687b      	ldr	r3, [r7, #4]
 8008d72:	681b      	ldr	r3, [r3, #0]
 8008d74:	2210      	movs	r2, #16
 8008d76:	f8c3 238c 	str.w	r2, [r3, #908]	; 0x38c

      /* Invoke Fault 5 event callback */
#if (USE_HAL_HRTIM_REGISTER_CALLBACKS == 1)
      hhrtim->Fault5Callback(hhrtim);
#else
      HAL_HRTIM_Fault5Callback(hhrtim);
 8008d7a:	6878      	ldr	r0, [r7, #4]
 8008d7c:	f7ff fb87 	bl	800848e <HAL_HRTIM_Fault5Callback>
#endif /* USE_HAL_HRTIM_REGISTER_CALLBACKS */
    }
  }

  /* System fault event */
  if((uint32_t)(isrflags & HRTIM_FLAG_SYSFLT) != (uint32_t)RESET)
 8008d80:	68fb      	ldr	r3, [r7, #12]
 8008d82:	f003 0320 	and.w	r3, r3, #32
 8008d86:	2b00      	cmp	r3, #0
 8008d88:	d00c      	beq.n	8008da4 <HRTIM_HRTIM_ISR+0xf4>
  {
    if((uint32_t)(ierits & HRTIM_IT_SYSFLT) != (uint32_t)RESET)
 8008d8a:	68bb      	ldr	r3, [r7, #8]
 8008d8c:	f003 0320 	and.w	r3, r3, #32
 8008d90:	2b00      	cmp	r3, #0
 8008d92:	d007      	beq.n	8008da4 <HRTIM_HRTIM_ISR+0xf4>
    {
      __HAL_HRTIM_CLEAR_IT(hhrtim, HRTIM_IT_SYSFLT);
 8008d94:	687b      	ldr	r3, [r7, #4]
 8008d96:	681b      	ldr	r3, [r3, #0]
 8008d98:	2220      	movs	r2, #32
 8008d9a:	f8c3 238c 	str.w	r2, [r3, #908]	; 0x38c

      /* Invoke System fault event callback */
#if (USE_HAL_HRTIM_REGISTER_CALLBACKS == 1)
      hhrtim->SystemFaultCallback(hhrtim);
#else
      HAL_HRTIM_SystemFaultCallback(hhrtim);
 8008d9e:	6878      	ldr	r0, [r7, #4]
 8008da0:	f7ff fb7f 	bl	80084a2 <HAL_HRTIM_SystemFaultCallback>
#endif /* USE_HAL_HRTIM_REGISTER_CALLBACKS */
    }
  }
}
 8008da4:	bf00      	nop
 8008da6:	3710      	adds	r7, #16
 8008da8:	46bd      	mov	sp, r7
 8008daa:	bd80      	pop	{r7, pc}

08008dac <HRTIM_Master_ISR>:
* @brief  Master timer interrupts service routine
* @param  hhrtim pointer to HAL HRTIM handle
* @retval None
*/
static void HRTIM_Master_ISR(HRTIM_HandleTypeDef * hhrtim)
{
 8008dac:	b580      	push	{r7, lr}
 8008dae:	b086      	sub	sp, #24
 8008db0:	af00      	add	r7, sp, #0
 8008db2:	6078      	str	r0, [r7, #4]
  uint32_t isrflags  = READ_REG(hhrtim->Instance->sCommonRegs.ISR);
 8008db4:	687b      	ldr	r3, [r7, #4]
 8008db6:	681b      	ldr	r3, [r3, #0]
 8008db8:	f8d3 3388 	ldr.w	r3, [r3, #904]	; 0x388
 8008dbc:	617b      	str	r3, [r7, #20]
  uint32_t ierits    = READ_REG(hhrtim->Instance->sCommonRegs.IER);
 8008dbe:	687b      	ldr	r3, [r7, #4]
 8008dc0:	681b      	ldr	r3, [r3, #0]
 8008dc2:	f8d3 3390 	ldr.w	r3, [r3, #912]	; 0x390
 8008dc6:	613b      	str	r3, [r7, #16]
  uint32_t misrflags = READ_REG(hhrtim->Instance->sMasterRegs.MISR);
 8008dc8:	687b      	ldr	r3, [r7, #4]
 8008dca:	681b      	ldr	r3, [r3, #0]
 8008dcc:	685b      	ldr	r3, [r3, #4]
 8008dce:	60fb      	str	r3, [r7, #12]
  uint32_t mdierits  = READ_REG(hhrtim->Instance->sMasterRegs.MDIER);
 8008dd0:	687b      	ldr	r3, [r7, #4]
 8008dd2:	681b      	ldr	r3, [r3, #0]
 8008dd4:	68db      	ldr	r3, [r3, #12]
 8008dd6:	60bb      	str	r3, [r7, #8]

  /* Burst mode period event */
  if((uint32_t)(isrflags & HRTIM_FLAG_BMPER) != (uint32_t)RESET)
 8008dd8:	697b      	ldr	r3, [r7, #20]
 8008dda:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8008dde:	2b00      	cmp	r3, #0
 8008de0:	d00d      	beq.n	8008dfe <HRTIM_Master_ISR+0x52>
  {
    if((uint32_t)(ierits & HRTIM_IT_BMPER) != (uint32_t)RESET)
 8008de2:	693b      	ldr	r3, [r7, #16]
 8008de4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8008de8:	2b00      	cmp	r3, #0
 8008dea:	d008      	beq.n	8008dfe <HRTIM_Master_ISR+0x52>
    {
      __HAL_HRTIM_CLEAR_IT(hhrtim, HRTIM_IT_BMPER);
 8008dec:	687b      	ldr	r3, [r7, #4]
 8008dee:	681b      	ldr	r3, [r3, #0]
 8008df0:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8008df4:	f8c3 238c 	str.w	r2, [r3, #908]	; 0x38c

      /* Invoke Burst mode period event callback */
#if (USE_HAL_HRTIM_REGISTER_CALLBACKS == 1)
      hhrtim->BurstModePeriodCallback(hhrtim);
#else
      HAL_HRTIM_BurstModePeriodCallback(hhrtim);
 8008df8:	6878      	ldr	r0, [r7, #4]
 8008dfa:	f7ff fb5c 	bl	80084b6 <HAL_HRTIM_BurstModePeriodCallback>
#endif /* USE_HAL_HRTIM_REGISTER_CALLBACKS */
    }
  }

  /* Master timer compare 1 event */
  if((uint32_t)(misrflags & HRTIM_MASTER_FLAG_MCMP1) != (uint32_t)RESET)
 8008dfe:	68fb      	ldr	r3, [r7, #12]
 8008e00:	f003 0301 	and.w	r3, r3, #1
 8008e04:	2b00      	cmp	r3, #0
 8008e06:	d00c      	beq.n	8008e22 <HRTIM_Master_ISR+0x76>
  {
    if((uint32_t)(mdierits & HRTIM_MASTER_IT_MCMP1) != (uint32_t)RESET)
 8008e08:	68bb      	ldr	r3, [r7, #8]
 8008e0a:	f003 0301 	and.w	r3, r3, #1
 8008e0e:	2b00      	cmp	r3, #0
 8008e10:	d007      	beq.n	8008e22 <HRTIM_Master_ISR+0x76>
    {
      __HAL_HRTIM_MASTER_CLEAR_IT(hhrtim, HRTIM_MASTER_IT_MCMP1);
 8008e12:	687b      	ldr	r3, [r7, #4]
 8008e14:	681b      	ldr	r3, [r3, #0]
 8008e16:	2201      	movs	r2, #1
 8008e18:	609a      	str	r2, [r3, #8]

      /* Invoke compare 1 event callback */
#if (USE_HAL_HRTIM_REGISTER_CALLBACKS == 1)
      hhrtim->Compare1EventCallback(hhrtim, HRTIM_TIMERINDEX_MASTER);
#else
      HAL_HRTIM_Compare1EventCallback(hhrtim, HRTIM_TIMERINDEX_MASTER);
 8008e1a:	2105      	movs	r1, #5
 8008e1c:	6878      	ldr	r0, [r7, #4]
 8008e1e:	f7ff fb74 	bl	800850a <HAL_HRTIM_Compare1EventCallback>
#endif /* USE_HAL_HRTIM_REGISTER_CALLBACKS */
    }
  }

  /* Master timer compare 2 event */
  if((uint32_t)(misrflags & HRTIM_MASTER_FLAG_MCMP2) != (uint32_t)RESET)
 8008e22:	68fb      	ldr	r3, [r7, #12]
 8008e24:	f003 0302 	and.w	r3, r3, #2
 8008e28:	2b00      	cmp	r3, #0
 8008e2a:	d00c      	beq.n	8008e46 <HRTIM_Master_ISR+0x9a>
  {
    if((uint32_t)(mdierits & HRTIM_MASTER_IT_MCMP2) != (uint32_t)RESET)
 8008e2c:	68bb      	ldr	r3, [r7, #8]
 8008e2e:	f003 0302 	and.w	r3, r3, #2
 8008e32:	2b00      	cmp	r3, #0
 8008e34:	d007      	beq.n	8008e46 <HRTIM_Master_ISR+0x9a>
    {
      __HAL_HRTIM_MASTER_CLEAR_IT(hhrtim, HRTIM_MASTER_IT_MCMP2);
 8008e36:	687b      	ldr	r3, [r7, #4]
 8008e38:	681b      	ldr	r3, [r3, #0]
 8008e3a:	2202      	movs	r2, #2
 8008e3c:	609a      	str	r2, [r3, #8]

      /* Invoke compare 2 event callback */
#if (USE_HAL_HRTIM_REGISTER_CALLBACKS == 1)
      hhrtim->Compare2EventCallback(hhrtim, HRTIM_TIMERINDEX_MASTER);
#else
      HAL_HRTIM_Compare2EventCallback(hhrtim, HRTIM_TIMERINDEX_MASTER);
 8008e3e:	2105      	movs	r1, #5
 8008e40:	6878      	ldr	r0, [r7, #4]
 8008e42:	f7ff fb6d 	bl	8008520 <HAL_HRTIM_Compare2EventCallback>
#endif /* USE_HAL_HRTIM_REGISTER_CALLBACKS */
    }
  }

  /* Master timer compare 3 event */
  if((uint32_t)(misrflags & HRTIM_MASTER_FLAG_MCMP3) != (uint32_t)RESET)
 8008e46:	68fb      	ldr	r3, [r7, #12]
 8008e48:	f003 0304 	and.w	r3, r3, #4
 8008e4c:	2b00      	cmp	r3, #0
 8008e4e:	d00c      	beq.n	8008e6a <HRTIM_Master_ISR+0xbe>
  {
    if((uint32_t)(mdierits & HRTIM_MASTER_IT_MCMP3) != (uint32_t)RESET)
 8008e50:	68bb      	ldr	r3, [r7, #8]
 8008e52:	f003 0304 	and.w	r3, r3, #4
 8008e56:	2b00      	cmp	r3, #0
 8008e58:	d007      	beq.n	8008e6a <HRTIM_Master_ISR+0xbe>
    {
      __HAL_HRTIM_MASTER_CLEAR_IT(hhrtim, HRTIM_MASTER_IT_MCMP3);
 8008e5a:	687b      	ldr	r3, [r7, #4]
 8008e5c:	681b      	ldr	r3, [r3, #0]
 8008e5e:	2204      	movs	r2, #4
 8008e60:	609a      	str	r2, [r3, #8]

      /* Invoke compare 3 event callback */
#if (USE_HAL_HRTIM_REGISTER_CALLBACKS == 1)
      hhrtim->Compare3EventCallback(hhrtim, HRTIM_TIMERINDEX_MASTER);
#else
      HAL_HRTIM_Compare3EventCallback(hhrtim, HRTIM_TIMERINDEX_MASTER);
 8008e62:	2105      	movs	r1, #5
 8008e64:	6878      	ldr	r0, [r7, #4]
 8008e66:	f7ff fb66 	bl	8008536 <HAL_HRTIM_Compare3EventCallback>
#endif /* USE_HAL_HRTIM_REGISTER_CALLBACKS */
    }
  }

  /* Master timer compare 4 event */
  if((uint32_t)(misrflags & HRTIM_MASTER_FLAG_MCMP4) != (uint32_t)RESET)
 8008e6a:	68fb      	ldr	r3, [r7, #12]
 8008e6c:	f003 0308 	and.w	r3, r3, #8
 8008e70:	2b00      	cmp	r3, #0
 8008e72:	d00c      	beq.n	8008e8e <HRTIM_Master_ISR+0xe2>
  {
    if((uint32_t)(mdierits & HRTIM_MASTER_IT_MCMP4) != (uint32_t)RESET)
 8008e74:	68bb      	ldr	r3, [r7, #8]
 8008e76:	f003 0308 	and.w	r3, r3, #8
 8008e7a:	2b00      	cmp	r3, #0
 8008e7c:	d007      	beq.n	8008e8e <HRTIM_Master_ISR+0xe2>
    {
      __HAL_HRTIM_MASTER_CLEAR_IT(hhrtim, HRTIM_MASTER_IT_MCMP4);
 8008e7e:	687b      	ldr	r3, [r7, #4]
 8008e80:	681b      	ldr	r3, [r3, #0]
 8008e82:	2208      	movs	r2, #8
 8008e84:	609a      	str	r2, [r3, #8]

      /* Invoke compare 4 event callback */
#if (USE_HAL_HRTIM_REGISTER_CALLBACKS == 1)
      hhrtim->Compare4EventCallback(hhrtim, HRTIM_TIMERINDEX_MASTER);
#else
      HAL_HRTIM_Compare4EventCallback(hhrtim, HRTIM_TIMERINDEX_MASTER);
 8008e86:	2105      	movs	r1, #5
 8008e88:	6878      	ldr	r0, [r7, #4]
 8008e8a:	f7ff fb5f 	bl	800854c <HAL_HRTIM_Compare4EventCallback>
#endif /* USE_HAL_HRTIM_REGISTER_CALLBACKS */
    }
  }

  /* Master timer repetition event */
  if((uint32_t)(misrflags & HRTIM_MASTER_FLAG_MREP) != (uint32_t)RESET)
 8008e8e:	68fb      	ldr	r3, [r7, #12]
 8008e90:	f003 0310 	and.w	r3, r3, #16
 8008e94:	2b00      	cmp	r3, #0
 8008e96:	d00c      	beq.n	8008eb2 <HRTIM_Master_ISR+0x106>
  {
    if((uint32_t)(mdierits & HRTIM_MASTER_IT_MREP) != (uint32_t)RESET)
 8008e98:	68bb      	ldr	r3, [r7, #8]
 8008e9a:	f003 0310 	and.w	r3, r3, #16
 8008e9e:	2b00      	cmp	r3, #0
 8008ea0:	d007      	beq.n	8008eb2 <HRTIM_Master_ISR+0x106>
    {
      __HAL_HRTIM_MASTER_CLEAR_IT(hhrtim, HRTIM_MASTER_IT_MREP);
 8008ea2:	687b      	ldr	r3, [r7, #4]
 8008ea4:	681b      	ldr	r3, [r3, #0]
 8008ea6:	2210      	movs	r2, #16
 8008ea8:	609a      	str	r2, [r3, #8]

      /* Invoke repetition event callback */
#if (USE_HAL_HRTIM_REGISTER_CALLBACKS == 1)
      hhrtim->RepetitionEventCallback(hhrtim, HRTIM_TIMERINDEX_MASTER);
#else
      HAL_HRTIM_RepetitionEventCallback(hhrtim, HRTIM_TIMERINDEX_MASTER);
 8008eaa:	2105      	movs	r1, #5
 8008eac:	6878      	ldr	r0, [r7, #4]
 8008eae:	f7ff fb21 	bl	80084f4 <HAL_HRTIM_RepetitionEventCallback>
#endif /* USE_HAL_HRTIM_REGISTER_CALLBACKS */
    }
  }

  /* Synchronization input event */
  if((uint32_t)(misrflags & HRTIM_MASTER_FLAG_SYNC) != (uint32_t)RESET)
 8008eb2:	68fb      	ldr	r3, [r7, #12]
 8008eb4:	f003 0320 	and.w	r3, r3, #32
 8008eb8:	2b00      	cmp	r3, #0
 8008eba:	d00b      	beq.n	8008ed4 <HRTIM_Master_ISR+0x128>
  {
    if((uint32_t)(mdierits & HRTIM_MASTER_IT_SYNC) != (uint32_t)RESET)
 8008ebc:	68bb      	ldr	r3, [r7, #8]
 8008ebe:	f003 0320 	and.w	r3, r3, #32
 8008ec2:	2b00      	cmp	r3, #0
 8008ec4:	d006      	beq.n	8008ed4 <HRTIM_Master_ISR+0x128>
    {
      __HAL_HRTIM_MASTER_CLEAR_IT(hhrtim, HRTIM_MASTER_IT_SYNC);
 8008ec6:	687b      	ldr	r3, [r7, #4]
 8008ec8:	681b      	ldr	r3, [r3, #0]
 8008eca:	2220      	movs	r2, #32
 8008ecc:	609a      	str	r2, [r3, #8]

      /* Invoke synchronization event callback */
#if (USE_HAL_HRTIM_REGISTER_CALLBACKS == 1)
      hhrtim->SynchronizationEventCallback(hhrtim);
#else
      HAL_HRTIM_SynchronizationEventCallback(hhrtim);
 8008ece:	6878      	ldr	r0, [r7, #4]
 8008ed0:	f7ff fafb 	bl	80084ca <HAL_HRTIM_SynchronizationEventCallback>
#endif /* USE_HAL_HRTIM_REGISTER_CALLBACKS */
    }
  }

  /* Master timer registers update event */
  if((uint32_t)(misrflags & HRTIM_MASTER_FLAG_MUPD) != (uint32_t)RESET)
 8008ed4:	68fb      	ldr	r3, [r7, #12]
 8008ed6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008eda:	2b00      	cmp	r3, #0
 8008edc:	d00c      	beq.n	8008ef8 <HRTIM_Master_ISR+0x14c>
  {
    if((uint32_t)(mdierits & HRTIM_MASTER_IT_MUPD) != (uint32_t)RESET)
 8008ede:	68bb      	ldr	r3, [r7, #8]
 8008ee0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008ee4:	2b00      	cmp	r3, #0
 8008ee6:	d007      	beq.n	8008ef8 <HRTIM_Master_ISR+0x14c>
    {
      __HAL_HRTIM_MASTER_CLEAR_IT(hhrtim, HRTIM_MASTER_IT_MUPD);
 8008ee8:	687b      	ldr	r3, [r7, #4]
 8008eea:	681b      	ldr	r3, [r3, #0]
 8008eec:	2240      	movs	r2, #64	; 0x40
 8008eee:	609a      	str	r2, [r3, #8]

      /* Invoke registers update event callback */
#if (USE_HAL_HRTIM_REGISTER_CALLBACKS == 1)
      hhrtim->RegistersUpdateCallback(hhrtim, HRTIM_TIMERINDEX_MASTER);
#else
      HAL_HRTIM_RegistersUpdateCallback(hhrtim, HRTIM_TIMERINDEX_MASTER);
 8008ef0:	2105      	movs	r1, #5
 8008ef2:	6878      	ldr	r0, [r7, #4]
 8008ef4:	f7ff faf3 	bl	80084de <HAL_HRTIM_RegistersUpdateCallback>
#endif /* USE_HAL_HRTIM_REGISTER_CALLBACKS */
    }
  }
}
 8008ef8:	bf00      	nop
 8008efa:	3718      	adds	r7, #24
 8008efc:	46bd      	mov	sp, r7
 8008efe:	bd80      	pop	{r7, pc}

08008f00 <HRTIM_Timer_ISR>:
  *                   @arg HRTIM_TIMERINDEX_TIMER_E for timer E
  * @retval None
*/
static void HRTIM_Timer_ISR(HRTIM_HandleTypeDef * hhrtim,
                     uint32_t TimerIdx)
{
 8008f00:	b580      	push	{r7, lr}
 8008f02:	b084      	sub	sp, #16
 8008f04:	af00      	add	r7, sp, #0
 8008f06:	6078      	str	r0, [r7, #4]
 8008f08:	6039      	str	r1, [r7, #0]
  uint32_t tisrflags = READ_REG(hhrtim->Instance->sTimerxRegs[TimerIdx].TIMxISR);
 8008f0a:	687b      	ldr	r3, [r7, #4]
 8008f0c:	681a      	ldr	r2, [r3, #0]
 8008f0e:	683b      	ldr	r3, [r7, #0]
 8008f10:	3301      	adds	r3, #1
 8008f12:	01db      	lsls	r3, r3, #7
 8008f14:	4413      	add	r3, r2
 8008f16:	3304      	adds	r3, #4
 8008f18:	681b      	ldr	r3, [r3, #0]
 8008f1a:	60fb      	str	r3, [r7, #12]
  uint32_t tdierits  = READ_REG(hhrtim->Instance->sTimerxRegs[TimerIdx].TIMxDIER);
 8008f1c:	687b      	ldr	r3, [r7, #4]
 8008f1e:	681a      	ldr	r2, [r3, #0]
 8008f20:	683b      	ldr	r3, [r7, #0]
 8008f22:	01db      	lsls	r3, r3, #7
 8008f24:	4413      	add	r3, r2
 8008f26:	338c      	adds	r3, #140	; 0x8c
 8008f28:	681b      	ldr	r3, [r3, #0]
 8008f2a:	60bb      	str	r3, [r7, #8]

  /* Timer compare 1 event */
  if((uint32_t)(tisrflags & HRTIM_TIM_FLAG_CMP1) != (uint32_t)RESET)
 8008f2c:	68fb      	ldr	r3, [r7, #12]
 8008f2e:	f003 0301 	and.w	r3, r3, #1
 8008f32:	2b00      	cmp	r3, #0
 8008f34:	d010      	beq.n	8008f58 <HRTIM_Timer_ISR+0x58>
  {
    if((uint32_t)(tdierits & HRTIM_TIM_IT_CMP1) != (uint32_t)RESET)
 8008f36:	68bb      	ldr	r3, [r7, #8]
 8008f38:	f003 0301 	and.w	r3, r3, #1
 8008f3c:	2b00      	cmp	r3, #0
 8008f3e:	d00b      	beq.n	8008f58 <HRTIM_Timer_ISR+0x58>
    {
      __HAL_HRTIM_TIMER_CLEAR_IT(hhrtim, TimerIdx, HRTIM_TIM_IT_CMP1);
 8008f40:	687b      	ldr	r3, [r7, #4]
 8008f42:	681a      	ldr	r2, [r3, #0]
 8008f44:	683b      	ldr	r3, [r7, #0]
 8008f46:	01db      	lsls	r3, r3, #7
 8008f48:	4413      	add	r3, r2
 8008f4a:	3388      	adds	r3, #136	; 0x88
 8008f4c:	2201      	movs	r2, #1
 8008f4e:	601a      	str	r2, [r3, #0]

      /* Invoke compare 1 event callback */
#if (USE_HAL_HRTIM_REGISTER_CALLBACKS == 1)
      hhrtim->Compare1EventCallback(hhrtim, TimerIdx);
#else
      HAL_HRTIM_Compare1EventCallback(hhrtim, TimerIdx);
 8008f50:	6839      	ldr	r1, [r7, #0]
 8008f52:	6878      	ldr	r0, [r7, #4]
 8008f54:	f7ff fad9 	bl	800850a <HAL_HRTIM_Compare1EventCallback>
#endif /* USE_HAL_HRTIM_REGISTER_CALLBACKS */
    }
  }

  /* Timer compare 2 event */
  if((uint32_t)(tisrflags & HRTIM_TIM_FLAG_CMP2) != (uint32_t)RESET)
 8008f58:	68fb      	ldr	r3, [r7, #12]
 8008f5a:	f003 0302 	and.w	r3, r3, #2
 8008f5e:	2b00      	cmp	r3, #0
 8008f60:	d010      	beq.n	8008f84 <HRTIM_Timer_ISR+0x84>
  {
    if((uint32_t)(tdierits & HRTIM_TIM_IT_CMP2) != (uint32_t)RESET)
 8008f62:	68bb      	ldr	r3, [r7, #8]
 8008f64:	f003 0302 	and.w	r3, r3, #2
 8008f68:	2b00      	cmp	r3, #0
 8008f6a:	d00b      	beq.n	8008f84 <HRTIM_Timer_ISR+0x84>
    {
      __HAL_HRTIM_TIMER_CLEAR_IT(hhrtim, TimerIdx, HRTIM_TIM_IT_CMP2);
 8008f6c:	687b      	ldr	r3, [r7, #4]
 8008f6e:	681a      	ldr	r2, [r3, #0]
 8008f70:	683b      	ldr	r3, [r7, #0]
 8008f72:	01db      	lsls	r3, r3, #7
 8008f74:	4413      	add	r3, r2
 8008f76:	3388      	adds	r3, #136	; 0x88
 8008f78:	2202      	movs	r2, #2
 8008f7a:	601a      	str	r2, [r3, #0]

      /* Invoke compare 2 event callback */
#if (USE_HAL_HRTIM_REGISTER_CALLBACKS == 1)
      hhrtim->Compare2EventCallback(hhrtim, TimerIdx);
#else
      HAL_HRTIM_Compare2EventCallback(hhrtim, TimerIdx);
 8008f7c:	6839      	ldr	r1, [r7, #0]
 8008f7e:	6878      	ldr	r0, [r7, #4]
 8008f80:	f7ff face 	bl	8008520 <HAL_HRTIM_Compare2EventCallback>
#endif /* USE_HAL_HRTIM_REGISTER_CALLBACKS */
    }
  }

  /* Timer compare 3 event */
  if((uint32_t)(tisrflags & HRTIM_TIM_FLAG_CMP3) != (uint32_t)RESET)
 8008f84:	68fb      	ldr	r3, [r7, #12]
 8008f86:	f003 0304 	and.w	r3, r3, #4
 8008f8a:	2b00      	cmp	r3, #0
 8008f8c:	d010      	beq.n	8008fb0 <HRTIM_Timer_ISR+0xb0>
  {
    if((uint32_t)(tdierits & HRTIM_TIM_IT_CMP3) != (uint32_t)RESET)
 8008f8e:	68bb      	ldr	r3, [r7, #8]
 8008f90:	f003 0304 	and.w	r3, r3, #4
 8008f94:	2b00      	cmp	r3, #0
 8008f96:	d00b      	beq.n	8008fb0 <HRTIM_Timer_ISR+0xb0>
    {
      __HAL_HRTIM_TIMER_CLEAR_IT(hhrtim, TimerIdx, HRTIM_TIM_IT_CMP3);
 8008f98:	687b      	ldr	r3, [r7, #4]
 8008f9a:	681a      	ldr	r2, [r3, #0]
 8008f9c:	683b      	ldr	r3, [r7, #0]
 8008f9e:	01db      	lsls	r3, r3, #7
 8008fa0:	4413      	add	r3, r2
 8008fa2:	3388      	adds	r3, #136	; 0x88
 8008fa4:	2204      	movs	r2, #4
 8008fa6:	601a      	str	r2, [r3, #0]

      /* Invoke compare 3 event callback */
#if (USE_HAL_HRTIM_REGISTER_CALLBACKS == 1)
      hhrtim->Compare3EventCallback(hhrtim, TimerIdx);
#else
      HAL_HRTIM_Compare3EventCallback(hhrtim, TimerIdx);
 8008fa8:	6839      	ldr	r1, [r7, #0]
 8008faa:	6878      	ldr	r0, [r7, #4]
 8008fac:	f7ff fac3 	bl	8008536 <HAL_HRTIM_Compare3EventCallback>
#endif /* USE_HAL_HRTIM_REGISTER_CALLBACKS */
    }
  }

  /* Timer compare 4 event */
  if((uint32_t)(tisrflags & HRTIM_TIM_FLAG_CMP4) != (uint32_t)RESET)
 8008fb0:	68fb      	ldr	r3, [r7, #12]
 8008fb2:	f003 0308 	and.w	r3, r3, #8
 8008fb6:	2b00      	cmp	r3, #0
 8008fb8:	d010      	beq.n	8008fdc <HRTIM_Timer_ISR+0xdc>
  {
    if((uint32_t)(tdierits & HRTIM_TIM_IT_CMP4) != (uint32_t)RESET)
 8008fba:	68bb      	ldr	r3, [r7, #8]
 8008fbc:	f003 0308 	and.w	r3, r3, #8
 8008fc0:	2b00      	cmp	r3, #0
 8008fc2:	d00b      	beq.n	8008fdc <HRTIM_Timer_ISR+0xdc>
    {
      __HAL_HRTIM_TIMER_CLEAR_IT(hhrtim, TimerIdx, HRTIM_TIM_IT_CMP4);
 8008fc4:	687b      	ldr	r3, [r7, #4]
 8008fc6:	681a      	ldr	r2, [r3, #0]
 8008fc8:	683b      	ldr	r3, [r7, #0]
 8008fca:	01db      	lsls	r3, r3, #7
 8008fcc:	4413      	add	r3, r2
 8008fce:	3388      	adds	r3, #136	; 0x88
 8008fd0:	2208      	movs	r2, #8
 8008fd2:	601a      	str	r2, [r3, #0]

      /* Invoke compare 4 event callback */
#if (USE_HAL_HRTIM_REGISTER_CALLBACKS == 1)
      hhrtim->Compare4EventCallback(hhrtim, TimerIdx);
#else
      HAL_HRTIM_Compare4EventCallback(hhrtim, TimerIdx);
 8008fd4:	6839      	ldr	r1, [r7, #0]
 8008fd6:	6878      	ldr	r0, [r7, #4]
 8008fd8:	f7ff fab8 	bl	800854c <HAL_HRTIM_Compare4EventCallback>
#endif /* USE_HAL_HRTIM_REGISTER_CALLBACKS */
    }
  }

  /* Timer repetition event */
  if((uint32_t)(tisrflags & HRTIM_TIM_FLAG_REP) != (uint32_t)RESET)
 8008fdc:	68fb      	ldr	r3, [r7, #12]
 8008fde:	f003 0310 	and.w	r3, r3, #16
 8008fe2:	2b00      	cmp	r3, #0
 8008fe4:	d010      	beq.n	8009008 <HRTIM_Timer_ISR+0x108>
  {
    if((uint32_t)(tdierits & HRTIM_TIM_IT_REP) != (uint32_t)RESET)
 8008fe6:	68bb      	ldr	r3, [r7, #8]
 8008fe8:	f003 0310 	and.w	r3, r3, #16
 8008fec:	2b00      	cmp	r3, #0
 8008fee:	d00b      	beq.n	8009008 <HRTIM_Timer_ISR+0x108>
    {
      __HAL_HRTIM_TIMER_CLEAR_IT(hhrtim, TimerIdx, HRTIM_TIM_IT_REP);
 8008ff0:	687b      	ldr	r3, [r7, #4]
 8008ff2:	681a      	ldr	r2, [r3, #0]
 8008ff4:	683b      	ldr	r3, [r7, #0]
 8008ff6:	01db      	lsls	r3, r3, #7
 8008ff8:	4413      	add	r3, r2
 8008ffa:	3388      	adds	r3, #136	; 0x88
 8008ffc:	2210      	movs	r2, #16
 8008ffe:	601a      	str	r2, [r3, #0]

      /* Invoke repetition event callback */
#if (USE_HAL_HRTIM_REGISTER_CALLBACKS == 1)
      hhrtim->RepetitionEventCallback(hhrtim, TimerIdx);
#else
      HAL_HRTIM_RepetitionEventCallback(hhrtim, TimerIdx);
 8009000:	6839      	ldr	r1, [r7, #0]
 8009002:	6878      	ldr	r0, [r7, #4]
 8009004:	f7ff fa76 	bl	80084f4 <HAL_HRTIM_RepetitionEventCallback>
#endif /* USE_HAL_HRTIM_REGISTER_CALLBACKS */
    }
  }

  /* Timer registers update event */
  if((uint32_t)(tisrflags & HRTIM_TIM_FLAG_UPD) != (uint32_t)RESET)
 8009008:	68fb      	ldr	r3, [r7, #12]
 800900a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800900e:	2b00      	cmp	r3, #0
 8009010:	d010      	beq.n	8009034 <HRTIM_Timer_ISR+0x134>
  {
    if((uint32_t)(tdierits & HRTIM_TIM_IT_UPD) != (uint32_t)RESET)
 8009012:	68bb      	ldr	r3, [r7, #8]
 8009014:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009018:	2b00      	cmp	r3, #0
 800901a:	d00b      	beq.n	8009034 <HRTIM_Timer_ISR+0x134>
    {
      __HAL_HRTIM_TIMER_CLEAR_IT(hhrtim, TimerIdx, HRTIM_TIM_IT_UPD);
 800901c:	687b      	ldr	r3, [r7, #4]
 800901e:	681a      	ldr	r2, [r3, #0]
 8009020:	683b      	ldr	r3, [r7, #0]
 8009022:	01db      	lsls	r3, r3, #7
 8009024:	4413      	add	r3, r2
 8009026:	3388      	adds	r3, #136	; 0x88
 8009028:	2240      	movs	r2, #64	; 0x40
 800902a:	601a      	str	r2, [r3, #0]

      /* Invoke registers update event callback */
#if (USE_HAL_HRTIM_REGISTER_CALLBACKS == 1)
      hhrtim->RegistersUpdateCallback(hhrtim, TimerIdx);
#else
      HAL_HRTIM_RegistersUpdateCallback(hhrtim, TimerIdx);
 800902c:	6839      	ldr	r1, [r7, #0]
 800902e:	6878      	ldr	r0, [r7, #4]
 8009030:	f7ff fa55 	bl	80084de <HAL_HRTIM_RegistersUpdateCallback>
#endif /* USE_HAL_HRTIM_REGISTER_CALLBACKS */
    }
  }

  /* Timer capture 1 event */
  if((uint32_t)(tisrflags & HRTIM_TIM_FLAG_CPT1) != (uint32_t)RESET)
 8009034:	68fb      	ldr	r3, [r7, #12]
 8009036:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800903a:	2b00      	cmp	r3, #0
 800903c:	d010      	beq.n	8009060 <HRTIM_Timer_ISR+0x160>
  {
    if((uint32_t)(tdierits & HRTIM_TIM_IT_CPT1) != (uint32_t)RESET)
 800903e:	68bb      	ldr	r3, [r7, #8]
 8009040:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8009044:	2b00      	cmp	r3, #0
 8009046:	d00b      	beq.n	8009060 <HRTIM_Timer_ISR+0x160>
    {
      __HAL_HRTIM_TIMER_CLEAR_IT(hhrtim, TimerIdx, HRTIM_TIM_IT_CPT1);
 8009048:	687b      	ldr	r3, [r7, #4]
 800904a:	681a      	ldr	r2, [r3, #0]
 800904c:	683b      	ldr	r3, [r7, #0]
 800904e:	01db      	lsls	r3, r3, #7
 8009050:	4413      	add	r3, r2
 8009052:	3388      	adds	r3, #136	; 0x88
 8009054:	2280      	movs	r2, #128	; 0x80
 8009056:	601a      	str	r2, [r3, #0]

      /* Invoke capture 1 event callback */
#if (USE_HAL_HRTIM_REGISTER_CALLBACKS == 1)
      hhrtim->Capture1EventCallback(hhrtim, TimerIdx);
#else
      HAL_HRTIM_Capture1EventCallback(hhrtim, TimerIdx);
 8009058:	6839      	ldr	r1, [r7, #0]
 800905a:	6878      	ldr	r0, [r7, #4]
 800905c:	f7ff fa81 	bl	8008562 <HAL_HRTIM_Capture1EventCallback>
#endif /* USE_HAL_HRTIM_REGISTER_CALLBACKS */
    }
  }

  /* Timer capture 2 event */
  if((uint32_t)(tisrflags & HRTIM_TIM_FLAG_CPT2) != (uint32_t)RESET)
 8009060:	68fb      	ldr	r3, [r7, #12]
 8009062:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8009066:	2b00      	cmp	r3, #0
 8009068:	d011      	beq.n	800908e <HRTIM_Timer_ISR+0x18e>
  {
    if((uint32_t)(tdierits & HRTIM_TIM_IT_CPT2) != (uint32_t)RESET)
 800906a:	68bb      	ldr	r3, [r7, #8]
 800906c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8009070:	2b00      	cmp	r3, #0
 8009072:	d00c      	beq.n	800908e <HRTIM_Timer_ISR+0x18e>
    {
      __HAL_HRTIM_TIMER_CLEAR_IT(hhrtim, TimerIdx, HRTIM_TIM_IT_CPT2);
 8009074:	687b      	ldr	r3, [r7, #4]
 8009076:	681a      	ldr	r2, [r3, #0]
 8009078:	683b      	ldr	r3, [r7, #0]
 800907a:	01db      	lsls	r3, r3, #7
 800907c:	4413      	add	r3, r2
 800907e:	3388      	adds	r3, #136	; 0x88
 8009080:	f44f 7280 	mov.w	r2, #256	; 0x100
 8009084:	601a      	str	r2, [r3, #0]

      /* Invoke capture 2 event callback */
#if (USE_HAL_HRTIM_REGISTER_CALLBACKS == 1)
      hhrtim->Capture2EventCallback(hhrtim, TimerIdx);
#else
      HAL_HRTIM_Capture2EventCallback(hhrtim, TimerIdx);
 8009086:	6839      	ldr	r1, [r7, #0]
 8009088:	6878      	ldr	r0, [r7, #4]
 800908a:	f7ff fa75 	bl	8008578 <HAL_HRTIM_Capture2EventCallback>
#endif /* USE_HAL_HRTIM_REGISTER_CALLBACKS */
    }
  }

  /* Timer output 1 set event */
  if((uint32_t)(tisrflags & HRTIM_TIM_FLAG_SET1) != (uint32_t)RESET)
 800908e:	68fb      	ldr	r3, [r7, #12]
 8009090:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8009094:	2b00      	cmp	r3, #0
 8009096:	d011      	beq.n	80090bc <HRTIM_Timer_ISR+0x1bc>
  {
    if((uint32_t)(tdierits & HRTIM_TIM_IT_SET1) != (uint32_t)RESET)
 8009098:	68bb      	ldr	r3, [r7, #8]
 800909a:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800909e:	2b00      	cmp	r3, #0
 80090a0:	d00c      	beq.n	80090bc <HRTIM_Timer_ISR+0x1bc>
    {
      __HAL_HRTIM_TIMER_CLEAR_IT(hhrtim, TimerIdx, HRTIM_TIM_IT_SET1);
 80090a2:	687b      	ldr	r3, [r7, #4]
 80090a4:	681a      	ldr	r2, [r3, #0]
 80090a6:	683b      	ldr	r3, [r7, #0]
 80090a8:	01db      	lsls	r3, r3, #7
 80090aa:	4413      	add	r3, r2
 80090ac:	3388      	adds	r3, #136	; 0x88
 80090ae:	f44f 7200 	mov.w	r2, #512	; 0x200
 80090b2:	601a      	str	r2, [r3, #0]

      /* Invoke output 1 set event callback */
#if (USE_HAL_HRTIM_REGISTER_CALLBACKS == 1)
      hhrtim->Output1SetCallback(hhrtim, TimerIdx);
#else
      HAL_HRTIM_Output1SetCallback(hhrtim, TimerIdx);
 80090b4:	6839      	ldr	r1, [r7, #0]
 80090b6:	6878      	ldr	r0, [r7, #4]
 80090b8:	f7ff fa7f 	bl	80085ba <HAL_HRTIM_Output1SetCallback>
#endif /* USE_HAL_HRTIM_REGISTER_CALLBACKS */
    }
  }

  /* Timer output 1 reset event */
  if((uint32_t)(tisrflags & HRTIM_TIM_FLAG_RST1) != (uint32_t)RESET)
 80090bc:	68fb      	ldr	r3, [r7, #12]
 80090be:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80090c2:	2b00      	cmp	r3, #0
 80090c4:	d011      	beq.n	80090ea <HRTIM_Timer_ISR+0x1ea>
  {
    if((uint32_t)(tdierits & HRTIM_TIM_IT_RST1) != (uint32_t)RESET)
 80090c6:	68bb      	ldr	r3, [r7, #8]
 80090c8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80090cc:	2b00      	cmp	r3, #0
 80090ce:	d00c      	beq.n	80090ea <HRTIM_Timer_ISR+0x1ea>
    {
      __HAL_HRTIM_TIMER_CLEAR_IT(hhrtim, TimerIdx, HRTIM_TIM_IT_RST1);
 80090d0:	687b      	ldr	r3, [r7, #4]
 80090d2:	681a      	ldr	r2, [r3, #0]
 80090d4:	683b      	ldr	r3, [r7, #0]
 80090d6:	01db      	lsls	r3, r3, #7
 80090d8:	4413      	add	r3, r2
 80090da:	3388      	adds	r3, #136	; 0x88
 80090dc:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80090e0:	601a      	str	r2, [r3, #0]

      /* Invoke output 1 reset event callback */
#if (USE_HAL_HRTIM_REGISTER_CALLBACKS == 1)
      hhrtim->Output1ResetCallback(hhrtim, TimerIdx);
#else
      HAL_HRTIM_Output1ResetCallback(hhrtim, TimerIdx);
 80090e2:	6839      	ldr	r1, [r7, #0]
 80090e4:	6878      	ldr	r0, [r7, #4]
 80090e6:	f7ff fa73 	bl	80085d0 <HAL_HRTIM_Output1ResetCallback>
#endif /* USE_HAL_HRTIM_REGISTER_CALLBACKS */
    }
  }

  /* Timer output 2 set event */
  if((uint32_t)(tisrflags & HRTIM_TIM_FLAG_SET2) != (uint32_t)RESET)
 80090ea:	68fb      	ldr	r3, [r7, #12]
 80090ec:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80090f0:	2b00      	cmp	r3, #0
 80090f2:	d011      	beq.n	8009118 <HRTIM_Timer_ISR+0x218>
  {
    if((uint32_t)(tdierits & HRTIM_TIM_IT_SET2) != (uint32_t)RESET)
 80090f4:	68bb      	ldr	r3, [r7, #8]
 80090f6:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80090fa:	2b00      	cmp	r3, #0
 80090fc:	d00c      	beq.n	8009118 <HRTIM_Timer_ISR+0x218>
    {
      __HAL_HRTIM_TIMER_CLEAR_IT(hhrtim, TimerIdx, HRTIM_TIM_IT_SET2);
 80090fe:	687b      	ldr	r3, [r7, #4]
 8009100:	681a      	ldr	r2, [r3, #0]
 8009102:	683b      	ldr	r3, [r7, #0]
 8009104:	01db      	lsls	r3, r3, #7
 8009106:	4413      	add	r3, r2
 8009108:	3388      	adds	r3, #136	; 0x88
 800910a:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800910e:	601a      	str	r2, [r3, #0]

      /* Invoke output 2 set event callback */
#if (USE_HAL_HRTIM_REGISTER_CALLBACKS == 1)
      hhrtim->Output2SetCallback(hhrtim, TimerIdx);
#else
      HAL_HRTIM_Output2SetCallback(hhrtim, TimerIdx);
 8009110:	6839      	ldr	r1, [r7, #0]
 8009112:	6878      	ldr	r0, [r7, #4]
 8009114:	f7ff fa67 	bl	80085e6 <HAL_HRTIM_Output2SetCallback>
#endif /* USE_HAL_HRTIM_REGISTER_CALLBACKS */
    }
  }

  /* Timer output 2 reset event */
  if((uint32_t)(tisrflags & HRTIM_TIM_FLAG_RST2) != (uint32_t)RESET)
 8009118:	68fb      	ldr	r3, [r7, #12]
 800911a:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800911e:	2b00      	cmp	r3, #0
 8009120:	d011      	beq.n	8009146 <HRTIM_Timer_ISR+0x246>
  {
    if((uint32_t)(tdierits & HRTIM_TIM_IT_RST2) != (uint32_t)RESET)
 8009122:	68bb      	ldr	r3, [r7, #8]
 8009124:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8009128:	2b00      	cmp	r3, #0
 800912a:	d00c      	beq.n	8009146 <HRTIM_Timer_ISR+0x246>
    {
      __HAL_HRTIM_TIMER_CLEAR_IT(hhrtim, TimerIdx, HRTIM_TIM_IT_RST2);
 800912c:	687b      	ldr	r3, [r7, #4]
 800912e:	681a      	ldr	r2, [r3, #0]
 8009130:	683b      	ldr	r3, [r7, #0]
 8009132:	01db      	lsls	r3, r3, #7
 8009134:	4413      	add	r3, r2
 8009136:	3388      	adds	r3, #136	; 0x88
 8009138:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 800913c:	601a      	str	r2, [r3, #0]

      /* Invoke output 2 reset event callback */
#if (USE_HAL_HRTIM_REGISTER_CALLBACKS == 1)
      hhrtim->Output2ResetCallback(hhrtim, TimerIdx);
#else
      HAL_HRTIM_Output2ResetCallback(hhrtim, TimerIdx);
 800913e:	6839      	ldr	r1, [r7, #0]
 8009140:	6878      	ldr	r0, [r7, #4]
 8009142:	f7ff fa5b 	bl	80085fc <HAL_HRTIM_Output2ResetCallback>
#endif /* USE_HAL_HRTIM_REGISTER_CALLBACKS */
    }
  }

  /* Timer reset event */
  if((uint32_t)(tisrflags & HRTIM_TIM_FLAG_RST) != (uint32_t)RESET)
 8009146:	68fb      	ldr	r3, [r7, #12]
 8009148:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800914c:	2b00      	cmp	r3, #0
 800914e:	d011      	beq.n	8009174 <HRTIM_Timer_ISR+0x274>
  {
    if((uint32_t)(tdierits & HRTIM_TIM_IT_RST) != (uint32_t)RESET)
 8009150:	68bb      	ldr	r3, [r7, #8]
 8009152:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8009156:	2b00      	cmp	r3, #0
 8009158:	d00c      	beq.n	8009174 <HRTIM_Timer_ISR+0x274>
    {
      __HAL_HRTIM_TIMER_CLEAR_IT(hhrtim, TimerIdx, HRTIM_TIM_IT_RST);
 800915a:	687b      	ldr	r3, [r7, #4]
 800915c:	681a      	ldr	r2, [r3, #0]
 800915e:	683b      	ldr	r3, [r7, #0]
 8009160:	01db      	lsls	r3, r3, #7
 8009162:	4413      	add	r3, r2
 8009164:	3388      	adds	r3, #136	; 0x88
 8009166:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 800916a:	601a      	str	r2, [r3, #0]

      /* Invoke timer reset callback */
#if (USE_HAL_HRTIM_REGISTER_CALLBACKS == 1)
      hhrtim->CounterResetCallback(hhrtim, TimerIdx);
#else
      HAL_HRTIM_CounterResetCallback(hhrtim, TimerIdx);
 800916c:	6839      	ldr	r1, [r7, #0]
 800916e:	6878      	ldr	r0, [r7, #4]
 8009170:	f7ff fa18 	bl	80085a4 <HAL_HRTIM_CounterResetCallback>
#endif /* USE_HAL_HRTIM_REGISTER_CALLBACKS */
    }
  }

  /* Delayed protection event */
  if((uint32_t)(tisrflags & HRTIM_TIM_FLAG_DLYPRT) != (uint32_t)RESET)
 8009174:	68fb      	ldr	r3, [r7, #12]
 8009176:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800917a:	2b00      	cmp	r3, #0
 800917c:	d011      	beq.n	80091a2 <HRTIM_Timer_ISR+0x2a2>
  {
    if((uint32_t)(tdierits & HRTIM_TIM_IT_DLYPRT) != (uint32_t)RESET)
 800917e:	68bb      	ldr	r3, [r7, #8]
 8009180:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8009184:	2b00      	cmp	r3, #0
 8009186:	d00c      	beq.n	80091a2 <HRTIM_Timer_ISR+0x2a2>
    {
      __HAL_HRTIM_TIMER_CLEAR_IT(hhrtim, TimerIdx, HRTIM_TIM_IT_DLYPRT);
 8009188:	687b      	ldr	r3, [r7, #4]
 800918a:	681a      	ldr	r2, [r3, #0]
 800918c:	683b      	ldr	r3, [r7, #0]
 800918e:	01db      	lsls	r3, r3, #7
 8009190:	4413      	add	r3, r2
 8009192:	3388      	adds	r3, #136	; 0x88
 8009194:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8009198:	601a      	str	r2, [r3, #0]

      /* Invoke delayed protection callback */
#if (USE_HAL_HRTIM_REGISTER_CALLBACKS == 1)
      hhrtim->DelayedProtectionCallback(hhrtim, TimerIdx);
#else
      HAL_HRTIM_DelayedProtectionCallback(hhrtim, TimerIdx);
 800919a:	6839      	ldr	r1, [r7, #0]
 800919c:	6878      	ldr	r0, [r7, #4]
 800919e:	f7ff f9f6 	bl	800858e <HAL_HRTIM_DelayedProtectionCallback>
#endif /* USE_HAL_HRTIM_REGISTER_CALLBACKS */
    }
  }
}
 80091a2:	bf00      	nop
 80091a4:	3710      	adds	r7, #16
 80091a6:	46bd      	mov	sp, r7
 80091a8:	bd80      	pop	{r7, pc}
	...

080091ac <HAL_LPTIM_Init>:
  *         LPTIM_InitTypeDef and initialize the associated handle.
  * @param  hlptim LPTIM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_LPTIM_Init(LPTIM_HandleTypeDef *hlptim)
{
 80091ac:	b580      	push	{r7, lr}
 80091ae:	b084      	sub	sp, #16
 80091b0:	af00      	add	r7, sp, #0
 80091b2:	6078      	str	r0, [r7, #4]
  uint32_t tmpcfgr;

  /* Check the LPTIM handle allocation */
  if (hlptim == NULL)
 80091b4:	687b      	ldr	r3, [r7, #4]
 80091b6:	2b00      	cmp	r3, #0
 80091b8:	d101      	bne.n	80091be <HAL_LPTIM_Init+0x12>
  {
    return HAL_ERROR;
 80091ba:	2301      	movs	r3, #1
 80091bc:	e097      	b.n	80092ee <HAL_LPTIM_Init+0x142>
  /* Check the parameters */
  assert_param(IS_LPTIM_INSTANCE(hlptim->Instance));

  assert_param(IS_LPTIM_CLOCK_SOURCE(hlptim->Init.Clock.Source));
  assert_param(IS_LPTIM_CLOCK_PRESCALER(hlptim->Init.Clock.Prescaler));
  if ((hlptim->Init.Clock.Source == LPTIM_CLOCKSOURCE_ULPTIM)
 80091be:	687b      	ldr	r3, [r7, #4]
 80091c0:	685b      	ldr	r3, [r3, #4]
 80091c2:	2b01      	cmp	r3, #1
  }
  assert_param(IS_LPTIM_OUTPUT_POLARITY(hlptim->Init.OutputPolarity));
  assert_param(IS_LPTIM_UPDATE_MODE(hlptim->Init.UpdateMode));
  assert_param(IS_LPTIM_COUNTER_SOURCE(hlptim->Init.CounterSource));

  if (hlptim->State == HAL_LPTIM_STATE_RESET)
 80091c4:	687b      	ldr	r3, [r7, #4]
 80091c6:	f893 3036 	ldrb.w	r3, [r3, #54]	; 0x36
 80091ca:	b2db      	uxtb	r3, r3
 80091cc:	2b00      	cmp	r3, #0
 80091ce:	d106      	bne.n	80091de <HAL_LPTIM_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hlptim->Lock = HAL_UNLOCKED;
 80091d0:	687b      	ldr	r3, [r7, #4]
 80091d2:	2200      	movs	r2, #0
 80091d4:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hlptim->MspInitCallback(hlptim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_LPTIM_MspInit(hlptim);
 80091d8:	6878      	ldr	r0, [r7, #4]
 80091da:	f7fa f9fd 	bl	80035d8 <HAL_LPTIM_MspInit>
#endif /* USE_HAL_LPTIM_REGISTER_CALLBACKS */
  }

  /* Change the LPTIM state */
  hlptim->State = HAL_LPTIM_STATE_BUSY;
 80091de:	687b      	ldr	r3, [r7, #4]
 80091e0:	2202      	movs	r2, #2
 80091e2:	f883 2036 	strb.w	r2, [r3, #54]	; 0x36

  /* Get the LPTIMx CFGR value */
  tmpcfgr = hlptim->Instance->CFGR;
 80091e6:	687b      	ldr	r3, [r7, #4]
 80091e8:	681b      	ldr	r3, [r3, #0]
 80091ea:	68db      	ldr	r3, [r3, #12]
 80091ec:	60fb      	str	r3, [r7, #12]

  if ((hlptim->Init.Clock.Source == LPTIM_CLOCKSOURCE_ULPTIM)
 80091ee:	687b      	ldr	r3, [r7, #4]
 80091f0:	685b      	ldr	r3, [r3, #4]
 80091f2:	2b01      	cmp	r3, #1
 80091f4:	d004      	beq.n	8009200 <HAL_LPTIM_Init+0x54>
      || (hlptim->Init.CounterSource == LPTIM_COUNTERSOURCE_EXTERNAL))
 80091f6:	687b      	ldr	r3, [r7, #4]
 80091f8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80091fa:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 80091fe:	d103      	bne.n	8009208 <HAL_LPTIM_Init+0x5c>
  {
    tmpcfgr &= (uint32_t)(~(LPTIM_CFGR_CKPOL | LPTIM_CFGR_CKFLT));
 8009200:	68fb      	ldr	r3, [r7, #12]
 8009202:	f023 031e 	bic.w	r3, r3, #30
 8009206:	60fb      	str	r3, [r7, #12]
  }
  if (hlptim->Init.Trigger.Source != LPTIM_TRIGSOURCE_SOFTWARE)
 8009208:	687b      	ldr	r3, [r7, #4]
 800920a:	695b      	ldr	r3, [r3, #20]
 800920c:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8009210:	4293      	cmp	r3, r2
 8009212:	d003      	beq.n	800921c <HAL_LPTIM_Init+0x70>
  {
    tmpcfgr &= (uint32_t)(~(LPTIM_CFGR_TRGFLT | LPTIM_CFGR_TRIGSEL));
 8009214:	68fa      	ldr	r2, [r7, #12]
 8009216:	4b38      	ldr	r3, [pc, #224]	; (80092f8 <HAL_LPTIM_Init+0x14c>)
 8009218:	4013      	ands	r3, r2
 800921a:	60fb      	str	r3, [r7, #12]
  }

  /* Clear CKSEL, PRESC, TRIGEN, TRGFLT, WAVPOL, PRELOAD & COUNTMODE bits */
  tmpcfgr &= (uint32_t)(~(LPTIM_CFGR_CKSEL | LPTIM_CFGR_TRIGEN | LPTIM_CFGR_PRELOAD |
 800921c:	68fa      	ldr	r2, [r7, #12]
 800921e:	4b37      	ldr	r3, [pc, #220]	; (80092fc <HAL_LPTIM_Init+0x150>)
 8009220:	4013      	ands	r3, r2
 8009222:	60fb      	str	r3, [r7, #12]
                          LPTIM_CFGR_WAVPOL | LPTIM_CFGR_PRESC | LPTIM_CFGR_COUNTMODE));

  /* Set initialization parameters */
  tmpcfgr |= (hlptim->Init.Clock.Source    |
 8009224:	687b      	ldr	r3, [r7, #4]
 8009226:	685a      	ldr	r2, [r3, #4]
              hlptim->Init.Clock.Prescaler |
 8009228:	687b      	ldr	r3, [r7, #4]
 800922a:	689b      	ldr	r3, [r3, #8]
  tmpcfgr |= (hlptim->Init.Clock.Source    |
 800922c:	431a      	orrs	r2, r3
              hlptim->Init.OutputPolarity  |
 800922e:	687b      	ldr	r3, [r7, #4]
 8009230:	6a1b      	ldr	r3, [r3, #32]
              hlptim->Init.Clock.Prescaler |
 8009232:	431a      	orrs	r2, r3
              hlptim->Init.UpdateMode      |
 8009234:	687b      	ldr	r3, [r7, #4]
 8009236:	6a5b      	ldr	r3, [r3, #36]	; 0x24
              hlptim->Init.OutputPolarity  |
 8009238:	431a      	orrs	r2, r3
              hlptim->Init.CounterSource);
 800923a:	687b      	ldr	r3, [r7, #4]
 800923c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
              hlptim->Init.UpdateMode      |
 800923e:	4313      	orrs	r3, r2
  tmpcfgr |= (hlptim->Init.Clock.Source    |
 8009240:	68fa      	ldr	r2, [r7, #12]
 8009242:	4313      	orrs	r3, r2
 8009244:	60fb      	str	r3, [r7, #12]

  /* Glitch filters for internal triggers and  external inputs are configured
   * only if an internal clock source is provided to the LPTIM
   */
  if (hlptim->Init.Clock.Source == LPTIM_CLOCKSOURCE_APBCLOCK_LPOSC)
 8009246:	687b      	ldr	r3, [r7, #4]
 8009248:	685b      	ldr	r3, [r3, #4]
 800924a:	2b00      	cmp	r3, #0
 800924c:	d107      	bne.n	800925e <HAL_LPTIM_Init+0xb2>
  {
    tmpcfgr |= (hlptim->Init.Trigger.SampleTime |
 800924e:	687b      	ldr	r3, [r7, #4]
 8009250:	69da      	ldr	r2, [r3, #28]
                hlptim->Init.UltraLowPowerClock.SampleTime);
 8009252:	687b      	ldr	r3, [r7, #4]
 8009254:	691b      	ldr	r3, [r3, #16]
    tmpcfgr |= (hlptim->Init.Trigger.SampleTime |
 8009256:	4313      	orrs	r3, r2
 8009258:	68fa      	ldr	r2, [r7, #12]
 800925a:	4313      	orrs	r3, r2
 800925c:	60fb      	str	r3, [r7, #12]
  }

  /* Configure LPTIM external clock polarity and digital filter */
  if ((hlptim->Init.Clock.Source == LPTIM_CLOCKSOURCE_ULPTIM)
 800925e:	687b      	ldr	r3, [r7, #4]
 8009260:	685b      	ldr	r3, [r3, #4]
 8009262:	2b01      	cmp	r3, #1
 8009264:	d004      	beq.n	8009270 <HAL_LPTIM_Init+0xc4>
      || (hlptim->Init.CounterSource == LPTIM_COUNTERSOURCE_EXTERNAL))
 8009266:	687b      	ldr	r3, [r7, #4]
 8009268:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800926a:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 800926e:	d107      	bne.n	8009280 <HAL_LPTIM_Init+0xd4>
  {
    tmpcfgr |= (hlptim->Init.UltraLowPowerClock.Polarity |
 8009270:	687b      	ldr	r3, [r7, #4]
 8009272:	68da      	ldr	r2, [r3, #12]
                hlptim->Init.UltraLowPowerClock.SampleTime);
 8009274:	687b      	ldr	r3, [r7, #4]
 8009276:	691b      	ldr	r3, [r3, #16]
    tmpcfgr |= (hlptim->Init.UltraLowPowerClock.Polarity |
 8009278:	4313      	orrs	r3, r2
 800927a:	68fa      	ldr	r2, [r7, #12]
 800927c:	4313      	orrs	r3, r2
 800927e:	60fb      	str	r3, [r7, #12]
  }

  /* Configure LPTIM external trigger */
  if (hlptim->Init.Trigger.Source != LPTIM_TRIGSOURCE_SOFTWARE)
 8009280:	687b      	ldr	r3, [r7, #4]
 8009282:	695b      	ldr	r3, [r3, #20]
 8009284:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8009288:	4293      	cmp	r3, r2
 800928a:	d00a      	beq.n	80092a2 <HAL_LPTIM_Init+0xf6>
  {
    /* Enable External trigger and set the trigger source */
    tmpcfgr |= (hlptim->Init.Trigger.Source     |
 800928c:	687b      	ldr	r3, [r7, #4]
 800928e:	695a      	ldr	r2, [r3, #20]
                hlptim->Init.Trigger.ActiveEdge |
 8009290:	687b      	ldr	r3, [r7, #4]
 8009292:	699b      	ldr	r3, [r3, #24]
    tmpcfgr |= (hlptim->Init.Trigger.Source     |
 8009294:	431a      	orrs	r2, r3
                hlptim->Init.Trigger.SampleTime);
 8009296:	687b      	ldr	r3, [r7, #4]
 8009298:	69db      	ldr	r3, [r3, #28]
                hlptim->Init.Trigger.ActiveEdge |
 800929a:	4313      	orrs	r3, r2
    tmpcfgr |= (hlptim->Init.Trigger.Source     |
 800929c:	68fa      	ldr	r2, [r7, #12]
 800929e:	4313      	orrs	r3, r2
 80092a0:	60fb      	str	r3, [r7, #12]
  }

  /* Write to LPTIMx CFGR */
  hlptim->Instance->CFGR = tmpcfgr;
 80092a2:	687b      	ldr	r3, [r7, #4]
 80092a4:	681b      	ldr	r3, [r3, #0]
 80092a6:	68fa      	ldr	r2, [r7, #12]
 80092a8:	60da      	str	r2, [r3, #12]

  /* Configure LPTIM input sources */
  if ((hlptim->Instance == LPTIM1) || (hlptim->Instance == LPTIM2))
 80092aa:	687b      	ldr	r3, [r7, #4]
 80092ac:	681b      	ldr	r3, [r3, #0]
 80092ae:	4a14      	ldr	r2, [pc, #80]	; (8009300 <HAL_LPTIM_Init+0x154>)
 80092b0:	4293      	cmp	r3, r2
 80092b2:	d004      	beq.n	80092be <HAL_LPTIM_Init+0x112>
 80092b4:	687b      	ldr	r3, [r7, #4]
 80092b6:	681b      	ldr	r3, [r3, #0]
 80092b8:	4a12      	ldr	r2, [pc, #72]	; (8009304 <HAL_LPTIM_Init+0x158>)
 80092ba:	4293      	cmp	r3, r2
 80092bc:	d108      	bne.n	80092d0 <HAL_LPTIM_Init+0x124>
    /* Check LPTIM Input1 and Input2 sources */
    assert_param(IS_LPTIM_INPUT1_SOURCE(hlptim->Instance, hlptim->Init.Input1Source));
    assert_param(IS_LPTIM_INPUT2_SOURCE(hlptim->Instance, hlptim->Init.Input2Source));

    /* Configure LPTIM Input1 and Input2 sources */
    hlptim->Instance->CFGR2 = (hlptim->Init.Input1Source | hlptim->Init.Input2Source);
 80092be:	687b      	ldr	r3, [r7, #4]
 80092c0:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 80092c2:	687b      	ldr	r3, [r7, #4]
 80092c4:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80092c6:	687b      	ldr	r3, [r7, #4]
 80092c8:	681b      	ldr	r3, [r3, #0]
 80092ca:	430a      	orrs	r2, r1
 80092cc:	625a      	str	r2, [r3, #36]	; 0x24
 80092ce:	e009      	b.n	80092e4 <HAL_LPTIM_Init+0x138>
  }
  else
  {
    if (hlptim->Instance == LPTIM3)
 80092d0:	687b      	ldr	r3, [r7, #4]
 80092d2:	681b      	ldr	r3, [r3, #0]
 80092d4:	4a0c      	ldr	r2, [pc, #48]	; (8009308 <HAL_LPTIM_Init+0x15c>)
 80092d6:	4293      	cmp	r3, r2
 80092d8:	d104      	bne.n	80092e4 <HAL_LPTIM_Init+0x138>
    {
      /* Check LPTIM3 Input1 source */
      assert_param(IS_LPTIM_INPUT1_SOURCE(hlptim->Instance, hlptim->Init.Input1Source));

      /* Configure LPTIM3 Input1 source */
      hlptim->Instance->CFGR2 = hlptim->Init.Input1Source;
 80092da:	687b      	ldr	r3, [r7, #4]
 80092dc:	681b      	ldr	r3, [r3, #0]
 80092de:	687a      	ldr	r2, [r7, #4]
 80092e0:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 80092e2:	625a      	str	r2, [r3, #36]	; 0x24
    }
  }

  /* Change the LPTIM state */
  hlptim->State = HAL_LPTIM_STATE_READY;
 80092e4:	687b      	ldr	r3, [r7, #4]
 80092e6:	2201      	movs	r2, #1
 80092e8:	f883 2036 	strb.w	r2, [r3, #54]	; 0x36

  /* Return function status */
  return HAL_OK;
 80092ec:	2300      	movs	r3, #0
}
 80092ee:	4618      	mov	r0, r3
 80092f0:	3710      	adds	r7, #16
 80092f2:	46bd      	mov	sp, r7
 80092f4:	bd80      	pop	{r7, pc}
 80092f6:	bf00      	nop
 80092f8:	ffff1f3f 	.word	0xffff1f3f
 80092fc:	ff19f1fe 	.word	0xff19f1fe
 8009300:	40002400 	.word	0x40002400
 8009304:	58002400 	.word	0x58002400
 8009308:	58002800 	.word	0x58002800

0800930c <HAL_LPTIM_Counter_Start_IT>:
  * @param  Period Specifies the Autoreload value.
  *         This parameter must be a value between 0x0001 and 0xFFFF.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_LPTIM_Counter_Start_IT(LPTIM_HandleTypeDef *hlptim, uint32_t Period)
{
 800930c:	b580      	push	{r7, lr}
 800930e:	b082      	sub	sp, #8
 8009310:	af00      	add	r7, sp, #0
 8009312:	6078      	str	r0, [r7, #4]
 8009314:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_LPTIM_INSTANCE(hlptim->Instance));
  assert_param(IS_LPTIM_PERIOD(Period));

  /* Set the LPTIM state */
  hlptim->State = HAL_LPTIM_STATE_BUSY;
 8009316:	687b      	ldr	r3, [r7, #4]
 8009318:	2202      	movs	r2, #2
 800931a:	f883 2036 	strb.w	r2, [r3, #54]	; 0x36

  /* If clock source is not ULPTIM clock and counter source is external, then it must not be prescaled */
  if ((hlptim->Init.Clock.Source != LPTIM_CLOCKSOURCE_ULPTIM)
 800931e:	687b      	ldr	r3, [r7, #4]
 8009320:	685b      	ldr	r3, [r3, #4]
 8009322:	2b01      	cmp	r3, #1
 8009324:	d00c      	beq.n	8009340 <HAL_LPTIM_Counter_Start_IT+0x34>
      && (hlptim->Init.CounterSource == LPTIM_COUNTERSOURCE_EXTERNAL))
 8009326:	687b      	ldr	r3, [r7, #4]
 8009328:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800932a:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 800932e:	d107      	bne.n	8009340 <HAL_LPTIM_Counter_Start_IT+0x34>
  {
    /* Check if clock is prescaled */
    assert_param(IS_LPTIM_CLOCK_PRESCALERDIV1(hlptim->Init.Clock.Prescaler));
    /* Set clock prescaler to 0 */
    hlptim->Instance->CFGR &= ~LPTIM_CFGR_PRESC;
 8009330:	687b      	ldr	r3, [r7, #4]
 8009332:	681b      	ldr	r3, [r3, #0]
 8009334:	68da      	ldr	r2, [r3, #12]
 8009336:	687b      	ldr	r3, [r7, #4]
 8009338:	681b      	ldr	r3, [r3, #0]
 800933a:	f422 6260 	bic.w	r2, r2, #3584	; 0xe00
 800933e:	60da      	str	r2, [r3, #12]
  }

  /* Enable the Peripheral */
  __HAL_LPTIM_ENABLE(hlptim);
 8009340:	687b      	ldr	r3, [r7, #4]
 8009342:	681b      	ldr	r3, [r3, #0]
 8009344:	691a      	ldr	r2, [r3, #16]
 8009346:	687b      	ldr	r3, [r7, #4]
 8009348:	681b      	ldr	r3, [r3, #0]
 800934a:	f042 0201 	orr.w	r2, r2, #1
 800934e:	611a      	str	r2, [r3, #16]

  /* Clear flag */
  __HAL_LPTIM_CLEAR_FLAG(hlptim, LPTIM_FLAG_ARROK);
 8009350:	687b      	ldr	r3, [r7, #4]
 8009352:	681b      	ldr	r3, [r3, #0]
 8009354:	2210      	movs	r2, #16
 8009356:	605a      	str	r2, [r3, #4]

  /* Load the period value in the autoreload register */
  __HAL_LPTIM_AUTORELOAD_SET(hlptim, Period);
 8009358:	687b      	ldr	r3, [r7, #4]
 800935a:	681b      	ldr	r3, [r3, #0]
 800935c:	683a      	ldr	r2, [r7, #0]
 800935e:	619a      	str	r2, [r3, #24]

  /* Wait for the completion of the write operation to the LPTIM_ARR register */
  if (LPTIM_WaitForFlag(hlptim, LPTIM_FLAG_ARROK) == HAL_TIMEOUT)
 8009360:	2110      	movs	r1, #16
 8009362:	6878      	ldr	r0, [r7, #4]
 8009364:	f000 f91e 	bl	80095a4 <LPTIM_WaitForFlag>
 8009368:	4603      	mov	r3, r0
 800936a:	2b03      	cmp	r3, #3
 800936c:	d101      	bne.n	8009372 <HAL_LPTIM_Counter_Start_IT+0x66>
  {
    return HAL_TIMEOUT;
 800936e:	2303      	movs	r3, #3
 8009370:	e02f      	b.n	80093d2 <HAL_LPTIM_Counter_Start_IT+0xc6>
  }

  /* Disable the Peripheral */
  __HAL_LPTIM_DISABLE(hlptim);
 8009372:	6878      	ldr	r0, [r7, #4]
 8009374:	f000 f946 	bl	8009604 <LPTIM_Disable>

  if (HAL_LPTIM_GetState(hlptim) == HAL_LPTIM_STATE_TIMEOUT)
 8009378:	6878      	ldr	r0, [r7, #4]
 800937a:	f000 f905 	bl	8009588 <HAL_LPTIM_GetState>
 800937e:	4603      	mov	r3, r0
 8009380:	2b03      	cmp	r3, #3
 8009382:	d101      	bne.n	8009388 <HAL_LPTIM_Counter_Start_IT+0x7c>
  {
    return HAL_TIMEOUT;
 8009384:	2303      	movs	r3, #3
 8009386:	e024      	b.n	80093d2 <HAL_LPTIM_Counter_Start_IT+0xc6>
  }

  /* Enable Autoreload write complete interrupt */
  __HAL_LPTIM_ENABLE_IT(hlptim, LPTIM_IT_ARROK);
 8009388:	687b      	ldr	r3, [r7, #4]
 800938a:	681b      	ldr	r3, [r3, #0]
 800938c:	689a      	ldr	r2, [r3, #8]
 800938e:	687b      	ldr	r3, [r7, #4]
 8009390:	681b      	ldr	r3, [r3, #0]
 8009392:	f042 0210 	orr.w	r2, r2, #16
 8009396:	609a      	str	r2, [r3, #8]

  /* Enable Autoreload match interrupt */
  __HAL_LPTIM_ENABLE_IT(hlptim, LPTIM_IT_ARRM);
 8009398:	687b      	ldr	r3, [r7, #4]
 800939a:	681b      	ldr	r3, [r3, #0]
 800939c:	689a      	ldr	r2, [r3, #8]
 800939e:	687b      	ldr	r3, [r7, #4]
 80093a0:	681b      	ldr	r3, [r3, #0]
 80093a2:	f042 0202 	orr.w	r2, r2, #2
 80093a6:	609a      	str	r2, [r3, #8]

  /* Enable the Peripheral */
  __HAL_LPTIM_ENABLE(hlptim);
 80093a8:	687b      	ldr	r3, [r7, #4]
 80093aa:	681b      	ldr	r3, [r3, #0]
 80093ac:	691a      	ldr	r2, [r3, #16]
 80093ae:	687b      	ldr	r3, [r7, #4]
 80093b0:	681b      	ldr	r3, [r3, #0]
 80093b2:	f042 0201 	orr.w	r2, r2, #1
 80093b6:	611a      	str	r2, [r3, #16]

  /* Start timer in continuous mode */
  __HAL_LPTIM_START_CONTINUOUS(hlptim);
 80093b8:	687b      	ldr	r3, [r7, #4]
 80093ba:	681b      	ldr	r3, [r3, #0]
 80093bc:	691a      	ldr	r2, [r3, #16]
 80093be:	687b      	ldr	r3, [r7, #4]
 80093c0:	681b      	ldr	r3, [r3, #0]
 80093c2:	f042 0204 	orr.w	r2, r2, #4
 80093c6:	611a      	str	r2, [r3, #16]

  /* Change the LPTIM state */
  hlptim->State = HAL_LPTIM_STATE_READY;
 80093c8:	687b      	ldr	r3, [r7, #4]
 80093ca:	2201      	movs	r2, #1
 80093cc:	f883 2036 	strb.w	r2, [r3, #54]	; 0x36

  /* Return function status */
  return HAL_OK;
 80093d0:	2300      	movs	r3, #0
}
 80093d2:	4618      	mov	r0, r3
 80093d4:	3708      	adds	r7, #8
 80093d6:	46bd      	mov	sp, r7
 80093d8:	bd80      	pop	{r7, pc}

080093da <HAL_LPTIM_IRQHandler>:
  * @brief  Handle LPTIM interrupt request.
  * @param  hlptim LPTIM handle
  * @retval None
  */
void HAL_LPTIM_IRQHandler(LPTIM_HandleTypeDef *hlptim)
{
 80093da:	b580      	push	{r7, lr}
 80093dc:	b082      	sub	sp, #8
 80093de:	af00      	add	r7, sp, #0
 80093e0:	6078      	str	r0, [r7, #4]
  /* Compare match interrupt */
  if (__HAL_LPTIM_GET_FLAG(hlptim, LPTIM_FLAG_CMPM) != RESET)
 80093e2:	687b      	ldr	r3, [r7, #4]
 80093e4:	681b      	ldr	r3, [r3, #0]
 80093e6:	681b      	ldr	r3, [r3, #0]
 80093e8:	f003 0301 	and.w	r3, r3, #1
 80093ec:	2b01      	cmp	r3, #1
 80093ee:	d10d      	bne.n	800940c <HAL_LPTIM_IRQHandler+0x32>
  {
    if (__HAL_LPTIM_GET_IT_SOURCE(hlptim, LPTIM_IT_CMPM) != RESET)
 80093f0:	687b      	ldr	r3, [r7, #4]
 80093f2:	681b      	ldr	r3, [r3, #0]
 80093f4:	689b      	ldr	r3, [r3, #8]
 80093f6:	f003 0301 	and.w	r3, r3, #1
 80093fa:	2b01      	cmp	r3, #1
 80093fc:	d106      	bne.n	800940c <HAL_LPTIM_IRQHandler+0x32>
    {
      /* Clear Compare match flag */
      __HAL_LPTIM_CLEAR_FLAG(hlptim, LPTIM_FLAG_CMPM);
 80093fe:	687b      	ldr	r3, [r7, #4]
 8009400:	681b      	ldr	r3, [r3, #0]
 8009402:	2201      	movs	r2, #1
 8009404:	605a      	str	r2, [r3, #4]

      /* Compare match Callback */
#if (USE_HAL_LPTIM_REGISTER_CALLBACKS == 1)
      hlptim->CompareMatchCallback(hlptim);
#else
      HAL_LPTIM_CompareMatchCallback(hlptim);
 8009406:	6878      	ldr	r0, [r7, #4]
 8009408:	f000 f882 	bl	8009510 <HAL_LPTIM_CompareMatchCallback>
#endif /* USE_HAL_LPTIM_REGISTER_CALLBACKS */
    }
  }

  /* Autoreload match interrupt */
  if (__HAL_LPTIM_GET_FLAG(hlptim, LPTIM_FLAG_ARRM) != RESET)
 800940c:	687b      	ldr	r3, [r7, #4]
 800940e:	681b      	ldr	r3, [r3, #0]
 8009410:	681b      	ldr	r3, [r3, #0]
 8009412:	f003 0302 	and.w	r3, r3, #2
 8009416:	2b02      	cmp	r3, #2
 8009418:	d10d      	bne.n	8009436 <HAL_LPTIM_IRQHandler+0x5c>
  {
    if (__HAL_LPTIM_GET_IT_SOURCE(hlptim, LPTIM_IT_ARRM) != RESET)
 800941a:	687b      	ldr	r3, [r7, #4]
 800941c:	681b      	ldr	r3, [r3, #0]
 800941e:	689b      	ldr	r3, [r3, #8]
 8009420:	f003 0302 	and.w	r3, r3, #2
 8009424:	2b02      	cmp	r3, #2
 8009426:	d106      	bne.n	8009436 <HAL_LPTIM_IRQHandler+0x5c>
    {
      /* Clear Autoreload match flag */
      __HAL_LPTIM_CLEAR_FLAG(hlptim, LPTIM_FLAG_ARRM);
 8009428:	687b      	ldr	r3, [r7, #4]
 800942a:	681b      	ldr	r3, [r3, #0]
 800942c:	2202      	movs	r2, #2
 800942e:	605a      	str	r2, [r3, #4]

      /* Autoreload match Callback */
#if (USE_HAL_LPTIM_REGISTER_CALLBACKS == 1)
      hlptim->AutoReloadMatchCallback(hlptim);
#else
      HAL_LPTIM_AutoReloadMatchCallback(hlptim);
 8009430:	6878      	ldr	r0, [r7, #4]
 8009432:	f7fa fbc7 	bl	8003bc4 <HAL_LPTIM_AutoReloadMatchCallback>
#endif /* USE_HAL_LPTIM_REGISTER_CALLBACKS */
    }
  }

  /* Trigger detected interrupt */
  if (__HAL_LPTIM_GET_FLAG(hlptim, LPTIM_FLAG_EXTTRIG) != RESET)
 8009436:	687b      	ldr	r3, [r7, #4]
 8009438:	681b      	ldr	r3, [r3, #0]
 800943a:	681b      	ldr	r3, [r3, #0]
 800943c:	f003 0304 	and.w	r3, r3, #4
 8009440:	2b04      	cmp	r3, #4
 8009442:	d10d      	bne.n	8009460 <HAL_LPTIM_IRQHandler+0x86>
  {
    if (__HAL_LPTIM_GET_IT_SOURCE(hlptim, LPTIM_IT_EXTTRIG) != RESET)
 8009444:	687b      	ldr	r3, [r7, #4]
 8009446:	681b      	ldr	r3, [r3, #0]
 8009448:	689b      	ldr	r3, [r3, #8]
 800944a:	f003 0304 	and.w	r3, r3, #4
 800944e:	2b04      	cmp	r3, #4
 8009450:	d106      	bne.n	8009460 <HAL_LPTIM_IRQHandler+0x86>
    {
      /* Clear Trigger detected flag */
      __HAL_LPTIM_CLEAR_FLAG(hlptim, LPTIM_FLAG_EXTTRIG);
 8009452:	687b      	ldr	r3, [r7, #4]
 8009454:	681b      	ldr	r3, [r3, #0]
 8009456:	2204      	movs	r2, #4
 8009458:	605a      	str	r2, [r3, #4]

      /* Trigger detected callback */
#if (USE_HAL_LPTIM_REGISTER_CALLBACKS == 1)
      hlptim->TriggerCallback(hlptim);
#else
      HAL_LPTIM_TriggerCallback(hlptim);
 800945a:	6878      	ldr	r0, [r7, #4]
 800945c:	f000 f862 	bl	8009524 <HAL_LPTIM_TriggerCallback>
#endif /* USE_HAL_LPTIM_REGISTER_CALLBACKS */
    }
  }

  /* Compare write interrupt */
  if (__HAL_LPTIM_GET_FLAG(hlptim, LPTIM_FLAG_CMPOK) != RESET)
 8009460:	687b      	ldr	r3, [r7, #4]
 8009462:	681b      	ldr	r3, [r3, #0]
 8009464:	681b      	ldr	r3, [r3, #0]
 8009466:	f003 0308 	and.w	r3, r3, #8
 800946a:	2b08      	cmp	r3, #8
 800946c:	d10d      	bne.n	800948a <HAL_LPTIM_IRQHandler+0xb0>
  {
    if (__HAL_LPTIM_GET_IT_SOURCE(hlptim, LPTIM_IT_CMPOK) != RESET)
 800946e:	687b      	ldr	r3, [r7, #4]
 8009470:	681b      	ldr	r3, [r3, #0]
 8009472:	689b      	ldr	r3, [r3, #8]
 8009474:	f003 0308 	and.w	r3, r3, #8
 8009478:	2b08      	cmp	r3, #8
 800947a:	d106      	bne.n	800948a <HAL_LPTIM_IRQHandler+0xb0>
    {
      /* Clear Compare write flag */
      __HAL_LPTIM_CLEAR_FLAG(hlptim, LPTIM_FLAG_CMPOK);
 800947c:	687b      	ldr	r3, [r7, #4]
 800947e:	681b      	ldr	r3, [r3, #0]
 8009480:	2208      	movs	r2, #8
 8009482:	605a      	str	r2, [r3, #4]

      /* Compare write Callback */
#if (USE_HAL_LPTIM_REGISTER_CALLBACKS == 1)
      hlptim->CompareWriteCallback(hlptim);
#else
      HAL_LPTIM_CompareWriteCallback(hlptim);
 8009484:	6878      	ldr	r0, [r7, #4]
 8009486:	f000 f857 	bl	8009538 <HAL_LPTIM_CompareWriteCallback>
#endif /* USE_HAL_LPTIM_REGISTER_CALLBACKS */
    }
  }

  /* Autoreload write interrupt */
  if (__HAL_LPTIM_GET_FLAG(hlptim, LPTIM_FLAG_ARROK) != RESET)
 800948a:	687b      	ldr	r3, [r7, #4]
 800948c:	681b      	ldr	r3, [r3, #0]
 800948e:	681b      	ldr	r3, [r3, #0]
 8009490:	f003 0310 	and.w	r3, r3, #16
 8009494:	2b10      	cmp	r3, #16
 8009496:	d10d      	bne.n	80094b4 <HAL_LPTIM_IRQHandler+0xda>
  {
    if (__HAL_LPTIM_GET_IT_SOURCE(hlptim, LPTIM_IT_ARROK) != RESET)
 8009498:	687b      	ldr	r3, [r7, #4]
 800949a:	681b      	ldr	r3, [r3, #0]
 800949c:	689b      	ldr	r3, [r3, #8]
 800949e:	f003 0310 	and.w	r3, r3, #16
 80094a2:	2b10      	cmp	r3, #16
 80094a4:	d106      	bne.n	80094b4 <HAL_LPTIM_IRQHandler+0xda>
    {
      /* Clear Autoreload write flag */
      __HAL_LPTIM_CLEAR_FLAG(hlptim, LPTIM_FLAG_ARROK);
 80094a6:	687b      	ldr	r3, [r7, #4]
 80094a8:	681b      	ldr	r3, [r3, #0]
 80094aa:	2210      	movs	r2, #16
 80094ac:	605a      	str	r2, [r3, #4]

      /* Autoreload write Callback */
#if (USE_HAL_LPTIM_REGISTER_CALLBACKS == 1)
      hlptim->AutoReloadWriteCallback(hlptim);
#else
      HAL_LPTIM_AutoReloadWriteCallback(hlptim);
 80094ae:	6878      	ldr	r0, [r7, #4]
 80094b0:	f000 f84c 	bl	800954c <HAL_LPTIM_AutoReloadWriteCallback>
#endif /* USE_HAL_LPTIM_REGISTER_CALLBACKS */
    }
  }

  /* Direction counter changed from Down to Up interrupt */
  if (__HAL_LPTIM_GET_FLAG(hlptim, LPTIM_FLAG_UP) != RESET)
 80094b4:	687b      	ldr	r3, [r7, #4]
 80094b6:	681b      	ldr	r3, [r3, #0]
 80094b8:	681b      	ldr	r3, [r3, #0]
 80094ba:	f003 0320 	and.w	r3, r3, #32
 80094be:	2b20      	cmp	r3, #32
 80094c0:	d10d      	bne.n	80094de <HAL_LPTIM_IRQHandler+0x104>
  {
    if (__HAL_LPTIM_GET_IT_SOURCE(hlptim, LPTIM_IT_UP) != RESET)
 80094c2:	687b      	ldr	r3, [r7, #4]
 80094c4:	681b      	ldr	r3, [r3, #0]
 80094c6:	689b      	ldr	r3, [r3, #8]
 80094c8:	f003 0320 	and.w	r3, r3, #32
 80094cc:	2b20      	cmp	r3, #32
 80094ce:	d106      	bne.n	80094de <HAL_LPTIM_IRQHandler+0x104>
    {
      /* Clear Direction counter changed from Down to Up flag */
      __HAL_LPTIM_CLEAR_FLAG(hlptim, LPTIM_FLAG_UP);
 80094d0:	687b      	ldr	r3, [r7, #4]
 80094d2:	681b      	ldr	r3, [r3, #0]
 80094d4:	2220      	movs	r2, #32
 80094d6:	605a      	str	r2, [r3, #4]

      /* Direction counter changed from Down to Up Callback */
#if (USE_HAL_LPTIM_REGISTER_CALLBACKS == 1)
      hlptim->DirectionUpCallback(hlptim);
#else
      HAL_LPTIM_DirectionUpCallback(hlptim);
 80094d8:	6878      	ldr	r0, [r7, #4]
 80094da:	f000 f841 	bl	8009560 <HAL_LPTIM_DirectionUpCallback>
#endif /* USE_HAL_LPTIM_REGISTER_CALLBACKS */
    }
  }

  /* Direction counter changed from Up to Down interrupt */
  if (__HAL_LPTIM_GET_FLAG(hlptim, LPTIM_FLAG_DOWN) != RESET)
 80094de:	687b      	ldr	r3, [r7, #4]
 80094e0:	681b      	ldr	r3, [r3, #0]
 80094e2:	681b      	ldr	r3, [r3, #0]
 80094e4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80094e8:	2b40      	cmp	r3, #64	; 0x40
 80094ea:	d10d      	bne.n	8009508 <HAL_LPTIM_IRQHandler+0x12e>
  {
    if (__HAL_LPTIM_GET_IT_SOURCE(hlptim, LPTIM_IT_DOWN) != RESET)
 80094ec:	687b      	ldr	r3, [r7, #4]
 80094ee:	681b      	ldr	r3, [r3, #0]
 80094f0:	689b      	ldr	r3, [r3, #8]
 80094f2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80094f6:	2b40      	cmp	r3, #64	; 0x40
 80094f8:	d106      	bne.n	8009508 <HAL_LPTIM_IRQHandler+0x12e>
    {
      /* Clear Direction counter changed from Up to Down flag */
      __HAL_LPTIM_CLEAR_FLAG(hlptim, LPTIM_FLAG_DOWN);
 80094fa:	687b      	ldr	r3, [r7, #4]
 80094fc:	681b      	ldr	r3, [r3, #0]
 80094fe:	2240      	movs	r2, #64	; 0x40
 8009500:	605a      	str	r2, [r3, #4]

      /* Direction counter changed from Up to Down Callback */
#if (USE_HAL_LPTIM_REGISTER_CALLBACKS == 1)
      hlptim->DirectionDownCallback(hlptim);
#else
      HAL_LPTIM_DirectionDownCallback(hlptim);
 8009502:	6878      	ldr	r0, [r7, #4]
 8009504:	f000 f836 	bl	8009574 <HAL_LPTIM_DirectionDownCallback>
#endif /* USE_HAL_LPTIM_REGISTER_CALLBACKS */
    }
  }
}
 8009508:	bf00      	nop
 800950a:	3708      	adds	r7, #8
 800950c:	46bd      	mov	sp, r7
 800950e:	bd80      	pop	{r7, pc}

08009510 <HAL_LPTIM_CompareMatchCallback>:
  * @brief  Compare match callback in non-blocking mode.
  * @param  hlptim LPTIM handle
  * @retval None
  */
__weak void HAL_LPTIM_CompareMatchCallback(LPTIM_HandleTypeDef *hlptim)
{
 8009510:	b480      	push	{r7}
 8009512:	b083      	sub	sp, #12
 8009514:	af00      	add	r7, sp, #0
 8009516:	6078      	str	r0, [r7, #4]
  UNUSED(hlptim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_LPTIM_CompareMatchCallback could be implemented in the user file
   */
}
 8009518:	bf00      	nop
 800951a:	370c      	adds	r7, #12
 800951c:	46bd      	mov	sp, r7
 800951e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009522:	4770      	bx	lr

08009524 <HAL_LPTIM_TriggerCallback>:
  * @brief  Trigger detected callback in non-blocking mode.
  * @param  hlptim LPTIM handle
  * @retval None
  */
__weak void HAL_LPTIM_TriggerCallback(LPTIM_HandleTypeDef *hlptim)
{
 8009524:	b480      	push	{r7}
 8009526:	b083      	sub	sp, #12
 8009528:	af00      	add	r7, sp, #0
 800952a:	6078      	str	r0, [r7, #4]
  UNUSED(hlptim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_LPTIM_TriggerCallback could be implemented in the user file
   */
}
 800952c:	bf00      	nop
 800952e:	370c      	adds	r7, #12
 8009530:	46bd      	mov	sp, r7
 8009532:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009536:	4770      	bx	lr

08009538 <HAL_LPTIM_CompareWriteCallback>:
  * @brief  Compare write callback in non-blocking mode.
  * @param  hlptim LPTIM handle
  * @retval None
  */
__weak void HAL_LPTIM_CompareWriteCallback(LPTIM_HandleTypeDef *hlptim)
{
 8009538:	b480      	push	{r7}
 800953a:	b083      	sub	sp, #12
 800953c:	af00      	add	r7, sp, #0
 800953e:	6078      	str	r0, [r7, #4]
  UNUSED(hlptim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_LPTIM_CompareWriteCallback could be implemented in the user file
   */
}
 8009540:	bf00      	nop
 8009542:	370c      	adds	r7, #12
 8009544:	46bd      	mov	sp, r7
 8009546:	f85d 7b04 	ldr.w	r7, [sp], #4
 800954a:	4770      	bx	lr

0800954c <HAL_LPTIM_AutoReloadWriteCallback>:
  * @brief  Autoreload write callback in non-blocking mode.
  * @param  hlptim LPTIM handle
  * @retval None
  */
__weak void HAL_LPTIM_AutoReloadWriteCallback(LPTIM_HandleTypeDef *hlptim)
{
 800954c:	b480      	push	{r7}
 800954e:	b083      	sub	sp, #12
 8009550:	af00      	add	r7, sp, #0
 8009552:	6078      	str	r0, [r7, #4]
  UNUSED(hlptim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_LPTIM_AutoReloadWriteCallback could be implemented in the user file
   */
}
 8009554:	bf00      	nop
 8009556:	370c      	adds	r7, #12
 8009558:	46bd      	mov	sp, r7
 800955a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800955e:	4770      	bx	lr

08009560 <HAL_LPTIM_DirectionUpCallback>:
  * @brief  Direction counter changed from Down to Up callback in non-blocking mode.
  * @param  hlptim LPTIM handle
  * @retval None
  */
__weak void HAL_LPTIM_DirectionUpCallback(LPTIM_HandleTypeDef *hlptim)
{
 8009560:	b480      	push	{r7}
 8009562:	b083      	sub	sp, #12
 8009564:	af00      	add	r7, sp, #0
 8009566:	6078      	str	r0, [r7, #4]
  UNUSED(hlptim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_LPTIM_DirectionUpCallback could be implemented in the user file
   */
}
 8009568:	bf00      	nop
 800956a:	370c      	adds	r7, #12
 800956c:	46bd      	mov	sp, r7
 800956e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009572:	4770      	bx	lr

08009574 <HAL_LPTIM_DirectionDownCallback>:
  * @brief  Direction counter changed from Up to Down callback in non-blocking mode.
  * @param  hlptim LPTIM handle
  * @retval None
  */
__weak void HAL_LPTIM_DirectionDownCallback(LPTIM_HandleTypeDef *hlptim)
{
 8009574:	b480      	push	{r7}
 8009576:	b083      	sub	sp, #12
 8009578:	af00      	add	r7, sp, #0
 800957a:	6078      	str	r0, [r7, #4]
  UNUSED(hlptim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_LPTIM_DirectionDownCallback could be implemented in the user file
   */
}
 800957c:	bf00      	nop
 800957e:	370c      	adds	r7, #12
 8009580:	46bd      	mov	sp, r7
 8009582:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009586:	4770      	bx	lr

08009588 <HAL_LPTIM_GetState>:
  * @brief  Return the LPTIM handle state.
  * @param  hlptim LPTIM handle
  * @retval HAL state
  */
HAL_LPTIM_StateTypeDef HAL_LPTIM_GetState(LPTIM_HandleTypeDef *hlptim)
{
 8009588:	b480      	push	{r7}
 800958a:	b083      	sub	sp, #12
 800958c:	af00      	add	r7, sp, #0
 800958e:	6078      	str	r0, [r7, #4]
  /* Return LPTIM handle state */
  return hlptim->State;
 8009590:	687b      	ldr	r3, [r7, #4]
 8009592:	f893 3036 	ldrb.w	r3, [r3, #54]	; 0x36
 8009596:	b2db      	uxtb	r3, r3
}
 8009598:	4618      	mov	r0, r3
 800959a:	370c      	adds	r7, #12
 800959c:	46bd      	mov	sp, r7
 800959e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80095a2:	4770      	bx	lr

080095a4 <LPTIM_WaitForFlag>:
  *                the configuration information for LPTIM module.
  * @param  flag   The lptim flag
  * @retval HAL status
  */
static HAL_StatusTypeDef LPTIM_WaitForFlag(LPTIM_HandleTypeDef *hlptim, uint32_t flag)
{
 80095a4:	b480      	push	{r7}
 80095a6:	b085      	sub	sp, #20
 80095a8:	af00      	add	r7, sp, #0
 80095aa:	6078      	str	r0, [r7, #4]
 80095ac:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef result = HAL_OK;
 80095ae:	2300      	movs	r3, #0
 80095b0:	73fb      	strb	r3, [r7, #15]
  uint32_t count = TIMEOUT * (SystemCoreClock / 20UL / 1000UL);
 80095b2:	4b12      	ldr	r3, [pc, #72]	; (80095fc <LPTIM_WaitForFlag+0x58>)
 80095b4:	681b      	ldr	r3, [r3, #0]
 80095b6:	4a12      	ldr	r2, [pc, #72]	; (8009600 <LPTIM_WaitForFlag+0x5c>)
 80095b8:	fba2 2303 	umull	r2, r3, r2, r3
 80095bc:	0b9b      	lsrs	r3, r3, #14
 80095be:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80095c2:	fb02 f303 	mul.w	r3, r2, r3
 80095c6:	60bb      	str	r3, [r7, #8]
  do
  {
    count--;
 80095c8:	68bb      	ldr	r3, [r7, #8]
 80095ca:	3b01      	subs	r3, #1
 80095cc:	60bb      	str	r3, [r7, #8]
    if (count == 0UL)
 80095ce:	68bb      	ldr	r3, [r7, #8]
 80095d0:	2b00      	cmp	r3, #0
 80095d2:	d101      	bne.n	80095d8 <LPTIM_WaitForFlag+0x34>
    {
      result = HAL_TIMEOUT;
 80095d4:	2303      	movs	r3, #3
 80095d6:	73fb      	strb	r3, [r7, #15]
    }
  } while ((!(__HAL_LPTIM_GET_FLAG((hlptim), (flag)))) && (count != 0UL));
 80095d8:	687b      	ldr	r3, [r7, #4]
 80095da:	681b      	ldr	r3, [r3, #0]
 80095dc:	681a      	ldr	r2, [r3, #0]
 80095de:	683b      	ldr	r3, [r7, #0]
 80095e0:	4013      	ands	r3, r2
 80095e2:	683a      	ldr	r2, [r7, #0]
 80095e4:	429a      	cmp	r2, r3
 80095e6:	d002      	beq.n	80095ee <LPTIM_WaitForFlag+0x4a>
 80095e8:	68bb      	ldr	r3, [r7, #8]
 80095ea:	2b00      	cmp	r3, #0
 80095ec:	d1ec      	bne.n	80095c8 <LPTIM_WaitForFlag+0x24>

  return result;
 80095ee:	7bfb      	ldrb	r3, [r7, #15]
}
 80095f0:	4618      	mov	r0, r3
 80095f2:	3714      	adds	r7, #20
 80095f4:	46bd      	mov	sp, r7
 80095f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80095fa:	4770      	bx	lr
 80095fc:	20000010 	.word	0x20000010
 8009600:	d1b71759 	.word	0xd1b71759

08009604 <LPTIM_Disable>:
  *         Please check Errata Sheet ES0335 for more details under "MCU may remain
  *         stuck in LPTIM interrupt when entering Stop mode" section.
  * @retval None
  */
void LPTIM_Disable(LPTIM_HandleTypeDef *hlptim)
{
 8009604:	b580      	push	{r7, lr}
 8009606:	b08c      	sub	sp, #48	; 0x30
 8009608:	af00      	add	r7, sp, #0
 800960a:	6078      	str	r0, [r7, #4]
  uint32_t tmpclksource = 0;
 800960c:	2300      	movs	r3, #0
 800960e:	62fb      	str	r3, [r7, #44]	; 0x2c
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8009610:	f3ef 8310 	mrs	r3, PRIMASK
 8009614:	60fb      	str	r3, [r7, #12]
  return(result);
 8009616:	68fb      	ldr	r3, [r7, #12]
  uint32_t tmpARR;
  uint32_t primask_bit;
  uint32_t tmpCFGR2;

  /* Enter critical section */
  primask_bit = __get_PRIMASK();
 8009618:	62bb      	str	r3, [r7, #40]	; 0x28
 800961a:	2301      	movs	r3, #1
 800961c:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800961e:	693b      	ldr	r3, [r7, #16]
 8009620:	f383 8810 	msr	PRIMASK, r3
}
 8009624:	bf00      	nop
  __set_PRIMASK(1) ;

  /*********** Save LPTIM Config ***********/
  /* Save LPTIM source clock */
  switch ((uint32_t)hlptim->Instance)
 8009626:	687b      	ldr	r3, [r7, #4]
 8009628:	681b      	ldr	r3, [r3, #0]
 800962a:	4a81      	ldr	r2, [pc, #516]	; (8009830 <LPTIM_Disable+0x22c>)
 800962c:	4293      	cmp	r3, r2
 800962e:	d02d      	beq.n	800968c <LPTIM_Disable+0x88>
 8009630:	4a7f      	ldr	r2, [pc, #508]	; (8009830 <LPTIM_Disable+0x22c>)
 8009632:	4293      	cmp	r3, r2
 8009634:	d830      	bhi.n	8009698 <LPTIM_Disable+0x94>
 8009636:	4a7f      	ldr	r2, [pc, #508]	; (8009834 <LPTIM_Disable+0x230>)
 8009638:	4293      	cmp	r3, r2
 800963a:	d021      	beq.n	8009680 <LPTIM_Disable+0x7c>
 800963c:	4a7d      	ldr	r2, [pc, #500]	; (8009834 <LPTIM_Disable+0x230>)
 800963e:	4293      	cmp	r3, r2
 8009640:	d82a      	bhi.n	8009698 <LPTIM_Disable+0x94>
 8009642:	4a7d      	ldr	r2, [pc, #500]	; (8009838 <LPTIM_Disable+0x234>)
 8009644:	4293      	cmp	r3, r2
 8009646:	d015      	beq.n	8009674 <LPTIM_Disable+0x70>
 8009648:	4a7b      	ldr	r2, [pc, #492]	; (8009838 <LPTIM_Disable+0x234>)
 800964a:	4293      	cmp	r3, r2
 800964c:	d824      	bhi.n	8009698 <LPTIM_Disable+0x94>
 800964e:	4a7b      	ldr	r2, [pc, #492]	; (800983c <LPTIM_Disable+0x238>)
 8009650:	4293      	cmp	r3, r2
 8009652:	d003      	beq.n	800965c <LPTIM_Disable+0x58>
 8009654:	4a7a      	ldr	r2, [pc, #488]	; (8009840 <LPTIM_Disable+0x23c>)
 8009656:	4293      	cmp	r3, r2
 8009658:	d006      	beq.n	8009668 <LPTIM_Disable+0x64>
    case LPTIM5_BASE:
      tmpclksource = __HAL_RCC_GET_LPTIM5_SOURCE();
      break;
#endif /* LPTIM5 */
    default:
      break;
 800965a:	e01d      	b.n	8009698 <LPTIM_Disable+0x94>
      tmpclksource = __HAL_RCC_GET_LPTIM1_SOURCE();
 800965c:	4b79      	ldr	r3, [pc, #484]	; (8009844 <LPTIM_Disable+0x240>)
 800965e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8009660:	f003 43e0 	and.w	r3, r3, #1879048192	; 0x70000000
 8009664:	62fb      	str	r3, [r7, #44]	; 0x2c
      break;
 8009666:	e018      	b.n	800969a <LPTIM_Disable+0x96>
      tmpclksource = __HAL_RCC_GET_LPTIM2_SOURCE();
 8009668:	4b76      	ldr	r3, [pc, #472]	; (8009844 <LPTIM_Disable+0x240>)
 800966a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800966c:	f403 53e0 	and.w	r3, r3, #7168	; 0x1c00
 8009670:	62fb      	str	r3, [r7, #44]	; 0x2c
      break;
 8009672:	e012      	b.n	800969a <LPTIM_Disable+0x96>
      tmpclksource = __HAL_RCC_GET_LPTIM3_SOURCE();
 8009674:	4b73      	ldr	r3, [pc, #460]	; (8009844 <LPTIM_Disable+0x240>)
 8009676:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8009678:	f403 4360 	and.w	r3, r3, #57344	; 0xe000
 800967c:	62fb      	str	r3, [r7, #44]	; 0x2c
      break;
 800967e:	e00c      	b.n	800969a <LPTIM_Disable+0x96>
      tmpclksource = __HAL_RCC_GET_LPTIM4_SOURCE();
 8009680:	4b70      	ldr	r3, [pc, #448]	; (8009844 <LPTIM_Disable+0x240>)
 8009682:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8009684:	f403 4360 	and.w	r3, r3, #57344	; 0xe000
 8009688:	62fb      	str	r3, [r7, #44]	; 0x2c
      break;
 800968a:	e006      	b.n	800969a <LPTIM_Disable+0x96>
      tmpclksource = __HAL_RCC_GET_LPTIM5_SOURCE();
 800968c:	4b6d      	ldr	r3, [pc, #436]	; (8009844 <LPTIM_Disable+0x240>)
 800968e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8009690:	f403 4360 	and.w	r3, r3, #57344	; 0xe000
 8009694:	62fb      	str	r3, [r7, #44]	; 0x2c
      break;
 8009696:	e000      	b.n	800969a <LPTIM_Disable+0x96>
      break;
 8009698:	bf00      	nop
  }

  /* Save LPTIM configuration registers */
  tmpIER = hlptim->Instance->IER;
 800969a:	687b      	ldr	r3, [r7, #4]
 800969c:	681b      	ldr	r3, [r3, #0]
 800969e:	689b      	ldr	r3, [r3, #8]
 80096a0:	627b      	str	r3, [r7, #36]	; 0x24
  tmpCFGR = hlptim->Instance->CFGR;
 80096a2:	687b      	ldr	r3, [r7, #4]
 80096a4:	681b      	ldr	r3, [r3, #0]
 80096a6:	68db      	ldr	r3, [r3, #12]
 80096a8:	623b      	str	r3, [r7, #32]
  tmpCMP = hlptim->Instance->CMP;
 80096aa:	687b      	ldr	r3, [r7, #4]
 80096ac:	681b      	ldr	r3, [r3, #0]
 80096ae:	695b      	ldr	r3, [r3, #20]
 80096b0:	61fb      	str	r3, [r7, #28]
  tmpARR = hlptim->Instance->ARR;
 80096b2:	687b      	ldr	r3, [r7, #4]
 80096b4:	681b      	ldr	r3, [r3, #0]
 80096b6:	699b      	ldr	r3, [r3, #24]
 80096b8:	61bb      	str	r3, [r7, #24]
  tmpCFGR2 = hlptim->Instance->CFGR2;
 80096ba:	687b      	ldr	r3, [r7, #4]
 80096bc:	681b      	ldr	r3, [r3, #0]
 80096be:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80096c0:	617b      	str	r3, [r7, #20]

  /*********** Reset LPTIM ***********/
  switch ((uint32_t)hlptim->Instance)
 80096c2:	687b      	ldr	r3, [r7, #4]
 80096c4:	681b      	ldr	r3, [r3, #0]
 80096c6:	4a5a      	ldr	r2, [pc, #360]	; (8009830 <LPTIM_Disable+0x22c>)
 80096c8:	4293      	cmp	r3, r2
 80096ca:	d059      	beq.n	8009780 <LPTIM_Disable+0x17c>
 80096cc:	4a58      	ldr	r2, [pc, #352]	; (8009830 <LPTIM_Disable+0x22c>)
 80096ce:	4293      	cmp	r3, r2
 80096d0:	d867      	bhi.n	80097a2 <LPTIM_Disable+0x19e>
 80096d2:	4a58      	ldr	r2, [pc, #352]	; (8009834 <LPTIM_Disable+0x230>)
 80096d4:	4293      	cmp	r3, r2
 80096d6:	d042      	beq.n	800975e <LPTIM_Disable+0x15a>
 80096d8:	4a56      	ldr	r2, [pc, #344]	; (8009834 <LPTIM_Disable+0x230>)
 80096da:	4293      	cmp	r3, r2
 80096dc:	d861      	bhi.n	80097a2 <LPTIM_Disable+0x19e>
 80096de:	4a56      	ldr	r2, [pc, #344]	; (8009838 <LPTIM_Disable+0x234>)
 80096e0:	4293      	cmp	r3, r2
 80096e2:	d02b      	beq.n	800973c <LPTIM_Disable+0x138>
 80096e4:	4a54      	ldr	r2, [pc, #336]	; (8009838 <LPTIM_Disable+0x234>)
 80096e6:	4293      	cmp	r3, r2
 80096e8:	d85b      	bhi.n	80097a2 <LPTIM_Disable+0x19e>
 80096ea:	4a54      	ldr	r2, [pc, #336]	; (800983c <LPTIM_Disable+0x238>)
 80096ec:	4293      	cmp	r3, r2
 80096ee:	d003      	beq.n	80096f8 <LPTIM_Disable+0xf4>
 80096f0:	4a53      	ldr	r2, [pc, #332]	; (8009840 <LPTIM_Disable+0x23c>)
 80096f2:	4293      	cmp	r3, r2
 80096f4:	d011      	beq.n	800971a <LPTIM_Disable+0x116>
      __HAL_RCC_LPTIM5_FORCE_RESET();
      __HAL_RCC_LPTIM5_RELEASE_RESET();
      break;
#endif /* LPTIM5 */
    default:
      break;
 80096f6:	e054      	b.n	80097a2 <LPTIM_Disable+0x19e>
      __HAL_RCC_LPTIM1_FORCE_RESET();
 80096f8:	4b52      	ldr	r3, [pc, #328]	; (8009844 <LPTIM_Disable+0x240>)
 80096fa:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80096fe:	4a51      	ldr	r2, [pc, #324]	; (8009844 <LPTIM_Disable+0x240>)
 8009700:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8009704:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      __HAL_RCC_LPTIM1_RELEASE_RESET();
 8009708:	4b4e      	ldr	r3, [pc, #312]	; (8009844 <LPTIM_Disable+0x240>)
 800970a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800970e:	4a4d      	ldr	r2, [pc, #308]	; (8009844 <LPTIM_Disable+0x240>)
 8009710:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8009714:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      break;
 8009718:	e044      	b.n	80097a4 <LPTIM_Disable+0x1a0>
      __HAL_RCC_LPTIM2_FORCE_RESET();
 800971a:	4b4a      	ldr	r3, [pc, #296]	; (8009844 <LPTIM_Disable+0x240>)
 800971c:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8009720:	4a48      	ldr	r2, [pc, #288]	; (8009844 <LPTIM_Disable+0x240>)
 8009722:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8009726:	f8c2 309c 	str.w	r3, [r2, #156]	; 0x9c
      __HAL_RCC_LPTIM2_RELEASE_RESET();
 800972a:	4b46      	ldr	r3, [pc, #280]	; (8009844 <LPTIM_Disable+0x240>)
 800972c:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8009730:	4a44      	ldr	r2, [pc, #272]	; (8009844 <LPTIM_Disable+0x240>)
 8009732:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8009736:	f8c2 309c 	str.w	r3, [r2, #156]	; 0x9c
      break;
 800973a:	e033      	b.n	80097a4 <LPTIM_Disable+0x1a0>
      __HAL_RCC_LPTIM3_FORCE_RESET();
 800973c:	4b41      	ldr	r3, [pc, #260]	; (8009844 <LPTIM_Disable+0x240>)
 800973e:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8009742:	4a40      	ldr	r2, [pc, #256]	; (8009844 <LPTIM_Disable+0x240>)
 8009744:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8009748:	f8c2 309c 	str.w	r3, [r2, #156]	; 0x9c
      __HAL_RCC_LPTIM3_RELEASE_RESET();
 800974c:	4b3d      	ldr	r3, [pc, #244]	; (8009844 <LPTIM_Disable+0x240>)
 800974e:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8009752:	4a3c      	ldr	r2, [pc, #240]	; (8009844 <LPTIM_Disable+0x240>)
 8009754:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8009758:	f8c2 309c 	str.w	r3, [r2, #156]	; 0x9c
      break;
 800975c:	e022      	b.n	80097a4 <LPTIM_Disable+0x1a0>
      __HAL_RCC_LPTIM4_FORCE_RESET();
 800975e:	4b39      	ldr	r3, [pc, #228]	; (8009844 <LPTIM_Disable+0x240>)
 8009760:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8009764:	4a37      	ldr	r2, [pc, #220]	; (8009844 <LPTIM_Disable+0x240>)
 8009766:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 800976a:	f8c2 309c 	str.w	r3, [r2, #156]	; 0x9c
      __HAL_RCC_LPTIM4_RELEASE_RESET();
 800976e:	4b35      	ldr	r3, [pc, #212]	; (8009844 <LPTIM_Disable+0x240>)
 8009770:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8009774:	4a33      	ldr	r2, [pc, #204]	; (8009844 <LPTIM_Disable+0x240>)
 8009776:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800977a:	f8c2 309c 	str.w	r3, [r2, #156]	; 0x9c
      break;
 800977e:	e011      	b.n	80097a4 <LPTIM_Disable+0x1a0>
      __HAL_RCC_LPTIM5_FORCE_RESET();
 8009780:	4b30      	ldr	r3, [pc, #192]	; (8009844 <LPTIM_Disable+0x240>)
 8009782:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8009786:	4a2f      	ldr	r2, [pc, #188]	; (8009844 <LPTIM_Disable+0x240>)
 8009788:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 800978c:	f8c2 309c 	str.w	r3, [r2, #156]	; 0x9c
      __HAL_RCC_LPTIM5_RELEASE_RESET();
 8009790:	4b2c      	ldr	r3, [pc, #176]	; (8009844 <LPTIM_Disable+0x240>)
 8009792:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8009796:	4a2b      	ldr	r2, [pc, #172]	; (8009844 <LPTIM_Disable+0x240>)
 8009798:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800979c:	f8c2 309c 	str.w	r3, [r2, #156]	; 0x9c
      break;
 80097a0:	e000      	b.n	80097a4 <LPTIM_Disable+0x1a0>
      break;
 80097a2:	bf00      	nop
  }

  /*********** Restore LPTIM Config ***********/
  if ((tmpCMP != 0UL) || (tmpARR != 0UL))
 80097a4:	69fb      	ldr	r3, [r7, #28]
 80097a6:	2b00      	cmp	r3, #0
 80097a8:	d103      	bne.n	80097b2 <LPTIM_Disable+0x1ae>
 80097aa:	69bb      	ldr	r3, [r7, #24]
 80097ac:	2b00      	cmp	r3, #0
 80097ae:	f000 80d1 	beq.w	8009954 <LPTIM_Disable+0x350>
  {
    /* Force LPTIM source kernel clock from APB */
    switch ((uint32_t)hlptim->Instance)
 80097b2:	687b      	ldr	r3, [r7, #4]
 80097b4:	681b      	ldr	r3, [r3, #0]
 80097b6:	4a1e      	ldr	r2, [pc, #120]	; (8009830 <LPTIM_Disable+0x22c>)
 80097b8:	4293      	cmp	r3, r2
 80097ba:	d031      	beq.n	8009820 <LPTIM_Disable+0x21c>
 80097bc:	4a1c      	ldr	r2, [pc, #112]	; (8009830 <LPTIM_Disable+0x22c>)
 80097be:	4293      	cmp	r3, r2
 80097c0:	d842      	bhi.n	8009848 <LPTIM_Disable+0x244>
 80097c2:	4a1c      	ldr	r2, [pc, #112]	; (8009834 <LPTIM_Disable+0x230>)
 80097c4:	4293      	cmp	r3, r2
 80097c6:	d024      	beq.n	8009812 <LPTIM_Disable+0x20e>
 80097c8:	4a1a      	ldr	r2, [pc, #104]	; (8009834 <LPTIM_Disable+0x230>)
 80097ca:	4293      	cmp	r3, r2
 80097cc:	d83c      	bhi.n	8009848 <LPTIM_Disable+0x244>
 80097ce:	4a1a      	ldr	r2, [pc, #104]	; (8009838 <LPTIM_Disable+0x234>)
 80097d0:	4293      	cmp	r3, r2
 80097d2:	d017      	beq.n	8009804 <LPTIM_Disable+0x200>
 80097d4:	4a18      	ldr	r2, [pc, #96]	; (8009838 <LPTIM_Disable+0x234>)
 80097d6:	4293      	cmp	r3, r2
 80097d8:	d836      	bhi.n	8009848 <LPTIM_Disable+0x244>
 80097da:	4a18      	ldr	r2, [pc, #96]	; (800983c <LPTIM_Disable+0x238>)
 80097dc:	4293      	cmp	r3, r2
 80097de:	d003      	beq.n	80097e8 <LPTIM_Disable+0x1e4>
 80097e0:	4a17      	ldr	r2, [pc, #92]	; (8009840 <LPTIM_Disable+0x23c>)
 80097e2:	4293      	cmp	r3, r2
 80097e4:	d007      	beq.n	80097f6 <LPTIM_Disable+0x1f2>
      case LPTIM5_BASE:
        __HAL_RCC_LPTIM5_CONFIG(RCC_LPTIM5CLKSOURCE_D3PCLK1);
        break;
#endif /* LPTIM5 */
      default:
        break;
 80097e6:	e02f      	b.n	8009848 <LPTIM_Disable+0x244>
        __HAL_RCC_LPTIM1_CONFIG(RCC_LPTIM1CLKSOURCE_D2PCLK1);
 80097e8:	4b16      	ldr	r3, [pc, #88]	; (8009844 <LPTIM_Disable+0x240>)
 80097ea:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80097ec:	4a15      	ldr	r2, [pc, #84]	; (8009844 <LPTIM_Disable+0x240>)
 80097ee:	f023 43e0 	bic.w	r3, r3, #1879048192	; 0x70000000
 80097f2:	6553      	str	r3, [r2, #84]	; 0x54
        break;
 80097f4:	e029      	b.n	800984a <LPTIM_Disable+0x246>
        __HAL_RCC_LPTIM2_CONFIG(RCC_LPTIM2CLKSOURCE_D3PCLK1);
 80097f6:	4b13      	ldr	r3, [pc, #76]	; (8009844 <LPTIM_Disable+0x240>)
 80097f8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80097fa:	4a12      	ldr	r2, [pc, #72]	; (8009844 <LPTIM_Disable+0x240>)
 80097fc:	f423 53e0 	bic.w	r3, r3, #7168	; 0x1c00
 8009800:	6593      	str	r3, [r2, #88]	; 0x58
        break;
 8009802:	e022      	b.n	800984a <LPTIM_Disable+0x246>
        __HAL_RCC_LPTIM3_CONFIG(RCC_LPTIM3CLKSOURCE_D3PCLK1);
 8009804:	4b0f      	ldr	r3, [pc, #60]	; (8009844 <LPTIM_Disable+0x240>)
 8009806:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8009808:	4a0e      	ldr	r2, [pc, #56]	; (8009844 <LPTIM_Disable+0x240>)
 800980a:	f423 4360 	bic.w	r3, r3, #57344	; 0xe000
 800980e:	6593      	str	r3, [r2, #88]	; 0x58
        break;
 8009810:	e01b      	b.n	800984a <LPTIM_Disable+0x246>
        __HAL_RCC_LPTIM4_CONFIG(RCC_LPTIM4CLKSOURCE_D3PCLK1);
 8009812:	4b0c      	ldr	r3, [pc, #48]	; (8009844 <LPTIM_Disable+0x240>)
 8009814:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8009816:	4a0b      	ldr	r2, [pc, #44]	; (8009844 <LPTIM_Disable+0x240>)
 8009818:	f423 4360 	bic.w	r3, r3, #57344	; 0xe000
 800981c:	6593      	str	r3, [r2, #88]	; 0x58
        break;
 800981e:	e014      	b.n	800984a <LPTIM_Disable+0x246>
        __HAL_RCC_LPTIM5_CONFIG(RCC_LPTIM5CLKSOURCE_D3PCLK1);
 8009820:	4b08      	ldr	r3, [pc, #32]	; (8009844 <LPTIM_Disable+0x240>)
 8009822:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8009824:	4a07      	ldr	r2, [pc, #28]	; (8009844 <LPTIM_Disable+0x240>)
 8009826:	f423 4360 	bic.w	r3, r3, #57344	; 0xe000
 800982a:	6593      	str	r3, [r2, #88]	; 0x58
        break;
 800982c:	e00d      	b.n	800984a <LPTIM_Disable+0x246>
 800982e:	bf00      	nop
 8009830:	58003000 	.word	0x58003000
 8009834:	58002c00 	.word	0x58002c00
 8009838:	58002800 	.word	0x58002800
 800983c:	40002400 	.word	0x40002400
 8009840:	58002400 	.word	0x58002400
 8009844:	58024400 	.word	0x58024400
        break;
 8009848:	bf00      	nop
    }

    if (tmpCMP != 0UL)
 800984a:	69fb      	ldr	r3, [r7, #28]
 800984c:	2b00      	cmp	r3, #0
 800984e:	d01a      	beq.n	8009886 <LPTIM_Disable+0x282>
    {
      /* Restore CMP register (LPTIM should be enabled first) */
      hlptim->Instance->CR |= LPTIM_CR_ENABLE;
 8009850:	687b      	ldr	r3, [r7, #4]
 8009852:	681b      	ldr	r3, [r3, #0]
 8009854:	691a      	ldr	r2, [r3, #16]
 8009856:	687b      	ldr	r3, [r7, #4]
 8009858:	681b      	ldr	r3, [r3, #0]
 800985a:	f042 0201 	orr.w	r2, r2, #1
 800985e:	611a      	str	r2, [r3, #16]
      hlptim->Instance->CMP = tmpCMP;
 8009860:	687b      	ldr	r3, [r7, #4]
 8009862:	681b      	ldr	r3, [r3, #0]
 8009864:	69fa      	ldr	r2, [r7, #28]
 8009866:	615a      	str	r2, [r3, #20]

      /* Wait for the completion of the write operation to the LPTIM_CMP register */
      if (LPTIM_WaitForFlag(hlptim, LPTIM_FLAG_CMPOK) == HAL_TIMEOUT)
 8009868:	2108      	movs	r1, #8
 800986a:	6878      	ldr	r0, [r7, #4]
 800986c:	f7ff fe9a 	bl	80095a4 <LPTIM_WaitForFlag>
 8009870:	4603      	mov	r3, r0
 8009872:	2b03      	cmp	r3, #3
 8009874:	d103      	bne.n	800987e <LPTIM_Disable+0x27a>
      {
        hlptim->State = HAL_LPTIM_STATE_TIMEOUT;
 8009876:	687b      	ldr	r3, [r7, #4]
 8009878:	2203      	movs	r2, #3
 800987a:	f883 2036 	strb.w	r2, [r3, #54]	; 0x36
      }
      __HAL_LPTIM_CLEAR_FLAG(hlptim, LPTIM_FLAG_CMPOK);
 800987e:	687b      	ldr	r3, [r7, #4]
 8009880:	681b      	ldr	r3, [r3, #0]
 8009882:	2208      	movs	r2, #8
 8009884:	605a      	str	r2, [r3, #4]
    }

    if (tmpARR != 0UL)
 8009886:	69bb      	ldr	r3, [r7, #24]
 8009888:	2b00      	cmp	r3, #0
 800988a:	d01a      	beq.n	80098c2 <LPTIM_Disable+0x2be>
    {
      /* Restore ARR register (LPTIM should be enabled first) */
      hlptim->Instance->CR |= LPTIM_CR_ENABLE;
 800988c:	687b      	ldr	r3, [r7, #4]
 800988e:	681b      	ldr	r3, [r3, #0]
 8009890:	691a      	ldr	r2, [r3, #16]
 8009892:	687b      	ldr	r3, [r7, #4]
 8009894:	681b      	ldr	r3, [r3, #0]
 8009896:	f042 0201 	orr.w	r2, r2, #1
 800989a:	611a      	str	r2, [r3, #16]
      hlptim->Instance->ARR = tmpARR;
 800989c:	687b      	ldr	r3, [r7, #4]
 800989e:	681b      	ldr	r3, [r3, #0]
 80098a0:	69ba      	ldr	r2, [r7, #24]
 80098a2:	619a      	str	r2, [r3, #24]

      /* Wait for the completion of the write operation to the LPTIM_ARR register */
      if (LPTIM_WaitForFlag(hlptim, LPTIM_FLAG_ARROK) == HAL_TIMEOUT)
 80098a4:	2110      	movs	r1, #16
 80098a6:	6878      	ldr	r0, [r7, #4]
 80098a8:	f7ff fe7c 	bl	80095a4 <LPTIM_WaitForFlag>
 80098ac:	4603      	mov	r3, r0
 80098ae:	2b03      	cmp	r3, #3
 80098b0:	d103      	bne.n	80098ba <LPTIM_Disable+0x2b6>
      {
        hlptim->State = HAL_LPTIM_STATE_TIMEOUT;
 80098b2:	687b      	ldr	r3, [r7, #4]
 80098b4:	2203      	movs	r2, #3
 80098b6:	f883 2036 	strb.w	r2, [r3, #54]	; 0x36
      }

      __HAL_LPTIM_CLEAR_FLAG(hlptim, LPTIM_FLAG_ARROK);
 80098ba:	687b      	ldr	r3, [r7, #4]
 80098bc:	681b      	ldr	r3, [r3, #0]
 80098be:	2210      	movs	r2, #16
 80098c0:	605a      	str	r2, [r3, #4]
    }

    /* Restore LPTIM source kernel clock */
    switch ((uint32_t)hlptim->Instance)
 80098c2:	687b      	ldr	r3, [r7, #4]
 80098c4:	681b      	ldr	r3, [r3, #0]
 80098c6:	4a32      	ldr	r2, [pc, #200]	; (8009990 <LPTIM_Disable+0x38c>)
 80098c8:	4293      	cmp	r3, r2
 80098ca:	d039      	beq.n	8009940 <LPTIM_Disable+0x33c>
 80098cc:	4a30      	ldr	r2, [pc, #192]	; (8009990 <LPTIM_Disable+0x38c>)
 80098ce:	4293      	cmp	r3, r2
 80098d0:	d83f      	bhi.n	8009952 <LPTIM_Disable+0x34e>
 80098d2:	4a30      	ldr	r2, [pc, #192]	; (8009994 <LPTIM_Disable+0x390>)
 80098d4:	4293      	cmp	r3, r2
 80098d6:	d02a      	beq.n	800992e <LPTIM_Disable+0x32a>
 80098d8:	4a2e      	ldr	r2, [pc, #184]	; (8009994 <LPTIM_Disable+0x390>)
 80098da:	4293      	cmp	r3, r2
 80098dc:	d839      	bhi.n	8009952 <LPTIM_Disable+0x34e>
 80098de:	4a2e      	ldr	r2, [pc, #184]	; (8009998 <LPTIM_Disable+0x394>)
 80098e0:	4293      	cmp	r3, r2
 80098e2:	d01b      	beq.n	800991c <LPTIM_Disable+0x318>
 80098e4:	4a2c      	ldr	r2, [pc, #176]	; (8009998 <LPTIM_Disable+0x394>)
 80098e6:	4293      	cmp	r3, r2
 80098e8:	d833      	bhi.n	8009952 <LPTIM_Disable+0x34e>
 80098ea:	4a2c      	ldr	r2, [pc, #176]	; (800999c <LPTIM_Disable+0x398>)
 80098ec:	4293      	cmp	r3, r2
 80098ee:	d003      	beq.n	80098f8 <LPTIM_Disable+0x2f4>
 80098f0:	4a2b      	ldr	r2, [pc, #172]	; (80099a0 <LPTIM_Disable+0x39c>)
 80098f2:	4293      	cmp	r3, r2
 80098f4:	d009      	beq.n	800990a <LPTIM_Disable+0x306>
      case LPTIM5_BASE:
        __HAL_RCC_LPTIM5_CONFIG(tmpclksource);
        break;
#endif /* LPTIM5 */
      default:
        break;
 80098f6:	e02c      	b.n	8009952 <LPTIM_Disable+0x34e>
        __HAL_RCC_LPTIM1_CONFIG(tmpclksource);
 80098f8:	4b2a      	ldr	r3, [pc, #168]	; (80099a4 <LPTIM_Disable+0x3a0>)
 80098fa:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80098fc:	f023 42e0 	bic.w	r2, r3, #1879048192	; 0x70000000
 8009900:	4928      	ldr	r1, [pc, #160]	; (80099a4 <LPTIM_Disable+0x3a0>)
 8009902:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009904:	4313      	orrs	r3, r2
 8009906:	654b      	str	r3, [r1, #84]	; 0x54
        break;
 8009908:	e024      	b.n	8009954 <LPTIM_Disable+0x350>
        __HAL_RCC_LPTIM2_CONFIG(tmpclksource);
 800990a:	4b26      	ldr	r3, [pc, #152]	; (80099a4 <LPTIM_Disable+0x3a0>)
 800990c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800990e:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8009912:	4924      	ldr	r1, [pc, #144]	; (80099a4 <LPTIM_Disable+0x3a0>)
 8009914:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009916:	4313      	orrs	r3, r2
 8009918:	658b      	str	r3, [r1, #88]	; 0x58
        break;
 800991a:	e01b      	b.n	8009954 <LPTIM_Disable+0x350>
        __HAL_RCC_LPTIM3_CONFIG(tmpclksource);
 800991c:	4b21      	ldr	r3, [pc, #132]	; (80099a4 <LPTIM_Disable+0x3a0>)
 800991e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8009920:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8009924:	491f      	ldr	r1, [pc, #124]	; (80099a4 <LPTIM_Disable+0x3a0>)
 8009926:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009928:	4313      	orrs	r3, r2
 800992a:	658b      	str	r3, [r1, #88]	; 0x58
        break;
 800992c:	e012      	b.n	8009954 <LPTIM_Disable+0x350>
        __HAL_RCC_LPTIM4_CONFIG(tmpclksource);
 800992e:	4b1d      	ldr	r3, [pc, #116]	; (80099a4 <LPTIM_Disable+0x3a0>)
 8009930:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8009932:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8009936:	491b      	ldr	r1, [pc, #108]	; (80099a4 <LPTIM_Disable+0x3a0>)
 8009938:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800993a:	4313      	orrs	r3, r2
 800993c:	658b      	str	r3, [r1, #88]	; 0x58
        break;
 800993e:	e009      	b.n	8009954 <LPTIM_Disable+0x350>
        __HAL_RCC_LPTIM5_CONFIG(tmpclksource);
 8009940:	4b18      	ldr	r3, [pc, #96]	; (80099a4 <LPTIM_Disable+0x3a0>)
 8009942:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8009944:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8009948:	4916      	ldr	r1, [pc, #88]	; (80099a4 <LPTIM_Disable+0x3a0>)
 800994a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800994c:	4313      	orrs	r3, r2
 800994e:	658b      	str	r3, [r1, #88]	; 0x58
        break;
 8009950:	e000      	b.n	8009954 <LPTIM_Disable+0x350>
        break;
 8009952:	bf00      	nop
    }
  }

  /* Restore configuration registers (LPTIM should be disabled first) */
  hlptim->Instance->CR &= ~(LPTIM_CR_ENABLE);
 8009954:	687b      	ldr	r3, [r7, #4]
 8009956:	681b      	ldr	r3, [r3, #0]
 8009958:	691a      	ldr	r2, [r3, #16]
 800995a:	687b      	ldr	r3, [r7, #4]
 800995c:	681b      	ldr	r3, [r3, #0]
 800995e:	f022 0201 	bic.w	r2, r2, #1
 8009962:	611a      	str	r2, [r3, #16]
  hlptim->Instance->IER = tmpIER;
 8009964:	687b      	ldr	r3, [r7, #4]
 8009966:	681b      	ldr	r3, [r3, #0]
 8009968:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800996a:	609a      	str	r2, [r3, #8]
  hlptim->Instance->CFGR = tmpCFGR;
 800996c:	687b      	ldr	r3, [r7, #4]
 800996e:	681b      	ldr	r3, [r3, #0]
 8009970:	6a3a      	ldr	r2, [r7, #32]
 8009972:	60da      	str	r2, [r3, #12]
  hlptim->Instance->CFGR2 = tmpCFGR2;
 8009974:	687b      	ldr	r3, [r7, #4]
 8009976:	681b      	ldr	r3, [r3, #0]
 8009978:	697a      	ldr	r2, [r7, #20]
 800997a:	625a      	str	r2, [r3, #36]	; 0x24
 800997c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800997e:	60bb      	str	r3, [r7, #8]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8009980:	68bb      	ldr	r3, [r7, #8]
 8009982:	f383 8810 	msr	PRIMASK, r3
}
 8009986:	bf00      	nop

  /* Exit critical section: restore previous priority mask */
  __set_PRIMASK(primask_bit);
}
 8009988:	bf00      	nop
 800998a:	3730      	adds	r7, #48	; 0x30
 800998c:	46bd      	mov	sp, r7
 800998e:	bd80      	pop	{r7, pc}
 8009990:	58003000 	.word	0x58003000
 8009994:	58002c00 	.word	0x58002c00
 8009998:	58002800 	.word	0x58002800
 800999c:	40002400 	.word	0x40002400
 80099a0:	58002400 	.word	0x58002400
 80099a4:	58024400 	.word	0x58024400

080099a8 <HAL_PWR_EnableBkUpAccess>:
  * @note   If the HSE divided by 2, 3, ..31 is used as the RTC clock, the
  *         Backup Domain Access should be kept enabled.
  * @retval None.
  */
void HAL_PWR_EnableBkUpAccess (void)
{
 80099a8:	b480      	push	{r7}
 80099aa:	af00      	add	r7, sp, #0
  /* Enable access to RTC and backup registers */
  SET_BIT (PWR->CR1, PWR_CR1_DBP);
 80099ac:	4b05      	ldr	r3, [pc, #20]	; (80099c4 <HAL_PWR_EnableBkUpAccess+0x1c>)
 80099ae:	681b      	ldr	r3, [r3, #0]
 80099b0:	4a04      	ldr	r2, [pc, #16]	; (80099c4 <HAL_PWR_EnableBkUpAccess+0x1c>)
 80099b2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80099b6:	6013      	str	r3, [r2, #0]
}
 80099b8:	bf00      	nop
 80099ba:	46bd      	mov	sp, r7
 80099bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80099c0:	4770      	bx	lr
 80099c2:	bf00      	nop
 80099c4:	58024800 	.word	0x58024800

080099c8 <HAL_PWREx_ConfigSupply>:
  *         PWR_SMPS_2V5_SUPPLIES_EXT are used only for lines that supports SMPS
  *         regulator.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply (uint32_t SupplySource)
{
 80099c8:	b580      	push	{r7, lr}
 80099ca:	b084      	sub	sp, #16
 80099cc:	af00      	add	r7, sp, #0
 80099ce:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param (IS_PWR_SUPPLY (SupplySource));

  /* Check if supply source was configured */
#if defined (PWR_FLAG_SCUEN)
  if (__HAL_PWR_GET_FLAG (PWR_FLAG_SCUEN) == 0U)
 80099d0:	4b19      	ldr	r3, [pc, #100]	; (8009a38 <HAL_PWREx_ConfigSupply+0x70>)
 80099d2:	68db      	ldr	r3, [r3, #12]
 80099d4:	f003 0304 	and.w	r3, r3, #4
 80099d8:	2b04      	cmp	r3, #4
 80099da:	d00a      	beq.n	80099f2 <HAL_PWREx_ConfigSupply+0x2a>
#else
  if ((PWR->CR3 & (PWR_CR3_SMPSEN | PWR_CR3_LDOEN | PWR_CR3_BYPASS)) != (PWR_CR3_SMPSEN | PWR_CR3_LDOEN))
#endif /* defined (PWR_FLAG_SCUEN) */
  {
    /* Check supply configuration */
    if ((PWR->CR3 & PWR_SUPPLY_CONFIG_MASK) != SupplySource)
 80099dc:	4b16      	ldr	r3, [pc, #88]	; (8009a38 <HAL_PWREx_ConfigSupply+0x70>)
 80099de:	68db      	ldr	r3, [r3, #12]
 80099e0:	f003 0307 	and.w	r3, r3, #7
 80099e4:	687a      	ldr	r2, [r7, #4]
 80099e6:	429a      	cmp	r2, r3
 80099e8:	d001      	beq.n	80099ee <HAL_PWREx_ConfigSupply+0x26>
    {
      /* Supply configuration update locked, can't apply a new supply config */
      return HAL_ERROR;
 80099ea:	2301      	movs	r3, #1
 80099ec:	e01f      	b.n	8009a2e <HAL_PWREx_ConfigSupply+0x66>
    else
    {
      /* Supply configuration update locked, but new supply configuration
         matches with old supply configuration : nothing to do
      */
      return HAL_OK;
 80099ee:	2300      	movs	r3, #0
 80099f0:	e01d      	b.n	8009a2e <HAL_PWREx_ConfigSupply+0x66>
    }
  }

  /* Set the power supply configuration */
  MODIFY_REG (PWR->CR3, PWR_SUPPLY_CONFIG_MASK, SupplySource);
 80099f2:	4b11      	ldr	r3, [pc, #68]	; (8009a38 <HAL_PWREx_ConfigSupply+0x70>)
 80099f4:	68db      	ldr	r3, [r3, #12]
 80099f6:	f023 0207 	bic.w	r2, r3, #7
 80099fa:	490f      	ldr	r1, [pc, #60]	; (8009a38 <HAL_PWREx_ConfigSupply+0x70>)
 80099fc:	687b      	ldr	r3, [r7, #4]
 80099fe:	4313      	orrs	r3, r2
 8009a00:	60cb      	str	r3, [r1, #12]

  /* Get tick */
  tickstart = HAL_GetTick ();
 8009a02:	f7fa fafd 	bl	8004000 <HAL_GetTick>
 8009a06:	60f8      	str	r0, [r7, #12]

  /* Wait till voltage level flag is set */
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8009a08:	e009      	b.n	8009a1e <HAL_PWREx_ConfigSupply+0x56>
  {
    if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 8009a0a:	f7fa faf9 	bl	8004000 <HAL_GetTick>
 8009a0e:	4602      	mov	r2, r0
 8009a10:	68fb      	ldr	r3, [r7, #12]
 8009a12:	1ad3      	subs	r3, r2, r3
 8009a14:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8009a18:	d901      	bls.n	8009a1e <HAL_PWREx_ConfigSupply+0x56>
    {
      return HAL_ERROR;
 8009a1a:	2301      	movs	r3, #1
 8009a1c:	e007      	b.n	8009a2e <HAL_PWREx_ConfigSupply+0x66>
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8009a1e:	4b06      	ldr	r3, [pc, #24]	; (8009a38 <HAL_PWREx_ConfigSupply+0x70>)
 8009a20:	685b      	ldr	r3, [r3, #4]
 8009a22:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8009a26:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8009a2a:	d1ee      	bne.n	8009a0a <HAL_PWREx_ConfigSupply+0x42>
      }
    }
  }
#endif /* defined (SMPS) */

  return HAL_OK;
 8009a2c:	2300      	movs	r3, #0
}
 8009a2e:	4618      	mov	r0, r3
 8009a30:	3710      	adds	r7, #16
 8009a32:	46bd      	mov	sp, r7
 8009a34:	bd80      	pop	{r7, pc}
 8009a36:	bf00      	nop
 8009a38:	58024800 	.word	0x58024800

08009a3c <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8009a3c:	b580      	push	{r7, lr}
 8009a3e:	b08c      	sub	sp, #48	; 0x30
 8009a40:	af00      	add	r7, sp, #0
 8009a42:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp1_pllckcfg, temp2_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8009a44:	687b      	ldr	r3, [r7, #4]
 8009a46:	2b00      	cmp	r3, #0
 8009a48:	d102      	bne.n	8009a50 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 8009a4a:	2301      	movs	r3, #1
 8009a4c:	f000 bc48 	b.w	800a2e0 <HAL_RCC_OscConfig+0x8a4>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8009a50:	687b      	ldr	r3, [r7, #4]
 8009a52:	681b      	ldr	r3, [r3, #0]
 8009a54:	f003 0301 	and.w	r3, r3, #1
 8009a58:	2b00      	cmp	r3, #0
 8009a5a:	f000 8088 	beq.w	8009b6e <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8009a5e:	4b99      	ldr	r3, [pc, #612]	; (8009cc4 <HAL_RCC_OscConfig+0x288>)
 8009a60:	691b      	ldr	r3, [r3, #16]
 8009a62:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8009a66:	62fb      	str	r3, [r7, #44]	; 0x2c
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8009a68:	4b96      	ldr	r3, [pc, #600]	; (8009cc4 <HAL_RCC_OscConfig+0x288>)
 8009a6a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009a6c:	62bb      	str	r3, [r7, #40]	; 0x28
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
 8009a6e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009a70:	2b10      	cmp	r3, #16
 8009a72:	d007      	beq.n	8009a84 <HAL_RCC_OscConfig+0x48>
 8009a74:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009a76:	2b18      	cmp	r3, #24
 8009a78:	d111      	bne.n	8009a9e <HAL_RCC_OscConfig+0x62>
 8009a7a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009a7c:	f003 0303 	and.w	r3, r3, #3
 8009a80:	2b02      	cmp	r3, #2
 8009a82:	d10c      	bne.n	8009a9e <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8009a84:	4b8f      	ldr	r3, [pc, #572]	; (8009cc4 <HAL_RCC_OscConfig+0x288>)
 8009a86:	681b      	ldr	r3, [r3, #0]
 8009a88:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8009a8c:	2b00      	cmp	r3, #0
 8009a8e:	d06d      	beq.n	8009b6c <HAL_RCC_OscConfig+0x130>
 8009a90:	687b      	ldr	r3, [r7, #4]
 8009a92:	685b      	ldr	r3, [r3, #4]
 8009a94:	2b00      	cmp	r3, #0
 8009a96:	d169      	bne.n	8009b6c <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 8009a98:	2301      	movs	r3, #1
 8009a9a:	f000 bc21 	b.w	800a2e0 <HAL_RCC_OscConfig+0x8a4>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8009a9e:	687b      	ldr	r3, [r7, #4]
 8009aa0:	685b      	ldr	r3, [r3, #4]
 8009aa2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8009aa6:	d106      	bne.n	8009ab6 <HAL_RCC_OscConfig+0x7a>
 8009aa8:	4b86      	ldr	r3, [pc, #536]	; (8009cc4 <HAL_RCC_OscConfig+0x288>)
 8009aaa:	681b      	ldr	r3, [r3, #0]
 8009aac:	4a85      	ldr	r2, [pc, #532]	; (8009cc4 <HAL_RCC_OscConfig+0x288>)
 8009aae:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8009ab2:	6013      	str	r3, [r2, #0]
 8009ab4:	e02e      	b.n	8009b14 <HAL_RCC_OscConfig+0xd8>
 8009ab6:	687b      	ldr	r3, [r7, #4]
 8009ab8:	685b      	ldr	r3, [r3, #4]
 8009aba:	2b00      	cmp	r3, #0
 8009abc:	d10c      	bne.n	8009ad8 <HAL_RCC_OscConfig+0x9c>
 8009abe:	4b81      	ldr	r3, [pc, #516]	; (8009cc4 <HAL_RCC_OscConfig+0x288>)
 8009ac0:	681b      	ldr	r3, [r3, #0]
 8009ac2:	4a80      	ldr	r2, [pc, #512]	; (8009cc4 <HAL_RCC_OscConfig+0x288>)
 8009ac4:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8009ac8:	6013      	str	r3, [r2, #0]
 8009aca:	4b7e      	ldr	r3, [pc, #504]	; (8009cc4 <HAL_RCC_OscConfig+0x288>)
 8009acc:	681b      	ldr	r3, [r3, #0]
 8009ace:	4a7d      	ldr	r2, [pc, #500]	; (8009cc4 <HAL_RCC_OscConfig+0x288>)
 8009ad0:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8009ad4:	6013      	str	r3, [r2, #0]
 8009ad6:	e01d      	b.n	8009b14 <HAL_RCC_OscConfig+0xd8>
 8009ad8:	687b      	ldr	r3, [r7, #4]
 8009ada:	685b      	ldr	r3, [r3, #4]
 8009adc:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8009ae0:	d10c      	bne.n	8009afc <HAL_RCC_OscConfig+0xc0>
 8009ae2:	4b78      	ldr	r3, [pc, #480]	; (8009cc4 <HAL_RCC_OscConfig+0x288>)
 8009ae4:	681b      	ldr	r3, [r3, #0]
 8009ae6:	4a77      	ldr	r2, [pc, #476]	; (8009cc4 <HAL_RCC_OscConfig+0x288>)
 8009ae8:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8009aec:	6013      	str	r3, [r2, #0]
 8009aee:	4b75      	ldr	r3, [pc, #468]	; (8009cc4 <HAL_RCC_OscConfig+0x288>)
 8009af0:	681b      	ldr	r3, [r3, #0]
 8009af2:	4a74      	ldr	r2, [pc, #464]	; (8009cc4 <HAL_RCC_OscConfig+0x288>)
 8009af4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8009af8:	6013      	str	r3, [r2, #0]
 8009afa:	e00b      	b.n	8009b14 <HAL_RCC_OscConfig+0xd8>
 8009afc:	4b71      	ldr	r3, [pc, #452]	; (8009cc4 <HAL_RCC_OscConfig+0x288>)
 8009afe:	681b      	ldr	r3, [r3, #0]
 8009b00:	4a70      	ldr	r2, [pc, #448]	; (8009cc4 <HAL_RCC_OscConfig+0x288>)
 8009b02:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8009b06:	6013      	str	r3, [r2, #0]
 8009b08:	4b6e      	ldr	r3, [pc, #440]	; (8009cc4 <HAL_RCC_OscConfig+0x288>)
 8009b0a:	681b      	ldr	r3, [r3, #0]
 8009b0c:	4a6d      	ldr	r2, [pc, #436]	; (8009cc4 <HAL_RCC_OscConfig+0x288>)
 8009b0e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8009b12:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8009b14:	687b      	ldr	r3, [r7, #4]
 8009b16:	685b      	ldr	r3, [r3, #4]
 8009b18:	2b00      	cmp	r3, #0
 8009b1a:	d013      	beq.n	8009b44 <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8009b1c:	f7fa fa70 	bl	8004000 <HAL_GetTick>
 8009b20:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8009b22:	e008      	b.n	8009b36 <HAL_RCC_OscConfig+0xfa>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8009b24:	f7fa fa6c 	bl	8004000 <HAL_GetTick>
 8009b28:	4602      	mov	r2, r0
 8009b2a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009b2c:	1ad3      	subs	r3, r2, r3
 8009b2e:	2b64      	cmp	r3, #100	; 0x64
 8009b30:	d901      	bls.n	8009b36 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8009b32:	2303      	movs	r3, #3
 8009b34:	e3d4      	b.n	800a2e0 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8009b36:	4b63      	ldr	r3, [pc, #396]	; (8009cc4 <HAL_RCC_OscConfig+0x288>)
 8009b38:	681b      	ldr	r3, [r3, #0]
 8009b3a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8009b3e:	2b00      	cmp	r3, #0
 8009b40:	d0f0      	beq.n	8009b24 <HAL_RCC_OscConfig+0xe8>
 8009b42:	e014      	b.n	8009b6e <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8009b44:	f7fa fa5c 	bl	8004000 <HAL_GetTick>
 8009b48:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8009b4a:	e008      	b.n	8009b5e <HAL_RCC_OscConfig+0x122>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8009b4c:	f7fa fa58 	bl	8004000 <HAL_GetTick>
 8009b50:	4602      	mov	r2, r0
 8009b52:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009b54:	1ad3      	subs	r3, r2, r3
 8009b56:	2b64      	cmp	r3, #100	; 0x64
 8009b58:	d901      	bls.n	8009b5e <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 8009b5a:	2303      	movs	r3, #3
 8009b5c:	e3c0      	b.n	800a2e0 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8009b5e:	4b59      	ldr	r3, [pc, #356]	; (8009cc4 <HAL_RCC_OscConfig+0x288>)
 8009b60:	681b      	ldr	r3, [r3, #0]
 8009b62:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8009b66:	2b00      	cmp	r3, #0
 8009b68:	d1f0      	bne.n	8009b4c <HAL_RCC_OscConfig+0x110>
 8009b6a:	e000      	b.n	8009b6e <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8009b6c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8009b6e:	687b      	ldr	r3, [r7, #4]
 8009b70:	681b      	ldr	r3, [r3, #0]
 8009b72:	f003 0302 	and.w	r3, r3, #2
 8009b76:	2b00      	cmp	r3, #0
 8009b78:	f000 80ca 	beq.w	8009d10 <HAL_RCC_OscConfig+0x2d4>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSICALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* When the HSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8009b7c:	4b51      	ldr	r3, [pc, #324]	; (8009cc4 <HAL_RCC_OscConfig+0x288>)
 8009b7e:	691b      	ldr	r3, [r3, #16]
 8009b80:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8009b84:	623b      	str	r3, [r7, #32]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8009b86:	4b4f      	ldr	r3, [pc, #316]	; (8009cc4 <HAL_RCC_OscConfig+0x288>)
 8009b88:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009b8a:	61fb      	str	r3, [r7, #28]
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 8009b8c:	6a3b      	ldr	r3, [r7, #32]
 8009b8e:	2b00      	cmp	r3, #0
 8009b90:	d007      	beq.n	8009ba2 <HAL_RCC_OscConfig+0x166>
 8009b92:	6a3b      	ldr	r3, [r7, #32]
 8009b94:	2b18      	cmp	r3, #24
 8009b96:	d156      	bne.n	8009c46 <HAL_RCC_OscConfig+0x20a>
 8009b98:	69fb      	ldr	r3, [r7, #28]
 8009b9a:	f003 0303 	and.w	r3, r3, #3
 8009b9e:	2b00      	cmp	r3, #0
 8009ba0:	d151      	bne.n	8009c46 <HAL_RCC_OscConfig+0x20a>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8009ba2:	4b48      	ldr	r3, [pc, #288]	; (8009cc4 <HAL_RCC_OscConfig+0x288>)
 8009ba4:	681b      	ldr	r3, [r3, #0]
 8009ba6:	f003 0304 	and.w	r3, r3, #4
 8009baa:	2b00      	cmp	r3, #0
 8009bac:	d005      	beq.n	8009bba <HAL_RCC_OscConfig+0x17e>
 8009bae:	687b      	ldr	r3, [r7, #4]
 8009bb0:	68db      	ldr	r3, [r3, #12]
 8009bb2:	2b00      	cmp	r3, #0
 8009bb4:	d101      	bne.n	8009bba <HAL_RCC_OscConfig+0x17e>
      {
        return HAL_ERROR;
 8009bb6:	2301      	movs	r3, #1
 8009bb8:	e392      	b.n	800a2e0 <HAL_RCC_OscConfig+0x8a4>
      }
      /* Otherwise, only HSI division and calibration are allowed */
      else
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2, HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 8009bba:	4b42      	ldr	r3, [pc, #264]	; (8009cc4 <HAL_RCC_OscConfig+0x288>)
 8009bbc:	681b      	ldr	r3, [r3, #0]
 8009bbe:	f023 0219 	bic.w	r2, r3, #25
 8009bc2:	687b      	ldr	r3, [r7, #4]
 8009bc4:	68db      	ldr	r3, [r3, #12]
 8009bc6:	493f      	ldr	r1, [pc, #252]	; (8009cc4 <HAL_RCC_OscConfig+0x288>)
 8009bc8:	4313      	orrs	r3, r2
 8009bca:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8009bcc:	f7fa fa18 	bl	8004000 <HAL_GetTick>
 8009bd0:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8009bd2:	e008      	b.n	8009be6 <HAL_RCC_OscConfig+0x1aa>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8009bd4:	f7fa fa14 	bl	8004000 <HAL_GetTick>
 8009bd8:	4602      	mov	r2, r0
 8009bda:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009bdc:	1ad3      	subs	r3, r2, r3
 8009bde:	2b02      	cmp	r3, #2
 8009be0:	d901      	bls.n	8009be6 <HAL_RCC_OscConfig+0x1aa>
          {
            return HAL_TIMEOUT;
 8009be2:	2303      	movs	r3, #3
 8009be4:	e37c      	b.n	800a2e0 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8009be6:	4b37      	ldr	r3, [pc, #220]	; (8009cc4 <HAL_RCC_OscConfig+0x288>)
 8009be8:	681b      	ldr	r3, [r3, #0]
 8009bea:	f003 0304 	and.w	r3, r3, #4
 8009bee:	2b00      	cmp	r3, #0
 8009bf0:	d0f0      	beq.n	8009bd4 <HAL_RCC_OscConfig+0x198>
          }
        }
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8009bf2:	f7fa fa35 	bl	8004060 <HAL_GetREVID>
 8009bf6:	4603      	mov	r3, r0
 8009bf8:	f241 0203 	movw	r2, #4099	; 0x1003
 8009bfc:	4293      	cmp	r3, r2
 8009bfe:	d817      	bhi.n	8009c30 <HAL_RCC_OscConfig+0x1f4>
 8009c00:	687b      	ldr	r3, [r7, #4]
 8009c02:	691b      	ldr	r3, [r3, #16]
 8009c04:	2b40      	cmp	r3, #64	; 0x40
 8009c06:	d108      	bne.n	8009c1a <HAL_RCC_OscConfig+0x1de>
 8009c08:	4b2e      	ldr	r3, [pc, #184]	; (8009cc4 <HAL_RCC_OscConfig+0x288>)
 8009c0a:	685b      	ldr	r3, [r3, #4]
 8009c0c:	f423 337c 	bic.w	r3, r3, #258048	; 0x3f000
 8009c10:	4a2c      	ldr	r2, [pc, #176]	; (8009cc4 <HAL_RCC_OscConfig+0x288>)
 8009c12:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8009c16:	6053      	str	r3, [r2, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8009c18:	e07a      	b.n	8009d10 <HAL_RCC_OscConfig+0x2d4>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8009c1a:	4b2a      	ldr	r3, [pc, #168]	; (8009cc4 <HAL_RCC_OscConfig+0x288>)
 8009c1c:	685b      	ldr	r3, [r3, #4]
 8009c1e:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 8009c22:	687b      	ldr	r3, [r7, #4]
 8009c24:	691b      	ldr	r3, [r3, #16]
 8009c26:	031b      	lsls	r3, r3, #12
 8009c28:	4926      	ldr	r1, [pc, #152]	; (8009cc4 <HAL_RCC_OscConfig+0x288>)
 8009c2a:	4313      	orrs	r3, r2
 8009c2c:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8009c2e:	e06f      	b.n	8009d10 <HAL_RCC_OscConfig+0x2d4>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8009c30:	4b24      	ldr	r3, [pc, #144]	; (8009cc4 <HAL_RCC_OscConfig+0x288>)
 8009c32:	685b      	ldr	r3, [r3, #4]
 8009c34:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8009c38:	687b      	ldr	r3, [r7, #4]
 8009c3a:	691b      	ldr	r3, [r3, #16]
 8009c3c:	061b      	lsls	r3, r3, #24
 8009c3e:	4921      	ldr	r1, [pc, #132]	; (8009cc4 <HAL_RCC_OscConfig+0x288>)
 8009c40:	4313      	orrs	r3, r2
 8009c42:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8009c44:	e064      	b.n	8009d10 <HAL_RCC_OscConfig+0x2d4>
    }

    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8009c46:	687b      	ldr	r3, [r7, #4]
 8009c48:	68db      	ldr	r3, [r3, #12]
 8009c4a:	2b00      	cmp	r3, #0
 8009c4c:	d047      	beq.n	8009cde <HAL_RCC_OscConfig+0x2a2>
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2,HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 8009c4e:	4b1d      	ldr	r3, [pc, #116]	; (8009cc4 <HAL_RCC_OscConfig+0x288>)
 8009c50:	681b      	ldr	r3, [r3, #0]
 8009c52:	f023 0219 	bic.w	r2, r3, #25
 8009c56:	687b      	ldr	r3, [r7, #4]
 8009c58:	68db      	ldr	r3, [r3, #12]
 8009c5a:	491a      	ldr	r1, [pc, #104]	; (8009cc4 <HAL_RCC_OscConfig+0x288>)
 8009c5c:	4313      	orrs	r3, r2
 8009c5e:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8009c60:	f7fa f9ce 	bl	8004000 <HAL_GetTick>
 8009c64:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8009c66:	e008      	b.n	8009c7a <HAL_RCC_OscConfig+0x23e>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8009c68:	f7fa f9ca 	bl	8004000 <HAL_GetTick>
 8009c6c:	4602      	mov	r2, r0
 8009c6e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009c70:	1ad3      	subs	r3, r2, r3
 8009c72:	2b02      	cmp	r3, #2
 8009c74:	d901      	bls.n	8009c7a <HAL_RCC_OscConfig+0x23e>
          {
            return HAL_TIMEOUT;
 8009c76:	2303      	movs	r3, #3
 8009c78:	e332      	b.n	800a2e0 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8009c7a:	4b12      	ldr	r3, [pc, #72]	; (8009cc4 <HAL_RCC_OscConfig+0x288>)
 8009c7c:	681b      	ldr	r3, [r3, #0]
 8009c7e:	f003 0304 	and.w	r3, r3, #4
 8009c82:	2b00      	cmp	r3, #0
 8009c84:	d0f0      	beq.n	8009c68 <HAL_RCC_OscConfig+0x22c>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8009c86:	f7fa f9eb 	bl	8004060 <HAL_GetREVID>
 8009c8a:	4603      	mov	r3, r0
 8009c8c:	f241 0203 	movw	r2, #4099	; 0x1003
 8009c90:	4293      	cmp	r3, r2
 8009c92:	d819      	bhi.n	8009cc8 <HAL_RCC_OscConfig+0x28c>
 8009c94:	687b      	ldr	r3, [r7, #4]
 8009c96:	691b      	ldr	r3, [r3, #16]
 8009c98:	2b40      	cmp	r3, #64	; 0x40
 8009c9a:	d108      	bne.n	8009cae <HAL_RCC_OscConfig+0x272>
 8009c9c:	4b09      	ldr	r3, [pc, #36]	; (8009cc4 <HAL_RCC_OscConfig+0x288>)
 8009c9e:	685b      	ldr	r3, [r3, #4]
 8009ca0:	f423 337c 	bic.w	r3, r3, #258048	; 0x3f000
 8009ca4:	4a07      	ldr	r2, [pc, #28]	; (8009cc4 <HAL_RCC_OscConfig+0x288>)
 8009ca6:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8009caa:	6053      	str	r3, [r2, #4]
 8009cac:	e030      	b.n	8009d10 <HAL_RCC_OscConfig+0x2d4>
 8009cae:	4b05      	ldr	r3, [pc, #20]	; (8009cc4 <HAL_RCC_OscConfig+0x288>)
 8009cb0:	685b      	ldr	r3, [r3, #4]
 8009cb2:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 8009cb6:	687b      	ldr	r3, [r7, #4]
 8009cb8:	691b      	ldr	r3, [r3, #16]
 8009cba:	031b      	lsls	r3, r3, #12
 8009cbc:	4901      	ldr	r1, [pc, #4]	; (8009cc4 <HAL_RCC_OscConfig+0x288>)
 8009cbe:	4313      	orrs	r3, r2
 8009cc0:	604b      	str	r3, [r1, #4]
 8009cc2:	e025      	b.n	8009d10 <HAL_RCC_OscConfig+0x2d4>
 8009cc4:	58024400 	.word	0x58024400
 8009cc8:	4b9a      	ldr	r3, [pc, #616]	; (8009f34 <HAL_RCC_OscConfig+0x4f8>)
 8009cca:	685b      	ldr	r3, [r3, #4]
 8009ccc:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8009cd0:	687b      	ldr	r3, [r7, #4]
 8009cd2:	691b      	ldr	r3, [r3, #16]
 8009cd4:	061b      	lsls	r3, r3, #24
 8009cd6:	4997      	ldr	r1, [pc, #604]	; (8009f34 <HAL_RCC_OscConfig+0x4f8>)
 8009cd8:	4313      	orrs	r3, r2
 8009cda:	604b      	str	r3, [r1, #4]
 8009cdc:	e018      	b.n	8009d10 <HAL_RCC_OscConfig+0x2d4>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8009cde:	4b95      	ldr	r3, [pc, #596]	; (8009f34 <HAL_RCC_OscConfig+0x4f8>)
 8009ce0:	681b      	ldr	r3, [r3, #0]
 8009ce2:	4a94      	ldr	r2, [pc, #592]	; (8009f34 <HAL_RCC_OscConfig+0x4f8>)
 8009ce4:	f023 0301 	bic.w	r3, r3, #1
 8009ce8:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8009cea:	f7fa f989 	bl	8004000 <HAL_GetTick>
 8009cee:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8009cf0:	e008      	b.n	8009d04 <HAL_RCC_OscConfig+0x2c8>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8009cf2:	f7fa f985 	bl	8004000 <HAL_GetTick>
 8009cf6:	4602      	mov	r2, r0
 8009cf8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009cfa:	1ad3      	subs	r3, r2, r3
 8009cfc:	2b02      	cmp	r3, #2
 8009cfe:	d901      	bls.n	8009d04 <HAL_RCC_OscConfig+0x2c8>
          {
            return HAL_TIMEOUT;
 8009d00:	2303      	movs	r3, #3
 8009d02:	e2ed      	b.n	800a2e0 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8009d04:	4b8b      	ldr	r3, [pc, #556]	; (8009f34 <HAL_RCC_OscConfig+0x4f8>)
 8009d06:	681b      	ldr	r3, [r3, #0]
 8009d08:	f003 0304 	and.w	r3, r3, #4
 8009d0c:	2b00      	cmp	r3, #0
 8009d0e:	d1f0      	bne.n	8009cf2 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }
  }
  /*----------------------------- CSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 8009d10:	687b      	ldr	r3, [r7, #4]
 8009d12:	681b      	ldr	r3, [r3, #0]
 8009d14:	f003 0310 	and.w	r3, r3, #16
 8009d18:	2b00      	cmp	r3, #0
 8009d1a:	f000 80a9 	beq.w	8009e70 <HAL_RCC_OscConfig+0x434>
    /* Check the parameters */
    assert_param(IS_RCC_CSI(RCC_OscInitStruct->CSIState));
    assert_param(IS_RCC_CSICALIBRATION_VALUE(RCC_OscInitStruct->CSICalibrationValue));

    /* When the CSI is used as system clock it will not disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8009d1e:	4b85      	ldr	r3, [pc, #532]	; (8009f34 <HAL_RCC_OscConfig+0x4f8>)
 8009d20:	691b      	ldr	r3, [r3, #16]
 8009d22:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8009d26:	61bb      	str	r3, [r7, #24]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8009d28:	4b82      	ldr	r3, [pc, #520]	; (8009f34 <HAL_RCC_OscConfig+0x4f8>)
 8009d2a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009d2c:	617b      	str	r3, [r7, #20]
    if ((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
 8009d2e:	69bb      	ldr	r3, [r7, #24]
 8009d30:	2b08      	cmp	r3, #8
 8009d32:	d007      	beq.n	8009d44 <HAL_RCC_OscConfig+0x308>
 8009d34:	69bb      	ldr	r3, [r7, #24]
 8009d36:	2b18      	cmp	r3, #24
 8009d38:	d13a      	bne.n	8009db0 <HAL_RCC_OscConfig+0x374>
 8009d3a:	697b      	ldr	r3, [r7, #20]
 8009d3c:	f003 0303 	and.w	r3, r3, #3
 8009d40:	2b01      	cmp	r3, #1
 8009d42:	d135      	bne.n	8009db0 <HAL_RCC_OscConfig+0x374>
    {
      /* When CSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8009d44:	4b7b      	ldr	r3, [pc, #492]	; (8009f34 <HAL_RCC_OscConfig+0x4f8>)
 8009d46:	681b      	ldr	r3, [r3, #0]
 8009d48:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8009d4c:	2b00      	cmp	r3, #0
 8009d4e:	d005      	beq.n	8009d5c <HAL_RCC_OscConfig+0x320>
 8009d50:	687b      	ldr	r3, [r7, #4]
 8009d52:	69db      	ldr	r3, [r3, #28]
 8009d54:	2b80      	cmp	r3, #128	; 0x80
 8009d56:	d001      	beq.n	8009d5c <HAL_RCC_OscConfig+0x320>
      {
        return HAL_ERROR;
 8009d58:	2301      	movs	r3, #1
 8009d5a:	e2c1      	b.n	800a2e0 <HAL_RCC_OscConfig+0x8a4>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8009d5c:	f7fa f980 	bl	8004060 <HAL_GetREVID>
 8009d60:	4603      	mov	r3, r0
 8009d62:	f241 0203 	movw	r2, #4099	; 0x1003
 8009d66:	4293      	cmp	r3, r2
 8009d68:	d817      	bhi.n	8009d9a <HAL_RCC_OscConfig+0x35e>
 8009d6a:	687b      	ldr	r3, [r7, #4]
 8009d6c:	6a1b      	ldr	r3, [r3, #32]
 8009d6e:	2b20      	cmp	r3, #32
 8009d70:	d108      	bne.n	8009d84 <HAL_RCC_OscConfig+0x348>
 8009d72:	4b70      	ldr	r3, [pc, #448]	; (8009f34 <HAL_RCC_OscConfig+0x4f8>)
 8009d74:	685b      	ldr	r3, [r3, #4]
 8009d76:	f023 43f8 	bic.w	r3, r3, #2080374784	; 0x7c000000
 8009d7a:	4a6e      	ldr	r2, [pc, #440]	; (8009f34 <HAL_RCC_OscConfig+0x4f8>)
 8009d7c:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8009d80:	6053      	str	r3, [r2, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8009d82:	e075      	b.n	8009e70 <HAL_RCC_OscConfig+0x434>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8009d84:	4b6b      	ldr	r3, [pc, #428]	; (8009f34 <HAL_RCC_OscConfig+0x4f8>)
 8009d86:	685b      	ldr	r3, [r3, #4]
 8009d88:	f023 42f8 	bic.w	r2, r3, #2080374784	; 0x7c000000
 8009d8c:	687b      	ldr	r3, [r7, #4]
 8009d8e:	6a1b      	ldr	r3, [r3, #32]
 8009d90:	069b      	lsls	r3, r3, #26
 8009d92:	4968      	ldr	r1, [pc, #416]	; (8009f34 <HAL_RCC_OscConfig+0x4f8>)
 8009d94:	4313      	orrs	r3, r2
 8009d96:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8009d98:	e06a      	b.n	8009e70 <HAL_RCC_OscConfig+0x434>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8009d9a:	4b66      	ldr	r3, [pc, #408]	; (8009f34 <HAL_RCC_OscConfig+0x4f8>)
 8009d9c:	68db      	ldr	r3, [r3, #12]
 8009d9e:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 8009da2:	687b      	ldr	r3, [r7, #4]
 8009da4:	6a1b      	ldr	r3, [r3, #32]
 8009da6:	061b      	lsls	r3, r3, #24
 8009da8:	4962      	ldr	r1, [pc, #392]	; (8009f34 <HAL_RCC_OscConfig+0x4f8>)
 8009daa:	4313      	orrs	r3, r2
 8009dac:	60cb      	str	r3, [r1, #12]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8009dae:	e05f      	b.n	8009e70 <HAL_RCC_OscConfig+0x434>
      }
    }
    else
    {
      /* Check the CSI State */
      if ((RCC_OscInitStruct->CSIState) != RCC_CSI_OFF)
 8009db0:	687b      	ldr	r3, [r7, #4]
 8009db2:	69db      	ldr	r3, [r3, #28]
 8009db4:	2b00      	cmp	r3, #0
 8009db6:	d042      	beq.n	8009e3e <HAL_RCC_OscConfig+0x402>
      {
        /* Enable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_ENABLE();
 8009db8:	4b5e      	ldr	r3, [pc, #376]	; (8009f34 <HAL_RCC_OscConfig+0x4f8>)
 8009dba:	681b      	ldr	r3, [r3, #0]
 8009dbc:	4a5d      	ldr	r2, [pc, #372]	; (8009f34 <HAL_RCC_OscConfig+0x4f8>)
 8009dbe:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8009dc2:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8009dc4:	f7fa f91c 	bl	8004000 <HAL_GetTick>
 8009dc8:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8009dca:	e008      	b.n	8009dde <HAL_RCC_OscConfig+0x3a2>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 8009dcc:	f7fa f918 	bl	8004000 <HAL_GetTick>
 8009dd0:	4602      	mov	r2, r0
 8009dd2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009dd4:	1ad3      	subs	r3, r2, r3
 8009dd6:	2b02      	cmp	r3, #2
 8009dd8:	d901      	bls.n	8009dde <HAL_RCC_OscConfig+0x3a2>
          {
            return HAL_TIMEOUT;
 8009dda:	2303      	movs	r3, #3
 8009ddc:	e280      	b.n	800a2e0 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8009dde:	4b55      	ldr	r3, [pc, #340]	; (8009f34 <HAL_RCC_OscConfig+0x4f8>)
 8009de0:	681b      	ldr	r3, [r3, #0]
 8009de2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8009de6:	2b00      	cmp	r3, #0
 8009de8:	d0f0      	beq.n	8009dcc <HAL_RCC_OscConfig+0x390>
          }
        }

        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8009dea:	f7fa f939 	bl	8004060 <HAL_GetREVID>
 8009dee:	4603      	mov	r3, r0
 8009df0:	f241 0203 	movw	r2, #4099	; 0x1003
 8009df4:	4293      	cmp	r3, r2
 8009df6:	d817      	bhi.n	8009e28 <HAL_RCC_OscConfig+0x3ec>
 8009df8:	687b      	ldr	r3, [r7, #4]
 8009dfa:	6a1b      	ldr	r3, [r3, #32]
 8009dfc:	2b20      	cmp	r3, #32
 8009dfe:	d108      	bne.n	8009e12 <HAL_RCC_OscConfig+0x3d6>
 8009e00:	4b4c      	ldr	r3, [pc, #304]	; (8009f34 <HAL_RCC_OscConfig+0x4f8>)
 8009e02:	685b      	ldr	r3, [r3, #4]
 8009e04:	f023 43f8 	bic.w	r3, r3, #2080374784	; 0x7c000000
 8009e08:	4a4a      	ldr	r2, [pc, #296]	; (8009f34 <HAL_RCC_OscConfig+0x4f8>)
 8009e0a:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8009e0e:	6053      	str	r3, [r2, #4]
 8009e10:	e02e      	b.n	8009e70 <HAL_RCC_OscConfig+0x434>
 8009e12:	4b48      	ldr	r3, [pc, #288]	; (8009f34 <HAL_RCC_OscConfig+0x4f8>)
 8009e14:	685b      	ldr	r3, [r3, #4]
 8009e16:	f023 42f8 	bic.w	r2, r3, #2080374784	; 0x7c000000
 8009e1a:	687b      	ldr	r3, [r7, #4]
 8009e1c:	6a1b      	ldr	r3, [r3, #32]
 8009e1e:	069b      	lsls	r3, r3, #26
 8009e20:	4944      	ldr	r1, [pc, #272]	; (8009f34 <HAL_RCC_OscConfig+0x4f8>)
 8009e22:	4313      	orrs	r3, r2
 8009e24:	604b      	str	r3, [r1, #4]
 8009e26:	e023      	b.n	8009e70 <HAL_RCC_OscConfig+0x434>
 8009e28:	4b42      	ldr	r3, [pc, #264]	; (8009f34 <HAL_RCC_OscConfig+0x4f8>)
 8009e2a:	68db      	ldr	r3, [r3, #12]
 8009e2c:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 8009e30:	687b      	ldr	r3, [r7, #4]
 8009e32:	6a1b      	ldr	r3, [r3, #32]
 8009e34:	061b      	lsls	r3, r3, #24
 8009e36:	493f      	ldr	r1, [pc, #252]	; (8009f34 <HAL_RCC_OscConfig+0x4f8>)
 8009e38:	4313      	orrs	r3, r2
 8009e3a:	60cb      	str	r3, [r1, #12]
 8009e3c:	e018      	b.n	8009e70 <HAL_RCC_OscConfig+0x434>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_DISABLE();
 8009e3e:	4b3d      	ldr	r3, [pc, #244]	; (8009f34 <HAL_RCC_OscConfig+0x4f8>)
 8009e40:	681b      	ldr	r3, [r3, #0]
 8009e42:	4a3c      	ldr	r2, [pc, #240]	; (8009f34 <HAL_RCC_OscConfig+0x4f8>)
 8009e44:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8009e48:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8009e4a:	f7fa f8d9 	bl	8004000 <HAL_GetTick>
 8009e4e:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8009e50:	e008      	b.n	8009e64 <HAL_RCC_OscConfig+0x428>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 8009e52:	f7fa f8d5 	bl	8004000 <HAL_GetTick>
 8009e56:	4602      	mov	r2, r0
 8009e58:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009e5a:	1ad3      	subs	r3, r2, r3
 8009e5c:	2b02      	cmp	r3, #2
 8009e5e:	d901      	bls.n	8009e64 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8009e60:	2303      	movs	r3, #3
 8009e62:	e23d      	b.n	800a2e0 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8009e64:	4b33      	ldr	r3, [pc, #204]	; (8009f34 <HAL_RCC_OscConfig+0x4f8>)
 8009e66:	681b      	ldr	r3, [r3, #0]
 8009e68:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8009e6c:	2b00      	cmp	r3, #0
 8009e6e:	d1f0      	bne.n	8009e52 <HAL_RCC_OscConfig+0x416>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8009e70:	687b      	ldr	r3, [r7, #4]
 8009e72:	681b      	ldr	r3, [r3, #0]
 8009e74:	f003 0308 	and.w	r3, r3, #8
 8009e78:	2b00      	cmp	r3, #0
 8009e7a:	d036      	beq.n	8009eea <HAL_RCC_OscConfig+0x4ae>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8009e7c:	687b      	ldr	r3, [r7, #4]
 8009e7e:	695b      	ldr	r3, [r3, #20]
 8009e80:	2b00      	cmp	r3, #0
 8009e82:	d019      	beq.n	8009eb8 <HAL_RCC_OscConfig+0x47c>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8009e84:	4b2b      	ldr	r3, [pc, #172]	; (8009f34 <HAL_RCC_OscConfig+0x4f8>)
 8009e86:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8009e88:	4a2a      	ldr	r2, [pc, #168]	; (8009f34 <HAL_RCC_OscConfig+0x4f8>)
 8009e8a:	f043 0301 	orr.w	r3, r3, #1
 8009e8e:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8009e90:	f7fa f8b6 	bl	8004000 <HAL_GetTick>
 8009e94:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8009e96:	e008      	b.n	8009eaa <HAL_RCC_OscConfig+0x46e>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8009e98:	f7fa f8b2 	bl	8004000 <HAL_GetTick>
 8009e9c:	4602      	mov	r2, r0
 8009e9e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009ea0:	1ad3      	subs	r3, r2, r3
 8009ea2:	2b02      	cmp	r3, #2
 8009ea4:	d901      	bls.n	8009eaa <HAL_RCC_OscConfig+0x46e>
        {
          return HAL_TIMEOUT;
 8009ea6:	2303      	movs	r3, #3
 8009ea8:	e21a      	b.n	800a2e0 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8009eaa:	4b22      	ldr	r3, [pc, #136]	; (8009f34 <HAL_RCC_OscConfig+0x4f8>)
 8009eac:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8009eae:	f003 0302 	and.w	r3, r3, #2
 8009eb2:	2b00      	cmp	r3, #0
 8009eb4:	d0f0      	beq.n	8009e98 <HAL_RCC_OscConfig+0x45c>
 8009eb6:	e018      	b.n	8009eea <HAL_RCC_OscConfig+0x4ae>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8009eb8:	4b1e      	ldr	r3, [pc, #120]	; (8009f34 <HAL_RCC_OscConfig+0x4f8>)
 8009eba:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8009ebc:	4a1d      	ldr	r2, [pc, #116]	; (8009f34 <HAL_RCC_OscConfig+0x4f8>)
 8009ebe:	f023 0301 	bic.w	r3, r3, #1
 8009ec2:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8009ec4:	f7fa f89c 	bl	8004000 <HAL_GetTick>
 8009ec8:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8009eca:	e008      	b.n	8009ede <HAL_RCC_OscConfig+0x4a2>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8009ecc:	f7fa f898 	bl	8004000 <HAL_GetTick>
 8009ed0:	4602      	mov	r2, r0
 8009ed2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009ed4:	1ad3      	subs	r3, r2, r3
 8009ed6:	2b02      	cmp	r3, #2
 8009ed8:	d901      	bls.n	8009ede <HAL_RCC_OscConfig+0x4a2>
        {
          return HAL_TIMEOUT;
 8009eda:	2303      	movs	r3, #3
 8009edc:	e200      	b.n	800a2e0 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8009ede:	4b15      	ldr	r3, [pc, #84]	; (8009f34 <HAL_RCC_OscConfig+0x4f8>)
 8009ee0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8009ee2:	f003 0302 	and.w	r3, r3, #2
 8009ee6:	2b00      	cmp	r3, #0
 8009ee8:	d1f0      	bne.n	8009ecc <HAL_RCC_OscConfig+0x490>
      }
    }
  }

  /*------------------------------ HSI48 Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8009eea:	687b      	ldr	r3, [r7, #4]
 8009eec:	681b      	ldr	r3, [r3, #0]
 8009eee:	f003 0320 	and.w	r3, r3, #32
 8009ef2:	2b00      	cmp	r3, #0
 8009ef4:	d039      	beq.n	8009f6a <HAL_RCC_OscConfig+0x52e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if ((RCC_OscInitStruct->HSI48State) != RCC_HSI48_OFF)
 8009ef6:	687b      	ldr	r3, [r7, #4]
 8009ef8:	699b      	ldr	r3, [r3, #24]
 8009efa:	2b00      	cmp	r3, #0
 8009efc:	d01c      	beq.n	8009f38 <HAL_RCC_OscConfig+0x4fc>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8009efe:	4b0d      	ldr	r3, [pc, #52]	; (8009f34 <HAL_RCC_OscConfig+0x4f8>)
 8009f00:	681b      	ldr	r3, [r3, #0]
 8009f02:	4a0c      	ldr	r2, [pc, #48]	; (8009f34 <HAL_RCC_OscConfig+0x4f8>)
 8009f04:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8009f08:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8009f0a:	f7fa f879 	bl	8004000 <HAL_GetTick>
 8009f0e:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8009f10:	e008      	b.n	8009f24 <HAL_RCC_OscConfig+0x4e8>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8009f12:	f7fa f875 	bl	8004000 <HAL_GetTick>
 8009f16:	4602      	mov	r2, r0
 8009f18:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009f1a:	1ad3      	subs	r3, r2, r3
 8009f1c:	2b02      	cmp	r3, #2
 8009f1e:	d901      	bls.n	8009f24 <HAL_RCC_OscConfig+0x4e8>
        {
          return HAL_TIMEOUT;
 8009f20:	2303      	movs	r3, #3
 8009f22:	e1dd      	b.n	800a2e0 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8009f24:	4b03      	ldr	r3, [pc, #12]	; (8009f34 <HAL_RCC_OscConfig+0x4f8>)
 8009f26:	681b      	ldr	r3, [r3, #0]
 8009f28:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8009f2c:	2b00      	cmp	r3, #0
 8009f2e:	d0f0      	beq.n	8009f12 <HAL_RCC_OscConfig+0x4d6>
 8009f30:	e01b      	b.n	8009f6a <HAL_RCC_OscConfig+0x52e>
 8009f32:	bf00      	nop
 8009f34:	58024400 	.word	0x58024400
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8009f38:	4b9b      	ldr	r3, [pc, #620]	; (800a1a8 <HAL_RCC_OscConfig+0x76c>)
 8009f3a:	681b      	ldr	r3, [r3, #0]
 8009f3c:	4a9a      	ldr	r2, [pc, #616]	; (800a1a8 <HAL_RCC_OscConfig+0x76c>)
 8009f3e:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8009f42:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8009f44:	f7fa f85c 	bl	8004000 <HAL_GetTick>
 8009f48:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8009f4a:	e008      	b.n	8009f5e <HAL_RCC_OscConfig+0x522>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8009f4c:	f7fa f858 	bl	8004000 <HAL_GetTick>
 8009f50:	4602      	mov	r2, r0
 8009f52:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009f54:	1ad3      	subs	r3, r2, r3
 8009f56:	2b02      	cmp	r3, #2
 8009f58:	d901      	bls.n	8009f5e <HAL_RCC_OscConfig+0x522>
        {
          return HAL_TIMEOUT;
 8009f5a:	2303      	movs	r3, #3
 8009f5c:	e1c0      	b.n	800a2e0 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8009f5e:	4b92      	ldr	r3, [pc, #584]	; (800a1a8 <HAL_RCC_OscConfig+0x76c>)
 8009f60:	681b      	ldr	r3, [r3, #0]
 8009f62:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8009f66:	2b00      	cmp	r3, #0
 8009f68:	d1f0      	bne.n	8009f4c <HAL_RCC_OscConfig+0x510>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8009f6a:	687b      	ldr	r3, [r7, #4]
 8009f6c:	681b      	ldr	r3, [r3, #0]
 8009f6e:	f003 0304 	and.w	r3, r3, #4
 8009f72:	2b00      	cmp	r3, #0
 8009f74:	f000 8081 	beq.w	800a07a <HAL_RCC_OscConfig+0x63e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 8009f78:	4b8c      	ldr	r3, [pc, #560]	; (800a1ac <HAL_RCC_OscConfig+0x770>)
 8009f7a:	681b      	ldr	r3, [r3, #0]
 8009f7c:	4a8b      	ldr	r2, [pc, #556]	; (800a1ac <HAL_RCC_OscConfig+0x770>)
 8009f7e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8009f82:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8009f84:	f7fa f83c 	bl	8004000 <HAL_GetTick>
 8009f88:	6278      	str	r0, [r7, #36]	; 0x24

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8009f8a:	e008      	b.n	8009f9e <HAL_RCC_OscConfig+0x562>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8009f8c:	f7fa f838 	bl	8004000 <HAL_GetTick>
 8009f90:	4602      	mov	r2, r0
 8009f92:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009f94:	1ad3      	subs	r3, r2, r3
 8009f96:	2b64      	cmp	r3, #100	; 0x64
 8009f98:	d901      	bls.n	8009f9e <HAL_RCC_OscConfig+0x562>
      {
        return HAL_TIMEOUT;
 8009f9a:	2303      	movs	r3, #3
 8009f9c:	e1a0      	b.n	800a2e0 <HAL_RCC_OscConfig+0x8a4>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8009f9e:	4b83      	ldr	r3, [pc, #524]	; (800a1ac <HAL_RCC_OscConfig+0x770>)
 8009fa0:	681b      	ldr	r3, [r3, #0]
 8009fa2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8009fa6:	2b00      	cmp	r3, #0
 8009fa8:	d0f0      	beq.n	8009f8c <HAL_RCC_OscConfig+0x550>
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8009faa:	687b      	ldr	r3, [r7, #4]
 8009fac:	689b      	ldr	r3, [r3, #8]
 8009fae:	2b01      	cmp	r3, #1
 8009fb0:	d106      	bne.n	8009fc0 <HAL_RCC_OscConfig+0x584>
 8009fb2:	4b7d      	ldr	r3, [pc, #500]	; (800a1a8 <HAL_RCC_OscConfig+0x76c>)
 8009fb4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009fb6:	4a7c      	ldr	r2, [pc, #496]	; (800a1a8 <HAL_RCC_OscConfig+0x76c>)
 8009fb8:	f043 0301 	orr.w	r3, r3, #1
 8009fbc:	6713      	str	r3, [r2, #112]	; 0x70
 8009fbe:	e02d      	b.n	800a01c <HAL_RCC_OscConfig+0x5e0>
 8009fc0:	687b      	ldr	r3, [r7, #4]
 8009fc2:	689b      	ldr	r3, [r3, #8]
 8009fc4:	2b00      	cmp	r3, #0
 8009fc6:	d10c      	bne.n	8009fe2 <HAL_RCC_OscConfig+0x5a6>
 8009fc8:	4b77      	ldr	r3, [pc, #476]	; (800a1a8 <HAL_RCC_OscConfig+0x76c>)
 8009fca:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009fcc:	4a76      	ldr	r2, [pc, #472]	; (800a1a8 <HAL_RCC_OscConfig+0x76c>)
 8009fce:	f023 0301 	bic.w	r3, r3, #1
 8009fd2:	6713      	str	r3, [r2, #112]	; 0x70
 8009fd4:	4b74      	ldr	r3, [pc, #464]	; (800a1a8 <HAL_RCC_OscConfig+0x76c>)
 8009fd6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009fd8:	4a73      	ldr	r2, [pc, #460]	; (800a1a8 <HAL_RCC_OscConfig+0x76c>)
 8009fda:	f023 0304 	bic.w	r3, r3, #4
 8009fde:	6713      	str	r3, [r2, #112]	; 0x70
 8009fe0:	e01c      	b.n	800a01c <HAL_RCC_OscConfig+0x5e0>
 8009fe2:	687b      	ldr	r3, [r7, #4]
 8009fe4:	689b      	ldr	r3, [r3, #8]
 8009fe6:	2b05      	cmp	r3, #5
 8009fe8:	d10c      	bne.n	800a004 <HAL_RCC_OscConfig+0x5c8>
 8009fea:	4b6f      	ldr	r3, [pc, #444]	; (800a1a8 <HAL_RCC_OscConfig+0x76c>)
 8009fec:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009fee:	4a6e      	ldr	r2, [pc, #440]	; (800a1a8 <HAL_RCC_OscConfig+0x76c>)
 8009ff0:	f043 0304 	orr.w	r3, r3, #4
 8009ff4:	6713      	str	r3, [r2, #112]	; 0x70
 8009ff6:	4b6c      	ldr	r3, [pc, #432]	; (800a1a8 <HAL_RCC_OscConfig+0x76c>)
 8009ff8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009ffa:	4a6b      	ldr	r2, [pc, #428]	; (800a1a8 <HAL_RCC_OscConfig+0x76c>)
 8009ffc:	f043 0301 	orr.w	r3, r3, #1
 800a000:	6713      	str	r3, [r2, #112]	; 0x70
 800a002:	e00b      	b.n	800a01c <HAL_RCC_OscConfig+0x5e0>
 800a004:	4b68      	ldr	r3, [pc, #416]	; (800a1a8 <HAL_RCC_OscConfig+0x76c>)
 800a006:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800a008:	4a67      	ldr	r2, [pc, #412]	; (800a1a8 <HAL_RCC_OscConfig+0x76c>)
 800a00a:	f023 0301 	bic.w	r3, r3, #1
 800a00e:	6713      	str	r3, [r2, #112]	; 0x70
 800a010:	4b65      	ldr	r3, [pc, #404]	; (800a1a8 <HAL_RCC_OscConfig+0x76c>)
 800a012:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800a014:	4a64      	ldr	r2, [pc, #400]	; (800a1a8 <HAL_RCC_OscConfig+0x76c>)
 800a016:	f023 0304 	bic.w	r3, r3, #4
 800a01a:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800a01c:	687b      	ldr	r3, [r7, #4]
 800a01e:	689b      	ldr	r3, [r3, #8]
 800a020:	2b00      	cmp	r3, #0
 800a022:	d015      	beq.n	800a050 <HAL_RCC_OscConfig+0x614>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800a024:	f7f9 ffec 	bl	8004000 <HAL_GetTick>
 800a028:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800a02a:	e00a      	b.n	800a042 <HAL_RCC_OscConfig+0x606>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800a02c:	f7f9 ffe8 	bl	8004000 <HAL_GetTick>
 800a030:	4602      	mov	r2, r0
 800a032:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a034:	1ad3      	subs	r3, r2, r3
 800a036:	f241 3288 	movw	r2, #5000	; 0x1388
 800a03a:	4293      	cmp	r3, r2
 800a03c:	d901      	bls.n	800a042 <HAL_RCC_OscConfig+0x606>
        {
          return HAL_TIMEOUT;
 800a03e:	2303      	movs	r3, #3
 800a040:	e14e      	b.n	800a2e0 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800a042:	4b59      	ldr	r3, [pc, #356]	; (800a1a8 <HAL_RCC_OscConfig+0x76c>)
 800a044:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800a046:	f003 0302 	and.w	r3, r3, #2
 800a04a:	2b00      	cmp	r3, #0
 800a04c:	d0ee      	beq.n	800a02c <HAL_RCC_OscConfig+0x5f0>
 800a04e:	e014      	b.n	800a07a <HAL_RCC_OscConfig+0x63e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800a050:	f7f9 ffd6 	bl	8004000 <HAL_GetTick>
 800a054:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 800a056:	e00a      	b.n	800a06e <HAL_RCC_OscConfig+0x632>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800a058:	f7f9 ffd2 	bl	8004000 <HAL_GetTick>
 800a05c:	4602      	mov	r2, r0
 800a05e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a060:	1ad3      	subs	r3, r2, r3
 800a062:	f241 3288 	movw	r2, #5000	; 0x1388
 800a066:	4293      	cmp	r3, r2
 800a068:	d901      	bls.n	800a06e <HAL_RCC_OscConfig+0x632>
        {
          return HAL_TIMEOUT;
 800a06a:	2303      	movs	r3, #3
 800a06c:	e138      	b.n	800a2e0 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 800a06e:	4b4e      	ldr	r3, [pc, #312]	; (800a1a8 <HAL_RCC_OscConfig+0x76c>)
 800a070:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800a072:	f003 0302 	and.w	r3, r3, #2
 800a076:	2b00      	cmp	r3, #0
 800a078:	d1ee      	bne.n	800a058 <HAL_RCC_OscConfig+0x61c>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800a07a:	687b      	ldr	r3, [r7, #4]
 800a07c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a07e:	2b00      	cmp	r3, #0
 800a080:	f000 812d 	beq.w	800a2de <HAL_RCC_OscConfig+0x8a2>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL1)
 800a084:	4b48      	ldr	r3, [pc, #288]	; (800a1a8 <HAL_RCC_OscConfig+0x76c>)
 800a086:	691b      	ldr	r3, [r3, #16]
 800a088:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800a08c:	2b18      	cmp	r3, #24
 800a08e:	f000 80bd 	beq.w	800a20c <HAL_RCC_OscConfig+0x7d0>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800a092:	687b      	ldr	r3, [r7, #4]
 800a094:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a096:	2b02      	cmp	r3, #2
 800a098:	f040 809e 	bne.w	800a1d8 <HAL_RCC_OscConfig+0x79c>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
        assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800a09c:	4b42      	ldr	r3, [pc, #264]	; (800a1a8 <HAL_RCC_OscConfig+0x76c>)
 800a09e:	681b      	ldr	r3, [r3, #0]
 800a0a0:	4a41      	ldr	r2, [pc, #260]	; (800a1a8 <HAL_RCC_OscConfig+0x76c>)
 800a0a2:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800a0a6:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800a0a8:	f7f9 ffaa 	bl	8004000 <HAL_GetTick>
 800a0ac:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 800a0ae:	e008      	b.n	800a0c2 <HAL_RCC_OscConfig+0x686>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800a0b0:	f7f9 ffa6 	bl	8004000 <HAL_GetTick>
 800a0b4:	4602      	mov	r2, r0
 800a0b6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a0b8:	1ad3      	subs	r3, r2, r3
 800a0ba:	2b02      	cmp	r3, #2
 800a0bc:	d901      	bls.n	800a0c2 <HAL_RCC_OscConfig+0x686>
          {
            return HAL_TIMEOUT;
 800a0be:	2303      	movs	r3, #3
 800a0c0:	e10e      	b.n	800a2e0 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 800a0c2:	4b39      	ldr	r3, [pc, #228]	; (800a1a8 <HAL_RCC_OscConfig+0x76c>)
 800a0c4:	681b      	ldr	r3, [r3, #0]
 800a0c6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800a0ca:	2b00      	cmp	r3, #0
 800a0cc:	d1f0      	bne.n	800a0b0 <HAL_RCC_OscConfig+0x674>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800a0ce:	4b36      	ldr	r3, [pc, #216]	; (800a1a8 <HAL_RCC_OscConfig+0x76c>)
 800a0d0:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800a0d2:	4b37      	ldr	r3, [pc, #220]	; (800a1b0 <HAL_RCC_OscConfig+0x774>)
 800a0d4:	4013      	ands	r3, r2
 800a0d6:	687a      	ldr	r2, [r7, #4]
 800a0d8:	6a91      	ldr	r1, [r2, #40]	; 0x28
 800a0da:	687a      	ldr	r2, [r7, #4]
 800a0dc:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 800a0de:	0112      	lsls	r2, r2, #4
 800a0e0:	430a      	orrs	r2, r1
 800a0e2:	4931      	ldr	r1, [pc, #196]	; (800a1a8 <HAL_RCC_OscConfig+0x76c>)
 800a0e4:	4313      	orrs	r3, r2
 800a0e6:	628b      	str	r3, [r1, #40]	; 0x28
 800a0e8:	687b      	ldr	r3, [r7, #4]
 800a0ea:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a0ec:	3b01      	subs	r3, #1
 800a0ee:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800a0f2:	687b      	ldr	r3, [r7, #4]
 800a0f4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a0f6:	3b01      	subs	r3, #1
 800a0f8:	025b      	lsls	r3, r3, #9
 800a0fa:	b29b      	uxth	r3, r3
 800a0fc:	431a      	orrs	r2, r3
 800a0fe:	687b      	ldr	r3, [r7, #4]
 800a100:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a102:	3b01      	subs	r3, #1
 800a104:	041b      	lsls	r3, r3, #16
 800a106:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 800a10a:	431a      	orrs	r2, r3
 800a10c:	687b      	ldr	r3, [r7, #4]
 800a10e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800a110:	3b01      	subs	r3, #1
 800a112:	061b      	lsls	r3, r3, #24
 800a114:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 800a118:	4923      	ldr	r1, [pc, #140]	; (800a1a8 <HAL_RCC_OscConfig+0x76c>)
 800a11a:	4313      	orrs	r3, r2
 800a11c:	630b      	str	r3, [r1, #48]	; 0x30
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Disable PLLFRACN . */
        __HAL_RCC_PLLFRACN_DISABLE();
 800a11e:	4b22      	ldr	r3, [pc, #136]	; (800a1a8 <HAL_RCC_OscConfig+0x76c>)
 800a120:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a122:	4a21      	ldr	r2, [pc, #132]	; (800a1a8 <HAL_RCC_OscConfig+0x76c>)
 800a124:	f023 0301 	bic.w	r3, r3, #1
 800a128:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Configure PLL PLL1FRACN */
        __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 800a12a:	4b1f      	ldr	r3, [pc, #124]	; (800a1a8 <HAL_RCC_OscConfig+0x76c>)
 800a12c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800a12e:	4b21      	ldr	r3, [pc, #132]	; (800a1b4 <HAL_RCC_OscConfig+0x778>)
 800a130:	4013      	ands	r3, r2
 800a132:	687a      	ldr	r2, [r7, #4]
 800a134:	6c92      	ldr	r2, [r2, #72]	; 0x48
 800a136:	00d2      	lsls	r2, r2, #3
 800a138:	491b      	ldr	r1, [pc, #108]	; (800a1a8 <HAL_RCC_OscConfig+0x76c>)
 800a13a:	4313      	orrs	r3, r2
 800a13c:	634b      	str	r3, [r1, #52]	; 0x34

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL_VCIRANGE(RCC_OscInitStruct->PLL.PLLRGE) ;
 800a13e:	4b1a      	ldr	r3, [pc, #104]	; (800a1a8 <HAL_RCC_OscConfig+0x76c>)
 800a140:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a142:	f023 020c 	bic.w	r2, r3, #12
 800a146:	687b      	ldr	r3, [r7, #4]
 800a148:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a14a:	4917      	ldr	r1, [pc, #92]	; (800a1a8 <HAL_RCC_OscConfig+0x76c>)
 800a14c:	4313      	orrs	r3, r2
 800a14e:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Select PLL1 output frequency range : VCO */
        __HAL_RCC_PLL_VCORANGE(RCC_OscInitStruct->PLL.PLLVCOSEL) ;
 800a150:	4b15      	ldr	r3, [pc, #84]	; (800a1a8 <HAL_RCC_OscConfig+0x76c>)
 800a152:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a154:	f023 0202 	bic.w	r2, r3, #2
 800a158:	687b      	ldr	r3, [r7, #4]
 800a15a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800a15c:	4912      	ldr	r1, [pc, #72]	; (800a1a8 <HAL_RCC_OscConfig+0x76c>)
 800a15e:	4313      	orrs	r3, r2
 800a160:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Enable PLL System Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 800a162:	4b11      	ldr	r3, [pc, #68]	; (800a1a8 <HAL_RCC_OscConfig+0x76c>)
 800a164:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a166:	4a10      	ldr	r2, [pc, #64]	; (800a1a8 <HAL_RCC_OscConfig+0x76c>)
 800a168:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800a16c:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1Q Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800a16e:	4b0e      	ldr	r3, [pc, #56]	; (800a1a8 <HAL_RCC_OscConfig+0x76c>)
 800a170:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a172:	4a0d      	ldr	r2, [pc, #52]	; (800a1a8 <HAL_RCC_OscConfig+0x76c>)
 800a174:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800a178:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1R  Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 800a17a:	4b0b      	ldr	r3, [pc, #44]	; (800a1a8 <HAL_RCC_OscConfig+0x76c>)
 800a17c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a17e:	4a0a      	ldr	r2, [pc, #40]	; (800a1a8 <HAL_RCC_OscConfig+0x76c>)
 800a180:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800a184:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1FRACN . */
        __HAL_RCC_PLLFRACN_ENABLE();
 800a186:	4b08      	ldr	r3, [pc, #32]	; (800a1a8 <HAL_RCC_OscConfig+0x76c>)
 800a188:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a18a:	4a07      	ldr	r2, [pc, #28]	; (800a1a8 <HAL_RCC_OscConfig+0x76c>)
 800a18c:	f043 0301 	orr.w	r3, r3, #1
 800a190:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800a192:	4b05      	ldr	r3, [pc, #20]	; (800a1a8 <HAL_RCC_OscConfig+0x76c>)
 800a194:	681b      	ldr	r3, [r3, #0]
 800a196:	4a04      	ldr	r2, [pc, #16]	; (800a1a8 <HAL_RCC_OscConfig+0x76c>)
 800a198:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800a19c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800a19e:	f7f9 ff2f 	bl	8004000 <HAL_GetTick>
 800a1a2:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 800a1a4:	e011      	b.n	800a1ca <HAL_RCC_OscConfig+0x78e>
 800a1a6:	bf00      	nop
 800a1a8:	58024400 	.word	0x58024400
 800a1ac:	58024800 	.word	0x58024800
 800a1b0:	fffffc0c 	.word	0xfffffc0c
 800a1b4:	ffff0007 	.word	0xffff0007
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800a1b8:	f7f9 ff22 	bl	8004000 <HAL_GetTick>
 800a1bc:	4602      	mov	r2, r0
 800a1be:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a1c0:	1ad3      	subs	r3, r2, r3
 800a1c2:	2b02      	cmp	r3, #2
 800a1c4:	d901      	bls.n	800a1ca <HAL_RCC_OscConfig+0x78e>
          {
            return HAL_TIMEOUT;
 800a1c6:	2303      	movs	r3, #3
 800a1c8:	e08a      	b.n	800a2e0 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 800a1ca:	4b47      	ldr	r3, [pc, #284]	; (800a2e8 <HAL_RCC_OscConfig+0x8ac>)
 800a1cc:	681b      	ldr	r3, [r3, #0]
 800a1ce:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800a1d2:	2b00      	cmp	r3, #0
 800a1d4:	d0f0      	beq.n	800a1b8 <HAL_RCC_OscConfig+0x77c>
 800a1d6:	e082      	b.n	800a2de <HAL_RCC_OscConfig+0x8a2>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800a1d8:	4b43      	ldr	r3, [pc, #268]	; (800a2e8 <HAL_RCC_OscConfig+0x8ac>)
 800a1da:	681b      	ldr	r3, [r3, #0]
 800a1dc:	4a42      	ldr	r2, [pc, #264]	; (800a2e8 <HAL_RCC_OscConfig+0x8ac>)
 800a1de:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800a1e2:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800a1e4:	f7f9 ff0c 	bl	8004000 <HAL_GetTick>
 800a1e8:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 800a1ea:	e008      	b.n	800a1fe <HAL_RCC_OscConfig+0x7c2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800a1ec:	f7f9 ff08 	bl	8004000 <HAL_GetTick>
 800a1f0:	4602      	mov	r2, r0
 800a1f2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a1f4:	1ad3      	subs	r3, r2, r3
 800a1f6:	2b02      	cmp	r3, #2
 800a1f8:	d901      	bls.n	800a1fe <HAL_RCC_OscConfig+0x7c2>
          {
            return HAL_TIMEOUT;
 800a1fa:	2303      	movs	r3, #3
 800a1fc:	e070      	b.n	800a2e0 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 800a1fe:	4b3a      	ldr	r3, [pc, #232]	; (800a2e8 <HAL_RCC_OscConfig+0x8ac>)
 800a200:	681b      	ldr	r3, [r3, #0]
 800a202:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800a206:	2b00      	cmp	r3, #0
 800a208:	d1f0      	bne.n	800a1ec <HAL_RCC_OscConfig+0x7b0>
 800a20a:	e068      	b.n	800a2de <HAL_RCC_OscConfig+0x8a2>
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLLCKSELR;
 800a20c:	4b36      	ldr	r3, [pc, #216]	; (800a2e8 <HAL_RCC_OscConfig+0x8ac>)
 800a20e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a210:	613b      	str	r3, [r7, #16]
      temp2_pllckcfg = RCC->PLL1DIVR;
 800a212:	4b35      	ldr	r3, [pc, #212]	; (800a2e8 <HAL_RCC_OscConfig+0x8ac>)
 800a214:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a216:	60fb      	str	r3, [r7, #12]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800a218:	687b      	ldr	r3, [r7, #4]
 800a21a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a21c:	2b01      	cmp	r3, #1
 800a21e:	d031      	beq.n	800a284 <HAL_RCC_OscConfig+0x848>
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800a220:	693b      	ldr	r3, [r7, #16]
 800a222:	f003 0203 	and.w	r2, r3, #3
 800a226:	687b      	ldr	r3, [r7, #4]
 800a228:	6a9b      	ldr	r3, [r3, #40]	; 0x28
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800a22a:	429a      	cmp	r2, r3
 800a22c:	d12a      	bne.n	800a284 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 800a22e:	693b      	ldr	r3, [r7, #16]
 800a230:	091b      	lsrs	r3, r3, #4
 800a232:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 800a236:	687b      	ldr	r3, [r7, #4]
 800a238:	6adb      	ldr	r3, [r3, #44]	; 0x2c
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800a23a:	429a      	cmp	r2, r3
 800a23c:	d122      	bne.n	800a284 <HAL_RCC_OscConfig+0x848>
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 800a23e:	68fb      	ldr	r3, [r7, #12]
 800a240:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800a244:	687b      	ldr	r3, [r7, #4]
 800a246:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a248:	3b01      	subs	r3, #1
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 800a24a:	429a      	cmp	r2, r3
 800a24c:	d11a      	bne.n	800a284 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 800a24e:	68fb      	ldr	r3, [r7, #12]
 800a250:	0a5b      	lsrs	r3, r3, #9
 800a252:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800a256:	687b      	ldr	r3, [r7, #4]
 800a258:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a25a:	3b01      	subs	r3, #1
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 800a25c:	429a      	cmp	r2, r3
 800a25e:	d111      	bne.n	800a284 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 800a260:	68fb      	ldr	r3, [r7, #12]
 800a262:	0c1b      	lsrs	r3, r3, #16
 800a264:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800a268:	687b      	ldr	r3, [r7, #4]
 800a26a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a26c:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 800a26e:	429a      	cmp	r2, r3
 800a270:	d108      	bne.n	800a284 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_R1) >> RCC_PLL1DIVR_R1_Pos) != (RCC_OscInitStruct->PLL.PLLR - 1U)))
 800a272:	68fb      	ldr	r3, [r7, #12]
 800a274:	0e1b      	lsrs	r3, r3, #24
 800a276:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800a27a:	687b      	ldr	r3, [r7, #4]
 800a27c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800a27e:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 800a280:	429a      	cmp	r2, r3
 800a282:	d001      	beq.n	800a288 <HAL_RCC_OscConfig+0x84c>
      {
        return HAL_ERROR;
 800a284:	2301      	movs	r3, #1
 800a286:	e02b      	b.n	800a2e0 <HAL_RCC_OscConfig+0x8a4>
      }
      else
      {
        /* Check if only fractional part needs to be updated  */
        temp1_pllckcfg = ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> RCC_PLL1FRACR_FRACN1_Pos);
 800a288:	4b17      	ldr	r3, [pc, #92]	; (800a2e8 <HAL_RCC_OscConfig+0x8ac>)
 800a28a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a28c:	08db      	lsrs	r3, r3, #3
 800a28e:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800a292:	613b      	str	r3, [r7, #16]
        if (RCC_OscInitStruct->PLL.PLLFRACN != temp1_pllckcfg)
 800a294:	687b      	ldr	r3, [r7, #4]
 800a296:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800a298:	693a      	ldr	r2, [r7, #16]
 800a29a:	429a      	cmp	r2, r3
 800a29c:	d01f      	beq.n	800a2de <HAL_RCC_OscConfig+0x8a2>
        {
          assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));
          /* Disable PLL1FRACEN */
          __HAL_RCC_PLLFRACN_DISABLE();
 800a29e:	4b12      	ldr	r3, [pc, #72]	; (800a2e8 <HAL_RCC_OscConfig+0x8ac>)
 800a2a0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a2a2:	4a11      	ldr	r2, [pc, #68]	; (800a2e8 <HAL_RCC_OscConfig+0x8ac>)
 800a2a4:	f023 0301 	bic.w	r3, r3, #1
 800a2a8:	62d3      	str	r3, [r2, #44]	; 0x2c
          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 800a2aa:	f7f9 fea9 	bl	8004000 <HAL_GetTick>
 800a2ae:	6278      	str	r0, [r7, #36]	; 0x24
          /* Wait at least 2 CK_REF (PLL input source divided by M) period to make sure next latched value will be taken into account. */
          while ((HAL_GetTick() - tickstart) < PLL_FRAC_TIMEOUT_VALUE)
 800a2b0:	bf00      	nop
 800a2b2:	f7f9 fea5 	bl	8004000 <HAL_GetTick>
 800a2b6:	4602      	mov	r2, r0
 800a2b8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a2ba:	4293      	cmp	r3, r2
 800a2bc:	d0f9      	beq.n	800a2b2 <HAL_RCC_OscConfig+0x876>
          {
          }
          /* Configure PLL1 PLL1FRACN */
          __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 800a2be:	4b0a      	ldr	r3, [pc, #40]	; (800a2e8 <HAL_RCC_OscConfig+0x8ac>)
 800a2c0:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800a2c2:	4b0a      	ldr	r3, [pc, #40]	; (800a2ec <HAL_RCC_OscConfig+0x8b0>)
 800a2c4:	4013      	ands	r3, r2
 800a2c6:	687a      	ldr	r2, [r7, #4]
 800a2c8:	6c92      	ldr	r2, [r2, #72]	; 0x48
 800a2ca:	00d2      	lsls	r2, r2, #3
 800a2cc:	4906      	ldr	r1, [pc, #24]	; (800a2e8 <HAL_RCC_OscConfig+0x8ac>)
 800a2ce:	4313      	orrs	r3, r2
 800a2d0:	634b      	str	r3, [r1, #52]	; 0x34
          /* Enable PLL1FRACEN to latch new value. */
          __HAL_RCC_PLLFRACN_ENABLE();
 800a2d2:	4b05      	ldr	r3, [pc, #20]	; (800a2e8 <HAL_RCC_OscConfig+0x8ac>)
 800a2d4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a2d6:	4a04      	ldr	r2, [pc, #16]	; (800a2e8 <HAL_RCC_OscConfig+0x8ac>)
 800a2d8:	f043 0301 	orr.w	r3, r3, #1
 800a2dc:	62d3      	str	r3, [r2, #44]	; 0x2c
        }
      }
    }
  }
  return HAL_OK;
 800a2de:	2300      	movs	r3, #0
}
 800a2e0:	4618      	mov	r0, r3
 800a2e2:	3730      	adds	r7, #48	; 0x30
 800a2e4:	46bd      	mov	sp, r7
 800a2e6:	bd80      	pop	{r7, pc}
 800a2e8:	58024400 	.word	0x58024400
 800a2ec:	ffff0007 	.word	0xffff0007

0800a2f0 <HAL_RCC_ClockConfig>:
  *         D1CPRE[3:0] bits to ensure that  Domain1 core clock not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800a2f0:	b580      	push	{r7, lr}
 800a2f2:	b086      	sub	sp, #24
 800a2f4:	af00      	add	r7, sp, #0
 800a2f6:	6078      	str	r0, [r7, #4]
 800a2f8:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef halstatus;
  uint32_t tickstart;
  uint32_t common_system_clock;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800a2fa:	687b      	ldr	r3, [r7, #4]
 800a2fc:	2b00      	cmp	r3, #0
 800a2fe:	d101      	bne.n	800a304 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800a300:	2301      	movs	r3, #1
 800a302:	e19c      	b.n	800a63e <HAL_RCC_ClockConfig+0x34e>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 800a304:	4b8a      	ldr	r3, [pc, #552]	; (800a530 <HAL_RCC_ClockConfig+0x240>)
 800a306:	681b      	ldr	r3, [r3, #0]
 800a308:	f003 030f 	and.w	r3, r3, #15
 800a30c:	683a      	ldr	r2, [r7, #0]
 800a30e:	429a      	cmp	r2, r3
 800a310:	d910      	bls.n	800a334 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800a312:	4b87      	ldr	r3, [pc, #540]	; (800a530 <HAL_RCC_ClockConfig+0x240>)
 800a314:	681b      	ldr	r3, [r3, #0]
 800a316:	f023 020f 	bic.w	r2, r3, #15
 800a31a:	4985      	ldr	r1, [pc, #532]	; (800a530 <HAL_RCC_ClockConfig+0x240>)
 800a31c:	683b      	ldr	r3, [r7, #0]
 800a31e:	4313      	orrs	r3, r2
 800a320:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800a322:	4b83      	ldr	r3, [pc, #524]	; (800a530 <HAL_RCC_ClockConfig+0x240>)
 800a324:	681b      	ldr	r3, [r3, #0]
 800a326:	f003 030f 	and.w	r3, r3, #15
 800a32a:	683a      	ldr	r2, [r7, #0]
 800a32c:	429a      	cmp	r2, r3
 800a32e:	d001      	beq.n	800a334 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 800a330:	2301      	movs	r3, #1
 800a332:	e184      	b.n	800a63e <HAL_RCC_ClockConfig+0x34e>

  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- D1PCLK1/CDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 800a334:	687b      	ldr	r3, [r7, #4]
 800a336:	681b      	ldr	r3, [r3, #0]
 800a338:	f003 0304 	and.w	r3, r3, #4
 800a33c:	2b00      	cmp	r3, #0
 800a33e:	d010      	beq.n	800a362 <HAL_RCC_ClockConfig+0x72>
  {
#if defined (RCC_D1CFGR_D1PPRE)
    if ((RCC_ClkInitStruct->APB3CLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 800a340:	687b      	ldr	r3, [r7, #4]
 800a342:	691a      	ldr	r2, [r3, #16]
 800a344:	4b7b      	ldr	r3, [pc, #492]	; (800a534 <HAL_RCC_ClockConfig+0x244>)
 800a346:	699b      	ldr	r3, [r3, #24]
 800a348:	f003 0370 	and.w	r3, r3, #112	; 0x70
 800a34c:	429a      	cmp	r2, r3
 800a34e:	d908      	bls.n	800a362 <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 800a350:	4b78      	ldr	r3, [pc, #480]	; (800a534 <HAL_RCC_ClockConfig+0x244>)
 800a352:	699b      	ldr	r3, [r3, #24]
 800a354:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 800a358:	687b      	ldr	r3, [r7, #4]
 800a35a:	691b      	ldr	r3, [r3, #16]
 800a35c:	4975      	ldr	r1, [pc, #468]	; (800a534 <HAL_RCC_ClockConfig+0x244>)
 800a35e:	4313      	orrs	r3, r2
 800a360:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800a362:	687b      	ldr	r3, [r7, #4]
 800a364:	681b      	ldr	r3, [r3, #0]
 800a366:	f003 0308 	and.w	r3, r3, #8
 800a36a:	2b00      	cmp	r3, #0
 800a36c:	d010      	beq.n	800a390 <HAL_RCC_ClockConfig+0xa0>
  {
#if defined (RCC_D2CFGR_D2PPRE1)
    if ((RCC_ClkInitStruct->APB1CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 800a36e:	687b      	ldr	r3, [r7, #4]
 800a370:	695a      	ldr	r2, [r3, #20]
 800a372:	4b70      	ldr	r3, [pc, #448]	; (800a534 <HAL_RCC_ClockConfig+0x244>)
 800a374:	69db      	ldr	r3, [r3, #28]
 800a376:	f003 0370 	and.w	r3, r3, #112	; 0x70
 800a37a:	429a      	cmp	r2, r3
 800a37c:	d908      	bls.n	800a390 <HAL_RCC_ClockConfig+0xa0>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 800a37e:	4b6d      	ldr	r3, [pc, #436]	; (800a534 <HAL_RCC_ClockConfig+0x244>)
 800a380:	69db      	ldr	r3, [r3, #28]
 800a382:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 800a386:	687b      	ldr	r3, [r7, #4]
 800a388:	695b      	ldr	r3, [r3, #20]
 800a38a:	496a      	ldr	r1, [pc, #424]	; (800a534 <HAL_RCC_ClockConfig+0x244>)
 800a38c:	4313      	orrs	r3, r2
 800a38e:	61cb      	str	r3, [r1, #28]
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
    }
#endif
  }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800a390:	687b      	ldr	r3, [r7, #4]
 800a392:	681b      	ldr	r3, [r3, #0]
 800a394:	f003 0310 	and.w	r3, r3, #16
 800a398:	2b00      	cmp	r3, #0
 800a39a:	d010      	beq.n	800a3be <HAL_RCC_ClockConfig+0xce>
  {
#if defined(RCC_D2CFGR_D2PPRE2)
    if ((RCC_ClkInitStruct->APB2CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 800a39c:	687b      	ldr	r3, [r7, #4]
 800a39e:	699a      	ldr	r2, [r3, #24]
 800a3a0:	4b64      	ldr	r3, [pc, #400]	; (800a534 <HAL_RCC_ClockConfig+0x244>)
 800a3a2:	69db      	ldr	r3, [r3, #28]
 800a3a4:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800a3a8:	429a      	cmp	r2, r3
 800a3aa:	d908      	bls.n	800a3be <HAL_RCC_ClockConfig+0xce>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 800a3ac:	4b61      	ldr	r3, [pc, #388]	; (800a534 <HAL_RCC_ClockConfig+0x244>)
 800a3ae:	69db      	ldr	r3, [r3, #28]
 800a3b0:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 800a3b4:	687b      	ldr	r3, [r7, #4]
 800a3b6:	699b      	ldr	r3, [r3, #24]
 800a3b8:	495e      	ldr	r1, [pc, #376]	; (800a534 <HAL_RCC_ClockConfig+0x244>)
 800a3ba:	4313      	orrs	r3, r2
 800a3bc:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 800a3be:	687b      	ldr	r3, [r7, #4]
 800a3c0:	681b      	ldr	r3, [r3, #0]
 800a3c2:	f003 0320 	and.w	r3, r3, #32
 800a3c6:	2b00      	cmp	r3, #0
 800a3c8:	d010      	beq.n	800a3ec <HAL_RCC_ClockConfig+0xfc>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if ((RCC_ClkInitStruct->APB4CLKDivider) > (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 800a3ca:	687b      	ldr	r3, [r7, #4]
 800a3cc:	69da      	ldr	r2, [r3, #28]
 800a3ce:	4b59      	ldr	r3, [pc, #356]	; (800a534 <HAL_RCC_ClockConfig+0x244>)
 800a3d0:	6a1b      	ldr	r3, [r3, #32]
 800a3d2:	f003 0370 	and.w	r3, r3, #112	; 0x70
 800a3d6:	429a      	cmp	r2, r3
 800a3d8:	d908      	bls.n	800a3ec <HAL_RCC_ClockConfig+0xfc>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 800a3da:	4b56      	ldr	r3, [pc, #344]	; (800a534 <HAL_RCC_ClockConfig+0x244>)
 800a3dc:	6a1b      	ldr	r3, [r3, #32]
 800a3de:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 800a3e2:	687b      	ldr	r3, [r7, #4]
 800a3e4:	69db      	ldr	r3, [r3, #28]
 800a3e6:	4953      	ldr	r1, [pc, #332]	; (800a534 <HAL_RCC_ClockConfig+0x244>)
 800a3e8:	4313      	orrs	r3, r2
 800a3ea:	620b      	str	r3, [r1, #32]
    }
#endif
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800a3ec:	687b      	ldr	r3, [r7, #4]
 800a3ee:	681b      	ldr	r3, [r3, #0]
 800a3f0:	f003 0302 	and.w	r3, r3, #2
 800a3f4:	2b00      	cmp	r3, #0
 800a3f6:	d010      	beq.n	800a41a <HAL_RCC_ClockConfig+0x12a>
  {
#if defined (RCC_D1CFGR_HPRE)
    if ((RCC_ClkInitStruct->AHBCLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 800a3f8:	687b      	ldr	r3, [r7, #4]
 800a3fa:	68da      	ldr	r2, [r3, #12]
 800a3fc:	4b4d      	ldr	r3, [pc, #308]	; (800a534 <HAL_RCC_ClockConfig+0x244>)
 800a3fe:	699b      	ldr	r3, [r3, #24]
 800a400:	f003 030f 	and.w	r3, r3, #15
 800a404:	429a      	cmp	r2, r3
 800a406:	d908      	bls.n	800a41a <HAL_RCC_ClockConfig+0x12a>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800a408:	4b4a      	ldr	r3, [pc, #296]	; (800a534 <HAL_RCC_ClockConfig+0x244>)
 800a40a:	699b      	ldr	r3, [r3, #24]
 800a40c:	f023 020f 	bic.w	r2, r3, #15
 800a410:	687b      	ldr	r3, [r7, #4]
 800a412:	68db      	ldr	r3, [r3, #12]
 800a414:	4947      	ldr	r1, [pc, #284]	; (800a534 <HAL_RCC_ClockConfig+0x244>)
 800a416:	4313      	orrs	r3, r2
 800a418:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*------------------------- SYSCLK Configuration -------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800a41a:	687b      	ldr	r3, [r7, #4]
 800a41c:	681b      	ldr	r3, [r3, #0]
 800a41e:	f003 0301 	and.w	r3, r3, #1
 800a422:	2b00      	cmp	r3, #0
 800a424:	d055      	beq.n	800a4d2 <HAL_RCC_ClockConfig+0x1e2>
  {
    assert_param(IS_RCC_SYSCLK(RCC_ClkInitStruct->SYSCLKDivider));
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
#if defined(RCC_D1CFGR_D1CPRE)
    MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1CPRE, RCC_ClkInitStruct->SYSCLKDivider);
 800a426:	4b43      	ldr	r3, [pc, #268]	; (800a534 <HAL_RCC_ClockConfig+0x244>)
 800a428:	699b      	ldr	r3, [r3, #24]
 800a42a:	f423 6270 	bic.w	r2, r3, #3840	; 0xf00
 800a42e:	687b      	ldr	r3, [r7, #4]
 800a430:	689b      	ldr	r3, [r3, #8]
 800a432:	4940      	ldr	r1, [pc, #256]	; (800a534 <HAL_RCC_ClockConfig+0x244>)
 800a434:	4313      	orrs	r3, r2
 800a436:	618b      	str	r3, [r1, #24]
#else
    MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDCPRE, RCC_ClkInitStruct->SYSCLKDivider);
#endif
    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800a438:	687b      	ldr	r3, [r7, #4]
 800a43a:	685b      	ldr	r3, [r3, #4]
 800a43c:	2b02      	cmp	r3, #2
 800a43e:	d107      	bne.n	800a450 <HAL_RCC_ClockConfig+0x160>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 800a440:	4b3c      	ldr	r3, [pc, #240]	; (800a534 <HAL_RCC_ClockConfig+0x244>)
 800a442:	681b      	ldr	r3, [r3, #0]
 800a444:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800a448:	2b00      	cmp	r3, #0
 800a44a:	d121      	bne.n	800a490 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 800a44c:	2301      	movs	r3, #1
 800a44e:	e0f6      	b.n	800a63e <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800a450:	687b      	ldr	r3, [r7, #4]
 800a452:	685b      	ldr	r3, [r3, #4]
 800a454:	2b03      	cmp	r3, #3
 800a456:	d107      	bne.n	800a468 <HAL_RCC_ClockConfig+0x178>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 800a458:	4b36      	ldr	r3, [pc, #216]	; (800a534 <HAL_RCC_ClockConfig+0x244>)
 800a45a:	681b      	ldr	r3, [r3, #0]
 800a45c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800a460:	2b00      	cmp	r3, #0
 800a462:	d115      	bne.n	800a490 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 800a464:	2301      	movs	r3, #1
 800a466:	e0ea      	b.n	800a63e <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* CSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 800a468:	687b      	ldr	r3, [r7, #4]
 800a46a:	685b      	ldr	r3, [r3, #4]
 800a46c:	2b01      	cmp	r3, #1
 800a46e:	d107      	bne.n	800a480 <HAL_RCC_ClockConfig+0x190>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 800a470:	4b30      	ldr	r3, [pc, #192]	; (800a534 <HAL_RCC_ClockConfig+0x244>)
 800a472:	681b      	ldr	r3, [r3, #0]
 800a474:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800a478:	2b00      	cmp	r3, #0
 800a47a:	d109      	bne.n	800a490 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 800a47c:	2301      	movs	r3, #1
 800a47e:	e0de      	b.n	800a63e <HAL_RCC_ClockConfig+0x34e>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800a480:	4b2c      	ldr	r3, [pc, #176]	; (800a534 <HAL_RCC_ClockConfig+0x244>)
 800a482:	681b      	ldr	r3, [r3, #0]
 800a484:	f003 0304 	and.w	r3, r3, #4
 800a488:	2b00      	cmp	r3, #0
 800a48a:	d101      	bne.n	800a490 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 800a48c:	2301      	movs	r3, #1
 800a48e:	e0d6      	b.n	800a63e <HAL_RCC_ClockConfig+0x34e>
      }
    }
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 800a490:	4b28      	ldr	r3, [pc, #160]	; (800a534 <HAL_RCC_ClockConfig+0x244>)
 800a492:	691b      	ldr	r3, [r3, #16]
 800a494:	f023 0207 	bic.w	r2, r3, #7
 800a498:	687b      	ldr	r3, [r7, #4]
 800a49a:	685b      	ldr	r3, [r3, #4]
 800a49c:	4925      	ldr	r1, [pc, #148]	; (800a534 <HAL_RCC_ClockConfig+0x244>)
 800a49e:	4313      	orrs	r3, r2
 800a4a0:	610b      	str	r3, [r1, #16]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800a4a2:	f7f9 fdad 	bl	8004000 <HAL_GetTick>
 800a4a6:	6178      	str	r0, [r7, #20]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800a4a8:	e00a      	b.n	800a4c0 <HAL_RCC_ClockConfig+0x1d0>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800a4aa:	f7f9 fda9 	bl	8004000 <HAL_GetTick>
 800a4ae:	4602      	mov	r2, r0
 800a4b0:	697b      	ldr	r3, [r7, #20]
 800a4b2:	1ad3      	subs	r3, r2, r3
 800a4b4:	f241 3288 	movw	r2, #5000	; 0x1388
 800a4b8:	4293      	cmp	r3, r2
 800a4ba:	d901      	bls.n	800a4c0 <HAL_RCC_ClockConfig+0x1d0>
      {
        return HAL_TIMEOUT;
 800a4bc:	2303      	movs	r3, #3
 800a4be:	e0be      	b.n	800a63e <HAL_RCC_ClockConfig+0x34e>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800a4c0:	4b1c      	ldr	r3, [pc, #112]	; (800a534 <HAL_RCC_ClockConfig+0x244>)
 800a4c2:	691b      	ldr	r3, [r3, #16]
 800a4c4:	f003 0238 	and.w	r2, r3, #56	; 0x38
 800a4c8:	687b      	ldr	r3, [r7, #4]
 800a4ca:	685b      	ldr	r3, [r3, #4]
 800a4cc:	00db      	lsls	r3, r3, #3
 800a4ce:	429a      	cmp	r2, r3
 800a4d0:	d1eb      	bne.n	800a4aa <HAL_RCC_ClockConfig+0x1ba>

  }

  /* Decreasing the BUS frequency divider */
  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800a4d2:	687b      	ldr	r3, [r7, #4]
 800a4d4:	681b      	ldr	r3, [r3, #0]
 800a4d6:	f003 0302 	and.w	r3, r3, #2
 800a4da:	2b00      	cmp	r3, #0
 800a4dc:	d010      	beq.n	800a500 <HAL_RCC_ClockConfig+0x210>
  {
#if defined(RCC_D1CFGR_HPRE)
    if ((RCC_ClkInitStruct->AHBCLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 800a4de:	687b      	ldr	r3, [r7, #4]
 800a4e0:	68da      	ldr	r2, [r3, #12]
 800a4e2:	4b14      	ldr	r3, [pc, #80]	; (800a534 <HAL_RCC_ClockConfig+0x244>)
 800a4e4:	699b      	ldr	r3, [r3, #24]
 800a4e6:	f003 030f 	and.w	r3, r3, #15
 800a4ea:	429a      	cmp	r2, r3
 800a4ec:	d208      	bcs.n	800a500 <HAL_RCC_ClockConfig+0x210>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800a4ee:	4b11      	ldr	r3, [pc, #68]	; (800a534 <HAL_RCC_ClockConfig+0x244>)
 800a4f0:	699b      	ldr	r3, [r3, #24]
 800a4f2:	f023 020f 	bic.w	r2, r3, #15
 800a4f6:	687b      	ldr	r3, [r7, #4]
 800a4f8:	68db      	ldr	r3, [r3, #12]
 800a4fa:	490e      	ldr	r1, [pc, #56]	; (800a534 <HAL_RCC_ClockConfig+0x244>)
 800a4fc:	4313      	orrs	r3, r2
 800a4fe:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 800a500:	4b0b      	ldr	r3, [pc, #44]	; (800a530 <HAL_RCC_ClockConfig+0x240>)
 800a502:	681b      	ldr	r3, [r3, #0]
 800a504:	f003 030f 	and.w	r3, r3, #15
 800a508:	683a      	ldr	r2, [r7, #0]
 800a50a:	429a      	cmp	r2, r3
 800a50c:	d214      	bcs.n	800a538 <HAL_RCC_ClockConfig+0x248>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800a50e:	4b08      	ldr	r3, [pc, #32]	; (800a530 <HAL_RCC_ClockConfig+0x240>)
 800a510:	681b      	ldr	r3, [r3, #0]
 800a512:	f023 020f 	bic.w	r2, r3, #15
 800a516:	4906      	ldr	r1, [pc, #24]	; (800a530 <HAL_RCC_ClockConfig+0x240>)
 800a518:	683b      	ldr	r3, [r7, #0]
 800a51a:	4313      	orrs	r3, r2
 800a51c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800a51e:	4b04      	ldr	r3, [pc, #16]	; (800a530 <HAL_RCC_ClockConfig+0x240>)
 800a520:	681b      	ldr	r3, [r3, #0]
 800a522:	f003 030f 	and.w	r3, r3, #15
 800a526:	683a      	ldr	r2, [r7, #0]
 800a528:	429a      	cmp	r2, r3
 800a52a:	d005      	beq.n	800a538 <HAL_RCC_ClockConfig+0x248>
    {
      return HAL_ERROR;
 800a52c:	2301      	movs	r3, #1
 800a52e:	e086      	b.n	800a63e <HAL_RCC_ClockConfig+0x34e>
 800a530:	52002000 	.word	0x52002000
 800a534:	58024400 	.word	0x58024400
    }
  }

  /*-------------------------- D1PCLK1/CDPCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 800a538:	687b      	ldr	r3, [r7, #4]
 800a53a:	681b      	ldr	r3, [r3, #0]
 800a53c:	f003 0304 	and.w	r3, r3, #4
 800a540:	2b00      	cmp	r3, #0
 800a542:	d010      	beq.n	800a566 <HAL_RCC_ClockConfig+0x276>
  {
#if defined(RCC_D1CFGR_D1PPRE)
    if ((RCC_ClkInitStruct->APB3CLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 800a544:	687b      	ldr	r3, [r7, #4]
 800a546:	691a      	ldr	r2, [r3, #16]
 800a548:	4b3f      	ldr	r3, [pc, #252]	; (800a648 <HAL_RCC_ClockConfig+0x358>)
 800a54a:	699b      	ldr	r3, [r3, #24]
 800a54c:	f003 0370 	and.w	r3, r3, #112	; 0x70
 800a550:	429a      	cmp	r2, r3
 800a552:	d208      	bcs.n	800a566 <HAL_RCC_ClockConfig+0x276>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 800a554:	4b3c      	ldr	r3, [pc, #240]	; (800a648 <HAL_RCC_ClockConfig+0x358>)
 800a556:	699b      	ldr	r3, [r3, #24]
 800a558:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 800a55c:	687b      	ldr	r3, [r7, #4]
 800a55e:	691b      	ldr	r3, [r3, #16]
 800a560:	4939      	ldr	r1, [pc, #228]	; (800a648 <HAL_RCC_ClockConfig+0x358>)
 800a562:	4313      	orrs	r3, r2
 800a564:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800a566:	687b      	ldr	r3, [r7, #4]
 800a568:	681b      	ldr	r3, [r3, #0]
 800a56a:	f003 0308 	and.w	r3, r3, #8
 800a56e:	2b00      	cmp	r3, #0
 800a570:	d010      	beq.n	800a594 <HAL_RCC_ClockConfig+0x2a4>
  {
#if defined(RCC_D2CFGR_D2PPRE1)
    if ((RCC_ClkInitStruct->APB1CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 800a572:	687b      	ldr	r3, [r7, #4]
 800a574:	695a      	ldr	r2, [r3, #20]
 800a576:	4b34      	ldr	r3, [pc, #208]	; (800a648 <HAL_RCC_ClockConfig+0x358>)
 800a578:	69db      	ldr	r3, [r3, #28]
 800a57a:	f003 0370 	and.w	r3, r3, #112	; 0x70
 800a57e:	429a      	cmp	r2, r3
 800a580:	d208      	bcs.n	800a594 <HAL_RCC_ClockConfig+0x2a4>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 800a582:	4b31      	ldr	r3, [pc, #196]	; (800a648 <HAL_RCC_ClockConfig+0x358>)
 800a584:	69db      	ldr	r3, [r3, #28]
 800a586:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 800a58a:	687b      	ldr	r3, [r7, #4]
 800a58c:	695b      	ldr	r3, [r3, #20]
 800a58e:	492e      	ldr	r1, [pc, #184]	; (800a648 <HAL_RCC_ClockConfig+0x358>)
 800a590:	4313      	orrs	r3, r2
 800a592:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800a594:	687b      	ldr	r3, [r7, #4]
 800a596:	681b      	ldr	r3, [r3, #0]
 800a598:	f003 0310 	and.w	r3, r3, #16
 800a59c:	2b00      	cmp	r3, #0
 800a59e:	d010      	beq.n	800a5c2 <HAL_RCC_ClockConfig+0x2d2>
  {
#if defined (RCC_D2CFGR_D2PPRE2)
    if ((RCC_ClkInitStruct->APB2CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 800a5a0:	687b      	ldr	r3, [r7, #4]
 800a5a2:	699a      	ldr	r2, [r3, #24]
 800a5a4:	4b28      	ldr	r3, [pc, #160]	; (800a648 <HAL_RCC_ClockConfig+0x358>)
 800a5a6:	69db      	ldr	r3, [r3, #28]
 800a5a8:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800a5ac:	429a      	cmp	r2, r3
 800a5ae:	d208      	bcs.n	800a5c2 <HAL_RCC_ClockConfig+0x2d2>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 800a5b0:	4b25      	ldr	r3, [pc, #148]	; (800a648 <HAL_RCC_ClockConfig+0x358>)
 800a5b2:	69db      	ldr	r3, [r3, #28]
 800a5b4:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 800a5b8:	687b      	ldr	r3, [r7, #4]
 800a5ba:	699b      	ldr	r3, [r3, #24]
 800a5bc:	4922      	ldr	r1, [pc, #136]	; (800a648 <HAL_RCC_ClockConfig+0x358>)
 800a5be:	4313      	orrs	r3, r2
 800a5c0:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1/SRDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 800a5c2:	687b      	ldr	r3, [r7, #4]
 800a5c4:	681b      	ldr	r3, [r3, #0]
 800a5c6:	f003 0320 	and.w	r3, r3, #32
 800a5ca:	2b00      	cmp	r3, #0
 800a5cc:	d010      	beq.n	800a5f0 <HAL_RCC_ClockConfig+0x300>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if ((RCC_ClkInitStruct->APB4CLKDivider) < (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 800a5ce:	687b      	ldr	r3, [r7, #4]
 800a5d0:	69da      	ldr	r2, [r3, #28]
 800a5d2:	4b1d      	ldr	r3, [pc, #116]	; (800a648 <HAL_RCC_ClockConfig+0x358>)
 800a5d4:	6a1b      	ldr	r3, [r3, #32]
 800a5d6:	f003 0370 	and.w	r3, r3, #112	; 0x70
 800a5da:	429a      	cmp	r2, r3
 800a5dc:	d208      	bcs.n	800a5f0 <HAL_RCC_ClockConfig+0x300>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 800a5de:	4b1a      	ldr	r3, [pc, #104]	; (800a648 <HAL_RCC_ClockConfig+0x358>)
 800a5e0:	6a1b      	ldr	r3, [r3, #32]
 800a5e2:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 800a5e6:	687b      	ldr	r3, [r7, #4]
 800a5e8:	69db      	ldr	r3, [r3, #28]
 800a5ea:	4917      	ldr	r1, [pc, #92]	; (800a648 <HAL_RCC_ClockConfig+0x358>)
 800a5ec:	4313      	orrs	r3, r2
 800a5ee:	620b      	str	r3, [r1, #32]
#endif
  }

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 800a5f0:	f000 f844 	bl	800a67c <HAL_RCC_GetSysClockFreq>
 800a5f4:	4602      	mov	r2, r0
 800a5f6:	4b14      	ldr	r3, [pc, #80]	; (800a648 <HAL_RCC_ClockConfig+0x358>)
 800a5f8:	699b      	ldr	r3, [r3, #24]
 800a5fa:	0a1b      	lsrs	r3, r3, #8
 800a5fc:	f003 030f 	and.w	r3, r3, #15
 800a600:	4912      	ldr	r1, [pc, #72]	; (800a64c <HAL_RCC_ClockConfig+0x35c>)
 800a602:	5ccb      	ldrb	r3, [r1, r3]
 800a604:	f003 031f 	and.w	r3, r3, #31
 800a608:	fa22 f303 	lsr.w	r3, r2, r3
 800a60c:	613b      	str	r3, [r7, #16]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 800a60e:	4b0e      	ldr	r3, [pc, #56]	; (800a648 <HAL_RCC_ClockConfig+0x358>)
 800a610:	699b      	ldr	r3, [r3, #24]
 800a612:	f003 030f 	and.w	r3, r3, #15
 800a616:	4a0d      	ldr	r2, [pc, #52]	; (800a64c <HAL_RCC_ClockConfig+0x35c>)
 800a618:	5cd3      	ldrb	r3, [r2, r3]
 800a61a:	f003 031f 	and.w	r3, r3, #31
 800a61e:	693a      	ldr	r2, [r7, #16]
 800a620:	fa22 f303 	lsr.w	r3, r2, r3
 800a624:	4a0a      	ldr	r2, [pc, #40]	; (800a650 <HAL_RCC_ClockConfig+0x360>)
 800a626:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 800a628:	4a0a      	ldr	r2, [pc, #40]	; (800a654 <HAL_RCC_ClockConfig+0x364>)
 800a62a:	693b      	ldr	r3, [r7, #16]
 800a62c:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Configure the source of time base considering new system clocks settings*/
  halstatus = HAL_InitTick(uwTickPrio);
 800a62e:	4b0a      	ldr	r3, [pc, #40]	; (800a658 <HAL_RCC_ClockConfig+0x368>)
 800a630:	681b      	ldr	r3, [r3, #0]
 800a632:	4618      	mov	r0, r3
 800a634:	f7f9 fc9a 	bl	8003f6c <HAL_InitTick>
 800a638:	4603      	mov	r3, r0
 800a63a:	73fb      	strb	r3, [r7, #15]

  return halstatus;
 800a63c:	7bfb      	ldrb	r3, [r7, #15]
}
 800a63e:	4618      	mov	r0, r3
 800a640:	3718      	adds	r7, #24
 800a642:	46bd      	mov	sp, r7
 800a644:	bd80      	pop	{r7, pc}
 800a646:	bf00      	nop
 800a648:	58024400 	.word	0x58024400
 800a64c:	0801ef28 	.word	0x0801ef28
 800a650:	20000014 	.word	0x20000014
 800a654:	20000010 	.word	0x20000010
 800a658:	20000024 	.word	0x20000024

0800a65c <HAL_RCC_EnableCSS>:
  *         allowing the MCU to perform rescue operations. The CSSI is linked to
  *         the Cortex-M NMI (Non-Mask-able Interrupt) exception vector.
  * @retval None
  */
void HAL_RCC_EnableCSS(void)
{
 800a65c:	b480      	push	{r7}
 800a65e:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_CSSHSEON) ;
 800a660:	4b05      	ldr	r3, [pc, #20]	; (800a678 <HAL_RCC_EnableCSS+0x1c>)
 800a662:	681b      	ldr	r3, [r3, #0]
 800a664:	4a04      	ldr	r2, [pc, #16]	; (800a678 <HAL_RCC_EnableCSS+0x1c>)
 800a666:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800a66a:	6013      	str	r3, [r2, #0]
}
 800a66c:	bf00      	nop
 800a66e:	46bd      	mov	sp, r7
 800a670:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a674:	4770      	bx	lr
 800a676:	bf00      	nop
 800a678:	58024400 	.word	0x58024400

0800a67c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800a67c:	b480      	push	{r7}
 800a67e:	b089      	sub	sp, #36	; 0x24
 800a680:	af00      	add	r7, sp, #0
  float_t fracn1, pllvco;
  uint32_t sysclockfreq;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
 800a682:	4bb3      	ldr	r3, [pc, #716]	; (800a950 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800a684:	691b      	ldr	r3, [r3, #16]
 800a686:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800a68a:	2b18      	cmp	r3, #24
 800a68c:	f200 8155 	bhi.w	800a93a <HAL_RCC_GetSysClockFreq+0x2be>
 800a690:	a201      	add	r2, pc, #4	; (adr r2, 800a698 <HAL_RCC_GetSysClockFreq+0x1c>)
 800a692:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a696:	bf00      	nop
 800a698:	0800a6fd 	.word	0x0800a6fd
 800a69c:	0800a93b 	.word	0x0800a93b
 800a6a0:	0800a93b 	.word	0x0800a93b
 800a6a4:	0800a93b 	.word	0x0800a93b
 800a6a8:	0800a93b 	.word	0x0800a93b
 800a6ac:	0800a93b 	.word	0x0800a93b
 800a6b0:	0800a93b 	.word	0x0800a93b
 800a6b4:	0800a93b 	.word	0x0800a93b
 800a6b8:	0800a723 	.word	0x0800a723
 800a6bc:	0800a93b 	.word	0x0800a93b
 800a6c0:	0800a93b 	.word	0x0800a93b
 800a6c4:	0800a93b 	.word	0x0800a93b
 800a6c8:	0800a93b 	.word	0x0800a93b
 800a6cc:	0800a93b 	.word	0x0800a93b
 800a6d0:	0800a93b 	.word	0x0800a93b
 800a6d4:	0800a93b 	.word	0x0800a93b
 800a6d8:	0800a729 	.word	0x0800a729
 800a6dc:	0800a93b 	.word	0x0800a93b
 800a6e0:	0800a93b 	.word	0x0800a93b
 800a6e4:	0800a93b 	.word	0x0800a93b
 800a6e8:	0800a93b 	.word	0x0800a93b
 800a6ec:	0800a93b 	.word	0x0800a93b
 800a6f0:	0800a93b 	.word	0x0800a93b
 800a6f4:	0800a93b 	.word	0x0800a93b
 800a6f8:	0800a72f 	.word	0x0800a72f
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800a6fc:	4b94      	ldr	r3, [pc, #592]	; (800a950 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800a6fe:	681b      	ldr	r3, [r3, #0]
 800a700:	f003 0320 	and.w	r3, r3, #32
 800a704:	2b00      	cmp	r3, #0
 800a706:	d009      	beq.n	800a71c <HAL_RCC_GetSysClockFreq+0xa0>
      {
        sysclockfreq = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800a708:	4b91      	ldr	r3, [pc, #580]	; (800a950 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800a70a:	681b      	ldr	r3, [r3, #0]
 800a70c:	08db      	lsrs	r3, r3, #3
 800a70e:	f003 0303 	and.w	r3, r3, #3
 800a712:	4a90      	ldr	r2, [pc, #576]	; (800a954 <HAL_RCC_GetSysClockFreq+0x2d8>)
 800a714:	fa22 f303 	lsr.w	r3, r2, r3
 800a718:	61bb      	str	r3, [r7, #24]
      else
      {
        sysclockfreq = (uint32_t) HSI_VALUE;
      }

      break;
 800a71a:	e111      	b.n	800a940 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = (uint32_t) HSI_VALUE;
 800a71c:	4b8d      	ldr	r3, [pc, #564]	; (800a954 <HAL_RCC_GetSysClockFreq+0x2d8>)
 800a71e:	61bb      	str	r3, [r7, #24]
      break;
 800a720:	e10e      	b.n	800a940 <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_CSI:  /* CSI used as system clock  source */
      sysclockfreq = CSI_VALUE;
 800a722:	4b8d      	ldr	r3, [pc, #564]	; (800a958 <HAL_RCC_GetSysClockFreq+0x2dc>)
 800a724:	61bb      	str	r3, [r7, #24]
      break;
 800a726:	e10b      	b.n	800a940 <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
      sysclockfreq = HSE_VALUE;
 800a728:	4b8c      	ldr	r3, [pc, #560]	; (800a95c <HAL_RCC_GetSysClockFreq+0x2e0>)
 800a72a:	61bb      	str	r3, [r7, #24]
      break;
 800a72c:	e108      	b.n	800a940 <HAL_RCC_GetSysClockFreq+0x2c4>
    case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

      /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR
      */
      pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 800a72e:	4b88      	ldr	r3, [pc, #544]	; (800a950 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800a730:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a732:	f003 0303 	and.w	r3, r3, #3
 800a736:	617b      	str	r3, [r7, #20]
      pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1) >> 4)  ;
 800a738:	4b85      	ldr	r3, [pc, #532]	; (800a950 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800a73a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a73c:	091b      	lsrs	r3, r3, #4
 800a73e:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800a742:	613b      	str	r3, [r7, #16]
      pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN) >> RCC_PLLCFGR_PLL1FRACEN_Pos);
 800a744:	4b82      	ldr	r3, [pc, #520]	; (800a950 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800a746:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a748:	f003 0301 	and.w	r3, r3, #1
 800a74c:	60fb      	str	r3, [r7, #12]
      fracn1 = (float_t)(uint32_t)(pllfracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
 800a74e:	4b80      	ldr	r3, [pc, #512]	; (800a950 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800a750:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a752:	08db      	lsrs	r3, r3, #3
 800a754:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800a758:	68fa      	ldr	r2, [r7, #12]
 800a75a:	fb02 f303 	mul.w	r3, r2, r3
 800a75e:	ee07 3a90 	vmov	s15, r3
 800a762:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800a766:	edc7 7a02 	vstr	s15, [r7, #8]

      if (pllm != 0U)
 800a76a:	693b      	ldr	r3, [r7, #16]
 800a76c:	2b00      	cmp	r3, #0
 800a76e:	f000 80e1 	beq.w	800a934 <HAL_RCC_GetSysClockFreq+0x2b8>
 800a772:	697b      	ldr	r3, [r7, #20]
 800a774:	2b02      	cmp	r3, #2
 800a776:	f000 8083 	beq.w	800a880 <HAL_RCC_GetSysClockFreq+0x204>
 800a77a:	697b      	ldr	r3, [r7, #20]
 800a77c:	2b02      	cmp	r3, #2
 800a77e:	f200 80a1 	bhi.w	800a8c4 <HAL_RCC_GetSysClockFreq+0x248>
 800a782:	697b      	ldr	r3, [r7, #20]
 800a784:	2b00      	cmp	r3, #0
 800a786:	d003      	beq.n	800a790 <HAL_RCC_GetSysClockFreq+0x114>
 800a788:	697b      	ldr	r3, [r7, #20]
 800a78a:	2b01      	cmp	r3, #1
 800a78c:	d056      	beq.n	800a83c <HAL_RCC_GetSysClockFreq+0x1c0>
 800a78e:	e099      	b.n	800a8c4 <HAL_RCC_GetSysClockFreq+0x248>
      {
        switch (pllsource)
        {
          case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

            if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800a790:	4b6f      	ldr	r3, [pc, #444]	; (800a950 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800a792:	681b      	ldr	r3, [r3, #0]
 800a794:	f003 0320 	and.w	r3, r3, #32
 800a798:	2b00      	cmp	r3, #0
 800a79a:	d02d      	beq.n	800a7f8 <HAL_RCC_GetSysClockFreq+0x17c>
            {
              hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800a79c:	4b6c      	ldr	r3, [pc, #432]	; (800a950 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800a79e:	681b      	ldr	r3, [r3, #0]
 800a7a0:	08db      	lsrs	r3, r3, #3
 800a7a2:	f003 0303 	and.w	r3, r3, #3
 800a7a6:	4a6b      	ldr	r2, [pc, #428]	; (800a954 <HAL_RCC_GetSysClockFreq+0x2d8>)
 800a7a8:	fa22 f303 	lsr.w	r3, r2, r3
 800a7ac:	607b      	str	r3, [r7, #4]
              pllvco = ((float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800a7ae:	687b      	ldr	r3, [r7, #4]
 800a7b0:	ee07 3a90 	vmov	s15, r3
 800a7b4:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800a7b8:	693b      	ldr	r3, [r7, #16]
 800a7ba:	ee07 3a90 	vmov	s15, r3
 800a7be:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800a7c2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800a7c6:	4b62      	ldr	r3, [pc, #392]	; (800a950 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800a7c8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a7ca:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800a7ce:	ee07 3a90 	vmov	s15, r3
 800a7d2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800a7d6:	ed97 6a02 	vldr	s12, [r7, #8]
 800a7da:	eddf 5a61 	vldr	s11, [pc, #388]	; 800a960 <HAL_RCC_GetSysClockFreq+0x2e4>
 800a7de:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800a7e2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800a7e6:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800a7ea:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800a7ee:	ee67 7a27 	vmul.f32	s15, s14, s15
 800a7f2:	edc7 7a07 	vstr	s15, [r7, #28]
            }
            else
            {
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
            }
            break;
 800a7f6:	e087      	b.n	800a908 <HAL_RCC_GetSysClockFreq+0x28c>
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800a7f8:	693b      	ldr	r3, [r7, #16]
 800a7fa:	ee07 3a90 	vmov	s15, r3
 800a7fe:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800a802:	eddf 6a58 	vldr	s13, [pc, #352]	; 800a964 <HAL_RCC_GetSysClockFreq+0x2e8>
 800a806:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800a80a:	4b51      	ldr	r3, [pc, #324]	; (800a950 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800a80c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a80e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800a812:	ee07 3a90 	vmov	s15, r3
 800a816:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800a81a:	ed97 6a02 	vldr	s12, [r7, #8]
 800a81e:	eddf 5a50 	vldr	s11, [pc, #320]	; 800a960 <HAL_RCC_GetSysClockFreq+0x2e4>
 800a822:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800a826:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800a82a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800a82e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800a832:	ee67 7a27 	vmul.f32	s15, s14, s15
 800a836:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 800a83a:	e065      	b.n	800a908 <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800a83c:	693b      	ldr	r3, [r7, #16]
 800a83e:	ee07 3a90 	vmov	s15, r3
 800a842:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800a846:	eddf 6a48 	vldr	s13, [pc, #288]	; 800a968 <HAL_RCC_GetSysClockFreq+0x2ec>
 800a84a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800a84e:	4b40      	ldr	r3, [pc, #256]	; (800a950 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800a850:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a852:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800a856:	ee07 3a90 	vmov	s15, r3
 800a85a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800a85e:	ed97 6a02 	vldr	s12, [r7, #8]
 800a862:	eddf 5a3f 	vldr	s11, [pc, #252]	; 800a960 <HAL_RCC_GetSysClockFreq+0x2e4>
 800a866:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800a86a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800a86e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800a872:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800a876:	ee67 7a27 	vmul.f32	s15, s14, s15
 800a87a:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 800a87e:	e043      	b.n	800a908 <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
            pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800a880:	693b      	ldr	r3, [r7, #16]
 800a882:	ee07 3a90 	vmov	s15, r3
 800a886:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800a88a:	eddf 6a38 	vldr	s13, [pc, #224]	; 800a96c <HAL_RCC_GetSysClockFreq+0x2f0>
 800a88e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800a892:	4b2f      	ldr	r3, [pc, #188]	; (800a950 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800a894:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a896:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800a89a:	ee07 3a90 	vmov	s15, r3
 800a89e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800a8a2:	ed97 6a02 	vldr	s12, [r7, #8]
 800a8a6:	eddf 5a2e 	vldr	s11, [pc, #184]	; 800a960 <HAL_RCC_GetSysClockFreq+0x2e4>
 800a8aa:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800a8ae:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800a8b2:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800a8b6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800a8ba:	ee67 7a27 	vmul.f32	s15, s14, s15
 800a8be:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 800a8c2:	e021      	b.n	800a908 <HAL_RCC_GetSysClockFreq+0x28c>

          default:
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800a8c4:	693b      	ldr	r3, [r7, #16]
 800a8c6:	ee07 3a90 	vmov	s15, r3
 800a8ca:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800a8ce:	eddf 6a26 	vldr	s13, [pc, #152]	; 800a968 <HAL_RCC_GetSysClockFreq+0x2ec>
 800a8d2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800a8d6:	4b1e      	ldr	r3, [pc, #120]	; (800a950 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800a8d8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a8da:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800a8de:	ee07 3a90 	vmov	s15, r3
 800a8e2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800a8e6:	ed97 6a02 	vldr	s12, [r7, #8]
 800a8ea:	eddf 5a1d 	vldr	s11, [pc, #116]	; 800a960 <HAL_RCC_GetSysClockFreq+0x2e4>
 800a8ee:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800a8f2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800a8f6:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800a8fa:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800a8fe:	ee67 7a27 	vmul.f32	s15, s14, s15
 800a902:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 800a906:	bf00      	nop
        }
        pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >> 9) + 1U) ;
 800a908:	4b11      	ldr	r3, [pc, #68]	; (800a950 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800a90a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a90c:	0a5b      	lsrs	r3, r3, #9
 800a90e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800a912:	3301      	adds	r3, #1
 800a914:	603b      	str	r3, [r7, #0]
        sysclockfreq = (uint32_t)(float_t)(pllvco / (float_t)pllp);
 800a916:	683b      	ldr	r3, [r7, #0]
 800a918:	ee07 3a90 	vmov	s15, r3
 800a91c:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 800a920:	edd7 6a07 	vldr	s13, [r7, #28]
 800a924:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800a928:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800a92c:	ee17 3a90 	vmov	r3, s15
 800a930:	61bb      	str	r3, [r7, #24]
      }
      else
      {
        sysclockfreq = 0U;
      }
      break;
 800a932:	e005      	b.n	800a940 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = 0U;
 800a934:	2300      	movs	r3, #0
 800a936:	61bb      	str	r3, [r7, #24]
      break;
 800a938:	e002      	b.n	800a940 <HAL_RCC_GetSysClockFreq+0x2c4>

    default:
      sysclockfreq = CSI_VALUE;
 800a93a:	4b07      	ldr	r3, [pc, #28]	; (800a958 <HAL_RCC_GetSysClockFreq+0x2dc>)
 800a93c:	61bb      	str	r3, [r7, #24]
      break;
 800a93e:	bf00      	nop
  }

  return sysclockfreq;
 800a940:	69bb      	ldr	r3, [r7, #24]
}
 800a942:	4618      	mov	r0, r3
 800a944:	3724      	adds	r7, #36	; 0x24
 800a946:	46bd      	mov	sp, r7
 800a948:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a94c:	4770      	bx	lr
 800a94e:	bf00      	nop
 800a950:	58024400 	.word	0x58024400
 800a954:	03d09000 	.word	0x03d09000
 800a958:	003d0900 	.word	0x003d0900
 800a95c:	00989680 	.word	0x00989680
 800a960:	46000000 	.word	0x46000000
 800a964:	4c742400 	.word	0x4c742400
 800a968:	4a742400 	.word	0x4a742400
 800a96c:	4b189680 	.word	0x4b189680

0800a970 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemD2Clock CMSIS variable is used to store System domain2 Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800a970:	b580      	push	{r7, lr}
 800a972:	b082      	sub	sp, #8
 800a974:	af00      	add	r7, sp, #0
  uint32_t common_system_clock;

#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 800a976:	f7ff fe81 	bl	800a67c <HAL_RCC_GetSysClockFreq>
 800a97a:	4602      	mov	r2, r0
 800a97c:	4b10      	ldr	r3, [pc, #64]	; (800a9c0 <HAL_RCC_GetHCLKFreq+0x50>)
 800a97e:	699b      	ldr	r3, [r3, #24]
 800a980:	0a1b      	lsrs	r3, r3, #8
 800a982:	f003 030f 	and.w	r3, r3, #15
 800a986:	490f      	ldr	r1, [pc, #60]	; (800a9c4 <HAL_RCC_GetHCLKFreq+0x54>)
 800a988:	5ccb      	ldrb	r3, [r1, r3]
 800a98a:	f003 031f 	and.w	r3, r3, #31
 800a98e:	fa22 f303 	lsr.w	r3, r2, r3
 800a992:	607b      	str	r3, [r7, #4]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos] & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 800a994:	4b0a      	ldr	r3, [pc, #40]	; (800a9c0 <HAL_RCC_GetHCLKFreq+0x50>)
 800a996:	699b      	ldr	r3, [r3, #24]
 800a998:	f003 030f 	and.w	r3, r3, #15
 800a99c:	4a09      	ldr	r2, [pc, #36]	; (800a9c4 <HAL_RCC_GetHCLKFreq+0x54>)
 800a99e:	5cd3      	ldrb	r3, [r2, r3]
 800a9a0:	f003 031f 	and.w	r3, r3, #31
 800a9a4:	687a      	ldr	r2, [r7, #4]
 800a9a6:	fa22 f303 	lsr.w	r3, r2, r3
 800a9aa:	4a07      	ldr	r2, [pc, #28]	; (800a9c8 <HAL_RCC_GetHCLKFreq+0x58>)
 800a9ac:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 800a9ae:	4a07      	ldr	r2, [pc, #28]	; (800a9cc <HAL_RCC_GetHCLKFreq+0x5c>)
 800a9b0:	687b      	ldr	r3, [r7, #4]
 800a9b2:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  return SystemD2Clock;
 800a9b4:	4b04      	ldr	r3, [pc, #16]	; (800a9c8 <HAL_RCC_GetHCLKFreq+0x58>)
 800a9b6:	681b      	ldr	r3, [r3, #0]
}
 800a9b8:	4618      	mov	r0, r3
 800a9ba:	3708      	adds	r7, #8
 800a9bc:	46bd      	mov	sp, r7
 800a9be:	bd80      	pop	{r7, pc}
 800a9c0:	58024400 	.word	0x58024400
 800a9c4:	0801ef28 	.word	0x0801ef28
 800a9c8:	20000014 	.word	0x20000014
 800a9cc:	20000010 	.word	0x20000010

0800a9d0 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800a9d0:	b580      	push	{r7, lr}
 800a9d2:	af00      	add	r7, sp, #0
#if defined (RCC_D2CFGR_D2PPRE1)
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1) >> RCC_D2CFGR_D2PPRE1_Pos]) & 0x1FU));
 800a9d4:	f7ff ffcc 	bl	800a970 <HAL_RCC_GetHCLKFreq>
 800a9d8:	4602      	mov	r2, r0
 800a9da:	4b06      	ldr	r3, [pc, #24]	; (800a9f4 <HAL_RCC_GetPCLK1Freq+0x24>)
 800a9dc:	69db      	ldr	r3, [r3, #28]
 800a9de:	091b      	lsrs	r3, r3, #4
 800a9e0:	f003 0307 	and.w	r3, r3, #7
 800a9e4:	4904      	ldr	r1, [pc, #16]	; (800a9f8 <HAL_RCC_GetPCLK1Freq+0x28>)
 800a9e6:	5ccb      	ldrb	r3, [r1, r3]
 800a9e8:	f003 031f 	and.w	r3, r3, #31
 800a9ec:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1) >> RCC_CDCFGR2_CDPPRE1_Pos]) & 0x1FU));
#endif
}
 800a9f0:	4618      	mov	r0, r3
 800a9f2:	bd80      	pop	{r7, pc}
 800a9f4:	58024400 	.word	0x58024400
 800a9f8:	0801ef28 	.word	0x0801ef28

0800a9fc <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800a9fc:	b580      	push	{r7, lr}
 800a9fe:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
#if defined(RCC_D2CFGR_D2PPRE2)
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2) >> RCC_D2CFGR_D2PPRE2_Pos]) & 0x1FU));
 800aa00:	f7ff ffb6 	bl	800a970 <HAL_RCC_GetHCLKFreq>
 800aa04:	4602      	mov	r2, r0
 800aa06:	4b06      	ldr	r3, [pc, #24]	; (800aa20 <HAL_RCC_GetPCLK2Freq+0x24>)
 800aa08:	69db      	ldr	r3, [r3, #28]
 800aa0a:	0a1b      	lsrs	r3, r3, #8
 800aa0c:	f003 0307 	and.w	r3, r3, #7
 800aa10:	4904      	ldr	r1, [pc, #16]	; (800aa24 <HAL_RCC_GetPCLK2Freq+0x28>)
 800aa12:	5ccb      	ldrb	r3, [r1, r3]
 800aa14:	f003 031f 	and.w	r3, r3, #31
 800aa18:	fa22 f303 	lsr.w	r3, r2, r3
#else
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2) >> RCC_CDCFGR2_CDPPRE2_Pos]) & 0x1FU));
#endif
}
 800aa1c:	4618      	mov	r0, r3
 800aa1e:	bd80      	pop	{r7, pc}
 800aa20:	58024400 	.word	0x58024400
 800aa24:	0801ef28 	.word	0x0801ef28

0800aa28 <HAL_RCC_NMI_IRQHandler>:
  * @brief This function handles the RCC CSS interrupt request.
  * @note This API should be called under the NMI_Handler().
  * @retval None
  */
void HAL_RCC_NMI_IRQHandler(void)
{
 800aa28:	b580      	push	{r7, lr}
 800aa2a:	af00      	add	r7, sp, #0
  /* Check RCC CSSF flag  */
  if (__HAL_RCC_GET_IT(RCC_IT_CSS))
 800aa2c:	4b07      	ldr	r3, [pc, #28]	; (800aa4c <HAL_RCC_NMI_IRQHandler+0x24>)
 800aa2e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800aa30:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800aa34:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800aa38:	d105      	bne.n	800aa46 <HAL_RCC_NMI_IRQHandler+0x1e>
  {
    /* RCC Clock Security System interrupt user callback */
    HAL_RCC_CSSCallback();
 800aa3a:	f000 f809 	bl	800aa50 <HAL_RCC_CSSCallback>

    /* Clear RCC CSS pending bit */
    __HAL_RCC_CLEAR_IT(RCC_IT_CSS);
 800aa3e:	4b03      	ldr	r3, [pc, #12]	; (800aa4c <HAL_RCC_NMI_IRQHandler+0x24>)
 800aa40:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800aa44:	669a      	str	r2, [r3, #104]	; 0x68
  }
}
 800aa46:	bf00      	nop
 800aa48:	bd80      	pop	{r7, pc}
 800aa4a:	bf00      	nop
 800aa4c:	58024400 	.word	0x58024400

0800aa50 <HAL_RCC_CSSCallback>:
/**
  * @brief  RCC Clock Security System interrupt callback
  * @retval none
  */
__weak void HAL_RCC_CSSCallback(void)
{
 800aa50:	b480      	push	{r7}
 800aa52:	af00      	add	r7, sp, #0
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_RCC_CSSCallback could be implemented in the user file
   */
}
 800aa54:	bf00      	nop
 800aa56:	46bd      	mov	sp, r7
 800aa58:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aa5c:	4770      	bx	lr
	...

0800aa60 <HAL_RCCEx_PeriphCLKConfig>:
  * (*) : Available on some STM32H7 lines only.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 800aa60:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800aa64:	b0ca      	sub	sp, #296	; 0x128
 800aa66:	af00      	add	r7, sp, #0
 800aa68:	f8c7 0114 	str.w	r0, [r7, #276]	; 0x114
  uint32_t tmpreg;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 800aa6c:	2300      	movs	r3, #0
 800aa6e:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 800aa72:	2300      	movs	r3, #0
 800aa74:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126

  /*---------------------------- SPDIFRX configuration -------------------------------*/

  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 800aa78:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800aa7c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800aa80:	f002 6400 	and.w	r4, r2, #134217728	; 0x8000000
 800aa84:	2500      	movs	r5, #0
 800aa86:	ea54 0305 	orrs.w	r3, r4, r5
 800aa8a:	d049      	beq.n	800ab20 <HAL_RCCEx_PeriphCLKConfig+0xc0>
  {

    switch (PeriphClkInit->SpdifrxClockSelection)
 800aa8c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800aa90:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800aa92:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 800aa96:	d02f      	beq.n	800aaf8 <HAL_RCCEx_PeriphCLKConfig+0x98>
 800aa98:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 800aa9c:	d828      	bhi.n	800aaf0 <HAL_RCCEx_PeriphCLKConfig+0x90>
 800aa9e:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800aaa2:	d01a      	beq.n	800aada <HAL_RCCEx_PeriphCLKConfig+0x7a>
 800aaa4:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800aaa8:	d822      	bhi.n	800aaf0 <HAL_RCCEx_PeriphCLKConfig+0x90>
 800aaaa:	2b00      	cmp	r3, #0
 800aaac:	d003      	beq.n	800aab6 <HAL_RCCEx_PeriphCLKConfig+0x56>
 800aaae:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800aab2:	d007      	beq.n	800aac4 <HAL_RCCEx_PeriphCLKConfig+0x64>
 800aab4:	e01c      	b.n	800aaf0 <HAL_RCCEx_PeriphCLKConfig+0x90>
    {
      case RCC_SPDIFRXCLKSOURCE_PLL:      /* PLL is used as clock source for SPDIFRX*/
        /* Enable PLL1Q Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800aab6:	4bb8      	ldr	r3, [pc, #736]	; (800ad98 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800aab8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800aaba:	4ab7      	ldr	r2, [pc, #732]	; (800ad98 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800aabc:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800aac0:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 800aac2:	e01a      	b.n	800aafa <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL2: /* PLL2 is used as clock source for SPDIFRX*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 800aac4:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800aac8:	3308      	adds	r3, #8
 800aaca:	2102      	movs	r1, #2
 800aacc:	4618      	mov	r0, r3
 800aace:	f002 fbb7 	bl	800d240 <RCCEx_PLL2_Config>
 800aad2:	4603      	mov	r3, r0
 800aad4:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 800aad8:	e00f      	b.n	800aafa <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPDIFRX*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800aada:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800aade:	3328      	adds	r3, #40	; 0x28
 800aae0:	2102      	movs	r1, #2
 800aae2:	4618      	mov	r0, r3
 800aae4:	f002 fc5e 	bl	800d3a4 <RCCEx_PLL3_Config>
 800aae8:	4603      	mov	r3, r0
 800aaea:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 800aaee:	e004      	b.n	800aafa <HAL_RCCEx_PeriphCLKConfig+0x9a>
        /* Internal OSC clock is used as source of SPDIFRX clock*/
        /* SPDIFRX clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800aaf0:	2301      	movs	r3, #1
 800aaf2:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 800aaf6:	e000      	b.n	800aafa <HAL_RCCEx_PeriphCLKConfig+0x9a>
        break;
 800aaf8:	bf00      	nop
    }

    if (ret == HAL_OK)
 800aafa:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800aafe:	2b00      	cmp	r3, #0
 800ab00:	d10a      	bne.n	800ab18 <HAL_RCCEx_PeriphCLKConfig+0xb8>
    {
      /* Set the source of SPDIFRX clock*/
      __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifrxClockSelection);
 800ab02:	4ba5      	ldr	r3, [pc, #660]	; (800ad98 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800ab04:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800ab06:	f423 1140 	bic.w	r1, r3, #3145728	; 0x300000
 800ab0a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800ab0e:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800ab10:	4aa1      	ldr	r2, [pc, #644]	; (800ad98 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800ab12:	430b      	orrs	r3, r1
 800ab14:	6513      	str	r3, [r2, #80]	; 0x50
 800ab16:	e003      	b.n	800ab20 <HAL_RCCEx_PeriphCLKConfig+0xc0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800ab18:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800ab1c:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*---------------------------- SAI1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 800ab20:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800ab24:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ab28:	f402 7880 	and.w	r8, r2, #256	; 0x100
 800ab2c:	f04f 0900 	mov.w	r9, #0
 800ab30:	ea58 0309 	orrs.w	r3, r8, r9
 800ab34:	d047      	beq.n	800abc6 <HAL_RCCEx_PeriphCLKConfig+0x166>
  {
    switch (PeriphClkInit->Sai1ClockSelection)
 800ab36:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800ab3a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800ab3c:	2b04      	cmp	r3, #4
 800ab3e:	d82a      	bhi.n	800ab96 <HAL_RCCEx_PeriphCLKConfig+0x136>
 800ab40:	a201      	add	r2, pc, #4	; (adr r2, 800ab48 <HAL_RCCEx_PeriphCLKConfig+0xe8>)
 800ab42:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ab46:	bf00      	nop
 800ab48:	0800ab5d 	.word	0x0800ab5d
 800ab4c:	0800ab6b 	.word	0x0800ab6b
 800ab50:	0800ab81 	.word	0x0800ab81
 800ab54:	0800ab9f 	.word	0x0800ab9f
 800ab58:	0800ab9f 	.word	0x0800ab9f
    {
      case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800ab5c:	4b8e      	ldr	r3, [pc, #568]	; (800ad98 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800ab5e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ab60:	4a8d      	ldr	r2, [pc, #564]	; (800ad98 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800ab62:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800ab66:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 800ab68:	e01a      	b.n	800aba0 <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800ab6a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800ab6e:	3308      	adds	r3, #8
 800ab70:	2100      	movs	r1, #0
 800ab72:	4618      	mov	r0, r3
 800ab74:	f002 fb64 	bl	800d240 <RCCEx_PLL2_Config>
 800ab78:	4603      	mov	r3, r0
 800ab7a:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 800ab7e:	e00f      	b.n	800aba0 <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 800ab80:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800ab84:	3328      	adds	r3, #40	; 0x28
 800ab86:	2100      	movs	r1, #0
 800ab88:	4618      	mov	r0, r3
 800ab8a:	f002 fc0b 	bl	800d3a4 <RCCEx_PLL3_Config>
 800ab8e:	4603      	mov	r3, r0
 800ab90:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 800ab94:	e004      	b.n	800aba0 <HAL_RCCEx_PeriphCLKConfig+0x140>
        /* HSI, HSE, or CSI oscillator is used as source of SAI1 clock */
        /* SAI1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800ab96:	2301      	movs	r3, #1
 800ab98:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 800ab9c:	e000      	b.n	800aba0 <HAL_RCCEx_PeriphCLKConfig+0x140>
        break;
 800ab9e:	bf00      	nop
    }

    if (ret == HAL_OK)
 800aba0:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800aba4:	2b00      	cmp	r3, #0
 800aba6:	d10a      	bne.n	800abbe <HAL_RCCEx_PeriphCLKConfig+0x15e>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 800aba8:	4b7b      	ldr	r3, [pc, #492]	; (800ad98 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800abaa:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800abac:	f023 0107 	bic.w	r1, r3, #7
 800abb0:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800abb4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800abb6:	4a78      	ldr	r2, [pc, #480]	; (800ad98 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800abb8:	430b      	orrs	r3, r1
 800abba:	6513      	str	r3, [r2, #80]	; 0x50
 800abbc:	e003      	b.n	800abc6 <HAL_RCCEx_PeriphCLKConfig+0x166>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800abbe:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800abc2:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

#if defined(SAI3)
  /*---------------------------- SAI2/3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI23) == RCC_PERIPHCLK_SAI23)
 800abc6:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800abca:	e9d3 2300 	ldrd	r2, r3, [r3]
 800abce:	f402 7a00 	and.w	sl, r2, #512	; 0x200
 800abd2:	f04f 0b00 	mov.w	fp, #0
 800abd6:	ea5a 030b 	orrs.w	r3, sl, fp
 800abda:	d04c      	beq.n	800ac76 <HAL_RCCEx_PeriphCLKConfig+0x216>
  {
    switch (PeriphClkInit->Sai23ClockSelection)
 800abdc:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800abe0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800abe2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800abe6:	d030      	beq.n	800ac4a <HAL_RCCEx_PeriphCLKConfig+0x1ea>
 800abe8:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800abec:	d829      	bhi.n	800ac42 <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 800abee:	2bc0      	cmp	r3, #192	; 0xc0
 800abf0:	d02d      	beq.n	800ac4e <HAL_RCCEx_PeriphCLKConfig+0x1ee>
 800abf2:	2bc0      	cmp	r3, #192	; 0xc0
 800abf4:	d825      	bhi.n	800ac42 <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 800abf6:	2b80      	cmp	r3, #128	; 0x80
 800abf8:	d018      	beq.n	800ac2c <HAL_RCCEx_PeriphCLKConfig+0x1cc>
 800abfa:	2b80      	cmp	r3, #128	; 0x80
 800abfc:	d821      	bhi.n	800ac42 <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 800abfe:	2b00      	cmp	r3, #0
 800ac00:	d002      	beq.n	800ac08 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
 800ac02:	2b40      	cmp	r3, #64	; 0x40
 800ac04:	d007      	beq.n	800ac16 <HAL_RCCEx_PeriphCLKConfig+0x1b6>
 800ac06:	e01c      	b.n	800ac42 <HAL_RCCEx_PeriphCLKConfig+0x1e2>
    {
      case RCC_SAI23CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2/3 */
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800ac08:	4b63      	ldr	r3, [pc, #396]	; (800ad98 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800ac0a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ac0c:	4a62      	ldr	r2, [pc, #392]	; (800ad98 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800ac0e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800ac12:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SAI2/3 clock source configuration done later after clock selection check */
        break;
 800ac14:	e01c      	b.n	800ac50 <HAL_RCCEx_PeriphCLKConfig+0x1f0>

      case RCC_SAI23CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2/3 */

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800ac16:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800ac1a:	3308      	adds	r3, #8
 800ac1c:	2100      	movs	r1, #0
 800ac1e:	4618      	mov	r0, r3
 800ac20:	f002 fb0e 	bl	800d240 <RCCEx_PLL2_Config>
 800ac24:	4603      	mov	r3, r0
 800ac26:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SAI2/3 clock source configuration done later after clock selection check */
        break;
 800ac2a:	e011      	b.n	800ac50 <HAL_RCCEx_PeriphCLKConfig+0x1f0>

      case RCC_SAI23CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2/3 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 800ac2c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800ac30:	3328      	adds	r3, #40	; 0x28
 800ac32:	2100      	movs	r1, #0
 800ac34:	4618      	mov	r0, r3
 800ac36:	f002 fbb5 	bl	800d3a4 <RCCEx_PLL3_Config>
 800ac3a:	4603      	mov	r3, r0
 800ac3c:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SAI2/3 clock source configuration done later after clock selection check */
        break;
 800ac40:	e006      	b.n	800ac50 <HAL_RCCEx_PeriphCLKConfig+0x1f0>
        /* HSI, HSE, or CSI oscillator is used as source of SAI2/3 clock */
        /* SAI2/3 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800ac42:	2301      	movs	r3, #1
 800ac44:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 800ac48:	e002      	b.n	800ac50 <HAL_RCCEx_PeriphCLKConfig+0x1f0>
        break;
 800ac4a:	bf00      	nop
 800ac4c:	e000      	b.n	800ac50 <HAL_RCCEx_PeriphCLKConfig+0x1f0>
        break;
 800ac4e:	bf00      	nop
    }

    if (ret == HAL_OK)
 800ac50:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800ac54:	2b00      	cmp	r3, #0
 800ac56:	d10a      	bne.n	800ac6e <HAL_RCCEx_PeriphCLKConfig+0x20e>
    {
      /* Set the source of SAI2/3 clock*/
      __HAL_RCC_SAI23_CONFIG(PeriphClkInit->Sai23ClockSelection);
 800ac58:	4b4f      	ldr	r3, [pc, #316]	; (800ad98 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800ac5a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800ac5c:	f423 71e0 	bic.w	r1, r3, #448	; 0x1c0
 800ac60:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800ac64:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800ac66:	4a4c      	ldr	r2, [pc, #304]	; (800ad98 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800ac68:	430b      	orrs	r3, r1
 800ac6a:	6513      	str	r3, [r2, #80]	; 0x50
 800ac6c:	e003      	b.n	800ac76 <HAL_RCCEx_PeriphCLKConfig+0x216>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800ac6e:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800ac72:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
  }
#endif  /*SAI2B*/

#if defined(SAI4)
  /*---------------------------- SAI4A configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4A) == RCC_PERIPHCLK_SAI4A)
 800ac76:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800ac7a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ac7e:	f402 6380 	and.w	r3, r2, #1024	; 0x400
 800ac82:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
 800ac86:	2300      	movs	r3, #0
 800ac88:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
 800ac8c:	e9d7 1242 	ldrd	r1, r2, [r7, #264]	; 0x108
 800ac90:	460b      	mov	r3, r1
 800ac92:	4313      	orrs	r3, r2
 800ac94:	d053      	beq.n	800ad3e <HAL_RCCEx_PeriphCLKConfig+0x2de>
  {
    switch (PeriphClkInit->Sai4AClockSelection)
 800ac96:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800ac9a:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 800ac9e:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 800aca2:	d035      	beq.n	800ad10 <HAL_RCCEx_PeriphCLKConfig+0x2b0>
 800aca4:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 800aca8:	d82e      	bhi.n	800ad08 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 800acaa:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 800acae:	d031      	beq.n	800ad14 <HAL_RCCEx_PeriphCLKConfig+0x2b4>
 800acb0:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 800acb4:	d828      	bhi.n	800ad08 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 800acb6:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800acba:	d01a      	beq.n	800acf2 <HAL_RCCEx_PeriphCLKConfig+0x292>
 800acbc:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800acc0:	d822      	bhi.n	800ad08 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 800acc2:	2b00      	cmp	r3, #0
 800acc4:	d003      	beq.n	800acce <HAL_RCCEx_PeriphCLKConfig+0x26e>
 800acc6:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800acca:	d007      	beq.n	800acdc <HAL_RCCEx_PeriphCLKConfig+0x27c>
 800accc:	e01c      	b.n	800ad08 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
    {
      case RCC_SAI4ACLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800acce:	4b32      	ldr	r3, [pc, #200]	; (800ad98 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800acd0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800acd2:	4a31      	ldr	r2, [pc, #196]	; (800ad98 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800acd4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800acd8:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 800acda:	e01c      	b.n	800ad16 <HAL_RCCEx_PeriphCLKConfig+0x2b6>

      case RCC_SAI4ACLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800acdc:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800ace0:	3308      	adds	r3, #8
 800ace2:	2100      	movs	r1, #0
 800ace4:	4618      	mov	r0, r3
 800ace6:	f002 faab 	bl	800d240 <RCCEx_PLL2_Config>
 800acea:	4603      	mov	r3, r0
 800acec:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SAI2 clock source configuration done later after clock selection check */
        break;
 800acf0:	e011      	b.n	800ad16 <HAL_RCCEx_PeriphCLKConfig+0x2b6>

      case RCC_SAI4ACLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 800acf2:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800acf6:	3328      	adds	r3, #40	; 0x28
 800acf8:	2100      	movs	r1, #0
 800acfa:	4618      	mov	r0, r3
 800acfc:	f002 fb52 	bl	800d3a4 <RCCEx_PLL3_Config>
 800ad00:	4603      	mov	r3, r0
 800ad02:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 800ad06:	e006      	b.n	800ad16 <HAL_RCCEx_PeriphCLKConfig+0x2b6>
        /* SAI4A clock source configuration done later after clock selection check */
        break;
#endif /* RCC_VER_3_0 */

      default:
        ret = HAL_ERROR;
 800ad08:	2301      	movs	r3, #1
 800ad0a:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 800ad0e:	e002      	b.n	800ad16 <HAL_RCCEx_PeriphCLKConfig+0x2b6>
        break;
 800ad10:	bf00      	nop
 800ad12:	e000      	b.n	800ad16 <HAL_RCCEx_PeriphCLKConfig+0x2b6>
        break;
 800ad14:	bf00      	nop
    }

    if (ret == HAL_OK)
 800ad16:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800ad1a:	2b00      	cmp	r3, #0
 800ad1c:	d10b      	bne.n	800ad36 <HAL_RCCEx_PeriphCLKConfig+0x2d6>
    {
      /* Set the source of SAI4A clock*/
      __HAL_RCC_SAI4A_CONFIG(PeriphClkInit->Sai4AClockSelection);
 800ad1e:	4b1e      	ldr	r3, [pc, #120]	; (800ad98 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800ad20:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800ad22:	f423 0160 	bic.w	r1, r3, #14680064	; 0xe00000
 800ad26:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800ad2a:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 800ad2e:	4a1a      	ldr	r2, [pc, #104]	; (800ad98 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800ad30:	430b      	orrs	r3, r1
 800ad32:	6593      	str	r3, [r2, #88]	; 0x58
 800ad34:	e003      	b.n	800ad3e <HAL_RCCEx_PeriphCLKConfig+0x2de>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800ad36:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800ad3a:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }
  /*---------------------------- SAI4B configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4B) == RCC_PERIPHCLK_SAI4B)
 800ad3e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800ad42:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ad46:	f402 6300 	and.w	r3, r2, #2048	; 0x800
 800ad4a:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 800ad4e:	2300      	movs	r3, #0
 800ad50:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 800ad54:	e9d7 1240 	ldrd	r1, r2, [r7, #256]	; 0x100
 800ad58:	460b      	mov	r3, r1
 800ad5a:	4313      	orrs	r3, r2
 800ad5c:	d056      	beq.n	800ae0c <HAL_RCCEx_PeriphCLKConfig+0x3ac>
  {
    switch (PeriphClkInit->Sai4BClockSelection)
 800ad5e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800ad62:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 800ad66:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800ad6a:	d038      	beq.n	800adde <HAL_RCCEx_PeriphCLKConfig+0x37e>
 800ad6c:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800ad70:	d831      	bhi.n	800add6 <HAL_RCCEx_PeriphCLKConfig+0x376>
 800ad72:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 800ad76:	d034      	beq.n	800ade2 <HAL_RCCEx_PeriphCLKConfig+0x382>
 800ad78:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 800ad7c:	d82b      	bhi.n	800add6 <HAL_RCCEx_PeriphCLKConfig+0x376>
 800ad7e:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800ad82:	d01d      	beq.n	800adc0 <HAL_RCCEx_PeriphCLKConfig+0x360>
 800ad84:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800ad88:	d825      	bhi.n	800add6 <HAL_RCCEx_PeriphCLKConfig+0x376>
 800ad8a:	2b00      	cmp	r3, #0
 800ad8c:	d006      	beq.n	800ad9c <HAL_RCCEx_PeriphCLKConfig+0x33c>
 800ad8e:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800ad92:	d00a      	beq.n	800adaa <HAL_RCCEx_PeriphCLKConfig+0x34a>
 800ad94:	e01f      	b.n	800add6 <HAL_RCCEx_PeriphCLKConfig+0x376>
 800ad96:	bf00      	nop
 800ad98:	58024400 	.word	0x58024400
    {
      case RCC_SAI4BCLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800ad9c:	4ba2      	ldr	r3, [pc, #648]	; (800b028 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800ad9e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ada0:	4aa1      	ldr	r2, [pc, #644]	; (800b028 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800ada2:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800ada6:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 800ada8:	e01c      	b.n	800ade4 <HAL_RCCEx_PeriphCLKConfig+0x384>

      case RCC_SAI4BCLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800adaa:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800adae:	3308      	adds	r3, #8
 800adb0:	2100      	movs	r1, #0
 800adb2:	4618      	mov	r0, r3
 800adb4:	f002 fa44 	bl	800d240 <RCCEx_PLL2_Config>
 800adb8:	4603      	mov	r3, r0
 800adba:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SAI2 clock source configuration done later after clock selection check */
        break;
 800adbe:	e011      	b.n	800ade4 <HAL_RCCEx_PeriphCLKConfig+0x384>

      case RCC_SAI4BCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 800adc0:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800adc4:	3328      	adds	r3, #40	; 0x28
 800adc6:	2100      	movs	r1, #0
 800adc8:	4618      	mov	r0, r3
 800adca:	f002 faeb 	bl	800d3a4 <RCCEx_PLL3_Config>
 800adce:	4603      	mov	r3, r0
 800add0:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 800add4:	e006      	b.n	800ade4 <HAL_RCCEx_PeriphCLKConfig+0x384>
        /* SAI4B clock source configuration done later after clock selection check */
        break;
#endif /* RCC_VER_3_0 */

      default:
        ret = HAL_ERROR;
 800add6:	2301      	movs	r3, #1
 800add8:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 800addc:	e002      	b.n	800ade4 <HAL_RCCEx_PeriphCLKConfig+0x384>
        break;
 800adde:	bf00      	nop
 800ade0:	e000      	b.n	800ade4 <HAL_RCCEx_PeriphCLKConfig+0x384>
        break;
 800ade2:	bf00      	nop
    }

    if (ret == HAL_OK)
 800ade4:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800ade8:	2b00      	cmp	r3, #0
 800adea:	d10b      	bne.n	800ae04 <HAL_RCCEx_PeriphCLKConfig+0x3a4>
    {
      /* Set the source of SAI4B clock*/
      __HAL_RCC_SAI4B_CONFIG(PeriphClkInit->Sai4BClockSelection);
 800adec:	4b8e      	ldr	r3, [pc, #568]	; (800b028 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800adee:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800adf0:	f023 61e0 	bic.w	r1, r3, #117440512	; 0x7000000
 800adf4:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800adf8:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 800adfc:	4a8a      	ldr	r2, [pc, #552]	; (800b028 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800adfe:	430b      	orrs	r3, r1
 800ae00:	6593      	str	r3, [r2, #88]	; 0x58
 800ae02:	e003      	b.n	800ae0c <HAL_RCCEx_PeriphCLKConfig+0x3ac>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800ae04:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800ae08:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
  }
#endif  /*SAI4*/

#if defined(QUADSPI)
  /*---------------------------- QSPI configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 800ae0c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800ae10:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ae14:	f002 7300 	and.w	r3, r2, #33554432	; 0x2000000
 800ae18:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 800ae1c:	2300      	movs	r3, #0
 800ae1e:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 800ae22:	e9d7 123e 	ldrd	r1, r2, [r7, #248]	; 0xf8
 800ae26:	460b      	mov	r3, r1
 800ae28:	4313      	orrs	r3, r2
 800ae2a:	d03a      	beq.n	800aea2 <HAL_RCCEx_PeriphCLKConfig+0x442>
  {
    switch (PeriphClkInit->QspiClockSelection)
 800ae2c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800ae30:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800ae32:	2b30      	cmp	r3, #48	; 0x30
 800ae34:	d01f      	beq.n	800ae76 <HAL_RCCEx_PeriphCLKConfig+0x416>
 800ae36:	2b30      	cmp	r3, #48	; 0x30
 800ae38:	d819      	bhi.n	800ae6e <HAL_RCCEx_PeriphCLKConfig+0x40e>
 800ae3a:	2b20      	cmp	r3, #32
 800ae3c:	d00c      	beq.n	800ae58 <HAL_RCCEx_PeriphCLKConfig+0x3f8>
 800ae3e:	2b20      	cmp	r3, #32
 800ae40:	d815      	bhi.n	800ae6e <HAL_RCCEx_PeriphCLKConfig+0x40e>
 800ae42:	2b00      	cmp	r3, #0
 800ae44:	d019      	beq.n	800ae7a <HAL_RCCEx_PeriphCLKConfig+0x41a>
 800ae46:	2b10      	cmp	r3, #16
 800ae48:	d111      	bne.n	800ae6e <HAL_RCCEx_PeriphCLKConfig+0x40e>
    {
      case RCC_QSPICLKSOURCE_PLL:      /* PLL is used as clock source for QSPI*/
        /* Enable QSPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800ae4a:	4b77      	ldr	r3, [pc, #476]	; (800b028 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800ae4c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ae4e:	4a76      	ldr	r2, [pc, #472]	; (800b028 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800ae50:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800ae54:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* QSPI clock source configuration done later after clock selection check */
        break;
 800ae56:	e011      	b.n	800ae7c <HAL_RCCEx_PeriphCLKConfig+0x41c>

      case RCC_QSPICLKSOURCE_PLL2: /* PLL2 is used as clock source for QSPI*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 800ae58:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800ae5c:	3308      	adds	r3, #8
 800ae5e:	2102      	movs	r1, #2
 800ae60:	4618      	mov	r0, r3
 800ae62:	f002 f9ed 	bl	800d240 <RCCEx_PLL2_Config>
 800ae66:	4603      	mov	r3, r0
 800ae68:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* QSPI clock source configuration done later after clock selection check */
        break;
 800ae6c:	e006      	b.n	800ae7c <HAL_RCCEx_PeriphCLKConfig+0x41c>
      case RCC_QSPICLKSOURCE_D1HCLK:
        /* Domain1 HCLK  clock selected as QSPI kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 800ae6e:	2301      	movs	r3, #1
 800ae70:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 800ae74:	e002      	b.n	800ae7c <HAL_RCCEx_PeriphCLKConfig+0x41c>
        break;
 800ae76:	bf00      	nop
 800ae78:	e000      	b.n	800ae7c <HAL_RCCEx_PeriphCLKConfig+0x41c>
        break;
 800ae7a:	bf00      	nop
    }

    if (ret == HAL_OK)
 800ae7c:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800ae80:	2b00      	cmp	r3, #0
 800ae82:	d10a      	bne.n	800ae9a <HAL_RCCEx_PeriphCLKConfig+0x43a>
    {
      /* Set the source of QSPI clock*/
      __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 800ae84:	4b68      	ldr	r3, [pc, #416]	; (800b028 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800ae86:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800ae88:	f023 0130 	bic.w	r1, r3, #48	; 0x30
 800ae8c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800ae90:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800ae92:	4a65      	ldr	r2, [pc, #404]	; (800b028 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800ae94:	430b      	orrs	r3, r1
 800ae96:	64d3      	str	r3, [r2, #76]	; 0x4c
 800ae98:	e003      	b.n	800aea2 <HAL_RCCEx_PeriphCLKConfig+0x442>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800ae9a:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800ae9e:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }
#endif  /*OCTOSPI*/

  /*---------------------------- SPI1/2/3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI123) == RCC_PERIPHCLK_SPI123)
 800aea2:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800aea6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800aeaa:	f402 5380 	and.w	r3, r2, #4096	; 0x1000
 800aeae:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 800aeb2:	2300      	movs	r3, #0
 800aeb4:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 800aeb8:	e9d7 123c 	ldrd	r1, r2, [r7, #240]	; 0xf0
 800aebc:	460b      	mov	r3, r1
 800aebe:	4313      	orrs	r3, r2
 800aec0:	d051      	beq.n	800af66 <HAL_RCCEx_PeriphCLKConfig+0x506>
  {
    switch (PeriphClkInit->Spi123ClockSelection)
 800aec2:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800aec6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800aec8:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800aecc:	d035      	beq.n	800af3a <HAL_RCCEx_PeriphCLKConfig+0x4da>
 800aece:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800aed2:	d82e      	bhi.n	800af32 <HAL_RCCEx_PeriphCLKConfig+0x4d2>
 800aed4:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 800aed8:	d031      	beq.n	800af3e <HAL_RCCEx_PeriphCLKConfig+0x4de>
 800aeda:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 800aede:	d828      	bhi.n	800af32 <HAL_RCCEx_PeriphCLKConfig+0x4d2>
 800aee0:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800aee4:	d01a      	beq.n	800af1c <HAL_RCCEx_PeriphCLKConfig+0x4bc>
 800aee6:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800aeea:	d822      	bhi.n	800af32 <HAL_RCCEx_PeriphCLKConfig+0x4d2>
 800aeec:	2b00      	cmp	r3, #0
 800aeee:	d003      	beq.n	800aef8 <HAL_RCCEx_PeriphCLKConfig+0x498>
 800aef0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800aef4:	d007      	beq.n	800af06 <HAL_RCCEx_PeriphCLKConfig+0x4a6>
 800aef6:	e01c      	b.n	800af32 <HAL_RCCEx_PeriphCLKConfig+0x4d2>
    {
      case RCC_SPI123CLKSOURCE_PLL:      /* PLL is used as clock source for SPI1/2/3 */
        /* Enable SPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800aef8:	4b4b      	ldr	r3, [pc, #300]	; (800b028 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800aefa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800aefc:	4a4a      	ldr	r2, [pc, #296]	; (800b028 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800aefe:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800af02:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 800af04:	e01c      	b.n	800af40 <HAL_RCCEx_PeriphCLKConfig+0x4e0>

      case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800af06:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800af0a:	3308      	adds	r3, #8
 800af0c:	2100      	movs	r1, #0
 800af0e:	4618      	mov	r0, r3
 800af10:	f002 f996 	bl	800d240 <RCCEx_PLL2_Config>
 800af14:	4603      	mov	r3, r0
 800af16:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 800af1a:	e011      	b.n	800af40 <HAL_RCCEx_PeriphCLKConfig+0x4e0>

      case RCC_SPI123CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 800af1c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800af20:	3328      	adds	r3, #40	; 0x28
 800af22:	2100      	movs	r1, #0
 800af24:	4618      	mov	r0, r3
 800af26:	f002 fa3d 	bl	800d3a4 <RCCEx_PLL3_Config>
 800af2a:	4603      	mov	r3, r0
 800af2c:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 800af30:	e006      	b.n	800af40 <HAL_RCCEx_PeriphCLKConfig+0x4e0>
        /* HSI, HSE, or CSI oscillator is used as source of SPI1/2/3 clock */
        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800af32:	2301      	movs	r3, #1
 800af34:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 800af38:	e002      	b.n	800af40 <HAL_RCCEx_PeriphCLKConfig+0x4e0>
        break;
 800af3a:	bf00      	nop
 800af3c:	e000      	b.n	800af40 <HAL_RCCEx_PeriphCLKConfig+0x4e0>
        break;
 800af3e:	bf00      	nop
    }

    if (ret == HAL_OK)
 800af40:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800af44:	2b00      	cmp	r3, #0
 800af46:	d10a      	bne.n	800af5e <HAL_RCCEx_PeriphCLKConfig+0x4fe>
    {
      /* Set the source of SPI1/2/3 clock*/
      __HAL_RCC_SPI123_CONFIG(PeriphClkInit->Spi123ClockSelection);
 800af48:	4b37      	ldr	r3, [pc, #220]	; (800b028 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800af4a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800af4c:	f423 41e0 	bic.w	r1, r3, #28672	; 0x7000
 800af50:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800af54:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800af56:	4a34      	ldr	r2, [pc, #208]	; (800b028 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800af58:	430b      	orrs	r3, r1
 800af5a:	6513      	str	r3, [r2, #80]	; 0x50
 800af5c:	e003      	b.n	800af66 <HAL_RCCEx_PeriphCLKConfig+0x506>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800af5e:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800af62:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*---------------------------- SPI4/5 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI45) == RCC_PERIPHCLK_SPI45)
 800af66:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800af6a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800af6e:	f402 5300 	and.w	r3, r2, #8192	; 0x2000
 800af72:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 800af76:	2300      	movs	r3, #0
 800af78:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 800af7c:	e9d7 123a 	ldrd	r1, r2, [r7, #232]	; 0xe8
 800af80:	460b      	mov	r3, r1
 800af82:	4313      	orrs	r3, r2
 800af84:	d056      	beq.n	800b034 <HAL_RCCEx_PeriphCLKConfig+0x5d4>
  {
    switch (PeriphClkInit->Spi45ClockSelection)
 800af86:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800af8a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800af8c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800af90:	d033      	beq.n	800affa <HAL_RCCEx_PeriphCLKConfig+0x59a>
 800af92:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800af96:	d82c      	bhi.n	800aff2 <HAL_RCCEx_PeriphCLKConfig+0x592>
 800af98:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 800af9c:	d02f      	beq.n	800affe <HAL_RCCEx_PeriphCLKConfig+0x59e>
 800af9e:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 800afa2:	d826      	bhi.n	800aff2 <HAL_RCCEx_PeriphCLKConfig+0x592>
 800afa4:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 800afa8:	d02b      	beq.n	800b002 <HAL_RCCEx_PeriphCLKConfig+0x5a2>
 800afaa:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 800afae:	d820      	bhi.n	800aff2 <HAL_RCCEx_PeriphCLKConfig+0x592>
 800afb0:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800afb4:	d012      	beq.n	800afdc <HAL_RCCEx_PeriphCLKConfig+0x57c>
 800afb6:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800afba:	d81a      	bhi.n	800aff2 <HAL_RCCEx_PeriphCLKConfig+0x592>
 800afbc:	2b00      	cmp	r3, #0
 800afbe:	d022      	beq.n	800b006 <HAL_RCCEx_PeriphCLKConfig+0x5a6>
 800afc0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800afc4:	d115      	bne.n	800aff2 <HAL_RCCEx_PeriphCLKConfig+0x592>
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI4/5 */

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800afc6:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800afca:	3308      	adds	r3, #8
 800afcc:	2101      	movs	r1, #1
 800afce:	4618      	mov	r0, r3
 800afd0:	f002 f936 	bl	800d240 <RCCEx_PLL2_Config>
 800afd4:	4603      	mov	r3, r0
 800afd6:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 800afda:	e015      	b.n	800b008 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
      case RCC_SPI45CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800afdc:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800afe0:	3328      	adds	r3, #40	; 0x28
 800afe2:	2101      	movs	r1, #1
 800afe4:	4618      	mov	r0, r3
 800afe6:	f002 f9dd 	bl	800d3a4 <RCCEx_PLL3_Config>
 800afea:	4603      	mov	r3, r0
 800afec:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 800aff0:	e00a      	b.n	800b008 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        /* HSE,  oscillator is used as source of SPI4/5 clock */
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800aff2:	2301      	movs	r3, #1
 800aff4:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 800aff8:	e006      	b.n	800b008 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 800affa:	bf00      	nop
 800affc:	e004      	b.n	800b008 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 800affe:	bf00      	nop
 800b000:	e002      	b.n	800b008 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 800b002:	bf00      	nop
 800b004:	e000      	b.n	800b008 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 800b006:	bf00      	nop
    }

    if (ret == HAL_OK)
 800b008:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800b00c:	2b00      	cmp	r3, #0
 800b00e:	d10d      	bne.n	800b02c <HAL_RCCEx_PeriphCLKConfig+0x5cc>
    {
      /* Set the source of SPI4/5 clock*/
      __HAL_RCC_SPI45_CONFIG(PeriphClkInit->Spi45ClockSelection);
 800b010:	4b05      	ldr	r3, [pc, #20]	; (800b028 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800b012:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800b014:	f423 21e0 	bic.w	r1, r3, #458752	; 0x70000
 800b018:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800b01c:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800b01e:	4a02      	ldr	r2, [pc, #8]	; (800b028 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800b020:	430b      	orrs	r3, r1
 800b022:	6513      	str	r3, [r2, #80]	; 0x50
 800b024:	e006      	b.n	800b034 <HAL_RCCEx_PeriphCLKConfig+0x5d4>
 800b026:	bf00      	nop
 800b028:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 800b02c:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800b030:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*---------------------------- SPI6 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 800b034:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800b038:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b03c:	f402 4380 	and.w	r3, r2, #16384	; 0x4000
 800b040:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 800b044:	2300      	movs	r3, #0
 800b046:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 800b04a:	e9d7 1238 	ldrd	r1, r2, [r7, #224]	; 0xe0
 800b04e:	460b      	mov	r3, r1
 800b050:	4313      	orrs	r3, r2
 800b052:	d055      	beq.n	800b100 <HAL_RCCEx_PeriphCLKConfig+0x6a0>
  {
    switch (PeriphClkInit->Spi6ClockSelection)
 800b054:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800b058:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 800b05c:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800b060:	d033      	beq.n	800b0ca <HAL_RCCEx_PeriphCLKConfig+0x66a>
 800b062:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800b066:	d82c      	bhi.n	800b0c2 <HAL_RCCEx_PeriphCLKConfig+0x662>
 800b068:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800b06c:	d02f      	beq.n	800b0ce <HAL_RCCEx_PeriphCLKConfig+0x66e>
 800b06e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800b072:	d826      	bhi.n	800b0c2 <HAL_RCCEx_PeriphCLKConfig+0x662>
 800b074:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 800b078:	d02b      	beq.n	800b0d2 <HAL_RCCEx_PeriphCLKConfig+0x672>
 800b07a:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 800b07e:	d820      	bhi.n	800b0c2 <HAL_RCCEx_PeriphCLKConfig+0x662>
 800b080:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800b084:	d012      	beq.n	800b0ac <HAL_RCCEx_PeriphCLKConfig+0x64c>
 800b086:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800b08a:	d81a      	bhi.n	800b0c2 <HAL_RCCEx_PeriphCLKConfig+0x662>
 800b08c:	2b00      	cmp	r3, #0
 800b08e:	d022      	beq.n	800b0d6 <HAL_RCCEx_PeriphCLKConfig+0x676>
 800b090:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800b094:	d115      	bne.n	800b0c2 <HAL_RCCEx_PeriphCLKConfig+0x662>
        /* SPI6 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI6*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800b096:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800b09a:	3308      	adds	r3, #8
 800b09c:	2101      	movs	r1, #1
 800b09e:	4618      	mov	r0, r3
 800b0a0:	f002 f8ce 	bl	800d240 <RCCEx_PLL2_Config>
 800b0a4:	4603      	mov	r3, r0
 800b0a6:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SPI6 clock source configuration done later after clock selection check */
        break;
 800b0aa:	e015      	b.n	800b0d8 <HAL_RCCEx_PeriphCLKConfig+0x678>
      case RCC_SPI6CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI6*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800b0ac:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800b0b0:	3328      	adds	r3, #40	; 0x28
 800b0b2:	2101      	movs	r1, #1
 800b0b4:	4618      	mov	r0, r3
 800b0b6:	f002 f975 	bl	800d3a4 <RCCEx_PLL3_Config>
 800b0ba:	4603      	mov	r3, r0
 800b0bc:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        /* SPI6 clock source configuration done later after clock selection check */
        break;
 800b0c0:	e00a      	b.n	800b0d8 <HAL_RCCEx_PeriphCLKConfig+0x678>
        /* SPI6 clock source configuration done later after clock selection check */
        break;
#endif

      default:
        ret = HAL_ERROR;
 800b0c2:	2301      	movs	r3, #1
 800b0c4:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 800b0c8:	e006      	b.n	800b0d8 <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 800b0ca:	bf00      	nop
 800b0cc:	e004      	b.n	800b0d8 <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 800b0ce:	bf00      	nop
 800b0d0:	e002      	b.n	800b0d8 <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 800b0d2:	bf00      	nop
 800b0d4:	e000      	b.n	800b0d8 <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 800b0d6:	bf00      	nop
    }

    if (ret == HAL_OK)
 800b0d8:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800b0dc:	2b00      	cmp	r3, #0
 800b0de:	d10b      	bne.n	800b0f8 <HAL_RCCEx_PeriphCLKConfig+0x698>
    {
      /* Set the source of SPI6 clock*/
      __HAL_RCC_SPI6_CONFIG(PeriphClkInit->Spi6ClockSelection);
 800b0e0:	4ba3      	ldr	r3, [pc, #652]	; (800b370 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800b0e2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800b0e4:	f023 41e0 	bic.w	r1, r3, #1879048192	; 0x70000000
 800b0e8:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800b0ec:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 800b0f0:	4a9f      	ldr	r2, [pc, #636]	; (800b370 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800b0f2:	430b      	orrs	r3, r1
 800b0f4:	6593      	str	r3, [r2, #88]	; 0x58
 800b0f6:	e003      	b.n	800b100 <HAL_RCCEx_PeriphCLKConfig+0x6a0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800b0f8:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800b0fc:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
  }
#endif /*DSI*/

#if defined(FDCAN1) || defined(FDCAN2)
  /*---------------------------- FDCAN configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 800b100:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800b104:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b108:	f402 4300 	and.w	r3, r2, #32768	; 0x8000
 800b10c:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 800b110:	2300      	movs	r3, #0
 800b112:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 800b116:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 800b11a:	460b      	mov	r3, r1
 800b11c:	4313      	orrs	r3, r2
 800b11e:	d037      	beq.n	800b190 <HAL_RCCEx_PeriphCLKConfig+0x730>
  {
    switch (PeriphClkInit->FdcanClockSelection)
 800b120:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800b124:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800b126:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800b12a:	d00e      	beq.n	800b14a <HAL_RCCEx_PeriphCLKConfig+0x6ea>
 800b12c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800b130:	d816      	bhi.n	800b160 <HAL_RCCEx_PeriphCLKConfig+0x700>
 800b132:	2b00      	cmp	r3, #0
 800b134:	d018      	beq.n	800b168 <HAL_RCCEx_PeriphCLKConfig+0x708>
 800b136:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800b13a:	d111      	bne.n	800b160 <HAL_RCCEx_PeriphCLKConfig+0x700>
    {
      case RCC_FDCANCLKSOURCE_PLL:      /* PLL is used as clock source for FDCAN*/
        /* Enable FDCAN Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800b13c:	4b8c      	ldr	r3, [pc, #560]	; (800b370 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800b13e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b140:	4a8b      	ldr	r2, [pc, #556]	; (800b370 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800b142:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800b146:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 800b148:	e00f      	b.n	800b16a <HAL_RCCEx_PeriphCLKConfig+0x70a>

      case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is used as clock source for FDCAN*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800b14a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800b14e:	3308      	adds	r3, #8
 800b150:	2101      	movs	r1, #1
 800b152:	4618      	mov	r0, r3
 800b154:	f002 f874 	bl	800d240 <RCCEx_PLL2_Config>
 800b158:	4603      	mov	r3, r0
 800b15a:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 800b15e:	e004      	b.n	800b16a <HAL_RCCEx_PeriphCLKConfig+0x70a>
        /* HSE is used as clock source for FDCAN*/
        /* FDCAN clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800b160:	2301      	movs	r3, #1
 800b162:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 800b166:	e000      	b.n	800b16a <HAL_RCCEx_PeriphCLKConfig+0x70a>
        break;
 800b168:	bf00      	nop
    }

    if (ret == HAL_OK)
 800b16a:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800b16e:	2b00      	cmp	r3, #0
 800b170:	d10a      	bne.n	800b188 <HAL_RCCEx_PeriphCLKConfig+0x728>
    {
      /* Set the source of FDCAN clock*/
      __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 800b172:	4b7f      	ldr	r3, [pc, #508]	; (800b370 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800b174:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800b176:	f023 5140 	bic.w	r1, r3, #805306368	; 0x30000000
 800b17a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800b17e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800b180:	4a7b      	ldr	r2, [pc, #492]	; (800b370 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800b182:	430b      	orrs	r3, r1
 800b184:	6513      	str	r3, [r2, #80]	; 0x50
 800b186:	e003      	b.n	800b190 <HAL_RCCEx_PeriphCLKConfig+0x730>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800b188:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800b18c:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }
#endif /*FDCAN1 || FDCAN2*/

  /*---------------------------- FMC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMC) == RCC_PERIPHCLK_FMC)
 800b190:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800b194:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b198:	f002 7380 	and.w	r3, r2, #16777216	; 0x1000000
 800b19c:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 800b1a0:	2300      	movs	r3, #0
 800b1a2:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
 800b1a6:	e9d7 1234 	ldrd	r1, r2, [r7, #208]	; 0xd0
 800b1aa:	460b      	mov	r3, r1
 800b1ac:	4313      	orrs	r3, r2
 800b1ae:	d039      	beq.n	800b224 <HAL_RCCEx_PeriphCLKConfig+0x7c4>
  {
    switch (PeriphClkInit->FmcClockSelection)
 800b1b0:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800b1b4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800b1b6:	2b03      	cmp	r3, #3
 800b1b8:	d81c      	bhi.n	800b1f4 <HAL_RCCEx_PeriphCLKConfig+0x794>
 800b1ba:	a201      	add	r2, pc, #4	; (adr r2, 800b1c0 <HAL_RCCEx_PeriphCLKConfig+0x760>)
 800b1bc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b1c0:	0800b1fd 	.word	0x0800b1fd
 800b1c4:	0800b1d1 	.word	0x0800b1d1
 800b1c8:	0800b1df 	.word	0x0800b1df
 800b1cc:	0800b1fd 	.word	0x0800b1fd
    {
      case RCC_FMCCLKSOURCE_PLL:      /* PLL is used as clock source for FMC*/
        /* Enable FMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800b1d0:	4b67      	ldr	r3, [pc, #412]	; (800b370 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800b1d2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b1d4:	4a66      	ldr	r2, [pc, #408]	; (800b370 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800b1d6:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800b1da:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* FMC clock source configuration done later after clock selection check */
        break;
 800b1dc:	e00f      	b.n	800b1fe <HAL_RCCEx_PeriphCLKConfig+0x79e>

      case RCC_FMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for FMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 800b1de:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800b1e2:	3308      	adds	r3, #8
 800b1e4:	2102      	movs	r1, #2
 800b1e6:	4618      	mov	r0, r3
 800b1e8:	f002 f82a 	bl	800d240 <RCCEx_PLL2_Config>
 800b1ec:	4603      	mov	r3, r0
 800b1ee:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* FMC clock source configuration done later after clock selection check */
        break;
 800b1f2:	e004      	b.n	800b1fe <HAL_RCCEx_PeriphCLKConfig+0x79e>
      case RCC_FMCCLKSOURCE_HCLK:
        /* D1/CD HCLK  clock selected as FMC kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 800b1f4:	2301      	movs	r3, #1
 800b1f6:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 800b1fa:	e000      	b.n	800b1fe <HAL_RCCEx_PeriphCLKConfig+0x79e>
        break;
 800b1fc:	bf00      	nop
    }

    if (ret == HAL_OK)
 800b1fe:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800b202:	2b00      	cmp	r3, #0
 800b204:	d10a      	bne.n	800b21c <HAL_RCCEx_PeriphCLKConfig+0x7bc>
    {
      /* Set the source of FMC clock*/
      __HAL_RCC_FMC_CONFIG(PeriphClkInit->FmcClockSelection);
 800b206:	4b5a      	ldr	r3, [pc, #360]	; (800b370 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800b208:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800b20a:	f023 0103 	bic.w	r1, r3, #3
 800b20e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800b212:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800b214:	4a56      	ldr	r2, [pc, #344]	; (800b370 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800b216:	430b      	orrs	r3, r1
 800b218:	64d3      	str	r3, [r2, #76]	; 0x4c
 800b21a:	e003      	b.n	800b224 <HAL_RCCEx_PeriphCLKConfig+0x7c4>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800b21c:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800b220:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*---------------------------- RTC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 800b224:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800b228:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b22c:	f402 0380 	and.w	r3, r2, #4194304	; 0x400000
 800b230:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 800b234:	2300      	movs	r3, #0
 800b236:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 800b23a:	e9d7 1232 	ldrd	r1, r2, [r7, #200]	; 0xc8
 800b23e:	460b      	mov	r3, r1
 800b240:	4313      	orrs	r3, r2
 800b242:	f000 809f 	beq.w	800b384 <HAL_RCCEx_PeriphCLKConfig+0x924>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800b246:	4b4b      	ldr	r3, [pc, #300]	; (800b374 <HAL_RCCEx_PeriphCLKConfig+0x914>)
 800b248:	681b      	ldr	r3, [r3, #0]
 800b24a:	4a4a      	ldr	r2, [pc, #296]	; (800b374 <HAL_RCCEx_PeriphCLKConfig+0x914>)
 800b24c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800b250:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 800b252:	f7f8 fed5 	bl	8004000 <HAL_GetTick>
 800b256:	f8c7 0120 	str.w	r0, [r7, #288]	; 0x120

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800b25a:	e00b      	b.n	800b274 <HAL_RCCEx_PeriphCLKConfig+0x814>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800b25c:	f7f8 fed0 	bl	8004000 <HAL_GetTick>
 800b260:	4602      	mov	r2, r0
 800b262:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 800b266:	1ad3      	subs	r3, r2, r3
 800b268:	2b64      	cmp	r3, #100	; 0x64
 800b26a:	d903      	bls.n	800b274 <HAL_RCCEx_PeriphCLKConfig+0x814>
      {
        ret = HAL_TIMEOUT;
 800b26c:	2303      	movs	r3, #3
 800b26e:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 800b272:	e005      	b.n	800b280 <HAL_RCCEx_PeriphCLKConfig+0x820>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800b274:	4b3f      	ldr	r3, [pc, #252]	; (800b374 <HAL_RCCEx_PeriphCLKConfig+0x914>)
 800b276:	681b      	ldr	r3, [r3, #0]
 800b278:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800b27c:	2b00      	cmp	r3, #0
 800b27e:	d0ed      	beq.n	800b25c <HAL_RCCEx_PeriphCLKConfig+0x7fc>
      }
    }

    if (ret == HAL_OK)
 800b280:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800b284:	2b00      	cmp	r3, #0
 800b286:	d179      	bne.n	800b37c <HAL_RCCEx_PeriphCLKConfig+0x91c>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if ((RCC->BDCR & RCC_BDCR_RTCSEL) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL))
 800b288:	4b39      	ldr	r3, [pc, #228]	; (800b370 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800b28a:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 800b28c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800b290:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 800b294:	4053      	eors	r3, r2
 800b296:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800b29a:	2b00      	cmp	r3, #0
 800b29c:	d015      	beq.n	800b2ca <HAL_RCCEx_PeriphCLKConfig+0x86a>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 800b29e:	4b34      	ldr	r3, [pc, #208]	; (800b370 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800b2a0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800b2a2:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800b2a6:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 800b2aa:	4b31      	ldr	r3, [pc, #196]	; (800b370 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800b2ac:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800b2ae:	4a30      	ldr	r2, [pc, #192]	; (800b370 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800b2b0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800b2b4:	6713      	str	r3, [r2, #112]	; 0x70
        __HAL_RCC_BACKUPRESET_RELEASE();
 800b2b6:	4b2e      	ldr	r3, [pc, #184]	; (800b370 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800b2b8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800b2ba:	4a2d      	ldr	r2, [pc, #180]	; (800b370 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800b2bc:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800b2c0:	6713      	str	r3, [r2, #112]	; 0x70
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpreg;
 800b2c2:	4a2b      	ldr	r2, [pc, #172]	; (800b370 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800b2c4:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 800b2c8:	6713      	str	r3, [r2, #112]	; 0x70
      }

      /* If LSE is selected as RTC clock source (and enabled prior to Backup Domain reset), wait for LSE reactivation */
      if (PeriphClkInit->RTCClockSelection == RCC_RTCCLKSOURCE_LSE)
 800b2ca:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800b2ce:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 800b2d2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800b2d6:	d118      	bne.n	800b30a <HAL_RCCEx_PeriphCLKConfig+0x8aa>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800b2d8:	f7f8 fe92 	bl	8004000 <HAL_GetTick>
 800b2dc:	f8c7 0120 	str.w	r0, [r7, #288]	; 0x120

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800b2e0:	e00d      	b.n	800b2fe <HAL_RCCEx_PeriphCLKConfig+0x89e>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800b2e2:	f7f8 fe8d 	bl	8004000 <HAL_GetTick>
 800b2e6:	4602      	mov	r2, r0
 800b2e8:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 800b2ec:	1ad2      	subs	r2, r2, r3
 800b2ee:	f241 3388 	movw	r3, #5000	; 0x1388
 800b2f2:	429a      	cmp	r2, r3
 800b2f4:	d903      	bls.n	800b2fe <HAL_RCCEx_PeriphCLKConfig+0x89e>
          {
            ret = HAL_TIMEOUT;
 800b2f6:	2303      	movs	r3, #3
 800b2f8:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
            break;
 800b2fc:	e005      	b.n	800b30a <HAL_RCCEx_PeriphCLKConfig+0x8aa>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800b2fe:	4b1c      	ldr	r3, [pc, #112]	; (800b370 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800b300:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800b302:	f003 0302 	and.w	r3, r3, #2
 800b306:	2b00      	cmp	r3, #0
 800b308:	d0eb      	beq.n	800b2e2 <HAL_RCCEx_PeriphCLKConfig+0x882>
          }
        }
      }

      if (ret == HAL_OK)
 800b30a:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800b30e:	2b00      	cmp	r3, #0
 800b310:	d129      	bne.n	800b366 <HAL_RCCEx_PeriphCLKConfig+0x906>
      {
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800b312:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800b316:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 800b31a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800b31e:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800b322:	d10e      	bne.n	800b342 <HAL_RCCEx_PeriphCLKConfig+0x8e2>
 800b324:	4b12      	ldr	r3, [pc, #72]	; (800b370 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800b326:	691b      	ldr	r3, [r3, #16]
 800b328:	f423 517c 	bic.w	r1, r3, #16128	; 0x3f00
 800b32c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800b330:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 800b334:	091a      	lsrs	r2, r3, #4
 800b336:	4b10      	ldr	r3, [pc, #64]	; (800b378 <HAL_RCCEx_PeriphCLKConfig+0x918>)
 800b338:	4013      	ands	r3, r2
 800b33a:	4a0d      	ldr	r2, [pc, #52]	; (800b370 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800b33c:	430b      	orrs	r3, r1
 800b33e:	6113      	str	r3, [r2, #16]
 800b340:	e005      	b.n	800b34e <HAL_RCCEx_PeriphCLKConfig+0x8ee>
 800b342:	4b0b      	ldr	r3, [pc, #44]	; (800b370 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800b344:	691b      	ldr	r3, [r3, #16]
 800b346:	4a0a      	ldr	r2, [pc, #40]	; (800b370 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800b348:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 800b34c:	6113      	str	r3, [r2, #16]
 800b34e:	4b08      	ldr	r3, [pc, #32]	; (800b370 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800b350:	6f19      	ldr	r1, [r3, #112]	; 0x70
 800b352:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800b356:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 800b35a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800b35e:	4a04      	ldr	r2, [pc, #16]	; (800b370 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800b360:	430b      	orrs	r3, r1
 800b362:	6713      	str	r3, [r2, #112]	; 0x70
 800b364:	e00e      	b.n	800b384 <HAL_RCCEx_PeriphCLKConfig+0x924>
      }
      else
      {
        /* set overall return value */
        status = ret;
 800b366:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800b36a:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
 800b36e:	e009      	b.n	800b384 <HAL_RCCEx_PeriphCLKConfig+0x924>
 800b370:	58024400 	.word	0x58024400
 800b374:	58024800 	.word	0x58024800
 800b378:	00ffffcf 	.word	0x00ffffcf
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 800b37c:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800b380:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }


  /*-------------------------- USART1/6 configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
 800b384:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800b388:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b38c:	f002 0301 	and.w	r3, r2, #1
 800b390:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 800b394:	2300      	movs	r3, #0
 800b396:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 800b39a:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 800b39e:	460b      	mov	r3, r1
 800b3a0:	4313      	orrs	r3, r2
 800b3a2:	f000 8089 	beq.w	800b4b8 <HAL_RCCEx_PeriphCLKConfig+0xa58>
  {
    switch (PeriphClkInit->Usart16ClockSelection)
 800b3a6:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800b3aa:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800b3ac:	2b28      	cmp	r3, #40	; 0x28
 800b3ae:	d86b      	bhi.n	800b488 <HAL_RCCEx_PeriphCLKConfig+0xa28>
 800b3b0:	a201      	add	r2, pc, #4	; (adr r2, 800b3b8 <HAL_RCCEx_PeriphCLKConfig+0x958>)
 800b3b2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b3b6:	bf00      	nop
 800b3b8:	0800b491 	.word	0x0800b491
 800b3bc:	0800b489 	.word	0x0800b489
 800b3c0:	0800b489 	.word	0x0800b489
 800b3c4:	0800b489 	.word	0x0800b489
 800b3c8:	0800b489 	.word	0x0800b489
 800b3cc:	0800b489 	.word	0x0800b489
 800b3d0:	0800b489 	.word	0x0800b489
 800b3d4:	0800b489 	.word	0x0800b489
 800b3d8:	0800b45d 	.word	0x0800b45d
 800b3dc:	0800b489 	.word	0x0800b489
 800b3e0:	0800b489 	.word	0x0800b489
 800b3e4:	0800b489 	.word	0x0800b489
 800b3e8:	0800b489 	.word	0x0800b489
 800b3ec:	0800b489 	.word	0x0800b489
 800b3f0:	0800b489 	.word	0x0800b489
 800b3f4:	0800b489 	.word	0x0800b489
 800b3f8:	0800b473 	.word	0x0800b473
 800b3fc:	0800b489 	.word	0x0800b489
 800b400:	0800b489 	.word	0x0800b489
 800b404:	0800b489 	.word	0x0800b489
 800b408:	0800b489 	.word	0x0800b489
 800b40c:	0800b489 	.word	0x0800b489
 800b410:	0800b489 	.word	0x0800b489
 800b414:	0800b489 	.word	0x0800b489
 800b418:	0800b491 	.word	0x0800b491
 800b41c:	0800b489 	.word	0x0800b489
 800b420:	0800b489 	.word	0x0800b489
 800b424:	0800b489 	.word	0x0800b489
 800b428:	0800b489 	.word	0x0800b489
 800b42c:	0800b489 	.word	0x0800b489
 800b430:	0800b489 	.word	0x0800b489
 800b434:	0800b489 	.word	0x0800b489
 800b438:	0800b491 	.word	0x0800b491
 800b43c:	0800b489 	.word	0x0800b489
 800b440:	0800b489 	.word	0x0800b489
 800b444:	0800b489 	.word	0x0800b489
 800b448:	0800b489 	.word	0x0800b489
 800b44c:	0800b489 	.word	0x0800b489
 800b450:	0800b489 	.word	0x0800b489
 800b454:	0800b489 	.word	0x0800b489
 800b458:	0800b491 	.word	0x0800b491
      case RCC_USART16CLKSOURCE_PCLK2: /* CD/D2 PCLK2 as clock source for USART1/6 */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      case RCC_USART16CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART1/6 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800b45c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800b460:	3308      	adds	r3, #8
 800b462:	2101      	movs	r1, #1
 800b464:	4618      	mov	r0, r3
 800b466:	f001 feeb 	bl	800d240 <RCCEx_PLL2_Config>
 800b46a:	4603      	mov	r3, r0
 800b46c:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 800b470:	e00f      	b.n	800b492 <HAL_RCCEx_PeriphCLKConfig+0xa32>

      case RCC_USART16CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART1/6 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800b472:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800b476:	3328      	adds	r3, #40	; 0x28
 800b478:	2101      	movs	r1, #1
 800b47a:	4618      	mov	r0, r3
 800b47c:	f001 ff92 	bl	800d3a4 <RCCEx_PLL3_Config>
 800b480:	4603      	mov	r3, r0
 800b482:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 800b486:	e004      	b.n	800b492 <HAL_RCCEx_PeriphCLKConfig+0xa32>
        /* LSE,  oscillator is used as source of USART1/6 clock */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800b488:	2301      	movs	r3, #1
 800b48a:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 800b48e:	e000      	b.n	800b492 <HAL_RCCEx_PeriphCLKConfig+0xa32>
        break;
 800b490:	bf00      	nop
    }

    if (ret == HAL_OK)
 800b492:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800b496:	2b00      	cmp	r3, #0
 800b498:	d10a      	bne.n	800b4b0 <HAL_RCCEx_PeriphCLKConfig+0xa50>
    {
      /* Set the source of USART1/6 clock */
      __HAL_RCC_USART16_CONFIG(PeriphClkInit->Usart16ClockSelection);
 800b49a:	4bbf      	ldr	r3, [pc, #764]	; (800b798 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 800b49c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800b49e:	f023 0138 	bic.w	r1, r3, #56	; 0x38
 800b4a2:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800b4a6:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800b4a8:	4abb      	ldr	r2, [pc, #748]	; (800b798 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 800b4aa:	430b      	orrs	r3, r1
 800b4ac:	6553      	str	r3, [r2, #84]	; 0x54
 800b4ae:	e003      	b.n	800b4b8 <HAL_RCCEx_PeriphCLKConfig+0xa58>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800b4b0:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800b4b4:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*-------------------------- USART2/3/4/5/7/8 Configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
 800b4b8:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800b4bc:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b4c0:	f002 0302 	and.w	r3, r2, #2
 800b4c4:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 800b4c8:	2300      	movs	r3, #0
 800b4ca:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
 800b4ce:	e9d7 122e 	ldrd	r1, r2, [r7, #184]	; 0xb8
 800b4d2:	460b      	mov	r3, r1
 800b4d4:	4313      	orrs	r3, r2
 800b4d6:	d041      	beq.n	800b55c <HAL_RCCEx_PeriphCLKConfig+0xafc>
  {
    switch (PeriphClkInit->Usart234578ClockSelection)
 800b4d8:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800b4dc:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800b4de:	2b05      	cmp	r3, #5
 800b4e0:	d824      	bhi.n	800b52c <HAL_RCCEx_PeriphCLKConfig+0xacc>
 800b4e2:	a201      	add	r2, pc, #4	; (adr r2, 800b4e8 <HAL_RCCEx_PeriphCLKConfig+0xa88>)
 800b4e4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b4e8:	0800b535 	.word	0x0800b535
 800b4ec:	0800b501 	.word	0x0800b501
 800b4f0:	0800b517 	.word	0x0800b517
 800b4f4:	0800b535 	.word	0x0800b535
 800b4f8:	0800b535 	.word	0x0800b535
 800b4fc:	0800b535 	.word	0x0800b535
      case RCC_USART234578CLKSOURCE_PCLK1: /* CD/D2 PCLK1 as clock source for USART2/3/4/5/7/8 */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      case RCC_USART234578CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800b500:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800b504:	3308      	adds	r3, #8
 800b506:	2101      	movs	r1, #1
 800b508:	4618      	mov	r0, r3
 800b50a:	f001 fe99 	bl	800d240 <RCCEx_PLL2_Config>
 800b50e:	4603      	mov	r3, r0
 800b510:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 800b514:	e00f      	b.n	800b536 <HAL_RCCEx_PeriphCLKConfig+0xad6>

      case RCC_USART234578CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800b516:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800b51a:	3328      	adds	r3, #40	; 0x28
 800b51c:	2101      	movs	r1, #1
 800b51e:	4618      	mov	r0, r3
 800b520:	f001 ff40 	bl	800d3a4 <RCCEx_PLL3_Config>
 800b524:	4603      	mov	r3, r0
 800b526:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 800b52a:	e004      	b.n	800b536 <HAL_RCCEx_PeriphCLKConfig+0xad6>
        /* LSE,  oscillator is used as source of USART2/3/4/5/7/8 clock */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800b52c:	2301      	movs	r3, #1
 800b52e:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 800b532:	e000      	b.n	800b536 <HAL_RCCEx_PeriphCLKConfig+0xad6>
        break;
 800b534:	bf00      	nop
    }

    if (ret == HAL_OK)
 800b536:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800b53a:	2b00      	cmp	r3, #0
 800b53c:	d10a      	bne.n	800b554 <HAL_RCCEx_PeriphCLKConfig+0xaf4>
    {
      /* Set the source of USART2/3/4/5/7/8 clock */
      __HAL_RCC_USART234578_CONFIG(PeriphClkInit->Usart234578ClockSelection);
 800b53e:	4b96      	ldr	r3, [pc, #600]	; (800b798 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 800b540:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800b542:	f023 0107 	bic.w	r1, r3, #7
 800b546:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800b54a:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800b54c:	4a92      	ldr	r2, [pc, #584]	; (800b798 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 800b54e:	430b      	orrs	r3, r1
 800b550:	6553      	str	r3, [r2, #84]	; 0x54
 800b552:	e003      	b.n	800b55c <HAL_RCCEx_PeriphCLKConfig+0xafc>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800b554:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800b558:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*-------------------------- LPUART1 Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 800b55c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800b560:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b564:	f002 0304 	and.w	r3, r2, #4
 800b568:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 800b56c:	2300      	movs	r3, #0
 800b56e:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 800b572:	e9d7 122c 	ldrd	r1, r2, [r7, #176]	; 0xb0
 800b576:	460b      	mov	r3, r1
 800b578:	4313      	orrs	r3, r2
 800b57a:	d044      	beq.n	800b606 <HAL_RCCEx_PeriphCLKConfig+0xba6>
  {
    switch (PeriphClkInit->Lpuart1ClockSelection)
 800b57c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800b580:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800b584:	2b05      	cmp	r3, #5
 800b586:	d825      	bhi.n	800b5d4 <HAL_RCCEx_PeriphCLKConfig+0xb74>
 800b588:	a201      	add	r2, pc, #4	; (adr r2, 800b590 <HAL_RCCEx_PeriphCLKConfig+0xb30>)
 800b58a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b58e:	bf00      	nop
 800b590:	0800b5dd 	.word	0x0800b5dd
 800b594:	0800b5a9 	.word	0x0800b5a9
 800b598:	0800b5bf 	.word	0x0800b5bf
 800b59c:	0800b5dd 	.word	0x0800b5dd
 800b5a0:	0800b5dd 	.word	0x0800b5dd
 800b5a4:	0800b5dd 	.word	0x0800b5dd
      case RCC_LPUART1CLKSOURCE_PCLK4: /* SRD/D3 PCLK1 (PCLK4) as clock source for LPUART1 */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPUART1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPUART1 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800b5a8:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800b5ac:	3308      	adds	r3, #8
 800b5ae:	2101      	movs	r1, #1
 800b5b0:	4618      	mov	r0, r3
 800b5b2:	f001 fe45 	bl	800d240 <RCCEx_PLL2_Config>
 800b5b6:	4603      	mov	r3, r0
 800b5b8:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 800b5bc:	e00f      	b.n	800b5de <HAL_RCCEx_PeriphCLKConfig+0xb7e>

      case RCC_LPUART1CLKSOURCE_PLL3: /* PLL3 is used as clock source for LPUART1 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800b5be:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800b5c2:	3328      	adds	r3, #40	; 0x28
 800b5c4:	2101      	movs	r1, #1
 800b5c6:	4618      	mov	r0, r3
 800b5c8:	f001 feec 	bl	800d3a4 <RCCEx_PLL3_Config>
 800b5cc:	4603      	mov	r3, r0
 800b5ce:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 800b5d2:	e004      	b.n	800b5de <HAL_RCCEx_PeriphCLKConfig+0xb7e>
        /* LSE,  oscillator is used as source of LPUART1 clock */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800b5d4:	2301      	movs	r3, #1
 800b5d6:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 800b5da:	e000      	b.n	800b5de <HAL_RCCEx_PeriphCLKConfig+0xb7e>
        break;
 800b5dc:	bf00      	nop
    }

    if (ret == HAL_OK)
 800b5de:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800b5e2:	2b00      	cmp	r3, #0
 800b5e4:	d10b      	bne.n	800b5fe <HAL_RCCEx_PeriphCLKConfig+0xb9e>
    {
      /* Set the source of LPUART1 clock */
      __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 800b5e6:	4b6c      	ldr	r3, [pc, #432]	; (800b798 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 800b5e8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800b5ea:	f023 0107 	bic.w	r1, r3, #7
 800b5ee:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800b5f2:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800b5f6:	4a68      	ldr	r2, [pc, #416]	; (800b798 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 800b5f8:	430b      	orrs	r3, r1
 800b5fa:	6593      	str	r3, [r2, #88]	; 0x58
 800b5fc:	e003      	b.n	800b606 <HAL_RCCEx_PeriphCLKConfig+0xba6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800b5fe:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800b602:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*---------------------------- LPTIM1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 800b606:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800b60a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b60e:	f002 0320 	and.w	r3, r2, #32
 800b612:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 800b616:	2300      	movs	r3, #0
 800b618:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 800b61c:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 800b620:	460b      	mov	r3, r1
 800b622:	4313      	orrs	r3, r2
 800b624:	d055      	beq.n	800b6d2 <HAL_RCCEx_PeriphCLKConfig+0xc72>
  {
    switch (PeriphClkInit->Lptim1ClockSelection)
 800b626:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800b62a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800b62e:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800b632:	d033      	beq.n	800b69c <HAL_RCCEx_PeriphCLKConfig+0xc3c>
 800b634:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800b638:	d82c      	bhi.n	800b694 <HAL_RCCEx_PeriphCLKConfig+0xc34>
 800b63a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800b63e:	d02f      	beq.n	800b6a0 <HAL_RCCEx_PeriphCLKConfig+0xc40>
 800b640:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800b644:	d826      	bhi.n	800b694 <HAL_RCCEx_PeriphCLKConfig+0xc34>
 800b646:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 800b64a:	d02b      	beq.n	800b6a4 <HAL_RCCEx_PeriphCLKConfig+0xc44>
 800b64c:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 800b650:	d820      	bhi.n	800b694 <HAL_RCCEx_PeriphCLKConfig+0xc34>
 800b652:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800b656:	d012      	beq.n	800b67e <HAL_RCCEx_PeriphCLKConfig+0xc1e>
 800b658:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800b65c:	d81a      	bhi.n	800b694 <HAL_RCCEx_PeriphCLKConfig+0xc34>
 800b65e:	2b00      	cmp	r3, #0
 800b660:	d022      	beq.n	800b6a8 <HAL_RCCEx_PeriphCLKConfig+0xc48>
 800b662:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800b666:	d115      	bne.n	800b694 <HAL_RCCEx_PeriphCLKConfig+0xc34>
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800b668:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800b66c:	3308      	adds	r3, #8
 800b66e:	2100      	movs	r1, #0
 800b670:	4618      	mov	r0, r3
 800b672:	f001 fde5 	bl	800d240 <RCCEx_PLL2_Config>
 800b676:	4603      	mov	r3, r0
 800b678:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 800b67c:	e015      	b.n	800b6aa <HAL_RCCEx_PeriphCLKConfig+0xc4a>

      case RCC_LPTIM1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800b67e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800b682:	3328      	adds	r3, #40	; 0x28
 800b684:	2102      	movs	r1, #2
 800b686:	4618      	mov	r0, r3
 800b688:	f001 fe8c 	bl	800d3a4 <RCCEx_PLL3_Config>
 800b68c:	4603      	mov	r3, r0
 800b68e:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 800b692:	e00a      	b.n	800b6aa <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM1 clock */
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800b694:	2301      	movs	r3, #1
 800b696:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 800b69a:	e006      	b.n	800b6aa <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 800b69c:	bf00      	nop
 800b69e:	e004      	b.n	800b6aa <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 800b6a0:	bf00      	nop
 800b6a2:	e002      	b.n	800b6aa <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 800b6a4:	bf00      	nop
 800b6a6:	e000      	b.n	800b6aa <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 800b6a8:	bf00      	nop
    }

    if (ret == HAL_OK)
 800b6aa:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800b6ae:	2b00      	cmp	r3, #0
 800b6b0:	d10b      	bne.n	800b6ca <HAL_RCCEx_PeriphCLKConfig+0xc6a>
    {
      /* Set the source of LPTIM1 clock*/
      __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 800b6b2:	4b39      	ldr	r3, [pc, #228]	; (800b798 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 800b6b4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800b6b6:	f023 41e0 	bic.w	r1, r3, #1879048192	; 0x70000000
 800b6ba:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800b6be:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800b6c2:	4a35      	ldr	r2, [pc, #212]	; (800b798 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 800b6c4:	430b      	orrs	r3, r1
 800b6c6:	6553      	str	r3, [r2, #84]	; 0x54
 800b6c8:	e003      	b.n	800b6d2 <HAL_RCCEx_PeriphCLKConfig+0xc72>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800b6ca:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800b6ce:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*---------------------------- LPTIM2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 800b6d2:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800b6d6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b6da:	f002 0340 	and.w	r3, r2, #64	; 0x40
 800b6de:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 800b6e2:	2300      	movs	r3, #0
 800b6e4:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 800b6e8:	e9d7 1228 	ldrd	r1, r2, [r7, #160]	; 0xa0
 800b6ec:	460b      	mov	r3, r1
 800b6ee:	4313      	orrs	r3, r2
 800b6f0:	d058      	beq.n	800b7a4 <HAL_RCCEx_PeriphCLKConfig+0xd44>
  {
    switch (PeriphClkInit->Lptim2ClockSelection)
 800b6f2:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800b6f6:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800b6fa:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 800b6fe:	d033      	beq.n	800b768 <HAL_RCCEx_PeriphCLKConfig+0xd08>
 800b700:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 800b704:	d82c      	bhi.n	800b760 <HAL_RCCEx_PeriphCLKConfig+0xd00>
 800b706:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800b70a:	d02f      	beq.n	800b76c <HAL_RCCEx_PeriphCLKConfig+0xd0c>
 800b70c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800b710:	d826      	bhi.n	800b760 <HAL_RCCEx_PeriphCLKConfig+0xd00>
 800b712:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800b716:	d02b      	beq.n	800b770 <HAL_RCCEx_PeriphCLKConfig+0xd10>
 800b718:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800b71c:	d820      	bhi.n	800b760 <HAL_RCCEx_PeriphCLKConfig+0xd00>
 800b71e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800b722:	d012      	beq.n	800b74a <HAL_RCCEx_PeriphCLKConfig+0xcea>
 800b724:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800b728:	d81a      	bhi.n	800b760 <HAL_RCCEx_PeriphCLKConfig+0xd00>
 800b72a:	2b00      	cmp	r3, #0
 800b72c:	d022      	beq.n	800b774 <HAL_RCCEx_PeriphCLKConfig+0xd14>
 800b72e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800b732:	d115      	bne.n	800b760 <HAL_RCCEx_PeriphCLKConfig+0xd00>
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM2CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800b734:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800b738:	3308      	adds	r3, #8
 800b73a:	2100      	movs	r1, #0
 800b73c:	4618      	mov	r0, r3
 800b73e:	f001 fd7f 	bl	800d240 <RCCEx_PLL2_Config>
 800b742:	4603      	mov	r3, r0
 800b744:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 800b748:	e015      	b.n	800b776 <HAL_RCCEx_PeriphCLKConfig+0xd16>

      case RCC_LPTIM2CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800b74a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800b74e:	3328      	adds	r3, #40	; 0x28
 800b750:	2102      	movs	r1, #2
 800b752:	4618      	mov	r0, r3
 800b754:	f001 fe26 	bl	800d3a4 <RCCEx_PLL3_Config>
 800b758:	4603      	mov	r3, r0
 800b75a:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 800b75e:	e00a      	b.n	800b776 <HAL_RCCEx_PeriphCLKConfig+0xd16>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM2 clock */
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800b760:	2301      	movs	r3, #1
 800b762:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 800b766:	e006      	b.n	800b776 <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 800b768:	bf00      	nop
 800b76a:	e004      	b.n	800b776 <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 800b76c:	bf00      	nop
 800b76e:	e002      	b.n	800b776 <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 800b770:	bf00      	nop
 800b772:	e000      	b.n	800b776 <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 800b774:	bf00      	nop
    }

    if (ret == HAL_OK)
 800b776:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800b77a:	2b00      	cmp	r3, #0
 800b77c:	d10e      	bne.n	800b79c <HAL_RCCEx_PeriphCLKConfig+0xd3c>
    {
      /* Set the source of LPTIM2 clock*/
      __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 800b77e:	4b06      	ldr	r3, [pc, #24]	; (800b798 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 800b780:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800b782:	f423 51e0 	bic.w	r1, r3, #7168	; 0x1c00
 800b786:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800b78a:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800b78e:	4a02      	ldr	r2, [pc, #8]	; (800b798 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 800b790:	430b      	orrs	r3, r1
 800b792:	6593      	str	r3, [r2, #88]	; 0x58
 800b794:	e006      	b.n	800b7a4 <HAL_RCCEx_PeriphCLKConfig+0xd44>
 800b796:	bf00      	nop
 800b798:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 800b79c:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800b7a0:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*---------------------------- LPTIM345 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM345) == RCC_PERIPHCLK_LPTIM345)
 800b7a4:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800b7a8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b7ac:	f002 0380 	and.w	r3, r2, #128	; 0x80
 800b7b0:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 800b7b4:	2300      	movs	r3, #0
 800b7b6:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 800b7ba:	e9d7 1226 	ldrd	r1, r2, [r7, #152]	; 0x98
 800b7be:	460b      	mov	r3, r1
 800b7c0:	4313      	orrs	r3, r2
 800b7c2:	d055      	beq.n	800b870 <HAL_RCCEx_PeriphCLKConfig+0xe10>
  {
    switch (PeriphClkInit->Lptim345ClockSelection)
 800b7c4:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800b7c8:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 800b7cc:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 800b7d0:	d033      	beq.n	800b83a <HAL_RCCEx_PeriphCLKConfig+0xdda>
 800b7d2:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 800b7d6:	d82c      	bhi.n	800b832 <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 800b7d8:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800b7dc:	d02f      	beq.n	800b83e <HAL_RCCEx_PeriphCLKConfig+0xdde>
 800b7de:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800b7e2:	d826      	bhi.n	800b832 <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 800b7e4:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 800b7e8:	d02b      	beq.n	800b842 <HAL_RCCEx_PeriphCLKConfig+0xde2>
 800b7ea:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 800b7ee:	d820      	bhi.n	800b832 <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 800b7f0:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800b7f4:	d012      	beq.n	800b81c <HAL_RCCEx_PeriphCLKConfig+0xdbc>
 800b7f6:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800b7fa:	d81a      	bhi.n	800b832 <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 800b7fc:	2b00      	cmp	r3, #0
 800b7fe:	d022      	beq.n	800b846 <HAL_RCCEx_PeriphCLKConfig+0xde6>
 800b800:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800b804:	d115      	bne.n	800b832 <HAL_RCCEx_PeriphCLKConfig+0xdd2>
      case RCC_LPTIM345CLKSOURCE_PCLK4:      /* SRD/D3 PCLK1 (PCLK4) as clock source for LPTIM3/4/5 */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM345CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800b806:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800b80a:	3308      	adds	r3, #8
 800b80c:	2100      	movs	r1, #0
 800b80e:	4618      	mov	r0, r3
 800b810:	f001 fd16 	bl	800d240 <RCCEx_PLL2_Config>
 800b814:	4603      	mov	r3, r0
 800b816:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 800b81a:	e015      	b.n	800b848 <HAL_RCCEx_PeriphCLKConfig+0xde8>

      case RCC_LPTIM345CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800b81c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800b820:	3328      	adds	r3, #40	; 0x28
 800b822:	2102      	movs	r1, #2
 800b824:	4618      	mov	r0, r3
 800b826:	f001 fdbd 	bl	800d3a4 <RCCEx_PLL3_Config>
 800b82a:	4603      	mov	r3, r0
 800b82c:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 800b830:	e00a      	b.n	800b848 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM3/4/5 clock */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800b832:	2301      	movs	r3, #1
 800b834:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 800b838:	e006      	b.n	800b848 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 800b83a:	bf00      	nop
 800b83c:	e004      	b.n	800b848 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 800b83e:	bf00      	nop
 800b840:	e002      	b.n	800b848 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 800b842:	bf00      	nop
 800b844:	e000      	b.n	800b848 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 800b846:	bf00      	nop
    }

    if (ret == HAL_OK)
 800b848:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800b84c:	2b00      	cmp	r3, #0
 800b84e:	d10b      	bne.n	800b868 <HAL_RCCEx_PeriphCLKConfig+0xe08>
    {
      /* Set the source of LPTIM3/4/5 clock */
      __HAL_RCC_LPTIM345_CONFIG(PeriphClkInit->Lptim345ClockSelection);
 800b850:	4ba1      	ldr	r3, [pc, #644]	; (800bad8 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800b852:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800b854:	f423 4160 	bic.w	r1, r3, #57344	; 0xe000
 800b858:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800b85c:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 800b860:	4a9d      	ldr	r2, [pc, #628]	; (800bad8 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800b862:	430b      	orrs	r3, r1
 800b864:	6593      	str	r3, [r2, #88]	; 0x58
 800b866:	e003      	b.n	800b870 <HAL_RCCEx_PeriphCLKConfig+0xe10>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800b868:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800b86c:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126

    __HAL_RCC_I2C1235_CONFIG(PeriphClkInit->I2c1235ClockSelection);

  }
#else
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C123) == RCC_PERIPHCLK_I2C123)
 800b870:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800b874:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b878:	f002 0308 	and.w	r3, r2, #8
 800b87c:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 800b880:	2300      	movs	r3, #0
 800b882:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 800b886:	e9d7 1224 	ldrd	r1, r2, [r7, #144]	; 0x90
 800b88a:	460b      	mov	r3, r1
 800b88c:	4313      	orrs	r3, r2
 800b88e:	d01e      	beq.n	800b8ce <HAL_RCCEx_PeriphCLKConfig+0xe6e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C123CLKSOURCE(PeriphClkInit->I2c123ClockSelection));

    if ((PeriphClkInit->I2c123ClockSelection) == RCC_I2C123CLKSOURCE_PLL3)
 800b890:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800b894:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800b898:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800b89c:	d10c      	bne.n	800b8b8 <HAL_RCCEx_PeriphCLKConfig+0xe58>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 800b89e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800b8a2:	3328      	adds	r3, #40	; 0x28
 800b8a4:	2102      	movs	r1, #2
 800b8a6:	4618      	mov	r0, r3
 800b8a8:	f001 fd7c 	bl	800d3a4 <RCCEx_PLL3_Config>
 800b8ac:	4603      	mov	r3, r0
 800b8ae:	2b00      	cmp	r3, #0
 800b8b0:	d002      	beq.n	800b8b8 <HAL_RCCEx_PeriphCLKConfig+0xe58>
      {
        status = HAL_ERROR;
 800b8b2:	2301      	movs	r3, #1
 800b8b4:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
      }
    }

    __HAL_RCC_I2C123_CONFIG(PeriphClkInit->I2c123ClockSelection);
 800b8b8:	4b87      	ldr	r3, [pc, #540]	; (800bad8 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800b8ba:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800b8bc:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800b8c0:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800b8c4:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800b8c8:	4a83      	ldr	r2, [pc, #524]	; (800bad8 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800b8ca:	430b      	orrs	r3, r1
 800b8cc:	6553      	str	r3, [r2, #84]	; 0x54

  }
#endif /* I2C5 */

  /*------------------------------ I2C4 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 800b8ce:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800b8d2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b8d6:	f002 0310 	and.w	r3, r2, #16
 800b8da:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 800b8de:	2300      	movs	r3, #0
 800b8e0:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 800b8e4:	e9d7 1222 	ldrd	r1, r2, [r7, #136]	; 0x88
 800b8e8:	460b      	mov	r3, r1
 800b8ea:	4313      	orrs	r3, r2
 800b8ec:	d01e      	beq.n	800b92c <HAL_RCCEx_PeriphCLKConfig+0xecc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    if ((PeriphClkInit->I2c4ClockSelection) == RCC_I2C4CLKSOURCE_PLL3)
 800b8ee:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800b8f2:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800b8f6:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800b8fa:	d10c      	bne.n	800b916 <HAL_RCCEx_PeriphCLKConfig+0xeb6>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 800b8fc:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800b900:	3328      	adds	r3, #40	; 0x28
 800b902:	2102      	movs	r1, #2
 800b904:	4618      	mov	r0, r3
 800b906:	f001 fd4d 	bl	800d3a4 <RCCEx_PLL3_Config>
 800b90a:	4603      	mov	r3, r0
 800b90c:	2b00      	cmp	r3, #0
 800b90e:	d002      	beq.n	800b916 <HAL_RCCEx_PeriphCLKConfig+0xeb6>
      {
        status = HAL_ERROR;
 800b910:	2301      	movs	r3, #1
 800b912:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
      }
    }

    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 800b916:	4b70      	ldr	r3, [pc, #448]	; (800bad8 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800b918:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800b91a:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 800b91e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800b922:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800b926:	4a6c      	ldr	r2, [pc, #432]	; (800bad8 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800b928:	430b      	orrs	r3, r1
 800b92a:	6593      	str	r3, [r2, #88]	; 0x58

  }

  /*---------------------------- ADC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 800b92c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800b930:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b934:	f402 2300 	and.w	r3, r2, #524288	; 0x80000
 800b938:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 800b93c:	2300      	movs	r3, #0
 800b93e:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 800b942:	e9d7 1220 	ldrd	r1, r2, [r7, #128]	; 0x80
 800b946:	460b      	mov	r3, r1
 800b948:	4313      	orrs	r3, r2
 800b94a:	d03e      	beq.n	800b9ca <HAL_RCCEx_PeriphCLKConfig+0xf6a>
  {
    switch (PeriphClkInit->AdcClockSelection)
 800b94c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800b950:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 800b954:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800b958:	d022      	beq.n	800b9a0 <HAL_RCCEx_PeriphCLKConfig+0xf40>
 800b95a:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800b95e:	d81b      	bhi.n	800b998 <HAL_RCCEx_PeriphCLKConfig+0xf38>
 800b960:	2b00      	cmp	r3, #0
 800b962:	d003      	beq.n	800b96c <HAL_RCCEx_PeriphCLKConfig+0xf0c>
 800b964:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800b968:	d00b      	beq.n	800b982 <HAL_RCCEx_PeriphCLKConfig+0xf22>
 800b96a:	e015      	b.n	800b998 <HAL_RCCEx_PeriphCLKConfig+0xf38>
    {

      case RCC_ADCCLKSOURCE_PLL2: /* PLL2 is used as clock source for ADC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800b96c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800b970:	3308      	adds	r3, #8
 800b972:	2100      	movs	r1, #0
 800b974:	4618      	mov	r0, r3
 800b976:	f001 fc63 	bl	800d240 <RCCEx_PLL2_Config>
 800b97a:	4603      	mov	r3, r0
 800b97c:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* ADC clock source configuration done later after clock selection check */
        break;
 800b980:	e00f      	b.n	800b9a2 <HAL_RCCEx_PeriphCLKConfig+0xf42>

      case RCC_ADCCLKSOURCE_PLL3:  /* PLL3 is used as clock source for ADC*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800b982:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800b986:	3328      	adds	r3, #40	; 0x28
 800b988:	2102      	movs	r1, #2
 800b98a:	4618      	mov	r0, r3
 800b98c:	f001 fd0a 	bl	800d3a4 <RCCEx_PLL3_Config>
 800b990:	4603      	mov	r3, r0
 800b992:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* ADC clock source configuration done later after clock selection check */
        break;
 800b996:	e004      	b.n	800b9a2 <HAL_RCCEx_PeriphCLKConfig+0xf42>
        /* HSI, HSE, or CSI oscillator is used as source of ADC clock */
        /* ADC clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800b998:	2301      	movs	r3, #1
 800b99a:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 800b99e:	e000      	b.n	800b9a2 <HAL_RCCEx_PeriphCLKConfig+0xf42>
        break;
 800b9a0:	bf00      	nop
    }

    if (ret == HAL_OK)
 800b9a2:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800b9a6:	2b00      	cmp	r3, #0
 800b9a8:	d10b      	bne.n	800b9c2 <HAL_RCCEx_PeriphCLKConfig+0xf62>
    {
      /* Set the source of ADC clock*/
      __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 800b9aa:	4b4b      	ldr	r3, [pc, #300]	; (800bad8 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800b9ac:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800b9ae:	f423 3140 	bic.w	r1, r3, #196608	; 0x30000
 800b9b2:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800b9b6:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 800b9ba:	4a47      	ldr	r2, [pc, #284]	; (800bad8 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800b9bc:	430b      	orrs	r3, r1
 800b9be:	6593      	str	r3, [r2, #88]	; 0x58
 800b9c0:	e003      	b.n	800b9ca <HAL_RCCEx_PeriphCLKConfig+0xf6a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800b9c2:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800b9c6:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*------------------------------ USB Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 800b9ca:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800b9ce:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b9d2:	f402 2380 	and.w	r3, r2, #262144	; 0x40000
 800b9d6:	67bb      	str	r3, [r7, #120]	; 0x78
 800b9d8:	2300      	movs	r3, #0
 800b9da:	67fb      	str	r3, [r7, #124]	; 0x7c
 800b9dc:	e9d7 121e 	ldrd	r1, r2, [r7, #120]	; 0x78
 800b9e0:	460b      	mov	r3, r1
 800b9e2:	4313      	orrs	r3, r2
 800b9e4:	d03b      	beq.n	800ba5e <HAL_RCCEx_PeriphCLKConfig+0xffe>
  {

    switch (PeriphClkInit->UsbClockSelection)
 800b9e6:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800b9ea:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800b9ee:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 800b9f2:	d01f      	beq.n	800ba34 <HAL_RCCEx_PeriphCLKConfig+0xfd4>
 800b9f4:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 800b9f8:	d818      	bhi.n	800ba2c <HAL_RCCEx_PeriphCLKConfig+0xfcc>
 800b9fa:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800b9fe:	d003      	beq.n	800ba08 <HAL_RCCEx_PeriphCLKConfig+0xfa8>
 800ba00:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800ba04:	d007      	beq.n	800ba16 <HAL_RCCEx_PeriphCLKConfig+0xfb6>
 800ba06:	e011      	b.n	800ba2c <HAL_RCCEx_PeriphCLKConfig+0xfcc>
    {
      case RCC_USBCLKSOURCE_PLL:      /* PLL is used as clock source for USB*/
        /* Enable USB Clock output generated form System USB . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800ba08:	4b33      	ldr	r3, [pc, #204]	; (800bad8 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800ba0a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ba0c:	4a32      	ldr	r2, [pc, #200]	; (800bad8 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800ba0e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800ba12:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* USB clock source configuration done later after clock selection check */
        break;
 800ba14:	e00f      	b.n	800ba36 <HAL_RCCEx_PeriphCLKConfig+0xfd6>

      case RCC_USBCLKSOURCE_PLL3: /* PLL3 is used as clock source for USB*/

        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800ba16:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800ba1a:	3328      	adds	r3, #40	; 0x28
 800ba1c:	2101      	movs	r1, #1
 800ba1e:	4618      	mov	r0, r3
 800ba20:	f001 fcc0 	bl	800d3a4 <RCCEx_PLL3_Config>
 800ba24:	4603      	mov	r3, r0
 800ba26:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* USB clock source configuration done later after clock selection check */
        break;
 800ba2a:	e004      	b.n	800ba36 <HAL_RCCEx_PeriphCLKConfig+0xfd6>
        /* HSI48 oscillator is used as source of USB clock */
        /* USB clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800ba2c:	2301      	movs	r3, #1
 800ba2e:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 800ba32:	e000      	b.n	800ba36 <HAL_RCCEx_PeriphCLKConfig+0xfd6>
        break;
 800ba34:	bf00      	nop
    }

    if (ret == HAL_OK)
 800ba36:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800ba3a:	2b00      	cmp	r3, #0
 800ba3c:	d10b      	bne.n	800ba56 <HAL_RCCEx_PeriphCLKConfig+0xff6>
    {
      /* Set the source of USB clock*/
      __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 800ba3e:	4b26      	ldr	r3, [pc, #152]	; (800bad8 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800ba40:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800ba42:	f423 1140 	bic.w	r1, r3, #3145728	; 0x300000
 800ba46:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800ba4a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800ba4e:	4a22      	ldr	r2, [pc, #136]	; (800bad8 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800ba50:	430b      	orrs	r3, r1
 800ba52:	6553      	str	r3, [r2, #84]	; 0x54
 800ba54:	e003      	b.n	800ba5e <HAL_RCCEx_PeriphCLKConfig+0xffe>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800ba56:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800ba5a:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }

  }

  /*------------------------------------- SDMMC Configuration ------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == RCC_PERIPHCLK_SDMMC)
 800ba5e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800ba62:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ba66:	f402 3380 	and.w	r3, r2, #65536	; 0x10000
 800ba6a:	673b      	str	r3, [r7, #112]	; 0x70
 800ba6c:	2300      	movs	r3, #0
 800ba6e:	677b      	str	r3, [r7, #116]	; 0x74
 800ba70:	e9d7 121c 	ldrd	r1, r2, [r7, #112]	; 0x70
 800ba74:	460b      	mov	r3, r1
 800ba76:	4313      	orrs	r3, r2
 800ba78:	d034      	beq.n	800bae4 <HAL_RCCEx_PeriphCLKConfig+0x1084>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC(PeriphClkInit->SdmmcClockSelection));

    switch (PeriphClkInit->SdmmcClockSelection)
 800ba7a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800ba7e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800ba80:	2b00      	cmp	r3, #0
 800ba82:	d003      	beq.n	800ba8c <HAL_RCCEx_PeriphCLKConfig+0x102c>
 800ba84:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800ba88:	d007      	beq.n	800ba9a <HAL_RCCEx_PeriphCLKConfig+0x103a>
 800ba8a:	e011      	b.n	800bab0 <HAL_RCCEx_PeriphCLKConfig+0x1050>
    {
      case RCC_SDMMCCLKSOURCE_PLL:      /* PLL is used as clock source for SDMMC*/
        /* Enable SDMMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800ba8c:	4b12      	ldr	r3, [pc, #72]	; (800bad8 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800ba8e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ba90:	4a11      	ldr	r2, [pc, #68]	; (800bad8 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800ba92:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800ba96:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 800ba98:	e00e      	b.n	800bab8 <HAL_RCCEx_PeriphCLKConfig+0x1058>

      case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for SDMMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 800ba9a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800ba9e:	3308      	adds	r3, #8
 800baa0:	2102      	movs	r1, #2
 800baa2:	4618      	mov	r0, r3
 800baa4:	f001 fbcc 	bl	800d240 <RCCEx_PLL2_Config>
 800baa8:	4603      	mov	r3, r0
 800baaa:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 800baae:	e003      	b.n	800bab8 <HAL_RCCEx_PeriphCLKConfig+0x1058>

      default:
        ret = HAL_ERROR;
 800bab0:	2301      	movs	r3, #1
 800bab2:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 800bab6:	bf00      	nop
    }

    if (ret == HAL_OK)
 800bab8:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800babc:	2b00      	cmp	r3, #0
 800babe:	d10d      	bne.n	800badc <HAL_RCCEx_PeriphCLKConfig+0x107c>
    {
      /* Set the source of SDMMC clock*/
      __HAL_RCC_SDMMC_CONFIG(PeriphClkInit->SdmmcClockSelection);
 800bac0:	4b05      	ldr	r3, [pc, #20]	; (800bad8 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800bac2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800bac4:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 800bac8:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800bacc:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800bace:	4a02      	ldr	r2, [pc, #8]	; (800bad8 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800bad0:	430b      	orrs	r3, r1
 800bad2:	64d3      	str	r3, [r2, #76]	; 0x4c
 800bad4:	e006      	b.n	800bae4 <HAL_RCCEx_PeriphCLKConfig+0x1084>
 800bad6:	bf00      	nop
 800bad8:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 800badc:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800bae0:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

#if defined(LTDC)
  /*-------------------------------------- LTDC Configuration -----------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 800bae4:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800bae8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800baec:	f002 5300 	and.w	r3, r2, #536870912	; 0x20000000
 800baf0:	66bb      	str	r3, [r7, #104]	; 0x68
 800baf2:	2300      	movs	r3, #0
 800baf4:	66fb      	str	r3, [r7, #108]	; 0x6c
 800baf6:	e9d7 121a 	ldrd	r1, r2, [r7, #104]	; 0x68
 800bafa:	460b      	mov	r3, r1
 800bafc:	4313      	orrs	r3, r2
 800bafe:	d00c      	beq.n	800bb1a <HAL_RCCEx_PeriphCLKConfig+0x10ba>
  {
    if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 800bb00:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800bb04:	3328      	adds	r3, #40	; 0x28
 800bb06:	2102      	movs	r1, #2
 800bb08:	4618      	mov	r0, r3
 800bb0a:	f001 fc4b 	bl	800d3a4 <RCCEx_PLL3_Config>
 800bb0e:	4603      	mov	r3, r0
 800bb10:	2b00      	cmp	r3, #0
 800bb12:	d002      	beq.n	800bb1a <HAL_RCCEx_PeriphCLKConfig+0x10ba>
    {
      status = HAL_ERROR;
 800bb14:	2301      	movs	r3, #1
 800bb16:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }
#endif /* LTDC */

  /*------------------------------ RNG Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 800bb1a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800bb1e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bb22:	f402 3300 	and.w	r3, r2, #131072	; 0x20000
 800bb26:	663b      	str	r3, [r7, #96]	; 0x60
 800bb28:	2300      	movs	r3, #0
 800bb2a:	667b      	str	r3, [r7, #100]	; 0x64
 800bb2c:	e9d7 1218 	ldrd	r1, r2, [r7, #96]	; 0x60
 800bb30:	460b      	mov	r3, r1
 800bb32:	4313      	orrs	r3, r2
 800bb34:	d038      	beq.n	800bba8 <HAL_RCCEx_PeriphCLKConfig+0x1148>
  {

    switch (PeriphClkInit->RngClockSelection)
 800bb36:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800bb3a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800bb3e:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800bb42:	d018      	beq.n	800bb76 <HAL_RCCEx_PeriphCLKConfig+0x1116>
 800bb44:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800bb48:	d811      	bhi.n	800bb6e <HAL_RCCEx_PeriphCLKConfig+0x110e>
 800bb4a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800bb4e:	d014      	beq.n	800bb7a <HAL_RCCEx_PeriphCLKConfig+0x111a>
 800bb50:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800bb54:	d80b      	bhi.n	800bb6e <HAL_RCCEx_PeriphCLKConfig+0x110e>
 800bb56:	2b00      	cmp	r3, #0
 800bb58:	d011      	beq.n	800bb7e <HAL_RCCEx_PeriphCLKConfig+0x111e>
 800bb5a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800bb5e:	d106      	bne.n	800bb6e <HAL_RCCEx_PeriphCLKConfig+0x110e>
    {
      case RCC_RNGCLKSOURCE_PLL:     /* PLL is used as clock source for RNG*/
        /* Enable RNG Clock output generated form System RNG . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800bb60:	4bc3      	ldr	r3, [pc, #780]	; (800be70 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800bb62:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800bb64:	4ac2      	ldr	r2, [pc, #776]	; (800be70 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800bb66:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800bb6a:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* RNG clock source configuration done later after clock selection check */
        break;
 800bb6c:	e008      	b.n	800bb80 <HAL_RCCEx_PeriphCLKConfig+0x1120>
        /* HSI48 oscillator is used as source of RNG clock */
        /* RNG clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800bb6e:	2301      	movs	r3, #1
 800bb70:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 800bb74:	e004      	b.n	800bb80 <HAL_RCCEx_PeriphCLKConfig+0x1120>
        break;
 800bb76:	bf00      	nop
 800bb78:	e002      	b.n	800bb80 <HAL_RCCEx_PeriphCLKConfig+0x1120>
        break;
 800bb7a:	bf00      	nop
 800bb7c:	e000      	b.n	800bb80 <HAL_RCCEx_PeriphCLKConfig+0x1120>
        break;
 800bb7e:	bf00      	nop
    }

    if (ret == HAL_OK)
 800bb80:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800bb84:	2b00      	cmp	r3, #0
 800bb86:	d10b      	bne.n	800bba0 <HAL_RCCEx_PeriphCLKConfig+0x1140>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 800bb88:	4bb9      	ldr	r3, [pc, #740]	; (800be70 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800bb8a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800bb8c:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 800bb90:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800bb94:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800bb98:	4ab5      	ldr	r2, [pc, #724]	; (800be70 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800bb9a:	430b      	orrs	r3, r1
 800bb9c:	6553      	str	r3, [r2, #84]	; 0x54
 800bb9e:	e003      	b.n	800bba8 <HAL_RCCEx_PeriphCLKConfig+0x1148>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800bba0:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800bba4:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }

  }

  /*------------------------------ SWPMI1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 800bba8:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800bbac:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bbb0:	f402 1380 	and.w	r3, r2, #1048576	; 0x100000
 800bbb4:	65bb      	str	r3, [r7, #88]	; 0x58
 800bbb6:	2300      	movs	r3, #0
 800bbb8:	65fb      	str	r3, [r7, #92]	; 0x5c
 800bbba:	e9d7 1216 	ldrd	r1, r2, [r7, #88]	; 0x58
 800bbbe:	460b      	mov	r3, r1
 800bbc0:	4313      	orrs	r3, r2
 800bbc2:	d009      	beq.n	800bbd8 <HAL_RCCEx_PeriphCLKConfig+0x1178>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 interface clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 800bbc4:	4baa      	ldr	r3, [pc, #680]	; (800be70 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800bbc6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800bbc8:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
 800bbcc:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800bbd0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800bbd2:	4aa7      	ldr	r2, [pc, #668]	; (800be70 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800bbd4:	430b      	orrs	r3, r1
 800bbd6:	6513      	str	r3, [r2, #80]	; 0x50
  }
#if defined(HRTIM1)
  /*------------------------------ HRTIM1 clock Configuration ----------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_HRTIM1) == RCC_PERIPHCLK_HRTIM1)
 800bbd8:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800bbdc:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bbe0:	f002 5380 	and.w	r3, r2, #268435456	; 0x10000000
 800bbe4:	653b      	str	r3, [r7, #80]	; 0x50
 800bbe6:	2300      	movs	r3, #0
 800bbe8:	657b      	str	r3, [r7, #84]	; 0x54
 800bbea:	e9d7 1214 	ldrd	r1, r2, [r7, #80]	; 0x50
 800bbee:	460b      	mov	r3, r1
 800bbf0:	4313      	orrs	r3, r2
 800bbf2:	d00a      	beq.n	800bc0a <HAL_RCCEx_PeriphCLKConfig+0x11aa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HRTIM1CLKSOURCE(PeriphClkInit->Hrtim1ClockSelection));

    /* Configure the HRTIM1 clock source */
    __HAL_RCC_HRTIM1_CONFIG(PeriphClkInit->Hrtim1ClockSelection);
 800bbf4:	4b9e      	ldr	r3, [pc, #632]	; (800be70 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800bbf6:	691b      	ldr	r3, [r3, #16]
 800bbf8:	f423 4180 	bic.w	r1, r3, #16384	; 0x4000
 800bbfc:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800bc00:	f8d3 30b8 	ldr.w	r3, [r3, #184]	; 0xb8
 800bc04:	4a9a      	ldr	r2, [pc, #616]	; (800be70 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800bc06:	430b      	orrs	r3, r1
 800bc08:	6113      	str	r3, [r2, #16]
  }
#endif  /*HRTIM1*/
  /*------------------------------ DFSDM1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 800bc0a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800bc0e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bc12:	f402 1300 	and.w	r3, r2, #2097152	; 0x200000
 800bc16:	64bb      	str	r3, [r7, #72]	; 0x48
 800bc18:	2300      	movs	r3, #0
 800bc1a:	64fb      	str	r3, [r7, #76]	; 0x4c
 800bc1c:	e9d7 1212 	ldrd	r1, r2, [r7, #72]	; 0x48
 800bc20:	460b      	mov	r3, r1
 800bc22:	4313      	orrs	r3, r2
 800bc24:	d009      	beq.n	800bc3a <HAL_RCCEx_PeriphCLKConfig+0x11da>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 800bc26:	4b92      	ldr	r3, [pc, #584]	; (800be70 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800bc28:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800bc2a:	f023 7180 	bic.w	r1, r3, #16777216	; 0x1000000
 800bc2e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800bc32:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800bc34:	4a8e      	ldr	r2, [pc, #568]	; (800be70 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800bc36:	430b      	orrs	r3, r1
 800bc38:	6513      	str	r3, [r2, #80]	; 0x50
    __HAL_RCC_DFSDM2_CONFIG(PeriphClkInit->Dfsdm2ClockSelection);
  }
#endif  /* DFSDM2 */

  /*------------------------------------ TIM configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
 800bc3a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800bc3e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bc42:	f002 4380 	and.w	r3, r2, #1073741824	; 0x40000000
 800bc46:	643b      	str	r3, [r7, #64]	; 0x40
 800bc48:	2300      	movs	r3, #0
 800bc4a:	647b      	str	r3, [r7, #68]	; 0x44
 800bc4c:	e9d7 1210 	ldrd	r1, r2, [r7, #64]	; 0x40
 800bc50:	460b      	mov	r3, r1
 800bc52:	4313      	orrs	r3, r2
 800bc54:	d00e      	beq.n	800bc74 <HAL_RCCEx_PeriphCLKConfig+0x1214>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 800bc56:	4b86      	ldr	r3, [pc, #536]	; (800be70 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800bc58:	691b      	ldr	r3, [r3, #16]
 800bc5a:	4a85      	ldr	r2, [pc, #532]	; (800be70 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800bc5c:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 800bc60:	6113      	str	r3, [r2, #16]
 800bc62:	4b83      	ldr	r3, [pc, #524]	; (800be70 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800bc64:	6919      	ldr	r1, [r3, #16]
 800bc66:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800bc6a:	f8d3 30bc 	ldr.w	r3, [r3, #188]	; 0xbc
 800bc6e:	4a80      	ldr	r2, [pc, #512]	; (800be70 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800bc70:	430b      	orrs	r3, r1
 800bc72:	6113      	str	r3, [r2, #16]
  }

  /*------------------------------------ CKPER configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
 800bc74:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800bc78:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bc7c:	f002 4300 	and.w	r3, r2, #2147483648	; 0x80000000
 800bc80:	63bb      	str	r3, [r7, #56]	; 0x38
 800bc82:	2300      	movs	r3, #0
 800bc84:	63fb      	str	r3, [r7, #60]	; 0x3c
 800bc86:	e9d7 120e 	ldrd	r1, r2, [r7, #56]	; 0x38
 800bc8a:	460b      	mov	r3, r1
 800bc8c:	4313      	orrs	r3, r2
 800bc8e:	d009      	beq.n	800bca4 <HAL_RCCEx_PeriphCLKConfig+0x1244>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLKPSOURCE(PeriphClkInit->CkperClockSelection));

    /* Configure the CKPER clock source */
    __HAL_RCC_CLKP_CONFIG(PeriphClkInit->CkperClockSelection);
 800bc90:	4b77      	ldr	r3, [pc, #476]	; (800be70 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800bc92:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800bc94:	f023 5140 	bic.w	r1, r3, #805306368	; 0x30000000
 800bc98:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800bc9c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800bc9e:	4a74      	ldr	r2, [pc, #464]	; (800be70 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800bca0:	430b      	orrs	r3, r1
 800bca2:	64d3      	str	r3, [r2, #76]	; 0x4c
  }

  /*------------------------------ CEC Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 800bca4:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800bca8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bcac:	f402 0300 	and.w	r3, r2, #8388608	; 0x800000
 800bcb0:	633b      	str	r3, [r7, #48]	; 0x30
 800bcb2:	2300      	movs	r3, #0
 800bcb4:	637b      	str	r3, [r7, #52]	; 0x34
 800bcb6:	e9d7 120c 	ldrd	r1, r2, [r7, #48]	; 0x30
 800bcba:	460b      	mov	r3, r1
 800bcbc:	4313      	orrs	r3, r2
 800bcbe:	d00a      	beq.n	800bcd6 <HAL_RCCEx_PeriphCLKConfig+0x1276>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC interface clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 800bcc0:	4b6b      	ldr	r3, [pc, #428]	; (800be70 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800bcc2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800bcc4:	f423 0140 	bic.w	r1, r3, #12582912	; 0xc00000
 800bcc8:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800bccc:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800bcd0:	4a67      	ldr	r2, [pc, #412]	; (800be70 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800bcd2:	430b      	orrs	r3, r1
 800bcd4:	6553      	str	r3, [r2, #84]	; 0x54
  }

  /*---------------------------- PLL2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVP) == RCC_PERIPHCLK_PLL2_DIVP)
 800bcd6:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800bcda:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bcde:	2100      	movs	r1, #0
 800bce0:	62b9      	str	r1, [r7, #40]	; 0x28
 800bce2:	f003 0301 	and.w	r3, r3, #1
 800bce6:	62fb      	str	r3, [r7, #44]	; 0x2c
 800bce8:	e9d7 120a 	ldrd	r1, r2, [r7, #40]	; 0x28
 800bcec:	460b      	mov	r3, r1
 800bcee:	4313      	orrs	r3, r2
 800bcf0:	d011      	beq.n	800bd16 <HAL_RCCEx_PeriphCLKConfig+0x12b6>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800bcf2:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800bcf6:	3308      	adds	r3, #8
 800bcf8:	2100      	movs	r1, #0
 800bcfa:	4618      	mov	r0, r3
 800bcfc:	f001 faa0 	bl	800d240 <RCCEx_PLL2_Config>
 800bd00:	4603      	mov	r3, r0
 800bd02:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
    
    if (ret == HAL_OK)
 800bd06:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800bd0a:	2b00      	cmp	r3, #0
 800bd0c:	d003      	beq.n	800bd16 <HAL_RCCEx_PeriphCLKConfig+0x12b6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 800bd0e:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800bd12:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    } 
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVQ) == RCC_PERIPHCLK_PLL2_DIVQ)
 800bd16:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800bd1a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bd1e:	2100      	movs	r1, #0
 800bd20:	6239      	str	r1, [r7, #32]
 800bd22:	f003 0302 	and.w	r3, r3, #2
 800bd26:	627b      	str	r3, [r7, #36]	; 0x24
 800bd28:	e9d7 1208 	ldrd	r1, r2, [r7, #32]
 800bd2c:	460b      	mov	r3, r1
 800bd2e:	4313      	orrs	r3, r2
 800bd30:	d011      	beq.n	800bd56 <HAL_RCCEx_PeriphCLKConfig+0x12f6>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800bd32:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800bd36:	3308      	adds	r3, #8
 800bd38:	2101      	movs	r1, #1
 800bd3a:	4618      	mov	r0, r3
 800bd3c:	f001 fa80 	bl	800d240 <RCCEx_PLL2_Config>
 800bd40:	4603      	mov	r3, r0
 800bd42:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
    
    if (ret == HAL_OK)
 800bd46:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800bd4a:	2b00      	cmp	r3, #0
 800bd4c:	d003      	beq.n	800bd56 <HAL_RCCEx_PeriphCLKConfig+0x12f6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 800bd4e:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800bd52:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVR) == RCC_PERIPHCLK_PLL2_DIVR)
 800bd56:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800bd5a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bd5e:	2100      	movs	r1, #0
 800bd60:	61b9      	str	r1, [r7, #24]
 800bd62:	f003 0304 	and.w	r3, r3, #4
 800bd66:	61fb      	str	r3, [r7, #28]
 800bd68:	e9d7 1206 	ldrd	r1, r2, [r7, #24]
 800bd6c:	460b      	mov	r3, r1
 800bd6e:	4313      	orrs	r3, r2
 800bd70:	d011      	beq.n	800bd96 <HAL_RCCEx_PeriphCLKConfig+0x1336>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 800bd72:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800bd76:	3308      	adds	r3, #8
 800bd78:	2102      	movs	r1, #2
 800bd7a:	4618      	mov	r0, r3
 800bd7c:	f001 fa60 	bl	800d240 <RCCEx_PLL2_Config>
 800bd80:	4603      	mov	r3, r0
 800bd82:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
    
    if (ret == HAL_OK)
 800bd86:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800bd8a:	2b00      	cmp	r3, #0
 800bd8c:	d003      	beq.n	800bd96 <HAL_RCCEx_PeriphCLKConfig+0x1336>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 800bd8e:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800bd92:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }
  

  /*---------------------------- PLL3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVP) == RCC_PERIPHCLK_PLL3_DIVP)
 800bd96:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800bd9a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bd9e:	2100      	movs	r1, #0
 800bda0:	6139      	str	r1, [r7, #16]
 800bda2:	f003 0308 	and.w	r3, r3, #8
 800bda6:	617b      	str	r3, [r7, #20]
 800bda8:	e9d7 1204 	ldrd	r1, r2, [r7, #16]
 800bdac:	460b      	mov	r3, r1
 800bdae:	4313      	orrs	r3, r2
 800bdb0:	d011      	beq.n	800bdd6 <HAL_RCCEx_PeriphCLKConfig+0x1376>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 800bdb2:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800bdb6:	3328      	adds	r3, #40	; 0x28
 800bdb8:	2100      	movs	r1, #0
 800bdba:	4618      	mov	r0, r3
 800bdbc:	f001 faf2 	bl	800d3a4 <RCCEx_PLL3_Config>
 800bdc0:	4603      	mov	r3, r0
 800bdc2:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
  
    if (ret == HAL_OK)
 800bdc6:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800bdca:	2b00      	cmp	r3, #0
 800bdcc:	d003      	beq.n	800bdd6 <HAL_RCCEx_PeriphCLKConfig+0x1376>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 800bdce:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800bdd2:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVQ) == RCC_PERIPHCLK_PLL3_DIVQ)
 800bdd6:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800bdda:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bdde:	2100      	movs	r1, #0
 800bde0:	60b9      	str	r1, [r7, #8]
 800bde2:	f003 0310 	and.w	r3, r3, #16
 800bde6:	60fb      	str	r3, [r7, #12]
 800bde8:	e9d7 1202 	ldrd	r1, r2, [r7, #8]
 800bdec:	460b      	mov	r3, r1
 800bdee:	4313      	orrs	r3, r2
 800bdf0:	d011      	beq.n	800be16 <HAL_RCCEx_PeriphCLKConfig+0x13b6>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800bdf2:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800bdf6:	3328      	adds	r3, #40	; 0x28
 800bdf8:	2101      	movs	r1, #1
 800bdfa:	4618      	mov	r0, r3
 800bdfc:	f001 fad2 	bl	800d3a4 <RCCEx_PLL3_Config>
 800be00:	4603      	mov	r3, r0
 800be02:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
    
    if (ret == HAL_OK)
 800be06:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800be0a:	2b00      	cmp	r3, #0
 800be0c:	d003      	beq.n	800be16 <HAL_RCCEx_PeriphCLKConfig+0x13b6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 800be0e:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800be12:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVR) == RCC_PERIPHCLK_PLL3_DIVR)
 800be16:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800be1a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800be1e:	2100      	movs	r1, #0
 800be20:	6039      	str	r1, [r7, #0]
 800be22:	f003 0320 	and.w	r3, r3, #32
 800be26:	607b      	str	r3, [r7, #4]
 800be28:	e9d7 1200 	ldrd	r1, r2, [r7]
 800be2c:	460b      	mov	r3, r1
 800be2e:	4313      	orrs	r3, r2
 800be30:	d011      	beq.n	800be56 <HAL_RCCEx_PeriphCLKConfig+0x13f6>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800be32:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800be36:	3328      	adds	r3, #40	; 0x28
 800be38:	2102      	movs	r1, #2
 800be3a:	4618      	mov	r0, r3
 800be3c:	f001 fab2 	bl	800d3a4 <RCCEx_PLL3_Config>
 800be40:	4603      	mov	r3, r0
 800be42:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
    
    if (ret == HAL_OK)
 800be46:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800be4a:	2b00      	cmp	r3, #0
 800be4c:	d003      	beq.n	800be56 <HAL_RCCEx_PeriphCLKConfig+0x13f6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 800be4e:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800be52:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    } 
  }

  if (status == HAL_OK)
 800be56:	f897 3126 	ldrb.w	r3, [r7, #294]	; 0x126
 800be5a:	2b00      	cmp	r3, #0
 800be5c:	d101      	bne.n	800be62 <HAL_RCCEx_PeriphCLKConfig+0x1402>
  {
    return HAL_OK;
 800be5e:	2300      	movs	r3, #0
 800be60:	e000      	b.n	800be64 <HAL_RCCEx_PeriphCLKConfig+0x1404>
  }
  return HAL_ERROR;
 800be62:	2301      	movs	r3, #1
}
 800be64:	4618      	mov	r0, r3
 800be66:	f507 7794 	add.w	r7, r7, #296	; 0x128
 800be6a:	46bd      	mov	sp, r7
 800be6c:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800be70:	58024400 	.word	0x58024400

0800be74 <HAL_RCCEx_GetPeriphCLKFreq>:
  * @retval Frequency in KHz
  *
  *  (*) : Available on some STM32H7 lines only.
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint64_t PeriphClk)
{
 800be74:	b580      	push	{r7, lr}
 800be76:	b090      	sub	sp, #64	; 0x40
 800be78:	af00      	add	r7, sp, #0
 800be7a:	e9c7 0100 	strd	r0, r1, [r7]
  /* This variable is used to store the SAI and CKP clock source */
  uint32_t saiclocksource;
  uint32_t ckpclocksource;
  uint32_t srcclk;

  if (PeriphClk == RCC_PERIPHCLK_SAI1)
 800be7e:	e9d7 2300 	ldrd	r2, r3, [r7]
 800be82:	f5a2 7180 	sub.w	r1, r2, #256	; 0x100
 800be86:	430b      	orrs	r3, r1
 800be88:	f040 8094 	bne.w	800bfb4 <HAL_RCCEx_GetPeriphCLKFreq+0x140>
  {

    saiclocksource = __HAL_RCC_GET_SAI1_SOURCE();
 800be8c:	4b9e      	ldr	r3, [pc, #632]	; (800c108 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800be8e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800be90:	f003 0307 	and.w	r3, r3, #7
 800be94:	633b      	str	r3, [r7, #48]	; 0x30

    switch (saiclocksource)
 800be96:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800be98:	2b04      	cmp	r3, #4
 800be9a:	f200 8087 	bhi.w	800bfac <HAL_RCCEx_GetPeriphCLKFreq+0x138>
 800be9e:	a201      	add	r2, pc, #4	; (adr r2, 800bea4 <HAL_RCCEx_GetPeriphCLKFreq+0x30>)
 800bea0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800bea4:	0800beb9 	.word	0x0800beb9
 800bea8:	0800bee1 	.word	0x0800bee1
 800beac:	0800bf09 	.word	0x0800bf09
 800beb0:	0800bfa5 	.word	0x0800bfa5
 800beb4:	0800bf31 	.word	0x0800bf31
    {
      case RCC_SAI1CLKSOURCE_PLL: /* PLL1 is the clock source for SAI1 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 800beb8:	4b93      	ldr	r3, [pc, #588]	; (800c108 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800beba:	681b      	ldr	r3, [r3, #0]
 800bebc:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800bec0:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800bec4:	d108      	bne.n	800bed8 <HAL_RCCEx_GetPeriphCLKFreq+0x64>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800bec6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800beca:	4618      	mov	r0, r3
 800becc:	f001 f810 	bl	800cef0 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 800bed0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bed2:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800bed4:	f000 bd45 	b.w	800c962 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800bed8:	2300      	movs	r3, #0
 800beda:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800bedc:	f000 bd41 	b.w	800c962 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is the clock source for SAI1 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800bee0:	4b89      	ldr	r3, [pc, #548]	; (800c108 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800bee2:	681b      	ldr	r3, [r3, #0]
 800bee4:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800bee8:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800beec:	d108      	bne.n	800bf00 <HAL_RCCEx_GetPeriphCLKFreq+0x8c>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800beee:	f107 0318 	add.w	r3, r7, #24
 800bef2:	4618      	mov	r0, r3
 800bef4:	f000 fd54 	bl	800c9a0 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 800bef8:	69bb      	ldr	r3, [r7, #24]
 800befa:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800befc:	f000 bd31 	b.w	800c962 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800bf00:	2300      	movs	r3, #0
 800bf02:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800bf04:	f000 bd2d 	b.w	800c962 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI1CLKSOURCE_PLL3: /* PLL3 is the clock source for SAI1 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800bf08:	4b7f      	ldr	r3, [pc, #508]	; (800c108 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800bf0a:	681b      	ldr	r3, [r3, #0]
 800bf0c:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800bf10:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800bf14:	d108      	bne.n	800bf28 <HAL_RCCEx_GetPeriphCLKFreq+0xb4>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800bf16:	f107 030c 	add.w	r3, r7, #12
 800bf1a:	4618      	mov	r0, r3
 800bf1c:	f000 fe94 	bl	800cc48 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 800bf20:	68fb      	ldr	r3, [r7, #12]
 800bf22:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800bf24:	f000 bd1d 	b.w	800c962 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800bf28:	2300      	movs	r3, #0
 800bf2a:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800bf2c:	f000 bd19 	b.w	800c962 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI1CLKSOURCE_CLKP: /* CKPER is the clock source for SAI1*/
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 800bf30:	4b75      	ldr	r3, [pc, #468]	; (800c108 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800bf32:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800bf34:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800bf38:	637b      	str	r3, [r7, #52]	; 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 800bf3a:	4b73      	ldr	r3, [pc, #460]	; (800c108 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800bf3c:	681b      	ldr	r3, [r3, #0]
 800bf3e:	f003 0304 	and.w	r3, r3, #4
 800bf42:	2b04      	cmp	r3, #4
 800bf44:	d10c      	bne.n	800bf60 <HAL_RCCEx_GetPeriphCLKFreq+0xec>
 800bf46:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800bf48:	2b00      	cmp	r3, #0
 800bf4a:	d109      	bne.n	800bf60 <HAL_RCCEx_GetPeriphCLKFreq+0xec>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800bf4c:	4b6e      	ldr	r3, [pc, #440]	; (800c108 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800bf4e:	681b      	ldr	r3, [r3, #0]
 800bf50:	08db      	lsrs	r3, r3, #3
 800bf52:	f003 0303 	and.w	r3, r3, #3
 800bf56:	4a6d      	ldr	r2, [pc, #436]	; (800c10c <HAL_RCCEx_GetPeriphCLKFreq+0x298>)
 800bf58:	fa22 f303 	lsr.w	r3, r2, r3
 800bf5c:	63fb      	str	r3, [r7, #60]	; 0x3c
 800bf5e:	e01f      	b.n	800bfa0 <HAL_RCCEx_GetPeriphCLKFreq+0x12c>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 800bf60:	4b69      	ldr	r3, [pc, #420]	; (800c108 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800bf62:	681b      	ldr	r3, [r3, #0]
 800bf64:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800bf68:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800bf6c:	d106      	bne.n	800bf7c <HAL_RCCEx_GetPeriphCLKFreq+0x108>
 800bf6e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800bf70:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800bf74:	d102      	bne.n	800bf7c <HAL_RCCEx_GetPeriphCLKFreq+0x108>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 800bf76:	4b66      	ldr	r3, [pc, #408]	; (800c110 <HAL_RCCEx_GetPeriphCLKFreq+0x29c>)
 800bf78:	63fb      	str	r3, [r7, #60]	; 0x3c
 800bf7a:	e011      	b.n	800bfa0 <HAL_RCCEx_GetPeriphCLKFreq+0x12c>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 800bf7c:	4b62      	ldr	r3, [pc, #392]	; (800c108 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800bf7e:	681b      	ldr	r3, [r3, #0]
 800bf80:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800bf84:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800bf88:	d106      	bne.n	800bf98 <HAL_RCCEx_GetPeriphCLKFreq+0x124>
 800bf8a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800bf8c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800bf90:	d102      	bne.n	800bf98 <HAL_RCCEx_GetPeriphCLKFreq+0x124>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 800bf92:	4b60      	ldr	r3, [pc, #384]	; (800c114 <HAL_RCCEx_GetPeriphCLKFreq+0x2a0>)
 800bf94:	63fb      	str	r3, [r7, #60]	; 0x3c
 800bf96:	e003      	b.n	800bfa0 <HAL_RCCEx_GetPeriphCLKFreq+0x12c>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 800bf98:	2300      	movs	r3, #0
 800bf9a:	63fb      	str	r3, [r7, #60]	; 0x3c
        }

        break;
 800bf9c:	f000 bce1 	b.w	800c962 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 800bfa0:	f000 bcdf 	b.w	800c962 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case (RCC_SAI1CLKSOURCE_PIN): /* External clock is the clock source for SAI1 */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 800bfa4:	4b5c      	ldr	r3, [pc, #368]	; (800c118 <HAL_RCCEx_GetPeriphCLKFreq+0x2a4>)
 800bfa6:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800bfa8:	f000 bcdb 	b.w	800c962 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      default :
      {
        frequency = 0;
 800bfac:	2300      	movs	r3, #0
 800bfae:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800bfb0:	f000 bcd7 	b.w	800c962 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }

#if defined(SAI3)
  else if (PeriphClk == RCC_PERIPHCLK_SAI23)
 800bfb4:	e9d7 2300 	ldrd	r2, r3, [r7]
 800bfb8:	f5a2 7100 	sub.w	r1, r2, #512	; 0x200
 800bfbc:	430b      	orrs	r3, r1
 800bfbe:	f040 80ad 	bne.w	800c11c <HAL_RCCEx_GetPeriphCLKFreq+0x2a8>
  {

    saiclocksource = __HAL_RCC_GET_SAI23_SOURCE();
 800bfc2:	4b51      	ldr	r3, [pc, #324]	; (800c108 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800bfc4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800bfc6:	f403 73e0 	and.w	r3, r3, #448	; 0x1c0
 800bfca:	633b      	str	r3, [r7, #48]	; 0x30

    switch (saiclocksource)
 800bfcc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bfce:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800bfd2:	d056      	beq.n	800c082 <HAL_RCCEx_GetPeriphCLKFreq+0x20e>
 800bfd4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bfd6:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800bfda:	f200 8090 	bhi.w	800c0fe <HAL_RCCEx_GetPeriphCLKFreq+0x28a>
 800bfde:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bfe0:	2bc0      	cmp	r3, #192	; 0xc0
 800bfe2:	f000 8088 	beq.w	800c0f6 <HAL_RCCEx_GetPeriphCLKFreq+0x282>
 800bfe6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bfe8:	2bc0      	cmp	r3, #192	; 0xc0
 800bfea:	f200 8088 	bhi.w	800c0fe <HAL_RCCEx_GetPeriphCLKFreq+0x28a>
 800bfee:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bff0:	2b80      	cmp	r3, #128	; 0x80
 800bff2:	d032      	beq.n	800c05a <HAL_RCCEx_GetPeriphCLKFreq+0x1e6>
 800bff4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bff6:	2b80      	cmp	r3, #128	; 0x80
 800bff8:	f200 8081 	bhi.w	800c0fe <HAL_RCCEx_GetPeriphCLKFreq+0x28a>
 800bffc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bffe:	2b00      	cmp	r3, #0
 800c000:	d003      	beq.n	800c00a <HAL_RCCEx_GetPeriphCLKFreq+0x196>
 800c002:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c004:	2b40      	cmp	r3, #64	; 0x40
 800c006:	d014      	beq.n	800c032 <HAL_RCCEx_GetPeriphCLKFreq+0x1be>
 800c008:	e079      	b.n	800c0fe <HAL_RCCEx_GetPeriphCLKFreq+0x28a>
    {
      case RCC_SAI23CLKSOURCE_PLL: /* PLL1 is the clock source for SAI2/3 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 800c00a:	4b3f      	ldr	r3, [pc, #252]	; (800c108 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800c00c:	681b      	ldr	r3, [r3, #0]
 800c00e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800c012:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800c016:	d108      	bne.n	800c02a <HAL_RCCEx_GetPeriphCLKFreq+0x1b6>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800c018:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800c01c:	4618      	mov	r0, r3
 800c01e:	f000 ff67 	bl	800cef0 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 800c022:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c024:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800c026:	f000 bc9c 	b.w	800c962 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800c02a:	2300      	movs	r3, #0
 800c02c:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800c02e:	f000 bc98 	b.w	800c962 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SAI23CLKSOURCE_PLL2: /* PLL2 is the clock source for SAI2/3 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800c032:	4b35      	ldr	r3, [pc, #212]	; (800c108 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800c034:	681b      	ldr	r3, [r3, #0]
 800c036:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800c03a:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800c03e:	d108      	bne.n	800c052 <HAL_RCCEx_GetPeriphCLKFreq+0x1de>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800c040:	f107 0318 	add.w	r3, r7, #24
 800c044:	4618      	mov	r0, r3
 800c046:	f000 fcab 	bl	800c9a0 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 800c04a:	69bb      	ldr	r3, [r7, #24]
 800c04c:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800c04e:	f000 bc88 	b.w	800c962 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800c052:	2300      	movs	r3, #0
 800c054:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800c056:	f000 bc84 	b.w	800c962 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI23CLKSOURCE_PLL3: /* PLL3 is the clock source for SAI2/3 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800c05a:	4b2b      	ldr	r3, [pc, #172]	; (800c108 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800c05c:	681b      	ldr	r3, [r3, #0]
 800c05e:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800c062:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800c066:	d108      	bne.n	800c07a <HAL_RCCEx_GetPeriphCLKFreq+0x206>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800c068:	f107 030c 	add.w	r3, r7, #12
 800c06c:	4618      	mov	r0, r3
 800c06e:	f000 fdeb 	bl	800cc48 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 800c072:	68fb      	ldr	r3, [r7, #12]
 800c074:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800c076:	f000 bc74 	b.w	800c962 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800c07a:	2300      	movs	r3, #0
 800c07c:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800c07e:	f000 bc70 	b.w	800c962 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI23CLKSOURCE_CLKP: /* CKPER is the clock source for SAI2/3 */
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 800c082:	4b21      	ldr	r3, [pc, #132]	; (800c108 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800c084:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800c086:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800c08a:	637b      	str	r3, [r7, #52]	; 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 800c08c:	4b1e      	ldr	r3, [pc, #120]	; (800c108 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800c08e:	681b      	ldr	r3, [r3, #0]
 800c090:	f003 0304 	and.w	r3, r3, #4
 800c094:	2b04      	cmp	r3, #4
 800c096:	d10c      	bne.n	800c0b2 <HAL_RCCEx_GetPeriphCLKFreq+0x23e>
 800c098:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800c09a:	2b00      	cmp	r3, #0
 800c09c:	d109      	bne.n	800c0b2 <HAL_RCCEx_GetPeriphCLKFreq+0x23e>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800c09e:	4b1a      	ldr	r3, [pc, #104]	; (800c108 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800c0a0:	681b      	ldr	r3, [r3, #0]
 800c0a2:	08db      	lsrs	r3, r3, #3
 800c0a4:	f003 0303 	and.w	r3, r3, #3
 800c0a8:	4a18      	ldr	r2, [pc, #96]	; (800c10c <HAL_RCCEx_GetPeriphCLKFreq+0x298>)
 800c0aa:	fa22 f303 	lsr.w	r3, r2, r3
 800c0ae:	63fb      	str	r3, [r7, #60]	; 0x3c
 800c0b0:	e01f      	b.n	800c0f2 <HAL_RCCEx_GetPeriphCLKFreq+0x27e>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 800c0b2:	4b15      	ldr	r3, [pc, #84]	; (800c108 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800c0b4:	681b      	ldr	r3, [r3, #0]
 800c0b6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800c0ba:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800c0be:	d106      	bne.n	800c0ce <HAL_RCCEx_GetPeriphCLKFreq+0x25a>
 800c0c0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800c0c2:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800c0c6:	d102      	bne.n	800c0ce <HAL_RCCEx_GetPeriphCLKFreq+0x25a>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 800c0c8:	4b11      	ldr	r3, [pc, #68]	; (800c110 <HAL_RCCEx_GetPeriphCLKFreq+0x29c>)
 800c0ca:	63fb      	str	r3, [r7, #60]	; 0x3c
 800c0cc:	e011      	b.n	800c0f2 <HAL_RCCEx_GetPeriphCLKFreq+0x27e>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 800c0ce:	4b0e      	ldr	r3, [pc, #56]	; (800c108 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800c0d0:	681b      	ldr	r3, [r3, #0]
 800c0d2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800c0d6:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800c0da:	d106      	bne.n	800c0ea <HAL_RCCEx_GetPeriphCLKFreq+0x276>
 800c0dc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800c0de:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800c0e2:	d102      	bne.n	800c0ea <HAL_RCCEx_GetPeriphCLKFreq+0x276>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 800c0e4:	4b0b      	ldr	r3, [pc, #44]	; (800c114 <HAL_RCCEx_GetPeriphCLKFreq+0x2a0>)
 800c0e6:	63fb      	str	r3, [r7, #60]	; 0x3c
 800c0e8:	e003      	b.n	800c0f2 <HAL_RCCEx_GetPeriphCLKFreq+0x27e>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 800c0ea:	2300      	movs	r3, #0
 800c0ec:	63fb      	str	r3, [r7, #60]	; 0x3c
        }

        break;
 800c0ee:	f000 bc38 	b.w	800c962 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 800c0f2:	f000 bc36 	b.w	800c962 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case (RCC_SAI23CLKSOURCE_PIN): /* External clock is the clock source for SAI2/3 */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 800c0f6:	4b08      	ldr	r3, [pc, #32]	; (800c118 <HAL_RCCEx_GetPeriphCLKFreq+0x2a4>)
 800c0f8:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800c0fa:	f000 bc32 	b.w	800c962 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      default :
      {
        frequency = 0;
 800c0fe:	2300      	movs	r3, #0
 800c100:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800c102:	f000 bc2e 	b.w	800c962 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 800c106:	bf00      	nop
 800c108:	58024400 	.word	0x58024400
 800c10c:	03d09000 	.word	0x03d09000
 800c110:	003d0900 	.word	0x003d0900
 800c114:	00989680 	.word	0x00989680
 800c118:	00bb8000 	.word	0x00bb8000
    }
  }
#endif

#if defined(SAI4)
  else if (PeriphClk == RCC_PERIPHCLK_SAI4A)
 800c11c:	e9d7 2300 	ldrd	r2, r3, [r7]
 800c120:	f5a2 6180 	sub.w	r1, r2, #1024	; 0x400
 800c124:	430b      	orrs	r3, r1
 800c126:	f040 809c 	bne.w	800c262 <HAL_RCCEx_GetPeriphCLKFreq+0x3ee>
  {

    saiclocksource = __HAL_RCC_GET_SAI4A_SOURCE();
 800c12a:	4b9e      	ldr	r3, [pc, #632]	; (800c3a4 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800c12c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800c12e:	f403 0360 	and.w	r3, r3, #14680064	; 0xe00000
 800c132:	633b      	str	r3, [r7, #48]	; 0x30

    switch (saiclocksource)
 800c134:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c136:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 800c13a:	d054      	beq.n	800c1e6 <HAL_RCCEx_GetPeriphCLKFreq+0x372>
 800c13c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c13e:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 800c142:	f200 808b 	bhi.w	800c25c <HAL_RCCEx_GetPeriphCLKFreq+0x3e8>
 800c146:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c148:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 800c14c:	f000 8083 	beq.w	800c256 <HAL_RCCEx_GetPeriphCLKFreq+0x3e2>
 800c150:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c152:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 800c156:	f200 8081 	bhi.w	800c25c <HAL_RCCEx_GetPeriphCLKFreq+0x3e8>
 800c15a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c15c:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800c160:	d02f      	beq.n	800c1c2 <HAL_RCCEx_GetPeriphCLKFreq+0x34e>
 800c162:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c164:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800c168:	d878      	bhi.n	800c25c <HAL_RCCEx_GetPeriphCLKFreq+0x3e8>
 800c16a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c16c:	2b00      	cmp	r3, #0
 800c16e:	d004      	beq.n	800c17a <HAL_RCCEx_GetPeriphCLKFreq+0x306>
 800c170:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c172:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800c176:	d012      	beq.n	800c19e <HAL_RCCEx_GetPeriphCLKFreq+0x32a>
 800c178:	e070      	b.n	800c25c <HAL_RCCEx_GetPeriphCLKFreq+0x3e8>
    {
      case RCC_SAI4ACLKSOURCE_PLL: /* PLL1 is the clock source for SAI4A */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 800c17a:	4b8a      	ldr	r3, [pc, #552]	; (800c3a4 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800c17c:	681b      	ldr	r3, [r3, #0]
 800c17e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800c182:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800c186:	d107      	bne.n	800c198 <HAL_RCCEx_GetPeriphCLKFreq+0x324>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800c188:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800c18c:	4618      	mov	r0, r3
 800c18e:	f000 feaf 	bl	800cef0 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 800c192:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c194:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800c196:	e3e4      	b.n	800c962 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800c198:	2300      	movs	r3, #0
 800c19a:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800c19c:	e3e1      	b.n	800c962 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SAI4ACLKSOURCE_PLL2: /* PLLI2 is the clock source for SAI4A */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800c19e:	4b81      	ldr	r3, [pc, #516]	; (800c3a4 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800c1a0:	681b      	ldr	r3, [r3, #0]
 800c1a2:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800c1a6:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800c1aa:	d107      	bne.n	800c1bc <HAL_RCCEx_GetPeriphCLKFreq+0x348>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800c1ac:	f107 0318 	add.w	r3, r7, #24
 800c1b0:	4618      	mov	r0, r3
 800c1b2:	f000 fbf5 	bl	800c9a0 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 800c1b6:	69bb      	ldr	r3, [r7, #24]
 800c1b8:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800c1ba:	e3d2      	b.n	800c962 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800c1bc:	2300      	movs	r3, #0
 800c1be:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800c1c0:	e3cf      	b.n	800c962 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI4ACLKSOURCE_PLL3: /* PLLI3 is the clock source for SAI4A */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800c1c2:	4b78      	ldr	r3, [pc, #480]	; (800c3a4 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800c1c4:	681b      	ldr	r3, [r3, #0]
 800c1c6:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800c1ca:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800c1ce:	d107      	bne.n	800c1e0 <HAL_RCCEx_GetPeriphCLKFreq+0x36c>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800c1d0:	f107 030c 	add.w	r3, r7, #12
 800c1d4:	4618      	mov	r0, r3
 800c1d6:	f000 fd37 	bl	800cc48 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 800c1da:	68fb      	ldr	r3, [r7, #12]
 800c1dc:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800c1de:	e3c0      	b.n	800c962 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800c1e0:	2300      	movs	r3, #0
 800c1e2:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800c1e4:	e3bd      	b.n	800c962 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI4ACLKSOURCE_CLKP: /* CKPER is the clock source for SAI4A*/
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 800c1e6:	4b6f      	ldr	r3, [pc, #444]	; (800c3a4 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800c1e8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800c1ea:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800c1ee:	637b      	str	r3, [r7, #52]	; 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 800c1f0:	4b6c      	ldr	r3, [pc, #432]	; (800c3a4 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800c1f2:	681b      	ldr	r3, [r3, #0]
 800c1f4:	f003 0304 	and.w	r3, r3, #4
 800c1f8:	2b04      	cmp	r3, #4
 800c1fa:	d10c      	bne.n	800c216 <HAL_RCCEx_GetPeriphCLKFreq+0x3a2>
 800c1fc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800c1fe:	2b00      	cmp	r3, #0
 800c200:	d109      	bne.n	800c216 <HAL_RCCEx_GetPeriphCLKFreq+0x3a2>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800c202:	4b68      	ldr	r3, [pc, #416]	; (800c3a4 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800c204:	681b      	ldr	r3, [r3, #0]
 800c206:	08db      	lsrs	r3, r3, #3
 800c208:	f003 0303 	and.w	r3, r3, #3
 800c20c:	4a66      	ldr	r2, [pc, #408]	; (800c3a8 <HAL_RCCEx_GetPeriphCLKFreq+0x534>)
 800c20e:	fa22 f303 	lsr.w	r3, r2, r3
 800c212:	63fb      	str	r3, [r7, #60]	; 0x3c
 800c214:	e01e      	b.n	800c254 <HAL_RCCEx_GetPeriphCLKFreq+0x3e0>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 800c216:	4b63      	ldr	r3, [pc, #396]	; (800c3a4 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800c218:	681b      	ldr	r3, [r3, #0]
 800c21a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800c21e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800c222:	d106      	bne.n	800c232 <HAL_RCCEx_GetPeriphCLKFreq+0x3be>
 800c224:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800c226:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800c22a:	d102      	bne.n	800c232 <HAL_RCCEx_GetPeriphCLKFreq+0x3be>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 800c22c:	4b5f      	ldr	r3, [pc, #380]	; (800c3ac <HAL_RCCEx_GetPeriphCLKFreq+0x538>)
 800c22e:	63fb      	str	r3, [r7, #60]	; 0x3c
 800c230:	e010      	b.n	800c254 <HAL_RCCEx_GetPeriphCLKFreq+0x3e0>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 800c232:	4b5c      	ldr	r3, [pc, #368]	; (800c3a4 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800c234:	681b      	ldr	r3, [r3, #0]
 800c236:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800c23a:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800c23e:	d106      	bne.n	800c24e <HAL_RCCEx_GetPeriphCLKFreq+0x3da>
 800c240:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800c242:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800c246:	d102      	bne.n	800c24e <HAL_RCCEx_GetPeriphCLKFreq+0x3da>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 800c248:	4b59      	ldr	r3, [pc, #356]	; (800c3b0 <HAL_RCCEx_GetPeriphCLKFreq+0x53c>)
 800c24a:	63fb      	str	r3, [r7, #60]	; 0x3c
 800c24c:	e002      	b.n	800c254 <HAL_RCCEx_GetPeriphCLKFreq+0x3e0>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 800c24e:	2300      	movs	r3, #0
 800c250:	63fb      	str	r3, [r7, #60]	; 0x3c
        }

        break;
 800c252:	e386      	b.n	800c962 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 800c254:	e385      	b.n	800c962 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI4ACLKSOURCE_PIN: /* External clock is the clock source for SAI4A */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 800c256:	4b57      	ldr	r3, [pc, #348]	; (800c3b4 <HAL_RCCEx_GetPeriphCLKFreq+0x540>)
 800c258:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800c25a:	e382      	b.n	800c962 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      default :
      {
        frequency = 0;
 800c25c:	2300      	movs	r3, #0
 800c25e:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800c260:	e37f      	b.n	800c962 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }

  else if (PeriphClk == RCC_PERIPHCLK_SAI4B)
 800c262:	e9d7 2300 	ldrd	r2, r3, [r7]
 800c266:	f5a2 6100 	sub.w	r1, r2, #2048	; 0x800
 800c26a:	430b      	orrs	r3, r1
 800c26c:	f040 80a7 	bne.w	800c3be <HAL_RCCEx_GetPeriphCLKFreq+0x54a>
  {

    saiclocksource = __HAL_RCC_GET_SAI4B_SOURCE();
 800c270:	4b4c      	ldr	r3, [pc, #304]	; (800c3a4 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800c272:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800c274:	f003 63e0 	and.w	r3, r3, #117440512	; 0x7000000
 800c278:	633b      	str	r3, [r7, #48]	; 0x30

    switch (saiclocksource)
 800c27a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c27c:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800c280:	d055      	beq.n	800c32e <HAL_RCCEx_GetPeriphCLKFreq+0x4ba>
 800c282:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c284:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800c288:	f200 8096 	bhi.w	800c3b8 <HAL_RCCEx_GetPeriphCLKFreq+0x544>
 800c28c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c28e:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 800c292:	f000 8084 	beq.w	800c39e <HAL_RCCEx_GetPeriphCLKFreq+0x52a>
 800c296:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c298:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 800c29c:	f200 808c 	bhi.w	800c3b8 <HAL_RCCEx_GetPeriphCLKFreq+0x544>
 800c2a0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c2a2:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800c2a6:	d030      	beq.n	800c30a <HAL_RCCEx_GetPeriphCLKFreq+0x496>
 800c2a8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c2aa:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800c2ae:	f200 8083 	bhi.w	800c3b8 <HAL_RCCEx_GetPeriphCLKFreq+0x544>
 800c2b2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c2b4:	2b00      	cmp	r3, #0
 800c2b6:	d004      	beq.n	800c2c2 <HAL_RCCEx_GetPeriphCLKFreq+0x44e>
 800c2b8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c2ba:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800c2be:	d012      	beq.n	800c2e6 <HAL_RCCEx_GetPeriphCLKFreq+0x472>
 800c2c0:	e07a      	b.n	800c3b8 <HAL_RCCEx_GetPeriphCLKFreq+0x544>
    {
      case RCC_SAI4BCLKSOURCE_PLL: /* PLL1 is the clock source for SAI4B */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 800c2c2:	4b38      	ldr	r3, [pc, #224]	; (800c3a4 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800c2c4:	681b      	ldr	r3, [r3, #0]
 800c2c6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800c2ca:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800c2ce:	d107      	bne.n	800c2e0 <HAL_RCCEx_GetPeriphCLKFreq+0x46c>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800c2d0:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800c2d4:	4618      	mov	r0, r3
 800c2d6:	f000 fe0b 	bl	800cef0 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 800c2da:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c2dc:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800c2de:	e340      	b.n	800c962 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800c2e0:	2300      	movs	r3, #0
 800c2e2:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800c2e4:	e33d      	b.n	800c962 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SAI4BCLKSOURCE_PLL2: /* PLLI2 is the clock source for SAI4B */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800c2e6:	4b2f      	ldr	r3, [pc, #188]	; (800c3a4 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800c2e8:	681b      	ldr	r3, [r3, #0]
 800c2ea:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800c2ee:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800c2f2:	d107      	bne.n	800c304 <HAL_RCCEx_GetPeriphCLKFreq+0x490>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800c2f4:	f107 0318 	add.w	r3, r7, #24
 800c2f8:	4618      	mov	r0, r3
 800c2fa:	f000 fb51 	bl	800c9a0 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 800c2fe:	69bb      	ldr	r3, [r7, #24]
 800c300:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800c302:	e32e      	b.n	800c962 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800c304:	2300      	movs	r3, #0
 800c306:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800c308:	e32b      	b.n	800c962 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI4BCLKSOURCE_PLL3: /* PLLI3 is the clock source for SAI4B */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800c30a:	4b26      	ldr	r3, [pc, #152]	; (800c3a4 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800c30c:	681b      	ldr	r3, [r3, #0]
 800c30e:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800c312:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800c316:	d107      	bne.n	800c328 <HAL_RCCEx_GetPeriphCLKFreq+0x4b4>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800c318:	f107 030c 	add.w	r3, r7, #12
 800c31c:	4618      	mov	r0, r3
 800c31e:	f000 fc93 	bl	800cc48 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 800c322:	68fb      	ldr	r3, [r7, #12]
 800c324:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800c326:	e31c      	b.n	800c962 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800c328:	2300      	movs	r3, #0
 800c32a:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800c32c:	e319      	b.n	800c962 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI4BCLKSOURCE_CLKP: /* CKPER is the clock source for SAI4B*/
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 800c32e:	4b1d      	ldr	r3, [pc, #116]	; (800c3a4 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800c330:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800c332:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800c336:	637b      	str	r3, [r7, #52]	; 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 800c338:	4b1a      	ldr	r3, [pc, #104]	; (800c3a4 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800c33a:	681b      	ldr	r3, [r3, #0]
 800c33c:	f003 0304 	and.w	r3, r3, #4
 800c340:	2b04      	cmp	r3, #4
 800c342:	d10c      	bne.n	800c35e <HAL_RCCEx_GetPeriphCLKFreq+0x4ea>
 800c344:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800c346:	2b00      	cmp	r3, #0
 800c348:	d109      	bne.n	800c35e <HAL_RCCEx_GetPeriphCLKFreq+0x4ea>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800c34a:	4b16      	ldr	r3, [pc, #88]	; (800c3a4 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800c34c:	681b      	ldr	r3, [r3, #0]
 800c34e:	08db      	lsrs	r3, r3, #3
 800c350:	f003 0303 	and.w	r3, r3, #3
 800c354:	4a14      	ldr	r2, [pc, #80]	; (800c3a8 <HAL_RCCEx_GetPeriphCLKFreq+0x534>)
 800c356:	fa22 f303 	lsr.w	r3, r2, r3
 800c35a:	63fb      	str	r3, [r7, #60]	; 0x3c
 800c35c:	e01e      	b.n	800c39c <HAL_RCCEx_GetPeriphCLKFreq+0x528>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 800c35e:	4b11      	ldr	r3, [pc, #68]	; (800c3a4 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800c360:	681b      	ldr	r3, [r3, #0]
 800c362:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800c366:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800c36a:	d106      	bne.n	800c37a <HAL_RCCEx_GetPeriphCLKFreq+0x506>
 800c36c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800c36e:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800c372:	d102      	bne.n	800c37a <HAL_RCCEx_GetPeriphCLKFreq+0x506>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 800c374:	4b0d      	ldr	r3, [pc, #52]	; (800c3ac <HAL_RCCEx_GetPeriphCLKFreq+0x538>)
 800c376:	63fb      	str	r3, [r7, #60]	; 0x3c
 800c378:	e010      	b.n	800c39c <HAL_RCCEx_GetPeriphCLKFreq+0x528>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 800c37a:	4b0a      	ldr	r3, [pc, #40]	; (800c3a4 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800c37c:	681b      	ldr	r3, [r3, #0]
 800c37e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800c382:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800c386:	d106      	bne.n	800c396 <HAL_RCCEx_GetPeriphCLKFreq+0x522>
 800c388:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800c38a:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800c38e:	d102      	bne.n	800c396 <HAL_RCCEx_GetPeriphCLKFreq+0x522>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 800c390:	4b07      	ldr	r3, [pc, #28]	; (800c3b0 <HAL_RCCEx_GetPeriphCLKFreq+0x53c>)
 800c392:	63fb      	str	r3, [r7, #60]	; 0x3c
 800c394:	e002      	b.n	800c39c <HAL_RCCEx_GetPeriphCLKFreq+0x528>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 800c396:	2300      	movs	r3, #0
 800c398:	63fb      	str	r3, [r7, #60]	; 0x3c
        }

        break;
 800c39a:	e2e2      	b.n	800c962 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 800c39c:	e2e1      	b.n	800c962 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI4BCLKSOURCE_PIN: /* External clock is the clock source for SAI4B */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 800c39e:	4b05      	ldr	r3, [pc, #20]	; (800c3b4 <HAL_RCCEx_GetPeriphCLKFreq+0x540>)
 800c3a0:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800c3a2:	e2de      	b.n	800c962 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 800c3a4:	58024400 	.word	0x58024400
 800c3a8:	03d09000 	.word	0x03d09000
 800c3ac:	003d0900 	.word	0x003d0900
 800c3b0:	00989680 	.word	0x00989680
 800c3b4:	00bb8000 	.word	0x00bb8000
      }

      default :
      {
        frequency = 0;
 800c3b8:	2300      	movs	r3, #0
 800c3ba:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800c3bc:	e2d1      	b.n	800c962 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }
#endif /*SAI4*/
  else if (PeriphClk == RCC_PERIPHCLK_SPI123)
 800c3be:	e9d7 2300 	ldrd	r2, r3, [r7]
 800c3c2:	f5a2 5180 	sub.w	r1, r2, #4096	; 0x1000
 800c3c6:	430b      	orrs	r3, r1
 800c3c8:	f040 809c 	bne.w	800c504 <HAL_RCCEx_GetPeriphCLKFreq+0x690>
  {
    /* Get SPI1/2/3 clock source */
    srcclk = __HAL_RCC_GET_SPI123_SOURCE();
 800c3cc:	4b93      	ldr	r3, [pc, #588]	; (800c61c <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 800c3ce:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800c3d0:	f403 43e0 	and.w	r3, r3, #28672	; 0x7000
 800c3d4:	63bb      	str	r3, [r7, #56]	; 0x38

    switch (srcclk)
 800c3d6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c3d8:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800c3dc:	d054      	beq.n	800c488 <HAL_RCCEx_GetPeriphCLKFreq+0x614>
 800c3de:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c3e0:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800c3e4:	f200 808b 	bhi.w	800c4fe <HAL_RCCEx_GetPeriphCLKFreq+0x68a>
 800c3e8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c3ea:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 800c3ee:	f000 8083 	beq.w	800c4f8 <HAL_RCCEx_GetPeriphCLKFreq+0x684>
 800c3f2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c3f4:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 800c3f8:	f200 8081 	bhi.w	800c4fe <HAL_RCCEx_GetPeriphCLKFreq+0x68a>
 800c3fc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c3fe:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800c402:	d02f      	beq.n	800c464 <HAL_RCCEx_GetPeriphCLKFreq+0x5f0>
 800c404:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c406:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800c40a:	d878      	bhi.n	800c4fe <HAL_RCCEx_GetPeriphCLKFreq+0x68a>
 800c40c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c40e:	2b00      	cmp	r3, #0
 800c410:	d004      	beq.n	800c41c <HAL_RCCEx_GetPeriphCLKFreq+0x5a8>
 800c412:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c414:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800c418:	d012      	beq.n	800c440 <HAL_RCCEx_GetPeriphCLKFreq+0x5cc>
 800c41a:	e070      	b.n	800c4fe <HAL_RCCEx_GetPeriphCLKFreq+0x68a>
    {
      case RCC_SPI123CLKSOURCE_PLL: /* PLL1 is the clock source for SPI123 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 800c41c:	4b7f      	ldr	r3, [pc, #508]	; (800c61c <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 800c41e:	681b      	ldr	r3, [r3, #0]
 800c420:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800c424:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800c428:	d107      	bne.n	800c43a <HAL_RCCEx_GetPeriphCLKFreq+0x5c6>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800c42a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800c42e:	4618      	mov	r0, r3
 800c430:	f000 fd5e 	bl	800cef0 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 800c434:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c436:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800c438:	e293      	b.n	800c962 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800c43a:	2300      	movs	r3, #0
 800c43c:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800c43e:	e290      	b.n	800c962 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is the clock source for SPI123 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800c440:	4b76      	ldr	r3, [pc, #472]	; (800c61c <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 800c442:	681b      	ldr	r3, [r3, #0]
 800c444:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800c448:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800c44c:	d107      	bne.n	800c45e <HAL_RCCEx_GetPeriphCLKFreq+0x5ea>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800c44e:	f107 0318 	add.w	r3, r7, #24
 800c452:	4618      	mov	r0, r3
 800c454:	f000 faa4 	bl	800c9a0 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 800c458:	69bb      	ldr	r3, [r7, #24]
 800c45a:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800c45c:	e281      	b.n	800c962 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800c45e:	2300      	movs	r3, #0
 800c460:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800c462:	e27e      	b.n	800c962 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SPI123CLKSOURCE_PLL3: /* PLL3 is the clock source for SPI123 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800c464:	4b6d      	ldr	r3, [pc, #436]	; (800c61c <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 800c466:	681b      	ldr	r3, [r3, #0]
 800c468:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800c46c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800c470:	d107      	bne.n	800c482 <HAL_RCCEx_GetPeriphCLKFreq+0x60e>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800c472:	f107 030c 	add.w	r3, r7, #12
 800c476:	4618      	mov	r0, r3
 800c478:	f000 fbe6 	bl	800cc48 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 800c47c:	68fb      	ldr	r3, [r7, #12]
 800c47e:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800c480:	e26f      	b.n	800c962 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800c482:	2300      	movs	r3, #0
 800c484:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800c486:	e26c      	b.n	800c962 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SPI123CLKSOURCE_CLKP: /* CKPER is the clock source for SPI123 */
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 800c488:	4b64      	ldr	r3, [pc, #400]	; (800c61c <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 800c48a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800c48c:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800c490:	637b      	str	r3, [r7, #52]	; 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 800c492:	4b62      	ldr	r3, [pc, #392]	; (800c61c <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 800c494:	681b      	ldr	r3, [r3, #0]
 800c496:	f003 0304 	and.w	r3, r3, #4
 800c49a:	2b04      	cmp	r3, #4
 800c49c:	d10c      	bne.n	800c4b8 <HAL_RCCEx_GetPeriphCLKFreq+0x644>
 800c49e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800c4a0:	2b00      	cmp	r3, #0
 800c4a2:	d109      	bne.n	800c4b8 <HAL_RCCEx_GetPeriphCLKFreq+0x644>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800c4a4:	4b5d      	ldr	r3, [pc, #372]	; (800c61c <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 800c4a6:	681b      	ldr	r3, [r3, #0]
 800c4a8:	08db      	lsrs	r3, r3, #3
 800c4aa:	f003 0303 	and.w	r3, r3, #3
 800c4ae:	4a5c      	ldr	r2, [pc, #368]	; (800c620 <HAL_RCCEx_GetPeriphCLKFreq+0x7ac>)
 800c4b0:	fa22 f303 	lsr.w	r3, r2, r3
 800c4b4:	63fb      	str	r3, [r7, #60]	; 0x3c
 800c4b6:	e01e      	b.n	800c4f6 <HAL_RCCEx_GetPeriphCLKFreq+0x682>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 800c4b8:	4b58      	ldr	r3, [pc, #352]	; (800c61c <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 800c4ba:	681b      	ldr	r3, [r3, #0]
 800c4bc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800c4c0:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800c4c4:	d106      	bne.n	800c4d4 <HAL_RCCEx_GetPeriphCLKFreq+0x660>
 800c4c6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800c4c8:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800c4cc:	d102      	bne.n	800c4d4 <HAL_RCCEx_GetPeriphCLKFreq+0x660>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 800c4ce:	4b55      	ldr	r3, [pc, #340]	; (800c624 <HAL_RCCEx_GetPeriphCLKFreq+0x7b0>)
 800c4d0:	63fb      	str	r3, [r7, #60]	; 0x3c
 800c4d2:	e010      	b.n	800c4f6 <HAL_RCCEx_GetPeriphCLKFreq+0x682>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 800c4d4:	4b51      	ldr	r3, [pc, #324]	; (800c61c <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 800c4d6:	681b      	ldr	r3, [r3, #0]
 800c4d8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800c4dc:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800c4e0:	d106      	bne.n	800c4f0 <HAL_RCCEx_GetPeriphCLKFreq+0x67c>
 800c4e2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800c4e4:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800c4e8:	d102      	bne.n	800c4f0 <HAL_RCCEx_GetPeriphCLKFreq+0x67c>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 800c4ea:	4b4f      	ldr	r3, [pc, #316]	; (800c628 <HAL_RCCEx_GetPeriphCLKFreq+0x7b4>)
 800c4ec:	63fb      	str	r3, [r7, #60]	; 0x3c
 800c4ee:	e002      	b.n	800c4f6 <HAL_RCCEx_GetPeriphCLKFreq+0x682>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 800c4f0:	2300      	movs	r3, #0
 800c4f2:	63fb      	str	r3, [r7, #60]	; 0x3c
        }

        break;
 800c4f4:	e235      	b.n	800c962 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 800c4f6:	e234      	b.n	800c962 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case (RCC_SPI123CLKSOURCE_PIN): /* External clock is the clock source for I2S */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 800c4f8:	4b4c      	ldr	r3, [pc, #304]	; (800c62c <HAL_RCCEx_GetPeriphCLKFreq+0x7b8>)
 800c4fa:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800c4fc:	e231      	b.n	800c962 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      default :
      {
        frequency = 0;
 800c4fe:	2300      	movs	r3, #0
 800c500:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800c502:	e22e      	b.n	800c962 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SPI45)
 800c504:	e9d7 2300 	ldrd	r2, r3, [r7]
 800c508:	f5a2 5100 	sub.w	r1, r2, #8192	; 0x2000
 800c50c:	430b      	orrs	r3, r1
 800c50e:	f040 808f 	bne.w	800c630 <HAL_RCCEx_GetPeriphCLKFreq+0x7bc>
  {
    /* Get SPI45 clock source */
    srcclk = __HAL_RCC_GET_SPI45_SOURCE();
 800c512:	4b42      	ldr	r3, [pc, #264]	; (800c61c <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 800c514:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800c516:	f403 23e0 	and.w	r3, r3, #458752	; 0x70000
 800c51a:	63bb      	str	r3, [r7, #56]	; 0x38
    switch (srcclk)
 800c51c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c51e:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800c522:	d06b      	beq.n	800c5fc <HAL_RCCEx_GetPeriphCLKFreq+0x788>
 800c524:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c526:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800c52a:	d874      	bhi.n	800c616 <HAL_RCCEx_GetPeriphCLKFreq+0x7a2>
 800c52c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c52e:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 800c532:	d056      	beq.n	800c5e2 <HAL_RCCEx_GetPeriphCLKFreq+0x76e>
 800c534:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c536:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 800c53a:	d86c      	bhi.n	800c616 <HAL_RCCEx_GetPeriphCLKFreq+0x7a2>
 800c53c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c53e:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 800c542:	d03b      	beq.n	800c5bc <HAL_RCCEx_GetPeriphCLKFreq+0x748>
 800c544:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c546:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 800c54a:	d864      	bhi.n	800c616 <HAL_RCCEx_GetPeriphCLKFreq+0x7a2>
 800c54c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c54e:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800c552:	d021      	beq.n	800c598 <HAL_RCCEx_GetPeriphCLKFreq+0x724>
 800c554:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c556:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800c55a:	d85c      	bhi.n	800c616 <HAL_RCCEx_GetPeriphCLKFreq+0x7a2>
 800c55c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c55e:	2b00      	cmp	r3, #0
 800c560:	d004      	beq.n	800c56c <HAL_RCCEx_GetPeriphCLKFreq+0x6f8>
 800c562:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c564:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800c568:	d004      	beq.n	800c574 <HAL_RCCEx_GetPeriphCLKFreq+0x700>
 800c56a:	e054      	b.n	800c616 <HAL_RCCEx_GetPeriphCLKFreq+0x7a2>
    {
      case RCC_SPI45CLKSOURCE_PCLK2: /* CD/D2 PCLK2 is the clock source for SPI4/5 */
      {
        frequency = HAL_RCC_GetPCLK1Freq();
 800c56c:	f7fe fa30 	bl	800a9d0 <HAL_RCC_GetPCLK1Freq>
 800c570:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 800c572:	e1f6      	b.n	800c962 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800c574:	4b29      	ldr	r3, [pc, #164]	; (800c61c <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 800c576:	681b      	ldr	r3, [r3, #0]
 800c578:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800c57c:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800c580:	d107      	bne.n	800c592 <HAL_RCCEx_GetPeriphCLKFreq+0x71e>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800c582:	f107 0318 	add.w	r3, r7, #24
 800c586:	4618      	mov	r0, r3
 800c588:	f000 fa0a 	bl	800c9a0 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 800c58c:	69fb      	ldr	r3, [r7, #28]
 800c58e:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800c590:	e1e7      	b.n	800c962 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800c592:	2300      	movs	r3, #0
 800c594:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800c596:	e1e4      	b.n	800c962 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI45CLKSOURCE_PLL3: /* PLL3 is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800c598:	4b20      	ldr	r3, [pc, #128]	; (800c61c <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 800c59a:	681b      	ldr	r3, [r3, #0]
 800c59c:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800c5a0:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800c5a4:	d107      	bne.n	800c5b6 <HAL_RCCEx_GetPeriphCLKFreq+0x742>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800c5a6:	f107 030c 	add.w	r3, r7, #12
 800c5aa:	4618      	mov	r0, r3
 800c5ac:	f000 fb4c 	bl	800cc48 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 800c5b0:	693b      	ldr	r3, [r7, #16]
 800c5b2:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800c5b4:	e1d5      	b.n	800c962 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800c5b6:	2300      	movs	r3, #0
 800c5b8:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800c5ba:	e1d2      	b.n	800c962 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI45CLKSOURCE_HSI: /* HSI is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 800c5bc:	4b17      	ldr	r3, [pc, #92]	; (800c61c <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 800c5be:	681b      	ldr	r3, [r3, #0]
 800c5c0:	f003 0304 	and.w	r3, r3, #4
 800c5c4:	2b04      	cmp	r3, #4
 800c5c6:	d109      	bne.n	800c5dc <HAL_RCCEx_GetPeriphCLKFreq+0x768>
        {
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800c5c8:	4b14      	ldr	r3, [pc, #80]	; (800c61c <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 800c5ca:	681b      	ldr	r3, [r3, #0]
 800c5cc:	08db      	lsrs	r3, r3, #3
 800c5ce:	f003 0303 	and.w	r3, r3, #3
 800c5d2:	4a13      	ldr	r2, [pc, #76]	; (800c620 <HAL_RCCEx_GetPeriphCLKFreq+0x7ac>)
 800c5d4:	fa22 f303 	lsr.w	r3, r2, r3
 800c5d8:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800c5da:	e1c2      	b.n	800c962 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800c5dc:	2300      	movs	r3, #0
 800c5de:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800c5e0:	e1bf      	b.n	800c962 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI45CLKSOURCE_CSI: /* CSI is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY))
 800c5e2:	4b0e      	ldr	r3, [pc, #56]	; (800c61c <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 800c5e4:	681b      	ldr	r3, [r3, #0]
 800c5e6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800c5ea:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800c5ee:	d102      	bne.n	800c5f6 <HAL_RCCEx_GetPeriphCLKFreq+0x782>
        {
          frequency = CSI_VALUE;
 800c5f0:	4b0c      	ldr	r3, [pc, #48]	; (800c624 <HAL_RCCEx_GetPeriphCLKFreq+0x7b0>)
 800c5f2:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800c5f4:	e1b5      	b.n	800c962 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800c5f6:	2300      	movs	r3, #0
 800c5f8:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800c5fa:	e1b2      	b.n	800c962 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI45CLKSOURCE_HSE: /* HSE is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 800c5fc:	4b07      	ldr	r3, [pc, #28]	; (800c61c <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 800c5fe:	681b      	ldr	r3, [r3, #0]
 800c600:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800c604:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800c608:	d102      	bne.n	800c610 <HAL_RCCEx_GetPeriphCLKFreq+0x79c>
        {
          frequency = HSE_VALUE;
 800c60a:	4b07      	ldr	r3, [pc, #28]	; (800c628 <HAL_RCCEx_GetPeriphCLKFreq+0x7b4>)
 800c60c:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800c60e:	e1a8      	b.n	800c962 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800c610:	2300      	movs	r3, #0
 800c612:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800c614:	e1a5      	b.n	800c962 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      default :
      {
        frequency = 0;
 800c616:	2300      	movs	r3, #0
 800c618:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800c61a:	e1a2      	b.n	800c962 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 800c61c:	58024400 	.word	0x58024400
 800c620:	03d09000 	.word	0x03d09000
 800c624:	003d0900 	.word	0x003d0900
 800c628:	00989680 	.word	0x00989680
 800c62c:	00bb8000 	.word	0x00bb8000
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_ADC)
 800c630:	e9d7 2300 	ldrd	r2, r3, [r7]
 800c634:	f5a2 2100 	sub.w	r1, r2, #524288	; 0x80000
 800c638:	430b      	orrs	r3, r1
 800c63a:	d173      	bne.n	800c724 <HAL_RCCEx_GetPeriphCLKFreq+0x8b0>
  {
    /* Get ADC clock source */
    srcclk = __HAL_RCC_GET_ADC_SOURCE();
 800c63c:	4b9c      	ldr	r3, [pc, #624]	; (800c8b0 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800c63e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800c640:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 800c644:	63bb      	str	r3, [r7, #56]	; 0x38

    switch (srcclk)
 800c646:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c648:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800c64c:	d02f      	beq.n	800c6ae <HAL_RCCEx_GetPeriphCLKFreq+0x83a>
 800c64e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c650:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800c654:	d863      	bhi.n	800c71e <HAL_RCCEx_GetPeriphCLKFreq+0x8aa>
 800c656:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c658:	2b00      	cmp	r3, #0
 800c65a:	d004      	beq.n	800c666 <HAL_RCCEx_GetPeriphCLKFreq+0x7f2>
 800c65c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c65e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800c662:	d012      	beq.n	800c68a <HAL_RCCEx_GetPeriphCLKFreq+0x816>
 800c664:	e05b      	b.n	800c71e <HAL_RCCEx_GetPeriphCLKFreq+0x8aa>
    {
      case RCC_ADCCLKSOURCE_PLL2:
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800c666:	4b92      	ldr	r3, [pc, #584]	; (800c8b0 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800c668:	681b      	ldr	r3, [r3, #0]
 800c66a:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800c66e:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800c672:	d107      	bne.n	800c684 <HAL_RCCEx_GetPeriphCLKFreq+0x810>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800c674:	f107 0318 	add.w	r3, r7, #24
 800c678:	4618      	mov	r0, r3
 800c67a:	f000 f991 	bl	800c9a0 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 800c67e:	69bb      	ldr	r3, [r7, #24]
 800c680:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800c682:	e16e      	b.n	800c962 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800c684:	2300      	movs	r3, #0
 800c686:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800c688:	e16b      	b.n	800c962 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_ADCCLKSOURCE_PLL3:
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800c68a:	4b89      	ldr	r3, [pc, #548]	; (800c8b0 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800c68c:	681b      	ldr	r3, [r3, #0]
 800c68e:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800c692:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800c696:	d107      	bne.n	800c6a8 <HAL_RCCEx_GetPeriphCLKFreq+0x834>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800c698:	f107 030c 	add.w	r3, r7, #12
 800c69c:	4618      	mov	r0, r3
 800c69e:	f000 fad3 	bl	800cc48 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_R_Frequency;
 800c6a2:	697b      	ldr	r3, [r7, #20]
 800c6a4:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800c6a6:	e15c      	b.n	800c962 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800c6a8:	2300      	movs	r3, #0
 800c6aa:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800c6ac:	e159      	b.n	800c962 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_ADCCLKSOURCE_CLKP:
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 800c6ae:	4b80      	ldr	r3, [pc, #512]	; (800c8b0 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800c6b0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800c6b2:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800c6b6:	637b      	str	r3, [r7, #52]	; 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 800c6b8:	4b7d      	ldr	r3, [pc, #500]	; (800c8b0 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800c6ba:	681b      	ldr	r3, [r3, #0]
 800c6bc:	f003 0304 	and.w	r3, r3, #4
 800c6c0:	2b04      	cmp	r3, #4
 800c6c2:	d10c      	bne.n	800c6de <HAL_RCCEx_GetPeriphCLKFreq+0x86a>
 800c6c4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800c6c6:	2b00      	cmp	r3, #0
 800c6c8:	d109      	bne.n	800c6de <HAL_RCCEx_GetPeriphCLKFreq+0x86a>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800c6ca:	4b79      	ldr	r3, [pc, #484]	; (800c8b0 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800c6cc:	681b      	ldr	r3, [r3, #0]
 800c6ce:	08db      	lsrs	r3, r3, #3
 800c6d0:	f003 0303 	and.w	r3, r3, #3
 800c6d4:	4a77      	ldr	r2, [pc, #476]	; (800c8b4 <HAL_RCCEx_GetPeriphCLKFreq+0xa40>)
 800c6d6:	fa22 f303 	lsr.w	r3, r2, r3
 800c6da:	63fb      	str	r3, [r7, #60]	; 0x3c
 800c6dc:	e01e      	b.n	800c71c <HAL_RCCEx_GetPeriphCLKFreq+0x8a8>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 800c6de:	4b74      	ldr	r3, [pc, #464]	; (800c8b0 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800c6e0:	681b      	ldr	r3, [r3, #0]
 800c6e2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800c6e6:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800c6ea:	d106      	bne.n	800c6fa <HAL_RCCEx_GetPeriphCLKFreq+0x886>
 800c6ec:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800c6ee:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800c6f2:	d102      	bne.n	800c6fa <HAL_RCCEx_GetPeriphCLKFreq+0x886>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 800c6f4:	4b70      	ldr	r3, [pc, #448]	; (800c8b8 <HAL_RCCEx_GetPeriphCLKFreq+0xa44>)
 800c6f6:	63fb      	str	r3, [r7, #60]	; 0x3c
 800c6f8:	e010      	b.n	800c71c <HAL_RCCEx_GetPeriphCLKFreq+0x8a8>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 800c6fa:	4b6d      	ldr	r3, [pc, #436]	; (800c8b0 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800c6fc:	681b      	ldr	r3, [r3, #0]
 800c6fe:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800c702:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800c706:	d106      	bne.n	800c716 <HAL_RCCEx_GetPeriphCLKFreq+0x8a2>
 800c708:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800c70a:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800c70e:	d102      	bne.n	800c716 <HAL_RCCEx_GetPeriphCLKFreq+0x8a2>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 800c710:	4b6a      	ldr	r3, [pc, #424]	; (800c8bc <HAL_RCCEx_GetPeriphCLKFreq+0xa48>)
 800c712:	63fb      	str	r3, [r7, #60]	; 0x3c
 800c714:	e002      	b.n	800c71c <HAL_RCCEx_GetPeriphCLKFreq+0x8a8>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 800c716:	2300      	movs	r3, #0
 800c718:	63fb      	str	r3, [r7, #60]	; 0x3c
        }

        break;
 800c71a:	e122      	b.n	800c962 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 800c71c:	e121      	b.n	800c962 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      default :
      {
        frequency = 0;
 800c71e:	2300      	movs	r3, #0
 800c720:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800c722:	e11e      	b.n	800c962 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SDMMC)
 800c724:	e9d7 2300 	ldrd	r2, r3, [r7]
 800c728:	f5a2 3180 	sub.w	r1, r2, #65536	; 0x10000
 800c72c:	430b      	orrs	r3, r1
 800c72e:	d133      	bne.n	800c798 <HAL_RCCEx_GetPeriphCLKFreq+0x924>
  {
    /* Get SDMMC clock source */
    srcclk = __HAL_RCC_GET_SDMMC_SOURCE();
 800c730:	4b5f      	ldr	r3, [pc, #380]	; (800c8b0 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800c732:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800c734:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800c738:	63bb      	str	r3, [r7, #56]	; 0x38

    switch (srcclk)
 800c73a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c73c:	2b00      	cmp	r3, #0
 800c73e:	d004      	beq.n	800c74a <HAL_RCCEx_GetPeriphCLKFreq+0x8d6>
 800c740:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c742:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800c746:	d012      	beq.n	800c76e <HAL_RCCEx_GetPeriphCLKFreq+0x8fa>
 800c748:	e023      	b.n	800c792 <HAL_RCCEx_GetPeriphCLKFreq+0x91e>
    {
      case RCC_SDMMCCLKSOURCE_PLL: /* PLL1 is the clock source for SDMMC */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 800c74a:	4b59      	ldr	r3, [pc, #356]	; (800c8b0 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800c74c:	681b      	ldr	r3, [r3, #0]
 800c74e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800c752:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800c756:	d107      	bne.n	800c768 <HAL_RCCEx_GetPeriphCLKFreq+0x8f4>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800c758:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800c75c:	4618      	mov	r0, r3
 800c75e:	f000 fbc7 	bl	800cef0 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 800c762:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c764:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800c766:	e0fc      	b.n	800c962 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800c768:	2300      	movs	r3, #0
 800c76a:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800c76c:	e0f9      	b.n	800c962 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is the clock source for SDMMC */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800c76e:	4b50      	ldr	r3, [pc, #320]	; (800c8b0 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800c770:	681b      	ldr	r3, [r3, #0]
 800c772:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800c776:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800c77a:	d107      	bne.n	800c78c <HAL_RCCEx_GetPeriphCLKFreq+0x918>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800c77c:	f107 0318 	add.w	r3, r7, #24
 800c780:	4618      	mov	r0, r3
 800c782:	f000 f90d 	bl	800c9a0 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_R_Frequency;
 800c786:	6a3b      	ldr	r3, [r7, #32]
 800c788:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800c78a:	e0ea      	b.n	800c962 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800c78c:	2300      	movs	r3, #0
 800c78e:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800c790:	e0e7      	b.n	800c962 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      default :
      {
        frequency = 0;
 800c792:	2300      	movs	r3, #0
 800c794:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800c796:	e0e4      	b.n	800c962 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SPI6)
 800c798:	e9d7 2300 	ldrd	r2, r3, [r7]
 800c79c:	f5a2 4180 	sub.w	r1, r2, #16384	; 0x4000
 800c7a0:	430b      	orrs	r3, r1
 800c7a2:	f040 808d 	bne.w	800c8c0 <HAL_RCCEx_GetPeriphCLKFreq+0xa4c>
  {
    /* Get SPI6 clock source */
    srcclk = __HAL_RCC_GET_SPI6_SOURCE();
 800c7a6:	4b42      	ldr	r3, [pc, #264]	; (800c8b0 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800c7a8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800c7aa:	f003 43e0 	and.w	r3, r3, #1879048192	; 0x70000000
 800c7ae:	63bb      	str	r3, [r7, #56]	; 0x38

    switch (srcclk)
 800c7b0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c7b2:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800c7b6:	d06b      	beq.n	800c890 <HAL_RCCEx_GetPeriphCLKFreq+0xa1c>
 800c7b8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c7ba:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800c7be:	d874      	bhi.n	800c8aa <HAL_RCCEx_GetPeriphCLKFreq+0xa36>
 800c7c0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c7c2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800c7c6:	d056      	beq.n	800c876 <HAL_RCCEx_GetPeriphCLKFreq+0xa02>
 800c7c8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c7ca:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800c7ce:	d86c      	bhi.n	800c8aa <HAL_RCCEx_GetPeriphCLKFreq+0xa36>
 800c7d0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c7d2:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 800c7d6:	d03b      	beq.n	800c850 <HAL_RCCEx_GetPeriphCLKFreq+0x9dc>
 800c7d8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c7da:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 800c7de:	d864      	bhi.n	800c8aa <HAL_RCCEx_GetPeriphCLKFreq+0xa36>
 800c7e0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c7e2:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800c7e6:	d021      	beq.n	800c82c <HAL_RCCEx_GetPeriphCLKFreq+0x9b8>
 800c7e8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c7ea:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800c7ee:	d85c      	bhi.n	800c8aa <HAL_RCCEx_GetPeriphCLKFreq+0xa36>
 800c7f0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c7f2:	2b00      	cmp	r3, #0
 800c7f4:	d004      	beq.n	800c800 <HAL_RCCEx_GetPeriphCLKFreq+0x98c>
 800c7f6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c7f8:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800c7fc:	d004      	beq.n	800c808 <HAL_RCCEx_GetPeriphCLKFreq+0x994>
 800c7fe:	e054      	b.n	800c8aa <HAL_RCCEx_GetPeriphCLKFreq+0xa36>
    {
      case RCC_SPI6CLKSOURCE_D3PCLK1: /* D3PCLK1 (PCLK4) is the clock source for SPI6 */
      {
        frequency = HAL_RCCEx_GetD3PCLK1Freq();
 800c800:	f000 f8b8 	bl	800c974 <HAL_RCCEx_GetD3PCLK1Freq>
 800c804:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 800c806:	e0ac      	b.n	800c962 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800c808:	4b29      	ldr	r3, [pc, #164]	; (800c8b0 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800c80a:	681b      	ldr	r3, [r3, #0]
 800c80c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800c810:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800c814:	d107      	bne.n	800c826 <HAL_RCCEx_GetPeriphCLKFreq+0x9b2>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800c816:	f107 0318 	add.w	r3, r7, #24
 800c81a:	4618      	mov	r0, r3
 800c81c:	f000 f8c0 	bl	800c9a0 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 800c820:	69fb      	ldr	r3, [r7, #28]
 800c822:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800c824:	e09d      	b.n	800c962 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800c826:	2300      	movs	r3, #0
 800c828:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800c82a:	e09a      	b.n	800c962 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI6CLKSOURCE_PLL3: /* PLL3 is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800c82c:	4b20      	ldr	r3, [pc, #128]	; (800c8b0 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800c82e:	681b      	ldr	r3, [r3, #0]
 800c830:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800c834:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800c838:	d107      	bne.n	800c84a <HAL_RCCEx_GetPeriphCLKFreq+0x9d6>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800c83a:	f107 030c 	add.w	r3, r7, #12
 800c83e:	4618      	mov	r0, r3
 800c840:	f000 fa02 	bl	800cc48 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 800c844:	693b      	ldr	r3, [r7, #16]
 800c846:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800c848:	e08b      	b.n	800c962 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800c84a:	2300      	movs	r3, #0
 800c84c:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800c84e:	e088      	b.n	800c962 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI6CLKSOURCE_HSI: /* HSI is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 800c850:	4b17      	ldr	r3, [pc, #92]	; (800c8b0 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800c852:	681b      	ldr	r3, [r3, #0]
 800c854:	f003 0304 	and.w	r3, r3, #4
 800c858:	2b04      	cmp	r3, #4
 800c85a:	d109      	bne.n	800c870 <HAL_RCCEx_GetPeriphCLKFreq+0x9fc>
        {
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800c85c:	4b14      	ldr	r3, [pc, #80]	; (800c8b0 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800c85e:	681b      	ldr	r3, [r3, #0]
 800c860:	08db      	lsrs	r3, r3, #3
 800c862:	f003 0303 	and.w	r3, r3, #3
 800c866:	4a13      	ldr	r2, [pc, #76]	; (800c8b4 <HAL_RCCEx_GetPeriphCLKFreq+0xa40>)
 800c868:	fa22 f303 	lsr.w	r3, r2, r3
 800c86c:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800c86e:	e078      	b.n	800c962 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800c870:	2300      	movs	r3, #0
 800c872:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800c874:	e075      	b.n	800c962 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI6CLKSOURCE_CSI: /* CSI is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY))
 800c876:	4b0e      	ldr	r3, [pc, #56]	; (800c8b0 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800c878:	681b      	ldr	r3, [r3, #0]
 800c87a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800c87e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800c882:	d102      	bne.n	800c88a <HAL_RCCEx_GetPeriphCLKFreq+0xa16>
        {
          frequency = CSI_VALUE;
 800c884:	4b0c      	ldr	r3, [pc, #48]	; (800c8b8 <HAL_RCCEx_GetPeriphCLKFreq+0xa44>)
 800c886:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800c888:	e06b      	b.n	800c962 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800c88a:	2300      	movs	r3, #0
 800c88c:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800c88e:	e068      	b.n	800c962 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI6CLKSOURCE_HSE: /* HSE is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 800c890:	4b07      	ldr	r3, [pc, #28]	; (800c8b0 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800c892:	681b      	ldr	r3, [r3, #0]
 800c894:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800c898:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800c89c:	d102      	bne.n	800c8a4 <HAL_RCCEx_GetPeriphCLKFreq+0xa30>
        {
          frequency = HSE_VALUE;
 800c89e:	4b07      	ldr	r3, [pc, #28]	; (800c8bc <HAL_RCCEx_GetPeriphCLKFreq+0xa48>)
 800c8a0:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800c8a2:	e05e      	b.n	800c962 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800c8a4:	2300      	movs	r3, #0
 800c8a6:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800c8a8:	e05b      	b.n	800c962 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
        break;
      }
#endif /* RCC_SPI6CLKSOURCE_PIN */
      default :
      {
        frequency = 0;
 800c8aa:	2300      	movs	r3, #0
 800c8ac:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800c8ae:	e058      	b.n	800c962 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 800c8b0:	58024400 	.word	0x58024400
 800c8b4:	03d09000 	.word	0x03d09000
 800c8b8:	003d0900 	.word	0x003d0900
 800c8bc:	00989680 	.word	0x00989680
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_FDCAN)
 800c8c0:	e9d7 2300 	ldrd	r2, r3, [r7]
 800c8c4:	f5a2 4100 	sub.w	r1, r2, #32768	; 0x8000
 800c8c8:	430b      	orrs	r3, r1
 800c8ca:	d148      	bne.n	800c95e <HAL_RCCEx_GetPeriphCLKFreq+0xaea>
  {
    /* Get FDCAN clock source */
    srcclk = __HAL_RCC_GET_FDCAN_SOURCE();
 800c8cc:	4b27      	ldr	r3, [pc, #156]	; (800c96c <HAL_RCCEx_GetPeriphCLKFreq+0xaf8>)
 800c8ce:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800c8d0:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800c8d4:	63bb      	str	r3, [r7, #56]	; 0x38

    switch (srcclk)
 800c8d6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c8d8:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800c8dc:	d02a      	beq.n	800c934 <HAL_RCCEx_GetPeriphCLKFreq+0xac0>
 800c8de:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c8e0:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800c8e4:	d838      	bhi.n	800c958 <HAL_RCCEx_GetPeriphCLKFreq+0xae4>
 800c8e6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c8e8:	2b00      	cmp	r3, #0
 800c8ea:	d004      	beq.n	800c8f6 <HAL_RCCEx_GetPeriphCLKFreq+0xa82>
 800c8ec:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c8ee:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800c8f2:	d00d      	beq.n	800c910 <HAL_RCCEx_GetPeriphCLKFreq+0xa9c>
 800c8f4:	e030      	b.n	800c958 <HAL_RCCEx_GetPeriphCLKFreq+0xae4>
    {
      case RCC_FDCANCLKSOURCE_HSE: /* HSE is the clock source for FDCAN */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 800c8f6:	4b1d      	ldr	r3, [pc, #116]	; (800c96c <HAL_RCCEx_GetPeriphCLKFreq+0xaf8>)
 800c8f8:	681b      	ldr	r3, [r3, #0]
 800c8fa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800c8fe:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800c902:	d102      	bne.n	800c90a <HAL_RCCEx_GetPeriphCLKFreq+0xa96>
        {
          frequency = HSE_VALUE;
 800c904:	4b1a      	ldr	r3, [pc, #104]	; (800c970 <HAL_RCCEx_GetPeriphCLKFreq+0xafc>)
 800c906:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800c908:	e02b      	b.n	800c962 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800c90a:	2300      	movs	r3, #0
 800c90c:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800c90e:	e028      	b.n	800c962 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_FDCANCLKSOURCE_PLL: /* PLL is the clock source for FDCAN */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 800c910:	4b16      	ldr	r3, [pc, #88]	; (800c96c <HAL_RCCEx_GetPeriphCLKFreq+0xaf8>)
 800c912:	681b      	ldr	r3, [r3, #0]
 800c914:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800c918:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800c91c:	d107      	bne.n	800c92e <HAL_RCCEx_GetPeriphCLKFreq+0xaba>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800c91e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800c922:	4618      	mov	r0, r3
 800c924:	f000 fae4 	bl	800cef0 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 800c928:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c92a:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800c92c:	e019      	b.n	800c962 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800c92e:	2300      	movs	r3, #0
 800c930:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800c932:	e016      	b.n	800c962 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is the clock source for FDCAN */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800c934:	4b0d      	ldr	r3, [pc, #52]	; (800c96c <HAL_RCCEx_GetPeriphCLKFreq+0xaf8>)
 800c936:	681b      	ldr	r3, [r3, #0]
 800c938:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800c93c:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800c940:	d107      	bne.n	800c952 <HAL_RCCEx_GetPeriphCLKFreq+0xade>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800c942:	f107 0318 	add.w	r3, r7, #24
 800c946:	4618      	mov	r0, r3
 800c948:	f000 f82a 	bl	800c9a0 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 800c94c:	69fb      	ldr	r3, [r7, #28]
 800c94e:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800c950:	e007      	b.n	800c962 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800c952:	2300      	movs	r3, #0
 800c954:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800c956:	e004      	b.n	800c962 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      default :
      {
        frequency = 0;
 800c958:	2300      	movs	r3, #0
 800c95a:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800c95c:	e001      	b.n	800c962 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }
  else
  {
    frequency = 0;
 800c95e:	2300      	movs	r3, #0
 800c960:	63fb      	str	r3, [r7, #60]	; 0x3c
  }

  return frequency;
 800c962:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 800c964:	4618      	mov	r0, r3
 800c966:	3740      	adds	r7, #64	; 0x40
 800c968:	46bd      	mov	sp, r7
 800c96a:	bd80      	pop	{r7, pc}
 800c96c:	58024400 	.word	0x58024400
 800c970:	00989680 	.word	0x00989680

0800c974 <HAL_RCCEx_GetD3PCLK1Freq>:
  * @note   Each time D3PCLK1 changes, this function must be called to update the
  *         right D3PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval D3PCLK1 frequency
  */
uint32_t HAL_RCCEx_GetD3PCLK1Freq(void)
{
 800c974:	b580      	push	{r7, lr}
 800c976:	af00      	add	r7, sp, #0
#if defined(RCC_D3CFGR_D3PPRE)
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->D3CFGR & RCC_D3CFGR_D3PPRE) >> RCC_D3CFGR_D3PPRE_Pos] & 0x1FU));
 800c978:	f7fd fffa 	bl	800a970 <HAL_RCC_GetHCLKFreq>
 800c97c:	4602      	mov	r2, r0
 800c97e:	4b06      	ldr	r3, [pc, #24]	; (800c998 <HAL_RCCEx_GetD3PCLK1Freq+0x24>)
 800c980:	6a1b      	ldr	r3, [r3, #32]
 800c982:	091b      	lsrs	r3, r3, #4
 800c984:	f003 0307 	and.w	r3, r3, #7
 800c988:	4904      	ldr	r1, [pc, #16]	; (800c99c <HAL_RCCEx_GetD3PCLK1Freq+0x28>)
 800c98a:	5ccb      	ldrb	r3, [r1, r3]
 800c98c:	f003 031f 	and.w	r3, r3, #31
 800c990:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE) >> RCC_SRDCFGR_SRDPPRE_Pos] & 0x1FU));
#endif
}
 800c994:	4618      	mov	r0, r3
 800c996:	bd80      	pop	{r7, pc}
 800c998:	58024400 	.word	0x58024400
 800c99c:	0801ef28 	.word	0x0801ef28

0800c9a0 <HAL_RCCEx_GetPLL2ClockFreq>:
  *         right PLL2CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL2_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL2ClockFreq(PLL2_ClocksTypeDef *PLL2_Clocks)
{
 800c9a0:	b480      	push	{r7}
 800c9a2:	b089      	sub	sp, #36	; 0x24
 800c9a4:	af00      	add	r7, sp, #0
 800c9a6:	6078      	str	r0, [r7, #4]
  float_t fracn2, pll2vco;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL2M) * PLL2N
     PLL2xCLK = PLL2_VCO / PLL2x
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 800c9a8:	4ba1      	ldr	r3, [pc, #644]	; (800cc30 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800c9aa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800c9ac:	f003 0303 	and.w	r3, r3, #3
 800c9b0:	61bb      	str	r3, [r7, #24]
  pll2m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM2) >> 12);
 800c9b2:	4b9f      	ldr	r3, [pc, #636]	; (800cc30 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800c9b4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800c9b6:	0b1b      	lsrs	r3, r3, #12
 800c9b8:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800c9bc:	617b      	str	r3, [r7, #20]
  pll2fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL2FRACEN) >> RCC_PLLCFGR_PLL2FRACEN_Pos;
 800c9be:	4b9c      	ldr	r3, [pc, #624]	; (800cc30 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800c9c0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c9c2:	091b      	lsrs	r3, r3, #4
 800c9c4:	f003 0301 	and.w	r3, r3, #1
 800c9c8:	613b      	str	r3, [r7, #16]
  fracn2 = (float_t)(uint32_t)(pll2fracen * ((RCC->PLL2FRACR & RCC_PLL2FRACR_FRACN2) >> 3));
 800c9ca:	4b99      	ldr	r3, [pc, #612]	; (800cc30 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800c9cc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800c9ce:	08db      	lsrs	r3, r3, #3
 800c9d0:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800c9d4:	693a      	ldr	r2, [r7, #16]
 800c9d6:	fb02 f303 	mul.w	r3, r2, r3
 800c9da:	ee07 3a90 	vmov	s15, r3
 800c9de:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800c9e2:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll2m != 0U)
 800c9e6:	697b      	ldr	r3, [r7, #20]
 800c9e8:	2b00      	cmp	r3, #0
 800c9ea:	f000 8111 	beq.w	800cc10 <HAL_RCCEx_GetPLL2ClockFreq+0x270>
  {
    switch (pllsource)
 800c9ee:	69bb      	ldr	r3, [r7, #24]
 800c9f0:	2b02      	cmp	r3, #2
 800c9f2:	f000 8083 	beq.w	800cafc <HAL_RCCEx_GetPLL2ClockFreq+0x15c>
 800c9f6:	69bb      	ldr	r3, [r7, #24]
 800c9f8:	2b02      	cmp	r3, #2
 800c9fa:	f200 80a1 	bhi.w	800cb40 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
 800c9fe:	69bb      	ldr	r3, [r7, #24]
 800ca00:	2b00      	cmp	r3, #0
 800ca02:	d003      	beq.n	800ca0c <HAL_RCCEx_GetPLL2ClockFreq+0x6c>
 800ca04:	69bb      	ldr	r3, [r7, #24]
 800ca06:	2b01      	cmp	r3, #1
 800ca08:	d056      	beq.n	800cab8 <HAL_RCCEx_GetPLL2ClockFreq+0x118>
 800ca0a:	e099      	b.n	800cb40 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
    {

      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800ca0c:	4b88      	ldr	r3, [pc, #544]	; (800cc30 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800ca0e:	681b      	ldr	r3, [r3, #0]
 800ca10:	f003 0320 	and.w	r3, r3, #32
 800ca14:	2b00      	cmp	r3, #0
 800ca16:	d02d      	beq.n	800ca74 <HAL_RCCEx_GetPLL2ClockFreq+0xd4>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800ca18:	4b85      	ldr	r3, [pc, #532]	; (800cc30 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800ca1a:	681b      	ldr	r3, [r3, #0]
 800ca1c:	08db      	lsrs	r3, r3, #3
 800ca1e:	f003 0303 	and.w	r3, r3, #3
 800ca22:	4a84      	ldr	r2, [pc, #528]	; (800cc34 <HAL_RCCEx_GetPLL2ClockFreq+0x294>)
 800ca24:	fa22 f303 	lsr.w	r3, r2, r3
 800ca28:	60bb      	str	r3, [r7, #8]
          pll2vco = ((float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 800ca2a:	68bb      	ldr	r3, [r7, #8]
 800ca2c:	ee07 3a90 	vmov	s15, r3
 800ca30:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800ca34:	697b      	ldr	r3, [r7, #20]
 800ca36:	ee07 3a90 	vmov	s15, r3
 800ca3a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800ca3e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800ca42:	4b7b      	ldr	r3, [pc, #492]	; (800cc30 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800ca44:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ca46:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800ca4a:	ee07 3a90 	vmov	s15, r3
 800ca4e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800ca52:	ed97 6a03 	vldr	s12, [r7, #12]
 800ca56:	eddf 5a78 	vldr	s11, [pc, #480]	; 800cc38 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800ca5a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800ca5e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800ca62:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800ca66:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800ca6a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800ca6e:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
        }
        break;
 800ca72:	e087      	b.n	800cb84 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>
          pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 800ca74:	697b      	ldr	r3, [r7, #20]
 800ca76:	ee07 3a90 	vmov	s15, r3
 800ca7a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800ca7e:	eddf 6a6f 	vldr	s13, [pc, #444]	; 800cc3c <HAL_RCCEx_GetPLL2ClockFreq+0x29c>
 800ca82:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800ca86:	4b6a      	ldr	r3, [pc, #424]	; (800cc30 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800ca88:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ca8a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800ca8e:	ee07 3a90 	vmov	s15, r3
 800ca92:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800ca96:	ed97 6a03 	vldr	s12, [r7, #12]
 800ca9a:	eddf 5a67 	vldr	s11, [pc, #412]	; 800cc38 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800ca9e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800caa2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800caa6:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800caaa:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800caae:	ee67 7a27 	vmul.f32	s15, s14, s15
 800cab2:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800cab6:	e065      	b.n	800cb84 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 800cab8:	697b      	ldr	r3, [r7, #20]
 800caba:	ee07 3a90 	vmov	s15, r3
 800cabe:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800cac2:	eddf 6a5f 	vldr	s13, [pc, #380]	; 800cc40 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 800cac6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800caca:	4b59      	ldr	r3, [pc, #356]	; (800cc30 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800cacc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800cace:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800cad2:	ee07 3a90 	vmov	s15, r3
 800cad6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800cada:	ed97 6a03 	vldr	s12, [r7, #12]
 800cade:	eddf 5a56 	vldr	s11, [pc, #344]	; 800cc38 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800cae2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800cae6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800caea:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800caee:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800caf2:	ee67 7a27 	vmul.f32	s15, s14, s15
 800caf6:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800cafa:	e043      	b.n	800cb84 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 800cafc:	697b      	ldr	r3, [r7, #20]
 800cafe:	ee07 3a90 	vmov	s15, r3
 800cb02:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800cb06:	eddf 6a4f 	vldr	s13, [pc, #316]	; 800cc44 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>
 800cb0a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800cb0e:	4b48      	ldr	r3, [pc, #288]	; (800cc30 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800cb10:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800cb12:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800cb16:	ee07 3a90 	vmov	s15, r3
 800cb1a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800cb1e:	ed97 6a03 	vldr	s12, [r7, #12]
 800cb22:	eddf 5a45 	vldr	s11, [pc, #276]	; 800cc38 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800cb26:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800cb2a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800cb2e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800cb32:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800cb36:	ee67 7a27 	vmul.f32	s15, s14, s15
 800cb3a:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800cb3e:	e021      	b.n	800cb84 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      default:
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 800cb40:	697b      	ldr	r3, [r7, #20]
 800cb42:	ee07 3a90 	vmov	s15, r3
 800cb46:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800cb4a:	eddf 6a3d 	vldr	s13, [pc, #244]	; 800cc40 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 800cb4e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800cb52:	4b37      	ldr	r3, [pc, #220]	; (800cc30 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800cb54:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800cb56:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800cb5a:	ee07 3a90 	vmov	s15, r3
 800cb5e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800cb62:	ed97 6a03 	vldr	s12, [r7, #12]
 800cb66:	eddf 5a34 	vldr	s11, [pc, #208]	; 800cc38 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800cb6a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800cb6e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800cb72:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800cb76:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800cb7a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800cb7e:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800cb82:	bf00      	nop
    }
    PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_P2) >> 9)  + (float_t)1)) ;
 800cb84:	4b2a      	ldr	r3, [pc, #168]	; (800cc30 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800cb86:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800cb88:	0a5b      	lsrs	r3, r3, #9
 800cb8a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800cb8e:	ee07 3a90 	vmov	s15, r3
 800cb92:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800cb96:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800cb9a:	ee37 7a87 	vadd.f32	s14, s15, s14
 800cb9e:	edd7 6a07 	vldr	s13, [r7, #28]
 800cba2:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800cba6:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800cbaa:	ee17 2a90 	vmov	r2, s15
 800cbae:	687b      	ldr	r3, [r7, #4]
 800cbb0:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_Q2) >> 16) + (float_t)1)) ;
 800cbb2:	4b1f      	ldr	r3, [pc, #124]	; (800cc30 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800cbb4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800cbb6:	0c1b      	lsrs	r3, r3, #16
 800cbb8:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800cbbc:	ee07 3a90 	vmov	s15, r3
 800cbc0:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800cbc4:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800cbc8:	ee37 7a87 	vadd.f32	s14, s15, s14
 800cbcc:	edd7 6a07 	vldr	s13, [r7, #28]
 800cbd0:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800cbd4:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800cbd8:	ee17 2a90 	vmov	r2, s15
 800cbdc:	687b      	ldr	r3, [r7, #4]
 800cbde:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_R2) >> 24) + (float_t)1)) ;
 800cbe0:	4b13      	ldr	r3, [pc, #76]	; (800cc30 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800cbe2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800cbe4:	0e1b      	lsrs	r3, r3, #24
 800cbe6:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800cbea:	ee07 3a90 	vmov	s15, r3
 800cbee:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800cbf2:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800cbf6:	ee37 7a87 	vadd.f32	s14, s15, s14
 800cbfa:	edd7 6a07 	vldr	s13, [r7, #28]
 800cbfe:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800cc02:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800cc06:	ee17 2a90 	vmov	r2, s15
 800cc0a:	687b      	ldr	r3, [r7, #4]
 800cc0c:	609a      	str	r2, [r3, #8]
  {
    PLL2_Clocks->PLL2_P_Frequency = 0U;
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
    PLL2_Clocks->PLL2_R_Frequency = 0U;
  }
}
 800cc0e:	e008      	b.n	800cc22 <HAL_RCCEx_GetPLL2ClockFreq+0x282>
    PLL2_Clocks->PLL2_P_Frequency = 0U;
 800cc10:	687b      	ldr	r3, [r7, #4]
 800cc12:	2200      	movs	r2, #0
 800cc14:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
 800cc16:	687b      	ldr	r3, [r7, #4]
 800cc18:	2200      	movs	r2, #0
 800cc1a:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = 0U;
 800cc1c:	687b      	ldr	r3, [r7, #4]
 800cc1e:	2200      	movs	r2, #0
 800cc20:	609a      	str	r2, [r3, #8]
}
 800cc22:	bf00      	nop
 800cc24:	3724      	adds	r7, #36	; 0x24
 800cc26:	46bd      	mov	sp, r7
 800cc28:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cc2c:	4770      	bx	lr
 800cc2e:	bf00      	nop
 800cc30:	58024400 	.word	0x58024400
 800cc34:	03d09000 	.word	0x03d09000
 800cc38:	46000000 	.word	0x46000000
 800cc3c:	4c742400 	.word	0x4c742400
 800cc40:	4a742400 	.word	0x4a742400
 800cc44:	4b189680 	.word	0x4b189680

0800cc48 <HAL_RCCEx_GetPLL3ClockFreq>:
  *         right PLL3CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL3_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL3ClockFreq(PLL3_ClocksTypeDef *PLL3_Clocks)
{
 800cc48:	b480      	push	{r7}
 800cc4a:	b089      	sub	sp, #36	; 0x24
 800cc4c:	af00      	add	r7, sp, #0
 800cc4e:	6078      	str	r0, [r7, #4]
  float_t fracn3, pll3vco;

  /* PLL3_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL3M) * PLL3N
     PLL3xCLK = PLL3_VCO / PLLxR
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 800cc50:	4ba1      	ldr	r3, [pc, #644]	; (800ced8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800cc52:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800cc54:	f003 0303 	and.w	r3, r3, #3
 800cc58:	61bb      	str	r3, [r7, #24]
  pll3m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM3) >> 20)  ;
 800cc5a:	4b9f      	ldr	r3, [pc, #636]	; (800ced8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800cc5c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800cc5e:	0d1b      	lsrs	r3, r3, #20
 800cc60:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800cc64:	617b      	str	r3, [r7, #20]
  pll3fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL3FRACEN) >> RCC_PLLCFGR_PLL3FRACEN_Pos;
 800cc66:	4b9c      	ldr	r3, [pc, #624]	; (800ced8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800cc68:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800cc6a:	0a1b      	lsrs	r3, r3, #8
 800cc6c:	f003 0301 	and.w	r3, r3, #1
 800cc70:	613b      	str	r3, [r7, #16]
  fracn3 = (float_t)(uint32_t)(pll3fracen * ((RCC->PLL3FRACR & RCC_PLL3FRACR_FRACN3) >> 3));
 800cc72:	4b99      	ldr	r3, [pc, #612]	; (800ced8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800cc74:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800cc76:	08db      	lsrs	r3, r3, #3
 800cc78:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800cc7c:	693a      	ldr	r2, [r7, #16]
 800cc7e:	fb02 f303 	mul.w	r3, r2, r3
 800cc82:	ee07 3a90 	vmov	s15, r3
 800cc86:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800cc8a:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll3m != 0U)
 800cc8e:	697b      	ldr	r3, [r7, #20]
 800cc90:	2b00      	cmp	r3, #0
 800cc92:	f000 8111 	beq.w	800ceb8 <HAL_RCCEx_GetPLL3ClockFreq+0x270>
  {
    switch (pllsource)
 800cc96:	69bb      	ldr	r3, [r7, #24]
 800cc98:	2b02      	cmp	r3, #2
 800cc9a:	f000 8083 	beq.w	800cda4 <HAL_RCCEx_GetPLL3ClockFreq+0x15c>
 800cc9e:	69bb      	ldr	r3, [r7, #24]
 800cca0:	2b02      	cmp	r3, #2
 800cca2:	f200 80a1 	bhi.w	800cde8 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
 800cca6:	69bb      	ldr	r3, [r7, #24]
 800cca8:	2b00      	cmp	r3, #0
 800ccaa:	d003      	beq.n	800ccb4 <HAL_RCCEx_GetPLL3ClockFreq+0x6c>
 800ccac:	69bb      	ldr	r3, [r7, #24]
 800ccae:	2b01      	cmp	r3, #1
 800ccb0:	d056      	beq.n	800cd60 <HAL_RCCEx_GetPLL3ClockFreq+0x118>
 800ccb2:	e099      	b.n	800cde8 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
    {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800ccb4:	4b88      	ldr	r3, [pc, #544]	; (800ced8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800ccb6:	681b      	ldr	r3, [r3, #0]
 800ccb8:	f003 0320 	and.w	r3, r3, #32
 800ccbc:	2b00      	cmp	r3, #0
 800ccbe:	d02d      	beq.n	800cd1c <HAL_RCCEx_GetPLL3ClockFreq+0xd4>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800ccc0:	4b85      	ldr	r3, [pc, #532]	; (800ced8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800ccc2:	681b      	ldr	r3, [r3, #0]
 800ccc4:	08db      	lsrs	r3, r3, #3
 800ccc6:	f003 0303 	and.w	r3, r3, #3
 800ccca:	4a84      	ldr	r2, [pc, #528]	; (800cedc <HAL_RCCEx_GetPLL3ClockFreq+0x294>)
 800cccc:	fa22 f303 	lsr.w	r3, r2, r3
 800ccd0:	60bb      	str	r3, [r7, #8]
          pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 800ccd2:	68bb      	ldr	r3, [r7, #8]
 800ccd4:	ee07 3a90 	vmov	s15, r3
 800ccd8:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800ccdc:	697b      	ldr	r3, [r7, #20]
 800ccde:	ee07 3a90 	vmov	s15, r3
 800cce2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800cce6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800ccea:	4b7b      	ldr	r3, [pc, #492]	; (800ced8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800ccec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800ccee:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800ccf2:	ee07 3a90 	vmov	s15, r3
 800ccf6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800ccfa:	ed97 6a03 	vldr	s12, [r7, #12]
 800ccfe:	eddf 5a78 	vldr	s11, [pc, #480]	; 800cee0 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800cd02:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800cd06:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800cd0a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800cd0e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800cd12:	ee67 7a27 	vmul.f32	s15, s14, s15
 800cd16:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
        }
        break;
 800cd1a:	e087      	b.n	800ce2c <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
          pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 800cd1c:	697b      	ldr	r3, [r7, #20]
 800cd1e:	ee07 3a90 	vmov	s15, r3
 800cd22:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800cd26:	eddf 6a6f 	vldr	s13, [pc, #444]	; 800cee4 <HAL_RCCEx_GetPLL3ClockFreq+0x29c>
 800cd2a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800cd2e:	4b6a      	ldr	r3, [pc, #424]	; (800ced8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800cd30:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800cd32:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800cd36:	ee07 3a90 	vmov	s15, r3
 800cd3a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800cd3e:	ed97 6a03 	vldr	s12, [r7, #12]
 800cd42:	eddf 5a67 	vldr	s11, [pc, #412]	; 800cee0 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800cd46:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800cd4a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800cd4e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800cd52:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800cd56:	ee67 7a27 	vmul.f32	s15, s14, s15
 800cd5a:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800cd5e:	e065      	b.n	800ce2c <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 800cd60:	697b      	ldr	r3, [r7, #20]
 800cd62:	ee07 3a90 	vmov	s15, r3
 800cd66:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800cd6a:	eddf 6a5f 	vldr	s13, [pc, #380]	; 800cee8 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 800cd6e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800cd72:	4b59      	ldr	r3, [pc, #356]	; (800ced8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800cd74:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800cd76:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800cd7a:	ee07 3a90 	vmov	s15, r3
 800cd7e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800cd82:	ed97 6a03 	vldr	s12, [r7, #12]
 800cd86:	eddf 5a56 	vldr	s11, [pc, #344]	; 800cee0 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800cd8a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800cd8e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800cd92:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800cd96:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800cd9a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800cd9e:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800cda2:	e043      	b.n	800ce2c <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 800cda4:	697b      	ldr	r3, [r7, #20]
 800cda6:	ee07 3a90 	vmov	s15, r3
 800cdaa:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800cdae:	eddf 6a4f 	vldr	s13, [pc, #316]	; 800ceec <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>
 800cdb2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800cdb6:	4b48      	ldr	r3, [pc, #288]	; (800ced8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800cdb8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800cdba:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800cdbe:	ee07 3a90 	vmov	s15, r3
 800cdc2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800cdc6:	ed97 6a03 	vldr	s12, [r7, #12]
 800cdca:	eddf 5a45 	vldr	s11, [pc, #276]	; 800cee0 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800cdce:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800cdd2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800cdd6:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800cdda:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800cdde:	ee67 7a27 	vmul.f32	s15, s14, s15
 800cde2:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800cde6:	e021      	b.n	800ce2c <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

      default:
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 800cde8:	697b      	ldr	r3, [r7, #20]
 800cdea:	ee07 3a90 	vmov	s15, r3
 800cdee:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800cdf2:	eddf 6a3d 	vldr	s13, [pc, #244]	; 800cee8 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 800cdf6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800cdfa:	4b37      	ldr	r3, [pc, #220]	; (800ced8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800cdfc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800cdfe:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800ce02:	ee07 3a90 	vmov	s15, r3
 800ce06:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800ce0a:	ed97 6a03 	vldr	s12, [r7, #12]
 800ce0e:	eddf 5a34 	vldr	s11, [pc, #208]	; 800cee0 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800ce12:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800ce16:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800ce1a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800ce1e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800ce22:	ee67 7a27 	vmul.f32	s15, s14, s15
 800ce26:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800ce2a:	bf00      	nop
    }
    PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_P3) >> 9)  + (float_t)1)) ;
 800ce2c:	4b2a      	ldr	r3, [pc, #168]	; (800ced8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800ce2e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800ce30:	0a5b      	lsrs	r3, r3, #9
 800ce32:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800ce36:	ee07 3a90 	vmov	s15, r3
 800ce3a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800ce3e:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800ce42:	ee37 7a87 	vadd.f32	s14, s15, s14
 800ce46:	edd7 6a07 	vldr	s13, [r7, #28]
 800ce4a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800ce4e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800ce52:	ee17 2a90 	vmov	r2, s15
 800ce56:	687b      	ldr	r3, [r7, #4]
 800ce58:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_Q3) >> 16) + (float_t)1)) ;
 800ce5a:	4b1f      	ldr	r3, [pc, #124]	; (800ced8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800ce5c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800ce5e:	0c1b      	lsrs	r3, r3, #16
 800ce60:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800ce64:	ee07 3a90 	vmov	s15, r3
 800ce68:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800ce6c:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800ce70:	ee37 7a87 	vadd.f32	s14, s15, s14
 800ce74:	edd7 6a07 	vldr	s13, [r7, #28]
 800ce78:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800ce7c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800ce80:	ee17 2a90 	vmov	r2, s15
 800ce84:	687b      	ldr	r3, [r7, #4]
 800ce86:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_R3) >> 24) + (float_t)1)) ;
 800ce88:	4b13      	ldr	r3, [pc, #76]	; (800ced8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800ce8a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800ce8c:	0e1b      	lsrs	r3, r3, #24
 800ce8e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800ce92:	ee07 3a90 	vmov	s15, r3
 800ce96:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800ce9a:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800ce9e:	ee37 7a87 	vadd.f32	s14, s15, s14
 800cea2:	edd7 6a07 	vldr	s13, [r7, #28]
 800cea6:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800ceaa:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800ceae:	ee17 2a90 	vmov	r2, s15
 800ceb2:	687b      	ldr	r3, [r7, #4]
 800ceb4:	609a      	str	r2, [r3, #8]
    PLL3_Clocks->PLL3_P_Frequency = 0U;
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
    PLL3_Clocks->PLL3_R_Frequency = 0U;
  }

}
 800ceb6:	e008      	b.n	800ceca <HAL_RCCEx_GetPLL3ClockFreq+0x282>
    PLL3_Clocks->PLL3_P_Frequency = 0U;
 800ceb8:	687b      	ldr	r3, [r7, #4]
 800ceba:	2200      	movs	r2, #0
 800cebc:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
 800cebe:	687b      	ldr	r3, [r7, #4]
 800cec0:	2200      	movs	r2, #0
 800cec2:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = 0U;
 800cec4:	687b      	ldr	r3, [r7, #4]
 800cec6:	2200      	movs	r2, #0
 800cec8:	609a      	str	r2, [r3, #8]
}
 800ceca:	bf00      	nop
 800cecc:	3724      	adds	r7, #36	; 0x24
 800cece:	46bd      	mov	sp, r7
 800ced0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ced4:	4770      	bx	lr
 800ced6:	bf00      	nop
 800ced8:	58024400 	.word	0x58024400
 800cedc:	03d09000 	.word	0x03d09000
 800cee0:	46000000 	.word	0x46000000
 800cee4:	4c742400 	.word	0x4c742400
 800cee8:	4a742400 	.word	0x4a742400
 800ceec:	4b189680 	.word	0x4b189680

0800cef0 <HAL_RCCEx_GetPLL1ClockFreq>:
  *         right PLL1CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL1_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL1ClockFreq(PLL1_ClocksTypeDef *PLL1_Clocks)
{
 800cef0:	b480      	push	{r7}
 800cef2:	b089      	sub	sp, #36	; 0x24
 800cef4:	af00      	add	r7, sp, #0
 800cef6:	6078      	str	r0, [r7, #4]
  uint32_t pllsource, pll1m, pll1fracen, hsivalue;
  float_t fracn1, pll1vco;

  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 800cef8:	4ba0      	ldr	r3, [pc, #640]	; (800d17c <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800cefa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800cefc:	f003 0303 	and.w	r3, r3, #3
 800cf00:	61bb      	str	r3, [r7, #24]
  pll1m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1) >> 4);
 800cf02:	4b9e      	ldr	r3, [pc, #632]	; (800d17c <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800cf04:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800cf06:	091b      	lsrs	r3, r3, #4
 800cf08:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800cf0c:	617b      	str	r3, [r7, #20]
  pll1fracen = RCC->PLLCFGR & RCC_PLLCFGR_PLL1FRACEN;
 800cf0e:	4b9b      	ldr	r3, [pc, #620]	; (800d17c <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800cf10:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800cf12:	f003 0301 	and.w	r3, r3, #1
 800cf16:	613b      	str	r3, [r7, #16]
  fracn1 = (float_t)(uint32_t)(pll1fracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
 800cf18:	4b98      	ldr	r3, [pc, #608]	; (800d17c <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800cf1a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800cf1c:	08db      	lsrs	r3, r3, #3
 800cf1e:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800cf22:	693a      	ldr	r2, [r7, #16]
 800cf24:	fb02 f303 	mul.w	r3, r2, r3
 800cf28:	ee07 3a90 	vmov	s15, r3
 800cf2c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800cf30:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll1m != 0U)
 800cf34:	697b      	ldr	r3, [r7, #20]
 800cf36:	2b00      	cmp	r3, #0
 800cf38:	f000 8111 	beq.w	800d15e <HAL_RCCEx_GetPLL1ClockFreq+0x26e>
  {
    switch (pllsource)
 800cf3c:	69bb      	ldr	r3, [r7, #24]
 800cf3e:	2b02      	cmp	r3, #2
 800cf40:	f000 8083 	beq.w	800d04a <HAL_RCCEx_GetPLL1ClockFreq+0x15a>
 800cf44:	69bb      	ldr	r3, [r7, #24]
 800cf46:	2b02      	cmp	r3, #2
 800cf48:	f200 80a1 	bhi.w	800d08e <HAL_RCCEx_GetPLL1ClockFreq+0x19e>
 800cf4c:	69bb      	ldr	r3, [r7, #24]
 800cf4e:	2b00      	cmp	r3, #0
 800cf50:	d003      	beq.n	800cf5a <HAL_RCCEx_GetPLL1ClockFreq+0x6a>
 800cf52:	69bb      	ldr	r3, [r7, #24]
 800cf54:	2b01      	cmp	r3, #1
 800cf56:	d056      	beq.n	800d006 <HAL_RCCEx_GetPLL1ClockFreq+0x116>
 800cf58:	e099      	b.n	800d08e <HAL_RCCEx_GetPLL1ClockFreq+0x19e>
    {

      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800cf5a:	4b88      	ldr	r3, [pc, #544]	; (800d17c <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800cf5c:	681b      	ldr	r3, [r3, #0]
 800cf5e:	f003 0320 	and.w	r3, r3, #32
 800cf62:	2b00      	cmp	r3, #0
 800cf64:	d02d      	beq.n	800cfc2 <HAL_RCCEx_GetPLL1ClockFreq+0xd2>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800cf66:	4b85      	ldr	r3, [pc, #532]	; (800d17c <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800cf68:	681b      	ldr	r3, [r3, #0]
 800cf6a:	08db      	lsrs	r3, r3, #3
 800cf6c:	f003 0303 	and.w	r3, r3, #3
 800cf70:	4a83      	ldr	r2, [pc, #524]	; (800d180 <HAL_RCCEx_GetPLL1ClockFreq+0x290>)
 800cf72:	fa22 f303 	lsr.w	r3, r2, r3
 800cf76:	60bb      	str	r3, [r7, #8]
          pll1vco = ((float_t)hsivalue / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800cf78:	68bb      	ldr	r3, [r7, #8]
 800cf7a:	ee07 3a90 	vmov	s15, r3
 800cf7e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800cf82:	697b      	ldr	r3, [r7, #20]
 800cf84:	ee07 3a90 	vmov	s15, r3
 800cf88:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800cf8c:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800cf90:	4b7a      	ldr	r3, [pc, #488]	; (800d17c <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800cf92:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800cf94:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800cf98:	ee07 3a90 	vmov	s15, r3
 800cf9c:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800cfa0:	ed97 6a03 	vldr	s12, [r7, #12]
 800cfa4:	eddf 5a77 	vldr	s11, [pc, #476]	; 800d184 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 800cfa8:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800cfac:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800cfb0:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800cfb4:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800cfb8:	ee67 7a27 	vmul.f32	s15, s14, s15
 800cfbc:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
        }
        break;
 800cfc0:	e087      	b.n	800d0d2 <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>
          pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800cfc2:	697b      	ldr	r3, [r7, #20]
 800cfc4:	ee07 3a90 	vmov	s15, r3
 800cfc8:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800cfcc:	eddf 6a6e 	vldr	s13, [pc, #440]	; 800d188 <HAL_RCCEx_GetPLL1ClockFreq+0x298>
 800cfd0:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800cfd4:	4b69      	ldr	r3, [pc, #420]	; (800d17c <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800cfd6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800cfd8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800cfdc:	ee07 3a90 	vmov	s15, r3
 800cfe0:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800cfe4:	ed97 6a03 	vldr	s12, [r7, #12]
 800cfe8:	eddf 5a66 	vldr	s11, [pc, #408]	; 800d184 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 800cfec:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800cff0:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800cff4:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800cff8:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800cffc:	ee67 7a27 	vmul.f32	s15, s14, s15
 800d000:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800d004:	e065      	b.n	800d0d2 <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>
      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll1vco = ((float_t)CSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800d006:	697b      	ldr	r3, [r7, #20]
 800d008:	ee07 3a90 	vmov	s15, r3
 800d00c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800d010:	eddf 6a5e 	vldr	s13, [pc, #376]	; 800d18c <HAL_RCCEx_GetPLL1ClockFreq+0x29c>
 800d014:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800d018:	4b58      	ldr	r3, [pc, #352]	; (800d17c <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800d01a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800d01c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800d020:	ee07 3a90 	vmov	s15, r3
 800d024:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800d028:	ed97 6a03 	vldr	s12, [r7, #12]
 800d02c:	eddf 5a55 	vldr	s11, [pc, #340]	; 800d184 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 800d030:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800d034:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800d038:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800d03c:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800d040:	ee67 7a27 	vmul.f32	s15, s14, s15
 800d044:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800d048:	e043      	b.n	800d0d2 <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll1vco = ((float_t)HSE_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800d04a:	697b      	ldr	r3, [r7, #20]
 800d04c:	ee07 3a90 	vmov	s15, r3
 800d050:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800d054:	eddf 6a4e 	vldr	s13, [pc, #312]	; 800d190 <HAL_RCCEx_GetPLL1ClockFreq+0x2a0>
 800d058:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800d05c:	4b47      	ldr	r3, [pc, #284]	; (800d17c <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800d05e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800d060:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800d064:	ee07 3a90 	vmov	s15, r3
 800d068:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800d06c:	ed97 6a03 	vldr	s12, [r7, #12]
 800d070:	eddf 5a44 	vldr	s11, [pc, #272]	; 800d184 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 800d074:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800d078:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800d07c:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800d080:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800d084:	ee67 7a27 	vmul.f32	s15, s14, s15
 800d088:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800d08c:	e021      	b.n	800d0d2 <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>

      default:
        pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800d08e:	697b      	ldr	r3, [r7, #20]
 800d090:	ee07 3a90 	vmov	s15, r3
 800d094:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800d098:	eddf 6a3b 	vldr	s13, [pc, #236]	; 800d188 <HAL_RCCEx_GetPLL1ClockFreq+0x298>
 800d09c:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800d0a0:	4b36      	ldr	r3, [pc, #216]	; (800d17c <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800d0a2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800d0a4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800d0a8:	ee07 3a90 	vmov	s15, r3
 800d0ac:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800d0b0:	ed97 6a03 	vldr	s12, [r7, #12]
 800d0b4:	eddf 5a33 	vldr	s11, [pc, #204]	; 800d184 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 800d0b8:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800d0bc:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800d0c0:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800d0c4:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800d0c8:	ee67 7a27 	vmul.f32	s15, s14, s15
 800d0cc:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800d0d0:	bf00      	nop
    }

    PLL1_Clocks->PLL1_P_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >> 9)  + (float_t)1)) ;
 800d0d2:	4b2a      	ldr	r3, [pc, #168]	; (800d17c <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800d0d4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800d0d6:	0a5b      	lsrs	r3, r3, #9
 800d0d8:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800d0dc:	ee07 3a90 	vmov	s15, r3
 800d0e0:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800d0e4:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800d0e8:	ee37 7a87 	vadd.f32	s14, s15, s14
 800d0ec:	edd7 6a07 	vldr	s13, [r7, #28]
 800d0f0:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800d0f4:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800d0f8:	ee17 2a90 	vmov	r2, s15
 800d0fc:	687b      	ldr	r3, [r7, #4]
 800d0fe:	601a      	str	r2, [r3, #0]
    PLL1_Clocks->PLL1_Q_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_Q1) >> 16) + (float_t)1)) ;
 800d100:	4b1e      	ldr	r3, [pc, #120]	; (800d17c <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800d102:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800d104:	0c1b      	lsrs	r3, r3, #16
 800d106:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800d10a:	ee07 3a90 	vmov	s15, r3
 800d10e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800d112:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800d116:	ee37 7a87 	vadd.f32	s14, s15, s14
 800d11a:	edd7 6a07 	vldr	s13, [r7, #28]
 800d11e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800d122:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800d126:	ee17 2a90 	vmov	r2, s15
 800d12a:	687b      	ldr	r3, [r7, #4]
 800d12c:	605a      	str	r2, [r3, #4]
    PLL1_Clocks->PLL1_R_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_R1) >> 24) + (float_t)1)) ;
 800d12e:	4b13      	ldr	r3, [pc, #76]	; (800d17c <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800d130:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800d132:	0e1b      	lsrs	r3, r3, #24
 800d134:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800d138:	ee07 3a90 	vmov	s15, r3
 800d13c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800d140:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800d144:	ee37 7a87 	vadd.f32	s14, s15, s14
 800d148:	edd7 6a07 	vldr	s13, [r7, #28]
 800d14c:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800d150:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800d154:	ee17 2a90 	vmov	r2, s15
 800d158:	687b      	ldr	r3, [r7, #4]
 800d15a:	609a      	str	r2, [r3, #8]
    PLL1_Clocks->PLL1_P_Frequency = 0U;
    PLL1_Clocks->PLL1_Q_Frequency = 0U;
    PLL1_Clocks->PLL1_R_Frequency = 0U;
  }

}
 800d15c:	e008      	b.n	800d170 <HAL_RCCEx_GetPLL1ClockFreq+0x280>
    PLL1_Clocks->PLL1_P_Frequency = 0U;
 800d15e:	687b      	ldr	r3, [r7, #4]
 800d160:	2200      	movs	r2, #0
 800d162:	601a      	str	r2, [r3, #0]
    PLL1_Clocks->PLL1_Q_Frequency = 0U;
 800d164:	687b      	ldr	r3, [r7, #4]
 800d166:	2200      	movs	r2, #0
 800d168:	605a      	str	r2, [r3, #4]
    PLL1_Clocks->PLL1_R_Frequency = 0U;
 800d16a:	687b      	ldr	r3, [r7, #4]
 800d16c:	2200      	movs	r2, #0
 800d16e:	609a      	str	r2, [r3, #8]
}
 800d170:	bf00      	nop
 800d172:	3724      	adds	r7, #36	; 0x24
 800d174:	46bd      	mov	sp, r7
 800d176:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d17a:	4770      	bx	lr
 800d17c:	58024400 	.word	0x58024400
 800d180:	03d09000 	.word	0x03d09000
 800d184:	46000000 	.word	0x46000000
 800d188:	4c742400 	.word	0x4c742400
 800d18c:	4a742400 	.word	0x4a742400
 800d190:	4b189680 	.word	0x4b189680

0800d194 <HAL_RCCEx_CRSConfig>:
  * @brief  Start automatic synchronization for polling mode
  * @param  pInit Pointer on RCC_CRSInitTypeDef structure
  * @retval None
  */
void HAL_RCCEx_CRSConfig(RCC_CRSInitTypeDef *pInit)
{
 800d194:	b580      	push	{r7, lr}
 800d196:	b084      	sub	sp, #16
 800d198:	af00      	add	r7, sp, #0
 800d19a:	6078      	str	r0, [r7, #4]
  assert_param(IS_RCC_CRS_HSI48CALIBRATION(pInit->HSI48CalibrationValue));

  /* CONFIGURATION */

  /* Before configuration, reset CRS registers to their default values*/
  __HAL_RCC_CRS_FORCE_RESET();
 800d19c:	4b26      	ldr	r3, [pc, #152]	; (800d238 <HAL_RCCEx_CRSConfig+0xa4>)
 800d19e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800d1a2:	4a25      	ldr	r2, [pc, #148]	; (800d238 <HAL_RCCEx_CRSConfig+0xa4>)
 800d1a4:	f043 0302 	orr.w	r3, r3, #2
 800d1a8:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
  __HAL_RCC_CRS_RELEASE_RESET();
 800d1ac:	4b22      	ldr	r3, [pc, #136]	; (800d238 <HAL_RCCEx_CRSConfig+0xa4>)
 800d1ae:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800d1b2:	4a21      	ldr	r2, [pc, #132]	; (800d238 <HAL_RCCEx_CRSConfig+0xa4>)
 800d1b4:	f023 0302 	bic.w	r3, r3, #2
 800d1b8:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

  /* Set the SYNCDIV[2:0] bits according to Pre-scaler value */
  /* Set the SYNCSRC[1:0] bits according to Source value */
  /* Set the SYNCSPOL bit according to Polarity value */
  if ((HAL_GetREVID() <= REV_ID_Y) && (pInit->Source == RCC_CRS_SYNC_SOURCE_USB2))
 800d1bc:	f7f6 ff50 	bl	8004060 <HAL_GetREVID>
 800d1c0:	4603      	mov	r3, r0
 800d1c2:	f241 0203 	movw	r2, #4099	; 0x1003
 800d1c6:	4293      	cmp	r3, r2
 800d1c8:	d80b      	bhi.n	800d1e2 <HAL_RCCEx_CRSConfig+0x4e>
 800d1ca:	687b      	ldr	r3, [r7, #4]
 800d1cc:	685b      	ldr	r3, [r3, #4]
 800d1ce:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 800d1d2:	d106      	bne.n	800d1e2 <HAL_RCCEx_CRSConfig+0x4e>
  {
    /* Use Rev.Y value of USB2 */
    value = (pInit->Prescaler | RCC_CRS_SYNC_SOURCE_PIN | pInit->Polarity);
 800d1d4:	687b      	ldr	r3, [r7, #4]
 800d1d6:	681a      	ldr	r2, [r3, #0]
 800d1d8:	687b      	ldr	r3, [r7, #4]
 800d1da:	689b      	ldr	r3, [r3, #8]
 800d1dc:	4313      	orrs	r3, r2
 800d1de:	60fb      	str	r3, [r7, #12]
 800d1e0:	e008      	b.n	800d1f4 <HAL_RCCEx_CRSConfig+0x60>
  }
  else
  {
    value = (pInit->Prescaler | pInit->Source | pInit->Polarity);
 800d1e2:	687b      	ldr	r3, [r7, #4]
 800d1e4:	681a      	ldr	r2, [r3, #0]
 800d1e6:	687b      	ldr	r3, [r7, #4]
 800d1e8:	685b      	ldr	r3, [r3, #4]
 800d1ea:	431a      	orrs	r2, r3
 800d1ec:	687b      	ldr	r3, [r7, #4]
 800d1ee:	689b      	ldr	r3, [r3, #8]
 800d1f0:	4313      	orrs	r3, r2
 800d1f2:	60fb      	str	r3, [r7, #12]
  }
  /* Set the RELOAD[15:0] bits according to ReloadValue value */
  value |= pInit->ReloadValue;
 800d1f4:	687b      	ldr	r3, [r7, #4]
 800d1f6:	68db      	ldr	r3, [r3, #12]
 800d1f8:	68fa      	ldr	r2, [r7, #12]
 800d1fa:	4313      	orrs	r3, r2
 800d1fc:	60fb      	str	r3, [r7, #12]
  /* Set the FELIM[7:0] bits according to ErrorLimitValue value */
  value |= (pInit->ErrorLimitValue << CRS_CFGR_FELIM_Pos);
 800d1fe:	687b      	ldr	r3, [r7, #4]
 800d200:	691b      	ldr	r3, [r3, #16]
 800d202:	041b      	lsls	r3, r3, #16
 800d204:	68fa      	ldr	r2, [r7, #12]
 800d206:	4313      	orrs	r3, r2
 800d208:	60fb      	str	r3, [r7, #12]
  WRITE_REG(CRS->CFGR, value);
 800d20a:	4a0c      	ldr	r2, [pc, #48]	; (800d23c <HAL_RCCEx_CRSConfig+0xa8>)
 800d20c:	68fb      	ldr	r3, [r7, #12]
 800d20e:	6053      	str	r3, [r2, #4]

  /* Adjust HSI48 oscillator smooth trimming */
  /* Set the TRIM[5:0] bits according to RCC_CRS_HSI48CalibrationValue value */
  MODIFY_REG(CRS->CR, CRS_CR_TRIM, (pInit->HSI48CalibrationValue << CRS_CR_TRIM_Pos));
 800d210:	4b0a      	ldr	r3, [pc, #40]	; (800d23c <HAL_RCCEx_CRSConfig+0xa8>)
 800d212:	681b      	ldr	r3, [r3, #0]
 800d214:	f423 527c 	bic.w	r2, r3, #16128	; 0x3f00
 800d218:	687b      	ldr	r3, [r7, #4]
 800d21a:	695b      	ldr	r3, [r3, #20]
 800d21c:	021b      	lsls	r3, r3, #8
 800d21e:	4907      	ldr	r1, [pc, #28]	; (800d23c <HAL_RCCEx_CRSConfig+0xa8>)
 800d220:	4313      	orrs	r3, r2
 800d222:	600b      	str	r3, [r1, #0]

  /* START AUTOMATIC SYNCHRONIZATION*/

  /* Enable Automatic trimming & Frequency error counter */
  SET_BIT(CRS->CR, CRS_CR_AUTOTRIMEN | CRS_CR_CEN);
 800d224:	4b05      	ldr	r3, [pc, #20]	; (800d23c <HAL_RCCEx_CRSConfig+0xa8>)
 800d226:	681b      	ldr	r3, [r3, #0]
 800d228:	4a04      	ldr	r2, [pc, #16]	; (800d23c <HAL_RCCEx_CRSConfig+0xa8>)
 800d22a:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 800d22e:	6013      	str	r3, [r2, #0]
}
 800d230:	bf00      	nop
 800d232:	3710      	adds	r7, #16
 800d234:	46bd      	mov	sp, r7
 800d236:	bd80      	pop	{r7, pc}
 800d238:	58024400 	.word	0x58024400
 800d23c:	40008400 	.word	0x40008400

0800d240 <RCCEx_PLL2_Config>:
  * @note   PLL2 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(RCC_PLL2InitTypeDef *pll2, uint32_t Divider)
{
 800d240:	b580      	push	{r7, lr}
 800d242:	b084      	sub	sp, #16
 800d244:	af00      	add	r7, sp, #0
 800d246:	6078      	str	r0, [r7, #4]
 800d248:	6039      	str	r1, [r7, #0]

  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800d24a:	2300      	movs	r3, #0
 800d24c:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL2RGE_VALUE(pll2->PLL2RGE));
  assert_param(IS_RCC_PLL2VCO_VALUE(pll2->PLL2VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll2->PLL2FRACN));

  /* Check that PLL2 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 800d24e:	4b53      	ldr	r3, [pc, #332]	; (800d39c <RCCEx_PLL2_Config+0x15c>)
 800d250:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800d252:	f003 0303 	and.w	r3, r3, #3
 800d256:	2b03      	cmp	r3, #3
 800d258:	d101      	bne.n	800d25e <RCCEx_PLL2_Config+0x1e>
  {
    return HAL_ERROR;
 800d25a:	2301      	movs	r3, #1
 800d25c:	e099      	b.n	800d392 <RCCEx_PLL2_Config+0x152>


  else
  {
    /* Disable  PLL2. */
    __HAL_RCC_PLL2_DISABLE();
 800d25e:	4b4f      	ldr	r3, [pc, #316]	; (800d39c <RCCEx_PLL2_Config+0x15c>)
 800d260:	681b      	ldr	r3, [r3, #0]
 800d262:	4a4e      	ldr	r2, [pc, #312]	; (800d39c <RCCEx_PLL2_Config+0x15c>)
 800d264:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 800d268:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800d26a:	f7f6 fec9 	bl	8004000 <HAL_GetTick>
 800d26e:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL is disabled */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 800d270:	e008      	b.n	800d284 <RCCEx_PLL2_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 800d272:	f7f6 fec5 	bl	8004000 <HAL_GetTick>
 800d276:	4602      	mov	r2, r0
 800d278:	68bb      	ldr	r3, [r7, #8]
 800d27a:	1ad3      	subs	r3, r2, r3
 800d27c:	2b02      	cmp	r3, #2
 800d27e:	d901      	bls.n	800d284 <RCCEx_PLL2_Config+0x44>
      {
        return HAL_TIMEOUT;
 800d280:	2303      	movs	r3, #3
 800d282:	e086      	b.n	800d392 <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 800d284:	4b45      	ldr	r3, [pc, #276]	; (800d39c <RCCEx_PLL2_Config+0x15c>)
 800d286:	681b      	ldr	r3, [r3, #0]
 800d288:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800d28c:	2b00      	cmp	r3, #0
 800d28e:	d1f0      	bne.n	800d272 <RCCEx_PLL2_Config+0x32>
      }
    }

    /* Configure PLL2 multiplication and division factors. */
    __HAL_RCC_PLL2_CONFIG(pll2->PLL2M,
 800d290:	4b42      	ldr	r3, [pc, #264]	; (800d39c <RCCEx_PLL2_Config+0x15c>)
 800d292:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800d294:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 800d298:	687b      	ldr	r3, [r7, #4]
 800d29a:	681b      	ldr	r3, [r3, #0]
 800d29c:	031b      	lsls	r3, r3, #12
 800d29e:	493f      	ldr	r1, [pc, #252]	; (800d39c <RCCEx_PLL2_Config+0x15c>)
 800d2a0:	4313      	orrs	r3, r2
 800d2a2:	628b      	str	r3, [r1, #40]	; 0x28
 800d2a4:	687b      	ldr	r3, [r7, #4]
 800d2a6:	685b      	ldr	r3, [r3, #4]
 800d2a8:	3b01      	subs	r3, #1
 800d2aa:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800d2ae:	687b      	ldr	r3, [r7, #4]
 800d2b0:	689b      	ldr	r3, [r3, #8]
 800d2b2:	3b01      	subs	r3, #1
 800d2b4:	025b      	lsls	r3, r3, #9
 800d2b6:	b29b      	uxth	r3, r3
 800d2b8:	431a      	orrs	r2, r3
 800d2ba:	687b      	ldr	r3, [r7, #4]
 800d2bc:	68db      	ldr	r3, [r3, #12]
 800d2be:	3b01      	subs	r3, #1
 800d2c0:	041b      	lsls	r3, r3, #16
 800d2c2:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 800d2c6:	431a      	orrs	r2, r3
 800d2c8:	687b      	ldr	r3, [r7, #4]
 800d2ca:	691b      	ldr	r3, [r3, #16]
 800d2cc:	3b01      	subs	r3, #1
 800d2ce:	061b      	lsls	r3, r3, #24
 800d2d0:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 800d2d4:	4931      	ldr	r1, [pc, #196]	; (800d39c <RCCEx_PLL2_Config+0x15c>)
 800d2d6:	4313      	orrs	r3, r2
 800d2d8:	638b      	str	r3, [r1, #56]	; 0x38
                          pll2->PLL2P,
                          pll2->PLL2Q,
                          pll2->PLL2R);

    /* Select PLL2 input reference frequency range: VCI */
    __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE) ;
 800d2da:	4b30      	ldr	r3, [pc, #192]	; (800d39c <RCCEx_PLL2_Config+0x15c>)
 800d2dc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d2de:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 800d2e2:	687b      	ldr	r3, [r7, #4]
 800d2e4:	695b      	ldr	r3, [r3, #20]
 800d2e6:	492d      	ldr	r1, [pc, #180]	; (800d39c <RCCEx_PLL2_Config+0x15c>)
 800d2e8:	4313      	orrs	r3, r2
 800d2ea:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL2 output frequency range : VCO */
    __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL) ;
 800d2ec:	4b2b      	ldr	r3, [pc, #172]	; (800d39c <RCCEx_PLL2_Config+0x15c>)
 800d2ee:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d2f0:	f023 0220 	bic.w	r2, r3, #32
 800d2f4:	687b      	ldr	r3, [r7, #4]
 800d2f6:	699b      	ldr	r3, [r3, #24]
 800d2f8:	4928      	ldr	r1, [pc, #160]	; (800d39c <RCCEx_PLL2_Config+0x15c>)
 800d2fa:	4313      	orrs	r3, r2
 800d2fc:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_DISABLE();
 800d2fe:	4b27      	ldr	r3, [pc, #156]	; (800d39c <RCCEx_PLL2_Config+0x15c>)
 800d300:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d302:	4a26      	ldr	r2, [pc, #152]	; (800d39c <RCCEx_PLL2_Config+0x15c>)
 800d304:	f023 0310 	bic.w	r3, r3, #16
 800d308:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 800d30a:	4b24      	ldr	r3, [pc, #144]	; (800d39c <RCCEx_PLL2_Config+0x15c>)
 800d30c:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800d30e:	4b24      	ldr	r3, [pc, #144]	; (800d3a0 <RCCEx_PLL2_Config+0x160>)
 800d310:	4013      	ands	r3, r2
 800d312:	687a      	ldr	r2, [r7, #4]
 800d314:	69d2      	ldr	r2, [r2, #28]
 800d316:	00d2      	lsls	r2, r2, #3
 800d318:	4920      	ldr	r1, [pc, #128]	; (800d39c <RCCEx_PLL2_Config+0x15c>)
 800d31a:	4313      	orrs	r3, r2
 800d31c:	63cb      	str	r3, [r1, #60]	; 0x3c

    /* Enable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_ENABLE();
 800d31e:	4b1f      	ldr	r3, [pc, #124]	; (800d39c <RCCEx_PLL2_Config+0x15c>)
 800d320:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d322:	4a1e      	ldr	r2, [pc, #120]	; (800d39c <RCCEx_PLL2_Config+0x15c>)
 800d324:	f043 0310 	orr.w	r3, r3, #16
 800d328:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL2 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 800d32a:	683b      	ldr	r3, [r7, #0]
 800d32c:	2b00      	cmp	r3, #0
 800d32e:	d106      	bne.n	800d33e <RCCEx_PLL2_Config+0xfe>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 800d330:	4b1a      	ldr	r3, [pc, #104]	; (800d39c <RCCEx_PLL2_Config+0x15c>)
 800d332:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d334:	4a19      	ldr	r2, [pc, #100]	; (800d39c <RCCEx_PLL2_Config+0x15c>)
 800d336:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800d33a:	62d3      	str	r3, [r2, #44]	; 0x2c
 800d33c:	e00f      	b.n	800d35e <RCCEx_PLL2_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 800d33e:	683b      	ldr	r3, [r7, #0]
 800d340:	2b01      	cmp	r3, #1
 800d342:	d106      	bne.n	800d352 <RCCEx_PLL2_Config+0x112>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVQ);
 800d344:	4b15      	ldr	r3, [pc, #84]	; (800d39c <RCCEx_PLL2_Config+0x15c>)
 800d346:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d348:	4a14      	ldr	r2, [pc, #80]	; (800d39c <RCCEx_PLL2_Config+0x15c>)
 800d34a:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800d34e:	62d3      	str	r3, [r2, #44]	; 0x2c
 800d350:	e005      	b.n	800d35e <RCCEx_PLL2_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVR);
 800d352:	4b12      	ldr	r3, [pc, #72]	; (800d39c <RCCEx_PLL2_Config+0x15c>)
 800d354:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d356:	4a11      	ldr	r2, [pc, #68]	; (800d39c <RCCEx_PLL2_Config+0x15c>)
 800d358:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800d35c:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL2. */
    __HAL_RCC_PLL2_ENABLE();
 800d35e:	4b0f      	ldr	r3, [pc, #60]	; (800d39c <RCCEx_PLL2_Config+0x15c>)
 800d360:	681b      	ldr	r3, [r3, #0]
 800d362:	4a0e      	ldr	r2, [pc, #56]	; (800d39c <RCCEx_PLL2_Config+0x15c>)
 800d364:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 800d368:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800d36a:	f7f6 fe49 	bl	8004000 <HAL_GetTick>
 800d36e:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL2 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 800d370:	e008      	b.n	800d384 <RCCEx_PLL2_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 800d372:	f7f6 fe45 	bl	8004000 <HAL_GetTick>
 800d376:	4602      	mov	r2, r0
 800d378:	68bb      	ldr	r3, [r7, #8]
 800d37a:	1ad3      	subs	r3, r2, r3
 800d37c:	2b02      	cmp	r3, #2
 800d37e:	d901      	bls.n	800d384 <RCCEx_PLL2_Config+0x144>
      {
        return HAL_TIMEOUT;
 800d380:	2303      	movs	r3, #3
 800d382:	e006      	b.n	800d392 <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 800d384:	4b05      	ldr	r3, [pc, #20]	; (800d39c <RCCEx_PLL2_Config+0x15c>)
 800d386:	681b      	ldr	r3, [r3, #0]
 800d388:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800d38c:	2b00      	cmp	r3, #0
 800d38e:	d0f0      	beq.n	800d372 <RCCEx_PLL2_Config+0x132>
    }

  }


  return status;
 800d390:	7bfb      	ldrb	r3, [r7, #15]
}
 800d392:	4618      	mov	r0, r3
 800d394:	3710      	adds	r7, #16
 800d396:	46bd      	mov	sp, r7
 800d398:	bd80      	pop	{r7, pc}
 800d39a:	bf00      	nop
 800d39c:	58024400 	.word	0x58024400
 800d3a0:	ffff0007 	.word	0xffff0007

0800d3a4 <RCCEx_PLL3_Config>:
  * @note   PLL3 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(RCC_PLL3InitTypeDef *pll3, uint32_t Divider)
{
 800d3a4:	b580      	push	{r7, lr}
 800d3a6:	b084      	sub	sp, #16
 800d3a8:	af00      	add	r7, sp, #0
 800d3aa:	6078      	str	r0, [r7, #4]
 800d3ac:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800d3ae:	2300      	movs	r3, #0
 800d3b0:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL3RGE_VALUE(pll3->PLL3RGE));
  assert_param(IS_RCC_PLL3VCO_VALUE(pll3->PLL3VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll3->PLL3FRACN));

  /* Check that PLL3 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 800d3b2:	4b53      	ldr	r3, [pc, #332]	; (800d500 <RCCEx_PLL3_Config+0x15c>)
 800d3b4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800d3b6:	f003 0303 	and.w	r3, r3, #3
 800d3ba:	2b03      	cmp	r3, #3
 800d3bc:	d101      	bne.n	800d3c2 <RCCEx_PLL3_Config+0x1e>
  {
    return HAL_ERROR;
 800d3be:	2301      	movs	r3, #1
 800d3c0:	e099      	b.n	800d4f6 <RCCEx_PLL3_Config+0x152>


  else
  {
    /* Disable  PLL3. */
    __HAL_RCC_PLL3_DISABLE();
 800d3c2:	4b4f      	ldr	r3, [pc, #316]	; (800d500 <RCCEx_PLL3_Config+0x15c>)
 800d3c4:	681b      	ldr	r3, [r3, #0]
 800d3c6:	4a4e      	ldr	r2, [pc, #312]	; (800d500 <RCCEx_PLL3_Config+0x15c>)
 800d3c8:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800d3cc:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800d3ce:	f7f6 fe17 	bl	8004000 <HAL_GetTick>
 800d3d2:	60b8      	str	r0, [r7, #8]
    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 800d3d4:	e008      	b.n	800d3e8 <RCCEx_PLL3_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 800d3d6:	f7f6 fe13 	bl	8004000 <HAL_GetTick>
 800d3da:	4602      	mov	r2, r0
 800d3dc:	68bb      	ldr	r3, [r7, #8]
 800d3de:	1ad3      	subs	r3, r2, r3
 800d3e0:	2b02      	cmp	r3, #2
 800d3e2:	d901      	bls.n	800d3e8 <RCCEx_PLL3_Config+0x44>
      {
        return HAL_TIMEOUT;
 800d3e4:	2303      	movs	r3, #3
 800d3e6:	e086      	b.n	800d4f6 <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 800d3e8:	4b45      	ldr	r3, [pc, #276]	; (800d500 <RCCEx_PLL3_Config+0x15c>)
 800d3ea:	681b      	ldr	r3, [r3, #0]
 800d3ec:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800d3f0:	2b00      	cmp	r3, #0
 800d3f2:	d1f0      	bne.n	800d3d6 <RCCEx_PLL3_Config+0x32>
      }
    }

    /* Configure the PLL3  multiplication and division factors. */
    __HAL_RCC_PLL3_CONFIG(pll3->PLL3M,
 800d3f4:	4b42      	ldr	r3, [pc, #264]	; (800d500 <RCCEx_PLL3_Config+0x15c>)
 800d3f6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800d3f8:	f023 727c 	bic.w	r2, r3, #66060288	; 0x3f00000
 800d3fc:	687b      	ldr	r3, [r7, #4]
 800d3fe:	681b      	ldr	r3, [r3, #0]
 800d400:	051b      	lsls	r3, r3, #20
 800d402:	493f      	ldr	r1, [pc, #252]	; (800d500 <RCCEx_PLL3_Config+0x15c>)
 800d404:	4313      	orrs	r3, r2
 800d406:	628b      	str	r3, [r1, #40]	; 0x28
 800d408:	687b      	ldr	r3, [r7, #4]
 800d40a:	685b      	ldr	r3, [r3, #4]
 800d40c:	3b01      	subs	r3, #1
 800d40e:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800d412:	687b      	ldr	r3, [r7, #4]
 800d414:	689b      	ldr	r3, [r3, #8]
 800d416:	3b01      	subs	r3, #1
 800d418:	025b      	lsls	r3, r3, #9
 800d41a:	b29b      	uxth	r3, r3
 800d41c:	431a      	orrs	r2, r3
 800d41e:	687b      	ldr	r3, [r7, #4]
 800d420:	68db      	ldr	r3, [r3, #12]
 800d422:	3b01      	subs	r3, #1
 800d424:	041b      	lsls	r3, r3, #16
 800d426:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 800d42a:	431a      	orrs	r2, r3
 800d42c:	687b      	ldr	r3, [r7, #4]
 800d42e:	691b      	ldr	r3, [r3, #16]
 800d430:	3b01      	subs	r3, #1
 800d432:	061b      	lsls	r3, r3, #24
 800d434:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 800d438:	4931      	ldr	r1, [pc, #196]	; (800d500 <RCCEx_PLL3_Config+0x15c>)
 800d43a:	4313      	orrs	r3, r2
 800d43c:	640b      	str	r3, [r1, #64]	; 0x40
                          pll3->PLL3P,
                          pll3->PLL3Q,
                          pll3->PLL3R);

    /* Select PLL3 input reference frequency range: VCI */
    __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE) ;
 800d43e:	4b30      	ldr	r3, [pc, #192]	; (800d500 <RCCEx_PLL3_Config+0x15c>)
 800d440:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d442:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 800d446:	687b      	ldr	r3, [r7, #4]
 800d448:	695b      	ldr	r3, [r3, #20]
 800d44a:	492d      	ldr	r1, [pc, #180]	; (800d500 <RCCEx_PLL3_Config+0x15c>)
 800d44c:	4313      	orrs	r3, r2
 800d44e:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL3 output frequency range : VCO */
    __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL) ;
 800d450:	4b2b      	ldr	r3, [pc, #172]	; (800d500 <RCCEx_PLL3_Config+0x15c>)
 800d452:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d454:	f423 7200 	bic.w	r2, r3, #512	; 0x200
 800d458:	687b      	ldr	r3, [r7, #4]
 800d45a:	699b      	ldr	r3, [r3, #24]
 800d45c:	4928      	ldr	r1, [pc, #160]	; (800d500 <RCCEx_PLL3_Config+0x15c>)
 800d45e:	4313      	orrs	r3, r2
 800d460:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_DISABLE();
 800d462:	4b27      	ldr	r3, [pc, #156]	; (800d500 <RCCEx_PLL3_Config+0x15c>)
 800d464:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d466:	4a26      	ldr	r2, [pc, #152]	; (800d500 <RCCEx_PLL3_Config+0x15c>)
 800d468:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800d46c:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 800d46e:	4b24      	ldr	r3, [pc, #144]	; (800d500 <RCCEx_PLL3_Config+0x15c>)
 800d470:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800d472:	4b24      	ldr	r3, [pc, #144]	; (800d504 <RCCEx_PLL3_Config+0x160>)
 800d474:	4013      	ands	r3, r2
 800d476:	687a      	ldr	r2, [r7, #4]
 800d478:	69d2      	ldr	r2, [r2, #28]
 800d47a:	00d2      	lsls	r2, r2, #3
 800d47c:	4920      	ldr	r1, [pc, #128]	; (800d500 <RCCEx_PLL3_Config+0x15c>)
 800d47e:	4313      	orrs	r3, r2
 800d480:	644b      	str	r3, [r1, #68]	; 0x44

    /* Enable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_ENABLE();
 800d482:	4b1f      	ldr	r3, [pc, #124]	; (800d500 <RCCEx_PLL3_Config+0x15c>)
 800d484:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d486:	4a1e      	ldr	r2, [pc, #120]	; (800d500 <RCCEx_PLL3_Config+0x15c>)
 800d488:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800d48c:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL3 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 800d48e:	683b      	ldr	r3, [r7, #0]
 800d490:	2b00      	cmp	r3, #0
 800d492:	d106      	bne.n	800d4a2 <RCCEx_PLL3_Config+0xfe>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
 800d494:	4b1a      	ldr	r3, [pc, #104]	; (800d500 <RCCEx_PLL3_Config+0x15c>)
 800d496:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d498:	4a19      	ldr	r2, [pc, #100]	; (800d500 <RCCEx_PLL3_Config+0x15c>)
 800d49a:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 800d49e:	62d3      	str	r3, [r2, #44]	; 0x2c
 800d4a0:	e00f      	b.n	800d4c2 <RCCEx_PLL3_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 800d4a2:	683b      	ldr	r3, [r7, #0]
 800d4a4:	2b01      	cmp	r3, #1
 800d4a6:	d106      	bne.n	800d4b6 <RCCEx_PLL3_Config+0x112>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
 800d4a8:	4b15      	ldr	r3, [pc, #84]	; (800d500 <RCCEx_PLL3_Config+0x15c>)
 800d4aa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d4ac:	4a14      	ldr	r2, [pc, #80]	; (800d500 <RCCEx_PLL3_Config+0x15c>)
 800d4ae:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 800d4b2:	62d3      	str	r3, [r2, #44]	; 0x2c
 800d4b4:	e005      	b.n	800d4c2 <RCCEx_PLL3_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
 800d4b6:	4b12      	ldr	r3, [pc, #72]	; (800d500 <RCCEx_PLL3_Config+0x15c>)
 800d4b8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d4ba:	4a11      	ldr	r2, [pc, #68]	; (800d500 <RCCEx_PLL3_Config+0x15c>)
 800d4bc:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800d4c0:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL3. */
    __HAL_RCC_PLL3_ENABLE();
 800d4c2:	4b0f      	ldr	r3, [pc, #60]	; (800d500 <RCCEx_PLL3_Config+0x15c>)
 800d4c4:	681b      	ldr	r3, [r3, #0]
 800d4c6:	4a0e      	ldr	r2, [pc, #56]	; (800d500 <RCCEx_PLL3_Config+0x15c>)
 800d4c8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800d4cc:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800d4ce:	f7f6 fd97 	bl	8004000 <HAL_GetTick>
 800d4d2:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 800d4d4:	e008      	b.n	800d4e8 <RCCEx_PLL3_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 800d4d6:	f7f6 fd93 	bl	8004000 <HAL_GetTick>
 800d4da:	4602      	mov	r2, r0
 800d4dc:	68bb      	ldr	r3, [r7, #8]
 800d4de:	1ad3      	subs	r3, r2, r3
 800d4e0:	2b02      	cmp	r3, #2
 800d4e2:	d901      	bls.n	800d4e8 <RCCEx_PLL3_Config+0x144>
      {
        return HAL_TIMEOUT;
 800d4e4:	2303      	movs	r3, #3
 800d4e6:	e006      	b.n	800d4f6 <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 800d4e8:	4b05      	ldr	r3, [pc, #20]	; (800d500 <RCCEx_PLL3_Config+0x15c>)
 800d4ea:	681b      	ldr	r3, [r3, #0]
 800d4ec:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800d4f0:	2b00      	cmp	r3, #0
 800d4f2:	d0f0      	beq.n	800d4d6 <RCCEx_PLL3_Config+0x132>
    }

  }


  return status;
 800d4f4:	7bfb      	ldrb	r3, [r7, #15]
}
 800d4f6:	4618      	mov	r0, r3
 800d4f8:	3710      	adds	r7, #16
 800d4fa:	46bd      	mov	sp, r7
 800d4fc:	bd80      	pop	{r7, pc}
 800d4fe:	bf00      	nop
 800d500:	58024400 	.word	0x58024400
 800d504:	ffff0007 	.word	0xffff0007

0800d508 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800d508:	b580      	push	{r7, lr}
 800d50a:	b082      	sub	sp, #8
 800d50c:	af00      	add	r7, sp, #0
 800d50e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800d510:	687b      	ldr	r3, [r7, #4]
 800d512:	2b00      	cmp	r3, #0
 800d514:	d101      	bne.n	800d51a <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800d516:	2301      	movs	r3, #1
 800d518:	e049      	b.n	800d5ae <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800d51a:	687b      	ldr	r3, [r7, #4]
 800d51c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800d520:	b2db      	uxtb	r3, r3
 800d522:	2b00      	cmp	r3, #0
 800d524:	d106      	bne.n	800d534 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800d526:	687b      	ldr	r3, [r7, #4]
 800d528:	2200      	movs	r2, #0
 800d52a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800d52e:	6878      	ldr	r0, [r7, #4]
 800d530:	f7f6 f896 	bl	8003660 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800d534:	687b      	ldr	r3, [r7, #4]
 800d536:	2202      	movs	r2, #2
 800d538:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800d53c:	687b      	ldr	r3, [r7, #4]
 800d53e:	681a      	ldr	r2, [r3, #0]
 800d540:	687b      	ldr	r3, [r7, #4]
 800d542:	3304      	adds	r3, #4
 800d544:	4619      	mov	r1, r3
 800d546:	4610      	mov	r0, r2
 800d548:	f000 f92e 	bl	800d7a8 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800d54c:	687b      	ldr	r3, [r7, #4]
 800d54e:	2201      	movs	r2, #1
 800d550:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800d554:	687b      	ldr	r3, [r7, #4]
 800d556:	2201      	movs	r2, #1
 800d558:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800d55c:	687b      	ldr	r3, [r7, #4]
 800d55e:	2201      	movs	r2, #1
 800d560:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800d564:	687b      	ldr	r3, [r7, #4]
 800d566:	2201      	movs	r2, #1
 800d568:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800d56c:	687b      	ldr	r3, [r7, #4]
 800d56e:	2201      	movs	r2, #1
 800d570:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800d574:	687b      	ldr	r3, [r7, #4]
 800d576:	2201      	movs	r2, #1
 800d578:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800d57c:	687b      	ldr	r3, [r7, #4]
 800d57e:	2201      	movs	r2, #1
 800d580:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800d584:	687b      	ldr	r3, [r7, #4]
 800d586:	2201      	movs	r2, #1
 800d588:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800d58c:	687b      	ldr	r3, [r7, #4]
 800d58e:	2201      	movs	r2, #1
 800d590:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800d594:	687b      	ldr	r3, [r7, #4]
 800d596:	2201      	movs	r2, #1
 800d598:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 800d59c:	687b      	ldr	r3, [r7, #4]
 800d59e:	2201      	movs	r2, #1
 800d5a0:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800d5a4:	687b      	ldr	r3, [r7, #4]
 800d5a6:	2201      	movs	r2, #1
 800d5a8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800d5ac:	2300      	movs	r3, #0
}
 800d5ae:	4618      	mov	r0, r3
 800d5b0:	3708      	adds	r7, #8
 800d5b2:	46bd      	mov	sp, r7
 800d5b4:	bd80      	pop	{r7, pc}
	...

0800d5b8 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 800d5b8:	b580      	push	{r7, lr}
 800d5ba:	b084      	sub	sp, #16
 800d5bc:	af00      	add	r7, sp, #0
 800d5be:	6078      	str	r0, [r7, #4]
 800d5c0:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800d5c2:	2300      	movs	r3, #0
 800d5c4:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800d5c6:	687b      	ldr	r3, [r7, #4]
 800d5c8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800d5cc:	2b01      	cmp	r3, #1
 800d5ce:	d101      	bne.n	800d5d4 <HAL_TIM_ConfigClockSource+0x1c>
 800d5d0:	2302      	movs	r3, #2
 800d5d2:	e0dc      	b.n	800d78e <HAL_TIM_ConfigClockSource+0x1d6>
 800d5d4:	687b      	ldr	r3, [r7, #4]
 800d5d6:	2201      	movs	r2, #1
 800d5d8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800d5dc:	687b      	ldr	r3, [r7, #4]
 800d5de:	2202      	movs	r2, #2
 800d5e0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 800d5e4:	687b      	ldr	r3, [r7, #4]
 800d5e6:	681b      	ldr	r3, [r3, #0]
 800d5e8:	689b      	ldr	r3, [r3, #8]
 800d5ea:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 800d5ec:	68ba      	ldr	r2, [r7, #8]
 800d5ee:	4b6a      	ldr	r3, [pc, #424]	; (800d798 <HAL_TIM_ConfigClockSource+0x1e0>)
 800d5f0:	4013      	ands	r3, r2
 800d5f2:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800d5f4:	68bb      	ldr	r3, [r7, #8]
 800d5f6:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800d5fa:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 800d5fc:	687b      	ldr	r3, [r7, #4]
 800d5fe:	681b      	ldr	r3, [r3, #0]
 800d600:	68ba      	ldr	r2, [r7, #8]
 800d602:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 800d604:	683b      	ldr	r3, [r7, #0]
 800d606:	681b      	ldr	r3, [r3, #0]
 800d608:	4a64      	ldr	r2, [pc, #400]	; (800d79c <HAL_TIM_ConfigClockSource+0x1e4>)
 800d60a:	4293      	cmp	r3, r2
 800d60c:	f000 80a9 	beq.w	800d762 <HAL_TIM_ConfigClockSource+0x1aa>
 800d610:	4a62      	ldr	r2, [pc, #392]	; (800d79c <HAL_TIM_ConfigClockSource+0x1e4>)
 800d612:	4293      	cmp	r3, r2
 800d614:	f200 80ae 	bhi.w	800d774 <HAL_TIM_ConfigClockSource+0x1bc>
 800d618:	4a61      	ldr	r2, [pc, #388]	; (800d7a0 <HAL_TIM_ConfigClockSource+0x1e8>)
 800d61a:	4293      	cmp	r3, r2
 800d61c:	f000 80a1 	beq.w	800d762 <HAL_TIM_ConfigClockSource+0x1aa>
 800d620:	4a5f      	ldr	r2, [pc, #380]	; (800d7a0 <HAL_TIM_ConfigClockSource+0x1e8>)
 800d622:	4293      	cmp	r3, r2
 800d624:	f200 80a6 	bhi.w	800d774 <HAL_TIM_ConfigClockSource+0x1bc>
 800d628:	4a5e      	ldr	r2, [pc, #376]	; (800d7a4 <HAL_TIM_ConfigClockSource+0x1ec>)
 800d62a:	4293      	cmp	r3, r2
 800d62c:	f000 8099 	beq.w	800d762 <HAL_TIM_ConfigClockSource+0x1aa>
 800d630:	4a5c      	ldr	r2, [pc, #368]	; (800d7a4 <HAL_TIM_ConfigClockSource+0x1ec>)
 800d632:	4293      	cmp	r3, r2
 800d634:	f200 809e 	bhi.w	800d774 <HAL_TIM_ConfigClockSource+0x1bc>
 800d638:	f1b3 1f10 	cmp.w	r3, #1048592	; 0x100010
 800d63c:	f000 8091 	beq.w	800d762 <HAL_TIM_ConfigClockSource+0x1aa>
 800d640:	f1b3 1f10 	cmp.w	r3, #1048592	; 0x100010
 800d644:	f200 8096 	bhi.w	800d774 <HAL_TIM_ConfigClockSource+0x1bc>
 800d648:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800d64c:	f000 8089 	beq.w	800d762 <HAL_TIM_ConfigClockSource+0x1aa>
 800d650:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800d654:	f200 808e 	bhi.w	800d774 <HAL_TIM_ConfigClockSource+0x1bc>
 800d658:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800d65c:	d03e      	beq.n	800d6dc <HAL_TIM_ConfigClockSource+0x124>
 800d65e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800d662:	f200 8087 	bhi.w	800d774 <HAL_TIM_ConfigClockSource+0x1bc>
 800d666:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800d66a:	f000 8086 	beq.w	800d77a <HAL_TIM_ConfigClockSource+0x1c2>
 800d66e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800d672:	d87f      	bhi.n	800d774 <HAL_TIM_ConfigClockSource+0x1bc>
 800d674:	2b70      	cmp	r3, #112	; 0x70
 800d676:	d01a      	beq.n	800d6ae <HAL_TIM_ConfigClockSource+0xf6>
 800d678:	2b70      	cmp	r3, #112	; 0x70
 800d67a:	d87b      	bhi.n	800d774 <HAL_TIM_ConfigClockSource+0x1bc>
 800d67c:	2b60      	cmp	r3, #96	; 0x60
 800d67e:	d050      	beq.n	800d722 <HAL_TIM_ConfigClockSource+0x16a>
 800d680:	2b60      	cmp	r3, #96	; 0x60
 800d682:	d877      	bhi.n	800d774 <HAL_TIM_ConfigClockSource+0x1bc>
 800d684:	2b50      	cmp	r3, #80	; 0x50
 800d686:	d03c      	beq.n	800d702 <HAL_TIM_ConfigClockSource+0x14a>
 800d688:	2b50      	cmp	r3, #80	; 0x50
 800d68a:	d873      	bhi.n	800d774 <HAL_TIM_ConfigClockSource+0x1bc>
 800d68c:	2b40      	cmp	r3, #64	; 0x40
 800d68e:	d058      	beq.n	800d742 <HAL_TIM_ConfigClockSource+0x18a>
 800d690:	2b40      	cmp	r3, #64	; 0x40
 800d692:	d86f      	bhi.n	800d774 <HAL_TIM_ConfigClockSource+0x1bc>
 800d694:	2b30      	cmp	r3, #48	; 0x30
 800d696:	d064      	beq.n	800d762 <HAL_TIM_ConfigClockSource+0x1aa>
 800d698:	2b30      	cmp	r3, #48	; 0x30
 800d69a:	d86b      	bhi.n	800d774 <HAL_TIM_ConfigClockSource+0x1bc>
 800d69c:	2b20      	cmp	r3, #32
 800d69e:	d060      	beq.n	800d762 <HAL_TIM_ConfigClockSource+0x1aa>
 800d6a0:	2b20      	cmp	r3, #32
 800d6a2:	d867      	bhi.n	800d774 <HAL_TIM_ConfigClockSource+0x1bc>
 800d6a4:	2b00      	cmp	r3, #0
 800d6a6:	d05c      	beq.n	800d762 <HAL_TIM_ConfigClockSource+0x1aa>
 800d6a8:	2b10      	cmp	r3, #16
 800d6aa:	d05a      	beq.n	800d762 <HAL_TIM_ConfigClockSource+0x1aa>
 800d6ac:	e062      	b.n	800d774 <HAL_TIM_ConfigClockSource+0x1bc>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800d6ae:	687b      	ldr	r3, [r7, #4]
 800d6b0:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 800d6b2:	683b      	ldr	r3, [r7, #0]
 800d6b4:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 800d6b6:	683b      	ldr	r3, [r7, #0]
 800d6b8:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 800d6ba:	683b      	ldr	r3, [r7, #0]
 800d6bc:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 800d6be:	f000 f98b 	bl	800d9d8 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 800d6c2:	687b      	ldr	r3, [r7, #4]
 800d6c4:	681b      	ldr	r3, [r3, #0]
 800d6c6:	689b      	ldr	r3, [r3, #8]
 800d6c8:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800d6ca:	68bb      	ldr	r3, [r7, #8]
 800d6cc:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 800d6d0:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 800d6d2:	687b      	ldr	r3, [r7, #4]
 800d6d4:	681b      	ldr	r3, [r3, #0]
 800d6d6:	68ba      	ldr	r2, [r7, #8]
 800d6d8:	609a      	str	r2, [r3, #8]
      break;
 800d6da:	e04f      	b.n	800d77c <HAL_TIM_ConfigClockSource+0x1c4>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800d6dc:	687b      	ldr	r3, [r7, #4]
 800d6de:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 800d6e0:	683b      	ldr	r3, [r7, #0]
 800d6e2:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 800d6e4:	683b      	ldr	r3, [r7, #0]
 800d6e6:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 800d6e8:	683b      	ldr	r3, [r7, #0]
 800d6ea:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 800d6ec:	f000 f974 	bl	800d9d8 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800d6f0:	687b      	ldr	r3, [r7, #4]
 800d6f2:	681b      	ldr	r3, [r3, #0]
 800d6f4:	689a      	ldr	r2, [r3, #8]
 800d6f6:	687b      	ldr	r3, [r7, #4]
 800d6f8:	681b      	ldr	r3, [r3, #0]
 800d6fa:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800d6fe:	609a      	str	r2, [r3, #8]
      break;
 800d700:	e03c      	b.n	800d77c <HAL_TIM_ConfigClockSource+0x1c4>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800d702:	687b      	ldr	r3, [r7, #4]
 800d704:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800d706:	683b      	ldr	r3, [r7, #0]
 800d708:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800d70a:	683b      	ldr	r3, [r7, #0]
 800d70c:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800d70e:	461a      	mov	r2, r3
 800d710:	f000 f8e4 	bl	800d8dc <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 800d714:	687b      	ldr	r3, [r7, #4]
 800d716:	681b      	ldr	r3, [r3, #0]
 800d718:	2150      	movs	r1, #80	; 0x50
 800d71a:	4618      	mov	r0, r3
 800d71c:	f000 f93e 	bl	800d99c <TIM_ITRx_SetConfig>
      break;
 800d720:	e02c      	b.n	800d77c <HAL_TIM_ConfigClockSource+0x1c4>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 800d722:	687b      	ldr	r3, [r7, #4]
 800d724:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800d726:	683b      	ldr	r3, [r7, #0]
 800d728:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800d72a:	683b      	ldr	r3, [r7, #0]
 800d72c:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 800d72e:	461a      	mov	r2, r3
 800d730:	f000 f903 	bl	800d93a <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 800d734:	687b      	ldr	r3, [r7, #4]
 800d736:	681b      	ldr	r3, [r3, #0]
 800d738:	2160      	movs	r1, #96	; 0x60
 800d73a:	4618      	mov	r0, r3
 800d73c:	f000 f92e 	bl	800d99c <TIM_ITRx_SetConfig>
      break;
 800d740:	e01c      	b.n	800d77c <HAL_TIM_ConfigClockSource+0x1c4>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800d742:	687b      	ldr	r3, [r7, #4]
 800d744:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800d746:	683b      	ldr	r3, [r7, #0]
 800d748:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800d74a:	683b      	ldr	r3, [r7, #0]
 800d74c:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800d74e:	461a      	mov	r2, r3
 800d750:	f000 f8c4 	bl	800d8dc <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 800d754:	687b      	ldr	r3, [r7, #4]
 800d756:	681b      	ldr	r3, [r3, #0]
 800d758:	2140      	movs	r1, #64	; 0x40
 800d75a:	4618      	mov	r0, r3
 800d75c:	f000 f91e 	bl	800d99c <TIM_ITRx_SetConfig>
      break;
 800d760:	e00c      	b.n	800d77c <HAL_TIM_ConfigClockSource+0x1c4>
    case TIM_CLOCKSOURCE_ITR8:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800d762:	687b      	ldr	r3, [r7, #4]
 800d764:	681a      	ldr	r2, [r3, #0]
 800d766:	683b      	ldr	r3, [r7, #0]
 800d768:	681b      	ldr	r3, [r3, #0]
 800d76a:	4619      	mov	r1, r3
 800d76c:	4610      	mov	r0, r2
 800d76e:	f000 f915 	bl	800d99c <TIM_ITRx_SetConfig>
      break;
 800d772:	e003      	b.n	800d77c <HAL_TIM_ConfigClockSource+0x1c4>
    }

    default:
      status = HAL_ERROR;
 800d774:	2301      	movs	r3, #1
 800d776:	73fb      	strb	r3, [r7, #15]
      break;
 800d778:	e000      	b.n	800d77c <HAL_TIM_ConfigClockSource+0x1c4>
      break;
 800d77a:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 800d77c:	687b      	ldr	r3, [r7, #4]
 800d77e:	2201      	movs	r2, #1
 800d780:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800d784:	687b      	ldr	r3, [r7, #4]
 800d786:	2200      	movs	r2, #0
 800d788:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 800d78c:	7bfb      	ldrb	r3, [r7, #15]
}
 800d78e:	4618      	mov	r0, r3
 800d790:	3710      	adds	r7, #16
 800d792:	46bd      	mov	sp, r7
 800d794:	bd80      	pop	{r7, pc}
 800d796:	bf00      	nop
 800d798:	ffceff88 	.word	0xffceff88
 800d79c:	00100040 	.word	0x00100040
 800d7a0:	00100030 	.word	0x00100030
 800d7a4:	00100020 	.word	0x00100020

0800d7a8 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 800d7a8:	b480      	push	{r7}
 800d7aa:	b085      	sub	sp, #20
 800d7ac:	af00      	add	r7, sp, #0
 800d7ae:	6078      	str	r0, [r7, #4]
 800d7b0:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800d7b2:	687b      	ldr	r3, [r7, #4]
 800d7b4:	681b      	ldr	r3, [r3, #0]
 800d7b6:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800d7b8:	687b      	ldr	r3, [r7, #4]
 800d7ba:	4a40      	ldr	r2, [pc, #256]	; (800d8bc <TIM_Base_SetConfig+0x114>)
 800d7bc:	4293      	cmp	r3, r2
 800d7be:	d013      	beq.n	800d7e8 <TIM_Base_SetConfig+0x40>
 800d7c0:	687b      	ldr	r3, [r7, #4]
 800d7c2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800d7c6:	d00f      	beq.n	800d7e8 <TIM_Base_SetConfig+0x40>
 800d7c8:	687b      	ldr	r3, [r7, #4]
 800d7ca:	4a3d      	ldr	r2, [pc, #244]	; (800d8c0 <TIM_Base_SetConfig+0x118>)
 800d7cc:	4293      	cmp	r3, r2
 800d7ce:	d00b      	beq.n	800d7e8 <TIM_Base_SetConfig+0x40>
 800d7d0:	687b      	ldr	r3, [r7, #4]
 800d7d2:	4a3c      	ldr	r2, [pc, #240]	; (800d8c4 <TIM_Base_SetConfig+0x11c>)
 800d7d4:	4293      	cmp	r3, r2
 800d7d6:	d007      	beq.n	800d7e8 <TIM_Base_SetConfig+0x40>
 800d7d8:	687b      	ldr	r3, [r7, #4]
 800d7da:	4a3b      	ldr	r2, [pc, #236]	; (800d8c8 <TIM_Base_SetConfig+0x120>)
 800d7dc:	4293      	cmp	r3, r2
 800d7de:	d003      	beq.n	800d7e8 <TIM_Base_SetConfig+0x40>
 800d7e0:	687b      	ldr	r3, [r7, #4]
 800d7e2:	4a3a      	ldr	r2, [pc, #232]	; (800d8cc <TIM_Base_SetConfig+0x124>)
 800d7e4:	4293      	cmp	r3, r2
 800d7e6:	d108      	bne.n	800d7fa <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800d7e8:	68fb      	ldr	r3, [r7, #12]
 800d7ea:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800d7ee:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800d7f0:	683b      	ldr	r3, [r7, #0]
 800d7f2:	685b      	ldr	r3, [r3, #4]
 800d7f4:	68fa      	ldr	r2, [r7, #12]
 800d7f6:	4313      	orrs	r3, r2
 800d7f8:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800d7fa:	687b      	ldr	r3, [r7, #4]
 800d7fc:	4a2f      	ldr	r2, [pc, #188]	; (800d8bc <TIM_Base_SetConfig+0x114>)
 800d7fe:	4293      	cmp	r3, r2
 800d800:	d01f      	beq.n	800d842 <TIM_Base_SetConfig+0x9a>
 800d802:	687b      	ldr	r3, [r7, #4]
 800d804:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800d808:	d01b      	beq.n	800d842 <TIM_Base_SetConfig+0x9a>
 800d80a:	687b      	ldr	r3, [r7, #4]
 800d80c:	4a2c      	ldr	r2, [pc, #176]	; (800d8c0 <TIM_Base_SetConfig+0x118>)
 800d80e:	4293      	cmp	r3, r2
 800d810:	d017      	beq.n	800d842 <TIM_Base_SetConfig+0x9a>
 800d812:	687b      	ldr	r3, [r7, #4]
 800d814:	4a2b      	ldr	r2, [pc, #172]	; (800d8c4 <TIM_Base_SetConfig+0x11c>)
 800d816:	4293      	cmp	r3, r2
 800d818:	d013      	beq.n	800d842 <TIM_Base_SetConfig+0x9a>
 800d81a:	687b      	ldr	r3, [r7, #4]
 800d81c:	4a2a      	ldr	r2, [pc, #168]	; (800d8c8 <TIM_Base_SetConfig+0x120>)
 800d81e:	4293      	cmp	r3, r2
 800d820:	d00f      	beq.n	800d842 <TIM_Base_SetConfig+0x9a>
 800d822:	687b      	ldr	r3, [r7, #4]
 800d824:	4a29      	ldr	r2, [pc, #164]	; (800d8cc <TIM_Base_SetConfig+0x124>)
 800d826:	4293      	cmp	r3, r2
 800d828:	d00b      	beq.n	800d842 <TIM_Base_SetConfig+0x9a>
 800d82a:	687b      	ldr	r3, [r7, #4]
 800d82c:	4a28      	ldr	r2, [pc, #160]	; (800d8d0 <TIM_Base_SetConfig+0x128>)
 800d82e:	4293      	cmp	r3, r2
 800d830:	d007      	beq.n	800d842 <TIM_Base_SetConfig+0x9a>
 800d832:	687b      	ldr	r3, [r7, #4]
 800d834:	4a27      	ldr	r2, [pc, #156]	; (800d8d4 <TIM_Base_SetConfig+0x12c>)
 800d836:	4293      	cmp	r3, r2
 800d838:	d003      	beq.n	800d842 <TIM_Base_SetConfig+0x9a>
 800d83a:	687b      	ldr	r3, [r7, #4]
 800d83c:	4a26      	ldr	r2, [pc, #152]	; (800d8d8 <TIM_Base_SetConfig+0x130>)
 800d83e:	4293      	cmp	r3, r2
 800d840:	d108      	bne.n	800d854 <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800d842:	68fb      	ldr	r3, [r7, #12]
 800d844:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800d848:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800d84a:	683b      	ldr	r3, [r7, #0]
 800d84c:	68db      	ldr	r3, [r3, #12]
 800d84e:	68fa      	ldr	r2, [r7, #12]
 800d850:	4313      	orrs	r3, r2
 800d852:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800d854:	68fb      	ldr	r3, [r7, #12]
 800d856:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800d85a:	683b      	ldr	r3, [r7, #0]
 800d85c:	695b      	ldr	r3, [r3, #20]
 800d85e:	4313      	orrs	r3, r2
 800d860:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800d862:	687b      	ldr	r3, [r7, #4]
 800d864:	68fa      	ldr	r2, [r7, #12]
 800d866:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800d868:	683b      	ldr	r3, [r7, #0]
 800d86a:	689a      	ldr	r2, [r3, #8]
 800d86c:	687b      	ldr	r3, [r7, #4]
 800d86e:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800d870:	683b      	ldr	r3, [r7, #0]
 800d872:	681a      	ldr	r2, [r3, #0]
 800d874:	687b      	ldr	r3, [r7, #4]
 800d876:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800d878:	687b      	ldr	r3, [r7, #4]
 800d87a:	4a10      	ldr	r2, [pc, #64]	; (800d8bc <TIM_Base_SetConfig+0x114>)
 800d87c:	4293      	cmp	r3, r2
 800d87e:	d00f      	beq.n	800d8a0 <TIM_Base_SetConfig+0xf8>
 800d880:	687b      	ldr	r3, [r7, #4]
 800d882:	4a12      	ldr	r2, [pc, #72]	; (800d8cc <TIM_Base_SetConfig+0x124>)
 800d884:	4293      	cmp	r3, r2
 800d886:	d00b      	beq.n	800d8a0 <TIM_Base_SetConfig+0xf8>
 800d888:	687b      	ldr	r3, [r7, #4]
 800d88a:	4a11      	ldr	r2, [pc, #68]	; (800d8d0 <TIM_Base_SetConfig+0x128>)
 800d88c:	4293      	cmp	r3, r2
 800d88e:	d007      	beq.n	800d8a0 <TIM_Base_SetConfig+0xf8>
 800d890:	687b      	ldr	r3, [r7, #4]
 800d892:	4a10      	ldr	r2, [pc, #64]	; (800d8d4 <TIM_Base_SetConfig+0x12c>)
 800d894:	4293      	cmp	r3, r2
 800d896:	d003      	beq.n	800d8a0 <TIM_Base_SetConfig+0xf8>
 800d898:	687b      	ldr	r3, [r7, #4]
 800d89a:	4a0f      	ldr	r2, [pc, #60]	; (800d8d8 <TIM_Base_SetConfig+0x130>)
 800d89c:	4293      	cmp	r3, r2
 800d89e:	d103      	bne.n	800d8a8 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800d8a0:	683b      	ldr	r3, [r7, #0]
 800d8a2:	691a      	ldr	r2, [r3, #16]
 800d8a4:	687b      	ldr	r3, [r7, #4]
 800d8a6:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800d8a8:	687b      	ldr	r3, [r7, #4]
 800d8aa:	2201      	movs	r2, #1
 800d8ac:	615a      	str	r2, [r3, #20]
}
 800d8ae:	bf00      	nop
 800d8b0:	3714      	adds	r7, #20
 800d8b2:	46bd      	mov	sp, r7
 800d8b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d8b8:	4770      	bx	lr
 800d8ba:	bf00      	nop
 800d8bc:	40010000 	.word	0x40010000
 800d8c0:	40000400 	.word	0x40000400
 800d8c4:	40000800 	.word	0x40000800
 800d8c8:	40000c00 	.word	0x40000c00
 800d8cc:	40010400 	.word	0x40010400
 800d8d0:	40014000 	.word	0x40014000
 800d8d4:	40014400 	.word	0x40014400
 800d8d8:	40014800 	.word	0x40014800

0800d8dc <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800d8dc:	b480      	push	{r7}
 800d8de:	b087      	sub	sp, #28
 800d8e0:	af00      	add	r7, sp, #0
 800d8e2:	60f8      	str	r0, [r7, #12]
 800d8e4:	60b9      	str	r1, [r7, #8]
 800d8e6:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 800d8e8:	68fb      	ldr	r3, [r7, #12]
 800d8ea:	6a1b      	ldr	r3, [r3, #32]
 800d8ec:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800d8ee:	68fb      	ldr	r3, [r7, #12]
 800d8f0:	6a1b      	ldr	r3, [r3, #32]
 800d8f2:	f023 0201 	bic.w	r2, r3, #1
 800d8f6:	68fb      	ldr	r3, [r7, #12]
 800d8f8:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800d8fa:	68fb      	ldr	r3, [r7, #12]
 800d8fc:	699b      	ldr	r3, [r3, #24]
 800d8fe:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800d900:	693b      	ldr	r3, [r7, #16]
 800d902:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800d906:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800d908:	687b      	ldr	r3, [r7, #4]
 800d90a:	011b      	lsls	r3, r3, #4
 800d90c:	693a      	ldr	r2, [r7, #16]
 800d90e:	4313      	orrs	r3, r2
 800d910:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800d912:	697b      	ldr	r3, [r7, #20]
 800d914:	f023 030a 	bic.w	r3, r3, #10
 800d918:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800d91a:	697a      	ldr	r2, [r7, #20]
 800d91c:	68bb      	ldr	r3, [r7, #8]
 800d91e:	4313      	orrs	r3, r2
 800d920:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800d922:	68fb      	ldr	r3, [r7, #12]
 800d924:	693a      	ldr	r2, [r7, #16]
 800d926:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800d928:	68fb      	ldr	r3, [r7, #12]
 800d92a:	697a      	ldr	r2, [r7, #20]
 800d92c:	621a      	str	r2, [r3, #32]
}
 800d92e:	bf00      	nop
 800d930:	371c      	adds	r7, #28
 800d932:	46bd      	mov	sp, r7
 800d934:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d938:	4770      	bx	lr

0800d93a <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800d93a:	b480      	push	{r7}
 800d93c:	b087      	sub	sp, #28
 800d93e:	af00      	add	r7, sp, #0
 800d940:	60f8      	str	r0, [r7, #12]
 800d942:	60b9      	str	r1, [r7, #8]
 800d944:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800d946:	68fb      	ldr	r3, [r7, #12]
 800d948:	6a1b      	ldr	r3, [r3, #32]
 800d94a:	f023 0210 	bic.w	r2, r3, #16
 800d94e:	68fb      	ldr	r3, [r7, #12]
 800d950:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800d952:	68fb      	ldr	r3, [r7, #12]
 800d954:	699b      	ldr	r3, [r3, #24]
 800d956:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 800d958:	68fb      	ldr	r3, [r7, #12]
 800d95a:	6a1b      	ldr	r3, [r3, #32]
 800d95c:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800d95e:	697b      	ldr	r3, [r7, #20]
 800d960:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800d964:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800d966:	687b      	ldr	r3, [r7, #4]
 800d968:	031b      	lsls	r3, r3, #12
 800d96a:	697a      	ldr	r2, [r7, #20]
 800d96c:	4313      	orrs	r3, r2
 800d96e:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800d970:	693b      	ldr	r3, [r7, #16]
 800d972:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 800d976:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 800d978:	68bb      	ldr	r3, [r7, #8]
 800d97a:	011b      	lsls	r3, r3, #4
 800d97c:	693a      	ldr	r2, [r7, #16]
 800d97e:	4313      	orrs	r3, r2
 800d980:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800d982:	68fb      	ldr	r3, [r7, #12]
 800d984:	697a      	ldr	r2, [r7, #20]
 800d986:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800d988:	68fb      	ldr	r3, [r7, #12]
 800d98a:	693a      	ldr	r2, [r7, #16]
 800d98c:	621a      	str	r2, [r3, #32]
}
 800d98e:	bf00      	nop
 800d990:	371c      	adds	r7, #28
 800d992:	46bd      	mov	sp, r7
 800d994:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d998:	4770      	bx	lr
	...

0800d99c <TIM_ITRx_SetConfig>:
  *       (*)  Value not defined in all devices.
  *
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800d99c:	b480      	push	{r7}
 800d99e:	b085      	sub	sp, #20
 800d9a0:	af00      	add	r7, sp, #0
 800d9a2:	6078      	str	r0, [r7, #4]
 800d9a4:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 800d9a6:	687b      	ldr	r3, [r7, #4]
 800d9a8:	689b      	ldr	r3, [r3, #8]
 800d9aa:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800d9ac:	68fa      	ldr	r2, [r7, #12]
 800d9ae:	4b09      	ldr	r3, [pc, #36]	; (800d9d4 <TIM_ITRx_SetConfig+0x38>)
 800d9b0:	4013      	ands	r3, r2
 800d9b2:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800d9b4:	683a      	ldr	r2, [r7, #0]
 800d9b6:	68fb      	ldr	r3, [r7, #12]
 800d9b8:	4313      	orrs	r3, r2
 800d9ba:	f043 0307 	orr.w	r3, r3, #7
 800d9be:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800d9c0:	687b      	ldr	r3, [r7, #4]
 800d9c2:	68fa      	ldr	r2, [r7, #12]
 800d9c4:	609a      	str	r2, [r3, #8]
}
 800d9c6:	bf00      	nop
 800d9c8:	3714      	adds	r7, #20
 800d9ca:	46bd      	mov	sp, r7
 800d9cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d9d0:	4770      	bx	lr
 800d9d2:	bf00      	nop
 800d9d4:	ffcfff8f 	.word	0xffcfff8f

0800d9d8 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800d9d8:	b480      	push	{r7}
 800d9da:	b087      	sub	sp, #28
 800d9dc:	af00      	add	r7, sp, #0
 800d9de:	60f8      	str	r0, [r7, #12]
 800d9e0:	60b9      	str	r1, [r7, #8]
 800d9e2:	607a      	str	r2, [r7, #4]
 800d9e4:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800d9e6:	68fb      	ldr	r3, [r7, #12]
 800d9e8:	689b      	ldr	r3, [r3, #8]
 800d9ea:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800d9ec:	697b      	ldr	r3, [r7, #20]
 800d9ee:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800d9f2:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800d9f4:	683b      	ldr	r3, [r7, #0]
 800d9f6:	021a      	lsls	r2, r3, #8
 800d9f8:	687b      	ldr	r3, [r7, #4]
 800d9fa:	431a      	orrs	r2, r3
 800d9fc:	68bb      	ldr	r3, [r7, #8]
 800d9fe:	4313      	orrs	r3, r2
 800da00:	697a      	ldr	r2, [r7, #20]
 800da02:	4313      	orrs	r3, r2
 800da04:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800da06:	68fb      	ldr	r3, [r7, #12]
 800da08:	697a      	ldr	r2, [r7, #20]
 800da0a:	609a      	str	r2, [r3, #8]
}
 800da0c:	bf00      	nop
 800da0e:	371c      	adds	r7, #28
 800da10:	46bd      	mov	sp, r7
 800da12:	f85d 7b04 	ldr.w	r7, [sp], #4
 800da16:	4770      	bx	lr

0800da18 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 800da18:	b480      	push	{r7}
 800da1a:	b085      	sub	sp, #20
 800da1c:	af00      	add	r7, sp, #0
 800da1e:	6078      	str	r0, [r7, #4]
 800da20:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800da22:	687b      	ldr	r3, [r7, #4]
 800da24:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800da28:	2b01      	cmp	r3, #1
 800da2a:	d101      	bne.n	800da30 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800da2c:	2302      	movs	r3, #2
 800da2e:	e06d      	b.n	800db0c <HAL_TIMEx_MasterConfigSynchronization+0xf4>
 800da30:	687b      	ldr	r3, [r7, #4]
 800da32:	2201      	movs	r2, #1
 800da34:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800da38:	687b      	ldr	r3, [r7, #4]
 800da3a:	2202      	movs	r2, #2
 800da3c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800da40:	687b      	ldr	r3, [r7, #4]
 800da42:	681b      	ldr	r3, [r3, #0]
 800da44:	685b      	ldr	r3, [r3, #4]
 800da46:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800da48:	687b      	ldr	r3, [r7, #4]
 800da4a:	681b      	ldr	r3, [r3, #0]
 800da4c:	689b      	ldr	r3, [r3, #8]
 800da4e:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 800da50:	687b      	ldr	r3, [r7, #4]
 800da52:	681b      	ldr	r3, [r3, #0]
 800da54:	4a30      	ldr	r2, [pc, #192]	; (800db18 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 800da56:	4293      	cmp	r3, r2
 800da58:	d004      	beq.n	800da64 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 800da5a:	687b      	ldr	r3, [r7, #4]
 800da5c:	681b      	ldr	r3, [r3, #0]
 800da5e:	4a2f      	ldr	r2, [pc, #188]	; (800db1c <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 800da60:	4293      	cmp	r3, r2
 800da62:	d108      	bne.n	800da76 <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 800da64:	68fb      	ldr	r3, [r7, #12]
 800da66:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 800da6a:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 800da6c:	683b      	ldr	r3, [r7, #0]
 800da6e:	685b      	ldr	r3, [r3, #4]
 800da70:	68fa      	ldr	r2, [r7, #12]
 800da72:	4313      	orrs	r3, r2
 800da74:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800da76:	68fb      	ldr	r3, [r7, #12]
 800da78:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800da7c:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800da7e:	683b      	ldr	r3, [r7, #0]
 800da80:	681b      	ldr	r3, [r3, #0]
 800da82:	68fa      	ldr	r2, [r7, #12]
 800da84:	4313      	orrs	r3, r2
 800da86:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800da88:	687b      	ldr	r3, [r7, #4]
 800da8a:	681b      	ldr	r3, [r3, #0]
 800da8c:	68fa      	ldr	r2, [r7, #12]
 800da8e:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800da90:	687b      	ldr	r3, [r7, #4]
 800da92:	681b      	ldr	r3, [r3, #0]
 800da94:	4a20      	ldr	r2, [pc, #128]	; (800db18 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 800da96:	4293      	cmp	r3, r2
 800da98:	d022      	beq.n	800dae0 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800da9a:	687b      	ldr	r3, [r7, #4]
 800da9c:	681b      	ldr	r3, [r3, #0]
 800da9e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800daa2:	d01d      	beq.n	800dae0 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800daa4:	687b      	ldr	r3, [r7, #4]
 800daa6:	681b      	ldr	r3, [r3, #0]
 800daa8:	4a1d      	ldr	r2, [pc, #116]	; (800db20 <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 800daaa:	4293      	cmp	r3, r2
 800daac:	d018      	beq.n	800dae0 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800daae:	687b      	ldr	r3, [r7, #4]
 800dab0:	681b      	ldr	r3, [r3, #0]
 800dab2:	4a1c      	ldr	r2, [pc, #112]	; (800db24 <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 800dab4:	4293      	cmp	r3, r2
 800dab6:	d013      	beq.n	800dae0 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800dab8:	687b      	ldr	r3, [r7, #4]
 800daba:	681b      	ldr	r3, [r3, #0]
 800dabc:	4a1a      	ldr	r2, [pc, #104]	; (800db28 <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 800dabe:	4293      	cmp	r3, r2
 800dac0:	d00e      	beq.n	800dae0 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800dac2:	687b      	ldr	r3, [r7, #4]
 800dac4:	681b      	ldr	r3, [r3, #0]
 800dac6:	4a15      	ldr	r2, [pc, #84]	; (800db1c <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 800dac8:	4293      	cmp	r3, r2
 800daca:	d009      	beq.n	800dae0 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800dacc:	687b      	ldr	r3, [r7, #4]
 800dace:	681b      	ldr	r3, [r3, #0]
 800dad0:	4a16      	ldr	r2, [pc, #88]	; (800db2c <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 800dad2:	4293      	cmp	r3, r2
 800dad4:	d004      	beq.n	800dae0 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800dad6:	687b      	ldr	r3, [r7, #4]
 800dad8:	681b      	ldr	r3, [r3, #0]
 800dada:	4a15      	ldr	r2, [pc, #84]	; (800db30 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 800dadc:	4293      	cmp	r3, r2
 800dade:	d10c      	bne.n	800dafa <HAL_TIMEx_MasterConfigSynchronization+0xe2>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800dae0:	68bb      	ldr	r3, [r7, #8]
 800dae2:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800dae6:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800dae8:	683b      	ldr	r3, [r7, #0]
 800daea:	689b      	ldr	r3, [r3, #8]
 800daec:	68ba      	ldr	r2, [r7, #8]
 800daee:	4313      	orrs	r3, r2
 800daf0:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800daf2:	687b      	ldr	r3, [r7, #4]
 800daf4:	681b      	ldr	r3, [r3, #0]
 800daf6:	68ba      	ldr	r2, [r7, #8]
 800daf8:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800dafa:	687b      	ldr	r3, [r7, #4]
 800dafc:	2201      	movs	r2, #1
 800dafe:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800db02:	687b      	ldr	r3, [r7, #4]
 800db04:	2200      	movs	r2, #0
 800db06:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800db0a:	2300      	movs	r3, #0
}
 800db0c:	4618      	mov	r0, r3
 800db0e:	3714      	adds	r7, #20
 800db10:	46bd      	mov	sp, r7
 800db12:	f85d 7b04 	ldr.w	r7, [sp], #4
 800db16:	4770      	bx	lr
 800db18:	40010000 	.word	0x40010000
 800db1c:	40010400 	.word	0x40010400
 800db20:	40000400 	.word	0x40000400
 800db24:	40000800 	.word	0x40000800
 800db28:	40000c00 	.word	0x40000c00
 800db2c:	40001800 	.word	0x40001800
 800db30:	40014000 	.word	0x40014000

0800db34 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800db34:	b580      	push	{r7, lr}
 800db36:	b082      	sub	sp, #8
 800db38:	af00      	add	r7, sp, #0
 800db3a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800db3c:	687b      	ldr	r3, [r7, #4]
 800db3e:	2b00      	cmp	r3, #0
 800db40:	d101      	bne.n	800db46 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800db42:	2301      	movs	r3, #1
 800db44:	e042      	b.n	800dbcc <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800db46:	687b      	ldr	r3, [r7, #4]
 800db48:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800db4c:	2b00      	cmp	r3, #0
 800db4e:	d106      	bne.n	800db5e <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800db50:	687b      	ldr	r3, [r7, #4]
 800db52:	2200      	movs	r2, #0
 800db54:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800db58:	6878      	ldr	r0, [r7, #4]
 800db5a:	f7f5 fdfd 	bl	8003758 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800db5e:	687b      	ldr	r3, [r7, #4]
 800db60:	2224      	movs	r2, #36	; 0x24
 800db62:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  __HAL_UART_DISABLE(huart);
 800db66:	687b      	ldr	r3, [r7, #4]
 800db68:	681b      	ldr	r3, [r3, #0]
 800db6a:	681a      	ldr	r2, [r3, #0]
 800db6c:	687b      	ldr	r3, [r7, #4]
 800db6e:	681b      	ldr	r3, [r3, #0]
 800db70:	f022 0201 	bic.w	r2, r2, #1
 800db74:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800db76:	6878      	ldr	r0, [r7, #4]
 800db78:	f000 f8ba 	bl	800dcf0 <UART_SetConfig>
 800db7c:	4603      	mov	r3, r0
 800db7e:	2b01      	cmp	r3, #1
 800db80:	d101      	bne.n	800db86 <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 800db82:	2301      	movs	r3, #1
 800db84:	e022      	b.n	800dbcc <HAL_UART_Init+0x98>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800db86:	687b      	ldr	r3, [r7, #4]
 800db88:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800db8a:	2b00      	cmp	r3, #0
 800db8c:	d002      	beq.n	800db94 <HAL_UART_Init+0x60>
  {
    UART_AdvFeatureConfig(huart);
 800db8e:	6878      	ldr	r0, [r7, #4]
 800db90:	f000 fe16 	bl	800e7c0 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800db94:	687b      	ldr	r3, [r7, #4]
 800db96:	681b      	ldr	r3, [r3, #0]
 800db98:	685a      	ldr	r2, [r3, #4]
 800db9a:	687b      	ldr	r3, [r7, #4]
 800db9c:	681b      	ldr	r3, [r3, #0]
 800db9e:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800dba2:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800dba4:	687b      	ldr	r3, [r7, #4]
 800dba6:	681b      	ldr	r3, [r3, #0]
 800dba8:	689a      	ldr	r2, [r3, #8]
 800dbaa:	687b      	ldr	r3, [r7, #4]
 800dbac:	681b      	ldr	r3, [r3, #0]
 800dbae:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800dbb2:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 800dbb4:	687b      	ldr	r3, [r7, #4]
 800dbb6:	681b      	ldr	r3, [r3, #0]
 800dbb8:	681a      	ldr	r2, [r3, #0]
 800dbba:	687b      	ldr	r3, [r7, #4]
 800dbbc:	681b      	ldr	r3, [r3, #0]
 800dbbe:	f042 0201 	orr.w	r2, r2, #1
 800dbc2:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 800dbc4:	6878      	ldr	r0, [r7, #4]
 800dbc6:	f000 fe9d 	bl	800e904 <UART_CheckIdleState>
 800dbca:	4603      	mov	r3, r0
}
 800dbcc:	4618      	mov	r0, r3
 800dbce:	3708      	adds	r7, #8
 800dbd0:	46bd      	mov	sp, r7
 800dbd2:	bd80      	pop	{r7, pc}

0800dbd4 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800dbd4:	b580      	push	{r7, lr}
 800dbd6:	b08a      	sub	sp, #40	; 0x28
 800dbd8:	af02      	add	r7, sp, #8
 800dbda:	60f8      	str	r0, [r7, #12]
 800dbdc:	60b9      	str	r1, [r7, #8]
 800dbde:	603b      	str	r3, [r7, #0]
 800dbe0:	4613      	mov	r3, r2
 800dbe2:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800dbe4:	68fb      	ldr	r3, [r7, #12]
 800dbe6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800dbea:	2b20      	cmp	r3, #32
 800dbec:	d17b      	bne.n	800dce6 <HAL_UART_Transmit+0x112>
  {
    if ((pData == NULL) || (Size == 0U))
 800dbee:	68bb      	ldr	r3, [r7, #8]
 800dbf0:	2b00      	cmp	r3, #0
 800dbf2:	d002      	beq.n	800dbfa <HAL_UART_Transmit+0x26>
 800dbf4:	88fb      	ldrh	r3, [r7, #6]
 800dbf6:	2b00      	cmp	r3, #0
 800dbf8:	d101      	bne.n	800dbfe <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 800dbfa:	2301      	movs	r3, #1
 800dbfc:	e074      	b.n	800dce8 <HAL_UART_Transmit+0x114>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800dbfe:	68fb      	ldr	r3, [r7, #12]
 800dc00:	2200      	movs	r2, #0
 800dc02:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800dc06:	68fb      	ldr	r3, [r7, #12]
 800dc08:	2221      	movs	r2, #33	; 0x21
 800dc0a:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800dc0e:	f7f6 f9f7 	bl	8004000 <HAL_GetTick>
 800dc12:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 800dc14:	68fb      	ldr	r3, [r7, #12]
 800dc16:	88fa      	ldrh	r2, [r7, #6]
 800dc18:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
    huart->TxXferCount = Size;
 800dc1c:	68fb      	ldr	r3, [r7, #12]
 800dc1e:	88fa      	ldrh	r2, [r7, #6]
 800dc20:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800dc24:	68fb      	ldr	r3, [r7, #12]
 800dc26:	689b      	ldr	r3, [r3, #8]
 800dc28:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800dc2c:	d108      	bne.n	800dc40 <HAL_UART_Transmit+0x6c>
 800dc2e:	68fb      	ldr	r3, [r7, #12]
 800dc30:	691b      	ldr	r3, [r3, #16]
 800dc32:	2b00      	cmp	r3, #0
 800dc34:	d104      	bne.n	800dc40 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 800dc36:	2300      	movs	r3, #0
 800dc38:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 800dc3a:	68bb      	ldr	r3, [r7, #8]
 800dc3c:	61bb      	str	r3, [r7, #24]
 800dc3e:	e003      	b.n	800dc48 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 800dc40:	68bb      	ldr	r3, [r7, #8]
 800dc42:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800dc44:	2300      	movs	r3, #0
 800dc46:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 800dc48:	e030      	b.n	800dcac <HAL_UART_Transmit+0xd8>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800dc4a:	683b      	ldr	r3, [r7, #0]
 800dc4c:	9300      	str	r3, [sp, #0]
 800dc4e:	697b      	ldr	r3, [r7, #20]
 800dc50:	2200      	movs	r2, #0
 800dc52:	2180      	movs	r1, #128	; 0x80
 800dc54:	68f8      	ldr	r0, [r7, #12]
 800dc56:	f000 feff 	bl	800ea58 <UART_WaitOnFlagUntilTimeout>
 800dc5a:	4603      	mov	r3, r0
 800dc5c:	2b00      	cmp	r3, #0
 800dc5e:	d005      	beq.n	800dc6c <HAL_UART_Transmit+0x98>
      {

        huart->gState = HAL_UART_STATE_READY;
 800dc60:	68fb      	ldr	r3, [r7, #12]
 800dc62:	2220      	movs	r2, #32
 800dc64:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

        return HAL_TIMEOUT;
 800dc68:	2303      	movs	r3, #3
 800dc6a:	e03d      	b.n	800dce8 <HAL_UART_Transmit+0x114>
      }
      if (pdata8bits == NULL)
 800dc6c:	69fb      	ldr	r3, [r7, #28]
 800dc6e:	2b00      	cmp	r3, #0
 800dc70:	d10b      	bne.n	800dc8a <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 800dc72:	69bb      	ldr	r3, [r7, #24]
 800dc74:	881b      	ldrh	r3, [r3, #0]
 800dc76:	461a      	mov	r2, r3
 800dc78:	68fb      	ldr	r3, [r7, #12]
 800dc7a:	681b      	ldr	r3, [r3, #0]
 800dc7c:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800dc80:	629a      	str	r2, [r3, #40]	; 0x28
        pdata16bits++;
 800dc82:	69bb      	ldr	r3, [r7, #24]
 800dc84:	3302      	adds	r3, #2
 800dc86:	61bb      	str	r3, [r7, #24]
 800dc88:	e007      	b.n	800dc9a <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 800dc8a:	69fb      	ldr	r3, [r7, #28]
 800dc8c:	781a      	ldrb	r2, [r3, #0]
 800dc8e:	68fb      	ldr	r3, [r7, #12]
 800dc90:	681b      	ldr	r3, [r3, #0]
 800dc92:	629a      	str	r2, [r3, #40]	; 0x28
        pdata8bits++;
 800dc94:	69fb      	ldr	r3, [r7, #28]
 800dc96:	3301      	adds	r3, #1
 800dc98:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800dc9a:	68fb      	ldr	r3, [r7, #12]
 800dc9c:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 800dca0:	b29b      	uxth	r3, r3
 800dca2:	3b01      	subs	r3, #1
 800dca4:	b29a      	uxth	r2, r3
 800dca6:	68fb      	ldr	r3, [r7, #12]
 800dca8:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
    while (huart->TxXferCount > 0U)
 800dcac:	68fb      	ldr	r3, [r7, #12]
 800dcae:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 800dcb2:	b29b      	uxth	r3, r3
 800dcb4:	2b00      	cmp	r3, #0
 800dcb6:	d1c8      	bne.n	800dc4a <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800dcb8:	683b      	ldr	r3, [r7, #0]
 800dcba:	9300      	str	r3, [sp, #0]
 800dcbc:	697b      	ldr	r3, [r7, #20]
 800dcbe:	2200      	movs	r2, #0
 800dcc0:	2140      	movs	r1, #64	; 0x40
 800dcc2:	68f8      	ldr	r0, [r7, #12]
 800dcc4:	f000 fec8 	bl	800ea58 <UART_WaitOnFlagUntilTimeout>
 800dcc8:	4603      	mov	r3, r0
 800dcca:	2b00      	cmp	r3, #0
 800dccc:	d005      	beq.n	800dcda <HAL_UART_Transmit+0x106>
    {
      huart->gState = HAL_UART_STATE_READY;
 800dcce:	68fb      	ldr	r3, [r7, #12]
 800dcd0:	2220      	movs	r2, #32
 800dcd2:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

      return HAL_TIMEOUT;
 800dcd6:	2303      	movs	r3, #3
 800dcd8:	e006      	b.n	800dce8 <HAL_UART_Transmit+0x114>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800dcda:	68fb      	ldr	r3, [r7, #12]
 800dcdc:	2220      	movs	r2, #32
 800dcde:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

    return HAL_OK;
 800dce2:	2300      	movs	r3, #0
 800dce4:	e000      	b.n	800dce8 <HAL_UART_Transmit+0x114>
  }
  else
  {
    return HAL_BUSY;
 800dce6:	2302      	movs	r3, #2
  }
}
 800dce8:	4618      	mov	r0, r3
 800dcea:	3720      	adds	r7, #32
 800dcec:	46bd      	mov	sp, r7
 800dcee:	bd80      	pop	{r7, pc}

0800dcf0 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 800dcf0:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800dcf4:	b092      	sub	sp, #72	; 0x48
 800dcf6:	af00      	add	r7, sp, #0
 800dcf8:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 800dcfa:	2300      	movs	r3, #0
 800dcfc:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800dd00:	697b      	ldr	r3, [r7, #20]
 800dd02:	689a      	ldr	r2, [r3, #8]
 800dd04:	697b      	ldr	r3, [r7, #20]
 800dd06:	691b      	ldr	r3, [r3, #16]
 800dd08:	431a      	orrs	r2, r3
 800dd0a:	697b      	ldr	r3, [r7, #20]
 800dd0c:	695b      	ldr	r3, [r3, #20]
 800dd0e:	431a      	orrs	r2, r3
 800dd10:	697b      	ldr	r3, [r7, #20]
 800dd12:	69db      	ldr	r3, [r3, #28]
 800dd14:	4313      	orrs	r3, r2
 800dd16:	647b      	str	r3, [r7, #68]	; 0x44
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800dd18:	697b      	ldr	r3, [r7, #20]
 800dd1a:	681b      	ldr	r3, [r3, #0]
 800dd1c:	681a      	ldr	r2, [r3, #0]
 800dd1e:	4bbe      	ldr	r3, [pc, #760]	; (800e018 <UART_SetConfig+0x328>)
 800dd20:	4013      	ands	r3, r2
 800dd22:	697a      	ldr	r2, [r7, #20]
 800dd24:	6812      	ldr	r2, [r2, #0]
 800dd26:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800dd28:	430b      	orrs	r3, r1
 800dd2a:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800dd2c:	697b      	ldr	r3, [r7, #20]
 800dd2e:	681b      	ldr	r3, [r3, #0]
 800dd30:	685b      	ldr	r3, [r3, #4]
 800dd32:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800dd36:	697b      	ldr	r3, [r7, #20]
 800dd38:	68da      	ldr	r2, [r3, #12]
 800dd3a:	697b      	ldr	r3, [r7, #20]
 800dd3c:	681b      	ldr	r3, [r3, #0]
 800dd3e:	430a      	orrs	r2, r1
 800dd40:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800dd42:	697b      	ldr	r3, [r7, #20]
 800dd44:	699b      	ldr	r3, [r3, #24]
 800dd46:	647b      	str	r3, [r7, #68]	; 0x44

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 800dd48:	697b      	ldr	r3, [r7, #20]
 800dd4a:	681b      	ldr	r3, [r3, #0]
 800dd4c:	4ab3      	ldr	r2, [pc, #716]	; (800e01c <UART_SetConfig+0x32c>)
 800dd4e:	4293      	cmp	r3, r2
 800dd50:	d004      	beq.n	800dd5c <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 800dd52:	697b      	ldr	r3, [r7, #20]
 800dd54:	6a1b      	ldr	r3, [r3, #32]
 800dd56:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800dd58:	4313      	orrs	r3, r2
 800dd5a:	647b      	str	r3, [r7, #68]	; 0x44
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800dd5c:	697b      	ldr	r3, [r7, #20]
 800dd5e:	681b      	ldr	r3, [r3, #0]
 800dd60:	689a      	ldr	r2, [r3, #8]
 800dd62:	4baf      	ldr	r3, [pc, #700]	; (800e020 <UART_SetConfig+0x330>)
 800dd64:	4013      	ands	r3, r2
 800dd66:	697a      	ldr	r2, [r7, #20]
 800dd68:	6812      	ldr	r2, [r2, #0]
 800dd6a:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800dd6c:	430b      	orrs	r3, r1
 800dd6e:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 800dd70:	697b      	ldr	r3, [r7, #20]
 800dd72:	681b      	ldr	r3, [r3, #0]
 800dd74:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800dd76:	f023 010f 	bic.w	r1, r3, #15
 800dd7a:	697b      	ldr	r3, [r7, #20]
 800dd7c:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800dd7e:	697b      	ldr	r3, [r7, #20]
 800dd80:	681b      	ldr	r3, [r3, #0]
 800dd82:	430a      	orrs	r2, r1
 800dd84:	62da      	str	r2, [r3, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800dd86:	697b      	ldr	r3, [r7, #20]
 800dd88:	681b      	ldr	r3, [r3, #0]
 800dd8a:	4aa6      	ldr	r2, [pc, #664]	; (800e024 <UART_SetConfig+0x334>)
 800dd8c:	4293      	cmp	r3, r2
 800dd8e:	d177      	bne.n	800de80 <UART_SetConfig+0x190>
 800dd90:	4ba5      	ldr	r3, [pc, #660]	; (800e028 <UART_SetConfig+0x338>)
 800dd92:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800dd94:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800dd98:	2b28      	cmp	r3, #40	; 0x28
 800dd9a:	d86d      	bhi.n	800de78 <UART_SetConfig+0x188>
 800dd9c:	a201      	add	r2, pc, #4	; (adr r2, 800dda4 <UART_SetConfig+0xb4>)
 800dd9e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800dda2:	bf00      	nop
 800dda4:	0800de49 	.word	0x0800de49
 800dda8:	0800de79 	.word	0x0800de79
 800ddac:	0800de79 	.word	0x0800de79
 800ddb0:	0800de79 	.word	0x0800de79
 800ddb4:	0800de79 	.word	0x0800de79
 800ddb8:	0800de79 	.word	0x0800de79
 800ddbc:	0800de79 	.word	0x0800de79
 800ddc0:	0800de79 	.word	0x0800de79
 800ddc4:	0800de51 	.word	0x0800de51
 800ddc8:	0800de79 	.word	0x0800de79
 800ddcc:	0800de79 	.word	0x0800de79
 800ddd0:	0800de79 	.word	0x0800de79
 800ddd4:	0800de79 	.word	0x0800de79
 800ddd8:	0800de79 	.word	0x0800de79
 800dddc:	0800de79 	.word	0x0800de79
 800dde0:	0800de79 	.word	0x0800de79
 800dde4:	0800de59 	.word	0x0800de59
 800dde8:	0800de79 	.word	0x0800de79
 800ddec:	0800de79 	.word	0x0800de79
 800ddf0:	0800de79 	.word	0x0800de79
 800ddf4:	0800de79 	.word	0x0800de79
 800ddf8:	0800de79 	.word	0x0800de79
 800ddfc:	0800de79 	.word	0x0800de79
 800de00:	0800de79 	.word	0x0800de79
 800de04:	0800de61 	.word	0x0800de61
 800de08:	0800de79 	.word	0x0800de79
 800de0c:	0800de79 	.word	0x0800de79
 800de10:	0800de79 	.word	0x0800de79
 800de14:	0800de79 	.word	0x0800de79
 800de18:	0800de79 	.word	0x0800de79
 800de1c:	0800de79 	.word	0x0800de79
 800de20:	0800de79 	.word	0x0800de79
 800de24:	0800de69 	.word	0x0800de69
 800de28:	0800de79 	.word	0x0800de79
 800de2c:	0800de79 	.word	0x0800de79
 800de30:	0800de79 	.word	0x0800de79
 800de34:	0800de79 	.word	0x0800de79
 800de38:	0800de79 	.word	0x0800de79
 800de3c:	0800de79 	.word	0x0800de79
 800de40:	0800de79 	.word	0x0800de79
 800de44:	0800de71 	.word	0x0800de71
 800de48:	2301      	movs	r3, #1
 800de4a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800de4e:	e222      	b.n	800e296 <UART_SetConfig+0x5a6>
 800de50:	2304      	movs	r3, #4
 800de52:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800de56:	e21e      	b.n	800e296 <UART_SetConfig+0x5a6>
 800de58:	2308      	movs	r3, #8
 800de5a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800de5e:	e21a      	b.n	800e296 <UART_SetConfig+0x5a6>
 800de60:	2310      	movs	r3, #16
 800de62:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800de66:	e216      	b.n	800e296 <UART_SetConfig+0x5a6>
 800de68:	2320      	movs	r3, #32
 800de6a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800de6e:	e212      	b.n	800e296 <UART_SetConfig+0x5a6>
 800de70:	2340      	movs	r3, #64	; 0x40
 800de72:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800de76:	e20e      	b.n	800e296 <UART_SetConfig+0x5a6>
 800de78:	2380      	movs	r3, #128	; 0x80
 800de7a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800de7e:	e20a      	b.n	800e296 <UART_SetConfig+0x5a6>
 800de80:	697b      	ldr	r3, [r7, #20]
 800de82:	681b      	ldr	r3, [r3, #0]
 800de84:	4a69      	ldr	r2, [pc, #420]	; (800e02c <UART_SetConfig+0x33c>)
 800de86:	4293      	cmp	r3, r2
 800de88:	d130      	bne.n	800deec <UART_SetConfig+0x1fc>
 800de8a:	4b67      	ldr	r3, [pc, #412]	; (800e028 <UART_SetConfig+0x338>)
 800de8c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800de8e:	f003 0307 	and.w	r3, r3, #7
 800de92:	2b05      	cmp	r3, #5
 800de94:	d826      	bhi.n	800dee4 <UART_SetConfig+0x1f4>
 800de96:	a201      	add	r2, pc, #4	; (adr r2, 800de9c <UART_SetConfig+0x1ac>)
 800de98:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800de9c:	0800deb5 	.word	0x0800deb5
 800dea0:	0800debd 	.word	0x0800debd
 800dea4:	0800dec5 	.word	0x0800dec5
 800dea8:	0800decd 	.word	0x0800decd
 800deac:	0800ded5 	.word	0x0800ded5
 800deb0:	0800dedd 	.word	0x0800dedd
 800deb4:	2300      	movs	r3, #0
 800deb6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800deba:	e1ec      	b.n	800e296 <UART_SetConfig+0x5a6>
 800debc:	2304      	movs	r3, #4
 800debe:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800dec2:	e1e8      	b.n	800e296 <UART_SetConfig+0x5a6>
 800dec4:	2308      	movs	r3, #8
 800dec6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800deca:	e1e4      	b.n	800e296 <UART_SetConfig+0x5a6>
 800decc:	2310      	movs	r3, #16
 800dece:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800ded2:	e1e0      	b.n	800e296 <UART_SetConfig+0x5a6>
 800ded4:	2320      	movs	r3, #32
 800ded6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800deda:	e1dc      	b.n	800e296 <UART_SetConfig+0x5a6>
 800dedc:	2340      	movs	r3, #64	; 0x40
 800dede:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800dee2:	e1d8      	b.n	800e296 <UART_SetConfig+0x5a6>
 800dee4:	2380      	movs	r3, #128	; 0x80
 800dee6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800deea:	e1d4      	b.n	800e296 <UART_SetConfig+0x5a6>
 800deec:	697b      	ldr	r3, [r7, #20]
 800deee:	681b      	ldr	r3, [r3, #0]
 800def0:	4a4f      	ldr	r2, [pc, #316]	; (800e030 <UART_SetConfig+0x340>)
 800def2:	4293      	cmp	r3, r2
 800def4:	d130      	bne.n	800df58 <UART_SetConfig+0x268>
 800def6:	4b4c      	ldr	r3, [pc, #304]	; (800e028 <UART_SetConfig+0x338>)
 800def8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800defa:	f003 0307 	and.w	r3, r3, #7
 800defe:	2b05      	cmp	r3, #5
 800df00:	d826      	bhi.n	800df50 <UART_SetConfig+0x260>
 800df02:	a201      	add	r2, pc, #4	; (adr r2, 800df08 <UART_SetConfig+0x218>)
 800df04:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800df08:	0800df21 	.word	0x0800df21
 800df0c:	0800df29 	.word	0x0800df29
 800df10:	0800df31 	.word	0x0800df31
 800df14:	0800df39 	.word	0x0800df39
 800df18:	0800df41 	.word	0x0800df41
 800df1c:	0800df49 	.word	0x0800df49
 800df20:	2300      	movs	r3, #0
 800df22:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800df26:	e1b6      	b.n	800e296 <UART_SetConfig+0x5a6>
 800df28:	2304      	movs	r3, #4
 800df2a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800df2e:	e1b2      	b.n	800e296 <UART_SetConfig+0x5a6>
 800df30:	2308      	movs	r3, #8
 800df32:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800df36:	e1ae      	b.n	800e296 <UART_SetConfig+0x5a6>
 800df38:	2310      	movs	r3, #16
 800df3a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800df3e:	e1aa      	b.n	800e296 <UART_SetConfig+0x5a6>
 800df40:	2320      	movs	r3, #32
 800df42:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800df46:	e1a6      	b.n	800e296 <UART_SetConfig+0x5a6>
 800df48:	2340      	movs	r3, #64	; 0x40
 800df4a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800df4e:	e1a2      	b.n	800e296 <UART_SetConfig+0x5a6>
 800df50:	2380      	movs	r3, #128	; 0x80
 800df52:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800df56:	e19e      	b.n	800e296 <UART_SetConfig+0x5a6>
 800df58:	697b      	ldr	r3, [r7, #20]
 800df5a:	681b      	ldr	r3, [r3, #0]
 800df5c:	4a35      	ldr	r2, [pc, #212]	; (800e034 <UART_SetConfig+0x344>)
 800df5e:	4293      	cmp	r3, r2
 800df60:	d130      	bne.n	800dfc4 <UART_SetConfig+0x2d4>
 800df62:	4b31      	ldr	r3, [pc, #196]	; (800e028 <UART_SetConfig+0x338>)
 800df64:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800df66:	f003 0307 	and.w	r3, r3, #7
 800df6a:	2b05      	cmp	r3, #5
 800df6c:	d826      	bhi.n	800dfbc <UART_SetConfig+0x2cc>
 800df6e:	a201      	add	r2, pc, #4	; (adr r2, 800df74 <UART_SetConfig+0x284>)
 800df70:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800df74:	0800df8d 	.word	0x0800df8d
 800df78:	0800df95 	.word	0x0800df95
 800df7c:	0800df9d 	.word	0x0800df9d
 800df80:	0800dfa5 	.word	0x0800dfa5
 800df84:	0800dfad 	.word	0x0800dfad
 800df88:	0800dfb5 	.word	0x0800dfb5
 800df8c:	2300      	movs	r3, #0
 800df8e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800df92:	e180      	b.n	800e296 <UART_SetConfig+0x5a6>
 800df94:	2304      	movs	r3, #4
 800df96:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800df9a:	e17c      	b.n	800e296 <UART_SetConfig+0x5a6>
 800df9c:	2308      	movs	r3, #8
 800df9e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800dfa2:	e178      	b.n	800e296 <UART_SetConfig+0x5a6>
 800dfa4:	2310      	movs	r3, #16
 800dfa6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800dfaa:	e174      	b.n	800e296 <UART_SetConfig+0x5a6>
 800dfac:	2320      	movs	r3, #32
 800dfae:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800dfb2:	e170      	b.n	800e296 <UART_SetConfig+0x5a6>
 800dfb4:	2340      	movs	r3, #64	; 0x40
 800dfb6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800dfba:	e16c      	b.n	800e296 <UART_SetConfig+0x5a6>
 800dfbc:	2380      	movs	r3, #128	; 0x80
 800dfbe:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800dfc2:	e168      	b.n	800e296 <UART_SetConfig+0x5a6>
 800dfc4:	697b      	ldr	r3, [r7, #20]
 800dfc6:	681b      	ldr	r3, [r3, #0]
 800dfc8:	4a1b      	ldr	r2, [pc, #108]	; (800e038 <UART_SetConfig+0x348>)
 800dfca:	4293      	cmp	r3, r2
 800dfcc:	d142      	bne.n	800e054 <UART_SetConfig+0x364>
 800dfce:	4b16      	ldr	r3, [pc, #88]	; (800e028 <UART_SetConfig+0x338>)
 800dfd0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800dfd2:	f003 0307 	and.w	r3, r3, #7
 800dfd6:	2b05      	cmp	r3, #5
 800dfd8:	d838      	bhi.n	800e04c <UART_SetConfig+0x35c>
 800dfda:	a201      	add	r2, pc, #4	; (adr r2, 800dfe0 <UART_SetConfig+0x2f0>)
 800dfdc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800dfe0:	0800dff9 	.word	0x0800dff9
 800dfe4:	0800e001 	.word	0x0800e001
 800dfe8:	0800e009 	.word	0x0800e009
 800dfec:	0800e011 	.word	0x0800e011
 800dff0:	0800e03d 	.word	0x0800e03d
 800dff4:	0800e045 	.word	0x0800e045
 800dff8:	2300      	movs	r3, #0
 800dffa:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800dffe:	e14a      	b.n	800e296 <UART_SetConfig+0x5a6>
 800e000:	2304      	movs	r3, #4
 800e002:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800e006:	e146      	b.n	800e296 <UART_SetConfig+0x5a6>
 800e008:	2308      	movs	r3, #8
 800e00a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800e00e:	e142      	b.n	800e296 <UART_SetConfig+0x5a6>
 800e010:	2310      	movs	r3, #16
 800e012:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800e016:	e13e      	b.n	800e296 <UART_SetConfig+0x5a6>
 800e018:	cfff69f3 	.word	0xcfff69f3
 800e01c:	58000c00 	.word	0x58000c00
 800e020:	11fff4ff 	.word	0x11fff4ff
 800e024:	40011000 	.word	0x40011000
 800e028:	58024400 	.word	0x58024400
 800e02c:	40004400 	.word	0x40004400
 800e030:	40004800 	.word	0x40004800
 800e034:	40004c00 	.word	0x40004c00
 800e038:	40005000 	.word	0x40005000
 800e03c:	2320      	movs	r3, #32
 800e03e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800e042:	e128      	b.n	800e296 <UART_SetConfig+0x5a6>
 800e044:	2340      	movs	r3, #64	; 0x40
 800e046:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800e04a:	e124      	b.n	800e296 <UART_SetConfig+0x5a6>
 800e04c:	2380      	movs	r3, #128	; 0x80
 800e04e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800e052:	e120      	b.n	800e296 <UART_SetConfig+0x5a6>
 800e054:	697b      	ldr	r3, [r7, #20]
 800e056:	681b      	ldr	r3, [r3, #0]
 800e058:	4acb      	ldr	r2, [pc, #812]	; (800e388 <UART_SetConfig+0x698>)
 800e05a:	4293      	cmp	r3, r2
 800e05c:	d176      	bne.n	800e14c <UART_SetConfig+0x45c>
 800e05e:	4bcb      	ldr	r3, [pc, #812]	; (800e38c <UART_SetConfig+0x69c>)
 800e060:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800e062:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800e066:	2b28      	cmp	r3, #40	; 0x28
 800e068:	d86c      	bhi.n	800e144 <UART_SetConfig+0x454>
 800e06a:	a201      	add	r2, pc, #4	; (adr r2, 800e070 <UART_SetConfig+0x380>)
 800e06c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800e070:	0800e115 	.word	0x0800e115
 800e074:	0800e145 	.word	0x0800e145
 800e078:	0800e145 	.word	0x0800e145
 800e07c:	0800e145 	.word	0x0800e145
 800e080:	0800e145 	.word	0x0800e145
 800e084:	0800e145 	.word	0x0800e145
 800e088:	0800e145 	.word	0x0800e145
 800e08c:	0800e145 	.word	0x0800e145
 800e090:	0800e11d 	.word	0x0800e11d
 800e094:	0800e145 	.word	0x0800e145
 800e098:	0800e145 	.word	0x0800e145
 800e09c:	0800e145 	.word	0x0800e145
 800e0a0:	0800e145 	.word	0x0800e145
 800e0a4:	0800e145 	.word	0x0800e145
 800e0a8:	0800e145 	.word	0x0800e145
 800e0ac:	0800e145 	.word	0x0800e145
 800e0b0:	0800e125 	.word	0x0800e125
 800e0b4:	0800e145 	.word	0x0800e145
 800e0b8:	0800e145 	.word	0x0800e145
 800e0bc:	0800e145 	.word	0x0800e145
 800e0c0:	0800e145 	.word	0x0800e145
 800e0c4:	0800e145 	.word	0x0800e145
 800e0c8:	0800e145 	.word	0x0800e145
 800e0cc:	0800e145 	.word	0x0800e145
 800e0d0:	0800e12d 	.word	0x0800e12d
 800e0d4:	0800e145 	.word	0x0800e145
 800e0d8:	0800e145 	.word	0x0800e145
 800e0dc:	0800e145 	.word	0x0800e145
 800e0e0:	0800e145 	.word	0x0800e145
 800e0e4:	0800e145 	.word	0x0800e145
 800e0e8:	0800e145 	.word	0x0800e145
 800e0ec:	0800e145 	.word	0x0800e145
 800e0f0:	0800e135 	.word	0x0800e135
 800e0f4:	0800e145 	.word	0x0800e145
 800e0f8:	0800e145 	.word	0x0800e145
 800e0fc:	0800e145 	.word	0x0800e145
 800e100:	0800e145 	.word	0x0800e145
 800e104:	0800e145 	.word	0x0800e145
 800e108:	0800e145 	.word	0x0800e145
 800e10c:	0800e145 	.word	0x0800e145
 800e110:	0800e13d 	.word	0x0800e13d
 800e114:	2301      	movs	r3, #1
 800e116:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800e11a:	e0bc      	b.n	800e296 <UART_SetConfig+0x5a6>
 800e11c:	2304      	movs	r3, #4
 800e11e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800e122:	e0b8      	b.n	800e296 <UART_SetConfig+0x5a6>
 800e124:	2308      	movs	r3, #8
 800e126:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800e12a:	e0b4      	b.n	800e296 <UART_SetConfig+0x5a6>
 800e12c:	2310      	movs	r3, #16
 800e12e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800e132:	e0b0      	b.n	800e296 <UART_SetConfig+0x5a6>
 800e134:	2320      	movs	r3, #32
 800e136:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800e13a:	e0ac      	b.n	800e296 <UART_SetConfig+0x5a6>
 800e13c:	2340      	movs	r3, #64	; 0x40
 800e13e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800e142:	e0a8      	b.n	800e296 <UART_SetConfig+0x5a6>
 800e144:	2380      	movs	r3, #128	; 0x80
 800e146:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800e14a:	e0a4      	b.n	800e296 <UART_SetConfig+0x5a6>
 800e14c:	697b      	ldr	r3, [r7, #20]
 800e14e:	681b      	ldr	r3, [r3, #0]
 800e150:	4a8f      	ldr	r2, [pc, #572]	; (800e390 <UART_SetConfig+0x6a0>)
 800e152:	4293      	cmp	r3, r2
 800e154:	d130      	bne.n	800e1b8 <UART_SetConfig+0x4c8>
 800e156:	4b8d      	ldr	r3, [pc, #564]	; (800e38c <UART_SetConfig+0x69c>)
 800e158:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800e15a:	f003 0307 	and.w	r3, r3, #7
 800e15e:	2b05      	cmp	r3, #5
 800e160:	d826      	bhi.n	800e1b0 <UART_SetConfig+0x4c0>
 800e162:	a201      	add	r2, pc, #4	; (adr r2, 800e168 <UART_SetConfig+0x478>)
 800e164:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800e168:	0800e181 	.word	0x0800e181
 800e16c:	0800e189 	.word	0x0800e189
 800e170:	0800e191 	.word	0x0800e191
 800e174:	0800e199 	.word	0x0800e199
 800e178:	0800e1a1 	.word	0x0800e1a1
 800e17c:	0800e1a9 	.word	0x0800e1a9
 800e180:	2300      	movs	r3, #0
 800e182:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800e186:	e086      	b.n	800e296 <UART_SetConfig+0x5a6>
 800e188:	2304      	movs	r3, #4
 800e18a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800e18e:	e082      	b.n	800e296 <UART_SetConfig+0x5a6>
 800e190:	2308      	movs	r3, #8
 800e192:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800e196:	e07e      	b.n	800e296 <UART_SetConfig+0x5a6>
 800e198:	2310      	movs	r3, #16
 800e19a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800e19e:	e07a      	b.n	800e296 <UART_SetConfig+0x5a6>
 800e1a0:	2320      	movs	r3, #32
 800e1a2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800e1a6:	e076      	b.n	800e296 <UART_SetConfig+0x5a6>
 800e1a8:	2340      	movs	r3, #64	; 0x40
 800e1aa:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800e1ae:	e072      	b.n	800e296 <UART_SetConfig+0x5a6>
 800e1b0:	2380      	movs	r3, #128	; 0x80
 800e1b2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800e1b6:	e06e      	b.n	800e296 <UART_SetConfig+0x5a6>
 800e1b8:	697b      	ldr	r3, [r7, #20]
 800e1ba:	681b      	ldr	r3, [r3, #0]
 800e1bc:	4a75      	ldr	r2, [pc, #468]	; (800e394 <UART_SetConfig+0x6a4>)
 800e1be:	4293      	cmp	r3, r2
 800e1c0:	d130      	bne.n	800e224 <UART_SetConfig+0x534>
 800e1c2:	4b72      	ldr	r3, [pc, #456]	; (800e38c <UART_SetConfig+0x69c>)
 800e1c4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800e1c6:	f003 0307 	and.w	r3, r3, #7
 800e1ca:	2b05      	cmp	r3, #5
 800e1cc:	d826      	bhi.n	800e21c <UART_SetConfig+0x52c>
 800e1ce:	a201      	add	r2, pc, #4	; (adr r2, 800e1d4 <UART_SetConfig+0x4e4>)
 800e1d0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800e1d4:	0800e1ed 	.word	0x0800e1ed
 800e1d8:	0800e1f5 	.word	0x0800e1f5
 800e1dc:	0800e1fd 	.word	0x0800e1fd
 800e1e0:	0800e205 	.word	0x0800e205
 800e1e4:	0800e20d 	.word	0x0800e20d
 800e1e8:	0800e215 	.word	0x0800e215
 800e1ec:	2300      	movs	r3, #0
 800e1ee:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800e1f2:	e050      	b.n	800e296 <UART_SetConfig+0x5a6>
 800e1f4:	2304      	movs	r3, #4
 800e1f6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800e1fa:	e04c      	b.n	800e296 <UART_SetConfig+0x5a6>
 800e1fc:	2308      	movs	r3, #8
 800e1fe:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800e202:	e048      	b.n	800e296 <UART_SetConfig+0x5a6>
 800e204:	2310      	movs	r3, #16
 800e206:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800e20a:	e044      	b.n	800e296 <UART_SetConfig+0x5a6>
 800e20c:	2320      	movs	r3, #32
 800e20e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800e212:	e040      	b.n	800e296 <UART_SetConfig+0x5a6>
 800e214:	2340      	movs	r3, #64	; 0x40
 800e216:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800e21a:	e03c      	b.n	800e296 <UART_SetConfig+0x5a6>
 800e21c:	2380      	movs	r3, #128	; 0x80
 800e21e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800e222:	e038      	b.n	800e296 <UART_SetConfig+0x5a6>
 800e224:	697b      	ldr	r3, [r7, #20]
 800e226:	681b      	ldr	r3, [r3, #0]
 800e228:	4a5b      	ldr	r2, [pc, #364]	; (800e398 <UART_SetConfig+0x6a8>)
 800e22a:	4293      	cmp	r3, r2
 800e22c:	d130      	bne.n	800e290 <UART_SetConfig+0x5a0>
 800e22e:	4b57      	ldr	r3, [pc, #348]	; (800e38c <UART_SetConfig+0x69c>)
 800e230:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800e232:	f003 0307 	and.w	r3, r3, #7
 800e236:	2b05      	cmp	r3, #5
 800e238:	d826      	bhi.n	800e288 <UART_SetConfig+0x598>
 800e23a:	a201      	add	r2, pc, #4	; (adr r2, 800e240 <UART_SetConfig+0x550>)
 800e23c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800e240:	0800e259 	.word	0x0800e259
 800e244:	0800e261 	.word	0x0800e261
 800e248:	0800e269 	.word	0x0800e269
 800e24c:	0800e271 	.word	0x0800e271
 800e250:	0800e279 	.word	0x0800e279
 800e254:	0800e281 	.word	0x0800e281
 800e258:	2302      	movs	r3, #2
 800e25a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800e25e:	e01a      	b.n	800e296 <UART_SetConfig+0x5a6>
 800e260:	2304      	movs	r3, #4
 800e262:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800e266:	e016      	b.n	800e296 <UART_SetConfig+0x5a6>
 800e268:	2308      	movs	r3, #8
 800e26a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800e26e:	e012      	b.n	800e296 <UART_SetConfig+0x5a6>
 800e270:	2310      	movs	r3, #16
 800e272:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800e276:	e00e      	b.n	800e296 <UART_SetConfig+0x5a6>
 800e278:	2320      	movs	r3, #32
 800e27a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800e27e:	e00a      	b.n	800e296 <UART_SetConfig+0x5a6>
 800e280:	2340      	movs	r3, #64	; 0x40
 800e282:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800e286:	e006      	b.n	800e296 <UART_SetConfig+0x5a6>
 800e288:	2380      	movs	r3, #128	; 0x80
 800e28a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800e28e:	e002      	b.n	800e296 <UART_SetConfig+0x5a6>
 800e290:	2380      	movs	r3, #128	; 0x80
 800e292:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 800e296:	697b      	ldr	r3, [r7, #20]
 800e298:	681b      	ldr	r3, [r3, #0]
 800e29a:	4a3f      	ldr	r2, [pc, #252]	; (800e398 <UART_SetConfig+0x6a8>)
 800e29c:	4293      	cmp	r3, r2
 800e29e:	f040 80f8 	bne.w	800e492 <UART_SetConfig+0x7a2>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 800e2a2:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 800e2a6:	2b20      	cmp	r3, #32
 800e2a8:	dc46      	bgt.n	800e338 <UART_SetConfig+0x648>
 800e2aa:	2b02      	cmp	r3, #2
 800e2ac:	f2c0 8082 	blt.w	800e3b4 <UART_SetConfig+0x6c4>
 800e2b0:	3b02      	subs	r3, #2
 800e2b2:	2b1e      	cmp	r3, #30
 800e2b4:	d87e      	bhi.n	800e3b4 <UART_SetConfig+0x6c4>
 800e2b6:	a201      	add	r2, pc, #4	; (adr r2, 800e2bc <UART_SetConfig+0x5cc>)
 800e2b8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800e2bc:	0800e33f 	.word	0x0800e33f
 800e2c0:	0800e3b5 	.word	0x0800e3b5
 800e2c4:	0800e347 	.word	0x0800e347
 800e2c8:	0800e3b5 	.word	0x0800e3b5
 800e2cc:	0800e3b5 	.word	0x0800e3b5
 800e2d0:	0800e3b5 	.word	0x0800e3b5
 800e2d4:	0800e357 	.word	0x0800e357
 800e2d8:	0800e3b5 	.word	0x0800e3b5
 800e2dc:	0800e3b5 	.word	0x0800e3b5
 800e2e0:	0800e3b5 	.word	0x0800e3b5
 800e2e4:	0800e3b5 	.word	0x0800e3b5
 800e2e8:	0800e3b5 	.word	0x0800e3b5
 800e2ec:	0800e3b5 	.word	0x0800e3b5
 800e2f0:	0800e3b5 	.word	0x0800e3b5
 800e2f4:	0800e367 	.word	0x0800e367
 800e2f8:	0800e3b5 	.word	0x0800e3b5
 800e2fc:	0800e3b5 	.word	0x0800e3b5
 800e300:	0800e3b5 	.word	0x0800e3b5
 800e304:	0800e3b5 	.word	0x0800e3b5
 800e308:	0800e3b5 	.word	0x0800e3b5
 800e30c:	0800e3b5 	.word	0x0800e3b5
 800e310:	0800e3b5 	.word	0x0800e3b5
 800e314:	0800e3b5 	.word	0x0800e3b5
 800e318:	0800e3b5 	.word	0x0800e3b5
 800e31c:	0800e3b5 	.word	0x0800e3b5
 800e320:	0800e3b5 	.word	0x0800e3b5
 800e324:	0800e3b5 	.word	0x0800e3b5
 800e328:	0800e3b5 	.word	0x0800e3b5
 800e32c:	0800e3b5 	.word	0x0800e3b5
 800e330:	0800e3b5 	.word	0x0800e3b5
 800e334:	0800e3a7 	.word	0x0800e3a7
 800e338:	2b40      	cmp	r3, #64	; 0x40
 800e33a:	d037      	beq.n	800e3ac <UART_SetConfig+0x6bc>
 800e33c:	e03a      	b.n	800e3b4 <UART_SetConfig+0x6c4>
    {
      case UART_CLOCKSOURCE_D3PCLK1:
        pclk = HAL_RCCEx_GetD3PCLK1Freq();
 800e33e:	f7fe fb19 	bl	800c974 <HAL_RCCEx_GetD3PCLK1Freq>
 800e342:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 800e344:	e03c      	b.n	800e3c0 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800e346:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800e34a:	4618      	mov	r0, r3
 800e34c:	f7fe fb28 	bl	800c9a0 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 800e350:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e352:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800e354:	e034      	b.n	800e3c0 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800e356:	f107 0318 	add.w	r3, r7, #24
 800e35a:	4618      	mov	r0, r3
 800e35c:	f7fe fc74 	bl	800cc48 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 800e360:	69fb      	ldr	r3, [r7, #28]
 800e362:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800e364:	e02c      	b.n	800e3c0 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800e366:	4b09      	ldr	r3, [pc, #36]	; (800e38c <UART_SetConfig+0x69c>)
 800e368:	681b      	ldr	r3, [r3, #0]
 800e36a:	f003 0320 	and.w	r3, r3, #32
 800e36e:	2b00      	cmp	r3, #0
 800e370:	d016      	beq.n	800e3a0 <UART_SetConfig+0x6b0>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 800e372:	4b06      	ldr	r3, [pc, #24]	; (800e38c <UART_SetConfig+0x69c>)
 800e374:	681b      	ldr	r3, [r3, #0]
 800e376:	08db      	lsrs	r3, r3, #3
 800e378:	f003 0303 	and.w	r3, r3, #3
 800e37c:	4a07      	ldr	r2, [pc, #28]	; (800e39c <UART_SetConfig+0x6ac>)
 800e37e:	fa22 f303 	lsr.w	r3, r2, r3
 800e382:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 800e384:	e01c      	b.n	800e3c0 <UART_SetConfig+0x6d0>
 800e386:	bf00      	nop
 800e388:	40011400 	.word	0x40011400
 800e38c:	58024400 	.word	0x58024400
 800e390:	40007800 	.word	0x40007800
 800e394:	40007c00 	.word	0x40007c00
 800e398:	58000c00 	.word	0x58000c00
 800e39c:	03d09000 	.word	0x03d09000
          pclk = (uint32_t) HSI_VALUE;
 800e3a0:	4b9d      	ldr	r3, [pc, #628]	; (800e618 <UART_SetConfig+0x928>)
 800e3a2:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800e3a4:	e00c      	b.n	800e3c0 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 800e3a6:	4b9d      	ldr	r3, [pc, #628]	; (800e61c <UART_SetConfig+0x92c>)
 800e3a8:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800e3aa:	e009      	b.n	800e3c0 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800e3ac:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800e3b0:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800e3b2:	e005      	b.n	800e3c0 <UART_SetConfig+0x6d0>
      default:
        pclk = 0U;
 800e3b4:	2300      	movs	r3, #0
 800e3b6:	63fb      	str	r3, [r7, #60]	; 0x3c
        ret = HAL_ERROR;
 800e3b8:	2301      	movs	r3, #1
 800e3ba:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
        break;
 800e3be:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 800e3c0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800e3c2:	2b00      	cmp	r3, #0
 800e3c4:	f000 81de 	beq.w	800e784 <UART_SetConfig+0xa94>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 800e3c8:	697b      	ldr	r3, [r7, #20]
 800e3ca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e3cc:	4a94      	ldr	r2, [pc, #592]	; (800e620 <UART_SetConfig+0x930>)
 800e3ce:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800e3d2:	461a      	mov	r2, r3
 800e3d4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800e3d6:	fbb3 f3f2 	udiv	r3, r3, r2
 800e3da:	633b      	str	r3, [r7, #48]	; 0x30

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800e3dc:	697b      	ldr	r3, [r7, #20]
 800e3de:	685a      	ldr	r2, [r3, #4]
 800e3e0:	4613      	mov	r3, r2
 800e3e2:	005b      	lsls	r3, r3, #1
 800e3e4:	4413      	add	r3, r2
 800e3e6:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800e3e8:	429a      	cmp	r2, r3
 800e3ea:	d305      	bcc.n	800e3f8 <UART_SetConfig+0x708>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 800e3ec:	697b      	ldr	r3, [r7, #20]
 800e3ee:	685b      	ldr	r3, [r3, #4]
 800e3f0:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800e3f2:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800e3f4:	429a      	cmp	r2, r3
 800e3f6:	d903      	bls.n	800e400 <UART_SetConfig+0x710>
      {
        ret = HAL_ERROR;
 800e3f8:	2301      	movs	r3, #1
 800e3fa:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
 800e3fe:	e1c1      	b.n	800e784 <UART_SetConfig+0xa94>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800e400:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800e402:	2200      	movs	r2, #0
 800e404:	60bb      	str	r3, [r7, #8]
 800e406:	60fa      	str	r2, [r7, #12]
 800e408:	697b      	ldr	r3, [r7, #20]
 800e40a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e40c:	4a84      	ldr	r2, [pc, #528]	; (800e620 <UART_SetConfig+0x930>)
 800e40e:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800e412:	b29b      	uxth	r3, r3
 800e414:	2200      	movs	r2, #0
 800e416:	603b      	str	r3, [r7, #0]
 800e418:	607a      	str	r2, [r7, #4]
 800e41a:	e9d7 2300 	ldrd	r2, r3, [r7]
 800e41e:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 800e422:	f7f3 fd35 	bl	8001e90 <__aeabi_uldivmod>
 800e426:	4602      	mov	r2, r0
 800e428:	460b      	mov	r3, r1
 800e42a:	4610      	mov	r0, r2
 800e42c:	4619      	mov	r1, r3
 800e42e:	f04f 0200 	mov.w	r2, #0
 800e432:	f04f 0300 	mov.w	r3, #0
 800e436:	020b      	lsls	r3, r1, #8
 800e438:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 800e43c:	0202      	lsls	r2, r0, #8
 800e43e:	6979      	ldr	r1, [r7, #20]
 800e440:	6849      	ldr	r1, [r1, #4]
 800e442:	0849      	lsrs	r1, r1, #1
 800e444:	2000      	movs	r0, #0
 800e446:	460c      	mov	r4, r1
 800e448:	4605      	mov	r5, r0
 800e44a:	eb12 0804 	adds.w	r8, r2, r4
 800e44e:	eb43 0905 	adc.w	r9, r3, r5
 800e452:	697b      	ldr	r3, [r7, #20]
 800e454:	685b      	ldr	r3, [r3, #4]
 800e456:	2200      	movs	r2, #0
 800e458:	469a      	mov	sl, r3
 800e45a:	4693      	mov	fp, r2
 800e45c:	4652      	mov	r2, sl
 800e45e:	465b      	mov	r3, fp
 800e460:	4640      	mov	r0, r8
 800e462:	4649      	mov	r1, r9
 800e464:	f7f3 fd14 	bl	8001e90 <__aeabi_uldivmod>
 800e468:	4602      	mov	r2, r0
 800e46a:	460b      	mov	r3, r1
 800e46c:	4613      	mov	r3, r2
 800e46e:	63bb      	str	r3, [r7, #56]	; 0x38
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 800e470:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e472:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800e476:	d308      	bcc.n	800e48a <UART_SetConfig+0x79a>
 800e478:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e47a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800e47e:	d204      	bcs.n	800e48a <UART_SetConfig+0x79a>
        {
          huart->Instance->BRR = usartdiv;
 800e480:	697b      	ldr	r3, [r7, #20]
 800e482:	681b      	ldr	r3, [r3, #0]
 800e484:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800e486:	60da      	str	r2, [r3, #12]
 800e488:	e17c      	b.n	800e784 <UART_SetConfig+0xa94>
        }
        else
        {
          ret = HAL_ERROR;
 800e48a:	2301      	movs	r3, #1
 800e48c:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
 800e490:	e178      	b.n	800e784 <UART_SetConfig+0xa94>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800e492:	697b      	ldr	r3, [r7, #20]
 800e494:	69db      	ldr	r3, [r3, #28]
 800e496:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800e49a:	f040 80c5 	bne.w	800e628 <UART_SetConfig+0x938>
  {
    switch (clocksource)
 800e49e:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 800e4a2:	2b20      	cmp	r3, #32
 800e4a4:	dc48      	bgt.n	800e538 <UART_SetConfig+0x848>
 800e4a6:	2b00      	cmp	r3, #0
 800e4a8:	db7b      	blt.n	800e5a2 <UART_SetConfig+0x8b2>
 800e4aa:	2b20      	cmp	r3, #32
 800e4ac:	d879      	bhi.n	800e5a2 <UART_SetConfig+0x8b2>
 800e4ae:	a201      	add	r2, pc, #4	; (adr r2, 800e4b4 <UART_SetConfig+0x7c4>)
 800e4b0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800e4b4:	0800e53f 	.word	0x0800e53f
 800e4b8:	0800e547 	.word	0x0800e547
 800e4bc:	0800e5a3 	.word	0x0800e5a3
 800e4c0:	0800e5a3 	.word	0x0800e5a3
 800e4c4:	0800e54f 	.word	0x0800e54f
 800e4c8:	0800e5a3 	.word	0x0800e5a3
 800e4cc:	0800e5a3 	.word	0x0800e5a3
 800e4d0:	0800e5a3 	.word	0x0800e5a3
 800e4d4:	0800e55f 	.word	0x0800e55f
 800e4d8:	0800e5a3 	.word	0x0800e5a3
 800e4dc:	0800e5a3 	.word	0x0800e5a3
 800e4e0:	0800e5a3 	.word	0x0800e5a3
 800e4e4:	0800e5a3 	.word	0x0800e5a3
 800e4e8:	0800e5a3 	.word	0x0800e5a3
 800e4ec:	0800e5a3 	.word	0x0800e5a3
 800e4f0:	0800e5a3 	.word	0x0800e5a3
 800e4f4:	0800e56f 	.word	0x0800e56f
 800e4f8:	0800e5a3 	.word	0x0800e5a3
 800e4fc:	0800e5a3 	.word	0x0800e5a3
 800e500:	0800e5a3 	.word	0x0800e5a3
 800e504:	0800e5a3 	.word	0x0800e5a3
 800e508:	0800e5a3 	.word	0x0800e5a3
 800e50c:	0800e5a3 	.word	0x0800e5a3
 800e510:	0800e5a3 	.word	0x0800e5a3
 800e514:	0800e5a3 	.word	0x0800e5a3
 800e518:	0800e5a3 	.word	0x0800e5a3
 800e51c:	0800e5a3 	.word	0x0800e5a3
 800e520:	0800e5a3 	.word	0x0800e5a3
 800e524:	0800e5a3 	.word	0x0800e5a3
 800e528:	0800e5a3 	.word	0x0800e5a3
 800e52c:	0800e5a3 	.word	0x0800e5a3
 800e530:	0800e5a3 	.word	0x0800e5a3
 800e534:	0800e595 	.word	0x0800e595
 800e538:	2b40      	cmp	r3, #64	; 0x40
 800e53a:	d02e      	beq.n	800e59a <UART_SetConfig+0x8aa>
 800e53c:	e031      	b.n	800e5a2 <UART_SetConfig+0x8b2>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800e53e:	f7fc fa47 	bl	800a9d0 <HAL_RCC_GetPCLK1Freq>
 800e542:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 800e544:	e033      	b.n	800e5ae <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800e546:	f7fc fa59 	bl	800a9fc <HAL_RCC_GetPCLK2Freq>
 800e54a:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 800e54c:	e02f      	b.n	800e5ae <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800e54e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800e552:	4618      	mov	r0, r3
 800e554:	f7fe fa24 	bl	800c9a0 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 800e558:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e55a:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800e55c:	e027      	b.n	800e5ae <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800e55e:	f107 0318 	add.w	r3, r7, #24
 800e562:	4618      	mov	r0, r3
 800e564:	f7fe fb70 	bl	800cc48 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 800e568:	69fb      	ldr	r3, [r7, #28]
 800e56a:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800e56c:	e01f      	b.n	800e5ae <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800e56e:	4b2d      	ldr	r3, [pc, #180]	; (800e624 <UART_SetConfig+0x934>)
 800e570:	681b      	ldr	r3, [r3, #0]
 800e572:	f003 0320 	and.w	r3, r3, #32
 800e576:	2b00      	cmp	r3, #0
 800e578:	d009      	beq.n	800e58e <UART_SetConfig+0x89e>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 800e57a:	4b2a      	ldr	r3, [pc, #168]	; (800e624 <UART_SetConfig+0x934>)
 800e57c:	681b      	ldr	r3, [r3, #0]
 800e57e:	08db      	lsrs	r3, r3, #3
 800e580:	f003 0303 	and.w	r3, r3, #3
 800e584:	4a24      	ldr	r2, [pc, #144]	; (800e618 <UART_SetConfig+0x928>)
 800e586:	fa22 f303 	lsr.w	r3, r2, r3
 800e58a:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 800e58c:	e00f      	b.n	800e5ae <UART_SetConfig+0x8be>
          pclk = (uint32_t) HSI_VALUE;
 800e58e:	4b22      	ldr	r3, [pc, #136]	; (800e618 <UART_SetConfig+0x928>)
 800e590:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800e592:	e00c      	b.n	800e5ae <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 800e594:	4b21      	ldr	r3, [pc, #132]	; (800e61c <UART_SetConfig+0x92c>)
 800e596:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800e598:	e009      	b.n	800e5ae <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800e59a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800e59e:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800e5a0:	e005      	b.n	800e5ae <UART_SetConfig+0x8be>
      default:
        pclk = 0U;
 800e5a2:	2300      	movs	r3, #0
 800e5a4:	63fb      	str	r3, [r7, #60]	; 0x3c
        ret = HAL_ERROR;
 800e5a6:	2301      	movs	r3, #1
 800e5a8:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
        break;
 800e5ac:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800e5ae:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800e5b0:	2b00      	cmp	r3, #0
 800e5b2:	f000 80e7 	beq.w	800e784 <UART_SetConfig+0xa94>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800e5b6:	697b      	ldr	r3, [r7, #20]
 800e5b8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e5ba:	4a19      	ldr	r2, [pc, #100]	; (800e620 <UART_SetConfig+0x930>)
 800e5bc:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800e5c0:	461a      	mov	r2, r3
 800e5c2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800e5c4:	fbb3 f3f2 	udiv	r3, r3, r2
 800e5c8:	005a      	lsls	r2, r3, #1
 800e5ca:	697b      	ldr	r3, [r7, #20]
 800e5cc:	685b      	ldr	r3, [r3, #4]
 800e5ce:	085b      	lsrs	r3, r3, #1
 800e5d0:	441a      	add	r2, r3
 800e5d2:	697b      	ldr	r3, [r7, #20]
 800e5d4:	685b      	ldr	r3, [r3, #4]
 800e5d6:	fbb2 f3f3 	udiv	r3, r2, r3
 800e5da:	63bb      	str	r3, [r7, #56]	; 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800e5dc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e5de:	2b0f      	cmp	r3, #15
 800e5e0:	d916      	bls.n	800e610 <UART_SetConfig+0x920>
 800e5e2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e5e4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800e5e8:	d212      	bcs.n	800e610 <UART_SetConfig+0x920>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800e5ea:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e5ec:	b29b      	uxth	r3, r3
 800e5ee:	f023 030f 	bic.w	r3, r3, #15
 800e5f2:	86fb      	strh	r3, [r7, #54]	; 0x36
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800e5f4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e5f6:	085b      	lsrs	r3, r3, #1
 800e5f8:	b29b      	uxth	r3, r3
 800e5fa:	f003 0307 	and.w	r3, r3, #7
 800e5fe:	b29a      	uxth	r2, r3
 800e600:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 800e602:	4313      	orrs	r3, r2
 800e604:	86fb      	strh	r3, [r7, #54]	; 0x36
        huart->Instance->BRR = brrtemp;
 800e606:	697b      	ldr	r3, [r7, #20]
 800e608:	681b      	ldr	r3, [r3, #0]
 800e60a:	8efa      	ldrh	r2, [r7, #54]	; 0x36
 800e60c:	60da      	str	r2, [r3, #12]
 800e60e:	e0b9      	b.n	800e784 <UART_SetConfig+0xa94>
      }
      else
      {
        ret = HAL_ERROR;
 800e610:	2301      	movs	r3, #1
 800e612:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
 800e616:	e0b5      	b.n	800e784 <UART_SetConfig+0xa94>
 800e618:	03d09000 	.word	0x03d09000
 800e61c:	003d0900 	.word	0x003d0900
 800e620:	0801ef38 	.word	0x0801ef38
 800e624:	58024400 	.word	0x58024400
      }
    }
  }
  else
  {
    switch (clocksource)
 800e628:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 800e62c:	2b20      	cmp	r3, #32
 800e62e:	dc49      	bgt.n	800e6c4 <UART_SetConfig+0x9d4>
 800e630:	2b00      	cmp	r3, #0
 800e632:	db7c      	blt.n	800e72e <UART_SetConfig+0xa3e>
 800e634:	2b20      	cmp	r3, #32
 800e636:	d87a      	bhi.n	800e72e <UART_SetConfig+0xa3e>
 800e638:	a201      	add	r2, pc, #4	; (adr r2, 800e640 <UART_SetConfig+0x950>)
 800e63a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800e63e:	bf00      	nop
 800e640:	0800e6cb 	.word	0x0800e6cb
 800e644:	0800e6d3 	.word	0x0800e6d3
 800e648:	0800e72f 	.word	0x0800e72f
 800e64c:	0800e72f 	.word	0x0800e72f
 800e650:	0800e6db 	.word	0x0800e6db
 800e654:	0800e72f 	.word	0x0800e72f
 800e658:	0800e72f 	.word	0x0800e72f
 800e65c:	0800e72f 	.word	0x0800e72f
 800e660:	0800e6eb 	.word	0x0800e6eb
 800e664:	0800e72f 	.word	0x0800e72f
 800e668:	0800e72f 	.word	0x0800e72f
 800e66c:	0800e72f 	.word	0x0800e72f
 800e670:	0800e72f 	.word	0x0800e72f
 800e674:	0800e72f 	.word	0x0800e72f
 800e678:	0800e72f 	.word	0x0800e72f
 800e67c:	0800e72f 	.word	0x0800e72f
 800e680:	0800e6fb 	.word	0x0800e6fb
 800e684:	0800e72f 	.word	0x0800e72f
 800e688:	0800e72f 	.word	0x0800e72f
 800e68c:	0800e72f 	.word	0x0800e72f
 800e690:	0800e72f 	.word	0x0800e72f
 800e694:	0800e72f 	.word	0x0800e72f
 800e698:	0800e72f 	.word	0x0800e72f
 800e69c:	0800e72f 	.word	0x0800e72f
 800e6a0:	0800e72f 	.word	0x0800e72f
 800e6a4:	0800e72f 	.word	0x0800e72f
 800e6a8:	0800e72f 	.word	0x0800e72f
 800e6ac:	0800e72f 	.word	0x0800e72f
 800e6b0:	0800e72f 	.word	0x0800e72f
 800e6b4:	0800e72f 	.word	0x0800e72f
 800e6b8:	0800e72f 	.word	0x0800e72f
 800e6bc:	0800e72f 	.word	0x0800e72f
 800e6c0:	0800e721 	.word	0x0800e721
 800e6c4:	2b40      	cmp	r3, #64	; 0x40
 800e6c6:	d02e      	beq.n	800e726 <UART_SetConfig+0xa36>
 800e6c8:	e031      	b.n	800e72e <UART_SetConfig+0xa3e>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800e6ca:	f7fc f981 	bl	800a9d0 <HAL_RCC_GetPCLK1Freq>
 800e6ce:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 800e6d0:	e033      	b.n	800e73a <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800e6d2:	f7fc f993 	bl	800a9fc <HAL_RCC_GetPCLK2Freq>
 800e6d6:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 800e6d8:	e02f      	b.n	800e73a <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800e6da:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800e6de:	4618      	mov	r0, r3
 800e6e0:	f7fe f95e 	bl	800c9a0 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 800e6e4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e6e6:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800e6e8:	e027      	b.n	800e73a <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800e6ea:	f107 0318 	add.w	r3, r7, #24
 800e6ee:	4618      	mov	r0, r3
 800e6f0:	f7fe faaa 	bl	800cc48 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 800e6f4:	69fb      	ldr	r3, [r7, #28]
 800e6f6:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800e6f8:	e01f      	b.n	800e73a <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800e6fa:	4b2d      	ldr	r3, [pc, #180]	; (800e7b0 <UART_SetConfig+0xac0>)
 800e6fc:	681b      	ldr	r3, [r3, #0]
 800e6fe:	f003 0320 	and.w	r3, r3, #32
 800e702:	2b00      	cmp	r3, #0
 800e704:	d009      	beq.n	800e71a <UART_SetConfig+0xa2a>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 800e706:	4b2a      	ldr	r3, [pc, #168]	; (800e7b0 <UART_SetConfig+0xac0>)
 800e708:	681b      	ldr	r3, [r3, #0]
 800e70a:	08db      	lsrs	r3, r3, #3
 800e70c:	f003 0303 	and.w	r3, r3, #3
 800e710:	4a28      	ldr	r2, [pc, #160]	; (800e7b4 <UART_SetConfig+0xac4>)
 800e712:	fa22 f303 	lsr.w	r3, r2, r3
 800e716:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 800e718:	e00f      	b.n	800e73a <UART_SetConfig+0xa4a>
          pclk = (uint32_t) HSI_VALUE;
 800e71a:	4b26      	ldr	r3, [pc, #152]	; (800e7b4 <UART_SetConfig+0xac4>)
 800e71c:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800e71e:	e00c      	b.n	800e73a <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 800e720:	4b25      	ldr	r3, [pc, #148]	; (800e7b8 <UART_SetConfig+0xac8>)
 800e722:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800e724:	e009      	b.n	800e73a <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800e726:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800e72a:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800e72c:	e005      	b.n	800e73a <UART_SetConfig+0xa4a>
      default:
        pclk = 0U;
 800e72e:	2300      	movs	r3, #0
 800e730:	63fb      	str	r3, [r7, #60]	; 0x3c
        ret = HAL_ERROR;
 800e732:	2301      	movs	r3, #1
 800e734:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
        break;
 800e738:	bf00      	nop
    }

    if (pclk != 0U)
 800e73a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800e73c:	2b00      	cmp	r3, #0
 800e73e:	d021      	beq.n	800e784 <UART_SetConfig+0xa94>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800e740:	697b      	ldr	r3, [r7, #20]
 800e742:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e744:	4a1d      	ldr	r2, [pc, #116]	; (800e7bc <UART_SetConfig+0xacc>)
 800e746:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800e74a:	461a      	mov	r2, r3
 800e74c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800e74e:	fbb3 f2f2 	udiv	r2, r3, r2
 800e752:	697b      	ldr	r3, [r7, #20]
 800e754:	685b      	ldr	r3, [r3, #4]
 800e756:	085b      	lsrs	r3, r3, #1
 800e758:	441a      	add	r2, r3
 800e75a:	697b      	ldr	r3, [r7, #20]
 800e75c:	685b      	ldr	r3, [r3, #4]
 800e75e:	fbb2 f3f3 	udiv	r3, r2, r3
 800e762:	63bb      	str	r3, [r7, #56]	; 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800e764:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e766:	2b0f      	cmp	r3, #15
 800e768:	d909      	bls.n	800e77e <UART_SetConfig+0xa8e>
 800e76a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e76c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800e770:	d205      	bcs.n	800e77e <UART_SetConfig+0xa8e>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 800e772:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e774:	b29a      	uxth	r2, r3
 800e776:	697b      	ldr	r3, [r7, #20]
 800e778:	681b      	ldr	r3, [r3, #0]
 800e77a:	60da      	str	r2, [r3, #12]
 800e77c:	e002      	b.n	800e784 <UART_SetConfig+0xa94>
      }
      else
      {
        ret = HAL_ERROR;
 800e77e:	2301      	movs	r3, #1
 800e780:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 800e784:	697b      	ldr	r3, [r7, #20]
 800e786:	2201      	movs	r2, #1
 800e788:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
 800e78c:	697b      	ldr	r3, [r7, #20]
 800e78e:	2201      	movs	r2, #1
 800e790:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800e794:	697b      	ldr	r3, [r7, #20]
 800e796:	2200      	movs	r2, #0
 800e798:	675a      	str	r2, [r3, #116]	; 0x74
  huart->TxISR = NULL;
 800e79a:	697b      	ldr	r3, [r7, #20]
 800e79c:	2200      	movs	r2, #0
 800e79e:	679a      	str	r2, [r3, #120]	; 0x78

  return ret;
 800e7a0:	f897 3042 	ldrb.w	r3, [r7, #66]	; 0x42
}
 800e7a4:	4618      	mov	r0, r3
 800e7a6:	3748      	adds	r7, #72	; 0x48
 800e7a8:	46bd      	mov	sp, r7
 800e7aa:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800e7ae:	bf00      	nop
 800e7b0:	58024400 	.word	0x58024400
 800e7b4:	03d09000 	.word	0x03d09000
 800e7b8:	003d0900 	.word	0x003d0900
 800e7bc:	0801ef38 	.word	0x0801ef38

0800e7c0 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 800e7c0:	b480      	push	{r7}
 800e7c2:	b083      	sub	sp, #12
 800e7c4:	af00      	add	r7, sp, #0
 800e7c6:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800e7c8:	687b      	ldr	r3, [r7, #4]
 800e7ca:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800e7cc:	f003 0301 	and.w	r3, r3, #1
 800e7d0:	2b00      	cmp	r3, #0
 800e7d2:	d00a      	beq.n	800e7ea <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800e7d4:	687b      	ldr	r3, [r7, #4]
 800e7d6:	681b      	ldr	r3, [r3, #0]
 800e7d8:	685b      	ldr	r3, [r3, #4]
 800e7da:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 800e7de:	687b      	ldr	r3, [r7, #4]
 800e7e0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800e7e2:	687b      	ldr	r3, [r7, #4]
 800e7e4:	681b      	ldr	r3, [r3, #0]
 800e7e6:	430a      	orrs	r2, r1
 800e7e8:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800e7ea:	687b      	ldr	r3, [r7, #4]
 800e7ec:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800e7ee:	f003 0302 	and.w	r3, r3, #2
 800e7f2:	2b00      	cmp	r3, #0
 800e7f4:	d00a      	beq.n	800e80c <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800e7f6:	687b      	ldr	r3, [r7, #4]
 800e7f8:	681b      	ldr	r3, [r3, #0]
 800e7fa:	685b      	ldr	r3, [r3, #4]
 800e7fc:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 800e800:	687b      	ldr	r3, [r7, #4]
 800e802:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800e804:	687b      	ldr	r3, [r7, #4]
 800e806:	681b      	ldr	r3, [r3, #0]
 800e808:	430a      	orrs	r2, r1
 800e80a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800e80c:	687b      	ldr	r3, [r7, #4]
 800e80e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800e810:	f003 0304 	and.w	r3, r3, #4
 800e814:	2b00      	cmp	r3, #0
 800e816:	d00a      	beq.n	800e82e <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800e818:	687b      	ldr	r3, [r7, #4]
 800e81a:	681b      	ldr	r3, [r3, #0]
 800e81c:	685b      	ldr	r3, [r3, #4]
 800e81e:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 800e822:	687b      	ldr	r3, [r7, #4]
 800e824:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800e826:	687b      	ldr	r3, [r7, #4]
 800e828:	681b      	ldr	r3, [r3, #0]
 800e82a:	430a      	orrs	r2, r1
 800e82c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800e82e:	687b      	ldr	r3, [r7, #4]
 800e830:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800e832:	f003 0308 	and.w	r3, r3, #8
 800e836:	2b00      	cmp	r3, #0
 800e838:	d00a      	beq.n	800e850 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800e83a:	687b      	ldr	r3, [r7, #4]
 800e83c:	681b      	ldr	r3, [r3, #0]
 800e83e:	685b      	ldr	r3, [r3, #4]
 800e840:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 800e844:	687b      	ldr	r3, [r7, #4]
 800e846:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800e848:	687b      	ldr	r3, [r7, #4]
 800e84a:	681b      	ldr	r3, [r3, #0]
 800e84c:	430a      	orrs	r2, r1
 800e84e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 800e850:	687b      	ldr	r3, [r7, #4]
 800e852:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800e854:	f003 0310 	and.w	r3, r3, #16
 800e858:	2b00      	cmp	r3, #0
 800e85a:	d00a      	beq.n	800e872 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800e85c:	687b      	ldr	r3, [r7, #4]
 800e85e:	681b      	ldr	r3, [r3, #0]
 800e860:	689b      	ldr	r3, [r3, #8]
 800e862:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 800e866:	687b      	ldr	r3, [r7, #4]
 800e868:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800e86a:	687b      	ldr	r3, [r7, #4]
 800e86c:	681b      	ldr	r3, [r3, #0]
 800e86e:	430a      	orrs	r2, r1
 800e870:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800e872:	687b      	ldr	r3, [r7, #4]
 800e874:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800e876:	f003 0320 	and.w	r3, r3, #32
 800e87a:	2b00      	cmp	r3, #0
 800e87c:	d00a      	beq.n	800e894 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800e87e:	687b      	ldr	r3, [r7, #4]
 800e880:	681b      	ldr	r3, [r3, #0]
 800e882:	689b      	ldr	r3, [r3, #8]
 800e884:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 800e888:	687b      	ldr	r3, [r7, #4]
 800e88a:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800e88c:	687b      	ldr	r3, [r7, #4]
 800e88e:	681b      	ldr	r3, [r3, #0]
 800e890:	430a      	orrs	r2, r1
 800e892:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 800e894:	687b      	ldr	r3, [r7, #4]
 800e896:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800e898:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800e89c:	2b00      	cmp	r3, #0
 800e89e:	d01a      	beq.n	800e8d6 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800e8a0:	687b      	ldr	r3, [r7, #4]
 800e8a2:	681b      	ldr	r3, [r3, #0]
 800e8a4:	685b      	ldr	r3, [r3, #4]
 800e8a6:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 800e8aa:	687b      	ldr	r3, [r7, #4]
 800e8ac:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800e8ae:	687b      	ldr	r3, [r7, #4]
 800e8b0:	681b      	ldr	r3, [r3, #0]
 800e8b2:	430a      	orrs	r2, r1
 800e8b4:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800e8b6:	687b      	ldr	r3, [r7, #4]
 800e8b8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800e8ba:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800e8be:	d10a      	bne.n	800e8d6 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800e8c0:	687b      	ldr	r3, [r7, #4]
 800e8c2:	681b      	ldr	r3, [r3, #0]
 800e8c4:	685b      	ldr	r3, [r3, #4]
 800e8c6:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 800e8ca:	687b      	ldr	r3, [r7, #4]
 800e8cc:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800e8ce:	687b      	ldr	r3, [r7, #4]
 800e8d0:	681b      	ldr	r3, [r3, #0]
 800e8d2:	430a      	orrs	r2, r1
 800e8d4:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800e8d6:	687b      	ldr	r3, [r7, #4]
 800e8d8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800e8da:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800e8de:	2b00      	cmp	r3, #0
 800e8e0:	d00a      	beq.n	800e8f8 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800e8e2:	687b      	ldr	r3, [r7, #4]
 800e8e4:	681b      	ldr	r3, [r3, #0]
 800e8e6:	685b      	ldr	r3, [r3, #4]
 800e8e8:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 800e8ec:	687b      	ldr	r3, [r7, #4]
 800e8ee:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800e8f0:	687b      	ldr	r3, [r7, #4]
 800e8f2:	681b      	ldr	r3, [r3, #0]
 800e8f4:	430a      	orrs	r2, r1
 800e8f6:	605a      	str	r2, [r3, #4]
  }
}
 800e8f8:	bf00      	nop
 800e8fa:	370c      	adds	r7, #12
 800e8fc:	46bd      	mov	sp, r7
 800e8fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e902:	4770      	bx	lr

0800e904 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 800e904:	b580      	push	{r7, lr}
 800e906:	b098      	sub	sp, #96	; 0x60
 800e908:	af02      	add	r7, sp, #8
 800e90a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800e90c:	687b      	ldr	r3, [r7, #4]
 800e90e:	2200      	movs	r2, #0
 800e910:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 800e914:	f7f5 fb74 	bl	8004000 <HAL_GetTick>
 800e918:	6578      	str	r0, [r7, #84]	; 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800e91a:	687b      	ldr	r3, [r7, #4]
 800e91c:	681b      	ldr	r3, [r3, #0]
 800e91e:	681b      	ldr	r3, [r3, #0]
 800e920:	f003 0308 	and.w	r3, r3, #8
 800e924:	2b08      	cmp	r3, #8
 800e926:	d12f      	bne.n	800e988 <UART_CheckIdleState+0x84>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800e928:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800e92c:	9300      	str	r3, [sp, #0]
 800e92e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800e930:	2200      	movs	r2, #0
 800e932:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 800e936:	6878      	ldr	r0, [r7, #4]
 800e938:	f000 f88e 	bl	800ea58 <UART_WaitOnFlagUntilTimeout>
 800e93c:	4603      	mov	r3, r0
 800e93e:	2b00      	cmp	r3, #0
 800e940:	d022      	beq.n	800e988 <UART_CheckIdleState+0x84>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 800e942:	687b      	ldr	r3, [r7, #4]
 800e944:	681b      	ldr	r3, [r3, #0]
 800e946:	63bb      	str	r3, [r7, #56]	; 0x38
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800e948:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e94a:	e853 3f00 	ldrex	r3, [r3]
 800e94e:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 800e950:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800e952:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800e956:	653b      	str	r3, [r7, #80]	; 0x50
 800e958:	687b      	ldr	r3, [r7, #4]
 800e95a:	681b      	ldr	r3, [r3, #0]
 800e95c:	461a      	mov	r2, r3
 800e95e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800e960:	647b      	str	r3, [r7, #68]	; 0x44
 800e962:	643a      	str	r2, [r7, #64]	; 0x40
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800e964:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800e966:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800e968:	e841 2300 	strex	r3, r2, [r1]
 800e96c:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 800e96e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800e970:	2b00      	cmp	r3, #0
 800e972:	d1e6      	bne.n	800e942 <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 800e974:	687b      	ldr	r3, [r7, #4]
 800e976:	2220      	movs	r2, #32
 800e978:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

      __HAL_UNLOCK(huart);
 800e97c:	687b      	ldr	r3, [r7, #4]
 800e97e:	2200      	movs	r2, #0
 800e980:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800e984:	2303      	movs	r3, #3
 800e986:	e063      	b.n	800ea50 <UART_CheckIdleState+0x14c>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800e988:	687b      	ldr	r3, [r7, #4]
 800e98a:	681b      	ldr	r3, [r3, #0]
 800e98c:	681b      	ldr	r3, [r3, #0]
 800e98e:	f003 0304 	and.w	r3, r3, #4
 800e992:	2b04      	cmp	r3, #4
 800e994:	d149      	bne.n	800ea2a <UART_CheckIdleState+0x126>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800e996:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800e99a:	9300      	str	r3, [sp, #0]
 800e99c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800e99e:	2200      	movs	r2, #0
 800e9a0:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 800e9a4:	6878      	ldr	r0, [r7, #4]
 800e9a6:	f000 f857 	bl	800ea58 <UART_WaitOnFlagUntilTimeout>
 800e9aa:	4603      	mov	r3, r0
 800e9ac:	2b00      	cmp	r3, #0
 800e9ae:	d03c      	beq.n	800ea2a <UART_CheckIdleState+0x126>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800e9b0:	687b      	ldr	r3, [r7, #4]
 800e9b2:	681b      	ldr	r3, [r3, #0]
 800e9b4:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800e9b6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e9b8:	e853 3f00 	ldrex	r3, [r3]
 800e9bc:	623b      	str	r3, [r7, #32]
   return(result);
 800e9be:	6a3b      	ldr	r3, [r7, #32]
 800e9c0:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800e9c4:	64fb      	str	r3, [r7, #76]	; 0x4c
 800e9c6:	687b      	ldr	r3, [r7, #4]
 800e9c8:	681b      	ldr	r3, [r3, #0]
 800e9ca:	461a      	mov	r2, r3
 800e9cc:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800e9ce:	633b      	str	r3, [r7, #48]	; 0x30
 800e9d0:	62fa      	str	r2, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800e9d2:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800e9d4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800e9d6:	e841 2300 	strex	r3, r2, [r1]
 800e9da:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800e9dc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e9de:	2b00      	cmp	r3, #0
 800e9e0:	d1e6      	bne.n	800e9b0 <UART_CheckIdleState+0xac>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800e9e2:	687b      	ldr	r3, [r7, #4]
 800e9e4:	681b      	ldr	r3, [r3, #0]
 800e9e6:	3308      	adds	r3, #8
 800e9e8:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800e9ea:	693b      	ldr	r3, [r7, #16]
 800e9ec:	e853 3f00 	ldrex	r3, [r3]
 800e9f0:	60fb      	str	r3, [r7, #12]
   return(result);
 800e9f2:	68fb      	ldr	r3, [r7, #12]
 800e9f4:	f023 0301 	bic.w	r3, r3, #1
 800e9f8:	64bb      	str	r3, [r7, #72]	; 0x48
 800e9fa:	687b      	ldr	r3, [r7, #4]
 800e9fc:	681b      	ldr	r3, [r3, #0]
 800e9fe:	3308      	adds	r3, #8
 800ea00:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800ea02:	61fa      	str	r2, [r7, #28]
 800ea04:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ea06:	69b9      	ldr	r1, [r7, #24]
 800ea08:	69fa      	ldr	r2, [r7, #28]
 800ea0a:	e841 2300 	strex	r3, r2, [r1]
 800ea0e:	617b      	str	r3, [r7, #20]
   return(result);
 800ea10:	697b      	ldr	r3, [r7, #20]
 800ea12:	2b00      	cmp	r3, #0
 800ea14:	d1e5      	bne.n	800e9e2 <UART_CheckIdleState+0xde>

      huart->RxState = HAL_UART_STATE_READY;
 800ea16:	687b      	ldr	r3, [r7, #4]
 800ea18:	2220      	movs	r2, #32
 800ea1a:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

      __HAL_UNLOCK(huart);
 800ea1e:	687b      	ldr	r3, [r7, #4]
 800ea20:	2200      	movs	r2, #0
 800ea22:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800ea26:	2303      	movs	r3, #3
 800ea28:	e012      	b.n	800ea50 <UART_CheckIdleState+0x14c>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800ea2a:	687b      	ldr	r3, [r7, #4]
 800ea2c:	2220      	movs	r2, #32
 800ea2e:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->RxState = HAL_UART_STATE_READY;
 800ea32:	687b      	ldr	r3, [r7, #4]
 800ea34:	2220      	movs	r2, #32
 800ea36:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800ea3a:	687b      	ldr	r3, [r7, #4]
 800ea3c:	2200      	movs	r2, #0
 800ea3e:	66da      	str	r2, [r3, #108]	; 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800ea40:	687b      	ldr	r3, [r7, #4]
 800ea42:	2200      	movs	r2, #0
 800ea44:	671a      	str	r2, [r3, #112]	; 0x70

  __HAL_UNLOCK(huart);
 800ea46:	687b      	ldr	r3, [r7, #4]
 800ea48:	2200      	movs	r2, #0
 800ea4a:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 800ea4e:	2300      	movs	r3, #0
}
 800ea50:	4618      	mov	r0, r3
 800ea52:	3758      	adds	r7, #88	; 0x58
 800ea54:	46bd      	mov	sp, r7
 800ea56:	bd80      	pop	{r7, pc}

0800ea58 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800ea58:	b580      	push	{r7, lr}
 800ea5a:	b084      	sub	sp, #16
 800ea5c:	af00      	add	r7, sp, #0
 800ea5e:	60f8      	str	r0, [r7, #12]
 800ea60:	60b9      	str	r1, [r7, #8]
 800ea62:	603b      	str	r3, [r7, #0]
 800ea64:	4613      	mov	r3, r2
 800ea66:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800ea68:	e049      	b.n	800eafe <UART_WaitOnFlagUntilTimeout+0xa6>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800ea6a:	69bb      	ldr	r3, [r7, #24]
 800ea6c:	f1b3 3fff 	cmp.w	r3, #4294967295
 800ea70:	d045      	beq.n	800eafe <UART_WaitOnFlagUntilTimeout+0xa6>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800ea72:	f7f5 fac5 	bl	8004000 <HAL_GetTick>
 800ea76:	4602      	mov	r2, r0
 800ea78:	683b      	ldr	r3, [r7, #0]
 800ea7a:	1ad3      	subs	r3, r2, r3
 800ea7c:	69ba      	ldr	r2, [r7, #24]
 800ea7e:	429a      	cmp	r2, r3
 800ea80:	d302      	bcc.n	800ea88 <UART_WaitOnFlagUntilTimeout+0x30>
 800ea82:	69bb      	ldr	r3, [r7, #24]
 800ea84:	2b00      	cmp	r3, #0
 800ea86:	d101      	bne.n	800ea8c <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 800ea88:	2303      	movs	r3, #3
 800ea8a:	e048      	b.n	800eb1e <UART_WaitOnFlagUntilTimeout+0xc6>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 800ea8c:	68fb      	ldr	r3, [r7, #12]
 800ea8e:	681b      	ldr	r3, [r3, #0]
 800ea90:	681b      	ldr	r3, [r3, #0]
 800ea92:	f003 0304 	and.w	r3, r3, #4
 800ea96:	2b00      	cmp	r3, #0
 800ea98:	d031      	beq.n	800eafe <UART_WaitOnFlagUntilTimeout+0xa6>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 800ea9a:	68fb      	ldr	r3, [r7, #12]
 800ea9c:	681b      	ldr	r3, [r3, #0]
 800ea9e:	69db      	ldr	r3, [r3, #28]
 800eaa0:	f003 0308 	and.w	r3, r3, #8
 800eaa4:	2b08      	cmp	r3, #8
 800eaa6:	d110      	bne.n	800eaca <UART_WaitOnFlagUntilTimeout+0x72>
        {
           /* Clear Overrun Error flag*/
           __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 800eaa8:	68fb      	ldr	r3, [r7, #12]
 800eaaa:	681b      	ldr	r3, [r3, #0]
 800eaac:	2208      	movs	r2, #8
 800eaae:	621a      	str	r2, [r3, #32]

           /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts if ongoing */
           UART_EndRxTransfer(huart);
 800eab0:	68f8      	ldr	r0, [r7, #12]
 800eab2:	f000 f839 	bl	800eb28 <UART_EndRxTransfer>

           huart->ErrorCode = HAL_UART_ERROR_ORE;
 800eab6:	68fb      	ldr	r3, [r7, #12]
 800eab8:	2208      	movs	r2, #8
 800eaba:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

           /* Process Unlocked */
           __HAL_UNLOCK(huart);
 800eabe:	68fb      	ldr	r3, [r7, #12]
 800eac0:	2200      	movs	r2, #0
 800eac2:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

           return HAL_ERROR;
 800eac6:	2301      	movs	r3, #1
 800eac8:	e029      	b.n	800eb1e <UART_WaitOnFlagUntilTimeout+0xc6>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800eaca:	68fb      	ldr	r3, [r7, #12]
 800eacc:	681b      	ldr	r3, [r3, #0]
 800eace:	69db      	ldr	r3, [r3, #28]
 800ead0:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800ead4:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800ead8:	d111      	bne.n	800eafe <UART_WaitOnFlagUntilTimeout+0xa6>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800eada:	68fb      	ldr	r3, [r7, #12]
 800eadc:	681b      	ldr	r3, [r3, #0]
 800eade:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800eae2:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800eae4:	68f8      	ldr	r0, [r7, #12]
 800eae6:	f000 f81f 	bl	800eb28 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800eaea:	68fb      	ldr	r3, [r7, #12]
 800eaec:	2220      	movs	r2, #32
 800eaee:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800eaf2:	68fb      	ldr	r3, [r7, #12]
 800eaf4:	2200      	movs	r2, #0
 800eaf6:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

          return HAL_TIMEOUT;
 800eafa:	2303      	movs	r3, #3
 800eafc:	e00f      	b.n	800eb1e <UART_WaitOnFlagUntilTimeout+0xc6>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800eafe:	68fb      	ldr	r3, [r7, #12]
 800eb00:	681b      	ldr	r3, [r3, #0]
 800eb02:	69da      	ldr	r2, [r3, #28]
 800eb04:	68bb      	ldr	r3, [r7, #8]
 800eb06:	4013      	ands	r3, r2
 800eb08:	68ba      	ldr	r2, [r7, #8]
 800eb0a:	429a      	cmp	r2, r3
 800eb0c:	bf0c      	ite	eq
 800eb0e:	2301      	moveq	r3, #1
 800eb10:	2300      	movne	r3, #0
 800eb12:	b2db      	uxtb	r3, r3
 800eb14:	461a      	mov	r2, r3
 800eb16:	79fb      	ldrb	r3, [r7, #7]
 800eb18:	429a      	cmp	r2, r3
 800eb1a:	d0a6      	beq.n	800ea6a <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800eb1c:	2300      	movs	r3, #0
}
 800eb1e:	4618      	mov	r0, r3
 800eb20:	3710      	adds	r7, #16
 800eb22:	46bd      	mov	sp, r7
 800eb24:	bd80      	pop	{r7, pc}
	...

0800eb28 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800eb28:	b480      	push	{r7}
 800eb2a:	b095      	sub	sp, #84	; 0x54
 800eb2c:	af00      	add	r7, sp, #0
 800eb2e:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800eb30:	687b      	ldr	r3, [r7, #4]
 800eb32:	681b      	ldr	r3, [r3, #0]
 800eb34:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800eb36:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800eb38:	e853 3f00 	ldrex	r3, [r3]
 800eb3c:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 800eb3e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800eb40:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800eb44:	64fb      	str	r3, [r7, #76]	; 0x4c
 800eb46:	687b      	ldr	r3, [r7, #4]
 800eb48:	681b      	ldr	r3, [r3, #0]
 800eb4a:	461a      	mov	r2, r3
 800eb4c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800eb4e:	643b      	str	r3, [r7, #64]	; 0x40
 800eb50:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800eb52:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800eb54:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800eb56:	e841 2300 	strex	r3, r2, [r1]
 800eb5a:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800eb5c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800eb5e:	2b00      	cmp	r3, #0
 800eb60:	d1e6      	bne.n	800eb30 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800eb62:	687b      	ldr	r3, [r7, #4]
 800eb64:	681b      	ldr	r3, [r3, #0]
 800eb66:	3308      	adds	r3, #8
 800eb68:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800eb6a:	6a3b      	ldr	r3, [r7, #32]
 800eb6c:	e853 3f00 	ldrex	r3, [r3]
 800eb70:	61fb      	str	r3, [r7, #28]
   return(result);
 800eb72:	69fa      	ldr	r2, [r7, #28]
 800eb74:	4b1e      	ldr	r3, [pc, #120]	; (800ebf0 <UART_EndRxTransfer+0xc8>)
 800eb76:	4013      	ands	r3, r2
 800eb78:	64bb      	str	r3, [r7, #72]	; 0x48
 800eb7a:	687b      	ldr	r3, [r7, #4]
 800eb7c:	681b      	ldr	r3, [r3, #0]
 800eb7e:	3308      	adds	r3, #8
 800eb80:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800eb82:	62fa      	str	r2, [r7, #44]	; 0x2c
 800eb84:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800eb86:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800eb88:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800eb8a:	e841 2300 	strex	r3, r2, [r1]
 800eb8e:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800eb90:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800eb92:	2b00      	cmp	r3, #0
 800eb94:	d1e5      	bne.n	800eb62 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800eb96:	687b      	ldr	r3, [r7, #4]
 800eb98:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800eb9a:	2b01      	cmp	r3, #1
 800eb9c:	d118      	bne.n	800ebd0 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800eb9e:	687b      	ldr	r3, [r7, #4]
 800eba0:	681b      	ldr	r3, [r3, #0]
 800eba2:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800eba4:	68fb      	ldr	r3, [r7, #12]
 800eba6:	e853 3f00 	ldrex	r3, [r3]
 800ebaa:	60bb      	str	r3, [r7, #8]
   return(result);
 800ebac:	68bb      	ldr	r3, [r7, #8]
 800ebae:	f023 0310 	bic.w	r3, r3, #16
 800ebb2:	647b      	str	r3, [r7, #68]	; 0x44
 800ebb4:	687b      	ldr	r3, [r7, #4]
 800ebb6:	681b      	ldr	r3, [r3, #0]
 800ebb8:	461a      	mov	r2, r3
 800ebba:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800ebbc:	61bb      	str	r3, [r7, #24]
 800ebbe:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ebc0:	6979      	ldr	r1, [r7, #20]
 800ebc2:	69ba      	ldr	r2, [r7, #24]
 800ebc4:	e841 2300 	strex	r3, r2, [r1]
 800ebc8:	613b      	str	r3, [r7, #16]
   return(result);
 800ebca:	693b      	ldr	r3, [r7, #16]
 800ebcc:	2b00      	cmp	r3, #0
 800ebce:	d1e6      	bne.n	800eb9e <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800ebd0:	687b      	ldr	r3, [r7, #4]
 800ebd2:	2220      	movs	r2, #32
 800ebd4:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800ebd8:	687b      	ldr	r3, [r7, #4]
 800ebda:	2200      	movs	r2, #0
 800ebdc:	66da      	str	r2, [r3, #108]	; 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 800ebde:	687b      	ldr	r3, [r7, #4]
 800ebe0:	2200      	movs	r2, #0
 800ebe2:	675a      	str	r2, [r3, #116]	; 0x74
}
 800ebe4:	bf00      	nop
 800ebe6:	3754      	adds	r7, #84	; 0x54
 800ebe8:	46bd      	mov	sp, r7
 800ebea:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ebee:	4770      	bx	lr
 800ebf0:	effffffe 	.word	0xeffffffe

0800ebf4 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 800ebf4:	b480      	push	{r7}
 800ebf6:	b085      	sub	sp, #20
 800ebf8:	af00      	add	r7, sp, #0
 800ebfa:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 800ebfc:	687b      	ldr	r3, [r7, #4]
 800ebfe:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 800ec02:	2b01      	cmp	r3, #1
 800ec04:	d101      	bne.n	800ec0a <HAL_UARTEx_DisableFifoMode+0x16>
 800ec06:	2302      	movs	r3, #2
 800ec08:	e027      	b.n	800ec5a <HAL_UARTEx_DisableFifoMode+0x66>
 800ec0a:	687b      	ldr	r3, [r7, #4]
 800ec0c:	2201      	movs	r2, #1
 800ec0e:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800ec12:	687b      	ldr	r3, [r7, #4]
 800ec14:	2224      	movs	r2, #36	; 0x24
 800ec16:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800ec1a:	687b      	ldr	r3, [r7, #4]
 800ec1c:	681b      	ldr	r3, [r3, #0]
 800ec1e:	681b      	ldr	r3, [r3, #0]
 800ec20:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800ec22:	687b      	ldr	r3, [r7, #4]
 800ec24:	681b      	ldr	r3, [r3, #0]
 800ec26:	681a      	ldr	r2, [r3, #0]
 800ec28:	687b      	ldr	r3, [r7, #4]
 800ec2a:	681b      	ldr	r3, [r3, #0]
 800ec2c:	f022 0201 	bic.w	r2, r2, #1
 800ec30:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 800ec32:	68fb      	ldr	r3, [r7, #12]
 800ec34:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 800ec38:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 800ec3a:	687b      	ldr	r3, [r7, #4]
 800ec3c:	2200      	movs	r2, #0
 800ec3e:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800ec40:	687b      	ldr	r3, [r7, #4]
 800ec42:	681b      	ldr	r3, [r3, #0]
 800ec44:	68fa      	ldr	r2, [r7, #12]
 800ec46:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800ec48:	687b      	ldr	r3, [r7, #4]
 800ec4a:	2220      	movs	r2, #32
 800ec4c:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800ec50:	687b      	ldr	r3, [r7, #4]
 800ec52:	2200      	movs	r2, #0
 800ec54:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 800ec58:	2300      	movs	r3, #0
}
 800ec5a:	4618      	mov	r0, r3
 800ec5c:	3714      	adds	r7, #20
 800ec5e:	46bd      	mov	sp, r7
 800ec60:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ec64:	4770      	bx	lr

0800ec66 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800ec66:	b580      	push	{r7, lr}
 800ec68:	b084      	sub	sp, #16
 800ec6a:	af00      	add	r7, sp, #0
 800ec6c:	6078      	str	r0, [r7, #4]
 800ec6e:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800ec70:	687b      	ldr	r3, [r7, #4]
 800ec72:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 800ec76:	2b01      	cmp	r3, #1
 800ec78:	d101      	bne.n	800ec7e <HAL_UARTEx_SetTxFifoThreshold+0x18>
 800ec7a:	2302      	movs	r3, #2
 800ec7c:	e02d      	b.n	800ecda <HAL_UARTEx_SetTxFifoThreshold+0x74>
 800ec7e:	687b      	ldr	r3, [r7, #4]
 800ec80:	2201      	movs	r2, #1
 800ec82:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800ec86:	687b      	ldr	r3, [r7, #4]
 800ec88:	2224      	movs	r2, #36	; 0x24
 800ec8a:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800ec8e:	687b      	ldr	r3, [r7, #4]
 800ec90:	681b      	ldr	r3, [r3, #0]
 800ec92:	681b      	ldr	r3, [r3, #0]
 800ec94:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800ec96:	687b      	ldr	r3, [r7, #4]
 800ec98:	681b      	ldr	r3, [r3, #0]
 800ec9a:	681a      	ldr	r2, [r3, #0]
 800ec9c:	687b      	ldr	r3, [r7, #4]
 800ec9e:	681b      	ldr	r3, [r3, #0]
 800eca0:	f022 0201 	bic.w	r2, r2, #1
 800eca4:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 800eca6:	687b      	ldr	r3, [r7, #4]
 800eca8:	681b      	ldr	r3, [r3, #0]
 800ecaa:	689b      	ldr	r3, [r3, #8]
 800ecac:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 800ecb0:	687b      	ldr	r3, [r7, #4]
 800ecb2:	681b      	ldr	r3, [r3, #0]
 800ecb4:	683a      	ldr	r2, [r7, #0]
 800ecb6:	430a      	orrs	r2, r1
 800ecb8:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800ecba:	6878      	ldr	r0, [r7, #4]
 800ecbc:	f000 f850 	bl	800ed60 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800ecc0:	687b      	ldr	r3, [r7, #4]
 800ecc2:	681b      	ldr	r3, [r3, #0]
 800ecc4:	68fa      	ldr	r2, [r7, #12]
 800ecc6:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800ecc8:	687b      	ldr	r3, [r7, #4]
 800ecca:	2220      	movs	r2, #32
 800eccc:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800ecd0:	687b      	ldr	r3, [r7, #4]
 800ecd2:	2200      	movs	r2, #0
 800ecd4:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 800ecd8:	2300      	movs	r3, #0
}
 800ecda:	4618      	mov	r0, r3
 800ecdc:	3710      	adds	r7, #16
 800ecde:	46bd      	mov	sp, r7
 800ece0:	bd80      	pop	{r7, pc}

0800ece2 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800ece2:	b580      	push	{r7, lr}
 800ece4:	b084      	sub	sp, #16
 800ece6:	af00      	add	r7, sp, #0
 800ece8:	6078      	str	r0, [r7, #4]
 800ecea:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800ecec:	687b      	ldr	r3, [r7, #4]
 800ecee:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 800ecf2:	2b01      	cmp	r3, #1
 800ecf4:	d101      	bne.n	800ecfa <HAL_UARTEx_SetRxFifoThreshold+0x18>
 800ecf6:	2302      	movs	r3, #2
 800ecf8:	e02d      	b.n	800ed56 <HAL_UARTEx_SetRxFifoThreshold+0x74>
 800ecfa:	687b      	ldr	r3, [r7, #4]
 800ecfc:	2201      	movs	r2, #1
 800ecfe:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800ed02:	687b      	ldr	r3, [r7, #4]
 800ed04:	2224      	movs	r2, #36	; 0x24
 800ed06:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800ed0a:	687b      	ldr	r3, [r7, #4]
 800ed0c:	681b      	ldr	r3, [r3, #0]
 800ed0e:	681b      	ldr	r3, [r3, #0]
 800ed10:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800ed12:	687b      	ldr	r3, [r7, #4]
 800ed14:	681b      	ldr	r3, [r3, #0]
 800ed16:	681a      	ldr	r2, [r3, #0]
 800ed18:	687b      	ldr	r3, [r7, #4]
 800ed1a:	681b      	ldr	r3, [r3, #0]
 800ed1c:	f022 0201 	bic.w	r2, r2, #1
 800ed20:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 800ed22:	687b      	ldr	r3, [r7, #4]
 800ed24:	681b      	ldr	r3, [r3, #0]
 800ed26:	689b      	ldr	r3, [r3, #8]
 800ed28:	f023 6160 	bic.w	r1, r3, #234881024	; 0xe000000
 800ed2c:	687b      	ldr	r3, [r7, #4]
 800ed2e:	681b      	ldr	r3, [r3, #0]
 800ed30:	683a      	ldr	r2, [r7, #0]
 800ed32:	430a      	orrs	r2, r1
 800ed34:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800ed36:	6878      	ldr	r0, [r7, #4]
 800ed38:	f000 f812 	bl	800ed60 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800ed3c:	687b      	ldr	r3, [r7, #4]
 800ed3e:	681b      	ldr	r3, [r3, #0]
 800ed40:	68fa      	ldr	r2, [r7, #12]
 800ed42:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800ed44:	687b      	ldr	r3, [r7, #4]
 800ed46:	2220      	movs	r2, #32
 800ed48:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800ed4c:	687b      	ldr	r3, [r7, #4]
 800ed4e:	2200      	movs	r2, #0
 800ed50:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 800ed54:	2300      	movs	r3, #0
}
 800ed56:	4618      	mov	r0, r3
 800ed58:	3710      	adds	r7, #16
 800ed5a:	46bd      	mov	sp, r7
 800ed5c:	bd80      	pop	{r7, pc}
	...

0800ed60 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 800ed60:	b480      	push	{r7}
 800ed62:	b085      	sub	sp, #20
 800ed64:	af00      	add	r7, sp, #0
 800ed66:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 800ed68:	687b      	ldr	r3, [r7, #4]
 800ed6a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800ed6c:	2b00      	cmp	r3, #0
 800ed6e:	d108      	bne.n	800ed82 <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 800ed70:	687b      	ldr	r3, [r7, #4]
 800ed72:	2201      	movs	r2, #1
 800ed74:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = 1U;
 800ed78:	687b      	ldr	r3, [r7, #4]
 800ed7a:	2201      	movs	r2, #1
 800ed7c:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 800ed80:	e031      	b.n	800ede6 <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 800ed82:	2310      	movs	r3, #16
 800ed84:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 800ed86:	2310      	movs	r3, #16
 800ed88:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 800ed8a:	687b      	ldr	r3, [r7, #4]
 800ed8c:	681b      	ldr	r3, [r3, #0]
 800ed8e:	689b      	ldr	r3, [r3, #8]
 800ed90:	0e5b      	lsrs	r3, r3, #25
 800ed92:	b2db      	uxtb	r3, r3
 800ed94:	f003 0307 	and.w	r3, r3, #7
 800ed98:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 800ed9a:	687b      	ldr	r3, [r7, #4]
 800ed9c:	681b      	ldr	r3, [r3, #0]
 800ed9e:	689b      	ldr	r3, [r3, #8]
 800eda0:	0f5b      	lsrs	r3, r3, #29
 800eda2:	b2db      	uxtb	r3, r3
 800eda4:	f003 0307 	and.w	r3, r3, #7
 800eda8:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800edaa:	7bbb      	ldrb	r3, [r7, #14]
 800edac:	7b3a      	ldrb	r2, [r7, #12]
 800edae:	4911      	ldr	r1, [pc, #68]	; (800edf4 <UARTEx_SetNbDataToProcess+0x94>)
 800edb0:	5c8a      	ldrb	r2, [r1, r2]
 800edb2:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 800edb6:	7b3a      	ldrb	r2, [r7, #12]
 800edb8:	490f      	ldr	r1, [pc, #60]	; (800edf8 <UARTEx_SetNbDataToProcess+0x98>)
 800edba:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800edbc:	fb93 f3f2 	sdiv	r3, r3, r2
 800edc0:	b29a      	uxth	r2, r3
 800edc2:	687b      	ldr	r3, [r7, #4]
 800edc4:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800edc8:	7bfb      	ldrb	r3, [r7, #15]
 800edca:	7b7a      	ldrb	r2, [r7, #13]
 800edcc:	4909      	ldr	r1, [pc, #36]	; (800edf4 <UARTEx_SetNbDataToProcess+0x94>)
 800edce:	5c8a      	ldrb	r2, [r1, r2]
 800edd0:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 800edd4:	7b7a      	ldrb	r2, [r7, #13]
 800edd6:	4908      	ldr	r1, [pc, #32]	; (800edf8 <UARTEx_SetNbDataToProcess+0x98>)
 800edd8:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800edda:	fb93 f3f2 	sdiv	r3, r3, r2
 800edde:	b29a      	uxth	r2, r3
 800ede0:	687b      	ldr	r3, [r7, #4]
 800ede2:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
}
 800ede6:	bf00      	nop
 800ede8:	3714      	adds	r7, #20
 800edea:	46bd      	mov	sp, r7
 800edec:	f85d 7b04 	ldr.w	r7, [sp], #4
 800edf0:	4770      	bx	lr
 800edf2:	bf00      	nop
 800edf4:	0801ef50 	.word	0x0801ef50
 800edf8:	0801ef58 	.word	0x0801ef58

0800edfc <MX_LWIP_Init>:

/**
  * LwIP initialization function
  */
void MX_LWIP_Init(void)
{
 800edfc:	b580      	push	{r7, lr}
 800edfe:	b084      	sub	sp, #16
 800ee00:	af04      	add	r7, sp, #16
  /* IP addresses initialization */
  IP_ADDRESS[0] = 192;
 800ee02:	4b87      	ldr	r3, [pc, #540]	; (800f020 <MX_LWIP_Init+0x224>)
 800ee04:	22c0      	movs	r2, #192	; 0xc0
 800ee06:	701a      	strb	r2, [r3, #0]
  IP_ADDRESS[1] = 168;
 800ee08:	4b85      	ldr	r3, [pc, #532]	; (800f020 <MX_LWIP_Init+0x224>)
 800ee0a:	22a8      	movs	r2, #168	; 0xa8
 800ee0c:	705a      	strb	r2, [r3, #1]
  IP_ADDRESS[2] = 1;
 800ee0e:	4b84      	ldr	r3, [pc, #528]	; (800f020 <MX_LWIP_Init+0x224>)
 800ee10:	2201      	movs	r2, #1
 800ee12:	709a      	strb	r2, [r3, #2]
  IP_ADDRESS[3] = 10;
 800ee14:	4b82      	ldr	r3, [pc, #520]	; (800f020 <MX_LWIP_Init+0x224>)
 800ee16:	220a      	movs	r2, #10
 800ee18:	70da      	strb	r2, [r3, #3]
  NETMASK_ADDRESS[0] = 255;
 800ee1a:	4b82      	ldr	r3, [pc, #520]	; (800f024 <MX_LWIP_Init+0x228>)
 800ee1c:	22ff      	movs	r2, #255	; 0xff
 800ee1e:	701a      	strb	r2, [r3, #0]
  NETMASK_ADDRESS[1] = 255;
 800ee20:	4b80      	ldr	r3, [pc, #512]	; (800f024 <MX_LWIP_Init+0x228>)
 800ee22:	22ff      	movs	r2, #255	; 0xff
 800ee24:	705a      	strb	r2, [r3, #1]
  NETMASK_ADDRESS[2] = 0;
 800ee26:	4b7f      	ldr	r3, [pc, #508]	; (800f024 <MX_LWIP_Init+0x228>)
 800ee28:	2200      	movs	r2, #0
 800ee2a:	709a      	strb	r2, [r3, #2]
  NETMASK_ADDRESS[3] = 0;
 800ee2c:	4b7d      	ldr	r3, [pc, #500]	; (800f024 <MX_LWIP_Init+0x228>)
 800ee2e:	2200      	movs	r2, #0
 800ee30:	70da      	strb	r2, [r3, #3]
  GATEWAY_ADDRESS[0] = 192;
 800ee32:	4b7d      	ldr	r3, [pc, #500]	; (800f028 <MX_LWIP_Init+0x22c>)
 800ee34:	22c0      	movs	r2, #192	; 0xc0
 800ee36:	701a      	strb	r2, [r3, #0]
  GATEWAY_ADDRESS[1] = 168;
 800ee38:	4b7b      	ldr	r3, [pc, #492]	; (800f028 <MX_LWIP_Init+0x22c>)
 800ee3a:	22a8      	movs	r2, #168	; 0xa8
 800ee3c:	705a      	strb	r2, [r3, #1]
  GATEWAY_ADDRESS[2] = 1;
 800ee3e:	4b7a      	ldr	r3, [pc, #488]	; (800f028 <MX_LWIP_Init+0x22c>)
 800ee40:	2201      	movs	r2, #1
 800ee42:	709a      	strb	r2, [r3, #2]
  GATEWAY_ADDRESS[3] = 1;
 800ee44:	4b78      	ldr	r3, [pc, #480]	; (800f028 <MX_LWIP_Init+0x22c>)
 800ee46:	2201      	movs	r2, #1
 800ee48:	70da      	strb	r2, [r3, #3]

/* USER CODE BEGIN IP_ADDRESSES */
/* USER CODE END IP_ADDRESSES */

  /* Initilialize the LwIP stack without RTOS */
  lwip_init();
 800ee4a:	f000 fd31 	bl	800f8b0 <lwip_init>

  /* IP addresses initialization without DHCP (IPv4) */
  IP4_ADDR(&ipaddr, IP_ADDRESS[0], IP_ADDRESS[1], IP_ADDRESS[2], IP_ADDRESS[3]);
 800ee4e:	4b74      	ldr	r3, [pc, #464]	; (800f020 <MX_LWIP_Init+0x224>)
 800ee50:	781b      	ldrb	r3, [r3, #0]
 800ee52:	061a      	lsls	r2, r3, #24
 800ee54:	4b72      	ldr	r3, [pc, #456]	; (800f020 <MX_LWIP_Init+0x224>)
 800ee56:	785b      	ldrb	r3, [r3, #1]
 800ee58:	041b      	lsls	r3, r3, #16
 800ee5a:	431a      	orrs	r2, r3
 800ee5c:	4b70      	ldr	r3, [pc, #448]	; (800f020 <MX_LWIP_Init+0x224>)
 800ee5e:	789b      	ldrb	r3, [r3, #2]
 800ee60:	021b      	lsls	r3, r3, #8
 800ee62:	4313      	orrs	r3, r2
 800ee64:	4a6e      	ldr	r2, [pc, #440]	; (800f020 <MX_LWIP_Init+0x224>)
 800ee66:	78d2      	ldrb	r2, [r2, #3]
 800ee68:	4313      	orrs	r3, r2
 800ee6a:	061a      	lsls	r2, r3, #24
 800ee6c:	4b6c      	ldr	r3, [pc, #432]	; (800f020 <MX_LWIP_Init+0x224>)
 800ee6e:	781b      	ldrb	r3, [r3, #0]
 800ee70:	0619      	lsls	r1, r3, #24
 800ee72:	4b6b      	ldr	r3, [pc, #428]	; (800f020 <MX_LWIP_Init+0x224>)
 800ee74:	785b      	ldrb	r3, [r3, #1]
 800ee76:	041b      	lsls	r3, r3, #16
 800ee78:	4319      	orrs	r1, r3
 800ee7a:	4b69      	ldr	r3, [pc, #420]	; (800f020 <MX_LWIP_Init+0x224>)
 800ee7c:	789b      	ldrb	r3, [r3, #2]
 800ee7e:	021b      	lsls	r3, r3, #8
 800ee80:	430b      	orrs	r3, r1
 800ee82:	4967      	ldr	r1, [pc, #412]	; (800f020 <MX_LWIP_Init+0x224>)
 800ee84:	78c9      	ldrb	r1, [r1, #3]
 800ee86:	430b      	orrs	r3, r1
 800ee88:	021b      	lsls	r3, r3, #8
 800ee8a:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 800ee8e:	431a      	orrs	r2, r3
 800ee90:	4b63      	ldr	r3, [pc, #396]	; (800f020 <MX_LWIP_Init+0x224>)
 800ee92:	781b      	ldrb	r3, [r3, #0]
 800ee94:	0619      	lsls	r1, r3, #24
 800ee96:	4b62      	ldr	r3, [pc, #392]	; (800f020 <MX_LWIP_Init+0x224>)
 800ee98:	785b      	ldrb	r3, [r3, #1]
 800ee9a:	041b      	lsls	r3, r3, #16
 800ee9c:	4319      	orrs	r1, r3
 800ee9e:	4b60      	ldr	r3, [pc, #384]	; (800f020 <MX_LWIP_Init+0x224>)
 800eea0:	789b      	ldrb	r3, [r3, #2]
 800eea2:	021b      	lsls	r3, r3, #8
 800eea4:	430b      	orrs	r3, r1
 800eea6:	495e      	ldr	r1, [pc, #376]	; (800f020 <MX_LWIP_Init+0x224>)
 800eea8:	78c9      	ldrb	r1, [r1, #3]
 800eeaa:	430b      	orrs	r3, r1
 800eeac:	0a1b      	lsrs	r3, r3, #8
 800eeae:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 800eeb2:	431a      	orrs	r2, r3
 800eeb4:	4b5a      	ldr	r3, [pc, #360]	; (800f020 <MX_LWIP_Init+0x224>)
 800eeb6:	781b      	ldrb	r3, [r3, #0]
 800eeb8:	0619      	lsls	r1, r3, #24
 800eeba:	4b59      	ldr	r3, [pc, #356]	; (800f020 <MX_LWIP_Init+0x224>)
 800eebc:	785b      	ldrb	r3, [r3, #1]
 800eebe:	041b      	lsls	r3, r3, #16
 800eec0:	4319      	orrs	r1, r3
 800eec2:	4b57      	ldr	r3, [pc, #348]	; (800f020 <MX_LWIP_Init+0x224>)
 800eec4:	789b      	ldrb	r3, [r3, #2]
 800eec6:	021b      	lsls	r3, r3, #8
 800eec8:	430b      	orrs	r3, r1
 800eeca:	4955      	ldr	r1, [pc, #340]	; (800f020 <MX_LWIP_Init+0x224>)
 800eecc:	78c9      	ldrb	r1, [r1, #3]
 800eece:	430b      	orrs	r3, r1
 800eed0:	0e1b      	lsrs	r3, r3, #24
 800eed2:	4313      	orrs	r3, r2
 800eed4:	4a55      	ldr	r2, [pc, #340]	; (800f02c <MX_LWIP_Init+0x230>)
 800eed6:	6013      	str	r3, [r2, #0]
  IP4_ADDR(&netmask, NETMASK_ADDRESS[0], NETMASK_ADDRESS[1] , NETMASK_ADDRESS[2], NETMASK_ADDRESS[3]);
 800eed8:	4b52      	ldr	r3, [pc, #328]	; (800f024 <MX_LWIP_Init+0x228>)
 800eeda:	781b      	ldrb	r3, [r3, #0]
 800eedc:	061a      	lsls	r2, r3, #24
 800eede:	4b51      	ldr	r3, [pc, #324]	; (800f024 <MX_LWIP_Init+0x228>)
 800eee0:	785b      	ldrb	r3, [r3, #1]
 800eee2:	041b      	lsls	r3, r3, #16
 800eee4:	431a      	orrs	r2, r3
 800eee6:	4b4f      	ldr	r3, [pc, #316]	; (800f024 <MX_LWIP_Init+0x228>)
 800eee8:	789b      	ldrb	r3, [r3, #2]
 800eeea:	021b      	lsls	r3, r3, #8
 800eeec:	4313      	orrs	r3, r2
 800eeee:	4a4d      	ldr	r2, [pc, #308]	; (800f024 <MX_LWIP_Init+0x228>)
 800eef0:	78d2      	ldrb	r2, [r2, #3]
 800eef2:	4313      	orrs	r3, r2
 800eef4:	061a      	lsls	r2, r3, #24
 800eef6:	4b4b      	ldr	r3, [pc, #300]	; (800f024 <MX_LWIP_Init+0x228>)
 800eef8:	781b      	ldrb	r3, [r3, #0]
 800eefa:	0619      	lsls	r1, r3, #24
 800eefc:	4b49      	ldr	r3, [pc, #292]	; (800f024 <MX_LWIP_Init+0x228>)
 800eefe:	785b      	ldrb	r3, [r3, #1]
 800ef00:	041b      	lsls	r3, r3, #16
 800ef02:	4319      	orrs	r1, r3
 800ef04:	4b47      	ldr	r3, [pc, #284]	; (800f024 <MX_LWIP_Init+0x228>)
 800ef06:	789b      	ldrb	r3, [r3, #2]
 800ef08:	021b      	lsls	r3, r3, #8
 800ef0a:	430b      	orrs	r3, r1
 800ef0c:	4945      	ldr	r1, [pc, #276]	; (800f024 <MX_LWIP_Init+0x228>)
 800ef0e:	78c9      	ldrb	r1, [r1, #3]
 800ef10:	430b      	orrs	r3, r1
 800ef12:	021b      	lsls	r3, r3, #8
 800ef14:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 800ef18:	431a      	orrs	r2, r3
 800ef1a:	4b42      	ldr	r3, [pc, #264]	; (800f024 <MX_LWIP_Init+0x228>)
 800ef1c:	781b      	ldrb	r3, [r3, #0]
 800ef1e:	0619      	lsls	r1, r3, #24
 800ef20:	4b40      	ldr	r3, [pc, #256]	; (800f024 <MX_LWIP_Init+0x228>)
 800ef22:	785b      	ldrb	r3, [r3, #1]
 800ef24:	041b      	lsls	r3, r3, #16
 800ef26:	4319      	orrs	r1, r3
 800ef28:	4b3e      	ldr	r3, [pc, #248]	; (800f024 <MX_LWIP_Init+0x228>)
 800ef2a:	789b      	ldrb	r3, [r3, #2]
 800ef2c:	021b      	lsls	r3, r3, #8
 800ef2e:	430b      	orrs	r3, r1
 800ef30:	493c      	ldr	r1, [pc, #240]	; (800f024 <MX_LWIP_Init+0x228>)
 800ef32:	78c9      	ldrb	r1, [r1, #3]
 800ef34:	430b      	orrs	r3, r1
 800ef36:	0a1b      	lsrs	r3, r3, #8
 800ef38:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 800ef3c:	431a      	orrs	r2, r3
 800ef3e:	4b39      	ldr	r3, [pc, #228]	; (800f024 <MX_LWIP_Init+0x228>)
 800ef40:	781b      	ldrb	r3, [r3, #0]
 800ef42:	0619      	lsls	r1, r3, #24
 800ef44:	4b37      	ldr	r3, [pc, #220]	; (800f024 <MX_LWIP_Init+0x228>)
 800ef46:	785b      	ldrb	r3, [r3, #1]
 800ef48:	041b      	lsls	r3, r3, #16
 800ef4a:	4319      	orrs	r1, r3
 800ef4c:	4b35      	ldr	r3, [pc, #212]	; (800f024 <MX_LWIP_Init+0x228>)
 800ef4e:	789b      	ldrb	r3, [r3, #2]
 800ef50:	021b      	lsls	r3, r3, #8
 800ef52:	430b      	orrs	r3, r1
 800ef54:	4933      	ldr	r1, [pc, #204]	; (800f024 <MX_LWIP_Init+0x228>)
 800ef56:	78c9      	ldrb	r1, [r1, #3]
 800ef58:	430b      	orrs	r3, r1
 800ef5a:	0e1b      	lsrs	r3, r3, #24
 800ef5c:	4313      	orrs	r3, r2
 800ef5e:	4a34      	ldr	r2, [pc, #208]	; (800f030 <MX_LWIP_Init+0x234>)
 800ef60:	6013      	str	r3, [r2, #0]
  IP4_ADDR(&gw, GATEWAY_ADDRESS[0], GATEWAY_ADDRESS[1], GATEWAY_ADDRESS[2], GATEWAY_ADDRESS[3]);
 800ef62:	4b31      	ldr	r3, [pc, #196]	; (800f028 <MX_LWIP_Init+0x22c>)
 800ef64:	781b      	ldrb	r3, [r3, #0]
 800ef66:	061a      	lsls	r2, r3, #24
 800ef68:	4b2f      	ldr	r3, [pc, #188]	; (800f028 <MX_LWIP_Init+0x22c>)
 800ef6a:	785b      	ldrb	r3, [r3, #1]
 800ef6c:	041b      	lsls	r3, r3, #16
 800ef6e:	431a      	orrs	r2, r3
 800ef70:	4b2d      	ldr	r3, [pc, #180]	; (800f028 <MX_LWIP_Init+0x22c>)
 800ef72:	789b      	ldrb	r3, [r3, #2]
 800ef74:	021b      	lsls	r3, r3, #8
 800ef76:	4313      	orrs	r3, r2
 800ef78:	4a2b      	ldr	r2, [pc, #172]	; (800f028 <MX_LWIP_Init+0x22c>)
 800ef7a:	78d2      	ldrb	r2, [r2, #3]
 800ef7c:	4313      	orrs	r3, r2
 800ef7e:	061a      	lsls	r2, r3, #24
 800ef80:	4b29      	ldr	r3, [pc, #164]	; (800f028 <MX_LWIP_Init+0x22c>)
 800ef82:	781b      	ldrb	r3, [r3, #0]
 800ef84:	0619      	lsls	r1, r3, #24
 800ef86:	4b28      	ldr	r3, [pc, #160]	; (800f028 <MX_LWIP_Init+0x22c>)
 800ef88:	785b      	ldrb	r3, [r3, #1]
 800ef8a:	041b      	lsls	r3, r3, #16
 800ef8c:	4319      	orrs	r1, r3
 800ef8e:	4b26      	ldr	r3, [pc, #152]	; (800f028 <MX_LWIP_Init+0x22c>)
 800ef90:	789b      	ldrb	r3, [r3, #2]
 800ef92:	021b      	lsls	r3, r3, #8
 800ef94:	430b      	orrs	r3, r1
 800ef96:	4924      	ldr	r1, [pc, #144]	; (800f028 <MX_LWIP_Init+0x22c>)
 800ef98:	78c9      	ldrb	r1, [r1, #3]
 800ef9a:	430b      	orrs	r3, r1
 800ef9c:	021b      	lsls	r3, r3, #8
 800ef9e:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 800efa2:	431a      	orrs	r2, r3
 800efa4:	4b20      	ldr	r3, [pc, #128]	; (800f028 <MX_LWIP_Init+0x22c>)
 800efa6:	781b      	ldrb	r3, [r3, #0]
 800efa8:	0619      	lsls	r1, r3, #24
 800efaa:	4b1f      	ldr	r3, [pc, #124]	; (800f028 <MX_LWIP_Init+0x22c>)
 800efac:	785b      	ldrb	r3, [r3, #1]
 800efae:	041b      	lsls	r3, r3, #16
 800efb0:	4319      	orrs	r1, r3
 800efb2:	4b1d      	ldr	r3, [pc, #116]	; (800f028 <MX_LWIP_Init+0x22c>)
 800efb4:	789b      	ldrb	r3, [r3, #2]
 800efb6:	021b      	lsls	r3, r3, #8
 800efb8:	430b      	orrs	r3, r1
 800efba:	491b      	ldr	r1, [pc, #108]	; (800f028 <MX_LWIP_Init+0x22c>)
 800efbc:	78c9      	ldrb	r1, [r1, #3]
 800efbe:	430b      	orrs	r3, r1
 800efc0:	0a1b      	lsrs	r3, r3, #8
 800efc2:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 800efc6:	431a      	orrs	r2, r3
 800efc8:	4b17      	ldr	r3, [pc, #92]	; (800f028 <MX_LWIP_Init+0x22c>)
 800efca:	781b      	ldrb	r3, [r3, #0]
 800efcc:	0619      	lsls	r1, r3, #24
 800efce:	4b16      	ldr	r3, [pc, #88]	; (800f028 <MX_LWIP_Init+0x22c>)
 800efd0:	785b      	ldrb	r3, [r3, #1]
 800efd2:	041b      	lsls	r3, r3, #16
 800efd4:	4319      	orrs	r1, r3
 800efd6:	4b14      	ldr	r3, [pc, #80]	; (800f028 <MX_LWIP_Init+0x22c>)
 800efd8:	789b      	ldrb	r3, [r3, #2]
 800efda:	021b      	lsls	r3, r3, #8
 800efdc:	430b      	orrs	r3, r1
 800efde:	4912      	ldr	r1, [pc, #72]	; (800f028 <MX_LWIP_Init+0x22c>)
 800efe0:	78c9      	ldrb	r1, [r1, #3]
 800efe2:	430b      	orrs	r3, r1
 800efe4:	0e1b      	lsrs	r3, r3, #24
 800efe6:	4313      	orrs	r3, r2
 800efe8:	4a12      	ldr	r2, [pc, #72]	; (800f034 <MX_LWIP_Init+0x238>)
 800efea:	6013      	str	r3, [r2, #0]

  /* add the network interface (IPv4/IPv6) without RTOS */
  netif_add(&gnetif, &ipaddr, &netmask, &gw, NULL, &ethernetif_init, &ethernet_input);
 800efec:	4b12      	ldr	r3, [pc, #72]	; (800f038 <MX_LWIP_Init+0x23c>)
 800efee:	9302      	str	r3, [sp, #8]
 800eff0:	4b12      	ldr	r3, [pc, #72]	; (800f03c <MX_LWIP_Init+0x240>)
 800eff2:	9301      	str	r3, [sp, #4]
 800eff4:	2300      	movs	r3, #0
 800eff6:	9300      	str	r3, [sp, #0]
 800eff8:	4b0e      	ldr	r3, [pc, #56]	; (800f034 <MX_LWIP_Init+0x238>)
 800effa:	4a0d      	ldr	r2, [pc, #52]	; (800f030 <MX_LWIP_Init+0x234>)
 800effc:	490b      	ldr	r1, [pc, #44]	; (800f02c <MX_LWIP_Init+0x230>)
 800effe:	4810      	ldr	r0, [pc, #64]	; (800f040 <MX_LWIP_Init+0x244>)
 800f000:	f001 f92c 	bl	801025c <netif_add>

  /* Registers the default network interface */
  netif_set_default(&gnetif);
 800f004:	480e      	ldr	r0, [pc, #56]	; (800f040 <MX_LWIP_Init+0x244>)
 800f006:	f001 fadb 	bl	80105c0 <netif_set_default>

  /* We must always bring the network interface up connection or not... */
  netif_set_up(&gnetif);
 800f00a:	480d      	ldr	r0, [pc, #52]	; (800f040 <MX_LWIP_Init+0x244>)
 800f00c:	f001 fae8 	bl	80105e0 <netif_set_up>

  /* Set the link callback function, this function is called on change of link status*/
  netif_set_link_callback(&gnetif, ethernet_link_status_updated);
 800f010:	490c      	ldr	r1, [pc, #48]	; (800f044 <MX_LWIP_Init+0x248>)
 800f012:	480b      	ldr	r0, [pc, #44]	; (800f040 <MX_LWIP_Init+0x244>)
 800f014:	f001 fbe6 	bl	80107e4 <netif_set_link_callback>
  /* Create the Ethernet link handler thread */

/* USER CODE BEGIN 3 */

/* USER CODE END 3 */
}
 800f018:	bf00      	nop
 800f01a:	46bd      	mov	sp, r7
 800f01c:	bd80      	pop	{r7, pc}
 800f01e:	bf00      	nop
 800f020:	200006e0 	.word	0x200006e0
 800f024:	200006e4 	.word	0x200006e4
 800f028:	200006e8 	.word	0x200006e8
 800f02c:	200006d4 	.word	0x200006d4
 800f030:	200006d8 	.word	0x200006d8
 800f034:	200006dc 	.word	0x200006dc
 800f038:	08019031 	.word	0x08019031
 800f03c:	0800f28d 	.word	0x0800f28d
 800f040:	200006a0 	.word	0x200006a0
 800f044:	0800f049 	.word	0x0800f049

0800f048 <ethernet_link_status_updated>:
  * @brief  Notify the User about the network interface config status
  * @param  netif: the network interface
  * @retval None
  */
static void ethernet_link_status_updated(struct netif *netif)
{
 800f048:	b480      	push	{r7}
 800f04a:	b083      	sub	sp, #12
 800f04c:	af00      	add	r7, sp, #0
 800f04e:	6078      	str	r0, [r7, #4]
  else /* netif is down */
  {
/* USER CODE BEGIN 6 */
/* USER CODE END 6 */
  }
}
 800f050:	bf00      	nop
 800f052:	370c      	adds	r7, #12
 800f054:	46bd      	mov	sp, r7
 800f056:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f05a:	4770      	bx	lr

0800f05c <low_level_init>:
 *
 * @param netif the already initialized lwip network interface structure
 *        for this ethernetif
 */
static void low_level_init(struct netif *netif)
{
 800f05c:	b580      	push	{r7, lr}
 800f05e:	b084      	sub	sp, #16
 800f060:	af00      	add	r7, sp, #0
 800f062:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_eth_init_status = HAL_OK;
 800f064:	2300      	movs	r3, #0
 800f066:	73fb      	strb	r3, [r7, #15]
  /* Start ETH HAL Init */

   uint8_t MACAddr[6] ;
  heth.Instance = ETH;
 800f068:	4b3f      	ldr	r3, [pc, #252]	; (800f168 <low_level_init+0x10c>)
 800f06a:	4a40      	ldr	r2, [pc, #256]	; (800f16c <low_level_init+0x110>)
 800f06c:	601a      	str	r2, [r3, #0]
  MACAddr[0] = 0x00;
 800f06e:	2300      	movs	r3, #0
 800f070:	723b      	strb	r3, [r7, #8]
  MACAddr[1] = 0x80;
 800f072:	2380      	movs	r3, #128	; 0x80
 800f074:	727b      	strb	r3, [r7, #9]
  MACAddr[2] = 0xE1;
 800f076:	23e1      	movs	r3, #225	; 0xe1
 800f078:	72bb      	strb	r3, [r7, #10]
  MACAddr[3] = 0x00;
 800f07a:	2300      	movs	r3, #0
 800f07c:	72fb      	strb	r3, [r7, #11]
  MACAddr[4] = 0x00;
 800f07e:	2300      	movs	r3, #0
 800f080:	733b      	strb	r3, [r7, #12]
  MACAddr[5] = 0x00;
 800f082:	2300      	movs	r3, #0
 800f084:	737b      	strb	r3, [r7, #13]
  heth.Init.MACAddr = &MACAddr[0];
 800f086:	4a38      	ldr	r2, [pc, #224]	; (800f168 <low_level_init+0x10c>)
 800f088:	f107 0308 	add.w	r3, r7, #8
 800f08c:	6053      	str	r3, [r2, #4]
  heth.Init.MediaInterface = HAL_ETH_RMII_MODE;
 800f08e:	4b36      	ldr	r3, [pc, #216]	; (800f168 <low_level_init+0x10c>)
 800f090:	2201      	movs	r2, #1
 800f092:	721a      	strb	r2, [r3, #8]
  heth.Init.TxDesc = DMATxDscrTab;
 800f094:	4b34      	ldr	r3, [pc, #208]	; (800f168 <low_level_init+0x10c>)
 800f096:	4a36      	ldr	r2, [pc, #216]	; (800f170 <low_level_init+0x114>)
 800f098:	60da      	str	r2, [r3, #12]
  heth.Init.RxDesc = DMARxDscrTab;
 800f09a:	4b33      	ldr	r3, [pc, #204]	; (800f168 <low_level_init+0x10c>)
 800f09c:	4a35      	ldr	r2, [pc, #212]	; (800f174 <low_level_init+0x118>)
 800f09e:	611a      	str	r2, [r3, #16]
  heth.Init.RxBuffLen = 1536;
 800f0a0:	4b31      	ldr	r3, [pc, #196]	; (800f168 <low_level_init+0x10c>)
 800f0a2:	f44f 62c0 	mov.w	r2, #1536	; 0x600
 800f0a6:	615a      	str	r2, [r3, #20]

  /* USER CODE BEGIN MACADDRESS */

  /* USER CODE END MACADDRESS */

  hal_eth_init_status = HAL_ETH_Init(&heth);
 800f0a8:	482f      	ldr	r0, [pc, #188]	; (800f168 <low_level_init+0x10c>)
 800f0aa:	f7f7 f8d9 	bl	8006260 <HAL_ETH_Init>
 800f0ae:	4603      	mov	r3, r0
 800f0b0:	73fb      	strb	r3, [r7, #15]

  memset(&TxConfig, 0 , sizeof(ETH_TxPacketConfig));
 800f0b2:	2238      	movs	r2, #56	; 0x38
 800f0b4:	2100      	movs	r1, #0
 800f0b6:	4830      	ldr	r0, [pc, #192]	; (800f178 <low_level_init+0x11c>)
 800f0b8:	f00a ff20 	bl	8019efc <memset>
  TxConfig.Attributes = ETH_TX_PACKETS_FEATURES_CSUM | ETH_TX_PACKETS_FEATURES_CRCPAD;
 800f0bc:	4b2e      	ldr	r3, [pc, #184]	; (800f178 <low_level_init+0x11c>)
 800f0be:	2221      	movs	r2, #33	; 0x21
 800f0c0:	601a      	str	r2, [r3, #0]
  TxConfig.ChecksumCtrl = ETH_CHECKSUM_IPHDR_PAYLOAD_INSERT_PHDR_CALC;
 800f0c2:	4b2d      	ldr	r3, [pc, #180]	; (800f178 <low_level_init+0x11c>)
 800f0c4:	f44f 3240 	mov.w	r2, #196608	; 0x30000
 800f0c8:	615a      	str	r2, [r3, #20]
  TxConfig.CRCPadCtrl = ETH_CRC_PAD_INSERT;
 800f0ca:	4b2b      	ldr	r3, [pc, #172]	; (800f178 <low_level_init+0x11c>)
 800f0cc:	2200      	movs	r2, #0
 800f0ce:	611a      	str	r2, [r3, #16]

  /* End ETH HAL Init */

  /* Initialize the RX POOL */
  LWIP_MEMPOOL_INIT(RX_POOL);
 800f0d0:	482a      	ldr	r0, [pc, #168]	; (800f17c <low_level_init+0x120>)
 800f0d2:	f000 ff8b 	bl	800ffec <memp_init_pool>

#if LWIP_ARP || LWIP_ETHERNET

  /* set MAC hardware address length */
  netif->hwaddr_len = ETH_HWADDR_LEN;
 800f0d6:	687b      	ldr	r3, [r7, #4]
 800f0d8:	2206      	movs	r2, #6
 800f0da:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c

  /* set MAC hardware address */
  netif->hwaddr[0] =  heth.Init.MACAddr[0];
 800f0de:	4b22      	ldr	r3, [pc, #136]	; (800f168 <low_level_init+0x10c>)
 800f0e0:	685b      	ldr	r3, [r3, #4]
 800f0e2:	781a      	ldrb	r2, [r3, #0]
 800f0e4:	687b      	ldr	r3, [r7, #4]
 800f0e6:	f883 2026 	strb.w	r2, [r3, #38]	; 0x26
  netif->hwaddr[1] =  heth.Init.MACAddr[1];
 800f0ea:	4b1f      	ldr	r3, [pc, #124]	; (800f168 <low_level_init+0x10c>)
 800f0ec:	685b      	ldr	r3, [r3, #4]
 800f0ee:	785a      	ldrb	r2, [r3, #1]
 800f0f0:	687b      	ldr	r3, [r7, #4]
 800f0f2:	f883 2027 	strb.w	r2, [r3, #39]	; 0x27
  netif->hwaddr[2] =  heth.Init.MACAddr[2];
 800f0f6:	4b1c      	ldr	r3, [pc, #112]	; (800f168 <low_level_init+0x10c>)
 800f0f8:	685b      	ldr	r3, [r3, #4]
 800f0fa:	789a      	ldrb	r2, [r3, #2]
 800f0fc:	687b      	ldr	r3, [r7, #4]
 800f0fe:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
  netif->hwaddr[3] =  heth.Init.MACAddr[3];
 800f102:	4b19      	ldr	r3, [pc, #100]	; (800f168 <low_level_init+0x10c>)
 800f104:	685b      	ldr	r3, [r3, #4]
 800f106:	78da      	ldrb	r2, [r3, #3]
 800f108:	687b      	ldr	r3, [r7, #4]
 800f10a:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29
  netif->hwaddr[4] =  heth.Init.MACAddr[4];
 800f10e:	4b16      	ldr	r3, [pc, #88]	; (800f168 <low_level_init+0x10c>)
 800f110:	685b      	ldr	r3, [r3, #4]
 800f112:	791a      	ldrb	r2, [r3, #4]
 800f114:	687b      	ldr	r3, [r7, #4]
 800f116:	f883 202a 	strb.w	r2, [r3, #42]	; 0x2a
  netif->hwaddr[5] =  heth.Init.MACAddr[5];
 800f11a:	4b13      	ldr	r3, [pc, #76]	; (800f168 <low_level_init+0x10c>)
 800f11c:	685b      	ldr	r3, [r3, #4]
 800f11e:	795a      	ldrb	r2, [r3, #5]
 800f120:	687b      	ldr	r3, [r7, #4]
 800f122:	f883 202b 	strb.w	r2, [r3, #43]	; 0x2b

  /* maximum transfer unit */
  netif->mtu = ETH_MAX_PAYLOAD;
 800f126:	687b      	ldr	r3, [r7, #4]
 800f128:	f240 52dc 	movw	r2, #1500	; 0x5dc
 800f12c:	849a      	strh	r2, [r3, #36]	; 0x24

  /* Accept broadcast address and ARP traffic */
  /* don't set NETIF_FLAG_ETHARP if this device is not an ethernet one */
  #if LWIP_ARP
    netif->flags |= NETIF_FLAG_BROADCAST | NETIF_FLAG_ETHARP;
 800f12e:	687b      	ldr	r3, [r7, #4]
 800f130:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 800f134:	f043 030a 	orr.w	r3, r3, #10
 800f138:	b2da      	uxtb	r2, r3
 800f13a:	687b      	ldr	r3, [r7, #4]
 800f13c:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d

/* USER CODE BEGIN PHY_PRE_CONFIG */

/* USER CODE END PHY_PRE_CONFIG */
  /* Set PHY IO functions */
  LAN8742_RegisterBusIO(&LAN8742, &LAN8742_IOCtx);
 800f140:	490f      	ldr	r1, [pc, #60]	; (800f180 <low_level_init+0x124>)
 800f142:	4810      	ldr	r0, [pc, #64]	; (800f184 <low_level_init+0x128>)
 800f144:	f7f4 fd75 	bl	8003c32 <LAN8742_RegisterBusIO>

  /* Initialize the LAN8742 ETH PHY */
  LAN8742_Init(&LAN8742);
 800f148:	480e      	ldr	r0, [pc, #56]	; (800f184 <low_level_init+0x128>)
 800f14a:	f7f4 fda4 	bl	8003c96 <LAN8742_Init>

  if (hal_eth_init_status == HAL_OK)
 800f14e:	7bfb      	ldrb	r3, [r7, #15]
 800f150:	2b00      	cmp	r3, #0
 800f152:	d103      	bne.n	800f15c <low_level_init+0x100>
  {
  /* Get link state */
  ethernet_link_check_state(netif);
 800f154:	6878      	ldr	r0, [r7, #4]
 800f156:	f000 fa05 	bl	800f564 <ethernet_link_check_state>
#endif /* LWIP_ARP || LWIP_ETHERNET */

/* USER CODE BEGIN LOW_LEVEL_INIT */

/* USER CODE END LOW_LEVEL_INIT */
}
 800f15a:	e001      	b.n	800f160 <low_level_init+0x104>
    Error_Handler();
 800f15c:	f7f4 f89e 	bl	800329c <Error_Handler>
}
 800f160:	bf00      	nop
 800f162:	3710      	adds	r7, #16
 800f164:	46bd      	mov	sp, r7
 800f166:	bd80      	pop	{r7, pc}
 800f168:	200006f4 	.word	0x200006f4
 800f16c:	40028000 	.word	0x40028000
 800f170:	30040060 	.word	0x30040060
 800f174:	30040000 	.word	0x30040000
 800f178:	200007a4 	.word	0x200007a4
 800f17c:	0801ef60 	.word	0x0801ef60
 800f180:	20000044 	.word	0x20000044
 800f184:	200007dc 	.word	0x200007dc

0800f188 <low_level_output>:
 *       to become available since the stack doesn't retry to send a packet
 *       dropped because of memory failure (except for the TCP timers).
 */

static err_t low_level_output(struct netif *netif, struct pbuf *p)
{
 800f188:	b580      	push	{r7, lr}
 800f18a:	b092      	sub	sp, #72	; 0x48
 800f18c:	af00      	add	r7, sp, #0
 800f18e:	6078      	str	r0, [r7, #4]
 800f190:	6039      	str	r1, [r7, #0]
  uint32_t i = 0U;
 800f192:	2300      	movs	r3, #0
 800f194:	647b      	str	r3, [r7, #68]	; 0x44
  struct pbuf *q = NULL;
 800f196:	2300      	movs	r3, #0
 800f198:	643b      	str	r3, [r7, #64]	; 0x40
  err_t errval = ERR_OK;
 800f19a:	2300      	movs	r3, #0
 800f19c:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
  ETH_BufferTypeDef Txbuffer[ETH_TX_DESC_CNT] = {0};
 800f1a0:	f107 030c 	add.w	r3, r7, #12
 800f1a4:	2230      	movs	r2, #48	; 0x30
 800f1a6:	2100      	movs	r1, #0
 800f1a8:	4618      	mov	r0, r3
 800f1aa:	f00a fea7 	bl	8019efc <memset>

  memset(Txbuffer, 0 , ETH_TX_DESC_CNT*sizeof(ETH_BufferTypeDef));
 800f1ae:	f107 030c 	add.w	r3, r7, #12
 800f1b2:	2230      	movs	r2, #48	; 0x30
 800f1b4:	2100      	movs	r1, #0
 800f1b6:	4618      	mov	r0, r3
 800f1b8:	f00a fea0 	bl	8019efc <memset>

  for(q = p; q != NULL; q = q->next)
 800f1bc:	683b      	ldr	r3, [r7, #0]
 800f1be:	643b      	str	r3, [r7, #64]	; 0x40
 800f1c0:	e045      	b.n	800f24e <low_level_output+0xc6>
  {
    if(i >= ETH_TX_DESC_CNT)
 800f1c2:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800f1c4:	2b03      	cmp	r3, #3
 800f1c6:	d902      	bls.n	800f1ce <low_level_output+0x46>
      return ERR_IF;
 800f1c8:	f06f 030b 	mvn.w	r3, #11
 800f1cc:	e055      	b.n	800f27a <low_level_output+0xf2>

    Txbuffer[i].buffer = q->payload;
 800f1ce:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800f1d0:	6859      	ldr	r1, [r3, #4]
 800f1d2:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800f1d4:	4613      	mov	r3, r2
 800f1d6:	005b      	lsls	r3, r3, #1
 800f1d8:	4413      	add	r3, r2
 800f1da:	009b      	lsls	r3, r3, #2
 800f1dc:	3348      	adds	r3, #72	; 0x48
 800f1de:	443b      	add	r3, r7
 800f1e0:	3b3c      	subs	r3, #60	; 0x3c
 800f1e2:	6019      	str	r1, [r3, #0]
    Txbuffer[i].len = q->len;
 800f1e4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800f1e6:	895b      	ldrh	r3, [r3, #10]
 800f1e8:	4619      	mov	r1, r3
 800f1ea:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800f1ec:	4613      	mov	r3, r2
 800f1ee:	005b      	lsls	r3, r3, #1
 800f1f0:	4413      	add	r3, r2
 800f1f2:	009b      	lsls	r3, r3, #2
 800f1f4:	3348      	adds	r3, #72	; 0x48
 800f1f6:	443b      	add	r3, r7
 800f1f8:	3b38      	subs	r3, #56	; 0x38
 800f1fa:	6019      	str	r1, [r3, #0]

    if(i>0)
 800f1fc:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800f1fe:	2b00      	cmp	r3, #0
 800f200:	d011      	beq.n	800f226 <low_level_output+0x9e>
    {
      Txbuffer[i-1].next = &Txbuffer[i];
 800f202:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800f204:	1e5a      	subs	r2, r3, #1
 800f206:	f107 000c 	add.w	r0, r7, #12
 800f20a:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800f20c:	460b      	mov	r3, r1
 800f20e:	005b      	lsls	r3, r3, #1
 800f210:	440b      	add	r3, r1
 800f212:	009b      	lsls	r3, r3, #2
 800f214:	18c1      	adds	r1, r0, r3
 800f216:	4613      	mov	r3, r2
 800f218:	005b      	lsls	r3, r3, #1
 800f21a:	4413      	add	r3, r2
 800f21c:	009b      	lsls	r3, r3, #2
 800f21e:	3348      	adds	r3, #72	; 0x48
 800f220:	443b      	add	r3, r7
 800f222:	3b34      	subs	r3, #52	; 0x34
 800f224:	6019      	str	r1, [r3, #0]
    }

    if(q->next == NULL)
 800f226:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800f228:	681b      	ldr	r3, [r3, #0]
 800f22a:	2b00      	cmp	r3, #0
 800f22c:	d109      	bne.n	800f242 <low_level_output+0xba>
    {
      Txbuffer[i].next = NULL;
 800f22e:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800f230:	4613      	mov	r3, r2
 800f232:	005b      	lsls	r3, r3, #1
 800f234:	4413      	add	r3, r2
 800f236:	009b      	lsls	r3, r3, #2
 800f238:	3348      	adds	r3, #72	; 0x48
 800f23a:	443b      	add	r3, r7
 800f23c:	3b34      	subs	r3, #52	; 0x34
 800f23e:	2200      	movs	r2, #0
 800f240:	601a      	str	r2, [r3, #0]
    }

    i++;
 800f242:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800f244:	3301      	adds	r3, #1
 800f246:	647b      	str	r3, [r7, #68]	; 0x44
  for(q = p; q != NULL; q = q->next)
 800f248:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800f24a:	681b      	ldr	r3, [r3, #0]
 800f24c:	643b      	str	r3, [r7, #64]	; 0x40
 800f24e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800f250:	2b00      	cmp	r3, #0
 800f252:	d1b6      	bne.n	800f1c2 <low_level_output+0x3a>
  }

  TxConfig.Length = p->tot_len;
 800f254:	683b      	ldr	r3, [r7, #0]
 800f256:	891b      	ldrh	r3, [r3, #8]
 800f258:	461a      	mov	r2, r3
 800f25a:	4b0a      	ldr	r3, [pc, #40]	; (800f284 <low_level_output+0xfc>)
 800f25c:	605a      	str	r2, [r3, #4]
  TxConfig.TxBuffer = Txbuffer;
 800f25e:	4a09      	ldr	r2, [pc, #36]	; (800f284 <low_level_output+0xfc>)
 800f260:	f107 030c 	add.w	r3, r7, #12
 800f264:	6093      	str	r3, [r2, #8]
  TxConfig.pData = p;
 800f266:	4a07      	ldr	r2, [pc, #28]	; (800f284 <low_level_output+0xfc>)
 800f268:	683b      	ldr	r3, [r7, #0]
 800f26a:	6353      	str	r3, [r2, #52]	; 0x34

  HAL_ETH_Transmit(&heth, &TxConfig, ETH_DMA_TRANSMIT_TIMEOUT);
 800f26c:	2214      	movs	r2, #20
 800f26e:	4905      	ldr	r1, [pc, #20]	; (800f284 <low_level_output+0xfc>)
 800f270:	4805      	ldr	r0, [pc, #20]	; (800f288 <low_level_output+0x100>)
 800f272:	f7f7 f98d 	bl	8006590 <HAL_ETH_Transmit>

  return errval;
 800f276:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
}
 800f27a:	4618      	mov	r0, r3
 800f27c:	3748      	adds	r7, #72	; 0x48
 800f27e:	46bd      	mov	sp, r7
 800f280:	bd80      	pop	{r7, pc}
 800f282:	bf00      	nop
 800f284:	200007a4 	.word	0x200007a4
 800f288:	200006f4 	.word	0x200006f4

0800f28c <ethernetif_init>:
 * @return ERR_OK if the loopif is initialized
 *         ERR_MEM if private data couldn't be allocated
 *         any other err_t on error
 */
err_t ethernetif_init(struct netif *netif)
{
 800f28c:	b580      	push	{r7, lr}
 800f28e:	b082      	sub	sp, #8
 800f290:	af00      	add	r7, sp, #0
 800f292:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("netif != NULL", (netif != NULL));
 800f294:	687b      	ldr	r3, [r7, #4]
 800f296:	2b00      	cmp	r3, #0
 800f298:	d106      	bne.n	800f2a8 <ethernetif_init+0x1c>
 800f29a:	4b0e      	ldr	r3, [pc, #56]	; (800f2d4 <ethernetif_init+0x48>)
 800f29c:	f240 1285 	movw	r2, #389	; 0x185
 800f2a0:	490d      	ldr	r1, [pc, #52]	; (800f2d8 <ethernetif_init+0x4c>)
 800f2a2:	480e      	ldr	r0, [pc, #56]	; (800f2dc <ethernetif_init+0x50>)
 800f2a4:	f00a fcd4 	bl	8019c50 <iprintf>
   * The last argument should be replaced with your link speed, in units
   * of bits per second.
   */
  // MIB2_INIT_NETIF(netif, snmp_ifType_ethernet_csmacd, LINK_SPEED_OF_YOUR_NETIF_IN_BPS);

  netif->name[0] = IFNAME0;
 800f2a8:	687b      	ldr	r3, [r7, #4]
 800f2aa:	2273      	movs	r2, #115	; 0x73
 800f2ac:	f883 202e 	strb.w	r2, [r3, #46]	; 0x2e
  netif->name[1] = IFNAME1;
 800f2b0:	687b      	ldr	r3, [r7, #4]
 800f2b2:	2274      	movs	r2, #116	; 0x74
 800f2b4:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f
   * is available...) */

#if LWIP_IPV4
#if LWIP_ARP || LWIP_ETHERNET
#if LWIP_ARP
  netif->output = etharp_output;
 800f2b8:	687b      	ldr	r3, [r7, #4]
 800f2ba:	4a09      	ldr	r2, [pc, #36]	; (800f2e0 <ethernetif_init+0x54>)
 800f2bc:	615a      	str	r2, [r3, #20]

#if LWIP_IPV6
  netif->output_ip6 = ethip6_output;
#endif /* LWIP_IPV6 */

  netif->linkoutput = low_level_output;
 800f2be:	687b      	ldr	r3, [r7, #4]
 800f2c0:	4a08      	ldr	r2, [pc, #32]	; (800f2e4 <ethernetif_init+0x58>)
 800f2c2:	619a      	str	r2, [r3, #24]

  /* initialize the hardware */
  low_level_init(netif);
 800f2c4:	6878      	ldr	r0, [r7, #4]
 800f2c6:	f7ff fec9 	bl	800f05c <low_level_init>

  return ERR_OK;
 800f2ca:	2300      	movs	r3, #0
}
 800f2cc:	4618      	mov	r0, r3
 800f2ce:	3708      	adds	r7, #8
 800f2d0:	46bd      	mov	sp, r7
 800f2d2:	bd80      	pop	{r7, pc}
 800f2d4:	0801c548 	.word	0x0801c548
 800f2d8:	0801c564 	.word	0x0801c564
 800f2dc:	0801c574 	.word	0x0801c574
 800f2e0:	0801749d 	.word	0x0801749d
 800f2e4:	0800f189 	.word	0x0800f189

0800f2e8 <pbuf_free_custom>:
  * @brief  Custom Rx pbuf free callback
  * @param  pbuf: pbuf to be freed
  * @retval None
  */
void pbuf_free_custom(struct pbuf *p)
{
 800f2e8:	b580      	push	{r7, lr}
 800f2ea:	b084      	sub	sp, #16
 800f2ec:	af00      	add	r7, sp, #0
 800f2ee:	6078      	str	r0, [r7, #4]
  struct pbuf_custom* custom_pbuf = (struct pbuf_custom*)p;
 800f2f0:	687b      	ldr	r3, [r7, #4]
 800f2f2:	60fb      	str	r3, [r7, #12]
  LWIP_MEMPOOL_FREE(RX_POOL, custom_pbuf);
 800f2f4:	68f9      	ldr	r1, [r7, #12]
 800f2f6:	4807      	ldr	r0, [pc, #28]	; (800f314 <pbuf_free_custom+0x2c>)
 800f2f8:	f000 ff5a 	bl	80101b0 <memp_free_pool>

  /* If the Rx Buffer Pool was exhausted, signal the ethernetif_input task to
   * call HAL_ETH_GetRxDataBuffer to rebuild the Rx descriptors. */

  if (RxAllocStatus == RX_ALLOC_ERROR)
 800f2fc:	4b06      	ldr	r3, [pc, #24]	; (800f318 <pbuf_free_custom+0x30>)
 800f2fe:	781b      	ldrb	r3, [r3, #0]
 800f300:	2b01      	cmp	r3, #1
 800f302:	d102      	bne.n	800f30a <pbuf_free_custom+0x22>
  {
    RxAllocStatus = RX_ALLOC_OK;
 800f304:	4b04      	ldr	r3, [pc, #16]	; (800f318 <pbuf_free_custom+0x30>)
 800f306:	2200      	movs	r2, #0
 800f308:	701a      	strb	r2, [r3, #0]
  }
}
 800f30a:	bf00      	nop
 800f30c:	3710      	adds	r7, #16
 800f30e:	46bd      	mov	sp, r7
 800f310:	bd80      	pop	{r7, pc}
 800f312:	bf00      	nop
 800f314:	0801ef60 	.word	0x0801ef60
 800f318:	200006f0 	.word	0x200006f0

0800f31c <sys_now>:
*         when LWIP_TIMERS == 1 and NO_SYS == 1
* @param  None
* @retval Current Time value
*/
u32_t sys_now(void)
{
 800f31c:	b580      	push	{r7, lr}
 800f31e:	af00      	add	r7, sp, #0
  return HAL_GetTick();
 800f320:	f7f4 fe6e 	bl	8004000 <HAL_GetTick>
 800f324:	4603      	mov	r3, r0
}
 800f326:	4618      	mov	r0, r3
 800f328:	bd80      	pop	{r7, pc}
	...

0800f32c <HAL_ETH_MspInit>:
  * @param  ethHandle: ETH handle
  * @retval None
  */

void HAL_ETH_MspInit(ETH_HandleTypeDef* ethHandle)
{
 800f32c:	b580      	push	{r7, lr}
 800f32e:	b08e      	sub	sp, #56	; 0x38
 800f330:	af00      	add	r7, sp, #0
 800f332:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800f334:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800f338:	2200      	movs	r2, #0
 800f33a:	601a      	str	r2, [r3, #0]
 800f33c:	605a      	str	r2, [r3, #4]
 800f33e:	609a      	str	r2, [r3, #8]
 800f340:	60da      	str	r2, [r3, #12]
 800f342:	611a      	str	r2, [r3, #16]
  if(ethHandle->Instance==ETH)
 800f344:	687b      	ldr	r3, [r7, #4]
 800f346:	681b      	ldr	r3, [r3, #0]
 800f348:	4a59      	ldr	r2, [pc, #356]	; (800f4b0 <HAL_ETH_MspInit+0x184>)
 800f34a:	4293      	cmp	r3, r2
 800f34c:	f040 80ab 	bne.w	800f4a6 <HAL_ETH_MspInit+0x17a>
  {
  /* USER CODE BEGIN ETH_MspInit 0 */

  /* USER CODE END ETH_MspInit 0 */
    /* Enable Peripheral clock */
    __HAL_RCC_ETH1MAC_CLK_ENABLE();
 800f350:	4b58      	ldr	r3, [pc, #352]	; (800f4b4 <HAL_ETH_MspInit+0x188>)
 800f352:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 800f356:	4a57      	ldr	r2, [pc, #348]	; (800f4b4 <HAL_ETH_MspInit+0x188>)
 800f358:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800f35c:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 800f360:	4b54      	ldr	r3, [pc, #336]	; (800f4b4 <HAL_ETH_MspInit+0x188>)
 800f362:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 800f366:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800f36a:	623b      	str	r3, [r7, #32]
 800f36c:	6a3b      	ldr	r3, [r7, #32]
    __HAL_RCC_ETH1TX_CLK_ENABLE();
 800f36e:	4b51      	ldr	r3, [pc, #324]	; (800f4b4 <HAL_ETH_MspInit+0x188>)
 800f370:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 800f374:	4a4f      	ldr	r2, [pc, #316]	; (800f4b4 <HAL_ETH_MspInit+0x188>)
 800f376:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800f37a:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 800f37e:	4b4d      	ldr	r3, [pc, #308]	; (800f4b4 <HAL_ETH_MspInit+0x188>)
 800f380:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 800f384:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800f388:	61fb      	str	r3, [r7, #28]
 800f38a:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_ETH1RX_CLK_ENABLE();
 800f38c:	4b49      	ldr	r3, [pc, #292]	; (800f4b4 <HAL_ETH_MspInit+0x188>)
 800f38e:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 800f392:	4a48      	ldr	r2, [pc, #288]	; (800f4b4 <HAL_ETH_MspInit+0x188>)
 800f394:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800f398:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 800f39c:	4b45      	ldr	r3, [pc, #276]	; (800f4b4 <HAL_ETH_MspInit+0x188>)
 800f39e:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 800f3a2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800f3a6:	61bb      	str	r3, [r7, #24]
 800f3a8:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 800f3aa:	4b42      	ldr	r3, [pc, #264]	; (800f4b4 <HAL_ETH_MspInit+0x188>)
 800f3ac:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800f3b0:	4a40      	ldr	r2, [pc, #256]	; (800f4b4 <HAL_ETH_MspInit+0x188>)
 800f3b2:	f043 0304 	orr.w	r3, r3, #4
 800f3b6:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800f3ba:	4b3e      	ldr	r3, [pc, #248]	; (800f4b4 <HAL_ETH_MspInit+0x188>)
 800f3bc:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800f3c0:	f003 0304 	and.w	r3, r3, #4
 800f3c4:	617b      	str	r3, [r7, #20]
 800f3c6:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800f3c8:	4b3a      	ldr	r3, [pc, #232]	; (800f4b4 <HAL_ETH_MspInit+0x188>)
 800f3ca:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800f3ce:	4a39      	ldr	r2, [pc, #228]	; (800f4b4 <HAL_ETH_MspInit+0x188>)
 800f3d0:	f043 0301 	orr.w	r3, r3, #1
 800f3d4:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800f3d8:	4b36      	ldr	r3, [pc, #216]	; (800f4b4 <HAL_ETH_MspInit+0x188>)
 800f3da:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800f3de:	f003 0301 	and.w	r3, r3, #1
 800f3e2:	613b      	str	r3, [r7, #16]
 800f3e4:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800f3e6:	4b33      	ldr	r3, [pc, #204]	; (800f4b4 <HAL_ETH_MspInit+0x188>)
 800f3e8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800f3ec:	4a31      	ldr	r2, [pc, #196]	; (800f4b4 <HAL_ETH_MspInit+0x188>)
 800f3ee:	f043 0302 	orr.w	r3, r3, #2
 800f3f2:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800f3f6:	4b2f      	ldr	r3, [pc, #188]	; (800f4b4 <HAL_ETH_MspInit+0x188>)
 800f3f8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800f3fc:	f003 0302 	and.w	r3, r3, #2
 800f400:	60fb      	str	r3, [r7, #12]
 800f402:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOG_CLK_ENABLE();
 800f404:	4b2b      	ldr	r3, [pc, #172]	; (800f4b4 <HAL_ETH_MspInit+0x188>)
 800f406:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800f40a:	4a2a      	ldr	r2, [pc, #168]	; (800f4b4 <HAL_ETH_MspInit+0x188>)
 800f40c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800f410:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800f414:	4b27      	ldr	r3, [pc, #156]	; (800f4b4 <HAL_ETH_MspInit+0x188>)
 800f416:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800f41a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800f41e:	60bb      	str	r3, [r7, #8]
 800f420:	68bb      	ldr	r3, [r7, #8]
    PC5     ------> ETH_RXD1
    PB13     ------> ETH_TXD1
    PG11     ------> ETH_TX_EN
    PG13     ------> ETH_TXD0
    */
    GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_4|GPIO_PIN_5;
 800f422:	2332      	movs	r3, #50	; 0x32
 800f424:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800f426:	2302      	movs	r3, #2
 800f428:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800f42a:	2300      	movs	r3, #0
 800f42c:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800f42e:	2300      	movs	r3, #0
 800f430:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 800f432:	230b      	movs	r3, #11
 800f434:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800f436:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800f43a:	4619      	mov	r1, r3
 800f43c:	481e      	ldr	r0, [pc, #120]	; (800f4b8 <HAL_ETH_MspInit+0x18c>)
 800f43e:	f7f8 fa0f 	bl	8007860 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_7;
 800f442:	2386      	movs	r3, #134	; 0x86
 800f444:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800f446:	2302      	movs	r3, #2
 800f448:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800f44a:	2300      	movs	r3, #0
 800f44c:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800f44e:	2300      	movs	r3, #0
 800f450:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 800f452:	230b      	movs	r3, #11
 800f454:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800f456:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800f45a:	4619      	mov	r1, r3
 800f45c:	4817      	ldr	r0, [pc, #92]	; (800f4bc <HAL_ETH_MspInit+0x190>)
 800f45e:	f7f8 f9ff 	bl	8007860 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_13;
 800f462:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800f466:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800f468:	2302      	movs	r3, #2
 800f46a:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800f46c:	2300      	movs	r3, #0
 800f46e:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800f470:	2300      	movs	r3, #0
 800f472:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 800f474:	230b      	movs	r3, #11
 800f476:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800f478:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800f47c:	4619      	mov	r1, r3
 800f47e:	4810      	ldr	r0, [pc, #64]	; (800f4c0 <HAL_ETH_MspInit+0x194>)
 800f480:	f7f8 f9ee 	bl	8007860 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_13;
 800f484:	f44f 5320 	mov.w	r3, #10240	; 0x2800
 800f488:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800f48a:	2302      	movs	r3, #2
 800f48c:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800f48e:	2300      	movs	r3, #0
 800f490:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800f492:	2300      	movs	r3, #0
 800f494:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 800f496:	230b      	movs	r3, #11
 800f498:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 800f49a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800f49e:	4619      	mov	r1, r3
 800f4a0:	4808      	ldr	r0, [pc, #32]	; (800f4c4 <HAL_ETH_MspInit+0x198>)
 800f4a2:	f7f8 f9dd 	bl	8007860 <HAL_GPIO_Init>

  /* USER CODE BEGIN ETH_MspInit 1 */

  /* USER CODE END ETH_MspInit 1 */
  }
}
 800f4a6:	bf00      	nop
 800f4a8:	3738      	adds	r7, #56	; 0x38
 800f4aa:	46bd      	mov	sp, r7
 800f4ac:	bd80      	pop	{r7, pc}
 800f4ae:	bf00      	nop
 800f4b0:	40028000 	.word	0x40028000
 800f4b4:	58024400 	.word	0x58024400
 800f4b8:	58020800 	.word	0x58020800
 800f4bc:	58020000 	.word	0x58020000
 800f4c0:	58020400 	.word	0x58020400
 800f4c4:	58021800 	.word	0x58021800

0800f4c8 <ETH_PHY_IO_Init>:
  * @brief  Initializes the MDIO interface GPIO and clocks.
  * @param  None
  * @retval 0 if OK, -1 if ERROR
  */
int32_t ETH_PHY_IO_Init(void)
{
 800f4c8:	b580      	push	{r7, lr}
 800f4ca:	af00      	add	r7, sp, #0
  /* We assume that MDIO GPIO configuration is already done
     in the ETH_MspInit() else it should be done here
  */

  /* Configure the MDIO Clock */
  HAL_ETH_SetMDIOClockRange(&heth);
 800f4cc:	4802      	ldr	r0, [pc, #8]	; (800f4d8 <ETH_PHY_IO_Init+0x10>)
 800f4ce:	f7f7 fbfb 	bl	8006cc8 <HAL_ETH_SetMDIOClockRange>

  return 0;
 800f4d2:	2300      	movs	r3, #0
}
 800f4d4:	4618      	mov	r0, r3
 800f4d6:	bd80      	pop	{r7, pc}
 800f4d8:	200006f4 	.word	0x200006f4

0800f4dc <ETH_PHY_IO_DeInit>:
  * @brief  De-Initializes the MDIO interface .
  * @param  None
  * @retval 0 if OK, -1 if ERROR
  */
int32_t ETH_PHY_IO_DeInit (void)
{
 800f4dc:	b480      	push	{r7}
 800f4de:	af00      	add	r7, sp, #0
  return 0;
 800f4e0:	2300      	movs	r3, #0
}
 800f4e2:	4618      	mov	r0, r3
 800f4e4:	46bd      	mov	sp, r7
 800f4e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f4ea:	4770      	bx	lr

0800f4ec <ETH_PHY_IO_ReadReg>:
  * @param  RegAddr: PHY register address
  * @param  pRegVal: pointer to hold the register value
  * @retval 0 if OK -1 if Error
  */
int32_t ETH_PHY_IO_ReadReg(uint32_t DevAddr, uint32_t RegAddr, uint32_t *pRegVal)
{
 800f4ec:	b580      	push	{r7, lr}
 800f4ee:	b084      	sub	sp, #16
 800f4f0:	af00      	add	r7, sp, #0
 800f4f2:	60f8      	str	r0, [r7, #12]
 800f4f4:	60b9      	str	r1, [r7, #8]
 800f4f6:	607a      	str	r2, [r7, #4]
  if(HAL_ETH_ReadPHYRegister(&heth, DevAddr, RegAddr, pRegVal) != HAL_OK)
 800f4f8:	687b      	ldr	r3, [r7, #4]
 800f4fa:	68ba      	ldr	r2, [r7, #8]
 800f4fc:	68f9      	ldr	r1, [r7, #12]
 800f4fe:	4807      	ldr	r0, [pc, #28]	; (800f51c <ETH_PHY_IO_ReadReg+0x30>)
 800f500:	f7f7 f94b 	bl	800679a <HAL_ETH_ReadPHYRegister>
 800f504:	4603      	mov	r3, r0
 800f506:	2b00      	cmp	r3, #0
 800f508:	d002      	beq.n	800f510 <ETH_PHY_IO_ReadReg+0x24>
  {
    return -1;
 800f50a:	f04f 33ff 	mov.w	r3, #4294967295
 800f50e:	e000      	b.n	800f512 <ETH_PHY_IO_ReadReg+0x26>
  }

  return 0;
 800f510:	2300      	movs	r3, #0
}
 800f512:	4618      	mov	r0, r3
 800f514:	3710      	adds	r7, #16
 800f516:	46bd      	mov	sp, r7
 800f518:	bd80      	pop	{r7, pc}
 800f51a:	bf00      	nop
 800f51c:	200006f4 	.word	0x200006f4

0800f520 <ETH_PHY_IO_WriteReg>:
  * @param  RegAddr: PHY register address
  * @param  RegVal: Value to be written
  * @retval 0 if OK -1 if Error
  */
int32_t ETH_PHY_IO_WriteReg(uint32_t DevAddr, uint32_t RegAddr, uint32_t RegVal)
{
 800f520:	b580      	push	{r7, lr}
 800f522:	b084      	sub	sp, #16
 800f524:	af00      	add	r7, sp, #0
 800f526:	60f8      	str	r0, [r7, #12]
 800f528:	60b9      	str	r1, [r7, #8]
 800f52a:	607a      	str	r2, [r7, #4]
  if(HAL_ETH_WritePHYRegister(&heth, DevAddr, RegAddr, RegVal) != HAL_OK)
 800f52c:	687b      	ldr	r3, [r7, #4]
 800f52e:	68ba      	ldr	r2, [r7, #8]
 800f530:	68f9      	ldr	r1, [r7, #12]
 800f532:	4807      	ldr	r0, [pc, #28]	; (800f550 <ETH_PHY_IO_WriteReg+0x30>)
 800f534:	f7f7 f986 	bl	8006844 <HAL_ETH_WritePHYRegister>
 800f538:	4603      	mov	r3, r0
 800f53a:	2b00      	cmp	r3, #0
 800f53c:	d002      	beq.n	800f544 <ETH_PHY_IO_WriteReg+0x24>
  {
    return -1;
 800f53e:	f04f 33ff 	mov.w	r3, #4294967295
 800f542:	e000      	b.n	800f546 <ETH_PHY_IO_WriteReg+0x26>
  }

  return 0;
 800f544:	2300      	movs	r3, #0
}
 800f546:	4618      	mov	r0, r3
 800f548:	3710      	adds	r7, #16
 800f54a:	46bd      	mov	sp, r7
 800f54c:	bd80      	pop	{r7, pc}
 800f54e:	bf00      	nop
 800f550:	200006f4 	.word	0x200006f4

0800f554 <ETH_PHY_IO_GetTick>:
/**
  * @brief  Get the time in millisecons used for internal PHY driver process.
  * @retval Time value
  */
int32_t ETH_PHY_IO_GetTick(void)
{
 800f554:	b580      	push	{r7, lr}
 800f556:	af00      	add	r7, sp, #0
  return HAL_GetTick();
 800f558:	f7f4 fd52 	bl	8004000 <HAL_GetTick>
 800f55c:	4603      	mov	r3, r0
}
 800f55e:	4618      	mov	r0, r3
 800f560:	bd80      	pop	{r7, pc}
	...

0800f564 <ethernet_link_check_state>:
/**
  * @brief  Check the ETH link state then update ETH driver and netif link accordingly.
  * @retval None
  */
void ethernet_link_check_state(struct netif *netif)
{
 800f564:	b580      	push	{r7, lr}
 800f566:	b0a0      	sub	sp, #128	; 0x80
 800f568:	af00      	add	r7, sp, #0
 800f56a:	6078      	str	r0, [r7, #4]
  ETH_MACConfigTypeDef MACConf = {0};
 800f56c:	f107 030c 	add.w	r3, r7, #12
 800f570:	2264      	movs	r2, #100	; 0x64
 800f572:	2100      	movs	r1, #0
 800f574:	4618      	mov	r0, r3
 800f576:	f00a fcc1 	bl	8019efc <memset>
  int32_t PHYLinkState = 0;
 800f57a:	2300      	movs	r3, #0
 800f57c:	673b      	str	r3, [r7, #112]	; 0x70
  uint32_t linkchanged = 0U, speed = 0U, duplex = 0U;
 800f57e:	2300      	movs	r3, #0
 800f580:	67fb      	str	r3, [r7, #124]	; 0x7c
 800f582:	2300      	movs	r3, #0
 800f584:	67bb      	str	r3, [r7, #120]	; 0x78
 800f586:	2300      	movs	r3, #0
 800f588:	677b      	str	r3, [r7, #116]	; 0x74

  PHYLinkState = LAN8742_GetLinkState(&LAN8742);
 800f58a:	483a      	ldr	r0, [pc, #232]	; (800f674 <ethernet_link_check_state+0x110>)
 800f58c:	f7f4 fc2b 	bl	8003de6 <LAN8742_GetLinkState>
 800f590:	6738      	str	r0, [r7, #112]	; 0x70

  if(netif_is_link_up(netif) && (PHYLinkState <= LAN8742_STATUS_LINK_DOWN))
 800f592:	687b      	ldr	r3, [r7, #4]
 800f594:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 800f598:	089b      	lsrs	r3, r3, #2
 800f59a:	f003 0301 	and.w	r3, r3, #1
 800f59e:	b2db      	uxtb	r3, r3
 800f5a0:	2b00      	cmp	r3, #0
 800f5a2:	d00c      	beq.n	800f5be <ethernet_link_check_state+0x5a>
 800f5a4:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800f5a6:	2b01      	cmp	r3, #1
 800f5a8:	dc09      	bgt.n	800f5be <ethernet_link_check_state+0x5a>
  {
    HAL_ETH_Stop(&heth);
 800f5aa:	4833      	ldr	r0, [pc, #204]	; (800f678 <ethernet_link_check_state+0x114>)
 800f5ac:	f7f6 ffa0 	bl	80064f0 <HAL_ETH_Stop>
    netif_set_down(netif);
 800f5b0:	6878      	ldr	r0, [r7, #4]
 800f5b2:	f001 f881 	bl	80106b8 <netif_set_down>
    netif_set_link_down(netif);
 800f5b6:	6878      	ldr	r0, [r7, #4]
 800f5b8:	f001 f8e4 	bl	8010784 <netif_set_link_down>
      netif_set_up(netif);
      netif_set_link_up(netif);
    }
  }

}
 800f5bc:	e055      	b.n	800f66a <ethernet_link_check_state+0x106>
  else if(!netif_is_link_up(netif) && (PHYLinkState > LAN8742_STATUS_LINK_DOWN))
 800f5be:	687b      	ldr	r3, [r7, #4]
 800f5c0:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 800f5c4:	f003 0304 	and.w	r3, r3, #4
 800f5c8:	2b00      	cmp	r3, #0
 800f5ca:	d14e      	bne.n	800f66a <ethernet_link_check_state+0x106>
 800f5cc:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800f5ce:	2b01      	cmp	r3, #1
 800f5d0:	dd4b      	ble.n	800f66a <ethernet_link_check_state+0x106>
    switch (PHYLinkState)
 800f5d2:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800f5d4:	3b02      	subs	r3, #2
 800f5d6:	2b03      	cmp	r3, #3
 800f5d8:	d82a      	bhi.n	800f630 <ethernet_link_check_state+0xcc>
 800f5da:	a201      	add	r2, pc, #4	; (adr r2, 800f5e0 <ethernet_link_check_state+0x7c>)
 800f5dc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800f5e0:	0800f5f1 	.word	0x0800f5f1
 800f5e4:	0800f603 	.word	0x0800f603
 800f5e8:	0800f613 	.word	0x0800f613
 800f5ec:	0800f623 	.word	0x0800f623
      duplex = ETH_FULLDUPLEX_MODE;
 800f5f0:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800f5f4:	677b      	str	r3, [r7, #116]	; 0x74
      speed = ETH_SPEED_100M;
 800f5f6:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 800f5fa:	67bb      	str	r3, [r7, #120]	; 0x78
      linkchanged = 1;
 800f5fc:	2301      	movs	r3, #1
 800f5fe:	67fb      	str	r3, [r7, #124]	; 0x7c
      break;
 800f600:	e017      	b.n	800f632 <ethernet_link_check_state+0xce>
      duplex = ETH_HALFDUPLEX_MODE;
 800f602:	2300      	movs	r3, #0
 800f604:	677b      	str	r3, [r7, #116]	; 0x74
      speed = ETH_SPEED_100M;
 800f606:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 800f60a:	67bb      	str	r3, [r7, #120]	; 0x78
      linkchanged = 1;
 800f60c:	2301      	movs	r3, #1
 800f60e:	67fb      	str	r3, [r7, #124]	; 0x7c
      break;
 800f610:	e00f      	b.n	800f632 <ethernet_link_check_state+0xce>
      duplex = ETH_FULLDUPLEX_MODE;
 800f612:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800f616:	677b      	str	r3, [r7, #116]	; 0x74
      speed = ETH_SPEED_10M;
 800f618:	2300      	movs	r3, #0
 800f61a:	67bb      	str	r3, [r7, #120]	; 0x78
      linkchanged = 1;
 800f61c:	2301      	movs	r3, #1
 800f61e:	67fb      	str	r3, [r7, #124]	; 0x7c
      break;
 800f620:	e007      	b.n	800f632 <ethernet_link_check_state+0xce>
      duplex = ETH_HALFDUPLEX_MODE;
 800f622:	2300      	movs	r3, #0
 800f624:	677b      	str	r3, [r7, #116]	; 0x74
      speed = ETH_SPEED_10M;
 800f626:	2300      	movs	r3, #0
 800f628:	67bb      	str	r3, [r7, #120]	; 0x78
      linkchanged = 1;
 800f62a:	2301      	movs	r3, #1
 800f62c:	67fb      	str	r3, [r7, #124]	; 0x7c
      break;
 800f62e:	e000      	b.n	800f632 <ethernet_link_check_state+0xce>
      break;
 800f630:	bf00      	nop
    if(linkchanged)
 800f632:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800f634:	2b00      	cmp	r3, #0
 800f636:	d018      	beq.n	800f66a <ethernet_link_check_state+0x106>
      HAL_ETH_GetMACConfig(&heth, &MACConf);
 800f638:	f107 030c 	add.w	r3, r7, #12
 800f63c:	4619      	mov	r1, r3
 800f63e:	480e      	ldr	r0, [pc, #56]	; (800f678 <ethernet_link_check_state+0x114>)
 800f640:	f7f7 f954 	bl	80068ec <HAL_ETH_GetMACConfig>
      MACConf.DuplexMode = duplex;
 800f644:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800f646:	627b      	str	r3, [r7, #36]	; 0x24
      MACConf.Speed = speed;
 800f648:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800f64a:	623b      	str	r3, [r7, #32]
      HAL_ETH_SetMACConfig(&heth, &MACConf);
 800f64c:	f107 030c 	add.w	r3, r7, #12
 800f650:	4619      	mov	r1, r3
 800f652:	4809      	ldr	r0, [pc, #36]	; (800f678 <ethernet_link_check_state+0x114>)
 800f654:	f7f7 fb1e 	bl	8006c94 <HAL_ETH_SetMACConfig>
      HAL_ETH_Start(&heth);
 800f658:	4807      	ldr	r0, [pc, #28]	; (800f678 <ethernet_link_check_state+0x114>)
 800f65a:	f7f6 fee7 	bl	800642c <HAL_ETH_Start>
      netif_set_up(netif);
 800f65e:	6878      	ldr	r0, [r7, #4]
 800f660:	f000 ffbe 	bl	80105e0 <netif_set_up>
      netif_set_link_up(netif);
 800f664:	6878      	ldr	r0, [r7, #4]
 800f666:	f001 f859 	bl	801071c <netif_set_link_up>
}
 800f66a:	bf00      	nop
 800f66c:	3780      	adds	r7, #128	; 0x80
 800f66e:	46bd      	mov	sp, r7
 800f670:	bd80      	pop	{r7, pc}
 800f672:	bf00      	nop
 800f674:	200007dc 	.word	0x200007dc
 800f678:	200006f4 	.word	0x200006f4

0800f67c <HAL_ETH_RxAllocateCallback>:

void HAL_ETH_RxAllocateCallback(uint8_t **buff)
{
 800f67c:	b580      	push	{r7, lr}
 800f67e:	b086      	sub	sp, #24
 800f680:	af02      	add	r7, sp, #8
 800f682:	6078      	str	r0, [r7, #4]
/* USER CODE BEGIN HAL ETH RxAllocateCallback */
  struct pbuf_custom *p = LWIP_MEMPOOL_ALLOC(RX_POOL);
 800f684:	4812      	ldr	r0, [pc, #72]	; (800f6d0 <HAL_ETH_RxAllocateCallback+0x54>)
 800f686:	f000 fd25 	bl	80100d4 <memp_malloc_pool>
 800f68a:	60f8      	str	r0, [r7, #12]
  if (p)
 800f68c:	68fb      	ldr	r3, [r7, #12]
 800f68e:	2b00      	cmp	r3, #0
 800f690:	d014      	beq.n	800f6bc <HAL_ETH_RxAllocateCallback+0x40>
  {
    /* Get the buff from the struct pbuf address. */
    *buff = (uint8_t *)p + offsetof(RxBuff_t, buff);
 800f692:	68fb      	ldr	r3, [r7, #12]
 800f694:	f103 0220 	add.w	r2, r3, #32
 800f698:	687b      	ldr	r3, [r7, #4]
 800f69a:	601a      	str	r2, [r3, #0]
    p->custom_free_function = pbuf_free_custom;
 800f69c:	68fb      	ldr	r3, [r7, #12]
 800f69e:	4a0d      	ldr	r2, [pc, #52]	; (800f6d4 <HAL_ETH_RxAllocateCallback+0x58>)
 800f6a0:	611a      	str	r2, [r3, #16]
    /* Initialize the struct pbuf.
    * This must be performed whenever a buffer's allocated because it may be
    * changed by lwIP or the app, e.g., pbuf_free decrements ref. */
    pbuf_alloced_custom(PBUF_RAW, 0, PBUF_REF, p, *buff, ETH_RX_BUFFER_SIZE);
 800f6a2:	687b      	ldr	r3, [r7, #4]
 800f6a4:	681b      	ldr	r3, [r3, #0]
 800f6a6:	f44f 62c0 	mov.w	r2, #1536	; 0x600
 800f6aa:	9201      	str	r2, [sp, #4]
 800f6ac:	9300      	str	r3, [sp, #0]
 800f6ae:	68fb      	ldr	r3, [r7, #12]
 800f6b0:	2241      	movs	r2, #65	; 0x41
 800f6b2:	2100      	movs	r1, #0
 800f6b4:	2000      	movs	r0, #0
 800f6b6:	f001 fa3d 	bl	8010b34 <pbuf_alloced_custom>
  {
    RxAllocStatus = RX_ALLOC_ERROR;
    *buff = NULL;
  }
/* USER CODE END HAL ETH RxAllocateCallback */
}
 800f6ba:	e005      	b.n	800f6c8 <HAL_ETH_RxAllocateCallback+0x4c>
    RxAllocStatus = RX_ALLOC_ERROR;
 800f6bc:	4b06      	ldr	r3, [pc, #24]	; (800f6d8 <HAL_ETH_RxAllocateCallback+0x5c>)
 800f6be:	2201      	movs	r2, #1
 800f6c0:	701a      	strb	r2, [r3, #0]
    *buff = NULL;
 800f6c2:	687b      	ldr	r3, [r7, #4]
 800f6c4:	2200      	movs	r2, #0
 800f6c6:	601a      	str	r2, [r3, #0]
}
 800f6c8:	bf00      	nop
 800f6ca:	3710      	adds	r7, #16
 800f6cc:	46bd      	mov	sp, r7
 800f6ce:	bd80      	pop	{r7, pc}
 800f6d0:	0801ef60 	.word	0x0801ef60
 800f6d4:	0800f2e9 	.word	0x0800f2e9
 800f6d8:	200006f0 	.word	0x200006f0

0800f6dc <lwip_htons>:
 * @param n u16_t in host byte order
 * @return n in network byte order
 */
u16_t
lwip_htons(u16_t n)
{
 800f6dc:	b480      	push	{r7}
 800f6de:	b083      	sub	sp, #12
 800f6e0:	af00      	add	r7, sp, #0
 800f6e2:	4603      	mov	r3, r0
 800f6e4:	80fb      	strh	r3, [r7, #6]
  return PP_HTONS(n);
 800f6e6:	88fb      	ldrh	r3, [r7, #6]
 800f6e8:	021b      	lsls	r3, r3, #8
 800f6ea:	b21a      	sxth	r2, r3
 800f6ec:	88fb      	ldrh	r3, [r7, #6]
 800f6ee:	0a1b      	lsrs	r3, r3, #8
 800f6f0:	b29b      	uxth	r3, r3
 800f6f2:	b21b      	sxth	r3, r3
 800f6f4:	4313      	orrs	r3, r2
 800f6f6:	b21b      	sxth	r3, r3
 800f6f8:	b29b      	uxth	r3, r3
}
 800f6fa:	4618      	mov	r0, r3
 800f6fc:	370c      	adds	r7, #12
 800f6fe:	46bd      	mov	sp, r7
 800f700:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f704:	4770      	bx	lr

0800f706 <lwip_htonl>:
 * @param n u32_t in host byte order
 * @return n in network byte order
 */
u32_t
lwip_htonl(u32_t n)
{
 800f706:	b480      	push	{r7}
 800f708:	b083      	sub	sp, #12
 800f70a:	af00      	add	r7, sp, #0
 800f70c:	6078      	str	r0, [r7, #4]
  return PP_HTONL(n);
 800f70e:	687b      	ldr	r3, [r7, #4]
 800f710:	061a      	lsls	r2, r3, #24
 800f712:	687b      	ldr	r3, [r7, #4]
 800f714:	021b      	lsls	r3, r3, #8
 800f716:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 800f71a:	431a      	orrs	r2, r3
 800f71c:	687b      	ldr	r3, [r7, #4]
 800f71e:	0a1b      	lsrs	r3, r3, #8
 800f720:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 800f724:	431a      	orrs	r2, r3
 800f726:	687b      	ldr	r3, [r7, #4]
 800f728:	0e1b      	lsrs	r3, r3, #24
 800f72a:	4313      	orrs	r3, r2
}
 800f72c:	4618      	mov	r0, r3
 800f72e:	370c      	adds	r7, #12
 800f730:	46bd      	mov	sp, r7
 800f732:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f736:	4770      	bx	lr

0800f738 <lwip_standard_chksum>:
 * @param len length of data to be summed
 * @return host order (!) lwip checksum (non-inverted Internet sum)
 */
u16_t
lwip_standard_chksum(const void *dataptr, int len)
{
 800f738:	b480      	push	{r7}
 800f73a:	b089      	sub	sp, #36	; 0x24
 800f73c:	af00      	add	r7, sp, #0
 800f73e:	6078      	str	r0, [r7, #4]
 800f740:	6039      	str	r1, [r7, #0]
  const u8_t *pb = (const u8_t *)dataptr;
 800f742:	687b      	ldr	r3, [r7, #4]
 800f744:	61fb      	str	r3, [r7, #28]
  const u16_t *ps;
  u16_t t = 0;
 800f746:	2300      	movs	r3, #0
 800f748:	81fb      	strh	r3, [r7, #14]
  u32_t sum = 0;
 800f74a:	2300      	movs	r3, #0
 800f74c:	617b      	str	r3, [r7, #20]
  int odd = ((mem_ptr_t)pb & 1);
 800f74e:	69fb      	ldr	r3, [r7, #28]
 800f750:	f003 0301 	and.w	r3, r3, #1
 800f754:	613b      	str	r3, [r7, #16]

  /* Get aligned to u16_t */
  if (odd && len > 0) {
 800f756:	693b      	ldr	r3, [r7, #16]
 800f758:	2b00      	cmp	r3, #0
 800f75a:	d00d      	beq.n	800f778 <lwip_standard_chksum+0x40>
 800f75c:	683b      	ldr	r3, [r7, #0]
 800f75e:	2b00      	cmp	r3, #0
 800f760:	dd0a      	ble.n	800f778 <lwip_standard_chksum+0x40>
    ((u8_t *)&t)[1] = *pb++;
 800f762:	69fa      	ldr	r2, [r7, #28]
 800f764:	1c53      	adds	r3, r2, #1
 800f766:	61fb      	str	r3, [r7, #28]
 800f768:	f107 030e 	add.w	r3, r7, #14
 800f76c:	3301      	adds	r3, #1
 800f76e:	7812      	ldrb	r2, [r2, #0]
 800f770:	701a      	strb	r2, [r3, #0]
    len--;
 800f772:	683b      	ldr	r3, [r7, #0]
 800f774:	3b01      	subs	r3, #1
 800f776:	603b      	str	r3, [r7, #0]
  }

  /* Add the bulk of the data */
  ps = (const u16_t *)(const void *)pb;
 800f778:	69fb      	ldr	r3, [r7, #28]
 800f77a:	61bb      	str	r3, [r7, #24]
  while (len > 1) {
 800f77c:	e00a      	b.n	800f794 <lwip_standard_chksum+0x5c>
    sum += *ps++;
 800f77e:	69bb      	ldr	r3, [r7, #24]
 800f780:	1c9a      	adds	r2, r3, #2
 800f782:	61ba      	str	r2, [r7, #24]
 800f784:	881b      	ldrh	r3, [r3, #0]
 800f786:	461a      	mov	r2, r3
 800f788:	697b      	ldr	r3, [r7, #20]
 800f78a:	4413      	add	r3, r2
 800f78c:	617b      	str	r3, [r7, #20]
    len -= 2;
 800f78e:	683b      	ldr	r3, [r7, #0]
 800f790:	3b02      	subs	r3, #2
 800f792:	603b      	str	r3, [r7, #0]
  while (len > 1) {
 800f794:	683b      	ldr	r3, [r7, #0]
 800f796:	2b01      	cmp	r3, #1
 800f798:	dcf1      	bgt.n	800f77e <lwip_standard_chksum+0x46>
  }

  /* Consume left-over byte, if any */
  if (len > 0) {
 800f79a:	683b      	ldr	r3, [r7, #0]
 800f79c:	2b00      	cmp	r3, #0
 800f79e:	dd04      	ble.n	800f7aa <lwip_standard_chksum+0x72>
    ((u8_t *)&t)[0] = *(const u8_t *)ps;
 800f7a0:	f107 030e 	add.w	r3, r7, #14
 800f7a4:	69ba      	ldr	r2, [r7, #24]
 800f7a6:	7812      	ldrb	r2, [r2, #0]
 800f7a8:	701a      	strb	r2, [r3, #0]
  }

  /* Add end bytes */
  sum += t;
 800f7aa:	89fb      	ldrh	r3, [r7, #14]
 800f7ac:	461a      	mov	r2, r3
 800f7ae:	697b      	ldr	r3, [r7, #20]
 800f7b0:	4413      	add	r3, r2
 800f7b2:	617b      	str	r3, [r7, #20]

  /* Fold 32-bit sum to 16 bits
     calling this twice is probably faster than if statements... */
  sum = FOLD_U32T(sum);
 800f7b4:	697b      	ldr	r3, [r7, #20]
 800f7b6:	0c1a      	lsrs	r2, r3, #16
 800f7b8:	697b      	ldr	r3, [r7, #20]
 800f7ba:	b29b      	uxth	r3, r3
 800f7bc:	4413      	add	r3, r2
 800f7be:	617b      	str	r3, [r7, #20]
  sum = FOLD_U32T(sum);
 800f7c0:	697b      	ldr	r3, [r7, #20]
 800f7c2:	0c1a      	lsrs	r2, r3, #16
 800f7c4:	697b      	ldr	r3, [r7, #20]
 800f7c6:	b29b      	uxth	r3, r3
 800f7c8:	4413      	add	r3, r2
 800f7ca:	617b      	str	r3, [r7, #20]

  /* Swap if alignment was odd */
  if (odd) {
 800f7cc:	693b      	ldr	r3, [r7, #16]
 800f7ce:	2b00      	cmp	r3, #0
 800f7d0:	d007      	beq.n	800f7e2 <lwip_standard_chksum+0xaa>
    sum = SWAP_BYTES_IN_WORD(sum);
 800f7d2:	697b      	ldr	r3, [r7, #20]
 800f7d4:	021b      	lsls	r3, r3, #8
 800f7d6:	b29a      	uxth	r2, r3
 800f7d8:	697b      	ldr	r3, [r7, #20]
 800f7da:	0a1b      	lsrs	r3, r3, #8
 800f7dc:	b2db      	uxtb	r3, r3
 800f7de:	4313      	orrs	r3, r2
 800f7e0:	617b      	str	r3, [r7, #20]
  }

  return (u16_t)sum;
 800f7e2:	697b      	ldr	r3, [r7, #20]
 800f7e4:	b29b      	uxth	r3, r3
}
 800f7e6:	4618      	mov	r0, r3
 800f7e8:	3724      	adds	r7, #36	; 0x24
 800f7ea:	46bd      	mov	sp, r7
 800f7ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f7f0:	4770      	bx	lr

0800f7f2 <inet_chksum>:
 * @return checksum (as u16_t) to be saved directly in the protocol header
 */

u16_t
inet_chksum(const void *dataptr, u16_t len)
{
 800f7f2:	b580      	push	{r7, lr}
 800f7f4:	b082      	sub	sp, #8
 800f7f6:	af00      	add	r7, sp, #0
 800f7f8:	6078      	str	r0, [r7, #4]
 800f7fa:	460b      	mov	r3, r1
 800f7fc:	807b      	strh	r3, [r7, #2]
  return (u16_t)~(unsigned int)LWIP_CHKSUM(dataptr, len);
 800f7fe:	887b      	ldrh	r3, [r7, #2]
 800f800:	4619      	mov	r1, r3
 800f802:	6878      	ldr	r0, [r7, #4]
 800f804:	f7ff ff98 	bl	800f738 <lwip_standard_chksum>
 800f808:	4603      	mov	r3, r0
 800f80a:	43db      	mvns	r3, r3
 800f80c:	b29b      	uxth	r3, r3
}
 800f80e:	4618      	mov	r0, r3
 800f810:	3708      	adds	r7, #8
 800f812:	46bd      	mov	sp, r7
 800f814:	bd80      	pop	{r7, pc}

0800f816 <inet_chksum_pbuf>:
 * @param p pbuf chain over that the checksum should be calculated
 * @return checksum (as u16_t) to be saved directly in the protocol header
 */
u16_t
inet_chksum_pbuf(struct pbuf *p)
{
 800f816:	b580      	push	{r7, lr}
 800f818:	b086      	sub	sp, #24
 800f81a:	af00      	add	r7, sp, #0
 800f81c:	6078      	str	r0, [r7, #4]
  u32_t acc;
  struct pbuf *q;
  int swapped = 0;
 800f81e:	2300      	movs	r3, #0
 800f820:	60fb      	str	r3, [r7, #12]

  acc = 0;
 800f822:	2300      	movs	r3, #0
 800f824:	617b      	str	r3, [r7, #20]
  for (q = p; q != NULL; q = q->next) {
 800f826:	687b      	ldr	r3, [r7, #4]
 800f828:	613b      	str	r3, [r7, #16]
 800f82a:	e02b      	b.n	800f884 <inet_chksum_pbuf+0x6e>
    acc += LWIP_CHKSUM(q->payload, q->len);
 800f82c:	693b      	ldr	r3, [r7, #16]
 800f82e:	685a      	ldr	r2, [r3, #4]
 800f830:	693b      	ldr	r3, [r7, #16]
 800f832:	895b      	ldrh	r3, [r3, #10]
 800f834:	4619      	mov	r1, r3
 800f836:	4610      	mov	r0, r2
 800f838:	f7ff ff7e 	bl	800f738 <lwip_standard_chksum>
 800f83c:	4603      	mov	r3, r0
 800f83e:	461a      	mov	r2, r3
 800f840:	697b      	ldr	r3, [r7, #20]
 800f842:	4413      	add	r3, r2
 800f844:	617b      	str	r3, [r7, #20]
    acc = FOLD_U32T(acc);
 800f846:	697b      	ldr	r3, [r7, #20]
 800f848:	0c1a      	lsrs	r2, r3, #16
 800f84a:	697b      	ldr	r3, [r7, #20]
 800f84c:	b29b      	uxth	r3, r3
 800f84e:	4413      	add	r3, r2
 800f850:	617b      	str	r3, [r7, #20]
    if (q->len % 2 != 0) {
 800f852:	693b      	ldr	r3, [r7, #16]
 800f854:	895b      	ldrh	r3, [r3, #10]
 800f856:	f003 0301 	and.w	r3, r3, #1
 800f85a:	b29b      	uxth	r3, r3
 800f85c:	2b00      	cmp	r3, #0
 800f85e:	d00e      	beq.n	800f87e <inet_chksum_pbuf+0x68>
      swapped = !swapped;
 800f860:	68fb      	ldr	r3, [r7, #12]
 800f862:	2b00      	cmp	r3, #0
 800f864:	bf0c      	ite	eq
 800f866:	2301      	moveq	r3, #1
 800f868:	2300      	movne	r3, #0
 800f86a:	b2db      	uxtb	r3, r3
 800f86c:	60fb      	str	r3, [r7, #12]
      acc = SWAP_BYTES_IN_WORD(acc);
 800f86e:	697b      	ldr	r3, [r7, #20]
 800f870:	021b      	lsls	r3, r3, #8
 800f872:	b29a      	uxth	r2, r3
 800f874:	697b      	ldr	r3, [r7, #20]
 800f876:	0a1b      	lsrs	r3, r3, #8
 800f878:	b2db      	uxtb	r3, r3
 800f87a:	4313      	orrs	r3, r2
 800f87c:	617b      	str	r3, [r7, #20]
  for (q = p; q != NULL; q = q->next) {
 800f87e:	693b      	ldr	r3, [r7, #16]
 800f880:	681b      	ldr	r3, [r3, #0]
 800f882:	613b      	str	r3, [r7, #16]
 800f884:	693b      	ldr	r3, [r7, #16]
 800f886:	2b00      	cmp	r3, #0
 800f888:	d1d0      	bne.n	800f82c <inet_chksum_pbuf+0x16>
    }
  }

  if (swapped) {
 800f88a:	68fb      	ldr	r3, [r7, #12]
 800f88c:	2b00      	cmp	r3, #0
 800f88e:	d007      	beq.n	800f8a0 <inet_chksum_pbuf+0x8a>
    acc = SWAP_BYTES_IN_WORD(acc);
 800f890:	697b      	ldr	r3, [r7, #20]
 800f892:	021b      	lsls	r3, r3, #8
 800f894:	b29a      	uxth	r2, r3
 800f896:	697b      	ldr	r3, [r7, #20]
 800f898:	0a1b      	lsrs	r3, r3, #8
 800f89a:	b2db      	uxtb	r3, r3
 800f89c:	4313      	orrs	r3, r2
 800f89e:	617b      	str	r3, [r7, #20]
  }
  return (u16_t)~(acc & 0xffffUL);
 800f8a0:	697b      	ldr	r3, [r7, #20]
 800f8a2:	b29b      	uxth	r3, r3
 800f8a4:	43db      	mvns	r3, r3
 800f8a6:	b29b      	uxth	r3, r3
}
 800f8a8:	4618      	mov	r0, r3
 800f8aa:	3718      	adds	r7, #24
 800f8ac:	46bd      	mov	sp, r7
 800f8ae:	bd80      	pop	{r7, pc}

0800f8b0 <lwip_init>:
 * Initialize all modules.
 * Use this in NO_SYS mode. Use tcpip_init() otherwise.
 */
void
lwip_init(void)
{
 800f8b0:	b580      	push	{r7, lr}
 800f8b2:	b082      	sub	sp, #8
 800f8b4:	af00      	add	r7, sp, #0
#ifndef LWIP_SKIP_CONST_CHECK
  int a = 0;
 800f8b6:	2300      	movs	r3, #0
 800f8b8:	607b      	str	r3, [r7, #4]
  /* Modules initialization */
  stats_init();
#if !NO_SYS
  sys_init();
#endif /* !NO_SYS */
  mem_init();
 800f8ba:	f000 f8d3 	bl	800fa64 <mem_init>
  memp_init();
 800f8be:	f000 fbc5 	bl	801004c <memp_init>
  pbuf_init();
  netif_init();
 800f8c2:	f000 fcc3 	bl	801024c <netif_init>
#endif /* LWIP_IPV4 */
#if LWIP_RAW
  raw_init();
#endif /* LWIP_RAW */
#if LWIP_UDP
  udp_init();
 800f8c6:	f006 ffe3 	bl	8016890 <udp_init>
#endif /* LWIP_UDP */
#if LWIP_TCP
  tcp_init();
 800f8ca:	f001 fd79 	bl	80113c0 <tcp_init>
#if PPP_SUPPORT
  ppp_init();
#endif

#if LWIP_TIMERS
  sys_timeouts_init();
 800f8ce:	f006 ff97 	bl	8016800 <sys_timeouts_init>
#endif /* LWIP_TIMERS */
}
 800f8d2:	bf00      	nop
 800f8d4:	3708      	adds	r7, #8
 800f8d6:	46bd      	mov	sp, r7
 800f8d8:	bd80      	pop	{r7, pc}
	...

0800f8dc <ptr_to_mem>:
#define mem_overflow_check_element(mem)
#endif /* MEM_OVERFLOW_CHECK */

static struct mem *
ptr_to_mem(mem_size_t ptr)
{
 800f8dc:	b480      	push	{r7}
 800f8de:	b083      	sub	sp, #12
 800f8e0:	af00      	add	r7, sp, #0
 800f8e2:	6078      	str	r0, [r7, #4]
  return (struct mem *)(void *)&ram[ptr];
 800f8e4:	4b04      	ldr	r3, [pc, #16]	; (800f8f8 <ptr_to_mem+0x1c>)
 800f8e6:	681a      	ldr	r2, [r3, #0]
 800f8e8:	687b      	ldr	r3, [r7, #4]
 800f8ea:	4413      	add	r3, r2
}
 800f8ec:	4618      	mov	r0, r3
 800f8ee:	370c      	adds	r7, #12
 800f8f0:	46bd      	mov	sp, r7
 800f8f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f8f6:	4770      	bx	lr
 800f8f8:	20000814 	.word	0x20000814

0800f8fc <mem_to_ptr>:

static mem_size_t
mem_to_ptr(void *mem)
{
 800f8fc:	b480      	push	{r7}
 800f8fe:	b083      	sub	sp, #12
 800f900:	af00      	add	r7, sp, #0
 800f902:	6078      	str	r0, [r7, #4]
  return (mem_size_t)((u8_t *)mem - ram);
 800f904:	4b04      	ldr	r3, [pc, #16]	; (800f918 <mem_to_ptr+0x1c>)
 800f906:	681b      	ldr	r3, [r3, #0]
 800f908:	687a      	ldr	r2, [r7, #4]
 800f90a:	1ad3      	subs	r3, r2, r3
}
 800f90c:	4618      	mov	r0, r3
 800f90e:	370c      	adds	r7, #12
 800f910:	46bd      	mov	sp, r7
 800f912:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f916:	4770      	bx	lr
 800f918:	20000814 	.word	0x20000814

0800f91c <plug_holes>:
 * This assumes access to the heap is protected by the calling function
 * already.
 */
static void
plug_holes(struct mem *mem)
{
 800f91c:	b590      	push	{r4, r7, lr}
 800f91e:	b085      	sub	sp, #20
 800f920:	af00      	add	r7, sp, #0
 800f922:	6078      	str	r0, [r7, #4]
  struct mem *nmem;
  struct mem *pmem;

  LWIP_ASSERT("plug_holes: mem >= ram", (u8_t *)mem >= ram);
 800f924:	4b45      	ldr	r3, [pc, #276]	; (800fa3c <plug_holes+0x120>)
 800f926:	681b      	ldr	r3, [r3, #0]
 800f928:	687a      	ldr	r2, [r7, #4]
 800f92a:	429a      	cmp	r2, r3
 800f92c:	d206      	bcs.n	800f93c <plug_holes+0x20>
 800f92e:	4b44      	ldr	r3, [pc, #272]	; (800fa40 <plug_holes+0x124>)
 800f930:	f240 12df 	movw	r2, #479	; 0x1df
 800f934:	4943      	ldr	r1, [pc, #268]	; (800fa44 <plug_holes+0x128>)
 800f936:	4844      	ldr	r0, [pc, #272]	; (800fa48 <plug_holes+0x12c>)
 800f938:	f00a f98a 	bl	8019c50 <iprintf>
  LWIP_ASSERT("plug_holes: mem < ram_end", (u8_t *)mem < (u8_t *)ram_end);
 800f93c:	4b43      	ldr	r3, [pc, #268]	; (800fa4c <plug_holes+0x130>)
 800f93e:	681b      	ldr	r3, [r3, #0]
 800f940:	687a      	ldr	r2, [r7, #4]
 800f942:	429a      	cmp	r2, r3
 800f944:	d306      	bcc.n	800f954 <plug_holes+0x38>
 800f946:	4b3e      	ldr	r3, [pc, #248]	; (800fa40 <plug_holes+0x124>)
 800f948:	f44f 72f0 	mov.w	r2, #480	; 0x1e0
 800f94c:	4940      	ldr	r1, [pc, #256]	; (800fa50 <plug_holes+0x134>)
 800f94e:	483e      	ldr	r0, [pc, #248]	; (800fa48 <plug_holes+0x12c>)
 800f950:	f00a f97e 	bl	8019c50 <iprintf>
  LWIP_ASSERT("plug_holes: mem->used == 0", mem->used == 0);
 800f954:	687b      	ldr	r3, [r7, #4]
 800f956:	7a1b      	ldrb	r3, [r3, #8]
 800f958:	2b00      	cmp	r3, #0
 800f95a:	d006      	beq.n	800f96a <plug_holes+0x4e>
 800f95c:	4b38      	ldr	r3, [pc, #224]	; (800fa40 <plug_holes+0x124>)
 800f95e:	f240 12e1 	movw	r2, #481	; 0x1e1
 800f962:	493c      	ldr	r1, [pc, #240]	; (800fa54 <plug_holes+0x138>)
 800f964:	4838      	ldr	r0, [pc, #224]	; (800fa48 <plug_holes+0x12c>)
 800f966:	f00a f973 	bl	8019c50 <iprintf>

  /* plug hole forward */
  LWIP_ASSERT("plug_holes: mem->next <= MEM_SIZE_ALIGNED", mem->next <= MEM_SIZE_ALIGNED);
 800f96a:	687b      	ldr	r3, [r7, #4]
 800f96c:	681b      	ldr	r3, [r3, #0]
 800f96e:	4a3a      	ldr	r2, [pc, #232]	; (800fa58 <plug_holes+0x13c>)
 800f970:	4293      	cmp	r3, r2
 800f972:	d906      	bls.n	800f982 <plug_holes+0x66>
 800f974:	4b32      	ldr	r3, [pc, #200]	; (800fa40 <plug_holes+0x124>)
 800f976:	f44f 72f2 	mov.w	r2, #484	; 0x1e4
 800f97a:	4938      	ldr	r1, [pc, #224]	; (800fa5c <plug_holes+0x140>)
 800f97c:	4832      	ldr	r0, [pc, #200]	; (800fa48 <plug_holes+0x12c>)
 800f97e:	f00a f967 	bl	8019c50 <iprintf>

  nmem = ptr_to_mem(mem->next);
 800f982:	687b      	ldr	r3, [r7, #4]
 800f984:	681b      	ldr	r3, [r3, #0]
 800f986:	4618      	mov	r0, r3
 800f988:	f7ff ffa8 	bl	800f8dc <ptr_to_mem>
 800f98c:	60f8      	str	r0, [r7, #12]
  if (mem != nmem && nmem->used == 0 && (u8_t *)nmem != (u8_t *)ram_end) {
 800f98e:	687a      	ldr	r2, [r7, #4]
 800f990:	68fb      	ldr	r3, [r7, #12]
 800f992:	429a      	cmp	r2, r3
 800f994:	d024      	beq.n	800f9e0 <plug_holes+0xc4>
 800f996:	68fb      	ldr	r3, [r7, #12]
 800f998:	7a1b      	ldrb	r3, [r3, #8]
 800f99a:	2b00      	cmp	r3, #0
 800f99c:	d120      	bne.n	800f9e0 <plug_holes+0xc4>
 800f99e:	4b2b      	ldr	r3, [pc, #172]	; (800fa4c <plug_holes+0x130>)
 800f9a0:	681b      	ldr	r3, [r3, #0]
 800f9a2:	68fa      	ldr	r2, [r7, #12]
 800f9a4:	429a      	cmp	r2, r3
 800f9a6:	d01b      	beq.n	800f9e0 <plug_holes+0xc4>
    /* if mem->next is unused and not end of ram, combine mem and mem->next */
    if (lfree == nmem) {
 800f9a8:	4b2d      	ldr	r3, [pc, #180]	; (800fa60 <plug_holes+0x144>)
 800f9aa:	681b      	ldr	r3, [r3, #0]
 800f9ac:	68fa      	ldr	r2, [r7, #12]
 800f9ae:	429a      	cmp	r2, r3
 800f9b0:	d102      	bne.n	800f9b8 <plug_holes+0x9c>
      lfree = mem;
 800f9b2:	4a2b      	ldr	r2, [pc, #172]	; (800fa60 <plug_holes+0x144>)
 800f9b4:	687b      	ldr	r3, [r7, #4]
 800f9b6:	6013      	str	r3, [r2, #0]
    }
    mem->next = nmem->next;
 800f9b8:	68fb      	ldr	r3, [r7, #12]
 800f9ba:	681a      	ldr	r2, [r3, #0]
 800f9bc:	687b      	ldr	r3, [r7, #4]
 800f9be:	601a      	str	r2, [r3, #0]
    if (nmem->next != MEM_SIZE_ALIGNED) {
 800f9c0:	68fb      	ldr	r3, [r7, #12]
 800f9c2:	681b      	ldr	r3, [r3, #0]
 800f9c4:	4a24      	ldr	r2, [pc, #144]	; (800fa58 <plug_holes+0x13c>)
 800f9c6:	4293      	cmp	r3, r2
 800f9c8:	d00a      	beq.n	800f9e0 <plug_holes+0xc4>
      ptr_to_mem(nmem->next)->prev = mem_to_ptr(mem);
 800f9ca:	68fb      	ldr	r3, [r7, #12]
 800f9cc:	681b      	ldr	r3, [r3, #0]
 800f9ce:	4618      	mov	r0, r3
 800f9d0:	f7ff ff84 	bl	800f8dc <ptr_to_mem>
 800f9d4:	4604      	mov	r4, r0
 800f9d6:	6878      	ldr	r0, [r7, #4]
 800f9d8:	f7ff ff90 	bl	800f8fc <mem_to_ptr>
 800f9dc:	4603      	mov	r3, r0
 800f9de:	6063      	str	r3, [r4, #4]
    }
  }

  /* plug hole backward */
  pmem = ptr_to_mem(mem->prev);
 800f9e0:	687b      	ldr	r3, [r7, #4]
 800f9e2:	685b      	ldr	r3, [r3, #4]
 800f9e4:	4618      	mov	r0, r3
 800f9e6:	f7ff ff79 	bl	800f8dc <ptr_to_mem>
 800f9ea:	60b8      	str	r0, [r7, #8]
  if (pmem != mem && pmem->used == 0) {
 800f9ec:	68ba      	ldr	r2, [r7, #8]
 800f9ee:	687b      	ldr	r3, [r7, #4]
 800f9f0:	429a      	cmp	r2, r3
 800f9f2:	d01f      	beq.n	800fa34 <plug_holes+0x118>
 800f9f4:	68bb      	ldr	r3, [r7, #8]
 800f9f6:	7a1b      	ldrb	r3, [r3, #8]
 800f9f8:	2b00      	cmp	r3, #0
 800f9fa:	d11b      	bne.n	800fa34 <plug_holes+0x118>
    /* if mem->prev is unused, combine mem and mem->prev */
    if (lfree == mem) {
 800f9fc:	4b18      	ldr	r3, [pc, #96]	; (800fa60 <plug_holes+0x144>)
 800f9fe:	681b      	ldr	r3, [r3, #0]
 800fa00:	687a      	ldr	r2, [r7, #4]
 800fa02:	429a      	cmp	r2, r3
 800fa04:	d102      	bne.n	800fa0c <plug_holes+0xf0>
      lfree = pmem;
 800fa06:	4a16      	ldr	r2, [pc, #88]	; (800fa60 <plug_holes+0x144>)
 800fa08:	68bb      	ldr	r3, [r7, #8]
 800fa0a:	6013      	str	r3, [r2, #0]
    }
    pmem->next = mem->next;
 800fa0c:	687b      	ldr	r3, [r7, #4]
 800fa0e:	681a      	ldr	r2, [r3, #0]
 800fa10:	68bb      	ldr	r3, [r7, #8]
 800fa12:	601a      	str	r2, [r3, #0]
    if (mem->next != MEM_SIZE_ALIGNED) {
 800fa14:	687b      	ldr	r3, [r7, #4]
 800fa16:	681b      	ldr	r3, [r3, #0]
 800fa18:	4a0f      	ldr	r2, [pc, #60]	; (800fa58 <plug_holes+0x13c>)
 800fa1a:	4293      	cmp	r3, r2
 800fa1c:	d00a      	beq.n	800fa34 <plug_holes+0x118>
      ptr_to_mem(mem->next)->prev = mem_to_ptr(pmem);
 800fa1e:	687b      	ldr	r3, [r7, #4]
 800fa20:	681b      	ldr	r3, [r3, #0]
 800fa22:	4618      	mov	r0, r3
 800fa24:	f7ff ff5a 	bl	800f8dc <ptr_to_mem>
 800fa28:	4604      	mov	r4, r0
 800fa2a:	68b8      	ldr	r0, [r7, #8]
 800fa2c:	f7ff ff66 	bl	800f8fc <mem_to_ptr>
 800fa30:	4603      	mov	r3, r0
 800fa32:	6063      	str	r3, [r4, #4]
    }
  }
}
 800fa34:	bf00      	nop
 800fa36:	3714      	adds	r7, #20
 800fa38:	46bd      	mov	sp, r7
 800fa3a:	bd90      	pop	{r4, r7, pc}
 800fa3c:	20000814 	.word	0x20000814
 800fa40:	0801c59c 	.word	0x0801c59c
 800fa44:	0801c5cc 	.word	0x0801c5cc
 800fa48:	0801c5e4 	.word	0x0801c5e4
 800fa4c:	20000818 	.word	0x20000818
 800fa50:	0801c60c 	.word	0x0801c60c
 800fa54:	0801c628 	.word	0x0801c628
 800fa58:	0001ffe8 	.word	0x0001ffe8
 800fa5c:	0801c644 	.word	0x0801c644
 800fa60:	2000081c 	.word	0x2000081c

0800fa64 <mem_init>:
/**
 * Zero the heap and initialize start, end and lowest-free
 */
void
mem_init(void)
{
 800fa64:	b580      	push	{r7, lr}
 800fa66:	b082      	sub	sp, #8
 800fa68:	af00      	add	r7, sp, #0

  LWIP_ASSERT("Sanity check alignment",
              (SIZEOF_STRUCT_MEM & (MEM_ALIGNMENT - 1)) == 0);

  /* align the heap */
  ram = (u8_t *)LWIP_MEM_ALIGN(LWIP_RAM_HEAP_POINTER);
 800fa6a:	4b14      	ldr	r3, [pc, #80]	; (800fabc <mem_init+0x58>)
 800fa6c:	4a14      	ldr	r2, [pc, #80]	; (800fac0 <mem_init+0x5c>)
 800fa6e:	601a      	str	r2, [r3, #0]
  /* initialize the start of the heap */
  mem = (struct mem *)(void *)ram;
 800fa70:	4b12      	ldr	r3, [pc, #72]	; (800fabc <mem_init+0x58>)
 800fa72:	681b      	ldr	r3, [r3, #0]
 800fa74:	607b      	str	r3, [r7, #4]
  mem->next = MEM_SIZE_ALIGNED;
 800fa76:	687b      	ldr	r3, [r7, #4]
 800fa78:	4a12      	ldr	r2, [pc, #72]	; (800fac4 <mem_init+0x60>)
 800fa7a:	601a      	str	r2, [r3, #0]
  mem->prev = 0;
 800fa7c:	687b      	ldr	r3, [r7, #4]
 800fa7e:	2200      	movs	r2, #0
 800fa80:	605a      	str	r2, [r3, #4]
  mem->used = 0;
 800fa82:	687b      	ldr	r3, [r7, #4]
 800fa84:	2200      	movs	r2, #0
 800fa86:	721a      	strb	r2, [r3, #8]
  /* initialize the end of the heap */
  ram_end = ptr_to_mem(MEM_SIZE_ALIGNED);
 800fa88:	480e      	ldr	r0, [pc, #56]	; (800fac4 <mem_init+0x60>)
 800fa8a:	f7ff ff27 	bl	800f8dc <ptr_to_mem>
 800fa8e:	4603      	mov	r3, r0
 800fa90:	4a0d      	ldr	r2, [pc, #52]	; (800fac8 <mem_init+0x64>)
 800fa92:	6013      	str	r3, [r2, #0]
  ram_end->used = 1;
 800fa94:	4b0c      	ldr	r3, [pc, #48]	; (800fac8 <mem_init+0x64>)
 800fa96:	681b      	ldr	r3, [r3, #0]
 800fa98:	2201      	movs	r2, #1
 800fa9a:	721a      	strb	r2, [r3, #8]
  ram_end->next = MEM_SIZE_ALIGNED;
 800fa9c:	4b0a      	ldr	r3, [pc, #40]	; (800fac8 <mem_init+0x64>)
 800fa9e:	681b      	ldr	r3, [r3, #0]
 800faa0:	4a08      	ldr	r2, [pc, #32]	; (800fac4 <mem_init+0x60>)
 800faa2:	601a      	str	r2, [r3, #0]
  ram_end->prev = MEM_SIZE_ALIGNED;
 800faa4:	4b08      	ldr	r3, [pc, #32]	; (800fac8 <mem_init+0x64>)
 800faa6:	681b      	ldr	r3, [r3, #0]
 800faa8:	4a06      	ldr	r2, [pc, #24]	; (800fac4 <mem_init+0x60>)
 800faaa:	605a      	str	r2, [r3, #4]
  MEM_SANITY();

  /* initialize the lowest-free pointer to the start of the heap */
  lfree = (struct mem *)(void *)ram;
 800faac:	4b03      	ldr	r3, [pc, #12]	; (800fabc <mem_init+0x58>)
 800faae:	681b      	ldr	r3, [r3, #0]
 800fab0:	4a06      	ldr	r2, [pc, #24]	; (800facc <mem_init+0x68>)
 800fab2:	6013      	str	r3, [r2, #0]
  MEM_STATS_AVAIL(avail, MEM_SIZE_ALIGNED);

  if (sys_mutex_new(&mem_mutex) != ERR_OK) {
    LWIP_ASSERT("failed to create mem_mutex", 0);
  }
}
 800fab4:	bf00      	nop
 800fab6:	3708      	adds	r7, #8
 800fab8:	46bd      	mov	sp, r7
 800faba:	bd80      	pop	{r7, pc}
 800fabc:	20000814 	.word	0x20000814
 800fac0:	30020000 	.word	0x30020000
 800fac4:	0001ffe8 	.word	0x0001ffe8
 800fac8:	20000818 	.word	0x20000818
 800facc:	2000081c 	.word	0x2000081c

0800fad0 <mem_link_valid>:
/* Check if a struct mem is correctly linked.
 * If not, double-free is a possible reason.
 */
static int
mem_link_valid(struct mem *mem)
{
 800fad0:	b580      	push	{r7, lr}
 800fad2:	b086      	sub	sp, #24
 800fad4:	af00      	add	r7, sp, #0
 800fad6:	6078      	str	r0, [r7, #4]
  struct mem *nmem, *pmem;
  mem_size_t rmem_idx;
  rmem_idx = mem_to_ptr(mem);
 800fad8:	6878      	ldr	r0, [r7, #4]
 800fada:	f7ff ff0f 	bl	800f8fc <mem_to_ptr>
 800fade:	6178      	str	r0, [r7, #20]
  nmem = ptr_to_mem(mem->next);
 800fae0:	687b      	ldr	r3, [r7, #4]
 800fae2:	681b      	ldr	r3, [r3, #0]
 800fae4:	4618      	mov	r0, r3
 800fae6:	f7ff fef9 	bl	800f8dc <ptr_to_mem>
 800faea:	6138      	str	r0, [r7, #16]
  pmem = ptr_to_mem(mem->prev);
 800faec:	687b      	ldr	r3, [r7, #4]
 800faee:	685b      	ldr	r3, [r3, #4]
 800faf0:	4618      	mov	r0, r3
 800faf2:	f7ff fef3 	bl	800f8dc <ptr_to_mem>
 800faf6:	60f8      	str	r0, [r7, #12]
  if ((mem->next > MEM_SIZE_ALIGNED) || (mem->prev > MEM_SIZE_ALIGNED) ||
 800faf8:	687b      	ldr	r3, [r7, #4]
 800fafa:	681b      	ldr	r3, [r3, #0]
 800fafc:	4a11      	ldr	r2, [pc, #68]	; (800fb44 <mem_link_valid+0x74>)
 800fafe:	4293      	cmp	r3, r2
 800fb00:	d818      	bhi.n	800fb34 <mem_link_valid+0x64>
 800fb02:	687b      	ldr	r3, [r7, #4]
 800fb04:	685b      	ldr	r3, [r3, #4]
 800fb06:	4a0f      	ldr	r2, [pc, #60]	; (800fb44 <mem_link_valid+0x74>)
 800fb08:	4293      	cmp	r3, r2
 800fb0a:	d813      	bhi.n	800fb34 <mem_link_valid+0x64>
      ((mem->prev != rmem_idx) && (pmem->next != rmem_idx)) ||
 800fb0c:	687b      	ldr	r3, [r7, #4]
 800fb0e:	685b      	ldr	r3, [r3, #4]
  if ((mem->next > MEM_SIZE_ALIGNED) || (mem->prev > MEM_SIZE_ALIGNED) ||
 800fb10:	697a      	ldr	r2, [r7, #20]
 800fb12:	429a      	cmp	r2, r3
 800fb14:	d004      	beq.n	800fb20 <mem_link_valid+0x50>
      ((mem->prev != rmem_idx) && (pmem->next != rmem_idx)) ||
 800fb16:	68fb      	ldr	r3, [r7, #12]
 800fb18:	681b      	ldr	r3, [r3, #0]
 800fb1a:	697a      	ldr	r2, [r7, #20]
 800fb1c:	429a      	cmp	r2, r3
 800fb1e:	d109      	bne.n	800fb34 <mem_link_valid+0x64>
      ((nmem != ram_end) && (nmem->prev != rmem_idx))) {
 800fb20:	4b09      	ldr	r3, [pc, #36]	; (800fb48 <mem_link_valid+0x78>)
 800fb22:	681b      	ldr	r3, [r3, #0]
      ((mem->prev != rmem_idx) && (pmem->next != rmem_idx)) ||
 800fb24:	693a      	ldr	r2, [r7, #16]
 800fb26:	429a      	cmp	r2, r3
 800fb28:	d006      	beq.n	800fb38 <mem_link_valid+0x68>
      ((nmem != ram_end) && (nmem->prev != rmem_idx))) {
 800fb2a:	693b      	ldr	r3, [r7, #16]
 800fb2c:	685b      	ldr	r3, [r3, #4]
 800fb2e:	697a      	ldr	r2, [r7, #20]
 800fb30:	429a      	cmp	r2, r3
 800fb32:	d001      	beq.n	800fb38 <mem_link_valid+0x68>
    return 0;
 800fb34:	2300      	movs	r3, #0
 800fb36:	e000      	b.n	800fb3a <mem_link_valid+0x6a>
  }
  return 1;
 800fb38:	2301      	movs	r3, #1
}
 800fb3a:	4618      	mov	r0, r3
 800fb3c:	3718      	adds	r7, #24
 800fb3e:	46bd      	mov	sp, r7
 800fb40:	bd80      	pop	{r7, pc}
 800fb42:	bf00      	nop
 800fb44:	0001ffe8 	.word	0x0001ffe8
 800fb48:	20000818 	.word	0x20000818

0800fb4c <mem_free>:
 * @param rmem is the data portion of a struct mem as returned by a previous
 *             call to mem_malloc()
 */
void
mem_free(void *rmem)
{
 800fb4c:	b580      	push	{r7, lr}
 800fb4e:	b084      	sub	sp, #16
 800fb50:	af00      	add	r7, sp, #0
 800fb52:	6078      	str	r0, [r7, #4]
  struct mem *mem;
  LWIP_MEM_FREE_DECL_PROTECT();

  if (rmem == NULL) {
 800fb54:	687b      	ldr	r3, [r7, #4]
 800fb56:	2b00      	cmp	r3, #0
 800fb58:	d04c      	beq.n	800fbf4 <mem_free+0xa8>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS, ("mem_free(p == NULL) was called.\n"));
    return;
  }
  if ((((mem_ptr_t)rmem) & (MEM_ALIGNMENT - 1)) != 0) {
 800fb5a:	687b      	ldr	r3, [r7, #4]
 800fb5c:	f003 0303 	and.w	r3, r3, #3
 800fb60:	2b00      	cmp	r3, #0
 800fb62:	d007      	beq.n	800fb74 <mem_free+0x28>
    LWIP_MEM_ILLEGAL_FREE("mem_free: sanity check alignment");
 800fb64:	4b25      	ldr	r3, [pc, #148]	; (800fbfc <mem_free+0xb0>)
 800fb66:	f240 2273 	movw	r2, #627	; 0x273
 800fb6a:	4925      	ldr	r1, [pc, #148]	; (800fc00 <mem_free+0xb4>)
 800fb6c:	4825      	ldr	r0, [pc, #148]	; (800fc04 <mem_free+0xb8>)
 800fb6e:	f00a f86f 	bl	8019c50 <iprintf>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_free: sanity check alignment\n"));
    /* protect mem stats from concurrent access */
    MEM_STATS_INC_LOCKED(illegal);
    return;
 800fb72:	e040      	b.n	800fbf6 <mem_free+0xaa>
  }

  /* Get the corresponding struct mem: */
  /* cast through void* to get rid of alignment warnings */
  mem = (struct mem *)(void *)((u8_t *)rmem - (SIZEOF_STRUCT_MEM + MEM_SANITY_OFFSET));
 800fb74:	687b      	ldr	r3, [r7, #4]
 800fb76:	3b0c      	subs	r3, #12
 800fb78:	60fb      	str	r3, [r7, #12]

  if ((u8_t *)mem < ram || (u8_t *)rmem + MIN_SIZE_ALIGNED > (u8_t *)ram_end) {
 800fb7a:	4b23      	ldr	r3, [pc, #140]	; (800fc08 <mem_free+0xbc>)
 800fb7c:	681b      	ldr	r3, [r3, #0]
 800fb7e:	68fa      	ldr	r2, [r7, #12]
 800fb80:	429a      	cmp	r2, r3
 800fb82:	d306      	bcc.n	800fb92 <mem_free+0x46>
 800fb84:	687b      	ldr	r3, [r7, #4]
 800fb86:	f103 020c 	add.w	r2, r3, #12
 800fb8a:	4b20      	ldr	r3, [pc, #128]	; (800fc0c <mem_free+0xc0>)
 800fb8c:	681b      	ldr	r3, [r3, #0]
 800fb8e:	429a      	cmp	r2, r3
 800fb90:	d907      	bls.n	800fba2 <mem_free+0x56>
    LWIP_MEM_ILLEGAL_FREE("mem_free: illegal memory");
 800fb92:	4b1a      	ldr	r3, [pc, #104]	; (800fbfc <mem_free+0xb0>)
 800fb94:	f240 227f 	movw	r2, #639	; 0x27f
 800fb98:	491d      	ldr	r1, [pc, #116]	; (800fc10 <mem_free+0xc4>)
 800fb9a:	481a      	ldr	r0, [pc, #104]	; (800fc04 <mem_free+0xb8>)
 800fb9c:	f00a f858 	bl	8019c50 <iprintf>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_free: illegal memory\n"));
    /* protect mem stats from concurrent access */
    MEM_STATS_INC_LOCKED(illegal);
    return;
 800fba0:	e029      	b.n	800fbf6 <mem_free+0xaa>
  mem_overflow_check_element(mem);
#endif
  /* protect the heap from concurrent access */
  LWIP_MEM_FREE_PROTECT();
  /* mem has to be in a used state */
  if (!mem->used) {
 800fba2:	68fb      	ldr	r3, [r7, #12]
 800fba4:	7a1b      	ldrb	r3, [r3, #8]
 800fba6:	2b00      	cmp	r3, #0
 800fba8:	d107      	bne.n	800fbba <mem_free+0x6e>
    LWIP_MEM_ILLEGAL_FREE("mem_free: illegal memory: double free");
 800fbaa:	4b14      	ldr	r3, [pc, #80]	; (800fbfc <mem_free+0xb0>)
 800fbac:	f44f 7223 	mov.w	r2, #652	; 0x28c
 800fbb0:	4918      	ldr	r1, [pc, #96]	; (800fc14 <mem_free+0xc8>)
 800fbb2:	4814      	ldr	r0, [pc, #80]	; (800fc04 <mem_free+0xb8>)
 800fbb4:	f00a f84c 	bl	8019c50 <iprintf>
    LWIP_MEM_FREE_UNPROTECT();
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_free: illegal memory: double free?\n"));
    /* protect mem stats from concurrent access */
    MEM_STATS_INC_LOCKED(illegal);
    return;
 800fbb8:	e01d      	b.n	800fbf6 <mem_free+0xaa>
  }

  if (!mem_link_valid(mem)) {
 800fbba:	68f8      	ldr	r0, [r7, #12]
 800fbbc:	f7ff ff88 	bl	800fad0 <mem_link_valid>
 800fbc0:	4603      	mov	r3, r0
 800fbc2:	2b00      	cmp	r3, #0
 800fbc4:	d107      	bne.n	800fbd6 <mem_free+0x8a>
    LWIP_MEM_ILLEGAL_FREE("mem_free: illegal memory: non-linked: double free");
 800fbc6:	4b0d      	ldr	r3, [pc, #52]	; (800fbfc <mem_free+0xb0>)
 800fbc8:	f240 2295 	movw	r2, #661	; 0x295
 800fbcc:	4912      	ldr	r1, [pc, #72]	; (800fc18 <mem_free+0xcc>)
 800fbce:	480d      	ldr	r0, [pc, #52]	; (800fc04 <mem_free+0xb8>)
 800fbd0:	f00a f83e 	bl	8019c50 <iprintf>
    LWIP_MEM_FREE_UNPROTECT();
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_free: illegal memory: non-linked: double free?\n"));
    /* protect mem stats from concurrent access */
    MEM_STATS_INC_LOCKED(illegal);
    return;
 800fbd4:	e00f      	b.n	800fbf6 <mem_free+0xaa>
  }

  /* mem is now unused. */
  mem->used = 0;
 800fbd6:	68fb      	ldr	r3, [r7, #12]
 800fbd8:	2200      	movs	r2, #0
 800fbda:	721a      	strb	r2, [r3, #8]

  if (mem < lfree) {
 800fbdc:	4b0f      	ldr	r3, [pc, #60]	; (800fc1c <mem_free+0xd0>)
 800fbde:	681b      	ldr	r3, [r3, #0]
 800fbe0:	68fa      	ldr	r2, [r7, #12]
 800fbe2:	429a      	cmp	r2, r3
 800fbe4:	d202      	bcs.n	800fbec <mem_free+0xa0>
    /* the newly freed struct is now the lowest */
    lfree = mem;
 800fbe6:	4a0d      	ldr	r2, [pc, #52]	; (800fc1c <mem_free+0xd0>)
 800fbe8:	68fb      	ldr	r3, [r7, #12]
 800fbea:	6013      	str	r3, [r2, #0]
  }

  MEM_STATS_DEC_USED(used, mem->next - (mem_size_t)(((u8_t *)mem - ram)));

  /* finally, see if prev or next are free also */
  plug_holes(mem);
 800fbec:	68f8      	ldr	r0, [r7, #12]
 800fbee:	f7ff fe95 	bl	800f91c <plug_holes>
 800fbf2:	e000      	b.n	800fbf6 <mem_free+0xaa>
    return;
 800fbf4:	bf00      	nop
  MEM_SANITY();
#if LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
  mem_free_count = 1;
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
  LWIP_MEM_FREE_UNPROTECT();
}
 800fbf6:	3710      	adds	r7, #16
 800fbf8:	46bd      	mov	sp, r7
 800fbfa:	bd80      	pop	{r7, pc}
 800fbfc:	0801c59c 	.word	0x0801c59c
 800fc00:	0801c670 	.word	0x0801c670
 800fc04:	0801c5e4 	.word	0x0801c5e4
 800fc08:	20000814 	.word	0x20000814
 800fc0c:	20000818 	.word	0x20000818
 800fc10:	0801c694 	.word	0x0801c694
 800fc14:	0801c6b0 	.word	0x0801c6b0
 800fc18:	0801c6d8 	.word	0x0801c6d8
 800fc1c:	2000081c 	.word	0x2000081c

0800fc20 <mem_trim>:
 *         or NULL if newsize is > old size, in which case rmem is NOT touched
 *         or freed!
 */
void *
mem_trim(void *rmem, mem_size_t new_size)
{
 800fc20:	b580      	push	{r7, lr}
 800fc22:	b08a      	sub	sp, #40	; 0x28
 800fc24:	af00      	add	r7, sp, #0
 800fc26:	6078      	str	r0, [r7, #4]
 800fc28:	6039      	str	r1, [r7, #0]
  /* use the FREE_PROTECT here: it protects with sem OR SYS_ARCH_PROTECT */
  LWIP_MEM_FREE_DECL_PROTECT();

  /* Expand the size of the allocated memory region so that we can
     adjust for alignment. */
  newsize = (mem_size_t)LWIP_MEM_ALIGN_SIZE(new_size);
 800fc2a:	683b      	ldr	r3, [r7, #0]
 800fc2c:	3303      	adds	r3, #3
 800fc2e:	f023 0303 	bic.w	r3, r3, #3
 800fc32:	627b      	str	r3, [r7, #36]	; 0x24
  if (newsize < MIN_SIZE_ALIGNED) {
 800fc34:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800fc36:	2b0b      	cmp	r3, #11
 800fc38:	d801      	bhi.n	800fc3e <mem_trim+0x1e>
    /* every data block must be at least MIN_SIZE_ALIGNED long */
    newsize = MIN_SIZE_ALIGNED;
 800fc3a:	230c      	movs	r3, #12
 800fc3c:	627b      	str	r3, [r7, #36]	; 0x24
  }
#if MEM_OVERFLOW_CHECK
  newsize += MEM_SANITY_REGION_BEFORE_ALIGNED + MEM_SANITY_REGION_AFTER_ALIGNED;
#endif
  if ((newsize > MEM_SIZE_ALIGNED) || (newsize < new_size)) {
 800fc3e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800fc40:	4a68      	ldr	r2, [pc, #416]	; (800fde4 <mem_trim+0x1c4>)
 800fc42:	4293      	cmp	r3, r2
 800fc44:	d803      	bhi.n	800fc4e <mem_trim+0x2e>
 800fc46:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800fc48:	683b      	ldr	r3, [r7, #0]
 800fc4a:	429a      	cmp	r2, r3
 800fc4c:	d201      	bcs.n	800fc52 <mem_trim+0x32>
    return NULL;
 800fc4e:	2300      	movs	r3, #0
 800fc50:	e0c4      	b.n	800fddc <mem_trim+0x1bc>
  }

  LWIP_ASSERT("mem_trim: legal memory", (u8_t *)rmem >= (u8_t *)ram &&
 800fc52:	4b65      	ldr	r3, [pc, #404]	; (800fde8 <mem_trim+0x1c8>)
 800fc54:	681b      	ldr	r3, [r3, #0]
 800fc56:	687a      	ldr	r2, [r7, #4]
 800fc58:	429a      	cmp	r2, r3
 800fc5a:	d304      	bcc.n	800fc66 <mem_trim+0x46>
 800fc5c:	4b63      	ldr	r3, [pc, #396]	; (800fdec <mem_trim+0x1cc>)
 800fc5e:	681b      	ldr	r3, [r3, #0]
 800fc60:	687a      	ldr	r2, [r7, #4]
 800fc62:	429a      	cmp	r2, r3
 800fc64:	d306      	bcc.n	800fc74 <mem_trim+0x54>
 800fc66:	4b62      	ldr	r3, [pc, #392]	; (800fdf0 <mem_trim+0x1d0>)
 800fc68:	f240 22d1 	movw	r2, #721	; 0x2d1
 800fc6c:	4961      	ldr	r1, [pc, #388]	; (800fdf4 <mem_trim+0x1d4>)
 800fc6e:	4862      	ldr	r0, [pc, #392]	; (800fdf8 <mem_trim+0x1d8>)
 800fc70:	f009 ffee 	bl	8019c50 <iprintf>
              (u8_t *)rmem < (u8_t *)ram_end);

  if ((u8_t *)rmem < (u8_t *)ram || (u8_t *)rmem >= (u8_t *)ram_end) {
 800fc74:	4b5c      	ldr	r3, [pc, #368]	; (800fde8 <mem_trim+0x1c8>)
 800fc76:	681b      	ldr	r3, [r3, #0]
 800fc78:	687a      	ldr	r2, [r7, #4]
 800fc7a:	429a      	cmp	r2, r3
 800fc7c:	d304      	bcc.n	800fc88 <mem_trim+0x68>
 800fc7e:	4b5b      	ldr	r3, [pc, #364]	; (800fdec <mem_trim+0x1cc>)
 800fc80:	681b      	ldr	r3, [r3, #0]
 800fc82:	687a      	ldr	r2, [r7, #4]
 800fc84:	429a      	cmp	r2, r3
 800fc86:	d301      	bcc.n	800fc8c <mem_trim+0x6c>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_trim: illegal memory\n"));
    /* protect mem stats from concurrent access */
    MEM_STATS_INC_LOCKED(illegal);
    return rmem;
 800fc88:	687b      	ldr	r3, [r7, #4]
 800fc8a:	e0a7      	b.n	800fddc <mem_trim+0x1bc>
  }
  /* Get the corresponding struct mem ... */
  /* cast through void* to get rid of alignment warnings */
  mem = (struct mem *)(void *)((u8_t *)rmem - (SIZEOF_STRUCT_MEM + MEM_SANITY_OFFSET));
 800fc8c:	687b      	ldr	r3, [r7, #4]
 800fc8e:	3b0c      	subs	r3, #12
 800fc90:	623b      	str	r3, [r7, #32]
#if MEM_OVERFLOW_CHECK
  mem_overflow_check_element(mem);
#endif
  /* ... and its offset pointer */
  ptr = mem_to_ptr(mem);
 800fc92:	6a38      	ldr	r0, [r7, #32]
 800fc94:	f7ff fe32 	bl	800f8fc <mem_to_ptr>
 800fc98:	61f8      	str	r0, [r7, #28]

  size = (mem_size_t)((mem_size_t)(mem->next - ptr) - (SIZEOF_STRUCT_MEM + MEM_SANITY_OVERHEAD));
 800fc9a:	6a3b      	ldr	r3, [r7, #32]
 800fc9c:	681a      	ldr	r2, [r3, #0]
 800fc9e:	69fb      	ldr	r3, [r7, #28]
 800fca0:	1ad3      	subs	r3, r2, r3
 800fca2:	3b0c      	subs	r3, #12
 800fca4:	61bb      	str	r3, [r7, #24]
  LWIP_ASSERT("mem_trim can only shrink memory", newsize <= size);
 800fca6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800fca8:	69bb      	ldr	r3, [r7, #24]
 800fcaa:	429a      	cmp	r2, r3
 800fcac:	d906      	bls.n	800fcbc <mem_trim+0x9c>
 800fcae:	4b50      	ldr	r3, [pc, #320]	; (800fdf0 <mem_trim+0x1d0>)
 800fcb0:	f44f 7239 	mov.w	r2, #740	; 0x2e4
 800fcb4:	4951      	ldr	r1, [pc, #324]	; (800fdfc <mem_trim+0x1dc>)
 800fcb6:	4850      	ldr	r0, [pc, #320]	; (800fdf8 <mem_trim+0x1d8>)
 800fcb8:	f009 ffca 	bl	8019c50 <iprintf>
  if (newsize > size) {
 800fcbc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800fcbe:	69bb      	ldr	r3, [r7, #24]
 800fcc0:	429a      	cmp	r2, r3
 800fcc2:	d901      	bls.n	800fcc8 <mem_trim+0xa8>
    /* not supported */
    return NULL;
 800fcc4:	2300      	movs	r3, #0
 800fcc6:	e089      	b.n	800fddc <mem_trim+0x1bc>
  }
  if (newsize == size) {
 800fcc8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800fcca:	69bb      	ldr	r3, [r7, #24]
 800fccc:	429a      	cmp	r2, r3
 800fcce:	d101      	bne.n	800fcd4 <mem_trim+0xb4>
    /* No change in size, simply return */
    return rmem;
 800fcd0:	687b      	ldr	r3, [r7, #4]
 800fcd2:	e083      	b.n	800fddc <mem_trim+0x1bc>
  }

  /* protect the heap from concurrent access */
  LWIP_MEM_FREE_PROTECT();

  mem2 = ptr_to_mem(mem->next);
 800fcd4:	6a3b      	ldr	r3, [r7, #32]
 800fcd6:	681b      	ldr	r3, [r3, #0]
 800fcd8:	4618      	mov	r0, r3
 800fcda:	f7ff fdff 	bl	800f8dc <ptr_to_mem>
 800fcde:	6178      	str	r0, [r7, #20]
  if (mem2->used == 0) {
 800fce0:	697b      	ldr	r3, [r7, #20]
 800fce2:	7a1b      	ldrb	r3, [r3, #8]
 800fce4:	2b00      	cmp	r3, #0
 800fce6:	d13c      	bne.n	800fd62 <mem_trim+0x142>
    /* The next struct is unused, we can simply move it at little */
    mem_size_t next;
    LWIP_ASSERT("invalid next ptr", mem->next != MEM_SIZE_ALIGNED);
 800fce8:	6a3b      	ldr	r3, [r7, #32]
 800fcea:	681b      	ldr	r3, [r3, #0]
 800fcec:	4a3d      	ldr	r2, [pc, #244]	; (800fde4 <mem_trim+0x1c4>)
 800fcee:	4293      	cmp	r3, r2
 800fcf0:	d106      	bne.n	800fd00 <mem_trim+0xe0>
 800fcf2:	4b3f      	ldr	r3, [pc, #252]	; (800fdf0 <mem_trim+0x1d0>)
 800fcf4:	f240 22f5 	movw	r2, #757	; 0x2f5
 800fcf8:	4941      	ldr	r1, [pc, #260]	; (800fe00 <mem_trim+0x1e0>)
 800fcfa:	483f      	ldr	r0, [pc, #252]	; (800fdf8 <mem_trim+0x1d8>)
 800fcfc:	f009 ffa8 	bl	8019c50 <iprintf>
    /* remember the old next pointer */
    next = mem2->next;
 800fd00:	697b      	ldr	r3, [r7, #20]
 800fd02:	681b      	ldr	r3, [r3, #0]
 800fd04:	60fb      	str	r3, [r7, #12]
    /* create new struct mem which is moved directly after the shrinked mem */
    ptr2 = (mem_size_t)(ptr + SIZEOF_STRUCT_MEM + newsize);
 800fd06:	69fa      	ldr	r2, [r7, #28]
 800fd08:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800fd0a:	4413      	add	r3, r2
 800fd0c:	330c      	adds	r3, #12
 800fd0e:	613b      	str	r3, [r7, #16]
    if (lfree == mem2) {
 800fd10:	4b3c      	ldr	r3, [pc, #240]	; (800fe04 <mem_trim+0x1e4>)
 800fd12:	681b      	ldr	r3, [r3, #0]
 800fd14:	697a      	ldr	r2, [r7, #20]
 800fd16:	429a      	cmp	r2, r3
 800fd18:	d105      	bne.n	800fd26 <mem_trim+0x106>
      lfree = ptr_to_mem(ptr2);
 800fd1a:	6938      	ldr	r0, [r7, #16]
 800fd1c:	f7ff fdde 	bl	800f8dc <ptr_to_mem>
 800fd20:	4603      	mov	r3, r0
 800fd22:	4a38      	ldr	r2, [pc, #224]	; (800fe04 <mem_trim+0x1e4>)
 800fd24:	6013      	str	r3, [r2, #0]
    }
    mem2 = ptr_to_mem(ptr2);
 800fd26:	6938      	ldr	r0, [r7, #16]
 800fd28:	f7ff fdd8 	bl	800f8dc <ptr_to_mem>
 800fd2c:	6178      	str	r0, [r7, #20]
    mem2->used = 0;
 800fd2e:	697b      	ldr	r3, [r7, #20]
 800fd30:	2200      	movs	r2, #0
 800fd32:	721a      	strb	r2, [r3, #8]
    /* restore the next pointer */
    mem2->next = next;
 800fd34:	697b      	ldr	r3, [r7, #20]
 800fd36:	68fa      	ldr	r2, [r7, #12]
 800fd38:	601a      	str	r2, [r3, #0]
    /* link it back to mem */
    mem2->prev = ptr;
 800fd3a:	697b      	ldr	r3, [r7, #20]
 800fd3c:	69fa      	ldr	r2, [r7, #28]
 800fd3e:	605a      	str	r2, [r3, #4]
    /* link mem to it */
    mem->next = ptr2;
 800fd40:	6a3b      	ldr	r3, [r7, #32]
 800fd42:	693a      	ldr	r2, [r7, #16]
 800fd44:	601a      	str	r2, [r3, #0]
    /* last thing to restore linked list: as we have moved mem2,
     * let 'mem2->next->prev' point to mem2 again. but only if mem2->next is not
     * the end of the heap */
    if (mem2->next != MEM_SIZE_ALIGNED) {
 800fd46:	697b      	ldr	r3, [r7, #20]
 800fd48:	681b      	ldr	r3, [r3, #0]
 800fd4a:	4a26      	ldr	r2, [pc, #152]	; (800fde4 <mem_trim+0x1c4>)
 800fd4c:	4293      	cmp	r3, r2
 800fd4e:	d044      	beq.n	800fdda <mem_trim+0x1ba>
      ptr_to_mem(mem2->next)->prev = ptr2;
 800fd50:	697b      	ldr	r3, [r7, #20]
 800fd52:	681b      	ldr	r3, [r3, #0]
 800fd54:	4618      	mov	r0, r3
 800fd56:	f7ff fdc1 	bl	800f8dc <ptr_to_mem>
 800fd5a:	4602      	mov	r2, r0
 800fd5c:	693b      	ldr	r3, [r7, #16]
 800fd5e:	6053      	str	r3, [r2, #4]
 800fd60:	e03b      	b.n	800fdda <mem_trim+0x1ba>
    }
    MEM_STATS_DEC_USED(used, (size - newsize));
    /* no need to plug holes, we've already done that */
  } else if (newsize + SIZEOF_STRUCT_MEM + MIN_SIZE_ALIGNED <= size) {
 800fd62:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800fd64:	3318      	adds	r3, #24
 800fd66:	69ba      	ldr	r2, [r7, #24]
 800fd68:	429a      	cmp	r2, r3
 800fd6a:	d336      	bcc.n	800fdda <mem_trim+0x1ba>
     * Old size ('size') must be big enough to contain at least 'newsize' plus a struct mem
     * ('SIZEOF_STRUCT_MEM') with some data ('MIN_SIZE_ALIGNED').
     * @todo we could leave out MIN_SIZE_ALIGNED. We would create an empty
     *       region that couldn't hold data, but when mem->next gets freed,
     *       the 2 regions would be combined, resulting in more free memory */
    ptr2 = (mem_size_t)(ptr + SIZEOF_STRUCT_MEM + newsize);
 800fd6c:	69fa      	ldr	r2, [r7, #28]
 800fd6e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800fd70:	4413      	add	r3, r2
 800fd72:	330c      	adds	r3, #12
 800fd74:	613b      	str	r3, [r7, #16]
    LWIP_ASSERT("invalid next ptr", mem->next != MEM_SIZE_ALIGNED);
 800fd76:	6a3b      	ldr	r3, [r7, #32]
 800fd78:	681b      	ldr	r3, [r3, #0]
 800fd7a:	4a1a      	ldr	r2, [pc, #104]	; (800fde4 <mem_trim+0x1c4>)
 800fd7c:	4293      	cmp	r3, r2
 800fd7e:	d106      	bne.n	800fd8e <mem_trim+0x16e>
 800fd80:	4b1b      	ldr	r3, [pc, #108]	; (800fdf0 <mem_trim+0x1d0>)
 800fd82:	f240 3216 	movw	r2, #790	; 0x316
 800fd86:	491e      	ldr	r1, [pc, #120]	; (800fe00 <mem_trim+0x1e0>)
 800fd88:	481b      	ldr	r0, [pc, #108]	; (800fdf8 <mem_trim+0x1d8>)
 800fd8a:	f009 ff61 	bl	8019c50 <iprintf>
    mem2 = ptr_to_mem(ptr2);
 800fd8e:	6938      	ldr	r0, [r7, #16]
 800fd90:	f7ff fda4 	bl	800f8dc <ptr_to_mem>
 800fd94:	6178      	str	r0, [r7, #20]
    if (mem2 < lfree) {
 800fd96:	4b1b      	ldr	r3, [pc, #108]	; (800fe04 <mem_trim+0x1e4>)
 800fd98:	681b      	ldr	r3, [r3, #0]
 800fd9a:	697a      	ldr	r2, [r7, #20]
 800fd9c:	429a      	cmp	r2, r3
 800fd9e:	d202      	bcs.n	800fda6 <mem_trim+0x186>
      lfree = mem2;
 800fda0:	4a18      	ldr	r2, [pc, #96]	; (800fe04 <mem_trim+0x1e4>)
 800fda2:	697b      	ldr	r3, [r7, #20]
 800fda4:	6013      	str	r3, [r2, #0]
    }
    mem2->used = 0;
 800fda6:	697b      	ldr	r3, [r7, #20]
 800fda8:	2200      	movs	r2, #0
 800fdaa:	721a      	strb	r2, [r3, #8]
    mem2->next = mem->next;
 800fdac:	6a3b      	ldr	r3, [r7, #32]
 800fdae:	681a      	ldr	r2, [r3, #0]
 800fdb0:	697b      	ldr	r3, [r7, #20]
 800fdb2:	601a      	str	r2, [r3, #0]
    mem2->prev = ptr;
 800fdb4:	697b      	ldr	r3, [r7, #20]
 800fdb6:	69fa      	ldr	r2, [r7, #28]
 800fdb8:	605a      	str	r2, [r3, #4]
    mem->next = ptr2;
 800fdba:	6a3b      	ldr	r3, [r7, #32]
 800fdbc:	693a      	ldr	r2, [r7, #16]
 800fdbe:	601a      	str	r2, [r3, #0]
    if (mem2->next != MEM_SIZE_ALIGNED) {
 800fdc0:	697b      	ldr	r3, [r7, #20]
 800fdc2:	681b      	ldr	r3, [r3, #0]
 800fdc4:	4a07      	ldr	r2, [pc, #28]	; (800fde4 <mem_trim+0x1c4>)
 800fdc6:	4293      	cmp	r3, r2
 800fdc8:	d007      	beq.n	800fdda <mem_trim+0x1ba>
      ptr_to_mem(mem2->next)->prev = ptr2;
 800fdca:	697b      	ldr	r3, [r7, #20]
 800fdcc:	681b      	ldr	r3, [r3, #0]
 800fdce:	4618      	mov	r0, r3
 800fdd0:	f7ff fd84 	bl	800f8dc <ptr_to_mem>
 800fdd4:	4602      	mov	r2, r0
 800fdd6:	693b      	ldr	r3, [r7, #16]
 800fdd8:	6053      	str	r3, [r2, #4]
  MEM_SANITY();
#if LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
  mem_free_count = 1;
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
  LWIP_MEM_FREE_UNPROTECT();
  return rmem;
 800fdda:	687b      	ldr	r3, [r7, #4]
}
 800fddc:	4618      	mov	r0, r3
 800fdde:	3728      	adds	r7, #40	; 0x28
 800fde0:	46bd      	mov	sp, r7
 800fde2:	bd80      	pop	{r7, pc}
 800fde4:	0001ffe8 	.word	0x0001ffe8
 800fde8:	20000814 	.word	0x20000814
 800fdec:	20000818 	.word	0x20000818
 800fdf0:	0801c59c 	.word	0x0801c59c
 800fdf4:	0801c70c 	.word	0x0801c70c
 800fdf8:	0801c5e4 	.word	0x0801c5e4
 800fdfc:	0801c724 	.word	0x0801c724
 800fe00:	0801c744 	.word	0x0801c744
 800fe04:	2000081c 	.word	0x2000081c

0800fe08 <mem_malloc>:
 *
 * Note that the returned value will always be aligned (as defined by MEM_ALIGNMENT).
 */
void *
mem_malloc(mem_size_t size_in)
{
 800fe08:	b580      	push	{r7, lr}
 800fe0a:	b088      	sub	sp, #32
 800fe0c:	af00      	add	r7, sp, #0
 800fe0e:	6078      	str	r0, [r7, #4]
#if LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
  u8_t local_mem_free_count = 0;
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
  LWIP_MEM_ALLOC_DECL_PROTECT();

  if (size_in == 0) {
 800fe10:	687b      	ldr	r3, [r7, #4]
 800fe12:	2b00      	cmp	r3, #0
 800fe14:	d101      	bne.n	800fe1a <mem_malloc+0x12>
    return NULL;
 800fe16:	2300      	movs	r3, #0
 800fe18:	e0d0      	b.n	800ffbc <mem_malloc+0x1b4>
  }

  /* Expand the size of the allocated memory region so that we can
     adjust for alignment. */
  size = (mem_size_t)LWIP_MEM_ALIGN_SIZE(size_in);
 800fe1a:	687b      	ldr	r3, [r7, #4]
 800fe1c:	3303      	adds	r3, #3
 800fe1e:	f023 0303 	bic.w	r3, r3, #3
 800fe22:	61bb      	str	r3, [r7, #24]
  if (size < MIN_SIZE_ALIGNED) {
 800fe24:	69bb      	ldr	r3, [r7, #24]
 800fe26:	2b0b      	cmp	r3, #11
 800fe28:	d801      	bhi.n	800fe2e <mem_malloc+0x26>
    /* every data block must be at least MIN_SIZE_ALIGNED long */
    size = MIN_SIZE_ALIGNED;
 800fe2a:	230c      	movs	r3, #12
 800fe2c:	61bb      	str	r3, [r7, #24]
  }
#if MEM_OVERFLOW_CHECK
  size += MEM_SANITY_REGION_BEFORE_ALIGNED + MEM_SANITY_REGION_AFTER_ALIGNED;
#endif
  if ((size > MEM_SIZE_ALIGNED) || (size < size_in)) {
 800fe2e:	69bb      	ldr	r3, [r7, #24]
 800fe30:	4a64      	ldr	r2, [pc, #400]	; (800ffc4 <mem_malloc+0x1bc>)
 800fe32:	4293      	cmp	r3, r2
 800fe34:	d803      	bhi.n	800fe3e <mem_malloc+0x36>
 800fe36:	69ba      	ldr	r2, [r7, #24]
 800fe38:	687b      	ldr	r3, [r7, #4]
 800fe3a:	429a      	cmp	r2, r3
 800fe3c:	d201      	bcs.n	800fe42 <mem_malloc+0x3a>
    return NULL;
 800fe3e:	2300      	movs	r3, #0
 800fe40:	e0bc      	b.n	800ffbc <mem_malloc+0x1b4>
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */

    /* Scan through the heap searching for a free block that is big enough,
     * beginning with the lowest free block.
     */
    for (ptr = mem_to_ptr(lfree); ptr < MEM_SIZE_ALIGNED - size;
 800fe42:	4b61      	ldr	r3, [pc, #388]	; (800ffc8 <mem_malloc+0x1c0>)
 800fe44:	681b      	ldr	r3, [r3, #0]
 800fe46:	4618      	mov	r0, r3
 800fe48:	f7ff fd58 	bl	800f8fc <mem_to_ptr>
 800fe4c:	61f8      	str	r0, [r7, #28]
 800fe4e:	e0ad      	b.n	800ffac <mem_malloc+0x1a4>
         ptr = ptr_to_mem(ptr)->next) {
      mem = ptr_to_mem(ptr);
 800fe50:	69f8      	ldr	r0, [r7, #28]
 800fe52:	f7ff fd43 	bl	800f8dc <ptr_to_mem>
 800fe56:	6138      	str	r0, [r7, #16]
        local_mem_free_count = 1;
        break;
      }
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */

      if ((!mem->used) &&
 800fe58:	693b      	ldr	r3, [r7, #16]
 800fe5a:	7a1b      	ldrb	r3, [r3, #8]
 800fe5c:	2b00      	cmp	r3, #0
 800fe5e:	f040 809f 	bne.w	800ffa0 <mem_malloc+0x198>
          (mem->next - (ptr + SIZEOF_STRUCT_MEM)) >= size) {
 800fe62:	693b      	ldr	r3, [r7, #16]
 800fe64:	681a      	ldr	r2, [r3, #0]
 800fe66:	69fb      	ldr	r3, [r7, #28]
 800fe68:	1ad3      	subs	r3, r2, r3
 800fe6a:	3b0c      	subs	r3, #12
      if ((!mem->used) &&
 800fe6c:	69ba      	ldr	r2, [r7, #24]
 800fe6e:	429a      	cmp	r2, r3
 800fe70:	f200 8096 	bhi.w	800ffa0 <mem_malloc+0x198>
        /* mem is not used and at least perfect fit is possible:
         * mem->next - (ptr + SIZEOF_STRUCT_MEM) gives us the 'user data size' of mem */

        if (mem->next - (ptr + SIZEOF_STRUCT_MEM) >= (size + SIZEOF_STRUCT_MEM + MIN_SIZE_ALIGNED)) {
 800fe74:	693b      	ldr	r3, [r7, #16]
 800fe76:	681a      	ldr	r2, [r3, #0]
 800fe78:	69fb      	ldr	r3, [r7, #28]
 800fe7a:	1ad3      	subs	r3, r2, r3
 800fe7c:	f1a3 020c 	sub.w	r2, r3, #12
 800fe80:	69bb      	ldr	r3, [r7, #24]
 800fe82:	3318      	adds	r3, #24
 800fe84:	429a      	cmp	r2, r3
 800fe86:	d331      	bcc.n	800feec <mem_malloc+0xe4>
           * struct mem would fit in but no data between mem2 and mem2->next
           * @todo we could leave out MIN_SIZE_ALIGNED. We would create an empty
           *       region that couldn't hold data, but when mem->next gets freed,
           *       the 2 regions would be combined, resulting in more free memory
           */
          ptr2 = (mem_size_t)(ptr + SIZEOF_STRUCT_MEM + size);
 800fe88:	69fa      	ldr	r2, [r7, #28]
 800fe8a:	69bb      	ldr	r3, [r7, #24]
 800fe8c:	4413      	add	r3, r2
 800fe8e:	330c      	adds	r3, #12
 800fe90:	60fb      	str	r3, [r7, #12]
          LWIP_ASSERT("invalid next ptr",ptr2 != MEM_SIZE_ALIGNED);
 800fe92:	68fb      	ldr	r3, [r7, #12]
 800fe94:	4a4b      	ldr	r2, [pc, #300]	; (800ffc4 <mem_malloc+0x1bc>)
 800fe96:	4293      	cmp	r3, r2
 800fe98:	d106      	bne.n	800fea8 <mem_malloc+0xa0>
 800fe9a:	4b4c      	ldr	r3, [pc, #304]	; (800ffcc <mem_malloc+0x1c4>)
 800fe9c:	f240 3287 	movw	r2, #903	; 0x387
 800fea0:	494b      	ldr	r1, [pc, #300]	; (800ffd0 <mem_malloc+0x1c8>)
 800fea2:	484c      	ldr	r0, [pc, #304]	; (800ffd4 <mem_malloc+0x1cc>)
 800fea4:	f009 fed4 	bl	8019c50 <iprintf>
          /* create mem2 struct */
          mem2 = ptr_to_mem(ptr2);
 800fea8:	68f8      	ldr	r0, [r7, #12]
 800feaa:	f7ff fd17 	bl	800f8dc <ptr_to_mem>
 800feae:	60b8      	str	r0, [r7, #8]
          mem2->used = 0;
 800feb0:	68bb      	ldr	r3, [r7, #8]
 800feb2:	2200      	movs	r2, #0
 800feb4:	721a      	strb	r2, [r3, #8]
          mem2->next = mem->next;
 800feb6:	693b      	ldr	r3, [r7, #16]
 800feb8:	681a      	ldr	r2, [r3, #0]
 800feba:	68bb      	ldr	r3, [r7, #8]
 800febc:	601a      	str	r2, [r3, #0]
          mem2->prev = ptr;
 800febe:	68bb      	ldr	r3, [r7, #8]
 800fec0:	69fa      	ldr	r2, [r7, #28]
 800fec2:	605a      	str	r2, [r3, #4]
          /* and insert it between mem and mem->next */
          mem->next = ptr2;
 800fec4:	693b      	ldr	r3, [r7, #16]
 800fec6:	68fa      	ldr	r2, [r7, #12]
 800fec8:	601a      	str	r2, [r3, #0]
          mem->used = 1;
 800feca:	693b      	ldr	r3, [r7, #16]
 800fecc:	2201      	movs	r2, #1
 800fece:	721a      	strb	r2, [r3, #8]

          if (mem2->next != MEM_SIZE_ALIGNED) {
 800fed0:	68bb      	ldr	r3, [r7, #8]
 800fed2:	681b      	ldr	r3, [r3, #0]
 800fed4:	4a3b      	ldr	r2, [pc, #236]	; (800ffc4 <mem_malloc+0x1bc>)
 800fed6:	4293      	cmp	r3, r2
 800fed8:	d00b      	beq.n	800fef2 <mem_malloc+0xea>
            ptr_to_mem(mem2->next)->prev = ptr2;
 800feda:	68bb      	ldr	r3, [r7, #8]
 800fedc:	681b      	ldr	r3, [r3, #0]
 800fede:	4618      	mov	r0, r3
 800fee0:	f7ff fcfc 	bl	800f8dc <ptr_to_mem>
 800fee4:	4602      	mov	r2, r0
 800fee6:	68fb      	ldr	r3, [r7, #12]
 800fee8:	6053      	str	r3, [r2, #4]
 800feea:	e002      	b.n	800fef2 <mem_malloc+0xea>
           * take care of this).
           * -> near fit or exact fit: do not split, no mem2 creation
           * also can't move mem->next directly behind mem, since mem->next
           * will always be used at this point!
           */
          mem->used = 1;
 800feec:	693b      	ldr	r3, [r7, #16]
 800feee:	2201      	movs	r2, #1
 800fef0:	721a      	strb	r2, [r3, #8]
          MEM_STATS_INC_USED(used, mem->next - mem_to_ptr(mem));
        }
#if LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
mem_malloc_adjust_lfree:
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
        if (mem == lfree) {
 800fef2:	4b35      	ldr	r3, [pc, #212]	; (800ffc8 <mem_malloc+0x1c0>)
 800fef4:	681b      	ldr	r3, [r3, #0]
 800fef6:	693a      	ldr	r2, [r7, #16]
 800fef8:	429a      	cmp	r2, r3
 800fefa:	d127      	bne.n	800ff4c <mem_malloc+0x144>
          struct mem *cur = lfree;
 800fefc:	4b32      	ldr	r3, [pc, #200]	; (800ffc8 <mem_malloc+0x1c0>)
 800fefe:	681b      	ldr	r3, [r3, #0]
 800ff00:	617b      	str	r3, [r7, #20]
          /* Find next free block after mem and update lowest free pointer */
          while (cur->used && cur != ram_end) {
 800ff02:	e005      	b.n	800ff10 <mem_malloc+0x108>
              /* If mem_free or mem_trim have run, we have to restart since they
                 could have altered our current struct mem or lfree. */
              goto mem_malloc_adjust_lfree;
            }
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
            cur = ptr_to_mem(cur->next);
 800ff04:	697b      	ldr	r3, [r7, #20]
 800ff06:	681b      	ldr	r3, [r3, #0]
 800ff08:	4618      	mov	r0, r3
 800ff0a:	f7ff fce7 	bl	800f8dc <ptr_to_mem>
 800ff0e:	6178      	str	r0, [r7, #20]
          while (cur->used && cur != ram_end) {
 800ff10:	697b      	ldr	r3, [r7, #20]
 800ff12:	7a1b      	ldrb	r3, [r3, #8]
 800ff14:	2b00      	cmp	r3, #0
 800ff16:	d004      	beq.n	800ff22 <mem_malloc+0x11a>
 800ff18:	4b2f      	ldr	r3, [pc, #188]	; (800ffd8 <mem_malloc+0x1d0>)
 800ff1a:	681b      	ldr	r3, [r3, #0]
 800ff1c:	697a      	ldr	r2, [r7, #20]
 800ff1e:	429a      	cmp	r2, r3
 800ff20:	d1f0      	bne.n	800ff04 <mem_malloc+0xfc>
          }
          lfree = cur;
 800ff22:	4a29      	ldr	r2, [pc, #164]	; (800ffc8 <mem_malloc+0x1c0>)
 800ff24:	697b      	ldr	r3, [r7, #20]
 800ff26:	6013      	str	r3, [r2, #0]
          LWIP_ASSERT("mem_malloc: !lfree->used", ((lfree == ram_end) || (!lfree->used)));
 800ff28:	4b27      	ldr	r3, [pc, #156]	; (800ffc8 <mem_malloc+0x1c0>)
 800ff2a:	681a      	ldr	r2, [r3, #0]
 800ff2c:	4b2a      	ldr	r3, [pc, #168]	; (800ffd8 <mem_malloc+0x1d0>)
 800ff2e:	681b      	ldr	r3, [r3, #0]
 800ff30:	429a      	cmp	r2, r3
 800ff32:	d00b      	beq.n	800ff4c <mem_malloc+0x144>
 800ff34:	4b24      	ldr	r3, [pc, #144]	; (800ffc8 <mem_malloc+0x1c0>)
 800ff36:	681b      	ldr	r3, [r3, #0]
 800ff38:	7a1b      	ldrb	r3, [r3, #8]
 800ff3a:	2b00      	cmp	r3, #0
 800ff3c:	d006      	beq.n	800ff4c <mem_malloc+0x144>
 800ff3e:	4b23      	ldr	r3, [pc, #140]	; (800ffcc <mem_malloc+0x1c4>)
 800ff40:	f240 32b5 	movw	r2, #949	; 0x3b5
 800ff44:	4925      	ldr	r1, [pc, #148]	; (800ffdc <mem_malloc+0x1d4>)
 800ff46:	4823      	ldr	r0, [pc, #140]	; (800ffd4 <mem_malloc+0x1cc>)
 800ff48:	f009 fe82 	bl	8019c50 <iprintf>
        }
        LWIP_MEM_ALLOC_UNPROTECT();
        sys_mutex_unlock(&mem_mutex);
        LWIP_ASSERT("mem_malloc: allocated memory not above ram_end.",
 800ff4c:	693a      	ldr	r2, [r7, #16]
 800ff4e:	69bb      	ldr	r3, [r7, #24]
 800ff50:	4413      	add	r3, r2
 800ff52:	330c      	adds	r3, #12
 800ff54:	4a20      	ldr	r2, [pc, #128]	; (800ffd8 <mem_malloc+0x1d0>)
 800ff56:	6812      	ldr	r2, [r2, #0]
 800ff58:	4293      	cmp	r3, r2
 800ff5a:	d906      	bls.n	800ff6a <mem_malloc+0x162>
 800ff5c:	4b1b      	ldr	r3, [pc, #108]	; (800ffcc <mem_malloc+0x1c4>)
 800ff5e:	f240 32b9 	movw	r2, #953	; 0x3b9
 800ff62:	491f      	ldr	r1, [pc, #124]	; (800ffe0 <mem_malloc+0x1d8>)
 800ff64:	481b      	ldr	r0, [pc, #108]	; (800ffd4 <mem_malloc+0x1cc>)
 800ff66:	f009 fe73 	bl	8019c50 <iprintf>
                    (mem_ptr_t)mem + SIZEOF_STRUCT_MEM + size <= (mem_ptr_t)ram_end);
        LWIP_ASSERT("mem_malloc: allocated memory properly aligned.",
 800ff6a:	693b      	ldr	r3, [r7, #16]
 800ff6c:	f003 0303 	and.w	r3, r3, #3
 800ff70:	2b00      	cmp	r3, #0
 800ff72:	d006      	beq.n	800ff82 <mem_malloc+0x17a>
 800ff74:	4b15      	ldr	r3, [pc, #84]	; (800ffcc <mem_malloc+0x1c4>)
 800ff76:	f240 32bb 	movw	r2, #955	; 0x3bb
 800ff7a:	491a      	ldr	r1, [pc, #104]	; (800ffe4 <mem_malloc+0x1dc>)
 800ff7c:	4815      	ldr	r0, [pc, #84]	; (800ffd4 <mem_malloc+0x1cc>)
 800ff7e:	f009 fe67 	bl	8019c50 <iprintf>
                    ((mem_ptr_t)mem + SIZEOF_STRUCT_MEM) % MEM_ALIGNMENT == 0);
        LWIP_ASSERT("mem_malloc: sanity check alignment",
 800ff82:	693b      	ldr	r3, [r7, #16]
 800ff84:	f003 0303 	and.w	r3, r3, #3
 800ff88:	2b00      	cmp	r3, #0
 800ff8a:	d006      	beq.n	800ff9a <mem_malloc+0x192>
 800ff8c:	4b0f      	ldr	r3, [pc, #60]	; (800ffcc <mem_malloc+0x1c4>)
 800ff8e:	f240 32bd 	movw	r2, #957	; 0x3bd
 800ff92:	4915      	ldr	r1, [pc, #84]	; (800ffe8 <mem_malloc+0x1e0>)
 800ff94:	480f      	ldr	r0, [pc, #60]	; (800ffd4 <mem_malloc+0x1cc>)
 800ff96:	f009 fe5b 	bl	8019c50 <iprintf>

#if MEM_OVERFLOW_CHECK
        mem_overflow_init_element(mem, size_in);
#endif
        MEM_SANITY();
        return (u8_t *)mem + SIZEOF_STRUCT_MEM + MEM_SANITY_OFFSET;
 800ff9a:	693b      	ldr	r3, [r7, #16]
 800ff9c:	330c      	adds	r3, #12
 800ff9e:	e00d      	b.n	800ffbc <mem_malloc+0x1b4>
         ptr = ptr_to_mem(ptr)->next) {
 800ffa0:	69f8      	ldr	r0, [r7, #28]
 800ffa2:	f7ff fc9b 	bl	800f8dc <ptr_to_mem>
 800ffa6:	4603      	mov	r3, r0
 800ffa8:	681b      	ldr	r3, [r3, #0]
 800ffaa:	61fb      	str	r3, [r7, #28]
    for (ptr = mem_to_ptr(lfree); ptr < MEM_SIZE_ALIGNED - size;
 800ffac:	69ba      	ldr	r2, [r7, #24]
 800ffae:	4b05      	ldr	r3, [pc, #20]	; (800ffc4 <mem_malloc+0x1bc>)
 800ffb0:	1a9b      	subs	r3, r3, r2
 800ffb2:	69fa      	ldr	r2, [r7, #28]
 800ffb4:	429a      	cmp	r2, r3
 800ffb6:	f4ff af4b 	bcc.w	800fe50 <mem_malloc+0x48>
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
  MEM_STATS_INC(err);
  LWIP_MEM_ALLOC_UNPROTECT();
  sys_mutex_unlock(&mem_mutex);
  LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("mem_malloc: could not allocate %"S16_F" bytes\n", (s16_t)size));
  return NULL;
 800ffba:	2300      	movs	r3, #0
}
 800ffbc:	4618      	mov	r0, r3
 800ffbe:	3720      	adds	r7, #32
 800ffc0:	46bd      	mov	sp, r7
 800ffc2:	bd80      	pop	{r7, pc}
 800ffc4:	0001ffe8 	.word	0x0001ffe8
 800ffc8:	2000081c 	.word	0x2000081c
 800ffcc:	0801c59c 	.word	0x0801c59c
 800ffd0:	0801c744 	.word	0x0801c744
 800ffd4:	0801c5e4 	.word	0x0801c5e4
 800ffd8:	20000818 	.word	0x20000818
 800ffdc:	0801c758 	.word	0x0801c758
 800ffe0:	0801c774 	.word	0x0801c774
 800ffe4:	0801c7a4 	.word	0x0801c7a4
 800ffe8:	0801c7d4 	.word	0x0801c7d4

0800ffec <memp_init_pool>:
 *
 * @param desc pool to initialize
 */
void
memp_init_pool(const struct memp_desc *desc)
{
 800ffec:	b480      	push	{r7}
 800ffee:	b085      	sub	sp, #20
 800fff0:	af00      	add	r7, sp, #0
 800fff2:	6078      	str	r0, [r7, #4]
  LWIP_UNUSED_ARG(desc);
#else
  int i;
  struct memp *memp;

  *desc->tab = NULL;
 800fff4:	687b      	ldr	r3, [r7, #4]
 800fff6:	689b      	ldr	r3, [r3, #8]
 800fff8:	2200      	movs	r2, #0
 800fffa:	601a      	str	r2, [r3, #0]
  memp = (struct memp *)LWIP_MEM_ALIGN(desc->base);
 800fffc:	687b      	ldr	r3, [r7, #4]
 800fffe:	685b      	ldr	r3, [r3, #4]
 8010000:	3303      	adds	r3, #3
 8010002:	f023 0303 	bic.w	r3, r3, #3
 8010006:	60bb      	str	r3, [r7, #8]
                                       + MEM_SANITY_REGION_AFTER_ALIGNED
#endif
                                      ));
#endif
  /* create a linked list of memp elements */
  for (i = 0; i < desc->num; ++i) {
 8010008:	2300      	movs	r3, #0
 801000a:	60fb      	str	r3, [r7, #12]
 801000c:	e011      	b.n	8010032 <memp_init_pool+0x46>
    memp->next = *desc->tab;
 801000e:	687b      	ldr	r3, [r7, #4]
 8010010:	689b      	ldr	r3, [r3, #8]
 8010012:	681a      	ldr	r2, [r3, #0]
 8010014:	68bb      	ldr	r3, [r7, #8]
 8010016:	601a      	str	r2, [r3, #0]
    *desc->tab = memp;
 8010018:	687b      	ldr	r3, [r7, #4]
 801001a:	689b      	ldr	r3, [r3, #8]
 801001c:	68ba      	ldr	r2, [r7, #8]
 801001e:	601a      	str	r2, [r3, #0]
#if MEMP_OVERFLOW_CHECK
    memp_overflow_init_element(memp, desc);
#endif /* MEMP_OVERFLOW_CHECK */
    /* cast through void* to get rid of alignment warnings */
    memp = (struct memp *)(void *)((u8_t *)memp + MEMP_SIZE + desc->size
 8010020:	687b      	ldr	r3, [r7, #4]
 8010022:	881b      	ldrh	r3, [r3, #0]
 8010024:	461a      	mov	r2, r3
 8010026:	68bb      	ldr	r3, [r7, #8]
 8010028:	4413      	add	r3, r2
 801002a:	60bb      	str	r3, [r7, #8]
  for (i = 0; i < desc->num; ++i) {
 801002c:	68fb      	ldr	r3, [r7, #12]
 801002e:	3301      	adds	r3, #1
 8010030:	60fb      	str	r3, [r7, #12]
 8010032:	687b      	ldr	r3, [r7, #4]
 8010034:	885b      	ldrh	r3, [r3, #2]
 8010036:	461a      	mov	r2, r3
 8010038:	68fb      	ldr	r3, [r7, #12]
 801003a:	4293      	cmp	r3, r2
 801003c:	dbe7      	blt.n	801000e <memp_init_pool+0x22>
#endif /* !MEMP_MEM_MALLOC */

#if MEMP_STATS && (defined(LWIP_DEBUG) || LWIP_STATS_DISPLAY)
  desc->stats->name  = desc->desc;
#endif /* MEMP_STATS && (defined(LWIP_DEBUG) || LWIP_STATS_DISPLAY) */
}
 801003e:	bf00      	nop
 8010040:	bf00      	nop
 8010042:	3714      	adds	r7, #20
 8010044:	46bd      	mov	sp, r7
 8010046:	f85d 7b04 	ldr.w	r7, [sp], #4
 801004a:	4770      	bx	lr

0801004c <memp_init>:
 *
 * Carves out memp_memory into linked lists for each pool-type.
 */
void
memp_init(void)
{
 801004c:	b580      	push	{r7, lr}
 801004e:	b082      	sub	sp, #8
 8010050:	af00      	add	r7, sp, #0
  u16_t i;

  /* for every pool: */
  for (i = 0; i < LWIP_ARRAYSIZE(memp_pools); i++) {
 8010052:	2300      	movs	r3, #0
 8010054:	80fb      	strh	r3, [r7, #6]
 8010056:	e009      	b.n	801006c <memp_init+0x20>
    memp_init_pool(memp_pools[i]);
 8010058:	88fb      	ldrh	r3, [r7, #6]
 801005a:	4a08      	ldr	r2, [pc, #32]	; (801007c <memp_init+0x30>)
 801005c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8010060:	4618      	mov	r0, r3
 8010062:	f7ff ffc3 	bl	800ffec <memp_init_pool>
  for (i = 0; i < LWIP_ARRAYSIZE(memp_pools); i++) {
 8010066:	88fb      	ldrh	r3, [r7, #6]
 8010068:	3301      	adds	r3, #1
 801006a:	80fb      	strh	r3, [r7, #6]
 801006c:	88fb      	ldrh	r3, [r7, #6]
 801006e:	2b08      	cmp	r3, #8
 8010070:	d9f2      	bls.n	8010058 <memp_init+0xc>

#if MEMP_OVERFLOW_CHECK >= 2
  /* check everything a first time to see if it worked */
  memp_overflow_check_all();
#endif /* MEMP_OVERFLOW_CHECK >= 2 */
}
 8010072:	bf00      	nop
 8010074:	bf00      	nop
 8010076:	3708      	adds	r7, #8
 8010078:	46bd      	mov	sp, r7
 801007a:	bd80      	pop	{r7, pc}
 801007c:	0801efd8 	.word	0x0801efd8

08010080 <do_memp_malloc_pool>:
#if !MEMP_OVERFLOW_CHECK
do_memp_malloc_pool(const struct memp_desc *desc)
#else
do_memp_malloc_pool_fn(const struct memp_desc *desc, const char *file, const int line)
#endif
{
 8010080:	b580      	push	{r7, lr}
 8010082:	b084      	sub	sp, #16
 8010084:	af00      	add	r7, sp, #0
 8010086:	6078      	str	r0, [r7, #4]
  memp = (struct memp *)mem_malloc(MEMP_SIZE + MEMP_ALIGN_SIZE(desc->size));
  SYS_ARCH_PROTECT(old_level);
#else /* MEMP_MEM_MALLOC */
  SYS_ARCH_PROTECT(old_level);

  memp = *desc->tab;
 8010088:	687b      	ldr	r3, [r7, #4]
 801008a:	689b      	ldr	r3, [r3, #8]
 801008c:	681b      	ldr	r3, [r3, #0]
 801008e:	60fb      	str	r3, [r7, #12]
#endif /* MEMP_MEM_MALLOC */

  if (memp != NULL) {
 8010090:	68fb      	ldr	r3, [r7, #12]
 8010092:	2b00      	cmp	r3, #0
 8010094:	d012      	beq.n	80100bc <do_memp_malloc_pool+0x3c>
#if !MEMP_MEM_MALLOC
#if MEMP_OVERFLOW_CHECK == 1
    memp_overflow_check_element(memp, desc);
#endif /* MEMP_OVERFLOW_CHECK */

    *desc->tab = memp->next;
 8010096:	687b      	ldr	r3, [r7, #4]
 8010098:	689b      	ldr	r3, [r3, #8]
 801009a:	68fa      	ldr	r2, [r7, #12]
 801009c:	6812      	ldr	r2, [r2, #0]
 801009e:	601a      	str	r2, [r3, #0]
    memp->line = line;
#if MEMP_MEM_MALLOC
    memp_overflow_init_element(memp, desc);
#endif /* MEMP_MEM_MALLOC */
#endif /* MEMP_OVERFLOW_CHECK */
    LWIP_ASSERT("memp_malloc: memp properly aligned",
 80100a0:	68fb      	ldr	r3, [r7, #12]
 80100a2:	f003 0303 	and.w	r3, r3, #3
 80100a6:	2b00      	cmp	r3, #0
 80100a8:	d006      	beq.n	80100b8 <do_memp_malloc_pool+0x38>
 80100aa:	4b07      	ldr	r3, [pc, #28]	; (80100c8 <do_memp_malloc_pool+0x48>)
 80100ac:	f44f 728c 	mov.w	r2, #280	; 0x118
 80100b0:	4906      	ldr	r1, [pc, #24]	; (80100cc <do_memp_malloc_pool+0x4c>)
 80100b2:	4807      	ldr	r0, [pc, #28]	; (80100d0 <do_memp_malloc_pool+0x50>)
 80100b4:	f009 fdcc 	bl	8019c50 <iprintf>
      desc->stats->max = desc->stats->used;
    }
#endif
    SYS_ARCH_UNPROTECT(old_level);
    /* cast through u8_t* to get rid of alignment warnings */
    return ((u8_t *)memp + MEMP_SIZE);
 80100b8:	68fb      	ldr	r3, [r7, #12]
 80100ba:	e000      	b.n	80100be <do_memp_malloc_pool+0x3e>
#endif
    SYS_ARCH_UNPROTECT(old_level);
    LWIP_DEBUGF(MEMP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("memp_malloc: out of memory in pool %s\n", desc->desc));
  }

  return NULL;
 80100bc:	2300      	movs	r3, #0
}
 80100be:	4618      	mov	r0, r3
 80100c0:	3710      	adds	r7, #16
 80100c2:	46bd      	mov	sp, r7
 80100c4:	bd80      	pop	{r7, pc}
 80100c6:	bf00      	nop
 80100c8:	0801c7f8 	.word	0x0801c7f8
 80100cc:	0801c828 	.word	0x0801c828
 80100d0:	0801c84c 	.word	0x0801c84c

080100d4 <memp_malloc_pool>:
#if !MEMP_OVERFLOW_CHECK
memp_malloc_pool(const struct memp_desc *desc)
#else
memp_malloc_pool_fn(const struct memp_desc *desc, const char *file, const int line)
#endif
{
 80100d4:	b580      	push	{r7, lr}
 80100d6:	b082      	sub	sp, #8
 80100d8:	af00      	add	r7, sp, #0
 80100da:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("invalid pool desc", desc != NULL);
 80100dc:	687b      	ldr	r3, [r7, #4]
 80100de:	2b00      	cmp	r3, #0
 80100e0:	d106      	bne.n	80100f0 <memp_malloc_pool+0x1c>
 80100e2:	4b0a      	ldr	r3, [pc, #40]	; (801010c <memp_malloc_pool+0x38>)
 80100e4:	f44f 729e 	mov.w	r2, #316	; 0x13c
 80100e8:	4909      	ldr	r1, [pc, #36]	; (8010110 <memp_malloc_pool+0x3c>)
 80100ea:	480a      	ldr	r0, [pc, #40]	; (8010114 <memp_malloc_pool+0x40>)
 80100ec:	f009 fdb0 	bl	8019c50 <iprintf>
  if (desc == NULL) {
 80100f0:	687b      	ldr	r3, [r7, #4]
 80100f2:	2b00      	cmp	r3, #0
 80100f4:	d101      	bne.n	80100fa <memp_malloc_pool+0x26>
    return NULL;
 80100f6:	2300      	movs	r3, #0
 80100f8:	e003      	b.n	8010102 <memp_malloc_pool+0x2e>
  }

#if !MEMP_OVERFLOW_CHECK
  return do_memp_malloc_pool(desc);
 80100fa:	6878      	ldr	r0, [r7, #4]
 80100fc:	f7ff ffc0 	bl	8010080 <do_memp_malloc_pool>
 8010100:	4603      	mov	r3, r0
#else
  return do_memp_malloc_pool_fn(desc, file, line);
#endif
}
 8010102:	4618      	mov	r0, r3
 8010104:	3708      	adds	r7, #8
 8010106:	46bd      	mov	sp, r7
 8010108:	bd80      	pop	{r7, pc}
 801010a:	bf00      	nop
 801010c:	0801c7f8 	.word	0x0801c7f8
 8010110:	0801c874 	.word	0x0801c874
 8010114:	0801c84c 	.word	0x0801c84c

08010118 <memp_malloc>:
#if !MEMP_OVERFLOW_CHECK
memp_malloc(memp_t type)
#else
memp_malloc_fn(memp_t type, const char *file, const int line)
#endif
{
 8010118:	b580      	push	{r7, lr}
 801011a:	b084      	sub	sp, #16
 801011c:	af00      	add	r7, sp, #0
 801011e:	4603      	mov	r3, r0
 8010120:	71fb      	strb	r3, [r7, #7]
  void *memp;
  LWIP_ERROR("memp_malloc: type < MEMP_MAX", (type < MEMP_MAX), return NULL;);
 8010122:	79fb      	ldrb	r3, [r7, #7]
 8010124:	2b08      	cmp	r3, #8
 8010126:	d908      	bls.n	801013a <memp_malloc+0x22>
 8010128:	4b0a      	ldr	r3, [pc, #40]	; (8010154 <memp_malloc+0x3c>)
 801012a:	f240 1257 	movw	r2, #343	; 0x157
 801012e:	490a      	ldr	r1, [pc, #40]	; (8010158 <memp_malloc+0x40>)
 8010130:	480a      	ldr	r0, [pc, #40]	; (801015c <memp_malloc+0x44>)
 8010132:	f009 fd8d 	bl	8019c50 <iprintf>
 8010136:	2300      	movs	r3, #0
 8010138:	e008      	b.n	801014c <memp_malloc+0x34>
#if MEMP_OVERFLOW_CHECK >= 2
  memp_overflow_check_all();
#endif /* MEMP_OVERFLOW_CHECK >= 2 */

#if !MEMP_OVERFLOW_CHECK
  memp = do_memp_malloc_pool(memp_pools[type]);
 801013a:	79fb      	ldrb	r3, [r7, #7]
 801013c:	4a08      	ldr	r2, [pc, #32]	; (8010160 <memp_malloc+0x48>)
 801013e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8010142:	4618      	mov	r0, r3
 8010144:	f7ff ff9c 	bl	8010080 <do_memp_malloc_pool>
 8010148:	60f8      	str	r0, [r7, #12]
#else
  memp = do_memp_malloc_pool_fn(memp_pools[type], file, line);
#endif

  return memp;
 801014a:	68fb      	ldr	r3, [r7, #12]
}
 801014c:	4618      	mov	r0, r3
 801014e:	3710      	adds	r7, #16
 8010150:	46bd      	mov	sp, r7
 8010152:	bd80      	pop	{r7, pc}
 8010154:	0801c7f8 	.word	0x0801c7f8
 8010158:	0801c888 	.word	0x0801c888
 801015c:	0801c84c 	.word	0x0801c84c
 8010160:	0801efd8 	.word	0x0801efd8

08010164 <do_memp_free_pool>:

static void
do_memp_free_pool(const struct memp_desc *desc, void *mem)
{
 8010164:	b580      	push	{r7, lr}
 8010166:	b084      	sub	sp, #16
 8010168:	af00      	add	r7, sp, #0
 801016a:	6078      	str	r0, [r7, #4]
 801016c:	6039      	str	r1, [r7, #0]
  struct memp *memp;
  SYS_ARCH_DECL_PROTECT(old_level);

  LWIP_ASSERT("memp_free: mem properly aligned",
 801016e:	683b      	ldr	r3, [r7, #0]
 8010170:	f003 0303 	and.w	r3, r3, #3
 8010174:	2b00      	cmp	r3, #0
 8010176:	d006      	beq.n	8010186 <do_memp_free_pool+0x22>
 8010178:	4b0a      	ldr	r3, [pc, #40]	; (80101a4 <do_memp_free_pool+0x40>)
 801017a:	f44f 72b6 	mov.w	r2, #364	; 0x16c
 801017e:	490a      	ldr	r1, [pc, #40]	; (80101a8 <do_memp_free_pool+0x44>)
 8010180:	480a      	ldr	r0, [pc, #40]	; (80101ac <do_memp_free_pool+0x48>)
 8010182:	f009 fd65 	bl	8019c50 <iprintf>
              ((mem_ptr_t)mem % MEM_ALIGNMENT) == 0);

  /* cast through void* to get rid of alignment warnings */
  memp = (struct memp *)(void *)((u8_t *)mem - MEMP_SIZE);
 8010186:	683b      	ldr	r3, [r7, #0]
 8010188:	60fb      	str	r3, [r7, #12]
#if MEMP_MEM_MALLOC
  LWIP_UNUSED_ARG(desc);
  SYS_ARCH_UNPROTECT(old_level);
  mem_free(memp);
#else /* MEMP_MEM_MALLOC */
  memp->next = *desc->tab;
 801018a:	687b      	ldr	r3, [r7, #4]
 801018c:	689b      	ldr	r3, [r3, #8]
 801018e:	681a      	ldr	r2, [r3, #0]
 8010190:	68fb      	ldr	r3, [r7, #12]
 8010192:	601a      	str	r2, [r3, #0]
  *desc->tab = memp;
 8010194:	687b      	ldr	r3, [r7, #4]
 8010196:	689b      	ldr	r3, [r3, #8]
 8010198:	68fa      	ldr	r2, [r7, #12]
 801019a:	601a      	str	r2, [r3, #0]
  LWIP_ASSERT("memp sanity", memp_sanity(desc));
#endif /* MEMP_SANITY_CHECK */

  SYS_ARCH_UNPROTECT(old_level);
#endif /* !MEMP_MEM_MALLOC */
}
 801019c:	bf00      	nop
 801019e:	3710      	adds	r7, #16
 80101a0:	46bd      	mov	sp, r7
 80101a2:	bd80      	pop	{r7, pc}
 80101a4:	0801c7f8 	.word	0x0801c7f8
 80101a8:	0801c8a8 	.word	0x0801c8a8
 80101ac:	0801c84c 	.word	0x0801c84c

080101b0 <memp_free_pool>:
 * @param desc the pool where to put mem
 * @param mem the memp element to free
 */
void
memp_free_pool(const struct memp_desc *desc, void *mem)
{
 80101b0:	b580      	push	{r7, lr}
 80101b2:	b082      	sub	sp, #8
 80101b4:	af00      	add	r7, sp, #0
 80101b6:	6078      	str	r0, [r7, #4]
 80101b8:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT("invalid pool desc", desc != NULL);
 80101ba:	687b      	ldr	r3, [r7, #4]
 80101bc:	2b00      	cmp	r3, #0
 80101be:	d106      	bne.n	80101ce <memp_free_pool+0x1e>
 80101c0:	4b0a      	ldr	r3, [pc, #40]	; (80101ec <memp_free_pool+0x3c>)
 80101c2:	f240 1295 	movw	r2, #405	; 0x195
 80101c6:	490a      	ldr	r1, [pc, #40]	; (80101f0 <memp_free_pool+0x40>)
 80101c8:	480a      	ldr	r0, [pc, #40]	; (80101f4 <memp_free_pool+0x44>)
 80101ca:	f009 fd41 	bl	8019c50 <iprintf>
  if ((desc == NULL) || (mem == NULL)) {
 80101ce:	687b      	ldr	r3, [r7, #4]
 80101d0:	2b00      	cmp	r3, #0
 80101d2:	d007      	beq.n	80101e4 <memp_free_pool+0x34>
 80101d4:	683b      	ldr	r3, [r7, #0]
 80101d6:	2b00      	cmp	r3, #0
 80101d8:	d004      	beq.n	80101e4 <memp_free_pool+0x34>
    return;
  }

  do_memp_free_pool(desc, mem);
 80101da:	6839      	ldr	r1, [r7, #0]
 80101dc:	6878      	ldr	r0, [r7, #4]
 80101de:	f7ff ffc1 	bl	8010164 <do_memp_free_pool>
 80101e2:	e000      	b.n	80101e6 <memp_free_pool+0x36>
    return;
 80101e4:	bf00      	nop
}
 80101e6:	3708      	adds	r7, #8
 80101e8:	46bd      	mov	sp, r7
 80101ea:	bd80      	pop	{r7, pc}
 80101ec:	0801c7f8 	.word	0x0801c7f8
 80101f0:	0801c874 	.word	0x0801c874
 80101f4:	0801c84c 	.word	0x0801c84c

080101f8 <memp_free>:
 * @param type the pool where to put mem
 * @param mem the memp element to free
 */
void
memp_free(memp_t type, void *mem)
{
 80101f8:	b580      	push	{r7, lr}
 80101fa:	b082      	sub	sp, #8
 80101fc:	af00      	add	r7, sp, #0
 80101fe:	4603      	mov	r3, r0
 8010200:	6039      	str	r1, [r7, #0]
 8010202:	71fb      	strb	r3, [r7, #7]
#ifdef LWIP_HOOK_MEMP_AVAILABLE
  struct memp *old_first;
#endif

  LWIP_ERROR("memp_free: type < MEMP_MAX", (type < MEMP_MAX), return;);
 8010204:	79fb      	ldrb	r3, [r7, #7]
 8010206:	2b08      	cmp	r3, #8
 8010208:	d907      	bls.n	801021a <memp_free+0x22>
 801020a:	4b0c      	ldr	r3, [pc, #48]	; (801023c <memp_free+0x44>)
 801020c:	f44f 72d5 	mov.w	r2, #426	; 0x1aa
 8010210:	490b      	ldr	r1, [pc, #44]	; (8010240 <memp_free+0x48>)
 8010212:	480c      	ldr	r0, [pc, #48]	; (8010244 <memp_free+0x4c>)
 8010214:	f009 fd1c 	bl	8019c50 <iprintf>
 8010218:	e00c      	b.n	8010234 <memp_free+0x3c>

  if (mem == NULL) {
 801021a:	683b      	ldr	r3, [r7, #0]
 801021c:	2b00      	cmp	r3, #0
 801021e:	d008      	beq.n	8010232 <memp_free+0x3a>

#ifdef LWIP_HOOK_MEMP_AVAILABLE
  old_first = *memp_pools[type]->tab;
#endif

  do_memp_free_pool(memp_pools[type], mem);
 8010220:	79fb      	ldrb	r3, [r7, #7]
 8010222:	4a09      	ldr	r2, [pc, #36]	; (8010248 <memp_free+0x50>)
 8010224:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8010228:	6839      	ldr	r1, [r7, #0]
 801022a:	4618      	mov	r0, r3
 801022c:	f7ff ff9a 	bl	8010164 <do_memp_free_pool>
 8010230:	e000      	b.n	8010234 <memp_free+0x3c>
    return;
 8010232:	bf00      	nop
#ifdef LWIP_HOOK_MEMP_AVAILABLE
  if (old_first == NULL) {
    LWIP_HOOK_MEMP_AVAILABLE(type);
  }
#endif
}
 8010234:	3708      	adds	r7, #8
 8010236:	46bd      	mov	sp, r7
 8010238:	bd80      	pop	{r7, pc}
 801023a:	bf00      	nop
 801023c:	0801c7f8 	.word	0x0801c7f8
 8010240:	0801c8c8 	.word	0x0801c8c8
 8010244:	0801c84c 	.word	0x0801c84c
 8010248:	0801efd8 	.word	0x0801efd8

0801024c <netif_init>:
}
#endif /* LWIP_HAVE_LOOPIF */

void
netif_init(void)
{
 801024c:	b480      	push	{r7}
 801024e:	af00      	add	r7, sp, #0

  netif_set_link_up(&loop_netif);
  netif_set_up(&loop_netif);

#endif /* LWIP_HAVE_LOOPIF */
}
 8010250:	bf00      	nop
 8010252:	46bd      	mov	sp, r7
 8010254:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010258:	4770      	bx	lr
	...

0801025c <netif_add>:
netif_add(struct netif *netif,
#if LWIP_IPV4
          const ip4_addr_t *ipaddr, const ip4_addr_t *netmask, const ip4_addr_t *gw,
#endif /* LWIP_IPV4 */
          void *state, netif_init_fn init, netif_input_fn input)
{
 801025c:	b580      	push	{r7, lr}
 801025e:	b086      	sub	sp, #24
 8010260:	af00      	add	r7, sp, #0
 8010262:	60f8      	str	r0, [r7, #12]
 8010264:	60b9      	str	r1, [r7, #8]
 8010266:	607a      	str	r2, [r7, #4]
 8010268:	603b      	str	r3, [r7, #0]
    LWIP_ASSERT("single netif already set", 0);
    return NULL;
  }
#endif

  LWIP_ERROR("netif_add: invalid netif", netif != NULL, return NULL);
 801026a:	68fb      	ldr	r3, [r7, #12]
 801026c:	2b00      	cmp	r3, #0
 801026e:	d108      	bne.n	8010282 <netif_add+0x26>
 8010270:	4b57      	ldr	r3, [pc, #348]	; (80103d0 <netif_add+0x174>)
 8010272:	f240 1227 	movw	r2, #295	; 0x127
 8010276:	4957      	ldr	r1, [pc, #348]	; (80103d4 <netif_add+0x178>)
 8010278:	4857      	ldr	r0, [pc, #348]	; (80103d8 <netif_add+0x17c>)
 801027a:	f009 fce9 	bl	8019c50 <iprintf>
 801027e:	2300      	movs	r3, #0
 8010280:	e0a2      	b.n	80103c8 <netif_add+0x16c>
  LWIP_ERROR("netif_add: No init function given", init != NULL, return NULL);
 8010282:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010284:	2b00      	cmp	r3, #0
 8010286:	d108      	bne.n	801029a <netif_add+0x3e>
 8010288:	4b51      	ldr	r3, [pc, #324]	; (80103d0 <netif_add+0x174>)
 801028a:	f44f 7294 	mov.w	r2, #296	; 0x128
 801028e:	4953      	ldr	r1, [pc, #332]	; (80103dc <netif_add+0x180>)
 8010290:	4851      	ldr	r0, [pc, #324]	; (80103d8 <netif_add+0x17c>)
 8010292:	f009 fcdd 	bl	8019c50 <iprintf>
 8010296:	2300      	movs	r3, #0
 8010298:	e096      	b.n	80103c8 <netif_add+0x16c>

#if LWIP_IPV4
  if (ipaddr == NULL) {
 801029a:	68bb      	ldr	r3, [r7, #8]
 801029c:	2b00      	cmp	r3, #0
 801029e:	d101      	bne.n	80102a4 <netif_add+0x48>
    ipaddr = ip_2_ip4(IP4_ADDR_ANY);
 80102a0:	4b4f      	ldr	r3, [pc, #316]	; (80103e0 <netif_add+0x184>)
 80102a2:	60bb      	str	r3, [r7, #8]
  }
  if (netmask == NULL) {
 80102a4:	687b      	ldr	r3, [r7, #4]
 80102a6:	2b00      	cmp	r3, #0
 80102a8:	d101      	bne.n	80102ae <netif_add+0x52>
    netmask = ip_2_ip4(IP4_ADDR_ANY);
 80102aa:	4b4d      	ldr	r3, [pc, #308]	; (80103e0 <netif_add+0x184>)
 80102ac:	607b      	str	r3, [r7, #4]
  }
  if (gw == NULL) {
 80102ae:	683b      	ldr	r3, [r7, #0]
 80102b0:	2b00      	cmp	r3, #0
 80102b2:	d101      	bne.n	80102b8 <netif_add+0x5c>
    gw = ip_2_ip4(IP4_ADDR_ANY);
 80102b4:	4b4a      	ldr	r3, [pc, #296]	; (80103e0 <netif_add+0x184>)
 80102b6:	603b      	str	r3, [r7, #0]
  }

  /* reset new interface configuration state */
  ip_addr_set_zero_ip4(&netif->ip_addr);
 80102b8:	68fb      	ldr	r3, [r7, #12]
 80102ba:	2200      	movs	r2, #0
 80102bc:	605a      	str	r2, [r3, #4]
  ip_addr_set_zero_ip4(&netif->netmask);
 80102be:	68fb      	ldr	r3, [r7, #12]
 80102c0:	2200      	movs	r2, #0
 80102c2:	609a      	str	r2, [r3, #8]
  ip_addr_set_zero_ip4(&netif->gw);
 80102c4:	68fb      	ldr	r3, [r7, #12]
 80102c6:	2200      	movs	r2, #0
 80102c8:	60da      	str	r2, [r3, #12]
  netif->output = netif_null_output_ip4;
 80102ca:	68fb      	ldr	r3, [r7, #12]
 80102cc:	4a45      	ldr	r2, [pc, #276]	; (80103e4 <netif_add+0x188>)
 80102ce:	615a      	str	r2, [r3, #20]
#endif /* LWIP_IPV6_ADDRESS_LIFETIMES */
  }
  netif->output_ip6 = netif_null_output_ip6;
#endif /* LWIP_IPV6 */
  NETIF_SET_CHECKSUM_CTRL(netif, NETIF_CHECKSUM_ENABLE_ALL);
  netif->mtu = 0;
 80102d0:	68fb      	ldr	r3, [r7, #12]
 80102d2:	2200      	movs	r2, #0
 80102d4:	849a      	strh	r2, [r3, #36]	; 0x24
  netif->flags = 0;
 80102d6:	68fb      	ldr	r3, [r7, #12]
 80102d8:	2200      	movs	r2, #0
 80102da:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
#endif /* LWIP_IPV6 */
#if LWIP_NETIF_STATUS_CALLBACK
  netif->status_callback = NULL;
#endif /* LWIP_NETIF_STATUS_CALLBACK */
#if LWIP_NETIF_LINK_CALLBACK
  netif->link_callback = NULL;
 80102de:	68fb      	ldr	r3, [r7, #12]
 80102e0:	2200      	movs	r2, #0
 80102e2:	61da      	str	r2, [r3, #28]
  netif->loop_first = NULL;
  netif->loop_last = NULL;
#endif /* ENABLE_LOOPBACK */

  /* remember netif specific state information data */
  netif->state = state;
 80102e4:	68fb      	ldr	r3, [r7, #12]
 80102e6:	6a3a      	ldr	r2, [r7, #32]
 80102e8:	621a      	str	r2, [r3, #32]
  netif->num = netif_num;
 80102ea:	4b3f      	ldr	r3, [pc, #252]	; (80103e8 <netif_add+0x18c>)
 80102ec:	781a      	ldrb	r2, [r3, #0]
 80102ee:	68fb      	ldr	r3, [r7, #12]
 80102f0:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  netif->input = input;
 80102f4:	68fb      	ldr	r3, [r7, #12]
 80102f6:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80102f8:	611a      	str	r2, [r3, #16]
#if ENABLE_LOOPBACK && LWIP_LOOPBACK_MAX_PBUFS
  netif->loop_cnt_current = 0;
#endif /* ENABLE_LOOPBACK && LWIP_LOOPBACK_MAX_PBUFS */

#if LWIP_IPV4
  netif_set_addr(netif, ipaddr, netmask, gw);
 80102fa:	683b      	ldr	r3, [r7, #0]
 80102fc:	687a      	ldr	r2, [r7, #4]
 80102fe:	68b9      	ldr	r1, [r7, #8]
 8010300:	68f8      	ldr	r0, [r7, #12]
 8010302:	f000 f913 	bl	801052c <netif_set_addr>
#endif /* LWIP_IPV4 */

  /* call user specified initialization function for netif */
  if (init(netif) != ERR_OK) {
 8010306:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010308:	68f8      	ldr	r0, [r7, #12]
 801030a:	4798      	blx	r3
 801030c:	4603      	mov	r3, r0
 801030e:	2b00      	cmp	r3, #0
 8010310:	d001      	beq.n	8010316 <netif_add+0xba>
    return NULL;
 8010312:	2300      	movs	r3, #0
 8010314:	e058      	b.n	80103c8 <netif_add+0x16c>
     */
  {
    struct netif *netif2;
    int num_netifs;
    do {
      if (netif->num == 255) {
 8010316:	68fb      	ldr	r3, [r7, #12]
 8010318:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 801031c:	2bff      	cmp	r3, #255	; 0xff
 801031e:	d103      	bne.n	8010328 <netif_add+0xcc>
        netif->num = 0;
 8010320:	68fb      	ldr	r3, [r7, #12]
 8010322:	2200      	movs	r2, #0
 8010324:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
      }
      num_netifs = 0;
 8010328:	2300      	movs	r3, #0
 801032a:	613b      	str	r3, [r7, #16]
      for (netif2 = netif_list; netif2 != NULL; netif2 = netif2->next) {
 801032c:	4b2f      	ldr	r3, [pc, #188]	; (80103ec <netif_add+0x190>)
 801032e:	681b      	ldr	r3, [r3, #0]
 8010330:	617b      	str	r3, [r7, #20]
 8010332:	e02b      	b.n	801038c <netif_add+0x130>
        LWIP_ASSERT("netif already added", netif2 != netif);
 8010334:	697a      	ldr	r2, [r7, #20]
 8010336:	68fb      	ldr	r3, [r7, #12]
 8010338:	429a      	cmp	r2, r3
 801033a:	d106      	bne.n	801034a <netif_add+0xee>
 801033c:	4b24      	ldr	r3, [pc, #144]	; (80103d0 <netif_add+0x174>)
 801033e:	f240 128b 	movw	r2, #395	; 0x18b
 8010342:	492b      	ldr	r1, [pc, #172]	; (80103f0 <netif_add+0x194>)
 8010344:	4824      	ldr	r0, [pc, #144]	; (80103d8 <netif_add+0x17c>)
 8010346:	f009 fc83 	bl	8019c50 <iprintf>
        num_netifs++;
 801034a:	693b      	ldr	r3, [r7, #16]
 801034c:	3301      	adds	r3, #1
 801034e:	613b      	str	r3, [r7, #16]
        LWIP_ASSERT("too many netifs, max. supported number is 255", num_netifs <= 255);
 8010350:	693b      	ldr	r3, [r7, #16]
 8010352:	2bff      	cmp	r3, #255	; 0xff
 8010354:	dd06      	ble.n	8010364 <netif_add+0x108>
 8010356:	4b1e      	ldr	r3, [pc, #120]	; (80103d0 <netif_add+0x174>)
 8010358:	f240 128d 	movw	r2, #397	; 0x18d
 801035c:	4925      	ldr	r1, [pc, #148]	; (80103f4 <netif_add+0x198>)
 801035e:	481e      	ldr	r0, [pc, #120]	; (80103d8 <netif_add+0x17c>)
 8010360:	f009 fc76 	bl	8019c50 <iprintf>
        if (netif2->num == netif->num) {
 8010364:	697b      	ldr	r3, [r7, #20]
 8010366:	f893 2030 	ldrb.w	r2, [r3, #48]	; 0x30
 801036a:	68fb      	ldr	r3, [r7, #12]
 801036c:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8010370:	429a      	cmp	r2, r3
 8010372:	d108      	bne.n	8010386 <netif_add+0x12a>
          netif->num++;
 8010374:	68fb      	ldr	r3, [r7, #12]
 8010376:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 801037a:	3301      	adds	r3, #1
 801037c:	b2da      	uxtb	r2, r3
 801037e:	68fb      	ldr	r3, [r7, #12]
 8010380:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
          break;
 8010384:	e005      	b.n	8010392 <netif_add+0x136>
      for (netif2 = netif_list; netif2 != NULL; netif2 = netif2->next) {
 8010386:	697b      	ldr	r3, [r7, #20]
 8010388:	681b      	ldr	r3, [r3, #0]
 801038a:	617b      	str	r3, [r7, #20]
 801038c:	697b      	ldr	r3, [r7, #20]
 801038e:	2b00      	cmp	r3, #0
 8010390:	d1d0      	bne.n	8010334 <netif_add+0xd8>
        }
      }
    } while (netif2 != NULL);
 8010392:	697b      	ldr	r3, [r7, #20]
 8010394:	2b00      	cmp	r3, #0
 8010396:	d1be      	bne.n	8010316 <netif_add+0xba>
  }
  if (netif->num == 254) {
 8010398:	68fb      	ldr	r3, [r7, #12]
 801039a:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 801039e:	2bfe      	cmp	r3, #254	; 0xfe
 80103a0:	d103      	bne.n	80103aa <netif_add+0x14e>
    netif_num = 0;
 80103a2:	4b11      	ldr	r3, [pc, #68]	; (80103e8 <netif_add+0x18c>)
 80103a4:	2200      	movs	r2, #0
 80103a6:	701a      	strb	r2, [r3, #0]
 80103a8:	e006      	b.n	80103b8 <netif_add+0x15c>
  } else {
    netif_num = (u8_t)(netif->num + 1);
 80103aa:	68fb      	ldr	r3, [r7, #12]
 80103ac:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 80103b0:	3301      	adds	r3, #1
 80103b2:	b2da      	uxtb	r2, r3
 80103b4:	4b0c      	ldr	r3, [pc, #48]	; (80103e8 <netif_add+0x18c>)
 80103b6:	701a      	strb	r2, [r3, #0]
  }

  /* add this netif to the list */
  netif->next = netif_list;
 80103b8:	4b0c      	ldr	r3, [pc, #48]	; (80103ec <netif_add+0x190>)
 80103ba:	681a      	ldr	r2, [r3, #0]
 80103bc:	68fb      	ldr	r3, [r7, #12]
 80103be:	601a      	str	r2, [r3, #0]
  netif_list = netif;
 80103c0:	4a0a      	ldr	r2, [pc, #40]	; (80103ec <netif_add+0x190>)
 80103c2:	68fb      	ldr	r3, [r7, #12]
 80103c4:	6013      	str	r3, [r2, #0]
#endif /* LWIP_IPV4 */
  LWIP_DEBUGF(NETIF_DEBUG, ("\n"));

  netif_invoke_ext_callback(netif, LWIP_NSC_NETIF_ADDED, NULL);

  return netif;
 80103c6:	68fb      	ldr	r3, [r7, #12]
}
 80103c8:	4618      	mov	r0, r3
 80103ca:	3718      	adds	r7, #24
 80103cc:	46bd      	mov	sp, r7
 80103ce:	bd80      	pop	{r7, pc}
 80103d0:	0801c8e4 	.word	0x0801c8e4
 80103d4:	0801c978 	.word	0x0801c978
 80103d8:	0801c934 	.word	0x0801c934
 80103dc:	0801c994 	.word	0x0801c994
 80103e0:	0801f03c 	.word	0x0801f03c
 80103e4:	08010807 	.word	0x08010807
 80103e8:	200070d4 	.word	0x200070d4
 80103ec:	200070cc 	.word	0x200070cc
 80103f0:	0801c9b8 	.word	0x0801c9b8
 80103f4:	0801c9cc 	.word	0x0801c9cc

080103f8 <netif_do_ip_addr_changed>:

static void
netif_do_ip_addr_changed(const ip_addr_t *old_addr, const ip_addr_t *new_addr)
{
 80103f8:	b580      	push	{r7, lr}
 80103fa:	b082      	sub	sp, #8
 80103fc:	af00      	add	r7, sp, #0
 80103fe:	6078      	str	r0, [r7, #4]
 8010400:	6039      	str	r1, [r7, #0]
#if LWIP_TCP
  tcp_netif_ip_addr_changed(old_addr, new_addr);
 8010402:	6839      	ldr	r1, [r7, #0]
 8010404:	6878      	ldr	r0, [r7, #4]
 8010406:	f002 fb27 	bl	8012a58 <tcp_netif_ip_addr_changed>
#endif /* LWIP_TCP */
#if LWIP_UDP
  udp_netif_ip_addr_changed(old_addr, new_addr);
 801040a:	6839      	ldr	r1, [r7, #0]
 801040c:	6878      	ldr	r0, [r7, #4]
 801040e:	f006 fbc9 	bl	8016ba4 <udp_netif_ip_addr_changed>
#endif /* LWIP_UDP */
#if LWIP_RAW
  raw_netif_ip_addr_changed(old_addr, new_addr);
#endif /* LWIP_RAW */
}
 8010412:	bf00      	nop
 8010414:	3708      	adds	r7, #8
 8010416:	46bd      	mov	sp, r7
 8010418:	bd80      	pop	{r7, pc}
	...

0801041c <netif_do_set_ipaddr>:

#if LWIP_IPV4
static int
netif_do_set_ipaddr(struct netif *netif, const ip4_addr_t *ipaddr, ip_addr_t *old_addr)
{
 801041c:	b580      	push	{r7, lr}
 801041e:	b086      	sub	sp, #24
 8010420:	af00      	add	r7, sp, #0
 8010422:	60f8      	str	r0, [r7, #12]
 8010424:	60b9      	str	r1, [r7, #8]
 8010426:	607a      	str	r2, [r7, #4]
  LWIP_ASSERT("invalid pointer", ipaddr != NULL);
 8010428:	68bb      	ldr	r3, [r7, #8]
 801042a:	2b00      	cmp	r3, #0
 801042c:	d106      	bne.n	801043c <netif_do_set_ipaddr+0x20>
 801042e:	4b1d      	ldr	r3, [pc, #116]	; (80104a4 <netif_do_set_ipaddr+0x88>)
 8010430:	f240 12cb 	movw	r2, #459	; 0x1cb
 8010434:	491c      	ldr	r1, [pc, #112]	; (80104a8 <netif_do_set_ipaddr+0x8c>)
 8010436:	481d      	ldr	r0, [pc, #116]	; (80104ac <netif_do_set_ipaddr+0x90>)
 8010438:	f009 fc0a 	bl	8019c50 <iprintf>
  LWIP_ASSERT("invalid pointer", old_addr != NULL);
 801043c:	687b      	ldr	r3, [r7, #4]
 801043e:	2b00      	cmp	r3, #0
 8010440:	d106      	bne.n	8010450 <netif_do_set_ipaddr+0x34>
 8010442:	4b18      	ldr	r3, [pc, #96]	; (80104a4 <netif_do_set_ipaddr+0x88>)
 8010444:	f44f 72e6 	mov.w	r2, #460	; 0x1cc
 8010448:	4917      	ldr	r1, [pc, #92]	; (80104a8 <netif_do_set_ipaddr+0x8c>)
 801044a:	4818      	ldr	r0, [pc, #96]	; (80104ac <netif_do_set_ipaddr+0x90>)
 801044c:	f009 fc00 	bl	8019c50 <iprintf>

  /* address is actually being changed? */
  if (ip4_addr_cmp(ipaddr, netif_ip4_addr(netif)) == 0) {
 8010450:	68bb      	ldr	r3, [r7, #8]
 8010452:	681a      	ldr	r2, [r3, #0]
 8010454:	68fb      	ldr	r3, [r7, #12]
 8010456:	3304      	adds	r3, #4
 8010458:	681b      	ldr	r3, [r3, #0]
 801045a:	429a      	cmp	r2, r3
 801045c:	d01c      	beq.n	8010498 <netif_do_set_ipaddr+0x7c>
    ip_addr_t new_addr;
    *ip_2_ip4(&new_addr) = *ipaddr;
 801045e:	68bb      	ldr	r3, [r7, #8]
 8010460:	681b      	ldr	r3, [r3, #0]
 8010462:	617b      	str	r3, [r7, #20]
    IP_SET_TYPE_VAL(new_addr, IPADDR_TYPE_V4);

    ip_addr_copy(*old_addr, *netif_ip_addr4(netif));
 8010464:	68fb      	ldr	r3, [r7, #12]
 8010466:	3304      	adds	r3, #4
 8010468:	681a      	ldr	r2, [r3, #0]
 801046a:	687b      	ldr	r3, [r7, #4]
 801046c:	601a      	str	r2, [r3, #0]

    LWIP_DEBUGF(NETIF_DEBUG | LWIP_DBG_STATE, ("netif_set_ipaddr: netif address being changed\n"));
    netif_do_ip_addr_changed(old_addr, &new_addr);
 801046e:	f107 0314 	add.w	r3, r7, #20
 8010472:	4619      	mov	r1, r3
 8010474:	6878      	ldr	r0, [r7, #4]
 8010476:	f7ff ffbf 	bl	80103f8 <netif_do_ip_addr_changed>

    mib2_remove_ip4(netif);
    mib2_remove_route_ip4(0, netif);
    /* set new IP address to netif */
    ip4_addr_set(ip_2_ip4(&netif->ip_addr), ipaddr);
 801047a:	68bb      	ldr	r3, [r7, #8]
 801047c:	2b00      	cmp	r3, #0
 801047e:	d002      	beq.n	8010486 <netif_do_set_ipaddr+0x6a>
 8010480:	68bb      	ldr	r3, [r7, #8]
 8010482:	681b      	ldr	r3, [r3, #0]
 8010484:	e000      	b.n	8010488 <netif_do_set_ipaddr+0x6c>
 8010486:	2300      	movs	r3, #0
 8010488:	68fa      	ldr	r2, [r7, #12]
 801048a:	6053      	str	r3, [r2, #4]
    IP_SET_TYPE_VAL(netif->ip_addr, IPADDR_TYPE_V4);
    mib2_add_ip4(netif);
    mib2_add_route_ip4(0, netif);

    netif_issue_reports(netif, NETIF_REPORT_TYPE_IPV4);
 801048c:	2101      	movs	r1, #1
 801048e:	68f8      	ldr	r0, [r7, #12]
 8010490:	f000 f8d2 	bl	8010638 <netif_issue_reports>

    NETIF_STATUS_CALLBACK(netif);
    return 1; /* address changed */
 8010494:	2301      	movs	r3, #1
 8010496:	e000      	b.n	801049a <netif_do_set_ipaddr+0x7e>
  }
  return 0; /* address unchanged */
 8010498:	2300      	movs	r3, #0
}
 801049a:	4618      	mov	r0, r3
 801049c:	3718      	adds	r7, #24
 801049e:	46bd      	mov	sp, r7
 80104a0:	bd80      	pop	{r7, pc}
 80104a2:	bf00      	nop
 80104a4:	0801c8e4 	.word	0x0801c8e4
 80104a8:	0801c9fc 	.word	0x0801c9fc
 80104ac:	0801c934 	.word	0x0801c934

080104b0 <netif_do_set_netmask>:
  }
}

static int
netif_do_set_netmask(struct netif *netif, const ip4_addr_t *netmask, ip_addr_t *old_nm)
{
 80104b0:	b480      	push	{r7}
 80104b2:	b085      	sub	sp, #20
 80104b4:	af00      	add	r7, sp, #0
 80104b6:	60f8      	str	r0, [r7, #12]
 80104b8:	60b9      	str	r1, [r7, #8]
 80104ba:	607a      	str	r2, [r7, #4]
  /* address is actually being changed? */
  if (ip4_addr_cmp(netmask, netif_ip4_netmask(netif)) == 0) {
 80104bc:	68bb      	ldr	r3, [r7, #8]
 80104be:	681a      	ldr	r2, [r3, #0]
 80104c0:	68fb      	ldr	r3, [r7, #12]
 80104c2:	3308      	adds	r3, #8
 80104c4:	681b      	ldr	r3, [r3, #0]
 80104c6:	429a      	cmp	r2, r3
 80104c8:	d00a      	beq.n	80104e0 <netif_do_set_netmask+0x30>
#else
    LWIP_UNUSED_ARG(old_nm);
#endif
    mib2_remove_route_ip4(0, netif);
    /* set new netmask to netif */
    ip4_addr_set(ip_2_ip4(&netif->netmask), netmask);
 80104ca:	68bb      	ldr	r3, [r7, #8]
 80104cc:	2b00      	cmp	r3, #0
 80104ce:	d002      	beq.n	80104d6 <netif_do_set_netmask+0x26>
 80104d0:	68bb      	ldr	r3, [r7, #8]
 80104d2:	681b      	ldr	r3, [r3, #0]
 80104d4:	e000      	b.n	80104d8 <netif_do_set_netmask+0x28>
 80104d6:	2300      	movs	r3, #0
 80104d8:	68fa      	ldr	r2, [r7, #12]
 80104da:	6093      	str	r3, [r2, #8]
                netif->name[0], netif->name[1],
                ip4_addr1_16(netif_ip4_netmask(netif)),
                ip4_addr2_16(netif_ip4_netmask(netif)),
                ip4_addr3_16(netif_ip4_netmask(netif)),
                ip4_addr4_16(netif_ip4_netmask(netif))));
    return 1; /* netmask changed */
 80104dc:	2301      	movs	r3, #1
 80104de:	e000      	b.n	80104e2 <netif_do_set_netmask+0x32>
  }
  return 0; /* netmask unchanged */
 80104e0:	2300      	movs	r3, #0
}
 80104e2:	4618      	mov	r0, r3
 80104e4:	3714      	adds	r7, #20
 80104e6:	46bd      	mov	sp, r7
 80104e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80104ec:	4770      	bx	lr

080104ee <netif_do_set_gw>:
  }
}

static int
netif_do_set_gw(struct netif *netif, const ip4_addr_t *gw, ip_addr_t *old_gw)
{
 80104ee:	b480      	push	{r7}
 80104f0:	b085      	sub	sp, #20
 80104f2:	af00      	add	r7, sp, #0
 80104f4:	60f8      	str	r0, [r7, #12]
 80104f6:	60b9      	str	r1, [r7, #8]
 80104f8:	607a      	str	r2, [r7, #4]
  /* address is actually being changed? */
  if (ip4_addr_cmp(gw, netif_ip4_gw(netif)) == 0) {
 80104fa:	68bb      	ldr	r3, [r7, #8]
 80104fc:	681a      	ldr	r2, [r3, #0]
 80104fe:	68fb      	ldr	r3, [r7, #12]
 8010500:	330c      	adds	r3, #12
 8010502:	681b      	ldr	r3, [r3, #0]
 8010504:	429a      	cmp	r2, r3
 8010506:	d00a      	beq.n	801051e <netif_do_set_gw+0x30>
    ip_addr_copy(*old_gw, *netif_ip_gw4(netif));
#else
    LWIP_UNUSED_ARG(old_gw);
#endif

    ip4_addr_set(ip_2_ip4(&netif->gw), gw);
 8010508:	68bb      	ldr	r3, [r7, #8]
 801050a:	2b00      	cmp	r3, #0
 801050c:	d002      	beq.n	8010514 <netif_do_set_gw+0x26>
 801050e:	68bb      	ldr	r3, [r7, #8]
 8010510:	681b      	ldr	r3, [r3, #0]
 8010512:	e000      	b.n	8010516 <netif_do_set_gw+0x28>
 8010514:	2300      	movs	r3, #0
 8010516:	68fa      	ldr	r2, [r7, #12]
 8010518:	60d3      	str	r3, [r2, #12]
                netif->name[0], netif->name[1],
                ip4_addr1_16(netif_ip4_gw(netif)),
                ip4_addr2_16(netif_ip4_gw(netif)),
                ip4_addr3_16(netif_ip4_gw(netif)),
                ip4_addr4_16(netif_ip4_gw(netif))));
    return 1; /* gateway changed */
 801051a:	2301      	movs	r3, #1
 801051c:	e000      	b.n	8010520 <netif_do_set_gw+0x32>
  }
  return 0; /* gateway unchanged */
 801051e:	2300      	movs	r3, #0
}
 8010520:	4618      	mov	r0, r3
 8010522:	3714      	adds	r7, #20
 8010524:	46bd      	mov	sp, r7
 8010526:	f85d 7b04 	ldr.w	r7, [sp], #4
 801052a:	4770      	bx	lr

0801052c <netif_set_addr>:
 * @param gw the new default gateway
 */
void
netif_set_addr(struct netif *netif, const ip4_addr_t *ipaddr, const ip4_addr_t *netmask,
               const ip4_addr_t *gw)
{
 801052c:	b580      	push	{r7, lr}
 801052e:	b088      	sub	sp, #32
 8010530:	af00      	add	r7, sp, #0
 8010532:	60f8      	str	r0, [r7, #12]
 8010534:	60b9      	str	r1, [r7, #8]
 8010536:	607a      	str	r2, [r7, #4]
 8010538:	603b      	str	r3, [r7, #0]
  ip_addr_t old_nm_val;
  ip_addr_t old_gw_val;
  ip_addr_t *old_nm = &old_nm_val;
  ip_addr_t *old_gw = &old_gw_val;
#else
  ip_addr_t *old_nm = NULL;
 801053a:	2300      	movs	r3, #0
 801053c:	61fb      	str	r3, [r7, #28]
  ip_addr_t *old_gw = NULL;
 801053e:	2300      	movs	r3, #0
 8010540:	61bb      	str	r3, [r7, #24]
  int remove;

  LWIP_ASSERT_CORE_LOCKED();

  /* Don't propagate NULL pointer (IPv4 ANY) to subsequent functions */
  if (ipaddr == NULL) {
 8010542:	68bb      	ldr	r3, [r7, #8]
 8010544:	2b00      	cmp	r3, #0
 8010546:	d101      	bne.n	801054c <netif_set_addr+0x20>
    ipaddr = IP4_ADDR_ANY4;
 8010548:	4b1c      	ldr	r3, [pc, #112]	; (80105bc <netif_set_addr+0x90>)
 801054a:	60bb      	str	r3, [r7, #8]
  }
  if (netmask == NULL) {
 801054c:	687b      	ldr	r3, [r7, #4]
 801054e:	2b00      	cmp	r3, #0
 8010550:	d101      	bne.n	8010556 <netif_set_addr+0x2a>
    netmask = IP4_ADDR_ANY4;
 8010552:	4b1a      	ldr	r3, [pc, #104]	; (80105bc <netif_set_addr+0x90>)
 8010554:	607b      	str	r3, [r7, #4]
  }
  if (gw == NULL) {
 8010556:	683b      	ldr	r3, [r7, #0]
 8010558:	2b00      	cmp	r3, #0
 801055a:	d101      	bne.n	8010560 <netif_set_addr+0x34>
    gw = IP4_ADDR_ANY4;
 801055c:	4b17      	ldr	r3, [pc, #92]	; (80105bc <netif_set_addr+0x90>)
 801055e:	603b      	str	r3, [r7, #0]
  }

  remove = ip4_addr_isany(ipaddr);
 8010560:	68bb      	ldr	r3, [r7, #8]
 8010562:	2b00      	cmp	r3, #0
 8010564:	d003      	beq.n	801056e <netif_set_addr+0x42>
 8010566:	68bb      	ldr	r3, [r7, #8]
 8010568:	681b      	ldr	r3, [r3, #0]
 801056a:	2b00      	cmp	r3, #0
 801056c:	d101      	bne.n	8010572 <netif_set_addr+0x46>
 801056e:	2301      	movs	r3, #1
 8010570:	e000      	b.n	8010574 <netif_set_addr+0x48>
 8010572:	2300      	movs	r3, #0
 8010574:	617b      	str	r3, [r7, #20]
  if (remove) {
 8010576:	697b      	ldr	r3, [r7, #20]
 8010578:	2b00      	cmp	r3, #0
 801057a:	d006      	beq.n	801058a <netif_set_addr+0x5e>
    /* when removing an address, we have to remove it *before* changing netmask/gw
       to ensure that tcp RST segment can be sent correctly */
    if (netif_do_set_ipaddr(netif, ipaddr, &old_addr)) {
 801057c:	f107 0310 	add.w	r3, r7, #16
 8010580:	461a      	mov	r2, r3
 8010582:	68b9      	ldr	r1, [r7, #8]
 8010584:	68f8      	ldr	r0, [r7, #12]
 8010586:	f7ff ff49 	bl	801041c <netif_do_set_ipaddr>
      change_reason |= LWIP_NSC_IPV4_ADDRESS_CHANGED;
      cb_args.ipv4_changed.old_address = &old_addr;
#endif
    }
  }
  if (netif_do_set_netmask(netif, netmask, old_nm)) {
 801058a:	69fa      	ldr	r2, [r7, #28]
 801058c:	6879      	ldr	r1, [r7, #4]
 801058e:	68f8      	ldr	r0, [r7, #12]
 8010590:	f7ff ff8e 	bl	80104b0 <netif_do_set_netmask>
#if LWIP_NETIF_EXT_STATUS_CALLBACK
    change_reason |= LWIP_NSC_IPV4_NETMASK_CHANGED;
    cb_args.ipv4_changed.old_netmask = old_nm;
#endif
  }
  if (netif_do_set_gw(netif, gw, old_gw)) {
 8010594:	69ba      	ldr	r2, [r7, #24]
 8010596:	6839      	ldr	r1, [r7, #0]
 8010598:	68f8      	ldr	r0, [r7, #12]
 801059a:	f7ff ffa8 	bl	80104ee <netif_do_set_gw>
#if LWIP_NETIF_EXT_STATUS_CALLBACK
    change_reason |= LWIP_NSC_IPV4_GATEWAY_CHANGED;
    cb_args.ipv4_changed.old_gw = old_gw;
#endif
  }
  if (!remove) {
 801059e:	697b      	ldr	r3, [r7, #20]
 80105a0:	2b00      	cmp	r3, #0
 80105a2:	d106      	bne.n	80105b2 <netif_set_addr+0x86>
    /* set ipaddr last to ensure netmask/gw have been set when status callback is called */
    if (netif_do_set_ipaddr(netif, ipaddr, &old_addr)) {
 80105a4:	f107 0310 	add.w	r3, r7, #16
 80105a8:	461a      	mov	r2, r3
 80105aa:	68b9      	ldr	r1, [r7, #8]
 80105ac:	68f8      	ldr	r0, [r7, #12]
 80105ae:	f7ff ff35 	bl	801041c <netif_do_set_ipaddr>
  if (change_reason != LWIP_NSC_NONE) {
    change_reason |= LWIP_NSC_IPV4_SETTINGS_CHANGED;
    netif_invoke_ext_callback(netif, change_reason, &cb_args);
  }
#endif
}
 80105b2:	bf00      	nop
 80105b4:	3720      	adds	r7, #32
 80105b6:	46bd      	mov	sp, r7
 80105b8:	bd80      	pop	{r7, pc}
 80105ba:	bf00      	nop
 80105bc:	0801f03c 	.word	0x0801f03c

080105c0 <netif_set_default>:
 *
 * @param netif the default network interface
 */
void
netif_set_default(struct netif *netif)
{
 80105c0:	b480      	push	{r7}
 80105c2:	b083      	sub	sp, #12
 80105c4:	af00      	add	r7, sp, #0
 80105c6:	6078      	str	r0, [r7, #4]
    mib2_remove_route_ip4(1, netif);
  } else {
    /* install default route */
    mib2_add_route_ip4(1, netif);
  }
  netif_default = netif;
 80105c8:	4a04      	ldr	r2, [pc, #16]	; (80105dc <netif_set_default+0x1c>)
 80105ca:	687b      	ldr	r3, [r7, #4]
 80105cc:	6013      	str	r3, [r2, #0]
  LWIP_DEBUGF(NETIF_DEBUG, ("netif: setting default interface %c%c\n",
                            netif ? netif->name[0] : '\'', netif ? netif->name[1] : '\''));
}
 80105ce:	bf00      	nop
 80105d0:	370c      	adds	r7, #12
 80105d2:	46bd      	mov	sp, r7
 80105d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80105d8:	4770      	bx	lr
 80105da:	bf00      	nop
 80105dc:	200070d0 	.word	0x200070d0

080105e0 <netif_set_up>:
 * Bring an interface up, available for processing
 * traffic.
 */
void
netif_set_up(struct netif *netif)
{
 80105e0:	b580      	push	{r7, lr}
 80105e2:	b082      	sub	sp, #8
 80105e4:	af00      	add	r7, sp, #0
 80105e6:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("netif_set_up: invalid netif", netif != NULL, return);
 80105e8:	687b      	ldr	r3, [r7, #4]
 80105ea:	2b00      	cmp	r3, #0
 80105ec:	d107      	bne.n	80105fe <netif_set_up+0x1e>
 80105ee:	4b0f      	ldr	r3, [pc, #60]	; (801062c <netif_set_up+0x4c>)
 80105f0:	f44f 7254 	mov.w	r2, #848	; 0x350
 80105f4:	490e      	ldr	r1, [pc, #56]	; (8010630 <netif_set_up+0x50>)
 80105f6:	480f      	ldr	r0, [pc, #60]	; (8010634 <netif_set_up+0x54>)
 80105f8:	f009 fb2a 	bl	8019c50 <iprintf>
 80105fc:	e013      	b.n	8010626 <netif_set_up+0x46>

  if (!(netif->flags & NETIF_FLAG_UP)) {
 80105fe:	687b      	ldr	r3, [r7, #4]
 8010600:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8010604:	f003 0301 	and.w	r3, r3, #1
 8010608:	2b00      	cmp	r3, #0
 801060a:	d10c      	bne.n	8010626 <netif_set_up+0x46>
    netif_set_flags(netif, NETIF_FLAG_UP);
 801060c:	687b      	ldr	r3, [r7, #4]
 801060e:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8010612:	f043 0301 	orr.w	r3, r3, #1
 8010616:	b2da      	uxtb	r2, r3
 8010618:	687b      	ldr	r3, [r7, #4]
 801061a:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
      args.status_changed.state = 1;
      netif_invoke_ext_callback(netif, LWIP_NSC_STATUS_CHANGED, &args);
    }
#endif

    netif_issue_reports(netif, NETIF_REPORT_TYPE_IPV4 | NETIF_REPORT_TYPE_IPV6);
 801061e:	2103      	movs	r1, #3
 8010620:	6878      	ldr	r0, [r7, #4]
 8010622:	f000 f809 	bl	8010638 <netif_issue_reports>
#if LWIP_IPV6
    nd6_restart_netif(netif);
#endif /* LWIP_IPV6 */
  }
}
 8010626:	3708      	adds	r7, #8
 8010628:	46bd      	mov	sp, r7
 801062a:	bd80      	pop	{r7, pc}
 801062c:	0801c8e4 	.word	0x0801c8e4
 8010630:	0801ca6c 	.word	0x0801ca6c
 8010634:	0801c934 	.word	0x0801c934

08010638 <netif_issue_reports>:

/** Send ARP/IGMP/MLD/RS events, e.g. on link-up/netif-up or addr-change
 */
static void
netif_issue_reports(struct netif *netif, u8_t report_type)
{
 8010638:	b580      	push	{r7, lr}
 801063a:	b082      	sub	sp, #8
 801063c:	af00      	add	r7, sp, #0
 801063e:	6078      	str	r0, [r7, #4]
 8010640:	460b      	mov	r3, r1
 8010642:	70fb      	strb	r3, [r7, #3]
  LWIP_ASSERT("netif_issue_reports: invalid netif", netif != NULL);
 8010644:	687b      	ldr	r3, [r7, #4]
 8010646:	2b00      	cmp	r3, #0
 8010648:	d106      	bne.n	8010658 <netif_issue_reports+0x20>
 801064a:	4b18      	ldr	r3, [pc, #96]	; (80106ac <netif_issue_reports+0x74>)
 801064c:	f240 326d 	movw	r2, #877	; 0x36d
 8010650:	4917      	ldr	r1, [pc, #92]	; (80106b0 <netif_issue_reports+0x78>)
 8010652:	4818      	ldr	r0, [pc, #96]	; (80106b4 <netif_issue_reports+0x7c>)
 8010654:	f009 fafc 	bl	8019c50 <iprintf>

  /* Only send reports when both link and admin states are up */
  if (!(netif->flags & NETIF_FLAG_LINK_UP) ||
 8010658:	687b      	ldr	r3, [r7, #4]
 801065a:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 801065e:	f003 0304 	and.w	r3, r3, #4
 8010662:	2b00      	cmp	r3, #0
 8010664:	d01e      	beq.n	80106a4 <netif_issue_reports+0x6c>
      !(netif->flags & NETIF_FLAG_UP)) {
 8010666:	687b      	ldr	r3, [r7, #4]
 8010668:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 801066c:	f003 0301 	and.w	r3, r3, #1
  if (!(netif->flags & NETIF_FLAG_LINK_UP) ||
 8010670:	2b00      	cmp	r3, #0
 8010672:	d017      	beq.n	80106a4 <netif_issue_reports+0x6c>
    return;
  }

#if LWIP_IPV4
  if ((report_type & NETIF_REPORT_TYPE_IPV4) &&
 8010674:	78fb      	ldrb	r3, [r7, #3]
 8010676:	f003 0301 	and.w	r3, r3, #1
 801067a:	2b00      	cmp	r3, #0
 801067c:	d013      	beq.n	80106a6 <netif_issue_reports+0x6e>
      !ip4_addr_isany_val(*netif_ip4_addr(netif))) {
 801067e:	687b      	ldr	r3, [r7, #4]
 8010680:	3304      	adds	r3, #4
 8010682:	681b      	ldr	r3, [r3, #0]
  if ((report_type & NETIF_REPORT_TYPE_IPV4) &&
 8010684:	2b00      	cmp	r3, #0
 8010686:	d00e      	beq.n	80106a6 <netif_issue_reports+0x6e>
#if LWIP_ARP
    /* For Ethernet network interfaces, we would like to send a "gratuitous ARP" */
    if (netif->flags & (NETIF_FLAG_ETHARP)) {
 8010688:	687b      	ldr	r3, [r7, #4]
 801068a:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 801068e:	f003 0308 	and.w	r3, r3, #8
 8010692:	2b00      	cmp	r3, #0
 8010694:	d007      	beq.n	80106a6 <netif_issue_reports+0x6e>
      etharp_gratuitous(netif);
 8010696:	687b      	ldr	r3, [r7, #4]
 8010698:	3304      	adds	r3, #4
 801069a:	4619      	mov	r1, r3
 801069c:	6878      	ldr	r0, [r7, #4]
 801069e:	f007 f9eb 	bl	8017a78 <etharp_request>
 80106a2:	e000      	b.n	80106a6 <netif_issue_reports+0x6e>
    return;
 80106a4:	bf00      	nop
    /* send mld memberships */
    mld6_report_groups(netif);
#endif /* LWIP_IPV6_MLD */
  }
#endif /* LWIP_IPV6 */
}
 80106a6:	3708      	adds	r7, #8
 80106a8:	46bd      	mov	sp, r7
 80106aa:	bd80      	pop	{r7, pc}
 80106ac:	0801c8e4 	.word	0x0801c8e4
 80106b0:	0801ca88 	.word	0x0801ca88
 80106b4:	0801c934 	.word	0x0801c934

080106b8 <netif_set_down>:
 * @ingroup netif
 * Bring an interface down, disabling any traffic processing.
 */
void
netif_set_down(struct netif *netif)
{
 80106b8:	b580      	push	{r7, lr}
 80106ba:	b082      	sub	sp, #8
 80106bc:	af00      	add	r7, sp, #0
 80106be:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("netif_set_down: invalid netif", netif != NULL, return);
 80106c0:	687b      	ldr	r3, [r7, #4]
 80106c2:	2b00      	cmp	r3, #0
 80106c4:	d107      	bne.n	80106d6 <netif_set_down+0x1e>
 80106c6:	4b12      	ldr	r3, [pc, #72]	; (8010710 <netif_set_down+0x58>)
 80106c8:	f240 329b 	movw	r2, #923	; 0x39b
 80106cc:	4911      	ldr	r1, [pc, #68]	; (8010714 <netif_set_down+0x5c>)
 80106ce:	4812      	ldr	r0, [pc, #72]	; (8010718 <netif_set_down+0x60>)
 80106d0:	f009 fabe 	bl	8019c50 <iprintf>
 80106d4:	e019      	b.n	801070a <netif_set_down+0x52>

  if (netif->flags & NETIF_FLAG_UP) {
 80106d6:	687b      	ldr	r3, [r7, #4]
 80106d8:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 80106dc:	f003 0301 	and.w	r3, r3, #1
 80106e0:	2b00      	cmp	r3, #0
 80106e2:	d012      	beq.n	801070a <netif_set_down+0x52>
      args.status_changed.state = 0;
      netif_invoke_ext_callback(netif, LWIP_NSC_STATUS_CHANGED, &args);
    }
#endif

    netif_clear_flags(netif, NETIF_FLAG_UP);
 80106e4:	687b      	ldr	r3, [r7, #4]
 80106e6:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 80106ea:	f023 0301 	bic.w	r3, r3, #1
 80106ee:	b2da      	uxtb	r2, r3
 80106f0:	687b      	ldr	r3, [r7, #4]
 80106f2:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
    MIB2_COPY_SYSUPTIME_TO(&netif->ts);

#if LWIP_IPV4 && LWIP_ARP
    if (netif->flags & NETIF_FLAG_ETHARP) {
 80106f6:	687b      	ldr	r3, [r7, #4]
 80106f8:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 80106fc:	f003 0308 	and.w	r3, r3, #8
 8010700:	2b00      	cmp	r3, #0
 8010702:	d002      	beq.n	801070a <netif_set_down+0x52>
      etharp_cleanup_netif(netif);
 8010704:	6878      	ldr	r0, [r7, #4]
 8010706:	f006 fd75 	bl	80171f4 <etharp_cleanup_netif>
    nd6_cleanup_netif(netif);
#endif /* LWIP_IPV6 */

    NETIF_STATUS_CALLBACK(netif);
  }
}
 801070a:	3708      	adds	r7, #8
 801070c:	46bd      	mov	sp, r7
 801070e:	bd80      	pop	{r7, pc}
 8010710:	0801c8e4 	.word	0x0801c8e4
 8010714:	0801caac 	.word	0x0801caac
 8010718:	0801c934 	.word	0x0801c934

0801071c <netif_set_link_up>:
 * @ingroup netif
 * Called by a driver when its link goes up
 */
void
netif_set_link_up(struct netif *netif)
{
 801071c:	b580      	push	{r7, lr}
 801071e:	b082      	sub	sp, #8
 8010720:	af00      	add	r7, sp, #0
 8010722:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("netif_set_link_up: invalid netif", netif != NULL, return);
 8010724:	687b      	ldr	r3, [r7, #4]
 8010726:	2b00      	cmp	r3, #0
 8010728:	d107      	bne.n	801073a <netif_set_link_up+0x1e>
 801072a:	4b13      	ldr	r3, [pc, #76]	; (8010778 <netif_set_link_up+0x5c>)
 801072c:	f44f 7278 	mov.w	r2, #992	; 0x3e0
 8010730:	4912      	ldr	r1, [pc, #72]	; (801077c <netif_set_link_up+0x60>)
 8010732:	4813      	ldr	r0, [pc, #76]	; (8010780 <netif_set_link_up+0x64>)
 8010734:	f009 fa8c 	bl	8019c50 <iprintf>
 8010738:	e01b      	b.n	8010772 <netif_set_link_up+0x56>

  if (!(netif->flags & NETIF_FLAG_LINK_UP)) {
 801073a:	687b      	ldr	r3, [r7, #4]
 801073c:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8010740:	f003 0304 	and.w	r3, r3, #4
 8010744:	2b00      	cmp	r3, #0
 8010746:	d114      	bne.n	8010772 <netif_set_link_up+0x56>
    netif_set_flags(netif, NETIF_FLAG_LINK_UP);
 8010748:	687b      	ldr	r3, [r7, #4]
 801074a:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 801074e:	f043 0304 	orr.w	r3, r3, #4
 8010752:	b2da      	uxtb	r2, r3
 8010754:	687b      	ldr	r3, [r7, #4]
 8010756:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d

#if LWIP_AUTOIP
    autoip_network_changed(netif);
#endif /* LWIP_AUTOIP */

    netif_issue_reports(netif, NETIF_REPORT_TYPE_IPV4 | NETIF_REPORT_TYPE_IPV6);
 801075a:	2103      	movs	r1, #3
 801075c:	6878      	ldr	r0, [r7, #4]
 801075e:	f7ff ff6b 	bl	8010638 <netif_issue_reports>
#if LWIP_IPV6
    nd6_restart_netif(netif);
#endif /* LWIP_IPV6 */

    NETIF_LINK_CALLBACK(netif);
 8010762:	687b      	ldr	r3, [r7, #4]
 8010764:	69db      	ldr	r3, [r3, #28]
 8010766:	2b00      	cmp	r3, #0
 8010768:	d003      	beq.n	8010772 <netif_set_link_up+0x56>
 801076a:	687b      	ldr	r3, [r7, #4]
 801076c:	69db      	ldr	r3, [r3, #28]
 801076e:	6878      	ldr	r0, [r7, #4]
 8010770:	4798      	blx	r3
      args.link_changed.state = 1;
      netif_invoke_ext_callback(netif, LWIP_NSC_LINK_CHANGED, &args);
    }
#endif
  }
}
 8010772:	3708      	adds	r7, #8
 8010774:	46bd      	mov	sp, r7
 8010776:	bd80      	pop	{r7, pc}
 8010778:	0801c8e4 	.word	0x0801c8e4
 801077c:	0801cacc 	.word	0x0801cacc
 8010780:	0801c934 	.word	0x0801c934

08010784 <netif_set_link_down>:
 * @ingroup netif
 * Called by a driver when its link goes down
 */
void
netif_set_link_down(struct netif *netif)
{
 8010784:	b580      	push	{r7, lr}
 8010786:	b082      	sub	sp, #8
 8010788:	af00      	add	r7, sp, #0
 801078a:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("netif_set_link_down: invalid netif", netif != NULL, return);
 801078c:	687b      	ldr	r3, [r7, #4]
 801078e:	2b00      	cmp	r3, #0
 8010790:	d107      	bne.n	80107a2 <netif_set_link_down+0x1e>
 8010792:	4b11      	ldr	r3, [pc, #68]	; (80107d8 <netif_set_link_down+0x54>)
 8010794:	f240 4206 	movw	r2, #1030	; 0x406
 8010798:	4910      	ldr	r1, [pc, #64]	; (80107dc <netif_set_link_down+0x58>)
 801079a:	4811      	ldr	r0, [pc, #68]	; (80107e0 <netif_set_link_down+0x5c>)
 801079c:	f009 fa58 	bl	8019c50 <iprintf>
 80107a0:	e017      	b.n	80107d2 <netif_set_link_down+0x4e>

  if (netif->flags & NETIF_FLAG_LINK_UP) {
 80107a2:	687b      	ldr	r3, [r7, #4]
 80107a4:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 80107a8:	f003 0304 	and.w	r3, r3, #4
 80107ac:	2b00      	cmp	r3, #0
 80107ae:	d010      	beq.n	80107d2 <netif_set_link_down+0x4e>
    netif_clear_flags(netif, NETIF_FLAG_LINK_UP);
 80107b0:	687b      	ldr	r3, [r7, #4]
 80107b2:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 80107b6:	f023 0304 	bic.w	r3, r3, #4
 80107ba:	b2da      	uxtb	r2, r3
 80107bc:	687b      	ldr	r3, [r7, #4]
 80107be:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
    NETIF_LINK_CALLBACK(netif);
 80107c2:	687b      	ldr	r3, [r7, #4]
 80107c4:	69db      	ldr	r3, [r3, #28]
 80107c6:	2b00      	cmp	r3, #0
 80107c8:	d003      	beq.n	80107d2 <netif_set_link_down+0x4e>
 80107ca:	687b      	ldr	r3, [r7, #4]
 80107cc:	69db      	ldr	r3, [r3, #28]
 80107ce:	6878      	ldr	r0, [r7, #4]
 80107d0:	4798      	blx	r3
      args.link_changed.state = 0;
      netif_invoke_ext_callback(netif, LWIP_NSC_LINK_CHANGED, &args);
    }
#endif
  }
}
 80107d2:	3708      	adds	r7, #8
 80107d4:	46bd      	mov	sp, r7
 80107d6:	bd80      	pop	{r7, pc}
 80107d8:	0801c8e4 	.word	0x0801c8e4
 80107dc:	0801caf0 	.word	0x0801caf0
 80107e0:	0801c934 	.word	0x0801c934

080107e4 <netif_set_link_callback>:
 * @ingroup netif
 * Set callback to be called when link is brought up/down
 */
void
netif_set_link_callback(struct netif *netif, netif_status_callback_fn link_callback)
{
 80107e4:	b480      	push	{r7}
 80107e6:	b083      	sub	sp, #12
 80107e8:	af00      	add	r7, sp, #0
 80107ea:	6078      	str	r0, [r7, #4]
 80107ec:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT_CORE_LOCKED();

  if (netif) {
 80107ee:	687b      	ldr	r3, [r7, #4]
 80107f0:	2b00      	cmp	r3, #0
 80107f2:	d002      	beq.n	80107fa <netif_set_link_callback+0x16>
    netif->link_callback = link_callback;
 80107f4:	687b      	ldr	r3, [r7, #4]
 80107f6:	683a      	ldr	r2, [r7, #0]
 80107f8:	61da      	str	r2, [r3, #28]
  }
}
 80107fa:	bf00      	nop
 80107fc:	370c      	adds	r7, #12
 80107fe:	46bd      	mov	sp, r7
 8010800:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010804:	4770      	bx	lr

08010806 <netif_null_output_ip4>:
#if LWIP_IPV4
/** Dummy IPv4 output function for netifs not supporting IPv4
 */
static err_t
netif_null_output_ip4(struct netif *netif, struct pbuf *p, const ip4_addr_t *ipaddr)
{
 8010806:	b480      	push	{r7}
 8010808:	b085      	sub	sp, #20
 801080a:	af00      	add	r7, sp, #0
 801080c:	60f8      	str	r0, [r7, #12]
 801080e:	60b9      	str	r1, [r7, #8]
 8010810:	607a      	str	r2, [r7, #4]
  LWIP_UNUSED_ARG(netif);
  LWIP_UNUSED_ARG(p);
  LWIP_UNUSED_ARG(ipaddr);

  return ERR_IF;
 8010812:	f06f 030b 	mvn.w	r3, #11
}
 8010816:	4618      	mov	r0, r3
 8010818:	3714      	adds	r7, #20
 801081a:	46bd      	mov	sp, r7
 801081c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010820:	4770      	bx	lr
	...

08010824 <netif_get_by_index>:
*
* @param idx index of netif to find
*/
struct netif *
netif_get_by_index(u8_t idx)
{
 8010824:	b480      	push	{r7}
 8010826:	b085      	sub	sp, #20
 8010828:	af00      	add	r7, sp, #0
 801082a:	4603      	mov	r3, r0
 801082c:	71fb      	strb	r3, [r7, #7]
  struct netif *netif;

  LWIP_ASSERT_CORE_LOCKED();

  if (idx != NETIF_NO_INDEX) {
 801082e:	79fb      	ldrb	r3, [r7, #7]
 8010830:	2b00      	cmp	r3, #0
 8010832:	d013      	beq.n	801085c <netif_get_by_index+0x38>
    NETIF_FOREACH(netif) {
 8010834:	4b0d      	ldr	r3, [pc, #52]	; (801086c <netif_get_by_index+0x48>)
 8010836:	681b      	ldr	r3, [r3, #0]
 8010838:	60fb      	str	r3, [r7, #12]
 801083a:	e00c      	b.n	8010856 <netif_get_by_index+0x32>
      if (idx == netif_get_index(netif)) {
 801083c:	68fb      	ldr	r3, [r7, #12]
 801083e:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8010842:	3301      	adds	r3, #1
 8010844:	b2db      	uxtb	r3, r3
 8010846:	79fa      	ldrb	r2, [r7, #7]
 8010848:	429a      	cmp	r2, r3
 801084a:	d101      	bne.n	8010850 <netif_get_by_index+0x2c>
        return netif; /* found! */
 801084c:	68fb      	ldr	r3, [r7, #12]
 801084e:	e006      	b.n	801085e <netif_get_by_index+0x3a>
    NETIF_FOREACH(netif) {
 8010850:	68fb      	ldr	r3, [r7, #12]
 8010852:	681b      	ldr	r3, [r3, #0]
 8010854:	60fb      	str	r3, [r7, #12]
 8010856:	68fb      	ldr	r3, [r7, #12]
 8010858:	2b00      	cmp	r3, #0
 801085a:	d1ef      	bne.n	801083c <netif_get_by_index+0x18>
      }
    }
  }

  return NULL;
 801085c:	2300      	movs	r3, #0
}
 801085e:	4618      	mov	r0, r3
 8010860:	3714      	adds	r7, #20
 8010862:	46bd      	mov	sp, r7
 8010864:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010868:	4770      	bx	lr
 801086a:	bf00      	nop
 801086c:	200070cc 	.word	0x200070cc

08010870 <pbuf_pool_is_empty>:
#endif /* !NO_SYS */

/** Queue a call to pbuf_free_ooseq if not already queued. */
static void
pbuf_pool_is_empty(void)
{
 8010870:	b480      	push	{r7}
 8010872:	af00      	add	r7, sp, #0
#ifndef PBUF_POOL_FREE_OOSEQ_QUEUE_CALL
  SYS_ARCH_SET(pbuf_free_ooseq_pending, 1);
 8010874:	4b03      	ldr	r3, [pc, #12]	; (8010884 <pbuf_pool_is_empty+0x14>)
 8010876:	2201      	movs	r2, #1
 8010878:	701a      	strb	r2, [r3, #0]
  if (!queued) {
    /* queue a call to pbuf_free_ooseq if not already queued */
    PBUF_POOL_FREE_OOSEQ_QUEUE_CALL();
  }
#endif /* PBUF_POOL_FREE_OOSEQ_QUEUE_CALL */
}
 801087a:	bf00      	nop
 801087c:	46bd      	mov	sp, r7
 801087e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010882:	4770      	bx	lr
 8010884:	200070d5 	.word	0x200070d5

08010888 <pbuf_init_alloced_pbuf>:
#endif /* !LWIP_TCP || !TCP_QUEUE_OOSEQ || !PBUF_POOL_FREE_OOSEQ */

/* Initialize members of struct pbuf after allocation */
static void
pbuf_init_alloced_pbuf(struct pbuf *p, void *payload, u16_t tot_len, u16_t len, pbuf_type type, u8_t flags)
{
 8010888:	b480      	push	{r7}
 801088a:	b085      	sub	sp, #20
 801088c:	af00      	add	r7, sp, #0
 801088e:	60f8      	str	r0, [r7, #12]
 8010890:	60b9      	str	r1, [r7, #8]
 8010892:	4611      	mov	r1, r2
 8010894:	461a      	mov	r2, r3
 8010896:	460b      	mov	r3, r1
 8010898:	80fb      	strh	r3, [r7, #6]
 801089a:	4613      	mov	r3, r2
 801089c:	80bb      	strh	r3, [r7, #4]
  p->next = NULL;
 801089e:	68fb      	ldr	r3, [r7, #12]
 80108a0:	2200      	movs	r2, #0
 80108a2:	601a      	str	r2, [r3, #0]
  p->payload = payload;
 80108a4:	68fb      	ldr	r3, [r7, #12]
 80108a6:	68ba      	ldr	r2, [r7, #8]
 80108a8:	605a      	str	r2, [r3, #4]
  p->tot_len = tot_len;
 80108aa:	68fb      	ldr	r3, [r7, #12]
 80108ac:	88fa      	ldrh	r2, [r7, #6]
 80108ae:	811a      	strh	r2, [r3, #8]
  p->len = len;
 80108b0:	68fb      	ldr	r3, [r7, #12]
 80108b2:	88ba      	ldrh	r2, [r7, #4]
 80108b4:	815a      	strh	r2, [r3, #10]
  p->type_internal = (u8_t)type;
 80108b6:	8b3b      	ldrh	r3, [r7, #24]
 80108b8:	b2da      	uxtb	r2, r3
 80108ba:	68fb      	ldr	r3, [r7, #12]
 80108bc:	731a      	strb	r2, [r3, #12]
  p->flags = flags;
 80108be:	68fb      	ldr	r3, [r7, #12]
 80108c0:	7f3a      	ldrb	r2, [r7, #28]
 80108c2:	735a      	strb	r2, [r3, #13]
  p->ref = 1;
 80108c4:	68fb      	ldr	r3, [r7, #12]
 80108c6:	2201      	movs	r2, #1
 80108c8:	739a      	strb	r2, [r3, #14]
  p->if_idx = NETIF_NO_INDEX;
 80108ca:	68fb      	ldr	r3, [r7, #12]
 80108cc:	2200      	movs	r2, #0
 80108ce:	73da      	strb	r2, [r3, #15]
}
 80108d0:	bf00      	nop
 80108d2:	3714      	adds	r7, #20
 80108d4:	46bd      	mov	sp, r7
 80108d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80108da:	4770      	bx	lr

080108dc <pbuf_alloc>:
 * @return the allocated pbuf. If multiple pbufs where allocated, this
 * is the first pbuf of a pbuf chain.
 */
struct pbuf *
pbuf_alloc(pbuf_layer layer, u16_t length, pbuf_type type)
{
 80108dc:	b580      	push	{r7, lr}
 80108de:	b08c      	sub	sp, #48	; 0x30
 80108e0:	af02      	add	r7, sp, #8
 80108e2:	4603      	mov	r3, r0
 80108e4:	71fb      	strb	r3, [r7, #7]
 80108e6:	460b      	mov	r3, r1
 80108e8:	80bb      	strh	r3, [r7, #4]
 80108ea:	4613      	mov	r3, r2
 80108ec:	807b      	strh	r3, [r7, #2]
  struct pbuf *p;
  u16_t offset = (u16_t)layer;
 80108ee:	79fb      	ldrb	r3, [r7, #7]
 80108f0:	847b      	strh	r3, [r7, #34]	; 0x22
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_alloc(length=%"U16_F")\n", length));

  switch (type) {
 80108f2:	887b      	ldrh	r3, [r7, #2]
 80108f4:	f5b3 7f20 	cmp.w	r3, #640	; 0x280
 80108f8:	f000 8082 	beq.w	8010a00 <pbuf_alloc+0x124>
 80108fc:	f5b3 7f20 	cmp.w	r3, #640	; 0x280
 8010900:	f300 80c9 	bgt.w	8010a96 <pbuf_alloc+0x1ba>
 8010904:	f5b3 7fc1 	cmp.w	r3, #386	; 0x182
 8010908:	d010      	beq.n	801092c <pbuf_alloc+0x50>
 801090a:	f5b3 7fc1 	cmp.w	r3, #386	; 0x182
 801090e:	f300 80c2 	bgt.w	8010a96 <pbuf_alloc+0x1ba>
 8010912:	2b01      	cmp	r3, #1
 8010914:	d002      	beq.n	801091c <pbuf_alloc+0x40>
 8010916:	2b41      	cmp	r3, #65	; 0x41
 8010918:	f040 80bd 	bne.w	8010a96 <pbuf_alloc+0x1ba>
    case PBUF_REF: /* fall through */
    case PBUF_ROM:
      p = pbuf_alloc_reference(NULL, length, type);
 801091c:	887a      	ldrh	r2, [r7, #2]
 801091e:	88bb      	ldrh	r3, [r7, #4]
 8010920:	4619      	mov	r1, r3
 8010922:	2000      	movs	r0, #0
 8010924:	f000 f8d2 	bl	8010acc <pbuf_alloc_reference>
 8010928:	6278      	str	r0, [r7, #36]	; 0x24
      break;
 801092a:	e0be      	b.n	8010aaa <pbuf_alloc+0x1ce>
    case PBUF_POOL: {
      struct pbuf *q, *last;
      u16_t rem_len; /* remaining length */
      p = NULL;
 801092c:	2300      	movs	r3, #0
 801092e:	627b      	str	r3, [r7, #36]	; 0x24
      last = NULL;
 8010930:	2300      	movs	r3, #0
 8010932:	61fb      	str	r3, [r7, #28]
      rem_len = length;
 8010934:	88bb      	ldrh	r3, [r7, #4]
 8010936:	837b      	strh	r3, [r7, #26]
      do {
        u16_t qlen;
        q = (struct pbuf *)memp_malloc(MEMP_PBUF_POOL);
 8010938:	2008      	movs	r0, #8
 801093a:	f7ff fbed 	bl	8010118 <memp_malloc>
 801093e:	6138      	str	r0, [r7, #16]
        if (q == NULL) {
 8010940:	693b      	ldr	r3, [r7, #16]
 8010942:	2b00      	cmp	r3, #0
 8010944:	d109      	bne.n	801095a <pbuf_alloc+0x7e>
          PBUF_POOL_IS_EMPTY();
 8010946:	f7ff ff93 	bl	8010870 <pbuf_pool_is_empty>
          /* free chain so far allocated */
          if (p) {
 801094a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801094c:	2b00      	cmp	r3, #0
 801094e:	d002      	beq.n	8010956 <pbuf_alloc+0x7a>
            pbuf_free(p);
 8010950:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8010952:	f000 faa7 	bl	8010ea4 <pbuf_free>
          }
          /* bail out unsuccessfully */
          return NULL;
 8010956:	2300      	movs	r3, #0
 8010958:	e0a8      	b.n	8010aac <pbuf_alloc+0x1d0>
        }
        qlen = LWIP_MIN(rem_len, (u16_t)(PBUF_POOL_BUFSIZE_ALIGNED - LWIP_MEM_ALIGN_SIZE(offset)));
 801095a:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 801095c:	3303      	adds	r3, #3
 801095e:	b29b      	uxth	r3, r3
 8010960:	f023 0303 	bic.w	r3, r3, #3
 8010964:	b29a      	uxth	r2, r3
 8010966:	f240 53ec 	movw	r3, #1516	; 0x5ec
 801096a:	1a9b      	subs	r3, r3, r2
 801096c:	b29b      	uxth	r3, r3
 801096e:	8b7a      	ldrh	r2, [r7, #26]
 8010970:	4293      	cmp	r3, r2
 8010972:	bf28      	it	cs
 8010974:	4613      	movcs	r3, r2
 8010976:	81fb      	strh	r3, [r7, #14]
        pbuf_init_alloced_pbuf(q, LWIP_MEM_ALIGN((void *)((u8_t *)q + SIZEOF_STRUCT_PBUF + offset)),
 8010978:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 801097a:	3310      	adds	r3, #16
 801097c:	693a      	ldr	r2, [r7, #16]
 801097e:	4413      	add	r3, r2
 8010980:	3303      	adds	r3, #3
 8010982:	f023 0303 	bic.w	r3, r3, #3
 8010986:	4618      	mov	r0, r3
 8010988:	89f9      	ldrh	r1, [r7, #14]
 801098a:	8b7a      	ldrh	r2, [r7, #26]
 801098c:	2300      	movs	r3, #0
 801098e:	9301      	str	r3, [sp, #4]
 8010990:	887b      	ldrh	r3, [r7, #2]
 8010992:	9300      	str	r3, [sp, #0]
 8010994:	460b      	mov	r3, r1
 8010996:	4601      	mov	r1, r0
 8010998:	6938      	ldr	r0, [r7, #16]
 801099a:	f7ff ff75 	bl	8010888 <pbuf_init_alloced_pbuf>
                               rem_len, qlen, type, 0);
        LWIP_ASSERT("pbuf_alloc: pbuf q->payload properly aligned",
 801099e:	693b      	ldr	r3, [r7, #16]
 80109a0:	685b      	ldr	r3, [r3, #4]
 80109a2:	f003 0303 	and.w	r3, r3, #3
 80109a6:	2b00      	cmp	r3, #0
 80109a8:	d006      	beq.n	80109b8 <pbuf_alloc+0xdc>
 80109aa:	4b42      	ldr	r3, [pc, #264]	; (8010ab4 <pbuf_alloc+0x1d8>)
 80109ac:	f44f 7280 	mov.w	r2, #256	; 0x100
 80109b0:	4941      	ldr	r1, [pc, #260]	; (8010ab8 <pbuf_alloc+0x1dc>)
 80109b2:	4842      	ldr	r0, [pc, #264]	; (8010abc <pbuf_alloc+0x1e0>)
 80109b4:	f009 f94c 	bl	8019c50 <iprintf>
                    ((mem_ptr_t)q->payload % MEM_ALIGNMENT) == 0);
        LWIP_ASSERT("PBUF_POOL_BUFSIZE must be bigger than MEM_ALIGNMENT",
 80109b8:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 80109ba:	3303      	adds	r3, #3
 80109bc:	f023 0303 	bic.w	r3, r3, #3
 80109c0:	f240 52ec 	movw	r2, #1516	; 0x5ec
 80109c4:	4293      	cmp	r3, r2
 80109c6:	d106      	bne.n	80109d6 <pbuf_alloc+0xfa>
 80109c8:	4b3a      	ldr	r3, [pc, #232]	; (8010ab4 <pbuf_alloc+0x1d8>)
 80109ca:	f44f 7281 	mov.w	r2, #258	; 0x102
 80109ce:	493c      	ldr	r1, [pc, #240]	; (8010ac0 <pbuf_alloc+0x1e4>)
 80109d0:	483a      	ldr	r0, [pc, #232]	; (8010abc <pbuf_alloc+0x1e0>)
 80109d2:	f009 f93d 	bl	8019c50 <iprintf>
                    (PBUF_POOL_BUFSIZE_ALIGNED - LWIP_MEM_ALIGN_SIZE(offset)) > 0 );
        if (p == NULL) {
 80109d6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80109d8:	2b00      	cmp	r3, #0
 80109da:	d102      	bne.n	80109e2 <pbuf_alloc+0x106>
          /* allocated head of pbuf chain (into p) */
          p = q;
 80109dc:	693b      	ldr	r3, [r7, #16]
 80109de:	627b      	str	r3, [r7, #36]	; 0x24
 80109e0:	e002      	b.n	80109e8 <pbuf_alloc+0x10c>
        } else {
          /* make previous pbuf point to this pbuf */
          last->next = q;
 80109e2:	69fb      	ldr	r3, [r7, #28]
 80109e4:	693a      	ldr	r2, [r7, #16]
 80109e6:	601a      	str	r2, [r3, #0]
        }
        last = q;
 80109e8:	693b      	ldr	r3, [r7, #16]
 80109ea:	61fb      	str	r3, [r7, #28]
        rem_len = (u16_t)(rem_len - qlen);
 80109ec:	8b7a      	ldrh	r2, [r7, #26]
 80109ee:	89fb      	ldrh	r3, [r7, #14]
 80109f0:	1ad3      	subs	r3, r2, r3
 80109f2:	837b      	strh	r3, [r7, #26]
        offset = 0;
 80109f4:	2300      	movs	r3, #0
 80109f6:	847b      	strh	r3, [r7, #34]	; 0x22
      } while (rem_len > 0);
 80109f8:	8b7b      	ldrh	r3, [r7, #26]
 80109fa:	2b00      	cmp	r3, #0
 80109fc:	d19c      	bne.n	8010938 <pbuf_alloc+0x5c>
      break;
 80109fe:	e054      	b.n	8010aaa <pbuf_alloc+0x1ce>
    }
    case PBUF_RAM: {
      u16_t payload_len = (u16_t)(LWIP_MEM_ALIGN_SIZE(offset) + LWIP_MEM_ALIGN_SIZE(length));
 8010a00:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8010a02:	3303      	adds	r3, #3
 8010a04:	b29b      	uxth	r3, r3
 8010a06:	f023 0303 	bic.w	r3, r3, #3
 8010a0a:	b29a      	uxth	r2, r3
 8010a0c:	88bb      	ldrh	r3, [r7, #4]
 8010a0e:	3303      	adds	r3, #3
 8010a10:	b29b      	uxth	r3, r3
 8010a12:	f023 0303 	bic.w	r3, r3, #3
 8010a16:	b29b      	uxth	r3, r3
 8010a18:	4413      	add	r3, r2
 8010a1a:	833b      	strh	r3, [r7, #24]
      mem_size_t alloc_len = (mem_size_t)(LWIP_MEM_ALIGN_SIZE(SIZEOF_STRUCT_PBUF) + payload_len);
 8010a1c:	8b3b      	ldrh	r3, [r7, #24]
 8010a1e:	3310      	adds	r3, #16
 8010a20:	617b      	str	r3, [r7, #20]

      /* bug #50040: Check for integer overflow when calculating alloc_len */
      if ((payload_len < LWIP_MEM_ALIGN_SIZE(length)) ||
 8010a22:	8b3a      	ldrh	r2, [r7, #24]
 8010a24:	88bb      	ldrh	r3, [r7, #4]
 8010a26:	3303      	adds	r3, #3
 8010a28:	f023 0303 	bic.w	r3, r3, #3
 8010a2c:	429a      	cmp	r2, r3
 8010a2e:	d306      	bcc.n	8010a3e <pbuf_alloc+0x162>
          (alloc_len < LWIP_MEM_ALIGN_SIZE(length))) {
 8010a30:	88bb      	ldrh	r3, [r7, #4]
 8010a32:	3303      	adds	r3, #3
 8010a34:	f023 0303 	bic.w	r3, r3, #3
      if ((payload_len < LWIP_MEM_ALIGN_SIZE(length)) ||
 8010a38:	697a      	ldr	r2, [r7, #20]
 8010a3a:	429a      	cmp	r2, r3
 8010a3c:	d201      	bcs.n	8010a42 <pbuf_alloc+0x166>
        return NULL;
 8010a3e:	2300      	movs	r3, #0
 8010a40:	e034      	b.n	8010aac <pbuf_alloc+0x1d0>
      }

      /* If pbuf is to be allocated in RAM, allocate memory for it. */
      p = (struct pbuf *)mem_malloc(alloc_len);
 8010a42:	6978      	ldr	r0, [r7, #20]
 8010a44:	f7ff f9e0 	bl	800fe08 <mem_malloc>
 8010a48:	6278      	str	r0, [r7, #36]	; 0x24
      if (p == NULL) {
 8010a4a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010a4c:	2b00      	cmp	r3, #0
 8010a4e:	d101      	bne.n	8010a54 <pbuf_alloc+0x178>
        return NULL;
 8010a50:	2300      	movs	r3, #0
 8010a52:	e02b      	b.n	8010aac <pbuf_alloc+0x1d0>
      }
      pbuf_init_alloced_pbuf(p, LWIP_MEM_ALIGN((void *)((u8_t *)p + SIZEOF_STRUCT_PBUF + offset)),
 8010a54:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8010a56:	3310      	adds	r3, #16
 8010a58:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8010a5a:	4413      	add	r3, r2
 8010a5c:	3303      	adds	r3, #3
 8010a5e:	f023 0303 	bic.w	r3, r3, #3
 8010a62:	4618      	mov	r0, r3
 8010a64:	88b9      	ldrh	r1, [r7, #4]
 8010a66:	88ba      	ldrh	r2, [r7, #4]
 8010a68:	2300      	movs	r3, #0
 8010a6a:	9301      	str	r3, [sp, #4]
 8010a6c:	887b      	ldrh	r3, [r7, #2]
 8010a6e:	9300      	str	r3, [sp, #0]
 8010a70:	460b      	mov	r3, r1
 8010a72:	4601      	mov	r1, r0
 8010a74:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8010a76:	f7ff ff07 	bl	8010888 <pbuf_init_alloced_pbuf>
                             length, length, type, 0);
      LWIP_ASSERT("pbuf_alloc: pbuf->payload properly aligned",
 8010a7a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010a7c:	685b      	ldr	r3, [r3, #4]
 8010a7e:	f003 0303 	and.w	r3, r3, #3
 8010a82:	2b00      	cmp	r3, #0
 8010a84:	d010      	beq.n	8010aa8 <pbuf_alloc+0x1cc>
 8010a86:	4b0b      	ldr	r3, [pc, #44]	; (8010ab4 <pbuf_alloc+0x1d8>)
 8010a88:	f44f 7291 	mov.w	r2, #290	; 0x122
 8010a8c:	490d      	ldr	r1, [pc, #52]	; (8010ac4 <pbuf_alloc+0x1e8>)
 8010a8e:	480b      	ldr	r0, [pc, #44]	; (8010abc <pbuf_alloc+0x1e0>)
 8010a90:	f009 f8de 	bl	8019c50 <iprintf>
                  ((mem_ptr_t)p->payload % MEM_ALIGNMENT) == 0);
      break;
 8010a94:	e008      	b.n	8010aa8 <pbuf_alloc+0x1cc>
    }
    default:
      LWIP_ASSERT("pbuf_alloc: erroneous type", 0);
 8010a96:	4b07      	ldr	r3, [pc, #28]	; (8010ab4 <pbuf_alloc+0x1d8>)
 8010a98:	f240 1227 	movw	r2, #295	; 0x127
 8010a9c:	490a      	ldr	r1, [pc, #40]	; (8010ac8 <pbuf_alloc+0x1ec>)
 8010a9e:	4807      	ldr	r0, [pc, #28]	; (8010abc <pbuf_alloc+0x1e0>)
 8010aa0:	f009 f8d6 	bl	8019c50 <iprintf>
      return NULL;
 8010aa4:	2300      	movs	r3, #0
 8010aa6:	e001      	b.n	8010aac <pbuf_alloc+0x1d0>
      break;
 8010aa8:	bf00      	nop
  }
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_alloc(length=%"U16_F") == %p\n", length, (void *)p));
  return p;
 8010aaa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8010aac:	4618      	mov	r0, r3
 8010aae:	3728      	adds	r7, #40	; 0x28
 8010ab0:	46bd      	mov	sp, r7
 8010ab2:	bd80      	pop	{r7, pc}
 8010ab4:	0801cb14 	.word	0x0801cb14
 8010ab8:	0801cb44 	.word	0x0801cb44
 8010abc:	0801cb74 	.word	0x0801cb74
 8010ac0:	0801cb9c 	.word	0x0801cb9c
 8010ac4:	0801cbd0 	.word	0x0801cbd0
 8010ac8:	0801cbfc 	.word	0x0801cbfc

08010acc <pbuf_alloc_reference>:
 *
 * @return the allocated pbuf.
 */
struct pbuf *
pbuf_alloc_reference(void *payload, u16_t length, pbuf_type type)
{
 8010acc:	b580      	push	{r7, lr}
 8010ace:	b086      	sub	sp, #24
 8010ad0:	af02      	add	r7, sp, #8
 8010ad2:	6078      	str	r0, [r7, #4]
 8010ad4:	460b      	mov	r3, r1
 8010ad6:	807b      	strh	r3, [r7, #2]
 8010ad8:	4613      	mov	r3, r2
 8010ada:	803b      	strh	r3, [r7, #0]
  struct pbuf *p;
  LWIP_ASSERT("invalid pbuf_type", (type == PBUF_REF) || (type == PBUF_ROM));
 8010adc:	883b      	ldrh	r3, [r7, #0]
 8010ade:	2b41      	cmp	r3, #65	; 0x41
 8010ae0:	d009      	beq.n	8010af6 <pbuf_alloc_reference+0x2a>
 8010ae2:	883b      	ldrh	r3, [r7, #0]
 8010ae4:	2b01      	cmp	r3, #1
 8010ae6:	d006      	beq.n	8010af6 <pbuf_alloc_reference+0x2a>
 8010ae8:	4b0f      	ldr	r3, [pc, #60]	; (8010b28 <pbuf_alloc_reference+0x5c>)
 8010aea:	f44f 72a5 	mov.w	r2, #330	; 0x14a
 8010aee:	490f      	ldr	r1, [pc, #60]	; (8010b2c <pbuf_alloc_reference+0x60>)
 8010af0:	480f      	ldr	r0, [pc, #60]	; (8010b30 <pbuf_alloc_reference+0x64>)
 8010af2:	f009 f8ad 	bl	8019c50 <iprintf>
  /* only allocate memory for the pbuf structure */
  p = (struct pbuf *)memp_malloc(MEMP_PBUF);
 8010af6:	2007      	movs	r0, #7
 8010af8:	f7ff fb0e 	bl	8010118 <memp_malloc>
 8010afc:	60f8      	str	r0, [r7, #12]
  if (p == NULL) {
 8010afe:	68fb      	ldr	r3, [r7, #12]
 8010b00:	2b00      	cmp	r3, #0
 8010b02:	d101      	bne.n	8010b08 <pbuf_alloc_reference+0x3c>
    LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_LEVEL_SERIOUS,
                ("pbuf_alloc_reference: Could not allocate MEMP_PBUF for PBUF_%s.\n",
                 (type == PBUF_ROM) ? "ROM" : "REF"));
    return NULL;
 8010b04:	2300      	movs	r3, #0
 8010b06:	e00b      	b.n	8010b20 <pbuf_alloc_reference+0x54>
  }
  pbuf_init_alloced_pbuf(p, payload, length, length, type, 0);
 8010b08:	8879      	ldrh	r1, [r7, #2]
 8010b0a:	887a      	ldrh	r2, [r7, #2]
 8010b0c:	2300      	movs	r3, #0
 8010b0e:	9301      	str	r3, [sp, #4]
 8010b10:	883b      	ldrh	r3, [r7, #0]
 8010b12:	9300      	str	r3, [sp, #0]
 8010b14:	460b      	mov	r3, r1
 8010b16:	6879      	ldr	r1, [r7, #4]
 8010b18:	68f8      	ldr	r0, [r7, #12]
 8010b1a:	f7ff feb5 	bl	8010888 <pbuf_init_alloced_pbuf>
  return p;
 8010b1e:	68fb      	ldr	r3, [r7, #12]
}
 8010b20:	4618      	mov	r0, r3
 8010b22:	3710      	adds	r7, #16
 8010b24:	46bd      	mov	sp, r7
 8010b26:	bd80      	pop	{r7, pc}
 8010b28:	0801cb14 	.word	0x0801cb14
 8010b2c:	0801cc18 	.word	0x0801cc18
 8010b30:	0801cb74 	.word	0x0801cb74

08010b34 <pbuf_alloced_custom>:
 *        big enough to hold 'length' plus the header size
 */
struct pbuf *
pbuf_alloced_custom(pbuf_layer l, u16_t length, pbuf_type type, struct pbuf_custom *p,
                    void *payload_mem, u16_t payload_mem_len)
{
 8010b34:	b580      	push	{r7, lr}
 8010b36:	b088      	sub	sp, #32
 8010b38:	af02      	add	r7, sp, #8
 8010b3a:	607b      	str	r3, [r7, #4]
 8010b3c:	4603      	mov	r3, r0
 8010b3e:	73fb      	strb	r3, [r7, #15]
 8010b40:	460b      	mov	r3, r1
 8010b42:	81bb      	strh	r3, [r7, #12]
 8010b44:	4613      	mov	r3, r2
 8010b46:	817b      	strh	r3, [r7, #10]
  u16_t offset = (u16_t)l;
 8010b48:	7bfb      	ldrb	r3, [r7, #15]
 8010b4a:	827b      	strh	r3, [r7, #18]
  void *payload;
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_alloced_custom(length=%"U16_F")\n", length));

  if (LWIP_MEM_ALIGN_SIZE(offset) + length > payload_mem_len) {
 8010b4c:	8a7b      	ldrh	r3, [r7, #18]
 8010b4e:	3303      	adds	r3, #3
 8010b50:	f023 0203 	bic.w	r2, r3, #3
 8010b54:	89bb      	ldrh	r3, [r7, #12]
 8010b56:	441a      	add	r2, r3
 8010b58:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8010b5a:	429a      	cmp	r2, r3
 8010b5c:	d901      	bls.n	8010b62 <pbuf_alloced_custom+0x2e>
    LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_LEVEL_WARNING, ("pbuf_alloced_custom(length=%"U16_F") buffer too short\n", length));
    return NULL;
 8010b5e:	2300      	movs	r3, #0
 8010b60:	e018      	b.n	8010b94 <pbuf_alloced_custom+0x60>
  }

  if (payload_mem != NULL) {
 8010b62:	6a3b      	ldr	r3, [r7, #32]
 8010b64:	2b00      	cmp	r3, #0
 8010b66:	d007      	beq.n	8010b78 <pbuf_alloced_custom+0x44>
    payload = (u8_t *)payload_mem + LWIP_MEM_ALIGN_SIZE(offset);
 8010b68:	8a7b      	ldrh	r3, [r7, #18]
 8010b6a:	3303      	adds	r3, #3
 8010b6c:	f023 0303 	bic.w	r3, r3, #3
 8010b70:	6a3a      	ldr	r2, [r7, #32]
 8010b72:	4413      	add	r3, r2
 8010b74:	617b      	str	r3, [r7, #20]
 8010b76:	e001      	b.n	8010b7c <pbuf_alloced_custom+0x48>
  } else {
    payload = NULL;
 8010b78:	2300      	movs	r3, #0
 8010b7a:	617b      	str	r3, [r7, #20]
  }
  pbuf_init_alloced_pbuf(&p->pbuf, payload, length, length, type, PBUF_FLAG_IS_CUSTOM);
 8010b7c:	6878      	ldr	r0, [r7, #4]
 8010b7e:	89b9      	ldrh	r1, [r7, #12]
 8010b80:	89ba      	ldrh	r2, [r7, #12]
 8010b82:	2302      	movs	r3, #2
 8010b84:	9301      	str	r3, [sp, #4]
 8010b86:	897b      	ldrh	r3, [r7, #10]
 8010b88:	9300      	str	r3, [sp, #0]
 8010b8a:	460b      	mov	r3, r1
 8010b8c:	6979      	ldr	r1, [r7, #20]
 8010b8e:	f7ff fe7b 	bl	8010888 <pbuf_init_alloced_pbuf>
  return &p->pbuf;
 8010b92:	687b      	ldr	r3, [r7, #4]
}
 8010b94:	4618      	mov	r0, r3
 8010b96:	3718      	adds	r7, #24
 8010b98:	46bd      	mov	sp, r7
 8010b9a:	bd80      	pop	{r7, pc}

08010b9c <pbuf_realloc>:
 *
 * @note Despite its name, pbuf_realloc cannot grow the size of a pbuf (chain).
 */
void
pbuf_realloc(struct pbuf *p, u16_t new_len)
{
 8010b9c:	b580      	push	{r7, lr}
 8010b9e:	b084      	sub	sp, #16
 8010ba0:	af00      	add	r7, sp, #0
 8010ba2:	6078      	str	r0, [r7, #4]
 8010ba4:	460b      	mov	r3, r1
 8010ba6:	807b      	strh	r3, [r7, #2]
  struct pbuf *q;
  u16_t rem_len; /* remaining length */
  u16_t shrink;

  LWIP_ASSERT("pbuf_realloc: p != NULL", p != NULL);
 8010ba8:	687b      	ldr	r3, [r7, #4]
 8010baa:	2b00      	cmp	r3, #0
 8010bac:	d106      	bne.n	8010bbc <pbuf_realloc+0x20>
 8010bae:	4b39      	ldr	r3, [pc, #228]	; (8010c94 <pbuf_realloc+0xf8>)
 8010bb0:	f44f 72cc 	mov.w	r2, #408	; 0x198
 8010bb4:	4938      	ldr	r1, [pc, #224]	; (8010c98 <pbuf_realloc+0xfc>)
 8010bb6:	4839      	ldr	r0, [pc, #228]	; (8010c9c <pbuf_realloc+0x100>)
 8010bb8:	f009 f84a 	bl	8019c50 <iprintf>

  /* desired length larger than current length? */
  if (new_len >= p->tot_len) {
 8010bbc:	687b      	ldr	r3, [r7, #4]
 8010bbe:	891b      	ldrh	r3, [r3, #8]
 8010bc0:	887a      	ldrh	r2, [r7, #2]
 8010bc2:	429a      	cmp	r2, r3
 8010bc4:	d261      	bcs.n	8010c8a <pbuf_realloc+0xee>
    return;
  }

  /* the pbuf chain grows by (new_len - p->tot_len) bytes
   * (which may be negative in case of shrinking) */
  shrink = (u16_t)(p->tot_len - new_len);
 8010bc6:	687b      	ldr	r3, [r7, #4]
 8010bc8:	891a      	ldrh	r2, [r3, #8]
 8010bca:	887b      	ldrh	r3, [r7, #2]
 8010bcc:	1ad3      	subs	r3, r2, r3
 8010bce:	813b      	strh	r3, [r7, #8]

  /* first, step over any pbufs that should remain in the chain */
  rem_len = new_len;
 8010bd0:	887b      	ldrh	r3, [r7, #2]
 8010bd2:	817b      	strh	r3, [r7, #10]
  q = p;
 8010bd4:	687b      	ldr	r3, [r7, #4]
 8010bd6:	60fb      	str	r3, [r7, #12]
  /* should this pbuf be kept? */
  while (rem_len > q->len) {
 8010bd8:	e018      	b.n	8010c0c <pbuf_realloc+0x70>
    /* decrease remaining length by pbuf length */
    rem_len = (u16_t)(rem_len - q->len);
 8010bda:	68fb      	ldr	r3, [r7, #12]
 8010bdc:	895b      	ldrh	r3, [r3, #10]
 8010bde:	897a      	ldrh	r2, [r7, #10]
 8010be0:	1ad3      	subs	r3, r2, r3
 8010be2:	817b      	strh	r3, [r7, #10]
    /* decrease total length indicator */
    q->tot_len = (u16_t)(q->tot_len - shrink);
 8010be4:	68fb      	ldr	r3, [r7, #12]
 8010be6:	891a      	ldrh	r2, [r3, #8]
 8010be8:	893b      	ldrh	r3, [r7, #8]
 8010bea:	1ad3      	subs	r3, r2, r3
 8010bec:	b29a      	uxth	r2, r3
 8010bee:	68fb      	ldr	r3, [r7, #12]
 8010bf0:	811a      	strh	r2, [r3, #8]
    /* proceed to next pbuf in chain */
    q = q->next;
 8010bf2:	68fb      	ldr	r3, [r7, #12]
 8010bf4:	681b      	ldr	r3, [r3, #0]
 8010bf6:	60fb      	str	r3, [r7, #12]
    LWIP_ASSERT("pbuf_realloc: q != NULL", q != NULL);
 8010bf8:	68fb      	ldr	r3, [r7, #12]
 8010bfa:	2b00      	cmp	r3, #0
 8010bfc:	d106      	bne.n	8010c0c <pbuf_realloc+0x70>
 8010bfe:	4b25      	ldr	r3, [pc, #148]	; (8010c94 <pbuf_realloc+0xf8>)
 8010c00:	f240 12af 	movw	r2, #431	; 0x1af
 8010c04:	4926      	ldr	r1, [pc, #152]	; (8010ca0 <pbuf_realloc+0x104>)
 8010c06:	4825      	ldr	r0, [pc, #148]	; (8010c9c <pbuf_realloc+0x100>)
 8010c08:	f009 f822 	bl	8019c50 <iprintf>
  while (rem_len > q->len) {
 8010c0c:	68fb      	ldr	r3, [r7, #12]
 8010c0e:	895b      	ldrh	r3, [r3, #10]
 8010c10:	897a      	ldrh	r2, [r7, #10]
 8010c12:	429a      	cmp	r2, r3
 8010c14:	d8e1      	bhi.n	8010bda <pbuf_realloc+0x3e>
  /* we have now reached the new last pbuf (in q) */
  /* rem_len == desired length for pbuf q */

  /* shrink allocated memory for PBUF_RAM */
  /* (other types merely adjust their length fields */
  if (pbuf_match_allocsrc(q, PBUF_TYPE_ALLOC_SRC_MASK_STD_HEAP) && (rem_len != q->len)
 8010c16:	68fb      	ldr	r3, [r7, #12]
 8010c18:	7b1b      	ldrb	r3, [r3, #12]
 8010c1a:	f003 030f 	and.w	r3, r3, #15
 8010c1e:	2b00      	cmp	r3, #0
 8010c20:	d11f      	bne.n	8010c62 <pbuf_realloc+0xc6>
 8010c22:	68fb      	ldr	r3, [r7, #12]
 8010c24:	895b      	ldrh	r3, [r3, #10]
 8010c26:	897a      	ldrh	r2, [r7, #10]
 8010c28:	429a      	cmp	r2, r3
 8010c2a:	d01a      	beq.n	8010c62 <pbuf_realloc+0xc6>
#if LWIP_SUPPORT_CUSTOM_PBUF
      && ((q->flags & PBUF_FLAG_IS_CUSTOM) == 0)
 8010c2c:	68fb      	ldr	r3, [r7, #12]
 8010c2e:	7b5b      	ldrb	r3, [r3, #13]
 8010c30:	f003 0302 	and.w	r3, r3, #2
 8010c34:	2b00      	cmp	r3, #0
 8010c36:	d114      	bne.n	8010c62 <pbuf_realloc+0xc6>
#endif /* LWIP_SUPPORT_CUSTOM_PBUF */
     ) {
    /* reallocate and adjust the length of the pbuf that will be split */
    q = (struct pbuf *)mem_trim(q, (mem_size_t)(((u8_t *)q->payload - (u8_t *)q) + rem_len));
 8010c38:	68fb      	ldr	r3, [r7, #12]
 8010c3a:	685a      	ldr	r2, [r3, #4]
 8010c3c:	68fb      	ldr	r3, [r7, #12]
 8010c3e:	1ad2      	subs	r2, r2, r3
 8010c40:	897b      	ldrh	r3, [r7, #10]
 8010c42:	4413      	add	r3, r2
 8010c44:	4619      	mov	r1, r3
 8010c46:	68f8      	ldr	r0, [r7, #12]
 8010c48:	f7fe ffea 	bl	800fc20 <mem_trim>
 8010c4c:	60f8      	str	r0, [r7, #12]
    LWIP_ASSERT("mem_trim returned q == NULL", q != NULL);
 8010c4e:	68fb      	ldr	r3, [r7, #12]
 8010c50:	2b00      	cmp	r3, #0
 8010c52:	d106      	bne.n	8010c62 <pbuf_realloc+0xc6>
 8010c54:	4b0f      	ldr	r3, [pc, #60]	; (8010c94 <pbuf_realloc+0xf8>)
 8010c56:	f240 12bd 	movw	r2, #445	; 0x1bd
 8010c5a:	4912      	ldr	r1, [pc, #72]	; (8010ca4 <pbuf_realloc+0x108>)
 8010c5c:	480f      	ldr	r0, [pc, #60]	; (8010c9c <pbuf_realloc+0x100>)
 8010c5e:	f008 fff7 	bl	8019c50 <iprintf>
  }
  /* adjust length fields for new last pbuf */
  q->len = rem_len;
 8010c62:	68fb      	ldr	r3, [r7, #12]
 8010c64:	897a      	ldrh	r2, [r7, #10]
 8010c66:	815a      	strh	r2, [r3, #10]
  q->tot_len = q->len;
 8010c68:	68fb      	ldr	r3, [r7, #12]
 8010c6a:	895a      	ldrh	r2, [r3, #10]
 8010c6c:	68fb      	ldr	r3, [r7, #12]
 8010c6e:	811a      	strh	r2, [r3, #8]

  /* any remaining pbufs in chain? */
  if (q->next != NULL) {
 8010c70:	68fb      	ldr	r3, [r7, #12]
 8010c72:	681b      	ldr	r3, [r3, #0]
 8010c74:	2b00      	cmp	r3, #0
 8010c76:	d004      	beq.n	8010c82 <pbuf_realloc+0xe6>
    /* free remaining pbufs in chain */
    pbuf_free(q->next);
 8010c78:	68fb      	ldr	r3, [r7, #12]
 8010c7a:	681b      	ldr	r3, [r3, #0]
 8010c7c:	4618      	mov	r0, r3
 8010c7e:	f000 f911 	bl	8010ea4 <pbuf_free>
  }
  /* q is last packet in chain */
  q->next = NULL;
 8010c82:	68fb      	ldr	r3, [r7, #12]
 8010c84:	2200      	movs	r2, #0
 8010c86:	601a      	str	r2, [r3, #0]
 8010c88:	e000      	b.n	8010c8c <pbuf_realloc+0xf0>
    return;
 8010c8a:	bf00      	nop

}
 8010c8c:	3710      	adds	r7, #16
 8010c8e:	46bd      	mov	sp, r7
 8010c90:	bd80      	pop	{r7, pc}
 8010c92:	bf00      	nop
 8010c94:	0801cb14 	.word	0x0801cb14
 8010c98:	0801cc2c 	.word	0x0801cc2c
 8010c9c:	0801cb74 	.word	0x0801cb74
 8010ca0:	0801cc44 	.word	0x0801cc44
 8010ca4:	0801cc5c 	.word	0x0801cc5c

08010ca8 <pbuf_add_header_impl>:
 * @return non-zero on failure, zero on success.
 *
 */
static u8_t
pbuf_add_header_impl(struct pbuf *p, size_t header_size_increment, u8_t force)
{
 8010ca8:	b580      	push	{r7, lr}
 8010caa:	b086      	sub	sp, #24
 8010cac:	af00      	add	r7, sp, #0
 8010cae:	60f8      	str	r0, [r7, #12]
 8010cb0:	60b9      	str	r1, [r7, #8]
 8010cb2:	4613      	mov	r3, r2
 8010cb4:	71fb      	strb	r3, [r7, #7]
  u16_t type_internal;
  void *payload;
  u16_t increment_magnitude;

  LWIP_ASSERT("p != NULL", p != NULL);
 8010cb6:	68fb      	ldr	r3, [r7, #12]
 8010cb8:	2b00      	cmp	r3, #0
 8010cba:	d106      	bne.n	8010cca <pbuf_add_header_impl+0x22>
 8010cbc:	4b2b      	ldr	r3, [pc, #172]	; (8010d6c <pbuf_add_header_impl+0xc4>)
 8010cbe:	f240 12df 	movw	r2, #479	; 0x1df
 8010cc2:	492b      	ldr	r1, [pc, #172]	; (8010d70 <pbuf_add_header_impl+0xc8>)
 8010cc4:	482b      	ldr	r0, [pc, #172]	; (8010d74 <pbuf_add_header_impl+0xcc>)
 8010cc6:	f008 ffc3 	bl	8019c50 <iprintf>
  if ((p == NULL) || (header_size_increment > 0xFFFF)) {
 8010cca:	68fb      	ldr	r3, [r7, #12]
 8010ccc:	2b00      	cmp	r3, #0
 8010cce:	d003      	beq.n	8010cd8 <pbuf_add_header_impl+0x30>
 8010cd0:	68bb      	ldr	r3, [r7, #8]
 8010cd2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8010cd6:	d301      	bcc.n	8010cdc <pbuf_add_header_impl+0x34>
    return 1;
 8010cd8:	2301      	movs	r3, #1
 8010cda:	e043      	b.n	8010d64 <pbuf_add_header_impl+0xbc>
  }
  if (header_size_increment == 0) {
 8010cdc:	68bb      	ldr	r3, [r7, #8]
 8010cde:	2b00      	cmp	r3, #0
 8010ce0:	d101      	bne.n	8010ce6 <pbuf_add_header_impl+0x3e>
    return 0;
 8010ce2:	2300      	movs	r3, #0
 8010ce4:	e03e      	b.n	8010d64 <pbuf_add_header_impl+0xbc>
  }

  increment_magnitude = (u16_t)header_size_increment;
 8010ce6:	68bb      	ldr	r3, [r7, #8]
 8010ce8:	827b      	strh	r3, [r7, #18]
  /* Do not allow tot_len to wrap as a result. */
  if ((u16_t)(increment_magnitude + p->tot_len) < increment_magnitude) {
 8010cea:	68fb      	ldr	r3, [r7, #12]
 8010cec:	891a      	ldrh	r2, [r3, #8]
 8010cee:	8a7b      	ldrh	r3, [r7, #18]
 8010cf0:	4413      	add	r3, r2
 8010cf2:	b29b      	uxth	r3, r3
 8010cf4:	8a7a      	ldrh	r2, [r7, #18]
 8010cf6:	429a      	cmp	r2, r3
 8010cf8:	d901      	bls.n	8010cfe <pbuf_add_header_impl+0x56>
    return 1;
 8010cfa:	2301      	movs	r3, #1
 8010cfc:	e032      	b.n	8010d64 <pbuf_add_header_impl+0xbc>
  }

  type_internal = p->type_internal;
 8010cfe:	68fb      	ldr	r3, [r7, #12]
 8010d00:	7b1b      	ldrb	r3, [r3, #12]
 8010d02:	823b      	strh	r3, [r7, #16]

  /* pbuf types containing payloads? */
  if (type_internal & PBUF_TYPE_FLAG_STRUCT_DATA_CONTIGUOUS) {
 8010d04:	8a3b      	ldrh	r3, [r7, #16]
 8010d06:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8010d0a:	2b00      	cmp	r3, #0
 8010d0c:	d00c      	beq.n	8010d28 <pbuf_add_header_impl+0x80>
    /* set new payload pointer */
    payload = (u8_t *)p->payload - header_size_increment;
 8010d0e:	68fb      	ldr	r3, [r7, #12]
 8010d10:	685a      	ldr	r2, [r3, #4]
 8010d12:	68bb      	ldr	r3, [r7, #8]
 8010d14:	425b      	negs	r3, r3
 8010d16:	4413      	add	r3, r2
 8010d18:	617b      	str	r3, [r7, #20]
    /* boundary check fails? */
    if ((u8_t *)payload < (u8_t *)p + SIZEOF_STRUCT_PBUF) {
 8010d1a:	68fb      	ldr	r3, [r7, #12]
 8010d1c:	3310      	adds	r3, #16
 8010d1e:	697a      	ldr	r2, [r7, #20]
 8010d20:	429a      	cmp	r2, r3
 8010d22:	d20d      	bcs.n	8010d40 <pbuf_add_header_impl+0x98>
      LWIP_DEBUGF( PBUF_DEBUG | LWIP_DBG_TRACE,
                   ("pbuf_add_header: failed as %p < %p (not enough space for new header size)\n",
                    (void *)payload, (void *)((u8_t *)p + SIZEOF_STRUCT_PBUF)));
      /* bail out unsuccessfully */
      return 1;
 8010d24:	2301      	movs	r3, #1
 8010d26:	e01d      	b.n	8010d64 <pbuf_add_header_impl+0xbc>
    }
    /* pbuf types referring to external payloads? */
  } else {
    /* hide a header in the payload? */
    if (force) {
 8010d28:	79fb      	ldrb	r3, [r7, #7]
 8010d2a:	2b00      	cmp	r3, #0
 8010d2c:	d006      	beq.n	8010d3c <pbuf_add_header_impl+0x94>
      payload = (u8_t *)p->payload - header_size_increment;
 8010d2e:	68fb      	ldr	r3, [r7, #12]
 8010d30:	685a      	ldr	r2, [r3, #4]
 8010d32:	68bb      	ldr	r3, [r7, #8]
 8010d34:	425b      	negs	r3, r3
 8010d36:	4413      	add	r3, r2
 8010d38:	617b      	str	r3, [r7, #20]
 8010d3a:	e001      	b.n	8010d40 <pbuf_add_header_impl+0x98>
    } else {
      /* cannot expand payload to front (yet!)
       * bail out unsuccessfully */
      return 1;
 8010d3c:	2301      	movs	r3, #1
 8010d3e:	e011      	b.n	8010d64 <pbuf_add_header_impl+0xbc>
  }
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_add_header: old %p new %p (%"U16_F")\n",
              (void *)p->payload, (void *)payload, increment_magnitude));

  /* modify pbuf fields */
  p->payload = payload;
 8010d40:	68fb      	ldr	r3, [r7, #12]
 8010d42:	697a      	ldr	r2, [r7, #20]
 8010d44:	605a      	str	r2, [r3, #4]
  p->len = (u16_t)(p->len + increment_magnitude);
 8010d46:	68fb      	ldr	r3, [r7, #12]
 8010d48:	895a      	ldrh	r2, [r3, #10]
 8010d4a:	8a7b      	ldrh	r3, [r7, #18]
 8010d4c:	4413      	add	r3, r2
 8010d4e:	b29a      	uxth	r2, r3
 8010d50:	68fb      	ldr	r3, [r7, #12]
 8010d52:	815a      	strh	r2, [r3, #10]
  p->tot_len = (u16_t)(p->tot_len + increment_magnitude);
 8010d54:	68fb      	ldr	r3, [r7, #12]
 8010d56:	891a      	ldrh	r2, [r3, #8]
 8010d58:	8a7b      	ldrh	r3, [r7, #18]
 8010d5a:	4413      	add	r3, r2
 8010d5c:	b29a      	uxth	r2, r3
 8010d5e:	68fb      	ldr	r3, [r7, #12]
 8010d60:	811a      	strh	r2, [r3, #8]


  return 0;
 8010d62:	2300      	movs	r3, #0
}
 8010d64:	4618      	mov	r0, r3
 8010d66:	3718      	adds	r7, #24
 8010d68:	46bd      	mov	sp, r7
 8010d6a:	bd80      	pop	{r7, pc}
 8010d6c:	0801cb14 	.word	0x0801cb14
 8010d70:	0801cc78 	.word	0x0801cc78
 8010d74:	0801cb74 	.word	0x0801cb74

08010d78 <pbuf_add_header>:
 * @return non-zero on failure, zero on success.
 *
 */
u8_t
pbuf_add_header(struct pbuf *p, size_t header_size_increment)
{
 8010d78:	b580      	push	{r7, lr}
 8010d7a:	b082      	sub	sp, #8
 8010d7c:	af00      	add	r7, sp, #0
 8010d7e:	6078      	str	r0, [r7, #4]
 8010d80:	6039      	str	r1, [r7, #0]
  return pbuf_add_header_impl(p, header_size_increment, 0);
 8010d82:	2200      	movs	r2, #0
 8010d84:	6839      	ldr	r1, [r7, #0]
 8010d86:	6878      	ldr	r0, [r7, #4]
 8010d88:	f7ff ff8e 	bl	8010ca8 <pbuf_add_header_impl>
 8010d8c:	4603      	mov	r3, r0
}
 8010d8e:	4618      	mov	r0, r3
 8010d90:	3708      	adds	r7, #8
 8010d92:	46bd      	mov	sp, r7
 8010d94:	bd80      	pop	{r7, pc}
	...

08010d98 <pbuf_remove_header>:
 * @return non-zero on failure, zero on success.
 *
 */
u8_t
pbuf_remove_header(struct pbuf *p, size_t header_size_decrement)
{
 8010d98:	b580      	push	{r7, lr}
 8010d9a:	b084      	sub	sp, #16
 8010d9c:	af00      	add	r7, sp, #0
 8010d9e:	6078      	str	r0, [r7, #4]
 8010da0:	6039      	str	r1, [r7, #0]
  void *payload;
  u16_t increment_magnitude;

  LWIP_ASSERT("p != NULL", p != NULL);
 8010da2:	687b      	ldr	r3, [r7, #4]
 8010da4:	2b00      	cmp	r3, #0
 8010da6:	d106      	bne.n	8010db6 <pbuf_remove_header+0x1e>
 8010da8:	4b20      	ldr	r3, [pc, #128]	; (8010e2c <pbuf_remove_header+0x94>)
 8010daa:	f240 224b 	movw	r2, #587	; 0x24b
 8010dae:	4920      	ldr	r1, [pc, #128]	; (8010e30 <pbuf_remove_header+0x98>)
 8010db0:	4820      	ldr	r0, [pc, #128]	; (8010e34 <pbuf_remove_header+0x9c>)
 8010db2:	f008 ff4d 	bl	8019c50 <iprintf>
  if ((p == NULL) || (header_size_decrement > 0xFFFF)) {
 8010db6:	687b      	ldr	r3, [r7, #4]
 8010db8:	2b00      	cmp	r3, #0
 8010dba:	d003      	beq.n	8010dc4 <pbuf_remove_header+0x2c>
 8010dbc:	683b      	ldr	r3, [r7, #0]
 8010dbe:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8010dc2:	d301      	bcc.n	8010dc8 <pbuf_remove_header+0x30>
    return 1;
 8010dc4:	2301      	movs	r3, #1
 8010dc6:	e02c      	b.n	8010e22 <pbuf_remove_header+0x8a>
  }
  if (header_size_decrement == 0) {
 8010dc8:	683b      	ldr	r3, [r7, #0]
 8010dca:	2b00      	cmp	r3, #0
 8010dcc:	d101      	bne.n	8010dd2 <pbuf_remove_header+0x3a>
    return 0;
 8010dce:	2300      	movs	r3, #0
 8010dd0:	e027      	b.n	8010e22 <pbuf_remove_header+0x8a>
  }

  increment_magnitude = (u16_t)header_size_decrement;
 8010dd2:	683b      	ldr	r3, [r7, #0]
 8010dd4:	81fb      	strh	r3, [r7, #14]
  /* Check that we aren't going to move off the end of the pbuf */
  LWIP_ERROR("increment_magnitude <= p->len", (increment_magnitude <= p->len), return 1;);
 8010dd6:	687b      	ldr	r3, [r7, #4]
 8010dd8:	895b      	ldrh	r3, [r3, #10]
 8010dda:	89fa      	ldrh	r2, [r7, #14]
 8010ddc:	429a      	cmp	r2, r3
 8010dde:	d908      	bls.n	8010df2 <pbuf_remove_header+0x5a>
 8010de0:	4b12      	ldr	r3, [pc, #72]	; (8010e2c <pbuf_remove_header+0x94>)
 8010de2:	f240 2255 	movw	r2, #597	; 0x255
 8010de6:	4914      	ldr	r1, [pc, #80]	; (8010e38 <pbuf_remove_header+0xa0>)
 8010de8:	4812      	ldr	r0, [pc, #72]	; (8010e34 <pbuf_remove_header+0x9c>)
 8010dea:	f008 ff31 	bl	8019c50 <iprintf>
 8010dee:	2301      	movs	r3, #1
 8010df0:	e017      	b.n	8010e22 <pbuf_remove_header+0x8a>

  /* remember current payload pointer */
  payload = p->payload;
 8010df2:	687b      	ldr	r3, [r7, #4]
 8010df4:	685b      	ldr	r3, [r3, #4]
 8010df6:	60bb      	str	r3, [r7, #8]
  LWIP_UNUSED_ARG(payload); /* only used in LWIP_DEBUGF below */

  /* increase payload pointer (guarded by length check above) */
  p->payload = (u8_t *)p->payload + header_size_decrement;
 8010df8:	687b      	ldr	r3, [r7, #4]
 8010dfa:	685a      	ldr	r2, [r3, #4]
 8010dfc:	683b      	ldr	r3, [r7, #0]
 8010dfe:	441a      	add	r2, r3
 8010e00:	687b      	ldr	r3, [r7, #4]
 8010e02:	605a      	str	r2, [r3, #4]
  /* modify pbuf length fields */
  p->len = (u16_t)(p->len - increment_magnitude);
 8010e04:	687b      	ldr	r3, [r7, #4]
 8010e06:	895a      	ldrh	r2, [r3, #10]
 8010e08:	89fb      	ldrh	r3, [r7, #14]
 8010e0a:	1ad3      	subs	r3, r2, r3
 8010e0c:	b29a      	uxth	r2, r3
 8010e0e:	687b      	ldr	r3, [r7, #4]
 8010e10:	815a      	strh	r2, [r3, #10]
  p->tot_len = (u16_t)(p->tot_len - increment_magnitude);
 8010e12:	687b      	ldr	r3, [r7, #4]
 8010e14:	891a      	ldrh	r2, [r3, #8]
 8010e16:	89fb      	ldrh	r3, [r7, #14]
 8010e18:	1ad3      	subs	r3, r2, r3
 8010e1a:	b29a      	uxth	r2, r3
 8010e1c:	687b      	ldr	r3, [r7, #4]
 8010e1e:	811a      	strh	r2, [r3, #8]

  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_remove_header: old %p new %p (%"U16_F")\n",
              (void *)payload, (void *)p->payload, increment_magnitude));

  return 0;
 8010e20:	2300      	movs	r3, #0
}
 8010e22:	4618      	mov	r0, r3
 8010e24:	3710      	adds	r7, #16
 8010e26:	46bd      	mov	sp, r7
 8010e28:	bd80      	pop	{r7, pc}
 8010e2a:	bf00      	nop
 8010e2c:	0801cb14 	.word	0x0801cb14
 8010e30:	0801cc78 	.word	0x0801cc78
 8010e34:	0801cb74 	.word	0x0801cb74
 8010e38:	0801cc84 	.word	0x0801cc84

08010e3c <pbuf_header_impl>:

static u8_t
pbuf_header_impl(struct pbuf *p, s16_t header_size_increment, u8_t force)
{
 8010e3c:	b580      	push	{r7, lr}
 8010e3e:	b082      	sub	sp, #8
 8010e40:	af00      	add	r7, sp, #0
 8010e42:	6078      	str	r0, [r7, #4]
 8010e44:	460b      	mov	r3, r1
 8010e46:	807b      	strh	r3, [r7, #2]
 8010e48:	4613      	mov	r3, r2
 8010e4a:	707b      	strb	r3, [r7, #1]
  if (header_size_increment < 0) {
 8010e4c:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8010e50:	2b00      	cmp	r3, #0
 8010e52:	da08      	bge.n	8010e66 <pbuf_header_impl+0x2a>
    return pbuf_remove_header(p, (size_t) - header_size_increment);
 8010e54:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8010e58:	425b      	negs	r3, r3
 8010e5a:	4619      	mov	r1, r3
 8010e5c:	6878      	ldr	r0, [r7, #4]
 8010e5e:	f7ff ff9b 	bl	8010d98 <pbuf_remove_header>
 8010e62:	4603      	mov	r3, r0
 8010e64:	e007      	b.n	8010e76 <pbuf_header_impl+0x3a>
  } else {
    return pbuf_add_header_impl(p, (size_t)header_size_increment, force);
 8010e66:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8010e6a:	787a      	ldrb	r2, [r7, #1]
 8010e6c:	4619      	mov	r1, r3
 8010e6e:	6878      	ldr	r0, [r7, #4]
 8010e70:	f7ff ff1a 	bl	8010ca8 <pbuf_add_header_impl>
 8010e74:	4603      	mov	r3, r0
  }
}
 8010e76:	4618      	mov	r0, r3
 8010e78:	3708      	adds	r7, #8
 8010e7a:	46bd      	mov	sp, r7
 8010e7c:	bd80      	pop	{r7, pc}

08010e7e <pbuf_header_force>:
 * Same as pbuf_header but does not check if 'header_size > 0' is allowed.
 * This is used internally only, to allow PBUF_REF for RX.
 */
u8_t
pbuf_header_force(struct pbuf *p, s16_t header_size_increment)
{
 8010e7e:	b580      	push	{r7, lr}
 8010e80:	b082      	sub	sp, #8
 8010e82:	af00      	add	r7, sp, #0
 8010e84:	6078      	str	r0, [r7, #4]
 8010e86:	460b      	mov	r3, r1
 8010e88:	807b      	strh	r3, [r7, #2]
  return pbuf_header_impl(p, header_size_increment, 1);
 8010e8a:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8010e8e:	2201      	movs	r2, #1
 8010e90:	4619      	mov	r1, r3
 8010e92:	6878      	ldr	r0, [r7, #4]
 8010e94:	f7ff ffd2 	bl	8010e3c <pbuf_header_impl>
 8010e98:	4603      	mov	r3, r0
}
 8010e9a:	4618      	mov	r0, r3
 8010e9c:	3708      	adds	r7, #8
 8010e9e:	46bd      	mov	sp, r7
 8010ea0:	bd80      	pop	{r7, pc}
	...

08010ea4 <pbuf_free>:
 * 1->1->1 becomes .......
 *
 */
u8_t
pbuf_free(struct pbuf *p)
{
 8010ea4:	b580      	push	{r7, lr}
 8010ea6:	b086      	sub	sp, #24
 8010ea8:	af00      	add	r7, sp, #0
 8010eaa:	6078      	str	r0, [r7, #4]
  u8_t alloc_src;
  struct pbuf *q;
  u8_t count;

  if (p == NULL) {
 8010eac:	687b      	ldr	r3, [r7, #4]
 8010eae:	2b00      	cmp	r3, #0
 8010eb0:	d10b      	bne.n	8010eca <pbuf_free+0x26>
    LWIP_ASSERT("p != NULL", p != NULL);
 8010eb2:	687b      	ldr	r3, [r7, #4]
 8010eb4:	2b00      	cmp	r3, #0
 8010eb6:	d106      	bne.n	8010ec6 <pbuf_free+0x22>
 8010eb8:	4b38      	ldr	r3, [pc, #224]	; (8010f9c <pbuf_free+0xf8>)
 8010eba:	f44f 7237 	mov.w	r2, #732	; 0x2dc
 8010ebe:	4938      	ldr	r1, [pc, #224]	; (8010fa0 <pbuf_free+0xfc>)
 8010ec0:	4838      	ldr	r0, [pc, #224]	; (8010fa4 <pbuf_free+0x100>)
 8010ec2:	f008 fec5 	bl	8019c50 <iprintf>
    /* if assertions are disabled, proceed with debug output */
    LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_LEVEL_SERIOUS,
                ("pbuf_free(p == NULL) was called.\n"));
    return 0;
 8010ec6:	2300      	movs	r3, #0
 8010ec8:	e063      	b.n	8010f92 <pbuf_free+0xee>
  }
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_free(%p)\n", (void *)p));

  PERF_START;

  count = 0;
 8010eca:	2300      	movs	r3, #0
 8010ecc:	75fb      	strb	r3, [r7, #23]
  /* de-allocate all consecutive pbufs from the head of the chain that
   * obtain a zero reference count after decrementing*/
  while (p != NULL) {
 8010ece:	e05c      	b.n	8010f8a <pbuf_free+0xe6>
    /* Since decrementing ref cannot be guaranteed to be a single machine operation
     * we must protect it. We put the new ref into a local variable to prevent
     * further protection. */
    SYS_ARCH_PROTECT(old_level);
    /* all pbufs in a chain are referenced at least once */
    LWIP_ASSERT("pbuf_free: p->ref > 0", p->ref > 0);
 8010ed0:	687b      	ldr	r3, [r7, #4]
 8010ed2:	7b9b      	ldrb	r3, [r3, #14]
 8010ed4:	2b00      	cmp	r3, #0
 8010ed6:	d106      	bne.n	8010ee6 <pbuf_free+0x42>
 8010ed8:	4b30      	ldr	r3, [pc, #192]	; (8010f9c <pbuf_free+0xf8>)
 8010eda:	f240 22f1 	movw	r2, #753	; 0x2f1
 8010ede:	4932      	ldr	r1, [pc, #200]	; (8010fa8 <pbuf_free+0x104>)
 8010ee0:	4830      	ldr	r0, [pc, #192]	; (8010fa4 <pbuf_free+0x100>)
 8010ee2:	f008 feb5 	bl	8019c50 <iprintf>
    /* decrease reference count (number of pointers to pbuf) */
    ref = --(p->ref);
 8010ee6:	687b      	ldr	r3, [r7, #4]
 8010ee8:	7b9b      	ldrb	r3, [r3, #14]
 8010eea:	3b01      	subs	r3, #1
 8010eec:	b2da      	uxtb	r2, r3
 8010eee:	687b      	ldr	r3, [r7, #4]
 8010ef0:	739a      	strb	r2, [r3, #14]
 8010ef2:	687b      	ldr	r3, [r7, #4]
 8010ef4:	7b9b      	ldrb	r3, [r3, #14]
 8010ef6:	75bb      	strb	r3, [r7, #22]
    SYS_ARCH_UNPROTECT(old_level);
    /* this pbuf is no longer referenced to? */
    if (ref == 0) {
 8010ef8:	7dbb      	ldrb	r3, [r7, #22]
 8010efa:	2b00      	cmp	r3, #0
 8010efc:	d143      	bne.n	8010f86 <pbuf_free+0xe2>
      /* remember next pbuf in chain for next iteration */
      q = p->next;
 8010efe:	687b      	ldr	r3, [r7, #4]
 8010f00:	681b      	ldr	r3, [r3, #0]
 8010f02:	613b      	str	r3, [r7, #16]
      LWIP_DEBUGF( PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_free: deallocating %p\n", (void *)p));
      alloc_src = pbuf_get_allocsrc(p);
 8010f04:	687b      	ldr	r3, [r7, #4]
 8010f06:	7b1b      	ldrb	r3, [r3, #12]
 8010f08:	f003 030f 	and.w	r3, r3, #15
 8010f0c:	73fb      	strb	r3, [r7, #15]
#if LWIP_SUPPORT_CUSTOM_PBUF
      /* is this a custom pbuf? */
      if ((p->flags & PBUF_FLAG_IS_CUSTOM) != 0) {
 8010f0e:	687b      	ldr	r3, [r7, #4]
 8010f10:	7b5b      	ldrb	r3, [r3, #13]
 8010f12:	f003 0302 	and.w	r3, r3, #2
 8010f16:	2b00      	cmp	r3, #0
 8010f18:	d011      	beq.n	8010f3e <pbuf_free+0x9a>
        struct pbuf_custom *pc = (struct pbuf_custom *)p;
 8010f1a:	687b      	ldr	r3, [r7, #4]
 8010f1c:	60bb      	str	r3, [r7, #8]
        LWIP_ASSERT("pc->custom_free_function != NULL", pc->custom_free_function != NULL);
 8010f1e:	68bb      	ldr	r3, [r7, #8]
 8010f20:	691b      	ldr	r3, [r3, #16]
 8010f22:	2b00      	cmp	r3, #0
 8010f24:	d106      	bne.n	8010f34 <pbuf_free+0x90>
 8010f26:	4b1d      	ldr	r3, [pc, #116]	; (8010f9c <pbuf_free+0xf8>)
 8010f28:	f240 22ff 	movw	r2, #767	; 0x2ff
 8010f2c:	491f      	ldr	r1, [pc, #124]	; (8010fac <pbuf_free+0x108>)
 8010f2e:	481d      	ldr	r0, [pc, #116]	; (8010fa4 <pbuf_free+0x100>)
 8010f30:	f008 fe8e 	bl	8019c50 <iprintf>
        pc->custom_free_function(p);
 8010f34:	68bb      	ldr	r3, [r7, #8]
 8010f36:	691b      	ldr	r3, [r3, #16]
 8010f38:	6878      	ldr	r0, [r7, #4]
 8010f3a:	4798      	blx	r3
 8010f3c:	e01d      	b.n	8010f7a <pbuf_free+0xd6>
      } else
#endif /* LWIP_SUPPORT_CUSTOM_PBUF */
      {
        /* is this a pbuf from the pool? */
        if (alloc_src == PBUF_TYPE_ALLOC_SRC_MASK_STD_MEMP_PBUF_POOL) {
 8010f3e:	7bfb      	ldrb	r3, [r7, #15]
 8010f40:	2b02      	cmp	r3, #2
 8010f42:	d104      	bne.n	8010f4e <pbuf_free+0xaa>
          memp_free(MEMP_PBUF_POOL, p);
 8010f44:	6879      	ldr	r1, [r7, #4]
 8010f46:	2008      	movs	r0, #8
 8010f48:	f7ff f956 	bl	80101f8 <memp_free>
 8010f4c:	e015      	b.n	8010f7a <pbuf_free+0xd6>
          /* is this a ROM or RAM referencing pbuf? */
        } else if (alloc_src == PBUF_TYPE_ALLOC_SRC_MASK_STD_MEMP_PBUF) {
 8010f4e:	7bfb      	ldrb	r3, [r7, #15]
 8010f50:	2b01      	cmp	r3, #1
 8010f52:	d104      	bne.n	8010f5e <pbuf_free+0xba>
          memp_free(MEMP_PBUF, p);
 8010f54:	6879      	ldr	r1, [r7, #4]
 8010f56:	2007      	movs	r0, #7
 8010f58:	f7ff f94e 	bl	80101f8 <memp_free>
 8010f5c:	e00d      	b.n	8010f7a <pbuf_free+0xd6>
          /* type == PBUF_RAM */
        } else if (alloc_src == PBUF_TYPE_ALLOC_SRC_MASK_STD_HEAP) {
 8010f5e:	7bfb      	ldrb	r3, [r7, #15]
 8010f60:	2b00      	cmp	r3, #0
 8010f62:	d103      	bne.n	8010f6c <pbuf_free+0xc8>
          mem_free(p);
 8010f64:	6878      	ldr	r0, [r7, #4]
 8010f66:	f7fe fdf1 	bl	800fb4c <mem_free>
 8010f6a:	e006      	b.n	8010f7a <pbuf_free+0xd6>
        } else {
          /* @todo: support freeing other types */
          LWIP_ASSERT("invalid pbuf type", 0);
 8010f6c:	4b0b      	ldr	r3, [pc, #44]	; (8010f9c <pbuf_free+0xf8>)
 8010f6e:	f240 320f 	movw	r2, #783	; 0x30f
 8010f72:	490f      	ldr	r1, [pc, #60]	; (8010fb0 <pbuf_free+0x10c>)
 8010f74:	480b      	ldr	r0, [pc, #44]	; (8010fa4 <pbuf_free+0x100>)
 8010f76:	f008 fe6b 	bl	8019c50 <iprintf>
        }
      }
      count++;
 8010f7a:	7dfb      	ldrb	r3, [r7, #23]
 8010f7c:	3301      	adds	r3, #1
 8010f7e:	75fb      	strb	r3, [r7, #23]
      /* proceed to next pbuf */
      p = q;
 8010f80:	693b      	ldr	r3, [r7, #16]
 8010f82:	607b      	str	r3, [r7, #4]
 8010f84:	e001      	b.n	8010f8a <pbuf_free+0xe6>
      /* p->ref > 0, this pbuf is still referenced to */
      /* (and so the remaining pbufs in chain as well) */
    } else {
      LWIP_DEBUGF( PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_free: %p has ref %"U16_F", ending here.\n", (void *)p, (u16_t)ref));
      /* stop walking through the chain */
      p = NULL;
 8010f86:	2300      	movs	r3, #0
 8010f88:	607b      	str	r3, [r7, #4]
  while (p != NULL) {
 8010f8a:	687b      	ldr	r3, [r7, #4]
 8010f8c:	2b00      	cmp	r3, #0
 8010f8e:	d19f      	bne.n	8010ed0 <pbuf_free+0x2c>
    }
  }
  PERF_STOP("pbuf_free");
  /* return number of de-allocated pbufs */
  return count;
 8010f90:	7dfb      	ldrb	r3, [r7, #23]
}
 8010f92:	4618      	mov	r0, r3
 8010f94:	3718      	adds	r7, #24
 8010f96:	46bd      	mov	sp, r7
 8010f98:	bd80      	pop	{r7, pc}
 8010f9a:	bf00      	nop
 8010f9c:	0801cb14 	.word	0x0801cb14
 8010fa0:	0801cc78 	.word	0x0801cc78
 8010fa4:	0801cb74 	.word	0x0801cb74
 8010fa8:	0801cca4 	.word	0x0801cca4
 8010fac:	0801ccbc 	.word	0x0801ccbc
 8010fb0:	0801cce0 	.word	0x0801cce0

08010fb4 <pbuf_clen>:
 * @param p first pbuf of chain
 * @return the number of pbufs in a chain
 */
u16_t
pbuf_clen(const struct pbuf *p)
{
 8010fb4:	b480      	push	{r7}
 8010fb6:	b085      	sub	sp, #20
 8010fb8:	af00      	add	r7, sp, #0
 8010fba:	6078      	str	r0, [r7, #4]
  u16_t len;

  len = 0;
 8010fbc:	2300      	movs	r3, #0
 8010fbe:	81fb      	strh	r3, [r7, #14]
  while (p != NULL) {
 8010fc0:	e005      	b.n	8010fce <pbuf_clen+0x1a>
    ++len;
 8010fc2:	89fb      	ldrh	r3, [r7, #14]
 8010fc4:	3301      	adds	r3, #1
 8010fc6:	81fb      	strh	r3, [r7, #14]
    p = p->next;
 8010fc8:	687b      	ldr	r3, [r7, #4]
 8010fca:	681b      	ldr	r3, [r3, #0]
 8010fcc:	607b      	str	r3, [r7, #4]
  while (p != NULL) {
 8010fce:	687b      	ldr	r3, [r7, #4]
 8010fd0:	2b00      	cmp	r3, #0
 8010fd2:	d1f6      	bne.n	8010fc2 <pbuf_clen+0xe>
  }
  return len;
 8010fd4:	89fb      	ldrh	r3, [r7, #14]
}
 8010fd6:	4618      	mov	r0, r3
 8010fd8:	3714      	adds	r7, #20
 8010fda:	46bd      	mov	sp, r7
 8010fdc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010fe0:	4770      	bx	lr
	...

08010fe4 <pbuf_ref>:
 * @param p pbuf to increase reference counter of
 *
 */
void
pbuf_ref(struct pbuf *p)
{
 8010fe4:	b580      	push	{r7, lr}
 8010fe6:	b082      	sub	sp, #8
 8010fe8:	af00      	add	r7, sp, #0
 8010fea:	6078      	str	r0, [r7, #4]
  /* pbuf given? */
  if (p != NULL) {
 8010fec:	687b      	ldr	r3, [r7, #4]
 8010fee:	2b00      	cmp	r3, #0
 8010ff0:	d010      	beq.n	8011014 <pbuf_ref+0x30>
    SYS_ARCH_SET(p->ref, (LWIP_PBUF_REF_T)(p->ref + 1));
 8010ff2:	687b      	ldr	r3, [r7, #4]
 8010ff4:	7b9b      	ldrb	r3, [r3, #14]
 8010ff6:	3301      	adds	r3, #1
 8010ff8:	b2da      	uxtb	r2, r3
 8010ffa:	687b      	ldr	r3, [r7, #4]
 8010ffc:	739a      	strb	r2, [r3, #14]
    LWIP_ASSERT("pbuf ref overflow", p->ref > 0);
 8010ffe:	687b      	ldr	r3, [r7, #4]
 8011000:	7b9b      	ldrb	r3, [r3, #14]
 8011002:	2b00      	cmp	r3, #0
 8011004:	d106      	bne.n	8011014 <pbuf_ref+0x30>
 8011006:	4b05      	ldr	r3, [pc, #20]	; (801101c <pbuf_ref+0x38>)
 8011008:	f240 3242 	movw	r2, #834	; 0x342
 801100c:	4904      	ldr	r1, [pc, #16]	; (8011020 <pbuf_ref+0x3c>)
 801100e:	4805      	ldr	r0, [pc, #20]	; (8011024 <pbuf_ref+0x40>)
 8011010:	f008 fe1e 	bl	8019c50 <iprintf>
  }
}
 8011014:	bf00      	nop
 8011016:	3708      	adds	r7, #8
 8011018:	46bd      	mov	sp, r7
 801101a:	bd80      	pop	{r7, pc}
 801101c:	0801cb14 	.word	0x0801cb14
 8011020:	0801ccf4 	.word	0x0801ccf4
 8011024:	0801cb74 	.word	0x0801cb74

08011028 <pbuf_cat>:
 *
 * @see pbuf_chain()
 */
void
pbuf_cat(struct pbuf *h, struct pbuf *t)
{
 8011028:	b580      	push	{r7, lr}
 801102a:	b084      	sub	sp, #16
 801102c:	af00      	add	r7, sp, #0
 801102e:	6078      	str	r0, [r7, #4]
 8011030:	6039      	str	r1, [r7, #0]
  struct pbuf *p;

  LWIP_ERROR("(h != NULL) && (t != NULL) (programmer violates API)",
 8011032:	687b      	ldr	r3, [r7, #4]
 8011034:	2b00      	cmp	r3, #0
 8011036:	d002      	beq.n	801103e <pbuf_cat+0x16>
 8011038:	683b      	ldr	r3, [r7, #0]
 801103a:	2b00      	cmp	r3, #0
 801103c:	d107      	bne.n	801104e <pbuf_cat+0x26>
 801103e:	4b20      	ldr	r3, [pc, #128]	; (80110c0 <pbuf_cat+0x98>)
 8011040:	f240 3259 	movw	r2, #857	; 0x359
 8011044:	491f      	ldr	r1, [pc, #124]	; (80110c4 <pbuf_cat+0x9c>)
 8011046:	4820      	ldr	r0, [pc, #128]	; (80110c8 <pbuf_cat+0xa0>)
 8011048:	f008 fe02 	bl	8019c50 <iprintf>
 801104c:	e034      	b.n	80110b8 <pbuf_cat+0x90>
             ((h != NULL) && (t != NULL)), return;);

  /* proceed to last pbuf of chain */
  for (p = h; p->next != NULL; p = p->next) {
 801104e:	687b      	ldr	r3, [r7, #4]
 8011050:	60fb      	str	r3, [r7, #12]
 8011052:	e00a      	b.n	801106a <pbuf_cat+0x42>
    /* add total length of second chain to all totals of first chain */
    p->tot_len = (u16_t)(p->tot_len + t->tot_len);
 8011054:	68fb      	ldr	r3, [r7, #12]
 8011056:	891a      	ldrh	r2, [r3, #8]
 8011058:	683b      	ldr	r3, [r7, #0]
 801105a:	891b      	ldrh	r3, [r3, #8]
 801105c:	4413      	add	r3, r2
 801105e:	b29a      	uxth	r2, r3
 8011060:	68fb      	ldr	r3, [r7, #12]
 8011062:	811a      	strh	r2, [r3, #8]
  for (p = h; p->next != NULL; p = p->next) {
 8011064:	68fb      	ldr	r3, [r7, #12]
 8011066:	681b      	ldr	r3, [r3, #0]
 8011068:	60fb      	str	r3, [r7, #12]
 801106a:	68fb      	ldr	r3, [r7, #12]
 801106c:	681b      	ldr	r3, [r3, #0]
 801106e:	2b00      	cmp	r3, #0
 8011070:	d1f0      	bne.n	8011054 <pbuf_cat+0x2c>
  }
  /* { p is last pbuf of first h chain, p->next == NULL } */
  LWIP_ASSERT("p->tot_len == p->len (of last pbuf in chain)", p->tot_len == p->len);
 8011072:	68fb      	ldr	r3, [r7, #12]
 8011074:	891a      	ldrh	r2, [r3, #8]
 8011076:	68fb      	ldr	r3, [r7, #12]
 8011078:	895b      	ldrh	r3, [r3, #10]
 801107a:	429a      	cmp	r2, r3
 801107c:	d006      	beq.n	801108c <pbuf_cat+0x64>
 801107e:	4b10      	ldr	r3, [pc, #64]	; (80110c0 <pbuf_cat+0x98>)
 8011080:	f240 3262 	movw	r2, #866	; 0x362
 8011084:	4911      	ldr	r1, [pc, #68]	; (80110cc <pbuf_cat+0xa4>)
 8011086:	4810      	ldr	r0, [pc, #64]	; (80110c8 <pbuf_cat+0xa0>)
 8011088:	f008 fde2 	bl	8019c50 <iprintf>
  LWIP_ASSERT("p->next == NULL", p->next == NULL);
 801108c:	68fb      	ldr	r3, [r7, #12]
 801108e:	681b      	ldr	r3, [r3, #0]
 8011090:	2b00      	cmp	r3, #0
 8011092:	d006      	beq.n	80110a2 <pbuf_cat+0x7a>
 8011094:	4b0a      	ldr	r3, [pc, #40]	; (80110c0 <pbuf_cat+0x98>)
 8011096:	f240 3263 	movw	r2, #867	; 0x363
 801109a:	490d      	ldr	r1, [pc, #52]	; (80110d0 <pbuf_cat+0xa8>)
 801109c:	480a      	ldr	r0, [pc, #40]	; (80110c8 <pbuf_cat+0xa0>)
 801109e:	f008 fdd7 	bl	8019c50 <iprintf>
  /* add total length of second chain to last pbuf total of first chain */
  p->tot_len = (u16_t)(p->tot_len + t->tot_len);
 80110a2:	68fb      	ldr	r3, [r7, #12]
 80110a4:	891a      	ldrh	r2, [r3, #8]
 80110a6:	683b      	ldr	r3, [r7, #0]
 80110a8:	891b      	ldrh	r3, [r3, #8]
 80110aa:	4413      	add	r3, r2
 80110ac:	b29a      	uxth	r2, r3
 80110ae:	68fb      	ldr	r3, [r7, #12]
 80110b0:	811a      	strh	r2, [r3, #8]
  /* chain last pbuf of head (p) with first of tail (t) */
  p->next = t;
 80110b2:	68fb      	ldr	r3, [r7, #12]
 80110b4:	683a      	ldr	r2, [r7, #0]
 80110b6:	601a      	str	r2, [r3, #0]
  /* p->next now references t, but the caller will drop its reference to t,
   * so netto there is no change to the reference count of t.
   */
}
 80110b8:	3710      	adds	r7, #16
 80110ba:	46bd      	mov	sp, r7
 80110bc:	bd80      	pop	{r7, pc}
 80110be:	bf00      	nop
 80110c0:	0801cb14 	.word	0x0801cb14
 80110c4:	0801cd08 	.word	0x0801cd08
 80110c8:	0801cb74 	.word	0x0801cb74
 80110cc:	0801cd40 	.word	0x0801cd40
 80110d0:	0801cd70 	.word	0x0801cd70

080110d4 <pbuf_copy>:
 *         ERR_ARG if one of the pbufs is NULL or p_to is not big
 *                 enough to hold p_from
 */
err_t
pbuf_copy(struct pbuf *p_to, const struct pbuf *p_from)
{
 80110d4:	b580      	push	{r7, lr}
 80110d6:	b086      	sub	sp, #24
 80110d8:	af00      	add	r7, sp, #0
 80110da:	6078      	str	r0, [r7, #4]
 80110dc:	6039      	str	r1, [r7, #0]
  size_t offset_to = 0, offset_from = 0, len;
 80110de:	2300      	movs	r3, #0
 80110e0:	617b      	str	r3, [r7, #20]
 80110e2:	2300      	movs	r3, #0
 80110e4:	613b      	str	r3, [r7, #16]

  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_copy(%p, %p)\n",
              (const void *)p_to, (const void *)p_from));

  /* is the target big enough to hold the source? */
  LWIP_ERROR("pbuf_copy: target not big enough to hold source", ((p_to != NULL) &&
 80110e6:	687b      	ldr	r3, [r7, #4]
 80110e8:	2b00      	cmp	r3, #0
 80110ea:	d008      	beq.n	80110fe <pbuf_copy+0x2a>
 80110ec:	683b      	ldr	r3, [r7, #0]
 80110ee:	2b00      	cmp	r3, #0
 80110f0:	d005      	beq.n	80110fe <pbuf_copy+0x2a>
 80110f2:	687b      	ldr	r3, [r7, #4]
 80110f4:	891a      	ldrh	r2, [r3, #8]
 80110f6:	683b      	ldr	r3, [r7, #0]
 80110f8:	891b      	ldrh	r3, [r3, #8]
 80110fa:	429a      	cmp	r2, r3
 80110fc:	d209      	bcs.n	8011112 <pbuf_copy+0x3e>
 80110fe:	4b57      	ldr	r3, [pc, #348]	; (801125c <pbuf_copy+0x188>)
 8011100:	f240 32c9 	movw	r2, #969	; 0x3c9
 8011104:	4956      	ldr	r1, [pc, #344]	; (8011260 <pbuf_copy+0x18c>)
 8011106:	4857      	ldr	r0, [pc, #348]	; (8011264 <pbuf_copy+0x190>)
 8011108:	f008 fda2 	bl	8019c50 <iprintf>
 801110c:	f06f 030f 	mvn.w	r3, #15
 8011110:	e09f      	b.n	8011252 <pbuf_copy+0x17e>
             (p_from != NULL) && (p_to->tot_len >= p_from->tot_len)), return ERR_ARG;);

  /* iterate through pbuf chain */
  do {
    /* copy one part of the original chain */
    if ((p_to->len - offset_to) >= (p_from->len - offset_from)) {
 8011112:	687b      	ldr	r3, [r7, #4]
 8011114:	895b      	ldrh	r3, [r3, #10]
 8011116:	461a      	mov	r2, r3
 8011118:	697b      	ldr	r3, [r7, #20]
 801111a:	1ad2      	subs	r2, r2, r3
 801111c:	683b      	ldr	r3, [r7, #0]
 801111e:	895b      	ldrh	r3, [r3, #10]
 8011120:	4619      	mov	r1, r3
 8011122:	693b      	ldr	r3, [r7, #16]
 8011124:	1acb      	subs	r3, r1, r3
 8011126:	429a      	cmp	r2, r3
 8011128:	d306      	bcc.n	8011138 <pbuf_copy+0x64>
      /* complete current p_from fits into current p_to */
      len = p_from->len - offset_from;
 801112a:	683b      	ldr	r3, [r7, #0]
 801112c:	895b      	ldrh	r3, [r3, #10]
 801112e:	461a      	mov	r2, r3
 8011130:	693b      	ldr	r3, [r7, #16]
 8011132:	1ad3      	subs	r3, r2, r3
 8011134:	60fb      	str	r3, [r7, #12]
 8011136:	e005      	b.n	8011144 <pbuf_copy+0x70>
    } else {
      /* current p_from does not fit into current p_to */
      len = p_to->len - offset_to;
 8011138:	687b      	ldr	r3, [r7, #4]
 801113a:	895b      	ldrh	r3, [r3, #10]
 801113c:	461a      	mov	r2, r3
 801113e:	697b      	ldr	r3, [r7, #20]
 8011140:	1ad3      	subs	r3, r2, r3
 8011142:	60fb      	str	r3, [r7, #12]
    }
    MEMCPY((u8_t *)p_to->payload + offset_to, (u8_t *)p_from->payload + offset_from, len);
 8011144:	687b      	ldr	r3, [r7, #4]
 8011146:	685a      	ldr	r2, [r3, #4]
 8011148:	697b      	ldr	r3, [r7, #20]
 801114a:	18d0      	adds	r0, r2, r3
 801114c:	683b      	ldr	r3, [r7, #0]
 801114e:	685a      	ldr	r2, [r3, #4]
 8011150:	693b      	ldr	r3, [r7, #16]
 8011152:	4413      	add	r3, r2
 8011154:	68fa      	ldr	r2, [r7, #12]
 8011156:	4619      	mov	r1, r3
 8011158:	f008 ff49 	bl	8019fee <memcpy>
    offset_to += len;
 801115c:	697a      	ldr	r2, [r7, #20]
 801115e:	68fb      	ldr	r3, [r7, #12]
 8011160:	4413      	add	r3, r2
 8011162:	617b      	str	r3, [r7, #20]
    offset_from += len;
 8011164:	693a      	ldr	r2, [r7, #16]
 8011166:	68fb      	ldr	r3, [r7, #12]
 8011168:	4413      	add	r3, r2
 801116a:	613b      	str	r3, [r7, #16]
    LWIP_ASSERT("offset_to <= p_to->len", offset_to <= p_to->len);
 801116c:	687b      	ldr	r3, [r7, #4]
 801116e:	895b      	ldrh	r3, [r3, #10]
 8011170:	461a      	mov	r2, r3
 8011172:	697b      	ldr	r3, [r7, #20]
 8011174:	4293      	cmp	r3, r2
 8011176:	d906      	bls.n	8011186 <pbuf_copy+0xb2>
 8011178:	4b38      	ldr	r3, [pc, #224]	; (801125c <pbuf_copy+0x188>)
 801117a:	f240 32d9 	movw	r2, #985	; 0x3d9
 801117e:	493a      	ldr	r1, [pc, #232]	; (8011268 <pbuf_copy+0x194>)
 8011180:	4838      	ldr	r0, [pc, #224]	; (8011264 <pbuf_copy+0x190>)
 8011182:	f008 fd65 	bl	8019c50 <iprintf>
    LWIP_ASSERT("offset_from <= p_from->len", offset_from <= p_from->len);
 8011186:	683b      	ldr	r3, [r7, #0]
 8011188:	895b      	ldrh	r3, [r3, #10]
 801118a:	461a      	mov	r2, r3
 801118c:	693b      	ldr	r3, [r7, #16]
 801118e:	4293      	cmp	r3, r2
 8011190:	d906      	bls.n	80111a0 <pbuf_copy+0xcc>
 8011192:	4b32      	ldr	r3, [pc, #200]	; (801125c <pbuf_copy+0x188>)
 8011194:	f240 32da 	movw	r2, #986	; 0x3da
 8011198:	4934      	ldr	r1, [pc, #208]	; (801126c <pbuf_copy+0x198>)
 801119a:	4832      	ldr	r0, [pc, #200]	; (8011264 <pbuf_copy+0x190>)
 801119c:	f008 fd58 	bl	8019c50 <iprintf>
    if (offset_from >= p_from->len) {
 80111a0:	683b      	ldr	r3, [r7, #0]
 80111a2:	895b      	ldrh	r3, [r3, #10]
 80111a4:	461a      	mov	r2, r3
 80111a6:	693b      	ldr	r3, [r7, #16]
 80111a8:	4293      	cmp	r3, r2
 80111aa:	d304      	bcc.n	80111b6 <pbuf_copy+0xe2>
      /* on to next p_from (if any) */
      offset_from = 0;
 80111ac:	2300      	movs	r3, #0
 80111ae:	613b      	str	r3, [r7, #16]
      p_from = p_from->next;
 80111b0:	683b      	ldr	r3, [r7, #0]
 80111b2:	681b      	ldr	r3, [r3, #0]
 80111b4:	603b      	str	r3, [r7, #0]
    }
    if (offset_to == p_to->len) {
 80111b6:	687b      	ldr	r3, [r7, #4]
 80111b8:	895b      	ldrh	r3, [r3, #10]
 80111ba:	461a      	mov	r2, r3
 80111bc:	697b      	ldr	r3, [r7, #20]
 80111be:	4293      	cmp	r3, r2
 80111c0:	d114      	bne.n	80111ec <pbuf_copy+0x118>
      /* on to next p_to (if any) */
      offset_to = 0;
 80111c2:	2300      	movs	r3, #0
 80111c4:	617b      	str	r3, [r7, #20]
      p_to = p_to->next;
 80111c6:	687b      	ldr	r3, [r7, #4]
 80111c8:	681b      	ldr	r3, [r3, #0]
 80111ca:	607b      	str	r3, [r7, #4]
      LWIP_ERROR("p_to != NULL", (p_to != NULL) || (p_from == NULL), return ERR_ARG;);
 80111cc:	687b      	ldr	r3, [r7, #4]
 80111ce:	2b00      	cmp	r3, #0
 80111d0:	d10c      	bne.n	80111ec <pbuf_copy+0x118>
 80111d2:	683b      	ldr	r3, [r7, #0]
 80111d4:	2b00      	cmp	r3, #0
 80111d6:	d009      	beq.n	80111ec <pbuf_copy+0x118>
 80111d8:	4b20      	ldr	r3, [pc, #128]	; (801125c <pbuf_copy+0x188>)
 80111da:	f44f 7279 	mov.w	r2, #996	; 0x3e4
 80111de:	4924      	ldr	r1, [pc, #144]	; (8011270 <pbuf_copy+0x19c>)
 80111e0:	4820      	ldr	r0, [pc, #128]	; (8011264 <pbuf_copy+0x190>)
 80111e2:	f008 fd35 	bl	8019c50 <iprintf>
 80111e6:	f06f 030f 	mvn.w	r3, #15
 80111ea:	e032      	b.n	8011252 <pbuf_copy+0x17e>
    }

    if ((p_from != NULL) && (p_from->len == p_from->tot_len)) {
 80111ec:	683b      	ldr	r3, [r7, #0]
 80111ee:	2b00      	cmp	r3, #0
 80111f0:	d013      	beq.n	801121a <pbuf_copy+0x146>
 80111f2:	683b      	ldr	r3, [r7, #0]
 80111f4:	895a      	ldrh	r2, [r3, #10]
 80111f6:	683b      	ldr	r3, [r7, #0]
 80111f8:	891b      	ldrh	r3, [r3, #8]
 80111fa:	429a      	cmp	r2, r3
 80111fc:	d10d      	bne.n	801121a <pbuf_copy+0x146>
      /* don't copy more than one packet! */
      LWIP_ERROR("pbuf_copy() does not allow packet queues!",
 80111fe:	683b      	ldr	r3, [r7, #0]
 8011200:	681b      	ldr	r3, [r3, #0]
 8011202:	2b00      	cmp	r3, #0
 8011204:	d009      	beq.n	801121a <pbuf_copy+0x146>
 8011206:	4b15      	ldr	r3, [pc, #84]	; (801125c <pbuf_copy+0x188>)
 8011208:	f240 32e9 	movw	r2, #1001	; 0x3e9
 801120c:	4919      	ldr	r1, [pc, #100]	; (8011274 <pbuf_copy+0x1a0>)
 801120e:	4815      	ldr	r0, [pc, #84]	; (8011264 <pbuf_copy+0x190>)
 8011210:	f008 fd1e 	bl	8019c50 <iprintf>
 8011214:	f06f 0305 	mvn.w	r3, #5
 8011218:	e01b      	b.n	8011252 <pbuf_copy+0x17e>
                 (p_from->next == NULL), return ERR_VAL;);
    }
    if ((p_to != NULL) && (p_to->len == p_to->tot_len)) {
 801121a:	687b      	ldr	r3, [r7, #4]
 801121c:	2b00      	cmp	r3, #0
 801121e:	d013      	beq.n	8011248 <pbuf_copy+0x174>
 8011220:	687b      	ldr	r3, [r7, #4]
 8011222:	895a      	ldrh	r2, [r3, #10]
 8011224:	687b      	ldr	r3, [r7, #4]
 8011226:	891b      	ldrh	r3, [r3, #8]
 8011228:	429a      	cmp	r2, r3
 801122a:	d10d      	bne.n	8011248 <pbuf_copy+0x174>
      /* don't copy more than one packet! */
      LWIP_ERROR("pbuf_copy() does not allow packet queues!",
 801122c:	687b      	ldr	r3, [r7, #4]
 801122e:	681b      	ldr	r3, [r3, #0]
 8011230:	2b00      	cmp	r3, #0
 8011232:	d009      	beq.n	8011248 <pbuf_copy+0x174>
 8011234:	4b09      	ldr	r3, [pc, #36]	; (801125c <pbuf_copy+0x188>)
 8011236:	f240 32ee 	movw	r2, #1006	; 0x3ee
 801123a:	490e      	ldr	r1, [pc, #56]	; (8011274 <pbuf_copy+0x1a0>)
 801123c:	4809      	ldr	r0, [pc, #36]	; (8011264 <pbuf_copy+0x190>)
 801123e:	f008 fd07 	bl	8019c50 <iprintf>
 8011242:	f06f 0305 	mvn.w	r3, #5
 8011246:	e004      	b.n	8011252 <pbuf_copy+0x17e>
                 (p_to->next == NULL), return ERR_VAL;);
    }
  } while (p_from);
 8011248:	683b      	ldr	r3, [r7, #0]
 801124a:	2b00      	cmp	r3, #0
 801124c:	f47f af61 	bne.w	8011112 <pbuf_copy+0x3e>
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_copy: end of chain reached.\n"));
  return ERR_OK;
 8011250:	2300      	movs	r3, #0
}
 8011252:	4618      	mov	r0, r3
 8011254:	3718      	adds	r7, #24
 8011256:	46bd      	mov	sp, r7
 8011258:	bd80      	pop	{r7, pc}
 801125a:	bf00      	nop
 801125c:	0801cb14 	.word	0x0801cb14
 8011260:	0801cdbc 	.word	0x0801cdbc
 8011264:	0801cb74 	.word	0x0801cb74
 8011268:	0801cdec 	.word	0x0801cdec
 801126c:	0801ce04 	.word	0x0801ce04
 8011270:	0801ce20 	.word	0x0801ce20
 8011274:	0801ce30 	.word	0x0801ce30

08011278 <pbuf_copy_partial>:
 * @param offset offset into the packet buffer from where to begin copying len bytes
 * @return the number of bytes copied, or 0 on failure
 */
u16_t
pbuf_copy_partial(const struct pbuf *buf, void *dataptr, u16_t len, u16_t offset)
{
 8011278:	b580      	push	{r7, lr}
 801127a:	b088      	sub	sp, #32
 801127c:	af00      	add	r7, sp, #0
 801127e:	60f8      	str	r0, [r7, #12]
 8011280:	60b9      	str	r1, [r7, #8]
 8011282:	4611      	mov	r1, r2
 8011284:	461a      	mov	r2, r3
 8011286:	460b      	mov	r3, r1
 8011288:	80fb      	strh	r3, [r7, #6]
 801128a:	4613      	mov	r3, r2
 801128c:	80bb      	strh	r3, [r7, #4]
  const struct pbuf *p;
  u16_t left = 0;
 801128e:	2300      	movs	r3, #0
 8011290:	837b      	strh	r3, [r7, #26]
  u16_t buf_copy_len;
  u16_t copied_total = 0;
 8011292:	2300      	movs	r3, #0
 8011294:	82fb      	strh	r3, [r7, #22]

  LWIP_ERROR("pbuf_copy_partial: invalid buf", (buf != NULL), return 0;);
 8011296:	68fb      	ldr	r3, [r7, #12]
 8011298:	2b00      	cmp	r3, #0
 801129a:	d108      	bne.n	80112ae <pbuf_copy_partial+0x36>
 801129c:	4b2b      	ldr	r3, [pc, #172]	; (801134c <pbuf_copy_partial+0xd4>)
 801129e:	f240 420a 	movw	r2, #1034	; 0x40a
 80112a2:	492b      	ldr	r1, [pc, #172]	; (8011350 <pbuf_copy_partial+0xd8>)
 80112a4:	482b      	ldr	r0, [pc, #172]	; (8011354 <pbuf_copy_partial+0xdc>)
 80112a6:	f008 fcd3 	bl	8019c50 <iprintf>
 80112aa:	2300      	movs	r3, #0
 80112ac:	e04a      	b.n	8011344 <pbuf_copy_partial+0xcc>
  LWIP_ERROR("pbuf_copy_partial: invalid dataptr", (dataptr != NULL), return 0;);
 80112ae:	68bb      	ldr	r3, [r7, #8]
 80112b0:	2b00      	cmp	r3, #0
 80112b2:	d108      	bne.n	80112c6 <pbuf_copy_partial+0x4e>
 80112b4:	4b25      	ldr	r3, [pc, #148]	; (801134c <pbuf_copy_partial+0xd4>)
 80112b6:	f240 420b 	movw	r2, #1035	; 0x40b
 80112ba:	4927      	ldr	r1, [pc, #156]	; (8011358 <pbuf_copy_partial+0xe0>)
 80112bc:	4825      	ldr	r0, [pc, #148]	; (8011354 <pbuf_copy_partial+0xdc>)
 80112be:	f008 fcc7 	bl	8019c50 <iprintf>
 80112c2:	2300      	movs	r3, #0
 80112c4:	e03e      	b.n	8011344 <pbuf_copy_partial+0xcc>

  /* Note some systems use byte copy if dataptr or one of the pbuf payload pointers are unaligned. */
  for (p = buf; len != 0 && p != NULL; p = p->next) {
 80112c6:	68fb      	ldr	r3, [r7, #12]
 80112c8:	61fb      	str	r3, [r7, #28]
 80112ca:	e034      	b.n	8011336 <pbuf_copy_partial+0xbe>
    if ((offset != 0) && (offset >= p->len)) {
 80112cc:	88bb      	ldrh	r3, [r7, #4]
 80112ce:	2b00      	cmp	r3, #0
 80112d0:	d00a      	beq.n	80112e8 <pbuf_copy_partial+0x70>
 80112d2:	69fb      	ldr	r3, [r7, #28]
 80112d4:	895b      	ldrh	r3, [r3, #10]
 80112d6:	88ba      	ldrh	r2, [r7, #4]
 80112d8:	429a      	cmp	r2, r3
 80112da:	d305      	bcc.n	80112e8 <pbuf_copy_partial+0x70>
      /* don't copy from this buffer -> on to the next */
      offset = (u16_t)(offset - p->len);
 80112dc:	69fb      	ldr	r3, [r7, #28]
 80112de:	895b      	ldrh	r3, [r3, #10]
 80112e0:	88ba      	ldrh	r2, [r7, #4]
 80112e2:	1ad3      	subs	r3, r2, r3
 80112e4:	80bb      	strh	r3, [r7, #4]
 80112e6:	e023      	b.n	8011330 <pbuf_copy_partial+0xb8>
    } else {
      /* copy from this buffer. maybe only partially. */
      buf_copy_len = (u16_t)(p->len - offset);
 80112e8:	69fb      	ldr	r3, [r7, #28]
 80112ea:	895a      	ldrh	r2, [r3, #10]
 80112ec:	88bb      	ldrh	r3, [r7, #4]
 80112ee:	1ad3      	subs	r3, r2, r3
 80112f0:	833b      	strh	r3, [r7, #24]
      if (buf_copy_len > len) {
 80112f2:	8b3a      	ldrh	r2, [r7, #24]
 80112f4:	88fb      	ldrh	r3, [r7, #6]
 80112f6:	429a      	cmp	r2, r3
 80112f8:	d901      	bls.n	80112fe <pbuf_copy_partial+0x86>
        buf_copy_len = len;
 80112fa:	88fb      	ldrh	r3, [r7, #6]
 80112fc:	833b      	strh	r3, [r7, #24]
      }
      /* copy the necessary parts of the buffer */
      MEMCPY(&((char *)dataptr)[left], &((char *)p->payload)[offset], buf_copy_len);
 80112fe:	8b7b      	ldrh	r3, [r7, #26]
 8011300:	68ba      	ldr	r2, [r7, #8]
 8011302:	18d0      	adds	r0, r2, r3
 8011304:	69fb      	ldr	r3, [r7, #28]
 8011306:	685a      	ldr	r2, [r3, #4]
 8011308:	88bb      	ldrh	r3, [r7, #4]
 801130a:	4413      	add	r3, r2
 801130c:	8b3a      	ldrh	r2, [r7, #24]
 801130e:	4619      	mov	r1, r3
 8011310:	f008 fe6d 	bl	8019fee <memcpy>
      copied_total = (u16_t)(copied_total + buf_copy_len);
 8011314:	8afa      	ldrh	r2, [r7, #22]
 8011316:	8b3b      	ldrh	r3, [r7, #24]
 8011318:	4413      	add	r3, r2
 801131a:	82fb      	strh	r3, [r7, #22]
      left = (u16_t)(left + buf_copy_len);
 801131c:	8b7a      	ldrh	r2, [r7, #26]
 801131e:	8b3b      	ldrh	r3, [r7, #24]
 8011320:	4413      	add	r3, r2
 8011322:	837b      	strh	r3, [r7, #26]
      len = (u16_t)(len - buf_copy_len);
 8011324:	88fa      	ldrh	r2, [r7, #6]
 8011326:	8b3b      	ldrh	r3, [r7, #24]
 8011328:	1ad3      	subs	r3, r2, r3
 801132a:	80fb      	strh	r3, [r7, #6]
      offset = 0;
 801132c:	2300      	movs	r3, #0
 801132e:	80bb      	strh	r3, [r7, #4]
  for (p = buf; len != 0 && p != NULL; p = p->next) {
 8011330:	69fb      	ldr	r3, [r7, #28]
 8011332:	681b      	ldr	r3, [r3, #0]
 8011334:	61fb      	str	r3, [r7, #28]
 8011336:	88fb      	ldrh	r3, [r7, #6]
 8011338:	2b00      	cmp	r3, #0
 801133a:	d002      	beq.n	8011342 <pbuf_copy_partial+0xca>
 801133c:	69fb      	ldr	r3, [r7, #28]
 801133e:	2b00      	cmp	r3, #0
 8011340:	d1c4      	bne.n	80112cc <pbuf_copy_partial+0x54>
    }
  }
  return copied_total;
 8011342:	8afb      	ldrh	r3, [r7, #22]
}
 8011344:	4618      	mov	r0, r3
 8011346:	3720      	adds	r7, #32
 8011348:	46bd      	mov	sp, r7
 801134a:	bd80      	pop	{r7, pc}
 801134c:	0801cb14 	.word	0x0801cb14
 8011350:	0801ce5c 	.word	0x0801ce5c
 8011354:	0801cb74 	.word	0x0801cb74
 8011358:	0801ce7c 	.word	0x0801ce7c

0801135c <pbuf_clone>:
 *
 * @return a new pbuf or NULL if allocation fails
 */
struct pbuf *
pbuf_clone(pbuf_layer layer, pbuf_type type, struct pbuf *p)
{
 801135c:	b580      	push	{r7, lr}
 801135e:	b084      	sub	sp, #16
 8011360:	af00      	add	r7, sp, #0
 8011362:	4603      	mov	r3, r0
 8011364:	603a      	str	r2, [r7, #0]
 8011366:	71fb      	strb	r3, [r7, #7]
 8011368:	460b      	mov	r3, r1
 801136a:	80bb      	strh	r3, [r7, #4]
  struct pbuf *q;
  err_t err;
  q = pbuf_alloc(layer, p->tot_len, type);
 801136c:	683b      	ldr	r3, [r7, #0]
 801136e:	8919      	ldrh	r1, [r3, #8]
 8011370:	88ba      	ldrh	r2, [r7, #4]
 8011372:	79fb      	ldrb	r3, [r7, #7]
 8011374:	4618      	mov	r0, r3
 8011376:	f7ff fab1 	bl	80108dc <pbuf_alloc>
 801137a:	60f8      	str	r0, [r7, #12]
  if (q == NULL) {
 801137c:	68fb      	ldr	r3, [r7, #12]
 801137e:	2b00      	cmp	r3, #0
 8011380:	d101      	bne.n	8011386 <pbuf_clone+0x2a>
    return NULL;
 8011382:	2300      	movs	r3, #0
 8011384:	e011      	b.n	80113aa <pbuf_clone+0x4e>
  }
  err = pbuf_copy(q, p);
 8011386:	6839      	ldr	r1, [r7, #0]
 8011388:	68f8      	ldr	r0, [r7, #12]
 801138a:	f7ff fea3 	bl	80110d4 <pbuf_copy>
 801138e:	4603      	mov	r3, r0
 8011390:	72fb      	strb	r3, [r7, #11]
  LWIP_UNUSED_ARG(err); /* in case of LWIP_NOASSERT */
  LWIP_ASSERT("pbuf_copy failed", err == ERR_OK);
 8011392:	f997 300b 	ldrsb.w	r3, [r7, #11]
 8011396:	2b00      	cmp	r3, #0
 8011398:	d006      	beq.n	80113a8 <pbuf_clone+0x4c>
 801139a:	4b06      	ldr	r3, [pc, #24]	; (80113b4 <pbuf_clone+0x58>)
 801139c:	f240 5224 	movw	r2, #1316	; 0x524
 80113a0:	4905      	ldr	r1, [pc, #20]	; (80113b8 <pbuf_clone+0x5c>)
 80113a2:	4806      	ldr	r0, [pc, #24]	; (80113bc <pbuf_clone+0x60>)
 80113a4:	f008 fc54 	bl	8019c50 <iprintf>
  return q;
 80113a8:	68fb      	ldr	r3, [r7, #12]
}
 80113aa:	4618      	mov	r0, r3
 80113ac:	3710      	adds	r7, #16
 80113ae:	46bd      	mov	sp, r7
 80113b0:	bd80      	pop	{r7, pc}
 80113b2:	bf00      	nop
 80113b4:	0801cb14 	.word	0x0801cb14
 80113b8:	0801cf88 	.word	0x0801cf88
 80113bc:	0801cb74 	.word	0x0801cb74

080113c0 <tcp_init>:
/**
 * Initialize this module.
 */
void
tcp_init(void)
{
 80113c0:	b580      	push	{r7, lr}
 80113c2:	af00      	add	r7, sp, #0
#ifdef LWIP_RAND
  tcp_port = TCP_ENSURE_LOCAL_PORT_RANGE(LWIP_RAND());
 80113c4:	f007 ff0a 	bl	80191dc <rand>
 80113c8:	4603      	mov	r3, r0
 80113ca:	b29b      	uxth	r3, r3
 80113cc:	f3c3 030d 	ubfx	r3, r3, #0, #14
 80113d0:	b29b      	uxth	r3, r3
 80113d2:	f5a3 4380 	sub.w	r3, r3, #16384	; 0x4000
 80113d6:	b29a      	uxth	r2, r3
 80113d8:	4b01      	ldr	r3, [pc, #4]	; (80113e0 <tcp_init+0x20>)
 80113da:	801a      	strh	r2, [r3, #0]
#endif /* LWIP_RAND */
}
 80113dc:	bf00      	nop
 80113de:	bd80      	pop	{r7, pc}
 80113e0:	20000058 	.word	0x20000058

080113e4 <tcp_free>:

/** Free a tcp pcb */
void
tcp_free(struct tcp_pcb *pcb)
{
 80113e4:	b580      	push	{r7, lr}
 80113e6:	b082      	sub	sp, #8
 80113e8:	af00      	add	r7, sp, #0
 80113ea:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_free: LISTEN", pcb->state != LISTEN);
 80113ec:	687b      	ldr	r3, [r7, #4]
 80113ee:	7d1b      	ldrb	r3, [r3, #20]
 80113f0:	2b01      	cmp	r3, #1
 80113f2:	d105      	bne.n	8011400 <tcp_free+0x1c>
 80113f4:	4b06      	ldr	r3, [pc, #24]	; (8011410 <tcp_free+0x2c>)
 80113f6:	22d4      	movs	r2, #212	; 0xd4
 80113f8:	4906      	ldr	r1, [pc, #24]	; (8011414 <tcp_free+0x30>)
 80113fa:	4807      	ldr	r0, [pc, #28]	; (8011418 <tcp_free+0x34>)
 80113fc:	f008 fc28 	bl	8019c50 <iprintf>
#if LWIP_TCP_PCB_NUM_EXT_ARGS
  tcp_ext_arg_invoke_callbacks_destroyed(pcb->ext_args);
#endif
  memp_free(MEMP_TCP_PCB, pcb);
 8011400:	6879      	ldr	r1, [r7, #4]
 8011402:	2001      	movs	r0, #1
 8011404:	f7fe fef8 	bl	80101f8 <memp_free>
}
 8011408:	bf00      	nop
 801140a:	3708      	adds	r7, #8
 801140c:	46bd      	mov	sp, r7
 801140e:	bd80      	pop	{r7, pc}
 8011410:	0801d014 	.word	0x0801d014
 8011414:	0801d044 	.word	0x0801d044
 8011418:	0801d058 	.word	0x0801d058

0801141c <tcp_free_listen>:

/** Free a tcp listen pcb */
static void
tcp_free_listen(struct tcp_pcb *pcb)
{
 801141c:	b580      	push	{r7, lr}
 801141e:	b082      	sub	sp, #8
 8011420:	af00      	add	r7, sp, #0
 8011422:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_free_listen: !LISTEN", pcb->state != LISTEN);
 8011424:	687b      	ldr	r3, [r7, #4]
 8011426:	7d1b      	ldrb	r3, [r3, #20]
 8011428:	2b01      	cmp	r3, #1
 801142a:	d105      	bne.n	8011438 <tcp_free_listen+0x1c>
 801142c:	4b06      	ldr	r3, [pc, #24]	; (8011448 <tcp_free_listen+0x2c>)
 801142e:	22df      	movs	r2, #223	; 0xdf
 8011430:	4906      	ldr	r1, [pc, #24]	; (801144c <tcp_free_listen+0x30>)
 8011432:	4807      	ldr	r0, [pc, #28]	; (8011450 <tcp_free_listen+0x34>)
 8011434:	f008 fc0c 	bl	8019c50 <iprintf>
#if LWIP_TCP_PCB_NUM_EXT_ARGS
  tcp_ext_arg_invoke_callbacks_destroyed(pcb->ext_args);
#endif
  memp_free(MEMP_TCP_PCB_LISTEN, pcb);
 8011438:	6879      	ldr	r1, [r7, #4]
 801143a:	2002      	movs	r0, #2
 801143c:	f7fe fedc 	bl	80101f8 <memp_free>
}
 8011440:	bf00      	nop
 8011442:	3708      	adds	r7, #8
 8011444:	46bd      	mov	sp, r7
 8011446:	bd80      	pop	{r7, pc}
 8011448:	0801d014 	.word	0x0801d014
 801144c:	0801d080 	.word	0x0801d080
 8011450:	0801d058 	.word	0x0801d058

08011454 <tcp_tmr>:
/**
 * Called periodically to dispatch TCP timers.
 */
void
tcp_tmr(void)
{
 8011454:	b580      	push	{r7, lr}
 8011456:	af00      	add	r7, sp, #0
  /* Call tcp_fasttmr() every 250 ms */
  tcp_fasttmr();
 8011458:	f000 fea4 	bl	80121a4 <tcp_fasttmr>

  if (++tcp_timer & 1) {
 801145c:	4b07      	ldr	r3, [pc, #28]	; (801147c <tcp_tmr+0x28>)
 801145e:	781b      	ldrb	r3, [r3, #0]
 8011460:	3301      	adds	r3, #1
 8011462:	b2da      	uxtb	r2, r3
 8011464:	4b05      	ldr	r3, [pc, #20]	; (801147c <tcp_tmr+0x28>)
 8011466:	701a      	strb	r2, [r3, #0]
 8011468:	4b04      	ldr	r3, [pc, #16]	; (801147c <tcp_tmr+0x28>)
 801146a:	781b      	ldrb	r3, [r3, #0]
 801146c:	f003 0301 	and.w	r3, r3, #1
 8011470:	2b00      	cmp	r3, #0
 8011472:	d001      	beq.n	8011478 <tcp_tmr+0x24>
    /* Call tcp_slowtmr() every 500 ms, i.e., every other timer
       tcp_tmr() is called. */
    tcp_slowtmr();
 8011474:	f000 fb56 	bl	8011b24 <tcp_slowtmr>
  }
}
 8011478:	bf00      	nop
 801147a:	bd80      	pop	{r7, pc}
 801147c:	200070ed 	.word	0x200070ed

08011480 <tcp_remove_listener>:
/** Called when a listen pcb is closed. Iterates one pcb list and removes the
 * closed listener pcb from pcb->listener if matching.
 */
static void
tcp_remove_listener(struct tcp_pcb *list, struct tcp_pcb_listen *lpcb)
{
 8011480:	b580      	push	{r7, lr}
 8011482:	b084      	sub	sp, #16
 8011484:	af00      	add	r7, sp, #0
 8011486:	6078      	str	r0, [r7, #4]
 8011488:	6039      	str	r1, [r7, #0]
  struct tcp_pcb *pcb;

  LWIP_ASSERT("tcp_remove_listener: invalid listener", lpcb != NULL);
 801148a:	683b      	ldr	r3, [r7, #0]
 801148c:	2b00      	cmp	r3, #0
 801148e:	d105      	bne.n	801149c <tcp_remove_listener+0x1c>
 8011490:	4b0d      	ldr	r3, [pc, #52]	; (80114c8 <tcp_remove_listener+0x48>)
 8011492:	22ff      	movs	r2, #255	; 0xff
 8011494:	490d      	ldr	r1, [pc, #52]	; (80114cc <tcp_remove_listener+0x4c>)
 8011496:	480e      	ldr	r0, [pc, #56]	; (80114d0 <tcp_remove_listener+0x50>)
 8011498:	f008 fbda 	bl	8019c50 <iprintf>

  for (pcb = list; pcb != NULL; pcb = pcb->next) {
 801149c:	687b      	ldr	r3, [r7, #4]
 801149e:	60fb      	str	r3, [r7, #12]
 80114a0:	e00a      	b.n	80114b8 <tcp_remove_listener+0x38>
    if (pcb->listener == lpcb) {
 80114a2:	68fb      	ldr	r3, [r7, #12]
 80114a4:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80114a6:	683a      	ldr	r2, [r7, #0]
 80114a8:	429a      	cmp	r2, r3
 80114aa:	d102      	bne.n	80114b2 <tcp_remove_listener+0x32>
      pcb->listener = NULL;
 80114ac:	68fb      	ldr	r3, [r7, #12]
 80114ae:	2200      	movs	r2, #0
 80114b0:	67da      	str	r2, [r3, #124]	; 0x7c
  for (pcb = list; pcb != NULL; pcb = pcb->next) {
 80114b2:	68fb      	ldr	r3, [r7, #12]
 80114b4:	68db      	ldr	r3, [r3, #12]
 80114b6:	60fb      	str	r3, [r7, #12]
 80114b8:	68fb      	ldr	r3, [r7, #12]
 80114ba:	2b00      	cmp	r3, #0
 80114bc:	d1f1      	bne.n	80114a2 <tcp_remove_listener+0x22>
    }
  }
}
 80114be:	bf00      	nop
 80114c0:	bf00      	nop
 80114c2:	3710      	adds	r7, #16
 80114c4:	46bd      	mov	sp, r7
 80114c6:	bd80      	pop	{r7, pc}
 80114c8:	0801d014 	.word	0x0801d014
 80114cc:	0801d09c 	.word	0x0801d09c
 80114d0:	0801d058 	.word	0x0801d058

080114d4 <tcp_listen_closed>:
/** Called when a listen pcb is closed. Iterates all pcb lists and removes the
 * closed listener pcb from pcb->listener if matching.
 */
static void
tcp_listen_closed(struct tcp_pcb *pcb)
{
 80114d4:	b580      	push	{r7, lr}
 80114d6:	b084      	sub	sp, #16
 80114d8:	af00      	add	r7, sp, #0
 80114da:	6078      	str	r0, [r7, #4]
#if LWIP_CALLBACK_API || TCP_LISTEN_BACKLOG
  size_t i;
  LWIP_ASSERT("pcb != NULL", pcb != NULL);
 80114dc:	687b      	ldr	r3, [r7, #4]
 80114de:	2b00      	cmp	r3, #0
 80114e0:	d106      	bne.n	80114f0 <tcp_listen_closed+0x1c>
 80114e2:	4b14      	ldr	r3, [pc, #80]	; (8011534 <tcp_listen_closed+0x60>)
 80114e4:	f240 1211 	movw	r2, #273	; 0x111
 80114e8:	4913      	ldr	r1, [pc, #76]	; (8011538 <tcp_listen_closed+0x64>)
 80114ea:	4814      	ldr	r0, [pc, #80]	; (801153c <tcp_listen_closed+0x68>)
 80114ec:	f008 fbb0 	bl	8019c50 <iprintf>
  LWIP_ASSERT("pcb->state == LISTEN", pcb->state == LISTEN);
 80114f0:	687b      	ldr	r3, [r7, #4]
 80114f2:	7d1b      	ldrb	r3, [r3, #20]
 80114f4:	2b01      	cmp	r3, #1
 80114f6:	d006      	beq.n	8011506 <tcp_listen_closed+0x32>
 80114f8:	4b0e      	ldr	r3, [pc, #56]	; (8011534 <tcp_listen_closed+0x60>)
 80114fa:	f44f 7289 	mov.w	r2, #274	; 0x112
 80114fe:	4910      	ldr	r1, [pc, #64]	; (8011540 <tcp_listen_closed+0x6c>)
 8011500:	480e      	ldr	r0, [pc, #56]	; (801153c <tcp_listen_closed+0x68>)
 8011502:	f008 fba5 	bl	8019c50 <iprintf>
  for (i = 1; i < LWIP_ARRAYSIZE(tcp_pcb_lists); i++) {
 8011506:	2301      	movs	r3, #1
 8011508:	60fb      	str	r3, [r7, #12]
 801150a:	e00b      	b.n	8011524 <tcp_listen_closed+0x50>
    tcp_remove_listener(*tcp_pcb_lists[i], (struct tcp_pcb_listen *)pcb);
 801150c:	4a0d      	ldr	r2, [pc, #52]	; (8011544 <tcp_listen_closed+0x70>)
 801150e:	68fb      	ldr	r3, [r7, #12]
 8011510:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8011514:	681b      	ldr	r3, [r3, #0]
 8011516:	6879      	ldr	r1, [r7, #4]
 8011518:	4618      	mov	r0, r3
 801151a:	f7ff ffb1 	bl	8011480 <tcp_remove_listener>
  for (i = 1; i < LWIP_ARRAYSIZE(tcp_pcb_lists); i++) {
 801151e:	68fb      	ldr	r3, [r7, #12]
 8011520:	3301      	adds	r3, #1
 8011522:	60fb      	str	r3, [r7, #12]
 8011524:	68fb      	ldr	r3, [r7, #12]
 8011526:	2b03      	cmp	r3, #3
 8011528:	d9f0      	bls.n	801150c <tcp_listen_closed+0x38>
  }
#endif
  LWIP_UNUSED_ARG(pcb);
}
 801152a:	bf00      	nop
 801152c:	bf00      	nop
 801152e:	3710      	adds	r7, #16
 8011530:	46bd      	mov	sp, r7
 8011532:	bd80      	pop	{r7, pc}
 8011534:	0801d014 	.word	0x0801d014
 8011538:	0801d0c4 	.word	0x0801d0c4
 801153c:	0801d058 	.word	0x0801d058
 8011540:	0801d0d0 	.word	0x0801d0d0
 8011544:	0801f014 	.word	0x0801f014

08011548 <tcp_close_shutdown>:
 * @return ERR_OK if connection has been closed
 *         another err_t if closing failed and pcb is not freed
 */
static err_t
tcp_close_shutdown(struct tcp_pcb *pcb, u8_t rst_on_unacked_data)
{
 8011548:	b5b0      	push	{r4, r5, r7, lr}
 801154a:	b088      	sub	sp, #32
 801154c:	af04      	add	r7, sp, #16
 801154e:	6078      	str	r0, [r7, #4]
 8011550:	460b      	mov	r3, r1
 8011552:	70fb      	strb	r3, [r7, #3]
  LWIP_ASSERT("tcp_close_shutdown: invalid pcb", pcb != NULL);
 8011554:	687b      	ldr	r3, [r7, #4]
 8011556:	2b00      	cmp	r3, #0
 8011558:	d106      	bne.n	8011568 <tcp_close_shutdown+0x20>
 801155a:	4b63      	ldr	r3, [pc, #396]	; (80116e8 <tcp_close_shutdown+0x1a0>)
 801155c:	f44f 72af 	mov.w	r2, #350	; 0x15e
 8011560:	4962      	ldr	r1, [pc, #392]	; (80116ec <tcp_close_shutdown+0x1a4>)
 8011562:	4863      	ldr	r0, [pc, #396]	; (80116f0 <tcp_close_shutdown+0x1a8>)
 8011564:	f008 fb74 	bl	8019c50 <iprintf>

  if (rst_on_unacked_data && ((pcb->state == ESTABLISHED) || (pcb->state == CLOSE_WAIT))) {
 8011568:	78fb      	ldrb	r3, [r7, #3]
 801156a:	2b00      	cmp	r3, #0
 801156c:	d067      	beq.n	801163e <tcp_close_shutdown+0xf6>
 801156e:	687b      	ldr	r3, [r7, #4]
 8011570:	7d1b      	ldrb	r3, [r3, #20]
 8011572:	2b04      	cmp	r3, #4
 8011574:	d003      	beq.n	801157e <tcp_close_shutdown+0x36>
 8011576:	687b      	ldr	r3, [r7, #4]
 8011578:	7d1b      	ldrb	r3, [r3, #20]
 801157a:	2b07      	cmp	r3, #7
 801157c:	d15f      	bne.n	801163e <tcp_close_shutdown+0xf6>
    if ((pcb->refused_data != NULL) || (pcb->rcv_wnd != TCP_WND_MAX(pcb))) {
 801157e:	687b      	ldr	r3, [r7, #4]
 8011580:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8011582:	2b00      	cmp	r3, #0
 8011584:	d105      	bne.n	8011592 <tcp_close_shutdown+0x4a>
 8011586:	687b      	ldr	r3, [r7, #4]
 8011588:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 801158a:	f241 62d0 	movw	r2, #5840	; 0x16d0
 801158e:	4293      	cmp	r3, r2
 8011590:	d055      	beq.n	801163e <tcp_close_shutdown+0xf6>
      /* Not all data received by application, send RST to tell the remote
         side about this. */
      LWIP_ASSERT("pcb->flags & TF_RXCLOSED", pcb->flags & TF_RXCLOSED);
 8011592:	687b      	ldr	r3, [r7, #4]
 8011594:	8b5b      	ldrh	r3, [r3, #26]
 8011596:	f003 0310 	and.w	r3, r3, #16
 801159a:	2b00      	cmp	r3, #0
 801159c:	d106      	bne.n	80115ac <tcp_close_shutdown+0x64>
 801159e:	4b52      	ldr	r3, [pc, #328]	; (80116e8 <tcp_close_shutdown+0x1a0>)
 80115a0:	f44f 72b2 	mov.w	r2, #356	; 0x164
 80115a4:	4953      	ldr	r1, [pc, #332]	; (80116f4 <tcp_close_shutdown+0x1ac>)
 80115a6:	4852      	ldr	r0, [pc, #328]	; (80116f0 <tcp_close_shutdown+0x1a8>)
 80115a8:	f008 fb52 	bl	8019c50 <iprintf>

      /* don't call tcp_abort here: we must not deallocate the pcb since
         that might not be expected when calling tcp_close */
      tcp_rst(pcb, pcb->snd_nxt, pcb->rcv_nxt, &pcb->local_ip, &pcb->remote_ip,
 80115ac:	687b      	ldr	r3, [r7, #4]
 80115ae:	6d18      	ldr	r0, [r3, #80]	; 0x50
 80115b0:	687b      	ldr	r3, [r7, #4]
 80115b2:	6a5c      	ldr	r4, [r3, #36]	; 0x24
 80115b4:	687d      	ldr	r5, [r7, #4]
 80115b6:	687b      	ldr	r3, [r7, #4]
 80115b8:	3304      	adds	r3, #4
 80115ba:	687a      	ldr	r2, [r7, #4]
 80115bc:	8ad2      	ldrh	r2, [r2, #22]
 80115be:	6879      	ldr	r1, [r7, #4]
 80115c0:	8b09      	ldrh	r1, [r1, #24]
 80115c2:	9102      	str	r1, [sp, #8]
 80115c4:	9201      	str	r2, [sp, #4]
 80115c6:	9300      	str	r3, [sp, #0]
 80115c8:	462b      	mov	r3, r5
 80115ca:	4622      	mov	r2, r4
 80115cc:	4601      	mov	r1, r0
 80115ce:	6878      	ldr	r0, [r7, #4]
 80115d0:	f004 fe94 	bl	80162fc <tcp_rst>
              pcb->local_port, pcb->remote_port);

      tcp_pcb_purge(pcb);
 80115d4:	6878      	ldr	r0, [r7, #4]
 80115d6:	f001 f8c9 	bl	801276c <tcp_pcb_purge>
      TCP_RMV_ACTIVE(pcb);
 80115da:	4b47      	ldr	r3, [pc, #284]	; (80116f8 <tcp_close_shutdown+0x1b0>)
 80115dc:	681b      	ldr	r3, [r3, #0]
 80115de:	687a      	ldr	r2, [r7, #4]
 80115e0:	429a      	cmp	r2, r3
 80115e2:	d105      	bne.n	80115f0 <tcp_close_shutdown+0xa8>
 80115e4:	4b44      	ldr	r3, [pc, #272]	; (80116f8 <tcp_close_shutdown+0x1b0>)
 80115e6:	681b      	ldr	r3, [r3, #0]
 80115e8:	68db      	ldr	r3, [r3, #12]
 80115ea:	4a43      	ldr	r2, [pc, #268]	; (80116f8 <tcp_close_shutdown+0x1b0>)
 80115ec:	6013      	str	r3, [r2, #0]
 80115ee:	e013      	b.n	8011618 <tcp_close_shutdown+0xd0>
 80115f0:	4b41      	ldr	r3, [pc, #260]	; (80116f8 <tcp_close_shutdown+0x1b0>)
 80115f2:	681b      	ldr	r3, [r3, #0]
 80115f4:	60fb      	str	r3, [r7, #12]
 80115f6:	e00c      	b.n	8011612 <tcp_close_shutdown+0xca>
 80115f8:	68fb      	ldr	r3, [r7, #12]
 80115fa:	68db      	ldr	r3, [r3, #12]
 80115fc:	687a      	ldr	r2, [r7, #4]
 80115fe:	429a      	cmp	r2, r3
 8011600:	d104      	bne.n	801160c <tcp_close_shutdown+0xc4>
 8011602:	687b      	ldr	r3, [r7, #4]
 8011604:	68da      	ldr	r2, [r3, #12]
 8011606:	68fb      	ldr	r3, [r7, #12]
 8011608:	60da      	str	r2, [r3, #12]
 801160a:	e005      	b.n	8011618 <tcp_close_shutdown+0xd0>
 801160c:	68fb      	ldr	r3, [r7, #12]
 801160e:	68db      	ldr	r3, [r3, #12]
 8011610:	60fb      	str	r3, [r7, #12]
 8011612:	68fb      	ldr	r3, [r7, #12]
 8011614:	2b00      	cmp	r3, #0
 8011616:	d1ef      	bne.n	80115f8 <tcp_close_shutdown+0xb0>
 8011618:	687b      	ldr	r3, [r7, #4]
 801161a:	2200      	movs	r2, #0
 801161c:	60da      	str	r2, [r3, #12]
 801161e:	4b37      	ldr	r3, [pc, #220]	; (80116fc <tcp_close_shutdown+0x1b4>)
 8011620:	2201      	movs	r2, #1
 8011622:	701a      	strb	r2, [r3, #0]
      /* Deallocate the pcb since we already sent a RST for it */
      if (tcp_input_pcb == pcb) {
 8011624:	4b36      	ldr	r3, [pc, #216]	; (8011700 <tcp_close_shutdown+0x1b8>)
 8011626:	681b      	ldr	r3, [r3, #0]
 8011628:	687a      	ldr	r2, [r7, #4]
 801162a:	429a      	cmp	r2, r3
 801162c:	d102      	bne.n	8011634 <tcp_close_shutdown+0xec>
        /* prevent using a deallocated pcb: free it from tcp_input later */
        tcp_trigger_input_pcb_close();
 801162e:	f003 fd61 	bl	80150f4 <tcp_trigger_input_pcb_close>
 8011632:	e002      	b.n	801163a <tcp_close_shutdown+0xf2>
      } else {
        tcp_free(pcb);
 8011634:	6878      	ldr	r0, [r7, #4]
 8011636:	f7ff fed5 	bl	80113e4 <tcp_free>
      }
      return ERR_OK;
 801163a:	2300      	movs	r3, #0
 801163c:	e050      	b.n	80116e0 <tcp_close_shutdown+0x198>
    }
  }

  /* - states which free the pcb are handled here,
     - states which send FIN and change state are handled in tcp_close_shutdown_fin() */
  switch (pcb->state) {
 801163e:	687b      	ldr	r3, [r7, #4]
 8011640:	7d1b      	ldrb	r3, [r3, #20]
 8011642:	2b02      	cmp	r3, #2
 8011644:	d03b      	beq.n	80116be <tcp_close_shutdown+0x176>
 8011646:	2b02      	cmp	r3, #2
 8011648:	dc44      	bgt.n	80116d4 <tcp_close_shutdown+0x18c>
 801164a:	2b00      	cmp	r3, #0
 801164c:	d002      	beq.n	8011654 <tcp_close_shutdown+0x10c>
 801164e:	2b01      	cmp	r3, #1
 8011650:	d02a      	beq.n	80116a8 <tcp_close_shutdown+0x160>
 8011652:	e03f      	b.n	80116d4 <tcp_close_shutdown+0x18c>
       * and the user needs some way to free it should the need arise.
       * Calling tcp_close() with a pcb that has already been closed, (i.e. twice)
       * or for a pcb that has been used and then entered the CLOSED state
       * is erroneous, but this should never happen as the pcb has in those cases
       * been freed, and so any remaining handles are bogus. */
      if (pcb->local_port != 0) {
 8011654:	687b      	ldr	r3, [r7, #4]
 8011656:	8adb      	ldrh	r3, [r3, #22]
 8011658:	2b00      	cmp	r3, #0
 801165a:	d021      	beq.n	80116a0 <tcp_close_shutdown+0x158>
        TCP_RMV(&tcp_bound_pcbs, pcb);
 801165c:	4b29      	ldr	r3, [pc, #164]	; (8011704 <tcp_close_shutdown+0x1bc>)
 801165e:	681b      	ldr	r3, [r3, #0]
 8011660:	687a      	ldr	r2, [r7, #4]
 8011662:	429a      	cmp	r2, r3
 8011664:	d105      	bne.n	8011672 <tcp_close_shutdown+0x12a>
 8011666:	4b27      	ldr	r3, [pc, #156]	; (8011704 <tcp_close_shutdown+0x1bc>)
 8011668:	681b      	ldr	r3, [r3, #0]
 801166a:	68db      	ldr	r3, [r3, #12]
 801166c:	4a25      	ldr	r2, [pc, #148]	; (8011704 <tcp_close_shutdown+0x1bc>)
 801166e:	6013      	str	r3, [r2, #0]
 8011670:	e013      	b.n	801169a <tcp_close_shutdown+0x152>
 8011672:	4b24      	ldr	r3, [pc, #144]	; (8011704 <tcp_close_shutdown+0x1bc>)
 8011674:	681b      	ldr	r3, [r3, #0]
 8011676:	60bb      	str	r3, [r7, #8]
 8011678:	e00c      	b.n	8011694 <tcp_close_shutdown+0x14c>
 801167a:	68bb      	ldr	r3, [r7, #8]
 801167c:	68db      	ldr	r3, [r3, #12]
 801167e:	687a      	ldr	r2, [r7, #4]
 8011680:	429a      	cmp	r2, r3
 8011682:	d104      	bne.n	801168e <tcp_close_shutdown+0x146>
 8011684:	687b      	ldr	r3, [r7, #4]
 8011686:	68da      	ldr	r2, [r3, #12]
 8011688:	68bb      	ldr	r3, [r7, #8]
 801168a:	60da      	str	r2, [r3, #12]
 801168c:	e005      	b.n	801169a <tcp_close_shutdown+0x152>
 801168e:	68bb      	ldr	r3, [r7, #8]
 8011690:	68db      	ldr	r3, [r3, #12]
 8011692:	60bb      	str	r3, [r7, #8]
 8011694:	68bb      	ldr	r3, [r7, #8]
 8011696:	2b00      	cmp	r3, #0
 8011698:	d1ef      	bne.n	801167a <tcp_close_shutdown+0x132>
 801169a:	687b      	ldr	r3, [r7, #4]
 801169c:	2200      	movs	r2, #0
 801169e:	60da      	str	r2, [r3, #12]
      }
      tcp_free(pcb);
 80116a0:	6878      	ldr	r0, [r7, #4]
 80116a2:	f7ff fe9f 	bl	80113e4 <tcp_free>
      break;
 80116a6:	e01a      	b.n	80116de <tcp_close_shutdown+0x196>
    case LISTEN:
      tcp_listen_closed(pcb);
 80116a8:	6878      	ldr	r0, [r7, #4]
 80116aa:	f7ff ff13 	bl	80114d4 <tcp_listen_closed>
      tcp_pcb_remove(&tcp_listen_pcbs.pcbs, pcb);
 80116ae:	6879      	ldr	r1, [r7, #4]
 80116b0:	4815      	ldr	r0, [pc, #84]	; (8011708 <tcp_close_shutdown+0x1c0>)
 80116b2:	f001 f8ab 	bl	801280c <tcp_pcb_remove>
      tcp_free_listen(pcb);
 80116b6:	6878      	ldr	r0, [r7, #4]
 80116b8:	f7ff feb0 	bl	801141c <tcp_free_listen>
      break;
 80116bc:	e00f      	b.n	80116de <tcp_close_shutdown+0x196>
    case SYN_SENT:
      TCP_PCB_REMOVE_ACTIVE(pcb);
 80116be:	6879      	ldr	r1, [r7, #4]
 80116c0:	480d      	ldr	r0, [pc, #52]	; (80116f8 <tcp_close_shutdown+0x1b0>)
 80116c2:	f001 f8a3 	bl	801280c <tcp_pcb_remove>
 80116c6:	4b0d      	ldr	r3, [pc, #52]	; (80116fc <tcp_close_shutdown+0x1b4>)
 80116c8:	2201      	movs	r2, #1
 80116ca:	701a      	strb	r2, [r3, #0]
      tcp_free(pcb);
 80116cc:	6878      	ldr	r0, [r7, #4]
 80116ce:	f7ff fe89 	bl	80113e4 <tcp_free>
      MIB2_STATS_INC(mib2.tcpattemptfails);
      break;
 80116d2:	e004      	b.n	80116de <tcp_close_shutdown+0x196>
    default:
      return tcp_close_shutdown_fin(pcb);
 80116d4:	6878      	ldr	r0, [r7, #4]
 80116d6:	f000 f819 	bl	801170c <tcp_close_shutdown_fin>
 80116da:	4603      	mov	r3, r0
 80116dc:	e000      	b.n	80116e0 <tcp_close_shutdown+0x198>
  }
  return ERR_OK;
 80116de:	2300      	movs	r3, #0
}
 80116e0:	4618      	mov	r0, r3
 80116e2:	3710      	adds	r7, #16
 80116e4:	46bd      	mov	sp, r7
 80116e6:	bdb0      	pop	{r4, r5, r7, pc}
 80116e8:	0801d014 	.word	0x0801d014
 80116ec:	0801d0e8 	.word	0x0801d0e8
 80116f0:	0801d058 	.word	0x0801d058
 80116f4:	0801d108 	.word	0x0801d108
 80116f8:	200070e4 	.word	0x200070e4
 80116fc:	200070ec 	.word	0x200070ec
 8011700:	20007124 	.word	0x20007124
 8011704:	200070dc 	.word	0x200070dc
 8011708:	200070e0 	.word	0x200070e0

0801170c <tcp_close_shutdown_fin>:

static err_t
tcp_close_shutdown_fin(struct tcp_pcb *pcb)
{
 801170c:	b580      	push	{r7, lr}
 801170e:	b084      	sub	sp, #16
 8011710:	af00      	add	r7, sp, #0
 8011712:	6078      	str	r0, [r7, #4]
  err_t err;
  LWIP_ASSERT("pcb != NULL", pcb != NULL);
 8011714:	687b      	ldr	r3, [r7, #4]
 8011716:	2b00      	cmp	r3, #0
 8011718:	d106      	bne.n	8011728 <tcp_close_shutdown_fin+0x1c>
 801171a:	4b2e      	ldr	r3, [pc, #184]	; (80117d4 <tcp_close_shutdown_fin+0xc8>)
 801171c:	f44f 72ce 	mov.w	r2, #412	; 0x19c
 8011720:	492d      	ldr	r1, [pc, #180]	; (80117d8 <tcp_close_shutdown_fin+0xcc>)
 8011722:	482e      	ldr	r0, [pc, #184]	; (80117dc <tcp_close_shutdown_fin+0xd0>)
 8011724:	f008 fa94 	bl	8019c50 <iprintf>

  switch (pcb->state) {
 8011728:	687b      	ldr	r3, [r7, #4]
 801172a:	7d1b      	ldrb	r3, [r3, #20]
 801172c:	2b07      	cmp	r3, #7
 801172e:	d020      	beq.n	8011772 <tcp_close_shutdown_fin+0x66>
 8011730:	2b07      	cmp	r3, #7
 8011732:	dc2b      	bgt.n	801178c <tcp_close_shutdown_fin+0x80>
 8011734:	2b03      	cmp	r3, #3
 8011736:	d002      	beq.n	801173e <tcp_close_shutdown_fin+0x32>
 8011738:	2b04      	cmp	r3, #4
 801173a:	d00d      	beq.n	8011758 <tcp_close_shutdown_fin+0x4c>
 801173c:	e026      	b.n	801178c <tcp_close_shutdown_fin+0x80>
    case SYN_RCVD:
      err = tcp_send_fin(pcb);
 801173e:	6878      	ldr	r0, [r7, #4]
 8011740:	f003 feea 	bl	8015518 <tcp_send_fin>
 8011744:	4603      	mov	r3, r0
 8011746:	73fb      	strb	r3, [r7, #15]
      if (err == ERR_OK) {
 8011748:	f997 300f 	ldrsb.w	r3, [r7, #15]
 801174c:	2b00      	cmp	r3, #0
 801174e:	d11f      	bne.n	8011790 <tcp_close_shutdown_fin+0x84>
        tcp_backlog_accepted(pcb);
        MIB2_STATS_INC(mib2.tcpattemptfails);
        pcb->state = FIN_WAIT_1;
 8011750:	687b      	ldr	r3, [r7, #4]
 8011752:	2205      	movs	r2, #5
 8011754:	751a      	strb	r2, [r3, #20]
      }
      break;
 8011756:	e01b      	b.n	8011790 <tcp_close_shutdown_fin+0x84>
    case ESTABLISHED:
      err = tcp_send_fin(pcb);
 8011758:	6878      	ldr	r0, [r7, #4]
 801175a:	f003 fedd 	bl	8015518 <tcp_send_fin>
 801175e:	4603      	mov	r3, r0
 8011760:	73fb      	strb	r3, [r7, #15]
      if (err == ERR_OK) {
 8011762:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8011766:	2b00      	cmp	r3, #0
 8011768:	d114      	bne.n	8011794 <tcp_close_shutdown_fin+0x88>
        MIB2_STATS_INC(mib2.tcpestabresets);
        pcb->state = FIN_WAIT_1;
 801176a:	687b      	ldr	r3, [r7, #4]
 801176c:	2205      	movs	r2, #5
 801176e:	751a      	strb	r2, [r3, #20]
      }
      break;
 8011770:	e010      	b.n	8011794 <tcp_close_shutdown_fin+0x88>
    case CLOSE_WAIT:
      err = tcp_send_fin(pcb);
 8011772:	6878      	ldr	r0, [r7, #4]
 8011774:	f003 fed0 	bl	8015518 <tcp_send_fin>
 8011778:	4603      	mov	r3, r0
 801177a:	73fb      	strb	r3, [r7, #15]
      if (err == ERR_OK) {
 801177c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8011780:	2b00      	cmp	r3, #0
 8011782:	d109      	bne.n	8011798 <tcp_close_shutdown_fin+0x8c>
        MIB2_STATS_INC(mib2.tcpestabresets);
        pcb->state = LAST_ACK;
 8011784:	687b      	ldr	r3, [r7, #4]
 8011786:	2209      	movs	r2, #9
 8011788:	751a      	strb	r2, [r3, #20]
      }
      break;
 801178a:	e005      	b.n	8011798 <tcp_close_shutdown_fin+0x8c>
    default:
      /* Has already been closed, do nothing. */
      return ERR_OK;
 801178c:	2300      	movs	r3, #0
 801178e:	e01c      	b.n	80117ca <tcp_close_shutdown_fin+0xbe>
      break;
 8011790:	bf00      	nop
 8011792:	e002      	b.n	801179a <tcp_close_shutdown_fin+0x8e>
      break;
 8011794:	bf00      	nop
 8011796:	e000      	b.n	801179a <tcp_close_shutdown_fin+0x8e>
      break;
 8011798:	bf00      	nop
  }

  if (err == ERR_OK) {
 801179a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 801179e:	2b00      	cmp	r3, #0
 80117a0:	d103      	bne.n	80117aa <tcp_close_shutdown_fin+0x9e>
    /* To ensure all data has been sent when tcp_close returns, we have
       to make sure tcp_output doesn't fail.
       Since we don't really have to ensure all data has been sent when tcp_close
       returns (unsent data is sent from tcp timer functions, also), we don't care
       for the return value of tcp_output for now. */
    tcp_output(pcb);
 80117a2:	6878      	ldr	r0, [r7, #4]
 80117a4:	f003 fff6 	bl	8015794 <tcp_output>
 80117a8:	e00d      	b.n	80117c6 <tcp_close_shutdown_fin+0xba>
  } else if (err == ERR_MEM) {
 80117aa:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80117ae:	f1b3 3fff 	cmp.w	r3, #4294967295
 80117b2:	d108      	bne.n	80117c6 <tcp_close_shutdown_fin+0xba>
    /* Mark this pcb for closing. Closing is retried from tcp_tmr. */
    tcp_set_flags(pcb, TF_CLOSEPEND);
 80117b4:	687b      	ldr	r3, [r7, #4]
 80117b6:	8b5b      	ldrh	r3, [r3, #26]
 80117b8:	f043 0308 	orr.w	r3, r3, #8
 80117bc:	b29a      	uxth	r2, r3
 80117be:	687b      	ldr	r3, [r7, #4]
 80117c0:	835a      	strh	r2, [r3, #26]
    /* We have to return ERR_OK from here to indicate to the callers that this
       pcb should not be used any more as it will be freed soon via tcp_tmr.
       This is OK here since sending FIN does not guarantee a time frime for
       actually freeing the pcb, either (it is left in closure states for
       remote ACK or timeout) */
    return ERR_OK;
 80117c2:	2300      	movs	r3, #0
 80117c4:	e001      	b.n	80117ca <tcp_close_shutdown_fin+0xbe>
  }
  return err;
 80117c6:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 80117ca:	4618      	mov	r0, r3
 80117cc:	3710      	adds	r7, #16
 80117ce:	46bd      	mov	sp, r7
 80117d0:	bd80      	pop	{r7, pc}
 80117d2:	bf00      	nop
 80117d4:	0801d014 	.word	0x0801d014
 80117d8:	0801d0c4 	.word	0x0801d0c4
 80117dc:	0801d058 	.word	0x0801d058

080117e0 <tcp_close>:
 * @return ERR_OK if connection has been closed
 *         another err_t if closing failed and pcb is not freed
 */
err_t
tcp_close(struct tcp_pcb *pcb)
{
 80117e0:	b580      	push	{r7, lr}
 80117e2:	b082      	sub	sp, #8
 80117e4:	af00      	add	r7, sp, #0
 80117e6:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("tcp_close: invalid pcb", pcb != NULL, return ERR_ARG);
 80117e8:	687b      	ldr	r3, [r7, #4]
 80117ea:	2b00      	cmp	r3, #0
 80117ec:	d109      	bne.n	8011802 <tcp_close+0x22>
 80117ee:	4b0f      	ldr	r3, [pc, #60]	; (801182c <tcp_close+0x4c>)
 80117f0:	f44f 72f4 	mov.w	r2, #488	; 0x1e8
 80117f4:	490e      	ldr	r1, [pc, #56]	; (8011830 <tcp_close+0x50>)
 80117f6:	480f      	ldr	r0, [pc, #60]	; (8011834 <tcp_close+0x54>)
 80117f8:	f008 fa2a 	bl	8019c50 <iprintf>
 80117fc:	f06f 030f 	mvn.w	r3, #15
 8011800:	e00f      	b.n	8011822 <tcp_close+0x42>
  LWIP_DEBUGF(TCP_DEBUG, ("tcp_close: closing in "));

  tcp_debug_print_state(pcb->state);

  if (pcb->state != LISTEN) {
 8011802:	687b      	ldr	r3, [r7, #4]
 8011804:	7d1b      	ldrb	r3, [r3, #20]
 8011806:	2b01      	cmp	r3, #1
 8011808:	d006      	beq.n	8011818 <tcp_close+0x38>
    /* Set a flag not to receive any more data... */
    tcp_set_flags(pcb, TF_RXCLOSED);
 801180a:	687b      	ldr	r3, [r7, #4]
 801180c:	8b5b      	ldrh	r3, [r3, #26]
 801180e:	f043 0310 	orr.w	r3, r3, #16
 8011812:	b29a      	uxth	r2, r3
 8011814:	687b      	ldr	r3, [r7, #4]
 8011816:	835a      	strh	r2, [r3, #26]
  }
  /* ... and close */
  return tcp_close_shutdown(pcb, 1);
 8011818:	2101      	movs	r1, #1
 801181a:	6878      	ldr	r0, [r7, #4]
 801181c:	f7ff fe94 	bl	8011548 <tcp_close_shutdown>
 8011820:	4603      	mov	r3, r0
}
 8011822:	4618      	mov	r0, r3
 8011824:	3708      	adds	r7, #8
 8011826:	46bd      	mov	sp, r7
 8011828:	bd80      	pop	{r7, pc}
 801182a:	bf00      	nop
 801182c:	0801d014 	.word	0x0801d014
 8011830:	0801d124 	.word	0x0801d124
 8011834:	0801d058 	.word	0x0801d058

08011838 <tcp_abandon>:
 * @param pcb the tcp_pcb to abort
 * @param reset boolean to indicate whether a reset should be sent
 */
void
tcp_abandon(struct tcp_pcb *pcb, int reset)
{
 8011838:	b580      	push	{r7, lr}
 801183a:	b08e      	sub	sp, #56	; 0x38
 801183c:	af04      	add	r7, sp, #16
 801183e:	6078      	str	r0, [r7, #4]
 8011840:	6039      	str	r1, [r7, #0]
#endif /* LWIP_CALLBACK_API */
  void *errf_arg;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("tcp_abandon: invalid pcb", pcb != NULL, return);
 8011842:	687b      	ldr	r3, [r7, #4]
 8011844:	2b00      	cmp	r3, #0
 8011846:	d107      	bne.n	8011858 <tcp_abandon+0x20>
 8011848:	4b52      	ldr	r3, [pc, #328]	; (8011994 <tcp_abandon+0x15c>)
 801184a:	f240 223d 	movw	r2, #573	; 0x23d
 801184e:	4952      	ldr	r1, [pc, #328]	; (8011998 <tcp_abandon+0x160>)
 8011850:	4852      	ldr	r0, [pc, #328]	; (801199c <tcp_abandon+0x164>)
 8011852:	f008 f9fd 	bl	8019c50 <iprintf>
 8011856:	e099      	b.n	801198c <tcp_abandon+0x154>

  /* pcb->state LISTEN not allowed here */
  LWIP_ASSERT("don't call tcp_abort/tcp_abandon for listen-pcbs",
 8011858:	687b      	ldr	r3, [r7, #4]
 801185a:	7d1b      	ldrb	r3, [r3, #20]
 801185c:	2b01      	cmp	r3, #1
 801185e:	d106      	bne.n	801186e <tcp_abandon+0x36>
 8011860:	4b4c      	ldr	r3, [pc, #304]	; (8011994 <tcp_abandon+0x15c>)
 8011862:	f44f 7210 	mov.w	r2, #576	; 0x240
 8011866:	494e      	ldr	r1, [pc, #312]	; (80119a0 <tcp_abandon+0x168>)
 8011868:	484c      	ldr	r0, [pc, #304]	; (801199c <tcp_abandon+0x164>)
 801186a:	f008 f9f1 	bl	8019c50 <iprintf>
              pcb->state != LISTEN);
  /* Figure out on which TCP PCB list we are, and remove us. If we
     are in an active state, call the receive function associated with
     the PCB with a NULL argument, and send an RST to the remote end. */
  if (pcb->state == TIME_WAIT) {
 801186e:	687b      	ldr	r3, [r7, #4]
 8011870:	7d1b      	ldrb	r3, [r3, #20]
 8011872:	2b0a      	cmp	r3, #10
 8011874:	d107      	bne.n	8011886 <tcp_abandon+0x4e>
    tcp_pcb_remove(&tcp_tw_pcbs, pcb);
 8011876:	6879      	ldr	r1, [r7, #4]
 8011878:	484a      	ldr	r0, [pc, #296]	; (80119a4 <tcp_abandon+0x16c>)
 801187a:	f000 ffc7 	bl	801280c <tcp_pcb_remove>
    tcp_free(pcb);
 801187e:	6878      	ldr	r0, [r7, #4]
 8011880:	f7ff fdb0 	bl	80113e4 <tcp_free>
 8011884:	e082      	b.n	801198c <tcp_abandon+0x154>
  } else {
    int send_rst = 0;
 8011886:	2300      	movs	r3, #0
 8011888:	627b      	str	r3, [r7, #36]	; 0x24
    u16_t local_port = 0;
 801188a:	2300      	movs	r3, #0
 801188c:	847b      	strh	r3, [r7, #34]	; 0x22
    enum tcp_state last_state;
    seqno = pcb->snd_nxt;
 801188e:	687b      	ldr	r3, [r7, #4]
 8011890:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8011892:	61bb      	str	r3, [r7, #24]
    ackno = pcb->rcv_nxt;
 8011894:	687b      	ldr	r3, [r7, #4]
 8011896:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8011898:	617b      	str	r3, [r7, #20]
#if LWIP_CALLBACK_API
    errf = pcb->errf;
 801189a:	687b      	ldr	r3, [r7, #4]
 801189c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80118a0:	613b      	str	r3, [r7, #16]
#endif /* LWIP_CALLBACK_API */
    errf_arg = pcb->callback_arg;
 80118a2:	687b      	ldr	r3, [r7, #4]
 80118a4:	691b      	ldr	r3, [r3, #16]
 80118a6:	60fb      	str	r3, [r7, #12]
    if (pcb->state == CLOSED) {
 80118a8:	687b      	ldr	r3, [r7, #4]
 80118aa:	7d1b      	ldrb	r3, [r3, #20]
 80118ac:	2b00      	cmp	r3, #0
 80118ae:	d126      	bne.n	80118fe <tcp_abandon+0xc6>
      if (pcb->local_port != 0) {
 80118b0:	687b      	ldr	r3, [r7, #4]
 80118b2:	8adb      	ldrh	r3, [r3, #22]
 80118b4:	2b00      	cmp	r3, #0
 80118b6:	d02e      	beq.n	8011916 <tcp_abandon+0xde>
        /* bound, not yet opened */
        TCP_RMV(&tcp_bound_pcbs, pcb);
 80118b8:	4b3b      	ldr	r3, [pc, #236]	; (80119a8 <tcp_abandon+0x170>)
 80118ba:	681b      	ldr	r3, [r3, #0]
 80118bc:	687a      	ldr	r2, [r7, #4]
 80118be:	429a      	cmp	r2, r3
 80118c0:	d105      	bne.n	80118ce <tcp_abandon+0x96>
 80118c2:	4b39      	ldr	r3, [pc, #228]	; (80119a8 <tcp_abandon+0x170>)
 80118c4:	681b      	ldr	r3, [r3, #0]
 80118c6:	68db      	ldr	r3, [r3, #12]
 80118c8:	4a37      	ldr	r2, [pc, #220]	; (80119a8 <tcp_abandon+0x170>)
 80118ca:	6013      	str	r3, [r2, #0]
 80118cc:	e013      	b.n	80118f6 <tcp_abandon+0xbe>
 80118ce:	4b36      	ldr	r3, [pc, #216]	; (80119a8 <tcp_abandon+0x170>)
 80118d0:	681b      	ldr	r3, [r3, #0]
 80118d2:	61fb      	str	r3, [r7, #28]
 80118d4:	e00c      	b.n	80118f0 <tcp_abandon+0xb8>
 80118d6:	69fb      	ldr	r3, [r7, #28]
 80118d8:	68db      	ldr	r3, [r3, #12]
 80118da:	687a      	ldr	r2, [r7, #4]
 80118dc:	429a      	cmp	r2, r3
 80118de:	d104      	bne.n	80118ea <tcp_abandon+0xb2>
 80118e0:	687b      	ldr	r3, [r7, #4]
 80118e2:	68da      	ldr	r2, [r3, #12]
 80118e4:	69fb      	ldr	r3, [r7, #28]
 80118e6:	60da      	str	r2, [r3, #12]
 80118e8:	e005      	b.n	80118f6 <tcp_abandon+0xbe>
 80118ea:	69fb      	ldr	r3, [r7, #28]
 80118ec:	68db      	ldr	r3, [r3, #12]
 80118ee:	61fb      	str	r3, [r7, #28]
 80118f0:	69fb      	ldr	r3, [r7, #28]
 80118f2:	2b00      	cmp	r3, #0
 80118f4:	d1ef      	bne.n	80118d6 <tcp_abandon+0x9e>
 80118f6:	687b      	ldr	r3, [r7, #4]
 80118f8:	2200      	movs	r2, #0
 80118fa:	60da      	str	r2, [r3, #12]
 80118fc:	e00b      	b.n	8011916 <tcp_abandon+0xde>
      }
    } else {
      send_rst = reset;
 80118fe:	683b      	ldr	r3, [r7, #0]
 8011900:	627b      	str	r3, [r7, #36]	; 0x24
      local_port = pcb->local_port;
 8011902:	687b      	ldr	r3, [r7, #4]
 8011904:	8adb      	ldrh	r3, [r3, #22]
 8011906:	847b      	strh	r3, [r7, #34]	; 0x22
      TCP_PCB_REMOVE_ACTIVE(pcb);
 8011908:	6879      	ldr	r1, [r7, #4]
 801190a:	4828      	ldr	r0, [pc, #160]	; (80119ac <tcp_abandon+0x174>)
 801190c:	f000 ff7e 	bl	801280c <tcp_pcb_remove>
 8011910:	4b27      	ldr	r3, [pc, #156]	; (80119b0 <tcp_abandon+0x178>)
 8011912:	2201      	movs	r2, #1
 8011914:	701a      	strb	r2, [r3, #0]
    }
    if (pcb->unacked != NULL) {
 8011916:	687b      	ldr	r3, [r7, #4]
 8011918:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 801191a:	2b00      	cmp	r3, #0
 801191c:	d004      	beq.n	8011928 <tcp_abandon+0xf0>
      tcp_segs_free(pcb->unacked);
 801191e:	687b      	ldr	r3, [r7, #4]
 8011920:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8011922:	4618      	mov	r0, r3
 8011924:	f000 fd20 	bl	8012368 <tcp_segs_free>
    }
    if (pcb->unsent != NULL) {
 8011928:	687b      	ldr	r3, [r7, #4]
 801192a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 801192c:	2b00      	cmp	r3, #0
 801192e:	d004      	beq.n	801193a <tcp_abandon+0x102>
      tcp_segs_free(pcb->unsent);
 8011930:	687b      	ldr	r3, [r7, #4]
 8011932:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8011934:	4618      	mov	r0, r3
 8011936:	f000 fd17 	bl	8012368 <tcp_segs_free>
    }
#if TCP_QUEUE_OOSEQ
    if (pcb->ooseq != NULL) {
 801193a:	687b      	ldr	r3, [r7, #4]
 801193c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 801193e:	2b00      	cmp	r3, #0
 8011940:	d004      	beq.n	801194c <tcp_abandon+0x114>
      tcp_segs_free(pcb->ooseq);
 8011942:	687b      	ldr	r3, [r7, #4]
 8011944:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8011946:	4618      	mov	r0, r3
 8011948:	f000 fd0e 	bl	8012368 <tcp_segs_free>
    }
#endif /* TCP_QUEUE_OOSEQ */
    tcp_backlog_accepted(pcb);
    if (send_rst) {
 801194c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801194e:	2b00      	cmp	r3, #0
 8011950:	d00e      	beq.n	8011970 <tcp_abandon+0x138>
      LWIP_DEBUGF(TCP_RST_DEBUG, ("tcp_abandon: sending RST\n"));
      tcp_rst(pcb, seqno, ackno, &pcb->local_ip, &pcb->remote_ip, local_port, pcb->remote_port);
 8011952:	6879      	ldr	r1, [r7, #4]
 8011954:	687b      	ldr	r3, [r7, #4]
 8011956:	3304      	adds	r3, #4
 8011958:	687a      	ldr	r2, [r7, #4]
 801195a:	8b12      	ldrh	r2, [r2, #24]
 801195c:	9202      	str	r2, [sp, #8]
 801195e:	8c7a      	ldrh	r2, [r7, #34]	; 0x22
 8011960:	9201      	str	r2, [sp, #4]
 8011962:	9300      	str	r3, [sp, #0]
 8011964:	460b      	mov	r3, r1
 8011966:	697a      	ldr	r2, [r7, #20]
 8011968:	69b9      	ldr	r1, [r7, #24]
 801196a:	6878      	ldr	r0, [r7, #4]
 801196c:	f004 fcc6 	bl	80162fc <tcp_rst>
    }
    last_state = pcb->state;
 8011970:	687b      	ldr	r3, [r7, #4]
 8011972:	7d1b      	ldrb	r3, [r3, #20]
 8011974:	72fb      	strb	r3, [r7, #11]
    tcp_free(pcb);
 8011976:	6878      	ldr	r0, [r7, #4]
 8011978:	f7ff fd34 	bl	80113e4 <tcp_free>
    TCP_EVENT_ERR(last_state, errf, errf_arg, ERR_ABRT);
 801197c:	693b      	ldr	r3, [r7, #16]
 801197e:	2b00      	cmp	r3, #0
 8011980:	d004      	beq.n	801198c <tcp_abandon+0x154>
 8011982:	693b      	ldr	r3, [r7, #16]
 8011984:	f06f 010c 	mvn.w	r1, #12
 8011988:	68f8      	ldr	r0, [r7, #12]
 801198a:	4798      	blx	r3
  }
}
 801198c:	3728      	adds	r7, #40	; 0x28
 801198e:	46bd      	mov	sp, r7
 8011990:	bd80      	pop	{r7, pc}
 8011992:	bf00      	nop
 8011994:	0801d014 	.word	0x0801d014
 8011998:	0801d158 	.word	0x0801d158
 801199c:	0801d058 	.word	0x0801d058
 80119a0:	0801d174 	.word	0x0801d174
 80119a4:	200070e8 	.word	0x200070e8
 80119a8:	200070dc 	.word	0x200070dc
 80119ac:	200070e4 	.word	0x200070e4
 80119b0:	200070ec 	.word	0x200070ec

080119b4 <tcp_abort>:
 *
 * @param pcb the tcp pcb to abort
 */
void
tcp_abort(struct tcp_pcb *pcb)
{
 80119b4:	b580      	push	{r7, lr}
 80119b6:	b082      	sub	sp, #8
 80119b8:	af00      	add	r7, sp, #0
 80119ba:	6078      	str	r0, [r7, #4]
  tcp_abandon(pcb, 1);
 80119bc:	2101      	movs	r1, #1
 80119be:	6878      	ldr	r0, [r7, #4]
 80119c0:	f7ff ff3a 	bl	8011838 <tcp_abandon>
}
 80119c4:	bf00      	nop
 80119c6:	3708      	adds	r7, #8
 80119c8:	46bd      	mov	sp, r7
 80119ca:	bd80      	pop	{r7, pc}

080119cc <tcp_update_rcv_ann_wnd>:
 * Returns how much extra window would be advertised if we sent an
 * update now.
 */
u32_t
tcp_update_rcv_ann_wnd(struct tcp_pcb *pcb)
{
 80119cc:	b580      	push	{r7, lr}
 80119ce:	b084      	sub	sp, #16
 80119d0:	af00      	add	r7, sp, #0
 80119d2:	6078      	str	r0, [r7, #4]
  u32_t new_right_edge;

  LWIP_ASSERT("tcp_update_rcv_ann_wnd: invalid pcb", pcb != NULL);
 80119d4:	687b      	ldr	r3, [r7, #4]
 80119d6:	2b00      	cmp	r3, #0
 80119d8:	d106      	bne.n	80119e8 <tcp_update_rcv_ann_wnd+0x1c>
 80119da:	4b25      	ldr	r3, [pc, #148]	; (8011a70 <tcp_update_rcv_ann_wnd+0xa4>)
 80119dc:	f240 32a6 	movw	r2, #934	; 0x3a6
 80119e0:	4924      	ldr	r1, [pc, #144]	; (8011a74 <tcp_update_rcv_ann_wnd+0xa8>)
 80119e2:	4825      	ldr	r0, [pc, #148]	; (8011a78 <tcp_update_rcv_ann_wnd+0xac>)
 80119e4:	f008 f934 	bl	8019c50 <iprintf>
  new_right_edge = pcb->rcv_nxt + pcb->rcv_wnd;
 80119e8:	687b      	ldr	r3, [r7, #4]
 80119ea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80119ec:	687a      	ldr	r2, [r7, #4]
 80119ee:	8d12      	ldrh	r2, [r2, #40]	; 0x28
 80119f0:	4413      	add	r3, r2
 80119f2:	60fb      	str	r3, [r7, #12]

  if (TCP_SEQ_GEQ(new_right_edge, pcb->rcv_ann_right_edge + LWIP_MIN((TCP_WND / 2), pcb->mss))) {
 80119f4:	687b      	ldr	r3, [r7, #4]
 80119f6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80119f8:	687a      	ldr	r2, [r7, #4]
 80119fa:	8e52      	ldrh	r2, [r2, #50]	; 0x32
 80119fc:	f640 3168 	movw	r1, #2920	; 0xb68
 8011a00:	428a      	cmp	r2, r1
 8011a02:	bf28      	it	cs
 8011a04:	460a      	movcs	r2, r1
 8011a06:	b292      	uxth	r2, r2
 8011a08:	4413      	add	r3, r2
 8011a0a:	68fa      	ldr	r2, [r7, #12]
 8011a0c:	1ad3      	subs	r3, r2, r3
 8011a0e:	2b00      	cmp	r3, #0
 8011a10:	db08      	blt.n	8011a24 <tcp_update_rcv_ann_wnd+0x58>
    /* we can advertise more window */
    pcb->rcv_ann_wnd = pcb->rcv_wnd;
 8011a12:	687b      	ldr	r3, [r7, #4]
 8011a14:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 8011a16:	687b      	ldr	r3, [r7, #4]
 8011a18:	855a      	strh	r2, [r3, #42]	; 0x2a
    return new_right_edge - pcb->rcv_ann_right_edge;
 8011a1a:	687b      	ldr	r3, [r7, #4]
 8011a1c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8011a1e:	68fa      	ldr	r2, [r7, #12]
 8011a20:	1ad3      	subs	r3, r2, r3
 8011a22:	e020      	b.n	8011a66 <tcp_update_rcv_ann_wnd+0x9a>
  } else {
    if (TCP_SEQ_GT(pcb->rcv_nxt, pcb->rcv_ann_right_edge)) {
 8011a24:	687b      	ldr	r3, [r7, #4]
 8011a26:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8011a28:	687b      	ldr	r3, [r7, #4]
 8011a2a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8011a2c:	1ad3      	subs	r3, r2, r3
 8011a2e:	2b00      	cmp	r3, #0
 8011a30:	dd03      	ble.n	8011a3a <tcp_update_rcv_ann_wnd+0x6e>
      /* Can happen due to other end sending out of advertised window,
       * but within actual available (but not yet advertised) window */
      pcb->rcv_ann_wnd = 0;
 8011a32:	687b      	ldr	r3, [r7, #4]
 8011a34:	2200      	movs	r2, #0
 8011a36:	855a      	strh	r2, [r3, #42]	; 0x2a
 8011a38:	e014      	b.n	8011a64 <tcp_update_rcv_ann_wnd+0x98>
    } else {
      /* keep the right edge of window constant */
      u32_t new_rcv_ann_wnd = pcb->rcv_ann_right_edge - pcb->rcv_nxt;
 8011a3a:	687b      	ldr	r3, [r7, #4]
 8011a3c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8011a3e:	687b      	ldr	r3, [r7, #4]
 8011a40:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8011a42:	1ad3      	subs	r3, r2, r3
 8011a44:	60bb      	str	r3, [r7, #8]
#if !LWIP_WND_SCALE
      LWIP_ASSERT("new_rcv_ann_wnd <= 0xffff", new_rcv_ann_wnd <= 0xffff);
 8011a46:	68bb      	ldr	r3, [r7, #8]
 8011a48:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8011a4c:	d306      	bcc.n	8011a5c <tcp_update_rcv_ann_wnd+0x90>
 8011a4e:	4b08      	ldr	r3, [pc, #32]	; (8011a70 <tcp_update_rcv_ann_wnd+0xa4>)
 8011a50:	f240 32b6 	movw	r2, #950	; 0x3b6
 8011a54:	4909      	ldr	r1, [pc, #36]	; (8011a7c <tcp_update_rcv_ann_wnd+0xb0>)
 8011a56:	4808      	ldr	r0, [pc, #32]	; (8011a78 <tcp_update_rcv_ann_wnd+0xac>)
 8011a58:	f008 f8fa 	bl	8019c50 <iprintf>
#endif
      pcb->rcv_ann_wnd = (tcpwnd_size_t)new_rcv_ann_wnd;
 8011a5c:	68bb      	ldr	r3, [r7, #8]
 8011a5e:	b29a      	uxth	r2, r3
 8011a60:	687b      	ldr	r3, [r7, #4]
 8011a62:	855a      	strh	r2, [r3, #42]	; 0x2a
    }
    return 0;
 8011a64:	2300      	movs	r3, #0
  }
}
 8011a66:	4618      	mov	r0, r3
 8011a68:	3710      	adds	r7, #16
 8011a6a:	46bd      	mov	sp, r7
 8011a6c:	bd80      	pop	{r7, pc}
 8011a6e:	bf00      	nop
 8011a70:	0801d014 	.word	0x0801d014
 8011a74:	0801d270 	.word	0x0801d270
 8011a78:	0801d058 	.word	0x0801d058
 8011a7c:	0801d294 	.word	0x0801d294

08011a80 <tcp_recved>:
 * @param pcb the tcp_pcb for which data is read
 * @param len the amount of bytes that have been read by the application
 */
void
tcp_recved(struct tcp_pcb *pcb, u16_t len)
{
 8011a80:	b580      	push	{r7, lr}
 8011a82:	b084      	sub	sp, #16
 8011a84:	af00      	add	r7, sp, #0
 8011a86:	6078      	str	r0, [r7, #4]
 8011a88:	460b      	mov	r3, r1
 8011a8a:	807b      	strh	r3, [r7, #2]
  u32_t wnd_inflation;
  tcpwnd_size_t rcv_wnd;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("tcp_recved: invalid pcb", pcb != NULL, return);
 8011a8c:	687b      	ldr	r3, [r7, #4]
 8011a8e:	2b00      	cmp	r3, #0
 8011a90:	d107      	bne.n	8011aa2 <tcp_recved+0x22>
 8011a92:	4b20      	ldr	r3, [pc, #128]	; (8011b14 <tcp_recved+0x94>)
 8011a94:	f240 32cf 	movw	r2, #975	; 0x3cf
 8011a98:	491f      	ldr	r1, [pc, #124]	; (8011b18 <tcp_recved+0x98>)
 8011a9a:	4820      	ldr	r0, [pc, #128]	; (8011b1c <tcp_recved+0x9c>)
 8011a9c:	f008 f8d8 	bl	8019c50 <iprintf>
 8011aa0:	e034      	b.n	8011b0c <tcp_recved+0x8c>

  /* pcb->state LISTEN not allowed here */
  LWIP_ASSERT("don't call tcp_recved for listen-pcbs",
 8011aa2:	687b      	ldr	r3, [r7, #4]
 8011aa4:	7d1b      	ldrb	r3, [r3, #20]
 8011aa6:	2b01      	cmp	r3, #1
 8011aa8:	d106      	bne.n	8011ab8 <tcp_recved+0x38>
 8011aaa:	4b1a      	ldr	r3, [pc, #104]	; (8011b14 <tcp_recved+0x94>)
 8011aac:	f240 32d2 	movw	r2, #978	; 0x3d2
 8011ab0:	491b      	ldr	r1, [pc, #108]	; (8011b20 <tcp_recved+0xa0>)
 8011ab2:	481a      	ldr	r0, [pc, #104]	; (8011b1c <tcp_recved+0x9c>)
 8011ab4:	f008 f8cc 	bl	8019c50 <iprintf>
              pcb->state != LISTEN);

  rcv_wnd = (tcpwnd_size_t)(pcb->rcv_wnd + len);
 8011ab8:	687b      	ldr	r3, [r7, #4]
 8011aba:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 8011abc:	887b      	ldrh	r3, [r7, #2]
 8011abe:	4413      	add	r3, r2
 8011ac0:	81fb      	strh	r3, [r7, #14]
  if ((rcv_wnd > TCP_WND_MAX(pcb)) || (rcv_wnd < pcb->rcv_wnd)) {
 8011ac2:	89fb      	ldrh	r3, [r7, #14]
 8011ac4:	f241 62d0 	movw	r2, #5840	; 0x16d0
 8011ac8:	4293      	cmp	r3, r2
 8011aca:	d804      	bhi.n	8011ad6 <tcp_recved+0x56>
 8011acc:	687b      	ldr	r3, [r7, #4]
 8011ace:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8011ad0:	89fa      	ldrh	r2, [r7, #14]
 8011ad2:	429a      	cmp	r2, r3
 8011ad4:	d204      	bcs.n	8011ae0 <tcp_recved+0x60>
    /* window got too big or tcpwnd_size_t overflow */
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_recved: window got too big or tcpwnd_size_t overflow\n"));
    pcb->rcv_wnd = TCP_WND_MAX(pcb);
 8011ad6:	687b      	ldr	r3, [r7, #4]
 8011ad8:	f241 62d0 	movw	r2, #5840	; 0x16d0
 8011adc:	851a      	strh	r2, [r3, #40]	; 0x28
 8011ade:	e002      	b.n	8011ae6 <tcp_recved+0x66>
  } else  {
    pcb->rcv_wnd = rcv_wnd;
 8011ae0:	687b      	ldr	r3, [r7, #4]
 8011ae2:	89fa      	ldrh	r2, [r7, #14]
 8011ae4:	851a      	strh	r2, [r3, #40]	; 0x28
  }

  wnd_inflation = tcp_update_rcv_ann_wnd(pcb);
 8011ae6:	6878      	ldr	r0, [r7, #4]
 8011ae8:	f7ff ff70 	bl	80119cc <tcp_update_rcv_ann_wnd>
 8011aec:	60b8      	str	r0, [r7, #8]

  /* If the change in the right edge of window is significant (default
   * watermark is TCP_WND/4), then send an explicit update now.
   * Otherwise wait for a packet to be sent in the normal course of
   * events (or more window to be available later) */
  if (wnd_inflation >= TCP_WND_UPDATE_THRESHOLD) {
 8011aee:	68bb      	ldr	r3, [r7, #8]
 8011af0:	f240 52b3 	movw	r2, #1459	; 0x5b3
 8011af4:	4293      	cmp	r3, r2
 8011af6:	d909      	bls.n	8011b0c <tcp_recved+0x8c>
    tcp_ack_now(pcb);
 8011af8:	687b      	ldr	r3, [r7, #4]
 8011afa:	8b5b      	ldrh	r3, [r3, #26]
 8011afc:	f043 0302 	orr.w	r3, r3, #2
 8011b00:	b29a      	uxth	r2, r3
 8011b02:	687b      	ldr	r3, [r7, #4]
 8011b04:	835a      	strh	r2, [r3, #26]
    tcp_output(pcb);
 8011b06:	6878      	ldr	r0, [r7, #4]
 8011b08:	f003 fe44 	bl	8015794 <tcp_output>
  }

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_recved: received %"U16_F" bytes, wnd %"TCPWNDSIZE_F" (%"TCPWNDSIZE_F").\n",
                          len, pcb->rcv_wnd, (u16_t)(TCP_WND_MAX(pcb) - pcb->rcv_wnd)));
}
 8011b0c:	3710      	adds	r7, #16
 8011b0e:	46bd      	mov	sp, r7
 8011b10:	bd80      	pop	{r7, pc}
 8011b12:	bf00      	nop
 8011b14:	0801d014 	.word	0x0801d014
 8011b18:	0801d2b0 	.word	0x0801d2b0
 8011b1c:	0801d058 	.word	0x0801d058
 8011b20:	0801d2c8 	.word	0x0801d2c8

08011b24 <tcp_slowtmr>:
 *
 * Automatically called from tcp_tmr().
 */
void
tcp_slowtmr(void)
{
 8011b24:	b5b0      	push	{r4, r5, r7, lr}
 8011b26:	b090      	sub	sp, #64	; 0x40
 8011b28:	af04      	add	r7, sp, #16
  tcpwnd_size_t eff_wnd;
  u8_t pcb_remove;      /* flag if a PCB should be removed */
  u8_t pcb_reset;       /* flag if a RST should be sent when removing */
  err_t err;

  err = ERR_OK;
 8011b2a:	2300      	movs	r3, #0
 8011b2c:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25

  ++tcp_ticks;
 8011b30:	4b94      	ldr	r3, [pc, #592]	; (8011d84 <tcp_slowtmr+0x260>)
 8011b32:	681b      	ldr	r3, [r3, #0]
 8011b34:	3301      	adds	r3, #1
 8011b36:	4a93      	ldr	r2, [pc, #588]	; (8011d84 <tcp_slowtmr+0x260>)
 8011b38:	6013      	str	r3, [r2, #0]
  ++tcp_timer_ctr;
 8011b3a:	4b93      	ldr	r3, [pc, #588]	; (8011d88 <tcp_slowtmr+0x264>)
 8011b3c:	781b      	ldrb	r3, [r3, #0]
 8011b3e:	3301      	adds	r3, #1
 8011b40:	b2da      	uxtb	r2, r3
 8011b42:	4b91      	ldr	r3, [pc, #580]	; (8011d88 <tcp_slowtmr+0x264>)
 8011b44:	701a      	strb	r2, [r3, #0]

tcp_slowtmr_start:
  /* Steps through all of the active PCBs. */
  prev = NULL;
 8011b46:	2300      	movs	r3, #0
 8011b48:	62bb      	str	r3, [r7, #40]	; 0x28
  pcb = tcp_active_pcbs;
 8011b4a:	4b90      	ldr	r3, [pc, #576]	; (8011d8c <tcp_slowtmr+0x268>)
 8011b4c:	681b      	ldr	r3, [r3, #0]
 8011b4e:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (pcb == NULL) {
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: no active pcbs\n"));
  }
  while (pcb != NULL) {
 8011b50:	e29d      	b.n	801208e <tcp_slowtmr+0x56a>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: processing active pcb\n"));
    LWIP_ASSERT("tcp_slowtmr: active pcb->state != CLOSED\n", pcb->state != CLOSED);
 8011b52:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011b54:	7d1b      	ldrb	r3, [r3, #20]
 8011b56:	2b00      	cmp	r3, #0
 8011b58:	d106      	bne.n	8011b68 <tcp_slowtmr+0x44>
 8011b5a:	4b8d      	ldr	r3, [pc, #564]	; (8011d90 <tcp_slowtmr+0x26c>)
 8011b5c:	f240 42be 	movw	r2, #1214	; 0x4be
 8011b60:	498c      	ldr	r1, [pc, #560]	; (8011d94 <tcp_slowtmr+0x270>)
 8011b62:	488d      	ldr	r0, [pc, #564]	; (8011d98 <tcp_slowtmr+0x274>)
 8011b64:	f008 f874 	bl	8019c50 <iprintf>
    LWIP_ASSERT("tcp_slowtmr: active pcb->state != LISTEN\n", pcb->state != LISTEN);
 8011b68:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011b6a:	7d1b      	ldrb	r3, [r3, #20]
 8011b6c:	2b01      	cmp	r3, #1
 8011b6e:	d106      	bne.n	8011b7e <tcp_slowtmr+0x5a>
 8011b70:	4b87      	ldr	r3, [pc, #540]	; (8011d90 <tcp_slowtmr+0x26c>)
 8011b72:	f240 42bf 	movw	r2, #1215	; 0x4bf
 8011b76:	4989      	ldr	r1, [pc, #548]	; (8011d9c <tcp_slowtmr+0x278>)
 8011b78:	4887      	ldr	r0, [pc, #540]	; (8011d98 <tcp_slowtmr+0x274>)
 8011b7a:	f008 f869 	bl	8019c50 <iprintf>
    LWIP_ASSERT("tcp_slowtmr: active pcb->state != TIME-WAIT\n", pcb->state != TIME_WAIT);
 8011b7e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011b80:	7d1b      	ldrb	r3, [r3, #20]
 8011b82:	2b0a      	cmp	r3, #10
 8011b84:	d106      	bne.n	8011b94 <tcp_slowtmr+0x70>
 8011b86:	4b82      	ldr	r3, [pc, #520]	; (8011d90 <tcp_slowtmr+0x26c>)
 8011b88:	f44f 6298 	mov.w	r2, #1216	; 0x4c0
 8011b8c:	4984      	ldr	r1, [pc, #528]	; (8011da0 <tcp_slowtmr+0x27c>)
 8011b8e:	4882      	ldr	r0, [pc, #520]	; (8011d98 <tcp_slowtmr+0x274>)
 8011b90:	f008 f85e 	bl	8019c50 <iprintf>
    if (pcb->last_timer == tcp_timer_ctr) {
 8011b94:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011b96:	7f9a      	ldrb	r2, [r3, #30]
 8011b98:	4b7b      	ldr	r3, [pc, #492]	; (8011d88 <tcp_slowtmr+0x264>)
 8011b9a:	781b      	ldrb	r3, [r3, #0]
 8011b9c:	429a      	cmp	r2, r3
 8011b9e:	d105      	bne.n	8011bac <tcp_slowtmr+0x88>
      /* skip this pcb, we have already processed it */
      prev = pcb;
 8011ba0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011ba2:	62bb      	str	r3, [r7, #40]	; 0x28
      pcb = pcb->next;
 8011ba4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011ba6:	68db      	ldr	r3, [r3, #12]
 8011ba8:	62fb      	str	r3, [r7, #44]	; 0x2c
      continue;
 8011baa:	e270      	b.n	801208e <tcp_slowtmr+0x56a>
    }
    pcb->last_timer = tcp_timer_ctr;
 8011bac:	4b76      	ldr	r3, [pc, #472]	; (8011d88 <tcp_slowtmr+0x264>)
 8011bae:	781a      	ldrb	r2, [r3, #0]
 8011bb0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011bb2:	779a      	strb	r2, [r3, #30]

    pcb_remove = 0;
 8011bb4:	2300      	movs	r3, #0
 8011bb6:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    pcb_reset = 0;
 8011bba:	2300      	movs	r3, #0
 8011bbc:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26

    if (pcb->state == SYN_SENT && pcb->nrtx >= TCP_SYNMAXRTX) {
 8011bc0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011bc2:	7d1b      	ldrb	r3, [r3, #20]
 8011bc4:	2b02      	cmp	r3, #2
 8011bc6:	d10a      	bne.n	8011bde <tcp_slowtmr+0xba>
 8011bc8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011bca:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8011bce:	2b05      	cmp	r3, #5
 8011bd0:	d905      	bls.n	8011bde <tcp_slowtmr+0xba>
      ++pcb_remove;
 8011bd2:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8011bd6:	3301      	adds	r3, #1
 8011bd8:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8011bdc:	e11e      	b.n	8011e1c <tcp_slowtmr+0x2f8>
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: max SYN retries reached\n"));
    } else if (pcb->nrtx >= TCP_MAXRTX) {
 8011bde:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011be0:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8011be4:	2b0b      	cmp	r3, #11
 8011be6:	d905      	bls.n	8011bf4 <tcp_slowtmr+0xd0>
      ++pcb_remove;
 8011be8:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8011bec:	3301      	adds	r3, #1
 8011bee:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8011bf2:	e113      	b.n	8011e1c <tcp_slowtmr+0x2f8>
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: max DATA retries reached\n"));
    } else {
      if (pcb->persist_backoff > 0) {
 8011bf4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011bf6:	f893 3099 	ldrb.w	r3, [r3, #153]	; 0x99
 8011bfa:	2b00      	cmp	r3, #0
 8011bfc:	d075      	beq.n	8011cea <tcp_slowtmr+0x1c6>
        LWIP_ASSERT("tcp_slowtimr: persist ticking with in-flight data", pcb->unacked == NULL);
 8011bfe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011c00:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8011c02:	2b00      	cmp	r3, #0
 8011c04:	d006      	beq.n	8011c14 <tcp_slowtmr+0xf0>
 8011c06:	4b62      	ldr	r3, [pc, #392]	; (8011d90 <tcp_slowtmr+0x26c>)
 8011c08:	f240 42d4 	movw	r2, #1236	; 0x4d4
 8011c0c:	4965      	ldr	r1, [pc, #404]	; (8011da4 <tcp_slowtmr+0x280>)
 8011c0e:	4862      	ldr	r0, [pc, #392]	; (8011d98 <tcp_slowtmr+0x274>)
 8011c10:	f008 f81e 	bl	8019c50 <iprintf>
        LWIP_ASSERT("tcp_slowtimr: persist ticking with empty send buffer", pcb->unsent != NULL);
 8011c14:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011c16:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8011c18:	2b00      	cmp	r3, #0
 8011c1a:	d106      	bne.n	8011c2a <tcp_slowtmr+0x106>
 8011c1c:	4b5c      	ldr	r3, [pc, #368]	; (8011d90 <tcp_slowtmr+0x26c>)
 8011c1e:	f240 42d5 	movw	r2, #1237	; 0x4d5
 8011c22:	4961      	ldr	r1, [pc, #388]	; (8011da8 <tcp_slowtmr+0x284>)
 8011c24:	485c      	ldr	r0, [pc, #368]	; (8011d98 <tcp_slowtmr+0x274>)
 8011c26:	f008 f813 	bl	8019c50 <iprintf>
        if (pcb->persist_probe >= TCP_MAXRTX) {
 8011c2a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011c2c:	f893 309a 	ldrb.w	r3, [r3, #154]	; 0x9a
 8011c30:	2b0b      	cmp	r3, #11
 8011c32:	d905      	bls.n	8011c40 <tcp_slowtmr+0x11c>
          ++pcb_remove; /* max probes reached */
 8011c34:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8011c38:	3301      	adds	r3, #1
 8011c3a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8011c3e:	e0ed      	b.n	8011e1c <tcp_slowtmr+0x2f8>
        } else {
          u8_t backoff_cnt = tcp_persist_backoff[pcb->persist_backoff - 1];
 8011c40:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011c42:	f893 3099 	ldrb.w	r3, [r3, #153]	; 0x99
 8011c46:	3b01      	subs	r3, #1
 8011c48:	4a58      	ldr	r2, [pc, #352]	; (8011dac <tcp_slowtmr+0x288>)
 8011c4a:	5cd3      	ldrb	r3, [r2, r3]
 8011c4c:	747b      	strb	r3, [r7, #17]
          if (pcb->persist_cnt < backoff_cnt) {
 8011c4e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011c50:	f893 3098 	ldrb.w	r3, [r3, #152]	; 0x98
 8011c54:	7c7a      	ldrb	r2, [r7, #17]
 8011c56:	429a      	cmp	r2, r3
 8011c58:	d907      	bls.n	8011c6a <tcp_slowtmr+0x146>
            pcb->persist_cnt++;
 8011c5a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011c5c:	f893 3098 	ldrb.w	r3, [r3, #152]	; 0x98
 8011c60:	3301      	adds	r3, #1
 8011c62:	b2da      	uxtb	r2, r3
 8011c64:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011c66:	f883 2098 	strb.w	r2, [r3, #152]	; 0x98
          }
          if (pcb->persist_cnt >= backoff_cnt) {
 8011c6a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011c6c:	f893 3098 	ldrb.w	r3, [r3, #152]	; 0x98
 8011c70:	7c7a      	ldrb	r2, [r7, #17]
 8011c72:	429a      	cmp	r2, r3
 8011c74:	f200 80d2 	bhi.w	8011e1c <tcp_slowtmr+0x2f8>
            int next_slot = 1; /* increment timer to next slot */
 8011c78:	2301      	movs	r3, #1
 8011c7a:	623b      	str	r3, [r7, #32]
            /* If snd_wnd is zero, send 1 byte probes */
            if (pcb->snd_wnd == 0) {
 8011c7c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011c7e:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 8011c82:	2b00      	cmp	r3, #0
 8011c84:	d108      	bne.n	8011c98 <tcp_slowtmr+0x174>
              if (tcp_zero_window_probe(pcb) != ERR_OK) {
 8011c86:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8011c88:	f004 fc2c 	bl	80164e4 <tcp_zero_window_probe>
 8011c8c:	4603      	mov	r3, r0
 8011c8e:	2b00      	cmp	r3, #0
 8011c90:	d014      	beq.n	8011cbc <tcp_slowtmr+0x198>
                next_slot = 0; /* try probe again with current slot */
 8011c92:	2300      	movs	r3, #0
 8011c94:	623b      	str	r3, [r7, #32]
 8011c96:	e011      	b.n	8011cbc <tcp_slowtmr+0x198>
              }
              /* snd_wnd not fully closed, split unsent head and fill window */
            } else {
              if (tcp_split_unsent_seg(pcb, (u16_t)pcb->snd_wnd) == ERR_OK) {
 8011c98:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011c9a:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 8011c9e:	4619      	mov	r1, r3
 8011ca0:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8011ca2:	f003 faf1 	bl	8015288 <tcp_split_unsent_seg>
 8011ca6:	4603      	mov	r3, r0
 8011ca8:	2b00      	cmp	r3, #0
 8011caa:	d107      	bne.n	8011cbc <tcp_slowtmr+0x198>
                if (tcp_output(pcb) == ERR_OK) {
 8011cac:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8011cae:	f003 fd71 	bl	8015794 <tcp_output>
 8011cb2:	4603      	mov	r3, r0
 8011cb4:	2b00      	cmp	r3, #0
 8011cb6:	d101      	bne.n	8011cbc <tcp_slowtmr+0x198>
                  /* sending will cancel persist timer, else retry with current slot */
                  next_slot = 0;
 8011cb8:	2300      	movs	r3, #0
 8011cba:	623b      	str	r3, [r7, #32]
                }
              }
            }
            if (next_slot) {
 8011cbc:	6a3b      	ldr	r3, [r7, #32]
 8011cbe:	2b00      	cmp	r3, #0
 8011cc0:	f000 80ac 	beq.w	8011e1c <tcp_slowtmr+0x2f8>
              pcb->persist_cnt = 0;
 8011cc4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011cc6:	2200      	movs	r2, #0
 8011cc8:	f883 2098 	strb.w	r2, [r3, #152]	; 0x98
              if (pcb->persist_backoff < sizeof(tcp_persist_backoff)) {
 8011ccc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011cce:	f893 3099 	ldrb.w	r3, [r3, #153]	; 0x99
 8011cd2:	2b06      	cmp	r3, #6
 8011cd4:	f200 80a2 	bhi.w	8011e1c <tcp_slowtmr+0x2f8>
                pcb->persist_backoff++;
 8011cd8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011cda:	f893 3099 	ldrb.w	r3, [r3, #153]	; 0x99
 8011cde:	3301      	adds	r3, #1
 8011ce0:	b2da      	uxtb	r2, r3
 8011ce2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011ce4:	f883 2099 	strb.w	r2, [r3, #153]	; 0x99
 8011ce8:	e098      	b.n	8011e1c <tcp_slowtmr+0x2f8>
            }
          }
        }
      } else {
        /* Increase the retransmission timer if it is running */
        if ((pcb->rtime >= 0) && (pcb->rtime < 0x7FFF)) {
 8011cea:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011cec:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	; 0x30
 8011cf0:	2b00      	cmp	r3, #0
 8011cf2:	db0f      	blt.n	8011d14 <tcp_slowtmr+0x1f0>
 8011cf4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011cf6:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	; 0x30
 8011cfa:	f647 72ff 	movw	r2, #32767	; 0x7fff
 8011cfe:	4293      	cmp	r3, r2
 8011d00:	d008      	beq.n	8011d14 <tcp_slowtmr+0x1f0>
          ++pcb->rtime;
 8011d02:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011d04:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	; 0x30
 8011d08:	b29b      	uxth	r3, r3
 8011d0a:	3301      	adds	r3, #1
 8011d0c:	b29b      	uxth	r3, r3
 8011d0e:	b21a      	sxth	r2, r3
 8011d10:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011d12:	861a      	strh	r2, [r3, #48]	; 0x30
        }

        if (pcb->rtime >= pcb->rto) {
 8011d14:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011d16:	f9b3 2030 	ldrsh.w	r2, [r3, #48]	; 0x30
 8011d1a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011d1c:	f9b3 3040 	ldrsh.w	r3, [r3, #64]	; 0x40
 8011d20:	429a      	cmp	r2, r3
 8011d22:	db7b      	blt.n	8011e1c <tcp_slowtmr+0x2f8>
                                      " pcb->rto %"S16_F"\n",
                                      pcb->rtime, pcb->rto));
          /* If prepare phase fails but we have unsent data but no unacked data,
             still execute the backoff calculations below, as this means we somehow
             failed to send segment. */
          if ((tcp_rexmit_rto_prepare(pcb) == ERR_OK) || ((pcb->unacked == NULL) && (pcb->unsent != NULL))) {
 8011d24:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8011d26:	f004 f829 	bl	8015d7c <tcp_rexmit_rto_prepare>
 8011d2a:	4603      	mov	r3, r0
 8011d2c:	2b00      	cmp	r3, #0
 8011d2e:	d007      	beq.n	8011d40 <tcp_slowtmr+0x21c>
 8011d30:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011d32:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8011d34:	2b00      	cmp	r3, #0
 8011d36:	d171      	bne.n	8011e1c <tcp_slowtmr+0x2f8>
 8011d38:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011d3a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8011d3c:	2b00      	cmp	r3, #0
 8011d3e:	d06d      	beq.n	8011e1c <tcp_slowtmr+0x2f8>
            /* Double retransmission time-out unless we are trying to
             * connect to somebody (i.e., we are in SYN_SENT). */
            if (pcb->state != SYN_SENT) {
 8011d40:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011d42:	7d1b      	ldrb	r3, [r3, #20]
 8011d44:	2b02      	cmp	r3, #2
 8011d46:	d03a      	beq.n	8011dbe <tcp_slowtmr+0x29a>
              u8_t backoff_idx = LWIP_MIN(pcb->nrtx, sizeof(tcp_backoff) - 1);
 8011d48:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011d4a:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8011d4e:	2b0c      	cmp	r3, #12
 8011d50:	bf28      	it	cs
 8011d52:	230c      	movcs	r3, #12
 8011d54:	76fb      	strb	r3, [r7, #27]
              int calc_rto = ((pcb->sa >> 3) + pcb->sv) << tcp_backoff[backoff_idx];
 8011d56:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011d58:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	; 0x3c
 8011d5c:	10db      	asrs	r3, r3, #3
 8011d5e:	b21b      	sxth	r3, r3
 8011d60:	461a      	mov	r2, r3
 8011d62:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011d64:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	; 0x3e
 8011d68:	4413      	add	r3, r2
 8011d6a:	7efa      	ldrb	r2, [r7, #27]
 8011d6c:	4910      	ldr	r1, [pc, #64]	; (8011db0 <tcp_slowtmr+0x28c>)
 8011d6e:	5c8a      	ldrb	r2, [r1, r2]
 8011d70:	4093      	lsls	r3, r2
 8011d72:	617b      	str	r3, [r7, #20]
              pcb->rto = (s16_t)LWIP_MIN(calc_rto, 0x7FFF);
 8011d74:	697b      	ldr	r3, [r7, #20]
 8011d76:	f647 72fe 	movw	r2, #32766	; 0x7ffe
 8011d7a:	4293      	cmp	r3, r2
 8011d7c:	dc1a      	bgt.n	8011db4 <tcp_slowtmr+0x290>
 8011d7e:	697b      	ldr	r3, [r7, #20]
 8011d80:	b21a      	sxth	r2, r3
 8011d82:	e019      	b.n	8011db8 <tcp_slowtmr+0x294>
 8011d84:	200070d8 	.word	0x200070d8
 8011d88:	200070ee 	.word	0x200070ee
 8011d8c:	200070e4 	.word	0x200070e4
 8011d90:	0801d014 	.word	0x0801d014
 8011d94:	0801d358 	.word	0x0801d358
 8011d98:	0801d058 	.word	0x0801d058
 8011d9c:	0801d384 	.word	0x0801d384
 8011da0:	0801d3b0 	.word	0x0801d3b0
 8011da4:	0801d3e0 	.word	0x0801d3e0
 8011da8:	0801d414 	.word	0x0801d414
 8011dac:	0801f00c 	.word	0x0801f00c
 8011db0:	0801effc 	.word	0x0801effc
 8011db4:	f647 72ff 	movw	r2, #32767	; 0x7fff
 8011db8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011dba:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
            }

            /* Reset the retransmission timer. */
            pcb->rtime = 0;
 8011dbe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011dc0:	2200      	movs	r2, #0
 8011dc2:	861a      	strh	r2, [r3, #48]	; 0x30

            /* Reduce congestion window and ssthresh. */
            eff_wnd = LWIP_MIN(pcb->cwnd, pcb->snd_wnd);
 8011dc4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011dc6:	f8b3 2060 	ldrh.w	r2, [r3, #96]	; 0x60
 8011dca:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011dcc:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 8011dd0:	4293      	cmp	r3, r2
 8011dd2:	bf28      	it	cs
 8011dd4:	4613      	movcs	r3, r2
 8011dd6:	827b      	strh	r3, [r7, #18]
            pcb->ssthresh = eff_wnd >> 1;
 8011dd8:	8a7b      	ldrh	r3, [r7, #18]
 8011dda:	085b      	lsrs	r3, r3, #1
 8011ddc:	b29a      	uxth	r2, r3
 8011dde:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011de0:	f8a3 204a 	strh.w	r2, [r3, #74]	; 0x4a
            if (pcb->ssthresh < (tcpwnd_size_t)(pcb->mss << 1)) {
 8011de4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011de6:	f8b3 204a 	ldrh.w	r2, [r3, #74]	; 0x4a
 8011dea:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011dec:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8011dee:	005b      	lsls	r3, r3, #1
 8011df0:	b29b      	uxth	r3, r3
 8011df2:	429a      	cmp	r2, r3
 8011df4:	d206      	bcs.n	8011e04 <tcp_slowtmr+0x2e0>
              pcb->ssthresh = (tcpwnd_size_t)(pcb->mss << 1);
 8011df6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011df8:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8011dfa:	005b      	lsls	r3, r3, #1
 8011dfc:	b29a      	uxth	r2, r3
 8011dfe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011e00:	f8a3 204a 	strh.w	r2, [r3, #74]	; 0x4a
            }
            pcb->cwnd = pcb->mss;
 8011e04:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011e06:	8e5a      	ldrh	r2, [r3, #50]	; 0x32
 8011e08:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011e0a:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
            LWIP_DEBUGF(TCP_CWND_DEBUG, ("tcp_slowtmr: cwnd %"TCPWNDSIZE_F
                                         " ssthresh %"TCPWNDSIZE_F"\n",
                                         pcb->cwnd, pcb->ssthresh));
            pcb->bytes_acked = 0;
 8011e0e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011e10:	2200      	movs	r2, #0
 8011e12:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a

            /* The following needs to be called AFTER cwnd is set to one
               mss - STJ */
            tcp_rexmit_rto_commit(pcb);
 8011e16:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8011e18:	f004 f820 	bl	8015e5c <tcp_rexmit_rto_commit>
          }
        }
      }
    }
    /* Check if this PCB has stayed too long in FIN-WAIT-2 */
    if (pcb->state == FIN_WAIT_2) {
 8011e1c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011e1e:	7d1b      	ldrb	r3, [r3, #20]
 8011e20:	2b06      	cmp	r3, #6
 8011e22:	d111      	bne.n	8011e48 <tcp_slowtmr+0x324>
      /* If this PCB is in FIN_WAIT_2 because of SHUT_WR don't let it time out. */
      if (pcb->flags & TF_RXCLOSED) {
 8011e24:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011e26:	8b5b      	ldrh	r3, [r3, #26]
 8011e28:	f003 0310 	and.w	r3, r3, #16
 8011e2c:	2b00      	cmp	r3, #0
 8011e2e:	d00b      	beq.n	8011e48 <tcp_slowtmr+0x324>
        /* PCB was fully closed (either through close() or SHUT_RDWR):
           normal FIN-WAIT timeout handling. */
        if ((u32_t)(tcp_ticks - pcb->tmr) >
 8011e30:	4b9c      	ldr	r3, [pc, #624]	; (80120a4 <tcp_slowtmr+0x580>)
 8011e32:	681a      	ldr	r2, [r3, #0]
 8011e34:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011e36:	6a1b      	ldr	r3, [r3, #32]
 8011e38:	1ad3      	subs	r3, r2, r3
 8011e3a:	2b28      	cmp	r3, #40	; 0x28
 8011e3c:	d904      	bls.n	8011e48 <tcp_slowtmr+0x324>
            TCP_FIN_WAIT_TIMEOUT / TCP_SLOW_INTERVAL) {
          ++pcb_remove;
 8011e3e:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8011e42:	3301      	adds	r3, #1
 8011e44:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
        }
      }
    }

    /* Check if KEEPALIVE should be sent */
    if (ip_get_option(pcb, SOF_KEEPALIVE) &&
 8011e48:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011e4a:	7a5b      	ldrb	r3, [r3, #9]
 8011e4c:	f003 0308 	and.w	r3, r3, #8
 8011e50:	2b00      	cmp	r3, #0
 8011e52:	d04a      	beq.n	8011eea <tcp_slowtmr+0x3c6>
        ((pcb->state == ESTABLISHED) ||
 8011e54:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011e56:	7d1b      	ldrb	r3, [r3, #20]
    if (ip_get_option(pcb, SOF_KEEPALIVE) &&
 8011e58:	2b04      	cmp	r3, #4
 8011e5a:	d003      	beq.n	8011e64 <tcp_slowtmr+0x340>
         (pcb->state == CLOSE_WAIT))) {
 8011e5c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011e5e:	7d1b      	ldrb	r3, [r3, #20]
        ((pcb->state == ESTABLISHED) ||
 8011e60:	2b07      	cmp	r3, #7
 8011e62:	d142      	bne.n	8011eea <tcp_slowtmr+0x3c6>
      if ((u32_t)(tcp_ticks - pcb->tmr) >
 8011e64:	4b8f      	ldr	r3, [pc, #572]	; (80120a4 <tcp_slowtmr+0x580>)
 8011e66:	681a      	ldr	r2, [r3, #0]
 8011e68:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011e6a:	6a1b      	ldr	r3, [r3, #32]
 8011e6c:	1ad2      	subs	r2, r2, r3
          (pcb->keep_idle + TCP_KEEP_DUR(pcb)) / TCP_SLOW_INTERVAL) {
 8011e6e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011e70:	f8d3 1094 	ldr.w	r1, [r3, #148]	; 0x94
 8011e74:	4b8c      	ldr	r3, [pc, #560]	; (80120a8 <tcp_slowtmr+0x584>)
 8011e76:	440b      	add	r3, r1
 8011e78:	498c      	ldr	r1, [pc, #560]	; (80120ac <tcp_slowtmr+0x588>)
 8011e7a:	fba1 1303 	umull	r1, r3, r1, r3
 8011e7e:	095b      	lsrs	r3, r3, #5
      if ((u32_t)(tcp_ticks - pcb->tmr) >
 8011e80:	429a      	cmp	r2, r3
 8011e82:	d90a      	bls.n	8011e9a <tcp_slowtmr+0x376>
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: KEEPALIVE timeout. Aborting connection to "));
        ip_addr_debug_print_val(TCP_DEBUG, pcb->remote_ip);
        LWIP_DEBUGF(TCP_DEBUG, ("\n"));

        ++pcb_remove;
 8011e84:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8011e88:	3301      	adds	r3, #1
 8011e8a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
        ++pcb_reset;
 8011e8e:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8011e92:	3301      	adds	r3, #1
 8011e94:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 8011e98:	e027      	b.n	8011eea <tcp_slowtmr+0x3c6>
      } else if ((u32_t)(tcp_ticks - pcb->tmr) >
 8011e9a:	4b82      	ldr	r3, [pc, #520]	; (80120a4 <tcp_slowtmr+0x580>)
 8011e9c:	681a      	ldr	r2, [r3, #0]
 8011e9e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011ea0:	6a1b      	ldr	r3, [r3, #32]
 8011ea2:	1ad2      	subs	r2, r2, r3
                 (pcb->keep_idle + pcb->keep_cnt_sent * TCP_KEEP_INTVL(pcb))
 8011ea4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011ea6:	f8d3 1094 	ldr.w	r1, [r3, #148]	; 0x94
 8011eaa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011eac:	f893 309b 	ldrb.w	r3, [r3, #155]	; 0x9b
 8011eb0:	4618      	mov	r0, r3
 8011eb2:	4b7f      	ldr	r3, [pc, #508]	; (80120b0 <tcp_slowtmr+0x58c>)
 8011eb4:	fb00 f303 	mul.w	r3, r0, r3
 8011eb8:	440b      	add	r3, r1
                 / TCP_SLOW_INTERVAL) {
 8011eba:	497c      	ldr	r1, [pc, #496]	; (80120ac <tcp_slowtmr+0x588>)
 8011ebc:	fba1 1303 	umull	r1, r3, r1, r3
 8011ec0:	095b      	lsrs	r3, r3, #5
      } else if ((u32_t)(tcp_ticks - pcb->tmr) >
 8011ec2:	429a      	cmp	r2, r3
 8011ec4:	d911      	bls.n	8011eea <tcp_slowtmr+0x3c6>
        err = tcp_keepalive(pcb);
 8011ec6:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8011ec8:	f004 facc 	bl	8016464 <tcp_keepalive>
 8011ecc:	4603      	mov	r3, r0
 8011ece:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
        if (err == ERR_OK) {
 8011ed2:	f997 3025 	ldrsb.w	r3, [r7, #37]	; 0x25
 8011ed6:	2b00      	cmp	r3, #0
 8011ed8:	d107      	bne.n	8011eea <tcp_slowtmr+0x3c6>
          pcb->keep_cnt_sent++;
 8011eda:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011edc:	f893 309b 	ldrb.w	r3, [r3, #155]	; 0x9b
 8011ee0:	3301      	adds	r3, #1
 8011ee2:	b2da      	uxtb	r2, r3
 8011ee4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011ee6:	f883 209b 	strb.w	r2, [r3, #155]	; 0x9b

    /* If this PCB has queued out of sequence data, but has been
       inactive for too long, will drop the data (it will eventually
       be retransmitted). */
#if TCP_QUEUE_OOSEQ
    if (pcb->ooseq != NULL &&
 8011eea:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011eec:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8011eee:	2b00      	cmp	r3, #0
 8011ef0:	d011      	beq.n	8011f16 <tcp_slowtmr+0x3f2>
        (tcp_ticks - pcb->tmr >= (u32_t)pcb->rto * TCP_OOSEQ_TIMEOUT)) {
 8011ef2:	4b6c      	ldr	r3, [pc, #432]	; (80120a4 <tcp_slowtmr+0x580>)
 8011ef4:	681a      	ldr	r2, [r3, #0]
 8011ef6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011ef8:	6a1b      	ldr	r3, [r3, #32]
 8011efa:	1ad2      	subs	r2, r2, r3
 8011efc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011efe:	f9b3 3040 	ldrsh.w	r3, [r3, #64]	; 0x40
 8011f02:	4619      	mov	r1, r3
 8011f04:	460b      	mov	r3, r1
 8011f06:	005b      	lsls	r3, r3, #1
 8011f08:	440b      	add	r3, r1
 8011f0a:	005b      	lsls	r3, r3, #1
    if (pcb->ooseq != NULL &&
 8011f0c:	429a      	cmp	r2, r3
 8011f0e:	d302      	bcc.n	8011f16 <tcp_slowtmr+0x3f2>
      LWIP_DEBUGF(TCP_CWND_DEBUG, ("tcp_slowtmr: dropping OOSEQ queued data\n"));
      tcp_free_ooseq(pcb);
 8011f10:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8011f12:	f000 fddf 	bl	8012ad4 <tcp_free_ooseq>
    }
#endif /* TCP_QUEUE_OOSEQ */

    /* Check if this PCB has stayed too long in SYN-RCVD */
    if (pcb->state == SYN_RCVD) {
 8011f16:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011f18:	7d1b      	ldrb	r3, [r3, #20]
 8011f1a:	2b03      	cmp	r3, #3
 8011f1c:	d10b      	bne.n	8011f36 <tcp_slowtmr+0x412>
      if ((u32_t)(tcp_ticks - pcb->tmr) >
 8011f1e:	4b61      	ldr	r3, [pc, #388]	; (80120a4 <tcp_slowtmr+0x580>)
 8011f20:	681a      	ldr	r2, [r3, #0]
 8011f22:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011f24:	6a1b      	ldr	r3, [r3, #32]
 8011f26:	1ad3      	subs	r3, r2, r3
 8011f28:	2b28      	cmp	r3, #40	; 0x28
 8011f2a:	d904      	bls.n	8011f36 <tcp_slowtmr+0x412>
          TCP_SYN_RCVD_TIMEOUT / TCP_SLOW_INTERVAL) {
        ++pcb_remove;
 8011f2c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8011f30:	3301      	adds	r3, #1
 8011f32:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: removing pcb stuck in SYN-RCVD\n"));
      }
    }

    /* Check if this PCB has stayed too long in LAST-ACK */
    if (pcb->state == LAST_ACK) {
 8011f36:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011f38:	7d1b      	ldrb	r3, [r3, #20]
 8011f3a:	2b09      	cmp	r3, #9
 8011f3c:	d10b      	bne.n	8011f56 <tcp_slowtmr+0x432>
      if ((u32_t)(tcp_ticks - pcb->tmr) > 2 * TCP_MSL / TCP_SLOW_INTERVAL) {
 8011f3e:	4b59      	ldr	r3, [pc, #356]	; (80120a4 <tcp_slowtmr+0x580>)
 8011f40:	681a      	ldr	r2, [r3, #0]
 8011f42:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011f44:	6a1b      	ldr	r3, [r3, #32]
 8011f46:	1ad3      	subs	r3, r2, r3
 8011f48:	2bf0      	cmp	r3, #240	; 0xf0
 8011f4a:	d904      	bls.n	8011f56 <tcp_slowtmr+0x432>
        ++pcb_remove;
 8011f4c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8011f50:	3301      	adds	r3, #1
 8011f52:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: removing pcb stuck in LAST-ACK\n"));
      }
    }

    /* If the PCB should be removed, do it. */
    if (pcb_remove) {
 8011f56:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8011f5a:	2b00      	cmp	r3, #0
 8011f5c:	d060      	beq.n	8012020 <tcp_slowtmr+0x4fc>
      struct tcp_pcb *pcb2;
#if LWIP_CALLBACK_API
      tcp_err_fn err_fn = pcb->errf;
 8011f5e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011f60:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8011f64:	60fb      	str	r3, [r7, #12]
#endif /* LWIP_CALLBACK_API */
      void *err_arg;
      enum tcp_state last_state;
      tcp_pcb_purge(pcb);
 8011f66:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8011f68:	f000 fc00 	bl	801276c <tcp_pcb_purge>
      /* Remove PCB from tcp_active_pcbs list. */
      if (prev != NULL) {
 8011f6c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8011f6e:	2b00      	cmp	r3, #0
 8011f70:	d010      	beq.n	8011f94 <tcp_slowtmr+0x470>
        LWIP_ASSERT("tcp_slowtmr: middle tcp != tcp_active_pcbs", pcb != tcp_active_pcbs);
 8011f72:	4b50      	ldr	r3, [pc, #320]	; (80120b4 <tcp_slowtmr+0x590>)
 8011f74:	681b      	ldr	r3, [r3, #0]
 8011f76:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8011f78:	429a      	cmp	r2, r3
 8011f7a:	d106      	bne.n	8011f8a <tcp_slowtmr+0x466>
 8011f7c:	4b4e      	ldr	r3, [pc, #312]	; (80120b8 <tcp_slowtmr+0x594>)
 8011f7e:	f240 526d 	movw	r2, #1389	; 0x56d
 8011f82:	494e      	ldr	r1, [pc, #312]	; (80120bc <tcp_slowtmr+0x598>)
 8011f84:	484e      	ldr	r0, [pc, #312]	; (80120c0 <tcp_slowtmr+0x59c>)
 8011f86:	f007 fe63 	bl	8019c50 <iprintf>
        prev->next = pcb->next;
 8011f8a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011f8c:	68da      	ldr	r2, [r3, #12]
 8011f8e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8011f90:	60da      	str	r2, [r3, #12]
 8011f92:	e00f      	b.n	8011fb4 <tcp_slowtmr+0x490>
      } else {
        /* This PCB was the first. */
        LWIP_ASSERT("tcp_slowtmr: first pcb == tcp_active_pcbs", tcp_active_pcbs == pcb);
 8011f94:	4b47      	ldr	r3, [pc, #284]	; (80120b4 <tcp_slowtmr+0x590>)
 8011f96:	681b      	ldr	r3, [r3, #0]
 8011f98:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8011f9a:	429a      	cmp	r2, r3
 8011f9c:	d006      	beq.n	8011fac <tcp_slowtmr+0x488>
 8011f9e:	4b46      	ldr	r3, [pc, #280]	; (80120b8 <tcp_slowtmr+0x594>)
 8011fa0:	f240 5271 	movw	r2, #1393	; 0x571
 8011fa4:	4947      	ldr	r1, [pc, #284]	; (80120c4 <tcp_slowtmr+0x5a0>)
 8011fa6:	4846      	ldr	r0, [pc, #280]	; (80120c0 <tcp_slowtmr+0x59c>)
 8011fa8:	f007 fe52 	bl	8019c50 <iprintf>
        tcp_active_pcbs = pcb->next;
 8011fac:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011fae:	68db      	ldr	r3, [r3, #12]
 8011fb0:	4a40      	ldr	r2, [pc, #256]	; (80120b4 <tcp_slowtmr+0x590>)
 8011fb2:	6013      	str	r3, [r2, #0]
      }

      if (pcb_reset) {
 8011fb4:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8011fb8:	2b00      	cmp	r3, #0
 8011fba:	d013      	beq.n	8011fe4 <tcp_slowtmr+0x4c0>
        tcp_rst(pcb, pcb->snd_nxt, pcb->rcv_nxt, &pcb->local_ip, &pcb->remote_ip,
 8011fbc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011fbe:	6d18      	ldr	r0, [r3, #80]	; 0x50
 8011fc0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011fc2:	6a5c      	ldr	r4, [r3, #36]	; 0x24
 8011fc4:	6afd      	ldr	r5, [r7, #44]	; 0x2c
 8011fc6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011fc8:	3304      	adds	r3, #4
 8011fca:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8011fcc:	8ad2      	ldrh	r2, [r2, #22]
 8011fce:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8011fd0:	8b09      	ldrh	r1, [r1, #24]
 8011fd2:	9102      	str	r1, [sp, #8]
 8011fd4:	9201      	str	r2, [sp, #4]
 8011fd6:	9300      	str	r3, [sp, #0]
 8011fd8:	462b      	mov	r3, r5
 8011fda:	4622      	mov	r2, r4
 8011fdc:	4601      	mov	r1, r0
 8011fde:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8011fe0:	f004 f98c 	bl	80162fc <tcp_rst>
                pcb->local_port, pcb->remote_port);
      }

      err_arg = pcb->callback_arg;
 8011fe4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011fe6:	691b      	ldr	r3, [r3, #16]
 8011fe8:	60bb      	str	r3, [r7, #8]
      last_state = pcb->state;
 8011fea:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011fec:	7d1b      	ldrb	r3, [r3, #20]
 8011fee:	71fb      	strb	r3, [r7, #7]
      pcb2 = pcb;
 8011ff0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011ff2:	603b      	str	r3, [r7, #0]
      pcb = pcb->next;
 8011ff4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011ff6:	68db      	ldr	r3, [r3, #12]
 8011ff8:	62fb      	str	r3, [r7, #44]	; 0x2c
      tcp_free(pcb2);
 8011ffa:	6838      	ldr	r0, [r7, #0]
 8011ffc:	f7ff f9f2 	bl	80113e4 <tcp_free>

      tcp_active_pcbs_changed = 0;
 8012000:	4b31      	ldr	r3, [pc, #196]	; (80120c8 <tcp_slowtmr+0x5a4>)
 8012002:	2200      	movs	r2, #0
 8012004:	701a      	strb	r2, [r3, #0]
      TCP_EVENT_ERR(last_state, err_fn, err_arg, ERR_ABRT);
 8012006:	68fb      	ldr	r3, [r7, #12]
 8012008:	2b00      	cmp	r3, #0
 801200a:	d004      	beq.n	8012016 <tcp_slowtmr+0x4f2>
 801200c:	68fb      	ldr	r3, [r7, #12]
 801200e:	f06f 010c 	mvn.w	r1, #12
 8012012:	68b8      	ldr	r0, [r7, #8]
 8012014:	4798      	blx	r3
      if (tcp_active_pcbs_changed) {
 8012016:	4b2c      	ldr	r3, [pc, #176]	; (80120c8 <tcp_slowtmr+0x5a4>)
 8012018:	781b      	ldrb	r3, [r3, #0]
 801201a:	2b00      	cmp	r3, #0
 801201c:	d037      	beq.n	801208e <tcp_slowtmr+0x56a>
        goto tcp_slowtmr_start;
 801201e:	e592      	b.n	8011b46 <tcp_slowtmr+0x22>
      }
    } else {
      /* get the 'next' element now and work with 'prev' below (in case of abort) */
      prev = pcb;
 8012020:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8012022:	62bb      	str	r3, [r7, #40]	; 0x28
      pcb = pcb->next;
 8012024:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8012026:	68db      	ldr	r3, [r3, #12]
 8012028:	62fb      	str	r3, [r7, #44]	; 0x2c

      /* We check if we should poll the connection. */
      ++prev->polltmr;
 801202a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801202c:	7f1b      	ldrb	r3, [r3, #28]
 801202e:	3301      	adds	r3, #1
 8012030:	b2da      	uxtb	r2, r3
 8012032:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8012034:	771a      	strb	r2, [r3, #28]
      if (prev->polltmr >= prev->pollinterval) {
 8012036:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8012038:	7f1a      	ldrb	r2, [r3, #28]
 801203a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801203c:	7f5b      	ldrb	r3, [r3, #29]
 801203e:	429a      	cmp	r2, r3
 8012040:	d325      	bcc.n	801208e <tcp_slowtmr+0x56a>
        prev->polltmr = 0;
 8012042:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8012044:	2200      	movs	r2, #0
 8012046:	771a      	strb	r2, [r3, #28]
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: polling application\n"));
        tcp_active_pcbs_changed = 0;
 8012048:	4b1f      	ldr	r3, [pc, #124]	; (80120c8 <tcp_slowtmr+0x5a4>)
 801204a:	2200      	movs	r2, #0
 801204c:	701a      	strb	r2, [r3, #0]
        TCP_EVENT_POLL(prev, err);
 801204e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8012050:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8012054:	2b00      	cmp	r3, #0
 8012056:	d00b      	beq.n	8012070 <tcp_slowtmr+0x54c>
 8012058:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801205a:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 801205e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8012060:	6912      	ldr	r2, [r2, #16]
 8012062:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8012064:	4610      	mov	r0, r2
 8012066:	4798      	blx	r3
 8012068:	4603      	mov	r3, r0
 801206a:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
 801206e:	e002      	b.n	8012076 <tcp_slowtmr+0x552>
 8012070:	2300      	movs	r3, #0
 8012072:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
        if (tcp_active_pcbs_changed) {
 8012076:	4b14      	ldr	r3, [pc, #80]	; (80120c8 <tcp_slowtmr+0x5a4>)
 8012078:	781b      	ldrb	r3, [r3, #0]
 801207a:	2b00      	cmp	r3, #0
 801207c:	d000      	beq.n	8012080 <tcp_slowtmr+0x55c>
          goto tcp_slowtmr_start;
 801207e:	e562      	b.n	8011b46 <tcp_slowtmr+0x22>
        }
        /* if err == ERR_ABRT, 'prev' is already deallocated */
        if (err == ERR_OK) {
 8012080:	f997 3025 	ldrsb.w	r3, [r7, #37]	; 0x25
 8012084:	2b00      	cmp	r3, #0
 8012086:	d102      	bne.n	801208e <tcp_slowtmr+0x56a>
          tcp_output(prev);
 8012088:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 801208a:	f003 fb83 	bl	8015794 <tcp_output>
  while (pcb != NULL) {
 801208e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8012090:	2b00      	cmp	r3, #0
 8012092:	f47f ad5e 	bne.w	8011b52 <tcp_slowtmr+0x2e>
    }
  }


  /* Steps through all of the TIME-WAIT PCBs. */
  prev = NULL;
 8012096:	2300      	movs	r3, #0
 8012098:	62bb      	str	r3, [r7, #40]	; 0x28
  pcb = tcp_tw_pcbs;
 801209a:	4b0c      	ldr	r3, [pc, #48]	; (80120cc <tcp_slowtmr+0x5a8>)
 801209c:	681b      	ldr	r3, [r3, #0]
 801209e:	62fb      	str	r3, [r7, #44]	; 0x2c
  while (pcb != NULL) {
 80120a0:	e069      	b.n	8012176 <tcp_slowtmr+0x652>
 80120a2:	bf00      	nop
 80120a4:	200070d8 	.word	0x200070d8
 80120a8:	000a4cb8 	.word	0x000a4cb8
 80120ac:	10624dd3 	.word	0x10624dd3
 80120b0:	000124f8 	.word	0x000124f8
 80120b4:	200070e4 	.word	0x200070e4
 80120b8:	0801d014 	.word	0x0801d014
 80120bc:	0801d44c 	.word	0x0801d44c
 80120c0:	0801d058 	.word	0x0801d058
 80120c4:	0801d478 	.word	0x0801d478
 80120c8:	200070ec 	.word	0x200070ec
 80120cc:	200070e8 	.word	0x200070e8
    LWIP_ASSERT("tcp_slowtmr: TIME-WAIT pcb->state == TIME-WAIT", pcb->state == TIME_WAIT);
 80120d0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80120d2:	7d1b      	ldrb	r3, [r3, #20]
 80120d4:	2b0a      	cmp	r3, #10
 80120d6:	d006      	beq.n	80120e6 <tcp_slowtmr+0x5c2>
 80120d8:	4b2b      	ldr	r3, [pc, #172]	; (8012188 <tcp_slowtmr+0x664>)
 80120da:	f240 52a1 	movw	r2, #1441	; 0x5a1
 80120de:	492b      	ldr	r1, [pc, #172]	; (801218c <tcp_slowtmr+0x668>)
 80120e0:	482b      	ldr	r0, [pc, #172]	; (8012190 <tcp_slowtmr+0x66c>)
 80120e2:	f007 fdb5 	bl	8019c50 <iprintf>
    pcb_remove = 0;
 80120e6:	2300      	movs	r3, #0
 80120e8:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

    /* Check if this PCB has stayed long enough in TIME-WAIT */
    if ((u32_t)(tcp_ticks - pcb->tmr) > 2 * TCP_MSL / TCP_SLOW_INTERVAL) {
 80120ec:	4b29      	ldr	r3, [pc, #164]	; (8012194 <tcp_slowtmr+0x670>)
 80120ee:	681a      	ldr	r2, [r3, #0]
 80120f0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80120f2:	6a1b      	ldr	r3, [r3, #32]
 80120f4:	1ad3      	subs	r3, r2, r3
 80120f6:	2bf0      	cmp	r3, #240	; 0xf0
 80120f8:	d904      	bls.n	8012104 <tcp_slowtmr+0x5e0>
      ++pcb_remove;
 80120fa:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80120fe:	3301      	adds	r3, #1
 8012100:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    }

    /* If the PCB should be removed, do it. */
    if (pcb_remove) {
 8012104:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8012108:	2b00      	cmp	r3, #0
 801210a:	d02f      	beq.n	801216c <tcp_slowtmr+0x648>
      struct tcp_pcb *pcb2;
      tcp_pcb_purge(pcb);
 801210c:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 801210e:	f000 fb2d 	bl	801276c <tcp_pcb_purge>
      /* Remove PCB from tcp_tw_pcbs list. */
      if (prev != NULL) {
 8012112:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8012114:	2b00      	cmp	r3, #0
 8012116:	d010      	beq.n	801213a <tcp_slowtmr+0x616>
        LWIP_ASSERT("tcp_slowtmr: middle tcp != tcp_tw_pcbs", pcb != tcp_tw_pcbs);
 8012118:	4b1f      	ldr	r3, [pc, #124]	; (8012198 <tcp_slowtmr+0x674>)
 801211a:	681b      	ldr	r3, [r3, #0]
 801211c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 801211e:	429a      	cmp	r2, r3
 8012120:	d106      	bne.n	8012130 <tcp_slowtmr+0x60c>
 8012122:	4b19      	ldr	r3, [pc, #100]	; (8012188 <tcp_slowtmr+0x664>)
 8012124:	f240 52af 	movw	r2, #1455	; 0x5af
 8012128:	491c      	ldr	r1, [pc, #112]	; (801219c <tcp_slowtmr+0x678>)
 801212a:	4819      	ldr	r0, [pc, #100]	; (8012190 <tcp_slowtmr+0x66c>)
 801212c:	f007 fd90 	bl	8019c50 <iprintf>
        prev->next = pcb->next;
 8012130:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8012132:	68da      	ldr	r2, [r3, #12]
 8012134:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8012136:	60da      	str	r2, [r3, #12]
 8012138:	e00f      	b.n	801215a <tcp_slowtmr+0x636>
      } else {
        /* This PCB was the first. */
        LWIP_ASSERT("tcp_slowtmr: first pcb == tcp_tw_pcbs", tcp_tw_pcbs == pcb);
 801213a:	4b17      	ldr	r3, [pc, #92]	; (8012198 <tcp_slowtmr+0x674>)
 801213c:	681b      	ldr	r3, [r3, #0]
 801213e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8012140:	429a      	cmp	r2, r3
 8012142:	d006      	beq.n	8012152 <tcp_slowtmr+0x62e>
 8012144:	4b10      	ldr	r3, [pc, #64]	; (8012188 <tcp_slowtmr+0x664>)
 8012146:	f240 52b3 	movw	r2, #1459	; 0x5b3
 801214a:	4915      	ldr	r1, [pc, #84]	; (80121a0 <tcp_slowtmr+0x67c>)
 801214c:	4810      	ldr	r0, [pc, #64]	; (8012190 <tcp_slowtmr+0x66c>)
 801214e:	f007 fd7f 	bl	8019c50 <iprintf>
        tcp_tw_pcbs = pcb->next;
 8012152:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8012154:	68db      	ldr	r3, [r3, #12]
 8012156:	4a10      	ldr	r2, [pc, #64]	; (8012198 <tcp_slowtmr+0x674>)
 8012158:	6013      	str	r3, [r2, #0]
      }
      pcb2 = pcb;
 801215a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801215c:	61fb      	str	r3, [r7, #28]
      pcb = pcb->next;
 801215e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8012160:	68db      	ldr	r3, [r3, #12]
 8012162:	62fb      	str	r3, [r7, #44]	; 0x2c
      tcp_free(pcb2);
 8012164:	69f8      	ldr	r0, [r7, #28]
 8012166:	f7ff f93d 	bl	80113e4 <tcp_free>
 801216a:	e004      	b.n	8012176 <tcp_slowtmr+0x652>
    } else {
      prev = pcb;
 801216c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801216e:	62bb      	str	r3, [r7, #40]	; 0x28
      pcb = pcb->next;
 8012170:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8012172:	68db      	ldr	r3, [r3, #12]
 8012174:	62fb      	str	r3, [r7, #44]	; 0x2c
  while (pcb != NULL) {
 8012176:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8012178:	2b00      	cmp	r3, #0
 801217a:	d1a9      	bne.n	80120d0 <tcp_slowtmr+0x5ac>
    }
  }
}
 801217c:	bf00      	nop
 801217e:	bf00      	nop
 8012180:	3730      	adds	r7, #48	; 0x30
 8012182:	46bd      	mov	sp, r7
 8012184:	bdb0      	pop	{r4, r5, r7, pc}
 8012186:	bf00      	nop
 8012188:	0801d014 	.word	0x0801d014
 801218c:	0801d4a4 	.word	0x0801d4a4
 8012190:	0801d058 	.word	0x0801d058
 8012194:	200070d8 	.word	0x200070d8
 8012198:	200070e8 	.word	0x200070e8
 801219c:	0801d4d4 	.word	0x0801d4d4
 80121a0:	0801d4fc 	.word	0x0801d4fc

080121a4 <tcp_fasttmr>:
 *
 * Automatically called from tcp_tmr().
 */
void
tcp_fasttmr(void)
{
 80121a4:	b580      	push	{r7, lr}
 80121a6:	b082      	sub	sp, #8
 80121a8:	af00      	add	r7, sp, #0
  struct tcp_pcb *pcb;

  ++tcp_timer_ctr;
 80121aa:	4b2d      	ldr	r3, [pc, #180]	; (8012260 <tcp_fasttmr+0xbc>)
 80121ac:	781b      	ldrb	r3, [r3, #0]
 80121ae:	3301      	adds	r3, #1
 80121b0:	b2da      	uxtb	r2, r3
 80121b2:	4b2b      	ldr	r3, [pc, #172]	; (8012260 <tcp_fasttmr+0xbc>)
 80121b4:	701a      	strb	r2, [r3, #0]

tcp_fasttmr_start:
  pcb = tcp_active_pcbs;
 80121b6:	4b2b      	ldr	r3, [pc, #172]	; (8012264 <tcp_fasttmr+0xc0>)
 80121b8:	681b      	ldr	r3, [r3, #0]
 80121ba:	607b      	str	r3, [r7, #4]

  while (pcb != NULL) {
 80121bc:	e048      	b.n	8012250 <tcp_fasttmr+0xac>
    if (pcb->last_timer != tcp_timer_ctr) {
 80121be:	687b      	ldr	r3, [r7, #4]
 80121c0:	7f9a      	ldrb	r2, [r3, #30]
 80121c2:	4b27      	ldr	r3, [pc, #156]	; (8012260 <tcp_fasttmr+0xbc>)
 80121c4:	781b      	ldrb	r3, [r3, #0]
 80121c6:	429a      	cmp	r2, r3
 80121c8:	d03f      	beq.n	801224a <tcp_fasttmr+0xa6>
      struct tcp_pcb *next;
      pcb->last_timer = tcp_timer_ctr;
 80121ca:	4b25      	ldr	r3, [pc, #148]	; (8012260 <tcp_fasttmr+0xbc>)
 80121cc:	781a      	ldrb	r2, [r3, #0]
 80121ce:	687b      	ldr	r3, [r7, #4]
 80121d0:	779a      	strb	r2, [r3, #30]
      /* send delayed ACKs */
      if (pcb->flags & TF_ACK_DELAY) {
 80121d2:	687b      	ldr	r3, [r7, #4]
 80121d4:	8b5b      	ldrh	r3, [r3, #26]
 80121d6:	f003 0301 	and.w	r3, r3, #1
 80121da:	2b00      	cmp	r3, #0
 80121dc:	d010      	beq.n	8012200 <tcp_fasttmr+0x5c>
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_fasttmr: delayed ACK\n"));
        tcp_ack_now(pcb);
 80121de:	687b      	ldr	r3, [r7, #4]
 80121e0:	8b5b      	ldrh	r3, [r3, #26]
 80121e2:	f043 0302 	orr.w	r3, r3, #2
 80121e6:	b29a      	uxth	r2, r3
 80121e8:	687b      	ldr	r3, [r7, #4]
 80121ea:	835a      	strh	r2, [r3, #26]
        tcp_output(pcb);
 80121ec:	6878      	ldr	r0, [r7, #4]
 80121ee:	f003 fad1 	bl	8015794 <tcp_output>
        tcp_clear_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 80121f2:	687b      	ldr	r3, [r7, #4]
 80121f4:	8b5b      	ldrh	r3, [r3, #26]
 80121f6:	f023 0303 	bic.w	r3, r3, #3
 80121fa:	b29a      	uxth	r2, r3
 80121fc:	687b      	ldr	r3, [r7, #4]
 80121fe:	835a      	strh	r2, [r3, #26]
      }
      /* send pending FIN */
      if (pcb->flags & TF_CLOSEPEND) {
 8012200:	687b      	ldr	r3, [r7, #4]
 8012202:	8b5b      	ldrh	r3, [r3, #26]
 8012204:	f003 0308 	and.w	r3, r3, #8
 8012208:	2b00      	cmp	r3, #0
 801220a:	d009      	beq.n	8012220 <tcp_fasttmr+0x7c>
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_fasttmr: pending FIN\n"));
        tcp_clear_flags(pcb, TF_CLOSEPEND);
 801220c:	687b      	ldr	r3, [r7, #4]
 801220e:	8b5b      	ldrh	r3, [r3, #26]
 8012210:	f023 0308 	bic.w	r3, r3, #8
 8012214:	b29a      	uxth	r2, r3
 8012216:	687b      	ldr	r3, [r7, #4]
 8012218:	835a      	strh	r2, [r3, #26]
        tcp_close_shutdown_fin(pcb);
 801221a:	6878      	ldr	r0, [r7, #4]
 801221c:	f7ff fa76 	bl	801170c <tcp_close_shutdown_fin>
      }

      next = pcb->next;
 8012220:	687b      	ldr	r3, [r7, #4]
 8012222:	68db      	ldr	r3, [r3, #12]
 8012224:	603b      	str	r3, [r7, #0]

      /* If there is data which was previously "refused" by upper layer */
      if (pcb->refused_data != NULL) {
 8012226:	687b      	ldr	r3, [r7, #4]
 8012228:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 801222a:	2b00      	cmp	r3, #0
 801222c:	d00a      	beq.n	8012244 <tcp_fasttmr+0xa0>
        tcp_active_pcbs_changed = 0;
 801222e:	4b0e      	ldr	r3, [pc, #56]	; (8012268 <tcp_fasttmr+0xc4>)
 8012230:	2200      	movs	r2, #0
 8012232:	701a      	strb	r2, [r3, #0]
        tcp_process_refused_data(pcb);
 8012234:	6878      	ldr	r0, [r7, #4]
 8012236:	f000 f819 	bl	801226c <tcp_process_refused_data>
        if (tcp_active_pcbs_changed) {
 801223a:	4b0b      	ldr	r3, [pc, #44]	; (8012268 <tcp_fasttmr+0xc4>)
 801223c:	781b      	ldrb	r3, [r3, #0]
 801223e:	2b00      	cmp	r3, #0
 8012240:	d000      	beq.n	8012244 <tcp_fasttmr+0xa0>
          /* application callback has changed the pcb list: restart the loop */
          goto tcp_fasttmr_start;
 8012242:	e7b8      	b.n	80121b6 <tcp_fasttmr+0x12>
        }
      }
      pcb = next;
 8012244:	683b      	ldr	r3, [r7, #0]
 8012246:	607b      	str	r3, [r7, #4]
 8012248:	e002      	b.n	8012250 <tcp_fasttmr+0xac>
    } else {
      pcb = pcb->next;
 801224a:	687b      	ldr	r3, [r7, #4]
 801224c:	68db      	ldr	r3, [r3, #12]
 801224e:	607b      	str	r3, [r7, #4]
  while (pcb != NULL) {
 8012250:	687b      	ldr	r3, [r7, #4]
 8012252:	2b00      	cmp	r3, #0
 8012254:	d1b3      	bne.n	80121be <tcp_fasttmr+0x1a>
    }
  }
}
 8012256:	bf00      	nop
 8012258:	bf00      	nop
 801225a:	3708      	adds	r7, #8
 801225c:	46bd      	mov	sp, r7
 801225e:	bd80      	pop	{r7, pc}
 8012260:	200070ee 	.word	0x200070ee
 8012264:	200070e4 	.word	0x200070e4
 8012268:	200070ec 	.word	0x200070ec

0801226c <tcp_process_refused_data>:
}

/** Pass pcb->refused_data to the recv callback */
err_t
tcp_process_refused_data(struct tcp_pcb *pcb)
{
 801226c:	b590      	push	{r4, r7, lr}
 801226e:	b085      	sub	sp, #20
 8012270:	af00      	add	r7, sp, #0
 8012272:	6078      	str	r0, [r7, #4]
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
  struct pbuf *rest;
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */

  LWIP_ERROR("tcp_process_refused_data: invalid pcb", pcb != NULL, return ERR_ARG);
 8012274:	687b      	ldr	r3, [r7, #4]
 8012276:	2b00      	cmp	r3, #0
 8012278:	d109      	bne.n	801228e <tcp_process_refused_data+0x22>
 801227a:	4b38      	ldr	r3, [pc, #224]	; (801235c <tcp_process_refused_data+0xf0>)
 801227c:	f240 6209 	movw	r2, #1545	; 0x609
 8012280:	4937      	ldr	r1, [pc, #220]	; (8012360 <tcp_process_refused_data+0xf4>)
 8012282:	4838      	ldr	r0, [pc, #224]	; (8012364 <tcp_process_refused_data+0xf8>)
 8012284:	f007 fce4 	bl	8019c50 <iprintf>
 8012288:	f06f 030f 	mvn.w	r3, #15
 801228c:	e061      	b.n	8012352 <tcp_process_refused_data+0xe6>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
  while (pcb->refused_data != NULL)
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
  {
    err_t err;
    u8_t refused_flags = pcb->refused_data->flags;
 801228e:	687b      	ldr	r3, [r7, #4]
 8012290:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8012292:	7b5b      	ldrb	r3, [r3, #13]
 8012294:	73bb      	strb	r3, [r7, #14]
    /* set pcb->refused_data to NULL in case the callback frees it and then
       closes the pcb */
    struct pbuf *refused_data = pcb->refused_data;
 8012296:	687b      	ldr	r3, [r7, #4]
 8012298:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 801229a:	60bb      	str	r3, [r7, #8]
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
    pbuf_split_64k(refused_data, &rest);
    pcb->refused_data = rest;
#else /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
    pcb->refused_data = NULL;
 801229c:	687b      	ldr	r3, [r7, #4]
 801229e:	2200      	movs	r2, #0
 80122a0:	679a      	str	r2, [r3, #120]	; 0x78
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
    /* Notify again application with data previously received. */
    LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_input: notify kept packet\n"));
    TCP_EVENT_RECV(pcb, refused_data, ERR_OK, err);
 80122a2:	687b      	ldr	r3, [r7, #4]
 80122a4:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80122a8:	2b00      	cmp	r3, #0
 80122aa:	d00b      	beq.n	80122c4 <tcp_process_refused_data+0x58>
 80122ac:	687b      	ldr	r3, [r7, #4]
 80122ae:	f8d3 4084 	ldr.w	r4, [r3, #132]	; 0x84
 80122b2:	687b      	ldr	r3, [r7, #4]
 80122b4:	6918      	ldr	r0, [r3, #16]
 80122b6:	2300      	movs	r3, #0
 80122b8:	68ba      	ldr	r2, [r7, #8]
 80122ba:	6879      	ldr	r1, [r7, #4]
 80122bc:	47a0      	blx	r4
 80122be:	4603      	mov	r3, r0
 80122c0:	73fb      	strb	r3, [r7, #15]
 80122c2:	e007      	b.n	80122d4 <tcp_process_refused_data+0x68>
 80122c4:	2300      	movs	r3, #0
 80122c6:	68ba      	ldr	r2, [r7, #8]
 80122c8:	6879      	ldr	r1, [r7, #4]
 80122ca:	2000      	movs	r0, #0
 80122cc:	f000 f8a6 	bl	801241c <tcp_recv_null>
 80122d0:	4603      	mov	r3, r0
 80122d2:	73fb      	strb	r3, [r7, #15]
    if (err == ERR_OK) {
 80122d4:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80122d8:	2b00      	cmp	r3, #0
 80122da:	d12b      	bne.n	8012334 <tcp_process_refused_data+0xc8>
      /* did refused_data include a FIN? */
      if ((refused_flags & PBUF_FLAG_TCP_FIN)
 80122dc:	7bbb      	ldrb	r3, [r7, #14]
 80122de:	f003 0320 	and.w	r3, r3, #32
 80122e2:	2b00      	cmp	r3, #0
 80122e4:	d034      	beq.n	8012350 <tcp_process_refused_data+0xe4>
          && (rest == NULL)
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
         ) {
        /* correct rcv_wnd as the application won't call tcp_recved()
           for the FIN's seqno */
        if (pcb->rcv_wnd != TCP_WND_MAX(pcb)) {
 80122e6:	687b      	ldr	r3, [r7, #4]
 80122e8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80122ea:	f241 62d0 	movw	r2, #5840	; 0x16d0
 80122ee:	4293      	cmp	r3, r2
 80122f0:	d005      	beq.n	80122fe <tcp_process_refused_data+0x92>
          pcb->rcv_wnd++;
 80122f2:	687b      	ldr	r3, [r7, #4]
 80122f4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80122f6:	3301      	adds	r3, #1
 80122f8:	b29a      	uxth	r2, r3
 80122fa:	687b      	ldr	r3, [r7, #4]
 80122fc:	851a      	strh	r2, [r3, #40]	; 0x28
        }
        TCP_EVENT_CLOSED(pcb, err);
 80122fe:	687b      	ldr	r3, [r7, #4]
 8012300:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8012304:	2b00      	cmp	r3, #0
 8012306:	d00b      	beq.n	8012320 <tcp_process_refused_data+0xb4>
 8012308:	687b      	ldr	r3, [r7, #4]
 801230a:	f8d3 4084 	ldr.w	r4, [r3, #132]	; 0x84
 801230e:	687b      	ldr	r3, [r7, #4]
 8012310:	6918      	ldr	r0, [r3, #16]
 8012312:	2300      	movs	r3, #0
 8012314:	2200      	movs	r2, #0
 8012316:	6879      	ldr	r1, [r7, #4]
 8012318:	47a0      	blx	r4
 801231a:	4603      	mov	r3, r0
 801231c:	73fb      	strb	r3, [r7, #15]
 801231e:	e001      	b.n	8012324 <tcp_process_refused_data+0xb8>
 8012320:	2300      	movs	r3, #0
 8012322:	73fb      	strb	r3, [r7, #15]
        if (err == ERR_ABRT) {
 8012324:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8012328:	f113 0f0d 	cmn.w	r3, #13
 801232c:	d110      	bne.n	8012350 <tcp_process_refused_data+0xe4>
          return ERR_ABRT;
 801232e:	f06f 030c 	mvn.w	r3, #12
 8012332:	e00e      	b.n	8012352 <tcp_process_refused_data+0xe6>
        }
      }
    } else if (err == ERR_ABRT) {
 8012334:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8012338:	f113 0f0d 	cmn.w	r3, #13
 801233c:	d102      	bne.n	8012344 <tcp_process_refused_data+0xd8>
      /* if err == ERR_ABRT, 'pcb' is already deallocated */
      /* Drop incoming packets because pcb is "full" (only if the incoming
         segment contains data). */
      LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_input: drop incoming packets, because pcb is \"full\"\n"));
      return ERR_ABRT;
 801233e:	f06f 030c 	mvn.w	r3, #12
 8012342:	e006      	b.n	8012352 <tcp_process_refused_data+0xe6>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
      if (rest != NULL) {
        pbuf_cat(refused_data, rest);
      }
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
      pcb->refused_data = refused_data;
 8012344:	687b      	ldr	r3, [r7, #4]
 8012346:	68ba      	ldr	r2, [r7, #8]
 8012348:	679a      	str	r2, [r3, #120]	; 0x78
      return ERR_INPROGRESS;
 801234a:	f06f 0304 	mvn.w	r3, #4
 801234e:	e000      	b.n	8012352 <tcp_process_refused_data+0xe6>
    }
  }
  return ERR_OK;
 8012350:	2300      	movs	r3, #0
}
 8012352:	4618      	mov	r0, r3
 8012354:	3714      	adds	r7, #20
 8012356:	46bd      	mov	sp, r7
 8012358:	bd90      	pop	{r4, r7, pc}
 801235a:	bf00      	nop
 801235c:	0801d014 	.word	0x0801d014
 8012360:	0801d524 	.word	0x0801d524
 8012364:	0801d058 	.word	0x0801d058

08012368 <tcp_segs_free>:
 *
 * @param seg tcp_seg list of TCP segments to free
 */
void
tcp_segs_free(struct tcp_seg *seg)
{
 8012368:	b580      	push	{r7, lr}
 801236a:	b084      	sub	sp, #16
 801236c:	af00      	add	r7, sp, #0
 801236e:	6078      	str	r0, [r7, #4]
  while (seg != NULL) {
 8012370:	e007      	b.n	8012382 <tcp_segs_free+0x1a>
    struct tcp_seg *next = seg->next;
 8012372:	687b      	ldr	r3, [r7, #4]
 8012374:	681b      	ldr	r3, [r3, #0]
 8012376:	60fb      	str	r3, [r7, #12]
    tcp_seg_free(seg);
 8012378:	6878      	ldr	r0, [r7, #4]
 801237a:	f000 f80a 	bl	8012392 <tcp_seg_free>
    seg = next;
 801237e:	68fb      	ldr	r3, [r7, #12]
 8012380:	607b      	str	r3, [r7, #4]
  while (seg != NULL) {
 8012382:	687b      	ldr	r3, [r7, #4]
 8012384:	2b00      	cmp	r3, #0
 8012386:	d1f4      	bne.n	8012372 <tcp_segs_free+0xa>
  }
}
 8012388:	bf00      	nop
 801238a:	bf00      	nop
 801238c:	3710      	adds	r7, #16
 801238e:	46bd      	mov	sp, r7
 8012390:	bd80      	pop	{r7, pc}

08012392 <tcp_seg_free>:
 *
 * @param seg single tcp_seg to free
 */
void
tcp_seg_free(struct tcp_seg *seg)
{
 8012392:	b580      	push	{r7, lr}
 8012394:	b082      	sub	sp, #8
 8012396:	af00      	add	r7, sp, #0
 8012398:	6078      	str	r0, [r7, #4]
  if (seg != NULL) {
 801239a:	687b      	ldr	r3, [r7, #4]
 801239c:	2b00      	cmp	r3, #0
 801239e:	d00c      	beq.n	80123ba <tcp_seg_free+0x28>
    if (seg->p != NULL) {
 80123a0:	687b      	ldr	r3, [r7, #4]
 80123a2:	685b      	ldr	r3, [r3, #4]
 80123a4:	2b00      	cmp	r3, #0
 80123a6:	d004      	beq.n	80123b2 <tcp_seg_free+0x20>
      pbuf_free(seg->p);
 80123a8:	687b      	ldr	r3, [r7, #4]
 80123aa:	685b      	ldr	r3, [r3, #4]
 80123ac:	4618      	mov	r0, r3
 80123ae:	f7fe fd79 	bl	8010ea4 <pbuf_free>
#if TCP_DEBUG
      seg->p = NULL;
#endif /* TCP_DEBUG */
    }
    memp_free(MEMP_TCP_SEG, seg);
 80123b2:	6879      	ldr	r1, [r7, #4]
 80123b4:	2003      	movs	r0, #3
 80123b6:	f7fd ff1f 	bl	80101f8 <memp_free>
  }
}
 80123ba:	bf00      	nop
 80123bc:	3708      	adds	r7, #8
 80123be:	46bd      	mov	sp, r7
 80123c0:	bd80      	pop	{r7, pc}
	...

080123c4 <tcp_seg_copy>:
 * @param seg the old tcp_seg
 * @return a copy of seg
 */
struct tcp_seg *
tcp_seg_copy(struct tcp_seg *seg)
{
 80123c4:	b580      	push	{r7, lr}
 80123c6:	b084      	sub	sp, #16
 80123c8:	af00      	add	r7, sp, #0
 80123ca:	6078      	str	r0, [r7, #4]
  struct tcp_seg *cseg;

  LWIP_ASSERT("tcp_seg_copy: invalid seg", seg != NULL);
 80123cc:	687b      	ldr	r3, [r7, #4]
 80123ce:	2b00      	cmp	r3, #0
 80123d0:	d106      	bne.n	80123e0 <tcp_seg_copy+0x1c>
 80123d2:	4b0f      	ldr	r3, [pc, #60]	; (8012410 <tcp_seg_copy+0x4c>)
 80123d4:	f240 6282 	movw	r2, #1666	; 0x682
 80123d8:	490e      	ldr	r1, [pc, #56]	; (8012414 <tcp_seg_copy+0x50>)
 80123da:	480f      	ldr	r0, [pc, #60]	; (8012418 <tcp_seg_copy+0x54>)
 80123dc:	f007 fc38 	bl	8019c50 <iprintf>

  cseg = (struct tcp_seg *)memp_malloc(MEMP_TCP_SEG);
 80123e0:	2003      	movs	r0, #3
 80123e2:	f7fd fe99 	bl	8010118 <memp_malloc>
 80123e6:	60f8      	str	r0, [r7, #12]
  if (cseg == NULL) {
 80123e8:	68fb      	ldr	r3, [r7, #12]
 80123ea:	2b00      	cmp	r3, #0
 80123ec:	d101      	bne.n	80123f2 <tcp_seg_copy+0x2e>
    return NULL;
 80123ee:	2300      	movs	r3, #0
 80123f0:	e00a      	b.n	8012408 <tcp_seg_copy+0x44>
  }
  SMEMCPY((u8_t *)cseg, (const u8_t *)seg, sizeof(struct tcp_seg));
 80123f2:	2210      	movs	r2, #16
 80123f4:	6879      	ldr	r1, [r7, #4]
 80123f6:	68f8      	ldr	r0, [r7, #12]
 80123f8:	f007 fdf9 	bl	8019fee <memcpy>
  pbuf_ref(cseg->p);
 80123fc:	68fb      	ldr	r3, [r7, #12]
 80123fe:	685b      	ldr	r3, [r3, #4]
 8012400:	4618      	mov	r0, r3
 8012402:	f7fe fdef 	bl	8010fe4 <pbuf_ref>
  return cseg;
 8012406:	68fb      	ldr	r3, [r7, #12]
}
 8012408:	4618      	mov	r0, r3
 801240a:	3710      	adds	r7, #16
 801240c:	46bd      	mov	sp, r7
 801240e:	bd80      	pop	{r7, pc}
 8012410:	0801d014 	.word	0x0801d014
 8012414:	0801d568 	.word	0x0801d568
 8012418:	0801d058 	.word	0x0801d058

0801241c <tcp_recv_null>:
 * Default receive callback that is called if the user didn't register
 * a recv callback for the pcb.
 */
err_t
tcp_recv_null(void *arg, struct tcp_pcb *pcb, struct pbuf *p, err_t err)
{
 801241c:	b580      	push	{r7, lr}
 801241e:	b084      	sub	sp, #16
 8012420:	af00      	add	r7, sp, #0
 8012422:	60f8      	str	r0, [r7, #12]
 8012424:	60b9      	str	r1, [r7, #8]
 8012426:	607a      	str	r2, [r7, #4]
 8012428:	70fb      	strb	r3, [r7, #3]
  LWIP_UNUSED_ARG(arg);

  LWIP_ERROR("tcp_recv_null: invalid pcb", pcb != NULL, return ERR_ARG);
 801242a:	68bb      	ldr	r3, [r7, #8]
 801242c:	2b00      	cmp	r3, #0
 801242e:	d109      	bne.n	8012444 <tcp_recv_null+0x28>
 8012430:	4b12      	ldr	r3, [pc, #72]	; (801247c <tcp_recv_null+0x60>)
 8012432:	f44f 62d3 	mov.w	r2, #1688	; 0x698
 8012436:	4912      	ldr	r1, [pc, #72]	; (8012480 <tcp_recv_null+0x64>)
 8012438:	4812      	ldr	r0, [pc, #72]	; (8012484 <tcp_recv_null+0x68>)
 801243a:	f007 fc09 	bl	8019c50 <iprintf>
 801243e:	f06f 030f 	mvn.w	r3, #15
 8012442:	e016      	b.n	8012472 <tcp_recv_null+0x56>

  if (p != NULL) {
 8012444:	687b      	ldr	r3, [r7, #4]
 8012446:	2b00      	cmp	r3, #0
 8012448:	d009      	beq.n	801245e <tcp_recv_null+0x42>
    tcp_recved(pcb, p->tot_len);
 801244a:	687b      	ldr	r3, [r7, #4]
 801244c:	891b      	ldrh	r3, [r3, #8]
 801244e:	4619      	mov	r1, r3
 8012450:	68b8      	ldr	r0, [r7, #8]
 8012452:	f7ff fb15 	bl	8011a80 <tcp_recved>
    pbuf_free(p);
 8012456:	6878      	ldr	r0, [r7, #4]
 8012458:	f7fe fd24 	bl	8010ea4 <pbuf_free>
 801245c:	e008      	b.n	8012470 <tcp_recv_null+0x54>
  } else if (err == ERR_OK) {
 801245e:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8012462:	2b00      	cmp	r3, #0
 8012464:	d104      	bne.n	8012470 <tcp_recv_null+0x54>
    return tcp_close(pcb);
 8012466:	68b8      	ldr	r0, [r7, #8]
 8012468:	f7ff f9ba 	bl	80117e0 <tcp_close>
 801246c:	4603      	mov	r3, r0
 801246e:	e000      	b.n	8012472 <tcp_recv_null+0x56>
  }
  return ERR_OK;
 8012470:	2300      	movs	r3, #0
}
 8012472:	4618      	mov	r0, r3
 8012474:	3710      	adds	r7, #16
 8012476:	46bd      	mov	sp, r7
 8012478:	bd80      	pop	{r7, pc}
 801247a:	bf00      	nop
 801247c:	0801d014 	.word	0x0801d014
 8012480:	0801d584 	.word	0x0801d584
 8012484:	0801d058 	.word	0x0801d058

08012488 <tcp_kill_prio>:
 *
 * @param prio minimum priority
 */
static void
tcp_kill_prio(u8_t prio)
{
 8012488:	b580      	push	{r7, lr}
 801248a:	b086      	sub	sp, #24
 801248c:	af00      	add	r7, sp, #0
 801248e:	4603      	mov	r3, r0
 8012490:	71fb      	strb	r3, [r7, #7]
  struct tcp_pcb *pcb, *inactive;
  u32_t inactivity;
  u8_t mprio;

  mprio = LWIP_MIN(TCP_PRIO_MAX, prio);
 8012492:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8012496:	2b00      	cmp	r3, #0
 8012498:	db01      	blt.n	801249e <tcp_kill_prio+0x16>
 801249a:	79fb      	ldrb	r3, [r7, #7]
 801249c:	e000      	b.n	80124a0 <tcp_kill_prio+0x18>
 801249e:	237f      	movs	r3, #127	; 0x7f
 80124a0:	72fb      	strb	r3, [r7, #11]

  /* We want to kill connections with a lower prio, so bail out if 
   * supplied prio is 0 - there can never be a lower prio
   */
  if (mprio == 0) {
 80124a2:	7afb      	ldrb	r3, [r7, #11]
 80124a4:	2b00      	cmp	r3, #0
 80124a6:	d034      	beq.n	8012512 <tcp_kill_prio+0x8a>
  /* We only want kill connections with a lower prio, so decrement prio by one 
   * and start searching for oldest connection with same or lower priority than mprio.
   * We want to find the connections with the lowest possible prio, and among
   * these the one with the longest inactivity time.
   */
  mprio--;
 80124a8:	7afb      	ldrb	r3, [r7, #11]
 80124aa:	3b01      	subs	r3, #1
 80124ac:	72fb      	strb	r3, [r7, #11]

  inactivity = 0;
 80124ae:	2300      	movs	r3, #0
 80124b0:	60fb      	str	r3, [r7, #12]
  inactive = NULL;
 80124b2:	2300      	movs	r3, #0
 80124b4:	613b      	str	r3, [r7, #16]
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 80124b6:	4b19      	ldr	r3, [pc, #100]	; (801251c <tcp_kill_prio+0x94>)
 80124b8:	681b      	ldr	r3, [r3, #0]
 80124ba:	617b      	str	r3, [r7, #20]
 80124bc:	e01f      	b.n	80124fe <tcp_kill_prio+0x76>
        /* lower prio is always a kill candidate */
    if ((pcb->prio < mprio) ||
 80124be:	697b      	ldr	r3, [r7, #20]
 80124c0:	7d5b      	ldrb	r3, [r3, #21]
 80124c2:	7afa      	ldrb	r2, [r7, #11]
 80124c4:	429a      	cmp	r2, r3
 80124c6:	d80c      	bhi.n	80124e2 <tcp_kill_prio+0x5a>
        /* longer inactivity is also a kill candidate */
        ((pcb->prio == mprio) && ((u32_t)(tcp_ticks - pcb->tmr) >= inactivity))) {
 80124c8:	697b      	ldr	r3, [r7, #20]
 80124ca:	7d5b      	ldrb	r3, [r3, #21]
    if ((pcb->prio < mprio) ||
 80124cc:	7afa      	ldrb	r2, [r7, #11]
 80124ce:	429a      	cmp	r2, r3
 80124d0:	d112      	bne.n	80124f8 <tcp_kill_prio+0x70>
        ((pcb->prio == mprio) && ((u32_t)(tcp_ticks - pcb->tmr) >= inactivity))) {
 80124d2:	4b13      	ldr	r3, [pc, #76]	; (8012520 <tcp_kill_prio+0x98>)
 80124d4:	681a      	ldr	r2, [r3, #0]
 80124d6:	697b      	ldr	r3, [r7, #20]
 80124d8:	6a1b      	ldr	r3, [r3, #32]
 80124da:	1ad3      	subs	r3, r2, r3
 80124dc:	68fa      	ldr	r2, [r7, #12]
 80124de:	429a      	cmp	r2, r3
 80124e0:	d80a      	bhi.n	80124f8 <tcp_kill_prio+0x70>
      inactivity = tcp_ticks - pcb->tmr;
 80124e2:	4b0f      	ldr	r3, [pc, #60]	; (8012520 <tcp_kill_prio+0x98>)
 80124e4:	681a      	ldr	r2, [r3, #0]
 80124e6:	697b      	ldr	r3, [r7, #20]
 80124e8:	6a1b      	ldr	r3, [r3, #32]
 80124ea:	1ad3      	subs	r3, r2, r3
 80124ec:	60fb      	str	r3, [r7, #12]
      inactive   = pcb;
 80124ee:	697b      	ldr	r3, [r7, #20]
 80124f0:	613b      	str	r3, [r7, #16]
      mprio      = pcb->prio;
 80124f2:	697b      	ldr	r3, [r7, #20]
 80124f4:	7d5b      	ldrb	r3, [r3, #21]
 80124f6:	72fb      	strb	r3, [r7, #11]
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 80124f8:	697b      	ldr	r3, [r7, #20]
 80124fa:	68db      	ldr	r3, [r3, #12]
 80124fc:	617b      	str	r3, [r7, #20]
 80124fe:	697b      	ldr	r3, [r7, #20]
 8012500:	2b00      	cmp	r3, #0
 8012502:	d1dc      	bne.n	80124be <tcp_kill_prio+0x36>
    }
  }
  if (inactive != NULL) {
 8012504:	693b      	ldr	r3, [r7, #16]
 8012506:	2b00      	cmp	r3, #0
 8012508:	d004      	beq.n	8012514 <tcp_kill_prio+0x8c>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_kill_prio: killing oldest PCB %p (%"S32_F")\n",
                            (void *)inactive, inactivity));
    tcp_abort(inactive);
 801250a:	6938      	ldr	r0, [r7, #16]
 801250c:	f7ff fa52 	bl	80119b4 <tcp_abort>
 8012510:	e000      	b.n	8012514 <tcp_kill_prio+0x8c>
    return;
 8012512:	bf00      	nop
  }
}
 8012514:	3718      	adds	r7, #24
 8012516:	46bd      	mov	sp, r7
 8012518:	bd80      	pop	{r7, pc}
 801251a:	bf00      	nop
 801251c:	200070e4 	.word	0x200070e4
 8012520:	200070d8 	.word	0x200070d8

08012524 <tcp_kill_state>:
 * Kills the oldest connection that is in specific state.
 * Called from tcp_alloc() for LAST_ACK and CLOSING if no more connections are available.
 */
static void
tcp_kill_state(enum tcp_state state)
{
 8012524:	b580      	push	{r7, lr}
 8012526:	b086      	sub	sp, #24
 8012528:	af00      	add	r7, sp, #0
 801252a:	4603      	mov	r3, r0
 801252c:	71fb      	strb	r3, [r7, #7]
  struct tcp_pcb *pcb, *inactive;
  u32_t inactivity;

  LWIP_ASSERT("invalid state", (state == CLOSING) || (state == LAST_ACK));
 801252e:	79fb      	ldrb	r3, [r7, #7]
 8012530:	2b08      	cmp	r3, #8
 8012532:	d009      	beq.n	8012548 <tcp_kill_state+0x24>
 8012534:	79fb      	ldrb	r3, [r7, #7]
 8012536:	2b09      	cmp	r3, #9
 8012538:	d006      	beq.n	8012548 <tcp_kill_state+0x24>
 801253a:	4b1a      	ldr	r3, [pc, #104]	; (80125a4 <tcp_kill_state+0x80>)
 801253c:	f240 62dd 	movw	r2, #1757	; 0x6dd
 8012540:	4919      	ldr	r1, [pc, #100]	; (80125a8 <tcp_kill_state+0x84>)
 8012542:	481a      	ldr	r0, [pc, #104]	; (80125ac <tcp_kill_state+0x88>)
 8012544:	f007 fb84 	bl	8019c50 <iprintf>

  inactivity = 0;
 8012548:	2300      	movs	r3, #0
 801254a:	60fb      	str	r3, [r7, #12]
  inactive = NULL;
 801254c:	2300      	movs	r3, #0
 801254e:	613b      	str	r3, [r7, #16]
  /* Go through the list of active pcbs and get the oldest pcb that is in state
     CLOSING/LAST_ACK. */
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 8012550:	4b17      	ldr	r3, [pc, #92]	; (80125b0 <tcp_kill_state+0x8c>)
 8012552:	681b      	ldr	r3, [r3, #0]
 8012554:	617b      	str	r3, [r7, #20]
 8012556:	e017      	b.n	8012588 <tcp_kill_state+0x64>
    if (pcb->state == state) {
 8012558:	697b      	ldr	r3, [r7, #20]
 801255a:	7d1b      	ldrb	r3, [r3, #20]
 801255c:	79fa      	ldrb	r2, [r7, #7]
 801255e:	429a      	cmp	r2, r3
 8012560:	d10f      	bne.n	8012582 <tcp_kill_state+0x5e>
      if ((u32_t)(tcp_ticks - pcb->tmr) >= inactivity) {
 8012562:	4b14      	ldr	r3, [pc, #80]	; (80125b4 <tcp_kill_state+0x90>)
 8012564:	681a      	ldr	r2, [r3, #0]
 8012566:	697b      	ldr	r3, [r7, #20]
 8012568:	6a1b      	ldr	r3, [r3, #32]
 801256a:	1ad3      	subs	r3, r2, r3
 801256c:	68fa      	ldr	r2, [r7, #12]
 801256e:	429a      	cmp	r2, r3
 8012570:	d807      	bhi.n	8012582 <tcp_kill_state+0x5e>
        inactivity = tcp_ticks - pcb->tmr;
 8012572:	4b10      	ldr	r3, [pc, #64]	; (80125b4 <tcp_kill_state+0x90>)
 8012574:	681a      	ldr	r2, [r3, #0]
 8012576:	697b      	ldr	r3, [r7, #20]
 8012578:	6a1b      	ldr	r3, [r3, #32]
 801257a:	1ad3      	subs	r3, r2, r3
 801257c:	60fb      	str	r3, [r7, #12]
        inactive = pcb;
 801257e:	697b      	ldr	r3, [r7, #20]
 8012580:	613b      	str	r3, [r7, #16]
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 8012582:	697b      	ldr	r3, [r7, #20]
 8012584:	68db      	ldr	r3, [r3, #12]
 8012586:	617b      	str	r3, [r7, #20]
 8012588:	697b      	ldr	r3, [r7, #20]
 801258a:	2b00      	cmp	r3, #0
 801258c:	d1e4      	bne.n	8012558 <tcp_kill_state+0x34>
      }
    }
  }
  if (inactive != NULL) {
 801258e:	693b      	ldr	r3, [r7, #16]
 8012590:	2b00      	cmp	r3, #0
 8012592:	d003      	beq.n	801259c <tcp_kill_state+0x78>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_kill_closing: killing oldest %s PCB %p (%"S32_F")\n",
                            tcp_state_str[state], (void *)inactive, inactivity));
    /* Don't send a RST, since no data is lost. */
    tcp_abandon(inactive, 0);
 8012594:	2100      	movs	r1, #0
 8012596:	6938      	ldr	r0, [r7, #16]
 8012598:	f7ff f94e 	bl	8011838 <tcp_abandon>
  }
}
 801259c:	bf00      	nop
 801259e:	3718      	adds	r7, #24
 80125a0:	46bd      	mov	sp, r7
 80125a2:	bd80      	pop	{r7, pc}
 80125a4:	0801d014 	.word	0x0801d014
 80125a8:	0801d5a0 	.word	0x0801d5a0
 80125ac:	0801d058 	.word	0x0801d058
 80125b0:	200070e4 	.word	0x200070e4
 80125b4:	200070d8 	.word	0x200070d8

080125b8 <tcp_kill_timewait>:
 * Kills the oldest connection that is in TIME_WAIT state.
 * Called from tcp_alloc() if no more connections are available.
 */
static void
tcp_kill_timewait(void)
{
 80125b8:	b580      	push	{r7, lr}
 80125ba:	b084      	sub	sp, #16
 80125bc:	af00      	add	r7, sp, #0
  struct tcp_pcb *pcb, *inactive;
  u32_t inactivity;

  inactivity = 0;
 80125be:	2300      	movs	r3, #0
 80125c0:	607b      	str	r3, [r7, #4]
  inactive = NULL;
 80125c2:	2300      	movs	r3, #0
 80125c4:	60bb      	str	r3, [r7, #8]
  /* Go through the list of TIME_WAIT pcbs and get the oldest pcb. */
  for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 80125c6:	4b12      	ldr	r3, [pc, #72]	; (8012610 <tcp_kill_timewait+0x58>)
 80125c8:	681b      	ldr	r3, [r3, #0]
 80125ca:	60fb      	str	r3, [r7, #12]
 80125cc:	e012      	b.n	80125f4 <tcp_kill_timewait+0x3c>
    if ((u32_t)(tcp_ticks - pcb->tmr) >= inactivity) {
 80125ce:	4b11      	ldr	r3, [pc, #68]	; (8012614 <tcp_kill_timewait+0x5c>)
 80125d0:	681a      	ldr	r2, [r3, #0]
 80125d2:	68fb      	ldr	r3, [r7, #12]
 80125d4:	6a1b      	ldr	r3, [r3, #32]
 80125d6:	1ad3      	subs	r3, r2, r3
 80125d8:	687a      	ldr	r2, [r7, #4]
 80125da:	429a      	cmp	r2, r3
 80125dc:	d807      	bhi.n	80125ee <tcp_kill_timewait+0x36>
      inactivity = tcp_ticks - pcb->tmr;
 80125de:	4b0d      	ldr	r3, [pc, #52]	; (8012614 <tcp_kill_timewait+0x5c>)
 80125e0:	681a      	ldr	r2, [r3, #0]
 80125e2:	68fb      	ldr	r3, [r7, #12]
 80125e4:	6a1b      	ldr	r3, [r3, #32]
 80125e6:	1ad3      	subs	r3, r2, r3
 80125e8:	607b      	str	r3, [r7, #4]
      inactive = pcb;
 80125ea:	68fb      	ldr	r3, [r7, #12]
 80125ec:	60bb      	str	r3, [r7, #8]
  for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 80125ee:	68fb      	ldr	r3, [r7, #12]
 80125f0:	68db      	ldr	r3, [r3, #12]
 80125f2:	60fb      	str	r3, [r7, #12]
 80125f4:	68fb      	ldr	r3, [r7, #12]
 80125f6:	2b00      	cmp	r3, #0
 80125f8:	d1e9      	bne.n	80125ce <tcp_kill_timewait+0x16>
    }
  }
  if (inactive != NULL) {
 80125fa:	68bb      	ldr	r3, [r7, #8]
 80125fc:	2b00      	cmp	r3, #0
 80125fe:	d002      	beq.n	8012606 <tcp_kill_timewait+0x4e>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_kill_timewait: killing oldest TIME-WAIT PCB %p (%"S32_F")\n",
                            (void *)inactive, inactivity));
    tcp_abort(inactive);
 8012600:	68b8      	ldr	r0, [r7, #8]
 8012602:	f7ff f9d7 	bl	80119b4 <tcp_abort>
  }
}
 8012606:	bf00      	nop
 8012608:	3710      	adds	r7, #16
 801260a:	46bd      	mov	sp, r7
 801260c:	bd80      	pop	{r7, pc}
 801260e:	bf00      	nop
 8012610:	200070e8 	.word	0x200070e8
 8012614:	200070d8 	.word	0x200070d8

08012618 <tcp_handle_closepend>:
 * now send the FIN (which failed before), the pcb might be in a state that is
 * OK for us to now free it.
 */
static void
tcp_handle_closepend(void)
{
 8012618:	b580      	push	{r7, lr}
 801261a:	b082      	sub	sp, #8
 801261c:	af00      	add	r7, sp, #0
  struct tcp_pcb *pcb = tcp_active_pcbs;
 801261e:	4b10      	ldr	r3, [pc, #64]	; (8012660 <tcp_handle_closepend+0x48>)
 8012620:	681b      	ldr	r3, [r3, #0]
 8012622:	607b      	str	r3, [r7, #4]

  while (pcb != NULL) {
 8012624:	e014      	b.n	8012650 <tcp_handle_closepend+0x38>
    struct tcp_pcb *next = pcb->next;
 8012626:	687b      	ldr	r3, [r7, #4]
 8012628:	68db      	ldr	r3, [r3, #12]
 801262a:	603b      	str	r3, [r7, #0]
    /* send pending FIN */
    if (pcb->flags & TF_CLOSEPEND) {
 801262c:	687b      	ldr	r3, [r7, #4]
 801262e:	8b5b      	ldrh	r3, [r3, #26]
 8012630:	f003 0308 	and.w	r3, r3, #8
 8012634:	2b00      	cmp	r3, #0
 8012636:	d009      	beq.n	801264c <tcp_handle_closepend+0x34>
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_handle_closepend: pending FIN\n"));
      tcp_clear_flags(pcb, TF_CLOSEPEND);
 8012638:	687b      	ldr	r3, [r7, #4]
 801263a:	8b5b      	ldrh	r3, [r3, #26]
 801263c:	f023 0308 	bic.w	r3, r3, #8
 8012640:	b29a      	uxth	r2, r3
 8012642:	687b      	ldr	r3, [r7, #4]
 8012644:	835a      	strh	r2, [r3, #26]
      tcp_close_shutdown_fin(pcb);
 8012646:	6878      	ldr	r0, [r7, #4]
 8012648:	f7ff f860 	bl	801170c <tcp_close_shutdown_fin>
    }
    pcb = next;
 801264c:	683b      	ldr	r3, [r7, #0]
 801264e:	607b      	str	r3, [r7, #4]
  while (pcb != NULL) {
 8012650:	687b      	ldr	r3, [r7, #4]
 8012652:	2b00      	cmp	r3, #0
 8012654:	d1e7      	bne.n	8012626 <tcp_handle_closepend+0xe>
  }
}
 8012656:	bf00      	nop
 8012658:	bf00      	nop
 801265a:	3708      	adds	r7, #8
 801265c:	46bd      	mov	sp, r7
 801265e:	bd80      	pop	{r7, pc}
 8012660:	200070e4 	.word	0x200070e4

08012664 <tcp_alloc>:
 * @param prio priority for the new pcb
 * @return a new tcp_pcb that initially is in state CLOSED
 */
struct tcp_pcb *
tcp_alloc(u8_t prio)
{
 8012664:	b580      	push	{r7, lr}
 8012666:	b084      	sub	sp, #16
 8012668:	af00      	add	r7, sp, #0
 801266a:	4603      	mov	r3, r0
 801266c:	71fb      	strb	r3, [r7, #7]
  struct tcp_pcb *pcb;

  LWIP_ASSERT_CORE_LOCKED();

  pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 801266e:	2001      	movs	r0, #1
 8012670:	f7fd fd52 	bl	8010118 <memp_malloc>
 8012674:	60f8      	str	r0, [r7, #12]
  if (pcb == NULL) {
 8012676:	68fb      	ldr	r3, [r7, #12]
 8012678:	2b00      	cmp	r3, #0
 801267a:	d126      	bne.n	80126ca <tcp_alloc+0x66>
    /* Try to send FIN for all pcbs stuck in TF_CLOSEPEND first */
    tcp_handle_closepend();
 801267c:	f7ff ffcc 	bl	8012618 <tcp_handle_closepend>

    /* Try killing oldest connection in TIME-WAIT. */
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_alloc: killing off oldest TIME-WAIT connection\n"));
    tcp_kill_timewait();
 8012680:	f7ff ff9a 	bl	80125b8 <tcp_kill_timewait>
    /* Try to allocate a tcp_pcb again. */
    pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 8012684:	2001      	movs	r0, #1
 8012686:	f7fd fd47 	bl	8010118 <memp_malloc>
 801268a:	60f8      	str	r0, [r7, #12]
    if (pcb == NULL) {
 801268c:	68fb      	ldr	r3, [r7, #12]
 801268e:	2b00      	cmp	r3, #0
 8012690:	d11b      	bne.n	80126ca <tcp_alloc+0x66>
      /* Try killing oldest connection in LAST-ACK (these wouldn't go to TIME-WAIT). */
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_alloc: killing off oldest LAST-ACK connection\n"));
      tcp_kill_state(LAST_ACK);
 8012692:	2009      	movs	r0, #9
 8012694:	f7ff ff46 	bl	8012524 <tcp_kill_state>
      /* Try to allocate a tcp_pcb again. */
      pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 8012698:	2001      	movs	r0, #1
 801269a:	f7fd fd3d 	bl	8010118 <memp_malloc>
 801269e:	60f8      	str	r0, [r7, #12]
      if (pcb == NULL) {
 80126a0:	68fb      	ldr	r3, [r7, #12]
 80126a2:	2b00      	cmp	r3, #0
 80126a4:	d111      	bne.n	80126ca <tcp_alloc+0x66>
        /* Try killing oldest connection in CLOSING. */
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_alloc: killing off oldest CLOSING connection\n"));
        tcp_kill_state(CLOSING);
 80126a6:	2008      	movs	r0, #8
 80126a8:	f7ff ff3c 	bl	8012524 <tcp_kill_state>
        /* Try to allocate a tcp_pcb again. */
        pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 80126ac:	2001      	movs	r0, #1
 80126ae:	f7fd fd33 	bl	8010118 <memp_malloc>
 80126b2:	60f8      	str	r0, [r7, #12]
        if (pcb == NULL) {
 80126b4:	68fb      	ldr	r3, [r7, #12]
 80126b6:	2b00      	cmp	r3, #0
 80126b8:	d107      	bne.n	80126ca <tcp_alloc+0x66>
          /* Try killing oldest active connection with lower priority than the new one. */
          LWIP_DEBUGF(TCP_DEBUG, ("tcp_alloc: killing oldest connection with prio lower than %d\n", prio));
          tcp_kill_prio(prio);
 80126ba:	79fb      	ldrb	r3, [r7, #7]
 80126bc:	4618      	mov	r0, r3
 80126be:	f7ff fee3 	bl	8012488 <tcp_kill_prio>
          /* Try to allocate a tcp_pcb again. */
          pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 80126c2:	2001      	movs	r0, #1
 80126c4:	f7fd fd28 	bl	8010118 <memp_malloc>
 80126c8:	60f8      	str	r0, [r7, #12]
    if (pcb != NULL) {
      /* adjust err stats: memp_malloc failed above */
      MEMP_STATS_DEC(err, MEMP_TCP_PCB);
    }
  }
  if (pcb != NULL) {
 80126ca:	68fb      	ldr	r3, [r7, #12]
 80126cc:	2b00      	cmp	r3, #0
 80126ce:	d03f      	beq.n	8012750 <tcp_alloc+0xec>
    /* zero out the whole pcb, so there is no need to initialize members to zero */
    memset(pcb, 0, sizeof(struct tcp_pcb));
 80126d0:	229c      	movs	r2, #156	; 0x9c
 80126d2:	2100      	movs	r1, #0
 80126d4:	68f8      	ldr	r0, [r7, #12]
 80126d6:	f007 fc11 	bl	8019efc <memset>
    pcb->prio = prio;
 80126da:	68fb      	ldr	r3, [r7, #12]
 80126dc:	79fa      	ldrb	r2, [r7, #7]
 80126de:	755a      	strb	r2, [r3, #21]
    pcb->snd_buf = TCP_SND_BUF;
 80126e0:	68fb      	ldr	r3, [r7, #12]
 80126e2:	f241 62d0 	movw	r2, #5840	; 0x16d0
 80126e6:	f8a3 2064 	strh.w	r2, [r3, #100]	; 0x64
    /* Start with a window that does not need scaling. When window scaling is
       enabled and used, the window is enlarged when both sides agree on scaling. */
    pcb->rcv_wnd = pcb->rcv_ann_wnd = TCPWND_MIN16(TCP_WND);
 80126ea:	68fb      	ldr	r3, [r7, #12]
 80126ec:	f241 62d0 	movw	r2, #5840	; 0x16d0
 80126f0:	855a      	strh	r2, [r3, #42]	; 0x2a
 80126f2:	68fb      	ldr	r3, [r7, #12]
 80126f4:	8d5a      	ldrh	r2, [r3, #42]	; 0x2a
 80126f6:	68fb      	ldr	r3, [r7, #12]
 80126f8:	851a      	strh	r2, [r3, #40]	; 0x28
    pcb->ttl = TCP_TTL;
 80126fa:	68fb      	ldr	r3, [r7, #12]
 80126fc:	22ff      	movs	r2, #255	; 0xff
 80126fe:	72da      	strb	r2, [r3, #11]
    /* As initial send MSS, we use TCP_MSS but limit it to 536.
       The send MSS is updated when an MSS option is received. */
    pcb->mss = INITIAL_MSS;
 8012700:	68fb      	ldr	r3, [r7, #12]
 8012702:	f44f 7206 	mov.w	r2, #536	; 0x218
 8012706:	865a      	strh	r2, [r3, #50]	; 0x32
    pcb->rto = 3000 / TCP_SLOW_INTERVAL;
 8012708:	68fb      	ldr	r3, [r7, #12]
 801270a:	2206      	movs	r2, #6
 801270c:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
    pcb->sv = 3000 / TCP_SLOW_INTERVAL;
 8012710:	68fb      	ldr	r3, [r7, #12]
 8012712:	2206      	movs	r2, #6
 8012714:	87da      	strh	r2, [r3, #62]	; 0x3e
    pcb->rtime = -1;
 8012716:	68fb      	ldr	r3, [r7, #12]
 8012718:	f64f 72ff 	movw	r2, #65535	; 0xffff
 801271c:	861a      	strh	r2, [r3, #48]	; 0x30
    pcb->cwnd = 1;
 801271e:	68fb      	ldr	r3, [r7, #12]
 8012720:	2201      	movs	r2, #1
 8012722:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
    pcb->tmr = tcp_ticks;
 8012726:	4b0d      	ldr	r3, [pc, #52]	; (801275c <tcp_alloc+0xf8>)
 8012728:	681a      	ldr	r2, [r3, #0]
 801272a:	68fb      	ldr	r3, [r7, #12]
 801272c:	621a      	str	r2, [r3, #32]
    pcb->last_timer = tcp_timer_ctr;
 801272e:	4b0c      	ldr	r3, [pc, #48]	; (8012760 <tcp_alloc+0xfc>)
 8012730:	781a      	ldrb	r2, [r3, #0]
 8012732:	68fb      	ldr	r3, [r7, #12]
 8012734:	779a      	strb	r2, [r3, #30]
    of using the largest advertised receive window.  We've seen complications with
    receiving TCPs that use window scaling and/or window auto-tuning where the
    initial advertised window is very small and then grows rapidly once the
    connection is established. To avoid these complications, we set ssthresh to the
    largest effective cwnd (amount of in-flight data) that the sender can have. */
    pcb->ssthresh = TCP_SND_BUF;
 8012736:	68fb      	ldr	r3, [r7, #12]
 8012738:	f241 62d0 	movw	r2, #5840	; 0x16d0
 801273c:	f8a3 204a 	strh.w	r2, [r3, #74]	; 0x4a

#if LWIP_CALLBACK_API
    pcb->recv = tcp_recv_null;
 8012740:	68fb      	ldr	r3, [r7, #12]
 8012742:	4a08      	ldr	r2, [pc, #32]	; (8012764 <tcp_alloc+0x100>)
 8012744:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
#endif /* LWIP_CALLBACK_API */

    /* Init KEEPALIVE timer */
    pcb->keep_idle  = TCP_KEEPIDLE_DEFAULT;
 8012748:	68fb      	ldr	r3, [r7, #12]
 801274a:	4a07      	ldr	r2, [pc, #28]	; (8012768 <tcp_alloc+0x104>)
 801274c:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
#if LWIP_TCP_KEEPALIVE
    pcb->keep_intvl = TCP_KEEPINTVL_DEFAULT;
    pcb->keep_cnt   = TCP_KEEPCNT_DEFAULT;
#endif /* LWIP_TCP_KEEPALIVE */
  }
  return pcb;
 8012750:	68fb      	ldr	r3, [r7, #12]
}
 8012752:	4618      	mov	r0, r3
 8012754:	3710      	adds	r7, #16
 8012756:	46bd      	mov	sp, r7
 8012758:	bd80      	pop	{r7, pc}
 801275a:	bf00      	nop
 801275c:	200070d8 	.word	0x200070d8
 8012760:	200070ee 	.word	0x200070ee
 8012764:	0801241d 	.word	0x0801241d
 8012768:	006ddd00 	.word	0x006ddd00

0801276c <tcp_pcb_purge>:
 *
 * @param pcb tcp_pcb to purge. The pcb itself is not deallocated!
 */
void
tcp_pcb_purge(struct tcp_pcb *pcb)
{
 801276c:	b580      	push	{r7, lr}
 801276e:	b082      	sub	sp, #8
 8012770:	af00      	add	r7, sp, #0
 8012772:	6078      	str	r0, [r7, #4]
  LWIP_ERROR("tcp_pcb_purge: invalid pcb", pcb != NULL, return);
 8012774:	687b      	ldr	r3, [r7, #4]
 8012776:	2b00      	cmp	r3, #0
 8012778:	d107      	bne.n	801278a <tcp_pcb_purge+0x1e>
 801277a:	4b21      	ldr	r3, [pc, #132]	; (8012800 <tcp_pcb_purge+0x94>)
 801277c:	f640 0251 	movw	r2, #2129	; 0x851
 8012780:	4920      	ldr	r1, [pc, #128]	; (8012804 <tcp_pcb_purge+0x98>)
 8012782:	4821      	ldr	r0, [pc, #132]	; (8012808 <tcp_pcb_purge+0x9c>)
 8012784:	f007 fa64 	bl	8019c50 <iprintf>
 8012788:	e037      	b.n	80127fa <tcp_pcb_purge+0x8e>

  if (pcb->state != CLOSED &&
 801278a:	687b      	ldr	r3, [r7, #4]
 801278c:	7d1b      	ldrb	r3, [r3, #20]
 801278e:	2b00      	cmp	r3, #0
 8012790:	d033      	beq.n	80127fa <tcp_pcb_purge+0x8e>
      pcb->state != TIME_WAIT &&
 8012792:	687b      	ldr	r3, [r7, #4]
 8012794:	7d1b      	ldrb	r3, [r3, #20]
  if (pcb->state != CLOSED &&
 8012796:	2b0a      	cmp	r3, #10
 8012798:	d02f      	beq.n	80127fa <tcp_pcb_purge+0x8e>
      pcb->state != LISTEN) {
 801279a:	687b      	ldr	r3, [r7, #4]
 801279c:	7d1b      	ldrb	r3, [r3, #20]
      pcb->state != TIME_WAIT &&
 801279e:	2b01      	cmp	r3, #1
 80127a0:	d02b      	beq.n	80127fa <tcp_pcb_purge+0x8e>

    LWIP_DEBUGF(TCP_DEBUG, ("tcp_pcb_purge\n"));

    tcp_backlog_accepted(pcb);

    if (pcb->refused_data != NULL) {
 80127a2:	687b      	ldr	r3, [r7, #4]
 80127a4:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80127a6:	2b00      	cmp	r3, #0
 80127a8:	d007      	beq.n	80127ba <tcp_pcb_purge+0x4e>
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_pcb_purge: data left on ->refused_data\n"));
      pbuf_free(pcb->refused_data);
 80127aa:	687b      	ldr	r3, [r7, #4]
 80127ac:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80127ae:	4618      	mov	r0, r3
 80127b0:	f7fe fb78 	bl	8010ea4 <pbuf_free>
      pcb->refused_data = NULL;
 80127b4:	687b      	ldr	r3, [r7, #4]
 80127b6:	2200      	movs	r2, #0
 80127b8:	679a      	str	r2, [r3, #120]	; 0x78
    }
    if (pcb->unacked != NULL) {
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_pcb_purge: data left on ->unacked\n"));
    }
#if TCP_QUEUE_OOSEQ
    if (pcb->ooseq != NULL) {
 80127ba:	687b      	ldr	r3, [r7, #4]
 80127bc:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80127be:	2b00      	cmp	r3, #0
 80127c0:	d002      	beq.n	80127c8 <tcp_pcb_purge+0x5c>
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_pcb_purge: data left on ->ooseq\n"));
      tcp_free_ooseq(pcb);
 80127c2:	6878      	ldr	r0, [r7, #4]
 80127c4:	f000 f986 	bl	8012ad4 <tcp_free_ooseq>
    }
#endif /* TCP_QUEUE_OOSEQ */

    /* Stop the retransmission timer as it will expect data on unacked
       queue if it fires */
    pcb->rtime = -1;
 80127c8:	687b      	ldr	r3, [r7, #4]
 80127ca:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80127ce:	861a      	strh	r2, [r3, #48]	; 0x30

    tcp_segs_free(pcb->unsent);
 80127d0:	687b      	ldr	r3, [r7, #4]
 80127d2:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80127d4:	4618      	mov	r0, r3
 80127d6:	f7ff fdc7 	bl	8012368 <tcp_segs_free>
    tcp_segs_free(pcb->unacked);
 80127da:	687b      	ldr	r3, [r7, #4]
 80127dc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80127de:	4618      	mov	r0, r3
 80127e0:	f7ff fdc2 	bl	8012368 <tcp_segs_free>
    pcb->unacked = pcb->unsent = NULL;
 80127e4:	687b      	ldr	r3, [r7, #4]
 80127e6:	2200      	movs	r2, #0
 80127e8:	66da      	str	r2, [r3, #108]	; 0x6c
 80127ea:	687b      	ldr	r3, [r7, #4]
 80127ec:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 80127ee:	687b      	ldr	r3, [r7, #4]
 80127f0:	671a      	str	r2, [r3, #112]	; 0x70
#if TCP_OVERSIZE
    pcb->unsent_oversize = 0;
 80127f2:	687b      	ldr	r3, [r7, #4]
 80127f4:	2200      	movs	r2, #0
 80127f6:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
#endif /* TCP_OVERSIZE */
  }
}
 80127fa:	3708      	adds	r7, #8
 80127fc:	46bd      	mov	sp, r7
 80127fe:	bd80      	pop	{r7, pc}
 8012800:	0801d014 	.word	0x0801d014
 8012804:	0801d660 	.word	0x0801d660
 8012808:	0801d058 	.word	0x0801d058

0801280c <tcp_pcb_remove>:
 * @param pcblist PCB list to purge.
 * @param pcb tcp_pcb to purge. The pcb itself is NOT deallocated!
 */
void
tcp_pcb_remove(struct tcp_pcb **pcblist, struct tcp_pcb *pcb)
{
 801280c:	b580      	push	{r7, lr}
 801280e:	b084      	sub	sp, #16
 8012810:	af00      	add	r7, sp, #0
 8012812:	6078      	str	r0, [r7, #4]
 8012814:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT("tcp_pcb_remove: invalid pcb", pcb != NULL);
 8012816:	683b      	ldr	r3, [r7, #0]
 8012818:	2b00      	cmp	r3, #0
 801281a:	d106      	bne.n	801282a <tcp_pcb_remove+0x1e>
 801281c:	4b3e      	ldr	r3, [pc, #248]	; (8012918 <tcp_pcb_remove+0x10c>)
 801281e:	f640 0283 	movw	r2, #2179	; 0x883
 8012822:	493e      	ldr	r1, [pc, #248]	; (801291c <tcp_pcb_remove+0x110>)
 8012824:	483e      	ldr	r0, [pc, #248]	; (8012920 <tcp_pcb_remove+0x114>)
 8012826:	f007 fa13 	bl	8019c50 <iprintf>
  LWIP_ASSERT("tcp_pcb_remove: invalid pcblist", pcblist != NULL);
 801282a:	687b      	ldr	r3, [r7, #4]
 801282c:	2b00      	cmp	r3, #0
 801282e:	d106      	bne.n	801283e <tcp_pcb_remove+0x32>
 8012830:	4b39      	ldr	r3, [pc, #228]	; (8012918 <tcp_pcb_remove+0x10c>)
 8012832:	f640 0284 	movw	r2, #2180	; 0x884
 8012836:	493b      	ldr	r1, [pc, #236]	; (8012924 <tcp_pcb_remove+0x118>)
 8012838:	4839      	ldr	r0, [pc, #228]	; (8012920 <tcp_pcb_remove+0x114>)
 801283a:	f007 fa09 	bl	8019c50 <iprintf>

  TCP_RMV(pcblist, pcb);
 801283e:	687b      	ldr	r3, [r7, #4]
 8012840:	681b      	ldr	r3, [r3, #0]
 8012842:	683a      	ldr	r2, [r7, #0]
 8012844:	429a      	cmp	r2, r3
 8012846:	d105      	bne.n	8012854 <tcp_pcb_remove+0x48>
 8012848:	687b      	ldr	r3, [r7, #4]
 801284a:	681b      	ldr	r3, [r3, #0]
 801284c:	68da      	ldr	r2, [r3, #12]
 801284e:	687b      	ldr	r3, [r7, #4]
 8012850:	601a      	str	r2, [r3, #0]
 8012852:	e013      	b.n	801287c <tcp_pcb_remove+0x70>
 8012854:	687b      	ldr	r3, [r7, #4]
 8012856:	681b      	ldr	r3, [r3, #0]
 8012858:	60fb      	str	r3, [r7, #12]
 801285a:	e00c      	b.n	8012876 <tcp_pcb_remove+0x6a>
 801285c:	68fb      	ldr	r3, [r7, #12]
 801285e:	68db      	ldr	r3, [r3, #12]
 8012860:	683a      	ldr	r2, [r7, #0]
 8012862:	429a      	cmp	r2, r3
 8012864:	d104      	bne.n	8012870 <tcp_pcb_remove+0x64>
 8012866:	683b      	ldr	r3, [r7, #0]
 8012868:	68da      	ldr	r2, [r3, #12]
 801286a:	68fb      	ldr	r3, [r7, #12]
 801286c:	60da      	str	r2, [r3, #12]
 801286e:	e005      	b.n	801287c <tcp_pcb_remove+0x70>
 8012870:	68fb      	ldr	r3, [r7, #12]
 8012872:	68db      	ldr	r3, [r3, #12]
 8012874:	60fb      	str	r3, [r7, #12]
 8012876:	68fb      	ldr	r3, [r7, #12]
 8012878:	2b00      	cmp	r3, #0
 801287a:	d1ef      	bne.n	801285c <tcp_pcb_remove+0x50>
 801287c:	683b      	ldr	r3, [r7, #0]
 801287e:	2200      	movs	r2, #0
 8012880:	60da      	str	r2, [r3, #12]

  tcp_pcb_purge(pcb);
 8012882:	6838      	ldr	r0, [r7, #0]
 8012884:	f7ff ff72 	bl	801276c <tcp_pcb_purge>

  /* if there is an outstanding delayed ACKs, send it */
  if ((pcb->state != TIME_WAIT) &&
 8012888:	683b      	ldr	r3, [r7, #0]
 801288a:	7d1b      	ldrb	r3, [r3, #20]
 801288c:	2b0a      	cmp	r3, #10
 801288e:	d013      	beq.n	80128b8 <tcp_pcb_remove+0xac>
      (pcb->state != LISTEN) &&
 8012890:	683b      	ldr	r3, [r7, #0]
 8012892:	7d1b      	ldrb	r3, [r3, #20]
  if ((pcb->state != TIME_WAIT) &&
 8012894:	2b01      	cmp	r3, #1
 8012896:	d00f      	beq.n	80128b8 <tcp_pcb_remove+0xac>
      (pcb->flags & TF_ACK_DELAY)) {
 8012898:	683b      	ldr	r3, [r7, #0]
 801289a:	8b5b      	ldrh	r3, [r3, #26]
 801289c:	f003 0301 	and.w	r3, r3, #1
      (pcb->state != LISTEN) &&
 80128a0:	2b00      	cmp	r3, #0
 80128a2:	d009      	beq.n	80128b8 <tcp_pcb_remove+0xac>
    tcp_ack_now(pcb);
 80128a4:	683b      	ldr	r3, [r7, #0]
 80128a6:	8b5b      	ldrh	r3, [r3, #26]
 80128a8:	f043 0302 	orr.w	r3, r3, #2
 80128ac:	b29a      	uxth	r2, r3
 80128ae:	683b      	ldr	r3, [r7, #0]
 80128b0:	835a      	strh	r2, [r3, #26]
    tcp_output(pcb);
 80128b2:	6838      	ldr	r0, [r7, #0]
 80128b4:	f002 ff6e 	bl	8015794 <tcp_output>
  }

  if (pcb->state != LISTEN) {
 80128b8:	683b      	ldr	r3, [r7, #0]
 80128ba:	7d1b      	ldrb	r3, [r3, #20]
 80128bc:	2b01      	cmp	r3, #1
 80128be:	d020      	beq.n	8012902 <tcp_pcb_remove+0xf6>
    LWIP_ASSERT("unsent segments leaking", pcb->unsent == NULL);
 80128c0:	683b      	ldr	r3, [r7, #0]
 80128c2:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80128c4:	2b00      	cmp	r3, #0
 80128c6:	d006      	beq.n	80128d6 <tcp_pcb_remove+0xca>
 80128c8:	4b13      	ldr	r3, [pc, #76]	; (8012918 <tcp_pcb_remove+0x10c>)
 80128ca:	f640 0293 	movw	r2, #2195	; 0x893
 80128ce:	4916      	ldr	r1, [pc, #88]	; (8012928 <tcp_pcb_remove+0x11c>)
 80128d0:	4813      	ldr	r0, [pc, #76]	; (8012920 <tcp_pcb_remove+0x114>)
 80128d2:	f007 f9bd 	bl	8019c50 <iprintf>
    LWIP_ASSERT("unacked segments leaking", pcb->unacked == NULL);
 80128d6:	683b      	ldr	r3, [r7, #0]
 80128d8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80128da:	2b00      	cmp	r3, #0
 80128dc:	d006      	beq.n	80128ec <tcp_pcb_remove+0xe0>
 80128de:	4b0e      	ldr	r3, [pc, #56]	; (8012918 <tcp_pcb_remove+0x10c>)
 80128e0:	f640 0294 	movw	r2, #2196	; 0x894
 80128e4:	4911      	ldr	r1, [pc, #68]	; (801292c <tcp_pcb_remove+0x120>)
 80128e6:	480e      	ldr	r0, [pc, #56]	; (8012920 <tcp_pcb_remove+0x114>)
 80128e8:	f007 f9b2 	bl	8019c50 <iprintf>
#if TCP_QUEUE_OOSEQ
    LWIP_ASSERT("ooseq segments leaking", pcb->ooseq == NULL);
 80128ec:	683b      	ldr	r3, [r7, #0]
 80128ee:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80128f0:	2b00      	cmp	r3, #0
 80128f2:	d006      	beq.n	8012902 <tcp_pcb_remove+0xf6>
 80128f4:	4b08      	ldr	r3, [pc, #32]	; (8012918 <tcp_pcb_remove+0x10c>)
 80128f6:	f640 0296 	movw	r2, #2198	; 0x896
 80128fa:	490d      	ldr	r1, [pc, #52]	; (8012930 <tcp_pcb_remove+0x124>)
 80128fc:	4808      	ldr	r0, [pc, #32]	; (8012920 <tcp_pcb_remove+0x114>)
 80128fe:	f007 f9a7 	bl	8019c50 <iprintf>
#endif /* TCP_QUEUE_OOSEQ */
  }

  pcb->state = CLOSED;
 8012902:	683b      	ldr	r3, [r7, #0]
 8012904:	2200      	movs	r2, #0
 8012906:	751a      	strb	r2, [r3, #20]
  /* reset the local port to prevent the pcb from being 'bound' */
  pcb->local_port = 0;
 8012908:	683b      	ldr	r3, [r7, #0]
 801290a:	2200      	movs	r2, #0
 801290c:	82da      	strh	r2, [r3, #22]

  LWIP_ASSERT("tcp_pcb_remove: tcp_pcbs_sane()", tcp_pcbs_sane());
}
 801290e:	bf00      	nop
 8012910:	3710      	adds	r7, #16
 8012912:	46bd      	mov	sp, r7
 8012914:	bd80      	pop	{r7, pc}
 8012916:	bf00      	nop
 8012918:	0801d014 	.word	0x0801d014
 801291c:	0801d67c 	.word	0x0801d67c
 8012920:	0801d058 	.word	0x0801d058
 8012924:	0801d698 	.word	0x0801d698
 8012928:	0801d6b8 	.word	0x0801d6b8
 801292c:	0801d6d0 	.word	0x0801d6d0
 8012930:	0801d6ec 	.word	0x0801d6ec

08012934 <tcp_next_iss>:
 *
 * @return u32_t pseudo random sequence number
 */
u32_t
tcp_next_iss(struct tcp_pcb *pcb)
{
 8012934:	b580      	push	{r7, lr}
 8012936:	b082      	sub	sp, #8
 8012938:	af00      	add	r7, sp, #0
 801293a:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_next_iss: invalid pcb", pcb != NULL);
  return LWIP_HOOK_TCP_ISN(&pcb->local_ip, pcb->local_port, &pcb->remote_ip, pcb->remote_port);
#else /* LWIP_HOOK_TCP_ISN */
  static u32_t iss = 6510;

  LWIP_ASSERT("tcp_next_iss: invalid pcb", pcb != NULL);
 801293c:	687b      	ldr	r3, [r7, #4]
 801293e:	2b00      	cmp	r3, #0
 8012940:	d106      	bne.n	8012950 <tcp_next_iss+0x1c>
 8012942:	4b0a      	ldr	r3, [pc, #40]	; (801296c <tcp_next_iss+0x38>)
 8012944:	f640 02af 	movw	r2, #2223	; 0x8af
 8012948:	4909      	ldr	r1, [pc, #36]	; (8012970 <tcp_next_iss+0x3c>)
 801294a:	480a      	ldr	r0, [pc, #40]	; (8012974 <tcp_next_iss+0x40>)
 801294c:	f007 f980 	bl	8019c50 <iprintf>
  LWIP_UNUSED_ARG(pcb);

  iss += tcp_ticks;       /* XXX */
 8012950:	4b09      	ldr	r3, [pc, #36]	; (8012978 <tcp_next_iss+0x44>)
 8012952:	681a      	ldr	r2, [r3, #0]
 8012954:	4b09      	ldr	r3, [pc, #36]	; (801297c <tcp_next_iss+0x48>)
 8012956:	681b      	ldr	r3, [r3, #0]
 8012958:	4413      	add	r3, r2
 801295a:	4a07      	ldr	r2, [pc, #28]	; (8012978 <tcp_next_iss+0x44>)
 801295c:	6013      	str	r3, [r2, #0]
  return iss;
 801295e:	4b06      	ldr	r3, [pc, #24]	; (8012978 <tcp_next_iss+0x44>)
 8012960:	681b      	ldr	r3, [r3, #0]
#endif /* LWIP_HOOK_TCP_ISN */
}
 8012962:	4618      	mov	r0, r3
 8012964:	3708      	adds	r7, #8
 8012966:	46bd      	mov	sp, r7
 8012968:	bd80      	pop	{r7, pc}
 801296a:	bf00      	nop
 801296c:	0801d014 	.word	0x0801d014
 8012970:	0801d704 	.word	0x0801d704
 8012974:	0801d058 	.word	0x0801d058
 8012978:	2000005c 	.word	0x2000005c
 801297c:	200070d8 	.word	0x200070d8

08012980 <tcp_eff_send_mss_netif>:
 * by calculating the minimum of TCP_MSS and the mtu (if set) of the target
 * netif (if not NULL).
 */
u16_t
tcp_eff_send_mss_netif(u16_t sendmss, struct netif *outif, const ip_addr_t *dest)
{
 8012980:	b580      	push	{r7, lr}
 8012982:	b086      	sub	sp, #24
 8012984:	af00      	add	r7, sp, #0
 8012986:	4603      	mov	r3, r0
 8012988:	60b9      	str	r1, [r7, #8]
 801298a:	607a      	str	r2, [r7, #4]
 801298c:	81fb      	strh	r3, [r7, #14]
  u16_t mss_s;
  u16_t mtu;

  LWIP_UNUSED_ARG(dest); /* in case IPv6 is disabled */

  LWIP_ASSERT("tcp_eff_send_mss_netif: invalid dst_ip", dest != NULL);
 801298e:	687b      	ldr	r3, [r7, #4]
 8012990:	2b00      	cmp	r3, #0
 8012992:	d106      	bne.n	80129a2 <tcp_eff_send_mss_netif+0x22>
 8012994:	4b14      	ldr	r3, [pc, #80]	; (80129e8 <tcp_eff_send_mss_netif+0x68>)
 8012996:	f640 02c5 	movw	r2, #2245	; 0x8c5
 801299a:	4914      	ldr	r1, [pc, #80]	; (80129ec <tcp_eff_send_mss_netif+0x6c>)
 801299c:	4814      	ldr	r0, [pc, #80]	; (80129f0 <tcp_eff_send_mss_netif+0x70>)
 801299e:	f007 f957 	bl	8019c50 <iprintf>
  else
#endif /* LWIP_IPV4 */
#endif /* LWIP_IPV6 */
#if LWIP_IPV4
  {
    if (outif == NULL) {
 80129a2:	68bb      	ldr	r3, [r7, #8]
 80129a4:	2b00      	cmp	r3, #0
 80129a6:	d101      	bne.n	80129ac <tcp_eff_send_mss_netif+0x2c>
      return sendmss;
 80129a8:	89fb      	ldrh	r3, [r7, #14]
 80129aa:	e019      	b.n	80129e0 <tcp_eff_send_mss_netif+0x60>
    }
    mtu = outif->mtu;
 80129ac:	68bb      	ldr	r3, [r7, #8]
 80129ae:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 80129b0:	82fb      	strh	r3, [r7, #22]
  }
#endif /* LWIP_IPV4 */

  if (mtu != 0) {
 80129b2:	8afb      	ldrh	r3, [r7, #22]
 80129b4:	2b00      	cmp	r3, #0
 80129b6:	d012      	beq.n	80129de <tcp_eff_send_mss_netif+0x5e>
    else
#endif /* LWIP_IPV4 */
#endif /* LWIP_IPV6 */
#if LWIP_IPV4
    {
      offset = IP_HLEN + TCP_HLEN;
 80129b8:	2328      	movs	r3, #40	; 0x28
 80129ba:	82bb      	strh	r3, [r7, #20]
    }
#endif /* LWIP_IPV4 */
    mss_s = (mtu > offset) ? (u16_t)(mtu - offset) : 0;
 80129bc:	8afa      	ldrh	r2, [r7, #22]
 80129be:	8abb      	ldrh	r3, [r7, #20]
 80129c0:	429a      	cmp	r2, r3
 80129c2:	d904      	bls.n	80129ce <tcp_eff_send_mss_netif+0x4e>
 80129c4:	8afa      	ldrh	r2, [r7, #22]
 80129c6:	8abb      	ldrh	r3, [r7, #20]
 80129c8:	1ad3      	subs	r3, r2, r3
 80129ca:	b29b      	uxth	r3, r3
 80129cc:	e000      	b.n	80129d0 <tcp_eff_send_mss_netif+0x50>
 80129ce:	2300      	movs	r3, #0
 80129d0:	827b      	strh	r3, [r7, #18]
    /* RFC 1122, chap 4.2.2.6:
     * Eff.snd.MSS = min(SendMSS+20, MMS_S) - TCPhdrsize - IPoptionsize
     * We correct for TCP options in tcp_write(), and don't support IP options.
     */
    sendmss = LWIP_MIN(sendmss, mss_s);
 80129d2:	8a7a      	ldrh	r2, [r7, #18]
 80129d4:	89fb      	ldrh	r3, [r7, #14]
 80129d6:	4293      	cmp	r3, r2
 80129d8:	bf28      	it	cs
 80129da:	4613      	movcs	r3, r2
 80129dc:	81fb      	strh	r3, [r7, #14]
  }
  return sendmss;
 80129de:	89fb      	ldrh	r3, [r7, #14]
}
 80129e0:	4618      	mov	r0, r3
 80129e2:	3718      	adds	r7, #24
 80129e4:	46bd      	mov	sp, r7
 80129e6:	bd80      	pop	{r7, pc}
 80129e8:	0801d014 	.word	0x0801d014
 80129ec:	0801d720 	.word	0x0801d720
 80129f0:	0801d058 	.word	0x0801d058

080129f4 <tcp_netif_ip_addr_changed_pcblist>:
#endif /* TCP_CALCULATE_EFF_SEND_MSS */

/** Helper function for tcp_netif_ip_addr_changed() that iterates a pcb list */
static void
tcp_netif_ip_addr_changed_pcblist(const ip_addr_t *old_addr, struct tcp_pcb *pcb_list)
{
 80129f4:	b580      	push	{r7, lr}
 80129f6:	b084      	sub	sp, #16
 80129f8:	af00      	add	r7, sp, #0
 80129fa:	6078      	str	r0, [r7, #4]
 80129fc:	6039      	str	r1, [r7, #0]
  struct tcp_pcb *pcb;
  pcb = pcb_list;
 80129fe:	683b      	ldr	r3, [r7, #0]
 8012a00:	60fb      	str	r3, [r7, #12]

  LWIP_ASSERT("tcp_netif_ip_addr_changed_pcblist: invalid old_addr", old_addr != NULL);
 8012a02:	687b      	ldr	r3, [r7, #4]
 8012a04:	2b00      	cmp	r3, #0
 8012a06:	d119      	bne.n	8012a3c <tcp_netif_ip_addr_changed_pcblist+0x48>
 8012a08:	4b10      	ldr	r3, [pc, #64]	; (8012a4c <tcp_netif_ip_addr_changed_pcblist+0x58>)
 8012a0a:	f44f 6210 	mov.w	r2, #2304	; 0x900
 8012a0e:	4910      	ldr	r1, [pc, #64]	; (8012a50 <tcp_netif_ip_addr_changed_pcblist+0x5c>)
 8012a10:	4810      	ldr	r0, [pc, #64]	; (8012a54 <tcp_netif_ip_addr_changed_pcblist+0x60>)
 8012a12:	f007 f91d 	bl	8019c50 <iprintf>

  while (pcb != NULL) {
 8012a16:	e011      	b.n	8012a3c <tcp_netif_ip_addr_changed_pcblist+0x48>
    /* PCB bound to current local interface address? */
    if (ip_addr_cmp(&pcb->local_ip, old_addr)
 8012a18:	68fb      	ldr	r3, [r7, #12]
 8012a1a:	681a      	ldr	r2, [r3, #0]
 8012a1c:	687b      	ldr	r3, [r7, #4]
 8012a1e:	681b      	ldr	r3, [r3, #0]
 8012a20:	429a      	cmp	r2, r3
 8012a22:	d108      	bne.n	8012a36 <tcp_netif_ip_addr_changed_pcblist+0x42>
        /* connections to link-local addresses must persist (RFC3927 ch. 1.9) */
        && (!IP_IS_V4_VAL(pcb->local_ip) || !ip4_addr_islinklocal(ip_2_ip4(&pcb->local_ip)))
#endif /* LWIP_AUTOIP */
       ) {
      /* this connection must be aborted */
      struct tcp_pcb *next = pcb->next;
 8012a24:	68fb      	ldr	r3, [r7, #12]
 8012a26:	68db      	ldr	r3, [r3, #12]
 8012a28:	60bb      	str	r3, [r7, #8]
      LWIP_DEBUGF(NETIF_DEBUG | LWIP_DBG_STATE, ("netif_set_ipaddr: aborting TCP pcb %p\n", (void *)pcb));
      tcp_abort(pcb);
 8012a2a:	68f8      	ldr	r0, [r7, #12]
 8012a2c:	f7fe ffc2 	bl	80119b4 <tcp_abort>
      pcb = next;
 8012a30:	68bb      	ldr	r3, [r7, #8]
 8012a32:	60fb      	str	r3, [r7, #12]
 8012a34:	e002      	b.n	8012a3c <tcp_netif_ip_addr_changed_pcblist+0x48>
    } else {
      pcb = pcb->next;
 8012a36:	68fb      	ldr	r3, [r7, #12]
 8012a38:	68db      	ldr	r3, [r3, #12]
 8012a3a:	60fb      	str	r3, [r7, #12]
  while (pcb != NULL) {
 8012a3c:	68fb      	ldr	r3, [r7, #12]
 8012a3e:	2b00      	cmp	r3, #0
 8012a40:	d1ea      	bne.n	8012a18 <tcp_netif_ip_addr_changed_pcblist+0x24>
    }
  }
}
 8012a42:	bf00      	nop
 8012a44:	bf00      	nop
 8012a46:	3710      	adds	r7, #16
 8012a48:	46bd      	mov	sp, r7
 8012a4a:	bd80      	pop	{r7, pc}
 8012a4c:	0801d014 	.word	0x0801d014
 8012a50:	0801d748 	.word	0x0801d748
 8012a54:	0801d058 	.word	0x0801d058

08012a58 <tcp_netif_ip_addr_changed>:
 * @param old_addr IP address of the netif before change
 * @param new_addr IP address of the netif after change or NULL if netif has been removed
 */
void
tcp_netif_ip_addr_changed(const ip_addr_t *old_addr, const ip_addr_t *new_addr)
{
 8012a58:	b580      	push	{r7, lr}
 8012a5a:	b084      	sub	sp, #16
 8012a5c:	af00      	add	r7, sp, #0
 8012a5e:	6078      	str	r0, [r7, #4]
 8012a60:	6039      	str	r1, [r7, #0]
  struct tcp_pcb_listen *lpcb;

  if (!ip_addr_isany(old_addr)) {
 8012a62:	687b      	ldr	r3, [r7, #4]
 8012a64:	2b00      	cmp	r3, #0
 8012a66:	d02a      	beq.n	8012abe <tcp_netif_ip_addr_changed+0x66>
 8012a68:	687b      	ldr	r3, [r7, #4]
 8012a6a:	681b      	ldr	r3, [r3, #0]
 8012a6c:	2b00      	cmp	r3, #0
 8012a6e:	d026      	beq.n	8012abe <tcp_netif_ip_addr_changed+0x66>
    tcp_netif_ip_addr_changed_pcblist(old_addr, tcp_active_pcbs);
 8012a70:	4b15      	ldr	r3, [pc, #84]	; (8012ac8 <tcp_netif_ip_addr_changed+0x70>)
 8012a72:	681b      	ldr	r3, [r3, #0]
 8012a74:	4619      	mov	r1, r3
 8012a76:	6878      	ldr	r0, [r7, #4]
 8012a78:	f7ff ffbc 	bl	80129f4 <tcp_netif_ip_addr_changed_pcblist>
    tcp_netif_ip_addr_changed_pcblist(old_addr, tcp_bound_pcbs);
 8012a7c:	4b13      	ldr	r3, [pc, #76]	; (8012acc <tcp_netif_ip_addr_changed+0x74>)
 8012a7e:	681b      	ldr	r3, [r3, #0]
 8012a80:	4619      	mov	r1, r3
 8012a82:	6878      	ldr	r0, [r7, #4]
 8012a84:	f7ff ffb6 	bl	80129f4 <tcp_netif_ip_addr_changed_pcblist>

    if (!ip_addr_isany(new_addr)) {
 8012a88:	683b      	ldr	r3, [r7, #0]
 8012a8a:	2b00      	cmp	r3, #0
 8012a8c:	d017      	beq.n	8012abe <tcp_netif_ip_addr_changed+0x66>
 8012a8e:	683b      	ldr	r3, [r7, #0]
 8012a90:	681b      	ldr	r3, [r3, #0]
 8012a92:	2b00      	cmp	r3, #0
 8012a94:	d013      	beq.n	8012abe <tcp_netif_ip_addr_changed+0x66>
      /* PCB bound to current local interface address? */
      for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = lpcb->next) {
 8012a96:	4b0e      	ldr	r3, [pc, #56]	; (8012ad0 <tcp_netif_ip_addr_changed+0x78>)
 8012a98:	681b      	ldr	r3, [r3, #0]
 8012a9a:	60fb      	str	r3, [r7, #12]
 8012a9c:	e00c      	b.n	8012ab8 <tcp_netif_ip_addr_changed+0x60>
        /* PCB bound to current local interface address? */
        if (ip_addr_cmp(&lpcb->local_ip, old_addr)) {
 8012a9e:	68fb      	ldr	r3, [r7, #12]
 8012aa0:	681a      	ldr	r2, [r3, #0]
 8012aa2:	687b      	ldr	r3, [r7, #4]
 8012aa4:	681b      	ldr	r3, [r3, #0]
 8012aa6:	429a      	cmp	r2, r3
 8012aa8:	d103      	bne.n	8012ab2 <tcp_netif_ip_addr_changed+0x5a>
          /* The PCB is listening to the old ipaddr and
            * is set to listen to the new one instead */
          ip_addr_copy(lpcb->local_ip, *new_addr);
 8012aaa:	683b      	ldr	r3, [r7, #0]
 8012aac:	681a      	ldr	r2, [r3, #0]
 8012aae:	68fb      	ldr	r3, [r7, #12]
 8012ab0:	601a      	str	r2, [r3, #0]
      for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = lpcb->next) {
 8012ab2:	68fb      	ldr	r3, [r7, #12]
 8012ab4:	68db      	ldr	r3, [r3, #12]
 8012ab6:	60fb      	str	r3, [r7, #12]
 8012ab8:	68fb      	ldr	r3, [r7, #12]
 8012aba:	2b00      	cmp	r3, #0
 8012abc:	d1ef      	bne.n	8012a9e <tcp_netif_ip_addr_changed+0x46>
        }
      }
    }
  }
}
 8012abe:	bf00      	nop
 8012ac0:	3710      	adds	r7, #16
 8012ac2:	46bd      	mov	sp, r7
 8012ac4:	bd80      	pop	{r7, pc}
 8012ac6:	bf00      	nop
 8012ac8:	200070e4 	.word	0x200070e4
 8012acc:	200070dc 	.word	0x200070dc
 8012ad0:	200070e0 	.word	0x200070e0

08012ad4 <tcp_free_ooseq>:

#if TCP_QUEUE_OOSEQ
/* Free all ooseq pbufs (and possibly reset SACK state) */
void
tcp_free_ooseq(struct tcp_pcb *pcb)
{
 8012ad4:	b580      	push	{r7, lr}
 8012ad6:	b082      	sub	sp, #8
 8012ad8:	af00      	add	r7, sp, #0
 8012ada:	6078      	str	r0, [r7, #4]
  if (pcb->ooseq) {
 8012adc:	687b      	ldr	r3, [r7, #4]
 8012ade:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8012ae0:	2b00      	cmp	r3, #0
 8012ae2:	d007      	beq.n	8012af4 <tcp_free_ooseq+0x20>
    tcp_segs_free(pcb->ooseq);
 8012ae4:	687b      	ldr	r3, [r7, #4]
 8012ae6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8012ae8:	4618      	mov	r0, r3
 8012aea:	f7ff fc3d 	bl	8012368 <tcp_segs_free>
    pcb->ooseq = NULL;
 8012aee:	687b      	ldr	r3, [r7, #4]
 8012af0:	2200      	movs	r2, #0
 8012af2:	675a      	str	r2, [r3, #116]	; 0x74
#if LWIP_TCP_SACK_OUT
    memset(pcb->rcv_sacks, 0, sizeof(pcb->rcv_sacks));
#endif /* LWIP_TCP_SACK_OUT */
  }
}
 8012af4:	bf00      	nop
 8012af6:	3708      	adds	r7, #8
 8012af8:	46bd      	mov	sp, r7
 8012afa:	bd80      	pop	{r7, pc}

08012afc <tcp_input>:
 * @param p received TCP segment to process (p->payload pointing to the TCP header)
 * @param inp network interface on which this segment was received
 */
void
tcp_input(struct pbuf *p, struct netif *inp)
{
 8012afc:	b590      	push	{r4, r7, lr}
 8012afe:	b08d      	sub	sp, #52	; 0x34
 8012b00:	af04      	add	r7, sp, #16
 8012b02:	6078      	str	r0, [r7, #4]
 8012b04:	6039      	str	r1, [r7, #0]
  u8_t hdrlen_bytes;
  err_t err;

  LWIP_UNUSED_ARG(inp);
  LWIP_ASSERT_CORE_LOCKED();
  LWIP_ASSERT("tcp_input: invalid pbuf", p != NULL);
 8012b06:	687b      	ldr	r3, [r7, #4]
 8012b08:	2b00      	cmp	r3, #0
 8012b0a:	d105      	bne.n	8012b18 <tcp_input+0x1c>
 8012b0c:	4b9b      	ldr	r3, [pc, #620]	; (8012d7c <tcp_input+0x280>)
 8012b0e:	2283      	movs	r2, #131	; 0x83
 8012b10:	499b      	ldr	r1, [pc, #620]	; (8012d80 <tcp_input+0x284>)
 8012b12:	489c      	ldr	r0, [pc, #624]	; (8012d84 <tcp_input+0x288>)
 8012b14:	f007 f89c 	bl	8019c50 <iprintf>
  PERF_START;

  TCP_STATS_INC(tcp.recv);
  MIB2_STATS_INC(mib2.tcpinsegs);

  tcphdr = (struct tcp_hdr *)p->payload;
 8012b18:	687b      	ldr	r3, [r7, #4]
 8012b1a:	685b      	ldr	r3, [r3, #4]
 8012b1c:	4a9a      	ldr	r2, [pc, #616]	; (8012d88 <tcp_input+0x28c>)
 8012b1e:	6013      	str	r3, [r2, #0]
#if TCP_INPUT_DEBUG
  tcp_debug_print(tcphdr);
#endif

  /* Check that TCP header fits in payload */
  if (p->len < TCP_HLEN) {
 8012b20:	687b      	ldr	r3, [r7, #4]
 8012b22:	895b      	ldrh	r3, [r3, #10]
 8012b24:	2b13      	cmp	r3, #19
 8012b26:	f240 83d1 	bls.w	80132cc <tcp_input+0x7d0>
    TCP_STATS_INC(tcp.lenerr);
    goto dropped;
  }

  /* Don't even process incoming broadcasts/multicasts. */
  if (ip_addr_isbroadcast(ip_current_dest_addr(), ip_current_netif()) ||
 8012b2a:	4b98      	ldr	r3, [pc, #608]	; (8012d8c <tcp_input+0x290>)
 8012b2c:	695b      	ldr	r3, [r3, #20]
 8012b2e:	4a97      	ldr	r2, [pc, #604]	; (8012d8c <tcp_input+0x290>)
 8012b30:	6812      	ldr	r2, [r2, #0]
 8012b32:	4611      	mov	r1, r2
 8012b34:	4618      	mov	r0, r3
 8012b36:	f005 fbfb 	bl	8018330 <ip4_addr_isbroadcast_u32>
 8012b3a:	4603      	mov	r3, r0
 8012b3c:	2b00      	cmp	r3, #0
 8012b3e:	f040 83c7 	bne.w	80132d0 <tcp_input+0x7d4>
      ip_addr_ismulticast(ip_current_dest_addr())) {
 8012b42:	4b92      	ldr	r3, [pc, #584]	; (8012d8c <tcp_input+0x290>)
 8012b44:	695b      	ldr	r3, [r3, #20]
 8012b46:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
  if (ip_addr_isbroadcast(ip_current_dest_addr(), ip_current_netif()) ||
 8012b4a:	2be0      	cmp	r3, #224	; 0xe0
 8012b4c:	f000 83c0 	beq.w	80132d0 <tcp_input+0x7d4>
    }
  }
#endif /* CHECKSUM_CHECK_TCP */

  /* sanity-check header length */
  hdrlen_bytes = TCPH_HDRLEN_BYTES(tcphdr);
 8012b50:	4b8d      	ldr	r3, [pc, #564]	; (8012d88 <tcp_input+0x28c>)
 8012b52:	681b      	ldr	r3, [r3, #0]
 8012b54:	899b      	ldrh	r3, [r3, #12]
 8012b56:	b29b      	uxth	r3, r3
 8012b58:	4618      	mov	r0, r3
 8012b5a:	f7fc fdbf 	bl	800f6dc <lwip_htons>
 8012b5e:	4603      	mov	r3, r0
 8012b60:	0b1b      	lsrs	r3, r3, #12
 8012b62:	b29b      	uxth	r3, r3
 8012b64:	b2db      	uxtb	r3, r3
 8012b66:	009b      	lsls	r3, r3, #2
 8012b68:	74bb      	strb	r3, [r7, #18]
  if ((hdrlen_bytes < TCP_HLEN) || (hdrlen_bytes > p->tot_len)) {
 8012b6a:	7cbb      	ldrb	r3, [r7, #18]
 8012b6c:	2b13      	cmp	r3, #19
 8012b6e:	f240 83b1 	bls.w	80132d4 <tcp_input+0x7d8>
 8012b72:	7cbb      	ldrb	r3, [r7, #18]
 8012b74:	b29a      	uxth	r2, r3
 8012b76:	687b      	ldr	r3, [r7, #4]
 8012b78:	891b      	ldrh	r3, [r3, #8]
 8012b7a:	429a      	cmp	r2, r3
 8012b7c:	f200 83aa 	bhi.w	80132d4 <tcp_input+0x7d8>
    goto dropped;
  }

  /* Move the payload pointer in the pbuf so that it points to the
     TCP data instead of the TCP header. */
  tcphdr_optlen = (u16_t)(hdrlen_bytes - TCP_HLEN);
 8012b80:	7cbb      	ldrb	r3, [r7, #18]
 8012b82:	b29b      	uxth	r3, r3
 8012b84:	3b14      	subs	r3, #20
 8012b86:	b29a      	uxth	r2, r3
 8012b88:	4b81      	ldr	r3, [pc, #516]	; (8012d90 <tcp_input+0x294>)
 8012b8a:	801a      	strh	r2, [r3, #0]
  tcphdr_opt2 = NULL;
 8012b8c:	4b81      	ldr	r3, [pc, #516]	; (8012d94 <tcp_input+0x298>)
 8012b8e:	2200      	movs	r2, #0
 8012b90:	601a      	str	r2, [r3, #0]
  if (p->len >= hdrlen_bytes) {
 8012b92:	687b      	ldr	r3, [r7, #4]
 8012b94:	895a      	ldrh	r2, [r3, #10]
 8012b96:	7cbb      	ldrb	r3, [r7, #18]
 8012b98:	b29b      	uxth	r3, r3
 8012b9a:	429a      	cmp	r2, r3
 8012b9c:	d309      	bcc.n	8012bb2 <tcp_input+0xb6>
    /* all options are in the first pbuf */
    tcphdr_opt1len = tcphdr_optlen;
 8012b9e:	4b7c      	ldr	r3, [pc, #496]	; (8012d90 <tcp_input+0x294>)
 8012ba0:	881a      	ldrh	r2, [r3, #0]
 8012ba2:	4b7d      	ldr	r3, [pc, #500]	; (8012d98 <tcp_input+0x29c>)
 8012ba4:	801a      	strh	r2, [r3, #0]
    pbuf_remove_header(p, hdrlen_bytes); /* cannot fail */
 8012ba6:	7cbb      	ldrb	r3, [r7, #18]
 8012ba8:	4619      	mov	r1, r3
 8012baa:	6878      	ldr	r0, [r7, #4]
 8012bac:	f7fe f8f4 	bl	8010d98 <pbuf_remove_header>
 8012bb0:	e04e      	b.n	8012c50 <tcp_input+0x154>
  } else {
    u16_t opt2len;
    /* TCP header fits into first pbuf, options don't - data is in the next pbuf */
    /* there must be a next pbuf, due to hdrlen_bytes sanity check above */
    LWIP_ASSERT("p->next != NULL", p->next != NULL);
 8012bb2:	687b      	ldr	r3, [r7, #4]
 8012bb4:	681b      	ldr	r3, [r3, #0]
 8012bb6:	2b00      	cmp	r3, #0
 8012bb8:	d105      	bne.n	8012bc6 <tcp_input+0xca>
 8012bba:	4b70      	ldr	r3, [pc, #448]	; (8012d7c <tcp_input+0x280>)
 8012bbc:	22c2      	movs	r2, #194	; 0xc2
 8012bbe:	4977      	ldr	r1, [pc, #476]	; (8012d9c <tcp_input+0x2a0>)
 8012bc0:	4870      	ldr	r0, [pc, #448]	; (8012d84 <tcp_input+0x288>)
 8012bc2:	f007 f845 	bl	8019c50 <iprintf>

    /* advance over the TCP header (cannot fail) */
    pbuf_remove_header(p, TCP_HLEN);
 8012bc6:	2114      	movs	r1, #20
 8012bc8:	6878      	ldr	r0, [r7, #4]
 8012bca:	f7fe f8e5 	bl	8010d98 <pbuf_remove_header>

    /* determine how long the first and second parts of the options are */
    tcphdr_opt1len = p->len;
 8012bce:	687b      	ldr	r3, [r7, #4]
 8012bd0:	895a      	ldrh	r2, [r3, #10]
 8012bd2:	4b71      	ldr	r3, [pc, #452]	; (8012d98 <tcp_input+0x29c>)
 8012bd4:	801a      	strh	r2, [r3, #0]
    opt2len = (u16_t)(tcphdr_optlen - tcphdr_opt1len);
 8012bd6:	4b6e      	ldr	r3, [pc, #440]	; (8012d90 <tcp_input+0x294>)
 8012bd8:	881a      	ldrh	r2, [r3, #0]
 8012bda:	4b6f      	ldr	r3, [pc, #444]	; (8012d98 <tcp_input+0x29c>)
 8012bdc:	881b      	ldrh	r3, [r3, #0]
 8012bde:	1ad3      	subs	r3, r2, r3
 8012be0:	823b      	strh	r3, [r7, #16]

    /* options continue in the next pbuf: set p to zero length and hide the
        options in the next pbuf (adjusting p->tot_len) */
    pbuf_remove_header(p, tcphdr_opt1len);
 8012be2:	4b6d      	ldr	r3, [pc, #436]	; (8012d98 <tcp_input+0x29c>)
 8012be4:	881b      	ldrh	r3, [r3, #0]
 8012be6:	4619      	mov	r1, r3
 8012be8:	6878      	ldr	r0, [r7, #4]
 8012bea:	f7fe f8d5 	bl	8010d98 <pbuf_remove_header>

    /* check that the options fit in the second pbuf */
    if (opt2len > p->next->len) {
 8012bee:	687b      	ldr	r3, [r7, #4]
 8012bf0:	681b      	ldr	r3, [r3, #0]
 8012bf2:	895b      	ldrh	r3, [r3, #10]
 8012bf4:	8a3a      	ldrh	r2, [r7, #16]
 8012bf6:	429a      	cmp	r2, r3
 8012bf8:	f200 836e 	bhi.w	80132d8 <tcp_input+0x7dc>
      TCP_STATS_INC(tcp.lenerr);
      goto dropped;
    }

    /* remember the pointer to the second part of the options */
    tcphdr_opt2 = (u8_t *)p->next->payload;
 8012bfc:	687b      	ldr	r3, [r7, #4]
 8012bfe:	681b      	ldr	r3, [r3, #0]
 8012c00:	685b      	ldr	r3, [r3, #4]
 8012c02:	4a64      	ldr	r2, [pc, #400]	; (8012d94 <tcp_input+0x298>)
 8012c04:	6013      	str	r3, [r2, #0]

    /* advance p->next to point after the options, and manually
        adjust p->tot_len to keep it consistent with the changed p->next */
    pbuf_remove_header(p->next, opt2len);
 8012c06:	687b      	ldr	r3, [r7, #4]
 8012c08:	681b      	ldr	r3, [r3, #0]
 8012c0a:	8a3a      	ldrh	r2, [r7, #16]
 8012c0c:	4611      	mov	r1, r2
 8012c0e:	4618      	mov	r0, r3
 8012c10:	f7fe f8c2 	bl	8010d98 <pbuf_remove_header>
    p->tot_len = (u16_t)(p->tot_len - opt2len);
 8012c14:	687b      	ldr	r3, [r7, #4]
 8012c16:	891a      	ldrh	r2, [r3, #8]
 8012c18:	8a3b      	ldrh	r3, [r7, #16]
 8012c1a:	1ad3      	subs	r3, r2, r3
 8012c1c:	b29a      	uxth	r2, r3
 8012c1e:	687b      	ldr	r3, [r7, #4]
 8012c20:	811a      	strh	r2, [r3, #8]

    LWIP_ASSERT("p->len == 0", p->len == 0);
 8012c22:	687b      	ldr	r3, [r7, #4]
 8012c24:	895b      	ldrh	r3, [r3, #10]
 8012c26:	2b00      	cmp	r3, #0
 8012c28:	d005      	beq.n	8012c36 <tcp_input+0x13a>
 8012c2a:	4b54      	ldr	r3, [pc, #336]	; (8012d7c <tcp_input+0x280>)
 8012c2c:	22df      	movs	r2, #223	; 0xdf
 8012c2e:	495c      	ldr	r1, [pc, #368]	; (8012da0 <tcp_input+0x2a4>)
 8012c30:	4854      	ldr	r0, [pc, #336]	; (8012d84 <tcp_input+0x288>)
 8012c32:	f007 f80d 	bl	8019c50 <iprintf>
    LWIP_ASSERT("p->tot_len == p->next->tot_len", p->tot_len == p->next->tot_len);
 8012c36:	687b      	ldr	r3, [r7, #4]
 8012c38:	891a      	ldrh	r2, [r3, #8]
 8012c3a:	687b      	ldr	r3, [r7, #4]
 8012c3c:	681b      	ldr	r3, [r3, #0]
 8012c3e:	891b      	ldrh	r3, [r3, #8]
 8012c40:	429a      	cmp	r2, r3
 8012c42:	d005      	beq.n	8012c50 <tcp_input+0x154>
 8012c44:	4b4d      	ldr	r3, [pc, #308]	; (8012d7c <tcp_input+0x280>)
 8012c46:	22e0      	movs	r2, #224	; 0xe0
 8012c48:	4956      	ldr	r1, [pc, #344]	; (8012da4 <tcp_input+0x2a8>)
 8012c4a:	484e      	ldr	r0, [pc, #312]	; (8012d84 <tcp_input+0x288>)
 8012c4c:	f007 f800 	bl	8019c50 <iprintf>
  }

  /* Convert fields in TCP header to host byte order. */
  tcphdr->src = lwip_ntohs(tcphdr->src);
 8012c50:	4b4d      	ldr	r3, [pc, #308]	; (8012d88 <tcp_input+0x28c>)
 8012c52:	681b      	ldr	r3, [r3, #0]
 8012c54:	881b      	ldrh	r3, [r3, #0]
 8012c56:	b29b      	uxth	r3, r3
 8012c58:	4a4b      	ldr	r2, [pc, #300]	; (8012d88 <tcp_input+0x28c>)
 8012c5a:	6814      	ldr	r4, [r2, #0]
 8012c5c:	4618      	mov	r0, r3
 8012c5e:	f7fc fd3d 	bl	800f6dc <lwip_htons>
 8012c62:	4603      	mov	r3, r0
 8012c64:	8023      	strh	r3, [r4, #0]
  tcphdr->dest = lwip_ntohs(tcphdr->dest);
 8012c66:	4b48      	ldr	r3, [pc, #288]	; (8012d88 <tcp_input+0x28c>)
 8012c68:	681b      	ldr	r3, [r3, #0]
 8012c6a:	885b      	ldrh	r3, [r3, #2]
 8012c6c:	b29b      	uxth	r3, r3
 8012c6e:	4a46      	ldr	r2, [pc, #280]	; (8012d88 <tcp_input+0x28c>)
 8012c70:	6814      	ldr	r4, [r2, #0]
 8012c72:	4618      	mov	r0, r3
 8012c74:	f7fc fd32 	bl	800f6dc <lwip_htons>
 8012c78:	4603      	mov	r3, r0
 8012c7a:	8063      	strh	r3, [r4, #2]
  seqno = tcphdr->seqno = lwip_ntohl(tcphdr->seqno);
 8012c7c:	4b42      	ldr	r3, [pc, #264]	; (8012d88 <tcp_input+0x28c>)
 8012c7e:	681b      	ldr	r3, [r3, #0]
 8012c80:	685b      	ldr	r3, [r3, #4]
 8012c82:	4a41      	ldr	r2, [pc, #260]	; (8012d88 <tcp_input+0x28c>)
 8012c84:	6814      	ldr	r4, [r2, #0]
 8012c86:	4618      	mov	r0, r3
 8012c88:	f7fc fd3d 	bl	800f706 <lwip_htonl>
 8012c8c:	4603      	mov	r3, r0
 8012c8e:	6063      	str	r3, [r4, #4]
 8012c90:	6863      	ldr	r3, [r4, #4]
 8012c92:	4a45      	ldr	r2, [pc, #276]	; (8012da8 <tcp_input+0x2ac>)
 8012c94:	6013      	str	r3, [r2, #0]
  ackno = tcphdr->ackno = lwip_ntohl(tcphdr->ackno);
 8012c96:	4b3c      	ldr	r3, [pc, #240]	; (8012d88 <tcp_input+0x28c>)
 8012c98:	681b      	ldr	r3, [r3, #0]
 8012c9a:	689b      	ldr	r3, [r3, #8]
 8012c9c:	4a3a      	ldr	r2, [pc, #232]	; (8012d88 <tcp_input+0x28c>)
 8012c9e:	6814      	ldr	r4, [r2, #0]
 8012ca0:	4618      	mov	r0, r3
 8012ca2:	f7fc fd30 	bl	800f706 <lwip_htonl>
 8012ca6:	4603      	mov	r3, r0
 8012ca8:	60a3      	str	r3, [r4, #8]
 8012caa:	68a3      	ldr	r3, [r4, #8]
 8012cac:	4a3f      	ldr	r2, [pc, #252]	; (8012dac <tcp_input+0x2b0>)
 8012cae:	6013      	str	r3, [r2, #0]
  tcphdr->wnd = lwip_ntohs(tcphdr->wnd);
 8012cb0:	4b35      	ldr	r3, [pc, #212]	; (8012d88 <tcp_input+0x28c>)
 8012cb2:	681b      	ldr	r3, [r3, #0]
 8012cb4:	89db      	ldrh	r3, [r3, #14]
 8012cb6:	b29b      	uxth	r3, r3
 8012cb8:	4a33      	ldr	r2, [pc, #204]	; (8012d88 <tcp_input+0x28c>)
 8012cba:	6814      	ldr	r4, [r2, #0]
 8012cbc:	4618      	mov	r0, r3
 8012cbe:	f7fc fd0d 	bl	800f6dc <lwip_htons>
 8012cc2:	4603      	mov	r3, r0
 8012cc4:	81e3      	strh	r3, [r4, #14]

  flags = TCPH_FLAGS(tcphdr);
 8012cc6:	4b30      	ldr	r3, [pc, #192]	; (8012d88 <tcp_input+0x28c>)
 8012cc8:	681b      	ldr	r3, [r3, #0]
 8012cca:	899b      	ldrh	r3, [r3, #12]
 8012ccc:	b29b      	uxth	r3, r3
 8012cce:	4618      	mov	r0, r3
 8012cd0:	f7fc fd04 	bl	800f6dc <lwip_htons>
 8012cd4:	4603      	mov	r3, r0
 8012cd6:	b2db      	uxtb	r3, r3
 8012cd8:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8012cdc:	b2da      	uxtb	r2, r3
 8012cde:	4b34      	ldr	r3, [pc, #208]	; (8012db0 <tcp_input+0x2b4>)
 8012ce0:	701a      	strb	r2, [r3, #0]
  tcplen = p->tot_len;
 8012ce2:	687b      	ldr	r3, [r7, #4]
 8012ce4:	891a      	ldrh	r2, [r3, #8]
 8012ce6:	4b33      	ldr	r3, [pc, #204]	; (8012db4 <tcp_input+0x2b8>)
 8012ce8:	801a      	strh	r2, [r3, #0]
  if (flags & (TCP_FIN | TCP_SYN)) {
 8012cea:	4b31      	ldr	r3, [pc, #196]	; (8012db0 <tcp_input+0x2b4>)
 8012cec:	781b      	ldrb	r3, [r3, #0]
 8012cee:	f003 0303 	and.w	r3, r3, #3
 8012cf2:	2b00      	cmp	r3, #0
 8012cf4:	d00c      	beq.n	8012d10 <tcp_input+0x214>
    tcplen++;
 8012cf6:	4b2f      	ldr	r3, [pc, #188]	; (8012db4 <tcp_input+0x2b8>)
 8012cf8:	881b      	ldrh	r3, [r3, #0]
 8012cfa:	3301      	adds	r3, #1
 8012cfc:	b29a      	uxth	r2, r3
 8012cfe:	4b2d      	ldr	r3, [pc, #180]	; (8012db4 <tcp_input+0x2b8>)
 8012d00:	801a      	strh	r2, [r3, #0]
    if (tcplen < p->tot_len) {
 8012d02:	687b      	ldr	r3, [r7, #4]
 8012d04:	891a      	ldrh	r2, [r3, #8]
 8012d06:	4b2b      	ldr	r3, [pc, #172]	; (8012db4 <tcp_input+0x2b8>)
 8012d08:	881b      	ldrh	r3, [r3, #0]
 8012d0a:	429a      	cmp	r2, r3
 8012d0c:	f200 82e6 	bhi.w	80132dc <tcp_input+0x7e0>
    }
  }

  /* Demultiplex an incoming segment. First, we check if it is destined
     for an active connection. */
  prev = NULL;
 8012d10:	2300      	movs	r3, #0
 8012d12:	61bb      	str	r3, [r7, #24]

  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 8012d14:	4b28      	ldr	r3, [pc, #160]	; (8012db8 <tcp_input+0x2bc>)
 8012d16:	681b      	ldr	r3, [r3, #0]
 8012d18:	61fb      	str	r3, [r7, #28]
 8012d1a:	e09d      	b.n	8012e58 <tcp_input+0x35c>
    LWIP_ASSERT("tcp_input: active pcb->state != CLOSED", pcb->state != CLOSED);
 8012d1c:	69fb      	ldr	r3, [r7, #28]
 8012d1e:	7d1b      	ldrb	r3, [r3, #20]
 8012d20:	2b00      	cmp	r3, #0
 8012d22:	d105      	bne.n	8012d30 <tcp_input+0x234>
 8012d24:	4b15      	ldr	r3, [pc, #84]	; (8012d7c <tcp_input+0x280>)
 8012d26:	22fb      	movs	r2, #251	; 0xfb
 8012d28:	4924      	ldr	r1, [pc, #144]	; (8012dbc <tcp_input+0x2c0>)
 8012d2a:	4816      	ldr	r0, [pc, #88]	; (8012d84 <tcp_input+0x288>)
 8012d2c:	f006 ff90 	bl	8019c50 <iprintf>
    LWIP_ASSERT("tcp_input: active pcb->state != TIME-WAIT", pcb->state != TIME_WAIT);
 8012d30:	69fb      	ldr	r3, [r7, #28]
 8012d32:	7d1b      	ldrb	r3, [r3, #20]
 8012d34:	2b0a      	cmp	r3, #10
 8012d36:	d105      	bne.n	8012d44 <tcp_input+0x248>
 8012d38:	4b10      	ldr	r3, [pc, #64]	; (8012d7c <tcp_input+0x280>)
 8012d3a:	22fc      	movs	r2, #252	; 0xfc
 8012d3c:	4920      	ldr	r1, [pc, #128]	; (8012dc0 <tcp_input+0x2c4>)
 8012d3e:	4811      	ldr	r0, [pc, #68]	; (8012d84 <tcp_input+0x288>)
 8012d40:	f006 ff86 	bl	8019c50 <iprintf>
    LWIP_ASSERT("tcp_input: active pcb->state != LISTEN", pcb->state != LISTEN);
 8012d44:	69fb      	ldr	r3, [r7, #28]
 8012d46:	7d1b      	ldrb	r3, [r3, #20]
 8012d48:	2b01      	cmp	r3, #1
 8012d4a:	d105      	bne.n	8012d58 <tcp_input+0x25c>
 8012d4c:	4b0b      	ldr	r3, [pc, #44]	; (8012d7c <tcp_input+0x280>)
 8012d4e:	22fd      	movs	r2, #253	; 0xfd
 8012d50:	491c      	ldr	r1, [pc, #112]	; (8012dc4 <tcp_input+0x2c8>)
 8012d52:	480c      	ldr	r0, [pc, #48]	; (8012d84 <tcp_input+0x288>)
 8012d54:	f006 ff7c 	bl	8019c50 <iprintf>

    /* check if PCB is bound to specific netif */
    if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 8012d58:	69fb      	ldr	r3, [r7, #28]
 8012d5a:	7a1b      	ldrb	r3, [r3, #8]
 8012d5c:	2b00      	cmp	r3, #0
 8012d5e:	d033      	beq.n	8012dc8 <tcp_input+0x2cc>
        (pcb->netif_idx != netif_get_index(ip_data.current_input_netif))) {
 8012d60:	69fb      	ldr	r3, [r7, #28]
 8012d62:	7a1a      	ldrb	r2, [r3, #8]
 8012d64:	4b09      	ldr	r3, [pc, #36]	; (8012d8c <tcp_input+0x290>)
 8012d66:	685b      	ldr	r3, [r3, #4]
 8012d68:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8012d6c:	3301      	adds	r3, #1
 8012d6e:	b2db      	uxtb	r3, r3
    if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 8012d70:	429a      	cmp	r2, r3
 8012d72:	d029      	beq.n	8012dc8 <tcp_input+0x2cc>
      prev = pcb;
 8012d74:	69fb      	ldr	r3, [r7, #28]
 8012d76:	61bb      	str	r3, [r7, #24]
      continue;
 8012d78:	e06b      	b.n	8012e52 <tcp_input+0x356>
 8012d7a:	bf00      	nop
 8012d7c:	0801d77c 	.word	0x0801d77c
 8012d80:	0801d7b0 	.word	0x0801d7b0
 8012d84:	0801d7c8 	.word	0x0801d7c8
 8012d88:	20007100 	.word	0x20007100
 8012d8c:	200007fc 	.word	0x200007fc
 8012d90:	20007104 	.word	0x20007104
 8012d94:	20007108 	.word	0x20007108
 8012d98:	20007106 	.word	0x20007106
 8012d9c:	0801d7f0 	.word	0x0801d7f0
 8012da0:	0801d800 	.word	0x0801d800
 8012da4:	0801d80c 	.word	0x0801d80c
 8012da8:	20007110 	.word	0x20007110
 8012dac:	20007114 	.word	0x20007114
 8012db0:	2000711c 	.word	0x2000711c
 8012db4:	2000711a 	.word	0x2000711a
 8012db8:	200070e4 	.word	0x200070e4
 8012dbc:	0801d82c 	.word	0x0801d82c
 8012dc0:	0801d854 	.word	0x0801d854
 8012dc4:	0801d880 	.word	0x0801d880
    }

    if (pcb->remote_port == tcphdr->src &&
 8012dc8:	69fb      	ldr	r3, [r7, #28]
 8012dca:	8b1a      	ldrh	r2, [r3, #24]
 8012dcc:	4b72      	ldr	r3, [pc, #456]	; (8012f98 <tcp_input+0x49c>)
 8012dce:	681b      	ldr	r3, [r3, #0]
 8012dd0:	881b      	ldrh	r3, [r3, #0]
 8012dd2:	b29b      	uxth	r3, r3
 8012dd4:	429a      	cmp	r2, r3
 8012dd6:	d13a      	bne.n	8012e4e <tcp_input+0x352>
        pcb->local_port == tcphdr->dest &&
 8012dd8:	69fb      	ldr	r3, [r7, #28]
 8012dda:	8ada      	ldrh	r2, [r3, #22]
 8012ddc:	4b6e      	ldr	r3, [pc, #440]	; (8012f98 <tcp_input+0x49c>)
 8012dde:	681b      	ldr	r3, [r3, #0]
 8012de0:	885b      	ldrh	r3, [r3, #2]
 8012de2:	b29b      	uxth	r3, r3
    if (pcb->remote_port == tcphdr->src &&
 8012de4:	429a      	cmp	r2, r3
 8012de6:	d132      	bne.n	8012e4e <tcp_input+0x352>
        ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()) &&
 8012de8:	69fb      	ldr	r3, [r7, #28]
 8012dea:	685a      	ldr	r2, [r3, #4]
 8012dec:	4b6b      	ldr	r3, [pc, #428]	; (8012f9c <tcp_input+0x4a0>)
 8012dee:	691b      	ldr	r3, [r3, #16]
        pcb->local_port == tcphdr->dest &&
 8012df0:	429a      	cmp	r2, r3
 8012df2:	d12c      	bne.n	8012e4e <tcp_input+0x352>
        ip_addr_cmp(&pcb->local_ip, ip_current_dest_addr())) {
 8012df4:	69fb      	ldr	r3, [r7, #28]
 8012df6:	681a      	ldr	r2, [r3, #0]
 8012df8:	4b68      	ldr	r3, [pc, #416]	; (8012f9c <tcp_input+0x4a0>)
 8012dfa:	695b      	ldr	r3, [r3, #20]
        ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()) &&
 8012dfc:	429a      	cmp	r2, r3
 8012dfe:	d126      	bne.n	8012e4e <tcp_input+0x352>
      /* Move this PCB to the front of the list so that subsequent
         lookups will be faster (we exploit locality in TCP segment
         arrivals). */
      LWIP_ASSERT("tcp_input: pcb->next != pcb (before cache)", pcb->next != pcb);
 8012e00:	69fb      	ldr	r3, [r7, #28]
 8012e02:	68db      	ldr	r3, [r3, #12]
 8012e04:	69fa      	ldr	r2, [r7, #28]
 8012e06:	429a      	cmp	r2, r3
 8012e08:	d106      	bne.n	8012e18 <tcp_input+0x31c>
 8012e0a:	4b65      	ldr	r3, [pc, #404]	; (8012fa0 <tcp_input+0x4a4>)
 8012e0c:	f240 120d 	movw	r2, #269	; 0x10d
 8012e10:	4964      	ldr	r1, [pc, #400]	; (8012fa4 <tcp_input+0x4a8>)
 8012e12:	4865      	ldr	r0, [pc, #404]	; (8012fa8 <tcp_input+0x4ac>)
 8012e14:	f006 ff1c 	bl	8019c50 <iprintf>
      if (prev != NULL) {
 8012e18:	69bb      	ldr	r3, [r7, #24]
 8012e1a:	2b00      	cmp	r3, #0
 8012e1c:	d00a      	beq.n	8012e34 <tcp_input+0x338>
        prev->next = pcb->next;
 8012e1e:	69fb      	ldr	r3, [r7, #28]
 8012e20:	68da      	ldr	r2, [r3, #12]
 8012e22:	69bb      	ldr	r3, [r7, #24]
 8012e24:	60da      	str	r2, [r3, #12]
        pcb->next = tcp_active_pcbs;
 8012e26:	4b61      	ldr	r3, [pc, #388]	; (8012fac <tcp_input+0x4b0>)
 8012e28:	681a      	ldr	r2, [r3, #0]
 8012e2a:	69fb      	ldr	r3, [r7, #28]
 8012e2c:	60da      	str	r2, [r3, #12]
        tcp_active_pcbs = pcb;
 8012e2e:	4a5f      	ldr	r2, [pc, #380]	; (8012fac <tcp_input+0x4b0>)
 8012e30:	69fb      	ldr	r3, [r7, #28]
 8012e32:	6013      	str	r3, [r2, #0]
      } else {
        TCP_STATS_INC(tcp.cachehit);
      }
      LWIP_ASSERT("tcp_input: pcb->next != pcb (after cache)", pcb->next != pcb);
 8012e34:	69fb      	ldr	r3, [r7, #28]
 8012e36:	68db      	ldr	r3, [r3, #12]
 8012e38:	69fa      	ldr	r2, [r7, #28]
 8012e3a:	429a      	cmp	r2, r3
 8012e3c:	d111      	bne.n	8012e62 <tcp_input+0x366>
 8012e3e:	4b58      	ldr	r3, [pc, #352]	; (8012fa0 <tcp_input+0x4a4>)
 8012e40:	f240 1215 	movw	r2, #277	; 0x115
 8012e44:	495a      	ldr	r1, [pc, #360]	; (8012fb0 <tcp_input+0x4b4>)
 8012e46:	4858      	ldr	r0, [pc, #352]	; (8012fa8 <tcp_input+0x4ac>)
 8012e48:	f006 ff02 	bl	8019c50 <iprintf>
      break;
 8012e4c:	e009      	b.n	8012e62 <tcp_input+0x366>
    }
    prev = pcb;
 8012e4e:	69fb      	ldr	r3, [r7, #28]
 8012e50:	61bb      	str	r3, [r7, #24]
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 8012e52:	69fb      	ldr	r3, [r7, #28]
 8012e54:	68db      	ldr	r3, [r3, #12]
 8012e56:	61fb      	str	r3, [r7, #28]
 8012e58:	69fb      	ldr	r3, [r7, #28]
 8012e5a:	2b00      	cmp	r3, #0
 8012e5c:	f47f af5e 	bne.w	8012d1c <tcp_input+0x220>
 8012e60:	e000      	b.n	8012e64 <tcp_input+0x368>
      break;
 8012e62:	bf00      	nop
  }

  if (pcb == NULL) {
 8012e64:	69fb      	ldr	r3, [r7, #28]
 8012e66:	2b00      	cmp	r3, #0
 8012e68:	f040 80aa 	bne.w	8012fc0 <tcp_input+0x4c4>
    /* If it did not go to an active connection, we check the connections
       in the TIME-WAIT state. */
    for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 8012e6c:	4b51      	ldr	r3, [pc, #324]	; (8012fb4 <tcp_input+0x4b8>)
 8012e6e:	681b      	ldr	r3, [r3, #0]
 8012e70:	61fb      	str	r3, [r7, #28]
 8012e72:	e03f      	b.n	8012ef4 <tcp_input+0x3f8>
      LWIP_ASSERT("tcp_input: TIME-WAIT pcb->state == TIME-WAIT", pcb->state == TIME_WAIT);
 8012e74:	69fb      	ldr	r3, [r7, #28]
 8012e76:	7d1b      	ldrb	r3, [r3, #20]
 8012e78:	2b0a      	cmp	r3, #10
 8012e7a:	d006      	beq.n	8012e8a <tcp_input+0x38e>
 8012e7c:	4b48      	ldr	r3, [pc, #288]	; (8012fa0 <tcp_input+0x4a4>)
 8012e7e:	f240 121f 	movw	r2, #287	; 0x11f
 8012e82:	494d      	ldr	r1, [pc, #308]	; (8012fb8 <tcp_input+0x4bc>)
 8012e84:	4848      	ldr	r0, [pc, #288]	; (8012fa8 <tcp_input+0x4ac>)
 8012e86:	f006 fee3 	bl	8019c50 <iprintf>

      /* check if PCB is bound to specific netif */
      if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 8012e8a:	69fb      	ldr	r3, [r7, #28]
 8012e8c:	7a1b      	ldrb	r3, [r3, #8]
 8012e8e:	2b00      	cmp	r3, #0
 8012e90:	d009      	beq.n	8012ea6 <tcp_input+0x3aa>
          (pcb->netif_idx != netif_get_index(ip_data.current_input_netif))) {
 8012e92:	69fb      	ldr	r3, [r7, #28]
 8012e94:	7a1a      	ldrb	r2, [r3, #8]
 8012e96:	4b41      	ldr	r3, [pc, #260]	; (8012f9c <tcp_input+0x4a0>)
 8012e98:	685b      	ldr	r3, [r3, #4]
 8012e9a:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8012e9e:	3301      	adds	r3, #1
 8012ea0:	b2db      	uxtb	r3, r3
      if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 8012ea2:	429a      	cmp	r2, r3
 8012ea4:	d122      	bne.n	8012eec <tcp_input+0x3f0>
        continue;
      }

      if (pcb->remote_port == tcphdr->src &&
 8012ea6:	69fb      	ldr	r3, [r7, #28]
 8012ea8:	8b1a      	ldrh	r2, [r3, #24]
 8012eaa:	4b3b      	ldr	r3, [pc, #236]	; (8012f98 <tcp_input+0x49c>)
 8012eac:	681b      	ldr	r3, [r3, #0]
 8012eae:	881b      	ldrh	r3, [r3, #0]
 8012eb0:	b29b      	uxth	r3, r3
 8012eb2:	429a      	cmp	r2, r3
 8012eb4:	d11b      	bne.n	8012eee <tcp_input+0x3f2>
          pcb->local_port == tcphdr->dest &&
 8012eb6:	69fb      	ldr	r3, [r7, #28]
 8012eb8:	8ada      	ldrh	r2, [r3, #22]
 8012eba:	4b37      	ldr	r3, [pc, #220]	; (8012f98 <tcp_input+0x49c>)
 8012ebc:	681b      	ldr	r3, [r3, #0]
 8012ebe:	885b      	ldrh	r3, [r3, #2]
 8012ec0:	b29b      	uxth	r3, r3
      if (pcb->remote_port == tcphdr->src &&
 8012ec2:	429a      	cmp	r2, r3
 8012ec4:	d113      	bne.n	8012eee <tcp_input+0x3f2>
          ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()) &&
 8012ec6:	69fb      	ldr	r3, [r7, #28]
 8012ec8:	685a      	ldr	r2, [r3, #4]
 8012eca:	4b34      	ldr	r3, [pc, #208]	; (8012f9c <tcp_input+0x4a0>)
 8012ecc:	691b      	ldr	r3, [r3, #16]
          pcb->local_port == tcphdr->dest &&
 8012ece:	429a      	cmp	r2, r3
 8012ed0:	d10d      	bne.n	8012eee <tcp_input+0x3f2>
          ip_addr_cmp(&pcb->local_ip, ip_current_dest_addr())) {
 8012ed2:	69fb      	ldr	r3, [r7, #28]
 8012ed4:	681a      	ldr	r2, [r3, #0]
 8012ed6:	4b31      	ldr	r3, [pc, #196]	; (8012f9c <tcp_input+0x4a0>)
 8012ed8:	695b      	ldr	r3, [r3, #20]
          ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()) &&
 8012eda:	429a      	cmp	r2, r3
 8012edc:	d107      	bne.n	8012eee <tcp_input+0x3f2>
#ifdef LWIP_HOOK_TCP_INPACKET_PCB
        if (LWIP_HOOK_TCP_INPACKET_PCB(pcb, tcphdr, tcphdr_optlen, tcphdr_opt1len,
                                       tcphdr_opt2, p) == ERR_OK)
#endif
        {
          tcp_timewait_input(pcb);
 8012ede:	69f8      	ldr	r0, [r7, #28]
 8012ee0:	f000 fb56 	bl	8013590 <tcp_timewait_input>
        }
        pbuf_free(p);
 8012ee4:	6878      	ldr	r0, [r7, #4]
 8012ee6:	f7fd ffdd 	bl	8010ea4 <pbuf_free>
        return;
 8012eea:	e1fd      	b.n	80132e8 <tcp_input+0x7ec>
        continue;
 8012eec:	bf00      	nop
    for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 8012eee:	69fb      	ldr	r3, [r7, #28]
 8012ef0:	68db      	ldr	r3, [r3, #12]
 8012ef2:	61fb      	str	r3, [r7, #28]
 8012ef4:	69fb      	ldr	r3, [r7, #28]
 8012ef6:	2b00      	cmp	r3, #0
 8012ef8:	d1bc      	bne.n	8012e74 <tcp_input+0x378>
      }
    }

    /* Finally, if we still did not get a match, we check all PCBs that
       are LISTENing for incoming connections. */
    prev = NULL;
 8012efa:	2300      	movs	r3, #0
 8012efc:	61bb      	str	r3, [r7, #24]
    for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = lpcb->next) {
 8012efe:	4b2f      	ldr	r3, [pc, #188]	; (8012fbc <tcp_input+0x4c0>)
 8012f00:	681b      	ldr	r3, [r3, #0]
 8012f02:	617b      	str	r3, [r7, #20]
 8012f04:	e02a      	b.n	8012f5c <tcp_input+0x460>
      /* check if PCB is bound to specific netif */
      if ((lpcb->netif_idx != NETIF_NO_INDEX) &&
 8012f06:	697b      	ldr	r3, [r7, #20]
 8012f08:	7a1b      	ldrb	r3, [r3, #8]
 8012f0a:	2b00      	cmp	r3, #0
 8012f0c:	d00c      	beq.n	8012f28 <tcp_input+0x42c>
          (lpcb->netif_idx != netif_get_index(ip_data.current_input_netif))) {
 8012f0e:	697b      	ldr	r3, [r7, #20]
 8012f10:	7a1a      	ldrb	r2, [r3, #8]
 8012f12:	4b22      	ldr	r3, [pc, #136]	; (8012f9c <tcp_input+0x4a0>)
 8012f14:	685b      	ldr	r3, [r3, #4]
 8012f16:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8012f1a:	3301      	adds	r3, #1
 8012f1c:	b2db      	uxtb	r3, r3
      if ((lpcb->netif_idx != NETIF_NO_INDEX) &&
 8012f1e:	429a      	cmp	r2, r3
 8012f20:	d002      	beq.n	8012f28 <tcp_input+0x42c>
        prev = (struct tcp_pcb *)lpcb;
 8012f22:	697b      	ldr	r3, [r7, #20]
 8012f24:	61bb      	str	r3, [r7, #24]
        continue;
 8012f26:	e016      	b.n	8012f56 <tcp_input+0x45a>
      }

      if (lpcb->local_port == tcphdr->dest) {
 8012f28:	697b      	ldr	r3, [r7, #20]
 8012f2a:	8ada      	ldrh	r2, [r3, #22]
 8012f2c:	4b1a      	ldr	r3, [pc, #104]	; (8012f98 <tcp_input+0x49c>)
 8012f2e:	681b      	ldr	r3, [r3, #0]
 8012f30:	885b      	ldrh	r3, [r3, #2]
 8012f32:	b29b      	uxth	r3, r3
 8012f34:	429a      	cmp	r2, r3
 8012f36:	d10c      	bne.n	8012f52 <tcp_input+0x456>
          lpcb_prev = prev;
#else /* SO_REUSE */
          break;
#endif /* SO_REUSE */
        } else if (IP_ADDR_PCB_VERSION_MATCH_EXACT(lpcb, ip_current_dest_addr())) {
          if (ip_addr_cmp(&lpcb->local_ip, ip_current_dest_addr())) {
 8012f38:	697b      	ldr	r3, [r7, #20]
 8012f3a:	681a      	ldr	r2, [r3, #0]
 8012f3c:	4b17      	ldr	r3, [pc, #92]	; (8012f9c <tcp_input+0x4a0>)
 8012f3e:	695b      	ldr	r3, [r3, #20]
 8012f40:	429a      	cmp	r2, r3
 8012f42:	d00f      	beq.n	8012f64 <tcp_input+0x468>
            /* found an exact match */
            break;
          } else if (ip_addr_isany(&lpcb->local_ip)) {
 8012f44:	697b      	ldr	r3, [r7, #20]
 8012f46:	2b00      	cmp	r3, #0
 8012f48:	d00d      	beq.n	8012f66 <tcp_input+0x46a>
 8012f4a:	697b      	ldr	r3, [r7, #20]
 8012f4c:	681b      	ldr	r3, [r3, #0]
 8012f4e:	2b00      	cmp	r3, #0
 8012f50:	d009      	beq.n	8012f66 <tcp_input+0x46a>
            break;
#endif /* SO_REUSE */
          }
        }
      }
      prev = (struct tcp_pcb *)lpcb;
 8012f52:	697b      	ldr	r3, [r7, #20]
 8012f54:	61bb      	str	r3, [r7, #24]
    for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = lpcb->next) {
 8012f56:	697b      	ldr	r3, [r7, #20]
 8012f58:	68db      	ldr	r3, [r3, #12]
 8012f5a:	617b      	str	r3, [r7, #20]
 8012f5c:	697b      	ldr	r3, [r7, #20]
 8012f5e:	2b00      	cmp	r3, #0
 8012f60:	d1d1      	bne.n	8012f06 <tcp_input+0x40a>
 8012f62:	e000      	b.n	8012f66 <tcp_input+0x46a>
            break;
 8012f64:	bf00      	nop
      /* only pass to ANY if no specific local IP has been found */
      lpcb = lpcb_any;
      prev = lpcb_prev;
    }
#endif /* SO_REUSE */
    if (lpcb != NULL) {
 8012f66:	697b      	ldr	r3, [r7, #20]
 8012f68:	2b00      	cmp	r3, #0
 8012f6a:	d029      	beq.n	8012fc0 <tcp_input+0x4c4>
      /* Move this PCB to the front of the list so that subsequent
         lookups will be faster (we exploit locality in TCP segment
         arrivals). */
      if (prev != NULL) {
 8012f6c:	69bb      	ldr	r3, [r7, #24]
 8012f6e:	2b00      	cmp	r3, #0
 8012f70:	d00a      	beq.n	8012f88 <tcp_input+0x48c>
        ((struct tcp_pcb_listen *)prev)->next = lpcb->next;
 8012f72:	697b      	ldr	r3, [r7, #20]
 8012f74:	68da      	ldr	r2, [r3, #12]
 8012f76:	69bb      	ldr	r3, [r7, #24]
 8012f78:	60da      	str	r2, [r3, #12]
        /* our successor is the remainder of the listening list */
        lpcb->next = tcp_listen_pcbs.listen_pcbs;
 8012f7a:	4b10      	ldr	r3, [pc, #64]	; (8012fbc <tcp_input+0x4c0>)
 8012f7c:	681a      	ldr	r2, [r3, #0]
 8012f7e:	697b      	ldr	r3, [r7, #20]
 8012f80:	60da      	str	r2, [r3, #12]
        /* put this listening pcb at the head of the listening list */
        tcp_listen_pcbs.listen_pcbs = lpcb;
 8012f82:	4a0e      	ldr	r2, [pc, #56]	; (8012fbc <tcp_input+0x4c0>)
 8012f84:	697b      	ldr	r3, [r7, #20]
 8012f86:	6013      	str	r3, [r2, #0]
#ifdef LWIP_HOOK_TCP_INPACKET_PCB
      if (LWIP_HOOK_TCP_INPACKET_PCB((struct tcp_pcb *)lpcb, tcphdr, tcphdr_optlen,
                                     tcphdr_opt1len, tcphdr_opt2, p) == ERR_OK)
#endif
      {
        tcp_listen_input(lpcb);
 8012f88:	6978      	ldr	r0, [r7, #20]
 8012f8a:	f000 fa03 	bl	8013394 <tcp_listen_input>
      }
      pbuf_free(p);
 8012f8e:	6878      	ldr	r0, [r7, #4]
 8012f90:	f7fd ff88 	bl	8010ea4 <pbuf_free>
      return;
 8012f94:	e1a8      	b.n	80132e8 <tcp_input+0x7ec>
 8012f96:	bf00      	nop
 8012f98:	20007100 	.word	0x20007100
 8012f9c:	200007fc 	.word	0x200007fc
 8012fa0:	0801d77c 	.word	0x0801d77c
 8012fa4:	0801d8a8 	.word	0x0801d8a8
 8012fa8:	0801d7c8 	.word	0x0801d7c8
 8012fac:	200070e4 	.word	0x200070e4
 8012fb0:	0801d8d4 	.word	0x0801d8d4
 8012fb4:	200070e8 	.word	0x200070e8
 8012fb8:	0801d900 	.word	0x0801d900
 8012fbc:	200070e0 	.word	0x200070e0
      tcphdr_opt1len, tcphdr_opt2, p) != ERR_OK) {
    pbuf_free(p);
    return;
  }
#endif
  if (pcb != NULL) {
 8012fc0:	69fb      	ldr	r3, [r7, #28]
 8012fc2:	2b00      	cmp	r3, #0
 8012fc4:	f000 8158 	beq.w	8013278 <tcp_input+0x77c>
#if TCP_INPUT_DEBUG
    tcp_debug_print_state(pcb->state);
#endif /* TCP_INPUT_DEBUG */

    /* Set up a tcp_seg structure. */
    inseg.next = NULL;
 8012fc8:	4b95      	ldr	r3, [pc, #596]	; (8013220 <tcp_input+0x724>)
 8012fca:	2200      	movs	r2, #0
 8012fcc:	601a      	str	r2, [r3, #0]
    inseg.len = p->tot_len;
 8012fce:	687b      	ldr	r3, [r7, #4]
 8012fd0:	891a      	ldrh	r2, [r3, #8]
 8012fd2:	4b93      	ldr	r3, [pc, #588]	; (8013220 <tcp_input+0x724>)
 8012fd4:	811a      	strh	r2, [r3, #8]
    inseg.p = p;
 8012fd6:	4a92      	ldr	r2, [pc, #584]	; (8013220 <tcp_input+0x724>)
 8012fd8:	687b      	ldr	r3, [r7, #4]
 8012fda:	6053      	str	r3, [r2, #4]
    inseg.tcphdr = tcphdr;
 8012fdc:	4b91      	ldr	r3, [pc, #580]	; (8013224 <tcp_input+0x728>)
 8012fde:	681b      	ldr	r3, [r3, #0]
 8012fe0:	4a8f      	ldr	r2, [pc, #572]	; (8013220 <tcp_input+0x724>)
 8012fe2:	60d3      	str	r3, [r2, #12]

    recv_data = NULL;
 8012fe4:	4b90      	ldr	r3, [pc, #576]	; (8013228 <tcp_input+0x72c>)
 8012fe6:	2200      	movs	r2, #0
 8012fe8:	601a      	str	r2, [r3, #0]
    recv_flags = 0;
 8012fea:	4b90      	ldr	r3, [pc, #576]	; (801322c <tcp_input+0x730>)
 8012fec:	2200      	movs	r2, #0
 8012fee:	701a      	strb	r2, [r3, #0]
    recv_acked = 0;
 8012ff0:	4b8f      	ldr	r3, [pc, #572]	; (8013230 <tcp_input+0x734>)
 8012ff2:	2200      	movs	r2, #0
 8012ff4:	801a      	strh	r2, [r3, #0]

    if (flags & TCP_PSH) {
 8012ff6:	4b8f      	ldr	r3, [pc, #572]	; (8013234 <tcp_input+0x738>)
 8012ff8:	781b      	ldrb	r3, [r3, #0]
 8012ffa:	f003 0308 	and.w	r3, r3, #8
 8012ffe:	2b00      	cmp	r3, #0
 8013000:	d006      	beq.n	8013010 <tcp_input+0x514>
      p->flags |= PBUF_FLAG_PUSH;
 8013002:	687b      	ldr	r3, [r7, #4]
 8013004:	7b5b      	ldrb	r3, [r3, #13]
 8013006:	f043 0301 	orr.w	r3, r3, #1
 801300a:	b2da      	uxtb	r2, r3
 801300c:	687b      	ldr	r3, [r7, #4]
 801300e:	735a      	strb	r2, [r3, #13]
    }

    /* If there is data which was previously "refused" by upper layer */
    if (pcb->refused_data != NULL) {
 8013010:	69fb      	ldr	r3, [r7, #28]
 8013012:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8013014:	2b00      	cmp	r3, #0
 8013016:	d017      	beq.n	8013048 <tcp_input+0x54c>
      if ((tcp_process_refused_data(pcb) == ERR_ABRT) ||
 8013018:	69f8      	ldr	r0, [r7, #28]
 801301a:	f7ff f927 	bl	801226c <tcp_process_refused_data>
 801301e:	4603      	mov	r3, r0
 8013020:	f113 0f0d 	cmn.w	r3, #13
 8013024:	d007      	beq.n	8013036 <tcp_input+0x53a>
          ((pcb->refused_data != NULL) && (tcplen > 0))) {
 8013026:	69fb      	ldr	r3, [r7, #28]
 8013028:	6f9b      	ldr	r3, [r3, #120]	; 0x78
      if ((tcp_process_refused_data(pcb) == ERR_ABRT) ||
 801302a:	2b00      	cmp	r3, #0
 801302c:	d00c      	beq.n	8013048 <tcp_input+0x54c>
          ((pcb->refused_data != NULL) && (tcplen > 0))) {
 801302e:	4b82      	ldr	r3, [pc, #520]	; (8013238 <tcp_input+0x73c>)
 8013030:	881b      	ldrh	r3, [r3, #0]
 8013032:	2b00      	cmp	r3, #0
 8013034:	d008      	beq.n	8013048 <tcp_input+0x54c>
        /* pcb has been aborted or refused data is still refused and the new
           segment contains data */
        if (pcb->rcv_ann_wnd == 0) {
 8013036:	69fb      	ldr	r3, [r7, #28]
 8013038:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 801303a:	2b00      	cmp	r3, #0
 801303c:	f040 80e4 	bne.w	8013208 <tcp_input+0x70c>
          /* this is a zero-window probe, we respond to it with current RCV.NXT
          and drop the data segment */
          tcp_send_empty_ack(pcb);
 8013040:	69f8      	ldr	r0, [r7, #28]
 8013042:	f003 f9ad 	bl	80163a0 <tcp_send_empty_ack>
        }
        TCP_STATS_INC(tcp.drop);
        MIB2_STATS_INC(mib2.tcpinerrs);
        goto aborted;
 8013046:	e0df      	b.n	8013208 <tcp_input+0x70c>
      }
    }
    tcp_input_pcb = pcb;
 8013048:	4a7c      	ldr	r2, [pc, #496]	; (801323c <tcp_input+0x740>)
 801304a:	69fb      	ldr	r3, [r7, #28]
 801304c:	6013      	str	r3, [r2, #0]
    err = tcp_process(pcb);
 801304e:	69f8      	ldr	r0, [r7, #28]
 8013050:	f000 fb18 	bl	8013684 <tcp_process>
 8013054:	4603      	mov	r3, r0
 8013056:	74fb      	strb	r3, [r7, #19]
    /* A return value of ERR_ABRT means that tcp_abort() was called
       and that the pcb has been freed. If so, we don't do anything. */
    if (err != ERR_ABRT) {
 8013058:	f997 3013 	ldrsb.w	r3, [r7, #19]
 801305c:	f113 0f0d 	cmn.w	r3, #13
 8013060:	f000 80d4 	beq.w	801320c <tcp_input+0x710>
      if (recv_flags & TF_RESET) {
 8013064:	4b71      	ldr	r3, [pc, #452]	; (801322c <tcp_input+0x730>)
 8013066:	781b      	ldrb	r3, [r3, #0]
 8013068:	f003 0308 	and.w	r3, r3, #8
 801306c:	2b00      	cmp	r3, #0
 801306e:	d015      	beq.n	801309c <tcp_input+0x5a0>
        /* TF_RESET means that the connection was reset by the other
           end. We then call the error callback to inform the
           application that the connection is dead before we
           deallocate the PCB. */
        TCP_EVENT_ERR(pcb->state, pcb->errf, pcb->callback_arg, ERR_RST);
 8013070:	69fb      	ldr	r3, [r7, #28]
 8013072:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8013076:	2b00      	cmp	r3, #0
 8013078:	d008      	beq.n	801308c <tcp_input+0x590>
 801307a:	69fb      	ldr	r3, [r7, #28]
 801307c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8013080:	69fa      	ldr	r2, [r7, #28]
 8013082:	6912      	ldr	r2, [r2, #16]
 8013084:	f06f 010d 	mvn.w	r1, #13
 8013088:	4610      	mov	r0, r2
 801308a:	4798      	blx	r3
        tcp_pcb_remove(&tcp_active_pcbs, pcb);
 801308c:	69f9      	ldr	r1, [r7, #28]
 801308e:	486c      	ldr	r0, [pc, #432]	; (8013240 <tcp_input+0x744>)
 8013090:	f7ff fbbc 	bl	801280c <tcp_pcb_remove>
        tcp_free(pcb);
 8013094:	69f8      	ldr	r0, [r7, #28]
 8013096:	f7fe f9a5 	bl	80113e4 <tcp_free>
 801309a:	e0da      	b.n	8013252 <tcp_input+0x756>
      } else {
        err = ERR_OK;
 801309c:	2300      	movs	r3, #0
 801309e:	74fb      	strb	r3, [r7, #19]
        /* If the application has registered a "sent" function to be
           called when new send buffer space is available, we call it
           now. */
        if (recv_acked > 0) {
 80130a0:	4b63      	ldr	r3, [pc, #396]	; (8013230 <tcp_input+0x734>)
 80130a2:	881b      	ldrh	r3, [r3, #0]
 80130a4:	2b00      	cmp	r3, #0
 80130a6:	d01d      	beq.n	80130e4 <tcp_input+0x5e8>
          while (acked > 0) {
            acked16 = (u16_t)LWIP_MIN(acked, 0xffffu);
            acked -= acked16;
#else
          {
            acked16 = recv_acked;
 80130a8:	4b61      	ldr	r3, [pc, #388]	; (8013230 <tcp_input+0x734>)
 80130aa:	881b      	ldrh	r3, [r3, #0]
 80130ac:	81fb      	strh	r3, [r7, #14]
#endif
            TCP_EVENT_SENT(pcb, (u16_t)acked16, err);
 80130ae:	69fb      	ldr	r3, [r7, #28]
 80130b0:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80130b4:	2b00      	cmp	r3, #0
 80130b6:	d00a      	beq.n	80130ce <tcp_input+0x5d2>
 80130b8:	69fb      	ldr	r3, [r7, #28]
 80130ba:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80130be:	69fa      	ldr	r2, [r7, #28]
 80130c0:	6910      	ldr	r0, [r2, #16]
 80130c2:	89fa      	ldrh	r2, [r7, #14]
 80130c4:	69f9      	ldr	r1, [r7, #28]
 80130c6:	4798      	blx	r3
 80130c8:	4603      	mov	r3, r0
 80130ca:	74fb      	strb	r3, [r7, #19]
 80130cc:	e001      	b.n	80130d2 <tcp_input+0x5d6>
 80130ce:	2300      	movs	r3, #0
 80130d0:	74fb      	strb	r3, [r7, #19]
            if (err == ERR_ABRT) {
 80130d2:	f997 3013 	ldrsb.w	r3, [r7, #19]
 80130d6:	f113 0f0d 	cmn.w	r3, #13
 80130da:	f000 8099 	beq.w	8013210 <tcp_input+0x714>
              goto aborted;
            }
          }
          recv_acked = 0;
 80130de:	4b54      	ldr	r3, [pc, #336]	; (8013230 <tcp_input+0x734>)
 80130e0:	2200      	movs	r2, #0
 80130e2:	801a      	strh	r2, [r3, #0]
        }
        if (tcp_input_delayed_close(pcb)) {
 80130e4:	69f8      	ldr	r0, [r7, #28]
 80130e6:	f000 f915 	bl	8013314 <tcp_input_delayed_close>
 80130ea:	4603      	mov	r3, r0
 80130ec:	2b00      	cmp	r3, #0
 80130ee:	f040 8091 	bne.w	8013214 <tcp_input+0x718>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
        while (recv_data != NULL) {
          struct pbuf *rest = NULL;
          pbuf_split_64k(recv_data, &rest);
#else /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
        if (recv_data != NULL) {
 80130f2:	4b4d      	ldr	r3, [pc, #308]	; (8013228 <tcp_input+0x72c>)
 80130f4:	681b      	ldr	r3, [r3, #0]
 80130f6:	2b00      	cmp	r3, #0
 80130f8:	d041      	beq.n	801317e <tcp_input+0x682>
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */

          LWIP_ASSERT("pcb->refused_data == NULL", pcb->refused_data == NULL);
 80130fa:	69fb      	ldr	r3, [r7, #28]
 80130fc:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80130fe:	2b00      	cmp	r3, #0
 8013100:	d006      	beq.n	8013110 <tcp_input+0x614>
 8013102:	4b50      	ldr	r3, [pc, #320]	; (8013244 <tcp_input+0x748>)
 8013104:	f44f 72f3 	mov.w	r2, #486	; 0x1e6
 8013108:	494f      	ldr	r1, [pc, #316]	; (8013248 <tcp_input+0x74c>)
 801310a:	4850      	ldr	r0, [pc, #320]	; (801324c <tcp_input+0x750>)
 801310c:	f006 fda0 	bl	8019c50 <iprintf>
          if (pcb->flags & TF_RXCLOSED) {
 8013110:	69fb      	ldr	r3, [r7, #28]
 8013112:	8b5b      	ldrh	r3, [r3, #26]
 8013114:	f003 0310 	and.w	r3, r3, #16
 8013118:	2b00      	cmp	r3, #0
 801311a:	d008      	beq.n	801312e <tcp_input+0x632>
            /* received data although already closed -> abort (send RST) to
               notify the remote host that not all data has been processed */
            pbuf_free(recv_data);
 801311c:	4b42      	ldr	r3, [pc, #264]	; (8013228 <tcp_input+0x72c>)
 801311e:	681b      	ldr	r3, [r3, #0]
 8013120:	4618      	mov	r0, r3
 8013122:	f7fd febf 	bl	8010ea4 <pbuf_free>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
            if (rest != NULL) {
              pbuf_free(rest);
            }
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
            tcp_abort(pcb);
 8013126:	69f8      	ldr	r0, [r7, #28]
 8013128:	f7fe fc44 	bl	80119b4 <tcp_abort>
            goto aborted;
 801312c:	e091      	b.n	8013252 <tcp_input+0x756>
          }

          /* Notify application that data has been received. */
          TCP_EVENT_RECV(pcb, recv_data, ERR_OK, err);
 801312e:	69fb      	ldr	r3, [r7, #28]
 8013130:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8013134:	2b00      	cmp	r3, #0
 8013136:	d00c      	beq.n	8013152 <tcp_input+0x656>
 8013138:	69fb      	ldr	r3, [r7, #28]
 801313a:	f8d3 4084 	ldr.w	r4, [r3, #132]	; 0x84
 801313e:	69fb      	ldr	r3, [r7, #28]
 8013140:	6918      	ldr	r0, [r3, #16]
 8013142:	4b39      	ldr	r3, [pc, #228]	; (8013228 <tcp_input+0x72c>)
 8013144:	681a      	ldr	r2, [r3, #0]
 8013146:	2300      	movs	r3, #0
 8013148:	69f9      	ldr	r1, [r7, #28]
 801314a:	47a0      	blx	r4
 801314c:	4603      	mov	r3, r0
 801314e:	74fb      	strb	r3, [r7, #19]
 8013150:	e008      	b.n	8013164 <tcp_input+0x668>
 8013152:	4b35      	ldr	r3, [pc, #212]	; (8013228 <tcp_input+0x72c>)
 8013154:	681a      	ldr	r2, [r3, #0]
 8013156:	2300      	movs	r3, #0
 8013158:	69f9      	ldr	r1, [r7, #28]
 801315a:	2000      	movs	r0, #0
 801315c:	f7ff f95e 	bl	801241c <tcp_recv_null>
 8013160:	4603      	mov	r3, r0
 8013162:	74fb      	strb	r3, [r7, #19]
          if (err == ERR_ABRT) {
 8013164:	f997 3013 	ldrsb.w	r3, [r7, #19]
 8013168:	f113 0f0d 	cmn.w	r3, #13
 801316c:	d054      	beq.n	8013218 <tcp_input+0x71c>
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
            goto aborted;
          }

          /* If the upper layer can't receive this data, store it */
          if (err != ERR_OK) {
 801316e:	f997 3013 	ldrsb.w	r3, [r7, #19]
 8013172:	2b00      	cmp	r3, #0
 8013174:	d003      	beq.n	801317e <tcp_input+0x682>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
            if (rest != NULL) {
              pbuf_cat(recv_data, rest);
            }
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
            pcb->refused_data = recv_data;
 8013176:	4b2c      	ldr	r3, [pc, #176]	; (8013228 <tcp_input+0x72c>)
 8013178:	681a      	ldr	r2, [r3, #0]
 801317a:	69fb      	ldr	r3, [r7, #28]
 801317c:	679a      	str	r2, [r3, #120]	; 0x78
          }
        }

        /* If a FIN segment was received, we call the callback
           function with a NULL buffer to indicate EOF. */
        if (recv_flags & TF_GOT_FIN) {
 801317e:	4b2b      	ldr	r3, [pc, #172]	; (801322c <tcp_input+0x730>)
 8013180:	781b      	ldrb	r3, [r3, #0]
 8013182:	f003 0320 	and.w	r3, r3, #32
 8013186:	2b00      	cmp	r3, #0
 8013188:	d031      	beq.n	80131ee <tcp_input+0x6f2>
          if (pcb->refused_data != NULL) {
 801318a:	69fb      	ldr	r3, [r7, #28]
 801318c:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 801318e:	2b00      	cmp	r3, #0
 8013190:	d009      	beq.n	80131a6 <tcp_input+0x6aa>
            /* Delay this if we have refused data. */
            pcb->refused_data->flags |= PBUF_FLAG_TCP_FIN;
 8013192:	69fb      	ldr	r3, [r7, #28]
 8013194:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8013196:	7b5a      	ldrb	r2, [r3, #13]
 8013198:	69fb      	ldr	r3, [r7, #28]
 801319a:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 801319c:	f042 0220 	orr.w	r2, r2, #32
 80131a0:	b2d2      	uxtb	r2, r2
 80131a2:	735a      	strb	r2, [r3, #13]
 80131a4:	e023      	b.n	80131ee <tcp_input+0x6f2>
          } else {
            /* correct rcv_wnd as the application won't call tcp_recved()
               for the FIN's seqno */
            if (pcb->rcv_wnd != TCP_WND_MAX(pcb)) {
 80131a6:	69fb      	ldr	r3, [r7, #28]
 80131a8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80131aa:	f241 62d0 	movw	r2, #5840	; 0x16d0
 80131ae:	4293      	cmp	r3, r2
 80131b0:	d005      	beq.n	80131be <tcp_input+0x6c2>
              pcb->rcv_wnd++;
 80131b2:	69fb      	ldr	r3, [r7, #28]
 80131b4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80131b6:	3301      	adds	r3, #1
 80131b8:	b29a      	uxth	r2, r3
 80131ba:	69fb      	ldr	r3, [r7, #28]
 80131bc:	851a      	strh	r2, [r3, #40]	; 0x28
            }
            TCP_EVENT_CLOSED(pcb, err);
 80131be:	69fb      	ldr	r3, [r7, #28]
 80131c0:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80131c4:	2b00      	cmp	r3, #0
 80131c6:	d00b      	beq.n	80131e0 <tcp_input+0x6e4>
 80131c8:	69fb      	ldr	r3, [r7, #28]
 80131ca:	f8d3 4084 	ldr.w	r4, [r3, #132]	; 0x84
 80131ce:	69fb      	ldr	r3, [r7, #28]
 80131d0:	6918      	ldr	r0, [r3, #16]
 80131d2:	2300      	movs	r3, #0
 80131d4:	2200      	movs	r2, #0
 80131d6:	69f9      	ldr	r1, [r7, #28]
 80131d8:	47a0      	blx	r4
 80131da:	4603      	mov	r3, r0
 80131dc:	74fb      	strb	r3, [r7, #19]
 80131de:	e001      	b.n	80131e4 <tcp_input+0x6e8>
 80131e0:	2300      	movs	r3, #0
 80131e2:	74fb      	strb	r3, [r7, #19]
            if (err == ERR_ABRT) {
 80131e4:	f997 3013 	ldrsb.w	r3, [r7, #19]
 80131e8:	f113 0f0d 	cmn.w	r3, #13
 80131ec:	d016      	beq.n	801321c <tcp_input+0x720>
              goto aborted;
            }
          }
        }

        tcp_input_pcb = NULL;
 80131ee:	4b13      	ldr	r3, [pc, #76]	; (801323c <tcp_input+0x740>)
 80131f0:	2200      	movs	r2, #0
 80131f2:	601a      	str	r2, [r3, #0]
        if (tcp_input_delayed_close(pcb)) {
 80131f4:	69f8      	ldr	r0, [r7, #28]
 80131f6:	f000 f88d 	bl	8013314 <tcp_input_delayed_close>
 80131fa:	4603      	mov	r3, r0
 80131fc:	2b00      	cmp	r3, #0
 80131fe:	d127      	bne.n	8013250 <tcp_input+0x754>
          goto aborted;
        }
        /* Try to send something out. */
        tcp_output(pcb);
 8013200:	69f8      	ldr	r0, [r7, #28]
 8013202:	f002 fac7 	bl	8015794 <tcp_output>
 8013206:	e024      	b.n	8013252 <tcp_input+0x756>
        goto aborted;
 8013208:	bf00      	nop
 801320a:	e022      	b.n	8013252 <tcp_input+0x756>
#endif /* TCP_INPUT_DEBUG */
      }
    }
    /* Jump target if pcb has been aborted in a callback (by calling tcp_abort()).
       Below this line, 'pcb' may not be dereferenced! */
aborted:
 801320c:	bf00      	nop
 801320e:	e020      	b.n	8013252 <tcp_input+0x756>
              goto aborted;
 8013210:	bf00      	nop
 8013212:	e01e      	b.n	8013252 <tcp_input+0x756>
          goto aborted;
 8013214:	bf00      	nop
 8013216:	e01c      	b.n	8013252 <tcp_input+0x756>
            goto aborted;
 8013218:	bf00      	nop
 801321a:	e01a      	b.n	8013252 <tcp_input+0x756>
              goto aborted;
 801321c:	bf00      	nop
 801321e:	e018      	b.n	8013252 <tcp_input+0x756>
 8013220:	200070f0 	.word	0x200070f0
 8013224:	20007100 	.word	0x20007100
 8013228:	20007120 	.word	0x20007120
 801322c:	2000711d 	.word	0x2000711d
 8013230:	20007118 	.word	0x20007118
 8013234:	2000711c 	.word	0x2000711c
 8013238:	2000711a 	.word	0x2000711a
 801323c:	20007124 	.word	0x20007124
 8013240:	200070e4 	.word	0x200070e4
 8013244:	0801d77c 	.word	0x0801d77c
 8013248:	0801d930 	.word	0x0801d930
 801324c:	0801d7c8 	.word	0x0801d7c8
          goto aborted;
 8013250:	bf00      	nop
    tcp_input_pcb = NULL;
 8013252:	4b27      	ldr	r3, [pc, #156]	; (80132f0 <tcp_input+0x7f4>)
 8013254:	2200      	movs	r2, #0
 8013256:	601a      	str	r2, [r3, #0]
    recv_data = NULL;
 8013258:	4b26      	ldr	r3, [pc, #152]	; (80132f4 <tcp_input+0x7f8>)
 801325a:	2200      	movs	r2, #0
 801325c:	601a      	str	r2, [r3, #0]

    /* give up our reference to inseg.p */
    if (inseg.p != NULL) {
 801325e:	4b26      	ldr	r3, [pc, #152]	; (80132f8 <tcp_input+0x7fc>)
 8013260:	685b      	ldr	r3, [r3, #4]
 8013262:	2b00      	cmp	r3, #0
 8013264:	d03f      	beq.n	80132e6 <tcp_input+0x7ea>
      pbuf_free(inseg.p);
 8013266:	4b24      	ldr	r3, [pc, #144]	; (80132f8 <tcp_input+0x7fc>)
 8013268:	685b      	ldr	r3, [r3, #4]
 801326a:	4618      	mov	r0, r3
 801326c:	f7fd fe1a 	bl	8010ea4 <pbuf_free>
      inseg.p = NULL;
 8013270:	4b21      	ldr	r3, [pc, #132]	; (80132f8 <tcp_input+0x7fc>)
 8013272:	2200      	movs	r2, #0
 8013274:	605a      	str	r2, [r3, #4]
    pbuf_free(p);
  }

  LWIP_ASSERT("tcp_input: tcp_pcbs_sane()", tcp_pcbs_sane());
  PERF_STOP("tcp_input");
  return;
 8013276:	e036      	b.n	80132e6 <tcp_input+0x7ea>
    if (!(TCPH_FLAGS(tcphdr) & TCP_RST)) {
 8013278:	4b20      	ldr	r3, [pc, #128]	; (80132fc <tcp_input+0x800>)
 801327a:	681b      	ldr	r3, [r3, #0]
 801327c:	899b      	ldrh	r3, [r3, #12]
 801327e:	b29b      	uxth	r3, r3
 8013280:	4618      	mov	r0, r3
 8013282:	f7fc fa2b 	bl	800f6dc <lwip_htons>
 8013286:	4603      	mov	r3, r0
 8013288:	b2db      	uxtb	r3, r3
 801328a:	f003 0304 	and.w	r3, r3, #4
 801328e:	2b00      	cmp	r3, #0
 8013290:	d118      	bne.n	80132c4 <tcp_input+0x7c8>
      tcp_rst(NULL, ackno, seqno + tcplen, ip_current_dest_addr(),
 8013292:	4b1b      	ldr	r3, [pc, #108]	; (8013300 <tcp_input+0x804>)
 8013294:	6819      	ldr	r1, [r3, #0]
 8013296:	4b1b      	ldr	r3, [pc, #108]	; (8013304 <tcp_input+0x808>)
 8013298:	881b      	ldrh	r3, [r3, #0]
 801329a:	461a      	mov	r2, r3
 801329c:	4b1a      	ldr	r3, [pc, #104]	; (8013308 <tcp_input+0x80c>)
 801329e:	681b      	ldr	r3, [r3, #0]
 80132a0:	18d0      	adds	r0, r2, r3
              ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 80132a2:	4b16      	ldr	r3, [pc, #88]	; (80132fc <tcp_input+0x800>)
 80132a4:	681b      	ldr	r3, [r3, #0]
      tcp_rst(NULL, ackno, seqno + tcplen, ip_current_dest_addr(),
 80132a6:	885b      	ldrh	r3, [r3, #2]
 80132a8:	b29b      	uxth	r3, r3
              ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 80132aa:	4a14      	ldr	r2, [pc, #80]	; (80132fc <tcp_input+0x800>)
 80132ac:	6812      	ldr	r2, [r2, #0]
      tcp_rst(NULL, ackno, seqno + tcplen, ip_current_dest_addr(),
 80132ae:	8812      	ldrh	r2, [r2, #0]
 80132b0:	b292      	uxth	r2, r2
 80132b2:	9202      	str	r2, [sp, #8]
 80132b4:	9301      	str	r3, [sp, #4]
 80132b6:	4b15      	ldr	r3, [pc, #84]	; (801330c <tcp_input+0x810>)
 80132b8:	9300      	str	r3, [sp, #0]
 80132ba:	4b15      	ldr	r3, [pc, #84]	; (8013310 <tcp_input+0x814>)
 80132bc:	4602      	mov	r2, r0
 80132be:	2000      	movs	r0, #0
 80132c0:	f003 f81c 	bl	80162fc <tcp_rst>
    pbuf_free(p);
 80132c4:	6878      	ldr	r0, [r7, #4]
 80132c6:	f7fd fded 	bl	8010ea4 <pbuf_free>
  return;
 80132ca:	e00c      	b.n	80132e6 <tcp_input+0x7ea>
    goto dropped;
 80132cc:	bf00      	nop
 80132ce:	e006      	b.n	80132de <tcp_input+0x7e2>
    goto dropped;
 80132d0:	bf00      	nop
 80132d2:	e004      	b.n	80132de <tcp_input+0x7e2>
    goto dropped;
 80132d4:	bf00      	nop
 80132d6:	e002      	b.n	80132de <tcp_input+0x7e2>
      goto dropped;
 80132d8:	bf00      	nop
 80132da:	e000      	b.n	80132de <tcp_input+0x7e2>
      goto dropped;
 80132dc:	bf00      	nop
dropped:
  TCP_STATS_INC(tcp.drop);
  MIB2_STATS_INC(mib2.tcpinerrs);
  pbuf_free(p);
 80132de:	6878      	ldr	r0, [r7, #4]
 80132e0:	f7fd fde0 	bl	8010ea4 <pbuf_free>
 80132e4:	e000      	b.n	80132e8 <tcp_input+0x7ec>
  return;
 80132e6:	bf00      	nop
}
 80132e8:	3724      	adds	r7, #36	; 0x24
 80132ea:	46bd      	mov	sp, r7
 80132ec:	bd90      	pop	{r4, r7, pc}
 80132ee:	bf00      	nop
 80132f0:	20007124 	.word	0x20007124
 80132f4:	20007120 	.word	0x20007120
 80132f8:	200070f0 	.word	0x200070f0
 80132fc:	20007100 	.word	0x20007100
 8013300:	20007114 	.word	0x20007114
 8013304:	2000711a 	.word	0x2000711a
 8013308:	20007110 	.word	0x20007110
 801330c:	2000080c 	.word	0x2000080c
 8013310:	20000810 	.word	0x20000810

08013314 <tcp_input_delayed_close>:
 * any more.
 * @returns 1 if the pcb has been closed and deallocated, 0 otherwise
 */
static int
tcp_input_delayed_close(struct tcp_pcb *pcb)
{
 8013314:	b580      	push	{r7, lr}
 8013316:	b082      	sub	sp, #8
 8013318:	af00      	add	r7, sp, #0
 801331a:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_input_delayed_close: invalid pcb", pcb != NULL);
 801331c:	687b      	ldr	r3, [r7, #4]
 801331e:	2b00      	cmp	r3, #0
 8013320:	d106      	bne.n	8013330 <tcp_input_delayed_close+0x1c>
 8013322:	4b17      	ldr	r3, [pc, #92]	; (8013380 <tcp_input_delayed_close+0x6c>)
 8013324:	f240 225a 	movw	r2, #602	; 0x25a
 8013328:	4916      	ldr	r1, [pc, #88]	; (8013384 <tcp_input_delayed_close+0x70>)
 801332a:	4817      	ldr	r0, [pc, #92]	; (8013388 <tcp_input_delayed_close+0x74>)
 801332c:	f006 fc90 	bl	8019c50 <iprintf>

  if (recv_flags & TF_CLOSED) {
 8013330:	4b16      	ldr	r3, [pc, #88]	; (801338c <tcp_input_delayed_close+0x78>)
 8013332:	781b      	ldrb	r3, [r3, #0]
 8013334:	f003 0310 	and.w	r3, r3, #16
 8013338:	2b00      	cmp	r3, #0
 801333a:	d01c      	beq.n	8013376 <tcp_input_delayed_close+0x62>
    /* The connection has been closed and we will deallocate the
        PCB. */
    if (!(pcb->flags & TF_RXCLOSED)) {
 801333c:	687b      	ldr	r3, [r7, #4]
 801333e:	8b5b      	ldrh	r3, [r3, #26]
 8013340:	f003 0310 	and.w	r3, r3, #16
 8013344:	2b00      	cmp	r3, #0
 8013346:	d10d      	bne.n	8013364 <tcp_input_delayed_close+0x50>
      /* Connection closed although the application has only shut down the
          tx side: call the PCB's err callback and indicate the closure to
          ensure the application doesn't continue using the PCB. */
      TCP_EVENT_ERR(pcb->state, pcb->errf, pcb->callback_arg, ERR_CLSD);
 8013348:	687b      	ldr	r3, [r7, #4]
 801334a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 801334e:	2b00      	cmp	r3, #0
 8013350:	d008      	beq.n	8013364 <tcp_input_delayed_close+0x50>
 8013352:	687b      	ldr	r3, [r7, #4]
 8013354:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8013358:	687a      	ldr	r2, [r7, #4]
 801335a:	6912      	ldr	r2, [r2, #16]
 801335c:	f06f 010e 	mvn.w	r1, #14
 8013360:	4610      	mov	r0, r2
 8013362:	4798      	blx	r3
    }
    tcp_pcb_remove(&tcp_active_pcbs, pcb);
 8013364:	6879      	ldr	r1, [r7, #4]
 8013366:	480a      	ldr	r0, [pc, #40]	; (8013390 <tcp_input_delayed_close+0x7c>)
 8013368:	f7ff fa50 	bl	801280c <tcp_pcb_remove>
    tcp_free(pcb);
 801336c:	6878      	ldr	r0, [r7, #4]
 801336e:	f7fe f839 	bl	80113e4 <tcp_free>
    return 1;
 8013372:	2301      	movs	r3, #1
 8013374:	e000      	b.n	8013378 <tcp_input_delayed_close+0x64>
  }
  return 0;
 8013376:	2300      	movs	r3, #0
}
 8013378:	4618      	mov	r0, r3
 801337a:	3708      	adds	r7, #8
 801337c:	46bd      	mov	sp, r7
 801337e:	bd80      	pop	{r7, pc}
 8013380:	0801d77c 	.word	0x0801d77c
 8013384:	0801d94c 	.word	0x0801d94c
 8013388:	0801d7c8 	.word	0x0801d7c8
 801338c:	2000711d 	.word	0x2000711d
 8013390:	200070e4 	.word	0x200070e4

08013394 <tcp_listen_input>:
 * @note the segment which arrived is saved in global variables, therefore only the pcb
 *       involved is passed as a parameter to this function
 */
static void
tcp_listen_input(struct tcp_pcb_listen *pcb)
{
 8013394:	b590      	push	{r4, r7, lr}
 8013396:	b08b      	sub	sp, #44	; 0x2c
 8013398:	af04      	add	r7, sp, #16
 801339a:	6078      	str	r0, [r7, #4]
  struct tcp_pcb *npcb;
  u32_t iss;
  err_t rc;

  if (flags & TCP_RST) {
 801339c:	4b6f      	ldr	r3, [pc, #444]	; (801355c <tcp_listen_input+0x1c8>)
 801339e:	781b      	ldrb	r3, [r3, #0]
 80133a0:	f003 0304 	and.w	r3, r3, #4
 80133a4:	2b00      	cmp	r3, #0
 80133a6:	f040 80d2 	bne.w	801354e <tcp_listen_input+0x1ba>
    /* An incoming RST should be ignored. Return. */
    return;
  }

  LWIP_ASSERT("tcp_listen_input: invalid pcb", pcb != NULL);
 80133aa:	687b      	ldr	r3, [r7, #4]
 80133ac:	2b00      	cmp	r3, #0
 80133ae:	d106      	bne.n	80133be <tcp_listen_input+0x2a>
 80133b0:	4b6b      	ldr	r3, [pc, #428]	; (8013560 <tcp_listen_input+0x1cc>)
 80133b2:	f240 2281 	movw	r2, #641	; 0x281
 80133b6:	496b      	ldr	r1, [pc, #428]	; (8013564 <tcp_listen_input+0x1d0>)
 80133b8:	486b      	ldr	r0, [pc, #428]	; (8013568 <tcp_listen_input+0x1d4>)
 80133ba:	f006 fc49 	bl	8019c50 <iprintf>

  /* In the LISTEN state, we check for incoming SYN segments,
     creates a new PCB, and responds with a SYN|ACK. */
  if (flags & TCP_ACK) {
 80133be:	4b67      	ldr	r3, [pc, #412]	; (801355c <tcp_listen_input+0x1c8>)
 80133c0:	781b      	ldrb	r3, [r3, #0]
 80133c2:	f003 0310 	and.w	r3, r3, #16
 80133c6:	2b00      	cmp	r3, #0
 80133c8:	d019      	beq.n	80133fe <tcp_listen_input+0x6a>
    /* For incoming segments with the ACK flag set, respond with a
       RST. */
    LWIP_DEBUGF(TCP_RST_DEBUG, ("tcp_listen_input: ACK in LISTEN, sending reset\n"));
    tcp_rst((const struct tcp_pcb *)pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 80133ca:	4b68      	ldr	r3, [pc, #416]	; (801356c <tcp_listen_input+0x1d8>)
 80133cc:	6819      	ldr	r1, [r3, #0]
 80133ce:	4b68      	ldr	r3, [pc, #416]	; (8013570 <tcp_listen_input+0x1dc>)
 80133d0:	881b      	ldrh	r3, [r3, #0]
 80133d2:	461a      	mov	r2, r3
 80133d4:	4b67      	ldr	r3, [pc, #412]	; (8013574 <tcp_listen_input+0x1e0>)
 80133d6:	681b      	ldr	r3, [r3, #0]
 80133d8:	18d0      	adds	r0, r2, r3
            ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 80133da:	4b67      	ldr	r3, [pc, #412]	; (8013578 <tcp_listen_input+0x1e4>)
 80133dc:	681b      	ldr	r3, [r3, #0]
    tcp_rst((const struct tcp_pcb *)pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 80133de:	885b      	ldrh	r3, [r3, #2]
 80133e0:	b29b      	uxth	r3, r3
            ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 80133e2:	4a65      	ldr	r2, [pc, #404]	; (8013578 <tcp_listen_input+0x1e4>)
 80133e4:	6812      	ldr	r2, [r2, #0]
    tcp_rst((const struct tcp_pcb *)pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 80133e6:	8812      	ldrh	r2, [r2, #0]
 80133e8:	b292      	uxth	r2, r2
 80133ea:	9202      	str	r2, [sp, #8]
 80133ec:	9301      	str	r3, [sp, #4]
 80133ee:	4b63      	ldr	r3, [pc, #396]	; (801357c <tcp_listen_input+0x1e8>)
 80133f0:	9300      	str	r3, [sp, #0]
 80133f2:	4b63      	ldr	r3, [pc, #396]	; (8013580 <tcp_listen_input+0x1ec>)
 80133f4:	4602      	mov	r2, r0
 80133f6:	6878      	ldr	r0, [r7, #4]
 80133f8:	f002 ff80 	bl	80162fc <tcp_rst>
      tcp_abandon(npcb, 0);
      return;
    }
    tcp_output(npcb);
  }
  return;
 80133fc:	e0a9      	b.n	8013552 <tcp_listen_input+0x1be>
  } else if (flags & TCP_SYN) {
 80133fe:	4b57      	ldr	r3, [pc, #348]	; (801355c <tcp_listen_input+0x1c8>)
 8013400:	781b      	ldrb	r3, [r3, #0]
 8013402:	f003 0302 	and.w	r3, r3, #2
 8013406:	2b00      	cmp	r3, #0
 8013408:	f000 80a3 	beq.w	8013552 <tcp_listen_input+0x1be>
    npcb = tcp_alloc(pcb->prio);
 801340c:	687b      	ldr	r3, [r7, #4]
 801340e:	7d5b      	ldrb	r3, [r3, #21]
 8013410:	4618      	mov	r0, r3
 8013412:	f7ff f927 	bl	8012664 <tcp_alloc>
 8013416:	6178      	str	r0, [r7, #20]
    if (npcb == NULL) {
 8013418:	697b      	ldr	r3, [r7, #20]
 801341a:	2b00      	cmp	r3, #0
 801341c:	d111      	bne.n	8013442 <tcp_listen_input+0xae>
      TCP_EVENT_ACCEPT(pcb, NULL, pcb->callback_arg, ERR_MEM, err);
 801341e:	687b      	ldr	r3, [r7, #4]
 8013420:	699b      	ldr	r3, [r3, #24]
 8013422:	2b00      	cmp	r3, #0
 8013424:	d00a      	beq.n	801343c <tcp_listen_input+0xa8>
 8013426:	687b      	ldr	r3, [r7, #4]
 8013428:	699b      	ldr	r3, [r3, #24]
 801342a:	687a      	ldr	r2, [r7, #4]
 801342c:	6910      	ldr	r0, [r2, #16]
 801342e:	f04f 32ff 	mov.w	r2, #4294967295
 8013432:	2100      	movs	r1, #0
 8013434:	4798      	blx	r3
 8013436:	4603      	mov	r3, r0
 8013438:	73bb      	strb	r3, [r7, #14]
      return;
 801343a:	e08b      	b.n	8013554 <tcp_listen_input+0x1c0>
      TCP_EVENT_ACCEPT(pcb, NULL, pcb->callback_arg, ERR_MEM, err);
 801343c:	23f0      	movs	r3, #240	; 0xf0
 801343e:	73bb      	strb	r3, [r7, #14]
      return;
 8013440:	e088      	b.n	8013554 <tcp_listen_input+0x1c0>
    ip_addr_copy(npcb->local_ip, *ip_current_dest_addr());
 8013442:	4b50      	ldr	r3, [pc, #320]	; (8013584 <tcp_listen_input+0x1f0>)
 8013444:	695a      	ldr	r2, [r3, #20]
 8013446:	697b      	ldr	r3, [r7, #20]
 8013448:	601a      	str	r2, [r3, #0]
    ip_addr_copy(npcb->remote_ip, *ip_current_src_addr());
 801344a:	4b4e      	ldr	r3, [pc, #312]	; (8013584 <tcp_listen_input+0x1f0>)
 801344c:	691a      	ldr	r2, [r3, #16]
 801344e:	697b      	ldr	r3, [r7, #20]
 8013450:	605a      	str	r2, [r3, #4]
    npcb->local_port = pcb->local_port;
 8013452:	687b      	ldr	r3, [r7, #4]
 8013454:	8ada      	ldrh	r2, [r3, #22]
 8013456:	697b      	ldr	r3, [r7, #20]
 8013458:	82da      	strh	r2, [r3, #22]
    npcb->remote_port = tcphdr->src;
 801345a:	4b47      	ldr	r3, [pc, #284]	; (8013578 <tcp_listen_input+0x1e4>)
 801345c:	681b      	ldr	r3, [r3, #0]
 801345e:	881b      	ldrh	r3, [r3, #0]
 8013460:	b29a      	uxth	r2, r3
 8013462:	697b      	ldr	r3, [r7, #20]
 8013464:	831a      	strh	r2, [r3, #24]
    npcb->state = SYN_RCVD;
 8013466:	697b      	ldr	r3, [r7, #20]
 8013468:	2203      	movs	r2, #3
 801346a:	751a      	strb	r2, [r3, #20]
    npcb->rcv_nxt = seqno + 1;
 801346c:	4b41      	ldr	r3, [pc, #260]	; (8013574 <tcp_listen_input+0x1e0>)
 801346e:	681b      	ldr	r3, [r3, #0]
 8013470:	1c5a      	adds	r2, r3, #1
 8013472:	697b      	ldr	r3, [r7, #20]
 8013474:	625a      	str	r2, [r3, #36]	; 0x24
    npcb->rcv_ann_right_edge = npcb->rcv_nxt;
 8013476:	697b      	ldr	r3, [r7, #20]
 8013478:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 801347a:	697b      	ldr	r3, [r7, #20]
 801347c:	62da      	str	r2, [r3, #44]	; 0x2c
    iss = tcp_next_iss(npcb);
 801347e:	6978      	ldr	r0, [r7, #20]
 8013480:	f7ff fa58 	bl	8012934 <tcp_next_iss>
 8013484:	6138      	str	r0, [r7, #16]
    npcb->snd_wl2 = iss;
 8013486:	697b      	ldr	r3, [r7, #20]
 8013488:	693a      	ldr	r2, [r7, #16]
 801348a:	659a      	str	r2, [r3, #88]	; 0x58
    npcb->snd_nxt = iss;
 801348c:	697b      	ldr	r3, [r7, #20]
 801348e:	693a      	ldr	r2, [r7, #16]
 8013490:	651a      	str	r2, [r3, #80]	; 0x50
    npcb->lastack = iss;
 8013492:	697b      	ldr	r3, [r7, #20]
 8013494:	693a      	ldr	r2, [r7, #16]
 8013496:	645a      	str	r2, [r3, #68]	; 0x44
    npcb->snd_lbb = iss;
 8013498:	697b      	ldr	r3, [r7, #20]
 801349a:	693a      	ldr	r2, [r7, #16]
 801349c:	65da      	str	r2, [r3, #92]	; 0x5c
    npcb->snd_wl1 = seqno - 1;/* initialise to seqno-1 to force window update */
 801349e:	4b35      	ldr	r3, [pc, #212]	; (8013574 <tcp_listen_input+0x1e0>)
 80134a0:	681b      	ldr	r3, [r3, #0]
 80134a2:	1e5a      	subs	r2, r3, #1
 80134a4:	697b      	ldr	r3, [r7, #20]
 80134a6:	655a      	str	r2, [r3, #84]	; 0x54
    npcb->callback_arg = pcb->callback_arg;
 80134a8:	687b      	ldr	r3, [r7, #4]
 80134aa:	691a      	ldr	r2, [r3, #16]
 80134ac:	697b      	ldr	r3, [r7, #20]
 80134ae:	611a      	str	r2, [r3, #16]
    npcb->listener = pcb;
 80134b0:	697b      	ldr	r3, [r7, #20]
 80134b2:	687a      	ldr	r2, [r7, #4]
 80134b4:	67da      	str	r2, [r3, #124]	; 0x7c
    npcb->so_options = pcb->so_options & SOF_INHERITED;
 80134b6:	687b      	ldr	r3, [r7, #4]
 80134b8:	7a5b      	ldrb	r3, [r3, #9]
 80134ba:	f003 030c 	and.w	r3, r3, #12
 80134be:	b2da      	uxtb	r2, r3
 80134c0:	697b      	ldr	r3, [r7, #20]
 80134c2:	725a      	strb	r2, [r3, #9]
    npcb->netif_idx = pcb->netif_idx;
 80134c4:	687b      	ldr	r3, [r7, #4]
 80134c6:	7a1a      	ldrb	r2, [r3, #8]
 80134c8:	697b      	ldr	r3, [r7, #20]
 80134ca:	721a      	strb	r2, [r3, #8]
    TCP_REG_ACTIVE(npcb);
 80134cc:	4b2e      	ldr	r3, [pc, #184]	; (8013588 <tcp_listen_input+0x1f4>)
 80134ce:	681a      	ldr	r2, [r3, #0]
 80134d0:	697b      	ldr	r3, [r7, #20]
 80134d2:	60da      	str	r2, [r3, #12]
 80134d4:	4a2c      	ldr	r2, [pc, #176]	; (8013588 <tcp_listen_input+0x1f4>)
 80134d6:	697b      	ldr	r3, [r7, #20]
 80134d8:	6013      	str	r3, [r2, #0]
 80134da:	f003 f8d1 	bl	8016680 <tcp_timer_needed>
 80134de:	4b2b      	ldr	r3, [pc, #172]	; (801358c <tcp_listen_input+0x1f8>)
 80134e0:	2201      	movs	r2, #1
 80134e2:	701a      	strb	r2, [r3, #0]
    tcp_parseopt(npcb);
 80134e4:	6978      	ldr	r0, [r7, #20]
 80134e6:	f001 fd8f 	bl	8015008 <tcp_parseopt>
    npcb->snd_wnd = tcphdr->wnd;
 80134ea:	4b23      	ldr	r3, [pc, #140]	; (8013578 <tcp_listen_input+0x1e4>)
 80134ec:	681b      	ldr	r3, [r3, #0]
 80134ee:	89db      	ldrh	r3, [r3, #14]
 80134f0:	b29a      	uxth	r2, r3
 80134f2:	697b      	ldr	r3, [r7, #20]
 80134f4:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
    npcb->snd_wnd_max = npcb->snd_wnd;
 80134f8:	697b      	ldr	r3, [r7, #20]
 80134fa:	f8b3 2060 	ldrh.w	r2, [r3, #96]	; 0x60
 80134fe:	697b      	ldr	r3, [r7, #20]
 8013500:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
    npcb->mss = tcp_eff_send_mss(npcb->mss, &npcb->local_ip, &npcb->remote_ip);
 8013504:	697b      	ldr	r3, [r7, #20]
 8013506:	8e5c      	ldrh	r4, [r3, #50]	; 0x32
 8013508:	697b      	ldr	r3, [r7, #20]
 801350a:	3304      	adds	r3, #4
 801350c:	4618      	mov	r0, r3
 801350e:	f004 fc79 	bl	8017e04 <ip4_route>
 8013512:	4601      	mov	r1, r0
 8013514:	697b      	ldr	r3, [r7, #20]
 8013516:	3304      	adds	r3, #4
 8013518:	461a      	mov	r2, r3
 801351a:	4620      	mov	r0, r4
 801351c:	f7ff fa30 	bl	8012980 <tcp_eff_send_mss_netif>
 8013520:	4603      	mov	r3, r0
 8013522:	461a      	mov	r2, r3
 8013524:	697b      	ldr	r3, [r7, #20]
 8013526:	865a      	strh	r2, [r3, #50]	; 0x32
    rc = tcp_enqueue_flags(npcb, TCP_SYN | TCP_ACK);
 8013528:	2112      	movs	r1, #18
 801352a:	6978      	ldr	r0, [r7, #20]
 801352c:	f002 f844 	bl	80155b8 <tcp_enqueue_flags>
 8013530:	4603      	mov	r3, r0
 8013532:	73fb      	strb	r3, [r7, #15]
    if (rc != ERR_OK) {
 8013534:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8013538:	2b00      	cmp	r3, #0
 801353a:	d004      	beq.n	8013546 <tcp_listen_input+0x1b2>
      tcp_abandon(npcb, 0);
 801353c:	2100      	movs	r1, #0
 801353e:	6978      	ldr	r0, [r7, #20]
 8013540:	f7fe f97a 	bl	8011838 <tcp_abandon>
      return;
 8013544:	e006      	b.n	8013554 <tcp_listen_input+0x1c0>
    tcp_output(npcb);
 8013546:	6978      	ldr	r0, [r7, #20]
 8013548:	f002 f924 	bl	8015794 <tcp_output>
  return;
 801354c:	e001      	b.n	8013552 <tcp_listen_input+0x1be>
    return;
 801354e:	bf00      	nop
 8013550:	e000      	b.n	8013554 <tcp_listen_input+0x1c0>
  return;
 8013552:	bf00      	nop
}
 8013554:	371c      	adds	r7, #28
 8013556:	46bd      	mov	sp, r7
 8013558:	bd90      	pop	{r4, r7, pc}
 801355a:	bf00      	nop
 801355c:	2000711c 	.word	0x2000711c
 8013560:	0801d77c 	.word	0x0801d77c
 8013564:	0801d974 	.word	0x0801d974
 8013568:	0801d7c8 	.word	0x0801d7c8
 801356c:	20007114 	.word	0x20007114
 8013570:	2000711a 	.word	0x2000711a
 8013574:	20007110 	.word	0x20007110
 8013578:	20007100 	.word	0x20007100
 801357c:	2000080c 	.word	0x2000080c
 8013580:	20000810 	.word	0x20000810
 8013584:	200007fc 	.word	0x200007fc
 8013588:	200070e4 	.word	0x200070e4
 801358c:	200070ec 	.word	0x200070ec

08013590 <tcp_timewait_input>:
 * @note the segment which arrived is saved in global variables, therefore only the pcb
 *       involved is passed as a parameter to this function
 */
static void
tcp_timewait_input(struct tcp_pcb *pcb)
{
 8013590:	b580      	push	{r7, lr}
 8013592:	b086      	sub	sp, #24
 8013594:	af04      	add	r7, sp, #16
 8013596:	6078      	str	r0, [r7, #4]
  /* RFC 1337: in TIME_WAIT, ignore RST and ACK FINs + any 'acceptable' segments */
  /* RFC 793 3.9 Event Processing - Segment Arrives:
   * - first check sequence number - we skip that one in TIME_WAIT (always
   *   acceptable since we only send ACKs)
   * - second check the RST bit (... return) */
  if (flags & TCP_RST) {
 8013598:	4b2f      	ldr	r3, [pc, #188]	; (8013658 <tcp_timewait_input+0xc8>)
 801359a:	781b      	ldrb	r3, [r3, #0]
 801359c:	f003 0304 	and.w	r3, r3, #4
 80135a0:	2b00      	cmp	r3, #0
 80135a2:	d153      	bne.n	801364c <tcp_timewait_input+0xbc>
    return;
  }

  LWIP_ASSERT("tcp_timewait_input: invalid pcb", pcb != NULL);
 80135a4:	687b      	ldr	r3, [r7, #4]
 80135a6:	2b00      	cmp	r3, #0
 80135a8:	d106      	bne.n	80135b8 <tcp_timewait_input+0x28>
 80135aa:	4b2c      	ldr	r3, [pc, #176]	; (801365c <tcp_timewait_input+0xcc>)
 80135ac:	f240 22ee 	movw	r2, #750	; 0x2ee
 80135b0:	492b      	ldr	r1, [pc, #172]	; (8013660 <tcp_timewait_input+0xd0>)
 80135b2:	482c      	ldr	r0, [pc, #176]	; (8013664 <tcp_timewait_input+0xd4>)
 80135b4:	f006 fb4c 	bl	8019c50 <iprintf>

  /* - fourth, check the SYN bit, */
  if (flags & TCP_SYN) {
 80135b8:	4b27      	ldr	r3, [pc, #156]	; (8013658 <tcp_timewait_input+0xc8>)
 80135ba:	781b      	ldrb	r3, [r3, #0]
 80135bc:	f003 0302 	and.w	r3, r3, #2
 80135c0:	2b00      	cmp	r3, #0
 80135c2:	d02a      	beq.n	801361a <tcp_timewait_input+0x8a>
    /* If an incoming segment is not acceptable, an acknowledgment
       should be sent in reply */
    if (TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt, pcb->rcv_nxt + pcb->rcv_wnd)) {
 80135c4:	4b28      	ldr	r3, [pc, #160]	; (8013668 <tcp_timewait_input+0xd8>)
 80135c6:	681a      	ldr	r2, [r3, #0]
 80135c8:	687b      	ldr	r3, [r7, #4]
 80135ca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80135cc:	1ad3      	subs	r3, r2, r3
 80135ce:	2b00      	cmp	r3, #0
 80135d0:	db2d      	blt.n	801362e <tcp_timewait_input+0x9e>
 80135d2:	4b25      	ldr	r3, [pc, #148]	; (8013668 <tcp_timewait_input+0xd8>)
 80135d4:	681a      	ldr	r2, [r3, #0]
 80135d6:	687b      	ldr	r3, [r7, #4]
 80135d8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80135da:	6879      	ldr	r1, [r7, #4]
 80135dc:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 80135de:	440b      	add	r3, r1
 80135e0:	1ad3      	subs	r3, r2, r3
 80135e2:	2b00      	cmp	r3, #0
 80135e4:	dc23      	bgt.n	801362e <tcp_timewait_input+0x9e>
      /* If the SYN is in the window it is an error, send a reset */
      tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 80135e6:	4b21      	ldr	r3, [pc, #132]	; (801366c <tcp_timewait_input+0xdc>)
 80135e8:	6819      	ldr	r1, [r3, #0]
 80135ea:	4b21      	ldr	r3, [pc, #132]	; (8013670 <tcp_timewait_input+0xe0>)
 80135ec:	881b      	ldrh	r3, [r3, #0]
 80135ee:	461a      	mov	r2, r3
 80135f0:	4b1d      	ldr	r3, [pc, #116]	; (8013668 <tcp_timewait_input+0xd8>)
 80135f2:	681b      	ldr	r3, [r3, #0]
 80135f4:	18d0      	adds	r0, r2, r3
              ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 80135f6:	4b1f      	ldr	r3, [pc, #124]	; (8013674 <tcp_timewait_input+0xe4>)
 80135f8:	681b      	ldr	r3, [r3, #0]
      tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 80135fa:	885b      	ldrh	r3, [r3, #2]
 80135fc:	b29b      	uxth	r3, r3
              ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 80135fe:	4a1d      	ldr	r2, [pc, #116]	; (8013674 <tcp_timewait_input+0xe4>)
 8013600:	6812      	ldr	r2, [r2, #0]
      tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 8013602:	8812      	ldrh	r2, [r2, #0]
 8013604:	b292      	uxth	r2, r2
 8013606:	9202      	str	r2, [sp, #8]
 8013608:	9301      	str	r3, [sp, #4]
 801360a:	4b1b      	ldr	r3, [pc, #108]	; (8013678 <tcp_timewait_input+0xe8>)
 801360c:	9300      	str	r3, [sp, #0]
 801360e:	4b1b      	ldr	r3, [pc, #108]	; (801367c <tcp_timewait_input+0xec>)
 8013610:	4602      	mov	r2, r0
 8013612:	6878      	ldr	r0, [r7, #4]
 8013614:	f002 fe72 	bl	80162fc <tcp_rst>
      return;
 8013618:	e01b      	b.n	8013652 <tcp_timewait_input+0xc2>
    }
  } else if (flags & TCP_FIN) {
 801361a:	4b0f      	ldr	r3, [pc, #60]	; (8013658 <tcp_timewait_input+0xc8>)
 801361c:	781b      	ldrb	r3, [r3, #0]
 801361e:	f003 0301 	and.w	r3, r3, #1
 8013622:	2b00      	cmp	r3, #0
 8013624:	d003      	beq.n	801362e <tcp_timewait_input+0x9e>
    /* - eighth, check the FIN bit: Remain in the TIME-WAIT state.
         Restart the 2 MSL time-wait timeout.*/
    pcb->tmr = tcp_ticks;
 8013626:	4b16      	ldr	r3, [pc, #88]	; (8013680 <tcp_timewait_input+0xf0>)
 8013628:	681a      	ldr	r2, [r3, #0]
 801362a:	687b      	ldr	r3, [r7, #4]
 801362c:	621a      	str	r2, [r3, #32]
  }

  if ((tcplen > 0)) {
 801362e:	4b10      	ldr	r3, [pc, #64]	; (8013670 <tcp_timewait_input+0xe0>)
 8013630:	881b      	ldrh	r3, [r3, #0]
 8013632:	2b00      	cmp	r3, #0
 8013634:	d00c      	beq.n	8013650 <tcp_timewait_input+0xc0>
    /* Acknowledge data, FIN or out-of-window SYN */
    tcp_ack_now(pcb);
 8013636:	687b      	ldr	r3, [r7, #4]
 8013638:	8b5b      	ldrh	r3, [r3, #26]
 801363a:	f043 0302 	orr.w	r3, r3, #2
 801363e:	b29a      	uxth	r2, r3
 8013640:	687b      	ldr	r3, [r7, #4]
 8013642:	835a      	strh	r2, [r3, #26]
    tcp_output(pcb);
 8013644:	6878      	ldr	r0, [r7, #4]
 8013646:	f002 f8a5 	bl	8015794 <tcp_output>
  }
  return;
 801364a:	e001      	b.n	8013650 <tcp_timewait_input+0xc0>
    return;
 801364c:	bf00      	nop
 801364e:	e000      	b.n	8013652 <tcp_timewait_input+0xc2>
  return;
 8013650:	bf00      	nop
}
 8013652:	3708      	adds	r7, #8
 8013654:	46bd      	mov	sp, r7
 8013656:	bd80      	pop	{r7, pc}
 8013658:	2000711c 	.word	0x2000711c
 801365c:	0801d77c 	.word	0x0801d77c
 8013660:	0801d994 	.word	0x0801d994
 8013664:	0801d7c8 	.word	0x0801d7c8
 8013668:	20007110 	.word	0x20007110
 801366c:	20007114 	.word	0x20007114
 8013670:	2000711a 	.word	0x2000711a
 8013674:	20007100 	.word	0x20007100
 8013678:	2000080c 	.word	0x2000080c
 801367c:	20000810 	.word	0x20000810
 8013680:	200070d8 	.word	0x200070d8

08013684 <tcp_process>:
 * @note the segment which arrived is saved in global variables, therefore only the pcb
 *       involved is passed as a parameter to this function
 */
static err_t
tcp_process(struct tcp_pcb *pcb)
{
 8013684:	b590      	push	{r4, r7, lr}
 8013686:	b08d      	sub	sp, #52	; 0x34
 8013688:	af04      	add	r7, sp, #16
 801368a:	6078      	str	r0, [r7, #4]
  struct tcp_seg *rseg;
  u8_t acceptable = 0;
 801368c:	2300      	movs	r3, #0
 801368e:	76fb      	strb	r3, [r7, #27]
  err_t err;

  err = ERR_OK;
 8013690:	2300      	movs	r3, #0
 8013692:	76bb      	strb	r3, [r7, #26]

  LWIP_ASSERT("tcp_process: invalid pcb", pcb != NULL);
 8013694:	687b      	ldr	r3, [r7, #4]
 8013696:	2b00      	cmp	r3, #0
 8013698:	d106      	bne.n	80136a8 <tcp_process+0x24>
 801369a:	4b9d      	ldr	r3, [pc, #628]	; (8013910 <tcp_process+0x28c>)
 801369c:	f44f 7247 	mov.w	r2, #796	; 0x31c
 80136a0:	499c      	ldr	r1, [pc, #624]	; (8013914 <tcp_process+0x290>)
 80136a2:	489d      	ldr	r0, [pc, #628]	; (8013918 <tcp_process+0x294>)
 80136a4:	f006 fad4 	bl	8019c50 <iprintf>

  /* Process incoming RST segments. */
  if (flags & TCP_RST) {
 80136a8:	4b9c      	ldr	r3, [pc, #624]	; (801391c <tcp_process+0x298>)
 80136aa:	781b      	ldrb	r3, [r3, #0]
 80136ac:	f003 0304 	and.w	r3, r3, #4
 80136b0:	2b00      	cmp	r3, #0
 80136b2:	d04e      	beq.n	8013752 <tcp_process+0xce>
    /* First, determine if the reset is acceptable. */
    if (pcb->state == SYN_SENT) {
 80136b4:	687b      	ldr	r3, [r7, #4]
 80136b6:	7d1b      	ldrb	r3, [r3, #20]
 80136b8:	2b02      	cmp	r3, #2
 80136ba:	d108      	bne.n	80136ce <tcp_process+0x4a>
      /* "In the SYN-SENT state (a RST received in response to an initial SYN),
          the RST is acceptable if the ACK field acknowledges the SYN." */
      if (ackno == pcb->snd_nxt) {
 80136bc:	687b      	ldr	r3, [r7, #4]
 80136be:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80136c0:	4b97      	ldr	r3, [pc, #604]	; (8013920 <tcp_process+0x29c>)
 80136c2:	681b      	ldr	r3, [r3, #0]
 80136c4:	429a      	cmp	r2, r3
 80136c6:	d123      	bne.n	8013710 <tcp_process+0x8c>
        acceptable = 1;
 80136c8:	2301      	movs	r3, #1
 80136ca:	76fb      	strb	r3, [r7, #27]
 80136cc:	e020      	b.n	8013710 <tcp_process+0x8c>
      }
    } else {
      /* "In all states except SYN-SENT, all reset (RST) segments are validated
          by checking their SEQ-fields." */
      if (seqno == pcb->rcv_nxt) {
 80136ce:	687b      	ldr	r3, [r7, #4]
 80136d0:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80136d2:	4b94      	ldr	r3, [pc, #592]	; (8013924 <tcp_process+0x2a0>)
 80136d4:	681b      	ldr	r3, [r3, #0]
 80136d6:	429a      	cmp	r2, r3
 80136d8:	d102      	bne.n	80136e0 <tcp_process+0x5c>
        acceptable = 1;
 80136da:	2301      	movs	r3, #1
 80136dc:	76fb      	strb	r3, [r7, #27]
 80136de:	e017      	b.n	8013710 <tcp_process+0x8c>
      } else  if (TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt,
 80136e0:	4b90      	ldr	r3, [pc, #576]	; (8013924 <tcp_process+0x2a0>)
 80136e2:	681a      	ldr	r2, [r3, #0]
 80136e4:	687b      	ldr	r3, [r7, #4]
 80136e6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80136e8:	1ad3      	subs	r3, r2, r3
 80136ea:	2b00      	cmp	r3, #0
 80136ec:	db10      	blt.n	8013710 <tcp_process+0x8c>
 80136ee:	4b8d      	ldr	r3, [pc, #564]	; (8013924 <tcp_process+0x2a0>)
 80136f0:	681a      	ldr	r2, [r3, #0]
 80136f2:	687b      	ldr	r3, [r7, #4]
 80136f4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80136f6:	6879      	ldr	r1, [r7, #4]
 80136f8:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 80136fa:	440b      	add	r3, r1
 80136fc:	1ad3      	subs	r3, r2, r3
 80136fe:	2b00      	cmp	r3, #0
 8013700:	dc06      	bgt.n	8013710 <tcp_process+0x8c>
                                  pcb->rcv_nxt + pcb->rcv_wnd)) {
        /* If the sequence number is inside the window, we send a challenge ACK
           and wait for a re-send with matching sequence number.
           This follows RFC 5961 section 3.2 and addresses CVE-2004-0230
           (RST spoofing attack), which is present in RFC 793 RST handling. */
        tcp_ack_now(pcb);
 8013702:	687b      	ldr	r3, [r7, #4]
 8013704:	8b5b      	ldrh	r3, [r3, #26]
 8013706:	f043 0302 	orr.w	r3, r3, #2
 801370a:	b29a      	uxth	r2, r3
 801370c:	687b      	ldr	r3, [r7, #4]
 801370e:	835a      	strh	r2, [r3, #26]
      }
    }

    if (acceptable) {
 8013710:	7efb      	ldrb	r3, [r7, #27]
 8013712:	2b00      	cmp	r3, #0
 8013714:	d01b      	beq.n	801374e <tcp_process+0xca>
      LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_process: Connection RESET\n"));
      LWIP_ASSERT("tcp_input: pcb->state != CLOSED", pcb->state != CLOSED);
 8013716:	687b      	ldr	r3, [r7, #4]
 8013718:	7d1b      	ldrb	r3, [r3, #20]
 801371a:	2b00      	cmp	r3, #0
 801371c:	d106      	bne.n	801372c <tcp_process+0xa8>
 801371e:	4b7c      	ldr	r3, [pc, #496]	; (8013910 <tcp_process+0x28c>)
 8013720:	f44f 724e 	mov.w	r2, #824	; 0x338
 8013724:	4980      	ldr	r1, [pc, #512]	; (8013928 <tcp_process+0x2a4>)
 8013726:	487c      	ldr	r0, [pc, #496]	; (8013918 <tcp_process+0x294>)
 8013728:	f006 fa92 	bl	8019c50 <iprintf>
      recv_flags |= TF_RESET;
 801372c:	4b7f      	ldr	r3, [pc, #508]	; (801392c <tcp_process+0x2a8>)
 801372e:	781b      	ldrb	r3, [r3, #0]
 8013730:	f043 0308 	orr.w	r3, r3, #8
 8013734:	b2da      	uxtb	r2, r3
 8013736:	4b7d      	ldr	r3, [pc, #500]	; (801392c <tcp_process+0x2a8>)
 8013738:	701a      	strb	r2, [r3, #0]
      tcp_clear_flags(pcb, TF_ACK_DELAY);
 801373a:	687b      	ldr	r3, [r7, #4]
 801373c:	8b5b      	ldrh	r3, [r3, #26]
 801373e:	f023 0301 	bic.w	r3, r3, #1
 8013742:	b29a      	uxth	r2, r3
 8013744:	687b      	ldr	r3, [r7, #4]
 8013746:	835a      	strh	r2, [r3, #26]
      return ERR_RST;
 8013748:	f06f 030d 	mvn.w	r3, #13
 801374c:	e37a      	b.n	8013e44 <tcp_process+0x7c0>
    } else {
      LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_process: unacceptable reset seqno %"U32_F" rcv_nxt %"U32_F"\n",
                                    seqno, pcb->rcv_nxt));
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_process: unacceptable reset seqno %"U32_F" rcv_nxt %"U32_F"\n",
                              seqno, pcb->rcv_nxt));
      return ERR_OK;
 801374e:	2300      	movs	r3, #0
 8013750:	e378      	b.n	8013e44 <tcp_process+0x7c0>
    }
  }

  if ((flags & TCP_SYN) && (pcb->state != SYN_SENT && pcb->state != SYN_RCVD)) {
 8013752:	4b72      	ldr	r3, [pc, #456]	; (801391c <tcp_process+0x298>)
 8013754:	781b      	ldrb	r3, [r3, #0]
 8013756:	f003 0302 	and.w	r3, r3, #2
 801375a:	2b00      	cmp	r3, #0
 801375c:	d010      	beq.n	8013780 <tcp_process+0xfc>
 801375e:	687b      	ldr	r3, [r7, #4]
 8013760:	7d1b      	ldrb	r3, [r3, #20]
 8013762:	2b02      	cmp	r3, #2
 8013764:	d00c      	beq.n	8013780 <tcp_process+0xfc>
 8013766:	687b      	ldr	r3, [r7, #4]
 8013768:	7d1b      	ldrb	r3, [r3, #20]
 801376a:	2b03      	cmp	r3, #3
 801376c:	d008      	beq.n	8013780 <tcp_process+0xfc>
    /* Cope with new connection attempt after remote end crashed */
    tcp_ack_now(pcb);
 801376e:	687b      	ldr	r3, [r7, #4]
 8013770:	8b5b      	ldrh	r3, [r3, #26]
 8013772:	f043 0302 	orr.w	r3, r3, #2
 8013776:	b29a      	uxth	r2, r3
 8013778:	687b      	ldr	r3, [r7, #4]
 801377a:	835a      	strh	r2, [r3, #26]
    return ERR_OK;
 801377c:	2300      	movs	r3, #0
 801377e:	e361      	b.n	8013e44 <tcp_process+0x7c0>
  }

  if ((pcb->flags & TF_RXCLOSED) == 0) {
 8013780:	687b      	ldr	r3, [r7, #4]
 8013782:	8b5b      	ldrh	r3, [r3, #26]
 8013784:	f003 0310 	and.w	r3, r3, #16
 8013788:	2b00      	cmp	r3, #0
 801378a:	d103      	bne.n	8013794 <tcp_process+0x110>
    /* Update the PCB (in)activity timer unless rx is closed (see tcp_shutdown) */
    pcb->tmr = tcp_ticks;
 801378c:	4b68      	ldr	r3, [pc, #416]	; (8013930 <tcp_process+0x2ac>)
 801378e:	681a      	ldr	r2, [r3, #0]
 8013790:	687b      	ldr	r3, [r7, #4]
 8013792:	621a      	str	r2, [r3, #32]
  }
  pcb->keep_cnt_sent = 0;
 8013794:	687b      	ldr	r3, [r7, #4]
 8013796:	2200      	movs	r2, #0
 8013798:	f883 209b 	strb.w	r2, [r3, #155]	; 0x9b
  pcb->persist_probe = 0;
 801379c:	687b      	ldr	r3, [r7, #4]
 801379e:	2200      	movs	r2, #0
 80137a0:	f883 209a 	strb.w	r2, [r3, #154]	; 0x9a

  tcp_parseopt(pcb);
 80137a4:	6878      	ldr	r0, [r7, #4]
 80137a6:	f001 fc2f 	bl	8015008 <tcp_parseopt>

  /* Do different things depending on the TCP state. */
  switch (pcb->state) {
 80137aa:	687b      	ldr	r3, [r7, #4]
 80137ac:	7d1b      	ldrb	r3, [r3, #20]
 80137ae:	3b02      	subs	r3, #2
 80137b0:	2b07      	cmp	r3, #7
 80137b2:	f200 8337 	bhi.w	8013e24 <tcp_process+0x7a0>
 80137b6:	a201      	add	r2, pc, #4	; (adr r2, 80137bc <tcp_process+0x138>)
 80137b8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80137bc:	080137dd 	.word	0x080137dd
 80137c0:	08013a0d 	.word	0x08013a0d
 80137c4:	08013b85 	.word	0x08013b85
 80137c8:	08013baf 	.word	0x08013baf
 80137cc:	08013cd3 	.word	0x08013cd3
 80137d0:	08013b85 	.word	0x08013b85
 80137d4:	08013d5f 	.word	0x08013d5f
 80137d8:	08013def 	.word	0x08013def
    case SYN_SENT:
      LWIP_DEBUGF(TCP_INPUT_DEBUG, ("SYN-SENT: ackno %"U32_F" pcb->snd_nxt %"U32_F" unacked %"U32_F"\n", ackno,
                                    pcb->snd_nxt, lwip_ntohl(pcb->unacked->tcphdr->seqno)));
      /* received SYN ACK with expected sequence number? */
      if ((flags & TCP_ACK) && (flags & TCP_SYN)
 80137dc:	4b4f      	ldr	r3, [pc, #316]	; (801391c <tcp_process+0x298>)
 80137de:	781b      	ldrb	r3, [r3, #0]
 80137e0:	f003 0310 	and.w	r3, r3, #16
 80137e4:	2b00      	cmp	r3, #0
 80137e6:	f000 80e4 	beq.w	80139b2 <tcp_process+0x32e>
 80137ea:	4b4c      	ldr	r3, [pc, #304]	; (801391c <tcp_process+0x298>)
 80137ec:	781b      	ldrb	r3, [r3, #0]
 80137ee:	f003 0302 	and.w	r3, r3, #2
 80137f2:	2b00      	cmp	r3, #0
 80137f4:	f000 80dd 	beq.w	80139b2 <tcp_process+0x32e>
          && (ackno == pcb->lastack + 1)) {
 80137f8:	687b      	ldr	r3, [r7, #4]
 80137fa:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80137fc:	1c5a      	adds	r2, r3, #1
 80137fe:	4b48      	ldr	r3, [pc, #288]	; (8013920 <tcp_process+0x29c>)
 8013800:	681b      	ldr	r3, [r3, #0]
 8013802:	429a      	cmp	r2, r3
 8013804:	f040 80d5 	bne.w	80139b2 <tcp_process+0x32e>
        pcb->rcv_nxt = seqno + 1;
 8013808:	4b46      	ldr	r3, [pc, #280]	; (8013924 <tcp_process+0x2a0>)
 801380a:	681b      	ldr	r3, [r3, #0]
 801380c:	1c5a      	adds	r2, r3, #1
 801380e:	687b      	ldr	r3, [r7, #4]
 8013810:	625a      	str	r2, [r3, #36]	; 0x24
        pcb->rcv_ann_right_edge = pcb->rcv_nxt;
 8013812:	687b      	ldr	r3, [r7, #4]
 8013814:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8013816:	687b      	ldr	r3, [r7, #4]
 8013818:	62da      	str	r2, [r3, #44]	; 0x2c
        pcb->lastack = ackno;
 801381a:	4b41      	ldr	r3, [pc, #260]	; (8013920 <tcp_process+0x29c>)
 801381c:	681a      	ldr	r2, [r3, #0]
 801381e:	687b      	ldr	r3, [r7, #4]
 8013820:	645a      	str	r2, [r3, #68]	; 0x44
        pcb->snd_wnd = tcphdr->wnd;
 8013822:	4b44      	ldr	r3, [pc, #272]	; (8013934 <tcp_process+0x2b0>)
 8013824:	681b      	ldr	r3, [r3, #0]
 8013826:	89db      	ldrh	r3, [r3, #14]
 8013828:	b29a      	uxth	r2, r3
 801382a:	687b      	ldr	r3, [r7, #4]
 801382c:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
        pcb->snd_wnd_max = pcb->snd_wnd;
 8013830:	687b      	ldr	r3, [r7, #4]
 8013832:	f8b3 2060 	ldrh.w	r2, [r3, #96]	; 0x60
 8013836:	687b      	ldr	r3, [r7, #4]
 8013838:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
        pcb->snd_wl1 = seqno - 1; /* initialise to seqno - 1 to force window update */
 801383c:	4b39      	ldr	r3, [pc, #228]	; (8013924 <tcp_process+0x2a0>)
 801383e:	681b      	ldr	r3, [r3, #0]
 8013840:	1e5a      	subs	r2, r3, #1
 8013842:	687b      	ldr	r3, [r7, #4]
 8013844:	655a      	str	r2, [r3, #84]	; 0x54
        pcb->state = ESTABLISHED;
 8013846:	687b      	ldr	r3, [r7, #4]
 8013848:	2204      	movs	r2, #4
 801384a:	751a      	strb	r2, [r3, #20]

#if TCP_CALCULATE_EFF_SEND_MSS
        pcb->mss = tcp_eff_send_mss(pcb->mss, &pcb->local_ip, &pcb->remote_ip);
 801384c:	687b      	ldr	r3, [r7, #4]
 801384e:	8e5c      	ldrh	r4, [r3, #50]	; 0x32
 8013850:	687b      	ldr	r3, [r7, #4]
 8013852:	3304      	adds	r3, #4
 8013854:	4618      	mov	r0, r3
 8013856:	f004 fad5 	bl	8017e04 <ip4_route>
 801385a:	4601      	mov	r1, r0
 801385c:	687b      	ldr	r3, [r7, #4]
 801385e:	3304      	adds	r3, #4
 8013860:	461a      	mov	r2, r3
 8013862:	4620      	mov	r0, r4
 8013864:	f7ff f88c 	bl	8012980 <tcp_eff_send_mss_netif>
 8013868:	4603      	mov	r3, r0
 801386a:	461a      	mov	r2, r3
 801386c:	687b      	ldr	r3, [r7, #4]
 801386e:	865a      	strh	r2, [r3, #50]	; 0x32
#endif /* TCP_CALCULATE_EFF_SEND_MSS */

        pcb->cwnd = LWIP_TCP_CALC_INITIAL_CWND(pcb->mss);
 8013870:	687b      	ldr	r3, [r7, #4]
 8013872:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8013874:	009a      	lsls	r2, r3, #2
 8013876:	687b      	ldr	r3, [r7, #4]
 8013878:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 801387a:	005b      	lsls	r3, r3, #1
 801387c:	f241 111c 	movw	r1, #4380	; 0x111c
 8013880:	428b      	cmp	r3, r1
 8013882:	bf38      	it	cc
 8013884:	460b      	movcc	r3, r1
 8013886:	429a      	cmp	r2, r3
 8013888:	d204      	bcs.n	8013894 <tcp_process+0x210>
 801388a:	687b      	ldr	r3, [r7, #4]
 801388c:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 801388e:	009b      	lsls	r3, r3, #2
 8013890:	b29b      	uxth	r3, r3
 8013892:	e00d      	b.n	80138b0 <tcp_process+0x22c>
 8013894:	687b      	ldr	r3, [r7, #4]
 8013896:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8013898:	005b      	lsls	r3, r3, #1
 801389a:	f241 121c 	movw	r2, #4380	; 0x111c
 801389e:	4293      	cmp	r3, r2
 80138a0:	d904      	bls.n	80138ac <tcp_process+0x228>
 80138a2:	687b      	ldr	r3, [r7, #4]
 80138a4:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 80138a6:	005b      	lsls	r3, r3, #1
 80138a8:	b29b      	uxth	r3, r3
 80138aa:	e001      	b.n	80138b0 <tcp_process+0x22c>
 80138ac:	f241 131c 	movw	r3, #4380	; 0x111c
 80138b0:	687a      	ldr	r2, [r7, #4]
 80138b2:	f8a2 3048 	strh.w	r3, [r2, #72]	; 0x48
        LWIP_DEBUGF(TCP_CWND_DEBUG, ("tcp_process (SENT): cwnd %"TCPWNDSIZE_F
                                     " ssthresh %"TCPWNDSIZE_F"\n",
                                     pcb->cwnd, pcb->ssthresh));
        LWIP_ASSERT("pcb->snd_queuelen > 0", (pcb->snd_queuelen > 0));
 80138b6:	687b      	ldr	r3, [r7, #4]
 80138b8:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 80138bc:	2b00      	cmp	r3, #0
 80138be:	d106      	bne.n	80138ce <tcp_process+0x24a>
 80138c0:	4b13      	ldr	r3, [pc, #76]	; (8013910 <tcp_process+0x28c>)
 80138c2:	f44f 725b 	mov.w	r2, #876	; 0x36c
 80138c6:	491c      	ldr	r1, [pc, #112]	; (8013938 <tcp_process+0x2b4>)
 80138c8:	4813      	ldr	r0, [pc, #76]	; (8013918 <tcp_process+0x294>)
 80138ca:	f006 f9c1 	bl	8019c50 <iprintf>
        --pcb->snd_queuelen;
 80138ce:	687b      	ldr	r3, [r7, #4]
 80138d0:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 80138d4:	3b01      	subs	r3, #1
 80138d6:	b29a      	uxth	r2, r3
 80138d8:	687b      	ldr	r3, [r7, #4]
 80138da:	f8a3 2066 	strh.w	r2, [r3, #102]	; 0x66
        LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_process: SYN-SENT --queuelen %"TCPWNDSIZE_F"\n", (tcpwnd_size_t)pcb->snd_queuelen));
        rseg = pcb->unacked;
 80138de:	687b      	ldr	r3, [r7, #4]
 80138e0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80138e2:	61fb      	str	r3, [r7, #28]
        if (rseg == NULL) {
 80138e4:	69fb      	ldr	r3, [r7, #28]
 80138e6:	2b00      	cmp	r3, #0
 80138e8:	d12a      	bne.n	8013940 <tcp_process+0x2bc>
          /* might happen if tcp_output fails in tcp_rexmit_rto()
             in which case the segment is on the unsent list */
          rseg = pcb->unsent;
 80138ea:	687b      	ldr	r3, [r7, #4]
 80138ec:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80138ee:	61fb      	str	r3, [r7, #28]
          LWIP_ASSERT("no segment to free", rseg != NULL);
 80138f0:	69fb      	ldr	r3, [r7, #28]
 80138f2:	2b00      	cmp	r3, #0
 80138f4:	d106      	bne.n	8013904 <tcp_process+0x280>
 80138f6:	4b06      	ldr	r3, [pc, #24]	; (8013910 <tcp_process+0x28c>)
 80138f8:	f44f 725d 	mov.w	r2, #884	; 0x374
 80138fc:	490f      	ldr	r1, [pc, #60]	; (801393c <tcp_process+0x2b8>)
 80138fe:	4806      	ldr	r0, [pc, #24]	; (8013918 <tcp_process+0x294>)
 8013900:	f006 f9a6 	bl	8019c50 <iprintf>
          pcb->unsent = rseg->next;
 8013904:	69fb      	ldr	r3, [r7, #28]
 8013906:	681a      	ldr	r2, [r3, #0]
 8013908:	687b      	ldr	r3, [r7, #4]
 801390a:	66da      	str	r2, [r3, #108]	; 0x6c
 801390c:	e01c      	b.n	8013948 <tcp_process+0x2c4>
 801390e:	bf00      	nop
 8013910:	0801d77c 	.word	0x0801d77c
 8013914:	0801d9b4 	.word	0x0801d9b4
 8013918:	0801d7c8 	.word	0x0801d7c8
 801391c:	2000711c 	.word	0x2000711c
 8013920:	20007114 	.word	0x20007114
 8013924:	20007110 	.word	0x20007110
 8013928:	0801d9d0 	.word	0x0801d9d0
 801392c:	2000711d 	.word	0x2000711d
 8013930:	200070d8 	.word	0x200070d8
 8013934:	20007100 	.word	0x20007100
 8013938:	0801d9f0 	.word	0x0801d9f0
 801393c:	0801da08 	.word	0x0801da08
        } else {
          pcb->unacked = rseg->next;
 8013940:	69fb      	ldr	r3, [r7, #28]
 8013942:	681a      	ldr	r2, [r3, #0]
 8013944:	687b      	ldr	r3, [r7, #4]
 8013946:	671a      	str	r2, [r3, #112]	; 0x70
        }
        tcp_seg_free(rseg);
 8013948:	69f8      	ldr	r0, [r7, #28]
 801394a:	f7fe fd22 	bl	8012392 <tcp_seg_free>

        /* If there's nothing left to acknowledge, stop the retransmit
           timer, otherwise reset it to start again */
        if (pcb->unacked == NULL) {
 801394e:	687b      	ldr	r3, [r7, #4]
 8013950:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8013952:	2b00      	cmp	r3, #0
 8013954:	d104      	bne.n	8013960 <tcp_process+0x2dc>
          pcb->rtime = -1;
 8013956:	687b      	ldr	r3, [r7, #4]
 8013958:	f64f 72ff 	movw	r2, #65535	; 0xffff
 801395c:	861a      	strh	r2, [r3, #48]	; 0x30
 801395e:	e006      	b.n	801396e <tcp_process+0x2ea>
        } else {
          pcb->rtime = 0;
 8013960:	687b      	ldr	r3, [r7, #4]
 8013962:	2200      	movs	r2, #0
 8013964:	861a      	strh	r2, [r3, #48]	; 0x30
          pcb->nrtx = 0;
 8013966:	687b      	ldr	r3, [r7, #4]
 8013968:	2200      	movs	r2, #0
 801396a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
        }

        /* Call the user specified function to call when successfully
         * connected. */
        TCP_EVENT_CONNECTED(pcb, ERR_OK, err);
 801396e:	687b      	ldr	r3, [r7, #4]
 8013970:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8013974:	2b00      	cmp	r3, #0
 8013976:	d00a      	beq.n	801398e <tcp_process+0x30a>
 8013978:	687b      	ldr	r3, [r7, #4]
 801397a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 801397e:	687a      	ldr	r2, [r7, #4]
 8013980:	6910      	ldr	r0, [r2, #16]
 8013982:	2200      	movs	r2, #0
 8013984:	6879      	ldr	r1, [r7, #4]
 8013986:	4798      	blx	r3
 8013988:	4603      	mov	r3, r0
 801398a:	76bb      	strb	r3, [r7, #26]
 801398c:	e001      	b.n	8013992 <tcp_process+0x30e>
 801398e:	2300      	movs	r3, #0
 8013990:	76bb      	strb	r3, [r7, #26]
        if (err == ERR_ABRT) {
 8013992:	f997 301a 	ldrsb.w	r3, [r7, #26]
 8013996:	f113 0f0d 	cmn.w	r3, #13
 801399a:	d102      	bne.n	80139a2 <tcp_process+0x31e>
          return ERR_ABRT;
 801399c:	f06f 030c 	mvn.w	r3, #12
 80139a0:	e250      	b.n	8013e44 <tcp_process+0x7c0>
        }
        tcp_ack_now(pcb);
 80139a2:	687b      	ldr	r3, [r7, #4]
 80139a4:	8b5b      	ldrh	r3, [r3, #26]
 80139a6:	f043 0302 	orr.w	r3, r3, #2
 80139aa:	b29a      	uxth	r2, r3
 80139ac:	687b      	ldr	r3, [r7, #4]
 80139ae:	835a      	strh	r2, [r3, #26]
        if (pcb->nrtx < TCP_SYNMAXRTX) {
          pcb->rtime = 0;
          tcp_rexmit_rto(pcb);
        }
      }
      break;
 80139b0:	e23a      	b.n	8013e28 <tcp_process+0x7a4>
      else if (flags & TCP_ACK) {
 80139b2:	4b98      	ldr	r3, [pc, #608]	; (8013c14 <tcp_process+0x590>)
 80139b4:	781b      	ldrb	r3, [r3, #0]
 80139b6:	f003 0310 	and.w	r3, r3, #16
 80139ba:	2b00      	cmp	r3, #0
 80139bc:	f000 8234 	beq.w	8013e28 <tcp_process+0x7a4>
        tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 80139c0:	4b95      	ldr	r3, [pc, #596]	; (8013c18 <tcp_process+0x594>)
 80139c2:	6819      	ldr	r1, [r3, #0]
 80139c4:	4b95      	ldr	r3, [pc, #596]	; (8013c1c <tcp_process+0x598>)
 80139c6:	881b      	ldrh	r3, [r3, #0]
 80139c8:	461a      	mov	r2, r3
 80139ca:	4b95      	ldr	r3, [pc, #596]	; (8013c20 <tcp_process+0x59c>)
 80139cc:	681b      	ldr	r3, [r3, #0]
 80139ce:	18d0      	adds	r0, r2, r3
                ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 80139d0:	4b94      	ldr	r3, [pc, #592]	; (8013c24 <tcp_process+0x5a0>)
 80139d2:	681b      	ldr	r3, [r3, #0]
        tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 80139d4:	885b      	ldrh	r3, [r3, #2]
 80139d6:	b29b      	uxth	r3, r3
                ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 80139d8:	4a92      	ldr	r2, [pc, #584]	; (8013c24 <tcp_process+0x5a0>)
 80139da:	6812      	ldr	r2, [r2, #0]
        tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 80139dc:	8812      	ldrh	r2, [r2, #0]
 80139de:	b292      	uxth	r2, r2
 80139e0:	9202      	str	r2, [sp, #8]
 80139e2:	9301      	str	r3, [sp, #4]
 80139e4:	4b90      	ldr	r3, [pc, #576]	; (8013c28 <tcp_process+0x5a4>)
 80139e6:	9300      	str	r3, [sp, #0]
 80139e8:	4b90      	ldr	r3, [pc, #576]	; (8013c2c <tcp_process+0x5a8>)
 80139ea:	4602      	mov	r2, r0
 80139ec:	6878      	ldr	r0, [r7, #4]
 80139ee:	f002 fc85 	bl	80162fc <tcp_rst>
        if (pcb->nrtx < TCP_SYNMAXRTX) {
 80139f2:	687b      	ldr	r3, [r7, #4]
 80139f4:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 80139f8:	2b05      	cmp	r3, #5
 80139fa:	f200 8215 	bhi.w	8013e28 <tcp_process+0x7a4>
          pcb->rtime = 0;
 80139fe:	687b      	ldr	r3, [r7, #4]
 8013a00:	2200      	movs	r2, #0
 8013a02:	861a      	strh	r2, [r3, #48]	; 0x30
          tcp_rexmit_rto(pcb);
 8013a04:	6878      	ldr	r0, [r7, #4]
 8013a06:	f002 fa51 	bl	8015eac <tcp_rexmit_rto>
      break;
 8013a0a:	e20d      	b.n	8013e28 <tcp_process+0x7a4>
    case SYN_RCVD:
      if (flags & TCP_ACK) {
 8013a0c:	4b81      	ldr	r3, [pc, #516]	; (8013c14 <tcp_process+0x590>)
 8013a0e:	781b      	ldrb	r3, [r3, #0]
 8013a10:	f003 0310 	and.w	r3, r3, #16
 8013a14:	2b00      	cmp	r3, #0
 8013a16:	f000 80a1 	beq.w	8013b5c <tcp_process+0x4d8>
        /* expected ACK number? */
        if (TCP_SEQ_BETWEEN(ackno, pcb->lastack + 1, pcb->snd_nxt)) {
 8013a1a:	4b7f      	ldr	r3, [pc, #508]	; (8013c18 <tcp_process+0x594>)
 8013a1c:	681a      	ldr	r2, [r3, #0]
 8013a1e:	687b      	ldr	r3, [r7, #4]
 8013a20:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8013a22:	1ad3      	subs	r3, r2, r3
 8013a24:	3b01      	subs	r3, #1
 8013a26:	2b00      	cmp	r3, #0
 8013a28:	db7e      	blt.n	8013b28 <tcp_process+0x4a4>
 8013a2a:	4b7b      	ldr	r3, [pc, #492]	; (8013c18 <tcp_process+0x594>)
 8013a2c:	681a      	ldr	r2, [r3, #0]
 8013a2e:	687b      	ldr	r3, [r7, #4]
 8013a30:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8013a32:	1ad3      	subs	r3, r2, r3
 8013a34:	2b00      	cmp	r3, #0
 8013a36:	dc77      	bgt.n	8013b28 <tcp_process+0x4a4>
          pcb->state = ESTABLISHED;
 8013a38:	687b      	ldr	r3, [r7, #4]
 8013a3a:	2204      	movs	r2, #4
 8013a3c:	751a      	strb	r2, [r3, #20]
          LWIP_DEBUGF(TCP_DEBUG, ("TCP connection established %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
#if LWIP_CALLBACK_API || TCP_LISTEN_BACKLOG
          if (pcb->listener == NULL) {
 8013a3e:	687b      	ldr	r3, [r7, #4]
 8013a40:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8013a42:	2b00      	cmp	r3, #0
 8013a44:	d102      	bne.n	8013a4c <tcp_process+0x3c8>
            /* listen pcb might be closed by now */
            err = ERR_VAL;
 8013a46:	23fa      	movs	r3, #250	; 0xfa
 8013a48:	76bb      	strb	r3, [r7, #26]
 8013a4a:	e01d      	b.n	8013a88 <tcp_process+0x404>
          } else
#endif /* LWIP_CALLBACK_API || TCP_LISTEN_BACKLOG */
          {
#if LWIP_CALLBACK_API
            LWIP_ASSERT("pcb->listener->accept != NULL", pcb->listener->accept != NULL);
 8013a4c:	687b      	ldr	r3, [r7, #4]
 8013a4e:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8013a50:	699b      	ldr	r3, [r3, #24]
 8013a52:	2b00      	cmp	r3, #0
 8013a54:	d106      	bne.n	8013a64 <tcp_process+0x3e0>
 8013a56:	4b76      	ldr	r3, [pc, #472]	; (8013c30 <tcp_process+0x5ac>)
 8013a58:	f44f 726a 	mov.w	r2, #936	; 0x3a8
 8013a5c:	4975      	ldr	r1, [pc, #468]	; (8013c34 <tcp_process+0x5b0>)
 8013a5e:	4876      	ldr	r0, [pc, #472]	; (8013c38 <tcp_process+0x5b4>)
 8013a60:	f006 f8f6 	bl	8019c50 <iprintf>
#endif
            tcp_backlog_accepted(pcb);
            /* Call the accept function. */
            TCP_EVENT_ACCEPT(pcb->listener, pcb, pcb->callback_arg, ERR_OK, err);
 8013a64:	687b      	ldr	r3, [r7, #4]
 8013a66:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8013a68:	699b      	ldr	r3, [r3, #24]
 8013a6a:	2b00      	cmp	r3, #0
 8013a6c:	d00a      	beq.n	8013a84 <tcp_process+0x400>
 8013a6e:	687b      	ldr	r3, [r7, #4]
 8013a70:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8013a72:	699b      	ldr	r3, [r3, #24]
 8013a74:	687a      	ldr	r2, [r7, #4]
 8013a76:	6910      	ldr	r0, [r2, #16]
 8013a78:	2200      	movs	r2, #0
 8013a7a:	6879      	ldr	r1, [r7, #4]
 8013a7c:	4798      	blx	r3
 8013a7e:	4603      	mov	r3, r0
 8013a80:	76bb      	strb	r3, [r7, #26]
 8013a82:	e001      	b.n	8013a88 <tcp_process+0x404>
 8013a84:	23f0      	movs	r3, #240	; 0xf0
 8013a86:	76bb      	strb	r3, [r7, #26]
          }
          if (err != ERR_OK) {
 8013a88:	f997 301a 	ldrsb.w	r3, [r7, #26]
 8013a8c:	2b00      	cmp	r3, #0
 8013a8e:	d00a      	beq.n	8013aa6 <tcp_process+0x422>
            /* If the accept function returns with an error, we abort
             * the connection. */
            /* Already aborted? */
            if (err != ERR_ABRT) {
 8013a90:	f997 301a 	ldrsb.w	r3, [r7, #26]
 8013a94:	f113 0f0d 	cmn.w	r3, #13
 8013a98:	d002      	beq.n	8013aa0 <tcp_process+0x41c>
              tcp_abort(pcb);
 8013a9a:	6878      	ldr	r0, [r7, #4]
 8013a9c:	f7fd ff8a 	bl	80119b4 <tcp_abort>
            }
            return ERR_ABRT;
 8013aa0:	f06f 030c 	mvn.w	r3, #12
 8013aa4:	e1ce      	b.n	8013e44 <tcp_process+0x7c0>
          }
          /* If there was any data contained within this ACK,
           * we'd better pass it on to the application as well. */
          tcp_receive(pcb);
 8013aa6:	6878      	ldr	r0, [r7, #4]
 8013aa8:	f000 fae0 	bl	801406c <tcp_receive>

          /* Prevent ACK for SYN to generate a sent event */
          if (recv_acked != 0) {
 8013aac:	4b63      	ldr	r3, [pc, #396]	; (8013c3c <tcp_process+0x5b8>)
 8013aae:	881b      	ldrh	r3, [r3, #0]
 8013ab0:	2b00      	cmp	r3, #0
 8013ab2:	d005      	beq.n	8013ac0 <tcp_process+0x43c>
            recv_acked--;
 8013ab4:	4b61      	ldr	r3, [pc, #388]	; (8013c3c <tcp_process+0x5b8>)
 8013ab6:	881b      	ldrh	r3, [r3, #0]
 8013ab8:	3b01      	subs	r3, #1
 8013aba:	b29a      	uxth	r2, r3
 8013abc:	4b5f      	ldr	r3, [pc, #380]	; (8013c3c <tcp_process+0x5b8>)
 8013abe:	801a      	strh	r2, [r3, #0]
          }

          pcb->cwnd = LWIP_TCP_CALC_INITIAL_CWND(pcb->mss);
 8013ac0:	687b      	ldr	r3, [r7, #4]
 8013ac2:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8013ac4:	009a      	lsls	r2, r3, #2
 8013ac6:	687b      	ldr	r3, [r7, #4]
 8013ac8:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8013aca:	005b      	lsls	r3, r3, #1
 8013acc:	f241 111c 	movw	r1, #4380	; 0x111c
 8013ad0:	428b      	cmp	r3, r1
 8013ad2:	bf38      	it	cc
 8013ad4:	460b      	movcc	r3, r1
 8013ad6:	429a      	cmp	r2, r3
 8013ad8:	d204      	bcs.n	8013ae4 <tcp_process+0x460>
 8013ada:	687b      	ldr	r3, [r7, #4]
 8013adc:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8013ade:	009b      	lsls	r3, r3, #2
 8013ae0:	b29b      	uxth	r3, r3
 8013ae2:	e00d      	b.n	8013b00 <tcp_process+0x47c>
 8013ae4:	687b      	ldr	r3, [r7, #4]
 8013ae6:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8013ae8:	005b      	lsls	r3, r3, #1
 8013aea:	f241 121c 	movw	r2, #4380	; 0x111c
 8013aee:	4293      	cmp	r3, r2
 8013af0:	d904      	bls.n	8013afc <tcp_process+0x478>
 8013af2:	687b      	ldr	r3, [r7, #4]
 8013af4:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8013af6:	005b      	lsls	r3, r3, #1
 8013af8:	b29b      	uxth	r3, r3
 8013afa:	e001      	b.n	8013b00 <tcp_process+0x47c>
 8013afc:	f241 131c 	movw	r3, #4380	; 0x111c
 8013b00:	687a      	ldr	r2, [r7, #4]
 8013b02:	f8a2 3048 	strh.w	r3, [r2, #72]	; 0x48
          LWIP_DEBUGF(TCP_CWND_DEBUG, ("tcp_process (SYN_RCVD): cwnd %"TCPWNDSIZE_F
                                       " ssthresh %"TCPWNDSIZE_F"\n",
                                       pcb->cwnd, pcb->ssthresh));

          if (recv_flags & TF_GOT_FIN) {
 8013b06:	4b4e      	ldr	r3, [pc, #312]	; (8013c40 <tcp_process+0x5bc>)
 8013b08:	781b      	ldrb	r3, [r3, #0]
 8013b0a:	f003 0320 	and.w	r3, r3, #32
 8013b0e:	2b00      	cmp	r3, #0
 8013b10:	d037      	beq.n	8013b82 <tcp_process+0x4fe>
            tcp_ack_now(pcb);
 8013b12:	687b      	ldr	r3, [r7, #4]
 8013b14:	8b5b      	ldrh	r3, [r3, #26]
 8013b16:	f043 0302 	orr.w	r3, r3, #2
 8013b1a:	b29a      	uxth	r2, r3
 8013b1c:	687b      	ldr	r3, [r7, #4]
 8013b1e:	835a      	strh	r2, [r3, #26]
            pcb->state = CLOSE_WAIT;
 8013b20:	687b      	ldr	r3, [r7, #4]
 8013b22:	2207      	movs	r2, #7
 8013b24:	751a      	strb	r2, [r3, #20]
          if (recv_flags & TF_GOT_FIN) {
 8013b26:	e02c      	b.n	8013b82 <tcp_process+0x4fe>
          }
        } else {
          /* incorrect ACK number, send RST */
          tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 8013b28:	4b3b      	ldr	r3, [pc, #236]	; (8013c18 <tcp_process+0x594>)
 8013b2a:	6819      	ldr	r1, [r3, #0]
 8013b2c:	4b3b      	ldr	r3, [pc, #236]	; (8013c1c <tcp_process+0x598>)
 8013b2e:	881b      	ldrh	r3, [r3, #0]
 8013b30:	461a      	mov	r2, r3
 8013b32:	4b3b      	ldr	r3, [pc, #236]	; (8013c20 <tcp_process+0x59c>)
 8013b34:	681b      	ldr	r3, [r3, #0]
 8013b36:	18d0      	adds	r0, r2, r3
                  ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 8013b38:	4b3a      	ldr	r3, [pc, #232]	; (8013c24 <tcp_process+0x5a0>)
 8013b3a:	681b      	ldr	r3, [r3, #0]
          tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 8013b3c:	885b      	ldrh	r3, [r3, #2]
 8013b3e:	b29b      	uxth	r3, r3
                  ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 8013b40:	4a38      	ldr	r2, [pc, #224]	; (8013c24 <tcp_process+0x5a0>)
 8013b42:	6812      	ldr	r2, [r2, #0]
          tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 8013b44:	8812      	ldrh	r2, [r2, #0]
 8013b46:	b292      	uxth	r2, r2
 8013b48:	9202      	str	r2, [sp, #8]
 8013b4a:	9301      	str	r3, [sp, #4]
 8013b4c:	4b36      	ldr	r3, [pc, #216]	; (8013c28 <tcp_process+0x5a4>)
 8013b4e:	9300      	str	r3, [sp, #0]
 8013b50:	4b36      	ldr	r3, [pc, #216]	; (8013c2c <tcp_process+0x5a8>)
 8013b52:	4602      	mov	r2, r0
 8013b54:	6878      	ldr	r0, [r7, #4]
 8013b56:	f002 fbd1 	bl	80162fc <tcp_rst>
        }
      } else if ((flags & TCP_SYN) && (seqno == pcb->rcv_nxt - 1)) {
        /* Looks like another copy of the SYN - retransmit our SYN-ACK */
        tcp_rexmit(pcb);
      }
      break;
 8013b5a:	e167      	b.n	8013e2c <tcp_process+0x7a8>
      } else if ((flags & TCP_SYN) && (seqno == pcb->rcv_nxt - 1)) {
 8013b5c:	4b2d      	ldr	r3, [pc, #180]	; (8013c14 <tcp_process+0x590>)
 8013b5e:	781b      	ldrb	r3, [r3, #0]
 8013b60:	f003 0302 	and.w	r3, r3, #2
 8013b64:	2b00      	cmp	r3, #0
 8013b66:	f000 8161 	beq.w	8013e2c <tcp_process+0x7a8>
 8013b6a:	687b      	ldr	r3, [r7, #4]
 8013b6c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8013b6e:	1e5a      	subs	r2, r3, #1
 8013b70:	4b2b      	ldr	r3, [pc, #172]	; (8013c20 <tcp_process+0x59c>)
 8013b72:	681b      	ldr	r3, [r3, #0]
 8013b74:	429a      	cmp	r2, r3
 8013b76:	f040 8159 	bne.w	8013e2c <tcp_process+0x7a8>
        tcp_rexmit(pcb);
 8013b7a:	6878      	ldr	r0, [r7, #4]
 8013b7c:	f002 f9b8 	bl	8015ef0 <tcp_rexmit>
      break;
 8013b80:	e154      	b.n	8013e2c <tcp_process+0x7a8>
 8013b82:	e153      	b.n	8013e2c <tcp_process+0x7a8>
    case CLOSE_WAIT:
    /* FALLTHROUGH */
    case ESTABLISHED:
      tcp_receive(pcb);
 8013b84:	6878      	ldr	r0, [r7, #4]
 8013b86:	f000 fa71 	bl	801406c <tcp_receive>
      if (recv_flags & TF_GOT_FIN) { /* passive close */
 8013b8a:	4b2d      	ldr	r3, [pc, #180]	; (8013c40 <tcp_process+0x5bc>)
 8013b8c:	781b      	ldrb	r3, [r3, #0]
 8013b8e:	f003 0320 	and.w	r3, r3, #32
 8013b92:	2b00      	cmp	r3, #0
 8013b94:	f000 814c 	beq.w	8013e30 <tcp_process+0x7ac>
        tcp_ack_now(pcb);
 8013b98:	687b      	ldr	r3, [r7, #4]
 8013b9a:	8b5b      	ldrh	r3, [r3, #26]
 8013b9c:	f043 0302 	orr.w	r3, r3, #2
 8013ba0:	b29a      	uxth	r2, r3
 8013ba2:	687b      	ldr	r3, [r7, #4]
 8013ba4:	835a      	strh	r2, [r3, #26]
        pcb->state = CLOSE_WAIT;
 8013ba6:	687b      	ldr	r3, [r7, #4]
 8013ba8:	2207      	movs	r2, #7
 8013baa:	751a      	strb	r2, [r3, #20]
      }
      break;
 8013bac:	e140      	b.n	8013e30 <tcp_process+0x7ac>
    case FIN_WAIT_1:
      tcp_receive(pcb);
 8013bae:	6878      	ldr	r0, [r7, #4]
 8013bb0:	f000 fa5c 	bl	801406c <tcp_receive>
      if (recv_flags & TF_GOT_FIN) {
 8013bb4:	4b22      	ldr	r3, [pc, #136]	; (8013c40 <tcp_process+0x5bc>)
 8013bb6:	781b      	ldrb	r3, [r3, #0]
 8013bb8:	f003 0320 	and.w	r3, r3, #32
 8013bbc:	2b00      	cmp	r3, #0
 8013bbe:	d071      	beq.n	8013ca4 <tcp_process+0x620>
        if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
 8013bc0:	4b14      	ldr	r3, [pc, #80]	; (8013c14 <tcp_process+0x590>)
 8013bc2:	781b      	ldrb	r3, [r3, #0]
 8013bc4:	f003 0310 	and.w	r3, r3, #16
 8013bc8:	2b00      	cmp	r3, #0
 8013bca:	d060      	beq.n	8013c8e <tcp_process+0x60a>
 8013bcc:	687b      	ldr	r3, [r7, #4]
 8013bce:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8013bd0:	4b11      	ldr	r3, [pc, #68]	; (8013c18 <tcp_process+0x594>)
 8013bd2:	681b      	ldr	r3, [r3, #0]
 8013bd4:	429a      	cmp	r2, r3
 8013bd6:	d15a      	bne.n	8013c8e <tcp_process+0x60a>
            pcb->unsent == NULL) {
 8013bd8:	687b      	ldr	r3, [r7, #4]
 8013bda:	6edb      	ldr	r3, [r3, #108]	; 0x6c
        if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
 8013bdc:	2b00      	cmp	r3, #0
 8013bde:	d156      	bne.n	8013c8e <tcp_process+0x60a>
          LWIP_DEBUGF(TCP_DEBUG,
                      ("TCP connection closed: FIN_WAIT_1 %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
          tcp_ack_now(pcb);
 8013be0:	687b      	ldr	r3, [r7, #4]
 8013be2:	8b5b      	ldrh	r3, [r3, #26]
 8013be4:	f043 0302 	orr.w	r3, r3, #2
 8013be8:	b29a      	uxth	r2, r3
 8013bea:	687b      	ldr	r3, [r7, #4]
 8013bec:	835a      	strh	r2, [r3, #26]
          tcp_pcb_purge(pcb);
 8013bee:	6878      	ldr	r0, [r7, #4]
 8013bf0:	f7fe fdbc 	bl	801276c <tcp_pcb_purge>
          TCP_RMV_ACTIVE(pcb);
 8013bf4:	4b13      	ldr	r3, [pc, #76]	; (8013c44 <tcp_process+0x5c0>)
 8013bf6:	681b      	ldr	r3, [r3, #0]
 8013bf8:	687a      	ldr	r2, [r7, #4]
 8013bfa:	429a      	cmp	r2, r3
 8013bfc:	d105      	bne.n	8013c0a <tcp_process+0x586>
 8013bfe:	4b11      	ldr	r3, [pc, #68]	; (8013c44 <tcp_process+0x5c0>)
 8013c00:	681b      	ldr	r3, [r3, #0]
 8013c02:	68db      	ldr	r3, [r3, #12]
 8013c04:	4a0f      	ldr	r2, [pc, #60]	; (8013c44 <tcp_process+0x5c0>)
 8013c06:	6013      	str	r3, [r2, #0]
 8013c08:	e02e      	b.n	8013c68 <tcp_process+0x5e4>
 8013c0a:	4b0e      	ldr	r3, [pc, #56]	; (8013c44 <tcp_process+0x5c0>)
 8013c0c:	681b      	ldr	r3, [r3, #0]
 8013c0e:	617b      	str	r3, [r7, #20]
 8013c10:	e027      	b.n	8013c62 <tcp_process+0x5de>
 8013c12:	bf00      	nop
 8013c14:	2000711c 	.word	0x2000711c
 8013c18:	20007114 	.word	0x20007114
 8013c1c:	2000711a 	.word	0x2000711a
 8013c20:	20007110 	.word	0x20007110
 8013c24:	20007100 	.word	0x20007100
 8013c28:	2000080c 	.word	0x2000080c
 8013c2c:	20000810 	.word	0x20000810
 8013c30:	0801d77c 	.word	0x0801d77c
 8013c34:	0801da1c 	.word	0x0801da1c
 8013c38:	0801d7c8 	.word	0x0801d7c8
 8013c3c:	20007118 	.word	0x20007118
 8013c40:	2000711d 	.word	0x2000711d
 8013c44:	200070e4 	.word	0x200070e4
 8013c48:	697b      	ldr	r3, [r7, #20]
 8013c4a:	68db      	ldr	r3, [r3, #12]
 8013c4c:	687a      	ldr	r2, [r7, #4]
 8013c4e:	429a      	cmp	r2, r3
 8013c50:	d104      	bne.n	8013c5c <tcp_process+0x5d8>
 8013c52:	687b      	ldr	r3, [r7, #4]
 8013c54:	68da      	ldr	r2, [r3, #12]
 8013c56:	697b      	ldr	r3, [r7, #20]
 8013c58:	60da      	str	r2, [r3, #12]
 8013c5a:	e005      	b.n	8013c68 <tcp_process+0x5e4>
 8013c5c:	697b      	ldr	r3, [r7, #20]
 8013c5e:	68db      	ldr	r3, [r3, #12]
 8013c60:	617b      	str	r3, [r7, #20]
 8013c62:	697b      	ldr	r3, [r7, #20]
 8013c64:	2b00      	cmp	r3, #0
 8013c66:	d1ef      	bne.n	8013c48 <tcp_process+0x5c4>
 8013c68:	687b      	ldr	r3, [r7, #4]
 8013c6a:	2200      	movs	r2, #0
 8013c6c:	60da      	str	r2, [r3, #12]
 8013c6e:	4b77      	ldr	r3, [pc, #476]	; (8013e4c <tcp_process+0x7c8>)
 8013c70:	2201      	movs	r2, #1
 8013c72:	701a      	strb	r2, [r3, #0]
          pcb->state = TIME_WAIT;
 8013c74:	687b      	ldr	r3, [r7, #4]
 8013c76:	220a      	movs	r2, #10
 8013c78:	751a      	strb	r2, [r3, #20]
          TCP_REG(&tcp_tw_pcbs, pcb);
 8013c7a:	4b75      	ldr	r3, [pc, #468]	; (8013e50 <tcp_process+0x7cc>)
 8013c7c:	681a      	ldr	r2, [r3, #0]
 8013c7e:	687b      	ldr	r3, [r7, #4]
 8013c80:	60da      	str	r2, [r3, #12]
 8013c82:	4a73      	ldr	r2, [pc, #460]	; (8013e50 <tcp_process+0x7cc>)
 8013c84:	687b      	ldr	r3, [r7, #4]
 8013c86:	6013      	str	r3, [r2, #0]
 8013c88:	f002 fcfa 	bl	8016680 <tcp_timer_needed>
        }
      } else if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
                 pcb->unsent == NULL) {
        pcb->state = FIN_WAIT_2;
      }
      break;
 8013c8c:	e0d2      	b.n	8013e34 <tcp_process+0x7b0>
          tcp_ack_now(pcb);
 8013c8e:	687b      	ldr	r3, [r7, #4]
 8013c90:	8b5b      	ldrh	r3, [r3, #26]
 8013c92:	f043 0302 	orr.w	r3, r3, #2
 8013c96:	b29a      	uxth	r2, r3
 8013c98:	687b      	ldr	r3, [r7, #4]
 8013c9a:	835a      	strh	r2, [r3, #26]
          pcb->state = CLOSING;
 8013c9c:	687b      	ldr	r3, [r7, #4]
 8013c9e:	2208      	movs	r2, #8
 8013ca0:	751a      	strb	r2, [r3, #20]
      break;
 8013ca2:	e0c7      	b.n	8013e34 <tcp_process+0x7b0>
      } else if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
 8013ca4:	4b6b      	ldr	r3, [pc, #428]	; (8013e54 <tcp_process+0x7d0>)
 8013ca6:	781b      	ldrb	r3, [r3, #0]
 8013ca8:	f003 0310 	and.w	r3, r3, #16
 8013cac:	2b00      	cmp	r3, #0
 8013cae:	f000 80c1 	beq.w	8013e34 <tcp_process+0x7b0>
 8013cb2:	687b      	ldr	r3, [r7, #4]
 8013cb4:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8013cb6:	4b68      	ldr	r3, [pc, #416]	; (8013e58 <tcp_process+0x7d4>)
 8013cb8:	681b      	ldr	r3, [r3, #0]
 8013cba:	429a      	cmp	r2, r3
 8013cbc:	f040 80ba 	bne.w	8013e34 <tcp_process+0x7b0>
                 pcb->unsent == NULL) {
 8013cc0:	687b      	ldr	r3, [r7, #4]
 8013cc2:	6edb      	ldr	r3, [r3, #108]	; 0x6c
      } else if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
 8013cc4:	2b00      	cmp	r3, #0
 8013cc6:	f040 80b5 	bne.w	8013e34 <tcp_process+0x7b0>
        pcb->state = FIN_WAIT_2;
 8013cca:	687b      	ldr	r3, [r7, #4]
 8013ccc:	2206      	movs	r2, #6
 8013cce:	751a      	strb	r2, [r3, #20]
      break;
 8013cd0:	e0b0      	b.n	8013e34 <tcp_process+0x7b0>
    case FIN_WAIT_2:
      tcp_receive(pcb);
 8013cd2:	6878      	ldr	r0, [r7, #4]
 8013cd4:	f000 f9ca 	bl	801406c <tcp_receive>
      if (recv_flags & TF_GOT_FIN) {
 8013cd8:	4b60      	ldr	r3, [pc, #384]	; (8013e5c <tcp_process+0x7d8>)
 8013cda:	781b      	ldrb	r3, [r3, #0]
 8013cdc:	f003 0320 	and.w	r3, r3, #32
 8013ce0:	2b00      	cmp	r3, #0
 8013ce2:	f000 80a9 	beq.w	8013e38 <tcp_process+0x7b4>
        LWIP_DEBUGF(TCP_DEBUG, ("TCP connection closed: FIN_WAIT_2 %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
        tcp_ack_now(pcb);
 8013ce6:	687b      	ldr	r3, [r7, #4]
 8013ce8:	8b5b      	ldrh	r3, [r3, #26]
 8013cea:	f043 0302 	orr.w	r3, r3, #2
 8013cee:	b29a      	uxth	r2, r3
 8013cf0:	687b      	ldr	r3, [r7, #4]
 8013cf2:	835a      	strh	r2, [r3, #26]
        tcp_pcb_purge(pcb);
 8013cf4:	6878      	ldr	r0, [r7, #4]
 8013cf6:	f7fe fd39 	bl	801276c <tcp_pcb_purge>
        TCP_RMV_ACTIVE(pcb);
 8013cfa:	4b59      	ldr	r3, [pc, #356]	; (8013e60 <tcp_process+0x7dc>)
 8013cfc:	681b      	ldr	r3, [r3, #0]
 8013cfe:	687a      	ldr	r2, [r7, #4]
 8013d00:	429a      	cmp	r2, r3
 8013d02:	d105      	bne.n	8013d10 <tcp_process+0x68c>
 8013d04:	4b56      	ldr	r3, [pc, #344]	; (8013e60 <tcp_process+0x7dc>)
 8013d06:	681b      	ldr	r3, [r3, #0]
 8013d08:	68db      	ldr	r3, [r3, #12]
 8013d0a:	4a55      	ldr	r2, [pc, #340]	; (8013e60 <tcp_process+0x7dc>)
 8013d0c:	6013      	str	r3, [r2, #0]
 8013d0e:	e013      	b.n	8013d38 <tcp_process+0x6b4>
 8013d10:	4b53      	ldr	r3, [pc, #332]	; (8013e60 <tcp_process+0x7dc>)
 8013d12:	681b      	ldr	r3, [r3, #0]
 8013d14:	613b      	str	r3, [r7, #16]
 8013d16:	e00c      	b.n	8013d32 <tcp_process+0x6ae>
 8013d18:	693b      	ldr	r3, [r7, #16]
 8013d1a:	68db      	ldr	r3, [r3, #12]
 8013d1c:	687a      	ldr	r2, [r7, #4]
 8013d1e:	429a      	cmp	r2, r3
 8013d20:	d104      	bne.n	8013d2c <tcp_process+0x6a8>
 8013d22:	687b      	ldr	r3, [r7, #4]
 8013d24:	68da      	ldr	r2, [r3, #12]
 8013d26:	693b      	ldr	r3, [r7, #16]
 8013d28:	60da      	str	r2, [r3, #12]
 8013d2a:	e005      	b.n	8013d38 <tcp_process+0x6b4>
 8013d2c:	693b      	ldr	r3, [r7, #16]
 8013d2e:	68db      	ldr	r3, [r3, #12]
 8013d30:	613b      	str	r3, [r7, #16]
 8013d32:	693b      	ldr	r3, [r7, #16]
 8013d34:	2b00      	cmp	r3, #0
 8013d36:	d1ef      	bne.n	8013d18 <tcp_process+0x694>
 8013d38:	687b      	ldr	r3, [r7, #4]
 8013d3a:	2200      	movs	r2, #0
 8013d3c:	60da      	str	r2, [r3, #12]
 8013d3e:	4b43      	ldr	r3, [pc, #268]	; (8013e4c <tcp_process+0x7c8>)
 8013d40:	2201      	movs	r2, #1
 8013d42:	701a      	strb	r2, [r3, #0]
        pcb->state = TIME_WAIT;
 8013d44:	687b      	ldr	r3, [r7, #4]
 8013d46:	220a      	movs	r2, #10
 8013d48:	751a      	strb	r2, [r3, #20]
        TCP_REG(&tcp_tw_pcbs, pcb);
 8013d4a:	4b41      	ldr	r3, [pc, #260]	; (8013e50 <tcp_process+0x7cc>)
 8013d4c:	681a      	ldr	r2, [r3, #0]
 8013d4e:	687b      	ldr	r3, [r7, #4]
 8013d50:	60da      	str	r2, [r3, #12]
 8013d52:	4a3f      	ldr	r2, [pc, #252]	; (8013e50 <tcp_process+0x7cc>)
 8013d54:	687b      	ldr	r3, [r7, #4]
 8013d56:	6013      	str	r3, [r2, #0]
 8013d58:	f002 fc92 	bl	8016680 <tcp_timer_needed>
      }
      break;
 8013d5c:	e06c      	b.n	8013e38 <tcp_process+0x7b4>
    case CLOSING:
      tcp_receive(pcb);
 8013d5e:	6878      	ldr	r0, [r7, #4]
 8013d60:	f000 f984 	bl	801406c <tcp_receive>
      if ((flags & TCP_ACK) && ackno == pcb->snd_nxt && pcb->unsent == NULL) {
 8013d64:	4b3b      	ldr	r3, [pc, #236]	; (8013e54 <tcp_process+0x7d0>)
 8013d66:	781b      	ldrb	r3, [r3, #0]
 8013d68:	f003 0310 	and.w	r3, r3, #16
 8013d6c:	2b00      	cmp	r3, #0
 8013d6e:	d065      	beq.n	8013e3c <tcp_process+0x7b8>
 8013d70:	687b      	ldr	r3, [r7, #4]
 8013d72:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8013d74:	4b38      	ldr	r3, [pc, #224]	; (8013e58 <tcp_process+0x7d4>)
 8013d76:	681b      	ldr	r3, [r3, #0]
 8013d78:	429a      	cmp	r2, r3
 8013d7a:	d15f      	bne.n	8013e3c <tcp_process+0x7b8>
 8013d7c:	687b      	ldr	r3, [r7, #4]
 8013d7e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8013d80:	2b00      	cmp	r3, #0
 8013d82:	d15b      	bne.n	8013e3c <tcp_process+0x7b8>
        LWIP_DEBUGF(TCP_DEBUG, ("TCP connection closed: CLOSING %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
        tcp_pcb_purge(pcb);
 8013d84:	6878      	ldr	r0, [r7, #4]
 8013d86:	f7fe fcf1 	bl	801276c <tcp_pcb_purge>
        TCP_RMV_ACTIVE(pcb);
 8013d8a:	4b35      	ldr	r3, [pc, #212]	; (8013e60 <tcp_process+0x7dc>)
 8013d8c:	681b      	ldr	r3, [r3, #0]
 8013d8e:	687a      	ldr	r2, [r7, #4]
 8013d90:	429a      	cmp	r2, r3
 8013d92:	d105      	bne.n	8013da0 <tcp_process+0x71c>
 8013d94:	4b32      	ldr	r3, [pc, #200]	; (8013e60 <tcp_process+0x7dc>)
 8013d96:	681b      	ldr	r3, [r3, #0]
 8013d98:	68db      	ldr	r3, [r3, #12]
 8013d9a:	4a31      	ldr	r2, [pc, #196]	; (8013e60 <tcp_process+0x7dc>)
 8013d9c:	6013      	str	r3, [r2, #0]
 8013d9e:	e013      	b.n	8013dc8 <tcp_process+0x744>
 8013da0:	4b2f      	ldr	r3, [pc, #188]	; (8013e60 <tcp_process+0x7dc>)
 8013da2:	681b      	ldr	r3, [r3, #0]
 8013da4:	60fb      	str	r3, [r7, #12]
 8013da6:	e00c      	b.n	8013dc2 <tcp_process+0x73e>
 8013da8:	68fb      	ldr	r3, [r7, #12]
 8013daa:	68db      	ldr	r3, [r3, #12]
 8013dac:	687a      	ldr	r2, [r7, #4]
 8013dae:	429a      	cmp	r2, r3
 8013db0:	d104      	bne.n	8013dbc <tcp_process+0x738>
 8013db2:	687b      	ldr	r3, [r7, #4]
 8013db4:	68da      	ldr	r2, [r3, #12]
 8013db6:	68fb      	ldr	r3, [r7, #12]
 8013db8:	60da      	str	r2, [r3, #12]
 8013dba:	e005      	b.n	8013dc8 <tcp_process+0x744>
 8013dbc:	68fb      	ldr	r3, [r7, #12]
 8013dbe:	68db      	ldr	r3, [r3, #12]
 8013dc0:	60fb      	str	r3, [r7, #12]
 8013dc2:	68fb      	ldr	r3, [r7, #12]
 8013dc4:	2b00      	cmp	r3, #0
 8013dc6:	d1ef      	bne.n	8013da8 <tcp_process+0x724>
 8013dc8:	687b      	ldr	r3, [r7, #4]
 8013dca:	2200      	movs	r2, #0
 8013dcc:	60da      	str	r2, [r3, #12]
 8013dce:	4b1f      	ldr	r3, [pc, #124]	; (8013e4c <tcp_process+0x7c8>)
 8013dd0:	2201      	movs	r2, #1
 8013dd2:	701a      	strb	r2, [r3, #0]
        pcb->state = TIME_WAIT;
 8013dd4:	687b      	ldr	r3, [r7, #4]
 8013dd6:	220a      	movs	r2, #10
 8013dd8:	751a      	strb	r2, [r3, #20]
        TCP_REG(&tcp_tw_pcbs, pcb);
 8013dda:	4b1d      	ldr	r3, [pc, #116]	; (8013e50 <tcp_process+0x7cc>)
 8013ddc:	681a      	ldr	r2, [r3, #0]
 8013dde:	687b      	ldr	r3, [r7, #4]
 8013de0:	60da      	str	r2, [r3, #12]
 8013de2:	4a1b      	ldr	r2, [pc, #108]	; (8013e50 <tcp_process+0x7cc>)
 8013de4:	687b      	ldr	r3, [r7, #4]
 8013de6:	6013      	str	r3, [r2, #0]
 8013de8:	f002 fc4a 	bl	8016680 <tcp_timer_needed>
      }
      break;
 8013dec:	e026      	b.n	8013e3c <tcp_process+0x7b8>
    case LAST_ACK:
      tcp_receive(pcb);
 8013dee:	6878      	ldr	r0, [r7, #4]
 8013df0:	f000 f93c 	bl	801406c <tcp_receive>
      if ((flags & TCP_ACK) && ackno == pcb->snd_nxt && pcb->unsent == NULL) {
 8013df4:	4b17      	ldr	r3, [pc, #92]	; (8013e54 <tcp_process+0x7d0>)
 8013df6:	781b      	ldrb	r3, [r3, #0]
 8013df8:	f003 0310 	and.w	r3, r3, #16
 8013dfc:	2b00      	cmp	r3, #0
 8013dfe:	d01f      	beq.n	8013e40 <tcp_process+0x7bc>
 8013e00:	687b      	ldr	r3, [r7, #4]
 8013e02:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8013e04:	4b14      	ldr	r3, [pc, #80]	; (8013e58 <tcp_process+0x7d4>)
 8013e06:	681b      	ldr	r3, [r3, #0]
 8013e08:	429a      	cmp	r2, r3
 8013e0a:	d119      	bne.n	8013e40 <tcp_process+0x7bc>
 8013e0c:	687b      	ldr	r3, [r7, #4]
 8013e0e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8013e10:	2b00      	cmp	r3, #0
 8013e12:	d115      	bne.n	8013e40 <tcp_process+0x7bc>
        LWIP_DEBUGF(TCP_DEBUG, ("TCP connection closed: LAST_ACK %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
        /* bugfix #21699: don't set pcb->state to CLOSED here or we risk leaking segments */
        recv_flags |= TF_CLOSED;
 8013e14:	4b11      	ldr	r3, [pc, #68]	; (8013e5c <tcp_process+0x7d8>)
 8013e16:	781b      	ldrb	r3, [r3, #0]
 8013e18:	f043 0310 	orr.w	r3, r3, #16
 8013e1c:	b2da      	uxtb	r2, r3
 8013e1e:	4b0f      	ldr	r3, [pc, #60]	; (8013e5c <tcp_process+0x7d8>)
 8013e20:	701a      	strb	r2, [r3, #0]
      }
      break;
 8013e22:	e00d      	b.n	8013e40 <tcp_process+0x7bc>
    default:
      break;
 8013e24:	bf00      	nop
 8013e26:	e00c      	b.n	8013e42 <tcp_process+0x7be>
      break;
 8013e28:	bf00      	nop
 8013e2a:	e00a      	b.n	8013e42 <tcp_process+0x7be>
      break;
 8013e2c:	bf00      	nop
 8013e2e:	e008      	b.n	8013e42 <tcp_process+0x7be>
      break;
 8013e30:	bf00      	nop
 8013e32:	e006      	b.n	8013e42 <tcp_process+0x7be>
      break;
 8013e34:	bf00      	nop
 8013e36:	e004      	b.n	8013e42 <tcp_process+0x7be>
      break;
 8013e38:	bf00      	nop
 8013e3a:	e002      	b.n	8013e42 <tcp_process+0x7be>
      break;
 8013e3c:	bf00      	nop
 8013e3e:	e000      	b.n	8013e42 <tcp_process+0x7be>
      break;
 8013e40:	bf00      	nop
  }
  return ERR_OK;
 8013e42:	2300      	movs	r3, #0
}
 8013e44:	4618      	mov	r0, r3
 8013e46:	3724      	adds	r7, #36	; 0x24
 8013e48:	46bd      	mov	sp, r7
 8013e4a:	bd90      	pop	{r4, r7, pc}
 8013e4c:	200070ec 	.word	0x200070ec
 8013e50:	200070e8 	.word	0x200070e8
 8013e54:	2000711c 	.word	0x2000711c
 8013e58:	20007114 	.word	0x20007114
 8013e5c:	2000711d 	.word	0x2000711d
 8013e60:	200070e4 	.word	0x200070e4

08013e64 <tcp_oos_insert_segment>:
 *
 * Called from tcp_receive()
 */
static void
tcp_oos_insert_segment(struct tcp_seg *cseg, struct tcp_seg *next)
{
 8013e64:	b590      	push	{r4, r7, lr}
 8013e66:	b085      	sub	sp, #20
 8013e68:	af00      	add	r7, sp, #0
 8013e6a:	6078      	str	r0, [r7, #4]
 8013e6c:	6039      	str	r1, [r7, #0]
  struct tcp_seg *old_seg;

  LWIP_ASSERT("tcp_oos_insert_segment: invalid cseg", cseg != NULL);
 8013e6e:	687b      	ldr	r3, [r7, #4]
 8013e70:	2b00      	cmp	r3, #0
 8013e72:	d106      	bne.n	8013e82 <tcp_oos_insert_segment+0x1e>
 8013e74:	4b3b      	ldr	r3, [pc, #236]	; (8013f64 <tcp_oos_insert_segment+0x100>)
 8013e76:	f240 421f 	movw	r2, #1055	; 0x41f
 8013e7a:	493b      	ldr	r1, [pc, #236]	; (8013f68 <tcp_oos_insert_segment+0x104>)
 8013e7c:	483b      	ldr	r0, [pc, #236]	; (8013f6c <tcp_oos_insert_segment+0x108>)
 8013e7e:	f005 fee7 	bl	8019c50 <iprintf>

  if (TCPH_FLAGS(cseg->tcphdr) & TCP_FIN) {
 8013e82:	687b      	ldr	r3, [r7, #4]
 8013e84:	68db      	ldr	r3, [r3, #12]
 8013e86:	899b      	ldrh	r3, [r3, #12]
 8013e88:	b29b      	uxth	r3, r3
 8013e8a:	4618      	mov	r0, r3
 8013e8c:	f7fb fc26 	bl	800f6dc <lwip_htons>
 8013e90:	4603      	mov	r3, r0
 8013e92:	b2db      	uxtb	r3, r3
 8013e94:	f003 0301 	and.w	r3, r3, #1
 8013e98:	2b00      	cmp	r3, #0
 8013e9a:	d028      	beq.n	8013eee <tcp_oos_insert_segment+0x8a>
    /* received segment overlaps all following segments */
    tcp_segs_free(next);
 8013e9c:	6838      	ldr	r0, [r7, #0]
 8013e9e:	f7fe fa63 	bl	8012368 <tcp_segs_free>
    next = NULL;
 8013ea2:	2300      	movs	r3, #0
 8013ea4:	603b      	str	r3, [r7, #0]
 8013ea6:	e056      	b.n	8013f56 <tcp_oos_insert_segment+0xf2>
       oos queue may have segments with FIN flag */
    while (next &&
           TCP_SEQ_GEQ((seqno + cseg->len),
                       (next->tcphdr->seqno + next->len))) {
      /* cseg with FIN already processed */
      if (TCPH_FLAGS(next->tcphdr) & TCP_FIN) {
 8013ea8:	683b      	ldr	r3, [r7, #0]
 8013eaa:	68db      	ldr	r3, [r3, #12]
 8013eac:	899b      	ldrh	r3, [r3, #12]
 8013eae:	b29b      	uxth	r3, r3
 8013eb0:	4618      	mov	r0, r3
 8013eb2:	f7fb fc13 	bl	800f6dc <lwip_htons>
 8013eb6:	4603      	mov	r3, r0
 8013eb8:	b2db      	uxtb	r3, r3
 8013eba:	f003 0301 	and.w	r3, r3, #1
 8013ebe:	2b00      	cmp	r3, #0
 8013ec0:	d00d      	beq.n	8013ede <tcp_oos_insert_segment+0x7a>
        TCPH_SET_FLAG(cseg->tcphdr, TCP_FIN);
 8013ec2:	687b      	ldr	r3, [r7, #4]
 8013ec4:	68db      	ldr	r3, [r3, #12]
 8013ec6:	899b      	ldrh	r3, [r3, #12]
 8013ec8:	b29c      	uxth	r4, r3
 8013eca:	2001      	movs	r0, #1
 8013ecc:	f7fb fc06 	bl	800f6dc <lwip_htons>
 8013ed0:	4603      	mov	r3, r0
 8013ed2:	461a      	mov	r2, r3
 8013ed4:	687b      	ldr	r3, [r7, #4]
 8013ed6:	68db      	ldr	r3, [r3, #12]
 8013ed8:	4322      	orrs	r2, r4
 8013eda:	b292      	uxth	r2, r2
 8013edc:	819a      	strh	r2, [r3, #12]
      }
      old_seg = next;
 8013ede:	683b      	ldr	r3, [r7, #0]
 8013ee0:	60fb      	str	r3, [r7, #12]
      next = next->next;
 8013ee2:	683b      	ldr	r3, [r7, #0]
 8013ee4:	681b      	ldr	r3, [r3, #0]
 8013ee6:	603b      	str	r3, [r7, #0]
      tcp_seg_free(old_seg);
 8013ee8:	68f8      	ldr	r0, [r7, #12]
 8013eea:	f7fe fa52 	bl	8012392 <tcp_seg_free>
    while (next &&
 8013eee:	683b      	ldr	r3, [r7, #0]
 8013ef0:	2b00      	cmp	r3, #0
 8013ef2:	d00e      	beq.n	8013f12 <tcp_oos_insert_segment+0xae>
           TCP_SEQ_GEQ((seqno + cseg->len),
 8013ef4:	687b      	ldr	r3, [r7, #4]
 8013ef6:	891b      	ldrh	r3, [r3, #8]
 8013ef8:	461a      	mov	r2, r3
 8013efa:	4b1d      	ldr	r3, [pc, #116]	; (8013f70 <tcp_oos_insert_segment+0x10c>)
 8013efc:	681b      	ldr	r3, [r3, #0]
 8013efe:	441a      	add	r2, r3
 8013f00:	683b      	ldr	r3, [r7, #0]
 8013f02:	68db      	ldr	r3, [r3, #12]
 8013f04:	685b      	ldr	r3, [r3, #4]
 8013f06:	6839      	ldr	r1, [r7, #0]
 8013f08:	8909      	ldrh	r1, [r1, #8]
 8013f0a:	440b      	add	r3, r1
 8013f0c:	1ad3      	subs	r3, r2, r3
    while (next &&
 8013f0e:	2b00      	cmp	r3, #0
 8013f10:	daca      	bge.n	8013ea8 <tcp_oos_insert_segment+0x44>
    }
    if (next &&
 8013f12:	683b      	ldr	r3, [r7, #0]
 8013f14:	2b00      	cmp	r3, #0
 8013f16:	d01e      	beq.n	8013f56 <tcp_oos_insert_segment+0xf2>
        TCP_SEQ_GT(seqno + cseg->len, next->tcphdr->seqno)) {
 8013f18:	687b      	ldr	r3, [r7, #4]
 8013f1a:	891b      	ldrh	r3, [r3, #8]
 8013f1c:	461a      	mov	r2, r3
 8013f1e:	4b14      	ldr	r3, [pc, #80]	; (8013f70 <tcp_oos_insert_segment+0x10c>)
 8013f20:	681b      	ldr	r3, [r3, #0]
 8013f22:	441a      	add	r2, r3
 8013f24:	683b      	ldr	r3, [r7, #0]
 8013f26:	68db      	ldr	r3, [r3, #12]
 8013f28:	685b      	ldr	r3, [r3, #4]
 8013f2a:	1ad3      	subs	r3, r2, r3
    if (next &&
 8013f2c:	2b00      	cmp	r3, #0
 8013f2e:	dd12      	ble.n	8013f56 <tcp_oos_insert_segment+0xf2>
      /* We need to trim the incoming segment. */
      cseg->len = (u16_t)(next->tcphdr->seqno - seqno);
 8013f30:	683b      	ldr	r3, [r7, #0]
 8013f32:	68db      	ldr	r3, [r3, #12]
 8013f34:	685b      	ldr	r3, [r3, #4]
 8013f36:	b29a      	uxth	r2, r3
 8013f38:	4b0d      	ldr	r3, [pc, #52]	; (8013f70 <tcp_oos_insert_segment+0x10c>)
 8013f3a:	681b      	ldr	r3, [r3, #0]
 8013f3c:	b29b      	uxth	r3, r3
 8013f3e:	1ad3      	subs	r3, r2, r3
 8013f40:	b29a      	uxth	r2, r3
 8013f42:	687b      	ldr	r3, [r7, #4]
 8013f44:	811a      	strh	r2, [r3, #8]
      pbuf_realloc(cseg->p, cseg->len);
 8013f46:	687b      	ldr	r3, [r7, #4]
 8013f48:	685a      	ldr	r2, [r3, #4]
 8013f4a:	687b      	ldr	r3, [r7, #4]
 8013f4c:	891b      	ldrh	r3, [r3, #8]
 8013f4e:	4619      	mov	r1, r3
 8013f50:	4610      	mov	r0, r2
 8013f52:	f7fc fe23 	bl	8010b9c <pbuf_realloc>
    }
  }
  cseg->next = next;
 8013f56:	687b      	ldr	r3, [r7, #4]
 8013f58:	683a      	ldr	r2, [r7, #0]
 8013f5a:	601a      	str	r2, [r3, #0]
}
 8013f5c:	bf00      	nop
 8013f5e:	3714      	adds	r7, #20
 8013f60:	46bd      	mov	sp, r7
 8013f62:	bd90      	pop	{r4, r7, pc}
 8013f64:	0801d77c 	.word	0x0801d77c
 8013f68:	0801da3c 	.word	0x0801da3c
 8013f6c:	0801d7c8 	.word	0x0801d7c8
 8013f70:	20007110 	.word	0x20007110

08013f74 <tcp_free_acked_segments>:

/** Remove segments from a list if the incoming ACK acknowledges them */
static struct tcp_seg *
tcp_free_acked_segments(struct tcp_pcb *pcb, struct tcp_seg *seg_list, const char *dbg_list_name,
                        struct tcp_seg *dbg_other_seg_list)
{
 8013f74:	b5b0      	push	{r4, r5, r7, lr}
 8013f76:	b086      	sub	sp, #24
 8013f78:	af00      	add	r7, sp, #0
 8013f7a:	60f8      	str	r0, [r7, #12]
 8013f7c:	60b9      	str	r1, [r7, #8]
 8013f7e:	607a      	str	r2, [r7, #4]
 8013f80:	603b      	str	r3, [r7, #0]
  u16_t clen;

  LWIP_UNUSED_ARG(dbg_list_name);
  LWIP_UNUSED_ARG(dbg_other_seg_list);

  while (seg_list != NULL &&
 8013f82:	e03e      	b.n	8014002 <tcp_free_acked_segments+0x8e>
    LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_receive: removing %"U32_F":%"U32_F" from pcb->%s\n",
                                  lwip_ntohl(seg_list->tcphdr->seqno),
                                  lwip_ntohl(seg_list->tcphdr->seqno) + TCP_TCPLEN(seg_list),
                                  dbg_list_name));

    next = seg_list;
 8013f84:	68bb      	ldr	r3, [r7, #8]
 8013f86:	617b      	str	r3, [r7, #20]
    seg_list = seg_list->next;
 8013f88:	68bb      	ldr	r3, [r7, #8]
 8013f8a:	681b      	ldr	r3, [r3, #0]
 8013f8c:	60bb      	str	r3, [r7, #8]

    clen = pbuf_clen(next->p);
 8013f8e:	697b      	ldr	r3, [r7, #20]
 8013f90:	685b      	ldr	r3, [r3, #4]
 8013f92:	4618      	mov	r0, r3
 8013f94:	f7fd f80e 	bl	8010fb4 <pbuf_clen>
 8013f98:	4603      	mov	r3, r0
 8013f9a:	827b      	strh	r3, [r7, #18]
    LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_receive: queuelen %"TCPWNDSIZE_F" ... ",
                                 (tcpwnd_size_t)pcb->snd_queuelen));
    LWIP_ASSERT("pcb->snd_queuelen >= pbuf_clen(next->p)", (pcb->snd_queuelen >= clen));
 8013f9c:	68fb      	ldr	r3, [r7, #12]
 8013f9e:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 8013fa2:	8a7a      	ldrh	r2, [r7, #18]
 8013fa4:	429a      	cmp	r2, r3
 8013fa6:	d906      	bls.n	8013fb6 <tcp_free_acked_segments+0x42>
 8013fa8:	4b2a      	ldr	r3, [pc, #168]	; (8014054 <tcp_free_acked_segments+0xe0>)
 8013faa:	f240 4257 	movw	r2, #1111	; 0x457
 8013fae:	492a      	ldr	r1, [pc, #168]	; (8014058 <tcp_free_acked_segments+0xe4>)
 8013fb0:	482a      	ldr	r0, [pc, #168]	; (801405c <tcp_free_acked_segments+0xe8>)
 8013fb2:	f005 fe4d 	bl	8019c50 <iprintf>

    pcb->snd_queuelen = (u16_t)(pcb->snd_queuelen - clen);
 8013fb6:	68fb      	ldr	r3, [r7, #12]
 8013fb8:	f8b3 2066 	ldrh.w	r2, [r3, #102]	; 0x66
 8013fbc:	8a7b      	ldrh	r3, [r7, #18]
 8013fbe:	1ad3      	subs	r3, r2, r3
 8013fc0:	b29a      	uxth	r2, r3
 8013fc2:	68fb      	ldr	r3, [r7, #12]
 8013fc4:	f8a3 2066 	strh.w	r2, [r3, #102]	; 0x66
    recv_acked = (tcpwnd_size_t)(recv_acked + next->len);
 8013fc8:	697b      	ldr	r3, [r7, #20]
 8013fca:	891a      	ldrh	r2, [r3, #8]
 8013fcc:	4b24      	ldr	r3, [pc, #144]	; (8014060 <tcp_free_acked_segments+0xec>)
 8013fce:	881b      	ldrh	r3, [r3, #0]
 8013fd0:	4413      	add	r3, r2
 8013fd2:	b29a      	uxth	r2, r3
 8013fd4:	4b22      	ldr	r3, [pc, #136]	; (8014060 <tcp_free_acked_segments+0xec>)
 8013fd6:	801a      	strh	r2, [r3, #0]
    tcp_seg_free(next);
 8013fd8:	6978      	ldr	r0, [r7, #20]
 8013fda:	f7fe f9da 	bl	8012392 <tcp_seg_free>

    LWIP_DEBUGF(TCP_QLEN_DEBUG, ("%"TCPWNDSIZE_F" (after freeing %s)\n",
                                 (tcpwnd_size_t)pcb->snd_queuelen,
                                 dbg_list_name));
    if (pcb->snd_queuelen != 0) {
 8013fde:	68fb      	ldr	r3, [r7, #12]
 8013fe0:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 8013fe4:	2b00      	cmp	r3, #0
 8013fe6:	d00c      	beq.n	8014002 <tcp_free_acked_segments+0x8e>
      LWIP_ASSERT("tcp_receive: valid queue length",
 8013fe8:	68bb      	ldr	r3, [r7, #8]
 8013fea:	2b00      	cmp	r3, #0
 8013fec:	d109      	bne.n	8014002 <tcp_free_acked_segments+0x8e>
 8013fee:	683b      	ldr	r3, [r7, #0]
 8013ff0:	2b00      	cmp	r3, #0
 8013ff2:	d106      	bne.n	8014002 <tcp_free_acked_segments+0x8e>
 8013ff4:	4b17      	ldr	r3, [pc, #92]	; (8014054 <tcp_free_acked_segments+0xe0>)
 8013ff6:	f240 4261 	movw	r2, #1121	; 0x461
 8013ffa:	491a      	ldr	r1, [pc, #104]	; (8014064 <tcp_free_acked_segments+0xf0>)
 8013ffc:	4817      	ldr	r0, [pc, #92]	; (801405c <tcp_free_acked_segments+0xe8>)
 8013ffe:	f005 fe27 	bl	8019c50 <iprintf>
  while (seg_list != NULL &&
 8014002:	68bb      	ldr	r3, [r7, #8]
 8014004:	2b00      	cmp	r3, #0
 8014006:	d020      	beq.n	801404a <tcp_free_acked_segments+0xd6>
         TCP_SEQ_LEQ(lwip_ntohl(seg_list->tcphdr->seqno) +
 8014008:	68bb      	ldr	r3, [r7, #8]
 801400a:	68db      	ldr	r3, [r3, #12]
 801400c:	685b      	ldr	r3, [r3, #4]
 801400e:	4618      	mov	r0, r3
 8014010:	f7fb fb79 	bl	800f706 <lwip_htonl>
 8014014:	4604      	mov	r4, r0
 8014016:	68bb      	ldr	r3, [r7, #8]
 8014018:	891b      	ldrh	r3, [r3, #8]
 801401a:	461d      	mov	r5, r3
 801401c:	68bb      	ldr	r3, [r7, #8]
 801401e:	68db      	ldr	r3, [r3, #12]
 8014020:	899b      	ldrh	r3, [r3, #12]
 8014022:	b29b      	uxth	r3, r3
 8014024:	4618      	mov	r0, r3
 8014026:	f7fb fb59 	bl	800f6dc <lwip_htons>
 801402a:	4603      	mov	r3, r0
 801402c:	b2db      	uxtb	r3, r3
 801402e:	f003 0303 	and.w	r3, r3, #3
 8014032:	2b00      	cmp	r3, #0
 8014034:	d001      	beq.n	801403a <tcp_free_acked_segments+0xc6>
 8014036:	2301      	movs	r3, #1
 8014038:	e000      	b.n	801403c <tcp_free_acked_segments+0xc8>
 801403a:	2300      	movs	r3, #0
 801403c:	442b      	add	r3, r5
 801403e:	18e2      	adds	r2, r4, r3
 8014040:	4b09      	ldr	r3, [pc, #36]	; (8014068 <tcp_free_acked_segments+0xf4>)
 8014042:	681b      	ldr	r3, [r3, #0]
 8014044:	1ad3      	subs	r3, r2, r3
  while (seg_list != NULL &&
 8014046:	2b00      	cmp	r3, #0
 8014048:	dd9c      	ble.n	8013f84 <tcp_free_acked_segments+0x10>
                  seg_list != NULL || dbg_other_seg_list != NULL);
    }
  }
  return seg_list;
 801404a:	68bb      	ldr	r3, [r7, #8]
}
 801404c:	4618      	mov	r0, r3
 801404e:	3718      	adds	r7, #24
 8014050:	46bd      	mov	sp, r7
 8014052:	bdb0      	pop	{r4, r5, r7, pc}
 8014054:	0801d77c 	.word	0x0801d77c
 8014058:	0801da64 	.word	0x0801da64
 801405c:	0801d7c8 	.word	0x0801d7c8
 8014060:	20007118 	.word	0x20007118
 8014064:	0801da8c 	.word	0x0801da8c
 8014068:	20007114 	.word	0x20007114

0801406c <tcp_receive>:
 *
 * Called from tcp_process().
 */
static void
tcp_receive(struct tcp_pcb *pcb)
{
 801406c:	b5b0      	push	{r4, r5, r7, lr}
 801406e:	b094      	sub	sp, #80	; 0x50
 8014070:	af00      	add	r7, sp, #0
 8014072:	6078      	str	r0, [r7, #4]
  s16_t m;
  u32_t right_wnd_edge;
  int found_dupack = 0;
 8014074:	2300      	movs	r3, #0
 8014076:	64bb      	str	r3, [r7, #72]	; 0x48

  LWIP_ASSERT("tcp_receive: invalid pcb", pcb != NULL);
 8014078:	687b      	ldr	r3, [r7, #4]
 801407a:	2b00      	cmp	r3, #0
 801407c:	d106      	bne.n	801408c <tcp_receive+0x20>
 801407e:	4b91      	ldr	r3, [pc, #580]	; (80142c4 <tcp_receive+0x258>)
 8014080:	f240 427b 	movw	r2, #1147	; 0x47b
 8014084:	4990      	ldr	r1, [pc, #576]	; (80142c8 <tcp_receive+0x25c>)
 8014086:	4891      	ldr	r0, [pc, #580]	; (80142cc <tcp_receive+0x260>)
 8014088:	f005 fde2 	bl	8019c50 <iprintf>
  LWIP_ASSERT("tcp_receive: wrong state", pcb->state >= ESTABLISHED);
 801408c:	687b      	ldr	r3, [r7, #4]
 801408e:	7d1b      	ldrb	r3, [r3, #20]
 8014090:	2b03      	cmp	r3, #3
 8014092:	d806      	bhi.n	80140a2 <tcp_receive+0x36>
 8014094:	4b8b      	ldr	r3, [pc, #556]	; (80142c4 <tcp_receive+0x258>)
 8014096:	f240 427c 	movw	r2, #1148	; 0x47c
 801409a:	498d      	ldr	r1, [pc, #564]	; (80142d0 <tcp_receive+0x264>)
 801409c:	488b      	ldr	r0, [pc, #556]	; (80142cc <tcp_receive+0x260>)
 801409e:	f005 fdd7 	bl	8019c50 <iprintf>

  if (flags & TCP_ACK) {
 80140a2:	4b8c      	ldr	r3, [pc, #560]	; (80142d4 <tcp_receive+0x268>)
 80140a4:	781b      	ldrb	r3, [r3, #0]
 80140a6:	f003 0310 	and.w	r3, r3, #16
 80140aa:	2b00      	cmp	r3, #0
 80140ac:	f000 8264 	beq.w	8014578 <tcp_receive+0x50c>
    right_wnd_edge = pcb->snd_wnd + pcb->snd_wl2;
 80140b0:	687b      	ldr	r3, [r7, #4]
 80140b2:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 80140b6:	461a      	mov	r2, r3
 80140b8:	687b      	ldr	r3, [r7, #4]
 80140ba:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80140bc:	4413      	add	r3, r2
 80140be:	633b      	str	r3, [r7, #48]	; 0x30

    /* Update window. */
    if (TCP_SEQ_LT(pcb->snd_wl1, seqno) ||
 80140c0:	687b      	ldr	r3, [r7, #4]
 80140c2:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80140c4:	4b84      	ldr	r3, [pc, #528]	; (80142d8 <tcp_receive+0x26c>)
 80140c6:	681b      	ldr	r3, [r3, #0]
 80140c8:	1ad3      	subs	r3, r2, r3
 80140ca:	2b00      	cmp	r3, #0
 80140cc:	db1b      	blt.n	8014106 <tcp_receive+0x9a>
        (pcb->snd_wl1 == seqno && TCP_SEQ_LT(pcb->snd_wl2, ackno)) ||
 80140ce:	687b      	ldr	r3, [r7, #4]
 80140d0:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80140d2:	4b81      	ldr	r3, [pc, #516]	; (80142d8 <tcp_receive+0x26c>)
 80140d4:	681b      	ldr	r3, [r3, #0]
    if (TCP_SEQ_LT(pcb->snd_wl1, seqno) ||
 80140d6:	429a      	cmp	r2, r3
 80140d8:	d106      	bne.n	80140e8 <tcp_receive+0x7c>
        (pcb->snd_wl1 == seqno && TCP_SEQ_LT(pcb->snd_wl2, ackno)) ||
 80140da:	687b      	ldr	r3, [r7, #4]
 80140dc:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 80140de:	4b7f      	ldr	r3, [pc, #508]	; (80142dc <tcp_receive+0x270>)
 80140e0:	681b      	ldr	r3, [r3, #0]
 80140e2:	1ad3      	subs	r3, r2, r3
 80140e4:	2b00      	cmp	r3, #0
 80140e6:	db0e      	blt.n	8014106 <tcp_receive+0x9a>
        (pcb->snd_wl2 == ackno && (u32_t)SND_WND_SCALE(pcb, tcphdr->wnd) > pcb->snd_wnd)) {
 80140e8:	687b      	ldr	r3, [r7, #4]
 80140ea:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 80140ec:	4b7b      	ldr	r3, [pc, #492]	; (80142dc <tcp_receive+0x270>)
 80140ee:	681b      	ldr	r3, [r3, #0]
        (pcb->snd_wl1 == seqno && TCP_SEQ_LT(pcb->snd_wl2, ackno)) ||
 80140f0:	429a      	cmp	r2, r3
 80140f2:	d125      	bne.n	8014140 <tcp_receive+0xd4>
        (pcb->snd_wl2 == ackno && (u32_t)SND_WND_SCALE(pcb, tcphdr->wnd) > pcb->snd_wnd)) {
 80140f4:	4b7a      	ldr	r3, [pc, #488]	; (80142e0 <tcp_receive+0x274>)
 80140f6:	681b      	ldr	r3, [r3, #0]
 80140f8:	89db      	ldrh	r3, [r3, #14]
 80140fa:	b29a      	uxth	r2, r3
 80140fc:	687b      	ldr	r3, [r7, #4]
 80140fe:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 8014102:	429a      	cmp	r2, r3
 8014104:	d91c      	bls.n	8014140 <tcp_receive+0xd4>
      pcb->snd_wnd = SND_WND_SCALE(pcb, tcphdr->wnd);
 8014106:	4b76      	ldr	r3, [pc, #472]	; (80142e0 <tcp_receive+0x274>)
 8014108:	681b      	ldr	r3, [r3, #0]
 801410a:	89db      	ldrh	r3, [r3, #14]
 801410c:	b29a      	uxth	r2, r3
 801410e:	687b      	ldr	r3, [r7, #4]
 8014110:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
      /* keep track of the biggest window announced by the remote host to calculate
         the maximum segment size */
      if (pcb->snd_wnd_max < pcb->snd_wnd) {
 8014114:	687b      	ldr	r3, [r7, #4]
 8014116:	f8b3 2062 	ldrh.w	r2, [r3, #98]	; 0x62
 801411a:	687b      	ldr	r3, [r7, #4]
 801411c:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 8014120:	429a      	cmp	r2, r3
 8014122:	d205      	bcs.n	8014130 <tcp_receive+0xc4>
        pcb->snd_wnd_max = pcb->snd_wnd;
 8014124:	687b      	ldr	r3, [r7, #4]
 8014126:	f8b3 2060 	ldrh.w	r2, [r3, #96]	; 0x60
 801412a:	687b      	ldr	r3, [r7, #4]
 801412c:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
      }
      pcb->snd_wl1 = seqno;
 8014130:	4b69      	ldr	r3, [pc, #420]	; (80142d8 <tcp_receive+0x26c>)
 8014132:	681a      	ldr	r2, [r3, #0]
 8014134:	687b      	ldr	r3, [r7, #4]
 8014136:	655a      	str	r2, [r3, #84]	; 0x54
      pcb->snd_wl2 = ackno;
 8014138:	4b68      	ldr	r3, [pc, #416]	; (80142dc <tcp_receive+0x270>)
 801413a:	681a      	ldr	r2, [r3, #0]
 801413c:	687b      	ldr	r3, [r7, #4]
 801413e:	659a      	str	r2, [r3, #88]	; 0x58
     * If it only passes 1, should reset dupack counter
     *
     */

    /* Clause 1 */
    if (TCP_SEQ_LEQ(ackno, pcb->lastack)) {
 8014140:	4b66      	ldr	r3, [pc, #408]	; (80142dc <tcp_receive+0x270>)
 8014142:	681a      	ldr	r2, [r3, #0]
 8014144:	687b      	ldr	r3, [r7, #4]
 8014146:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8014148:	1ad3      	subs	r3, r2, r3
 801414a:	2b00      	cmp	r3, #0
 801414c:	dc58      	bgt.n	8014200 <tcp_receive+0x194>
      /* Clause 2 */
      if (tcplen == 0) {
 801414e:	4b65      	ldr	r3, [pc, #404]	; (80142e4 <tcp_receive+0x278>)
 8014150:	881b      	ldrh	r3, [r3, #0]
 8014152:	2b00      	cmp	r3, #0
 8014154:	d14b      	bne.n	80141ee <tcp_receive+0x182>
        /* Clause 3 */
        if (pcb->snd_wl2 + pcb->snd_wnd == right_wnd_edge) {
 8014156:	687b      	ldr	r3, [r7, #4]
 8014158:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 801415a:	687a      	ldr	r2, [r7, #4]
 801415c:	f8b2 2060 	ldrh.w	r2, [r2, #96]	; 0x60
 8014160:	4413      	add	r3, r2
 8014162:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8014164:	429a      	cmp	r2, r3
 8014166:	d142      	bne.n	80141ee <tcp_receive+0x182>
          /* Clause 4 */
          if (pcb->rtime >= 0) {
 8014168:	687b      	ldr	r3, [r7, #4]
 801416a:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	; 0x30
 801416e:	2b00      	cmp	r3, #0
 8014170:	db3d      	blt.n	80141ee <tcp_receive+0x182>
            /* Clause 5 */
            if (pcb->lastack == ackno) {
 8014172:	687b      	ldr	r3, [r7, #4]
 8014174:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8014176:	4b59      	ldr	r3, [pc, #356]	; (80142dc <tcp_receive+0x270>)
 8014178:	681b      	ldr	r3, [r3, #0]
 801417a:	429a      	cmp	r2, r3
 801417c:	d137      	bne.n	80141ee <tcp_receive+0x182>
              found_dupack = 1;
 801417e:	2301      	movs	r3, #1
 8014180:	64bb      	str	r3, [r7, #72]	; 0x48
              if ((u8_t)(pcb->dupacks + 1) > pcb->dupacks) {
 8014182:	687b      	ldr	r3, [r7, #4]
 8014184:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 8014188:	2bff      	cmp	r3, #255	; 0xff
 801418a:	d007      	beq.n	801419c <tcp_receive+0x130>
                ++pcb->dupacks;
 801418c:	687b      	ldr	r3, [r7, #4]
 801418e:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 8014192:	3301      	adds	r3, #1
 8014194:	b2da      	uxtb	r2, r3
 8014196:	687b      	ldr	r3, [r7, #4]
 8014198:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
              }
              if (pcb->dupacks > 3) {
 801419c:	687b      	ldr	r3, [r7, #4]
 801419e:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 80141a2:	2b03      	cmp	r3, #3
 80141a4:	d91b      	bls.n	80141de <tcp_receive+0x172>
                /* Inflate the congestion window */
                TCP_WND_INC(pcb->cwnd, pcb->mss);
 80141a6:	687b      	ldr	r3, [r7, #4]
 80141a8:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 80141ac:	687b      	ldr	r3, [r7, #4]
 80141ae:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 80141b0:	4413      	add	r3, r2
 80141b2:	b29a      	uxth	r2, r3
 80141b4:	687b      	ldr	r3, [r7, #4]
 80141b6:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 80141ba:	429a      	cmp	r2, r3
 80141bc:	d30a      	bcc.n	80141d4 <tcp_receive+0x168>
 80141be:	687b      	ldr	r3, [r7, #4]
 80141c0:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 80141c4:	687b      	ldr	r3, [r7, #4]
 80141c6:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 80141c8:	4413      	add	r3, r2
 80141ca:	b29a      	uxth	r2, r3
 80141cc:	687b      	ldr	r3, [r7, #4]
 80141ce:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
 80141d2:	e004      	b.n	80141de <tcp_receive+0x172>
 80141d4:	687b      	ldr	r3, [r7, #4]
 80141d6:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80141da:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
              }
              if (pcb->dupacks >= 3) {
 80141de:	687b      	ldr	r3, [r7, #4]
 80141e0:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 80141e4:	2b02      	cmp	r3, #2
 80141e6:	d902      	bls.n	80141ee <tcp_receive+0x182>
                /* Do fast retransmit (checked via TF_INFR, not via dupacks count) */
                tcp_rexmit_fast(pcb);
 80141e8:	6878      	ldr	r0, [r7, #4]
 80141ea:	f001 feed 	bl	8015fc8 <tcp_rexmit_fast>
          }
        }
      }
      /* If Clause (1) or more is true, but not a duplicate ack, reset
       * count of consecutive duplicate acks */
      if (!found_dupack) {
 80141ee:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80141f0:	2b00      	cmp	r3, #0
 80141f2:	f040 8161 	bne.w	80144b8 <tcp_receive+0x44c>
        pcb->dupacks = 0;
 80141f6:	687b      	ldr	r3, [r7, #4]
 80141f8:	2200      	movs	r2, #0
 80141fa:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80141fe:	e15b      	b.n	80144b8 <tcp_receive+0x44c>
      }
    } else if (TCP_SEQ_BETWEEN(ackno, pcb->lastack + 1, pcb->snd_nxt)) {
 8014200:	4b36      	ldr	r3, [pc, #216]	; (80142dc <tcp_receive+0x270>)
 8014202:	681a      	ldr	r2, [r3, #0]
 8014204:	687b      	ldr	r3, [r7, #4]
 8014206:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8014208:	1ad3      	subs	r3, r2, r3
 801420a:	3b01      	subs	r3, #1
 801420c:	2b00      	cmp	r3, #0
 801420e:	f2c0 814e 	blt.w	80144ae <tcp_receive+0x442>
 8014212:	4b32      	ldr	r3, [pc, #200]	; (80142dc <tcp_receive+0x270>)
 8014214:	681a      	ldr	r2, [r3, #0]
 8014216:	687b      	ldr	r3, [r7, #4]
 8014218:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 801421a:	1ad3      	subs	r3, r2, r3
 801421c:	2b00      	cmp	r3, #0
 801421e:	f300 8146 	bgt.w	80144ae <tcp_receive+0x442>
      tcpwnd_size_t acked;

      /* Reset the "IN Fast Retransmit" flag, since we are no longer
         in fast retransmit. Also reset the congestion window to the
         slow start threshold. */
      if (pcb->flags & TF_INFR) {
 8014222:	687b      	ldr	r3, [r7, #4]
 8014224:	8b5b      	ldrh	r3, [r3, #26]
 8014226:	f003 0304 	and.w	r3, r3, #4
 801422a:	2b00      	cmp	r3, #0
 801422c:	d010      	beq.n	8014250 <tcp_receive+0x1e4>
        tcp_clear_flags(pcb, TF_INFR);
 801422e:	687b      	ldr	r3, [r7, #4]
 8014230:	8b5b      	ldrh	r3, [r3, #26]
 8014232:	f023 0304 	bic.w	r3, r3, #4
 8014236:	b29a      	uxth	r2, r3
 8014238:	687b      	ldr	r3, [r7, #4]
 801423a:	835a      	strh	r2, [r3, #26]
        pcb->cwnd = pcb->ssthresh;
 801423c:	687b      	ldr	r3, [r7, #4]
 801423e:	f8b3 204a 	ldrh.w	r2, [r3, #74]	; 0x4a
 8014242:	687b      	ldr	r3, [r7, #4]
 8014244:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
        pcb->bytes_acked = 0;
 8014248:	687b      	ldr	r3, [r7, #4]
 801424a:	2200      	movs	r2, #0
 801424c:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
      }

      /* Reset the number of retransmissions. */
      pcb->nrtx = 0;
 8014250:	687b      	ldr	r3, [r7, #4]
 8014252:	2200      	movs	r2, #0
 8014254:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

      /* Reset the retransmission time-out. */
      pcb->rto = (s16_t)((pcb->sa >> 3) + pcb->sv);
 8014258:	687b      	ldr	r3, [r7, #4]
 801425a:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	; 0x3c
 801425e:	10db      	asrs	r3, r3, #3
 8014260:	b21b      	sxth	r3, r3
 8014262:	b29a      	uxth	r2, r3
 8014264:	687b      	ldr	r3, [r7, #4]
 8014266:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	; 0x3e
 801426a:	b29b      	uxth	r3, r3
 801426c:	4413      	add	r3, r2
 801426e:	b29b      	uxth	r3, r3
 8014270:	b21a      	sxth	r2, r3
 8014272:	687b      	ldr	r3, [r7, #4]
 8014274:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

      /* Record how much data this ACK acks */
      acked = (tcpwnd_size_t)(ackno - pcb->lastack);
 8014278:	4b18      	ldr	r3, [pc, #96]	; (80142dc <tcp_receive+0x270>)
 801427a:	681b      	ldr	r3, [r3, #0]
 801427c:	b29a      	uxth	r2, r3
 801427e:	687b      	ldr	r3, [r7, #4]
 8014280:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8014282:	b29b      	uxth	r3, r3
 8014284:	1ad3      	subs	r3, r2, r3
 8014286:	85fb      	strh	r3, [r7, #46]	; 0x2e

      /* Reset the fast retransmit variables. */
      pcb->dupacks = 0;
 8014288:	687b      	ldr	r3, [r7, #4]
 801428a:	2200      	movs	r2, #0
 801428c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
      pcb->lastack = ackno;
 8014290:	4b12      	ldr	r3, [pc, #72]	; (80142dc <tcp_receive+0x270>)
 8014292:	681a      	ldr	r2, [r3, #0]
 8014294:	687b      	ldr	r3, [r7, #4]
 8014296:	645a      	str	r2, [r3, #68]	; 0x44

      /* Update the congestion control variables (cwnd and
         ssthresh). */
      if (pcb->state >= ESTABLISHED) {
 8014298:	687b      	ldr	r3, [r7, #4]
 801429a:	7d1b      	ldrb	r3, [r3, #20]
 801429c:	2b03      	cmp	r3, #3
 801429e:	f240 8097 	bls.w	80143d0 <tcp_receive+0x364>
        if (pcb->cwnd < pcb->ssthresh) {
 80142a2:	687b      	ldr	r3, [r7, #4]
 80142a4:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 80142a8:	687b      	ldr	r3, [r7, #4]
 80142aa:	f8b3 304a 	ldrh.w	r3, [r3, #74]	; 0x4a
 80142ae:	429a      	cmp	r2, r3
 80142b0:	d245      	bcs.n	801433e <tcp_receive+0x2d2>
          tcpwnd_size_t increase;
          /* limit to 1 SMSS segment during period following RTO */
          u8_t num_seg = (pcb->flags & TF_RTO) ? 1 : 2;
 80142b2:	687b      	ldr	r3, [r7, #4]
 80142b4:	8b5b      	ldrh	r3, [r3, #26]
 80142b6:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80142ba:	2b00      	cmp	r3, #0
 80142bc:	d014      	beq.n	80142e8 <tcp_receive+0x27c>
 80142be:	2301      	movs	r3, #1
 80142c0:	e013      	b.n	80142ea <tcp_receive+0x27e>
 80142c2:	bf00      	nop
 80142c4:	0801d77c 	.word	0x0801d77c
 80142c8:	0801daac 	.word	0x0801daac
 80142cc:	0801d7c8 	.word	0x0801d7c8
 80142d0:	0801dac8 	.word	0x0801dac8
 80142d4:	2000711c 	.word	0x2000711c
 80142d8:	20007110 	.word	0x20007110
 80142dc:	20007114 	.word	0x20007114
 80142e0:	20007100 	.word	0x20007100
 80142e4:	2000711a 	.word	0x2000711a
 80142e8:	2302      	movs	r3, #2
 80142ea:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d
          /* RFC 3465, section 2.2 Slow Start */
          increase = LWIP_MIN(acked, (tcpwnd_size_t)(num_seg * pcb->mss));
 80142ee:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 80142f2:	b29a      	uxth	r2, r3
 80142f4:	687b      	ldr	r3, [r7, #4]
 80142f6:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 80142f8:	fb12 f303 	smulbb	r3, r2, r3
 80142fc:	b29b      	uxth	r3, r3
 80142fe:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 8014300:	4293      	cmp	r3, r2
 8014302:	bf28      	it	cs
 8014304:	4613      	movcs	r3, r2
 8014306:	857b      	strh	r3, [r7, #42]	; 0x2a
          TCP_WND_INC(pcb->cwnd, increase);
 8014308:	687b      	ldr	r3, [r7, #4]
 801430a:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 801430e:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8014310:	4413      	add	r3, r2
 8014312:	b29a      	uxth	r2, r3
 8014314:	687b      	ldr	r3, [r7, #4]
 8014316:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 801431a:	429a      	cmp	r2, r3
 801431c:	d309      	bcc.n	8014332 <tcp_receive+0x2c6>
 801431e:	687b      	ldr	r3, [r7, #4]
 8014320:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 8014324:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8014326:	4413      	add	r3, r2
 8014328:	b29a      	uxth	r2, r3
 801432a:	687b      	ldr	r3, [r7, #4]
 801432c:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
 8014330:	e04e      	b.n	80143d0 <tcp_receive+0x364>
 8014332:	687b      	ldr	r3, [r7, #4]
 8014334:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8014338:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
 801433c:	e048      	b.n	80143d0 <tcp_receive+0x364>
          LWIP_DEBUGF(TCP_CWND_DEBUG, ("tcp_receive: slow start cwnd %"TCPWNDSIZE_F"\n", pcb->cwnd));
        } else {
          /* RFC 3465, section 2.1 Congestion Avoidance */
          TCP_WND_INC(pcb->bytes_acked, acked);
 801433e:	687b      	ldr	r3, [r7, #4]
 8014340:	f8b3 206a 	ldrh.w	r2, [r3, #106]	; 0x6a
 8014344:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8014346:	4413      	add	r3, r2
 8014348:	b29a      	uxth	r2, r3
 801434a:	687b      	ldr	r3, [r7, #4]
 801434c:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 8014350:	429a      	cmp	r2, r3
 8014352:	d309      	bcc.n	8014368 <tcp_receive+0x2fc>
 8014354:	687b      	ldr	r3, [r7, #4]
 8014356:	f8b3 206a 	ldrh.w	r2, [r3, #106]	; 0x6a
 801435a:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 801435c:	4413      	add	r3, r2
 801435e:	b29a      	uxth	r2, r3
 8014360:	687b      	ldr	r3, [r7, #4]
 8014362:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
 8014366:	e004      	b.n	8014372 <tcp_receive+0x306>
 8014368:	687b      	ldr	r3, [r7, #4]
 801436a:	f64f 72ff 	movw	r2, #65535	; 0xffff
 801436e:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
          if (pcb->bytes_acked >= pcb->cwnd) {
 8014372:	687b      	ldr	r3, [r7, #4]
 8014374:	f8b3 206a 	ldrh.w	r2, [r3, #106]	; 0x6a
 8014378:	687b      	ldr	r3, [r7, #4]
 801437a:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 801437e:	429a      	cmp	r2, r3
 8014380:	d326      	bcc.n	80143d0 <tcp_receive+0x364>
            pcb->bytes_acked = (tcpwnd_size_t)(pcb->bytes_acked - pcb->cwnd);
 8014382:	687b      	ldr	r3, [r7, #4]
 8014384:	f8b3 206a 	ldrh.w	r2, [r3, #106]	; 0x6a
 8014388:	687b      	ldr	r3, [r7, #4]
 801438a:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 801438e:	1ad3      	subs	r3, r2, r3
 8014390:	b29a      	uxth	r2, r3
 8014392:	687b      	ldr	r3, [r7, #4]
 8014394:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
            TCP_WND_INC(pcb->cwnd, pcb->mss);
 8014398:	687b      	ldr	r3, [r7, #4]
 801439a:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 801439e:	687b      	ldr	r3, [r7, #4]
 80143a0:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 80143a2:	4413      	add	r3, r2
 80143a4:	b29a      	uxth	r2, r3
 80143a6:	687b      	ldr	r3, [r7, #4]
 80143a8:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 80143ac:	429a      	cmp	r2, r3
 80143ae:	d30a      	bcc.n	80143c6 <tcp_receive+0x35a>
 80143b0:	687b      	ldr	r3, [r7, #4]
 80143b2:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 80143b6:	687b      	ldr	r3, [r7, #4]
 80143b8:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 80143ba:	4413      	add	r3, r2
 80143bc:	b29a      	uxth	r2, r3
 80143be:	687b      	ldr	r3, [r7, #4]
 80143c0:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
 80143c4:	e004      	b.n	80143d0 <tcp_receive+0x364>
 80143c6:	687b      	ldr	r3, [r7, #4]
 80143c8:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80143cc:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
                                    pcb->unacked != NULL ?
                                    lwip_ntohl(pcb->unacked->tcphdr->seqno) + TCP_TCPLEN(pcb->unacked) : 0));

      /* Remove segment from the unacknowledged list if the incoming
         ACK acknowledges them. */
      pcb->unacked = tcp_free_acked_segments(pcb, pcb->unacked, "unacked", pcb->unsent);
 80143d0:	687b      	ldr	r3, [r7, #4]
 80143d2:	6f19      	ldr	r1, [r3, #112]	; 0x70
 80143d4:	687b      	ldr	r3, [r7, #4]
 80143d6:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80143d8:	4a98      	ldr	r2, [pc, #608]	; (801463c <tcp_receive+0x5d0>)
 80143da:	6878      	ldr	r0, [r7, #4]
 80143dc:	f7ff fdca 	bl	8013f74 <tcp_free_acked_segments>
 80143e0:	4602      	mov	r2, r0
 80143e2:	687b      	ldr	r3, [r7, #4]
 80143e4:	671a      	str	r2, [r3, #112]	; 0x70
         on the list are acknowledged by the ACK. This may seem
         strange since an "unsent" segment shouldn't be acked. The
         rationale is that lwIP puts all outstanding segments on the
         ->unsent list after a retransmission, so these segments may
         in fact have been sent once. */
      pcb->unsent = tcp_free_acked_segments(pcb, pcb->unsent, "unsent", pcb->unacked);
 80143e6:	687b      	ldr	r3, [r7, #4]
 80143e8:	6ed9      	ldr	r1, [r3, #108]	; 0x6c
 80143ea:	687b      	ldr	r3, [r7, #4]
 80143ec:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80143ee:	4a94      	ldr	r2, [pc, #592]	; (8014640 <tcp_receive+0x5d4>)
 80143f0:	6878      	ldr	r0, [r7, #4]
 80143f2:	f7ff fdbf 	bl	8013f74 <tcp_free_acked_segments>
 80143f6:	4602      	mov	r2, r0
 80143f8:	687b      	ldr	r3, [r7, #4]
 80143fa:	66da      	str	r2, [r3, #108]	; 0x6c

      /* If there's nothing left to acknowledge, stop the retransmit
         timer, otherwise reset it to start again */
      if (pcb->unacked == NULL) {
 80143fc:	687b      	ldr	r3, [r7, #4]
 80143fe:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8014400:	2b00      	cmp	r3, #0
 8014402:	d104      	bne.n	801440e <tcp_receive+0x3a2>
        pcb->rtime = -1;
 8014404:	687b      	ldr	r3, [r7, #4]
 8014406:	f64f 72ff 	movw	r2, #65535	; 0xffff
 801440a:	861a      	strh	r2, [r3, #48]	; 0x30
 801440c:	e002      	b.n	8014414 <tcp_receive+0x3a8>
      } else {
        pcb->rtime = 0;
 801440e:	687b      	ldr	r3, [r7, #4]
 8014410:	2200      	movs	r2, #0
 8014412:	861a      	strh	r2, [r3, #48]	; 0x30
      }

      pcb->polltmr = 0;
 8014414:	687b      	ldr	r3, [r7, #4]
 8014416:	2200      	movs	r2, #0
 8014418:	771a      	strb	r2, [r3, #28]

#if TCP_OVERSIZE
      if (pcb->unsent == NULL) {
 801441a:	687b      	ldr	r3, [r7, #4]
 801441c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 801441e:	2b00      	cmp	r3, #0
 8014420:	d103      	bne.n	801442a <tcp_receive+0x3be>
        pcb->unsent_oversize = 0;
 8014422:	687b      	ldr	r3, [r7, #4]
 8014424:	2200      	movs	r2, #0
 8014426:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
        /* Inform neighbor reachability of forward progress. */
        nd6_reachability_hint(ip6_current_src_addr());
      }
#endif /* LWIP_IPV6 && LWIP_ND6_TCP_REACHABILITY_HINTS*/

      pcb->snd_buf = (tcpwnd_size_t)(pcb->snd_buf + recv_acked);
 801442a:	687b      	ldr	r3, [r7, #4]
 801442c:	f8b3 2064 	ldrh.w	r2, [r3, #100]	; 0x64
 8014430:	4b84      	ldr	r3, [pc, #528]	; (8014644 <tcp_receive+0x5d8>)
 8014432:	881b      	ldrh	r3, [r3, #0]
 8014434:	4413      	add	r3, r2
 8014436:	b29a      	uxth	r2, r3
 8014438:	687b      	ldr	r3, [r7, #4]
 801443a:	f8a3 2064 	strh.w	r2, [r3, #100]	; 0x64
      /* check if this ACK ends our retransmission of in-flight data */
      if (pcb->flags & TF_RTO) {
 801443e:	687b      	ldr	r3, [r7, #4]
 8014440:	8b5b      	ldrh	r3, [r3, #26]
 8014442:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8014446:	2b00      	cmp	r3, #0
 8014448:	d035      	beq.n	80144b6 <tcp_receive+0x44a>
        /* RTO is done if
            1) both queues are empty or
            2) unacked is empty and unsent head contains data not part of RTO or
            3) unacked head contains data not part of RTO */
        if (pcb->unacked == NULL) {
 801444a:	687b      	ldr	r3, [r7, #4]
 801444c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 801444e:	2b00      	cmp	r3, #0
 8014450:	d118      	bne.n	8014484 <tcp_receive+0x418>
          if ((pcb->unsent == NULL) ||
 8014452:	687b      	ldr	r3, [r7, #4]
 8014454:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8014456:	2b00      	cmp	r3, #0
 8014458:	d00c      	beq.n	8014474 <tcp_receive+0x408>
              (TCP_SEQ_LEQ(pcb->rto_end, lwip_ntohl(pcb->unsent->tcphdr->seqno)))) {
 801445a:	687b      	ldr	r3, [r7, #4]
 801445c:	6cdc      	ldr	r4, [r3, #76]	; 0x4c
 801445e:	687b      	ldr	r3, [r7, #4]
 8014460:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8014462:	68db      	ldr	r3, [r3, #12]
 8014464:	685b      	ldr	r3, [r3, #4]
 8014466:	4618      	mov	r0, r3
 8014468:	f7fb f94d 	bl	800f706 <lwip_htonl>
 801446c:	4603      	mov	r3, r0
 801446e:	1ae3      	subs	r3, r4, r3
          if ((pcb->unsent == NULL) ||
 8014470:	2b00      	cmp	r3, #0
 8014472:	dc20      	bgt.n	80144b6 <tcp_receive+0x44a>
            tcp_clear_flags(pcb, TF_RTO);
 8014474:	687b      	ldr	r3, [r7, #4]
 8014476:	8b5b      	ldrh	r3, [r3, #26]
 8014478:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 801447c:	b29a      	uxth	r2, r3
 801447e:	687b      	ldr	r3, [r7, #4]
 8014480:	835a      	strh	r2, [r3, #26]
    } else if (TCP_SEQ_BETWEEN(ackno, pcb->lastack + 1, pcb->snd_nxt)) {
 8014482:	e018      	b.n	80144b6 <tcp_receive+0x44a>
          }
        } else if (TCP_SEQ_LEQ(pcb->rto_end, lwip_ntohl(pcb->unacked->tcphdr->seqno))) {
 8014484:	687b      	ldr	r3, [r7, #4]
 8014486:	6cdc      	ldr	r4, [r3, #76]	; 0x4c
 8014488:	687b      	ldr	r3, [r7, #4]
 801448a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 801448c:	68db      	ldr	r3, [r3, #12]
 801448e:	685b      	ldr	r3, [r3, #4]
 8014490:	4618      	mov	r0, r3
 8014492:	f7fb f938 	bl	800f706 <lwip_htonl>
 8014496:	4603      	mov	r3, r0
 8014498:	1ae3      	subs	r3, r4, r3
 801449a:	2b00      	cmp	r3, #0
 801449c:	dc0b      	bgt.n	80144b6 <tcp_receive+0x44a>
          tcp_clear_flags(pcb, TF_RTO);
 801449e:	687b      	ldr	r3, [r7, #4]
 80144a0:	8b5b      	ldrh	r3, [r3, #26]
 80144a2:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80144a6:	b29a      	uxth	r2, r3
 80144a8:	687b      	ldr	r3, [r7, #4]
 80144aa:	835a      	strh	r2, [r3, #26]
    } else if (TCP_SEQ_BETWEEN(ackno, pcb->lastack + 1, pcb->snd_nxt)) {
 80144ac:	e003      	b.n	80144b6 <tcp_receive+0x44a>
        }
      }
      /* End of ACK for new data processing. */
    } else {
      /* Out of sequence ACK, didn't really ack anything */
      tcp_send_empty_ack(pcb);
 80144ae:	6878      	ldr	r0, [r7, #4]
 80144b0:	f001 ff76 	bl	80163a0 <tcp_send_empty_ack>
 80144b4:	e000      	b.n	80144b8 <tcp_receive+0x44c>
    } else if (TCP_SEQ_BETWEEN(ackno, pcb->lastack + 1, pcb->snd_nxt)) {
 80144b6:	bf00      	nop
                                pcb->rttest, pcb->rtseq, ackno));

    /* RTT estimation calculations. This is done by checking if the
       incoming segment acknowledges the segment we use to take a
       round-trip time measurement. */
    if (pcb->rttest && TCP_SEQ_LT(pcb->rtseq, ackno)) {
 80144b8:	687b      	ldr	r3, [r7, #4]
 80144ba:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80144bc:	2b00      	cmp	r3, #0
 80144be:	d05b      	beq.n	8014578 <tcp_receive+0x50c>
 80144c0:	687b      	ldr	r3, [r7, #4]
 80144c2:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80144c4:	4b60      	ldr	r3, [pc, #384]	; (8014648 <tcp_receive+0x5dc>)
 80144c6:	681b      	ldr	r3, [r3, #0]
 80144c8:	1ad3      	subs	r3, r2, r3
 80144ca:	2b00      	cmp	r3, #0
 80144cc:	da54      	bge.n	8014578 <tcp_receive+0x50c>
      /* diff between this shouldn't exceed 32K since this are tcp timer ticks
         and a round-trip shouldn't be that long... */
      m = (s16_t)(tcp_ticks - pcb->rttest);
 80144ce:	4b5f      	ldr	r3, [pc, #380]	; (801464c <tcp_receive+0x5e0>)
 80144d0:	681b      	ldr	r3, [r3, #0]
 80144d2:	b29a      	uxth	r2, r3
 80144d4:	687b      	ldr	r3, [r7, #4]
 80144d6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80144d8:	b29b      	uxth	r3, r3
 80144da:	1ad3      	subs	r3, r2, r3
 80144dc:	b29b      	uxth	r3, r3
 80144de:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e

      LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_receive: experienced rtt %"U16_F" ticks (%"U16_F" msec).\n",
                                  m, (u16_t)(m * TCP_SLOW_INTERVAL)));

      /* This is taken directly from VJs original code in his paper */
      m = (s16_t)(m - (pcb->sa >> 3));
 80144e2:	f8b7 204e 	ldrh.w	r2, [r7, #78]	; 0x4e
 80144e6:	687b      	ldr	r3, [r7, #4]
 80144e8:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	; 0x3c
 80144ec:	10db      	asrs	r3, r3, #3
 80144ee:	b21b      	sxth	r3, r3
 80144f0:	b29b      	uxth	r3, r3
 80144f2:	1ad3      	subs	r3, r2, r3
 80144f4:	b29b      	uxth	r3, r3
 80144f6:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
      pcb->sa = (s16_t)(pcb->sa + m);
 80144fa:	687b      	ldr	r3, [r7, #4]
 80144fc:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	; 0x3c
 8014500:	b29a      	uxth	r2, r3
 8014502:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8014506:	4413      	add	r3, r2
 8014508:	b29b      	uxth	r3, r3
 801450a:	b21a      	sxth	r2, r3
 801450c:	687b      	ldr	r3, [r7, #4]
 801450e:	879a      	strh	r2, [r3, #60]	; 0x3c
      if (m < 0) {
 8014510:	f9b7 304e 	ldrsh.w	r3, [r7, #78]	; 0x4e
 8014514:	2b00      	cmp	r3, #0
 8014516:	da05      	bge.n	8014524 <tcp_receive+0x4b8>
        m = (s16_t) - m;
 8014518:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 801451c:	425b      	negs	r3, r3
 801451e:	b29b      	uxth	r3, r3
 8014520:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
      }
      m = (s16_t)(m - (pcb->sv >> 2));
 8014524:	f8b7 204e 	ldrh.w	r2, [r7, #78]	; 0x4e
 8014528:	687b      	ldr	r3, [r7, #4]
 801452a:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	; 0x3e
 801452e:	109b      	asrs	r3, r3, #2
 8014530:	b21b      	sxth	r3, r3
 8014532:	b29b      	uxth	r3, r3
 8014534:	1ad3      	subs	r3, r2, r3
 8014536:	b29b      	uxth	r3, r3
 8014538:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
      pcb->sv = (s16_t)(pcb->sv + m);
 801453c:	687b      	ldr	r3, [r7, #4]
 801453e:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	; 0x3e
 8014542:	b29a      	uxth	r2, r3
 8014544:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8014548:	4413      	add	r3, r2
 801454a:	b29b      	uxth	r3, r3
 801454c:	b21a      	sxth	r2, r3
 801454e:	687b      	ldr	r3, [r7, #4]
 8014550:	87da      	strh	r2, [r3, #62]	; 0x3e
      pcb->rto = (s16_t)((pcb->sa >> 3) + pcb->sv);
 8014552:	687b      	ldr	r3, [r7, #4]
 8014554:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	; 0x3c
 8014558:	10db      	asrs	r3, r3, #3
 801455a:	b21b      	sxth	r3, r3
 801455c:	b29a      	uxth	r2, r3
 801455e:	687b      	ldr	r3, [r7, #4]
 8014560:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	; 0x3e
 8014564:	b29b      	uxth	r3, r3
 8014566:	4413      	add	r3, r2
 8014568:	b29b      	uxth	r3, r3
 801456a:	b21a      	sxth	r2, r3
 801456c:	687b      	ldr	r3, [r7, #4]
 801456e:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

      LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_receive: RTO %"U16_F" (%"U16_F" milliseconds)\n",
                                  pcb->rto, (u16_t)(pcb->rto * TCP_SLOW_INTERVAL)));

      pcb->rttest = 0;
 8014572:	687b      	ldr	r3, [r7, #4]
 8014574:	2200      	movs	r2, #0
 8014576:	635a      	str	r2, [r3, #52]	; 0x34

  /* If the incoming segment contains data, we must process it
     further unless the pcb already received a FIN.
     (RFC 793, chapter 3.9, "SEGMENT ARRIVES" in states CLOSE-WAIT, CLOSING,
     LAST-ACK and TIME-WAIT: "Ignore the segment text.") */
  if ((tcplen > 0) && (pcb->state < CLOSE_WAIT)) {
 8014578:	4b35      	ldr	r3, [pc, #212]	; (8014650 <tcp_receive+0x5e4>)
 801457a:	881b      	ldrh	r3, [r3, #0]
 801457c:	2b00      	cmp	r3, #0
 801457e:	f000 84e2 	beq.w	8014f46 <tcp_receive+0xeda>
 8014582:	687b      	ldr	r3, [r7, #4]
 8014584:	7d1b      	ldrb	r3, [r3, #20]
 8014586:	2b06      	cmp	r3, #6
 8014588:	f200 84dd 	bhi.w	8014f46 <tcp_receive+0xeda>
       this if the sequence number of the incoming segment is less
       than rcv_nxt, and the sequence number plus the length of the
       segment is larger than rcv_nxt. */
    /*    if (TCP_SEQ_LT(seqno, pcb->rcv_nxt)) {
          if (TCP_SEQ_LT(pcb->rcv_nxt, seqno + tcplen)) {*/
    if (TCP_SEQ_BETWEEN(pcb->rcv_nxt, seqno + 1, seqno + tcplen - 1)) {
 801458c:	687b      	ldr	r3, [r7, #4]
 801458e:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8014590:	4b30      	ldr	r3, [pc, #192]	; (8014654 <tcp_receive+0x5e8>)
 8014592:	681b      	ldr	r3, [r3, #0]
 8014594:	1ad3      	subs	r3, r2, r3
 8014596:	3b01      	subs	r3, #1
 8014598:	2b00      	cmp	r3, #0
 801459a:	f2c0 808f 	blt.w	80146bc <tcp_receive+0x650>
 801459e:	687b      	ldr	r3, [r7, #4]
 80145a0:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80145a2:	4b2b      	ldr	r3, [pc, #172]	; (8014650 <tcp_receive+0x5e4>)
 80145a4:	881b      	ldrh	r3, [r3, #0]
 80145a6:	4619      	mov	r1, r3
 80145a8:	4b2a      	ldr	r3, [pc, #168]	; (8014654 <tcp_receive+0x5e8>)
 80145aa:	681b      	ldr	r3, [r3, #0]
 80145ac:	440b      	add	r3, r1
 80145ae:	1ad3      	subs	r3, r2, r3
 80145b0:	3301      	adds	r3, #1
 80145b2:	2b00      	cmp	r3, #0
 80145b4:	f300 8082 	bgt.w	80146bc <tcp_receive+0x650>

         After we are done with adjusting the pbuf pointers we must
         adjust the ->data pointer in the seg and the segment
         length.*/

      struct pbuf *p = inseg.p;
 80145b8:	4b27      	ldr	r3, [pc, #156]	; (8014658 <tcp_receive+0x5ec>)
 80145ba:	685b      	ldr	r3, [r3, #4]
 80145bc:	647b      	str	r3, [r7, #68]	; 0x44
      u32_t off32 = pcb->rcv_nxt - seqno;
 80145be:	687b      	ldr	r3, [r7, #4]
 80145c0:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80145c2:	4b24      	ldr	r3, [pc, #144]	; (8014654 <tcp_receive+0x5e8>)
 80145c4:	681b      	ldr	r3, [r3, #0]
 80145c6:	1ad3      	subs	r3, r2, r3
 80145c8:	627b      	str	r3, [r7, #36]	; 0x24
      u16_t new_tot_len, off;
      LWIP_ASSERT("inseg.p != NULL", inseg.p);
 80145ca:	4b23      	ldr	r3, [pc, #140]	; (8014658 <tcp_receive+0x5ec>)
 80145cc:	685b      	ldr	r3, [r3, #4]
 80145ce:	2b00      	cmp	r3, #0
 80145d0:	d106      	bne.n	80145e0 <tcp_receive+0x574>
 80145d2:	4b22      	ldr	r3, [pc, #136]	; (801465c <tcp_receive+0x5f0>)
 80145d4:	f240 5294 	movw	r2, #1428	; 0x594
 80145d8:	4921      	ldr	r1, [pc, #132]	; (8014660 <tcp_receive+0x5f4>)
 80145da:	4822      	ldr	r0, [pc, #136]	; (8014664 <tcp_receive+0x5f8>)
 80145dc:	f005 fb38 	bl	8019c50 <iprintf>
      LWIP_ASSERT("insane offset!", (off32 < 0xffff));
 80145e0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80145e2:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 80145e6:	4293      	cmp	r3, r2
 80145e8:	d906      	bls.n	80145f8 <tcp_receive+0x58c>
 80145ea:	4b1c      	ldr	r3, [pc, #112]	; (801465c <tcp_receive+0x5f0>)
 80145ec:	f240 5295 	movw	r2, #1429	; 0x595
 80145f0:	491d      	ldr	r1, [pc, #116]	; (8014668 <tcp_receive+0x5fc>)
 80145f2:	481c      	ldr	r0, [pc, #112]	; (8014664 <tcp_receive+0x5f8>)
 80145f4:	f005 fb2c 	bl	8019c50 <iprintf>
      off = (u16_t)off32;
 80145f8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80145fa:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
      LWIP_ASSERT("pbuf too short!", (((s32_t)inseg.p->tot_len) >= off));
 80145fe:	4b16      	ldr	r3, [pc, #88]	; (8014658 <tcp_receive+0x5ec>)
 8014600:	685b      	ldr	r3, [r3, #4]
 8014602:	891b      	ldrh	r3, [r3, #8]
 8014604:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 8014608:	429a      	cmp	r2, r3
 801460a:	d906      	bls.n	801461a <tcp_receive+0x5ae>
 801460c:	4b13      	ldr	r3, [pc, #76]	; (801465c <tcp_receive+0x5f0>)
 801460e:	f240 5297 	movw	r2, #1431	; 0x597
 8014612:	4916      	ldr	r1, [pc, #88]	; (801466c <tcp_receive+0x600>)
 8014614:	4813      	ldr	r0, [pc, #76]	; (8014664 <tcp_receive+0x5f8>)
 8014616:	f005 fb1b 	bl	8019c50 <iprintf>
      inseg.len -= off;
 801461a:	4b0f      	ldr	r3, [pc, #60]	; (8014658 <tcp_receive+0x5ec>)
 801461c:	891a      	ldrh	r2, [r3, #8]
 801461e:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 8014622:	1ad3      	subs	r3, r2, r3
 8014624:	b29a      	uxth	r2, r3
 8014626:	4b0c      	ldr	r3, [pc, #48]	; (8014658 <tcp_receive+0x5ec>)
 8014628:	811a      	strh	r2, [r3, #8]
      new_tot_len = (u16_t)(inseg.p->tot_len - off);
 801462a:	4b0b      	ldr	r3, [pc, #44]	; (8014658 <tcp_receive+0x5ec>)
 801462c:	685b      	ldr	r3, [r3, #4]
 801462e:	891a      	ldrh	r2, [r3, #8]
 8014630:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 8014634:	1ad3      	subs	r3, r2, r3
 8014636:	847b      	strh	r3, [r7, #34]	; 0x22
      while (p->len < off) {
 8014638:	e02a      	b.n	8014690 <tcp_receive+0x624>
 801463a:	bf00      	nop
 801463c:	0801dae4 	.word	0x0801dae4
 8014640:	0801daec 	.word	0x0801daec
 8014644:	20007118 	.word	0x20007118
 8014648:	20007114 	.word	0x20007114
 801464c:	200070d8 	.word	0x200070d8
 8014650:	2000711a 	.word	0x2000711a
 8014654:	20007110 	.word	0x20007110
 8014658:	200070f0 	.word	0x200070f0
 801465c:	0801d77c 	.word	0x0801d77c
 8014660:	0801daf4 	.word	0x0801daf4
 8014664:	0801d7c8 	.word	0x0801d7c8
 8014668:	0801db04 	.word	0x0801db04
 801466c:	0801db14 	.word	0x0801db14
        off -= p->len;
 8014670:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8014672:	895b      	ldrh	r3, [r3, #10]
 8014674:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 8014678:	1ad3      	subs	r3, r2, r3
 801467a:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
        /* all pbufs up to and including this one have len==0, so tot_len is equal */
        p->tot_len = new_tot_len;
 801467e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8014680:	8c7a      	ldrh	r2, [r7, #34]	; 0x22
 8014682:	811a      	strh	r2, [r3, #8]
        p->len = 0;
 8014684:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8014686:	2200      	movs	r2, #0
 8014688:	815a      	strh	r2, [r3, #10]
        p = p->next;
 801468a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 801468c:	681b      	ldr	r3, [r3, #0]
 801468e:	647b      	str	r3, [r7, #68]	; 0x44
      while (p->len < off) {
 8014690:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8014692:	895b      	ldrh	r3, [r3, #10]
 8014694:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 8014698:	429a      	cmp	r2, r3
 801469a:	d8e9      	bhi.n	8014670 <tcp_receive+0x604>
      }
      /* cannot fail... */
      pbuf_remove_header(p, off);
 801469c:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 80146a0:	4619      	mov	r1, r3
 80146a2:	6c78      	ldr	r0, [r7, #68]	; 0x44
 80146a4:	f7fc fb78 	bl	8010d98 <pbuf_remove_header>
      inseg.tcphdr->seqno = seqno = pcb->rcv_nxt;
 80146a8:	687b      	ldr	r3, [r7, #4]
 80146aa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80146ac:	4a91      	ldr	r2, [pc, #580]	; (80148f4 <tcp_receive+0x888>)
 80146ae:	6013      	str	r3, [r2, #0]
 80146b0:	4b91      	ldr	r3, [pc, #580]	; (80148f8 <tcp_receive+0x88c>)
 80146b2:	68db      	ldr	r3, [r3, #12]
 80146b4:	4a8f      	ldr	r2, [pc, #572]	; (80148f4 <tcp_receive+0x888>)
 80146b6:	6812      	ldr	r2, [r2, #0]
 80146b8:	605a      	str	r2, [r3, #4]
    if (TCP_SEQ_BETWEEN(pcb->rcv_nxt, seqno + 1, seqno + tcplen - 1)) {
 80146ba:	e00d      	b.n	80146d8 <tcp_receive+0x66c>
    } else {
      if (TCP_SEQ_LT(seqno, pcb->rcv_nxt)) {
 80146bc:	4b8d      	ldr	r3, [pc, #564]	; (80148f4 <tcp_receive+0x888>)
 80146be:	681a      	ldr	r2, [r3, #0]
 80146c0:	687b      	ldr	r3, [r7, #4]
 80146c2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80146c4:	1ad3      	subs	r3, r2, r3
 80146c6:	2b00      	cmp	r3, #0
 80146c8:	da06      	bge.n	80146d8 <tcp_receive+0x66c>
        /* the whole segment is < rcv_nxt */
        /* must be a duplicate of a packet that has already been correctly handled */

        LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_receive: duplicate seqno %"U32_F"\n", seqno));
        tcp_ack_now(pcb);
 80146ca:	687b      	ldr	r3, [r7, #4]
 80146cc:	8b5b      	ldrh	r3, [r3, #26]
 80146ce:	f043 0302 	orr.w	r3, r3, #2
 80146d2:	b29a      	uxth	r2, r3
 80146d4:	687b      	ldr	r3, [r7, #4]
 80146d6:	835a      	strh	r2, [r3, #26]
    }

    /* The sequence number must be within the window (above rcv_nxt
       and below rcv_nxt + rcv_wnd) in order to be further
       processed. */
    if (TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt,
 80146d8:	4b86      	ldr	r3, [pc, #536]	; (80148f4 <tcp_receive+0x888>)
 80146da:	681a      	ldr	r2, [r3, #0]
 80146dc:	687b      	ldr	r3, [r7, #4]
 80146de:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80146e0:	1ad3      	subs	r3, r2, r3
 80146e2:	2b00      	cmp	r3, #0
 80146e4:	f2c0 842a 	blt.w	8014f3c <tcp_receive+0xed0>
 80146e8:	4b82      	ldr	r3, [pc, #520]	; (80148f4 <tcp_receive+0x888>)
 80146ea:	681a      	ldr	r2, [r3, #0]
 80146ec:	687b      	ldr	r3, [r7, #4]
 80146ee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80146f0:	6879      	ldr	r1, [r7, #4]
 80146f2:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 80146f4:	440b      	add	r3, r1
 80146f6:	1ad3      	subs	r3, r2, r3
 80146f8:	3301      	adds	r3, #1
 80146fa:	2b00      	cmp	r3, #0
 80146fc:	f300 841e 	bgt.w	8014f3c <tcp_receive+0xed0>
                        pcb->rcv_nxt + pcb->rcv_wnd - 1)) {
      if (pcb->rcv_nxt == seqno) {
 8014700:	687b      	ldr	r3, [r7, #4]
 8014702:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8014704:	4b7b      	ldr	r3, [pc, #492]	; (80148f4 <tcp_receive+0x888>)
 8014706:	681b      	ldr	r3, [r3, #0]
 8014708:	429a      	cmp	r2, r3
 801470a:	f040 829a 	bne.w	8014c42 <tcp_receive+0xbd6>
        /* The incoming segment is the next in sequence. We check if
           we have to trim the end of the segment and update rcv_nxt
           and pass the data to the application. */
        tcplen = TCP_TCPLEN(&inseg);
 801470e:	4b7a      	ldr	r3, [pc, #488]	; (80148f8 <tcp_receive+0x88c>)
 8014710:	891c      	ldrh	r4, [r3, #8]
 8014712:	4b79      	ldr	r3, [pc, #484]	; (80148f8 <tcp_receive+0x88c>)
 8014714:	68db      	ldr	r3, [r3, #12]
 8014716:	899b      	ldrh	r3, [r3, #12]
 8014718:	b29b      	uxth	r3, r3
 801471a:	4618      	mov	r0, r3
 801471c:	f7fa ffde 	bl	800f6dc <lwip_htons>
 8014720:	4603      	mov	r3, r0
 8014722:	b2db      	uxtb	r3, r3
 8014724:	f003 0303 	and.w	r3, r3, #3
 8014728:	2b00      	cmp	r3, #0
 801472a:	d001      	beq.n	8014730 <tcp_receive+0x6c4>
 801472c:	2301      	movs	r3, #1
 801472e:	e000      	b.n	8014732 <tcp_receive+0x6c6>
 8014730:	2300      	movs	r3, #0
 8014732:	4423      	add	r3, r4
 8014734:	b29a      	uxth	r2, r3
 8014736:	4b71      	ldr	r3, [pc, #452]	; (80148fc <tcp_receive+0x890>)
 8014738:	801a      	strh	r2, [r3, #0]

        if (tcplen > pcb->rcv_wnd) {
 801473a:	687b      	ldr	r3, [r7, #4]
 801473c:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 801473e:	4b6f      	ldr	r3, [pc, #444]	; (80148fc <tcp_receive+0x890>)
 8014740:	881b      	ldrh	r3, [r3, #0]
 8014742:	429a      	cmp	r2, r3
 8014744:	d275      	bcs.n	8014832 <tcp_receive+0x7c6>
          LWIP_DEBUGF(TCP_INPUT_DEBUG,
                      ("tcp_receive: other end overran receive window"
                       "seqno %"U32_F" len %"U16_F" right edge %"U32_F"\n",
                       seqno, tcplen, pcb->rcv_nxt + pcb->rcv_wnd));
          if (TCPH_FLAGS(inseg.tcphdr) & TCP_FIN) {
 8014746:	4b6c      	ldr	r3, [pc, #432]	; (80148f8 <tcp_receive+0x88c>)
 8014748:	68db      	ldr	r3, [r3, #12]
 801474a:	899b      	ldrh	r3, [r3, #12]
 801474c:	b29b      	uxth	r3, r3
 801474e:	4618      	mov	r0, r3
 8014750:	f7fa ffc4 	bl	800f6dc <lwip_htons>
 8014754:	4603      	mov	r3, r0
 8014756:	b2db      	uxtb	r3, r3
 8014758:	f003 0301 	and.w	r3, r3, #1
 801475c:	2b00      	cmp	r3, #0
 801475e:	d01f      	beq.n	80147a0 <tcp_receive+0x734>
            /* Must remove the FIN from the header as we're trimming
             * that byte of sequence-space from the packet */
            TCPH_FLAGS_SET(inseg.tcphdr, TCPH_FLAGS(inseg.tcphdr) & ~(unsigned int)TCP_FIN);
 8014760:	4b65      	ldr	r3, [pc, #404]	; (80148f8 <tcp_receive+0x88c>)
 8014762:	68db      	ldr	r3, [r3, #12]
 8014764:	899b      	ldrh	r3, [r3, #12]
 8014766:	b29b      	uxth	r3, r3
 8014768:	b21b      	sxth	r3, r3
 801476a:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 801476e:	b21c      	sxth	r4, r3
 8014770:	4b61      	ldr	r3, [pc, #388]	; (80148f8 <tcp_receive+0x88c>)
 8014772:	68db      	ldr	r3, [r3, #12]
 8014774:	899b      	ldrh	r3, [r3, #12]
 8014776:	b29b      	uxth	r3, r3
 8014778:	4618      	mov	r0, r3
 801477a:	f7fa ffaf 	bl	800f6dc <lwip_htons>
 801477e:	4603      	mov	r3, r0
 8014780:	b2db      	uxtb	r3, r3
 8014782:	b29b      	uxth	r3, r3
 8014784:	f003 033e 	and.w	r3, r3, #62	; 0x3e
 8014788:	b29b      	uxth	r3, r3
 801478a:	4618      	mov	r0, r3
 801478c:	f7fa ffa6 	bl	800f6dc <lwip_htons>
 8014790:	4603      	mov	r3, r0
 8014792:	b21b      	sxth	r3, r3
 8014794:	4323      	orrs	r3, r4
 8014796:	b21a      	sxth	r2, r3
 8014798:	4b57      	ldr	r3, [pc, #348]	; (80148f8 <tcp_receive+0x88c>)
 801479a:	68db      	ldr	r3, [r3, #12]
 801479c:	b292      	uxth	r2, r2
 801479e:	819a      	strh	r2, [r3, #12]
          }
          /* Adjust length of segment to fit in the window. */
          TCPWND_CHECK16(pcb->rcv_wnd);
          inseg.len = (u16_t)pcb->rcv_wnd;
 80147a0:	687b      	ldr	r3, [r7, #4]
 80147a2:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 80147a4:	4b54      	ldr	r3, [pc, #336]	; (80148f8 <tcp_receive+0x88c>)
 80147a6:	811a      	strh	r2, [r3, #8]
          if (TCPH_FLAGS(inseg.tcphdr) & TCP_SYN) {
 80147a8:	4b53      	ldr	r3, [pc, #332]	; (80148f8 <tcp_receive+0x88c>)
 80147aa:	68db      	ldr	r3, [r3, #12]
 80147ac:	899b      	ldrh	r3, [r3, #12]
 80147ae:	b29b      	uxth	r3, r3
 80147b0:	4618      	mov	r0, r3
 80147b2:	f7fa ff93 	bl	800f6dc <lwip_htons>
 80147b6:	4603      	mov	r3, r0
 80147b8:	b2db      	uxtb	r3, r3
 80147ba:	f003 0302 	and.w	r3, r3, #2
 80147be:	2b00      	cmp	r3, #0
 80147c0:	d005      	beq.n	80147ce <tcp_receive+0x762>
            inseg.len -= 1;
 80147c2:	4b4d      	ldr	r3, [pc, #308]	; (80148f8 <tcp_receive+0x88c>)
 80147c4:	891b      	ldrh	r3, [r3, #8]
 80147c6:	3b01      	subs	r3, #1
 80147c8:	b29a      	uxth	r2, r3
 80147ca:	4b4b      	ldr	r3, [pc, #300]	; (80148f8 <tcp_receive+0x88c>)
 80147cc:	811a      	strh	r2, [r3, #8]
          }
          pbuf_realloc(inseg.p, inseg.len);
 80147ce:	4b4a      	ldr	r3, [pc, #296]	; (80148f8 <tcp_receive+0x88c>)
 80147d0:	685b      	ldr	r3, [r3, #4]
 80147d2:	4a49      	ldr	r2, [pc, #292]	; (80148f8 <tcp_receive+0x88c>)
 80147d4:	8912      	ldrh	r2, [r2, #8]
 80147d6:	4611      	mov	r1, r2
 80147d8:	4618      	mov	r0, r3
 80147da:	f7fc f9df 	bl	8010b9c <pbuf_realloc>
          tcplen = TCP_TCPLEN(&inseg);
 80147de:	4b46      	ldr	r3, [pc, #280]	; (80148f8 <tcp_receive+0x88c>)
 80147e0:	891c      	ldrh	r4, [r3, #8]
 80147e2:	4b45      	ldr	r3, [pc, #276]	; (80148f8 <tcp_receive+0x88c>)
 80147e4:	68db      	ldr	r3, [r3, #12]
 80147e6:	899b      	ldrh	r3, [r3, #12]
 80147e8:	b29b      	uxth	r3, r3
 80147ea:	4618      	mov	r0, r3
 80147ec:	f7fa ff76 	bl	800f6dc <lwip_htons>
 80147f0:	4603      	mov	r3, r0
 80147f2:	b2db      	uxtb	r3, r3
 80147f4:	f003 0303 	and.w	r3, r3, #3
 80147f8:	2b00      	cmp	r3, #0
 80147fa:	d001      	beq.n	8014800 <tcp_receive+0x794>
 80147fc:	2301      	movs	r3, #1
 80147fe:	e000      	b.n	8014802 <tcp_receive+0x796>
 8014800:	2300      	movs	r3, #0
 8014802:	4423      	add	r3, r4
 8014804:	b29a      	uxth	r2, r3
 8014806:	4b3d      	ldr	r3, [pc, #244]	; (80148fc <tcp_receive+0x890>)
 8014808:	801a      	strh	r2, [r3, #0]
          LWIP_ASSERT("tcp_receive: segment not trimmed correctly to rcv_wnd\n",
 801480a:	4b3c      	ldr	r3, [pc, #240]	; (80148fc <tcp_receive+0x890>)
 801480c:	881b      	ldrh	r3, [r3, #0]
 801480e:	461a      	mov	r2, r3
 8014810:	4b38      	ldr	r3, [pc, #224]	; (80148f4 <tcp_receive+0x888>)
 8014812:	681b      	ldr	r3, [r3, #0]
 8014814:	441a      	add	r2, r3
 8014816:	687b      	ldr	r3, [r7, #4]
 8014818:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801481a:	6879      	ldr	r1, [r7, #4]
 801481c:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 801481e:	440b      	add	r3, r1
 8014820:	429a      	cmp	r2, r3
 8014822:	d006      	beq.n	8014832 <tcp_receive+0x7c6>
 8014824:	4b36      	ldr	r3, [pc, #216]	; (8014900 <tcp_receive+0x894>)
 8014826:	f240 52cb 	movw	r2, #1483	; 0x5cb
 801482a:	4936      	ldr	r1, [pc, #216]	; (8014904 <tcp_receive+0x898>)
 801482c:	4836      	ldr	r0, [pc, #216]	; (8014908 <tcp_receive+0x89c>)
 801482e:	f005 fa0f 	bl	8019c50 <iprintf>
        }
#if TCP_QUEUE_OOSEQ
        /* Received in-sequence data, adjust ooseq data if:
           - FIN has been received or
           - inseq overlaps with ooseq */
        if (pcb->ooseq != NULL) {
 8014832:	687b      	ldr	r3, [r7, #4]
 8014834:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8014836:	2b00      	cmp	r3, #0
 8014838:	f000 80e7 	beq.w	8014a0a <tcp_receive+0x99e>
          if (TCPH_FLAGS(inseg.tcphdr) & TCP_FIN) {
 801483c:	4b2e      	ldr	r3, [pc, #184]	; (80148f8 <tcp_receive+0x88c>)
 801483e:	68db      	ldr	r3, [r3, #12]
 8014840:	899b      	ldrh	r3, [r3, #12]
 8014842:	b29b      	uxth	r3, r3
 8014844:	4618      	mov	r0, r3
 8014846:	f7fa ff49 	bl	800f6dc <lwip_htons>
 801484a:	4603      	mov	r3, r0
 801484c:	b2db      	uxtb	r3, r3
 801484e:	f003 0301 	and.w	r3, r3, #1
 8014852:	2b00      	cmp	r3, #0
 8014854:	d010      	beq.n	8014878 <tcp_receive+0x80c>
            LWIP_DEBUGF(TCP_INPUT_DEBUG,
                        ("tcp_receive: received in-order FIN, binning ooseq queue\n"));
            /* Received in-order FIN means anything that was received
             * out of order must now have been received in-order, so
             * bin the ooseq queue */
            while (pcb->ooseq != NULL) {
 8014856:	e00a      	b.n	801486e <tcp_receive+0x802>
              struct tcp_seg *old_ooseq = pcb->ooseq;
 8014858:	687b      	ldr	r3, [r7, #4]
 801485a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 801485c:	60fb      	str	r3, [r7, #12]
              pcb->ooseq = pcb->ooseq->next;
 801485e:	687b      	ldr	r3, [r7, #4]
 8014860:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8014862:	681a      	ldr	r2, [r3, #0]
 8014864:	687b      	ldr	r3, [r7, #4]
 8014866:	675a      	str	r2, [r3, #116]	; 0x74
              tcp_seg_free(old_ooseq);
 8014868:	68f8      	ldr	r0, [r7, #12]
 801486a:	f7fd fd92 	bl	8012392 <tcp_seg_free>
            while (pcb->ooseq != NULL) {
 801486e:	687b      	ldr	r3, [r7, #4]
 8014870:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8014872:	2b00      	cmp	r3, #0
 8014874:	d1f0      	bne.n	8014858 <tcp_receive+0x7ec>
 8014876:	e0c8      	b.n	8014a0a <tcp_receive+0x99e>
            }
          } else {
            struct tcp_seg *next = pcb->ooseq;
 8014878:	687b      	ldr	r3, [r7, #4]
 801487a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 801487c:	63fb      	str	r3, [r7, #60]	; 0x3c
            /* Remove all segments on ooseq that are covered by inseg already.
             * FIN is copied from ooseq to inseg if present. */
            while (next &&
 801487e:	e052      	b.n	8014926 <tcp_receive+0x8ba>
                   TCP_SEQ_GEQ(seqno + tcplen,
                               next->tcphdr->seqno + next->len)) {
              struct tcp_seg *tmp;
              /* inseg cannot have FIN here (already processed above) */
              if ((TCPH_FLAGS(next->tcphdr) & TCP_FIN) != 0 &&
 8014880:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8014882:	68db      	ldr	r3, [r3, #12]
 8014884:	899b      	ldrh	r3, [r3, #12]
 8014886:	b29b      	uxth	r3, r3
 8014888:	4618      	mov	r0, r3
 801488a:	f7fa ff27 	bl	800f6dc <lwip_htons>
 801488e:	4603      	mov	r3, r0
 8014890:	b2db      	uxtb	r3, r3
 8014892:	f003 0301 	and.w	r3, r3, #1
 8014896:	2b00      	cmp	r3, #0
 8014898:	d03d      	beq.n	8014916 <tcp_receive+0x8aa>
                  (TCPH_FLAGS(inseg.tcphdr) & TCP_SYN) == 0) {
 801489a:	4b17      	ldr	r3, [pc, #92]	; (80148f8 <tcp_receive+0x88c>)
 801489c:	68db      	ldr	r3, [r3, #12]
 801489e:	899b      	ldrh	r3, [r3, #12]
 80148a0:	b29b      	uxth	r3, r3
 80148a2:	4618      	mov	r0, r3
 80148a4:	f7fa ff1a 	bl	800f6dc <lwip_htons>
 80148a8:	4603      	mov	r3, r0
 80148aa:	b2db      	uxtb	r3, r3
 80148ac:	f003 0302 	and.w	r3, r3, #2
              if ((TCPH_FLAGS(next->tcphdr) & TCP_FIN) != 0 &&
 80148b0:	2b00      	cmp	r3, #0
 80148b2:	d130      	bne.n	8014916 <tcp_receive+0x8aa>
                TCPH_SET_FLAG(inseg.tcphdr, TCP_FIN);
 80148b4:	4b10      	ldr	r3, [pc, #64]	; (80148f8 <tcp_receive+0x88c>)
 80148b6:	68db      	ldr	r3, [r3, #12]
 80148b8:	899b      	ldrh	r3, [r3, #12]
 80148ba:	b29c      	uxth	r4, r3
 80148bc:	2001      	movs	r0, #1
 80148be:	f7fa ff0d 	bl	800f6dc <lwip_htons>
 80148c2:	4603      	mov	r3, r0
 80148c4:	461a      	mov	r2, r3
 80148c6:	4b0c      	ldr	r3, [pc, #48]	; (80148f8 <tcp_receive+0x88c>)
 80148c8:	68db      	ldr	r3, [r3, #12]
 80148ca:	4322      	orrs	r2, r4
 80148cc:	b292      	uxth	r2, r2
 80148ce:	819a      	strh	r2, [r3, #12]
                tcplen = TCP_TCPLEN(&inseg);
 80148d0:	4b09      	ldr	r3, [pc, #36]	; (80148f8 <tcp_receive+0x88c>)
 80148d2:	891c      	ldrh	r4, [r3, #8]
 80148d4:	4b08      	ldr	r3, [pc, #32]	; (80148f8 <tcp_receive+0x88c>)
 80148d6:	68db      	ldr	r3, [r3, #12]
 80148d8:	899b      	ldrh	r3, [r3, #12]
 80148da:	b29b      	uxth	r3, r3
 80148dc:	4618      	mov	r0, r3
 80148de:	f7fa fefd 	bl	800f6dc <lwip_htons>
 80148e2:	4603      	mov	r3, r0
 80148e4:	b2db      	uxtb	r3, r3
 80148e6:	f003 0303 	and.w	r3, r3, #3
 80148ea:	2b00      	cmp	r3, #0
 80148ec:	d00e      	beq.n	801490c <tcp_receive+0x8a0>
 80148ee:	2301      	movs	r3, #1
 80148f0:	e00d      	b.n	801490e <tcp_receive+0x8a2>
 80148f2:	bf00      	nop
 80148f4:	20007110 	.word	0x20007110
 80148f8:	200070f0 	.word	0x200070f0
 80148fc:	2000711a 	.word	0x2000711a
 8014900:	0801d77c 	.word	0x0801d77c
 8014904:	0801db24 	.word	0x0801db24
 8014908:	0801d7c8 	.word	0x0801d7c8
 801490c:	2300      	movs	r3, #0
 801490e:	4423      	add	r3, r4
 8014910:	b29a      	uxth	r2, r3
 8014912:	4b98      	ldr	r3, [pc, #608]	; (8014b74 <tcp_receive+0xb08>)
 8014914:	801a      	strh	r2, [r3, #0]
              }
              tmp = next;
 8014916:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8014918:	613b      	str	r3, [r7, #16]
              next = next->next;
 801491a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 801491c:	681b      	ldr	r3, [r3, #0]
 801491e:	63fb      	str	r3, [r7, #60]	; 0x3c
              tcp_seg_free(tmp);
 8014920:	6938      	ldr	r0, [r7, #16]
 8014922:	f7fd fd36 	bl	8012392 <tcp_seg_free>
            while (next &&
 8014926:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8014928:	2b00      	cmp	r3, #0
 801492a:	d00e      	beq.n	801494a <tcp_receive+0x8de>
                   TCP_SEQ_GEQ(seqno + tcplen,
 801492c:	4b91      	ldr	r3, [pc, #580]	; (8014b74 <tcp_receive+0xb08>)
 801492e:	881b      	ldrh	r3, [r3, #0]
 8014930:	461a      	mov	r2, r3
 8014932:	4b91      	ldr	r3, [pc, #580]	; (8014b78 <tcp_receive+0xb0c>)
 8014934:	681b      	ldr	r3, [r3, #0]
 8014936:	441a      	add	r2, r3
 8014938:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 801493a:	68db      	ldr	r3, [r3, #12]
 801493c:	685b      	ldr	r3, [r3, #4]
 801493e:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8014940:	8909      	ldrh	r1, [r1, #8]
 8014942:	440b      	add	r3, r1
 8014944:	1ad3      	subs	r3, r2, r3
            while (next &&
 8014946:	2b00      	cmp	r3, #0
 8014948:	da9a      	bge.n	8014880 <tcp_receive+0x814>
            }
            /* Now trim right side of inseg if it overlaps with the first
             * segment on ooseq */
            if (next &&
 801494a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 801494c:	2b00      	cmp	r3, #0
 801494e:	d059      	beq.n	8014a04 <tcp_receive+0x998>
                TCP_SEQ_GT(seqno + tcplen,
 8014950:	4b88      	ldr	r3, [pc, #544]	; (8014b74 <tcp_receive+0xb08>)
 8014952:	881b      	ldrh	r3, [r3, #0]
 8014954:	461a      	mov	r2, r3
 8014956:	4b88      	ldr	r3, [pc, #544]	; (8014b78 <tcp_receive+0xb0c>)
 8014958:	681b      	ldr	r3, [r3, #0]
 801495a:	441a      	add	r2, r3
 801495c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 801495e:	68db      	ldr	r3, [r3, #12]
 8014960:	685b      	ldr	r3, [r3, #4]
 8014962:	1ad3      	subs	r3, r2, r3
            if (next &&
 8014964:	2b00      	cmp	r3, #0
 8014966:	dd4d      	ble.n	8014a04 <tcp_receive+0x998>
                           next->tcphdr->seqno)) {
              /* inseg cannot have FIN here (already processed above) */
              inseg.len = (u16_t)(next->tcphdr->seqno - seqno);
 8014968:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 801496a:	68db      	ldr	r3, [r3, #12]
 801496c:	685b      	ldr	r3, [r3, #4]
 801496e:	b29a      	uxth	r2, r3
 8014970:	4b81      	ldr	r3, [pc, #516]	; (8014b78 <tcp_receive+0xb0c>)
 8014972:	681b      	ldr	r3, [r3, #0]
 8014974:	b29b      	uxth	r3, r3
 8014976:	1ad3      	subs	r3, r2, r3
 8014978:	b29a      	uxth	r2, r3
 801497a:	4b80      	ldr	r3, [pc, #512]	; (8014b7c <tcp_receive+0xb10>)
 801497c:	811a      	strh	r2, [r3, #8]
              if (TCPH_FLAGS(inseg.tcphdr) & TCP_SYN) {
 801497e:	4b7f      	ldr	r3, [pc, #508]	; (8014b7c <tcp_receive+0xb10>)
 8014980:	68db      	ldr	r3, [r3, #12]
 8014982:	899b      	ldrh	r3, [r3, #12]
 8014984:	b29b      	uxth	r3, r3
 8014986:	4618      	mov	r0, r3
 8014988:	f7fa fea8 	bl	800f6dc <lwip_htons>
 801498c:	4603      	mov	r3, r0
 801498e:	b2db      	uxtb	r3, r3
 8014990:	f003 0302 	and.w	r3, r3, #2
 8014994:	2b00      	cmp	r3, #0
 8014996:	d005      	beq.n	80149a4 <tcp_receive+0x938>
                inseg.len -= 1;
 8014998:	4b78      	ldr	r3, [pc, #480]	; (8014b7c <tcp_receive+0xb10>)
 801499a:	891b      	ldrh	r3, [r3, #8]
 801499c:	3b01      	subs	r3, #1
 801499e:	b29a      	uxth	r2, r3
 80149a0:	4b76      	ldr	r3, [pc, #472]	; (8014b7c <tcp_receive+0xb10>)
 80149a2:	811a      	strh	r2, [r3, #8]
              }
              pbuf_realloc(inseg.p, inseg.len);
 80149a4:	4b75      	ldr	r3, [pc, #468]	; (8014b7c <tcp_receive+0xb10>)
 80149a6:	685b      	ldr	r3, [r3, #4]
 80149a8:	4a74      	ldr	r2, [pc, #464]	; (8014b7c <tcp_receive+0xb10>)
 80149aa:	8912      	ldrh	r2, [r2, #8]
 80149ac:	4611      	mov	r1, r2
 80149ae:	4618      	mov	r0, r3
 80149b0:	f7fc f8f4 	bl	8010b9c <pbuf_realloc>
              tcplen = TCP_TCPLEN(&inseg);
 80149b4:	4b71      	ldr	r3, [pc, #452]	; (8014b7c <tcp_receive+0xb10>)
 80149b6:	891c      	ldrh	r4, [r3, #8]
 80149b8:	4b70      	ldr	r3, [pc, #448]	; (8014b7c <tcp_receive+0xb10>)
 80149ba:	68db      	ldr	r3, [r3, #12]
 80149bc:	899b      	ldrh	r3, [r3, #12]
 80149be:	b29b      	uxth	r3, r3
 80149c0:	4618      	mov	r0, r3
 80149c2:	f7fa fe8b 	bl	800f6dc <lwip_htons>
 80149c6:	4603      	mov	r3, r0
 80149c8:	b2db      	uxtb	r3, r3
 80149ca:	f003 0303 	and.w	r3, r3, #3
 80149ce:	2b00      	cmp	r3, #0
 80149d0:	d001      	beq.n	80149d6 <tcp_receive+0x96a>
 80149d2:	2301      	movs	r3, #1
 80149d4:	e000      	b.n	80149d8 <tcp_receive+0x96c>
 80149d6:	2300      	movs	r3, #0
 80149d8:	4423      	add	r3, r4
 80149da:	b29a      	uxth	r2, r3
 80149dc:	4b65      	ldr	r3, [pc, #404]	; (8014b74 <tcp_receive+0xb08>)
 80149de:	801a      	strh	r2, [r3, #0]
              LWIP_ASSERT("tcp_receive: segment not trimmed correctly to ooseq queue\n",
 80149e0:	4b64      	ldr	r3, [pc, #400]	; (8014b74 <tcp_receive+0xb08>)
 80149e2:	881b      	ldrh	r3, [r3, #0]
 80149e4:	461a      	mov	r2, r3
 80149e6:	4b64      	ldr	r3, [pc, #400]	; (8014b78 <tcp_receive+0xb0c>)
 80149e8:	681b      	ldr	r3, [r3, #0]
 80149ea:	441a      	add	r2, r3
 80149ec:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80149ee:	68db      	ldr	r3, [r3, #12]
 80149f0:	685b      	ldr	r3, [r3, #4]
 80149f2:	429a      	cmp	r2, r3
 80149f4:	d006      	beq.n	8014a04 <tcp_receive+0x998>
 80149f6:	4b62      	ldr	r3, [pc, #392]	; (8014b80 <tcp_receive+0xb14>)
 80149f8:	f240 52fc 	movw	r2, #1532	; 0x5fc
 80149fc:	4961      	ldr	r1, [pc, #388]	; (8014b84 <tcp_receive+0xb18>)
 80149fe:	4862      	ldr	r0, [pc, #392]	; (8014b88 <tcp_receive+0xb1c>)
 8014a00:	f005 f926 	bl	8019c50 <iprintf>
                          (seqno + tcplen) == next->tcphdr->seqno);
            }
            pcb->ooseq = next;
 8014a04:	687b      	ldr	r3, [r7, #4]
 8014a06:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8014a08:	675a      	str	r2, [r3, #116]	; 0x74
          }
        }
#endif /* TCP_QUEUE_OOSEQ */

        pcb->rcv_nxt = seqno + tcplen;
 8014a0a:	4b5a      	ldr	r3, [pc, #360]	; (8014b74 <tcp_receive+0xb08>)
 8014a0c:	881b      	ldrh	r3, [r3, #0]
 8014a0e:	461a      	mov	r2, r3
 8014a10:	4b59      	ldr	r3, [pc, #356]	; (8014b78 <tcp_receive+0xb0c>)
 8014a12:	681b      	ldr	r3, [r3, #0]
 8014a14:	441a      	add	r2, r3
 8014a16:	687b      	ldr	r3, [r7, #4]
 8014a18:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update the receiver's (our) window. */
        LWIP_ASSERT("tcp_receive: tcplen > rcv_wnd\n", pcb->rcv_wnd >= tcplen);
 8014a1a:	687b      	ldr	r3, [r7, #4]
 8014a1c:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 8014a1e:	4b55      	ldr	r3, [pc, #340]	; (8014b74 <tcp_receive+0xb08>)
 8014a20:	881b      	ldrh	r3, [r3, #0]
 8014a22:	429a      	cmp	r2, r3
 8014a24:	d206      	bcs.n	8014a34 <tcp_receive+0x9c8>
 8014a26:	4b56      	ldr	r3, [pc, #344]	; (8014b80 <tcp_receive+0xb14>)
 8014a28:	f240 6207 	movw	r2, #1543	; 0x607
 8014a2c:	4957      	ldr	r1, [pc, #348]	; (8014b8c <tcp_receive+0xb20>)
 8014a2e:	4856      	ldr	r0, [pc, #344]	; (8014b88 <tcp_receive+0xb1c>)
 8014a30:	f005 f90e 	bl	8019c50 <iprintf>
        pcb->rcv_wnd -= tcplen;
 8014a34:	687b      	ldr	r3, [r7, #4]
 8014a36:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 8014a38:	4b4e      	ldr	r3, [pc, #312]	; (8014b74 <tcp_receive+0xb08>)
 8014a3a:	881b      	ldrh	r3, [r3, #0]
 8014a3c:	1ad3      	subs	r3, r2, r3
 8014a3e:	b29a      	uxth	r2, r3
 8014a40:	687b      	ldr	r3, [r7, #4]
 8014a42:	851a      	strh	r2, [r3, #40]	; 0x28

        tcp_update_rcv_ann_wnd(pcb);
 8014a44:	6878      	ldr	r0, [r7, #4]
 8014a46:	f7fc ffc1 	bl	80119cc <tcp_update_rcv_ann_wnd>
           chains its data on this pbuf as well.

           If the segment was a FIN, we set the TF_GOT_FIN flag that will
           be used to indicate to the application that the remote side has
           closed its end of the connection. */
        if (inseg.p->tot_len > 0) {
 8014a4a:	4b4c      	ldr	r3, [pc, #304]	; (8014b7c <tcp_receive+0xb10>)
 8014a4c:	685b      	ldr	r3, [r3, #4]
 8014a4e:	891b      	ldrh	r3, [r3, #8]
 8014a50:	2b00      	cmp	r3, #0
 8014a52:	d006      	beq.n	8014a62 <tcp_receive+0x9f6>
          recv_data = inseg.p;
 8014a54:	4b49      	ldr	r3, [pc, #292]	; (8014b7c <tcp_receive+0xb10>)
 8014a56:	685b      	ldr	r3, [r3, #4]
 8014a58:	4a4d      	ldr	r2, [pc, #308]	; (8014b90 <tcp_receive+0xb24>)
 8014a5a:	6013      	str	r3, [r2, #0]
          /* Since this pbuf now is the responsibility of the
             application, we delete our reference to it so that we won't
             (mistakingly) deallocate it. */
          inseg.p = NULL;
 8014a5c:	4b47      	ldr	r3, [pc, #284]	; (8014b7c <tcp_receive+0xb10>)
 8014a5e:	2200      	movs	r2, #0
 8014a60:	605a      	str	r2, [r3, #4]
        }
        if (TCPH_FLAGS(inseg.tcphdr) & TCP_FIN) {
 8014a62:	4b46      	ldr	r3, [pc, #280]	; (8014b7c <tcp_receive+0xb10>)
 8014a64:	68db      	ldr	r3, [r3, #12]
 8014a66:	899b      	ldrh	r3, [r3, #12]
 8014a68:	b29b      	uxth	r3, r3
 8014a6a:	4618      	mov	r0, r3
 8014a6c:	f7fa fe36 	bl	800f6dc <lwip_htons>
 8014a70:	4603      	mov	r3, r0
 8014a72:	b2db      	uxtb	r3, r3
 8014a74:	f003 0301 	and.w	r3, r3, #1
 8014a78:	2b00      	cmp	r3, #0
 8014a7a:	f000 80b8 	beq.w	8014bee <tcp_receive+0xb82>
          LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_receive: received FIN.\n"));
          recv_flags |= TF_GOT_FIN;
 8014a7e:	4b45      	ldr	r3, [pc, #276]	; (8014b94 <tcp_receive+0xb28>)
 8014a80:	781b      	ldrb	r3, [r3, #0]
 8014a82:	f043 0320 	orr.w	r3, r3, #32
 8014a86:	b2da      	uxtb	r2, r3
 8014a88:	4b42      	ldr	r3, [pc, #264]	; (8014b94 <tcp_receive+0xb28>)
 8014a8a:	701a      	strb	r2, [r3, #0]
        }

#if TCP_QUEUE_OOSEQ
        /* We now check if we have segments on the ->ooseq queue that
           are now in sequence. */
        while (pcb->ooseq != NULL &&
 8014a8c:	e0af      	b.n	8014bee <tcp_receive+0xb82>
               pcb->ooseq->tcphdr->seqno == pcb->rcv_nxt) {

          struct tcp_seg *cseg = pcb->ooseq;
 8014a8e:	687b      	ldr	r3, [r7, #4]
 8014a90:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8014a92:	60bb      	str	r3, [r7, #8]
          seqno = pcb->ooseq->tcphdr->seqno;
 8014a94:	687b      	ldr	r3, [r7, #4]
 8014a96:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8014a98:	68db      	ldr	r3, [r3, #12]
 8014a9a:	685b      	ldr	r3, [r3, #4]
 8014a9c:	4a36      	ldr	r2, [pc, #216]	; (8014b78 <tcp_receive+0xb0c>)
 8014a9e:	6013      	str	r3, [r2, #0]

          pcb->rcv_nxt += TCP_TCPLEN(cseg);
 8014aa0:	68bb      	ldr	r3, [r7, #8]
 8014aa2:	891b      	ldrh	r3, [r3, #8]
 8014aa4:	461c      	mov	r4, r3
 8014aa6:	68bb      	ldr	r3, [r7, #8]
 8014aa8:	68db      	ldr	r3, [r3, #12]
 8014aaa:	899b      	ldrh	r3, [r3, #12]
 8014aac:	b29b      	uxth	r3, r3
 8014aae:	4618      	mov	r0, r3
 8014ab0:	f7fa fe14 	bl	800f6dc <lwip_htons>
 8014ab4:	4603      	mov	r3, r0
 8014ab6:	b2db      	uxtb	r3, r3
 8014ab8:	f003 0303 	and.w	r3, r3, #3
 8014abc:	2b00      	cmp	r3, #0
 8014abe:	d001      	beq.n	8014ac4 <tcp_receive+0xa58>
 8014ac0:	2301      	movs	r3, #1
 8014ac2:	e000      	b.n	8014ac6 <tcp_receive+0xa5a>
 8014ac4:	2300      	movs	r3, #0
 8014ac6:	191a      	adds	r2, r3, r4
 8014ac8:	687b      	ldr	r3, [r7, #4]
 8014aca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8014acc:	441a      	add	r2, r3
 8014ace:	687b      	ldr	r3, [r7, #4]
 8014ad0:	625a      	str	r2, [r3, #36]	; 0x24
          LWIP_ASSERT("tcp_receive: ooseq tcplen > rcv_wnd\n",
 8014ad2:	687b      	ldr	r3, [r7, #4]
 8014ad4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8014ad6:	461c      	mov	r4, r3
 8014ad8:	68bb      	ldr	r3, [r7, #8]
 8014ada:	891b      	ldrh	r3, [r3, #8]
 8014adc:	461d      	mov	r5, r3
 8014ade:	68bb      	ldr	r3, [r7, #8]
 8014ae0:	68db      	ldr	r3, [r3, #12]
 8014ae2:	899b      	ldrh	r3, [r3, #12]
 8014ae4:	b29b      	uxth	r3, r3
 8014ae6:	4618      	mov	r0, r3
 8014ae8:	f7fa fdf8 	bl	800f6dc <lwip_htons>
 8014aec:	4603      	mov	r3, r0
 8014aee:	b2db      	uxtb	r3, r3
 8014af0:	f003 0303 	and.w	r3, r3, #3
 8014af4:	2b00      	cmp	r3, #0
 8014af6:	d001      	beq.n	8014afc <tcp_receive+0xa90>
 8014af8:	2301      	movs	r3, #1
 8014afa:	e000      	b.n	8014afe <tcp_receive+0xa92>
 8014afc:	2300      	movs	r3, #0
 8014afe:	442b      	add	r3, r5
 8014b00:	429c      	cmp	r4, r3
 8014b02:	d206      	bcs.n	8014b12 <tcp_receive+0xaa6>
 8014b04:	4b1e      	ldr	r3, [pc, #120]	; (8014b80 <tcp_receive+0xb14>)
 8014b06:	f240 622b 	movw	r2, #1579	; 0x62b
 8014b0a:	4923      	ldr	r1, [pc, #140]	; (8014b98 <tcp_receive+0xb2c>)
 8014b0c:	481e      	ldr	r0, [pc, #120]	; (8014b88 <tcp_receive+0xb1c>)
 8014b0e:	f005 f89f 	bl	8019c50 <iprintf>
                      pcb->rcv_wnd >= TCP_TCPLEN(cseg));
          pcb->rcv_wnd -= TCP_TCPLEN(cseg);
 8014b12:	68bb      	ldr	r3, [r7, #8]
 8014b14:	891b      	ldrh	r3, [r3, #8]
 8014b16:	461c      	mov	r4, r3
 8014b18:	68bb      	ldr	r3, [r7, #8]
 8014b1a:	68db      	ldr	r3, [r3, #12]
 8014b1c:	899b      	ldrh	r3, [r3, #12]
 8014b1e:	b29b      	uxth	r3, r3
 8014b20:	4618      	mov	r0, r3
 8014b22:	f7fa fddb 	bl	800f6dc <lwip_htons>
 8014b26:	4603      	mov	r3, r0
 8014b28:	b2db      	uxtb	r3, r3
 8014b2a:	f003 0303 	and.w	r3, r3, #3
 8014b2e:	2b00      	cmp	r3, #0
 8014b30:	d001      	beq.n	8014b36 <tcp_receive+0xaca>
 8014b32:	2301      	movs	r3, #1
 8014b34:	e000      	b.n	8014b38 <tcp_receive+0xacc>
 8014b36:	2300      	movs	r3, #0
 8014b38:	1919      	adds	r1, r3, r4
 8014b3a:	687b      	ldr	r3, [r7, #4]
 8014b3c:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 8014b3e:	b28b      	uxth	r3, r1
 8014b40:	1ad3      	subs	r3, r2, r3
 8014b42:	b29a      	uxth	r2, r3
 8014b44:	687b      	ldr	r3, [r7, #4]
 8014b46:	851a      	strh	r2, [r3, #40]	; 0x28

          tcp_update_rcv_ann_wnd(pcb);
 8014b48:	6878      	ldr	r0, [r7, #4]
 8014b4a:	f7fc ff3f 	bl	80119cc <tcp_update_rcv_ann_wnd>

          if (cseg->p->tot_len > 0) {
 8014b4e:	68bb      	ldr	r3, [r7, #8]
 8014b50:	685b      	ldr	r3, [r3, #4]
 8014b52:	891b      	ldrh	r3, [r3, #8]
 8014b54:	2b00      	cmp	r3, #0
 8014b56:	d028      	beq.n	8014baa <tcp_receive+0xb3e>
            /* Chain this pbuf onto the pbuf that we will pass to
               the application. */
            /* With window scaling, this can overflow recv_data->tot_len, but
               that's not a problem since we explicitly fix that before passing
               recv_data to the application. */
            if (recv_data) {
 8014b58:	4b0d      	ldr	r3, [pc, #52]	; (8014b90 <tcp_receive+0xb24>)
 8014b5a:	681b      	ldr	r3, [r3, #0]
 8014b5c:	2b00      	cmp	r3, #0
 8014b5e:	d01d      	beq.n	8014b9c <tcp_receive+0xb30>
              pbuf_cat(recv_data, cseg->p);
 8014b60:	4b0b      	ldr	r3, [pc, #44]	; (8014b90 <tcp_receive+0xb24>)
 8014b62:	681a      	ldr	r2, [r3, #0]
 8014b64:	68bb      	ldr	r3, [r7, #8]
 8014b66:	685b      	ldr	r3, [r3, #4]
 8014b68:	4619      	mov	r1, r3
 8014b6a:	4610      	mov	r0, r2
 8014b6c:	f7fc fa5c 	bl	8011028 <pbuf_cat>
 8014b70:	e018      	b.n	8014ba4 <tcp_receive+0xb38>
 8014b72:	bf00      	nop
 8014b74:	2000711a 	.word	0x2000711a
 8014b78:	20007110 	.word	0x20007110
 8014b7c:	200070f0 	.word	0x200070f0
 8014b80:	0801d77c 	.word	0x0801d77c
 8014b84:	0801db5c 	.word	0x0801db5c
 8014b88:	0801d7c8 	.word	0x0801d7c8
 8014b8c:	0801db98 	.word	0x0801db98
 8014b90:	20007120 	.word	0x20007120
 8014b94:	2000711d 	.word	0x2000711d
 8014b98:	0801dbb8 	.word	0x0801dbb8
            } else {
              recv_data = cseg->p;
 8014b9c:	68bb      	ldr	r3, [r7, #8]
 8014b9e:	685b      	ldr	r3, [r3, #4]
 8014ba0:	4a70      	ldr	r2, [pc, #448]	; (8014d64 <tcp_receive+0xcf8>)
 8014ba2:	6013      	str	r3, [r2, #0]
            }
            cseg->p = NULL;
 8014ba4:	68bb      	ldr	r3, [r7, #8]
 8014ba6:	2200      	movs	r2, #0
 8014ba8:	605a      	str	r2, [r3, #4]
          }
          if (TCPH_FLAGS(cseg->tcphdr) & TCP_FIN) {
 8014baa:	68bb      	ldr	r3, [r7, #8]
 8014bac:	68db      	ldr	r3, [r3, #12]
 8014bae:	899b      	ldrh	r3, [r3, #12]
 8014bb0:	b29b      	uxth	r3, r3
 8014bb2:	4618      	mov	r0, r3
 8014bb4:	f7fa fd92 	bl	800f6dc <lwip_htons>
 8014bb8:	4603      	mov	r3, r0
 8014bba:	b2db      	uxtb	r3, r3
 8014bbc:	f003 0301 	and.w	r3, r3, #1
 8014bc0:	2b00      	cmp	r3, #0
 8014bc2:	d00d      	beq.n	8014be0 <tcp_receive+0xb74>
            LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_receive: dequeued FIN.\n"));
            recv_flags |= TF_GOT_FIN;
 8014bc4:	4b68      	ldr	r3, [pc, #416]	; (8014d68 <tcp_receive+0xcfc>)
 8014bc6:	781b      	ldrb	r3, [r3, #0]
 8014bc8:	f043 0320 	orr.w	r3, r3, #32
 8014bcc:	b2da      	uxtb	r2, r3
 8014bce:	4b66      	ldr	r3, [pc, #408]	; (8014d68 <tcp_receive+0xcfc>)
 8014bd0:	701a      	strb	r2, [r3, #0]
            if (pcb->state == ESTABLISHED) { /* force passive close or we can move to active close */
 8014bd2:	687b      	ldr	r3, [r7, #4]
 8014bd4:	7d1b      	ldrb	r3, [r3, #20]
 8014bd6:	2b04      	cmp	r3, #4
 8014bd8:	d102      	bne.n	8014be0 <tcp_receive+0xb74>
              pcb->state = CLOSE_WAIT;
 8014bda:	687b      	ldr	r3, [r7, #4]
 8014bdc:	2207      	movs	r2, #7
 8014bde:	751a      	strb	r2, [r3, #20]
            }
          }

          pcb->ooseq = cseg->next;
 8014be0:	68bb      	ldr	r3, [r7, #8]
 8014be2:	681a      	ldr	r2, [r3, #0]
 8014be4:	687b      	ldr	r3, [r7, #4]
 8014be6:	675a      	str	r2, [r3, #116]	; 0x74
          tcp_seg_free(cseg);
 8014be8:	68b8      	ldr	r0, [r7, #8]
 8014bea:	f7fd fbd2 	bl	8012392 <tcp_seg_free>
        while (pcb->ooseq != NULL &&
 8014bee:	687b      	ldr	r3, [r7, #4]
 8014bf0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8014bf2:	2b00      	cmp	r3, #0
 8014bf4:	d008      	beq.n	8014c08 <tcp_receive+0xb9c>
               pcb->ooseq->tcphdr->seqno == pcb->rcv_nxt) {
 8014bf6:	687b      	ldr	r3, [r7, #4]
 8014bf8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8014bfa:	68db      	ldr	r3, [r3, #12]
 8014bfc:	685a      	ldr	r2, [r3, #4]
 8014bfe:	687b      	ldr	r3, [r7, #4]
 8014c00:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        while (pcb->ooseq != NULL &&
 8014c02:	429a      	cmp	r2, r3
 8014c04:	f43f af43 	beq.w	8014a8e <tcp_receive+0xa22>
#endif /* LWIP_TCP_SACK_OUT */
#endif /* TCP_QUEUE_OOSEQ */


        /* Acknowledge the segment(s). */
        tcp_ack(pcb);
 8014c08:	687b      	ldr	r3, [r7, #4]
 8014c0a:	8b5b      	ldrh	r3, [r3, #26]
 8014c0c:	f003 0301 	and.w	r3, r3, #1
 8014c10:	2b00      	cmp	r3, #0
 8014c12:	d00e      	beq.n	8014c32 <tcp_receive+0xbc6>
 8014c14:	687b      	ldr	r3, [r7, #4]
 8014c16:	8b5b      	ldrh	r3, [r3, #26]
 8014c18:	f023 0301 	bic.w	r3, r3, #1
 8014c1c:	b29a      	uxth	r2, r3
 8014c1e:	687b      	ldr	r3, [r7, #4]
 8014c20:	835a      	strh	r2, [r3, #26]
 8014c22:	687b      	ldr	r3, [r7, #4]
 8014c24:	8b5b      	ldrh	r3, [r3, #26]
 8014c26:	f043 0302 	orr.w	r3, r3, #2
 8014c2a:	b29a      	uxth	r2, r3
 8014c2c:	687b      	ldr	r3, [r7, #4]
 8014c2e:	835a      	strh	r2, [r3, #26]
      if (pcb->rcv_nxt == seqno) {
 8014c30:	e188      	b.n	8014f44 <tcp_receive+0xed8>
        tcp_ack(pcb);
 8014c32:	687b      	ldr	r3, [r7, #4]
 8014c34:	8b5b      	ldrh	r3, [r3, #26]
 8014c36:	f043 0301 	orr.w	r3, r3, #1
 8014c3a:	b29a      	uxth	r2, r3
 8014c3c:	687b      	ldr	r3, [r7, #4]
 8014c3e:	835a      	strh	r2, [r3, #26]
      if (pcb->rcv_nxt == seqno) {
 8014c40:	e180      	b.n	8014f44 <tcp_receive+0xed8>
      } else {
        /* We get here if the incoming segment is out-of-sequence. */

#if TCP_QUEUE_OOSEQ
        /* We queue the segment on the ->ooseq queue. */
        if (pcb->ooseq == NULL) {
 8014c42:	687b      	ldr	r3, [r7, #4]
 8014c44:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8014c46:	2b00      	cmp	r3, #0
 8014c48:	d106      	bne.n	8014c58 <tcp_receive+0xbec>
          pcb->ooseq = tcp_seg_copy(&inseg);
 8014c4a:	4848      	ldr	r0, [pc, #288]	; (8014d6c <tcp_receive+0xd00>)
 8014c4c:	f7fd fbba 	bl	80123c4 <tcp_seg_copy>
 8014c50:	4602      	mov	r2, r0
 8014c52:	687b      	ldr	r3, [r7, #4]
 8014c54:	675a      	str	r2, [r3, #116]	; 0x74
 8014c56:	e16d      	b.n	8014f34 <tcp_receive+0xec8>
#if LWIP_TCP_SACK_OUT
          /* This is the left edge of the lowest possible SACK range.
             It may start before the newly received segment (possibly adjusted below). */
          u32_t sackbeg = TCP_SEQ_LT(seqno, pcb->ooseq->tcphdr->seqno) ? seqno : pcb->ooseq->tcphdr->seqno;
#endif /* LWIP_TCP_SACK_OUT */
          struct tcp_seg *next, *prev = NULL;
 8014c58:	2300      	movs	r3, #0
 8014c5a:	637b      	str	r3, [r7, #52]	; 0x34
          for (next = pcb->ooseq; next != NULL; next = next->next) {
 8014c5c:	687b      	ldr	r3, [r7, #4]
 8014c5e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8014c60:	63bb      	str	r3, [r7, #56]	; 0x38
 8014c62:	e157      	b.n	8014f14 <tcp_receive+0xea8>
            if (seqno == next->tcphdr->seqno) {
 8014c64:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8014c66:	68db      	ldr	r3, [r3, #12]
 8014c68:	685a      	ldr	r2, [r3, #4]
 8014c6a:	4b41      	ldr	r3, [pc, #260]	; (8014d70 <tcp_receive+0xd04>)
 8014c6c:	681b      	ldr	r3, [r3, #0]
 8014c6e:	429a      	cmp	r2, r3
 8014c70:	d11d      	bne.n	8014cae <tcp_receive+0xc42>
              /* The sequence number of the incoming segment is the
                 same as the sequence number of the segment on
                 ->ooseq. We check the lengths to see which one to
                 discard. */
              if (inseg.len > next->len) {
 8014c72:	4b3e      	ldr	r3, [pc, #248]	; (8014d6c <tcp_receive+0xd00>)
 8014c74:	891a      	ldrh	r2, [r3, #8]
 8014c76:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8014c78:	891b      	ldrh	r3, [r3, #8]
 8014c7a:	429a      	cmp	r2, r3
 8014c7c:	f240 814f 	bls.w	8014f1e <tcp_receive+0xeb2>
                /* The incoming segment is larger than the old
                   segment. We replace some segments with the new
                   one. */
                struct tcp_seg *cseg = tcp_seg_copy(&inseg);
 8014c80:	483a      	ldr	r0, [pc, #232]	; (8014d6c <tcp_receive+0xd00>)
 8014c82:	f7fd fb9f 	bl	80123c4 <tcp_seg_copy>
 8014c86:	6178      	str	r0, [r7, #20]
                if (cseg != NULL) {
 8014c88:	697b      	ldr	r3, [r7, #20]
 8014c8a:	2b00      	cmp	r3, #0
 8014c8c:	f000 8149 	beq.w	8014f22 <tcp_receive+0xeb6>
                  if (prev != NULL) {
 8014c90:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8014c92:	2b00      	cmp	r3, #0
 8014c94:	d003      	beq.n	8014c9e <tcp_receive+0xc32>
                    prev->next = cseg;
 8014c96:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8014c98:	697a      	ldr	r2, [r7, #20]
 8014c9a:	601a      	str	r2, [r3, #0]
 8014c9c:	e002      	b.n	8014ca4 <tcp_receive+0xc38>
                  } else {
                    pcb->ooseq = cseg;
 8014c9e:	687b      	ldr	r3, [r7, #4]
 8014ca0:	697a      	ldr	r2, [r7, #20]
 8014ca2:	675a      	str	r2, [r3, #116]	; 0x74
                  }
                  tcp_oos_insert_segment(cseg, next);
 8014ca4:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8014ca6:	6978      	ldr	r0, [r7, #20]
 8014ca8:	f7ff f8dc 	bl	8013e64 <tcp_oos_insert_segment>
                }
                break;
 8014cac:	e139      	b.n	8014f22 <tcp_receive+0xeb6>
                   segment was smaller than the old one; in either
                   case, we ditch the incoming segment. */
                break;
              }
            } else {
              if (prev == NULL) {
 8014cae:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8014cb0:	2b00      	cmp	r3, #0
 8014cb2:	d117      	bne.n	8014ce4 <tcp_receive+0xc78>
                if (TCP_SEQ_LT(seqno, next->tcphdr->seqno)) {
 8014cb4:	4b2e      	ldr	r3, [pc, #184]	; (8014d70 <tcp_receive+0xd04>)
 8014cb6:	681a      	ldr	r2, [r3, #0]
 8014cb8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8014cba:	68db      	ldr	r3, [r3, #12]
 8014cbc:	685b      	ldr	r3, [r3, #4]
 8014cbe:	1ad3      	subs	r3, r2, r3
 8014cc0:	2b00      	cmp	r3, #0
 8014cc2:	da57      	bge.n	8014d74 <tcp_receive+0xd08>
                  /* The sequence number of the incoming segment is lower
                     than the sequence number of the first segment on the
                     queue. We put the incoming segment first on the
                     queue. */
                  struct tcp_seg *cseg = tcp_seg_copy(&inseg);
 8014cc4:	4829      	ldr	r0, [pc, #164]	; (8014d6c <tcp_receive+0xd00>)
 8014cc6:	f7fd fb7d 	bl	80123c4 <tcp_seg_copy>
 8014cca:	61b8      	str	r0, [r7, #24]
                  if (cseg != NULL) {
 8014ccc:	69bb      	ldr	r3, [r7, #24]
 8014cce:	2b00      	cmp	r3, #0
 8014cd0:	f000 8129 	beq.w	8014f26 <tcp_receive+0xeba>
                    pcb->ooseq = cseg;
 8014cd4:	687b      	ldr	r3, [r7, #4]
 8014cd6:	69ba      	ldr	r2, [r7, #24]
 8014cd8:	675a      	str	r2, [r3, #116]	; 0x74
                    tcp_oos_insert_segment(cseg, next);
 8014cda:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8014cdc:	69b8      	ldr	r0, [r7, #24]
 8014cde:	f7ff f8c1 	bl	8013e64 <tcp_oos_insert_segment>
                  }
                  break;
 8014ce2:	e120      	b.n	8014f26 <tcp_receive+0xeba>
                }
              } else {
                /*if (TCP_SEQ_LT(prev->tcphdr->seqno, seqno) &&
                  TCP_SEQ_LT(seqno, next->tcphdr->seqno)) {*/
                if (TCP_SEQ_BETWEEN(seqno, prev->tcphdr->seqno + 1, next->tcphdr->seqno - 1)) {
 8014ce4:	4b22      	ldr	r3, [pc, #136]	; (8014d70 <tcp_receive+0xd04>)
 8014ce6:	681a      	ldr	r2, [r3, #0]
 8014ce8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8014cea:	68db      	ldr	r3, [r3, #12]
 8014cec:	685b      	ldr	r3, [r3, #4]
 8014cee:	1ad3      	subs	r3, r2, r3
 8014cf0:	3b01      	subs	r3, #1
 8014cf2:	2b00      	cmp	r3, #0
 8014cf4:	db3e      	blt.n	8014d74 <tcp_receive+0xd08>
 8014cf6:	4b1e      	ldr	r3, [pc, #120]	; (8014d70 <tcp_receive+0xd04>)
 8014cf8:	681a      	ldr	r2, [r3, #0]
 8014cfa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8014cfc:	68db      	ldr	r3, [r3, #12]
 8014cfe:	685b      	ldr	r3, [r3, #4]
 8014d00:	1ad3      	subs	r3, r2, r3
 8014d02:	3301      	adds	r3, #1
 8014d04:	2b00      	cmp	r3, #0
 8014d06:	dc35      	bgt.n	8014d74 <tcp_receive+0xd08>
                  /* The sequence number of the incoming segment is in
                     between the sequence numbers of the previous and
                     the next segment on ->ooseq. We trim trim the previous
                     segment, delete next segments that included in received segment
                     and trim received, if needed. */
                  struct tcp_seg *cseg = tcp_seg_copy(&inseg);
 8014d08:	4818      	ldr	r0, [pc, #96]	; (8014d6c <tcp_receive+0xd00>)
 8014d0a:	f7fd fb5b 	bl	80123c4 <tcp_seg_copy>
 8014d0e:	61f8      	str	r0, [r7, #28]
                  if (cseg != NULL) {
 8014d10:	69fb      	ldr	r3, [r7, #28]
 8014d12:	2b00      	cmp	r3, #0
 8014d14:	f000 8109 	beq.w	8014f2a <tcp_receive+0xebe>
                    if (TCP_SEQ_GT(prev->tcphdr->seqno + prev->len, seqno)) {
 8014d18:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8014d1a:	68db      	ldr	r3, [r3, #12]
 8014d1c:	685b      	ldr	r3, [r3, #4]
 8014d1e:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8014d20:	8912      	ldrh	r2, [r2, #8]
 8014d22:	441a      	add	r2, r3
 8014d24:	4b12      	ldr	r3, [pc, #72]	; (8014d70 <tcp_receive+0xd04>)
 8014d26:	681b      	ldr	r3, [r3, #0]
 8014d28:	1ad3      	subs	r3, r2, r3
 8014d2a:	2b00      	cmp	r3, #0
 8014d2c:	dd12      	ble.n	8014d54 <tcp_receive+0xce8>
                      /* We need to trim the prev segment. */
                      prev->len = (u16_t)(seqno - prev->tcphdr->seqno);
 8014d2e:	4b10      	ldr	r3, [pc, #64]	; (8014d70 <tcp_receive+0xd04>)
 8014d30:	681b      	ldr	r3, [r3, #0]
 8014d32:	b29a      	uxth	r2, r3
 8014d34:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8014d36:	68db      	ldr	r3, [r3, #12]
 8014d38:	685b      	ldr	r3, [r3, #4]
 8014d3a:	b29b      	uxth	r3, r3
 8014d3c:	1ad3      	subs	r3, r2, r3
 8014d3e:	b29a      	uxth	r2, r3
 8014d40:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8014d42:	811a      	strh	r2, [r3, #8]
                      pbuf_realloc(prev->p, prev->len);
 8014d44:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8014d46:	685a      	ldr	r2, [r3, #4]
 8014d48:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8014d4a:	891b      	ldrh	r3, [r3, #8]
 8014d4c:	4619      	mov	r1, r3
 8014d4e:	4610      	mov	r0, r2
 8014d50:	f7fb ff24 	bl	8010b9c <pbuf_realloc>
                    }
                    prev->next = cseg;
 8014d54:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8014d56:	69fa      	ldr	r2, [r7, #28]
 8014d58:	601a      	str	r2, [r3, #0]
                    tcp_oos_insert_segment(cseg, next);
 8014d5a:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8014d5c:	69f8      	ldr	r0, [r7, #28]
 8014d5e:	f7ff f881 	bl	8013e64 <tcp_oos_insert_segment>
                  }
                  break;
 8014d62:	e0e2      	b.n	8014f2a <tcp_receive+0xebe>
 8014d64:	20007120 	.word	0x20007120
 8014d68:	2000711d 	.word	0x2000711d
 8014d6c:	200070f0 	.word	0x200070f0
 8014d70:	20007110 	.word	0x20007110
#endif /* LWIP_TCP_SACK_OUT */

              /* We don't use 'prev' below, so let's set it to current 'next'.
                 This way even if we break the loop below, 'prev' will be pointing
                 at the segment right in front of the newly added one. */
              prev = next;
 8014d74:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8014d76:	637b      	str	r3, [r7, #52]	; 0x34

              /* If the "next" segment is the last segment on the
                 ooseq queue, we add the incoming segment to the end
                 of the list. */
              if (next->next == NULL &&
 8014d78:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8014d7a:	681b      	ldr	r3, [r3, #0]
 8014d7c:	2b00      	cmp	r3, #0
 8014d7e:	f040 80c6 	bne.w	8014f0e <tcp_receive+0xea2>
                  TCP_SEQ_GT(seqno, next->tcphdr->seqno)) {
 8014d82:	4b80      	ldr	r3, [pc, #512]	; (8014f84 <tcp_receive+0xf18>)
 8014d84:	681a      	ldr	r2, [r3, #0]
 8014d86:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8014d88:	68db      	ldr	r3, [r3, #12]
 8014d8a:	685b      	ldr	r3, [r3, #4]
 8014d8c:	1ad3      	subs	r3, r2, r3
              if (next->next == NULL &&
 8014d8e:	2b00      	cmp	r3, #0
 8014d90:	f340 80bd 	ble.w	8014f0e <tcp_receive+0xea2>
                if (TCPH_FLAGS(next->tcphdr) & TCP_FIN) {
 8014d94:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8014d96:	68db      	ldr	r3, [r3, #12]
 8014d98:	899b      	ldrh	r3, [r3, #12]
 8014d9a:	b29b      	uxth	r3, r3
 8014d9c:	4618      	mov	r0, r3
 8014d9e:	f7fa fc9d 	bl	800f6dc <lwip_htons>
 8014da2:	4603      	mov	r3, r0
 8014da4:	b2db      	uxtb	r3, r3
 8014da6:	f003 0301 	and.w	r3, r3, #1
 8014daa:	2b00      	cmp	r3, #0
 8014dac:	f040 80bf 	bne.w	8014f2e <tcp_receive+0xec2>
                  /* segment "next" already contains all data */
                  break;
                }
                next->next = tcp_seg_copy(&inseg);
 8014db0:	4875      	ldr	r0, [pc, #468]	; (8014f88 <tcp_receive+0xf1c>)
 8014db2:	f7fd fb07 	bl	80123c4 <tcp_seg_copy>
 8014db6:	4602      	mov	r2, r0
 8014db8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8014dba:	601a      	str	r2, [r3, #0]
                if (next->next != NULL) {
 8014dbc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8014dbe:	681b      	ldr	r3, [r3, #0]
 8014dc0:	2b00      	cmp	r3, #0
 8014dc2:	f000 80b6 	beq.w	8014f32 <tcp_receive+0xec6>
                  if (TCP_SEQ_GT(next->tcphdr->seqno + next->len, seqno)) {
 8014dc6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8014dc8:	68db      	ldr	r3, [r3, #12]
 8014dca:	685b      	ldr	r3, [r3, #4]
 8014dcc:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8014dce:	8912      	ldrh	r2, [r2, #8]
 8014dd0:	441a      	add	r2, r3
 8014dd2:	4b6c      	ldr	r3, [pc, #432]	; (8014f84 <tcp_receive+0xf18>)
 8014dd4:	681b      	ldr	r3, [r3, #0]
 8014dd6:	1ad3      	subs	r3, r2, r3
 8014dd8:	2b00      	cmp	r3, #0
 8014dda:	dd12      	ble.n	8014e02 <tcp_receive+0xd96>
                    /* We need to trim the last segment. */
                    next->len = (u16_t)(seqno - next->tcphdr->seqno);
 8014ddc:	4b69      	ldr	r3, [pc, #420]	; (8014f84 <tcp_receive+0xf18>)
 8014dde:	681b      	ldr	r3, [r3, #0]
 8014de0:	b29a      	uxth	r2, r3
 8014de2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8014de4:	68db      	ldr	r3, [r3, #12]
 8014de6:	685b      	ldr	r3, [r3, #4]
 8014de8:	b29b      	uxth	r3, r3
 8014dea:	1ad3      	subs	r3, r2, r3
 8014dec:	b29a      	uxth	r2, r3
 8014dee:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8014df0:	811a      	strh	r2, [r3, #8]
                    pbuf_realloc(next->p, next->len);
 8014df2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8014df4:	685a      	ldr	r2, [r3, #4]
 8014df6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8014df8:	891b      	ldrh	r3, [r3, #8]
 8014dfa:	4619      	mov	r1, r3
 8014dfc:	4610      	mov	r0, r2
 8014dfe:	f7fb fecd 	bl	8010b9c <pbuf_realloc>
                  }
                  /* check if the remote side overruns our receive window */
                  if (TCP_SEQ_GT((u32_t)tcplen + seqno, pcb->rcv_nxt + (u32_t)pcb->rcv_wnd)) {
 8014e02:	4b62      	ldr	r3, [pc, #392]	; (8014f8c <tcp_receive+0xf20>)
 8014e04:	881b      	ldrh	r3, [r3, #0]
 8014e06:	461a      	mov	r2, r3
 8014e08:	4b5e      	ldr	r3, [pc, #376]	; (8014f84 <tcp_receive+0xf18>)
 8014e0a:	681b      	ldr	r3, [r3, #0]
 8014e0c:	441a      	add	r2, r3
 8014e0e:	687b      	ldr	r3, [r7, #4]
 8014e10:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8014e12:	6879      	ldr	r1, [r7, #4]
 8014e14:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 8014e16:	440b      	add	r3, r1
 8014e18:	1ad3      	subs	r3, r2, r3
 8014e1a:	2b00      	cmp	r3, #0
 8014e1c:	f340 8089 	ble.w	8014f32 <tcp_receive+0xec6>
                    LWIP_DEBUGF(TCP_INPUT_DEBUG,
                                ("tcp_receive: other end overran receive window"
                                 "seqno %"U32_F" len %"U16_F" right edge %"U32_F"\n",
                                 seqno, tcplen, pcb->rcv_nxt + pcb->rcv_wnd));
                    if (TCPH_FLAGS(next->next->tcphdr) & TCP_FIN) {
 8014e20:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8014e22:	681b      	ldr	r3, [r3, #0]
 8014e24:	68db      	ldr	r3, [r3, #12]
 8014e26:	899b      	ldrh	r3, [r3, #12]
 8014e28:	b29b      	uxth	r3, r3
 8014e2a:	4618      	mov	r0, r3
 8014e2c:	f7fa fc56 	bl	800f6dc <lwip_htons>
 8014e30:	4603      	mov	r3, r0
 8014e32:	b2db      	uxtb	r3, r3
 8014e34:	f003 0301 	and.w	r3, r3, #1
 8014e38:	2b00      	cmp	r3, #0
 8014e3a:	d022      	beq.n	8014e82 <tcp_receive+0xe16>
                      /* Must remove the FIN from the header as we're trimming
                       * that byte of sequence-space from the packet */
                      TCPH_FLAGS_SET(next->next->tcphdr, TCPH_FLAGS(next->next->tcphdr) & ~TCP_FIN);
 8014e3c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8014e3e:	681b      	ldr	r3, [r3, #0]
 8014e40:	68db      	ldr	r3, [r3, #12]
 8014e42:	899b      	ldrh	r3, [r3, #12]
 8014e44:	b29b      	uxth	r3, r3
 8014e46:	b21b      	sxth	r3, r3
 8014e48:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 8014e4c:	b21c      	sxth	r4, r3
 8014e4e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8014e50:	681b      	ldr	r3, [r3, #0]
 8014e52:	68db      	ldr	r3, [r3, #12]
 8014e54:	899b      	ldrh	r3, [r3, #12]
 8014e56:	b29b      	uxth	r3, r3
 8014e58:	4618      	mov	r0, r3
 8014e5a:	f7fa fc3f 	bl	800f6dc <lwip_htons>
 8014e5e:	4603      	mov	r3, r0
 8014e60:	b2db      	uxtb	r3, r3
 8014e62:	b29b      	uxth	r3, r3
 8014e64:	f003 033e 	and.w	r3, r3, #62	; 0x3e
 8014e68:	b29b      	uxth	r3, r3
 8014e6a:	4618      	mov	r0, r3
 8014e6c:	f7fa fc36 	bl	800f6dc <lwip_htons>
 8014e70:	4603      	mov	r3, r0
 8014e72:	b21b      	sxth	r3, r3
 8014e74:	4323      	orrs	r3, r4
 8014e76:	b21a      	sxth	r2, r3
 8014e78:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8014e7a:	681b      	ldr	r3, [r3, #0]
 8014e7c:	68db      	ldr	r3, [r3, #12]
 8014e7e:	b292      	uxth	r2, r2
 8014e80:	819a      	strh	r2, [r3, #12]
                    }
                    /* Adjust length of segment to fit in the window. */
                    next->next->len = (u16_t)(pcb->rcv_nxt + pcb->rcv_wnd - seqno);
 8014e82:	687b      	ldr	r3, [r7, #4]
 8014e84:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8014e86:	b29a      	uxth	r2, r3
 8014e88:	687b      	ldr	r3, [r7, #4]
 8014e8a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8014e8c:	4413      	add	r3, r2
 8014e8e:	b299      	uxth	r1, r3
 8014e90:	4b3c      	ldr	r3, [pc, #240]	; (8014f84 <tcp_receive+0xf18>)
 8014e92:	681b      	ldr	r3, [r3, #0]
 8014e94:	b29a      	uxth	r2, r3
 8014e96:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8014e98:	681b      	ldr	r3, [r3, #0]
 8014e9a:	1a8a      	subs	r2, r1, r2
 8014e9c:	b292      	uxth	r2, r2
 8014e9e:	811a      	strh	r2, [r3, #8]
                    pbuf_realloc(next->next->p, next->next->len);
 8014ea0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8014ea2:	681b      	ldr	r3, [r3, #0]
 8014ea4:	685a      	ldr	r2, [r3, #4]
 8014ea6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8014ea8:	681b      	ldr	r3, [r3, #0]
 8014eaa:	891b      	ldrh	r3, [r3, #8]
 8014eac:	4619      	mov	r1, r3
 8014eae:	4610      	mov	r0, r2
 8014eb0:	f7fb fe74 	bl	8010b9c <pbuf_realloc>
                    tcplen = TCP_TCPLEN(next->next);
 8014eb4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8014eb6:	681b      	ldr	r3, [r3, #0]
 8014eb8:	891c      	ldrh	r4, [r3, #8]
 8014eba:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8014ebc:	681b      	ldr	r3, [r3, #0]
 8014ebe:	68db      	ldr	r3, [r3, #12]
 8014ec0:	899b      	ldrh	r3, [r3, #12]
 8014ec2:	b29b      	uxth	r3, r3
 8014ec4:	4618      	mov	r0, r3
 8014ec6:	f7fa fc09 	bl	800f6dc <lwip_htons>
 8014eca:	4603      	mov	r3, r0
 8014ecc:	b2db      	uxtb	r3, r3
 8014ece:	f003 0303 	and.w	r3, r3, #3
 8014ed2:	2b00      	cmp	r3, #0
 8014ed4:	d001      	beq.n	8014eda <tcp_receive+0xe6e>
 8014ed6:	2301      	movs	r3, #1
 8014ed8:	e000      	b.n	8014edc <tcp_receive+0xe70>
 8014eda:	2300      	movs	r3, #0
 8014edc:	4423      	add	r3, r4
 8014ede:	b29a      	uxth	r2, r3
 8014ee0:	4b2a      	ldr	r3, [pc, #168]	; (8014f8c <tcp_receive+0xf20>)
 8014ee2:	801a      	strh	r2, [r3, #0]
                    LWIP_ASSERT("tcp_receive: segment not trimmed correctly to rcv_wnd\n",
 8014ee4:	4b29      	ldr	r3, [pc, #164]	; (8014f8c <tcp_receive+0xf20>)
 8014ee6:	881b      	ldrh	r3, [r3, #0]
 8014ee8:	461a      	mov	r2, r3
 8014eea:	4b26      	ldr	r3, [pc, #152]	; (8014f84 <tcp_receive+0xf18>)
 8014eec:	681b      	ldr	r3, [r3, #0]
 8014eee:	441a      	add	r2, r3
 8014ef0:	687b      	ldr	r3, [r7, #4]
 8014ef2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8014ef4:	6879      	ldr	r1, [r7, #4]
 8014ef6:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 8014ef8:	440b      	add	r3, r1
 8014efa:	429a      	cmp	r2, r3
 8014efc:	d019      	beq.n	8014f32 <tcp_receive+0xec6>
 8014efe:	4b24      	ldr	r3, [pc, #144]	; (8014f90 <tcp_receive+0xf24>)
 8014f00:	f44f 62df 	mov.w	r2, #1784	; 0x6f8
 8014f04:	4923      	ldr	r1, [pc, #140]	; (8014f94 <tcp_receive+0xf28>)
 8014f06:	4824      	ldr	r0, [pc, #144]	; (8014f98 <tcp_receive+0xf2c>)
 8014f08:	f004 fea2 	bl	8019c50 <iprintf>
                                (seqno + tcplen) == (pcb->rcv_nxt + pcb->rcv_wnd));
                  }
                }
                break;
 8014f0c:	e011      	b.n	8014f32 <tcp_receive+0xec6>
          for (next = pcb->ooseq; next != NULL; next = next->next) {
 8014f0e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8014f10:	681b      	ldr	r3, [r3, #0]
 8014f12:	63bb      	str	r3, [r7, #56]	; 0x38
 8014f14:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8014f16:	2b00      	cmp	r3, #0
 8014f18:	f47f aea4 	bne.w	8014c64 <tcp_receive+0xbf8>
 8014f1c:	e00a      	b.n	8014f34 <tcp_receive+0xec8>
                break;
 8014f1e:	bf00      	nop
 8014f20:	e008      	b.n	8014f34 <tcp_receive+0xec8>
                break;
 8014f22:	bf00      	nop
 8014f24:	e006      	b.n	8014f34 <tcp_receive+0xec8>
                  break;
 8014f26:	bf00      	nop
 8014f28:	e004      	b.n	8014f34 <tcp_receive+0xec8>
                  break;
 8014f2a:	bf00      	nop
 8014f2c:	e002      	b.n	8014f34 <tcp_receive+0xec8>
                  break;
 8014f2e:	bf00      	nop
 8014f30:	e000      	b.n	8014f34 <tcp_receive+0xec8>
                break;
 8014f32:	bf00      	nop
#endif /* TCP_OOSEQ_BYTES_LIMIT || TCP_OOSEQ_PBUFS_LIMIT */
#endif /* TCP_QUEUE_OOSEQ */

        /* We send the ACK packet after we've (potentially) dealt with SACKs,
           so they can be included in the acknowledgment. */
        tcp_send_empty_ack(pcb);
 8014f34:	6878      	ldr	r0, [r7, #4]
 8014f36:	f001 fa33 	bl	80163a0 <tcp_send_empty_ack>
      if (pcb->rcv_nxt == seqno) {
 8014f3a:	e003      	b.n	8014f44 <tcp_receive+0xed8>
      }
    } else {
      /* The incoming segment is not within the window. */
      tcp_send_empty_ack(pcb);
 8014f3c:	6878      	ldr	r0, [r7, #4]
 8014f3e:	f001 fa2f 	bl	80163a0 <tcp_send_empty_ack>
    if (TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt,
 8014f42:	e01a      	b.n	8014f7a <tcp_receive+0xf0e>
 8014f44:	e019      	b.n	8014f7a <tcp_receive+0xf0e>
    }
  } else {
    /* Segments with length 0 is taken care of here. Segments that
       fall out of the window are ACKed. */
    if (!TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt, pcb->rcv_nxt + pcb->rcv_wnd - 1)) {
 8014f46:	4b0f      	ldr	r3, [pc, #60]	; (8014f84 <tcp_receive+0xf18>)
 8014f48:	681a      	ldr	r2, [r3, #0]
 8014f4a:	687b      	ldr	r3, [r7, #4]
 8014f4c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8014f4e:	1ad3      	subs	r3, r2, r3
 8014f50:	2b00      	cmp	r3, #0
 8014f52:	db0a      	blt.n	8014f6a <tcp_receive+0xefe>
 8014f54:	4b0b      	ldr	r3, [pc, #44]	; (8014f84 <tcp_receive+0xf18>)
 8014f56:	681a      	ldr	r2, [r3, #0]
 8014f58:	687b      	ldr	r3, [r7, #4]
 8014f5a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8014f5c:	6879      	ldr	r1, [r7, #4]
 8014f5e:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 8014f60:	440b      	add	r3, r1
 8014f62:	1ad3      	subs	r3, r2, r3
 8014f64:	3301      	adds	r3, #1
 8014f66:	2b00      	cmp	r3, #0
 8014f68:	dd07      	ble.n	8014f7a <tcp_receive+0xf0e>
      tcp_ack_now(pcb);
 8014f6a:	687b      	ldr	r3, [r7, #4]
 8014f6c:	8b5b      	ldrh	r3, [r3, #26]
 8014f6e:	f043 0302 	orr.w	r3, r3, #2
 8014f72:	b29a      	uxth	r2, r3
 8014f74:	687b      	ldr	r3, [r7, #4]
 8014f76:	835a      	strh	r2, [r3, #26]
    }
  }
}
 8014f78:	e7ff      	b.n	8014f7a <tcp_receive+0xf0e>
 8014f7a:	bf00      	nop
 8014f7c:	3750      	adds	r7, #80	; 0x50
 8014f7e:	46bd      	mov	sp, r7
 8014f80:	bdb0      	pop	{r4, r5, r7, pc}
 8014f82:	bf00      	nop
 8014f84:	20007110 	.word	0x20007110
 8014f88:	200070f0 	.word	0x200070f0
 8014f8c:	2000711a 	.word	0x2000711a
 8014f90:	0801d77c 	.word	0x0801d77c
 8014f94:	0801db24 	.word	0x0801db24
 8014f98:	0801d7c8 	.word	0x0801d7c8

08014f9c <tcp_get_next_optbyte>:

static u8_t
tcp_get_next_optbyte(void)
{
 8014f9c:	b480      	push	{r7}
 8014f9e:	b083      	sub	sp, #12
 8014fa0:	af00      	add	r7, sp, #0
  u16_t optidx = tcp_optidx++;
 8014fa2:	4b15      	ldr	r3, [pc, #84]	; (8014ff8 <tcp_get_next_optbyte+0x5c>)
 8014fa4:	881b      	ldrh	r3, [r3, #0]
 8014fa6:	1c5a      	adds	r2, r3, #1
 8014fa8:	b291      	uxth	r1, r2
 8014faa:	4a13      	ldr	r2, [pc, #76]	; (8014ff8 <tcp_get_next_optbyte+0x5c>)
 8014fac:	8011      	strh	r1, [r2, #0]
 8014fae:	80fb      	strh	r3, [r7, #6]
  if ((tcphdr_opt2 == NULL) || (optidx < tcphdr_opt1len)) {
 8014fb0:	4b12      	ldr	r3, [pc, #72]	; (8014ffc <tcp_get_next_optbyte+0x60>)
 8014fb2:	681b      	ldr	r3, [r3, #0]
 8014fb4:	2b00      	cmp	r3, #0
 8014fb6:	d004      	beq.n	8014fc2 <tcp_get_next_optbyte+0x26>
 8014fb8:	4b11      	ldr	r3, [pc, #68]	; (8015000 <tcp_get_next_optbyte+0x64>)
 8014fba:	881b      	ldrh	r3, [r3, #0]
 8014fbc:	88fa      	ldrh	r2, [r7, #6]
 8014fbe:	429a      	cmp	r2, r3
 8014fc0:	d208      	bcs.n	8014fd4 <tcp_get_next_optbyte+0x38>
    u8_t *opts = (u8_t *)tcphdr + TCP_HLEN;
 8014fc2:	4b10      	ldr	r3, [pc, #64]	; (8015004 <tcp_get_next_optbyte+0x68>)
 8014fc4:	681b      	ldr	r3, [r3, #0]
 8014fc6:	3314      	adds	r3, #20
 8014fc8:	603b      	str	r3, [r7, #0]
    return opts[optidx];
 8014fca:	88fb      	ldrh	r3, [r7, #6]
 8014fcc:	683a      	ldr	r2, [r7, #0]
 8014fce:	4413      	add	r3, r2
 8014fd0:	781b      	ldrb	r3, [r3, #0]
 8014fd2:	e00b      	b.n	8014fec <tcp_get_next_optbyte+0x50>
  } else {
    u8_t idx = (u8_t)(optidx - tcphdr_opt1len);
 8014fd4:	88fb      	ldrh	r3, [r7, #6]
 8014fd6:	b2da      	uxtb	r2, r3
 8014fd8:	4b09      	ldr	r3, [pc, #36]	; (8015000 <tcp_get_next_optbyte+0x64>)
 8014fda:	881b      	ldrh	r3, [r3, #0]
 8014fdc:	b2db      	uxtb	r3, r3
 8014fde:	1ad3      	subs	r3, r2, r3
 8014fe0:	717b      	strb	r3, [r7, #5]
    return tcphdr_opt2[idx];
 8014fe2:	4b06      	ldr	r3, [pc, #24]	; (8014ffc <tcp_get_next_optbyte+0x60>)
 8014fe4:	681a      	ldr	r2, [r3, #0]
 8014fe6:	797b      	ldrb	r3, [r7, #5]
 8014fe8:	4413      	add	r3, r2
 8014fea:	781b      	ldrb	r3, [r3, #0]
  }
}
 8014fec:	4618      	mov	r0, r3
 8014fee:	370c      	adds	r7, #12
 8014ff0:	46bd      	mov	sp, r7
 8014ff2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014ff6:	4770      	bx	lr
 8014ff8:	2000710c 	.word	0x2000710c
 8014ffc:	20007108 	.word	0x20007108
 8015000:	20007106 	.word	0x20007106
 8015004:	20007100 	.word	0x20007100

08015008 <tcp_parseopt>:
 *
 * @param pcb the tcp_pcb for which a segment arrived
 */
static void
tcp_parseopt(struct tcp_pcb *pcb)
{
 8015008:	b580      	push	{r7, lr}
 801500a:	b084      	sub	sp, #16
 801500c:	af00      	add	r7, sp, #0
 801500e:	6078      	str	r0, [r7, #4]
  u16_t mss;
#if LWIP_TCP_TIMESTAMPS
  u32_t tsval;
#endif

  LWIP_ASSERT("tcp_parseopt: invalid pcb", pcb != NULL);
 8015010:	687b      	ldr	r3, [r7, #4]
 8015012:	2b00      	cmp	r3, #0
 8015014:	d106      	bne.n	8015024 <tcp_parseopt+0x1c>
 8015016:	4b32      	ldr	r3, [pc, #200]	; (80150e0 <tcp_parseopt+0xd8>)
 8015018:	f240 727d 	movw	r2, #1917	; 0x77d
 801501c:	4931      	ldr	r1, [pc, #196]	; (80150e4 <tcp_parseopt+0xdc>)
 801501e:	4832      	ldr	r0, [pc, #200]	; (80150e8 <tcp_parseopt+0xe0>)
 8015020:	f004 fe16 	bl	8019c50 <iprintf>

  /* Parse the TCP MSS option, if present. */
  if (tcphdr_optlen != 0) {
 8015024:	4b31      	ldr	r3, [pc, #196]	; (80150ec <tcp_parseopt+0xe4>)
 8015026:	881b      	ldrh	r3, [r3, #0]
 8015028:	2b00      	cmp	r3, #0
 801502a:	d056      	beq.n	80150da <tcp_parseopt+0xd2>
    for (tcp_optidx = 0; tcp_optidx < tcphdr_optlen; ) {
 801502c:	4b30      	ldr	r3, [pc, #192]	; (80150f0 <tcp_parseopt+0xe8>)
 801502e:	2200      	movs	r2, #0
 8015030:	801a      	strh	r2, [r3, #0]
 8015032:	e046      	b.n	80150c2 <tcp_parseopt+0xba>
      u8_t opt = tcp_get_next_optbyte();
 8015034:	f7ff ffb2 	bl	8014f9c <tcp_get_next_optbyte>
 8015038:	4603      	mov	r3, r0
 801503a:	73fb      	strb	r3, [r7, #15]
      switch (opt) {
 801503c:	7bfb      	ldrb	r3, [r7, #15]
 801503e:	2b02      	cmp	r3, #2
 8015040:	d006      	beq.n	8015050 <tcp_parseopt+0x48>
 8015042:	2b02      	cmp	r3, #2
 8015044:	dc2c      	bgt.n	80150a0 <tcp_parseopt+0x98>
 8015046:	2b00      	cmp	r3, #0
 8015048:	d042      	beq.n	80150d0 <tcp_parseopt+0xc8>
 801504a:	2b01      	cmp	r3, #1
 801504c:	d128      	bne.n	80150a0 <tcp_parseopt+0x98>
          LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: EOL\n"));
          return;
        case LWIP_TCP_OPT_NOP:
          /* NOP option. */
          LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: NOP\n"));
          break;
 801504e:	e038      	b.n	80150c2 <tcp_parseopt+0xba>
        case LWIP_TCP_OPT_MSS:
          LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: MSS\n"));
          if (tcp_get_next_optbyte() != LWIP_TCP_OPT_LEN_MSS || (tcp_optidx - 2 + LWIP_TCP_OPT_LEN_MSS) > tcphdr_optlen) {
 8015050:	f7ff ffa4 	bl	8014f9c <tcp_get_next_optbyte>
 8015054:	4603      	mov	r3, r0
 8015056:	2b04      	cmp	r3, #4
 8015058:	d13c      	bne.n	80150d4 <tcp_parseopt+0xcc>
 801505a:	4b25      	ldr	r3, [pc, #148]	; (80150f0 <tcp_parseopt+0xe8>)
 801505c:	881b      	ldrh	r3, [r3, #0]
 801505e:	3301      	adds	r3, #1
 8015060:	4a22      	ldr	r2, [pc, #136]	; (80150ec <tcp_parseopt+0xe4>)
 8015062:	8812      	ldrh	r2, [r2, #0]
 8015064:	4293      	cmp	r3, r2
 8015066:	da35      	bge.n	80150d4 <tcp_parseopt+0xcc>
            /* Bad length */
            LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: bad length\n"));
            return;
          }
          /* An MSS option with the right option length. */
          mss = (u16_t)(tcp_get_next_optbyte() << 8);
 8015068:	f7ff ff98 	bl	8014f9c <tcp_get_next_optbyte>
 801506c:	4603      	mov	r3, r0
 801506e:	b29b      	uxth	r3, r3
 8015070:	021b      	lsls	r3, r3, #8
 8015072:	81bb      	strh	r3, [r7, #12]
          mss |= tcp_get_next_optbyte();
 8015074:	f7ff ff92 	bl	8014f9c <tcp_get_next_optbyte>
 8015078:	4603      	mov	r3, r0
 801507a:	b29a      	uxth	r2, r3
 801507c:	89bb      	ldrh	r3, [r7, #12]
 801507e:	4313      	orrs	r3, r2
 8015080:	81bb      	strh	r3, [r7, #12]
          /* Limit the mss to the configured TCP_MSS and prevent division by zero */
          pcb->mss = ((mss > TCP_MSS) || (mss == 0)) ? TCP_MSS : mss;
 8015082:	89bb      	ldrh	r3, [r7, #12]
 8015084:	f240 52b4 	movw	r2, #1460	; 0x5b4
 8015088:	4293      	cmp	r3, r2
 801508a:	d804      	bhi.n	8015096 <tcp_parseopt+0x8e>
 801508c:	89bb      	ldrh	r3, [r7, #12]
 801508e:	2b00      	cmp	r3, #0
 8015090:	d001      	beq.n	8015096 <tcp_parseopt+0x8e>
 8015092:	89ba      	ldrh	r2, [r7, #12]
 8015094:	e001      	b.n	801509a <tcp_parseopt+0x92>
 8015096:	f240 52b4 	movw	r2, #1460	; 0x5b4
 801509a:	687b      	ldr	r3, [r7, #4]
 801509c:	865a      	strh	r2, [r3, #50]	; 0x32
          break;
 801509e:	e010      	b.n	80150c2 <tcp_parseopt+0xba>
          }
          break;
#endif /* LWIP_TCP_SACK_OUT */
        default:
          LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: other\n"));
          data = tcp_get_next_optbyte();
 80150a0:	f7ff ff7c 	bl	8014f9c <tcp_get_next_optbyte>
 80150a4:	4603      	mov	r3, r0
 80150a6:	72fb      	strb	r3, [r7, #11]
          if (data < 2) {
 80150a8:	7afb      	ldrb	r3, [r7, #11]
 80150aa:	2b01      	cmp	r3, #1
 80150ac:	d914      	bls.n	80150d8 <tcp_parseopt+0xd0>
               and we don't process them further. */
            return;
          }
          /* All other options have a length field, so that we easily
             can skip past them. */
          tcp_optidx += data - 2;
 80150ae:	7afb      	ldrb	r3, [r7, #11]
 80150b0:	b29a      	uxth	r2, r3
 80150b2:	4b0f      	ldr	r3, [pc, #60]	; (80150f0 <tcp_parseopt+0xe8>)
 80150b4:	881b      	ldrh	r3, [r3, #0]
 80150b6:	4413      	add	r3, r2
 80150b8:	b29b      	uxth	r3, r3
 80150ba:	3b02      	subs	r3, #2
 80150bc:	b29a      	uxth	r2, r3
 80150be:	4b0c      	ldr	r3, [pc, #48]	; (80150f0 <tcp_parseopt+0xe8>)
 80150c0:	801a      	strh	r2, [r3, #0]
    for (tcp_optidx = 0; tcp_optidx < tcphdr_optlen; ) {
 80150c2:	4b0b      	ldr	r3, [pc, #44]	; (80150f0 <tcp_parseopt+0xe8>)
 80150c4:	881a      	ldrh	r2, [r3, #0]
 80150c6:	4b09      	ldr	r3, [pc, #36]	; (80150ec <tcp_parseopt+0xe4>)
 80150c8:	881b      	ldrh	r3, [r3, #0]
 80150ca:	429a      	cmp	r2, r3
 80150cc:	d3b2      	bcc.n	8015034 <tcp_parseopt+0x2c>
 80150ce:	e004      	b.n	80150da <tcp_parseopt+0xd2>
          return;
 80150d0:	bf00      	nop
 80150d2:	e002      	b.n	80150da <tcp_parseopt+0xd2>
            return;
 80150d4:	bf00      	nop
 80150d6:	e000      	b.n	80150da <tcp_parseopt+0xd2>
            return;
 80150d8:	bf00      	nop
      }
    }
  }
}
 80150da:	3710      	adds	r7, #16
 80150dc:	46bd      	mov	sp, r7
 80150de:	bd80      	pop	{r7, pc}
 80150e0:	0801d77c 	.word	0x0801d77c
 80150e4:	0801dbe0 	.word	0x0801dbe0
 80150e8:	0801d7c8 	.word	0x0801d7c8
 80150ec:	20007104 	.word	0x20007104
 80150f0:	2000710c 	.word	0x2000710c

080150f4 <tcp_trigger_input_pcb_close>:

void
tcp_trigger_input_pcb_close(void)
{
 80150f4:	b480      	push	{r7}
 80150f6:	af00      	add	r7, sp, #0
  recv_flags |= TF_CLOSED;
 80150f8:	4b05      	ldr	r3, [pc, #20]	; (8015110 <tcp_trigger_input_pcb_close+0x1c>)
 80150fa:	781b      	ldrb	r3, [r3, #0]
 80150fc:	f043 0310 	orr.w	r3, r3, #16
 8015100:	b2da      	uxtb	r2, r3
 8015102:	4b03      	ldr	r3, [pc, #12]	; (8015110 <tcp_trigger_input_pcb_close+0x1c>)
 8015104:	701a      	strb	r2, [r3, #0]
}
 8015106:	bf00      	nop
 8015108:	46bd      	mov	sp, r7
 801510a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801510e:	4770      	bx	lr
 8015110:	2000711d 	.word	0x2000711d

08015114 <tcp_route>:
static err_t tcp_output_segment(struct tcp_seg *seg, struct tcp_pcb *pcb, struct netif *netif);

/* tcp_route: common code that returns a fixed bound netif or calls ip_route */
static struct netif *
tcp_route(const struct tcp_pcb *pcb, const ip_addr_t *src, const ip_addr_t *dst)
{
 8015114:	b580      	push	{r7, lr}
 8015116:	b084      	sub	sp, #16
 8015118:	af00      	add	r7, sp, #0
 801511a:	60f8      	str	r0, [r7, #12]
 801511c:	60b9      	str	r1, [r7, #8]
 801511e:	607a      	str	r2, [r7, #4]
  LWIP_UNUSED_ARG(src); /* in case IPv4-only and source-based routing is disabled */

  if ((pcb != NULL) && (pcb->netif_idx != NETIF_NO_INDEX)) {
 8015120:	68fb      	ldr	r3, [r7, #12]
 8015122:	2b00      	cmp	r3, #0
 8015124:	d00a      	beq.n	801513c <tcp_route+0x28>
 8015126:	68fb      	ldr	r3, [r7, #12]
 8015128:	7a1b      	ldrb	r3, [r3, #8]
 801512a:	2b00      	cmp	r3, #0
 801512c:	d006      	beq.n	801513c <tcp_route+0x28>
    return netif_get_by_index(pcb->netif_idx);
 801512e:	68fb      	ldr	r3, [r7, #12]
 8015130:	7a1b      	ldrb	r3, [r3, #8]
 8015132:	4618      	mov	r0, r3
 8015134:	f7fb fb76 	bl	8010824 <netif_get_by_index>
 8015138:	4603      	mov	r3, r0
 801513a:	e003      	b.n	8015144 <tcp_route+0x30>
  } else {
    return ip_route(src, dst);
 801513c:	6878      	ldr	r0, [r7, #4]
 801513e:	f002 fe61 	bl	8017e04 <ip4_route>
 8015142:	4603      	mov	r3, r0
  }
}
 8015144:	4618      	mov	r0, r3
 8015146:	3710      	adds	r7, #16
 8015148:	46bd      	mov	sp, r7
 801514a:	bd80      	pop	{r7, pc}

0801514c <tcp_create_segment>:
 * The TCP header is filled in except ackno and wnd.
 * p is freed on failure.
 */
static struct tcp_seg *
tcp_create_segment(const struct tcp_pcb *pcb, struct pbuf *p, u8_t hdrflags, u32_t seqno, u8_t optflags)
{
 801514c:	b590      	push	{r4, r7, lr}
 801514e:	b087      	sub	sp, #28
 8015150:	af00      	add	r7, sp, #0
 8015152:	60f8      	str	r0, [r7, #12]
 8015154:	60b9      	str	r1, [r7, #8]
 8015156:	603b      	str	r3, [r7, #0]
 8015158:	4613      	mov	r3, r2
 801515a:	71fb      	strb	r3, [r7, #7]
  struct tcp_seg *seg;
  u8_t optlen;

  LWIP_ASSERT("tcp_create_segment: invalid pcb", pcb != NULL);
 801515c:	68fb      	ldr	r3, [r7, #12]
 801515e:	2b00      	cmp	r3, #0
 8015160:	d105      	bne.n	801516e <tcp_create_segment+0x22>
 8015162:	4b44      	ldr	r3, [pc, #272]	; (8015274 <tcp_create_segment+0x128>)
 8015164:	22a3      	movs	r2, #163	; 0xa3
 8015166:	4944      	ldr	r1, [pc, #272]	; (8015278 <tcp_create_segment+0x12c>)
 8015168:	4844      	ldr	r0, [pc, #272]	; (801527c <tcp_create_segment+0x130>)
 801516a:	f004 fd71 	bl	8019c50 <iprintf>
  LWIP_ASSERT("tcp_create_segment: invalid pbuf", p != NULL);
 801516e:	68bb      	ldr	r3, [r7, #8]
 8015170:	2b00      	cmp	r3, #0
 8015172:	d105      	bne.n	8015180 <tcp_create_segment+0x34>
 8015174:	4b3f      	ldr	r3, [pc, #252]	; (8015274 <tcp_create_segment+0x128>)
 8015176:	22a4      	movs	r2, #164	; 0xa4
 8015178:	4941      	ldr	r1, [pc, #260]	; (8015280 <tcp_create_segment+0x134>)
 801517a:	4840      	ldr	r0, [pc, #256]	; (801527c <tcp_create_segment+0x130>)
 801517c:	f004 fd68 	bl	8019c50 <iprintf>

  optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(optflags, pcb);
 8015180:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8015184:	009b      	lsls	r3, r3, #2
 8015186:	b2db      	uxtb	r3, r3
 8015188:	f003 0304 	and.w	r3, r3, #4
 801518c:	75fb      	strb	r3, [r7, #23]

  if ((seg = (struct tcp_seg *)memp_malloc(MEMP_TCP_SEG)) == NULL) {
 801518e:	2003      	movs	r0, #3
 8015190:	f7fa ffc2 	bl	8010118 <memp_malloc>
 8015194:	6138      	str	r0, [r7, #16]
 8015196:	693b      	ldr	r3, [r7, #16]
 8015198:	2b00      	cmp	r3, #0
 801519a:	d104      	bne.n	80151a6 <tcp_create_segment+0x5a>
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("tcp_create_segment: no memory.\n"));
    pbuf_free(p);
 801519c:	68b8      	ldr	r0, [r7, #8]
 801519e:	f7fb fe81 	bl	8010ea4 <pbuf_free>
    return NULL;
 80151a2:	2300      	movs	r3, #0
 80151a4:	e061      	b.n	801526a <tcp_create_segment+0x11e>
  }
  seg->flags = optflags;
 80151a6:	693b      	ldr	r3, [r7, #16]
 80151a8:	f897 2028 	ldrb.w	r2, [r7, #40]	; 0x28
 80151ac:	729a      	strb	r2, [r3, #10]
  seg->next = NULL;
 80151ae:	693b      	ldr	r3, [r7, #16]
 80151b0:	2200      	movs	r2, #0
 80151b2:	601a      	str	r2, [r3, #0]
  seg->p = p;
 80151b4:	693b      	ldr	r3, [r7, #16]
 80151b6:	68ba      	ldr	r2, [r7, #8]
 80151b8:	605a      	str	r2, [r3, #4]
  LWIP_ASSERT("p->tot_len >= optlen", p->tot_len >= optlen);
 80151ba:	68bb      	ldr	r3, [r7, #8]
 80151bc:	891a      	ldrh	r2, [r3, #8]
 80151be:	7dfb      	ldrb	r3, [r7, #23]
 80151c0:	b29b      	uxth	r3, r3
 80151c2:	429a      	cmp	r2, r3
 80151c4:	d205      	bcs.n	80151d2 <tcp_create_segment+0x86>
 80151c6:	4b2b      	ldr	r3, [pc, #172]	; (8015274 <tcp_create_segment+0x128>)
 80151c8:	22b0      	movs	r2, #176	; 0xb0
 80151ca:	492e      	ldr	r1, [pc, #184]	; (8015284 <tcp_create_segment+0x138>)
 80151cc:	482b      	ldr	r0, [pc, #172]	; (801527c <tcp_create_segment+0x130>)
 80151ce:	f004 fd3f 	bl	8019c50 <iprintf>
  seg->len = p->tot_len - optlen;
 80151d2:	68bb      	ldr	r3, [r7, #8]
 80151d4:	891a      	ldrh	r2, [r3, #8]
 80151d6:	7dfb      	ldrb	r3, [r7, #23]
 80151d8:	b29b      	uxth	r3, r3
 80151da:	1ad3      	subs	r3, r2, r3
 80151dc:	b29a      	uxth	r2, r3
 80151de:	693b      	ldr	r3, [r7, #16]
 80151e0:	811a      	strh	r2, [r3, #8]
  LWIP_ASSERT("invalid optflags passed: TF_SEG_DATA_CHECKSUMMED",
              (optflags & TF_SEG_DATA_CHECKSUMMED) == 0);
#endif /* TCP_CHECKSUM_ON_COPY */

  /* build TCP header */
  if (pbuf_add_header(p, TCP_HLEN)) {
 80151e2:	2114      	movs	r1, #20
 80151e4:	68b8      	ldr	r0, [r7, #8]
 80151e6:	f7fb fdc7 	bl	8010d78 <pbuf_add_header>
 80151ea:	4603      	mov	r3, r0
 80151ec:	2b00      	cmp	r3, #0
 80151ee:	d004      	beq.n	80151fa <tcp_create_segment+0xae>
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("tcp_create_segment: no room for TCP header in pbuf.\n"));
    TCP_STATS_INC(tcp.err);
    tcp_seg_free(seg);
 80151f0:	6938      	ldr	r0, [r7, #16]
 80151f2:	f7fd f8ce 	bl	8012392 <tcp_seg_free>
    return NULL;
 80151f6:	2300      	movs	r3, #0
 80151f8:	e037      	b.n	801526a <tcp_create_segment+0x11e>
  }
  seg->tcphdr = (struct tcp_hdr *)seg->p->payload;
 80151fa:	693b      	ldr	r3, [r7, #16]
 80151fc:	685b      	ldr	r3, [r3, #4]
 80151fe:	685a      	ldr	r2, [r3, #4]
 8015200:	693b      	ldr	r3, [r7, #16]
 8015202:	60da      	str	r2, [r3, #12]
  seg->tcphdr->src = lwip_htons(pcb->local_port);
 8015204:	68fb      	ldr	r3, [r7, #12]
 8015206:	8ada      	ldrh	r2, [r3, #22]
 8015208:	693b      	ldr	r3, [r7, #16]
 801520a:	68dc      	ldr	r4, [r3, #12]
 801520c:	4610      	mov	r0, r2
 801520e:	f7fa fa65 	bl	800f6dc <lwip_htons>
 8015212:	4603      	mov	r3, r0
 8015214:	8023      	strh	r3, [r4, #0]
  seg->tcphdr->dest = lwip_htons(pcb->remote_port);
 8015216:	68fb      	ldr	r3, [r7, #12]
 8015218:	8b1a      	ldrh	r2, [r3, #24]
 801521a:	693b      	ldr	r3, [r7, #16]
 801521c:	68dc      	ldr	r4, [r3, #12]
 801521e:	4610      	mov	r0, r2
 8015220:	f7fa fa5c 	bl	800f6dc <lwip_htons>
 8015224:	4603      	mov	r3, r0
 8015226:	8063      	strh	r3, [r4, #2]
  seg->tcphdr->seqno = lwip_htonl(seqno);
 8015228:	693b      	ldr	r3, [r7, #16]
 801522a:	68dc      	ldr	r4, [r3, #12]
 801522c:	6838      	ldr	r0, [r7, #0]
 801522e:	f7fa fa6a 	bl	800f706 <lwip_htonl>
 8015232:	4603      	mov	r3, r0
 8015234:	6063      	str	r3, [r4, #4]
  /* ackno is set in tcp_output */
  TCPH_HDRLEN_FLAGS_SET(seg->tcphdr, (5 + optlen / 4), hdrflags);
 8015236:	7dfb      	ldrb	r3, [r7, #23]
 8015238:	089b      	lsrs	r3, r3, #2
 801523a:	b2db      	uxtb	r3, r3
 801523c:	b29b      	uxth	r3, r3
 801523e:	3305      	adds	r3, #5
 8015240:	b29b      	uxth	r3, r3
 8015242:	031b      	lsls	r3, r3, #12
 8015244:	b29a      	uxth	r2, r3
 8015246:	79fb      	ldrb	r3, [r7, #7]
 8015248:	b29b      	uxth	r3, r3
 801524a:	4313      	orrs	r3, r2
 801524c:	b29a      	uxth	r2, r3
 801524e:	693b      	ldr	r3, [r7, #16]
 8015250:	68dc      	ldr	r4, [r3, #12]
 8015252:	4610      	mov	r0, r2
 8015254:	f7fa fa42 	bl	800f6dc <lwip_htons>
 8015258:	4603      	mov	r3, r0
 801525a:	81a3      	strh	r3, [r4, #12]
  /* wnd and chksum are set in tcp_output */
  seg->tcphdr->urgp = 0;
 801525c:	693b      	ldr	r3, [r7, #16]
 801525e:	68db      	ldr	r3, [r3, #12]
 8015260:	2200      	movs	r2, #0
 8015262:	749a      	strb	r2, [r3, #18]
 8015264:	2200      	movs	r2, #0
 8015266:	74da      	strb	r2, [r3, #19]
  return seg;
 8015268:	693b      	ldr	r3, [r7, #16]
}
 801526a:	4618      	mov	r0, r3
 801526c:	371c      	adds	r7, #28
 801526e:	46bd      	mov	sp, r7
 8015270:	bd90      	pop	{r4, r7, pc}
 8015272:	bf00      	nop
 8015274:	0801dbfc 	.word	0x0801dbfc
 8015278:	0801dc30 	.word	0x0801dc30
 801527c:	0801dc50 	.word	0x0801dc50
 8015280:	0801dc78 	.word	0x0801dc78
 8015284:	0801dc9c 	.word	0x0801dc9c

08015288 <tcp_split_unsent_seg>:
 * @param pcb the tcp_pcb for which to split the unsent head
 * @param split the amount of payload to remain in the head
 */
err_t
tcp_split_unsent_seg(struct tcp_pcb *pcb, u16_t split)
{
 8015288:	b590      	push	{r4, r7, lr}
 801528a:	b08b      	sub	sp, #44	; 0x2c
 801528c:	af02      	add	r7, sp, #8
 801528e:	6078      	str	r0, [r7, #4]
 8015290:	460b      	mov	r3, r1
 8015292:	807b      	strh	r3, [r7, #2]
  struct tcp_seg *seg = NULL, *useg = NULL;
 8015294:	2300      	movs	r3, #0
 8015296:	61fb      	str	r3, [r7, #28]
 8015298:	2300      	movs	r3, #0
 801529a:	617b      	str	r3, [r7, #20]
  struct pbuf *p = NULL;
 801529c:	2300      	movs	r3, #0
 801529e:	613b      	str	r3, [r7, #16]
  u16_t chksum = 0;
  u8_t chksum_swapped = 0;
  struct pbuf *q;
#endif /* TCP_CHECKSUM_ON_COPY */

  LWIP_ASSERT("tcp_split_unsent_seg: invalid pcb", pcb != NULL);
 80152a0:	687b      	ldr	r3, [r7, #4]
 80152a2:	2b00      	cmp	r3, #0
 80152a4:	d106      	bne.n	80152b4 <tcp_split_unsent_seg+0x2c>
 80152a6:	4b95      	ldr	r3, [pc, #596]	; (80154fc <tcp_split_unsent_seg+0x274>)
 80152a8:	f240 324b 	movw	r2, #843	; 0x34b
 80152ac:	4994      	ldr	r1, [pc, #592]	; (8015500 <tcp_split_unsent_seg+0x278>)
 80152ae:	4895      	ldr	r0, [pc, #596]	; (8015504 <tcp_split_unsent_seg+0x27c>)
 80152b0:	f004 fcce 	bl	8019c50 <iprintf>

  useg = pcb->unsent;
 80152b4:	687b      	ldr	r3, [r7, #4]
 80152b6:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80152b8:	617b      	str	r3, [r7, #20]
  if (useg == NULL) {
 80152ba:	697b      	ldr	r3, [r7, #20]
 80152bc:	2b00      	cmp	r3, #0
 80152be:	d102      	bne.n	80152c6 <tcp_split_unsent_seg+0x3e>
    return ERR_MEM;
 80152c0:	f04f 33ff 	mov.w	r3, #4294967295
 80152c4:	e116      	b.n	80154f4 <tcp_split_unsent_seg+0x26c>
  }

  if (split == 0) {
 80152c6:	887b      	ldrh	r3, [r7, #2]
 80152c8:	2b00      	cmp	r3, #0
 80152ca:	d109      	bne.n	80152e0 <tcp_split_unsent_seg+0x58>
    LWIP_ASSERT("Can't split segment into length 0", 0);
 80152cc:	4b8b      	ldr	r3, [pc, #556]	; (80154fc <tcp_split_unsent_seg+0x274>)
 80152ce:	f240 3253 	movw	r2, #851	; 0x353
 80152d2:	498d      	ldr	r1, [pc, #564]	; (8015508 <tcp_split_unsent_seg+0x280>)
 80152d4:	488b      	ldr	r0, [pc, #556]	; (8015504 <tcp_split_unsent_seg+0x27c>)
 80152d6:	f004 fcbb 	bl	8019c50 <iprintf>
    return ERR_VAL;
 80152da:	f06f 0305 	mvn.w	r3, #5
 80152de:	e109      	b.n	80154f4 <tcp_split_unsent_seg+0x26c>
  }

  if (useg->len <= split) {
 80152e0:	697b      	ldr	r3, [r7, #20]
 80152e2:	891b      	ldrh	r3, [r3, #8]
 80152e4:	887a      	ldrh	r2, [r7, #2]
 80152e6:	429a      	cmp	r2, r3
 80152e8:	d301      	bcc.n	80152ee <tcp_split_unsent_seg+0x66>
    return ERR_OK;
 80152ea:	2300      	movs	r3, #0
 80152ec:	e102      	b.n	80154f4 <tcp_split_unsent_seg+0x26c>
  }

  LWIP_ASSERT("split <= mss", split <= pcb->mss);
 80152ee:	687b      	ldr	r3, [r7, #4]
 80152f0:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 80152f2:	887a      	ldrh	r2, [r7, #2]
 80152f4:	429a      	cmp	r2, r3
 80152f6:	d906      	bls.n	8015306 <tcp_split_unsent_seg+0x7e>
 80152f8:	4b80      	ldr	r3, [pc, #512]	; (80154fc <tcp_split_unsent_seg+0x274>)
 80152fa:	f240 325b 	movw	r2, #859	; 0x35b
 80152fe:	4983      	ldr	r1, [pc, #524]	; (801550c <tcp_split_unsent_seg+0x284>)
 8015300:	4880      	ldr	r0, [pc, #512]	; (8015504 <tcp_split_unsent_seg+0x27c>)
 8015302:	f004 fca5 	bl	8019c50 <iprintf>
  LWIP_ASSERT("useg->len > 0", useg->len > 0);
 8015306:	697b      	ldr	r3, [r7, #20]
 8015308:	891b      	ldrh	r3, [r3, #8]
 801530a:	2b00      	cmp	r3, #0
 801530c:	d106      	bne.n	801531c <tcp_split_unsent_seg+0x94>
 801530e:	4b7b      	ldr	r3, [pc, #492]	; (80154fc <tcp_split_unsent_seg+0x274>)
 8015310:	f44f 7257 	mov.w	r2, #860	; 0x35c
 8015314:	497e      	ldr	r1, [pc, #504]	; (8015510 <tcp_split_unsent_seg+0x288>)
 8015316:	487b      	ldr	r0, [pc, #492]	; (8015504 <tcp_split_unsent_seg+0x27c>)
 8015318:	f004 fc9a 	bl	8019c50 <iprintf>
   * to split this packet so we may actually exceed the max value by
   * one!
   */
  LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_enqueue: split_unsent_seg: %u\n", (unsigned int)pcb->snd_queuelen));

  optflags = useg->flags;
 801531c:	697b      	ldr	r3, [r7, #20]
 801531e:	7a9b      	ldrb	r3, [r3, #10]
 8015320:	73fb      	strb	r3, [r7, #15]
#if TCP_CHECKSUM_ON_COPY
  /* Remove since checksum is not stored until after tcp_create_segment() */
  optflags &= ~TF_SEG_DATA_CHECKSUMMED;
#endif /* TCP_CHECKSUM_ON_COPY */
  optlen = LWIP_TCP_OPT_LENGTH(optflags);
 8015322:	7bfb      	ldrb	r3, [r7, #15]
 8015324:	009b      	lsls	r3, r3, #2
 8015326:	b2db      	uxtb	r3, r3
 8015328:	f003 0304 	and.w	r3, r3, #4
 801532c:	73bb      	strb	r3, [r7, #14]
  remainder = useg->len - split;
 801532e:	697b      	ldr	r3, [r7, #20]
 8015330:	891a      	ldrh	r2, [r3, #8]
 8015332:	887b      	ldrh	r3, [r7, #2]
 8015334:	1ad3      	subs	r3, r2, r3
 8015336:	81bb      	strh	r3, [r7, #12]

  /* Create new pbuf for the remainder of the split */
  p = pbuf_alloc(PBUF_TRANSPORT, remainder + optlen, PBUF_RAM);
 8015338:	7bbb      	ldrb	r3, [r7, #14]
 801533a:	b29a      	uxth	r2, r3
 801533c:	89bb      	ldrh	r3, [r7, #12]
 801533e:	4413      	add	r3, r2
 8015340:	b29b      	uxth	r3, r3
 8015342:	f44f 7220 	mov.w	r2, #640	; 0x280
 8015346:	4619      	mov	r1, r3
 8015348:	2036      	movs	r0, #54	; 0x36
 801534a:	f7fb fac7 	bl	80108dc <pbuf_alloc>
 801534e:	6138      	str	r0, [r7, #16]
  if (p == NULL) {
 8015350:	693b      	ldr	r3, [r7, #16]
 8015352:	2b00      	cmp	r3, #0
 8015354:	f000 80b7 	beq.w	80154c6 <tcp_split_unsent_seg+0x23e>
                ("tcp_split_unsent_seg: could not allocate memory for pbuf remainder %u\n", remainder));
    goto memerr;
  }

  /* Offset into the original pbuf is past TCP/IP headers, options, and split amount */
  offset = useg->p->tot_len - useg->len + split;
 8015358:	697b      	ldr	r3, [r7, #20]
 801535a:	685b      	ldr	r3, [r3, #4]
 801535c:	891a      	ldrh	r2, [r3, #8]
 801535e:	697b      	ldr	r3, [r7, #20]
 8015360:	891b      	ldrh	r3, [r3, #8]
 8015362:	1ad3      	subs	r3, r2, r3
 8015364:	b29a      	uxth	r2, r3
 8015366:	887b      	ldrh	r3, [r7, #2]
 8015368:	4413      	add	r3, r2
 801536a:	817b      	strh	r3, [r7, #10]
  /* Copy remainder into new pbuf, headers and options will not be filled out */
  if (pbuf_copy_partial(useg->p, (u8_t *)p->payload + optlen, remainder, offset ) != remainder) {
 801536c:	697b      	ldr	r3, [r7, #20]
 801536e:	6858      	ldr	r0, [r3, #4]
 8015370:	693b      	ldr	r3, [r7, #16]
 8015372:	685a      	ldr	r2, [r3, #4]
 8015374:	7bbb      	ldrb	r3, [r7, #14]
 8015376:	18d1      	adds	r1, r2, r3
 8015378:	897b      	ldrh	r3, [r7, #10]
 801537a:	89ba      	ldrh	r2, [r7, #12]
 801537c:	f7fb ff7c 	bl	8011278 <pbuf_copy_partial>
 8015380:	4603      	mov	r3, r0
 8015382:	461a      	mov	r2, r3
 8015384:	89bb      	ldrh	r3, [r7, #12]
 8015386:	4293      	cmp	r3, r2
 8015388:	f040 809f 	bne.w	80154ca <tcp_split_unsent_seg+0x242>
#endif /* TCP_CHECKSUM_ON_COPY */

  /* Options are created when calling tcp_output() */

  /* Migrate flags from original segment */
  split_flags = TCPH_FLAGS(useg->tcphdr);
 801538c:	697b      	ldr	r3, [r7, #20]
 801538e:	68db      	ldr	r3, [r3, #12]
 8015390:	899b      	ldrh	r3, [r3, #12]
 8015392:	b29b      	uxth	r3, r3
 8015394:	4618      	mov	r0, r3
 8015396:	f7fa f9a1 	bl	800f6dc <lwip_htons>
 801539a:	4603      	mov	r3, r0
 801539c:	b2db      	uxtb	r3, r3
 801539e:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80153a2:	76fb      	strb	r3, [r7, #27]
  remainder_flags = 0; /* ACK added in tcp_output() */
 80153a4:	2300      	movs	r3, #0
 80153a6:	76bb      	strb	r3, [r7, #26]

  if (split_flags & TCP_PSH) {
 80153a8:	7efb      	ldrb	r3, [r7, #27]
 80153aa:	f003 0308 	and.w	r3, r3, #8
 80153ae:	2b00      	cmp	r3, #0
 80153b0:	d007      	beq.n	80153c2 <tcp_split_unsent_seg+0x13a>
    split_flags &= ~TCP_PSH;
 80153b2:	7efb      	ldrb	r3, [r7, #27]
 80153b4:	f023 0308 	bic.w	r3, r3, #8
 80153b8:	76fb      	strb	r3, [r7, #27]
    remainder_flags |= TCP_PSH;
 80153ba:	7ebb      	ldrb	r3, [r7, #26]
 80153bc:	f043 0308 	orr.w	r3, r3, #8
 80153c0:	76bb      	strb	r3, [r7, #26]
  }
  if (split_flags & TCP_FIN) {
 80153c2:	7efb      	ldrb	r3, [r7, #27]
 80153c4:	f003 0301 	and.w	r3, r3, #1
 80153c8:	2b00      	cmp	r3, #0
 80153ca:	d007      	beq.n	80153dc <tcp_split_unsent_seg+0x154>
    split_flags &= ~TCP_FIN;
 80153cc:	7efb      	ldrb	r3, [r7, #27]
 80153ce:	f023 0301 	bic.w	r3, r3, #1
 80153d2:	76fb      	strb	r3, [r7, #27]
    remainder_flags |= TCP_FIN;
 80153d4:	7ebb      	ldrb	r3, [r7, #26]
 80153d6:	f043 0301 	orr.w	r3, r3, #1
 80153da:	76bb      	strb	r3, [r7, #26]
  }
  /* SYN should be left on split, RST should not be present with data */

  seg = tcp_create_segment(pcb, p, remainder_flags, lwip_ntohl(useg->tcphdr->seqno) + split, optflags);
 80153dc:	697b      	ldr	r3, [r7, #20]
 80153de:	68db      	ldr	r3, [r3, #12]
 80153e0:	685b      	ldr	r3, [r3, #4]
 80153e2:	4618      	mov	r0, r3
 80153e4:	f7fa f98f 	bl	800f706 <lwip_htonl>
 80153e8:	4602      	mov	r2, r0
 80153ea:	887b      	ldrh	r3, [r7, #2]
 80153ec:	18d1      	adds	r1, r2, r3
 80153ee:	7eba      	ldrb	r2, [r7, #26]
 80153f0:	7bfb      	ldrb	r3, [r7, #15]
 80153f2:	9300      	str	r3, [sp, #0]
 80153f4:	460b      	mov	r3, r1
 80153f6:	6939      	ldr	r1, [r7, #16]
 80153f8:	6878      	ldr	r0, [r7, #4]
 80153fa:	f7ff fea7 	bl	801514c <tcp_create_segment>
 80153fe:	61f8      	str	r0, [r7, #28]
  if (seg == NULL) {
 8015400:	69fb      	ldr	r3, [r7, #28]
 8015402:	2b00      	cmp	r3, #0
 8015404:	d063      	beq.n	80154ce <tcp_split_unsent_seg+0x246>
  seg->chksum_swapped = chksum_swapped;
  seg->flags |= TF_SEG_DATA_CHECKSUMMED;
#endif /* TCP_CHECKSUM_ON_COPY */

  /* Remove this segment from the queue since trimming it may free pbufs */
  pcb->snd_queuelen -= pbuf_clen(useg->p);
 8015406:	697b      	ldr	r3, [r7, #20]
 8015408:	685b      	ldr	r3, [r3, #4]
 801540a:	4618      	mov	r0, r3
 801540c:	f7fb fdd2 	bl	8010fb4 <pbuf_clen>
 8015410:	4603      	mov	r3, r0
 8015412:	461a      	mov	r2, r3
 8015414:	687b      	ldr	r3, [r7, #4]
 8015416:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 801541a:	1a9b      	subs	r3, r3, r2
 801541c:	b29a      	uxth	r2, r3
 801541e:	687b      	ldr	r3, [r7, #4]
 8015420:	f8a3 2066 	strh.w	r2, [r3, #102]	; 0x66

  /* Trim the original pbuf into our split size.  At this point our remainder segment must be setup
  successfully because we are modifying the original segment */
  pbuf_realloc(useg->p, useg->p->tot_len - remainder);
 8015424:	697b      	ldr	r3, [r7, #20]
 8015426:	6858      	ldr	r0, [r3, #4]
 8015428:	697b      	ldr	r3, [r7, #20]
 801542a:	685b      	ldr	r3, [r3, #4]
 801542c:	891a      	ldrh	r2, [r3, #8]
 801542e:	89bb      	ldrh	r3, [r7, #12]
 8015430:	1ad3      	subs	r3, r2, r3
 8015432:	b29b      	uxth	r3, r3
 8015434:	4619      	mov	r1, r3
 8015436:	f7fb fbb1 	bl	8010b9c <pbuf_realloc>
  useg->len -= remainder;
 801543a:	697b      	ldr	r3, [r7, #20]
 801543c:	891a      	ldrh	r2, [r3, #8]
 801543e:	89bb      	ldrh	r3, [r7, #12]
 8015440:	1ad3      	subs	r3, r2, r3
 8015442:	b29a      	uxth	r2, r3
 8015444:	697b      	ldr	r3, [r7, #20]
 8015446:	811a      	strh	r2, [r3, #8]
  TCPH_SET_FLAG(useg->tcphdr, split_flags);
 8015448:	697b      	ldr	r3, [r7, #20]
 801544a:	68db      	ldr	r3, [r3, #12]
 801544c:	899b      	ldrh	r3, [r3, #12]
 801544e:	b29c      	uxth	r4, r3
 8015450:	7efb      	ldrb	r3, [r7, #27]
 8015452:	b29b      	uxth	r3, r3
 8015454:	4618      	mov	r0, r3
 8015456:	f7fa f941 	bl	800f6dc <lwip_htons>
 801545a:	4603      	mov	r3, r0
 801545c:	461a      	mov	r2, r3
 801545e:	697b      	ldr	r3, [r7, #20]
 8015460:	68db      	ldr	r3, [r3, #12]
 8015462:	4322      	orrs	r2, r4
 8015464:	b292      	uxth	r2, r2
 8015466:	819a      	strh	r2, [r3, #12]
  /* By trimming, realloc may have actually shrunk the pbuf, so clear oversize_left */
  useg->oversize_left = 0;
#endif /* TCP_OVERSIZE_DBGCHECK */

  /* Add back to the queue with new trimmed pbuf */
  pcb->snd_queuelen += pbuf_clen(useg->p);
 8015468:	697b      	ldr	r3, [r7, #20]
 801546a:	685b      	ldr	r3, [r3, #4]
 801546c:	4618      	mov	r0, r3
 801546e:	f7fb fda1 	bl	8010fb4 <pbuf_clen>
 8015472:	4603      	mov	r3, r0
 8015474:	461a      	mov	r2, r3
 8015476:	687b      	ldr	r3, [r7, #4]
 8015478:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 801547c:	4413      	add	r3, r2
 801547e:	b29a      	uxth	r2, r3
 8015480:	687b      	ldr	r3, [r7, #4]
 8015482:	f8a3 2066 	strh.w	r2, [r3, #102]	; 0x66
#endif /* TCP_CHECKSUM_ON_COPY */

  /* Update number of segments on the queues. Note that length now may
   * exceed TCP_SND_QUEUELEN! We don't have to touch pcb->snd_buf
   * because the total amount of data is constant when packet is split */
  pcb->snd_queuelen += pbuf_clen(seg->p);
 8015486:	69fb      	ldr	r3, [r7, #28]
 8015488:	685b      	ldr	r3, [r3, #4]
 801548a:	4618      	mov	r0, r3
 801548c:	f7fb fd92 	bl	8010fb4 <pbuf_clen>
 8015490:	4603      	mov	r3, r0
 8015492:	461a      	mov	r2, r3
 8015494:	687b      	ldr	r3, [r7, #4]
 8015496:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 801549a:	4413      	add	r3, r2
 801549c:	b29a      	uxth	r2, r3
 801549e:	687b      	ldr	r3, [r7, #4]
 80154a0:	f8a3 2066 	strh.w	r2, [r3, #102]	; 0x66

  /* Finally insert remainder into queue after split (which stays head) */
  seg->next = useg->next;
 80154a4:	697b      	ldr	r3, [r7, #20]
 80154a6:	681a      	ldr	r2, [r3, #0]
 80154a8:	69fb      	ldr	r3, [r7, #28]
 80154aa:	601a      	str	r2, [r3, #0]
  useg->next = seg;
 80154ac:	697b      	ldr	r3, [r7, #20]
 80154ae:	69fa      	ldr	r2, [r7, #28]
 80154b0:	601a      	str	r2, [r3, #0]

#if TCP_OVERSIZE
  /* If remainder is last segment on the unsent, ensure we clear the oversize amount
   * because the remainder is always sized to the exact remaining amount */
  if (seg->next == NULL) {
 80154b2:	69fb      	ldr	r3, [r7, #28]
 80154b4:	681b      	ldr	r3, [r3, #0]
 80154b6:	2b00      	cmp	r3, #0
 80154b8:	d103      	bne.n	80154c2 <tcp_split_unsent_seg+0x23a>
    pcb->unsent_oversize = 0;
 80154ba:	687b      	ldr	r3, [r7, #4]
 80154bc:	2200      	movs	r2, #0
 80154be:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
  }
#endif /* TCP_OVERSIZE */

  return ERR_OK;
 80154c2:	2300      	movs	r3, #0
 80154c4:	e016      	b.n	80154f4 <tcp_split_unsent_seg+0x26c>
    goto memerr;
 80154c6:	bf00      	nop
 80154c8:	e002      	b.n	80154d0 <tcp_split_unsent_seg+0x248>
    goto memerr;
 80154ca:	bf00      	nop
 80154cc:	e000      	b.n	80154d0 <tcp_split_unsent_seg+0x248>
    goto memerr;
 80154ce:	bf00      	nop
memerr:
  TCP_STATS_INC(tcp.memerr);

  LWIP_ASSERT("seg == NULL", seg == NULL);
 80154d0:	69fb      	ldr	r3, [r7, #28]
 80154d2:	2b00      	cmp	r3, #0
 80154d4:	d006      	beq.n	80154e4 <tcp_split_unsent_seg+0x25c>
 80154d6:	4b09      	ldr	r3, [pc, #36]	; (80154fc <tcp_split_unsent_seg+0x274>)
 80154d8:	f44f 7276 	mov.w	r2, #984	; 0x3d8
 80154dc:	490d      	ldr	r1, [pc, #52]	; (8015514 <tcp_split_unsent_seg+0x28c>)
 80154de:	4809      	ldr	r0, [pc, #36]	; (8015504 <tcp_split_unsent_seg+0x27c>)
 80154e0:	f004 fbb6 	bl	8019c50 <iprintf>
  if (p != NULL) {
 80154e4:	693b      	ldr	r3, [r7, #16]
 80154e6:	2b00      	cmp	r3, #0
 80154e8:	d002      	beq.n	80154f0 <tcp_split_unsent_seg+0x268>
    pbuf_free(p);
 80154ea:	6938      	ldr	r0, [r7, #16]
 80154ec:	f7fb fcda 	bl	8010ea4 <pbuf_free>
  }

  return ERR_MEM;
 80154f0:	f04f 33ff 	mov.w	r3, #4294967295
}
 80154f4:	4618      	mov	r0, r3
 80154f6:	3724      	adds	r7, #36	; 0x24
 80154f8:	46bd      	mov	sp, r7
 80154fa:	bd90      	pop	{r4, r7, pc}
 80154fc:	0801dbfc 	.word	0x0801dbfc
 8015500:	0801df90 	.word	0x0801df90
 8015504:	0801dc50 	.word	0x0801dc50
 8015508:	0801dfb4 	.word	0x0801dfb4
 801550c:	0801dfd8 	.word	0x0801dfd8
 8015510:	0801dfe8 	.word	0x0801dfe8
 8015514:	0801dff8 	.word	0x0801dff8

08015518 <tcp_send_fin>:
 * @param pcb the tcp_pcb over which to send a segment
 * @return ERR_OK if sent, another err_t otherwise
 */
err_t
tcp_send_fin(struct tcp_pcb *pcb)
{
 8015518:	b590      	push	{r4, r7, lr}
 801551a:	b085      	sub	sp, #20
 801551c:	af00      	add	r7, sp, #0
 801551e:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_send_fin: invalid pcb", pcb != NULL);
 8015520:	687b      	ldr	r3, [r7, #4]
 8015522:	2b00      	cmp	r3, #0
 8015524:	d106      	bne.n	8015534 <tcp_send_fin+0x1c>
 8015526:	4b21      	ldr	r3, [pc, #132]	; (80155ac <tcp_send_fin+0x94>)
 8015528:	f240 32eb 	movw	r2, #1003	; 0x3eb
 801552c:	4920      	ldr	r1, [pc, #128]	; (80155b0 <tcp_send_fin+0x98>)
 801552e:	4821      	ldr	r0, [pc, #132]	; (80155b4 <tcp_send_fin+0x9c>)
 8015530:	f004 fb8e 	bl	8019c50 <iprintf>

  /* first, try to add the fin to the last unsent segment */
  if (pcb->unsent != NULL) {
 8015534:	687b      	ldr	r3, [r7, #4]
 8015536:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8015538:	2b00      	cmp	r3, #0
 801553a:	d02e      	beq.n	801559a <tcp_send_fin+0x82>
    struct tcp_seg *last_unsent;
    for (last_unsent = pcb->unsent; last_unsent->next != NULL;
 801553c:	687b      	ldr	r3, [r7, #4]
 801553e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8015540:	60fb      	str	r3, [r7, #12]
 8015542:	e002      	b.n	801554a <tcp_send_fin+0x32>
         last_unsent = last_unsent->next);
 8015544:	68fb      	ldr	r3, [r7, #12]
 8015546:	681b      	ldr	r3, [r3, #0]
 8015548:	60fb      	str	r3, [r7, #12]
    for (last_unsent = pcb->unsent; last_unsent->next != NULL;
 801554a:	68fb      	ldr	r3, [r7, #12]
 801554c:	681b      	ldr	r3, [r3, #0]
 801554e:	2b00      	cmp	r3, #0
 8015550:	d1f8      	bne.n	8015544 <tcp_send_fin+0x2c>

    if ((TCPH_FLAGS(last_unsent->tcphdr) & (TCP_SYN | TCP_FIN | TCP_RST)) == 0) {
 8015552:	68fb      	ldr	r3, [r7, #12]
 8015554:	68db      	ldr	r3, [r3, #12]
 8015556:	899b      	ldrh	r3, [r3, #12]
 8015558:	b29b      	uxth	r3, r3
 801555a:	4618      	mov	r0, r3
 801555c:	f7fa f8be 	bl	800f6dc <lwip_htons>
 8015560:	4603      	mov	r3, r0
 8015562:	b2db      	uxtb	r3, r3
 8015564:	f003 0307 	and.w	r3, r3, #7
 8015568:	2b00      	cmp	r3, #0
 801556a:	d116      	bne.n	801559a <tcp_send_fin+0x82>
      /* no SYN/FIN/RST flag in the header, we can add the FIN flag */
      TCPH_SET_FLAG(last_unsent->tcphdr, TCP_FIN);
 801556c:	68fb      	ldr	r3, [r7, #12]
 801556e:	68db      	ldr	r3, [r3, #12]
 8015570:	899b      	ldrh	r3, [r3, #12]
 8015572:	b29c      	uxth	r4, r3
 8015574:	2001      	movs	r0, #1
 8015576:	f7fa f8b1 	bl	800f6dc <lwip_htons>
 801557a:	4603      	mov	r3, r0
 801557c:	461a      	mov	r2, r3
 801557e:	68fb      	ldr	r3, [r7, #12]
 8015580:	68db      	ldr	r3, [r3, #12]
 8015582:	4322      	orrs	r2, r4
 8015584:	b292      	uxth	r2, r2
 8015586:	819a      	strh	r2, [r3, #12]
      tcp_set_flags(pcb, TF_FIN);
 8015588:	687b      	ldr	r3, [r7, #4]
 801558a:	8b5b      	ldrh	r3, [r3, #26]
 801558c:	f043 0320 	orr.w	r3, r3, #32
 8015590:	b29a      	uxth	r2, r3
 8015592:	687b      	ldr	r3, [r7, #4]
 8015594:	835a      	strh	r2, [r3, #26]
      return ERR_OK;
 8015596:	2300      	movs	r3, #0
 8015598:	e004      	b.n	80155a4 <tcp_send_fin+0x8c>
    }
  }
  /* no data, no length, flags, copy=1, no optdata */
  return tcp_enqueue_flags(pcb, TCP_FIN);
 801559a:	2101      	movs	r1, #1
 801559c:	6878      	ldr	r0, [r7, #4]
 801559e:	f000 f80b 	bl	80155b8 <tcp_enqueue_flags>
 80155a2:	4603      	mov	r3, r0
}
 80155a4:	4618      	mov	r0, r3
 80155a6:	3714      	adds	r7, #20
 80155a8:	46bd      	mov	sp, r7
 80155aa:	bd90      	pop	{r4, r7, pc}
 80155ac:	0801dbfc 	.word	0x0801dbfc
 80155b0:	0801e004 	.word	0x0801e004
 80155b4:	0801dc50 	.word	0x0801dc50

080155b8 <tcp_enqueue_flags>:
 * @param pcb Protocol control block for the TCP connection.
 * @param flags TCP header flags to set in the outgoing segment.
 */
err_t
tcp_enqueue_flags(struct tcp_pcb *pcb, u8_t flags)
{
 80155b8:	b580      	push	{r7, lr}
 80155ba:	b08a      	sub	sp, #40	; 0x28
 80155bc:	af02      	add	r7, sp, #8
 80155be:	6078      	str	r0, [r7, #4]
 80155c0:	460b      	mov	r3, r1
 80155c2:	70fb      	strb	r3, [r7, #3]
  struct pbuf *p;
  struct tcp_seg *seg;
  u8_t optflags = 0;
 80155c4:	2300      	movs	r3, #0
 80155c6:	77fb      	strb	r3, [r7, #31]
  u8_t optlen = 0;
 80155c8:	2300      	movs	r3, #0
 80155ca:	75fb      	strb	r3, [r7, #23]

  LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_enqueue_flags: queuelen: %"U16_F"\n", (u16_t)pcb->snd_queuelen));

  LWIP_ASSERT("tcp_enqueue_flags: need either TCP_SYN or TCP_FIN in flags (programmer violates API)",
 80155cc:	78fb      	ldrb	r3, [r7, #3]
 80155ce:	f003 0303 	and.w	r3, r3, #3
 80155d2:	2b00      	cmp	r3, #0
 80155d4:	d106      	bne.n	80155e4 <tcp_enqueue_flags+0x2c>
 80155d6:	4b67      	ldr	r3, [pc, #412]	; (8015774 <tcp_enqueue_flags+0x1bc>)
 80155d8:	f240 4211 	movw	r2, #1041	; 0x411
 80155dc:	4966      	ldr	r1, [pc, #408]	; (8015778 <tcp_enqueue_flags+0x1c0>)
 80155de:	4867      	ldr	r0, [pc, #412]	; (801577c <tcp_enqueue_flags+0x1c4>)
 80155e0:	f004 fb36 	bl	8019c50 <iprintf>
              (flags & (TCP_SYN | TCP_FIN)) != 0);
  LWIP_ASSERT("tcp_enqueue_flags: invalid pcb", pcb != NULL);
 80155e4:	687b      	ldr	r3, [r7, #4]
 80155e6:	2b00      	cmp	r3, #0
 80155e8:	d106      	bne.n	80155f8 <tcp_enqueue_flags+0x40>
 80155ea:	4b62      	ldr	r3, [pc, #392]	; (8015774 <tcp_enqueue_flags+0x1bc>)
 80155ec:	f240 4213 	movw	r2, #1043	; 0x413
 80155f0:	4963      	ldr	r1, [pc, #396]	; (8015780 <tcp_enqueue_flags+0x1c8>)
 80155f2:	4862      	ldr	r0, [pc, #392]	; (801577c <tcp_enqueue_flags+0x1c4>)
 80155f4:	f004 fb2c 	bl	8019c50 <iprintf>

  /* No need to check pcb->snd_queuelen if only SYN or FIN are allowed! */

  /* Get options for this segment. This is a special case since this is the
     only place where a SYN can be sent. */
  if (flags & TCP_SYN) {
 80155f8:	78fb      	ldrb	r3, [r7, #3]
 80155fa:	f003 0302 	and.w	r3, r3, #2
 80155fe:	2b00      	cmp	r3, #0
 8015600:	d001      	beq.n	8015606 <tcp_enqueue_flags+0x4e>
    optflags = TF_SEG_OPTS_MSS;
 8015602:	2301      	movs	r3, #1
 8015604:	77fb      	strb	r3, [r7, #31]
    /* Make sure the timestamp option is only included in data segments if we
       agreed about it with the remote host (and in active open SYN segments). */
    optflags |= TF_SEG_OPTS_TS;
  }
#endif /* LWIP_TCP_TIMESTAMPS */
  optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(optflags, pcb);
 8015606:	7ffb      	ldrb	r3, [r7, #31]
 8015608:	009b      	lsls	r3, r3, #2
 801560a:	b2db      	uxtb	r3, r3
 801560c:	f003 0304 	and.w	r3, r3, #4
 8015610:	75fb      	strb	r3, [r7, #23]

  /* Allocate pbuf with room for TCP header + options */
  if ((p = pbuf_alloc(PBUF_TRANSPORT, optlen, PBUF_RAM)) == NULL) {
 8015612:	7dfb      	ldrb	r3, [r7, #23]
 8015614:	b29b      	uxth	r3, r3
 8015616:	f44f 7220 	mov.w	r2, #640	; 0x280
 801561a:	4619      	mov	r1, r3
 801561c:	2036      	movs	r0, #54	; 0x36
 801561e:	f7fb f95d 	bl	80108dc <pbuf_alloc>
 8015622:	6138      	str	r0, [r7, #16]
 8015624:	693b      	ldr	r3, [r7, #16]
 8015626:	2b00      	cmp	r3, #0
 8015628:	d109      	bne.n	801563e <tcp_enqueue_flags+0x86>
    tcp_set_flags(pcb, TF_NAGLEMEMERR);
 801562a:	687b      	ldr	r3, [r7, #4]
 801562c:	8b5b      	ldrh	r3, [r3, #26]
 801562e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8015632:	b29a      	uxth	r2, r3
 8015634:	687b      	ldr	r3, [r7, #4]
 8015636:	835a      	strh	r2, [r3, #26]
    TCP_STATS_INC(tcp.memerr);
    return ERR_MEM;
 8015638:	f04f 33ff 	mov.w	r3, #4294967295
 801563c:	e095      	b.n	801576a <tcp_enqueue_flags+0x1b2>
  }
  LWIP_ASSERT("tcp_enqueue_flags: check that first pbuf can hold optlen",
 801563e:	693b      	ldr	r3, [r7, #16]
 8015640:	895a      	ldrh	r2, [r3, #10]
 8015642:	7dfb      	ldrb	r3, [r7, #23]
 8015644:	b29b      	uxth	r3, r3
 8015646:	429a      	cmp	r2, r3
 8015648:	d206      	bcs.n	8015658 <tcp_enqueue_flags+0xa0>
 801564a:	4b4a      	ldr	r3, [pc, #296]	; (8015774 <tcp_enqueue_flags+0x1bc>)
 801564c:	f240 4239 	movw	r2, #1081	; 0x439
 8015650:	494c      	ldr	r1, [pc, #304]	; (8015784 <tcp_enqueue_flags+0x1cc>)
 8015652:	484a      	ldr	r0, [pc, #296]	; (801577c <tcp_enqueue_flags+0x1c4>)
 8015654:	f004 fafc 	bl	8019c50 <iprintf>
              (p->len >= optlen));

  /* Allocate memory for tcp_seg, and fill in fields. */
  if ((seg = tcp_create_segment(pcb, p, flags, pcb->snd_lbb, optflags)) == NULL) {
 8015658:	687b      	ldr	r3, [r7, #4]
 801565a:	6dd9      	ldr	r1, [r3, #92]	; 0x5c
 801565c:	78fa      	ldrb	r2, [r7, #3]
 801565e:	7ffb      	ldrb	r3, [r7, #31]
 8015660:	9300      	str	r3, [sp, #0]
 8015662:	460b      	mov	r3, r1
 8015664:	6939      	ldr	r1, [r7, #16]
 8015666:	6878      	ldr	r0, [r7, #4]
 8015668:	f7ff fd70 	bl	801514c <tcp_create_segment>
 801566c:	60f8      	str	r0, [r7, #12]
 801566e:	68fb      	ldr	r3, [r7, #12]
 8015670:	2b00      	cmp	r3, #0
 8015672:	d109      	bne.n	8015688 <tcp_enqueue_flags+0xd0>
    tcp_set_flags(pcb, TF_NAGLEMEMERR);
 8015674:	687b      	ldr	r3, [r7, #4]
 8015676:	8b5b      	ldrh	r3, [r3, #26]
 8015678:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 801567c:	b29a      	uxth	r2, r3
 801567e:	687b      	ldr	r3, [r7, #4]
 8015680:	835a      	strh	r2, [r3, #26]
    TCP_STATS_INC(tcp.memerr);
    return ERR_MEM;
 8015682:	f04f 33ff 	mov.w	r3, #4294967295
 8015686:	e070      	b.n	801576a <tcp_enqueue_flags+0x1b2>
  }
  LWIP_ASSERT("seg->tcphdr not aligned", ((mem_ptr_t)seg->tcphdr % LWIP_MIN(MEM_ALIGNMENT, 4)) == 0);
 8015688:	68fb      	ldr	r3, [r7, #12]
 801568a:	68db      	ldr	r3, [r3, #12]
 801568c:	f003 0303 	and.w	r3, r3, #3
 8015690:	2b00      	cmp	r3, #0
 8015692:	d006      	beq.n	80156a2 <tcp_enqueue_flags+0xea>
 8015694:	4b37      	ldr	r3, [pc, #220]	; (8015774 <tcp_enqueue_flags+0x1bc>)
 8015696:	f240 4242 	movw	r2, #1090	; 0x442
 801569a:	493b      	ldr	r1, [pc, #236]	; (8015788 <tcp_enqueue_flags+0x1d0>)
 801569c:	4837      	ldr	r0, [pc, #220]	; (801577c <tcp_enqueue_flags+0x1c4>)
 801569e:	f004 fad7 	bl	8019c50 <iprintf>
  LWIP_ASSERT("tcp_enqueue_flags: invalid segment length", seg->len == 0);
 80156a2:	68fb      	ldr	r3, [r7, #12]
 80156a4:	891b      	ldrh	r3, [r3, #8]
 80156a6:	2b00      	cmp	r3, #0
 80156a8:	d006      	beq.n	80156b8 <tcp_enqueue_flags+0x100>
 80156aa:	4b32      	ldr	r3, [pc, #200]	; (8015774 <tcp_enqueue_flags+0x1bc>)
 80156ac:	f240 4243 	movw	r2, #1091	; 0x443
 80156b0:	4936      	ldr	r1, [pc, #216]	; (801578c <tcp_enqueue_flags+0x1d4>)
 80156b2:	4832      	ldr	r0, [pc, #200]	; (801577c <tcp_enqueue_flags+0x1c4>)
 80156b4:	f004 facc 	bl	8019c50 <iprintf>
               lwip_ntohl(seg->tcphdr->seqno),
               lwip_ntohl(seg->tcphdr->seqno) + TCP_TCPLEN(seg),
               (u16_t)flags));

  /* Now append seg to pcb->unsent queue */
  if (pcb->unsent == NULL) {
 80156b8:	687b      	ldr	r3, [r7, #4]
 80156ba:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80156bc:	2b00      	cmp	r3, #0
 80156be:	d103      	bne.n	80156c8 <tcp_enqueue_flags+0x110>
    pcb->unsent = seg;
 80156c0:	687b      	ldr	r3, [r7, #4]
 80156c2:	68fa      	ldr	r2, [r7, #12]
 80156c4:	66da      	str	r2, [r3, #108]	; 0x6c
 80156c6:	e00d      	b.n	80156e4 <tcp_enqueue_flags+0x12c>
  } else {
    struct tcp_seg *useg;
    for (useg = pcb->unsent; useg->next != NULL; useg = useg->next);
 80156c8:	687b      	ldr	r3, [r7, #4]
 80156ca:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80156cc:	61bb      	str	r3, [r7, #24]
 80156ce:	e002      	b.n	80156d6 <tcp_enqueue_flags+0x11e>
 80156d0:	69bb      	ldr	r3, [r7, #24]
 80156d2:	681b      	ldr	r3, [r3, #0]
 80156d4:	61bb      	str	r3, [r7, #24]
 80156d6:	69bb      	ldr	r3, [r7, #24]
 80156d8:	681b      	ldr	r3, [r3, #0]
 80156da:	2b00      	cmp	r3, #0
 80156dc:	d1f8      	bne.n	80156d0 <tcp_enqueue_flags+0x118>
    useg->next = seg;
 80156de:	69bb      	ldr	r3, [r7, #24]
 80156e0:	68fa      	ldr	r2, [r7, #12]
 80156e2:	601a      	str	r2, [r3, #0]
  }
#if TCP_OVERSIZE
  /* The new unsent tail has no space */
  pcb->unsent_oversize = 0;
 80156e4:	687b      	ldr	r3, [r7, #4]
 80156e6:	2200      	movs	r2, #0
 80156e8:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
#endif /* TCP_OVERSIZE */

  /* SYN and FIN bump the sequence number */
  if ((flags & TCP_SYN) || (flags & TCP_FIN)) {
 80156ec:	78fb      	ldrb	r3, [r7, #3]
 80156ee:	f003 0302 	and.w	r3, r3, #2
 80156f2:	2b00      	cmp	r3, #0
 80156f4:	d104      	bne.n	8015700 <tcp_enqueue_flags+0x148>
 80156f6:	78fb      	ldrb	r3, [r7, #3]
 80156f8:	f003 0301 	and.w	r3, r3, #1
 80156fc:	2b00      	cmp	r3, #0
 80156fe:	d004      	beq.n	801570a <tcp_enqueue_flags+0x152>
    pcb->snd_lbb++;
 8015700:	687b      	ldr	r3, [r7, #4]
 8015702:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8015704:	1c5a      	adds	r2, r3, #1
 8015706:	687b      	ldr	r3, [r7, #4]
 8015708:	65da      	str	r2, [r3, #92]	; 0x5c
    /* optlen does not influence snd_buf */
  }
  if (flags & TCP_FIN) {
 801570a:	78fb      	ldrb	r3, [r7, #3]
 801570c:	f003 0301 	and.w	r3, r3, #1
 8015710:	2b00      	cmp	r3, #0
 8015712:	d006      	beq.n	8015722 <tcp_enqueue_flags+0x16a>
    tcp_set_flags(pcb, TF_FIN);
 8015714:	687b      	ldr	r3, [r7, #4]
 8015716:	8b5b      	ldrh	r3, [r3, #26]
 8015718:	f043 0320 	orr.w	r3, r3, #32
 801571c:	b29a      	uxth	r2, r3
 801571e:	687b      	ldr	r3, [r7, #4]
 8015720:	835a      	strh	r2, [r3, #26]
  }

  /* update number of segments on the queues */
  pcb->snd_queuelen += pbuf_clen(seg->p);
 8015722:	68fb      	ldr	r3, [r7, #12]
 8015724:	685b      	ldr	r3, [r3, #4]
 8015726:	4618      	mov	r0, r3
 8015728:	f7fb fc44 	bl	8010fb4 <pbuf_clen>
 801572c:	4603      	mov	r3, r0
 801572e:	461a      	mov	r2, r3
 8015730:	687b      	ldr	r3, [r7, #4]
 8015732:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 8015736:	4413      	add	r3, r2
 8015738:	b29a      	uxth	r2, r3
 801573a:	687b      	ldr	r3, [r7, #4]
 801573c:	f8a3 2066 	strh.w	r2, [r3, #102]	; 0x66
  LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_enqueue_flags: %"S16_F" (after enqueued)\n", pcb->snd_queuelen));
  if (pcb->snd_queuelen != 0) {
 8015740:	687b      	ldr	r3, [r7, #4]
 8015742:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 8015746:	2b00      	cmp	r3, #0
 8015748:	d00e      	beq.n	8015768 <tcp_enqueue_flags+0x1b0>
    LWIP_ASSERT("tcp_enqueue_flags: invalid queue length",
 801574a:	687b      	ldr	r3, [r7, #4]
 801574c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 801574e:	2b00      	cmp	r3, #0
 8015750:	d10a      	bne.n	8015768 <tcp_enqueue_flags+0x1b0>
 8015752:	687b      	ldr	r3, [r7, #4]
 8015754:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8015756:	2b00      	cmp	r3, #0
 8015758:	d106      	bne.n	8015768 <tcp_enqueue_flags+0x1b0>
 801575a:	4b06      	ldr	r3, [pc, #24]	; (8015774 <tcp_enqueue_flags+0x1bc>)
 801575c:	f240 4265 	movw	r2, #1125	; 0x465
 8015760:	490b      	ldr	r1, [pc, #44]	; (8015790 <tcp_enqueue_flags+0x1d8>)
 8015762:	4806      	ldr	r0, [pc, #24]	; (801577c <tcp_enqueue_flags+0x1c4>)
 8015764:	f004 fa74 	bl	8019c50 <iprintf>
                pcb->unacked != NULL || pcb->unsent != NULL);
  }

  return ERR_OK;
 8015768:	2300      	movs	r3, #0
}
 801576a:	4618      	mov	r0, r3
 801576c:	3720      	adds	r7, #32
 801576e:	46bd      	mov	sp, r7
 8015770:	bd80      	pop	{r7, pc}
 8015772:	bf00      	nop
 8015774:	0801dbfc 	.word	0x0801dbfc
 8015778:	0801e020 	.word	0x0801e020
 801577c:	0801dc50 	.word	0x0801dc50
 8015780:	0801e078 	.word	0x0801e078
 8015784:	0801e098 	.word	0x0801e098
 8015788:	0801e0d4 	.word	0x0801e0d4
 801578c:	0801e0ec 	.word	0x0801e0ec
 8015790:	0801e118 	.word	0x0801e118

08015794 <tcp_output>:
 * @return ERR_OK if data has been sent or nothing to send
 *         another err_t on error
 */
err_t
tcp_output(struct tcp_pcb *pcb)
{
 8015794:	b5b0      	push	{r4, r5, r7, lr}
 8015796:	b08a      	sub	sp, #40	; 0x28
 8015798:	af00      	add	r7, sp, #0
 801579a:	6078      	str	r0, [r7, #4]
  s16_t i = 0;
#endif /* TCP_CWND_DEBUG */

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ASSERT("tcp_output: invalid pcb", pcb != NULL);
 801579c:	687b      	ldr	r3, [r7, #4]
 801579e:	2b00      	cmp	r3, #0
 80157a0:	d106      	bne.n	80157b0 <tcp_output+0x1c>
 80157a2:	4b8a      	ldr	r3, [pc, #552]	; (80159cc <tcp_output+0x238>)
 80157a4:	f240 42e1 	movw	r2, #1249	; 0x4e1
 80157a8:	4989      	ldr	r1, [pc, #548]	; (80159d0 <tcp_output+0x23c>)
 80157aa:	488a      	ldr	r0, [pc, #552]	; (80159d4 <tcp_output+0x240>)
 80157ac:	f004 fa50 	bl	8019c50 <iprintf>
  /* pcb->state LISTEN not allowed here */
  LWIP_ASSERT("don't call tcp_output for listen-pcbs",
 80157b0:	687b      	ldr	r3, [r7, #4]
 80157b2:	7d1b      	ldrb	r3, [r3, #20]
 80157b4:	2b01      	cmp	r3, #1
 80157b6:	d106      	bne.n	80157c6 <tcp_output+0x32>
 80157b8:	4b84      	ldr	r3, [pc, #528]	; (80159cc <tcp_output+0x238>)
 80157ba:	f240 42e3 	movw	r2, #1251	; 0x4e3
 80157be:	4986      	ldr	r1, [pc, #536]	; (80159d8 <tcp_output+0x244>)
 80157c0:	4884      	ldr	r0, [pc, #528]	; (80159d4 <tcp_output+0x240>)
 80157c2:	f004 fa45 	bl	8019c50 <iprintf>

  /* First, check if we are invoked by the TCP input processing
     code. If so, we do not output anything. Instead, we rely on the
     input processing code to call us when input processing is done
     with. */
  if (tcp_input_pcb == pcb) {
 80157c6:	4b85      	ldr	r3, [pc, #532]	; (80159dc <tcp_output+0x248>)
 80157c8:	681b      	ldr	r3, [r3, #0]
 80157ca:	687a      	ldr	r2, [r7, #4]
 80157cc:	429a      	cmp	r2, r3
 80157ce:	d101      	bne.n	80157d4 <tcp_output+0x40>
    return ERR_OK;
 80157d0:	2300      	movs	r3, #0
 80157d2:	e1ce      	b.n	8015b72 <tcp_output+0x3de>
  }

  wnd = LWIP_MIN(pcb->snd_wnd, pcb->cwnd);
 80157d4:	687b      	ldr	r3, [r7, #4]
 80157d6:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 80157da:	687b      	ldr	r3, [r7, #4]
 80157dc:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 80157e0:	4293      	cmp	r3, r2
 80157e2:	bf28      	it	cs
 80157e4:	4613      	movcs	r3, r2
 80157e6:	b29b      	uxth	r3, r3
 80157e8:	61bb      	str	r3, [r7, #24]

  seg = pcb->unsent;
 80157ea:	687b      	ldr	r3, [r7, #4]
 80157ec:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80157ee:	627b      	str	r3, [r7, #36]	; 0x24

  if (seg == NULL) {
 80157f0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80157f2:	2b00      	cmp	r3, #0
 80157f4:	d10b      	bne.n	801580e <tcp_output+0x7a>
                                 ", seg == NULL, ack %"U32_F"\n",
                                 pcb->snd_wnd, pcb->cwnd, wnd, pcb->lastack));

    /* If the TF_ACK_NOW flag is set and the ->unsent queue is empty, construct
     * an empty ACK segment and send it. */
    if (pcb->flags & TF_ACK_NOW) {
 80157f6:	687b      	ldr	r3, [r7, #4]
 80157f8:	8b5b      	ldrh	r3, [r3, #26]
 80157fa:	f003 0302 	and.w	r3, r3, #2
 80157fe:	2b00      	cmp	r3, #0
 8015800:	f000 81aa 	beq.w	8015b58 <tcp_output+0x3c4>
      return tcp_send_empty_ack(pcb);
 8015804:	6878      	ldr	r0, [r7, #4]
 8015806:	f000 fdcb 	bl	80163a0 <tcp_send_empty_ack>
 801580a:	4603      	mov	r3, r0
 801580c:	e1b1      	b.n	8015b72 <tcp_output+0x3de>
                 pcb->snd_wnd, pcb->cwnd, wnd,
                 lwip_ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len,
                 lwip_ntohl(seg->tcphdr->seqno), pcb->lastack));
  }

  netif = tcp_route(pcb, &pcb->local_ip, &pcb->remote_ip);
 801580e:	6879      	ldr	r1, [r7, #4]
 8015810:	687b      	ldr	r3, [r7, #4]
 8015812:	3304      	adds	r3, #4
 8015814:	461a      	mov	r2, r3
 8015816:	6878      	ldr	r0, [r7, #4]
 8015818:	f7ff fc7c 	bl	8015114 <tcp_route>
 801581c:	6178      	str	r0, [r7, #20]
  if (netif == NULL) {
 801581e:	697b      	ldr	r3, [r7, #20]
 8015820:	2b00      	cmp	r3, #0
 8015822:	d102      	bne.n	801582a <tcp_output+0x96>
    return ERR_RTE;
 8015824:	f06f 0303 	mvn.w	r3, #3
 8015828:	e1a3      	b.n	8015b72 <tcp_output+0x3de>
  }

  /* If we don't have a local IP address, we get one from netif */
  if (ip_addr_isany(&pcb->local_ip)) {
 801582a:	687b      	ldr	r3, [r7, #4]
 801582c:	2b00      	cmp	r3, #0
 801582e:	d003      	beq.n	8015838 <tcp_output+0xa4>
 8015830:	687b      	ldr	r3, [r7, #4]
 8015832:	681b      	ldr	r3, [r3, #0]
 8015834:	2b00      	cmp	r3, #0
 8015836:	d111      	bne.n	801585c <tcp_output+0xc8>
    const ip_addr_t *local_ip = ip_netif_get_local_ip(netif, &pcb->remote_ip);
 8015838:	697b      	ldr	r3, [r7, #20]
 801583a:	2b00      	cmp	r3, #0
 801583c:	d002      	beq.n	8015844 <tcp_output+0xb0>
 801583e:	697b      	ldr	r3, [r7, #20]
 8015840:	3304      	adds	r3, #4
 8015842:	e000      	b.n	8015846 <tcp_output+0xb2>
 8015844:	2300      	movs	r3, #0
 8015846:	613b      	str	r3, [r7, #16]
    if (local_ip == NULL) {
 8015848:	693b      	ldr	r3, [r7, #16]
 801584a:	2b00      	cmp	r3, #0
 801584c:	d102      	bne.n	8015854 <tcp_output+0xc0>
      return ERR_RTE;
 801584e:	f06f 0303 	mvn.w	r3, #3
 8015852:	e18e      	b.n	8015b72 <tcp_output+0x3de>
    }
    ip_addr_copy(pcb->local_ip, *local_ip);
 8015854:	693b      	ldr	r3, [r7, #16]
 8015856:	681a      	ldr	r2, [r3, #0]
 8015858:	687b      	ldr	r3, [r7, #4]
 801585a:	601a      	str	r2, [r3, #0]
  }

  /* Handle the current segment not fitting within the window */
  if (lwip_ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len > wnd) {
 801585c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801585e:	68db      	ldr	r3, [r3, #12]
 8015860:	685b      	ldr	r3, [r3, #4]
 8015862:	4618      	mov	r0, r3
 8015864:	f7f9 ff4f 	bl	800f706 <lwip_htonl>
 8015868:	4602      	mov	r2, r0
 801586a:	687b      	ldr	r3, [r7, #4]
 801586c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 801586e:	1ad3      	subs	r3, r2, r3
 8015870:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8015872:	8912      	ldrh	r2, [r2, #8]
 8015874:	4413      	add	r3, r2
 8015876:	69ba      	ldr	r2, [r7, #24]
 8015878:	429a      	cmp	r2, r3
 801587a:	d227      	bcs.n	80158cc <tcp_output+0x138>
     * within the remaining (could be 0) send window and RTO timer is not running (we
     * have no in-flight data). If window is still too small after persist timer fires,
     * then we split the segment. We don't consider the congestion window since a cwnd
     * smaller than 1 SMSS implies in-flight data
     */
    if (wnd == pcb->snd_wnd && pcb->unacked == NULL && pcb->persist_backoff == 0) {
 801587c:	687b      	ldr	r3, [r7, #4]
 801587e:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 8015882:	461a      	mov	r2, r3
 8015884:	69bb      	ldr	r3, [r7, #24]
 8015886:	4293      	cmp	r3, r2
 8015888:	d114      	bne.n	80158b4 <tcp_output+0x120>
 801588a:	687b      	ldr	r3, [r7, #4]
 801588c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 801588e:	2b00      	cmp	r3, #0
 8015890:	d110      	bne.n	80158b4 <tcp_output+0x120>
 8015892:	687b      	ldr	r3, [r7, #4]
 8015894:	f893 3099 	ldrb.w	r3, [r3, #153]	; 0x99
 8015898:	2b00      	cmp	r3, #0
 801589a:	d10b      	bne.n	80158b4 <tcp_output+0x120>
      pcb->persist_cnt = 0;
 801589c:	687b      	ldr	r3, [r7, #4]
 801589e:	2200      	movs	r2, #0
 80158a0:	f883 2098 	strb.w	r2, [r3, #152]	; 0x98
      pcb->persist_backoff = 1;
 80158a4:	687b      	ldr	r3, [r7, #4]
 80158a6:	2201      	movs	r2, #1
 80158a8:	f883 2099 	strb.w	r2, [r3, #153]	; 0x99
      pcb->persist_probe = 0;
 80158ac:	687b      	ldr	r3, [r7, #4]
 80158ae:	2200      	movs	r2, #0
 80158b0:	f883 209a 	strb.w	r2, [r3, #154]	; 0x9a
    }
    /* We need an ACK, but can't send data now, so send an empty ACK */
    if (pcb->flags & TF_ACK_NOW) {
 80158b4:	687b      	ldr	r3, [r7, #4]
 80158b6:	8b5b      	ldrh	r3, [r3, #26]
 80158b8:	f003 0302 	and.w	r3, r3, #2
 80158bc:	2b00      	cmp	r3, #0
 80158be:	f000 814d 	beq.w	8015b5c <tcp_output+0x3c8>
      return tcp_send_empty_ack(pcb);
 80158c2:	6878      	ldr	r0, [r7, #4]
 80158c4:	f000 fd6c 	bl	80163a0 <tcp_send_empty_ack>
 80158c8:	4603      	mov	r3, r0
 80158ca:	e152      	b.n	8015b72 <tcp_output+0x3de>
    }
    goto output_done;
  }
  /* Stop persist timer, above conditions are not active */
  pcb->persist_backoff = 0;
 80158cc:	687b      	ldr	r3, [r7, #4]
 80158ce:	2200      	movs	r2, #0
 80158d0:	f883 2099 	strb.w	r2, [r3, #153]	; 0x99

  /* useg should point to last segment on unacked queue */
  useg = pcb->unacked;
 80158d4:	687b      	ldr	r3, [r7, #4]
 80158d6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80158d8:	623b      	str	r3, [r7, #32]
  if (useg != NULL) {
 80158da:	6a3b      	ldr	r3, [r7, #32]
 80158dc:	2b00      	cmp	r3, #0
 80158de:	f000 811c 	beq.w	8015b1a <tcp_output+0x386>
    for (; useg->next != NULL; useg = useg->next);
 80158e2:	e002      	b.n	80158ea <tcp_output+0x156>
 80158e4:	6a3b      	ldr	r3, [r7, #32]
 80158e6:	681b      	ldr	r3, [r3, #0]
 80158e8:	623b      	str	r3, [r7, #32]
 80158ea:	6a3b      	ldr	r3, [r7, #32]
 80158ec:	681b      	ldr	r3, [r3, #0]
 80158ee:	2b00      	cmp	r3, #0
 80158f0:	d1f8      	bne.n	80158e4 <tcp_output+0x150>
  }
  /* data available and window allows it to be sent? */
  while (seg != NULL &&
 80158f2:	e112      	b.n	8015b1a <tcp_output+0x386>
         lwip_ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len <= wnd) {
    LWIP_ASSERT("RST not expected here!",
 80158f4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80158f6:	68db      	ldr	r3, [r3, #12]
 80158f8:	899b      	ldrh	r3, [r3, #12]
 80158fa:	b29b      	uxth	r3, r3
 80158fc:	4618      	mov	r0, r3
 80158fe:	f7f9 feed 	bl	800f6dc <lwip_htons>
 8015902:	4603      	mov	r3, r0
 8015904:	b2db      	uxtb	r3, r3
 8015906:	f003 0304 	and.w	r3, r3, #4
 801590a:	2b00      	cmp	r3, #0
 801590c:	d006      	beq.n	801591c <tcp_output+0x188>
 801590e:	4b2f      	ldr	r3, [pc, #188]	; (80159cc <tcp_output+0x238>)
 8015910:	f240 5236 	movw	r2, #1334	; 0x536
 8015914:	4932      	ldr	r1, [pc, #200]	; (80159e0 <tcp_output+0x24c>)
 8015916:	482f      	ldr	r0, [pc, #188]	; (80159d4 <tcp_output+0x240>)
 8015918:	f004 f99a 	bl	8019c50 <iprintf>
     * - if tcp_write had a memory error before (prevent delayed ACK timeout) or
     * - if FIN was already enqueued for this PCB (SYN is always alone in a segment -
     *   either seg->next != NULL or pcb->unacked == NULL;
     *   RST is no sent using tcp_write/tcp_output.
     */
    if ((tcp_do_output_nagle(pcb) == 0) &&
 801591c:	687b      	ldr	r3, [r7, #4]
 801591e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8015920:	2b00      	cmp	r3, #0
 8015922:	d01f      	beq.n	8015964 <tcp_output+0x1d0>
 8015924:	687b      	ldr	r3, [r7, #4]
 8015926:	8b5b      	ldrh	r3, [r3, #26]
 8015928:	f003 0344 	and.w	r3, r3, #68	; 0x44
 801592c:	2b00      	cmp	r3, #0
 801592e:	d119      	bne.n	8015964 <tcp_output+0x1d0>
 8015930:	687b      	ldr	r3, [r7, #4]
 8015932:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8015934:	2b00      	cmp	r3, #0
 8015936:	d00b      	beq.n	8015950 <tcp_output+0x1bc>
 8015938:	687b      	ldr	r3, [r7, #4]
 801593a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 801593c:	681b      	ldr	r3, [r3, #0]
 801593e:	2b00      	cmp	r3, #0
 8015940:	d110      	bne.n	8015964 <tcp_output+0x1d0>
 8015942:	687b      	ldr	r3, [r7, #4]
 8015944:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8015946:	891a      	ldrh	r2, [r3, #8]
 8015948:	687b      	ldr	r3, [r7, #4]
 801594a:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 801594c:	429a      	cmp	r2, r3
 801594e:	d209      	bcs.n	8015964 <tcp_output+0x1d0>
 8015950:	687b      	ldr	r3, [r7, #4]
 8015952:	f8b3 3064 	ldrh.w	r3, [r3, #100]	; 0x64
 8015956:	2b00      	cmp	r3, #0
 8015958:	d004      	beq.n	8015964 <tcp_output+0x1d0>
 801595a:	687b      	ldr	r3, [r7, #4]
 801595c:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 8015960:	2b0f      	cmp	r3, #15
 8015962:	d901      	bls.n	8015968 <tcp_output+0x1d4>
 8015964:	2301      	movs	r3, #1
 8015966:	e000      	b.n	801596a <tcp_output+0x1d6>
 8015968:	2300      	movs	r3, #0
 801596a:	2b00      	cmp	r3, #0
 801596c:	d106      	bne.n	801597c <tcp_output+0x1e8>
        ((pcb->flags & (TF_NAGLEMEMERR | TF_FIN)) == 0)) {
 801596e:	687b      	ldr	r3, [r7, #4]
 8015970:	8b5b      	ldrh	r3, [r3, #26]
 8015972:	f003 03a0 	and.w	r3, r3, #160	; 0xa0
    if ((tcp_do_output_nagle(pcb) == 0) &&
 8015976:	2b00      	cmp	r3, #0
 8015978:	f000 80e4 	beq.w	8015b44 <tcp_output+0x3b0>
                                 pcb->lastack,
                                 lwip_ntohl(seg->tcphdr->seqno), pcb->lastack, i));
    ++i;
#endif /* TCP_CWND_DEBUG */

    if (pcb->state != SYN_SENT) {
 801597c:	687b      	ldr	r3, [r7, #4]
 801597e:	7d1b      	ldrb	r3, [r3, #20]
 8015980:	2b02      	cmp	r3, #2
 8015982:	d00d      	beq.n	80159a0 <tcp_output+0x20c>
      TCPH_SET_FLAG(seg->tcphdr, TCP_ACK);
 8015984:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8015986:	68db      	ldr	r3, [r3, #12]
 8015988:	899b      	ldrh	r3, [r3, #12]
 801598a:	b29c      	uxth	r4, r3
 801598c:	2010      	movs	r0, #16
 801598e:	f7f9 fea5 	bl	800f6dc <lwip_htons>
 8015992:	4603      	mov	r3, r0
 8015994:	461a      	mov	r2, r3
 8015996:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8015998:	68db      	ldr	r3, [r3, #12]
 801599a:	4322      	orrs	r2, r4
 801599c:	b292      	uxth	r2, r2
 801599e:	819a      	strh	r2, [r3, #12]
    }

    err = tcp_output_segment(seg, pcb, netif);
 80159a0:	697a      	ldr	r2, [r7, #20]
 80159a2:	6879      	ldr	r1, [r7, #4]
 80159a4:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80159a6:	f000 f909 	bl	8015bbc <tcp_output_segment>
 80159aa:	4603      	mov	r3, r0
 80159ac:	73fb      	strb	r3, [r7, #15]
    if (err != ERR_OK) {
 80159ae:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80159b2:	2b00      	cmp	r3, #0
 80159b4:	d016      	beq.n	80159e4 <tcp_output+0x250>
      /* segment could not be sent, for whatever reason */
      tcp_set_flags(pcb, TF_NAGLEMEMERR);
 80159b6:	687b      	ldr	r3, [r7, #4]
 80159b8:	8b5b      	ldrh	r3, [r3, #26]
 80159ba:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80159be:	b29a      	uxth	r2, r3
 80159c0:	687b      	ldr	r3, [r7, #4]
 80159c2:	835a      	strh	r2, [r3, #26]
      return err;
 80159c4:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80159c8:	e0d3      	b.n	8015b72 <tcp_output+0x3de>
 80159ca:	bf00      	nop
 80159cc:	0801dbfc 	.word	0x0801dbfc
 80159d0:	0801e140 	.word	0x0801e140
 80159d4:	0801dc50 	.word	0x0801dc50
 80159d8:	0801e158 	.word	0x0801e158
 80159dc:	20007124 	.word	0x20007124
 80159e0:	0801e180 	.word	0x0801e180
    }
#if TCP_OVERSIZE_DBGCHECK
    seg->oversize_left = 0;
#endif /* TCP_OVERSIZE_DBGCHECK */
    pcb->unsent = seg->next;
 80159e4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80159e6:	681a      	ldr	r2, [r3, #0]
 80159e8:	687b      	ldr	r3, [r7, #4]
 80159ea:	66da      	str	r2, [r3, #108]	; 0x6c
    if (pcb->state != SYN_SENT) {
 80159ec:	687b      	ldr	r3, [r7, #4]
 80159ee:	7d1b      	ldrb	r3, [r3, #20]
 80159f0:	2b02      	cmp	r3, #2
 80159f2:	d006      	beq.n	8015a02 <tcp_output+0x26e>
      tcp_clear_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 80159f4:	687b      	ldr	r3, [r7, #4]
 80159f6:	8b5b      	ldrh	r3, [r3, #26]
 80159f8:	f023 0303 	bic.w	r3, r3, #3
 80159fc:	b29a      	uxth	r2, r3
 80159fe:	687b      	ldr	r3, [r7, #4]
 8015a00:	835a      	strh	r2, [r3, #26]
    }
    snd_nxt = lwip_ntohl(seg->tcphdr->seqno) + TCP_TCPLEN(seg);
 8015a02:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8015a04:	68db      	ldr	r3, [r3, #12]
 8015a06:	685b      	ldr	r3, [r3, #4]
 8015a08:	4618      	mov	r0, r3
 8015a0a:	f7f9 fe7c 	bl	800f706 <lwip_htonl>
 8015a0e:	4604      	mov	r4, r0
 8015a10:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8015a12:	891b      	ldrh	r3, [r3, #8]
 8015a14:	461d      	mov	r5, r3
 8015a16:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8015a18:	68db      	ldr	r3, [r3, #12]
 8015a1a:	899b      	ldrh	r3, [r3, #12]
 8015a1c:	b29b      	uxth	r3, r3
 8015a1e:	4618      	mov	r0, r3
 8015a20:	f7f9 fe5c 	bl	800f6dc <lwip_htons>
 8015a24:	4603      	mov	r3, r0
 8015a26:	b2db      	uxtb	r3, r3
 8015a28:	f003 0303 	and.w	r3, r3, #3
 8015a2c:	2b00      	cmp	r3, #0
 8015a2e:	d001      	beq.n	8015a34 <tcp_output+0x2a0>
 8015a30:	2301      	movs	r3, #1
 8015a32:	e000      	b.n	8015a36 <tcp_output+0x2a2>
 8015a34:	2300      	movs	r3, #0
 8015a36:	442b      	add	r3, r5
 8015a38:	4423      	add	r3, r4
 8015a3a:	60bb      	str	r3, [r7, #8]
    if (TCP_SEQ_LT(pcb->snd_nxt, snd_nxt)) {
 8015a3c:	687b      	ldr	r3, [r7, #4]
 8015a3e:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8015a40:	68bb      	ldr	r3, [r7, #8]
 8015a42:	1ad3      	subs	r3, r2, r3
 8015a44:	2b00      	cmp	r3, #0
 8015a46:	da02      	bge.n	8015a4e <tcp_output+0x2ba>
      pcb->snd_nxt = snd_nxt;
 8015a48:	687b      	ldr	r3, [r7, #4]
 8015a4a:	68ba      	ldr	r2, [r7, #8]
 8015a4c:	651a      	str	r2, [r3, #80]	; 0x50
    }
    /* put segment on unacknowledged list if length > 0 */
    if (TCP_TCPLEN(seg) > 0) {
 8015a4e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8015a50:	891b      	ldrh	r3, [r3, #8]
 8015a52:	461c      	mov	r4, r3
 8015a54:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8015a56:	68db      	ldr	r3, [r3, #12]
 8015a58:	899b      	ldrh	r3, [r3, #12]
 8015a5a:	b29b      	uxth	r3, r3
 8015a5c:	4618      	mov	r0, r3
 8015a5e:	f7f9 fe3d 	bl	800f6dc <lwip_htons>
 8015a62:	4603      	mov	r3, r0
 8015a64:	b2db      	uxtb	r3, r3
 8015a66:	f003 0303 	and.w	r3, r3, #3
 8015a6a:	2b00      	cmp	r3, #0
 8015a6c:	d001      	beq.n	8015a72 <tcp_output+0x2de>
 8015a6e:	2301      	movs	r3, #1
 8015a70:	e000      	b.n	8015a74 <tcp_output+0x2e0>
 8015a72:	2300      	movs	r3, #0
 8015a74:	4423      	add	r3, r4
 8015a76:	2b00      	cmp	r3, #0
 8015a78:	d049      	beq.n	8015b0e <tcp_output+0x37a>
      seg->next = NULL;
 8015a7a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8015a7c:	2200      	movs	r2, #0
 8015a7e:	601a      	str	r2, [r3, #0]
      /* unacked list is empty? */
      if (pcb->unacked == NULL) {
 8015a80:	687b      	ldr	r3, [r7, #4]
 8015a82:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8015a84:	2b00      	cmp	r3, #0
 8015a86:	d105      	bne.n	8015a94 <tcp_output+0x300>
        pcb->unacked = seg;
 8015a88:	687b      	ldr	r3, [r7, #4]
 8015a8a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8015a8c:	671a      	str	r2, [r3, #112]	; 0x70
        useg = seg;
 8015a8e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8015a90:	623b      	str	r3, [r7, #32]
 8015a92:	e03f      	b.n	8015b14 <tcp_output+0x380>
        /* unacked list is not empty? */
      } else {
        /* In the case of fast retransmit, the packet should not go to the tail
         * of the unacked queue, but rather somewhere before it. We need to check for
         * this case. -STJ Jul 27, 2004 */
        if (TCP_SEQ_LT(lwip_ntohl(seg->tcphdr->seqno), lwip_ntohl(useg->tcphdr->seqno))) {
 8015a94:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8015a96:	68db      	ldr	r3, [r3, #12]
 8015a98:	685b      	ldr	r3, [r3, #4]
 8015a9a:	4618      	mov	r0, r3
 8015a9c:	f7f9 fe33 	bl	800f706 <lwip_htonl>
 8015aa0:	4604      	mov	r4, r0
 8015aa2:	6a3b      	ldr	r3, [r7, #32]
 8015aa4:	68db      	ldr	r3, [r3, #12]
 8015aa6:	685b      	ldr	r3, [r3, #4]
 8015aa8:	4618      	mov	r0, r3
 8015aaa:	f7f9 fe2c 	bl	800f706 <lwip_htonl>
 8015aae:	4603      	mov	r3, r0
 8015ab0:	1ae3      	subs	r3, r4, r3
 8015ab2:	2b00      	cmp	r3, #0
 8015ab4:	da24      	bge.n	8015b00 <tcp_output+0x36c>
          /* add segment to before tail of unacked list, keeping the list sorted */
          struct tcp_seg **cur_seg = &(pcb->unacked);
 8015ab6:	687b      	ldr	r3, [r7, #4]
 8015ab8:	3370      	adds	r3, #112	; 0x70
 8015aba:	61fb      	str	r3, [r7, #28]
          while (*cur_seg &&
 8015abc:	e002      	b.n	8015ac4 <tcp_output+0x330>
                 TCP_SEQ_LT(lwip_ntohl((*cur_seg)->tcphdr->seqno), lwip_ntohl(seg->tcphdr->seqno))) {
            cur_seg = &((*cur_seg)->next );
 8015abe:	69fb      	ldr	r3, [r7, #28]
 8015ac0:	681b      	ldr	r3, [r3, #0]
 8015ac2:	61fb      	str	r3, [r7, #28]
          while (*cur_seg &&
 8015ac4:	69fb      	ldr	r3, [r7, #28]
 8015ac6:	681b      	ldr	r3, [r3, #0]
 8015ac8:	2b00      	cmp	r3, #0
 8015aca:	d011      	beq.n	8015af0 <tcp_output+0x35c>
                 TCP_SEQ_LT(lwip_ntohl((*cur_seg)->tcphdr->seqno), lwip_ntohl(seg->tcphdr->seqno))) {
 8015acc:	69fb      	ldr	r3, [r7, #28]
 8015ace:	681b      	ldr	r3, [r3, #0]
 8015ad0:	68db      	ldr	r3, [r3, #12]
 8015ad2:	685b      	ldr	r3, [r3, #4]
 8015ad4:	4618      	mov	r0, r3
 8015ad6:	f7f9 fe16 	bl	800f706 <lwip_htonl>
 8015ada:	4604      	mov	r4, r0
 8015adc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8015ade:	68db      	ldr	r3, [r3, #12]
 8015ae0:	685b      	ldr	r3, [r3, #4]
 8015ae2:	4618      	mov	r0, r3
 8015ae4:	f7f9 fe0f 	bl	800f706 <lwip_htonl>
 8015ae8:	4603      	mov	r3, r0
 8015aea:	1ae3      	subs	r3, r4, r3
          while (*cur_seg &&
 8015aec:	2b00      	cmp	r3, #0
 8015aee:	dbe6      	blt.n	8015abe <tcp_output+0x32a>
          }
          seg->next = (*cur_seg);
 8015af0:	69fb      	ldr	r3, [r7, #28]
 8015af2:	681a      	ldr	r2, [r3, #0]
 8015af4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8015af6:	601a      	str	r2, [r3, #0]
          (*cur_seg) = seg;
 8015af8:	69fb      	ldr	r3, [r7, #28]
 8015afa:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8015afc:	601a      	str	r2, [r3, #0]
 8015afe:	e009      	b.n	8015b14 <tcp_output+0x380>
        } else {
          /* add segment to tail of unacked list */
          useg->next = seg;
 8015b00:	6a3b      	ldr	r3, [r7, #32]
 8015b02:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8015b04:	601a      	str	r2, [r3, #0]
          useg = useg->next;
 8015b06:	6a3b      	ldr	r3, [r7, #32]
 8015b08:	681b      	ldr	r3, [r3, #0]
 8015b0a:	623b      	str	r3, [r7, #32]
 8015b0c:	e002      	b.n	8015b14 <tcp_output+0x380>
        }
      }
      /* do not queue empty segments on the unacked list */
    } else {
      tcp_seg_free(seg);
 8015b0e:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8015b10:	f7fc fc3f 	bl	8012392 <tcp_seg_free>
    }
    seg = pcb->unsent;
 8015b14:	687b      	ldr	r3, [r7, #4]
 8015b16:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8015b18:	627b      	str	r3, [r7, #36]	; 0x24
  while (seg != NULL &&
 8015b1a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8015b1c:	2b00      	cmp	r3, #0
 8015b1e:	d012      	beq.n	8015b46 <tcp_output+0x3b2>
         lwip_ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len <= wnd) {
 8015b20:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8015b22:	68db      	ldr	r3, [r3, #12]
 8015b24:	685b      	ldr	r3, [r3, #4]
 8015b26:	4618      	mov	r0, r3
 8015b28:	f7f9 fded 	bl	800f706 <lwip_htonl>
 8015b2c:	4602      	mov	r2, r0
 8015b2e:	687b      	ldr	r3, [r7, #4]
 8015b30:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8015b32:	1ad3      	subs	r3, r2, r3
 8015b34:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8015b36:	8912      	ldrh	r2, [r2, #8]
 8015b38:	4413      	add	r3, r2
  while (seg != NULL &&
 8015b3a:	69ba      	ldr	r2, [r7, #24]
 8015b3c:	429a      	cmp	r2, r3
 8015b3e:	f4bf aed9 	bcs.w	80158f4 <tcp_output+0x160>
 8015b42:	e000      	b.n	8015b46 <tcp_output+0x3b2>
      break;
 8015b44:	bf00      	nop
  }
#if TCP_OVERSIZE
  if (pcb->unsent == NULL) {
 8015b46:	687b      	ldr	r3, [r7, #4]
 8015b48:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8015b4a:	2b00      	cmp	r3, #0
 8015b4c:	d108      	bne.n	8015b60 <tcp_output+0x3cc>
    /* last unsent has been removed, reset unsent_oversize */
    pcb->unsent_oversize = 0;
 8015b4e:	687b      	ldr	r3, [r7, #4]
 8015b50:	2200      	movs	r2, #0
 8015b52:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
 8015b56:	e004      	b.n	8015b62 <tcp_output+0x3ce>
    goto output_done;
 8015b58:	bf00      	nop
 8015b5a:	e002      	b.n	8015b62 <tcp_output+0x3ce>
    goto output_done;
 8015b5c:	bf00      	nop
 8015b5e:	e000      	b.n	8015b62 <tcp_output+0x3ce>
  }
#endif /* TCP_OVERSIZE */

output_done:
 8015b60:	bf00      	nop
  tcp_clear_flags(pcb, TF_NAGLEMEMERR);
 8015b62:	687b      	ldr	r3, [r7, #4]
 8015b64:	8b5b      	ldrh	r3, [r3, #26]
 8015b66:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8015b6a:	b29a      	uxth	r2, r3
 8015b6c:	687b      	ldr	r3, [r7, #4]
 8015b6e:	835a      	strh	r2, [r3, #26]
  return ERR_OK;
 8015b70:	2300      	movs	r3, #0
}
 8015b72:	4618      	mov	r0, r3
 8015b74:	3728      	adds	r7, #40	; 0x28
 8015b76:	46bd      	mov	sp, r7
 8015b78:	bdb0      	pop	{r4, r5, r7, pc}
 8015b7a:	bf00      	nop

08015b7c <tcp_output_segment_busy>:
 * @arg seg the tcp segment to check
 * @return 1 if ref != 1, 0 if ref == 1
 */
static int
tcp_output_segment_busy(const struct tcp_seg *seg)
{
 8015b7c:	b580      	push	{r7, lr}
 8015b7e:	b082      	sub	sp, #8
 8015b80:	af00      	add	r7, sp, #0
 8015b82:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_output_segment_busy: invalid seg", seg != NULL);
 8015b84:	687b      	ldr	r3, [r7, #4]
 8015b86:	2b00      	cmp	r3, #0
 8015b88:	d106      	bne.n	8015b98 <tcp_output_segment_busy+0x1c>
 8015b8a:	4b09      	ldr	r3, [pc, #36]	; (8015bb0 <tcp_output_segment_busy+0x34>)
 8015b8c:	f240 529a 	movw	r2, #1434	; 0x59a
 8015b90:	4908      	ldr	r1, [pc, #32]	; (8015bb4 <tcp_output_segment_busy+0x38>)
 8015b92:	4809      	ldr	r0, [pc, #36]	; (8015bb8 <tcp_output_segment_busy+0x3c>)
 8015b94:	f004 f85c 	bl	8019c50 <iprintf>

  /* We only need to check the first pbuf here:
     If a pbuf is queued for transmission, a driver calls pbuf_ref(),
     which only changes the ref count of the first pbuf */
  if (seg->p->ref != 1) {
 8015b98:	687b      	ldr	r3, [r7, #4]
 8015b9a:	685b      	ldr	r3, [r3, #4]
 8015b9c:	7b9b      	ldrb	r3, [r3, #14]
 8015b9e:	2b01      	cmp	r3, #1
 8015ba0:	d001      	beq.n	8015ba6 <tcp_output_segment_busy+0x2a>
    /* other reference found */
    return 1;
 8015ba2:	2301      	movs	r3, #1
 8015ba4:	e000      	b.n	8015ba8 <tcp_output_segment_busy+0x2c>
  }
  /* no other references found */
  return 0;
 8015ba6:	2300      	movs	r3, #0
}
 8015ba8:	4618      	mov	r0, r3
 8015baa:	3708      	adds	r7, #8
 8015bac:	46bd      	mov	sp, r7
 8015bae:	bd80      	pop	{r7, pc}
 8015bb0:	0801dbfc 	.word	0x0801dbfc
 8015bb4:	0801e198 	.word	0x0801e198
 8015bb8:	0801dc50 	.word	0x0801dc50

08015bbc <tcp_output_segment>:
 * @param pcb the tcp_pcb for the TCP connection used to send the segment
 * @param netif the netif used to send the segment
 */
static err_t
tcp_output_segment(struct tcp_seg *seg, struct tcp_pcb *pcb, struct netif *netif)
{
 8015bbc:	b5b0      	push	{r4, r5, r7, lr}
 8015bbe:	b08c      	sub	sp, #48	; 0x30
 8015bc0:	af04      	add	r7, sp, #16
 8015bc2:	60f8      	str	r0, [r7, #12]
 8015bc4:	60b9      	str	r1, [r7, #8]
 8015bc6:	607a      	str	r2, [r7, #4]
  u32_t *opts;
#if TCP_CHECKSUM_ON_COPY
  int seg_chksum_was_swapped = 0;
#endif

  LWIP_ASSERT("tcp_output_segment: invalid seg", seg != NULL);
 8015bc8:	68fb      	ldr	r3, [r7, #12]
 8015bca:	2b00      	cmp	r3, #0
 8015bcc:	d106      	bne.n	8015bdc <tcp_output_segment+0x20>
 8015bce:	4b64      	ldr	r3, [pc, #400]	; (8015d60 <tcp_output_segment+0x1a4>)
 8015bd0:	f44f 62b7 	mov.w	r2, #1464	; 0x5b8
 8015bd4:	4963      	ldr	r1, [pc, #396]	; (8015d64 <tcp_output_segment+0x1a8>)
 8015bd6:	4864      	ldr	r0, [pc, #400]	; (8015d68 <tcp_output_segment+0x1ac>)
 8015bd8:	f004 f83a 	bl	8019c50 <iprintf>
  LWIP_ASSERT("tcp_output_segment: invalid pcb", pcb != NULL);
 8015bdc:	68bb      	ldr	r3, [r7, #8]
 8015bde:	2b00      	cmp	r3, #0
 8015be0:	d106      	bne.n	8015bf0 <tcp_output_segment+0x34>
 8015be2:	4b5f      	ldr	r3, [pc, #380]	; (8015d60 <tcp_output_segment+0x1a4>)
 8015be4:	f240 52b9 	movw	r2, #1465	; 0x5b9
 8015be8:	4960      	ldr	r1, [pc, #384]	; (8015d6c <tcp_output_segment+0x1b0>)
 8015bea:	485f      	ldr	r0, [pc, #380]	; (8015d68 <tcp_output_segment+0x1ac>)
 8015bec:	f004 f830 	bl	8019c50 <iprintf>
  LWIP_ASSERT("tcp_output_segment: invalid netif", netif != NULL);
 8015bf0:	687b      	ldr	r3, [r7, #4]
 8015bf2:	2b00      	cmp	r3, #0
 8015bf4:	d106      	bne.n	8015c04 <tcp_output_segment+0x48>
 8015bf6:	4b5a      	ldr	r3, [pc, #360]	; (8015d60 <tcp_output_segment+0x1a4>)
 8015bf8:	f240 52ba 	movw	r2, #1466	; 0x5ba
 8015bfc:	495c      	ldr	r1, [pc, #368]	; (8015d70 <tcp_output_segment+0x1b4>)
 8015bfe:	485a      	ldr	r0, [pc, #360]	; (8015d68 <tcp_output_segment+0x1ac>)
 8015c00:	f004 f826 	bl	8019c50 <iprintf>

  if (tcp_output_segment_busy(seg)) {
 8015c04:	68f8      	ldr	r0, [r7, #12]
 8015c06:	f7ff ffb9 	bl	8015b7c <tcp_output_segment_busy>
 8015c0a:	4603      	mov	r3, r0
 8015c0c:	2b00      	cmp	r3, #0
 8015c0e:	d001      	beq.n	8015c14 <tcp_output_segment+0x58>
    /* This should not happen: rexmit functions should have checked this.
       However, since this function modifies p->len, we must not continue in this case. */
    LWIP_DEBUGF(TCP_RTO_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("tcp_output_segment: segment busy\n"));
    return ERR_OK;
 8015c10:	2300      	movs	r3, #0
 8015c12:	e0a1      	b.n	8015d58 <tcp_output_segment+0x19c>
  }

  /* The TCP header has already been constructed, but the ackno and
   wnd fields remain. */
  seg->tcphdr->ackno = lwip_htonl(pcb->rcv_nxt);
 8015c14:	68bb      	ldr	r3, [r7, #8]
 8015c16:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8015c18:	68fb      	ldr	r3, [r7, #12]
 8015c1a:	68dc      	ldr	r4, [r3, #12]
 8015c1c:	4610      	mov	r0, r2
 8015c1e:	f7f9 fd72 	bl	800f706 <lwip_htonl>
 8015c22:	4603      	mov	r3, r0
 8015c24:	60a3      	str	r3, [r4, #8]
       the window scale option) is never scaled. */
    seg->tcphdr->wnd = lwip_htons(TCPWND_MIN16(pcb->rcv_ann_wnd));
  } else
#endif /* LWIP_WND_SCALE */
  {
    seg->tcphdr->wnd = lwip_htons(TCPWND_MIN16(RCV_WND_SCALE(pcb, pcb->rcv_ann_wnd)));
 8015c26:	68bb      	ldr	r3, [r7, #8]
 8015c28:	8d5a      	ldrh	r2, [r3, #42]	; 0x2a
 8015c2a:	68fb      	ldr	r3, [r7, #12]
 8015c2c:	68dc      	ldr	r4, [r3, #12]
 8015c2e:	4610      	mov	r0, r2
 8015c30:	f7f9 fd54 	bl	800f6dc <lwip_htons>
 8015c34:	4603      	mov	r3, r0
 8015c36:	81e3      	strh	r3, [r4, #14]
  }

  pcb->rcv_ann_right_edge = pcb->rcv_nxt + pcb->rcv_ann_wnd;
 8015c38:	68bb      	ldr	r3, [r7, #8]
 8015c3a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8015c3c:	68ba      	ldr	r2, [r7, #8]
 8015c3e:	8d52      	ldrh	r2, [r2, #42]	; 0x2a
 8015c40:	441a      	add	r2, r3
 8015c42:	68bb      	ldr	r3, [r7, #8]
 8015c44:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Add any requested options.  NB MSS option is only set on SYN
     packets, so ignore it here */
  /* cast through void* to get rid of alignment warnings */
  opts = (u32_t *)(void *)(seg->tcphdr + 1);
 8015c46:	68fb      	ldr	r3, [r7, #12]
 8015c48:	68db      	ldr	r3, [r3, #12]
 8015c4a:	3314      	adds	r3, #20
 8015c4c:	61fb      	str	r3, [r7, #28]
  if (seg->flags & TF_SEG_OPTS_MSS) {
 8015c4e:	68fb      	ldr	r3, [r7, #12]
 8015c50:	7a9b      	ldrb	r3, [r3, #10]
 8015c52:	f003 0301 	and.w	r3, r3, #1
 8015c56:	2b00      	cmp	r3, #0
 8015c58:	d015      	beq.n	8015c86 <tcp_output_segment+0xca>
    u16_t mss;
#if TCP_CALCULATE_EFF_SEND_MSS
    mss = tcp_eff_send_mss_netif(TCP_MSS, netif, &pcb->remote_ip);
 8015c5a:	68bb      	ldr	r3, [r7, #8]
 8015c5c:	3304      	adds	r3, #4
 8015c5e:	461a      	mov	r2, r3
 8015c60:	6879      	ldr	r1, [r7, #4]
 8015c62:	f240 50b4 	movw	r0, #1460	; 0x5b4
 8015c66:	f7fc fe8b 	bl	8012980 <tcp_eff_send_mss_netif>
 8015c6a:	4603      	mov	r3, r0
 8015c6c:	837b      	strh	r3, [r7, #26]
#else /* TCP_CALCULATE_EFF_SEND_MSS */
    mss = TCP_MSS;
#endif /* TCP_CALCULATE_EFF_SEND_MSS */
    *opts = TCP_BUILD_MSS_OPTION(mss);
 8015c6e:	8b7b      	ldrh	r3, [r7, #26]
 8015c70:	f043 7301 	orr.w	r3, r3, #33816576	; 0x2040000
 8015c74:	4618      	mov	r0, r3
 8015c76:	f7f9 fd46 	bl	800f706 <lwip_htonl>
 8015c7a:	4602      	mov	r2, r0
 8015c7c:	69fb      	ldr	r3, [r7, #28]
 8015c7e:	601a      	str	r2, [r3, #0]
    opts += 1;
 8015c80:	69fb      	ldr	r3, [r7, #28]
 8015c82:	3304      	adds	r3, #4
 8015c84:	61fb      	str	r3, [r7, #28]
  }
#endif

  /* Set retransmission timer running if it is not currently enabled
     This must be set before checking the route. */
  if (pcb->rtime < 0) {
 8015c86:	68bb      	ldr	r3, [r7, #8]
 8015c88:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	; 0x30
 8015c8c:	2b00      	cmp	r3, #0
 8015c8e:	da02      	bge.n	8015c96 <tcp_output_segment+0xda>
    pcb->rtime = 0;
 8015c90:	68bb      	ldr	r3, [r7, #8]
 8015c92:	2200      	movs	r2, #0
 8015c94:	861a      	strh	r2, [r3, #48]	; 0x30
  }

  if (pcb->rttest == 0) {
 8015c96:	68bb      	ldr	r3, [r7, #8]
 8015c98:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8015c9a:	2b00      	cmp	r3, #0
 8015c9c:	d10c      	bne.n	8015cb8 <tcp_output_segment+0xfc>
    pcb->rttest = tcp_ticks;
 8015c9e:	4b35      	ldr	r3, [pc, #212]	; (8015d74 <tcp_output_segment+0x1b8>)
 8015ca0:	681a      	ldr	r2, [r3, #0]
 8015ca2:	68bb      	ldr	r3, [r7, #8]
 8015ca4:	635a      	str	r2, [r3, #52]	; 0x34
    pcb->rtseq = lwip_ntohl(seg->tcphdr->seqno);
 8015ca6:	68fb      	ldr	r3, [r7, #12]
 8015ca8:	68db      	ldr	r3, [r3, #12]
 8015caa:	685b      	ldr	r3, [r3, #4]
 8015cac:	4618      	mov	r0, r3
 8015cae:	f7f9 fd2a 	bl	800f706 <lwip_htonl>
 8015cb2:	4602      	mov	r2, r0
 8015cb4:	68bb      	ldr	r3, [r7, #8]
 8015cb6:	639a      	str	r2, [r3, #56]	; 0x38
  }
  LWIP_DEBUGF(TCP_OUTPUT_DEBUG, ("tcp_output_segment: %"U32_F":%"U32_F"\n",
                                 lwip_htonl(seg->tcphdr->seqno), lwip_htonl(seg->tcphdr->seqno) +
                                 seg->len));

  len = (u16_t)((u8_t *)seg->tcphdr - (u8_t *)seg->p->payload);
 8015cb8:	68fb      	ldr	r3, [r7, #12]
 8015cba:	68da      	ldr	r2, [r3, #12]
 8015cbc:	68fb      	ldr	r3, [r7, #12]
 8015cbe:	685b      	ldr	r3, [r3, #4]
 8015cc0:	685b      	ldr	r3, [r3, #4]
 8015cc2:	1ad3      	subs	r3, r2, r3
 8015cc4:	833b      	strh	r3, [r7, #24]
  if (len == 0) {
    /** Exclude retransmitted segments from this count. */
    MIB2_STATS_INC(mib2.tcpoutsegs);
  }

  seg->p->len -= len;
 8015cc6:	68fb      	ldr	r3, [r7, #12]
 8015cc8:	685b      	ldr	r3, [r3, #4]
 8015cca:	8959      	ldrh	r1, [r3, #10]
 8015ccc:	68fb      	ldr	r3, [r7, #12]
 8015cce:	685b      	ldr	r3, [r3, #4]
 8015cd0:	8b3a      	ldrh	r2, [r7, #24]
 8015cd2:	1a8a      	subs	r2, r1, r2
 8015cd4:	b292      	uxth	r2, r2
 8015cd6:	815a      	strh	r2, [r3, #10]
  seg->p->tot_len -= len;
 8015cd8:	68fb      	ldr	r3, [r7, #12]
 8015cda:	685b      	ldr	r3, [r3, #4]
 8015cdc:	8919      	ldrh	r1, [r3, #8]
 8015cde:	68fb      	ldr	r3, [r7, #12]
 8015ce0:	685b      	ldr	r3, [r3, #4]
 8015ce2:	8b3a      	ldrh	r2, [r7, #24]
 8015ce4:	1a8a      	subs	r2, r1, r2
 8015ce6:	b292      	uxth	r2, r2
 8015ce8:	811a      	strh	r2, [r3, #8]

  seg->p->payload = seg->tcphdr;
 8015cea:	68fb      	ldr	r3, [r7, #12]
 8015cec:	685b      	ldr	r3, [r3, #4]
 8015cee:	68fa      	ldr	r2, [r7, #12]
 8015cf0:	68d2      	ldr	r2, [r2, #12]
 8015cf2:	605a      	str	r2, [r3, #4]

  seg->tcphdr->chksum = 0;
 8015cf4:	68fb      	ldr	r3, [r7, #12]
 8015cf6:	68db      	ldr	r3, [r3, #12]
 8015cf8:	2200      	movs	r2, #0
 8015cfa:	741a      	strb	r2, [r3, #16]
 8015cfc:	2200      	movs	r2, #0
 8015cfe:	745a      	strb	r2, [r3, #17]

#ifdef LWIP_HOOK_TCP_OUT_ADD_TCPOPTS
  opts = LWIP_HOOK_TCP_OUT_ADD_TCPOPTS(seg->p, seg->tcphdr, pcb, opts);
#endif
  LWIP_ASSERT("options not filled", (u8_t *)opts == ((u8_t *)(seg->tcphdr + 1)) + LWIP_TCP_OPT_LENGTH_SEGMENT(seg->flags, pcb));
 8015d00:	68fb      	ldr	r3, [r7, #12]
 8015d02:	68da      	ldr	r2, [r3, #12]
 8015d04:	68fb      	ldr	r3, [r7, #12]
 8015d06:	7a9b      	ldrb	r3, [r3, #10]
 8015d08:	f003 0301 	and.w	r3, r3, #1
 8015d0c:	2b00      	cmp	r3, #0
 8015d0e:	d001      	beq.n	8015d14 <tcp_output_segment+0x158>
 8015d10:	2318      	movs	r3, #24
 8015d12:	e000      	b.n	8015d16 <tcp_output_segment+0x15a>
 8015d14:	2314      	movs	r3, #20
 8015d16:	4413      	add	r3, r2
 8015d18:	69fa      	ldr	r2, [r7, #28]
 8015d1a:	429a      	cmp	r2, r3
 8015d1c:	d006      	beq.n	8015d2c <tcp_output_segment+0x170>
 8015d1e:	4b10      	ldr	r3, [pc, #64]	; (8015d60 <tcp_output_segment+0x1a4>)
 8015d20:	f240 621c 	movw	r2, #1564	; 0x61c
 8015d24:	4914      	ldr	r1, [pc, #80]	; (8015d78 <tcp_output_segment+0x1bc>)
 8015d26:	4810      	ldr	r0, [pc, #64]	; (8015d68 <tcp_output_segment+0x1ac>)
 8015d28:	f003 ff92 	bl	8019c50 <iprintf>
  }
#endif /* CHECKSUM_GEN_TCP */
  TCP_STATS_INC(tcp.xmit);

  NETIF_SET_HINTS(netif, &(pcb->netif_hints));
  err = ip_output_if(seg->p, &pcb->local_ip, &pcb->remote_ip, pcb->ttl,
 8015d2c:	68fb      	ldr	r3, [r7, #12]
 8015d2e:	6858      	ldr	r0, [r3, #4]
 8015d30:	68b9      	ldr	r1, [r7, #8]
 8015d32:	68bb      	ldr	r3, [r7, #8]
 8015d34:	1d1c      	adds	r4, r3, #4
 8015d36:	68bb      	ldr	r3, [r7, #8]
 8015d38:	7add      	ldrb	r5, [r3, #11]
 8015d3a:	68bb      	ldr	r3, [r7, #8]
 8015d3c:	7a9b      	ldrb	r3, [r3, #10]
 8015d3e:	687a      	ldr	r2, [r7, #4]
 8015d40:	9202      	str	r2, [sp, #8]
 8015d42:	2206      	movs	r2, #6
 8015d44:	9201      	str	r2, [sp, #4]
 8015d46:	9300      	str	r3, [sp, #0]
 8015d48:	462b      	mov	r3, r5
 8015d4a:	4622      	mov	r2, r4
 8015d4c:	f002 fa18 	bl	8018180 <ip4_output_if>
 8015d50:	4603      	mov	r3, r0
 8015d52:	75fb      	strb	r3, [r7, #23]
    seg->chksum = SWAP_BYTES_IN_WORD(seg->chksum);
    seg->chksum_swapped = 1;
  }
#endif

  return err;
 8015d54:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8015d58:	4618      	mov	r0, r3
 8015d5a:	3720      	adds	r7, #32
 8015d5c:	46bd      	mov	sp, r7
 8015d5e:	bdb0      	pop	{r4, r5, r7, pc}
 8015d60:	0801dbfc 	.word	0x0801dbfc
 8015d64:	0801e1c0 	.word	0x0801e1c0
 8015d68:	0801dc50 	.word	0x0801dc50
 8015d6c:	0801e1e0 	.word	0x0801e1e0
 8015d70:	0801e200 	.word	0x0801e200
 8015d74:	200070d8 	.word	0x200070d8
 8015d78:	0801e224 	.word	0x0801e224

08015d7c <tcp_rexmit_rto_prepare>:
 *
 * @param pcb the tcp_pcb for which to re-enqueue all unacked segments
 */
err_t
tcp_rexmit_rto_prepare(struct tcp_pcb *pcb)
{
 8015d7c:	b5b0      	push	{r4, r5, r7, lr}
 8015d7e:	b084      	sub	sp, #16
 8015d80:	af00      	add	r7, sp, #0
 8015d82:	6078      	str	r0, [r7, #4]
  struct tcp_seg *seg;

  LWIP_ASSERT("tcp_rexmit_rto_prepare: invalid pcb", pcb != NULL);
 8015d84:	687b      	ldr	r3, [r7, #4]
 8015d86:	2b00      	cmp	r3, #0
 8015d88:	d106      	bne.n	8015d98 <tcp_rexmit_rto_prepare+0x1c>
 8015d8a:	4b31      	ldr	r3, [pc, #196]	; (8015e50 <tcp_rexmit_rto_prepare+0xd4>)
 8015d8c:	f240 6263 	movw	r2, #1635	; 0x663
 8015d90:	4930      	ldr	r1, [pc, #192]	; (8015e54 <tcp_rexmit_rto_prepare+0xd8>)
 8015d92:	4831      	ldr	r0, [pc, #196]	; (8015e58 <tcp_rexmit_rto_prepare+0xdc>)
 8015d94:	f003 ff5c 	bl	8019c50 <iprintf>

  if (pcb->unacked == NULL) {
 8015d98:	687b      	ldr	r3, [r7, #4]
 8015d9a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8015d9c:	2b00      	cmp	r3, #0
 8015d9e:	d102      	bne.n	8015da6 <tcp_rexmit_rto_prepare+0x2a>
    return ERR_VAL;
 8015da0:	f06f 0305 	mvn.w	r3, #5
 8015da4:	e050      	b.n	8015e48 <tcp_rexmit_rto_prepare+0xcc>

  /* Move all unacked segments to the head of the unsent queue.
     However, give up if any of the unsent pbufs are still referenced by the
     netif driver due to deferred transmission. No point loading the link further
     if it is struggling to flush its buffered writes. */
  for (seg = pcb->unacked; seg->next != NULL; seg = seg->next) {
 8015da6:	687b      	ldr	r3, [r7, #4]
 8015da8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8015daa:	60fb      	str	r3, [r7, #12]
 8015dac:	e00b      	b.n	8015dc6 <tcp_rexmit_rto_prepare+0x4a>
    if (tcp_output_segment_busy(seg)) {
 8015dae:	68f8      	ldr	r0, [r7, #12]
 8015db0:	f7ff fee4 	bl	8015b7c <tcp_output_segment_busy>
 8015db4:	4603      	mov	r3, r0
 8015db6:	2b00      	cmp	r3, #0
 8015db8:	d002      	beq.n	8015dc0 <tcp_rexmit_rto_prepare+0x44>
      LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_rexmit_rto: segment busy\n"));
      return ERR_VAL;
 8015dba:	f06f 0305 	mvn.w	r3, #5
 8015dbe:	e043      	b.n	8015e48 <tcp_rexmit_rto_prepare+0xcc>
  for (seg = pcb->unacked; seg->next != NULL; seg = seg->next) {
 8015dc0:	68fb      	ldr	r3, [r7, #12]
 8015dc2:	681b      	ldr	r3, [r3, #0]
 8015dc4:	60fb      	str	r3, [r7, #12]
 8015dc6:	68fb      	ldr	r3, [r7, #12]
 8015dc8:	681b      	ldr	r3, [r3, #0]
 8015dca:	2b00      	cmp	r3, #0
 8015dcc:	d1ef      	bne.n	8015dae <tcp_rexmit_rto_prepare+0x32>
    }
  }
  if (tcp_output_segment_busy(seg)) {
 8015dce:	68f8      	ldr	r0, [r7, #12]
 8015dd0:	f7ff fed4 	bl	8015b7c <tcp_output_segment_busy>
 8015dd4:	4603      	mov	r3, r0
 8015dd6:	2b00      	cmp	r3, #0
 8015dd8:	d002      	beq.n	8015de0 <tcp_rexmit_rto_prepare+0x64>
    LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_rexmit_rto: segment busy\n"));
    return ERR_VAL;
 8015dda:	f06f 0305 	mvn.w	r3, #5
 8015dde:	e033      	b.n	8015e48 <tcp_rexmit_rto_prepare+0xcc>
  }
  /* concatenate unsent queue after unacked queue */
  seg->next = pcb->unsent;
 8015de0:	687b      	ldr	r3, [r7, #4]
 8015de2:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 8015de4:	68fb      	ldr	r3, [r7, #12]
 8015de6:	601a      	str	r2, [r3, #0]
  if (pcb->unsent == NULL) {
    pcb->unsent_oversize = seg->oversize_left;
  }
#endif /* TCP_OVERSIZE_DBGCHECK */
  /* unsent queue is the concatenated queue (of unacked, unsent) */
  pcb->unsent = pcb->unacked;
 8015de8:	687b      	ldr	r3, [r7, #4]
 8015dea:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8015dec:	687b      	ldr	r3, [r7, #4]
 8015dee:	66da      	str	r2, [r3, #108]	; 0x6c
  /* unacked queue is now empty */
  pcb->unacked = NULL;
 8015df0:	687b      	ldr	r3, [r7, #4]
 8015df2:	2200      	movs	r2, #0
 8015df4:	671a      	str	r2, [r3, #112]	; 0x70

  /* Mark RTO in-progress */
  tcp_set_flags(pcb, TF_RTO);
 8015df6:	687b      	ldr	r3, [r7, #4]
 8015df8:	8b5b      	ldrh	r3, [r3, #26]
 8015dfa:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8015dfe:	b29a      	uxth	r2, r3
 8015e00:	687b      	ldr	r3, [r7, #4]
 8015e02:	835a      	strh	r2, [r3, #26]
  /* Record the next byte following retransmit */
  pcb->rto_end = lwip_ntohl(seg->tcphdr->seqno) + TCP_TCPLEN(seg);
 8015e04:	68fb      	ldr	r3, [r7, #12]
 8015e06:	68db      	ldr	r3, [r3, #12]
 8015e08:	685b      	ldr	r3, [r3, #4]
 8015e0a:	4618      	mov	r0, r3
 8015e0c:	f7f9 fc7b 	bl	800f706 <lwip_htonl>
 8015e10:	4604      	mov	r4, r0
 8015e12:	68fb      	ldr	r3, [r7, #12]
 8015e14:	891b      	ldrh	r3, [r3, #8]
 8015e16:	461d      	mov	r5, r3
 8015e18:	68fb      	ldr	r3, [r7, #12]
 8015e1a:	68db      	ldr	r3, [r3, #12]
 8015e1c:	899b      	ldrh	r3, [r3, #12]
 8015e1e:	b29b      	uxth	r3, r3
 8015e20:	4618      	mov	r0, r3
 8015e22:	f7f9 fc5b 	bl	800f6dc <lwip_htons>
 8015e26:	4603      	mov	r3, r0
 8015e28:	b2db      	uxtb	r3, r3
 8015e2a:	f003 0303 	and.w	r3, r3, #3
 8015e2e:	2b00      	cmp	r3, #0
 8015e30:	d001      	beq.n	8015e36 <tcp_rexmit_rto_prepare+0xba>
 8015e32:	2301      	movs	r3, #1
 8015e34:	e000      	b.n	8015e38 <tcp_rexmit_rto_prepare+0xbc>
 8015e36:	2300      	movs	r3, #0
 8015e38:	442b      	add	r3, r5
 8015e3a:	18e2      	adds	r2, r4, r3
 8015e3c:	687b      	ldr	r3, [r7, #4]
 8015e3e:	64da      	str	r2, [r3, #76]	; 0x4c
  /* Don't take any RTT measurements after retransmitting. */
  pcb->rttest = 0;
 8015e40:	687b      	ldr	r3, [r7, #4]
 8015e42:	2200      	movs	r2, #0
 8015e44:	635a      	str	r2, [r3, #52]	; 0x34

  return ERR_OK;
 8015e46:	2300      	movs	r3, #0
}
 8015e48:	4618      	mov	r0, r3
 8015e4a:	3710      	adds	r7, #16
 8015e4c:	46bd      	mov	sp, r7
 8015e4e:	bdb0      	pop	{r4, r5, r7, pc}
 8015e50:	0801dbfc 	.word	0x0801dbfc
 8015e54:	0801e238 	.word	0x0801e238
 8015e58:	0801dc50 	.word	0x0801dc50

08015e5c <tcp_rexmit_rto_commit>:
 *
 * @param pcb the tcp_pcb for which to re-enqueue all unacked segments
 */
void
tcp_rexmit_rto_commit(struct tcp_pcb *pcb)
{
 8015e5c:	b580      	push	{r7, lr}
 8015e5e:	b082      	sub	sp, #8
 8015e60:	af00      	add	r7, sp, #0
 8015e62:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_rexmit_rto_commit: invalid pcb", pcb != NULL);
 8015e64:	687b      	ldr	r3, [r7, #4]
 8015e66:	2b00      	cmp	r3, #0
 8015e68:	d106      	bne.n	8015e78 <tcp_rexmit_rto_commit+0x1c>
 8015e6a:	4b0d      	ldr	r3, [pc, #52]	; (8015ea0 <tcp_rexmit_rto_commit+0x44>)
 8015e6c:	f44f 62d3 	mov.w	r2, #1688	; 0x698
 8015e70:	490c      	ldr	r1, [pc, #48]	; (8015ea4 <tcp_rexmit_rto_commit+0x48>)
 8015e72:	480d      	ldr	r0, [pc, #52]	; (8015ea8 <tcp_rexmit_rto_commit+0x4c>)
 8015e74:	f003 feec 	bl	8019c50 <iprintf>

  /* increment number of retransmissions */
  if (pcb->nrtx < 0xFF) {
 8015e78:	687b      	ldr	r3, [r7, #4]
 8015e7a:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8015e7e:	2bff      	cmp	r3, #255	; 0xff
 8015e80:	d007      	beq.n	8015e92 <tcp_rexmit_rto_commit+0x36>
    ++pcb->nrtx;
 8015e82:	687b      	ldr	r3, [r7, #4]
 8015e84:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8015e88:	3301      	adds	r3, #1
 8015e8a:	b2da      	uxtb	r2, r3
 8015e8c:	687b      	ldr	r3, [r7, #4]
 8015e8e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  }
  /* Do the actual retransmission */
  tcp_output(pcb);
 8015e92:	6878      	ldr	r0, [r7, #4]
 8015e94:	f7ff fc7e 	bl	8015794 <tcp_output>
}
 8015e98:	bf00      	nop
 8015e9a:	3708      	adds	r7, #8
 8015e9c:	46bd      	mov	sp, r7
 8015e9e:	bd80      	pop	{r7, pc}
 8015ea0:	0801dbfc 	.word	0x0801dbfc
 8015ea4:	0801e25c 	.word	0x0801e25c
 8015ea8:	0801dc50 	.word	0x0801dc50

08015eac <tcp_rexmit_rto>:
 *
 * @param pcb the tcp_pcb for which to re-enqueue all unacked segments
 */
void
tcp_rexmit_rto(struct tcp_pcb *pcb)
{
 8015eac:	b580      	push	{r7, lr}
 8015eae:	b082      	sub	sp, #8
 8015eb0:	af00      	add	r7, sp, #0
 8015eb2:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_rexmit_rto: invalid pcb", pcb != NULL);
 8015eb4:	687b      	ldr	r3, [r7, #4]
 8015eb6:	2b00      	cmp	r3, #0
 8015eb8:	d106      	bne.n	8015ec8 <tcp_rexmit_rto+0x1c>
 8015eba:	4b0a      	ldr	r3, [pc, #40]	; (8015ee4 <tcp_rexmit_rto+0x38>)
 8015ebc:	f240 62ad 	movw	r2, #1709	; 0x6ad
 8015ec0:	4909      	ldr	r1, [pc, #36]	; (8015ee8 <tcp_rexmit_rto+0x3c>)
 8015ec2:	480a      	ldr	r0, [pc, #40]	; (8015eec <tcp_rexmit_rto+0x40>)
 8015ec4:	f003 fec4 	bl	8019c50 <iprintf>

  if (tcp_rexmit_rto_prepare(pcb) == ERR_OK) {
 8015ec8:	6878      	ldr	r0, [r7, #4]
 8015eca:	f7ff ff57 	bl	8015d7c <tcp_rexmit_rto_prepare>
 8015ece:	4603      	mov	r3, r0
 8015ed0:	2b00      	cmp	r3, #0
 8015ed2:	d102      	bne.n	8015eda <tcp_rexmit_rto+0x2e>
    tcp_rexmit_rto_commit(pcb);
 8015ed4:	6878      	ldr	r0, [r7, #4]
 8015ed6:	f7ff ffc1 	bl	8015e5c <tcp_rexmit_rto_commit>
  }
}
 8015eda:	bf00      	nop
 8015edc:	3708      	adds	r7, #8
 8015ede:	46bd      	mov	sp, r7
 8015ee0:	bd80      	pop	{r7, pc}
 8015ee2:	bf00      	nop
 8015ee4:	0801dbfc 	.word	0x0801dbfc
 8015ee8:	0801e280 	.word	0x0801e280
 8015eec:	0801dc50 	.word	0x0801dc50

08015ef0 <tcp_rexmit>:
 *
 * @param pcb the tcp_pcb for which to retransmit the first unacked segment
 */
err_t
tcp_rexmit(struct tcp_pcb *pcb)
{
 8015ef0:	b590      	push	{r4, r7, lr}
 8015ef2:	b085      	sub	sp, #20
 8015ef4:	af00      	add	r7, sp, #0
 8015ef6:	6078      	str	r0, [r7, #4]
  struct tcp_seg *seg;
  struct tcp_seg **cur_seg;

  LWIP_ASSERT("tcp_rexmit: invalid pcb", pcb != NULL);
 8015ef8:	687b      	ldr	r3, [r7, #4]
 8015efa:	2b00      	cmp	r3, #0
 8015efc:	d106      	bne.n	8015f0c <tcp_rexmit+0x1c>
 8015efe:	4b2f      	ldr	r3, [pc, #188]	; (8015fbc <tcp_rexmit+0xcc>)
 8015f00:	f240 62c1 	movw	r2, #1729	; 0x6c1
 8015f04:	492e      	ldr	r1, [pc, #184]	; (8015fc0 <tcp_rexmit+0xd0>)
 8015f06:	482f      	ldr	r0, [pc, #188]	; (8015fc4 <tcp_rexmit+0xd4>)
 8015f08:	f003 fea2 	bl	8019c50 <iprintf>

  if (pcb->unacked == NULL) {
 8015f0c:	687b      	ldr	r3, [r7, #4]
 8015f0e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8015f10:	2b00      	cmp	r3, #0
 8015f12:	d102      	bne.n	8015f1a <tcp_rexmit+0x2a>
    return ERR_VAL;
 8015f14:	f06f 0305 	mvn.w	r3, #5
 8015f18:	e04c      	b.n	8015fb4 <tcp_rexmit+0xc4>
  }

  seg = pcb->unacked;
 8015f1a:	687b      	ldr	r3, [r7, #4]
 8015f1c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8015f1e:	60bb      	str	r3, [r7, #8]

  /* Give up if the segment is still referenced by the netif driver
     due to deferred transmission. */
  if (tcp_output_segment_busy(seg)) {
 8015f20:	68b8      	ldr	r0, [r7, #8]
 8015f22:	f7ff fe2b 	bl	8015b7c <tcp_output_segment_busy>
 8015f26:	4603      	mov	r3, r0
 8015f28:	2b00      	cmp	r3, #0
 8015f2a:	d002      	beq.n	8015f32 <tcp_rexmit+0x42>
    LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_rexmit busy\n"));
    return ERR_VAL;
 8015f2c:	f06f 0305 	mvn.w	r3, #5
 8015f30:	e040      	b.n	8015fb4 <tcp_rexmit+0xc4>
  }

  /* Move the first unacked segment to the unsent queue */
  /* Keep the unsent queue sorted. */
  pcb->unacked = seg->next;
 8015f32:	68bb      	ldr	r3, [r7, #8]
 8015f34:	681a      	ldr	r2, [r3, #0]
 8015f36:	687b      	ldr	r3, [r7, #4]
 8015f38:	671a      	str	r2, [r3, #112]	; 0x70

  cur_seg = &(pcb->unsent);
 8015f3a:	687b      	ldr	r3, [r7, #4]
 8015f3c:	336c      	adds	r3, #108	; 0x6c
 8015f3e:	60fb      	str	r3, [r7, #12]
  while (*cur_seg &&
 8015f40:	e002      	b.n	8015f48 <tcp_rexmit+0x58>
         TCP_SEQ_LT(lwip_ntohl((*cur_seg)->tcphdr->seqno), lwip_ntohl(seg->tcphdr->seqno))) {
    cur_seg = &((*cur_seg)->next );
 8015f42:	68fb      	ldr	r3, [r7, #12]
 8015f44:	681b      	ldr	r3, [r3, #0]
 8015f46:	60fb      	str	r3, [r7, #12]
  while (*cur_seg &&
 8015f48:	68fb      	ldr	r3, [r7, #12]
 8015f4a:	681b      	ldr	r3, [r3, #0]
 8015f4c:	2b00      	cmp	r3, #0
 8015f4e:	d011      	beq.n	8015f74 <tcp_rexmit+0x84>
         TCP_SEQ_LT(lwip_ntohl((*cur_seg)->tcphdr->seqno), lwip_ntohl(seg->tcphdr->seqno))) {
 8015f50:	68fb      	ldr	r3, [r7, #12]
 8015f52:	681b      	ldr	r3, [r3, #0]
 8015f54:	68db      	ldr	r3, [r3, #12]
 8015f56:	685b      	ldr	r3, [r3, #4]
 8015f58:	4618      	mov	r0, r3
 8015f5a:	f7f9 fbd4 	bl	800f706 <lwip_htonl>
 8015f5e:	4604      	mov	r4, r0
 8015f60:	68bb      	ldr	r3, [r7, #8]
 8015f62:	68db      	ldr	r3, [r3, #12]
 8015f64:	685b      	ldr	r3, [r3, #4]
 8015f66:	4618      	mov	r0, r3
 8015f68:	f7f9 fbcd 	bl	800f706 <lwip_htonl>
 8015f6c:	4603      	mov	r3, r0
 8015f6e:	1ae3      	subs	r3, r4, r3
  while (*cur_seg &&
 8015f70:	2b00      	cmp	r3, #0
 8015f72:	dbe6      	blt.n	8015f42 <tcp_rexmit+0x52>
  }
  seg->next = *cur_seg;
 8015f74:	68fb      	ldr	r3, [r7, #12]
 8015f76:	681a      	ldr	r2, [r3, #0]
 8015f78:	68bb      	ldr	r3, [r7, #8]
 8015f7a:	601a      	str	r2, [r3, #0]
  *cur_seg = seg;
 8015f7c:	68fb      	ldr	r3, [r7, #12]
 8015f7e:	68ba      	ldr	r2, [r7, #8]
 8015f80:	601a      	str	r2, [r3, #0]
#if TCP_OVERSIZE
  if (seg->next == NULL) {
 8015f82:	68bb      	ldr	r3, [r7, #8]
 8015f84:	681b      	ldr	r3, [r3, #0]
 8015f86:	2b00      	cmp	r3, #0
 8015f88:	d103      	bne.n	8015f92 <tcp_rexmit+0xa2>
    /* the retransmitted segment is last in unsent, so reset unsent_oversize */
    pcb->unsent_oversize = 0;
 8015f8a:	687b      	ldr	r3, [r7, #4]
 8015f8c:	2200      	movs	r2, #0
 8015f8e:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
  }
#endif /* TCP_OVERSIZE */

  if (pcb->nrtx < 0xFF) {
 8015f92:	687b      	ldr	r3, [r7, #4]
 8015f94:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8015f98:	2bff      	cmp	r3, #255	; 0xff
 8015f9a:	d007      	beq.n	8015fac <tcp_rexmit+0xbc>
    ++pcb->nrtx;
 8015f9c:	687b      	ldr	r3, [r7, #4]
 8015f9e:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8015fa2:	3301      	adds	r3, #1
 8015fa4:	b2da      	uxtb	r2, r3
 8015fa6:	687b      	ldr	r3, [r7, #4]
 8015fa8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  }

  /* Don't take any rtt measurements after retransmitting. */
  pcb->rttest = 0;
 8015fac:	687b      	ldr	r3, [r7, #4]
 8015fae:	2200      	movs	r2, #0
 8015fb0:	635a      	str	r2, [r3, #52]	; 0x34

  /* Do the actual retransmission. */
  MIB2_STATS_INC(mib2.tcpretranssegs);
  /* No need to call tcp_output: we are always called from tcp_input()
     and thus tcp_output directly returns. */
  return ERR_OK;
 8015fb2:	2300      	movs	r3, #0
}
 8015fb4:	4618      	mov	r0, r3
 8015fb6:	3714      	adds	r7, #20
 8015fb8:	46bd      	mov	sp, r7
 8015fba:	bd90      	pop	{r4, r7, pc}
 8015fbc:	0801dbfc 	.word	0x0801dbfc
 8015fc0:	0801e29c 	.word	0x0801e29c
 8015fc4:	0801dc50 	.word	0x0801dc50

08015fc8 <tcp_rexmit_fast>:
 *
 * @param pcb the tcp_pcb for which to retransmit the first unacked segment
 */
void
tcp_rexmit_fast(struct tcp_pcb *pcb)
{
 8015fc8:	b580      	push	{r7, lr}
 8015fca:	b082      	sub	sp, #8
 8015fcc:	af00      	add	r7, sp, #0
 8015fce:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_rexmit_fast: invalid pcb", pcb != NULL);
 8015fd0:	687b      	ldr	r3, [r7, #4]
 8015fd2:	2b00      	cmp	r3, #0
 8015fd4:	d106      	bne.n	8015fe4 <tcp_rexmit_fast+0x1c>
 8015fd6:	4b2a      	ldr	r3, [pc, #168]	; (8016080 <tcp_rexmit_fast+0xb8>)
 8015fd8:	f240 62f9 	movw	r2, #1785	; 0x6f9
 8015fdc:	4929      	ldr	r1, [pc, #164]	; (8016084 <tcp_rexmit_fast+0xbc>)
 8015fde:	482a      	ldr	r0, [pc, #168]	; (8016088 <tcp_rexmit_fast+0xc0>)
 8015fe0:	f003 fe36 	bl	8019c50 <iprintf>

  if (pcb->unacked != NULL && !(pcb->flags & TF_INFR)) {
 8015fe4:	687b      	ldr	r3, [r7, #4]
 8015fe6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8015fe8:	2b00      	cmp	r3, #0
 8015fea:	d045      	beq.n	8016078 <tcp_rexmit_fast+0xb0>
 8015fec:	687b      	ldr	r3, [r7, #4]
 8015fee:	8b5b      	ldrh	r3, [r3, #26]
 8015ff0:	f003 0304 	and.w	r3, r3, #4
 8015ff4:	2b00      	cmp	r3, #0
 8015ff6:	d13f      	bne.n	8016078 <tcp_rexmit_fast+0xb0>
    LWIP_DEBUGF(TCP_FR_DEBUG,
                ("tcp_receive: dupacks %"U16_F" (%"U32_F
                 "), fast retransmit %"U32_F"\n",
                 (u16_t)pcb->dupacks, pcb->lastack,
                 lwip_ntohl(pcb->unacked->tcphdr->seqno)));
    if (tcp_rexmit(pcb) == ERR_OK) {
 8015ff8:	6878      	ldr	r0, [r7, #4]
 8015ffa:	f7ff ff79 	bl	8015ef0 <tcp_rexmit>
 8015ffe:	4603      	mov	r3, r0
 8016000:	2b00      	cmp	r3, #0
 8016002:	d139      	bne.n	8016078 <tcp_rexmit_fast+0xb0>
      /* Set ssthresh to half of the minimum of the current
       * cwnd and the advertised window */
      pcb->ssthresh = LWIP_MIN(pcb->cwnd, pcb->snd_wnd) / 2;
 8016004:	687b      	ldr	r3, [r7, #4]
 8016006:	f8b3 2060 	ldrh.w	r2, [r3, #96]	; 0x60
 801600a:	687b      	ldr	r3, [r7, #4]
 801600c:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 8016010:	4293      	cmp	r3, r2
 8016012:	bf28      	it	cs
 8016014:	4613      	movcs	r3, r2
 8016016:	b29b      	uxth	r3, r3
 8016018:	2b00      	cmp	r3, #0
 801601a:	da00      	bge.n	801601e <tcp_rexmit_fast+0x56>
 801601c:	3301      	adds	r3, #1
 801601e:	105b      	asrs	r3, r3, #1
 8016020:	b29a      	uxth	r2, r3
 8016022:	687b      	ldr	r3, [r7, #4]
 8016024:	f8a3 204a 	strh.w	r2, [r3, #74]	; 0x4a

      /* The minimum value for ssthresh should be 2 MSS */
      if (pcb->ssthresh < (2U * pcb->mss)) {
 8016028:	687b      	ldr	r3, [r7, #4]
 801602a:	f8b3 304a 	ldrh.w	r3, [r3, #74]	; 0x4a
 801602e:	461a      	mov	r2, r3
 8016030:	687b      	ldr	r3, [r7, #4]
 8016032:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8016034:	005b      	lsls	r3, r3, #1
 8016036:	429a      	cmp	r2, r3
 8016038:	d206      	bcs.n	8016048 <tcp_rexmit_fast+0x80>
        LWIP_DEBUGF(TCP_FR_DEBUG,
                    ("tcp_receive: The minimum value for ssthresh %"TCPWNDSIZE_F
                     " should be min 2 mss %"U16_F"...\n",
                     pcb->ssthresh, (u16_t)(2 * pcb->mss)));
        pcb->ssthresh = 2 * pcb->mss;
 801603a:	687b      	ldr	r3, [r7, #4]
 801603c:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 801603e:	005b      	lsls	r3, r3, #1
 8016040:	b29a      	uxth	r2, r3
 8016042:	687b      	ldr	r3, [r7, #4]
 8016044:	f8a3 204a 	strh.w	r2, [r3, #74]	; 0x4a
      }

      pcb->cwnd = pcb->ssthresh + 3 * pcb->mss;
 8016048:	687b      	ldr	r3, [r7, #4]
 801604a:	f8b3 204a 	ldrh.w	r2, [r3, #74]	; 0x4a
 801604e:	687b      	ldr	r3, [r7, #4]
 8016050:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8016052:	4619      	mov	r1, r3
 8016054:	0049      	lsls	r1, r1, #1
 8016056:	440b      	add	r3, r1
 8016058:	b29b      	uxth	r3, r3
 801605a:	4413      	add	r3, r2
 801605c:	b29a      	uxth	r2, r3
 801605e:	687b      	ldr	r3, [r7, #4]
 8016060:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
      tcp_set_flags(pcb, TF_INFR);
 8016064:	687b      	ldr	r3, [r7, #4]
 8016066:	8b5b      	ldrh	r3, [r3, #26]
 8016068:	f043 0304 	orr.w	r3, r3, #4
 801606c:	b29a      	uxth	r2, r3
 801606e:	687b      	ldr	r3, [r7, #4]
 8016070:	835a      	strh	r2, [r3, #26]

      /* Reset the retransmission timer to prevent immediate rto retransmissions */
      pcb->rtime = 0;
 8016072:	687b      	ldr	r3, [r7, #4]
 8016074:	2200      	movs	r2, #0
 8016076:	861a      	strh	r2, [r3, #48]	; 0x30
    }
  }
}
 8016078:	bf00      	nop
 801607a:	3708      	adds	r7, #8
 801607c:	46bd      	mov	sp, r7
 801607e:	bd80      	pop	{r7, pc}
 8016080:	0801dbfc 	.word	0x0801dbfc
 8016084:	0801e2b4 	.word	0x0801e2b4
 8016088:	0801dc50 	.word	0x0801dc50

0801608c <tcp_output_alloc_header_common>:

static struct pbuf *
tcp_output_alloc_header_common(u32_t ackno, u16_t optlen, u16_t datalen,
                        u32_t seqno_be /* already in network byte order */,
                        u16_t src_port, u16_t dst_port, u8_t flags, u16_t wnd)
{
 801608c:	b580      	push	{r7, lr}
 801608e:	b086      	sub	sp, #24
 8016090:	af00      	add	r7, sp, #0
 8016092:	60f8      	str	r0, [r7, #12]
 8016094:	607b      	str	r3, [r7, #4]
 8016096:	460b      	mov	r3, r1
 8016098:	817b      	strh	r3, [r7, #10]
 801609a:	4613      	mov	r3, r2
 801609c:	813b      	strh	r3, [r7, #8]
  struct tcp_hdr *tcphdr;
  struct pbuf *p;

  p = pbuf_alloc(PBUF_IP, TCP_HLEN + optlen + datalen, PBUF_RAM);
 801609e:	897a      	ldrh	r2, [r7, #10]
 80160a0:	893b      	ldrh	r3, [r7, #8]
 80160a2:	4413      	add	r3, r2
 80160a4:	b29b      	uxth	r3, r3
 80160a6:	3314      	adds	r3, #20
 80160a8:	b29b      	uxth	r3, r3
 80160aa:	f44f 7220 	mov.w	r2, #640	; 0x280
 80160ae:	4619      	mov	r1, r3
 80160b0:	2022      	movs	r0, #34	; 0x22
 80160b2:	f7fa fc13 	bl	80108dc <pbuf_alloc>
 80160b6:	6178      	str	r0, [r7, #20]
  if (p != NULL) {
 80160b8:	697b      	ldr	r3, [r7, #20]
 80160ba:	2b00      	cmp	r3, #0
 80160bc:	d04d      	beq.n	801615a <tcp_output_alloc_header_common+0xce>
    LWIP_ASSERT("check that first pbuf can hold struct tcp_hdr",
 80160be:	897b      	ldrh	r3, [r7, #10]
 80160c0:	3313      	adds	r3, #19
 80160c2:	697a      	ldr	r2, [r7, #20]
 80160c4:	8952      	ldrh	r2, [r2, #10]
 80160c6:	4293      	cmp	r3, r2
 80160c8:	db06      	blt.n	80160d8 <tcp_output_alloc_header_common+0x4c>
 80160ca:	4b26      	ldr	r3, [pc, #152]	; (8016164 <tcp_output_alloc_header_common+0xd8>)
 80160cc:	f240 7223 	movw	r2, #1827	; 0x723
 80160d0:	4925      	ldr	r1, [pc, #148]	; (8016168 <tcp_output_alloc_header_common+0xdc>)
 80160d2:	4826      	ldr	r0, [pc, #152]	; (801616c <tcp_output_alloc_header_common+0xe0>)
 80160d4:	f003 fdbc 	bl	8019c50 <iprintf>
                (p->len >= TCP_HLEN + optlen));
    tcphdr = (struct tcp_hdr *)p->payload;
 80160d8:	697b      	ldr	r3, [r7, #20]
 80160da:	685b      	ldr	r3, [r3, #4]
 80160dc:	613b      	str	r3, [r7, #16]
    tcphdr->src = lwip_htons(src_port);
 80160de:	8c3b      	ldrh	r3, [r7, #32]
 80160e0:	4618      	mov	r0, r3
 80160e2:	f7f9 fafb 	bl	800f6dc <lwip_htons>
 80160e6:	4603      	mov	r3, r0
 80160e8:	461a      	mov	r2, r3
 80160ea:	693b      	ldr	r3, [r7, #16]
 80160ec:	801a      	strh	r2, [r3, #0]
    tcphdr->dest = lwip_htons(dst_port);
 80160ee:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80160f0:	4618      	mov	r0, r3
 80160f2:	f7f9 faf3 	bl	800f6dc <lwip_htons>
 80160f6:	4603      	mov	r3, r0
 80160f8:	461a      	mov	r2, r3
 80160fa:	693b      	ldr	r3, [r7, #16]
 80160fc:	805a      	strh	r2, [r3, #2]
    tcphdr->seqno = seqno_be;
 80160fe:	693b      	ldr	r3, [r7, #16]
 8016100:	687a      	ldr	r2, [r7, #4]
 8016102:	605a      	str	r2, [r3, #4]
    tcphdr->ackno = lwip_htonl(ackno);
 8016104:	68f8      	ldr	r0, [r7, #12]
 8016106:	f7f9 fafe 	bl	800f706 <lwip_htonl>
 801610a:	4602      	mov	r2, r0
 801610c:	693b      	ldr	r3, [r7, #16]
 801610e:	609a      	str	r2, [r3, #8]
    TCPH_HDRLEN_FLAGS_SET(tcphdr, (5 + optlen / 4), flags);
 8016110:	897b      	ldrh	r3, [r7, #10]
 8016112:	089b      	lsrs	r3, r3, #2
 8016114:	b29b      	uxth	r3, r3
 8016116:	3305      	adds	r3, #5
 8016118:	b29b      	uxth	r3, r3
 801611a:	031b      	lsls	r3, r3, #12
 801611c:	b29a      	uxth	r2, r3
 801611e:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8016122:	b29b      	uxth	r3, r3
 8016124:	4313      	orrs	r3, r2
 8016126:	b29b      	uxth	r3, r3
 8016128:	4618      	mov	r0, r3
 801612a:	f7f9 fad7 	bl	800f6dc <lwip_htons>
 801612e:	4603      	mov	r3, r0
 8016130:	461a      	mov	r2, r3
 8016132:	693b      	ldr	r3, [r7, #16]
 8016134:	819a      	strh	r2, [r3, #12]
    tcphdr->wnd = lwip_htons(wnd);
 8016136:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 8016138:	4618      	mov	r0, r3
 801613a:	f7f9 facf 	bl	800f6dc <lwip_htons>
 801613e:	4603      	mov	r3, r0
 8016140:	461a      	mov	r2, r3
 8016142:	693b      	ldr	r3, [r7, #16]
 8016144:	81da      	strh	r2, [r3, #14]
    tcphdr->chksum = 0;
 8016146:	693b      	ldr	r3, [r7, #16]
 8016148:	2200      	movs	r2, #0
 801614a:	741a      	strb	r2, [r3, #16]
 801614c:	2200      	movs	r2, #0
 801614e:	745a      	strb	r2, [r3, #17]
    tcphdr->urgp = 0;
 8016150:	693b      	ldr	r3, [r7, #16]
 8016152:	2200      	movs	r2, #0
 8016154:	749a      	strb	r2, [r3, #18]
 8016156:	2200      	movs	r2, #0
 8016158:	74da      	strb	r2, [r3, #19]
  }
  return p;
 801615a:	697b      	ldr	r3, [r7, #20]
}
 801615c:	4618      	mov	r0, r3
 801615e:	3718      	adds	r7, #24
 8016160:	46bd      	mov	sp, r7
 8016162:	bd80      	pop	{r7, pc}
 8016164:	0801dbfc 	.word	0x0801dbfc
 8016168:	0801e2d4 	.word	0x0801e2d4
 801616c:	0801dc50 	.word	0x0801dc50

08016170 <tcp_output_alloc_header>:
 * @return pbuf with p->payload being the tcp_hdr
 */
static struct pbuf *
tcp_output_alloc_header(struct tcp_pcb *pcb, u16_t optlen, u16_t datalen,
                        u32_t seqno_be /* already in network byte order */)
{
 8016170:	b5b0      	push	{r4, r5, r7, lr}
 8016172:	b08a      	sub	sp, #40	; 0x28
 8016174:	af04      	add	r7, sp, #16
 8016176:	60f8      	str	r0, [r7, #12]
 8016178:	607b      	str	r3, [r7, #4]
 801617a:	460b      	mov	r3, r1
 801617c:	817b      	strh	r3, [r7, #10]
 801617e:	4613      	mov	r3, r2
 8016180:	813b      	strh	r3, [r7, #8]
  struct pbuf *p;

  LWIP_ASSERT("tcp_output_alloc_header: invalid pcb", pcb != NULL);
 8016182:	68fb      	ldr	r3, [r7, #12]
 8016184:	2b00      	cmp	r3, #0
 8016186:	d106      	bne.n	8016196 <tcp_output_alloc_header+0x26>
 8016188:	4b15      	ldr	r3, [pc, #84]	; (80161e0 <tcp_output_alloc_header+0x70>)
 801618a:	f240 7242 	movw	r2, #1858	; 0x742
 801618e:	4915      	ldr	r1, [pc, #84]	; (80161e4 <tcp_output_alloc_header+0x74>)
 8016190:	4815      	ldr	r0, [pc, #84]	; (80161e8 <tcp_output_alloc_header+0x78>)
 8016192:	f003 fd5d 	bl	8019c50 <iprintf>

  p = tcp_output_alloc_header_common(pcb->rcv_nxt, optlen, datalen,
 8016196:	68fb      	ldr	r3, [r7, #12]
 8016198:	6a58      	ldr	r0, [r3, #36]	; 0x24
 801619a:	68fb      	ldr	r3, [r7, #12]
 801619c:	8adb      	ldrh	r3, [r3, #22]
 801619e:	68fa      	ldr	r2, [r7, #12]
 80161a0:	8b12      	ldrh	r2, [r2, #24]
 80161a2:	68f9      	ldr	r1, [r7, #12]
 80161a4:	8d49      	ldrh	r1, [r1, #42]	; 0x2a
 80161a6:	893d      	ldrh	r5, [r7, #8]
 80161a8:	897c      	ldrh	r4, [r7, #10]
 80161aa:	9103      	str	r1, [sp, #12]
 80161ac:	2110      	movs	r1, #16
 80161ae:	9102      	str	r1, [sp, #8]
 80161b0:	9201      	str	r2, [sp, #4]
 80161b2:	9300      	str	r3, [sp, #0]
 80161b4:	687b      	ldr	r3, [r7, #4]
 80161b6:	462a      	mov	r2, r5
 80161b8:	4621      	mov	r1, r4
 80161ba:	f7ff ff67 	bl	801608c <tcp_output_alloc_header_common>
 80161be:	6178      	str	r0, [r7, #20]
    seqno_be, pcb->local_port, pcb->remote_port, TCP_ACK,
    TCPWND_MIN16(RCV_WND_SCALE(pcb, pcb->rcv_ann_wnd)));
  if (p != NULL) {
 80161c0:	697b      	ldr	r3, [r7, #20]
 80161c2:	2b00      	cmp	r3, #0
 80161c4:	d006      	beq.n	80161d4 <tcp_output_alloc_header+0x64>
    /* If we're sending a packet, update the announced right window edge */
    pcb->rcv_ann_right_edge = pcb->rcv_nxt + pcb->rcv_ann_wnd;
 80161c6:	68fb      	ldr	r3, [r7, #12]
 80161c8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80161ca:	68fa      	ldr	r2, [r7, #12]
 80161cc:	8d52      	ldrh	r2, [r2, #42]	; 0x2a
 80161ce:	441a      	add	r2, r3
 80161d0:	68fb      	ldr	r3, [r7, #12]
 80161d2:	62da      	str	r2, [r3, #44]	; 0x2c
  }
  return p;
 80161d4:	697b      	ldr	r3, [r7, #20]
}
 80161d6:	4618      	mov	r0, r3
 80161d8:	3718      	adds	r7, #24
 80161da:	46bd      	mov	sp, r7
 80161dc:	bdb0      	pop	{r4, r5, r7, pc}
 80161de:	bf00      	nop
 80161e0:	0801dbfc 	.word	0x0801dbfc
 80161e4:	0801e304 	.word	0x0801e304
 80161e8:	0801dc50 	.word	0x0801dc50

080161ec <tcp_output_fill_options>:

/* Fill in options for control segments */
static void
tcp_output_fill_options(const struct tcp_pcb *pcb, struct pbuf *p, u8_t optflags, u8_t num_sacks)
{
 80161ec:	b580      	push	{r7, lr}
 80161ee:	b088      	sub	sp, #32
 80161f0:	af00      	add	r7, sp, #0
 80161f2:	60f8      	str	r0, [r7, #12]
 80161f4:	60b9      	str	r1, [r7, #8]
 80161f6:	4611      	mov	r1, r2
 80161f8:	461a      	mov	r2, r3
 80161fa:	460b      	mov	r3, r1
 80161fc:	71fb      	strb	r3, [r7, #7]
 80161fe:	4613      	mov	r3, r2
 8016200:	71bb      	strb	r3, [r7, #6]
  struct tcp_hdr *tcphdr;
  u32_t *opts;
  u16_t sacks_len = 0;
 8016202:	2300      	movs	r3, #0
 8016204:	83fb      	strh	r3, [r7, #30]

  LWIP_ASSERT("tcp_output_fill_options: invalid pbuf", p != NULL);
 8016206:	68bb      	ldr	r3, [r7, #8]
 8016208:	2b00      	cmp	r3, #0
 801620a:	d106      	bne.n	801621a <tcp_output_fill_options+0x2e>
 801620c:	4b12      	ldr	r3, [pc, #72]	; (8016258 <tcp_output_fill_options+0x6c>)
 801620e:	f240 7256 	movw	r2, #1878	; 0x756
 8016212:	4912      	ldr	r1, [pc, #72]	; (801625c <tcp_output_fill_options+0x70>)
 8016214:	4812      	ldr	r0, [pc, #72]	; (8016260 <tcp_output_fill_options+0x74>)
 8016216:	f003 fd1b 	bl	8019c50 <iprintf>

  tcphdr = (struct tcp_hdr *)p->payload;
 801621a:	68bb      	ldr	r3, [r7, #8]
 801621c:	685b      	ldr	r3, [r3, #4]
 801621e:	61bb      	str	r3, [r7, #24]
  opts = (u32_t *)(void *)(tcphdr + 1);
 8016220:	69bb      	ldr	r3, [r7, #24]
 8016222:	3314      	adds	r3, #20
 8016224:	617b      	str	r3, [r7, #20]
  opts = LWIP_HOOK_TCP_OUT_ADD_TCPOPTS(p, tcphdr, pcb, opts);
#endif

  LWIP_UNUSED_ARG(pcb);
  LWIP_UNUSED_ARG(sacks_len);
  LWIP_ASSERT("options not filled", (u8_t *)opts == ((u8_t *)(tcphdr + 1)) + sacks_len * 4 + LWIP_TCP_OPT_LENGTH_SEGMENT(optflags, pcb));
 8016226:	8bfb      	ldrh	r3, [r7, #30]
 8016228:	009b      	lsls	r3, r3, #2
 801622a:	461a      	mov	r2, r3
 801622c:	79fb      	ldrb	r3, [r7, #7]
 801622e:	009b      	lsls	r3, r3, #2
 8016230:	f003 0304 	and.w	r3, r3, #4
 8016234:	4413      	add	r3, r2
 8016236:	3314      	adds	r3, #20
 8016238:	69ba      	ldr	r2, [r7, #24]
 801623a:	4413      	add	r3, r2
 801623c:	697a      	ldr	r2, [r7, #20]
 801623e:	429a      	cmp	r2, r3
 8016240:	d006      	beq.n	8016250 <tcp_output_fill_options+0x64>
 8016242:	4b05      	ldr	r3, [pc, #20]	; (8016258 <tcp_output_fill_options+0x6c>)
 8016244:	f240 7275 	movw	r2, #1909	; 0x775
 8016248:	4906      	ldr	r1, [pc, #24]	; (8016264 <tcp_output_fill_options+0x78>)
 801624a:	4805      	ldr	r0, [pc, #20]	; (8016260 <tcp_output_fill_options+0x74>)
 801624c:	f003 fd00 	bl	8019c50 <iprintf>
  LWIP_UNUSED_ARG(optflags); /* for LWIP_NOASSERT */
  LWIP_UNUSED_ARG(opts); /* for LWIP_NOASSERT */
}
 8016250:	bf00      	nop
 8016252:	3720      	adds	r7, #32
 8016254:	46bd      	mov	sp, r7
 8016256:	bd80      	pop	{r7, pc}
 8016258:	0801dbfc 	.word	0x0801dbfc
 801625c:	0801e32c 	.word	0x0801e32c
 8016260:	0801dc50 	.word	0x0801dc50
 8016264:	0801e224 	.word	0x0801e224

08016268 <tcp_output_control_segment>:
 * header checksum and calling ip_output_if while handling netif hints and stats.
 */
static err_t
tcp_output_control_segment(const struct tcp_pcb *pcb, struct pbuf *p,
                           const ip_addr_t *src, const ip_addr_t *dst)
{
 8016268:	b580      	push	{r7, lr}
 801626a:	b08a      	sub	sp, #40	; 0x28
 801626c:	af04      	add	r7, sp, #16
 801626e:	60f8      	str	r0, [r7, #12]
 8016270:	60b9      	str	r1, [r7, #8]
 8016272:	607a      	str	r2, [r7, #4]
 8016274:	603b      	str	r3, [r7, #0]
  err_t err;
  struct netif *netif;

  LWIP_ASSERT("tcp_output_control_segment: invalid pbuf", p != NULL);
 8016276:	68bb      	ldr	r3, [r7, #8]
 8016278:	2b00      	cmp	r3, #0
 801627a:	d106      	bne.n	801628a <tcp_output_control_segment+0x22>
 801627c:	4b1c      	ldr	r3, [pc, #112]	; (80162f0 <tcp_output_control_segment+0x88>)
 801627e:	f240 7287 	movw	r2, #1927	; 0x787
 8016282:	491c      	ldr	r1, [pc, #112]	; (80162f4 <tcp_output_control_segment+0x8c>)
 8016284:	481c      	ldr	r0, [pc, #112]	; (80162f8 <tcp_output_control_segment+0x90>)
 8016286:	f003 fce3 	bl	8019c50 <iprintf>

  netif = tcp_route(pcb, src, dst);
 801628a:	683a      	ldr	r2, [r7, #0]
 801628c:	6879      	ldr	r1, [r7, #4]
 801628e:	68f8      	ldr	r0, [r7, #12]
 8016290:	f7fe ff40 	bl	8015114 <tcp_route>
 8016294:	6138      	str	r0, [r7, #16]
  if (netif == NULL) {
 8016296:	693b      	ldr	r3, [r7, #16]
 8016298:	2b00      	cmp	r3, #0
 801629a:	d102      	bne.n	80162a2 <tcp_output_control_segment+0x3a>
    err = ERR_RTE;
 801629c:	23fc      	movs	r3, #252	; 0xfc
 801629e:	75fb      	strb	r3, [r7, #23]
 80162a0:	e01c      	b.n	80162dc <tcp_output_control_segment+0x74>
      struct tcp_hdr *tcphdr = (struct tcp_hdr *)p->payload;
      tcphdr->chksum = ip_chksum_pseudo(p, IP_PROTO_TCP, p->tot_len,
                                        src, dst);
    }
#endif
    if (pcb != NULL) {
 80162a2:	68fb      	ldr	r3, [r7, #12]
 80162a4:	2b00      	cmp	r3, #0
 80162a6:	d006      	beq.n	80162b6 <tcp_output_control_segment+0x4e>
      NETIF_SET_HINTS(netif, LWIP_CONST_CAST(struct netif_hint*, &(pcb->netif_hints)));
      ttl = pcb->ttl;
 80162a8:	68fb      	ldr	r3, [r7, #12]
 80162aa:	7adb      	ldrb	r3, [r3, #11]
 80162ac:	75bb      	strb	r3, [r7, #22]
      tos = pcb->tos;
 80162ae:	68fb      	ldr	r3, [r7, #12]
 80162b0:	7a9b      	ldrb	r3, [r3, #10]
 80162b2:	757b      	strb	r3, [r7, #21]
 80162b4:	e003      	b.n	80162be <tcp_output_control_segment+0x56>
    } else {
      /* Send output with hardcoded TTL/HL since we have no access to the pcb */
      ttl = TCP_TTL;
 80162b6:	23ff      	movs	r3, #255	; 0xff
 80162b8:	75bb      	strb	r3, [r7, #22]
      tos = 0;
 80162ba:	2300      	movs	r3, #0
 80162bc:	757b      	strb	r3, [r7, #21]
    }
    TCP_STATS_INC(tcp.xmit);
    err = ip_output_if(p, src, dst, ttl, tos, IP_PROTO_TCP, netif);
 80162be:	7dba      	ldrb	r2, [r7, #22]
 80162c0:	693b      	ldr	r3, [r7, #16]
 80162c2:	9302      	str	r3, [sp, #8]
 80162c4:	2306      	movs	r3, #6
 80162c6:	9301      	str	r3, [sp, #4]
 80162c8:	7d7b      	ldrb	r3, [r7, #21]
 80162ca:	9300      	str	r3, [sp, #0]
 80162cc:	4613      	mov	r3, r2
 80162ce:	683a      	ldr	r2, [r7, #0]
 80162d0:	6879      	ldr	r1, [r7, #4]
 80162d2:	68b8      	ldr	r0, [r7, #8]
 80162d4:	f001 ff54 	bl	8018180 <ip4_output_if>
 80162d8:	4603      	mov	r3, r0
 80162da:	75fb      	strb	r3, [r7, #23]
    NETIF_RESET_HINTS(netif);
  }
  pbuf_free(p);
 80162dc:	68b8      	ldr	r0, [r7, #8]
 80162de:	f7fa fde1 	bl	8010ea4 <pbuf_free>
  return err;
 80162e2:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 80162e6:	4618      	mov	r0, r3
 80162e8:	3718      	adds	r7, #24
 80162ea:	46bd      	mov	sp, r7
 80162ec:	bd80      	pop	{r7, pc}
 80162ee:	bf00      	nop
 80162f0:	0801dbfc 	.word	0x0801dbfc
 80162f4:	0801e354 	.word	0x0801e354
 80162f8:	0801dc50 	.word	0x0801dc50

080162fc <tcp_rst>:
 */
void
tcp_rst(const struct tcp_pcb *pcb, u32_t seqno, u32_t ackno,
        const ip_addr_t *local_ip, const ip_addr_t *remote_ip,
        u16_t local_port, u16_t remote_port)
{
 80162fc:	b590      	push	{r4, r7, lr}
 80162fe:	b08b      	sub	sp, #44	; 0x2c
 8016300:	af04      	add	r7, sp, #16
 8016302:	60f8      	str	r0, [r7, #12]
 8016304:	60b9      	str	r1, [r7, #8]
 8016306:	607a      	str	r2, [r7, #4]
 8016308:	603b      	str	r3, [r7, #0]
  struct pbuf *p;
  u16_t wnd;
  u8_t optlen;

  LWIP_ASSERT("tcp_rst: invalid local_ip", local_ip != NULL);
 801630a:	683b      	ldr	r3, [r7, #0]
 801630c:	2b00      	cmp	r3, #0
 801630e:	d106      	bne.n	801631e <tcp_rst+0x22>
 8016310:	4b1f      	ldr	r3, [pc, #124]	; (8016390 <tcp_rst+0x94>)
 8016312:	f240 72c4 	movw	r2, #1988	; 0x7c4
 8016316:	491f      	ldr	r1, [pc, #124]	; (8016394 <tcp_rst+0x98>)
 8016318:	481f      	ldr	r0, [pc, #124]	; (8016398 <tcp_rst+0x9c>)
 801631a:	f003 fc99 	bl	8019c50 <iprintf>
  LWIP_ASSERT("tcp_rst: invalid remote_ip", remote_ip != NULL);
 801631e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8016320:	2b00      	cmp	r3, #0
 8016322:	d106      	bne.n	8016332 <tcp_rst+0x36>
 8016324:	4b1a      	ldr	r3, [pc, #104]	; (8016390 <tcp_rst+0x94>)
 8016326:	f240 72c5 	movw	r2, #1989	; 0x7c5
 801632a:	491c      	ldr	r1, [pc, #112]	; (801639c <tcp_rst+0xa0>)
 801632c:	481a      	ldr	r0, [pc, #104]	; (8016398 <tcp_rst+0x9c>)
 801632e:	f003 fc8f 	bl	8019c50 <iprintf>

  optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(0, pcb);
 8016332:	2300      	movs	r3, #0
 8016334:	75fb      	strb	r3, [r7, #23]

#if LWIP_WND_SCALE
  wnd = PP_HTONS(((TCP_WND >> TCP_RCV_SCALE) & 0xFFFF));
#else
  wnd = PP_HTONS(TCP_WND);
 8016336:	f24d 0316 	movw	r3, #53270	; 0xd016
 801633a:	82bb      	strh	r3, [r7, #20]
#endif

  p = tcp_output_alloc_header_common(ackno, optlen, 0, lwip_htonl(seqno), local_port,
 801633c:	7dfb      	ldrb	r3, [r7, #23]
 801633e:	b29c      	uxth	r4, r3
 8016340:	68b8      	ldr	r0, [r7, #8]
 8016342:	f7f9 f9e0 	bl	800f706 <lwip_htonl>
 8016346:	4602      	mov	r2, r0
 8016348:	8abb      	ldrh	r3, [r7, #20]
 801634a:	9303      	str	r3, [sp, #12]
 801634c:	2314      	movs	r3, #20
 801634e:	9302      	str	r3, [sp, #8]
 8016350:	8e3b      	ldrh	r3, [r7, #48]	; 0x30
 8016352:	9301      	str	r3, [sp, #4]
 8016354:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 8016356:	9300      	str	r3, [sp, #0]
 8016358:	4613      	mov	r3, r2
 801635a:	2200      	movs	r2, #0
 801635c:	4621      	mov	r1, r4
 801635e:	6878      	ldr	r0, [r7, #4]
 8016360:	f7ff fe94 	bl	801608c <tcp_output_alloc_header_common>
 8016364:	6138      	str	r0, [r7, #16]
    remote_port, TCP_RST | TCP_ACK, wnd);
  if (p == NULL) {
 8016366:	693b      	ldr	r3, [r7, #16]
 8016368:	2b00      	cmp	r3, #0
 801636a:	d00c      	beq.n	8016386 <tcp_rst+0x8a>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_rst: could not allocate memory for pbuf\n"));
    return;
  }
  tcp_output_fill_options(pcb, p, 0, optlen);
 801636c:	7dfb      	ldrb	r3, [r7, #23]
 801636e:	2200      	movs	r2, #0
 8016370:	6939      	ldr	r1, [r7, #16]
 8016372:	68f8      	ldr	r0, [r7, #12]
 8016374:	f7ff ff3a 	bl	80161ec <tcp_output_fill_options>

  MIB2_STATS_INC(mib2.tcpoutrsts);

  tcp_output_control_segment(pcb, p, local_ip, remote_ip);
 8016378:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801637a:	683a      	ldr	r2, [r7, #0]
 801637c:	6939      	ldr	r1, [r7, #16]
 801637e:	68f8      	ldr	r0, [r7, #12]
 8016380:	f7ff ff72 	bl	8016268 <tcp_output_control_segment>
 8016384:	e000      	b.n	8016388 <tcp_rst+0x8c>
    return;
 8016386:	bf00      	nop
  LWIP_DEBUGF(TCP_RST_DEBUG, ("tcp_rst: seqno %"U32_F" ackno %"U32_F".\n", seqno, ackno));
}
 8016388:	371c      	adds	r7, #28
 801638a:	46bd      	mov	sp, r7
 801638c:	bd90      	pop	{r4, r7, pc}
 801638e:	bf00      	nop
 8016390:	0801dbfc 	.word	0x0801dbfc
 8016394:	0801e380 	.word	0x0801e380
 8016398:	0801dc50 	.word	0x0801dc50
 801639c:	0801e39c 	.word	0x0801e39c

080163a0 <tcp_send_empty_ack>:
 *
 * @param pcb Protocol control block for the TCP connection to send the ACK
 */
err_t
tcp_send_empty_ack(struct tcp_pcb *pcb)
{
 80163a0:	b590      	push	{r4, r7, lr}
 80163a2:	b087      	sub	sp, #28
 80163a4:	af00      	add	r7, sp, #0
 80163a6:	6078      	str	r0, [r7, #4]
  err_t err;
  struct pbuf *p;
  u8_t optlen, optflags = 0;
 80163a8:	2300      	movs	r3, #0
 80163aa:	75fb      	strb	r3, [r7, #23]
  u8_t num_sacks = 0;
 80163ac:	2300      	movs	r3, #0
 80163ae:	75bb      	strb	r3, [r7, #22]

  LWIP_ASSERT("tcp_send_empty_ack: invalid pcb", pcb != NULL);
 80163b0:	687b      	ldr	r3, [r7, #4]
 80163b2:	2b00      	cmp	r3, #0
 80163b4:	d106      	bne.n	80163c4 <tcp_send_empty_ack+0x24>
 80163b6:	4b28      	ldr	r3, [pc, #160]	; (8016458 <tcp_send_empty_ack+0xb8>)
 80163b8:	f240 72ea 	movw	r2, #2026	; 0x7ea
 80163bc:	4927      	ldr	r1, [pc, #156]	; (801645c <tcp_send_empty_ack+0xbc>)
 80163be:	4828      	ldr	r0, [pc, #160]	; (8016460 <tcp_send_empty_ack+0xc0>)
 80163c0:	f003 fc46 	bl	8019c50 <iprintf>
#if LWIP_TCP_TIMESTAMPS
  if (pcb->flags & TF_TIMESTAMP) {
    optflags = TF_SEG_OPTS_TS;
  }
#endif
  optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(optflags, pcb);
 80163c4:	7dfb      	ldrb	r3, [r7, #23]
 80163c6:	009b      	lsls	r3, r3, #2
 80163c8:	b2db      	uxtb	r3, r3
 80163ca:	f003 0304 	and.w	r3, r3, #4
 80163ce:	757b      	strb	r3, [r7, #21]
  if ((num_sacks = tcp_get_num_sacks(pcb, optlen)) > 0) {
    optlen += 4 + num_sacks * 8; /* 4 bytes for header (including 2*NOP), plus 8B for each SACK */
  }
#endif

  p = tcp_output_alloc_header(pcb, optlen, 0, lwip_htonl(pcb->snd_nxt));
 80163d0:	7d7b      	ldrb	r3, [r7, #21]
 80163d2:	b29c      	uxth	r4, r3
 80163d4:	687b      	ldr	r3, [r7, #4]
 80163d6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80163d8:	4618      	mov	r0, r3
 80163da:	f7f9 f994 	bl	800f706 <lwip_htonl>
 80163de:	4603      	mov	r3, r0
 80163e0:	2200      	movs	r2, #0
 80163e2:	4621      	mov	r1, r4
 80163e4:	6878      	ldr	r0, [r7, #4]
 80163e6:	f7ff fec3 	bl	8016170 <tcp_output_alloc_header>
 80163ea:	6138      	str	r0, [r7, #16]
  if (p == NULL) {
 80163ec:	693b      	ldr	r3, [r7, #16]
 80163ee:	2b00      	cmp	r3, #0
 80163f0:	d109      	bne.n	8016406 <tcp_send_empty_ack+0x66>
    /* let tcp_fasttmr retry sending this ACK */
    tcp_set_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 80163f2:	687b      	ldr	r3, [r7, #4]
 80163f4:	8b5b      	ldrh	r3, [r3, #26]
 80163f6:	f043 0303 	orr.w	r3, r3, #3
 80163fa:	b29a      	uxth	r2, r3
 80163fc:	687b      	ldr	r3, [r7, #4]
 80163fe:	835a      	strh	r2, [r3, #26]
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG, ("tcp_output: (ACK) could not allocate pbuf\n"));
    return ERR_BUF;
 8016400:	f06f 0301 	mvn.w	r3, #1
 8016404:	e023      	b.n	801644e <tcp_send_empty_ack+0xae>
  }
  tcp_output_fill_options(pcb, p, optflags, num_sacks);
 8016406:	7dbb      	ldrb	r3, [r7, #22]
 8016408:	7dfa      	ldrb	r2, [r7, #23]
 801640a:	6939      	ldr	r1, [r7, #16]
 801640c:	6878      	ldr	r0, [r7, #4]
 801640e:	f7ff feed 	bl	80161ec <tcp_output_fill_options>
  pcb->ts_lastacksent = pcb->rcv_nxt;
#endif

  LWIP_DEBUGF(TCP_OUTPUT_DEBUG,
              ("tcp_output: sending ACK for %"U32_F"\n", pcb->rcv_nxt));
  err = tcp_output_control_segment(pcb, p, &pcb->local_ip, &pcb->remote_ip);
 8016412:	687a      	ldr	r2, [r7, #4]
 8016414:	687b      	ldr	r3, [r7, #4]
 8016416:	3304      	adds	r3, #4
 8016418:	6939      	ldr	r1, [r7, #16]
 801641a:	6878      	ldr	r0, [r7, #4]
 801641c:	f7ff ff24 	bl	8016268 <tcp_output_control_segment>
 8016420:	4603      	mov	r3, r0
 8016422:	73fb      	strb	r3, [r7, #15]
  if (err != ERR_OK) {
 8016424:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8016428:	2b00      	cmp	r3, #0
 801642a:	d007      	beq.n	801643c <tcp_send_empty_ack+0x9c>
    /* let tcp_fasttmr retry sending this ACK */
    tcp_set_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 801642c:	687b      	ldr	r3, [r7, #4]
 801642e:	8b5b      	ldrh	r3, [r3, #26]
 8016430:	f043 0303 	orr.w	r3, r3, #3
 8016434:	b29a      	uxth	r2, r3
 8016436:	687b      	ldr	r3, [r7, #4]
 8016438:	835a      	strh	r2, [r3, #26]
 801643a:	e006      	b.n	801644a <tcp_send_empty_ack+0xaa>
  } else {
    /* remove ACK flags from the PCB, as we sent an empty ACK now */
    tcp_clear_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 801643c:	687b      	ldr	r3, [r7, #4]
 801643e:	8b5b      	ldrh	r3, [r3, #26]
 8016440:	f023 0303 	bic.w	r3, r3, #3
 8016444:	b29a      	uxth	r2, r3
 8016446:	687b      	ldr	r3, [r7, #4]
 8016448:	835a      	strh	r2, [r3, #26]
  }

  return err;
 801644a:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 801644e:	4618      	mov	r0, r3
 8016450:	371c      	adds	r7, #28
 8016452:	46bd      	mov	sp, r7
 8016454:	bd90      	pop	{r4, r7, pc}
 8016456:	bf00      	nop
 8016458:	0801dbfc 	.word	0x0801dbfc
 801645c:	0801e3b8 	.word	0x0801e3b8
 8016460:	0801dc50 	.word	0x0801dc50

08016464 <tcp_keepalive>:
 *
 * @param pcb the tcp_pcb for which to send a keepalive packet
 */
err_t
tcp_keepalive(struct tcp_pcb *pcb)
{
 8016464:	b590      	push	{r4, r7, lr}
 8016466:	b087      	sub	sp, #28
 8016468:	af00      	add	r7, sp, #0
 801646a:	6078      	str	r0, [r7, #4]
  err_t err;
  struct pbuf *p;
  u8_t optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(0, pcb);
 801646c:	2300      	movs	r3, #0
 801646e:	75fb      	strb	r3, [r7, #23]

  LWIP_ASSERT("tcp_keepalive: invalid pcb", pcb != NULL);
 8016470:	687b      	ldr	r3, [r7, #4]
 8016472:	2b00      	cmp	r3, #0
 8016474:	d106      	bne.n	8016484 <tcp_keepalive+0x20>
 8016476:	4b18      	ldr	r3, [pc, #96]	; (80164d8 <tcp_keepalive+0x74>)
 8016478:	f640 0224 	movw	r2, #2084	; 0x824
 801647c:	4917      	ldr	r1, [pc, #92]	; (80164dc <tcp_keepalive+0x78>)
 801647e:	4818      	ldr	r0, [pc, #96]	; (80164e0 <tcp_keepalive+0x7c>)
 8016480:	f003 fbe6 	bl	8019c50 <iprintf>
  LWIP_DEBUGF(TCP_DEBUG, ("\n"));

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_keepalive: tcp_ticks %"U32_F"   pcb->tmr %"U32_F" pcb->keep_cnt_sent %"U16_F"\n",
                          tcp_ticks, pcb->tmr, (u16_t)pcb->keep_cnt_sent));

  p = tcp_output_alloc_header(pcb, optlen, 0, lwip_htonl(pcb->snd_nxt - 1));
 8016484:	7dfb      	ldrb	r3, [r7, #23]
 8016486:	b29c      	uxth	r4, r3
 8016488:	687b      	ldr	r3, [r7, #4]
 801648a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 801648c:	3b01      	subs	r3, #1
 801648e:	4618      	mov	r0, r3
 8016490:	f7f9 f939 	bl	800f706 <lwip_htonl>
 8016494:	4603      	mov	r3, r0
 8016496:	2200      	movs	r2, #0
 8016498:	4621      	mov	r1, r4
 801649a:	6878      	ldr	r0, [r7, #4]
 801649c:	f7ff fe68 	bl	8016170 <tcp_output_alloc_header>
 80164a0:	6138      	str	r0, [r7, #16]
  if (p == NULL) {
 80164a2:	693b      	ldr	r3, [r7, #16]
 80164a4:	2b00      	cmp	r3, #0
 80164a6:	d102      	bne.n	80164ae <tcp_keepalive+0x4a>
    LWIP_DEBUGF(TCP_DEBUG,
                ("tcp_keepalive: could not allocate memory for pbuf\n"));
    return ERR_MEM;
 80164a8:	f04f 33ff 	mov.w	r3, #4294967295
 80164ac:	e010      	b.n	80164d0 <tcp_keepalive+0x6c>
  }
  tcp_output_fill_options(pcb, p, 0, optlen);
 80164ae:	7dfb      	ldrb	r3, [r7, #23]
 80164b0:	2200      	movs	r2, #0
 80164b2:	6939      	ldr	r1, [r7, #16]
 80164b4:	6878      	ldr	r0, [r7, #4]
 80164b6:	f7ff fe99 	bl	80161ec <tcp_output_fill_options>
  err = tcp_output_control_segment(pcb, p, &pcb->local_ip, &pcb->remote_ip);
 80164ba:	687a      	ldr	r2, [r7, #4]
 80164bc:	687b      	ldr	r3, [r7, #4]
 80164be:	3304      	adds	r3, #4
 80164c0:	6939      	ldr	r1, [r7, #16]
 80164c2:	6878      	ldr	r0, [r7, #4]
 80164c4:	f7ff fed0 	bl	8016268 <tcp_output_control_segment>
 80164c8:	4603      	mov	r3, r0
 80164ca:	73fb      	strb	r3, [r7, #15]

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_keepalive: seqno %"U32_F" ackno %"U32_F" err %d.\n",
                          pcb->snd_nxt - 1, pcb->rcv_nxt, (int)err));
  return err;
 80164cc:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 80164d0:	4618      	mov	r0, r3
 80164d2:	371c      	adds	r7, #28
 80164d4:	46bd      	mov	sp, r7
 80164d6:	bd90      	pop	{r4, r7, pc}
 80164d8:	0801dbfc 	.word	0x0801dbfc
 80164dc:	0801e3d8 	.word	0x0801e3d8
 80164e0:	0801dc50 	.word	0x0801dc50

080164e4 <tcp_zero_window_probe>:
 *
 * @param pcb the tcp_pcb for which to send a zero-window probe packet
 */
err_t
tcp_zero_window_probe(struct tcp_pcb *pcb)
{
 80164e4:	b590      	push	{r4, r7, lr}
 80164e6:	b08b      	sub	sp, #44	; 0x2c
 80164e8:	af00      	add	r7, sp, #0
 80164ea:	6078      	str	r0, [r7, #4]
  struct tcp_hdr *tcphdr;
  struct tcp_seg *seg;
  u16_t len;
  u8_t is_fin;
  u32_t snd_nxt;
  u8_t optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(0, pcb);
 80164ec:	2300      	movs	r3, #0
 80164ee:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

  LWIP_ASSERT("tcp_zero_window_probe: invalid pcb", pcb != NULL);
 80164f2:	687b      	ldr	r3, [r7, #4]
 80164f4:	2b00      	cmp	r3, #0
 80164f6:	d106      	bne.n	8016506 <tcp_zero_window_probe+0x22>
 80164f8:	4b4c      	ldr	r3, [pc, #304]	; (801662c <tcp_zero_window_probe+0x148>)
 80164fa:	f640 024f 	movw	r2, #2127	; 0x84f
 80164fe:	494c      	ldr	r1, [pc, #304]	; (8016630 <tcp_zero_window_probe+0x14c>)
 8016500:	484c      	ldr	r0, [pc, #304]	; (8016634 <tcp_zero_window_probe+0x150>)
 8016502:	f003 fba5 	bl	8019c50 <iprintf>
              ("tcp_zero_window_probe: tcp_ticks %"U32_F
               "   pcb->tmr %"U32_F" pcb->keep_cnt_sent %"U16_F"\n",
               tcp_ticks, pcb->tmr, (u16_t)pcb->keep_cnt_sent));

  /* Only consider unsent, persist timer should be off when there is data in-flight */
  seg = pcb->unsent;
 8016506:	687b      	ldr	r3, [r7, #4]
 8016508:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 801650a:	623b      	str	r3, [r7, #32]
  if (seg == NULL) {
 801650c:	6a3b      	ldr	r3, [r7, #32]
 801650e:	2b00      	cmp	r3, #0
 8016510:	d101      	bne.n	8016516 <tcp_zero_window_probe+0x32>
    /* Not expected, persist timer should be off when the send buffer is empty */
    return ERR_OK;
 8016512:	2300      	movs	r3, #0
 8016514:	e086      	b.n	8016624 <tcp_zero_window_probe+0x140>

  /* increment probe count. NOTE: we record probe even if it fails
     to actually transmit due to an error. This ensures memory exhaustion/
     routing problem doesn't leave a zero-window pcb as an indefinite zombie.
     RTO mechanism has similar behavior, see pcb->nrtx */
  if (pcb->persist_probe < 0xFF) {
 8016516:	687b      	ldr	r3, [r7, #4]
 8016518:	f893 309a 	ldrb.w	r3, [r3, #154]	; 0x9a
 801651c:	2bff      	cmp	r3, #255	; 0xff
 801651e:	d007      	beq.n	8016530 <tcp_zero_window_probe+0x4c>
    ++pcb->persist_probe;
 8016520:	687b      	ldr	r3, [r7, #4]
 8016522:	f893 309a 	ldrb.w	r3, [r3, #154]	; 0x9a
 8016526:	3301      	adds	r3, #1
 8016528:	b2da      	uxtb	r2, r3
 801652a:	687b      	ldr	r3, [r7, #4]
 801652c:	f883 209a 	strb.w	r2, [r3, #154]	; 0x9a
  }

  is_fin = ((TCPH_FLAGS(seg->tcphdr) & TCP_FIN) != 0) && (seg->len == 0);
 8016530:	6a3b      	ldr	r3, [r7, #32]
 8016532:	68db      	ldr	r3, [r3, #12]
 8016534:	899b      	ldrh	r3, [r3, #12]
 8016536:	b29b      	uxth	r3, r3
 8016538:	4618      	mov	r0, r3
 801653a:	f7f9 f8cf 	bl	800f6dc <lwip_htons>
 801653e:	4603      	mov	r3, r0
 8016540:	b2db      	uxtb	r3, r3
 8016542:	f003 0301 	and.w	r3, r3, #1
 8016546:	2b00      	cmp	r3, #0
 8016548:	d005      	beq.n	8016556 <tcp_zero_window_probe+0x72>
 801654a:	6a3b      	ldr	r3, [r7, #32]
 801654c:	891b      	ldrh	r3, [r3, #8]
 801654e:	2b00      	cmp	r3, #0
 8016550:	d101      	bne.n	8016556 <tcp_zero_window_probe+0x72>
 8016552:	2301      	movs	r3, #1
 8016554:	e000      	b.n	8016558 <tcp_zero_window_probe+0x74>
 8016556:	2300      	movs	r3, #0
 8016558:	77fb      	strb	r3, [r7, #31]
  /* we want to send one seqno: either FIN or data (no options) */
  len = is_fin ? 0 : 1;
 801655a:	7ffb      	ldrb	r3, [r7, #31]
 801655c:	2b00      	cmp	r3, #0
 801655e:	bf0c      	ite	eq
 8016560:	2301      	moveq	r3, #1
 8016562:	2300      	movne	r3, #0
 8016564:	b2db      	uxtb	r3, r3
 8016566:	83bb      	strh	r3, [r7, #28]

  p = tcp_output_alloc_header(pcb, optlen, len, seg->tcphdr->seqno);
 8016568:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 801656c:	b299      	uxth	r1, r3
 801656e:	6a3b      	ldr	r3, [r7, #32]
 8016570:	68db      	ldr	r3, [r3, #12]
 8016572:	685b      	ldr	r3, [r3, #4]
 8016574:	8bba      	ldrh	r2, [r7, #28]
 8016576:	6878      	ldr	r0, [r7, #4]
 8016578:	f7ff fdfa 	bl	8016170 <tcp_output_alloc_header>
 801657c:	61b8      	str	r0, [r7, #24]
  if (p == NULL) {
 801657e:	69bb      	ldr	r3, [r7, #24]
 8016580:	2b00      	cmp	r3, #0
 8016582:	d102      	bne.n	801658a <tcp_zero_window_probe+0xa6>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_zero_window_probe: no memory for pbuf\n"));
    return ERR_MEM;
 8016584:	f04f 33ff 	mov.w	r3, #4294967295
 8016588:	e04c      	b.n	8016624 <tcp_zero_window_probe+0x140>
  }
  tcphdr = (struct tcp_hdr *)p->payload;
 801658a:	69bb      	ldr	r3, [r7, #24]
 801658c:	685b      	ldr	r3, [r3, #4]
 801658e:	617b      	str	r3, [r7, #20]

  if (is_fin) {
 8016590:	7ffb      	ldrb	r3, [r7, #31]
 8016592:	2b00      	cmp	r3, #0
 8016594:	d011      	beq.n	80165ba <tcp_zero_window_probe+0xd6>
    /* FIN segment, no data */
    TCPH_FLAGS_SET(tcphdr, TCP_ACK | TCP_FIN);
 8016596:	697b      	ldr	r3, [r7, #20]
 8016598:	899b      	ldrh	r3, [r3, #12]
 801659a:	b29b      	uxth	r3, r3
 801659c:	b21b      	sxth	r3, r3
 801659e:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 80165a2:	b21c      	sxth	r4, r3
 80165a4:	2011      	movs	r0, #17
 80165a6:	f7f9 f899 	bl	800f6dc <lwip_htons>
 80165aa:	4603      	mov	r3, r0
 80165ac:	b21b      	sxth	r3, r3
 80165ae:	4323      	orrs	r3, r4
 80165b0:	b21b      	sxth	r3, r3
 80165b2:	b29a      	uxth	r2, r3
 80165b4:	697b      	ldr	r3, [r7, #20]
 80165b6:	819a      	strh	r2, [r3, #12]
 80165b8:	e010      	b.n	80165dc <tcp_zero_window_probe+0xf8>
  } else {
    /* Data segment, copy in one byte from the head of the unacked queue */
    char *d = ((char *)p->payload + TCP_HLEN);
 80165ba:	69bb      	ldr	r3, [r7, #24]
 80165bc:	685b      	ldr	r3, [r3, #4]
 80165be:	3314      	adds	r3, #20
 80165c0:	613b      	str	r3, [r7, #16]
    /* Depending on whether the segment has already been sent (unacked) or not
       (unsent), seg->p->payload points to the IP header or TCP header.
       Ensure we copy the first TCP data byte: */
    pbuf_copy_partial(seg->p, d, 1, seg->p->tot_len - seg->len);
 80165c2:	6a3b      	ldr	r3, [r7, #32]
 80165c4:	6858      	ldr	r0, [r3, #4]
 80165c6:	6a3b      	ldr	r3, [r7, #32]
 80165c8:	685b      	ldr	r3, [r3, #4]
 80165ca:	891a      	ldrh	r2, [r3, #8]
 80165cc:	6a3b      	ldr	r3, [r7, #32]
 80165ce:	891b      	ldrh	r3, [r3, #8]
 80165d0:	1ad3      	subs	r3, r2, r3
 80165d2:	b29b      	uxth	r3, r3
 80165d4:	2201      	movs	r2, #1
 80165d6:	6939      	ldr	r1, [r7, #16]
 80165d8:	f7fa fe4e 	bl	8011278 <pbuf_copy_partial>
  }

  /* The byte may be acknowledged without the window being opened. */
  snd_nxt = lwip_ntohl(seg->tcphdr->seqno) + 1;
 80165dc:	6a3b      	ldr	r3, [r7, #32]
 80165de:	68db      	ldr	r3, [r3, #12]
 80165e0:	685b      	ldr	r3, [r3, #4]
 80165e2:	4618      	mov	r0, r3
 80165e4:	f7f9 f88f 	bl	800f706 <lwip_htonl>
 80165e8:	4603      	mov	r3, r0
 80165ea:	3301      	adds	r3, #1
 80165ec:	60fb      	str	r3, [r7, #12]
  if (TCP_SEQ_LT(pcb->snd_nxt, snd_nxt)) {
 80165ee:	687b      	ldr	r3, [r7, #4]
 80165f0:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80165f2:	68fb      	ldr	r3, [r7, #12]
 80165f4:	1ad3      	subs	r3, r2, r3
 80165f6:	2b00      	cmp	r3, #0
 80165f8:	da02      	bge.n	8016600 <tcp_zero_window_probe+0x11c>
    pcb->snd_nxt = snd_nxt;
 80165fa:	687b      	ldr	r3, [r7, #4]
 80165fc:	68fa      	ldr	r2, [r7, #12]
 80165fe:	651a      	str	r2, [r3, #80]	; 0x50
  }
  tcp_output_fill_options(pcb, p, 0, optlen);
 8016600:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8016604:	2200      	movs	r2, #0
 8016606:	69b9      	ldr	r1, [r7, #24]
 8016608:	6878      	ldr	r0, [r7, #4]
 801660a:	f7ff fdef 	bl	80161ec <tcp_output_fill_options>

  err = tcp_output_control_segment(pcb, p, &pcb->local_ip, &pcb->remote_ip);
 801660e:	687a      	ldr	r2, [r7, #4]
 8016610:	687b      	ldr	r3, [r7, #4]
 8016612:	3304      	adds	r3, #4
 8016614:	69b9      	ldr	r1, [r7, #24]
 8016616:	6878      	ldr	r0, [r7, #4]
 8016618:	f7ff fe26 	bl	8016268 <tcp_output_control_segment>
 801661c:	4603      	mov	r3, r0
 801661e:	72fb      	strb	r3, [r7, #11]

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_zero_window_probe: seqno %"U32_F
                          " ackno %"U32_F" err %d.\n",
                          pcb->snd_nxt - 1, pcb->rcv_nxt, (int)err));
  return err;
 8016620:	f997 300b 	ldrsb.w	r3, [r7, #11]
}
 8016624:	4618      	mov	r0, r3
 8016626:	372c      	adds	r7, #44	; 0x2c
 8016628:	46bd      	mov	sp, r7
 801662a:	bd90      	pop	{r4, r7, pc}
 801662c:	0801dbfc 	.word	0x0801dbfc
 8016630:	0801e3f4 	.word	0x0801e3f4
 8016634:	0801dc50 	.word	0x0801dc50

08016638 <tcpip_tcp_timer>:
 *
 * @param arg unused argument
 */
static void
tcpip_tcp_timer(void *arg)
{
 8016638:	b580      	push	{r7, lr}
 801663a:	b082      	sub	sp, #8
 801663c:	af00      	add	r7, sp, #0
 801663e:	6078      	str	r0, [r7, #4]
  LWIP_UNUSED_ARG(arg);

  /* call TCP timer handler */
  tcp_tmr();
 8016640:	f7fa ff08 	bl	8011454 <tcp_tmr>
  /* timer still needed? */
  if (tcp_active_pcbs || tcp_tw_pcbs) {
 8016644:	4b0a      	ldr	r3, [pc, #40]	; (8016670 <tcpip_tcp_timer+0x38>)
 8016646:	681b      	ldr	r3, [r3, #0]
 8016648:	2b00      	cmp	r3, #0
 801664a:	d103      	bne.n	8016654 <tcpip_tcp_timer+0x1c>
 801664c:	4b09      	ldr	r3, [pc, #36]	; (8016674 <tcpip_tcp_timer+0x3c>)
 801664e:	681b      	ldr	r3, [r3, #0]
 8016650:	2b00      	cmp	r3, #0
 8016652:	d005      	beq.n	8016660 <tcpip_tcp_timer+0x28>
    /* restart timer */
    sys_timeout(TCP_TMR_INTERVAL, tcpip_tcp_timer, NULL);
 8016654:	2200      	movs	r2, #0
 8016656:	4908      	ldr	r1, [pc, #32]	; (8016678 <tcpip_tcp_timer+0x40>)
 8016658:	20fa      	movs	r0, #250	; 0xfa
 801665a:	f000 f8f3 	bl	8016844 <sys_timeout>
 801665e:	e003      	b.n	8016668 <tcpip_tcp_timer+0x30>
  } else {
    /* disable timer */
    tcpip_tcp_timer_active = 0;
 8016660:	4b06      	ldr	r3, [pc, #24]	; (801667c <tcpip_tcp_timer+0x44>)
 8016662:	2200      	movs	r2, #0
 8016664:	601a      	str	r2, [r3, #0]
  }
}
 8016666:	bf00      	nop
 8016668:	bf00      	nop
 801666a:	3708      	adds	r7, #8
 801666c:	46bd      	mov	sp, r7
 801666e:	bd80      	pop	{r7, pc}
 8016670:	200070e4 	.word	0x200070e4
 8016674:	200070e8 	.word	0x200070e8
 8016678:	08016639 	.word	0x08016639
 801667c:	20007130 	.word	0x20007130

08016680 <tcp_timer_needed>:
 * the reason is to have the TCP timer only running when
 * there are active (or time-wait) PCBs.
 */
void
tcp_timer_needed(void)
{
 8016680:	b580      	push	{r7, lr}
 8016682:	af00      	add	r7, sp, #0
  LWIP_ASSERT_CORE_LOCKED();

  /* timer is off but needed again? */
  if (!tcpip_tcp_timer_active && (tcp_active_pcbs || tcp_tw_pcbs)) {
 8016684:	4b0a      	ldr	r3, [pc, #40]	; (80166b0 <tcp_timer_needed+0x30>)
 8016686:	681b      	ldr	r3, [r3, #0]
 8016688:	2b00      	cmp	r3, #0
 801668a:	d10f      	bne.n	80166ac <tcp_timer_needed+0x2c>
 801668c:	4b09      	ldr	r3, [pc, #36]	; (80166b4 <tcp_timer_needed+0x34>)
 801668e:	681b      	ldr	r3, [r3, #0]
 8016690:	2b00      	cmp	r3, #0
 8016692:	d103      	bne.n	801669c <tcp_timer_needed+0x1c>
 8016694:	4b08      	ldr	r3, [pc, #32]	; (80166b8 <tcp_timer_needed+0x38>)
 8016696:	681b      	ldr	r3, [r3, #0]
 8016698:	2b00      	cmp	r3, #0
 801669a:	d007      	beq.n	80166ac <tcp_timer_needed+0x2c>
    /* enable and start timer */
    tcpip_tcp_timer_active = 1;
 801669c:	4b04      	ldr	r3, [pc, #16]	; (80166b0 <tcp_timer_needed+0x30>)
 801669e:	2201      	movs	r2, #1
 80166a0:	601a      	str	r2, [r3, #0]
    sys_timeout(TCP_TMR_INTERVAL, tcpip_tcp_timer, NULL);
 80166a2:	2200      	movs	r2, #0
 80166a4:	4905      	ldr	r1, [pc, #20]	; (80166bc <tcp_timer_needed+0x3c>)
 80166a6:	20fa      	movs	r0, #250	; 0xfa
 80166a8:	f000 f8cc 	bl	8016844 <sys_timeout>
  }
}
 80166ac:	bf00      	nop
 80166ae:	bd80      	pop	{r7, pc}
 80166b0:	20007130 	.word	0x20007130
 80166b4:	200070e4 	.word	0x200070e4
 80166b8:	200070e8 	.word	0x200070e8
 80166bc:	08016639 	.word	0x08016639

080166c0 <sys_timeout_abs>:
#if LWIP_DEBUG_TIMERNAMES
sys_timeout_abs(u32_t abs_time, sys_timeout_handler handler, void *arg, const char *handler_name)
#else /* LWIP_DEBUG_TIMERNAMES */
sys_timeout_abs(u32_t abs_time, sys_timeout_handler handler, void *arg)
#endif
{
 80166c0:	b580      	push	{r7, lr}
 80166c2:	b086      	sub	sp, #24
 80166c4:	af00      	add	r7, sp, #0
 80166c6:	60f8      	str	r0, [r7, #12]
 80166c8:	60b9      	str	r1, [r7, #8]
 80166ca:	607a      	str	r2, [r7, #4]
  struct sys_timeo *timeout, *t;

  timeout = (struct sys_timeo *)memp_malloc(MEMP_SYS_TIMEOUT);
 80166cc:	2006      	movs	r0, #6
 80166ce:	f7f9 fd23 	bl	8010118 <memp_malloc>
 80166d2:	6138      	str	r0, [r7, #16]
  if (timeout == NULL) {
 80166d4:	693b      	ldr	r3, [r7, #16]
 80166d6:	2b00      	cmp	r3, #0
 80166d8:	d109      	bne.n	80166ee <sys_timeout_abs+0x2e>
    LWIP_ASSERT("sys_timeout: timeout != NULL, pool MEMP_SYS_TIMEOUT is empty", timeout != NULL);
 80166da:	693b      	ldr	r3, [r7, #16]
 80166dc:	2b00      	cmp	r3, #0
 80166de:	d151      	bne.n	8016784 <sys_timeout_abs+0xc4>
 80166e0:	4b2a      	ldr	r3, [pc, #168]	; (801678c <sys_timeout_abs+0xcc>)
 80166e2:	22be      	movs	r2, #190	; 0xbe
 80166e4:	492a      	ldr	r1, [pc, #168]	; (8016790 <sys_timeout_abs+0xd0>)
 80166e6:	482b      	ldr	r0, [pc, #172]	; (8016794 <sys_timeout_abs+0xd4>)
 80166e8:	f003 fab2 	bl	8019c50 <iprintf>
    return;
 80166ec:	e04a      	b.n	8016784 <sys_timeout_abs+0xc4>
  }

  timeout->next = NULL;
 80166ee:	693b      	ldr	r3, [r7, #16]
 80166f0:	2200      	movs	r2, #0
 80166f2:	601a      	str	r2, [r3, #0]
  timeout->h = handler;
 80166f4:	693b      	ldr	r3, [r7, #16]
 80166f6:	68ba      	ldr	r2, [r7, #8]
 80166f8:	609a      	str	r2, [r3, #8]
  timeout->arg = arg;
 80166fa:	693b      	ldr	r3, [r7, #16]
 80166fc:	687a      	ldr	r2, [r7, #4]
 80166fe:	60da      	str	r2, [r3, #12]
  timeout->time = abs_time;
 8016700:	693b      	ldr	r3, [r7, #16]
 8016702:	68fa      	ldr	r2, [r7, #12]
 8016704:	605a      	str	r2, [r3, #4]
  timeout->handler_name = handler_name;
  LWIP_DEBUGF(TIMERS_DEBUG, ("sys_timeout: %p abs_time=%"U32_F" handler=%s arg=%p\n",
                             (void *)timeout, abs_time, handler_name, (void *)arg));
#endif /* LWIP_DEBUG_TIMERNAMES */

  if (next_timeout == NULL) {
 8016706:	4b24      	ldr	r3, [pc, #144]	; (8016798 <sys_timeout_abs+0xd8>)
 8016708:	681b      	ldr	r3, [r3, #0]
 801670a:	2b00      	cmp	r3, #0
 801670c:	d103      	bne.n	8016716 <sys_timeout_abs+0x56>
    next_timeout = timeout;
 801670e:	4a22      	ldr	r2, [pc, #136]	; (8016798 <sys_timeout_abs+0xd8>)
 8016710:	693b      	ldr	r3, [r7, #16]
 8016712:	6013      	str	r3, [r2, #0]
    return;
 8016714:	e037      	b.n	8016786 <sys_timeout_abs+0xc6>
  }
  if (TIME_LESS_THAN(timeout->time, next_timeout->time)) {
 8016716:	693b      	ldr	r3, [r7, #16]
 8016718:	685a      	ldr	r2, [r3, #4]
 801671a:	4b1f      	ldr	r3, [pc, #124]	; (8016798 <sys_timeout_abs+0xd8>)
 801671c:	681b      	ldr	r3, [r3, #0]
 801671e:	685b      	ldr	r3, [r3, #4]
 8016720:	1ad3      	subs	r3, r2, r3
 8016722:	0fdb      	lsrs	r3, r3, #31
 8016724:	f003 0301 	and.w	r3, r3, #1
 8016728:	b2db      	uxtb	r3, r3
 801672a:	2b00      	cmp	r3, #0
 801672c:	d007      	beq.n	801673e <sys_timeout_abs+0x7e>
    timeout->next = next_timeout;
 801672e:	4b1a      	ldr	r3, [pc, #104]	; (8016798 <sys_timeout_abs+0xd8>)
 8016730:	681a      	ldr	r2, [r3, #0]
 8016732:	693b      	ldr	r3, [r7, #16]
 8016734:	601a      	str	r2, [r3, #0]
    next_timeout = timeout;
 8016736:	4a18      	ldr	r2, [pc, #96]	; (8016798 <sys_timeout_abs+0xd8>)
 8016738:	693b      	ldr	r3, [r7, #16]
 801673a:	6013      	str	r3, [r2, #0]
 801673c:	e023      	b.n	8016786 <sys_timeout_abs+0xc6>
  } else {
    for (t = next_timeout; t != NULL; t = t->next) {
 801673e:	4b16      	ldr	r3, [pc, #88]	; (8016798 <sys_timeout_abs+0xd8>)
 8016740:	681b      	ldr	r3, [r3, #0]
 8016742:	617b      	str	r3, [r7, #20]
 8016744:	e01a      	b.n	801677c <sys_timeout_abs+0xbc>
      if ((t->next == NULL) || TIME_LESS_THAN(timeout->time, t->next->time)) {
 8016746:	697b      	ldr	r3, [r7, #20]
 8016748:	681b      	ldr	r3, [r3, #0]
 801674a:	2b00      	cmp	r3, #0
 801674c:	d00b      	beq.n	8016766 <sys_timeout_abs+0xa6>
 801674e:	693b      	ldr	r3, [r7, #16]
 8016750:	685a      	ldr	r2, [r3, #4]
 8016752:	697b      	ldr	r3, [r7, #20]
 8016754:	681b      	ldr	r3, [r3, #0]
 8016756:	685b      	ldr	r3, [r3, #4]
 8016758:	1ad3      	subs	r3, r2, r3
 801675a:	0fdb      	lsrs	r3, r3, #31
 801675c:	f003 0301 	and.w	r3, r3, #1
 8016760:	b2db      	uxtb	r3, r3
 8016762:	2b00      	cmp	r3, #0
 8016764:	d007      	beq.n	8016776 <sys_timeout_abs+0xb6>
        timeout->next = t->next;
 8016766:	697b      	ldr	r3, [r7, #20]
 8016768:	681a      	ldr	r2, [r3, #0]
 801676a:	693b      	ldr	r3, [r7, #16]
 801676c:	601a      	str	r2, [r3, #0]
        t->next = timeout;
 801676e:	697b      	ldr	r3, [r7, #20]
 8016770:	693a      	ldr	r2, [r7, #16]
 8016772:	601a      	str	r2, [r3, #0]
        break;
 8016774:	e007      	b.n	8016786 <sys_timeout_abs+0xc6>
    for (t = next_timeout; t != NULL; t = t->next) {
 8016776:	697b      	ldr	r3, [r7, #20]
 8016778:	681b      	ldr	r3, [r3, #0]
 801677a:	617b      	str	r3, [r7, #20]
 801677c:	697b      	ldr	r3, [r7, #20]
 801677e:	2b00      	cmp	r3, #0
 8016780:	d1e1      	bne.n	8016746 <sys_timeout_abs+0x86>
 8016782:	e000      	b.n	8016786 <sys_timeout_abs+0xc6>
    return;
 8016784:	bf00      	nop
      }
    }
  }
}
 8016786:	3718      	adds	r7, #24
 8016788:	46bd      	mov	sp, r7
 801678a:	bd80      	pop	{r7, pc}
 801678c:	0801e418 	.word	0x0801e418
 8016790:	0801e44c 	.word	0x0801e44c
 8016794:	0801e48c 	.word	0x0801e48c
 8016798:	20007128 	.word	0x20007128

0801679c <lwip_cyclic_timer>:
#if !LWIP_TESTMODE
static
#endif
void
lwip_cyclic_timer(void *arg)
{
 801679c:	b580      	push	{r7, lr}
 801679e:	b086      	sub	sp, #24
 80167a0:	af00      	add	r7, sp, #0
 80167a2:	6078      	str	r0, [r7, #4]
  u32_t now;
  u32_t next_timeout_time;
  const struct lwip_cyclic_timer *cyclic = (const struct lwip_cyclic_timer *)arg;
 80167a4:	687b      	ldr	r3, [r7, #4]
 80167a6:	617b      	str	r3, [r7, #20]

#if LWIP_DEBUG_TIMERNAMES
  LWIP_DEBUGF(TIMERS_DEBUG, ("tcpip: %s()\n", cyclic->handler_name));
#endif
  cyclic->handler();
 80167a8:	697b      	ldr	r3, [r7, #20]
 80167aa:	685b      	ldr	r3, [r3, #4]
 80167ac:	4798      	blx	r3

  now = sys_now();
 80167ae:	f7f8 fdb5 	bl	800f31c <sys_now>
 80167b2:	6138      	str	r0, [r7, #16]
  next_timeout_time = (u32_t)(current_timeout_due_time + cyclic->interval_ms);  /* overflow handled by TIME_LESS_THAN macro */ 
 80167b4:	697b      	ldr	r3, [r7, #20]
 80167b6:	681a      	ldr	r2, [r3, #0]
 80167b8:	4b0f      	ldr	r3, [pc, #60]	; (80167f8 <lwip_cyclic_timer+0x5c>)
 80167ba:	681b      	ldr	r3, [r3, #0]
 80167bc:	4413      	add	r3, r2
 80167be:	60fb      	str	r3, [r7, #12]
  if (TIME_LESS_THAN(next_timeout_time, now)) {
 80167c0:	68fa      	ldr	r2, [r7, #12]
 80167c2:	693b      	ldr	r3, [r7, #16]
 80167c4:	1ad3      	subs	r3, r2, r3
 80167c6:	0fdb      	lsrs	r3, r3, #31
 80167c8:	f003 0301 	and.w	r3, r3, #1
 80167cc:	b2db      	uxtb	r3, r3
 80167ce:	2b00      	cmp	r3, #0
 80167d0:	d009      	beq.n	80167e6 <lwip_cyclic_timer+0x4a>
    /* timer would immediately expire again -> "overload" -> restart without any correction */
#if LWIP_DEBUG_TIMERNAMES
    sys_timeout_abs((u32_t)(now + cyclic->interval_ms), lwip_cyclic_timer, arg, cyclic->handler_name);
#else
    sys_timeout_abs((u32_t)(now + cyclic->interval_ms), lwip_cyclic_timer, arg);
 80167d2:	697b      	ldr	r3, [r7, #20]
 80167d4:	681a      	ldr	r2, [r3, #0]
 80167d6:	693b      	ldr	r3, [r7, #16]
 80167d8:	4413      	add	r3, r2
 80167da:	687a      	ldr	r2, [r7, #4]
 80167dc:	4907      	ldr	r1, [pc, #28]	; (80167fc <lwip_cyclic_timer+0x60>)
 80167de:	4618      	mov	r0, r3
 80167e0:	f7ff ff6e 	bl	80166c0 <sys_timeout_abs>
    sys_timeout_abs(next_timeout_time, lwip_cyclic_timer, arg, cyclic->handler_name);
#else
    sys_timeout_abs(next_timeout_time, lwip_cyclic_timer, arg);
#endif
  }
}
 80167e4:	e004      	b.n	80167f0 <lwip_cyclic_timer+0x54>
    sys_timeout_abs(next_timeout_time, lwip_cyclic_timer, arg);
 80167e6:	687a      	ldr	r2, [r7, #4]
 80167e8:	4904      	ldr	r1, [pc, #16]	; (80167fc <lwip_cyclic_timer+0x60>)
 80167ea:	68f8      	ldr	r0, [r7, #12]
 80167ec:	f7ff ff68 	bl	80166c0 <sys_timeout_abs>
}
 80167f0:	bf00      	nop
 80167f2:	3718      	adds	r7, #24
 80167f4:	46bd      	mov	sp, r7
 80167f6:	bd80      	pop	{r7, pc}
 80167f8:	2000712c 	.word	0x2000712c
 80167fc:	0801679d 	.word	0x0801679d

08016800 <sys_timeouts_init>:

/** Initialize this module */
void sys_timeouts_init(void)
{
 8016800:	b580      	push	{r7, lr}
 8016802:	b082      	sub	sp, #8
 8016804:	af00      	add	r7, sp, #0
  size_t i;
  /* tcp_tmr() at index 0 is started on demand */
  for (i = (LWIP_TCP ? 1 : 0); i < LWIP_ARRAYSIZE(lwip_cyclic_timers); i++) {
 8016806:	2301      	movs	r3, #1
 8016808:	607b      	str	r3, [r7, #4]
 801680a:	e00e      	b.n	801682a <sys_timeouts_init+0x2a>
    /* we have to cast via size_t to get rid of const warning
      (this is OK as cyclic_timer() casts back to const* */
    sys_timeout(lwip_cyclic_timers[i].interval_ms, lwip_cyclic_timer, LWIP_CONST_CAST(void *, &lwip_cyclic_timers[i]));
 801680c:	4a0b      	ldr	r2, [pc, #44]	; (801683c <sys_timeouts_init+0x3c>)
 801680e:	687b      	ldr	r3, [r7, #4]
 8016810:	f852 0033 	ldr.w	r0, [r2, r3, lsl #3]
 8016814:	687b      	ldr	r3, [r7, #4]
 8016816:	00db      	lsls	r3, r3, #3
 8016818:	4a08      	ldr	r2, [pc, #32]	; (801683c <sys_timeouts_init+0x3c>)
 801681a:	4413      	add	r3, r2
 801681c:	461a      	mov	r2, r3
 801681e:	4908      	ldr	r1, [pc, #32]	; (8016840 <sys_timeouts_init+0x40>)
 8016820:	f000 f810 	bl	8016844 <sys_timeout>
  for (i = (LWIP_TCP ? 1 : 0); i < LWIP_ARRAYSIZE(lwip_cyclic_timers); i++) {
 8016824:	687b      	ldr	r3, [r7, #4]
 8016826:	3301      	adds	r3, #1
 8016828:	607b      	str	r3, [r7, #4]
 801682a:	687b      	ldr	r3, [r7, #4]
 801682c:	2b02      	cmp	r3, #2
 801682e:	d9ed      	bls.n	801680c <sys_timeouts_init+0xc>
  }
}
 8016830:	bf00      	nop
 8016832:	bf00      	nop
 8016834:	3708      	adds	r7, #8
 8016836:	46bd      	mov	sp, r7
 8016838:	bd80      	pop	{r7, pc}
 801683a:	bf00      	nop
 801683c:	0801f024 	.word	0x0801f024
 8016840:	0801679d 	.word	0x0801679d

08016844 <sys_timeout>:
sys_timeout_debug(u32_t msecs, sys_timeout_handler handler, void *arg, const char *handler_name)
#else /* LWIP_DEBUG_TIMERNAMES */
void
sys_timeout(u32_t msecs, sys_timeout_handler handler, void *arg)
#endif /* LWIP_DEBUG_TIMERNAMES */
{
 8016844:	b580      	push	{r7, lr}
 8016846:	b086      	sub	sp, #24
 8016848:	af00      	add	r7, sp, #0
 801684a:	60f8      	str	r0, [r7, #12]
 801684c:	60b9      	str	r1, [r7, #8]
 801684e:	607a      	str	r2, [r7, #4]
  u32_t next_timeout_time;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ASSERT("Timeout time too long, max is LWIP_UINT32_MAX/4 msecs", msecs <= (LWIP_UINT32_MAX / 4));
 8016850:	68fb      	ldr	r3, [r7, #12]
 8016852:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8016856:	d306      	bcc.n	8016866 <sys_timeout+0x22>
 8016858:	4b0a      	ldr	r3, [pc, #40]	; (8016884 <sys_timeout+0x40>)
 801685a:	f240 1229 	movw	r2, #297	; 0x129
 801685e:	490a      	ldr	r1, [pc, #40]	; (8016888 <sys_timeout+0x44>)
 8016860:	480a      	ldr	r0, [pc, #40]	; (801688c <sys_timeout+0x48>)
 8016862:	f003 f9f5 	bl	8019c50 <iprintf>

  next_timeout_time = (u32_t)(sys_now() + msecs); /* overflow handled by TIME_LESS_THAN macro */ 
 8016866:	f7f8 fd59 	bl	800f31c <sys_now>
 801686a:	4602      	mov	r2, r0
 801686c:	68fb      	ldr	r3, [r7, #12]
 801686e:	4413      	add	r3, r2
 8016870:	617b      	str	r3, [r7, #20]

#if LWIP_DEBUG_TIMERNAMES
  sys_timeout_abs(next_timeout_time, handler, arg, handler_name);
#else
  sys_timeout_abs(next_timeout_time, handler, arg);
 8016872:	687a      	ldr	r2, [r7, #4]
 8016874:	68b9      	ldr	r1, [r7, #8]
 8016876:	6978      	ldr	r0, [r7, #20]
 8016878:	f7ff ff22 	bl	80166c0 <sys_timeout_abs>
#endif
}
 801687c:	bf00      	nop
 801687e:	3718      	adds	r7, #24
 8016880:	46bd      	mov	sp, r7
 8016882:	bd80      	pop	{r7, pc}
 8016884:	0801e418 	.word	0x0801e418
 8016888:	0801e4b4 	.word	0x0801e4b4
 801688c:	0801e48c 	.word	0x0801e48c

08016890 <udp_init>:
/**
 * Initialize this module.
 */
void
udp_init(void)
{
 8016890:	b580      	push	{r7, lr}
 8016892:	af00      	add	r7, sp, #0
#ifdef LWIP_RAND
  udp_port = UDP_ENSURE_LOCAL_PORT_RANGE(LWIP_RAND());
 8016894:	f002 fca2 	bl	80191dc <rand>
 8016898:	4603      	mov	r3, r0
 801689a:	b29b      	uxth	r3, r3
 801689c:	f3c3 030d 	ubfx	r3, r3, #0, #14
 80168a0:	b29b      	uxth	r3, r3
 80168a2:	f5a3 4380 	sub.w	r3, r3, #16384	; 0x4000
 80168a6:	b29a      	uxth	r2, r3
 80168a8:	4b01      	ldr	r3, [pc, #4]	; (80168b0 <udp_init+0x20>)
 80168aa:	801a      	strh	r2, [r3, #0]
#endif /* LWIP_RAND */
}
 80168ac:	bf00      	nop
 80168ae:	bd80      	pop	{r7, pc}
 80168b0:	20000060 	.word	0x20000060

080168b4 <udp_input_local_match>:
 * @param broadcast 1 if his is an IPv4 broadcast (global or subnet-only), 0 otherwise (only used for IPv4)
 * @return 1 on match, 0 otherwise
 */
static u8_t
udp_input_local_match(struct udp_pcb *pcb, struct netif *inp, u8_t broadcast)
{
 80168b4:	b580      	push	{r7, lr}
 80168b6:	b084      	sub	sp, #16
 80168b8:	af00      	add	r7, sp, #0
 80168ba:	60f8      	str	r0, [r7, #12]
 80168bc:	60b9      	str	r1, [r7, #8]
 80168be:	4613      	mov	r3, r2
 80168c0:	71fb      	strb	r3, [r7, #7]
  LWIP_UNUSED_ARG(inp);       /* in IPv6 only case */
  LWIP_UNUSED_ARG(broadcast); /* in IPv6 only case */

  LWIP_ASSERT("udp_input_local_match: invalid pcb", pcb != NULL);
 80168c2:	68fb      	ldr	r3, [r7, #12]
 80168c4:	2b00      	cmp	r3, #0
 80168c6:	d105      	bne.n	80168d4 <udp_input_local_match+0x20>
 80168c8:	4b27      	ldr	r3, [pc, #156]	; (8016968 <udp_input_local_match+0xb4>)
 80168ca:	2287      	movs	r2, #135	; 0x87
 80168cc:	4927      	ldr	r1, [pc, #156]	; (801696c <udp_input_local_match+0xb8>)
 80168ce:	4828      	ldr	r0, [pc, #160]	; (8016970 <udp_input_local_match+0xbc>)
 80168d0:	f003 f9be 	bl	8019c50 <iprintf>
  LWIP_ASSERT("udp_input_local_match: invalid netif", inp != NULL);
 80168d4:	68bb      	ldr	r3, [r7, #8]
 80168d6:	2b00      	cmp	r3, #0
 80168d8:	d105      	bne.n	80168e6 <udp_input_local_match+0x32>
 80168da:	4b23      	ldr	r3, [pc, #140]	; (8016968 <udp_input_local_match+0xb4>)
 80168dc:	2288      	movs	r2, #136	; 0x88
 80168de:	4925      	ldr	r1, [pc, #148]	; (8016974 <udp_input_local_match+0xc0>)
 80168e0:	4823      	ldr	r0, [pc, #140]	; (8016970 <udp_input_local_match+0xbc>)
 80168e2:	f003 f9b5 	bl	8019c50 <iprintf>

  /* check if PCB is bound to specific netif */
  if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 80168e6:	68fb      	ldr	r3, [r7, #12]
 80168e8:	7a1b      	ldrb	r3, [r3, #8]
 80168ea:	2b00      	cmp	r3, #0
 80168ec:	d00b      	beq.n	8016906 <udp_input_local_match+0x52>
      (pcb->netif_idx != netif_get_index(ip_data.current_input_netif))) {
 80168ee:	68fb      	ldr	r3, [r7, #12]
 80168f0:	7a1a      	ldrb	r2, [r3, #8]
 80168f2:	4b21      	ldr	r3, [pc, #132]	; (8016978 <udp_input_local_match+0xc4>)
 80168f4:	685b      	ldr	r3, [r3, #4]
 80168f6:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 80168fa:	3301      	adds	r3, #1
 80168fc:	b2db      	uxtb	r3, r3
  if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 80168fe:	429a      	cmp	r2, r3
 8016900:	d001      	beq.n	8016906 <udp_input_local_match+0x52>
    return 0;
 8016902:	2300      	movs	r3, #0
 8016904:	e02b      	b.n	801695e <udp_input_local_match+0xaa>
  /* Only need to check PCB if incoming IP version matches PCB IP version */
  if (IP_ADDR_PCB_VERSION_MATCH_EXACT(pcb, ip_current_dest_addr())) {
#if LWIP_IPV4
    /* Special case: IPv4 broadcast: all or broadcasts in my subnet
     * Note: broadcast variable can only be 1 if it is an IPv4 broadcast */
    if (broadcast != 0) {
 8016906:	79fb      	ldrb	r3, [r7, #7]
 8016908:	2b00      	cmp	r3, #0
 801690a:	d018      	beq.n	801693e <udp_input_local_match+0x8a>
#if IP_SOF_BROADCAST_RECV
      if (ip_get_option(pcb, SOF_BROADCAST))
#endif /* IP_SOF_BROADCAST_RECV */
      {
        if (ip4_addr_isany(ip_2_ip4(&pcb->local_ip)) ||
 801690c:	68fb      	ldr	r3, [r7, #12]
 801690e:	2b00      	cmp	r3, #0
 8016910:	d013      	beq.n	801693a <udp_input_local_match+0x86>
 8016912:	68fb      	ldr	r3, [r7, #12]
 8016914:	681b      	ldr	r3, [r3, #0]
 8016916:	2b00      	cmp	r3, #0
 8016918:	d00f      	beq.n	801693a <udp_input_local_match+0x86>
            ((ip4_current_dest_addr()->addr == IPADDR_BROADCAST)) ||
 801691a:	4b17      	ldr	r3, [pc, #92]	; (8016978 <udp_input_local_match+0xc4>)
 801691c:	695b      	ldr	r3, [r3, #20]
        if (ip4_addr_isany(ip_2_ip4(&pcb->local_ip)) ||
 801691e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8016922:	d00a      	beq.n	801693a <udp_input_local_match+0x86>
            ip4_addr_netcmp(ip_2_ip4(&pcb->local_ip), ip4_current_dest_addr(), netif_ip4_netmask(inp))) {
 8016924:	68fb      	ldr	r3, [r7, #12]
 8016926:	681a      	ldr	r2, [r3, #0]
 8016928:	4b13      	ldr	r3, [pc, #76]	; (8016978 <udp_input_local_match+0xc4>)
 801692a:	695b      	ldr	r3, [r3, #20]
 801692c:	405a      	eors	r2, r3
 801692e:	68bb      	ldr	r3, [r7, #8]
 8016930:	3308      	adds	r3, #8
 8016932:	681b      	ldr	r3, [r3, #0]
 8016934:	4013      	ands	r3, r2
            ((ip4_current_dest_addr()->addr == IPADDR_BROADCAST)) ||
 8016936:	2b00      	cmp	r3, #0
 8016938:	d110      	bne.n	801695c <udp_input_local_match+0xa8>
          return 1;
 801693a:	2301      	movs	r3, #1
 801693c:	e00f      	b.n	801695e <udp_input_local_match+0xaa>
        }
      }
    } else
#endif /* LWIP_IPV4 */
      /* Handle IPv4 and IPv6: all or exact match */
      if (ip_addr_isany(&pcb->local_ip) || ip_addr_cmp(&pcb->local_ip, ip_current_dest_addr())) {
 801693e:	68fb      	ldr	r3, [r7, #12]
 8016940:	2b00      	cmp	r3, #0
 8016942:	d009      	beq.n	8016958 <udp_input_local_match+0xa4>
 8016944:	68fb      	ldr	r3, [r7, #12]
 8016946:	681b      	ldr	r3, [r3, #0]
 8016948:	2b00      	cmp	r3, #0
 801694a:	d005      	beq.n	8016958 <udp_input_local_match+0xa4>
 801694c:	68fb      	ldr	r3, [r7, #12]
 801694e:	681a      	ldr	r2, [r3, #0]
 8016950:	4b09      	ldr	r3, [pc, #36]	; (8016978 <udp_input_local_match+0xc4>)
 8016952:	695b      	ldr	r3, [r3, #20]
 8016954:	429a      	cmp	r2, r3
 8016956:	d101      	bne.n	801695c <udp_input_local_match+0xa8>
        return 1;
 8016958:	2301      	movs	r3, #1
 801695a:	e000      	b.n	801695e <udp_input_local_match+0xaa>
      }
  }

  return 0;
 801695c:	2300      	movs	r3, #0
}
 801695e:	4618      	mov	r0, r3
 8016960:	3710      	adds	r7, #16
 8016962:	46bd      	mov	sp, r7
 8016964:	bd80      	pop	{r7, pc}
 8016966:	bf00      	nop
 8016968:	0801e500 	.word	0x0801e500
 801696c:	0801e530 	.word	0x0801e530
 8016970:	0801e554 	.word	0x0801e554
 8016974:	0801e57c 	.word	0x0801e57c
 8016978:	200007fc 	.word	0x200007fc

0801697c <udp_input>:
 * @param inp network interface on which the datagram was received.
 *
 */
void
udp_input(struct pbuf *p, struct netif *inp)
{
 801697c:	b590      	push	{r4, r7, lr}
 801697e:	b08d      	sub	sp, #52	; 0x34
 8016980:	af02      	add	r7, sp, #8
 8016982:	6078      	str	r0, [r7, #4]
 8016984:	6039      	str	r1, [r7, #0]
  struct udp_hdr *udphdr;
  struct udp_pcb *pcb, *prev;
  struct udp_pcb *uncon_pcb;
  u16_t src, dest;
  u8_t broadcast;
  u8_t for_us = 0;
 8016986:	2300      	movs	r3, #0
 8016988:	76fb      	strb	r3, [r7, #27]

  LWIP_UNUSED_ARG(inp);

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ASSERT("udp_input: invalid pbuf", p != NULL);
 801698a:	687b      	ldr	r3, [r7, #4]
 801698c:	2b00      	cmp	r3, #0
 801698e:	d105      	bne.n	801699c <udp_input+0x20>
 8016990:	4b7c      	ldr	r3, [pc, #496]	; (8016b84 <udp_input+0x208>)
 8016992:	22cf      	movs	r2, #207	; 0xcf
 8016994:	497c      	ldr	r1, [pc, #496]	; (8016b88 <udp_input+0x20c>)
 8016996:	487d      	ldr	r0, [pc, #500]	; (8016b8c <udp_input+0x210>)
 8016998:	f003 f95a 	bl	8019c50 <iprintf>
  LWIP_ASSERT("udp_input: invalid netif", inp != NULL);
 801699c:	683b      	ldr	r3, [r7, #0]
 801699e:	2b00      	cmp	r3, #0
 80169a0:	d105      	bne.n	80169ae <udp_input+0x32>
 80169a2:	4b78      	ldr	r3, [pc, #480]	; (8016b84 <udp_input+0x208>)
 80169a4:	22d0      	movs	r2, #208	; 0xd0
 80169a6:	497a      	ldr	r1, [pc, #488]	; (8016b90 <udp_input+0x214>)
 80169a8:	4878      	ldr	r0, [pc, #480]	; (8016b8c <udp_input+0x210>)
 80169aa:	f003 f951 	bl	8019c50 <iprintf>
  PERF_START;

  UDP_STATS_INC(udp.recv);

  /* Check minimum length (UDP header) */
  if (p->len < UDP_HLEN) {
 80169ae:	687b      	ldr	r3, [r7, #4]
 80169b0:	895b      	ldrh	r3, [r3, #10]
 80169b2:	2b07      	cmp	r3, #7
 80169b4:	d803      	bhi.n	80169be <udp_input+0x42>
    LWIP_DEBUGF(UDP_DEBUG,
                ("udp_input: short UDP datagram (%"U16_F" bytes) discarded\n", p->tot_len));
    UDP_STATS_INC(udp.lenerr);
    UDP_STATS_INC(udp.drop);
    MIB2_STATS_INC(mib2.udpinerrors);
    pbuf_free(p);
 80169b6:	6878      	ldr	r0, [r7, #4]
 80169b8:	f7fa fa74 	bl	8010ea4 <pbuf_free>
    goto end;
 80169bc:	e0de      	b.n	8016b7c <udp_input+0x200>
  }

  udphdr = (struct udp_hdr *)p->payload;
 80169be:	687b      	ldr	r3, [r7, #4]
 80169c0:	685b      	ldr	r3, [r3, #4]
 80169c2:	617b      	str	r3, [r7, #20]

  /* is broadcast packet ? */
  broadcast = ip_addr_isbroadcast(ip_current_dest_addr(), ip_current_netif());
 80169c4:	4b73      	ldr	r3, [pc, #460]	; (8016b94 <udp_input+0x218>)
 80169c6:	695b      	ldr	r3, [r3, #20]
 80169c8:	4a72      	ldr	r2, [pc, #456]	; (8016b94 <udp_input+0x218>)
 80169ca:	6812      	ldr	r2, [r2, #0]
 80169cc:	4611      	mov	r1, r2
 80169ce:	4618      	mov	r0, r3
 80169d0:	f001 fcae 	bl	8018330 <ip4_addr_isbroadcast_u32>
 80169d4:	4603      	mov	r3, r0
 80169d6:	74fb      	strb	r3, [r7, #19]

  LWIP_DEBUGF(UDP_DEBUG, ("udp_input: received datagram of length %"U16_F"\n", p->tot_len));

  /* convert src and dest ports to host byte order */
  src = lwip_ntohs(udphdr->src);
 80169d8:	697b      	ldr	r3, [r7, #20]
 80169da:	881b      	ldrh	r3, [r3, #0]
 80169dc:	b29b      	uxth	r3, r3
 80169de:	4618      	mov	r0, r3
 80169e0:	f7f8 fe7c 	bl	800f6dc <lwip_htons>
 80169e4:	4603      	mov	r3, r0
 80169e6:	823b      	strh	r3, [r7, #16]
  dest = lwip_ntohs(udphdr->dest);
 80169e8:	697b      	ldr	r3, [r7, #20]
 80169ea:	885b      	ldrh	r3, [r3, #2]
 80169ec:	b29b      	uxth	r3, r3
 80169ee:	4618      	mov	r0, r3
 80169f0:	f7f8 fe74 	bl	800f6dc <lwip_htons>
 80169f4:	4603      	mov	r3, r0
 80169f6:	81fb      	strh	r3, [r7, #14]
  ip_addr_debug_print_val(UDP_DEBUG, *ip_current_dest_addr());
  LWIP_DEBUGF(UDP_DEBUG, (", %"U16_F") <-- (", lwip_ntohs(udphdr->dest)));
  ip_addr_debug_print_val(UDP_DEBUG, *ip_current_src_addr());
  LWIP_DEBUGF(UDP_DEBUG, (", %"U16_F")\n", lwip_ntohs(udphdr->src)));

  pcb = NULL;
 80169f8:	2300      	movs	r3, #0
 80169fa:	627b      	str	r3, [r7, #36]	; 0x24
  prev = NULL;
 80169fc:	2300      	movs	r3, #0
 80169fe:	623b      	str	r3, [r7, #32]
  uncon_pcb = NULL;
 8016a00:	2300      	movs	r3, #0
 8016a02:	61fb      	str	r3, [r7, #28]
  /* Iterate through the UDP pcb list for a matching pcb.
   * 'Perfect match' pcbs (connected to the remote port & ip address) are
   * preferred. If no perfect match is found, the first unconnected pcb that
   * matches the local port and ip address gets the datagram. */
  for (pcb = udp_pcbs; pcb != NULL; pcb = pcb->next) {
 8016a04:	4b64      	ldr	r3, [pc, #400]	; (8016b98 <udp_input+0x21c>)
 8016a06:	681b      	ldr	r3, [r3, #0]
 8016a08:	627b      	str	r3, [r7, #36]	; 0x24
 8016a0a:	e054      	b.n	8016ab6 <udp_input+0x13a>
    LWIP_DEBUGF(UDP_DEBUG, (", %"U16_F") <-- (", pcb->local_port));
    ip_addr_debug_print_val(UDP_DEBUG, pcb->remote_ip);
    LWIP_DEBUGF(UDP_DEBUG, (", %"U16_F")\n", pcb->remote_port));

    /* compare PCB local addr+port to UDP destination addr+port */
    if ((pcb->local_port == dest) &&
 8016a0c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8016a0e:	8a5b      	ldrh	r3, [r3, #18]
 8016a10:	89fa      	ldrh	r2, [r7, #14]
 8016a12:	429a      	cmp	r2, r3
 8016a14:	d14a      	bne.n	8016aac <udp_input+0x130>
        (udp_input_local_match(pcb, inp, broadcast) != 0)) {
 8016a16:	7cfb      	ldrb	r3, [r7, #19]
 8016a18:	461a      	mov	r2, r3
 8016a1a:	6839      	ldr	r1, [r7, #0]
 8016a1c:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8016a1e:	f7ff ff49 	bl	80168b4 <udp_input_local_match>
 8016a22:	4603      	mov	r3, r0
    if ((pcb->local_port == dest) &&
 8016a24:	2b00      	cmp	r3, #0
 8016a26:	d041      	beq.n	8016aac <udp_input+0x130>
      if ((pcb->flags & UDP_FLAGS_CONNECTED) == 0) {
 8016a28:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8016a2a:	7c1b      	ldrb	r3, [r3, #16]
 8016a2c:	f003 0304 	and.w	r3, r3, #4
 8016a30:	2b00      	cmp	r3, #0
 8016a32:	d11d      	bne.n	8016a70 <udp_input+0xf4>
        if (uncon_pcb == NULL) {
 8016a34:	69fb      	ldr	r3, [r7, #28]
 8016a36:	2b00      	cmp	r3, #0
 8016a38:	d102      	bne.n	8016a40 <udp_input+0xc4>
          /* the first unconnected matching PCB */
          uncon_pcb = pcb;
 8016a3a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8016a3c:	61fb      	str	r3, [r7, #28]
 8016a3e:	e017      	b.n	8016a70 <udp_input+0xf4>
#if LWIP_IPV4
        } else if (broadcast && ip4_current_dest_addr()->addr == IPADDR_BROADCAST) {
 8016a40:	7cfb      	ldrb	r3, [r7, #19]
 8016a42:	2b00      	cmp	r3, #0
 8016a44:	d014      	beq.n	8016a70 <udp_input+0xf4>
 8016a46:	4b53      	ldr	r3, [pc, #332]	; (8016b94 <udp_input+0x218>)
 8016a48:	695b      	ldr	r3, [r3, #20]
 8016a4a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8016a4e:	d10f      	bne.n	8016a70 <udp_input+0xf4>
          /* global broadcast address (only valid for IPv4; match was checked before) */
          if (!IP_IS_V4_VAL(uncon_pcb->local_ip) || !ip4_addr_cmp(ip_2_ip4(&uncon_pcb->local_ip), netif_ip4_addr(inp))) {
 8016a50:	69fb      	ldr	r3, [r7, #28]
 8016a52:	681a      	ldr	r2, [r3, #0]
 8016a54:	683b      	ldr	r3, [r7, #0]
 8016a56:	3304      	adds	r3, #4
 8016a58:	681b      	ldr	r3, [r3, #0]
 8016a5a:	429a      	cmp	r2, r3
 8016a5c:	d008      	beq.n	8016a70 <udp_input+0xf4>
            /* uncon_pcb does not match the input netif, check this pcb */
            if (IP_IS_V4_VAL(pcb->local_ip) && ip4_addr_cmp(ip_2_ip4(&pcb->local_ip), netif_ip4_addr(inp))) {
 8016a5e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8016a60:	681a      	ldr	r2, [r3, #0]
 8016a62:	683b      	ldr	r3, [r7, #0]
 8016a64:	3304      	adds	r3, #4
 8016a66:	681b      	ldr	r3, [r3, #0]
 8016a68:	429a      	cmp	r2, r3
 8016a6a:	d101      	bne.n	8016a70 <udp_input+0xf4>
              /* better match */
              uncon_pcb = pcb;
 8016a6c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8016a6e:	61fb      	str	r3, [r7, #28]
        }
#endif /* SO_REUSE */
      }

      /* compare PCB remote addr+port to UDP source addr+port */
      if ((pcb->remote_port == src) &&
 8016a70:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8016a72:	8a9b      	ldrh	r3, [r3, #20]
 8016a74:	8a3a      	ldrh	r2, [r7, #16]
 8016a76:	429a      	cmp	r2, r3
 8016a78:	d118      	bne.n	8016aac <udp_input+0x130>
          (ip_addr_isany_val(pcb->remote_ip) ||
 8016a7a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8016a7c:	685b      	ldr	r3, [r3, #4]
      if ((pcb->remote_port == src) &&
 8016a7e:	2b00      	cmp	r3, #0
 8016a80:	d005      	beq.n	8016a8e <udp_input+0x112>
           ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()))) {
 8016a82:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8016a84:	685a      	ldr	r2, [r3, #4]
 8016a86:	4b43      	ldr	r3, [pc, #268]	; (8016b94 <udp_input+0x218>)
 8016a88:	691b      	ldr	r3, [r3, #16]
          (ip_addr_isany_val(pcb->remote_ip) ||
 8016a8a:	429a      	cmp	r2, r3
 8016a8c:	d10e      	bne.n	8016aac <udp_input+0x130>
        /* the first fully matching PCB */
        if (prev != NULL) {
 8016a8e:	6a3b      	ldr	r3, [r7, #32]
 8016a90:	2b00      	cmp	r3, #0
 8016a92:	d014      	beq.n	8016abe <udp_input+0x142>
          /* move the pcb to the front of udp_pcbs so that is
             found faster next time */
          prev->next = pcb->next;
 8016a94:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8016a96:	68da      	ldr	r2, [r3, #12]
 8016a98:	6a3b      	ldr	r3, [r7, #32]
 8016a9a:	60da      	str	r2, [r3, #12]
          pcb->next = udp_pcbs;
 8016a9c:	4b3e      	ldr	r3, [pc, #248]	; (8016b98 <udp_input+0x21c>)
 8016a9e:	681a      	ldr	r2, [r3, #0]
 8016aa0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8016aa2:	60da      	str	r2, [r3, #12]
          udp_pcbs = pcb;
 8016aa4:	4a3c      	ldr	r2, [pc, #240]	; (8016b98 <udp_input+0x21c>)
 8016aa6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8016aa8:	6013      	str	r3, [r2, #0]
        } else {
          UDP_STATS_INC(udp.cachehit);
        }
        break;
 8016aaa:	e008      	b.n	8016abe <udp_input+0x142>
      }
    }

    prev = pcb;
 8016aac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8016aae:	623b      	str	r3, [r7, #32]
  for (pcb = udp_pcbs; pcb != NULL; pcb = pcb->next) {
 8016ab0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8016ab2:	68db      	ldr	r3, [r3, #12]
 8016ab4:	627b      	str	r3, [r7, #36]	; 0x24
 8016ab6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8016ab8:	2b00      	cmp	r3, #0
 8016aba:	d1a7      	bne.n	8016a0c <udp_input+0x90>
 8016abc:	e000      	b.n	8016ac0 <udp_input+0x144>
        break;
 8016abe:	bf00      	nop
  }
  /* no fully matching pcb found? then look for an unconnected pcb */
  if (pcb == NULL) {
 8016ac0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8016ac2:	2b00      	cmp	r3, #0
 8016ac4:	d101      	bne.n	8016aca <udp_input+0x14e>
    pcb = uncon_pcb;
 8016ac6:	69fb      	ldr	r3, [r7, #28]
 8016ac8:	627b      	str	r3, [r7, #36]	; 0x24
  }

  /* Check checksum if this is a match or if it was directed at us. */
  if (pcb != NULL) {
 8016aca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8016acc:	2b00      	cmp	r3, #0
 8016ace:	d002      	beq.n	8016ad6 <udp_input+0x15a>
    for_us = 1;
 8016ad0:	2301      	movs	r3, #1
 8016ad2:	76fb      	strb	r3, [r7, #27]
 8016ad4:	e00a      	b.n	8016aec <udp_input+0x170>
      for_us = netif_get_ip6_addr_match(inp, ip6_current_dest_addr()) >= 0;
    }
#endif /* LWIP_IPV6 */
#if LWIP_IPV4
    if (!ip_current_is_v6()) {
      for_us = ip4_addr_cmp(netif_ip4_addr(inp), ip4_current_dest_addr());
 8016ad6:	683b      	ldr	r3, [r7, #0]
 8016ad8:	3304      	adds	r3, #4
 8016ada:	681a      	ldr	r2, [r3, #0]
 8016adc:	4b2d      	ldr	r3, [pc, #180]	; (8016b94 <udp_input+0x218>)
 8016ade:	695b      	ldr	r3, [r3, #20]
 8016ae0:	429a      	cmp	r2, r3
 8016ae2:	bf0c      	ite	eq
 8016ae4:	2301      	moveq	r3, #1
 8016ae6:	2300      	movne	r3, #0
 8016ae8:	b2db      	uxtb	r3, r3
 8016aea:	76fb      	strb	r3, [r7, #27]
    }
#endif /* LWIP_IPV4 */
  }

  if (for_us) {
 8016aec:	7efb      	ldrb	r3, [r7, #27]
 8016aee:	2b00      	cmp	r3, #0
 8016af0:	d041      	beq.n	8016b76 <udp_input+0x1fa>
          }
        }
      }
    }
#endif /* CHECKSUM_CHECK_UDP */
    if (pbuf_remove_header(p, UDP_HLEN)) {
 8016af2:	2108      	movs	r1, #8
 8016af4:	6878      	ldr	r0, [r7, #4]
 8016af6:	f7fa f94f 	bl	8010d98 <pbuf_remove_header>
 8016afa:	4603      	mov	r3, r0
 8016afc:	2b00      	cmp	r3, #0
 8016afe:	d00a      	beq.n	8016b16 <udp_input+0x19a>
      /* Can we cope with this failing? Just assert for now */
      LWIP_ASSERT("pbuf_remove_header failed\n", 0);
 8016b00:	4b20      	ldr	r3, [pc, #128]	; (8016b84 <udp_input+0x208>)
 8016b02:	f44f 72b8 	mov.w	r2, #368	; 0x170
 8016b06:	4925      	ldr	r1, [pc, #148]	; (8016b9c <udp_input+0x220>)
 8016b08:	4820      	ldr	r0, [pc, #128]	; (8016b8c <udp_input+0x210>)
 8016b0a:	f003 f8a1 	bl	8019c50 <iprintf>
      UDP_STATS_INC(udp.drop);
      MIB2_STATS_INC(mib2.udpinerrors);
      pbuf_free(p);
 8016b0e:	6878      	ldr	r0, [r7, #4]
 8016b10:	f7fa f9c8 	bl	8010ea4 <pbuf_free>
      goto end;
 8016b14:	e032      	b.n	8016b7c <udp_input+0x200>
    }

    if (pcb != NULL) {
 8016b16:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8016b18:	2b00      	cmp	r3, #0
 8016b1a:	d012      	beq.n	8016b42 <udp_input+0x1c6>
          }
        }
      }
#endif /* SO_REUSE && SO_REUSE_RXTOALL */
      /* callback */
      if (pcb->recv != NULL) {
 8016b1c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8016b1e:	699b      	ldr	r3, [r3, #24]
 8016b20:	2b00      	cmp	r3, #0
 8016b22:	d00a      	beq.n	8016b3a <udp_input+0x1be>
        /* now the recv function is responsible for freeing p */
        pcb->recv(pcb->recv_arg, pcb, p, ip_current_src_addr(), src);
 8016b24:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8016b26:	699c      	ldr	r4, [r3, #24]
 8016b28:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8016b2a:	69d8      	ldr	r0, [r3, #28]
 8016b2c:	8a3b      	ldrh	r3, [r7, #16]
 8016b2e:	9300      	str	r3, [sp, #0]
 8016b30:	4b1b      	ldr	r3, [pc, #108]	; (8016ba0 <udp_input+0x224>)
 8016b32:	687a      	ldr	r2, [r7, #4]
 8016b34:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8016b36:	47a0      	blx	r4
  } else {
    pbuf_free(p);
  }
end:
  PERF_STOP("udp_input");
  return;
 8016b38:	e021      	b.n	8016b7e <udp_input+0x202>
        pbuf_free(p);
 8016b3a:	6878      	ldr	r0, [r7, #4]
 8016b3c:	f7fa f9b2 	bl	8010ea4 <pbuf_free>
        goto end;
 8016b40:	e01c      	b.n	8016b7c <udp_input+0x200>
      if (!broadcast && !ip_addr_ismulticast(ip_current_dest_addr())) {
 8016b42:	7cfb      	ldrb	r3, [r7, #19]
 8016b44:	2b00      	cmp	r3, #0
 8016b46:	d112      	bne.n	8016b6e <udp_input+0x1f2>
 8016b48:	4b12      	ldr	r3, [pc, #72]	; (8016b94 <udp_input+0x218>)
 8016b4a:	695b      	ldr	r3, [r3, #20]
 8016b4c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8016b50:	2be0      	cmp	r3, #224	; 0xe0
 8016b52:	d00c      	beq.n	8016b6e <udp_input+0x1f2>
        pbuf_header_force(p, (s16_t)(ip_current_header_tot_len() + UDP_HLEN));
 8016b54:	4b0f      	ldr	r3, [pc, #60]	; (8016b94 <udp_input+0x218>)
 8016b56:	899b      	ldrh	r3, [r3, #12]
 8016b58:	3308      	adds	r3, #8
 8016b5a:	b29b      	uxth	r3, r3
 8016b5c:	b21b      	sxth	r3, r3
 8016b5e:	4619      	mov	r1, r3
 8016b60:	6878      	ldr	r0, [r7, #4]
 8016b62:	f7fa f98c 	bl	8010e7e <pbuf_header_force>
        icmp_port_unreach(ip_current_is_v6(), p);
 8016b66:	2103      	movs	r1, #3
 8016b68:	6878      	ldr	r0, [r7, #4]
 8016b6a:	f001 f8b7 	bl	8017cdc <icmp_dest_unreach>
      pbuf_free(p);
 8016b6e:	6878      	ldr	r0, [r7, #4]
 8016b70:	f7fa f998 	bl	8010ea4 <pbuf_free>
  return;
 8016b74:	e003      	b.n	8016b7e <udp_input+0x202>
    pbuf_free(p);
 8016b76:	6878      	ldr	r0, [r7, #4]
 8016b78:	f7fa f994 	bl	8010ea4 <pbuf_free>
  return;
 8016b7c:	bf00      	nop
  UDP_STATS_INC(udp.drop);
  MIB2_STATS_INC(mib2.udpinerrors);
  pbuf_free(p);
  PERF_STOP("udp_input");
#endif /* CHECKSUM_CHECK_UDP */
}
 8016b7e:	372c      	adds	r7, #44	; 0x2c
 8016b80:	46bd      	mov	sp, r7
 8016b82:	bd90      	pop	{r4, r7, pc}
 8016b84:	0801e500 	.word	0x0801e500
 8016b88:	0801e5a4 	.word	0x0801e5a4
 8016b8c:	0801e554 	.word	0x0801e554
 8016b90:	0801e5bc 	.word	0x0801e5bc
 8016b94:	200007fc 	.word	0x200007fc
 8016b98:	20007134 	.word	0x20007134
 8016b9c:	0801e5d8 	.word	0x0801e5d8
 8016ba0:	2000080c 	.word	0x2000080c

08016ba4 <udp_netif_ip_addr_changed>:
 *
 * @param old_addr IP address of the netif before change
 * @param new_addr IP address of the netif after change
 */
void udp_netif_ip_addr_changed(const ip_addr_t *old_addr, const ip_addr_t *new_addr)
{
 8016ba4:	b480      	push	{r7}
 8016ba6:	b085      	sub	sp, #20
 8016ba8:	af00      	add	r7, sp, #0
 8016baa:	6078      	str	r0, [r7, #4]
 8016bac:	6039      	str	r1, [r7, #0]
  struct udp_pcb *upcb;

  if (!ip_addr_isany(old_addr) && !ip_addr_isany(new_addr)) {
 8016bae:	687b      	ldr	r3, [r7, #4]
 8016bb0:	2b00      	cmp	r3, #0
 8016bb2:	d01e      	beq.n	8016bf2 <udp_netif_ip_addr_changed+0x4e>
 8016bb4:	687b      	ldr	r3, [r7, #4]
 8016bb6:	681b      	ldr	r3, [r3, #0]
 8016bb8:	2b00      	cmp	r3, #0
 8016bba:	d01a      	beq.n	8016bf2 <udp_netif_ip_addr_changed+0x4e>
 8016bbc:	683b      	ldr	r3, [r7, #0]
 8016bbe:	2b00      	cmp	r3, #0
 8016bc0:	d017      	beq.n	8016bf2 <udp_netif_ip_addr_changed+0x4e>
 8016bc2:	683b      	ldr	r3, [r7, #0]
 8016bc4:	681b      	ldr	r3, [r3, #0]
 8016bc6:	2b00      	cmp	r3, #0
 8016bc8:	d013      	beq.n	8016bf2 <udp_netif_ip_addr_changed+0x4e>
    for (upcb = udp_pcbs; upcb != NULL; upcb = upcb->next) {
 8016bca:	4b0d      	ldr	r3, [pc, #52]	; (8016c00 <udp_netif_ip_addr_changed+0x5c>)
 8016bcc:	681b      	ldr	r3, [r3, #0]
 8016bce:	60fb      	str	r3, [r7, #12]
 8016bd0:	e00c      	b.n	8016bec <udp_netif_ip_addr_changed+0x48>
      /* PCB bound to current local interface address? */
      if (ip_addr_cmp(&upcb->local_ip, old_addr)) {
 8016bd2:	68fb      	ldr	r3, [r7, #12]
 8016bd4:	681a      	ldr	r2, [r3, #0]
 8016bd6:	687b      	ldr	r3, [r7, #4]
 8016bd8:	681b      	ldr	r3, [r3, #0]
 8016bda:	429a      	cmp	r2, r3
 8016bdc:	d103      	bne.n	8016be6 <udp_netif_ip_addr_changed+0x42>
        /* The PCB is bound to the old ipaddr and
         * is set to bound to the new one instead */
        ip_addr_copy(upcb->local_ip, *new_addr);
 8016bde:	683b      	ldr	r3, [r7, #0]
 8016be0:	681a      	ldr	r2, [r3, #0]
 8016be2:	68fb      	ldr	r3, [r7, #12]
 8016be4:	601a      	str	r2, [r3, #0]
    for (upcb = udp_pcbs; upcb != NULL; upcb = upcb->next) {
 8016be6:	68fb      	ldr	r3, [r7, #12]
 8016be8:	68db      	ldr	r3, [r3, #12]
 8016bea:	60fb      	str	r3, [r7, #12]
 8016bec:	68fb      	ldr	r3, [r7, #12]
 8016bee:	2b00      	cmp	r3, #0
 8016bf0:	d1ef      	bne.n	8016bd2 <udp_netif_ip_addr_changed+0x2e>
      }
    }
  }
}
 8016bf2:	bf00      	nop
 8016bf4:	3714      	adds	r7, #20
 8016bf6:	46bd      	mov	sp, r7
 8016bf8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016bfc:	4770      	bx	lr
 8016bfe:	bf00      	nop
 8016c00:	20007134 	.word	0x20007134

08016c04 <etharp_free_entry>:
#endif /* ARP_QUEUEING */

/** Clean up ARP table entries */
static void
etharp_free_entry(int i)
{
 8016c04:	b580      	push	{r7, lr}
 8016c06:	b082      	sub	sp, #8
 8016c08:	af00      	add	r7, sp, #0
 8016c0a:	6078      	str	r0, [r7, #4]
  /* remove from SNMP ARP index tree */
  mib2_remove_arp_entry(arp_table[i].netif, &arp_table[i].ipaddr);
  /* and empty packet queue */
  if (arp_table[i].q != NULL) {
 8016c0c:	4915      	ldr	r1, [pc, #84]	; (8016c64 <etharp_free_entry+0x60>)
 8016c0e:	687a      	ldr	r2, [r7, #4]
 8016c10:	4613      	mov	r3, r2
 8016c12:	005b      	lsls	r3, r3, #1
 8016c14:	4413      	add	r3, r2
 8016c16:	00db      	lsls	r3, r3, #3
 8016c18:	440b      	add	r3, r1
 8016c1a:	681b      	ldr	r3, [r3, #0]
 8016c1c:	2b00      	cmp	r3, #0
 8016c1e:	d013      	beq.n	8016c48 <etharp_free_entry+0x44>
    /* remove all queued packets */
    LWIP_DEBUGF(ETHARP_DEBUG, ("etharp_free_entry: freeing entry %"U16_F", packet queue %p.\n", (u16_t)i, (void *)(arp_table[i].q)));
    free_etharp_q(arp_table[i].q);
 8016c20:	4910      	ldr	r1, [pc, #64]	; (8016c64 <etharp_free_entry+0x60>)
 8016c22:	687a      	ldr	r2, [r7, #4]
 8016c24:	4613      	mov	r3, r2
 8016c26:	005b      	lsls	r3, r3, #1
 8016c28:	4413      	add	r3, r2
 8016c2a:	00db      	lsls	r3, r3, #3
 8016c2c:	440b      	add	r3, r1
 8016c2e:	681b      	ldr	r3, [r3, #0]
 8016c30:	4618      	mov	r0, r3
 8016c32:	f7fa f937 	bl	8010ea4 <pbuf_free>
    arp_table[i].q = NULL;
 8016c36:	490b      	ldr	r1, [pc, #44]	; (8016c64 <etharp_free_entry+0x60>)
 8016c38:	687a      	ldr	r2, [r7, #4]
 8016c3a:	4613      	mov	r3, r2
 8016c3c:	005b      	lsls	r3, r3, #1
 8016c3e:	4413      	add	r3, r2
 8016c40:	00db      	lsls	r3, r3, #3
 8016c42:	440b      	add	r3, r1
 8016c44:	2200      	movs	r2, #0
 8016c46:	601a      	str	r2, [r3, #0]
  }
  /* recycle entry for re-use */
  arp_table[i].state = ETHARP_STATE_EMPTY;
 8016c48:	4906      	ldr	r1, [pc, #24]	; (8016c64 <etharp_free_entry+0x60>)
 8016c4a:	687a      	ldr	r2, [r7, #4]
 8016c4c:	4613      	mov	r3, r2
 8016c4e:	005b      	lsls	r3, r3, #1
 8016c50:	4413      	add	r3, r2
 8016c52:	00db      	lsls	r3, r3, #3
 8016c54:	440b      	add	r3, r1
 8016c56:	3314      	adds	r3, #20
 8016c58:	2200      	movs	r2, #0
 8016c5a:	701a      	strb	r2, [r3, #0]
  arp_table[i].ctime = 0;
  arp_table[i].netif = NULL;
  ip4_addr_set_zero(&arp_table[i].ipaddr);
  arp_table[i].ethaddr = ethzero;
#endif /* LWIP_DEBUG */
}
 8016c5c:	bf00      	nop
 8016c5e:	3708      	adds	r7, #8
 8016c60:	46bd      	mov	sp, r7
 8016c62:	bd80      	pop	{r7, pc}
 8016c64:	20007138 	.word	0x20007138

08016c68 <etharp_tmr>:
 * This function should be called every ARP_TMR_INTERVAL milliseconds (1 second),
 * in order to expire entries in the ARP table.
 */
void
etharp_tmr(void)
{
 8016c68:	b580      	push	{r7, lr}
 8016c6a:	b082      	sub	sp, #8
 8016c6c:	af00      	add	r7, sp, #0
  int i;

  LWIP_DEBUGF(ETHARP_DEBUG, ("etharp_timer\n"));
  /* remove expired entries from the ARP table */
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 8016c6e:	2300      	movs	r3, #0
 8016c70:	607b      	str	r3, [r7, #4]
 8016c72:	e096      	b.n	8016da2 <etharp_tmr+0x13a>
    u8_t state = arp_table[i].state;
 8016c74:	494f      	ldr	r1, [pc, #316]	; (8016db4 <etharp_tmr+0x14c>)
 8016c76:	687a      	ldr	r2, [r7, #4]
 8016c78:	4613      	mov	r3, r2
 8016c7a:	005b      	lsls	r3, r3, #1
 8016c7c:	4413      	add	r3, r2
 8016c7e:	00db      	lsls	r3, r3, #3
 8016c80:	440b      	add	r3, r1
 8016c82:	3314      	adds	r3, #20
 8016c84:	781b      	ldrb	r3, [r3, #0]
 8016c86:	70fb      	strb	r3, [r7, #3]
    if (state != ETHARP_STATE_EMPTY
 8016c88:	78fb      	ldrb	r3, [r7, #3]
 8016c8a:	2b00      	cmp	r3, #0
 8016c8c:	f000 8086 	beq.w	8016d9c <etharp_tmr+0x134>
#if ETHARP_SUPPORT_STATIC_ENTRIES
        && (state != ETHARP_STATE_STATIC)
#endif /* ETHARP_SUPPORT_STATIC_ENTRIES */
       ) {
      arp_table[i].ctime++;
 8016c90:	4948      	ldr	r1, [pc, #288]	; (8016db4 <etharp_tmr+0x14c>)
 8016c92:	687a      	ldr	r2, [r7, #4]
 8016c94:	4613      	mov	r3, r2
 8016c96:	005b      	lsls	r3, r3, #1
 8016c98:	4413      	add	r3, r2
 8016c9a:	00db      	lsls	r3, r3, #3
 8016c9c:	440b      	add	r3, r1
 8016c9e:	3312      	adds	r3, #18
 8016ca0:	881b      	ldrh	r3, [r3, #0]
 8016ca2:	3301      	adds	r3, #1
 8016ca4:	b298      	uxth	r0, r3
 8016ca6:	4943      	ldr	r1, [pc, #268]	; (8016db4 <etharp_tmr+0x14c>)
 8016ca8:	687a      	ldr	r2, [r7, #4]
 8016caa:	4613      	mov	r3, r2
 8016cac:	005b      	lsls	r3, r3, #1
 8016cae:	4413      	add	r3, r2
 8016cb0:	00db      	lsls	r3, r3, #3
 8016cb2:	440b      	add	r3, r1
 8016cb4:	3312      	adds	r3, #18
 8016cb6:	4602      	mov	r2, r0
 8016cb8:	801a      	strh	r2, [r3, #0]
      if ((arp_table[i].ctime >= ARP_MAXAGE) ||
 8016cba:	493e      	ldr	r1, [pc, #248]	; (8016db4 <etharp_tmr+0x14c>)
 8016cbc:	687a      	ldr	r2, [r7, #4]
 8016cbe:	4613      	mov	r3, r2
 8016cc0:	005b      	lsls	r3, r3, #1
 8016cc2:	4413      	add	r3, r2
 8016cc4:	00db      	lsls	r3, r3, #3
 8016cc6:	440b      	add	r3, r1
 8016cc8:	3312      	adds	r3, #18
 8016cca:	881b      	ldrh	r3, [r3, #0]
 8016ccc:	f5b3 7f96 	cmp.w	r3, #300	; 0x12c
 8016cd0:	d215      	bcs.n	8016cfe <etharp_tmr+0x96>
          ((arp_table[i].state == ETHARP_STATE_PENDING)  &&
 8016cd2:	4938      	ldr	r1, [pc, #224]	; (8016db4 <etharp_tmr+0x14c>)
 8016cd4:	687a      	ldr	r2, [r7, #4]
 8016cd6:	4613      	mov	r3, r2
 8016cd8:	005b      	lsls	r3, r3, #1
 8016cda:	4413      	add	r3, r2
 8016cdc:	00db      	lsls	r3, r3, #3
 8016cde:	440b      	add	r3, r1
 8016ce0:	3314      	adds	r3, #20
 8016ce2:	781b      	ldrb	r3, [r3, #0]
      if ((arp_table[i].ctime >= ARP_MAXAGE) ||
 8016ce4:	2b01      	cmp	r3, #1
 8016ce6:	d10e      	bne.n	8016d06 <etharp_tmr+0x9e>
           (arp_table[i].ctime >= ARP_MAXPENDING))) {
 8016ce8:	4932      	ldr	r1, [pc, #200]	; (8016db4 <etharp_tmr+0x14c>)
 8016cea:	687a      	ldr	r2, [r7, #4]
 8016cec:	4613      	mov	r3, r2
 8016cee:	005b      	lsls	r3, r3, #1
 8016cf0:	4413      	add	r3, r2
 8016cf2:	00db      	lsls	r3, r3, #3
 8016cf4:	440b      	add	r3, r1
 8016cf6:	3312      	adds	r3, #18
 8016cf8:	881b      	ldrh	r3, [r3, #0]
          ((arp_table[i].state == ETHARP_STATE_PENDING)  &&
 8016cfa:	2b04      	cmp	r3, #4
 8016cfc:	d903      	bls.n	8016d06 <etharp_tmr+0x9e>
        /* pending or stable entry has become old! */
        LWIP_DEBUGF(ETHARP_DEBUG, ("etharp_timer: expired %s entry %d.\n",
                                   arp_table[i].state >= ETHARP_STATE_STABLE ? "stable" : "pending", i));
        /* clean up entries that have just been expired */
        etharp_free_entry(i);
 8016cfe:	6878      	ldr	r0, [r7, #4]
 8016d00:	f7ff ff80 	bl	8016c04 <etharp_free_entry>
 8016d04:	e04a      	b.n	8016d9c <etharp_tmr+0x134>
      } else if (arp_table[i].state == ETHARP_STATE_STABLE_REREQUESTING_1) {
 8016d06:	492b      	ldr	r1, [pc, #172]	; (8016db4 <etharp_tmr+0x14c>)
 8016d08:	687a      	ldr	r2, [r7, #4]
 8016d0a:	4613      	mov	r3, r2
 8016d0c:	005b      	lsls	r3, r3, #1
 8016d0e:	4413      	add	r3, r2
 8016d10:	00db      	lsls	r3, r3, #3
 8016d12:	440b      	add	r3, r1
 8016d14:	3314      	adds	r3, #20
 8016d16:	781b      	ldrb	r3, [r3, #0]
 8016d18:	2b03      	cmp	r3, #3
 8016d1a:	d10a      	bne.n	8016d32 <etharp_tmr+0xca>
        /* Don't send more than one request every 2 seconds. */
        arp_table[i].state = ETHARP_STATE_STABLE_REREQUESTING_2;
 8016d1c:	4925      	ldr	r1, [pc, #148]	; (8016db4 <etharp_tmr+0x14c>)
 8016d1e:	687a      	ldr	r2, [r7, #4]
 8016d20:	4613      	mov	r3, r2
 8016d22:	005b      	lsls	r3, r3, #1
 8016d24:	4413      	add	r3, r2
 8016d26:	00db      	lsls	r3, r3, #3
 8016d28:	440b      	add	r3, r1
 8016d2a:	3314      	adds	r3, #20
 8016d2c:	2204      	movs	r2, #4
 8016d2e:	701a      	strb	r2, [r3, #0]
 8016d30:	e034      	b.n	8016d9c <etharp_tmr+0x134>
      } else if (arp_table[i].state == ETHARP_STATE_STABLE_REREQUESTING_2) {
 8016d32:	4920      	ldr	r1, [pc, #128]	; (8016db4 <etharp_tmr+0x14c>)
 8016d34:	687a      	ldr	r2, [r7, #4]
 8016d36:	4613      	mov	r3, r2
 8016d38:	005b      	lsls	r3, r3, #1
 8016d3a:	4413      	add	r3, r2
 8016d3c:	00db      	lsls	r3, r3, #3
 8016d3e:	440b      	add	r3, r1
 8016d40:	3314      	adds	r3, #20
 8016d42:	781b      	ldrb	r3, [r3, #0]
 8016d44:	2b04      	cmp	r3, #4
 8016d46:	d10a      	bne.n	8016d5e <etharp_tmr+0xf6>
        /* Reset state to stable, so that the next transmitted packet will
           re-send an ARP request. */
        arp_table[i].state = ETHARP_STATE_STABLE;
 8016d48:	491a      	ldr	r1, [pc, #104]	; (8016db4 <etharp_tmr+0x14c>)
 8016d4a:	687a      	ldr	r2, [r7, #4]
 8016d4c:	4613      	mov	r3, r2
 8016d4e:	005b      	lsls	r3, r3, #1
 8016d50:	4413      	add	r3, r2
 8016d52:	00db      	lsls	r3, r3, #3
 8016d54:	440b      	add	r3, r1
 8016d56:	3314      	adds	r3, #20
 8016d58:	2202      	movs	r2, #2
 8016d5a:	701a      	strb	r2, [r3, #0]
 8016d5c:	e01e      	b.n	8016d9c <etharp_tmr+0x134>
      } else if (arp_table[i].state == ETHARP_STATE_PENDING) {
 8016d5e:	4915      	ldr	r1, [pc, #84]	; (8016db4 <etharp_tmr+0x14c>)
 8016d60:	687a      	ldr	r2, [r7, #4]
 8016d62:	4613      	mov	r3, r2
 8016d64:	005b      	lsls	r3, r3, #1
 8016d66:	4413      	add	r3, r2
 8016d68:	00db      	lsls	r3, r3, #3
 8016d6a:	440b      	add	r3, r1
 8016d6c:	3314      	adds	r3, #20
 8016d6e:	781b      	ldrb	r3, [r3, #0]
 8016d70:	2b01      	cmp	r3, #1
 8016d72:	d113      	bne.n	8016d9c <etharp_tmr+0x134>
        /* still pending, resend an ARP query */
        etharp_request(arp_table[i].netif, &arp_table[i].ipaddr);
 8016d74:	490f      	ldr	r1, [pc, #60]	; (8016db4 <etharp_tmr+0x14c>)
 8016d76:	687a      	ldr	r2, [r7, #4]
 8016d78:	4613      	mov	r3, r2
 8016d7a:	005b      	lsls	r3, r3, #1
 8016d7c:	4413      	add	r3, r2
 8016d7e:	00db      	lsls	r3, r3, #3
 8016d80:	440b      	add	r3, r1
 8016d82:	3308      	adds	r3, #8
 8016d84:	6818      	ldr	r0, [r3, #0]
 8016d86:	687a      	ldr	r2, [r7, #4]
 8016d88:	4613      	mov	r3, r2
 8016d8a:	005b      	lsls	r3, r3, #1
 8016d8c:	4413      	add	r3, r2
 8016d8e:	00db      	lsls	r3, r3, #3
 8016d90:	4a08      	ldr	r2, [pc, #32]	; (8016db4 <etharp_tmr+0x14c>)
 8016d92:	4413      	add	r3, r2
 8016d94:	3304      	adds	r3, #4
 8016d96:	4619      	mov	r1, r3
 8016d98:	f000 fe6e 	bl	8017a78 <etharp_request>
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 8016d9c:	687b      	ldr	r3, [r7, #4]
 8016d9e:	3301      	adds	r3, #1
 8016da0:	607b      	str	r3, [r7, #4]
 8016da2:	687b      	ldr	r3, [r7, #4]
 8016da4:	2b09      	cmp	r3, #9
 8016da6:	f77f af65 	ble.w	8016c74 <etharp_tmr+0xc>
      }
    }
  }
}
 8016daa:	bf00      	nop
 8016dac:	bf00      	nop
 8016dae:	3708      	adds	r7, #8
 8016db0:	46bd      	mov	sp, r7
 8016db2:	bd80      	pop	{r7, pc}
 8016db4:	20007138 	.word	0x20007138

08016db8 <etharp_find_entry>:
 * @return The ARP entry index that matched or is created, ERR_MEM if no
 * entry is found or could be recycled.
 */
static s16_t
etharp_find_entry(const ip4_addr_t *ipaddr, u8_t flags, struct netif *netif)
{
 8016db8:	b580      	push	{r7, lr}
 8016dba:	b08a      	sub	sp, #40	; 0x28
 8016dbc:	af00      	add	r7, sp, #0
 8016dbe:	60f8      	str	r0, [r7, #12]
 8016dc0:	460b      	mov	r3, r1
 8016dc2:	607a      	str	r2, [r7, #4]
 8016dc4:	72fb      	strb	r3, [r7, #11]
  s16_t old_pending = ARP_TABLE_SIZE, old_stable = ARP_TABLE_SIZE;
 8016dc6:	230a      	movs	r3, #10
 8016dc8:	84fb      	strh	r3, [r7, #38]	; 0x26
 8016dca:	230a      	movs	r3, #10
 8016dcc:	84bb      	strh	r3, [r7, #36]	; 0x24
  s16_t empty = ARP_TABLE_SIZE;
 8016dce:	230a      	movs	r3, #10
 8016dd0:	847b      	strh	r3, [r7, #34]	; 0x22
  s16_t i = 0;
 8016dd2:	2300      	movs	r3, #0
 8016dd4:	843b      	strh	r3, [r7, #32]
  /* oldest entry with packets on queue */
  s16_t old_queue = ARP_TABLE_SIZE;
 8016dd6:	230a      	movs	r3, #10
 8016dd8:	83fb      	strh	r3, [r7, #30]
  /* its age */
  u16_t age_queue = 0, age_pending = 0, age_stable = 0;
 8016dda:	2300      	movs	r3, #0
 8016ddc:	83bb      	strh	r3, [r7, #28]
 8016dde:	2300      	movs	r3, #0
 8016de0:	837b      	strh	r3, [r7, #26]
 8016de2:	2300      	movs	r3, #0
 8016de4:	833b      	strh	r3, [r7, #24]
   * 4) remember the oldest pending entry with queued packets (if any)
   * 5) search for a matching IP entry, either pending or stable
   *    until 5 matches, or all entries are searched for.
   */

  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 8016de6:	2300      	movs	r3, #0
 8016de8:	843b      	strh	r3, [r7, #32]
 8016dea:	e0ae      	b.n	8016f4a <etharp_find_entry+0x192>
    u8_t state = arp_table[i].state;
 8016dec:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8016df0:	49a6      	ldr	r1, [pc, #664]	; (801708c <etharp_find_entry+0x2d4>)
 8016df2:	4613      	mov	r3, r2
 8016df4:	005b      	lsls	r3, r3, #1
 8016df6:	4413      	add	r3, r2
 8016df8:	00db      	lsls	r3, r3, #3
 8016dfa:	440b      	add	r3, r1
 8016dfc:	3314      	adds	r3, #20
 8016dfe:	781b      	ldrb	r3, [r3, #0]
 8016e00:	75fb      	strb	r3, [r7, #23]
    /* no empty entry found yet and now we do find one? */
    if ((empty == ARP_TABLE_SIZE) && (state == ETHARP_STATE_EMPTY)) {
 8016e02:	f9b7 3022 	ldrsh.w	r3, [r7, #34]	; 0x22
 8016e06:	2b0a      	cmp	r3, #10
 8016e08:	d105      	bne.n	8016e16 <etharp_find_entry+0x5e>
 8016e0a:	7dfb      	ldrb	r3, [r7, #23]
 8016e0c:	2b00      	cmp	r3, #0
 8016e0e:	d102      	bne.n	8016e16 <etharp_find_entry+0x5e>
      LWIP_DEBUGF(ETHARP_DEBUG, ("etharp_find_entry: found empty entry %d\n", (int)i));
      /* remember first empty entry */
      empty = i;
 8016e10:	8c3b      	ldrh	r3, [r7, #32]
 8016e12:	847b      	strh	r3, [r7, #34]	; 0x22
 8016e14:	e095      	b.n	8016f42 <etharp_find_entry+0x18a>
    } else if (state != ETHARP_STATE_EMPTY) {
 8016e16:	7dfb      	ldrb	r3, [r7, #23]
 8016e18:	2b00      	cmp	r3, #0
 8016e1a:	f000 8092 	beq.w	8016f42 <etharp_find_entry+0x18a>
      LWIP_ASSERT("state == ETHARP_STATE_PENDING || state >= ETHARP_STATE_STABLE",
 8016e1e:	7dfb      	ldrb	r3, [r7, #23]
 8016e20:	2b01      	cmp	r3, #1
 8016e22:	d009      	beq.n	8016e38 <etharp_find_entry+0x80>
 8016e24:	7dfb      	ldrb	r3, [r7, #23]
 8016e26:	2b01      	cmp	r3, #1
 8016e28:	d806      	bhi.n	8016e38 <etharp_find_entry+0x80>
 8016e2a:	4b99      	ldr	r3, [pc, #612]	; (8017090 <etharp_find_entry+0x2d8>)
 8016e2c:	f240 1223 	movw	r2, #291	; 0x123
 8016e30:	4998      	ldr	r1, [pc, #608]	; (8017094 <etharp_find_entry+0x2dc>)
 8016e32:	4899      	ldr	r0, [pc, #612]	; (8017098 <etharp_find_entry+0x2e0>)
 8016e34:	f002 ff0c 	bl	8019c50 <iprintf>
                  state == ETHARP_STATE_PENDING || state >= ETHARP_STATE_STABLE);
      /* if given, does IP address match IP address in ARP entry? */
      if (ipaddr && ip4_addr_cmp(ipaddr, &arp_table[i].ipaddr)
 8016e38:	68fb      	ldr	r3, [r7, #12]
 8016e3a:	2b00      	cmp	r3, #0
 8016e3c:	d020      	beq.n	8016e80 <etharp_find_entry+0xc8>
 8016e3e:	68fb      	ldr	r3, [r7, #12]
 8016e40:	6819      	ldr	r1, [r3, #0]
 8016e42:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8016e46:	4891      	ldr	r0, [pc, #580]	; (801708c <etharp_find_entry+0x2d4>)
 8016e48:	4613      	mov	r3, r2
 8016e4a:	005b      	lsls	r3, r3, #1
 8016e4c:	4413      	add	r3, r2
 8016e4e:	00db      	lsls	r3, r3, #3
 8016e50:	4403      	add	r3, r0
 8016e52:	3304      	adds	r3, #4
 8016e54:	681b      	ldr	r3, [r3, #0]
 8016e56:	4299      	cmp	r1, r3
 8016e58:	d112      	bne.n	8016e80 <etharp_find_entry+0xc8>
#if ETHARP_TABLE_MATCH_NETIF
          && ((netif == NULL) || (netif == arp_table[i].netif))
 8016e5a:	687b      	ldr	r3, [r7, #4]
 8016e5c:	2b00      	cmp	r3, #0
 8016e5e:	d00c      	beq.n	8016e7a <etharp_find_entry+0xc2>
 8016e60:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8016e64:	4989      	ldr	r1, [pc, #548]	; (801708c <etharp_find_entry+0x2d4>)
 8016e66:	4613      	mov	r3, r2
 8016e68:	005b      	lsls	r3, r3, #1
 8016e6a:	4413      	add	r3, r2
 8016e6c:	00db      	lsls	r3, r3, #3
 8016e6e:	440b      	add	r3, r1
 8016e70:	3308      	adds	r3, #8
 8016e72:	681b      	ldr	r3, [r3, #0]
 8016e74:	687a      	ldr	r2, [r7, #4]
 8016e76:	429a      	cmp	r2, r3
 8016e78:	d102      	bne.n	8016e80 <etharp_find_entry+0xc8>
#endif /* ETHARP_TABLE_MATCH_NETIF */
         ) {
        LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: found matching entry %d\n", (int)i));
        /* found exact IP address match, simply bail out */
        return i;
 8016e7a:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 8016e7e:	e100      	b.n	8017082 <etharp_find_entry+0x2ca>
      }
      /* pending entry? */
      if (state == ETHARP_STATE_PENDING) {
 8016e80:	7dfb      	ldrb	r3, [r7, #23]
 8016e82:	2b01      	cmp	r3, #1
 8016e84:	d140      	bne.n	8016f08 <etharp_find_entry+0x150>
        /* pending with queued packets? */
        if (arp_table[i].q != NULL) {
 8016e86:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8016e8a:	4980      	ldr	r1, [pc, #512]	; (801708c <etharp_find_entry+0x2d4>)
 8016e8c:	4613      	mov	r3, r2
 8016e8e:	005b      	lsls	r3, r3, #1
 8016e90:	4413      	add	r3, r2
 8016e92:	00db      	lsls	r3, r3, #3
 8016e94:	440b      	add	r3, r1
 8016e96:	681b      	ldr	r3, [r3, #0]
 8016e98:	2b00      	cmp	r3, #0
 8016e9a:	d01a      	beq.n	8016ed2 <etharp_find_entry+0x11a>
          if (arp_table[i].ctime >= age_queue) {
 8016e9c:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8016ea0:	497a      	ldr	r1, [pc, #488]	; (801708c <etharp_find_entry+0x2d4>)
 8016ea2:	4613      	mov	r3, r2
 8016ea4:	005b      	lsls	r3, r3, #1
 8016ea6:	4413      	add	r3, r2
 8016ea8:	00db      	lsls	r3, r3, #3
 8016eaa:	440b      	add	r3, r1
 8016eac:	3312      	adds	r3, #18
 8016eae:	881b      	ldrh	r3, [r3, #0]
 8016eb0:	8bba      	ldrh	r2, [r7, #28]
 8016eb2:	429a      	cmp	r2, r3
 8016eb4:	d845      	bhi.n	8016f42 <etharp_find_entry+0x18a>
            old_queue = i;
 8016eb6:	8c3b      	ldrh	r3, [r7, #32]
 8016eb8:	83fb      	strh	r3, [r7, #30]
            age_queue = arp_table[i].ctime;
 8016eba:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8016ebe:	4973      	ldr	r1, [pc, #460]	; (801708c <etharp_find_entry+0x2d4>)
 8016ec0:	4613      	mov	r3, r2
 8016ec2:	005b      	lsls	r3, r3, #1
 8016ec4:	4413      	add	r3, r2
 8016ec6:	00db      	lsls	r3, r3, #3
 8016ec8:	440b      	add	r3, r1
 8016eca:	3312      	adds	r3, #18
 8016ecc:	881b      	ldrh	r3, [r3, #0]
 8016ece:	83bb      	strh	r3, [r7, #28]
 8016ed0:	e037      	b.n	8016f42 <etharp_find_entry+0x18a>
          }
        } else
          /* pending without queued packets? */
        {
          if (arp_table[i].ctime >= age_pending) {
 8016ed2:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8016ed6:	496d      	ldr	r1, [pc, #436]	; (801708c <etharp_find_entry+0x2d4>)
 8016ed8:	4613      	mov	r3, r2
 8016eda:	005b      	lsls	r3, r3, #1
 8016edc:	4413      	add	r3, r2
 8016ede:	00db      	lsls	r3, r3, #3
 8016ee0:	440b      	add	r3, r1
 8016ee2:	3312      	adds	r3, #18
 8016ee4:	881b      	ldrh	r3, [r3, #0]
 8016ee6:	8b7a      	ldrh	r2, [r7, #26]
 8016ee8:	429a      	cmp	r2, r3
 8016eea:	d82a      	bhi.n	8016f42 <etharp_find_entry+0x18a>
            old_pending = i;
 8016eec:	8c3b      	ldrh	r3, [r7, #32]
 8016eee:	84fb      	strh	r3, [r7, #38]	; 0x26
            age_pending = arp_table[i].ctime;
 8016ef0:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8016ef4:	4965      	ldr	r1, [pc, #404]	; (801708c <etharp_find_entry+0x2d4>)
 8016ef6:	4613      	mov	r3, r2
 8016ef8:	005b      	lsls	r3, r3, #1
 8016efa:	4413      	add	r3, r2
 8016efc:	00db      	lsls	r3, r3, #3
 8016efe:	440b      	add	r3, r1
 8016f00:	3312      	adds	r3, #18
 8016f02:	881b      	ldrh	r3, [r3, #0]
 8016f04:	837b      	strh	r3, [r7, #26]
 8016f06:	e01c      	b.n	8016f42 <etharp_find_entry+0x18a>
          }
        }
        /* stable entry? */
      } else if (state >= ETHARP_STATE_STABLE) {
 8016f08:	7dfb      	ldrb	r3, [r7, #23]
 8016f0a:	2b01      	cmp	r3, #1
 8016f0c:	d919      	bls.n	8016f42 <etharp_find_entry+0x18a>
        /* don't record old_stable for static entries since they never expire */
        if (state < ETHARP_STATE_STATIC)
#endif /* ETHARP_SUPPORT_STATIC_ENTRIES */
        {
          /* remember entry with oldest stable entry in oldest, its age in maxtime */
          if (arp_table[i].ctime >= age_stable) {
 8016f0e:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8016f12:	495e      	ldr	r1, [pc, #376]	; (801708c <etharp_find_entry+0x2d4>)
 8016f14:	4613      	mov	r3, r2
 8016f16:	005b      	lsls	r3, r3, #1
 8016f18:	4413      	add	r3, r2
 8016f1a:	00db      	lsls	r3, r3, #3
 8016f1c:	440b      	add	r3, r1
 8016f1e:	3312      	adds	r3, #18
 8016f20:	881b      	ldrh	r3, [r3, #0]
 8016f22:	8b3a      	ldrh	r2, [r7, #24]
 8016f24:	429a      	cmp	r2, r3
 8016f26:	d80c      	bhi.n	8016f42 <etharp_find_entry+0x18a>
            old_stable = i;
 8016f28:	8c3b      	ldrh	r3, [r7, #32]
 8016f2a:	84bb      	strh	r3, [r7, #36]	; 0x24
            age_stable = arp_table[i].ctime;
 8016f2c:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8016f30:	4956      	ldr	r1, [pc, #344]	; (801708c <etharp_find_entry+0x2d4>)
 8016f32:	4613      	mov	r3, r2
 8016f34:	005b      	lsls	r3, r3, #1
 8016f36:	4413      	add	r3, r2
 8016f38:	00db      	lsls	r3, r3, #3
 8016f3a:	440b      	add	r3, r1
 8016f3c:	3312      	adds	r3, #18
 8016f3e:	881b      	ldrh	r3, [r3, #0]
 8016f40:	833b      	strh	r3, [r7, #24]
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 8016f42:	8c3b      	ldrh	r3, [r7, #32]
 8016f44:	3301      	adds	r3, #1
 8016f46:	b29b      	uxth	r3, r3
 8016f48:	843b      	strh	r3, [r7, #32]
 8016f4a:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 8016f4e:	2b09      	cmp	r3, #9
 8016f50:	f77f af4c 	ble.w	8016dec <etharp_find_entry+0x34>
    }
  }
  /* { we have no match } => try to create a new entry */

  /* don't create new entry, only search? */
  if (((flags & ETHARP_FLAG_FIND_ONLY) != 0) ||
 8016f54:	7afb      	ldrb	r3, [r7, #11]
 8016f56:	f003 0302 	and.w	r3, r3, #2
 8016f5a:	2b00      	cmp	r3, #0
 8016f5c:	d108      	bne.n	8016f70 <etharp_find_entry+0x1b8>
 8016f5e:	f9b7 3022 	ldrsh.w	r3, [r7, #34]	; 0x22
 8016f62:	2b0a      	cmp	r3, #10
 8016f64:	d107      	bne.n	8016f76 <etharp_find_entry+0x1be>
      /* or no empty entry found and not allowed to recycle? */
      ((empty == ARP_TABLE_SIZE) && ((flags & ETHARP_FLAG_TRY_HARD) == 0))) {
 8016f66:	7afb      	ldrb	r3, [r7, #11]
 8016f68:	f003 0301 	and.w	r3, r3, #1
 8016f6c:	2b00      	cmp	r3, #0
 8016f6e:	d102      	bne.n	8016f76 <etharp_find_entry+0x1be>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: no empty entry found and not allowed to recycle\n"));
    return (s16_t)ERR_MEM;
 8016f70:	f04f 33ff 	mov.w	r3, #4294967295
 8016f74:	e085      	b.n	8017082 <etharp_find_entry+0x2ca>
   *
   * { ETHARP_FLAG_TRY_HARD is set at this point }
   */

  /* 1) empty entry available? */
  if (empty < ARP_TABLE_SIZE) {
 8016f76:	f9b7 3022 	ldrsh.w	r3, [r7, #34]	; 0x22
 8016f7a:	2b09      	cmp	r3, #9
 8016f7c:	dc02      	bgt.n	8016f84 <etharp_find_entry+0x1cc>
    i = empty;
 8016f7e:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8016f80:	843b      	strh	r3, [r7, #32]
 8016f82:	e039      	b.n	8016ff8 <etharp_find_entry+0x240>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: selecting empty entry %d\n", (int)i));
  } else {
    /* 2) found recyclable stable entry? */
    if (old_stable < ARP_TABLE_SIZE) {
 8016f84:	f9b7 3024 	ldrsh.w	r3, [r7, #36]	; 0x24
 8016f88:	2b09      	cmp	r3, #9
 8016f8a:	dc14      	bgt.n	8016fb6 <etharp_find_entry+0x1fe>
      /* recycle oldest stable*/
      i = old_stable;
 8016f8c:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8016f8e:	843b      	strh	r3, [r7, #32]
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: selecting oldest stable entry %d\n", (int)i));
      /* no queued packets should exist on stable entries */
      LWIP_ASSERT("arp_table[i].q == NULL", arp_table[i].q == NULL);
 8016f90:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8016f94:	493d      	ldr	r1, [pc, #244]	; (801708c <etharp_find_entry+0x2d4>)
 8016f96:	4613      	mov	r3, r2
 8016f98:	005b      	lsls	r3, r3, #1
 8016f9a:	4413      	add	r3, r2
 8016f9c:	00db      	lsls	r3, r3, #3
 8016f9e:	440b      	add	r3, r1
 8016fa0:	681b      	ldr	r3, [r3, #0]
 8016fa2:	2b00      	cmp	r3, #0
 8016fa4:	d018      	beq.n	8016fd8 <etharp_find_entry+0x220>
 8016fa6:	4b3a      	ldr	r3, [pc, #232]	; (8017090 <etharp_find_entry+0x2d8>)
 8016fa8:	f240 126d 	movw	r2, #365	; 0x16d
 8016fac:	493b      	ldr	r1, [pc, #236]	; (801709c <etharp_find_entry+0x2e4>)
 8016fae:	483a      	ldr	r0, [pc, #232]	; (8017098 <etharp_find_entry+0x2e0>)
 8016fb0:	f002 fe4e 	bl	8019c50 <iprintf>
 8016fb4:	e010      	b.n	8016fd8 <etharp_find_entry+0x220>
      /* 3) found recyclable pending entry without queued packets? */
    } else if (old_pending < ARP_TABLE_SIZE) {
 8016fb6:	f9b7 3026 	ldrsh.w	r3, [r7, #38]	; 0x26
 8016fba:	2b09      	cmp	r3, #9
 8016fbc:	dc02      	bgt.n	8016fc4 <etharp_find_entry+0x20c>
      /* recycle oldest pending */
      i = old_pending;
 8016fbe:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8016fc0:	843b      	strh	r3, [r7, #32]
 8016fc2:	e009      	b.n	8016fd8 <etharp_find_entry+0x220>
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: selecting oldest pending entry %d (without queue)\n", (int)i));
      /* 4) found recyclable pending entry with queued packets? */
    } else if (old_queue < ARP_TABLE_SIZE) {
 8016fc4:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
 8016fc8:	2b09      	cmp	r3, #9
 8016fca:	dc02      	bgt.n	8016fd2 <etharp_find_entry+0x21a>
      /* recycle oldest pending (queued packets are free in etharp_free_entry) */
      i = old_queue;
 8016fcc:	8bfb      	ldrh	r3, [r7, #30]
 8016fce:	843b      	strh	r3, [r7, #32]
 8016fd0:	e002      	b.n	8016fd8 <etharp_find_entry+0x220>
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: selecting oldest pending entry %d, freeing packet queue %p\n", (int)i, (void *)(arp_table[i].q)));
      /* no empty or recyclable entries found */
    } else {
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: no empty or recyclable entries found\n"));
      return (s16_t)ERR_MEM;
 8016fd2:	f04f 33ff 	mov.w	r3, #4294967295
 8016fd6:	e054      	b.n	8017082 <etharp_find_entry+0x2ca>
    }

    /* { empty or recyclable entry found } */
    LWIP_ASSERT("i < ARP_TABLE_SIZE", i < ARP_TABLE_SIZE);
 8016fd8:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 8016fdc:	2b09      	cmp	r3, #9
 8016fde:	dd06      	ble.n	8016fee <etharp_find_entry+0x236>
 8016fe0:	4b2b      	ldr	r3, [pc, #172]	; (8017090 <etharp_find_entry+0x2d8>)
 8016fe2:	f240 127f 	movw	r2, #383	; 0x17f
 8016fe6:	492e      	ldr	r1, [pc, #184]	; (80170a0 <etharp_find_entry+0x2e8>)
 8016fe8:	482b      	ldr	r0, [pc, #172]	; (8017098 <etharp_find_entry+0x2e0>)
 8016fea:	f002 fe31 	bl	8019c50 <iprintf>
    etharp_free_entry(i);
 8016fee:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 8016ff2:	4618      	mov	r0, r3
 8016ff4:	f7ff fe06 	bl	8016c04 <etharp_free_entry>
  }

  LWIP_ASSERT("i < ARP_TABLE_SIZE", i < ARP_TABLE_SIZE);
 8016ff8:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 8016ffc:	2b09      	cmp	r3, #9
 8016ffe:	dd06      	ble.n	801700e <etharp_find_entry+0x256>
 8017000:	4b23      	ldr	r3, [pc, #140]	; (8017090 <etharp_find_entry+0x2d8>)
 8017002:	f240 1283 	movw	r2, #387	; 0x183
 8017006:	4926      	ldr	r1, [pc, #152]	; (80170a0 <etharp_find_entry+0x2e8>)
 8017008:	4823      	ldr	r0, [pc, #140]	; (8017098 <etharp_find_entry+0x2e0>)
 801700a:	f002 fe21 	bl	8019c50 <iprintf>
  LWIP_ASSERT("arp_table[i].state == ETHARP_STATE_EMPTY",
 801700e:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8017012:	491e      	ldr	r1, [pc, #120]	; (801708c <etharp_find_entry+0x2d4>)
 8017014:	4613      	mov	r3, r2
 8017016:	005b      	lsls	r3, r3, #1
 8017018:	4413      	add	r3, r2
 801701a:	00db      	lsls	r3, r3, #3
 801701c:	440b      	add	r3, r1
 801701e:	3314      	adds	r3, #20
 8017020:	781b      	ldrb	r3, [r3, #0]
 8017022:	2b00      	cmp	r3, #0
 8017024:	d006      	beq.n	8017034 <etharp_find_entry+0x27c>
 8017026:	4b1a      	ldr	r3, [pc, #104]	; (8017090 <etharp_find_entry+0x2d8>)
 8017028:	f44f 72c2 	mov.w	r2, #388	; 0x184
 801702c:	491d      	ldr	r1, [pc, #116]	; (80170a4 <etharp_find_entry+0x2ec>)
 801702e:	481a      	ldr	r0, [pc, #104]	; (8017098 <etharp_find_entry+0x2e0>)
 8017030:	f002 fe0e 	bl	8019c50 <iprintf>
              arp_table[i].state == ETHARP_STATE_EMPTY);

  /* IP address given? */
  if (ipaddr != NULL) {
 8017034:	68fb      	ldr	r3, [r7, #12]
 8017036:	2b00      	cmp	r3, #0
 8017038:	d00b      	beq.n	8017052 <etharp_find_entry+0x29a>
    /* set IP address */
    ip4_addr_copy(arp_table[i].ipaddr, *ipaddr);
 801703a:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 801703e:	68fb      	ldr	r3, [r7, #12]
 8017040:	6819      	ldr	r1, [r3, #0]
 8017042:	4812      	ldr	r0, [pc, #72]	; (801708c <etharp_find_entry+0x2d4>)
 8017044:	4613      	mov	r3, r2
 8017046:	005b      	lsls	r3, r3, #1
 8017048:	4413      	add	r3, r2
 801704a:	00db      	lsls	r3, r3, #3
 801704c:	4403      	add	r3, r0
 801704e:	3304      	adds	r3, #4
 8017050:	6019      	str	r1, [r3, #0]
  }
  arp_table[i].ctime = 0;
 8017052:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8017056:	490d      	ldr	r1, [pc, #52]	; (801708c <etharp_find_entry+0x2d4>)
 8017058:	4613      	mov	r3, r2
 801705a:	005b      	lsls	r3, r3, #1
 801705c:	4413      	add	r3, r2
 801705e:	00db      	lsls	r3, r3, #3
 8017060:	440b      	add	r3, r1
 8017062:	3312      	adds	r3, #18
 8017064:	2200      	movs	r2, #0
 8017066:	801a      	strh	r2, [r3, #0]
#if ETHARP_TABLE_MATCH_NETIF
  arp_table[i].netif = netif;
 8017068:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 801706c:	4907      	ldr	r1, [pc, #28]	; (801708c <etharp_find_entry+0x2d4>)
 801706e:	4613      	mov	r3, r2
 8017070:	005b      	lsls	r3, r3, #1
 8017072:	4413      	add	r3, r2
 8017074:	00db      	lsls	r3, r3, #3
 8017076:	440b      	add	r3, r1
 8017078:	3308      	adds	r3, #8
 801707a:	687a      	ldr	r2, [r7, #4]
 801707c:	601a      	str	r2, [r3, #0]
#endif /* ETHARP_TABLE_MATCH_NETIF */
  return (s16_t)i;
 801707e:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
}
 8017082:	4618      	mov	r0, r3
 8017084:	3728      	adds	r7, #40	; 0x28
 8017086:	46bd      	mov	sp, r7
 8017088:	bd80      	pop	{r7, pc}
 801708a:	bf00      	nop
 801708c:	20007138 	.word	0x20007138
 8017090:	0801e864 	.word	0x0801e864
 8017094:	0801e89c 	.word	0x0801e89c
 8017098:	0801e8dc 	.word	0x0801e8dc
 801709c:	0801e904 	.word	0x0801e904
 80170a0:	0801e91c 	.word	0x0801e91c
 80170a4:	0801e930 	.word	0x0801e930

080170a8 <etharp_update_arp_entry>:
 *
 * @see pbuf_free()
 */
static err_t
etharp_update_arp_entry(struct netif *netif, const ip4_addr_t *ipaddr, struct eth_addr *ethaddr, u8_t flags)
{
 80170a8:	b580      	push	{r7, lr}
 80170aa:	b088      	sub	sp, #32
 80170ac:	af02      	add	r7, sp, #8
 80170ae:	60f8      	str	r0, [r7, #12]
 80170b0:	60b9      	str	r1, [r7, #8]
 80170b2:	607a      	str	r2, [r7, #4]
 80170b4:	70fb      	strb	r3, [r7, #3]
  s16_t i;
  LWIP_ASSERT("netif->hwaddr_len == ETH_HWADDR_LEN", netif->hwaddr_len == ETH_HWADDR_LEN);
 80170b6:	68fb      	ldr	r3, [r7, #12]
 80170b8:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 80170bc:	2b06      	cmp	r3, #6
 80170be:	d006      	beq.n	80170ce <etharp_update_arp_entry+0x26>
 80170c0:	4b48      	ldr	r3, [pc, #288]	; (80171e4 <etharp_update_arp_entry+0x13c>)
 80170c2:	f240 12a9 	movw	r2, #425	; 0x1a9
 80170c6:	4948      	ldr	r1, [pc, #288]	; (80171e8 <etharp_update_arp_entry+0x140>)
 80170c8:	4848      	ldr	r0, [pc, #288]	; (80171ec <etharp_update_arp_entry+0x144>)
 80170ca:	f002 fdc1 	bl	8019c50 <iprintf>
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_update_arp_entry: %"U16_F".%"U16_F".%"U16_F".%"U16_F" - %02"X16_F":%02"X16_F":%02"X16_F":%02"X16_F":%02"X16_F":%02"X16_F"\n",
              ip4_addr1_16(ipaddr), ip4_addr2_16(ipaddr), ip4_addr3_16(ipaddr), ip4_addr4_16(ipaddr),
              (u16_t)ethaddr->addr[0], (u16_t)ethaddr->addr[1], (u16_t)ethaddr->addr[2],
              (u16_t)ethaddr->addr[3], (u16_t)ethaddr->addr[4], (u16_t)ethaddr->addr[5]));
  /* non-unicast address? */
  if (ip4_addr_isany(ipaddr) ||
 80170ce:	68bb      	ldr	r3, [r7, #8]
 80170d0:	2b00      	cmp	r3, #0
 80170d2:	d012      	beq.n	80170fa <etharp_update_arp_entry+0x52>
 80170d4:	68bb      	ldr	r3, [r7, #8]
 80170d6:	681b      	ldr	r3, [r3, #0]
 80170d8:	2b00      	cmp	r3, #0
 80170da:	d00e      	beq.n	80170fa <etharp_update_arp_entry+0x52>
      ip4_addr_isbroadcast(ipaddr, netif) ||
 80170dc:	68bb      	ldr	r3, [r7, #8]
 80170de:	681b      	ldr	r3, [r3, #0]
 80170e0:	68f9      	ldr	r1, [r7, #12]
 80170e2:	4618      	mov	r0, r3
 80170e4:	f001 f924 	bl	8018330 <ip4_addr_isbroadcast_u32>
 80170e8:	4603      	mov	r3, r0
  if (ip4_addr_isany(ipaddr) ||
 80170ea:	2b00      	cmp	r3, #0
 80170ec:	d105      	bne.n	80170fa <etharp_update_arp_entry+0x52>
      ip4_addr_ismulticast(ipaddr)) {
 80170ee:	68bb      	ldr	r3, [r7, #8]
 80170f0:	681b      	ldr	r3, [r3, #0]
 80170f2:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
      ip4_addr_isbroadcast(ipaddr, netif) ||
 80170f6:	2be0      	cmp	r3, #224	; 0xe0
 80170f8:	d102      	bne.n	8017100 <etharp_update_arp_entry+0x58>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_update_arp_entry: will not add non-unicast IP address to ARP cache\n"));
    return ERR_ARG;
 80170fa:	f06f 030f 	mvn.w	r3, #15
 80170fe:	e06c      	b.n	80171da <etharp_update_arp_entry+0x132>
  }
  /* find or create ARP entry */
  i = etharp_find_entry(ipaddr, flags, netif);
 8017100:	78fb      	ldrb	r3, [r7, #3]
 8017102:	68fa      	ldr	r2, [r7, #12]
 8017104:	4619      	mov	r1, r3
 8017106:	68b8      	ldr	r0, [r7, #8]
 8017108:	f7ff fe56 	bl	8016db8 <etharp_find_entry>
 801710c:	4603      	mov	r3, r0
 801710e:	82fb      	strh	r3, [r7, #22]
  /* bail out if no entry could be found */
  if (i < 0) {
 8017110:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 8017114:	2b00      	cmp	r3, #0
 8017116:	da02      	bge.n	801711e <etharp_update_arp_entry+0x76>
    return (err_t)i;
 8017118:	8afb      	ldrh	r3, [r7, #22]
 801711a:	b25b      	sxtb	r3, r3
 801711c:	e05d      	b.n	80171da <etharp_update_arp_entry+0x132>
    return ERR_VAL;
  } else
#endif /* ETHARP_SUPPORT_STATIC_ENTRIES */
  {
    /* mark it stable */
    arp_table[i].state = ETHARP_STATE_STABLE;
 801711e:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 8017122:	4933      	ldr	r1, [pc, #204]	; (80171f0 <etharp_update_arp_entry+0x148>)
 8017124:	4613      	mov	r3, r2
 8017126:	005b      	lsls	r3, r3, #1
 8017128:	4413      	add	r3, r2
 801712a:	00db      	lsls	r3, r3, #3
 801712c:	440b      	add	r3, r1
 801712e:	3314      	adds	r3, #20
 8017130:	2202      	movs	r2, #2
 8017132:	701a      	strb	r2, [r3, #0]
  }

  /* record network interface */
  arp_table[i].netif = netif;
 8017134:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 8017138:	492d      	ldr	r1, [pc, #180]	; (80171f0 <etharp_update_arp_entry+0x148>)
 801713a:	4613      	mov	r3, r2
 801713c:	005b      	lsls	r3, r3, #1
 801713e:	4413      	add	r3, r2
 8017140:	00db      	lsls	r3, r3, #3
 8017142:	440b      	add	r3, r1
 8017144:	3308      	adds	r3, #8
 8017146:	68fa      	ldr	r2, [r7, #12]
 8017148:	601a      	str	r2, [r3, #0]
  /* insert in SNMP ARP index tree */
  mib2_add_arp_entry(netif, &arp_table[i].ipaddr);

  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_update_arp_entry: updating stable entry %"S16_F"\n", i));
  /* update address */
  SMEMCPY(&arp_table[i].ethaddr, ethaddr, ETH_HWADDR_LEN);
 801714a:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 801714e:	4613      	mov	r3, r2
 8017150:	005b      	lsls	r3, r3, #1
 8017152:	4413      	add	r3, r2
 8017154:	00db      	lsls	r3, r3, #3
 8017156:	3308      	adds	r3, #8
 8017158:	4a25      	ldr	r2, [pc, #148]	; (80171f0 <etharp_update_arp_entry+0x148>)
 801715a:	4413      	add	r3, r2
 801715c:	3304      	adds	r3, #4
 801715e:	2206      	movs	r2, #6
 8017160:	6879      	ldr	r1, [r7, #4]
 8017162:	4618      	mov	r0, r3
 8017164:	f002 ff43 	bl	8019fee <memcpy>
  /* reset time stamp */
  arp_table[i].ctime = 0;
 8017168:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 801716c:	4920      	ldr	r1, [pc, #128]	; (80171f0 <etharp_update_arp_entry+0x148>)
 801716e:	4613      	mov	r3, r2
 8017170:	005b      	lsls	r3, r3, #1
 8017172:	4413      	add	r3, r2
 8017174:	00db      	lsls	r3, r3, #3
 8017176:	440b      	add	r3, r1
 8017178:	3312      	adds	r3, #18
 801717a:	2200      	movs	r2, #0
 801717c:	801a      	strh	r2, [r3, #0]
    /* get the packet pointer */
    p = q->p;
    /* now queue entry can be freed */
    memp_free(MEMP_ARP_QUEUE, q);
#else /* ARP_QUEUEING */
  if (arp_table[i].q != NULL) {
 801717e:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 8017182:	491b      	ldr	r1, [pc, #108]	; (80171f0 <etharp_update_arp_entry+0x148>)
 8017184:	4613      	mov	r3, r2
 8017186:	005b      	lsls	r3, r3, #1
 8017188:	4413      	add	r3, r2
 801718a:	00db      	lsls	r3, r3, #3
 801718c:	440b      	add	r3, r1
 801718e:	681b      	ldr	r3, [r3, #0]
 8017190:	2b00      	cmp	r3, #0
 8017192:	d021      	beq.n	80171d8 <etharp_update_arp_entry+0x130>
    struct pbuf *p = arp_table[i].q;
 8017194:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 8017198:	4915      	ldr	r1, [pc, #84]	; (80171f0 <etharp_update_arp_entry+0x148>)
 801719a:	4613      	mov	r3, r2
 801719c:	005b      	lsls	r3, r3, #1
 801719e:	4413      	add	r3, r2
 80171a0:	00db      	lsls	r3, r3, #3
 80171a2:	440b      	add	r3, r1
 80171a4:	681b      	ldr	r3, [r3, #0]
 80171a6:	613b      	str	r3, [r7, #16]
    arp_table[i].q = NULL;
 80171a8:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 80171ac:	4910      	ldr	r1, [pc, #64]	; (80171f0 <etharp_update_arp_entry+0x148>)
 80171ae:	4613      	mov	r3, r2
 80171b0:	005b      	lsls	r3, r3, #1
 80171b2:	4413      	add	r3, r2
 80171b4:	00db      	lsls	r3, r3, #3
 80171b6:	440b      	add	r3, r1
 80171b8:	2200      	movs	r2, #0
 80171ba:	601a      	str	r2, [r3, #0]
#endif /* ARP_QUEUEING */
    /* send the queued IP packet */
    ethernet_output(netif, p, (struct eth_addr *)(netif->hwaddr), ethaddr, ETHTYPE_IP);
 80171bc:	68fb      	ldr	r3, [r7, #12]
 80171be:	f103 0226 	add.w	r2, r3, #38	; 0x26
 80171c2:	f44f 6300 	mov.w	r3, #2048	; 0x800
 80171c6:	9300      	str	r3, [sp, #0]
 80171c8:	687b      	ldr	r3, [r7, #4]
 80171ca:	6939      	ldr	r1, [r7, #16]
 80171cc:	68f8      	ldr	r0, [r7, #12]
 80171ce:	f001 ffbd 	bl	801914c <ethernet_output>
    /* free the queued IP packet */
    pbuf_free(p);
 80171d2:	6938      	ldr	r0, [r7, #16]
 80171d4:	f7f9 fe66 	bl	8010ea4 <pbuf_free>
  }
  return ERR_OK;
 80171d8:	2300      	movs	r3, #0
}
 80171da:	4618      	mov	r0, r3
 80171dc:	3718      	adds	r7, #24
 80171de:	46bd      	mov	sp, r7
 80171e0:	bd80      	pop	{r7, pc}
 80171e2:	bf00      	nop
 80171e4:	0801e864 	.word	0x0801e864
 80171e8:	0801e95c 	.word	0x0801e95c
 80171ec:	0801e8dc 	.word	0x0801e8dc
 80171f0:	20007138 	.word	0x20007138

080171f4 <etharp_cleanup_netif>:
 *
 * @param netif points to a network interface
 */
void
etharp_cleanup_netif(struct netif *netif)
{
 80171f4:	b580      	push	{r7, lr}
 80171f6:	b084      	sub	sp, #16
 80171f8:	af00      	add	r7, sp, #0
 80171fa:	6078      	str	r0, [r7, #4]
  int i;

  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 80171fc:	2300      	movs	r3, #0
 80171fe:	60fb      	str	r3, [r7, #12]
 8017200:	e01e      	b.n	8017240 <etharp_cleanup_netif+0x4c>
    u8_t state = arp_table[i].state;
 8017202:	4913      	ldr	r1, [pc, #76]	; (8017250 <etharp_cleanup_netif+0x5c>)
 8017204:	68fa      	ldr	r2, [r7, #12]
 8017206:	4613      	mov	r3, r2
 8017208:	005b      	lsls	r3, r3, #1
 801720a:	4413      	add	r3, r2
 801720c:	00db      	lsls	r3, r3, #3
 801720e:	440b      	add	r3, r1
 8017210:	3314      	adds	r3, #20
 8017212:	781b      	ldrb	r3, [r3, #0]
 8017214:	72fb      	strb	r3, [r7, #11]
    if ((state != ETHARP_STATE_EMPTY) && (arp_table[i].netif == netif)) {
 8017216:	7afb      	ldrb	r3, [r7, #11]
 8017218:	2b00      	cmp	r3, #0
 801721a:	d00e      	beq.n	801723a <etharp_cleanup_netif+0x46>
 801721c:	490c      	ldr	r1, [pc, #48]	; (8017250 <etharp_cleanup_netif+0x5c>)
 801721e:	68fa      	ldr	r2, [r7, #12]
 8017220:	4613      	mov	r3, r2
 8017222:	005b      	lsls	r3, r3, #1
 8017224:	4413      	add	r3, r2
 8017226:	00db      	lsls	r3, r3, #3
 8017228:	440b      	add	r3, r1
 801722a:	3308      	adds	r3, #8
 801722c:	681b      	ldr	r3, [r3, #0]
 801722e:	687a      	ldr	r2, [r7, #4]
 8017230:	429a      	cmp	r2, r3
 8017232:	d102      	bne.n	801723a <etharp_cleanup_netif+0x46>
      etharp_free_entry(i);
 8017234:	68f8      	ldr	r0, [r7, #12]
 8017236:	f7ff fce5 	bl	8016c04 <etharp_free_entry>
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 801723a:	68fb      	ldr	r3, [r7, #12]
 801723c:	3301      	adds	r3, #1
 801723e:	60fb      	str	r3, [r7, #12]
 8017240:	68fb      	ldr	r3, [r7, #12]
 8017242:	2b09      	cmp	r3, #9
 8017244:	dddd      	ble.n	8017202 <etharp_cleanup_netif+0xe>
    }
  }
}
 8017246:	bf00      	nop
 8017248:	bf00      	nop
 801724a:	3710      	adds	r7, #16
 801724c:	46bd      	mov	sp, r7
 801724e:	bd80      	pop	{r7, pc}
 8017250:	20007138 	.word	0x20007138

08017254 <etharp_input>:
 *
 * @see pbuf_free()
 */
void
etharp_input(struct pbuf *p, struct netif *netif)
{
 8017254:	b5b0      	push	{r4, r5, r7, lr}
 8017256:	b08a      	sub	sp, #40	; 0x28
 8017258:	af04      	add	r7, sp, #16
 801725a:	6078      	str	r0, [r7, #4]
 801725c:	6039      	str	r1, [r7, #0]
  ip4_addr_t sipaddr, dipaddr;
  u8_t for_us;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("netif != NULL", (netif != NULL), return;);
 801725e:	683b      	ldr	r3, [r7, #0]
 8017260:	2b00      	cmp	r3, #0
 8017262:	d107      	bne.n	8017274 <etharp_input+0x20>
 8017264:	4b3d      	ldr	r3, [pc, #244]	; (801735c <etharp_input+0x108>)
 8017266:	f240 228a 	movw	r2, #650	; 0x28a
 801726a:	493d      	ldr	r1, [pc, #244]	; (8017360 <etharp_input+0x10c>)
 801726c:	483d      	ldr	r0, [pc, #244]	; (8017364 <etharp_input+0x110>)
 801726e:	f002 fcef 	bl	8019c50 <iprintf>
 8017272:	e06f      	b.n	8017354 <etharp_input+0x100>

  hdr = (struct etharp_hdr *)p->payload;
 8017274:	687b      	ldr	r3, [r7, #4]
 8017276:	685b      	ldr	r3, [r3, #4]
 8017278:	613b      	str	r3, [r7, #16]

  /* RFC 826 "Packet Reception": */
  if ((hdr->hwtype != PP_HTONS(LWIP_IANA_HWTYPE_ETHERNET)) ||
 801727a:	693b      	ldr	r3, [r7, #16]
 801727c:	881b      	ldrh	r3, [r3, #0]
 801727e:	b29b      	uxth	r3, r3
 8017280:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8017284:	d10c      	bne.n	80172a0 <etharp_input+0x4c>
      (hdr->hwlen != ETH_HWADDR_LEN) ||
 8017286:	693b      	ldr	r3, [r7, #16]
 8017288:	791b      	ldrb	r3, [r3, #4]
  if ((hdr->hwtype != PP_HTONS(LWIP_IANA_HWTYPE_ETHERNET)) ||
 801728a:	2b06      	cmp	r3, #6
 801728c:	d108      	bne.n	80172a0 <etharp_input+0x4c>
      (hdr->protolen != sizeof(ip4_addr_t)) ||
 801728e:	693b      	ldr	r3, [r7, #16]
 8017290:	795b      	ldrb	r3, [r3, #5]
      (hdr->hwlen != ETH_HWADDR_LEN) ||
 8017292:	2b04      	cmp	r3, #4
 8017294:	d104      	bne.n	80172a0 <etharp_input+0x4c>
      (hdr->proto != PP_HTONS(ETHTYPE_IP)))  {
 8017296:	693b      	ldr	r3, [r7, #16]
 8017298:	885b      	ldrh	r3, [r3, #2]
 801729a:	b29b      	uxth	r3, r3
      (hdr->protolen != sizeof(ip4_addr_t)) ||
 801729c:	2b08      	cmp	r3, #8
 801729e:	d003      	beq.n	80172a8 <etharp_input+0x54>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_WARNING,
                ("etharp_input: packet dropped, wrong hw type, hwlen, proto, protolen or ethernet type (%"U16_F"/%"U16_F"/%"U16_F"/%"U16_F")\n",
                 hdr->hwtype, (u16_t)hdr->hwlen, hdr->proto, (u16_t)hdr->protolen));
    ETHARP_STATS_INC(etharp.proterr);
    ETHARP_STATS_INC(etharp.drop);
    pbuf_free(p);
 80172a0:	6878      	ldr	r0, [r7, #4]
 80172a2:	f7f9 fdff 	bl	8010ea4 <pbuf_free>
    return;
 80172a6:	e055      	b.n	8017354 <etharp_input+0x100>
  autoip_arp_reply(netif, hdr);
#endif /* LWIP_AUTOIP */

  /* Copy struct ip4_addr_wordaligned to aligned ip4_addr, to support compilers without
   * structure packing (not using structure copy which breaks strict-aliasing rules). */
  IPADDR_WORDALIGNED_COPY_TO_IP4_ADDR_T(&sipaddr, &hdr->sipaddr);
 80172a8:	693b      	ldr	r3, [r7, #16]
 80172aa:	330e      	adds	r3, #14
 80172ac:	681b      	ldr	r3, [r3, #0]
 80172ae:	60fb      	str	r3, [r7, #12]
  IPADDR_WORDALIGNED_COPY_TO_IP4_ADDR_T(&dipaddr, &hdr->dipaddr);
 80172b0:	693b      	ldr	r3, [r7, #16]
 80172b2:	3318      	adds	r3, #24
 80172b4:	681b      	ldr	r3, [r3, #0]
 80172b6:	60bb      	str	r3, [r7, #8]

  /* this interface is not configured? */
  if (ip4_addr_isany_val(*netif_ip4_addr(netif))) {
 80172b8:	683b      	ldr	r3, [r7, #0]
 80172ba:	3304      	adds	r3, #4
 80172bc:	681b      	ldr	r3, [r3, #0]
 80172be:	2b00      	cmp	r3, #0
 80172c0:	d102      	bne.n	80172c8 <etharp_input+0x74>
    for_us = 0;
 80172c2:	2300      	movs	r3, #0
 80172c4:	75fb      	strb	r3, [r7, #23]
 80172c6:	e009      	b.n	80172dc <etharp_input+0x88>
  } else {
    /* ARP packet directed to us? */
    for_us = (u8_t)ip4_addr_cmp(&dipaddr, netif_ip4_addr(netif));
 80172c8:	68ba      	ldr	r2, [r7, #8]
 80172ca:	683b      	ldr	r3, [r7, #0]
 80172cc:	3304      	adds	r3, #4
 80172ce:	681b      	ldr	r3, [r3, #0]
 80172d0:	429a      	cmp	r2, r3
 80172d2:	bf0c      	ite	eq
 80172d4:	2301      	moveq	r3, #1
 80172d6:	2300      	movne	r3, #0
 80172d8:	b2db      	uxtb	r3, r3
 80172da:	75fb      	strb	r3, [r7, #23]
  /* ARP message directed to us?
      -> add IP address in ARP cache; assume requester wants to talk to us,
         can result in directly sending the queued packets for this host.
     ARP message not directed to us?
      ->  update the source IP address in the cache, if present */
  etharp_update_arp_entry(netif, &sipaddr, &(hdr->shwaddr),
 80172dc:	693b      	ldr	r3, [r7, #16]
 80172de:	f103 0208 	add.w	r2, r3, #8
 80172e2:	7dfb      	ldrb	r3, [r7, #23]
 80172e4:	2b00      	cmp	r3, #0
 80172e6:	d001      	beq.n	80172ec <etharp_input+0x98>
 80172e8:	2301      	movs	r3, #1
 80172ea:	e000      	b.n	80172ee <etharp_input+0x9a>
 80172ec:	2302      	movs	r3, #2
 80172ee:	f107 010c 	add.w	r1, r7, #12
 80172f2:	6838      	ldr	r0, [r7, #0]
 80172f4:	f7ff fed8 	bl	80170a8 <etharp_update_arp_entry>
                          for_us ? ETHARP_FLAG_TRY_HARD : ETHARP_FLAG_FIND_ONLY);

  /* now act on the message itself */
  switch (hdr->opcode) {
 80172f8:	693b      	ldr	r3, [r7, #16]
 80172fa:	88db      	ldrh	r3, [r3, #6]
 80172fc:	b29b      	uxth	r3, r3
 80172fe:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8017302:	d003      	beq.n	801730c <etharp_input+0xb8>
 8017304:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8017308:	d01e      	beq.n	8017348 <etharp_input+0xf4>
#endif /* (LWIP_DHCP && DHCP_DOES_ARP_CHECK) */
      break;
    default:
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_input: ARP unknown opcode type %"S16_F"\n", lwip_htons(hdr->opcode)));
      ETHARP_STATS_INC(etharp.err);
      break;
 801730a:	e020      	b.n	801734e <etharp_input+0xfa>
      if (for_us) {
 801730c:	7dfb      	ldrb	r3, [r7, #23]
 801730e:	2b00      	cmp	r3, #0
 8017310:	d01c      	beq.n	801734c <etharp_input+0xf8>
                   (struct eth_addr *)netif->hwaddr, &hdr->shwaddr,
 8017312:	683b      	ldr	r3, [r7, #0]
 8017314:	f103 0026 	add.w	r0, r3, #38	; 0x26
 8017318:	693b      	ldr	r3, [r7, #16]
 801731a:	f103 0408 	add.w	r4, r3, #8
                   (struct eth_addr *)netif->hwaddr, netif_ip4_addr(netif),
 801731e:	683b      	ldr	r3, [r7, #0]
 8017320:	f103 0526 	add.w	r5, r3, #38	; 0x26
 8017324:	683b      	ldr	r3, [r7, #0]
 8017326:	3304      	adds	r3, #4
                   &hdr->shwaddr, &sipaddr,
 8017328:	693a      	ldr	r2, [r7, #16]
 801732a:	3208      	adds	r2, #8
        etharp_raw(netif,
 801732c:	2102      	movs	r1, #2
 801732e:	9103      	str	r1, [sp, #12]
 8017330:	f107 010c 	add.w	r1, r7, #12
 8017334:	9102      	str	r1, [sp, #8]
 8017336:	9201      	str	r2, [sp, #4]
 8017338:	9300      	str	r3, [sp, #0]
 801733a:	462b      	mov	r3, r5
 801733c:	4622      	mov	r2, r4
 801733e:	4601      	mov	r1, r0
 8017340:	6838      	ldr	r0, [r7, #0]
 8017342:	f000 faeb 	bl	801791c <etharp_raw>
      break;
 8017346:	e001      	b.n	801734c <etharp_input+0xf8>
      break;
 8017348:	bf00      	nop
 801734a:	e000      	b.n	801734e <etharp_input+0xfa>
      break;
 801734c:	bf00      	nop
  }
  /* free ARP packet */
  pbuf_free(p);
 801734e:	6878      	ldr	r0, [r7, #4]
 8017350:	f7f9 fda8 	bl	8010ea4 <pbuf_free>
}
 8017354:	3718      	adds	r7, #24
 8017356:	46bd      	mov	sp, r7
 8017358:	bdb0      	pop	{r4, r5, r7, pc}
 801735a:	bf00      	nop
 801735c:	0801e864 	.word	0x0801e864
 8017360:	0801e9b4 	.word	0x0801e9b4
 8017364:	0801e8dc 	.word	0x0801e8dc

08017368 <etharp_output_to_arp_index>:
/** Just a small helper function that sends a pbuf to an ethernet address
 * in the arp_table specified by the index 'arp_idx'.
 */
static err_t
etharp_output_to_arp_index(struct netif *netif, struct pbuf *q, netif_addr_idx_t arp_idx)
{
 8017368:	b580      	push	{r7, lr}
 801736a:	b086      	sub	sp, #24
 801736c:	af02      	add	r7, sp, #8
 801736e:	60f8      	str	r0, [r7, #12]
 8017370:	60b9      	str	r1, [r7, #8]
 8017372:	4613      	mov	r3, r2
 8017374:	71fb      	strb	r3, [r7, #7]
  LWIP_ASSERT("arp_table[arp_idx].state >= ETHARP_STATE_STABLE",
 8017376:	79fa      	ldrb	r2, [r7, #7]
 8017378:	4944      	ldr	r1, [pc, #272]	; (801748c <etharp_output_to_arp_index+0x124>)
 801737a:	4613      	mov	r3, r2
 801737c:	005b      	lsls	r3, r3, #1
 801737e:	4413      	add	r3, r2
 8017380:	00db      	lsls	r3, r3, #3
 8017382:	440b      	add	r3, r1
 8017384:	3314      	adds	r3, #20
 8017386:	781b      	ldrb	r3, [r3, #0]
 8017388:	2b01      	cmp	r3, #1
 801738a:	d806      	bhi.n	801739a <etharp_output_to_arp_index+0x32>
 801738c:	4b40      	ldr	r3, [pc, #256]	; (8017490 <etharp_output_to_arp_index+0x128>)
 801738e:	f240 22ee 	movw	r2, #750	; 0x2ee
 8017392:	4940      	ldr	r1, [pc, #256]	; (8017494 <etharp_output_to_arp_index+0x12c>)
 8017394:	4840      	ldr	r0, [pc, #256]	; (8017498 <etharp_output_to_arp_index+0x130>)
 8017396:	f002 fc5b 	bl	8019c50 <iprintf>
              arp_table[arp_idx].state >= ETHARP_STATE_STABLE);
  /* if arp table entry is about to expire: re-request it,
     but only if its state is ETHARP_STATE_STABLE to prevent flooding the
     network with ARP requests if this address is used frequently. */
  if (arp_table[arp_idx].state == ETHARP_STATE_STABLE) {
 801739a:	79fa      	ldrb	r2, [r7, #7]
 801739c:	493b      	ldr	r1, [pc, #236]	; (801748c <etharp_output_to_arp_index+0x124>)
 801739e:	4613      	mov	r3, r2
 80173a0:	005b      	lsls	r3, r3, #1
 80173a2:	4413      	add	r3, r2
 80173a4:	00db      	lsls	r3, r3, #3
 80173a6:	440b      	add	r3, r1
 80173a8:	3314      	adds	r3, #20
 80173aa:	781b      	ldrb	r3, [r3, #0]
 80173ac:	2b02      	cmp	r3, #2
 80173ae:	d153      	bne.n	8017458 <etharp_output_to_arp_index+0xf0>
    if (arp_table[arp_idx].ctime >= ARP_AGE_REREQUEST_USED_BROADCAST) {
 80173b0:	79fa      	ldrb	r2, [r7, #7]
 80173b2:	4936      	ldr	r1, [pc, #216]	; (801748c <etharp_output_to_arp_index+0x124>)
 80173b4:	4613      	mov	r3, r2
 80173b6:	005b      	lsls	r3, r3, #1
 80173b8:	4413      	add	r3, r2
 80173ba:	00db      	lsls	r3, r3, #3
 80173bc:	440b      	add	r3, r1
 80173be:	3312      	adds	r3, #18
 80173c0:	881b      	ldrh	r3, [r3, #0]
 80173c2:	f5b3 7f8e 	cmp.w	r3, #284	; 0x11c
 80173c6:	d919      	bls.n	80173fc <etharp_output_to_arp_index+0x94>
      /* issue a standard request using broadcast */
      if (etharp_request(netif, &arp_table[arp_idx].ipaddr) == ERR_OK) {
 80173c8:	79fa      	ldrb	r2, [r7, #7]
 80173ca:	4613      	mov	r3, r2
 80173cc:	005b      	lsls	r3, r3, #1
 80173ce:	4413      	add	r3, r2
 80173d0:	00db      	lsls	r3, r3, #3
 80173d2:	4a2e      	ldr	r2, [pc, #184]	; (801748c <etharp_output_to_arp_index+0x124>)
 80173d4:	4413      	add	r3, r2
 80173d6:	3304      	adds	r3, #4
 80173d8:	4619      	mov	r1, r3
 80173da:	68f8      	ldr	r0, [r7, #12]
 80173dc:	f000 fb4c 	bl	8017a78 <etharp_request>
 80173e0:	4603      	mov	r3, r0
 80173e2:	2b00      	cmp	r3, #0
 80173e4:	d138      	bne.n	8017458 <etharp_output_to_arp_index+0xf0>
        arp_table[arp_idx].state = ETHARP_STATE_STABLE_REREQUESTING_1;
 80173e6:	79fa      	ldrb	r2, [r7, #7]
 80173e8:	4928      	ldr	r1, [pc, #160]	; (801748c <etharp_output_to_arp_index+0x124>)
 80173ea:	4613      	mov	r3, r2
 80173ec:	005b      	lsls	r3, r3, #1
 80173ee:	4413      	add	r3, r2
 80173f0:	00db      	lsls	r3, r3, #3
 80173f2:	440b      	add	r3, r1
 80173f4:	3314      	adds	r3, #20
 80173f6:	2203      	movs	r2, #3
 80173f8:	701a      	strb	r2, [r3, #0]
 80173fa:	e02d      	b.n	8017458 <etharp_output_to_arp_index+0xf0>
      }
    } else if (arp_table[arp_idx].ctime >= ARP_AGE_REREQUEST_USED_UNICAST) {
 80173fc:	79fa      	ldrb	r2, [r7, #7]
 80173fe:	4923      	ldr	r1, [pc, #140]	; (801748c <etharp_output_to_arp_index+0x124>)
 8017400:	4613      	mov	r3, r2
 8017402:	005b      	lsls	r3, r3, #1
 8017404:	4413      	add	r3, r2
 8017406:	00db      	lsls	r3, r3, #3
 8017408:	440b      	add	r3, r1
 801740a:	3312      	adds	r3, #18
 801740c:	881b      	ldrh	r3, [r3, #0]
 801740e:	f5b3 7f87 	cmp.w	r3, #270	; 0x10e
 8017412:	d321      	bcc.n	8017458 <etharp_output_to_arp_index+0xf0>
      /* issue a unicast request (for 15 seconds) to prevent unnecessary broadcast */
      if (etharp_request_dst(netif, &arp_table[arp_idx].ipaddr, &arp_table[arp_idx].ethaddr) == ERR_OK) {
 8017414:	79fa      	ldrb	r2, [r7, #7]
 8017416:	4613      	mov	r3, r2
 8017418:	005b      	lsls	r3, r3, #1
 801741a:	4413      	add	r3, r2
 801741c:	00db      	lsls	r3, r3, #3
 801741e:	4a1b      	ldr	r2, [pc, #108]	; (801748c <etharp_output_to_arp_index+0x124>)
 8017420:	4413      	add	r3, r2
 8017422:	1d19      	adds	r1, r3, #4
 8017424:	79fa      	ldrb	r2, [r7, #7]
 8017426:	4613      	mov	r3, r2
 8017428:	005b      	lsls	r3, r3, #1
 801742a:	4413      	add	r3, r2
 801742c:	00db      	lsls	r3, r3, #3
 801742e:	3308      	adds	r3, #8
 8017430:	4a16      	ldr	r2, [pc, #88]	; (801748c <etharp_output_to_arp_index+0x124>)
 8017432:	4413      	add	r3, r2
 8017434:	3304      	adds	r3, #4
 8017436:	461a      	mov	r2, r3
 8017438:	68f8      	ldr	r0, [r7, #12]
 801743a:	f000 fafb 	bl	8017a34 <etharp_request_dst>
 801743e:	4603      	mov	r3, r0
 8017440:	2b00      	cmp	r3, #0
 8017442:	d109      	bne.n	8017458 <etharp_output_to_arp_index+0xf0>
        arp_table[arp_idx].state = ETHARP_STATE_STABLE_REREQUESTING_1;
 8017444:	79fa      	ldrb	r2, [r7, #7]
 8017446:	4911      	ldr	r1, [pc, #68]	; (801748c <etharp_output_to_arp_index+0x124>)
 8017448:	4613      	mov	r3, r2
 801744a:	005b      	lsls	r3, r3, #1
 801744c:	4413      	add	r3, r2
 801744e:	00db      	lsls	r3, r3, #3
 8017450:	440b      	add	r3, r1
 8017452:	3314      	adds	r3, #20
 8017454:	2203      	movs	r2, #3
 8017456:	701a      	strb	r2, [r3, #0]
      }
    }
  }

  return ethernet_output(netif, q, (struct eth_addr *)(netif->hwaddr), &arp_table[arp_idx].ethaddr, ETHTYPE_IP);
 8017458:	68fb      	ldr	r3, [r7, #12]
 801745a:	f103 0126 	add.w	r1, r3, #38	; 0x26
 801745e:	79fa      	ldrb	r2, [r7, #7]
 8017460:	4613      	mov	r3, r2
 8017462:	005b      	lsls	r3, r3, #1
 8017464:	4413      	add	r3, r2
 8017466:	00db      	lsls	r3, r3, #3
 8017468:	3308      	adds	r3, #8
 801746a:	4a08      	ldr	r2, [pc, #32]	; (801748c <etharp_output_to_arp_index+0x124>)
 801746c:	4413      	add	r3, r2
 801746e:	3304      	adds	r3, #4
 8017470:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8017474:	9200      	str	r2, [sp, #0]
 8017476:	460a      	mov	r2, r1
 8017478:	68b9      	ldr	r1, [r7, #8]
 801747a:	68f8      	ldr	r0, [r7, #12]
 801747c:	f001 fe66 	bl	801914c <ethernet_output>
 8017480:	4603      	mov	r3, r0
}
 8017482:	4618      	mov	r0, r3
 8017484:	3710      	adds	r7, #16
 8017486:	46bd      	mov	sp, r7
 8017488:	bd80      	pop	{r7, pc}
 801748a:	bf00      	nop
 801748c:	20007138 	.word	0x20007138
 8017490:	0801e864 	.word	0x0801e864
 8017494:	0801e9d4 	.word	0x0801e9d4
 8017498:	0801e8dc 	.word	0x0801e8dc

0801749c <etharp_output>:
 * - ERR_RTE No route to destination (no gateway to external networks),
 * or the return type of either etharp_query() or ethernet_output().
 */
err_t
etharp_output(struct netif *netif, struct pbuf *q, const ip4_addr_t *ipaddr)
{
 801749c:	b580      	push	{r7, lr}
 801749e:	b08a      	sub	sp, #40	; 0x28
 80174a0:	af02      	add	r7, sp, #8
 80174a2:	60f8      	str	r0, [r7, #12]
 80174a4:	60b9      	str	r1, [r7, #8]
 80174a6:	607a      	str	r2, [r7, #4]
  const struct eth_addr *dest;
  struct eth_addr mcastaddr;
  const ip4_addr_t *dst_addr = ipaddr;
 80174a8:	687b      	ldr	r3, [r7, #4]
 80174aa:	61bb      	str	r3, [r7, #24]

  LWIP_ASSERT_CORE_LOCKED();
  LWIP_ASSERT("netif != NULL", netif != NULL);
 80174ac:	68fb      	ldr	r3, [r7, #12]
 80174ae:	2b00      	cmp	r3, #0
 80174b0:	d106      	bne.n	80174c0 <etharp_output+0x24>
 80174b2:	4b73      	ldr	r3, [pc, #460]	; (8017680 <etharp_output+0x1e4>)
 80174b4:	f240 321e 	movw	r2, #798	; 0x31e
 80174b8:	4972      	ldr	r1, [pc, #456]	; (8017684 <etharp_output+0x1e8>)
 80174ba:	4873      	ldr	r0, [pc, #460]	; (8017688 <etharp_output+0x1ec>)
 80174bc:	f002 fbc8 	bl	8019c50 <iprintf>
  LWIP_ASSERT("q != NULL", q != NULL);
 80174c0:	68bb      	ldr	r3, [r7, #8]
 80174c2:	2b00      	cmp	r3, #0
 80174c4:	d106      	bne.n	80174d4 <etharp_output+0x38>
 80174c6:	4b6e      	ldr	r3, [pc, #440]	; (8017680 <etharp_output+0x1e4>)
 80174c8:	f240 321f 	movw	r2, #799	; 0x31f
 80174cc:	496f      	ldr	r1, [pc, #444]	; (801768c <etharp_output+0x1f0>)
 80174ce:	486e      	ldr	r0, [pc, #440]	; (8017688 <etharp_output+0x1ec>)
 80174d0:	f002 fbbe 	bl	8019c50 <iprintf>
  LWIP_ASSERT("ipaddr != NULL", ipaddr != NULL);
 80174d4:	687b      	ldr	r3, [r7, #4]
 80174d6:	2b00      	cmp	r3, #0
 80174d8:	d106      	bne.n	80174e8 <etharp_output+0x4c>
 80174da:	4b69      	ldr	r3, [pc, #420]	; (8017680 <etharp_output+0x1e4>)
 80174dc:	f44f 7248 	mov.w	r2, #800	; 0x320
 80174e0:	496b      	ldr	r1, [pc, #428]	; (8017690 <etharp_output+0x1f4>)
 80174e2:	4869      	ldr	r0, [pc, #420]	; (8017688 <etharp_output+0x1ec>)
 80174e4:	f002 fbb4 	bl	8019c50 <iprintf>

  /* Determine on destination hardware address. Broadcasts and multicasts
   * are special, other IP addresses are looked up in the ARP table. */

  /* broadcast destination IP address? */
  if (ip4_addr_isbroadcast(ipaddr, netif)) {
 80174e8:	687b      	ldr	r3, [r7, #4]
 80174ea:	681b      	ldr	r3, [r3, #0]
 80174ec:	68f9      	ldr	r1, [r7, #12]
 80174ee:	4618      	mov	r0, r3
 80174f0:	f000 ff1e 	bl	8018330 <ip4_addr_isbroadcast_u32>
 80174f4:	4603      	mov	r3, r0
 80174f6:	2b00      	cmp	r3, #0
 80174f8:	d002      	beq.n	8017500 <etharp_output+0x64>
    /* broadcast on Ethernet also */
    dest = (const struct eth_addr *)&ethbroadcast;
 80174fa:	4b66      	ldr	r3, [pc, #408]	; (8017694 <etharp_output+0x1f8>)
 80174fc:	61fb      	str	r3, [r7, #28]
 80174fe:	e0af      	b.n	8017660 <etharp_output+0x1c4>
    /* multicast destination IP address? */
  } else if (ip4_addr_ismulticast(ipaddr)) {
 8017500:	687b      	ldr	r3, [r7, #4]
 8017502:	681b      	ldr	r3, [r3, #0]
 8017504:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8017508:	2be0      	cmp	r3, #224	; 0xe0
 801750a:	d118      	bne.n	801753e <etharp_output+0xa2>
    /* Hash IP multicast address to MAC address.*/
    mcastaddr.addr[0] = LL_IP4_MULTICAST_ADDR_0;
 801750c:	2301      	movs	r3, #1
 801750e:	743b      	strb	r3, [r7, #16]
    mcastaddr.addr[1] = LL_IP4_MULTICAST_ADDR_1;
 8017510:	2300      	movs	r3, #0
 8017512:	747b      	strb	r3, [r7, #17]
    mcastaddr.addr[2] = LL_IP4_MULTICAST_ADDR_2;
 8017514:	235e      	movs	r3, #94	; 0x5e
 8017516:	74bb      	strb	r3, [r7, #18]
    mcastaddr.addr[3] = ip4_addr2(ipaddr) & 0x7f;
 8017518:	687b      	ldr	r3, [r7, #4]
 801751a:	3301      	adds	r3, #1
 801751c:	781b      	ldrb	r3, [r3, #0]
 801751e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8017522:	b2db      	uxtb	r3, r3
 8017524:	74fb      	strb	r3, [r7, #19]
    mcastaddr.addr[4] = ip4_addr3(ipaddr);
 8017526:	687b      	ldr	r3, [r7, #4]
 8017528:	3302      	adds	r3, #2
 801752a:	781b      	ldrb	r3, [r3, #0]
 801752c:	753b      	strb	r3, [r7, #20]
    mcastaddr.addr[5] = ip4_addr4(ipaddr);
 801752e:	687b      	ldr	r3, [r7, #4]
 8017530:	3303      	adds	r3, #3
 8017532:	781b      	ldrb	r3, [r3, #0]
 8017534:	757b      	strb	r3, [r7, #21]
    /* destination Ethernet address is multicast */
    dest = &mcastaddr;
 8017536:	f107 0310 	add.w	r3, r7, #16
 801753a:	61fb      	str	r3, [r7, #28]
 801753c:	e090      	b.n	8017660 <etharp_output+0x1c4>
    /* unicast destination IP address? */
  } else {
    netif_addr_idx_t i;
    /* outside local network? if so, this can neither be a global broadcast nor
       a subnet broadcast. */
    if (!ip4_addr_netcmp(ipaddr, netif_ip4_addr(netif), netif_ip4_netmask(netif)) &&
 801753e:	687b      	ldr	r3, [r7, #4]
 8017540:	681a      	ldr	r2, [r3, #0]
 8017542:	68fb      	ldr	r3, [r7, #12]
 8017544:	3304      	adds	r3, #4
 8017546:	681b      	ldr	r3, [r3, #0]
 8017548:	405a      	eors	r2, r3
 801754a:	68fb      	ldr	r3, [r7, #12]
 801754c:	3308      	adds	r3, #8
 801754e:	681b      	ldr	r3, [r3, #0]
 8017550:	4013      	ands	r3, r2
 8017552:	2b00      	cmp	r3, #0
 8017554:	d012      	beq.n	801757c <etharp_output+0xe0>
        !ip4_addr_islinklocal(ipaddr)) {
 8017556:	687b      	ldr	r3, [r7, #4]
 8017558:	681b      	ldr	r3, [r3, #0]
 801755a:	b29b      	uxth	r3, r3
    if (!ip4_addr_netcmp(ipaddr, netif_ip4_addr(netif), netif_ip4_netmask(netif)) &&
 801755c:	f64f 62a9 	movw	r2, #65193	; 0xfea9
 8017560:	4293      	cmp	r3, r2
 8017562:	d00b      	beq.n	801757c <etharp_output+0xe0>
        dst_addr = LWIP_HOOK_ETHARP_GET_GW(netif, ipaddr);
        if (dst_addr == NULL)
#endif /* LWIP_HOOK_ETHARP_GET_GW */
        {
          /* interface has default gateway? */
          if (!ip4_addr_isany_val(*netif_ip4_gw(netif))) {
 8017564:	68fb      	ldr	r3, [r7, #12]
 8017566:	330c      	adds	r3, #12
 8017568:	681b      	ldr	r3, [r3, #0]
 801756a:	2b00      	cmp	r3, #0
 801756c:	d003      	beq.n	8017576 <etharp_output+0xda>
            /* send to hardware address of default gateway IP address */
            dst_addr = netif_ip4_gw(netif);
 801756e:	68fb      	ldr	r3, [r7, #12]
 8017570:	330c      	adds	r3, #12
 8017572:	61bb      	str	r3, [r7, #24]
 8017574:	e002      	b.n	801757c <etharp_output+0xe0>
            /* no default gateway available */
          } else {
            /* no route to destination error (default gateway missing) */
            return ERR_RTE;
 8017576:	f06f 0303 	mvn.w	r3, #3
 801757a:	e07d      	b.n	8017678 <etharp_output+0x1dc>
    if (netif->hints != NULL) {
      /* per-pcb cached entry was given */
      netif_addr_idx_t etharp_cached_entry = netif->hints->addr_hint;
      if (etharp_cached_entry < ARP_TABLE_SIZE) {
#endif /* LWIP_NETIF_HWADDRHINT */
        if ((arp_table[etharp_cached_entry].state >= ETHARP_STATE_STABLE) &&
 801757c:	4b46      	ldr	r3, [pc, #280]	; (8017698 <etharp_output+0x1fc>)
 801757e:	781b      	ldrb	r3, [r3, #0]
 8017580:	4619      	mov	r1, r3
 8017582:	4a46      	ldr	r2, [pc, #280]	; (801769c <etharp_output+0x200>)
 8017584:	460b      	mov	r3, r1
 8017586:	005b      	lsls	r3, r3, #1
 8017588:	440b      	add	r3, r1
 801758a:	00db      	lsls	r3, r3, #3
 801758c:	4413      	add	r3, r2
 801758e:	3314      	adds	r3, #20
 8017590:	781b      	ldrb	r3, [r3, #0]
 8017592:	2b01      	cmp	r3, #1
 8017594:	d925      	bls.n	80175e2 <etharp_output+0x146>
#if ETHARP_TABLE_MATCH_NETIF
            (arp_table[etharp_cached_entry].netif == netif) &&
 8017596:	4b40      	ldr	r3, [pc, #256]	; (8017698 <etharp_output+0x1fc>)
 8017598:	781b      	ldrb	r3, [r3, #0]
 801759a:	4619      	mov	r1, r3
 801759c:	4a3f      	ldr	r2, [pc, #252]	; (801769c <etharp_output+0x200>)
 801759e:	460b      	mov	r3, r1
 80175a0:	005b      	lsls	r3, r3, #1
 80175a2:	440b      	add	r3, r1
 80175a4:	00db      	lsls	r3, r3, #3
 80175a6:	4413      	add	r3, r2
 80175a8:	3308      	adds	r3, #8
 80175aa:	681b      	ldr	r3, [r3, #0]
        if ((arp_table[etharp_cached_entry].state >= ETHARP_STATE_STABLE) &&
 80175ac:	68fa      	ldr	r2, [r7, #12]
 80175ae:	429a      	cmp	r2, r3
 80175b0:	d117      	bne.n	80175e2 <etharp_output+0x146>
#endif
            (ip4_addr_cmp(dst_addr, &arp_table[etharp_cached_entry].ipaddr))) {
 80175b2:	69bb      	ldr	r3, [r7, #24]
 80175b4:	681a      	ldr	r2, [r3, #0]
 80175b6:	4b38      	ldr	r3, [pc, #224]	; (8017698 <etharp_output+0x1fc>)
 80175b8:	781b      	ldrb	r3, [r3, #0]
 80175ba:	4618      	mov	r0, r3
 80175bc:	4937      	ldr	r1, [pc, #220]	; (801769c <etharp_output+0x200>)
 80175be:	4603      	mov	r3, r0
 80175c0:	005b      	lsls	r3, r3, #1
 80175c2:	4403      	add	r3, r0
 80175c4:	00db      	lsls	r3, r3, #3
 80175c6:	440b      	add	r3, r1
 80175c8:	3304      	adds	r3, #4
 80175ca:	681b      	ldr	r3, [r3, #0]
            (arp_table[etharp_cached_entry].netif == netif) &&
 80175cc:	429a      	cmp	r2, r3
 80175ce:	d108      	bne.n	80175e2 <etharp_output+0x146>
          /* the per-pcb-cached entry is stable and the right one! */
          ETHARP_STATS_INC(etharp.cachehit);
          return etharp_output_to_arp_index(netif, q, etharp_cached_entry);
 80175d0:	4b31      	ldr	r3, [pc, #196]	; (8017698 <etharp_output+0x1fc>)
 80175d2:	781b      	ldrb	r3, [r3, #0]
 80175d4:	461a      	mov	r2, r3
 80175d6:	68b9      	ldr	r1, [r7, #8]
 80175d8:	68f8      	ldr	r0, [r7, #12]
 80175da:	f7ff fec5 	bl	8017368 <etharp_output_to_arp_index>
 80175de:	4603      	mov	r3, r0
 80175e0:	e04a      	b.n	8017678 <etharp_output+0x1dc>
    }
#endif /* LWIP_NETIF_HWADDRHINT */

    /* find stable entry: do this here since this is a critical path for
       throughput and etharp_find_entry() is kind of slow */
    for (i = 0; i < ARP_TABLE_SIZE; i++) {
 80175e2:	2300      	movs	r3, #0
 80175e4:	75fb      	strb	r3, [r7, #23]
 80175e6:	e031      	b.n	801764c <etharp_output+0x1b0>
      if ((arp_table[i].state >= ETHARP_STATE_STABLE) &&
 80175e8:	7dfa      	ldrb	r2, [r7, #23]
 80175ea:	492c      	ldr	r1, [pc, #176]	; (801769c <etharp_output+0x200>)
 80175ec:	4613      	mov	r3, r2
 80175ee:	005b      	lsls	r3, r3, #1
 80175f0:	4413      	add	r3, r2
 80175f2:	00db      	lsls	r3, r3, #3
 80175f4:	440b      	add	r3, r1
 80175f6:	3314      	adds	r3, #20
 80175f8:	781b      	ldrb	r3, [r3, #0]
 80175fa:	2b01      	cmp	r3, #1
 80175fc:	d923      	bls.n	8017646 <etharp_output+0x1aa>
#if ETHARP_TABLE_MATCH_NETIF
          (arp_table[i].netif == netif) &&
 80175fe:	7dfa      	ldrb	r2, [r7, #23]
 8017600:	4926      	ldr	r1, [pc, #152]	; (801769c <etharp_output+0x200>)
 8017602:	4613      	mov	r3, r2
 8017604:	005b      	lsls	r3, r3, #1
 8017606:	4413      	add	r3, r2
 8017608:	00db      	lsls	r3, r3, #3
 801760a:	440b      	add	r3, r1
 801760c:	3308      	adds	r3, #8
 801760e:	681b      	ldr	r3, [r3, #0]
      if ((arp_table[i].state >= ETHARP_STATE_STABLE) &&
 8017610:	68fa      	ldr	r2, [r7, #12]
 8017612:	429a      	cmp	r2, r3
 8017614:	d117      	bne.n	8017646 <etharp_output+0x1aa>
#endif
          (ip4_addr_cmp(dst_addr, &arp_table[i].ipaddr))) {
 8017616:	69bb      	ldr	r3, [r7, #24]
 8017618:	6819      	ldr	r1, [r3, #0]
 801761a:	7dfa      	ldrb	r2, [r7, #23]
 801761c:	481f      	ldr	r0, [pc, #124]	; (801769c <etharp_output+0x200>)
 801761e:	4613      	mov	r3, r2
 8017620:	005b      	lsls	r3, r3, #1
 8017622:	4413      	add	r3, r2
 8017624:	00db      	lsls	r3, r3, #3
 8017626:	4403      	add	r3, r0
 8017628:	3304      	adds	r3, #4
 801762a:	681b      	ldr	r3, [r3, #0]
          (arp_table[i].netif == netif) &&
 801762c:	4299      	cmp	r1, r3
 801762e:	d10a      	bne.n	8017646 <etharp_output+0x1aa>
        /* found an existing, stable entry */
        ETHARP_SET_ADDRHINT(netif, i);
 8017630:	4a19      	ldr	r2, [pc, #100]	; (8017698 <etharp_output+0x1fc>)
 8017632:	7dfb      	ldrb	r3, [r7, #23]
 8017634:	7013      	strb	r3, [r2, #0]
        return etharp_output_to_arp_index(netif, q, i);
 8017636:	7dfb      	ldrb	r3, [r7, #23]
 8017638:	461a      	mov	r2, r3
 801763a:	68b9      	ldr	r1, [r7, #8]
 801763c:	68f8      	ldr	r0, [r7, #12]
 801763e:	f7ff fe93 	bl	8017368 <etharp_output_to_arp_index>
 8017642:	4603      	mov	r3, r0
 8017644:	e018      	b.n	8017678 <etharp_output+0x1dc>
    for (i = 0; i < ARP_TABLE_SIZE; i++) {
 8017646:	7dfb      	ldrb	r3, [r7, #23]
 8017648:	3301      	adds	r3, #1
 801764a:	75fb      	strb	r3, [r7, #23]
 801764c:	7dfb      	ldrb	r3, [r7, #23]
 801764e:	2b09      	cmp	r3, #9
 8017650:	d9ca      	bls.n	80175e8 <etharp_output+0x14c>
      }
    }
    /* no stable entry found, use the (slower) query function:
       queue on destination Ethernet address belonging to ipaddr */
    return etharp_query(netif, dst_addr, q);
 8017652:	68ba      	ldr	r2, [r7, #8]
 8017654:	69b9      	ldr	r1, [r7, #24]
 8017656:	68f8      	ldr	r0, [r7, #12]
 8017658:	f000 f822 	bl	80176a0 <etharp_query>
 801765c:	4603      	mov	r3, r0
 801765e:	e00b      	b.n	8017678 <etharp_output+0x1dc>
  }

  /* continuation for multicast/broadcast destinations */
  /* obtain source Ethernet address of the given interface */
  /* send packet directly on the link */
  return ethernet_output(netif, q, (struct eth_addr *)(netif->hwaddr), dest, ETHTYPE_IP);
 8017660:	68fb      	ldr	r3, [r7, #12]
 8017662:	f103 0226 	add.w	r2, r3, #38	; 0x26
 8017666:	f44f 6300 	mov.w	r3, #2048	; 0x800
 801766a:	9300      	str	r3, [sp, #0]
 801766c:	69fb      	ldr	r3, [r7, #28]
 801766e:	68b9      	ldr	r1, [r7, #8]
 8017670:	68f8      	ldr	r0, [r7, #12]
 8017672:	f001 fd6b 	bl	801914c <ethernet_output>
 8017676:	4603      	mov	r3, r0
}
 8017678:	4618      	mov	r0, r3
 801767a:	3720      	adds	r7, #32
 801767c:	46bd      	mov	sp, r7
 801767e:	bd80      	pop	{r7, pc}
 8017680:	0801e864 	.word	0x0801e864
 8017684:	0801e9b4 	.word	0x0801e9b4
 8017688:	0801e8dc 	.word	0x0801e8dc
 801768c:	0801ea04 	.word	0x0801ea04
 8017690:	0801e9a4 	.word	0x0801e9a4
 8017694:	0801f040 	.word	0x0801f040
 8017698:	20007228 	.word	0x20007228
 801769c:	20007138 	.word	0x20007138

080176a0 <etharp_query>:
 * - ERR_ARG Non-unicast address given, those will not appear in ARP cache.
 *
 */
err_t
etharp_query(struct netif *netif, const ip4_addr_t *ipaddr, struct pbuf *q)
{
 80176a0:	b580      	push	{r7, lr}
 80176a2:	b08c      	sub	sp, #48	; 0x30
 80176a4:	af02      	add	r7, sp, #8
 80176a6:	60f8      	str	r0, [r7, #12]
 80176a8:	60b9      	str	r1, [r7, #8]
 80176aa:	607a      	str	r2, [r7, #4]
  struct eth_addr *srcaddr = (struct eth_addr *)netif->hwaddr;
 80176ac:	68fb      	ldr	r3, [r7, #12]
 80176ae:	3326      	adds	r3, #38	; 0x26
 80176b0:	617b      	str	r3, [r7, #20]
  err_t result = ERR_MEM;
 80176b2:	23ff      	movs	r3, #255	; 0xff
 80176b4:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  int is_new_entry = 0;
 80176b8:	2300      	movs	r3, #0
 80176ba:	623b      	str	r3, [r7, #32]
  s16_t i_err;
  netif_addr_idx_t i;

  /* non-unicast address? */
  if (ip4_addr_isbroadcast(ipaddr, netif) ||
 80176bc:	68bb      	ldr	r3, [r7, #8]
 80176be:	681b      	ldr	r3, [r3, #0]
 80176c0:	68f9      	ldr	r1, [r7, #12]
 80176c2:	4618      	mov	r0, r3
 80176c4:	f000 fe34 	bl	8018330 <ip4_addr_isbroadcast_u32>
 80176c8:	4603      	mov	r3, r0
 80176ca:	2b00      	cmp	r3, #0
 80176cc:	d10c      	bne.n	80176e8 <etharp_query+0x48>
      ip4_addr_ismulticast(ipaddr) ||
 80176ce:	68bb      	ldr	r3, [r7, #8]
 80176d0:	681b      	ldr	r3, [r3, #0]
 80176d2:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
  if (ip4_addr_isbroadcast(ipaddr, netif) ||
 80176d6:	2be0      	cmp	r3, #224	; 0xe0
 80176d8:	d006      	beq.n	80176e8 <etharp_query+0x48>
      ip4_addr_ismulticast(ipaddr) ||
 80176da:	68bb      	ldr	r3, [r7, #8]
 80176dc:	2b00      	cmp	r3, #0
 80176de:	d003      	beq.n	80176e8 <etharp_query+0x48>
      ip4_addr_isany(ipaddr)) {
 80176e0:	68bb      	ldr	r3, [r7, #8]
 80176e2:	681b      	ldr	r3, [r3, #0]
 80176e4:	2b00      	cmp	r3, #0
 80176e6:	d102      	bne.n	80176ee <etharp_query+0x4e>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: will not add non-unicast IP address to ARP cache\n"));
    return ERR_ARG;
 80176e8:	f06f 030f 	mvn.w	r3, #15
 80176ec:	e101      	b.n	80178f2 <etharp_query+0x252>
  }

  /* find entry in ARP cache, ask to create entry if queueing packet */
  i_err = etharp_find_entry(ipaddr, ETHARP_FLAG_TRY_HARD, netif);
 80176ee:	68fa      	ldr	r2, [r7, #12]
 80176f0:	2101      	movs	r1, #1
 80176f2:	68b8      	ldr	r0, [r7, #8]
 80176f4:	f7ff fb60 	bl	8016db8 <etharp_find_entry>
 80176f8:	4603      	mov	r3, r0
 80176fa:	827b      	strh	r3, [r7, #18]

  /* could not find or create entry? */
  if (i_err < 0) {
 80176fc:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8017700:	2b00      	cmp	r3, #0
 8017702:	da02      	bge.n	801770a <etharp_query+0x6a>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: could not create ARP entry\n"));
    if (q) {
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: packet dropped\n"));
      ETHARP_STATS_INC(etharp.memerr);
    }
    return (err_t)i_err;
 8017704:	8a7b      	ldrh	r3, [r7, #18]
 8017706:	b25b      	sxtb	r3, r3
 8017708:	e0f3      	b.n	80178f2 <etharp_query+0x252>
  }
  LWIP_ASSERT("type overflow", (size_t)i_err < NETIF_ADDR_IDX_MAX);
 801770a:	8a7b      	ldrh	r3, [r7, #18]
 801770c:	2b7e      	cmp	r3, #126	; 0x7e
 801770e:	d906      	bls.n	801771e <etharp_query+0x7e>
 8017710:	4b7a      	ldr	r3, [pc, #488]	; (80178fc <etharp_query+0x25c>)
 8017712:	f240 32c1 	movw	r2, #961	; 0x3c1
 8017716:	497a      	ldr	r1, [pc, #488]	; (8017900 <etharp_query+0x260>)
 8017718:	487a      	ldr	r0, [pc, #488]	; (8017904 <etharp_query+0x264>)
 801771a:	f002 fa99 	bl	8019c50 <iprintf>
  i = (netif_addr_idx_t)i_err;
 801771e:	8a7b      	ldrh	r3, [r7, #18]
 8017720:	747b      	strb	r3, [r7, #17]

  /* mark a fresh entry as pending (we just sent a request) */
  if (arp_table[i].state == ETHARP_STATE_EMPTY) {
 8017722:	7c7a      	ldrb	r2, [r7, #17]
 8017724:	4978      	ldr	r1, [pc, #480]	; (8017908 <etharp_query+0x268>)
 8017726:	4613      	mov	r3, r2
 8017728:	005b      	lsls	r3, r3, #1
 801772a:	4413      	add	r3, r2
 801772c:	00db      	lsls	r3, r3, #3
 801772e:	440b      	add	r3, r1
 8017730:	3314      	adds	r3, #20
 8017732:	781b      	ldrb	r3, [r3, #0]
 8017734:	2b00      	cmp	r3, #0
 8017736:	d115      	bne.n	8017764 <etharp_query+0xc4>
    is_new_entry = 1;
 8017738:	2301      	movs	r3, #1
 801773a:	623b      	str	r3, [r7, #32]
    arp_table[i].state = ETHARP_STATE_PENDING;
 801773c:	7c7a      	ldrb	r2, [r7, #17]
 801773e:	4972      	ldr	r1, [pc, #456]	; (8017908 <etharp_query+0x268>)
 8017740:	4613      	mov	r3, r2
 8017742:	005b      	lsls	r3, r3, #1
 8017744:	4413      	add	r3, r2
 8017746:	00db      	lsls	r3, r3, #3
 8017748:	440b      	add	r3, r1
 801774a:	3314      	adds	r3, #20
 801774c:	2201      	movs	r2, #1
 801774e:	701a      	strb	r2, [r3, #0]
    /* record network interface for re-sending arp request in etharp_tmr */
    arp_table[i].netif = netif;
 8017750:	7c7a      	ldrb	r2, [r7, #17]
 8017752:	496d      	ldr	r1, [pc, #436]	; (8017908 <etharp_query+0x268>)
 8017754:	4613      	mov	r3, r2
 8017756:	005b      	lsls	r3, r3, #1
 8017758:	4413      	add	r3, r2
 801775a:	00db      	lsls	r3, r3, #3
 801775c:	440b      	add	r3, r1
 801775e:	3308      	adds	r3, #8
 8017760:	68fa      	ldr	r2, [r7, #12]
 8017762:	601a      	str	r2, [r3, #0]
  }

  /* { i is either a STABLE or (new or existing) PENDING entry } */
  LWIP_ASSERT("arp_table[i].state == PENDING or STABLE",
 8017764:	7c7a      	ldrb	r2, [r7, #17]
 8017766:	4968      	ldr	r1, [pc, #416]	; (8017908 <etharp_query+0x268>)
 8017768:	4613      	mov	r3, r2
 801776a:	005b      	lsls	r3, r3, #1
 801776c:	4413      	add	r3, r2
 801776e:	00db      	lsls	r3, r3, #3
 8017770:	440b      	add	r3, r1
 8017772:	3314      	adds	r3, #20
 8017774:	781b      	ldrb	r3, [r3, #0]
 8017776:	2b01      	cmp	r3, #1
 8017778:	d011      	beq.n	801779e <etharp_query+0xfe>
 801777a:	7c7a      	ldrb	r2, [r7, #17]
 801777c:	4962      	ldr	r1, [pc, #392]	; (8017908 <etharp_query+0x268>)
 801777e:	4613      	mov	r3, r2
 8017780:	005b      	lsls	r3, r3, #1
 8017782:	4413      	add	r3, r2
 8017784:	00db      	lsls	r3, r3, #3
 8017786:	440b      	add	r3, r1
 8017788:	3314      	adds	r3, #20
 801778a:	781b      	ldrb	r3, [r3, #0]
 801778c:	2b01      	cmp	r3, #1
 801778e:	d806      	bhi.n	801779e <etharp_query+0xfe>
 8017790:	4b5a      	ldr	r3, [pc, #360]	; (80178fc <etharp_query+0x25c>)
 8017792:	f240 32cd 	movw	r2, #973	; 0x3cd
 8017796:	495d      	ldr	r1, [pc, #372]	; (801790c <etharp_query+0x26c>)
 8017798:	485a      	ldr	r0, [pc, #360]	; (8017904 <etharp_query+0x264>)
 801779a:	f002 fa59 	bl	8019c50 <iprintf>
              ((arp_table[i].state == ETHARP_STATE_PENDING) ||
               (arp_table[i].state >= ETHARP_STATE_STABLE)));

  /* do we have a new entry? or an implicit query request? */
  if (is_new_entry || (q == NULL)) {
 801779e:	6a3b      	ldr	r3, [r7, #32]
 80177a0:	2b00      	cmp	r3, #0
 80177a2:	d102      	bne.n	80177aa <etharp_query+0x10a>
 80177a4:	687b      	ldr	r3, [r7, #4]
 80177a6:	2b00      	cmp	r3, #0
 80177a8:	d10c      	bne.n	80177c4 <etharp_query+0x124>
    /* try to resolve it; send out ARP request */
    result = etharp_request(netif, ipaddr);
 80177aa:	68b9      	ldr	r1, [r7, #8]
 80177ac:	68f8      	ldr	r0, [r7, #12]
 80177ae:	f000 f963 	bl	8017a78 <etharp_request>
 80177b2:	4603      	mov	r3, r0
 80177b4:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
      /* ARP request couldn't be sent */
      /* We don't re-send arp request in etharp_tmr, but we still queue packets,
         since this failure could be temporary, and the next packet calling
         etharp_query again could lead to sending the queued packets. */
    }
    if (q == NULL) {
 80177b8:	687b      	ldr	r3, [r7, #4]
 80177ba:	2b00      	cmp	r3, #0
 80177bc:	d102      	bne.n	80177c4 <etharp_query+0x124>
      return result;
 80177be:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 80177c2:	e096      	b.n	80178f2 <etharp_query+0x252>
    }
  }

  /* packet given? */
  LWIP_ASSERT("q != NULL", q != NULL);
 80177c4:	687b      	ldr	r3, [r7, #4]
 80177c6:	2b00      	cmp	r3, #0
 80177c8:	d106      	bne.n	80177d8 <etharp_query+0x138>
 80177ca:	4b4c      	ldr	r3, [pc, #304]	; (80178fc <etharp_query+0x25c>)
 80177cc:	f240 32e1 	movw	r2, #993	; 0x3e1
 80177d0:	494f      	ldr	r1, [pc, #316]	; (8017910 <etharp_query+0x270>)
 80177d2:	484c      	ldr	r0, [pc, #304]	; (8017904 <etharp_query+0x264>)
 80177d4:	f002 fa3c 	bl	8019c50 <iprintf>
  /* stable entry? */
  if (arp_table[i].state >= ETHARP_STATE_STABLE) {
 80177d8:	7c7a      	ldrb	r2, [r7, #17]
 80177da:	494b      	ldr	r1, [pc, #300]	; (8017908 <etharp_query+0x268>)
 80177dc:	4613      	mov	r3, r2
 80177de:	005b      	lsls	r3, r3, #1
 80177e0:	4413      	add	r3, r2
 80177e2:	00db      	lsls	r3, r3, #3
 80177e4:	440b      	add	r3, r1
 80177e6:	3314      	adds	r3, #20
 80177e8:	781b      	ldrb	r3, [r3, #0]
 80177ea:	2b01      	cmp	r3, #1
 80177ec:	d917      	bls.n	801781e <etharp_query+0x17e>
    /* we have a valid IP->Ethernet address mapping */
    ETHARP_SET_ADDRHINT(netif, i);
 80177ee:	4a49      	ldr	r2, [pc, #292]	; (8017914 <etharp_query+0x274>)
 80177f0:	7c7b      	ldrb	r3, [r7, #17]
 80177f2:	7013      	strb	r3, [r2, #0]
    /* send the packet */
    result = ethernet_output(netif, q, srcaddr, &(arp_table[i].ethaddr), ETHTYPE_IP);
 80177f4:	7c7a      	ldrb	r2, [r7, #17]
 80177f6:	4613      	mov	r3, r2
 80177f8:	005b      	lsls	r3, r3, #1
 80177fa:	4413      	add	r3, r2
 80177fc:	00db      	lsls	r3, r3, #3
 80177fe:	3308      	adds	r3, #8
 8017800:	4a41      	ldr	r2, [pc, #260]	; (8017908 <etharp_query+0x268>)
 8017802:	4413      	add	r3, r2
 8017804:	3304      	adds	r3, #4
 8017806:	f44f 6200 	mov.w	r2, #2048	; 0x800
 801780a:	9200      	str	r2, [sp, #0]
 801780c:	697a      	ldr	r2, [r7, #20]
 801780e:	6879      	ldr	r1, [r7, #4]
 8017810:	68f8      	ldr	r0, [r7, #12]
 8017812:	f001 fc9b 	bl	801914c <ethernet_output>
 8017816:	4603      	mov	r3, r0
 8017818:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 801781c:	e067      	b.n	80178ee <etharp_query+0x24e>
    /* pending entry? (either just created or already pending */
  } else if (arp_table[i].state == ETHARP_STATE_PENDING) {
 801781e:	7c7a      	ldrb	r2, [r7, #17]
 8017820:	4939      	ldr	r1, [pc, #228]	; (8017908 <etharp_query+0x268>)
 8017822:	4613      	mov	r3, r2
 8017824:	005b      	lsls	r3, r3, #1
 8017826:	4413      	add	r3, r2
 8017828:	00db      	lsls	r3, r3, #3
 801782a:	440b      	add	r3, r1
 801782c:	3314      	adds	r3, #20
 801782e:	781b      	ldrb	r3, [r3, #0]
 8017830:	2b01      	cmp	r3, #1
 8017832:	d15c      	bne.n	80178ee <etharp_query+0x24e>
    /* entry is still pending, queue the given packet 'q' */
    struct pbuf *p;
    int copy_needed = 0;
 8017834:	2300      	movs	r3, #0
 8017836:	61bb      	str	r3, [r7, #24]
    /* IF q includes a pbuf that must be copied, copy the whole chain into a
     * new PBUF_RAM. See the definition of PBUF_NEEDS_COPY for details. */
    p = q;
 8017838:	687b      	ldr	r3, [r7, #4]
 801783a:	61fb      	str	r3, [r7, #28]
    while (p) {
 801783c:	e01c      	b.n	8017878 <etharp_query+0x1d8>
      LWIP_ASSERT("no packet queues allowed!", (p->len != p->tot_len) || (p->next == 0));
 801783e:	69fb      	ldr	r3, [r7, #28]
 8017840:	895a      	ldrh	r2, [r3, #10]
 8017842:	69fb      	ldr	r3, [r7, #28]
 8017844:	891b      	ldrh	r3, [r3, #8]
 8017846:	429a      	cmp	r2, r3
 8017848:	d10a      	bne.n	8017860 <etharp_query+0x1c0>
 801784a:	69fb      	ldr	r3, [r7, #28]
 801784c:	681b      	ldr	r3, [r3, #0]
 801784e:	2b00      	cmp	r3, #0
 8017850:	d006      	beq.n	8017860 <etharp_query+0x1c0>
 8017852:	4b2a      	ldr	r3, [pc, #168]	; (80178fc <etharp_query+0x25c>)
 8017854:	f240 32f1 	movw	r2, #1009	; 0x3f1
 8017858:	492f      	ldr	r1, [pc, #188]	; (8017918 <etharp_query+0x278>)
 801785a:	482a      	ldr	r0, [pc, #168]	; (8017904 <etharp_query+0x264>)
 801785c:	f002 f9f8 	bl	8019c50 <iprintf>
      if (PBUF_NEEDS_COPY(p)) {
 8017860:	69fb      	ldr	r3, [r7, #28]
 8017862:	7b1b      	ldrb	r3, [r3, #12]
 8017864:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8017868:	2b00      	cmp	r3, #0
 801786a:	d002      	beq.n	8017872 <etharp_query+0x1d2>
        copy_needed = 1;
 801786c:	2301      	movs	r3, #1
 801786e:	61bb      	str	r3, [r7, #24]
        break;
 8017870:	e005      	b.n	801787e <etharp_query+0x1de>
      }
      p = p->next;
 8017872:	69fb      	ldr	r3, [r7, #28]
 8017874:	681b      	ldr	r3, [r3, #0]
 8017876:	61fb      	str	r3, [r7, #28]
    while (p) {
 8017878:	69fb      	ldr	r3, [r7, #28]
 801787a:	2b00      	cmp	r3, #0
 801787c:	d1df      	bne.n	801783e <etharp_query+0x19e>
    }
    if (copy_needed) {
 801787e:	69bb      	ldr	r3, [r7, #24]
 8017880:	2b00      	cmp	r3, #0
 8017882:	d007      	beq.n	8017894 <etharp_query+0x1f4>
      /* copy the whole packet into new pbufs */
      p = pbuf_clone(PBUF_LINK, PBUF_RAM, q);
 8017884:	687a      	ldr	r2, [r7, #4]
 8017886:	f44f 7120 	mov.w	r1, #640	; 0x280
 801788a:	200e      	movs	r0, #14
 801788c:	f7f9 fd66 	bl	801135c <pbuf_clone>
 8017890:	61f8      	str	r0, [r7, #28]
 8017892:	e004      	b.n	801789e <etharp_query+0x1fe>
    } else {
      /* referencing the old pbuf is enough */
      p = q;
 8017894:	687b      	ldr	r3, [r7, #4]
 8017896:	61fb      	str	r3, [r7, #28]
      pbuf_ref(p);
 8017898:	69f8      	ldr	r0, [r7, #28]
 801789a:	f7f9 fba3 	bl	8010fe4 <pbuf_ref>
    }
    /* packet could be taken over? */
    if (p != NULL) {
 801789e:	69fb      	ldr	r3, [r7, #28]
 80178a0:	2b00      	cmp	r3, #0
 80178a2:	d021      	beq.n	80178e8 <etharp_query+0x248>
        LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: could not queue a copy of PBUF_REF packet %p (out of memory)\n", (void *)q));
        result = ERR_MEM;
      }
#else /* ARP_QUEUEING */
      /* always queue one packet per ARP request only, freeing a previously queued packet */
      if (arp_table[i].q != NULL) {
 80178a4:	7c7a      	ldrb	r2, [r7, #17]
 80178a6:	4918      	ldr	r1, [pc, #96]	; (8017908 <etharp_query+0x268>)
 80178a8:	4613      	mov	r3, r2
 80178aa:	005b      	lsls	r3, r3, #1
 80178ac:	4413      	add	r3, r2
 80178ae:	00db      	lsls	r3, r3, #3
 80178b0:	440b      	add	r3, r1
 80178b2:	681b      	ldr	r3, [r3, #0]
 80178b4:	2b00      	cmp	r3, #0
 80178b6:	d00a      	beq.n	80178ce <etharp_query+0x22e>
        LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: dropped previously queued packet %p for ARP entry %"U16_F"\n", (void *)q, (u16_t)i));
        pbuf_free(arp_table[i].q);
 80178b8:	7c7a      	ldrb	r2, [r7, #17]
 80178ba:	4913      	ldr	r1, [pc, #76]	; (8017908 <etharp_query+0x268>)
 80178bc:	4613      	mov	r3, r2
 80178be:	005b      	lsls	r3, r3, #1
 80178c0:	4413      	add	r3, r2
 80178c2:	00db      	lsls	r3, r3, #3
 80178c4:	440b      	add	r3, r1
 80178c6:	681b      	ldr	r3, [r3, #0]
 80178c8:	4618      	mov	r0, r3
 80178ca:	f7f9 faeb 	bl	8010ea4 <pbuf_free>
      }
      arp_table[i].q = p;
 80178ce:	7c7a      	ldrb	r2, [r7, #17]
 80178d0:	490d      	ldr	r1, [pc, #52]	; (8017908 <etharp_query+0x268>)
 80178d2:	4613      	mov	r3, r2
 80178d4:	005b      	lsls	r3, r3, #1
 80178d6:	4413      	add	r3, r2
 80178d8:	00db      	lsls	r3, r3, #3
 80178da:	440b      	add	r3, r1
 80178dc:	69fa      	ldr	r2, [r7, #28]
 80178de:	601a      	str	r2, [r3, #0]
      result = ERR_OK;
 80178e0:	2300      	movs	r3, #0
 80178e2:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 80178e6:	e002      	b.n	80178ee <etharp_query+0x24e>
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: queued packet %p on ARP entry %"U16_F"\n", (void *)q, (u16_t)i));
#endif /* ARP_QUEUEING */
    } else {
      ETHARP_STATS_INC(etharp.memerr);
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: could not queue a copy of PBUF_REF packet %p (out of memory)\n", (void *)q));
      result = ERR_MEM;
 80178e8:	23ff      	movs	r3, #255	; 0xff
 80178ea:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    }
  }
  return result;
 80178ee:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
}
 80178f2:	4618      	mov	r0, r3
 80178f4:	3728      	adds	r7, #40	; 0x28
 80178f6:	46bd      	mov	sp, r7
 80178f8:	bd80      	pop	{r7, pc}
 80178fa:	bf00      	nop
 80178fc:	0801e864 	.word	0x0801e864
 8017900:	0801ea10 	.word	0x0801ea10
 8017904:	0801e8dc 	.word	0x0801e8dc
 8017908:	20007138 	.word	0x20007138
 801790c:	0801ea20 	.word	0x0801ea20
 8017910:	0801ea04 	.word	0x0801ea04
 8017914:	20007228 	.word	0x20007228
 8017918:	0801ea48 	.word	0x0801ea48

0801791c <etharp_raw>:
etharp_raw(struct netif *netif, const struct eth_addr *ethsrc_addr,
           const struct eth_addr *ethdst_addr,
           const struct eth_addr *hwsrc_addr, const ip4_addr_t *ipsrc_addr,
           const struct eth_addr *hwdst_addr, const ip4_addr_t *ipdst_addr,
           const u16_t opcode)
{
 801791c:	b580      	push	{r7, lr}
 801791e:	b08a      	sub	sp, #40	; 0x28
 8017920:	af02      	add	r7, sp, #8
 8017922:	60f8      	str	r0, [r7, #12]
 8017924:	60b9      	str	r1, [r7, #8]
 8017926:	607a      	str	r2, [r7, #4]
 8017928:	603b      	str	r3, [r7, #0]
  struct pbuf *p;
  err_t result = ERR_OK;
 801792a:	2300      	movs	r3, #0
 801792c:	77fb      	strb	r3, [r7, #31]
  struct etharp_hdr *hdr;

  LWIP_ASSERT("netif != NULL", netif != NULL);
 801792e:	68fb      	ldr	r3, [r7, #12]
 8017930:	2b00      	cmp	r3, #0
 8017932:	d106      	bne.n	8017942 <etharp_raw+0x26>
 8017934:	4b3a      	ldr	r3, [pc, #232]	; (8017a20 <etharp_raw+0x104>)
 8017936:	f240 4257 	movw	r2, #1111	; 0x457
 801793a:	493a      	ldr	r1, [pc, #232]	; (8017a24 <etharp_raw+0x108>)
 801793c:	483a      	ldr	r0, [pc, #232]	; (8017a28 <etharp_raw+0x10c>)
 801793e:	f002 f987 	bl	8019c50 <iprintf>

  /* allocate a pbuf for the outgoing ARP request packet */
  p = pbuf_alloc(PBUF_LINK, SIZEOF_ETHARP_HDR, PBUF_RAM);
 8017942:	f44f 7220 	mov.w	r2, #640	; 0x280
 8017946:	211c      	movs	r1, #28
 8017948:	200e      	movs	r0, #14
 801794a:	f7f8 ffc7 	bl	80108dc <pbuf_alloc>
 801794e:	61b8      	str	r0, [r7, #24]
  /* could allocate a pbuf for an ARP request? */
  if (p == NULL) {
 8017950:	69bb      	ldr	r3, [r7, #24]
 8017952:	2b00      	cmp	r3, #0
 8017954:	d102      	bne.n	801795c <etharp_raw+0x40>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS,
                ("etharp_raw: could not allocate pbuf for ARP request.\n"));
    ETHARP_STATS_INC(etharp.memerr);
    return ERR_MEM;
 8017956:	f04f 33ff 	mov.w	r3, #4294967295
 801795a:	e05d      	b.n	8017a18 <etharp_raw+0xfc>
  }
  LWIP_ASSERT("check that first pbuf can hold struct etharp_hdr",
 801795c:	69bb      	ldr	r3, [r7, #24]
 801795e:	895b      	ldrh	r3, [r3, #10]
 8017960:	2b1b      	cmp	r3, #27
 8017962:	d806      	bhi.n	8017972 <etharp_raw+0x56>
 8017964:	4b2e      	ldr	r3, [pc, #184]	; (8017a20 <etharp_raw+0x104>)
 8017966:	f240 4262 	movw	r2, #1122	; 0x462
 801796a:	4930      	ldr	r1, [pc, #192]	; (8017a2c <etharp_raw+0x110>)
 801796c:	482e      	ldr	r0, [pc, #184]	; (8017a28 <etharp_raw+0x10c>)
 801796e:	f002 f96f 	bl	8019c50 <iprintf>
              (p->len >= SIZEOF_ETHARP_HDR));

  hdr = (struct etharp_hdr *)p->payload;
 8017972:	69bb      	ldr	r3, [r7, #24]
 8017974:	685b      	ldr	r3, [r3, #4]
 8017976:	617b      	str	r3, [r7, #20]
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_raw: sending raw ARP packet.\n"));
  hdr->opcode = lwip_htons(opcode);
 8017978:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 801797a:	4618      	mov	r0, r3
 801797c:	f7f7 feae 	bl	800f6dc <lwip_htons>
 8017980:	4603      	mov	r3, r0
 8017982:	461a      	mov	r2, r3
 8017984:	697b      	ldr	r3, [r7, #20]
 8017986:	80da      	strh	r2, [r3, #6]

  LWIP_ASSERT("netif->hwaddr_len must be the same as ETH_HWADDR_LEN for etharp!",
 8017988:	68fb      	ldr	r3, [r7, #12]
 801798a:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 801798e:	2b06      	cmp	r3, #6
 8017990:	d006      	beq.n	80179a0 <etharp_raw+0x84>
 8017992:	4b23      	ldr	r3, [pc, #140]	; (8017a20 <etharp_raw+0x104>)
 8017994:	f240 4269 	movw	r2, #1129	; 0x469
 8017998:	4925      	ldr	r1, [pc, #148]	; (8017a30 <etharp_raw+0x114>)
 801799a:	4823      	ldr	r0, [pc, #140]	; (8017a28 <etharp_raw+0x10c>)
 801799c:	f002 f958 	bl	8019c50 <iprintf>
              (netif->hwaddr_len == ETH_HWADDR_LEN));

  /* Write the ARP MAC-Addresses */
  SMEMCPY(&hdr->shwaddr, hwsrc_addr, ETH_HWADDR_LEN);
 80179a0:	697b      	ldr	r3, [r7, #20]
 80179a2:	3308      	adds	r3, #8
 80179a4:	2206      	movs	r2, #6
 80179a6:	6839      	ldr	r1, [r7, #0]
 80179a8:	4618      	mov	r0, r3
 80179aa:	f002 fb20 	bl	8019fee <memcpy>
  SMEMCPY(&hdr->dhwaddr, hwdst_addr, ETH_HWADDR_LEN);
 80179ae:	697b      	ldr	r3, [r7, #20]
 80179b0:	3312      	adds	r3, #18
 80179b2:	2206      	movs	r2, #6
 80179b4:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80179b6:	4618      	mov	r0, r3
 80179b8:	f002 fb19 	bl	8019fee <memcpy>
  /* Copy struct ip4_addr_wordaligned to aligned ip4_addr, to support compilers without
   * structure packing. */
  IPADDR_WORDALIGNED_COPY_FROM_IP4_ADDR_T(&hdr->sipaddr, ipsrc_addr);
 80179bc:	697b      	ldr	r3, [r7, #20]
 80179be:	330e      	adds	r3, #14
 80179c0:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80179c2:	6812      	ldr	r2, [r2, #0]
 80179c4:	601a      	str	r2, [r3, #0]
  IPADDR_WORDALIGNED_COPY_FROM_IP4_ADDR_T(&hdr->dipaddr, ipdst_addr);
 80179c6:	697b      	ldr	r3, [r7, #20]
 80179c8:	3318      	adds	r3, #24
 80179ca:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80179cc:	6812      	ldr	r2, [r2, #0]
 80179ce:	601a      	str	r2, [r3, #0]

  hdr->hwtype = PP_HTONS(LWIP_IANA_HWTYPE_ETHERNET);
 80179d0:	697b      	ldr	r3, [r7, #20]
 80179d2:	2200      	movs	r2, #0
 80179d4:	701a      	strb	r2, [r3, #0]
 80179d6:	2200      	movs	r2, #0
 80179d8:	f042 0201 	orr.w	r2, r2, #1
 80179dc:	705a      	strb	r2, [r3, #1]
  hdr->proto = PP_HTONS(ETHTYPE_IP);
 80179de:	697b      	ldr	r3, [r7, #20]
 80179e0:	2200      	movs	r2, #0
 80179e2:	f042 0208 	orr.w	r2, r2, #8
 80179e6:	709a      	strb	r2, [r3, #2]
 80179e8:	2200      	movs	r2, #0
 80179ea:	70da      	strb	r2, [r3, #3]
  /* set hwlen and protolen */
  hdr->hwlen = ETH_HWADDR_LEN;
 80179ec:	697b      	ldr	r3, [r7, #20]
 80179ee:	2206      	movs	r2, #6
 80179f0:	711a      	strb	r2, [r3, #4]
  hdr->protolen = sizeof(ip4_addr_t);
 80179f2:	697b      	ldr	r3, [r7, #20]
 80179f4:	2204      	movs	r2, #4
 80179f6:	715a      	strb	r2, [r3, #5]
  if (ip4_addr_islinklocal(ipsrc_addr)) {
    ethernet_output(netif, p, ethsrc_addr, &ethbroadcast, ETHTYPE_ARP);
  } else
#endif /* LWIP_AUTOIP */
  {
    ethernet_output(netif, p, ethsrc_addr, ethdst_addr, ETHTYPE_ARP);
 80179f8:	f640 0306 	movw	r3, #2054	; 0x806
 80179fc:	9300      	str	r3, [sp, #0]
 80179fe:	687b      	ldr	r3, [r7, #4]
 8017a00:	68ba      	ldr	r2, [r7, #8]
 8017a02:	69b9      	ldr	r1, [r7, #24]
 8017a04:	68f8      	ldr	r0, [r7, #12]
 8017a06:	f001 fba1 	bl	801914c <ethernet_output>
  }

  ETHARP_STATS_INC(etharp.xmit);
  /* free ARP query packet */
  pbuf_free(p);
 8017a0a:	69b8      	ldr	r0, [r7, #24]
 8017a0c:	f7f9 fa4a 	bl	8010ea4 <pbuf_free>
  p = NULL;
 8017a10:	2300      	movs	r3, #0
 8017a12:	61bb      	str	r3, [r7, #24]
  /* could not allocate pbuf for ARP request */

  return result;
 8017a14:	f997 301f 	ldrsb.w	r3, [r7, #31]
}
 8017a18:	4618      	mov	r0, r3
 8017a1a:	3720      	adds	r7, #32
 8017a1c:	46bd      	mov	sp, r7
 8017a1e:	bd80      	pop	{r7, pc}
 8017a20:	0801e864 	.word	0x0801e864
 8017a24:	0801e9b4 	.word	0x0801e9b4
 8017a28:	0801e8dc 	.word	0x0801e8dc
 8017a2c:	0801ea64 	.word	0x0801ea64
 8017a30:	0801ea98 	.word	0x0801ea98

08017a34 <etharp_request_dst>:
 *         ERR_MEM if the ARP packet couldn't be allocated
 *         any other err_t on failure
 */
static err_t
etharp_request_dst(struct netif *netif, const ip4_addr_t *ipaddr, const struct eth_addr *hw_dst_addr)
{
 8017a34:	b580      	push	{r7, lr}
 8017a36:	b088      	sub	sp, #32
 8017a38:	af04      	add	r7, sp, #16
 8017a3a:	60f8      	str	r0, [r7, #12]
 8017a3c:	60b9      	str	r1, [r7, #8]
 8017a3e:	607a      	str	r2, [r7, #4]
  return etharp_raw(netif, (struct eth_addr *)netif->hwaddr, hw_dst_addr,
 8017a40:	68fb      	ldr	r3, [r7, #12]
 8017a42:	f103 0126 	add.w	r1, r3, #38	; 0x26
                    (struct eth_addr *)netif->hwaddr, netif_ip4_addr(netif), &ethzero,
 8017a46:	68fb      	ldr	r3, [r7, #12]
 8017a48:	f103 0026 	add.w	r0, r3, #38	; 0x26
 8017a4c:	68fb      	ldr	r3, [r7, #12]
 8017a4e:	3304      	adds	r3, #4
  return etharp_raw(netif, (struct eth_addr *)netif->hwaddr, hw_dst_addr,
 8017a50:	2201      	movs	r2, #1
 8017a52:	9203      	str	r2, [sp, #12]
 8017a54:	68ba      	ldr	r2, [r7, #8]
 8017a56:	9202      	str	r2, [sp, #8]
 8017a58:	4a06      	ldr	r2, [pc, #24]	; (8017a74 <etharp_request_dst+0x40>)
 8017a5a:	9201      	str	r2, [sp, #4]
 8017a5c:	9300      	str	r3, [sp, #0]
 8017a5e:	4603      	mov	r3, r0
 8017a60:	687a      	ldr	r2, [r7, #4]
 8017a62:	68f8      	ldr	r0, [r7, #12]
 8017a64:	f7ff ff5a 	bl	801791c <etharp_raw>
 8017a68:	4603      	mov	r3, r0
                    ipaddr, ARP_REQUEST);
}
 8017a6a:	4618      	mov	r0, r3
 8017a6c:	3710      	adds	r7, #16
 8017a6e:	46bd      	mov	sp, r7
 8017a70:	bd80      	pop	{r7, pc}
 8017a72:	bf00      	nop
 8017a74:	0801f048 	.word	0x0801f048

08017a78 <etharp_request>:
 *         ERR_MEM if the ARP packet couldn't be allocated
 *         any other err_t on failure
 */
err_t
etharp_request(struct netif *netif, const ip4_addr_t *ipaddr)
{
 8017a78:	b580      	push	{r7, lr}
 8017a7a:	b082      	sub	sp, #8
 8017a7c:	af00      	add	r7, sp, #0
 8017a7e:	6078      	str	r0, [r7, #4]
 8017a80:	6039      	str	r1, [r7, #0]
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_request: sending ARP request.\n"));
  return etharp_request_dst(netif, ipaddr, &ethbroadcast);
 8017a82:	4a05      	ldr	r2, [pc, #20]	; (8017a98 <etharp_request+0x20>)
 8017a84:	6839      	ldr	r1, [r7, #0]
 8017a86:	6878      	ldr	r0, [r7, #4]
 8017a88:	f7ff ffd4 	bl	8017a34 <etharp_request_dst>
 8017a8c:	4603      	mov	r3, r0
}
 8017a8e:	4618      	mov	r0, r3
 8017a90:	3708      	adds	r7, #8
 8017a92:	46bd      	mov	sp, r7
 8017a94:	bd80      	pop	{r7, pc}
 8017a96:	bf00      	nop
 8017a98:	0801f040 	.word	0x0801f040

08017a9c <icmp_input>:
 * @param p the icmp echo request packet, p->payload pointing to the icmp header
 * @param inp the netif on which this packet was received
 */
void
icmp_input(struct pbuf *p, struct netif *inp)
{
 8017a9c:	b580      	push	{r7, lr}
 8017a9e:	b08e      	sub	sp, #56	; 0x38
 8017aa0:	af04      	add	r7, sp, #16
 8017aa2:	6078      	str	r0, [r7, #4]
 8017aa4:	6039      	str	r1, [r7, #0]
  const ip4_addr_t *src;

  ICMP_STATS_INC(icmp.recv);
  MIB2_STATS_INC(mib2.icmpinmsgs);

  iphdr_in = ip4_current_header();
 8017aa6:	4b87      	ldr	r3, [pc, #540]	; (8017cc4 <icmp_input+0x228>)
 8017aa8:	689b      	ldr	r3, [r3, #8]
 8017aaa:	627b      	str	r3, [r7, #36]	; 0x24
  hlen = IPH_HL_BYTES(iphdr_in);
 8017aac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8017aae:	781b      	ldrb	r3, [r3, #0]
 8017ab0:	f003 030f 	and.w	r3, r3, #15
 8017ab4:	b2db      	uxtb	r3, r3
 8017ab6:	009b      	lsls	r3, r3, #2
 8017ab8:	b2db      	uxtb	r3, r3
 8017aba:	847b      	strh	r3, [r7, #34]	; 0x22
  if (hlen < IP_HLEN) {
 8017abc:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8017abe:	2b13      	cmp	r3, #19
 8017ac0:	f240 80e8 	bls.w	8017c94 <icmp_input+0x1f8>
    LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: short IP header (%"S16_F" bytes) received\n", hlen));
    goto lenerr;
  }
  if (p->len < sizeof(u16_t) * 2) {
 8017ac4:	687b      	ldr	r3, [r7, #4]
 8017ac6:	895b      	ldrh	r3, [r3, #10]
 8017ac8:	2b03      	cmp	r3, #3
 8017aca:	f240 80e5 	bls.w	8017c98 <icmp_input+0x1fc>
    LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: short ICMP (%"U16_F" bytes) received\n", p->tot_len));
    goto lenerr;
  }

  type = *((u8_t *)p->payload);
 8017ace:	687b      	ldr	r3, [r7, #4]
 8017ad0:	685b      	ldr	r3, [r3, #4]
 8017ad2:	781b      	ldrb	r3, [r3, #0]
 8017ad4:	f887 3021 	strb.w	r3, [r7, #33]	; 0x21
#ifdef LWIP_DEBUG
  code = *(((u8_t *)p->payload) + 1);
  /* if debug is enabled but debug statement below is somehow disabled: */
  LWIP_UNUSED_ARG(code);
#endif /* LWIP_DEBUG */
  switch (type) {
 8017ad8:	f897 3021 	ldrb.w	r3, [r7, #33]	; 0x21
 8017adc:	2b00      	cmp	r3, #0
 8017ade:	f000 80d2 	beq.w	8017c86 <icmp_input+0x1ea>
 8017ae2:	2b08      	cmp	r3, #8
 8017ae4:	f040 80d2 	bne.w	8017c8c <icmp_input+0x1f0>
         (as obviously, an echo request has been sent, too). */
      MIB2_STATS_INC(mib2.icmpinechoreps);
      break;
    case ICMP_ECHO:
      MIB2_STATS_INC(mib2.icmpinechos);
      src = ip4_current_dest_addr();
 8017ae8:	4b77      	ldr	r3, [pc, #476]	; (8017cc8 <icmp_input+0x22c>)
 8017aea:	61fb      	str	r3, [r7, #28]
      /* multicast destination address? */
      if (ip4_addr_ismulticast(ip4_current_dest_addr())) {
 8017aec:	4b75      	ldr	r3, [pc, #468]	; (8017cc4 <icmp_input+0x228>)
 8017aee:	695b      	ldr	r3, [r3, #20]
 8017af0:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8017af4:	2be0      	cmp	r3, #224	; 0xe0
 8017af6:	f000 80d6 	beq.w	8017ca6 <icmp_input+0x20a>
        LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: Not echoing to multicast pings\n"));
        goto icmperr;
#endif /* LWIP_MULTICAST_PING */
      }
      /* broadcast destination address? */
      if (ip4_addr_isbroadcast(ip4_current_dest_addr(), ip_current_netif())) {
 8017afa:	4b72      	ldr	r3, [pc, #456]	; (8017cc4 <icmp_input+0x228>)
 8017afc:	695b      	ldr	r3, [r3, #20]
 8017afe:	4a71      	ldr	r2, [pc, #452]	; (8017cc4 <icmp_input+0x228>)
 8017b00:	6812      	ldr	r2, [r2, #0]
 8017b02:	4611      	mov	r1, r2
 8017b04:	4618      	mov	r0, r3
 8017b06:	f000 fc13 	bl	8018330 <ip4_addr_isbroadcast_u32>
 8017b0a:	4603      	mov	r3, r0
 8017b0c:	2b00      	cmp	r3, #0
 8017b0e:	f040 80cc 	bne.w	8017caa <icmp_input+0x20e>
        LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: Not echoing to broadcast pings\n"));
        goto icmperr;
#endif /* LWIP_BROADCAST_PING */
      }
      LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: ping\n"));
      if (p->tot_len < sizeof(struct icmp_echo_hdr)) {
 8017b12:	687b      	ldr	r3, [r7, #4]
 8017b14:	891b      	ldrh	r3, [r3, #8]
 8017b16:	2b07      	cmp	r3, #7
 8017b18:	f240 80c0 	bls.w	8017c9c <icmp_input+0x200>
        LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: bad ICMP echo received\n"));
        goto lenerr;
      }
#if CHECKSUM_CHECK_ICMP
      IF__NETIF_CHECKSUM_ENABLED(inp, NETIF_CHECKSUM_CHECK_ICMP) {
        if (inet_chksum_pbuf(p) != 0) {
 8017b1c:	6878      	ldr	r0, [r7, #4]
 8017b1e:	f7f7 fe7a 	bl	800f816 <inet_chksum_pbuf>
 8017b22:	4603      	mov	r3, r0
 8017b24:	2b00      	cmp	r3, #0
 8017b26:	d003      	beq.n	8017b30 <icmp_input+0x94>
          LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: checksum failed for received ICMP echo\n"));
          pbuf_free(p);
 8017b28:	6878      	ldr	r0, [r7, #4]
 8017b2a:	f7f9 f9bb 	bl	8010ea4 <pbuf_free>
          ICMP_STATS_INC(icmp.chkerr);
          MIB2_STATS_INC(mib2.icmpinerrors);
          return;
 8017b2e:	e0c5      	b.n	8017cbc <icmp_input+0x220>
        }
      }
#endif
#if LWIP_ICMP_ECHO_CHECK_INPUT_PBUF_LEN
      if (pbuf_add_header(p, hlen + PBUF_LINK_HLEN + PBUF_LINK_ENCAPSULATION_HLEN)) {
 8017b30:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8017b32:	330e      	adds	r3, #14
 8017b34:	4619      	mov	r1, r3
 8017b36:	6878      	ldr	r0, [r7, #4]
 8017b38:	f7f9 f91e 	bl	8010d78 <pbuf_add_header>
 8017b3c:	4603      	mov	r3, r0
 8017b3e:	2b00      	cmp	r3, #0
 8017b40:	d04b      	beq.n	8017bda <icmp_input+0x13e>
        /* p is not big enough to contain link headers
         * allocate a new one and copy p into it
         */
        struct pbuf *r;
        u16_t alloc_len = (u16_t)(p->tot_len + hlen);
 8017b42:	687b      	ldr	r3, [r7, #4]
 8017b44:	891a      	ldrh	r2, [r3, #8]
 8017b46:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8017b48:	4413      	add	r3, r2
 8017b4a:	837b      	strh	r3, [r7, #26]
        if (alloc_len < p->tot_len) {
 8017b4c:	687b      	ldr	r3, [r7, #4]
 8017b4e:	891b      	ldrh	r3, [r3, #8]
 8017b50:	8b7a      	ldrh	r2, [r7, #26]
 8017b52:	429a      	cmp	r2, r3
 8017b54:	f0c0 80ab 	bcc.w	8017cae <icmp_input+0x212>
          LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: allocating new pbuf failed (tot_len overflow)\n"));
          goto icmperr;
        }
        /* allocate new packet buffer with space for link headers */
        r = pbuf_alloc(PBUF_LINK, alloc_len, PBUF_RAM);
 8017b58:	8b7b      	ldrh	r3, [r7, #26]
 8017b5a:	f44f 7220 	mov.w	r2, #640	; 0x280
 8017b5e:	4619      	mov	r1, r3
 8017b60:	200e      	movs	r0, #14
 8017b62:	f7f8 febb 	bl	80108dc <pbuf_alloc>
 8017b66:	6178      	str	r0, [r7, #20]
        if (r == NULL) {
 8017b68:	697b      	ldr	r3, [r7, #20]
 8017b6a:	2b00      	cmp	r3, #0
 8017b6c:	f000 80a1 	beq.w	8017cb2 <icmp_input+0x216>
          LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: allocating new pbuf failed\n"));
          goto icmperr;
        }
        if (r->len < hlen + sizeof(struct icmp_echo_hdr)) {
 8017b70:	697b      	ldr	r3, [r7, #20]
 8017b72:	895b      	ldrh	r3, [r3, #10]
 8017b74:	461a      	mov	r2, r3
 8017b76:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8017b78:	3308      	adds	r3, #8
 8017b7a:	429a      	cmp	r2, r3
 8017b7c:	d203      	bcs.n	8017b86 <icmp_input+0xea>
          LWIP_DEBUGF(ICMP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("first pbuf cannot hold the ICMP header"));
          pbuf_free(r);
 8017b7e:	6978      	ldr	r0, [r7, #20]
 8017b80:	f7f9 f990 	bl	8010ea4 <pbuf_free>
          goto icmperr;
 8017b84:	e096      	b.n	8017cb4 <icmp_input+0x218>
        }
        /* copy the ip header */
        MEMCPY(r->payload, iphdr_in, hlen);
 8017b86:	697b      	ldr	r3, [r7, #20]
 8017b88:	685b      	ldr	r3, [r3, #4]
 8017b8a:	8c7a      	ldrh	r2, [r7, #34]	; 0x22
 8017b8c:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8017b8e:	4618      	mov	r0, r3
 8017b90:	f002 fa2d 	bl	8019fee <memcpy>
        /* switch r->payload back to icmp header (cannot fail) */
        if (pbuf_remove_header(r, hlen)) {
 8017b94:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8017b96:	4619      	mov	r1, r3
 8017b98:	6978      	ldr	r0, [r7, #20]
 8017b9a:	f7f9 f8fd 	bl	8010d98 <pbuf_remove_header>
 8017b9e:	4603      	mov	r3, r0
 8017ba0:	2b00      	cmp	r3, #0
 8017ba2:	d009      	beq.n	8017bb8 <icmp_input+0x11c>
          LWIP_ASSERT("icmp_input: moving r->payload to icmp header failed\n", 0);
 8017ba4:	4b49      	ldr	r3, [pc, #292]	; (8017ccc <icmp_input+0x230>)
 8017ba6:	22b6      	movs	r2, #182	; 0xb6
 8017ba8:	4949      	ldr	r1, [pc, #292]	; (8017cd0 <icmp_input+0x234>)
 8017baa:	484a      	ldr	r0, [pc, #296]	; (8017cd4 <icmp_input+0x238>)
 8017bac:	f002 f850 	bl	8019c50 <iprintf>
          pbuf_free(r);
 8017bb0:	6978      	ldr	r0, [r7, #20]
 8017bb2:	f7f9 f977 	bl	8010ea4 <pbuf_free>
          goto icmperr;
 8017bb6:	e07d      	b.n	8017cb4 <icmp_input+0x218>
        }
        /* copy the rest of the packet without ip header */
        if (pbuf_copy(r, p) != ERR_OK) {
 8017bb8:	6879      	ldr	r1, [r7, #4]
 8017bba:	6978      	ldr	r0, [r7, #20]
 8017bbc:	f7f9 fa8a 	bl	80110d4 <pbuf_copy>
 8017bc0:	4603      	mov	r3, r0
 8017bc2:	2b00      	cmp	r3, #0
 8017bc4:	d003      	beq.n	8017bce <icmp_input+0x132>
          LWIP_DEBUGF(ICMP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("icmp_input: copying to new pbuf failed"));
          pbuf_free(r);
 8017bc6:	6978      	ldr	r0, [r7, #20]
 8017bc8:	f7f9 f96c 	bl	8010ea4 <pbuf_free>
          goto icmperr;
 8017bcc:	e072      	b.n	8017cb4 <icmp_input+0x218>
        }
        /* free the original p */
        pbuf_free(p);
 8017bce:	6878      	ldr	r0, [r7, #4]
 8017bd0:	f7f9 f968 	bl	8010ea4 <pbuf_free>
        /* we now have an identical copy of p that has room for link headers */
        p = r;
 8017bd4:	697b      	ldr	r3, [r7, #20]
 8017bd6:	607b      	str	r3, [r7, #4]
 8017bd8:	e00f      	b.n	8017bfa <icmp_input+0x15e>
      } else {
        /* restore p->payload to point to icmp header (cannot fail) */
        if (pbuf_remove_header(p, hlen + PBUF_LINK_HLEN + PBUF_LINK_ENCAPSULATION_HLEN)) {
 8017bda:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8017bdc:	330e      	adds	r3, #14
 8017bde:	4619      	mov	r1, r3
 8017be0:	6878      	ldr	r0, [r7, #4]
 8017be2:	f7f9 f8d9 	bl	8010d98 <pbuf_remove_header>
 8017be6:	4603      	mov	r3, r0
 8017be8:	2b00      	cmp	r3, #0
 8017bea:	d006      	beq.n	8017bfa <icmp_input+0x15e>
          LWIP_ASSERT("icmp_input: restoring original p->payload failed\n", 0);
 8017bec:	4b37      	ldr	r3, [pc, #220]	; (8017ccc <icmp_input+0x230>)
 8017bee:	22c7      	movs	r2, #199	; 0xc7
 8017bf0:	4939      	ldr	r1, [pc, #228]	; (8017cd8 <icmp_input+0x23c>)
 8017bf2:	4838      	ldr	r0, [pc, #224]	; (8017cd4 <icmp_input+0x238>)
 8017bf4:	f002 f82c 	bl	8019c50 <iprintf>
          goto icmperr;
 8017bf8:	e05c      	b.n	8017cb4 <icmp_input+0x218>
      }
#endif /* LWIP_ICMP_ECHO_CHECK_INPUT_PBUF_LEN */
      /* At this point, all checks are OK. */
      /* We generate an answer by switching the dest and src ip addresses,
       * setting the icmp type to ECHO_RESPONSE and updating the checksum. */
      iecho = (struct icmp_echo_hdr *)p->payload;
 8017bfa:	687b      	ldr	r3, [r7, #4]
 8017bfc:	685b      	ldr	r3, [r3, #4]
 8017bfe:	613b      	str	r3, [r7, #16]
      if (pbuf_add_header(p, hlen)) {
 8017c00:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8017c02:	4619      	mov	r1, r3
 8017c04:	6878      	ldr	r0, [r7, #4]
 8017c06:	f7f9 f8b7 	bl	8010d78 <pbuf_add_header>
 8017c0a:	4603      	mov	r3, r0
 8017c0c:	2b00      	cmp	r3, #0
 8017c0e:	d13c      	bne.n	8017c8a <icmp_input+0x1ee>
        LWIP_DEBUGF(ICMP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("Can't move over header in packet"));
      } else {
        err_t ret;
        struct ip_hdr *iphdr = (struct ip_hdr *)p->payload;
 8017c10:	687b      	ldr	r3, [r7, #4]
 8017c12:	685b      	ldr	r3, [r3, #4]
 8017c14:	60fb      	str	r3, [r7, #12]
        ip4_addr_copy(iphdr->src, *src);
 8017c16:	69fb      	ldr	r3, [r7, #28]
 8017c18:	681a      	ldr	r2, [r3, #0]
 8017c1a:	68fb      	ldr	r3, [r7, #12]
 8017c1c:	60da      	str	r2, [r3, #12]
        ip4_addr_copy(iphdr->dest, *ip4_current_src_addr());
 8017c1e:	4b29      	ldr	r3, [pc, #164]	; (8017cc4 <icmp_input+0x228>)
 8017c20:	691a      	ldr	r2, [r3, #16]
 8017c22:	68fb      	ldr	r3, [r7, #12]
 8017c24:	611a      	str	r2, [r3, #16]
        ICMPH_TYPE_SET(iecho, ICMP_ER);
 8017c26:	693b      	ldr	r3, [r7, #16]
 8017c28:	2200      	movs	r2, #0
 8017c2a:	701a      	strb	r2, [r3, #0]
#if CHECKSUM_GEN_ICMP
        IF__NETIF_CHECKSUM_ENABLED(inp, NETIF_CHECKSUM_GEN_ICMP) {
          /* adjust the checksum */
          if (iecho->chksum > PP_HTONS(0xffffU - (ICMP_ECHO << 8))) {
 8017c2c:	693b      	ldr	r3, [r7, #16]
 8017c2e:	885b      	ldrh	r3, [r3, #2]
 8017c30:	b29b      	uxth	r3, r3
 8017c32:	f64f 72f7 	movw	r2, #65527	; 0xfff7
 8017c36:	4293      	cmp	r3, r2
 8017c38:	d907      	bls.n	8017c4a <icmp_input+0x1ae>
            iecho->chksum = (u16_t)(iecho->chksum + PP_HTONS((u16_t)(ICMP_ECHO << 8)) + 1);
 8017c3a:	693b      	ldr	r3, [r7, #16]
 8017c3c:	885b      	ldrh	r3, [r3, #2]
 8017c3e:	b29b      	uxth	r3, r3
 8017c40:	3309      	adds	r3, #9
 8017c42:	b29a      	uxth	r2, r3
 8017c44:	693b      	ldr	r3, [r7, #16]
 8017c46:	805a      	strh	r2, [r3, #2]
 8017c48:	e006      	b.n	8017c58 <icmp_input+0x1bc>
          } else {
            iecho->chksum = (u16_t)(iecho->chksum + PP_HTONS(ICMP_ECHO << 8));
 8017c4a:	693b      	ldr	r3, [r7, #16]
 8017c4c:	885b      	ldrh	r3, [r3, #2]
 8017c4e:	b29b      	uxth	r3, r3
 8017c50:	3308      	adds	r3, #8
 8017c52:	b29a      	uxth	r2, r3
 8017c54:	693b      	ldr	r3, [r7, #16]
 8017c56:	805a      	strh	r2, [r3, #2]
#else /* CHECKSUM_GEN_ICMP */
        iecho->chksum = 0;
#endif /* CHECKSUM_GEN_ICMP */

        /* Set the correct TTL and recalculate the header checksum. */
        IPH_TTL_SET(iphdr, ICMP_TTL);
 8017c58:	68fb      	ldr	r3, [r7, #12]
 8017c5a:	22ff      	movs	r2, #255	; 0xff
 8017c5c:	721a      	strb	r2, [r3, #8]
        IPH_CHKSUM_SET(iphdr, 0);
 8017c5e:	68fb      	ldr	r3, [r7, #12]
 8017c60:	2200      	movs	r2, #0
 8017c62:	729a      	strb	r2, [r3, #10]
 8017c64:	2200      	movs	r2, #0
 8017c66:	72da      	strb	r2, [r3, #11]
        MIB2_STATS_INC(mib2.icmpoutmsgs);
        /* increase number of echo replies attempted to send */
        MIB2_STATS_INC(mib2.icmpoutechoreps);

        /* send an ICMP packet */
        ret = ip4_output_if(p, src, LWIP_IP_HDRINCL,
 8017c68:	683b      	ldr	r3, [r7, #0]
 8017c6a:	9302      	str	r3, [sp, #8]
 8017c6c:	2301      	movs	r3, #1
 8017c6e:	9301      	str	r3, [sp, #4]
 8017c70:	2300      	movs	r3, #0
 8017c72:	9300      	str	r3, [sp, #0]
 8017c74:	23ff      	movs	r3, #255	; 0xff
 8017c76:	2200      	movs	r2, #0
 8017c78:	69f9      	ldr	r1, [r7, #28]
 8017c7a:	6878      	ldr	r0, [r7, #4]
 8017c7c:	f000 fa80 	bl	8018180 <ip4_output_if>
 8017c80:	4603      	mov	r3, r0
 8017c82:	72fb      	strb	r3, [r7, #11]
                            ICMP_TTL, 0, IP_PROTO_ICMP, inp);
        if (ret != ERR_OK) {
          LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: ip_output_if returned an error: %s\n", lwip_strerr(ret)));
        }
      }
      break;
 8017c84:	e001      	b.n	8017c8a <icmp_input+0x1ee>
      break;
 8017c86:	bf00      	nop
 8017c88:	e000      	b.n	8017c8c <icmp_input+0x1f0>
      break;
 8017c8a:	bf00      	nop
      LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: ICMP type %"S16_F" code %"S16_F" not supported.\n",
                               (s16_t)type, (s16_t)code));
      ICMP_STATS_INC(icmp.proterr);
      ICMP_STATS_INC(icmp.drop);
  }
  pbuf_free(p);
 8017c8c:	6878      	ldr	r0, [r7, #4]
 8017c8e:	f7f9 f909 	bl	8010ea4 <pbuf_free>
  return;
 8017c92:	e013      	b.n	8017cbc <icmp_input+0x220>
    goto lenerr;
 8017c94:	bf00      	nop
 8017c96:	e002      	b.n	8017c9e <icmp_input+0x202>
    goto lenerr;
 8017c98:	bf00      	nop
 8017c9a:	e000      	b.n	8017c9e <icmp_input+0x202>
        goto lenerr;
 8017c9c:	bf00      	nop
lenerr:
  pbuf_free(p);
 8017c9e:	6878      	ldr	r0, [r7, #4]
 8017ca0:	f7f9 f900 	bl	8010ea4 <pbuf_free>
  ICMP_STATS_INC(icmp.lenerr);
  MIB2_STATS_INC(mib2.icmpinerrors);
  return;
 8017ca4:	e00a      	b.n	8017cbc <icmp_input+0x220>
        goto icmperr;
 8017ca6:	bf00      	nop
 8017ca8:	e004      	b.n	8017cb4 <icmp_input+0x218>
        goto icmperr;
 8017caa:	bf00      	nop
 8017cac:	e002      	b.n	8017cb4 <icmp_input+0x218>
          goto icmperr;
 8017cae:	bf00      	nop
 8017cb0:	e000      	b.n	8017cb4 <icmp_input+0x218>
          goto icmperr;
 8017cb2:	bf00      	nop
#if LWIP_ICMP_ECHO_CHECK_INPUT_PBUF_LEN || !LWIP_MULTICAST_PING || !LWIP_BROADCAST_PING
icmperr:
  pbuf_free(p);
 8017cb4:	6878      	ldr	r0, [r7, #4]
 8017cb6:	f7f9 f8f5 	bl	8010ea4 <pbuf_free>
  ICMP_STATS_INC(icmp.err);
  MIB2_STATS_INC(mib2.icmpinerrors);
  return;
 8017cba:	bf00      	nop
#endif /* LWIP_ICMP_ECHO_CHECK_INPUT_PBUF_LEN || !LWIP_MULTICAST_PING || !LWIP_BROADCAST_PING */
}
 8017cbc:	3728      	adds	r7, #40	; 0x28
 8017cbe:	46bd      	mov	sp, r7
 8017cc0:	bd80      	pop	{r7, pc}
 8017cc2:	bf00      	nop
 8017cc4:	200007fc 	.word	0x200007fc
 8017cc8:	20000810 	.word	0x20000810
 8017ccc:	0801eadc 	.word	0x0801eadc
 8017cd0:	0801eb14 	.word	0x0801eb14
 8017cd4:	0801eb4c 	.word	0x0801eb4c
 8017cd8:	0801eb74 	.word	0x0801eb74

08017cdc <icmp_dest_unreach>:
 *          p->payload pointing to the IP header
 * @param t type of the 'unreachable' packet
 */
void
icmp_dest_unreach(struct pbuf *p, enum icmp_dur_type t)
{
 8017cdc:	b580      	push	{r7, lr}
 8017cde:	b082      	sub	sp, #8
 8017ce0:	af00      	add	r7, sp, #0
 8017ce2:	6078      	str	r0, [r7, #4]
 8017ce4:	460b      	mov	r3, r1
 8017ce6:	70fb      	strb	r3, [r7, #3]
  MIB2_STATS_INC(mib2.icmpoutdestunreachs);
  icmp_send_response(p, ICMP_DUR, t);
 8017ce8:	78fb      	ldrb	r3, [r7, #3]
 8017cea:	461a      	mov	r2, r3
 8017cec:	2103      	movs	r1, #3
 8017cee:	6878      	ldr	r0, [r7, #4]
 8017cf0:	f000 f814 	bl	8017d1c <icmp_send_response>
}
 8017cf4:	bf00      	nop
 8017cf6:	3708      	adds	r7, #8
 8017cf8:	46bd      	mov	sp, r7
 8017cfa:	bd80      	pop	{r7, pc}

08017cfc <icmp_time_exceeded>:
 *          p->payload pointing to the IP header
 * @param t type of the 'time exceeded' packet
 */
void
icmp_time_exceeded(struct pbuf *p, enum icmp_te_type t)
{
 8017cfc:	b580      	push	{r7, lr}
 8017cfe:	b082      	sub	sp, #8
 8017d00:	af00      	add	r7, sp, #0
 8017d02:	6078      	str	r0, [r7, #4]
 8017d04:	460b      	mov	r3, r1
 8017d06:	70fb      	strb	r3, [r7, #3]
  MIB2_STATS_INC(mib2.icmpouttimeexcds);
  icmp_send_response(p, ICMP_TE, t);
 8017d08:	78fb      	ldrb	r3, [r7, #3]
 8017d0a:	461a      	mov	r2, r3
 8017d0c:	210b      	movs	r1, #11
 8017d0e:	6878      	ldr	r0, [r7, #4]
 8017d10:	f000 f804 	bl	8017d1c <icmp_send_response>
}
 8017d14:	bf00      	nop
 8017d16:	3708      	adds	r7, #8
 8017d18:	46bd      	mov	sp, r7
 8017d1a:	bd80      	pop	{r7, pc}

08017d1c <icmp_send_response>:
 * @param type Type of the ICMP header
 * @param code Code of the ICMP header
 */
static void
icmp_send_response(struct pbuf *p, u8_t type, u8_t code)
{
 8017d1c:	b580      	push	{r7, lr}
 8017d1e:	b08c      	sub	sp, #48	; 0x30
 8017d20:	af04      	add	r7, sp, #16
 8017d22:	6078      	str	r0, [r7, #4]
 8017d24:	460b      	mov	r3, r1
 8017d26:	70fb      	strb	r3, [r7, #3]
 8017d28:	4613      	mov	r3, r2
 8017d2a:	70bb      	strb	r3, [r7, #2]

  /* increase number of messages attempted to send */
  MIB2_STATS_INC(mib2.icmpoutmsgs);

  /* ICMP header + IP header + 8 bytes of data */
  q = pbuf_alloc(PBUF_IP, sizeof(struct icmp_echo_hdr) + IP_HLEN + ICMP_DEST_UNREACH_DATASIZE,
 8017d2c:	f44f 7220 	mov.w	r2, #640	; 0x280
 8017d30:	2124      	movs	r1, #36	; 0x24
 8017d32:	2022      	movs	r0, #34	; 0x22
 8017d34:	f7f8 fdd2 	bl	80108dc <pbuf_alloc>
 8017d38:	61f8      	str	r0, [r7, #28]
                 PBUF_RAM);
  if (q == NULL) {
 8017d3a:	69fb      	ldr	r3, [r7, #28]
 8017d3c:	2b00      	cmp	r3, #0
 8017d3e:	d056      	beq.n	8017dee <icmp_send_response+0xd2>
    LWIP_DEBUGF(ICMP_DEBUG, ("icmp_time_exceeded: failed to allocate pbuf for ICMP packet.\n"));
    MIB2_STATS_INC(mib2.icmpouterrors);
    return;
  }
  LWIP_ASSERT("check that first pbuf can hold icmp message",
 8017d40:	69fb      	ldr	r3, [r7, #28]
 8017d42:	895b      	ldrh	r3, [r3, #10]
 8017d44:	2b23      	cmp	r3, #35	; 0x23
 8017d46:	d806      	bhi.n	8017d56 <icmp_send_response+0x3a>
 8017d48:	4b2b      	ldr	r3, [pc, #172]	; (8017df8 <icmp_send_response+0xdc>)
 8017d4a:	f44f 72b4 	mov.w	r2, #360	; 0x168
 8017d4e:	492b      	ldr	r1, [pc, #172]	; (8017dfc <icmp_send_response+0xe0>)
 8017d50:	482b      	ldr	r0, [pc, #172]	; (8017e00 <icmp_send_response+0xe4>)
 8017d52:	f001 ff7d 	bl	8019c50 <iprintf>
              (q->len >= (sizeof(struct icmp_echo_hdr) + IP_HLEN + ICMP_DEST_UNREACH_DATASIZE)));

  iphdr = (struct ip_hdr *)p->payload;
 8017d56:	687b      	ldr	r3, [r7, #4]
 8017d58:	685b      	ldr	r3, [r3, #4]
 8017d5a:	61bb      	str	r3, [r7, #24]
  ip4_addr_debug_print_val(ICMP_DEBUG, iphdr->src);
  LWIP_DEBUGF(ICMP_DEBUG, (" to "));
  ip4_addr_debug_print_val(ICMP_DEBUG, iphdr->dest);
  LWIP_DEBUGF(ICMP_DEBUG, ("\n"));

  icmphdr = (struct icmp_echo_hdr *)q->payload;
 8017d5c:	69fb      	ldr	r3, [r7, #28]
 8017d5e:	685b      	ldr	r3, [r3, #4]
 8017d60:	617b      	str	r3, [r7, #20]
  icmphdr->type = type;
 8017d62:	697b      	ldr	r3, [r7, #20]
 8017d64:	78fa      	ldrb	r2, [r7, #3]
 8017d66:	701a      	strb	r2, [r3, #0]
  icmphdr->code = code;
 8017d68:	697b      	ldr	r3, [r7, #20]
 8017d6a:	78ba      	ldrb	r2, [r7, #2]
 8017d6c:	705a      	strb	r2, [r3, #1]
  icmphdr->id = 0;
 8017d6e:	697b      	ldr	r3, [r7, #20]
 8017d70:	2200      	movs	r2, #0
 8017d72:	711a      	strb	r2, [r3, #4]
 8017d74:	2200      	movs	r2, #0
 8017d76:	715a      	strb	r2, [r3, #5]
  icmphdr->seqno = 0;
 8017d78:	697b      	ldr	r3, [r7, #20]
 8017d7a:	2200      	movs	r2, #0
 8017d7c:	719a      	strb	r2, [r3, #6]
 8017d7e:	2200      	movs	r2, #0
 8017d80:	71da      	strb	r2, [r3, #7]

  /* copy fields from original packet */
  SMEMCPY((u8_t *)q->payload + sizeof(struct icmp_echo_hdr), (u8_t *)p->payload,
 8017d82:	69fb      	ldr	r3, [r7, #28]
 8017d84:	685b      	ldr	r3, [r3, #4]
 8017d86:	f103 0008 	add.w	r0, r3, #8
 8017d8a:	687b      	ldr	r3, [r7, #4]
 8017d8c:	685b      	ldr	r3, [r3, #4]
 8017d8e:	221c      	movs	r2, #28
 8017d90:	4619      	mov	r1, r3
 8017d92:	f002 f92c 	bl	8019fee <memcpy>
          IP_HLEN + ICMP_DEST_UNREACH_DATASIZE);

  ip4_addr_copy(iphdr_src, iphdr->src);
 8017d96:	69bb      	ldr	r3, [r7, #24]
 8017d98:	68db      	ldr	r3, [r3, #12]
 8017d9a:	60fb      	str	r3, [r7, #12]
    ip4_addr_t iphdr_dst;
    ip4_addr_copy(iphdr_dst, iphdr->dest);
    netif = ip4_route_src(&iphdr_dst, &iphdr_src);
  }
#else
  netif = ip4_route(&iphdr_src);
 8017d9c:	f107 030c 	add.w	r3, r7, #12
 8017da0:	4618      	mov	r0, r3
 8017da2:	f000 f82f 	bl	8017e04 <ip4_route>
 8017da6:	6138      	str	r0, [r7, #16]
#endif
  if (netif != NULL) {
 8017da8:	693b      	ldr	r3, [r7, #16]
 8017daa:	2b00      	cmp	r3, #0
 8017dac:	d01b      	beq.n	8017de6 <icmp_send_response+0xca>
    /* calculate checksum */
    icmphdr->chksum = 0;
 8017dae:	697b      	ldr	r3, [r7, #20]
 8017db0:	2200      	movs	r2, #0
 8017db2:	709a      	strb	r2, [r3, #2]
 8017db4:	2200      	movs	r2, #0
 8017db6:	70da      	strb	r2, [r3, #3]
#if CHECKSUM_GEN_ICMP
    IF__NETIF_CHECKSUM_ENABLED(netif, NETIF_CHECKSUM_GEN_ICMP) {
      icmphdr->chksum = inet_chksum(icmphdr, q->len);
 8017db8:	69fb      	ldr	r3, [r7, #28]
 8017dba:	895b      	ldrh	r3, [r3, #10]
 8017dbc:	4619      	mov	r1, r3
 8017dbe:	6978      	ldr	r0, [r7, #20]
 8017dc0:	f7f7 fd17 	bl	800f7f2 <inet_chksum>
 8017dc4:	4603      	mov	r3, r0
 8017dc6:	461a      	mov	r2, r3
 8017dc8:	697b      	ldr	r3, [r7, #20]
 8017dca:	805a      	strh	r2, [r3, #2]
    }
#endif
    ICMP_STATS_INC(icmp.xmit);
    ip4_output_if(q, NULL, &iphdr_src, ICMP_TTL, 0, IP_PROTO_ICMP, netif);
 8017dcc:	f107 020c 	add.w	r2, r7, #12
 8017dd0:	693b      	ldr	r3, [r7, #16]
 8017dd2:	9302      	str	r3, [sp, #8]
 8017dd4:	2301      	movs	r3, #1
 8017dd6:	9301      	str	r3, [sp, #4]
 8017dd8:	2300      	movs	r3, #0
 8017dda:	9300      	str	r3, [sp, #0]
 8017ddc:	23ff      	movs	r3, #255	; 0xff
 8017dde:	2100      	movs	r1, #0
 8017de0:	69f8      	ldr	r0, [r7, #28]
 8017de2:	f000 f9cd 	bl	8018180 <ip4_output_if>
  }
  pbuf_free(q);
 8017de6:	69f8      	ldr	r0, [r7, #28]
 8017de8:	f7f9 f85c 	bl	8010ea4 <pbuf_free>
 8017dec:	e000      	b.n	8017df0 <icmp_send_response+0xd4>
    return;
 8017dee:	bf00      	nop
}
 8017df0:	3720      	adds	r7, #32
 8017df2:	46bd      	mov	sp, r7
 8017df4:	bd80      	pop	{r7, pc}
 8017df6:	bf00      	nop
 8017df8:	0801eadc 	.word	0x0801eadc
 8017dfc:	0801eba8 	.word	0x0801eba8
 8017e00:	0801eb4c 	.word	0x0801eb4c

08017e04 <ip4_route>:
 * @param dest the destination IP address for which to find the route
 * @return the netif on which to send to reach dest
 */
struct netif *
ip4_route(const ip4_addr_t *dest)
{
 8017e04:	b480      	push	{r7}
 8017e06:	b085      	sub	sp, #20
 8017e08:	af00      	add	r7, sp, #0
 8017e0a:	6078      	str	r0, [r7, #4]

  /* bug #54569: in case LWIP_SINGLE_NETIF=1 and LWIP_DEBUGF() disabled, the following loop is optimized away */
  LWIP_UNUSED_ARG(dest);

  /* iterate through netifs */
  NETIF_FOREACH(netif) {
 8017e0c:	4b33      	ldr	r3, [pc, #204]	; (8017edc <ip4_route+0xd8>)
 8017e0e:	681b      	ldr	r3, [r3, #0]
 8017e10:	60fb      	str	r3, [r7, #12]
 8017e12:	e036      	b.n	8017e82 <ip4_route+0x7e>
    /* is the netif up, does it have a link and a valid address? */
    if (netif_is_up(netif) && netif_is_link_up(netif) && !ip4_addr_isany_val(*netif_ip4_addr(netif))) {
 8017e14:	68fb      	ldr	r3, [r7, #12]
 8017e16:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8017e1a:	f003 0301 	and.w	r3, r3, #1
 8017e1e:	b2db      	uxtb	r3, r3
 8017e20:	2b00      	cmp	r3, #0
 8017e22:	d02b      	beq.n	8017e7c <ip4_route+0x78>
 8017e24:	68fb      	ldr	r3, [r7, #12]
 8017e26:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8017e2a:	089b      	lsrs	r3, r3, #2
 8017e2c:	f003 0301 	and.w	r3, r3, #1
 8017e30:	b2db      	uxtb	r3, r3
 8017e32:	2b00      	cmp	r3, #0
 8017e34:	d022      	beq.n	8017e7c <ip4_route+0x78>
 8017e36:	68fb      	ldr	r3, [r7, #12]
 8017e38:	3304      	adds	r3, #4
 8017e3a:	681b      	ldr	r3, [r3, #0]
 8017e3c:	2b00      	cmp	r3, #0
 8017e3e:	d01d      	beq.n	8017e7c <ip4_route+0x78>
      /* network mask matches? */
      if (ip4_addr_netcmp(dest, netif_ip4_addr(netif), netif_ip4_netmask(netif))) {
 8017e40:	687b      	ldr	r3, [r7, #4]
 8017e42:	681a      	ldr	r2, [r3, #0]
 8017e44:	68fb      	ldr	r3, [r7, #12]
 8017e46:	3304      	adds	r3, #4
 8017e48:	681b      	ldr	r3, [r3, #0]
 8017e4a:	405a      	eors	r2, r3
 8017e4c:	68fb      	ldr	r3, [r7, #12]
 8017e4e:	3308      	adds	r3, #8
 8017e50:	681b      	ldr	r3, [r3, #0]
 8017e52:	4013      	ands	r3, r2
 8017e54:	2b00      	cmp	r3, #0
 8017e56:	d101      	bne.n	8017e5c <ip4_route+0x58>
        /* return netif on which to forward IP packet */
        return netif;
 8017e58:	68fb      	ldr	r3, [r7, #12]
 8017e5a:	e038      	b.n	8017ece <ip4_route+0xca>
      }
      /* gateway matches on a non broadcast interface? (i.e. peer in a point to point interface) */
      if (((netif->flags & NETIF_FLAG_BROADCAST) == 0) && ip4_addr_cmp(dest, netif_ip4_gw(netif))) {
 8017e5c:	68fb      	ldr	r3, [r7, #12]
 8017e5e:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8017e62:	f003 0302 	and.w	r3, r3, #2
 8017e66:	2b00      	cmp	r3, #0
 8017e68:	d108      	bne.n	8017e7c <ip4_route+0x78>
 8017e6a:	687b      	ldr	r3, [r7, #4]
 8017e6c:	681a      	ldr	r2, [r3, #0]
 8017e6e:	68fb      	ldr	r3, [r7, #12]
 8017e70:	330c      	adds	r3, #12
 8017e72:	681b      	ldr	r3, [r3, #0]
 8017e74:	429a      	cmp	r2, r3
 8017e76:	d101      	bne.n	8017e7c <ip4_route+0x78>
        /* return netif on which to forward IP packet */
        return netif;
 8017e78:	68fb      	ldr	r3, [r7, #12]
 8017e7a:	e028      	b.n	8017ece <ip4_route+0xca>
  NETIF_FOREACH(netif) {
 8017e7c:	68fb      	ldr	r3, [r7, #12]
 8017e7e:	681b      	ldr	r3, [r3, #0]
 8017e80:	60fb      	str	r3, [r7, #12]
 8017e82:	68fb      	ldr	r3, [r7, #12]
 8017e84:	2b00      	cmp	r3, #0
 8017e86:	d1c5      	bne.n	8017e14 <ip4_route+0x10>
    return netif;
  }
#endif
#endif /* !LWIP_SINGLE_NETIF */

  if ((netif_default == NULL) || !netif_is_up(netif_default) || !netif_is_link_up(netif_default) ||
 8017e88:	4b15      	ldr	r3, [pc, #84]	; (8017ee0 <ip4_route+0xdc>)
 8017e8a:	681b      	ldr	r3, [r3, #0]
 8017e8c:	2b00      	cmp	r3, #0
 8017e8e:	d01a      	beq.n	8017ec6 <ip4_route+0xc2>
 8017e90:	4b13      	ldr	r3, [pc, #76]	; (8017ee0 <ip4_route+0xdc>)
 8017e92:	681b      	ldr	r3, [r3, #0]
 8017e94:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8017e98:	f003 0301 	and.w	r3, r3, #1
 8017e9c:	2b00      	cmp	r3, #0
 8017e9e:	d012      	beq.n	8017ec6 <ip4_route+0xc2>
 8017ea0:	4b0f      	ldr	r3, [pc, #60]	; (8017ee0 <ip4_route+0xdc>)
 8017ea2:	681b      	ldr	r3, [r3, #0]
 8017ea4:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8017ea8:	f003 0304 	and.w	r3, r3, #4
 8017eac:	2b00      	cmp	r3, #0
 8017eae:	d00a      	beq.n	8017ec6 <ip4_route+0xc2>
      ip4_addr_isany_val(*netif_ip4_addr(netif_default)) || ip4_addr_isloopback(dest)) {
 8017eb0:	4b0b      	ldr	r3, [pc, #44]	; (8017ee0 <ip4_route+0xdc>)
 8017eb2:	681b      	ldr	r3, [r3, #0]
 8017eb4:	3304      	adds	r3, #4
 8017eb6:	681b      	ldr	r3, [r3, #0]
  if ((netif_default == NULL) || !netif_is_up(netif_default) || !netif_is_link_up(netif_default) ||
 8017eb8:	2b00      	cmp	r3, #0
 8017eba:	d004      	beq.n	8017ec6 <ip4_route+0xc2>
      ip4_addr_isany_val(*netif_ip4_addr(netif_default)) || ip4_addr_isloopback(dest)) {
 8017ebc:	687b      	ldr	r3, [r7, #4]
 8017ebe:	681b      	ldr	r3, [r3, #0]
 8017ec0:	b2db      	uxtb	r3, r3
 8017ec2:	2b7f      	cmp	r3, #127	; 0x7f
 8017ec4:	d101      	bne.n	8017eca <ip4_route+0xc6>
       If this is not good enough for you, use LWIP_HOOK_IP4_ROUTE() */
    LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("ip4_route: No route to %"U16_F".%"U16_F".%"U16_F".%"U16_F"\n",
                ip4_addr1_16(dest), ip4_addr2_16(dest), ip4_addr3_16(dest), ip4_addr4_16(dest)));
    IP_STATS_INC(ip.rterr);
    MIB2_STATS_INC(mib2.ipoutnoroutes);
    return NULL;
 8017ec6:	2300      	movs	r3, #0
 8017ec8:	e001      	b.n	8017ece <ip4_route+0xca>
  }

  return netif_default;
 8017eca:	4b05      	ldr	r3, [pc, #20]	; (8017ee0 <ip4_route+0xdc>)
 8017ecc:	681b      	ldr	r3, [r3, #0]
}
 8017ece:	4618      	mov	r0, r3
 8017ed0:	3714      	adds	r7, #20
 8017ed2:	46bd      	mov	sp, r7
 8017ed4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017ed8:	4770      	bx	lr
 8017eda:	bf00      	nop
 8017edc:	200070cc 	.word	0x200070cc
 8017ee0:	200070d0 	.word	0x200070d0

08017ee4 <ip4_input_accept>:
#endif /* IP_FORWARD */

/** Return true if the current input packet should be accepted on this netif */
static int
ip4_input_accept(struct netif *netif)
{
 8017ee4:	b580      	push	{r7, lr}
 8017ee6:	b082      	sub	sp, #8
 8017ee8:	af00      	add	r7, sp, #0
 8017eea:	6078      	str	r0, [r7, #4]
                         ip4_addr_get_u32(ip4_current_dest_addr()) & ip4_addr_get_u32(netif_ip4_netmask(netif)),
                         ip4_addr_get_u32(netif_ip4_addr(netif)) & ip4_addr_get_u32(netif_ip4_netmask(netif)),
                         ip4_addr_get_u32(ip4_current_dest_addr()) & ~ip4_addr_get_u32(netif_ip4_netmask(netif))));

  /* interface is up and configured? */
  if ((netif_is_up(netif)) && (!ip4_addr_isany_val(*netif_ip4_addr(netif)))) {
 8017eec:	687b      	ldr	r3, [r7, #4]
 8017eee:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8017ef2:	f003 0301 	and.w	r3, r3, #1
 8017ef6:	b2db      	uxtb	r3, r3
 8017ef8:	2b00      	cmp	r3, #0
 8017efa:	d016      	beq.n	8017f2a <ip4_input_accept+0x46>
 8017efc:	687b      	ldr	r3, [r7, #4]
 8017efe:	3304      	adds	r3, #4
 8017f00:	681b      	ldr	r3, [r3, #0]
 8017f02:	2b00      	cmp	r3, #0
 8017f04:	d011      	beq.n	8017f2a <ip4_input_accept+0x46>
    /* unicast to this interface address? */
    if (ip4_addr_cmp(ip4_current_dest_addr(), netif_ip4_addr(netif)) ||
 8017f06:	4b0b      	ldr	r3, [pc, #44]	; (8017f34 <ip4_input_accept+0x50>)
 8017f08:	695a      	ldr	r2, [r3, #20]
 8017f0a:	687b      	ldr	r3, [r7, #4]
 8017f0c:	3304      	adds	r3, #4
 8017f0e:	681b      	ldr	r3, [r3, #0]
 8017f10:	429a      	cmp	r2, r3
 8017f12:	d008      	beq.n	8017f26 <ip4_input_accept+0x42>
        /* or broadcast on this interface network address? */
        ip4_addr_isbroadcast(ip4_current_dest_addr(), netif)
 8017f14:	4b07      	ldr	r3, [pc, #28]	; (8017f34 <ip4_input_accept+0x50>)
 8017f16:	695b      	ldr	r3, [r3, #20]
 8017f18:	6879      	ldr	r1, [r7, #4]
 8017f1a:	4618      	mov	r0, r3
 8017f1c:	f000 fa08 	bl	8018330 <ip4_addr_isbroadcast_u32>
 8017f20:	4603      	mov	r3, r0
    if (ip4_addr_cmp(ip4_current_dest_addr(), netif_ip4_addr(netif)) ||
 8017f22:	2b00      	cmp	r3, #0
 8017f24:	d001      	beq.n	8017f2a <ip4_input_accept+0x46>
#endif /* LWIP_NETIF_LOOPBACK && !LWIP_HAVE_LOOPIF */
       ) {
      LWIP_DEBUGF(IP_DEBUG, ("ip4_input: packet accepted on interface %c%c\n",
                             netif->name[0], netif->name[1]));
      /* accept on this netif */
      return 1;
 8017f26:	2301      	movs	r3, #1
 8017f28:	e000      	b.n	8017f2c <ip4_input_accept+0x48>
      /* accept on this netif */
      return 1;
    }
#endif /* LWIP_AUTOIP */
  }
  return 0;
 8017f2a:	2300      	movs	r3, #0
}
 8017f2c:	4618      	mov	r0, r3
 8017f2e:	3708      	adds	r7, #8
 8017f30:	46bd      	mov	sp, r7
 8017f32:	bd80      	pop	{r7, pc}
 8017f34:	200007fc 	.word	0x200007fc

08017f38 <ip4_input>:
 * @return ERR_OK if the packet was processed (could return ERR_* if it wasn't
 *         processed, but currently always returns ERR_OK)
 */
err_t
ip4_input(struct pbuf *p, struct netif *inp)
{
 8017f38:	b580      	push	{r7, lr}
 8017f3a:	b086      	sub	sp, #24
 8017f3c:	af00      	add	r7, sp, #0
 8017f3e:	6078      	str	r0, [r7, #4]
 8017f40:	6039      	str	r1, [r7, #0]

  IP_STATS_INC(ip.recv);
  MIB2_STATS_INC(mib2.ipinreceives);

  /* identify the IP header */
  iphdr = (struct ip_hdr *)p->payload;
 8017f42:	687b      	ldr	r3, [r7, #4]
 8017f44:	685b      	ldr	r3, [r3, #4]
 8017f46:	617b      	str	r3, [r7, #20]
  if (IPH_V(iphdr) != 4) {
 8017f48:	697b      	ldr	r3, [r7, #20]
 8017f4a:	781b      	ldrb	r3, [r3, #0]
 8017f4c:	091b      	lsrs	r3, r3, #4
 8017f4e:	b2db      	uxtb	r3, r3
 8017f50:	2b04      	cmp	r3, #4
 8017f52:	d004      	beq.n	8017f5e <ip4_input+0x26>
    LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_WARNING, ("IP packet dropped due to bad version number %"U16_F"\n", (u16_t)IPH_V(iphdr)));
    ip4_debug_print(p);
    pbuf_free(p);
 8017f54:	6878      	ldr	r0, [r7, #4]
 8017f56:	f7f8 ffa5 	bl	8010ea4 <pbuf_free>
    IP_STATS_INC(ip.err);
    IP_STATS_INC(ip.drop);
    MIB2_STATS_INC(mib2.ipinhdrerrors);
    return ERR_OK;
 8017f5a:	2300      	movs	r3, #0
 8017f5c:	e107      	b.n	801816e <ip4_input+0x236>
    return ERR_OK;
  }
#endif

  /* obtain IP header length in bytes */
  iphdr_hlen = IPH_HL_BYTES(iphdr);
 8017f5e:	697b      	ldr	r3, [r7, #20]
 8017f60:	781b      	ldrb	r3, [r3, #0]
 8017f62:	f003 030f 	and.w	r3, r3, #15
 8017f66:	b2db      	uxtb	r3, r3
 8017f68:	009b      	lsls	r3, r3, #2
 8017f6a:	b2db      	uxtb	r3, r3
 8017f6c:	81fb      	strh	r3, [r7, #14]
  /* obtain ip length in bytes */
  iphdr_len = lwip_ntohs(IPH_LEN(iphdr));
 8017f6e:	697b      	ldr	r3, [r7, #20]
 8017f70:	885b      	ldrh	r3, [r3, #2]
 8017f72:	b29b      	uxth	r3, r3
 8017f74:	4618      	mov	r0, r3
 8017f76:	f7f7 fbb1 	bl	800f6dc <lwip_htons>
 8017f7a:	4603      	mov	r3, r0
 8017f7c:	81bb      	strh	r3, [r7, #12]

  /* Trim pbuf. This is especially required for packets < 60 bytes. */
  if (iphdr_len < p->tot_len) {
 8017f7e:	687b      	ldr	r3, [r7, #4]
 8017f80:	891b      	ldrh	r3, [r3, #8]
 8017f82:	89ba      	ldrh	r2, [r7, #12]
 8017f84:	429a      	cmp	r2, r3
 8017f86:	d204      	bcs.n	8017f92 <ip4_input+0x5a>
    pbuf_realloc(p, iphdr_len);
 8017f88:	89bb      	ldrh	r3, [r7, #12]
 8017f8a:	4619      	mov	r1, r3
 8017f8c:	6878      	ldr	r0, [r7, #4]
 8017f8e:	f7f8 fe05 	bl	8010b9c <pbuf_realloc>
  }

  /* header length exceeds first pbuf length, or ip length exceeds total pbuf length? */
  if ((iphdr_hlen > p->len) || (iphdr_len > p->tot_len) || (iphdr_hlen < IP_HLEN)) {
 8017f92:	687b      	ldr	r3, [r7, #4]
 8017f94:	895b      	ldrh	r3, [r3, #10]
 8017f96:	89fa      	ldrh	r2, [r7, #14]
 8017f98:	429a      	cmp	r2, r3
 8017f9a:	d807      	bhi.n	8017fac <ip4_input+0x74>
 8017f9c:	687b      	ldr	r3, [r7, #4]
 8017f9e:	891b      	ldrh	r3, [r3, #8]
 8017fa0:	89ba      	ldrh	r2, [r7, #12]
 8017fa2:	429a      	cmp	r2, r3
 8017fa4:	d802      	bhi.n	8017fac <ip4_input+0x74>
 8017fa6:	89fb      	ldrh	r3, [r7, #14]
 8017fa8:	2b13      	cmp	r3, #19
 8017faa:	d804      	bhi.n	8017fb6 <ip4_input+0x7e>
      LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_SERIOUS,
                  ("IP (len %"U16_F") is longer than pbuf (len %"U16_F"), IP packet dropped.\n",
                   iphdr_len, p->tot_len));
    }
    /* free (drop) packet pbufs */
    pbuf_free(p);
 8017fac:	6878      	ldr	r0, [r7, #4]
 8017fae:	f7f8 ff79 	bl	8010ea4 <pbuf_free>
    IP_STATS_INC(ip.lenerr);
    IP_STATS_INC(ip.drop);
    MIB2_STATS_INC(mib2.ipindiscards);
    return ERR_OK;
 8017fb2:	2300      	movs	r3, #0
 8017fb4:	e0db      	b.n	801816e <ip4_input+0x236>
    }
  }
#endif

  /* copy IP addresses to aligned ip_addr_t */
  ip_addr_copy_from_ip4(ip_data.current_iphdr_dest, iphdr->dest);
 8017fb6:	697b      	ldr	r3, [r7, #20]
 8017fb8:	691b      	ldr	r3, [r3, #16]
 8017fba:	4a6f      	ldr	r2, [pc, #444]	; (8018178 <ip4_input+0x240>)
 8017fbc:	6153      	str	r3, [r2, #20]
  ip_addr_copy_from_ip4(ip_data.current_iphdr_src, iphdr->src);
 8017fbe:	697b      	ldr	r3, [r7, #20]
 8017fc0:	68db      	ldr	r3, [r3, #12]
 8017fc2:	4a6d      	ldr	r2, [pc, #436]	; (8018178 <ip4_input+0x240>)
 8017fc4:	6113      	str	r3, [r2, #16]

  /* match packet against an interface, i.e. is this packet for us? */
  if (ip4_addr_ismulticast(ip4_current_dest_addr())) {
 8017fc6:	4b6c      	ldr	r3, [pc, #432]	; (8018178 <ip4_input+0x240>)
 8017fc8:	695b      	ldr	r3, [r3, #20]
 8017fca:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8017fce:	2be0      	cmp	r3, #224	; 0xe0
 8017fd0:	d112      	bne.n	8017ff8 <ip4_input+0xc0>
      netif = inp;
    } else {
      netif = NULL;
    }
#else /* LWIP_IGMP */
    if ((netif_is_up(inp)) && (!ip4_addr_isany_val(*netif_ip4_addr(inp)))) {
 8017fd2:	683b      	ldr	r3, [r7, #0]
 8017fd4:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8017fd8:	f003 0301 	and.w	r3, r3, #1
 8017fdc:	b2db      	uxtb	r3, r3
 8017fde:	2b00      	cmp	r3, #0
 8017fe0:	d007      	beq.n	8017ff2 <ip4_input+0xba>
 8017fe2:	683b      	ldr	r3, [r7, #0]
 8017fe4:	3304      	adds	r3, #4
 8017fe6:	681b      	ldr	r3, [r3, #0]
 8017fe8:	2b00      	cmp	r3, #0
 8017fea:	d002      	beq.n	8017ff2 <ip4_input+0xba>
      netif = inp;
 8017fec:	683b      	ldr	r3, [r7, #0]
 8017fee:	613b      	str	r3, [r7, #16]
 8017ff0:	e02a      	b.n	8018048 <ip4_input+0x110>
    } else {
      netif = NULL;
 8017ff2:	2300      	movs	r3, #0
 8017ff4:	613b      	str	r3, [r7, #16]
 8017ff6:	e027      	b.n	8018048 <ip4_input+0x110>
    }
#endif /* LWIP_IGMP */
  } else {
    /* start trying with inp. if that's not acceptable, start walking the
       list of configured netifs. */
    if (ip4_input_accept(inp)) {
 8017ff8:	6838      	ldr	r0, [r7, #0]
 8017ffa:	f7ff ff73 	bl	8017ee4 <ip4_input_accept>
 8017ffe:	4603      	mov	r3, r0
 8018000:	2b00      	cmp	r3, #0
 8018002:	d002      	beq.n	801800a <ip4_input+0xd2>
      netif = inp;
 8018004:	683b      	ldr	r3, [r7, #0]
 8018006:	613b      	str	r3, [r7, #16]
 8018008:	e01e      	b.n	8018048 <ip4_input+0x110>
    } else {
      netif = NULL;
 801800a:	2300      	movs	r3, #0
 801800c:	613b      	str	r3, [r7, #16]
#if !LWIP_NETIF_LOOPBACK || LWIP_HAVE_LOOPIF
      /* Packets sent to the loopback address must not be accepted on an
       * interface that does not have the loopback address assigned to it,
       * unless a non-loopback interface is used for loopback traffic. */
      if (!ip4_addr_isloopback(ip4_current_dest_addr()))
 801800e:	4b5a      	ldr	r3, [pc, #360]	; (8018178 <ip4_input+0x240>)
 8018010:	695b      	ldr	r3, [r3, #20]
 8018012:	b2db      	uxtb	r3, r3
 8018014:	2b7f      	cmp	r3, #127	; 0x7f
 8018016:	d017      	beq.n	8018048 <ip4_input+0x110>
#endif /* !LWIP_NETIF_LOOPBACK || LWIP_HAVE_LOOPIF */
      {
#if !LWIP_SINGLE_NETIF
        NETIF_FOREACH(netif) {
 8018018:	4b58      	ldr	r3, [pc, #352]	; (801817c <ip4_input+0x244>)
 801801a:	681b      	ldr	r3, [r3, #0]
 801801c:	613b      	str	r3, [r7, #16]
 801801e:	e00e      	b.n	801803e <ip4_input+0x106>
          if (netif == inp) {
 8018020:	693a      	ldr	r2, [r7, #16]
 8018022:	683b      	ldr	r3, [r7, #0]
 8018024:	429a      	cmp	r2, r3
 8018026:	d006      	beq.n	8018036 <ip4_input+0xfe>
            /* we checked that before already */
            continue;
          }
          if (ip4_input_accept(netif)) {
 8018028:	6938      	ldr	r0, [r7, #16]
 801802a:	f7ff ff5b 	bl	8017ee4 <ip4_input_accept>
 801802e:	4603      	mov	r3, r0
 8018030:	2b00      	cmp	r3, #0
 8018032:	d108      	bne.n	8018046 <ip4_input+0x10e>
 8018034:	e000      	b.n	8018038 <ip4_input+0x100>
            continue;
 8018036:	bf00      	nop
        NETIF_FOREACH(netif) {
 8018038:	693b      	ldr	r3, [r7, #16]
 801803a:	681b      	ldr	r3, [r3, #0]
 801803c:	613b      	str	r3, [r7, #16]
 801803e:	693b      	ldr	r3, [r7, #16]
 8018040:	2b00      	cmp	r3, #0
 8018042:	d1ed      	bne.n	8018020 <ip4_input+0xe8>
 8018044:	e000      	b.n	8018048 <ip4_input+0x110>
            break;
 8018046:	bf00      	nop
      && !ip4_addr_isany_val(*ip4_current_src_addr())
#endif /* IP_ACCEPT_LINK_LAYER_ADDRESSING */
     )
#endif /* LWIP_IGMP || IP_ACCEPT_LINK_LAYER_ADDRESSING */
  {
    if ((ip4_addr_isbroadcast(ip4_current_src_addr(), inp)) ||
 8018048:	4b4b      	ldr	r3, [pc, #300]	; (8018178 <ip4_input+0x240>)
 801804a:	691b      	ldr	r3, [r3, #16]
 801804c:	6839      	ldr	r1, [r7, #0]
 801804e:	4618      	mov	r0, r3
 8018050:	f000 f96e 	bl	8018330 <ip4_addr_isbroadcast_u32>
 8018054:	4603      	mov	r3, r0
 8018056:	2b00      	cmp	r3, #0
 8018058:	d105      	bne.n	8018066 <ip4_input+0x12e>
        (ip4_addr_ismulticast(ip4_current_src_addr()))) {
 801805a:	4b47      	ldr	r3, [pc, #284]	; (8018178 <ip4_input+0x240>)
 801805c:	691b      	ldr	r3, [r3, #16]
 801805e:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
    if ((ip4_addr_isbroadcast(ip4_current_src_addr(), inp)) ||
 8018062:	2be0      	cmp	r3, #224	; 0xe0
 8018064:	d104      	bne.n	8018070 <ip4_input+0x138>
      /* packet source is not valid */
      LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_WARNING, ("ip4_input: packet source is not valid.\n"));
      /* free (drop) packet pbufs */
      pbuf_free(p);
 8018066:	6878      	ldr	r0, [r7, #4]
 8018068:	f7f8 ff1c 	bl	8010ea4 <pbuf_free>
      IP_STATS_INC(ip.drop);
      MIB2_STATS_INC(mib2.ipinaddrerrors);
      MIB2_STATS_INC(mib2.ipindiscards);
      return ERR_OK;
 801806c:	2300      	movs	r3, #0
 801806e:	e07e      	b.n	801816e <ip4_input+0x236>
    }
  }

  /* packet not for us? */
  if (netif == NULL) {
 8018070:	693b      	ldr	r3, [r7, #16]
 8018072:	2b00      	cmp	r3, #0
 8018074:	d104      	bne.n	8018080 <ip4_input+0x148>
    {
      IP_STATS_INC(ip.drop);
      MIB2_STATS_INC(mib2.ipinaddrerrors);
      MIB2_STATS_INC(mib2.ipindiscards);
    }
    pbuf_free(p);
 8018076:	6878      	ldr	r0, [r7, #4]
 8018078:	f7f8 ff14 	bl	8010ea4 <pbuf_free>
    return ERR_OK;
 801807c:	2300      	movs	r3, #0
 801807e:	e076      	b.n	801816e <ip4_input+0x236>
  }
  /* packet consists of multiple fragments? */
  if ((IPH_OFFSET(iphdr) & PP_HTONS(IP_OFFMASK | IP_MF)) != 0) {
 8018080:	697b      	ldr	r3, [r7, #20]
 8018082:	88db      	ldrh	r3, [r3, #6]
 8018084:	b29b      	uxth	r3, r3
 8018086:	461a      	mov	r2, r3
 8018088:	f64f 733f 	movw	r3, #65343	; 0xff3f
 801808c:	4013      	ands	r3, r2
 801808e:	2b00      	cmp	r3, #0
 8018090:	d00b      	beq.n	80180aa <ip4_input+0x172>
#if IP_REASSEMBLY /* packet fragment reassembly code present? */
    LWIP_DEBUGF(IP_DEBUG, ("IP packet is a fragment (id=0x%04"X16_F" tot_len=%"U16_F" len=%"U16_F" MF=%"U16_F" offset=%"U16_F"), calling ip4_reass()\n",
                           lwip_ntohs(IPH_ID(iphdr)), p->tot_len, lwip_ntohs(IPH_LEN(iphdr)), (u16_t)!!(IPH_OFFSET(iphdr) & PP_HTONS(IP_MF)), (u16_t)((lwip_ntohs(IPH_OFFSET(iphdr)) & IP_OFFMASK) * 8)));
    /* reassemble the packet*/
    p = ip4_reass(p);
 8018092:	6878      	ldr	r0, [r7, #4]
 8018094:	f000 fc92 	bl	80189bc <ip4_reass>
 8018098:	6078      	str	r0, [r7, #4]
    /* packet not fully reassembled yet? */
    if (p == NULL) {
 801809a:	687b      	ldr	r3, [r7, #4]
 801809c:	2b00      	cmp	r3, #0
 801809e:	d101      	bne.n	80180a4 <ip4_input+0x16c>
      return ERR_OK;
 80180a0:	2300      	movs	r3, #0
 80180a2:	e064      	b.n	801816e <ip4_input+0x236>
    }
    iphdr = (const struct ip_hdr *)p->payload;
 80180a4:	687b      	ldr	r3, [r7, #4]
 80180a6:	685b      	ldr	r3, [r3, #4]
 80180a8:	617b      	str	r3, [r7, #20]
  /* send to upper layers */
  LWIP_DEBUGF(IP_DEBUG, ("ip4_input: \n"));
  ip4_debug_print(p);
  LWIP_DEBUGF(IP_DEBUG, ("ip4_input: p->len %"U16_F" p->tot_len %"U16_F"\n", p->len, p->tot_len));

  ip_data.current_netif = netif;
 80180aa:	4a33      	ldr	r2, [pc, #204]	; (8018178 <ip4_input+0x240>)
 80180ac:	693b      	ldr	r3, [r7, #16]
 80180ae:	6013      	str	r3, [r2, #0]
  ip_data.current_input_netif = inp;
 80180b0:	4a31      	ldr	r2, [pc, #196]	; (8018178 <ip4_input+0x240>)
 80180b2:	683b      	ldr	r3, [r7, #0]
 80180b4:	6053      	str	r3, [r2, #4]
  ip_data.current_ip4_header = iphdr;
 80180b6:	4a30      	ldr	r2, [pc, #192]	; (8018178 <ip4_input+0x240>)
 80180b8:	697b      	ldr	r3, [r7, #20]
 80180ba:	6093      	str	r3, [r2, #8]
  ip_data.current_ip_header_tot_len = IPH_HL_BYTES(iphdr);
 80180bc:	697b      	ldr	r3, [r7, #20]
 80180be:	781b      	ldrb	r3, [r3, #0]
 80180c0:	f003 030f 	and.w	r3, r3, #15
 80180c4:	b2db      	uxtb	r3, r3
 80180c6:	009b      	lsls	r3, r3, #2
 80180c8:	b2db      	uxtb	r3, r3
 80180ca:	b29a      	uxth	r2, r3
 80180cc:	4b2a      	ldr	r3, [pc, #168]	; (8018178 <ip4_input+0x240>)
 80180ce:	819a      	strh	r2, [r3, #12]
  /* raw input did not eat the packet? */
  raw_status = raw_input(p, inp);
  if (raw_status != RAW_INPUT_EATEN)
#endif /* LWIP_RAW */
  {
    pbuf_remove_header(p, iphdr_hlen); /* Move to payload, no check necessary. */
 80180d0:	89fb      	ldrh	r3, [r7, #14]
 80180d2:	4619      	mov	r1, r3
 80180d4:	6878      	ldr	r0, [r7, #4]
 80180d6:	f7f8 fe5f 	bl	8010d98 <pbuf_remove_header>

    switch (IPH_PROTO(iphdr)) {
 80180da:	697b      	ldr	r3, [r7, #20]
 80180dc:	7a5b      	ldrb	r3, [r3, #9]
 80180de:	2b11      	cmp	r3, #17
 80180e0:	d006      	beq.n	80180f0 <ip4_input+0x1b8>
 80180e2:	2b11      	cmp	r3, #17
 80180e4:	dc13      	bgt.n	801810e <ip4_input+0x1d6>
 80180e6:	2b01      	cmp	r3, #1
 80180e8:	d00c      	beq.n	8018104 <ip4_input+0x1cc>
 80180ea:	2b06      	cmp	r3, #6
 80180ec:	d005      	beq.n	80180fa <ip4_input+0x1c2>
 80180ee:	e00e      	b.n	801810e <ip4_input+0x1d6>
      case IP_PROTO_UDP:
#if LWIP_UDPLITE
      case IP_PROTO_UDPLITE:
#endif /* LWIP_UDPLITE */
        MIB2_STATS_INC(mib2.ipindelivers);
        udp_input(p, inp);
 80180f0:	6839      	ldr	r1, [r7, #0]
 80180f2:	6878      	ldr	r0, [r7, #4]
 80180f4:	f7fe fc42 	bl	801697c <udp_input>
        break;
 80180f8:	e026      	b.n	8018148 <ip4_input+0x210>
#endif /* LWIP_UDP */
#if LWIP_TCP
      case IP_PROTO_TCP:
        MIB2_STATS_INC(mib2.ipindelivers);
        tcp_input(p, inp);
 80180fa:	6839      	ldr	r1, [r7, #0]
 80180fc:	6878      	ldr	r0, [r7, #4]
 80180fe:	f7fa fcfd 	bl	8012afc <tcp_input>
        break;
 8018102:	e021      	b.n	8018148 <ip4_input+0x210>
#endif /* LWIP_TCP */
#if LWIP_ICMP
      case IP_PROTO_ICMP:
        MIB2_STATS_INC(mib2.ipindelivers);
        icmp_input(p, inp);
 8018104:	6839      	ldr	r1, [r7, #0]
 8018106:	6878      	ldr	r0, [r7, #4]
 8018108:	f7ff fcc8 	bl	8017a9c <icmp_input>
        break;
 801810c:	e01c      	b.n	8018148 <ip4_input+0x210>
        } else
#endif /* LWIP_RAW */
        {
#if LWIP_ICMP
          /* send ICMP destination protocol unreachable unless is was a broadcast */
          if (!ip4_addr_isbroadcast(ip4_current_dest_addr(), netif) &&
 801810e:	4b1a      	ldr	r3, [pc, #104]	; (8018178 <ip4_input+0x240>)
 8018110:	695b      	ldr	r3, [r3, #20]
 8018112:	6939      	ldr	r1, [r7, #16]
 8018114:	4618      	mov	r0, r3
 8018116:	f000 f90b 	bl	8018330 <ip4_addr_isbroadcast_u32>
 801811a:	4603      	mov	r3, r0
 801811c:	2b00      	cmp	r3, #0
 801811e:	d10f      	bne.n	8018140 <ip4_input+0x208>
              !ip4_addr_ismulticast(ip4_current_dest_addr())) {
 8018120:	4b15      	ldr	r3, [pc, #84]	; (8018178 <ip4_input+0x240>)
 8018122:	695b      	ldr	r3, [r3, #20]
 8018124:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
          if (!ip4_addr_isbroadcast(ip4_current_dest_addr(), netif) &&
 8018128:	2be0      	cmp	r3, #224	; 0xe0
 801812a:	d009      	beq.n	8018140 <ip4_input+0x208>
            pbuf_header_force(p, (s16_t)iphdr_hlen); /* Move to ip header, no check necessary. */
 801812c:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8018130:	4619      	mov	r1, r3
 8018132:	6878      	ldr	r0, [r7, #4]
 8018134:	f7f8 fea3 	bl	8010e7e <pbuf_header_force>
            icmp_dest_unreach(p, ICMP_DUR_PROTO);
 8018138:	2102      	movs	r1, #2
 801813a:	6878      	ldr	r0, [r7, #4]
 801813c:	f7ff fdce 	bl	8017cdc <icmp_dest_unreach>

          IP_STATS_INC(ip.proterr);
          IP_STATS_INC(ip.drop);
          MIB2_STATS_INC(mib2.ipinunknownprotos);
        }
        pbuf_free(p);
 8018140:	6878      	ldr	r0, [r7, #4]
 8018142:	f7f8 feaf 	bl	8010ea4 <pbuf_free>
        break;
 8018146:	bf00      	nop
    }
  }

  /* @todo: this is not really necessary... */
  ip_data.current_netif = NULL;
 8018148:	4b0b      	ldr	r3, [pc, #44]	; (8018178 <ip4_input+0x240>)
 801814a:	2200      	movs	r2, #0
 801814c:	601a      	str	r2, [r3, #0]
  ip_data.current_input_netif = NULL;
 801814e:	4b0a      	ldr	r3, [pc, #40]	; (8018178 <ip4_input+0x240>)
 8018150:	2200      	movs	r2, #0
 8018152:	605a      	str	r2, [r3, #4]
  ip_data.current_ip4_header = NULL;
 8018154:	4b08      	ldr	r3, [pc, #32]	; (8018178 <ip4_input+0x240>)
 8018156:	2200      	movs	r2, #0
 8018158:	609a      	str	r2, [r3, #8]
  ip_data.current_ip_header_tot_len = 0;
 801815a:	4b07      	ldr	r3, [pc, #28]	; (8018178 <ip4_input+0x240>)
 801815c:	2200      	movs	r2, #0
 801815e:	819a      	strh	r2, [r3, #12]
  ip4_addr_set_any(ip4_current_src_addr());
 8018160:	4b05      	ldr	r3, [pc, #20]	; (8018178 <ip4_input+0x240>)
 8018162:	2200      	movs	r2, #0
 8018164:	611a      	str	r2, [r3, #16]
  ip4_addr_set_any(ip4_current_dest_addr());
 8018166:	4b04      	ldr	r3, [pc, #16]	; (8018178 <ip4_input+0x240>)
 8018168:	2200      	movs	r2, #0
 801816a:	615a      	str	r2, [r3, #20]

  return ERR_OK;
 801816c:	2300      	movs	r3, #0
}
 801816e:	4618      	mov	r0, r3
 8018170:	3718      	adds	r7, #24
 8018172:	46bd      	mov	sp, r7
 8018174:	bd80      	pop	{r7, pc}
 8018176:	bf00      	nop
 8018178:	200007fc 	.word	0x200007fc
 801817c:	200070cc 	.word	0x200070cc

08018180 <ip4_output_if>:
 */
err_t
ip4_output_if(struct pbuf *p, const ip4_addr_t *src, const ip4_addr_t *dest,
              u8_t ttl, u8_t tos,
              u8_t proto, struct netif *netif)
{
 8018180:	b580      	push	{r7, lr}
 8018182:	b08a      	sub	sp, #40	; 0x28
 8018184:	af04      	add	r7, sp, #16
 8018186:	60f8      	str	r0, [r7, #12]
 8018188:	60b9      	str	r1, [r7, #8]
 801818a:	607a      	str	r2, [r7, #4]
 801818c:	70fb      	strb	r3, [r7, #3]
ip4_output_if_opt(struct pbuf *p, const ip4_addr_t *src, const ip4_addr_t *dest,
                  u8_t ttl, u8_t tos, u8_t proto, struct netif *netif, void *ip_options,
                  u16_t optlen)
{
#endif /* IP_OPTIONS_SEND */
  const ip4_addr_t *src_used = src;
 801818e:	68bb      	ldr	r3, [r7, #8]
 8018190:	617b      	str	r3, [r7, #20]
  if (dest != LWIP_IP_HDRINCL) {
 8018192:	687b      	ldr	r3, [r7, #4]
 8018194:	2b00      	cmp	r3, #0
 8018196:	d009      	beq.n	80181ac <ip4_output_if+0x2c>
    if (ip4_addr_isany(src)) {
 8018198:	68bb      	ldr	r3, [r7, #8]
 801819a:	2b00      	cmp	r3, #0
 801819c:	d003      	beq.n	80181a6 <ip4_output_if+0x26>
 801819e:	68bb      	ldr	r3, [r7, #8]
 80181a0:	681b      	ldr	r3, [r3, #0]
 80181a2:	2b00      	cmp	r3, #0
 80181a4:	d102      	bne.n	80181ac <ip4_output_if+0x2c>
      src_used = netif_ip4_addr(netif);
 80181a6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80181a8:	3304      	adds	r3, #4
 80181aa:	617b      	str	r3, [r7, #20]

#if IP_OPTIONS_SEND
  return ip4_output_if_opt_src(p, src_used, dest, ttl, tos, proto, netif,
                               ip_options, optlen);
#else /* IP_OPTIONS_SEND */
  return ip4_output_if_src(p, src_used, dest, ttl, tos, proto, netif);
 80181ac:	78fa      	ldrb	r2, [r7, #3]
 80181ae:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80181b0:	9302      	str	r3, [sp, #8]
 80181b2:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 80181b6:	9301      	str	r3, [sp, #4]
 80181b8:	f897 3020 	ldrb.w	r3, [r7, #32]
 80181bc:	9300      	str	r3, [sp, #0]
 80181be:	4613      	mov	r3, r2
 80181c0:	687a      	ldr	r2, [r7, #4]
 80181c2:	6979      	ldr	r1, [r7, #20]
 80181c4:	68f8      	ldr	r0, [r7, #12]
 80181c6:	f000 f805 	bl	80181d4 <ip4_output_if_src>
 80181ca:	4603      	mov	r3, r0
#endif /* IP_OPTIONS_SEND */
}
 80181cc:	4618      	mov	r0, r3
 80181ce:	3718      	adds	r7, #24
 80181d0:	46bd      	mov	sp, r7
 80181d2:	bd80      	pop	{r7, pc}

080181d4 <ip4_output_if_src>:
 */
err_t
ip4_output_if_src(struct pbuf *p, const ip4_addr_t *src, const ip4_addr_t *dest,
                  u8_t ttl, u8_t tos,
                  u8_t proto, struct netif *netif)
{
 80181d4:	b580      	push	{r7, lr}
 80181d6:	b088      	sub	sp, #32
 80181d8:	af00      	add	r7, sp, #0
 80181da:	60f8      	str	r0, [r7, #12]
 80181dc:	60b9      	str	r1, [r7, #8]
 80181de:	607a      	str	r2, [r7, #4]
 80181e0:	70fb      	strb	r3, [r7, #3]
#if CHECKSUM_GEN_IP_INLINE
  u32_t chk_sum = 0;
#endif /* CHECKSUM_GEN_IP_INLINE */

  LWIP_ASSERT_CORE_LOCKED();
  LWIP_IP_CHECK_PBUF_REF_COUNT_FOR_TX(p);
 80181e2:	68fb      	ldr	r3, [r7, #12]
 80181e4:	7b9b      	ldrb	r3, [r3, #14]
 80181e6:	2b01      	cmp	r3, #1
 80181e8:	d006      	beq.n	80181f8 <ip4_output_if_src+0x24>
 80181ea:	4b4b      	ldr	r3, [pc, #300]	; (8018318 <ip4_output_if_src+0x144>)
 80181ec:	f44f 7255 	mov.w	r2, #852	; 0x354
 80181f0:	494a      	ldr	r1, [pc, #296]	; (801831c <ip4_output_if_src+0x148>)
 80181f2:	484b      	ldr	r0, [pc, #300]	; (8018320 <ip4_output_if_src+0x14c>)
 80181f4:	f001 fd2c 	bl	8019c50 <iprintf>

  MIB2_STATS_INC(mib2.ipoutrequests);

  /* Should the IP header be generated or is it already included in p? */
  if (dest != LWIP_IP_HDRINCL) {
 80181f8:	687b      	ldr	r3, [r7, #4]
 80181fa:	2b00      	cmp	r3, #0
 80181fc:	d060      	beq.n	80182c0 <ip4_output_if_src+0xec>
    u16_t ip_hlen = IP_HLEN;
 80181fe:	2314      	movs	r3, #20
 8018200:	837b      	strh	r3, [r7, #26]
      }
#endif /* CHECKSUM_GEN_IP_INLINE */
    }
#endif /* IP_OPTIONS_SEND */
    /* generate IP header */
    if (pbuf_add_header(p, IP_HLEN)) {
 8018202:	2114      	movs	r1, #20
 8018204:	68f8      	ldr	r0, [r7, #12]
 8018206:	f7f8 fdb7 	bl	8010d78 <pbuf_add_header>
 801820a:	4603      	mov	r3, r0
 801820c:	2b00      	cmp	r3, #0
 801820e:	d002      	beq.n	8018216 <ip4_output_if_src+0x42>
      LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("ip4_output: not enough room for IP header in pbuf\n"));

      IP_STATS_INC(ip.err);
      MIB2_STATS_INC(mib2.ipoutdiscards);
      return ERR_BUF;
 8018210:	f06f 0301 	mvn.w	r3, #1
 8018214:	e07c      	b.n	8018310 <ip4_output_if_src+0x13c>
    }

    iphdr = (struct ip_hdr *)p->payload;
 8018216:	68fb      	ldr	r3, [r7, #12]
 8018218:	685b      	ldr	r3, [r3, #4]
 801821a:	61fb      	str	r3, [r7, #28]
    LWIP_ASSERT("check that first pbuf can hold struct ip_hdr",
 801821c:	68fb      	ldr	r3, [r7, #12]
 801821e:	895b      	ldrh	r3, [r3, #10]
 8018220:	2b13      	cmp	r3, #19
 8018222:	d806      	bhi.n	8018232 <ip4_output_if_src+0x5e>
 8018224:	4b3c      	ldr	r3, [pc, #240]	; (8018318 <ip4_output_if_src+0x144>)
 8018226:	f44f 7262 	mov.w	r2, #904	; 0x388
 801822a:	493e      	ldr	r1, [pc, #248]	; (8018324 <ip4_output_if_src+0x150>)
 801822c:	483c      	ldr	r0, [pc, #240]	; (8018320 <ip4_output_if_src+0x14c>)
 801822e:	f001 fd0f 	bl	8019c50 <iprintf>
                (p->len >= sizeof(struct ip_hdr)));

    IPH_TTL_SET(iphdr, ttl);
 8018232:	69fb      	ldr	r3, [r7, #28]
 8018234:	78fa      	ldrb	r2, [r7, #3]
 8018236:	721a      	strb	r2, [r3, #8]
    IPH_PROTO_SET(iphdr, proto);
 8018238:	69fb      	ldr	r3, [r7, #28]
 801823a:	f897 202c 	ldrb.w	r2, [r7, #44]	; 0x2c
 801823e:	725a      	strb	r2, [r3, #9]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += PP_NTOHS(proto | (ttl << 8));
#endif /* CHECKSUM_GEN_IP_INLINE */

    /* dest cannot be NULL here */
    ip4_addr_copy(iphdr->dest, *dest);
 8018240:	687b      	ldr	r3, [r7, #4]
 8018242:	681a      	ldr	r2, [r3, #0]
 8018244:	69fb      	ldr	r3, [r7, #28]
 8018246:	611a      	str	r2, [r3, #16]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += ip4_addr_get_u32(&iphdr->dest) & 0xFFFF;
    chk_sum += ip4_addr_get_u32(&iphdr->dest) >> 16;
#endif /* CHECKSUM_GEN_IP_INLINE */

    IPH_VHL_SET(iphdr, 4, ip_hlen / 4);
 8018248:	8b7b      	ldrh	r3, [r7, #26]
 801824a:	089b      	lsrs	r3, r3, #2
 801824c:	b29b      	uxth	r3, r3
 801824e:	b2db      	uxtb	r3, r3
 8018250:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8018254:	b2da      	uxtb	r2, r3
 8018256:	69fb      	ldr	r3, [r7, #28]
 8018258:	701a      	strb	r2, [r3, #0]
    IPH_TOS_SET(iphdr, tos);
 801825a:	69fb      	ldr	r3, [r7, #28]
 801825c:	f897 2028 	ldrb.w	r2, [r7, #40]	; 0x28
 8018260:	705a      	strb	r2, [r3, #1]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += PP_NTOHS(tos | (iphdr->_v_hl << 8));
#endif /* CHECKSUM_GEN_IP_INLINE */
    IPH_LEN_SET(iphdr, lwip_htons(p->tot_len));
 8018262:	68fb      	ldr	r3, [r7, #12]
 8018264:	891b      	ldrh	r3, [r3, #8]
 8018266:	4618      	mov	r0, r3
 8018268:	f7f7 fa38 	bl	800f6dc <lwip_htons>
 801826c:	4603      	mov	r3, r0
 801826e:	461a      	mov	r2, r3
 8018270:	69fb      	ldr	r3, [r7, #28]
 8018272:	805a      	strh	r2, [r3, #2]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += iphdr->_len;
#endif /* CHECKSUM_GEN_IP_INLINE */
    IPH_OFFSET_SET(iphdr, 0);
 8018274:	69fb      	ldr	r3, [r7, #28]
 8018276:	2200      	movs	r2, #0
 8018278:	719a      	strb	r2, [r3, #6]
 801827a:	2200      	movs	r2, #0
 801827c:	71da      	strb	r2, [r3, #7]
    IPH_ID_SET(iphdr, lwip_htons(ip_id));
 801827e:	4b2a      	ldr	r3, [pc, #168]	; (8018328 <ip4_output_if_src+0x154>)
 8018280:	881b      	ldrh	r3, [r3, #0]
 8018282:	4618      	mov	r0, r3
 8018284:	f7f7 fa2a 	bl	800f6dc <lwip_htons>
 8018288:	4603      	mov	r3, r0
 801828a:	461a      	mov	r2, r3
 801828c:	69fb      	ldr	r3, [r7, #28]
 801828e:	809a      	strh	r2, [r3, #4]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += iphdr->_id;
#endif /* CHECKSUM_GEN_IP_INLINE */
    ++ip_id;
 8018290:	4b25      	ldr	r3, [pc, #148]	; (8018328 <ip4_output_if_src+0x154>)
 8018292:	881b      	ldrh	r3, [r3, #0]
 8018294:	3301      	adds	r3, #1
 8018296:	b29a      	uxth	r2, r3
 8018298:	4b23      	ldr	r3, [pc, #140]	; (8018328 <ip4_output_if_src+0x154>)
 801829a:	801a      	strh	r2, [r3, #0]

    if (src == NULL) {
 801829c:	68bb      	ldr	r3, [r7, #8]
 801829e:	2b00      	cmp	r3, #0
 80182a0:	d104      	bne.n	80182ac <ip4_output_if_src+0xd8>
      ip4_addr_copy(iphdr->src, *IP4_ADDR_ANY4);
 80182a2:	4b22      	ldr	r3, [pc, #136]	; (801832c <ip4_output_if_src+0x158>)
 80182a4:	681a      	ldr	r2, [r3, #0]
 80182a6:	69fb      	ldr	r3, [r7, #28]
 80182a8:	60da      	str	r2, [r3, #12]
 80182aa:	e003      	b.n	80182b4 <ip4_output_if_src+0xe0>
    } else {
      /* src cannot be NULL here */
      ip4_addr_copy(iphdr->src, *src);
 80182ac:	68bb      	ldr	r3, [r7, #8]
 80182ae:	681a      	ldr	r2, [r3, #0]
 80182b0:	69fb      	ldr	r3, [r7, #28]
 80182b2:	60da      	str	r2, [r3, #12]
    else {
      IPH_CHKSUM_SET(iphdr, 0);
    }
#endif /* LWIP_CHECKSUM_CTRL_PER_NETIF*/
#else /* CHECKSUM_GEN_IP_INLINE */
    IPH_CHKSUM_SET(iphdr, 0);
 80182b4:	69fb      	ldr	r3, [r7, #28]
 80182b6:	2200      	movs	r2, #0
 80182b8:	729a      	strb	r2, [r3, #10]
 80182ba:	2200      	movs	r2, #0
 80182bc:	72da      	strb	r2, [r3, #11]
 80182be:	e00f      	b.n	80182e0 <ip4_output_if_src+0x10c>
    }
#endif /* CHECKSUM_GEN_IP */
#endif /* CHECKSUM_GEN_IP_INLINE */
  } else {
    /* IP header already included in p */
    if (p->len < IP_HLEN) {
 80182c0:	68fb      	ldr	r3, [r7, #12]
 80182c2:	895b      	ldrh	r3, [r3, #10]
 80182c4:	2b13      	cmp	r3, #19
 80182c6:	d802      	bhi.n	80182ce <ip4_output_if_src+0xfa>
      LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("ip4_output: LWIP_IP_HDRINCL but pbuf is too short\n"));
      IP_STATS_INC(ip.err);
      MIB2_STATS_INC(mib2.ipoutdiscards);
      return ERR_BUF;
 80182c8:	f06f 0301 	mvn.w	r3, #1
 80182cc:	e020      	b.n	8018310 <ip4_output_if_src+0x13c>
    }
    iphdr = (struct ip_hdr *)p->payload;
 80182ce:	68fb      	ldr	r3, [r7, #12]
 80182d0:	685b      	ldr	r3, [r3, #4]
 80182d2:	61fb      	str	r3, [r7, #28]
    ip4_addr_copy(dest_addr, iphdr->dest);
 80182d4:	69fb      	ldr	r3, [r7, #28]
 80182d6:	691b      	ldr	r3, [r3, #16]
 80182d8:	617b      	str	r3, [r7, #20]
    dest = &dest_addr;
 80182da:	f107 0314 	add.w	r3, r7, #20
 80182de:	607b      	str	r3, [r7, #4]
  }
#endif /* LWIP_MULTICAST_TX_OPTIONS */
#endif /* ENABLE_LOOPBACK */
#if IP_FRAG
  /* don't fragment if interface has mtu set to 0 [loopif] */
  if (netif->mtu && (p->tot_len > netif->mtu)) {
 80182e0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80182e2:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 80182e4:	2b00      	cmp	r3, #0
 80182e6:	d00c      	beq.n	8018302 <ip4_output_if_src+0x12e>
 80182e8:	68fb      	ldr	r3, [r7, #12]
 80182ea:	891a      	ldrh	r2, [r3, #8]
 80182ec:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80182ee:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 80182f0:	429a      	cmp	r2, r3
 80182f2:	d906      	bls.n	8018302 <ip4_output_if_src+0x12e>
    return ip4_frag(p, netif, dest);
 80182f4:	687a      	ldr	r2, [r7, #4]
 80182f6:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80182f8:	68f8      	ldr	r0, [r7, #12]
 80182fa:	f000 fd53 	bl	8018da4 <ip4_frag>
 80182fe:	4603      	mov	r3, r0
 8018300:	e006      	b.n	8018310 <ip4_output_if_src+0x13c>
  }
#endif /* IP_FRAG */

  LWIP_DEBUGF(IP_DEBUG, ("ip4_output_if: call netif->output()\n"));
  return netif->output(netif, p, dest);
 8018302:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8018304:	695b      	ldr	r3, [r3, #20]
 8018306:	687a      	ldr	r2, [r7, #4]
 8018308:	68f9      	ldr	r1, [r7, #12]
 801830a:	6b38      	ldr	r0, [r7, #48]	; 0x30
 801830c:	4798      	blx	r3
 801830e:	4603      	mov	r3, r0
}
 8018310:	4618      	mov	r0, r3
 8018312:	3720      	adds	r7, #32
 8018314:	46bd      	mov	sp, r7
 8018316:	bd80      	pop	{r7, pc}
 8018318:	0801ebd4 	.word	0x0801ebd4
 801831c:	0801ec08 	.word	0x0801ec08
 8018320:	0801ec14 	.word	0x0801ec14
 8018324:	0801ec3c 	.word	0x0801ec3c
 8018328:	2000722a 	.word	0x2000722a
 801832c:	0801f03c 	.word	0x0801f03c

08018330 <ip4_addr_isbroadcast_u32>:
 * @param netif the network interface against which the address is checked
 * @return returns non-zero if the address is a broadcast address
 */
u8_t
ip4_addr_isbroadcast_u32(u32_t addr, const struct netif *netif)
{
 8018330:	b480      	push	{r7}
 8018332:	b085      	sub	sp, #20
 8018334:	af00      	add	r7, sp, #0
 8018336:	6078      	str	r0, [r7, #4]
 8018338:	6039      	str	r1, [r7, #0]
  ip4_addr_t ipaddr;
  ip4_addr_set_u32(&ipaddr, addr);
 801833a:	687b      	ldr	r3, [r7, #4]
 801833c:	60fb      	str	r3, [r7, #12]

  /* all ones (broadcast) or all zeroes (old skool broadcast) */
  if ((~addr == IPADDR_ANY) ||
 801833e:	687b      	ldr	r3, [r7, #4]
 8018340:	f1b3 3fff 	cmp.w	r3, #4294967295
 8018344:	d002      	beq.n	801834c <ip4_addr_isbroadcast_u32+0x1c>
 8018346:	687b      	ldr	r3, [r7, #4]
 8018348:	2b00      	cmp	r3, #0
 801834a:	d101      	bne.n	8018350 <ip4_addr_isbroadcast_u32+0x20>
      (addr == IPADDR_ANY)) {
    return 1;
 801834c:	2301      	movs	r3, #1
 801834e:	e02a      	b.n	80183a6 <ip4_addr_isbroadcast_u32+0x76>
    /* no broadcast support on this network interface? */
  } else if ((netif->flags & NETIF_FLAG_BROADCAST) == 0) {
 8018350:	683b      	ldr	r3, [r7, #0]
 8018352:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8018356:	f003 0302 	and.w	r3, r3, #2
 801835a:	2b00      	cmp	r3, #0
 801835c:	d101      	bne.n	8018362 <ip4_addr_isbroadcast_u32+0x32>
    /* the given address cannot be a broadcast address
     * nor can we check against any broadcast addresses */
    return 0;
 801835e:	2300      	movs	r3, #0
 8018360:	e021      	b.n	80183a6 <ip4_addr_isbroadcast_u32+0x76>
    /* address matches network interface address exactly? => no broadcast */
  } else if (addr == ip4_addr_get_u32(netif_ip4_addr(netif))) {
 8018362:	683b      	ldr	r3, [r7, #0]
 8018364:	3304      	adds	r3, #4
 8018366:	681b      	ldr	r3, [r3, #0]
 8018368:	687a      	ldr	r2, [r7, #4]
 801836a:	429a      	cmp	r2, r3
 801836c:	d101      	bne.n	8018372 <ip4_addr_isbroadcast_u32+0x42>
    return 0;
 801836e:	2300      	movs	r3, #0
 8018370:	e019      	b.n	80183a6 <ip4_addr_isbroadcast_u32+0x76>
    /*  on the same (sub) network... */
  } else if (ip4_addr_netcmp(&ipaddr, netif_ip4_addr(netif), netif_ip4_netmask(netif))
 8018372:	68fa      	ldr	r2, [r7, #12]
 8018374:	683b      	ldr	r3, [r7, #0]
 8018376:	3304      	adds	r3, #4
 8018378:	681b      	ldr	r3, [r3, #0]
 801837a:	405a      	eors	r2, r3
 801837c:	683b      	ldr	r3, [r7, #0]
 801837e:	3308      	adds	r3, #8
 8018380:	681b      	ldr	r3, [r3, #0]
 8018382:	4013      	ands	r3, r2
 8018384:	2b00      	cmp	r3, #0
 8018386:	d10d      	bne.n	80183a4 <ip4_addr_isbroadcast_u32+0x74>
             /* ...and host identifier bits are all ones? =>... */
             && ((addr & ~ip4_addr_get_u32(netif_ip4_netmask(netif))) ==
 8018388:	683b      	ldr	r3, [r7, #0]
 801838a:	3308      	adds	r3, #8
 801838c:	681b      	ldr	r3, [r3, #0]
 801838e:	43da      	mvns	r2, r3
 8018390:	687b      	ldr	r3, [r7, #4]
 8018392:	401a      	ands	r2, r3
                 (IPADDR_BROADCAST & ~ip4_addr_get_u32(netif_ip4_netmask(netif))))) {
 8018394:	683b      	ldr	r3, [r7, #0]
 8018396:	3308      	adds	r3, #8
 8018398:	681b      	ldr	r3, [r3, #0]
 801839a:	43db      	mvns	r3, r3
             && ((addr & ~ip4_addr_get_u32(netif_ip4_netmask(netif))) ==
 801839c:	429a      	cmp	r2, r3
 801839e:	d101      	bne.n	80183a4 <ip4_addr_isbroadcast_u32+0x74>
    /* => network broadcast address */
    return 1;
 80183a0:	2301      	movs	r3, #1
 80183a2:	e000      	b.n	80183a6 <ip4_addr_isbroadcast_u32+0x76>
  } else {
    return 0;
 80183a4:	2300      	movs	r3, #0
  }
}
 80183a6:	4618      	mov	r0, r3
 80183a8:	3714      	adds	r7, #20
 80183aa:	46bd      	mov	sp, r7
 80183ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80183b0:	4770      	bx	lr
	...

080183b4 <ip_reass_tmr>:
 *
 * Should be called every 1000 msec (defined by IP_TMR_INTERVAL).
 */
void
ip_reass_tmr(void)
{
 80183b4:	b580      	push	{r7, lr}
 80183b6:	b084      	sub	sp, #16
 80183b8:	af00      	add	r7, sp, #0
  struct ip_reassdata *r, *prev = NULL;
 80183ba:	2300      	movs	r3, #0
 80183bc:	60bb      	str	r3, [r7, #8]

  r = reassdatagrams;
 80183be:	4b12      	ldr	r3, [pc, #72]	; (8018408 <ip_reass_tmr+0x54>)
 80183c0:	681b      	ldr	r3, [r3, #0]
 80183c2:	60fb      	str	r3, [r7, #12]
  while (r != NULL) {
 80183c4:	e018      	b.n	80183f8 <ip_reass_tmr+0x44>
    /* Decrement the timer. Once it reaches 0,
     * clean up the incomplete fragment assembly */
    if (r->timer > 0) {
 80183c6:	68fb      	ldr	r3, [r7, #12]
 80183c8:	7fdb      	ldrb	r3, [r3, #31]
 80183ca:	2b00      	cmp	r3, #0
 80183cc:	d00b      	beq.n	80183e6 <ip_reass_tmr+0x32>
      r->timer--;
 80183ce:	68fb      	ldr	r3, [r7, #12]
 80183d0:	7fdb      	ldrb	r3, [r3, #31]
 80183d2:	3b01      	subs	r3, #1
 80183d4:	b2da      	uxtb	r2, r3
 80183d6:	68fb      	ldr	r3, [r7, #12]
 80183d8:	77da      	strb	r2, [r3, #31]
      LWIP_DEBUGF(IP_REASS_DEBUG, ("ip_reass_tmr: timer dec %"U16_F"\n", (u16_t)r->timer));
      prev = r;
 80183da:	68fb      	ldr	r3, [r7, #12]
 80183dc:	60bb      	str	r3, [r7, #8]
      r = r->next;
 80183de:	68fb      	ldr	r3, [r7, #12]
 80183e0:	681b      	ldr	r3, [r3, #0]
 80183e2:	60fb      	str	r3, [r7, #12]
 80183e4:	e008      	b.n	80183f8 <ip_reass_tmr+0x44>
    } else {
      /* reassembly timed out */
      struct ip_reassdata *tmp;
      LWIP_DEBUGF(IP_REASS_DEBUG, ("ip_reass_tmr: timer timed out\n"));
      tmp = r;
 80183e6:	68fb      	ldr	r3, [r7, #12]
 80183e8:	607b      	str	r3, [r7, #4]
      /* get the next pointer before freeing */
      r = r->next;
 80183ea:	68fb      	ldr	r3, [r7, #12]
 80183ec:	681b      	ldr	r3, [r3, #0]
 80183ee:	60fb      	str	r3, [r7, #12]
      /* free the helper struct and all enqueued pbufs */
      ip_reass_free_complete_datagram(tmp, prev);
 80183f0:	68b9      	ldr	r1, [r7, #8]
 80183f2:	6878      	ldr	r0, [r7, #4]
 80183f4:	f000 f80a 	bl	801840c <ip_reass_free_complete_datagram>
  while (r != NULL) {
 80183f8:	68fb      	ldr	r3, [r7, #12]
 80183fa:	2b00      	cmp	r3, #0
 80183fc:	d1e3      	bne.n	80183c6 <ip_reass_tmr+0x12>
    }
  }
}
 80183fe:	bf00      	nop
 8018400:	bf00      	nop
 8018402:	3710      	adds	r7, #16
 8018404:	46bd      	mov	sp, r7
 8018406:	bd80      	pop	{r7, pc}
 8018408:	2000722c 	.word	0x2000722c

0801840c <ip_reass_free_complete_datagram>:
 * @param prev the previous datagram in the linked list
 * @return the number of pbufs freed
 */
static int
ip_reass_free_complete_datagram(struct ip_reassdata *ipr, struct ip_reassdata *prev)
{
 801840c:	b580      	push	{r7, lr}
 801840e:	b088      	sub	sp, #32
 8018410:	af00      	add	r7, sp, #0
 8018412:	6078      	str	r0, [r7, #4]
 8018414:	6039      	str	r1, [r7, #0]
  u16_t pbufs_freed = 0;
 8018416:	2300      	movs	r3, #0
 8018418:	83fb      	strh	r3, [r7, #30]
  u16_t clen;
  struct pbuf *p;
  struct ip_reass_helper *iprh;

  LWIP_ASSERT("prev != ipr", prev != ipr);
 801841a:	683a      	ldr	r2, [r7, #0]
 801841c:	687b      	ldr	r3, [r7, #4]
 801841e:	429a      	cmp	r2, r3
 8018420:	d105      	bne.n	801842e <ip_reass_free_complete_datagram+0x22>
 8018422:	4b45      	ldr	r3, [pc, #276]	; (8018538 <ip_reass_free_complete_datagram+0x12c>)
 8018424:	22ab      	movs	r2, #171	; 0xab
 8018426:	4945      	ldr	r1, [pc, #276]	; (801853c <ip_reass_free_complete_datagram+0x130>)
 8018428:	4845      	ldr	r0, [pc, #276]	; (8018540 <ip_reass_free_complete_datagram+0x134>)
 801842a:	f001 fc11 	bl	8019c50 <iprintf>
  if (prev != NULL) {
 801842e:	683b      	ldr	r3, [r7, #0]
 8018430:	2b00      	cmp	r3, #0
 8018432:	d00a      	beq.n	801844a <ip_reass_free_complete_datagram+0x3e>
    LWIP_ASSERT("prev->next == ipr", prev->next == ipr);
 8018434:	683b      	ldr	r3, [r7, #0]
 8018436:	681b      	ldr	r3, [r3, #0]
 8018438:	687a      	ldr	r2, [r7, #4]
 801843a:	429a      	cmp	r2, r3
 801843c:	d005      	beq.n	801844a <ip_reass_free_complete_datagram+0x3e>
 801843e:	4b3e      	ldr	r3, [pc, #248]	; (8018538 <ip_reass_free_complete_datagram+0x12c>)
 8018440:	22ad      	movs	r2, #173	; 0xad
 8018442:	4940      	ldr	r1, [pc, #256]	; (8018544 <ip_reass_free_complete_datagram+0x138>)
 8018444:	483e      	ldr	r0, [pc, #248]	; (8018540 <ip_reass_free_complete_datagram+0x134>)
 8018446:	f001 fc03 	bl	8019c50 <iprintf>
  }

  MIB2_STATS_INC(mib2.ipreasmfails);
#if LWIP_ICMP
  iprh = (struct ip_reass_helper *)ipr->p->payload;
 801844a:	687b      	ldr	r3, [r7, #4]
 801844c:	685b      	ldr	r3, [r3, #4]
 801844e:	685b      	ldr	r3, [r3, #4]
 8018450:	617b      	str	r3, [r7, #20]
  if (iprh->start == 0) {
 8018452:	697b      	ldr	r3, [r7, #20]
 8018454:	889b      	ldrh	r3, [r3, #4]
 8018456:	b29b      	uxth	r3, r3
 8018458:	2b00      	cmp	r3, #0
 801845a:	d12a      	bne.n	80184b2 <ip_reass_free_complete_datagram+0xa6>
    /* The first fragment was received, send ICMP time exceeded. */
    /* First, de-queue the first pbuf from r->p. */
    p = ipr->p;
 801845c:	687b      	ldr	r3, [r7, #4]
 801845e:	685b      	ldr	r3, [r3, #4]
 8018460:	61bb      	str	r3, [r7, #24]
    ipr->p = iprh->next_pbuf;
 8018462:	697b      	ldr	r3, [r7, #20]
 8018464:	681a      	ldr	r2, [r3, #0]
 8018466:	687b      	ldr	r3, [r7, #4]
 8018468:	605a      	str	r2, [r3, #4]
    /* Then, copy the original header into it. */
    SMEMCPY(p->payload, &ipr->iphdr, IP_HLEN);
 801846a:	69bb      	ldr	r3, [r7, #24]
 801846c:	6858      	ldr	r0, [r3, #4]
 801846e:	687b      	ldr	r3, [r7, #4]
 8018470:	3308      	adds	r3, #8
 8018472:	2214      	movs	r2, #20
 8018474:	4619      	mov	r1, r3
 8018476:	f001 fdba 	bl	8019fee <memcpy>
    icmp_time_exceeded(p, ICMP_TE_FRAG);
 801847a:	2101      	movs	r1, #1
 801847c:	69b8      	ldr	r0, [r7, #24]
 801847e:	f7ff fc3d 	bl	8017cfc <icmp_time_exceeded>
    clen = pbuf_clen(p);
 8018482:	69b8      	ldr	r0, [r7, #24]
 8018484:	f7f8 fd96 	bl	8010fb4 <pbuf_clen>
 8018488:	4603      	mov	r3, r0
 801848a:	827b      	strh	r3, [r7, #18]
    LWIP_ASSERT("pbufs_freed + clen <= 0xffff", pbufs_freed + clen <= 0xffff);
 801848c:	8bfa      	ldrh	r2, [r7, #30]
 801848e:	8a7b      	ldrh	r3, [r7, #18]
 8018490:	4413      	add	r3, r2
 8018492:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8018496:	db05      	blt.n	80184a4 <ip_reass_free_complete_datagram+0x98>
 8018498:	4b27      	ldr	r3, [pc, #156]	; (8018538 <ip_reass_free_complete_datagram+0x12c>)
 801849a:	22bc      	movs	r2, #188	; 0xbc
 801849c:	492a      	ldr	r1, [pc, #168]	; (8018548 <ip_reass_free_complete_datagram+0x13c>)
 801849e:	4828      	ldr	r0, [pc, #160]	; (8018540 <ip_reass_free_complete_datagram+0x134>)
 80184a0:	f001 fbd6 	bl	8019c50 <iprintf>
    pbufs_freed = (u16_t)(pbufs_freed + clen);
 80184a4:	8bfa      	ldrh	r2, [r7, #30]
 80184a6:	8a7b      	ldrh	r3, [r7, #18]
 80184a8:	4413      	add	r3, r2
 80184aa:	83fb      	strh	r3, [r7, #30]
    pbuf_free(p);
 80184ac:	69b8      	ldr	r0, [r7, #24]
 80184ae:	f7f8 fcf9 	bl	8010ea4 <pbuf_free>
  }
#endif /* LWIP_ICMP */

  /* First, free all received pbufs.  The individual pbufs need to be released
     separately as they have not yet been chained */
  p = ipr->p;
 80184b2:	687b      	ldr	r3, [r7, #4]
 80184b4:	685b      	ldr	r3, [r3, #4]
 80184b6:	61bb      	str	r3, [r7, #24]
  while (p != NULL) {
 80184b8:	e01f      	b.n	80184fa <ip_reass_free_complete_datagram+0xee>
    struct pbuf *pcur;
    iprh = (struct ip_reass_helper *)p->payload;
 80184ba:	69bb      	ldr	r3, [r7, #24]
 80184bc:	685b      	ldr	r3, [r3, #4]
 80184be:	617b      	str	r3, [r7, #20]
    pcur = p;
 80184c0:	69bb      	ldr	r3, [r7, #24]
 80184c2:	60fb      	str	r3, [r7, #12]
    /* get the next pointer before freeing */
    p = iprh->next_pbuf;
 80184c4:	697b      	ldr	r3, [r7, #20]
 80184c6:	681b      	ldr	r3, [r3, #0]
 80184c8:	61bb      	str	r3, [r7, #24]
    clen = pbuf_clen(pcur);
 80184ca:	68f8      	ldr	r0, [r7, #12]
 80184cc:	f7f8 fd72 	bl	8010fb4 <pbuf_clen>
 80184d0:	4603      	mov	r3, r0
 80184d2:	827b      	strh	r3, [r7, #18]
    LWIP_ASSERT("pbufs_freed + clen <= 0xffff", pbufs_freed + clen <= 0xffff);
 80184d4:	8bfa      	ldrh	r2, [r7, #30]
 80184d6:	8a7b      	ldrh	r3, [r7, #18]
 80184d8:	4413      	add	r3, r2
 80184da:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80184de:	db05      	blt.n	80184ec <ip_reass_free_complete_datagram+0xe0>
 80184e0:	4b15      	ldr	r3, [pc, #84]	; (8018538 <ip_reass_free_complete_datagram+0x12c>)
 80184e2:	22cc      	movs	r2, #204	; 0xcc
 80184e4:	4918      	ldr	r1, [pc, #96]	; (8018548 <ip_reass_free_complete_datagram+0x13c>)
 80184e6:	4816      	ldr	r0, [pc, #88]	; (8018540 <ip_reass_free_complete_datagram+0x134>)
 80184e8:	f001 fbb2 	bl	8019c50 <iprintf>
    pbufs_freed = (u16_t)(pbufs_freed + clen);
 80184ec:	8bfa      	ldrh	r2, [r7, #30]
 80184ee:	8a7b      	ldrh	r3, [r7, #18]
 80184f0:	4413      	add	r3, r2
 80184f2:	83fb      	strh	r3, [r7, #30]
    pbuf_free(pcur);
 80184f4:	68f8      	ldr	r0, [r7, #12]
 80184f6:	f7f8 fcd5 	bl	8010ea4 <pbuf_free>
  while (p != NULL) {
 80184fa:	69bb      	ldr	r3, [r7, #24]
 80184fc:	2b00      	cmp	r3, #0
 80184fe:	d1dc      	bne.n	80184ba <ip_reass_free_complete_datagram+0xae>
  }
  /* Then, unchain the struct ip_reassdata from the list and free it. */
  ip_reass_dequeue_datagram(ipr, prev);
 8018500:	6839      	ldr	r1, [r7, #0]
 8018502:	6878      	ldr	r0, [r7, #4]
 8018504:	f000 f8c2 	bl	801868c <ip_reass_dequeue_datagram>
  LWIP_ASSERT("ip_reass_pbufcount >= pbufs_freed", ip_reass_pbufcount >= pbufs_freed);
 8018508:	4b10      	ldr	r3, [pc, #64]	; (801854c <ip_reass_free_complete_datagram+0x140>)
 801850a:	881b      	ldrh	r3, [r3, #0]
 801850c:	8bfa      	ldrh	r2, [r7, #30]
 801850e:	429a      	cmp	r2, r3
 8018510:	d905      	bls.n	801851e <ip_reass_free_complete_datagram+0x112>
 8018512:	4b09      	ldr	r3, [pc, #36]	; (8018538 <ip_reass_free_complete_datagram+0x12c>)
 8018514:	22d2      	movs	r2, #210	; 0xd2
 8018516:	490e      	ldr	r1, [pc, #56]	; (8018550 <ip_reass_free_complete_datagram+0x144>)
 8018518:	4809      	ldr	r0, [pc, #36]	; (8018540 <ip_reass_free_complete_datagram+0x134>)
 801851a:	f001 fb99 	bl	8019c50 <iprintf>
  ip_reass_pbufcount = (u16_t)(ip_reass_pbufcount - pbufs_freed);
 801851e:	4b0b      	ldr	r3, [pc, #44]	; (801854c <ip_reass_free_complete_datagram+0x140>)
 8018520:	881a      	ldrh	r2, [r3, #0]
 8018522:	8bfb      	ldrh	r3, [r7, #30]
 8018524:	1ad3      	subs	r3, r2, r3
 8018526:	b29a      	uxth	r2, r3
 8018528:	4b08      	ldr	r3, [pc, #32]	; (801854c <ip_reass_free_complete_datagram+0x140>)
 801852a:	801a      	strh	r2, [r3, #0]

  return pbufs_freed;
 801852c:	8bfb      	ldrh	r3, [r7, #30]
}
 801852e:	4618      	mov	r0, r3
 8018530:	3720      	adds	r7, #32
 8018532:	46bd      	mov	sp, r7
 8018534:	bd80      	pop	{r7, pc}
 8018536:	bf00      	nop
 8018538:	0801ec6c 	.word	0x0801ec6c
 801853c:	0801eca8 	.word	0x0801eca8
 8018540:	0801ecb4 	.word	0x0801ecb4
 8018544:	0801ecdc 	.word	0x0801ecdc
 8018548:	0801ecf0 	.word	0x0801ecf0
 801854c:	20007230 	.word	0x20007230
 8018550:	0801ed10 	.word	0x0801ed10

08018554 <ip_reass_remove_oldest_datagram>:
 *        (used for freeing other datagrams if not enough space)
 * @return the number of pbufs freed
 */
static int
ip_reass_remove_oldest_datagram(struct ip_hdr *fraghdr, int pbufs_needed)
{
 8018554:	b580      	push	{r7, lr}
 8018556:	b08a      	sub	sp, #40	; 0x28
 8018558:	af00      	add	r7, sp, #0
 801855a:	6078      	str	r0, [r7, #4]
 801855c:	6039      	str	r1, [r7, #0]
  /* @todo Can't we simply remove the last datagram in the
   *       linked list behind reassdatagrams?
   */
  struct ip_reassdata *r, *oldest, *prev, *oldest_prev;
  int pbufs_freed = 0, pbufs_freed_current;
 801855e:	2300      	movs	r3, #0
 8018560:	617b      	str	r3, [r7, #20]
  int other_datagrams;

  /* Free datagrams until being allowed to enqueue 'pbufs_needed' pbufs,
   * but don't free the datagram that 'fraghdr' belongs to! */
  do {
    oldest = NULL;
 8018562:	2300      	movs	r3, #0
 8018564:	623b      	str	r3, [r7, #32]
    prev = NULL;
 8018566:	2300      	movs	r3, #0
 8018568:	61fb      	str	r3, [r7, #28]
    oldest_prev = NULL;
 801856a:	2300      	movs	r3, #0
 801856c:	61bb      	str	r3, [r7, #24]
    other_datagrams = 0;
 801856e:	2300      	movs	r3, #0
 8018570:	613b      	str	r3, [r7, #16]
    r = reassdatagrams;
 8018572:	4b28      	ldr	r3, [pc, #160]	; (8018614 <ip_reass_remove_oldest_datagram+0xc0>)
 8018574:	681b      	ldr	r3, [r3, #0]
 8018576:	627b      	str	r3, [r7, #36]	; 0x24
    while (r != NULL) {
 8018578:	e030      	b.n	80185dc <ip_reass_remove_oldest_datagram+0x88>
      if (!IP_ADDRESSES_AND_ID_MATCH(&r->iphdr, fraghdr)) {
 801857a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801857c:	695a      	ldr	r2, [r3, #20]
 801857e:	687b      	ldr	r3, [r7, #4]
 8018580:	68db      	ldr	r3, [r3, #12]
 8018582:	429a      	cmp	r2, r3
 8018584:	d10c      	bne.n	80185a0 <ip_reass_remove_oldest_datagram+0x4c>
 8018586:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8018588:	699a      	ldr	r2, [r3, #24]
 801858a:	687b      	ldr	r3, [r7, #4]
 801858c:	691b      	ldr	r3, [r3, #16]
 801858e:	429a      	cmp	r2, r3
 8018590:	d106      	bne.n	80185a0 <ip_reass_remove_oldest_datagram+0x4c>
 8018592:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8018594:	899a      	ldrh	r2, [r3, #12]
 8018596:	687b      	ldr	r3, [r7, #4]
 8018598:	889b      	ldrh	r3, [r3, #4]
 801859a:	b29b      	uxth	r3, r3
 801859c:	429a      	cmp	r2, r3
 801859e:	d014      	beq.n	80185ca <ip_reass_remove_oldest_datagram+0x76>
        /* Not the same datagram as fraghdr */
        other_datagrams++;
 80185a0:	693b      	ldr	r3, [r7, #16]
 80185a2:	3301      	adds	r3, #1
 80185a4:	613b      	str	r3, [r7, #16]
        if (oldest == NULL) {
 80185a6:	6a3b      	ldr	r3, [r7, #32]
 80185a8:	2b00      	cmp	r3, #0
 80185aa:	d104      	bne.n	80185b6 <ip_reass_remove_oldest_datagram+0x62>
          oldest = r;
 80185ac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80185ae:	623b      	str	r3, [r7, #32]
          oldest_prev = prev;
 80185b0:	69fb      	ldr	r3, [r7, #28]
 80185b2:	61bb      	str	r3, [r7, #24]
 80185b4:	e009      	b.n	80185ca <ip_reass_remove_oldest_datagram+0x76>
        } else if (r->timer <= oldest->timer) {
 80185b6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80185b8:	7fda      	ldrb	r2, [r3, #31]
 80185ba:	6a3b      	ldr	r3, [r7, #32]
 80185bc:	7fdb      	ldrb	r3, [r3, #31]
 80185be:	429a      	cmp	r2, r3
 80185c0:	d803      	bhi.n	80185ca <ip_reass_remove_oldest_datagram+0x76>
          /* older than the previous oldest */
          oldest = r;
 80185c2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80185c4:	623b      	str	r3, [r7, #32]
          oldest_prev = prev;
 80185c6:	69fb      	ldr	r3, [r7, #28]
 80185c8:	61bb      	str	r3, [r7, #24]
        }
      }
      if (r->next != NULL) {
 80185ca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80185cc:	681b      	ldr	r3, [r3, #0]
 80185ce:	2b00      	cmp	r3, #0
 80185d0:	d001      	beq.n	80185d6 <ip_reass_remove_oldest_datagram+0x82>
        prev = r;
 80185d2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80185d4:	61fb      	str	r3, [r7, #28]
      }
      r = r->next;
 80185d6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80185d8:	681b      	ldr	r3, [r3, #0]
 80185da:	627b      	str	r3, [r7, #36]	; 0x24
    while (r != NULL) {
 80185dc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80185de:	2b00      	cmp	r3, #0
 80185e0:	d1cb      	bne.n	801857a <ip_reass_remove_oldest_datagram+0x26>
    }
    if (oldest != NULL) {
 80185e2:	6a3b      	ldr	r3, [r7, #32]
 80185e4:	2b00      	cmp	r3, #0
 80185e6:	d008      	beq.n	80185fa <ip_reass_remove_oldest_datagram+0xa6>
      pbufs_freed_current = ip_reass_free_complete_datagram(oldest, oldest_prev);
 80185e8:	69b9      	ldr	r1, [r7, #24]
 80185ea:	6a38      	ldr	r0, [r7, #32]
 80185ec:	f7ff ff0e 	bl	801840c <ip_reass_free_complete_datagram>
 80185f0:	60f8      	str	r0, [r7, #12]
      pbufs_freed += pbufs_freed_current;
 80185f2:	697a      	ldr	r2, [r7, #20]
 80185f4:	68fb      	ldr	r3, [r7, #12]
 80185f6:	4413      	add	r3, r2
 80185f8:	617b      	str	r3, [r7, #20]
    }
  } while ((pbufs_freed < pbufs_needed) && (other_datagrams > 1));
 80185fa:	697a      	ldr	r2, [r7, #20]
 80185fc:	683b      	ldr	r3, [r7, #0]
 80185fe:	429a      	cmp	r2, r3
 8018600:	da02      	bge.n	8018608 <ip_reass_remove_oldest_datagram+0xb4>
 8018602:	693b      	ldr	r3, [r7, #16]
 8018604:	2b01      	cmp	r3, #1
 8018606:	dcac      	bgt.n	8018562 <ip_reass_remove_oldest_datagram+0xe>
  return pbufs_freed;
 8018608:	697b      	ldr	r3, [r7, #20]
}
 801860a:	4618      	mov	r0, r3
 801860c:	3728      	adds	r7, #40	; 0x28
 801860e:	46bd      	mov	sp, r7
 8018610:	bd80      	pop	{r7, pc}
 8018612:	bf00      	nop
 8018614:	2000722c 	.word	0x2000722c

08018618 <ip_reass_enqueue_new_datagram>:
 * @param clen number of pbufs needed to enqueue (used for freeing other datagrams if not enough space)
 * @return A pointer to the queue location into which the fragment was enqueued
 */
static struct ip_reassdata *
ip_reass_enqueue_new_datagram(struct ip_hdr *fraghdr, int clen)
{
 8018618:	b580      	push	{r7, lr}
 801861a:	b084      	sub	sp, #16
 801861c:	af00      	add	r7, sp, #0
 801861e:	6078      	str	r0, [r7, #4]
 8018620:	6039      	str	r1, [r7, #0]
#if ! IP_REASS_FREE_OLDEST
  LWIP_UNUSED_ARG(clen);
#endif

  /* No matching previous fragment found, allocate a new reassdata struct */
  ipr = (struct ip_reassdata *)memp_malloc(MEMP_REASSDATA);
 8018622:	2004      	movs	r0, #4
 8018624:	f7f7 fd78 	bl	8010118 <memp_malloc>
 8018628:	60f8      	str	r0, [r7, #12]
  if (ipr == NULL) {
 801862a:	68fb      	ldr	r3, [r7, #12]
 801862c:	2b00      	cmp	r3, #0
 801862e:	d110      	bne.n	8018652 <ip_reass_enqueue_new_datagram+0x3a>
#if IP_REASS_FREE_OLDEST
    if (ip_reass_remove_oldest_datagram(fraghdr, clen) >= clen) {
 8018630:	6839      	ldr	r1, [r7, #0]
 8018632:	6878      	ldr	r0, [r7, #4]
 8018634:	f7ff ff8e 	bl	8018554 <ip_reass_remove_oldest_datagram>
 8018638:	4602      	mov	r2, r0
 801863a:	683b      	ldr	r3, [r7, #0]
 801863c:	4293      	cmp	r3, r2
 801863e:	dc03      	bgt.n	8018648 <ip_reass_enqueue_new_datagram+0x30>
      ipr = (struct ip_reassdata *)memp_malloc(MEMP_REASSDATA);
 8018640:	2004      	movs	r0, #4
 8018642:	f7f7 fd69 	bl	8010118 <memp_malloc>
 8018646:	60f8      	str	r0, [r7, #12]
    }
    if (ipr == NULL)
 8018648:	68fb      	ldr	r3, [r7, #12]
 801864a:	2b00      	cmp	r3, #0
 801864c:	d101      	bne.n	8018652 <ip_reass_enqueue_new_datagram+0x3a>
#endif /* IP_REASS_FREE_OLDEST */
    {
      IPFRAG_STATS_INC(ip_frag.memerr);
      LWIP_DEBUGF(IP_REASS_DEBUG, ("Failed to alloc reassdata struct\n"));
      return NULL;
 801864e:	2300      	movs	r3, #0
 8018650:	e016      	b.n	8018680 <ip_reass_enqueue_new_datagram+0x68>
    }
  }
  memset(ipr, 0, sizeof(struct ip_reassdata));
 8018652:	2220      	movs	r2, #32
 8018654:	2100      	movs	r1, #0
 8018656:	68f8      	ldr	r0, [r7, #12]
 8018658:	f001 fc50 	bl	8019efc <memset>
  ipr->timer = IP_REASS_MAXAGE;
 801865c:	68fb      	ldr	r3, [r7, #12]
 801865e:	220f      	movs	r2, #15
 8018660:	77da      	strb	r2, [r3, #31]

  /* enqueue the new structure to the front of the list */
  ipr->next = reassdatagrams;
 8018662:	4b09      	ldr	r3, [pc, #36]	; (8018688 <ip_reass_enqueue_new_datagram+0x70>)
 8018664:	681a      	ldr	r2, [r3, #0]
 8018666:	68fb      	ldr	r3, [r7, #12]
 8018668:	601a      	str	r2, [r3, #0]
  reassdatagrams = ipr;
 801866a:	4a07      	ldr	r2, [pc, #28]	; (8018688 <ip_reass_enqueue_new_datagram+0x70>)
 801866c:	68fb      	ldr	r3, [r7, #12]
 801866e:	6013      	str	r3, [r2, #0]
  /* copy the ip header for later tests and input */
  /* @todo: no ip options supported? */
  SMEMCPY(&(ipr->iphdr), fraghdr, IP_HLEN);
 8018670:	68fb      	ldr	r3, [r7, #12]
 8018672:	3308      	adds	r3, #8
 8018674:	2214      	movs	r2, #20
 8018676:	6879      	ldr	r1, [r7, #4]
 8018678:	4618      	mov	r0, r3
 801867a:	f001 fcb8 	bl	8019fee <memcpy>
  return ipr;
 801867e:	68fb      	ldr	r3, [r7, #12]
}
 8018680:	4618      	mov	r0, r3
 8018682:	3710      	adds	r7, #16
 8018684:	46bd      	mov	sp, r7
 8018686:	bd80      	pop	{r7, pc}
 8018688:	2000722c 	.word	0x2000722c

0801868c <ip_reass_dequeue_datagram>:
 * Dequeues a datagram from the datagram queue. Doesn't deallocate the pbufs.
 * @param ipr points to the queue entry to dequeue
 */
static void
ip_reass_dequeue_datagram(struct ip_reassdata *ipr, struct ip_reassdata *prev)
{
 801868c:	b580      	push	{r7, lr}
 801868e:	b082      	sub	sp, #8
 8018690:	af00      	add	r7, sp, #0
 8018692:	6078      	str	r0, [r7, #4]
 8018694:	6039      	str	r1, [r7, #0]
  /* dequeue the reass struct  */
  if (reassdatagrams == ipr) {
 8018696:	4b10      	ldr	r3, [pc, #64]	; (80186d8 <ip_reass_dequeue_datagram+0x4c>)
 8018698:	681b      	ldr	r3, [r3, #0]
 801869a:	687a      	ldr	r2, [r7, #4]
 801869c:	429a      	cmp	r2, r3
 801869e:	d104      	bne.n	80186aa <ip_reass_dequeue_datagram+0x1e>
    /* it was the first in the list */
    reassdatagrams = ipr->next;
 80186a0:	687b      	ldr	r3, [r7, #4]
 80186a2:	681b      	ldr	r3, [r3, #0]
 80186a4:	4a0c      	ldr	r2, [pc, #48]	; (80186d8 <ip_reass_dequeue_datagram+0x4c>)
 80186a6:	6013      	str	r3, [r2, #0]
 80186a8:	e00d      	b.n	80186c6 <ip_reass_dequeue_datagram+0x3a>
  } else {
    /* it wasn't the first, so it must have a valid 'prev' */
    LWIP_ASSERT("sanity check linked list", prev != NULL);
 80186aa:	683b      	ldr	r3, [r7, #0]
 80186ac:	2b00      	cmp	r3, #0
 80186ae:	d106      	bne.n	80186be <ip_reass_dequeue_datagram+0x32>
 80186b0:	4b0a      	ldr	r3, [pc, #40]	; (80186dc <ip_reass_dequeue_datagram+0x50>)
 80186b2:	f240 1245 	movw	r2, #325	; 0x145
 80186b6:	490a      	ldr	r1, [pc, #40]	; (80186e0 <ip_reass_dequeue_datagram+0x54>)
 80186b8:	480a      	ldr	r0, [pc, #40]	; (80186e4 <ip_reass_dequeue_datagram+0x58>)
 80186ba:	f001 fac9 	bl	8019c50 <iprintf>
    prev->next = ipr->next;
 80186be:	687b      	ldr	r3, [r7, #4]
 80186c0:	681a      	ldr	r2, [r3, #0]
 80186c2:	683b      	ldr	r3, [r7, #0]
 80186c4:	601a      	str	r2, [r3, #0]
  }

  /* now we can free the ip_reassdata struct */
  memp_free(MEMP_REASSDATA, ipr);
 80186c6:	6879      	ldr	r1, [r7, #4]
 80186c8:	2004      	movs	r0, #4
 80186ca:	f7f7 fd95 	bl	80101f8 <memp_free>
}
 80186ce:	bf00      	nop
 80186d0:	3708      	adds	r7, #8
 80186d2:	46bd      	mov	sp, r7
 80186d4:	bd80      	pop	{r7, pc}
 80186d6:	bf00      	nop
 80186d8:	2000722c 	.word	0x2000722c
 80186dc:	0801ec6c 	.word	0x0801ec6c
 80186e0:	0801ed34 	.word	0x0801ed34
 80186e4:	0801ecb4 	.word	0x0801ecb4

080186e8 <ip_reass_chain_frag_into_datagram_and_validate>:
 * @param is_last is 1 if this pbuf has MF==0 (ipr->flags not updated yet)
 * @return see IP_REASS_VALIDATE_* defines
 */
static int
ip_reass_chain_frag_into_datagram_and_validate(struct ip_reassdata *ipr, struct pbuf *new_p, int is_last)
{
 80186e8:	b580      	push	{r7, lr}
 80186ea:	b08c      	sub	sp, #48	; 0x30
 80186ec:	af00      	add	r7, sp, #0
 80186ee:	60f8      	str	r0, [r7, #12]
 80186f0:	60b9      	str	r1, [r7, #8]
 80186f2:	607a      	str	r2, [r7, #4]
  struct ip_reass_helper *iprh, *iprh_tmp, *iprh_prev = NULL;
 80186f4:	2300      	movs	r3, #0
 80186f6:	62bb      	str	r3, [r7, #40]	; 0x28
  struct pbuf *q;
  u16_t offset, len;
  u8_t hlen;
  struct ip_hdr *fraghdr;
  int valid = 1;
 80186f8:	2301      	movs	r3, #1
 80186fa:	623b      	str	r3, [r7, #32]

  /* Extract length and fragment offset from current fragment */
  fraghdr = (struct ip_hdr *)new_p->payload;
 80186fc:	68bb      	ldr	r3, [r7, #8]
 80186fe:	685b      	ldr	r3, [r3, #4]
 8018700:	61fb      	str	r3, [r7, #28]
  len = lwip_ntohs(IPH_LEN(fraghdr));
 8018702:	69fb      	ldr	r3, [r7, #28]
 8018704:	885b      	ldrh	r3, [r3, #2]
 8018706:	b29b      	uxth	r3, r3
 8018708:	4618      	mov	r0, r3
 801870a:	f7f6 ffe7 	bl	800f6dc <lwip_htons>
 801870e:	4603      	mov	r3, r0
 8018710:	837b      	strh	r3, [r7, #26]
  hlen = IPH_HL_BYTES(fraghdr);
 8018712:	69fb      	ldr	r3, [r7, #28]
 8018714:	781b      	ldrb	r3, [r3, #0]
 8018716:	f003 030f 	and.w	r3, r3, #15
 801871a:	b2db      	uxtb	r3, r3
 801871c:	009b      	lsls	r3, r3, #2
 801871e:	767b      	strb	r3, [r7, #25]
  if (hlen > len) {
 8018720:	7e7b      	ldrb	r3, [r7, #25]
 8018722:	b29b      	uxth	r3, r3
 8018724:	8b7a      	ldrh	r2, [r7, #26]
 8018726:	429a      	cmp	r2, r3
 8018728:	d202      	bcs.n	8018730 <ip_reass_chain_frag_into_datagram_and_validate+0x48>
    /* invalid datagram */
    return IP_REASS_VALIDATE_PBUF_DROPPED;
 801872a:	f04f 33ff 	mov.w	r3, #4294967295
 801872e:	e135      	b.n	801899c <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
  }
  len = (u16_t)(len - hlen);
 8018730:	7e7b      	ldrb	r3, [r7, #25]
 8018732:	b29b      	uxth	r3, r3
 8018734:	8b7a      	ldrh	r2, [r7, #26]
 8018736:	1ad3      	subs	r3, r2, r3
 8018738:	837b      	strh	r3, [r7, #26]
  offset = IPH_OFFSET_BYTES(fraghdr);
 801873a:	69fb      	ldr	r3, [r7, #28]
 801873c:	88db      	ldrh	r3, [r3, #6]
 801873e:	b29b      	uxth	r3, r3
 8018740:	4618      	mov	r0, r3
 8018742:	f7f6 ffcb 	bl	800f6dc <lwip_htons>
 8018746:	4603      	mov	r3, r0
 8018748:	f3c3 030c 	ubfx	r3, r3, #0, #13
 801874c:	b29b      	uxth	r3, r3
 801874e:	00db      	lsls	r3, r3, #3
 8018750:	82fb      	strh	r3, [r7, #22]
  /* overwrite the fragment's ip header from the pbuf with our helper struct,
   * and setup the embedded helper structure. */
  /* make sure the struct ip_reass_helper fits into the IP header */
  LWIP_ASSERT("sizeof(struct ip_reass_helper) <= IP_HLEN",
              sizeof(struct ip_reass_helper) <= IP_HLEN);
  iprh = (struct ip_reass_helper *)new_p->payload;
 8018752:	68bb      	ldr	r3, [r7, #8]
 8018754:	685b      	ldr	r3, [r3, #4]
 8018756:	62fb      	str	r3, [r7, #44]	; 0x2c
  iprh->next_pbuf = NULL;
 8018758:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801875a:	2200      	movs	r2, #0
 801875c:	701a      	strb	r2, [r3, #0]
 801875e:	2200      	movs	r2, #0
 8018760:	705a      	strb	r2, [r3, #1]
 8018762:	2200      	movs	r2, #0
 8018764:	709a      	strb	r2, [r3, #2]
 8018766:	2200      	movs	r2, #0
 8018768:	70da      	strb	r2, [r3, #3]
  iprh->start = offset;
 801876a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801876c:	8afa      	ldrh	r2, [r7, #22]
 801876e:	809a      	strh	r2, [r3, #4]
  iprh->end = (u16_t)(offset + len);
 8018770:	8afa      	ldrh	r2, [r7, #22]
 8018772:	8b7b      	ldrh	r3, [r7, #26]
 8018774:	4413      	add	r3, r2
 8018776:	b29a      	uxth	r2, r3
 8018778:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801877a:	80da      	strh	r2, [r3, #6]
  if (iprh->end < offset) {
 801877c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801877e:	88db      	ldrh	r3, [r3, #6]
 8018780:	b29b      	uxth	r3, r3
 8018782:	8afa      	ldrh	r2, [r7, #22]
 8018784:	429a      	cmp	r2, r3
 8018786:	d902      	bls.n	801878e <ip_reass_chain_frag_into_datagram_and_validate+0xa6>
    /* u16_t overflow, cannot handle this */
    return IP_REASS_VALIDATE_PBUF_DROPPED;
 8018788:	f04f 33ff 	mov.w	r3, #4294967295
 801878c:	e106      	b.n	801899c <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
  }

  /* Iterate through until we either get to the end of the list (append),
   * or we find one with a larger offset (insert). */
  for (q = ipr->p; q != NULL;) {
 801878e:	68fb      	ldr	r3, [r7, #12]
 8018790:	685b      	ldr	r3, [r3, #4]
 8018792:	627b      	str	r3, [r7, #36]	; 0x24
 8018794:	e068      	b.n	8018868 <ip_reass_chain_frag_into_datagram_and_validate+0x180>
    iprh_tmp = (struct ip_reass_helper *)q->payload;
 8018796:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8018798:	685b      	ldr	r3, [r3, #4]
 801879a:	613b      	str	r3, [r7, #16]
    if (iprh->start < iprh_tmp->start) {
 801879c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801879e:	889b      	ldrh	r3, [r3, #4]
 80187a0:	b29a      	uxth	r2, r3
 80187a2:	693b      	ldr	r3, [r7, #16]
 80187a4:	889b      	ldrh	r3, [r3, #4]
 80187a6:	b29b      	uxth	r3, r3
 80187a8:	429a      	cmp	r2, r3
 80187aa:	d235      	bcs.n	8018818 <ip_reass_chain_frag_into_datagram_and_validate+0x130>
      /* the new pbuf should be inserted before this */
      iprh->next_pbuf = q;
 80187ac:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80187ae:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80187b0:	601a      	str	r2, [r3, #0]
      if (iprh_prev != NULL) {
 80187b2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80187b4:	2b00      	cmp	r3, #0
 80187b6:	d020      	beq.n	80187fa <ip_reass_chain_frag_into_datagram_and_validate+0x112>
        /* not the fragment with the lowest offset */
#if IP_REASS_CHECK_OVERLAP
        if ((iprh->start < iprh_prev->end) || (iprh->end > iprh_tmp->start)) {
 80187b8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80187ba:	889b      	ldrh	r3, [r3, #4]
 80187bc:	b29a      	uxth	r2, r3
 80187be:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80187c0:	88db      	ldrh	r3, [r3, #6]
 80187c2:	b29b      	uxth	r3, r3
 80187c4:	429a      	cmp	r2, r3
 80187c6:	d307      	bcc.n	80187d8 <ip_reass_chain_frag_into_datagram_and_validate+0xf0>
 80187c8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80187ca:	88db      	ldrh	r3, [r3, #6]
 80187cc:	b29a      	uxth	r2, r3
 80187ce:	693b      	ldr	r3, [r7, #16]
 80187d0:	889b      	ldrh	r3, [r3, #4]
 80187d2:	b29b      	uxth	r3, r3
 80187d4:	429a      	cmp	r2, r3
 80187d6:	d902      	bls.n	80187de <ip_reass_chain_frag_into_datagram_and_validate+0xf6>
          /* fragment overlaps with previous or following, throw away */
          return IP_REASS_VALIDATE_PBUF_DROPPED;
 80187d8:	f04f 33ff 	mov.w	r3, #4294967295
 80187dc:	e0de      	b.n	801899c <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
        }
#endif /* IP_REASS_CHECK_OVERLAP */
        iprh_prev->next_pbuf = new_p;
 80187de:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80187e0:	68ba      	ldr	r2, [r7, #8]
 80187e2:	601a      	str	r2, [r3, #0]
        if (iprh_prev->end != iprh->start) {
 80187e4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80187e6:	88db      	ldrh	r3, [r3, #6]
 80187e8:	b29a      	uxth	r2, r3
 80187ea:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80187ec:	889b      	ldrh	r3, [r3, #4]
 80187ee:	b29b      	uxth	r3, r3
 80187f0:	429a      	cmp	r2, r3
 80187f2:	d03d      	beq.n	8018870 <ip_reass_chain_frag_into_datagram_and_validate+0x188>
          /* There is a fragment missing between the current
           * and the previous fragment */
          valid = 0;
 80187f4:	2300      	movs	r3, #0
 80187f6:	623b      	str	r3, [r7, #32]
        }
#endif /* IP_REASS_CHECK_OVERLAP */
        /* fragment with the lowest offset */
        ipr->p = new_p;
      }
      break;
 80187f8:	e03a      	b.n	8018870 <ip_reass_chain_frag_into_datagram_and_validate+0x188>
        if (iprh->end > iprh_tmp->start) {
 80187fa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80187fc:	88db      	ldrh	r3, [r3, #6]
 80187fe:	b29a      	uxth	r2, r3
 8018800:	693b      	ldr	r3, [r7, #16]
 8018802:	889b      	ldrh	r3, [r3, #4]
 8018804:	b29b      	uxth	r3, r3
 8018806:	429a      	cmp	r2, r3
 8018808:	d902      	bls.n	8018810 <ip_reass_chain_frag_into_datagram_and_validate+0x128>
          return IP_REASS_VALIDATE_PBUF_DROPPED;
 801880a:	f04f 33ff 	mov.w	r3, #4294967295
 801880e:	e0c5      	b.n	801899c <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
        ipr->p = new_p;
 8018810:	68fb      	ldr	r3, [r7, #12]
 8018812:	68ba      	ldr	r2, [r7, #8]
 8018814:	605a      	str	r2, [r3, #4]
      break;
 8018816:	e02b      	b.n	8018870 <ip_reass_chain_frag_into_datagram_and_validate+0x188>
    } else if (iprh->start == iprh_tmp->start) {
 8018818:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801881a:	889b      	ldrh	r3, [r3, #4]
 801881c:	b29a      	uxth	r2, r3
 801881e:	693b      	ldr	r3, [r7, #16]
 8018820:	889b      	ldrh	r3, [r3, #4]
 8018822:	b29b      	uxth	r3, r3
 8018824:	429a      	cmp	r2, r3
 8018826:	d102      	bne.n	801882e <ip_reass_chain_frag_into_datagram_and_validate+0x146>
      /* received the same datagram twice: no need to keep the datagram */
      return IP_REASS_VALIDATE_PBUF_DROPPED;
 8018828:	f04f 33ff 	mov.w	r3, #4294967295
 801882c:	e0b6      	b.n	801899c <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
#if IP_REASS_CHECK_OVERLAP
    } else if (iprh->start < iprh_tmp->end) {
 801882e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8018830:	889b      	ldrh	r3, [r3, #4]
 8018832:	b29a      	uxth	r2, r3
 8018834:	693b      	ldr	r3, [r7, #16]
 8018836:	88db      	ldrh	r3, [r3, #6]
 8018838:	b29b      	uxth	r3, r3
 801883a:	429a      	cmp	r2, r3
 801883c:	d202      	bcs.n	8018844 <ip_reass_chain_frag_into_datagram_and_validate+0x15c>
      /* overlap: no need to keep the new datagram */
      return IP_REASS_VALIDATE_PBUF_DROPPED;
 801883e:	f04f 33ff 	mov.w	r3, #4294967295
 8018842:	e0ab      	b.n	801899c <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
#endif /* IP_REASS_CHECK_OVERLAP */
    } else {
      /* Check if the fragments received so far have no holes. */
      if (iprh_prev != NULL) {
 8018844:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8018846:	2b00      	cmp	r3, #0
 8018848:	d009      	beq.n	801885e <ip_reass_chain_frag_into_datagram_and_validate+0x176>
        if (iprh_prev->end != iprh_tmp->start) {
 801884a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801884c:	88db      	ldrh	r3, [r3, #6]
 801884e:	b29a      	uxth	r2, r3
 8018850:	693b      	ldr	r3, [r7, #16]
 8018852:	889b      	ldrh	r3, [r3, #4]
 8018854:	b29b      	uxth	r3, r3
 8018856:	429a      	cmp	r2, r3
 8018858:	d001      	beq.n	801885e <ip_reass_chain_frag_into_datagram_and_validate+0x176>
          /* There is a fragment missing between the current
           * and the previous fragment */
          valid = 0;
 801885a:	2300      	movs	r3, #0
 801885c:	623b      	str	r3, [r7, #32]
        }
      }
    }
    q = iprh_tmp->next_pbuf;
 801885e:	693b      	ldr	r3, [r7, #16]
 8018860:	681b      	ldr	r3, [r3, #0]
 8018862:	627b      	str	r3, [r7, #36]	; 0x24
    iprh_prev = iprh_tmp;
 8018864:	693b      	ldr	r3, [r7, #16]
 8018866:	62bb      	str	r3, [r7, #40]	; 0x28
  for (q = ipr->p; q != NULL;) {
 8018868:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801886a:	2b00      	cmp	r3, #0
 801886c:	d193      	bne.n	8018796 <ip_reass_chain_frag_into_datagram_and_validate+0xae>
 801886e:	e000      	b.n	8018872 <ip_reass_chain_frag_into_datagram_and_validate+0x18a>
      break;
 8018870:	bf00      	nop
  }

  /* If q is NULL, then we made it to the end of the list. Determine what to do now */
  if (q == NULL) {
 8018872:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8018874:	2b00      	cmp	r3, #0
 8018876:	d12d      	bne.n	80188d4 <ip_reass_chain_frag_into_datagram_and_validate+0x1ec>
    if (iprh_prev != NULL) {
 8018878:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801887a:	2b00      	cmp	r3, #0
 801887c:	d01c      	beq.n	80188b8 <ip_reass_chain_frag_into_datagram_and_validate+0x1d0>
      /* this is (for now), the fragment with the highest offset:
       * chain it to the last fragment */
#if IP_REASS_CHECK_OVERLAP
      LWIP_ASSERT("check fragments don't overlap", iprh_prev->end <= iprh->start);
 801887e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8018880:	88db      	ldrh	r3, [r3, #6]
 8018882:	b29a      	uxth	r2, r3
 8018884:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8018886:	889b      	ldrh	r3, [r3, #4]
 8018888:	b29b      	uxth	r3, r3
 801888a:	429a      	cmp	r2, r3
 801888c:	d906      	bls.n	801889c <ip_reass_chain_frag_into_datagram_and_validate+0x1b4>
 801888e:	4b45      	ldr	r3, [pc, #276]	; (80189a4 <ip_reass_chain_frag_into_datagram_and_validate+0x2bc>)
 8018890:	f44f 72db 	mov.w	r2, #438	; 0x1b6
 8018894:	4944      	ldr	r1, [pc, #272]	; (80189a8 <ip_reass_chain_frag_into_datagram_and_validate+0x2c0>)
 8018896:	4845      	ldr	r0, [pc, #276]	; (80189ac <ip_reass_chain_frag_into_datagram_and_validate+0x2c4>)
 8018898:	f001 f9da 	bl	8019c50 <iprintf>
#endif /* IP_REASS_CHECK_OVERLAP */
      iprh_prev->next_pbuf = new_p;
 801889c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801889e:	68ba      	ldr	r2, [r7, #8]
 80188a0:	601a      	str	r2, [r3, #0]
      if (iprh_prev->end != iprh->start) {
 80188a2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80188a4:	88db      	ldrh	r3, [r3, #6]
 80188a6:	b29a      	uxth	r2, r3
 80188a8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80188aa:	889b      	ldrh	r3, [r3, #4]
 80188ac:	b29b      	uxth	r3, r3
 80188ae:	429a      	cmp	r2, r3
 80188b0:	d010      	beq.n	80188d4 <ip_reass_chain_frag_into_datagram_and_validate+0x1ec>
        valid = 0;
 80188b2:	2300      	movs	r3, #0
 80188b4:	623b      	str	r3, [r7, #32]
 80188b6:	e00d      	b.n	80188d4 <ip_reass_chain_frag_into_datagram_and_validate+0x1ec>
      }
    } else {
#if IP_REASS_CHECK_OVERLAP
      LWIP_ASSERT("no previous fragment, this must be the first fragment!",
 80188b8:	68fb      	ldr	r3, [r7, #12]
 80188ba:	685b      	ldr	r3, [r3, #4]
 80188bc:	2b00      	cmp	r3, #0
 80188be:	d006      	beq.n	80188ce <ip_reass_chain_frag_into_datagram_and_validate+0x1e6>
 80188c0:	4b38      	ldr	r3, [pc, #224]	; (80189a4 <ip_reass_chain_frag_into_datagram_and_validate+0x2bc>)
 80188c2:	f44f 72df 	mov.w	r2, #446	; 0x1be
 80188c6:	493a      	ldr	r1, [pc, #232]	; (80189b0 <ip_reass_chain_frag_into_datagram_and_validate+0x2c8>)
 80188c8:	4838      	ldr	r0, [pc, #224]	; (80189ac <ip_reass_chain_frag_into_datagram_and_validate+0x2c4>)
 80188ca:	f001 f9c1 	bl	8019c50 <iprintf>
                  ipr->p == NULL);
#endif /* IP_REASS_CHECK_OVERLAP */
      /* this is the first fragment we ever received for this ip datagram */
      ipr->p = new_p;
 80188ce:	68fb      	ldr	r3, [r7, #12]
 80188d0:	68ba      	ldr	r2, [r7, #8]
 80188d2:	605a      	str	r2, [r3, #4]
    }
  }

  /* At this point, the validation part begins: */
  /* If we already received the last fragment */
  if (is_last || ((ipr->flags & IP_REASS_FLAG_LASTFRAG) != 0)) {
 80188d4:	687b      	ldr	r3, [r7, #4]
 80188d6:	2b00      	cmp	r3, #0
 80188d8:	d105      	bne.n	80188e6 <ip_reass_chain_frag_into_datagram_and_validate+0x1fe>
 80188da:	68fb      	ldr	r3, [r7, #12]
 80188dc:	7f9b      	ldrb	r3, [r3, #30]
 80188de:	f003 0301 	and.w	r3, r3, #1
 80188e2:	2b00      	cmp	r3, #0
 80188e4:	d059      	beq.n	801899a <ip_reass_chain_frag_into_datagram_and_validate+0x2b2>
    /* and had no holes so far */
    if (valid) {
 80188e6:	6a3b      	ldr	r3, [r7, #32]
 80188e8:	2b00      	cmp	r3, #0
 80188ea:	d04f      	beq.n	801898c <ip_reass_chain_frag_into_datagram_and_validate+0x2a4>
      /* then check if the rest of the fragments is here */
      /* Check if the queue starts with the first datagram */
      if ((ipr->p == NULL) || (((struct ip_reass_helper *)ipr->p->payload)->start != 0)) {
 80188ec:	68fb      	ldr	r3, [r7, #12]
 80188ee:	685b      	ldr	r3, [r3, #4]
 80188f0:	2b00      	cmp	r3, #0
 80188f2:	d006      	beq.n	8018902 <ip_reass_chain_frag_into_datagram_and_validate+0x21a>
 80188f4:	68fb      	ldr	r3, [r7, #12]
 80188f6:	685b      	ldr	r3, [r3, #4]
 80188f8:	685b      	ldr	r3, [r3, #4]
 80188fa:	889b      	ldrh	r3, [r3, #4]
 80188fc:	b29b      	uxth	r3, r3
 80188fe:	2b00      	cmp	r3, #0
 8018900:	d002      	beq.n	8018908 <ip_reass_chain_frag_into_datagram_and_validate+0x220>
        valid = 0;
 8018902:	2300      	movs	r3, #0
 8018904:	623b      	str	r3, [r7, #32]
 8018906:	e041      	b.n	801898c <ip_reass_chain_frag_into_datagram_and_validate+0x2a4>
      } else {
        /* and check that there are no holes after this datagram */
        iprh_prev = iprh;
 8018908:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801890a:	62bb      	str	r3, [r7, #40]	; 0x28
        q = iprh->next_pbuf;
 801890c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801890e:	681b      	ldr	r3, [r3, #0]
 8018910:	627b      	str	r3, [r7, #36]	; 0x24
        while (q != NULL) {
 8018912:	e012      	b.n	801893a <ip_reass_chain_frag_into_datagram_and_validate+0x252>
          iprh = (struct ip_reass_helper *)q->payload;
 8018914:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8018916:	685b      	ldr	r3, [r3, #4]
 8018918:	62fb      	str	r3, [r7, #44]	; 0x2c
          if (iprh_prev->end != iprh->start) {
 801891a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801891c:	88db      	ldrh	r3, [r3, #6]
 801891e:	b29a      	uxth	r2, r3
 8018920:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8018922:	889b      	ldrh	r3, [r3, #4]
 8018924:	b29b      	uxth	r3, r3
 8018926:	429a      	cmp	r2, r3
 8018928:	d002      	beq.n	8018930 <ip_reass_chain_frag_into_datagram_and_validate+0x248>
            valid = 0;
 801892a:	2300      	movs	r3, #0
 801892c:	623b      	str	r3, [r7, #32]
            break;
 801892e:	e007      	b.n	8018940 <ip_reass_chain_frag_into_datagram_and_validate+0x258>
          }
          iprh_prev = iprh;
 8018930:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8018932:	62bb      	str	r3, [r7, #40]	; 0x28
          q = iprh->next_pbuf;
 8018934:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8018936:	681b      	ldr	r3, [r3, #0]
 8018938:	627b      	str	r3, [r7, #36]	; 0x24
        while (q != NULL) {
 801893a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801893c:	2b00      	cmp	r3, #0
 801893e:	d1e9      	bne.n	8018914 <ip_reass_chain_frag_into_datagram_and_validate+0x22c>
        }
        /* if still valid, all fragments are received
         * (because to the MF==0 already arrived */
        if (valid) {
 8018940:	6a3b      	ldr	r3, [r7, #32]
 8018942:	2b00      	cmp	r3, #0
 8018944:	d022      	beq.n	801898c <ip_reass_chain_frag_into_datagram_and_validate+0x2a4>
          LWIP_ASSERT("sanity check", ipr->p != NULL);
 8018946:	68fb      	ldr	r3, [r7, #12]
 8018948:	685b      	ldr	r3, [r3, #4]
 801894a:	2b00      	cmp	r3, #0
 801894c:	d106      	bne.n	801895c <ip_reass_chain_frag_into_datagram_and_validate+0x274>
 801894e:	4b15      	ldr	r3, [pc, #84]	; (80189a4 <ip_reass_chain_frag_into_datagram_and_validate+0x2bc>)
 8018950:	f240 12df 	movw	r2, #479	; 0x1df
 8018954:	4917      	ldr	r1, [pc, #92]	; (80189b4 <ip_reass_chain_frag_into_datagram_and_validate+0x2cc>)
 8018956:	4815      	ldr	r0, [pc, #84]	; (80189ac <ip_reass_chain_frag_into_datagram_and_validate+0x2c4>)
 8018958:	f001 f97a 	bl	8019c50 <iprintf>
          LWIP_ASSERT("sanity check",
 801895c:	68fb      	ldr	r3, [r7, #12]
 801895e:	685b      	ldr	r3, [r3, #4]
 8018960:	685b      	ldr	r3, [r3, #4]
 8018962:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8018964:	429a      	cmp	r2, r3
 8018966:	d106      	bne.n	8018976 <ip_reass_chain_frag_into_datagram_and_validate+0x28e>
 8018968:	4b0e      	ldr	r3, [pc, #56]	; (80189a4 <ip_reass_chain_frag_into_datagram_and_validate+0x2bc>)
 801896a:	f44f 72f0 	mov.w	r2, #480	; 0x1e0
 801896e:	4911      	ldr	r1, [pc, #68]	; (80189b4 <ip_reass_chain_frag_into_datagram_and_validate+0x2cc>)
 8018970:	480e      	ldr	r0, [pc, #56]	; (80189ac <ip_reass_chain_frag_into_datagram_and_validate+0x2c4>)
 8018972:	f001 f96d 	bl	8019c50 <iprintf>
                      ((struct ip_reass_helper *)ipr->p->payload) != iprh);
          LWIP_ASSERT("validate_datagram:next_pbuf!=NULL",
 8018976:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8018978:	681b      	ldr	r3, [r3, #0]
 801897a:	2b00      	cmp	r3, #0
 801897c:	d006      	beq.n	801898c <ip_reass_chain_frag_into_datagram_and_validate+0x2a4>
 801897e:	4b09      	ldr	r3, [pc, #36]	; (80189a4 <ip_reass_chain_frag_into_datagram_and_validate+0x2bc>)
 8018980:	f44f 72f1 	mov.w	r2, #482	; 0x1e2
 8018984:	490c      	ldr	r1, [pc, #48]	; (80189b8 <ip_reass_chain_frag_into_datagram_and_validate+0x2d0>)
 8018986:	4809      	ldr	r0, [pc, #36]	; (80189ac <ip_reass_chain_frag_into_datagram_and_validate+0x2c4>)
 8018988:	f001 f962 	bl	8019c50 <iprintf>
      }
    }
    /* If valid is 0 here, there are some fragments missing in the middle
     * (since MF == 0 has already arrived). Such datagrams simply time out if
     * no more fragments are received... */
    return valid ? IP_REASS_VALIDATE_TELEGRAM_FINISHED : IP_REASS_VALIDATE_PBUF_QUEUED;
 801898c:	6a3b      	ldr	r3, [r7, #32]
 801898e:	2b00      	cmp	r3, #0
 8018990:	bf14      	ite	ne
 8018992:	2301      	movne	r3, #1
 8018994:	2300      	moveq	r3, #0
 8018996:	b2db      	uxtb	r3, r3
 8018998:	e000      	b.n	801899c <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
  }
  /* If we come here, not all fragments were received, yet! */
  return IP_REASS_VALIDATE_PBUF_QUEUED; /* not yet valid! */
 801899a:	2300      	movs	r3, #0
}
 801899c:	4618      	mov	r0, r3
 801899e:	3730      	adds	r7, #48	; 0x30
 80189a0:	46bd      	mov	sp, r7
 80189a2:	bd80      	pop	{r7, pc}
 80189a4:	0801ec6c 	.word	0x0801ec6c
 80189a8:	0801ed50 	.word	0x0801ed50
 80189ac:	0801ecb4 	.word	0x0801ecb4
 80189b0:	0801ed70 	.word	0x0801ed70
 80189b4:	0801eda8 	.word	0x0801eda8
 80189b8:	0801edb8 	.word	0x0801edb8

080189bc <ip4_reass>:
 * @param p points to a pbuf chain of the fragment
 * @return NULL if reassembly is incomplete, ? otherwise
 */
struct pbuf *
ip4_reass(struct pbuf *p)
{
 80189bc:	b580      	push	{r7, lr}
 80189be:	b08e      	sub	sp, #56	; 0x38
 80189c0:	af00      	add	r7, sp, #0
 80189c2:	6078      	str	r0, [r7, #4]
  int is_last;

  IPFRAG_STATS_INC(ip_frag.recv);
  MIB2_STATS_INC(mib2.ipreasmreqds);

  fraghdr = (struct ip_hdr *)p->payload;
 80189c4:	687b      	ldr	r3, [r7, #4]
 80189c6:	685b      	ldr	r3, [r3, #4]
 80189c8:	62bb      	str	r3, [r7, #40]	; 0x28

  if (IPH_HL_BYTES(fraghdr) != IP_HLEN) {
 80189ca:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80189cc:	781b      	ldrb	r3, [r3, #0]
 80189ce:	f003 030f 	and.w	r3, r3, #15
 80189d2:	b2db      	uxtb	r3, r3
 80189d4:	009b      	lsls	r3, r3, #2
 80189d6:	b2db      	uxtb	r3, r3
 80189d8:	2b14      	cmp	r3, #20
 80189da:	f040 8171 	bne.w	8018cc0 <ip4_reass+0x304>
    LWIP_DEBUGF(IP_REASS_DEBUG, ("ip4_reass: IP options currently not supported!\n"));
    IPFRAG_STATS_INC(ip_frag.err);
    goto nullreturn;
  }

  offset = IPH_OFFSET_BYTES(fraghdr);
 80189de:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80189e0:	88db      	ldrh	r3, [r3, #6]
 80189e2:	b29b      	uxth	r3, r3
 80189e4:	4618      	mov	r0, r3
 80189e6:	f7f6 fe79 	bl	800f6dc <lwip_htons>
 80189ea:	4603      	mov	r3, r0
 80189ec:	f3c3 030c 	ubfx	r3, r3, #0, #13
 80189f0:	b29b      	uxth	r3, r3
 80189f2:	00db      	lsls	r3, r3, #3
 80189f4:	84fb      	strh	r3, [r7, #38]	; 0x26
  len = lwip_ntohs(IPH_LEN(fraghdr));
 80189f6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80189f8:	885b      	ldrh	r3, [r3, #2]
 80189fa:	b29b      	uxth	r3, r3
 80189fc:	4618      	mov	r0, r3
 80189fe:	f7f6 fe6d 	bl	800f6dc <lwip_htons>
 8018a02:	4603      	mov	r3, r0
 8018a04:	84bb      	strh	r3, [r7, #36]	; 0x24
  hlen = IPH_HL_BYTES(fraghdr);
 8018a06:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8018a08:	781b      	ldrb	r3, [r3, #0]
 8018a0a:	f003 030f 	and.w	r3, r3, #15
 8018a0e:	b2db      	uxtb	r3, r3
 8018a10:	009b      	lsls	r3, r3, #2
 8018a12:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  if (hlen > len) {
 8018a16:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8018a1a:	b29b      	uxth	r3, r3
 8018a1c:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8018a1e:	429a      	cmp	r2, r3
 8018a20:	f0c0 8150 	bcc.w	8018cc4 <ip4_reass+0x308>
    /* invalid datagram */
    goto nullreturn;
  }
  len = (u16_t)(len - hlen);
 8018a24:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8018a28:	b29b      	uxth	r3, r3
 8018a2a:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8018a2c:	1ad3      	subs	r3, r2, r3
 8018a2e:	84bb      	strh	r3, [r7, #36]	; 0x24

  /* Check if we are allowed to enqueue more datagrams. */
  clen = pbuf_clen(p);
 8018a30:	6878      	ldr	r0, [r7, #4]
 8018a32:	f7f8 fabf 	bl	8010fb4 <pbuf_clen>
 8018a36:	4603      	mov	r3, r0
 8018a38:	843b      	strh	r3, [r7, #32]
  if ((ip_reass_pbufcount + clen) > IP_REASS_MAX_PBUFS) {
 8018a3a:	4b8c      	ldr	r3, [pc, #560]	; (8018c6c <ip4_reass+0x2b0>)
 8018a3c:	881b      	ldrh	r3, [r3, #0]
 8018a3e:	461a      	mov	r2, r3
 8018a40:	8c3b      	ldrh	r3, [r7, #32]
 8018a42:	4413      	add	r3, r2
 8018a44:	2b0a      	cmp	r3, #10
 8018a46:	dd10      	ble.n	8018a6a <ip4_reass+0xae>
#if IP_REASS_FREE_OLDEST
    if (!ip_reass_remove_oldest_datagram(fraghdr, clen) ||
 8018a48:	8c3b      	ldrh	r3, [r7, #32]
 8018a4a:	4619      	mov	r1, r3
 8018a4c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8018a4e:	f7ff fd81 	bl	8018554 <ip_reass_remove_oldest_datagram>
 8018a52:	4603      	mov	r3, r0
 8018a54:	2b00      	cmp	r3, #0
 8018a56:	f000 8137 	beq.w	8018cc8 <ip4_reass+0x30c>
        ((ip_reass_pbufcount + clen) > IP_REASS_MAX_PBUFS))
 8018a5a:	4b84      	ldr	r3, [pc, #528]	; (8018c6c <ip4_reass+0x2b0>)
 8018a5c:	881b      	ldrh	r3, [r3, #0]
 8018a5e:	461a      	mov	r2, r3
 8018a60:	8c3b      	ldrh	r3, [r7, #32]
 8018a62:	4413      	add	r3, r2
    if (!ip_reass_remove_oldest_datagram(fraghdr, clen) ||
 8018a64:	2b0a      	cmp	r3, #10
 8018a66:	f300 812f 	bgt.w	8018cc8 <ip4_reass+0x30c>
    }
  }

  /* Look for the datagram the fragment belongs to in the current datagram queue,
   * remembering the previous in the queue for later dequeueing. */
  for (ipr = reassdatagrams; ipr != NULL; ipr = ipr->next) {
 8018a6a:	4b81      	ldr	r3, [pc, #516]	; (8018c70 <ip4_reass+0x2b4>)
 8018a6c:	681b      	ldr	r3, [r3, #0]
 8018a6e:	633b      	str	r3, [r7, #48]	; 0x30
 8018a70:	e015      	b.n	8018a9e <ip4_reass+0xe2>
    /* Check if the incoming fragment matches the one currently present
       in the reassembly buffer. If so, we proceed with copying the
       fragment into the buffer. */
    if (IP_ADDRESSES_AND_ID_MATCH(&ipr->iphdr, fraghdr)) {
 8018a72:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8018a74:	695a      	ldr	r2, [r3, #20]
 8018a76:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8018a78:	68db      	ldr	r3, [r3, #12]
 8018a7a:	429a      	cmp	r2, r3
 8018a7c:	d10c      	bne.n	8018a98 <ip4_reass+0xdc>
 8018a7e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8018a80:	699a      	ldr	r2, [r3, #24]
 8018a82:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8018a84:	691b      	ldr	r3, [r3, #16]
 8018a86:	429a      	cmp	r2, r3
 8018a88:	d106      	bne.n	8018a98 <ip4_reass+0xdc>
 8018a8a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8018a8c:	899a      	ldrh	r2, [r3, #12]
 8018a8e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8018a90:	889b      	ldrh	r3, [r3, #4]
 8018a92:	b29b      	uxth	r3, r3
 8018a94:	429a      	cmp	r2, r3
 8018a96:	d006      	beq.n	8018aa6 <ip4_reass+0xea>
  for (ipr = reassdatagrams; ipr != NULL; ipr = ipr->next) {
 8018a98:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8018a9a:	681b      	ldr	r3, [r3, #0]
 8018a9c:	633b      	str	r3, [r7, #48]	; 0x30
 8018a9e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8018aa0:	2b00      	cmp	r3, #0
 8018aa2:	d1e6      	bne.n	8018a72 <ip4_reass+0xb6>
 8018aa4:	e000      	b.n	8018aa8 <ip4_reass+0xec>
      LWIP_DEBUGF(IP_REASS_DEBUG, ("ip4_reass: matching previous fragment ID=%"X16_F"\n",
                                   lwip_ntohs(IPH_ID(fraghdr))));
      IPFRAG_STATS_INC(ip_frag.cachehit);
      break;
 8018aa6:	bf00      	nop
    }
  }

  if (ipr == NULL) {
 8018aa8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8018aaa:	2b00      	cmp	r3, #0
 8018aac:	d109      	bne.n	8018ac2 <ip4_reass+0x106>
    /* Enqueue a new datagram into the datagram queue */
    ipr = ip_reass_enqueue_new_datagram(fraghdr, clen);
 8018aae:	8c3b      	ldrh	r3, [r7, #32]
 8018ab0:	4619      	mov	r1, r3
 8018ab2:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8018ab4:	f7ff fdb0 	bl	8018618 <ip_reass_enqueue_new_datagram>
 8018ab8:	6338      	str	r0, [r7, #48]	; 0x30
    /* Bail if unable to enqueue */
    if (ipr == NULL) {
 8018aba:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8018abc:	2b00      	cmp	r3, #0
 8018abe:	d11c      	bne.n	8018afa <ip4_reass+0x13e>
      goto nullreturn;
 8018ac0:	e105      	b.n	8018cce <ip4_reass+0x312>
    }
  } else {
    if (((lwip_ntohs(IPH_OFFSET(fraghdr)) & IP_OFFMASK) == 0) &&
 8018ac2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8018ac4:	88db      	ldrh	r3, [r3, #6]
 8018ac6:	b29b      	uxth	r3, r3
 8018ac8:	4618      	mov	r0, r3
 8018aca:	f7f6 fe07 	bl	800f6dc <lwip_htons>
 8018ace:	4603      	mov	r3, r0
 8018ad0:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8018ad4:	2b00      	cmp	r3, #0
 8018ad6:	d110      	bne.n	8018afa <ip4_reass+0x13e>
        ((lwip_ntohs(IPH_OFFSET(&ipr->iphdr)) & IP_OFFMASK) != 0)) {
 8018ad8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8018ada:	89db      	ldrh	r3, [r3, #14]
 8018adc:	4618      	mov	r0, r3
 8018ade:	f7f6 fdfd 	bl	800f6dc <lwip_htons>
 8018ae2:	4603      	mov	r3, r0
 8018ae4:	f3c3 030c 	ubfx	r3, r3, #0, #13
    if (((lwip_ntohs(IPH_OFFSET(fraghdr)) & IP_OFFMASK) == 0) &&
 8018ae8:	2b00      	cmp	r3, #0
 8018aea:	d006      	beq.n	8018afa <ip4_reass+0x13e>
      /* ipr->iphdr is not the header from the first fragment, but fraghdr is
       * -> copy fraghdr into ipr->iphdr since we want to have the header
       * of the first fragment (for ICMP time exceeded and later, for copying
       * all options, if supported)*/
      SMEMCPY(&ipr->iphdr, fraghdr, IP_HLEN);
 8018aec:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8018aee:	3308      	adds	r3, #8
 8018af0:	2214      	movs	r2, #20
 8018af2:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8018af4:	4618      	mov	r0, r3
 8018af6:	f001 fa7a 	bl	8019fee <memcpy>

  /* At this point, we have either created a new entry or pointing
   * to an existing one */

  /* check for 'no more fragments', and update queue entry*/
  is_last = (IPH_OFFSET(fraghdr) & PP_NTOHS(IP_MF)) == 0;
 8018afa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8018afc:	88db      	ldrh	r3, [r3, #6]
 8018afe:	b29b      	uxth	r3, r3
 8018b00:	f003 0320 	and.w	r3, r3, #32
 8018b04:	2b00      	cmp	r3, #0
 8018b06:	bf0c      	ite	eq
 8018b08:	2301      	moveq	r3, #1
 8018b0a:	2300      	movne	r3, #0
 8018b0c:	b2db      	uxtb	r3, r3
 8018b0e:	61fb      	str	r3, [r7, #28]
  if (is_last) {
 8018b10:	69fb      	ldr	r3, [r7, #28]
 8018b12:	2b00      	cmp	r3, #0
 8018b14:	d00e      	beq.n	8018b34 <ip4_reass+0x178>
    u16_t datagram_len = (u16_t)(offset + len);
 8018b16:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 8018b18:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8018b1a:	4413      	add	r3, r2
 8018b1c:	837b      	strh	r3, [r7, #26]
    if ((datagram_len < offset) || (datagram_len > (0xFFFF - IP_HLEN))) {
 8018b1e:	8b7a      	ldrh	r2, [r7, #26]
 8018b20:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8018b22:	429a      	cmp	r2, r3
 8018b24:	f0c0 80a0 	bcc.w	8018c68 <ip4_reass+0x2ac>
 8018b28:	8b7b      	ldrh	r3, [r7, #26]
 8018b2a:	f64f 72eb 	movw	r2, #65515	; 0xffeb
 8018b2e:	4293      	cmp	r3, r2
 8018b30:	f200 809a 	bhi.w	8018c68 <ip4_reass+0x2ac>
      goto nullreturn_ipr;
    }
  }
  /* find the right place to insert this pbuf */
  /* @todo: trim pbufs if fragments are overlapping */
  valid = ip_reass_chain_frag_into_datagram_and_validate(ipr, p, is_last);
 8018b34:	69fa      	ldr	r2, [r7, #28]
 8018b36:	6879      	ldr	r1, [r7, #4]
 8018b38:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8018b3a:	f7ff fdd5 	bl	80186e8 <ip_reass_chain_frag_into_datagram_and_validate>
 8018b3e:	6178      	str	r0, [r7, #20]
  if (valid == IP_REASS_VALIDATE_PBUF_DROPPED) {
 8018b40:	697b      	ldr	r3, [r7, #20]
 8018b42:	f1b3 3fff 	cmp.w	r3, #4294967295
 8018b46:	f000 809b 	beq.w	8018c80 <ip4_reass+0x2c4>
  /* if we come here, the pbuf has been enqueued */

  /* Track the current number of pbufs current 'in-flight', in order to limit
     the number of fragments that may be enqueued at any one time
     (overflow checked by testing against IP_REASS_MAX_PBUFS) */
  ip_reass_pbufcount = (u16_t)(ip_reass_pbufcount + clen);
 8018b4a:	4b48      	ldr	r3, [pc, #288]	; (8018c6c <ip4_reass+0x2b0>)
 8018b4c:	881a      	ldrh	r2, [r3, #0]
 8018b4e:	8c3b      	ldrh	r3, [r7, #32]
 8018b50:	4413      	add	r3, r2
 8018b52:	b29a      	uxth	r2, r3
 8018b54:	4b45      	ldr	r3, [pc, #276]	; (8018c6c <ip4_reass+0x2b0>)
 8018b56:	801a      	strh	r2, [r3, #0]
  if (is_last) {
 8018b58:	69fb      	ldr	r3, [r7, #28]
 8018b5a:	2b00      	cmp	r3, #0
 8018b5c:	d00d      	beq.n	8018b7a <ip4_reass+0x1be>
    u16_t datagram_len = (u16_t)(offset + len);
 8018b5e:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 8018b60:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8018b62:	4413      	add	r3, r2
 8018b64:	827b      	strh	r3, [r7, #18]
    ipr->datagram_len = datagram_len;
 8018b66:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8018b68:	8a7a      	ldrh	r2, [r7, #18]
 8018b6a:	839a      	strh	r2, [r3, #28]
    ipr->flags |= IP_REASS_FLAG_LASTFRAG;
 8018b6c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8018b6e:	7f9b      	ldrb	r3, [r3, #30]
 8018b70:	f043 0301 	orr.w	r3, r3, #1
 8018b74:	b2da      	uxtb	r2, r3
 8018b76:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8018b78:	779a      	strb	r2, [r3, #30]
    LWIP_DEBUGF(IP_REASS_DEBUG,
                ("ip4_reass: last fragment seen, total len %"S16_F"\n",
                 ipr->datagram_len));
  }

  if (valid == IP_REASS_VALIDATE_TELEGRAM_FINISHED) {
 8018b7a:	697b      	ldr	r3, [r7, #20]
 8018b7c:	2b01      	cmp	r3, #1
 8018b7e:	d171      	bne.n	8018c64 <ip4_reass+0x2a8>
    struct ip_reassdata *ipr_prev;
    /* the totally last fragment (flag more fragments = 0) was received at least
     * once AND all fragments are received */
    u16_t datagram_len = (u16_t)(ipr->datagram_len + IP_HLEN);
 8018b80:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8018b82:	8b9b      	ldrh	r3, [r3, #28]
 8018b84:	3314      	adds	r3, #20
 8018b86:	823b      	strh	r3, [r7, #16]

    /* save the second pbuf before copying the header over the pointer */
    r = ((struct ip_reass_helper *)ipr->p->payload)->next_pbuf;
 8018b88:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8018b8a:	685b      	ldr	r3, [r3, #4]
 8018b8c:	685b      	ldr	r3, [r3, #4]
 8018b8e:	681b      	ldr	r3, [r3, #0]
 8018b90:	637b      	str	r3, [r7, #52]	; 0x34

    /* copy the original ip header back to the first pbuf */
    fraghdr = (struct ip_hdr *)(ipr->p->payload);
 8018b92:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8018b94:	685b      	ldr	r3, [r3, #4]
 8018b96:	685b      	ldr	r3, [r3, #4]
 8018b98:	62bb      	str	r3, [r7, #40]	; 0x28
    SMEMCPY(fraghdr, &ipr->iphdr, IP_HLEN);
 8018b9a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8018b9c:	3308      	adds	r3, #8
 8018b9e:	2214      	movs	r2, #20
 8018ba0:	4619      	mov	r1, r3
 8018ba2:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8018ba4:	f001 fa23 	bl	8019fee <memcpy>
    IPH_LEN_SET(fraghdr, lwip_htons(datagram_len));
 8018ba8:	8a3b      	ldrh	r3, [r7, #16]
 8018baa:	4618      	mov	r0, r3
 8018bac:	f7f6 fd96 	bl	800f6dc <lwip_htons>
 8018bb0:	4603      	mov	r3, r0
 8018bb2:	461a      	mov	r2, r3
 8018bb4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8018bb6:	805a      	strh	r2, [r3, #2]
    IPH_OFFSET_SET(fraghdr, 0);
 8018bb8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8018bba:	2200      	movs	r2, #0
 8018bbc:	719a      	strb	r2, [r3, #6]
 8018bbe:	2200      	movs	r2, #0
 8018bc0:	71da      	strb	r2, [r3, #7]
    IPH_CHKSUM_SET(fraghdr, 0);
 8018bc2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8018bc4:	2200      	movs	r2, #0
 8018bc6:	729a      	strb	r2, [r3, #10]
 8018bc8:	2200      	movs	r2, #0
 8018bca:	72da      	strb	r2, [r3, #11]
    IF__NETIF_CHECKSUM_ENABLED(ip_current_input_netif(), NETIF_CHECKSUM_GEN_IP) {
      IPH_CHKSUM_SET(fraghdr, inet_chksum(fraghdr, IP_HLEN));
    }
#endif /* CHECKSUM_GEN_IP */

    p = ipr->p;
 8018bcc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8018bce:	685b      	ldr	r3, [r3, #4]
 8018bd0:	607b      	str	r3, [r7, #4]

    /* chain together the pbufs contained within the reass_data list. */
    while (r != NULL) {
 8018bd2:	e00d      	b.n	8018bf0 <ip4_reass+0x234>
      iprh = (struct ip_reass_helper *)r->payload;
 8018bd4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8018bd6:	685b      	ldr	r3, [r3, #4]
 8018bd8:	60fb      	str	r3, [r7, #12]

      /* hide the ip header for every succeeding fragment */
      pbuf_remove_header(r, IP_HLEN);
 8018bda:	2114      	movs	r1, #20
 8018bdc:	6b78      	ldr	r0, [r7, #52]	; 0x34
 8018bde:	f7f8 f8db 	bl	8010d98 <pbuf_remove_header>
      pbuf_cat(p, r);
 8018be2:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8018be4:	6878      	ldr	r0, [r7, #4]
 8018be6:	f7f8 fa1f 	bl	8011028 <pbuf_cat>
      r = iprh->next_pbuf;
 8018bea:	68fb      	ldr	r3, [r7, #12]
 8018bec:	681b      	ldr	r3, [r3, #0]
 8018bee:	637b      	str	r3, [r7, #52]	; 0x34
    while (r != NULL) {
 8018bf0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8018bf2:	2b00      	cmp	r3, #0
 8018bf4:	d1ee      	bne.n	8018bd4 <ip4_reass+0x218>
    }

    /* find the previous entry in the linked list */
    if (ipr == reassdatagrams) {
 8018bf6:	4b1e      	ldr	r3, [pc, #120]	; (8018c70 <ip4_reass+0x2b4>)
 8018bf8:	681b      	ldr	r3, [r3, #0]
 8018bfa:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8018bfc:	429a      	cmp	r2, r3
 8018bfe:	d102      	bne.n	8018c06 <ip4_reass+0x24a>
      ipr_prev = NULL;
 8018c00:	2300      	movs	r3, #0
 8018c02:	62fb      	str	r3, [r7, #44]	; 0x2c
 8018c04:	e010      	b.n	8018c28 <ip4_reass+0x26c>
    } else {
      for (ipr_prev = reassdatagrams; ipr_prev != NULL; ipr_prev = ipr_prev->next) {
 8018c06:	4b1a      	ldr	r3, [pc, #104]	; (8018c70 <ip4_reass+0x2b4>)
 8018c08:	681b      	ldr	r3, [r3, #0]
 8018c0a:	62fb      	str	r3, [r7, #44]	; 0x2c
 8018c0c:	e007      	b.n	8018c1e <ip4_reass+0x262>
        if (ipr_prev->next == ipr) {
 8018c0e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8018c10:	681b      	ldr	r3, [r3, #0]
 8018c12:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8018c14:	429a      	cmp	r2, r3
 8018c16:	d006      	beq.n	8018c26 <ip4_reass+0x26a>
      for (ipr_prev = reassdatagrams; ipr_prev != NULL; ipr_prev = ipr_prev->next) {
 8018c18:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8018c1a:	681b      	ldr	r3, [r3, #0]
 8018c1c:	62fb      	str	r3, [r7, #44]	; 0x2c
 8018c1e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8018c20:	2b00      	cmp	r3, #0
 8018c22:	d1f4      	bne.n	8018c0e <ip4_reass+0x252>
 8018c24:	e000      	b.n	8018c28 <ip4_reass+0x26c>
          break;
 8018c26:	bf00      	nop
        }
      }
    }

    /* release the sources allocate for the fragment queue entry */
    ip_reass_dequeue_datagram(ipr, ipr_prev);
 8018c28:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8018c2a:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8018c2c:	f7ff fd2e 	bl	801868c <ip_reass_dequeue_datagram>

    /* and adjust the number of pbufs currently queued for reassembly. */
    clen = pbuf_clen(p);
 8018c30:	6878      	ldr	r0, [r7, #4]
 8018c32:	f7f8 f9bf 	bl	8010fb4 <pbuf_clen>
 8018c36:	4603      	mov	r3, r0
 8018c38:	843b      	strh	r3, [r7, #32]
    LWIP_ASSERT("ip_reass_pbufcount >= clen", ip_reass_pbufcount >= clen);
 8018c3a:	4b0c      	ldr	r3, [pc, #48]	; (8018c6c <ip4_reass+0x2b0>)
 8018c3c:	881b      	ldrh	r3, [r3, #0]
 8018c3e:	8c3a      	ldrh	r2, [r7, #32]
 8018c40:	429a      	cmp	r2, r3
 8018c42:	d906      	bls.n	8018c52 <ip4_reass+0x296>
 8018c44:	4b0b      	ldr	r3, [pc, #44]	; (8018c74 <ip4_reass+0x2b8>)
 8018c46:	f240 229b 	movw	r2, #667	; 0x29b
 8018c4a:	490b      	ldr	r1, [pc, #44]	; (8018c78 <ip4_reass+0x2bc>)
 8018c4c:	480b      	ldr	r0, [pc, #44]	; (8018c7c <ip4_reass+0x2c0>)
 8018c4e:	f000 ffff 	bl	8019c50 <iprintf>
    ip_reass_pbufcount = (u16_t)(ip_reass_pbufcount - clen);
 8018c52:	4b06      	ldr	r3, [pc, #24]	; (8018c6c <ip4_reass+0x2b0>)
 8018c54:	881a      	ldrh	r2, [r3, #0]
 8018c56:	8c3b      	ldrh	r3, [r7, #32]
 8018c58:	1ad3      	subs	r3, r2, r3
 8018c5a:	b29a      	uxth	r2, r3
 8018c5c:	4b03      	ldr	r3, [pc, #12]	; (8018c6c <ip4_reass+0x2b0>)
 8018c5e:	801a      	strh	r2, [r3, #0]

    MIB2_STATS_INC(mib2.ipreasmoks);

    /* Return the pbuf chain */
    return p;
 8018c60:	687b      	ldr	r3, [r7, #4]
 8018c62:	e038      	b.n	8018cd6 <ip4_reass+0x31a>
  }
  /* the datagram is not (yet?) reassembled completely */
  LWIP_DEBUGF(IP_REASS_DEBUG, ("ip_reass_pbufcount: %d out\n", ip_reass_pbufcount));
  return NULL;
 8018c64:	2300      	movs	r3, #0
 8018c66:	e036      	b.n	8018cd6 <ip4_reass+0x31a>
      goto nullreturn_ipr;
 8018c68:	bf00      	nop
 8018c6a:	e00a      	b.n	8018c82 <ip4_reass+0x2c6>
 8018c6c:	20007230 	.word	0x20007230
 8018c70:	2000722c 	.word	0x2000722c
 8018c74:	0801ec6c 	.word	0x0801ec6c
 8018c78:	0801eddc 	.word	0x0801eddc
 8018c7c:	0801ecb4 	.word	0x0801ecb4
    goto nullreturn_ipr;
 8018c80:	bf00      	nop

nullreturn_ipr:
  LWIP_ASSERT("ipr != NULL", ipr != NULL);
 8018c82:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8018c84:	2b00      	cmp	r3, #0
 8018c86:	d106      	bne.n	8018c96 <ip4_reass+0x2da>
 8018c88:	4b15      	ldr	r3, [pc, #84]	; (8018ce0 <ip4_reass+0x324>)
 8018c8a:	f44f 722a 	mov.w	r2, #680	; 0x2a8
 8018c8e:	4915      	ldr	r1, [pc, #84]	; (8018ce4 <ip4_reass+0x328>)
 8018c90:	4815      	ldr	r0, [pc, #84]	; (8018ce8 <ip4_reass+0x32c>)
 8018c92:	f000 ffdd 	bl	8019c50 <iprintf>
  if (ipr->p == NULL) {
 8018c96:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8018c98:	685b      	ldr	r3, [r3, #4]
 8018c9a:	2b00      	cmp	r3, #0
 8018c9c:	d116      	bne.n	8018ccc <ip4_reass+0x310>
    /* dropped pbuf after creating a new datagram entry: remove the entry, too */
    LWIP_ASSERT("not firstalthough just enqueued", ipr == reassdatagrams);
 8018c9e:	4b13      	ldr	r3, [pc, #76]	; (8018cec <ip4_reass+0x330>)
 8018ca0:	681b      	ldr	r3, [r3, #0]
 8018ca2:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8018ca4:	429a      	cmp	r2, r3
 8018ca6:	d006      	beq.n	8018cb6 <ip4_reass+0x2fa>
 8018ca8:	4b0d      	ldr	r3, [pc, #52]	; (8018ce0 <ip4_reass+0x324>)
 8018caa:	f240 22ab 	movw	r2, #683	; 0x2ab
 8018cae:	4910      	ldr	r1, [pc, #64]	; (8018cf0 <ip4_reass+0x334>)
 8018cb0:	480d      	ldr	r0, [pc, #52]	; (8018ce8 <ip4_reass+0x32c>)
 8018cb2:	f000 ffcd 	bl	8019c50 <iprintf>
    ip_reass_dequeue_datagram(ipr, NULL);
 8018cb6:	2100      	movs	r1, #0
 8018cb8:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8018cba:	f7ff fce7 	bl	801868c <ip_reass_dequeue_datagram>
 8018cbe:	e006      	b.n	8018cce <ip4_reass+0x312>
    goto nullreturn;
 8018cc0:	bf00      	nop
 8018cc2:	e004      	b.n	8018cce <ip4_reass+0x312>
    goto nullreturn;
 8018cc4:	bf00      	nop
 8018cc6:	e002      	b.n	8018cce <ip4_reass+0x312>
      goto nullreturn;
 8018cc8:	bf00      	nop
 8018cca:	e000      	b.n	8018cce <ip4_reass+0x312>
  }

nullreturn:
 8018ccc:	bf00      	nop
  LWIP_DEBUGF(IP_REASS_DEBUG, ("ip4_reass: nullreturn\n"));
  IPFRAG_STATS_INC(ip_frag.drop);
  pbuf_free(p);
 8018cce:	6878      	ldr	r0, [r7, #4]
 8018cd0:	f7f8 f8e8 	bl	8010ea4 <pbuf_free>
  return NULL;
 8018cd4:	2300      	movs	r3, #0
}
 8018cd6:	4618      	mov	r0, r3
 8018cd8:	3738      	adds	r7, #56	; 0x38
 8018cda:	46bd      	mov	sp, r7
 8018cdc:	bd80      	pop	{r7, pc}
 8018cde:	bf00      	nop
 8018ce0:	0801ec6c 	.word	0x0801ec6c
 8018ce4:	0801edf8 	.word	0x0801edf8
 8018ce8:	0801ecb4 	.word	0x0801ecb4
 8018cec:	2000722c 	.word	0x2000722c
 8018cf0:	0801ee04 	.word	0x0801ee04

08018cf4 <ip_frag_alloc_pbuf_custom_ref>:
#if IP_FRAG
#if !LWIP_NETIF_TX_SINGLE_PBUF
/** Allocate a new struct pbuf_custom_ref */
static struct pbuf_custom_ref *
ip_frag_alloc_pbuf_custom_ref(void)
{
 8018cf4:	b580      	push	{r7, lr}
 8018cf6:	af00      	add	r7, sp, #0
  return (struct pbuf_custom_ref *)memp_malloc(MEMP_FRAG_PBUF);
 8018cf8:	2005      	movs	r0, #5
 8018cfa:	f7f7 fa0d 	bl	8010118 <memp_malloc>
 8018cfe:	4603      	mov	r3, r0
}
 8018d00:	4618      	mov	r0, r3
 8018d02:	bd80      	pop	{r7, pc}

08018d04 <ip_frag_free_pbuf_custom_ref>:

/** Free a struct pbuf_custom_ref */
static void
ip_frag_free_pbuf_custom_ref(struct pbuf_custom_ref *p)
{
 8018d04:	b580      	push	{r7, lr}
 8018d06:	b082      	sub	sp, #8
 8018d08:	af00      	add	r7, sp, #0
 8018d0a:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("p != NULL", p != NULL);
 8018d0c:	687b      	ldr	r3, [r7, #4]
 8018d0e:	2b00      	cmp	r3, #0
 8018d10:	d106      	bne.n	8018d20 <ip_frag_free_pbuf_custom_ref+0x1c>
 8018d12:	4b07      	ldr	r3, [pc, #28]	; (8018d30 <ip_frag_free_pbuf_custom_ref+0x2c>)
 8018d14:	f44f 7231 	mov.w	r2, #708	; 0x2c4
 8018d18:	4906      	ldr	r1, [pc, #24]	; (8018d34 <ip_frag_free_pbuf_custom_ref+0x30>)
 8018d1a:	4807      	ldr	r0, [pc, #28]	; (8018d38 <ip_frag_free_pbuf_custom_ref+0x34>)
 8018d1c:	f000 ff98 	bl	8019c50 <iprintf>
  memp_free(MEMP_FRAG_PBUF, p);
 8018d20:	6879      	ldr	r1, [r7, #4]
 8018d22:	2005      	movs	r0, #5
 8018d24:	f7f7 fa68 	bl	80101f8 <memp_free>
}
 8018d28:	bf00      	nop
 8018d2a:	3708      	adds	r7, #8
 8018d2c:	46bd      	mov	sp, r7
 8018d2e:	bd80      	pop	{r7, pc}
 8018d30:	0801ec6c 	.word	0x0801ec6c
 8018d34:	0801ee24 	.word	0x0801ee24
 8018d38:	0801ecb4 	.word	0x0801ecb4

08018d3c <ipfrag_free_pbuf_custom>:

/** Free-callback function to free a 'struct pbuf_custom_ref', called by
 * pbuf_free. */
static void
ipfrag_free_pbuf_custom(struct pbuf *p)
{
 8018d3c:	b580      	push	{r7, lr}
 8018d3e:	b084      	sub	sp, #16
 8018d40:	af00      	add	r7, sp, #0
 8018d42:	6078      	str	r0, [r7, #4]
  struct pbuf_custom_ref *pcr = (struct pbuf_custom_ref *)p;
 8018d44:	687b      	ldr	r3, [r7, #4]
 8018d46:	60fb      	str	r3, [r7, #12]
  LWIP_ASSERT("pcr != NULL", pcr != NULL);
 8018d48:	68fb      	ldr	r3, [r7, #12]
 8018d4a:	2b00      	cmp	r3, #0
 8018d4c:	d106      	bne.n	8018d5c <ipfrag_free_pbuf_custom+0x20>
 8018d4e:	4b11      	ldr	r3, [pc, #68]	; (8018d94 <ipfrag_free_pbuf_custom+0x58>)
 8018d50:	f240 22ce 	movw	r2, #718	; 0x2ce
 8018d54:	4910      	ldr	r1, [pc, #64]	; (8018d98 <ipfrag_free_pbuf_custom+0x5c>)
 8018d56:	4811      	ldr	r0, [pc, #68]	; (8018d9c <ipfrag_free_pbuf_custom+0x60>)
 8018d58:	f000 ff7a 	bl	8019c50 <iprintf>
  LWIP_ASSERT("pcr == p", (void *)pcr == (void *)p);
 8018d5c:	68fa      	ldr	r2, [r7, #12]
 8018d5e:	687b      	ldr	r3, [r7, #4]
 8018d60:	429a      	cmp	r2, r3
 8018d62:	d006      	beq.n	8018d72 <ipfrag_free_pbuf_custom+0x36>
 8018d64:	4b0b      	ldr	r3, [pc, #44]	; (8018d94 <ipfrag_free_pbuf_custom+0x58>)
 8018d66:	f240 22cf 	movw	r2, #719	; 0x2cf
 8018d6a:	490d      	ldr	r1, [pc, #52]	; (8018da0 <ipfrag_free_pbuf_custom+0x64>)
 8018d6c:	480b      	ldr	r0, [pc, #44]	; (8018d9c <ipfrag_free_pbuf_custom+0x60>)
 8018d6e:	f000 ff6f 	bl	8019c50 <iprintf>
  if (pcr->original != NULL) {
 8018d72:	68fb      	ldr	r3, [r7, #12]
 8018d74:	695b      	ldr	r3, [r3, #20]
 8018d76:	2b00      	cmp	r3, #0
 8018d78:	d004      	beq.n	8018d84 <ipfrag_free_pbuf_custom+0x48>
    pbuf_free(pcr->original);
 8018d7a:	68fb      	ldr	r3, [r7, #12]
 8018d7c:	695b      	ldr	r3, [r3, #20]
 8018d7e:	4618      	mov	r0, r3
 8018d80:	f7f8 f890 	bl	8010ea4 <pbuf_free>
  }
  ip_frag_free_pbuf_custom_ref(pcr);
 8018d84:	68f8      	ldr	r0, [r7, #12]
 8018d86:	f7ff ffbd 	bl	8018d04 <ip_frag_free_pbuf_custom_ref>
}
 8018d8a:	bf00      	nop
 8018d8c:	3710      	adds	r7, #16
 8018d8e:	46bd      	mov	sp, r7
 8018d90:	bd80      	pop	{r7, pc}
 8018d92:	bf00      	nop
 8018d94:	0801ec6c 	.word	0x0801ec6c
 8018d98:	0801ee30 	.word	0x0801ee30
 8018d9c:	0801ecb4 	.word	0x0801ecb4
 8018da0:	0801ee3c 	.word	0x0801ee3c

08018da4 <ip4_frag>:
 *
 * @return ERR_OK if sent successfully, err_t otherwise
 */
err_t
ip4_frag(struct pbuf *p, struct netif *netif, const ip4_addr_t *dest)
{
 8018da4:	b580      	push	{r7, lr}
 8018da6:	b094      	sub	sp, #80	; 0x50
 8018da8:	af02      	add	r7, sp, #8
 8018daa:	60f8      	str	r0, [r7, #12]
 8018dac:	60b9      	str	r1, [r7, #8]
 8018dae:	607a      	str	r2, [r7, #4]
  struct pbuf *rambuf;
#if !LWIP_NETIF_TX_SINGLE_PBUF
  struct pbuf *newpbuf;
  u16_t newpbuflen = 0;
 8018db0:	2300      	movs	r3, #0
 8018db2:	f8a7 3046 	strh.w	r3, [r7, #70]	; 0x46
  u16_t left_to_copy;
#endif
  struct ip_hdr *original_iphdr;
  struct ip_hdr *iphdr;
  const u16_t nfb = (u16_t)((netif->mtu - IP_HLEN) / 8);
 8018db6:	68bb      	ldr	r3, [r7, #8]
 8018db8:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 8018dba:	3b14      	subs	r3, #20
 8018dbc:	2b00      	cmp	r3, #0
 8018dbe:	da00      	bge.n	8018dc2 <ip4_frag+0x1e>
 8018dc0:	3307      	adds	r3, #7
 8018dc2:	10db      	asrs	r3, r3, #3
 8018dc4:	877b      	strh	r3, [r7, #58]	; 0x3a
  u16_t left, fragsize;
  u16_t ofo;
  int last;
  u16_t poff = IP_HLEN;
 8018dc6:	2314      	movs	r3, #20
 8018dc8:	87fb      	strh	r3, [r7, #62]	; 0x3e
  u16_t tmp;
  int mf_set;

  original_iphdr = (struct ip_hdr *)p->payload;
 8018dca:	68fb      	ldr	r3, [r7, #12]
 8018dcc:	685b      	ldr	r3, [r3, #4]
 8018dce:	637b      	str	r3, [r7, #52]	; 0x34
  iphdr = original_iphdr;
 8018dd0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8018dd2:	633b      	str	r3, [r7, #48]	; 0x30
  if (IPH_HL_BYTES(iphdr) != IP_HLEN) {
 8018dd4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8018dd6:	781b      	ldrb	r3, [r3, #0]
 8018dd8:	f003 030f 	and.w	r3, r3, #15
 8018ddc:	b2db      	uxtb	r3, r3
 8018dde:	009b      	lsls	r3, r3, #2
 8018de0:	b2db      	uxtb	r3, r3
 8018de2:	2b14      	cmp	r3, #20
 8018de4:	d002      	beq.n	8018dec <ip4_frag+0x48>
    /* ip4_frag() does not support IP options */
    return ERR_VAL;
 8018de6:	f06f 0305 	mvn.w	r3, #5
 8018dea:	e110      	b.n	801900e <ip4_frag+0x26a>
  }
  LWIP_ERROR("ip4_frag(): pbuf too short", p->len >= IP_HLEN, return ERR_VAL);
 8018dec:	68fb      	ldr	r3, [r7, #12]
 8018dee:	895b      	ldrh	r3, [r3, #10]
 8018df0:	2b13      	cmp	r3, #19
 8018df2:	d809      	bhi.n	8018e08 <ip4_frag+0x64>
 8018df4:	4b88      	ldr	r3, [pc, #544]	; (8019018 <ip4_frag+0x274>)
 8018df6:	f44f 723f 	mov.w	r2, #764	; 0x2fc
 8018dfa:	4988      	ldr	r1, [pc, #544]	; (801901c <ip4_frag+0x278>)
 8018dfc:	4888      	ldr	r0, [pc, #544]	; (8019020 <ip4_frag+0x27c>)
 8018dfe:	f000 ff27 	bl	8019c50 <iprintf>
 8018e02:	f06f 0305 	mvn.w	r3, #5
 8018e06:	e102      	b.n	801900e <ip4_frag+0x26a>

  /* Save original offset */
  tmp = lwip_ntohs(IPH_OFFSET(iphdr));
 8018e08:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8018e0a:	88db      	ldrh	r3, [r3, #6]
 8018e0c:	b29b      	uxth	r3, r3
 8018e0e:	4618      	mov	r0, r3
 8018e10:	f7f6 fc64 	bl	800f6dc <lwip_htons>
 8018e14:	4603      	mov	r3, r0
 8018e16:	87bb      	strh	r3, [r7, #60]	; 0x3c
  ofo = tmp & IP_OFFMASK;
 8018e18:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 8018e1a:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8018e1e:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
  /* already fragmented? if so, the last fragment we create must have MF, too */
  mf_set = tmp & IP_MF;
 8018e22:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 8018e24:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8018e28:	62fb      	str	r3, [r7, #44]	; 0x2c

  left = (u16_t)(p->tot_len - IP_HLEN);
 8018e2a:	68fb      	ldr	r3, [r7, #12]
 8018e2c:	891b      	ldrh	r3, [r3, #8]
 8018e2e:	3b14      	subs	r3, #20
 8018e30:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42

  while (left) {
 8018e34:	e0e1      	b.n	8018ffa <ip4_frag+0x256>
    /* Fill this fragment */
    fragsize = LWIP_MIN(left, (u16_t)(nfb * 8));
 8018e36:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 8018e38:	00db      	lsls	r3, r3, #3
 8018e3a:	b29b      	uxth	r3, r3
 8018e3c:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 8018e40:	4293      	cmp	r3, r2
 8018e42:	bf28      	it	cs
 8018e44:	4613      	movcs	r3, r2
 8018e46:	857b      	strh	r3, [r7, #42]	; 0x2a
    /* When not using a static buffer, create a chain of pbufs.
     * The first will be a PBUF_RAM holding the link and IP header.
     * The rest will be PBUF_REFs mirroring the pbuf chain to be fragged,
     * but limited to the size of an mtu.
     */
    rambuf = pbuf_alloc(PBUF_LINK, IP_HLEN, PBUF_RAM);
 8018e48:	f44f 7220 	mov.w	r2, #640	; 0x280
 8018e4c:	2114      	movs	r1, #20
 8018e4e:	200e      	movs	r0, #14
 8018e50:	f7f7 fd44 	bl	80108dc <pbuf_alloc>
 8018e54:	6278      	str	r0, [r7, #36]	; 0x24
    if (rambuf == NULL) {
 8018e56:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8018e58:	2b00      	cmp	r3, #0
 8018e5a:	f000 80d5 	beq.w	8019008 <ip4_frag+0x264>
      goto memerr;
    }
    LWIP_ASSERT("this needs a pbuf in one piece!",
 8018e5e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8018e60:	895b      	ldrh	r3, [r3, #10]
 8018e62:	2b13      	cmp	r3, #19
 8018e64:	d806      	bhi.n	8018e74 <ip4_frag+0xd0>
 8018e66:	4b6c      	ldr	r3, [pc, #432]	; (8019018 <ip4_frag+0x274>)
 8018e68:	f44f 7249 	mov.w	r2, #804	; 0x324
 8018e6c:	496d      	ldr	r1, [pc, #436]	; (8019024 <ip4_frag+0x280>)
 8018e6e:	486c      	ldr	r0, [pc, #432]	; (8019020 <ip4_frag+0x27c>)
 8018e70:	f000 feee 	bl	8019c50 <iprintf>
                (rambuf->len >= (IP_HLEN)));
    SMEMCPY(rambuf->payload, original_iphdr, IP_HLEN);
 8018e74:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8018e76:	685b      	ldr	r3, [r3, #4]
 8018e78:	2214      	movs	r2, #20
 8018e7a:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8018e7c:	4618      	mov	r0, r3
 8018e7e:	f001 f8b6 	bl	8019fee <memcpy>
    iphdr = (struct ip_hdr *)rambuf->payload;
 8018e82:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8018e84:	685b      	ldr	r3, [r3, #4]
 8018e86:	633b      	str	r3, [r7, #48]	; 0x30

    left_to_copy = fragsize;
 8018e88:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8018e8a:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
    while (left_to_copy) {
 8018e8e:	e064      	b.n	8018f5a <ip4_frag+0x1b6>
      struct pbuf_custom_ref *pcr;
      u16_t plen = (u16_t)(p->len - poff);
 8018e90:	68fb      	ldr	r3, [r7, #12]
 8018e92:	895a      	ldrh	r2, [r3, #10]
 8018e94:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 8018e96:	1ad3      	subs	r3, r2, r3
 8018e98:	83fb      	strh	r3, [r7, #30]
      LWIP_ASSERT("p->len >= poff", p->len >= poff);
 8018e9a:	68fb      	ldr	r3, [r7, #12]
 8018e9c:	895b      	ldrh	r3, [r3, #10]
 8018e9e:	8ffa      	ldrh	r2, [r7, #62]	; 0x3e
 8018ea0:	429a      	cmp	r2, r3
 8018ea2:	d906      	bls.n	8018eb2 <ip4_frag+0x10e>
 8018ea4:	4b5c      	ldr	r3, [pc, #368]	; (8019018 <ip4_frag+0x274>)
 8018ea6:	f240 322d 	movw	r2, #813	; 0x32d
 8018eaa:	495f      	ldr	r1, [pc, #380]	; (8019028 <ip4_frag+0x284>)
 8018eac:	485c      	ldr	r0, [pc, #368]	; (8019020 <ip4_frag+0x27c>)
 8018eae:	f000 fecf 	bl	8019c50 <iprintf>
      newpbuflen = LWIP_MIN(left_to_copy, plen);
 8018eb2:	8bfa      	ldrh	r2, [r7, #30]
 8018eb4:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 8018eb8:	4293      	cmp	r3, r2
 8018eba:	bf28      	it	cs
 8018ebc:	4613      	movcs	r3, r2
 8018ebe:	f8a7 3046 	strh.w	r3, [r7, #70]	; 0x46
      /* Is this pbuf already empty? */
      if (!newpbuflen) {
 8018ec2:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 8018ec6:	2b00      	cmp	r3, #0
 8018ec8:	d105      	bne.n	8018ed6 <ip4_frag+0x132>
        poff = 0;
 8018eca:	2300      	movs	r3, #0
 8018ecc:	87fb      	strh	r3, [r7, #62]	; 0x3e
        p = p->next;
 8018ece:	68fb      	ldr	r3, [r7, #12]
 8018ed0:	681b      	ldr	r3, [r3, #0]
 8018ed2:	60fb      	str	r3, [r7, #12]
        continue;
 8018ed4:	e041      	b.n	8018f5a <ip4_frag+0x1b6>
      }
      pcr = ip_frag_alloc_pbuf_custom_ref();
 8018ed6:	f7ff ff0d 	bl	8018cf4 <ip_frag_alloc_pbuf_custom_ref>
 8018eda:	61b8      	str	r0, [r7, #24]
      if (pcr == NULL) {
 8018edc:	69bb      	ldr	r3, [r7, #24]
 8018ede:	2b00      	cmp	r3, #0
 8018ee0:	d103      	bne.n	8018eea <ip4_frag+0x146>
        pbuf_free(rambuf);
 8018ee2:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8018ee4:	f7f7 ffde 	bl	8010ea4 <pbuf_free>
        goto memerr;
 8018ee8:	e08f      	b.n	801900a <ip4_frag+0x266>
      }
      /* Mirror this pbuf, although we might not need all of it. */
      newpbuf = pbuf_alloced_custom(PBUF_RAW, newpbuflen, PBUF_REF, &pcr->pc,
 8018eea:	69b8      	ldr	r0, [r7, #24]
                                    (u8_t *)p->payload + poff, newpbuflen);
 8018eec:	68fb      	ldr	r3, [r7, #12]
 8018eee:	685a      	ldr	r2, [r3, #4]
      newpbuf = pbuf_alloced_custom(PBUF_RAW, newpbuflen, PBUF_REF, &pcr->pc,
 8018ef0:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 8018ef2:	4413      	add	r3, r2
 8018ef4:	f8b7 1046 	ldrh.w	r1, [r7, #70]	; 0x46
 8018ef8:	f8b7 2046 	ldrh.w	r2, [r7, #70]	; 0x46
 8018efc:	9201      	str	r2, [sp, #4]
 8018efe:	9300      	str	r3, [sp, #0]
 8018f00:	4603      	mov	r3, r0
 8018f02:	2241      	movs	r2, #65	; 0x41
 8018f04:	2000      	movs	r0, #0
 8018f06:	f7f7 fe15 	bl	8010b34 <pbuf_alloced_custom>
 8018f0a:	6178      	str	r0, [r7, #20]
      if (newpbuf == NULL) {
 8018f0c:	697b      	ldr	r3, [r7, #20]
 8018f0e:	2b00      	cmp	r3, #0
 8018f10:	d106      	bne.n	8018f20 <ip4_frag+0x17c>
        ip_frag_free_pbuf_custom_ref(pcr);
 8018f12:	69b8      	ldr	r0, [r7, #24]
 8018f14:	f7ff fef6 	bl	8018d04 <ip_frag_free_pbuf_custom_ref>
        pbuf_free(rambuf);
 8018f18:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8018f1a:	f7f7 ffc3 	bl	8010ea4 <pbuf_free>
        goto memerr;
 8018f1e:	e074      	b.n	801900a <ip4_frag+0x266>
      }
      pbuf_ref(p);
 8018f20:	68f8      	ldr	r0, [r7, #12]
 8018f22:	f7f8 f85f 	bl	8010fe4 <pbuf_ref>
      pcr->original = p;
 8018f26:	69bb      	ldr	r3, [r7, #24]
 8018f28:	68fa      	ldr	r2, [r7, #12]
 8018f2a:	615a      	str	r2, [r3, #20]
      pcr->pc.custom_free_function = ipfrag_free_pbuf_custom;
 8018f2c:	69bb      	ldr	r3, [r7, #24]
 8018f2e:	4a3f      	ldr	r2, [pc, #252]	; (801902c <ip4_frag+0x288>)
 8018f30:	611a      	str	r2, [r3, #16]

      /* Add it to end of rambuf's chain, but using pbuf_cat, not pbuf_chain
       * so that it is removed when pbuf_dechain is later called on rambuf.
       */
      pbuf_cat(rambuf, newpbuf);
 8018f32:	6979      	ldr	r1, [r7, #20]
 8018f34:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8018f36:	f7f8 f877 	bl	8011028 <pbuf_cat>
      left_to_copy = (u16_t)(left_to_copy - newpbuflen);
 8018f3a:	f8b7 2044 	ldrh.w	r2, [r7, #68]	; 0x44
 8018f3e:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 8018f42:	1ad3      	subs	r3, r2, r3
 8018f44:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
      if (left_to_copy) {
 8018f48:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 8018f4c:	2b00      	cmp	r3, #0
 8018f4e:	d004      	beq.n	8018f5a <ip4_frag+0x1b6>
        poff = 0;
 8018f50:	2300      	movs	r3, #0
 8018f52:	87fb      	strh	r3, [r7, #62]	; 0x3e
        p = p->next;
 8018f54:	68fb      	ldr	r3, [r7, #12]
 8018f56:	681b      	ldr	r3, [r3, #0]
 8018f58:	60fb      	str	r3, [r7, #12]
    while (left_to_copy) {
 8018f5a:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 8018f5e:	2b00      	cmp	r3, #0
 8018f60:	d196      	bne.n	8018e90 <ip4_frag+0xec>
      }
    }
    poff = (u16_t)(poff + newpbuflen);
 8018f62:	8ffa      	ldrh	r2, [r7, #62]	; 0x3e
 8018f64:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 8018f68:	4413      	add	r3, r2
 8018f6a:	87fb      	strh	r3, [r7, #62]	; 0x3e
#endif /* LWIP_NETIF_TX_SINGLE_PBUF */

    /* Correct header */
    last = (left <= netif->mtu - IP_HLEN);
 8018f6c:	68bb      	ldr	r3, [r7, #8]
 8018f6e:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 8018f70:	f1a3 0213 	sub.w	r2, r3, #19
 8018f74:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 8018f78:	429a      	cmp	r2, r3
 8018f7a:	bfcc      	ite	gt
 8018f7c:	2301      	movgt	r3, #1
 8018f7e:	2300      	movle	r3, #0
 8018f80:	b2db      	uxtb	r3, r3
 8018f82:	623b      	str	r3, [r7, #32]

    /* Set new offset and MF flag */
    tmp = (IP_OFFMASK & (ofo));
 8018f84:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 8018f88:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8018f8c:	87bb      	strh	r3, [r7, #60]	; 0x3c
    if (!last || mf_set) {
 8018f8e:	6a3b      	ldr	r3, [r7, #32]
 8018f90:	2b00      	cmp	r3, #0
 8018f92:	d002      	beq.n	8018f9a <ip4_frag+0x1f6>
 8018f94:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8018f96:	2b00      	cmp	r3, #0
 8018f98:	d003      	beq.n	8018fa2 <ip4_frag+0x1fe>
      /* the last fragment has MF set if the input frame had it */
      tmp = tmp | IP_MF;
 8018f9a:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 8018f9c:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8018fa0:	87bb      	strh	r3, [r7, #60]	; 0x3c
    }
    IPH_OFFSET_SET(iphdr, lwip_htons(tmp));
 8018fa2:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 8018fa4:	4618      	mov	r0, r3
 8018fa6:	f7f6 fb99 	bl	800f6dc <lwip_htons>
 8018faa:	4603      	mov	r3, r0
 8018fac:	461a      	mov	r2, r3
 8018fae:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8018fb0:	80da      	strh	r2, [r3, #6]
    IPH_LEN_SET(iphdr, lwip_htons((u16_t)(fragsize + IP_HLEN)));
 8018fb2:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8018fb4:	3314      	adds	r3, #20
 8018fb6:	b29b      	uxth	r3, r3
 8018fb8:	4618      	mov	r0, r3
 8018fba:	f7f6 fb8f 	bl	800f6dc <lwip_htons>
 8018fbe:	4603      	mov	r3, r0
 8018fc0:	461a      	mov	r2, r3
 8018fc2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8018fc4:	805a      	strh	r2, [r3, #2]
    IPH_CHKSUM_SET(iphdr, 0);
 8018fc6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8018fc8:	2200      	movs	r2, #0
 8018fca:	729a      	strb	r2, [r3, #10]
 8018fcc:	2200      	movs	r2, #0
 8018fce:	72da      	strb	r2, [r3, #11]
#endif /* CHECKSUM_GEN_IP */

    /* No need for separate header pbuf - we allowed room for it in rambuf
     * when allocated.
     */
    netif->output(netif, rambuf, dest);
 8018fd0:	68bb      	ldr	r3, [r7, #8]
 8018fd2:	695b      	ldr	r3, [r3, #20]
 8018fd4:	687a      	ldr	r2, [r7, #4]
 8018fd6:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8018fd8:	68b8      	ldr	r0, [r7, #8]
 8018fda:	4798      	blx	r3
     * recreate it next time round the loop. If we're lucky the hardware
     * will have already sent the packet, the free will really free, and
     * there will be zero memory penalty.
     */

    pbuf_free(rambuf);
 8018fdc:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8018fde:	f7f7 ff61 	bl	8010ea4 <pbuf_free>
    left = (u16_t)(left - fragsize);
 8018fe2:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 8018fe6:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8018fe8:	1ad3      	subs	r3, r2, r3
 8018fea:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
    ofo = (u16_t)(ofo + nfb);
 8018fee:	f8b7 2040 	ldrh.w	r2, [r7, #64]	; 0x40
 8018ff2:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 8018ff4:	4413      	add	r3, r2
 8018ff6:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
  while (left) {
 8018ffa:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 8018ffe:	2b00      	cmp	r3, #0
 8019000:	f47f af19 	bne.w	8018e36 <ip4_frag+0x92>
  }
  MIB2_STATS_INC(mib2.ipfragoks);
  return ERR_OK;
 8019004:	2300      	movs	r3, #0
 8019006:	e002      	b.n	801900e <ip4_frag+0x26a>
      goto memerr;
 8019008:	bf00      	nop
memerr:
  MIB2_STATS_INC(mib2.ipfragfails);
  return ERR_MEM;
 801900a:	f04f 33ff 	mov.w	r3, #4294967295
}
 801900e:	4618      	mov	r0, r3
 8019010:	3748      	adds	r7, #72	; 0x48
 8019012:	46bd      	mov	sp, r7
 8019014:	bd80      	pop	{r7, pc}
 8019016:	bf00      	nop
 8019018:	0801ec6c 	.word	0x0801ec6c
 801901c:	0801ee48 	.word	0x0801ee48
 8019020:	0801ecb4 	.word	0x0801ecb4
 8019024:	0801ee64 	.word	0x0801ee64
 8019028:	0801ee84 	.word	0x0801ee84
 801902c:	08018d3d 	.word	0x08018d3d

08019030 <ethernet_input>:
 * @see ETHARP_SUPPORT_VLAN
 * @see LWIP_HOOK_VLAN_CHECK
 */
err_t
ethernet_input(struct pbuf *p, struct netif *netif)
{
 8019030:	b580      	push	{r7, lr}
 8019032:	b086      	sub	sp, #24
 8019034:	af00      	add	r7, sp, #0
 8019036:	6078      	str	r0, [r7, #4]
 8019038:	6039      	str	r1, [r7, #0]
  struct eth_hdr *ethhdr;
  u16_t type;
#if LWIP_ARP || ETHARP_SUPPORT_VLAN || LWIP_IPV6
  u16_t next_hdr_offset = SIZEOF_ETH_HDR;
 801903a:	230e      	movs	r3, #14
 801903c:	82fb      	strh	r3, [r7, #22]
#endif /* LWIP_ARP || ETHARP_SUPPORT_VLAN */

  LWIP_ASSERT_CORE_LOCKED();

  if (p->len <= SIZEOF_ETH_HDR) {
 801903e:	687b      	ldr	r3, [r7, #4]
 8019040:	895b      	ldrh	r3, [r3, #10]
 8019042:	2b0e      	cmp	r3, #14
 8019044:	d96e      	bls.n	8019124 <ethernet_input+0xf4>
    ETHARP_STATS_INC(etharp.drop);
    MIB2_STATS_NETIF_INC(netif, ifinerrors);
    goto free_and_return;
  }

  if (p->if_idx == NETIF_NO_INDEX) {
 8019046:	687b      	ldr	r3, [r7, #4]
 8019048:	7bdb      	ldrb	r3, [r3, #15]
 801904a:	2b00      	cmp	r3, #0
 801904c:	d106      	bne.n	801905c <ethernet_input+0x2c>
    p->if_idx = netif_get_index(netif);
 801904e:	683b      	ldr	r3, [r7, #0]
 8019050:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8019054:	3301      	adds	r3, #1
 8019056:	b2da      	uxtb	r2, r3
 8019058:	687b      	ldr	r3, [r7, #4]
 801905a:	73da      	strb	r2, [r3, #15]
  }

  /* points to packet payload, which starts with an Ethernet header */
  ethhdr = (struct eth_hdr *)p->payload;
 801905c:	687b      	ldr	r3, [r7, #4]
 801905e:	685b      	ldr	r3, [r3, #4]
 8019060:	613b      	str	r3, [r7, #16]
               (unsigned char)ethhdr->dest.addr[3], (unsigned char)ethhdr->dest.addr[4], (unsigned char)ethhdr->dest.addr[5],
               (unsigned char)ethhdr->src.addr[0],  (unsigned char)ethhdr->src.addr[1],  (unsigned char)ethhdr->src.addr[2],
               (unsigned char)ethhdr->src.addr[3],  (unsigned char)ethhdr->src.addr[4],  (unsigned char)ethhdr->src.addr[5],
               lwip_htons(ethhdr->type)));

  type = ethhdr->type;
 8019062:	693b      	ldr	r3, [r7, #16]
 8019064:	7b1a      	ldrb	r2, [r3, #12]
 8019066:	7b5b      	ldrb	r3, [r3, #13]
 8019068:	021b      	lsls	r3, r3, #8
 801906a:	4313      	orrs	r3, r2
 801906c:	81fb      	strh	r3, [r7, #14]

#if LWIP_ARP_FILTER_NETIF
  netif = LWIP_ARP_FILTER_NETIF_FN(p, netif, lwip_htons(type));
#endif /* LWIP_ARP_FILTER_NETIF*/

  if (ethhdr->dest.addr[0] & 1) {
 801906e:	693b      	ldr	r3, [r7, #16]
 8019070:	781b      	ldrb	r3, [r3, #0]
 8019072:	f003 0301 	and.w	r3, r3, #1
 8019076:	2b00      	cmp	r3, #0
 8019078:	d023      	beq.n	80190c2 <ethernet_input+0x92>
    /* this might be a multicast or broadcast packet */
    if (ethhdr->dest.addr[0] == LL_IP4_MULTICAST_ADDR_0) {
 801907a:	693b      	ldr	r3, [r7, #16]
 801907c:	781b      	ldrb	r3, [r3, #0]
 801907e:	2b01      	cmp	r3, #1
 8019080:	d10f      	bne.n	80190a2 <ethernet_input+0x72>
#if LWIP_IPV4
      if ((ethhdr->dest.addr[1] == LL_IP4_MULTICAST_ADDR_1) &&
 8019082:	693b      	ldr	r3, [r7, #16]
 8019084:	785b      	ldrb	r3, [r3, #1]
 8019086:	2b00      	cmp	r3, #0
 8019088:	d11b      	bne.n	80190c2 <ethernet_input+0x92>
          (ethhdr->dest.addr[2] == LL_IP4_MULTICAST_ADDR_2)) {
 801908a:	693b      	ldr	r3, [r7, #16]
 801908c:	789b      	ldrb	r3, [r3, #2]
      if ((ethhdr->dest.addr[1] == LL_IP4_MULTICAST_ADDR_1) &&
 801908e:	2b5e      	cmp	r3, #94	; 0x5e
 8019090:	d117      	bne.n	80190c2 <ethernet_input+0x92>
        /* mark the pbuf as link-layer multicast */
        p->flags |= PBUF_FLAG_LLMCAST;
 8019092:	687b      	ldr	r3, [r7, #4]
 8019094:	7b5b      	ldrb	r3, [r3, #13]
 8019096:	f043 0310 	orr.w	r3, r3, #16
 801909a:	b2da      	uxtb	r2, r3
 801909c:	687b      	ldr	r3, [r7, #4]
 801909e:	735a      	strb	r2, [r3, #13]
 80190a0:	e00f      	b.n	80190c2 <ethernet_input+0x92>
             (ethhdr->dest.addr[1] == LL_IP6_MULTICAST_ADDR_1)) {
      /* mark the pbuf as link-layer multicast */
      p->flags |= PBUF_FLAG_LLMCAST;
    }
#endif /* LWIP_IPV6 */
    else if (eth_addr_cmp(&ethhdr->dest, &ethbroadcast)) {
 80190a2:	693b      	ldr	r3, [r7, #16]
 80190a4:	2206      	movs	r2, #6
 80190a6:	4928      	ldr	r1, [pc, #160]	; (8019148 <ethernet_input+0x118>)
 80190a8:	4618      	mov	r0, r3
 80190aa:	f000 ff17 	bl	8019edc <memcmp>
 80190ae:	4603      	mov	r3, r0
 80190b0:	2b00      	cmp	r3, #0
 80190b2:	d106      	bne.n	80190c2 <ethernet_input+0x92>
      /* mark the pbuf as link-layer broadcast */
      p->flags |= PBUF_FLAG_LLBCAST;
 80190b4:	687b      	ldr	r3, [r7, #4]
 80190b6:	7b5b      	ldrb	r3, [r3, #13]
 80190b8:	f043 0308 	orr.w	r3, r3, #8
 80190bc:	b2da      	uxtb	r2, r3
 80190be:	687b      	ldr	r3, [r7, #4]
 80190c0:	735a      	strb	r2, [r3, #13]
    }
  }

  switch (type) {
 80190c2:	89fb      	ldrh	r3, [r7, #14]
 80190c4:	2b08      	cmp	r3, #8
 80190c6:	d003      	beq.n	80190d0 <ethernet_input+0xa0>
 80190c8:	f5b3 6fc1 	cmp.w	r3, #1544	; 0x608
 80190cc:	d014      	beq.n	80190f8 <ethernet_input+0xc8>
      }
#endif
      ETHARP_STATS_INC(etharp.proterr);
      ETHARP_STATS_INC(etharp.drop);
      MIB2_STATS_NETIF_INC(netif, ifinunknownprotos);
      goto free_and_return;
 80190ce:	e032      	b.n	8019136 <ethernet_input+0x106>
      if (!(netif->flags & NETIF_FLAG_ETHARP)) {
 80190d0:	683b      	ldr	r3, [r7, #0]
 80190d2:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 80190d6:	f003 0308 	and.w	r3, r3, #8
 80190da:	2b00      	cmp	r3, #0
 80190dc:	d024      	beq.n	8019128 <ethernet_input+0xf8>
      if (pbuf_remove_header(p, next_hdr_offset)) {
 80190de:	8afb      	ldrh	r3, [r7, #22]
 80190e0:	4619      	mov	r1, r3
 80190e2:	6878      	ldr	r0, [r7, #4]
 80190e4:	f7f7 fe58 	bl	8010d98 <pbuf_remove_header>
 80190e8:	4603      	mov	r3, r0
 80190ea:	2b00      	cmp	r3, #0
 80190ec:	d11e      	bne.n	801912c <ethernet_input+0xfc>
        ip4_input(p, netif);
 80190ee:	6839      	ldr	r1, [r7, #0]
 80190f0:	6878      	ldr	r0, [r7, #4]
 80190f2:	f7fe ff21 	bl	8017f38 <ip4_input>
      break;
 80190f6:	e013      	b.n	8019120 <ethernet_input+0xf0>
      if (!(netif->flags & NETIF_FLAG_ETHARP)) {
 80190f8:	683b      	ldr	r3, [r7, #0]
 80190fa:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 80190fe:	f003 0308 	and.w	r3, r3, #8
 8019102:	2b00      	cmp	r3, #0
 8019104:	d014      	beq.n	8019130 <ethernet_input+0x100>
      if (pbuf_remove_header(p, next_hdr_offset)) {
 8019106:	8afb      	ldrh	r3, [r7, #22]
 8019108:	4619      	mov	r1, r3
 801910a:	6878      	ldr	r0, [r7, #4]
 801910c:	f7f7 fe44 	bl	8010d98 <pbuf_remove_header>
 8019110:	4603      	mov	r3, r0
 8019112:	2b00      	cmp	r3, #0
 8019114:	d10e      	bne.n	8019134 <ethernet_input+0x104>
        etharp_input(p, netif);
 8019116:	6839      	ldr	r1, [r7, #0]
 8019118:	6878      	ldr	r0, [r7, #4]
 801911a:	f7fe f89b 	bl	8017254 <etharp_input>
      break;
 801911e:	bf00      	nop
  }

  /* This means the pbuf is freed or consumed,
     so the caller doesn't have to free it again */
  return ERR_OK;
 8019120:	2300      	movs	r3, #0
 8019122:	e00c      	b.n	801913e <ethernet_input+0x10e>
    goto free_and_return;
 8019124:	bf00      	nop
 8019126:	e006      	b.n	8019136 <ethernet_input+0x106>
        goto free_and_return;
 8019128:	bf00      	nop
 801912a:	e004      	b.n	8019136 <ethernet_input+0x106>
        goto free_and_return;
 801912c:	bf00      	nop
 801912e:	e002      	b.n	8019136 <ethernet_input+0x106>
        goto free_and_return;
 8019130:	bf00      	nop
 8019132:	e000      	b.n	8019136 <ethernet_input+0x106>
        goto free_and_return;
 8019134:	bf00      	nop

free_and_return:
  pbuf_free(p);
 8019136:	6878      	ldr	r0, [r7, #4]
 8019138:	f7f7 feb4 	bl	8010ea4 <pbuf_free>
  return ERR_OK;
 801913c:	2300      	movs	r3, #0
}
 801913e:	4618      	mov	r0, r3
 8019140:	3718      	adds	r7, #24
 8019142:	46bd      	mov	sp, r7
 8019144:	bd80      	pop	{r7, pc}
 8019146:	bf00      	nop
 8019148:	0801f040 	.word	0x0801f040

0801914c <ethernet_output>:
 * @return ERR_OK if the packet was sent, any other err_t on failure
 */
err_t
ethernet_output(struct netif * netif, struct pbuf * p,
                const struct eth_addr * src, const struct eth_addr * dst,
                u16_t eth_type) {
 801914c:	b580      	push	{r7, lr}
 801914e:	b086      	sub	sp, #24
 8019150:	af00      	add	r7, sp, #0
 8019152:	60f8      	str	r0, [r7, #12]
 8019154:	60b9      	str	r1, [r7, #8]
 8019156:	607a      	str	r2, [r7, #4]
 8019158:	603b      	str	r3, [r7, #0]
  struct eth_hdr *ethhdr;
  u16_t eth_type_be = lwip_htons(eth_type);
 801915a:	8c3b      	ldrh	r3, [r7, #32]
 801915c:	4618      	mov	r0, r3
 801915e:	f7f6 fabd 	bl	800f6dc <lwip_htons>
 8019162:	4603      	mov	r3, r0
 8019164:	82fb      	strh	r3, [r7, #22]

    eth_type_be = PP_HTONS(ETHTYPE_VLAN);
  } else
#endif /* ETHARP_SUPPORT_VLAN && defined(LWIP_HOOK_VLAN_SET) */
  {
    if (pbuf_add_header(p, SIZEOF_ETH_HDR) != 0) {
 8019166:	210e      	movs	r1, #14
 8019168:	68b8      	ldr	r0, [r7, #8]
 801916a:	f7f7 fe05 	bl	8010d78 <pbuf_add_header>
 801916e:	4603      	mov	r3, r0
 8019170:	2b00      	cmp	r3, #0
 8019172:	d125      	bne.n	80191c0 <ethernet_output+0x74>
    }
  }

  LWIP_ASSERT_CORE_LOCKED();

  ethhdr = (struct eth_hdr *)p->payload;
 8019174:	68bb      	ldr	r3, [r7, #8]
 8019176:	685b      	ldr	r3, [r3, #4]
 8019178:	613b      	str	r3, [r7, #16]
  ethhdr->type = eth_type_be;
 801917a:	693b      	ldr	r3, [r7, #16]
 801917c:	8afa      	ldrh	r2, [r7, #22]
 801917e:	819a      	strh	r2, [r3, #12]
  SMEMCPY(&ethhdr->dest, dst, ETH_HWADDR_LEN);
 8019180:	693b      	ldr	r3, [r7, #16]
 8019182:	2206      	movs	r2, #6
 8019184:	6839      	ldr	r1, [r7, #0]
 8019186:	4618      	mov	r0, r3
 8019188:	f000 ff31 	bl	8019fee <memcpy>
  SMEMCPY(&ethhdr->src,  src, ETH_HWADDR_LEN);
 801918c:	693b      	ldr	r3, [r7, #16]
 801918e:	3306      	adds	r3, #6
 8019190:	2206      	movs	r2, #6
 8019192:	6879      	ldr	r1, [r7, #4]
 8019194:	4618      	mov	r0, r3
 8019196:	f000 ff2a 	bl	8019fee <memcpy>

  LWIP_ASSERT("netif->hwaddr_len must be 6 for ethernet_output!",
 801919a:	68fb      	ldr	r3, [r7, #12]
 801919c:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 80191a0:	2b06      	cmp	r3, #6
 80191a2:	d006      	beq.n	80191b2 <ethernet_output+0x66>
 80191a4:	4b0a      	ldr	r3, [pc, #40]	; (80191d0 <ethernet_output+0x84>)
 80191a6:	f44f 7299 	mov.w	r2, #306	; 0x132
 80191aa:	490a      	ldr	r1, [pc, #40]	; (80191d4 <ethernet_output+0x88>)
 80191ac:	480a      	ldr	r0, [pc, #40]	; (80191d8 <ethernet_output+0x8c>)
 80191ae:	f000 fd4f 	bl	8019c50 <iprintf>
              (netif->hwaddr_len == ETH_HWADDR_LEN));
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE,
              ("ethernet_output: sending packet %p\n", (void *)p));

  /* send the packet */
  return netif->linkoutput(netif, p);
 80191b2:	68fb      	ldr	r3, [r7, #12]
 80191b4:	699b      	ldr	r3, [r3, #24]
 80191b6:	68b9      	ldr	r1, [r7, #8]
 80191b8:	68f8      	ldr	r0, [r7, #12]
 80191ba:	4798      	blx	r3
 80191bc:	4603      	mov	r3, r0
 80191be:	e002      	b.n	80191c6 <ethernet_output+0x7a>
      goto pbuf_header_failed;
 80191c0:	bf00      	nop

pbuf_header_failed:
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS,
              ("ethernet_output: could not allocate room for header.\n"));
  LINK_STATS_INC(link.lenerr);
  return ERR_BUF;
 80191c2:	f06f 0301 	mvn.w	r3, #1
}
 80191c6:	4618      	mov	r0, r3
 80191c8:	3718      	adds	r7, #24
 80191ca:	46bd      	mov	sp, r7
 80191cc:	bd80      	pop	{r7, pc}
 80191ce:	bf00      	nop
 80191d0:	0801ee94 	.word	0x0801ee94
 80191d4:	0801eecc 	.word	0x0801eecc
 80191d8:	0801ef00 	.word	0x0801ef00

080191dc <rand>:
 80191dc:	4b16      	ldr	r3, [pc, #88]	; (8019238 <rand+0x5c>)
 80191de:	b510      	push	{r4, lr}
 80191e0:	681c      	ldr	r4, [r3, #0]
 80191e2:	6b23      	ldr	r3, [r4, #48]	; 0x30
 80191e4:	b9b3      	cbnz	r3, 8019214 <rand+0x38>
 80191e6:	2018      	movs	r0, #24
 80191e8:	f001 fd6e 	bl	801acc8 <malloc>
 80191ec:	4602      	mov	r2, r0
 80191ee:	6320      	str	r0, [r4, #48]	; 0x30
 80191f0:	b920      	cbnz	r0, 80191fc <rand+0x20>
 80191f2:	4b12      	ldr	r3, [pc, #72]	; (801923c <rand+0x60>)
 80191f4:	4812      	ldr	r0, [pc, #72]	; (8019240 <rand+0x64>)
 80191f6:	2152      	movs	r1, #82	; 0x52
 80191f8:	f000 ff08 	bl	801a00c <__assert_func>
 80191fc:	4911      	ldr	r1, [pc, #68]	; (8019244 <rand+0x68>)
 80191fe:	4b12      	ldr	r3, [pc, #72]	; (8019248 <rand+0x6c>)
 8019200:	e9c0 1300 	strd	r1, r3, [r0]
 8019204:	4b11      	ldr	r3, [pc, #68]	; (801924c <rand+0x70>)
 8019206:	6083      	str	r3, [r0, #8]
 8019208:	230b      	movs	r3, #11
 801920a:	8183      	strh	r3, [r0, #12]
 801920c:	2100      	movs	r1, #0
 801920e:	2001      	movs	r0, #1
 8019210:	e9c2 0104 	strd	r0, r1, [r2, #16]
 8019214:	6b21      	ldr	r1, [r4, #48]	; 0x30
 8019216:	480e      	ldr	r0, [pc, #56]	; (8019250 <rand+0x74>)
 8019218:	690b      	ldr	r3, [r1, #16]
 801921a:	694c      	ldr	r4, [r1, #20]
 801921c:	4a0d      	ldr	r2, [pc, #52]	; (8019254 <rand+0x78>)
 801921e:	4358      	muls	r0, r3
 8019220:	fb02 0004 	mla	r0, r2, r4, r0
 8019224:	fba3 3202 	umull	r3, r2, r3, r2
 8019228:	3301      	adds	r3, #1
 801922a:	eb40 0002 	adc.w	r0, r0, r2
 801922e:	e9c1 3004 	strd	r3, r0, [r1, #16]
 8019232:	f020 4000 	bic.w	r0, r0, #2147483648	; 0x80000000
 8019236:	bd10      	pop	{r4, pc}
 8019238:	200000bc 	.word	0x200000bc
 801923c:	0801f04e 	.word	0x0801f04e
 8019240:	0801f065 	.word	0x0801f065
 8019244:	abcd330e 	.word	0xabcd330e
 8019248:	e66d1234 	.word	0xe66d1234
 801924c:	0005deec 	.word	0x0005deec
 8019250:	5851f42d 	.word	0x5851f42d
 8019254:	4c957f2d 	.word	0x4c957f2d

08019258 <__cvt>:
 8019258:	b5f0      	push	{r4, r5, r6, r7, lr}
 801925a:	ed2d 8b02 	vpush	{d8}
 801925e:	eeb0 8b40 	vmov.f64	d8, d0
 8019262:	b085      	sub	sp, #20
 8019264:	4617      	mov	r7, r2
 8019266:	9d0d      	ldr	r5, [sp, #52]	; 0x34
 8019268:	9e0c      	ldr	r6, [sp, #48]	; 0x30
 801926a:	ee18 2a90 	vmov	r2, s17
 801926e:	f025 0520 	bic.w	r5, r5, #32
 8019272:	2a00      	cmp	r2, #0
 8019274:	bfb6      	itet	lt
 8019276:	222d      	movlt	r2, #45	; 0x2d
 8019278:	2200      	movge	r2, #0
 801927a:	eeb1 8b40 	vneglt.f64	d8, d0
 801927e:	2d46      	cmp	r5, #70	; 0x46
 8019280:	460c      	mov	r4, r1
 8019282:	701a      	strb	r2, [r3, #0]
 8019284:	d004      	beq.n	8019290 <__cvt+0x38>
 8019286:	2d45      	cmp	r5, #69	; 0x45
 8019288:	d100      	bne.n	801928c <__cvt+0x34>
 801928a:	3401      	adds	r4, #1
 801928c:	2102      	movs	r1, #2
 801928e:	e000      	b.n	8019292 <__cvt+0x3a>
 8019290:	2103      	movs	r1, #3
 8019292:	ab03      	add	r3, sp, #12
 8019294:	9301      	str	r3, [sp, #4]
 8019296:	ab02      	add	r3, sp, #8
 8019298:	9300      	str	r3, [sp, #0]
 801929a:	4622      	mov	r2, r4
 801929c:	4633      	mov	r3, r6
 801929e:	eeb0 0b48 	vmov.f64	d0, d8
 80192a2:	f000 ff59 	bl	801a158 <_dtoa_r>
 80192a6:	2d47      	cmp	r5, #71	; 0x47
 80192a8:	d101      	bne.n	80192ae <__cvt+0x56>
 80192aa:	07fb      	lsls	r3, r7, #31
 80192ac:	d51a      	bpl.n	80192e4 <__cvt+0x8c>
 80192ae:	2d46      	cmp	r5, #70	; 0x46
 80192b0:	eb00 0204 	add.w	r2, r0, r4
 80192b4:	d10c      	bne.n	80192d0 <__cvt+0x78>
 80192b6:	7803      	ldrb	r3, [r0, #0]
 80192b8:	2b30      	cmp	r3, #48	; 0x30
 80192ba:	d107      	bne.n	80192cc <__cvt+0x74>
 80192bc:	eeb5 8b40 	vcmp.f64	d8, #0.0
 80192c0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80192c4:	bf1c      	itt	ne
 80192c6:	f1c4 0401 	rsbne	r4, r4, #1
 80192ca:	6034      	strne	r4, [r6, #0]
 80192cc:	6833      	ldr	r3, [r6, #0]
 80192ce:	441a      	add	r2, r3
 80192d0:	eeb5 8b40 	vcmp.f64	d8, #0.0
 80192d4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80192d8:	bf08      	it	eq
 80192da:	9203      	streq	r2, [sp, #12]
 80192dc:	2130      	movs	r1, #48	; 0x30
 80192de:	9b03      	ldr	r3, [sp, #12]
 80192e0:	4293      	cmp	r3, r2
 80192e2:	d307      	bcc.n	80192f4 <__cvt+0x9c>
 80192e4:	9b03      	ldr	r3, [sp, #12]
 80192e6:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 80192e8:	1a1b      	subs	r3, r3, r0
 80192ea:	6013      	str	r3, [r2, #0]
 80192ec:	b005      	add	sp, #20
 80192ee:	ecbd 8b02 	vpop	{d8}
 80192f2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80192f4:	1c5c      	adds	r4, r3, #1
 80192f6:	9403      	str	r4, [sp, #12]
 80192f8:	7019      	strb	r1, [r3, #0]
 80192fa:	e7f0      	b.n	80192de <__cvt+0x86>

080192fc <__exponent>:
 80192fc:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80192fe:	4603      	mov	r3, r0
 8019300:	2900      	cmp	r1, #0
 8019302:	bfb8      	it	lt
 8019304:	4249      	neglt	r1, r1
 8019306:	f803 2b02 	strb.w	r2, [r3], #2
 801930a:	bfb4      	ite	lt
 801930c:	222d      	movlt	r2, #45	; 0x2d
 801930e:	222b      	movge	r2, #43	; 0x2b
 8019310:	2909      	cmp	r1, #9
 8019312:	7042      	strb	r2, [r0, #1]
 8019314:	dd2a      	ble.n	801936c <__exponent+0x70>
 8019316:	f10d 0207 	add.w	r2, sp, #7
 801931a:	4617      	mov	r7, r2
 801931c:	260a      	movs	r6, #10
 801931e:	4694      	mov	ip, r2
 8019320:	fb91 f5f6 	sdiv	r5, r1, r6
 8019324:	fb06 1415 	mls	r4, r6, r5, r1
 8019328:	3430      	adds	r4, #48	; 0x30
 801932a:	f80c 4c01 	strb.w	r4, [ip, #-1]
 801932e:	460c      	mov	r4, r1
 8019330:	2c63      	cmp	r4, #99	; 0x63
 8019332:	f102 32ff 	add.w	r2, r2, #4294967295
 8019336:	4629      	mov	r1, r5
 8019338:	dcf1      	bgt.n	801931e <__exponent+0x22>
 801933a:	3130      	adds	r1, #48	; 0x30
 801933c:	f1ac 0402 	sub.w	r4, ip, #2
 8019340:	f802 1c01 	strb.w	r1, [r2, #-1]
 8019344:	1c41      	adds	r1, r0, #1
 8019346:	4622      	mov	r2, r4
 8019348:	42ba      	cmp	r2, r7
 801934a:	d30a      	bcc.n	8019362 <__exponent+0x66>
 801934c:	f10d 0209 	add.w	r2, sp, #9
 8019350:	eba2 020c 	sub.w	r2, r2, ip
 8019354:	42bc      	cmp	r4, r7
 8019356:	bf88      	it	hi
 8019358:	2200      	movhi	r2, #0
 801935a:	4413      	add	r3, r2
 801935c:	1a18      	subs	r0, r3, r0
 801935e:	b003      	add	sp, #12
 8019360:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8019362:	f812 5b01 	ldrb.w	r5, [r2], #1
 8019366:	f801 5f01 	strb.w	r5, [r1, #1]!
 801936a:	e7ed      	b.n	8019348 <__exponent+0x4c>
 801936c:	2330      	movs	r3, #48	; 0x30
 801936e:	3130      	adds	r1, #48	; 0x30
 8019370:	7083      	strb	r3, [r0, #2]
 8019372:	70c1      	strb	r1, [r0, #3]
 8019374:	1d03      	adds	r3, r0, #4
 8019376:	e7f1      	b.n	801935c <__exponent+0x60>

08019378 <_printf_float>:
 8019378:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801937c:	b08b      	sub	sp, #44	; 0x2c
 801937e:	460c      	mov	r4, r1
 8019380:	f8dd 8050 	ldr.w	r8, [sp, #80]	; 0x50
 8019384:	4616      	mov	r6, r2
 8019386:	461f      	mov	r7, r3
 8019388:	4605      	mov	r5, r0
 801938a:	f000 fdbf 	bl	8019f0c <_localeconv_r>
 801938e:	f8d0 b000 	ldr.w	fp, [r0]
 8019392:	4658      	mov	r0, fp
 8019394:	f7e8 fd74 	bl	8001e80 <strlen>
 8019398:	2300      	movs	r3, #0
 801939a:	9308      	str	r3, [sp, #32]
 801939c:	f8d8 3000 	ldr.w	r3, [r8]
 80193a0:	f894 9018 	ldrb.w	r9, [r4, #24]
 80193a4:	6822      	ldr	r2, [r4, #0]
 80193a6:	3307      	adds	r3, #7
 80193a8:	f023 0307 	bic.w	r3, r3, #7
 80193ac:	f103 0108 	add.w	r1, r3, #8
 80193b0:	f8c8 1000 	str.w	r1, [r8]
 80193b4:	ed93 0b00 	vldr	d0, [r3]
 80193b8:	ed9f 6b97 	vldr	d6, [pc, #604]	; 8019618 <_printf_float+0x2a0>
 80193bc:	eeb0 7bc0 	vabs.f64	d7, d0
 80193c0:	eeb4 7b46 	vcmp.f64	d7, d6
 80193c4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80193c8:	ed84 0b12 	vstr	d0, [r4, #72]	; 0x48
 80193cc:	4682      	mov	sl, r0
 80193ce:	dd24      	ble.n	801941a <_printf_float+0xa2>
 80193d0:	eeb5 0bc0 	vcmpe.f64	d0, #0.0
 80193d4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80193d8:	d502      	bpl.n	80193e0 <_printf_float+0x68>
 80193da:	232d      	movs	r3, #45	; 0x2d
 80193dc:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80193e0:	498f      	ldr	r1, [pc, #572]	; (8019620 <_printf_float+0x2a8>)
 80193e2:	4b90      	ldr	r3, [pc, #576]	; (8019624 <_printf_float+0x2ac>)
 80193e4:	f1b9 0f47 	cmp.w	r9, #71	; 0x47
 80193e8:	bf94      	ite	ls
 80193ea:	4688      	movls	r8, r1
 80193ec:	4698      	movhi	r8, r3
 80193ee:	2303      	movs	r3, #3
 80193f0:	6123      	str	r3, [r4, #16]
 80193f2:	f022 0204 	bic.w	r2, r2, #4
 80193f6:	2300      	movs	r3, #0
 80193f8:	6022      	str	r2, [r4, #0]
 80193fa:	9304      	str	r3, [sp, #16]
 80193fc:	9700      	str	r7, [sp, #0]
 80193fe:	4633      	mov	r3, r6
 8019400:	aa09      	add	r2, sp, #36	; 0x24
 8019402:	4621      	mov	r1, r4
 8019404:	4628      	mov	r0, r5
 8019406:	f000 f9d1 	bl	80197ac <_printf_common>
 801940a:	3001      	adds	r0, #1
 801940c:	f040 808a 	bne.w	8019524 <_printf_float+0x1ac>
 8019410:	f04f 30ff 	mov.w	r0, #4294967295
 8019414:	b00b      	add	sp, #44	; 0x2c
 8019416:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801941a:	eeb4 0b40 	vcmp.f64	d0, d0
 801941e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8019422:	d709      	bvc.n	8019438 <_printf_float+0xc0>
 8019424:	ee10 3a90 	vmov	r3, s1
 8019428:	2b00      	cmp	r3, #0
 801942a:	bfbc      	itt	lt
 801942c:	232d      	movlt	r3, #45	; 0x2d
 801942e:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 8019432:	497d      	ldr	r1, [pc, #500]	; (8019628 <_printf_float+0x2b0>)
 8019434:	4b7d      	ldr	r3, [pc, #500]	; (801962c <_printf_float+0x2b4>)
 8019436:	e7d5      	b.n	80193e4 <_printf_float+0x6c>
 8019438:	6863      	ldr	r3, [r4, #4]
 801943a:	f009 01df 	and.w	r1, r9, #223	; 0xdf
 801943e:	9104      	str	r1, [sp, #16]
 8019440:	1c59      	adds	r1, r3, #1
 8019442:	d13c      	bne.n	80194be <_printf_float+0x146>
 8019444:	2306      	movs	r3, #6
 8019446:	6063      	str	r3, [r4, #4]
 8019448:	2300      	movs	r3, #0
 801944a:	9303      	str	r3, [sp, #12]
 801944c:	ab08      	add	r3, sp, #32
 801944e:	e9cd 9301 	strd	r9, r3, [sp, #4]
 8019452:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8019456:	ab07      	add	r3, sp, #28
 8019458:	6861      	ldr	r1, [r4, #4]
 801945a:	9300      	str	r3, [sp, #0]
 801945c:	6022      	str	r2, [r4, #0]
 801945e:	f10d 031b 	add.w	r3, sp, #27
 8019462:	4628      	mov	r0, r5
 8019464:	f7ff fef8 	bl	8019258 <__cvt>
 8019468:	9b04      	ldr	r3, [sp, #16]
 801946a:	9907      	ldr	r1, [sp, #28]
 801946c:	2b47      	cmp	r3, #71	; 0x47
 801946e:	4680      	mov	r8, r0
 8019470:	d108      	bne.n	8019484 <_printf_float+0x10c>
 8019472:	1cc8      	adds	r0, r1, #3
 8019474:	db02      	blt.n	801947c <_printf_float+0x104>
 8019476:	6863      	ldr	r3, [r4, #4]
 8019478:	4299      	cmp	r1, r3
 801947a:	dd41      	ble.n	8019500 <_printf_float+0x188>
 801947c:	f1a9 0902 	sub.w	r9, r9, #2
 8019480:	fa5f f989 	uxtb.w	r9, r9
 8019484:	f1b9 0f65 	cmp.w	r9, #101	; 0x65
 8019488:	d820      	bhi.n	80194cc <_printf_float+0x154>
 801948a:	3901      	subs	r1, #1
 801948c:	464a      	mov	r2, r9
 801948e:	f104 0050 	add.w	r0, r4, #80	; 0x50
 8019492:	9107      	str	r1, [sp, #28]
 8019494:	f7ff ff32 	bl	80192fc <__exponent>
 8019498:	9a08      	ldr	r2, [sp, #32]
 801949a:	9004      	str	r0, [sp, #16]
 801949c:	1813      	adds	r3, r2, r0
 801949e:	2a01      	cmp	r2, #1
 80194a0:	6123      	str	r3, [r4, #16]
 80194a2:	dc02      	bgt.n	80194aa <_printf_float+0x132>
 80194a4:	6822      	ldr	r2, [r4, #0]
 80194a6:	07d2      	lsls	r2, r2, #31
 80194a8:	d501      	bpl.n	80194ae <_printf_float+0x136>
 80194aa:	3301      	adds	r3, #1
 80194ac:	6123      	str	r3, [r4, #16]
 80194ae:	f89d 301b 	ldrb.w	r3, [sp, #27]
 80194b2:	2b00      	cmp	r3, #0
 80194b4:	d0a2      	beq.n	80193fc <_printf_float+0x84>
 80194b6:	232d      	movs	r3, #45	; 0x2d
 80194b8:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80194bc:	e79e      	b.n	80193fc <_printf_float+0x84>
 80194be:	9904      	ldr	r1, [sp, #16]
 80194c0:	2947      	cmp	r1, #71	; 0x47
 80194c2:	d1c1      	bne.n	8019448 <_printf_float+0xd0>
 80194c4:	2b00      	cmp	r3, #0
 80194c6:	d1bf      	bne.n	8019448 <_printf_float+0xd0>
 80194c8:	2301      	movs	r3, #1
 80194ca:	e7bc      	b.n	8019446 <_printf_float+0xce>
 80194cc:	f1b9 0f66 	cmp.w	r9, #102	; 0x66
 80194d0:	d118      	bne.n	8019504 <_printf_float+0x18c>
 80194d2:	2900      	cmp	r1, #0
 80194d4:	6863      	ldr	r3, [r4, #4]
 80194d6:	dd0b      	ble.n	80194f0 <_printf_float+0x178>
 80194d8:	6121      	str	r1, [r4, #16]
 80194da:	b913      	cbnz	r3, 80194e2 <_printf_float+0x16a>
 80194dc:	6822      	ldr	r2, [r4, #0]
 80194de:	07d0      	lsls	r0, r2, #31
 80194e0:	d502      	bpl.n	80194e8 <_printf_float+0x170>
 80194e2:	3301      	adds	r3, #1
 80194e4:	440b      	add	r3, r1
 80194e6:	6123      	str	r3, [r4, #16]
 80194e8:	2300      	movs	r3, #0
 80194ea:	65a1      	str	r1, [r4, #88]	; 0x58
 80194ec:	9304      	str	r3, [sp, #16]
 80194ee:	e7de      	b.n	80194ae <_printf_float+0x136>
 80194f0:	b913      	cbnz	r3, 80194f8 <_printf_float+0x180>
 80194f2:	6822      	ldr	r2, [r4, #0]
 80194f4:	07d2      	lsls	r2, r2, #31
 80194f6:	d501      	bpl.n	80194fc <_printf_float+0x184>
 80194f8:	3302      	adds	r3, #2
 80194fa:	e7f4      	b.n	80194e6 <_printf_float+0x16e>
 80194fc:	2301      	movs	r3, #1
 80194fe:	e7f2      	b.n	80194e6 <_printf_float+0x16e>
 8019500:	f04f 0967 	mov.w	r9, #103	; 0x67
 8019504:	9b08      	ldr	r3, [sp, #32]
 8019506:	4299      	cmp	r1, r3
 8019508:	db05      	blt.n	8019516 <_printf_float+0x19e>
 801950a:	6823      	ldr	r3, [r4, #0]
 801950c:	6121      	str	r1, [r4, #16]
 801950e:	07d8      	lsls	r0, r3, #31
 8019510:	d5ea      	bpl.n	80194e8 <_printf_float+0x170>
 8019512:	1c4b      	adds	r3, r1, #1
 8019514:	e7e7      	b.n	80194e6 <_printf_float+0x16e>
 8019516:	2900      	cmp	r1, #0
 8019518:	bfd4      	ite	le
 801951a:	f1c1 0202 	rsble	r2, r1, #2
 801951e:	2201      	movgt	r2, #1
 8019520:	4413      	add	r3, r2
 8019522:	e7e0      	b.n	80194e6 <_printf_float+0x16e>
 8019524:	6823      	ldr	r3, [r4, #0]
 8019526:	055a      	lsls	r2, r3, #21
 8019528:	d407      	bmi.n	801953a <_printf_float+0x1c2>
 801952a:	6923      	ldr	r3, [r4, #16]
 801952c:	4642      	mov	r2, r8
 801952e:	4631      	mov	r1, r6
 8019530:	4628      	mov	r0, r5
 8019532:	47b8      	blx	r7
 8019534:	3001      	adds	r0, #1
 8019536:	d12a      	bne.n	801958e <_printf_float+0x216>
 8019538:	e76a      	b.n	8019410 <_printf_float+0x98>
 801953a:	f1b9 0f65 	cmp.w	r9, #101	; 0x65
 801953e:	f240 80e0 	bls.w	8019702 <_printf_float+0x38a>
 8019542:	ed94 7b12 	vldr	d7, [r4, #72]	; 0x48
 8019546:	eeb5 7b40 	vcmp.f64	d7, #0.0
 801954a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801954e:	d133      	bne.n	80195b8 <_printf_float+0x240>
 8019550:	4a37      	ldr	r2, [pc, #220]	; (8019630 <_printf_float+0x2b8>)
 8019552:	2301      	movs	r3, #1
 8019554:	4631      	mov	r1, r6
 8019556:	4628      	mov	r0, r5
 8019558:	47b8      	blx	r7
 801955a:	3001      	adds	r0, #1
 801955c:	f43f af58 	beq.w	8019410 <_printf_float+0x98>
 8019560:	e9dd 2307 	ldrd	r2, r3, [sp, #28]
 8019564:	429a      	cmp	r2, r3
 8019566:	db02      	blt.n	801956e <_printf_float+0x1f6>
 8019568:	6823      	ldr	r3, [r4, #0]
 801956a:	07d8      	lsls	r0, r3, #31
 801956c:	d50f      	bpl.n	801958e <_printf_float+0x216>
 801956e:	4653      	mov	r3, sl
 8019570:	465a      	mov	r2, fp
 8019572:	4631      	mov	r1, r6
 8019574:	4628      	mov	r0, r5
 8019576:	47b8      	blx	r7
 8019578:	3001      	adds	r0, #1
 801957a:	f43f af49 	beq.w	8019410 <_printf_float+0x98>
 801957e:	f04f 0800 	mov.w	r8, #0
 8019582:	f104 091a 	add.w	r9, r4, #26
 8019586:	9b08      	ldr	r3, [sp, #32]
 8019588:	3b01      	subs	r3, #1
 801958a:	4543      	cmp	r3, r8
 801958c:	dc09      	bgt.n	80195a2 <_printf_float+0x22a>
 801958e:	6823      	ldr	r3, [r4, #0]
 8019590:	079b      	lsls	r3, r3, #30
 8019592:	f100 8106 	bmi.w	80197a2 <_printf_float+0x42a>
 8019596:	68e0      	ldr	r0, [r4, #12]
 8019598:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801959a:	4298      	cmp	r0, r3
 801959c:	bfb8      	it	lt
 801959e:	4618      	movlt	r0, r3
 80195a0:	e738      	b.n	8019414 <_printf_float+0x9c>
 80195a2:	2301      	movs	r3, #1
 80195a4:	464a      	mov	r2, r9
 80195a6:	4631      	mov	r1, r6
 80195a8:	4628      	mov	r0, r5
 80195aa:	47b8      	blx	r7
 80195ac:	3001      	adds	r0, #1
 80195ae:	f43f af2f 	beq.w	8019410 <_printf_float+0x98>
 80195b2:	f108 0801 	add.w	r8, r8, #1
 80195b6:	e7e6      	b.n	8019586 <_printf_float+0x20e>
 80195b8:	9b07      	ldr	r3, [sp, #28]
 80195ba:	2b00      	cmp	r3, #0
 80195bc:	dc3a      	bgt.n	8019634 <_printf_float+0x2bc>
 80195be:	4a1c      	ldr	r2, [pc, #112]	; (8019630 <_printf_float+0x2b8>)
 80195c0:	2301      	movs	r3, #1
 80195c2:	4631      	mov	r1, r6
 80195c4:	4628      	mov	r0, r5
 80195c6:	47b8      	blx	r7
 80195c8:	3001      	adds	r0, #1
 80195ca:	f43f af21 	beq.w	8019410 <_printf_float+0x98>
 80195ce:	e9dd 3207 	ldrd	r3, r2, [sp, #28]
 80195d2:	4313      	orrs	r3, r2
 80195d4:	d102      	bne.n	80195dc <_printf_float+0x264>
 80195d6:	6823      	ldr	r3, [r4, #0]
 80195d8:	07d9      	lsls	r1, r3, #31
 80195da:	d5d8      	bpl.n	801958e <_printf_float+0x216>
 80195dc:	4653      	mov	r3, sl
 80195de:	465a      	mov	r2, fp
 80195e0:	4631      	mov	r1, r6
 80195e2:	4628      	mov	r0, r5
 80195e4:	47b8      	blx	r7
 80195e6:	3001      	adds	r0, #1
 80195e8:	f43f af12 	beq.w	8019410 <_printf_float+0x98>
 80195ec:	f04f 0900 	mov.w	r9, #0
 80195f0:	f104 0a1a 	add.w	sl, r4, #26
 80195f4:	9b07      	ldr	r3, [sp, #28]
 80195f6:	425b      	negs	r3, r3
 80195f8:	454b      	cmp	r3, r9
 80195fa:	dc01      	bgt.n	8019600 <_printf_float+0x288>
 80195fc:	9b08      	ldr	r3, [sp, #32]
 80195fe:	e795      	b.n	801952c <_printf_float+0x1b4>
 8019600:	2301      	movs	r3, #1
 8019602:	4652      	mov	r2, sl
 8019604:	4631      	mov	r1, r6
 8019606:	4628      	mov	r0, r5
 8019608:	47b8      	blx	r7
 801960a:	3001      	adds	r0, #1
 801960c:	f43f af00 	beq.w	8019410 <_printf_float+0x98>
 8019610:	f109 0901 	add.w	r9, r9, #1
 8019614:	e7ee      	b.n	80195f4 <_printf_float+0x27c>
 8019616:	bf00      	nop
 8019618:	ffffffff 	.word	0xffffffff
 801961c:	7fefffff 	.word	0x7fefffff
 8019620:	0801f1be 	.word	0x0801f1be
 8019624:	0801f1c2 	.word	0x0801f1c2
 8019628:	0801f1c6 	.word	0x0801f1c6
 801962c:	0801f1ca 	.word	0x0801f1ca
 8019630:	0801f1ce 	.word	0x0801f1ce
 8019634:	9a08      	ldr	r2, [sp, #32]
 8019636:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8019638:	429a      	cmp	r2, r3
 801963a:	bfa8      	it	ge
 801963c:	461a      	movge	r2, r3
 801963e:	2a00      	cmp	r2, #0
 8019640:	4691      	mov	r9, r2
 8019642:	dc38      	bgt.n	80196b6 <_printf_float+0x33e>
 8019644:	2300      	movs	r3, #0
 8019646:	9305      	str	r3, [sp, #20]
 8019648:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 801964c:	f104 021a 	add.w	r2, r4, #26
 8019650:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8019652:	9905      	ldr	r1, [sp, #20]
 8019654:	9304      	str	r3, [sp, #16]
 8019656:	eba3 0309 	sub.w	r3, r3, r9
 801965a:	428b      	cmp	r3, r1
 801965c:	dc33      	bgt.n	80196c6 <_printf_float+0x34e>
 801965e:	e9dd 2307 	ldrd	r2, r3, [sp, #28]
 8019662:	429a      	cmp	r2, r3
 8019664:	db3c      	blt.n	80196e0 <_printf_float+0x368>
 8019666:	6823      	ldr	r3, [r4, #0]
 8019668:	07da      	lsls	r2, r3, #31
 801966a:	d439      	bmi.n	80196e0 <_printf_float+0x368>
 801966c:	e9dd 3207 	ldrd	r3, r2, [sp, #28]
 8019670:	eba2 0903 	sub.w	r9, r2, r3
 8019674:	9b04      	ldr	r3, [sp, #16]
 8019676:	1ad2      	subs	r2, r2, r3
 8019678:	4591      	cmp	r9, r2
 801967a:	bfa8      	it	ge
 801967c:	4691      	movge	r9, r2
 801967e:	f1b9 0f00 	cmp.w	r9, #0
 8019682:	dc35      	bgt.n	80196f0 <_printf_float+0x378>
 8019684:	f04f 0800 	mov.w	r8, #0
 8019688:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 801968c:	f104 0a1a 	add.w	sl, r4, #26
 8019690:	e9dd 2307 	ldrd	r2, r3, [sp, #28]
 8019694:	1a9b      	subs	r3, r3, r2
 8019696:	eba3 0309 	sub.w	r3, r3, r9
 801969a:	4543      	cmp	r3, r8
 801969c:	f77f af77 	ble.w	801958e <_printf_float+0x216>
 80196a0:	2301      	movs	r3, #1
 80196a2:	4652      	mov	r2, sl
 80196a4:	4631      	mov	r1, r6
 80196a6:	4628      	mov	r0, r5
 80196a8:	47b8      	blx	r7
 80196aa:	3001      	adds	r0, #1
 80196ac:	f43f aeb0 	beq.w	8019410 <_printf_float+0x98>
 80196b0:	f108 0801 	add.w	r8, r8, #1
 80196b4:	e7ec      	b.n	8019690 <_printf_float+0x318>
 80196b6:	4613      	mov	r3, r2
 80196b8:	4631      	mov	r1, r6
 80196ba:	4642      	mov	r2, r8
 80196bc:	4628      	mov	r0, r5
 80196be:	47b8      	blx	r7
 80196c0:	3001      	adds	r0, #1
 80196c2:	d1bf      	bne.n	8019644 <_printf_float+0x2cc>
 80196c4:	e6a4      	b.n	8019410 <_printf_float+0x98>
 80196c6:	2301      	movs	r3, #1
 80196c8:	4631      	mov	r1, r6
 80196ca:	4628      	mov	r0, r5
 80196cc:	9204      	str	r2, [sp, #16]
 80196ce:	47b8      	blx	r7
 80196d0:	3001      	adds	r0, #1
 80196d2:	f43f ae9d 	beq.w	8019410 <_printf_float+0x98>
 80196d6:	9b05      	ldr	r3, [sp, #20]
 80196d8:	9a04      	ldr	r2, [sp, #16]
 80196da:	3301      	adds	r3, #1
 80196dc:	9305      	str	r3, [sp, #20]
 80196de:	e7b7      	b.n	8019650 <_printf_float+0x2d8>
 80196e0:	4653      	mov	r3, sl
 80196e2:	465a      	mov	r2, fp
 80196e4:	4631      	mov	r1, r6
 80196e6:	4628      	mov	r0, r5
 80196e8:	47b8      	blx	r7
 80196ea:	3001      	adds	r0, #1
 80196ec:	d1be      	bne.n	801966c <_printf_float+0x2f4>
 80196ee:	e68f      	b.n	8019410 <_printf_float+0x98>
 80196f0:	9a04      	ldr	r2, [sp, #16]
 80196f2:	464b      	mov	r3, r9
 80196f4:	4442      	add	r2, r8
 80196f6:	4631      	mov	r1, r6
 80196f8:	4628      	mov	r0, r5
 80196fa:	47b8      	blx	r7
 80196fc:	3001      	adds	r0, #1
 80196fe:	d1c1      	bne.n	8019684 <_printf_float+0x30c>
 8019700:	e686      	b.n	8019410 <_printf_float+0x98>
 8019702:	9a08      	ldr	r2, [sp, #32]
 8019704:	2a01      	cmp	r2, #1
 8019706:	dc01      	bgt.n	801970c <_printf_float+0x394>
 8019708:	07db      	lsls	r3, r3, #31
 801970a:	d537      	bpl.n	801977c <_printf_float+0x404>
 801970c:	2301      	movs	r3, #1
 801970e:	4642      	mov	r2, r8
 8019710:	4631      	mov	r1, r6
 8019712:	4628      	mov	r0, r5
 8019714:	47b8      	blx	r7
 8019716:	3001      	adds	r0, #1
 8019718:	f43f ae7a 	beq.w	8019410 <_printf_float+0x98>
 801971c:	4653      	mov	r3, sl
 801971e:	465a      	mov	r2, fp
 8019720:	4631      	mov	r1, r6
 8019722:	4628      	mov	r0, r5
 8019724:	47b8      	blx	r7
 8019726:	3001      	adds	r0, #1
 8019728:	f43f ae72 	beq.w	8019410 <_printf_float+0x98>
 801972c:	ed94 7b12 	vldr	d7, [r4, #72]	; 0x48
 8019730:	eeb5 7b40 	vcmp.f64	d7, #0.0
 8019734:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8019738:	9b08      	ldr	r3, [sp, #32]
 801973a:	d01a      	beq.n	8019772 <_printf_float+0x3fa>
 801973c:	3b01      	subs	r3, #1
 801973e:	f108 0201 	add.w	r2, r8, #1
 8019742:	4631      	mov	r1, r6
 8019744:	4628      	mov	r0, r5
 8019746:	47b8      	blx	r7
 8019748:	3001      	adds	r0, #1
 801974a:	d10e      	bne.n	801976a <_printf_float+0x3f2>
 801974c:	e660      	b.n	8019410 <_printf_float+0x98>
 801974e:	2301      	movs	r3, #1
 8019750:	464a      	mov	r2, r9
 8019752:	4631      	mov	r1, r6
 8019754:	4628      	mov	r0, r5
 8019756:	47b8      	blx	r7
 8019758:	3001      	adds	r0, #1
 801975a:	f43f ae59 	beq.w	8019410 <_printf_float+0x98>
 801975e:	f108 0801 	add.w	r8, r8, #1
 8019762:	9b08      	ldr	r3, [sp, #32]
 8019764:	3b01      	subs	r3, #1
 8019766:	4543      	cmp	r3, r8
 8019768:	dcf1      	bgt.n	801974e <_printf_float+0x3d6>
 801976a:	9b04      	ldr	r3, [sp, #16]
 801976c:	f104 0250 	add.w	r2, r4, #80	; 0x50
 8019770:	e6dd      	b.n	801952e <_printf_float+0x1b6>
 8019772:	f04f 0800 	mov.w	r8, #0
 8019776:	f104 091a 	add.w	r9, r4, #26
 801977a:	e7f2      	b.n	8019762 <_printf_float+0x3ea>
 801977c:	2301      	movs	r3, #1
 801977e:	4642      	mov	r2, r8
 8019780:	e7df      	b.n	8019742 <_printf_float+0x3ca>
 8019782:	2301      	movs	r3, #1
 8019784:	464a      	mov	r2, r9
 8019786:	4631      	mov	r1, r6
 8019788:	4628      	mov	r0, r5
 801978a:	47b8      	blx	r7
 801978c:	3001      	adds	r0, #1
 801978e:	f43f ae3f 	beq.w	8019410 <_printf_float+0x98>
 8019792:	f108 0801 	add.w	r8, r8, #1
 8019796:	68e3      	ldr	r3, [r4, #12]
 8019798:	9909      	ldr	r1, [sp, #36]	; 0x24
 801979a:	1a5b      	subs	r3, r3, r1
 801979c:	4543      	cmp	r3, r8
 801979e:	dcf0      	bgt.n	8019782 <_printf_float+0x40a>
 80197a0:	e6f9      	b.n	8019596 <_printf_float+0x21e>
 80197a2:	f04f 0800 	mov.w	r8, #0
 80197a6:	f104 0919 	add.w	r9, r4, #25
 80197aa:	e7f4      	b.n	8019796 <_printf_float+0x41e>

080197ac <_printf_common>:
 80197ac:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80197b0:	4616      	mov	r6, r2
 80197b2:	4699      	mov	r9, r3
 80197b4:	688a      	ldr	r2, [r1, #8]
 80197b6:	690b      	ldr	r3, [r1, #16]
 80197b8:	f8dd 8020 	ldr.w	r8, [sp, #32]
 80197bc:	4293      	cmp	r3, r2
 80197be:	bfb8      	it	lt
 80197c0:	4613      	movlt	r3, r2
 80197c2:	6033      	str	r3, [r6, #0]
 80197c4:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 80197c8:	4607      	mov	r7, r0
 80197ca:	460c      	mov	r4, r1
 80197cc:	b10a      	cbz	r2, 80197d2 <_printf_common+0x26>
 80197ce:	3301      	adds	r3, #1
 80197d0:	6033      	str	r3, [r6, #0]
 80197d2:	6823      	ldr	r3, [r4, #0]
 80197d4:	0699      	lsls	r1, r3, #26
 80197d6:	bf42      	ittt	mi
 80197d8:	6833      	ldrmi	r3, [r6, #0]
 80197da:	3302      	addmi	r3, #2
 80197dc:	6033      	strmi	r3, [r6, #0]
 80197de:	6825      	ldr	r5, [r4, #0]
 80197e0:	f015 0506 	ands.w	r5, r5, #6
 80197e4:	d106      	bne.n	80197f4 <_printf_common+0x48>
 80197e6:	f104 0a19 	add.w	sl, r4, #25
 80197ea:	68e3      	ldr	r3, [r4, #12]
 80197ec:	6832      	ldr	r2, [r6, #0]
 80197ee:	1a9b      	subs	r3, r3, r2
 80197f0:	42ab      	cmp	r3, r5
 80197f2:	dc26      	bgt.n	8019842 <_printf_common+0x96>
 80197f4:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 80197f8:	1e13      	subs	r3, r2, #0
 80197fa:	6822      	ldr	r2, [r4, #0]
 80197fc:	bf18      	it	ne
 80197fe:	2301      	movne	r3, #1
 8019800:	0692      	lsls	r2, r2, #26
 8019802:	d42b      	bmi.n	801985c <_printf_common+0xb0>
 8019804:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8019808:	4649      	mov	r1, r9
 801980a:	4638      	mov	r0, r7
 801980c:	47c0      	blx	r8
 801980e:	3001      	adds	r0, #1
 8019810:	d01e      	beq.n	8019850 <_printf_common+0xa4>
 8019812:	6823      	ldr	r3, [r4, #0]
 8019814:	6922      	ldr	r2, [r4, #16]
 8019816:	f003 0306 	and.w	r3, r3, #6
 801981a:	2b04      	cmp	r3, #4
 801981c:	bf02      	ittt	eq
 801981e:	68e5      	ldreq	r5, [r4, #12]
 8019820:	6833      	ldreq	r3, [r6, #0]
 8019822:	1aed      	subeq	r5, r5, r3
 8019824:	68a3      	ldr	r3, [r4, #8]
 8019826:	bf0c      	ite	eq
 8019828:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 801982c:	2500      	movne	r5, #0
 801982e:	4293      	cmp	r3, r2
 8019830:	bfc4      	itt	gt
 8019832:	1a9b      	subgt	r3, r3, r2
 8019834:	18ed      	addgt	r5, r5, r3
 8019836:	2600      	movs	r6, #0
 8019838:	341a      	adds	r4, #26
 801983a:	42b5      	cmp	r5, r6
 801983c:	d11a      	bne.n	8019874 <_printf_common+0xc8>
 801983e:	2000      	movs	r0, #0
 8019840:	e008      	b.n	8019854 <_printf_common+0xa8>
 8019842:	2301      	movs	r3, #1
 8019844:	4652      	mov	r2, sl
 8019846:	4649      	mov	r1, r9
 8019848:	4638      	mov	r0, r7
 801984a:	47c0      	blx	r8
 801984c:	3001      	adds	r0, #1
 801984e:	d103      	bne.n	8019858 <_printf_common+0xac>
 8019850:	f04f 30ff 	mov.w	r0, #4294967295
 8019854:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8019858:	3501      	adds	r5, #1
 801985a:	e7c6      	b.n	80197ea <_printf_common+0x3e>
 801985c:	18e1      	adds	r1, r4, r3
 801985e:	1c5a      	adds	r2, r3, #1
 8019860:	2030      	movs	r0, #48	; 0x30
 8019862:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8019866:	4422      	add	r2, r4
 8019868:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 801986c:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8019870:	3302      	adds	r3, #2
 8019872:	e7c7      	b.n	8019804 <_printf_common+0x58>
 8019874:	2301      	movs	r3, #1
 8019876:	4622      	mov	r2, r4
 8019878:	4649      	mov	r1, r9
 801987a:	4638      	mov	r0, r7
 801987c:	47c0      	blx	r8
 801987e:	3001      	adds	r0, #1
 8019880:	d0e6      	beq.n	8019850 <_printf_common+0xa4>
 8019882:	3601      	adds	r6, #1
 8019884:	e7d9      	b.n	801983a <_printf_common+0x8e>
	...

08019888 <_printf_i>:
 8019888:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 801988c:	7e0f      	ldrb	r7, [r1, #24]
 801988e:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8019890:	2f78      	cmp	r7, #120	; 0x78
 8019892:	4691      	mov	r9, r2
 8019894:	4680      	mov	r8, r0
 8019896:	460c      	mov	r4, r1
 8019898:	469a      	mov	sl, r3
 801989a:	f101 0243 	add.w	r2, r1, #67	; 0x43
 801989e:	d807      	bhi.n	80198b0 <_printf_i+0x28>
 80198a0:	2f62      	cmp	r7, #98	; 0x62
 80198a2:	d80a      	bhi.n	80198ba <_printf_i+0x32>
 80198a4:	2f00      	cmp	r7, #0
 80198a6:	f000 80d4 	beq.w	8019a52 <_printf_i+0x1ca>
 80198aa:	2f58      	cmp	r7, #88	; 0x58
 80198ac:	f000 80c0 	beq.w	8019a30 <_printf_i+0x1a8>
 80198b0:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80198b4:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 80198b8:	e03a      	b.n	8019930 <_printf_i+0xa8>
 80198ba:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 80198be:	2b15      	cmp	r3, #21
 80198c0:	d8f6      	bhi.n	80198b0 <_printf_i+0x28>
 80198c2:	a101      	add	r1, pc, #4	; (adr r1, 80198c8 <_printf_i+0x40>)
 80198c4:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 80198c8:	08019921 	.word	0x08019921
 80198cc:	08019935 	.word	0x08019935
 80198d0:	080198b1 	.word	0x080198b1
 80198d4:	080198b1 	.word	0x080198b1
 80198d8:	080198b1 	.word	0x080198b1
 80198dc:	080198b1 	.word	0x080198b1
 80198e0:	08019935 	.word	0x08019935
 80198e4:	080198b1 	.word	0x080198b1
 80198e8:	080198b1 	.word	0x080198b1
 80198ec:	080198b1 	.word	0x080198b1
 80198f0:	080198b1 	.word	0x080198b1
 80198f4:	08019a39 	.word	0x08019a39
 80198f8:	08019961 	.word	0x08019961
 80198fc:	080199f3 	.word	0x080199f3
 8019900:	080198b1 	.word	0x080198b1
 8019904:	080198b1 	.word	0x080198b1
 8019908:	08019a5b 	.word	0x08019a5b
 801990c:	080198b1 	.word	0x080198b1
 8019910:	08019961 	.word	0x08019961
 8019914:	080198b1 	.word	0x080198b1
 8019918:	080198b1 	.word	0x080198b1
 801991c:	080199fb 	.word	0x080199fb
 8019920:	682b      	ldr	r3, [r5, #0]
 8019922:	1d1a      	adds	r2, r3, #4
 8019924:	681b      	ldr	r3, [r3, #0]
 8019926:	602a      	str	r2, [r5, #0]
 8019928:	f104 0542 	add.w	r5, r4, #66	; 0x42
 801992c:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8019930:	2301      	movs	r3, #1
 8019932:	e09f      	b.n	8019a74 <_printf_i+0x1ec>
 8019934:	6820      	ldr	r0, [r4, #0]
 8019936:	682b      	ldr	r3, [r5, #0]
 8019938:	0607      	lsls	r7, r0, #24
 801993a:	f103 0104 	add.w	r1, r3, #4
 801993e:	6029      	str	r1, [r5, #0]
 8019940:	d501      	bpl.n	8019946 <_printf_i+0xbe>
 8019942:	681e      	ldr	r6, [r3, #0]
 8019944:	e003      	b.n	801994e <_printf_i+0xc6>
 8019946:	0646      	lsls	r6, r0, #25
 8019948:	d5fb      	bpl.n	8019942 <_printf_i+0xba>
 801994a:	f9b3 6000 	ldrsh.w	r6, [r3]
 801994e:	2e00      	cmp	r6, #0
 8019950:	da03      	bge.n	801995a <_printf_i+0xd2>
 8019952:	232d      	movs	r3, #45	; 0x2d
 8019954:	4276      	negs	r6, r6
 8019956:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 801995a:	485a      	ldr	r0, [pc, #360]	; (8019ac4 <_printf_i+0x23c>)
 801995c:	230a      	movs	r3, #10
 801995e:	e012      	b.n	8019986 <_printf_i+0xfe>
 8019960:	682b      	ldr	r3, [r5, #0]
 8019962:	6820      	ldr	r0, [r4, #0]
 8019964:	1d19      	adds	r1, r3, #4
 8019966:	6029      	str	r1, [r5, #0]
 8019968:	0605      	lsls	r5, r0, #24
 801996a:	d501      	bpl.n	8019970 <_printf_i+0xe8>
 801996c:	681e      	ldr	r6, [r3, #0]
 801996e:	e002      	b.n	8019976 <_printf_i+0xee>
 8019970:	0641      	lsls	r1, r0, #25
 8019972:	d5fb      	bpl.n	801996c <_printf_i+0xe4>
 8019974:	881e      	ldrh	r6, [r3, #0]
 8019976:	4853      	ldr	r0, [pc, #332]	; (8019ac4 <_printf_i+0x23c>)
 8019978:	2f6f      	cmp	r7, #111	; 0x6f
 801997a:	bf0c      	ite	eq
 801997c:	2308      	moveq	r3, #8
 801997e:	230a      	movne	r3, #10
 8019980:	2100      	movs	r1, #0
 8019982:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8019986:	6865      	ldr	r5, [r4, #4]
 8019988:	60a5      	str	r5, [r4, #8]
 801998a:	2d00      	cmp	r5, #0
 801998c:	bfa2      	ittt	ge
 801998e:	6821      	ldrge	r1, [r4, #0]
 8019990:	f021 0104 	bicge.w	r1, r1, #4
 8019994:	6021      	strge	r1, [r4, #0]
 8019996:	b90e      	cbnz	r6, 801999c <_printf_i+0x114>
 8019998:	2d00      	cmp	r5, #0
 801999a:	d04b      	beq.n	8019a34 <_printf_i+0x1ac>
 801999c:	4615      	mov	r5, r2
 801999e:	fbb6 f1f3 	udiv	r1, r6, r3
 80199a2:	fb03 6711 	mls	r7, r3, r1, r6
 80199a6:	5dc7      	ldrb	r7, [r0, r7]
 80199a8:	f805 7d01 	strb.w	r7, [r5, #-1]!
 80199ac:	4637      	mov	r7, r6
 80199ae:	42bb      	cmp	r3, r7
 80199b0:	460e      	mov	r6, r1
 80199b2:	d9f4      	bls.n	801999e <_printf_i+0x116>
 80199b4:	2b08      	cmp	r3, #8
 80199b6:	d10b      	bne.n	80199d0 <_printf_i+0x148>
 80199b8:	6823      	ldr	r3, [r4, #0]
 80199ba:	07de      	lsls	r6, r3, #31
 80199bc:	d508      	bpl.n	80199d0 <_printf_i+0x148>
 80199be:	6923      	ldr	r3, [r4, #16]
 80199c0:	6861      	ldr	r1, [r4, #4]
 80199c2:	4299      	cmp	r1, r3
 80199c4:	bfde      	ittt	le
 80199c6:	2330      	movle	r3, #48	; 0x30
 80199c8:	f805 3c01 	strble.w	r3, [r5, #-1]
 80199cc:	f105 35ff 	addle.w	r5, r5, #4294967295
 80199d0:	1b52      	subs	r2, r2, r5
 80199d2:	6122      	str	r2, [r4, #16]
 80199d4:	f8cd a000 	str.w	sl, [sp]
 80199d8:	464b      	mov	r3, r9
 80199da:	aa03      	add	r2, sp, #12
 80199dc:	4621      	mov	r1, r4
 80199de:	4640      	mov	r0, r8
 80199e0:	f7ff fee4 	bl	80197ac <_printf_common>
 80199e4:	3001      	adds	r0, #1
 80199e6:	d14a      	bne.n	8019a7e <_printf_i+0x1f6>
 80199e8:	f04f 30ff 	mov.w	r0, #4294967295
 80199ec:	b004      	add	sp, #16
 80199ee:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80199f2:	6823      	ldr	r3, [r4, #0]
 80199f4:	f043 0320 	orr.w	r3, r3, #32
 80199f8:	6023      	str	r3, [r4, #0]
 80199fa:	4833      	ldr	r0, [pc, #204]	; (8019ac8 <_printf_i+0x240>)
 80199fc:	2778      	movs	r7, #120	; 0x78
 80199fe:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8019a02:	6823      	ldr	r3, [r4, #0]
 8019a04:	6829      	ldr	r1, [r5, #0]
 8019a06:	061f      	lsls	r7, r3, #24
 8019a08:	f851 6b04 	ldr.w	r6, [r1], #4
 8019a0c:	d402      	bmi.n	8019a14 <_printf_i+0x18c>
 8019a0e:	065f      	lsls	r7, r3, #25
 8019a10:	bf48      	it	mi
 8019a12:	b2b6      	uxthmi	r6, r6
 8019a14:	07df      	lsls	r7, r3, #31
 8019a16:	bf48      	it	mi
 8019a18:	f043 0320 	orrmi.w	r3, r3, #32
 8019a1c:	6029      	str	r1, [r5, #0]
 8019a1e:	bf48      	it	mi
 8019a20:	6023      	strmi	r3, [r4, #0]
 8019a22:	b91e      	cbnz	r6, 8019a2c <_printf_i+0x1a4>
 8019a24:	6823      	ldr	r3, [r4, #0]
 8019a26:	f023 0320 	bic.w	r3, r3, #32
 8019a2a:	6023      	str	r3, [r4, #0]
 8019a2c:	2310      	movs	r3, #16
 8019a2e:	e7a7      	b.n	8019980 <_printf_i+0xf8>
 8019a30:	4824      	ldr	r0, [pc, #144]	; (8019ac4 <_printf_i+0x23c>)
 8019a32:	e7e4      	b.n	80199fe <_printf_i+0x176>
 8019a34:	4615      	mov	r5, r2
 8019a36:	e7bd      	b.n	80199b4 <_printf_i+0x12c>
 8019a38:	682b      	ldr	r3, [r5, #0]
 8019a3a:	6826      	ldr	r6, [r4, #0]
 8019a3c:	6961      	ldr	r1, [r4, #20]
 8019a3e:	1d18      	adds	r0, r3, #4
 8019a40:	6028      	str	r0, [r5, #0]
 8019a42:	0635      	lsls	r5, r6, #24
 8019a44:	681b      	ldr	r3, [r3, #0]
 8019a46:	d501      	bpl.n	8019a4c <_printf_i+0x1c4>
 8019a48:	6019      	str	r1, [r3, #0]
 8019a4a:	e002      	b.n	8019a52 <_printf_i+0x1ca>
 8019a4c:	0670      	lsls	r0, r6, #25
 8019a4e:	d5fb      	bpl.n	8019a48 <_printf_i+0x1c0>
 8019a50:	8019      	strh	r1, [r3, #0]
 8019a52:	2300      	movs	r3, #0
 8019a54:	6123      	str	r3, [r4, #16]
 8019a56:	4615      	mov	r5, r2
 8019a58:	e7bc      	b.n	80199d4 <_printf_i+0x14c>
 8019a5a:	682b      	ldr	r3, [r5, #0]
 8019a5c:	1d1a      	adds	r2, r3, #4
 8019a5e:	602a      	str	r2, [r5, #0]
 8019a60:	681d      	ldr	r5, [r3, #0]
 8019a62:	6862      	ldr	r2, [r4, #4]
 8019a64:	2100      	movs	r1, #0
 8019a66:	4628      	mov	r0, r5
 8019a68:	f7e8 f9ba 	bl	8001de0 <memchr>
 8019a6c:	b108      	cbz	r0, 8019a72 <_printf_i+0x1ea>
 8019a6e:	1b40      	subs	r0, r0, r5
 8019a70:	6060      	str	r0, [r4, #4]
 8019a72:	6863      	ldr	r3, [r4, #4]
 8019a74:	6123      	str	r3, [r4, #16]
 8019a76:	2300      	movs	r3, #0
 8019a78:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8019a7c:	e7aa      	b.n	80199d4 <_printf_i+0x14c>
 8019a7e:	6923      	ldr	r3, [r4, #16]
 8019a80:	462a      	mov	r2, r5
 8019a82:	4649      	mov	r1, r9
 8019a84:	4640      	mov	r0, r8
 8019a86:	47d0      	blx	sl
 8019a88:	3001      	adds	r0, #1
 8019a8a:	d0ad      	beq.n	80199e8 <_printf_i+0x160>
 8019a8c:	6823      	ldr	r3, [r4, #0]
 8019a8e:	079b      	lsls	r3, r3, #30
 8019a90:	d413      	bmi.n	8019aba <_printf_i+0x232>
 8019a92:	68e0      	ldr	r0, [r4, #12]
 8019a94:	9b03      	ldr	r3, [sp, #12]
 8019a96:	4298      	cmp	r0, r3
 8019a98:	bfb8      	it	lt
 8019a9a:	4618      	movlt	r0, r3
 8019a9c:	e7a6      	b.n	80199ec <_printf_i+0x164>
 8019a9e:	2301      	movs	r3, #1
 8019aa0:	4632      	mov	r2, r6
 8019aa2:	4649      	mov	r1, r9
 8019aa4:	4640      	mov	r0, r8
 8019aa6:	47d0      	blx	sl
 8019aa8:	3001      	adds	r0, #1
 8019aaa:	d09d      	beq.n	80199e8 <_printf_i+0x160>
 8019aac:	3501      	adds	r5, #1
 8019aae:	68e3      	ldr	r3, [r4, #12]
 8019ab0:	9903      	ldr	r1, [sp, #12]
 8019ab2:	1a5b      	subs	r3, r3, r1
 8019ab4:	42ab      	cmp	r3, r5
 8019ab6:	dcf2      	bgt.n	8019a9e <_printf_i+0x216>
 8019ab8:	e7eb      	b.n	8019a92 <_printf_i+0x20a>
 8019aba:	2500      	movs	r5, #0
 8019abc:	f104 0619 	add.w	r6, r4, #25
 8019ac0:	e7f5      	b.n	8019aae <_printf_i+0x226>
 8019ac2:	bf00      	nop
 8019ac4:	0801f1d0 	.word	0x0801f1d0
 8019ac8:	0801f1e1 	.word	0x0801f1e1

08019acc <std>:
 8019acc:	2300      	movs	r3, #0
 8019ace:	b510      	push	{r4, lr}
 8019ad0:	4604      	mov	r4, r0
 8019ad2:	e9c0 3300 	strd	r3, r3, [r0]
 8019ad6:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8019ada:	6083      	str	r3, [r0, #8]
 8019adc:	8181      	strh	r1, [r0, #12]
 8019ade:	6643      	str	r3, [r0, #100]	; 0x64
 8019ae0:	81c2      	strh	r2, [r0, #14]
 8019ae2:	6183      	str	r3, [r0, #24]
 8019ae4:	4619      	mov	r1, r3
 8019ae6:	2208      	movs	r2, #8
 8019ae8:	305c      	adds	r0, #92	; 0x5c
 8019aea:	f000 fa07 	bl	8019efc <memset>
 8019aee:	4b0d      	ldr	r3, [pc, #52]	; (8019b24 <std+0x58>)
 8019af0:	6263      	str	r3, [r4, #36]	; 0x24
 8019af2:	4b0d      	ldr	r3, [pc, #52]	; (8019b28 <std+0x5c>)
 8019af4:	62a3      	str	r3, [r4, #40]	; 0x28
 8019af6:	4b0d      	ldr	r3, [pc, #52]	; (8019b2c <std+0x60>)
 8019af8:	62e3      	str	r3, [r4, #44]	; 0x2c
 8019afa:	4b0d      	ldr	r3, [pc, #52]	; (8019b30 <std+0x64>)
 8019afc:	6323      	str	r3, [r4, #48]	; 0x30
 8019afe:	4b0d      	ldr	r3, [pc, #52]	; (8019b34 <std+0x68>)
 8019b00:	6224      	str	r4, [r4, #32]
 8019b02:	429c      	cmp	r4, r3
 8019b04:	d006      	beq.n	8019b14 <std+0x48>
 8019b06:	f103 0268 	add.w	r2, r3, #104	; 0x68
 8019b0a:	4294      	cmp	r4, r2
 8019b0c:	d002      	beq.n	8019b14 <std+0x48>
 8019b0e:	33d0      	adds	r3, #208	; 0xd0
 8019b10:	429c      	cmp	r4, r3
 8019b12:	d105      	bne.n	8019b20 <std+0x54>
 8019b14:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8019b18:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8019b1c:	f000 ba64 	b.w	8019fe8 <__retarget_lock_init_recursive>
 8019b20:	bd10      	pop	{r4, pc}
 8019b22:	bf00      	nop
 8019b24:	08019d2d 	.word	0x08019d2d
 8019b28:	08019d4f 	.word	0x08019d4f
 8019b2c:	08019d87 	.word	0x08019d87
 8019b30:	08019dab 	.word	0x08019dab
 8019b34:	20007234 	.word	0x20007234

08019b38 <stdio_exit_handler>:
 8019b38:	4a02      	ldr	r2, [pc, #8]	; (8019b44 <stdio_exit_handler+0xc>)
 8019b3a:	4903      	ldr	r1, [pc, #12]	; (8019b48 <stdio_exit_handler+0x10>)
 8019b3c:	4803      	ldr	r0, [pc, #12]	; (8019b4c <stdio_exit_handler+0x14>)
 8019b3e:	f000 b869 	b.w	8019c14 <_fwalk_sglue>
 8019b42:	bf00      	nop
 8019b44:	20000064 	.word	0x20000064
 8019b48:	0801b8bd 	.word	0x0801b8bd
 8019b4c:	20000070 	.word	0x20000070

08019b50 <cleanup_stdio>:
 8019b50:	6841      	ldr	r1, [r0, #4]
 8019b52:	4b0c      	ldr	r3, [pc, #48]	; (8019b84 <cleanup_stdio+0x34>)
 8019b54:	4299      	cmp	r1, r3
 8019b56:	b510      	push	{r4, lr}
 8019b58:	4604      	mov	r4, r0
 8019b5a:	d001      	beq.n	8019b60 <cleanup_stdio+0x10>
 8019b5c:	f001 feae 	bl	801b8bc <_fflush_r>
 8019b60:	68a1      	ldr	r1, [r4, #8]
 8019b62:	4b09      	ldr	r3, [pc, #36]	; (8019b88 <cleanup_stdio+0x38>)
 8019b64:	4299      	cmp	r1, r3
 8019b66:	d002      	beq.n	8019b6e <cleanup_stdio+0x1e>
 8019b68:	4620      	mov	r0, r4
 8019b6a:	f001 fea7 	bl	801b8bc <_fflush_r>
 8019b6e:	68e1      	ldr	r1, [r4, #12]
 8019b70:	4b06      	ldr	r3, [pc, #24]	; (8019b8c <cleanup_stdio+0x3c>)
 8019b72:	4299      	cmp	r1, r3
 8019b74:	d004      	beq.n	8019b80 <cleanup_stdio+0x30>
 8019b76:	4620      	mov	r0, r4
 8019b78:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8019b7c:	f001 be9e 	b.w	801b8bc <_fflush_r>
 8019b80:	bd10      	pop	{r4, pc}
 8019b82:	bf00      	nop
 8019b84:	20007234 	.word	0x20007234
 8019b88:	2000729c 	.word	0x2000729c
 8019b8c:	20007304 	.word	0x20007304

08019b90 <global_stdio_init.part.0>:
 8019b90:	b510      	push	{r4, lr}
 8019b92:	4b0b      	ldr	r3, [pc, #44]	; (8019bc0 <global_stdio_init.part.0+0x30>)
 8019b94:	4c0b      	ldr	r4, [pc, #44]	; (8019bc4 <global_stdio_init.part.0+0x34>)
 8019b96:	4a0c      	ldr	r2, [pc, #48]	; (8019bc8 <global_stdio_init.part.0+0x38>)
 8019b98:	601a      	str	r2, [r3, #0]
 8019b9a:	4620      	mov	r0, r4
 8019b9c:	2200      	movs	r2, #0
 8019b9e:	2104      	movs	r1, #4
 8019ba0:	f7ff ff94 	bl	8019acc <std>
 8019ba4:	f104 0068 	add.w	r0, r4, #104	; 0x68
 8019ba8:	2201      	movs	r2, #1
 8019baa:	2109      	movs	r1, #9
 8019bac:	f7ff ff8e 	bl	8019acc <std>
 8019bb0:	f104 00d0 	add.w	r0, r4, #208	; 0xd0
 8019bb4:	2202      	movs	r2, #2
 8019bb6:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8019bba:	2112      	movs	r1, #18
 8019bbc:	f7ff bf86 	b.w	8019acc <std>
 8019bc0:	2000736c 	.word	0x2000736c
 8019bc4:	20007234 	.word	0x20007234
 8019bc8:	08019b39 	.word	0x08019b39

08019bcc <__sfp_lock_acquire>:
 8019bcc:	4801      	ldr	r0, [pc, #4]	; (8019bd4 <__sfp_lock_acquire+0x8>)
 8019bce:	f000 ba0c 	b.w	8019fea <__retarget_lock_acquire_recursive>
 8019bd2:	bf00      	nop
 8019bd4:	20007375 	.word	0x20007375

08019bd8 <__sfp_lock_release>:
 8019bd8:	4801      	ldr	r0, [pc, #4]	; (8019be0 <__sfp_lock_release+0x8>)
 8019bda:	f000 ba07 	b.w	8019fec <__retarget_lock_release_recursive>
 8019bde:	bf00      	nop
 8019be0:	20007375 	.word	0x20007375

08019be4 <__sinit>:
 8019be4:	b510      	push	{r4, lr}
 8019be6:	4604      	mov	r4, r0
 8019be8:	f7ff fff0 	bl	8019bcc <__sfp_lock_acquire>
 8019bec:	6a23      	ldr	r3, [r4, #32]
 8019bee:	b11b      	cbz	r3, 8019bf8 <__sinit+0x14>
 8019bf0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8019bf4:	f7ff bff0 	b.w	8019bd8 <__sfp_lock_release>
 8019bf8:	4b04      	ldr	r3, [pc, #16]	; (8019c0c <__sinit+0x28>)
 8019bfa:	6223      	str	r3, [r4, #32]
 8019bfc:	4b04      	ldr	r3, [pc, #16]	; (8019c10 <__sinit+0x2c>)
 8019bfe:	681b      	ldr	r3, [r3, #0]
 8019c00:	2b00      	cmp	r3, #0
 8019c02:	d1f5      	bne.n	8019bf0 <__sinit+0xc>
 8019c04:	f7ff ffc4 	bl	8019b90 <global_stdio_init.part.0>
 8019c08:	e7f2      	b.n	8019bf0 <__sinit+0xc>
 8019c0a:	bf00      	nop
 8019c0c:	08019b51 	.word	0x08019b51
 8019c10:	2000736c 	.word	0x2000736c

08019c14 <_fwalk_sglue>:
 8019c14:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8019c18:	4607      	mov	r7, r0
 8019c1a:	4688      	mov	r8, r1
 8019c1c:	4614      	mov	r4, r2
 8019c1e:	2600      	movs	r6, #0
 8019c20:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8019c24:	f1b9 0901 	subs.w	r9, r9, #1
 8019c28:	d505      	bpl.n	8019c36 <_fwalk_sglue+0x22>
 8019c2a:	6824      	ldr	r4, [r4, #0]
 8019c2c:	2c00      	cmp	r4, #0
 8019c2e:	d1f7      	bne.n	8019c20 <_fwalk_sglue+0xc>
 8019c30:	4630      	mov	r0, r6
 8019c32:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8019c36:	89ab      	ldrh	r3, [r5, #12]
 8019c38:	2b01      	cmp	r3, #1
 8019c3a:	d907      	bls.n	8019c4c <_fwalk_sglue+0x38>
 8019c3c:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8019c40:	3301      	adds	r3, #1
 8019c42:	d003      	beq.n	8019c4c <_fwalk_sglue+0x38>
 8019c44:	4629      	mov	r1, r5
 8019c46:	4638      	mov	r0, r7
 8019c48:	47c0      	blx	r8
 8019c4a:	4306      	orrs	r6, r0
 8019c4c:	3568      	adds	r5, #104	; 0x68
 8019c4e:	e7e9      	b.n	8019c24 <_fwalk_sglue+0x10>

08019c50 <iprintf>:
 8019c50:	b40f      	push	{r0, r1, r2, r3}
 8019c52:	b507      	push	{r0, r1, r2, lr}
 8019c54:	4906      	ldr	r1, [pc, #24]	; (8019c70 <iprintf+0x20>)
 8019c56:	ab04      	add	r3, sp, #16
 8019c58:	6808      	ldr	r0, [r1, #0]
 8019c5a:	f853 2b04 	ldr.w	r2, [r3], #4
 8019c5e:	6881      	ldr	r1, [r0, #8]
 8019c60:	9301      	str	r3, [sp, #4]
 8019c62:	f001 fc8b 	bl	801b57c <_vfiprintf_r>
 8019c66:	b003      	add	sp, #12
 8019c68:	f85d eb04 	ldr.w	lr, [sp], #4
 8019c6c:	b004      	add	sp, #16
 8019c6e:	4770      	bx	lr
 8019c70:	200000bc 	.word	0x200000bc

08019c74 <_puts_r>:
 8019c74:	6a03      	ldr	r3, [r0, #32]
 8019c76:	b570      	push	{r4, r5, r6, lr}
 8019c78:	6884      	ldr	r4, [r0, #8]
 8019c7a:	4605      	mov	r5, r0
 8019c7c:	460e      	mov	r6, r1
 8019c7e:	b90b      	cbnz	r3, 8019c84 <_puts_r+0x10>
 8019c80:	f7ff ffb0 	bl	8019be4 <__sinit>
 8019c84:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8019c86:	07db      	lsls	r3, r3, #31
 8019c88:	d405      	bmi.n	8019c96 <_puts_r+0x22>
 8019c8a:	89a3      	ldrh	r3, [r4, #12]
 8019c8c:	0598      	lsls	r0, r3, #22
 8019c8e:	d402      	bmi.n	8019c96 <_puts_r+0x22>
 8019c90:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8019c92:	f000 f9aa 	bl	8019fea <__retarget_lock_acquire_recursive>
 8019c96:	89a3      	ldrh	r3, [r4, #12]
 8019c98:	0719      	lsls	r1, r3, #28
 8019c9a:	d513      	bpl.n	8019cc4 <_puts_r+0x50>
 8019c9c:	6923      	ldr	r3, [r4, #16]
 8019c9e:	b18b      	cbz	r3, 8019cc4 <_puts_r+0x50>
 8019ca0:	3e01      	subs	r6, #1
 8019ca2:	68a3      	ldr	r3, [r4, #8]
 8019ca4:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 8019ca8:	3b01      	subs	r3, #1
 8019caa:	60a3      	str	r3, [r4, #8]
 8019cac:	b9e9      	cbnz	r1, 8019cea <_puts_r+0x76>
 8019cae:	2b00      	cmp	r3, #0
 8019cb0:	da2e      	bge.n	8019d10 <_puts_r+0x9c>
 8019cb2:	4622      	mov	r2, r4
 8019cb4:	210a      	movs	r1, #10
 8019cb6:	4628      	mov	r0, r5
 8019cb8:	f000 f87b 	bl	8019db2 <__swbuf_r>
 8019cbc:	3001      	adds	r0, #1
 8019cbe:	d007      	beq.n	8019cd0 <_puts_r+0x5c>
 8019cc0:	250a      	movs	r5, #10
 8019cc2:	e007      	b.n	8019cd4 <_puts_r+0x60>
 8019cc4:	4621      	mov	r1, r4
 8019cc6:	4628      	mov	r0, r5
 8019cc8:	f000 f8b0 	bl	8019e2c <__swsetup_r>
 8019ccc:	2800      	cmp	r0, #0
 8019cce:	d0e7      	beq.n	8019ca0 <_puts_r+0x2c>
 8019cd0:	f04f 35ff 	mov.w	r5, #4294967295
 8019cd4:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8019cd6:	07da      	lsls	r2, r3, #31
 8019cd8:	d405      	bmi.n	8019ce6 <_puts_r+0x72>
 8019cda:	89a3      	ldrh	r3, [r4, #12]
 8019cdc:	059b      	lsls	r3, r3, #22
 8019cde:	d402      	bmi.n	8019ce6 <_puts_r+0x72>
 8019ce0:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8019ce2:	f000 f983 	bl	8019fec <__retarget_lock_release_recursive>
 8019ce6:	4628      	mov	r0, r5
 8019ce8:	bd70      	pop	{r4, r5, r6, pc}
 8019cea:	2b00      	cmp	r3, #0
 8019cec:	da04      	bge.n	8019cf8 <_puts_r+0x84>
 8019cee:	69a2      	ldr	r2, [r4, #24]
 8019cf0:	429a      	cmp	r2, r3
 8019cf2:	dc06      	bgt.n	8019d02 <_puts_r+0x8e>
 8019cf4:	290a      	cmp	r1, #10
 8019cf6:	d004      	beq.n	8019d02 <_puts_r+0x8e>
 8019cf8:	6823      	ldr	r3, [r4, #0]
 8019cfa:	1c5a      	adds	r2, r3, #1
 8019cfc:	6022      	str	r2, [r4, #0]
 8019cfe:	7019      	strb	r1, [r3, #0]
 8019d00:	e7cf      	b.n	8019ca2 <_puts_r+0x2e>
 8019d02:	4622      	mov	r2, r4
 8019d04:	4628      	mov	r0, r5
 8019d06:	f000 f854 	bl	8019db2 <__swbuf_r>
 8019d0a:	3001      	adds	r0, #1
 8019d0c:	d1c9      	bne.n	8019ca2 <_puts_r+0x2e>
 8019d0e:	e7df      	b.n	8019cd0 <_puts_r+0x5c>
 8019d10:	6823      	ldr	r3, [r4, #0]
 8019d12:	250a      	movs	r5, #10
 8019d14:	1c5a      	adds	r2, r3, #1
 8019d16:	6022      	str	r2, [r4, #0]
 8019d18:	701d      	strb	r5, [r3, #0]
 8019d1a:	e7db      	b.n	8019cd4 <_puts_r+0x60>

08019d1c <puts>:
 8019d1c:	4b02      	ldr	r3, [pc, #8]	; (8019d28 <puts+0xc>)
 8019d1e:	4601      	mov	r1, r0
 8019d20:	6818      	ldr	r0, [r3, #0]
 8019d22:	f7ff bfa7 	b.w	8019c74 <_puts_r>
 8019d26:	bf00      	nop
 8019d28:	200000bc 	.word	0x200000bc

08019d2c <__sread>:
 8019d2c:	b510      	push	{r4, lr}
 8019d2e:	460c      	mov	r4, r1
 8019d30:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8019d34:	f000 f910 	bl	8019f58 <_read_r>
 8019d38:	2800      	cmp	r0, #0
 8019d3a:	bfab      	itete	ge
 8019d3c:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8019d3e:	89a3      	ldrhlt	r3, [r4, #12]
 8019d40:	181b      	addge	r3, r3, r0
 8019d42:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8019d46:	bfac      	ite	ge
 8019d48:	6563      	strge	r3, [r4, #84]	; 0x54
 8019d4a:	81a3      	strhlt	r3, [r4, #12]
 8019d4c:	bd10      	pop	{r4, pc}

08019d4e <__swrite>:
 8019d4e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8019d52:	461f      	mov	r7, r3
 8019d54:	898b      	ldrh	r3, [r1, #12]
 8019d56:	05db      	lsls	r3, r3, #23
 8019d58:	4605      	mov	r5, r0
 8019d5a:	460c      	mov	r4, r1
 8019d5c:	4616      	mov	r6, r2
 8019d5e:	d505      	bpl.n	8019d6c <__swrite+0x1e>
 8019d60:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8019d64:	2302      	movs	r3, #2
 8019d66:	2200      	movs	r2, #0
 8019d68:	f000 f8e4 	bl	8019f34 <_lseek_r>
 8019d6c:	89a3      	ldrh	r3, [r4, #12]
 8019d6e:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8019d72:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8019d76:	81a3      	strh	r3, [r4, #12]
 8019d78:	4632      	mov	r2, r6
 8019d7a:	463b      	mov	r3, r7
 8019d7c:	4628      	mov	r0, r5
 8019d7e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8019d82:	f000 b8fb 	b.w	8019f7c <_write_r>

08019d86 <__sseek>:
 8019d86:	b510      	push	{r4, lr}
 8019d88:	460c      	mov	r4, r1
 8019d8a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8019d8e:	f000 f8d1 	bl	8019f34 <_lseek_r>
 8019d92:	1c43      	adds	r3, r0, #1
 8019d94:	89a3      	ldrh	r3, [r4, #12]
 8019d96:	bf15      	itete	ne
 8019d98:	6560      	strne	r0, [r4, #84]	; 0x54
 8019d9a:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8019d9e:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8019da2:	81a3      	strheq	r3, [r4, #12]
 8019da4:	bf18      	it	ne
 8019da6:	81a3      	strhne	r3, [r4, #12]
 8019da8:	bd10      	pop	{r4, pc}

08019daa <__sclose>:
 8019daa:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8019dae:	f000 b8b1 	b.w	8019f14 <_close_r>

08019db2 <__swbuf_r>:
 8019db2:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8019db4:	460e      	mov	r6, r1
 8019db6:	4614      	mov	r4, r2
 8019db8:	4605      	mov	r5, r0
 8019dba:	b118      	cbz	r0, 8019dc4 <__swbuf_r+0x12>
 8019dbc:	6a03      	ldr	r3, [r0, #32]
 8019dbe:	b90b      	cbnz	r3, 8019dc4 <__swbuf_r+0x12>
 8019dc0:	f7ff ff10 	bl	8019be4 <__sinit>
 8019dc4:	69a3      	ldr	r3, [r4, #24]
 8019dc6:	60a3      	str	r3, [r4, #8]
 8019dc8:	89a3      	ldrh	r3, [r4, #12]
 8019dca:	071a      	lsls	r2, r3, #28
 8019dcc:	d525      	bpl.n	8019e1a <__swbuf_r+0x68>
 8019dce:	6923      	ldr	r3, [r4, #16]
 8019dd0:	b31b      	cbz	r3, 8019e1a <__swbuf_r+0x68>
 8019dd2:	6823      	ldr	r3, [r4, #0]
 8019dd4:	6922      	ldr	r2, [r4, #16]
 8019dd6:	1a98      	subs	r0, r3, r2
 8019dd8:	6963      	ldr	r3, [r4, #20]
 8019dda:	b2f6      	uxtb	r6, r6
 8019ddc:	4283      	cmp	r3, r0
 8019dde:	4637      	mov	r7, r6
 8019de0:	dc04      	bgt.n	8019dec <__swbuf_r+0x3a>
 8019de2:	4621      	mov	r1, r4
 8019de4:	4628      	mov	r0, r5
 8019de6:	f001 fd69 	bl	801b8bc <_fflush_r>
 8019dea:	b9e0      	cbnz	r0, 8019e26 <__swbuf_r+0x74>
 8019dec:	68a3      	ldr	r3, [r4, #8]
 8019dee:	3b01      	subs	r3, #1
 8019df0:	60a3      	str	r3, [r4, #8]
 8019df2:	6823      	ldr	r3, [r4, #0]
 8019df4:	1c5a      	adds	r2, r3, #1
 8019df6:	6022      	str	r2, [r4, #0]
 8019df8:	701e      	strb	r6, [r3, #0]
 8019dfa:	6962      	ldr	r2, [r4, #20]
 8019dfc:	1c43      	adds	r3, r0, #1
 8019dfe:	429a      	cmp	r2, r3
 8019e00:	d004      	beq.n	8019e0c <__swbuf_r+0x5a>
 8019e02:	89a3      	ldrh	r3, [r4, #12]
 8019e04:	07db      	lsls	r3, r3, #31
 8019e06:	d506      	bpl.n	8019e16 <__swbuf_r+0x64>
 8019e08:	2e0a      	cmp	r6, #10
 8019e0a:	d104      	bne.n	8019e16 <__swbuf_r+0x64>
 8019e0c:	4621      	mov	r1, r4
 8019e0e:	4628      	mov	r0, r5
 8019e10:	f001 fd54 	bl	801b8bc <_fflush_r>
 8019e14:	b938      	cbnz	r0, 8019e26 <__swbuf_r+0x74>
 8019e16:	4638      	mov	r0, r7
 8019e18:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8019e1a:	4621      	mov	r1, r4
 8019e1c:	4628      	mov	r0, r5
 8019e1e:	f000 f805 	bl	8019e2c <__swsetup_r>
 8019e22:	2800      	cmp	r0, #0
 8019e24:	d0d5      	beq.n	8019dd2 <__swbuf_r+0x20>
 8019e26:	f04f 37ff 	mov.w	r7, #4294967295
 8019e2a:	e7f4      	b.n	8019e16 <__swbuf_r+0x64>

08019e2c <__swsetup_r>:
 8019e2c:	b538      	push	{r3, r4, r5, lr}
 8019e2e:	4b2a      	ldr	r3, [pc, #168]	; (8019ed8 <__swsetup_r+0xac>)
 8019e30:	4605      	mov	r5, r0
 8019e32:	6818      	ldr	r0, [r3, #0]
 8019e34:	460c      	mov	r4, r1
 8019e36:	b118      	cbz	r0, 8019e40 <__swsetup_r+0x14>
 8019e38:	6a03      	ldr	r3, [r0, #32]
 8019e3a:	b90b      	cbnz	r3, 8019e40 <__swsetup_r+0x14>
 8019e3c:	f7ff fed2 	bl	8019be4 <__sinit>
 8019e40:	89a3      	ldrh	r3, [r4, #12]
 8019e42:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8019e46:	0718      	lsls	r0, r3, #28
 8019e48:	d422      	bmi.n	8019e90 <__swsetup_r+0x64>
 8019e4a:	06d9      	lsls	r1, r3, #27
 8019e4c:	d407      	bmi.n	8019e5e <__swsetup_r+0x32>
 8019e4e:	2309      	movs	r3, #9
 8019e50:	602b      	str	r3, [r5, #0]
 8019e52:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8019e56:	81a3      	strh	r3, [r4, #12]
 8019e58:	f04f 30ff 	mov.w	r0, #4294967295
 8019e5c:	e034      	b.n	8019ec8 <__swsetup_r+0x9c>
 8019e5e:	0758      	lsls	r0, r3, #29
 8019e60:	d512      	bpl.n	8019e88 <__swsetup_r+0x5c>
 8019e62:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8019e64:	b141      	cbz	r1, 8019e78 <__swsetup_r+0x4c>
 8019e66:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8019e6a:	4299      	cmp	r1, r3
 8019e6c:	d002      	beq.n	8019e74 <__swsetup_r+0x48>
 8019e6e:	4628      	mov	r0, r5
 8019e70:	f000 fede 	bl	801ac30 <_free_r>
 8019e74:	2300      	movs	r3, #0
 8019e76:	6363      	str	r3, [r4, #52]	; 0x34
 8019e78:	89a3      	ldrh	r3, [r4, #12]
 8019e7a:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8019e7e:	81a3      	strh	r3, [r4, #12]
 8019e80:	2300      	movs	r3, #0
 8019e82:	6063      	str	r3, [r4, #4]
 8019e84:	6923      	ldr	r3, [r4, #16]
 8019e86:	6023      	str	r3, [r4, #0]
 8019e88:	89a3      	ldrh	r3, [r4, #12]
 8019e8a:	f043 0308 	orr.w	r3, r3, #8
 8019e8e:	81a3      	strh	r3, [r4, #12]
 8019e90:	6923      	ldr	r3, [r4, #16]
 8019e92:	b94b      	cbnz	r3, 8019ea8 <__swsetup_r+0x7c>
 8019e94:	89a3      	ldrh	r3, [r4, #12]
 8019e96:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8019e9a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8019e9e:	d003      	beq.n	8019ea8 <__swsetup_r+0x7c>
 8019ea0:	4621      	mov	r1, r4
 8019ea2:	4628      	mov	r0, r5
 8019ea4:	f001 fd6a 	bl	801b97c <__smakebuf_r>
 8019ea8:	89a0      	ldrh	r0, [r4, #12]
 8019eaa:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8019eae:	f010 0301 	ands.w	r3, r0, #1
 8019eb2:	d00a      	beq.n	8019eca <__swsetup_r+0x9e>
 8019eb4:	2300      	movs	r3, #0
 8019eb6:	60a3      	str	r3, [r4, #8]
 8019eb8:	6963      	ldr	r3, [r4, #20]
 8019eba:	425b      	negs	r3, r3
 8019ebc:	61a3      	str	r3, [r4, #24]
 8019ebe:	6923      	ldr	r3, [r4, #16]
 8019ec0:	b943      	cbnz	r3, 8019ed4 <__swsetup_r+0xa8>
 8019ec2:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8019ec6:	d1c4      	bne.n	8019e52 <__swsetup_r+0x26>
 8019ec8:	bd38      	pop	{r3, r4, r5, pc}
 8019eca:	0781      	lsls	r1, r0, #30
 8019ecc:	bf58      	it	pl
 8019ece:	6963      	ldrpl	r3, [r4, #20]
 8019ed0:	60a3      	str	r3, [r4, #8]
 8019ed2:	e7f4      	b.n	8019ebe <__swsetup_r+0x92>
 8019ed4:	2000      	movs	r0, #0
 8019ed6:	e7f7      	b.n	8019ec8 <__swsetup_r+0x9c>
 8019ed8:	200000bc 	.word	0x200000bc

08019edc <memcmp>:
 8019edc:	b510      	push	{r4, lr}
 8019ede:	3901      	subs	r1, #1
 8019ee0:	4402      	add	r2, r0
 8019ee2:	4290      	cmp	r0, r2
 8019ee4:	d101      	bne.n	8019eea <memcmp+0xe>
 8019ee6:	2000      	movs	r0, #0
 8019ee8:	e005      	b.n	8019ef6 <memcmp+0x1a>
 8019eea:	7803      	ldrb	r3, [r0, #0]
 8019eec:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 8019ef0:	42a3      	cmp	r3, r4
 8019ef2:	d001      	beq.n	8019ef8 <memcmp+0x1c>
 8019ef4:	1b18      	subs	r0, r3, r4
 8019ef6:	bd10      	pop	{r4, pc}
 8019ef8:	3001      	adds	r0, #1
 8019efa:	e7f2      	b.n	8019ee2 <memcmp+0x6>

08019efc <memset>:
 8019efc:	4402      	add	r2, r0
 8019efe:	4603      	mov	r3, r0
 8019f00:	4293      	cmp	r3, r2
 8019f02:	d100      	bne.n	8019f06 <memset+0xa>
 8019f04:	4770      	bx	lr
 8019f06:	f803 1b01 	strb.w	r1, [r3], #1
 8019f0a:	e7f9      	b.n	8019f00 <memset+0x4>

08019f0c <_localeconv_r>:
 8019f0c:	4800      	ldr	r0, [pc, #0]	; (8019f10 <_localeconv_r+0x4>)
 8019f0e:	4770      	bx	lr
 8019f10:	200001b0 	.word	0x200001b0

08019f14 <_close_r>:
 8019f14:	b538      	push	{r3, r4, r5, lr}
 8019f16:	4d06      	ldr	r5, [pc, #24]	; (8019f30 <_close_r+0x1c>)
 8019f18:	2300      	movs	r3, #0
 8019f1a:	4604      	mov	r4, r0
 8019f1c:	4608      	mov	r0, r1
 8019f1e:	602b      	str	r3, [r5, #0]
 8019f20:	f7e9 fd4b 	bl	80039ba <_close>
 8019f24:	1c43      	adds	r3, r0, #1
 8019f26:	d102      	bne.n	8019f2e <_close_r+0x1a>
 8019f28:	682b      	ldr	r3, [r5, #0]
 8019f2a:	b103      	cbz	r3, 8019f2e <_close_r+0x1a>
 8019f2c:	6023      	str	r3, [r4, #0]
 8019f2e:	bd38      	pop	{r3, r4, r5, pc}
 8019f30:	20007370 	.word	0x20007370

08019f34 <_lseek_r>:
 8019f34:	b538      	push	{r3, r4, r5, lr}
 8019f36:	4d07      	ldr	r5, [pc, #28]	; (8019f54 <_lseek_r+0x20>)
 8019f38:	4604      	mov	r4, r0
 8019f3a:	4608      	mov	r0, r1
 8019f3c:	4611      	mov	r1, r2
 8019f3e:	2200      	movs	r2, #0
 8019f40:	602a      	str	r2, [r5, #0]
 8019f42:	461a      	mov	r2, r3
 8019f44:	f7e9 fd60 	bl	8003a08 <_lseek>
 8019f48:	1c43      	adds	r3, r0, #1
 8019f4a:	d102      	bne.n	8019f52 <_lseek_r+0x1e>
 8019f4c:	682b      	ldr	r3, [r5, #0]
 8019f4e:	b103      	cbz	r3, 8019f52 <_lseek_r+0x1e>
 8019f50:	6023      	str	r3, [r4, #0]
 8019f52:	bd38      	pop	{r3, r4, r5, pc}
 8019f54:	20007370 	.word	0x20007370

08019f58 <_read_r>:
 8019f58:	b538      	push	{r3, r4, r5, lr}
 8019f5a:	4d07      	ldr	r5, [pc, #28]	; (8019f78 <_read_r+0x20>)
 8019f5c:	4604      	mov	r4, r0
 8019f5e:	4608      	mov	r0, r1
 8019f60:	4611      	mov	r1, r2
 8019f62:	2200      	movs	r2, #0
 8019f64:	602a      	str	r2, [r5, #0]
 8019f66:	461a      	mov	r2, r3
 8019f68:	f7e9 fcee 	bl	8003948 <_read>
 8019f6c:	1c43      	adds	r3, r0, #1
 8019f6e:	d102      	bne.n	8019f76 <_read_r+0x1e>
 8019f70:	682b      	ldr	r3, [r5, #0]
 8019f72:	b103      	cbz	r3, 8019f76 <_read_r+0x1e>
 8019f74:	6023      	str	r3, [r4, #0]
 8019f76:	bd38      	pop	{r3, r4, r5, pc}
 8019f78:	20007370 	.word	0x20007370

08019f7c <_write_r>:
 8019f7c:	b538      	push	{r3, r4, r5, lr}
 8019f7e:	4d07      	ldr	r5, [pc, #28]	; (8019f9c <_write_r+0x20>)
 8019f80:	4604      	mov	r4, r0
 8019f82:	4608      	mov	r0, r1
 8019f84:	4611      	mov	r1, r2
 8019f86:	2200      	movs	r2, #0
 8019f88:	602a      	str	r2, [r5, #0]
 8019f8a:	461a      	mov	r2, r3
 8019f8c:	f7e9 fcf9 	bl	8003982 <_write>
 8019f90:	1c43      	adds	r3, r0, #1
 8019f92:	d102      	bne.n	8019f9a <_write_r+0x1e>
 8019f94:	682b      	ldr	r3, [r5, #0]
 8019f96:	b103      	cbz	r3, 8019f9a <_write_r+0x1e>
 8019f98:	6023      	str	r3, [r4, #0]
 8019f9a:	bd38      	pop	{r3, r4, r5, pc}
 8019f9c:	20007370 	.word	0x20007370

08019fa0 <__libc_init_array>:
 8019fa0:	b570      	push	{r4, r5, r6, lr}
 8019fa2:	4d0d      	ldr	r5, [pc, #52]	; (8019fd8 <__libc_init_array+0x38>)
 8019fa4:	4c0d      	ldr	r4, [pc, #52]	; (8019fdc <__libc_init_array+0x3c>)
 8019fa6:	1b64      	subs	r4, r4, r5
 8019fa8:	10a4      	asrs	r4, r4, #2
 8019faa:	2600      	movs	r6, #0
 8019fac:	42a6      	cmp	r6, r4
 8019fae:	d109      	bne.n	8019fc4 <__libc_init_array+0x24>
 8019fb0:	4d0b      	ldr	r5, [pc, #44]	; (8019fe0 <__libc_init_array+0x40>)
 8019fb2:	4c0c      	ldr	r4, [pc, #48]	; (8019fe4 <__libc_init_array+0x44>)
 8019fb4:	f001 fdd0 	bl	801bb58 <_init>
 8019fb8:	1b64      	subs	r4, r4, r5
 8019fba:	10a4      	asrs	r4, r4, #2
 8019fbc:	2600      	movs	r6, #0
 8019fbe:	42a6      	cmp	r6, r4
 8019fc0:	d105      	bne.n	8019fce <__libc_init_array+0x2e>
 8019fc2:	bd70      	pop	{r4, r5, r6, pc}
 8019fc4:	f855 3b04 	ldr.w	r3, [r5], #4
 8019fc8:	4798      	blx	r3
 8019fca:	3601      	adds	r6, #1
 8019fcc:	e7ee      	b.n	8019fac <__libc_init_array+0xc>
 8019fce:	f855 3b04 	ldr.w	r3, [r5], #4
 8019fd2:	4798      	blx	r3
 8019fd4:	3601      	adds	r6, #1
 8019fd6:	e7f2      	b.n	8019fbe <__libc_init_array+0x1e>
 8019fd8:	0801f420 	.word	0x0801f420
 8019fdc:	0801f420 	.word	0x0801f420
 8019fe0:	0801f420 	.word	0x0801f420
 8019fe4:	0801f424 	.word	0x0801f424

08019fe8 <__retarget_lock_init_recursive>:
 8019fe8:	4770      	bx	lr

08019fea <__retarget_lock_acquire_recursive>:
 8019fea:	4770      	bx	lr

08019fec <__retarget_lock_release_recursive>:
 8019fec:	4770      	bx	lr

08019fee <memcpy>:
 8019fee:	440a      	add	r2, r1
 8019ff0:	4291      	cmp	r1, r2
 8019ff2:	f100 33ff 	add.w	r3, r0, #4294967295
 8019ff6:	d100      	bne.n	8019ffa <memcpy+0xc>
 8019ff8:	4770      	bx	lr
 8019ffa:	b510      	push	{r4, lr}
 8019ffc:	f811 4b01 	ldrb.w	r4, [r1], #1
 801a000:	f803 4f01 	strb.w	r4, [r3, #1]!
 801a004:	4291      	cmp	r1, r2
 801a006:	d1f9      	bne.n	8019ffc <memcpy+0xe>
 801a008:	bd10      	pop	{r4, pc}
	...

0801a00c <__assert_func>:
 801a00c:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 801a00e:	4614      	mov	r4, r2
 801a010:	461a      	mov	r2, r3
 801a012:	4b09      	ldr	r3, [pc, #36]	; (801a038 <__assert_func+0x2c>)
 801a014:	681b      	ldr	r3, [r3, #0]
 801a016:	4605      	mov	r5, r0
 801a018:	68d8      	ldr	r0, [r3, #12]
 801a01a:	b14c      	cbz	r4, 801a030 <__assert_func+0x24>
 801a01c:	4b07      	ldr	r3, [pc, #28]	; (801a03c <__assert_func+0x30>)
 801a01e:	9100      	str	r1, [sp, #0]
 801a020:	e9cd 3401 	strd	r3, r4, [sp, #4]
 801a024:	4906      	ldr	r1, [pc, #24]	; (801a040 <__assert_func+0x34>)
 801a026:	462b      	mov	r3, r5
 801a028:	f001 fc70 	bl	801b90c <fiprintf>
 801a02c:	f001 fd14 	bl	801ba58 <abort>
 801a030:	4b04      	ldr	r3, [pc, #16]	; (801a044 <__assert_func+0x38>)
 801a032:	461c      	mov	r4, r3
 801a034:	e7f3      	b.n	801a01e <__assert_func+0x12>
 801a036:	bf00      	nop
 801a038:	200000bc 	.word	0x200000bc
 801a03c:	0801f1f2 	.word	0x0801f1f2
 801a040:	0801f1ff 	.word	0x0801f1ff
 801a044:	0801f22d 	.word	0x0801f22d

0801a048 <quorem>:
 801a048:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801a04c:	6903      	ldr	r3, [r0, #16]
 801a04e:	690c      	ldr	r4, [r1, #16]
 801a050:	42a3      	cmp	r3, r4
 801a052:	4607      	mov	r7, r0
 801a054:	db7e      	blt.n	801a154 <quorem+0x10c>
 801a056:	3c01      	subs	r4, #1
 801a058:	f101 0814 	add.w	r8, r1, #20
 801a05c:	f100 0514 	add.w	r5, r0, #20
 801a060:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 801a064:	9301      	str	r3, [sp, #4]
 801a066:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 801a06a:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 801a06e:	3301      	adds	r3, #1
 801a070:	429a      	cmp	r2, r3
 801a072:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 801a076:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 801a07a:	fbb2 f6f3 	udiv	r6, r2, r3
 801a07e:	d331      	bcc.n	801a0e4 <quorem+0x9c>
 801a080:	f04f 0e00 	mov.w	lr, #0
 801a084:	4640      	mov	r0, r8
 801a086:	46ac      	mov	ip, r5
 801a088:	46f2      	mov	sl, lr
 801a08a:	f850 2b04 	ldr.w	r2, [r0], #4
 801a08e:	b293      	uxth	r3, r2
 801a090:	fb06 e303 	mla	r3, r6, r3, lr
 801a094:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 801a098:	0c1a      	lsrs	r2, r3, #16
 801a09a:	b29b      	uxth	r3, r3
 801a09c:	ebaa 0303 	sub.w	r3, sl, r3
 801a0a0:	f8dc a000 	ldr.w	sl, [ip]
 801a0a4:	fa13 f38a 	uxtah	r3, r3, sl
 801a0a8:	fb06 220e 	mla	r2, r6, lr, r2
 801a0ac:	9300      	str	r3, [sp, #0]
 801a0ae:	9b00      	ldr	r3, [sp, #0]
 801a0b0:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 801a0b4:	b292      	uxth	r2, r2
 801a0b6:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 801a0ba:	eb02 4223 	add.w	r2, r2, r3, asr #16
 801a0be:	f8bd 3000 	ldrh.w	r3, [sp]
 801a0c2:	4581      	cmp	r9, r0
 801a0c4:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 801a0c8:	f84c 3b04 	str.w	r3, [ip], #4
 801a0cc:	ea4f 4a22 	mov.w	sl, r2, asr #16
 801a0d0:	d2db      	bcs.n	801a08a <quorem+0x42>
 801a0d2:	f855 300b 	ldr.w	r3, [r5, fp]
 801a0d6:	b92b      	cbnz	r3, 801a0e4 <quorem+0x9c>
 801a0d8:	9b01      	ldr	r3, [sp, #4]
 801a0da:	3b04      	subs	r3, #4
 801a0dc:	429d      	cmp	r5, r3
 801a0de:	461a      	mov	r2, r3
 801a0e0:	d32c      	bcc.n	801a13c <quorem+0xf4>
 801a0e2:	613c      	str	r4, [r7, #16]
 801a0e4:	4638      	mov	r0, r7
 801a0e6:	f001 f91f 	bl	801b328 <__mcmp>
 801a0ea:	2800      	cmp	r0, #0
 801a0ec:	db22      	blt.n	801a134 <quorem+0xec>
 801a0ee:	3601      	adds	r6, #1
 801a0f0:	4629      	mov	r1, r5
 801a0f2:	2000      	movs	r0, #0
 801a0f4:	f858 2b04 	ldr.w	r2, [r8], #4
 801a0f8:	f8d1 c000 	ldr.w	ip, [r1]
 801a0fc:	b293      	uxth	r3, r2
 801a0fe:	1ac3      	subs	r3, r0, r3
 801a100:	0c12      	lsrs	r2, r2, #16
 801a102:	fa13 f38c 	uxtah	r3, r3, ip
 801a106:	ebc2 421c 	rsb	r2, r2, ip, lsr #16
 801a10a:	eb02 4223 	add.w	r2, r2, r3, asr #16
 801a10e:	b29b      	uxth	r3, r3
 801a110:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 801a114:	45c1      	cmp	r9, r8
 801a116:	f841 3b04 	str.w	r3, [r1], #4
 801a11a:	ea4f 4022 	mov.w	r0, r2, asr #16
 801a11e:	d2e9      	bcs.n	801a0f4 <quorem+0xac>
 801a120:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 801a124:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 801a128:	b922      	cbnz	r2, 801a134 <quorem+0xec>
 801a12a:	3b04      	subs	r3, #4
 801a12c:	429d      	cmp	r5, r3
 801a12e:	461a      	mov	r2, r3
 801a130:	d30a      	bcc.n	801a148 <quorem+0x100>
 801a132:	613c      	str	r4, [r7, #16]
 801a134:	4630      	mov	r0, r6
 801a136:	b003      	add	sp, #12
 801a138:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801a13c:	6812      	ldr	r2, [r2, #0]
 801a13e:	3b04      	subs	r3, #4
 801a140:	2a00      	cmp	r2, #0
 801a142:	d1ce      	bne.n	801a0e2 <quorem+0x9a>
 801a144:	3c01      	subs	r4, #1
 801a146:	e7c9      	b.n	801a0dc <quorem+0x94>
 801a148:	6812      	ldr	r2, [r2, #0]
 801a14a:	3b04      	subs	r3, #4
 801a14c:	2a00      	cmp	r2, #0
 801a14e:	d1f0      	bne.n	801a132 <quorem+0xea>
 801a150:	3c01      	subs	r4, #1
 801a152:	e7eb      	b.n	801a12c <quorem+0xe4>
 801a154:	2000      	movs	r0, #0
 801a156:	e7ee      	b.n	801a136 <quorem+0xee>

0801a158 <_dtoa_r>:
 801a158:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801a15c:	ed2d 8b02 	vpush	{d8}
 801a160:	69c5      	ldr	r5, [r0, #28]
 801a162:	b091      	sub	sp, #68	; 0x44
 801a164:	ed8d 0b02 	vstr	d0, [sp, #8]
 801a168:	ec59 8b10 	vmov	r8, r9, d0
 801a16c:	9c1c      	ldr	r4, [sp, #112]	; 0x70
 801a16e:	9106      	str	r1, [sp, #24]
 801a170:	4606      	mov	r6, r0
 801a172:	9208      	str	r2, [sp, #32]
 801a174:	930c      	str	r3, [sp, #48]	; 0x30
 801a176:	b975      	cbnz	r5, 801a196 <_dtoa_r+0x3e>
 801a178:	2010      	movs	r0, #16
 801a17a:	f000 fda5 	bl	801acc8 <malloc>
 801a17e:	4602      	mov	r2, r0
 801a180:	61f0      	str	r0, [r6, #28]
 801a182:	b920      	cbnz	r0, 801a18e <_dtoa_r+0x36>
 801a184:	4ba6      	ldr	r3, [pc, #664]	; (801a420 <_dtoa_r+0x2c8>)
 801a186:	21ef      	movs	r1, #239	; 0xef
 801a188:	48a6      	ldr	r0, [pc, #664]	; (801a424 <_dtoa_r+0x2cc>)
 801a18a:	f7ff ff3f 	bl	801a00c <__assert_func>
 801a18e:	e9c0 5501 	strd	r5, r5, [r0, #4]
 801a192:	6005      	str	r5, [r0, #0]
 801a194:	60c5      	str	r5, [r0, #12]
 801a196:	69f3      	ldr	r3, [r6, #28]
 801a198:	6819      	ldr	r1, [r3, #0]
 801a19a:	b151      	cbz	r1, 801a1b2 <_dtoa_r+0x5a>
 801a19c:	685a      	ldr	r2, [r3, #4]
 801a19e:	604a      	str	r2, [r1, #4]
 801a1a0:	2301      	movs	r3, #1
 801a1a2:	4093      	lsls	r3, r2
 801a1a4:	608b      	str	r3, [r1, #8]
 801a1a6:	4630      	mov	r0, r6
 801a1a8:	f000 fe82 	bl	801aeb0 <_Bfree>
 801a1ac:	69f3      	ldr	r3, [r6, #28]
 801a1ae:	2200      	movs	r2, #0
 801a1b0:	601a      	str	r2, [r3, #0]
 801a1b2:	f1b9 0300 	subs.w	r3, r9, #0
 801a1b6:	bfbb      	ittet	lt
 801a1b8:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 801a1bc:	9303      	strlt	r3, [sp, #12]
 801a1be:	2300      	movge	r3, #0
 801a1c0:	2201      	movlt	r2, #1
 801a1c2:	bfac      	ite	ge
 801a1c4:	6023      	strge	r3, [r4, #0]
 801a1c6:	6022      	strlt	r2, [r4, #0]
 801a1c8:	4b97      	ldr	r3, [pc, #604]	; (801a428 <_dtoa_r+0x2d0>)
 801a1ca:	9c03      	ldr	r4, [sp, #12]
 801a1cc:	43a3      	bics	r3, r4
 801a1ce:	d11c      	bne.n	801a20a <_dtoa_r+0xb2>
 801a1d0:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 801a1d2:	f242 730f 	movw	r3, #9999	; 0x270f
 801a1d6:	6013      	str	r3, [r2, #0]
 801a1d8:	f3c4 0313 	ubfx	r3, r4, #0, #20
 801a1dc:	ea53 0308 	orrs.w	r3, r3, r8
 801a1e0:	f000 84fb 	beq.w	801abda <_dtoa_r+0xa82>
 801a1e4:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 801a1e6:	b963      	cbnz	r3, 801a202 <_dtoa_r+0xaa>
 801a1e8:	4b90      	ldr	r3, [pc, #576]	; (801a42c <_dtoa_r+0x2d4>)
 801a1ea:	e020      	b.n	801a22e <_dtoa_r+0xd6>
 801a1ec:	4b90      	ldr	r3, [pc, #576]	; (801a430 <_dtoa_r+0x2d8>)
 801a1ee:	9301      	str	r3, [sp, #4]
 801a1f0:	3308      	adds	r3, #8
 801a1f2:	9a1d      	ldr	r2, [sp, #116]	; 0x74
 801a1f4:	6013      	str	r3, [r2, #0]
 801a1f6:	9801      	ldr	r0, [sp, #4]
 801a1f8:	b011      	add	sp, #68	; 0x44
 801a1fa:	ecbd 8b02 	vpop	{d8}
 801a1fe:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801a202:	4b8a      	ldr	r3, [pc, #552]	; (801a42c <_dtoa_r+0x2d4>)
 801a204:	9301      	str	r3, [sp, #4]
 801a206:	3303      	adds	r3, #3
 801a208:	e7f3      	b.n	801a1f2 <_dtoa_r+0x9a>
 801a20a:	ed9d 8b02 	vldr	d8, [sp, #8]
 801a20e:	eeb5 8b40 	vcmp.f64	d8, #0.0
 801a212:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801a216:	d10c      	bne.n	801a232 <_dtoa_r+0xda>
 801a218:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 801a21a:	2301      	movs	r3, #1
 801a21c:	6013      	str	r3, [r2, #0]
 801a21e:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 801a220:	2b00      	cmp	r3, #0
 801a222:	f000 84d7 	beq.w	801abd4 <_dtoa_r+0xa7c>
 801a226:	4b83      	ldr	r3, [pc, #524]	; (801a434 <_dtoa_r+0x2dc>)
 801a228:	9a1d      	ldr	r2, [sp, #116]	; 0x74
 801a22a:	6013      	str	r3, [r2, #0]
 801a22c:	3b01      	subs	r3, #1
 801a22e:	9301      	str	r3, [sp, #4]
 801a230:	e7e1      	b.n	801a1f6 <_dtoa_r+0x9e>
 801a232:	aa0e      	add	r2, sp, #56	; 0x38
 801a234:	a90f      	add	r1, sp, #60	; 0x3c
 801a236:	4630      	mov	r0, r6
 801a238:	eeb0 0b48 	vmov.f64	d0, d8
 801a23c:	f001 f91a 	bl	801b474 <__d2b>
 801a240:	f3c4 530a 	ubfx	r3, r4, #20, #11
 801a244:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 801a246:	4605      	mov	r5, r0
 801a248:	2b00      	cmp	r3, #0
 801a24a:	d046      	beq.n	801a2da <_dtoa_r+0x182>
 801a24c:	eeb0 7b48 	vmov.f64	d7, d8
 801a250:	ee18 1a90 	vmov	r1, s17
 801a254:	f3c1 0113 	ubfx	r1, r1, #0, #20
 801a258:	f041 517f 	orr.w	r1, r1, #1069547520	; 0x3fc00000
 801a25c:	f441 1140 	orr.w	r1, r1, #3145728	; 0x300000
 801a260:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
 801a264:	2000      	movs	r0, #0
 801a266:	ee07 1a90 	vmov	s15, r1
 801a26a:	eeb7 6b08 	vmov.f64	d6, #120	; 0x3fc00000  1.5
 801a26e:	ed9f 5b66 	vldr	d5, [pc, #408]	; 801a408 <_dtoa_r+0x2b0>
 801a272:	ee37 7b46 	vsub.f64	d7, d7, d6
 801a276:	ed9f 6b66 	vldr	d6, [pc, #408]	; 801a410 <_dtoa_r+0x2b8>
 801a27a:	eea7 6b05 	vfma.f64	d6, d7, d5
 801a27e:	ed9f 5b66 	vldr	d5, [pc, #408]	; 801a418 <_dtoa_r+0x2c0>
 801a282:	ee07 3a90 	vmov	s15, r3
 801a286:	eeb8 4be7 	vcvt.f64.s32	d4, s15
 801a28a:	eeb0 7b46 	vmov.f64	d7, d6
 801a28e:	eea4 7b05 	vfma.f64	d7, d4, d5
 801a292:	eefd 6bc7 	vcvt.s32.f64	s13, d7
 801a296:	eeb5 7bc0 	vcmpe.f64	d7, #0.0
 801a29a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801a29e:	ee16 ba90 	vmov	fp, s13
 801a2a2:	9009      	str	r0, [sp, #36]	; 0x24
 801a2a4:	d508      	bpl.n	801a2b8 <_dtoa_r+0x160>
 801a2a6:	eeb8 6be6 	vcvt.f64.s32	d6, s13
 801a2aa:	eeb4 6b47 	vcmp.f64	d6, d7
 801a2ae:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801a2b2:	bf18      	it	ne
 801a2b4:	f10b 3bff 	addne.w	fp, fp, #4294967295
 801a2b8:	f1bb 0f16 	cmp.w	fp, #22
 801a2bc:	d82b      	bhi.n	801a316 <_dtoa_r+0x1be>
 801a2be:	495e      	ldr	r1, [pc, #376]	; (801a438 <_dtoa_r+0x2e0>)
 801a2c0:	eb01 01cb 	add.w	r1, r1, fp, lsl #3
 801a2c4:	ed91 7b00 	vldr	d7, [r1]
 801a2c8:	eeb4 8bc7 	vcmpe.f64	d8, d7
 801a2cc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801a2d0:	d501      	bpl.n	801a2d6 <_dtoa_r+0x17e>
 801a2d2:	f10b 3bff 	add.w	fp, fp, #4294967295
 801a2d6:	2100      	movs	r1, #0
 801a2d8:	e01e      	b.n	801a318 <_dtoa_r+0x1c0>
 801a2da:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 801a2dc:	4413      	add	r3, r2
 801a2de:	f203 4132 	addw	r1, r3, #1074	; 0x432
 801a2e2:	2920      	cmp	r1, #32
 801a2e4:	bfc1      	itttt	gt
 801a2e6:	f1c1 0140 	rsbgt	r1, r1, #64	; 0x40
 801a2ea:	408c      	lslgt	r4, r1
 801a2ec:	f203 4112 	addwgt	r1, r3, #1042	; 0x412
 801a2f0:	fa28 f101 	lsrgt.w	r1, r8, r1
 801a2f4:	bfd6      	itet	le
 801a2f6:	f1c1 0120 	rsble	r1, r1, #32
 801a2fa:	4321      	orrgt	r1, r4
 801a2fc:	fa08 f101 	lslle.w	r1, r8, r1
 801a300:	ee07 1a90 	vmov	s15, r1
 801a304:	eeb8 7b67 	vcvt.f64.u32	d7, s15
 801a308:	3b01      	subs	r3, #1
 801a30a:	ee17 1a90 	vmov	r1, s15
 801a30e:	2001      	movs	r0, #1
 801a310:	f1a1 71f8 	sub.w	r1, r1, #32505856	; 0x1f00000
 801a314:	e7a7      	b.n	801a266 <_dtoa_r+0x10e>
 801a316:	2101      	movs	r1, #1
 801a318:	1ad2      	subs	r2, r2, r3
 801a31a:	1e53      	subs	r3, r2, #1
 801a31c:	9305      	str	r3, [sp, #20]
 801a31e:	bf45      	ittet	mi
 801a320:	f1c2 0301 	rsbmi	r3, r2, #1
 801a324:	9304      	strmi	r3, [sp, #16]
 801a326:	2300      	movpl	r3, #0
 801a328:	2300      	movmi	r3, #0
 801a32a:	bf4c      	ite	mi
 801a32c:	9305      	strmi	r3, [sp, #20]
 801a32e:	9304      	strpl	r3, [sp, #16]
 801a330:	f1bb 0f00 	cmp.w	fp, #0
 801a334:	910b      	str	r1, [sp, #44]	; 0x2c
 801a336:	db18      	blt.n	801a36a <_dtoa_r+0x212>
 801a338:	9b05      	ldr	r3, [sp, #20]
 801a33a:	f8cd b028 	str.w	fp, [sp, #40]	; 0x28
 801a33e:	445b      	add	r3, fp
 801a340:	9305      	str	r3, [sp, #20]
 801a342:	2300      	movs	r3, #0
 801a344:	9a06      	ldr	r2, [sp, #24]
 801a346:	2a09      	cmp	r2, #9
 801a348:	d848      	bhi.n	801a3dc <_dtoa_r+0x284>
 801a34a:	2a05      	cmp	r2, #5
 801a34c:	bfc4      	itt	gt
 801a34e:	3a04      	subgt	r2, #4
 801a350:	9206      	strgt	r2, [sp, #24]
 801a352:	9a06      	ldr	r2, [sp, #24]
 801a354:	f1a2 0202 	sub.w	r2, r2, #2
 801a358:	bfcc      	ite	gt
 801a35a:	2400      	movgt	r4, #0
 801a35c:	2401      	movle	r4, #1
 801a35e:	2a03      	cmp	r2, #3
 801a360:	d847      	bhi.n	801a3f2 <_dtoa_r+0x29a>
 801a362:	e8df f002 	tbb	[pc, r2]
 801a366:	2d0b      	.short	0x2d0b
 801a368:	392b      	.short	0x392b
 801a36a:	9b04      	ldr	r3, [sp, #16]
 801a36c:	2200      	movs	r2, #0
 801a36e:	eba3 030b 	sub.w	r3, r3, fp
 801a372:	9304      	str	r3, [sp, #16]
 801a374:	920a      	str	r2, [sp, #40]	; 0x28
 801a376:	f1cb 0300 	rsb	r3, fp, #0
 801a37a:	e7e3      	b.n	801a344 <_dtoa_r+0x1ec>
 801a37c:	2200      	movs	r2, #0
 801a37e:	9207      	str	r2, [sp, #28]
 801a380:	9a08      	ldr	r2, [sp, #32]
 801a382:	2a00      	cmp	r2, #0
 801a384:	dc38      	bgt.n	801a3f8 <_dtoa_r+0x2a0>
 801a386:	f04f 0a01 	mov.w	sl, #1
 801a38a:	46d1      	mov	r9, sl
 801a38c:	4652      	mov	r2, sl
 801a38e:	f8cd a020 	str.w	sl, [sp, #32]
 801a392:	69f7      	ldr	r7, [r6, #28]
 801a394:	2100      	movs	r1, #0
 801a396:	2004      	movs	r0, #4
 801a398:	f100 0c14 	add.w	ip, r0, #20
 801a39c:	4594      	cmp	ip, r2
 801a39e:	d930      	bls.n	801a402 <_dtoa_r+0x2aa>
 801a3a0:	6079      	str	r1, [r7, #4]
 801a3a2:	4630      	mov	r0, r6
 801a3a4:	930d      	str	r3, [sp, #52]	; 0x34
 801a3a6:	f000 fd43 	bl	801ae30 <_Balloc>
 801a3aa:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 801a3ac:	9001      	str	r0, [sp, #4]
 801a3ae:	4602      	mov	r2, r0
 801a3b0:	2800      	cmp	r0, #0
 801a3b2:	d145      	bne.n	801a440 <_dtoa_r+0x2e8>
 801a3b4:	4b21      	ldr	r3, [pc, #132]	; (801a43c <_dtoa_r+0x2e4>)
 801a3b6:	f240 11af 	movw	r1, #431	; 0x1af
 801a3ba:	e6e5      	b.n	801a188 <_dtoa_r+0x30>
 801a3bc:	2201      	movs	r2, #1
 801a3be:	e7de      	b.n	801a37e <_dtoa_r+0x226>
 801a3c0:	2200      	movs	r2, #0
 801a3c2:	9207      	str	r2, [sp, #28]
 801a3c4:	9a08      	ldr	r2, [sp, #32]
 801a3c6:	eb0b 0a02 	add.w	sl, fp, r2
 801a3ca:	f10a 0901 	add.w	r9, sl, #1
 801a3ce:	464a      	mov	r2, r9
 801a3d0:	2a01      	cmp	r2, #1
 801a3d2:	bfb8      	it	lt
 801a3d4:	2201      	movlt	r2, #1
 801a3d6:	e7dc      	b.n	801a392 <_dtoa_r+0x23a>
 801a3d8:	2201      	movs	r2, #1
 801a3da:	e7f2      	b.n	801a3c2 <_dtoa_r+0x26a>
 801a3dc:	2401      	movs	r4, #1
 801a3de:	2200      	movs	r2, #0
 801a3e0:	e9cd 2406 	strd	r2, r4, [sp, #24]
 801a3e4:	f04f 3aff 	mov.w	sl, #4294967295
 801a3e8:	2100      	movs	r1, #0
 801a3ea:	46d1      	mov	r9, sl
 801a3ec:	2212      	movs	r2, #18
 801a3ee:	9108      	str	r1, [sp, #32]
 801a3f0:	e7cf      	b.n	801a392 <_dtoa_r+0x23a>
 801a3f2:	2201      	movs	r2, #1
 801a3f4:	9207      	str	r2, [sp, #28]
 801a3f6:	e7f5      	b.n	801a3e4 <_dtoa_r+0x28c>
 801a3f8:	f8dd a020 	ldr.w	sl, [sp, #32]
 801a3fc:	46d1      	mov	r9, sl
 801a3fe:	4652      	mov	r2, sl
 801a400:	e7c7      	b.n	801a392 <_dtoa_r+0x23a>
 801a402:	3101      	adds	r1, #1
 801a404:	0040      	lsls	r0, r0, #1
 801a406:	e7c7      	b.n	801a398 <_dtoa_r+0x240>
 801a408:	636f4361 	.word	0x636f4361
 801a40c:	3fd287a7 	.word	0x3fd287a7
 801a410:	8b60c8b3 	.word	0x8b60c8b3
 801a414:	3fc68a28 	.word	0x3fc68a28
 801a418:	509f79fb 	.word	0x509f79fb
 801a41c:	3fd34413 	.word	0x3fd34413
 801a420:	0801f04e 	.word	0x0801f04e
 801a424:	0801f23b 	.word	0x0801f23b
 801a428:	7ff00000 	.word	0x7ff00000
 801a42c:	0801f237 	.word	0x0801f237
 801a430:	0801f22e 	.word	0x0801f22e
 801a434:	0801f1cf 	.word	0x0801f1cf
 801a438:	0801f328 	.word	0x0801f328
 801a43c:	0801f293 	.word	0x0801f293
 801a440:	69f2      	ldr	r2, [r6, #28]
 801a442:	9901      	ldr	r1, [sp, #4]
 801a444:	6011      	str	r1, [r2, #0]
 801a446:	f1b9 0f0e 	cmp.w	r9, #14
 801a44a:	d86c      	bhi.n	801a526 <_dtoa_r+0x3ce>
 801a44c:	2c00      	cmp	r4, #0
 801a44e:	d06a      	beq.n	801a526 <_dtoa_r+0x3ce>
 801a450:	f1bb 0f00 	cmp.w	fp, #0
 801a454:	f340 80a0 	ble.w	801a598 <_dtoa_r+0x440>
 801a458:	4ac1      	ldr	r2, [pc, #772]	; (801a760 <_dtoa_r+0x608>)
 801a45a:	f00b 010f 	and.w	r1, fp, #15
 801a45e:	eb02 02c1 	add.w	r2, r2, r1, lsl #3
 801a462:	f41b 7f80 	tst.w	fp, #256	; 0x100
 801a466:	ed92 7b00 	vldr	d7, [r2]
 801a46a:	ea4f 122b 	mov.w	r2, fp, asr #4
 801a46e:	f000 8087 	beq.w	801a580 <_dtoa_r+0x428>
 801a472:	49bc      	ldr	r1, [pc, #752]	; (801a764 <_dtoa_r+0x60c>)
 801a474:	ed91 6b08 	vldr	d6, [r1, #32]
 801a478:	ee88 6b06 	vdiv.f64	d6, d8, d6
 801a47c:	ed8d 6b02 	vstr	d6, [sp, #8]
 801a480:	f002 020f 	and.w	r2, r2, #15
 801a484:	2103      	movs	r1, #3
 801a486:	48b7      	ldr	r0, [pc, #732]	; (801a764 <_dtoa_r+0x60c>)
 801a488:	2a00      	cmp	r2, #0
 801a48a:	d17b      	bne.n	801a584 <_dtoa_r+0x42c>
 801a48c:	ed9d 6b02 	vldr	d6, [sp, #8]
 801a490:	ee86 7b07 	vdiv.f64	d7, d6, d7
 801a494:	ed8d 7b02 	vstr	d7, [sp, #8]
 801a498:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 801a49a:	ed9d 7b02 	vldr	d7, [sp, #8]
 801a49e:	2a00      	cmp	r2, #0
 801a4a0:	f000 80a0 	beq.w	801a5e4 <_dtoa_r+0x48c>
 801a4a4:	eeb7 6b00 	vmov.f64	d6, #112	; 0x3f800000  1.0
 801a4a8:	eeb4 7bc6 	vcmpe.f64	d7, d6
 801a4ac:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801a4b0:	f140 8098 	bpl.w	801a5e4 <_dtoa_r+0x48c>
 801a4b4:	f1b9 0f00 	cmp.w	r9, #0
 801a4b8:	f000 8094 	beq.w	801a5e4 <_dtoa_r+0x48c>
 801a4bc:	f1ba 0f00 	cmp.w	sl, #0
 801a4c0:	dd2f      	ble.n	801a522 <_dtoa_r+0x3ca>
 801a4c2:	eeb2 6b04 	vmov.f64	d6, #36	; 0x41200000  10.0
 801a4c6:	ee27 7b06 	vmul.f64	d7, d7, d6
 801a4ca:	ed8d 7b02 	vstr	d7, [sp, #8]
 801a4ce:	f10b 32ff 	add.w	r2, fp, #4294967295
 801a4d2:	3101      	adds	r1, #1
 801a4d4:	4654      	mov	r4, sl
 801a4d6:	ed9d 6b02 	vldr	d6, [sp, #8]
 801a4da:	eeb1 5b0c 	vmov.f64	d5, #28	; 0x40e00000  7.0
 801a4de:	ee07 1a90 	vmov	s15, r1
 801a4e2:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 801a4e6:	eea7 5b06 	vfma.f64	d5, d7, d6
 801a4ea:	ee15 7a90 	vmov	r7, s11
 801a4ee:	ec51 0b15 	vmov	r0, r1, d5
 801a4f2:	f1a7 7150 	sub.w	r1, r7, #54525952	; 0x3400000
 801a4f6:	2c00      	cmp	r4, #0
 801a4f8:	d177      	bne.n	801a5ea <_dtoa_r+0x492>
 801a4fa:	eeb1 7b04 	vmov.f64	d7, #20	; 0x40a00000  5.0
 801a4fe:	ee36 6b47 	vsub.f64	d6, d6, d7
 801a502:	ec41 0b17 	vmov	d7, r0, r1
 801a506:	eeb4 6bc7 	vcmpe.f64	d6, d7
 801a50a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801a50e:	f300 826a 	bgt.w	801a9e6 <_dtoa_r+0x88e>
 801a512:	eeb1 7b47 	vneg.f64	d7, d7
 801a516:	eeb4 6bc7 	vcmpe.f64	d6, d7
 801a51a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801a51e:	f100 8260 	bmi.w	801a9e2 <_dtoa_r+0x88a>
 801a522:	ed8d 8b02 	vstr	d8, [sp, #8]
 801a526:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 801a528:	2a00      	cmp	r2, #0
 801a52a:	f2c0 811d 	blt.w	801a768 <_dtoa_r+0x610>
 801a52e:	f1bb 0f0e 	cmp.w	fp, #14
 801a532:	f300 8119 	bgt.w	801a768 <_dtoa_r+0x610>
 801a536:	4b8a      	ldr	r3, [pc, #552]	; (801a760 <_dtoa_r+0x608>)
 801a538:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 801a53c:	ed93 6b00 	vldr	d6, [r3]
 801a540:	9b08      	ldr	r3, [sp, #32]
 801a542:	2b00      	cmp	r3, #0
 801a544:	f280 80b7 	bge.w	801a6b6 <_dtoa_r+0x55e>
 801a548:	f1b9 0f00 	cmp.w	r9, #0
 801a54c:	f300 80b3 	bgt.w	801a6b6 <_dtoa_r+0x55e>
 801a550:	f040 8246 	bne.w	801a9e0 <_dtoa_r+0x888>
 801a554:	eeb1 7b04 	vmov.f64	d7, #20	; 0x40a00000  5.0
 801a558:	ee26 6b07 	vmul.f64	d6, d6, d7
 801a55c:	ed9d 7b02 	vldr	d7, [sp, #8]
 801a560:	eeb4 6bc7 	vcmpe.f64	d6, d7
 801a564:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801a568:	464c      	mov	r4, r9
 801a56a:	464f      	mov	r7, r9
 801a56c:	f280 821c 	bge.w	801a9a8 <_dtoa_r+0x850>
 801a570:	f8dd 8004 	ldr.w	r8, [sp, #4]
 801a574:	2331      	movs	r3, #49	; 0x31
 801a576:	f808 3b01 	strb.w	r3, [r8], #1
 801a57a:	f10b 0b01 	add.w	fp, fp, #1
 801a57e:	e218      	b.n	801a9b2 <_dtoa_r+0x85a>
 801a580:	2102      	movs	r1, #2
 801a582:	e780      	b.n	801a486 <_dtoa_r+0x32e>
 801a584:	07d4      	lsls	r4, r2, #31
 801a586:	d504      	bpl.n	801a592 <_dtoa_r+0x43a>
 801a588:	ed90 6b00 	vldr	d6, [r0]
 801a58c:	3101      	adds	r1, #1
 801a58e:	ee27 7b06 	vmul.f64	d7, d7, d6
 801a592:	1052      	asrs	r2, r2, #1
 801a594:	3008      	adds	r0, #8
 801a596:	e777      	b.n	801a488 <_dtoa_r+0x330>
 801a598:	d022      	beq.n	801a5e0 <_dtoa_r+0x488>
 801a59a:	f1cb 0200 	rsb	r2, fp, #0
 801a59e:	4970      	ldr	r1, [pc, #448]	; (801a760 <_dtoa_r+0x608>)
 801a5a0:	f002 000f 	and.w	r0, r2, #15
 801a5a4:	eb01 01c0 	add.w	r1, r1, r0, lsl #3
 801a5a8:	ed91 7b00 	vldr	d7, [r1]
 801a5ac:	ee28 7b07 	vmul.f64	d7, d8, d7
 801a5b0:	ed8d 7b02 	vstr	d7, [sp, #8]
 801a5b4:	486b      	ldr	r0, [pc, #428]	; (801a764 <_dtoa_r+0x60c>)
 801a5b6:	1112      	asrs	r2, r2, #4
 801a5b8:	2400      	movs	r4, #0
 801a5ba:	2102      	movs	r1, #2
 801a5bc:	b92a      	cbnz	r2, 801a5ca <_dtoa_r+0x472>
 801a5be:	2c00      	cmp	r4, #0
 801a5c0:	f43f af6a 	beq.w	801a498 <_dtoa_r+0x340>
 801a5c4:	ed8d 7b02 	vstr	d7, [sp, #8]
 801a5c8:	e766      	b.n	801a498 <_dtoa_r+0x340>
 801a5ca:	07d7      	lsls	r7, r2, #31
 801a5cc:	d505      	bpl.n	801a5da <_dtoa_r+0x482>
 801a5ce:	ed90 6b00 	vldr	d6, [r0]
 801a5d2:	3101      	adds	r1, #1
 801a5d4:	2401      	movs	r4, #1
 801a5d6:	ee27 7b06 	vmul.f64	d7, d7, d6
 801a5da:	1052      	asrs	r2, r2, #1
 801a5dc:	3008      	adds	r0, #8
 801a5de:	e7ed      	b.n	801a5bc <_dtoa_r+0x464>
 801a5e0:	2102      	movs	r1, #2
 801a5e2:	e759      	b.n	801a498 <_dtoa_r+0x340>
 801a5e4:	465a      	mov	r2, fp
 801a5e6:	464c      	mov	r4, r9
 801a5e8:	e775      	b.n	801a4d6 <_dtoa_r+0x37e>
 801a5ea:	ec41 0b17 	vmov	d7, r0, r1
 801a5ee:	495c      	ldr	r1, [pc, #368]	; (801a760 <_dtoa_r+0x608>)
 801a5f0:	eb01 01c4 	add.w	r1, r1, r4, lsl #3
 801a5f4:	ed11 4b02 	vldr	d4, [r1, #-8]
 801a5f8:	9901      	ldr	r1, [sp, #4]
 801a5fa:	440c      	add	r4, r1
 801a5fc:	9907      	ldr	r1, [sp, #28]
 801a5fe:	b351      	cbz	r1, 801a656 <_dtoa_r+0x4fe>
 801a600:	eeb6 3b00 	vmov.f64	d3, #96	; 0x3f000000  0.5
 801a604:	eeb7 2b00 	vmov.f64	d2, #112	; 0x3f800000  1.0
 801a608:	f8dd 8004 	ldr.w	r8, [sp, #4]
 801a60c:	ee83 5b04 	vdiv.f64	d5, d3, d4
 801a610:	eeb2 3b04 	vmov.f64	d3, #36	; 0x41200000  10.0
 801a614:	ee35 7b47 	vsub.f64	d7, d5, d7
 801a618:	eefd 4bc6 	vcvt.s32.f64	s9, d6
 801a61c:	ee14 1a90 	vmov	r1, s9
 801a620:	eeb8 5be4 	vcvt.f64.s32	d5, s9
 801a624:	3130      	adds	r1, #48	; 0x30
 801a626:	ee36 6b45 	vsub.f64	d6, d6, d5
 801a62a:	eeb4 6bc7 	vcmpe.f64	d6, d7
 801a62e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801a632:	f808 1b01 	strb.w	r1, [r8], #1
 801a636:	d439      	bmi.n	801a6ac <_dtoa_r+0x554>
 801a638:	ee32 5b46 	vsub.f64	d5, d2, d6
 801a63c:	eeb4 5bc7 	vcmpe.f64	d5, d7
 801a640:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801a644:	d472      	bmi.n	801a72c <_dtoa_r+0x5d4>
 801a646:	45a0      	cmp	r8, r4
 801a648:	f43f af6b 	beq.w	801a522 <_dtoa_r+0x3ca>
 801a64c:	ee27 7b03 	vmul.f64	d7, d7, d3
 801a650:	ee26 6b03 	vmul.f64	d6, d6, d3
 801a654:	e7e0      	b.n	801a618 <_dtoa_r+0x4c0>
 801a656:	f8dd 8004 	ldr.w	r8, [sp, #4]
 801a65a:	ee27 7b04 	vmul.f64	d7, d7, d4
 801a65e:	4620      	mov	r0, r4
 801a660:	eeb2 3b04 	vmov.f64	d3, #36	; 0x41200000  10.0
 801a664:	eefd 4bc6 	vcvt.s32.f64	s9, d6
 801a668:	ee14 1a90 	vmov	r1, s9
 801a66c:	3130      	adds	r1, #48	; 0x30
 801a66e:	f808 1b01 	strb.w	r1, [r8], #1
 801a672:	45a0      	cmp	r8, r4
 801a674:	eeb8 5be4 	vcvt.f64.s32	d5, s9
 801a678:	ee36 6b45 	vsub.f64	d6, d6, d5
 801a67c:	d118      	bne.n	801a6b0 <_dtoa_r+0x558>
 801a67e:	eeb6 5b00 	vmov.f64	d5, #96	; 0x3f000000  0.5
 801a682:	ee37 4b05 	vadd.f64	d4, d7, d5
 801a686:	eeb4 6bc4 	vcmpe.f64	d6, d4
 801a68a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801a68e:	dc4d      	bgt.n	801a72c <_dtoa_r+0x5d4>
 801a690:	ee35 5b47 	vsub.f64	d5, d5, d7
 801a694:	eeb4 6bc5 	vcmpe.f64	d6, d5
 801a698:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801a69c:	f57f af41 	bpl.w	801a522 <_dtoa_r+0x3ca>
 801a6a0:	4680      	mov	r8, r0
 801a6a2:	3801      	subs	r0, #1
 801a6a4:	f818 3c01 	ldrb.w	r3, [r8, #-1]
 801a6a8:	2b30      	cmp	r3, #48	; 0x30
 801a6aa:	d0f9      	beq.n	801a6a0 <_dtoa_r+0x548>
 801a6ac:	4693      	mov	fp, r2
 801a6ae:	e02a      	b.n	801a706 <_dtoa_r+0x5ae>
 801a6b0:	ee26 6b03 	vmul.f64	d6, d6, d3
 801a6b4:	e7d6      	b.n	801a664 <_dtoa_r+0x50c>
 801a6b6:	ed9d 7b02 	vldr	d7, [sp, #8]
 801a6ba:	eeb2 4b04 	vmov.f64	d4, #36	; 0x41200000  10.0
 801a6be:	f8dd 8004 	ldr.w	r8, [sp, #4]
 801a6c2:	ee87 5b06 	vdiv.f64	d5, d7, d6
 801a6c6:	eebd 5bc5 	vcvt.s32.f64	s10, d5
 801a6ca:	ee15 3a10 	vmov	r3, s10
 801a6ce:	3330      	adds	r3, #48	; 0x30
 801a6d0:	f808 3b01 	strb.w	r3, [r8], #1
 801a6d4:	9b01      	ldr	r3, [sp, #4]
 801a6d6:	eba8 0303 	sub.w	r3, r8, r3
 801a6da:	4599      	cmp	r9, r3
 801a6dc:	eeb8 3bc5 	vcvt.f64.s32	d3, s10
 801a6e0:	eea3 7b46 	vfms.f64	d7, d3, d6
 801a6e4:	d133      	bne.n	801a74e <_dtoa_r+0x5f6>
 801a6e6:	ee37 7b07 	vadd.f64	d7, d7, d7
 801a6ea:	eeb4 7bc6 	vcmpe.f64	d7, d6
 801a6ee:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801a6f2:	dc1a      	bgt.n	801a72a <_dtoa_r+0x5d2>
 801a6f4:	eeb4 7b46 	vcmp.f64	d7, d6
 801a6f8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801a6fc:	d103      	bne.n	801a706 <_dtoa_r+0x5ae>
 801a6fe:	ee15 3a10 	vmov	r3, s10
 801a702:	07d9      	lsls	r1, r3, #31
 801a704:	d411      	bmi.n	801a72a <_dtoa_r+0x5d2>
 801a706:	4629      	mov	r1, r5
 801a708:	4630      	mov	r0, r6
 801a70a:	f000 fbd1 	bl	801aeb0 <_Bfree>
 801a70e:	2300      	movs	r3, #0
 801a710:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 801a712:	f888 3000 	strb.w	r3, [r8]
 801a716:	f10b 0301 	add.w	r3, fp, #1
 801a71a:	6013      	str	r3, [r2, #0]
 801a71c:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 801a71e:	2b00      	cmp	r3, #0
 801a720:	f43f ad69 	beq.w	801a1f6 <_dtoa_r+0x9e>
 801a724:	f8c3 8000 	str.w	r8, [r3]
 801a728:	e565      	b.n	801a1f6 <_dtoa_r+0x9e>
 801a72a:	465a      	mov	r2, fp
 801a72c:	4643      	mov	r3, r8
 801a72e:	4698      	mov	r8, r3
 801a730:	f813 1d01 	ldrb.w	r1, [r3, #-1]!
 801a734:	2939      	cmp	r1, #57	; 0x39
 801a736:	d106      	bne.n	801a746 <_dtoa_r+0x5ee>
 801a738:	9901      	ldr	r1, [sp, #4]
 801a73a:	4299      	cmp	r1, r3
 801a73c:	d1f7      	bne.n	801a72e <_dtoa_r+0x5d6>
 801a73e:	9801      	ldr	r0, [sp, #4]
 801a740:	2130      	movs	r1, #48	; 0x30
 801a742:	3201      	adds	r2, #1
 801a744:	7001      	strb	r1, [r0, #0]
 801a746:	7819      	ldrb	r1, [r3, #0]
 801a748:	3101      	adds	r1, #1
 801a74a:	7019      	strb	r1, [r3, #0]
 801a74c:	e7ae      	b.n	801a6ac <_dtoa_r+0x554>
 801a74e:	ee27 7b04 	vmul.f64	d7, d7, d4
 801a752:	eeb5 7b40 	vcmp.f64	d7, #0.0
 801a756:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801a75a:	d1b2      	bne.n	801a6c2 <_dtoa_r+0x56a>
 801a75c:	e7d3      	b.n	801a706 <_dtoa_r+0x5ae>
 801a75e:	bf00      	nop
 801a760:	0801f328 	.word	0x0801f328
 801a764:	0801f300 	.word	0x0801f300
 801a768:	9907      	ldr	r1, [sp, #28]
 801a76a:	2900      	cmp	r1, #0
 801a76c:	f000 80d0 	beq.w	801a910 <_dtoa_r+0x7b8>
 801a770:	9906      	ldr	r1, [sp, #24]
 801a772:	2901      	cmp	r1, #1
 801a774:	f300 80b4 	bgt.w	801a8e0 <_dtoa_r+0x788>
 801a778:	9909      	ldr	r1, [sp, #36]	; 0x24
 801a77a:	2900      	cmp	r1, #0
 801a77c:	f000 80ac 	beq.w	801a8d8 <_dtoa_r+0x780>
 801a780:	f202 4233 	addw	r2, r2, #1075	; 0x433
 801a784:	f8dd 8010 	ldr.w	r8, [sp, #16]
 801a788:	461c      	mov	r4, r3
 801a78a:	9309      	str	r3, [sp, #36]	; 0x24
 801a78c:	9b04      	ldr	r3, [sp, #16]
 801a78e:	4413      	add	r3, r2
 801a790:	9304      	str	r3, [sp, #16]
 801a792:	9b05      	ldr	r3, [sp, #20]
 801a794:	2101      	movs	r1, #1
 801a796:	4413      	add	r3, r2
 801a798:	4630      	mov	r0, r6
 801a79a:	9305      	str	r3, [sp, #20]
 801a79c:	f000 fc3e 	bl	801b01c <__i2b>
 801a7a0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801a7a2:	4607      	mov	r7, r0
 801a7a4:	f1b8 0f00 	cmp.w	r8, #0
 801a7a8:	d00d      	beq.n	801a7c6 <_dtoa_r+0x66e>
 801a7aa:	9a05      	ldr	r2, [sp, #20]
 801a7ac:	2a00      	cmp	r2, #0
 801a7ae:	dd0a      	ble.n	801a7c6 <_dtoa_r+0x66e>
 801a7b0:	4542      	cmp	r2, r8
 801a7b2:	9904      	ldr	r1, [sp, #16]
 801a7b4:	bfa8      	it	ge
 801a7b6:	4642      	movge	r2, r8
 801a7b8:	1a89      	subs	r1, r1, r2
 801a7ba:	9104      	str	r1, [sp, #16]
 801a7bc:	9905      	ldr	r1, [sp, #20]
 801a7be:	eba8 0802 	sub.w	r8, r8, r2
 801a7c2:	1a8a      	subs	r2, r1, r2
 801a7c4:	9205      	str	r2, [sp, #20]
 801a7c6:	b303      	cbz	r3, 801a80a <_dtoa_r+0x6b2>
 801a7c8:	9a07      	ldr	r2, [sp, #28]
 801a7ca:	2a00      	cmp	r2, #0
 801a7cc:	f000 80a5 	beq.w	801a91a <_dtoa_r+0x7c2>
 801a7d0:	2c00      	cmp	r4, #0
 801a7d2:	dd13      	ble.n	801a7fc <_dtoa_r+0x6a4>
 801a7d4:	4639      	mov	r1, r7
 801a7d6:	4622      	mov	r2, r4
 801a7d8:	4630      	mov	r0, r6
 801a7da:	930d      	str	r3, [sp, #52]	; 0x34
 801a7dc:	f000 fcde 	bl	801b19c <__pow5mult>
 801a7e0:	462a      	mov	r2, r5
 801a7e2:	4601      	mov	r1, r0
 801a7e4:	4607      	mov	r7, r0
 801a7e6:	4630      	mov	r0, r6
 801a7e8:	f000 fc2e 	bl	801b048 <__multiply>
 801a7ec:	4629      	mov	r1, r5
 801a7ee:	9009      	str	r0, [sp, #36]	; 0x24
 801a7f0:	4630      	mov	r0, r6
 801a7f2:	f000 fb5d 	bl	801aeb0 <_Bfree>
 801a7f6:	9a09      	ldr	r2, [sp, #36]	; 0x24
 801a7f8:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 801a7fa:	4615      	mov	r5, r2
 801a7fc:	1b1a      	subs	r2, r3, r4
 801a7fe:	d004      	beq.n	801a80a <_dtoa_r+0x6b2>
 801a800:	4629      	mov	r1, r5
 801a802:	4630      	mov	r0, r6
 801a804:	f000 fcca 	bl	801b19c <__pow5mult>
 801a808:	4605      	mov	r5, r0
 801a80a:	2101      	movs	r1, #1
 801a80c:	4630      	mov	r0, r6
 801a80e:	f000 fc05 	bl	801b01c <__i2b>
 801a812:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801a814:	2b00      	cmp	r3, #0
 801a816:	4604      	mov	r4, r0
 801a818:	f340 8081 	ble.w	801a91e <_dtoa_r+0x7c6>
 801a81c:	461a      	mov	r2, r3
 801a81e:	4601      	mov	r1, r0
 801a820:	4630      	mov	r0, r6
 801a822:	f000 fcbb 	bl	801b19c <__pow5mult>
 801a826:	9b06      	ldr	r3, [sp, #24]
 801a828:	2b01      	cmp	r3, #1
 801a82a:	4604      	mov	r4, r0
 801a82c:	dd7a      	ble.n	801a924 <_dtoa_r+0x7cc>
 801a82e:	2300      	movs	r3, #0
 801a830:	9309      	str	r3, [sp, #36]	; 0x24
 801a832:	6922      	ldr	r2, [r4, #16]
 801a834:	eb04 0282 	add.w	r2, r4, r2, lsl #2
 801a838:	6910      	ldr	r0, [r2, #16]
 801a83a:	f000 fba1 	bl	801af80 <__hi0bits>
 801a83e:	f1c0 0020 	rsb	r0, r0, #32
 801a842:	9b05      	ldr	r3, [sp, #20]
 801a844:	4418      	add	r0, r3
 801a846:	f010 001f 	ands.w	r0, r0, #31
 801a84a:	f000 8093 	beq.w	801a974 <_dtoa_r+0x81c>
 801a84e:	f1c0 0220 	rsb	r2, r0, #32
 801a852:	2a04      	cmp	r2, #4
 801a854:	f340 8085 	ble.w	801a962 <_dtoa_r+0x80a>
 801a858:	9b04      	ldr	r3, [sp, #16]
 801a85a:	f1c0 001c 	rsb	r0, r0, #28
 801a85e:	4403      	add	r3, r0
 801a860:	9304      	str	r3, [sp, #16]
 801a862:	9b05      	ldr	r3, [sp, #20]
 801a864:	4480      	add	r8, r0
 801a866:	4403      	add	r3, r0
 801a868:	9305      	str	r3, [sp, #20]
 801a86a:	9b04      	ldr	r3, [sp, #16]
 801a86c:	2b00      	cmp	r3, #0
 801a86e:	dd05      	ble.n	801a87c <_dtoa_r+0x724>
 801a870:	4629      	mov	r1, r5
 801a872:	461a      	mov	r2, r3
 801a874:	4630      	mov	r0, r6
 801a876:	f000 fceb 	bl	801b250 <__lshift>
 801a87a:	4605      	mov	r5, r0
 801a87c:	9b05      	ldr	r3, [sp, #20]
 801a87e:	2b00      	cmp	r3, #0
 801a880:	dd05      	ble.n	801a88e <_dtoa_r+0x736>
 801a882:	4621      	mov	r1, r4
 801a884:	461a      	mov	r2, r3
 801a886:	4630      	mov	r0, r6
 801a888:	f000 fce2 	bl	801b250 <__lshift>
 801a88c:	4604      	mov	r4, r0
 801a88e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 801a890:	2b00      	cmp	r3, #0
 801a892:	d071      	beq.n	801a978 <_dtoa_r+0x820>
 801a894:	4621      	mov	r1, r4
 801a896:	4628      	mov	r0, r5
 801a898:	f000 fd46 	bl	801b328 <__mcmp>
 801a89c:	2800      	cmp	r0, #0
 801a89e:	da6b      	bge.n	801a978 <_dtoa_r+0x820>
 801a8a0:	2300      	movs	r3, #0
 801a8a2:	4629      	mov	r1, r5
 801a8a4:	220a      	movs	r2, #10
 801a8a6:	4630      	mov	r0, r6
 801a8a8:	f000 fb24 	bl	801aef4 <__multadd>
 801a8ac:	9b07      	ldr	r3, [sp, #28]
 801a8ae:	f10b 3bff 	add.w	fp, fp, #4294967295
 801a8b2:	4605      	mov	r5, r0
 801a8b4:	2b00      	cmp	r3, #0
 801a8b6:	f000 8197 	beq.w	801abe8 <_dtoa_r+0xa90>
 801a8ba:	4639      	mov	r1, r7
 801a8bc:	2300      	movs	r3, #0
 801a8be:	220a      	movs	r2, #10
 801a8c0:	4630      	mov	r0, r6
 801a8c2:	f000 fb17 	bl	801aef4 <__multadd>
 801a8c6:	f1ba 0f00 	cmp.w	sl, #0
 801a8ca:	4607      	mov	r7, r0
 801a8cc:	f300 8093 	bgt.w	801a9f6 <_dtoa_r+0x89e>
 801a8d0:	9b06      	ldr	r3, [sp, #24]
 801a8d2:	2b02      	cmp	r3, #2
 801a8d4:	dc57      	bgt.n	801a986 <_dtoa_r+0x82e>
 801a8d6:	e08e      	b.n	801a9f6 <_dtoa_r+0x89e>
 801a8d8:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 801a8da:	f1c2 0236 	rsb	r2, r2, #54	; 0x36
 801a8de:	e751      	b.n	801a784 <_dtoa_r+0x62c>
 801a8e0:	f109 34ff 	add.w	r4, r9, #4294967295
 801a8e4:	42a3      	cmp	r3, r4
 801a8e6:	bfbf      	itttt	lt
 801a8e8:	1ae2      	sublt	r2, r4, r3
 801a8ea:	9b0a      	ldrlt	r3, [sp, #40]	; 0x28
 801a8ec:	189b      	addlt	r3, r3, r2
 801a8ee:	930a      	strlt	r3, [sp, #40]	; 0x28
 801a8f0:	bfae      	itee	ge
 801a8f2:	1b1c      	subge	r4, r3, r4
 801a8f4:	4623      	movlt	r3, r4
 801a8f6:	2400      	movlt	r4, #0
 801a8f8:	f1b9 0f00 	cmp.w	r9, #0
 801a8fc:	bfb5      	itete	lt
 801a8fe:	9a04      	ldrlt	r2, [sp, #16]
 801a900:	f8dd 8010 	ldrge.w	r8, [sp, #16]
 801a904:	eba2 0809 	sublt.w	r8, r2, r9
 801a908:	464a      	movge	r2, r9
 801a90a:	bfb8      	it	lt
 801a90c:	2200      	movlt	r2, #0
 801a90e:	e73c      	b.n	801a78a <_dtoa_r+0x632>
 801a910:	f8dd 8010 	ldr.w	r8, [sp, #16]
 801a914:	9f07      	ldr	r7, [sp, #28]
 801a916:	461c      	mov	r4, r3
 801a918:	e744      	b.n	801a7a4 <_dtoa_r+0x64c>
 801a91a:	461a      	mov	r2, r3
 801a91c:	e770      	b.n	801a800 <_dtoa_r+0x6a8>
 801a91e:	9b06      	ldr	r3, [sp, #24]
 801a920:	2b01      	cmp	r3, #1
 801a922:	dc18      	bgt.n	801a956 <_dtoa_r+0x7fe>
 801a924:	9b02      	ldr	r3, [sp, #8]
 801a926:	b9b3      	cbnz	r3, 801a956 <_dtoa_r+0x7fe>
 801a928:	9b03      	ldr	r3, [sp, #12]
 801a92a:	f3c3 0213 	ubfx	r2, r3, #0, #20
 801a92e:	b9a2      	cbnz	r2, 801a95a <_dtoa_r+0x802>
 801a930:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 801a934:	0d12      	lsrs	r2, r2, #20
 801a936:	0512      	lsls	r2, r2, #20
 801a938:	b18a      	cbz	r2, 801a95e <_dtoa_r+0x806>
 801a93a:	9b04      	ldr	r3, [sp, #16]
 801a93c:	3301      	adds	r3, #1
 801a93e:	9304      	str	r3, [sp, #16]
 801a940:	9b05      	ldr	r3, [sp, #20]
 801a942:	3301      	adds	r3, #1
 801a944:	9305      	str	r3, [sp, #20]
 801a946:	2301      	movs	r3, #1
 801a948:	9309      	str	r3, [sp, #36]	; 0x24
 801a94a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801a94c:	2b00      	cmp	r3, #0
 801a94e:	f47f af70 	bne.w	801a832 <_dtoa_r+0x6da>
 801a952:	2001      	movs	r0, #1
 801a954:	e775      	b.n	801a842 <_dtoa_r+0x6ea>
 801a956:	2300      	movs	r3, #0
 801a958:	e7f6      	b.n	801a948 <_dtoa_r+0x7f0>
 801a95a:	9b02      	ldr	r3, [sp, #8]
 801a95c:	e7f4      	b.n	801a948 <_dtoa_r+0x7f0>
 801a95e:	9209      	str	r2, [sp, #36]	; 0x24
 801a960:	e7f3      	b.n	801a94a <_dtoa_r+0x7f2>
 801a962:	d082      	beq.n	801a86a <_dtoa_r+0x712>
 801a964:	9b04      	ldr	r3, [sp, #16]
 801a966:	321c      	adds	r2, #28
 801a968:	4413      	add	r3, r2
 801a96a:	9304      	str	r3, [sp, #16]
 801a96c:	9b05      	ldr	r3, [sp, #20]
 801a96e:	4490      	add	r8, r2
 801a970:	4413      	add	r3, r2
 801a972:	e779      	b.n	801a868 <_dtoa_r+0x710>
 801a974:	4602      	mov	r2, r0
 801a976:	e7f5      	b.n	801a964 <_dtoa_r+0x80c>
 801a978:	f1b9 0f00 	cmp.w	r9, #0
 801a97c:	dc36      	bgt.n	801a9ec <_dtoa_r+0x894>
 801a97e:	9b06      	ldr	r3, [sp, #24]
 801a980:	2b02      	cmp	r3, #2
 801a982:	dd33      	ble.n	801a9ec <_dtoa_r+0x894>
 801a984:	46ca      	mov	sl, r9
 801a986:	f1ba 0f00 	cmp.w	sl, #0
 801a98a:	d10d      	bne.n	801a9a8 <_dtoa_r+0x850>
 801a98c:	4621      	mov	r1, r4
 801a98e:	4653      	mov	r3, sl
 801a990:	2205      	movs	r2, #5
 801a992:	4630      	mov	r0, r6
 801a994:	f000 faae 	bl	801aef4 <__multadd>
 801a998:	4601      	mov	r1, r0
 801a99a:	4604      	mov	r4, r0
 801a99c:	4628      	mov	r0, r5
 801a99e:	f000 fcc3 	bl	801b328 <__mcmp>
 801a9a2:	2800      	cmp	r0, #0
 801a9a4:	f73f ade4 	bgt.w	801a570 <_dtoa_r+0x418>
 801a9a8:	9b08      	ldr	r3, [sp, #32]
 801a9aa:	f8dd 8004 	ldr.w	r8, [sp, #4]
 801a9ae:	ea6f 0b03 	mvn.w	fp, r3
 801a9b2:	f04f 0900 	mov.w	r9, #0
 801a9b6:	4621      	mov	r1, r4
 801a9b8:	4630      	mov	r0, r6
 801a9ba:	f000 fa79 	bl	801aeb0 <_Bfree>
 801a9be:	2f00      	cmp	r7, #0
 801a9c0:	f43f aea1 	beq.w	801a706 <_dtoa_r+0x5ae>
 801a9c4:	f1b9 0f00 	cmp.w	r9, #0
 801a9c8:	d005      	beq.n	801a9d6 <_dtoa_r+0x87e>
 801a9ca:	45b9      	cmp	r9, r7
 801a9cc:	d003      	beq.n	801a9d6 <_dtoa_r+0x87e>
 801a9ce:	4649      	mov	r1, r9
 801a9d0:	4630      	mov	r0, r6
 801a9d2:	f000 fa6d 	bl	801aeb0 <_Bfree>
 801a9d6:	4639      	mov	r1, r7
 801a9d8:	4630      	mov	r0, r6
 801a9da:	f000 fa69 	bl	801aeb0 <_Bfree>
 801a9de:	e692      	b.n	801a706 <_dtoa_r+0x5ae>
 801a9e0:	2400      	movs	r4, #0
 801a9e2:	4627      	mov	r7, r4
 801a9e4:	e7e0      	b.n	801a9a8 <_dtoa_r+0x850>
 801a9e6:	4693      	mov	fp, r2
 801a9e8:	4627      	mov	r7, r4
 801a9ea:	e5c1      	b.n	801a570 <_dtoa_r+0x418>
 801a9ec:	9b07      	ldr	r3, [sp, #28]
 801a9ee:	46ca      	mov	sl, r9
 801a9f0:	2b00      	cmp	r3, #0
 801a9f2:	f000 8100 	beq.w	801abf6 <_dtoa_r+0xa9e>
 801a9f6:	f1b8 0f00 	cmp.w	r8, #0
 801a9fa:	dd05      	ble.n	801aa08 <_dtoa_r+0x8b0>
 801a9fc:	4639      	mov	r1, r7
 801a9fe:	4642      	mov	r2, r8
 801aa00:	4630      	mov	r0, r6
 801aa02:	f000 fc25 	bl	801b250 <__lshift>
 801aa06:	4607      	mov	r7, r0
 801aa08:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801aa0a:	2b00      	cmp	r3, #0
 801aa0c:	d05d      	beq.n	801aaca <_dtoa_r+0x972>
 801aa0e:	6879      	ldr	r1, [r7, #4]
 801aa10:	4630      	mov	r0, r6
 801aa12:	f000 fa0d 	bl	801ae30 <_Balloc>
 801aa16:	4680      	mov	r8, r0
 801aa18:	b928      	cbnz	r0, 801aa26 <_dtoa_r+0x8ce>
 801aa1a:	4b82      	ldr	r3, [pc, #520]	; (801ac24 <_dtoa_r+0xacc>)
 801aa1c:	4602      	mov	r2, r0
 801aa1e:	f240 21ef 	movw	r1, #751	; 0x2ef
 801aa22:	f7ff bbb1 	b.w	801a188 <_dtoa_r+0x30>
 801aa26:	693a      	ldr	r2, [r7, #16]
 801aa28:	3202      	adds	r2, #2
 801aa2a:	0092      	lsls	r2, r2, #2
 801aa2c:	f107 010c 	add.w	r1, r7, #12
 801aa30:	300c      	adds	r0, #12
 801aa32:	f7ff fadc 	bl	8019fee <memcpy>
 801aa36:	2201      	movs	r2, #1
 801aa38:	4641      	mov	r1, r8
 801aa3a:	4630      	mov	r0, r6
 801aa3c:	f000 fc08 	bl	801b250 <__lshift>
 801aa40:	9b01      	ldr	r3, [sp, #4]
 801aa42:	3301      	adds	r3, #1
 801aa44:	9304      	str	r3, [sp, #16]
 801aa46:	9b01      	ldr	r3, [sp, #4]
 801aa48:	4453      	add	r3, sl
 801aa4a:	9308      	str	r3, [sp, #32]
 801aa4c:	9b02      	ldr	r3, [sp, #8]
 801aa4e:	f003 0301 	and.w	r3, r3, #1
 801aa52:	46b9      	mov	r9, r7
 801aa54:	9307      	str	r3, [sp, #28]
 801aa56:	4607      	mov	r7, r0
 801aa58:	9b04      	ldr	r3, [sp, #16]
 801aa5a:	4621      	mov	r1, r4
 801aa5c:	3b01      	subs	r3, #1
 801aa5e:	4628      	mov	r0, r5
 801aa60:	9302      	str	r3, [sp, #8]
 801aa62:	f7ff faf1 	bl	801a048 <quorem>
 801aa66:	4603      	mov	r3, r0
 801aa68:	3330      	adds	r3, #48	; 0x30
 801aa6a:	9005      	str	r0, [sp, #20]
 801aa6c:	4649      	mov	r1, r9
 801aa6e:	4628      	mov	r0, r5
 801aa70:	9309      	str	r3, [sp, #36]	; 0x24
 801aa72:	f000 fc59 	bl	801b328 <__mcmp>
 801aa76:	463a      	mov	r2, r7
 801aa78:	4682      	mov	sl, r0
 801aa7a:	4621      	mov	r1, r4
 801aa7c:	4630      	mov	r0, r6
 801aa7e:	f000 fc6f 	bl	801b360 <__mdiff>
 801aa82:	68c2      	ldr	r2, [r0, #12]
 801aa84:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801aa86:	4680      	mov	r8, r0
 801aa88:	bb0a      	cbnz	r2, 801aace <_dtoa_r+0x976>
 801aa8a:	4601      	mov	r1, r0
 801aa8c:	4628      	mov	r0, r5
 801aa8e:	f000 fc4b 	bl	801b328 <__mcmp>
 801aa92:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801aa94:	4602      	mov	r2, r0
 801aa96:	4641      	mov	r1, r8
 801aa98:	4630      	mov	r0, r6
 801aa9a:	e9cd 3209 	strd	r3, r2, [sp, #36]	; 0x24
 801aa9e:	f000 fa07 	bl	801aeb0 <_Bfree>
 801aaa2:	9b06      	ldr	r3, [sp, #24]
 801aaa4:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 801aaa6:	f8dd 8010 	ldr.w	r8, [sp, #16]
 801aaaa:	ea43 0102 	orr.w	r1, r3, r2
 801aaae:	9b07      	ldr	r3, [sp, #28]
 801aab0:	4319      	orrs	r1, r3
 801aab2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801aab4:	d10d      	bne.n	801aad2 <_dtoa_r+0x97a>
 801aab6:	2b39      	cmp	r3, #57	; 0x39
 801aab8:	d029      	beq.n	801ab0e <_dtoa_r+0x9b6>
 801aaba:	f1ba 0f00 	cmp.w	sl, #0
 801aabe:	dd01      	ble.n	801aac4 <_dtoa_r+0x96c>
 801aac0:	9b05      	ldr	r3, [sp, #20]
 801aac2:	3331      	adds	r3, #49	; 0x31
 801aac4:	9a02      	ldr	r2, [sp, #8]
 801aac6:	7013      	strb	r3, [r2, #0]
 801aac8:	e775      	b.n	801a9b6 <_dtoa_r+0x85e>
 801aaca:	4638      	mov	r0, r7
 801aacc:	e7b8      	b.n	801aa40 <_dtoa_r+0x8e8>
 801aace:	2201      	movs	r2, #1
 801aad0:	e7e1      	b.n	801aa96 <_dtoa_r+0x93e>
 801aad2:	f1ba 0f00 	cmp.w	sl, #0
 801aad6:	db06      	blt.n	801aae6 <_dtoa_r+0x98e>
 801aad8:	9906      	ldr	r1, [sp, #24]
 801aada:	ea41 0a0a 	orr.w	sl, r1, sl
 801aade:	9907      	ldr	r1, [sp, #28]
 801aae0:	ea5a 0a01 	orrs.w	sl, sl, r1
 801aae4:	d120      	bne.n	801ab28 <_dtoa_r+0x9d0>
 801aae6:	2a00      	cmp	r2, #0
 801aae8:	ddec      	ble.n	801aac4 <_dtoa_r+0x96c>
 801aaea:	4629      	mov	r1, r5
 801aaec:	2201      	movs	r2, #1
 801aaee:	4630      	mov	r0, r6
 801aaf0:	9304      	str	r3, [sp, #16]
 801aaf2:	f000 fbad 	bl	801b250 <__lshift>
 801aaf6:	4621      	mov	r1, r4
 801aaf8:	4605      	mov	r5, r0
 801aafa:	f000 fc15 	bl	801b328 <__mcmp>
 801aafe:	2800      	cmp	r0, #0
 801ab00:	9b04      	ldr	r3, [sp, #16]
 801ab02:	dc02      	bgt.n	801ab0a <_dtoa_r+0x9b2>
 801ab04:	d1de      	bne.n	801aac4 <_dtoa_r+0x96c>
 801ab06:	07da      	lsls	r2, r3, #31
 801ab08:	d5dc      	bpl.n	801aac4 <_dtoa_r+0x96c>
 801ab0a:	2b39      	cmp	r3, #57	; 0x39
 801ab0c:	d1d8      	bne.n	801aac0 <_dtoa_r+0x968>
 801ab0e:	9a02      	ldr	r2, [sp, #8]
 801ab10:	2339      	movs	r3, #57	; 0x39
 801ab12:	7013      	strb	r3, [r2, #0]
 801ab14:	4643      	mov	r3, r8
 801ab16:	4698      	mov	r8, r3
 801ab18:	3b01      	subs	r3, #1
 801ab1a:	f818 2c01 	ldrb.w	r2, [r8, #-1]
 801ab1e:	2a39      	cmp	r2, #57	; 0x39
 801ab20:	d051      	beq.n	801abc6 <_dtoa_r+0xa6e>
 801ab22:	3201      	adds	r2, #1
 801ab24:	701a      	strb	r2, [r3, #0]
 801ab26:	e746      	b.n	801a9b6 <_dtoa_r+0x85e>
 801ab28:	2a00      	cmp	r2, #0
 801ab2a:	dd03      	ble.n	801ab34 <_dtoa_r+0x9dc>
 801ab2c:	2b39      	cmp	r3, #57	; 0x39
 801ab2e:	d0ee      	beq.n	801ab0e <_dtoa_r+0x9b6>
 801ab30:	3301      	adds	r3, #1
 801ab32:	e7c7      	b.n	801aac4 <_dtoa_r+0x96c>
 801ab34:	9a04      	ldr	r2, [sp, #16]
 801ab36:	9908      	ldr	r1, [sp, #32]
 801ab38:	f802 3c01 	strb.w	r3, [r2, #-1]
 801ab3c:	428a      	cmp	r2, r1
 801ab3e:	d02b      	beq.n	801ab98 <_dtoa_r+0xa40>
 801ab40:	4629      	mov	r1, r5
 801ab42:	2300      	movs	r3, #0
 801ab44:	220a      	movs	r2, #10
 801ab46:	4630      	mov	r0, r6
 801ab48:	f000 f9d4 	bl	801aef4 <__multadd>
 801ab4c:	45b9      	cmp	r9, r7
 801ab4e:	4605      	mov	r5, r0
 801ab50:	f04f 0300 	mov.w	r3, #0
 801ab54:	f04f 020a 	mov.w	r2, #10
 801ab58:	4649      	mov	r1, r9
 801ab5a:	4630      	mov	r0, r6
 801ab5c:	d107      	bne.n	801ab6e <_dtoa_r+0xa16>
 801ab5e:	f000 f9c9 	bl	801aef4 <__multadd>
 801ab62:	4681      	mov	r9, r0
 801ab64:	4607      	mov	r7, r0
 801ab66:	9b04      	ldr	r3, [sp, #16]
 801ab68:	3301      	adds	r3, #1
 801ab6a:	9304      	str	r3, [sp, #16]
 801ab6c:	e774      	b.n	801aa58 <_dtoa_r+0x900>
 801ab6e:	f000 f9c1 	bl	801aef4 <__multadd>
 801ab72:	4639      	mov	r1, r7
 801ab74:	4681      	mov	r9, r0
 801ab76:	2300      	movs	r3, #0
 801ab78:	220a      	movs	r2, #10
 801ab7a:	4630      	mov	r0, r6
 801ab7c:	f000 f9ba 	bl	801aef4 <__multadd>
 801ab80:	4607      	mov	r7, r0
 801ab82:	e7f0      	b.n	801ab66 <_dtoa_r+0xa0e>
 801ab84:	f1ba 0f00 	cmp.w	sl, #0
 801ab88:	9a01      	ldr	r2, [sp, #4]
 801ab8a:	bfcc      	ite	gt
 801ab8c:	46d0      	movgt	r8, sl
 801ab8e:	f04f 0801 	movle.w	r8, #1
 801ab92:	4490      	add	r8, r2
 801ab94:	f04f 0900 	mov.w	r9, #0
 801ab98:	4629      	mov	r1, r5
 801ab9a:	2201      	movs	r2, #1
 801ab9c:	4630      	mov	r0, r6
 801ab9e:	9302      	str	r3, [sp, #8]
 801aba0:	f000 fb56 	bl	801b250 <__lshift>
 801aba4:	4621      	mov	r1, r4
 801aba6:	4605      	mov	r5, r0
 801aba8:	f000 fbbe 	bl	801b328 <__mcmp>
 801abac:	2800      	cmp	r0, #0
 801abae:	dcb1      	bgt.n	801ab14 <_dtoa_r+0x9bc>
 801abb0:	d102      	bne.n	801abb8 <_dtoa_r+0xa60>
 801abb2:	9b02      	ldr	r3, [sp, #8]
 801abb4:	07db      	lsls	r3, r3, #31
 801abb6:	d4ad      	bmi.n	801ab14 <_dtoa_r+0x9bc>
 801abb8:	4643      	mov	r3, r8
 801abba:	4698      	mov	r8, r3
 801abbc:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 801abc0:	2a30      	cmp	r2, #48	; 0x30
 801abc2:	d0fa      	beq.n	801abba <_dtoa_r+0xa62>
 801abc4:	e6f7      	b.n	801a9b6 <_dtoa_r+0x85e>
 801abc6:	9a01      	ldr	r2, [sp, #4]
 801abc8:	429a      	cmp	r2, r3
 801abca:	d1a4      	bne.n	801ab16 <_dtoa_r+0x9be>
 801abcc:	f10b 0b01 	add.w	fp, fp, #1
 801abd0:	2331      	movs	r3, #49	; 0x31
 801abd2:	e778      	b.n	801aac6 <_dtoa_r+0x96e>
 801abd4:	4b14      	ldr	r3, [pc, #80]	; (801ac28 <_dtoa_r+0xad0>)
 801abd6:	f7ff bb2a 	b.w	801a22e <_dtoa_r+0xd6>
 801abda:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 801abdc:	2b00      	cmp	r3, #0
 801abde:	f47f ab05 	bne.w	801a1ec <_dtoa_r+0x94>
 801abe2:	4b12      	ldr	r3, [pc, #72]	; (801ac2c <_dtoa_r+0xad4>)
 801abe4:	f7ff bb23 	b.w	801a22e <_dtoa_r+0xd6>
 801abe8:	f1ba 0f00 	cmp.w	sl, #0
 801abec:	dc03      	bgt.n	801abf6 <_dtoa_r+0xa9e>
 801abee:	9b06      	ldr	r3, [sp, #24]
 801abf0:	2b02      	cmp	r3, #2
 801abf2:	f73f aec8 	bgt.w	801a986 <_dtoa_r+0x82e>
 801abf6:	f8dd 8004 	ldr.w	r8, [sp, #4]
 801abfa:	4621      	mov	r1, r4
 801abfc:	4628      	mov	r0, r5
 801abfe:	f7ff fa23 	bl	801a048 <quorem>
 801ac02:	f100 0330 	add.w	r3, r0, #48	; 0x30
 801ac06:	f808 3b01 	strb.w	r3, [r8], #1
 801ac0a:	9a01      	ldr	r2, [sp, #4]
 801ac0c:	eba8 0202 	sub.w	r2, r8, r2
 801ac10:	4592      	cmp	sl, r2
 801ac12:	ddb7      	ble.n	801ab84 <_dtoa_r+0xa2c>
 801ac14:	4629      	mov	r1, r5
 801ac16:	2300      	movs	r3, #0
 801ac18:	220a      	movs	r2, #10
 801ac1a:	4630      	mov	r0, r6
 801ac1c:	f000 f96a 	bl	801aef4 <__multadd>
 801ac20:	4605      	mov	r5, r0
 801ac22:	e7ea      	b.n	801abfa <_dtoa_r+0xaa2>
 801ac24:	0801f293 	.word	0x0801f293
 801ac28:	0801f1ce 	.word	0x0801f1ce
 801ac2c:	0801f22e 	.word	0x0801f22e

0801ac30 <_free_r>:
 801ac30:	b537      	push	{r0, r1, r2, r4, r5, lr}
 801ac32:	2900      	cmp	r1, #0
 801ac34:	d044      	beq.n	801acc0 <_free_r+0x90>
 801ac36:	f851 3c04 	ldr.w	r3, [r1, #-4]
 801ac3a:	9001      	str	r0, [sp, #4]
 801ac3c:	2b00      	cmp	r3, #0
 801ac3e:	f1a1 0404 	sub.w	r4, r1, #4
 801ac42:	bfb8      	it	lt
 801ac44:	18e4      	addlt	r4, r4, r3
 801ac46:	f000 f8e7 	bl	801ae18 <__malloc_lock>
 801ac4a:	4a1e      	ldr	r2, [pc, #120]	; (801acc4 <_free_r+0x94>)
 801ac4c:	9801      	ldr	r0, [sp, #4]
 801ac4e:	6813      	ldr	r3, [r2, #0]
 801ac50:	b933      	cbnz	r3, 801ac60 <_free_r+0x30>
 801ac52:	6063      	str	r3, [r4, #4]
 801ac54:	6014      	str	r4, [r2, #0]
 801ac56:	b003      	add	sp, #12
 801ac58:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 801ac5c:	f000 b8e2 	b.w	801ae24 <__malloc_unlock>
 801ac60:	42a3      	cmp	r3, r4
 801ac62:	d908      	bls.n	801ac76 <_free_r+0x46>
 801ac64:	6825      	ldr	r5, [r4, #0]
 801ac66:	1961      	adds	r1, r4, r5
 801ac68:	428b      	cmp	r3, r1
 801ac6a:	bf01      	itttt	eq
 801ac6c:	6819      	ldreq	r1, [r3, #0]
 801ac6e:	685b      	ldreq	r3, [r3, #4]
 801ac70:	1949      	addeq	r1, r1, r5
 801ac72:	6021      	streq	r1, [r4, #0]
 801ac74:	e7ed      	b.n	801ac52 <_free_r+0x22>
 801ac76:	461a      	mov	r2, r3
 801ac78:	685b      	ldr	r3, [r3, #4]
 801ac7a:	b10b      	cbz	r3, 801ac80 <_free_r+0x50>
 801ac7c:	42a3      	cmp	r3, r4
 801ac7e:	d9fa      	bls.n	801ac76 <_free_r+0x46>
 801ac80:	6811      	ldr	r1, [r2, #0]
 801ac82:	1855      	adds	r5, r2, r1
 801ac84:	42a5      	cmp	r5, r4
 801ac86:	d10b      	bne.n	801aca0 <_free_r+0x70>
 801ac88:	6824      	ldr	r4, [r4, #0]
 801ac8a:	4421      	add	r1, r4
 801ac8c:	1854      	adds	r4, r2, r1
 801ac8e:	42a3      	cmp	r3, r4
 801ac90:	6011      	str	r1, [r2, #0]
 801ac92:	d1e0      	bne.n	801ac56 <_free_r+0x26>
 801ac94:	681c      	ldr	r4, [r3, #0]
 801ac96:	685b      	ldr	r3, [r3, #4]
 801ac98:	6053      	str	r3, [r2, #4]
 801ac9a:	440c      	add	r4, r1
 801ac9c:	6014      	str	r4, [r2, #0]
 801ac9e:	e7da      	b.n	801ac56 <_free_r+0x26>
 801aca0:	d902      	bls.n	801aca8 <_free_r+0x78>
 801aca2:	230c      	movs	r3, #12
 801aca4:	6003      	str	r3, [r0, #0]
 801aca6:	e7d6      	b.n	801ac56 <_free_r+0x26>
 801aca8:	6825      	ldr	r5, [r4, #0]
 801acaa:	1961      	adds	r1, r4, r5
 801acac:	428b      	cmp	r3, r1
 801acae:	bf04      	itt	eq
 801acb0:	6819      	ldreq	r1, [r3, #0]
 801acb2:	685b      	ldreq	r3, [r3, #4]
 801acb4:	6063      	str	r3, [r4, #4]
 801acb6:	bf04      	itt	eq
 801acb8:	1949      	addeq	r1, r1, r5
 801acba:	6021      	streq	r1, [r4, #0]
 801acbc:	6054      	str	r4, [r2, #4]
 801acbe:	e7ca      	b.n	801ac56 <_free_r+0x26>
 801acc0:	b003      	add	sp, #12
 801acc2:	bd30      	pop	{r4, r5, pc}
 801acc4:	20007378 	.word	0x20007378

0801acc8 <malloc>:
 801acc8:	4b02      	ldr	r3, [pc, #8]	; (801acd4 <malloc+0xc>)
 801acca:	4601      	mov	r1, r0
 801accc:	6818      	ldr	r0, [r3, #0]
 801acce:	f000 b823 	b.w	801ad18 <_malloc_r>
 801acd2:	bf00      	nop
 801acd4:	200000bc 	.word	0x200000bc

0801acd8 <sbrk_aligned>:
 801acd8:	b570      	push	{r4, r5, r6, lr}
 801acda:	4e0e      	ldr	r6, [pc, #56]	; (801ad14 <sbrk_aligned+0x3c>)
 801acdc:	460c      	mov	r4, r1
 801acde:	6831      	ldr	r1, [r6, #0]
 801ace0:	4605      	mov	r5, r0
 801ace2:	b911      	cbnz	r1, 801acea <sbrk_aligned+0x12>
 801ace4:	f000 fea8 	bl	801ba38 <_sbrk_r>
 801ace8:	6030      	str	r0, [r6, #0]
 801acea:	4621      	mov	r1, r4
 801acec:	4628      	mov	r0, r5
 801acee:	f000 fea3 	bl	801ba38 <_sbrk_r>
 801acf2:	1c43      	adds	r3, r0, #1
 801acf4:	d00a      	beq.n	801ad0c <sbrk_aligned+0x34>
 801acf6:	1cc4      	adds	r4, r0, #3
 801acf8:	f024 0403 	bic.w	r4, r4, #3
 801acfc:	42a0      	cmp	r0, r4
 801acfe:	d007      	beq.n	801ad10 <sbrk_aligned+0x38>
 801ad00:	1a21      	subs	r1, r4, r0
 801ad02:	4628      	mov	r0, r5
 801ad04:	f000 fe98 	bl	801ba38 <_sbrk_r>
 801ad08:	3001      	adds	r0, #1
 801ad0a:	d101      	bne.n	801ad10 <sbrk_aligned+0x38>
 801ad0c:	f04f 34ff 	mov.w	r4, #4294967295
 801ad10:	4620      	mov	r0, r4
 801ad12:	bd70      	pop	{r4, r5, r6, pc}
 801ad14:	2000737c 	.word	0x2000737c

0801ad18 <_malloc_r>:
 801ad18:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 801ad1c:	1ccd      	adds	r5, r1, #3
 801ad1e:	f025 0503 	bic.w	r5, r5, #3
 801ad22:	3508      	adds	r5, #8
 801ad24:	2d0c      	cmp	r5, #12
 801ad26:	bf38      	it	cc
 801ad28:	250c      	movcc	r5, #12
 801ad2a:	2d00      	cmp	r5, #0
 801ad2c:	4607      	mov	r7, r0
 801ad2e:	db01      	blt.n	801ad34 <_malloc_r+0x1c>
 801ad30:	42a9      	cmp	r1, r5
 801ad32:	d905      	bls.n	801ad40 <_malloc_r+0x28>
 801ad34:	230c      	movs	r3, #12
 801ad36:	603b      	str	r3, [r7, #0]
 801ad38:	2600      	movs	r6, #0
 801ad3a:	4630      	mov	r0, r6
 801ad3c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801ad40:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 801ae14 <_malloc_r+0xfc>
 801ad44:	f000 f868 	bl	801ae18 <__malloc_lock>
 801ad48:	f8d8 3000 	ldr.w	r3, [r8]
 801ad4c:	461c      	mov	r4, r3
 801ad4e:	bb5c      	cbnz	r4, 801ada8 <_malloc_r+0x90>
 801ad50:	4629      	mov	r1, r5
 801ad52:	4638      	mov	r0, r7
 801ad54:	f7ff ffc0 	bl	801acd8 <sbrk_aligned>
 801ad58:	1c43      	adds	r3, r0, #1
 801ad5a:	4604      	mov	r4, r0
 801ad5c:	d155      	bne.n	801ae0a <_malloc_r+0xf2>
 801ad5e:	f8d8 4000 	ldr.w	r4, [r8]
 801ad62:	4626      	mov	r6, r4
 801ad64:	2e00      	cmp	r6, #0
 801ad66:	d145      	bne.n	801adf4 <_malloc_r+0xdc>
 801ad68:	2c00      	cmp	r4, #0
 801ad6a:	d048      	beq.n	801adfe <_malloc_r+0xe6>
 801ad6c:	6823      	ldr	r3, [r4, #0]
 801ad6e:	4631      	mov	r1, r6
 801ad70:	4638      	mov	r0, r7
 801ad72:	eb04 0903 	add.w	r9, r4, r3
 801ad76:	f000 fe5f 	bl	801ba38 <_sbrk_r>
 801ad7a:	4581      	cmp	r9, r0
 801ad7c:	d13f      	bne.n	801adfe <_malloc_r+0xe6>
 801ad7e:	6821      	ldr	r1, [r4, #0]
 801ad80:	1a6d      	subs	r5, r5, r1
 801ad82:	4629      	mov	r1, r5
 801ad84:	4638      	mov	r0, r7
 801ad86:	f7ff ffa7 	bl	801acd8 <sbrk_aligned>
 801ad8a:	3001      	adds	r0, #1
 801ad8c:	d037      	beq.n	801adfe <_malloc_r+0xe6>
 801ad8e:	6823      	ldr	r3, [r4, #0]
 801ad90:	442b      	add	r3, r5
 801ad92:	6023      	str	r3, [r4, #0]
 801ad94:	f8d8 3000 	ldr.w	r3, [r8]
 801ad98:	2b00      	cmp	r3, #0
 801ad9a:	d038      	beq.n	801ae0e <_malloc_r+0xf6>
 801ad9c:	685a      	ldr	r2, [r3, #4]
 801ad9e:	42a2      	cmp	r2, r4
 801ada0:	d12b      	bne.n	801adfa <_malloc_r+0xe2>
 801ada2:	2200      	movs	r2, #0
 801ada4:	605a      	str	r2, [r3, #4]
 801ada6:	e00f      	b.n	801adc8 <_malloc_r+0xb0>
 801ada8:	6822      	ldr	r2, [r4, #0]
 801adaa:	1b52      	subs	r2, r2, r5
 801adac:	d41f      	bmi.n	801adee <_malloc_r+0xd6>
 801adae:	2a0b      	cmp	r2, #11
 801adb0:	d917      	bls.n	801ade2 <_malloc_r+0xca>
 801adb2:	1961      	adds	r1, r4, r5
 801adb4:	42a3      	cmp	r3, r4
 801adb6:	6025      	str	r5, [r4, #0]
 801adb8:	bf18      	it	ne
 801adba:	6059      	strne	r1, [r3, #4]
 801adbc:	6863      	ldr	r3, [r4, #4]
 801adbe:	bf08      	it	eq
 801adc0:	f8c8 1000 	streq.w	r1, [r8]
 801adc4:	5162      	str	r2, [r4, r5]
 801adc6:	604b      	str	r3, [r1, #4]
 801adc8:	4638      	mov	r0, r7
 801adca:	f104 060b 	add.w	r6, r4, #11
 801adce:	f000 f829 	bl	801ae24 <__malloc_unlock>
 801add2:	f026 0607 	bic.w	r6, r6, #7
 801add6:	1d23      	adds	r3, r4, #4
 801add8:	1af2      	subs	r2, r6, r3
 801adda:	d0ae      	beq.n	801ad3a <_malloc_r+0x22>
 801addc:	1b9b      	subs	r3, r3, r6
 801adde:	50a3      	str	r3, [r4, r2]
 801ade0:	e7ab      	b.n	801ad3a <_malloc_r+0x22>
 801ade2:	42a3      	cmp	r3, r4
 801ade4:	6862      	ldr	r2, [r4, #4]
 801ade6:	d1dd      	bne.n	801ada4 <_malloc_r+0x8c>
 801ade8:	f8c8 2000 	str.w	r2, [r8]
 801adec:	e7ec      	b.n	801adc8 <_malloc_r+0xb0>
 801adee:	4623      	mov	r3, r4
 801adf0:	6864      	ldr	r4, [r4, #4]
 801adf2:	e7ac      	b.n	801ad4e <_malloc_r+0x36>
 801adf4:	4634      	mov	r4, r6
 801adf6:	6876      	ldr	r6, [r6, #4]
 801adf8:	e7b4      	b.n	801ad64 <_malloc_r+0x4c>
 801adfa:	4613      	mov	r3, r2
 801adfc:	e7cc      	b.n	801ad98 <_malloc_r+0x80>
 801adfe:	230c      	movs	r3, #12
 801ae00:	603b      	str	r3, [r7, #0]
 801ae02:	4638      	mov	r0, r7
 801ae04:	f000 f80e 	bl	801ae24 <__malloc_unlock>
 801ae08:	e797      	b.n	801ad3a <_malloc_r+0x22>
 801ae0a:	6025      	str	r5, [r4, #0]
 801ae0c:	e7dc      	b.n	801adc8 <_malloc_r+0xb0>
 801ae0e:	605b      	str	r3, [r3, #4]
 801ae10:	deff      	udf	#255	; 0xff
 801ae12:	bf00      	nop
 801ae14:	20007378 	.word	0x20007378

0801ae18 <__malloc_lock>:
 801ae18:	4801      	ldr	r0, [pc, #4]	; (801ae20 <__malloc_lock+0x8>)
 801ae1a:	f7ff b8e6 	b.w	8019fea <__retarget_lock_acquire_recursive>
 801ae1e:	bf00      	nop
 801ae20:	20007374 	.word	0x20007374

0801ae24 <__malloc_unlock>:
 801ae24:	4801      	ldr	r0, [pc, #4]	; (801ae2c <__malloc_unlock+0x8>)
 801ae26:	f7ff b8e1 	b.w	8019fec <__retarget_lock_release_recursive>
 801ae2a:	bf00      	nop
 801ae2c:	20007374 	.word	0x20007374

0801ae30 <_Balloc>:
 801ae30:	b570      	push	{r4, r5, r6, lr}
 801ae32:	69c6      	ldr	r6, [r0, #28]
 801ae34:	4604      	mov	r4, r0
 801ae36:	460d      	mov	r5, r1
 801ae38:	b976      	cbnz	r6, 801ae58 <_Balloc+0x28>
 801ae3a:	2010      	movs	r0, #16
 801ae3c:	f7ff ff44 	bl	801acc8 <malloc>
 801ae40:	4602      	mov	r2, r0
 801ae42:	61e0      	str	r0, [r4, #28]
 801ae44:	b920      	cbnz	r0, 801ae50 <_Balloc+0x20>
 801ae46:	4b18      	ldr	r3, [pc, #96]	; (801aea8 <_Balloc+0x78>)
 801ae48:	4818      	ldr	r0, [pc, #96]	; (801aeac <_Balloc+0x7c>)
 801ae4a:	216b      	movs	r1, #107	; 0x6b
 801ae4c:	f7ff f8de 	bl	801a00c <__assert_func>
 801ae50:	e9c0 6601 	strd	r6, r6, [r0, #4]
 801ae54:	6006      	str	r6, [r0, #0]
 801ae56:	60c6      	str	r6, [r0, #12]
 801ae58:	69e6      	ldr	r6, [r4, #28]
 801ae5a:	68f3      	ldr	r3, [r6, #12]
 801ae5c:	b183      	cbz	r3, 801ae80 <_Balloc+0x50>
 801ae5e:	69e3      	ldr	r3, [r4, #28]
 801ae60:	68db      	ldr	r3, [r3, #12]
 801ae62:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 801ae66:	b9b8      	cbnz	r0, 801ae98 <_Balloc+0x68>
 801ae68:	2101      	movs	r1, #1
 801ae6a:	fa01 f605 	lsl.w	r6, r1, r5
 801ae6e:	1d72      	adds	r2, r6, #5
 801ae70:	0092      	lsls	r2, r2, #2
 801ae72:	4620      	mov	r0, r4
 801ae74:	f000 fdf7 	bl	801ba66 <_calloc_r>
 801ae78:	b160      	cbz	r0, 801ae94 <_Balloc+0x64>
 801ae7a:	e9c0 5601 	strd	r5, r6, [r0, #4]
 801ae7e:	e00e      	b.n	801ae9e <_Balloc+0x6e>
 801ae80:	2221      	movs	r2, #33	; 0x21
 801ae82:	2104      	movs	r1, #4
 801ae84:	4620      	mov	r0, r4
 801ae86:	f000 fdee 	bl	801ba66 <_calloc_r>
 801ae8a:	69e3      	ldr	r3, [r4, #28]
 801ae8c:	60f0      	str	r0, [r6, #12]
 801ae8e:	68db      	ldr	r3, [r3, #12]
 801ae90:	2b00      	cmp	r3, #0
 801ae92:	d1e4      	bne.n	801ae5e <_Balloc+0x2e>
 801ae94:	2000      	movs	r0, #0
 801ae96:	bd70      	pop	{r4, r5, r6, pc}
 801ae98:	6802      	ldr	r2, [r0, #0]
 801ae9a:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 801ae9e:	2300      	movs	r3, #0
 801aea0:	e9c0 3303 	strd	r3, r3, [r0, #12]
 801aea4:	e7f7      	b.n	801ae96 <_Balloc+0x66>
 801aea6:	bf00      	nop
 801aea8:	0801f04e 	.word	0x0801f04e
 801aeac:	0801f2a4 	.word	0x0801f2a4

0801aeb0 <_Bfree>:
 801aeb0:	b570      	push	{r4, r5, r6, lr}
 801aeb2:	69c6      	ldr	r6, [r0, #28]
 801aeb4:	4605      	mov	r5, r0
 801aeb6:	460c      	mov	r4, r1
 801aeb8:	b976      	cbnz	r6, 801aed8 <_Bfree+0x28>
 801aeba:	2010      	movs	r0, #16
 801aebc:	f7ff ff04 	bl	801acc8 <malloc>
 801aec0:	4602      	mov	r2, r0
 801aec2:	61e8      	str	r0, [r5, #28]
 801aec4:	b920      	cbnz	r0, 801aed0 <_Bfree+0x20>
 801aec6:	4b09      	ldr	r3, [pc, #36]	; (801aeec <_Bfree+0x3c>)
 801aec8:	4809      	ldr	r0, [pc, #36]	; (801aef0 <_Bfree+0x40>)
 801aeca:	218f      	movs	r1, #143	; 0x8f
 801aecc:	f7ff f89e 	bl	801a00c <__assert_func>
 801aed0:	e9c0 6601 	strd	r6, r6, [r0, #4]
 801aed4:	6006      	str	r6, [r0, #0]
 801aed6:	60c6      	str	r6, [r0, #12]
 801aed8:	b13c      	cbz	r4, 801aeea <_Bfree+0x3a>
 801aeda:	69eb      	ldr	r3, [r5, #28]
 801aedc:	6862      	ldr	r2, [r4, #4]
 801aede:	68db      	ldr	r3, [r3, #12]
 801aee0:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 801aee4:	6021      	str	r1, [r4, #0]
 801aee6:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 801aeea:	bd70      	pop	{r4, r5, r6, pc}
 801aeec:	0801f04e 	.word	0x0801f04e
 801aef0:	0801f2a4 	.word	0x0801f2a4

0801aef4 <__multadd>:
 801aef4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801aef8:	690d      	ldr	r5, [r1, #16]
 801aefa:	4607      	mov	r7, r0
 801aefc:	460c      	mov	r4, r1
 801aefe:	461e      	mov	r6, r3
 801af00:	f101 0c14 	add.w	ip, r1, #20
 801af04:	2000      	movs	r0, #0
 801af06:	f8dc 3000 	ldr.w	r3, [ip]
 801af0a:	b299      	uxth	r1, r3
 801af0c:	fb02 6101 	mla	r1, r2, r1, r6
 801af10:	0c1e      	lsrs	r6, r3, #16
 801af12:	0c0b      	lsrs	r3, r1, #16
 801af14:	fb02 3306 	mla	r3, r2, r6, r3
 801af18:	b289      	uxth	r1, r1
 801af1a:	3001      	adds	r0, #1
 801af1c:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 801af20:	4285      	cmp	r5, r0
 801af22:	f84c 1b04 	str.w	r1, [ip], #4
 801af26:	ea4f 4613 	mov.w	r6, r3, lsr #16
 801af2a:	dcec      	bgt.n	801af06 <__multadd+0x12>
 801af2c:	b30e      	cbz	r6, 801af72 <__multadd+0x7e>
 801af2e:	68a3      	ldr	r3, [r4, #8]
 801af30:	42ab      	cmp	r3, r5
 801af32:	dc19      	bgt.n	801af68 <__multadd+0x74>
 801af34:	6861      	ldr	r1, [r4, #4]
 801af36:	4638      	mov	r0, r7
 801af38:	3101      	adds	r1, #1
 801af3a:	f7ff ff79 	bl	801ae30 <_Balloc>
 801af3e:	4680      	mov	r8, r0
 801af40:	b928      	cbnz	r0, 801af4e <__multadd+0x5a>
 801af42:	4602      	mov	r2, r0
 801af44:	4b0c      	ldr	r3, [pc, #48]	; (801af78 <__multadd+0x84>)
 801af46:	480d      	ldr	r0, [pc, #52]	; (801af7c <__multadd+0x88>)
 801af48:	21ba      	movs	r1, #186	; 0xba
 801af4a:	f7ff f85f 	bl	801a00c <__assert_func>
 801af4e:	6922      	ldr	r2, [r4, #16]
 801af50:	3202      	adds	r2, #2
 801af52:	f104 010c 	add.w	r1, r4, #12
 801af56:	0092      	lsls	r2, r2, #2
 801af58:	300c      	adds	r0, #12
 801af5a:	f7ff f848 	bl	8019fee <memcpy>
 801af5e:	4621      	mov	r1, r4
 801af60:	4638      	mov	r0, r7
 801af62:	f7ff ffa5 	bl	801aeb0 <_Bfree>
 801af66:	4644      	mov	r4, r8
 801af68:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 801af6c:	3501      	adds	r5, #1
 801af6e:	615e      	str	r6, [r3, #20]
 801af70:	6125      	str	r5, [r4, #16]
 801af72:	4620      	mov	r0, r4
 801af74:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801af78:	0801f293 	.word	0x0801f293
 801af7c:	0801f2a4 	.word	0x0801f2a4

0801af80 <__hi0bits>:
 801af80:	0c03      	lsrs	r3, r0, #16
 801af82:	041b      	lsls	r3, r3, #16
 801af84:	b9d3      	cbnz	r3, 801afbc <__hi0bits+0x3c>
 801af86:	0400      	lsls	r0, r0, #16
 801af88:	2310      	movs	r3, #16
 801af8a:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 801af8e:	bf04      	itt	eq
 801af90:	0200      	lsleq	r0, r0, #8
 801af92:	3308      	addeq	r3, #8
 801af94:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 801af98:	bf04      	itt	eq
 801af9a:	0100      	lsleq	r0, r0, #4
 801af9c:	3304      	addeq	r3, #4
 801af9e:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 801afa2:	bf04      	itt	eq
 801afa4:	0080      	lsleq	r0, r0, #2
 801afa6:	3302      	addeq	r3, #2
 801afa8:	2800      	cmp	r0, #0
 801afaa:	db05      	blt.n	801afb8 <__hi0bits+0x38>
 801afac:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 801afb0:	f103 0301 	add.w	r3, r3, #1
 801afb4:	bf08      	it	eq
 801afb6:	2320      	moveq	r3, #32
 801afb8:	4618      	mov	r0, r3
 801afba:	4770      	bx	lr
 801afbc:	2300      	movs	r3, #0
 801afbe:	e7e4      	b.n	801af8a <__hi0bits+0xa>

0801afc0 <__lo0bits>:
 801afc0:	6803      	ldr	r3, [r0, #0]
 801afc2:	f013 0207 	ands.w	r2, r3, #7
 801afc6:	d00c      	beq.n	801afe2 <__lo0bits+0x22>
 801afc8:	07d9      	lsls	r1, r3, #31
 801afca:	d422      	bmi.n	801b012 <__lo0bits+0x52>
 801afcc:	079a      	lsls	r2, r3, #30
 801afce:	bf49      	itett	mi
 801afd0:	085b      	lsrmi	r3, r3, #1
 801afd2:	089b      	lsrpl	r3, r3, #2
 801afd4:	6003      	strmi	r3, [r0, #0]
 801afd6:	2201      	movmi	r2, #1
 801afd8:	bf5c      	itt	pl
 801afda:	6003      	strpl	r3, [r0, #0]
 801afdc:	2202      	movpl	r2, #2
 801afde:	4610      	mov	r0, r2
 801afe0:	4770      	bx	lr
 801afe2:	b299      	uxth	r1, r3
 801afe4:	b909      	cbnz	r1, 801afea <__lo0bits+0x2a>
 801afe6:	0c1b      	lsrs	r3, r3, #16
 801afe8:	2210      	movs	r2, #16
 801afea:	b2d9      	uxtb	r1, r3
 801afec:	b909      	cbnz	r1, 801aff2 <__lo0bits+0x32>
 801afee:	3208      	adds	r2, #8
 801aff0:	0a1b      	lsrs	r3, r3, #8
 801aff2:	0719      	lsls	r1, r3, #28
 801aff4:	bf04      	itt	eq
 801aff6:	091b      	lsreq	r3, r3, #4
 801aff8:	3204      	addeq	r2, #4
 801affa:	0799      	lsls	r1, r3, #30
 801affc:	bf04      	itt	eq
 801affe:	089b      	lsreq	r3, r3, #2
 801b000:	3202      	addeq	r2, #2
 801b002:	07d9      	lsls	r1, r3, #31
 801b004:	d403      	bmi.n	801b00e <__lo0bits+0x4e>
 801b006:	085b      	lsrs	r3, r3, #1
 801b008:	f102 0201 	add.w	r2, r2, #1
 801b00c:	d003      	beq.n	801b016 <__lo0bits+0x56>
 801b00e:	6003      	str	r3, [r0, #0]
 801b010:	e7e5      	b.n	801afde <__lo0bits+0x1e>
 801b012:	2200      	movs	r2, #0
 801b014:	e7e3      	b.n	801afde <__lo0bits+0x1e>
 801b016:	2220      	movs	r2, #32
 801b018:	e7e1      	b.n	801afde <__lo0bits+0x1e>
	...

0801b01c <__i2b>:
 801b01c:	b510      	push	{r4, lr}
 801b01e:	460c      	mov	r4, r1
 801b020:	2101      	movs	r1, #1
 801b022:	f7ff ff05 	bl	801ae30 <_Balloc>
 801b026:	4602      	mov	r2, r0
 801b028:	b928      	cbnz	r0, 801b036 <__i2b+0x1a>
 801b02a:	4b05      	ldr	r3, [pc, #20]	; (801b040 <__i2b+0x24>)
 801b02c:	4805      	ldr	r0, [pc, #20]	; (801b044 <__i2b+0x28>)
 801b02e:	f240 1145 	movw	r1, #325	; 0x145
 801b032:	f7fe ffeb 	bl	801a00c <__assert_func>
 801b036:	2301      	movs	r3, #1
 801b038:	6144      	str	r4, [r0, #20]
 801b03a:	6103      	str	r3, [r0, #16]
 801b03c:	bd10      	pop	{r4, pc}
 801b03e:	bf00      	nop
 801b040:	0801f293 	.word	0x0801f293
 801b044:	0801f2a4 	.word	0x0801f2a4

0801b048 <__multiply>:
 801b048:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801b04c:	4691      	mov	r9, r2
 801b04e:	690a      	ldr	r2, [r1, #16]
 801b050:	f8d9 3010 	ldr.w	r3, [r9, #16]
 801b054:	429a      	cmp	r2, r3
 801b056:	bfb8      	it	lt
 801b058:	460b      	movlt	r3, r1
 801b05a:	460c      	mov	r4, r1
 801b05c:	bfbc      	itt	lt
 801b05e:	464c      	movlt	r4, r9
 801b060:	4699      	movlt	r9, r3
 801b062:	6927      	ldr	r7, [r4, #16]
 801b064:	f8d9 a010 	ldr.w	sl, [r9, #16]
 801b068:	68a3      	ldr	r3, [r4, #8]
 801b06a:	6861      	ldr	r1, [r4, #4]
 801b06c:	eb07 060a 	add.w	r6, r7, sl
 801b070:	42b3      	cmp	r3, r6
 801b072:	b085      	sub	sp, #20
 801b074:	bfb8      	it	lt
 801b076:	3101      	addlt	r1, #1
 801b078:	f7ff feda 	bl	801ae30 <_Balloc>
 801b07c:	b930      	cbnz	r0, 801b08c <__multiply+0x44>
 801b07e:	4602      	mov	r2, r0
 801b080:	4b44      	ldr	r3, [pc, #272]	; (801b194 <__multiply+0x14c>)
 801b082:	4845      	ldr	r0, [pc, #276]	; (801b198 <__multiply+0x150>)
 801b084:	f44f 71b1 	mov.w	r1, #354	; 0x162
 801b088:	f7fe ffc0 	bl	801a00c <__assert_func>
 801b08c:	f100 0514 	add.w	r5, r0, #20
 801b090:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 801b094:	462b      	mov	r3, r5
 801b096:	2200      	movs	r2, #0
 801b098:	4543      	cmp	r3, r8
 801b09a:	d321      	bcc.n	801b0e0 <__multiply+0x98>
 801b09c:	f104 0314 	add.w	r3, r4, #20
 801b0a0:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 801b0a4:	f109 0314 	add.w	r3, r9, #20
 801b0a8:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 801b0ac:	9202      	str	r2, [sp, #8]
 801b0ae:	1b3a      	subs	r2, r7, r4
 801b0b0:	3a15      	subs	r2, #21
 801b0b2:	f022 0203 	bic.w	r2, r2, #3
 801b0b6:	3204      	adds	r2, #4
 801b0b8:	f104 0115 	add.w	r1, r4, #21
 801b0bc:	428f      	cmp	r7, r1
 801b0be:	bf38      	it	cc
 801b0c0:	2204      	movcc	r2, #4
 801b0c2:	9201      	str	r2, [sp, #4]
 801b0c4:	9a02      	ldr	r2, [sp, #8]
 801b0c6:	9303      	str	r3, [sp, #12]
 801b0c8:	429a      	cmp	r2, r3
 801b0ca:	d80c      	bhi.n	801b0e6 <__multiply+0x9e>
 801b0cc:	2e00      	cmp	r6, #0
 801b0ce:	dd03      	ble.n	801b0d8 <__multiply+0x90>
 801b0d0:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 801b0d4:	2b00      	cmp	r3, #0
 801b0d6:	d05b      	beq.n	801b190 <__multiply+0x148>
 801b0d8:	6106      	str	r6, [r0, #16]
 801b0da:	b005      	add	sp, #20
 801b0dc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801b0e0:	f843 2b04 	str.w	r2, [r3], #4
 801b0e4:	e7d8      	b.n	801b098 <__multiply+0x50>
 801b0e6:	f8b3 a000 	ldrh.w	sl, [r3]
 801b0ea:	f1ba 0f00 	cmp.w	sl, #0
 801b0ee:	d024      	beq.n	801b13a <__multiply+0xf2>
 801b0f0:	f104 0e14 	add.w	lr, r4, #20
 801b0f4:	46a9      	mov	r9, r5
 801b0f6:	f04f 0c00 	mov.w	ip, #0
 801b0fa:	f85e 2b04 	ldr.w	r2, [lr], #4
 801b0fe:	f8d9 1000 	ldr.w	r1, [r9]
 801b102:	fa1f fb82 	uxth.w	fp, r2
 801b106:	b289      	uxth	r1, r1
 801b108:	fb0a 110b 	mla	r1, sl, fp, r1
 801b10c:	ea4f 4b12 	mov.w	fp, r2, lsr #16
 801b110:	f8d9 2000 	ldr.w	r2, [r9]
 801b114:	4461      	add	r1, ip
 801b116:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 801b11a:	fb0a c20b 	mla	r2, sl, fp, ip
 801b11e:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 801b122:	b289      	uxth	r1, r1
 801b124:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 801b128:	4577      	cmp	r7, lr
 801b12a:	f849 1b04 	str.w	r1, [r9], #4
 801b12e:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 801b132:	d8e2      	bhi.n	801b0fa <__multiply+0xb2>
 801b134:	9a01      	ldr	r2, [sp, #4]
 801b136:	f845 c002 	str.w	ip, [r5, r2]
 801b13a:	9a03      	ldr	r2, [sp, #12]
 801b13c:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 801b140:	3304      	adds	r3, #4
 801b142:	f1b9 0f00 	cmp.w	r9, #0
 801b146:	d021      	beq.n	801b18c <__multiply+0x144>
 801b148:	6829      	ldr	r1, [r5, #0]
 801b14a:	f104 0c14 	add.w	ip, r4, #20
 801b14e:	46ae      	mov	lr, r5
 801b150:	f04f 0a00 	mov.w	sl, #0
 801b154:	f8bc b000 	ldrh.w	fp, [ip]
 801b158:	f8be 2002 	ldrh.w	r2, [lr, #2]
 801b15c:	fb09 220b 	mla	r2, r9, fp, r2
 801b160:	4452      	add	r2, sl
 801b162:	b289      	uxth	r1, r1
 801b164:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 801b168:	f84e 1b04 	str.w	r1, [lr], #4
 801b16c:	f85c 1b04 	ldr.w	r1, [ip], #4
 801b170:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 801b174:	f8be 1000 	ldrh.w	r1, [lr]
 801b178:	fb09 110a 	mla	r1, r9, sl, r1
 801b17c:	eb01 4112 	add.w	r1, r1, r2, lsr #16
 801b180:	4567      	cmp	r7, ip
 801b182:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 801b186:	d8e5      	bhi.n	801b154 <__multiply+0x10c>
 801b188:	9a01      	ldr	r2, [sp, #4]
 801b18a:	50a9      	str	r1, [r5, r2]
 801b18c:	3504      	adds	r5, #4
 801b18e:	e799      	b.n	801b0c4 <__multiply+0x7c>
 801b190:	3e01      	subs	r6, #1
 801b192:	e79b      	b.n	801b0cc <__multiply+0x84>
 801b194:	0801f293 	.word	0x0801f293
 801b198:	0801f2a4 	.word	0x0801f2a4

0801b19c <__pow5mult>:
 801b19c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 801b1a0:	4615      	mov	r5, r2
 801b1a2:	f012 0203 	ands.w	r2, r2, #3
 801b1a6:	4606      	mov	r6, r0
 801b1a8:	460f      	mov	r7, r1
 801b1aa:	d007      	beq.n	801b1bc <__pow5mult+0x20>
 801b1ac:	4c25      	ldr	r4, [pc, #148]	; (801b244 <__pow5mult+0xa8>)
 801b1ae:	3a01      	subs	r2, #1
 801b1b0:	2300      	movs	r3, #0
 801b1b2:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 801b1b6:	f7ff fe9d 	bl	801aef4 <__multadd>
 801b1ba:	4607      	mov	r7, r0
 801b1bc:	10ad      	asrs	r5, r5, #2
 801b1be:	d03d      	beq.n	801b23c <__pow5mult+0xa0>
 801b1c0:	69f4      	ldr	r4, [r6, #28]
 801b1c2:	b97c      	cbnz	r4, 801b1e4 <__pow5mult+0x48>
 801b1c4:	2010      	movs	r0, #16
 801b1c6:	f7ff fd7f 	bl	801acc8 <malloc>
 801b1ca:	4602      	mov	r2, r0
 801b1cc:	61f0      	str	r0, [r6, #28]
 801b1ce:	b928      	cbnz	r0, 801b1dc <__pow5mult+0x40>
 801b1d0:	4b1d      	ldr	r3, [pc, #116]	; (801b248 <__pow5mult+0xac>)
 801b1d2:	481e      	ldr	r0, [pc, #120]	; (801b24c <__pow5mult+0xb0>)
 801b1d4:	f240 11b3 	movw	r1, #435	; 0x1b3
 801b1d8:	f7fe ff18 	bl	801a00c <__assert_func>
 801b1dc:	e9c0 4401 	strd	r4, r4, [r0, #4]
 801b1e0:	6004      	str	r4, [r0, #0]
 801b1e2:	60c4      	str	r4, [r0, #12]
 801b1e4:	f8d6 801c 	ldr.w	r8, [r6, #28]
 801b1e8:	f8d8 4008 	ldr.w	r4, [r8, #8]
 801b1ec:	b94c      	cbnz	r4, 801b202 <__pow5mult+0x66>
 801b1ee:	f240 2171 	movw	r1, #625	; 0x271
 801b1f2:	4630      	mov	r0, r6
 801b1f4:	f7ff ff12 	bl	801b01c <__i2b>
 801b1f8:	2300      	movs	r3, #0
 801b1fa:	f8c8 0008 	str.w	r0, [r8, #8]
 801b1fe:	4604      	mov	r4, r0
 801b200:	6003      	str	r3, [r0, #0]
 801b202:	f04f 0900 	mov.w	r9, #0
 801b206:	07eb      	lsls	r3, r5, #31
 801b208:	d50a      	bpl.n	801b220 <__pow5mult+0x84>
 801b20a:	4639      	mov	r1, r7
 801b20c:	4622      	mov	r2, r4
 801b20e:	4630      	mov	r0, r6
 801b210:	f7ff ff1a 	bl	801b048 <__multiply>
 801b214:	4639      	mov	r1, r7
 801b216:	4680      	mov	r8, r0
 801b218:	4630      	mov	r0, r6
 801b21a:	f7ff fe49 	bl	801aeb0 <_Bfree>
 801b21e:	4647      	mov	r7, r8
 801b220:	106d      	asrs	r5, r5, #1
 801b222:	d00b      	beq.n	801b23c <__pow5mult+0xa0>
 801b224:	6820      	ldr	r0, [r4, #0]
 801b226:	b938      	cbnz	r0, 801b238 <__pow5mult+0x9c>
 801b228:	4622      	mov	r2, r4
 801b22a:	4621      	mov	r1, r4
 801b22c:	4630      	mov	r0, r6
 801b22e:	f7ff ff0b 	bl	801b048 <__multiply>
 801b232:	6020      	str	r0, [r4, #0]
 801b234:	f8c0 9000 	str.w	r9, [r0]
 801b238:	4604      	mov	r4, r0
 801b23a:	e7e4      	b.n	801b206 <__pow5mult+0x6a>
 801b23c:	4638      	mov	r0, r7
 801b23e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801b242:	bf00      	nop
 801b244:	0801f3f0 	.word	0x0801f3f0
 801b248:	0801f04e 	.word	0x0801f04e
 801b24c:	0801f2a4 	.word	0x0801f2a4

0801b250 <__lshift>:
 801b250:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801b254:	460c      	mov	r4, r1
 801b256:	6849      	ldr	r1, [r1, #4]
 801b258:	6923      	ldr	r3, [r4, #16]
 801b25a:	eb03 1862 	add.w	r8, r3, r2, asr #5
 801b25e:	68a3      	ldr	r3, [r4, #8]
 801b260:	4607      	mov	r7, r0
 801b262:	4691      	mov	r9, r2
 801b264:	ea4f 1a62 	mov.w	sl, r2, asr #5
 801b268:	f108 0601 	add.w	r6, r8, #1
 801b26c:	42b3      	cmp	r3, r6
 801b26e:	db0b      	blt.n	801b288 <__lshift+0x38>
 801b270:	4638      	mov	r0, r7
 801b272:	f7ff fddd 	bl	801ae30 <_Balloc>
 801b276:	4605      	mov	r5, r0
 801b278:	b948      	cbnz	r0, 801b28e <__lshift+0x3e>
 801b27a:	4602      	mov	r2, r0
 801b27c:	4b28      	ldr	r3, [pc, #160]	; (801b320 <__lshift+0xd0>)
 801b27e:	4829      	ldr	r0, [pc, #164]	; (801b324 <__lshift+0xd4>)
 801b280:	f44f 71ef 	mov.w	r1, #478	; 0x1de
 801b284:	f7fe fec2 	bl	801a00c <__assert_func>
 801b288:	3101      	adds	r1, #1
 801b28a:	005b      	lsls	r3, r3, #1
 801b28c:	e7ee      	b.n	801b26c <__lshift+0x1c>
 801b28e:	2300      	movs	r3, #0
 801b290:	f100 0114 	add.w	r1, r0, #20
 801b294:	f100 0210 	add.w	r2, r0, #16
 801b298:	4618      	mov	r0, r3
 801b29a:	4553      	cmp	r3, sl
 801b29c:	db33      	blt.n	801b306 <__lshift+0xb6>
 801b29e:	6920      	ldr	r0, [r4, #16]
 801b2a0:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 801b2a4:	f104 0314 	add.w	r3, r4, #20
 801b2a8:	f019 091f 	ands.w	r9, r9, #31
 801b2ac:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 801b2b0:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 801b2b4:	d02b      	beq.n	801b30e <__lshift+0xbe>
 801b2b6:	f1c9 0e20 	rsb	lr, r9, #32
 801b2ba:	468a      	mov	sl, r1
 801b2bc:	2200      	movs	r2, #0
 801b2be:	6818      	ldr	r0, [r3, #0]
 801b2c0:	fa00 f009 	lsl.w	r0, r0, r9
 801b2c4:	4310      	orrs	r0, r2
 801b2c6:	f84a 0b04 	str.w	r0, [sl], #4
 801b2ca:	f853 2b04 	ldr.w	r2, [r3], #4
 801b2ce:	459c      	cmp	ip, r3
 801b2d0:	fa22 f20e 	lsr.w	r2, r2, lr
 801b2d4:	d8f3      	bhi.n	801b2be <__lshift+0x6e>
 801b2d6:	ebac 0304 	sub.w	r3, ip, r4
 801b2da:	3b15      	subs	r3, #21
 801b2dc:	f023 0303 	bic.w	r3, r3, #3
 801b2e0:	3304      	adds	r3, #4
 801b2e2:	f104 0015 	add.w	r0, r4, #21
 801b2e6:	4584      	cmp	ip, r0
 801b2e8:	bf38      	it	cc
 801b2ea:	2304      	movcc	r3, #4
 801b2ec:	50ca      	str	r2, [r1, r3]
 801b2ee:	b10a      	cbz	r2, 801b2f4 <__lshift+0xa4>
 801b2f0:	f108 0602 	add.w	r6, r8, #2
 801b2f4:	3e01      	subs	r6, #1
 801b2f6:	4638      	mov	r0, r7
 801b2f8:	612e      	str	r6, [r5, #16]
 801b2fa:	4621      	mov	r1, r4
 801b2fc:	f7ff fdd8 	bl	801aeb0 <_Bfree>
 801b300:	4628      	mov	r0, r5
 801b302:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801b306:	f842 0f04 	str.w	r0, [r2, #4]!
 801b30a:	3301      	adds	r3, #1
 801b30c:	e7c5      	b.n	801b29a <__lshift+0x4a>
 801b30e:	3904      	subs	r1, #4
 801b310:	f853 2b04 	ldr.w	r2, [r3], #4
 801b314:	f841 2f04 	str.w	r2, [r1, #4]!
 801b318:	459c      	cmp	ip, r3
 801b31a:	d8f9      	bhi.n	801b310 <__lshift+0xc0>
 801b31c:	e7ea      	b.n	801b2f4 <__lshift+0xa4>
 801b31e:	bf00      	nop
 801b320:	0801f293 	.word	0x0801f293
 801b324:	0801f2a4 	.word	0x0801f2a4

0801b328 <__mcmp>:
 801b328:	b530      	push	{r4, r5, lr}
 801b32a:	6902      	ldr	r2, [r0, #16]
 801b32c:	690c      	ldr	r4, [r1, #16]
 801b32e:	1b12      	subs	r2, r2, r4
 801b330:	d10e      	bne.n	801b350 <__mcmp+0x28>
 801b332:	f100 0314 	add.w	r3, r0, #20
 801b336:	3114      	adds	r1, #20
 801b338:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 801b33c:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 801b340:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 801b344:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 801b348:	42a5      	cmp	r5, r4
 801b34a:	d003      	beq.n	801b354 <__mcmp+0x2c>
 801b34c:	d305      	bcc.n	801b35a <__mcmp+0x32>
 801b34e:	2201      	movs	r2, #1
 801b350:	4610      	mov	r0, r2
 801b352:	bd30      	pop	{r4, r5, pc}
 801b354:	4283      	cmp	r3, r0
 801b356:	d3f3      	bcc.n	801b340 <__mcmp+0x18>
 801b358:	e7fa      	b.n	801b350 <__mcmp+0x28>
 801b35a:	f04f 32ff 	mov.w	r2, #4294967295
 801b35e:	e7f7      	b.n	801b350 <__mcmp+0x28>

0801b360 <__mdiff>:
 801b360:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801b364:	460c      	mov	r4, r1
 801b366:	4606      	mov	r6, r0
 801b368:	4611      	mov	r1, r2
 801b36a:	4620      	mov	r0, r4
 801b36c:	4690      	mov	r8, r2
 801b36e:	f7ff ffdb 	bl	801b328 <__mcmp>
 801b372:	1e05      	subs	r5, r0, #0
 801b374:	d110      	bne.n	801b398 <__mdiff+0x38>
 801b376:	4629      	mov	r1, r5
 801b378:	4630      	mov	r0, r6
 801b37a:	f7ff fd59 	bl	801ae30 <_Balloc>
 801b37e:	b930      	cbnz	r0, 801b38e <__mdiff+0x2e>
 801b380:	4b3a      	ldr	r3, [pc, #232]	; (801b46c <__mdiff+0x10c>)
 801b382:	4602      	mov	r2, r0
 801b384:	f240 2137 	movw	r1, #567	; 0x237
 801b388:	4839      	ldr	r0, [pc, #228]	; (801b470 <__mdiff+0x110>)
 801b38a:	f7fe fe3f 	bl	801a00c <__assert_func>
 801b38e:	2301      	movs	r3, #1
 801b390:	e9c0 3504 	strd	r3, r5, [r0, #16]
 801b394:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801b398:	bfa4      	itt	ge
 801b39a:	4643      	movge	r3, r8
 801b39c:	46a0      	movge	r8, r4
 801b39e:	4630      	mov	r0, r6
 801b3a0:	f8d8 1004 	ldr.w	r1, [r8, #4]
 801b3a4:	bfa6      	itte	ge
 801b3a6:	461c      	movge	r4, r3
 801b3a8:	2500      	movge	r5, #0
 801b3aa:	2501      	movlt	r5, #1
 801b3ac:	f7ff fd40 	bl	801ae30 <_Balloc>
 801b3b0:	b920      	cbnz	r0, 801b3bc <__mdiff+0x5c>
 801b3b2:	4b2e      	ldr	r3, [pc, #184]	; (801b46c <__mdiff+0x10c>)
 801b3b4:	4602      	mov	r2, r0
 801b3b6:	f240 2145 	movw	r1, #581	; 0x245
 801b3ba:	e7e5      	b.n	801b388 <__mdiff+0x28>
 801b3bc:	f8d8 7010 	ldr.w	r7, [r8, #16]
 801b3c0:	6926      	ldr	r6, [r4, #16]
 801b3c2:	60c5      	str	r5, [r0, #12]
 801b3c4:	f104 0914 	add.w	r9, r4, #20
 801b3c8:	f108 0514 	add.w	r5, r8, #20
 801b3cc:	f100 0e14 	add.w	lr, r0, #20
 801b3d0:	eb05 0c87 	add.w	ip, r5, r7, lsl #2
 801b3d4:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 801b3d8:	f108 0210 	add.w	r2, r8, #16
 801b3dc:	46f2      	mov	sl, lr
 801b3de:	2100      	movs	r1, #0
 801b3e0:	f859 3b04 	ldr.w	r3, [r9], #4
 801b3e4:	f852 bf04 	ldr.w	fp, [r2, #4]!
 801b3e8:	fa11 f88b 	uxtah	r8, r1, fp
 801b3ec:	b299      	uxth	r1, r3
 801b3ee:	0c1b      	lsrs	r3, r3, #16
 801b3f0:	eba8 0801 	sub.w	r8, r8, r1
 801b3f4:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 801b3f8:	eb03 4328 	add.w	r3, r3, r8, asr #16
 801b3fc:	fa1f f888 	uxth.w	r8, r8
 801b400:	1419      	asrs	r1, r3, #16
 801b402:	454e      	cmp	r6, r9
 801b404:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 801b408:	f84a 3b04 	str.w	r3, [sl], #4
 801b40c:	d8e8      	bhi.n	801b3e0 <__mdiff+0x80>
 801b40e:	1b33      	subs	r3, r6, r4
 801b410:	3b15      	subs	r3, #21
 801b412:	f023 0303 	bic.w	r3, r3, #3
 801b416:	3304      	adds	r3, #4
 801b418:	3415      	adds	r4, #21
 801b41a:	42a6      	cmp	r6, r4
 801b41c:	bf38      	it	cc
 801b41e:	2304      	movcc	r3, #4
 801b420:	441d      	add	r5, r3
 801b422:	4473      	add	r3, lr
 801b424:	469e      	mov	lr, r3
 801b426:	462e      	mov	r6, r5
 801b428:	4566      	cmp	r6, ip
 801b42a:	d30e      	bcc.n	801b44a <__mdiff+0xea>
 801b42c:	f10c 0203 	add.w	r2, ip, #3
 801b430:	1b52      	subs	r2, r2, r5
 801b432:	f022 0203 	bic.w	r2, r2, #3
 801b436:	3d03      	subs	r5, #3
 801b438:	45ac      	cmp	ip, r5
 801b43a:	bf38      	it	cc
 801b43c:	2200      	movcc	r2, #0
 801b43e:	4413      	add	r3, r2
 801b440:	f853 2d04 	ldr.w	r2, [r3, #-4]!
 801b444:	b17a      	cbz	r2, 801b466 <__mdiff+0x106>
 801b446:	6107      	str	r7, [r0, #16]
 801b448:	e7a4      	b.n	801b394 <__mdiff+0x34>
 801b44a:	f856 8b04 	ldr.w	r8, [r6], #4
 801b44e:	fa11 f288 	uxtah	r2, r1, r8
 801b452:	1414      	asrs	r4, r2, #16
 801b454:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 801b458:	b292      	uxth	r2, r2
 801b45a:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
 801b45e:	f84e 2b04 	str.w	r2, [lr], #4
 801b462:	1421      	asrs	r1, r4, #16
 801b464:	e7e0      	b.n	801b428 <__mdiff+0xc8>
 801b466:	3f01      	subs	r7, #1
 801b468:	e7ea      	b.n	801b440 <__mdiff+0xe0>
 801b46a:	bf00      	nop
 801b46c:	0801f293 	.word	0x0801f293
 801b470:	0801f2a4 	.word	0x0801f2a4

0801b474 <__d2b>:
 801b474:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 801b478:	460f      	mov	r7, r1
 801b47a:	2101      	movs	r1, #1
 801b47c:	ec59 8b10 	vmov	r8, r9, d0
 801b480:	4616      	mov	r6, r2
 801b482:	f7ff fcd5 	bl	801ae30 <_Balloc>
 801b486:	4604      	mov	r4, r0
 801b488:	b930      	cbnz	r0, 801b498 <__d2b+0x24>
 801b48a:	4602      	mov	r2, r0
 801b48c:	4b24      	ldr	r3, [pc, #144]	; (801b520 <__d2b+0xac>)
 801b48e:	4825      	ldr	r0, [pc, #148]	; (801b524 <__d2b+0xb0>)
 801b490:	f240 310f 	movw	r1, #783	; 0x30f
 801b494:	f7fe fdba 	bl	801a00c <__assert_func>
 801b498:	f3c9 550a 	ubfx	r5, r9, #20, #11
 801b49c:	f3c9 0313 	ubfx	r3, r9, #0, #20
 801b4a0:	bb2d      	cbnz	r5, 801b4ee <__d2b+0x7a>
 801b4a2:	9301      	str	r3, [sp, #4]
 801b4a4:	f1b8 0300 	subs.w	r3, r8, #0
 801b4a8:	d026      	beq.n	801b4f8 <__d2b+0x84>
 801b4aa:	4668      	mov	r0, sp
 801b4ac:	9300      	str	r3, [sp, #0]
 801b4ae:	f7ff fd87 	bl	801afc0 <__lo0bits>
 801b4b2:	e9dd 1200 	ldrd	r1, r2, [sp]
 801b4b6:	b1e8      	cbz	r0, 801b4f4 <__d2b+0x80>
 801b4b8:	f1c0 0320 	rsb	r3, r0, #32
 801b4bc:	fa02 f303 	lsl.w	r3, r2, r3
 801b4c0:	430b      	orrs	r3, r1
 801b4c2:	40c2      	lsrs	r2, r0
 801b4c4:	6163      	str	r3, [r4, #20]
 801b4c6:	9201      	str	r2, [sp, #4]
 801b4c8:	9b01      	ldr	r3, [sp, #4]
 801b4ca:	61a3      	str	r3, [r4, #24]
 801b4cc:	2b00      	cmp	r3, #0
 801b4ce:	bf14      	ite	ne
 801b4d0:	2202      	movne	r2, #2
 801b4d2:	2201      	moveq	r2, #1
 801b4d4:	6122      	str	r2, [r4, #16]
 801b4d6:	b1bd      	cbz	r5, 801b508 <__d2b+0x94>
 801b4d8:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 801b4dc:	4405      	add	r5, r0
 801b4de:	603d      	str	r5, [r7, #0]
 801b4e0:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 801b4e4:	6030      	str	r0, [r6, #0]
 801b4e6:	4620      	mov	r0, r4
 801b4e8:	b003      	add	sp, #12
 801b4ea:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 801b4ee:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 801b4f2:	e7d6      	b.n	801b4a2 <__d2b+0x2e>
 801b4f4:	6161      	str	r1, [r4, #20]
 801b4f6:	e7e7      	b.n	801b4c8 <__d2b+0x54>
 801b4f8:	a801      	add	r0, sp, #4
 801b4fa:	f7ff fd61 	bl	801afc0 <__lo0bits>
 801b4fe:	9b01      	ldr	r3, [sp, #4]
 801b500:	6163      	str	r3, [r4, #20]
 801b502:	3020      	adds	r0, #32
 801b504:	2201      	movs	r2, #1
 801b506:	e7e5      	b.n	801b4d4 <__d2b+0x60>
 801b508:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 801b50c:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 801b510:	6038      	str	r0, [r7, #0]
 801b512:	6918      	ldr	r0, [r3, #16]
 801b514:	f7ff fd34 	bl	801af80 <__hi0bits>
 801b518:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 801b51c:	e7e2      	b.n	801b4e4 <__d2b+0x70>
 801b51e:	bf00      	nop
 801b520:	0801f293 	.word	0x0801f293
 801b524:	0801f2a4 	.word	0x0801f2a4

0801b528 <__sfputc_r>:
 801b528:	6893      	ldr	r3, [r2, #8]
 801b52a:	3b01      	subs	r3, #1
 801b52c:	2b00      	cmp	r3, #0
 801b52e:	b410      	push	{r4}
 801b530:	6093      	str	r3, [r2, #8]
 801b532:	da08      	bge.n	801b546 <__sfputc_r+0x1e>
 801b534:	6994      	ldr	r4, [r2, #24]
 801b536:	42a3      	cmp	r3, r4
 801b538:	db01      	blt.n	801b53e <__sfputc_r+0x16>
 801b53a:	290a      	cmp	r1, #10
 801b53c:	d103      	bne.n	801b546 <__sfputc_r+0x1e>
 801b53e:	f85d 4b04 	ldr.w	r4, [sp], #4
 801b542:	f7fe bc36 	b.w	8019db2 <__swbuf_r>
 801b546:	6813      	ldr	r3, [r2, #0]
 801b548:	1c58      	adds	r0, r3, #1
 801b54a:	6010      	str	r0, [r2, #0]
 801b54c:	7019      	strb	r1, [r3, #0]
 801b54e:	4608      	mov	r0, r1
 801b550:	f85d 4b04 	ldr.w	r4, [sp], #4
 801b554:	4770      	bx	lr

0801b556 <__sfputs_r>:
 801b556:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801b558:	4606      	mov	r6, r0
 801b55a:	460f      	mov	r7, r1
 801b55c:	4614      	mov	r4, r2
 801b55e:	18d5      	adds	r5, r2, r3
 801b560:	42ac      	cmp	r4, r5
 801b562:	d101      	bne.n	801b568 <__sfputs_r+0x12>
 801b564:	2000      	movs	r0, #0
 801b566:	e007      	b.n	801b578 <__sfputs_r+0x22>
 801b568:	f814 1b01 	ldrb.w	r1, [r4], #1
 801b56c:	463a      	mov	r2, r7
 801b56e:	4630      	mov	r0, r6
 801b570:	f7ff ffda 	bl	801b528 <__sfputc_r>
 801b574:	1c43      	adds	r3, r0, #1
 801b576:	d1f3      	bne.n	801b560 <__sfputs_r+0xa>
 801b578:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0801b57c <_vfiprintf_r>:
 801b57c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801b580:	460d      	mov	r5, r1
 801b582:	b09d      	sub	sp, #116	; 0x74
 801b584:	4614      	mov	r4, r2
 801b586:	4698      	mov	r8, r3
 801b588:	4606      	mov	r6, r0
 801b58a:	b118      	cbz	r0, 801b594 <_vfiprintf_r+0x18>
 801b58c:	6a03      	ldr	r3, [r0, #32]
 801b58e:	b90b      	cbnz	r3, 801b594 <_vfiprintf_r+0x18>
 801b590:	f7fe fb28 	bl	8019be4 <__sinit>
 801b594:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 801b596:	07d9      	lsls	r1, r3, #31
 801b598:	d405      	bmi.n	801b5a6 <_vfiprintf_r+0x2a>
 801b59a:	89ab      	ldrh	r3, [r5, #12]
 801b59c:	059a      	lsls	r2, r3, #22
 801b59e:	d402      	bmi.n	801b5a6 <_vfiprintf_r+0x2a>
 801b5a0:	6da8      	ldr	r0, [r5, #88]	; 0x58
 801b5a2:	f7fe fd22 	bl	8019fea <__retarget_lock_acquire_recursive>
 801b5a6:	89ab      	ldrh	r3, [r5, #12]
 801b5a8:	071b      	lsls	r3, r3, #28
 801b5aa:	d501      	bpl.n	801b5b0 <_vfiprintf_r+0x34>
 801b5ac:	692b      	ldr	r3, [r5, #16]
 801b5ae:	b99b      	cbnz	r3, 801b5d8 <_vfiprintf_r+0x5c>
 801b5b0:	4629      	mov	r1, r5
 801b5b2:	4630      	mov	r0, r6
 801b5b4:	f7fe fc3a 	bl	8019e2c <__swsetup_r>
 801b5b8:	b170      	cbz	r0, 801b5d8 <_vfiprintf_r+0x5c>
 801b5ba:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 801b5bc:	07dc      	lsls	r4, r3, #31
 801b5be:	d504      	bpl.n	801b5ca <_vfiprintf_r+0x4e>
 801b5c0:	f04f 30ff 	mov.w	r0, #4294967295
 801b5c4:	b01d      	add	sp, #116	; 0x74
 801b5c6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801b5ca:	89ab      	ldrh	r3, [r5, #12]
 801b5cc:	0598      	lsls	r0, r3, #22
 801b5ce:	d4f7      	bmi.n	801b5c0 <_vfiprintf_r+0x44>
 801b5d0:	6da8      	ldr	r0, [r5, #88]	; 0x58
 801b5d2:	f7fe fd0b 	bl	8019fec <__retarget_lock_release_recursive>
 801b5d6:	e7f3      	b.n	801b5c0 <_vfiprintf_r+0x44>
 801b5d8:	2300      	movs	r3, #0
 801b5da:	9309      	str	r3, [sp, #36]	; 0x24
 801b5dc:	2320      	movs	r3, #32
 801b5de:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 801b5e2:	f8cd 800c 	str.w	r8, [sp, #12]
 801b5e6:	2330      	movs	r3, #48	; 0x30
 801b5e8:	f8df 81b0 	ldr.w	r8, [pc, #432]	; 801b79c <_vfiprintf_r+0x220>
 801b5ec:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 801b5f0:	f04f 0901 	mov.w	r9, #1
 801b5f4:	4623      	mov	r3, r4
 801b5f6:	469a      	mov	sl, r3
 801b5f8:	f813 2b01 	ldrb.w	r2, [r3], #1
 801b5fc:	b10a      	cbz	r2, 801b602 <_vfiprintf_r+0x86>
 801b5fe:	2a25      	cmp	r2, #37	; 0x25
 801b600:	d1f9      	bne.n	801b5f6 <_vfiprintf_r+0x7a>
 801b602:	ebba 0b04 	subs.w	fp, sl, r4
 801b606:	d00b      	beq.n	801b620 <_vfiprintf_r+0xa4>
 801b608:	465b      	mov	r3, fp
 801b60a:	4622      	mov	r2, r4
 801b60c:	4629      	mov	r1, r5
 801b60e:	4630      	mov	r0, r6
 801b610:	f7ff ffa1 	bl	801b556 <__sfputs_r>
 801b614:	3001      	adds	r0, #1
 801b616:	f000 80a9 	beq.w	801b76c <_vfiprintf_r+0x1f0>
 801b61a:	9a09      	ldr	r2, [sp, #36]	; 0x24
 801b61c:	445a      	add	r2, fp
 801b61e:	9209      	str	r2, [sp, #36]	; 0x24
 801b620:	f89a 3000 	ldrb.w	r3, [sl]
 801b624:	2b00      	cmp	r3, #0
 801b626:	f000 80a1 	beq.w	801b76c <_vfiprintf_r+0x1f0>
 801b62a:	2300      	movs	r3, #0
 801b62c:	f04f 32ff 	mov.w	r2, #4294967295
 801b630:	e9cd 2305 	strd	r2, r3, [sp, #20]
 801b634:	f10a 0a01 	add.w	sl, sl, #1
 801b638:	9304      	str	r3, [sp, #16]
 801b63a:	9307      	str	r3, [sp, #28]
 801b63c:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 801b640:	931a      	str	r3, [sp, #104]	; 0x68
 801b642:	4654      	mov	r4, sl
 801b644:	2205      	movs	r2, #5
 801b646:	f814 1b01 	ldrb.w	r1, [r4], #1
 801b64a:	4854      	ldr	r0, [pc, #336]	; (801b79c <_vfiprintf_r+0x220>)
 801b64c:	f7e6 fbc8 	bl	8001de0 <memchr>
 801b650:	9a04      	ldr	r2, [sp, #16]
 801b652:	b9d8      	cbnz	r0, 801b68c <_vfiprintf_r+0x110>
 801b654:	06d1      	lsls	r1, r2, #27
 801b656:	bf44      	itt	mi
 801b658:	2320      	movmi	r3, #32
 801b65a:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 801b65e:	0713      	lsls	r3, r2, #28
 801b660:	bf44      	itt	mi
 801b662:	232b      	movmi	r3, #43	; 0x2b
 801b664:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 801b668:	f89a 3000 	ldrb.w	r3, [sl]
 801b66c:	2b2a      	cmp	r3, #42	; 0x2a
 801b66e:	d015      	beq.n	801b69c <_vfiprintf_r+0x120>
 801b670:	9a07      	ldr	r2, [sp, #28]
 801b672:	4654      	mov	r4, sl
 801b674:	2000      	movs	r0, #0
 801b676:	f04f 0c0a 	mov.w	ip, #10
 801b67a:	4621      	mov	r1, r4
 801b67c:	f811 3b01 	ldrb.w	r3, [r1], #1
 801b680:	3b30      	subs	r3, #48	; 0x30
 801b682:	2b09      	cmp	r3, #9
 801b684:	d94d      	bls.n	801b722 <_vfiprintf_r+0x1a6>
 801b686:	b1b0      	cbz	r0, 801b6b6 <_vfiprintf_r+0x13a>
 801b688:	9207      	str	r2, [sp, #28]
 801b68a:	e014      	b.n	801b6b6 <_vfiprintf_r+0x13a>
 801b68c:	eba0 0308 	sub.w	r3, r0, r8
 801b690:	fa09 f303 	lsl.w	r3, r9, r3
 801b694:	4313      	orrs	r3, r2
 801b696:	9304      	str	r3, [sp, #16]
 801b698:	46a2      	mov	sl, r4
 801b69a:	e7d2      	b.n	801b642 <_vfiprintf_r+0xc6>
 801b69c:	9b03      	ldr	r3, [sp, #12]
 801b69e:	1d19      	adds	r1, r3, #4
 801b6a0:	681b      	ldr	r3, [r3, #0]
 801b6a2:	9103      	str	r1, [sp, #12]
 801b6a4:	2b00      	cmp	r3, #0
 801b6a6:	bfbb      	ittet	lt
 801b6a8:	425b      	neglt	r3, r3
 801b6aa:	f042 0202 	orrlt.w	r2, r2, #2
 801b6ae:	9307      	strge	r3, [sp, #28]
 801b6b0:	9307      	strlt	r3, [sp, #28]
 801b6b2:	bfb8      	it	lt
 801b6b4:	9204      	strlt	r2, [sp, #16]
 801b6b6:	7823      	ldrb	r3, [r4, #0]
 801b6b8:	2b2e      	cmp	r3, #46	; 0x2e
 801b6ba:	d10c      	bne.n	801b6d6 <_vfiprintf_r+0x15a>
 801b6bc:	7863      	ldrb	r3, [r4, #1]
 801b6be:	2b2a      	cmp	r3, #42	; 0x2a
 801b6c0:	d134      	bne.n	801b72c <_vfiprintf_r+0x1b0>
 801b6c2:	9b03      	ldr	r3, [sp, #12]
 801b6c4:	1d1a      	adds	r2, r3, #4
 801b6c6:	681b      	ldr	r3, [r3, #0]
 801b6c8:	9203      	str	r2, [sp, #12]
 801b6ca:	2b00      	cmp	r3, #0
 801b6cc:	bfb8      	it	lt
 801b6ce:	f04f 33ff 	movlt.w	r3, #4294967295
 801b6d2:	3402      	adds	r4, #2
 801b6d4:	9305      	str	r3, [sp, #20]
 801b6d6:	f8df a0d4 	ldr.w	sl, [pc, #212]	; 801b7ac <_vfiprintf_r+0x230>
 801b6da:	7821      	ldrb	r1, [r4, #0]
 801b6dc:	2203      	movs	r2, #3
 801b6de:	4650      	mov	r0, sl
 801b6e0:	f7e6 fb7e 	bl	8001de0 <memchr>
 801b6e4:	b138      	cbz	r0, 801b6f6 <_vfiprintf_r+0x17a>
 801b6e6:	9b04      	ldr	r3, [sp, #16]
 801b6e8:	eba0 000a 	sub.w	r0, r0, sl
 801b6ec:	2240      	movs	r2, #64	; 0x40
 801b6ee:	4082      	lsls	r2, r0
 801b6f0:	4313      	orrs	r3, r2
 801b6f2:	3401      	adds	r4, #1
 801b6f4:	9304      	str	r3, [sp, #16]
 801b6f6:	f814 1b01 	ldrb.w	r1, [r4], #1
 801b6fa:	4829      	ldr	r0, [pc, #164]	; (801b7a0 <_vfiprintf_r+0x224>)
 801b6fc:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 801b700:	2206      	movs	r2, #6
 801b702:	f7e6 fb6d 	bl	8001de0 <memchr>
 801b706:	2800      	cmp	r0, #0
 801b708:	d03f      	beq.n	801b78a <_vfiprintf_r+0x20e>
 801b70a:	4b26      	ldr	r3, [pc, #152]	; (801b7a4 <_vfiprintf_r+0x228>)
 801b70c:	bb1b      	cbnz	r3, 801b756 <_vfiprintf_r+0x1da>
 801b70e:	9b03      	ldr	r3, [sp, #12]
 801b710:	3307      	adds	r3, #7
 801b712:	f023 0307 	bic.w	r3, r3, #7
 801b716:	3308      	adds	r3, #8
 801b718:	9303      	str	r3, [sp, #12]
 801b71a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801b71c:	443b      	add	r3, r7
 801b71e:	9309      	str	r3, [sp, #36]	; 0x24
 801b720:	e768      	b.n	801b5f4 <_vfiprintf_r+0x78>
 801b722:	fb0c 3202 	mla	r2, ip, r2, r3
 801b726:	460c      	mov	r4, r1
 801b728:	2001      	movs	r0, #1
 801b72a:	e7a6      	b.n	801b67a <_vfiprintf_r+0xfe>
 801b72c:	2300      	movs	r3, #0
 801b72e:	3401      	adds	r4, #1
 801b730:	9305      	str	r3, [sp, #20]
 801b732:	4619      	mov	r1, r3
 801b734:	f04f 0c0a 	mov.w	ip, #10
 801b738:	4620      	mov	r0, r4
 801b73a:	f810 2b01 	ldrb.w	r2, [r0], #1
 801b73e:	3a30      	subs	r2, #48	; 0x30
 801b740:	2a09      	cmp	r2, #9
 801b742:	d903      	bls.n	801b74c <_vfiprintf_r+0x1d0>
 801b744:	2b00      	cmp	r3, #0
 801b746:	d0c6      	beq.n	801b6d6 <_vfiprintf_r+0x15a>
 801b748:	9105      	str	r1, [sp, #20]
 801b74a:	e7c4      	b.n	801b6d6 <_vfiprintf_r+0x15a>
 801b74c:	fb0c 2101 	mla	r1, ip, r1, r2
 801b750:	4604      	mov	r4, r0
 801b752:	2301      	movs	r3, #1
 801b754:	e7f0      	b.n	801b738 <_vfiprintf_r+0x1bc>
 801b756:	ab03      	add	r3, sp, #12
 801b758:	9300      	str	r3, [sp, #0]
 801b75a:	462a      	mov	r2, r5
 801b75c:	4b12      	ldr	r3, [pc, #72]	; (801b7a8 <_vfiprintf_r+0x22c>)
 801b75e:	a904      	add	r1, sp, #16
 801b760:	4630      	mov	r0, r6
 801b762:	f7fd fe09 	bl	8019378 <_printf_float>
 801b766:	4607      	mov	r7, r0
 801b768:	1c78      	adds	r0, r7, #1
 801b76a:	d1d6      	bne.n	801b71a <_vfiprintf_r+0x19e>
 801b76c:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 801b76e:	07d9      	lsls	r1, r3, #31
 801b770:	d405      	bmi.n	801b77e <_vfiprintf_r+0x202>
 801b772:	89ab      	ldrh	r3, [r5, #12]
 801b774:	059a      	lsls	r2, r3, #22
 801b776:	d402      	bmi.n	801b77e <_vfiprintf_r+0x202>
 801b778:	6da8      	ldr	r0, [r5, #88]	; 0x58
 801b77a:	f7fe fc37 	bl	8019fec <__retarget_lock_release_recursive>
 801b77e:	89ab      	ldrh	r3, [r5, #12]
 801b780:	065b      	lsls	r3, r3, #25
 801b782:	f53f af1d 	bmi.w	801b5c0 <_vfiprintf_r+0x44>
 801b786:	9809      	ldr	r0, [sp, #36]	; 0x24
 801b788:	e71c      	b.n	801b5c4 <_vfiprintf_r+0x48>
 801b78a:	ab03      	add	r3, sp, #12
 801b78c:	9300      	str	r3, [sp, #0]
 801b78e:	462a      	mov	r2, r5
 801b790:	4b05      	ldr	r3, [pc, #20]	; (801b7a8 <_vfiprintf_r+0x22c>)
 801b792:	a904      	add	r1, sp, #16
 801b794:	4630      	mov	r0, r6
 801b796:	f7fe f877 	bl	8019888 <_printf_i>
 801b79a:	e7e4      	b.n	801b766 <_vfiprintf_r+0x1ea>
 801b79c:	0801f3fc 	.word	0x0801f3fc
 801b7a0:	0801f406 	.word	0x0801f406
 801b7a4:	08019379 	.word	0x08019379
 801b7a8:	0801b557 	.word	0x0801b557
 801b7ac:	0801f402 	.word	0x0801f402

0801b7b0 <__sflush_r>:
 801b7b0:	898a      	ldrh	r2, [r1, #12]
 801b7b2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801b7b6:	4605      	mov	r5, r0
 801b7b8:	0710      	lsls	r0, r2, #28
 801b7ba:	460c      	mov	r4, r1
 801b7bc:	d458      	bmi.n	801b870 <__sflush_r+0xc0>
 801b7be:	684b      	ldr	r3, [r1, #4]
 801b7c0:	2b00      	cmp	r3, #0
 801b7c2:	dc05      	bgt.n	801b7d0 <__sflush_r+0x20>
 801b7c4:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 801b7c6:	2b00      	cmp	r3, #0
 801b7c8:	dc02      	bgt.n	801b7d0 <__sflush_r+0x20>
 801b7ca:	2000      	movs	r0, #0
 801b7cc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801b7d0:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 801b7d2:	2e00      	cmp	r6, #0
 801b7d4:	d0f9      	beq.n	801b7ca <__sflush_r+0x1a>
 801b7d6:	2300      	movs	r3, #0
 801b7d8:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 801b7dc:	682f      	ldr	r7, [r5, #0]
 801b7de:	6a21      	ldr	r1, [r4, #32]
 801b7e0:	602b      	str	r3, [r5, #0]
 801b7e2:	d032      	beq.n	801b84a <__sflush_r+0x9a>
 801b7e4:	6d60      	ldr	r0, [r4, #84]	; 0x54
 801b7e6:	89a3      	ldrh	r3, [r4, #12]
 801b7e8:	075a      	lsls	r2, r3, #29
 801b7ea:	d505      	bpl.n	801b7f8 <__sflush_r+0x48>
 801b7ec:	6863      	ldr	r3, [r4, #4]
 801b7ee:	1ac0      	subs	r0, r0, r3
 801b7f0:	6b63      	ldr	r3, [r4, #52]	; 0x34
 801b7f2:	b10b      	cbz	r3, 801b7f8 <__sflush_r+0x48>
 801b7f4:	6c23      	ldr	r3, [r4, #64]	; 0x40
 801b7f6:	1ac0      	subs	r0, r0, r3
 801b7f8:	2300      	movs	r3, #0
 801b7fa:	4602      	mov	r2, r0
 801b7fc:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 801b7fe:	6a21      	ldr	r1, [r4, #32]
 801b800:	4628      	mov	r0, r5
 801b802:	47b0      	blx	r6
 801b804:	1c43      	adds	r3, r0, #1
 801b806:	89a3      	ldrh	r3, [r4, #12]
 801b808:	d106      	bne.n	801b818 <__sflush_r+0x68>
 801b80a:	6829      	ldr	r1, [r5, #0]
 801b80c:	291d      	cmp	r1, #29
 801b80e:	d82b      	bhi.n	801b868 <__sflush_r+0xb8>
 801b810:	4a29      	ldr	r2, [pc, #164]	; (801b8b8 <__sflush_r+0x108>)
 801b812:	410a      	asrs	r2, r1
 801b814:	07d6      	lsls	r6, r2, #31
 801b816:	d427      	bmi.n	801b868 <__sflush_r+0xb8>
 801b818:	2200      	movs	r2, #0
 801b81a:	6062      	str	r2, [r4, #4]
 801b81c:	04d9      	lsls	r1, r3, #19
 801b81e:	6922      	ldr	r2, [r4, #16]
 801b820:	6022      	str	r2, [r4, #0]
 801b822:	d504      	bpl.n	801b82e <__sflush_r+0x7e>
 801b824:	1c42      	adds	r2, r0, #1
 801b826:	d101      	bne.n	801b82c <__sflush_r+0x7c>
 801b828:	682b      	ldr	r3, [r5, #0]
 801b82a:	b903      	cbnz	r3, 801b82e <__sflush_r+0x7e>
 801b82c:	6560      	str	r0, [r4, #84]	; 0x54
 801b82e:	6b61      	ldr	r1, [r4, #52]	; 0x34
 801b830:	602f      	str	r7, [r5, #0]
 801b832:	2900      	cmp	r1, #0
 801b834:	d0c9      	beq.n	801b7ca <__sflush_r+0x1a>
 801b836:	f104 0344 	add.w	r3, r4, #68	; 0x44
 801b83a:	4299      	cmp	r1, r3
 801b83c:	d002      	beq.n	801b844 <__sflush_r+0x94>
 801b83e:	4628      	mov	r0, r5
 801b840:	f7ff f9f6 	bl	801ac30 <_free_r>
 801b844:	2000      	movs	r0, #0
 801b846:	6360      	str	r0, [r4, #52]	; 0x34
 801b848:	e7c0      	b.n	801b7cc <__sflush_r+0x1c>
 801b84a:	2301      	movs	r3, #1
 801b84c:	4628      	mov	r0, r5
 801b84e:	47b0      	blx	r6
 801b850:	1c41      	adds	r1, r0, #1
 801b852:	d1c8      	bne.n	801b7e6 <__sflush_r+0x36>
 801b854:	682b      	ldr	r3, [r5, #0]
 801b856:	2b00      	cmp	r3, #0
 801b858:	d0c5      	beq.n	801b7e6 <__sflush_r+0x36>
 801b85a:	2b1d      	cmp	r3, #29
 801b85c:	d001      	beq.n	801b862 <__sflush_r+0xb2>
 801b85e:	2b16      	cmp	r3, #22
 801b860:	d101      	bne.n	801b866 <__sflush_r+0xb6>
 801b862:	602f      	str	r7, [r5, #0]
 801b864:	e7b1      	b.n	801b7ca <__sflush_r+0x1a>
 801b866:	89a3      	ldrh	r3, [r4, #12]
 801b868:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 801b86c:	81a3      	strh	r3, [r4, #12]
 801b86e:	e7ad      	b.n	801b7cc <__sflush_r+0x1c>
 801b870:	690f      	ldr	r7, [r1, #16]
 801b872:	2f00      	cmp	r7, #0
 801b874:	d0a9      	beq.n	801b7ca <__sflush_r+0x1a>
 801b876:	0793      	lsls	r3, r2, #30
 801b878:	680e      	ldr	r6, [r1, #0]
 801b87a:	bf08      	it	eq
 801b87c:	694b      	ldreq	r3, [r1, #20]
 801b87e:	600f      	str	r7, [r1, #0]
 801b880:	bf18      	it	ne
 801b882:	2300      	movne	r3, #0
 801b884:	eba6 0807 	sub.w	r8, r6, r7
 801b888:	608b      	str	r3, [r1, #8]
 801b88a:	f1b8 0f00 	cmp.w	r8, #0
 801b88e:	dd9c      	ble.n	801b7ca <__sflush_r+0x1a>
 801b890:	6a21      	ldr	r1, [r4, #32]
 801b892:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 801b894:	4643      	mov	r3, r8
 801b896:	463a      	mov	r2, r7
 801b898:	4628      	mov	r0, r5
 801b89a:	47b0      	blx	r6
 801b89c:	2800      	cmp	r0, #0
 801b89e:	dc06      	bgt.n	801b8ae <__sflush_r+0xfe>
 801b8a0:	89a3      	ldrh	r3, [r4, #12]
 801b8a2:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 801b8a6:	81a3      	strh	r3, [r4, #12]
 801b8a8:	f04f 30ff 	mov.w	r0, #4294967295
 801b8ac:	e78e      	b.n	801b7cc <__sflush_r+0x1c>
 801b8ae:	4407      	add	r7, r0
 801b8b0:	eba8 0800 	sub.w	r8, r8, r0
 801b8b4:	e7e9      	b.n	801b88a <__sflush_r+0xda>
 801b8b6:	bf00      	nop
 801b8b8:	dfbffffe 	.word	0xdfbffffe

0801b8bc <_fflush_r>:
 801b8bc:	b538      	push	{r3, r4, r5, lr}
 801b8be:	690b      	ldr	r3, [r1, #16]
 801b8c0:	4605      	mov	r5, r0
 801b8c2:	460c      	mov	r4, r1
 801b8c4:	b913      	cbnz	r3, 801b8cc <_fflush_r+0x10>
 801b8c6:	2500      	movs	r5, #0
 801b8c8:	4628      	mov	r0, r5
 801b8ca:	bd38      	pop	{r3, r4, r5, pc}
 801b8cc:	b118      	cbz	r0, 801b8d6 <_fflush_r+0x1a>
 801b8ce:	6a03      	ldr	r3, [r0, #32]
 801b8d0:	b90b      	cbnz	r3, 801b8d6 <_fflush_r+0x1a>
 801b8d2:	f7fe f987 	bl	8019be4 <__sinit>
 801b8d6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 801b8da:	2b00      	cmp	r3, #0
 801b8dc:	d0f3      	beq.n	801b8c6 <_fflush_r+0xa>
 801b8de:	6e62      	ldr	r2, [r4, #100]	; 0x64
 801b8e0:	07d0      	lsls	r0, r2, #31
 801b8e2:	d404      	bmi.n	801b8ee <_fflush_r+0x32>
 801b8e4:	0599      	lsls	r1, r3, #22
 801b8e6:	d402      	bmi.n	801b8ee <_fflush_r+0x32>
 801b8e8:	6da0      	ldr	r0, [r4, #88]	; 0x58
 801b8ea:	f7fe fb7e 	bl	8019fea <__retarget_lock_acquire_recursive>
 801b8ee:	4628      	mov	r0, r5
 801b8f0:	4621      	mov	r1, r4
 801b8f2:	f7ff ff5d 	bl	801b7b0 <__sflush_r>
 801b8f6:	6e63      	ldr	r3, [r4, #100]	; 0x64
 801b8f8:	07da      	lsls	r2, r3, #31
 801b8fa:	4605      	mov	r5, r0
 801b8fc:	d4e4      	bmi.n	801b8c8 <_fflush_r+0xc>
 801b8fe:	89a3      	ldrh	r3, [r4, #12]
 801b900:	059b      	lsls	r3, r3, #22
 801b902:	d4e1      	bmi.n	801b8c8 <_fflush_r+0xc>
 801b904:	6da0      	ldr	r0, [r4, #88]	; 0x58
 801b906:	f7fe fb71 	bl	8019fec <__retarget_lock_release_recursive>
 801b90a:	e7dd      	b.n	801b8c8 <_fflush_r+0xc>

0801b90c <fiprintf>:
 801b90c:	b40e      	push	{r1, r2, r3}
 801b90e:	b503      	push	{r0, r1, lr}
 801b910:	4601      	mov	r1, r0
 801b912:	ab03      	add	r3, sp, #12
 801b914:	4805      	ldr	r0, [pc, #20]	; (801b92c <fiprintf+0x20>)
 801b916:	f853 2b04 	ldr.w	r2, [r3], #4
 801b91a:	6800      	ldr	r0, [r0, #0]
 801b91c:	9301      	str	r3, [sp, #4]
 801b91e:	f7ff fe2d 	bl	801b57c <_vfiprintf_r>
 801b922:	b002      	add	sp, #8
 801b924:	f85d eb04 	ldr.w	lr, [sp], #4
 801b928:	b003      	add	sp, #12
 801b92a:	4770      	bx	lr
 801b92c:	200000bc 	.word	0x200000bc

0801b930 <__swhatbuf_r>:
 801b930:	b570      	push	{r4, r5, r6, lr}
 801b932:	460c      	mov	r4, r1
 801b934:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801b938:	2900      	cmp	r1, #0
 801b93a:	b096      	sub	sp, #88	; 0x58
 801b93c:	4615      	mov	r5, r2
 801b93e:	461e      	mov	r6, r3
 801b940:	da0d      	bge.n	801b95e <__swhatbuf_r+0x2e>
 801b942:	89a3      	ldrh	r3, [r4, #12]
 801b944:	f013 0f80 	tst.w	r3, #128	; 0x80
 801b948:	f04f 0100 	mov.w	r1, #0
 801b94c:	bf0c      	ite	eq
 801b94e:	f44f 6380 	moveq.w	r3, #1024	; 0x400
 801b952:	2340      	movne	r3, #64	; 0x40
 801b954:	2000      	movs	r0, #0
 801b956:	6031      	str	r1, [r6, #0]
 801b958:	602b      	str	r3, [r5, #0]
 801b95a:	b016      	add	sp, #88	; 0x58
 801b95c:	bd70      	pop	{r4, r5, r6, pc}
 801b95e:	466a      	mov	r2, sp
 801b960:	f000 f848 	bl	801b9f4 <_fstat_r>
 801b964:	2800      	cmp	r0, #0
 801b966:	dbec      	blt.n	801b942 <__swhatbuf_r+0x12>
 801b968:	9901      	ldr	r1, [sp, #4]
 801b96a:	f401 4170 	and.w	r1, r1, #61440	; 0xf000
 801b96e:	f5a1 5300 	sub.w	r3, r1, #8192	; 0x2000
 801b972:	4259      	negs	r1, r3
 801b974:	4159      	adcs	r1, r3
 801b976:	f44f 6380 	mov.w	r3, #1024	; 0x400
 801b97a:	e7eb      	b.n	801b954 <__swhatbuf_r+0x24>

0801b97c <__smakebuf_r>:
 801b97c:	898b      	ldrh	r3, [r1, #12]
 801b97e:	b573      	push	{r0, r1, r4, r5, r6, lr}
 801b980:	079d      	lsls	r5, r3, #30
 801b982:	4606      	mov	r6, r0
 801b984:	460c      	mov	r4, r1
 801b986:	d507      	bpl.n	801b998 <__smakebuf_r+0x1c>
 801b988:	f104 0347 	add.w	r3, r4, #71	; 0x47
 801b98c:	6023      	str	r3, [r4, #0]
 801b98e:	6123      	str	r3, [r4, #16]
 801b990:	2301      	movs	r3, #1
 801b992:	6163      	str	r3, [r4, #20]
 801b994:	b002      	add	sp, #8
 801b996:	bd70      	pop	{r4, r5, r6, pc}
 801b998:	ab01      	add	r3, sp, #4
 801b99a:	466a      	mov	r2, sp
 801b99c:	f7ff ffc8 	bl	801b930 <__swhatbuf_r>
 801b9a0:	9900      	ldr	r1, [sp, #0]
 801b9a2:	4605      	mov	r5, r0
 801b9a4:	4630      	mov	r0, r6
 801b9a6:	f7ff f9b7 	bl	801ad18 <_malloc_r>
 801b9aa:	b948      	cbnz	r0, 801b9c0 <__smakebuf_r+0x44>
 801b9ac:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 801b9b0:	059a      	lsls	r2, r3, #22
 801b9b2:	d4ef      	bmi.n	801b994 <__smakebuf_r+0x18>
 801b9b4:	f023 0303 	bic.w	r3, r3, #3
 801b9b8:	f043 0302 	orr.w	r3, r3, #2
 801b9bc:	81a3      	strh	r3, [r4, #12]
 801b9be:	e7e3      	b.n	801b988 <__smakebuf_r+0xc>
 801b9c0:	89a3      	ldrh	r3, [r4, #12]
 801b9c2:	6020      	str	r0, [r4, #0]
 801b9c4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 801b9c8:	81a3      	strh	r3, [r4, #12]
 801b9ca:	9b00      	ldr	r3, [sp, #0]
 801b9cc:	6163      	str	r3, [r4, #20]
 801b9ce:	9b01      	ldr	r3, [sp, #4]
 801b9d0:	6120      	str	r0, [r4, #16]
 801b9d2:	b15b      	cbz	r3, 801b9ec <__smakebuf_r+0x70>
 801b9d4:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 801b9d8:	4630      	mov	r0, r6
 801b9da:	f000 f81d 	bl	801ba18 <_isatty_r>
 801b9de:	b128      	cbz	r0, 801b9ec <__smakebuf_r+0x70>
 801b9e0:	89a3      	ldrh	r3, [r4, #12]
 801b9e2:	f023 0303 	bic.w	r3, r3, #3
 801b9e6:	f043 0301 	orr.w	r3, r3, #1
 801b9ea:	81a3      	strh	r3, [r4, #12]
 801b9ec:	89a3      	ldrh	r3, [r4, #12]
 801b9ee:	431d      	orrs	r5, r3
 801b9f0:	81a5      	strh	r5, [r4, #12]
 801b9f2:	e7cf      	b.n	801b994 <__smakebuf_r+0x18>

0801b9f4 <_fstat_r>:
 801b9f4:	b538      	push	{r3, r4, r5, lr}
 801b9f6:	4d07      	ldr	r5, [pc, #28]	; (801ba14 <_fstat_r+0x20>)
 801b9f8:	2300      	movs	r3, #0
 801b9fa:	4604      	mov	r4, r0
 801b9fc:	4608      	mov	r0, r1
 801b9fe:	4611      	mov	r1, r2
 801ba00:	602b      	str	r3, [r5, #0]
 801ba02:	f7e7 ffe6 	bl	80039d2 <_fstat>
 801ba06:	1c43      	adds	r3, r0, #1
 801ba08:	d102      	bne.n	801ba10 <_fstat_r+0x1c>
 801ba0a:	682b      	ldr	r3, [r5, #0]
 801ba0c:	b103      	cbz	r3, 801ba10 <_fstat_r+0x1c>
 801ba0e:	6023      	str	r3, [r4, #0]
 801ba10:	bd38      	pop	{r3, r4, r5, pc}
 801ba12:	bf00      	nop
 801ba14:	20007370 	.word	0x20007370

0801ba18 <_isatty_r>:
 801ba18:	b538      	push	{r3, r4, r5, lr}
 801ba1a:	4d06      	ldr	r5, [pc, #24]	; (801ba34 <_isatty_r+0x1c>)
 801ba1c:	2300      	movs	r3, #0
 801ba1e:	4604      	mov	r4, r0
 801ba20:	4608      	mov	r0, r1
 801ba22:	602b      	str	r3, [r5, #0]
 801ba24:	f7e7 ffe5 	bl	80039f2 <_isatty>
 801ba28:	1c43      	adds	r3, r0, #1
 801ba2a:	d102      	bne.n	801ba32 <_isatty_r+0x1a>
 801ba2c:	682b      	ldr	r3, [r5, #0]
 801ba2e:	b103      	cbz	r3, 801ba32 <_isatty_r+0x1a>
 801ba30:	6023      	str	r3, [r4, #0]
 801ba32:	bd38      	pop	{r3, r4, r5, pc}
 801ba34:	20007370 	.word	0x20007370

0801ba38 <_sbrk_r>:
 801ba38:	b538      	push	{r3, r4, r5, lr}
 801ba3a:	4d06      	ldr	r5, [pc, #24]	; (801ba54 <_sbrk_r+0x1c>)
 801ba3c:	2300      	movs	r3, #0
 801ba3e:	4604      	mov	r4, r0
 801ba40:	4608      	mov	r0, r1
 801ba42:	602b      	str	r3, [r5, #0]
 801ba44:	f7e7 ffee 	bl	8003a24 <_sbrk>
 801ba48:	1c43      	adds	r3, r0, #1
 801ba4a:	d102      	bne.n	801ba52 <_sbrk_r+0x1a>
 801ba4c:	682b      	ldr	r3, [r5, #0]
 801ba4e:	b103      	cbz	r3, 801ba52 <_sbrk_r+0x1a>
 801ba50:	6023      	str	r3, [r4, #0]
 801ba52:	bd38      	pop	{r3, r4, r5, pc}
 801ba54:	20007370 	.word	0x20007370

0801ba58 <abort>:
 801ba58:	b508      	push	{r3, lr}
 801ba5a:	2006      	movs	r0, #6
 801ba5c:	f000 f860 	bl	801bb20 <raise>
 801ba60:	2001      	movs	r0, #1
 801ba62:	f7e7 ff67 	bl	8003934 <_exit>

0801ba66 <_calloc_r>:
 801ba66:	b537      	push	{r0, r1, r2, r4, r5, lr}
 801ba68:	fba1 2402 	umull	r2, r4, r1, r2
 801ba6c:	b94c      	cbnz	r4, 801ba82 <_calloc_r+0x1c>
 801ba6e:	4611      	mov	r1, r2
 801ba70:	9201      	str	r2, [sp, #4]
 801ba72:	f7ff f951 	bl	801ad18 <_malloc_r>
 801ba76:	9a01      	ldr	r2, [sp, #4]
 801ba78:	4605      	mov	r5, r0
 801ba7a:	b930      	cbnz	r0, 801ba8a <_calloc_r+0x24>
 801ba7c:	4628      	mov	r0, r5
 801ba7e:	b003      	add	sp, #12
 801ba80:	bd30      	pop	{r4, r5, pc}
 801ba82:	220c      	movs	r2, #12
 801ba84:	6002      	str	r2, [r0, #0]
 801ba86:	2500      	movs	r5, #0
 801ba88:	e7f8      	b.n	801ba7c <_calloc_r+0x16>
 801ba8a:	4621      	mov	r1, r4
 801ba8c:	f7fe fa36 	bl	8019efc <memset>
 801ba90:	e7f4      	b.n	801ba7c <_calloc_r+0x16>

0801ba92 <__ascii_mbtowc>:
 801ba92:	b082      	sub	sp, #8
 801ba94:	b901      	cbnz	r1, 801ba98 <__ascii_mbtowc+0x6>
 801ba96:	a901      	add	r1, sp, #4
 801ba98:	b142      	cbz	r2, 801baac <__ascii_mbtowc+0x1a>
 801ba9a:	b14b      	cbz	r3, 801bab0 <__ascii_mbtowc+0x1e>
 801ba9c:	7813      	ldrb	r3, [r2, #0]
 801ba9e:	600b      	str	r3, [r1, #0]
 801baa0:	7812      	ldrb	r2, [r2, #0]
 801baa2:	1e10      	subs	r0, r2, #0
 801baa4:	bf18      	it	ne
 801baa6:	2001      	movne	r0, #1
 801baa8:	b002      	add	sp, #8
 801baaa:	4770      	bx	lr
 801baac:	4610      	mov	r0, r2
 801baae:	e7fb      	b.n	801baa8 <__ascii_mbtowc+0x16>
 801bab0:	f06f 0001 	mvn.w	r0, #1
 801bab4:	e7f8      	b.n	801baa8 <__ascii_mbtowc+0x16>

0801bab6 <__ascii_wctomb>:
 801bab6:	b149      	cbz	r1, 801bacc <__ascii_wctomb+0x16>
 801bab8:	2aff      	cmp	r2, #255	; 0xff
 801baba:	bf85      	ittet	hi
 801babc:	238a      	movhi	r3, #138	; 0x8a
 801babe:	6003      	strhi	r3, [r0, #0]
 801bac0:	700a      	strbls	r2, [r1, #0]
 801bac2:	f04f 30ff 	movhi.w	r0, #4294967295
 801bac6:	bf98      	it	ls
 801bac8:	2001      	movls	r0, #1
 801baca:	4770      	bx	lr
 801bacc:	4608      	mov	r0, r1
 801bace:	4770      	bx	lr

0801bad0 <_raise_r>:
 801bad0:	291f      	cmp	r1, #31
 801bad2:	b538      	push	{r3, r4, r5, lr}
 801bad4:	4604      	mov	r4, r0
 801bad6:	460d      	mov	r5, r1
 801bad8:	d904      	bls.n	801bae4 <_raise_r+0x14>
 801bada:	2316      	movs	r3, #22
 801badc:	6003      	str	r3, [r0, #0]
 801bade:	f04f 30ff 	mov.w	r0, #4294967295
 801bae2:	bd38      	pop	{r3, r4, r5, pc}
 801bae4:	6bc2      	ldr	r2, [r0, #60]	; 0x3c
 801bae6:	b112      	cbz	r2, 801baee <_raise_r+0x1e>
 801bae8:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 801baec:	b94b      	cbnz	r3, 801bb02 <_raise_r+0x32>
 801baee:	4620      	mov	r0, r4
 801baf0:	f000 f830 	bl	801bb54 <_getpid_r>
 801baf4:	462a      	mov	r2, r5
 801baf6:	4601      	mov	r1, r0
 801baf8:	4620      	mov	r0, r4
 801bafa:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 801bafe:	f000 b817 	b.w	801bb30 <_kill_r>
 801bb02:	2b01      	cmp	r3, #1
 801bb04:	d00a      	beq.n	801bb1c <_raise_r+0x4c>
 801bb06:	1c59      	adds	r1, r3, #1
 801bb08:	d103      	bne.n	801bb12 <_raise_r+0x42>
 801bb0a:	2316      	movs	r3, #22
 801bb0c:	6003      	str	r3, [r0, #0]
 801bb0e:	2001      	movs	r0, #1
 801bb10:	e7e7      	b.n	801bae2 <_raise_r+0x12>
 801bb12:	2400      	movs	r4, #0
 801bb14:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 801bb18:	4628      	mov	r0, r5
 801bb1a:	4798      	blx	r3
 801bb1c:	2000      	movs	r0, #0
 801bb1e:	e7e0      	b.n	801bae2 <_raise_r+0x12>

0801bb20 <raise>:
 801bb20:	4b02      	ldr	r3, [pc, #8]	; (801bb2c <raise+0xc>)
 801bb22:	4601      	mov	r1, r0
 801bb24:	6818      	ldr	r0, [r3, #0]
 801bb26:	f7ff bfd3 	b.w	801bad0 <_raise_r>
 801bb2a:	bf00      	nop
 801bb2c:	200000bc 	.word	0x200000bc

0801bb30 <_kill_r>:
 801bb30:	b538      	push	{r3, r4, r5, lr}
 801bb32:	4d07      	ldr	r5, [pc, #28]	; (801bb50 <_kill_r+0x20>)
 801bb34:	2300      	movs	r3, #0
 801bb36:	4604      	mov	r4, r0
 801bb38:	4608      	mov	r0, r1
 801bb3a:	4611      	mov	r1, r2
 801bb3c:	602b      	str	r3, [r5, #0]
 801bb3e:	f7e7 fee7 	bl	8003910 <_kill>
 801bb42:	1c43      	adds	r3, r0, #1
 801bb44:	d102      	bne.n	801bb4c <_kill_r+0x1c>
 801bb46:	682b      	ldr	r3, [r5, #0]
 801bb48:	b103      	cbz	r3, 801bb4c <_kill_r+0x1c>
 801bb4a:	6023      	str	r3, [r4, #0]
 801bb4c:	bd38      	pop	{r3, r4, r5, pc}
 801bb4e:	bf00      	nop
 801bb50:	20007370 	.word	0x20007370

0801bb54 <_getpid_r>:
 801bb54:	f7e7 bed4 	b.w	8003900 <_getpid>

0801bb58 <_init>:
 801bb58:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801bb5a:	bf00      	nop
 801bb5c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 801bb5e:	bc08      	pop	{r3}
 801bb60:	469e      	mov	lr, r3
 801bb62:	4770      	bx	lr

0801bb64 <_fini>:
 801bb64:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801bb66:	bf00      	nop
 801bb68:	bcf8      	pop	{r3, r4, r5, r6, r7}
 801bb6a:	bc08      	pop	{r3}
 801bb6c:	469e      	mov	lr, r3
 801bb6e:	4770      	bx	lr

0801bb70 <__calc_fixed_time_MW_sweep_veneer>:
 801bb70:	f85f f000 	ldr.w	pc, [pc]	; 801bb74 <__calc_fixed_time_MW_sweep_veneer+0x4>
 801bb74:	00000dd9 	.word	0x00000dd9

0801bb78 <__init_synthesiser_veneer>:
 801bb78:	f85f f000 	ldr.w	pc, [pc]	; 801bb7c <__init_synthesiser_veneer+0x4>
 801bb7c:	000007f1 	.word	0x000007f1

0801bb80 <__measure_POP_cycle_time_veneer>:
 801bb80:	f85f f000 	ldr.w	pc, [pc]	; 801bb84 <__measure_POP_cycle_time_veneer+0x4>
 801bb84:	000005b1 	.word	0x000005b1

0801bb88 <__stop_MW_operation_veneer>:
 801bb88:	f85f f000 	ldr.w	pc, [pc]	; 801bb8c <__stop_MW_operation_veneer+0x4>
 801bb8c:	00001471 	.word	0x00001471

0801bb90 <__laser_update_veneer>:
 801bb90:	f85f f000 	ldr.w	pc, [pc]	; 801bb94 <__laser_update_veneer+0x4>
 801bb94:	0000014d 	.word	0x0000014d

0801bb98 <__start_laser_ramp_veneer>:
 801bb98:	f85f f000 	ldr.w	pc, [pc]	; 801bb9c <__start_laser_ramp_veneer+0x4>
 801bb9c:	00000081 	.word	0x00000081

0801bba0 <__timer_delay_veneer>:
 801bba0:	f85f f000 	ldr.w	pc, [pc]	; 801bba4 <__timer_delay_veneer+0x4>
 801bba4:	00001a95 	.word	0x00001a95

0801bba8 <__MW_update_veneer>:
 801bba8:	f85f f000 	ldr.w	pc, [pc]	; 801bbac <__MW_update_veneer+0x4>
 801bbac:	000014b1 	.word	0x000014b1
