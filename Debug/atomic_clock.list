
atomic_clock.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000298  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .itcm         00001ae0  00000000  08000298  00020000  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .text         0001a040  08001d80  08001d80  00021d80  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  3 .user_flash   00000000  08100000  08100000  0004022c  2**0
                  CONTENTS
  4 .rodata       00003ae8  0801bdc0  0801bdc0  0003bdc0  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .ARM          00000008  0801f8a8  0801f8a8  0003f8a8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  6 .init_array   00000004  0801f8b0  0801f8b0  0003f8b0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0801f8b4  0801f8b4  0003f8b4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000022c  20000000  0801f8b8  00040000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000714c  20000230  0801fae4  00040230  2**3
                  ALLOC
 10 ._user_heap_stack 00000604  2000737c  0801fae4  0004737c  2**0
                  ALLOC
 11 .lwip_sec     00044b83  30000000  30000000  00050000  2**2
                  ALLOC
 12 .ARM.attributes 0000002e  00000000  00000000  0004022c  2**0
                  CONTENTS, READONLY
 13 .comment      00000043  00000000  00000000  0004025a  2**0
                  CONTENTS, READONLY
 14 .debug_info   000398e6  00000000  00000000  0004029d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_abbrev 00007649  00000000  00000000  00079b83  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_aranges 00002a00  00000000  00000000  000811d0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_rnglists 00002180  00000000  00000000  00083bd0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_macro  00011f11  00000000  00000000  00085d50  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_line   00041643  00000000  00000000  00097c61  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_str    001a979e  00000000  00000000  000d92a4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_frame  0000c0e4  00000000  00000000  00282a44  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 00000052  00000000  00000000  0028eb28  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .itcm:

00000000 <start_laser_tuning>:
/**
  * @brief  Function x.
  * @retval None
  */

void start_laser_tuning(void) {
       0:	b580      	push	{r7, lr}
       2:	af00      	add	r7, sp, #0
	stop_MW_operation(); //releases timers and ensures that sample pulse is generated for ADC
       4:	f001 fa12 	bl	142c <stop_MW_operation>
	laser_state = LASER_STEPPED_UP;
       8:	4b17      	ldr	r3, [pc, #92]	; (68 <start_laser_tuning+0x68>)
       a:	2202      	movs	r2, #2
       c:	701a      	strb	r2, [r3, #0]
	HAL_GPIO_WritePin(LASER_TUNING_GPIO_Port, LASER_TUNING_Pin, GPIO_PIN_SET); //Laser_tuning output high
       e:	2201      	movs	r2, #1
      10:	f44f 5180 	mov.w	r1, #4096	; 0x1000
      14:	4815      	ldr	r0, [pc, #84]	; (6c <start_laser_tuning+0x6c>)
      16:	f001 fd43 	bl	1aa0 <__HAL_GPIO_WritePin_veneer>
	if (laser_mod_value > (LASER_MAX_MOD - LASER_STEP)) {
      1a:	4b15      	ldr	r3, [pc, #84]	; (70 <start_laser_tuning+0x70>)
      1c:	881b      	ldrh	r3, [r3, #0]
      1e:	461a      	mov	r2, r3
      20:	2303      	movs	r3, #3
      22:	4619      	mov	r1, r3
      24:	f240 63c7 	movw	r3, #1735	; 0x6c7
      28:	1a5b      	subs	r3, r3, r1
      2a:	429a      	cmp	r2, r3
      2c:	dd0a      	ble.n	44 <start_laser_tuning+0x44>
	    printf("LOSS OF LASER LOCK\r\n");
      2e:	4811      	ldr	r0, [pc, #68]	; (74 <start_laser_tuning+0x74>)
      30:	f001 fd4e 	bl	1ad0 <__puts_veneer>
	    printf("Modulation value outside bounds: %u\r\n", laser_mod_value);
      34:	4b0e      	ldr	r3, [pc, #56]	; (70 <start_laser_tuning+0x70>)
      36:	881b      	ldrh	r3, [r3, #0]
      38:	4619      	mov	r1, r3
      3a:	480f      	ldr	r0, [pc, #60]	; (78 <start_laser_tuning+0x78>)
      3c:	f001 fd34 	bl	1aa8 <__printf_veneer>
		Error_Handler();
      40:	f001 fd1e 	bl	1a80 <__Error_Handler_veneer>
	}
	laser_mod_value += LASER_STEP;
      44:	4b0a      	ldr	r3, [pc, #40]	; (70 <start_laser_tuning+0x70>)
      46:	881b      	ldrh	r3, [r3, #0]
      48:	2203      	movs	r2, #3
      4a:	4413      	add	r3, r2
      4c:	b29a      	uxth	r2, r3
      4e:	4b08      	ldr	r3, [pc, #32]	; (70 <start_laser_tuning+0x70>)
      50:	801a      	strh	r2, [r3, #0]
	HAL_DAC_SetValue(&hdac1, DAC_CHANNEL_2, DAC_ALIGN_12B_R, laser_mod_value); //
      52:	4b07      	ldr	r3, [pc, #28]	; (70 <start_laser_tuning+0x70>)
      54:	881b      	ldrh	r3, [r3, #0]
      56:	2200      	movs	r2, #0
      58:	2110      	movs	r1, #16
      5a:	4808      	ldr	r0, [pc, #32]	; (7c <start_laser_tuning+0x7c>)
      5c:	f001 fd3c 	bl	1ad8 <__HAL_DAC_SetValue_veneer>
	reset_adc_samples(); //reset ADC samples including sample count
      60:	f000 fab6 	bl	5d0 <reset_adc_samples>
	#ifdef LASER_VERBOSE
	printf("Started laser tuning\r\n");
	#endif //LASER_VERBOSE
}
      64:	bf00      	nop
      66:	bd80      	pop	{r7, pc}
      68:	2000024c 	.word	0x2000024c
      6c:	58020400 	.word	0x58020400
      70:	20000000 	.word	0x20000000
      74:	0801bdc0 	.word	0x0801bdc0
      78:	0801bdd4 	.word	0x0801bdd4
      7c:	200002c0 	.word	0x200002c0

00000080 <start_laser_ramp>:

/**
  * @brief  Starts a laser scan
  * @retval None
  */
void start_laser_ramp(void) {
      80:	b580      	push	{r7, lr}
      82:	af00      	add	r7, sp, #0
	stop_MW_operation(); //releases timers and ensures that sample pulse is generated for ADC
      84:	f001 f9d2 	bl	142c <stop_MW_operation>
	laser_state = LASER_RAMP_PHASE_ONE;
      88:	4b14      	ldr	r3, [pc, #80]	; (dc <start_laser_ramp+0x5c>)
      8a:	2204      	movs	r2, #4
      8c:	701a      	strb	r2, [r3, #0]
	HAL_GPIO_WritePin(LASER_TUNING_GPIO_Port, LASER_TUNING_Pin, GPIO_PIN_SET); //Laser_tuning output high
      8e:	2201      	movs	r2, #1
      90:	f44f 5180 	mov.w	r1, #4096	; 0x1000
      94:	4812      	ldr	r0, [pc, #72]	; (e0 <start_laser_ramp+0x60>)
      96:	f001 fd03 	bl	1aa0 <__HAL_GPIO_WritePin_veneer>
	HAL_GPIO_WritePin(SCOPE_TRIG_OUT_GPIO_Port, SCOPE_TRIG_OUT_Pin, GPIO_PIN_SET); // Sets trigger output high
      9a:	2201      	movs	r2, #1
      9c:	2101      	movs	r1, #1
      9e:	4811      	ldr	r0, [pc, #68]	; (e4 <start_laser_ramp+0x64>)
      a0:	f001 fcfe 	bl	1aa0 <__HAL_GPIO_WritePin_veneer>
	adc_averaged_max = 0;
      a4:	4b10      	ldr	r3, [pc, #64]	; (e8 <start_laser_ramp+0x68>)
      a6:	2200      	movs	r2, #0
      a8:	601a      	str	r2, [r3, #0]
	adc_averaged_min = 60000;
      aa:	4b10      	ldr	r3, [pc, #64]	; (ec <start_laser_ramp+0x6c>)
      ac:	f64e 2260 	movw	r2, #60000	; 0xea60
      b0:	601a      	str	r2, [r3, #0]
	laser_mod_value = LASER_MIN_MOD;
      b2:	4b0f      	ldr	r3, [pc, #60]	; (f0 <start_laser_ramp+0x70>)
      b4:	220a      	movs	r2, #10
      b6:	801a      	strh	r2, [r3, #0]
	HAL_DAC_SetValue(&hdac1, DAC_CHANNEL_2, DAC_ALIGN_12B_R, laser_mod_value); //
      b8:	4b0d      	ldr	r3, [pc, #52]	; (f0 <start_laser_ramp+0x70>)
      ba:	881b      	ldrh	r3, [r3, #0]
      bc:	2200      	movs	r2, #0
      be:	2110      	movs	r1, #16
      c0:	480c      	ldr	r0, [pc, #48]	; (f4 <start_laser_ramp+0x74>)
      c2:	f001 fd09 	bl	1ad8 <__HAL_DAC_SetValue_veneer>
	start_timer(MW_TIMER); //using MW for 1s delay
      c6:	4b0c      	ldr	r3, [pc, #48]	; (f8 <start_laser_ramp+0x78>)
      c8:	681b      	ldr	r3, [r3, #0]
      ca:	4618      	mov	r0, r3
      cc:	f001 fc1e 	bl	190c <start_timer>
    printf("1s delay to allow LD temperature to equalise.\r\n");
      d0:	480a      	ldr	r0, [pc, #40]	; (fc <start_laser_ramp+0x7c>)
      d2:	f001 fcfd 	bl	1ad0 <__puts_veneer>
}
      d6:	bf00      	nop
      d8:	bd80      	pop	{r7, pc}
      da:	bf00      	nop
      dc:	2000024c 	.word	0x2000024c
      e0:	58020400 	.word	0x58020400
      e4:	58021800 	.word	0x58021800
      e8:	20000634 	.word	0x20000634
      ec:	20000638 	.word	0x20000638
      f0:	20000000 	.word	0x20000000
      f4:	200002c0 	.word	0x200002c0
      f8:	2000001c 	.word	0x2000001c
      fc:	0801bdfc 	.word	0x0801bdfc

00000100 <stop_laser_tuning>:

/**
  * @brief  Stops laser tuning ready to return to POP
  * @retval None
  */
void stop_laser_tuning(void) {
     100:	b580      	push	{r7, lr}
     102:	af00      	add	r7, sp, #0
	laser_state = LASER_ON_FREQ;
     104:	4b08      	ldr	r3, [pc, #32]	; (128 <stop_laser_tuning+0x28>)
     106:	2200      	movs	r2, #0
     108:	701a      	strb	r2, [r3, #0]
	stop_timer(MW_TIMER); //release MW_timer
     10a:	4b08      	ldr	r3, [pc, #32]	; (12c <stop_laser_tuning+0x2c>)
     10c:	681b      	ldr	r3, [r3, #0]
     10e:	4618      	mov	r0, r3
     110:	f001 fc1a 	bl	1948 <stop_timer>
//	stop_timer(SWEEP_TIMER); //release SWEEP_timer
	HAL_GPIO_WritePin(LASER_TUNING_GPIO_Port, LASER_TUNING_Pin, GPIO_PIN_RESET); // Laser_tuning output low
     114:	2200      	movs	r2, #0
     116:	f44f 5180 	mov.w	r1, #4096	; 0x1000
     11a:	4805      	ldr	r0, [pc, #20]	; (130 <stop_laser_tuning+0x30>)
     11c:	f001 fcc0 	bl	1aa0 <__HAL_GPIO_WritePin_veneer>
	reset_adc_samples(); //reset ADC samples including sample count
     120:	f000 fa56 	bl	5d0 <reset_adc_samples>
}
     124:	bf00      	nop
     126:	bd80      	pop	{r7, pc}
     128:	2000024c 	.word	0x2000024c
     12c:	2000001c 	.word	0x2000001c
     130:	58020400 	.word	0x58020400

00000134 <laser_update>:

/**
  * @brief  Checks laser locking status to see if an action is needed.
  * @retval True if an action was taken
  */
const bool laser_update(void) {
     134:	b580      	push	{r7, lr}
     136:	b082      	sub	sp, #8
     138:	af00      	add	r7, sp, #0
	bool action_taken = false;
     13a:	2300      	movs	r3, #0
     13c:	71fb      	strb	r3, [r7, #7]
	uint8_t local_copy_of_laser_state = laser_state; //hack to make switch statement behave
     13e:	4b84      	ldr	r3, [pc, #528]	; (350 <_Min_Heap_Size+0x150>)
     140:	781b      	ldrb	r3, [r3, #0]
     142:	71bb      	strb	r3, [r7, #6]
	switch (local_copy_of_laser_state)
     144:	79bb      	ldrb	r3, [r7, #6]
     146:	2b08      	cmp	r3, #8
     148:	f200 81ba 	bhi.w	4c0 <_Min_Stack_Size+0xc0>
     14c:	a201      	add	r2, pc, #4	; (adr r2, 154 <laser_update+0x20>)
     14e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
     152:	bf00      	nop
     154:	000004d9 	.word	0x000004d9
     158:	00000179 	.word	0x00000179
     15c:	000001a7 	.word	0x000001a7
     160:	0000020f 	.word	0x0000020f
     164:	00000283 	.word	0x00000283
     168:	000002c1 	.word	0x000002c1
     16c:	00000399 	.word	0x00000399
     170:	0000041f 	.word	0x0000041f
     174:	0000048d 	.word	0x0000048d
	{
		case LASER_ON_FREQ:
			break; //no action to take
		case LASER_TEMP_STABILISING:
			if (check_timer(MW_TIMER) < LASER_STAB_US) return(false); //Still waiting, no action taken
     178:	4b76      	ldr	r3, [pc, #472]	; (354 <_Min_Heap_Size+0x154>)
     17a:	681b      	ldr	r3, [r3, #0]
     17c:	4618      	mov	r0, r3
     17e:	f001 fbf5 	bl	196c <check_timer>
     182:	4603      	mov	r3, r0
     184:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
     188:	d201      	bcs.n	18e <laser_update+0x5a>
     18a:	2300      	movs	r3, #0
     18c:	e1b0      	b.n	4f0 <_Min_Stack_Size+0xf0>
			action_taken = true;
     18e:	2301      	movs	r3, #1
     190:	71fb      	strb	r3, [r7, #7]
			stop_timer(MW_TIMER); //release timer
     192:	4b70      	ldr	r3, [pc, #448]	; (354 <_Min_Heap_Size+0x154>)
     194:	681b      	ldr	r3, [r3, #0]
     196:	4618      	mov	r0, r3
     198:	f001 fbd6 	bl	1948 <stop_timer>
			laser_state = LASER_ON_FREQ;
     19c:	4b6c      	ldr	r3, [pc, #432]	; (350 <_Min_Heap_Size+0x150>)
     19e:	2200      	movs	r2, #0
     1a0:	701a      	strb	r2, [r3, #0]
			reset_adc_samples(); //reset ADC samples including sample count
     1a2:	f000 fa15 	bl	5d0 <reset_adc_samples>
		case LASER_STEPPED_UP:
			if(adc_average_updated) {
     1a6:	4b6c      	ldr	r3, [pc, #432]	; (358 <_Min_Heap_Size+0x158>)
     1a8:	781b      	ldrb	r3, [r3, #0]
     1aa:	2b00      	cmp	r3, #0
     1ac:	f000 8196 	beq.w	4dc <_Min_Stack_Size+0xdc>
				adc_polled_above = adc_averaged_val;
     1b0:	4b6a      	ldr	r3, [pc, #424]	; (35c <_Min_Heap_Size+0x15c>)
     1b2:	681b      	ldr	r3, [r3, #0]
     1b4:	4a6a      	ldr	r2, [pc, #424]	; (360 <_Min_Heap_Size+0x160>)
     1b6:	6013      	str	r3, [r2, #0]
				laser_state = LASER_STEPPED_DOWN;
     1b8:	4b65      	ldr	r3, [pc, #404]	; (350 <_Min_Heap_Size+0x150>)
     1ba:	2203      	movs	r2, #3
     1bc:	701a      	strb	r2, [r3, #0]
				if (laser_mod_value < LASER_MIN_MOD + (2 * LASER_STEP)) {
     1be:	4b69      	ldr	r3, [pc, #420]	; (364 <_Min_Heap_Size+0x164>)
     1c0:	881b      	ldrh	r3, [r3, #0]
     1c2:	461a      	mov	r2, r3
     1c4:	2303      	movs	r3, #3
     1c6:	3305      	adds	r3, #5
     1c8:	005b      	lsls	r3, r3, #1
     1ca:	429a      	cmp	r2, r3
     1cc:	da0a      	bge.n	1e4 <laser_update+0xb0>
				    printf("LOSS OF LASER LOCK\r\n");
     1ce:	4866      	ldr	r0, [pc, #408]	; (368 <_Min_Heap_Size+0x168>)
     1d0:	f001 fc7e 	bl	1ad0 <__puts_veneer>
				    printf("Modulation value outside bounds: %u\r\n", laser_mod_value);
     1d4:	4b63      	ldr	r3, [pc, #396]	; (364 <_Min_Heap_Size+0x164>)
     1d6:	881b      	ldrh	r3, [r3, #0]
     1d8:	4619      	mov	r1, r3
     1da:	4864      	ldr	r0, [pc, #400]	; (36c <_Min_Heap_Size+0x16c>)
     1dc:	f001 fc64 	bl	1aa8 <__printf_veneer>
					Error_Handler();
     1e0:	f001 fc4e 	bl	1a80 <__Error_Handler_veneer>
				}
				laser_mod_value = laser_mod_value - (2 * LASER_STEP);
     1e4:	4b5f      	ldr	r3, [pc, #380]	; (364 <_Min_Heap_Size+0x164>)
     1e6:	881a      	ldrh	r2, [r3, #0]
     1e8:	2303      	movs	r3, #3
     1ea:	005b      	lsls	r3, r3, #1
     1ec:	b29b      	uxth	r3, r3
     1ee:	1ad3      	subs	r3, r2, r3
     1f0:	b29a      	uxth	r2, r3
     1f2:	4b5c      	ldr	r3, [pc, #368]	; (364 <_Min_Heap_Size+0x164>)
     1f4:	801a      	strh	r2, [r3, #0]
				HAL_DAC_SetValue(&hdac1, DAC_CHANNEL_2, DAC_ALIGN_12B_R, laser_mod_value); //
     1f6:	4b5b      	ldr	r3, [pc, #364]	; (364 <_Min_Heap_Size+0x164>)
     1f8:	881b      	ldrh	r3, [r3, #0]
     1fa:	2200      	movs	r2, #0
     1fc:	2110      	movs	r1, #16
     1fe:	485c      	ldr	r0, [pc, #368]	; (370 <_Min_Heap_Size+0x170>)
     200:	f001 fc6a 	bl	1ad8 <__HAL_DAC_SetValue_veneer>
				reset_adc_samples(); //reset ADC samples including sample count
     204:	f000 f9e4 	bl	5d0 <reset_adc_samples>
				action_taken = true;
     208:	2301      	movs	r3, #1
     20a:	71fb      	strb	r3, [r7, #7]
			}
			break;
     20c:	e166      	b.n	4dc <_Min_Stack_Size+0xdc>
		case LASER_STEPPED_DOWN:
			if(adc_average_updated) {
     20e:	4b52      	ldr	r3, [pc, #328]	; (358 <_Min_Heap_Size+0x158>)
     210:	781b      	ldrb	r3, [r3, #0]
     212:	2b00      	cmp	r3, #0
     214:	f000 8164 	beq.w	4e0 <_Min_Stack_Size+0xe0>
				adc_polled_below = adc_averaged_val;
     218:	4b50      	ldr	r3, [pc, #320]	; (35c <_Min_Heap_Size+0x15c>)
     21a:	681b      	ldr	r3, [r3, #0]
     21c:	4a55      	ldr	r2, [pc, #340]	; (374 <_Min_Heap_Size+0x174>)
     21e:	6013      	str	r3, [r2, #0]
				laser_mod_value += LASER_STEP; //return laser modulation value to pre-tuned value
     220:	4b50      	ldr	r3, [pc, #320]	; (364 <_Min_Heap_Size+0x164>)
     222:	881b      	ldrh	r3, [r3, #0]
     224:	2203      	movs	r2, #3
     226:	4413      	add	r3, r2
     228:	b29a      	uxth	r2, r3
     22a:	4b4e      	ldr	r3, [pc, #312]	; (364 <_Min_Heap_Size+0x164>)
     22c:	801a      	strh	r2, [r3, #0]
				action_taken = true;
     22e:	2301      	movs	r3, #1
     230:	71fb      	strb	r3, [r7, #7]
				if (adc_polled_below > adc_polled_above) {
     232:	4b50      	ldr	r3, [pc, #320]	; (374 <_Min_Heap_Size+0x174>)
     234:	681a      	ldr	r2, [r3, #0]
     236:	4b4a      	ldr	r3, [pc, #296]	; (360 <_Min_Heap_Size+0x160>)
     238:	681b      	ldr	r3, [r3, #0]
     23a:	429a      	cmp	r2, r3
     23c:	d905      	bls.n	24a <_Min_Heap_Size+0x4a>
					laser_mod_value++; //increase current by incrementing laser modulation value
     23e:	4b49      	ldr	r3, [pc, #292]	; (364 <_Min_Heap_Size+0x164>)
     240:	881b      	ldrh	r3, [r3, #0]
     242:	3301      	adds	r3, #1
     244:	b29a      	uxth	r2, r3
     246:	4b47      	ldr	r3, [pc, #284]	; (364 <_Min_Heap_Size+0x164>)
     248:	801a      	strh	r2, [r3, #0]
				}
				if (adc_polled_above > adc_polled_below) {
     24a:	4b45      	ldr	r3, [pc, #276]	; (360 <_Min_Heap_Size+0x160>)
     24c:	681a      	ldr	r2, [r3, #0]
     24e:	4b49      	ldr	r3, [pc, #292]	; (374 <_Min_Heap_Size+0x174>)
     250:	681b      	ldr	r3, [r3, #0]
     252:	429a      	cmp	r2, r3
     254:	d905      	bls.n	262 <_Min_Heap_Size+0x62>
					laser_mod_value--; //decrease current by decrementing laser modulation value
     256:	4b43      	ldr	r3, [pc, #268]	; (364 <_Min_Heap_Size+0x164>)
     258:	881b      	ldrh	r3, [r3, #0]
     25a:	3b01      	subs	r3, #1
     25c:	b29a      	uxth	r2, r3
     25e:	4b41      	ldr	r3, [pc, #260]	; (364 <_Min_Heap_Size+0x164>)
     260:	801a      	strh	r2, [r3, #0]
				}
				HAL_DAC_SetValue(&hdac1, DAC_CHANNEL_2, DAC_ALIGN_12B_R, laser_mod_value);
     262:	4b40      	ldr	r3, [pc, #256]	; (364 <_Min_Heap_Size+0x164>)
     264:	881b      	ldrh	r3, [r3, #0]
     266:	2200      	movs	r2, #0
     268:	2110      	movs	r1, #16
     26a:	4841      	ldr	r0, [pc, #260]	; (370 <_Min_Heap_Size+0x170>)
     26c:	f001 fc34 	bl	1ad8 <__HAL_DAC_SetValue_veneer>
				/* If adding a short delay for LD to stabilise after polling */
				laser_state = LASER_TEMP_STABILISING;
     270:	4b37      	ldr	r3, [pc, #220]	; (350 <_Min_Heap_Size+0x150>)
     272:	2201      	movs	r2, #1
     274:	701a      	strb	r2, [r3, #0]
				start_timer(MW_TIMER); //using MW for short delay
     276:	4b37      	ldr	r3, [pc, #220]	; (354 <_Min_Heap_Size+0x154>)
     278:	681b      	ldr	r3, [r3, #0]
     27a:	4618      	mov	r0, r3
     27c:	f001 fb46 	bl	190c <start_timer>
				/* Substituted with this if no stabilising time is required after polling
				 * laser_state = LASER_ON_FREQ;
				 * reset_adc_samples(); //reset ADC samples including sample count
				 */
			}
			break;
     280:	e12e      	b.n	4e0 <_Min_Stack_Size+0xe0>
		case LASER_RAMP_PHASE_ONE: //waiting for the LD temperature to stabilise
			if (check_timer(MW_TIMER) < 1000000) return(false); //Still waiting, no action taken
     282:	4b34      	ldr	r3, [pc, #208]	; (354 <_Min_Heap_Size+0x154>)
     284:	681b      	ldr	r3, [r3, #0]
     286:	4618      	mov	r0, r3
     288:	f001 fb70 	bl	196c <check_timer>
     28c:	4603      	mov	r3, r0
     28e:	4a3a      	ldr	r2, [pc, #232]	; (378 <_Min_Heap_Size+0x178>)
     290:	4293      	cmp	r3, r2
     292:	d801      	bhi.n	298 <_Min_Heap_Size+0x98>
     294:	2300      	movs	r3, #0
     296:	e12b      	b.n	4f0 <_Min_Stack_Size+0xf0>
			action_taken = true;
     298:	2301      	movs	r3, #1
     29a:	71fb      	strb	r3, [r7, #7]
			stop_timer(MW_TIMER); //release SWEEP_timer
     29c:	4b2d      	ldr	r3, [pc, #180]	; (354 <_Min_Heap_Size+0x154>)
     29e:	681b      	ldr	r3, [r3, #0]
     2a0:	4618      	mov	r0, r3
     2a2:	f001 fb51 	bl	1948 <stop_timer>
			laser_state = LASER_RAMP_PHASE_TWO;
     2a6:	4b2a      	ldr	r3, [pc, #168]	; (350 <_Min_Heap_Size+0x150>)
     2a8:	2205      	movs	r2, #5
     2aa:	701a      	strb	r2, [r3, #0]
			HAL_GPIO_WritePin(SCOPE_TRIG_OUT_GPIO_Port, SCOPE_TRIG_OUT_Pin, GPIO_PIN_RESET); // Sets trigger output low
     2ac:	2200      	movs	r2, #0
     2ae:	2101      	movs	r1, #1
     2b0:	4832      	ldr	r0, [pc, #200]	; (37c <_Min_Heap_Size+0x17c>)
     2b2:	f001 fbf5 	bl	1aa0 <__HAL_GPIO_WritePin_veneer>
			reset_adc_samples(); //reset ADC samples including sample count
     2b6:	f000 f98b 	bl	5d0 <reset_adc_samples>
		    printf("Starting laser frequency scan.\r\n");
     2ba:	4831      	ldr	r0, [pc, #196]	; (380 <_Min_Heap_Size+0x180>)
     2bc:	f001 fc08 	bl	1ad0 <__puts_veneer>
		    //break statement not required here
		case LASER_RAMP_PHASE_TWO: //finding F=2 dip
			if(adc_average_updated) {
     2c0:	4b25      	ldr	r3, [pc, #148]	; (358 <_Min_Heap_Size+0x158>)
     2c2:	781b      	ldrb	r3, [r3, #0]
     2c4:	2b00      	cmp	r3, #0
     2c6:	f000 810d 	beq.w	4e4 <_Min_Stack_Size+0xe4>
				if (adc_averaged_val < adc_averaged_min) {//if new minimum detected
     2ca:	4b24      	ldr	r3, [pc, #144]	; (35c <_Min_Heap_Size+0x15c>)
     2cc:	681a      	ldr	r2, [r3, #0]
     2ce:	4b2d      	ldr	r3, [pc, #180]	; (384 <_Min_Heap_Size+0x184>)
     2d0:	681b      	ldr	r3, [r3, #0]
     2d2:	429a      	cmp	r2, r3
     2d4:	d207      	bcs.n	2e6 <_Min_Heap_Size+0xe6>
					adc_averaged_min = adc_averaged_val; //record new mininum
     2d6:	4b21      	ldr	r3, [pc, #132]	; (35c <_Min_Heap_Size+0x15c>)
     2d8:	681b      	ldr	r3, [r3, #0]
     2da:	4a2a      	ldr	r2, [pc, #168]	; (384 <_Min_Heap_Size+0x184>)
     2dc:	6013      	str	r3, [r2, #0]
					saved_mod_value = laser_mod_value; //record the associated modulation value
     2de:	4b21      	ldr	r3, [pc, #132]	; (364 <_Min_Heap_Size+0x164>)
     2e0:	881a      	ldrh	r2, [r3, #0]
     2e2:	4b29      	ldr	r3, [pc, #164]	; (388 <_Min_Heap_Size+0x188>)
     2e4:	801a      	strh	r2, [r3, #0]
				}
				/* Detect when we've passed F=2 dip
				 * If the latest reading is significantly higher than the minimum
				 * then record F=2 and look for F=3
				 */
				if ((adc_averaged_val - adc_averaged_min) >= DIP_THRESHOLD ) {//if the latest reading is significantly above the minimum
     2e6:	4b1d      	ldr	r3, [pc, #116]	; (35c <_Min_Heap_Size+0x15c>)
     2e8:	681a      	ldr	r2, [r3, #0]
     2ea:	4b26      	ldr	r3, [pc, #152]	; (384 <_Min_Heap_Size+0x184>)
     2ec:	681b      	ldr	r3, [r3, #0]
     2ee:	1ad3      	subs	r3, r2, r3
     2f0:	2b7b      	cmp	r3, #123	; 0x7b
     2f2:	d90a      	bls.n	30a <_Min_Heap_Size+0x10a>
					F2_mod_value = saved_mod_value; //record the modulation value for the F=2 dip
     2f4:	4b24      	ldr	r3, [pc, #144]	; (388 <_Min_Heap_Size+0x188>)
     2f6:	881a      	ldrh	r2, [r3, #0]
     2f8:	4b24      	ldr	r3, [pc, #144]	; (38c <_Min_Heap_Size+0x18c>)
     2fa:	801a      	strh	r2, [r3, #0]
					adc_averaged_min = 60000; //reset the saved minimum
     2fc:	4b21      	ldr	r3, [pc, #132]	; (384 <_Min_Heap_Size+0x184>)
     2fe:	f64e 2260 	movw	r2, #60000	; 0xea60
     302:	601a      	str	r2, [r3, #0]
					laser_state = LASER_RAMP_PHASE_THREE;
     304:	4b12      	ldr	r3, [pc, #72]	; (350 <_Min_Heap_Size+0x150>)
     306:	2206      	movs	r2, #6
     308:	701a      	strb	r2, [r3, #0]
				}
				laser_mod_value += LASER_STEP; //next laser step
     30a:	4b16      	ldr	r3, [pc, #88]	; (364 <_Min_Heap_Size+0x164>)
     30c:	881b      	ldrh	r3, [r3, #0]
     30e:	2203      	movs	r2, #3
     310:	4413      	add	r3, r2
     312:	b29a      	uxth	r2, r3
     314:	4b13      	ldr	r3, [pc, #76]	; (364 <_Min_Heap_Size+0x164>)
     316:	801a      	strh	r2, [r3, #0]
				if (laser_mod_value >= LASER_MAX_MOD) {//if no longer in range
     318:	4b12      	ldr	r3, [pc, #72]	; (364 <_Min_Heap_Size+0x164>)
     31a:	881b      	ldrh	r3, [r3, #0]
     31c:	f240 62c6 	movw	r2, #1734	; 0x6c6
     320:	4293      	cmp	r3, r2
     322:	d908      	bls.n	336 <_Min_Heap_Size+0x136>
				    printf("Have completed absorption scan without detecting any dips.\r\n");
     324:	481a      	ldr	r0, [pc, #104]	; (390 <_Min_Heap_Size+0x190>)
     326:	f001 fbd3 	bl	1ad0 <__puts_veneer>
				    printf("DIP_THRESHOLD: %u\r\n", DIP_THRESHOLD);
     32a:	217c      	movs	r1, #124	; 0x7c
     32c:	4819      	ldr	r0, [pc, #100]	; (394 <_Min_Heap_Size+0x194>)
     32e:	f001 fbbb 	bl	1aa8 <__printf_veneer>
					Error_Handler();
     332:	f001 fba5 	bl	1a80 <__Error_Handler_veneer>
				}
				HAL_DAC_SetValue(&hdac1, DAC_CHANNEL_2, DAC_ALIGN_12B_R, laser_mod_value); //set DAC output pin
     336:	4b0b      	ldr	r3, [pc, #44]	; (364 <_Min_Heap_Size+0x164>)
     338:	881b      	ldrh	r3, [r3, #0]
     33a:	2200      	movs	r2, #0
     33c:	2110      	movs	r1, #16
     33e:	480c      	ldr	r0, [pc, #48]	; (370 <_Min_Heap_Size+0x170>)
     340:	f001 fbca 	bl	1ad8 <__HAL_DAC_SetValue_veneer>
				reset_adc_samples(); //reset ADC samples including sample count
     344:	f000 f944 	bl	5d0 <reset_adc_samples>
				action_taken = true;
     348:	2301      	movs	r3, #1
     34a:	71fb      	strb	r3, [r7, #7]
			}
			break;
     34c:	e0ca      	b.n	4e4 <_Min_Stack_Size+0xe4>
     34e:	bf00      	nop
     350:	2000024c 	.word	0x2000024c
     354:	2000001c 	.word	0x2000001c
     358:	20000630 	.word	0x20000630
     35c:	20000604 	.word	0x20000604
     360:	20000254 	.word	0x20000254
     364:	20000000 	.word	0x20000000
     368:	0801bdc0 	.word	0x0801bdc0
     36c:	0801bdd4 	.word	0x0801bdd4
     370:	200002c0 	.word	0x200002c0
     374:	20000258 	.word	0x20000258
     378:	000f423f 	.word	0x000f423f
     37c:	58021800 	.word	0x58021800
     380:	0801be2c 	.word	0x0801be2c
     384:	20000638 	.word	0x20000638
     388:	2000024e 	.word	0x2000024e
     38c:	20000250 	.word	0x20000250
     390:	0801be4c 	.word	0x0801be4c
     394:	0801be88 	.word	0x0801be88
		case LASER_RAMP_PHASE_THREE: //finding F=3 dip
			if(adc_average_updated) {
     398:	4b57      	ldr	r3, [pc, #348]	; (4f8 <_Min_Stack_Size+0xf8>)
     39a:	781b      	ldrb	r3, [r3, #0]
     39c:	2b00      	cmp	r3, #0
     39e:	f000 80a3 	beq.w	4e8 <_Min_Stack_Size+0xe8>
				if (adc_averaged_val < adc_averaged_min) {//if new minimum detected
     3a2:	4b56      	ldr	r3, [pc, #344]	; (4fc <_Min_Stack_Size+0xfc>)
     3a4:	681a      	ldr	r2, [r3, #0]
     3a6:	4b56      	ldr	r3, [pc, #344]	; (500 <_Min_Stack_Size+0x100>)
     3a8:	681b      	ldr	r3, [r3, #0]
     3aa:	429a      	cmp	r2, r3
     3ac:	d207      	bcs.n	3be <_Min_Heap_Size+0x1be>
					adc_averaged_min = adc_averaged_val; //record new mininum
     3ae:	4b53      	ldr	r3, [pc, #332]	; (4fc <_Min_Stack_Size+0xfc>)
     3b0:	681b      	ldr	r3, [r3, #0]
     3b2:	4a53      	ldr	r2, [pc, #332]	; (500 <_Min_Stack_Size+0x100>)
     3b4:	6013      	str	r3, [r2, #0]
					saved_mod_value = laser_mod_value; //record the associated modulation value
     3b6:	4b53      	ldr	r3, [pc, #332]	; (504 <_Min_Stack_Size+0x104>)
     3b8:	881a      	ldrh	r2, [r3, #0]
     3ba:	4b53      	ldr	r3, [pc, #332]	; (508 <_Min_Stack_Size+0x108>)
     3bc:	801a      	strh	r2, [r3, #0]
				}
				/* Detect when we've passed F=3 dip
				 * If the latest reading is significantly higher than the minimum
				 * then record F=3
				 */
				if ((adc_averaged_val - adc_averaged_min) >= DIP_THRESHOLD) {//if the latest reading is significant above the minimum
     3be:	4b4f      	ldr	r3, [pc, #316]	; (4fc <_Min_Stack_Size+0xfc>)
     3c0:	681a      	ldr	r2, [r3, #0]
     3c2:	4b4f      	ldr	r3, [pc, #316]	; (500 <_Min_Stack_Size+0x100>)
     3c4:	681b      	ldr	r3, [r3, #0]
     3c6:	1ad3      	subs	r3, r2, r3
     3c8:	2b7b      	cmp	r3, #123	; 0x7b
     3ca:	d906      	bls.n	3da <_Min_Heap_Size+0x1da>
					F3_mod_value = saved_mod_value; //record the modulation value for the F=3 dip
     3cc:	4b4e      	ldr	r3, [pc, #312]	; (508 <_Min_Stack_Size+0x108>)
     3ce:	881a      	ldrh	r2, [r3, #0]
     3d0:	4b4e      	ldr	r3, [pc, #312]	; (50c <_Min_Stack_Size+0x10c>)
     3d2:	801a      	strh	r2, [r3, #0]
					laser_state = LASER_RAMP_PHASE_FOUR;
     3d4:	4b4e      	ldr	r3, [pc, #312]	; (510 <_Min_Stack_Size+0x110>)
     3d6:	2207      	movs	r2, #7
     3d8:	701a      	strb	r2, [r3, #0]
				}
				laser_mod_value += LASER_STEP; //next laser step
     3da:	4b4a      	ldr	r3, [pc, #296]	; (504 <_Min_Stack_Size+0x104>)
     3dc:	881b      	ldrh	r3, [r3, #0]
     3de:	2203      	movs	r2, #3
     3e0:	4413      	add	r3, r2
     3e2:	b29a      	uxth	r2, r3
     3e4:	4b47      	ldr	r3, [pc, #284]	; (504 <_Min_Stack_Size+0x104>)
     3e6:	801a      	strh	r2, [r3, #0]
				if (laser_mod_value >= LASER_MAX_MOD) {//if no longer in range
     3e8:	4b46      	ldr	r3, [pc, #280]	; (504 <_Min_Stack_Size+0x104>)
     3ea:	881b      	ldrh	r3, [r3, #0]
     3ec:	f240 62c6 	movw	r2, #1734	; 0x6c6
     3f0:	4293      	cmp	r3, r2
     3f2:	d908      	bls.n	406 <_Min_Stack_Size+0x6>
					printf("Have completed absorption scan without detecting F=3 DIP.\r\n");
     3f4:	4847      	ldr	r0, [pc, #284]	; (514 <_Min_Stack_Size+0x114>)
     3f6:	f001 fb6b 	bl	1ad0 <__puts_veneer>
					printf("DIP_THRESHOLD: %u\r\n", DIP_THRESHOLD);
     3fa:	217c      	movs	r1, #124	; 0x7c
     3fc:	4846      	ldr	r0, [pc, #280]	; (518 <_Min_Stack_Size+0x118>)
     3fe:	f001 fb53 	bl	1aa8 <__printf_veneer>
					Error_Handler();
     402:	f001 fb3d 	bl	1a80 <__Error_Handler_veneer>
				}
				HAL_DAC_SetValue(&hdac1, DAC_CHANNEL_2, DAC_ALIGN_12B_R, laser_mod_value); //set DAC output pin
     406:	4b3f      	ldr	r3, [pc, #252]	; (504 <_Min_Stack_Size+0x104>)
     408:	881b      	ldrh	r3, [r3, #0]
     40a:	2200      	movs	r2, #0
     40c:	2110      	movs	r1, #16
     40e:	4843      	ldr	r0, [pc, #268]	; (51c <_Min_Stack_Size+0x11c>)
     410:	f001 fb62 	bl	1ad8 <__HAL_DAC_SetValue_veneer>
				reset_adc_samples(); //reset ADC samples including sample count
     414:	f000 f8dc 	bl	5d0 <reset_adc_samples>
				action_taken = true;
     418:	2301      	movs	r3, #1
     41a:	71fb      	strb	r3, [r7, #7]
			}
			break;
     41c:	e064      	b.n	4e8 <_Min_Stack_Size+0xe8>
		case LASER_RAMP_PHASE_FOUR: //finishing the current sweep
			if(adc_average_updated) {
     41e:	4b36      	ldr	r3, [pc, #216]	; (4f8 <_Min_Stack_Size+0xf8>)
     420:	781b      	ldrb	r3, [r3, #0]
     422:	2b00      	cmp	r3, #0
     424:	d062      	beq.n	4ec <_Min_Stack_Size+0xec>
				laser_mod_value += LASER_STEP; //next laser step
     426:	4b37      	ldr	r3, [pc, #220]	; (504 <_Min_Stack_Size+0x104>)
     428:	881b      	ldrh	r3, [r3, #0]
     42a:	2203      	movs	r2, #3
     42c:	4413      	add	r3, r2
     42e:	b29a      	uxth	r2, r3
     430:	4b34      	ldr	r3, [pc, #208]	; (504 <_Min_Stack_Size+0x104>)
     432:	801a      	strh	r2, [r3, #0]
				if (laser_mod_value >= LASER_MAX_MOD) {//if no longer in range
     434:	4b33      	ldr	r3, [pc, #204]	; (504 <_Min_Stack_Size+0x104>)
     436:	881b      	ldrh	r3, [r3, #0]
     438:	f240 62c6 	movw	r2, #1734	; 0x6c6
     43c:	4293      	cmp	r3, r2
     43e:	d919      	bls.n	474 <_Min_Stack_Size+0x74>
					printf("Absorption spectroscopy complete.\r\n");
     440:	4837      	ldr	r0, [pc, #220]	; (520 <_Min_Stack_Size+0x120>)
     442:	f001 fb45 	bl	1ad0 <__puts_veneer>
					printf("F=2 dip detected at step %u.\r\n", F2_mod_value);
     446:	4b37      	ldr	r3, [pc, #220]	; (524 <_Min_Stack_Size+0x124>)
     448:	881b      	ldrh	r3, [r3, #0]
     44a:	4619      	mov	r1, r3
     44c:	4836      	ldr	r0, [pc, #216]	; (528 <_Min_Stack_Size+0x128>)
     44e:	f001 fb2b 	bl	1aa8 <__printf_veneer>
					printf("F=3 dip detected at step %u.\r\n", F3_mod_value);
     452:	4b2e      	ldr	r3, [pc, #184]	; (50c <_Min_Stack_Size+0x10c>)
     454:	881b      	ldrh	r3, [r3, #0]
     456:	4619      	mov	r1, r3
     458:	4834      	ldr	r0, [pc, #208]	; (52c <_Min_Stack_Size+0x12c>)
     45a:	f001 fb25 	bl	1aa8 <__printf_veneer>
					if (LOCK_TO_DIP == 2) {
						laser_mod_value = F2_mod_value;
     45e:	4b31      	ldr	r3, [pc, #196]	; (524 <_Min_Stack_Size+0x124>)
     460:	881a      	ldrh	r2, [r3, #0]
     462:	4b28      	ldr	r3, [pc, #160]	; (504 <_Min_Stack_Size+0x104>)
     464:	801a      	strh	r2, [r3, #0]
						laser_mod_value = F3_mod_value;
					} else {
						printf("Illegal DIP specified. LOCK_TO_DIP = %u.\r\n", LOCK_TO_DIP);
						Error_Handler();
					}
					printf("F=%u dip selected.\r\n", LOCK_TO_DIP);
     466:	2102      	movs	r1, #2
     468:	4831      	ldr	r0, [pc, #196]	; (530 <_Min_Stack_Size+0x130>)
     46a:	f001 fb1d 	bl	1aa8 <__printf_veneer>
					laser_state = LASER_TEMP_STABILISING;
     46e:	4b28      	ldr	r3, [pc, #160]	; (510 <_Min_Stack_Size+0x110>)
     470:	2201      	movs	r2, #1
     472:	701a      	strb	r2, [r3, #0]
				}
				HAL_DAC_SetValue(&hdac1, DAC_CHANNEL_2, DAC_ALIGN_12B_R, laser_mod_value); //set DAC output pin
     474:	4b23      	ldr	r3, [pc, #140]	; (504 <_Min_Stack_Size+0x104>)
     476:	881b      	ldrh	r3, [r3, #0]
     478:	2200      	movs	r2, #0
     47a:	2110      	movs	r1, #16
     47c:	4827      	ldr	r0, [pc, #156]	; (51c <_Min_Stack_Size+0x11c>)
     47e:	f001 fb2b 	bl	1ad8 <__HAL_DAC_SetValue_veneer>
				reset_adc_samples(); //reset ADC samples including sample count
     482:	f000 f8a5 	bl	5d0 <reset_adc_samples>
				action_taken = true;
     486:	2301      	movs	r3, #1
     488:	71fb      	strb	r3, [r7, #7]
			}
			break;
     48a:	e02f      	b.n	4ec <_Min_Stack_Size+0xec>
		case LASER_RAMP_PHASE_FIVE: //waiting for the LD temperature to stabilise
			if (check_timer(MW_TIMER) < 1000000) return(false); //Still waiting, no action taken
     48c:	4b29      	ldr	r3, [pc, #164]	; (534 <_Min_Stack_Size+0x134>)
     48e:	681b      	ldr	r3, [r3, #0]
     490:	4618      	mov	r0, r3
     492:	f001 fa6b 	bl	196c <check_timer>
     496:	4603      	mov	r3, r0
     498:	4a27      	ldr	r2, [pc, #156]	; (538 <_Min_Stack_Size+0x138>)
     49a:	4293      	cmp	r3, r2
     49c:	d801      	bhi.n	4a2 <_Min_Stack_Size+0xa2>
     49e:	2300      	movs	r3, #0
     4a0:	e026      	b.n	4f0 <_Min_Stack_Size+0xf0>
			action_taken = true;
     4a2:	2301      	movs	r3, #1
     4a4:	71fb      	strb	r3, [r7, #7]
			stop_timer(MW_TIMER); //release MW_timer
     4a6:	4b23      	ldr	r3, [pc, #140]	; (534 <_Min_Stack_Size+0x134>)
     4a8:	681b      	ldr	r3, [r3, #0]
     4aa:	4618      	mov	r0, r3
     4ac:	f001 fa4c 	bl	1948 <stop_timer>
			laser_state = LASER_ON_FREQ;
     4b0:	4b17      	ldr	r3, [pc, #92]	; (510 <_Min_Stack_Size+0x110>)
     4b2:	2200      	movs	r2, #0
     4b4:	701a      	strb	r2, [r3, #0]
			reset_adc_samples(); //reset ADC samples including sample count
     4b6:	f000 f88b 	bl	5d0 <reset_adc_samples>
		    printf("LD temperature stabilised.\r\n");
     4ba:	4820      	ldr	r0, [pc, #128]	; (53c <_Min_Stack_Size+0x13c>)
     4bc:	f001 fb08 	bl	1ad0 <__puts_veneer>

		default: // Other state
	       printf("laser_update has detected illegal state: %u \r\n", laser_state);
     4c0:	4b13      	ldr	r3, [pc, #76]	; (510 <_Min_Stack_Size+0x110>)
     4c2:	781b      	ldrb	r3, [r3, #0]
     4c4:	4619      	mov	r1, r3
     4c6:	481e      	ldr	r0, [pc, #120]	; (540 <_Min_Stack_Size+0x140>)
     4c8:	f001 faee 	bl	1aa8 <__printf_veneer>
	       printf("local version: %u \r\n", local_copy_of_laser_state);
     4cc:	79bb      	ldrb	r3, [r7, #6]
     4ce:	4619      	mov	r1, r3
     4d0:	481c      	ldr	r0, [pc, #112]	; (544 <_Min_Stack_Size+0x144>)
     4d2:	f001 fae9 	bl	1aa8 <__printf_veneer>
     4d6:	e00a      	b.n	4ee <_Min_Stack_Size+0xee>
			break; //no action to take
     4d8:	bf00      	nop
     4da:	e008      	b.n	4ee <_Min_Stack_Size+0xee>
			break;
     4dc:	bf00      	nop
     4de:	e006      	b.n	4ee <_Min_Stack_Size+0xee>
			break;
     4e0:	bf00      	nop
     4e2:	e004      	b.n	4ee <_Min_Stack_Size+0xee>
			break;
     4e4:	bf00      	nop
     4e6:	e002      	b.n	4ee <_Min_Stack_Size+0xee>
			break;
     4e8:	bf00      	nop
     4ea:	e000      	b.n	4ee <_Min_Stack_Size+0xee>
			break;
     4ec:	bf00      	nop
	}
    return(action_taken);
     4ee:	79fb      	ldrb	r3, [r7, #7]
}
     4f0:	4618      	mov	r0, r3
     4f2:	3708      	adds	r7, #8
     4f4:	46bd      	mov	sp, r7
     4f6:	bd80      	pop	{r7, pc}
     4f8:	20000630 	.word	0x20000630
     4fc:	20000604 	.word	0x20000604
     500:	20000638 	.word	0x20000638
     504:	20000000 	.word	0x20000000
     508:	2000024e 	.word	0x2000024e
     50c:	20000252 	.word	0x20000252
     510:	2000024c 	.word	0x2000024c
     514:	0801be9c 	.word	0x0801be9c
     518:	0801be88 	.word	0x0801be88
     51c:	200002c0 	.word	0x200002c0
     520:	0801bed8 	.word	0x0801bed8
     524:	20000250 	.word	0x20000250
     528:	0801befc 	.word	0x0801befc
     52c:	0801bf1c 	.word	0x0801bf1c
     530:	0801bf3c 	.word	0x0801bf3c
     534:	2000001c 	.word	0x2000001c
     538:	000f423f 	.word	0x000f423f
     53c:	0801bf54 	.word	0x0801bf54
     540:	0801bf70 	.word	0x0801bf70
     544:	0801bfa0 	.word	0x0801bfa0

00000548 <measure_POP_cycle_time>:
  * @brief  Measure POP cycle time
  * @param  None
  * @retval None
  */
void measure_POP_cycle_time (void)
{
     548:	b580      	push	{r7, lr}
     54a:	af00      	add	r7, sp, #0
	/* Measure the period of a POP cycle *AFTER* the ADC has been initialised
	 * Should be performed before calculating sweep settings
	 */
	stop_laser_tuning(); //ensure MW_timer not being used and laser tuning pin high
     54c:	f7ff fdd8 	bl	100 <stop_laser_tuning>
	start_timer(SWEEP_TIMER); //Using sweep timer for 3s timeout
     550:	4b13      	ldr	r3, [pc, #76]	; (5a0 <measure_POP_cycle_time+0x58>)
     552:	681b      	ldr	r3, [r3, #0]
     554:	4618      	mov	r0, r3
     556:	f001 f9d9 	bl	190c <start_timer>
	start_POP_calibration(true);
     55a:	2001      	movs	r0, #1
     55c:	f000 fed8 	bl	1310 <start_POP_calibration>
	//loop here until period of POP cycle has been measured or 3s has elapsed
	//When correctly connected, POP cycle measurement should take 1.3s
	while (!POP_period_us && (check_timer(SWEEP_TIMER) < 3000000)) {
     560:	e001      	b.n	566 <measure_POP_cycle_time+0x1e>
		MW_update();
     562:	f000 ff7b 	bl	145c <MW_update>
	while (!POP_period_us && (check_timer(SWEEP_TIMER) < 3000000)) {
     566:	4b0f      	ldr	r3, [pc, #60]	; (5a4 <measure_POP_cycle_time+0x5c>)
     568:	681b      	ldr	r3, [r3, #0]
     56a:	2b00      	cmp	r3, #0
     56c:	d108      	bne.n	580 <measure_POP_cycle_time+0x38>
     56e:	4b0c      	ldr	r3, [pc, #48]	; (5a0 <measure_POP_cycle_time+0x58>)
     570:	681b      	ldr	r3, [r3, #0]
     572:	4618      	mov	r0, r3
     574:	f001 f9fa 	bl	196c <check_timer>
     578:	4603      	mov	r3, r0
     57a:	4a0b      	ldr	r2, [pc, #44]	; (5a8 <measure_POP_cycle_time+0x60>)
     57c:	4293      	cmp	r3, r2
     57e:	d9f0      	bls.n	562 <measure_POP_cycle_time+0x1a>
//		printf("POP_period_us %lu, SWEEP_TIMER value %lu \r\n", POP_period_us, check_timer(SWEEP_TIMER));
	}
//	printf("Finished loop - POP_period_us %lu, SWEEP_TIMER value %lu \r\n", POP_period_us, check_timer(SWEEP_TIMER));
	stop_timer(SWEEP_TIMER); //stop SWEEP_TIMER
     580:	4b07      	ldr	r3, [pc, #28]	; (5a0 <measure_POP_cycle_time+0x58>)
     582:	681b      	ldr	r3, [r3, #0]
     584:	4618      	mov	r0, r3
     586:	f001 f9df 	bl	1948 <stop_timer>
	if (!POP_period_us) {//if the calibration loop timed out
     58a:	4b06      	ldr	r3, [pc, #24]	; (5a4 <measure_POP_cycle_time+0x5c>)
     58c:	681b      	ldr	r3, [r3, #0]
     58e:	2b00      	cmp	r3, #0
     590:	d102      	bne.n	598 <measure_POP_cycle_time+0x50>
		printf("WARNING - STM32 is not receiving a periodic sample from the FPGA \r\n");
     592:	4806      	ldr	r0, [pc, #24]	; (5ac <measure_POP_cycle_time+0x64>)
     594:	f001 fa9c 	bl	1ad0 <__puts_veneer>
	}
	stop_MW_operation(); //release MW_SWEEP timer and ensure MW_INVALID is cleared
     598:	f000 ff48 	bl	142c <stop_MW_operation>
}
     59c:	bf00      	nop
     59e:	bd80      	pop	{r7, pc}
     5a0:	20000020 	.word	0x20000020
     5a4:	200005fc 	.word	0x200005fc
     5a8:	002dc6bf 	.word	0x002dc6bf
     5ac:	0801bfb8 	.word	0x0801bfb8

000005b0 <system_mode_laser_tuning>:
{
     5b0:	b580      	push	{r7, lr}
     5b2:	af00      	add	r7, sp, #0
	stop_MW_operation(); //resets MW timers, sets MW_invalid pin low (to ensure ADC sample pulse) and sets correct MW state
     5b4:	f000 ff3a 	bl	142c <stop_MW_operation>
	HAL_GPIO_WritePin(LASER_TUNING_GPIO_Port, LASER_TUNING_Pin, GPIO_PIN_SET); // Laser_tuning output high
     5b8:	2201      	movs	r2, #1
     5ba:	f44f 5180 	mov.w	r1, #4096	; 0x1000
     5be:	4803      	ldr	r0, [pc, #12]	; (5cc <system_mode_laser_tuning+0x1c>)
     5c0:	f001 fa6e 	bl	1aa0 <__HAL_GPIO_WritePin_veneer>
	reset_adc_samples(); //reset ADC samples including sample count
     5c4:	f000 f804 	bl	5d0 <reset_adc_samples>
}
     5c8:	bf00      	nop
     5ca:	bd80      	pop	{r7, pc}
     5cc:	58020400 	.word	0x58020400

000005d0 <reset_adc_samples>:
{
     5d0:	b480      	push	{r7}
     5d2:	af00      	add	r7, sp, #0
	adc_average_updated = false; //signals to other functions that adc_averaged_val shouldn't be read
     5d4:	4b08      	ldr	r3, [pc, #32]	; (5f8 <reset_adc_samples+0x28>)
     5d6:	2200      	movs	r2, #0
     5d8:	701a      	strb	r2, [r3, #0]
	adc_sample_no = 0; //reset cyclical sample counter
     5da:	4b08      	ldr	r3, [pc, #32]	; (5fc <reset_adc_samples+0x2c>)
     5dc:	2200      	movs	r2, #0
     5de:	801a      	strh	r2, [r3, #0]
	adc_readings_total = 0; //zeroes the total counter
     5e0:	4b07      	ldr	r3, [pc, #28]	; (600 <reset_adc_samples+0x30>)
     5e2:	2200      	movs	r2, #0
     5e4:	601a      	str	r2, [r3, #0]
	sample_count=0; //reset the main ADC sample counter
     5e6:	4b07      	ldr	r3, [pc, #28]	; (604 <reset_adc_samples+0x34>)
     5e8:	2200      	movs	r2, #0
     5ea:	801a      	strh	r2, [r3, #0]
}
     5ec:	bf00      	nop
     5ee:	46bd      	mov	sp, r7
     5f0:	f85d 7b04 	ldr.w	r7, [sp], #4
     5f4:	4770      	bx	lr
     5f6:	bf00      	nop
     5f8:	20000630 	.word	0x20000630
     5fc:	20000628 	.word	0x20000628
     600:	2000062c 	.word	0x2000062c
     604:	200005fa 	.word	0x200005fa

00000608 <synth_writereg>:
  * @param  Address
  * @param  Chip address
  * @param  Verify
  * @retval Contents read back from register
  */
static uint32_t synth_writereg(const uint32_t data, const uint32_t reg_address, const uint32_t chip_address, const bool verify) {
     608:	b580      	push	{r7, lr}
     60a:	b08a      	sub	sp, #40	; 0x28
     60c:	af00      	add	r7, sp, #0
     60e:	60f8      	str	r0, [r7, #12]
     610:	60b9      	str	r1, [r7, #8]
     612:	607a      	str	r2, [r7, #4]
     614:	70fb      	strb	r3, [r7, #3]

	uint32_t read_data = 0;
     616:	2300      	movs	r3, #0
     618:	627b      	str	r3, [r7, #36]	; 0x24
	const uint32_t write_data = (data << 8) | (reg_address << 3) | chip_address; // This is what we will write, 32 bits in total.
     61a:	68fb      	ldr	r3, [r7, #12]
     61c:	021a      	lsls	r2, r3, #8
     61e:	68bb      	ldr	r3, [r7, #8]
     620:	00db      	lsls	r3, r3, #3
     622:	4313      	orrs	r3, r2
     624:	687a      	ldr	r2, [r7, #4]
     626:	4313      	orrs	r3, r2
     628:	61fb      	str	r3, [r7, #28]
	#ifdef SPI_DEBUG
		printf("SPI BYTES WRITTEN: 0x%X \r\n", write_data);
	#endif //SPI_DEBUG
	HAL_GPIO_WritePin(SCLK_GPIO_Port, SCLK_Pin, 0);
     62a:	2200      	movs	r2, #0
     62c:	f44f 7180 	mov.w	r1, #256	; 0x100
     630:	4830      	ldr	r0, [pc, #192]	; (6f4 <synth_writereg+0xec>)
     632:	f001 fa35 	bl	1aa0 <__HAL_GPIO_WritePin_veneer>
	HAL_GPIO_WritePin(SEN_GPIO_Port, SEN_Pin, 0); // Take SEN low to indicate we are sending data
     636:	2200      	movs	r2, #0
     638:	f44f 6100 	mov.w	r1, #2048	; 0x800
     63c:	482d      	ldr	r0, [pc, #180]	; (6f4 <synth_writereg+0xec>)
     63e:	f001 fa2f 	bl	1aa0 <__HAL_GPIO_WritePin_veneer>

	/* Clock in the data */
	for (uint32_t i = 0; i < SYNTH_SPI_BITS; i++) {
     642:	2300      	movs	r3, #0
     644:	623b      	str	r3, [r7, #32]
     646:	e036      	b.n	6b6 <synth_writereg+0xae>

		/* Data written on the rising edge */
		uint32_t bit = (SYNTH_SPI_BITS - 1 - i);
     648:	2220      	movs	r2, #32
     64a:	6a3b      	ldr	r3, [r7, #32]
     64c:	1ad3      	subs	r3, r2, r3
     64e:	3b01      	subs	r3, #1
     650:	617b      	str	r3, [r7, #20]
		HAL_GPIO_WritePin(MOSI_GPIO_Port, MOSI_Pin, !!(write_data & (1 << bit)));
     652:	2201      	movs	r2, #1
     654:	697b      	ldr	r3, [r7, #20]
     656:	fa02 f303 	lsl.w	r3, r2, r3
     65a:	461a      	mov	r2, r3
     65c:	69fb      	ldr	r3, [r7, #28]
     65e:	4013      	ands	r3, r2
     660:	2b00      	cmp	r3, #0
     662:	bf14      	ite	ne
     664:	2301      	movne	r3, #1
     666:	2300      	moveq	r3, #0
     668:	b2db      	uxtb	r3, r3
     66a:	461a      	mov	r2, r3
     66c:	f44f 7100 	mov.w	r1, #512	; 0x200
     670:	4820      	ldr	r0, [pc, #128]	; (6f4 <synth_writereg+0xec>)
     672:	f001 fa15 	bl	1aa0 <__HAL_GPIO_WritePin_veneer>
		HAL_GPIO_WritePin(SCLK_GPIO_Port, SCLK_Pin, 1);
     676:	2201      	movs	r2, #1
     678:	f44f 7180 	mov.w	r1, #256	; 0x100
     67c:	481d      	ldr	r0, [pc, #116]	; (6f4 <synth_writereg+0xec>)
     67e:	f001 fa0f 	bl	1aa0 <__HAL_GPIO_WritePin_veneer>
		HAL_GPIO_WritePin(SCLK_GPIO_Port, SCLK_Pin, 0);
     682:	2200      	movs	r2, #0
     684:	f44f 7180 	mov.w	r1, #256	; 0x100
     688:	481a      	ldr	r0, [pc, #104]	; (6f4 <synth_writereg+0xec>)
     68a:	f001 fa09 	bl	1aa0 <__HAL_GPIO_WritePin_veneer>

		/* Data read on the falling edge */
		read_data = read_data
				| (HAL_GPIO_ReadPin(MISO_GPIO_Port, MISO_Pin)
     68e:	f44f 6180 	mov.w	r1, #1024	; 0x400
     692:	4818      	ldr	r0, [pc, #96]	; (6f4 <synth_writereg+0xec>)
     694:	f001 f9f8 	bl	1a88 <__HAL_GPIO_ReadPin_veneer>
     698:	4603      	mov	r3, r0
     69a:	4619      	mov	r1, r3
						<< (SYNTH_SPI_BITS - 1 - i));
     69c:	2220      	movs	r2, #32
     69e:	6a3b      	ldr	r3, [r7, #32]
     6a0:	1ad3      	subs	r3, r2, r3
     6a2:	3b01      	subs	r3, #1
     6a4:	fa01 f303 	lsl.w	r3, r1, r3
     6a8:	461a      	mov	r2, r3
		read_data = read_data
     6aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
     6ac:	4313      	orrs	r3, r2
     6ae:	627b      	str	r3, [r7, #36]	; 0x24
	for (uint32_t i = 0; i < SYNTH_SPI_BITS; i++) {
     6b0:	6a3b      	ldr	r3, [r7, #32]
     6b2:	3301      	adds	r3, #1
     6b4:	623b      	str	r3, [r7, #32]
     6b6:	2220      	movs	r2, #32
     6b8:	6a3b      	ldr	r3, [r7, #32]
     6ba:	4293      	cmp	r3, r2
     6bc:	d3c4      	bcc.n	648 <synth_writereg+0x40>
	}

	HAL_GPIO_WritePin(SEN_GPIO_Port, SEN_Pin, 1); // Assert the SEN line to register the transmitted data
     6be:	2201      	movs	r2, #1
     6c0:	f44f 6100 	mov.w	r1, #2048	; 0x800
     6c4:	480b      	ldr	r0, [pc, #44]	; (6f4 <synth_writereg+0xec>)
     6c6:	f001 f9eb 	bl	1aa0 <__HAL_GPIO_WritePin_veneer>

	if (verify) {
     6ca:	78fb      	ldrb	r3, [r7, #3]
     6cc:	2b00      	cmp	r3, #0
     6ce:	d00c      	beq.n	6ea <synth_writereg+0xe2>
		const uint32_t verify_data = synth_readreg(reg_address); // Data returned on the second cycle
     6d0:	68b8      	ldr	r0, [r7, #8]
     6d2:	f000 f813 	bl	6fc <synth_readreg>
     6d6:	61b8      	str	r0, [r7, #24]
		if (verify_data != data) {
     6d8:	69ba      	ldr	r2, [r7, #24]
     6da:	68fb      	ldr	r3, [r7, #12]
     6dc:	429a      	cmp	r2, r3
     6de:	d004      	beq.n	6ea <synth_writereg+0xe2>
			printf("SPI transmission error!\n");
     6e0:	4805      	ldr	r0, [pc, #20]	; (6f8 <synth_writereg+0xf0>)
     6e2:	f001 f9f5 	bl	1ad0 <__puts_veneer>
			Error_Handler(); // We enter an infinite loop here
     6e6:	f001 f9cb 	bl	1a80 <__Error_Handler_veneer>
		}
	}

	return read_data;
     6ea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
     6ec:	4618      	mov	r0, r3
     6ee:	3728      	adds	r7, #40	; 0x28
     6f0:	46bd      	mov	sp, r7
     6f2:	bd80      	pop	{r7, pc}
     6f4:	58020800 	.word	0x58020800
     6f8:	0801c2c0 	.word	0x0801c2c0

000006fc <synth_readreg>:
/**
  * @brief  Reads a register.
  * @param  Address
  * @retval Register contents
  */
static uint32_t synth_readreg(const uint32_t reg_address){
     6fc:	b580      	push	{r7, lr}
     6fe:	b084      	sub	sp, #16
     700:	af00      	add	r7, sp, #0
     702:	6078      	str	r0, [r7, #4]

    synth_writereg(reg_address, 0x0, 0x0, DONT_VERIFY); // First cycle to send the read address
     704:	2300      	movs	r3, #0
     706:	2200      	movs	r2, #0
     708:	2100      	movs	r1, #0
     70a:	6878      	ldr	r0, [r7, #4]
     70c:	f7ff ff7c 	bl	608 <synth_writereg>
    const uint32_t read_data = synth_writereg(reg_address, 0x0, 0x0, DONT_VERIFY);  // Data returned on the second cycle
     710:	2300      	movs	r3, #0
     712:	2200      	movs	r2, #0
     714:	2100      	movs	r1, #0
     716:	6878      	ldr	r0, [r7, #4]
     718:	f7ff ff76 	bl	608 <synth_writereg>
     71c:	60f8      	str	r0, [r7, #12]

    return (read_data >> 8); // We only care about the first 24 bits returned.
     71e:	68fb      	ldr	r3, [r7, #12]
     720:	0a1b      	lsrs	r3, r3, #8

}
     722:	4618      	mov	r0, r3
     724:	3710      	adds	r7, #16
     726:	46bd      	mov	sp, r7
     728:	bd80      	pop	{r7, pc}

0000072a <set_MW_power>:
/**
  * @brief  Program LO2 output gain.
  * @param  MW power setting
  * @retval Success/fail
  */
uint32_t set_MW_power (const uint8_t mw_power) {
     72a:	b580      	push	{r7, lr}
     72c:	b084      	sub	sp, #16
     72e:	af00      	add	r7, sp, #0
     730:	4603      	mov	r3, r0
     732:	71fb      	strb	r3, [r7, #7]
	if (mw_power > 3) {//check that LO2GAIN is an integer from 0 to 3 inclusive
     734:	79fb      	ldrb	r3, [r7, #7]
     736:	2b03      	cmp	r3, #3
     738:	d904      	bls.n	744 <set_MW_power+0x1a>
		printf("illegal mw_power - must be an integer from 0 to 3!\n");
     73a:	4811      	ldr	r0, [pc, #68]	; (780 <set_MW_power+0x56>)
     73c:	f001 f9c8 	bl	1ad0 <__puts_veneer>
		Error_Handler(); // We enter an infinite loop here
     740:	f001 f99e 	bl	1a80 <__Error_Handler_veneer>
	}
	uint32_t read_data = synth_readreg(GAIN_DIVIDER_REGISTER); // Get the current value.
     744:	2016      	movs	r0, #22
     746:	f7ff ffd9 	bl	6fc <synth_readreg>
     74a:	60f8      	str	r0, [r7, #12]
	read_data &= 0xFFFFFCFF; 		// Zero bits 8:9.
     74c:	68fb      	ldr	r3, [r7, #12]
     74e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
     752:	60fb      	str	r3, [r7, #12]
	read_data |= (mw_power << 8);	// Set LO2GAIN value.
     754:	79fb      	ldrb	r3, [r7, #7]
     756:	021b      	lsls	r3, r3, #8
     758:	461a      	mov	r2, r3
     75a:	68fb      	ldr	r3, [r7, #12]
     75c:	4313      	orrs	r3, r2
     75e:	60fb      	str	r3, [r7, #12]
	synth_writereg(read_data, GAIN_DIVIDER_REGISTER, 0x0, VERIFY); // Update the VCO divide register.
     760:	2301      	movs	r3, #1
     762:	2200      	movs	r2, #0
     764:	2116      	movs	r1, #22
     766:	68f8      	ldr	r0, [r7, #12]
     768:	f7ff ff4e 	bl	608 <synth_writereg>
	#ifdef MW_VERBOSE
		printf("PROGRAMMED GAIN DIVIDER REGISTER: 0x%lX \r\n", read_data);
	#endif
	printf("LO2 gain setting: %u \r\n", mw_power);
     76c:	79fb      	ldrb	r3, [r7, #7]
     76e:	4619      	mov	r1, r3
     770:	4804      	ldr	r0, [pc, #16]	; (784 <set_MW_power+0x5a>)
     772:	f001 f999 	bl	1aa8 <__printf_veneer>
	return SUCCESS;
     776:	2300      	movs	r3, #0
}
     778:	4618      	mov	r0, r3
     77a:	3710      	adds	r7, #16
     77c:	46bd      	mov	sp, r7
     77e:	bd80      	pop	{r7, pc}
     780:	0801c2d8 	.word	0x0801c2d8
     784:	0801c30c 	.word	0x0801c30c

00000788 <init_synthesiser>:
/**
  * @brief  Initialises HMC835 synthesiser.
  * @param  MW power setting
  * @retval Success/fail
  */
uint32_t init_synthesiser(const uint8_t mw_power) {
     788:	b580      	push	{r7, lr}
     78a:	b084      	sub	sp, #16
     78c:	af00      	add	r7, sp, #0
     78e:	4603      	mov	r3, r0
     790:	71fb      	strb	r3, [r7, #7]

	//Set pins to required initial conditions
	HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET); // Turn off the amber lock LED
     792:	2200      	movs	r2, #0
     794:	2102      	movs	r1, #2
     796:	4856      	ldr	r0, [pc, #344]	; (8f0 <init_synthesiser+0x168>)
     798:	f001 f982 	bl	1aa0 <__HAL_GPIO_WritePin_veneer>
	HAL_GPIO_WritePin(SCOPE_TRIG_OUT_GPIO_Port, SCOPE_TRIG_OUT_Pin, GPIO_PIN_SET); // Sets trigger output high
     79c:	2201      	movs	r2, #1
     79e:	2101      	movs	r1, #1
     7a0:	4854      	ldr	r0, [pc, #336]	; (8f4 <init_synthesiser+0x16c>)
     7a2:	f001 f97d 	bl	1aa0 <__HAL_GPIO_WritePin_veneer>
	HAL_GPIO_WritePin(SCLK_GPIO_Port, SCLK_Pin, 0);
     7a6:	2200      	movs	r2, #0
     7a8:	f44f 7180 	mov.w	r1, #256	; 0x100
     7ac:	4852      	ldr	r0, [pc, #328]	; (8f8 <init_synthesiser+0x170>)
     7ae:	f001 f977 	bl	1aa0 <__HAL_GPIO_WritePin_veneer>
	HAL_GPIO_WritePin(SEN_GPIO_Port, SEN_Pin, 1);
     7b2:	2201      	movs	r2, #1
     7b4:	f44f 6100 	mov.w	r1, #2048	; 0x800
     7b8:	484f      	ldr	r0, [pc, #316]	; (8f8 <init_synthesiser+0x170>)
     7ba:	f001 f971 	bl	1aa0 <__HAL_GPIO_WritePin_veneer>
	HAL_GPIO_WritePin(REG_EN_GPIO_Port, REG_EN_Pin, 1); // Enable the main regulator.
     7be:	2201      	movs	r2, #1
     7c0:	f44f 5180 	mov.w	r1, #4096	; 0x1000
     7c4:	484c      	ldr	r0, [pc, #304]	; (8f8 <init_synthesiser+0x170>)
     7c6:	f001 f96b 	bl	1aa0 <__HAL_GPIO_WritePin_veneer>

	HAL_Delay(100); // Wait 100 ms for the supply to stabilise.
     7ca:	2064      	movs	r0, #100	; 0x64
     7cc:	f001 f960 	bl	1a90 <__HAL_Delay_veneer>

	synth_writereg(0x1UL << 5, OPEN_MODE_READ_ADDRESS, 0x0, DONT_VERIFY); // Soft reset.
     7d0:	2300      	movs	r3, #0
     7d2:	2200      	movs	r2, #0
     7d4:	2100      	movs	r1, #0
     7d6:	2020      	movs	r0, #32
     7d8:	f7ff ff16 	bl	608 <synth_writereg>
	synth_writereg(0x41BFFF, ANALOG_EN_REGISTER, 0x0, VERIFY); // Set the SDO output level to 3.3 Volts
     7dc:	2301      	movs	r3, #1
     7de:	2200      	movs	r2, #0
     7e0:	2108      	movs	r1, #8
     7e2:	4846      	ldr	r0, [pc, #280]	; (8fc <init_synthesiser+0x174>)
     7e4:	f7ff ff10 	bl	608 <synth_writereg>

	uint32_t read_data = synth_readreg(ID_REGISTER); // Read the ID register to check the chip is communicating
     7e8:	2000      	movs	r0, #0
     7ea:	f7ff ff87 	bl	6fc <synth_readreg>
     7ee:	60f8      	str	r0, [r7, #12]
	/* Check we have the correct ID */
	if (read_data != SYNTH_ID) {
     7f0:	4a43      	ldr	r2, [pc, #268]	; (900 <init_synthesiser+0x178>)
     7f2:	68fb      	ldr	r3, [r7, #12]
     7f4:	4293      	cmp	r3, r2
     7f6:	d00a      	beq.n	80e <init_synthesiser+0x86>
		HAL_GPIO_WritePin(REG_EN_GPIO_Port, REG_EN_Pin, 0); // Disable the main regulator.
     7f8:	2200      	movs	r2, #0
     7fa:	f44f 5180 	mov.w	r1, #4096	; 0x1000
     7fe:	483e      	ldr	r0, [pc, #248]	; (8f8 <init_synthesiser+0x170>)
     800:	f001 f94e 	bl	1aa0 <__HAL_GPIO_WritePin_veneer>
		printf("Incorrect synthesiser ID!\r\n");
     804:	483f      	ldr	r0, [pc, #252]	; (904 <init_synthesiser+0x17c>)
     806:	f001 f963 	bl	1ad0 <__puts_veneer>
		return ERROR;
     80a:	2301      	movs	r3, #1
     80c:	e06b      	b.n	8e6 <init_synthesiser+0x15e>
	}

	/* Everything looks good, we can communicate with the chip :-) */
	printf("HMC835 Detected.\r\n");
     80e:	483e      	ldr	r0, [pc, #248]	; (908 <init_synthesiser+0x180>)
     810:	f001 f95e 	bl	1ad0 <__puts_veneer>

	/* Enables Single-Ended output mode for LO2 output */
	read_data = synth_readreg(MODES_REGISTER); // Get the current value of the modes register
     814:	2017      	movs	r0, #23
     816:	f7ff ff71 	bl	6fc <synth_readreg>
     81a:	60f8      	str	r0, [r7, #12]
#ifdef MW_VERBOSE
	printf("READ MODES REGISTER: 0x%lX \r\n", read_data);
#endif
	read_data |= (0x1UL << 9);     // Enable single ended output for LO2 (LO2_P)
     81c:	68fb      	ldr	r3, [r7, #12]
     81e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
     822:	60fb      	str	r3, [r7, #12]
	read_data  &= ~(!AUTO_MUTE << 7); //can disable auto_mute - see variable declarations
     824:	2301      	movs	r3, #1
     826:	f083 0301 	eor.w	r3, r3, #1
     82a:	b2db      	uxtb	r3, r3
     82c:	01db      	lsls	r3, r3, #7
     82e:	43db      	mvns	r3, r3
     830:	461a      	mov	r2, r3
     832:	68fb      	ldr	r3, [r7, #12]
     834:	4013      	ands	r3, r2
     836:	60fb      	str	r3, [r7, #12]
	synth_writereg(read_data, MODES_REGISTER, 0x0, VERIFY); // Send
     838:	2301      	movs	r3, #1
     83a:	2200      	movs	r2, #0
     83c:	2117      	movs	r1, #23
     83e:	68f8      	ldr	r0, [r7, #12]
     840:	f7ff fee2 	bl	608 <synth_writereg>
	//read_data = synth_readreg(LOCK_DETECT_REGISTER); // Get the current value.
	//read_data &= 0xFFFFFFF8; // Zero the first 3 LSBs.
	//read_data |= 0x07;
	//synth_writereg(read_data, LOCK_DETECT_REGISTER, 0x0, VERIFY); // Update the VCO divide register.

	synth_writereg(1, REFDIV_REGISTER, 0x0, VERIFY); // Reference divider setting.
     844:	2301      	movs	r3, #1
     846:	2200      	movs	r2, #0
     848:	2102      	movs	r1, #2
     84a:	2001      	movs	r0, #1
     84c:	f7ff fedc 	bl	608 <synth_writereg>
	printf("PROGRAMMED DIVIDER REGISTER: 0x01 \r\n");
#endif

	/* Lock detect training: This must be done after any change to the PD
	 * reference frequency or after power cycle. */
	read_data = synth_readreg(LOCK_DETECT_REGISTER); // Get contents of lock detect register
     850:	2007      	movs	r0, #7
     852:	f7ff ff53 	bl	6fc <synth_readreg>
     856:	60f8      	str	r0, [r7, #12]
#ifdef MW_VERBOSE
	printf("READ LOCK_DETECT_REGISTER: 0x%lX \r\n", read_data);
#endif
	read_data |= (0x1UL << 11);      // Enable lock-detect counters.
     858:	68fb      	ldr	r3, [r7, #12]
     85a:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
     85e:	60fb      	str	r3, [r7, #12]
	read_data |= (0x1UL << 14);      // Enable the lock-detect timer.
     860:	68fb      	ldr	r3, [r7, #12]
     862:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
     866:	60fb      	str	r3, [r7, #12]
	read_data |= (0x1UL << 20);      // Train the lock-detect timer.
     868:	68fb      	ldr	r3, [r7, #12]
     86a:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
     86e:	60fb      	str	r3, [r7, #12]
	synth_writereg(read_data, LOCK_DETECT_REGISTER, 0x0, VERIFY); // Send
     870:	2301      	movs	r3, #1
     872:	2200      	movs	r2, #0
     874:	2107      	movs	r1, #7
     876:	68f8      	ldr	r0, [r7, #12]
     878:	f7ff fec6 	bl	608 <synth_writereg>
#ifdef MW_VERBOSE
	printf("PROGRAMMED LOCK DETECT REGISTER: 0x%lX \r\n", read_data);
#endif
	HAL_Delay(10); // Wait 10 ms for training to complete, not sure if we really need to do this.
     87c:	200a      	movs	r0, #10
     87e:	f001 f907 	bl	1a90 <__HAL_Delay_veneer>

	/* Program LO2 output gain */
	if (mw_power > 3) {//check that LO2GAIN is an integer from 0 to 3 inclusive
     882:	79fb      	ldrb	r3, [r7, #7]
     884:	2b03      	cmp	r3, #3
     886:	d904      	bls.n	892 <init_synthesiser+0x10a>
		printf("illegal mw_power - must be an integer from 0 to 3!\n");
     888:	4820      	ldr	r0, [pc, #128]	; (90c <init_synthesiser+0x184>)
     88a:	f001 f921 	bl	1ad0 <__puts_veneer>
		Error_Handler();
     88e:	f001 f8f7 	bl	1a80 <__Error_Handler_veneer>
	}
	read_data = synth_readreg(GAIN_DIVIDER_REGISTER); // Get the current value.
     892:	2016      	movs	r0, #22
     894:	f7ff ff32 	bl	6fc <synth_readreg>
     898:	60f8      	str	r0, [r7, #12]
	read_data &= 0xFFFFFCFF; 		// Zero bits 8:9.
     89a:	68fb      	ldr	r3, [r7, #12]
     89c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
     8a0:	60fb      	str	r3, [r7, #12]
	read_data |= (mw_power << 8);	// Set LO2GAIN value.
     8a2:	79fb      	ldrb	r3, [r7, #7]
     8a4:	021b      	lsls	r3, r3, #8
     8a6:	461a      	mov	r2, r3
     8a8:	68fb      	ldr	r3, [r7, #12]
     8aa:	4313      	orrs	r3, r2
     8ac:	60fb      	str	r3, [r7, #12]
	synth_writereg(read_data, GAIN_DIVIDER_REGISTER, 0x0, VERIFY); // Update the VCO divide register.
     8ae:	2301      	movs	r3, #1
     8b0:	2200      	movs	r2, #0
     8b2:	2116      	movs	r1, #22
     8b4:	68f8      	ldr	r0, [r7, #12]
     8b6:	f7ff fea7 	bl	608 <synth_writereg>
	printf("PROGRAMMED GAIN DIVIDER REGISTER: 0x%lX \r\n", read_data);
	printf("LO2 gain setting: %u \r\n", mw_power);
#endif

	/* Sets output frequency to the hyperfine value */
	set_frequency_hz(HYPERFINE);
     8ba:	4b15      	ldr	r3, [pc, #84]	; (910 <init_synthesiser+0x188>)
     8bc:	ed93 7b00 	vldr	d7, [r3]
     8c0:	eeb0 0b47 	vmov.f64	d0, d7
     8c4:	f000 f83f 	bl	946 <set_frequency_hz>
	//printf("Single frequency output: %f Hz \r\n", HYPERFINE);
	printf("Single frequency output: %.10g Hz \r\n", HYPERFINE);
     8c8:	4b11      	ldr	r3, [pc, #68]	; (910 <init_synthesiser+0x188>)
     8ca:	e9d3 2300 	ldrd	r2, r3, [r3]
     8ce:	4811      	ldr	r0, [pc, #68]	; (914 <init_synthesiser+0x18c>)
     8d0:	f001 f8ea 	bl	1aa8 <__printf_veneer>
//	struct MW_struct *mw_sweep_settings = 0;  //create a structure to store the sweep settings
	mw_sweep_settings.state = MW_FIXED_FREQ;
     8d4:	4b10      	ldr	r3, [pc, #64]	; (918 <init_synthesiser+0x190>)
     8d6:	2201      	movs	r2, #1
     8d8:	701a      	strb	r2, [r3, #0]
	HAL_GPIO_WritePin(MW_INVALID_GPIO_Port, MW_INVALID_Pin, GPIO_PIN_RESET); // MW_invalid output low
     8da:	2200      	movs	r2, #0
     8dc:	2102      	movs	r1, #2
     8de:	480f      	ldr	r0, [pc, #60]	; (91c <init_synthesiser+0x194>)
     8e0:	f001 f8de 	bl	1aa0 <__HAL_GPIO_WritePin_veneer>
	return SUCCESS;
     8e4:	2300      	movs	r3, #0
}
     8e6:	4618      	mov	r0, r3
     8e8:	3710      	adds	r7, #16
     8ea:	46bd      	mov	sp, r7
     8ec:	bd80      	pop	{r7, pc}
     8ee:	bf00      	nop
     8f0:	58021000 	.word	0x58021000
     8f4:	58021800 	.word	0x58021800
     8f8:	58020800 	.word	0x58020800
     8fc:	0041bfff 	.word	0x0041bfff
     900:	00c7701a 	.word	0x00c7701a
     904:	0801c324 	.word	0x0801c324
     908:	0801c340 	.word	0x0801c340
     90c:	0801c2d8 	.word	0x0801c2d8
     910:	0801f398 	.word	0x0801f398
     914:	0801c354 	.word	0x0801c354
     918:	20000640 	.word	0x20000640
     91c:	58020400 	.word	0x58020400

00000920 <lock_status>:
/**
  * @brief  Checks for MW frequency lock
  * @param  None
  * @retval Lock status
  */
static const bool lock_status(void) {
     920:	b580      	push	{r7, lr}
     922:	b082      	sub	sp, #8
     924:	af00      	add	r7, sp, #0

	bool locked = synth_readreg(GPOLD_REGISTER) & (1UL << 1);
     926:	2012      	movs	r0, #18
     928:	f7ff fee8 	bl	6fc <synth_readreg>
     92c:	4603      	mov	r3, r0
     92e:	f003 0302 	and.w	r3, r3, #2
     932:	2b00      	cmp	r3, #0
     934:	bf14      	ite	ne
     936:	2301      	movne	r3, #1
     938:	2300      	moveq	r3, #0
     93a:	71fb      	strb	r3, [r7, #7]
	return locked;
     93c:	79fb      	ldrb	r3, [r7, #7]

}
     93e:	4618      	mov	r0, r3
     940:	3708      	adds	r7, #8
     942:	46bd      	mov	sp, r7
     944:	bd80      	pop	{r7, pc}

00000946 <set_frequency_hz>:
/**
  * @brief  Translate a frequency into register values for programming to HMC835
  * @param  Frequency
  * @retval None
  */
void set_frequency_hz(const double fo) {
     946:	b580      	push	{r7, lr}
     948:	b088      	sub	sp, #32
     94a:	af00      	add	r7, sp, #0
     94c:	ed87 0b00 	vstr	d0, [r7]

#ifdef OPTIMISED_FOR_3_035GHZ_GENERATION
	/* Code optimisation for Generation of frequencies close to 3.035GHz
	 * k always equals 1
	 */
	uint32_t k = 1;
     950:	2301      	movs	r3, #1
     952:	61fb      	str	r3, [r7, #28]
		}
	}
#endif //OPTIMISED_FOR_3_035GHZ_GENERATION

	/* Calculate the N division ratio */
	const double N = ((fo * k) / REF_FREQ);
     954:	69fb      	ldr	r3, [r7, #28]
     956:	ee07 3a90 	vmov	s15, r3
     95a:	eeb8 6b67 	vcvt.f64.u32	d6, s15
     95e:	ed97 7b00 	vldr	d7, [r7]
     962:	ee26 6b07 	vmul.f64	d6, d6, d7
     966:	ed9f 5b2a 	vldr	d5, [pc, #168]	; a10 <set_frequency_hz+0xca>
     96a:	ee86 7b05 	vdiv.f64	d7, d6, d5
     96e:	ed87 7b04 	vstr	d7, [r7, #16]

	/* Extract the fractional and integer parts */
	const uint32_t NINT = N;
     972:	ed97 7b04 	vldr	d7, [r7, #16]
     976:	eefc 7bc7 	vcvt.u32.f64	s15, d7
     97a:	ee17 3a90 	vmov	r3, s15
     97e:	60fb      	str	r3, [r7, #12]
	const uint32_t NFRAC = ((N - NINT) * (1 << 24)) + 0.5;
     980:	68fb      	ldr	r3, [r7, #12]
     982:	ee07 3a90 	vmov	s15, r3
     986:	eeb8 7b67 	vcvt.f64.u32	d7, s15
     98a:	ed97 6b04 	vldr	d6, [r7, #16]
     98e:	ee36 7b47 	vsub.f64	d7, d6, d7
     992:	ed9f 6b21 	vldr	d6, [pc, #132]	; a18 <set_frequency_hz+0xd2>
     996:	ee27 7b06 	vmul.f64	d7, d7, d6
     99a:	eeb6 6b00 	vmov.f64	d6, #96	; 0x3f000000  0.5
     99e:	ee37 7b06 	vadd.f64	d7, d7, d6
     9a2:	eefc 7bc7 	vcvt.u32.f64	s15, d7
     9a6:	ee17 3a90 	vmov	r3, s15
     9aa:	60bb      	str	r3, [r7, #8]
		printf("Failed to establish synthesiser frequency accurately\r\n");
		Error_Handler();
	}
#endif

	HAL_GPIO_WritePin(MW_INVALID_GPIO_Port, MW_INVALID_Pin, GPIO_PIN_SET); //Sets MW_invalid pin high
     9ac:	2201      	movs	r2, #1
     9ae:	2102      	movs	r1, #2
     9b0:	481b      	ldr	r0, [pc, #108]	; (a20 <set_frequency_hz+0xda>)
     9b2:	f001 f875 	bl	1aa0 <__HAL_GPIO_WritePin_veneer>
	//set_frequency(NINT, NFRAC, k, MANUAL_MUTE); //Sets only the necessary Hittite registers
	set_freq_regs(NINT, NFRAC, k); //Sets only the necessary Hittite registers
     9b6:	69fa      	ldr	r2, [r7, #28]
     9b8:	68b9      	ldr	r1, [r7, #8]
     9ba:	68f8      	ldr	r0, [r7, #12]
     9bc:	f000 f838 	bl	a30 <set_freq_regs>

	//MW stabilisation delay and check for lock
	timer_delay(MW_TIMER, MW_STABILISE_TIME_US);
     9c0:	4b18      	ldr	r3, [pc, #96]	; (a24 <set_frequency_hz+0xde>)
     9c2:	681b      	ldr	r3, [r3, #0]
     9c4:	f241 7270 	movw	r2, #6000	; 0x1770
     9c8:	4611      	mov	r1, r2
     9ca:	4618      	mov	r0, r3
     9cc:	f000 ffda 	bl	1984 <timer_delay>
	//if (!poll_until_locked(LOCK_WAIT_US)) {
	if (!lock_status()) {
     9d0:	f7ff ffa6 	bl	920 <lock_status>
     9d4:	4603      	mov	r3, r0
     9d6:	f083 0301 	eor.w	r3, r3, #1
     9da:	b2db      	uxtb	r3, r3
     9dc:	2b00      	cmp	r3, #0
     9de:	d011      	beq.n	a04 <set_frequency_hz+0xbe>
		HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET); //turn off amber LED
     9e0:	2200      	movs	r2, #0
     9e2:	2102      	movs	r1, #2
     9e4:	4810      	ldr	r0, [pc, #64]	; (a28 <set_frequency_hz+0xe2>)
     9e6:	f001 f85b 	bl	1aa0 <__HAL_GPIO_WritePin_veneer>
		printf("Failed to establish MW Lock within %ld us of setting frequency!\r\n", MW_STABILISE_TIME_US);
     9ea:	f241 7370 	movw	r3, #6000	; 0x1770
     9ee:	4619      	mov	r1, r3
     9f0:	480e      	ldr	r0, [pc, #56]	; (a2c <set_frequency_hz+0xe6>)
     9f2:	f001 f859 	bl	1aa8 <__printf_veneer>
#ifdef HALT_ON_LOSS_OF_LOCK
		Error_Handler();
     9f6:	f001 f843 	bl	1a80 <__Error_Handler_veneer>
#endif //HALT_ON_LOSS_OF_LOCK
		HAL_GPIO_WritePin(MW_INVALID_GPIO_Port, MW_INVALID_Pin, GPIO_PIN_RESET); //Sets MW_invalid pin low
     9fa:	2200      	movs	r2, #0
     9fc:	2102      	movs	r1, #2
     9fe:	4808      	ldr	r0, [pc, #32]	; (a20 <set_frequency_hz+0xda>)
     a00:	f001 f84e 	bl	1aa0 <__HAL_GPIO_WritePin_veneer>
	}

}
     a04:	bf00      	nop
     a06:	3720      	adds	r7, #32
     a08:	46bd      	mov	sp, r7
     a0a:	bd80      	pop	{r7, pc}
     a0c:	f3af 8000 	nop.w
     a10:	00000000 	.word	0x00000000
     a14:	4187d784 	.word	0x4187d784
     a18:	00000000 	.word	0x00000000
     a1c:	41700000 	.word	0x41700000
     a20:	58020400 	.word	0x58020400
     a24:	2000001c 	.word	0x2000001c
     a28:	58021000 	.word	0x58021000
     a2c:	0801c37c 	.word	0x0801c37c

00000a30 <set_freq_regs>:
static void set_freq_regs(const uint32_t integer, const uint32_t fraction, const uint32_t vco_divider) {
     a30:	b580      	push	{r7, lr}
     a32:	b086      	sub	sp, #24
     a34:	af00      	add	r7, sp, #0
     a36:	60f8      	str	r0, [r7, #12]
     a38:	60b9      	str	r1, [r7, #8]
     a3a:	607a      	str	r2, [r7, #4]
	uint32_t read_data = 0x0;
     a3c:	2300      	movs	r3, #0
     a3e:	617b      	str	r3, [r7, #20]
	if (last_vcodiv == -1 || (last_vcodiv != vco_divider)) {
     a40:	4b24      	ldr	r3, [pc, #144]	; (ad4 <set_freq_regs+0xa4>)
     a42:	681b      	ldr	r3, [r3, #0]
     a44:	f1b3 3fff 	cmp.w	r3, #4294967295
     a48:	d004      	beq.n	a54 <set_freq_regs+0x24>
     a4a:	4b22      	ldr	r3, [pc, #136]	; (ad4 <set_freq_regs+0xa4>)
     a4c:	681b      	ldr	r3, [r3, #0]
     a4e:	687a      	ldr	r2, [r7, #4]
     a50:	429a      	cmp	r2, r3
     a52:	d014      	beq.n	a7e <set_freq_regs+0x4e>
		read_data = synth_readreg(GAIN_DIVIDER_REGISTER); // Get the current value.
     a54:	2016      	movs	r0, #22
     a56:	f7ff fe51 	bl	6fc <synth_readreg>
     a5a:	6178      	str	r0, [r7, #20]
		read_data &= 0xFFFFFFC0; // Zero the first 6 LSBs (VCO division value - mute).
     a5c:	697b      	ldr	r3, [r7, #20]
     a5e:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
     a62:	617b      	str	r3, [r7, #20]
		read_data |= vco_divider; // This will set k which will un-mute the outputs */
     a64:	697a      	ldr	r2, [r7, #20]
     a66:	687b      	ldr	r3, [r7, #4]
     a68:	4313      	orrs	r3, r2
     a6a:	617b      	str	r3, [r7, #20]
		synth_writereg(read_data, GAIN_DIVIDER_REGISTER, 0x0, VERIFY); // Update the VCO divide register.
     a6c:	2301      	movs	r3, #1
     a6e:	2200      	movs	r2, #0
     a70:	2116      	movs	r1, #22
     a72:	6978      	ldr	r0, [r7, #20]
     a74:	f7ff fdc8 	bl	608 <synth_writereg>
		last_vcodiv = vco_divider;
     a78:	4a16      	ldr	r2, [pc, #88]	; (ad4 <set_freq_regs+0xa4>)
     a7a:	687b      	ldr	r3, [r7, #4]
     a7c:	6013      	str	r3, [r2, #0]
	if (last_integer == -1 || (last_integer != integer)) {
     a7e:	4b16      	ldr	r3, [pc, #88]	; (ad8 <set_freq_regs+0xa8>)
     a80:	681b      	ldr	r3, [r3, #0]
     a82:	f1b3 3fff 	cmp.w	r3, #4294967295
     a86:	d004      	beq.n	a92 <set_freq_regs+0x62>
     a88:	4b13      	ldr	r3, [pc, #76]	; (ad8 <set_freq_regs+0xa8>)
     a8a:	681b      	ldr	r3, [r3, #0]
     a8c:	68fa      	ldr	r2, [r7, #12]
     a8e:	429a      	cmp	r2, r3
     a90:	d008      	beq.n	aa4 <set_freq_regs+0x74>
		synth_writereg(integer, INTEGER_FREQUENCY_REGISTER, 0x0, VERIFY);   // Integer register.
     a92:	2301      	movs	r3, #1
     a94:	2200      	movs	r2, #0
     a96:	2103      	movs	r1, #3
     a98:	68f8      	ldr	r0, [r7, #12]
     a9a:	f7ff fdb5 	bl	608 <synth_writereg>
		last_integer = integer;
     a9e:	4a0e      	ldr	r2, [pc, #56]	; (ad8 <set_freq_regs+0xa8>)
     aa0:	68fb      	ldr	r3, [r7, #12]
     aa2:	6013      	str	r3, [r2, #0]
	if (last_fraction == -1 || (last_fraction != fraction)) {
     aa4:	4b0d      	ldr	r3, [pc, #52]	; (adc <set_freq_regs+0xac>)
     aa6:	681b      	ldr	r3, [r3, #0]
     aa8:	f1b3 3fff 	cmp.w	r3, #4294967295
     aac:	d004      	beq.n	ab8 <set_freq_regs+0x88>
     aae:	4b0b      	ldr	r3, [pc, #44]	; (adc <set_freq_regs+0xac>)
     ab0:	681b      	ldr	r3, [r3, #0]
     ab2:	68ba      	ldr	r2, [r7, #8]
     ab4:	429a      	cmp	r2, r3
     ab6:	d008      	beq.n	aca <set_freq_regs+0x9a>
		synth_writereg(fraction, FRACTIONAL_FREQUENCY_REGISTER, 0x0, VERIFY);  // Fractional register.
     ab8:	2301      	movs	r3, #1
     aba:	2200      	movs	r2, #0
     abc:	2104      	movs	r1, #4
     abe:	68b8      	ldr	r0, [r7, #8]
     ac0:	f7ff fda2 	bl	608 <synth_writereg>
		last_fraction = fraction;
     ac4:	4a05      	ldr	r2, [pc, #20]	; (adc <set_freq_regs+0xac>)
     ac6:	68bb      	ldr	r3, [r7, #8]
     ac8:	6013      	str	r3, [r2, #0]
}
     aca:	bf00      	nop
     acc:	3718      	adds	r7, #24
     ace:	46bd      	mov	sp, r7
     ad0:	bd80      	pop	{r7, pc}
     ad2:	bf00      	nop
     ad4:	20000004 	.word	0x20000004
     ad8:	20000008 	.word	0x20000008
     adc:	2000000c 	.word	0x2000000c

00000ae0 <print_mw_sweep_settings>:
/**
  * @brief  Print out the contents of the mw_sweep_settings structure
  * @param  None
  * @retval None
  */
  static void print_mw_sweep_settings (void) {
     ae0:	b580      	push	{r7, lr}
     ae2:	af00      	add	r7, sp, #0
  	// Check that I've populated everything
    printf("state: %u \r\n", mw_sweep_settings.state);
     ae4:	4b34      	ldr	r3, [pc, #208]	; (bb8 <print_mw_sweep_settings+0xd8>)
     ae6:	781b      	ldrb	r3, [r3, #0]
     ae8:	4619      	mov	r1, r3
     aea:	4834      	ldr	r0, [pc, #208]	; (bbc <print_mw_sweep_settings+0xdc>)
     aec:	f000 ffdc 	bl	1aa8 <__printf_veneer>
  	printf("k: %u \r\n", mw_sweep_settings.k);
     af0:	4b31      	ldr	r3, [pc, #196]	; (bb8 <print_mw_sweep_settings+0xd8>)
     af2:	785b      	ldrb	r3, [r3, #1]
     af4:	4619      	mov	r1, r3
     af6:	4832      	ldr	r0, [pc, #200]	; (bc0 <print_mw_sweep_settings+0xe0>)
     af8:	f000 ffd6 	bl	1aa8 <__printf_veneer>
  	printf("NINT: %lu \r\n", mw_sweep_settings.NINT);
     afc:	4b2e      	ldr	r3, [pc, #184]	; (bb8 <print_mw_sweep_settings+0xd8>)
     afe:	685b      	ldr	r3, [r3, #4]
     b00:	4619      	mov	r1, r3
     b02:	4830      	ldr	r0, [pc, #192]	; (bc4 <print_mw_sweep_settings+0xe4>)
     b04:	f000 ffd0 	bl	1aa8 <__printf_veneer>
  	printf("NFRAC_start: %lu \r\n", mw_sweep_settings.NFRAC_start);
     b08:	4b2b      	ldr	r3, [pc, #172]	; (bb8 <print_mw_sweep_settings+0xd8>)
     b0a:	689b      	ldr	r3, [r3, #8]
     b0c:	4619      	mov	r1, r3
     b0e:	482e      	ldr	r0, [pc, #184]	; (bc8 <print_mw_sweep_settings+0xe8>)
     b10:	f000 ffca 	bl	1aa8 <__printf_veneer>
  	printf("num_steps: %lu \r\n", mw_sweep_settings.num_steps);
     b14:	4b28      	ldr	r3, [pc, #160]	; (bb8 <print_mw_sweep_settings+0xd8>)
     b16:	68db      	ldr	r3, [r3, #12]
     b18:	4619      	mov	r1, r3
     b1a:	482c      	ldr	r0, [pc, #176]	; (bcc <print_mw_sweep_settings+0xec>)
     b1c:	f000 ffc4 	bl	1aa8 <__printf_veneer>
  	printf("step_size: %lu \r\n", mw_sweep_settings.step_size);
     b20:	4b25      	ldr	r3, [pc, #148]	; (bb8 <print_mw_sweep_settings+0xd8>)
     b22:	691b      	ldr	r3, [r3, #16]
     b24:	4619      	mov	r1, r3
     b26:	482a      	ldr	r0, [pc, #168]	; (bd0 <print_mw_sweep_settings+0xf0>)
     b28:	f000 ffbe 	bl	1aa8 <__printf_veneer>
  	printf("pop_cycles_per_point: %lu \r\n", mw_sweep_settings.pop_cycles_per_point);
     b2c:	4b22      	ldr	r3, [pc, #136]	; (bb8 <print_mw_sweep_settings+0xd8>)
     b2e:	695b      	ldr	r3, [r3, #20]
     b30:	4619      	mov	r1, r3
     b32:	4828      	ldr	r0, [pc, #160]	; (bd4 <print_mw_sweep_settings+0xf4>)
     b34:	f000 ffb8 	bl	1aa8 <__printf_veneer>
  	printf("stabilise_time: %lu us\r\n", mw_sweep_settings.stabilise_time);
     b38:	4b1f      	ldr	r3, [pc, #124]	; (bb8 <print_mw_sweep_settings+0xd8>)
     b3a:	699b      	ldr	r3, [r3, #24]
     b3c:	4619      	mov	r1, r3
     b3e:	4826      	ldr	r0, [pc, #152]	; (bd8 <print_mw_sweep_settings+0xf8>)
     b40:	f000 ffb2 	bl	1aa8 <__printf_veneer>
  	printf("dwell_time: %lu us\r\n", mw_sweep_settings.dwell_time);
     b44:	4b1c      	ldr	r3, [pc, #112]	; (bb8 <print_mw_sweep_settings+0xd8>)
     b46:	69db      	ldr	r3, [r3, #28]
     b48:	4619      	mov	r1, r3
     b4a:	4824      	ldr	r0, [pc, #144]	; (bdc <print_mw_sweep_settings+0xfc>)
     b4c:	f000 ffac 	bl	1aa8 <__printf_veneer>
  	printf("MW_processing_time: %lu us\r\n", mw_sweep_settings.MW_processing_time);
     b50:	4b19      	ldr	r3, [pc, #100]	; (bb8 <print_mw_sweep_settings+0xd8>)
     b52:	6a1b      	ldr	r3, [r3, #32]
     b54:	4619      	mov	r1, r3
     b56:	4822      	ldr	r0, [pc, #136]	; (be0 <print_mw_sweep_settings+0x100>)
     b58:	f000 ffa6 	bl	1aa8 <__printf_veneer>
  	printf("current_point: %lu\r\n", mw_sweep_settings.current_point);
     b5c:	4b16      	ldr	r3, [pc, #88]	; (bb8 <print_mw_sweep_settings+0xd8>)
     b5e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
     b60:	4619      	mov	r1, r3
     b62:	4820      	ldr	r0, [pc, #128]	; (be4 <print_mw_sweep_settings+0x104>)
     b64:	f000 ffa0 	bl	1aa8 <__printf_veneer>
  	printf("centre_freq: %f Hz\r\n", mw_sweep_settings.centre_freq);
     b68:	4b13      	ldr	r3, [pc, #76]	; (bb8 <print_mw_sweep_settings+0xd8>)
     b6a:	e9d3 230a 	ldrd	r2, r3, [r3, #40]	; 0x28
     b6e:	481e      	ldr	r0, [pc, #120]	; (be8 <print_mw_sweep_settings+0x108>)
     b70:	f000 ff9a 	bl	1aa8 <__printf_veneer>
  	printf("span: %f Hz\r\n", mw_sweep_settings.span);
     b74:	4b10      	ldr	r3, [pc, #64]	; (bb8 <print_mw_sweep_settings+0xd8>)
     b76:	e9d3 230c 	ldrd	r2, r3, [r3, #48]	; 0x30
     b7a:	481c      	ldr	r0, [pc, #112]	; (bec <print_mw_sweep_settings+0x10c>)
     b7c:	f000 ff94 	bl	1aa8 <__printf_veneer>
  	printf("sweep_period: %f s\r\n", mw_sweep_settings.sweep_period);
     b80:	4b0d      	ldr	r3, [pc, #52]	; (bb8 <print_mw_sweep_settings+0xd8>)
     b82:	e9d3 230e 	ldrd	r2, r3, [r3, #56]	; 0x38
     b86:	481a      	ldr	r0, [pc, #104]	; (bf0 <print_mw_sweep_settings+0x110>)
     b88:	f000 ff8e 	bl	1aa8 <__printf_veneer>
    printf("sweep_type: %s \r\n", mw_sweep_settings.sweep_type ? "FIXED_TIME" : "FIXED_STEPS");
     b8c:	4b0a      	ldr	r3, [pc, #40]	; (bb8 <print_mw_sweep_settings+0xd8>)
     b8e:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
     b92:	2b00      	cmp	r3, #0
     b94:	d001      	beq.n	b9a <print_mw_sweep_settings+0xba>
     b96:	4b17      	ldr	r3, [pc, #92]	; (bf4 <print_mw_sweep_settings+0x114>)
     b98:	e000      	b.n	b9c <print_mw_sweep_settings+0xbc>
     b9a:	4b17      	ldr	r3, [pc, #92]	; (bf8 <print_mw_sweep_settings+0x118>)
     b9c:	4619      	mov	r1, r3
     b9e:	4817      	ldr	r0, [pc, #92]	; (bfc <print_mw_sweep_settings+0x11c>)
     ba0:	f000 ff82 	bl	1aa8 <__printf_veneer>
    printf("sweep_mode: %d\r\n", mw_sweep_settings.sweep_mode);
     ba4:	4b04      	ldr	r3, [pc, #16]	; (bb8 <print_mw_sweep_settings+0xd8>)
     ba6:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
     baa:	4619      	mov	r1, r3
     bac:	4814      	ldr	r0, [pc, #80]	; (c00 <print_mw_sweep_settings+0x120>)
     bae:	f000 ff7b 	bl	1aa8 <__printf_veneer>
}
     bb2:	bf00      	nop
     bb4:	bd80      	pop	{r7, pc}
     bb6:	bf00      	nop
     bb8:	20000640 	.word	0x20000640
     bbc:	0801c3c0 	.word	0x0801c3c0
     bc0:	0801c3d0 	.word	0x0801c3d0
     bc4:	0801c3dc 	.word	0x0801c3dc
     bc8:	0801c3ec 	.word	0x0801c3ec
     bcc:	0801c400 	.word	0x0801c400
     bd0:	0801c414 	.word	0x0801c414
     bd4:	0801c428 	.word	0x0801c428
     bd8:	0801c448 	.word	0x0801c448
     bdc:	0801c464 	.word	0x0801c464
     be0:	0801c47c 	.word	0x0801c47c
     be4:	0801c49c 	.word	0x0801c49c
     be8:	0801c4b4 	.word	0x0801c4b4
     bec:	0801c4cc 	.word	0x0801c4cc
     bf0:	0801c4dc 	.word	0x0801c4dc
     bf4:	0801c4f4 	.word	0x0801c4f4
     bf8:	0801c500 	.word	0x0801c500
     bfc:	0801c50c 	.word	0x0801c50c
     c00:	0801c520 	.word	0x0801c520

00000c04 <calc_defined_step_MW_sweep>:
  * @param  POP cycles per point
  * @param  Number of points
  * @param	POP_period in us
  * @retval Success/failure or early termination
  */
bool calc_defined_step_MW_sweep(const double centre_freq, const double span, const uint32_t pop_cycles_per_point, const uint32_t num_points_req) {
     c04:	b580      	push	{r7, lr}
     c06:	b094      	sub	sp, #80	; 0x50
     c08:	af02      	add	r7, sp, #8
     c0a:	ed87 0b04 	vstr	d0, [r7, #16]
     c0e:	ed87 1b02 	vstr	d1, [r7, #8]
     c12:	6078      	str	r0, [r7, #4]
     c14:	6039      	str	r1, [r7, #0]
	printf("MW sweep will have %.10g GHz centre frequency with %.5g Hz span\r\n", centre_freq/1000000000, span);
     c16:	ed97 7b04 	vldr	d7, [r7, #16]
     c1a:	ed9f 6b8d 	vldr	d6, [pc, #564]	; e50 <calc_defined_step_MW_sweep+0x24c>
     c1e:	ee87 5b06 	vdiv.f64	d5, d7, d6
     c22:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
     c26:	e9cd 2300 	strd	r2, r3, [sp]
     c2a:	ec53 2b15 	vmov	r2, r3, d5
     c2e:	4892      	ldr	r0, [pc, #584]	; (e78 <calc_defined_step_MW_sweep+0x274>)
     c30:	f000 ff3a 	bl	1aa8 <__printf_veneer>
	printf("and %ld POP cycles per point\r\n", pop_cycles_per_point);
     c34:	6879      	ldr	r1, [r7, #4]
     c36:	4891      	ldr	r0, [pc, #580]	; (e7c <calc_defined_step_MW_sweep+0x278>)
     c38:	f000 ff36 	bl	1aa8 <__printf_veneer>
	mw_sweep_settings.sweep_type = FIXED_STEPS;
     c3c:	4b90      	ldr	r3, [pc, #576]	; (e80 <calc_defined_step_MW_sweep+0x27c>)
     c3e:	2200      	movs	r2, #0
     c40:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
	mw_sweep_settings.pop_cycles_per_point = pop_cycles_per_point;
     c44:	4a8e      	ldr	r2, [pc, #568]	; (e80 <calc_defined_step_MW_sweep+0x27c>)
     c46:	687b      	ldr	r3, [r7, #4]
     c48:	6153      	str	r3, [r2, #20]
	mw_sweep_settings.centre_freq = centre_freq;
     c4a:	498d      	ldr	r1, [pc, #564]	; (e80 <calc_defined_step_MW_sweep+0x27c>)
     c4c:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
     c50:	e9c1 230a 	strd	r2, r3, [r1, #40]	; 0x28
	mw_sweep_settings.span = span;
     c54:	498a      	ldr	r1, [pc, #552]	; (e80 <calc_defined_step_MW_sweep+0x27c>)
     c56:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
     c5a:	e9c1 230c 	strd	r2, r3, [r1, #48]	; 0x30

	/* Calculate start frequency */
	double start_freq = centre_freq - 0.5* span;
     c5e:	ed97 7b02 	vldr	d7, [r7, #8]
     c62:	eeb6 6b00 	vmov.f64	d6, #96	; 0x3f000000  0.5
     c66:	ee27 7b06 	vmul.f64	d7, d7, d6
     c6a:	ed97 6b04 	vldr	d6, [r7, #16]
     c6e:	ee36 7b47 	vsub.f64	d7, d6, d7
     c72:	ed87 7b10 	vstr	d7, [r7, #64]	; 0x40
	mw_sweep_settings.k = calculate_k(start_freq);
     c76:	ed97 0b10 	vldr	d0, [r7, #64]	; 0x40
     c7a:	f000 fb1f 	bl	12bc <calculate_k>
     c7e:	4603      	mov	r3, r0
     c80:	b2da      	uxtb	r2, r3
     c82:	4b7f      	ldr	r3, [pc, #508]	; (e80 <calc_defined_step_MW_sweep+0x27c>)
     c84:	705a      	strb	r2, [r3, #1]

	/* Extrapolate step size requested versus achievable  */
	const double step_size_Hz = span / (num_points_req - 1);
     c86:	683b      	ldr	r3, [r7, #0]
     c88:	3b01      	subs	r3, #1
     c8a:	ee07 3a90 	vmov	s15, r3
     c8e:	eeb8 6b67 	vcvt.f64.u32	d6, s15
     c92:	ed97 5b02 	vldr	d5, [r7, #8]
     c96:	ee85 7b06 	vdiv.f64	d7, d5, d6
     c9a:	ed87 7b0e 	vstr	d7, [r7, #56]	; 0x38
	printf("Requested %ld steps, therefore step size of %.3g Hz\r\n", num_points_req, step_size_Hz);
     c9e:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
     ca2:	6839      	ldr	r1, [r7, #0]
     ca4:	4877      	ldr	r0, [pc, #476]	; (e84 <calc_defined_step_MW_sweep+0x280>)
     ca6:	f000 feff 	bl	1aa8 <__printf_veneer>
	const double unit_step_size_Hz = REF_FREQ / (double) (mw_sweep_settings.k * (1 << 24)); //minimum step size possible
     caa:	ed9f 5b6b 	vldr	d5, [pc, #428]	; e58 <calc_defined_step_MW_sweep+0x254>
     cae:	4b74      	ldr	r3, [pc, #464]	; (e80 <calc_defined_step_MW_sweep+0x27c>)
     cb0:	785b      	ldrb	r3, [r3, #1]
     cb2:	061b      	lsls	r3, r3, #24
     cb4:	ee07 3a90 	vmov	s15, r3
     cb8:	eeb8 6be7 	vcvt.f64.s32	d6, s15
     cbc:	ee85 7b06 	vdiv.f64	d7, d5, d6
     cc0:	ed87 7b0c 	vstr	d7, [r7, #48]	; 0x30
	//printf("Unit step size: %.3g Hz\r\n", unit_step_size_Hz);
	mw_sweep_settings.step_size = (step_size_Hz / unit_step_size_Hz + 0.5);
     cc4:	ed97 5b0e 	vldr	d5, [r7, #56]	; 0x38
     cc8:	ed97 6b0c 	vldr	d6, [r7, #48]	; 0x30
     ccc:	ee85 7b06 	vdiv.f64	d7, d5, d6
     cd0:	eeb6 6b00 	vmov.f64	d6, #96	; 0x3f000000  0.5
     cd4:	ee37 7b06 	vadd.f64	d7, d7, d6
     cd8:	eefc 7bc7 	vcvt.u32.f64	s15, d7
     cdc:	ee17 2a90 	vmov	r2, s15
     ce0:	4b67      	ldr	r3, [pc, #412]	; (e80 <calc_defined_step_MW_sweep+0x27c>)
     ce2:	611a      	str	r2, [r3, #16]
	if (!mw_sweep_settings.step_size) { //step_size must be a positive non-zero integer
     ce4:	4b66      	ldr	r3, [pc, #408]	; (e80 <calc_defined_step_MW_sweep+0x27c>)
     ce6:	691b      	ldr	r3, [r3, #16]
     ce8:	2b00      	cmp	r3, #0
     cea:	d104      	bne.n	cf6 <calc_defined_step_MW_sweep+0xf2>
		mw_sweep_settings.step_size++;
     cec:	4b64      	ldr	r3, [pc, #400]	; (e80 <calc_defined_step_MW_sweep+0x27c>)
     cee:	691b      	ldr	r3, [r3, #16]
     cf0:	3301      	adds	r3, #1
     cf2:	4a63      	ldr	r2, [pc, #396]	; (e80 <calc_defined_step_MW_sweep+0x27c>)
     cf4:	6113      	str	r3, [r2, #16]
	}
	const double achieved_step_size = (double) (mw_sweep_settings.step_size * unit_step_size_Hz);
     cf6:	4b62      	ldr	r3, [pc, #392]	; (e80 <calc_defined_step_MW_sweep+0x27c>)
     cf8:	691b      	ldr	r3, [r3, #16]
     cfa:	ee07 3a90 	vmov	s15, r3
     cfe:	eeb8 7b67 	vcvt.f64.u32	d7, s15
     d02:	ed97 6b0c 	vldr	d6, [r7, #48]	; 0x30
     d06:	ee26 7b07 	vmul.f64	d7, d6, d7
     d0a:	ed87 7b0a 	vstr	d7, [r7, #40]	; 0x28
	printf("Step size achieved: %.3g Hz\r\n", achieved_step_size);
     d0e:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
     d12:	485d      	ldr	r0, [pc, #372]	; (e88 <calc_defined_step_MW_sweep+0x284>)
     d14:	f000 fec8 	bl	1aa8 <__printf_veneer>
	mw_sweep_settings.num_steps = span / achieved_step_size;
     d18:	ed97 5b02 	vldr	d5, [r7, #8]
     d1c:	ed97 6b0a 	vldr	d6, [r7, #40]	; 0x28
     d20:	ee85 7b06 	vdiv.f64	d7, d5, d6
     d24:	eefc 7bc7 	vcvt.u32.f64	s15, d7
     d28:	ee17 2a90 	vmov	r2, s15
     d2c:	4b54      	ldr	r3, [pc, #336]	; (e80 <calc_defined_step_MW_sweep+0x27c>)
     d2e:	60da      	str	r2, [r3, #12]

	/* Can avoid spurs if frequency requested can be encoded exactly  */
	start_freq = ((long)(start_freq/unit_step_size_Hz)) * unit_step_size_Hz;
     d30:	ed97 5b10 	vldr	d5, [r7, #64]	; 0x40
     d34:	ed97 6b0c 	vldr	d6, [r7, #48]	; 0x30
     d38:	ee85 7b06 	vdiv.f64	d7, d5, d6
     d3c:	eefd 7bc7 	vcvt.s32.f64	s15, d7
     d40:	eeb8 7be7 	vcvt.f64.s32	d7, s15
     d44:	ed97 6b0c 	vldr	d6, [r7, #48]	; 0x30
     d48:	ee26 7b07 	vmul.f64	d7, d6, d7
     d4c:	ed87 7b10 	vstr	d7, [r7, #64]	; 0x40

	/* Calculate the N division ratio, extracting the fractional and integer parts */
	const double N = ((start_freq * mw_sweep_settings.k) / REF_FREQ);
     d50:	4b4b      	ldr	r3, [pc, #300]	; (e80 <calc_defined_step_MW_sweep+0x27c>)
     d52:	785b      	ldrb	r3, [r3, #1]
     d54:	ee07 3a90 	vmov	s15, r3
     d58:	eeb8 6be7 	vcvt.f64.s32	d6, s15
     d5c:	ed97 7b10 	vldr	d7, [r7, #64]	; 0x40
     d60:	ee26 6b07 	vmul.f64	d6, d6, d7
     d64:	ed9f 5b3c 	vldr	d5, [pc, #240]	; e58 <calc_defined_step_MW_sweep+0x254>
     d68:	ee86 7b05 	vdiv.f64	d7, d6, d5
     d6c:	ed87 7b08 	vstr	d7, [r7, #32]
	mw_sweep_settings.NINT = N;
     d70:	ed97 7b08 	vldr	d7, [r7, #32]
     d74:	eefc 7bc7 	vcvt.u32.f64	s15, d7
     d78:	ee17 2a90 	vmov	r2, s15
     d7c:	4b40      	ldr	r3, [pc, #256]	; (e80 <calc_defined_step_MW_sweep+0x27c>)
     d7e:	605a      	str	r2, [r3, #4]
	mw_sweep_settings.NFRAC_start = ((N - mw_sweep_settings.NINT) * (1 << 24)) + 0.5;
     d80:	4b3f      	ldr	r3, [pc, #252]	; (e80 <calc_defined_step_MW_sweep+0x27c>)
     d82:	685b      	ldr	r3, [r3, #4]
     d84:	ee07 3a90 	vmov	s15, r3
     d88:	eeb8 7b67 	vcvt.f64.u32	d7, s15
     d8c:	ed97 6b08 	vldr	d6, [r7, #32]
     d90:	ee36 7b47 	vsub.f64	d7, d6, d7
     d94:	ed9f 6b32 	vldr	d6, [pc, #200]	; e60 <calc_defined_step_MW_sweep+0x25c>
     d98:	ee27 7b06 	vmul.f64	d7, d7, d6
     d9c:	eeb6 6b00 	vmov.f64	d6, #96	; 0x3f000000  0.5
     da0:	ee37 7b06 	vadd.f64	d7, d7, d6
     da4:	eefc 7bc7 	vcvt.u32.f64	s15, d7
     da8:	ee17 2a90 	vmov	r2, s15
     dac:	4b34      	ldr	r3, [pc, #208]	; (e80 <calc_defined_step_MW_sweep+0x27c>)
     dae:	609a      	str	r2, [r3, #8]

	/* Calculate dwell time at each MW frequency */
	mw_sweep_settings.stabilise_time = MW_STABILISE_TIME_US; //Global MW stabilisation time
     db0:	f241 7270 	movw	r2, #6000	; 0x1770
     db4:	4b32      	ldr	r3, [pc, #200]	; (e80 <calc_defined_step_MW_sweep+0x27c>)
     db6:	619a      	str	r2, [r3, #24]
	mw_sweep_settings.dwell_time = pop_cycles_per_point * POP_period_us + TIMING_MARGIN_US;
     db8:	4b34      	ldr	r3, [pc, #208]	; (e8c <calc_defined_step_MW_sweep+0x288>)
     dba:	681b      	ldr	r3, [r3, #0]
     dbc:	687a      	ldr	r2, [r7, #4]
     dbe:	fb02 f303 	mul.w	r3, r2, r3
     dc2:	2264      	movs	r2, #100	; 0x64
     dc4:	4413      	add	r3, r2
     dc6:	4a2e      	ldr	r2, [pc, #184]	; (e80 <calc_defined_step_MW_sweep+0x27c>)
     dc8:	61d3      	str	r3, [r2, #28]

	/* Calculate the period of a sweep */
	const double calc_sweep_time = (double)(MW_STABILISE_TIME_US + MW_PROCESSING_TIME_US + mw_sweep_settings.dwell_time) * (double)(mw_sweep_settings.num_steps+1)/1000000;
     dca:	f241 7270 	movw	r2, #6000	; 0x1770
     dce:	2301      	movs	r3, #1
     dd0:	441a      	add	r2, r3
     dd2:	4b2b      	ldr	r3, [pc, #172]	; (e80 <calc_defined_step_MW_sweep+0x27c>)
     dd4:	69db      	ldr	r3, [r3, #28]
     dd6:	4413      	add	r3, r2
     dd8:	ee07 3a90 	vmov	s15, r3
     ddc:	eeb8 6b67 	vcvt.f64.u32	d6, s15
     de0:	4b27      	ldr	r3, [pc, #156]	; (e80 <calc_defined_step_MW_sweep+0x27c>)
     de2:	68db      	ldr	r3, [r3, #12]
     de4:	3301      	adds	r3, #1
     de6:	ee07 3a90 	vmov	s15, r3
     dea:	eeb8 7b67 	vcvt.f64.u32	d7, s15
     dee:	ee26 6b07 	vmul.f64	d6, d6, d7
     df2:	ed9f 5b1d 	vldr	d5, [pc, #116]	; e68 <calc_defined_step_MW_sweep+0x264>
     df6:	ee86 7b05 	vdiv.f64	d7, d6, d5
     dfa:	ed87 7b06 	vstr	d7, [r7, #24]
	printf("Sweep period: %.3g s\r\n", calc_sweep_time);
     dfe:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
     e02:	4823      	ldr	r0, [pc, #140]	; (e90 <calc_defined_step_MW_sweep+0x28c>)
     e04:	f000 fe50 	bl	1aa8 <__printf_veneer>
	printf("%ld points, %.3g ms each\r\n", mw_sweep_settings.num_steps, 1000 * calc_sweep_time / (mw_sweep_settings.num_steps + 1));
     e08:	4b1d      	ldr	r3, [pc, #116]	; (e80 <calc_defined_step_MW_sweep+0x27c>)
     e0a:	68d9      	ldr	r1, [r3, #12]
     e0c:	ed97 7b06 	vldr	d7, [r7, #24]
     e10:	ed9f 6b17 	vldr	d6, [pc, #92]	; e70 <calc_defined_step_MW_sweep+0x26c>
     e14:	ee27 6b06 	vmul.f64	d6, d7, d6
     e18:	4b19      	ldr	r3, [pc, #100]	; (e80 <calc_defined_step_MW_sweep+0x27c>)
     e1a:	68db      	ldr	r3, [r3, #12]
     e1c:	3301      	adds	r3, #1
     e1e:	ee07 3a90 	vmov	s15, r3
     e22:	eeb8 7b67 	vcvt.f64.u32	d7, s15
     e26:	ee86 5b07 	vdiv.f64	d5, d6, d7
     e2a:	ec53 2b15 	vmov	r2, r3, d5
     e2e:	4819      	ldr	r0, [pc, #100]	; (e94 <calc_defined_step_MW_sweep+0x290>)
     e30:	f000 fe3a 	bl	1aa8 <__printf_veneer>

	mw_sweep_settings.current_point = 0;
     e34:	4b12      	ldr	r3, [pc, #72]	; (e80 <calc_defined_step_MW_sweep+0x27c>)
     e36:	2200      	movs	r2, #0
     e38:	625a      	str	r2, [r3, #36]	; 0x24
	mw_sweep_settings.sweep_period = calc_sweep_time;
     e3a:	4911      	ldr	r1, [pc, #68]	; (e80 <calc_defined_step_MW_sweep+0x27c>)
     e3c:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
     e40:	e9c1 230e 	strd	r2, r3, [r1, #56]	; 0x38

	//print_mw_sweep_settings();
	return(true);
     e44:	2301      	movs	r3, #1
}
     e46:	4618      	mov	r0, r3
     e48:	3748      	adds	r7, #72	; 0x48
     e4a:	46bd      	mov	sp, r7
     e4c:	bd80      	pop	{r7, pc}
     e4e:	bf00      	nop
     e50:	00000000 	.word	0x00000000
     e54:	41cdcd65 	.word	0x41cdcd65
     e58:	00000000 	.word	0x00000000
     e5c:	4187d784 	.word	0x4187d784
     e60:	00000000 	.word	0x00000000
     e64:	41700000 	.word	0x41700000
     e68:	00000000 	.word	0x00000000
     e6c:	412e8480 	.word	0x412e8480
     e70:	00000000 	.word	0x00000000
     e74:	408f4000 	.word	0x408f4000
     e78:	0801c534 	.word	0x0801c534
     e7c:	0801c578 	.word	0x0801c578
     e80:	20000640 	.word	0x20000640
     e84:	0801c598 	.word	0x0801c598
     e88:	0801c5d0 	.word	0x0801c5d0
     e8c:	200005fc 	.word	0x200005fc
     e90:	0801c5f0 	.word	0x0801c5f0
     e94:	0801c608 	.word	0x0801c608

00000e98 <calc_fixed_time_MW_sweep>:
  * @param  Span in Hz
  * @param  Sweep period in s
  * @param  Additional time for scope sync
  * @retval Success/failure or early termination
  */
bool calc_fixed_time_MW_sweep(const double centre_freq, const double span, const double requested_sweep_period, const bool scope_sync_time) {
     e98:	b580      	push	{r7, lr}
     e9a:	b09e      	sub	sp, #120	; 0x78
     e9c:	af04      	add	r7, sp, #16
     e9e:	ed87 0b06 	vstr	d0, [r7, #24]
     ea2:	ed87 1b04 	vstr	d1, [r7, #16]
     ea6:	ed87 2b02 	vstr	d2, [r7, #8]
     eaa:	4603      	mov	r3, r0
     eac:	71fb      	strb	r3, [r7, #7]
	//Dwell time must be a minimum of one POP cycle
	//Overall dwell time should be at least 50% of sweep time
	//Number of points shall be maximised within the available time

	printf("MW sweep will have %.10g GHz centre frequency with %.5g Hz span, over %.3g s\r\n", centre_freq/1000000000, span, requested_sweep_period);
     eae:	ed97 7b06 	vldr	d7, [r7, #24]
     eb2:	ed9f 6b97 	vldr	d6, [pc, #604]	; 1110 <calc_fixed_time_MW_sweep+0x278>
     eb6:	ee87 5b06 	vdiv.f64	d5, d7, d6
     eba:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
     ebe:	e9cd 2302 	strd	r2, r3, [sp, #8]
     ec2:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
     ec6:	e9cd 2300 	strd	r2, r3, [sp]
     eca:	ec53 2b15 	vmov	r2, r3, d5
     ece:	4898      	ldr	r0, [pc, #608]	; (1130 <calc_fixed_time_MW_sweep+0x298>)
     ed0:	f000 fdea 	bl	1aa8 <__printf_veneer>
	mw_sweep_settings.sweep_type = FIXED_TIME;
     ed4:	4b97      	ldr	r3, [pc, #604]	; (1134 <calc_fixed_time_MW_sweep+0x29c>)
     ed6:	2201      	movs	r2, #1
     ed8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
	mw_sweep_settings.centre_freq = centre_freq;
     edc:	4995      	ldr	r1, [pc, #596]	; (1134 <calc_fixed_time_MW_sweep+0x29c>)
     ede:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
     ee2:	e9c1 230a 	strd	r2, r3, [r1, #40]	; 0x28
	mw_sweep_settings.span = span;
     ee6:	4993      	ldr	r1, [pc, #588]	; (1134 <calc_fixed_time_MW_sweep+0x29c>)
     ee8:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
     eec:	e9c1 230c 	strd	r2, r3, [r1, #48]	; 0x30

	mw_sweep_settings.dwell_time = POP_period_us + TIMING_MARGIN_US; //minimum possible value of dwell_time in us
     ef0:	4b91      	ldr	r3, [pc, #580]	; (1138 <calc_fixed_time_MW_sweep+0x2a0>)
     ef2:	681b      	ldr	r3, [r3, #0]
     ef4:	2264      	movs	r2, #100	; 0x64
     ef6:	4413      	add	r3, r2
     ef8:	4a8e      	ldr	r2, [pc, #568]	; (1134 <calc_fixed_time_MW_sweep+0x29c>)
     efa:	61d3      	str	r3, [r2, #28]
	uint32_t point_time = MW_STABILISE_TIME_US + MW_PROCESSING_TIME_US + mw_sweep_settings.dwell_time; //minimum possible value in us
     efc:	f241 7270 	movw	r2, #6000	; 0x1770
     f00:	2301      	movs	r3, #1
     f02:	441a      	add	r2, r3
     f04:	4b8b      	ldr	r3, [pc, #556]	; (1134 <calc_fixed_time_MW_sweep+0x29c>)
     f06:	69db      	ldr	r3, [r3, #28]
     f08:	4413      	add	r3, r2
     f0a:	65fb      	str	r3, [r7, #92]	; 0x5c
	uint32_t points_in_sweep = requested_sweep_period * (double)(1000000 / point_time); //maximum possible number of steps in sweep, rounded down to an integer
     f0c:	4a8b      	ldr	r2, [pc, #556]	; (113c <calc_fixed_time_MW_sweep+0x2a4>)
     f0e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
     f10:	fbb2 f3f3 	udiv	r3, r2, r3
     f14:	ee07 3a90 	vmov	s15, r3
     f18:	eeb8 6b67 	vcvt.f64.u32	d6, s15
     f1c:	ed97 7b02 	vldr	d7, [r7, #8]
     f20:	ee26 7b07 	vmul.f64	d7, d6, d7
     f24:	eefc 7bc7 	vcvt.u32.f64	s15, d7
     f28:	ee17 3a90 	vmov	r3, s15
     f2c:	65bb      	str	r3, [r7, #88]	; 0x58
	//printf("%lu points in sweep, maximum\r\n", points_in_sweep);

	/* now figure out the unit_step_size and how many steps will be taken in the span */

	/* Calculate start frequency */
	double start_freq = centre_freq - 0.5* span;
     f2e:	ed97 7b04 	vldr	d7, [r7, #16]
     f32:	eeb6 6b00 	vmov.f64	d6, #96	; 0x3f000000  0.5
     f36:	ee27 7b06 	vmul.f64	d7, d7, d6
     f3a:	ed97 6b06 	vldr	d6, [r7, #24]
     f3e:	ee36 7b47 	vsub.f64	d7, d6, d7
     f42:	ed87 7b14 	vstr	d7, [r7, #80]	; 0x50
	mw_sweep_settings.k = calculate_k(start_freq);
     f46:	ed97 0b14 	vldr	d0, [r7, #80]	; 0x50
     f4a:	f000 f9b7 	bl	12bc <calculate_k>
     f4e:	4603      	mov	r3, r0
     f50:	b2da      	uxtb	r2, r3
     f52:	4b78      	ldr	r3, [pc, #480]	; (1134 <calc_fixed_time_MW_sweep+0x29c>)
     f54:	705a      	strb	r2, [r3, #1]

	//steps should be evenly sized
	//selected step size should be an integer multiple of the unit step size
	//increase the step_size value until the sweep fits into the available period
	const double unit_step_size_Hz = REF_FREQ / (double) (mw_sweep_settings.k * (1 << 24)); //minimum step size possible
     f56:	ed9f 5b70 	vldr	d5, [pc, #448]	; 1118 <calc_fixed_time_MW_sweep+0x280>
     f5a:	4b76      	ldr	r3, [pc, #472]	; (1134 <calc_fixed_time_MW_sweep+0x29c>)
     f5c:	785b      	ldrb	r3, [r3, #1]
     f5e:	061b      	lsls	r3, r3, #24
     f60:	ee07 3a90 	vmov	s15, r3
     f64:	eeb8 6be7 	vcvt.f64.s32	d6, s15
     f68:	ee85 7b06 	vdiv.f64	d7, d5, d6
     f6c:	ed87 7b12 	vstr	d7, [r7, #72]	; 0x48
	//printf("Unit step size: %.3g Hz\r\n", unit_step_size_Hz);
	mw_sweep_settings.step_size = 1;
     f70:	4b70      	ldr	r3, [pc, #448]	; (1134 <calc_fixed_time_MW_sweep+0x29c>)
     f72:	2201      	movs	r2, #1
     f74:	611a      	str	r2, [r3, #16]
	while ((mw_sweep_settings.step_size * points_in_sweep) < (span / unit_step_size_Hz)) {
     f76:	e004      	b.n	f82 <calc_fixed_time_MW_sweep+0xea>
		mw_sweep_settings.step_size++;
     f78:	4b6e      	ldr	r3, [pc, #440]	; (1134 <calc_fixed_time_MW_sweep+0x29c>)
     f7a:	691b      	ldr	r3, [r3, #16]
     f7c:	3301      	adds	r3, #1
     f7e:	4a6d      	ldr	r2, [pc, #436]	; (1134 <calc_fixed_time_MW_sweep+0x29c>)
     f80:	6113      	str	r3, [r2, #16]
	while ((mw_sweep_settings.step_size * points_in_sweep) < (span / unit_step_size_Hz)) {
     f82:	4b6c      	ldr	r3, [pc, #432]	; (1134 <calc_fixed_time_MW_sweep+0x29c>)
     f84:	691b      	ldr	r3, [r3, #16]
     f86:	6dba      	ldr	r2, [r7, #88]	; 0x58
     f88:	fb02 f303 	mul.w	r3, r2, r3
     f8c:	ee07 3a90 	vmov	s15, r3
     f90:	eeb8 6b67 	vcvt.f64.u32	d6, s15
     f94:	ed97 4b04 	vldr	d4, [r7, #16]
     f98:	ed97 5b12 	vldr	d5, [r7, #72]	; 0x48
     f9c:	ee84 7b05 	vdiv.f64	d7, d4, d5
     fa0:	eeb4 6bc7 	vcmpe.f64	d6, d7
     fa4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
     fa8:	d4e6      	bmi.n	f78 <calc_fixed_time_MW_sweep+0xe0>
	}
	const double achieved_step_size = (double) (mw_sweep_settings.step_size * unit_step_size_Hz);
     faa:	4b62      	ldr	r3, [pc, #392]	; (1134 <calc_fixed_time_MW_sweep+0x29c>)
     fac:	691b      	ldr	r3, [r3, #16]
     fae:	ee07 3a90 	vmov	s15, r3
     fb2:	eeb8 7b67 	vcvt.f64.u32	d7, s15
     fb6:	ed97 6b12 	vldr	d6, [r7, #72]	; 0x48
     fba:	ee26 7b07 	vmul.f64	d7, d6, d7
     fbe:	ed87 7b10 	vstr	d7, [r7, #64]	; 0x40
	printf("Step size: %lu x unit step i.e. %.3g Hz\r\n", mw_sweep_settings.step_size, achieved_step_size);
     fc2:	4b5c      	ldr	r3, [pc, #368]	; (1134 <calc_fixed_time_MW_sweep+0x29c>)
     fc4:	6919      	ldr	r1, [r3, #16]
     fc6:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
     fca:	485d      	ldr	r0, [pc, #372]	; (1140 <calc_fixed_time_MW_sweep+0x2a8>)
     fcc:	f000 fd6c 	bl	1aa8 <__printf_veneer>

	//calculate number of steps in sweep and round down to an integer (must fit in time available)
	mw_sweep_settings.num_steps = (span / achieved_step_size);
     fd0:	ed97 5b04 	vldr	d5, [r7, #16]
     fd4:	ed97 6b10 	vldr	d6, [r7, #64]	; 0x40
     fd8:	ee85 7b06 	vdiv.f64	d7, d5, d6
     fdc:	eefc 7bc7 	vcvt.u32.f64	s15, d7
     fe0:	ee17 2a90 	vmov	r2, s15
     fe4:	4b53      	ldr	r3, [pc, #332]	; (1134 <calc_fixed_time_MW_sweep+0x29c>)
     fe6:	60da      	str	r2, [r3, #12]

	const uint32_t point_time_us = 1000000 * requested_sweep_period / (mw_sweep_settings.num_steps + 1); //period of each point in us
     fe8:	ed97 7b02 	vldr	d7, [r7, #8]
     fec:	ed9f 6b4c 	vldr	d6, [pc, #304]	; 1120 <calc_fixed_time_MW_sweep+0x288>
     ff0:	ee27 5b06 	vmul.f64	d5, d7, d6
     ff4:	4b4f      	ldr	r3, [pc, #316]	; (1134 <calc_fixed_time_MW_sweep+0x29c>)
     ff6:	68db      	ldr	r3, [r3, #12]
     ff8:	3301      	adds	r3, #1
     ffa:	ee07 3a90 	vmov	s15, r3
     ffe:	eeb8 6b67 	vcvt.f64.u32	d6, s15
    1002:	ee85 7b06 	vdiv.f64	d7, d5, d6
    1006:	eefc 7bc7 	vcvt.u32.f64	s15, d7
    100a:	ee17 3a90 	vmov	r3, s15
    100e:	63fb      	str	r3, [r7, #60]	; 0x3c
//	printf("DEBUG point_time_us: %lu \r\n", point_time_us);
//	printf("DEBUG sweep time in us: %lu \r\n", point_time_us * (mw_sweep_settings.num_steps + 1));
	mw_sweep_settings.pop_cycles_per_point = (point_time_us - MW_STABILISE_TIME_US - TIMING_MARGIN_US - MW_PROCESSING_TIME_US)/POP_period_us;
    1010:	f241 7270 	movw	r2, #6000	; 0x1770
    1014:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
    1016:	1a9b      	subs	r3, r3, r2
    1018:	2264      	movs	r2, #100	; 0x64
    101a:	1a9b      	subs	r3, r3, r2
    101c:	2201      	movs	r2, #1
    101e:	1a9a      	subs	r2, r3, r2
    1020:	4b45      	ldr	r3, [pc, #276]	; (1138 <calc_fixed_time_MW_sweep+0x2a0>)
    1022:	681b      	ldr	r3, [r3, #0]
    1024:	fbb2 f3f3 	udiv	r3, r2, r3
    1028:	4a42      	ldr	r2, [pc, #264]	; (1134 <calc_fixed_time_MW_sweep+0x29c>)
    102a:	6153      	str	r3, [r2, #20]
	printf("%lu points in sweep, %lu ms and %lu POP cycles each\r\n", mw_sweep_settings.num_steps + 1, point_time_us / 1000, mw_sweep_settings.pop_cycles_per_point);
    102c:	4b41      	ldr	r3, [pc, #260]	; (1134 <calc_fixed_time_MW_sweep+0x29c>)
    102e:	68db      	ldr	r3, [r3, #12]
    1030:	1c59      	adds	r1, r3, #1
    1032:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
    1034:	4a43      	ldr	r2, [pc, #268]	; (1144 <calc_fixed_time_MW_sweep+0x2ac>)
    1036:	fba2 2303 	umull	r2, r3, r2, r3
    103a:	099a      	lsrs	r2, r3, #6
    103c:	4b3d      	ldr	r3, [pc, #244]	; (1134 <calc_fixed_time_MW_sweep+0x29c>)
    103e:	695b      	ldr	r3, [r3, #20]
    1040:	4841      	ldr	r0, [pc, #260]	; (1148 <calc_fixed_time_MW_sweep+0x2b0>)
    1042:	f000 fd31 	bl	1aa8 <__printf_veneer>
	uint32_t min_dwell_required_us = mw_sweep_settings.pop_cycles_per_point * POP_period_us + TIMING_MARGIN_US; //minimum dwell_time to achieve above
    1046:	4b3b      	ldr	r3, [pc, #236]	; (1134 <calc_fixed_time_MW_sweep+0x29c>)
    1048:	695b      	ldr	r3, [r3, #20]
    104a:	4a3b      	ldr	r2, [pc, #236]	; (1138 <calc_fixed_time_MW_sweep+0x2a0>)
    104c:	6812      	ldr	r2, [r2, #0]
    104e:	fb02 f303 	mul.w	r3, r2, r3
    1052:	2264      	movs	r2, #100	; 0x64
    1054:	4413      	add	r3, r2
    1056:	63bb      	str	r3, [r7, #56]	; 0x38
	mw_sweep_settings.dwell_time = point_time_us - MW_STABILISE_TIME_US - MW_PROCESSING_TIME_US; //actual programmed dwell time
    1058:	f241 7270 	movw	r2, #6000	; 0x1770
    105c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
    105e:	1a9b      	subs	r3, r3, r2
    1060:	2201      	movs	r2, #1
    1062:	1a9b      	subs	r3, r3, r2
    1064:	4a33      	ldr	r2, [pc, #204]	; (1134 <calc_fixed_time_MW_sweep+0x29c>)
    1066:	61d3      	str	r3, [r2, #28]
	if (mw_sweep_settings.dwell_time < min_dwell_required_us) {
    1068:	4b32      	ldr	r3, [pc, #200]	; (1134 <calc_fixed_time_MW_sweep+0x29c>)
    106a:	69db      	ldr	r3, [r3, #28]
    106c:	6bba      	ldr	r2, [r7, #56]	; 0x38
    106e:	429a      	cmp	r2, r3
    1070:	d902      	bls.n	1078 <calc_fixed_time_MW_sweep+0x1e0>
		mw_sweep_settings.dwell_time = min_dwell_required_us;
    1072:	4a30      	ldr	r2, [pc, #192]	; (1134 <calc_fixed_time_MW_sweep+0x29c>)
    1074:	6bbb      	ldr	r3, [r7, #56]	; 0x38
    1076:	61d3      	str	r3, [r2, #28]
	}
//	printf("DEBUG dwell_time: %lu \r\n", mw_sweep_settings.dwell_time);
//	printf("DEBUG sweep time in us: %lu \r\n", (mw_sweep_settings.dwell_time + MW_STABILISE_TIME_US + MW_PROCESSING_TIME_US) * (mw_sweep_settings.num_steps + 1));

	/* Double check - calculate the period of a sweep */
	double point_period = (double)(MW_STABILISE_TIME_US + MW_PROCESSING_TIME_US + mw_sweep_settings.dwell_time)/1000000;
    1078:	f241 7270 	movw	r2, #6000	; 0x1770
    107c:	2301      	movs	r3, #1
    107e:	441a      	add	r2, r3
    1080:	4b2c      	ldr	r3, [pc, #176]	; (1134 <calc_fixed_time_MW_sweep+0x29c>)
    1082:	69db      	ldr	r3, [r3, #28]
    1084:	4413      	add	r3, r2
    1086:	ee07 3a90 	vmov	s15, r3
    108a:	eeb8 6b67 	vcvt.f64.u32	d6, s15
    108e:	ed9f 5b24 	vldr	d5, [pc, #144]	; 1120 <calc_fixed_time_MW_sweep+0x288>
    1092:	ee86 7b05 	vdiv.f64	d7, d6, d5
    1096:	ed87 7b0c 	vstr	d7, [r7, #48]	; 0x30
//	printf("Point period %f\r\n", point_period);
	double calc_sweep_time = point_period * (mw_sweep_settings.num_steps + 1);
    109a:	4b26      	ldr	r3, [pc, #152]	; (1134 <calc_fixed_time_MW_sweep+0x29c>)
    109c:	68db      	ldr	r3, [r3, #12]
    109e:	3301      	adds	r3, #1
    10a0:	ee07 3a90 	vmov	s15, r3
    10a4:	eeb8 7b67 	vcvt.f64.u32	d7, s15
    10a8:	ed97 6b0c 	vldr	d6, [r7, #48]	; 0x30
    10ac:	ee26 7b07 	vmul.f64	d7, d6, d7
    10b0:	ed87 7b18 	vstr	d7, [r7, #96]	; 0x60
//	printf("calc_sweep_time %f\r\n", calc_sweep_time);
	double min_sweep_time = (double)((min_dwell_required_us + MW_STABILISE_TIME_US + MW_PROCESSING_TIME_US) * (mw_sweep_settings.num_steps + 1)) / 1000000;
    10b4:	f241 7270 	movw	r2, #6000	; 0x1770
    10b8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
    10ba:	4413      	add	r3, r2
    10bc:	2201      	movs	r2, #1
    10be:	4413      	add	r3, r2
    10c0:	4a1c      	ldr	r2, [pc, #112]	; (1134 <calc_fixed_time_MW_sweep+0x29c>)
    10c2:	68d2      	ldr	r2, [r2, #12]
    10c4:	3201      	adds	r2, #1
    10c6:	fb02 f303 	mul.w	r3, r2, r3
    10ca:	ee07 3a90 	vmov	s15, r3
    10ce:	eeb8 6b67 	vcvt.f64.u32	d6, s15
    10d2:	ed9f 5b13 	vldr	d5, [pc, #76]	; 1120 <calc_fixed_time_MW_sweep+0x288>
    10d6:	ee86 7b05 	vdiv.f64	d7, d6, d5
    10da:	ed87 7b0a 	vstr	d7, [r7, #40]	; 0x28
	if (calc_sweep_time/min_sweep_time > 1.02) {
    10de:	ed97 5b18 	vldr	d5, [r7, #96]	; 0x60
    10e2:	ed97 6b0a 	vldr	d6, [r7, #40]	; 0x28
    10e6:	ee85 7b06 	vdiv.f64	d7, d5, d6
    10ea:	ed9f 6b0f 	vldr	d6, [pc, #60]	; 1128 <calc_fixed_time_MW_sweep+0x290>
    10ee:	eeb4 7bc6 	vcmpe.f64	d7, d6
    10f2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    10f6:	dd2b      	ble.n	1150 <calc_fixed_time_MW_sweep+0x2b8>
		printf("Sweep period %.4g s but could be reduced to %.4g s\r\n", calc_sweep_time, min_sweep_time);
    10f8:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
    10fc:	e9cd 2300 	strd	r2, r3, [sp]
    1100:	e9d7 2318 	ldrd	r2, r3, [r7, #96]	; 0x60
    1104:	4811      	ldr	r0, [pc, #68]	; (114c <calc_fixed_time_MW_sweep+0x2b4>)
    1106:	f000 fccf 	bl	1aa8 <__printf_veneer>
    110a:	e029      	b.n	1160 <calc_fixed_time_MW_sweep+0x2c8>
    110c:	f3af 8000 	nop.w
    1110:	00000000 	.word	0x00000000
    1114:	41cdcd65 	.word	0x41cdcd65
    1118:	00000000 	.word	0x00000000
    111c:	4187d784 	.word	0x4187d784
    1120:	00000000 	.word	0x00000000
    1124:	412e8480 	.word	0x412e8480
    1128:	851eb852 	.word	0x851eb852
    112c:	3ff051eb 	.word	0x3ff051eb
    1130:	0801c624 	.word	0x0801c624
    1134:	20000640 	.word	0x20000640
    1138:	200005fc 	.word	0x200005fc
    113c:	000f4240 	.word	0x000f4240
    1140:	0801c674 	.word	0x0801c674
    1144:	10624dd3 	.word	0x10624dd3
    1148:	0801c6a0 	.word	0x0801c6a0
    114c:	0801c6d8 	.word	0x0801c6d8
	} else {
		printf("Sweep period %.4g s is pretty much optimal for %lu POP samples per point\r\n", calc_sweep_time, mw_sweep_settings.pop_cycles_per_point);
    1150:	4b57      	ldr	r3, [pc, #348]	; (12b0 <calc_fixed_time_MW_sweep+0x418>)
    1152:	695b      	ldr	r3, [r3, #20]
    1154:	9300      	str	r3, [sp, #0]
    1156:	e9d7 2318 	ldrd	r2, r3, [r7, #96]	; 0x60
    115a:	4856      	ldr	r0, [pc, #344]	; (12b4 <calc_fixed_time_MW_sweep+0x41c>)
    115c:	f000 fca4 	bl	1aa8 <__printf_veneer>

	//Period of MW sweep isn't precise as it's based on measured average processing time
	//Steps are increased by up to 10% to increase the sweep period to guarantee horizontal scope sync
	//These are added to the end of the sweep so that the centre frequency is still central
	//Sweep period will be increased by a maximum of 1s
	if (scope_sync_time) {
    1160:	79fb      	ldrb	r3, [r7, #7]
    1162:	2b00      	cmp	r3, #0
    1164:	d044      	beq.n	11f0 <calc_fixed_time_MW_sweep+0x358>

		mw_sweep_settings.num_steps = mw_sweep_settings.num_steps * 1.1 + 0.5;
    1166:	4b52      	ldr	r3, [pc, #328]	; (12b0 <calc_fixed_time_MW_sweep+0x418>)
    1168:	68db      	ldr	r3, [r3, #12]
    116a:	ee07 3a90 	vmov	s15, r3
    116e:	eeb8 7b67 	vcvt.f64.u32	d7, s15
    1172:	ed9f 6b49 	vldr	d6, [pc, #292]	; 1298 <calc_fixed_time_MW_sweep+0x400>
    1176:	ee27 7b06 	vmul.f64	d7, d7, d6
    117a:	eeb6 6b00 	vmov.f64	d6, #96	; 0x3f000000  0.5
    117e:	ee37 7b06 	vadd.f64	d7, d7, d6
    1182:	eefc 7bc7 	vcvt.u32.f64	s15, d7
    1186:	ee17 2a90 	vmov	r2, s15
    118a:	4b49      	ldr	r3, [pc, #292]	; (12b0 <calc_fixed_time_MW_sweep+0x418>)
    118c:	60da      	str	r2, [r3, #12]
//		printf("DEBUG #steps: %lu \r\n", mw_sweep_settings.num_steps);
		calc_sweep_time = point_period * (mw_sweep_settings.num_steps + 1);
    118e:	4b48      	ldr	r3, [pc, #288]	; (12b0 <calc_fixed_time_MW_sweep+0x418>)
    1190:	68db      	ldr	r3, [r3, #12]
    1192:	3301      	adds	r3, #1
    1194:	ee07 3a90 	vmov	s15, r3
    1198:	eeb8 7b67 	vcvt.f64.u32	d7, s15
    119c:	ed97 6b0c 	vldr	d6, [r7, #48]	; 0x30
    11a0:	ee26 7b07 	vmul.f64	d7, d6, d7
    11a4:	ed87 7b18 	vstr	d7, [r7, #96]	; 0x60

		/* Decrease number of steps if additional 10% is >1s */
//		printf("DEBUG calc_sweep_time - requested_sweep_period: %f \r\n", calc_sweep_time - requested_sweep_period);
		if ((calc_sweep_time - requested_sweep_period) > 1){
    11a8:	ed97 6b18 	vldr	d6, [r7, #96]	; 0x60
    11ac:	ed97 7b02 	vldr	d7, [r7, #8]
    11b0:	ee36 7b47 	vsub.f64	d7, d6, d7
    11b4:	eeb7 6b00 	vmov.f64	d6, #112	; 0x3f800000  1.0
    11b8:	eeb4 7bc6 	vcmpe.f64	d7, d6
    11bc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    11c0:	dd11      	ble.n	11e6 <calc_fixed_time_MW_sweep+0x34e>
			mw_sweep_settings.num_steps--;
    11c2:	4b3b      	ldr	r3, [pc, #236]	; (12b0 <calc_fixed_time_MW_sweep+0x418>)
    11c4:	68db      	ldr	r3, [r3, #12]
    11c6:	3b01      	subs	r3, #1
    11c8:	4a39      	ldr	r2, [pc, #228]	; (12b0 <calc_fixed_time_MW_sweep+0x418>)
    11ca:	60d3      	str	r3, [r2, #12]
			calc_sweep_time = point_period * (mw_sweep_settings.num_steps + 1);
    11cc:	4b38      	ldr	r3, [pc, #224]	; (12b0 <calc_fixed_time_MW_sweep+0x418>)
    11ce:	68db      	ldr	r3, [r3, #12]
    11d0:	3301      	adds	r3, #1
    11d2:	ee07 3a90 	vmov	s15, r3
    11d6:	eeb8 7b67 	vcvt.f64.u32	d7, s15
    11da:	ed97 6b0c 	vldr	d6, [r7, #48]	; 0x30
    11de:	ee26 7b07 	vmul.f64	d7, d6, d7
    11e2:	ed87 7b18 	vstr	d7, [r7, #96]	; 0x60
		}
//		printf("DEBUG #steps: %lu \r\n", mw_sweep_settings.num_steps);

		//Double check of the sweep period selected
		printf("Final calculated sweep period, including scope sync: %.3g s\r\n", calc_sweep_time);
    11e6:	e9d7 2318 	ldrd	r2, r3, [r7, #96]	; 0x60
    11ea:	4833      	ldr	r0, [pc, #204]	; (12b8 <calc_fixed_time_MW_sweep+0x420>)
    11ec:	f000 fc5c 	bl	1aa8 <__printf_veneer>
	}

	/* Can avoid spurs if frequency requested can be encoded exactly  */
	start_freq = ((long)(start_freq/unit_step_size_Hz)) * unit_step_size_Hz;
    11f0:	ed97 5b14 	vldr	d5, [r7, #80]	; 0x50
    11f4:	ed97 6b12 	vldr	d6, [r7, #72]	; 0x48
    11f8:	ee85 7b06 	vdiv.f64	d7, d5, d6
    11fc:	eefd 7bc7 	vcvt.s32.f64	s15, d7
    1200:	eeb8 7be7 	vcvt.f64.s32	d7, s15
    1204:	ed97 6b12 	vldr	d6, [r7, #72]	; 0x48
    1208:	ee26 7b07 	vmul.f64	d7, d6, d7
    120c:	ed87 7b14 	vstr	d7, [r7, #80]	; 0x50

	/* Calculate the N division ratio, extracting the fractional and integer parts */
	const double N = ((start_freq * mw_sweep_settings.k) / REF_FREQ);
    1210:	4b27      	ldr	r3, [pc, #156]	; (12b0 <calc_fixed_time_MW_sweep+0x418>)
    1212:	785b      	ldrb	r3, [r3, #1]
    1214:	ee07 3a90 	vmov	s15, r3
    1218:	eeb8 6be7 	vcvt.f64.s32	d6, s15
    121c:	ed97 7b14 	vldr	d7, [r7, #80]	; 0x50
    1220:	ee26 6b07 	vmul.f64	d6, d6, d7
    1224:	ed9f 5b1e 	vldr	d5, [pc, #120]	; 12a0 <calc_fixed_time_MW_sweep+0x408>
    1228:	ee86 7b05 	vdiv.f64	d7, d6, d5
    122c:	ed87 7b08 	vstr	d7, [r7, #32]
	mw_sweep_settings.NINT = N;
    1230:	ed97 7b08 	vldr	d7, [r7, #32]
    1234:	eefc 7bc7 	vcvt.u32.f64	s15, d7
    1238:	ee17 2a90 	vmov	r2, s15
    123c:	4b1c      	ldr	r3, [pc, #112]	; (12b0 <calc_fixed_time_MW_sweep+0x418>)
    123e:	605a      	str	r2, [r3, #4]
	mw_sweep_settings.NFRAC_start = ((N - mw_sweep_settings.NINT) * (1 << 24)) + 0.5;
    1240:	4b1b      	ldr	r3, [pc, #108]	; (12b0 <calc_fixed_time_MW_sweep+0x418>)
    1242:	685b      	ldr	r3, [r3, #4]
    1244:	ee07 3a90 	vmov	s15, r3
    1248:	eeb8 7b67 	vcvt.f64.u32	d7, s15
    124c:	ed97 6b08 	vldr	d6, [r7, #32]
    1250:	ee36 7b47 	vsub.f64	d7, d6, d7
    1254:	ed9f 6b14 	vldr	d6, [pc, #80]	; 12a8 <calc_fixed_time_MW_sweep+0x410>
    1258:	ee27 7b06 	vmul.f64	d7, d7, d6
    125c:	eeb6 6b00 	vmov.f64	d6, #96	; 0x3f000000  0.5
    1260:	ee37 7b06 	vadd.f64	d7, d7, d6
    1264:	eefc 7bc7 	vcvt.u32.f64	s15, d7
    1268:	ee17 2a90 	vmov	r2, s15
    126c:	4b10      	ldr	r3, [pc, #64]	; (12b0 <calc_fixed_time_MW_sweep+0x418>)
    126e:	609a      	str	r2, [r3, #8]
	mw_sweep_settings.current_point = 0;
    1270:	4b0f      	ldr	r3, [pc, #60]	; (12b0 <calc_fixed_time_MW_sweep+0x418>)
    1272:	2200      	movs	r2, #0
    1274:	625a      	str	r2, [r3, #36]	; 0x24
	mw_sweep_settings.sweep_period = calc_sweep_time;
    1276:	490e      	ldr	r1, [pc, #56]	; (12b0 <calc_fixed_time_MW_sweep+0x418>)
    1278:	e9d7 2318 	ldrd	r2, r3, [r7, #96]	; 0x60
    127c:	e9c1 230e 	strd	r2, r3, [r1, #56]	; 0x38
	mw_sweep_settings.stabilise_time = MW_STABILISE_TIME_US; //Global MW stabilisation time
    1280:	f241 7270 	movw	r2, #6000	; 0x1770
    1284:	4b0a      	ldr	r3, [pc, #40]	; (12b0 <calc_fixed_time_MW_sweep+0x418>)
    1286:	619a      	str	r2, [r3, #24]
//	print_mw_sweep_settings();
	return(true);
    1288:	2301      	movs	r3, #1
}
    128a:	4618      	mov	r0, r3
    128c:	3768      	adds	r7, #104	; 0x68
    128e:	46bd      	mov	sp, r7
    1290:	bd80      	pop	{r7, pc}
    1292:	bf00      	nop
    1294:	f3af 8000 	nop.w
    1298:	9999999a 	.word	0x9999999a
    129c:	3ff19999 	.word	0x3ff19999
    12a0:	00000000 	.word	0x00000000
    12a4:	4187d784 	.word	0x4187d784
    12a8:	00000000 	.word	0x00000000
    12ac:	41700000 	.word	0x41700000
    12b0:	20000640 	.word	0x20000640
    12b4:	0801c710 	.word	0x0801c710
    12b8:	0801c75c 	.word	0x0801c75c

000012bc <calculate_k>:

/**
  * @brief  Calculates k value
  * @retval k
  */
static const uint32_t calculate_k(const double frequency) {
    12bc:	b480      	push	{r7}
    12be:	b085      	sub	sp, #20
    12c0:	af00      	add	r7, sp, #0
    12c2:	ed87 0b00 	vstr	d0, [r7]
	uint32_t k = VCO_MAX_FREQ / frequency;
    12c6:	ed9f 5b10 	vldr	d5, [pc, #64]	; 1308 <calculate_k+0x4c>
    12ca:	ed97 6b00 	vldr	d6, [r7]
    12ce:	ee85 7b06 	vdiv.f64	d7, d5, d6
    12d2:	eefc 7bc7 	vcvt.u32.f64	s15, d7
    12d6:	ee17 3a90 	vmov	r3, s15
    12da:	60fb      	str	r3, [r7, #12]

	if (k != 1) {
    12dc:	68fb      	ldr	r3, [r7, #12]
    12de:	2b01      	cmp	r3, #1
    12e0:	d00b      	beq.n	12fa <calculate_k+0x3e>
		while (k > 62 || k % 2) {
    12e2:	e002      	b.n	12ea <calculate_k+0x2e>
			k --;
    12e4:	68fb      	ldr	r3, [r7, #12]
    12e6:	3b01      	subs	r3, #1
    12e8:	60fb      	str	r3, [r7, #12]
		while (k > 62 || k % 2) {
    12ea:	68fb      	ldr	r3, [r7, #12]
    12ec:	2b3e      	cmp	r3, #62	; 0x3e
    12ee:	d8f9      	bhi.n	12e4 <calculate_k+0x28>
    12f0:	68fb      	ldr	r3, [r7, #12]
    12f2:	f003 0301 	and.w	r3, r3, #1
    12f6:	2b00      	cmp	r3, #0
    12f8:	d1f4      	bne.n	12e4 <calculate_k+0x28>
		}
	}
	return (k);
    12fa:	68fb      	ldr	r3, [r7, #12]
}
    12fc:	4618      	mov	r0, r3
    12fe:	3714      	adds	r7, #20
    1300:	46bd      	mov	sp, r7
    1302:	f85d 7b04 	ldr.w	r7, [sp], #4
    1306:	4770      	bx	lr
    1308:	20000000 	.word	0x20000000
    130c:	41ee8c21 	.word	0x41ee8c21

00001310 <start_POP_calibration>:

/**
  * @brief  Starts the process of measuring the POP period
  * @retval None
  */
void start_POP_calibration(const bool cal_only) {
    1310:	b580      	push	{r7, lr}
    1312:	b082      	sub	sp, #8
    1314:	af00      	add	r7, sp, #0
    1316:	4603      	mov	r3, r0
    1318:	71fb      	strb	r3, [r7, #7]
	/* Requires ADC to be initialised and for HAL_ADC_ConvCpltCallback to be active */
	if (cal_only == true) {
    131a:	79fb      	ldrb	r3, [r7, #7]
    131c:	2b00      	cmp	r3, #0
    131e:	d003      	beq.n	1328 <start_POP_calibration+0x18>
		mw_sweep_settings.sweep_mode = POP_CAL_ONLY;
    1320:	4b0f      	ldr	r3, [pc, #60]	; (1360 <start_POP_calibration+0x50>)
    1322:	2201      	movs	r2, #1
    1324:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
	}
	HAL_GPIO_WritePin(MW_INVALID_GPIO_Port, MW_INVALID_Pin, GPIO_PIN_SET); 	//Sets MW_invalid pin high to reset POP cycle
    1328:	2201      	movs	r2, #1
    132a:	2102      	movs	r1, #2
    132c:	480d      	ldr	r0, [pc, #52]	; (1364 <start_POP_calibration+0x54>)
    132e:	f000 fbb7 	bl	1aa0 <__HAL_GPIO_WritePin_veneer>
	HAL_Delay(10); // 10ms in case ADC was part-way through a conversion
    1332:	200a      	movs	r0, #10
    1334:	f000 fbac 	bl	1a90 <__HAL_Delay_veneer>
	sample_count = 0; //reset sample count
    1338:	4b0b      	ldr	r3, [pc, #44]	; (1368 <start_POP_calibration+0x58>)
    133a:	2200      	movs	r2, #0
    133c:	801a      	strh	r2, [r3, #0]
	mw_sweep_settings.state = MW_CALIBRATE;
    133e:	4b08      	ldr	r3, [pc, #32]	; (1360 <start_POP_calibration+0x50>)
    1340:	2204      	movs	r2, #4
    1342:	701a      	strb	r2, [r3, #0]
	start_timer(MW_TIMER); //reset MW_timer and start counting
    1344:	4b09      	ldr	r3, [pc, #36]	; (136c <start_POP_calibration+0x5c>)
    1346:	681b      	ldr	r3, [r3, #0]
    1348:	4618      	mov	r0, r3
    134a:	f000 fadf 	bl	190c <start_timer>
	HAL_GPIO_WritePin(MW_INVALID_GPIO_Port, MW_INVALID_Pin, GPIO_PIN_RESET); //Restart POP cycle
    134e:	2200      	movs	r2, #0
    1350:	2102      	movs	r1, #2
    1352:	4804      	ldr	r0, [pc, #16]	; (1364 <start_POP_calibration+0x54>)
    1354:	f000 fba4 	bl	1aa0 <__HAL_GPIO_WritePin_veneer>
	#ifdef MW_VERBOSE
		printf("POP calibration started\r\n");
	#endif //MW_VERBOSE
}
    1358:	bf00      	nop
    135a:	3708      	adds	r7, #8
    135c:	46bd      	mov	sp, r7
    135e:	bd80      	pop	{r7, pc}
    1360:	20000640 	.word	0x20000640
    1364:	58020400 	.word	0x58020400
    1368:	200005fa 	.word	0x200005fa
    136c:	2000001c 	.word	0x2000001c

00001370 <start_MW_sweep>:

/**
  * @brief  Starts a MW sweep
  * @retval Success/failure
  */
static const bool start_MW_sweep(const bool single_sweep) {
    1370:	b580      	push	{r7, lr}
    1372:	b082      	sub	sp, #8
    1374:	af00      	add	r7, sp, #0
    1376:	4603      	mov	r3, r0
    1378:	71fb      	strb	r3, [r7, #7]
	//uses settings from the mw_sweep_settings structure
	if (single_sweep == true) {
    137a:	79fb      	ldrb	r3, [r7, #7]
    137c:	2b00      	cmp	r3, #0
    137e:	d003      	beq.n	1388 <start_MW_sweep+0x18>
		mw_sweep_settings.sweep_mode = SWEEP_ONCE;
    1380:	4b1c      	ldr	r3, [pc, #112]	; (13f4 <start_MW_sweep+0x84>)
    1382:	2202      	movs	r2, #2
    1384:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
	}
	HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_SET); // Assume MW lock, the LED will be disabled if lock fails.
    1388:	2201      	movs	r2, #1
    138a:	2102      	movs	r1, #2
    138c:	481a      	ldr	r0, [pc, #104]	; (13f8 <start_MW_sweep+0x88>)
    138e:	f000 fb87 	bl	1aa0 <__HAL_GPIO_WritePin_veneer>

	#ifdef MW_VERBOSE
		printf("Setting trigger output low \r\n");
	#endif //MW_VERBOSE

	HAL_GPIO_WritePin(MW_INVALID_GPIO_Port, MW_INVALID_Pin, GPIO_PIN_SET); //Sets MW_invalid pin high
    1392:	2201      	movs	r2, #1
    1394:	2102      	movs	r1, #2
    1396:	4819      	ldr	r0, [pc, #100]	; (13fc <start_MW_sweep+0x8c>)
    1398:	f000 fb82 	bl	1aa0 <__HAL_GPIO_WritePin_veneer>
//	set_frequency(mw_sweep_settings.NINT, mw_sweep_settings.NFRAC_start, mw_sweep_settings.k, MANUAL_MUTE); //program initial MW frequency
	set_freq_regs(mw_sweep_settings.NINT, mw_sweep_settings.NFRAC_start, mw_sweep_settings.k); //program initial MW frequency
    139c:	4b15      	ldr	r3, [pc, #84]	; (13f4 <start_MW_sweep+0x84>)
    139e:	685b      	ldr	r3, [r3, #4]
    13a0:	4a14      	ldr	r2, [pc, #80]	; (13f4 <start_MW_sweep+0x84>)
    13a2:	6891      	ldr	r1, [r2, #8]
    13a4:	4a13      	ldr	r2, [pc, #76]	; (13f4 <start_MW_sweep+0x84>)
    13a6:	7852      	ldrb	r2, [r2, #1]
    13a8:	4618      	mov	r0, r3
    13aa:	f7ff fb41 	bl	a30 <set_freq_regs>
	mw_sweep_settings.state = MW_STABILISING; //waiting for MW output to stabilise
    13ae:	4b11      	ldr	r3, [pc, #68]	; (13f4 <start_MW_sweep+0x84>)
    13b0:	2202      	movs	r2, #2
    13b2:	701a      	strb	r2, [r3, #0]
	mw_sweep_settings.current_point = 0; //currently on at start of ramp i.e. point 0
    13b4:	4b0f      	ldr	r3, [pc, #60]	; (13f4 <start_MW_sweep+0x84>)
    13b6:	2200      	movs	r2, #0
    13b8:	625a      	str	r2, [r3, #36]	; 0x24
	HAL_Delay(10); // 10ms in case ADC was part-way through a conversion
    13ba:	200a      	movs	r0, #10
    13bc:	f000 fb68 	bl	1a90 <__HAL_Delay_veneer>
	sample_count = 0; //reset sample count
    13c0:	4b0f      	ldr	r3, [pc, #60]	; (1400 <start_MW_sweep+0x90>)
    13c2:	2200      	movs	r2, #0
    13c4:	801a      	strh	r2, [r3, #0]
	/* Output used for triggering external scope */
	HAL_GPIO_WritePin(SCOPE_TRIG_OUT_GPIO_Port, SCOPE_TRIG_OUT_Pin, GPIO_PIN_RESET); // Sets trigger output low
    13c6:	2200      	movs	r2, #0
    13c8:	2101      	movs	r1, #1
    13ca:	480e      	ldr	r0, [pc, #56]	; (1404 <start_MW_sweep+0x94>)
    13cc:	f000 fb68 	bl	1aa0 <__HAL_GPIO_WritePin_veneer>
	start_timer(MW_TIMER); //reset MW_timer (MW step timer) and start counting
    13d0:	4b0d      	ldr	r3, [pc, #52]	; (1408 <start_MW_sweep+0x98>)
    13d2:	681b      	ldr	r3, [r3, #0]
    13d4:	4618      	mov	r0, r3
    13d6:	f000 fa99 	bl	190c <start_timer>
	start_timer(SWEEP_TIMER); //reset general (sweep) timer and start counting
    13da:	4b0c      	ldr	r3, [pc, #48]	; (140c <start_MW_sweep+0x9c>)
    13dc:	681b      	ldr	r3, [r3, #0]
    13de:	4618      	mov	r0, r3
    13e0:	f000 fa94 	bl	190c <start_timer>
	sample_count = 0; //reset sample count
    13e4:	4b06      	ldr	r3, [pc, #24]	; (1400 <start_MW_sweep+0x90>)
    13e6:	2200      	movs	r2, #0
    13e8:	801a      	strh	r2, [r3, #0]
	//known limitation - if the ADC has been recently triggered and HAL_ADC_ConvCpltCallback will increment sample_count by 1
	return(true);
    13ea:	2301      	movs	r3, #1
}
    13ec:	4618      	mov	r0, r3
    13ee:	3708      	adds	r7, #8
    13f0:	46bd      	mov	sp, r7
    13f2:	bd80      	pop	{r7, pc}
    13f4:	20000640 	.word	0x20000640
    13f8:	58021000 	.word	0x58021000
    13fc:	58020400 	.word	0x58020400
    1400:	200005fa 	.word	0x200005fa
    1404:	58021800 	.word	0x58021800
    1408:	2000001c 	.word	0x2000001c
    140c:	20000020 	.word	0x20000020

00001410 <start_continuous_MW_sweep>:

/**
  * @brief  Starts a continuous MW calibrate/sweep cycle
  * @retval None
  */
void start_continuous_MW_sweep(void) {
    1410:	b580      	push	{r7, lr}
    1412:	af00      	add	r7, sp, #0
	mw_sweep_settings.sweep_mode = CONTINUOUS_SWEEP;
    1414:	4b04      	ldr	r3, [pc, #16]	; (1428 <start_continuous_MW_sweep+0x18>)
    1416:	2200      	movs	r2, #0
    1418:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
	start_POP_calibration(false);
    141c:	2000      	movs	r0, #0
    141e:	f7ff ff77 	bl	1310 <start_POP_calibration>
}
    1422:	bf00      	nop
    1424:	bd80      	pop	{r7, pc}
    1426:	bf00      	nop
    1428:	20000640 	.word	0x20000640

0000142c <stop_MW_operation>:

/**
  * @brief  Stops MW operation e.g. for laser tuning
  * @retval None
  */
void stop_MW_operation(void) {
    142c:	b580      	push	{r7, lr}
    142e:	af00      	add	r7, sp, #0
	mw_sweep_settings.sweep_mode = MW_STOPPED;
    1430:	4b07      	ldr	r3, [pc, #28]	; (1450 <stop_MW_operation+0x24>)
    1432:	2200      	movs	r2, #0
    1434:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
	stop_timer(MW_TIMER);
    1438:	4b06      	ldr	r3, [pc, #24]	; (1454 <stop_MW_operation+0x28>)
    143a:	681b      	ldr	r3, [r3, #0]
    143c:	4618      	mov	r0, r3
    143e:	f000 fa83 	bl	1948 <stop_timer>
	HAL_GPIO_WritePin(MW_INVALID_GPIO_Port, MW_INVALID_Pin, GPIO_PIN_RESET); //Ensures the ADC sample pulse is being generated
    1442:	2200      	movs	r2, #0
    1444:	2102      	movs	r1, #2
    1446:	4804      	ldr	r0, [pc, #16]	; (1458 <stop_MW_operation+0x2c>)
    1448:	f000 fb2a 	bl	1aa0 <__HAL_GPIO_WritePin_veneer>
}
    144c:	bf00      	nop
    144e:	bd80      	pop	{r7, pc}
    1450:	20000640 	.word	0x20000640
    1454:	2000001c 	.word	0x2000001c
    1458:	58020400 	.word	0x58020400

0000145c <MW_update>:

/**
  * @brief  Checks MW status to see if a timer has elapsed and if frequency needs changing.
  * @retval True if an action was taken
  */
const bool MW_update(void) {
    145c:	b580      	push	{r7, lr}
    145e:	b08a      	sub	sp, #40	; 0x28
    1460:	af04      	add	r7, sp, #16
	uint8_t local_copy_of_MW_state = mw_sweep_settings.state; //hack to make switch statement behave
    1462:	4b97      	ldr	r3, [pc, #604]	; (16c0 <MW_update+0x264>)
    1464:	781b      	ldrb	r3, [r3, #0]
    1466:	75bb      	strb	r3, [r7, #22]
	//switch (mw_sweep_settings.state)
	bool action_taken = false;
    1468:	2300      	movs	r3, #0
    146a:	75fb      	strb	r3, [r7, #23]
	uint32_t sweep_period_us;
	switch (local_copy_of_MW_state)
    146c:	7dbb      	ldrb	r3, [r7, #22]
    146e:	2b04      	cmp	r3, #4
    1470:	f200 810b 	bhi.w	168a <MW_update+0x22e>
    1474:	a201      	add	r2, pc, #4	; (adr r2, 147c <MW_update+0x20>)
    1476:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
    147a:	bf00      	nop
    147c:	000016a3 	.word	0x000016a3
    1480:	000016a3 	.word	0x000016a3
    1484:	00001491 	.word	0x00001491
    1488:	000014d7 	.word	0x000014d7
    148c:	00001617 	.word	0x00001617
		case MW_STOPPED:
		case MW_FIXED_FREQ:
			break; //no action to take

		case MW_STABILISING: //waiting for MW output to stabilise
			if (check_timer(MW_TIMER) < MW_STABILISE_TIME_US) return(false); //Still waiting, no action taken
    1490:	4b8c      	ldr	r3, [pc, #560]	; (16c4 <MW_update+0x268>)
    1492:	681b      	ldr	r3, [r3, #0]
    1494:	4618      	mov	r0, r3
    1496:	f000 fa69 	bl	196c <check_timer>
    149a:	4603      	mov	r3, r0
    149c:	f241 7270 	movw	r2, #6000	; 0x1770
    14a0:	4293      	cmp	r3, r2
    14a2:	d201      	bcs.n	14a8 <MW_update+0x4c>
    14a4:	2300      	movs	r3, #0
    14a6:	e100      	b.n	16aa <MW_update+0x24e>
			//Otherwise MW stabilisation timer has elapsed
			stop_timer(MW_TIMER);
    14a8:	4b86      	ldr	r3, [pc, #536]	; (16c4 <MW_update+0x268>)
    14aa:	681b      	ldr	r3, [r3, #0]
    14ac:	4618      	mov	r0, r3
    14ae:	f000 fa4b 	bl	1948 <stop_timer>
			HAL_GPIO_WritePin(MW_INVALID_GPIO_Port, MW_INVALID_Pin, GPIO_PIN_RESET); //Sets MW_invalid pin low as MW now stable
    14b2:	2200      	movs	r2, #0
    14b4:	2102      	movs	r1, #2
    14b6:	4884      	ldr	r0, [pc, #528]	; (16c8 <MW_update+0x26c>)
    14b8:	f000 faf2 	bl	1aa0 <__HAL_GPIO_WritePin_veneer>
			reset_adc_samples(); //clear any data in the adc sample buffer
    14bc:	f7ff f888 	bl	5d0 <reset_adc_samples>
			mw_sweep_settings.state = MW_DWELL;
    14c0:	4b7f      	ldr	r3, [pc, #508]	; (16c0 <MW_update+0x264>)
    14c2:	2203      	movs	r2, #3
    14c4:	701a      	strb	r2, [r3, #0]
			start_timer(MW_TIMER); //Restart timer for DWELL time
    14c6:	4b7f      	ldr	r3, [pc, #508]	; (16c4 <MW_update+0x268>)
    14c8:	681b      	ldr	r3, [r3, #0]
    14ca:	4618      	mov	r0, r3
    14cc:	f000 fa1e 	bl	190c <start_timer>
			action_taken = true;
    14d0:	2301      	movs	r3, #1
    14d2:	75fb      	strb	r3, [r7, #23]
			break;
    14d4:	e0e8      	b.n	16a8 <MW_update+0x24c>

		case MW_DWELL: //valid MW output waiting for end of dwell time
			if (check_timer(MW_TIMER) < mw_sweep_settings.dwell_time) return(false); //Still waiting
    14d6:	4b7b      	ldr	r3, [pc, #492]	; (16c4 <MW_update+0x268>)
    14d8:	681b      	ldr	r3, [r3, #0]
    14da:	4618      	mov	r0, r3
    14dc:	f000 fa46 	bl	196c <check_timer>
    14e0:	4602      	mov	r2, r0
    14e2:	4b77      	ldr	r3, [pc, #476]	; (16c0 <MW_update+0x264>)
    14e4:	69db      	ldr	r3, [r3, #28]
    14e6:	429a      	cmp	r2, r3
    14e8:	d201      	bcs.n	14ee <MW_update+0x92>
    14ea:	2300      	movs	r3, #0
    14ec:	e0dd      	b.n	16aa <MW_update+0x24e>
			//Otherwise dwell timer has elapsed
			action_taken = true;
    14ee:	2301      	movs	r3, #1
    14f0:	75fb      	strb	r3, [r7, #23]
			stop_timer(MW_TIMER);
    14f2:	4b74      	ldr	r3, [pc, #464]	; (16c4 <MW_update+0x268>)
    14f4:	681b      	ldr	r3, [r3, #0]
    14f6:	4618      	mov	r0, r3
    14f8:	f000 fa26 	bl	1948 <stop_timer>
			HAL_GPIO_TogglePin(LD3_GPIO_Port, LD3_Pin); //toggles red LED
    14fc:	f44f 4180 	mov.w	r1, #16384	; 0x4000
    1500:	4871      	ldr	r0, [pc, #452]	; (16c8 <MW_update+0x26c>)
    1502:	f000 fadd 	bl	1ac0 <__HAL_GPIO_TogglePin_veneer>
			HAL_GPIO_WritePin(MW_INVALID_GPIO_Port, MW_INVALID_Pin, GPIO_PIN_SET); //Sets MW_invalid pin high as about to change frequency
    1506:	2201      	movs	r2, #1
    1508:	2102      	movs	r1, #2
    150a:	486f      	ldr	r0, [pc, #444]	; (16c8 <MW_update+0x26c>)
    150c:	f000 fac8 	bl	1aa0 <__HAL_GPIO_WritePin_veneer>
			mw_sweep_settings.state = MW_STABILISING;
    1510:	4b6b      	ldr	r3, [pc, #428]	; (16c0 <MW_update+0x264>)
    1512:	2202      	movs	r2, #2
    1514:	701a      	strb	r2, [r3, #0]
			if (mw_sweep_settings.current_point == mw_sweep_settings.num_steps) { // All steps completed, tidy up and restart next sweep
    1516:	4b6a      	ldr	r3, [pc, #424]	; (16c0 <MW_update+0x264>)
    1518:	6a5a      	ldr	r2, [r3, #36]	; 0x24
    151a:	4b69      	ldr	r3, [pc, #420]	; (16c0 <MW_update+0x264>)
    151c:	68db      	ldr	r3, [r3, #12]
    151e:	429a      	cmp	r2, r3
    1520:	d15c      	bne.n	15dc <MW_update+0x180>
				HAL_GPIO_WritePin(SCOPE_TRIG_OUT_GPIO_Port, SCOPE_TRIG_OUT_Pin, GPIO_PIN_SET); // Sets trigger output high
    1522:	2201      	movs	r2, #1
    1524:	2101      	movs	r1, #1
    1526:	4869      	ldr	r0, [pc, #420]	; (16cc <MW_update+0x270>)
    1528:	f000 faba 	bl	1aa0 <__HAL_GPIO_WritePin_veneer>
				sweep_period_us=check_timer(SWEEP_TIMER);
    152c:	4b68      	ldr	r3, [pc, #416]	; (16d0 <MW_update+0x274>)
    152e:	681b      	ldr	r3, [r3, #0]
    1530:	4618      	mov	r0, r3
    1532:	f000 fa1b 	bl	196c <check_timer>
    1536:	60b8      	str	r0, [r7, #8]
				stop_timer(SWEEP_TIMER);
    1538:	4b65      	ldr	r3, [pc, #404]	; (16d0 <MW_update+0x274>)
    153a:	681b      	ldr	r3, [r3, #0]
    153c:	4618      	mov	r0, r3
    153e:	f000 fa03 	bl	1948 <stop_timer>
				printf("Sweep complete in %.4g s. Expected %.4g s. %u samples\r\n", (double)(sweep_period_us)/1000000, mw_sweep_settings.sweep_period, sample_count);
    1542:	68bb      	ldr	r3, [r7, #8]
    1544:	ee07 3a90 	vmov	s15, r3
    1548:	eeb8 7b67 	vcvt.f64.u32	d7, s15
    154c:	ed9f 6b5a 	vldr	d6, [pc, #360]	; 16b8 <MW_update+0x25c>
    1550:	ee87 5b06 	vdiv.f64	d5, d7, d6
    1554:	4b5a      	ldr	r3, [pc, #360]	; (16c0 <MW_update+0x264>)
    1556:	e9d3 230e 	ldrd	r2, r3, [r3, #56]	; 0x38
    155a:	495e      	ldr	r1, [pc, #376]	; (16d4 <MW_update+0x278>)
    155c:	8809      	ldrh	r1, [r1, #0]
    155e:	b289      	uxth	r1, r1
    1560:	9102      	str	r1, [sp, #8]
    1562:	e9cd 2300 	strd	r2, r3, [sp]
    1566:	ec53 2b15 	vmov	r2, r3, d5
    156a:	485b      	ldr	r0, [pc, #364]	; (16d8 <MW_update+0x27c>)
    156c:	f000 fa9c 	bl	1aa8 <__printf_veneer>
				/* Check if the ADC registered the correct number of samples */
				uint16_t expected_samples = mw_sweep_settings.pop_cycles_per_point * (mw_sweep_settings.num_steps + 1);
    1570:	4b53      	ldr	r3, [pc, #332]	; (16c0 <MW_update+0x264>)
    1572:	695b      	ldr	r3, [r3, #20]
    1574:	b29a      	uxth	r2, r3
    1576:	4b52      	ldr	r3, [pc, #328]	; (16c0 <MW_update+0x264>)
    1578:	68db      	ldr	r3, [r3, #12]
    157a:	3301      	adds	r3, #1
    157c:	b29b      	uxth	r3, r3
    157e:	fb12 f303 	smulbb	r3, r2, r3
    1582:	80fb      	strh	r3, [r7, #6]
				uint16_t possible_samples = expected_samples + mw_sweep_settings.num_steps + 1;
    1584:	4b4e      	ldr	r3, [pc, #312]	; (16c0 <MW_update+0x264>)
    1586:	68db      	ldr	r3, [r3, #12]
    1588:	b29a      	uxth	r2, r3
    158a:	88fb      	ldrh	r3, [r7, #6]
    158c:	4413      	add	r3, r2
    158e:	b29b      	uxth	r3, r3
    1590:	3301      	adds	r3, #1
    1592:	80bb      	strh	r3, [r7, #4]
//				printf("Sweep generated %u full POP cycles and registered %u samples\r\n", expected_samples, sample_count);
				if ((sample_count == expected_samples) || (sample_count == possible_samples)) {
    1594:	4b4f      	ldr	r3, [pc, #316]	; (16d4 <MW_update+0x278>)
    1596:	881b      	ldrh	r3, [r3, #0]
    1598:	b29b      	uxth	r3, r3
    159a:	88fa      	ldrh	r2, [r7, #6]
    159c:	429a      	cmp	r2, r3
    159e:	d010      	beq.n	15c2 <MW_update+0x166>
    15a0:	4b4c      	ldr	r3, [pc, #304]	; (16d4 <MW_update+0x278>)
    15a2:	881b      	ldrh	r3, [r3, #0]
    15a4:	b29b      	uxth	r3, r3
    15a6:	88ba      	ldrh	r2, [r7, #4]
    15a8:	429a      	cmp	r2, r3
    15aa:	d00a      	beq.n	15c2 <MW_update+0x166>
					#ifdef MW_VERBOSE
					printf("Sweep generated and successfully registered %u samples\r\n", sample_count);
					#endif //MW_VERBOSE
				} else {
					printf("Warning - sweep generated %u samples but %u registered\r\n", expected_samples, sample_count);
    15ac:	88fb      	ldrh	r3, [r7, #6]
    15ae:	4a49      	ldr	r2, [pc, #292]	; (16d4 <MW_update+0x278>)
    15b0:	8812      	ldrh	r2, [r2, #0]
    15b2:	b292      	uxth	r2, r2
    15b4:	4619      	mov	r1, r3
    15b6:	4849      	ldr	r0, [pc, #292]	; (16dc <MW_update+0x280>)
    15b8:	f000 fa76 	bl	1aa8 <__printf_veneer>
					printf("Timing of last sample is marginal\r\n");
    15bc:	4848      	ldr	r0, [pc, #288]	; (16e0 <MW_update+0x284>)
    15be:	f000 fa87 	bl	1ad0 <__puts_veneer>
//				printf("MW processing time: %lu us\r\n", measured_processing_time_us);
//				if ((double)(measured_processing_time_us)/MW_PROCESSING_TIME_US > 1.1) {
//					printf("Warning - measured MW processing time (%lu us)is larger than the %lu us expected\r\n", measured_processing_time_us, MW_PROCESSING_TIME_US);
//				}
				#endif //MW_VERBOSE
				if (mw_sweep_settings.sweep_mode == SWEEP_ONCE) {//have reached the end of a single sweep and should stop
    15c2:	4b3f      	ldr	r3, [pc, #252]	; (16c0 <MW_update+0x264>)
    15c4:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
    15c8:	2b02      	cmp	r3, #2
    15ca:	d103      	bne.n	15d4 <MW_update+0x178>
					mw_sweep_settings.state = MW_STOPPED;
    15cc:	4b3c      	ldr	r3, [pc, #240]	; (16c0 <MW_update+0x264>)
    15ce:	2200      	movs	r2, #0
    15d0:	701a      	strb	r2, [r3, #0]
						printf("Failure to program value to DAC \r\n");
						Error_Handler();
					}
				#endif //RAMP_DAC
			}
			break;
    15d2:	e069      	b.n	16a8 <MW_update+0x24c>
					start_MW_sweep(false); //restart the next MW sweep without updating mw_sweep_settings.sweep_mode
    15d4:	2000      	movs	r0, #0
    15d6:	f7ff fecb 	bl	1370 <start_MW_sweep>
			break;
    15da:	e065      	b.n	16a8 <MW_update+0x24c>
				mw_sweep_settings.current_point++; //increment point counter
    15dc:	4b38      	ldr	r3, [pc, #224]	; (16c0 <MW_update+0x264>)
    15de:	6a5b      	ldr	r3, [r3, #36]	; 0x24
    15e0:	3301      	adds	r3, #1
    15e2:	4a37      	ldr	r2, [pc, #220]	; (16c0 <MW_update+0x264>)
    15e4:	6253      	str	r3, [r2, #36]	; 0x24
				uint32_t local_NFRAC = mw_sweep_settings.NFRAC_start + mw_sweep_settings.step_size * mw_sweep_settings.current_point;
    15e6:	4b36      	ldr	r3, [pc, #216]	; (16c0 <MW_update+0x264>)
    15e8:	689a      	ldr	r2, [r3, #8]
    15ea:	4b35      	ldr	r3, [pc, #212]	; (16c0 <MW_update+0x264>)
    15ec:	691b      	ldr	r3, [r3, #16]
    15ee:	4934      	ldr	r1, [pc, #208]	; (16c0 <MW_update+0x264>)
    15f0:	6a49      	ldr	r1, [r1, #36]	; 0x24
    15f2:	fb01 f303 	mul.w	r3, r1, r3
    15f6:	4413      	add	r3, r2
    15f8:	60fb      	str	r3, [r7, #12]
				set_freq_regs(mw_sweep_settings.NINT, local_NFRAC, mw_sweep_settings.k); //program new MW frequency
    15fa:	4b31      	ldr	r3, [pc, #196]	; (16c0 <MW_update+0x264>)
    15fc:	685b      	ldr	r3, [r3, #4]
    15fe:	4a30      	ldr	r2, [pc, #192]	; (16c0 <MW_update+0x264>)
    1600:	7852      	ldrb	r2, [r2, #1]
    1602:	68f9      	ldr	r1, [r7, #12]
    1604:	4618      	mov	r0, r3
    1606:	f7ff fa13 	bl	a30 <set_freq_regs>
				start_timer(MW_TIMER); //Restart timer for MW stabilisation time
    160a:	4b2e      	ldr	r3, [pc, #184]	; (16c4 <MW_update+0x268>)
    160c:	681b      	ldr	r3, [r3, #0]
    160e:	4618      	mov	r0, r3
    1610:	f000 f97c 	bl	190c <start_timer>
			break;
    1614:	e048      	b.n	16a8 <MW_update+0x24c>

		case MW_CALIBRATE: //Measures the elapsed time taken for 101 samples (100 POP cycles)
			if (sample_count >= 100) {//100 or more POP cycles have elapsed
    1616:	4b2f      	ldr	r3, [pc, #188]	; (16d4 <MW_update+0x278>)
    1618:	881b      	ldrh	r3, [r3, #0]
    161a:	b29b      	uxth	r3, r3
    161c:	2b63      	cmp	r3, #99	; 0x63
    161e:	d942      	bls.n	16a6 <MW_update+0x24a>
				uint32_t total_POP_cal_period = check_timer(MW_TIMER);
    1620:	4b28      	ldr	r3, [pc, #160]	; (16c4 <MW_update+0x268>)
    1622:	681b      	ldr	r3, [r3, #0]
    1624:	4618      	mov	r0, r3
    1626:	f000 f9a1 	bl	196c <check_timer>
    162a:	6138      	str	r0, [r7, #16]
				POP_period_us = (float)(total_POP_cal_period) / 100 + 0.5;
    162c:	693b      	ldr	r3, [r7, #16]
    162e:	ee07 3a90 	vmov	s15, r3
    1632:	eeb8 7a67 	vcvt.f32.u32	s14, s15
    1636:	eddf 6a2b 	vldr	s13, [pc, #172]	; 16e4 <MW_update+0x288>
    163a:	eec7 7a26 	vdiv.f32	s15, s14, s13
    163e:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
    1642:	eeb6 6b00 	vmov.f64	d6, #96	; 0x3f000000  0.5
    1646:	ee37 7b06 	vadd.f64	d7, d7, d6
    164a:	eefc 7bc7 	vcvt.u32.f64	s15, d7
    164e:	ee17 2a90 	vmov	r2, s15
    1652:	4b25      	ldr	r3, [pc, #148]	; (16e8 <MW_update+0x28c>)
    1654:	601a      	str	r2, [r3, #0]
				stop_timer(MW_TIMER);
    1656:	4b1b      	ldr	r3, [pc, #108]	; (16c4 <MW_update+0x268>)
    1658:	681b      	ldr	r3, [r3, #0]
    165a:	4618      	mov	r0, r3
    165c:	f000 f974 	bl	1948 <stop_timer>
				printf("POP period, averaged over 100 cycles: %lu us\r\n", POP_period_us);
    1660:	4b21      	ldr	r3, [pc, #132]	; (16e8 <MW_update+0x28c>)
    1662:	681b      	ldr	r3, [r3, #0]
    1664:	4619      	mov	r1, r3
    1666:	4821      	ldr	r0, [pc, #132]	; (16ec <MW_update+0x290>)
    1668:	f000 fa1e 	bl	1aa8 <__printf_veneer>
				action_taken = true;
    166c:	2301      	movs	r3, #1
    166e:	75fb      	strb	r3, [r7, #23]
				if (mw_sweep_settings.sweep_mode == POP_CAL_ONLY) {//have reached the end of calibration and should stop
    1670:	4b13      	ldr	r3, [pc, #76]	; (16c0 <MW_update+0x264>)
    1672:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
    1676:	2b01      	cmp	r3, #1
    1678:	d103      	bne.n	1682 <MW_update+0x226>
					mw_sweep_settings.state = MW_STOPPED;
    167a:	4b11      	ldr	r3, [pc, #68]	; (16c0 <MW_update+0x264>)
    167c:	2200      	movs	r2, #0
    167e:	701a      	strb	r2, [r3, #0]
				} else {
						start_MW_sweep(false); //start MW_sweep without updating mw_sweep_settings.sweep_mode
				}
			}
			break;
    1680:	e011      	b.n	16a6 <MW_update+0x24a>
						start_MW_sweep(false); //start MW_sweep without updating mw_sweep_settings.sweep_mode
    1682:	2000      	movs	r0, #0
    1684:	f7ff fe74 	bl	1370 <start_MW_sweep>
			break;
    1688:	e00d      	b.n	16a6 <MW_update+0x24a>

		default: // Other state
	       printf("MW_update has detected illegal state: %u \r\n", mw_sweep_settings.state);
    168a:	4b0d      	ldr	r3, [pc, #52]	; (16c0 <MW_update+0x264>)
    168c:	781b      	ldrb	r3, [r3, #0]
    168e:	4619      	mov	r1, r3
    1690:	4817      	ldr	r0, [pc, #92]	; (16f0 <MW_update+0x294>)
    1692:	f000 fa09 	bl	1aa8 <__printf_veneer>
	       printf("local version: %u \r\n", local_copy_of_MW_state);
    1696:	7dbb      	ldrb	r3, [r7, #22]
    1698:	4619      	mov	r1, r3
    169a:	4816      	ldr	r0, [pc, #88]	; (16f4 <MW_update+0x298>)
    169c:	f000 fa04 	bl	1aa8 <__printf_veneer>
    16a0:	e002      	b.n	16a8 <MW_update+0x24c>
			break; //no action to take
    16a2:	bf00      	nop
    16a4:	e000      	b.n	16a8 <MW_update+0x24c>
			break;
    16a6:	bf00      	nop
	}
    return(action_taken);
    16a8:	7dfb      	ldrb	r3, [r7, #23]
}
    16aa:	4618      	mov	r0, r3
    16ac:	3718      	adds	r7, #24
    16ae:	46bd      	mov	sp, r7
    16b0:	bd80      	pop	{r7, pc}
    16b2:	bf00      	nop
    16b4:	f3af 8000 	nop.w
    16b8:	00000000 	.word	0x00000000
    16bc:	412e8480 	.word	0x412e8480
    16c0:	20000640 	.word	0x20000640
    16c4:	2000001c 	.word	0x2000001c
    16c8:	58020400 	.word	0x58020400
    16cc:	58021800 	.word	0x58021800
    16d0:	20000020 	.word	0x20000020
    16d4:	200005fa 	.word	0x200005fa
    16d8:	0801c79c 	.word	0x0801c79c
    16dc:	0801c7d4 	.word	0x0801c7d4
    16e0:	0801c810 	.word	0x0801c810
    16e4:	42c80000 	.word	0x42c80000
    16e8:	200005fc 	.word	0x200005fc
    16ec:	0801c834 	.word	0x0801c834
    16f0:	0801c864 	.word	0x0801c864
    16f4:	0801c890 	.word	0x0801c890

000016f8 <MW_frequency_toggle>:
//}

/* Function to check MW settling time
 * Toggles between two MW frequencies
 */
void MW_frequency_toggle (const double f_one, const double f_two) {
    16f8:	b580      	push	{r7, lr}
    16fa:	b090      	sub	sp, #64	; 0x40
    16fc:	af02      	add	r7, sp, #8
    16fe:	ed87 0b02 	vstr	d0, [r7, #8]
    1702:	ed87 1b00 	vstr	d1, [r7]
	printf("MW frequency toggling experiment\r\n");
    1706:	486a      	ldr	r0, [pc, #424]	; (18b0 <MW_frequency_toggle+0x1b8>)
    1708:	f000 f9e2 	bl	1ad0 <__puts_veneer>
	printf("Toggling between %.10g and %.10g GHz\r\n", f_one/1000000000, f_two/1000000000);
    170c:	ed97 7b02 	vldr	d7, [r7, #8]
    1710:	ed9f 6b5f 	vldr	d6, [pc, #380]	; 1890 <MW_frequency_toggle+0x198>
    1714:	ee87 4b06 	vdiv.f64	d4, d7, d6
    1718:	ed97 6b00 	vldr	d6, [r7]
    171c:	ed9f 5b5c 	vldr	d5, [pc, #368]	; 1890 <MW_frequency_toggle+0x198>
    1720:	ee86 7b05 	vdiv.f64	d7, d6, d5
    1724:	ed8d 7b00 	vstr	d7, [sp]
    1728:	ec53 2b14 	vmov	r2, r3, d4
    172c:	4861      	ldr	r0, [pc, #388]	; (18b4 <MW_frequency_toggle+0x1bc>)
    172e:	f000 f9bb 	bl	1aa8 <__printf_veneer>

	/* For the k divider we need to find the smallest even integer or use a max of 62*/
	uint32_t k_one = VCO_MAX_FREQ / f_one;
    1732:	ed9f 5b59 	vldr	d5, [pc, #356]	; 1898 <MW_frequency_toggle+0x1a0>
    1736:	ed97 6b02 	vldr	d6, [r7, #8]
    173a:	ee85 7b06 	vdiv.f64	d7, d5, d6
    173e:	eefc 7bc7 	vcvt.u32.f64	s15, d7
    1742:	ee17 3a90 	vmov	r3, s15
    1746:	637b      	str	r3, [r7, #52]	; 0x34
	if (k_one != 1) {
    1748:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    174a:	2b01      	cmp	r3, #1
    174c:	d00b      	beq.n	1766 <MW_frequency_toggle+0x6e>
		while (k_one > 62 || k_one % 2) {
    174e:	e002      	b.n	1756 <MW_frequency_toggle+0x5e>
			k_one--;
    1750:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    1752:	3b01      	subs	r3, #1
    1754:	637b      	str	r3, [r7, #52]	; 0x34
		while (k_one > 62 || k_one % 2) {
    1756:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    1758:	2b3e      	cmp	r3, #62	; 0x3e
    175a:	d8f9      	bhi.n	1750 <MW_frequency_toggle+0x58>
    175c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    175e:	f003 0301 	and.w	r3, r3, #1
    1762:	2b00      	cmp	r3, #0
    1764:	d1f4      	bne.n	1750 <MW_frequency_toggle+0x58>
		}
	}
	uint32_t k_two = VCO_MAX_FREQ / f_two;
    1766:	ed9f 5b4c 	vldr	d5, [pc, #304]	; 1898 <MW_frequency_toggle+0x1a0>
    176a:	ed97 6b00 	vldr	d6, [r7]
    176e:	ee85 7b06 	vdiv.f64	d7, d5, d6
    1772:	eefc 7bc7 	vcvt.u32.f64	s15, d7
    1776:	ee17 3a90 	vmov	r3, s15
    177a:	633b      	str	r3, [r7, #48]	; 0x30
	if (k_two != 1) {
    177c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
    177e:	2b01      	cmp	r3, #1
    1780:	d00b      	beq.n	179a <MW_frequency_toggle+0xa2>
		while (k_two > 62 || k_two % 2) {
    1782:	e002      	b.n	178a <MW_frequency_toggle+0x92>
			k_two--;
    1784:	6b3b      	ldr	r3, [r7, #48]	; 0x30
    1786:	3b01      	subs	r3, #1
    1788:	633b      	str	r3, [r7, #48]	; 0x30
		while (k_two > 62 || k_two % 2) {
    178a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
    178c:	2b3e      	cmp	r3, #62	; 0x3e
    178e:	d8f9      	bhi.n	1784 <MW_frequency_toggle+0x8c>
    1790:	6b3b      	ldr	r3, [r7, #48]	; 0x30
    1792:	f003 0301 	and.w	r3, r3, #1
    1796:	2b00      	cmp	r3, #0
    1798:	d1f4      	bne.n	1784 <MW_frequency_toggle+0x8c>
		}
	}

	const double N_one = ((f_one * k_one) / REF_FREQ);
    179a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    179c:	ee07 3a90 	vmov	s15, r3
    17a0:	eeb8 6b67 	vcvt.f64.u32	d6, s15
    17a4:	ed97 7b02 	vldr	d7, [r7, #8]
    17a8:	ee26 6b07 	vmul.f64	d6, d6, d7
    17ac:	ed9f 5b3c 	vldr	d5, [pc, #240]	; 18a0 <MW_frequency_toggle+0x1a8>
    17b0:	ee86 7b05 	vdiv.f64	d7, d6, d5
    17b4:	ed87 7b0a 	vstr	d7, [r7, #40]	; 0x28
	const double N_two = ((f_two * k_two) / REF_FREQ);
    17b8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
    17ba:	ee07 3a90 	vmov	s15, r3
    17be:	eeb8 6b67 	vcvt.f64.u32	d6, s15
    17c2:	ed97 7b00 	vldr	d7, [r7]
    17c6:	ee26 6b07 	vmul.f64	d6, d6, d7
    17ca:	ed9f 5b35 	vldr	d5, [pc, #212]	; 18a0 <MW_frequency_toggle+0x1a8>
    17ce:	ee86 7b05 	vdiv.f64	d7, d6, d5
    17d2:	ed87 7b08 	vstr	d7, [r7, #32]

	/* Extract the fractional and integer parts */
	const uint32_t N_one_INT = N_one;
    17d6:	ed97 7b0a 	vldr	d7, [r7, #40]	; 0x28
    17da:	eefc 7bc7 	vcvt.u32.f64	s15, d7
    17de:	ee17 3a90 	vmov	r3, s15
    17e2:	61fb      	str	r3, [r7, #28]
	const uint32_t N_one_FRAC = ((N_one - N_one_INT) * (1 << 24)) + 0.5;
    17e4:	69fb      	ldr	r3, [r7, #28]
    17e6:	ee07 3a90 	vmov	s15, r3
    17ea:	eeb8 7b67 	vcvt.f64.u32	d7, s15
    17ee:	ed97 6b0a 	vldr	d6, [r7, #40]	; 0x28
    17f2:	ee36 7b47 	vsub.f64	d7, d6, d7
    17f6:	ed9f 6b2c 	vldr	d6, [pc, #176]	; 18a8 <MW_frequency_toggle+0x1b0>
    17fa:	ee27 7b06 	vmul.f64	d7, d7, d6
    17fe:	eeb6 6b00 	vmov.f64	d6, #96	; 0x3f000000  0.5
    1802:	ee37 7b06 	vadd.f64	d7, d7, d6
    1806:	eefc 7bc7 	vcvt.u32.f64	s15, d7
    180a:	ee17 3a90 	vmov	r3, s15
    180e:	61bb      	str	r3, [r7, #24]
	const uint32_t N_two_INT = N_two;
    1810:	ed97 7b08 	vldr	d7, [r7, #32]
    1814:	eefc 7bc7 	vcvt.u32.f64	s15, d7
    1818:	ee17 3a90 	vmov	r3, s15
    181c:	617b      	str	r3, [r7, #20]
	const uint32_t N_two_FRAC = ((N_two - N_two_INT) * (1 << 24)) + 0.5;
    181e:	697b      	ldr	r3, [r7, #20]
    1820:	ee07 3a90 	vmov	s15, r3
    1824:	eeb8 7b67 	vcvt.f64.u32	d7, s15
    1828:	ed97 6b08 	vldr	d6, [r7, #32]
    182c:	ee36 7b47 	vsub.f64	d7, d6, d7
    1830:	ed9f 6b1d 	vldr	d6, [pc, #116]	; 18a8 <MW_frequency_toggle+0x1b0>
    1834:	ee27 7b06 	vmul.f64	d7, d7, d6
    1838:	eeb6 6b00 	vmov.f64	d6, #96	; 0x3f000000  0.5
    183c:	ee37 7b06 	vadd.f64	d7, d7, d6
    1840:	eefc 7bc7 	vcvt.u32.f64	s15, d7
    1844:	ee17 3a90 	vmov	r3, s15
    1848:	613b      	str	r3, [r7, #16]

	while (1) {
	set_freq_regs(N_one_INT, N_one_FRAC, k_one); //Program necessary values for f_one
    184a:	6b7a      	ldr	r2, [r7, #52]	; 0x34
    184c:	69b9      	ldr	r1, [r7, #24]
    184e:	69f8      	ldr	r0, [r7, #28]
    1850:	f7ff f8ee 	bl	a30 <set_freq_regs>
	HAL_GPIO_WritePin(SCOPE_TRIG_OUT_GPIO_Port, SCOPE_TRIG_OUT_Pin, GPIO_PIN_RESET); // Sets trigger output low
    1854:	2200      	movs	r2, #0
    1856:	2101      	movs	r1, #1
    1858:	4817      	ldr	r0, [pc, #92]	; (18b8 <MW_frequency_toggle+0x1c0>)
    185a:	f000 f921 	bl	1aa0 <__HAL_GPIO_WritePin_veneer>
	timer_delay(SLOW_TIMER, 100); //10ms delay
    185e:	4b17      	ldr	r3, [pc, #92]	; (18bc <MW_frequency_toggle+0x1c4>)
    1860:	681b      	ldr	r3, [r3, #0]
    1862:	2164      	movs	r1, #100	; 0x64
    1864:	4618      	mov	r0, r3
    1866:	f000 f88d 	bl	1984 <timer_delay>
	set_freq_regs(N_two_INT, N_two_FRAC, k_two); //Program necessary values for f_two
    186a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
    186c:	6939      	ldr	r1, [r7, #16]
    186e:	6978      	ldr	r0, [r7, #20]
    1870:	f7ff f8de 	bl	a30 <set_freq_regs>
	HAL_GPIO_WritePin(SCOPE_TRIG_OUT_GPIO_Port, SCOPE_TRIG_OUT_Pin, GPIO_PIN_SET); // Sets trigger output high
    1874:	2201      	movs	r2, #1
    1876:	2101      	movs	r1, #1
    1878:	480f      	ldr	r0, [pc, #60]	; (18b8 <MW_frequency_toggle+0x1c0>)
    187a:	f000 f911 	bl	1aa0 <__HAL_GPIO_WritePin_veneer>
	timer_delay(SLOW_TIMER, 100); //10ms delay
    187e:	4b0f      	ldr	r3, [pc, #60]	; (18bc <MW_frequency_toggle+0x1c4>)
    1880:	681b      	ldr	r3, [r3, #0]
    1882:	2164      	movs	r1, #100	; 0x64
    1884:	4618      	mov	r0, r3
    1886:	f000 f87d 	bl	1984 <timer_delay>
	set_freq_regs(N_one_INT, N_one_FRAC, k_one); //Program necessary values for f_one
    188a:	e7de      	b.n	184a <MW_frequency_toggle+0x152>
    188c:	f3af 8000 	nop.w
    1890:	00000000 	.word	0x00000000
    1894:	41cdcd65 	.word	0x41cdcd65
    1898:	20000000 	.word	0x20000000
    189c:	41ee8c21 	.word	0x41ee8c21
    18a0:	00000000 	.word	0x00000000
    18a4:	4187d784 	.word	0x4187d784
    18a8:	00000000 	.word	0x00000000
    18ac:	41700000 	.word	0x41700000
    18b0:	0801c8a8 	.word	0x0801c8a8
    18b4:	0801c8cc 	.word	0x0801c8cc
    18b8:	58021800 	.word	0x58021800
    18bc:	20000018 	.word	0x20000018

000018c0 <set_SDO_output>:
/* Selects SDO pin connectivity/functionality
 * By default, the SDO pin will output 'Lock detect' but can be connected
 * to other internal signals. See table 2.15 of HMC835 datasheet (v04.1113)
 * for more details all options
 */
 void set_SDO_output(const uint32_t GPO_setting) {
    18c0:	b580      	push	{r7, lr}
    18c2:	b084      	sub	sp, #16
    18c4:	af00      	add	r7, sp, #0
    18c6:	6078      	str	r0, [r7, #4]
	//Default output on SDO pin is 'Lock detect output', value 0x01
	//VCO divider is 0x0A
	//See table 2.15 of HMC835 datasheet for more details (v04.1113)
	uint32_t read_data = 0x0;
    18c8:	2300      	movs	r3, #0
    18ca:	60fb      	str	r3, [r7, #12]

	if (GPO_setting > 31) {
    18cc:	687b      	ldr	r3, [r7, #4]
    18ce:	2b1f      	cmp	r3, #31
    18d0:	d904      	bls.n	18dc <set_SDO_output+0x1c>
		printf("SDO pin value must be less that 32\r\n");
    18d2:	480d      	ldr	r0, [pc, #52]	; (1908 <set_SDO_output+0x48>)
    18d4:	f000 f8fc 	bl	1ad0 <__puts_veneer>
		Error_Handler();
    18d8:	f000 f8d2 	bl	1a80 <__Error_Handler_veneer>
	}
	read_data = synth_readreg(GPO_REGISTER); // Get the current value.
    18dc:	200f      	movs	r0, #15
    18de:	f7fe ff0d 	bl	6fc <synth_readreg>
    18e2:	60f8      	str	r0, [r7, #12]
	read_data &= 0xFFFFFFE0; // Zero the first 5 LSBs.
    18e4:	68fb      	ldr	r3, [r7, #12]
    18e6:	f023 031f 	bic.w	r3, r3, #31
    18ea:	60fb      	str	r3, [r7, #12]
	//read_data |= 0x0A; //Select VCO divider output
	read_data |= GPO_setting; //Select GPO output dependent on function input value
    18ec:	68fa      	ldr	r2, [r7, #12]
    18ee:	687b      	ldr	r3, [r7, #4]
    18f0:	4313      	orrs	r3, r2
    18f2:	60fb      	str	r3, [r7, #12]
	synth_writereg(read_data, GPO_REGISTER, 0x0, VERIFY); // Update the GPO register.
    18f4:	2301      	movs	r3, #1
    18f6:	2200      	movs	r2, #0
    18f8:	210f      	movs	r1, #15
    18fa:	68f8      	ldr	r0, [r7, #12]
    18fc:	f7fe fe84 	bl	608 <synth_writereg>
}
    1900:	bf00      	nop
    1902:	3710      	adds	r7, #16
    1904:	46bd      	mov	sp, r7
    1906:	bd80      	pop	{r7, pc}
    1908:	0801c8f4 	.word	0x0801c8f4

0000190c <start_timer>:

/**
  * @brief  Starts a timer.
  * @retval uint32_t
  */
uint32_t start_timer(TIM_TypeDef * timer) {
    190c:	b480      	push	{r7}
    190e:	b083      	sub	sp, #12
    1910:	af00      	add	r7, sp, #0
    1912:	6078      	str	r0, [r7, #4]

	timer->CR1 &= ~(TIM_CR1_CEN);
    1914:	687b      	ldr	r3, [r7, #4]
    1916:	681b      	ldr	r3, [r3, #0]
    1918:	f023 0201 	bic.w	r2, r3, #1
    191c:	687b      	ldr	r3, [r7, #4]
    191e:	601a      	str	r2, [r3, #0]
	timer->EGR |= TIM_EGR_UG;  // Reset CNT and PSC
    1920:	687b      	ldr	r3, [r7, #4]
    1922:	695b      	ldr	r3, [r3, #20]
    1924:	f043 0201 	orr.w	r2, r3, #1
    1928:	687b      	ldr	r3, [r7, #4]
    192a:	615a      	str	r2, [r3, #20]
	timer->CR1 |= TIM_CR1_CEN;
    192c:	687b      	ldr	r3, [r7, #4]
    192e:	681b      	ldr	r3, [r3, #0]
    1930:	f043 0201 	orr.w	r2, r3, #1
    1934:	687b      	ldr	r3, [r7, #4]
    1936:	601a      	str	r2, [r3, #0]
	//printf("Started timer with returned CNT value: %ld \r\n", timer->CNT);
	return timer->CNT;
    1938:	687b      	ldr	r3, [r7, #4]
    193a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
}
    193c:	4618      	mov	r0, r3
    193e:	370c      	adds	r7, #12
    1940:	46bd      	mov	sp, r7
    1942:	f85d 7b04 	ldr.w	r7, [sp], #4
    1946:	4770      	bx	lr

00001948 <stop_timer>:

/**
  * @brief  Stops a timer.
  * @retval uint32_t
  */
uint32_t stop_timer(TIM_TypeDef *timer) {
    1948:	b480      	push	{r7}
    194a:	b083      	sub	sp, #12
    194c:	af00      	add	r7, sp, #0
    194e:	6078      	str	r0, [r7, #4]

	timer->CR1 &= ~(TIM_CR1_CEN);
    1950:	687b      	ldr	r3, [r7, #4]
    1952:	681b      	ldr	r3, [r3, #0]
    1954:	f023 0201 	bic.w	r2, r3, #1
    1958:	687b      	ldr	r3, [r7, #4]
    195a:	601a      	str	r2, [r3, #0]
	return timer->CNT;
    195c:	687b      	ldr	r3, [r7, #4]
    195e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
}
    1960:	4618      	mov	r0, r3
    1962:	370c      	adds	r7, #12
    1964:	46bd      	mov	sp, r7
    1966:	f85d 7b04 	ldr.w	r7, [sp], #4
    196a:	4770      	bx	lr

0000196c <check_timer>:
/**
  * @brief  Returns timer counter value
  * @param  Timer
  * @retval Counter value
  */
uint32_t check_timer(TIM_TypeDef *timer) {
    196c:	b480      	push	{r7}
    196e:	b083      	sub	sp, #12
    1970:	af00      	add	r7, sp, #0
    1972:	6078      	str	r0, [r7, #4]

	return timer->CNT;
    1974:	687b      	ldr	r3, [r7, #4]
    1976:	6a5b      	ldr	r3, [r3, #36]	; 0x24
}
    1978:	4618      	mov	r0, r3
    197a:	370c      	adds	r7, #12
    197c:	46bd      	mov	sp, r7
    197e:	f85d 7b04 	ldr.w	r7, [sp], #4
    1982:	4770      	bx	lr

00001984 <timer_delay>:

/**
  * @brief  Uses a H/W timer to loop for the cycle count requested.
  */
void timer_delay(TIM_TypeDef *timer, const uint32_t delay_count){
    1984:	b580      	push	{r7, lr}
    1986:	b084      	sub	sp, #16
    1988:	af00      	add	r7, sp, #0
    198a:	6078      	str	r0, [r7, #4]
    198c:	6039      	str	r1, [r7, #0]
	/* Note that we don't consider overflow.
	 * FAST_TIMER will take approximately 65 ms to overflow.
	 * SLOW_TIMER will take 650ms
	 * MW_TIMER and SWEEP_TIMER will take 71 minutes */

	uint32_t start = start_timer(timer);
    198e:	6878      	ldr	r0, [r7, #4]
    1990:	f7ff ffbc 	bl	190c <start_timer>
    1994:	60f8      	str	r0, [r7, #12]
//	timer->EGR |= TIM_EGR_UG;  // Reset CNT and PSC
//	timer->CR1 |= TIM_CR1_CEN; // Enable the timer
//	uint32_t start = timer->CNT; // Get the start value of the timer

//	while((timer->CNT - start) < delay_count){} // Loop until delay_us has expired
	while(timer->CNT < delay_count){} // Loop until delay_us has expired
    1996:	bf00      	nop
    1998:	687b      	ldr	r3, [r7, #4]
    199a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
    199c:	683a      	ldr	r2, [r7, #0]
    199e:	429a      	cmp	r2, r3
    19a0:	d8fa      	bhi.n	1998 <timer_delay+0x14>

	stop_timer(timer);
    19a2:	6878      	ldr	r0, [r7, #4]
    19a4:	f7ff ffd0 	bl	1948 <stop_timer>
//	timer->CR1 &= ~(TIM_CR1_CEN); // Disable the timer

}
    19a8:	bf00      	nop
    19aa:	3710      	adds	r7, #16
    19ac:	46bd      	mov	sp, r7
    19ae:	bd80      	pop	{r7, pc}

000019b0 <start_pop>:

	printf("POP cycle stopped!\r\n");

}

void start_pop() {
    19b0:	b580      	push	{r7, lr}
    19b2:	af00      	add	r7, sp, #0

	/* Timer A is the LASER enable, Timer E is the microwave pulse */
	if (HAL_HRTIM_WaveformOutputStart(&hhrtim,
    19b4:	f240 1103 	movw	r1, #259	; 0x103
    19b8:	480f      	ldr	r0, [pc, #60]	; (19f8 <start_pop+0x48>)
    19ba:	f000 f86d 	bl	1a98 <__HAL_HRTIM_WaveformOutputStart_veneer>
    19be:	4603      	mov	r3, r0
    19c0:	2b00      	cmp	r3, #0
    19c2:	d004      	beq.n	19ce <start_pop+0x1e>
	HRTIM_OUTPUT_TA1 | HRTIM_OUTPUT_TA2 | HRTIM_OUTPUT_TE1) != HAL_OK) {
		printf("Failed to start POP!\r\n");
    19c4:	480d      	ldr	r0, [pc, #52]	; (19fc <start_pop+0x4c>)
    19c6:	f000 f883 	bl	1ad0 <__puts_veneer>
		Error_Handler();
    19ca:	f000 f859 	bl	1a80 <__Error_Handler_veneer>
		Error_Handler();
	}

#endif

	if (HAL_HRTIM_WaveformCounterStart_IT(&hhrtim,
    19ce:	f44f 1108 	mov.w	r1, #2228224	; 0x220000
    19d2:	4809      	ldr	r0, [pc, #36]	; (19f8 <start_pop+0x48>)
    19d4:	f000 f878 	bl	1ac8 <__HAL_HRTIM_WaveformCountStart_IT_veneer>
    19d8:	4603      	mov	r3, r0
    19da:	2b00      	cmp	r3, #0
    19dc:	d004      	beq.n	19e8 <start_pop+0x38>
	HRTIM_TIMERID_TIMER_A | HRTIM_TIMERID_TIMER_E) != HAL_OK) {
		printf("POP failure point E!\r\n");
    19de:	4808      	ldr	r0, [pc, #32]	; (1a00 <start_pop+0x50>)
    19e0:	f000 f876 	bl	1ad0 <__puts_veneer>
		Error_Handler();
    19e4:	f000 f84c 	bl	1a80 <__Error_Handler_veneer>
	}

	pop_running = true;
    19e8:	4b06      	ldr	r3, [pc, #24]	; (1a04 <start_pop+0x54>)
    19ea:	2201      	movs	r2, #1
    19ec:	701a      	strb	r2, [r3, #0]

	printf("POP cycle running!\r\n");
    19ee:	4806      	ldr	r0, [pc, #24]	; (1a08 <start_pop+0x58>)
    19f0:	f000 f86e 	bl	1ad0 <__puts_veneer>

}
    19f4:	bf00      	nop
    19f6:	bd80      	pop	{r7, pc}
    19f8:	200002d4 	.word	0x200002d4
    19fc:	0801c918 	.word	0x0801c918
    1a00:	0801c930 	.word	0x0801c930
    1a04:	20000690 	.word	0x20000690
    1a08:	0801c948 	.word	0x0801c948

00001a0c <stop_pop>:
void stop_pop() {
    1a0c:	b580      	push	{r7, lr}
    1a0e:	af00      	add	r7, sp, #0
	if (HAL_HRTIM_WaveformOutputStop(&hhrtim,
    1a10:	f240 1103 	movw	r1, #259	; 0x103
    1a14:	4813      	ldr	r0, [pc, #76]	; (1a64 <stop_pop+0x58>)
    1a16:	f000 f84b 	bl	1ab0 <__HAL_HRTIM_WaveformOutputStop_veneer>
    1a1a:	4603      	mov	r3, r0
    1a1c:	2b00      	cmp	r3, #0
    1a1e:	d004      	beq.n	1a2a <stop_pop+0x1e>
		printf("POP failure point A!\r\n");
    1a20:	4811      	ldr	r0, [pc, #68]	; (1a68 <stop_pop+0x5c>)
    1a22:	f000 f855 	bl	1ad0 <__puts_veneer>
		Error_Handler();
    1a26:	f000 f82b 	bl	1a80 <__Error_Handler_veneer>
	if (HAL_HRTIM_WaveformCounterStop_IT(&hhrtim,
    1a2a:	f44f 1108 	mov.w	r1, #2228224	; 0x220000
    1a2e:	480d      	ldr	r0, [pc, #52]	; (1a64 <stop_pop+0x58>)
    1a30:	f000 f842 	bl	1ab8 <__HAL_HRTIM_WaveformCountStop_IT_veneer>
    1a34:	4603      	mov	r3, r0
    1a36:	2b00      	cmp	r3, #0
    1a38:	d004      	beq.n	1a44 <stop_pop+0x38>
		printf("POP failure point B!\r\n");
    1a3a:	480c      	ldr	r0, [pc, #48]	; (1a6c <stop_pop+0x60>)
    1a3c:	f000 f848 	bl	1ad0 <__puts_veneer>
		Error_Handler();
    1a40:	f000 f81e 	bl	1a80 <__Error_Handler_veneer>
	pop_cycle_count = 0;
    1a44:	4b0a      	ldr	r3, [pc, #40]	; (1a70 <stop_pop+0x64>)
    1a46:	2200      	movs	r2, #0
    1a48:	601a      	str	r2, [r3, #0]
	pop_running = false;
    1a4a:	4b0a      	ldr	r3, [pc, #40]	; (1a74 <stop_pop+0x68>)
    1a4c:	2200      	movs	r2, #0
    1a4e:	701a      	strb	r2, [r3, #0]
	HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, 0); //turn off amber LED
    1a50:	2200      	movs	r2, #0
    1a52:	2102      	movs	r1, #2
    1a54:	4808      	ldr	r0, [pc, #32]	; (1a78 <stop_pop+0x6c>)
    1a56:	f000 f823 	bl	1aa0 <__HAL_GPIO_WritePin_veneer>
	printf("POP cycle stopped!\r\n");
    1a5a:	4808      	ldr	r0, [pc, #32]	; (1a7c <stop_pop+0x70>)
    1a5c:	f000 f838 	bl	1ad0 <__puts_veneer>
}
    1a60:	bf00      	nop
    1a62:	bd80      	pop	{r7, pc}
    1a64:	200002d4 	.word	0x200002d4
    1a68:	0801c95c 	.word	0x0801c95c
    1a6c:	0801c974 	.word	0x0801c974
    1a70:	2000068c 	.word	0x2000068c
    1a74:	20000690 	.word	0x20000690
    1a78:	58021000 	.word	0x58021000
    1a7c:	0801c98c 	.word	0x0801c98c

00001a80 <__Error_Handler_veneer>:
    1a80:	f85f f000 	ldr.w	pc, [pc]	; 1a84 <__Error_Handler_veneer+0x4>
    1a84:	08003295 	.word	0x08003295

00001a88 <__HAL_GPIO_ReadPin_veneer>:
    1a88:	f85f f000 	ldr.w	pc, [pc]	; 1a8c <__HAL_GPIO_ReadPin_veneer+0x4>
    1a8c:	08007cd1 	.word	0x08007cd1

00001a90 <__HAL_Delay_veneer>:
    1a90:	f85f f000 	ldr.w	pc, [pc]	; 1a94 <__HAL_Delay_veneer+0x4>
    1a94:	08004129 	.word	0x08004129

00001a98 <__HAL_HRTIM_WaveformOutputStart_veneer>:
    1a98:	f85f f000 	ldr.w	pc, [pc]	; 1a9c <__HAL_HRTIM_WaveformOutputStart_veneer+0x4>
    1a9c:	080083c3 	.word	0x080083c3

00001aa0 <__HAL_GPIO_WritePin_veneer>:
    1aa0:	f85f f000 	ldr.w	pc, [pc]	; 1aa4 <__HAL_GPIO_WritePin_veneer+0x4>
    1aa4:	08007d01 	.word	0x08007d01

00001aa8 <__printf_veneer>:
    1aa8:	f85f f000 	ldr.w	pc, [pc]	; 1aac <__printf_veneer+0x4>
    1aac:	08019e61 	.word	0x08019e61

00001ab0 <__HAL_HRTIM_WaveformOutputStop_veneer>:
    1ab0:	f85f f000 	ldr.w	pc, [pc]	; 1ab4 <__HAL_HRTIM_WaveformOutputStop_veneer+0x4>
    1ab4:	0800841d 	.word	0x0800841d

00001ab8 <__HAL_HRTIM_WaveformCountStop_IT_veneer>:
    1ab8:	f85f f000 	ldr.w	pc, [pc]	; 1abc <__HAL_HRTIM_WaveformCountStop_IT_veneer+0x4>
    1abc:	08008559 	.word	0x08008559

00001ac0 <__HAL_GPIO_TogglePin_veneer>:
    1ac0:	f85f f000 	ldr.w	pc, [pc]	; 1ac4 <__HAL_GPIO_TogglePin_veneer+0x4>
    1ac4:	08007d33 	.word	0x08007d33

00001ac8 <__HAL_HRTIM_WaveformCountStart_IT_veneer>:
    1ac8:	f85f f000 	ldr.w	pc, [pc]	; 1acc <__HAL_HRTIM_WaveformCountStart_IT_veneer+0x4>
    1acc:	08008479 	.word	0x08008479

00001ad0 <__puts_veneer>:
    1ad0:	f85f f000 	ldr.w	pc, [pc]	; 1ad4 <__puts_veneer+0x4>
    1ad4:	08019f2d 	.word	0x08019f2d

00001ad8 <__HAL_DAC_SetValue_veneer>:
    1ad8:	f85f f000 	ldr.w	pc, [pc]	; 1adc <__HAL_DAC_SetValue_veneer+0x4>
    1adc:	080060a9 	.word	0x080060a9

Disassembly of section .text:

08001d80 <__do_global_dtors_aux>:
 8001d80:	b510      	push	{r4, lr}
 8001d82:	4c05      	ldr	r4, [pc, #20]	; (8001d98 <__do_global_dtors_aux+0x18>)
 8001d84:	7823      	ldrb	r3, [r4, #0]
 8001d86:	b933      	cbnz	r3, 8001d96 <__do_global_dtors_aux+0x16>
 8001d88:	4b04      	ldr	r3, [pc, #16]	; (8001d9c <__do_global_dtors_aux+0x1c>)
 8001d8a:	b113      	cbz	r3, 8001d92 <__do_global_dtors_aux+0x12>
 8001d8c:	4804      	ldr	r0, [pc, #16]	; (8001da0 <__do_global_dtors_aux+0x20>)
 8001d8e:	f3af 8000 	nop.w
 8001d92:	2301      	movs	r3, #1
 8001d94:	7023      	strb	r3, [r4, #0]
 8001d96:	bd10      	pop	{r4, pc}
 8001d98:	20000230 	.word	0x20000230
 8001d9c:	00000000 	.word	0x00000000
 8001da0:	0801bd68 	.word	0x0801bd68

08001da4 <frame_dummy>:
 8001da4:	b508      	push	{r3, lr}
 8001da6:	4b03      	ldr	r3, [pc, #12]	; (8001db4 <frame_dummy+0x10>)
 8001da8:	b11b      	cbz	r3, 8001db2 <frame_dummy+0xe>
 8001daa:	4903      	ldr	r1, [pc, #12]	; (8001db8 <frame_dummy+0x14>)
 8001dac:	4803      	ldr	r0, [pc, #12]	; (8001dbc <frame_dummy+0x18>)
 8001dae:	f3af 8000 	nop.w
 8001db2:	bd08      	pop	{r3, pc}
 8001db4:	00000000 	.word	0x00000000
 8001db8:	20000234 	.word	0x20000234
 8001dbc:	0801bd68 	.word	0x0801bd68

08001dc0 <memchr>:
 8001dc0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8001dc4:	2a10      	cmp	r2, #16
 8001dc6:	db2b      	blt.n	8001e20 <memchr+0x60>
 8001dc8:	f010 0f07 	tst.w	r0, #7
 8001dcc:	d008      	beq.n	8001de0 <memchr+0x20>
 8001dce:	f810 3b01 	ldrb.w	r3, [r0], #1
 8001dd2:	3a01      	subs	r2, #1
 8001dd4:	428b      	cmp	r3, r1
 8001dd6:	d02d      	beq.n	8001e34 <memchr+0x74>
 8001dd8:	f010 0f07 	tst.w	r0, #7
 8001ddc:	b342      	cbz	r2, 8001e30 <memchr+0x70>
 8001dde:	d1f6      	bne.n	8001dce <memchr+0xe>
 8001de0:	b4f0      	push	{r4, r5, r6, r7}
 8001de2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8001de6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 8001dea:	f022 0407 	bic.w	r4, r2, #7
 8001dee:	f07f 0700 	mvns.w	r7, #0
 8001df2:	2300      	movs	r3, #0
 8001df4:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8001df8:	3c08      	subs	r4, #8
 8001dfa:	ea85 0501 	eor.w	r5, r5, r1
 8001dfe:	ea86 0601 	eor.w	r6, r6, r1
 8001e02:	fa85 f547 	uadd8	r5, r5, r7
 8001e06:	faa3 f587 	sel	r5, r3, r7
 8001e0a:	fa86 f647 	uadd8	r6, r6, r7
 8001e0e:	faa5 f687 	sel	r6, r5, r7
 8001e12:	b98e      	cbnz	r6, 8001e38 <memchr+0x78>
 8001e14:	d1ee      	bne.n	8001df4 <memchr+0x34>
 8001e16:	bcf0      	pop	{r4, r5, r6, r7}
 8001e18:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8001e1c:	f002 0207 	and.w	r2, r2, #7
 8001e20:	b132      	cbz	r2, 8001e30 <memchr+0x70>
 8001e22:	f810 3b01 	ldrb.w	r3, [r0], #1
 8001e26:	3a01      	subs	r2, #1
 8001e28:	ea83 0301 	eor.w	r3, r3, r1
 8001e2c:	b113      	cbz	r3, 8001e34 <memchr+0x74>
 8001e2e:	d1f8      	bne.n	8001e22 <memchr+0x62>
 8001e30:	2000      	movs	r0, #0
 8001e32:	4770      	bx	lr
 8001e34:	3801      	subs	r0, #1
 8001e36:	4770      	bx	lr
 8001e38:	2d00      	cmp	r5, #0
 8001e3a:	bf06      	itte	eq
 8001e3c:	4635      	moveq	r5, r6
 8001e3e:	3803      	subeq	r0, #3
 8001e40:	3807      	subne	r0, #7
 8001e42:	f015 0f01 	tst.w	r5, #1
 8001e46:	d107      	bne.n	8001e58 <memchr+0x98>
 8001e48:	3001      	adds	r0, #1
 8001e4a:	f415 7f80 	tst.w	r5, #256	; 0x100
 8001e4e:	bf02      	ittt	eq
 8001e50:	3001      	addeq	r0, #1
 8001e52:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8001e56:	3001      	addeq	r0, #1
 8001e58:	bcf0      	pop	{r4, r5, r6, r7}
 8001e5a:	3801      	subs	r0, #1
 8001e5c:	4770      	bx	lr
 8001e5e:	bf00      	nop

08001e60 <strlen>:
 8001e60:	4603      	mov	r3, r0
 8001e62:	f813 2b01 	ldrb.w	r2, [r3], #1
 8001e66:	2a00      	cmp	r2, #0
 8001e68:	d1fb      	bne.n	8001e62 <strlen+0x2>
 8001e6a:	1a18      	subs	r0, r3, r0
 8001e6c:	3801      	subs	r0, #1
 8001e6e:	4770      	bx	lr

08001e70 <__aeabi_uldivmod>:
 8001e70:	b953      	cbnz	r3, 8001e88 <__aeabi_uldivmod+0x18>
 8001e72:	b94a      	cbnz	r2, 8001e88 <__aeabi_uldivmod+0x18>
 8001e74:	2900      	cmp	r1, #0
 8001e76:	bf08      	it	eq
 8001e78:	2800      	cmpeq	r0, #0
 8001e7a:	bf1c      	itt	ne
 8001e7c:	f04f 31ff 	movne.w	r1, #4294967295
 8001e80:	f04f 30ff 	movne.w	r0, #4294967295
 8001e84:	f000 b970 	b.w	8002168 <__aeabi_idiv0>
 8001e88:	f1ad 0c08 	sub.w	ip, sp, #8
 8001e8c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8001e90:	f000 f806 	bl	8001ea0 <__udivmoddi4>
 8001e94:	f8dd e004 	ldr.w	lr, [sp, #4]
 8001e98:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8001e9c:	b004      	add	sp, #16
 8001e9e:	4770      	bx	lr

08001ea0 <__udivmoddi4>:
 8001ea0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8001ea4:	9e08      	ldr	r6, [sp, #32]
 8001ea6:	460d      	mov	r5, r1
 8001ea8:	4604      	mov	r4, r0
 8001eaa:	460f      	mov	r7, r1
 8001eac:	2b00      	cmp	r3, #0
 8001eae:	d14a      	bne.n	8001f46 <__udivmoddi4+0xa6>
 8001eb0:	428a      	cmp	r2, r1
 8001eb2:	4694      	mov	ip, r2
 8001eb4:	d965      	bls.n	8001f82 <__udivmoddi4+0xe2>
 8001eb6:	fab2 f382 	clz	r3, r2
 8001eba:	b143      	cbz	r3, 8001ece <__udivmoddi4+0x2e>
 8001ebc:	fa02 fc03 	lsl.w	ip, r2, r3
 8001ec0:	f1c3 0220 	rsb	r2, r3, #32
 8001ec4:	409f      	lsls	r7, r3
 8001ec6:	fa20 f202 	lsr.w	r2, r0, r2
 8001eca:	4317      	orrs	r7, r2
 8001ecc:	409c      	lsls	r4, r3
 8001ece:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 8001ed2:	fa1f f58c 	uxth.w	r5, ip
 8001ed6:	fbb7 f1fe 	udiv	r1, r7, lr
 8001eda:	0c22      	lsrs	r2, r4, #16
 8001edc:	fb0e 7711 	mls	r7, lr, r1, r7
 8001ee0:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 8001ee4:	fb01 f005 	mul.w	r0, r1, r5
 8001ee8:	4290      	cmp	r0, r2
 8001eea:	d90a      	bls.n	8001f02 <__udivmoddi4+0x62>
 8001eec:	eb1c 0202 	adds.w	r2, ip, r2
 8001ef0:	f101 37ff 	add.w	r7, r1, #4294967295
 8001ef4:	f080 811c 	bcs.w	8002130 <__udivmoddi4+0x290>
 8001ef8:	4290      	cmp	r0, r2
 8001efa:	f240 8119 	bls.w	8002130 <__udivmoddi4+0x290>
 8001efe:	3902      	subs	r1, #2
 8001f00:	4462      	add	r2, ip
 8001f02:	1a12      	subs	r2, r2, r0
 8001f04:	b2a4      	uxth	r4, r4
 8001f06:	fbb2 f0fe 	udiv	r0, r2, lr
 8001f0a:	fb0e 2210 	mls	r2, lr, r0, r2
 8001f0e:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8001f12:	fb00 f505 	mul.w	r5, r0, r5
 8001f16:	42a5      	cmp	r5, r4
 8001f18:	d90a      	bls.n	8001f30 <__udivmoddi4+0x90>
 8001f1a:	eb1c 0404 	adds.w	r4, ip, r4
 8001f1e:	f100 32ff 	add.w	r2, r0, #4294967295
 8001f22:	f080 8107 	bcs.w	8002134 <__udivmoddi4+0x294>
 8001f26:	42a5      	cmp	r5, r4
 8001f28:	f240 8104 	bls.w	8002134 <__udivmoddi4+0x294>
 8001f2c:	4464      	add	r4, ip
 8001f2e:	3802      	subs	r0, #2
 8001f30:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8001f34:	1b64      	subs	r4, r4, r5
 8001f36:	2100      	movs	r1, #0
 8001f38:	b11e      	cbz	r6, 8001f42 <__udivmoddi4+0xa2>
 8001f3a:	40dc      	lsrs	r4, r3
 8001f3c:	2300      	movs	r3, #0
 8001f3e:	e9c6 4300 	strd	r4, r3, [r6]
 8001f42:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8001f46:	428b      	cmp	r3, r1
 8001f48:	d908      	bls.n	8001f5c <__udivmoddi4+0xbc>
 8001f4a:	2e00      	cmp	r6, #0
 8001f4c:	f000 80ed 	beq.w	800212a <__udivmoddi4+0x28a>
 8001f50:	2100      	movs	r1, #0
 8001f52:	e9c6 0500 	strd	r0, r5, [r6]
 8001f56:	4608      	mov	r0, r1
 8001f58:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8001f5c:	fab3 f183 	clz	r1, r3
 8001f60:	2900      	cmp	r1, #0
 8001f62:	d149      	bne.n	8001ff8 <__udivmoddi4+0x158>
 8001f64:	42ab      	cmp	r3, r5
 8001f66:	d302      	bcc.n	8001f6e <__udivmoddi4+0xce>
 8001f68:	4282      	cmp	r2, r0
 8001f6a:	f200 80f8 	bhi.w	800215e <__udivmoddi4+0x2be>
 8001f6e:	1a84      	subs	r4, r0, r2
 8001f70:	eb65 0203 	sbc.w	r2, r5, r3
 8001f74:	2001      	movs	r0, #1
 8001f76:	4617      	mov	r7, r2
 8001f78:	2e00      	cmp	r6, #0
 8001f7a:	d0e2      	beq.n	8001f42 <__udivmoddi4+0xa2>
 8001f7c:	e9c6 4700 	strd	r4, r7, [r6]
 8001f80:	e7df      	b.n	8001f42 <__udivmoddi4+0xa2>
 8001f82:	b902      	cbnz	r2, 8001f86 <__udivmoddi4+0xe6>
 8001f84:	deff      	udf	#255	; 0xff
 8001f86:	fab2 f382 	clz	r3, r2
 8001f8a:	2b00      	cmp	r3, #0
 8001f8c:	f040 8090 	bne.w	80020b0 <__udivmoddi4+0x210>
 8001f90:	1a8a      	subs	r2, r1, r2
 8001f92:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8001f96:	fa1f fe8c 	uxth.w	lr, ip
 8001f9a:	2101      	movs	r1, #1
 8001f9c:	fbb2 f5f7 	udiv	r5, r2, r7
 8001fa0:	fb07 2015 	mls	r0, r7, r5, r2
 8001fa4:	0c22      	lsrs	r2, r4, #16
 8001fa6:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 8001faa:	fb0e f005 	mul.w	r0, lr, r5
 8001fae:	4290      	cmp	r0, r2
 8001fb0:	d908      	bls.n	8001fc4 <__udivmoddi4+0x124>
 8001fb2:	eb1c 0202 	adds.w	r2, ip, r2
 8001fb6:	f105 38ff 	add.w	r8, r5, #4294967295
 8001fba:	d202      	bcs.n	8001fc2 <__udivmoddi4+0x122>
 8001fbc:	4290      	cmp	r0, r2
 8001fbe:	f200 80cb 	bhi.w	8002158 <__udivmoddi4+0x2b8>
 8001fc2:	4645      	mov	r5, r8
 8001fc4:	1a12      	subs	r2, r2, r0
 8001fc6:	b2a4      	uxth	r4, r4
 8001fc8:	fbb2 f0f7 	udiv	r0, r2, r7
 8001fcc:	fb07 2210 	mls	r2, r7, r0, r2
 8001fd0:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8001fd4:	fb0e fe00 	mul.w	lr, lr, r0
 8001fd8:	45a6      	cmp	lr, r4
 8001fda:	d908      	bls.n	8001fee <__udivmoddi4+0x14e>
 8001fdc:	eb1c 0404 	adds.w	r4, ip, r4
 8001fe0:	f100 32ff 	add.w	r2, r0, #4294967295
 8001fe4:	d202      	bcs.n	8001fec <__udivmoddi4+0x14c>
 8001fe6:	45a6      	cmp	lr, r4
 8001fe8:	f200 80bb 	bhi.w	8002162 <__udivmoddi4+0x2c2>
 8001fec:	4610      	mov	r0, r2
 8001fee:	eba4 040e 	sub.w	r4, r4, lr
 8001ff2:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 8001ff6:	e79f      	b.n	8001f38 <__udivmoddi4+0x98>
 8001ff8:	f1c1 0720 	rsb	r7, r1, #32
 8001ffc:	408b      	lsls	r3, r1
 8001ffe:	fa22 fc07 	lsr.w	ip, r2, r7
 8002002:	ea4c 0c03 	orr.w	ip, ip, r3
 8002006:	fa05 f401 	lsl.w	r4, r5, r1
 800200a:	fa20 f307 	lsr.w	r3, r0, r7
 800200e:	40fd      	lsrs	r5, r7
 8002010:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8002014:	4323      	orrs	r3, r4
 8002016:	fbb5 f8f9 	udiv	r8, r5, r9
 800201a:	fa1f fe8c 	uxth.w	lr, ip
 800201e:	fb09 5518 	mls	r5, r9, r8, r5
 8002022:	0c1c      	lsrs	r4, r3, #16
 8002024:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8002028:	fb08 f50e 	mul.w	r5, r8, lr
 800202c:	42a5      	cmp	r5, r4
 800202e:	fa02 f201 	lsl.w	r2, r2, r1
 8002032:	fa00 f001 	lsl.w	r0, r0, r1
 8002036:	d90b      	bls.n	8002050 <__udivmoddi4+0x1b0>
 8002038:	eb1c 0404 	adds.w	r4, ip, r4
 800203c:	f108 3aff 	add.w	sl, r8, #4294967295
 8002040:	f080 8088 	bcs.w	8002154 <__udivmoddi4+0x2b4>
 8002044:	42a5      	cmp	r5, r4
 8002046:	f240 8085 	bls.w	8002154 <__udivmoddi4+0x2b4>
 800204a:	f1a8 0802 	sub.w	r8, r8, #2
 800204e:	4464      	add	r4, ip
 8002050:	1b64      	subs	r4, r4, r5
 8002052:	b29d      	uxth	r5, r3
 8002054:	fbb4 f3f9 	udiv	r3, r4, r9
 8002058:	fb09 4413 	mls	r4, r9, r3, r4
 800205c:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 8002060:	fb03 fe0e 	mul.w	lr, r3, lr
 8002064:	45a6      	cmp	lr, r4
 8002066:	d908      	bls.n	800207a <__udivmoddi4+0x1da>
 8002068:	eb1c 0404 	adds.w	r4, ip, r4
 800206c:	f103 35ff 	add.w	r5, r3, #4294967295
 8002070:	d26c      	bcs.n	800214c <__udivmoddi4+0x2ac>
 8002072:	45a6      	cmp	lr, r4
 8002074:	d96a      	bls.n	800214c <__udivmoddi4+0x2ac>
 8002076:	3b02      	subs	r3, #2
 8002078:	4464      	add	r4, ip
 800207a:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 800207e:	fba3 9502 	umull	r9, r5, r3, r2
 8002082:	eba4 040e 	sub.w	r4, r4, lr
 8002086:	42ac      	cmp	r4, r5
 8002088:	46c8      	mov	r8, r9
 800208a:	46ae      	mov	lr, r5
 800208c:	d356      	bcc.n	800213c <__udivmoddi4+0x29c>
 800208e:	d053      	beq.n	8002138 <__udivmoddi4+0x298>
 8002090:	b156      	cbz	r6, 80020a8 <__udivmoddi4+0x208>
 8002092:	ebb0 0208 	subs.w	r2, r0, r8
 8002096:	eb64 040e 	sbc.w	r4, r4, lr
 800209a:	fa04 f707 	lsl.w	r7, r4, r7
 800209e:	40ca      	lsrs	r2, r1
 80020a0:	40cc      	lsrs	r4, r1
 80020a2:	4317      	orrs	r7, r2
 80020a4:	e9c6 7400 	strd	r7, r4, [r6]
 80020a8:	4618      	mov	r0, r3
 80020aa:	2100      	movs	r1, #0
 80020ac:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80020b0:	f1c3 0120 	rsb	r1, r3, #32
 80020b4:	fa02 fc03 	lsl.w	ip, r2, r3
 80020b8:	fa20 f201 	lsr.w	r2, r0, r1
 80020bc:	fa25 f101 	lsr.w	r1, r5, r1
 80020c0:	409d      	lsls	r5, r3
 80020c2:	432a      	orrs	r2, r5
 80020c4:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80020c8:	fa1f fe8c 	uxth.w	lr, ip
 80020cc:	fbb1 f0f7 	udiv	r0, r1, r7
 80020d0:	fb07 1510 	mls	r5, r7, r0, r1
 80020d4:	0c11      	lsrs	r1, r2, #16
 80020d6:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 80020da:	fb00 f50e 	mul.w	r5, r0, lr
 80020de:	428d      	cmp	r5, r1
 80020e0:	fa04 f403 	lsl.w	r4, r4, r3
 80020e4:	d908      	bls.n	80020f8 <__udivmoddi4+0x258>
 80020e6:	eb1c 0101 	adds.w	r1, ip, r1
 80020ea:	f100 38ff 	add.w	r8, r0, #4294967295
 80020ee:	d22f      	bcs.n	8002150 <__udivmoddi4+0x2b0>
 80020f0:	428d      	cmp	r5, r1
 80020f2:	d92d      	bls.n	8002150 <__udivmoddi4+0x2b0>
 80020f4:	3802      	subs	r0, #2
 80020f6:	4461      	add	r1, ip
 80020f8:	1b49      	subs	r1, r1, r5
 80020fa:	b292      	uxth	r2, r2
 80020fc:	fbb1 f5f7 	udiv	r5, r1, r7
 8002100:	fb07 1115 	mls	r1, r7, r5, r1
 8002104:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8002108:	fb05 f10e 	mul.w	r1, r5, lr
 800210c:	4291      	cmp	r1, r2
 800210e:	d908      	bls.n	8002122 <__udivmoddi4+0x282>
 8002110:	eb1c 0202 	adds.w	r2, ip, r2
 8002114:	f105 38ff 	add.w	r8, r5, #4294967295
 8002118:	d216      	bcs.n	8002148 <__udivmoddi4+0x2a8>
 800211a:	4291      	cmp	r1, r2
 800211c:	d914      	bls.n	8002148 <__udivmoddi4+0x2a8>
 800211e:	3d02      	subs	r5, #2
 8002120:	4462      	add	r2, ip
 8002122:	1a52      	subs	r2, r2, r1
 8002124:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 8002128:	e738      	b.n	8001f9c <__udivmoddi4+0xfc>
 800212a:	4631      	mov	r1, r6
 800212c:	4630      	mov	r0, r6
 800212e:	e708      	b.n	8001f42 <__udivmoddi4+0xa2>
 8002130:	4639      	mov	r1, r7
 8002132:	e6e6      	b.n	8001f02 <__udivmoddi4+0x62>
 8002134:	4610      	mov	r0, r2
 8002136:	e6fb      	b.n	8001f30 <__udivmoddi4+0x90>
 8002138:	4548      	cmp	r0, r9
 800213a:	d2a9      	bcs.n	8002090 <__udivmoddi4+0x1f0>
 800213c:	ebb9 0802 	subs.w	r8, r9, r2
 8002140:	eb65 0e0c 	sbc.w	lr, r5, ip
 8002144:	3b01      	subs	r3, #1
 8002146:	e7a3      	b.n	8002090 <__udivmoddi4+0x1f0>
 8002148:	4645      	mov	r5, r8
 800214a:	e7ea      	b.n	8002122 <__udivmoddi4+0x282>
 800214c:	462b      	mov	r3, r5
 800214e:	e794      	b.n	800207a <__udivmoddi4+0x1da>
 8002150:	4640      	mov	r0, r8
 8002152:	e7d1      	b.n	80020f8 <__udivmoddi4+0x258>
 8002154:	46d0      	mov	r8, sl
 8002156:	e77b      	b.n	8002050 <__udivmoddi4+0x1b0>
 8002158:	3d02      	subs	r5, #2
 800215a:	4462      	add	r2, ip
 800215c:	e732      	b.n	8001fc4 <__udivmoddi4+0x124>
 800215e:	4608      	mov	r0, r1
 8002160:	e70a      	b.n	8001f78 <__udivmoddi4+0xd8>
 8002162:	4464      	add	r4, ip
 8002164:	3802      	subs	r0, #2
 8002166:	e742      	b.n	8001fee <__udivmoddi4+0x14e>

08002168 <__aeabi_idiv0>:
 8002168:	4770      	bx	lr
 800216a:	bf00      	nop

0800216c <__io_putchar>:
PUTCHAR_PROTOTYPE {
 800216c:	b580      	push	{r7, lr}
 800216e:	b082      	sub	sp, #8
 8002170:	af00      	add	r7, sp, #0
 8002172:	6078      	str	r0, [r7, #4]
	HAL_UART_Transmit(&huart3, (uint8_t*) &ch, 1, 0xFFFF);
 8002174:	1d39      	adds	r1, r7, #4
 8002176:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800217a:	2201      	movs	r2, #1
 800217c:	4803      	ldr	r0, [pc, #12]	; (800218c <__io_putchar+0x20>)
 800217e:	f00b fe2f 	bl	800dde0 <HAL_UART_Transmit>
	return ch;
 8002182:	687b      	ldr	r3, [r7, #4]
}
 8002184:	4618      	mov	r0, r3
 8002186:	3708      	adds	r7, #8
 8002188:	46bd      	mov	sp, r7
 800218a:	bd80      	pop	{r7, pc}
 800218c:	20000564 	.word	0x20000564

08002190 <main>:
{
 8002190:	b580      	push	{r7, lr}
 8002192:	b084      	sub	sp, #16
 8002194:	af00      	add	r7, sp, #0
  memcpy(&_sitcm, &_siitcm, ((void*) &_eitcm - (void*) &_sitcm));
 8002196:	4ab8      	ldr	r2, [pc, #736]	; (8002478 <main+0x2e8>)
 8002198:	4bb8      	ldr	r3, [pc, #736]	; (800247c <main+0x2ec>)
 800219a:	1ad3      	subs	r3, r2, r3
 800219c:	461a      	mov	r2, r3
 800219e:	49b8      	ldr	r1, [pc, #736]	; (8002480 <main+0x2f0>)
 80021a0:	48b6      	ldr	r0, [pc, #728]	; (800247c <main+0x2ec>)
 80021a2:	f018 f82c 	bl	801a1fe <memcpy>
  MPU_Config();
 80021a6:	f001 f823 	bl	80031f0 <MPU_Config>
  \details Turns on I-Cache
  */
__STATIC_FORCEINLINE void SCB_EnableICache (void)
{
  #if defined (__ICACHE_PRESENT) && (__ICACHE_PRESENT == 1U)
    if (SCB->CCR & SCB_CCR_IC_Msk) return;  /* return if ICache is already enabled */
 80021aa:	4bb6      	ldr	r3, [pc, #728]	; (8002484 <main+0x2f4>)
 80021ac:	695b      	ldr	r3, [r3, #20]
 80021ae:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80021b2:	2b00      	cmp	r3, #0
 80021b4:	d11b      	bne.n	80021ee <main+0x5e>
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 80021b6:	f3bf 8f4f 	dsb	sy
}
 80021ba:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 80021bc:	f3bf 8f6f 	isb	sy
}
 80021c0:	bf00      	nop

    __DSB();
    __ISB();
    SCB->ICIALLU = 0UL;                     /* invalidate I-Cache */
 80021c2:	4bb0      	ldr	r3, [pc, #704]	; (8002484 <main+0x2f4>)
 80021c4:	2200      	movs	r2, #0
 80021c6:	f8c3 2250 	str.w	r2, [r3, #592]	; 0x250
  __ASM volatile ("dsb 0xF":::"memory");
 80021ca:	f3bf 8f4f 	dsb	sy
}
 80021ce:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 80021d0:	f3bf 8f6f 	isb	sy
}
 80021d4:	bf00      	nop
    __DSB();
    __ISB();
    SCB->CCR |=  (uint32_t)SCB_CCR_IC_Msk;  /* enable I-Cache */
 80021d6:	4bab      	ldr	r3, [pc, #684]	; (8002484 <main+0x2f4>)
 80021d8:	695b      	ldr	r3, [r3, #20]
 80021da:	4aaa      	ldr	r2, [pc, #680]	; (8002484 <main+0x2f4>)
 80021dc:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80021e0:	6153      	str	r3, [r2, #20]
  __ASM volatile ("dsb 0xF":::"memory");
 80021e2:	f3bf 8f4f 	dsb	sy
}
 80021e6:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 80021e8:	f3bf 8f6f 	isb	sy
}
 80021ec:	e000      	b.n	80021f0 <main+0x60>
    if (SCB->CCR & SCB_CCR_IC_Msk) return;  /* return if ICache is already enabled */
 80021ee:	bf00      	nop
  #if defined (__DCACHE_PRESENT) && (__DCACHE_PRESENT == 1U)
    uint32_t ccsidr;
    uint32_t sets;
    uint32_t ways;

    if (SCB->CCR & SCB_CCR_DC_Msk) return;  /* return if DCache is already enabled */
 80021f0:	4ba4      	ldr	r3, [pc, #656]	; (8002484 <main+0x2f4>)
 80021f2:	695b      	ldr	r3, [r3, #20]
 80021f4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80021f8:	2b00      	cmp	r3, #0
 80021fa:	d138      	bne.n	800226e <main+0xde>

    SCB->CSSELR = 0U;                       /* select Level 1 data cache */
 80021fc:	4ba1      	ldr	r3, [pc, #644]	; (8002484 <main+0x2f4>)
 80021fe:	2200      	movs	r2, #0
 8002200:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  __ASM volatile ("dsb 0xF":::"memory");
 8002204:	f3bf 8f4f 	dsb	sy
}
 8002208:	bf00      	nop
    __DSB();

    ccsidr = SCB->CCSIDR;
 800220a:	4b9e      	ldr	r3, [pc, #632]	; (8002484 <main+0x2f4>)
 800220c:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8002210:	60fb      	str	r3, [r7, #12]

                                            /* invalidate D-Cache */
    sets = (uint32_t)(CCSIDR_SETS(ccsidr));
 8002212:	68fb      	ldr	r3, [r7, #12]
 8002214:	0b5b      	lsrs	r3, r3, #13
 8002216:	f3c3 030e 	ubfx	r3, r3, #0, #15
 800221a:	60bb      	str	r3, [r7, #8]
    do {
      ways = (uint32_t)(CCSIDR_WAYS(ccsidr));
 800221c:	68fb      	ldr	r3, [r7, #12]
 800221e:	08db      	lsrs	r3, r3, #3
 8002220:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8002224:	607b      	str	r3, [r7, #4]
      do {
        SCB->DCISW = (((sets << SCB_DCISW_SET_Pos) & SCB_DCISW_SET_Msk) |
 8002226:	68bb      	ldr	r3, [r7, #8]
 8002228:	015a      	lsls	r2, r3, #5
 800222a:	f643 73e0 	movw	r3, #16352	; 0x3fe0
 800222e:	4013      	ands	r3, r2
                      ((ways << SCB_DCISW_WAY_Pos) & SCB_DCISW_WAY_Msk)  );
 8002230:	687a      	ldr	r2, [r7, #4]
 8002232:	0792      	lsls	r2, r2, #30
        SCB->DCISW = (((sets << SCB_DCISW_SET_Pos) & SCB_DCISW_SET_Msk) |
 8002234:	4993      	ldr	r1, [pc, #588]	; (8002484 <main+0x2f4>)
 8002236:	4313      	orrs	r3, r2
 8002238:	f8c1 3260 	str.w	r3, [r1, #608]	; 0x260
        #if defined ( __CC_ARM )
          __schedule_barrier();
        #endif
      } while (ways-- != 0U);
 800223c:	687b      	ldr	r3, [r7, #4]
 800223e:	1e5a      	subs	r2, r3, #1
 8002240:	607a      	str	r2, [r7, #4]
 8002242:	2b00      	cmp	r3, #0
 8002244:	d1ef      	bne.n	8002226 <main+0x96>
    } while(sets-- != 0U);
 8002246:	68bb      	ldr	r3, [r7, #8]
 8002248:	1e5a      	subs	r2, r3, #1
 800224a:	60ba      	str	r2, [r7, #8]
 800224c:	2b00      	cmp	r3, #0
 800224e:	d1e5      	bne.n	800221c <main+0x8c>
  __ASM volatile ("dsb 0xF":::"memory");
 8002250:	f3bf 8f4f 	dsb	sy
}
 8002254:	bf00      	nop
    __DSB();

    SCB->CCR |=  (uint32_t)SCB_CCR_DC_Msk;  /* enable D-Cache */
 8002256:	4b8b      	ldr	r3, [pc, #556]	; (8002484 <main+0x2f4>)
 8002258:	695b      	ldr	r3, [r3, #20]
 800225a:	4a8a      	ldr	r2, [pc, #552]	; (8002484 <main+0x2f4>)
 800225c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002260:	6153      	str	r3, [r2, #20]
  __ASM volatile ("dsb 0xF":::"memory");
 8002262:	f3bf 8f4f 	dsb	sy
}
 8002266:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8002268:	f3bf 8f6f 	isb	sy
}
 800226c:	e000      	b.n	8002270 <main+0xe0>
    if (SCB->CCR & SCB_CCR_DC_Msk) return;  /* return if DCache is already enabled */
 800226e:	bf00      	nop
  HAL_Init();
 8002270:	f001 fec8 	bl	8004004 <HAL_Init>
  SystemClock_Config();
 8002274:	f000 f93a 	bl	80024ec <SystemClock_Config>
  MX_GPIO_Init();
 8002278:	f000 fdf0 	bl	8002e5c <MX_GPIO_Init>
  MX_LPTIM1_Init();
 800227c:	f000 fbe4 	bl	8002a48 <MX_LPTIM1_Init>
  MX_DAC1_Init();
 8002280:	f000 fa54 	bl	800272c <MX_DAC1_Init>
  MX_USART3_UART_Init();
 8002284:	f000 fd9c 	bl	8002dc0 <MX_USART3_UART_Init>
  MX_TIM3_Init();
 8002288:	f000 fcae 	bl	8002be8 <MX_TIM3_Init>
  MX_TIM1_Init();
 800228c:	f000 fc0a 	bl	8002aa4 <MX_TIM1_Init>
  MX_HRTIM_Init();
 8002290:	f000 fa88 	bl	80027a4 <MX_HRTIM_Init>
  MX_ADC3_Init();
 8002294:	f000 f9e8 	bl	8002668 <MX_ADC3_Init>
  MX_LWIP_Init();
 8002298:	f00c feb6 	bl	800f008 <MX_LWIP_Init>
  MX_TIM2_Init();
 800229c:	f000 fc56 	bl	8002b4c <MX_TIM2_Init>
  MX_TIM5_Init();
 80022a0:	f000 fd40 	bl	8002d24 <MX_TIM5_Init>
  MX_TIM4_Init();
 80022a4:	f000 fcee 	bl	8002c84 <MX_TIM4_Init>
  printf("\033c"); //clears screen
 80022a8:	4877      	ldr	r0, [pc, #476]	; (8002488 <main+0x2f8>)
 80022aa:	f017 fdd9 	bl	8019e60 <iprintf>
  printf("Atomic Clock - Source __TIMESTAMP__: %s\r\n", __TIMESTAMP__);
 80022ae:	4977      	ldr	r1, [pc, #476]	; (800248c <main+0x2fc>)
 80022b0:	4877      	ldr	r0, [pc, #476]	; (8002490 <main+0x300>)
 80022b2:	f017 fdd5 	bl	8019e60 <iprintf>
		if (init_synthesiser(MW_power) != SUCCESS) {
 80022b6:	4b77      	ldr	r3, [pc, #476]	; (8002494 <main+0x304>)
 80022b8:	781b      	ldrb	r3, [r3, #0]
 80022ba:	4618      	mov	r0, r3
 80022bc:	f019 fd60 	bl	801bd80 <__init_synthesiser_veneer>
 80022c0:	4603      	mov	r3, r0
 80022c2:	2b00      	cmp	r3, #0
 80022c4:	d004      	beq.n	80022d0 <main+0x140>
			printf("Synthesiser initialisation failed!\r\n");
 80022c6:	4874      	ldr	r0, [pc, #464]	; (8002498 <main+0x308>)
 80022c8:	f017 fe30 	bl	8019f2c <puts>
			Error_Handler();
 80022cc:	f000 ffe2 	bl	8003294 <Error_Handler>
			printf("MW power setting (LO2GAIN): 0x%x \r\n", MW_power);
 80022d0:	4b70      	ldr	r3, [pc, #448]	; (8002494 <main+0x304>)
 80022d2:	781b      	ldrb	r3, [r3, #0]
 80022d4:	4619      	mov	r1, r3
 80022d6:	4871      	ldr	r0, [pc, #452]	; (800249c <main+0x30c>)
 80022d8:	f017 fdc2 	bl	8019e60 <iprintf>
	if (HAL_LPTIM_Counter_Start_IT(&hlptim1, 1024) != HAL_OK) {
 80022dc:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80022e0:	486f      	ldr	r0, [pc, #444]	; (80024a0 <main+0x310>)
 80022e2:	f007 f919 	bl	8009518 <HAL_LPTIM_Counter_Start_IT>
 80022e6:	4603      	mov	r3, r0
 80022e8:	2b00      	cmp	r3, #0
 80022ea:	d004      	beq.n	80022f6 <main+0x166>
		printf("Failed to start slow flashing LED!\r\n");
 80022ec:	486d      	ldr	r0, [pc, #436]	; (80024a4 <main+0x314>)
 80022ee:	f017 fe1d 	bl	8019f2c <puts>
		Error_Handler();
 80022f2:	f000 ffcf 	bl	8003294 <Error_Handler>
	if (HAL_DAC_Start(&hdac1, DAC_CHANNEL_1) != HAL_OK) {
 80022f6:	2100      	movs	r1, #0
 80022f8:	486b      	ldr	r0, [pc, #428]	; (80024a8 <main+0x318>)
 80022fa:	f003 fe83 	bl	8006004 <HAL_DAC_Start>
 80022fe:	4603      	mov	r3, r0
 8002300:	2b00      	cmp	r3, #0
 8002302:	d004      	beq.n	800230e <main+0x17e>
		printf("Failure to initialise DAC channel 1 \r\n");
 8002304:	4869      	ldr	r0, [pc, #420]	; (80024ac <main+0x31c>)
 8002306:	f017 fe11 	bl	8019f2c <puts>
		Error_Handler();
 800230a:	f000 ffc3 	bl	8003294 <Error_Handler>
	if (HAL_DAC_Start(&hdac1, DAC_CHANNEL_2) != HAL_OK) {
 800230e:	2110      	movs	r1, #16
 8002310:	4865      	ldr	r0, [pc, #404]	; (80024a8 <main+0x318>)
 8002312:	f003 fe77 	bl	8006004 <HAL_DAC_Start>
 8002316:	4603      	mov	r3, r0
 8002318:	2b00      	cmp	r3, #0
 800231a:	d004      	beq.n	8002326 <main+0x196>
		printf("Failure to initialise DAC channel 2 \r\n");
 800231c:	4864      	ldr	r0, [pc, #400]	; (80024b0 <main+0x320>)
 800231e:	f017 fe05 	bl	8019f2c <puts>
		Error_Handler();
 8002322:	f000 ffb7 	bl	8003294 <Error_Handler>
	printf("Setting DAC output 1 (OCXO control) to 1.00V \r\n");
 8002326:	4863      	ldr	r0, [pc, #396]	; (80024b4 <main+0x324>)
 8002328:	f017 fe00 	bl	8019f2c <puts>
	if(HAL_DAC_SetValue(&hdac1, DAC_CHANNEL_1, DAC_ALIGN_12B_R, 1241) != HAL_OK){
 800232c:	f240 43d9 	movw	r3, #1241	; 0x4d9
 8002330:	2200      	movs	r2, #0
 8002332:	2100      	movs	r1, #0
 8002334:	485c      	ldr	r0, [pc, #368]	; (80024a8 <main+0x318>)
 8002336:	f003 feb7 	bl	80060a8 <HAL_DAC_SetValue>
 800233a:	4603      	mov	r3, r0
 800233c:	2b00      	cmp	r3, #0
 800233e:	d004      	beq.n	800234a <main+0x1ba>
			printf("DAC setup failed for channel 1!\r\n");
 8002340:	485d      	ldr	r0, [pc, #372]	; (80024b8 <main+0x328>)
 8002342:	f017 fdf3 	bl	8019f2c <puts>
		Error_Handler();
 8002346:	f000 ffa5 	bl	8003294 <Error_Handler>
	printf("Setting DAC output 2 (laser control) to 0.5V \r\n");
 800234a:	485c      	ldr	r0, [pc, #368]	; (80024bc <main+0x32c>)
 800234c:	f017 fdee 	bl	8019f2c <puts>
	if(HAL_DAC_SetValue(&hdac1, DAC_CHANNEL_2, DAC_ALIGN_12B_R, 720) != HAL_OK){
 8002350:	f44f 7334 	mov.w	r3, #720	; 0x2d0
 8002354:	2200      	movs	r2, #0
 8002356:	2110      	movs	r1, #16
 8002358:	4853      	ldr	r0, [pc, #332]	; (80024a8 <main+0x318>)
 800235a:	f003 fea5 	bl	80060a8 <HAL_DAC_SetValue>
 800235e:	4603      	mov	r3, r0
 8002360:	2b00      	cmp	r3, #0
 8002362:	d004      	beq.n	800236e <main+0x1de>
			printf("DAC setup failed for channel 2!\r\n");
 8002364:	4856      	ldr	r0, [pc, #344]	; (80024c0 <main+0x330>)
 8002366:	f017 fde1 	bl	8019f2c <puts>
		Error_Handler();
 800236a:	f000 ff93 	bl	8003294 <Error_Handler>
	if(HAL_ADCEx_Calibration_Start(&hadc3, ADC_CALIB_OFFSET, ADC_SINGLE_ENDED) != HAL_OK){
 800236e:	f240 72ff 	movw	r2, #2047	; 0x7ff
 8002372:	2100      	movs	r1, #0
 8002374:	4853      	ldr	r0, [pc, #332]	; (80024c4 <main+0x334>)
 8002376:	f003 fc01 	bl	8005b7c <HAL_ADCEx_Calibration_Start>
 800237a:	4603      	mov	r3, r0
 800237c:	2b00      	cmp	r3, #0
 800237e:	d004      	beq.n	800238a <main+0x1fa>
		printf("ADC calibration failure \r\n");
 8002380:	4851      	ldr	r0, [pc, #324]	; (80024c8 <main+0x338>)
 8002382:	f017 fdd3 	bl	8019f2c <puts>
		Error_Handler();
 8002386:	f000 ff85 	bl	8003294 <Error_Handler>
	if(HAL_ADC_Start_IT(&hadc3) != HAL_OK){
 800238a:	484e      	ldr	r0, [pc, #312]	; (80024c4 <main+0x334>)
 800238c:	f002 fae4 	bl	8004958 <HAL_ADC_Start_IT>
 8002390:	4603      	mov	r3, r0
 8002392:	2b00      	cmp	r3, #0
 8002394:	d004      	beq.n	80023a0 <main+0x210>
		printf("Failed to start ADC with interrupt capability \r\n");
 8002396:	484d      	ldr	r0, [pc, #308]	; (80024cc <main+0x33c>)
 8002398:	f017 fdc8 	bl	8019f2c <puts>
	                Error_Handler();
 800239c:	f000 ff7a 	bl	8003294 <Error_Handler>
	printf("ADC calibrated successfully and interrupt callback enabled \r\n");
 80023a0:	484b      	ldr	r0, [pc, #300]	; (80024d0 <main+0x340>)
 80023a2:	f017 fdc3 	bl	8019f2c <puts>
	measure_POP_cycle_time();
 80023a6:	f019 fcfb 	bl	801bda0 <__measure_POP_cycle_time_veneer>
	calc_fixed_time_MW_sweep(HYPERFINE + MW_DELTA, 10000, 50, ADD_SCOPE_SYNC_TIME); //10kHz sweep, 50s
 80023aa:	ed9f 6b2b 	vldr	d6, [pc, #172]	; 8002458 <main+0x2c8>
 80023ae:	ed9f 7b2c 	vldr	d7, [pc, #176]	; 8002460 <main+0x2d0>
 80023b2:	ee36 7b07 	vadd.f64	d7, d6, d7
 80023b6:	2000      	movs	r0, #0
 80023b8:	ed9f 2b2b 	vldr	d2, [pc, #172]	; 8002468 <main+0x2d8>
 80023bc:	ed9f 1b2c 	vldr	d1, [pc, #176]	; 8002470 <main+0x2e0>
 80023c0:	eeb0 0b47 	vmov.f64	d0, d7
 80023c4:	f019 fcf8 	bl	801bdb8 <__calc_fixed_time_MW_sweep_veneer>
	printf("Entering main while loop\r\n");
 80023c8:	4842      	ldr	r0, [pc, #264]	; (80024d4 <main+0x344>)
 80023ca:	f017 fdaf 	bl	8019f2c <puts>
		blue_button_status = HAL_GPIO_ReadPin(BLUE_BUTTON_GPIO_Port, BLUE_BUTTON_Pin);
 80023ce:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80023d2:	4841      	ldr	r0, [pc, #260]	; (80024d8 <main+0x348>)
 80023d4:	f005 fc7c 	bl	8007cd0 <HAL_GPIO_ReadPin>
 80023d8:	4603      	mov	r3, r0
 80023da:	2b00      	cmp	r3, #0
 80023dc:	bf14      	ite	ne
 80023de:	2301      	movne	r3, #1
 80023e0:	2300      	moveq	r3, #0
 80023e2:	b2da      	uxtb	r2, r3
 80023e4:	4b3d      	ldr	r3, [pc, #244]	; (80024dc <main+0x34c>)
 80023e6:	701a      	strb	r2, [r3, #0]
		if (blue_button_status) {// If blue button is pressed
 80023e8:	4b3c      	ldr	r3, [pc, #240]	; (80024dc <main+0x34c>)
 80023ea:	781b      	ldrb	r3, [r3, #0]
 80023ec:	b2db      	uxtb	r3, r3
 80023ee:	2b00      	cmp	r3, #0
 80023f0:	d02d      	beq.n	800244e <main+0x2be>
			printf("Blue button pressed....\r\n");
 80023f2:	483b      	ldr	r0, [pc, #236]	; (80024e0 <main+0x350>)
 80023f4:	f017 fd9a 	bl	8019f2c <puts>
			printf("Setting DAC output 2 (laser control) to 1.5V \r\n");
 80023f8:	483a      	ldr	r0, [pc, #232]	; (80024e4 <main+0x354>)
 80023fa:	f017 fd97 	bl	8019f2c <puts>
			if(HAL_DAC_SetValue(&hdac1, DAC_CHANNEL_2, DAC_ALIGN_12B_R, 1862) != HAL_OK){
 80023fe:	f240 7346 	movw	r3, #1862	; 0x746
 8002402:	2200      	movs	r2, #0
 8002404:	2110      	movs	r1, #16
 8002406:	4828      	ldr	r0, [pc, #160]	; (80024a8 <main+0x318>)
 8002408:	f003 fe4e 	bl	80060a8 <HAL_DAC_SetValue>
 800240c:	4603      	mov	r3, r0
 800240e:	2b00      	cmp	r3, #0
 8002410:	d018      	beq.n	8002444 <main+0x2b4>
					printf("DAC setup failed for channel 2!\r\n");
 8002412:	482b      	ldr	r0, [pc, #172]	; (80024c0 <main+0x330>)
 8002414:	f017 fd8a 	bl	8019f2c <puts>
				Error_Handler();
 8002418:	f000 ff3c 	bl	8003294 <Error_Handler>
			while(blue_button_status) {//remain here polling button until it is released
 800241c:	e012      	b.n	8002444 <main+0x2b4>
				timer_delay(SLOW_TIMER, 100); //1ms delay
 800241e:	4b32      	ldr	r3, [pc, #200]	; (80024e8 <main+0x358>)
 8002420:	681b      	ldr	r3, [r3, #0]
 8002422:	2164      	movs	r1, #100	; 0x64
 8002424:	4618      	mov	r0, r3
 8002426:	f019 fcbf 	bl	801bda8 <__timer_delay_veneer>
				blue_button_status = HAL_GPIO_ReadPin(BLUE_BUTTON_GPIO_Port, BLUE_BUTTON_Pin);
 800242a:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800242e:	482a      	ldr	r0, [pc, #168]	; (80024d8 <main+0x348>)
 8002430:	f005 fc4e 	bl	8007cd0 <HAL_GPIO_ReadPin>
 8002434:	4603      	mov	r3, r0
 8002436:	2b00      	cmp	r3, #0
 8002438:	bf14      	ite	ne
 800243a:	2301      	movne	r3, #1
 800243c:	2300      	moveq	r3, #0
 800243e:	b2da      	uxtb	r2, r3
 8002440:	4b26      	ldr	r3, [pc, #152]	; (80024dc <main+0x34c>)
 8002442:	701a      	strb	r2, [r3, #0]
			while(blue_button_status) {//remain here polling button until it is released
 8002444:	4b25      	ldr	r3, [pc, #148]	; (80024dc <main+0x34c>)
 8002446:	781b      	ldrb	r3, [r3, #0]
 8002448:	b2db      	uxtb	r3, r3
 800244a:	2b00      	cmp	r3, #0
 800244c:	d1e7      	bne.n	800241e <main+0x28e>
		MW_update();
 800244e:	f019 fc9f 	bl	801bd90 <__MW_update_veneer>
		laser_update();
 8002452:	f019 fcad 	bl	801bdb0 <__laser_update_veneer>
		blue_button_status = HAL_GPIO_ReadPin(BLUE_BUTTON_GPIO_Port, BLUE_BUTTON_Pin);
 8002456:	e7ba      	b.n	80023ce <main+0x23e>
 8002458:	6d600000 	.word	0x6d600000
 800245c:	41e69e35 	.word	0x41e69e35
 8002460:	00000000 	.word	0x00000000
 8002464:	408f4000 	.word	0x408f4000
 8002468:	00000000 	.word	0x00000000
 800246c:	40490000 	.word	0x40490000
 8002470:	00000000 	.word	0x00000000
 8002474:	40c38800 	.word	0x40c38800
 8002478:	00001ae0 	.word	0x00001ae0
 800247c:	00000000 	.word	0x00000000
 8002480:	08000298 	.word	0x08000298
 8002484:	e000ed00 	.word	0xe000ed00
 8002488:	0801bffc 	.word	0x0801bffc
 800248c:	0801c000 	.word	0x0801c000
 8002490:	0801c01c 	.word	0x0801c01c
 8002494:	20000002 	.word	0x20000002
 8002498:	0801c048 	.word	0x0801c048
 800249c:	0801c06c 	.word	0x0801c06c
 80024a0:	200003b0 	.word	0x200003b0
 80024a4:	0801c090 	.word	0x0801c090
 80024a8:	200002c0 	.word	0x200002c0
 80024ac:	0801c0b4 	.word	0x0801c0b4
 80024b0:	0801c0dc 	.word	0x0801c0dc
 80024b4:	0801c104 	.word	0x0801c104
 80024b8:	0801c134 	.word	0x0801c134
 80024bc:	0801c158 	.word	0x0801c158
 80024c0:	0801c188 	.word	0x0801c188
 80024c4:	2000025c 	.word	0x2000025c
 80024c8:	0801c1ac 	.word	0x0801c1ac
 80024cc:	0801c1c8 	.word	0x0801c1c8
 80024d0:	0801c1f8 	.word	0x0801c1f8
 80024d4:	0801c238 	.word	0x0801c238
 80024d8:	58020800 	.word	0x58020800
 80024dc:	200005f8 	.word	0x200005f8
 80024e0:	0801c254 	.word	0x0801c254
 80024e4:	0801c270 	.word	0x0801c270
 80024e8:	20000018 	.word	0x20000018

080024ec <SystemClock_Config>:
{
 80024ec:	b580      	push	{r7, lr}
 80024ee:	b0a4      	sub	sp, #144	; 0x90
 80024f0:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80024f2:	f107 0344 	add.w	r3, r7, #68	; 0x44
 80024f6:	224c      	movs	r2, #76	; 0x4c
 80024f8:	2100      	movs	r1, #0
 80024fa:	4618      	mov	r0, r3
 80024fc:	f017 fe06 	bl	801a10c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8002500:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002504:	2220      	movs	r2, #32
 8002506:	2100      	movs	r1, #0
 8002508:	4618      	mov	r0, r3
 800250a:	f017 fdff 	bl	801a10c <memset>
  RCC_CRSInitTypeDef RCC_CRSInitStruct = {0};
 800250e:	f107 030c 	add.w	r3, r7, #12
 8002512:	2200      	movs	r2, #0
 8002514:	601a      	str	r2, [r3, #0]
 8002516:	605a      	str	r2, [r3, #4]
 8002518:	609a      	str	r2, [r3, #8]
 800251a:	60da      	str	r2, [r3, #12]
 800251c:	611a      	str	r2, [r3, #16]
 800251e:	615a      	str	r2, [r3, #20]
  HAL_PWREx_ConfigSupply(PWR_LDO_SUPPLY);
 8002520:	2002      	movs	r0, #2
 8002522:	f007 fb57 	bl	8009bd4 <HAL_PWREx_ConfigSupply>
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8002526:	2300      	movs	r3, #0
 8002528:	60bb      	str	r3, [r7, #8]
 800252a:	4b4c      	ldr	r3, [pc, #304]	; (800265c <SystemClock_Config+0x170>)
 800252c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800252e:	4a4b      	ldr	r2, [pc, #300]	; (800265c <SystemClock_Config+0x170>)
 8002530:	f023 0301 	bic.w	r3, r3, #1
 8002534:	62d3      	str	r3, [r2, #44]	; 0x2c
 8002536:	4b49      	ldr	r3, [pc, #292]	; (800265c <SystemClock_Config+0x170>)
 8002538:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800253a:	f003 0301 	and.w	r3, r3, #1
 800253e:	60bb      	str	r3, [r7, #8]
 8002540:	4b47      	ldr	r3, [pc, #284]	; (8002660 <SystemClock_Config+0x174>)
 8002542:	699b      	ldr	r3, [r3, #24]
 8002544:	4a46      	ldr	r2, [pc, #280]	; (8002660 <SystemClock_Config+0x174>)
 8002546:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800254a:	6193      	str	r3, [r2, #24]
 800254c:	4b44      	ldr	r3, [pc, #272]	; (8002660 <SystemClock_Config+0x174>)
 800254e:	699b      	ldr	r3, [r3, #24]
 8002550:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8002554:	60bb      	str	r3, [r7, #8]
 8002556:	68bb      	ldr	r3, [r7, #8]
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 8002558:	bf00      	nop
 800255a:	4b41      	ldr	r3, [pc, #260]	; (8002660 <SystemClock_Config+0x174>)
 800255c:	699b      	ldr	r3, [r3, #24]
 800255e:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8002562:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002566:	d1f8      	bne.n	800255a <SystemClock_Config+0x6e>
  HAL_PWR_EnableBkUpAccess();
 8002568:	f007 fb24 	bl	8009bb4 <HAL_PWR_EnableBkUpAccess>
  __HAL_RCC_LSEDRIVE_CONFIG(RCC_LSEDRIVE_LOW);
 800256c:	f001 fe00 	bl	8004170 <HAL_GetREVID>
 8002570:	4b3c      	ldr	r3, [pc, #240]	; (8002664 <SystemClock_Config+0x178>)
 8002572:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002574:	4a3b      	ldr	r2, [pc, #236]	; (8002664 <SystemClock_Config+0x178>)
 8002576:	f023 0318 	bic.w	r3, r3, #24
 800257a:	6713      	str	r3, [r2, #112]	; 0x70
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI48|RCC_OSCILLATORTYPE_HSE
 800257c:	2325      	movs	r3, #37	; 0x25
 800257e:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 8002580:	f44f 23a0 	mov.w	r3, #327680	; 0x50000
 8002584:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.LSEState = RCC_LSE_ON;
 8002586:	2301      	movs	r3, #1
 8002588:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.HSI48State = RCC_HSI48_ON;
 800258a:	2301      	movs	r3, #1
 800258c:	65fb      	str	r3, [r7, #92]	; 0x5c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800258e:	2302      	movs	r3, #2
 8002590:	66bb      	str	r3, [r7, #104]	; 0x68
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8002592:	2302      	movs	r3, #2
 8002594:	66fb      	str	r3, [r7, #108]	; 0x6c
  RCC_OscInitStruct.PLL.PLLM = 1;
 8002596:	2301      	movs	r3, #1
 8002598:	673b      	str	r3, [r7, #112]	; 0x70
  RCC_OscInitStruct.PLL.PLLN = 80;
 800259a:	2350      	movs	r3, #80	; 0x50
 800259c:	677b      	str	r3, [r7, #116]	; 0x74
  RCC_OscInitStruct.PLL.PLLP = 2;
 800259e:	2302      	movs	r3, #2
 80025a0:	67bb      	str	r3, [r7, #120]	; 0x78
  RCC_OscInitStruct.PLL.PLLQ = 4;
 80025a2:	2304      	movs	r3, #4
 80025a4:	67fb      	str	r3, [r7, #124]	; 0x7c
  RCC_OscInitStruct.PLL.PLLR = 2;
 80025a6:	2302      	movs	r3, #2
 80025a8:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
  RCC_OscInitStruct.PLL.PLLRGE = RCC_PLL1VCIRANGE_3;
 80025ac:	230c      	movs	r3, #12
 80025ae:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  RCC_OscInitStruct.PLL.PLLVCOSEL = RCC_PLL1VCOWIDE;
 80025b2:	2300      	movs	r3, #0
 80025b4:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  RCC_OscInitStruct.PLL.PLLFRACN = 0;
 80025b8:	2300      	movs	r3, #0
 80025ba:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80025be:	f107 0344 	add.w	r3, r7, #68	; 0x44
 80025c2:	4618      	mov	r0, r3
 80025c4:	f007 fb40 	bl	8009c48 <HAL_RCC_OscConfig>
 80025c8:	4603      	mov	r3, r0
 80025ca:	2b00      	cmp	r3, #0
 80025cc:	d001      	beq.n	80025d2 <SystemClock_Config+0xe6>
    Error_Handler();
 80025ce:	f000 fe61 	bl	8003294 <Error_Handler>
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80025d2:	233f      	movs	r3, #63	; 0x3f
 80025d4:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80025d6:	2303      	movs	r3, #3
 80025d8:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV1;
 80025da:	2300      	movs	r3, #0
 80025dc:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV4;
 80025de:	2309      	movs	r3, #9
 80025e0:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_ClkInitStruct.APB3CLKDivider = RCC_APB3_DIV1;
 80025e2:	2300      	movs	r3, #0
 80025e4:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV1;
 80025e6:	2300      	movs	r3, #0
 80025e8:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_ClkInitStruct.APB2CLKDivider = RCC_APB2_DIV16;
 80025ea:	f44f 63e0 	mov.w	r3, #1792	; 0x700
 80025ee:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_ClkInitStruct.APB4CLKDivider = RCC_APB4_DIV1;
 80025f0:	2300      	movs	r3, #0
 80025f2:	643b      	str	r3, [r7, #64]	; 0x40
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 80025f4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80025f8:	2101      	movs	r1, #1
 80025fa:	4618      	mov	r0, r3
 80025fc:	f007 ff7e 	bl	800a4fc <HAL_RCC_ClockConfig>
 8002600:	4603      	mov	r3, r0
 8002602:	2b00      	cmp	r3, #0
 8002604:	d001      	beq.n	800260a <SystemClock_Config+0x11e>
    Error_Handler();
 8002606:	f000 fe45 	bl	8003294 <Error_Handler>
  HAL_RCC_EnableCSS();
 800260a:	f008 f92d 	bl	800a868 <HAL_RCC_EnableCSS>
  __HAL_RCC_CRS_CLK_ENABLE();
 800260e:	4b15      	ldr	r3, [pc, #84]	; (8002664 <SystemClock_Config+0x178>)
 8002610:	f8d3 30ec 	ldr.w	r3, [r3, #236]	; 0xec
 8002614:	4a13      	ldr	r2, [pc, #76]	; (8002664 <SystemClock_Config+0x178>)
 8002616:	f043 0302 	orr.w	r3, r3, #2
 800261a:	f8c2 30ec 	str.w	r3, [r2, #236]	; 0xec
 800261e:	4b11      	ldr	r3, [pc, #68]	; (8002664 <SystemClock_Config+0x178>)
 8002620:	f8d3 30ec 	ldr.w	r3, [r3, #236]	; 0xec
 8002624:	f003 0302 	and.w	r3, r3, #2
 8002628:	607b      	str	r3, [r7, #4]
 800262a:	687b      	ldr	r3, [r7, #4]
  RCC_CRSInitStruct.Prescaler = RCC_CRS_SYNC_DIV1;
 800262c:	2300      	movs	r3, #0
 800262e:	60fb      	str	r3, [r7, #12]
  RCC_CRSInitStruct.Source = RCC_CRS_SYNC_SOURCE_LSE;
 8002630:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8002634:	613b      	str	r3, [r7, #16]
  RCC_CRSInitStruct.Polarity = RCC_CRS_SYNC_POLARITY_RISING;
 8002636:	2300      	movs	r3, #0
 8002638:	617b      	str	r3, [r7, #20]
  RCC_CRSInitStruct.ReloadValue = __HAL_RCC_CRS_RELOADVALUE_CALCULATE(48000000,32768);
 800263a:	f240 53b7 	movw	r3, #1463	; 0x5b7
 800263e:	61bb      	str	r3, [r7, #24]
  RCC_CRSInitStruct.ErrorLimitValue = 34;
 8002640:	2322      	movs	r3, #34	; 0x22
 8002642:	61fb      	str	r3, [r7, #28]
  RCC_CRSInitStruct.HSI48CalibrationValue = 32;
 8002644:	2320      	movs	r3, #32
 8002646:	623b      	str	r3, [r7, #32]
  HAL_RCCEx_CRSConfig(&RCC_CRSInitStruct);
 8002648:	f107 030c 	add.w	r3, r7, #12
 800264c:	4618      	mov	r0, r3
 800264e:	f00a fea7 	bl	800d3a0 <HAL_RCCEx_CRSConfig>
}
 8002652:	bf00      	nop
 8002654:	3790      	adds	r7, #144	; 0x90
 8002656:	46bd      	mov	sp, r7
 8002658:	bd80      	pop	{r7, pc}
 800265a:	bf00      	nop
 800265c:	58000400 	.word	0x58000400
 8002660:	58024800 	.word	0x58024800
 8002664:	58024400 	.word	0x58024400

08002668 <MX_ADC3_Init>:
{
 8002668:	b580      	push	{r7, lr}
 800266a:	b088      	sub	sp, #32
 800266c:	af00      	add	r7, sp, #0
  ADC_ChannelConfTypeDef sConfig = {0};
 800266e:	1d3b      	adds	r3, r7, #4
 8002670:	2200      	movs	r2, #0
 8002672:	601a      	str	r2, [r3, #0]
 8002674:	605a      	str	r2, [r3, #4]
 8002676:	609a      	str	r2, [r3, #8]
 8002678:	60da      	str	r2, [r3, #12]
 800267a:	611a      	str	r2, [r3, #16]
 800267c:	615a      	str	r2, [r3, #20]
 800267e:	619a      	str	r2, [r3, #24]
  hadc3.Instance = ADC3;
 8002680:	4b28      	ldr	r3, [pc, #160]	; (8002724 <MX_ADC3_Init+0xbc>)
 8002682:	4a29      	ldr	r2, [pc, #164]	; (8002728 <MX_ADC3_Init+0xc0>)
 8002684:	601a      	str	r2, [r3, #0]
  hadc3.Init.Resolution = ADC_RESOLUTION_16B;
 8002686:	4b27      	ldr	r3, [pc, #156]	; (8002724 <MX_ADC3_Init+0xbc>)
 8002688:	2200      	movs	r2, #0
 800268a:	609a      	str	r2, [r3, #8]
  hadc3.Init.ScanConvMode = ADC_SCAN_DISABLE;
 800268c:	4b25      	ldr	r3, [pc, #148]	; (8002724 <MX_ADC3_Init+0xbc>)
 800268e:	2200      	movs	r2, #0
 8002690:	60da      	str	r2, [r3, #12]
  hadc3.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8002692:	4b24      	ldr	r3, [pc, #144]	; (8002724 <MX_ADC3_Init+0xbc>)
 8002694:	2204      	movs	r2, #4
 8002696:	611a      	str	r2, [r3, #16]
  hadc3.Init.LowPowerAutoWait = DISABLE;
 8002698:	4b22      	ldr	r3, [pc, #136]	; (8002724 <MX_ADC3_Init+0xbc>)
 800269a:	2200      	movs	r2, #0
 800269c:	751a      	strb	r2, [r3, #20]
  hadc3.Init.ContinuousConvMode = DISABLE;
 800269e:	4b21      	ldr	r3, [pc, #132]	; (8002724 <MX_ADC3_Init+0xbc>)
 80026a0:	2200      	movs	r2, #0
 80026a2:	755a      	strb	r2, [r3, #21]
  hadc3.Init.NbrOfConversion = 1;
 80026a4:	4b1f      	ldr	r3, [pc, #124]	; (8002724 <MX_ADC3_Init+0xbc>)
 80026a6:	2201      	movs	r2, #1
 80026a8:	619a      	str	r2, [r3, #24]
  hadc3.Init.DiscontinuousConvMode = DISABLE;
 80026aa:	4b1e      	ldr	r3, [pc, #120]	; (8002724 <MX_ADC3_Init+0xbc>)
 80026ac:	2200      	movs	r2, #0
 80026ae:	771a      	strb	r2, [r3, #28]
  hadc3.Init.ExternalTrigConv = ADC_EXTERNALTRIG_EXT_IT11;
 80026b0:	4b1c      	ldr	r3, [pc, #112]	; (8002724 <MX_ADC3_Init+0xbc>)
 80026b2:	f44f 6298 	mov.w	r2, #1216	; 0x4c0
 80026b6:	625a      	str	r2, [r3, #36]	; 0x24
  hadc3.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_RISING;
 80026b8:	4b1a      	ldr	r3, [pc, #104]	; (8002724 <MX_ADC3_Init+0xbc>)
 80026ba:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80026be:	629a      	str	r2, [r3, #40]	; 0x28
  hadc3.Init.ConversionDataManagement = ADC_CONVERSIONDATA_DR;
 80026c0:	4b18      	ldr	r3, [pc, #96]	; (8002724 <MX_ADC3_Init+0xbc>)
 80026c2:	2200      	movs	r2, #0
 80026c4:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc3.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 80026c6:	4b17      	ldr	r3, [pc, #92]	; (8002724 <MX_ADC3_Init+0xbc>)
 80026c8:	2200      	movs	r2, #0
 80026ca:	631a      	str	r2, [r3, #48]	; 0x30
  hadc3.Init.LeftBitShift = ADC_LEFTBITSHIFT_NONE;
 80026cc:	4b15      	ldr	r3, [pc, #84]	; (8002724 <MX_ADC3_Init+0xbc>)
 80026ce:	2200      	movs	r2, #0
 80026d0:	635a      	str	r2, [r3, #52]	; 0x34
  hadc3.Init.OversamplingMode = DISABLE;
 80026d2:	4b14      	ldr	r3, [pc, #80]	; (8002724 <MX_ADC3_Init+0xbc>)
 80026d4:	2200      	movs	r2, #0
 80026d6:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  if (HAL_ADC_Init(&hadc3) != HAL_OK)
 80026da:	4812      	ldr	r0, [pc, #72]	; (8002724 <MX_ADC3_Init+0xbc>)
 80026dc:	f001 ff9a 	bl	8004614 <HAL_ADC_Init>
 80026e0:	4603      	mov	r3, r0
 80026e2:	2b00      	cmp	r3, #0
 80026e4:	d001      	beq.n	80026ea <MX_ADC3_Init+0x82>
    Error_Handler();
 80026e6:	f000 fdd5 	bl	8003294 <Error_Handler>
  sConfig.Channel = ADC_CHANNEL_0;
 80026ea:	2301      	movs	r3, #1
 80026ec:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 80026ee:	2306      	movs	r3, #6
 80026f0:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
 80026f2:	2300      	movs	r3, #0
 80026f4:	60fb      	str	r3, [r7, #12]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 80026f6:	f240 73ff 	movw	r3, #2047	; 0x7ff
 80026fa:	613b      	str	r3, [r7, #16]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 80026fc:	2304      	movs	r3, #4
 80026fe:	617b      	str	r3, [r7, #20]
  sConfig.Offset = 0;
 8002700:	2300      	movs	r3, #0
 8002702:	61bb      	str	r3, [r7, #24]
  sConfig.OffsetSignedSaturation = DISABLE;
 8002704:	2300      	movs	r3, #0
 8002706:	777b      	strb	r3, [r7, #29]
  if (HAL_ADC_ConfigChannel(&hadc3, &sConfig) != HAL_OK)
 8002708:	1d3b      	adds	r3, r7, #4
 800270a:	4619      	mov	r1, r3
 800270c:	4805      	ldr	r0, [pc, #20]	; (8002724 <MX_ADC3_Init+0xbc>)
 800270e:	f002 fcbd 	bl	800508c <HAL_ADC_ConfigChannel>
 8002712:	4603      	mov	r3, r0
 8002714:	2b00      	cmp	r3, #0
 8002716:	d001      	beq.n	800271c <MX_ADC3_Init+0xb4>
    Error_Handler();
 8002718:	f000 fdbc 	bl	8003294 <Error_Handler>
}
 800271c:	bf00      	nop
 800271e:	3720      	adds	r7, #32
 8002720:	46bd      	mov	sp, r7
 8002722:	bd80      	pop	{r7, pc}
 8002724:	2000025c 	.word	0x2000025c
 8002728:	58026000 	.word	0x58026000

0800272c <MX_DAC1_Init>:
{
 800272c:	b580      	push	{r7, lr}
 800272e:	b08a      	sub	sp, #40	; 0x28
 8002730:	af00      	add	r7, sp, #0
  DAC_ChannelConfTypeDef sConfig = {0};
 8002732:	1d3b      	adds	r3, r7, #4
 8002734:	2224      	movs	r2, #36	; 0x24
 8002736:	2100      	movs	r1, #0
 8002738:	4618      	mov	r0, r3
 800273a:	f017 fce7 	bl	801a10c <memset>
  hdac1.Instance = DAC1;
 800273e:	4b17      	ldr	r3, [pc, #92]	; (800279c <MX_DAC1_Init+0x70>)
 8002740:	4a17      	ldr	r2, [pc, #92]	; (80027a0 <MX_DAC1_Init+0x74>)
 8002742:	601a      	str	r2, [r3, #0]
  if (HAL_DAC_Init(&hdac1) != HAL_OK)
 8002744:	4815      	ldr	r0, [pc, #84]	; (800279c <MX_DAC1_Init+0x70>)
 8002746:	f003 fc3b 	bl	8005fc0 <HAL_DAC_Init>
 800274a:	4603      	mov	r3, r0
 800274c:	2b00      	cmp	r3, #0
 800274e:	d001      	beq.n	8002754 <MX_DAC1_Init+0x28>
    Error_Handler();
 8002750:	f000 fda0 	bl	8003294 <Error_Handler>
  sConfig.DAC_SampleAndHold = DAC_SAMPLEANDHOLD_DISABLE;
 8002754:	2300      	movs	r3, #0
 8002756:	607b      	str	r3, [r7, #4]
  sConfig.DAC_Trigger = DAC_TRIGGER_NONE;
 8002758:	2300      	movs	r3, #0
 800275a:	60bb      	str	r3, [r7, #8]
  sConfig.DAC_OutputBuffer = DAC_OUTPUTBUFFER_ENABLE;
 800275c:	2300      	movs	r3, #0
 800275e:	60fb      	str	r3, [r7, #12]
  sConfig.DAC_ConnectOnChipPeripheral = DAC_CHIPCONNECT_DISABLE;
 8002760:	2301      	movs	r3, #1
 8002762:	613b      	str	r3, [r7, #16]
  sConfig.DAC_UserTrimming = DAC_TRIMMING_FACTORY;
 8002764:	2300      	movs	r3, #0
 8002766:	617b      	str	r3, [r7, #20]
  if (HAL_DAC_ConfigChannel(&hdac1, &sConfig, DAC_CHANNEL_1) != HAL_OK)
 8002768:	1d3b      	adds	r3, r7, #4
 800276a:	2200      	movs	r2, #0
 800276c:	4619      	mov	r1, r3
 800276e:	480b      	ldr	r0, [pc, #44]	; (800279c <MX_DAC1_Init+0x70>)
 8002770:	f003 fcc0 	bl	80060f4 <HAL_DAC_ConfigChannel>
 8002774:	4603      	mov	r3, r0
 8002776:	2b00      	cmp	r3, #0
 8002778:	d001      	beq.n	800277e <MX_DAC1_Init+0x52>
    Error_Handler();
 800277a:	f000 fd8b 	bl	8003294 <Error_Handler>
  if (HAL_DAC_ConfigChannel(&hdac1, &sConfig, DAC_CHANNEL_2) != HAL_OK)
 800277e:	1d3b      	adds	r3, r7, #4
 8002780:	2210      	movs	r2, #16
 8002782:	4619      	mov	r1, r3
 8002784:	4805      	ldr	r0, [pc, #20]	; (800279c <MX_DAC1_Init+0x70>)
 8002786:	f003 fcb5 	bl	80060f4 <HAL_DAC_ConfigChannel>
 800278a:	4603      	mov	r3, r0
 800278c:	2b00      	cmp	r3, #0
 800278e:	d001      	beq.n	8002794 <MX_DAC1_Init+0x68>
    Error_Handler();
 8002790:	f000 fd80 	bl	8003294 <Error_Handler>
}
 8002794:	bf00      	nop
 8002796:	3728      	adds	r7, #40	; 0x28
 8002798:	46bd      	mov	sp, r7
 800279a:	bd80      	pop	{r7, pc}
 800279c:	200002c0 	.word	0x200002c0
 80027a0:	40007400 	.word	0x40007400

080027a4 <MX_HRTIM_Init>:
{
 80027a4:	b580      	push	{r7, lr}
 80027a6:	b0a4      	sub	sp, #144	; 0x90
 80027a8:	af00      	add	r7, sp, #0
  HRTIM_TimeBaseCfgTypeDef pTimeBaseCfg = {0};
 80027aa:	f107 0380 	add.w	r3, r7, #128	; 0x80
 80027ae:	2200      	movs	r2, #0
 80027b0:	601a      	str	r2, [r3, #0]
 80027b2:	605a      	str	r2, [r3, #4]
 80027b4:	609a      	str	r2, [r3, #8]
 80027b6:	60da      	str	r2, [r3, #12]
  HRTIM_TimerCfgTypeDef pTimerCfg = {0};
 80027b8:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80027bc:	2254      	movs	r2, #84	; 0x54
 80027be:	2100      	movs	r1, #0
 80027c0:	4618      	mov	r0, r3
 80027c2:	f017 fca3 	bl	801a10c <memset>
  HRTIM_CompareCfgTypeDef pCompareCfg = {0};
 80027c6:	f107 0320 	add.w	r3, r7, #32
 80027ca:	2200      	movs	r2, #0
 80027cc:	601a      	str	r2, [r3, #0]
 80027ce:	605a      	str	r2, [r3, #4]
 80027d0:	609a      	str	r2, [r3, #8]
  HRTIM_OutputCfgTypeDef pOutputCfg = {0};
 80027d2:	463b      	mov	r3, r7
 80027d4:	2220      	movs	r2, #32
 80027d6:	2100      	movs	r1, #0
 80027d8:	4618      	mov	r0, r3
 80027da:	f017 fc97 	bl	801a10c <memset>
  hhrtim.Instance = HRTIM1;
 80027de:	4b98      	ldr	r3, [pc, #608]	; (8002a40 <MX_HRTIM_Init+0x29c>)
 80027e0:	4a98      	ldr	r2, [pc, #608]	; (8002a44 <MX_HRTIM_Init+0x2a0>)
 80027e2:	601a      	str	r2, [r3, #0]
  hhrtim.Init.HRTIMInterruptResquests = HRTIM_IT_NONE;
 80027e4:	4b96      	ldr	r3, [pc, #600]	; (8002a40 <MX_HRTIM_Init+0x29c>)
 80027e6:	2200      	movs	r2, #0
 80027e8:	605a      	str	r2, [r3, #4]
  hhrtim.Init.SyncOptions = HRTIM_SYNCOPTION_NONE;
 80027ea:	4b95      	ldr	r3, [pc, #596]	; (8002a40 <MX_HRTIM_Init+0x29c>)
 80027ec:	2200      	movs	r2, #0
 80027ee:	609a      	str	r2, [r3, #8]
  if (HAL_HRTIM_Init(&hhrtim) != HAL_OK)
 80027f0:	4893      	ldr	r0, [pc, #588]	; (8002a40 <MX_HRTIM_Init+0x29c>)
 80027f2:	f005 fadd 	bl	8007db0 <HAL_HRTIM_Init>
 80027f6:	4603      	mov	r3, r0
 80027f8:	2b00      	cmp	r3, #0
 80027fa:	d001      	beq.n	8002800 <MX_HRTIM_Init+0x5c>
    Error_Handler();
 80027fc:	f000 fd4a 	bl	8003294 <Error_Handler>
  pTimeBaseCfg.Period = PUMP_WIDTH+(2*MICROWAVE_DELAY)+(2*MICROWAVE_WIDTH)+RAMSEY_TIME+PROBE_WIDTH+POP_CYCLE_DELAY;
 8002800:	f24c 2318 	movw	r3, #49688	; 0xc218
 8002804:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
  pTimeBaseCfg.RepetitionCounter = 0x00;
 8002808:	2300      	movs	r3, #0
 800280a:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  pTimeBaseCfg.PrescalerRatio = HRTIM_PRESCALERRATIO_DIV4;
 800280e:	2307      	movs	r3, #7
 8002810:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  pTimeBaseCfg.Mode = HRTIM_MODE_CONTINUOUS;
 8002814:	2308      	movs	r3, #8
 8002816:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
  if (HAL_HRTIM_TimeBaseConfig(&hhrtim, HRTIM_TIMERINDEX_TIMER_A, &pTimeBaseCfg) != HAL_OK)
 800281a:	f107 0380 	add.w	r3, r7, #128	; 0x80
 800281e:	461a      	mov	r2, r3
 8002820:	2100      	movs	r1, #0
 8002822:	4887      	ldr	r0, [pc, #540]	; (8002a40 <MX_HRTIM_Init+0x29c>)
 8002824:	f005 fb94 	bl	8007f50 <HAL_HRTIM_TimeBaseConfig>
 8002828:	4603      	mov	r3, r0
 800282a:	2b00      	cmp	r3, #0
 800282c:	d001      	beq.n	8002832 <MX_HRTIM_Init+0x8e>
    Error_Handler();
 800282e:	f000 fd31 	bl	8003294 <Error_Handler>
  pTimerCfg.InterruptRequests = HRTIM_TIM_IT_CMP3|HRTIM_TIM_IT_REP;
 8002832:	2314      	movs	r3, #20
 8002834:	62fb      	str	r3, [r7, #44]	; 0x2c
  pTimerCfg.DMARequests = HRTIM_TIM_DMA_NONE;
 8002836:	2300      	movs	r3, #0
 8002838:	633b      	str	r3, [r7, #48]	; 0x30
  pTimerCfg.DMASrcAddress = 0x0000;
 800283a:	2300      	movs	r3, #0
 800283c:	637b      	str	r3, [r7, #52]	; 0x34
  pTimerCfg.DMADstAddress = 0x0000;
 800283e:	2300      	movs	r3, #0
 8002840:	63bb      	str	r3, [r7, #56]	; 0x38
  pTimerCfg.DMASize = 0x1;
 8002842:	2301      	movs	r3, #1
 8002844:	63fb      	str	r3, [r7, #60]	; 0x3c
  pTimerCfg.HalfModeEnable = HRTIM_HALFMODE_DISABLED;
 8002846:	2300      	movs	r3, #0
 8002848:	643b      	str	r3, [r7, #64]	; 0x40
  pTimerCfg.StartOnSync = HRTIM_SYNCSTART_DISABLED;
 800284a:	2300      	movs	r3, #0
 800284c:	647b      	str	r3, [r7, #68]	; 0x44
  pTimerCfg.ResetOnSync = HRTIM_SYNCRESET_DISABLED;
 800284e:	2300      	movs	r3, #0
 8002850:	64bb      	str	r3, [r7, #72]	; 0x48
  pTimerCfg.DACSynchro = HRTIM_DACSYNC_NONE;
 8002852:	2300      	movs	r3, #0
 8002854:	64fb      	str	r3, [r7, #76]	; 0x4c
  pTimerCfg.PreloadEnable = HRTIM_PRELOAD_DISABLED;
 8002856:	2300      	movs	r3, #0
 8002858:	653b      	str	r3, [r7, #80]	; 0x50
  pTimerCfg.UpdateGating = HRTIM_UPDATEGATING_INDEPENDENT;
 800285a:	2300      	movs	r3, #0
 800285c:	657b      	str	r3, [r7, #84]	; 0x54
  pTimerCfg.BurstMode = HRTIM_TIMERBURSTMODE_MAINTAINCLOCK;
 800285e:	2300      	movs	r3, #0
 8002860:	65bb      	str	r3, [r7, #88]	; 0x58
  pTimerCfg.RepetitionUpdate = HRTIM_UPDATEONREPETITION_DISABLED;
 8002862:	2300      	movs	r3, #0
 8002864:	65fb      	str	r3, [r7, #92]	; 0x5c
  pTimerCfg.PushPull = HRTIM_TIMPUSHPULLMODE_DISABLED;
 8002866:	2300      	movs	r3, #0
 8002868:	663b      	str	r3, [r7, #96]	; 0x60
  pTimerCfg.FaultEnable = HRTIM_TIMFAULTENABLE_NONE;
 800286a:	2300      	movs	r3, #0
 800286c:	667b      	str	r3, [r7, #100]	; 0x64
  pTimerCfg.FaultLock = HRTIM_TIMFAULTLOCK_READWRITE;
 800286e:	2300      	movs	r3, #0
 8002870:	66bb      	str	r3, [r7, #104]	; 0x68
  pTimerCfg.DeadTimeInsertion = HRTIM_TIMDEADTIMEINSERTION_DISABLED;
 8002872:	2300      	movs	r3, #0
 8002874:	66fb      	str	r3, [r7, #108]	; 0x6c
  pTimerCfg.DelayedProtectionMode = HRTIM_TIMER_A_B_C_DELAYEDPROTECTION_DISABLED;
 8002876:	2300      	movs	r3, #0
 8002878:	673b      	str	r3, [r7, #112]	; 0x70
  pTimerCfg.UpdateTrigger = HRTIM_TIMUPDATETRIGGER_NONE;
 800287a:	2300      	movs	r3, #0
 800287c:	677b      	str	r3, [r7, #116]	; 0x74
  pTimerCfg.ResetTrigger = HRTIM_TIMRESETTRIGGER_NONE;
 800287e:	2300      	movs	r3, #0
 8002880:	67bb      	str	r3, [r7, #120]	; 0x78
  pTimerCfg.ResetUpdate = HRTIM_TIMUPDATEONRESET_DISABLED;
 8002882:	2300      	movs	r3, #0
 8002884:	67fb      	str	r3, [r7, #124]	; 0x7c
  if (HAL_HRTIM_WaveformTimerConfig(&hhrtim, HRTIM_TIMERINDEX_TIMER_A, &pTimerCfg) != HAL_OK)
 8002886:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800288a:	461a      	mov	r2, r3
 800288c:	2100      	movs	r1, #0
 800288e:	486c      	ldr	r0, [pc, #432]	; (8002a40 <MX_HRTIM_Init+0x29c>)
 8002890:	f005 fb86 	bl	8007fa0 <HAL_HRTIM_WaveformTimerConfig>
 8002894:	4603      	mov	r3, r0
 8002896:	2b00      	cmp	r3, #0
 8002898:	d001      	beq.n	800289e <MX_HRTIM_Init+0xfa>
    Error_Handler();
 800289a:	f000 fcfb 	bl	8003294 <Error_Handler>
  pTimerCfg.InterruptRequests = HRTIM_TIM_IT_CMP2|HRTIM_TIM_IT_CMP3;
 800289e:	2306      	movs	r3, #6
 80028a0:	62fb      	str	r3, [r7, #44]	; 0x2c
  pTimerCfg.DelayedProtectionMode = HRTIM_TIMER_D_E_DELAYEDPROTECTION_DISABLED;
 80028a2:	2300      	movs	r3, #0
 80028a4:	673b      	str	r3, [r7, #112]	; 0x70
  if (HAL_HRTIM_WaveformTimerConfig(&hhrtim, HRTIM_TIMERINDEX_TIMER_E, &pTimerCfg) != HAL_OK)
 80028a6:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80028aa:	461a      	mov	r2, r3
 80028ac:	2104      	movs	r1, #4
 80028ae:	4864      	ldr	r0, [pc, #400]	; (8002a40 <MX_HRTIM_Init+0x29c>)
 80028b0:	f005 fb76 	bl	8007fa0 <HAL_HRTIM_WaveformTimerConfig>
 80028b4:	4603      	mov	r3, r0
 80028b6:	2b00      	cmp	r3, #0
 80028b8:	d001      	beq.n	80028be <MX_HRTIM_Init+0x11a>
    Error_Handler();
 80028ba:	f000 fceb 	bl	8003294 <Error_Handler>
  pCompareCfg.CompareValue = PUMP_WIDTH;
 80028be:	f240 631b 	movw	r3, #1563	; 0x61b
 80028c2:	623b      	str	r3, [r7, #32]
  if (HAL_HRTIM_WaveformCompareConfig(&hhrtim, HRTIM_TIMERINDEX_TIMER_A, HRTIM_COMPAREUNIT_1, &pCompareCfg) != HAL_OK)
 80028c4:	f107 0320 	add.w	r3, r7, #32
 80028c8:	2201      	movs	r2, #1
 80028ca:	2100      	movs	r1, #0
 80028cc:	485c      	ldr	r0, [pc, #368]	; (8002a40 <MX_HRTIM_Init+0x29c>)
 80028ce:	f005 fbd9 	bl	8008084 <HAL_HRTIM_WaveformCompareConfig>
 80028d2:	4603      	mov	r3, r0
 80028d4:	2b00      	cmp	r3, #0
 80028d6:	d001      	beq.n	80028dc <MX_HRTIM_Init+0x138>
    Error_Handler();
 80028d8:	f000 fcdc 	bl	8003294 <Error_Handler>
  pCompareCfg.CompareValue = PUMP_WIDTH+(2*MICROWAVE_DELAY)+(2*MICROWAVE_WIDTH)+RAMSEY_TIME;
 80028dc:	f244 5395 	movw	r3, #17813	; 0x4595
 80028e0:	623b      	str	r3, [r7, #32]
  pCompareCfg.AutoDelayedMode = HRTIM_AUTODELAYEDMODE_REGULAR;
 80028e2:	2300      	movs	r3, #0
 80028e4:	627b      	str	r3, [r7, #36]	; 0x24
  pCompareCfg.AutoDelayedTimeout = 0x0000;
 80028e6:	2300      	movs	r3, #0
 80028e8:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_HRTIM_WaveformCompareConfig(&hhrtim, HRTIM_TIMERINDEX_TIMER_A, HRTIM_COMPAREUNIT_2, &pCompareCfg) != HAL_OK)
 80028ea:	f107 0320 	add.w	r3, r7, #32
 80028ee:	2202      	movs	r2, #2
 80028f0:	2100      	movs	r1, #0
 80028f2:	4853      	ldr	r0, [pc, #332]	; (8002a40 <MX_HRTIM_Init+0x29c>)
 80028f4:	f005 fbc6 	bl	8008084 <HAL_HRTIM_WaveformCompareConfig>
 80028f8:	4603      	mov	r3, r0
 80028fa:	2b00      	cmp	r3, #0
 80028fc:	d001      	beq.n	8002902 <MX_HRTIM_Init+0x15e>
    Error_Handler();
 80028fe:	f000 fcc9 	bl	8003294 <Error_Handler>
  pCompareCfg.CompareValue = PUMP_WIDTH+MICROWAVE_DELAY+MICROWAVE_WIDTH;
 8002902:	f640 536e 	movw	r3, #3438	; 0xd6e
 8002906:	623b      	str	r3, [r7, #32]
  if (HAL_HRTIM_WaveformCompareConfig(&hhrtim, HRTIM_TIMERINDEX_TIMER_E, HRTIM_COMPAREUNIT_2, &pCompareCfg) != HAL_OK)
 8002908:	f107 0320 	add.w	r3, r7, #32
 800290c:	2202      	movs	r2, #2
 800290e:	2104      	movs	r1, #4
 8002910:	484b      	ldr	r0, [pc, #300]	; (8002a40 <MX_HRTIM_Init+0x29c>)
 8002912:	f005 fbb7 	bl	8008084 <HAL_HRTIM_WaveformCompareConfig>
 8002916:	4603      	mov	r3, r0
 8002918:	2b00      	cmp	r3, #0
 800291a:	d001      	beq.n	8002920 <MX_HRTIM_Init+0x17c>
    Error_Handler();
 800291c:	f000 fcba 	bl	8003294 <Error_Handler>
  pCompareCfg.CompareValue = PUMP_WIDTH+(2*MICROWAVE_DELAY)+(2*MICROWAVE_WIDTH)+RAMSEY_TIME+PROBE_WIDTH;
 8002920:	f644 0306 	movw	r3, #18438	; 0x4806
 8002924:	623b      	str	r3, [r7, #32]
  if (HAL_HRTIM_WaveformCompareConfig(&hhrtim, HRTIM_TIMERINDEX_TIMER_A, HRTIM_COMPAREUNIT_3, &pCompareCfg) != HAL_OK)
 8002926:	f107 0320 	add.w	r3, r7, #32
 800292a:	2204      	movs	r2, #4
 800292c:	2100      	movs	r1, #0
 800292e:	4844      	ldr	r0, [pc, #272]	; (8002a40 <MX_HRTIM_Init+0x29c>)
 8002930:	f005 fba8 	bl	8008084 <HAL_HRTIM_WaveformCompareConfig>
 8002934:	4603      	mov	r3, r0
 8002936:	2b00      	cmp	r3, #0
 8002938:	d001      	beq.n	800293e <MX_HRTIM_Init+0x19a>
    Error_Handler();
 800293a:	f000 fcab 	bl	8003294 <Error_Handler>
  pCompareCfg.CompareValue = PUMP_WIDTH+MICROWAVE_DELAY+MICROWAVE_WIDTH+RAMSEY_TIME+MICROWAVE_WIDTH;
 800293e:	f244 435d 	movw	r3, #17501	; 0x445d
 8002942:	623b      	str	r3, [r7, #32]
  if (HAL_HRTIM_WaveformCompareConfig(&hhrtim, HRTIM_TIMERINDEX_TIMER_E, HRTIM_COMPAREUNIT_4, &pCompareCfg) != HAL_OK)
 8002944:	f107 0320 	add.w	r3, r7, #32
 8002948:	2208      	movs	r2, #8
 800294a:	2104      	movs	r1, #4
 800294c:	483c      	ldr	r0, [pc, #240]	; (8002a40 <MX_HRTIM_Init+0x29c>)
 800294e:	f005 fb99 	bl	8008084 <HAL_HRTIM_WaveformCompareConfig>
 8002952:	4603      	mov	r3, r0
 8002954:	2b00      	cmp	r3, #0
 8002956:	d001      	beq.n	800295c <MX_HRTIM_Init+0x1b8>
    Error_Handler();
 8002958:	f000 fc9c 	bl	8003294 <Error_Handler>
  pOutputCfg.Polarity = HRTIM_OUTPUTPOLARITY_LOW;
 800295c:	2302      	movs	r3, #2
 800295e:	603b      	str	r3, [r7, #0]
  pOutputCfg.SetSource = HRTIM_OUTPUTSET_TIMCMP1|HRTIM_OUTPUTSET_TIMCMP3;
 8002960:	2328      	movs	r3, #40	; 0x28
 8002962:	607b      	str	r3, [r7, #4]
  pOutputCfg.ResetSource = HRTIM_OUTPUTRESET_TIMCMP2|HRTIM_OUTPUTRESET_TIMPER;
 8002964:	2314      	movs	r3, #20
 8002966:	60bb      	str	r3, [r7, #8]
  pOutputCfg.IdleMode = HRTIM_OUTPUTIDLEMODE_NONE;
 8002968:	2300      	movs	r3, #0
 800296a:	60fb      	str	r3, [r7, #12]
  pOutputCfg.IdleLevel = HRTIM_OUTPUTIDLELEVEL_ACTIVE;
 800296c:	2308      	movs	r3, #8
 800296e:	613b      	str	r3, [r7, #16]
  pOutputCfg.FaultLevel = HRTIM_OUTPUTFAULTLEVEL_NONE;
 8002970:	2300      	movs	r3, #0
 8002972:	617b      	str	r3, [r7, #20]
  pOutputCfg.ChopperModeEnable = HRTIM_OUTPUTCHOPPERMODE_DISABLED;
 8002974:	2300      	movs	r3, #0
 8002976:	61bb      	str	r3, [r7, #24]
  pOutputCfg.BurstModeEntryDelayed = HRTIM_OUTPUTBURSTMODEENTRY_REGULAR;
 8002978:	2300      	movs	r3, #0
 800297a:	61fb      	str	r3, [r7, #28]
  if (HAL_HRTIM_WaveformOutputConfig(&hhrtim, HRTIM_TIMERINDEX_TIMER_A, HRTIM_OUTPUT_TA1, &pOutputCfg) != HAL_OK)
 800297c:	463b      	mov	r3, r7
 800297e:	2201      	movs	r2, #1
 8002980:	2100      	movs	r1, #0
 8002982:	482f      	ldr	r0, [pc, #188]	; (8002a40 <MX_HRTIM_Init+0x29c>)
 8002984:	f005 fcec 	bl	8008360 <HAL_HRTIM_WaveformOutputConfig>
 8002988:	4603      	mov	r3, r0
 800298a:	2b00      	cmp	r3, #0
 800298c:	d001      	beq.n	8002992 <MX_HRTIM_Init+0x1ee>
    Error_Handler();
 800298e:	f000 fc81 	bl	8003294 <Error_Handler>
  pOutputCfg.Polarity = HRTIM_OUTPUTPOLARITY_HIGH;
 8002992:	2300      	movs	r3, #0
 8002994:	603b      	str	r3, [r7, #0]
  pOutputCfg.ResetSource = HRTIM_OUTPUTRESET_TIMCMP2|HRTIM_OUTPUTRESET_TIMCMP4;
 8002996:	2350      	movs	r3, #80	; 0x50
 8002998:	60bb      	str	r3, [r7, #8]
  pOutputCfg.IdleLevel = HRTIM_OUTPUTIDLELEVEL_INACTIVE;
 800299a:	2300      	movs	r3, #0
 800299c:	613b      	str	r3, [r7, #16]
  if (HAL_HRTIM_WaveformOutputConfig(&hhrtim, HRTIM_TIMERINDEX_TIMER_E, HRTIM_OUTPUT_TE1, &pOutputCfg) != HAL_OK)
 800299e:	463b      	mov	r3, r7
 80029a0:	f44f 7280 	mov.w	r2, #256	; 0x100
 80029a4:	2104      	movs	r1, #4
 80029a6:	4826      	ldr	r0, [pc, #152]	; (8002a40 <MX_HRTIM_Init+0x29c>)
 80029a8:	f005 fcda 	bl	8008360 <HAL_HRTIM_WaveformOutputConfig>
 80029ac:	4603      	mov	r3, r0
 80029ae:	2b00      	cmp	r3, #0
 80029b0:	d001      	beq.n	80029b6 <MX_HRTIM_Init+0x212>
    Error_Handler();
 80029b2:	f000 fc6f 	bl	8003294 <Error_Handler>
  pOutputCfg.Polarity = HRTIM_OUTPUTPOLARITY_LOW;
 80029b6:	2302      	movs	r3, #2
 80029b8:	603b      	str	r3, [r7, #0]
  pOutputCfg.SetSource = HRTIM_OUTPUTSET_TIMCMP3;
 80029ba:	2320      	movs	r3, #32
 80029bc:	607b      	str	r3, [r7, #4]
  pOutputCfg.ResetSource = HRTIM_OUTPUTRESET_TIMCMP2;
 80029be:	2310      	movs	r3, #16
 80029c0:	60bb      	str	r3, [r7, #8]
  pOutputCfg.IdleLevel = HRTIM_OUTPUTIDLELEVEL_ACTIVE;
 80029c2:	2308      	movs	r3, #8
 80029c4:	613b      	str	r3, [r7, #16]
  if (HAL_HRTIM_WaveformOutputConfig(&hhrtim, HRTIM_TIMERINDEX_TIMER_A, HRTIM_OUTPUT_TA2, &pOutputCfg) != HAL_OK)
 80029c6:	463b      	mov	r3, r7
 80029c8:	2202      	movs	r2, #2
 80029ca:	2100      	movs	r1, #0
 80029cc:	481c      	ldr	r0, [pc, #112]	; (8002a40 <MX_HRTIM_Init+0x29c>)
 80029ce:	f005 fcc7 	bl	8008360 <HAL_HRTIM_WaveformOutputConfig>
 80029d2:	4603      	mov	r3, r0
 80029d4:	2b00      	cmp	r3, #0
 80029d6:	d001      	beq.n	80029dc <MX_HRTIM_Init+0x238>
    Error_Handler();
 80029d8:	f000 fc5c 	bl	8003294 <Error_Handler>
  if (HAL_HRTIM_TimeBaseConfig(&hhrtim, HRTIM_TIMERINDEX_TIMER_E, &pTimeBaseCfg) != HAL_OK)
 80029dc:	f107 0380 	add.w	r3, r7, #128	; 0x80
 80029e0:	461a      	mov	r2, r3
 80029e2:	2104      	movs	r1, #4
 80029e4:	4816      	ldr	r0, [pc, #88]	; (8002a40 <MX_HRTIM_Init+0x29c>)
 80029e6:	f005 fab3 	bl	8007f50 <HAL_HRTIM_TimeBaseConfig>
 80029ea:	4603      	mov	r3, r0
 80029ec:	2b00      	cmp	r3, #0
 80029ee:	d001      	beq.n	80029f4 <MX_HRTIM_Init+0x250>
    Error_Handler();
 80029f0:	f000 fc50 	bl	8003294 <Error_Handler>
  pCompareCfg.CompareValue = PUMP_WIDTH+MICROWAVE_DELAY;
 80029f4:	f240 7353 	movw	r3, #1875	; 0x753
 80029f8:	623b      	str	r3, [r7, #32]
  if (HAL_HRTIM_WaveformCompareConfig(&hhrtim, HRTIM_TIMERINDEX_TIMER_E, HRTIM_COMPAREUNIT_1, &pCompareCfg) != HAL_OK)
 80029fa:	f107 0320 	add.w	r3, r7, #32
 80029fe:	2201      	movs	r2, #1
 8002a00:	2104      	movs	r1, #4
 8002a02:	480f      	ldr	r0, [pc, #60]	; (8002a40 <MX_HRTIM_Init+0x29c>)
 8002a04:	f005 fb3e 	bl	8008084 <HAL_HRTIM_WaveformCompareConfig>
 8002a08:	4603      	mov	r3, r0
 8002a0a:	2b00      	cmp	r3, #0
 8002a0c:	d001      	beq.n	8002a12 <MX_HRTIM_Init+0x26e>
    Error_Handler();
 8002a0e:	f000 fc41 	bl	8003294 <Error_Handler>
  pCompareCfg.CompareValue = PUMP_WIDTH+MICROWAVE_DELAY+MICROWAVE_WIDTH+RAMSEY_TIME;
 8002a12:	f643 6342 	movw	r3, #15938	; 0x3e42
 8002a16:	623b      	str	r3, [r7, #32]
  if (HAL_HRTIM_WaveformCompareConfig(&hhrtim, HRTIM_TIMERINDEX_TIMER_E, HRTIM_COMPAREUNIT_3, &pCompareCfg) != HAL_OK)
 8002a18:	f107 0320 	add.w	r3, r7, #32
 8002a1c:	2204      	movs	r2, #4
 8002a1e:	2104      	movs	r1, #4
 8002a20:	4807      	ldr	r0, [pc, #28]	; (8002a40 <MX_HRTIM_Init+0x29c>)
 8002a22:	f005 fb2f 	bl	8008084 <HAL_HRTIM_WaveformCompareConfig>
 8002a26:	4603      	mov	r3, r0
 8002a28:	2b00      	cmp	r3, #0
 8002a2a:	d001      	beq.n	8002a30 <MX_HRTIM_Init+0x28c>
    Error_Handler();
 8002a2c:	f000 fc32 	bl	8003294 <Error_Handler>
  HAL_HRTIM_MspPostInit(&hhrtim);
 8002a30:	4803      	ldr	r0, [pc, #12]	; (8002a40 <MX_HRTIM_Init+0x29c>)
 8002a32:	f000 fd71 	bl	8003518 <HAL_HRTIM_MspPostInit>
}
 8002a36:	bf00      	nop
 8002a38:	3790      	adds	r7, #144	; 0x90
 8002a3a:	46bd      	mov	sp, r7
 8002a3c:	bd80      	pop	{r7, pc}
 8002a3e:	bf00      	nop
 8002a40:	200002d4 	.word	0x200002d4
 8002a44:	40017400 	.word	0x40017400

08002a48 <MX_LPTIM1_Init>:
{
 8002a48:	b580      	push	{r7, lr}
 8002a4a:	af00      	add	r7, sp, #0
  hlptim1.Instance = LPTIM1;
 8002a4c:	4b13      	ldr	r3, [pc, #76]	; (8002a9c <MX_LPTIM1_Init+0x54>)
 8002a4e:	4a14      	ldr	r2, [pc, #80]	; (8002aa0 <MX_LPTIM1_Init+0x58>)
 8002a50:	601a      	str	r2, [r3, #0]
  hlptim1.Init.Clock.Source = LPTIM_CLOCKSOURCE_APBCLOCK_LPOSC;
 8002a52:	4b12      	ldr	r3, [pc, #72]	; (8002a9c <MX_LPTIM1_Init+0x54>)
 8002a54:	2200      	movs	r2, #0
 8002a56:	605a      	str	r2, [r3, #4]
  hlptim1.Init.Clock.Prescaler = LPTIM_PRESCALER_DIV32;
 8002a58:	4b10      	ldr	r3, [pc, #64]	; (8002a9c <MX_LPTIM1_Init+0x54>)
 8002a5a:	f44f 6220 	mov.w	r2, #2560	; 0xa00
 8002a5e:	609a      	str	r2, [r3, #8]
  hlptim1.Init.Trigger.Source = LPTIM_TRIGSOURCE_SOFTWARE;
 8002a60:	4b0e      	ldr	r3, [pc, #56]	; (8002a9c <MX_LPTIM1_Init+0x54>)
 8002a62:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8002a66:	615a      	str	r2, [r3, #20]
  hlptim1.Init.OutputPolarity = LPTIM_OUTPUTPOLARITY_HIGH;
 8002a68:	4b0c      	ldr	r3, [pc, #48]	; (8002a9c <MX_LPTIM1_Init+0x54>)
 8002a6a:	2200      	movs	r2, #0
 8002a6c:	621a      	str	r2, [r3, #32]
  hlptim1.Init.UpdateMode = LPTIM_UPDATE_IMMEDIATE;
 8002a6e:	4b0b      	ldr	r3, [pc, #44]	; (8002a9c <MX_LPTIM1_Init+0x54>)
 8002a70:	2200      	movs	r2, #0
 8002a72:	625a      	str	r2, [r3, #36]	; 0x24
  hlptim1.Init.CounterSource = LPTIM_COUNTERSOURCE_INTERNAL;
 8002a74:	4b09      	ldr	r3, [pc, #36]	; (8002a9c <MX_LPTIM1_Init+0x54>)
 8002a76:	2200      	movs	r2, #0
 8002a78:	629a      	str	r2, [r3, #40]	; 0x28
  hlptim1.Init.Input1Source = LPTIM_INPUT1SOURCE_GPIO;
 8002a7a:	4b08      	ldr	r3, [pc, #32]	; (8002a9c <MX_LPTIM1_Init+0x54>)
 8002a7c:	2200      	movs	r2, #0
 8002a7e:	62da      	str	r2, [r3, #44]	; 0x2c
  hlptim1.Init.Input2Source = LPTIM_INPUT2SOURCE_GPIO;
 8002a80:	4b06      	ldr	r3, [pc, #24]	; (8002a9c <MX_LPTIM1_Init+0x54>)
 8002a82:	2200      	movs	r2, #0
 8002a84:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_LPTIM_Init(&hlptim1) != HAL_OK)
 8002a86:	4805      	ldr	r0, [pc, #20]	; (8002a9c <MX_LPTIM1_Init+0x54>)
 8002a88:	f006 fc96 	bl	80093b8 <HAL_LPTIM_Init>
 8002a8c:	4603      	mov	r3, r0
 8002a8e:	2b00      	cmp	r3, #0
 8002a90:	d001      	beq.n	8002a96 <MX_LPTIM1_Init+0x4e>
    Error_Handler();
 8002a92:	f000 fbff 	bl	8003294 <Error_Handler>
}
 8002a96:	bf00      	nop
 8002a98:	bd80      	pop	{r7, pc}
 8002a9a:	bf00      	nop
 8002a9c:	200003b0 	.word	0x200003b0
 8002aa0:	40002400 	.word	0x40002400

08002aa4 <MX_TIM1_Init>:
{
 8002aa4:	b580      	push	{r7, lr}
 8002aa6:	b088      	sub	sp, #32
 8002aa8:	af00      	add	r7, sp, #0
  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8002aaa:	f107 0310 	add.w	r3, r7, #16
 8002aae:	2200      	movs	r2, #0
 8002ab0:	601a      	str	r2, [r3, #0]
 8002ab2:	605a      	str	r2, [r3, #4]
 8002ab4:	609a      	str	r2, [r3, #8]
 8002ab6:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002ab8:	1d3b      	adds	r3, r7, #4
 8002aba:	2200      	movs	r2, #0
 8002abc:	601a      	str	r2, [r3, #0]
 8002abe:	605a      	str	r2, [r3, #4]
 8002ac0:	609a      	str	r2, [r3, #8]
  htim1.Instance = TIM1;
 8002ac2:	4b20      	ldr	r3, [pc, #128]	; (8002b44 <MX_TIM1_Init+0xa0>)
 8002ac4:	4a20      	ldr	r2, [pc, #128]	; (8002b48 <MX_TIM1_Init+0xa4>)
 8002ac6:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 1249;
 8002ac8:	4b1e      	ldr	r3, [pc, #120]	; (8002b44 <MX_TIM1_Init+0xa0>)
 8002aca:	f240 42e1 	movw	r2, #1249	; 0x4e1
 8002ace:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002ad0:	4b1c      	ldr	r3, [pc, #112]	; (8002b44 <MX_TIM1_Init+0xa0>)
 8002ad2:	2200      	movs	r2, #0
 8002ad4:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 65535;
 8002ad6:	4b1b      	ldr	r3, [pc, #108]	; (8002b44 <MX_TIM1_Init+0xa0>)
 8002ad8:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8002adc:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002ade:	4b19      	ldr	r3, [pc, #100]	; (8002b44 <MX_TIM1_Init+0xa0>)
 8002ae0:	2200      	movs	r2, #0
 8002ae2:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8002ae4:	4b17      	ldr	r3, [pc, #92]	; (8002b44 <MX_TIM1_Init+0xa0>)
 8002ae6:	2200      	movs	r2, #0
 8002ae8:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002aea:	4b16      	ldr	r3, [pc, #88]	; (8002b44 <MX_TIM1_Init+0xa0>)
 8002aec:	2200      	movs	r2, #0
 8002aee:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8002af0:	4814      	ldr	r0, [pc, #80]	; (8002b44 <MX_TIM1_Init+0xa0>)
 8002af2:	f00a fe0f 	bl	800d714 <HAL_TIM_Base_Init>
 8002af6:	4603      	mov	r3, r0
 8002af8:	2b00      	cmp	r3, #0
 8002afa:	d001      	beq.n	8002b00 <MX_TIM1_Init+0x5c>
    Error_Handler();
 8002afc:	f000 fbca 	bl	8003294 <Error_Handler>
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8002b00:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002b04:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8002b06:	f107 0310 	add.w	r3, r7, #16
 8002b0a:	4619      	mov	r1, r3
 8002b0c:	480d      	ldr	r0, [pc, #52]	; (8002b44 <MX_TIM1_Init+0xa0>)
 8002b0e:	f00a fe59 	bl	800d7c4 <HAL_TIM_ConfigClockSource>
 8002b12:	4603      	mov	r3, r0
 8002b14:	2b00      	cmp	r3, #0
 8002b16:	d001      	beq.n	8002b1c <MX_TIM1_Init+0x78>
    Error_Handler();
 8002b18:	f000 fbbc 	bl	8003294 <Error_Handler>
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002b1c:	2300      	movs	r3, #0
 8002b1e:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 8002b20:	2300      	movs	r3, #0
 8002b22:	60bb      	str	r3, [r7, #8]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002b24:	2300      	movs	r3, #0
 8002b26:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8002b28:	1d3b      	adds	r3, r7, #4
 8002b2a:	4619      	mov	r1, r3
 8002b2c:	4805      	ldr	r0, [pc, #20]	; (8002b44 <MX_TIM1_Init+0xa0>)
 8002b2e:	f00b f879 	bl	800dc24 <HAL_TIMEx_MasterConfigSynchronization>
 8002b32:	4603      	mov	r3, r0
 8002b34:	2b00      	cmp	r3, #0
 8002b36:	d001      	beq.n	8002b3c <MX_TIM1_Init+0x98>
    Error_Handler();
 8002b38:	f000 fbac 	bl	8003294 <Error_Handler>
}
 8002b3c:	bf00      	nop
 8002b3e:	3720      	adds	r7, #32
 8002b40:	46bd      	mov	sp, r7
 8002b42:	bd80      	pop	{r7, pc}
 8002b44:	200003e8 	.word	0x200003e8
 8002b48:	40010000 	.word	0x40010000

08002b4c <MX_TIM2_Init>:
{
 8002b4c:	b580      	push	{r7, lr}
 8002b4e:	b088      	sub	sp, #32
 8002b50:	af00      	add	r7, sp, #0
  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8002b52:	f107 0310 	add.w	r3, r7, #16
 8002b56:	2200      	movs	r2, #0
 8002b58:	601a      	str	r2, [r3, #0]
 8002b5a:	605a      	str	r2, [r3, #4]
 8002b5c:	609a      	str	r2, [r3, #8]
 8002b5e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002b60:	1d3b      	adds	r3, r7, #4
 8002b62:	2200      	movs	r2, #0
 8002b64:	601a      	str	r2, [r3, #0]
 8002b66:	605a      	str	r2, [r3, #4]
 8002b68:	609a      	str	r2, [r3, #8]
  htim2.Instance = TIM2;
 8002b6a:	4b1e      	ldr	r3, [pc, #120]	; (8002be4 <MX_TIM2_Init+0x98>)
 8002b6c:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8002b70:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 124;
 8002b72:	4b1c      	ldr	r3, [pc, #112]	; (8002be4 <MX_TIM2_Init+0x98>)
 8002b74:	227c      	movs	r2, #124	; 0x7c
 8002b76:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002b78:	4b1a      	ldr	r3, [pc, #104]	; (8002be4 <MX_TIM2_Init+0x98>)
 8002b7a:	2200      	movs	r2, #0
 8002b7c:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 4294967295;
 8002b7e:	4b19      	ldr	r3, [pc, #100]	; (8002be4 <MX_TIM2_Init+0x98>)
 8002b80:	f04f 32ff 	mov.w	r2, #4294967295
 8002b84:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002b86:	4b17      	ldr	r3, [pc, #92]	; (8002be4 <MX_TIM2_Init+0x98>)
 8002b88:	2200      	movs	r2, #0
 8002b8a:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002b8c:	4b15      	ldr	r3, [pc, #84]	; (8002be4 <MX_TIM2_Init+0x98>)
 8002b8e:	2200      	movs	r2, #0
 8002b90:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8002b92:	4814      	ldr	r0, [pc, #80]	; (8002be4 <MX_TIM2_Init+0x98>)
 8002b94:	f00a fdbe 	bl	800d714 <HAL_TIM_Base_Init>
 8002b98:	4603      	mov	r3, r0
 8002b9a:	2b00      	cmp	r3, #0
 8002b9c:	d001      	beq.n	8002ba2 <MX_TIM2_Init+0x56>
    Error_Handler();
 8002b9e:	f000 fb79 	bl	8003294 <Error_Handler>
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8002ba2:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002ba6:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8002ba8:	f107 0310 	add.w	r3, r7, #16
 8002bac:	4619      	mov	r1, r3
 8002bae:	480d      	ldr	r0, [pc, #52]	; (8002be4 <MX_TIM2_Init+0x98>)
 8002bb0:	f00a fe08 	bl	800d7c4 <HAL_TIM_ConfigClockSource>
 8002bb4:	4603      	mov	r3, r0
 8002bb6:	2b00      	cmp	r3, #0
 8002bb8:	d001      	beq.n	8002bbe <MX_TIM2_Init+0x72>
    Error_Handler();
 8002bba:	f000 fb6b 	bl	8003294 <Error_Handler>
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002bbe:	2300      	movs	r3, #0
 8002bc0:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002bc2:	2300      	movs	r3, #0
 8002bc4:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8002bc6:	1d3b      	adds	r3, r7, #4
 8002bc8:	4619      	mov	r1, r3
 8002bca:	4806      	ldr	r0, [pc, #24]	; (8002be4 <MX_TIM2_Init+0x98>)
 8002bcc:	f00b f82a 	bl	800dc24 <HAL_TIMEx_MasterConfigSynchronization>
 8002bd0:	4603      	mov	r3, r0
 8002bd2:	2b00      	cmp	r3, #0
 8002bd4:	d001      	beq.n	8002bda <MX_TIM2_Init+0x8e>
    Error_Handler();
 8002bd6:	f000 fb5d 	bl	8003294 <Error_Handler>
}
 8002bda:	bf00      	nop
 8002bdc:	3720      	adds	r7, #32
 8002bde:	46bd      	mov	sp, r7
 8002be0:	bd80      	pop	{r7, pc}
 8002be2:	bf00      	nop
 8002be4:	20000434 	.word	0x20000434

08002be8 <MX_TIM3_Init>:
{
 8002be8:	b580      	push	{r7, lr}
 8002bea:	b088      	sub	sp, #32
 8002bec:	af00      	add	r7, sp, #0
  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8002bee:	f107 0310 	add.w	r3, r7, #16
 8002bf2:	2200      	movs	r2, #0
 8002bf4:	601a      	str	r2, [r3, #0]
 8002bf6:	605a      	str	r2, [r3, #4]
 8002bf8:	609a      	str	r2, [r3, #8]
 8002bfa:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002bfc:	1d3b      	adds	r3, r7, #4
 8002bfe:	2200      	movs	r2, #0
 8002c00:	601a      	str	r2, [r3, #0]
 8002c02:	605a      	str	r2, [r3, #4]
 8002c04:	609a      	str	r2, [r3, #8]
  htim3.Instance = TIM3;
 8002c06:	4b1d      	ldr	r3, [pc, #116]	; (8002c7c <MX_TIM3_Init+0x94>)
 8002c08:	4a1d      	ldr	r2, [pc, #116]	; (8002c80 <MX_TIM3_Init+0x98>)
 8002c0a:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 124;
 8002c0c:	4b1b      	ldr	r3, [pc, #108]	; (8002c7c <MX_TIM3_Init+0x94>)
 8002c0e:	227c      	movs	r2, #124	; 0x7c
 8002c10:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002c12:	4b1a      	ldr	r3, [pc, #104]	; (8002c7c <MX_TIM3_Init+0x94>)
 8002c14:	2200      	movs	r2, #0
 8002c16:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 65535;
 8002c18:	4b18      	ldr	r3, [pc, #96]	; (8002c7c <MX_TIM3_Init+0x94>)
 8002c1a:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8002c1e:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002c20:	4b16      	ldr	r3, [pc, #88]	; (8002c7c <MX_TIM3_Init+0x94>)
 8002c22:	2200      	movs	r2, #0
 8002c24:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002c26:	4b15      	ldr	r3, [pc, #84]	; (8002c7c <MX_TIM3_Init+0x94>)
 8002c28:	2200      	movs	r2, #0
 8002c2a:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8002c2c:	4813      	ldr	r0, [pc, #76]	; (8002c7c <MX_TIM3_Init+0x94>)
 8002c2e:	f00a fd71 	bl	800d714 <HAL_TIM_Base_Init>
 8002c32:	4603      	mov	r3, r0
 8002c34:	2b00      	cmp	r3, #0
 8002c36:	d001      	beq.n	8002c3c <MX_TIM3_Init+0x54>
    Error_Handler();
 8002c38:	f000 fb2c 	bl	8003294 <Error_Handler>
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8002c3c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002c40:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8002c42:	f107 0310 	add.w	r3, r7, #16
 8002c46:	4619      	mov	r1, r3
 8002c48:	480c      	ldr	r0, [pc, #48]	; (8002c7c <MX_TIM3_Init+0x94>)
 8002c4a:	f00a fdbb 	bl	800d7c4 <HAL_TIM_ConfigClockSource>
 8002c4e:	4603      	mov	r3, r0
 8002c50:	2b00      	cmp	r3, #0
 8002c52:	d001      	beq.n	8002c58 <MX_TIM3_Init+0x70>
    Error_Handler();
 8002c54:	f000 fb1e 	bl	8003294 <Error_Handler>
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002c58:	2300      	movs	r3, #0
 8002c5a:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002c5c:	2300      	movs	r3, #0
 8002c5e:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8002c60:	1d3b      	adds	r3, r7, #4
 8002c62:	4619      	mov	r1, r3
 8002c64:	4805      	ldr	r0, [pc, #20]	; (8002c7c <MX_TIM3_Init+0x94>)
 8002c66:	f00a ffdd 	bl	800dc24 <HAL_TIMEx_MasterConfigSynchronization>
 8002c6a:	4603      	mov	r3, r0
 8002c6c:	2b00      	cmp	r3, #0
 8002c6e:	d001      	beq.n	8002c74 <MX_TIM3_Init+0x8c>
    Error_Handler();
 8002c70:	f000 fb10 	bl	8003294 <Error_Handler>
}
 8002c74:	bf00      	nop
 8002c76:	3720      	adds	r7, #32
 8002c78:	46bd      	mov	sp, r7
 8002c7a:	bd80      	pop	{r7, pc}
 8002c7c:	20000480 	.word	0x20000480
 8002c80:	40000400 	.word	0x40000400

08002c84 <MX_TIM4_Init>:
{
 8002c84:	b580      	push	{r7, lr}
 8002c86:	b088      	sub	sp, #32
 8002c88:	af00      	add	r7, sp, #0
  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8002c8a:	f107 0310 	add.w	r3, r7, #16
 8002c8e:	2200      	movs	r2, #0
 8002c90:	601a      	str	r2, [r3, #0]
 8002c92:	605a      	str	r2, [r3, #4]
 8002c94:	609a      	str	r2, [r3, #8]
 8002c96:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002c98:	1d3b      	adds	r3, r7, #4
 8002c9a:	2200      	movs	r2, #0
 8002c9c:	601a      	str	r2, [r3, #0]
 8002c9e:	605a      	str	r2, [r3, #4]
 8002ca0:	609a      	str	r2, [r3, #8]
  htim4.Instance = TIM4;
 8002ca2:	4b1e      	ldr	r3, [pc, #120]	; (8002d1c <MX_TIM4_Init+0x98>)
 8002ca4:	4a1e      	ldr	r2, [pc, #120]	; (8002d20 <MX_TIM4_Init+0x9c>)
 8002ca6:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 62499;
 8002ca8:	4b1c      	ldr	r3, [pc, #112]	; (8002d1c <MX_TIM4_Init+0x98>)
 8002caa:	f24f 4223 	movw	r2, #62499	; 0xf423
 8002cae:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002cb0:	4b1a      	ldr	r3, [pc, #104]	; (8002d1c <MX_TIM4_Init+0x98>)
 8002cb2:	2200      	movs	r2, #0
 8002cb4:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 65535;
 8002cb6:	4b19      	ldr	r3, [pc, #100]	; (8002d1c <MX_TIM4_Init+0x98>)
 8002cb8:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8002cbc:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002cbe:	4b17      	ldr	r3, [pc, #92]	; (8002d1c <MX_TIM4_Init+0x98>)
 8002cc0:	2200      	movs	r2, #0
 8002cc2:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002cc4:	4b15      	ldr	r3, [pc, #84]	; (8002d1c <MX_TIM4_Init+0x98>)
 8002cc6:	2200      	movs	r2, #0
 8002cc8:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim4) != HAL_OK)
 8002cca:	4814      	ldr	r0, [pc, #80]	; (8002d1c <MX_TIM4_Init+0x98>)
 8002ccc:	f00a fd22 	bl	800d714 <HAL_TIM_Base_Init>
 8002cd0:	4603      	mov	r3, r0
 8002cd2:	2b00      	cmp	r3, #0
 8002cd4:	d001      	beq.n	8002cda <MX_TIM4_Init+0x56>
    Error_Handler();
 8002cd6:	f000 fadd 	bl	8003294 <Error_Handler>
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8002cda:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002cde:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim4, &sClockSourceConfig) != HAL_OK)
 8002ce0:	f107 0310 	add.w	r3, r7, #16
 8002ce4:	4619      	mov	r1, r3
 8002ce6:	480d      	ldr	r0, [pc, #52]	; (8002d1c <MX_TIM4_Init+0x98>)
 8002ce8:	f00a fd6c 	bl	800d7c4 <HAL_TIM_ConfigClockSource>
 8002cec:	4603      	mov	r3, r0
 8002cee:	2b00      	cmp	r3, #0
 8002cf0:	d001      	beq.n	8002cf6 <MX_TIM4_Init+0x72>
    Error_Handler();
 8002cf2:	f000 facf 	bl	8003294 <Error_Handler>
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002cf6:	2300      	movs	r3, #0
 8002cf8:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002cfa:	2300      	movs	r3, #0
 8002cfc:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 8002cfe:	1d3b      	adds	r3, r7, #4
 8002d00:	4619      	mov	r1, r3
 8002d02:	4806      	ldr	r0, [pc, #24]	; (8002d1c <MX_TIM4_Init+0x98>)
 8002d04:	f00a ff8e 	bl	800dc24 <HAL_TIMEx_MasterConfigSynchronization>
 8002d08:	4603      	mov	r3, r0
 8002d0a:	2b00      	cmp	r3, #0
 8002d0c:	d001      	beq.n	8002d12 <MX_TIM4_Init+0x8e>
    Error_Handler();
 8002d0e:	f000 fac1 	bl	8003294 <Error_Handler>
}
 8002d12:	bf00      	nop
 8002d14:	3720      	adds	r7, #32
 8002d16:	46bd      	mov	sp, r7
 8002d18:	bd80      	pop	{r7, pc}
 8002d1a:	bf00      	nop
 8002d1c:	200004cc 	.word	0x200004cc
 8002d20:	40000800 	.word	0x40000800

08002d24 <MX_TIM5_Init>:
{
 8002d24:	b580      	push	{r7, lr}
 8002d26:	b088      	sub	sp, #32
 8002d28:	af00      	add	r7, sp, #0
  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8002d2a:	f107 0310 	add.w	r3, r7, #16
 8002d2e:	2200      	movs	r2, #0
 8002d30:	601a      	str	r2, [r3, #0]
 8002d32:	605a      	str	r2, [r3, #4]
 8002d34:	609a      	str	r2, [r3, #8]
 8002d36:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002d38:	1d3b      	adds	r3, r7, #4
 8002d3a:	2200      	movs	r2, #0
 8002d3c:	601a      	str	r2, [r3, #0]
 8002d3e:	605a      	str	r2, [r3, #4]
 8002d40:	609a      	str	r2, [r3, #8]
  htim5.Instance = TIM5;
 8002d42:	4b1d      	ldr	r3, [pc, #116]	; (8002db8 <MX_TIM5_Init+0x94>)
 8002d44:	4a1d      	ldr	r2, [pc, #116]	; (8002dbc <MX_TIM5_Init+0x98>)
 8002d46:	601a      	str	r2, [r3, #0]
  htim5.Init.Prescaler = 124;
 8002d48:	4b1b      	ldr	r3, [pc, #108]	; (8002db8 <MX_TIM5_Init+0x94>)
 8002d4a:	227c      	movs	r2, #124	; 0x7c
 8002d4c:	605a      	str	r2, [r3, #4]
  htim5.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002d4e:	4b1a      	ldr	r3, [pc, #104]	; (8002db8 <MX_TIM5_Init+0x94>)
 8002d50:	2200      	movs	r2, #0
 8002d52:	609a      	str	r2, [r3, #8]
  htim5.Init.Period = 4294967295;
 8002d54:	4b18      	ldr	r3, [pc, #96]	; (8002db8 <MX_TIM5_Init+0x94>)
 8002d56:	f04f 32ff 	mov.w	r2, #4294967295
 8002d5a:	60da      	str	r2, [r3, #12]
  htim5.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002d5c:	4b16      	ldr	r3, [pc, #88]	; (8002db8 <MX_TIM5_Init+0x94>)
 8002d5e:	2200      	movs	r2, #0
 8002d60:	611a      	str	r2, [r3, #16]
  htim5.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002d62:	4b15      	ldr	r3, [pc, #84]	; (8002db8 <MX_TIM5_Init+0x94>)
 8002d64:	2200      	movs	r2, #0
 8002d66:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim5) != HAL_OK)
 8002d68:	4813      	ldr	r0, [pc, #76]	; (8002db8 <MX_TIM5_Init+0x94>)
 8002d6a:	f00a fcd3 	bl	800d714 <HAL_TIM_Base_Init>
 8002d6e:	4603      	mov	r3, r0
 8002d70:	2b00      	cmp	r3, #0
 8002d72:	d001      	beq.n	8002d78 <MX_TIM5_Init+0x54>
    Error_Handler();
 8002d74:	f000 fa8e 	bl	8003294 <Error_Handler>
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8002d78:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002d7c:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim5, &sClockSourceConfig) != HAL_OK)
 8002d7e:	f107 0310 	add.w	r3, r7, #16
 8002d82:	4619      	mov	r1, r3
 8002d84:	480c      	ldr	r0, [pc, #48]	; (8002db8 <MX_TIM5_Init+0x94>)
 8002d86:	f00a fd1d 	bl	800d7c4 <HAL_TIM_ConfigClockSource>
 8002d8a:	4603      	mov	r3, r0
 8002d8c:	2b00      	cmp	r3, #0
 8002d8e:	d001      	beq.n	8002d94 <MX_TIM5_Init+0x70>
    Error_Handler();
 8002d90:	f000 fa80 	bl	8003294 <Error_Handler>
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002d94:	2300      	movs	r3, #0
 8002d96:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002d98:	2300      	movs	r3, #0
 8002d9a:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim5, &sMasterConfig) != HAL_OK)
 8002d9c:	1d3b      	adds	r3, r7, #4
 8002d9e:	4619      	mov	r1, r3
 8002da0:	4805      	ldr	r0, [pc, #20]	; (8002db8 <MX_TIM5_Init+0x94>)
 8002da2:	f00a ff3f 	bl	800dc24 <HAL_TIMEx_MasterConfigSynchronization>
 8002da6:	4603      	mov	r3, r0
 8002da8:	2b00      	cmp	r3, #0
 8002daa:	d001      	beq.n	8002db0 <MX_TIM5_Init+0x8c>
    Error_Handler();
 8002dac:	f000 fa72 	bl	8003294 <Error_Handler>
}
 8002db0:	bf00      	nop
 8002db2:	3720      	adds	r7, #32
 8002db4:	46bd      	mov	sp, r7
 8002db6:	bd80      	pop	{r7, pc}
 8002db8:	20000518 	.word	0x20000518
 8002dbc:	40000c00 	.word	0x40000c00

08002dc0 <MX_USART3_UART_Init>:
{
 8002dc0:	b580      	push	{r7, lr}
 8002dc2:	af00      	add	r7, sp, #0
  huart3.Instance = USART3;
 8002dc4:	4b22      	ldr	r3, [pc, #136]	; (8002e50 <MX_USART3_UART_Init+0x90>)
 8002dc6:	4a23      	ldr	r2, [pc, #140]	; (8002e54 <MX_USART3_UART_Init+0x94>)
 8002dc8:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 1000000;
 8002dca:	4b21      	ldr	r3, [pc, #132]	; (8002e50 <MX_USART3_UART_Init+0x90>)
 8002dcc:	4a22      	ldr	r2, [pc, #136]	; (8002e58 <MX_USART3_UART_Init+0x98>)
 8002dce:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8002dd0:	4b1f      	ldr	r3, [pc, #124]	; (8002e50 <MX_USART3_UART_Init+0x90>)
 8002dd2:	2200      	movs	r2, #0
 8002dd4:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8002dd6:	4b1e      	ldr	r3, [pc, #120]	; (8002e50 <MX_USART3_UART_Init+0x90>)
 8002dd8:	2200      	movs	r2, #0
 8002dda:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8002ddc:	4b1c      	ldr	r3, [pc, #112]	; (8002e50 <MX_USART3_UART_Init+0x90>)
 8002dde:	2200      	movs	r2, #0
 8002de0:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8002de2:	4b1b      	ldr	r3, [pc, #108]	; (8002e50 <MX_USART3_UART_Init+0x90>)
 8002de4:	220c      	movs	r2, #12
 8002de6:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8002de8:	4b19      	ldr	r3, [pc, #100]	; (8002e50 <MX_USART3_UART_Init+0x90>)
 8002dea:	2200      	movs	r2, #0
 8002dec:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8002dee:	4b18      	ldr	r3, [pc, #96]	; (8002e50 <MX_USART3_UART_Init+0x90>)
 8002df0:	2200      	movs	r2, #0
 8002df2:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8002df4:	4b16      	ldr	r3, [pc, #88]	; (8002e50 <MX_USART3_UART_Init+0x90>)
 8002df6:	2200      	movs	r2, #0
 8002df8:	621a      	str	r2, [r3, #32]
  huart3.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8002dfa:	4b15      	ldr	r3, [pc, #84]	; (8002e50 <MX_USART3_UART_Init+0x90>)
 8002dfc:	2200      	movs	r2, #0
 8002dfe:	625a      	str	r2, [r3, #36]	; 0x24
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8002e00:	4b13      	ldr	r3, [pc, #76]	; (8002e50 <MX_USART3_UART_Init+0x90>)
 8002e02:	2200      	movs	r2, #0
 8002e04:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8002e06:	4812      	ldr	r0, [pc, #72]	; (8002e50 <MX_USART3_UART_Init+0x90>)
 8002e08:	f00a ff9a 	bl	800dd40 <HAL_UART_Init>
 8002e0c:	4603      	mov	r3, r0
 8002e0e:	2b00      	cmp	r3, #0
 8002e10:	d001      	beq.n	8002e16 <MX_USART3_UART_Init+0x56>
    Error_Handler();
 8002e12:	f000 fa3f 	bl	8003294 <Error_Handler>
  if (HAL_UARTEx_SetTxFifoThreshold(&huart3, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8002e16:	2100      	movs	r1, #0
 8002e18:	480d      	ldr	r0, [pc, #52]	; (8002e50 <MX_USART3_UART_Init+0x90>)
 8002e1a:	f00c f82a 	bl	800ee72 <HAL_UARTEx_SetTxFifoThreshold>
 8002e1e:	4603      	mov	r3, r0
 8002e20:	2b00      	cmp	r3, #0
 8002e22:	d001      	beq.n	8002e28 <MX_USART3_UART_Init+0x68>
    Error_Handler();
 8002e24:	f000 fa36 	bl	8003294 <Error_Handler>
  if (HAL_UARTEx_SetRxFifoThreshold(&huart3, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8002e28:	2100      	movs	r1, #0
 8002e2a:	4809      	ldr	r0, [pc, #36]	; (8002e50 <MX_USART3_UART_Init+0x90>)
 8002e2c:	f00c f85f 	bl	800eeee <HAL_UARTEx_SetRxFifoThreshold>
 8002e30:	4603      	mov	r3, r0
 8002e32:	2b00      	cmp	r3, #0
 8002e34:	d001      	beq.n	8002e3a <MX_USART3_UART_Init+0x7a>
    Error_Handler();
 8002e36:	f000 fa2d 	bl	8003294 <Error_Handler>
  if (HAL_UARTEx_DisableFifoMode(&huart3) != HAL_OK)
 8002e3a:	4805      	ldr	r0, [pc, #20]	; (8002e50 <MX_USART3_UART_Init+0x90>)
 8002e3c:	f00b ffe0 	bl	800ee00 <HAL_UARTEx_DisableFifoMode>
 8002e40:	4603      	mov	r3, r0
 8002e42:	2b00      	cmp	r3, #0
 8002e44:	d001      	beq.n	8002e4a <MX_USART3_UART_Init+0x8a>
    Error_Handler();
 8002e46:	f000 fa25 	bl	8003294 <Error_Handler>
}
 8002e4a:	bf00      	nop
 8002e4c:	bd80      	pop	{r7, pc}
 8002e4e:	bf00      	nop
 8002e50:	20000564 	.word	0x20000564
 8002e54:	40004800 	.word	0x40004800
 8002e58:	000f4240 	.word	0x000f4240

08002e5c <MX_GPIO_Init>:
{
 8002e5c:	b580      	push	{r7, lr}
 8002e5e:	b08e      	sub	sp, #56	; 0x38
 8002e60:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002e62:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002e66:	2200      	movs	r2, #0
 8002e68:	601a      	str	r2, [r3, #0]
 8002e6a:	605a      	str	r2, [r3, #4]
 8002e6c:	609a      	str	r2, [r3, #8]
 8002e6e:	60da      	str	r2, [r3, #12]
 8002e70:	611a      	str	r2, [r3, #16]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8002e72:	4ba0      	ldr	r3, [pc, #640]	; (80030f4 <MX_GPIO_Init+0x298>)
 8002e74:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002e78:	4a9e      	ldr	r2, [pc, #632]	; (80030f4 <MX_GPIO_Init+0x298>)
 8002e7a:	f043 0310 	orr.w	r3, r3, #16
 8002e7e:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8002e82:	4b9c      	ldr	r3, [pc, #624]	; (80030f4 <MX_GPIO_Init+0x298>)
 8002e84:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002e88:	f003 0310 	and.w	r3, r3, #16
 8002e8c:	623b      	str	r3, [r7, #32]
 8002e8e:	6a3b      	ldr	r3, [r7, #32]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8002e90:	4b98      	ldr	r3, [pc, #608]	; (80030f4 <MX_GPIO_Init+0x298>)
 8002e92:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002e96:	4a97      	ldr	r2, [pc, #604]	; (80030f4 <MX_GPIO_Init+0x298>)
 8002e98:	f043 0304 	orr.w	r3, r3, #4
 8002e9c:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8002ea0:	4b94      	ldr	r3, [pc, #592]	; (80030f4 <MX_GPIO_Init+0x298>)
 8002ea2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002ea6:	f003 0304 	and.w	r3, r3, #4
 8002eaa:	61fb      	str	r3, [r7, #28]
 8002eac:	69fb      	ldr	r3, [r7, #28]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8002eae:	4b91      	ldr	r3, [pc, #580]	; (80030f4 <MX_GPIO_Init+0x298>)
 8002eb0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002eb4:	4a8f      	ldr	r2, [pc, #572]	; (80030f4 <MX_GPIO_Init+0x298>)
 8002eb6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002eba:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8002ebe:	4b8d      	ldr	r3, [pc, #564]	; (80030f4 <MX_GPIO_Init+0x298>)
 8002ec0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002ec4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002ec8:	61bb      	str	r3, [r7, #24]
 8002eca:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8002ecc:	4b89      	ldr	r3, [pc, #548]	; (80030f4 <MX_GPIO_Init+0x298>)
 8002ece:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002ed2:	4a88      	ldr	r2, [pc, #544]	; (80030f4 <MX_GPIO_Init+0x298>)
 8002ed4:	f043 0301 	orr.w	r3, r3, #1
 8002ed8:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8002edc:	4b85      	ldr	r3, [pc, #532]	; (80030f4 <MX_GPIO_Init+0x298>)
 8002ede:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002ee2:	f003 0301 	and.w	r3, r3, #1
 8002ee6:	617b      	str	r3, [r7, #20]
 8002ee8:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8002eea:	4b82      	ldr	r3, [pc, #520]	; (80030f4 <MX_GPIO_Init+0x298>)
 8002eec:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002ef0:	4a80      	ldr	r2, [pc, #512]	; (80030f4 <MX_GPIO_Init+0x298>)
 8002ef2:	f043 0302 	orr.w	r3, r3, #2
 8002ef6:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8002efa:	4b7e      	ldr	r3, [pc, #504]	; (80030f4 <MX_GPIO_Init+0x298>)
 8002efc:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002f00:	f003 0302 	and.w	r3, r3, #2
 8002f04:	613b      	str	r3, [r7, #16]
 8002f06:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8002f08:	4b7a      	ldr	r3, [pc, #488]	; (80030f4 <MX_GPIO_Init+0x298>)
 8002f0a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002f0e:	4a79      	ldr	r2, [pc, #484]	; (80030f4 <MX_GPIO_Init+0x298>)
 8002f10:	f043 0320 	orr.w	r3, r3, #32
 8002f14:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8002f18:	4b76      	ldr	r3, [pc, #472]	; (80030f4 <MX_GPIO_Init+0x298>)
 8002f1a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002f1e:	f003 0320 	and.w	r3, r3, #32
 8002f22:	60fb      	str	r3, [r7, #12]
 8002f24:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8002f26:	4b73      	ldr	r3, [pc, #460]	; (80030f4 <MX_GPIO_Init+0x298>)
 8002f28:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002f2c:	4a71      	ldr	r2, [pc, #452]	; (80030f4 <MX_GPIO_Init+0x298>)
 8002f2e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8002f32:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8002f36:	4b6f      	ldr	r3, [pc, #444]	; (80030f4 <MX_GPIO_Init+0x298>)
 8002f38:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002f3c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002f40:	60bb      	str	r3, [r7, #8]
 8002f42:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8002f44:	4b6b      	ldr	r3, [pc, #428]	; (80030f4 <MX_GPIO_Init+0x298>)
 8002f46:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002f4a:	4a6a      	ldr	r2, [pc, #424]	; (80030f4 <MX_GPIO_Init+0x298>)
 8002f4c:	f043 0308 	orr.w	r3, r3, #8
 8002f50:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8002f54:	4b67      	ldr	r3, [pc, #412]	; (80030f4 <MX_GPIO_Init+0x298>)
 8002f56:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002f5a:	f003 0308 	and.w	r3, r3, #8
 8002f5e:	607b      	str	r3, [r7, #4]
 8002f60:	687b      	ldr	r3, [r7, #4]
  HAL_GPIO_WritePin(GPIOE, ATT_4_Pin|ATT_8_Pin|ATT_16_Pin, GPIO_PIN_SET);
 8002f62:	2201      	movs	r2, #1
 8002f64:	2134      	movs	r1, #52	; 0x34
 8002f66:	4864      	ldr	r0, [pc, #400]	; (80030f8 <MX_GPIO_Init+0x29c>)
 8002f68:	f004 feca 	bl	8007d00 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(GPIOB, LD1_Pin|MW_INVALID_Pin|LASER_TUNING_Pin|LD3_Pin
 8002f6c:	2200      	movs	r2, #0
 8002f6e:	f245 1103 	movw	r1, #20739	; 0x5103
 8002f72:	4862      	ldr	r0, [pc, #392]	; (80030fc <MX_GPIO_Init+0x2a0>)
 8002f74:	f004 fec4 	bl	8007d00 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(SCOPE_TRIG_OUT_GPIO_Port, SCOPE_TRIG_OUT_Pin, GPIO_PIN_RESET);
 8002f78:	2200      	movs	r2, #0
 8002f7a:	2101      	movs	r1, #1
 8002f7c:	4860      	ldr	r0, [pc, #384]	; (8003100 <MX_GPIO_Init+0x2a4>)
 8002f7e:	f004 febf 	bl	8007d00 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(USB_OTG_FS_PWR_EN_GPIO_Port, USB_OTG_FS_PWR_EN_Pin, GPIO_PIN_RESET);
 8002f82:	2200      	movs	r2, #0
 8002f84:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8002f88:	485e      	ldr	r0, [pc, #376]	; (8003104 <MX_GPIO_Init+0x2a8>)
 8002f8a:	f004 feb9 	bl	8007d00 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(GPIOC, SCLK_Pin|MOSI_Pin|REG_EN_Pin, GPIO_PIN_RESET);
 8002f8e:	2200      	movs	r2, #0
 8002f90:	f44f 5198 	mov.w	r1, #4864	; 0x1300
 8002f94:	485c      	ldr	r0, [pc, #368]	; (8003108 <MX_GPIO_Init+0x2ac>)
 8002f96:	f004 feb3 	bl	8007d00 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(SEN_GPIO_Port, SEN_Pin, GPIO_PIN_SET);
 8002f9a:	2201      	movs	r2, #1
 8002f9c:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8002fa0:	4859      	ldr	r0, [pc, #356]	; (8003108 <MX_GPIO_Init+0x2ac>)
 8002fa2:	f004 fead 	bl	8007d00 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(GPIOD, ATT_2_Pin|ATT_1_Pin|ATT_05_Pin|ATT_025_Pin
 8002fa6:	2201      	movs	r2, #1
 8002fa8:	21f8      	movs	r1, #248	; 0xf8
 8002faa:	4856      	ldr	r0, [pc, #344]	; (8003104 <MX_GPIO_Init+0x2a8>)
 8002fac:	f004 fea8 	bl	8007d00 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 8002fb0:	2200      	movs	r2, #0
 8002fb2:	2102      	movs	r1, #2
 8002fb4:	4850      	ldr	r0, [pc, #320]	; (80030f8 <MX_GPIO_Init+0x29c>)
 8002fb6:	f004 fea3 	bl	8007d00 <HAL_GPIO_WritePin>
  GPIO_InitStruct.Pin = ATT_4_Pin|ATT_8_Pin|ATT_16_Pin|LD2_Pin;
 8002fba:	2336      	movs	r3, #54	; 0x36
 8002fbc:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002fbe:	2301      	movs	r3, #1
 8002fc0:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002fc2:	2300      	movs	r3, #0
 8002fc4:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002fc6:	2300      	movs	r3, #0
 8002fc8:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8002fca:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002fce:	4619      	mov	r1, r3
 8002fd0:	4849      	ldr	r0, [pc, #292]	; (80030f8 <MX_GPIO_Init+0x29c>)
 8002fd2:	f004 fccd 	bl	8007970 <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = BLUE_BUTTON_Pin;
 8002fd6:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8002fda:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8002fdc:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8002fe0:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002fe2:	2300      	movs	r3, #0
 8002fe4:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(BLUE_BUTTON_GPIO_Port, &GPIO_InitStruct);
 8002fe6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002fea:	4619      	mov	r1, r3
 8002fec:	4846      	ldr	r0, [pc, #280]	; (8003108 <MX_GPIO_Init+0x2ac>)
 8002fee:	f004 fcbf 	bl	8007970 <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = LD1_Pin|MW_INVALID_Pin|LASER_TUNING_Pin|LD3_Pin
 8002ff2:	f245 1303 	movw	r3, #20739	; 0x5103
 8002ff6:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002ff8:	2301      	movs	r3, #1
 8002ffa:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002ffc:	2300      	movs	r3, #0
 8002ffe:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003000:	2300      	movs	r3, #0
 8003002:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003004:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8003008:	4619      	mov	r1, r3
 800300a:	483c      	ldr	r0, [pc, #240]	; (80030fc <MX_GPIO_Init+0x2a0>)
 800300c:	f004 fcb0 	bl	8007970 <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = GPIO_PIN_11;
 8003010:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8003014:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8003016:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 800301a:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800301c:	2300      	movs	r3, #0
 800301e:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8003020:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8003024:	4619      	mov	r1, r3
 8003026:	4839      	ldr	r0, [pc, #228]	; (800310c <MX_GPIO_Init+0x2b0>)
 8003028:	f004 fca2 	bl	8007970 <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = SCOPE_TRIG_OUT_Pin;
 800302c:	2301      	movs	r3, #1
 800302e:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8003030:	2301      	movs	r3, #1
 8003032:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003034:	2300      	movs	r3, #0
 8003036:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003038:	2300      	movs	r3, #0
 800303a:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(SCOPE_TRIG_OUT_GPIO_Port, &GPIO_InitStruct);
 800303c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8003040:	4619      	mov	r1, r3
 8003042:	482f      	ldr	r0, [pc, #188]	; (8003100 <MX_GPIO_Init+0x2a4>)
 8003044:	f004 fc94 	bl	8007970 <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = USB_OTG_FS_PWR_EN_Pin|ATT_2_Pin|ATT_1_Pin|ATT_05_Pin
 8003048:	f44f 639f 	mov.w	r3, #1272	; 0x4f8
 800304c:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800304e:	2301      	movs	r3, #1
 8003050:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003052:	2300      	movs	r3, #0
 8003054:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003056:	2300      	movs	r3, #0
 8003058:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800305a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800305e:	4619      	mov	r1, r3
 8003060:	4828      	ldr	r0, [pc, #160]	; (8003104 <MX_GPIO_Init+0x2a8>)
 8003062:	f004 fc85 	bl	8007970 <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = USB_OTG_FS_OVCR_Pin;
 8003066:	2380      	movs	r3, #128	; 0x80
 8003068:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 800306a:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 800306e:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003070:	2300      	movs	r3, #0
 8003072:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(USB_OTG_FS_OVCR_GPIO_Port, &GPIO_InitStruct);
 8003074:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8003078:	4619      	mov	r1, r3
 800307a:	4821      	ldr	r0, [pc, #132]	; (8003100 <MX_GPIO_Init+0x2a4>)
 800307c:	f004 fc78 	bl	8007970 <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = SCLK_Pin|MOSI_Pin|SEN_Pin|REG_EN_Pin;
 8003080:	f44f 53d8 	mov.w	r3, #6912	; 0x1b00
 8003084:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8003086:	2301      	movs	r3, #1
 8003088:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 800308a:	2302      	movs	r3, #2
 800308c:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800308e:	2300      	movs	r3, #0
 8003090:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8003092:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8003096:	4619      	mov	r1, r3
 8003098:	481b      	ldr	r0, [pc, #108]	; (8003108 <MX_GPIO_Init+0x2ac>)
 800309a:	f004 fc69 	bl	8007970 <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_11|GPIO_PIN_12;
 800309e:	f44f 53c8 	mov.w	r3, #6400	; 0x1900
 80030a2:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80030a4:	2302      	movs	r3, #2
 80030a6:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80030a8:	2300      	movs	r3, #0
 80030aa:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80030ac:	2300      	movs	r3, #0
 80030ae:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG1_FS;
 80030b0:	230a      	movs	r3, #10
 80030b2:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80030b4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80030b8:	4619      	mov	r1, r3
 80030ba:	4815      	ldr	r0, [pc, #84]	; (8003110 <MX_GPIO_Init+0x2b4>)
 80030bc:	f004 fc58 	bl	8007970 <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = MISO_Pin;
 80030c0:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80030c4:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80030c6:	2300      	movs	r3, #0
 80030c8:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80030ca:	2300      	movs	r3, #0
 80030cc:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(MISO_GPIO_Port, &GPIO_InitStruct);
 80030ce:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80030d2:	4619      	mov	r1, r3
 80030d4:	480c      	ldr	r0, [pc, #48]	; (8003108 <MX_GPIO_Init+0x2ac>)
 80030d6:	f004 fc4b 	bl	8007970 <HAL_GPIO_Init>
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 80030da:	2200      	movs	r2, #0
 80030dc:	2100      	movs	r1, #0
 80030de:	2028      	movs	r0, #40	; 0x28
 80030e0:	f002 febd 	bl	8005e5e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 80030e4:	2028      	movs	r0, #40	; 0x28
 80030e6:	f002 fed4 	bl	8005e92 <HAL_NVIC_EnableIRQ>
}
 80030ea:	bf00      	nop
 80030ec:	3738      	adds	r7, #56	; 0x38
 80030ee:	46bd      	mov	sp, r7
 80030f0:	bd80      	pop	{r7, pc}
 80030f2:	bf00      	nop
 80030f4:	58024400 	.word	0x58024400
 80030f8:	58021000 	.word	0x58021000
 80030fc:	58020400 	.word	0x58020400
 8003100:	58021800 	.word	0x58021800
 8003104:	58020c00 	.word	0x58020c00
 8003108:	58020800 	.word	0x58020800
 800310c:	58021400 	.word	0x58021400
 8003110:	58020000 	.word	0x58020000

08003114 <HAL_ADC_ConvCpltCallback>:
{
 8003114:	b580      	push	{r7, lr}
 8003116:	b082      	sub	sp, #8
 8003118:	af00      	add	r7, sp, #0
 800311a:	6078      	str	r0, [r7, #4]
  adc_val = 0x0000FFFF & HAL_ADC_GetValue(&hadc3); //ensure that only 16 bits are recorded
 800311c:	482a      	ldr	r0, [pc, #168]	; (80031c8 <HAL_ADC_ConvCpltCallback+0xb4>)
 800311e:	f001 fd59 	bl	8004bd4 <HAL_ADC_GetValue>
 8003122:	4603      	mov	r3, r0
 8003124:	b29b      	uxth	r3, r3
 8003126:	4a29      	ldr	r2, [pc, #164]	; (80031cc <HAL_ADC_ConvCpltCallback+0xb8>)
 8003128:	6013      	str	r3, [r2, #0]
  sample_count++;
 800312a:	4b29      	ldr	r3, [pc, #164]	; (80031d0 <HAL_ADC_ConvCpltCallback+0xbc>)
 800312c:	881b      	ldrh	r3, [r3, #0]
 800312e:	b29b      	uxth	r3, r3
 8003130:	3301      	adds	r3, #1
 8003132:	b29a      	uxth	r2, r3
 8003134:	4b26      	ldr	r3, [pc, #152]	; (80031d0 <HAL_ADC_ConvCpltCallback+0xbc>)
 8003136:	801a      	strh	r2, [r3, #0]
		adc_readings_total = adc_readings_total + adc_val;
 8003138:	4b26      	ldr	r3, [pc, #152]	; (80031d4 <HAL_ADC_ConvCpltCallback+0xc0>)
 800313a:	681a      	ldr	r2, [r3, #0]
 800313c:	4b23      	ldr	r3, [pc, #140]	; (80031cc <HAL_ADC_ConvCpltCallback+0xb8>)
 800313e:	681b      	ldr	r3, [r3, #0]
 8003140:	4413      	add	r3, r2
 8003142:	4a24      	ldr	r2, [pc, #144]	; (80031d4 <HAL_ADC_ConvCpltCallback+0xc0>)
 8003144:	6013      	str	r3, [r2, #0]
		if (sample_count >= ADC_SAMPLES) {//if the sample buffer is full
 8003146:	4b22      	ldr	r3, [pc, #136]	; (80031d0 <HAL_ADC_ConvCpltCallback+0xbc>)
 8003148:	881b      	ldrh	r3, [r3, #0]
 800314a:	b29b      	uxth	r3, r3
 800314c:	2b07      	cmp	r3, #7
 800314e:	d912      	bls.n	8003176 <HAL_ADC_ConvCpltCallback+0x62>
			adc_readings_total = adc_readings_total - adc_readings[adc_sample_no]; //subtract the expired value from the total
 8003150:	4b20      	ldr	r3, [pc, #128]	; (80031d4 <HAL_ADC_ConvCpltCallback+0xc0>)
 8003152:	681a      	ldr	r2, [r3, #0]
 8003154:	4b20      	ldr	r3, [pc, #128]	; (80031d8 <HAL_ADC_ConvCpltCallback+0xc4>)
 8003156:	881b      	ldrh	r3, [r3, #0]
 8003158:	4619      	mov	r1, r3
 800315a:	4b20      	ldr	r3, [pc, #128]	; (80031dc <HAL_ADC_ConvCpltCallback+0xc8>)
 800315c:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8003160:	1ad3      	subs	r3, r2, r3
 8003162:	4a1c      	ldr	r2, [pc, #112]	; (80031d4 <HAL_ADC_ConvCpltCallback+0xc0>)
 8003164:	6013      	str	r3, [r2, #0]
			adc_averaged_val = adc_readings_total >> ADC_SAMPLE_POWER; //truncate as a cycle-efficient division
 8003166:	4b1b      	ldr	r3, [pc, #108]	; (80031d4 <HAL_ADC_ConvCpltCallback+0xc0>)
 8003168:	681b      	ldr	r3, [r3, #0]
 800316a:	08db      	lsrs	r3, r3, #3
 800316c:	4a1c      	ldr	r2, [pc, #112]	; (80031e0 <HAL_ADC_ConvCpltCallback+0xcc>)
 800316e:	6013      	str	r3, [r2, #0]
			adc_average_updated = true;
 8003170:	4b1c      	ldr	r3, [pc, #112]	; (80031e4 <HAL_ADC_ConvCpltCallback+0xd0>)
 8003172:	2201      	movs	r2, #1
 8003174:	701a      	strb	r2, [r3, #0]
		adc_readings[adc_sample_no] = adc_val;
 8003176:	4b18      	ldr	r3, [pc, #96]	; (80031d8 <HAL_ADC_ConvCpltCallback+0xc4>)
 8003178:	881b      	ldrh	r3, [r3, #0]
 800317a:	4619      	mov	r1, r3
 800317c:	4b13      	ldr	r3, [pc, #76]	; (80031cc <HAL_ADC_ConvCpltCallback+0xb8>)
 800317e:	681b      	ldr	r3, [r3, #0]
 8003180:	4a16      	ldr	r2, [pc, #88]	; (80031dc <HAL_ADC_ConvCpltCallback+0xc8>)
 8003182:	f842 3021 	str.w	r3, [r2, r1, lsl #2]
		adc_sample_no++;
 8003186:	4b14      	ldr	r3, [pc, #80]	; (80031d8 <HAL_ADC_ConvCpltCallback+0xc4>)
 8003188:	881b      	ldrh	r3, [r3, #0]
 800318a:	3301      	adds	r3, #1
 800318c:	b29a      	uxth	r2, r3
 800318e:	4b12      	ldr	r3, [pc, #72]	; (80031d8 <HAL_ADC_ConvCpltCallback+0xc4>)
 8003190:	801a      	strh	r2, [r3, #0]
		if (adc_sample_no >= ADC_SAMPLES) adc_sample_no = 0; //set back to zero if loop complete
 8003192:	4b11      	ldr	r3, [pc, #68]	; (80031d8 <HAL_ADC_ConvCpltCallback+0xc4>)
 8003194:	881b      	ldrh	r3, [r3, #0]
 8003196:	2b07      	cmp	r3, #7
 8003198:	d902      	bls.n	80031a0 <HAL_ADC_ConvCpltCallback+0x8c>
 800319a:	4b0f      	ldr	r3, [pc, #60]	; (80031d8 <HAL_ADC_ConvCpltCallback+0xc4>)
 800319c:	2200      	movs	r2, #0
 800319e:	801a      	strh	r2, [r3, #0]
	if(adc_average_updated) {
 80031a0:	4b10      	ldr	r3, [pc, #64]	; (80031e4 <HAL_ADC_ConvCpltCallback+0xd0>)
 80031a2:	781b      	ldrb	r3, [r3, #0]
 80031a4:	2b00      	cmp	r3, #0
 80031a6:	d00b      	beq.n	80031c0 <HAL_ADC_ConvCpltCallback+0xac>
		dac_val = adc_averaged_val >> 4;
 80031a8:	4b0d      	ldr	r3, [pc, #52]	; (80031e0 <HAL_ADC_ConvCpltCallback+0xcc>)
 80031aa:	681b      	ldr	r3, [r3, #0]
 80031ac:	091b      	lsrs	r3, r3, #4
 80031ae:	4a0e      	ldr	r2, [pc, #56]	; (80031e8 <HAL_ADC_ConvCpltCallback+0xd4>)
 80031b0:	6013      	str	r3, [r2, #0]
		HAL_DAC_SetValue(&hdac1, DAC_CHANNEL_1, DAC_ALIGN_12B_R, dac_val);
 80031b2:	4b0d      	ldr	r3, [pc, #52]	; (80031e8 <HAL_ADC_ConvCpltCallback+0xd4>)
 80031b4:	681b      	ldr	r3, [r3, #0]
 80031b6:	2200      	movs	r2, #0
 80031b8:	2100      	movs	r1, #0
 80031ba:	480c      	ldr	r0, [pc, #48]	; (80031ec <HAL_ADC_ConvCpltCallback+0xd8>)
 80031bc:	f002 ff74 	bl	80060a8 <HAL_DAC_SetValue>
}
 80031c0:	bf00      	nop
 80031c2:	3708      	adds	r7, #8
 80031c4:	46bd      	mov	sp, r7
 80031c6:	bd80      	pop	{r7, pc}
 80031c8:	2000025c 	.word	0x2000025c
 80031cc:	20000600 	.word	0x20000600
 80031d0:	200005fa 	.word	0x200005fa
 80031d4:	2000062c 	.word	0x2000062c
 80031d8:	20000628 	.word	0x20000628
 80031dc:	20000608 	.word	0x20000608
 80031e0:	20000604 	.word	0x20000604
 80031e4:	20000630 	.word	0x20000630
 80031e8:	2000063c 	.word	0x2000063c
 80031ec:	200002c0 	.word	0x200002c0

080031f0 <MPU_Config>:
/* USER CODE END 4 */

/* MPU Configuration */

void MPU_Config(void)
{
 80031f0:	b580      	push	{r7, lr}
 80031f2:	b084      	sub	sp, #16
 80031f4:	af00      	add	r7, sp, #0
  MPU_Region_InitTypeDef MPU_InitStruct = {0};
 80031f6:	463b      	mov	r3, r7
 80031f8:	2200      	movs	r2, #0
 80031fa:	601a      	str	r2, [r3, #0]
 80031fc:	605a      	str	r2, [r3, #4]
 80031fe:	609a      	str	r2, [r3, #8]
 8003200:	60da      	str	r2, [r3, #12]

  /* Disables the MPU */
  HAL_MPU_Disable();
 8003202:	f002 fe61 	bl	8005ec8 <HAL_MPU_Disable>

  /** Initializes and configures the Region and the memory to be protected
  */
  MPU_InitStruct.Enable = MPU_REGION_ENABLE;
 8003206:	2301      	movs	r3, #1
 8003208:	703b      	strb	r3, [r7, #0]
  MPU_InitStruct.Number = MPU_REGION_NUMBER0;
 800320a:	2300      	movs	r3, #0
 800320c:	707b      	strb	r3, [r7, #1]
  MPU_InitStruct.BaseAddress = 0x0;
 800320e:	2300      	movs	r3, #0
 8003210:	607b      	str	r3, [r7, #4]
  MPU_InitStruct.Size = MPU_REGION_SIZE_4GB;
 8003212:	231f      	movs	r3, #31
 8003214:	723b      	strb	r3, [r7, #8]
  MPU_InitStruct.SubRegionDisable = 0x87;
 8003216:	2387      	movs	r3, #135	; 0x87
 8003218:	727b      	strb	r3, [r7, #9]
  MPU_InitStruct.TypeExtField = MPU_TEX_LEVEL0;
 800321a:	2300      	movs	r3, #0
 800321c:	72bb      	strb	r3, [r7, #10]
  MPU_InitStruct.AccessPermission = MPU_REGION_NO_ACCESS;
 800321e:	2300      	movs	r3, #0
 8003220:	72fb      	strb	r3, [r7, #11]
  MPU_InitStruct.DisableExec = MPU_INSTRUCTION_ACCESS_DISABLE;
 8003222:	2301      	movs	r3, #1
 8003224:	733b      	strb	r3, [r7, #12]
  MPU_InitStruct.IsShareable = MPU_ACCESS_SHAREABLE;
 8003226:	2301      	movs	r3, #1
 8003228:	737b      	strb	r3, [r7, #13]
  MPU_InitStruct.IsCacheable = MPU_ACCESS_NOT_CACHEABLE;
 800322a:	2300      	movs	r3, #0
 800322c:	73bb      	strb	r3, [r7, #14]
  MPU_InitStruct.IsBufferable = MPU_ACCESS_NOT_BUFFERABLE;
 800322e:	2300      	movs	r3, #0
 8003230:	73fb      	strb	r3, [r7, #15]

  HAL_MPU_ConfigRegion(&MPU_InitStruct);
 8003232:	463b      	mov	r3, r7
 8003234:	4618      	mov	r0, r3
 8003236:	f002 fe7f 	bl	8005f38 <HAL_MPU_ConfigRegion>

  /** Initializes and configures the Region and the memory to be protected
  */
  MPU_InitStruct.Number = MPU_REGION_NUMBER1;
 800323a:	2301      	movs	r3, #1
 800323c:	707b      	strb	r3, [r7, #1]
  MPU_InitStruct.BaseAddress = 0x30020000;
 800323e:	4b13      	ldr	r3, [pc, #76]	; (800328c <MPU_Config+0x9c>)
 8003240:	607b      	str	r3, [r7, #4]
  MPU_InitStruct.Size = MPU_REGION_SIZE_128KB;
 8003242:	2310      	movs	r3, #16
 8003244:	723b      	strb	r3, [r7, #8]
  MPU_InitStruct.SubRegionDisable = 0x0;
 8003246:	2300      	movs	r3, #0
 8003248:	727b      	strb	r3, [r7, #9]
  MPU_InitStruct.TypeExtField = MPU_TEX_LEVEL1;
 800324a:	2301      	movs	r3, #1
 800324c:	72bb      	strb	r3, [r7, #10]
  MPU_InitStruct.AccessPermission = MPU_REGION_FULL_ACCESS;
 800324e:	2303      	movs	r3, #3
 8003250:	72fb      	strb	r3, [r7, #11]
  MPU_InitStruct.IsShareable = MPU_ACCESS_NOT_SHAREABLE;
 8003252:	2300      	movs	r3, #0
 8003254:	737b      	strb	r3, [r7, #13]

  HAL_MPU_ConfigRegion(&MPU_InitStruct);
 8003256:	463b      	mov	r3, r7
 8003258:	4618      	mov	r0, r3
 800325a:	f002 fe6d 	bl	8005f38 <HAL_MPU_ConfigRegion>

  /** Initializes and configures the Region and the memory to be protected
  */
  MPU_InitStruct.Number = MPU_REGION_NUMBER2;
 800325e:	2302      	movs	r3, #2
 8003260:	707b      	strb	r3, [r7, #1]
  MPU_InitStruct.BaseAddress = 0x30040000;
 8003262:	4b0b      	ldr	r3, [pc, #44]	; (8003290 <MPU_Config+0xa0>)
 8003264:	607b      	str	r3, [r7, #4]
  MPU_InitStruct.Size = MPU_REGION_SIZE_512B;
 8003266:	2308      	movs	r3, #8
 8003268:	723b      	strb	r3, [r7, #8]
  MPU_InitStruct.TypeExtField = MPU_TEX_LEVEL0;
 800326a:	2300      	movs	r3, #0
 800326c:	72bb      	strb	r3, [r7, #10]
  MPU_InitStruct.IsShareable = MPU_ACCESS_SHAREABLE;
 800326e:	2301      	movs	r3, #1
 8003270:	737b      	strb	r3, [r7, #13]
  MPU_InitStruct.IsBufferable = MPU_ACCESS_BUFFERABLE;
 8003272:	2301      	movs	r3, #1
 8003274:	73fb      	strb	r3, [r7, #15]

  HAL_MPU_ConfigRegion(&MPU_InitStruct);
 8003276:	463b      	mov	r3, r7
 8003278:	4618      	mov	r0, r3
 800327a:	f002 fe5d 	bl	8005f38 <HAL_MPU_ConfigRegion>
  /* Enables the MPU */
  HAL_MPU_Enable(MPU_PRIVILEGED_DEFAULT);
 800327e:	2004      	movs	r0, #4
 8003280:	f002 fe3a 	bl	8005ef8 <HAL_MPU_Enable>

}
 8003284:	bf00      	nop
 8003286:	3710      	adds	r7, #16
 8003288:	46bd      	mov	sp, r7
 800328a:	bd80      	pop	{r7, pc}
 800328c:	30020000 	.word	0x30020000
 8003290:	30040000 	.word	0x30040000

08003294 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8003294:	b580      	push	{r7, lr}
 8003296:	af00      	add	r7, sp, #0
  __ASM volatile ("cpsid i" : : : "memory");
 8003298:	b672      	cpsid	i
}
 800329a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
	__disable_irq();

	printf("Error handler routine called\r\n");
 800329c:	4810      	ldr	r0, [pc, #64]	; (80032e0 <Error_Handler+0x4c>)
 800329e:	f016 fe45 	bl	8019f2c <puts>

	/* Disable the AOM */
	HAL_HRTIM_WaveformOutputStop(&hhrtim, HRTIM_OUTPUT_TA1 | HRTIM_OUTPUT_TA2 | HRTIM_OUTPUT_TE1);
 80032a2:	f240 1103 	movw	r1, #259	; 0x103
 80032a6:	480f      	ldr	r0, [pc, #60]	; (80032e4 <Error_Handler+0x50>)
 80032a8:	f005 f8b8 	bl	800841c <HAL_HRTIM_WaveformOutputStop>
	HAL_HRTIM_WaveformCounterStop_IT(&hhrtim, HRTIM_TIMERID_TIMER_A | HRTIM_TIMERID_TIMER_E);
 80032ac:	f44f 1108 	mov.w	r1, #2228224	; 0x220000
 80032b0:	480c      	ldr	r0, [pc, #48]	; (80032e4 <Error_Handler+0x50>)
 80032b2:	f005 f951 	bl	8008558 <HAL_HRTIM_WaveformCountStop_IT>

	/* Power down the synthesiser */
	HAL_GPIO_WritePin(REG_EN_GPIO_Port, REG_EN_Pin, 0);
 80032b6:	2200      	movs	r2, #0
 80032b8:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80032bc:	480a      	ldr	r0, [pc, #40]	; (80032e8 <Error_Handler+0x54>)
 80032be:	f004 fd1f 	bl	8007d00 <HAL_GPIO_WritePin>

	while (1) {
		HAL_GPIO_TogglePin(LD3_GPIO_Port, LD3_Pin); //toggle red LED
 80032c2:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80032c6:	4809      	ldr	r0, [pc, #36]	; (80032ec <Error_Handler+0x58>)
 80032c8:	f004 fd33 	bl	8007d32 <HAL_GPIO_TogglePin>
		timer_delay(SLOW_TIMER, ERROR_LED_DELAY);
 80032cc:	4b08      	ldr	r3, [pc, #32]	; (80032f0 <Error_Handler+0x5c>)
 80032ce:	681b      	ldr	r3, [r3, #0]
 80032d0:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80032d4:	4611      	mov	r1, r2
 80032d6:	4618      	mov	r0, r3
 80032d8:	f018 fd66 	bl	801bda8 <__timer_delay_veneer>
		HAL_GPIO_TogglePin(LD3_GPIO_Port, LD3_Pin); //toggle red LED
 80032dc:	e7f1      	b.n	80032c2 <Error_Handler+0x2e>
 80032de:	bf00      	nop
 80032e0:	0801c2a0 	.word	0x0801c2a0
 80032e4:	200002d4 	.word	0x200002d4
 80032e8:	58020800 	.word	0x58020800
 80032ec:	58020400 	.word	0x58020400
 80032f0:	20000018 	.word	0x20000018

080032f4 <HAL_MspInit>:
void HAL_HRTIM_MspPostInit(HRTIM_HandleTypeDef *hhrtim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80032f4:	b480      	push	{r7}
 80032f6:	b083      	sub	sp, #12
 80032f8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80032fa:	4b0a      	ldr	r3, [pc, #40]	; (8003324 <HAL_MspInit+0x30>)
 80032fc:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8003300:	4a08      	ldr	r2, [pc, #32]	; (8003324 <HAL_MspInit+0x30>)
 8003302:	f043 0302 	orr.w	r3, r3, #2
 8003306:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 800330a:	4b06      	ldr	r3, [pc, #24]	; (8003324 <HAL_MspInit+0x30>)
 800330c:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8003310:	f003 0302 	and.w	r3, r3, #2
 8003314:	607b      	str	r3, [r7, #4]
 8003316:	687b      	ldr	r3, [r7, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8003318:	bf00      	nop
 800331a:	370c      	adds	r7, #12
 800331c:	46bd      	mov	sp, r7
 800331e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003322:	4770      	bx	lr
 8003324:	58024400 	.word	0x58024400

08003328 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8003328:	b580      	push	{r7, lr}
 800332a:	b0b4      	sub	sp, #208	; 0xd0
 800332c:	af00      	add	r7, sp, #0
 800332e:	6078      	str	r0, [r7, #4]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8003330:	f107 0310 	add.w	r3, r7, #16
 8003334:	22c0      	movs	r2, #192	; 0xc0
 8003336:	2100      	movs	r1, #0
 8003338:	4618      	mov	r0, r3
 800333a:	f016 fee7 	bl	801a10c <memset>
  if(hadc->Instance==ADC3)
 800333e:	687b      	ldr	r3, [r7, #4]
 8003340:	681b      	ldr	r3, [r3, #0]
 8003342:	4a2b      	ldr	r2, [pc, #172]	; (80033f0 <HAL_ADC_MspInit+0xc8>)
 8003344:	4293      	cmp	r3, r2
 8003346:	d14e      	bne.n	80033e6 <HAL_ADC_MspInit+0xbe>

  /* USER CODE END ADC3_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_ADC;
 8003348:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 800334c:	f04f 0300 	mov.w	r3, #0
 8003350:	e9c7 2304 	strd	r2, r3, [r7, #16]
    PeriphClkInitStruct.PLL2.PLL2M = 1;
 8003354:	2301      	movs	r3, #1
 8003356:	61bb      	str	r3, [r7, #24]
    PeriphClkInitStruct.PLL2.PLL2N = 19;
 8003358:	2313      	movs	r3, #19
 800335a:	61fb      	str	r3, [r7, #28]
    PeriphClkInitStruct.PLL2.PLL2P = 79;
 800335c:	234f      	movs	r3, #79	; 0x4f
 800335e:	623b      	str	r3, [r7, #32]
    PeriphClkInitStruct.PLL2.PLL2Q = 2;
 8003360:	2302      	movs	r3, #2
 8003362:	627b      	str	r3, [r7, #36]	; 0x24
    PeriphClkInitStruct.PLL2.PLL2R = 2;
 8003364:	2302      	movs	r3, #2
 8003366:	62bb      	str	r3, [r7, #40]	; 0x28
    PeriphClkInitStruct.PLL2.PLL2RGE = RCC_PLL2VCIRANGE_3;
 8003368:	23c0      	movs	r3, #192	; 0xc0
 800336a:	62fb      	str	r3, [r7, #44]	; 0x2c
    PeriphClkInitStruct.PLL2.PLL2VCOSEL = RCC_PLL2VCOMEDIUM;
 800336c:	2320      	movs	r3, #32
 800336e:	633b      	str	r3, [r7, #48]	; 0x30
    PeriphClkInitStruct.PLL2.PLL2FRACN = 0;
 8003370:	2300      	movs	r3, #0
 8003372:	637b      	str	r3, [r7, #52]	; 0x34
    PeriphClkInitStruct.AdcClockSelection = RCC_ADCCLKSOURCE_PLL2;
 8003374:	2300      	movs	r3, #0
 8003376:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800337a:	f107 0310 	add.w	r3, r7, #16
 800337e:	4618      	mov	r0, r3
 8003380:	f007 fc74 	bl	800ac6c <HAL_RCCEx_PeriphCLKConfig>
 8003384:	4603      	mov	r3, r0
 8003386:	2b00      	cmp	r3, #0
 8003388:	d001      	beq.n	800338e <HAL_ADC_MspInit+0x66>
    {
      Error_Handler();
 800338a:	f7ff ff83 	bl	8003294 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_ADC3_CLK_ENABLE();
 800338e:	4b19      	ldr	r3, [pc, #100]	; (80033f4 <HAL_ADC_MspInit+0xcc>)
 8003390:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8003394:	4a17      	ldr	r2, [pc, #92]	; (80033f4 <HAL_ADC_MspInit+0xcc>)
 8003396:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800339a:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800339e:	4b15      	ldr	r3, [pc, #84]	; (80033f4 <HAL_ADC_MspInit+0xcc>)
 80033a0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80033a4:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80033a8:	60fb      	str	r3, [r7, #12]
 80033aa:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 80033ac:	4b11      	ldr	r3, [pc, #68]	; (80033f4 <HAL_ADC_MspInit+0xcc>)
 80033ae:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80033b2:	4a10      	ldr	r2, [pc, #64]	; (80033f4 <HAL_ADC_MspInit+0xcc>)
 80033b4:	f043 0304 	orr.w	r3, r3, #4
 80033b8:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80033bc:	4b0d      	ldr	r3, [pc, #52]	; (80033f4 <HAL_ADC_MspInit+0xcc>)
 80033be:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80033c2:	f003 0304 	and.w	r3, r3, #4
 80033c6:	60bb      	str	r3, [r7, #8]
 80033c8:	68bb      	ldr	r3, [r7, #8]
    /**ADC3 GPIO Configuration
    PC2_C     ------> ADC3_INP0
    */
    HAL_SYSCFG_AnalogSwitchConfig(SYSCFG_SWITCH_PC2, SYSCFG_SWITCH_PC2_OPEN);
 80033ca:	f04f 6180 	mov.w	r1, #67108864	; 0x4000000
 80033ce:	f04f 6080 	mov.w	r0, #67108864	; 0x4000000
 80033d2:	f000 feed 	bl	80041b0 <HAL_SYSCFG_AnalogSwitchConfig>

    /* ADC3 interrupt Init */
    HAL_NVIC_SetPriority(ADC3_IRQn, 0, 0);
 80033d6:	2200      	movs	r2, #0
 80033d8:	2100      	movs	r1, #0
 80033da:	207f      	movs	r0, #127	; 0x7f
 80033dc:	f002 fd3f 	bl	8005e5e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ADC3_IRQn);
 80033e0:	207f      	movs	r0, #127	; 0x7f
 80033e2:	f002 fd56 	bl	8005e92 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN ADC3_MspInit 1 */

  /* USER CODE END ADC3_MspInit 1 */
  }

}
 80033e6:	bf00      	nop
 80033e8:	37d0      	adds	r7, #208	; 0xd0
 80033ea:	46bd      	mov	sp, r7
 80033ec:	bd80      	pop	{r7, pc}
 80033ee:	bf00      	nop
 80033f0:	58026000 	.word	0x58026000
 80033f4:	58024400 	.word	0x58024400

080033f8 <HAL_DAC_MspInit>:
* This function configures the hardware resources used in this example
* @param hdac: DAC handle pointer
* @retval None
*/
void HAL_DAC_MspInit(DAC_HandleTypeDef* hdac)
{
 80033f8:	b580      	push	{r7, lr}
 80033fa:	b08a      	sub	sp, #40	; 0x28
 80033fc:	af00      	add	r7, sp, #0
 80033fe:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003400:	f107 0314 	add.w	r3, r7, #20
 8003404:	2200      	movs	r2, #0
 8003406:	601a      	str	r2, [r3, #0]
 8003408:	605a      	str	r2, [r3, #4]
 800340a:	609a      	str	r2, [r3, #8]
 800340c:	60da      	str	r2, [r3, #12]
 800340e:	611a      	str	r2, [r3, #16]
  if(hdac->Instance==DAC1)
 8003410:	687b      	ldr	r3, [r7, #4]
 8003412:	681b      	ldr	r3, [r3, #0]
 8003414:	4a18      	ldr	r2, [pc, #96]	; (8003478 <HAL_DAC_MspInit+0x80>)
 8003416:	4293      	cmp	r3, r2
 8003418:	d129      	bne.n	800346e <HAL_DAC_MspInit+0x76>
  {
  /* USER CODE BEGIN DAC1_MspInit 0 */

  /* USER CODE END DAC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_DAC12_CLK_ENABLE();
 800341a:	4b18      	ldr	r3, [pc, #96]	; (800347c <HAL_DAC_MspInit+0x84>)
 800341c:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8003420:	4a16      	ldr	r2, [pc, #88]	; (800347c <HAL_DAC_MspInit+0x84>)
 8003422:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8003426:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 800342a:	4b14      	ldr	r3, [pc, #80]	; (800347c <HAL_DAC_MspInit+0x84>)
 800342c:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8003430:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8003434:	613b      	str	r3, [r7, #16]
 8003436:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003438:	4b10      	ldr	r3, [pc, #64]	; (800347c <HAL_DAC_MspInit+0x84>)
 800343a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800343e:	4a0f      	ldr	r2, [pc, #60]	; (800347c <HAL_DAC_MspInit+0x84>)
 8003440:	f043 0301 	orr.w	r3, r3, #1
 8003444:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8003448:	4b0c      	ldr	r3, [pc, #48]	; (800347c <HAL_DAC_MspInit+0x84>)
 800344a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800344e:	f003 0301 	and.w	r3, r3, #1
 8003452:	60fb      	str	r3, [r7, #12]
 8003454:	68fb      	ldr	r3, [r7, #12]
    /**DAC1 GPIO Configuration
    PA4     ------> DAC1_OUT1
    PA5     ------> DAC1_OUT2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5;
 8003456:	2330      	movs	r3, #48	; 0x30
 8003458:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800345a:	2303      	movs	r3, #3
 800345c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800345e:	2300      	movs	r3, #0
 8003460:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003462:	f107 0314 	add.w	r3, r7, #20
 8003466:	4619      	mov	r1, r3
 8003468:	4805      	ldr	r0, [pc, #20]	; (8003480 <HAL_DAC_MspInit+0x88>)
 800346a:	f004 fa81 	bl	8007970 <HAL_GPIO_Init>
  /* USER CODE BEGIN DAC1_MspInit 1 */

  /* USER CODE END DAC1_MspInit 1 */
  }

}
 800346e:	bf00      	nop
 8003470:	3728      	adds	r7, #40	; 0x28
 8003472:	46bd      	mov	sp, r7
 8003474:	bd80      	pop	{r7, pc}
 8003476:	bf00      	nop
 8003478:	40007400 	.word	0x40007400
 800347c:	58024400 	.word	0x58024400
 8003480:	58020000 	.word	0x58020000

08003484 <HAL_HRTIM_MspInit>:
* This function configures the hardware resources used in this example
* @param hhrtim: HRTIM handle pointer
* @retval None
*/
void HAL_HRTIM_MspInit(HRTIM_HandleTypeDef* hhrtim)
{
 8003484:	b580      	push	{r7, lr}
 8003486:	b0b4      	sub	sp, #208	; 0xd0
 8003488:	af00      	add	r7, sp, #0
 800348a:	6078      	str	r0, [r7, #4]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 800348c:	f107 0310 	add.w	r3, r7, #16
 8003490:	22c0      	movs	r2, #192	; 0xc0
 8003492:	2100      	movs	r1, #0
 8003494:	4618      	mov	r0, r3
 8003496:	f016 fe39 	bl	801a10c <memset>
  if(hhrtim->Instance==HRTIM1)
 800349a:	687b      	ldr	r3, [r7, #4]
 800349c:	681b      	ldr	r3, [r3, #0]
 800349e:	4a1c      	ldr	r2, [pc, #112]	; (8003510 <HAL_HRTIM_MspInit+0x8c>)
 80034a0:	4293      	cmp	r3, r2
 80034a2:	d131      	bne.n	8003508 <HAL_HRTIM_MspInit+0x84>

  /* USER CODE END HRTIM1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_HRTIM1;
 80034a4:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80034a8:	f04f 0300 	mov.w	r3, #0
 80034ac:	e9c7 2304 	strd	r2, r3, [r7, #16]
    PeriphClkInitStruct.Hrtim1ClockSelection = RCC_HRTIM1CLK_TIMCLK;
 80034b0:	2300      	movs	r3, #0
 80034b2:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80034b6:	f107 0310 	add.w	r3, r7, #16
 80034ba:	4618      	mov	r0, r3
 80034bc:	f007 fbd6 	bl	800ac6c <HAL_RCCEx_PeriphCLKConfig>
 80034c0:	4603      	mov	r3, r0
 80034c2:	2b00      	cmp	r3, #0
 80034c4:	d001      	beq.n	80034ca <HAL_HRTIM_MspInit+0x46>
    {
      Error_Handler();
 80034c6:	f7ff fee5 	bl	8003294 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_HRTIM1_CLK_ENABLE();
 80034ca:	4b12      	ldr	r3, [pc, #72]	; (8003514 <HAL_HRTIM_MspInit+0x90>)
 80034cc:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 80034d0:	4a10      	ldr	r2, [pc, #64]	; (8003514 <HAL_HRTIM_MspInit+0x90>)
 80034d2:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 80034d6:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 80034da:	4b0e      	ldr	r3, [pc, #56]	; (8003514 <HAL_HRTIM_MspInit+0x90>)
 80034dc:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 80034e0:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80034e4:	60fb      	str	r3, [r7, #12]
 80034e6:	68fb      	ldr	r3, [r7, #12]
    /* HRTIM1 interrupt Init */
    HAL_NVIC_SetPriority(HRTIM1_TIMA_IRQn, 0, 0);
 80034e8:	2200      	movs	r2, #0
 80034ea:	2100      	movs	r1, #0
 80034ec:	2068      	movs	r0, #104	; 0x68
 80034ee:	f002 fcb6 	bl	8005e5e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(HRTIM1_TIMA_IRQn);
 80034f2:	2068      	movs	r0, #104	; 0x68
 80034f4:	f002 fccd 	bl	8005e92 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(HRTIM1_TIME_IRQn, 0, 0);
 80034f8:	2200      	movs	r2, #0
 80034fa:	2100      	movs	r1, #0
 80034fc:	206c      	movs	r0, #108	; 0x6c
 80034fe:	f002 fcae 	bl	8005e5e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(HRTIM1_TIME_IRQn);
 8003502:	206c      	movs	r0, #108	; 0x6c
 8003504:	f002 fcc5 	bl	8005e92 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN HRTIM1_MspInit 1 */

  /* USER CODE END HRTIM1_MspInit 1 */
  }

}
 8003508:	bf00      	nop
 800350a:	37d0      	adds	r7, #208	; 0xd0
 800350c:	46bd      	mov	sp, r7
 800350e:	bd80      	pop	{r7, pc}
 8003510:	40017400 	.word	0x40017400
 8003514:	58024400 	.word	0x58024400

08003518 <HAL_HRTIM_MspPostInit>:

void HAL_HRTIM_MspPostInit(HRTIM_HandleTypeDef* hhrtim)
{
 8003518:	b580      	push	{r7, lr}
 800351a:	b08a      	sub	sp, #40	; 0x28
 800351c:	af00      	add	r7, sp, #0
 800351e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003520:	f107 0314 	add.w	r3, r7, #20
 8003524:	2200      	movs	r2, #0
 8003526:	601a      	str	r2, [r3, #0]
 8003528:	605a      	str	r2, [r3, #4]
 800352a:	609a      	str	r2, [r3, #8]
 800352c:	60da      	str	r2, [r3, #12]
 800352e:	611a      	str	r2, [r3, #16]
  if(hhrtim->Instance==HRTIM1)
 8003530:	687b      	ldr	r3, [r7, #4]
 8003532:	681b      	ldr	r3, [r3, #0]
 8003534:	4a22      	ldr	r2, [pc, #136]	; (80035c0 <HAL_HRTIM_MspPostInit+0xa8>)
 8003536:	4293      	cmp	r3, r2
 8003538:	d13d      	bne.n	80035b6 <HAL_HRTIM_MspPostInit+0x9e>
  {
  /* USER CODE BEGIN HRTIM1_MspPostInit 0 */

  /* USER CODE END HRTIM1_MspPostInit 0 */

    __HAL_RCC_GPIOG_CLK_ENABLE();
 800353a:	4b22      	ldr	r3, [pc, #136]	; (80035c4 <HAL_HRTIM_MspPostInit+0xac>)
 800353c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8003540:	4a20      	ldr	r2, [pc, #128]	; (80035c4 <HAL_HRTIM_MspPostInit+0xac>)
 8003542:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8003546:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800354a:	4b1e      	ldr	r3, [pc, #120]	; (80035c4 <HAL_HRTIM_MspPostInit+0xac>)
 800354c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8003550:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003554:	613b      	str	r3, [r7, #16]
 8003556:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8003558:	4b1a      	ldr	r3, [pc, #104]	; (80035c4 <HAL_HRTIM_MspPostInit+0xac>)
 800355a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800355e:	4a19      	ldr	r2, [pc, #100]	; (80035c4 <HAL_HRTIM_MspPostInit+0xac>)
 8003560:	f043 0304 	orr.w	r3, r3, #4
 8003564:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8003568:	4b16      	ldr	r3, [pc, #88]	; (80035c4 <HAL_HRTIM_MspPostInit+0xac>)
 800356a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800356e:	f003 0304 	and.w	r3, r3, #4
 8003572:	60fb      	str	r3, [r7, #12]
 8003574:	68fb      	ldr	r3, [r7, #12]
    /**HRTIM GPIO Configuration
    PG6     ------> HRTIM_CHE1
    PC6     ------> HRTIM_CHA1
    PC7     ------> HRTIM_CHA2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6;
 8003576:	2340      	movs	r3, #64	; 0x40
 8003578:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800357a:	2302      	movs	r3, #2
 800357c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800357e:	2300      	movs	r3, #0
 8003580:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003582:	2303      	movs	r3, #3
 8003584:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_HRTIM1;
 8003586:	2302      	movs	r3, #2
 8003588:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 800358a:	f107 0314 	add.w	r3, r7, #20
 800358e:	4619      	mov	r1, r3
 8003590:	480d      	ldr	r0, [pc, #52]	; (80035c8 <HAL_HRTIM_MspPostInit+0xb0>)
 8003592:	f004 f9ed 	bl	8007970 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8003596:	23c0      	movs	r3, #192	; 0xc0
 8003598:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800359a:	2302      	movs	r3, #2
 800359c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800359e:	2300      	movs	r3, #0
 80035a0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80035a2:	2303      	movs	r3, #3
 80035a4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_HRTIM1;
 80035a6:	2301      	movs	r3, #1
 80035a8:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80035aa:	f107 0314 	add.w	r3, r7, #20
 80035ae:	4619      	mov	r1, r3
 80035b0:	4806      	ldr	r0, [pc, #24]	; (80035cc <HAL_HRTIM_MspPostInit+0xb4>)
 80035b2:	f004 f9dd 	bl	8007970 <HAL_GPIO_Init>
  /* USER CODE BEGIN HRTIM1_MspPostInit 1 */

  /* USER CODE END HRTIM1_MspPostInit 1 */
  }

}
 80035b6:	bf00      	nop
 80035b8:	3728      	adds	r7, #40	; 0x28
 80035ba:	46bd      	mov	sp, r7
 80035bc:	bd80      	pop	{r7, pc}
 80035be:	bf00      	nop
 80035c0:	40017400 	.word	0x40017400
 80035c4:	58024400 	.word	0x58024400
 80035c8:	58021800 	.word	0x58021800
 80035cc:	58020800 	.word	0x58020800

080035d0 <HAL_LPTIM_MspInit>:
* This function configures the hardware resources used in this example
* @param hlptim: LPTIM handle pointer
* @retval None
*/
void HAL_LPTIM_MspInit(LPTIM_HandleTypeDef* hlptim)
{
 80035d0:	b580      	push	{r7, lr}
 80035d2:	b0b4      	sub	sp, #208	; 0xd0
 80035d4:	af00      	add	r7, sp, #0
 80035d6:	6078      	str	r0, [r7, #4]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80035d8:	f107 0310 	add.w	r3, r7, #16
 80035dc:	22c0      	movs	r2, #192	; 0xc0
 80035de:	2100      	movs	r1, #0
 80035e0:	4618      	mov	r0, r3
 80035e2:	f016 fd93 	bl	801a10c <memset>
  if(hlptim->Instance==LPTIM1)
 80035e6:	687b      	ldr	r3, [r7, #4]
 80035e8:	681b      	ldr	r3, [r3, #0]
 80035ea:	4a19      	ldr	r2, [pc, #100]	; (8003650 <HAL_LPTIM_MspInit+0x80>)
 80035ec:	4293      	cmp	r3, r2
 80035ee:	d12a      	bne.n	8003646 <HAL_LPTIM_MspInit+0x76>

  /* USER CODE END LPTIM1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_LPTIM1;
 80035f0:	f04f 0220 	mov.w	r2, #32
 80035f4:	f04f 0300 	mov.w	r3, #0
 80035f8:	e9c7 2304 	strd	r2, r3, [r7, #16]
    PeriphClkInitStruct.Lptim1ClockSelection = RCC_LPTIM1CLKSOURCE_LSE;
 80035fc:	f04f 5340 	mov.w	r3, #805306368	; 0x30000000
 8003600:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8003604:	f107 0310 	add.w	r3, r7, #16
 8003608:	4618      	mov	r0, r3
 800360a:	f007 fb2f 	bl	800ac6c <HAL_RCCEx_PeriphCLKConfig>
 800360e:	4603      	mov	r3, r0
 8003610:	2b00      	cmp	r3, #0
 8003612:	d001      	beq.n	8003618 <HAL_LPTIM_MspInit+0x48>
    {
      Error_Handler();
 8003614:	f7ff fe3e 	bl	8003294 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_LPTIM1_CLK_ENABLE();
 8003618:	4b0e      	ldr	r3, [pc, #56]	; (8003654 <HAL_LPTIM_MspInit+0x84>)
 800361a:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 800361e:	4a0d      	ldr	r2, [pc, #52]	; (8003654 <HAL_LPTIM_MspInit+0x84>)
 8003620:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8003624:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8003628:	4b0a      	ldr	r3, [pc, #40]	; (8003654 <HAL_LPTIM_MspInit+0x84>)
 800362a:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 800362e:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003632:	60fb      	str	r3, [r7, #12]
 8003634:	68fb      	ldr	r3, [r7, #12]
    /* LPTIM1 interrupt Init */
    HAL_NVIC_SetPriority(LPTIM1_IRQn, 0, 0);
 8003636:	2200      	movs	r2, #0
 8003638:	2100      	movs	r1, #0
 800363a:	205d      	movs	r0, #93	; 0x5d
 800363c:	f002 fc0f 	bl	8005e5e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(LPTIM1_IRQn);
 8003640:	205d      	movs	r0, #93	; 0x5d
 8003642:	f002 fc26 	bl	8005e92 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN LPTIM1_MspInit 1 */

  /* USER CODE END LPTIM1_MspInit 1 */
  }

}
 8003646:	bf00      	nop
 8003648:	37d0      	adds	r7, #208	; 0xd0
 800364a:	46bd      	mov	sp, r7
 800364c:	bd80      	pop	{r7, pc}
 800364e:	bf00      	nop
 8003650:	40002400 	.word	0x40002400
 8003654:	58024400 	.word	0x58024400

08003658 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8003658:	b480      	push	{r7}
 800365a:	b089      	sub	sp, #36	; 0x24
 800365c:	af00      	add	r7, sp, #0
 800365e:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 8003660:	687b      	ldr	r3, [r7, #4]
 8003662:	681b      	ldr	r3, [r3, #0]
 8003664:	4a35      	ldr	r2, [pc, #212]	; (800373c <HAL_TIM_Base_MspInit+0xe4>)
 8003666:	4293      	cmp	r3, r2
 8003668:	d10f      	bne.n	800368a <HAL_TIM_Base_MspInit+0x32>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 800366a:	4b35      	ldr	r3, [pc, #212]	; (8003740 <HAL_TIM_Base_MspInit+0xe8>)
 800366c:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8003670:	4a33      	ldr	r2, [pc, #204]	; (8003740 <HAL_TIM_Base_MspInit+0xe8>)
 8003672:	f043 0301 	orr.w	r3, r3, #1
 8003676:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 800367a:	4b31      	ldr	r3, [pc, #196]	; (8003740 <HAL_TIM_Base_MspInit+0xe8>)
 800367c:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8003680:	f003 0301 	and.w	r3, r3, #1
 8003684:	61fb      	str	r3, [r7, #28]
 8003686:	69fb      	ldr	r3, [r7, #28]
  /* USER CODE BEGIN TIM5_MspInit 1 */

  /* USER CODE END TIM5_MspInit 1 */
  }

}
 8003688:	e052      	b.n	8003730 <HAL_TIM_Base_MspInit+0xd8>
  else if(htim_base->Instance==TIM2)
 800368a:	687b      	ldr	r3, [r7, #4]
 800368c:	681b      	ldr	r3, [r3, #0]
 800368e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003692:	d10f      	bne.n	80036b4 <HAL_TIM_Base_MspInit+0x5c>
    __HAL_RCC_TIM2_CLK_ENABLE();
 8003694:	4b2a      	ldr	r3, [pc, #168]	; (8003740 <HAL_TIM_Base_MspInit+0xe8>)
 8003696:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 800369a:	4a29      	ldr	r2, [pc, #164]	; (8003740 <HAL_TIM_Base_MspInit+0xe8>)
 800369c:	f043 0301 	orr.w	r3, r3, #1
 80036a0:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 80036a4:	4b26      	ldr	r3, [pc, #152]	; (8003740 <HAL_TIM_Base_MspInit+0xe8>)
 80036a6:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 80036aa:	f003 0301 	and.w	r3, r3, #1
 80036ae:	61bb      	str	r3, [r7, #24]
 80036b0:	69bb      	ldr	r3, [r7, #24]
}
 80036b2:	e03d      	b.n	8003730 <HAL_TIM_Base_MspInit+0xd8>
  else if(htim_base->Instance==TIM3)
 80036b4:	687b      	ldr	r3, [r7, #4]
 80036b6:	681b      	ldr	r3, [r3, #0]
 80036b8:	4a22      	ldr	r2, [pc, #136]	; (8003744 <HAL_TIM_Base_MspInit+0xec>)
 80036ba:	4293      	cmp	r3, r2
 80036bc:	d10f      	bne.n	80036de <HAL_TIM_Base_MspInit+0x86>
    __HAL_RCC_TIM3_CLK_ENABLE();
 80036be:	4b20      	ldr	r3, [pc, #128]	; (8003740 <HAL_TIM_Base_MspInit+0xe8>)
 80036c0:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 80036c4:	4a1e      	ldr	r2, [pc, #120]	; (8003740 <HAL_TIM_Base_MspInit+0xe8>)
 80036c6:	f043 0302 	orr.w	r3, r3, #2
 80036ca:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 80036ce:	4b1c      	ldr	r3, [pc, #112]	; (8003740 <HAL_TIM_Base_MspInit+0xe8>)
 80036d0:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 80036d4:	f003 0302 	and.w	r3, r3, #2
 80036d8:	617b      	str	r3, [r7, #20]
 80036da:	697b      	ldr	r3, [r7, #20]
}
 80036dc:	e028      	b.n	8003730 <HAL_TIM_Base_MspInit+0xd8>
  else if(htim_base->Instance==TIM4)
 80036de:	687b      	ldr	r3, [r7, #4]
 80036e0:	681b      	ldr	r3, [r3, #0]
 80036e2:	4a19      	ldr	r2, [pc, #100]	; (8003748 <HAL_TIM_Base_MspInit+0xf0>)
 80036e4:	4293      	cmp	r3, r2
 80036e6:	d10f      	bne.n	8003708 <HAL_TIM_Base_MspInit+0xb0>
    __HAL_RCC_TIM4_CLK_ENABLE();
 80036e8:	4b15      	ldr	r3, [pc, #84]	; (8003740 <HAL_TIM_Base_MspInit+0xe8>)
 80036ea:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 80036ee:	4a14      	ldr	r2, [pc, #80]	; (8003740 <HAL_TIM_Base_MspInit+0xe8>)
 80036f0:	f043 0304 	orr.w	r3, r3, #4
 80036f4:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 80036f8:	4b11      	ldr	r3, [pc, #68]	; (8003740 <HAL_TIM_Base_MspInit+0xe8>)
 80036fa:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 80036fe:	f003 0304 	and.w	r3, r3, #4
 8003702:	613b      	str	r3, [r7, #16]
 8003704:	693b      	ldr	r3, [r7, #16]
}
 8003706:	e013      	b.n	8003730 <HAL_TIM_Base_MspInit+0xd8>
  else if(htim_base->Instance==TIM5)
 8003708:	687b      	ldr	r3, [r7, #4]
 800370a:	681b      	ldr	r3, [r3, #0]
 800370c:	4a0f      	ldr	r2, [pc, #60]	; (800374c <HAL_TIM_Base_MspInit+0xf4>)
 800370e:	4293      	cmp	r3, r2
 8003710:	d10e      	bne.n	8003730 <HAL_TIM_Base_MspInit+0xd8>
    __HAL_RCC_TIM5_CLK_ENABLE();
 8003712:	4b0b      	ldr	r3, [pc, #44]	; (8003740 <HAL_TIM_Base_MspInit+0xe8>)
 8003714:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8003718:	4a09      	ldr	r2, [pc, #36]	; (8003740 <HAL_TIM_Base_MspInit+0xe8>)
 800371a:	f043 0308 	orr.w	r3, r3, #8
 800371e:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8003722:	4b07      	ldr	r3, [pc, #28]	; (8003740 <HAL_TIM_Base_MspInit+0xe8>)
 8003724:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8003728:	f003 0308 	and.w	r3, r3, #8
 800372c:	60fb      	str	r3, [r7, #12]
 800372e:	68fb      	ldr	r3, [r7, #12]
}
 8003730:	bf00      	nop
 8003732:	3724      	adds	r7, #36	; 0x24
 8003734:	46bd      	mov	sp, r7
 8003736:	f85d 7b04 	ldr.w	r7, [sp], #4
 800373a:	4770      	bx	lr
 800373c:	40010000 	.word	0x40010000
 8003740:	58024400 	.word	0x58024400
 8003744:	40000400 	.word	0x40000400
 8003748:	40000800 	.word	0x40000800
 800374c:	40000c00 	.word	0x40000c00

08003750 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8003750:	b580      	push	{r7, lr}
 8003752:	b0ba      	sub	sp, #232	; 0xe8
 8003754:	af00      	add	r7, sp, #0
 8003756:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003758:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 800375c:	2200      	movs	r2, #0
 800375e:	601a      	str	r2, [r3, #0]
 8003760:	605a      	str	r2, [r3, #4]
 8003762:	609a      	str	r2, [r3, #8]
 8003764:	60da      	str	r2, [r3, #12]
 8003766:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8003768:	f107 0310 	add.w	r3, r7, #16
 800376c:	22c0      	movs	r2, #192	; 0xc0
 800376e:	2100      	movs	r1, #0
 8003770:	4618      	mov	r0, r3
 8003772:	f016 fccb 	bl	801a10c <memset>
  if(huart->Instance==USART3)
 8003776:	687b      	ldr	r3, [r7, #4]
 8003778:	681b      	ldr	r3, [r3, #0]
 800377a:	4a27      	ldr	r2, [pc, #156]	; (8003818 <HAL_UART_MspInit+0xc8>)
 800377c:	4293      	cmp	r3, r2
 800377e:	d146      	bne.n	800380e <HAL_UART_MspInit+0xbe>

  /* USER CODE END USART3_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART3;
 8003780:	f04f 0202 	mov.w	r2, #2
 8003784:	f04f 0300 	mov.w	r3, #0
 8003788:	e9c7 2304 	strd	r2, r3, [r7, #16]
    PeriphClkInitStruct.Usart234578ClockSelection = RCC_USART234578CLKSOURCE_D2PCLK1;
 800378c:	2300      	movs	r3, #0
 800378e:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8003792:	f107 0310 	add.w	r3, r7, #16
 8003796:	4618      	mov	r0, r3
 8003798:	f007 fa68 	bl	800ac6c <HAL_RCCEx_PeriphCLKConfig>
 800379c:	4603      	mov	r3, r0
 800379e:	2b00      	cmp	r3, #0
 80037a0:	d001      	beq.n	80037a6 <HAL_UART_MspInit+0x56>
    {
      Error_Handler();
 80037a2:	f7ff fd77 	bl	8003294 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 80037a6:	4b1d      	ldr	r3, [pc, #116]	; (800381c <HAL_UART_MspInit+0xcc>)
 80037a8:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 80037ac:	4a1b      	ldr	r2, [pc, #108]	; (800381c <HAL_UART_MspInit+0xcc>)
 80037ae:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80037b2:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 80037b6:	4b19      	ldr	r3, [pc, #100]	; (800381c <HAL_UART_MspInit+0xcc>)
 80037b8:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 80037bc:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80037c0:	60fb      	str	r3, [r7, #12]
 80037c2:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 80037c4:	4b15      	ldr	r3, [pc, #84]	; (800381c <HAL_UART_MspInit+0xcc>)
 80037c6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80037ca:	4a14      	ldr	r2, [pc, #80]	; (800381c <HAL_UART_MspInit+0xcc>)
 80037cc:	f043 0308 	orr.w	r3, r3, #8
 80037d0:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80037d4:	4b11      	ldr	r3, [pc, #68]	; (800381c <HAL_UART_MspInit+0xcc>)
 80037d6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80037da:	f003 0308 	and.w	r3, r3, #8
 80037de:	60bb      	str	r3, [r7, #8]
 80037e0:	68bb      	ldr	r3, [r7, #8]
    /**USART3 GPIO Configuration
    PD8     ------> USART3_TX
    PD9     ------> USART3_RX
    */
    GPIO_InitStruct.Pin = STLINK_RX_Pin|STLINK_TX_Pin;
 80037e2:	f44f 7340 	mov.w	r3, #768	; 0x300
 80037e6:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80037ea:	2302      	movs	r3, #2
 80037ec:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80037f0:	2300      	movs	r3, #0
 80037f2:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80037f6:	2300      	movs	r3, #0
 80037f8:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 80037fc:	2307      	movs	r3, #7
 80037fe:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8003802:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 8003806:	4619      	mov	r1, r3
 8003808:	4805      	ldr	r0, [pc, #20]	; (8003820 <HAL_UART_MspInit+0xd0>)
 800380a:	f004 f8b1 	bl	8007970 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 800380e:	bf00      	nop
 8003810:	37e8      	adds	r7, #232	; 0xe8
 8003812:	46bd      	mov	sp, r7
 8003814:	bd80      	pop	{r7, pc}
 8003816:	bf00      	nop
 8003818:	40004800 	.word	0x40004800
 800381c:	58024400 	.word	0x58024400
 8003820:	58020c00 	.word	0x58020c00

08003824 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8003824:	b580      	push	{r7, lr}
 8003826:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */
  /* USER CODE END NonMaskableInt_IRQn 0 */
  HAL_RCC_NMI_IRQHandler();
 8003828:	f007 fa04 	bl	800ac34 <HAL_RCC_NMI_IRQHandler>
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
	while (1) {
		Error_Handler();
 800382c:	f7ff fd32 	bl	8003294 <Error_Handler>
 8003830:	e7fc      	b.n	800382c <NMI_Handler+0x8>

08003832 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8003832:	b580      	push	{r7, lr}
 8003834:	af00      	add	r7, sp, #0

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
  {
    /* USER CODE BEGIN W1_HardFault_IRQn 0 */
	  Error_Handler();
 8003836:	f7ff fd2d 	bl	8003294 <Error_Handler>
 800383a:	e7fc      	b.n	8003836 <HardFault_Handler+0x4>

0800383c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800383c:	b580      	push	{r7, lr}
 800383e:	af00      	add	r7, sp, #0

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
  {
    /* USER CODE BEGIN W1_MemoryManagement_IRQn 0 */
	  Error_Handler();
 8003840:	f7ff fd28 	bl	8003294 <Error_Handler>
 8003844:	e7fc      	b.n	8003840 <MemManage_Handler+0x4>

08003846 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8003846:	b580      	push	{r7, lr}
 8003848:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */
  /* USER CODE END BusFault_IRQn 0 */
  while (1)
  {
    /* USER CODE BEGIN W1_BusFault_IRQn 0 */
	  Error_Handler();
 800384a:	f7ff fd23 	bl	8003294 <Error_Handler>
 800384e:	e7fc      	b.n	800384a <BusFault_Handler+0x4>

08003850 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8003850:	b580      	push	{r7, lr}
 8003852:	af00      	add	r7, sp, #0

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
  {
    /* USER CODE BEGIN W1_UsageFault_IRQn 0 */
	  Error_Handler();
 8003854:	f7ff fd1e 	bl	8003294 <Error_Handler>
 8003858:	e7fc      	b.n	8003854 <UsageFault_Handler+0x4>

0800385a <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800385a:	b480      	push	{r7}
 800385c:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800385e:	bf00      	nop
 8003860:	46bd      	mov	sp, r7
 8003862:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003866:	4770      	bx	lr

08003868 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8003868:	b480      	push	{r7}
 800386a:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800386c:	bf00      	nop
 800386e:	46bd      	mov	sp, r7
 8003870:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003874:	4770      	bx	lr

08003876 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8003876:	b480      	push	{r7}
 8003878:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800387a:	bf00      	nop
 800387c:	46bd      	mov	sp, r7
 800387e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003882:	4770      	bx	lr

08003884 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8003884:	b580      	push	{r7, lr}
 8003886:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8003888:	f000 fc2e 	bl	80040e8 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800388c:	bf00      	nop
 800388e:	bd80      	pop	{r7, pc}

08003890 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8003890:	b580      	push	{r7, lr}
 8003892:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_11);
 8003894:	f44f 6000 	mov.w	r0, #2048	; 0x800
 8003898:	f004 fa65 	bl	8007d66 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(BLUE_BUTTON_Pin);
 800389c:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 80038a0:	f004 fa61 	bl	8007d66 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 80038a4:	bf00      	nop
 80038a6:	bd80      	pop	{r7, pc}

080038a8 <LPTIM1_IRQHandler>:

/**
  * @brief This function handles LPTIM1 global interrupt.
  */
void LPTIM1_IRQHandler(void)
{
 80038a8:	b580      	push	{r7, lr}
 80038aa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN LPTIM1_IRQn 0 */
  /* USER CODE END LPTIM1_IRQn 0 */
  HAL_LPTIM_IRQHandler(&hlptim1);
 80038ac:	4802      	ldr	r0, [pc, #8]	; (80038b8 <LPTIM1_IRQHandler+0x10>)
 80038ae:	f005 fe9a 	bl	80095e6 <HAL_LPTIM_IRQHandler>
  /* USER CODE BEGIN LPTIM1_IRQn 1 */
  /* USER CODE END LPTIM1_IRQn 1 */
}
 80038b2:	bf00      	nop
 80038b4:	bd80      	pop	{r7, pc}
 80038b6:	bf00      	nop
 80038b8:	200003b0 	.word	0x200003b0

080038bc <HRTIM1_TIMA_IRQHandler>:

/**
  * @brief This function handles HRTIM timer A global interrupt.
  */
void HRTIM1_TIMA_IRQHandler(void)
{
 80038bc:	b580      	push	{r7, lr}
 80038be:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HRTIM1_TIMA_IRQn 0 */

  /* USER CODE END HRTIM1_TIMA_IRQn 0 */
  HAL_HRTIM_IRQHandler(&hhrtim,HRTIM_TIMERINDEX_TIMER_A);
 80038c0:	2100      	movs	r1, #0
 80038c2:	4802      	ldr	r0, [pc, #8]	; (80038cc <HRTIM1_TIMA_IRQHandler+0x10>)
 80038c4:	f004 fec6 	bl	8008654 <HAL_HRTIM_IRQHandler>
  /* USER CODE BEGIN HRTIM1_TIMA_IRQn 1 */

  /* USER CODE END HRTIM1_TIMA_IRQn 1 */
}
 80038c8:	bf00      	nop
 80038ca:	bd80      	pop	{r7, pc}
 80038cc:	200002d4 	.word	0x200002d4

080038d0 <HRTIM1_TIME_IRQHandler>:

/**
  * @brief This function handles HRTIM timer E global interrupt.
  */
void HRTIM1_TIME_IRQHandler(void)
{
 80038d0:	b580      	push	{r7, lr}
 80038d2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HRTIM1_TIME_IRQn 0 */

  /* USER CODE END HRTIM1_TIME_IRQn 0 */
  HAL_HRTIM_IRQHandler(&hhrtim,HRTIM_TIMERINDEX_TIMER_E);
 80038d4:	2104      	movs	r1, #4
 80038d6:	4802      	ldr	r0, [pc, #8]	; (80038e0 <HRTIM1_TIME_IRQHandler+0x10>)
 80038d8:	f004 febc 	bl	8008654 <HAL_HRTIM_IRQHandler>
  /* USER CODE BEGIN HRTIM1_TIME_IRQn 1 */

  /* USER CODE END HRTIM1_TIME_IRQn 1 */
}
 80038dc:	bf00      	nop
 80038de:	bd80      	pop	{r7, pc}
 80038e0:	200002d4 	.word	0x200002d4

080038e4 <ADC3_IRQHandler>:

/**
  * @brief This function handles ADC3 global interrupt.
  */
void ADC3_IRQHandler(void)
{
 80038e4:	b580      	push	{r7, lr}
 80038e6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ADC3_IRQn 0 */

  /* USER CODE END ADC3_IRQn 0 */
  HAL_ADC_IRQHandler(&hadc3);
 80038e8:	4802      	ldr	r0, [pc, #8]	; (80038f4 <ADC3_IRQHandler+0x10>)
 80038ea:	f001 f981 	bl	8004bf0 <HAL_ADC_IRQHandler>
  /* USER CODE BEGIN ADC3_IRQn 1 */

  /* USER CODE END ADC3_IRQn 1 */
}
 80038ee:	bf00      	nop
 80038f0:	bd80      	pop	{r7, pc}
 80038f2:	bf00      	nop
 80038f4:	2000025c 	.word	0x2000025c

080038f8 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 80038f8:	b480      	push	{r7}
 80038fa:	af00      	add	r7, sp, #0
	return 1;
 80038fc:	2301      	movs	r3, #1
}
 80038fe:	4618      	mov	r0, r3
 8003900:	46bd      	mov	sp, r7
 8003902:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003906:	4770      	bx	lr

08003908 <_kill>:

int _kill(int pid, int sig)
{
 8003908:	b480      	push	{r7}
 800390a:	b083      	sub	sp, #12
 800390c:	af00      	add	r7, sp, #0
 800390e:	6078      	str	r0, [r7, #4]
 8003910:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 8003912:	4b05      	ldr	r3, [pc, #20]	; (8003928 <_kill+0x20>)
 8003914:	2216      	movs	r2, #22
 8003916:	601a      	str	r2, [r3, #0]
	return -1;
 8003918:	f04f 33ff 	mov.w	r3, #4294967295
}
 800391c:	4618      	mov	r0, r3
 800391e:	370c      	adds	r7, #12
 8003920:	46bd      	mov	sp, r7
 8003922:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003926:	4770      	bx	lr
 8003928:	2000736c 	.word	0x2000736c

0800392c <_exit>:

void _exit (int status)
{
 800392c:	b580      	push	{r7, lr}
 800392e:	b082      	sub	sp, #8
 8003930:	af00      	add	r7, sp, #0
 8003932:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 8003934:	f04f 31ff 	mov.w	r1, #4294967295
 8003938:	6878      	ldr	r0, [r7, #4]
 800393a:	f7ff ffe5 	bl	8003908 <_kill>
	while (1) {}		/* Make sure we hang here */
 800393e:	e7fe      	b.n	800393e <_exit+0x12>

08003940 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8003940:	b580      	push	{r7, lr}
 8003942:	b086      	sub	sp, #24
 8003944:	af00      	add	r7, sp, #0
 8003946:	60f8      	str	r0, [r7, #12]
 8003948:	60b9      	str	r1, [r7, #8]
 800394a:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800394c:	2300      	movs	r3, #0
 800394e:	617b      	str	r3, [r7, #20]
 8003950:	e00a      	b.n	8003968 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8003952:	f3af 8000 	nop.w
 8003956:	4601      	mov	r1, r0
 8003958:	68bb      	ldr	r3, [r7, #8]
 800395a:	1c5a      	adds	r2, r3, #1
 800395c:	60ba      	str	r2, [r7, #8]
 800395e:	b2ca      	uxtb	r2, r1
 8003960:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8003962:	697b      	ldr	r3, [r7, #20]
 8003964:	3301      	adds	r3, #1
 8003966:	617b      	str	r3, [r7, #20]
 8003968:	697a      	ldr	r2, [r7, #20]
 800396a:	687b      	ldr	r3, [r7, #4]
 800396c:	429a      	cmp	r2, r3
 800396e:	dbf0      	blt.n	8003952 <_read+0x12>
	}

return len;
 8003970:	687b      	ldr	r3, [r7, #4]
}
 8003972:	4618      	mov	r0, r3
 8003974:	3718      	adds	r7, #24
 8003976:	46bd      	mov	sp, r7
 8003978:	bd80      	pop	{r7, pc}

0800397a <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 800397a:	b580      	push	{r7, lr}
 800397c:	b086      	sub	sp, #24
 800397e:	af00      	add	r7, sp, #0
 8003980:	60f8      	str	r0, [r7, #12]
 8003982:	60b9      	str	r1, [r7, #8]
 8003984:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8003986:	2300      	movs	r3, #0
 8003988:	617b      	str	r3, [r7, #20]
 800398a:	e009      	b.n	80039a0 <_write+0x26>
	{
		__io_putchar(*ptr++);
 800398c:	68bb      	ldr	r3, [r7, #8]
 800398e:	1c5a      	adds	r2, r3, #1
 8003990:	60ba      	str	r2, [r7, #8]
 8003992:	781b      	ldrb	r3, [r3, #0]
 8003994:	4618      	mov	r0, r3
 8003996:	f7fe fbe9 	bl	800216c <__io_putchar>
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800399a:	697b      	ldr	r3, [r7, #20]
 800399c:	3301      	adds	r3, #1
 800399e:	617b      	str	r3, [r7, #20]
 80039a0:	697a      	ldr	r2, [r7, #20]
 80039a2:	687b      	ldr	r3, [r7, #4]
 80039a4:	429a      	cmp	r2, r3
 80039a6:	dbf1      	blt.n	800398c <_write+0x12>
	}
	return len;
 80039a8:	687b      	ldr	r3, [r7, #4]
}
 80039aa:	4618      	mov	r0, r3
 80039ac:	3718      	adds	r7, #24
 80039ae:	46bd      	mov	sp, r7
 80039b0:	bd80      	pop	{r7, pc}

080039b2 <_close>:

int _close(int file)
{
 80039b2:	b480      	push	{r7}
 80039b4:	b083      	sub	sp, #12
 80039b6:	af00      	add	r7, sp, #0
 80039b8:	6078      	str	r0, [r7, #4]
	return -1;
 80039ba:	f04f 33ff 	mov.w	r3, #4294967295
}
 80039be:	4618      	mov	r0, r3
 80039c0:	370c      	adds	r7, #12
 80039c2:	46bd      	mov	sp, r7
 80039c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039c8:	4770      	bx	lr

080039ca <_fstat>:


int _fstat(int file, struct stat *st)
{
 80039ca:	b480      	push	{r7}
 80039cc:	b083      	sub	sp, #12
 80039ce:	af00      	add	r7, sp, #0
 80039d0:	6078      	str	r0, [r7, #4]
 80039d2:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 80039d4:	683b      	ldr	r3, [r7, #0]
 80039d6:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80039da:	605a      	str	r2, [r3, #4]
	return 0;
 80039dc:	2300      	movs	r3, #0
}
 80039de:	4618      	mov	r0, r3
 80039e0:	370c      	adds	r7, #12
 80039e2:	46bd      	mov	sp, r7
 80039e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039e8:	4770      	bx	lr

080039ea <_isatty>:

int _isatty(int file)
{
 80039ea:	b480      	push	{r7}
 80039ec:	b083      	sub	sp, #12
 80039ee:	af00      	add	r7, sp, #0
 80039f0:	6078      	str	r0, [r7, #4]
	return 1;
 80039f2:	2301      	movs	r3, #1
}
 80039f4:	4618      	mov	r0, r3
 80039f6:	370c      	adds	r7, #12
 80039f8:	46bd      	mov	sp, r7
 80039fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039fe:	4770      	bx	lr

08003a00 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8003a00:	b480      	push	{r7}
 8003a02:	b085      	sub	sp, #20
 8003a04:	af00      	add	r7, sp, #0
 8003a06:	60f8      	str	r0, [r7, #12]
 8003a08:	60b9      	str	r1, [r7, #8]
 8003a0a:	607a      	str	r2, [r7, #4]
	return 0;
 8003a0c:	2300      	movs	r3, #0
}
 8003a0e:	4618      	mov	r0, r3
 8003a10:	3714      	adds	r7, #20
 8003a12:	46bd      	mov	sp, r7
 8003a14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a18:	4770      	bx	lr
	...

08003a1c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8003a1c:	b480      	push	{r7}
 8003a1e:	b087      	sub	sp, #28
 8003a20:	af00      	add	r7, sp, #0
 8003a22:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8003a24:	4a14      	ldr	r2, [pc, #80]	; (8003a78 <_sbrk+0x5c>)
 8003a26:	4b15      	ldr	r3, [pc, #84]	; (8003a7c <_sbrk+0x60>)
 8003a28:	1ad3      	subs	r3, r2, r3
 8003a2a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8003a2c:	697b      	ldr	r3, [r7, #20]
 8003a2e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8003a30:	4b13      	ldr	r3, [pc, #76]	; (8003a80 <_sbrk+0x64>)
 8003a32:	681b      	ldr	r3, [r3, #0]
 8003a34:	2b00      	cmp	r3, #0
 8003a36:	d102      	bne.n	8003a3e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8003a38:	4b11      	ldr	r3, [pc, #68]	; (8003a80 <_sbrk+0x64>)
 8003a3a:	4a12      	ldr	r2, [pc, #72]	; (8003a84 <_sbrk+0x68>)
 8003a3c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8003a3e:	4b10      	ldr	r3, [pc, #64]	; (8003a80 <_sbrk+0x64>)
 8003a40:	681a      	ldr	r2, [r3, #0]
 8003a42:	687b      	ldr	r3, [r7, #4]
 8003a44:	4413      	add	r3, r2
 8003a46:	693a      	ldr	r2, [r7, #16]
 8003a48:	429a      	cmp	r2, r3
 8003a4a:	d205      	bcs.n	8003a58 <_sbrk+0x3c>
  {
    errno = ENOMEM;
 8003a4c:	4b0e      	ldr	r3, [pc, #56]	; (8003a88 <_sbrk+0x6c>)
 8003a4e:	220c      	movs	r2, #12
 8003a50:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8003a52:	f04f 33ff 	mov.w	r3, #4294967295
 8003a56:	e009      	b.n	8003a6c <_sbrk+0x50>
  }

  prev_heap_end = __sbrk_heap_end;
 8003a58:	4b09      	ldr	r3, [pc, #36]	; (8003a80 <_sbrk+0x64>)
 8003a5a:	681b      	ldr	r3, [r3, #0]
 8003a5c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8003a5e:	4b08      	ldr	r3, [pc, #32]	; (8003a80 <_sbrk+0x64>)
 8003a60:	681a      	ldr	r2, [r3, #0]
 8003a62:	687b      	ldr	r3, [r7, #4]
 8003a64:	4413      	add	r3, r2
 8003a66:	4a06      	ldr	r2, [pc, #24]	; (8003a80 <_sbrk+0x64>)
 8003a68:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8003a6a:	68fb      	ldr	r3, [r7, #12]
}
 8003a6c:	4618      	mov	r0, r3
 8003a6e:	371c      	adds	r7, #28
 8003a70:	46bd      	mov	sp, r7
 8003a72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a76:	4770      	bx	lr
 8003a78:	20020000 	.word	0x20020000
 8003a7c:	00000400 	.word	0x00000400
 8003a80:	20000688 	.word	0x20000688
 8003a84:	20007380 	.word	0x20007380
 8003a88:	2000736c 	.word	0x2000736c

08003a8c <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8003a8c:	b480      	push	{r7}
 8003a8e:	b083      	sub	sp, #12
 8003a90:	af00      	add	r7, sp, #0
 __IO uint32_t tmpreg;
#endif /* DATA_IN_D2_SRAM */

  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8003a92:	4b3f      	ldr	r3, [pc, #252]	; (8003b90 <SystemInit+0x104>)
 8003a94:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003a98:	4a3d      	ldr	r2, [pc, #244]	; (8003b90 <SystemInit+0x104>)
 8003a9a:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8003a9e:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/

   /* Increasing the CPU frequency */
  if(FLASH_LATENCY_DEFAULT  > (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 8003aa2:	4b3c      	ldr	r3, [pc, #240]	; (8003b94 <SystemInit+0x108>)
 8003aa4:	681b      	ldr	r3, [r3, #0]
 8003aa6:	f003 030f 	and.w	r3, r3, #15
 8003aaa:	2b06      	cmp	r3, #6
 8003aac:	d807      	bhi.n	8003abe <SystemInit+0x32>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */

	  MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 8003aae:	4b39      	ldr	r3, [pc, #228]	; (8003b94 <SystemInit+0x108>)
 8003ab0:	681b      	ldr	r3, [r3, #0]
 8003ab2:	f023 030f 	bic.w	r3, r3, #15
 8003ab6:	4a37      	ldr	r2, [pc, #220]	; (8003b94 <SystemInit+0x108>)
 8003ab8:	f043 0307 	orr.w	r3, r3, #7
 8003abc:	6013      	str	r3, [r2, #0]
  }

  /* Set HSION bit */
  RCC->CR |= RCC_CR_HSION;
 8003abe:	4b36      	ldr	r3, [pc, #216]	; (8003b98 <SystemInit+0x10c>)
 8003ac0:	681b      	ldr	r3, [r3, #0]
 8003ac2:	4a35      	ldr	r2, [pc, #212]	; (8003b98 <SystemInit+0x10c>)
 8003ac4:	f043 0301 	orr.w	r3, r3, #1
 8003ac8:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 8003aca:	4b33      	ldr	r3, [pc, #204]	; (8003b98 <SystemInit+0x10c>)
 8003acc:	2200      	movs	r2, #0
 8003ace:	611a      	str	r2, [r3, #16]

  /* Reset HSEON, HSECSSON, CSION, HSI48ON, CSIKERON, PLL1ON, PLL2ON and PLL3ON bits */
  RCC->CR &= 0xEAF6ED7FU;
 8003ad0:	4b31      	ldr	r3, [pc, #196]	; (8003b98 <SystemInit+0x10c>)
 8003ad2:	681a      	ldr	r2, [r3, #0]
 8003ad4:	4930      	ldr	r1, [pc, #192]	; (8003b98 <SystemInit+0x10c>)
 8003ad6:	4b31      	ldr	r3, [pc, #196]	; (8003b9c <SystemInit+0x110>)
 8003ad8:	4013      	ands	r3, r2
 8003ada:	600b      	str	r3, [r1, #0]

   /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLASH_LATENCY_DEFAULT  < (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 8003adc:	4b2d      	ldr	r3, [pc, #180]	; (8003b94 <SystemInit+0x108>)
 8003ade:	681b      	ldr	r3, [r3, #0]
 8003ae0:	f003 0308 	and.w	r3, r3, #8
 8003ae4:	2b00      	cmp	r3, #0
 8003ae6:	d007      	beq.n	8003af8 <SystemInit+0x6c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 8003ae8:	4b2a      	ldr	r3, [pc, #168]	; (8003b94 <SystemInit+0x108>)
 8003aea:	681b      	ldr	r3, [r3, #0]
 8003aec:	f023 030f 	bic.w	r3, r3, #15
 8003af0:	4a28      	ldr	r2, [pc, #160]	; (8003b94 <SystemInit+0x108>)
 8003af2:	f043 0307 	orr.w	r3, r3, #7
 8003af6:	6013      	str	r3, [r2, #0]
  }

#if defined(D3_SRAM_BASE)
  /* Reset D1CFGR register */
  RCC->D1CFGR = 0x00000000;
 8003af8:	4b27      	ldr	r3, [pc, #156]	; (8003b98 <SystemInit+0x10c>)
 8003afa:	2200      	movs	r2, #0
 8003afc:	619a      	str	r2, [r3, #24]

  /* Reset D2CFGR register */
  RCC->D2CFGR = 0x00000000;
 8003afe:	4b26      	ldr	r3, [pc, #152]	; (8003b98 <SystemInit+0x10c>)
 8003b00:	2200      	movs	r2, #0
 8003b02:	61da      	str	r2, [r3, #28]

  /* Reset D3CFGR register */
  RCC->D3CFGR = 0x00000000;
 8003b04:	4b24      	ldr	r3, [pc, #144]	; (8003b98 <SystemInit+0x10c>)
 8003b06:	2200      	movs	r2, #0
 8003b08:	621a      	str	r2, [r3, #32]

  /* Reset SRDCFGR register */
  RCC->SRDCFGR = 0x00000000;
#endif
  /* Reset PLLCKSELR register */
  RCC->PLLCKSELR = 0x02020200;
 8003b0a:	4b23      	ldr	r3, [pc, #140]	; (8003b98 <SystemInit+0x10c>)
 8003b0c:	4a24      	ldr	r2, [pc, #144]	; (8003ba0 <SystemInit+0x114>)
 8003b0e:	629a      	str	r2, [r3, #40]	; 0x28

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x01FF0000;
 8003b10:	4b21      	ldr	r3, [pc, #132]	; (8003b98 <SystemInit+0x10c>)
 8003b12:	4a24      	ldr	r2, [pc, #144]	; (8003ba4 <SystemInit+0x118>)
 8003b14:	62da      	str	r2, [r3, #44]	; 0x2c
  /* Reset PLL1DIVR register */
  RCC->PLL1DIVR = 0x01010280;
 8003b16:	4b20      	ldr	r3, [pc, #128]	; (8003b98 <SystemInit+0x10c>)
 8003b18:	4a23      	ldr	r2, [pc, #140]	; (8003ba8 <SystemInit+0x11c>)
 8003b1a:	631a      	str	r2, [r3, #48]	; 0x30
  /* Reset PLL1FRACR register */
  RCC->PLL1FRACR = 0x00000000;
 8003b1c:	4b1e      	ldr	r3, [pc, #120]	; (8003b98 <SystemInit+0x10c>)
 8003b1e:	2200      	movs	r2, #0
 8003b20:	635a      	str	r2, [r3, #52]	; 0x34

  /* Reset PLL2DIVR register */
  RCC->PLL2DIVR = 0x01010280;
 8003b22:	4b1d      	ldr	r3, [pc, #116]	; (8003b98 <SystemInit+0x10c>)
 8003b24:	4a20      	ldr	r2, [pc, #128]	; (8003ba8 <SystemInit+0x11c>)
 8003b26:	639a      	str	r2, [r3, #56]	; 0x38

  /* Reset PLL2FRACR register */

  RCC->PLL2FRACR = 0x00000000;
 8003b28:	4b1b      	ldr	r3, [pc, #108]	; (8003b98 <SystemInit+0x10c>)
 8003b2a:	2200      	movs	r2, #0
 8003b2c:	63da      	str	r2, [r3, #60]	; 0x3c
  /* Reset PLL3DIVR register */
  RCC->PLL3DIVR = 0x01010280;
 8003b2e:	4b1a      	ldr	r3, [pc, #104]	; (8003b98 <SystemInit+0x10c>)
 8003b30:	4a1d      	ldr	r2, [pc, #116]	; (8003ba8 <SystemInit+0x11c>)
 8003b32:	641a      	str	r2, [r3, #64]	; 0x40

  /* Reset PLL3FRACR register */
  RCC->PLL3FRACR = 0x00000000;
 8003b34:	4b18      	ldr	r3, [pc, #96]	; (8003b98 <SystemInit+0x10c>)
 8003b36:	2200      	movs	r2, #0
 8003b38:	645a      	str	r2, [r3, #68]	; 0x44

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8003b3a:	4b17      	ldr	r3, [pc, #92]	; (8003b98 <SystemInit+0x10c>)
 8003b3c:	681b      	ldr	r3, [r3, #0]
 8003b3e:	4a16      	ldr	r2, [pc, #88]	; (8003b98 <SystemInit+0x10c>)
 8003b40:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003b44:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 8003b46:	4b14      	ldr	r3, [pc, #80]	; (8003b98 <SystemInit+0x10c>)
 8003b48:	2200      	movs	r2, #0
 8003b4a:	661a      	str	r2, [r3, #96]	; 0x60

#if (STM32H7_DEV_ID == 0x450UL)
  /* dual core CM7 or single core line */
  if((DBGMCU->IDCODE & 0xFFFF0000U) < 0x20000000U)
 8003b4c:	4b17      	ldr	r3, [pc, #92]	; (8003bac <SystemInit+0x120>)
 8003b4e:	681a      	ldr	r2, [r3, #0]
 8003b50:	4b17      	ldr	r3, [pc, #92]	; (8003bb0 <SystemInit+0x124>)
 8003b52:	4013      	ands	r3, r2
 8003b54:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8003b58:	d202      	bcs.n	8003b60 <SystemInit+0xd4>
  {
    /* if stm32h7 revY*/
    /* Change  the switch matrix read issuing capability to 1 for the AXI SRAM target (Target 7) */
    *((__IO uint32_t*)0x51008108) = 0x000000001U;
 8003b5a:	4b16      	ldr	r3, [pc, #88]	; (8003bb4 <SystemInit+0x128>)
 8003b5c:	2201      	movs	r2, #1
 8003b5e:	601a      	str	r2, [r3, #0]
#endif /* STM32H7_DEV_ID */

#if defined(DATA_IN_D2_SRAM)
  /* in case of initialized data in D2 SRAM (AHB SRAM), enable the D2 SRAM clock (AHB SRAM clock) */
#if defined(RCC_AHB2ENR_D2SRAM3EN)
  RCC->AHB2ENR |= (RCC_AHB2ENR_D2SRAM1EN | RCC_AHB2ENR_D2SRAM2EN | RCC_AHB2ENR_D2SRAM3EN);
 8003b60:	4b0d      	ldr	r3, [pc, #52]	; (8003b98 <SystemInit+0x10c>)
 8003b62:	f8d3 30dc 	ldr.w	r3, [r3, #220]	; 0xdc
 8003b66:	4a0c      	ldr	r2, [pc, #48]	; (8003b98 <SystemInit+0x10c>)
 8003b68:	f043 4360 	orr.w	r3, r3, #3758096384	; 0xe0000000
 8003b6c:	f8c2 30dc 	str.w	r3, [r2, #220]	; 0xdc
  RCC->AHB2ENR |= (RCC_AHB2ENR_D2SRAM1EN | RCC_AHB2ENR_D2SRAM2EN);
#else
  RCC->AHB2ENR |= (RCC_AHB2ENR_AHBSRAM1EN | RCC_AHB2ENR_AHBSRAM2EN);
#endif /* RCC_AHB2ENR_D2SRAM3EN */

  tmpreg = RCC->AHB2ENR;
 8003b70:	4b09      	ldr	r3, [pc, #36]	; (8003b98 <SystemInit+0x10c>)
 8003b72:	f8d3 30dc 	ldr.w	r3, [r3, #220]	; 0xdc
 8003b76:	607b      	str	r3, [r7, #4]
  (void) tmpreg;
 8003b78:	687b      	ldr	r3, [r7, #4]
  /*
   * Disable the FMC bank1 (enabled after reset).
   * This, prevents CPU speculation access on this bank which blocks the use of FMC during
   * 24us. During this time the others FMC master (such as LTDC) cannot use it!
   */
  FMC_Bank1_R->BTCR[0] = 0x000030D2;
 8003b7a:	4b0f      	ldr	r3, [pc, #60]	; (8003bb8 <SystemInit+0x12c>)
 8003b7c:	f243 02d2 	movw	r2, #12498	; 0x30d2
 8003b80:	601a      	str	r2, [r3, #0]
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal D1 AXI-RAM or in Internal FLASH */
#endif /* USER_VECT_TAB_ADDRESS */

#endif /*DUAL_CORE && CORE_CM4*/
}
 8003b82:	bf00      	nop
 8003b84:	370c      	adds	r7, #12
 8003b86:	46bd      	mov	sp, r7
 8003b88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b8c:	4770      	bx	lr
 8003b8e:	bf00      	nop
 8003b90:	e000ed00 	.word	0xe000ed00
 8003b94:	52002000 	.word	0x52002000
 8003b98:	58024400 	.word	0x58024400
 8003b9c:	eaf6ed7f 	.word	0xeaf6ed7f
 8003ba0:	02020200 	.word	0x02020200
 8003ba4:	01ff0000 	.word	0x01ff0000
 8003ba8:	01010280 	.word	0x01010280
 8003bac:	5c001000 	.word	0x5c001000
 8003bb0:	ffff0000 	.word	0xffff0000
 8003bb4:	51008108 	.word	0x51008108
 8003bb8:	52004000 	.word	0x52004000

08003bbc <HAL_LPTIM_AutoReloadMatchCallback>:
//		}
//
//	}
//}

void HAL_LPTIM_AutoReloadMatchCallback(LPTIM_HandleTypeDef *hlptim){
 8003bbc:	b580      	push	{r7, lr}
 8003bbe:	b082      	sub	sp, #8
 8003bc0:	af00      	add	r7, sp, #0
 8003bc2:	6078      	str	r0, [r7, #4]
	HAL_GPIO_TogglePin(LD1_GPIO_Port, LD1_Pin); //toggle green LED
 8003bc4:	2101      	movs	r1, #1
 8003bc6:	4803      	ldr	r0, [pc, #12]	; (8003bd4 <HAL_LPTIM_AutoReloadMatchCallback+0x18>)
 8003bc8:	f004 f8b3 	bl	8007d32 <HAL_GPIO_TogglePin>
}
 8003bcc:	bf00      	nop
 8003bce:	3708      	adds	r7, #8
 8003bd0:	46bd      	mov	sp, r7
 8003bd2:	bd80      	pop	{r7, pc}
 8003bd4:	58020400 	.word	0x58020400

08003bd8 <HAL_HRTIM_Compare2EventCallback>:

void HAL_HRTIM_Compare2EventCallback(HRTIM_HandleTypeDef *hhrtim, uint32_t TimerIdx) {
 8003bd8:	b480      	push	{r7}
 8003bda:	b083      	sub	sp, #12
 8003bdc:	af00      	add	r7, sp, #0
 8003bde:	6078      	str	r0, [r7, #4]
 8003be0:	6039      	str	r1, [r7, #0]
		const struct AttenuatorSettings a = {0,0,0,0,0,1,0}; // 8 dB
		set_aom_atten(a);
#endif //ATTENUATOR_CODE
	}

}
 8003be2:	bf00      	nop
 8003be4:	370c      	adds	r7, #12
 8003be6:	46bd      	mov	sp, r7
 8003be8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bec:	4770      	bx	lr
	...

08003bf0 <HAL_HRTIM_Compare3EventCallback>:

void HAL_HRTIM_Compare3EventCallback(HRTIM_HandleTypeDef *hhrtim, uint32_t TimerIdx) {
 8003bf0:	b580      	push	{r7, lr}
 8003bf2:	b088      	sub	sp, #32
 8003bf4:	af00      	add	r7, sp, #0
 8003bf6:	6078      	str	r0, [r7, #4]
 8003bf8:	6039      	str	r1, [r7, #0]

	/* Called at the end of a POP cycle */
	if (TimerIdx == HRTIM_TIMERINDEX_TIMER_A) {
 8003bfa:	683b      	ldr	r3, [r7, #0]
 8003bfc:	2b00      	cmp	r3, #0
 8003bfe:	d15d      	bne.n	8003cbc <HAL_HRTIM_Compare3EventCallback+0xcc>
		/* Reset the attenuator to 0 dB */
		const struct AttenuatorSettings a = { 0, 0, 0, 0, 0, 0, 0 }; // 0 dB
		set_aom_atten(a);
#endif //ATTENUATOR_CODE

		const double start_freq = ((long)(sweep_settings.req_start_freq/sweep_settings.step_size)) * sweep_settings.step_size;
 8003c00:	4b30      	ldr	r3, [pc, #192]	; (8003cc4 <HAL_HRTIM_Compare3EventCallback+0xd4>)
 8003c02:	ed93 5b00 	vldr	d5, [r3]
 8003c06:	4b2f      	ldr	r3, [pc, #188]	; (8003cc4 <HAL_HRTIM_Compare3EventCallback+0xd4>)
 8003c08:	ed93 6b04 	vldr	d6, [r3, #16]
 8003c0c:	ee85 7b06 	vdiv.f64	d7, d5, d6
 8003c10:	eefd 7bc7 	vcvt.s32.f64	s15, d7
 8003c14:	eeb8 6be7 	vcvt.f64.s32	d6, s15
 8003c18:	4b2a      	ldr	r3, [pc, #168]	; (8003cc4 <HAL_HRTIM_Compare3EventCallback+0xd4>)
 8003c1a:	ed93 7b04 	vldr	d7, [r3, #16]
 8003c1e:	ee26 7b07 	vmul.f64	d7, d6, d7
 8003c22:	ed87 7b06 	vstr	d7, [r7, #24]
		const double stop_freq = ((long)((sweep_settings.req_stop_freq/sweep_settings.step_size) + 0.5)) * sweep_settings.step_size;
 8003c26:	4b27      	ldr	r3, [pc, #156]	; (8003cc4 <HAL_HRTIM_Compare3EventCallback+0xd4>)
 8003c28:	ed93 5b02 	vldr	d5, [r3, #8]
 8003c2c:	4b25      	ldr	r3, [pc, #148]	; (8003cc4 <HAL_HRTIM_Compare3EventCallback+0xd4>)
 8003c2e:	ed93 6b04 	vldr	d6, [r3, #16]
 8003c32:	ee85 7b06 	vdiv.f64	d7, d5, d6
 8003c36:	eeb6 6b00 	vmov.f64	d6, #96	; 0x3f000000  0.5
 8003c3a:	ee37 7b06 	vadd.f64	d7, d7, d6
 8003c3e:	eefd 7bc7 	vcvt.s32.f64	s15, d7
 8003c42:	eeb8 6be7 	vcvt.f64.s32	d6, s15
 8003c46:	4b1f      	ldr	r3, [pc, #124]	; (8003cc4 <HAL_HRTIM_Compare3EventCallback+0xd4>)
 8003c48:	ed93 7b04 	vldr	d7, [r3, #16]
 8003c4c:	ee26 7b07 	vmul.f64	d7, d6, d7
 8003c50:	ed87 7b04 	vstr	d7, [r7, #16]
		const uint32_t num_points = ((stop_freq - start_freq)/sweep_settings.step_size) + 1;
 8003c54:	ed97 6b04 	vldr	d6, [r7, #16]
 8003c58:	ed97 7b06 	vldr	d7, [r7, #24]
 8003c5c:	ee36 5b47 	vsub.f64	d5, d6, d7
 8003c60:	4b18      	ldr	r3, [pc, #96]	; (8003cc4 <HAL_HRTIM_Compare3EventCallback+0xd4>)
 8003c62:	ed93 6b04 	vldr	d6, [r3, #16]
 8003c66:	ee85 7b06 	vdiv.f64	d7, d5, d6
 8003c6a:	eeb7 6b00 	vmov.f64	d6, #112	; 0x3f800000  1.0
 8003c6e:	ee37 7b06 	vadd.f64	d7, d7, d6
 8003c72:	eefc 7bc7 	vcvt.u32.f64	s15, d7
 8003c76:	ee17 3a90 	vmov	r3, s15
 8003c7a:	60fb      	str	r3, [r7, #12]
		static uint32_t i = 0;

		/* Configure the Microwave frequency */
		if (i == num_points) {
 8003c7c:	4b12      	ldr	r3, [pc, #72]	; (8003cc8 <HAL_HRTIM_Compare3EventCallback+0xd8>)
 8003c7e:	681b      	ldr	r3, [r3, #0]
 8003c80:	68fa      	ldr	r2, [r7, #12]
 8003c82:	429a      	cmp	r2, r3
 8003c84:	d106      	bne.n	8003c94 <HAL_HRTIM_Compare3EventCallback+0xa4>
			stop_pop();
 8003c86:	f018 f887 	bl	801bd98 <__stop_pop_veneer>
			i = 0;
 8003c8a:	4b0f      	ldr	r3, [pc, #60]	; (8003cc8 <HAL_HRTIM_Compare3EventCallback+0xd8>)
 8003c8c:	2200      	movs	r2, #0
 8003c8e:	601a      	str	r2, [r3, #0]
			start_pop();
 8003c90:	f018 f87a 	bl	801bd88 <__start_pop_veneer>

#ifdef SYNTH_ENABLE
		set_frequency_hz(start_freq + (i * sweep_settings.step_size));
#endif

		i = i + 1;
 8003c94:	4b0c      	ldr	r3, [pc, #48]	; (8003cc8 <HAL_HRTIM_Compare3EventCallback+0xd8>)
 8003c96:	681b      	ldr	r3, [r3, #0]
 8003c98:	3301      	adds	r3, #1
 8003c9a:	4a0b      	ldr	r2, [pc, #44]	; (8003cc8 <HAL_HRTIM_Compare3EventCallback+0xd8>)
 8003c9c:	6013      	str	r3, [r2, #0]

		pop_cycle_count = pop_cycle_count + 1;
 8003c9e:	4b0b      	ldr	r3, [pc, #44]	; (8003ccc <HAL_HRTIM_Compare3EventCallback+0xdc>)
 8003ca0:	681b      	ldr	r3, [r3, #0]
 8003ca2:	3301      	adds	r3, #1
 8003ca4:	4a09      	ldr	r2, [pc, #36]	; (8003ccc <HAL_HRTIM_Compare3EventCallback+0xdc>)
 8003ca6:	6013      	str	r3, [r2, #0]
		HAL_GPIO_TogglePin(LD2_GPIO_Port, LD2_Pin); //toggle amber LED
 8003ca8:	2102      	movs	r1, #2
 8003caa:	4809      	ldr	r0, [pc, #36]	; (8003cd0 <HAL_HRTIM_Compare3EventCallback+0xe0>)
 8003cac:	f004 f841 	bl	8007d32 <HAL_GPIO_TogglePin>
		printf("POP Cycle %lu done.\r\n", pop_cycle_count);
 8003cb0:	4b06      	ldr	r3, [pc, #24]	; (8003ccc <HAL_HRTIM_Compare3EventCallback+0xdc>)
 8003cb2:	681b      	ldr	r3, [r3, #0]
 8003cb4:	4619      	mov	r1, r3
 8003cb6:	4807      	ldr	r0, [pc, #28]	; (8003cd4 <HAL_HRTIM_Compare3EventCallback+0xe4>)
 8003cb8:	f016 f8d2 	bl	8019e60 <iprintf>

	/* Called when the second microwave pulse goes high */
	if (TimerIdx == HRTIM_TIMERINDEX_TIMER_E) {
	}

}
 8003cbc:	bf00      	nop
 8003cbe:	3720      	adds	r7, #32
 8003cc0:	46bd      	mov	sp, r7
 8003cc2:	bd80      	pop	{r7, pc}
 8003cc4:	0801f3a0 	.word	0x0801f3a0
 8003cc8:	20000694 	.word	0x20000694
 8003ccc:	2000068c 	.word	0x2000068c
 8003cd0:	58021000 	.word	0x58021000
 8003cd4:	0801c9a0 	.word	0x0801c9a0

08003cd8 <HAL_HRTIM_RepetitionEventCallback>:

void HAL_HRTIM_RepetitionEventCallback(HRTIM_HandleTypeDef *hhrtim,
		uint32_t TimerIdx) {
 8003cd8:	b480      	push	{r7}
 8003cda:	b083      	sub	sp, #12
 8003cdc:	af00      	add	r7, sp, #0
 8003cde:	6078      	str	r0, [r7, #4]
 8003ce0:	6039      	str	r1, [r7, #0]

	/* Called at the start of the next POP cycle */
	if (TimerIdx == HRTIM_TIMERINDEX_TIMER_A) {
	}
}
 8003ce2:	bf00      	nop
 8003ce4:	370c      	adds	r7, #12
 8003ce6:	46bd      	mov	sp, r7
 8003ce8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cec:	4770      	bx	lr
	...

08003cf0 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack      /* set stack pointer */
 8003cf0:	f8df d034 	ldr.w	sp, [pc, #52]	; 8003d28 <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit
 8003cf4:	f7ff feca 	bl	8003a8c <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8003cf8:	480c      	ldr	r0, [pc, #48]	; (8003d2c <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8003cfa:	490d      	ldr	r1, [pc, #52]	; (8003d30 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8003cfc:	4a0d      	ldr	r2, [pc, #52]	; (8003d34 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8003cfe:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8003d00:	e002      	b.n	8003d08 <LoopCopyDataInit>

08003d02 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8003d02:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8003d04:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8003d06:	3304      	adds	r3, #4

08003d08 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8003d08:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8003d0a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8003d0c:	d3f9      	bcc.n	8003d02 <CopyDataInit>
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8003d0e:	4a0a      	ldr	r2, [pc, #40]	; (8003d38 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8003d10:	4c0a      	ldr	r4, [pc, #40]	; (8003d3c <LoopFillZerobss+0x22>)
  movs r3, #0
 8003d12:	2300      	movs	r3, #0
  b LoopFillZerobss
 8003d14:	e001      	b.n	8003d1a <LoopFillZerobss>

08003d16 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8003d16:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8003d18:	3204      	adds	r2, #4

08003d1a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8003d1a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8003d1c:	d3fb      	bcc.n	8003d16 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8003d1e:	f016 fa47 	bl	801a1b0 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8003d22:	f7fe fa35 	bl	8002190 <main>
  bx  lr
 8003d26:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8003d28:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8003d2c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8003d30:	2000022c 	.word	0x2000022c
  ldr r2, =_sidata
 8003d34:	0801f8b8 	.word	0x0801f8b8
  ldr r2, =_sbss
 8003d38:	20000230 	.word	0x20000230
  ldr r4, =_ebss
 8003d3c:	2000737c 	.word	0x2000737c

08003d40 <ADC_IRQHandler>:
 * @retval None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8003d40:	e7fe      	b.n	8003d40 <ADC_IRQHandler>

08003d42 <LAN8742_RegisterBusIO>:
  * @param  ioctx: holds device IO functions.  
  * @retval LAN8742_STATUS_OK  if OK
  *         LAN8742_STATUS_ERROR if missing mandatory function
  */
int32_t  LAN8742_RegisterBusIO(lan8742_Object_t *pObj, lan8742_IOCtx_t *ioctx)
{
 8003d42:	b480      	push	{r7}
 8003d44:	b083      	sub	sp, #12
 8003d46:	af00      	add	r7, sp, #0
 8003d48:	6078      	str	r0, [r7, #4]
 8003d4a:	6039      	str	r1, [r7, #0]
  if(!pObj || !ioctx->ReadReg || !ioctx->WriteReg || !ioctx->GetTick)
 8003d4c:	687b      	ldr	r3, [r7, #4]
 8003d4e:	2b00      	cmp	r3, #0
 8003d50:	d00b      	beq.n	8003d6a <LAN8742_RegisterBusIO+0x28>
 8003d52:	683b      	ldr	r3, [r7, #0]
 8003d54:	68db      	ldr	r3, [r3, #12]
 8003d56:	2b00      	cmp	r3, #0
 8003d58:	d007      	beq.n	8003d6a <LAN8742_RegisterBusIO+0x28>
 8003d5a:	683b      	ldr	r3, [r7, #0]
 8003d5c:	689b      	ldr	r3, [r3, #8]
 8003d5e:	2b00      	cmp	r3, #0
 8003d60:	d003      	beq.n	8003d6a <LAN8742_RegisterBusIO+0x28>
 8003d62:	683b      	ldr	r3, [r7, #0]
 8003d64:	691b      	ldr	r3, [r3, #16]
 8003d66:	2b00      	cmp	r3, #0
 8003d68:	d102      	bne.n	8003d70 <LAN8742_RegisterBusIO+0x2e>
  {
    return LAN8742_STATUS_ERROR;
 8003d6a:	f04f 33ff 	mov.w	r3, #4294967295
 8003d6e:	e014      	b.n	8003d9a <LAN8742_RegisterBusIO+0x58>
  }
  
  pObj->IO.Init = ioctx->Init;
 8003d70:	683b      	ldr	r3, [r7, #0]
 8003d72:	681a      	ldr	r2, [r3, #0]
 8003d74:	687b      	ldr	r3, [r7, #4]
 8003d76:	609a      	str	r2, [r3, #8]
  pObj->IO.DeInit = ioctx->DeInit;
 8003d78:	683b      	ldr	r3, [r7, #0]
 8003d7a:	685a      	ldr	r2, [r3, #4]
 8003d7c:	687b      	ldr	r3, [r7, #4]
 8003d7e:	60da      	str	r2, [r3, #12]
  pObj->IO.ReadReg = ioctx->ReadReg;
 8003d80:	683b      	ldr	r3, [r7, #0]
 8003d82:	68da      	ldr	r2, [r3, #12]
 8003d84:	687b      	ldr	r3, [r7, #4]
 8003d86:	615a      	str	r2, [r3, #20]
  pObj->IO.WriteReg = ioctx->WriteReg;
 8003d88:	683b      	ldr	r3, [r7, #0]
 8003d8a:	689a      	ldr	r2, [r3, #8]
 8003d8c:	687b      	ldr	r3, [r7, #4]
 8003d8e:	611a      	str	r2, [r3, #16]
  pObj->IO.GetTick = ioctx->GetTick;
 8003d90:	683b      	ldr	r3, [r7, #0]
 8003d92:	691a      	ldr	r2, [r3, #16]
 8003d94:	687b      	ldr	r3, [r7, #4]
 8003d96:	619a      	str	r2, [r3, #24]
  
  return LAN8742_STATUS_OK;
 8003d98:	2300      	movs	r3, #0
}
 8003d9a:	4618      	mov	r0, r3
 8003d9c:	370c      	adds	r7, #12
 8003d9e:	46bd      	mov	sp, r7
 8003da0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003da4:	4770      	bx	lr

08003da6 <LAN8742_Init>:
  *         LAN8742_STATUS_READ_ERROR if connot read register
  *         LAN8742_STATUS_WRITE_ERROR if connot write to register
  *         LAN8742_STATUS_RESET_TIMEOUT if cannot perform a software reset
  */
 int32_t LAN8742_Init(lan8742_Object_t *pObj)
 {
 8003da6:	b580      	push	{r7, lr}
 8003da8:	b086      	sub	sp, #24
 8003daa:	af00      	add	r7, sp, #0
 8003dac:	6078      	str	r0, [r7, #4]
   uint32_t tickstart = 0, regvalue = 0, addr = 0;
 8003dae:	2300      	movs	r3, #0
 8003db0:	60fb      	str	r3, [r7, #12]
 8003db2:	2300      	movs	r3, #0
 8003db4:	60bb      	str	r3, [r7, #8]
 8003db6:	2300      	movs	r3, #0
 8003db8:	617b      	str	r3, [r7, #20]
   int32_t status = LAN8742_STATUS_OK;
 8003dba:	2300      	movs	r3, #0
 8003dbc:	613b      	str	r3, [r7, #16]
   
   if(pObj->Is_Initialized == 0)
 8003dbe:	687b      	ldr	r3, [r7, #4]
 8003dc0:	685b      	ldr	r3, [r3, #4]
 8003dc2:	2b00      	cmp	r3, #0
 8003dc4:	d17c      	bne.n	8003ec0 <LAN8742_Init+0x11a>
   {
     if(pObj->IO.Init != 0)
 8003dc6:	687b      	ldr	r3, [r7, #4]
 8003dc8:	689b      	ldr	r3, [r3, #8]
 8003dca:	2b00      	cmp	r3, #0
 8003dcc:	d002      	beq.n	8003dd4 <LAN8742_Init+0x2e>
     {
       /* GPIO and Clocks initialization */
       pObj->IO.Init();
 8003dce:	687b      	ldr	r3, [r7, #4]
 8003dd0:	689b      	ldr	r3, [r3, #8]
 8003dd2:	4798      	blx	r3
     }
   
     /* for later check */
     pObj->DevAddr = LAN8742_MAX_DEV_ADDR + 1;
 8003dd4:	687b      	ldr	r3, [r7, #4]
 8003dd6:	2220      	movs	r2, #32
 8003dd8:	601a      	str	r2, [r3, #0]
   
     /* Get the device address from special mode register */  
     for(addr = 0; addr <= LAN8742_MAX_DEV_ADDR; addr ++)
 8003dda:	2300      	movs	r3, #0
 8003ddc:	617b      	str	r3, [r7, #20]
 8003dde:	e01c      	b.n	8003e1a <LAN8742_Init+0x74>
     {
       if(pObj->IO.ReadReg(addr, LAN8742_SMR, &regvalue) < 0)
 8003de0:	687b      	ldr	r3, [r7, #4]
 8003de2:	695b      	ldr	r3, [r3, #20]
 8003de4:	f107 0208 	add.w	r2, r7, #8
 8003de8:	2112      	movs	r1, #18
 8003dea:	6978      	ldr	r0, [r7, #20]
 8003dec:	4798      	blx	r3
 8003dee:	4603      	mov	r3, r0
 8003df0:	2b00      	cmp	r3, #0
 8003df2:	da03      	bge.n	8003dfc <LAN8742_Init+0x56>
       { 
         status = LAN8742_STATUS_READ_ERROR;
 8003df4:	f06f 0304 	mvn.w	r3, #4
 8003df8:	613b      	str	r3, [r7, #16]
         /* Can't read from this device address 
            continue with next address */
         continue;
 8003dfa:	e00b      	b.n	8003e14 <LAN8742_Init+0x6e>
       }
     
       if((regvalue & LAN8742_SMR_PHY_ADDR) == addr)
 8003dfc:	68bb      	ldr	r3, [r7, #8]
 8003dfe:	f003 031f 	and.w	r3, r3, #31
 8003e02:	697a      	ldr	r2, [r7, #20]
 8003e04:	429a      	cmp	r2, r3
 8003e06:	d105      	bne.n	8003e14 <LAN8742_Init+0x6e>
       {
         pObj->DevAddr = addr;
 8003e08:	687b      	ldr	r3, [r7, #4]
 8003e0a:	697a      	ldr	r2, [r7, #20]
 8003e0c:	601a      	str	r2, [r3, #0]
         status = LAN8742_STATUS_OK;
 8003e0e:	2300      	movs	r3, #0
 8003e10:	613b      	str	r3, [r7, #16]
         break;
 8003e12:	e005      	b.n	8003e20 <LAN8742_Init+0x7a>
     for(addr = 0; addr <= LAN8742_MAX_DEV_ADDR; addr ++)
 8003e14:	697b      	ldr	r3, [r7, #20]
 8003e16:	3301      	adds	r3, #1
 8003e18:	617b      	str	r3, [r7, #20]
 8003e1a:	697b      	ldr	r3, [r7, #20]
 8003e1c:	2b1f      	cmp	r3, #31
 8003e1e:	d9df      	bls.n	8003de0 <LAN8742_Init+0x3a>
       }
     }
   
     if(pObj->DevAddr > LAN8742_MAX_DEV_ADDR)
 8003e20:	687b      	ldr	r3, [r7, #4]
 8003e22:	681b      	ldr	r3, [r3, #0]
 8003e24:	2b1f      	cmp	r3, #31
 8003e26:	d902      	bls.n	8003e2e <LAN8742_Init+0x88>
     {
       status = LAN8742_STATUS_ADDRESS_ERROR;
 8003e28:	f06f 0302 	mvn.w	r3, #2
 8003e2c:	613b      	str	r3, [r7, #16]
     }
     
     /* if device address is matched */
     if(status == LAN8742_STATUS_OK)
 8003e2e:	693b      	ldr	r3, [r7, #16]
 8003e30:	2b00      	cmp	r3, #0
 8003e32:	d145      	bne.n	8003ec0 <LAN8742_Init+0x11a>
     {
       /* set a software reset  */
       if(pObj->IO.WriteReg(pObj->DevAddr, LAN8742_BCR, LAN8742_BCR_SOFT_RESET) >= 0)
 8003e34:	687b      	ldr	r3, [r7, #4]
 8003e36:	691b      	ldr	r3, [r3, #16]
 8003e38:	687a      	ldr	r2, [r7, #4]
 8003e3a:	6810      	ldr	r0, [r2, #0]
 8003e3c:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 8003e40:	2100      	movs	r1, #0
 8003e42:	4798      	blx	r3
 8003e44:	4603      	mov	r3, r0
 8003e46:	2b00      	cmp	r3, #0
 8003e48:	db37      	blt.n	8003eba <LAN8742_Init+0x114>
       { 
         /* get software reset status */
         if(pObj->IO.ReadReg(pObj->DevAddr, LAN8742_BCR, &regvalue) >= 0)
 8003e4a:	687b      	ldr	r3, [r7, #4]
 8003e4c:	695b      	ldr	r3, [r3, #20]
 8003e4e:	687a      	ldr	r2, [r7, #4]
 8003e50:	6810      	ldr	r0, [r2, #0]
 8003e52:	f107 0208 	add.w	r2, r7, #8
 8003e56:	2100      	movs	r1, #0
 8003e58:	4798      	blx	r3
 8003e5a:	4603      	mov	r3, r0
 8003e5c:	2b00      	cmp	r3, #0
 8003e5e:	db28      	blt.n	8003eb2 <LAN8742_Init+0x10c>
         { 
           tickstart = pObj->IO.GetTick();
 8003e60:	687b      	ldr	r3, [r7, #4]
 8003e62:	699b      	ldr	r3, [r3, #24]
 8003e64:	4798      	blx	r3
 8003e66:	4603      	mov	r3, r0
 8003e68:	60fb      	str	r3, [r7, #12]
           
           /* wait until software reset is done or timeout occured  */
           while(regvalue & LAN8742_BCR_SOFT_RESET)
 8003e6a:	e01c      	b.n	8003ea6 <LAN8742_Init+0x100>
           {
             if((pObj->IO.GetTick() - tickstart) <= LAN8742_SW_RESET_TO)
 8003e6c:	687b      	ldr	r3, [r7, #4]
 8003e6e:	699b      	ldr	r3, [r3, #24]
 8003e70:	4798      	blx	r3
 8003e72:	4603      	mov	r3, r0
 8003e74:	461a      	mov	r2, r3
 8003e76:	68fb      	ldr	r3, [r7, #12]
 8003e78:	1ad3      	subs	r3, r2, r3
 8003e7a:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 8003e7e:	d80e      	bhi.n	8003e9e <LAN8742_Init+0xf8>
             {
               if(pObj->IO.ReadReg(pObj->DevAddr, LAN8742_BCR, &regvalue) < 0)
 8003e80:	687b      	ldr	r3, [r7, #4]
 8003e82:	695b      	ldr	r3, [r3, #20]
 8003e84:	687a      	ldr	r2, [r7, #4]
 8003e86:	6810      	ldr	r0, [r2, #0]
 8003e88:	f107 0208 	add.w	r2, r7, #8
 8003e8c:	2100      	movs	r1, #0
 8003e8e:	4798      	blx	r3
 8003e90:	4603      	mov	r3, r0
 8003e92:	2b00      	cmp	r3, #0
 8003e94:	da07      	bge.n	8003ea6 <LAN8742_Init+0x100>
               { 
                 status = LAN8742_STATUS_READ_ERROR;
 8003e96:	f06f 0304 	mvn.w	r3, #4
 8003e9a:	613b      	str	r3, [r7, #16]
                 break;
 8003e9c:	e010      	b.n	8003ec0 <LAN8742_Init+0x11a>
               }
             }
             else
             {
               status = LAN8742_STATUS_RESET_TIMEOUT;
 8003e9e:	f06f 0301 	mvn.w	r3, #1
 8003ea2:	613b      	str	r3, [r7, #16]
               break;
 8003ea4:	e00c      	b.n	8003ec0 <LAN8742_Init+0x11a>
           while(regvalue & LAN8742_BCR_SOFT_RESET)
 8003ea6:	68bb      	ldr	r3, [r7, #8]
 8003ea8:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8003eac:	2b00      	cmp	r3, #0
 8003eae:	d1dd      	bne.n	8003e6c <LAN8742_Init+0xc6>
 8003eb0:	e006      	b.n	8003ec0 <LAN8742_Init+0x11a>
             }
           } 
         }
         else
         {
           status = LAN8742_STATUS_READ_ERROR;
 8003eb2:	f06f 0304 	mvn.w	r3, #4
 8003eb6:	613b      	str	r3, [r7, #16]
 8003eb8:	e002      	b.n	8003ec0 <LAN8742_Init+0x11a>
         }
       }
       else
       {
         status = LAN8742_STATUS_WRITE_ERROR;
 8003eba:	f06f 0303 	mvn.w	r3, #3
 8003ebe:	613b      	str	r3, [r7, #16]
       }
     }
   }
      
   if(status == LAN8742_STATUS_OK)
 8003ec0:	693b      	ldr	r3, [r7, #16]
 8003ec2:	2b00      	cmp	r3, #0
 8003ec4:	d112      	bne.n	8003eec <LAN8742_Init+0x146>
   {
     tickstart =  pObj->IO.GetTick();
 8003ec6:	687b      	ldr	r3, [r7, #4]
 8003ec8:	699b      	ldr	r3, [r3, #24]
 8003eca:	4798      	blx	r3
 8003ecc:	4603      	mov	r3, r0
 8003ece:	60fb      	str	r3, [r7, #12]
     
     /* Wait for 2s to perform initialization */
     while((pObj->IO.GetTick() - tickstart) <= LAN8742_INIT_TO)
 8003ed0:	bf00      	nop
 8003ed2:	687b      	ldr	r3, [r7, #4]
 8003ed4:	699b      	ldr	r3, [r3, #24]
 8003ed6:	4798      	blx	r3
 8003ed8:	4603      	mov	r3, r0
 8003eda:	461a      	mov	r2, r3
 8003edc:	68fb      	ldr	r3, [r7, #12]
 8003ede:	1ad3      	subs	r3, r2, r3
 8003ee0:	f5b3 6ffa 	cmp.w	r3, #2000	; 0x7d0
 8003ee4:	d9f5      	bls.n	8003ed2 <LAN8742_Init+0x12c>
     {
     }
     pObj->Is_Initialized = 1;
 8003ee6:	687b      	ldr	r3, [r7, #4]
 8003ee8:	2201      	movs	r2, #1
 8003eea:	605a      	str	r2, [r3, #4]
   }
   
   return status;
 8003eec:	693b      	ldr	r3, [r7, #16]
 }
 8003eee:	4618      	mov	r0, r3
 8003ef0:	3718      	adds	r7, #24
 8003ef2:	46bd      	mov	sp, r7
 8003ef4:	bd80      	pop	{r7, pc}

08003ef6 <LAN8742_GetLinkState>:
  *         LAN8742_STATUS_10MBITS_HALFDUPLEX  if 10Mb/s HD       
  *         LAN8742_STATUS_READ_ERROR if connot read register
  *         LAN8742_STATUS_WRITE_ERROR if connot write to register
  */
int32_t LAN8742_GetLinkState(lan8742_Object_t *pObj)
{
 8003ef6:	b580      	push	{r7, lr}
 8003ef8:	b084      	sub	sp, #16
 8003efa:	af00      	add	r7, sp, #0
 8003efc:	6078      	str	r0, [r7, #4]
  uint32_t readval = 0;
 8003efe:	2300      	movs	r3, #0
 8003f00:	60fb      	str	r3, [r7, #12]
  
  /* Read Status register  */
  if(pObj->IO.ReadReg(pObj->DevAddr, LAN8742_BSR, &readval) < 0)
 8003f02:	687b      	ldr	r3, [r7, #4]
 8003f04:	695b      	ldr	r3, [r3, #20]
 8003f06:	687a      	ldr	r2, [r7, #4]
 8003f08:	6810      	ldr	r0, [r2, #0]
 8003f0a:	f107 020c 	add.w	r2, r7, #12
 8003f0e:	2101      	movs	r1, #1
 8003f10:	4798      	blx	r3
 8003f12:	4603      	mov	r3, r0
 8003f14:	2b00      	cmp	r3, #0
 8003f16:	da02      	bge.n	8003f1e <LAN8742_GetLinkState+0x28>
  {
    return LAN8742_STATUS_READ_ERROR;
 8003f18:	f06f 0304 	mvn.w	r3, #4
 8003f1c:	e06e      	b.n	8003ffc <LAN8742_GetLinkState+0x106>
  }
  
  /* Read Status register again */
  if(pObj->IO.ReadReg(pObj->DevAddr, LAN8742_BSR, &readval) < 0)
 8003f1e:	687b      	ldr	r3, [r7, #4]
 8003f20:	695b      	ldr	r3, [r3, #20]
 8003f22:	687a      	ldr	r2, [r7, #4]
 8003f24:	6810      	ldr	r0, [r2, #0]
 8003f26:	f107 020c 	add.w	r2, r7, #12
 8003f2a:	2101      	movs	r1, #1
 8003f2c:	4798      	blx	r3
 8003f2e:	4603      	mov	r3, r0
 8003f30:	2b00      	cmp	r3, #0
 8003f32:	da02      	bge.n	8003f3a <LAN8742_GetLinkState+0x44>
  {
    return LAN8742_STATUS_READ_ERROR;
 8003f34:	f06f 0304 	mvn.w	r3, #4
 8003f38:	e060      	b.n	8003ffc <LAN8742_GetLinkState+0x106>
  }
  
  if((readval & LAN8742_BSR_LINK_STATUS) == 0)
 8003f3a:	68fb      	ldr	r3, [r7, #12]
 8003f3c:	f003 0304 	and.w	r3, r3, #4
 8003f40:	2b00      	cmp	r3, #0
 8003f42:	d101      	bne.n	8003f48 <LAN8742_GetLinkState+0x52>
  {
    /* Return Link Down status */
    return LAN8742_STATUS_LINK_DOWN;    
 8003f44:	2301      	movs	r3, #1
 8003f46:	e059      	b.n	8003ffc <LAN8742_GetLinkState+0x106>
  }
  
  /* Check Auto negotiaition */
  if(pObj->IO.ReadReg(pObj->DevAddr, LAN8742_BCR, &readval) < 0)
 8003f48:	687b      	ldr	r3, [r7, #4]
 8003f4a:	695b      	ldr	r3, [r3, #20]
 8003f4c:	687a      	ldr	r2, [r7, #4]
 8003f4e:	6810      	ldr	r0, [r2, #0]
 8003f50:	f107 020c 	add.w	r2, r7, #12
 8003f54:	2100      	movs	r1, #0
 8003f56:	4798      	blx	r3
 8003f58:	4603      	mov	r3, r0
 8003f5a:	2b00      	cmp	r3, #0
 8003f5c:	da02      	bge.n	8003f64 <LAN8742_GetLinkState+0x6e>
  {
    return LAN8742_STATUS_READ_ERROR;
 8003f5e:	f06f 0304 	mvn.w	r3, #4
 8003f62:	e04b      	b.n	8003ffc <LAN8742_GetLinkState+0x106>
  }
  
  if((readval & LAN8742_BCR_AUTONEGO_EN) != LAN8742_BCR_AUTONEGO_EN)
 8003f64:	68fb      	ldr	r3, [r7, #12]
 8003f66:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8003f6a:	2b00      	cmp	r3, #0
 8003f6c:	d11b      	bne.n	8003fa6 <LAN8742_GetLinkState+0xb0>
  {
    if(((readval & LAN8742_BCR_SPEED_SELECT) == LAN8742_BCR_SPEED_SELECT) && ((readval & LAN8742_BCR_DUPLEX_MODE) == LAN8742_BCR_DUPLEX_MODE)) 
 8003f6e:	68fb      	ldr	r3, [r7, #12]
 8003f70:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8003f74:	2b00      	cmp	r3, #0
 8003f76:	d006      	beq.n	8003f86 <LAN8742_GetLinkState+0x90>
 8003f78:	68fb      	ldr	r3, [r7, #12]
 8003f7a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003f7e:	2b00      	cmp	r3, #0
 8003f80:	d001      	beq.n	8003f86 <LAN8742_GetLinkState+0x90>
    {
      return LAN8742_STATUS_100MBITS_FULLDUPLEX;
 8003f82:	2302      	movs	r3, #2
 8003f84:	e03a      	b.n	8003ffc <LAN8742_GetLinkState+0x106>
    }
    else if ((readval & LAN8742_BCR_SPEED_SELECT) == LAN8742_BCR_SPEED_SELECT)
 8003f86:	68fb      	ldr	r3, [r7, #12]
 8003f88:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8003f8c:	2b00      	cmp	r3, #0
 8003f8e:	d001      	beq.n	8003f94 <LAN8742_GetLinkState+0x9e>
    {
      return LAN8742_STATUS_100MBITS_HALFDUPLEX;
 8003f90:	2303      	movs	r3, #3
 8003f92:	e033      	b.n	8003ffc <LAN8742_GetLinkState+0x106>
    }        
    else if ((readval & LAN8742_BCR_DUPLEX_MODE) == LAN8742_BCR_DUPLEX_MODE)
 8003f94:	68fb      	ldr	r3, [r7, #12]
 8003f96:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003f9a:	2b00      	cmp	r3, #0
 8003f9c:	d001      	beq.n	8003fa2 <LAN8742_GetLinkState+0xac>
    {
      return LAN8742_STATUS_10MBITS_FULLDUPLEX;
 8003f9e:	2304      	movs	r3, #4
 8003fa0:	e02c      	b.n	8003ffc <LAN8742_GetLinkState+0x106>
    }
    else
    {
      return LAN8742_STATUS_10MBITS_HALFDUPLEX;
 8003fa2:	2305      	movs	r3, #5
 8003fa4:	e02a      	b.n	8003ffc <LAN8742_GetLinkState+0x106>
    }  		
  }
  else /* Auto Nego enabled */
  {
    if(pObj->IO.ReadReg(pObj->DevAddr, LAN8742_PHYSCSR, &readval) < 0)
 8003fa6:	687b      	ldr	r3, [r7, #4]
 8003fa8:	695b      	ldr	r3, [r3, #20]
 8003faa:	687a      	ldr	r2, [r7, #4]
 8003fac:	6810      	ldr	r0, [r2, #0]
 8003fae:	f107 020c 	add.w	r2, r7, #12
 8003fb2:	211f      	movs	r1, #31
 8003fb4:	4798      	blx	r3
 8003fb6:	4603      	mov	r3, r0
 8003fb8:	2b00      	cmp	r3, #0
 8003fba:	da02      	bge.n	8003fc2 <LAN8742_GetLinkState+0xcc>
    {
      return LAN8742_STATUS_READ_ERROR;
 8003fbc:	f06f 0304 	mvn.w	r3, #4
 8003fc0:	e01c      	b.n	8003ffc <LAN8742_GetLinkState+0x106>
    }
    
    /* Check if auto nego not done */
    if((readval & LAN8742_PHYSCSR_AUTONEGO_DONE) == 0)
 8003fc2:	68fb      	ldr	r3, [r7, #12]
 8003fc4:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8003fc8:	2b00      	cmp	r3, #0
 8003fca:	d101      	bne.n	8003fd0 <LAN8742_GetLinkState+0xda>
    {
      return LAN8742_STATUS_AUTONEGO_NOTDONE;
 8003fcc:	2306      	movs	r3, #6
 8003fce:	e015      	b.n	8003ffc <LAN8742_GetLinkState+0x106>
    }
    
    if((readval & LAN8742_PHYSCSR_HCDSPEEDMASK) == LAN8742_PHYSCSR_100BTX_FD)
 8003fd0:	68fb      	ldr	r3, [r7, #12]
 8003fd2:	f003 031c 	and.w	r3, r3, #28
 8003fd6:	2b18      	cmp	r3, #24
 8003fd8:	d101      	bne.n	8003fde <LAN8742_GetLinkState+0xe8>
    {
      return LAN8742_STATUS_100MBITS_FULLDUPLEX;
 8003fda:	2302      	movs	r3, #2
 8003fdc:	e00e      	b.n	8003ffc <LAN8742_GetLinkState+0x106>
    }
    else if ((readval & LAN8742_PHYSCSR_HCDSPEEDMASK) == LAN8742_PHYSCSR_100BTX_HD)
 8003fde:	68fb      	ldr	r3, [r7, #12]
 8003fe0:	f003 031c 	and.w	r3, r3, #28
 8003fe4:	2b08      	cmp	r3, #8
 8003fe6:	d101      	bne.n	8003fec <LAN8742_GetLinkState+0xf6>
    {
      return LAN8742_STATUS_100MBITS_HALFDUPLEX;
 8003fe8:	2303      	movs	r3, #3
 8003fea:	e007      	b.n	8003ffc <LAN8742_GetLinkState+0x106>
    }
    else if ((readval & LAN8742_PHYSCSR_HCDSPEEDMASK) == LAN8742_PHYSCSR_10BT_FD)
 8003fec:	68fb      	ldr	r3, [r7, #12]
 8003fee:	f003 031c 	and.w	r3, r3, #28
 8003ff2:	2b14      	cmp	r3, #20
 8003ff4:	d101      	bne.n	8003ffa <LAN8742_GetLinkState+0x104>
    {
      return LAN8742_STATUS_10MBITS_FULLDUPLEX;
 8003ff6:	2304      	movs	r3, #4
 8003ff8:	e000      	b.n	8003ffc <LAN8742_GetLinkState+0x106>
    }
    else
    {
      return LAN8742_STATUS_10MBITS_HALFDUPLEX;
 8003ffa:	2305      	movs	r3, #5
    }				
  }
}
 8003ffc:	4618      	mov	r0, r3
 8003ffe:	3710      	adds	r7, #16
 8004000:	46bd      	mov	sp, r7
 8004002:	bd80      	pop	{r7, pc}

08004004 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8004004:	b580      	push	{r7, lr}
 8004006:	b082      	sub	sp, #8
 8004008:	af00      	add	r7, sp, #0
   __HAL_ART_CONFIG_BASE_ADDRESS(0x08100000UL);  /* Configure the Cortex-M4 ART Base address to the Flash Bank 2 : */
   __HAL_ART_ENABLE();                           /* Enable the Cortex-M4 ART */
#endif /* DUAL_CORE &&  CORE_CM4 */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800400a:	2003      	movs	r0, #3
 800400c:	f001 ff1c 	bl	8005e48 <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8004010:	f006 fc3a 	bl	800a888 <HAL_RCC_GetSysClockFreq>
 8004014:	4602      	mov	r2, r0
 8004016:	4b15      	ldr	r3, [pc, #84]	; (800406c <HAL_Init+0x68>)
 8004018:	699b      	ldr	r3, [r3, #24]
 800401a:	0a1b      	lsrs	r3, r3, #8
 800401c:	f003 030f 	and.w	r3, r3, #15
 8004020:	4913      	ldr	r1, [pc, #76]	; (8004070 <HAL_Init+0x6c>)
 8004022:	5ccb      	ldrb	r3, [r1, r3]
 8004024:	f003 031f 	and.w	r3, r3, #31
 8004028:	fa22 f303 	lsr.w	r3, r2, r3
 800402c:	607b      	str	r3, [r7, #4]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

  /* Update the SystemD2Clock global variable */
#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 800402e:	4b0f      	ldr	r3, [pc, #60]	; (800406c <HAL_Init+0x68>)
 8004030:	699b      	ldr	r3, [r3, #24]
 8004032:	f003 030f 	and.w	r3, r3, #15
 8004036:	4a0e      	ldr	r2, [pc, #56]	; (8004070 <HAL_Init+0x6c>)
 8004038:	5cd3      	ldrb	r3, [r2, r3]
 800403a:	f003 031f 	and.w	r3, r3, #31
 800403e:	687a      	ldr	r2, [r7, #4]
 8004040:	fa22 f303 	lsr.w	r3, r2, r3
 8004044:	4a0b      	ldr	r2, [pc, #44]	; (8004074 <HAL_Init+0x70>)
 8004046:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8004048:	4a0b      	ldr	r2, [pc, #44]	; (8004078 <HAL_Init+0x74>)
 800404a:	687b      	ldr	r3, [r7, #4]
 800404c:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 800404e:	2000      	movs	r0, #0
 8004050:	f000 f814 	bl	800407c <HAL_InitTick>
 8004054:	4603      	mov	r3, r0
 8004056:	2b00      	cmp	r3, #0
 8004058:	d001      	beq.n	800405e <HAL_Init+0x5a>
  {
    return HAL_ERROR;
 800405a:	2301      	movs	r3, #1
 800405c:	e002      	b.n	8004064 <HAL_Init+0x60>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 800405e:	f7ff f949 	bl	80032f4 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8004062:	2300      	movs	r3, #0
}
 8004064:	4618      	mov	r0, r3
 8004066:	3708      	adds	r7, #8
 8004068:	46bd      	mov	sp, r7
 800406a:	bd80      	pop	{r7, pc}
 800406c:	58024400 	.word	0x58024400
 8004070:	0801f3b8 	.word	0x0801f3b8
 8004074:	20000014 	.word	0x20000014
 8004078:	20000010 	.word	0x20000010

0800407c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800407c:	b580      	push	{r7, lr}
 800407e:	b082      	sub	sp, #8
 8004080:	af00      	add	r7, sp, #0
 8004082:	6078      	str	r0, [r7, #4]
  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that don't take the value zero)*/
  if((uint32_t)uwTickFreq == 0UL)
 8004084:	4b15      	ldr	r3, [pc, #84]	; (80040dc <HAL_InitTick+0x60>)
 8004086:	781b      	ldrb	r3, [r3, #0]
 8004088:	2b00      	cmp	r3, #0
 800408a:	d101      	bne.n	8004090 <HAL_InitTick+0x14>
  {
    return HAL_ERROR;
 800408c:	2301      	movs	r3, #1
 800408e:	e021      	b.n	80040d4 <HAL_InitTick+0x58>
  }

    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000UL / (uint32_t)uwTickFreq)) > 0U)
 8004090:	4b13      	ldr	r3, [pc, #76]	; (80040e0 <HAL_InitTick+0x64>)
 8004092:	681a      	ldr	r2, [r3, #0]
 8004094:	4b11      	ldr	r3, [pc, #68]	; (80040dc <HAL_InitTick+0x60>)
 8004096:	781b      	ldrb	r3, [r3, #0]
 8004098:	4619      	mov	r1, r3
 800409a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800409e:	fbb3 f3f1 	udiv	r3, r3, r1
 80040a2:	fbb2 f3f3 	udiv	r3, r2, r3
 80040a6:	4618      	mov	r0, r3
 80040a8:	f001 ff01 	bl	8005eae <HAL_SYSTICK_Config>
 80040ac:	4603      	mov	r3, r0
 80040ae:	2b00      	cmp	r3, #0
 80040b0:	d001      	beq.n	80040b6 <HAL_InitTick+0x3a>
    {
      return HAL_ERROR;
 80040b2:	2301      	movs	r3, #1
 80040b4:	e00e      	b.n	80040d4 <HAL_InitTick+0x58>
    }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80040b6:	687b      	ldr	r3, [r7, #4]
 80040b8:	2b0f      	cmp	r3, #15
 80040ba:	d80a      	bhi.n	80040d2 <HAL_InitTick+0x56>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80040bc:	2200      	movs	r2, #0
 80040be:	6879      	ldr	r1, [r7, #4]
 80040c0:	f04f 30ff 	mov.w	r0, #4294967295
 80040c4:	f001 fecb 	bl	8005e5e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80040c8:	4a06      	ldr	r2, [pc, #24]	; (80040e4 <HAL_InitTick+0x68>)
 80040ca:	687b      	ldr	r3, [r7, #4]
 80040cc:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80040ce:	2300      	movs	r3, #0
 80040d0:	e000      	b.n	80040d4 <HAL_InitTick+0x58>
    return HAL_ERROR;
 80040d2:	2301      	movs	r3, #1
}
 80040d4:	4618      	mov	r0, r3
 80040d6:	3708      	adds	r7, #8
 80040d8:	46bd      	mov	sp, r7
 80040da:	bd80      	pop	{r7, pc}
 80040dc:	20000028 	.word	0x20000028
 80040e0:	20000010 	.word	0x20000010
 80040e4:	20000024 	.word	0x20000024

080040e8 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80040e8:	b480      	push	{r7}
 80040ea:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 80040ec:	4b06      	ldr	r3, [pc, #24]	; (8004108 <HAL_IncTick+0x20>)
 80040ee:	781b      	ldrb	r3, [r3, #0]
 80040f0:	461a      	mov	r2, r3
 80040f2:	4b06      	ldr	r3, [pc, #24]	; (800410c <HAL_IncTick+0x24>)
 80040f4:	681b      	ldr	r3, [r3, #0]
 80040f6:	4413      	add	r3, r2
 80040f8:	4a04      	ldr	r2, [pc, #16]	; (800410c <HAL_IncTick+0x24>)
 80040fa:	6013      	str	r3, [r2, #0]
}
 80040fc:	bf00      	nop
 80040fe:	46bd      	mov	sp, r7
 8004100:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004104:	4770      	bx	lr
 8004106:	bf00      	nop
 8004108:	20000028 	.word	0x20000028
 800410c:	20000698 	.word	0x20000698

08004110 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8004110:	b480      	push	{r7}
 8004112:	af00      	add	r7, sp, #0
  return uwTick;
 8004114:	4b03      	ldr	r3, [pc, #12]	; (8004124 <HAL_GetTick+0x14>)
 8004116:	681b      	ldr	r3, [r3, #0]
}
 8004118:	4618      	mov	r0, r3
 800411a:	46bd      	mov	sp, r7
 800411c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004120:	4770      	bx	lr
 8004122:	bf00      	nop
 8004124:	20000698 	.word	0x20000698

08004128 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8004128:	b580      	push	{r7, lr}
 800412a:	b084      	sub	sp, #16
 800412c:	af00      	add	r7, sp, #0
 800412e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8004130:	f7ff ffee 	bl	8004110 <HAL_GetTick>
 8004134:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8004136:	687b      	ldr	r3, [r7, #4]
 8004138:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800413a:	68fb      	ldr	r3, [r7, #12]
 800413c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004140:	d005      	beq.n	800414e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8004142:	4b0a      	ldr	r3, [pc, #40]	; (800416c <HAL_Delay+0x44>)
 8004144:	781b      	ldrb	r3, [r3, #0]
 8004146:	461a      	mov	r2, r3
 8004148:	68fb      	ldr	r3, [r7, #12]
 800414a:	4413      	add	r3, r2
 800414c:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 800414e:	bf00      	nop
 8004150:	f7ff ffde 	bl	8004110 <HAL_GetTick>
 8004154:	4602      	mov	r2, r0
 8004156:	68bb      	ldr	r3, [r7, #8]
 8004158:	1ad3      	subs	r3, r2, r3
 800415a:	68fa      	ldr	r2, [r7, #12]
 800415c:	429a      	cmp	r2, r3
 800415e:	d8f7      	bhi.n	8004150 <HAL_Delay+0x28>
  {
  }
}
 8004160:	bf00      	nop
 8004162:	bf00      	nop
 8004164:	3710      	adds	r7, #16
 8004166:	46bd      	mov	sp, r7
 8004168:	bd80      	pop	{r7, pc}
 800416a:	bf00      	nop
 800416c:	20000028 	.word	0x20000028

08004170 <HAL_GetREVID>:
/**
  * @brief  Returns the device revision identifier.
  * @retval Device revision identifier
  */
uint32_t HAL_GetREVID(void)
{
 8004170:	b480      	push	{r7}
 8004172:	af00      	add	r7, sp, #0
   return((DBGMCU->IDCODE) >> 16);
 8004174:	4b03      	ldr	r3, [pc, #12]	; (8004184 <HAL_GetREVID+0x14>)
 8004176:	681b      	ldr	r3, [r3, #0]
 8004178:	0c1b      	lsrs	r3, r3, #16
}
 800417a:	4618      	mov	r0, r3
 800417c:	46bd      	mov	sp, r7
 800417e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004182:	4770      	bx	lr
 8004184:	5c001000 	.word	0x5c001000

08004188 <HAL_SYSCFG_ETHInterfaceSelect>:
  *   @arg SYSCFG_ETH_MII : Select the Media Independent Interface
  *   @arg SYSCFG_ETH_RMII: Select the Reduced Media Independent Interface
  * @retval None
  */
void HAL_SYSCFG_ETHInterfaceSelect(uint32_t SYSCFG_ETHInterface)
{
 8004188:	b480      	push	{r7}
 800418a:	b083      	sub	sp, #12
 800418c:	af00      	add	r7, sp, #0
 800418e:	6078      	str	r0, [r7, #4]
  /* Check the parameter */
  assert_param(IS_SYSCFG_ETHERNET_CONFIG(SYSCFG_ETHInterface));

  MODIFY_REG(SYSCFG->PMCR, SYSCFG_PMCR_EPIS_SEL, (uint32_t)(SYSCFG_ETHInterface));
 8004190:	4b06      	ldr	r3, [pc, #24]	; (80041ac <HAL_SYSCFG_ETHInterfaceSelect+0x24>)
 8004192:	685b      	ldr	r3, [r3, #4]
 8004194:	f423 0260 	bic.w	r2, r3, #14680064	; 0xe00000
 8004198:	4904      	ldr	r1, [pc, #16]	; (80041ac <HAL_SYSCFG_ETHInterfaceSelect+0x24>)
 800419a:	687b      	ldr	r3, [r7, #4]
 800419c:	4313      	orrs	r3, r2
 800419e:	604b      	str	r3, [r1, #4]
}
 80041a0:	bf00      	nop
 80041a2:	370c      	adds	r7, #12
 80041a4:	46bd      	mov	sp, r7
 80041a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041aa:	4770      	bx	lr
 80041ac:	58000400 	.word	0x58000400

080041b0 <HAL_SYSCFG_AnalogSwitchConfig>:
  *   @arg SYSCFG_SWITCH_PC3_CLOSE
  * @retval None
  */

void HAL_SYSCFG_AnalogSwitchConfig(uint32_t SYSCFG_AnalogSwitch , uint32_t SYSCFG_SwitchState )
{
 80041b0:	b480      	push	{r7}
 80041b2:	b083      	sub	sp, #12
 80041b4:	af00      	add	r7, sp, #0
 80041b6:	6078      	str	r0, [r7, #4]
 80041b8:	6039      	str	r1, [r7, #0]
  /* Check the parameter */
  assert_param(IS_SYSCFG_ANALOG_SWITCH(SYSCFG_AnalogSwitch));
  assert_param(IS_SYSCFG_SWITCH_STATE(SYSCFG_SwitchState));

  MODIFY_REG(SYSCFG->PMCR, (uint32_t) SYSCFG_AnalogSwitch, (uint32_t)(SYSCFG_SwitchState));
 80041ba:	4b07      	ldr	r3, [pc, #28]	; (80041d8 <HAL_SYSCFG_AnalogSwitchConfig+0x28>)
 80041bc:	685a      	ldr	r2, [r3, #4]
 80041be:	687b      	ldr	r3, [r7, #4]
 80041c0:	43db      	mvns	r3, r3
 80041c2:	401a      	ands	r2, r3
 80041c4:	4904      	ldr	r1, [pc, #16]	; (80041d8 <HAL_SYSCFG_AnalogSwitchConfig+0x28>)
 80041c6:	683b      	ldr	r3, [r7, #0]
 80041c8:	4313      	orrs	r3, r2
 80041ca:	604b      	str	r3, [r1, #4]
}
 80041cc:	bf00      	nop
 80041ce:	370c      	adds	r7, #12
 80041d0:	46bd      	mov	sp, r7
 80041d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041d6:	4770      	bx	lr
 80041d8:	58000400 	.word	0x58000400

080041dc <LL_ADC_SetCommonClock>:
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV128
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV256
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonClock(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t CommonClock)
{
 80041dc:	b480      	push	{r7}
 80041de:	b083      	sub	sp, #12
 80041e0:	af00      	add	r7, sp, #0
 80041e2:	6078      	str	r0, [r7, #4]
 80041e4:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 80041e6:	687b      	ldr	r3, [r7, #4]
 80041e8:	689b      	ldr	r3, [r3, #8]
 80041ea:	f423 127c 	bic.w	r2, r3, #4128768	; 0x3f0000
 80041ee:	683b      	ldr	r3, [r7, #0]
 80041f0:	431a      	orrs	r2, r3
 80041f2:	687b      	ldr	r3, [r7, #4]
 80041f4:	609a      	str	r2, [r3, #8]
}
 80041f6:	bf00      	nop
 80041f8:	370c      	adds	r7, #12
 80041fa:	46bd      	mov	sp, r7
 80041fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004200:	4770      	bx	lr

08004202 <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 8004202:	b480      	push	{r7}
 8004204:	b083      	sub	sp, #12
 8004206:	af00      	add	r7, sp, #0
 8004208:	6078      	str	r0, [r7, #4]
 800420a:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 800420c:	687b      	ldr	r3, [r7, #4]
 800420e:	689b      	ldr	r3, [r3, #8]
 8004210:	f023 72e0 	bic.w	r2, r3, #29360128	; 0x1c00000
 8004214:	683b      	ldr	r3, [r7, #0]
 8004216:	431a      	orrs	r2, r3
 8004218:	687b      	ldr	r3, [r7, #4]
 800421a:	609a      	str	r2, [r3, #8]
}
 800421c:	bf00      	nop
 800421e:	370c      	adds	r7, #12
 8004220:	46bd      	mov	sp, r7
 8004222:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004226:	4770      	bx	lr

08004228 <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON)
{
 8004228:	b480      	push	{r7}
 800422a:	b083      	sub	sp, #12
 800422c:	af00      	add	r7, sp, #0
 800422e:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 8004230:	687b      	ldr	r3, [r7, #4]
 8004232:	689b      	ldr	r3, [r3, #8]
 8004234:	f003 73e0 	and.w	r3, r3, #29360128	; 0x1c00000
}
 8004238:	4618      	mov	r0, r3
 800423a:	370c      	adds	r7, #12
 800423c:	46bd      	mov	sp, r7
 800423e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004242:	4770      	bx	lr

08004244 <LL_ADC_SetOffset>:
  *             Other channels are slow channels (conversion rate: refer to reference manual).
  * @param  OffsetLevel Value between Min_Data=0x000 and Max_Data=0x3FFFFFF
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffset(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t Channel, uint32_t OffsetLevel)
{
 8004244:	b480      	push	{r7}
 8004246:	b087      	sub	sp, #28
 8004248:	af00      	add	r7, sp, #0
 800424a:	60f8      	str	r0, [r7, #12]
 800424c:	60b9      	str	r1, [r7, #8]
 800424e:	607a      	str	r2, [r7, #4]
 8004250:	603b      	str	r3, [r7, #0]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8004252:	68fb      	ldr	r3, [r7, #12]
 8004254:	3360      	adds	r3, #96	; 0x60
 8004256:	461a      	mov	r2, r3
 8004258:	68bb      	ldr	r3, [r7, #8]
 800425a:	009b      	lsls	r3, r3, #2
 800425c:	4413      	add	r3, r2
 800425e:	617b      	str	r3, [r7, #20]
               ADC3_OFR1_OFFSET1_EN | (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
  }
  else
#endif /* ADC_VER_V5_V90 */
  {
    MODIFY_REG(*preg,
 8004260:	697b      	ldr	r3, [r7, #20]
 8004262:	681b      	ldr	r3, [r3, #0]
 8004264:	f003 4200 	and.w	r2, r3, #2147483648	; 0x80000000
 8004268:	687b      	ldr	r3, [r7, #4]
 800426a:	f003 41f8 	and.w	r1, r3, #2080374784	; 0x7c000000
 800426e:	683b      	ldr	r3, [r7, #0]
 8004270:	430b      	orrs	r3, r1
 8004272:	431a      	orrs	r2, r3
 8004274:	697b      	ldr	r3, [r7, #20]
 8004276:	601a      	str	r2, [r3, #0]
               ADC_OFR1_OFFSET1_CH | ADC_OFR1_OFFSET1,
               (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
  }
}
 8004278:	bf00      	nop
 800427a:	371c      	adds	r7, #28
 800427c:	46bd      	mov	sp, r7
 800427e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004282:	4770      	bx	lr

08004284 <LL_ADC_SetDataRightShift>:
  *         @arg @ref LL_ADC_OFFSET_RSHIFT_ENABLE
  *         @arg @ref LL_ADC_OFFSET_RSHIFT_DISABLE
  * @retval Returned None
  */
__STATIC_INLINE void LL_ADC_SetDataRightShift(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t RigthShift)
{
 8004284:	b480      	push	{r7}
 8004286:	b085      	sub	sp, #20
 8004288:	af00      	add	r7, sp, #0
 800428a:	60f8      	str	r0, [r7, #12]
 800428c:	60b9      	str	r1, [r7, #8]
 800428e:	607a      	str	r2, [r7, #4]
  MODIFY_REG(ADCx->CFGR2, (ADC_CFGR2_RSHIFT1 | ADC_CFGR2_RSHIFT2 | ADC_CFGR2_RSHIFT3 | ADC_CFGR2_RSHIFT4), RigthShift << (Offsety & 0x1FUL));
 8004290:	68fb      	ldr	r3, [r7, #12]
 8004292:	691b      	ldr	r3, [r3, #16]
 8004294:	f423 42f0 	bic.w	r2, r3, #30720	; 0x7800
 8004298:	68bb      	ldr	r3, [r7, #8]
 800429a:	f003 031f 	and.w	r3, r3, #31
 800429e:	6879      	ldr	r1, [r7, #4]
 80042a0:	fa01 f303 	lsl.w	r3, r1, r3
 80042a4:	431a      	orrs	r2, r3
 80042a6:	68fb      	ldr	r3, [r7, #12]
 80042a8:	611a      	str	r2, [r3, #16]
}
 80042aa:	bf00      	nop
 80042ac:	3714      	adds	r7, #20
 80042ae:	46bd      	mov	sp, r7
 80042b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042b4:	4770      	bx	lr

080042b6 <LL_ADC_SetOffsetSignedSaturation>:
  *         @arg @ref LL_ADC_OFFSET_SIGNED_SATURATION_ENABLE
  *         @arg @ref LL_ADC_OFFSET_SIGNED_SATURATION_DISABLE
  * @retval Returned None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSignedSaturation(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSignedSaturation)
{
 80042b6:	b480      	push	{r7}
 80042b8:	b087      	sub	sp, #28
 80042ba:	af00      	add	r7, sp, #0
 80042bc:	60f8      	str	r0, [r7, #12]
 80042be:	60b9      	str	r1, [r7, #8]
 80042c0:	607a      	str	r2, [r7, #4]
    /* Function not available on this instance */
  }
  else
#endif  /* ADC_VER_V5_V90 */
  {
    __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 80042c2:	68fb      	ldr	r3, [r7, #12]
 80042c4:	3360      	adds	r3, #96	; 0x60
 80042c6:	461a      	mov	r2, r3
 80042c8:	68bb      	ldr	r3, [r7, #8]
 80042ca:	009b      	lsls	r3, r3, #2
 80042cc:	4413      	add	r3, r2
 80042ce:	617b      	str	r3, [r7, #20]
    MODIFY_REG(*preg, ADC_OFR1_SSATE, OffsetSignedSaturation);
 80042d0:	697b      	ldr	r3, [r7, #20]
 80042d2:	681b      	ldr	r3, [r3, #0]
 80042d4:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 80042d8:	687b      	ldr	r3, [r7, #4]
 80042da:	431a      	orrs	r2, r3
 80042dc:	697b      	ldr	r3, [r7, #20]
 80042de:	601a      	str	r2, [r3, #0]
  }
}
 80042e0:	bf00      	nop
 80042e2:	371c      	adds	r7, #28
 80042e4:	46bd      	mov	sp, r7
 80042e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042ea:	4770      	bx	lr

080042ec <LL_ADC_REG_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsTriggerSourceSWStart(ADC_TypeDef *ADCx)
{
 80042ec:	b480      	push	{r7}
 80042ee:	b083      	sub	sp, #12
 80042f0:	af00      	add	r7, sp, #0
 80042f2:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CFGR, ADC_CFGR_EXTEN) == (LL_ADC_REG_TRIG_SOFTWARE & ADC_CFGR_EXTEN)) ? 1UL : 0UL);
 80042f4:	687b      	ldr	r3, [r7, #4]
 80042f6:	68db      	ldr	r3, [r3, #12]
 80042f8:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 80042fc:	2b00      	cmp	r3, #0
 80042fe:	d101      	bne.n	8004304 <LL_ADC_REG_IsTriggerSourceSWStart+0x18>
 8004300:	2301      	movs	r3, #1
 8004302:	e000      	b.n	8004306 <LL_ADC_REG_IsTriggerSourceSWStart+0x1a>
 8004304:	2300      	movs	r3, #0
}
 8004306:	4618      	mov	r0, r3
 8004308:	370c      	adds	r7, #12
 800430a:	46bd      	mov	sp, r7
 800430c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004310:	4770      	bx	lr

08004312 <LL_ADC_REG_SetSequencerRanks>:
  *         (3) On STM32H7, fast channel (0.125 us for 14-bit resolution (ADC conversion rate up to 8 Ms/s)).
  *             Other channels are slow channels (conversion rate: refer to reference manual).
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 8004312:	b480      	push	{r7}
 8004314:	b087      	sub	sp, #28
 8004316:	af00      	add	r7, sp, #0
 8004318:	60f8      	str	r0, [r7, #12]
 800431a:	60b9      	str	r1, [r7, #8]
 800431c:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1, ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));
 800431e:	68fb      	ldr	r3, [r7, #12]
 8004320:	3330      	adds	r3, #48	; 0x30
 8004322:	461a      	mov	r2, r3
 8004324:	68bb      	ldr	r3, [r7, #8]
 8004326:	0a1b      	lsrs	r3, r3, #8
 8004328:	009b      	lsls	r3, r3, #2
 800432a:	f003 030c 	and.w	r3, r3, #12
 800432e:	4413      	add	r3, r2
 8004330:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8004332:	697b      	ldr	r3, [r7, #20]
 8004334:	681a      	ldr	r2, [r3, #0]
 8004336:	68bb      	ldr	r3, [r7, #8]
 8004338:	f003 031f 	and.w	r3, r3, #31
 800433c:	211f      	movs	r1, #31
 800433e:	fa01 f303 	lsl.w	r3, r1, r3
 8004342:	43db      	mvns	r3, r3
 8004344:	401a      	ands	r2, r3
 8004346:	687b      	ldr	r3, [r7, #4]
 8004348:	0e9b      	lsrs	r3, r3, #26
 800434a:	f003 011f 	and.w	r1, r3, #31
 800434e:	68bb      	ldr	r3, [r7, #8]
 8004350:	f003 031f 	and.w	r3, r3, #31
 8004354:	fa01 f303 	lsl.w	r3, r1, r3
 8004358:	431a      	orrs	r2, r3
 800435a:	697b      	ldr	r3, [r7, #20]
 800435c:	601a      	str	r2, [r3, #0]
             ADC_CHANNEL_ID_NUMBER_MASK_POSBIT0 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS) << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 800435e:	bf00      	nop
 8004360:	371c      	adds	r7, #28
 8004362:	46bd      	mov	sp, r7
 8004364:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004368:	4770      	bx	lr

0800436a <LL_ADC_INJ_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsTriggerSourceSWStart(ADC_TypeDef *ADCx)
{
 800436a:	b480      	push	{r7}
 800436c:	b083      	sub	sp, #12
 800436e:	af00      	add	r7, sp, #0
 8004370:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->JSQR, ADC_JSQR_JEXTEN) == (LL_ADC_INJ_TRIG_SOFTWARE & ADC_JSQR_JEXTEN)) ? 1UL : 0UL);
 8004372:	687b      	ldr	r3, [r7, #4]
 8004374:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004376:	f403 73c0 	and.w	r3, r3, #384	; 0x180
 800437a:	2b00      	cmp	r3, #0
 800437c:	d101      	bne.n	8004382 <LL_ADC_INJ_IsTriggerSourceSWStart+0x18>
 800437e:	2301      	movs	r3, #1
 8004380:	e000      	b.n	8004384 <LL_ADC_INJ_IsTriggerSourceSWStart+0x1a>
 8004382:	2300      	movs	r3, #0
}
 8004384:	4618      	mov	r0, r3
 8004386:	370c      	adds	r7, #12
 8004388:	46bd      	mov	sp, r7
 800438a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800438e:	4770      	bx	lr

08004390 <LL_ADC_SetChannelSamplingTime>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_387CYCLES_5
  *         @arg @ref LL_ADC_SAMPLINGTIME_810CYCLES_5
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 8004390:	b480      	push	{r7}
 8004392:	b087      	sub	sp, #28
 8004394:	af00      	add	r7, sp, #0
 8004396:	60f8      	str	r0, [r7, #12]
 8004398:	60b9      	str	r1, [r7, #8]
 800439a:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1, ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));
 800439c:	68fb      	ldr	r3, [r7, #12]
 800439e:	3314      	adds	r3, #20
 80043a0:	461a      	mov	r2, r3
 80043a2:	68bb      	ldr	r3, [r7, #8]
 80043a4:	0e5b      	lsrs	r3, r3, #25
 80043a6:	009b      	lsls	r3, r3, #2
 80043a8:	f003 0304 	and.w	r3, r3, #4
 80043ac:	4413      	add	r3, r2
 80043ae:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 80043b0:	697b      	ldr	r3, [r7, #20]
 80043b2:	681a      	ldr	r2, [r3, #0]
 80043b4:	68bb      	ldr	r3, [r7, #8]
 80043b6:	0d1b      	lsrs	r3, r3, #20
 80043b8:	f003 031f 	and.w	r3, r3, #31
 80043bc:	2107      	movs	r1, #7
 80043be:	fa01 f303 	lsl.w	r3, r1, r3
 80043c2:	43db      	mvns	r3, r3
 80043c4:	401a      	ands	r2, r3
 80043c6:	68bb      	ldr	r3, [r7, #8]
 80043c8:	0d1b      	lsrs	r3, r3, #20
 80043ca:	f003 031f 	and.w	r3, r3, #31
 80043ce:	6879      	ldr	r1, [r7, #4]
 80043d0:	fa01 f303 	lsl.w	r3, r1, r3
 80043d4:	431a      	orrs	r2, r3
 80043d6:	697b      	ldr	r3, [r7, #20]
 80043d8:	601a      	str	r2, [r3, #0]
             ADC_SMPR1_SMP0 << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS),
             SamplingTime   << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS));
}
 80043da:	bf00      	nop
 80043dc:	371c      	adds	r7, #28
 80043de:	46bd      	mov	sp, r7
 80043e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043e4:	4770      	bx	lr
	...

080043e8 <LL_ADC_SetChannelSingleDiff>:
  *         @arg @ref LL_ADC_SINGLE_ENDED
  *         @arg @ref LL_ADC_DIFFERENTIAL_ENDED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSingleDiff(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SingleDiff)
{
 80043e8:	b480      	push	{r7}
 80043ea:	b085      	sub	sp, #20
 80043ec:	af00      	add	r7, sp, #0
 80043ee:	60f8      	str	r0, [r7, #12]
 80043f0:	60b9      	str	r1, [r7, #8]
 80043f2:	607a      	str	r2, [r7, #4]
  }
#else  /* ADC_VER_V5_V90 */
  /* Bits of channels in single or differential mode are set only for         */
  /* differential mode (for single mode, mask of bits allowed to be set is    */
  /* shifted out of range of bits of channels in single or differential mode. */
  MODIFY_REG(ADCx->DIFSEL,
 80043f4:	68fb      	ldr	r3, [r7, #12]
 80043f6:	f8d3 20c0 	ldr.w	r2, [r3, #192]	; 0xc0
 80043fa:	68bb      	ldr	r3, [r7, #8]
 80043fc:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8004400:	43db      	mvns	r3, r3
 8004402:	401a      	ands	r2, r3
 8004404:	687b      	ldr	r3, [r7, #4]
 8004406:	f003 0318 	and.w	r3, r3, #24
 800440a:	4908      	ldr	r1, [pc, #32]	; (800442c <LL_ADC_SetChannelSingleDiff+0x44>)
 800440c:	40d9      	lsrs	r1, r3
 800440e:	68bb      	ldr	r3, [r7, #8]
 8004410:	400b      	ands	r3, r1
 8004412:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8004416:	431a      	orrs	r2, r3
 8004418:	68fb      	ldr	r3, [r7, #12]
 800441a:	f8c3 20c0 	str.w	r2, [r3, #192]	; 0xc0
             Channel & ADC_SINGLEDIFF_CHANNEL_MASK,
             (Channel & ADC_SINGLEDIFF_CHANNEL_MASK) & (ADC_DIFSEL_DIFSEL >> (SingleDiff & ADC_SINGLEDIFF_CHANNEL_SHIFT_MASK)));
#endif /* ADC_VER_V5_V90 */
}
 800441e:	bf00      	nop
 8004420:	3714      	adds	r7, #20
 8004422:	46bd      	mov	sp, r7
 8004424:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004428:	4770      	bx	lr
 800442a:	bf00      	nop
 800442c:	000fffff 	.word	0x000fffff

08004430 <LL_ADC_GetMultimode>:
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_SIM
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_ALT
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_INT_INJ_SIM
  */
__STATIC_INLINE uint32_t LL_ADC_GetMultimode(ADC_Common_TypeDef *ADCxy_COMMON)
{
 8004430:	b480      	push	{r7}
 8004432:	b083      	sub	sp, #12
 8004434:	af00      	add	r7, sp, #0
 8004436:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_DUAL));
 8004438:	687b      	ldr	r3, [r7, #4]
 800443a:	689b      	ldr	r3, [r3, #8]
 800443c:	f003 031f 	and.w	r3, r3, #31
}
 8004440:	4618      	mov	r0, r3
 8004442:	370c      	adds	r7, #12
 8004444:	46bd      	mov	sp, r7
 8004446:	f85d 7b04 	ldr.w	r7, [sp], #4
 800444a:	4770      	bx	lr

0800444c <LL_ADC_GetMultiDMATransfer>:
  *         @arg @ref LL_ADC_MULTI_REG_DMA_EACH_ADC
  *         @arg @ref LL_ADC_MULTI_REG_DMA_RES_32_10B
  *         @arg @ref LL_ADC_MULTI_REG_DMA_RES_8B
  */
__STATIC_INLINE uint32_t LL_ADC_GetMultiDMATransfer(ADC_Common_TypeDef *ADCxy_COMMON)
{
 800444c:	b480      	push	{r7}
 800444e:	b083      	sub	sp, #12
 8004450:	af00      	add	r7, sp, #0
 8004452:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_DAMDF));
 8004454:	687b      	ldr	r3, [r7, #4]
 8004456:	689b      	ldr	r3, [r3, #8]
 8004458:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
}
 800445c:	4618      	mov	r0, r3
 800445e:	370c      	adds	r7, #12
 8004460:	46bd      	mov	sp, r7
 8004462:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004466:	4770      	bx	lr

08004468 <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
 8004468:	b480      	push	{r7}
 800446a:	b083      	sub	sp, #12
 800446c:	af00      	add	r7, sp, #0
 800446e:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 8004470:	687b      	ldr	r3, [r7, #4]
 8004472:	689a      	ldr	r2, [r3, #8]
 8004474:	4b04      	ldr	r3, [pc, #16]	; (8004488 <LL_ADC_DisableDeepPowerDown+0x20>)
 8004476:	4013      	ands	r3, r2
 8004478:	687a      	ldr	r2, [r7, #4]
 800447a:	6093      	str	r3, [r2, #8]
}
 800447c:	bf00      	nop
 800447e:	370c      	adds	r7, #12
 8004480:	46bd      	mov	sp, r7
 8004482:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004486:	4770      	bx	lr
 8004488:	5fffffc0 	.word	0x5fffffc0

0800448c <LL_ADC_IsDeepPowerDownEnabled>:
  * @rmtoll CR       DEEPPWD        LL_ADC_IsDeepPowerDownEnabled
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(ADC_TypeDef *ADCx)
{
 800448c:	b480      	push	{r7}
 800448e:	b083      	sub	sp, #12
 8004490:	af00      	add	r7, sp, #0
 8004492:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 8004494:	687b      	ldr	r3, [r7, #4]
 8004496:	689b      	ldr	r3, [r3, #8]
 8004498:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800449c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80044a0:	d101      	bne.n	80044a6 <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 80044a2:	2301      	movs	r3, #1
 80044a4:	e000      	b.n	80044a8 <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 80044a6:	2300      	movs	r3, #0
}
 80044a8:	4618      	mov	r0, r3
 80044aa:	370c      	adds	r7, #12
 80044ac:	46bd      	mov	sp, r7
 80044ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044b2:	4770      	bx	lr

080044b4 <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 80044b4:	b480      	push	{r7}
 80044b6:	b083      	sub	sp, #12
 80044b8:	af00      	add	r7, sp, #0
 80044ba:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 80044bc:	687b      	ldr	r3, [r7, #4]
 80044be:	689a      	ldr	r2, [r3, #8]
 80044c0:	4b05      	ldr	r3, [pc, #20]	; (80044d8 <LL_ADC_EnableInternalRegulator+0x24>)
 80044c2:	4013      	ands	r3, r2
 80044c4:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 80044c8:	687b      	ldr	r3, [r7, #4]
 80044ca:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 80044cc:	bf00      	nop
 80044ce:	370c      	adds	r7, #12
 80044d0:	46bd      	mov	sp, r7
 80044d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044d6:	4770      	bx	lr
 80044d8:	6fffffc0 	.word	0x6fffffc0

080044dc <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(ADC_TypeDef *ADCx)
{
 80044dc:	b480      	push	{r7}
 80044de:	b083      	sub	sp, #12
 80044e0:	af00      	add	r7, sp, #0
 80044e2:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 80044e4:	687b      	ldr	r3, [r7, #4]
 80044e6:	689b      	ldr	r3, [r3, #8]
 80044e8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80044ec:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80044f0:	d101      	bne.n	80044f6 <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 80044f2:	2301      	movs	r3, #1
 80044f4:	e000      	b.n	80044f8 <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 80044f6:	2300      	movs	r3, #0
}
 80044f8:	4618      	mov	r0, r3
 80044fa:	370c      	adds	r7, #12
 80044fc:	46bd      	mov	sp, r7
 80044fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004502:	4770      	bx	lr

08004504 <LL_ADC_Enable>:
  * @rmtoll CR       ADEN           LL_ADC_Enable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Enable(ADC_TypeDef *ADCx)
{
 8004504:	b480      	push	{r7}
 8004506:	b083      	sub	sp, #12
 8004508:	af00      	add	r7, sp, #0
 800450a:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 800450c:	687b      	ldr	r3, [r7, #4]
 800450e:	689a      	ldr	r2, [r3, #8]
 8004510:	4b05      	ldr	r3, [pc, #20]	; (8004528 <LL_ADC_Enable+0x24>)
 8004512:	4013      	ands	r3, r2
 8004514:	f043 0201 	orr.w	r2, r3, #1
 8004518:	687b      	ldr	r3, [r7, #4]
 800451a:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADEN);
}
 800451c:	bf00      	nop
 800451e:	370c      	adds	r7, #12
 8004520:	46bd      	mov	sp, r7
 8004522:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004526:	4770      	bx	lr
 8004528:	7fffffc0 	.word	0x7fffffc0

0800452c <LL_ADC_Disable>:
  * @rmtoll CR       ADDIS          LL_ADC_Disable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Disable(ADC_TypeDef *ADCx)
{
 800452c:	b480      	push	{r7}
 800452e:	b083      	sub	sp, #12
 8004530:	af00      	add	r7, sp, #0
 8004532:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8004534:	687b      	ldr	r3, [r7, #4]
 8004536:	689a      	ldr	r2, [r3, #8]
 8004538:	4b05      	ldr	r3, [pc, #20]	; (8004550 <LL_ADC_Disable+0x24>)
 800453a:	4013      	ands	r3, r2
 800453c:	f043 0202 	orr.w	r2, r3, #2
 8004540:	687b      	ldr	r3, [r7, #4]
 8004542:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADDIS);
}
 8004544:	bf00      	nop
 8004546:	370c      	adds	r7, #12
 8004548:	46bd      	mov	sp, r7
 800454a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800454e:	4770      	bx	lr
 8004550:	7fffffc0 	.word	0x7fffffc0

08004554 <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(ADC_TypeDef *ADCx)
{
 8004554:	b480      	push	{r7}
 8004556:	b083      	sub	sp, #12
 8004558:	af00      	add	r7, sp, #0
 800455a:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 800455c:	687b      	ldr	r3, [r7, #4]
 800455e:	689b      	ldr	r3, [r3, #8]
 8004560:	f003 0301 	and.w	r3, r3, #1
 8004564:	2b01      	cmp	r3, #1
 8004566:	d101      	bne.n	800456c <LL_ADC_IsEnabled+0x18>
 8004568:	2301      	movs	r3, #1
 800456a:	e000      	b.n	800456e <LL_ADC_IsEnabled+0x1a>
 800456c:	2300      	movs	r3, #0
}
 800456e:	4618      	mov	r0, r3
 8004570:	370c      	adds	r7, #12
 8004572:	46bd      	mov	sp, r7
 8004574:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004578:	4770      	bx	lr

0800457a <LL_ADC_IsDisableOngoing>:
  * @rmtoll CR       ADDIS          LL_ADC_IsDisableOngoing
  * @param  ADCx ADC instance
  * @retval 0: no ADC disable command on going.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDisableOngoing(ADC_TypeDef *ADCx)
{
 800457a:	b480      	push	{r7}
 800457c:	b083      	sub	sp, #12
 800457e:	af00      	add	r7, sp, #0
 8004580:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADDIS) == (ADC_CR_ADDIS)) ? 1UL : 0UL);
 8004582:	687b      	ldr	r3, [r7, #4]
 8004584:	689b      	ldr	r3, [r3, #8]
 8004586:	f003 0302 	and.w	r3, r3, #2
 800458a:	2b02      	cmp	r3, #2
 800458c:	d101      	bne.n	8004592 <LL_ADC_IsDisableOngoing+0x18>
 800458e:	2301      	movs	r3, #1
 8004590:	e000      	b.n	8004594 <LL_ADC_IsDisableOngoing+0x1a>
 8004592:	2300      	movs	r3, #0
}
 8004594:	4618      	mov	r0, r3
 8004596:	370c      	adds	r7, #12
 8004598:	46bd      	mov	sp, r7
 800459a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800459e:	4770      	bx	lr

080045a0 <LL_ADC_REG_StartConversion>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_StartConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StartConversion(ADC_TypeDef *ADCx)
{
 80045a0:	b480      	push	{r7}
 80045a2:	b083      	sub	sp, #12
 80045a4:	af00      	add	r7, sp, #0
 80045a6:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 80045a8:	687b      	ldr	r3, [r7, #4]
 80045aa:	689a      	ldr	r2, [r3, #8]
 80045ac:	4b05      	ldr	r3, [pc, #20]	; (80045c4 <LL_ADC_REG_StartConversion+0x24>)
 80045ae:	4013      	ands	r3, r2
 80045b0:	f043 0204 	orr.w	r2, r3, #4
 80045b4:	687b      	ldr	r3, [r7, #4]
 80045b6:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTART);
}
 80045b8:	bf00      	nop
 80045ba:	370c      	adds	r7, #12
 80045bc:	46bd      	mov	sp, r7
 80045be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045c2:	4770      	bx	lr
 80045c4:	7fffffc0 	.word	0x7fffffc0

080045c8 <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 80045c8:	b480      	push	{r7}
 80045ca:	b083      	sub	sp, #12
 80045cc:	af00      	add	r7, sp, #0
 80045ce:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 80045d0:	687b      	ldr	r3, [r7, #4]
 80045d2:	689b      	ldr	r3, [r3, #8]
 80045d4:	f003 0304 	and.w	r3, r3, #4
 80045d8:	2b04      	cmp	r3, #4
 80045da:	d101      	bne.n	80045e0 <LL_ADC_REG_IsConversionOngoing+0x18>
 80045dc:	2301      	movs	r3, #1
 80045de:	e000      	b.n	80045e2 <LL_ADC_REG_IsConversionOngoing+0x1a>
 80045e0:	2300      	movs	r3, #0
}
 80045e2:	4618      	mov	r0, r3
 80045e4:	370c      	adds	r7, #12
 80045e6:	46bd      	mov	sp, r7
 80045e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045ec:	4770      	bx	lr

080045ee <LL_ADC_INJ_IsConversionOngoing>:
  * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 80045ee:	b480      	push	{r7}
 80045f0:	b083      	sub	sp, #12
 80045f2:	af00      	add	r7, sp, #0
 80045f4:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 80045f6:	687b      	ldr	r3, [r7, #4]
 80045f8:	689b      	ldr	r3, [r3, #8]
 80045fa:	f003 0308 	and.w	r3, r3, #8
 80045fe:	2b08      	cmp	r3, #8
 8004600:	d101      	bne.n	8004606 <LL_ADC_INJ_IsConversionOngoing+0x18>
 8004602:	2301      	movs	r3, #1
 8004604:	e000      	b.n	8004608 <LL_ADC_INJ_IsConversionOngoing+0x1a>
 8004606:	2300      	movs	r3, #0
}
 8004608:	4618      	mov	r0, r3
 800460a:	370c      	adds	r7, #12
 800460c:	46bd      	mov	sp, r7
 800460e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004612:	4770      	bx	lr

08004614 <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8004614:	b590      	push	{r4, r7, lr}
 8004616:	b089      	sub	sp, #36	; 0x24
 8004618:	af00      	add	r7, sp, #0
 800461a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800461c:	2300      	movs	r3, #0
 800461e:	77fb      	strb	r3, [r7, #31]
  uint32_t tmpCFGR;
  uint32_t tmp_adc_reg_is_conversion_on_going;
  __IO uint32_t wait_loop_index = 0UL;
 8004620:	2300      	movs	r3, #0
 8004622:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;

  /* Check ADC handle */
  if (hadc == NULL)
 8004624:	687b      	ldr	r3, [r7, #4]
 8004626:	2b00      	cmp	r3, #0
 8004628:	d101      	bne.n	800462e <HAL_ADC_Init+0x1a>
  {
    return HAL_ERROR;
 800462a:	2301      	movs	r3, #1
 800462c:	e18f      	b.n	800494e <HAL_ADC_Init+0x33a>
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 800462e:	687b      	ldr	r3, [r7, #4]
 8004630:	68db      	ldr	r3, [r3, #12]
 8004632:	2b00      	cmp	r3, #0
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8004634:	687b      	ldr	r3, [r7, #4]
 8004636:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004638:	2b00      	cmp	r3, #0
 800463a:	d109      	bne.n	8004650 <HAL_ADC_Init+0x3c>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 800463c:	6878      	ldr	r0, [r7, #4]
 800463e:	f7fe fe73 	bl	8003328 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8004642:	687b      	ldr	r3, [r7, #4]
 8004644:	2200      	movs	r2, #0
 8004646:	659a      	str	r2, [r3, #88]	; 0x58

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 8004648:	687b      	ldr	r3, [r7, #4]
 800464a:	2200      	movs	r2, #0
 800464c:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 8004650:	687b      	ldr	r3, [r7, #4]
 8004652:	681b      	ldr	r3, [r3, #0]
 8004654:	4618      	mov	r0, r3
 8004656:	f7ff ff19 	bl	800448c <LL_ADC_IsDeepPowerDownEnabled>
 800465a:	4603      	mov	r3, r0
 800465c:	2b00      	cmp	r3, #0
 800465e:	d004      	beq.n	800466a <HAL_ADC_Init+0x56>
  {
    /* Disable ADC deep power down mode */
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
 8004660:	687b      	ldr	r3, [r7, #4]
 8004662:	681b      	ldr	r3, [r3, #0]
 8004664:	4618      	mov	r0, r3
 8004666:	f7ff feff 	bl	8004468 <LL_ADC_DisableDeepPowerDown>
    /* System was in deep power down mode, calibration must
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 800466a:	687b      	ldr	r3, [r7, #4]
 800466c:	681b      	ldr	r3, [r3, #0]
 800466e:	4618      	mov	r0, r3
 8004670:	f7ff ff34 	bl	80044dc <LL_ADC_IsInternalRegulatorEnabled>
 8004674:	4603      	mov	r3, r0
 8004676:	2b00      	cmp	r3, #0
 8004678:	d114      	bne.n	80046a4 <HAL_ADC_Init+0x90>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 800467a:	687b      	ldr	r3, [r7, #4]
 800467c:	681b      	ldr	r3, [r3, #0]
 800467e:	4618      	mov	r0, r3
 8004680:	f7ff ff18 	bl	80044b4 <LL_ADC_EnableInternalRegulator>

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8004684:	4b87      	ldr	r3, [pc, #540]	; (80048a4 <HAL_ADC_Init+0x290>)
 8004686:	681b      	ldr	r3, [r3, #0]
 8004688:	099b      	lsrs	r3, r3, #6
 800468a:	4a87      	ldr	r2, [pc, #540]	; (80048a8 <HAL_ADC_Init+0x294>)
 800468c:	fba2 2303 	umull	r2, r3, r2, r3
 8004690:	099b      	lsrs	r3, r3, #6
 8004692:	3301      	adds	r3, #1
 8004694:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 8004696:	e002      	b.n	800469e <HAL_ADC_Init+0x8a>
    {
      wait_loop_index--;
 8004698:	68bb      	ldr	r3, [r7, #8]
 800469a:	3b01      	subs	r3, #1
 800469c:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 800469e:	68bb      	ldr	r3, [r7, #8]
 80046a0:	2b00      	cmp	r3, #0
 80046a2:	d1f9      	bne.n	8004698 <HAL_ADC_Init+0x84>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 80046a4:	687b      	ldr	r3, [r7, #4]
 80046a6:	681b      	ldr	r3, [r3, #0]
 80046a8:	4618      	mov	r0, r3
 80046aa:	f7ff ff17 	bl	80044dc <LL_ADC_IsInternalRegulatorEnabled>
 80046ae:	4603      	mov	r3, r0
 80046b0:	2b00      	cmp	r3, #0
 80046b2:	d10d      	bne.n	80046d0 <HAL_ADC_Init+0xbc>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80046b4:	687b      	ldr	r3, [r7, #4]
 80046b6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80046b8:	f043 0210 	orr.w	r2, r3, #16
 80046bc:	687b      	ldr	r3, [r7, #4]
 80046be:	655a      	str	r2, [r3, #84]	; 0x54

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80046c0:	687b      	ldr	r3, [r7, #4]
 80046c2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80046c4:	f043 0201 	orr.w	r2, r3, #1
 80046c8:	687b      	ldr	r3, [r7, #4]
 80046ca:	659a      	str	r2, [r3, #88]	; 0x58

    tmp_hal_status = HAL_ERROR;
 80046cc:	2301      	movs	r3, #1
 80046ce:	77fb      	strb	r3, [r7, #31]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_reg_is_conversion_on_going = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 80046d0:	687b      	ldr	r3, [r7, #4]
 80046d2:	681b      	ldr	r3, [r3, #0]
 80046d4:	4618      	mov	r0, r3
 80046d6:	f7ff ff77 	bl	80045c8 <LL_ADC_REG_IsConversionOngoing>
 80046da:	6178      	str	r0, [r7, #20]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 80046dc:	687b      	ldr	r3, [r7, #4]
 80046de:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80046e0:	f003 0310 	and.w	r3, r3, #16
 80046e4:	2b00      	cmp	r3, #0
 80046e6:	f040 8129 	bne.w	800493c <HAL_ADC_Init+0x328>
      && (tmp_adc_reg_is_conversion_on_going == 0UL)
 80046ea:	697b      	ldr	r3, [r7, #20]
 80046ec:	2b00      	cmp	r3, #0
 80046ee:	f040 8125 	bne.w	800493c <HAL_ADC_Init+0x328>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80046f2:	687b      	ldr	r3, [r7, #4]
 80046f4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80046f6:	f423 7381 	bic.w	r3, r3, #258	; 0x102
 80046fa:	f043 0202 	orr.w	r2, r3, #2
 80046fe:	687b      	ldr	r3, [r7, #4]
 8004700:	655a      	str	r2, [r3, #84]	; 0x54
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8004702:	687b      	ldr	r3, [r7, #4]
 8004704:	681b      	ldr	r3, [r3, #0]
 8004706:	4618      	mov	r0, r3
 8004708:	f7ff ff24 	bl	8004554 <LL_ADC_IsEnabled>
 800470c:	4603      	mov	r3, r0
 800470e:	2b00      	cmp	r3, #0
 8004710:	d136      	bne.n	8004780 <HAL_ADC_Init+0x16c>
    {
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8004712:	687b      	ldr	r3, [r7, #4]
 8004714:	681b      	ldr	r3, [r3, #0]
 8004716:	4a65      	ldr	r2, [pc, #404]	; (80048ac <HAL_ADC_Init+0x298>)
 8004718:	4293      	cmp	r3, r2
 800471a:	d004      	beq.n	8004726 <HAL_ADC_Init+0x112>
 800471c:	687b      	ldr	r3, [r7, #4]
 800471e:	681b      	ldr	r3, [r3, #0]
 8004720:	4a63      	ldr	r2, [pc, #396]	; (80048b0 <HAL_ADC_Init+0x29c>)
 8004722:	4293      	cmp	r3, r2
 8004724:	d10e      	bne.n	8004744 <HAL_ADC_Init+0x130>
 8004726:	4861      	ldr	r0, [pc, #388]	; (80048ac <HAL_ADC_Init+0x298>)
 8004728:	f7ff ff14 	bl	8004554 <LL_ADC_IsEnabled>
 800472c:	4604      	mov	r4, r0
 800472e:	4860      	ldr	r0, [pc, #384]	; (80048b0 <HAL_ADC_Init+0x29c>)
 8004730:	f7ff ff10 	bl	8004554 <LL_ADC_IsEnabled>
 8004734:	4603      	mov	r3, r0
 8004736:	4323      	orrs	r3, r4
 8004738:	2b00      	cmp	r3, #0
 800473a:	bf0c      	ite	eq
 800473c:	2301      	moveq	r3, #1
 800473e:	2300      	movne	r3, #0
 8004740:	b2db      	uxtb	r3, r3
 8004742:	e008      	b.n	8004756 <HAL_ADC_Init+0x142>
 8004744:	485b      	ldr	r0, [pc, #364]	; (80048b4 <HAL_ADC_Init+0x2a0>)
 8004746:	f7ff ff05 	bl	8004554 <LL_ADC_IsEnabled>
 800474a:	4603      	mov	r3, r0
 800474c:	2b00      	cmp	r3, #0
 800474e:	bf0c      	ite	eq
 8004750:	2301      	moveq	r3, #1
 8004752:	2300      	movne	r3, #0
 8004754:	b2db      	uxtb	r3, r3
 8004756:	2b00      	cmp	r3, #0
 8004758:	d012      	beq.n	8004780 <HAL_ADC_Init+0x16c>
        /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
        /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() or                             */
        /*     HAL_ADCEx_InjectedConfigChannel() )                              */
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 800475a:	687b      	ldr	r3, [r7, #4]
 800475c:	681b      	ldr	r3, [r3, #0]
 800475e:	4a53      	ldr	r2, [pc, #332]	; (80048ac <HAL_ADC_Init+0x298>)
 8004760:	4293      	cmp	r3, r2
 8004762:	d004      	beq.n	800476e <HAL_ADC_Init+0x15a>
 8004764:	687b      	ldr	r3, [r7, #4]
 8004766:	681b      	ldr	r3, [r3, #0]
 8004768:	4a51      	ldr	r2, [pc, #324]	; (80048b0 <HAL_ADC_Init+0x29c>)
 800476a:	4293      	cmp	r3, r2
 800476c:	d101      	bne.n	8004772 <HAL_ADC_Init+0x15e>
 800476e:	4a52      	ldr	r2, [pc, #328]	; (80048b8 <HAL_ADC_Init+0x2a4>)
 8004770:	e000      	b.n	8004774 <HAL_ADC_Init+0x160>
 8004772:	4a52      	ldr	r2, [pc, #328]	; (80048bc <HAL_ADC_Init+0x2a8>)
 8004774:	687b      	ldr	r3, [r7, #4]
 8004776:	685b      	ldr	r3, [r3, #4]
 8004778:	4619      	mov	r1, r3
 800477a:	4610      	mov	r0, r2
 800477c:	f7ff fd2e 	bl	80041dc <LL_ADC_SetCommonClock>
                  ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
    }

#else

    if ((HAL_GetREVID() > REV_ID_Y) && (ADC_RESOLUTION_8B == hadc->Init.Resolution))
 8004780:	f7ff fcf6 	bl	8004170 <HAL_GetREVID>
 8004784:	4603      	mov	r3, r0
 8004786:	f241 0203 	movw	r2, #4099	; 0x1003
 800478a:	4293      	cmp	r3, r2
 800478c:	d914      	bls.n	80047b8 <HAL_ADC_Init+0x1a4>
 800478e:	687b      	ldr	r3, [r7, #4]
 8004790:	689b      	ldr	r3, [r3, #8]
 8004792:	2b10      	cmp	r3, #16
 8004794:	d110      	bne.n	80047b8 <HAL_ADC_Init+0x1a4>
    {
      /* for STM32H7 silicon rev.B and above , ADC_CFGR_RES value for 8bits resolution is : b111 */
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 8004796:	687b      	ldr	r3, [r7, #4]
 8004798:	7d5b      	ldrb	r3, [r3, #21]
 800479a:	035a      	lsls	r2, r3, #13
                  hadc->Init.Overrun                                                    |
 800479c:	687b      	ldr	r3, [r7, #4]
 800479e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 80047a0:	431a      	orrs	r2, r3
                  hadc->Init.Resolution | (ADC_CFGR_RES_1 | ADC_CFGR_RES_0)                |
 80047a2:	687b      	ldr	r3, [r7, #4]
 80047a4:	689b      	ldr	r3, [r3, #8]
                  hadc->Init.Overrun                                                    |
 80047a6:	431a      	orrs	r2, r3
                  ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 80047a8:	687b      	ldr	r3, [r7, #4]
 80047aa:	7f1b      	ldrb	r3, [r3, #28]
 80047ac:	041b      	lsls	r3, r3, #16
                  hadc->Init.Resolution | (ADC_CFGR_RES_1 | ADC_CFGR_RES_0)                |
 80047ae:	4313      	orrs	r3, r2
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 80047b0:	f043 030c 	orr.w	r3, r3, #12
 80047b4:	61bb      	str	r3, [r7, #24]
 80047b6:	e00d      	b.n	80047d4 <HAL_ADC_Init+0x1c0>
    }
    else
    {

      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 80047b8:	687b      	ldr	r3, [r7, #4]
 80047ba:	7d5b      	ldrb	r3, [r3, #21]
 80047bc:	035a      	lsls	r2, r3, #13
                  hadc->Init.Overrun                                                    |
 80047be:	687b      	ldr	r3, [r7, #4]
 80047c0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 80047c2:	431a      	orrs	r2, r3
                  hadc->Init.Resolution                                                 |
 80047c4:	687b      	ldr	r3, [r7, #4]
 80047c6:	689b      	ldr	r3, [r3, #8]
                  hadc->Init.Overrun                                                    |
 80047c8:	431a      	orrs	r2, r3
                  ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 80047ca:	687b      	ldr	r3, [r7, #4]
 80047cc:	7f1b      	ldrb	r3, [r3, #28]
 80047ce:	041b      	lsls	r3, r3, #16
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 80047d0:	4313      	orrs	r3, r2
 80047d2:	61bb      	str	r3, [r7, #24]
    }

#endif /* ADC_VER_V5_3 */

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 80047d4:	687b      	ldr	r3, [r7, #4]
 80047d6:	7f1b      	ldrb	r3, [r3, #28]
 80047d8:	2b01      	cmp	r3, #1
 80047da:	d106      	bne.n	80047ea <HAL_ADC_Init+0x1d6>
    {
      tmpCFGR |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 80047dc:	687b      	ldr	r3, [r7, #4]
 80047de:	6a1b      	ldr	r3, [r3, #32]
 80047e0:	3b01      	subs	r3, #1
 80047e2:	045b      	lsls	r3, r3, #17
 80047e4:	69ba      	ldr	r2, [r7, #24]
 80047e6:	4313      	orrs	r3, r2
 80047e8:	61bb      	str	r3, [r7, #24]
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 80047ea:	687b      	ldr	r3, [r7, #4]
 80047ec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80047ee:	2b00      	cmp	r3, #0
 80047f0:	d009      	beq.n	8004806 <HAL_ADC_Init+0x1f2>
    {
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 80047f2:	687b      	ldr	r3, [r7, #4]
 80047f4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80047f6:	f403 7278 	and.w	r2, r3, #992	; 0x3e0
                  | hadc->Init.ExternalTrigConvEdge
 80047fa:	687b      	ldr	r3, [r7, #4]
 80047fc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80047fe:	4313      	orrs	r3, r2
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8004800:	69ba      	ldr	r2, [r7, #24]
 8004802:	4313      	orrs	r3, r2
 8004804:	61bb      	str	r3, [r7, #24]
      /* Update Configuration Register CFGR */
      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmpCFGR);
    }
#else
    /* Update Configuration Register CFGR */
    MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmpCFGR);
 8004806:	687b      	ldr	r3, [r7, #4]
 8004808:	681b      	ldr	r3, [r3, #0]
 800480a:	68da      	ldr	r2, [r3, #12]
 800480c:	4b2c      	ldr	r3, [pc, #176]	; (80048c0 <HAL_ADC_Init+0x2ac>)
 800480e:	4013      	ands	r3, r2
 8004810:	687a      	ldr	r2, [r7, #4]
 8004812:	6812      	ldr	r2, [r2, #0]
 8004814:	69b9      	ldr	r1, [r7, #24]
 8004816:	430b      	orrs	r3, r1
 8004818:	60d3      	str	r3, [r2, #12]
    /* Parameters that can be updated when ADC is disabled or enabled without */
    /* conversion on going on regular and injected groups:                    */
    /*  - Conversion data management      Init.ConversionDataManagement       */
    /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
    /*  - Oversampling parameters         Init.Oversampling                   */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 800481a:	687b      	ldr	r3, [r7, #4]
 800481c:	681b      	ldr	r3, [r3, #0]
 800481e:	4618      	mov	r0, r3
 8004820:	f7ff fed2 	bl	80045c8 <LL_ADC_REG_IsConversionOngoing>
 8004824:	6138      	str	r0, [r7, #16]
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8004826:	687b      	ldr	r3, [r7, #4]
 8004828:	681b      	ldr	r3, [r3, #0]
 800482a:	4618      	mov	r0, r3
 800482c:	f7ff fedf 	bl	80045ee <LL_ADC_INJ_IsConversionOngoing>
 8004830:	60f8      	str	r0, [r7, #12]
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8004832:	693b      	ldr	r3, [r7, #16]
 8004834:	2b00      	cmp	r3, #0
 8004836:	d15f      	bne.n	80048f8 <HAL_ADC_Init+0x2e4>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8004838:	68fb      	ldr	r3, [r7, #12]
 800483a:	2b00      	cmp	r3, #0
 800483c:	d15c      	bne.n	80048f8 <HAL_ADC_Init+0x2e4>
                    ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
                    ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.ConversionDataManagement));
      }
#else
      tmpCFGR = (
                  ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 800483e:	687b      	ldr	r3, [r7, #4]
 8004840:	7d1b      	ldrb	r3, [r3, #20]
 8004842:	039a      	lsls	r2, r3, #14
                  ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.ConversionDataManagement));
 8004844:	687b      	ldr	r3, [r7, #4]
 8004846:	6adb      	ldr	r3, [r3, #44]	; 0x2c
      tmpCFGR = (
 8004848:	4313      	orrs	r3, r2
 800484a:	61bb      	str	r3, [r7, #24]
#endif

      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmpCFGR);
 800484c:	687b      	ldr	r3, [r7, #4]
 800484e:	681b      	ldr	r3, [r3, #0]
 8004850:	68da      	ldr	r2, [r3, #12]
 8004852:	4b1c      	ldr	r3, [pc, #112]	; (80048c4 <HAL_ADC_Init+0x2b0>)
 8004854:	4013      	ands	r3, r2
 8004856:	687a      	ldr	r2, [r7, #4]
 8004858:	6812      	ldr	r2, [r2, #0]
 800485a:	69b9      	ldr	r1, [r7, #24]
 800485c:	430b      	orrs	r3, r1
 800485e:	60d3      	str	r3, [r2, #12]

      if (hadc->Init.OversamplingMode == ENABLE)
 8004860:	687b      	ldr	r3, [r7, #4]
 8004862:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8004866:	2b01      	cmp	r3, #1
 8004868:	d130      	bne.n	80048cc <HAL_ADC_Init+0x2b8>
#endif
        assert_param(IS_ADC_RIGHT_BIT_SHIFT(hadc->Init.Oversampling.RightBitShift));
        assert_param(IS_ADC_TRIGGERED_OVERSAMPLING_MODE(hadc->Init.Oversampling.TriggeredMode));
        assert_param(IS_ADC_REGOVERSAMPLING_MODE(hadc->Init.Oversampling.OversamplingStopReset));

        if ((hadc->Init.ExternalTrigConv == ADC_SOFTWARE_START)
 800486a:	687b      	ldr	r3, [r7, #4]
 800486c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800486e:	2b00      	cmp	r3, #0
        /*  - Oversampling Ratio                                               */
        /*  - Right bit shift                                                  */
        /*  - Left bit shift                                                   */
        /*  - Triggered mode                                                   */
        /*  - Oversampling mode (continued/resumed)                            */
        MODIFY_REG(hadc->Instance->CFGR2, ADC_CFGR2_FIELDS,
 8004870:	687b      	ldr	r3, [r7, #4]
 8004872:	681b      	ldr	r3, [r3, #0]
 8004874:	691a      	ldr	r2, [r3, #16]
 8004876:	4b14      	ldr	r3, [pc, #80]	; (80048c8 <HAL_ADC_Init+0x2b4>)
 8004878:	4013      	ands	r3, r2
 800487a:	687a      	ldr	r2, [r7, #4]
 800487c:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 800487e:	3a01      	subs	r2, #1
 8004880:	0411      	lsls	r1, r2, #16
 8004882:	687a      	ldr	r2, [r7, #4]
 8004884:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8004886:	4311      	orrs	r1, r2
 8004888:	687a      	ldr	r2, [r7, #4]
 800488a:	6c52      	ldr	r2, [r2, #68]	; 0x44
 800488c:	4311      	orrs	r1, r2
 800488e:	687a      	ldr	r2, [r7, #4]
 8004890:	6c92      	ldr	r2, [r2, #72]	; 0x48
 8004892:	430a      	orrs	r2, r1
 8004894:	431a      	orrs	r2, r3
 8004896:	687b      	ldr	r3, [r7, #4]
 8004898:	681b      	ldr	r3, [r3, #0]
 800489a:	f042 0201 	orr.w	r2, r2, #1
 800489e:	611a      	str	r2, [r3, #16]
 80048a0:	e01c      	b.n	80048dc <HAL_ADC_Init+0x2c8>
 80048a2:	bf00      	nop
 80048a4:	20000010 	.word	0x20000010
 80048a8:	053e2d63 	.word	0x053e2d63
 80048ac:	40022000 	.word	0x40022000
 80048b0:	40022100 	.word	0x40022100
 80048b4:	58026000 	.word	0x58026000
 80048b8:	40022300 	.word	0x40022300
 80048bc:	58026300 	.word	0x58026300
 80048c0:	fff0c003 	.word	0xfff0c003
 80048c4:	ffffbffc 	.word	0xffffbffc
 80048c8:	fc00f81e 	.word	0xfc00f81e

      }
      else
      {
        /* Disable ADC oversampling scope on ADC group regular */
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 80048cc:	687b      	ldr	r3, [r7, #4]
 80048ce:	681b      	ldr	r3, [r3, #0]
 80048d0:	691a      	ldr	r2, [r3, #16]
 80048d2:	687b      	ldr	r3, [r7, #4]
 80048d4:	681b      	ldr	r3, [r3, #0]
 80048d6:	f022 0201 	bic.w	r2, r2, #1
 80048da:	611a      	str	r2, [r3, #16]
      }

      /* Set the LeftShift parameter: it is applied to the final result with or without oversampling */
      MODIFY_REG(hadc->Instance->CFGR2, ADC_CFGR2_LSHIFT, hadc->Init.LeftBitShift);
 80048dc:	687b      	ldr	r3, [r7, #4]
 80048de:	681b      	ldr	r3, [r3, #0]
 80048e0:	691b      	ldr	r3, [r3, #16]
 80048e2:	f023 4170 	bic.w	r1, r3, #4026531840	; 0xf0000000
 80048e6:	687b      	ldr	r3, [r7, #4]
 80048e8:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80048ea:	687b      	ldr	r3, [r7, #4]
 80048ec:	681b      	ldr	r3, [r3, #0]
 80048ee:	430a      	orrs	r2, r1
 80048f0:	611a      	str	r2, [r3, #16]
        /* Configure the BOOST Mode */
        ADC_ConfigureBoostMode(hadc);
      }
#else
      /* Configure the BOOST Mode */
      ADC_ConfigureBoostMode(hadc);
 80048f2:	6878      	ldr	r0, [r7, #4]
 80048f4:	f001 f804 	bl	8005900 <ADC_ConfigureBoostMode>
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 80048f8:	687b      	ldr	r3, [r7, #4]
 80048fa:	68db      	ldr	r3, [r3, #12]
 80048fc:	2b01      	cmp	r3, #1
 80048fe:	d10c      	bne.n	800491a <HAL_ADC_Init+0x306>
    {
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 8004900:	687b      	ldr	r3, [r7, #4]
 8004902:	681b      	ldr	r3, [r3, #0]
 8004904:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004906:	f023 010f 	bic.w	r1, r3, #15
 800490a:	687b      	ldr	r3, [r7, #4]
 800490c:	699b      	ldr	r3, [r3, #24]
 800490e:	1e5a      	subs	r2, r3, #1
 8004910:	687b      	ldr	r3, [r7, #4]
 8004912:	681b      	ldr	r3, [r3, #0]
 8004914:	430a      	orrs	r2, r1
 8004916:	631a      	str	r2, [r3, #48]	; 0x30
 8004918:	e007      	b.n	800492a <HAL_ADC_Init+0x316>
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 800491a:	687b      	ldr	r3, [r7, #4]
 800491c:	681b      	ldr	r3, [r3, #0]
 800491e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8004920:	687b      	ldr	r3, [r7, #4]
 8004922:	681b      	ldr	r3, [r3, #0]
 8004924:	f022 020f 	bic.w	r2, r2, #15
 8004928:	631a      	str	r2, [r3, #48]	; 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 800492a:	687b      	ldr	r3, [r7, #4]
 800492c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800492e:	f023 0303 	bic.w	r3, r3, #3
 8004932:	f043 0201 	orr.w	r2, r3, #1
 8004936:	687b      	ldr	r3, [r7, #4]
 8004938:	655a      	str	r2, [r3, #84]	; 0x54
 800493a:	e007      	b.n	800494c <HAL_ADC_Init+0x338>
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800493c:	687b      	ldr	r3, [r7, #4]
 800493e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004940:	f043 0210 	orr.w	r2, r3, #16
 8004944:	687b      	ldr	r3, [r7, #4]
 8004946:	655a      	str	r2, [r3, #84]	; 0x54

    tmp_hal_status = HAL_ERROR;
 8004948:	2301      	movs	r3, #1
 800494a:	77fb      	strb	r3, [r7, #31]
  }

  /* Return function status */
  return tmp_hal_status;
 800494c:	7ffb      	ldrb	r3, [r7, #31]
}
 800494e:	4618      	mov	r0, r3
 8004950:	3724      	adds	r7, #36	; 0x24
 8004952:	46bd      	mov	sp, r7
 8004954:	bd90      	pop	{r4, r7, pc}
 8004956:	bf00      	nop

08004958 <HAL_ADC_Start_IT>:
  *          before calling HAL_ADC_Start_IT().
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start_IT(ADC_HandleTypeDef *hadc)
{
 8004958:	b580      	push	{r7, lr}
 800495a:	b086      	sub	sp, #24
 800495c:	af00      	add	r7, sp, #0
 800495e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status;
  const ADC_TypeDef *tmpADC_Master;
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8004960:	687b      	ldr	r3, [r7, #4]
 8004962:	681b      	ldr	r3, [r3, #0]
 8004964:	4a92      	ldr	r2, [pc, #584]	; (8004bb0 <HAL_ADC_Start_IT+0x258>)
 8004966:	4293      	cmp	r3, r2
 8004968:	d004      	beq.n	8004974 <HAL_ADC_Start_IT+0x1c>
 800496a:	687b      	ldr	r3, [r7, #4]
 800496c:	681b      	ldr	r3, [r3, #0]
 800496e:	4a91      	ldr	r2, [pc, #580]	; (8004bb4 <HAL_ADC_Start_IT+0x25c>)
 8004970:	4293      	cmp	r3, r2
 8004972:	d101      	bne.n	8004978 <HAL_ADC_Start_IT+0x20>
 8004974:	4b90      	ldr	r3, [pc, #576]	; (8004bb8 <HAL_ADC_Start_IT+0x260>)
 8004976:	e000      	b.n	800497a <HAL_ADC_Start_IT+0x22>
 8004978:	4b90      	ldr	r3, [pc, #576]	; (8004bbc <HAL_ADC_Start_IT+0x264>)
 800497a:	4618      	mov	r0, r3
 800497c:	f7ff fd58 	bl	8004430 <LL_ADC_GetMultimode>
 8004980:	6138      	str	r0, [r7, #16]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Perform ADC enable and conversion start if no conversion is on going */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8004982:	687b      	ldr	r3, [r7, #4]
 8004984:	681b      	ldr	r3, [r3, #0]
 8004986:	4618      	mov	r0, r3
 8004988:	f7ff fe1e 	bl	80045c8 <LL_ADC_REG_IsConversionOngoing>
 800498c:	4603      	mov	r3, r0
 800498e:	2b00      	cmp	r3, #0
 8004990:	f040 8118 	bne.w	8004bc4 <HAL_ADC_Start_IT+0x26c>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 8004994:	687b      	ldr	r3, [r7, #4]
 8004996:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 800499a:	2b01      	cmp	r3, #1
 800499c:	d101      	bne.n	80049a2 <HAL_ADC_Start_IT+0x4a>
 800499e:	2302      	movs	r3, #2
 80049a0:	e113      	b.n	8004bca <HAL_ADC_Start_IT+0x272>
 80049a2:	687b      	ldr	r3, [r7, #4]
 80049a4:	2201      	movs	r2, #1
 80049a6:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Enable the ADC peripheral */
    tmp_hal_status = ADC_Enable(hadc);
 80049aa:	6878      	ldr	r0, [r7, #4]
 80049ac:	f000 febe 	bl	800572c <ADC_Enable>
 80049b0:	4603      	mov	r3, r0
 80049b2:	75fb      	strb	r3, [r7, #23]

    /* Start conversion if ADC is effectively enabled */
    if (tmp_hal_status == HAL_OK)
 80049b4:	7dfb      	ldrb	r3, [r7, #23]
 80049b6:	2b00      	cmp	r3, #0
 80049b8:	f040 80f5 	bne.w	8004ba6 <HAL_ADC_Start_IT+0x24e>
    {
      /* Set ADC state                                                        */
      /* - Clear state bitfield related to regular group conversion results   */
      /* - Set state bitfield related to regular operation                    */
      ADC_STATE_CLR_SET(hadc->State,
 80049bc:	687b      	ldr	r3, [r7, #4]
 80049be:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80049c0:	4b7f      	ldr	r3, [pc, #508]	; (8004bc0 <HAL_ADC_Start_IT+0x268>)
 80049c2:	4013      	ands	r3, r2
 80049c4:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 80049c8:	687b      	ldr	r3, [r7, #4]
 80049ca:	655a      	str	r2, [r3, #84]	; 0x54
                        HAL_ADC_STATE_REG_BUSY);

      /* Reset HAL_ADC_STATE_MULTIMODE_SLAVE bit
        - if ADC instance is master or if multimode feature is not available
        - if multimode setting is disabled (ADC instance slave in independent mode) */
      if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 80049cc:	687b      	ldr	r3, [r7, #4]
 80049ce:	681b      	ldr	r3, [r3, #0]
 80049d0:	4a78      	ldr	r2, [pc, #480]	; (8004bb4 <HAL_ADC_Start_IT+0x25c>)
 80049d2:	4293      	cmp	r3, r2
 80049d4:	d002      	beq.n	80049dc <HAL_ADC_Start_IT+0x84>
 80049d6:	687b      	ldr	r3, [r7, #4]
 80049d8:	681b      	ldr	r3, [r3, #0]
 80049da:	e000      	b.n	80049de <HAL_ADC_Start_IT+0x86>
 80049dc:	4b74      	ldr	r3, [pc, #464]	; (8004bb0 <HAL_ADC_Start_IT+0x258>)
 80049de:	687a      	ldr	r2, [r7, #4]
 80049e0:	6812      	ldr	r2, [r2, #0]
 80049e2:	4293      	cmp	r3, r2
 80049e4:	d002      	beq.n	80049ec <HAL_ADC_Start_IT+0x94>
          || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 80049e6:	693b      	ldr	r3, [r7, #16]
 80049e8:	2b00      	cmp	r3, #0
 80049ea:	d105      	bne.n	80049f8 <HAL_ADC_Start_IT+0xa0>
         )
      {
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 80049ec:	687b      	ldr	r3, [r7, #4]
 80049ee:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80049f0:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 80049f4:	687b      	ldr	r3, [r7, #4]
 80049f6:	655a      	str	r2, [r3, #84]	; 0x54
      }

      /* Set ADC error code */
      /* Check if a conversion is on going on ADC group injected */
      if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) != 0UL)
 80049f8:	687b      	ldr	r3, [r7, #4]
 80049fa:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80049fc:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8004a00:	2b00      	cmp	r3, #0
 8004a02:	d006      	beq.n	8004a12 <HAL_ADC_Start_IT+0xba>
      {
        /* Reset ADC error code fields related to regular conversions only */
        CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 8004a04:	687b      	ldr	r3, [r7, #4]
 8004a06:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004a08:	f023 0206 	bic.w	r2, r3, #6
 8004a0c:	687b      	ldr	r3, [r7, #4]
 8004a0e:	659a      	str	r2, [r3, #88]	; 0x58
 8004a10:	e002      	b.n	8004a18 <HAL_ADC_Start_IT+0xc0>
      }
      else
      {
        /* Reset all ADC error code fields */
        ADC_CLEAR_ERRORCODE(hadc);
 8004a12:	687b      	ldr	r3, [r7, #4]
 8004a14:	2200      	movs	r2, #0
 8004a16:	659a      	str	r2, [r3, #88]	; 0x58
      }

      /* Clear ADC group regular conversion flag and overrun flag               */
      /* (To ensure of no unknown state from potential previous ADC operations) */
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 8004a18:	687b      	ldr	r3, [r7, #4]
 8004a1a:	681b      	ldr	r3, [r3, #0]
 8004a1c:	221c      	movs	r2, #28
 8004a1e:	601a      	str	r2, [r3, #0]

      /* Process unlocked */
      /* Unlock before starting ADC conversions: in case of potential         */
      /* interruption, to let the process to ADC IRQ Handler.                 */
      __HAL_UNLOCK(hadc);
 8004a20:	687b      	ldr	r3, [r7, #4]
 8004a22:	2200      	movs	r2, #0
 8004a24:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

      /* Disable all interruptions before enabling the desired ones */
      __HAL_ADC_DISABLE_IT(hadc, (ADC_IT_EOC | ADC_IT_EOS | ADC_IT_OVR));
 8004a28:	687b      	ldr	r3, [r7, #4]
 8004a2a:	681b      	ldr	r3, [r3, #0]
 8004a2c:	685a      	ldr	r2, [r3, #4]
 8004a2e:	687b      	ldr	r3, [r7, #4]
 8004a30:	681b      	ldr	r3, [r3, #0]
 8004a32:	f022 021c 	bic.w	r2, r2, #28
 8004a36:	605a      	str	r2, [r3, #4]

      /* Enable ADC end of conversion interrupt */
      switch (hadc->Init.EOCSelection)
 8004a38:	687b      	ldr	r3, [r7, #4]
 8004a3a:	691b      	ldr	r3, [r3, #16]
 8004a3c:	2b08      	cmp	r3, #8
 8004a3e:	d108      	bne.n	8004a52 <HAL_ADC_Start_IT+0xfa>
      {
        case ADC_EOC_SEQ_CONV:
          __HAL_ADC_ENABLE_IT(hadc, ADC_IT_EOS);
 8004a40:	687b      	ldr	r3, [r7, #4]
 8004a42:	681b      	ldr	r3, [r3, #0]
 8004a44:	685a      	ldr	r2, [r3, #4]
 8004a46:	687b      	ldr	r3, [r7, #4]
 8004a48:	681b      	ldr	r3, [r3, #0]
 8004a4a:	f042 0208 	orr.w	r2, r2, #8
 8004a4e:	605a      	str	r2, [r3, #4]
          break;
 8004a50:	e008      	b.n	8004a64 <HAL_ADC_Start_IT+0x10c>
        /* case ADC_EOC_SINGLE_CONV */
        default:
          __HAL_ADC_ENABLE_IT(hadc, ADC_IT_EOC);
 8004a52:	687b      	ldr	r3, [r7, #4]
 8004a54:	681b      	ldr	r3, [r3, #0]
 8004a56:	685a      	ldr	r2, [r3, #4]
 8004a58:	687b      	ldr	r3, [r7, #4]
 8004a5a:	681b      	ldr	r3, [r3, #0]
 8004a5c:	f042 0204 	orr.w	r2, r2, #4
 8004a60:	605a      	str	r2, [r3, #4]
          break;
 8004a62:	bf00      	nop

      /* Enable ADC overrun interrupt */
      /* If hadc->Init.Overrun is set to ADC_OVR_DATA_PRESERVED, only then is
         ADC_IT_OVR enabled; otherwise data overwrite is considered as normal
         behavior and no CPU time is lost for a non-processed interruption */
      if (hadc->Init.Overrun == ADC_OVR_DATA_PRESERVED)
 8004a64:	687b      	ldr	r3, [r7, #4]
 8004a66:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004a68:	2b00      	cmp	r3, #0
 8004a6a:	d107      	bne.n	8004a7c <HAL_ADC_Start_IT+0x124>
      {
        __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 8004a6c:	687b      	ldr	r3, [r7, #4]
 8004a6e:	681b      	ldr	r3, [r3, #0]
 8004a70:	685a      	ldr	r2, [r3, #4]
 8004a72:	687b      	ldr	r3, [r7, #4]
 8004a74:	681b      	ldr	r3, [r3, #0]
 8004a76:	f042 0210 	orr.w	r2, r2, #16
 8004a7a:	605a      	str	r2, [r3, #4]
      /* trigger event.                                                       */
      /* Case of multimode enabled (when multimode feature is available):     */
      /*  - if ADC is slave and dual regular conversions are enabled, ADC is  */
      /*    enabled only (conversion is not started),                         */
      /*  - if ADC is master, ADC is enabled and conversion is started.       */
      if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8004a7c:	687b      	ldr	r3, [r7, #4]
 8004a7e:	681b      	ldr	r3, [r3, #0]
 8004a80:	4a4c      	ldr	r2, [pc, #304]	; (8004bb4 <HAL_ADC_Start_IT+0x25c>)
 8004a82:	4293      	cmp	r3, r2
 8004a84:	d002      	beq.n	8004a8c <HAL_ADC_Start_IT+0x134>
 8004a86:	687b      	ldr	r3, [r7, #4]
 8004a88:	681b      	ldr	r3, [r3, #0]
 8004a8a:	e000      	b.n	8004a8e <HAL_ADC_Start_IT+0x136>
 8004a8c:	4b48      	ldr	r3, [pc, #288]	; (8004bb0 <HAL_ADC_Start_IT+0x258>)
 8004a8e:	687a      	ldr	r2, [r7, #4]
 8004a90:	6812      	ldr	r2, [r2, #0]
 8004a92:	4293      	cmp	r3, r2
 8004a94:	d008      	beq.n	8004aa8 <HAL_ADC_Start_IT+0x150>
          || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8004a96:	693b      	ldr	r3, [r7, #16]
 8004a98:	2b00      	cmp	r3, #0
 8004a9a:	d005      	beq.n	8004aa8 <HAL_ADC_Start_IT+0x150>
          || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 8004a9c:	693b      	ldr	r3, [r7, #16]
 8004a9e:	2b05      	cmp	r3, #5
 8004aa0:	d002      	beq.n	8004aa8 <HAL_ADC_Start_IT+0x150>
          || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 8004aa2:	693b      	ldr	r3, [r7, #16]
 8004aa4:	2b09      	cmp	r3, #9
 8004aa6:	d13a      	bne.n	8004b1e <HAL_ADC_Start_IT+0x1c6>
         )
      {
        /* ADC instance is not a multimode slave instance with multimode regular conversions enabled */
        if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_JAUTO) != 0UL)
 8004aa8:	687b      	ldr	r3, [r7, #4]
 8004aaa:	681b      	ldr	r3, [r3, #0]
 8004aac:	68db      	ldr	r3, [r3, #12]
 8004aae:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004ab2:	2b00      	cmp	r3, #0
 8004ab4:	d02d      	beq.n	8004b12 <HAL_ADC_Start_IT+0x1ba>
        {
          ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 8004ab6:	687b      	ldr	r3, [r7, #4]
 8004ab8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004aba:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8004abe:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8004ac2:	687b      	ldr	r3, [r7, #4]
 8004ac4:	655a      	str	r2, [r3, #84]	; 0x54

          /* Enable as well injected interruptions in case
           HAL_ADCEx_InjectedStart_IT() has not been called beforehand. This
           allows to start regular and injected conversions when JAUTO is
           set with a single call to HAL_ADC_Start_IT() */
          switch (hadc->Init.EOCSelection)
 8004ac6:	687b      	ldr	r3, [r7, #4]
 8004ac8:	691b      	ldr	r3, [r3, #16]
 8004aca:	2b08      	cmp	r3, #8
 8004acc:	d110      	bne.n	8004af0 <HAL_ADC_Start_IT+0x198>
          {
            case ADC_EOC_SEQ_CONV:
              __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOC);
 8004ace:	687b      	ldr	r3, [r7, #4]
 8004ad0:	681b      	ldr	r3, [r3, #0]
 8004ad2:	685a      	ldr	r2, [r3, #4]
 8004ad4:	687b      	ldr	r3, [r7, #4]
 8004ad6:	681b      	ldr	r3, [r3, #0]
 8004ad8:	f022 0220 	bic.w	r2, r2, #32
 8004adc:	605a      	str	r2, [r3, #4]
              __HAL_ADC_ENABLE_IT(hadc, ADC_IT_JEOS);
 8004ade:	687b      	ldr	r3, [r7, #4]
 8004ae0:	681b      	ldr	r3, [r3, #0]
 8004ae2:	685a      	ldr	r2, [r3, #4]
 8004ae4:	687b      	ldr	r3, [r7, #4]
 8004ae6:	681b      	ldr	r3, [r3, #0]
 8004ae8:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8004aec:	605a      	str	r2, [r3, #4]
              break;
 8004aee:	e010      	b.n	8004b12 <HAL_ADC_Start_IT+0x1ba>
            /* case ADC_EOC_SINGLE_CONV */
            default:
              __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOS);
 8004af0:	687b      	ldr	r3, [r7, #4]
 8004af2:	681b      	ldr	r3, [r3, #0]
 8004af4:	685a      	ldr	r2, [r3, #4]
 8004af6:	687b      	ldr	r3, [r7, #4]
 8004af8:	681b      	ldr	r3, [r3, #0]
 8004afa:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004afe:	605a      	str	r2, [r3, #4]
              __HAL_ADC_ENABLE_IT(hadc, ADC_IT_JEOC);
 8004b00:	687b      	ldr	r3, [r7, #4]
 8004b02:	681b      	ldr	r3, [r3, #0]
 8004b04:	685a      	ldr	r2, [r3, #4]
 8004b06:	687b      	ldr	r3, [r7, #4]
 8004b08:	681b      	ldr	r3, [r3, #0]
 8004b0a:	f042 0220 	orr.w	r2, r2, #32
 8004b0e:	605a      	str	r2, [r3, #4]
              break;
 8004b10:	bf00      	nop
          }
        }

        /* Start ADC group regular conversion */
        LL_ADC_REG_StartConversion(hadc->Instance);
 8004b12:	687b      	ldr	r3, [r7, #4]
 8004b14:	681b      	ldr	r3, [r3, #0]
 8004b16:	4618      	mov	r0, r3
 8004b18:	f7ff fd42 	bl	80045a0 <LL_ADC_REG_StartConversion>
 8004b1c:	e054      	b.n	8004bc8 <HAL_ADC_Start_IT+0x270>
      }
      else
      {
        /* ADC instance is a multimode slave instance with multimode regular conversions enabled */
        SET_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8004b1e:	687b      	ldr	r3, [r7, #4]
 8004b20:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004b22:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8004b26:	687b      	ldr	r3, [r7, #4]
 8004b28:	655a      	str	r2, [r3, #84]	; 0x54
        /* if Master ADC JAUTO bit is set, Slave injected interruptions
           are enabled nevertheless (for same reason as above) */
        tmpADC_Master = __LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance);
 8004b2a:	687b      	ldr	r3, [r7, #4]
 8004b2c:	681b      	ldr	r3, [r3, #0]
 8004b2e:	4a21      	ldr	r2, [pc, #132]	; (8004bb4 <HAL_ADC_Start_IT+0x25c>)
 8004b30:	4293      	cmp	r3, r2
 8004b32:	d002      	beq.n	8004b3a <HAL_ADC_Start_IT+0x1e2>
 8004b34:	687b      	ldr	r3, [r7, #4]
 8004b36:	681b      	ldr	r3, [r3, #0]
 8004b38:	e000      	b.n	8004b3c <HAL_ADC_Start_IT+0x1e4>
 8004b3a:	4b1d      	ldr	r3, [pc, #116]	; (8004bb0 <HAL_ADC_Start_IT+0x258>)
 8004b3c:	60fb      	str	r3, [r7, #12]
        if (READ_BIT(tmpADC_Master->CFGR, ADC_CFGR_JAUTO) != 0UL)
 8004b3e:	68fb      	ldr	r3, [r7, #12]
 8004b40:	68db      	ldr	r3, [r3, #12]
 8004b42:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004b46:	2b00      	cmp	r3, #0
 8004b48:	d03e      	beq.n	8004bc8 <HAL_ADC_Start_IT+0x270>
        {
          /* First, update Slave State in setting HAL_ADC_STATE_INJ_BUSY bit
             and in resetting HAL_ADC_STATE_INJ_EOC bit */
          ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 8004b4a:	687b      	ldr	r3, [r7, #4]
 8004b4c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004b4e:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8004b52:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8004b56:	687b      	ldr	r3, [r7, #4]
 8004b58:	655a      	str	r2, [r3, #84]	; 0x54
          /* Next, set Slave injected interruptions */
          switch (hadc->Init.EOCSelection)
 8004b5a:	687b      	ldr	r3, [r7, #4]
 8004b5c:	691b      	ldr	r3, [r3, #16]
 8004b5e:	2b08      	cmp	r3, #8
 8004b60:	d110      	bne.n	8004b84 <HAL_ADC_Start_IT+0x22c>
          {
            case ADC_EOC_SEQ_CONV:
              __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOC);
 8004b62:	687b      	ldr	r3, [r7, #4]
 8004b64:	681b      	ldr	r3, [r3, #0]
 8004b66:	685a      	ldr	r2, [r3, #4]
 8004b68:	687b      	ldr	r3, [r7, #4]
 8004b6a:	681b      	ldr	r3, [r3, #0]
 8004b6c:	f022 0220 	bic.w	r2, r2, #32
 8004b70:	605a      	str	r2, [r3, #4]
              __HAL_ADC_ENABLE_IT(hadc, ADC_IT_JEOS);
 8004b72:	687b      	ldr	r3, [r7, #4]
 8004b74:	681b      	ldr	r3, [r3, #0]
 8004b76:	685a      	ldr	r2, [r3, #4]
 8004b78:	687b      	ldr	r3, [r7, #4]
 8004b7a:	681b      	ldr	r3, [r3, #0]
 8004b7c:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8004b80:	605a      	str	r2, [r3, #4]
              break;
 8004b82:	e021      	b.n	8004bc8 <HAL_ADC_Start_IT+0x270>
            /* case ADC_EOC_SINGLE_CONV */
            default:
              __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOS);
 8004b84:	687b      	ldr	r3, [r7, #4]
 8004b86:	681b      	ldr	r3, [r3, #0]
 8004b88:	685a      	ldr	r2, [r3, #4]
 8004b8a:	687b      	ldr	r3, [r7, #4]
 8004b8c:	681b      	ldr	r3, [r3, #0]
 8004b8e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004b92:	605a      	str	r2, [r3, #4]
              __HAL_ADC_ENABLE_IT(hadc, ADC_IT_JEOC);
 8004b94:	687b      	ldr	r3, [r7, #4]
 8004b96:	681b      	ldr	r3, [r3, #0]
 8004b98:	685a      	ldr	r2, [r3, #4]
 8004b9a:	687b      	ldr	r3, [r7, #4]
 8004b9c:	681b      	ldr	r3, [r3, #0]
 8004b9e:	f042 0220 	orr.w	r2, r2, #32
 8004ba2:	605a      	str	r2, [r3, #4]
              break;
 8004ba4:	e010      	b.n	8004bc8 <HAL_ADC_Start_IT+0x270>
      }
    }
    else
    {
      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 8004ba6:	687b      	ldr	r3, [r7, #4]
 8004ba8:	2200      	movs	r2, #0
 8004baa:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
 8004bae:	e00b      	b.n	8004bc8 <HAL_ADC_Start_IT+0x270>
 8004bb0:	40022000 	.word	0x40022000
 8004bb4:	40022100 	.word	0x40022100
 8004bb8:	40022300 	.word	0x40022300
 8004bbc:	58026300 	.word	0x58026300
 8004bc0:	fffff0fe 	.word	0xfffff0fe
    }

  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 8004bc4:	2302      	movs	r3, #2
 8004bc6:	75fb      	strb	r3, [r7, #23]
  }

  /* Return function status */
  return tmp_hal_status;
 8004bc8:	7dfb      	ldrb	r3, [r7, #23]
}
 8004bca:	4618      	mov	r0, r3
 8004bcc:	3718      	adds	r7, #24
 8004bce:	46bd      	mov	sp, r7
 8004bd0:	bd80      	pop	{r7, pc}
 8004bd2:	bf00      	nop

08004bd4 <HAL_ADC_GetValue>:
  *         or @ref __HAL_ADC_CLEAR_FLAG(&hadc, ADC_FLAG_EOS).
  * @param hadc ADC handle
  * @retval ADC group regular conversion data
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef *hadc)
{
 8004bd4:	b480      	push	{r7}
 8004bd6:	b083      	sub	sp, #12
 8004bd8:	af00      	add	r7, sp, #0
 8004bda:	6078      	str	r0, [r7, #4]

  /* Note: EOC flag is not cleared here by software because automatically     */
  /*       cleared by hardware when reading register DR.                      */

  /* Return ADC converted value */
  return hadc->Instance->DR;
 8004bdc:	687b      	ldr	r3, [r7, #4]
 8004bde:	681b      	ldr	r3, [r3, #0]
 8004be0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
}
 8004be2:	4618      	mov	r0, r3
 8004be4:	370c      	adds	r7, #12
 8004be6:	46bd      	mov	sp, r7
 8004be8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004bec:	4770      	bx	lr
	...

08004bf0 <HAL_ADC_IRQHandler>:
  * @brief  Handle ADC interrupt request.
  * @param hadc ADC handle
  * @retval None
  */
void HAL_ADC_IRQHandler(ADC_HandleTypeDef *hadc)
{
 8004bf0:	b580      	push	{r7, lr}
 8004bf2:	b08a      	sub	sp, #40	; 0x28
 8004bf4:	af00      	add	r7, sp, #0
 8004bf6:	6078      	str	r0, [r7, #4]
  uint32_t overrun_error = 0UL; /* flag set if overrun occurrence has to be considered as an error */
 8004bf8:	2300      	movs	r3, #0
 8004bfa:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t tmp_isr = hadc->Instance->ISR;
 8004bfc:	687b      	ldr	r3, [r7, #4]
 8004bfe:	681b      	ldr	r3, [r3, #0]
 8004c00:	681b      	ldr	r3, [r3, #0]
 8004c02:	61fb      	str	r3, [r7, #28]
  uint32_t tmp_ier = hadc->Instance->IER;
 8004c04:	687b      	ldr	r3, [r7, #4]
 8004c06:	681b      	ldr	r3, [r3, #0]
 8004c08:	685b      	ldr	r3, [r3, #4]
 8004c0a:	61bb      	str	r3, [r7, #24]
  uint32_t tmp_adc_inj_is_trigger_source_sw_start;
  uint32_t tmp_adc_reg_is_trigger_source_sw_start;
  uint32_t tmp_cfgr;
  const ADC_TypeDef *tmpADC_Master;
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8004c0c:	687b      	ldr	r3, [r7, #4]
 8004c0e:	681b      	ldr	r3, [r3, #0]
 8004c10:	4a87      	ldr	r2, [pc, #540]	; (8004e30 <HAL_ADC_IRQHandler+0x240>)
 8004c12:	4293      	cmp	r3, r2
 8004c14:	d004      	beq.n	8004c20 <HAL_ADC_IRQHandler+0x30>
 8004c16:	687b      	ldr	r3, [r7, #4]
 8004c18:	681b      	ldr	r3, [r3, #0]
 8004c1a:	4a86      	ldr	r2, [pc, #536]	; (8004e34 <HAL_ADC_IRQHandler+0x244>)
 8004c1c:	4293      	cmp	r3, r2
 8004c1e:	d101      	bne.n	8004c24 <HAL_ADC_IRQHandler+0x34>
 8004c20:	4b85      	ldr	r3, [pc, #532]	; (8004e38 <HAL_ADC_IRQHandler+0x248>)
 8004c22:	e000      	b.n	8004c26 <HAL_ADC_IRQHandler+0x36>
 8004c24:	4b85      	ldr	r3, [pc, #532]	; (8004e3c <HAL_ADC_IRQHandler+0x24c>)
 8004c26:	4618      	mov	r0, r3
 8004c28:	f7ff fc02 	bl	8004430 <LL_ADC_GetMultimode>
 8004c2c:	6178      	str	r0, [r7, #20]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));

  /* ========== Check End of Sampling flag for ADC group regular ========== */
  if (((tmp_isr & ADC_FLAG_EOSMP) == ADC_FLAG_EOSMP) && ((tmp_ier & ADC_IT_EOSMP) == ADC_IT_EOSMP))
 8004c2e:	69fb      	ldr	r3, [r7, #28]
 8004c30:	f003 0302 	and.w	r3, r3, #2
 8004c34:	2b00      	cmp	r3, #0
 8004c36:	d017      	beq.n	8004c68 <HAL_ADC_IRQHandler+0x78>
 8004c38:	69bb      	ldr	r3, [r7, #24]
 8004c3a:	f003 0302 	and.w	r3, r3, #2
 8004c3e:	2b00      	cmp	r3, #0
 8004c40:	d012      	beq.n	8004c68 <HAL_ADC_IRQHandler+0x78>
  {
    /* Update state machine on end of sampling status if not in error state */
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8004c42:	687b      	ldr	r3, [r7, #4]
 8004c44:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004c46:	f003 0310 	and.w	r3, r3, #16
 8004c4a:	2b00      	cmp	r3, #0
 8004c4c:	d105      	bne.n	8004c5a <HAL_ADC_IRQHandler+0x6a>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOSMP);
 8004c4e:	687b      	ldr	r3, [r7, #4]
 8004c50:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004c52:	f443 6200 	orr.w	r2, r3, #2048	; 0x800
 8004c56:	687b      	ldr	r3, [r7, #4]
 8004c58:	655a      	str	r2, [r3, #84]	; 0x54

    /* End Of Sampling callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->EndOfSamplingCallback(hadc);
#else
    HAL_ADCEx_EndOfSamplingCallback(hadc);
 8004c5a:	6878      	ldr	r0, [r7, #4]
 8004c5c:	f001 f81a 	bl	8005c94 <HAL_ADCEx_EndOfSamplingCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear regular group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOSMP);
 8004c60:	687b      	ldr	r3, [r7, #4]
 8004c62:	681b      	ldr	r3, [r3, #0]
 8004c64:	2202      	movs	r2, #2
 8004c66:	601a      	str	r2, [r3, #0]
  }

  /* ====== Check ADC group regular end of unitary conversion sequence conversions ===== */
  if ((((tmp_isr & ADC_FLAG_EOC) == ADC_FLAG_EOC) && ((tmp_ier & ADC_IT_EOC) == ADC_IT_EOC)) ||
 8004c68:	69fb      	ldr	r3, [r7, #28]
 8004c6a:	f003 0304 	and.w	r3, r3, #4
 8004c6e:	2b00      	cmp	r3, #0
 8004c70:	d004      	beq.n	8004c7c <HAL_ADC_IRQHandler+0x8c>
 8004c72:	69bb      	ldr	r3, [r7, #24]
 8004c74:	f003 0304 	and.w	r3, r3, #4
 8004c78:	2b00      	cmp	r3, #0
 8004c7a:	d10a      	bne.n	8004c92 <HAL_ADC_IRQHandler+0xa2>
      (((tmp_isr & ADC_FLAG_EOS) == ADC_FLAG_EOS) && ((tmp_ier & ADC_IT_EOS) == ADC_IT_EOS)))
 8004c7c:	69fb      	ldr	r3, [r7, #28]
 8004c7e:	f003 0308 	and.w	r3, r3, #8
  if ((((tmp_isr & ADC_FLAG_EOC) == ADC_FLAG_EOC) && ((tmp_ier & ADC_IT_EOC) == ADC_IT_EOC)) ||
 8004c82:	2b00      	cmp	r3, #0
 8004c84:	f000 8083 	beq.w	8004d8e <HAL_ADC_IRQHandler+0x19e>
      (((tmp_isr & ADC_FLAG_EOS) == ADC_FLAG_EOS) && ((tmp_ier & ADC_IT_EOS) == ADC_IT_EOS)))
 8004c88:	69bb      	ldr	r3, [r7, #24]
 8004c8a:	f003 0308 	and.w	r3, r3, #8
 8004c8e:	2b00      	cmp	r3, #0
 8004c90:	d07d      	beq.n	8004d8e <HAL_ADC_IRQHandler+0x19e>
  {
    /* Update state machine on conversion status if not in error state */
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8004c92:	687b      	ldr	r3, [r7, #4]
 8004c94:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004c96:	f003 0310 	and.w	r3, r3, #16
 8004c9a:	2b00      	cmp	r3, #0
 8004c9c:	d105      	bne.n	8004caa <HAL_ADC_IRQHandler+0xba>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8004c9e:	687b      	ldr	r3, [r7, #4]
 8004ca0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004ca2:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8004ca6:	687b      	ldr	r3, [r7, #4]
 8004ca8:	655a      	str	r2, [r3, #84]	; 0x54
    }

    /* Determine whether any further conversion upcoming on group regular     */
    /* by external trigger, continuous mode or scan sequence on going         */
    /* to disable interruption.                                               */
    if (LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 8004caa:	687b      	ldr	r3, [r7, #4]
 8004cac:	681b      	ldr	r3, [r3, #0]
 8004cae:	4618      	mov	r0, r3
 8004cb0:	f7ff fb1c 	bl	80042ec <LL_ADC_REG_IsTriggerSourceSWStart>
 8004cb4:	4603      	mov	r3, r0
 8004cb6:	2b00      	cmp	r3, #0
 8004cb8:	d062      	beq.n	8004d80 <HAL_ADC_IRQHandler+0x190>
    {
      /* Get relevant register CFGR in ADC instance of ADC master or slave    */
      /* in function of multimode state (for devices with multimode           */
      /* available).                                                          */
      if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8004cba:	687b      	ldr	r3, [r7, #4]
 8004cbc:	681b      	ldr	r3, [r3, #0]
 8004cbe:	4a5d      	ldr	r2, [pc, #372]	; (8004e34 <HAL_ADC_IRQHandler+0x244>)
 8004cc0:	4293      	cmp	r3, r2
 8004cc2:	d002      	beq.n	8004cca <HAL_ADC_IRQHandler+0xda>
 8004cc4:	687b      	ldr	r3, [r7, #4]
 8004cc6:	681b      	ldr	r3, [r3, #0]
 8004cc8:	e000      	b.n	8004ccc <HAL_ADC_IRQHandler+0xdc>
 8004cca:	4b59      	ldr	r3, [pc, #356]	; (8004e30 <HAL_ADC_IRQHandler+0x240>)
 8004ccc:	687a      	ldr	r2, [r7, #4]
 8004cce:	6812      	ldr	r2, [r2, #0]
 8004cd0:	4293      	cmp	r3, r2
 8004cd2:	d008      	beq.n	8004ce6 <HAL_ADC_IRQHandler+0xf6>
          || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8004cd4:	697b      	ldr	r3, [r7, #20]
 8004cd6:	2b00      	cmp	r3, #0
 8004cd8:	d005      	beq.n	8004ce6 <HAL_ADC_IRQHandler+0xf6>
          || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 8004cda:	697b      	ldr	r3, [r7, #20]
 8004cdc:	2b05      	cmp	r3, #5
 8004cde:	d002      	beq.n	8004ce6 <HAL_ADC_IRQHandler+0xf6>
          || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 8004ce0:	697b      	ldr	r3, [r7, #20]
 8004ce2:	2b09      	cmp	r3, #9
 8004ce4:	d104      	bne.n	8004cf0 <HAL_ADC_IRQHandler+0x100>
         )
      {
        /* check CONT bit directly in handle ADC CFGR register */
        tmp_cfgr = READ_REG(hadc->Instance->CFGR);
 8004ce6:	687b      	ldr	r3, [r7, #4]
 8004ce8:	681b      	ldr	r3, [r3, #0]
 8004cea:	68db      	ldr	r3, [r3, #12]
 8004cec:	623b      	str	r3, [r7, #32]
 8004cee:	e00c      	b.n	8004d0a <HAL_ADC_IRQHandler+0x11a>
      }
      else
      {
        /* else need to check Master ADC CONT bit */
        tmpADC_Master = __LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance);
 8004cf0:	687b      	ldr	r3, [r7, #4]
 8004cf2:	681b      	ldr	r3, [r3, #0]
 8004cf4:	4a4f      	ldr	r2, [pc, #316]	; (8004e34 <HAL_ADC_IRQHandler+0x244>)
 8004cf6:	4293      	cmp	r3, r2
 8004cf8:	d002      	beq.n	8004d00 <HAL_ADC_IRQHandler+0x110>
 8004cfa:	687b      	ldr	r3, [r7, #4]
 8004cfc:	681b      	ldr	r3, [r3, #0]
 8004cfe:	e000      	b.n	8004d02 <HAL_ADC_IRQHandler+0x112>
 8004d00:	4b4b      	ldr	r3, [pc, #300]	; (8004e30 <HAL_ADC_IRQHandler+0x240>)
 8004d02:	613b      	str	r3, [r7, #16]
        tmp_cfgr = READ_REG(tmpADC_Master->CFGR);
 8004d04:	693b      	ldr	r3, [r7, #16]
 8004d06:	68db      	ldr	r3, [r3, #12]
 8004d08:	623b      	str	r3, [r7, #32]
      }

      /* Carry on if continuous mode is disabled */
      if (READ_BIT(tmp_cfgr, ADC_CFGR_CONT) != ADC_CFGR_CONT)
 8004d0a:	6a3b      	ldr	r3, [r7, #32]
 8004d0c:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8004d10:	2b00      	cmp	r3, #0
 8004d12:	d135      	bne.n	8004d80 <HAL_ADC_IRQHandler+0x190>
      {
        /* If End of Sequence is reached, disable interrupts */
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS))
 8004d14:	687b      	ldr	r3, [r7, #4]
 8004d16:	681b      	ldr	r3, [r3, #0]
 8004d18:	681b      	ldr	r3, [r3, #0]
 8004d1a:	f003 0308 	and.w	r3, r3, #8
 8004d1e:	2b08      	cmp	r3, #8
 8004d20:	d12e      	bne.n	8004d80 <HAL_ADC_IRQHandler+0x190>
        {
          /* Allowed to modify bits ADC_IT_EOC/ADC_IT_EOS only if bit         */
          /* ADSTART==0 (no conversion on going)                              */
          if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8004d22:	687b      	ldr	r3, [r7, #4]
 8004d24:	681b      	ldr	r3, [r3, #0]
 8004d26:	4618      	mov	r0, r3
 8004d28:	f7ff fc4e 	bl	80045c8 <LL_ADC_REG_IsConversionOngoing>
 8004d2c:	4603      	mov	r3, r0
 8004d2e:	2b00      	cmp	r3, #0
 8004d30:	d11a      	bne.n	8004d68 <HAL_ADC_IRQHandler+0x178>
          {
            /* Disable ADC end of sequence conversion interrupt */
            /* Note: Overrun interrupt was enabled with EOC interrupt in      */
            /* HAL_Start_IT(), but is not disabled here because can be used   */
            /* by overrun IRQ process below.                                  */
            __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC | ADC_IT_EOS);
 8004d32:	687b      	ldr	r3, [r7, #4]
 8004d34:	681b      	ldr	r3, [r3, #0]
 8004d36:	685a      	ldr	r2, [r3, #4]
 8004d38:	687b      	ldr	r3, [r7, #4]
 8004d3a:	681b      	ldr	r3, [r3, #0]
 8004d3c:	f022 020c 	bic.w	r2, r2, #12
 8004d40:	605a      	str	r2, [r3, #4]

            /* Set ADC state */
            CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8004d42:	687b      	ldr	r3, [r7, #4]
 8004d44:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004d46:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8004d4a:	687b      	ldr	r3, [r7, #4]
 8004d4c:	655a      	str	r2, [r3, #84]	; 0x54

            if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 8004d4e:	687b      	ldr	r3, [r7, #4]
 8004d50:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004d52:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8004d56:	2b00      	cmp	r3, #0
 8004d58:	d112      	bne.n	8004d80 <HAL_ADC_IRQHandler+0x190>
            {
              SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8004d5a:	687b      	ldr	r3, [r7, #4]
 8004d5c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004d5e:	f043 0201 	orr.w	r2, r3, #1
 8004d62:	687b      	ldr	r3, [r7, #4]
 8004d64:	655a      	str	r2, [r3, #84]	; 0x54
 8004d66:	e00b      	b.n	8004d80 <HAL_ADC_IRQHandler+0x190>
            }
          }
          else
          {
            /* Change ADC state to error state */
            SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8004d68:	687b      	ldr	r3, [r7, #4]
 8004d6a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004d6c:	f043 0210 	orr.w	r2, r3, #16
 8004d70:	687b      	ldr	r3, [r7, #4]
 8004d72:	655a      	str	r2, [r3, #84]	; 0x54

            /* Set ADC error code to ADC peripheral internal error */
            SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8004d74:	687b      	ldr	r3, [r7, #4]
 8004d76:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004d78:	f043 0201 	orr.w	r2, r3, #1
 8004d7c:	687b      	ldr	r3, [r7, #4]
 8004d7e:	659a      	str	r2, [r3, #88]	; 0x58
    /*       possibility to use:                                              */
    /*        " if( __HAL_ADC_GET_FLAG(&hadc, ADC_FLAG_EOS)) "                */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8004d80:	6878      	ldr	r0, [r7, #4]
 8004d82:	f7fe f9c7 	bl	8003114 <HAL_ADC_ConvCpltCallback>
    /* Clear regular group conversion flag */
    /* Note: in case of overrun set to ADC_OVR_DATA_PRESERVED, end of         */
    /*       conversion flags clear induces the release of the preserved data.*/
    /*       Therefore, if the preserved data value is needed, it must be     */
    /*       read preliminarily into HAL_ADC_ConvCpltCallback().              */
    __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS));
 8004d86:	687b      	ldr	r3, [r7, #4]
 8004d88:	681b      	ldr	r3, [r3, #0]
 8004d8a:	220c      	movs	r2, #12
 8004d8c:	601a      	str	r2, [r3, #0]
  }

  /* ====== Check ADC group injected end of unitary conversion sequence conversions ===== */
  if ((((tmp_isr & ADC_FLAG_JEOC) == ADC_FLAG_JEOC) && ((tmp_ier & ADC_IT_JEOC) == ADC_IT_JEOC)) ||
 8004d8e:	69fb      	ldr	r3, [r7, #28]
 8004d90:	f003 0320 	and.w	r3, r3, #32
 8004d94:	2b00      	cmp	r3, #0
 8004d96:	d004      	beq.n	8004da2 <HAL_ADC_IRQHandler+0x1b2>
 8004d98:	69bb      	ldr	r3, [r7, #24]
 8004d9a:	f003 0320 	and.w	r3, r3, #32
 8004d9e:	2b00      	cmp	r3, #0
 8004da0:	d10b      	bne.n	8004dba <HAL_ADC_IRQHandler+0x1ca>
      (((tmp_isr & ADC_FLAG_JEOS) == ADC_FLAG_JEOS) && ((tmp_ier & ADC_IT_JEOS) == ADC_IT_JEOS)))
 8004da2:	69fb      	ldr	r3, [r7, #28]
 8004da4:	f003 0340 	and.w	r3, r3, #64	; 0x40
  if ((((tmp_isr & ADC_FLAG_JEOC) == ADC_FLAG_JEOC) && ((tmp_ier & ADC_IT_JEOC) == ADC_IT_JEOC)) ||
 8004da8:	2b00      	cmp	r3, #0
 8004daa:	f000 80a0 	beq.w	8004eee <HAL_ADC_IRQHandler+0x2fe>
      (((tmp_isr & ADC_FLAG_JEOS) == ADC_FLAG_JEOS) && ((tmp_ier & ADC_IT_JEOS) == ADC_IT_JEOS)))
 8004dae:	69bb      	ldr	r3, [r7, #24]
 8004db0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004db4:	2b00      	cmp	r3, #0
 8004db6:	f000 809a 	beq.w	8004eee <HAL_ADC_IRQHandler+0x2fe>
  {
    /* Update state machine on conversion status if not in error state */
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8004dba:	687b      	ldr	r3, [r7, #4]
 8004dbc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004dbe:	f003 0310 	and.w	r3, r3, #16
 8004dc2:	2b00      	cmp	r3, #0
 8004dc4:	d105      	bne.n	8004dd2 <HAL_ADC_IRQHandler+0x1e2>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_INJ_EOC);
 8004dc6:	687b      	ldr	r3, [r7, #4]
 8004dc8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004dca:	f443 5200 	orr.w	r2, r3, #8192	; 0x2000
 8004dce:	687b      	ldr	r3, [r7, #4]
 8004dd0:	655a      	str	r2, [r3, #84]	; 0x54
    }

    /* Retrieve ADC configuration */
    tmp_adc_inj_is_trigger_source_sw_start = LL_ADC_INJ_IsTriggerSourceSWStart(hadc->Instance);
 8004dd2:	687b      	ldr	r3, [r7, #4]
 8004dd4:	681b      	ldr	r3, [r3, #0]
 8004dd6:	4618      	mov	r0, r3
 8004dd8:	f7ff fac7 	bl	800436a <LL_ADC_INJ_IsTriggerSourceSWStart>
 8004ddc:	60f8      	str	r0, [r7, #12]
    tmp_adc_reg_is_trigger_source_sw_start = LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance);
 8004dde:	687b      	ldr	r3, [r7, #4]
 8004de0:	681b      	ldr	r3, [r3, #0]
 8004de2:	4618      	mov	r0, r3
 8004de4:	f7ff fa82 	bl	80042ec <LL_ADC_REG_IsTriggerSourceSWStart>
 8004de8:	60b8      	str	r0, [r7, #8]
    /* Get relevant register CFGR in ADC instance of ADC master or slave  */
    /* in function of multimode state (for devices with multimode         */
    /* available).                                                        */
    if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8004dea:	687b      	ldr	r3, [r7, #4]
 8004dec:	681b      	ldr	r3, [r3, #0]
 8004dee:	4a11      	ldr	r2, [pc, #68]	; (8004e34 <HAL_ADC_IRQHandler+0x244>)
 8004df0:	4293      	cmp	r3, r2
 8004df2:	d002      	beq.n	8004dfa <HAL_ADC_IRQHandler+0x20a>
 8004df4:	687b      	ldr	r3, [r7, #4]
 8004df6:	681b      	ldr	r3, [r3, #0]
 8004df8:	e000      	b.n	8004dfc <HAL_ADC_IRQHandler+0x20c>
 8004dfa:	4b0d      	ldr	r3, [pc, #52]	; (8004e30 <HAL_ADC_IRQHandler+0x240>)
 8004dfc:	687a      	ldr	r2, [r7, #4]
 8004dfe:	6812      	ldr	r2, [r2, #0]
 8004e00:	4293      	cmp	r3, r2
 8004e02:	d008      	beq.n	8004e16 <HAL_ADC_IRQHandler+0x226>
        || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8004e04:	697b      	ldr	r3, [r7, #20]
 8004e06:	2b00      	cmp	r3, #0
 8004e08:	d005      	beq.n	8004e16 <HAL_ADC_IRQHandler+0x226>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_REG_SIMULT)
 8004e0a:	697b      	ldr	r3, [r7, #20]
 8004e0c:	2b06      	cmp	r3, #6
 8004e0e:	d002      	beq.n	8004e16 <HAL_ADC_IRQHandler+0x226>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_REG_INTERL)
 8004e10:	697b      	ldr	r3, [r7, #20]
 8004e12:	2b07      	cmp	r3, #7
 8004e14:	d104      	bne.n	8004e20 <HAL_ADC_IRQHandler+0x230>
       )
    {
      tmp_cfgr = READ_REG(hadc->Instance->CFGR);
 8004e16:	687b      	ldr	r3, [r7, #4]
 8004e18:	681b      	ldr	r3, [r3, #0]
 8004e1a:	68db      	ldr	r3, [r3, #12]
 8004e1c:	623b      	str	r3, [r7, #32]
 8004e1e:	e014      	b.n	8004e4a <HAL_ADC_IRQHandler+0x25a>
    }
    else
    {
      tmpADC_Master = __LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance);
 8004e20:	687b      	ldr	r3, [r7, #4]
 8004e22:	681b      	ldr	r3, [r3, #0]
 8004e24:	4a03      	ldr	r2, [pc, #12]	; (8004e34 <HAL_ADC_IRQHandler+0x244>)
 8004e26:	4293      	cmp	r3, r2
 8004e28:	d00a      	beq.n	8004e40 <HAL_ADC_IRQHandler+0x250>
 8004e2a:	687b      	ldr	r3, [r7, #4]
 8004e2c:	681b      	ldr	r3, [r3, #0]
 8004e2e:	e008      	b.n	8004e42 <HAL_ADC_IRQHandler+0x252>
 8004e30:	40022000 	.word	0x40022000
 8004e34:	40022100 	.word	0x40022100
 8004e38:	40022300 	.word	0x40022300
 8004e3c:	58026300 	.word	0x58026300
 8004e40:	4b84      	ldr	r3, [pc, #528]	; (8005054 <HAL_ADC_IRQHandler+0x464>)
 8004e42:	613b      	str	r3, [r7, #16]
      tmp_cfgr = READ_REG(tmpADC_Master->CFGR);
 8004e44:	693b      	ldr	r3, [r7, #16]
 8004e46:	68db      	ldr	r3, [r3, #12]
 8004e48:	623b      	str	r3, [r7, #32]
    /* Disable interruption if no further conversion upcoming by injected     */
    /* external trigger or by automatic injected conversion with regular      */
    /* group having no further conversion upcoming (same conditions as        */
    /* regular group interruption disabling above),                           */
    /* and if injected scan sequence is completed.                            */
    if (tmp_adc_inj_is_trigger_source_sw_start != 0UL)
 8004e4a:	68fb      	ldr	r3, [r7, #12]
 8004e4c:	2b00      	cmp	r3, #0
 8004e4e:	d047      	beq.n	8004ee0 <HAL_ADC_IRQHandler+0x2f0>
    {
      if ((READ_BIT(tmp_cfgr, ADC_CFGR_JAUTO) == 0UL) ||
 8004e50:	6a3b      	ldr	r3, [r7, #32]
 8004e52:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004e56:	2b00      	cmp	r3, #0
 8004e58:	d007      	beq.n	8004e6a <HAL_ADC_IRQHandler+0x27a>
 8004e5a:	68bb      	ldr	r3, [r7, #8]
 8004e5c:	2b00      	cmp	r3, #0
 8004e5e:	d03f      	beq.n	8004ee0 <HAL_ADC_IRQHandler+0x2f0>
          ((tmp_adc_reg_is_trigger_source_sw_start != 0UL) &&
           (READ_BIT(tmp_cfgr, ADC_CFGR_CONT) == 0UL)))
 8004e60:	6a3b      	ldr	r3, [r7, #32]
 8004e62:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
          ((tmp_adc_reg_is_trigger_source_sw_start != 0UL) &&
 8004e66:	2b00      	cmp	r3, #0
 8004e68:	d13a      	bne.n	8004ee0 <HAL_ADC_IRQHandler+0x2f0>
      {
        /* If End of Sequence is reached, disable interrupts */
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOS))
 8004e6a:	687b      	ldr	r3, [r7, #4]
 8004e6c:	681b      	ldr	r3, [r3, #0]
 8004e6e:	681b      	ldr	r3, [r3, #0]
 8004e70:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004e74:	2b40      	cmp	r3, #64	; 0x40
 8004e76:	d133      	bne.n	8004ee0 <HAL_ADC_IRQHandler+0x2f0>
          /* when the last context has been fully processed, JSQR is reset      */
          /* by the hardware. Even if no injected conversion is planned to come */
          /* (queue empty, triggers are ignored), it can start again            */
          /* immediately after setting a new context (JADSTART is still set).   */
          /* Therefore, state of HAL ADC injected group is kept to busy.        */
          if (READ_BIT(tmp_cfgr, ADC_CFGR_JQM) == 0UL)
 8004e78:	6a3b      	ldr	r3, [r7, #32]
 8004e7a:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8004e7e:	2b00      	cmp	r3, #0
 8004e80:	d12e      	bne.n	8004ee0 <HAL_ADC_IRQHandler+0x2f0>
          {
            /* Allowed to modify bits ADC_IT_JEOC/ADC_IT_JEOS only if bit       */
            /* JADSTART==0 (no conversion on going)                             */
            if (LL_ADC_INJ_IsConversionOngoing(hadc->Instance) == 0UL)
 8004e82:	687b      	ldr	r3, [r7, #4]
 8004e84:	681b      	ldr	r3, [r3, #0]
 8004e86:	4618      	mov	r0, r3
 8004e88:	f7ff fbb1 	bl	80045ee <LL_ADC_INJ_IsConversionOngoing>
 8004e8c:	4603      	mov	r3, r0
 8004e8e:	2b00      	cmp	r3, #0
 8004e90:	d11a      	bne.n	8004ec8 <HAL_ADC_IRQHandler+0x2d8>
            {
              /* Disable ADC end of sequence conversion interrupt  */
              __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOC | ADC_IT_JEOS);
 8004e92:	687b      	ldr	r3, [r7, #4]
 8004e94:	681b      	ldr	r3, [r3, #0]
 8004e96:	685a      	ldr	r2, [r3, #4]
 8004e98:	687b      	ldr	r3, [r7, #4]
 8004e9a:	681b      	ldr	r3, [r3, #0]
 8004e9c:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8004ea0:	605a      	str	r2, [r3, #4]

              /* Set ADC state */
              CLEAR_BIT(hadc->State, HAL_ADC_STATE_INJ_BUSY);
 8004ea2:	687b      	ldr	r3, [r7, #4]
 8004ea4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004ea6:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8004eaa:	687b      	ldr	r3, [r7, #4]
 8004eac:	655a      	str	r2, [r3, #84]	; 0x54

              if ((hadc->State & HAL_ADC_STATE_REG_BUSY) == 0UL)
 8004eae:	687b      	ldr	r3, [r7, #4]
 8004eb0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004eb2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004eb6:	2b00      	cmp	r3, #0
 8004eb8:	d112      	bne.n	8004ee0 <HAL_ADC_IRQHandler+0x2f0>
              {
                SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8004eba:	687b      	ldr	r3, [r7, #4]
 8004ebc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004ebe:	f043 0201 	orr.w	r2, r3, #1
 8004ec2:	687b      	ldr	r3, [r7, #4]
 8004ec4:	655a      	str	r2, [r3, #84]	; 0x54
 8004ec6:	e00b      	b.n	8004ee0 <HAL_ADC_IRQHandler+0x2f0>
              }
            }
            else
            {
              /* Update ADC state machine to error */
              SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8004ec8:	687b      	ldr	r3, [r7, #4]
 8004eca:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004ecc:	f043 0210 	orr.w	r2, r3, #16
 8004ed0:	687b      	ldr	r3, [r7, #4]
 8004ed2:	655a      	str	r2, [r3, #84]	; 0x54

              /* Set ADC error code to ADC peripheral internal error */
              SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8004ed4:	687b      	ldr	r3, [r7, #4]
 8004ed6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004ed8:	f043 0201 	orr.w	r2, r3, #1
 8004edc:	687b      	ldr	r3, [r7, #4]
 8004ede:	659a      	str	r2, [r3, #88]	; 0x58
              interruption has been triggered by end of conversion or end of
              sequence.    */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->InjectedConvCpltCallback(hadc);
#else
    HAL_ADCEx_InjectedConvCpltCallback(hadc);
 8004ee0:	6878      	ldr	r0, [r7, #4]
 8004ee2:	f000 feaf 	bl	8005c44 <HAL_ADCEx_InjectedConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear injected group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_JEOC | ADC_FLAG_JEOS);
 8004ee6:	687b      	ldr	r3, [r7, #4]
 8004ee8:	681b      	ldr	r3, [r3, #0]
 8004eea:	2260      	movs	r2, #96	; 0x60
 8004eec:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check Analog watchdog 1 flag ========== */
  if (((tmp_isr & ADC_FLAG_AWD1) == ADC_FLAG_AWD1) && ((tmp_ier & ADC_IT_AWD1) == ADC_IT_AWD1))
 8004eee:	69fb      	ldr	r3, [r7, #28]
 8004ef0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004ef4:	2b00      	cmp	r3, #0
 8004ef6:	d011      	beq.n	8004f1c <HAL_ADC_IRQHandler+0x32c>
 8004ef8:	69bb      	ldr	r3, [r7, #24]
 8004efa:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004efe:	2b00      	cmp	r3, #0
 8004f00:	d00c      	beq.n	8004f1c <HAL_ADC_IRQHandler+0x32c>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD1);
 8004f02:	687b      	ldr	r3, [r7, #4]
 8004f04:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004f06:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8004f0a:	687b      	ldr	r3, [r7, #4]
 8004f0c:	655a      	str	r2, [r3, #84]	; 0x54

    /* Level out of window 1 callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->LevelOutOfWindowCallback(hadc);
#else
    HAL_ADC_LevelOutOfWindowCallback(hadc);
 8004f0e:	6878      	ldr	r0, [r7, #4]
 8004f10:	f000 f8a8 	bl	8005064 <HAL_ADC_LevelOutOfWindowCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear ADC analog watchdog flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD1);
 8004f14:	687b      	ldr	r3, [r7, #4]
 8004f16:	681b      	ldr	r3, [r3, #0]
 8004f18:	2280      	movs	r2, #128	; 0x80
 8004f1a:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check analog watchdog 2 flag ========== */
  if (((tmp_isr & ADC_FLAG_AWD2) == ADC_FLAG_AWD2) && ((tmp_ier & ADC_IT_AWD2) == ADC_IT_AWD2))
 8004f1c:	69fb      	ldr	r3, [r7, #28]
 8004f1e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004f22:	2b00      	cmp	r3, #0
 8004f24:	d012      	beq.n	8004f4c <HAL_ADC_IRQHandler+0x35c>
 8004f26:	69bb      	ldr	r3, [r7, #24]
 8004f28:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004f2c:	2b00      	cmp	r3, #0
 8004f2e:	d00d      	beq.n	8004f4c <HAL_ADC_IRQHandler+0x35c>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD2);
 8004f30:	687b      	ldr	r3, [r7, #4]
 8004f32:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004f34:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 8004f38:	687b      	ldr	r3, [r7, #4]
 8004f3a:	655a      	str	r2, [r3, #84]	; 0x54

    /* Level out of window 2 callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->LevelOutOfWindow2Callback(hadc);
#else
    HAL_ADCEx_LevelOutOfWindow2Callback(hadc);
 8004f3c:	6878      	ldr	r0, [r7, #4]
 8004f3e:	f000 fe95 	bl	8005c6c <HAL_ADCEx_LevelOutOfWindow2Callback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear ADC analog watchdog flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD2);
 8004f42:	687b      	ldr	r3, [r7, #4]
 8004f44:	681b      	ldr	r3, [r3, #0]
 8004f46:	f44f 7280 	mov.w	r2, #256	; 0x100
 8004f4a:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check analog watchdog 3 flag ========== */
  if (((tmp_isr & ADC_FLAG_AWD3) == ADC_FLAG_AWD3) && ((tmp_ier & ADC_IT_AWD3) == ADC_IT_AWD3))
 8004f4c:	69fb      	ldr	r3, [r7, #28]
 8004f4e:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8004f52:	2b00      	cmp	r3, #0
 8004f54:	d012      	beq.n	8004f7c <HAL_ADC_IRQHandler+0x38c>
 8004f56:	69bb      	ldr	r3, [r7, #24]
 8004f58:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8004f5c:	2b00      	cmp	r3, #0
 8004f5e:	d00d      	beq.n	8004f7c <HAL_ADC_IRQHandler+0x38c>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD3);
 8004f60:	687b      	ldr	r3, [r7, #4]
 8004f62:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004f64:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 8004f68:	687b      	ldr	r3, [r7, #4]
 8004f6a:	655a      	str	r2, [r3, #84]	; 0x54

    /* Level out of window 3 callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->LevelOutOfWindow3Callback(hadc);
#else
    HAL_ADCEx_LevelOutOfWindow3Callback(hadc);
 8004f6c:	6878      	ldr	r0, [r7, #4]
 8004f6e:	f000 fe87 	bl	8005c80 <HAL_ADCEx_LevelOutOfWindow3Callback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear ADC analog watchdog flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD3);
 8004f72:	687b      	ldr	r3, [r7, #4]
 8004f74:	681b      	ldr	r3, [r3, #0]
 8004f76:	f44f 7200 	mov.w	r2, #512	; 0x200
 8004f7a:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check Overrun flag ========== */
  if (((tmp_isr & ADC_FLAG_OVR) == ADC_FLAG_OVR) && ((tmp_ier & ADC_IT_OVR) == ADC_IT_OVR))
 8004f7c:	69fb      	ldr	r3, [r7, #28]
 8004f7e:	f003 0310 	and.w	r3, r3, #16
 8004f82:	2b00      	cmp	r3, #0
 8004f84:	d043      	beq.n	800500e <HAL_ADC_IRQHandler+0x41e>
 8004f86:	69bb      	ldr	r3, [r7, #24]
 8004f88:	f003 0310 	and.w	r3, r3, #16
 8004f8c:	2b00      	cmp	r3, #0
 8004f8e:	d03e      	beq.n	800500e <HAL_ADC_IRQHandler+0x41e>
    /* overrun event is not considered as an error.                           */
    /* (cf ref manual "Managing conversions without using the DMA and without */
    /* overrun ")                                                             */
    /* Exception for usage with DMA overrun event always considered as an     */
    /* error.                                                                 */
    if (hadc->Init.Overrun == ADC_OVR_DATA_PRESERVED)
 8004f90:	687b      	ldr	r3, [r7, #4]
 8004f92:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004f94:	2b00      	cmp	r3, #0
 8004f96:	d102      	bne.n	8004f9e <HAL_ADC_IRQHandler+0x3ae>
    {
      overrun_error = 1UL;
 8004f98:	2301      	movs	r3, #1
 8004f9a:	627b      	str	r3, [r7, #36]	; 0x24
 8004f9c:	e021      	b.n	8004fe2 <HAL_ADC_IRQHandler+0x3f2>
    }
    else
    {
      /* Check DMA configuration */
      if (tmp_multimode_config != LL_ADC_MULTI_INDEPENDENT)
 8004f9e:	697b      	ldr	r3, [r7, #20]
 8004fa0:	2b00      	cmp	r3, #0
 8004fa2:	d015      	beq.n	8004fd0 <HAL_ADC_IRQHandler+0x3e0>
      {
        /* Multimode (when feature is available) is enabled,
           Common Control Register MDMA bits must be checked. */
        if (LL_ADC_GetMultiDMATransfer(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) != LL_ADC_MULTI_REG_DMA_EACH_ADC)
 8004fa4:	687b      	ldr	r3, [r7, #4]
 8004fa6:	681b      	ldr	r3, [r3, #0]
 8004fa8:	4a2a      	ldr	r2, [pc, #168]	; (8005054 <HAL_ADC_IRQHandler+0x464>)
 8004faa:	4293      	cmp	r3, r2
 8004fac:	d004      	beq.n	8004fb8 <HAL_ADC_IRQHandler+0x3c8>
 8004fae:	687b      	ldr	r3, [r7, #4]
 8004fb0:	681b      	ldr	r3, [r3, #0]
 8004fb2:	4a29      	ldr	r2, [pc, #164]	; (8005058 <HAL_ADC_IRQHandler+0x468>)
 8004fb4:	4293      	cmp	r3, r2
 8004fb6:	d101      	bne.n	8004fbc <HAL_ADC_IRQHandler+0x3cc>
 8004fb8:	4b28      	ldr	r3, [pc, #160]	; (800505c <HAL_ADC_IRQHandler+0x46c>)
 8004fba:	e000      	b.n	8004fbe <HAL_ADC_IRQHandler+0x3ce>
 8004fbc:	4b28      	ldr	r3, [pc, #160]	; (8005060 <HAL_ADC_IRQHandler+0x470>)
 8004fbe:	4618      	mov	r0, r3
 8004fc0:	f7ff fa44 	bl	800444c <LL_ADC_GetMultiDMATransfer>
 8004fc4:	4603      	mov	r3, r0
 8004fc6:	2b00      	cmp	r3, #0
 8004fc8:	d00b      	beq.n	8004fe2 <HAL_ADC_IRQHandler+0x3f2>
        {
          overrun_error = 1UL;
 8004fca:	2301      	movs	r3, #1
 8004fcc:	627b      	str	r3, [r7, #36]	; 0x24
 8004fce:	e008      	b.n	8004fe2 <HAL_ADC_IRQHandler+0x3f2>
        }
      }
      else
      {
        /* Multimode not set or feature not available or ADC independent */
        if ((hadc->Instance->CFGR & ADC_CFGR_DMNGT) != 0UL)
 8004fd0:	687b      	ldr	r3, [r7, #4]
 8004fd2:	681b      	ldr	r3, [r3, #0]
 8004fd4:	68db      	ldr	r3, [r3, #12]
 8004fd6:	f003 0303 	and.w	r3, r3, #3
 8004fda:	2b00      	cmp	r3, #0
 8004fdc:	d001      	beq.n	8004fe2 <HAL_ADC_IRQHandler+0x3f2>
        {
          overrun_error = 1UL;
 8004fde:	2301      	movs	r3, #1
 8004fe0:	627b      	str	r3, [r7, #36]	; 0x24
        }
      }
    }

    if (overrun_error == 1UL)
 8004fe2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004fe4:	2b01      	cmp	r3, #1
 8004fe6:	d10e      	bne.n	8005006 <HAL_ADC_IRQHandler+0x416>
    {
      /* Change ADC state to error state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_OVR);
 8004fe8:	687b      	ldr	r3, [r7, #4]
 8004fea:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004fec:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 8004ff0:	687b      	ldr	r3, [r7, #4]
 8004ff2:	655a      	str	r2, [r3, #84]	; 0x54

      /* Set ADC error code to overrun */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_OVR);
 8004ff4:	687b      	ldr	r3, [r7, #4]
 8004ff6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004ff8:	f043 0202 	orr.w	r2, r3, #2
 8004ffc:	687b      	ldr	r3, [r7, #4]
 8004ffe:	659a      	str	r2, [r3, #88]	; 0x58
      /*       Therefore, old ADC conversion data can be retrieved in         */
      /*       function "HAL_ADC_ErrorCallback()".                            */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->ErrorCallback(hadc);
#else
      HAL_ADC_ErrorCallback(hadc);
 8005000:	6878      	ldr	r0, [r7, #4]
 8005002:	f000 f839 	bl	8005078 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    }

    /* Clear ADC overrun flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 8005006:	687b      	ldr	r3, [r7, #4]
 8005008:	681b      	ldr	r3, [r3, #0]
 800500a:	2210      	movs	r2, #16
 800500c:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check Injected context queue overflow flag ========== */
  if (((tmp_isr & ADC_FLAG_JQOVF) == ADC_FLAG_JQOVF) && ((tmp_ier & ADC_IT_JQOVF) == ADC_IT_JQOVF))
 800500e:	69fb      	ldr	r3, [r7, #28]
 8005010:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005014:	2b00      	cmp	r3, #0
 8005016:	d018      	beq.n	800504a <HAL_ADC_IRQHandler+0x45a>
 8005018:	69bb      	ldr	r3, [r7, #24]
 800501a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800501e:	2b00      	cmp	r3, #0
 8005020:	d013      	beq.n	800504a <HAL_ADC_IRQHandler+0x45a>
  {
    /* Change ADC state to overrun state */
    SET_BIT(hadc->State, HAL_ADC_STATE_INJ_JQOVF);
 8005022:	687b      	ldr	r3, [r7, #4]
 8005024:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005026:	f443 4280 	orr.w	r2, r3, #16384	; 0x4000
 800502a:	687b      	ldr	r3, [r7, #4]
 800502c:	655a      	str	r2, [r3, #84]	; 0x54

    /* Set ADC error code to Injected context queue overflow */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_JQOVF);
 800502e:	687b      	ldr	r3, [r7, #4]
 8005030:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005032:	f043 0208 	orr.w	r2, r3, #8
 8005036:	687b      	ldr	r3, [r7, #4]
 8005038:	659a      	str	r2, [r3, #88]	; 0x58

    /* Clear the Injected context queue overflow flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_JQOVF);
 800503a:	687b      	ldr	r3, [r7, #4]
 800503c:	681b      	ldr	r3, [r3, #0]
 800503e:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8005042:	601a      	str	r2, [r3, #0]

    /* Injected context queue overflow callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->InjectedQueueOverflowCallback(hadc);
#else
    HAL_ADCEx_InjectedQueueOverflowCallback(hadc);
 8005044:	6878      	ldr	r0, [r7, #4]
 8005046:	f000 fe07 	bl	8005c58 <HAL_ADCEx_InjectedQueueOverflowCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
  }

}
 800504a:	bf00      	nop
 800504c:	3728      	adds	r7, #40	; 0x28
 800504e:	46bd      	mov	sp, r7
 8005050:	bd80      	pop	{r7, pc}
 8005052:	bf00      	nop
 8005054:	40022000 	.word	0x40022000
 8005058:	40022100 	.word	0x40022100
 800505c:	40022300 	.word	0x40022300
 8005060:	58026300 	.word	0x58026300

08005064 <HAL_ADC_LevelOutOfWindowCallback>:
  * @brief  Analog watchdog 1 callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_LevelOutOfWindowCallback(ADC_HandleTypeDef *hadc)
{
 8005064:	b480      	push	{r7}
 8005066:	b083      	sub	sp, #12
 8005068:	af00      	add	r7, sp, #0
 800506a:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_LevelOutOfWindowCallback must be implemented in the user file.
  */
}
 800506c:	bf00      	nop
 800506e:	370c      	adds	r7, #12
 8005070:	46bd      	mov	sp, r7
 8005072:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005076:	4770      	bx	lr

08005078 <HAL_ADC_ErrorCallback>:
  *           (this function is also clearing overrun flag)
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 8005078:	b480      	push	{r7}
 800507a:	b083      	sub	sp, #12
 800507c:	af00      	add	r7, sp, #0
 800507e:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ErrorCallback must be implemented in the user file.
  */
}
 8005080:	bf00      	nop
 8005082:	370c      	adds	r7, #12
 8005084:	46bd      	mov	sp, r7
 8005086:	f85d 7b04 	ldr.w	r7, [sp], #4
 800508a:	4770      	bx	lr

0800508c <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param sConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *sConfig)
{
 800508c:	b590      	push	{r4, r7, lr}
 800508e:	b0a1      	sub	sp, #132	; 0x84
 8005090:	af00      	add	r7, sp, #0
 8005092:	6078      	str	r0, [r7, #4]
 8005094:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8005096:	2300      	movs	r3, #0
 8005098:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
  uint32_t tmpOffsetShifted;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0;
 800509c:	2300      	movs	r3, #0
 800509e:	60bb      	str	r3, [r7, #8]
  /* if ROVSE is set, the value of the OFFSETy_EN bit in ADCx_OFRy register is
     ignored (considered as reset) */
  assert_param(!((sConfig->OffsetNumber != ADC_OFFSET_NONE) && (hadc->Init.OversamplingMode == ENABLE)));

  /* Verification of channel number */
  if (sConfig->SingleDiff != ADC_DIFFERENTIAL_ENDED)
 80050a0:	683b      	ldr	r3, [r7, #0]
 80050a2:	68db      	ldr	r3, [r3, #12]
 80050a4:	4a9d      	ldr	r2, [pc, #628]	; (800531c <HAL_ADC_ConfigChannel+0x290>)
 80050a6:	4293      	cmp	r3, r2
    }
#endif
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 80050a8:	687b      	ldr	r3, [r7, #4]
 80050aa:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 80050ae:	2b01      	cmp	r3, #1
 80050b0:	d101      	bne.n	80050b6 <HAL_ADC_ConfigChannel+0x2a>
 80050b2:	2302      	movs	r3, #2
 80050b4:	e321      	b.n	80056fa <HAL_ADC_ConfigChannel+0x66e>
 80050b6:	687b      	ldr	r3, [r7, #4]
 80050b8:	2201      	movs	r2, #1
 80050ba:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 80050be:	687b      	ldr	r3, [r7, #4]
 80050c0:	681b      	ldr	r3, [r3, #0]
 80050c2:	4618      	mov	r0, r3
 80050c4:	f7ff fa80 	bl	80045c8 <LL_ADC_REG_IsConversionOngoing>
 80050c8:	4603      	mov	r3, r0
 80050ca:	2b00      	cmp	r3, #0
 80050cc:	f040 8306 	bne.w	80056dc <HAL_ADC_ConfigChannel+0x650>
      /* ADC channels preselection */
      hadc->Instance->PCSEL_RES0 |= (1UL << (__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) & 0x1FUL));
    }
#else
    /* ADC channels preselection */
    hadc->Instance->PCSEL |= (1UL << (__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) & 0x1FUL));
 80050d0:	683b      	ldr	r3, [r7, #0]
 80050d2:	681b      	ldr	r3, [r3, #0]
 80050d4:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80050d8:	2b00      	cmp	r3, #0
 80050da:	d108      	bne.n	80050ee <HAL_ADC_ConfigChannel+0x62>
 80050dc:	683b      	ldr	r3, [r7, #0]
 80050de:	681b      	ldr	r3, [r3, #0]
 80050e0:	0e9b      	lsrs	r3, r3, #26
 80050e2:	f003 031f 	and.w	r3, r3, #31
 80050e6:	2201      	movs	r2, #1
 80050e8:	fa02 f303 	lsl.w	r3, r2, r3
 80050ec:	e016      	b.n	800511c <HAL_ADC_ConfigChannel+0x90>
 80050ee:	683b      	ldr	r3, [r7, #0]
 80050f0:	681b      	ldr	r3, [r3, #0]
 80050f2:	667b      	str	r3, [r7, #100]	; 0x64
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80050f4:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80050f6:	fa93 f3a3 	rbit	r3, r3
 80050fa:	663b      	str	r3, [r7, #96]	; 0x60
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 80050fc:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80050fe:	66bb      	str	r3, [r7, #104]	; 0x68
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 8005100:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8005102:	2b00      	cmp	r3, #0
 8005104:	d101      	bne.n	800510a <HAL_ADC_ConfigChannel+0x7e>
  {
    return 32U;
 8005106:	2320      	movs	r3, #32
 8005108:	e003      	b.n	8005112 <HAL_ADC_ConfigChannel+0x86>
  }
  return __builtin_clz(value);
 800510a:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800510c:	fab3 f383 	clz	r3, r3
 8005110:	b2db      	uxtb	r3, r3
 8005112:	f003 031f 	and.w	r3, r3, #31
 8005116:	2201      	movs	r2, #1
 8005118:	fa02 f303 	lsl.w	r3, r2, r3
 800511c:	687a      	ldr	r2, [r7, #4]
 800511e:	6812      	ldr	r2, [r2, #0]
 8005120:	69d1      	ldr	r1, [r2, #28]
 8005122:	687a      	ldr	r2, [r7, #4]
 8005124:	6812      	ldr	r2, [r2, #0]
 8005126:	430b      	orrs	r3, r1
 8005128:	61d3      	str	r3, [r2, #28]
#endif /* ADC_VER_V5_V90 */

    /* Set ADC group regular sequence: channel on the selected scan sequence rank */
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, sConfig->Rank, sConfig->Channel);
 800512a:	687b      	ldr	r3, [r7, #4]
 800512c:	6818      	ldr	r0, [r3, #0]
 800512e:	683b      	ldr	r3, [r7, #0]
 8005130:	6859      	ldr	r1, [r3, #4]
 8005132:	683b      	ldr	r3, [r7, #0]
 8005134:	681b      	ldr	r3, [r3, #0]
 8005136:	461a      	mov	r2, r3
 8005138:	f7ff f8eb 	bl	8004312 <LL_ADC_REG_SetSequencerRanks>
    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated when ADC is disabled or enabled without   */
    /* conversion on going on regular group:                                    */
    /*  - Channel sampling time                                                 */
    /*  - Channel offset                                                        */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 800513c:	687b      	ldr	r3, [r7, #4]
 800513e:	681b      	ldr	r3, [r3, #0]
 8005140:	4618      	mov	r0, r3
 8005142:	f7ff fa41 	bl	80045c8 <LL_ADC_REG_IsConversionOngoing>
 8005146:	67b8      	str	r0, [r7, #120]	; 0x78
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8005148:	687b      	ldr	r3, [r7, #4]
 800514a:	681b      	ldr	r3, [r3, #0]
 800514c:	4618      	mov	r0, r3
 800514e:	f7ff fa4e 	bl	80045ee <LL_ADC_INJ_IsConversionOngoing>
 8005152:	6778      	str	r0, [r7, #116]	; 0x74
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8005154:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8005156:	2b00      	cmp	r3, #0
 8005158:	f040 80b3 	bne.w	80052c2 <HAL_ADC_ConfigChannel+0x236>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 800515c:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800515e:	2b00      	cmp	r3, #0
 8005160:	f040 80af 	bne.w	80052c2 <HAL_ADC_ConfigChannel+0x236>
       )
    {
      /* Set sampling time of the selected ADC channel */
      LL_ADC_SetChannelSamplingTime(hadc->Instance, sConfig->Channel, sConfig->SamplingTime);
 8005164:	687b      	ldr	r3, [r7, #4]
 8005166:	6818      	ldr	r0, [r3, #0]
 8005168:	683b      	ldr	r3, [r7, #0]
 800516a:	6819      	ldr	r1, [r3, #0]
 800516c:	683b      	ldr	r3, [r7, #0]
 800516e:	689b      	ldr	r3, [r3, #8]
 8005170:	461a      	mov	r2, r3
 8005172:	f7ff f90d 	bl	8004390 <LL_ADC_SetChannelSamplingTime>
        tmpOffsetShifted = ADC3_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)sConfig->Offset);
      }
      else
#endif /* ADC_VER_V5_V90 */
      {
        tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)sConfig->Offset);
 8005176:	4b6a      	ldr	r3, [pc, #424]	; (8005320 <HAL_ADC_ConfigChannel+0x294>)
 8005178:	681b      	ldr	r3, [r3, #0]
 800517a:	f003 4370 	and.w	r3, r3, #4026531840	; 0xf0000000
 800517e:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8005182:	d10b      	bne.n	800519c <HAL_ADC_ConfigChannel+0x110>
 8005184:	683b      	ldr	r3, [r7, #0]
 8005186:	695a      	ldr	r2, [r3, #20]
 8005188:	687b      	ldr	r3, [r7, #4]
 800518a:	681b      	ldr	r3, [r3, #0]
 800518c:	68db      	ldr	r3, [r3, #12]
 800518e:	089b      	lsrs	r3, r3, #2
 8005190:	f003 0307 	and.w	r3, r3, #7
 8005194:	005b      	lsls	r3, r3, #1
 8005196:	fa02 f303 	lsl.w	r3, r2, r3
 800519a:	e01d      	b.n	80051d8 <HAL_ADC_ConfigChannel+0x14c>
 800519c:	687b      	ldr	r3, [r7, #4]
 800519e:	681b      	ldr	r3, [r3, #0]
 80051a0:	68db      	ldr	r3, [r3, #12]
 80051a2:	f003 0310 	and.w	r3, r3, #16
 80051a6:	2b00      	cmp	r3, #0
 80051a8:	d10b      	bne.n	80051c2 <HAL_ADC_ConfigChannel+0x136>
 80051aa:	683b      	ldr	r3, [r7, #0]
 80051ac:	695a      	ldr	r2, [r3, #20]
 80051ae:	687b      	ldr	r3, [r7, #4]
 80051b0:	681b      	ldr	r3, [r3, #0]
 80051b2:	68db      	ldr	r3, [r3, #12]
 80051b4:	089b      	lsrs	r3, r3, #2
 80051b6:	f003 0307 	and.w	r3, r3, #7
 80051ba:	005b      	lsls	r3, r3, #1
 80051bc:	fa02 f303 	lsl.w	r3, r2, r3
 80051c0:	e00a      	b.n	80051d8 <HAL_ADC_ConfigChannel+0x14c>
 80051c2:	683b      	ldr	r3, [r7, #0]
 80051c4:	695a      	ldr	r2, [r3, #20]
 80051c6:	687b      	ldr	r3, [r7, #4]
 80051c8:	681b      	ldr	r3, [r3, #0]
 80051ca:	68db      	ldr	r3, [r3, #12]
 80051cc:	089b      	lsrs	r3, r3, #2
 80051ce:	f003 0304 	and.w	r3, r3, #4
 80051d2:	005b      	lsls	r3, r3, #1
 80051d4:	fa02 f303 	lsl.w	r3, r2, r3
 80051d8:	673b      	str	r3, [r7, #112]	; 0x70
      }
      
      if (sConfig->OffsetNumber != ADC_OFFSET_NONE)
 80051da:	683b      	ldr	r3, [r7, #0]
 80051dc:	691b      	ldr	r3, [r3, #16]
 80051de:	2b04      	cmp	r3, #4
 80051e0:	d027      	beq.n	8005232 <HAL_ADC_ConfigChannel+0x1a6>
      {
        /* Set ADC selected offset number */
        LL_ADC_SetOffset(hadc->Instance, sConfig->OffsetNumber, sConfig->Channel, tmpOffsetShifted);
 80051e2:	687b      	ldr	r3, [r7, #4]
 80051e4:	6818      	ldr	r0, [r3, #0]
 80051e6:	683b      	ldr	r3, [r7, #0]
 80051e8:	6919      	ldr	r1, [r3, #16]
 80051ea:	683b      	ldr	r3, [r7, #0]
 80051ec:	681a      	ldr	r2, [r3, #0]
 80051ee:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80051f0:	f7ff f828 	bl	8004244 <LL_ADC_SetOffset>
        else
#endif /* ADC_VER_V5_V90 */
        {
          assert_param(IS_FUNCTIONAL_STATE(sConfig->OffsetSignedSaturation));
          /* Set ADC selected offset signed saturation */
          LL_ADC_SetOffsetSignedSaturation(hadc->Instance, sConfig->OffsetNumber, (sConfig->OffsetSignedSaturation == ENABLE) ? LL_ADC_OFFSET_SIGNED_SATURATION_ENABLE : LL_ADC_OFFSET_SIGNED_SATURATION_DISABLE);
 80051f4:	687b      	ldr	r3, [r7, #4]
 80051f6:	6818      	ldr	r0, [r3, #0]
 80051f8:	683b      	ldr	r3, [r7, #0]
 80051fa:	6919      	ldr	r1, [r3, #16]
 80051fc:	683b      	ldr	r3, [r7, #0]
 80051fe:	7e5b      	ldrb	r3, [r3, #25]
 8005200:	2b01      	cmp	r3, #1
 8005202:	d102      	bne.n	800520a <HAL_ADC_ConfigChannel+0x17e>
 8005204:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8005208:	e000      	b.n	800520c <HAL_ADC_ConfigChannel+0x180>
 800520a:	2300      	movs	r3, #0
 800520c:	461a      	mov	r2, r3
 800520e:	f7ff f852 	bl	80042b6 <LL_ADC_SetOffsetSignedSaturation>

          assert_param(IS_FUNCTIONAL_STATE(sConfig->OffsetRightShift));
          /* Set ADC selected offset right shift */
          LL_ADC_SetDataRightShift(hadc->Instance, sConfig->OffsetNumber, (sConfig->OffsetRightShift == ENABLE) ? LL_ADC_OFFSET_RSHIFT_ENABLE : LL_ADC_OFFSET_RSHIFT_DISABLE);
 8005212:	687b      	ldr	r3, [r7, #4]
 8005214:	6818      	ldr	r0, [r3, #0]
 8005216:	683b      	ldr	r3, [r7, #0]
 8005218:	6919      	ldr	r1, [r3, #16]
 800521a:	683b      	ldr	r3, [r7, #0]
 800521c:	7e1b      	ldrb	r3, [r3, #24]
 800521e:	2b01      	cmp	r3, #1
 8005220:	d102      	bne.n	8005228 <HAL_ADC_ConfigChannel+0x19c>
 8005222:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8005226:	e000      	b.n	800522a <HAL_ADC_ConfigChannel+0x19e>
 8005228:	2300      	movs	r3, #0
 800522a:	461a      	mov	r2, r3
 800522c:	f7ff f82a 	bl	8004284 <LL_ADC_SetDataRightShift>
 8005230:	e047      	b.n	80052c2 <HAL_ADC_ConfigChannel+0x236>
          }
        }
        else
#endif /* ADC_VER_V5_V90 */
        {
          if (((hadc->Instance->OFR1) & ADC_OFR1_OFFSET1_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8005232:	687b      	ldr	r3, [r7, #4]
 8005234:	681b      	ldr	r3, [r3, #0]
 8005236:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005238:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 800523c:	683b      	ldr	r3, [r7, #0]
 800523e:	681b      	ldr	r3, [r3, #0]
 8005240:	069b      	lsls	r3, r3, #26
 8005242:	429a      	cmp	r2, r3
 8005244:	d107      	bne.n	8005256 <HAL_ADC_ConfigChannel+0x1ca>
          {
            CLEAR_BIT(hadc->Instance->OFR1, ADC_OFR1_SSATE);
 8005246:	687b      	ldr	r3, [r7, #4]
 8005248:	681b      	ldr	r3, [r3, #0]
 800524a:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 800524c:	687b      	ldr	r3, [r7, #4]
 800524e:	681b      	ldr	r3, [r3, #0]
 8005250:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 8005254:	661a      	str	r2, [r3, #96]	; 0x60
          }
          if (((hadc->Instance->OFR2) & ADC_OFR2_OFFSET2_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8005256:	687b      	ldr	r3, [r7, #4]
 8005258:	681b      	ldr	r3, [r3, #0]
 800525a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800525c:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8005260:	683b      	ldr	r3, [r7, #0]
 8005262:	681b      	ldr	r3, [r3, #0]
 8005264:	069b      	lsls	r3, r3, #26
 8005266:	429a      	cmp	r2, r3
 8005268:	d107      	bne.n	800527a <HAL_ADC_ConfigChannel+0x1ee>
          {
            CLEAR_BIT(hadc->Instance->OFR2, ADC_OFR2_SSATE);
 800526a:	687b      	ldr	r3, [r7, #4]
 800526c:	681b      	ldr	r3, [r3, #0]
 800526e:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 8005270:	687b      	ldr	r3, [r7, #4]
 8005272:	681b      	ldr	r3, [r3, #0]
 8005274:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 8005278:	665a      	str	r2, [r3, #100]	; 0x64
          }
          if (((hadc->Instance->OFR3) & ADC_OFR3_OFFSET3_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 800527a:	687b      	ldr	r3, [r7, #4]
 800527c:	681b      	ldr	r3, [r3, #0]
 800527e:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8005280:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8005284:	683b      	ldr	r3, [r7, #0]
 8005286:	681b      	ldr	r3, [r3, #0]
 8005288:	069b      	lsls	r3, r3, #26
 800528a:	429a      	cmp	r2, r3
 800528c:	d107      	bne.n	800529e <HAL_ADC_ConfigChannel+0x212>
          {
            CLEAR_BIT(hadc->Instance->OFR3, ADC_OFR3_SSATE);
 800528e:	687b      	ldr	r3, [r7, #4]
 8005290:	681b      	ldr	r3, [r3, #0]
 8005292:	6e9a      	ldr	r2, [r3, #104]	; 0x68
 8005294:	687b      	ldr	r3, [r7, #4]
 8005296:	681b      	ldr	r3, [r3, #0]
 8005298:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 800529c:	669a      	str	r2, [r3, #104]	; 0x68
          }
          if (((hadc->Instance->OFR4) & ADC_OFR4_OFFSET4_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 800529e:	687b      	ldr	r3, [r7, #4]
 80052a0:	681b      	ldr	r3, [r3, #0]
 80052a2:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80052a4:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 80052a8:	683b      	ldr	r3, [r7, #0]
 80052aa:	681b      	ldr	r3, [r3, #0]
 80052ac:	069b      	lsls	r3, r3, #26
 80052ae:	429a      	cmp	r2, r3
 80052b0:	d107      	bne.n	80052c2 <HAL_ADC_ConfigChannel+0x236>
          {
            CLEAR_BIT(hadc->Instance->OFR4, ADC_OFR4_SSATE);
 80052b2:	687b      	ldr	r3, [r7, #4]
 80052b4:	681b      	ldr	r3, [r3, #0]
 80052b6:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 80052b8:	687b      	ldr	r3, [r7, #4]
 80052ba:	681b      	ldr	r3, [r3, #0]
 80052bc:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 80052c0:	66da      	str	r2, [r3, #108]	; 0x6c

    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated only when ADC is disabled:                */
    /*  - Single or differential mode                                           */
    /*  - Internal measurement channels: Vbat/VrefInt/TempSensor                */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 80052c2:	687b      	ldr	r3, [r7, #4]
 80052c4:	681b      	ldr	r3, [r3, #0]
 80052c6:	4618      	mov	r0, r3
 80052c8:	f7ff f944 	bl	8004554 <LL_ADC_IsEnabled>
 80052cc:	4603      	mov	r3, r0
 80052ce:	2b00      	cmp	r3, #0
 80052d0:	f040 820d 	bne.w	80056ee <HAL_ADC_ConfigChannel+0x662>
    {
      /* Set mode single-ended or differential input of the selected ADC channel */
      LL_ADC_SetChannelSingleDiff(hadc->Instance, sConfig->Channel, sConfig->SingleDiff);
 80052d4:	687b      	ldr	r3, [r7, #4]
 80052d6:	6818      	ldr	r0, [r3, #0]
 80052d8:	683b      	ldr	r3, [r7, #0]
 80052da:	6819      	ldr	r1, [r3, #0]
 80052dc:	683b      	ldr	r3, [r7, #0]
 80052de:	68db      	ldr	r3, [r3, #12]
 80052e0:	461a      	mov	r2, r3
 80052e2:	f7ff f881 	bl	80043e8 <LL_ADC_SetChannelSingleDiff>

      /* Configuration of differential mode */
      if (sConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 80052e6:	683b      	ldr	r3, [r7, #0]
 80052e8:	68db      	ldr	r3, [r3, #12]
 80052ea:	4a0c      	ldr	r2, [pc, #48]	; (800531c <HAL_ADC_ConfigChannel+0x290>)
 80052ec:	4293      	cmp	r3, r2
 80052ee:	f040 8133 	bne.w	8005558 <HAL_ADC_ConfigChannel+0x4cc>
      {
        /* Set sampling time of the selected ADC channel */
        /* Note: ADC channel number masked with value "0x1F" to ensure shift value within 32 bits range */
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 80052f2:	687b      	ldr	r3, [r7, #4]
 80052f4:	6818      	ldr	r0, [r3, #0]
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 80052f6:	683b      	ldr	r3, [r7, #0]
 80052f8:	681b      	ldr	r3, [r3, #0]
 80052fa:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80052fe:	2b00      	cmp	r3, #0
 8005300:	d110      	bne.n	8005324 <HAL_ADC_ConfigChannel+0x298>
 8005302:	683b      	ldr	r3, [r7, #0]
 8005304:	681b      	ldr	r3, [r3, #0]
 8005306:	0e9b      	lsrs	r3, r3, #26
 8005308:	3301      	adds	r3, #1
 800530a:	f003 031f 	and.w	r3, r3, #31
 800530e:	2b09      	cmp	r3, #9
 8005310:	bf94      	ite	ls
 8005312:	2301      	movls	r3, #1
 8005314:	2300      	movhi	r3, #0
 8005316:	b2db      	uxtb	r3, r3
 8005318:	e01e      	b.n	8005358 <HAL_ADC_ConfigChannel+0x2cc>
 800531a:	bf00      	nop
 800531c:	47ff0000 	.word	0x47ff0000
 8005320:	5c001000 	.word	0x5c001000
 8005324:	683b      	ldr	r3, [r7, #0]
 8005326:	681b      	ldr	r3, [r3, #0]
 8005328:	65bb      	str	r3, [r7, #88]	; 0x58
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800532a:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800532c:	fa93 f3a3 	rbit	r3, r3
 8005330:	657b      	str	r3, [r7, #84]	; 0x54
  return result;
 8005332:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8005334:	65fb      	str	r3, [r7, #92]	; 0x5c
  if (value == 0U)
 8005336:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8005338:	2b00      	cmp	r3, #0
 800533a:	d101      	bne.n	8005340 <HAL_ADC_ConfigChannel+0x2b4>
    return 32U;
 800533c:	2320      	movs	r3, #32
 800533e:	e003      	b.n	8005348 <HAL_ADC_ConfigChannel+0x2bc>
  return __builtin_clz(value);
 8005340:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8005342:	fab3 f383 	clz	r3, r3
 8005346:	b2db      	uxtb	r3, r3
 8005348:	3301      	adds	r3, #1
 800534a:	f003 031f 	and.w	r3, r3, #31
 800534e:	2b09      	cmp	r3, #9
 8005350:	bf94      	ite	ls
 8005352:	2301      	movls	r3, #1
 8005354:	2300      	movhi	r3, #0
 8005356:	b2db      	uxtb	r3, r3
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8005358:	2b00      	cmp	r3, #0
 800535a:	d079      	beq.n	8005450 <HAL_ADC_ConfigChannel+0x3c4>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 800535c:	683b      	ldr	r3, [r7, #0]
 800535e:	681b      	ldr	r3, [r3, #0]
 8005360:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8005364:	2b00      	cmp	r3, #0
 8005366:	d107      	bne.n	8005378 <HAL_ADC_ConfigChannel+0x2ec>
 8005368:	683b      	ldr	r3, [r7, #0]
 800536a:	681b      	ldr	r3, [r3, #0]
 800536c:	0e9b      	lsrs	r3, r3, #26
 800536e:	3301      	adds	r3, #1
 8005370:	069b      	lsls	r3, r3, #26
 8005372:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8005376:	e015      	b.n	80053a4 <HAL_ADC_ConfigChannel+0x318>
 8005378:	683b      	ldr	r3, [r7, #0]
 800537a:	681b      	ldr	r3, [r3, #0]
 800537c:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800537e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005380:	fa93 f3a3 	rbit	r3, r3
 8005384:	64bb      	str	r3, [r7, #72]	; 0x48
  return result;
 8005386:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8005388:	653b      	str	r3, [r7, #80]	; 0x50
  if (value == 0U)
 800538a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800538c:	2b00      	cmp	r3, #0
 800538e:	d101      	bne.n	8005394 <HAL_ADC_ConfigChannel+0x308>
    return 32U;
 8005390:	2320      	movs	r3, #32
 8005392:	e003      	b.n	800539c <HAL_ADC_ConfigChannel+0x310>
  return __builtin_clz(value);
 8005394:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8005396:	fab3 f383 	clz	r3, r3
 800539a:	b2db      	uxtb	r3, r3
 800539c:	3301      	adds	r3, #1
 800539e:	069b      	lsls	r3, r3, #26
 80053a0:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 80053a4:	683b      	ldr	r3, [r7, #0]
 80053a6:	681b      	ldr	r3, [r3, #0]
 80053a8:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80053ac:	2b00      	cmp	r3, #0
 80053ae:	d109      	bne.n	80053c4 <HAL_ADC_ConfigChannel+0x338>
 80053b0:	683b      	ldr	r3, [r7, #0]
 80053b2:	681b      	ldr	r3, [r3, #0]
 80053b4:	0e9b      	lsrs	r3, r3, #26
 80053b6:	3301      	adds	r3, #1
 80053b8:	f003 031f 	and.w	r3, r3, #31
 80053bc:	2101      	movs	r1, #1
 80053be:	fa01 f303 	lsl.w	r3, r1, r3
 80053c2:	e017      	b.n	80053f4 <HAL_ADC_ConfigChannel+0x368>
 80053c4:	683b      	ldr	r3, [r7, #0]
 80053c6:	681b      	ldr	r3, [r3, #0]
 80053c8:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80053ca:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80053cc:	fa93 f3a3 	rbit	r3, r3
 80053d0:	63fb      	str	r3, [r7, #60]	; 0x3c
  return result;
 80053d2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80053d4:	647b      	str	r3, [r7, #68]	; 0x44
  if (value == 0U)
 80053d6:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80053d8:	2b00      	cmp	r3, #0
 80053da:	d101      	bne.n	80053e0 <HAL_ADC_ConfigChannel+0x354>
    return 32U;
 80053dc:	2320      	movs	r3, #32
 80053de:	e003      	b.n	80053e8 <HAL_ADC_ConfigChannel+0x35c>
  return __builtin_clz(value);
 80053e0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80053e2:	fab3 f383 	clz	r3, r3
 80053e6:	b2db      	uxtb	r3, r3
 80053e8:	3301      	adds	r3, #1
 80053ea:	f003 031f 	and.w	r3, r3, #31
 80053ee:	2101      	movs	r1, #1
 80053f0:	fa01 f303 	lsl.w	r3, r1, r3
 80053f4:	ea42 0103 	orr.w	r1, r2, r3
 80053f8:	683b      	ldr	r3, [r7, #0]
 80053fa:	681b      	ldr	r3, [r3, #0]
 80053fc:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8005400:	2b00      	cmp	r3, #0
 8005402:	d10a      	bne.n	800541a <HAL_ADC_ConfigChannel+0x38e>
 8005404:	683b      	ldr	r3, [r7, #0]
 8005406:	681b      	ldr	r3, [r3, #0]
 8005408:	0e9b      	lsrs	r3, r3, #26
 800540a:	3301      	adds	r3, #1
 800540c:	f003 021f 	and.w	r2, r3, #31
 8005410:	4613      	mov	r3, r2
 8005412:	005b      	lsls	r3, r3, #1
 8005414:	4413      	add	r3, r2
 8005416:	051b      	lsls	r3, r3, #20
 8005418:	e018      	b.n	800544c <HAL_ADC_ConfigChannel+0x3c0>
 800541a:	683b      	ldr	r3, [r7, #0]
 800541c:	681b      	ldr	r3, [r3, #0]
 800541e:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005420:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005422:	fa93 f3a3 	rbit	r3, r3
 8005426:	633b      	str	r3, [r7, #48]	; 0x30
  return result;
 8005428:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800542a:	63bb      	str	r3, [r7, #56]	; 0x38
  if (value == 0U)
 800542c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800542e:	2b00      	cmp	r3, #0
 8005430:	d101      	bne.n	8005436 <HAL_ADC_ConfigChannel+0x3aa>
    return 32U;
 8005432:	2320      	movs	r3, #32
 8005434:	e003      	b.n	800543e <HAL_ADC_ConfigChannel+0x3b2>
  return __builtin_clz(value);
 8005436:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005438:	fab3 f383 	clz	r3, r3
 800543c:	b2db      	uxtb	r3, r3
 800543e:	3301      	adds	r3, #1
 8005440:	f003 021f 	and.w	r2, r3, #31
 8005444:	4613      	mov	r3, r2
 8005446:	005b      	lsls	r3, r3, #1
 8005448:	4413      	add	r3, r2
 800544a:	051b      	lsls	r3, r3, #20
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 800544c:	430b      	orrs	r3, r1
 800544e:	e07e      	b.n	800554e <HAL_ADC_ConfigChannel+0x4c2>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8005450:	683b      	ldr	r3, [r7, #0]
 8005452:	681b      	ldr	r3, [r3, #0]
 8005454:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8005458:	2b00      	cmp	r3, #0
 800545a:	d107      	bne.n	800546c <HAL_ADC_ConfigChannel+0x3e0>
 800545c:	683b      	ldr	r3, [r7, #0]
 800545e:	681b      	ldr	r3, [r3, #0]
 8005460:	0e9b      	lsrs	r3, r3, #26
 8005462:	3301      	adds	r3, #1
 8005464:	069b      	lsls	r3, r3, #26
 8005466:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 800546a:	e015      	b.n	8005498 <HAL_ADC_ConfigChannel+0x40c>
 800546c:	683b      	ldr	r3, [r7, #0]
 800546e:	681b      	ldr	r3, [r3, #0]
 8005470:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005472:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005474:	fa93 f3a3 	rbit	r3, r3
 8005478:	627b      	str	r3, [r7, #36]	; 0x24
  return result;
 800547a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800547c:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (value == 0U)
 800547e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005480:	2b00      	cmp	r3, #0
 8005482:	d101      	bne.n	8005488 <HAL_ADC_ConfigChannel+0x3fc>
    return 32U;
 8005484:	2320      	movs	r3, #32
 8005486:	e003      	b.n	8005490 <HAL_ADC_ConfigChannel+0x404>
  return __builtin_clz(value);
 8005488:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800548a:	fab3 f383 	clz	r3, r3
 800548e:	b2db      	uxtb	r3, r3
 8005490:	3301      	adds	r3, #1
 8005492:	069b      	lsls	r3, r3, #26
 8005494:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8005498:	683b      	ldr	r3, [r7, #0]
 800549a:	681b      	ldr	r3, [r3, #0]
 800549c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80054a0:	2b00      	cmp	r3, #0
 80054a2:	d109      	bne.n	80054b8 <HAL_ADC_ConfigChannel+0x42c>
 80054a4:	683b      	ldr	r3, [r7, #0]
 80054a6:	681b      	ldr	r3, [r3, #0]
 80054a8:	0e9b      	lsrs	r3, r3, #26
 80054aa:	3301      	adds	r3, #1
 80054ac:	f003 031f 	and.w	r3, r3, #31
 80054b0:	2101      	movs	r1, #1
 80054b2:	fa01 f303 	lsl.w	r3, r1, r3
 80054b6:	e017      	b.n	80054e8 <HAL_ADC_ConfigChannel+0x45c>
 80054b8:	683b      	ldr	r3, [r7, #0]
 80054ba:	681b      	ldr	r3, [r3, #0]
 80054bc:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80054be:	69fb      	ldr	r3, [r7, #28]
 80054c0:	fa93 f3a3 	rbit	r3, r3
 80054c4:	61bb      	str	r3, [r7, #24]
  return result;
 80054c6:	69bb      	ldr	r3, [r7, #24]
 80054c8:	623b      	str	r3, [r7, #32]
  if (value == 0U)
 80054ca:	6a3b      	ldr	r3, [r7, #32]
 80054cc:	2b00      	cmp	r3, #0
 80054ce:	d101      	bne.n	80054d4 <HAL_ADC_ConfigChannel+0x448>
    return 32U;
 80054d0:	2320      	movs	r3, #32
 80054d2:	e003      	b.n	80054dc <HAL_ADC_ConfigChannel+0x450>
  return __builtin_clz(value);
 80054d4:	6a3b      	ldr	r3, [r7, #32]
 80054d6:	fab3 f383 	clz	r3, r3
 80054da:	b2db      	uxtb	r3, r3
 80054dc:	3301      	adds	r3, #1
 80054de:	f003 031f 	and.w	r3, r3, #31
 80054e2:	2101      	movs	r1, #1
 80054e4:	fa01 f303 	lsl.w	r3, r1, r3
 80054e8:	ea42 0103 	orr.w	r1, r2, r3
 80054ec:	683b      	ldr	r3, [r7, #0]
 80054ee:	681b      	ldr	r3, [r3, #0]
 80054f0:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80054f4:	2b00      	cmp	r3, #0
 80054f6:	d10d      	bne.n	8005514 <HAL_ADC_ConfigChannel+0x488>
 80054f8:	683b      	ldr	r3, [r7, #0]
 80054fa:	681b      	ldr	r3, [r3, #0]
 80054fc:	0e9b      	lsrs	r3, r3, #26
 80054fe:	3301      	adds	r3, #1
 8005500:	f003 021f 	and.w	r2, r3, #31
 8005504:	4613      	mov	r3, r2
 8005506:	005b      	lsls	r3, r3, #1
 8005508:	4413      	add	r3, r2
 800550a:	3b1e      	subs	r3, #30
 800550c:	051b      	lsls	r3, r3, #20
 800550e:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8005512:	e01b      	b.n	800554c <HAL_ADC_ConfigChannel+0x4c0>
 8005514:	683b      	ldr	r3, [r7, #0]
 8005516:	681b      	ldr	r3, [r3, #0]
 8005518:	613b      	str	r3, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800551a:	693b      	ldr	r3, [r7, #16]
 800551c:	fa93 f3a3 	rbit	r3, r3
 8005520:	60fb      	str	r3, [r7, #12]
  return result;
 8005522:	68fb      	ldr	r3, [r7, #12]
 8005524:	617b      	str	r3, [r7, #20]
  if (value == 0U)
 8005526:	697b      	ldr	r3, [r7, #20]
 8005528:	2b00      	cmp	r3, #0
 800552a:	d101      	bne.n	8005530 <HAL_ADC_ConfigChannel+0x4a4>
    return 32U;
 800552c:	2320      	movs	r3, #32
 800552e:	e003      	b.n	8005538 <HAL_ADC_ConfigChannel+0x4ac>
  return __builtin_clz(value);
 8005530:	697b      	ldr	r3, [r7, #20]
 8005532:	fab3 f383 	clz	r3, r3
 8005536:	b2db      	uxtb	r3, r3
 8005538:	3301      	adds	r3, #1
 800553a:	f003 021f 	and.w	r2, r3, #31
 800553e:	4613      	mov	r3, r2
 8005540:	005b      	lsls	r3, r3, #1
 8005542:	4413      	add	r3, r2
 8005544:	3b1e      	subs	r3, #30
 8005546:	051b      	lsls	r3, r3, #20
 8005548:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 800554c:	430b      	orrs	r3, r1
 800554e:	683a      	ldr	r2, [r7, #0]
 8005550:	6892      	ldr	r2, [r2, #8]
 8005552:	4619      	mov	r1, r3
 8005554:	f7fe ff1c 	bl	8004390 <LL_ADC_SetChannelSamplingTime>
      /* If internal channel selected, enable dedicated internal buffers and    */
      /* paths.                                                                 */
      /* Note: these internal measurement paths can be disabled using           */
      /* HAL_ADC_DeInit().                                                      */

      if (__LL_ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 8005558:	683b      	ldr	r3, [r7, #0]
 800555a:	681b      	ldr	r3, [r3, #0]
 800555c:	2b00      	cmp	r3, #0
 800555e:	f280 80c6 	bge.w	80056ee <HAL_ADC_ConfigChannel+0x662>
      {
        /* Configuration of common ADC parameters                                 */

        tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8005562:	687b      	ldr	r3, [r7, #4]
 8005564:	681b      	ldr	r3, [r3, #0]
 8005566:	4a67      	ldr	r2, [pc, #412]	; (8005704 <HAL_ADC_ConfigChannel+0x678>)
 8005568:	4293      	cmp	r3, r2
 800556a:	d004      	beq.n	8005576 <HAL_ADC_ConfigChannel+0x4ea>
 800556c:	687b      	ldr	r3, [r7, #4]
 800556e:	681b      	ldr	r3, [r3, #0]
 8005570:	4a65      	ldr	r2, [pc, #404]	; (8005708 <HAL_ADC_ConfigChannel+0x67c>)
 8005572:	4293      	cmp	r3, r2
 8005574:	d101      	bne.n	800557a <HAL_ADC_ConfigChannel+0x4ee>
 8005576:	4b65      	ldr	r3, [pc, #404]	; (800570c <HAL_ADC_ConfigChannel+0x680>)
 8005578:	e000      	b.n	800557c <HAL_ADC_ConfigChannel+0x4f0>
 800557a:	4b65      	ldr	r3, [pc, #404]	; (8005710 <HAL_ADC_ConfigChannel+0x684>)
 800557c:	4618      	mov	r0, r3
 800557e:	f7fe fe53 	bl	8004228 <LL_ADC_GetCommonPathInternalCh>
 8005582:	66f8      	str	r0, [r7, #108]	; 0x6c

        /* Software is allowed to change common parameters only when all ADCs   */
        /* of the common group are disabled.                                    */
        if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8005584:	687b      	ldr	r3, [r7, #4]
 8005586:	681b      	ldr	r3, [r3, #0]
 8005588:	4a5e      	ldr	r2, [pc, #376]	; (8005704 <HAL_ADC_ConfigChannel+0x678>)
 800558a:	4293      	cmp	r3, r2
 800558c:	d004      	beq.n	8005598 <HAL_ADC_ConfigChannel+0x50c>
 800558e:	687b      	ldr	r3, [r7, #4]
 8005590:	681b      	ldr	r3, [r3, #0]
 8005592:	4a5d      	ldr	r2, [pc, #372]	; (8005708 <HAL_ADC_ConfigChannel+0x67c>)
 8005594:	4293      	cmp	r3, r2
 8005596:	d10e      	bne.n	80055b6 <HAL_ADC_ConfigChannel+0x52a>
 8005598:	485a      	ldr	r0, [pc, #360]	; (8005704 <HAL_ADC_ConfigChannel+0x678>)
 800559a:	f7fe ffdb 	bl	8004554 <LL_ADC_IsEnabled>
 800559e:	4604      	mov	r4, r0
 80055a0:	4859      	ldr	r0, [pc, #356]	; (8005708 <HAL_ADC_ConfigChannel+0x67c>)
 80055a2:	f7fe ffd7 	bl	8004554 <LL_ADC_IsEnabled>
 80055a6:	4603      	mov	r3, r0
 80055a8:	4323      	orrs	r3, r4
 80055aa:	2b00      	cmp	r3, #0
 80055ac:	bf0c      	ite	eq
 80055ae:	2301      	moveq	r3, #1
 80055b0:	2300      	movne	r3, #0
 80055b2:	b2db      	uxtb	r3, r3
 80055b4:	e008      	b.n	80055c8 <HAL_ADC_ConfigChannel+0x53c>
 80055b6:	4857      	ldr	r0, [pc, #348]	; (8005714 <HAL_ADC_ConfigChannel+0x688>)
 80055b8:	f7fe ffcc 	bl	8004554 <LL_ADC_IsEnabled>
 80055bc:	4603      	mov	r3, r0
 80055be:	2b00      	cmp	r3, #0
 80055c0:	bf0c      	ite	eq
 80055c2:	2301      	moveq	r3, #1
 80055c4:	2300      	movne	r3, #0
 80055c6:	b2db      	uxtb	r3, r3
 80055c8:	2b00      	cmp	r3, #0
 80055ca:	d07d      	beq.n	80056c8 <HAL_ADC_ConfigChannel+0x63c>
        {
          /* If the requested internal measurement path has already been enabled, */
          /* bypass the configuration processing.                                 */
          if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 80055cc:	683b      	ldr	r3, [r7, #0]
 80055ce:	681b      	ldr	r3, [r3, #0]
 80055d0:	4a51      	ldr	r2, [pc, #324]	; (8005718 <HAL_ADC_ConfigChannel+0x68c>)
 80055d2:	4293      	cmp	r3, r2
 80055d4:	d130      	bne.n	8005638 <HAL_ADC_ConfigChannel+0x5ac>
 80055d6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80055d8:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80055dc:	2b00      	cmp	r3, #0
 80055de:	d12b      	bne.n	8005638 <HAL_ADC_ConfigChannel+0x5ac>
          {
            if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 80055e0:	687b      	ldr	r3, [r7, #4]
 80055e2:	681b      	ldr	r3, [r3, #0]
 80055e4:	4a4b      	ldr	r2, [pc, #300]	; (8005714 <HAL_ADC_ConfigChannel+0x688>)
 80055e6:	4293      	cmp	r3, r2
 80055e8:	f040 8081 	bne.w	80056ee <HAL_ADC_ConfigChannel+0x662>
            {
              LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance), LL_ADC_PATH_INTERNAL_TEMPSENSOR | tmp_config_internal_channel);
 80055ec:	687b      	ldr	r3, [r7, #4]
 80055ee:	681b      	ldr	r3, [r3, #0]
 80055f0:	4a44      	ldr	r2, [pc, #272]	; (8005704 <HAL_ADC_ConfigChannel+0x678>)
 80055f2:	4293      	cmp	r3, r2
 80055f4:	d004      	beq.n	8005600 <HAL_ADC_ConfigChannel+0x574>
 80055f6:	687b      	ldr	r3, [r7, #4]
 80055f8:	681b      	ldr	r3, [r3, #0]
 80055fa:	4a43      	ldr	r2, [pc, #268]	; (8005708 <HAL_ADC_ConfigChannel+0x67c>)
 80055fc:	4293      	cmp	r3, r2
 80055fe:	d101      	bne.n	8005604 <HAL_ADC_ConfigChannel+0x578>
 8005600:	4a42      	ldr	r2, [pc, #264]	; (800570c <HAL_ADC_ConfigChannel+0x680>)
 8005602:	e000      	b.n	8005606 <HAL_ADC_ConfigChannel+0x57a>
 8005604:	4a42      	ldr	r2, [pc, #264]	; (8005710 <HAL_ADC_ConfigChannel+0x684>)
 8005606:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005608:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 800560c:	4619      	mov	r1, r3
 800560e:	4610      	mov	r0, r2
 8005610:	f7fe fdf7 	bl	8004202 <LL_ADC_SetCommonPathInternalCh>
              /* Delay for temperature sensor stabilization time */
              /* Wait loop initialization and execution */
              /* Note: Variable divided by 2 to compensate partially              */
              /*       CPU processing cycles, scaling in us split to not          */
              /*       exceed 32 bits register capacity and handle low frequency. */
              wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8005614:	4b41      	ldr	r3, [pc, #260]	; (800571c <HAL_ADC_ConfigChannel+0x690>)
 8005616:	681b      	ldr	r3, [r3, #0]
 8005618:	099b      	lsrs	r3, r3, #6
 800561a:	4a41      	ldr	r2, [pc, #260]	; (8005720 <HAL_ADC_ConfigChannel+0x694>)
 800561c:	fba2 2303 	umull	r2, r3, r2, r3
 8005620:	099b      	lsrs	r3, r3, #6
 8005622:	3301      	adds	r3, #1
 8005624:	005b      	lsls	r3, r3, #1
 8005626:	60bb      	str	r3, [r7, #8]
              while (wait_loop_index != 0UL)
 8005628:	e002      	b.n	8005630 <HAL_ADC_ConfigChannel+0x5a4>
              {
                wait_loop_index--;
 800562a:	68bb      	ldr	r3, [r7, #8]
 800562c:	3b01      	subs	r3, #1
 800562e:	60bb      	str	r3, [r7, #8]
              while (wait_loop_index != 0UL)
 8005630:	68bb      	ldr	r3, [r7, #8]
 8005632:	2b00      	cmp	r3, #0
 8005634:	d1f9      	bne.n	800562a <HAL_ADC_ConfigChannel+0x59e>
            if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8005636:	e05a      	b.n	80056ee <HAL_ADC_ConfigChannel+0x662>
              }
            }
          }
          else if ((sConfig->Channel == ADC_CHANNEL_VBAT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 8005638:	683b      	ldr	r3, [r7, #0]
 800563a:	681b      	ldr	r3, [r3, #0]
 800563c:	4a39      	ldr	r2, [pc, #228]	; (8005724 <HAL_ADC_ConfigChannel+0x698>)
 800563e:	4293      	cmp	r3, r2
 8005640:	d11e      	bne.n	8005680 <HAL_ADC_ConfigChannel+0x5f4>
 8005642:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005644:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8005648:	2b00      	cmp	r3, #0
 800564a:	d119      	bne.n	8005680 <HAL_ADC_ConfigChannel+0x5f4>
          {
            if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 800564c:	687b      	ldr	r3, [r7, #4]
 800564e:	681b      	ldr	r3, [r3, #0]
 8005650:	4a30      	ldr	r2, [pc, #192]	; (8005714 <HAL_ADC_ConfigChannel+0x688>)
 8005652:	4293      	cmp	r3, r2
 8005654:	d14b      	bne.n	80056ee <HAL_ADC_ConfigChannel+0x662>
            {
              LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance), LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
 8005656:	687b      	ldr	r3, [r7, #4]
 8005658:	681b      	ldr	r3, [r3, #0]
 800565a:	4a2a      	ldr	r2, [pc, #168]	; (8005704 <HAL_ADC_ConfigChannel+0x678>)
 800565c:	4293      	cmp	r3, r2
 800565e:	d004      	beq.n	800566a <HAL_ADC_ConfigChannel+0x5de>
 8005660:	687b      	ldr	r3, [r7, #4]
 8005662:	681b      	ldr	r3, [r3, #0]
 8005664:	4a28      	ldr	r2, [pc, #160]	; (8005708 <HAL_ADC_ConfigChannel+0x67c>)
 8005666:	4293      	cmp	r3, r2
 8005668:	d101      	bne.n	800566e <HAL_ADC_ConfigChannel+0x5e2>
 800566a:	4a28      	ldr	r2, [pc, #160]	; (800570c <HAL_ADC_ConfigChannel+0x680>)
 800566c:	e000      	b.n	8005670 <HAL_ADC_ConfigChannel+0x5e4>
 800566e:	4a28      	ldr	r2, [pc, #160]	; (8005710 <HAL_ADC_ConfigChannel+0x684>)
 8005670:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005672:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8005676:	4619      	mov	r1, r3
 8005678:	4610      	mov	r0, r2
 800567a:	f7fe fdc2 	bl	8004202 <LL_ADC_SetCommonPathInternalCh>
            if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 800567e:	e036      	b.n	80056ee <HAL_ADC_ConfigChannel+0x662>
            }
          }
          else if ((sConfig->Channel == ADC_CHANNEL_VREFINT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 8005680:	683b      	ldr	r3, [r7, #0]
 8005682:	681b      	ldr	r3, [r3, #0]
 8005684:	4a28      	ldr	r2, [pc, #160]	; (8005728 <HAL_ADC_ConfigChannel+0x69c>)
 8005686:	4293      	cmp	r3, r2
 8005688:	d131      	bne.n	80056ee <HAL_ADC_ConfigChannel+0x662>
 800568a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800568c:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8005690:	2b00      	cmp	r3, #0
 8005692:	d12c      	bne.n	80056ee <HAL_ADC_ConfigChannel+0x662>
          {
            if (ADC_VREFINT_INSTANCE(hadc))
 8005694:	687b      	ldr	r3, [r7, #4]
 8005696:	681b      	ldr	r3, [r3, #0]
 8005698:	4a1e      	ldr	r2, [pc, #120]	; (8005714 <HAL_ADC_ConfigChannel+0x688>)
 800569a:	4293      	cmp	r3, r2
 800569c:	d127      	bne.n	80056ee <HAL_ADC_ConfigChannel+0x662>
            {
              LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance), LL_ADC_PATH_INTERNAL_VREFINT | tmp_config_internal_channel);
 800569e:	687b      	ldr	r3, [r7, #4]
 80056a0:	681b      	ldr	r3, [r3, #0]
 80056a2:	4a18      	ldr	r2, [pc, #96]	; (8005704 <HAL_ADC_ConfigChannel+0x678>)
 80056a4:	4293      	cmp	r3, r2
 80056a6:	d004      	beq.n	80056b2 <HAL_ADC_ConfigChannel+0x626>
 80056a8:	687b      	ldr	r3, [r7, #4]
 80056aa:	681b      	ldr	r3, [r3, #0]
 80056ac:	4a16      	ldr	r2, [pc, #88]	; (8005708 <HAL_ADC_ConfigChannel+0x67c>)
 80056ae:	4293      	cmp	r3, r2
 80056b0:	d101      	bne.n	80056b6 <HAL_ADC_ConfigChannel+0x62a>
 80056b2:	4a16      	ldr	r2, [pc, #88]	; (800570c <HAL_ADC_ConfigChannel+0x680>)
 80056b4:	e000      	b.n	80056b8 <HAL_ADC_ConfigChannel+0x62c>
 80056b6:	4a16      	ldr	r2, [pc, #88]	; (8005710 <HAL_ADC_ConfigChannel+0x684>)
 80056b8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80056ba:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 80056be:	4619      	mov	r1, r3
 80056c0:	4610      	mov	r0, r2
 80056c2:	f7fe fd9e 	bl	8004202 <LL_ADC_SetCommonPathInternalCh>
 80056c6:	e012      	b.n	80056ee <HAL_ADC_ConfigChannel+0x662>
        /* enabled and other ADC of the common group are enabled, internal      */
        /* measurement paths cannot be enabled.                                 */
        else
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80056c8:	687b      	ldr	r3, [r7, #4]
 80056ca:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80056cc:	f043 0220 	orr.w	r2, r3, #32
 80056d0:	687b      	ldr	r3, [r7, #4]
 80056d2:	655a      	str	r2, [r3, #84]	; 0x54

          tmp_hal_status = HAL_ERROR;
 80056d4:	2301      	movs	r3, #1
 80056d6:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
 80056da:	e008      	b.n	80056ee <HAL_ADC_ConfigChannel+0x662>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80056dc:	687b      	ldr	r3, [r7, #4]
 80056de:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80056e0:	f043 0220 	orr.w	r2, r3, #32
 80056e4:	687b      	ldr	r3, [r7, #4]
 80056e6:	655a      	str	r2, [r3, #84]	; 0x54

    tmp_hal_status = HAL_ERROR;
 80056e8:	2301      	movs	r3, #1
 80056ea:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80056ee:	687b      	ldr	r3, [r7, #4]
 80056f0:	2200      	movs	r2, #0
 80056f2:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Return function status */
  return tmp_hal_status;
 80056f6:	f897 307f 	ldrb.w	r3, [r7, #127]	; 0x7f
}
 80056fa:	4618      	mov	r0, r3
 80056fc:	3784      	adds	r7, #132	; 0x84
 80056fe:	46bd      	mov	sp, r7
 8005700:	bd90      	pop	{r4, r7, pc}
 8005702:	bf00      	nop
 8005704:	40022000 	.word	0x40022000
 8005708:	40022100 	.word	0x40022100
 800570c:	40022300 	.word	0x40022300
 8005710:	58026300 	.word	0x58026300
 8005714:	58026000 	.word	0x58026000
 8005718:	cb840000 	.word	0xcb840000
 800571c:	20000010 	.word	0x20000010
 8005720:	053e2d63 	.word	0x053e2d63
 8005724:	c7520000 	.word	0xc7520000
 8005728:	cfb80000 	.word	0xcfb80000

0800572c <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef *hadc)
{
 800572c:	b580      	push	{r7, lr}
 800572e:	b084      	sub	sp, #16
 8005730:	af00      	add	r7, sp, #0
 8005732:	6078      	str	r0, [r7, #4]

  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8005734:	687b      	ldr	r3, [r7, #4]
 8005736:	681b      	ldr	r3, [r3, #0]
 8005738:	4618      	mov	r0, r3
 800573a:	f7fe ff0b 	bl	8004554 <LL_ADC_IsEnabled>
 800573e:	4603      	mov	r3, r0
 8005740:	2b00      	cmp	r3, #0
 8005742:	d16e      	bne.n	8005822 <ADC_Enable+0xf6>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_ADCAL | ADC_CR_JADSTP | ADC_CR_ADSTP | ADC_CR_JADSTART | ADC_CR_ADSTART | ADC_CR_ADDIS | ADC_CR_ADEN)) != 0UL)
 8005744:	687b      	ldr	r3, [r7, #4]
 8005746:	681b      	ldr	r3, [r3, #0]
 8005748:	689a      	ldr	r2, [r3, #8]
 800574a:	4b38      	ldr	r3, [pc, #224]	; (800582c <ADC_Enable+0x100>)
 800574c:	4013      	ands	r3, r2
 800574e:	2b00      	cmp	r3, #0
 8005750:	d00d      	beq.n	800576e <ADC_Enable+0x42>
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8005752:	687b      	ldr	r3, [r7, #4]
 8005754:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005756:	f043 0210 	orr.w	r2, r3, #16
 800575a:	687b      	ldr	r3, [r7, #4]
 800575c:	655a      	str	r2, [r3, #84]	; 0x54

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800575e:	687b      	ldr	r3, [r7, #4]
 8005760:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005762:	f043 0201 	orr.w	r2, r3, #1
 8005766:	687b      	ldr	r3, [r7, #4]
 8005768:	659a      	str	r2, [r3, #88]	; 0x58

      return HAL_ERROR;
 800576a:	2301      	movs	r3, #1
 800576c:	e05a      	b.n	8005824 <ADC_Enable+0xf8>
    }

    /* Enable the ADC peripheral */
    LL_ADC_Enable(hadc->Instance);
 800576e:	687b      	ldr	r3, [r7, #4]
 8005770:	681b      	ldr	r3, [r3, #0]
 8005772:	4618      	mov	r0, r3
 8005774:	f7fe fec6 	bl	8004504 <LL_ADC_Enable>

    /* Wait for ADC effectively enabled */
    tickstart = HAL_GetTick();
 8005778:	f7fe fcca 	bl	8004110 <HAL_GetTick>
 800577c:	60f8      	str	r0, [r7, #12]

    /* Poll for ADC ready flag raised except case of multimode enabled
       and ADC slave selected. */
    uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 800577e:	687b      	ldr	r3, [r7, #4]
 8005780:	681b      	ldr	r3, [r3, #0]
 8005782:	4a2b      	ldr	r2, [pc, #172]	; (8005830 <ADC_Enable+0x104>)
 8005784:	4293      	cmp	r3, r2
 8005786:	d004      	beq.n	8005792 <ADC_Enable+0x66>
 8005788:	687b      	ldr	r3, [r7, #4]
 800578a:	681b      	ldr	r3, [r3, #0]
 800578c:	4a29      	ldr	r2, [pc, #164]	; (8005834 <ADC_Enable+0x108>)
 800578e:	4293      	cmp	r3, r2
 8005790:	d101      	bne.n	8005796 <ADC_Enable+0x6a>
 8005792:	4b29      	ldr	r3, [pc, #164]	; (8005838 <ADC_Enable+0x10c>)
 8005794:	e000      	b.n	8005798 <ADC_Enable+0x6c>
 8005796:	4b29      	ldr	r3, [pc, #164]	; (800583c <ADC_Enable+0x110>)
 8005798:	4618      	mov	r0, r3
 800579a:	f7fe fe49 	bl	8004430 <LL_ADC_GetMultimode>
 800579e:	60b8      	str	r0, [r7, #8]
    if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 80057a0:	687b      	ldr	r3, [r7, #4]
 80057a2:	681b      	ldr	r3, [r3, #0]
 80057a4:	4a23      	ldr	r2, [pc, #140]	; (8005834 <ADC_Enable+0x108>)
 80057a6:	4293      	cmp	r3, r2
 80057a8:	d002      	beq.n	80057b0 <ADC_Enable+0x84>
 80057aa:	687b      	ldr	r3, [r7, #4]
 80057ac:	681b      	ldr	r3, [r3, #0]
 80057ae:	e000      	b.n	80057b2 <ADC_Enable+0x86>
 80057b0:	4b1f      	ldr	r3, [pc, #124]	; (8005830 <ADC_Enable+0x104>)
 80057b2:	687a      	ldr	r2, [r7, #4]
 80057b4:	6812      	ldr	r2, [r2, #0]
 80057b6:	4293      	cmp	r3, r2
 80057b8:	d02c      	beq.n	8005814 <ADC_Enable+0xe8>
        || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 80057ba:	68bb      	ldr	r3, [r7, #8]
 80057bc:	2b00      	cmp	r3, #0
 80057be:	d130      	bne.n	8005822 <ADC_Enable+0xf6>
       )
    {
      while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 80057c0:	e028      	b.n	8005814 <ADC_Enable+0xe8>
            The workaround is to continue setting ADEN until ADRDY is becomes 1.
            Additionally, ADC_ENABLE_TIMEOUT is defined to encompass this
            4 ADC clock cycle duration */
        /* Note: Test of ADC enabled required due to hardware constraint to     */
        /*       not enable ADC if already enabled.                             */
        if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 80057c2:	687b      	ldr	r3, [r7, #4]
 80057c4:	681b      	ldr	r3, [r3, #0]
 80057c6:	4618      	mov	r0, r3
 80057c8:	f7fe fec4 	bl	8004554 <LL_ADC_IsEnabled>
 80057cc:	4603      	mov	r3, r0
 80057ce:	2b00      	cmp	r3, #0
 80057d0:	d104      	bne.n	80057dc <ADC_Enable+0xb0>
        {
          LL_ADC_Enable(hadc->Instance);
 80057d2:	687b      	ldr	r3, [r7, #4]
 80057d4:	681b      	ldr	r3, [r3, #0]
 80057d6:	4618      	mov	r0, r3
 80057d8:	f7fe fe94 	bl	8004504 <LL_ADC_Enable>
        }

        if ((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 80057dc:	f7fe fc98 	bl	8004110 <HAL_GetTick>
 80057e0:	4602      	mov	r2, r0
 80057e2:	68fb      	ldr	r3, [r7, #12]
 80057e4:	1ad3      	subs	r3, r2, r3
 80057e6:	2b02      	cmp	r3, #2
 80057e8:	d914      	bls.n	8005814 <ADC_Enable+0xe8>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 80057ea:	687b      	ldr	r3, [r7, #4]
 80057ec:	681b      	ldr	r3, [r3, #0]
 80057ee:	681b      	ldr	r3, [r3, #0]
 80057f0:	f003 0301 	and.w	r3, r3, #1
 80057f4:	2b01      	cmp	r3, #1
 80057f6:	d00d      	beq.n	8005814 <ADC_Enable+0xe8>
          {
            /* Update ADC state machine to error */
            SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80057f8:	687b      	ldr	r3, [r7, #4]
 80057fa:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80057fc:	f043 0210 	orr.w	r2, r3, #16
 8005800:	687b      	ldr	r3, [r7, #4]
 8005802:	655a      	str	r2, [r3, #84]	; 0x54

            /* Set ADC error code to ADC peripheral internal error */
            SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8005804:	687b      	ldr	r3, [r7, #4]
 8005806:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005808:	f043 0201 	orr.w	r2, r3, #1
 800580c:	687b      	ldr	r3, [r7, #4]
 800580e:	659a      	str	r2, [r3, #88]	; 0x58

            return HAL_ERROR;
 8005810:	2301      	movs	r3, #1
 8005812:	e007      	b.n	8005824 <ADC_Enable+0xf8>
      while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8005814:	687b      	ldr	r3, [r7, #4]
 8005816:	681b      	ldr	r3, [r3, #0]
 8005818:	681b      	ldr	r3, [r3, #0]
 800581a:	f003 0301 	and.w	r3, r3, #1
 800581e:	2b01      	cmp	r3, #1
 8005820:	d1cf      	bne.n	80057c2 <ADC_Enable+0x96>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 8005822:	2300      	movs	r3, #0
}
 8005824:	4618      	mov	r0, r3
 8005826:	3710      	adds	r7, #16
 8005828:	46bd      	mov	sp, r7
 800582a:	bd80      	pop	{r7, pc}
 800582c:	8000003f 	.word	0x8000003f
 8005830:	40022000 	.word	0x40022000
 8005834:	40022100 	.word	0x40022100
 8005838:	40022300 	.word	0x40022300
 800583c:	58026300 	.word	0x58026300

08005840 <ADC_Disable>:
  *         stopped.
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Disable(ADC_HandleTypeDef *hadc)
{
 8005840:	b580      	push	{r7, lr}
 8005842:	b084      	sub	sp, #16
 8005844:	af00      	add	r7, sp, #0
 8005846:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  const uint32_t tmp_adc_is_disable_on_going = LL_ADC_IsDisableOngoing(hadc->Instance);
 8005848:	687b      	ldr	r3, [r7, #4]
 800584a:	681b      	ldr	r3, [r3, #0]
 800584c:	4618      	mov	r0, r3
 800584e:	f7fe fe94 	bl	800457a <LL_ADC_IsDisableOngoing>
 8005852:	60f8      	str	r0, [r7, #12]

  /* Verification if ADC is not already disabled:                             */
  /* Note: forbidden to disable ADC (set bit ADC_CR_ADDIS) if ADC is already  */
  /*       disabled.                                                          */
  if ((LL_ADC_IsEnabled(hadc->Instance) != 0UL)
 8005854:	687b      	ldr	r3, [r7, #4]
 8005856:	681b      	ldr	r3, [r3, #0]
 8005858:	4618      	mov	r0, r3
 800585a:	f7fe fe7b 	bl	8004554 <LL_ADC_IsEnabled>
 800585e:	4603      	mov	r3, r0
 8005860:	2b00      	cmp	r3, #0
 8005862:	d047      	beq.n	80058f4 <ADC_Disable+0xb4>
      && (tmp_adc_is_disable_on_going == 0UL)
 8005864:	68fb      	ldr	r3, [r7, #12]
 8005866:	2b00      	cmp	r3, #0
 8005868:	d144      	bne.n	80058f4 <ADC_Disable+0xb4>
     )
  {
    /* Check if conditions to disable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_JADSTART | ADC_CR_ADSTART | ADC_CR_ADEN)) == ADC_CR_ADEN)
 800586a:	687b      	ldr	r3, [r7, #4]
 800586c:	681b      	ldr	r3, [r3, #0]
 800586e:	689b      	ldr	r3, [r3, #8]
 8005870:	f003 030d 	and.w	r3, r3, #13
 8005874:	2b01      	cmp	r3, #1
 8005876:	d10c      	bne.n	8005892 <ADC_Disable+0x52>
    {
      /* Disable the ADC peripheral */
      LL_ADC_Disable(hadc->Instance);
 8005878:	687b      	ldr	r3, [r7, #4]
 800587a:	681b      	ldr	r3, [r3, #0]
 800587c:	4618      	mov	r0, r3
 800587e:	f7fe fe55 	bl	800452c <LL_ADC_Disable>
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOSMP | ADC_FLAG_RDY));
 8005882:	687b      	ldr	r3, [r7, #4]
 8005884:	681b      	ldr	r3, [r3, #0]
 8005886:	2203      	movs	r2, #3
 8005888:	601a      	str	r2, [r3, #0]
      return HAL_ERROR;
    }

    /* Wait for ADC effectively disabled */
    /* Get tick count */
    tickstart = HAL_GetTick();
 800588a:	f7fe fc41 	bl	8004110 <HAL_GetTick>
 800588e:	60b8      	str	r0, [r7, #8]

    while ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 8005890:	e029      	b.n	80058e6 <ADC_Disable+0xa6>
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8005892:	687b      	ldr	r3, [r7, #4]
 8005894:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005896:	f043 0210 	orr.w	r2, r3, #16
 800589a:	687b      	ldr	r3, [r7, #4]
 800589c:	655a      	str	r2, [r3, #84]	; 0x54
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800589e:	687b      	ldr	r3, [r7, #4]
 80058a0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80058a2:	f043 0201 	orr.w	r2, r3, #1
 80058a6:	687b      	ldr	r3, [r7, #4]
 80058a8:	659a      	str	r2, [r3, #88]	; 0x58
      return HAL_ERROR;
 80058aa:	2301      	movs	r3, #1
 80058ac:	e023      	b.n	80058f6 <ADC_Disable+0xb6>
    {
      if ((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 80058ae:	f7fe fc2f 	bl	8004110 <HAL_GetTick>
 80058b2:	4602      	mov	r2, r0
 80058b4:	68bb      	ldr	r3, [r7, #8]
 80058b6:	1ad3      	subs	r3, r2, r3
 80058b8:	2b02      	cmp	r3, #2
 80058ba:	d914      	bls.n	80058e6 <ADC_Disable+0xa6>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 80058bc:	687b      	ldr	r3, [r7, #4]
 80058be:	681b      	ldr	r3, [r3, #0]
 80058c0:	689b      	ldr	r3, [r3, #8]
 80058c2:	f003 0301 	and.w	r3, r3, #1
 80058c6:	2b00      	cmp	r3, #0
 80058c8:	d00d      	beq.n	80058e6 <ADC_Disable+0xa6>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80058ca:	687b      	ldr	r3, [r7, #4]
 80058cc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80058ce:	f043 0210 	orr.w	r2, r3, #16
 80058d2:	687b      	ldr	r3, [r7, #4]
 80058d4:	655a      	str	r2, [r3, #84]	; 0x54

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80058d6:	687b      	ldr	r3, [r7, #4]
 80058d8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80058da:	f043 0201 	orr.w	r2, r3, #1
 80058de:	687b      	ldr	r3, [r7, #4]
 80058e0:	659a      	str	r2, [r3, #88]	; 0x58

          return HAL_ERROR;
 80058e2:	2301      	movs	r3, #1
 80058e4:	e007      	b.n	80058f6 <ADC_Disable+0xb6>
    while ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 80058e6:	687b      	ldr	r3, [r7, #4]
 80058e8:	681b      	ldr	r3, [r3, #0]
 80058ea:	689b      	ldr	r3, [r3, #8]
 80058ec:	f003 0301 	and.w	r3, r3, #1
 80058f0:	2b00      	cmp	r3, #0
 80058f2:	d1dc      	bne.n	80058ae <ADC_Disable+0x6e>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 80058f4:	2300      	movs	r3, #0
}
 80058f6:	4618      	mov	r0, r3
 80058f8:	3710      	adds	r7, #16
 80058fa:	46bd      	mov	sp, r7
 80058fc:	bd80      	pop	{r7, pc}
	...

08005900 <ADC_ConfigureBoostMode>:
  *         stopped.
  * @param  hadc ADC handle
  * @retval None.
  */
void ADC_ConfigureBoostMode(ADC_HandleTypeDef *hadc)
{
 8005900:	b580      	push	{r7, lr}
 8005902:	b084      	sub	sp, #16
 8005904:	af00      	add	r7, sp, #0
 8005906:	6078      	str	r0, [r7, #4]
  uint32_t freq;
  if (ADC_IS_SYNCHRONOUS_CLOCK_MODE(hadc))
 8005908:	687b      	ldr	r3, [r7, #4]
 800590a:	681b      	ldr	r3, [r3, #0]
 800590c:	4a7a      	ldr	r2, [pc, #488]	; (8005af8 <ADC_ConfigureBoostMode+0x1f8>)
 800590e:	4293      	cmp	r3, r2
 8005910:	d004      	beq.n	800591c <ADC_ConfigureBoostMode+0x1c>
 8005912:	687b      	ldr	r3, [r7, #4]
 8005914:	681b      	ldr	r3, [r3, #0]
 8005916:	4a79      	ldr	r2, [pc, #484]	; (8005afc <ADC_ConfigureBoostMode+0x1fc>)
 8005918:	4293      	cmp	r3, r2
 800591a:	d109      	bne.n	8005930 <ADC_ConfigureBoostMode+0x30>
 800591c:	4b78      	ldr	r3, [pc, #480]	; (8005b00 <ADC_ConfigureBoostMode+0x200>)
 800591e:	689b      	ldr	r3, [r3, #8]
 8005920:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8005924:	2b00      	cmp	r3, #0
 8005926:	bf14      	ite	ne
 8005928:	2301      	movne	r3, #1
 800592a:	2300      	moveq	r3, #0
 800592c:	b2db      	uxtb	r3, r3
 800592e:	e008      	b.n	8005942 <ADC_ConfigureBoostMode+0x42>
 8005930:	4b74      	ldr	r3, [pc, #464]	; (8005b04 <ADC_ConfigureBoostMode+0x204>)
 8005932:	689b      	ldr	r3, [r3, #8]
 8005934:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8005938:	2b00      	cmp	r3, #0
 800593a:	bf14      	ite	ne
 800593c:	2301      	movne	r3, #1
 800593e:	2300      	moveq	r3, #0
 8005940:	b2db      	uxtb	r3, r3
 8005942:	2b00      	cmp	r3, #0
 8005944:	d01c      	beq.n	8005980 <ADC_ConfigureBoostMode+0x80>
  {
    freq = HAL_RCC_GetHCLKFreq();
 8005946:	f005 f919 	bl	800ab7c <HAL_RCC_GetHCLKFreq>
 800594a:	60f8      	str	r0, [r7, #12]
    switch (hadc->Init.ClockPrescaler)
 800594c:	687b      	ldr	r3, [r7, #4]
 800594e:	685b      	ldr	r3, [r3, #4]
 8005950:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8005954:	d010      	beq.n	8005978 <ADC_ConfigureBoostMode+0x78>
 8005956:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 800595a:	d873      	bhi.n	8005a44 <ADC_ConfigureBoostMode+0x144>
 800595c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005960:	d002      	beq.n	8005968 <ADC_ConfigureBoostMode+0x68>
 8005962:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8005966:	d16d      	bne.n	8005a44 <ADC_ConfigureBoostMode+0x144>
    {
      case ADC_CLOCK_SYNC_PCLK_DIV1:
      case ADC_CLOCK_SYNC_PCLK_DIV2:
        freq /= (hadc->Init.ClockPrescaler >> ADC_CCR_CKMODE_Pos);
 8005968:	687b      	ldr	r3, [r7, #4]
 800596a:	685b      	ldr	r3, [r3, #4]
 800596c:	0c1b      	lsrs	r3, r3, #16
 800596e:	68fa      	ldr	r2, [r7, #12]
 8005970:	fbb2 f3f3 	udiv	r3, r2, r3
 8005974:	60fb      	str	r3, [r7, #12]
        break;
 8005976:	e068      	b.n	8005a4a <ADC_ConfigureBoostMode+0x14a>
      case ADC_CLOCK_SYNC_PCLK_DIV4:
        freq /= 4UL;
 8005978:	68fb      	ldr	r3, [r7, #12]
 800597a:	089b      	lsrs	r3, r3, #2
 800597c:	60fb      	str	r3, [r7, #12]
        break;
 800597e:	e064      	b.n	8005a4a <ADC_ConfigureBoostMode+0x14a>
        break;
    }
  }
  else
  {
    freq = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_ADC);
 8005980:	f44f 2000 	mov.w	r0, #524288	; 0x80000
 8005984:	f04f 0100 	mov.w	r1, #0
 8005988:	f006 fb7a 	bl	800c080 <HAL_RCCEx_GetPeriphCLKFreq>
 800598c:	60f8      	str	r0, [r7, #12]
    switch (hadc->Init.ClockPrescaler)
 800598e:	687b      	ldr	r3, [r7, #4]
 8005990:	685b      	ldr	r3, [r3, #4]
 8005992:	f5b3 1f30 	cmp.w	r3, #2883584	; 0x2c0000
 8005996:	d051      	beq.n	8005a3c <ADC_ConfigureBoostMode+0x13c>
 8005998:	f5b3 1f30 	cmp.w	r3, #2883584	; 0x2c0000
 800599c:	d854      	bhi.n	8005a48 <ADC_ConfigureBoostMode+0x148>
 800599e:	f5b3 1f20 	cmp.w	r3, #2621440	; 0x280000
 80059a2:	d047      	beq.n	8005a34 <ADC_ConfigureBoostMode+0x134>
 80059a4:	f5b3 1f20 	cmp.w	r3, #2621440	; 0x280000
 80059a8:	d84e      	bhi.n	8005a48 <ADC_ConfigureBoostMode+0x148>
 80059aa:	f5b3 1f10 	cmp.w	r3, #2359296	; 0x240000
 80059ae:	d03d      	beq.n	8005a2c <ADC_ConfigureBoostMode+0x12c>
 80059b0:	f5b3 1f10 	cmp.w	r3, #2359296	; 0x240000
 80059b4:	d848      	bhi.n	8005a48 <ADC_ConfigureBoostMode+0x148>
 80059b6:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80059ba:	d033      	beq.n	8005a24 <ADC_ConfigureBoostMode+0x124>
 80059bc:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80059c0:	d842      	bhi.n	8005a48 <ADC_ConfigureBoostMode+0x148>
 80059c2:	f5b3 1fe0 	cmp.w	r3, #1835008	; 0x1c0000
 80059c6:	d029      	beq.n	8005a1c <ADC_ConfigureBoostMode+0x11c>
 80059c8:	f5b3 1fe0 	cmp.w	r3, #1835008	; 0x1c0000
 80059cc:	d83c      	bhi.n	8005a48 <ADC_ConfigureBoostMode+0x148>
 80059ce:	f5b3 1fc0 	cmp.w	r3, #1572864	; 0x180000
 80059d2:	d01a      	beq.n	8005a0a <ADC_ConfigureBoostMode+0x10a>
 80059d4:	f5b3 1fc0 	cmp.w	r3, #1572864	; 0x180000
 80059d8:	d836      	bhi.n	8005a48 <ADC_ConfigureBoostMode+0x148>
 80059da:	f5b3 1fa0 	cmp.w	r3, #1310720	; 0x140000
 80059de:	d014      	beq.n	8005a0a <ADC_ConfigureBoostMode+0x10a>
 80059e0:	f5b3 1fa0 	cmp.w	r3, #1310720	; 0x140000
 80059e4:	d830      	bhi.n	8005a48 <ADC_ConfigureBoostMode+0x148>
 80059e6:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80059ea:	d00e      	beq.n	8005a0a <ADC_ConfigureBoostMode+0x10a>
 80059ec:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80059f0:	d82a      	bhi.n	8005a48 <ADC_ConfigureBoostMode+0x148>
 80059f2:	f5b3 2f40 	cmp.w	r3, #786432	; 0xc0000
 80059f6:	d008      	beq.n	8005a0a <ADC_ConfigureBoostMode+0x10a>
 80059f8:	f5b3 2f40 	cmp.w	r3, #786432	; 0xc0000
 80059fc:	d824      	bhi.n	8005a48 <ADC_ConfigureBoostMode+0x148>
 80059fe:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8005a02:	d002      	beq.n	8005a0a <ADC_ConfigureBoostMode+0x10a>
 8005a04:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8005a08:	d11e      	bne.n	8005a48 <ADC_ConfigureBoostMode+0x148>
      case ADC_CLOCK_ASYNC_DIV4:
      case ADC_CLOCK_ASYNC_DIV6:
      case ADC_CLOCK_ASYNC_DIV8:
      case ADC_CLOCK_ASYNC_DIV10:
      case ADC_CLOCK_ASYNC_DIV12:
        freq /= ((hadc->Init.ClockPrescaler >> ADC_CCR_PRESC_Pos) << 1UL);
 8005a0a:	687b      	ldr	r3, [r7, #4]
 8005a0c:	685b      	ldr	r3, [r3, #4]
 8005a0e:	0c9b      	lsrs	r3, r3, #18
 8005a10:	005b      	lsls	r3, r3, #1
 8005a12:	68fa      	ldr	r2, [r7, #12]
 8005a14:	fbb2 f3f3 	udiv	r3, r2, r3
 8005a18:	60fb      	str	r3, [r7, #12]
        break;
 8005a1a:	e016      	b.n	8005a4a <ADC_ConfigureBoostMode+0x14a>
      case ADC_CLOCK_ASYNC_DIV16:
        freq /= 16UL;
 8005a1c:	68fb      	ldr	r3, [r7, #12]
 8005a1e:	091b      	lsrs	r3, r3, #4
 8005a20:	60fb      	str	r3, [r7, #12]
        break;
 8005a22:	e012      	b.n	8005a4a <ADC_ConfigureBoostMode+0x14a>
      case ADC_CLOCK_ASYNC_DIV32:
        freq /= 32UL;
 8005a24:	68fb      	ldr	r3, [r7, #12]
 8005a26:	095b      	lsrs	r3, r3, #5
 8005a28:	60fb      	str	r3, [r7, #12]
        break;
 8005a2a:	e00e      	b.n	8005a4a <ADC_ConfigureBoostMode+0x14a>
      case ADC_CLOCK_ASYNC_DIV64:
        freq /= 64UL;
 8005a2c:	68fb      	ldr	r3, [r7, #12]
 8005a2e:	099b      	lsrs	r3, r3, #6
 8005a30:	60fb      	str	r3, [r7, #12]
        break;
 8005a32:	e00a      	b.n	8005a4a <ADC_ConfigureBoostMode+0x14a>
      case ADC_CLOCK_ASYNC_DIV128:
        freq /= 128UL;
 8005a34:	68fb      	ldr	r3, [r7, #12]
 8005a36:	09db      	lsrs	r3, r3, #7
 8005a38:	60fb      	str	r3, [r7, #12]
        break;
 8005a3a:	e006      	b.n	8005a4a <ADC_ConfigureBoostMode+0x14a>
      case ADC_CLOCK_ASYNC_DIV256:
        freq /= 256UL;
 8005a3c:	68fb      	ldr	r3, [r7, #12]
 8005a3e:	0a1b      	lsrs	r3, r3, #8
 8005a40:	60fb      	str	r3, [r7, #12]
        break;
 8005a42:	e002      	b.n	8005a4a <ADC_ConfigureBoostMode+0x14a>
        break;
 8005a44:	bf00      	nop
 8005a46:	e000      	b.n	8005a4a <ADC_ConfigureBoostMode+0x14a>
      default:
        break;
 8005a48:	bf00      	nop
  else /* if(freq > 25000000UL) */
  {
    MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1 | ADC_CR_BOOST_0);
  }
#else
  if (HAL_GetREVID() <= REV_ID_Y) /* STM32H7 silicon Rev.Y */
 8005a4a:	f7fe fb91 	bl	8004170 <HAL_GetREVID>
 8005a4e:	4603      	mov	r3, r0
 8005a50:	f241 0203 	movw	r2, #4099	; 0x1003
 8005a54:	4293      	cmp	r3, r2
 8005a56:	d815      	bhi.n	8005a84 <ADC_ConfigureBoostMode+0x184>
  {
    if (freq > 20000000UL)
 8005a58:	68fb      	ldr	r3, [r7, #12]
 8005a5a:	4a2b      	ldr	r2, [pc, #172]	; (8005b08 <ADC_ConfigureBoostMode+0x208>)
 8005a5c:	4293      	cmp	r3, r2
 8005a5e:	d908      	bls.n	8005a72 <ADC_ConfigureBoostMode+0x172>
    {
      SET_BIT(hadc->Instance->CR, ADC_CR_BOOST_0);
 8005a60:	687b      	ldr	r3, [r7, #4]
 8005a62:	681b      	ldr	r3, [r3, #0]
 8005a64:	689a      	ldr	r2, [r3, #8]
 8005a66:	687b      	ldr	r3, [r7, #4]
 8005a68:	681b      	ldr	r3, [r3, #0]
 8005a6a:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8005a6e:	609a      	str	r2, [r3, #8]
    {
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1 | ADC_CR_BOOST_0);
    }
  }
#endif /* ADC_VER_V5_3 */
}
 8005a70:	e03e      	b.n	8005af0 <ADC_ConfigureBoostMode+0x1f0>
      CLEAR_BIT(hadc->Instance->CR, ADC_CR_BOOST_0);
 8005a72:	687b      	ldr	r3, [r7, #4]
 8005a74:	681b      	ldr	r3, [r3, #0]
 8005a76:	689a      	ldr	r2, [r3, #8]
 8005a78:	687b      	ldr	r3, [r7, #4]
 8005a7a:	681b      	ldr	r3, [r3, #0]
 8005a7c:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8005a80:	609a      	str	r2, [r3, #8]
}
 8005a82:	e035      	b.n	8005af0 <ADC_ConfigureBoostMode+0x1f0>
    freq /= 2U; /* divider by 2 for Rev.V */
 8005a84:	68fb      	ldr	r3, [r7, #12]
 8005a86:	085b      	lsrs	r3, r3, #1
 8005a88:	60fb      	str	r3, [r7, #12]
    if (freq <= 6250000UL)
 8005a8a:	68fb      	ldr	r3, [r7, #12]
 8005a8c:	4a1f      	ldr	r2, [pc, #124]	; (8005b0c <ADC_ConfigureBoostMode+0x20c>)
 8005a8e:	4293      	cmp	r3, r2
 8005a90:	d808      	bhi.n	8005aa4 <ADC_ConfigureBoostMode+0x1a4>
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, 0UL);
 8005a92:	687b      	ldr	r3, [r7, #4]
 8005a94:	681b      	ldr	r3, [r3, #0]
 8005a96:	689a      	ldr	r2, [r3, #8]
 8005a98:	687b      	ldr	r3, [r7, #4]
 8005a9a:	681b      	ldr	r3, [r3, #0]
 8005a9c:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 8005aa0:	609a      	str	r2, [r3, #8]
}
 8005aa2:	e025      	b.n	8005af0 <ADC_ConfigureBoostMode+0x1f0>
    else if (freq <= 12500000UL)
 8005aa4:	68fb      	ldr	r3, [r7, #12]
 8005aa6:	4a1a      	ldr	r2, [pc, #104]	; (8005b10 <ADC_ConfigureBoostMode+0x210>)
 8005aa8:	4293      	cmp	r3, r2
 8005aaa:	d80a      	bhi.n	8005ac2 <ADC_ConfigureBoostMode+0x1c2>
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_0);
 8005aac:	687b      	ldr	r3, [r7, #4]
 8005aae:	681b      	ldr	r3, [r3, #0]
 8005ab0:	689b      	ldr	r3, [r3, #8]
 8005ab2:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8005ab6:	687b      	ldr	r3, [r7, #4]
 8005ab8:	681b      	ldr	r3, [r3, #0]
 8005aba:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8005abe:	609a      	str	r2, [r3, #8]
}
 8005ac0:	e016      	b.n	8005af0 <ADC_ConfigureBoostMode+0x1f0>
    else if (freq <= 25000000UL)
 8005ac2:	68fb      	ldr	r3, [r7, #12]
 8005ac4:	4a13      	ldr	r2, [pc, #76]	; (8005b14 <ADC_ConfigureBoostMode+0x214>)
 8005ac6:	4293      	cmp	r3, r2
 8005ac8:	d80a      	bhi.n	8005ae0 <ADC_ConfigureBoostMode+0x1e0>
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1);
 8005aca:	687b      	ldr	r3, [r7, #4]
 8005acc:	681b      	ldr	r3, [r3, #0]
 8005ace:	689b      	ldr	r3, [r3, #8]
 8005ad0:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8005ad4:	687b      	ldr	r3, [r7, #4]
 8005ad6:	681b      	ldr	r3, [r3, #0]
 8005ad8:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005adc:	609a      	str	r2, [r3, #8]
}
 8005ade:	e007      	b.n	8005af0 <ADC_ConfigureBoostMode+0x1f0>
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1 | ADC_CR_BOOST_0);
 8005ae0:	687b      	ldr	r3, [r7, #4]
 8005ae2:	681b      	ldr	r3, [r3, #0]
 8005ae4:	689a      	ldr	r2, [r3, #8]
 8005ae6:	687b      	ldr	r3, [r7, #4]
 8005ae8:	681b      	ldr	r3, [r3, #0]
 8005aea:	f442 7240 	orr.w	r2, r2, #768	; 0x300
 8005aee:	609a      	str	r2, [r3, #8]
}
 8005af0:	bf00      	nop
 8005af2:	3710      	adds	r7, #16
 8005af4:	46bd      	mov	sp, r7
 8005af6:	bd80      	pop	{r7, pc}
 8005af8:	40022000 	.word	0x40022000
 8005afc:	40022100 	.word	0x40022100
 8005b00:	40022300 	.word	0x40022300
 8005b04:	58026300 	.word	0x58026300
 8005b08:	01312d00 	.word	0x01312d00
 8005b0c:	005f5e10 	.word	0x005f5e10
 8005b10:	00bebc20 	.word	0x00bebc20
 8005b14:	017d7840 	.word	0x017d7840

08005b18 <LL_ADC_StartCalibration>:
{
 8005b18:	b480      	push	{r7}
 8005b1a:	b085      	sub	sp, #20
 8005b1c:	af00      	add	r7, sp, #0
 8005b1e:	60f8      	str	r0, [r7, #12]
 8005b20:	60b9      	str	r1, [r7, #8]
 8005b22:	607a      	str	r2, [r7, #4]
  MODIFY_REG(ADCx->CR,
 8005b24:	68fb      	ldr	r3, [r7, #12]
 8005b26:	689a      	ldr	r2, [r3, #8]
 8005b28:	4b09      	ldr	r3, [pc, #36]	; (8005b50 <LL_ADC_StartCalibration+0x38>)
 8005b2a:	4013      	ands	r3, r2
 8005b2c:	68ba      	ldr	r2, [r7, #8]
 8005b2e:	f402 3180 	and.w	r1, r2, #65536	; 0x10000
 8005b32:	687a      	ldr	r2, [r7, #4]
 8005b34:	f002 4280 	and.w	r2, r2, #1073741824	; 0x40000000
 8005b38:	430a      	orrs	r2, r1
 8005b3a:	4313      	orrs	r3, r2
 8005b3c:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 8005b40:	68fb      	ldr	r3, [r7, #12]
 8005b42:	609a      	str	r2, [r3, #8]
}
 8005b44:	bf00      	nop
 8005b46:	3714      	adds	r7, #20
 8005b48:	46bd      	mov	sp, r7
 8005b4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b4e:	4770      	bx	lr
 8005b50:	3ffeffc0 	.word	0x3ffeffc0

08005b54 <LL_ADC_IsCalibrationOnGoing>:
{
 8005b54:	b480      	push	{r7}
 8005b56:	b083      	sub	sp, #12
 8005b58:	af00      	add	r7, sp, #0
 8005b5a:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADCAL) == (ADC_CR_ADCAL)) ? 1UL : 0UL);
 8005b5c:	687b      	ldr	r3, [r7, #4]
 8005b5e:	689b      	ldr	r3, [r3, #8]
 8005b60:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8005b64:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8005b68:	d101      	bne.n	8005b6e <LL_ADC_IsCalibrationOnGoing+0x1a>
 8005b6a:	2301      	movs	r3, #1
 8005b6c:	e000      	b.n	8005b70 <LL_ADC_IsCalibrationOnGoing+0x1c>
 8005b6e:	2300      	movs	r3, #0
}
 8005b70:	4618      	mov	r0, r3
 8005b72:	370c      	adds	r7, #12
 8005b74:	46bd      	mov	sp, r7
 8005b76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b7a:	4770      	bx	lr

08005b7c <HAL_ADCEx_Calibration_Start>:
  *           @arg @ref ADC_SINGLE_ENDED       Channel in mode input single ended
  *           @arg @ref ADC_DIFFERENTIAL_ENDED Channel in mode input differential ended
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_Calibration_Start(ADC_HandleTypeDef *hadc, uint32_t CalibrationMode, uint32_t SingleDiff)
{
 8005b7c:	b580      	push	{r7, lr}
 8005b7e:	b086      	sub	sp, #24
 8005b80:	af00      	add	r7, sp, #0
 8005b82:	60f8      	str	r0, [r7, #12]
 8005b84:	60b9      	str	r1, [r7, #8]
 8005b86:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status;
  __IO uint32_t wait_loop_index = 0UL;
 8005b88:	2300      	movs	r3, #0
 8005b8a:	613b      	str	r3, [r7, #16]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_SINGLE_DIFFERENTIAL(SingleDiff));

  /* Process locked */
  __HAL_LOCK(hadc);
 8005b8c:	68fb      	ldr	r3, [r7, #12]
 8005b8e:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8005b92:	2b01      	cmp	r3, #1
 8005b94:	d101      	bne.n	8005b9a <HAL_ADCEx_Calibration_Start+0x1e>
 8005b96:	2302      	movs	r3, #2
 8005b98:	e04c      	b.n	8005c34 <HAL_ADCEx_Calibration_Start+0xb8>
 8005b9a:	68fb      	ldr	r3, [r7, #12]
 8005b9c:	2201      	movs	r2, #1
 8005b9e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Calibration prerequisite: ADC must be disabled. */

  /* Disable the ADC (if not already disabled) */
  tmp_hal_status = ADC_Disable(hadc);
 8005ba2:	68f8      	ldr	r0, [r7, #12]
 8005ba4:	f7ff fe4c 	bl	8005840 <ADC_Disable>
 8005ba8:	4603      	mov	r3, r0
 8005baa:	75fb      	strb	r3, [r7, #23]

  /* Check if ADC is effectively disabled */
  if (tmp_hal_status == HAL_OK)
 8005bac:	7dfb      	ldrb	r3, [r7, #23]
 8005bae:	2b00      	cmp	r3, #0
 8005bb0:	d135      	bne.n	8005c1e <HAL_ADCEx_Calibration_Start+0xa2>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8005bb2:	68fb      	ldr	r3, [r7, #12]
 8005bb4:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8005bb6:	4b21      	ldr	r3, [pc, #132]	; (8005c3c <HAL_ADCEx_Calibration_Start+0xc0>)
 8005bb8:	4013      	ands	r3, r2
 8005bba:	f043 0202 	orr.w	r2, r3, #2
 8005bbe:	68fb      	ldr	r3, [r7, #12]
 8005bc0:	655a      	str	r2, [r3, #84]	; 0x54
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);

    /* Start ADC calibration in mode single-ended or differential */
    LL_ADC_StartCalibration(hadc->Instance, CalibrationMode, SingleDiff);
 8005bc2:	68fb      	ldr	r3, [r7, #12]
 8005bc4:	681b      	ldr	r3, [r3, #0]
 8005bc6:	687a      	ldr	r2, [r7, #4]
 8005bc8:	68b9      	ldr	r1, [r7, #8]
 8005bca:	4618      	mov	r0, r3
 8005bcc:	f7ff ffa4 	bl	8005b18 <LL_ADC_StartCalibration>

    /* Wait for calibration completion */
    while (LL_ADC_IsCalibrationOnGoing(hadc->Instance) != 0UL)
 8005bd0:	e014      	b.n	8005bfc <HAL_ADCEx_Calibration_Start+0x80>
    {
      wait_loop_index++;
 8005bd2:	693b      	ldr	r3, [r7, #16]
 8005bd4:	3301      	adds	r3, #1
 8005bd6:	613b      	str	r3, [r7, #16]
      if (wait_loop_index >= ADC_CALIBRATION_TIMEOUT)
 8005bd8:	693b      	ldr	r3, [r7, #16]
 8005bda:	4a19      	ldr	r2, [pc, #100]	; (8005c40 <HAL_ADCEx_Calibration_Start+0xc4>)
 8005bdc:	4293      	cmp	r3, r2
 8005bde:	d30d      	bcc.n	8005bfc <HAL_ADCEx_Calibration_Start+0x80>
      {
        /* Update ADC state machine to error */
        ADC_STATE_CLR_SET(hadc->State,
 8005be0:	68fb      	ldr	r3, [r7, #12]
 8005be2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005be4:	f023 0312 	bic.w	r3, r3, #18
 8005be8:	f043 0210 	orr.w	r2, r3, #16
 8005bec:	68fb      	ldr	r3, [r7, #12]
 8005bee:	655a      	str	r2, [r3, #84]	; 0x54
                          HAL_ADC_STATE_BUSY_INTERNAL,
                          HAL_ADC_STATE_ERROR_INTERNAL);

        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 8005bf0:	68fb      	ldr	r3, [r7, #12]
 8005bf2:	2200      	movs	r2, #0
 8005bf4:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_ERROR;
 8005bf8:	2301      	movs	r3, #1
 8005bfa:	e01b      	b.n	8005c34 <HAL_ADCEx_Calibration_Start+0xb8>
    while (LL_ADC_IsCalibrationOnGoing(hadc->Instance) != 0UL)
 8005bfc:	68fb      	ldr	r3, [r7, #12]
 8005bfe:	681b      	ldr	r3, [r3, #0]
 8005c00:	4618      	mov	r0, r3
 8005c02:	f7ff ffa7 	bl	8005b54 <LL_ADC_IsCalibrationOnGoing>
 8005c06:	4603      	mov	r3, r0
 8005c08:	2b00      	cmp	r3, #0
 8005c0a:	d1e2      	bne.n	8005bd2 <HAL_ADCEx_Calibration_Start+0x56>
      }
    }

    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8005c0c:	68fb      	ldr	r3, [r7, #12]
 8005c0e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005c10:	f023 0303 	bic.w	r3, r3, #3
 8005c14:	f043 0201 	orr.w	r2, r3, #1
 8005c18:	68fb      	ldr	r3, [r7, #12]
 8005c1a:	655a      	str	r2, [r3, #84]	; 0x54
 8005c1c:	e005      	b.n	8005c2a <HAL_ADCEx_Calibration_Start+0xae>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8005c1e:	68fb      	ldr	r3, [r7, #12]
 8005c20:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005c22:	f043 0210 	orr.w	r2, r3, #16
 8005c26:	68fb      	ldr	r3, [r7, #12]
 8005c28:	655a      	str	r2, [r3, #84]	; 0x54
    /* Note: No need to update variable "tmp_hal_status" here: already set    */
    /*       to state "HAL_ERROR" by function disabling the ADC.              */
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8005c2a:	68fb      	ldr	r3, [r7, #12]
 8005c2c:	2200      	movs	r2, #0
 8005c2e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Return function status */
  return tmp_hal_status;
 8005c32:	7dfb      	ldrb	r3, [r7, #23]
}
 8005c34:	4618      	mov	r0, r3
 8005c36:	3718      	adds	r7, #24
 8005c38:	46bd      	mov	sp, r7
 8005c3a:	bd80      	pop	{r7, pc}
 8005c3c:	ffffeefd 	.word	0xffffeefd
 8005c40:	25c3f800 	.word	0x25c3f800

08005c44 <HAL_ADCEx_InjectedConvCpltCallback>:
  * @brief  Injected conversion complete callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_InjectedConvCpltCallback(ADC_HandleTypeDef *hadc)
{
 8005c44:	b480      	push	{r7}
 8005c46:	b083      	sub	sp, #12
 8005c48:	af00      	add	r7, sp, #0
 8005c4a:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_InjectedConvCpltCallback must be implemented in the user file.
  */
}
 8005c4c:	bf00      	nop
 8005c4e:	370c      	adds	r7, #12
 8005c50:	46bd      	mov	sp, r7
 8005c52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c56:	4770      	bx	lr

08005c58 <HAL_ADCEx_InjectedQueueOverflowCallback>:
            contexts).
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_InjectedQueueOverflowCallback(ADC_HandleTypeDef *hadc)
{
 8005c58:	b480      	push	{r7}
 8005c5a:	b083      	sub	sp, #12
 8005c5c:	af00      	add	r7, sp, #0
 8005c5e:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_InjectedQueueOverflowCallback must be implemented in the user file.
  */
}
 8005c60:	bf00      	nop
 8005c62:	370c      	adds	r7, #12
 8005c64:	46bd      	mov	sp, r7
 8005c66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c6a:	4770      	bx	lr

08005c6c <HAL_ADCEx_LevelOutOfWindow2Callback>:
  * @brief  Analog watchdog 2 callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_LevelOutOfWindow2Callback(ADC_HandleTypeDef *hadc)
{
 8005c6c:	b480      	push	{r7}
 8005c6e:	b083      	sub	sp, #12
 8005c70:	af00      	add	r7, sp, #0
 8005c72:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_LevelOutOfWindow2Callback must be implemented in the user file.
  */
}
 8005c74:	bf00      	nop
 8005c76:	370c      	adds	r7, #12
 8005c78:	46bd      	mov	sp, r7
 8005c7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c7e:	4770      	bx	lr

08005c80 <HAL_ADCEx_LevelOutOfWindow3Callback>:
  * @brief  Analog watchdog 3 callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_LevelOutOfWindow3Callback(ADC_HandleTypeDef *hadc)
{
 8005c80:	b480      	push	{r7}
 8005c82:	b083      	sub	sp, #12
 8005c84:	af00      	add	r7, sp, #0
 8005c86:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_LevelOutOfWindow3Callback must be implemented in the user file.
  */
}
 8005c88:	bf00      	nop
 8005c8a:	370c      	adds	r7, #12
 8005c8c:	46bd      	mov	sp, r7
 8005c8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c92:	4770      	bx	lr

08005c94 <HAL_ADCEx_EndOfSamplingCallback>:
  * @brief  End Of Sampling callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_EndOfSamplingCallback(ADC_HandleTypeDef *hadc)
{
 8005c94:	b480      	push	{r7}
 8005c96:	b083      	sub	sp, #12
 8005c98:	af00      	add	r7, sp, #0
 8005c9a:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_EndOfSamplingCallback must be implemented in the user file.
  */
}
 8005c9c:	bf00      	nop
 8005c9e:	370c      	adds	r7, #12
 8005ca0:	46bd      	mov	sp, r7
 8005ca2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ca6:	4770      	bx	lr

08005ca8 <__NVIC_SetPriorityGrouping>:
{
 8005ca8:	b480      	push	{r7}
 8005caa:	b085      	sub	sp, #20
 8005cac:	af00      	add	r7, sp, #0
 8005cae:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8005cb0:	687b      	ldr	r3, [r7, #4]
 8005cb2:	f003 0307 	and.w	r3, r3, #7
 8005cb6:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8005cb8:	4b0b      	ldr	r3, [pc, #44]	; (8005ce8 <__NVIC_SetPriorityGrouping+0x40>)
 8005cba:	68db      	ldr	r3, [r3, #12]
 8005cbc:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8005cbe:	68ba      	ldr	r2, [r7, #8]
 8005cc0:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8005cc4:	4013      	ands	r3, r2
 8005cc6:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8005cc8:	68fb      	ldr	r3, [r7, #12]
 8005cca:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8005ccc:	68bb      	ldr	r3, [r7, #8]
 8005cce:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8005cd0:	4b06      	ldr	r3, [pc, #24]	; (8005cec <__NVIC_SetPriorityGrouping+0x44>)
 8005cd2:	4313      	orrs	r3, r2
 8005cd4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8005cd6:	4a04      	ldr	r2, [pc, #16]	; (8005ce8 <__NVIC_SetPriorityGrouping+0x40>)
 8005cd8:	68bb      	ldr	r3, [r7, #8]
 8005cda:	60d3      	str	r3, [r2, #12]
}
 8005cdc:	bf00      	nop
 8005cde:	3714      	adds	r7, #20
 8005ce0:	46bd      	mov	sp, r7
 8005ce2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ce6:	4770      	bx	lr
 8005ce8:	e000ed00 	.word	0xe000ed00
 8005cec:	05fa0000 	.word	0x05fa0000

08005cf0 <__NVIC_GetPriorityGrouping>:
{
 8005cf0:	b480      	push	{r7}
 8005cf2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8005cf4:	4b04      	ldr	r3, [pc, #16]	; (8005d08 <__NVIC_GetPriorityGrouping+0x18>)
 8005cf6:	68db      	ldr	r3, [r3, #12]
 8005cf8:	0a1b      	lsrs	r3, r3, #8
 8005cfa:	f003 0307 	and.w	r3, r3, #7
}
 8005cfe:	4618      	mov	r0, r3
 8005d00:	46bd      	mov	sp, r7
 8005d02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d06:	4770      	bx	lr
 8005d08:	e000ed00 	.word	0xe000ed00

08005d0c <__NVIC_EnableIRQ>:
{
 8005d0c:	b480      	push	{r7}
 8005d0e:	b083      	sub	sp, #12
 8005d10:	af00      	add	r7, sp, #0
 8005d12:	4603      	mov	r3, r0
 8005d14:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8005d16:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8005d1a:	2b00      	cmp	r3, #0
 8005d1c:	db0b      	blt.n	8005d36 <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8005d1e:	88fb      	ldrh	r3, [r7, #6]
 8005d20:	f003 021f 	and.w	r2, r3, #31
 8005d24:	4907      	ldr	r1, [pc, #28]	; (8005d44 <__NVIC_EnableIRQ+0x38>)
 8005d26:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8005d2a:	095b      	lsrs	r3, r3, #5
 8005d2c:	2001      	movs	r0, #1
 8005d2e:	fa00 f202 	lsl.w	r2, r0, r2
 8005d32:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 8005d36:	bf00      	nop
 8005d38:	370c      	adds	r7, #12
 8005d3a:	46bd      	mov	sp, r7
 8005d3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d40:	4770      	bx	lr
 8005d42:	bf00      	nop
 8005d44:	e000e100 	.word	0xe000e100

08005d48 <__NVIC_SetPriority>:
{
 8005d48:	b480      	push	{r7}
 8005d4a:	b083      	sub	sp, #12
 8005d4c:	af00      	add	r7, sp, #0
 8005d4e:	4603      	mov	r3, r0
 8005d50:	6039      	str	r1, [r7, #0]
 8005d52:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8005d54:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8005d58:	2b00      	cmp	r3, #0
 8005d5a:	db0a      	blt.n	8005d72 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8005d5c:	683b      	ldr	r3, [r7, #0]
 8005d5e:	b2da      	uxtb	r2, r3
 8005d60:	490c      	ldr	r1, [pc, #48]	; (8005d94 <__NVIC_SetPriority+0x4c>)
 8005d62:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8005d66:	0112      	lsls	r2, r2, #4
 8005d68:	b2d2      	uxtb	r2, r2
 8005d6a:	440b      	add	r3, r1
 8005d6c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 8005d70:	e00a      	b.n	8005d88 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8005d72:	683b      	ldr	r3, [r7, #0]
 8005d74:	b2da      	uxtb	r2, r3
 8005d76:	4908      	ldr	r1, [pc, #32]	; (8005d98 <__NVIC_SetPriority+0x50>)
 8005d78:	88fb      	ldrh	r3, [r7, #6]
 8005d7a:	f003 030f 	and.w	r3, r3, #15
 8005d7e:	3b04      	subs	r3, #4
 8005d80:	0112      	lsls	r2, r2, #4
 8005d82:	b2d2      	uxtb	r2, r2
 8005d84:	440b      	add	r3, r1
 8005d86:	761a      	strb	r2, [r3, #24]
}
 8005d88:	bf00      	nop
 8005d8a:	370c      	adds	r7, #12
 8005d8c:	46bd      	mov	sp, r7
 8005d8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d92:	4770      	bx	lr
 8005d94:	e000e100 	.word	0xe000e100
 8005d98:	e000ed00 	.word	0xe000ed00

08005d9c <NVIC_EncodePriority>:
{
 8005d9c:	b480      	push	{r7}
 8005d9e:	b089      	sub	sp, #36	; 0x24
 8005da0:	af00      	add	r7, sp, #0
 8005da2:	60f8      	str	r0, [r7, #12]
 8005da4:	60b9      	str	r1, [r7, #8]
 8005da6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8005da8:	68fb      	ldr	r3, [r7, #12]
 8005daa:	f003 0307 	and.w	r3, r3, #7
 8005dae:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8005db0:	69fb      	ldr	r3, [r7, #28]
 8005db2:	f1c3 0307 	rsb	r3, r3, #7
 8005db6:	2b04      	cmp	r3, #4
 8005db8:	bf28      	it	cs
 8005dba:	2304      	movcs	r3, #4
 8005dbc:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8005dbe:	69fb      	ldr	r3, [r7, #28]
 8005dc0:	3304      	adds	r3, #4
 8005dc2:	2b06      	cmp	r3, #6
 8005dc4:	d902      	bls.n	8005dcc <NVIC_EncodePriority+0x30>
 8005dc6:	69fb      	ldr	r3, [r7, #28]
 8005dc8:	3b03      	subs	r3, #3
 8005dca:	e000      	b.n	8005dce <NVIC_EncodePriority+0x32>
 8005dcc:	2300      	movs	r3, #0
 8005dce:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8005dd0:	f04f 32ff 	mov.w	r2, #4294967295
 8005dd4:	69bb      	ldr	r3, [r7, #24]
 8005dd6:	fa02 f303 	lsl.w	r3, r2, r3
 8005dda:	43da      	mvns	r2, r3
 8005ddc:	68bb      	ldr	r3, [r7, #8]
 8005dde:	401a      	ands	r2, r3
 8005de0:	697b      	ldr	r3, [r7, #20]
 8005de2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8005de4:	f04f 31ff 	mov.w	r1, #4294967295
 8005de8:	697b      	ldr	r3, [r7, #20]
 8005dea:	fa01 f303 	lsl.w	r3, r1, r3
 8005dee:	43d9      	mvns	r1, r3
 8005df0:	687b      	ldr	r3, [r7, #4]
 8005df2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8005df4:	4313      	orrs	r3, r2
}
 8005df6:	4618      	mov	r0, r3
 8005df8:	3724      	adds	r7, #36	; 0x24
 8005dfa:	46bd      	mov	sp, r7
 8005dfc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e00:	4770      	bx	lr
	...

08005e04 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8005e04:	b580      	push	{r7, lr}
 8005e06:	b082      	sub	sp, #8
 8005e08:	af00      	add	r7, sp, #0
 8005e0a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8005e0c:	687b      	ldr	r3, [r7, #4]
 8005e0e:	3b01      	subs	r3, #1
 8005e10:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8005e14:	d301      	bcc.n	8005e1a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8005e16:	2301      	movs	r3, #1
 8005e18:	e00f      	b.n	8005e3a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8005e1a:	4a0a      	ldr	r2, [pc, #40]	; (8005e44 <SysTick_Config+0x40>)
 8005e1c:	687b      	ldr	r3, [r7, #4]
 8005e1e:	3b01      	subs	r3, #1
 8005e20:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8005e22:	210f      	movs	r1, #15
 8005e24:	f04f 30ff 	mov.w	r0, #4294967295
 8005e28:	f7ff ff8e 	bl	8005d48 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8005e2c:	4b05      	ldr	r3, [pc, #20]	; (8005e44 <SysTick_Config+0x40>)
 8005e2e:	2200      	movs	r2, #0
 8005e30:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8005e32:	4b04      	ldr	r3, [pc, #16]	; (8005e44 <SysTick_Config+0x40>)
 8005e34:	2207      	movs	r2, #7
 8005e36:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8005e38:	2300      	movs	r3, #0
}
 8005e3a:	4618      	mov	r0, r3
 8005e3c:	3708      	adds	r7, #8
 8005e3e:	46bd      	mov	sp, r7
 8005e40:	bd80      	pop	{r7, pc}
 8005e42:	bf00      	nop
 8005e44:	e000e010 	.word	0xe000e010

08005e48 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8005e48:	b580      	push	{r7, lr}
 8005e4a:	b082      	sub	sp, #8
 8005e4c:	af00      	add	r7, sp, #0
 8005e4e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8005e50:	6878      	ldr	r0, [r7, #4]
 8005e52:	f7ff ff29 	bl	8005ca8 <__NVIC_SetPriorityGrouping>
}
 8005e56:	bf00      	nop
 8005e58:	3708      	adds	r7, #8
 8005e5a:	46bd      	mov	sp, r7
 8005e5c:	bd80      	pop	{r7, pc}

08005e5e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8005e5e:	b580      	push	{r7, lr}
 8005e60:	b086      	sub	sp, #24
 8005e62:	af00      	add	r7, sp, #0
 8005e64:	4603      	mov	r3, r0
 8005e66:	60b9      	str	r1, [r7, #8]
 8005e68:	607a      	str	r2, [r7, #4]
 8005e6a:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8005e6c:	f7ff ff40 	bl	8005cf0 <__NVIC_GetPriorityGrouping>
 8005e70:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8005e72:	687a      	ldr	r2, [r7, #4]
 8005e74:	68b9      	ldr	r1, [r7, #8]
 8005e76:	6978      	ldr	r0, [r7, #20]
 8005e78:	f7ff ff90 	bl	8005d9c <NVIC_EncodePriority>
 8005e7c:	4602      	mov	r2, r0
 8005e7e:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8005e82:	4611      	mov	r1, r2
 8005e84:	4618      	mov	r0, r3
 8005e86:	f7ff ff5f 	bl	8005d48 <__NVIC_SetPriority>
}
 8005e8a:	bf00      	nop
 8005e8c:	3718      	adds	r7, #24
 8005e8e:	46bd      	mov	sp, r7
 8005e90:	bd80      	pop	{r7, pc}

08005e92 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32h7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8005e92:	b580      	push	{r7, lr}
 8005e94:	b082      	sub	sp, #8
 8005e96:	af00      	add	r7, sp, #0
 8005e98:	4603      	mov	r3, r0
 8005e9a:	80fb      	strh	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8005e9c:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8005ea0:	4618      	mov	r0, r3
 8005ea2:	f7ff ff33 	bl	8005d0c <__NVIC_EnableIRQ>
}
 8005ea6:	bf00      	nop
 8005ea8:	3708      	adds	r7, #8
 8005eaa:	46bd      	mov	sp, r7
 8005eac:	bd80      	pop	{r7, pc}

08005eae <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status   - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8005eae:	b580      	push	{r7, lr}
 8005eb0:	b082      	sub	sp, #8
 8005eb2:	af00      	add	r7, sp, #0
 8005eb4:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8005eb6:	6878      	ldr	r0, [r7, #4]
 8005eb8:	f7ff ffa4 	bl	8005e04 <SysTick_Config>
 8005ebc:	4603      	mov	r3, r0
}
 8005ebe:	4618      	mov	r0, r3
 8005ec0:	3708      	adds	r7, #8
 8005ec2:	46bd      	mov	sp, r7
 8005ec4:	bd80      	pop	{r7, pc}
	...

08005ec8 <HAL_MPU_Disable>:
/**
  * @brief  Disables the MPU
  * @retval None
  */
void HAL_MPU_Disable(void)
{
 8005ec8:	b480      	push	{r7}
 8005eca:	af00      	add	r7, sp, #0
  __ASM volatile ("dmb 0xF":::"memory");
 8005ecc:	f3bf 8f5f 	dmb	sy
}
 8005ed0:	bf00      	nop
  /* Make sure outstanding transfers are done */
  __DMB();

  /* Disable fault exceptions */
  SCB->SHCSR &= ~SCB_SHCSR_MEMFAULTENA_Msk;
 8005ed2:	4b07      	ldr	r3, [pc, #28]	; (8005ef0 <HAL_MPU_Disable+0x28>)
 8005ed4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005ed6:	4a06      	ldr	r2, [pc, #24]	; (8005ef0 <HAL_MPU_Disable+0x28>)
 8005ed8:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8005edc:	6253      	str	r3, [r2, #36]	; 0x24

  /* Disable the MPU and clear the control register*/
  MPU->CTRL = 0;
 8005ede:	4b05      	ldr	r3, [pc, #20]	; (8005ef4 <HAL_MPU_Disable+0x2c>)
 8005ee0:	2200      	movs	r2, #0
 8005ee2:	605a      	str	r2, [r3, #4]
}
 8005ee4:	bf00      	nop
 8005ee6:	46bd      	mov	sp, r7
 8005ee8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005eec:	4770      	bx	lr
 8005eee:	bf00      	nop
 8005ef0:	e000ed00 	.word	0xe000ed00
 8005ef4:	e000ed90 	.word	0xe000ed90

08005ef8 <HAL_MPU_Enable>:
  *            @arg MPU_PRIVILEGED_DEFAULT
  *            @arg MPU_HFNMI_PRIVDEF
  * @retval None
  */
void HAL_MPU_Enable(uint32_t MPU_Control)
{
 8005ef8:	b480      	push	{r7}
 8005efa:	b083      	sub	sp, #12
 8005efc:	af00      	add	r7, sp, #0
 8005efe:	6078      	str	r0, [r7, #4]
  /* Enable the MPU */
  MPU->CTRL = MPU_Control | MPU_CTRL_ENABLE_Msk;
 8005f00:	4a0b      	ldr	r2, [pc, #44]	; (8005f30 <HAL_MPU_Enable+0x38>)
 8005f02:	687b      	ldr	r3, [r7, #4]
 8005f04:	f043 0301 	orr.w	r3, r3, #1
 8005f08:	6053      	str	r3, [r2, #4]

  /* Enable fault exceptions */
  SCB->SHCSR |= SCB_SHCSR_MEMFAULTENA_Msk;
 8005f0a:	4b0a      	ldr	r3, [pc, #40]	; (8005f34 <HAL_MPU_Enable+0x3c>)
 8005f0c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005f0e:	4a09      	ldr	r2, [pc, #36]	; (8005f34 <HAL_MPU_Enable+0x3c>)
 8005f10:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005f14:	6253      	str	r3, [r2, #36]	; 0x24
  __ASM volatile ("dsb 0xF":::"memory");
 8005f16:	f3bf 8f4f 	dsb	sy
}
 8005f1a:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8005f1c:	f3bf 8f6f 	isb	sy
}
 8005f20:	bf00      	nop

  /* Ensure MPU setting take effects */
  __DSB();
  __ISB();
}
 8005f22:	bf00      	nop
 8005f24:	370c      	adds	r7, #12
 8005f26:	46bd      	mov	sp, r7
 8005f28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f2c:	4770      	bx	lr
 8005f2e:	bf00      	nop
 8005f30:	e000ed90 	.word	0xe000ed90
 8005f34:	e000ed00 	.word	0xe000ed00

08005f38 <HAL_MPU_ConfigRegion>:
  * @param  MPU_Init Pointer to a MPU_Region_InitTypeDef structure that contains
  *                  the initialization and configuration information.
  * @retval None
  */
void HAL_MPU_ConfigRegion(MPU_Region_InitTypeDef *MPU_Init)
{
 8005f38:	b480      	push	{r7}
 8005f3a:	b083      	sub	sp, #12
 8005f3c:	af00      	add	r7, sp, #0
 8005f3e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_MPU_REGION_NUMBER(MPU_Init->Number));
  assert_param(IS_MPU_REGION_ENABLE(MPU_Init->Enable));

  /* Set the Region number */
  MPU->RNR = MPU_Init->Number;
 8005f40:	687b      	ldr	r3, [r7, #4]
 8005f42:	785a      	ldrb	r2, [r3, #1]
 8005f44:	4b1d      	ldr	r3, [pc, #116]	; (8005fbc <HAL_MPU_ConfigRegion+0x84>)
 8005f46:	609a      	str	r2, [r3, #8]

  if ((MPU_Init->Enable) != 0UL)
 8005f48:	687b      	ldr	r3, [r7, #4]
 8005f4a:	781b      	ldrb	r3, [r3, #0]
 8005f4c:	2b00      	cmp	r3, #0
 8005f4e:	d029      	beq.n	8005fa4 <HAL_MPU_ConfigRegion+0x6c>
    assert_param(IS_MPU_ACCESS_CACHEABLE(MPU_Init->IsCacheable));
    assert_param(IS_MPU_ACCESS_BUFFERABLE(MPU_Init->IsBufferable));
    assert_param(IS_MPU_SUB_REGION_DISABLE(MPU_Init->SubRegionDisable));
    assert_param(IS_MPU_REGION_SIZE(MPU_Init->Size));

    MPU->RBAR = MPU_Init->BaseAddress;
 8005f50:	4a1a      	ldr	r2, [pc, #104]	; (8005fbc <HAL_MPU_ConfigRegion+0x84>)
 8005f52:	687b      	ldr	r3, [r7, #4]
 8005f54:	685b      	ldr	r3, [r3, #4]
 8005f56:	60d3      	str	r3, [r2, #12]
    MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 8005f58:	687b      	ldr	r3, [r7, #4]
 8005f5a:	7b1b      	ldrb	r3, [r3, #12]
 8005f5c:	071a      	lsls	r2, r3, #28
                ((uint32_t)MPU_Init->AccessPermission        << MPU_RASR_AP_Pos)   |
 8005f5e:	687b      	ldr	r3, [r7, #4]
 8005f60:	7adb      	ldrb	r3, [r3, #11]
 8005f62:	061b      	lsls	r3, r3, #24
    MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 8005f64:	431a      	orrs	r2, r3
                ((uint32_t)MPU_Init->TypeExtField            << MPU_RASR_TEX_Pos)  |
 8005f66:	687b      	ldr	r3, [r7, #4]
 8005f68:	7a9b      	ldrb	r3, [r3, #10]
 8005f6a:	04db      	lsls	r3, r3, #19
                ((uint32_t)MPU_Init->AccessPermission        << MPU_RASR_AP_Pos)   |
 8005f6c:	431a      	orrs	r2, r3
                ((uint32_t)MPU_Init->IsShareable             << MPU_RASR_S_Pos)    |
 8005f6e:	687b      	ldr	r3, [r7, #4]
 8005f70:	7b5b      	ldrb	r3, [r3, #13]
 8005f72:	049b      	lsls	r3, r3, #18
                ((uint32_t)MPU_Init->TypeExtField            << MPU_RASR_TEX_Pos)  |
 8005f74:	431a      	orrs	r2, r3
                ((uint32_t)MPU_Init->IsCacheable             << MPU_RASR_C_Pos)    |
 8005f76:	687b      	ldr	r3, [r7, #4]
 8005f78:	7b9b      	ldrb	r3, [r3, #14]
 8005f7a:	045b      	lsls	r3, r3, #17
                ((uint32_t)MPU_Init->IsShareable             << MPU_RASR_S_Pos)    |
 8005f7c:	431a      	orrs	r2, r3
                ((uint32_t)MPU_Init->IsBufferable            << MPU_RASR_B_Pos)    |
 8005f7e:	687b      	ldr	r3, [r7, #4]
 8005f80:	7bdb      	ldrb	r3, [r3, #15]
 8005f82:	041b      	lsls	r3, r3, #16
                ((uint32_t)MPU_Init->IsCacheable             << MPU_RASR_C_Pos)    |
 8005f84:	431a      	orrs	r2, r3
                ((uint32_t)MPU_Init->SubRegionDisable        << MPU_RASR_SRD_Pos)  |
 8005f86:	687b      	ldr	r3, [r7, #4]
 8005f88:	7a5b      	ldrb	r3, [r3, #9]
 8005f8a:	021b      	lsls	r3, r3, #8
                ((uint32_t)MPU_Init->IsBufferable            << MPU_RASR_B_Pos)    |
 8005f8c:	431a      	orrs	r2, r3
                ((uint32_t)MPU_Init->Size                    << MPU_RASR_SIZE_Pos) |
 8005f8e:	687b      	ldr	r3, [r7, #4]
 8005f90:	7a1b      	ldrb	r3, [r3, #8]
 8005f92:	005b      	lsls	r3, r3, #1
                ((uint32_t)MPU_Init->SubRegionDisable        << MPU_RASR_SRD_Pos)  |
 8005f94:	4313      	orrs	r3, r2
                ((uint32_t)MPU_Init->Enable                  << MPU_RASR_ENABLE_Pos);
 8005f96:	687a      	ldr	r2, [r7, #4]
 8005f98:	7812      	ldrb	r2, [r2, #0]
 8005f9a:	4611      	mov	r1, r2
    MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 8005f9c:	4a07      	ldr	r2, [pc, #28]	; (8005fbc <HAL_MPU_ConfigRegion+0x84>)
                ((uint32_t)MPU_Init->Size                    << MPU_RASR_SIZE_Pos) |
 8005f9e:	430b      	orrs	r3, r1
    MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 8005fa0:	6113      	str	r3, [r2, #16]
  else
  {
    MPU->RBAR = 0x00;
    MPU->RASR = 0x00;
  }
}
 8005fa2:	e005      	b.n	8005fb0 <HAL_MPU_ConfigRegion+0x78>
    MPU->RBAR = 0x00;
 8005fa4:	4b05      	ldr	r3, [pc, #20]	; (8005fbc <HAL_MPU_ConfigRegion+0x84>)
 8005fa6:	2200      	movs	r2, #0
 8005fa8:	60da      	str	r2, [r3, #12]
    MPU->RASR = 0x00;
 8005faa:	4b04      	ldr	r3, [pc, #16]	; (8005fbc <HAL_MPU_ConfigRegion+0x84>)
 8005fac:	2200      	movs	r2, #0
 8005fae:	611a      	str	r2, [r3, #16]
}
 8005fb0:	bf00      	nop
 8005fb2:	370c      	adds	r7, #12
 8005fb4:	46bd      	mov	sp, r7
 8005fb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005fba:	4770      	bx	lr
 8005fbc:	e000ed90 	.word	0xe000ed90

08005fc0 <HAL_DAC_Init>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Init(DAC_HandleTypeDef *hdac)
{
 8005fc0:	b580      	push	{r7, lr}
 8005fc2:	b082      	sub	sp, #8
 8005fc4:	af00      	add	r7, sp, #0
 8005fc6:	6078      	str	r0, [r7, #4]
  /* Check DAC handle */
  if (hdac == NULL)
 8005fc8:	687b      	ldr	r3, [r7, #4]
 8005fca:	2b00      	cmp	r3, #0
 8005fcc:	d101      	bne.n	8005fd2 <HAL_DAC_Init+0x12>
  {
    return HAL_ERROR;
 8005fce:	2301      	movs	r3, #1
 8005fd0:	e014      	b.n	8005ffc <HAL_DAC_Init+0x3c>
  }
  /* Check the parameters */
  assert_param(IS_DAC_ALL_INSTANCE(hdac->Instance));

  if (hdac->State == HAL_DAC_STATE_RESET)
 8005fd2:	687b      	ldr	r3, [r7, #4]
 8005fd4:	791b      	ldrb	r3, [r3, #4]
 8005fd6:	b2db      	uxtb	r3, r3
 8005fd8:	2b00      	cmp	r3, #0
 8005fda:	d105      	bne.n	8005fe8 <HAL_DAC_Init+0x28>
      hdac->MspInitCallback             = HAL_DAC_MspInit;
    }
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

    /* Allocate lock resource and initialize it */
    hdac->Lock = HAL_UNLOCKED;
 8005fdc:	687b      	ldr	r3, [r7, #4]
 8005fde:	2200      	movs	r2, #0
 8005fe0:	715a      	strb	r2, [r3, #5]
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
    /* Init the low level hardware */
    hdac->MspInitCallback(hdac);
#else
    /* Init the low level hardware */
    HAL_DAC_MspInit(hdac);
 8005fe2:	6878      	ldr	r0, [r7, #4]
 8005fe4:	f7fd fa08 	bl	80033f8 <HAL_DAC_MspInit>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
  }

  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_BUSY;
 8005fe8:	687b      	ldr	r3, [r7, #4]
 8005fea:	2202      	movs	r2, #2
 8005fec:	711a      	strb	r2, [r3, #4]

  /* Set DAC error code to none */
  hdac->ErrorCode = HAL_DAC_ERROR_NONE;
 8005fee:	687b      	ldr	r3, [r7, #4]
 8005ff0:	2200      	movs	r2, #0
 8005ff2:	611a      	str	r2, [r3, #16]

  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_READY;
 8005ff4:	687b      	ldr	r3, [r7, #4]
 8005ff6:	2201      	movs	r2, #1
 8005ff8:	711a      	strb	r2, [r3, #4]

  /* Return function status */
  return HAL_OK;
 8005ffa:	2300      	movs	r3, #0
}
 8005ffc:	4618      	mov	r0, r3
 8005ffe:	3708      	adds	r7, #8
 8006000:	46bd      	mov	sp, r7
 8006002:	bd80      	pop	{r7, pc}

08006004 <HAL_DAC_Start>:
  *            @arg DAC_CHANNEL_1: DAC Channel1 selected
  *            @arg DAC_CHANNEL_2: DAC Channel2 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Start(DAC_HandleTypeDef *hdac, uint32_t Channel)
{
 8006004:	b480      	push	{r7}
 8006006:	b083      	sub	sp, #12
 8006008:	af00      	add	r7, sp, #0
 800600a:	6078      	str	r0, [r7, #4]
 800600c:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_DAC_CHANNEL(Channel));

  /* Process locked */
  __HAL_LOCK(hdac);
 800600e:	687b      	ldr	r3, [r7, #4]
 8006010:	795b      	ldrb	r3, [r3, #5]
 8006012:	2b01      	cmp	r3, #1
 8006014:	d101      	bne.n	800601a <HAL_DAC_Start+0x16>
 8006016:	2302      	movs	r3, #2
 8006018:	e040      	b.n	800609c <HAL_DAC_Start+0x98>
 800601a:	687b      	ldr	r3, [r7, #4]
 800601c:	2201      	movs	r2, #1
 800601e:	715a      	strb	r2, [r3, #5]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
 8006020:	687b      	ldr	r3, [r7, #4]
 8006022:	2202      	movs	r2, #2
 8006024:	711a      	strb	r2, [r3, #4]

  /* Enable the Peripheral */
  __HAL_DAC_ENABLE(hdac, Channel);
 8006026:	687b      	ldr	r3, [r7, #4]
 8006028:	681b      	ldr	r3, [r3, #0]
 800602a:	6819      	ldr	r1, [r3, #0]
 800602c:	683b      	ldr	r3, [r7, #0]
 800602e:	f003 0310 	and.w	r3, r3, #16
 8006032:	2201      	movs	r2, #1
 8006034:	409a      	lsls	r2, r3
 8006036:	687b      	ldr	r3, [r7, #4]
 8006038:	681b      	ldr	r3, [r3, #0]
 800603a:	430a      	orrs	r2, r1
 800603c:	601a      	str	r2, [r3, #0]

  if (Channel == DAC_CHANNEL_1)
 800603e:	683b      	ldr	r3, [r7, #0]
 8006040:	2b00      	cmp	r3, #0
 8006042:	d10f      	bne.n	8006064 <HAL_DAC_Start+0x60>
  {
    /* Check if software trigger enabled */
    if ((hdac->Instance->CR & (DAC_CR_TEN1 | DAC_CR_TSEL1)) == DAC_TRIGGER_SOFTWARE)
 8006044:	687b      	ldr	r3, [r7, #4]
 8006046:	681b      	ldr	r3, [r3, #0]
 8006048:	681b      	ldr	r3, [r3, #0]
 800604a:	f003 033e 	and.w	r3, r3, #62	; 0x3e
 800604e:	2b02      	cmp	r3, #2
 8006050:	d11d      	bne.n	800608e <HAL_DAC_Start+0x8a>
    {
      /* Enable the selected DAC software conversion */
      SET_BIT(hdac->Instance->SWTRIGR, DAC_SWTRIGR_SWTRIG1);
 8006052:	687b      	ldr	r3, [r7, #4]
 8006054:	681b      	ldr	r3, [r3, #0]
 8006056:	685a      	ldr	r2, [r3, #4]
 8006058:	687b      	ldr	r3, [r7, #4]
 800605a:	681b      	ldr	r3, [r3, #0]
 800605c:	f042 0201 	orr.w	r2, r2, #1
 8006060:	605a      	str	r2, [r3, #4]
 8006062:	e014      	b.n	800608e <HAL_DAC_Start+0x8a>
  }

  else
  {
    /* Check if software trigger enabled */
    if ((hdac->Instance->CR & (DAC_CR_TEN2 | DAC_CR_TSEL2)) == (DAC_TRIGGER_SOFTWARE << (Channel & 0x10UL)))
 8006064:	687b      	ldr	r3, [r7, #4]
 8006066:	681b      	ldr	r3, [r3, #0]
 8006068:	681b      	ldr	r3, [r3, #0]
 800606a:	f403 1278 	and.w	r2, r3, #4063232	; 0x3e0000
 800606e:	683b      	ldr	r3, [r7, #0]
 8006070:	f003 0310 	and.w	r3, r3, #16
 8006074:	2102      	movs	r1, #2
 8006076:	fa01 f303 	lsl.w	r3, r1, r3
 800607a:	429a      	cmp	r2, r3
 800607c:	d107      	bne.n	800608e <HAL_DAC_Start+0x8a>
    {
      /* Enable the selected DAC software conversion*/
      SET_BIT(hdac->Instance->SWTRIGR, DAC_SWTRIGR_SWTRIG2);
 800607e:	687b      	ldr	r3, [r7, #4]
 8006080:	681b      	ldr	r3, [r3, #0]
 8006082:	685a      	ldr	r2, [r3, #4]
 8006084:	687b      	ldr	r3, [r7, #4]
 8006086:	681b      	ldr	r3, [r3, #0]
 8006088:	f042 0202 	orr.w	r2, r2, #2
 800608c:	605a      	str	r2, [r3, #4]
    }
  }


  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_READY;
 800608e:	687b      	ldr	r3, [r7, #4]
 8006090:	2201      	movs	r2, #1
 8006092:	711a      	strb	r2, [r3, #4]

  /* Process unlocked */
  __HAL_UNLOCK(hdac);
 8006094:	687b      	ldr	r3, [r7, #4]
 8006096:	2200      	movs	r2, #0
 8006098:	715a      	strb	r2, [r3, #5]

  /* Return function status */
  return HAL_OK;
 800609a:	2300      	movs	r3, #0
}
 800609c:	4618      	mov	r0, r3
 800609e:	370c      	adds	r7, #12
 80060a0:	46bd      	mov	sp, r7
 80060a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060a6:	4770      	bx	lr

080060a8 <HAL_DAC_SetValue>:
  *            @arg DAC_ALIGN_12B_R: 12bit right data alignment selected
  * @param  Data Data to be loaded in the selected data holding register.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_SetValue(DAC_HandleTypeDef *hdac, uint32_t Channel, uint32_t Alignment, uint32_t Data)
{
 80060a8:	b480      	push	{r7}
 80060aa:	b087      	sub	sp, #28
 80060ac:	af00      	add	r7, sp, #0
 80060ae:	60f8      	str	r0, [r7, #12]
 80060b0:	60b9      	str	r1, [r7, #8]
 80060b2:	607a      	str	r2, [r7, #4]
 80060b4:	603b      	str	r3, [r7, #0]
  __IO uint32_t tmp = 0UL;
 80060b6:	2300      	movs	r3, #0
 80060b8:	617b      	str	r3, [r7, #20]
  /* Check the parameters */
  assert_param(IS_DAC_CHANNEL(Channel));
  assert_param(IS_DAC_ALIGN(Alignment));
  assert_param(IS_DAC_DATA(Data));

  tmp = (uint32_t)hdac->Instance;
 80060ba:	68fb      	ldr	r3, [r7, #12]
 80060bc:	681b      	ldr	r3, [r3, #0]
 80060be:	617b      	str	r3, [r7, #20]
  if (Channel == DAC_CHANNEL_1)
 80060c0:	68bb      	ldr	r3, [r7, #8]
 80060c2:	2b00      	cmp	r3, #0
 80060c4:	d105      	bne.n	80060d2 <HAL_DAC_SetValue+0x2a>
  {
    tmp += DAC_DHR12R1_ALIGNMENT(Alignment);
 80060c6:	697a      	ldr	r2, [r7, #20]
 80060c8:	687b      	ldr	r3, [r7, #4]
 80060ca:	4413      	add	r3, r2
 80060cc:	3308      	adds	r3, #8
 80060ce:	617b      	str	r3, [r7, #20]
 80060d0:	e004      	b.n	80060dc <HAL_DAC_SetValue+0x34>
  }

  else
  {
    tmp += DAC_DHR12R2_ALIGNMENT(Alignment);
 80060d2:	697a      	ldr	r2, [r7, #20]
 80060d4:	687b      	ldr	r3, [r7, #4]
 80060d6:	4413      	add	r3, r2
 80060d8:	3314      	adds	r3, #20
 80060da:	617b      	str	r3, [r7, #20]
  }


  /* Set the DAC channel selected data holding register */
  *(__IO uint32_t *) tmp = Data;
 80060dc:	697b      	ldr	r3, [r7, #20]
 80060de:	461a      	mov	r2, r3
 80060e0:	683b      	ldr	r3, [r7, #0]
 80060e2:	6013      	str	r3, [r2, #0]

  /* Return function status */
  return HAL_OK;
 80060e4:	2300      	movs	r3, #0
}
 80060e6:	4618      	mov	r0, r3
 80060e8:	371c      	adds	r7, #28
 80060ea:	46bd      	mov	sp, r7
 80060ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060f0:	4770      	bx	lr
	...

080060f4 <HAL_DAC_ConfigChannel>:
  *            @arg DAC_CHANNEL_1: DAC Channel1 selected
  *            @arg DAC_CHANNEL_2: DAC Channel2 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_ConfigChannel(DAC_HandleTypeDef *hdac, DAC_ChannelConfTypeDef *sConfig, uint32_t Channel)
{
 80060f4:	b580      	push	{r7, lr}
 80060f6:	b088      	sub	sp, #32
 80060f8:	af00      	add	r7, sp, #0
 80060fa:	60f8      	str	r0, [r7, #12]
 80060fc:	60b9      	str	r1, [r7, #8]
 80060fe:	607a      	str	r2, [r7, #4]
    assert_param(IS_DAC_REFRESHTIME(sConfig->DAC_SampleAndHoldConfig.DAC_RefreshTime));
  }
  assert_param(IS_DAC_CHANNEL(Channel));

  /* Process locked */
  __HAL_LOCK(hdac);
 8006100:	68fb      	ldr	r3, [r7, #12]
 8006102:	795b      	ldrb	r3, [r3, #5]
 8006104:	2b01      	cmp	r3, #1
 8006106:	d101      	bne.n	800610c <HAL_DAC_ConfigChannel+0x18>
 8006108:	2302      	movs	r3, #2
 800610a:	e12a      	b.n	8006362 <HAL_DAC_ConfigChannel+0x26e>
 800610c:	68fb      	ldr	r3, [r7, #12]
 800610e:	2201      	movs	r2, #1
 8006110:	715a      	strb	r2, [r3, #5]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
 8006112:	68fb      	ldr	r3, [r7, #12]
 8006114:	2202      	movs	r2, #2
 8006116:	711a      	strb	r2, [r3, #4]

  /* Sample and hold configuration */
  if (sConfig->DAC_SampleAndHold == DAC_SAMPLEANDHOLD_ENABLE)
 8006118:	68bb      	ldr	r3, [r7, #8]
 800611a:	681b      	ldr	r3, [r3, #0]
 800611c:	2b04      	cmp	r3, #4
 800611e:	f040 8081 	bne.w	8006224 <HAL_DAC_ConfigChannel+0x130>
  {
    /* Get timeout */
    tickstart = HAL_GetTick();
 8006122:	f7fd fff5 	bl	8004110 <HAL_GetTick>
 8006126:	61b8      	str	r0, [r7, #24]

    if (Channel == DAC_CHANNEL_1)
 8006128:	687b      	ldr	r3, [r7, #4]
 800612a:	2b00      	cmp	r3, #0
 800612c:	d140      	bne.n	80061b0 <HAL_DAC_ConfigChannel+0xbc>
    {
      /* SHSR1 can be written when BWST1 is cleared */
      while (((hdac->Instance->SR) & DAC_SR_BWST1) != 0UL)
 800612e:	e018      	b.n	8006162 <HAL_DAC_ConfigChannel+0x6e>
      {
        /* Check for the Timeout */
        if ((HAL_GetTick() - tickstart) > TIMEOUT_DAC_CALIBCONFIG)
 8006130:	f7fd ffee 	bl	8004110 <HAL_GetTick>
 8006134:	4602      	mov	r2, r0
 8006136:	69bb      	ldr	r3, [r7, #24]
 8006138:	1ad3      	subs	r3, r2, r3
 800613a:	2b01      	cmp	r3, #1
 800613c:	d911      	bls.n	8006162 <HAL_DAC_ConfigChannel+0x6e>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if(((hdac->Instance->SR) & DAC_SR_BWST1) != 0UL)
 800613e:	68fb      	ldr	r3, [r7, #12]
 8006140:	681b      	ldr	r3, [r3, #0]
 8006142:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8006144:	4b89      	ldr	r3, [pc, #548]	; (800636c <HAL_DAC_ConfigChannel+0x278>)
 8006146:	4013      	ands	r3, r2
 8006148:	2b00      	cmp	r3, #0
 800614a:	d00a      	beq.n	8006162 <HAL_DAC_ConfigChannel+0x6e>
          {
            /* Update error code */
            SET_BIT(hdac->ErrorCode, HAL_DAC_ERROR_TIMEOUT);
 800614c:	68fb      	ldr	r3, [r7, #12]
 800614e:	691b      	ldr	r3, [r3, #16]
 8006150:	f043 0208 	orr.w	r2, r3, #8
 8006154:	68fb      	ldr	r3, [r7, #12]
 8006156:	611a      	str	r2, [r3, #16]

            /* Change the DMA state */
            hdac->State = HAL_DAC_STATE_TIMEOUT;
 8006158:	68fb      	ldr	r3, [r7, #12]
 800615a:	2203      	movs	r2, #3
 800615c:	711a      	strb	r2, [r3, #4]

            return HAL_TIMEOUT;
 800615e:	2303      	movs	r3, #3
 8006160:	e0ff      	b.n	8006362 <HAL_DAC_ConfigChannel+0x26e>
      while (((hdac->Instance->SR) & DAC_SR_BWST1) != 0UL)
 8006162:	68fb      	ldr	r3, [r7, #12]
 8006164:	681b      	ldr	r3, [r3, #0]
 8006166:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8006168:	4b80      	ldr	r3, [pc, #512]	; (800636c <HAL_DAC_ConfigChannel+0x278>)
 800616a:	4013      	ands	r3, r2
 800616c:	2b00      	cmp	r3, #0
 800616e:	d1df      	bne.n	8006130 <HAL_DAC_ConfigChannel+0x3c>
          }
        }
      }
      HAL_Delay(1);
 8006170:	2001      	movs	r0, #1
 8006172:	f7fd ffd9 	bl	8004128 <HAL_Delay>
      hdac->Instance->SHSR1 = sConfig->DAC_SampleAndHoldConfig.DAC_SampleTime;
 8006176:	68fb      	ldr	r3, [r7, #12]
 8006178:	681b      	ldr	r3, [r3, #0]
 800617a:	68ba      	ldr	r2, [r7, #8]
 800617c:	6992      	ldr	r2, [r2, #24]
 800617e:	641a      	str	r2, [r3, #64]	; 0x40
 8006180:	e023      	b.n	80061ca <HAL_DAC_ConfigChannel+0xd6>
    {
      /* SHSR2 can be written when BWST2 is cleared */
      while (((hdac->Instance->SR) & DAC_SR_BWST2) != 0UL)
      {
        /* Check for the Timeout */
        if ((HAL_GetTick() - tickstart) > TIMEOUT_DAC_CALIBCONFIG)
 8006182:	f7fd ffc5 	bl	8004110 <HAL_GetTick>
 8006186:	4602      	mov	r2, r0
 8006188:	69bb      	ldr	r3, [r7, #24]
 800618a:	1ad3      	subs	r3, r2, r3
 800618c:	2b01      	cmp	r3, #1
 800618e:	d90f      	bls.n	80061b0 <HAL_DAC_ConfigChannel+0xbc>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if(((hdac->Instance->SR) & DAC_SR_BWST2) != 0UL)
 8006190:	68fb      	ldr	r3, [r7, #12]
 8006192:	681b      	ldr	r3, [r3, #0]
 8006194:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006196:	2b00      	cmp	r3, #0
 8006198:	da0a      	bge.n	80061b0 <HAL_DAC_ConfigChannel+0xbc>
          {
            /* Update error code */
            SET_BIT(hdac->ErrorCode, HAL_DAC_ERROR_TIMEOUT);
 800619a:	68fb      	ldr	r3, [r7, #12]
 800619c:	691b      	ldr	r3, [r3, #16]
 800619e:	f043 0208 	orr.w	r2, r3, #8
 80061a2:	68fb      	ldr	r3, [r7, #12]
 80061a4:	611a      	str	r2, [r3, #16]

            /* Change the DMA state */
            hdac->State = HAL_DAC_STATE_TIMEOUT;
 80061a6:	68fb      	ldr	r3, [r7, #12]
 80061a8:	2203      	movs	r2, #3
 80061aa:	711a      	strb	r2, [r3, #4]

            return HAL_TIMEOUT;
 80061ac:	2303      	movs	r3, #3
 80061ae:	e0d8      	b.n	8006362 <HAL_DAC_ConfigChannel+0x26e>
      while (((hdac->Instance->SR) & DAC_SR_BWST2) != 0UL)
 80061b0:	68fb      	ldr	r3, [r7, #12]
 80061b2:	681b      	ldr	r3, [r3, #0]
 80061b4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80061b6:	2b00      	cmp	r3, #0
 80061b8:	dbe3      	blt.n	8006182 <HAL_DAC_ConfigChannel+0x8e>
          }
        }
      }
      HAL_Delay(1U);
 80061ba:	2001      	movs	r0, #1
 80061bc:	f7fd ffb4 	bl	8004128 <HAL_Delay>
      hdac->Instance->SHSR2 = sConfig->DAC_SampleAndHoldConfig.DAC_SampleTime;
 80061c0:	68fb      	ldr	r3, [r7, #12]
 80061c2:	681b      	ldr	r3, [r3, #0]
 80061c4:	68ba      	ldr	r2, [r7, #8]
 80061c6:	6992      	ldr	r2, [r2, #24]
 80061c8:	645a      	str	r2, [r3, #68]	; 0x44
    }


    /* HoldTime */
    MODIFY_REG(hdac->Instance->SHHR, DAC_SHHR_THOLD1 << (Channel & 0x10UL),
 80061ca:	68fb      	ldr	r3, [r7, #12]
 80061cc:	681b      	ldr	r3, [r3, #0]
 80061ce:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 80061d0:	687b      	ldr	r3, [r7, #4]
 80061d2:	f003 0310 	and.w	r3, r3, #16
 80061d6:	f240 31ff 	movw	r1, #1023	; 0x3ff
 80061da:	fa01 f303 	lsl.w	r3, r1, r3
 80061de:	43db      	mvns	r3, r3
 80061e0:	ea02 0103 	and.w	r1, r2, r3
 80061e4:	68bb      	ldr	r3, [r7, #8]
 80061e6:	69da      	ldr	r2, [r3, #28]
 80061e8:	687b      	ldr	r3, [r7, #4]
 80061ea:	f003 0310 	and.w	r3, r3, #16
 80061ee:	409a      	lsls	r2, r3
 80061f0:	68fb      	ldr	r3, [r7, #12]
 80061f2:	681b      	ldr	r3, [r3, #0]
 80061f4:	430a      	orrs	r2, r1
 80061f6:	649a      	str	r2, [r3, #72]	; 0x48
               (sConfig->DAC_SampleAndHoldConfig.DAC_HoldTime) << (Channel & 0x10UL));
    /* RefreshTime */
    MODIFY_REG(hdac->Instance->SHRR, DAC_SHRR_TREFRESH1 << (Channel & 0x10UL),
 80061f8:	68fb      	ldr	r3, [r7, #12]
 80061fa:	681b      	ldr	r3, [r3, #0]
 80061fc:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80061fe:	687b      	ldr	r3, [r7, #4]
 8006200:	f003 0310 	and.w	r3, r3, #16
 8006204:	21ff      	movs	r1, #255	; 0xff
 8006206:	fa01 f303 	lsl.w	r3, r1, r3
 800620a:	43db      	mvns	r3, r3
 800620c:	ea02 0103 	and.w	r1, r2, r3
 8006210:	68bb      	ldr	r3, [r7, #8]
 8006212:	6a1a      	ldr	r2, [r3, #32]
 8006214:	687b      	ldr	r3, [r7, #4]
 8006216:	f003 0310 	and.w	r3, r3, #16
 800621a:	409a      	lsls	r2, r3
 800621c:	68fb      	ldr	r3, [r7, #12]
 800621e:	681b      	ldr	r3, [r3, #0]
 8006220:	430a      	orrs	r2, r1
 8006222:	64da      	str	r2, [r3, #76]	; 0x4c
               (sConfig->DAC_SampleAndHoldConfig.DAC_RefreshTime) << (Channel & 0x10UL));
  }

  if (sConfig->DAC_UserTrimming == DAC_TRIMMING_USER)
 8006224:	68bb      	ldr	r3, [r7, #8]
 8006226:	691b      	ldr	r3, [r3, #16]
 8006228:	2b01      	cmp	r3, #1
 800622a:	d11d      	bne.n	8006268 <HAL_DAC_ConfigChannel+0x174>
    /* USER TRIMMING */
  {
    /* Get the DAC CCR value */
    tmpreg1 = hdac->Instance->CCR;
 800622c:	68fb      	ldr	r3, [r7, #12]
 800622e:	681b      	ldr	r3, [r3, #0]
 8006230:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006232:	617b      	str	r3, [r7, #20]
    /* Clear trimming value */
    tmpreg1 &= ~(((uint32_t)(DAC_CCR_OTRIM1)) << (Channel & 0x10UL));
 8006234:	687b      	ldr	r3, [r7, #4]
 8006236:	f003 0310 	and.w	r3, r3, #16
 800623a:	221f      	movs	r2, #31
 800623c:	fa02 f303 	lsl.w	r3, r2, r3
 8006240:	43db      	mvns	r3, r3
 8006242:	697a      	ldr	r2, [r7, #20]
 8006244:	4013      	ands	r3, r2
 8006246:	617b      	str	r3, [r7, #20]
    /* Configure for the selected trimming offset */
    tmpreg2 = sConfig->DAC_TrimmingValue;
 8006248:	68bb      	ldr	r3, [r7, #8]
 800624a:	695b      	ldr	r3, [r3, #20]
 800624c:	613b      	str	r3, [r7, #16]
    /* Calculate CCR register value depending on DAC_Channel */
    tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 800624e:	687b      	ldr	r3, [r7, #4]
 8006250:	f003 0310 	and.w	r3, r3, #16
 8006254:	693a      	ldr	r2, [r7, #16]
 8006256:	fa02 f303 	lsl.w	r3, r2, r3
 800625a:	697a      	ldr	r2, [r7, #20]
 800625c:	4313      	orrs	r3, r2
 800625e:	617b      	str	r3, [r7, #20]
    /* Write to DAC CCR */
    hdac->Instance->CCR = tmpreg1;
 8006260:	68fb      	ldr	r3, [r7, #12]
 8006262:	681b      	ldr	r3, [r3, #0]
 8006264:	697a      	ldr	r2, [r7, #20]
 8006266:	639a      	str	r2, [r3, #56]	; 0x38
  }
  /* else factory trimming is used (factory setting are available at reset)*/
  /* SW Nothing has nothing to do */

  /* Get the DAC MCR value */
  tmpreg1 = hdac->Instance->MCR;
 8006268:	68fb      	ldr	r3, [r7, #12]
 800626a:	681b      	ldr	r3, [r3, #0]
 800626c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800626e:	617b      	str	r3, [r7, #20]
  /* Clear DAC_MCR_MODEx bits */
  tmpreg1 &= ~(((uint32_t)(DAC_MCR_MODE1)) << (Channel & 0x10UL));
 8006270:	687b      	ldr	r3, [r7, #4]
 8006272:	f003 0310 	and.w	r3, r3, #16
 8006276:	2207      	movs	r2, #7
 8006278:	fa02 f303 	lsl.w	r3, r2, r3
 800627c:	43db      	mvns	r3, r3
 800627e:	697a      	ldr	r2, [r7, #20]
 8006280:	4013      	ands	r3, r2
 8006282:	617b      	str	r3, [r7, #20]
  /* Configure for the selected DAC channel: mode, buffer output & on chip peripheral connect */
  if (sConfig->DAC_ConnectOnChipPeripheral == DAC_CHIPCONNECT_EXTERNAL)
 8006284:	68bb      	ldr	r3, [r7, #8]
 8006286:	68db      	ldr	r3, [r3, #12]
 8006288:	2b01      	cmp	r3, #1
 800628a:	d102      	bne.n	8006292 <HAL_DAC_ConfigChannel+0x19e>
  {
    connectOnChip = 0x00000000UL;
 800628c:	2300      	movs	r3, #0
 800628e:	61fb      	str	r3, [r7, #28]
 8006290:	e00f      	b.n	80062b2 <HAL_DAC_ConfigChannel+0x1be>
  }
  else if (sConfig->DAC_ConnectOnChipPeripheral == DAC_CHIPCONNECT_INTERNAL)
 8006292:	68bb      	ldr	r3, [r7, #8]
 8006294:	68db      	ldr	r3, [r3, #12]
 8006296:	2b02      	cmp	r3, #2
 8006298:	d102      	bne.n	80062a0 <HAL_DAC_ConfigChannel+0x1ac>
  {
    connectOnChip = DAC_MCR_MODE1_0;
 800629a:	2301      	movs	r3, #1
 800629c:	61fb      	str	r3, [r7, #28]
 800629e:	e008      	b.n	80062b2 <HAL_DAC_ConfigChannel+0x1be>
  }
  else /* (sConfig->DAC_ConnectOnChipPeripheral == DAC_CHIPCONNECT_BOTH) */
  {
    if (sConfig->DAC_OutputBuffer == DAC_OUTPUTBUFFER_ENABLE)
 80062a0:	68bb      	ldr	r3, [r7, #8]
 80062a2:	689b      	ldr	r3, [r3, #8]
 80062a4:	2b00      	cmp	r3, #0
 80062a6:	d102      	bne.n	80062ae <HAL_DAC_ConfigChannel+0x1ba>
    {
      connectOnChip = DAC_MCR_MODE1_0;
 80062a8:	2301      	movs	r3, #1
 80062aa:	61fb      	str	r3, [r7, #28]
 80062ac:	e001      	b.n	80062b2 <HAL_DAC_ConfigChannel+0x1be>
    }
    else
    {
      connectOnChip = 0x00000000UL;
 80062ae:	2300      	movs	r3, #0
 80062b0:	61fb      	str	r3, [r7, #28]
    }
  }
  tmpreg2 = (sConfig->DAC_SampleAndHold | sConfig->DAC_OutputBuffer | connectOnChip);
 80062b2:	68bb      	ldr	r3, [r7, #8]
 80062b4:	681a      	ldr	r2, [r3, #0]
 80062b6:	68bb      	ldr	r3, [r7, #8]
 80062b8:	689b      	ldr	r3, [r3, #8]
 80062ba:	4313      	orrs	r3, r2
 80062bc:	69fa      	ldr	r2, [r7, #28]
 80062be:	4313      	orrs	r3, r2
 80062c0:	613b      	str	r3, [r7, #16]
  /* Calculate MCR register value depending on DAC_Channel */
  tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 80062c2:	687b      	ldr	r3, [r7, #4]
 80062c4:	f003 0310 	and.w	r3, r3, #16
 80062c8:	693a      	ldr	r2, [r7, #16]
 80062ca:	fa02 f303 	lsl.w	r3, r2, r3
 80062ce:	697a      	ldr	r2, [r7, #20]
 80062d0:	4313      	orrs	r3, r2
 80062d2:	617b      	str	r3, [r7, #20]
  /* Write to DAC MCR */
  hdac->Instance->MCR = tmpreg1;
 80062d4:	68fb      	ldr	r3, [r7, #12]
 80062d6:	681b      	ldr	r3, [r3, #0]
 80062d8:	697a      	ldr	r2, [r7, #20]
 80062da:	63da      	str	r2, [r3, #60]	; 0x3c

  /* DAC in normal operating mode hence clear DAC_CR_CENx bit */
  CLEAR_BIT(hdac->Instance->CR, DAC_CR_CEN1 << (Channel & 0x10UL));
 80062dc:	68fb      	ldr	r3, [r7, #12]
 80062de:	681b      	ldr	r3, [r3, #0]
 80062e0:	6819      	ldr	r1, [r3, #0]
 80062e2:	687b      	ldr	r3, [r7, #4]
 80062e4:	f003 0310 	and.w	r3, r3, #16
 80062e8:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 80062ec:	fa02 f303 	lsl.w	r3, r2, r3
 80062f0:	43da      	mvns	r2, r3
 80062f2:	68fb      	ldr	r3, [r7, #12]
 80062f4:	681b      	ldr	r3, [r3, #0]
 80062f6:	400a      	ands	r2, r1
 80062f8:	601a      	str	r2, [r3, #0]

  /* Get the DAC CR value */
  tmpreg1 = hdac->Instance->CR;
 80062fa:	68fb      	ldr	r3, [r7, #12]
 80062fc:	681b      	ldr	r3, [r3, #0]
 80062fe:	681b      	ldr	r3, [r3, #0]
 8006300:	617b      	str	r3, [r7, #20]
  /* Clear TENx, TSELx, WAVEx and MAMPx bits */
  tmpreg1 &= ~(((uint32_t)(DAC_CR_MAMP1 | DAC_CR_WAVE1 | DAC_CR_TSEL1 | DAC_CR_TEN1)) << (Channel & 0x10UL));
 8006302:	687b      	ldr	r3, [r7, #4]
 8006304:	f003 0310 	and.w	r3, r3, #16
 8006308:	f640 72fe 	movw	r2, #4094	; 0xffe
 800630c:	fa02 f303 	lsl.w	r3, r2, r3
 8006310:	43db      	mvns	r3, r3
 8006312:	697a      	ldr	r2, [r7, #20]
 8006314:	4013      	ands	r3, r2
 8006316:	617b      	str	r3, [r7, #20]
  /* Configure for the selected DAC channel: trigger */
  /* Set TSELx and TENx bits according to DAC_Trigger value */
  tmpreg2 = sConfig->DAC_Trigger;
 8006318:	68bb      	ldr	r3, [r7, #8]
 800631a:	685b      	ldr	r3, [r3, #4]
 800631c:	613b      	str	r3, [r7, #16]
  /* Calculate CR register value depending on DAC_Channel */
  tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 800631e:	687b      	ldr	r3, [r7, #4]
 8006320:	f003 0310 	and.w	r3, r3, #16
 8006324:	693a      	ldr	r2, [r7, #16]
 8006326:	fa02 f303 	lsl.w	r3, r2, r3
 800632a:	697a      	ldr	r2, [r7, #20]
 800632c:	4313      	orrs	r3, r2
 800632e:	617b      	str	r3, [r7, #20]
  /* Write to DAC CR */
  hdac->Instance->CR = tmpreg1;
 8006330:	68fb      	ldr	r3, [r7, #12]
 8006332:	681b      	ldr	r3, [r3, #0]
 8006334:	697a      	ldr	r2, [r7, #20]
 8006336:	601a      	str	r2, [r3, #0]
  /* Disable wave generation */
  CLEAR_BIT(hdac->Instance->CR, (DAC_CR_WAVE1 << (Channel & 0x10UL)));
 8006338:	68fb      	ldr	r3, [r7, #12]
 800633a:	681b      	ldr	r3, [r3, #0]
 800633c:	6819      	ldr	r1, [r3, #0]
 800633e:	687b      	ldr	r3, [r7, #4]
 8006340:	f003 0310 	and.w	r3, r3, #16
 8006344:	22c0      	movs	r2, #192	; 0xc0
 8006346:	fa02 f303 	lsl.w	r3, r2, r3
 800634a:	43da      	mvns	r2, r3
 800634c:	68fb      	ldr	r3, [r7, #12]
 800634e:	681b      	ldr	r3, [r3, #0]
 8006350:	400a      	ands	r2, r1
 8006352:	601a      	str	r2, [r3, #0]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_READY;
 8006354:	68fb      	ldr	r3, [r7, #12]
 8006356:	2201      	movs	r2, #1
 8006358:	711a      	strb	r2, [r3, #4]

  /* Process unlocked */
  __HAL_UNLOCK(hdac);
 800635a:	68fb      	ldr	r3, [r7, #12]
 800635c:	2200      	movs	r2, #0
 800635e:	715a      	strb	r2, [r3, #5]

  /* Return function status */
  return HAL_OK;
 8006360:	2300      	movs	r3, #0
}
 8006362:	4618      	mov	r0, r3
 8006364:	3720      	adds	r7, #32
 8006366:	46bd      	mov	sp, r7
 8006368:	bd80      	pop	{r7, pc}
 800636a:	bf00      	nop
 800636c:	20008000 	.word	0x20008000

08006370 <HAL_ETH_Init>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Init(ETH_HandleTypeDef *heth)
{
 8006370:	b580      	push	{r7, lr}
 8006372:	b084      	sub	sp, #16
 8006374:	af00      	add	r7, sp, #0
 8006376:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if (heth == NULL)
 8006378:	687b      	ldr	r3, [r7, #4]
 800637a:	2b00      	cmp	r3, #0
 800637c:	d101      	bne.n	8006382 <HAL_ETH_Init+0x12>
  {
    return HAL_ERROR;
 800637e:	2301      	movs	r3, #1
 8006380:	e0cf      	b.n	8006522 <HAL_ETH_Init+0x1b2>
  }
  if (heth->gState == HAL_ETH_STATE_RESET)
 8006382:	687b      	ldr	r3, [r7, #4]
 8006384:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8006388:	2b00      	cmp	r3, #0
 800638a:	d106      	bne.n	800639a <HAL_ETH_Init+0x2a>
  {
    heth->gState = HAL_ETH_STATE_BUSY;
 800638c:	687b      	ldr	r3, [r7, #4]
 800638e:	2223      	movs	r2, #35	; 0x23
 8006390:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    /* Init the low level hardware */
    heth->MspInitCallback(heth);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC. */
    HAL_ETH_MspInit(heth);
 8006394:	6878      	ldr	r0, [r7, #4]
 8006396:	f009 f8cf 	bl	800f538 <HAL_ETH_MspInit>

#endif /* (USE_HAL_ETH_REGISTER_CALLBACKS) */
  }

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800639a:	4b64      	ldr	r3, [pc, #400]	; (800652c <HAL_ETH_Init+0x1bc>)
 800639c:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 80063a0:	4a62      	ldr	r2, [pc, #392]	; (800652c <HAL_ETH_Init+0x1bc>)
 80063a2:	f043 0302 	orr.w	r3, r3, #2
 80063a6:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 80063aa:	4b60      	ldr	r3, [pc, #384]	; (800652c <HAL_ETH_Init+0x1bc>)
 80063ac:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 80063b0:	f003 0302 	and.w	r3, r3, #2
 80063b4:	60bb      	str	r3, [r7, #8]
 80063b6:	68bb      	ldr	r3, [r7, #8]

  if (heth->Init.MediaInterface == HAL_ETH_MII_MODE)
 80063b8:	687b      	ldr	r3, [r7, #4]
 80063ba:	7a1b      	ldrb	r3, [r3, #8]
 80063bc:	2b00      	cmp	r3, #0
 80063be:	d103      	bne.n	80063c8 <HAL_ETH_Init+0x58>
  {
    HAL_SYSCFG_ETHInterfaceSelect(SYSCFG_ETH_MII);
 80063c0:	2000      	movs	r0, #0
 80063c2:	f7fd fee1 	bl	8004188 <HAL_SYSCFG_ETHInterfaceSelect>
 80063c6:	e003      	b.n	80063d0 <HAL_ETH_Init+0x60>
  }
  else
  {
    HAL_SYSCFG_ETHInterfaceSelect(SYSCFG_ETH_RMII);
 80063c8:	f44f 0000 	mov.w	r0, #8388608	; 0x800000
 80063cc:	f7fd fedc 	bl	8004188 <HAL_SYSCFG_ETHInterfaceSelect>
  }

  /* Dummy read to sync with ETH */
  (void)SYSCFG->PMCR;
 80063d0:	4b57      	ldr	r3, [pc, #348]	; (8006530 <HAL_ETH_Init+0x1c0>)
 80063d2:	685b      	ldr	r3, [r3, #4]

  /* Ethernet Software reset */
  /* Set the SWR bit: resets all MAC subsystem internal registers and logic */
  /* After reset all the registers holds their respective reset values */
  SET_BIT(heth->Instance->DMAMR, ETH_DMAMR_SWR);
 80063d4:	687b      	ldr	r3, [r7, #4]
 80063d6:	681b      	ldr	r3, [r3, #0]
 80063d8:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80063dc:	681b      	ldr	r3, [r3, #0]
 80063de:	687a      	ldr	r2, [r7, #4]
 80063e0:	6812      	ldr	r2, [r2, #0]
 80063e2:	f043 0301 	orr.w	r3, r3, #1
 80063e6:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 80063ea:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 80063ec:	f7fd fe90 	bl	8004110 <HAL_GetTick>
 80063f0:	60f8      	str	r0, [r7, #12]

  /* Wait for software reset */
  while (READ_BIT(heth->Instance->DMAMR, ETH_DMAMR_SWR) > 0U)
 80063f2:	e011      	b.n	8006418 <HAL_ETH_Init+0xa8>
  {
    if (((HAL_GetTick() - tickstart) > ETH_SWRESET_TIMEOUT))
 80063f4:	f7fd fe8c 	bl	8004110 <HAL_GetTick>
 80063f8:	4602      	mov	r2, r0
 80063fa:	68fb      	ldr	r3, [r7, #12]
 80063fc:	1ad3      	subs	r3, r2, r3
 80063fe:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 8006402:	d909      	bls.n	8006418 <HAL_ETH_Init+0xa8>
    {
      /* Set Error Code */
      heth->ErrorCode = HAL_ETH_ERROR_TIMEOUT;
 8006404:	687b      	ldr	r3, [r7, #4]
 8006406:	2204      	movs	r2, #4
 8006408:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
      /* Set State as Error */
      heth->gState = HAL_ETH_STATE_ERROR;
 800640c:	687b      	ldr	r3, [r7, #4]
 800640e:	22e0      	movs	r2, #224	; 0xe0
 8006410:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
      /* Return Error */
      return HAL_ERROR;
 8006414:	2301      	movs	r3, #1
 8006416:	e084      	b.n	8006522 <HAL_ETH_Init+0x1b2>
  while (READ_BIT(heth->Instance->DMAMR, ETH_DMAMR_SWR) > 0U)
 8006418:	687b      	ldr	r3, [r7, #4]
 800641a:	681b      	ldr	r3, [r3, #0]
 800641c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8006420:	681b      	ldr	r3, [r3, #0]
 8006422:	f003 0301 	and.w	r3, r3, #1
 8006426:	2b00      	cmp	r3, #0
 8006428:	d1e4      	bne.n	80063f4 <HAL_ETH_Init+0x84>
    }
  }

  /*------------------ MDIO CSR Clock Range Configuration --------------------*/
  HAL_ETH_SetMDIOClockRange(heth);
 800642a:	6878      	ldr	r0, [r7, #4]
 800642c:	f000 fcd4 	bl	8006dd8 <HAL_ETH_SetMDIOClockRange>

  /*------------------ MAC LPI 1US Tic Counter Configuration --------------------*/
  WRITE_REG(heth->Instance->MAC1USTCR, (((uint32_t)HAL_RCC_GetHCLKFreq() / ETH_MAC_US_TICK) - 1U));
 8006430:	f004 fba4 	bl	800ab7c <HAL_RCC_GetHCLKFreq>
 8006434:	4603      	mov	r3, r0
 8006436:	4a3f      	ldr	r2, [pc, #252]	; (8006534 <HAL_ETH_Init+0x1c4>)
 8006438:	fba2 2303 	umull	r2, r3, r2, r3
 800643c:	0c9a      	lsrs	r2, r3, #18
 800643e:	687b      	ldr	r3, [r7, #4]
 8006440:	681b      	ldr	r3, [r3, #0]
 8006442:	3a01      	subs	r2, #1
 8006444:	f8c3 20dc 	str.w	r2, [r3, #220]	; 0xdc

  /*------------------ MAC, MTL and DMA default Configuration ----------------*/
  ETH_MACDMAConfig(heth);
 8006448:	6878      	ldr	r0, [r7, #4]
 800644a:	f000 febf 	bl	80071cc <ETH_MACDMAConfig>

  /* SET DSL to 64 bit */
  MODIFY_REG(heth->Instance->DMACCR, ETH_DMACCR_DSL, ETH_DMACCR_DSL_64BIT);
 800644e:	687b      	ldr	r3, [r7, #4]
 8006450:	681b      	ldr	r3, [r3, #0]
 8006452:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8006456:	f8d3 3100 	ldr.w	r3, [r3, #256]	; 0x100
 800645a:	f423 13e0 	bic.w	r3, r3, #1835008	; 0x1c0000
 800645e:	687a      	ldr	r2, [r7, #4]
 8006460:	6812      	ldr	r2, [r2, #0]
 8006462:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8006466:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 800646a:	f8c2 3100 	str.w	r3, [r2, #256]	; 0x100

  /* Set Receive Buffers Length (must be a multiple of 4) */
  if ((heth->Init.RxBuffLen % 0x4U) != 0x0U)
 800646e:	687b      	ldr	r3, [r7, #4]
 8006470:	695b      	ldr	r3, [r3, #20]
 8006472:	f003 0303 	and.w	r3, r3, #3
 8006476:	2b00      	cmp	r3, #0
 8006478:	d009      	beq.n	800648e <HAL_ETH_Init+0x11e>
  {
    /* Set Error Code */
    heth->ErrorCode = HAL_ETH_ERROR_PARAM;
 800647a:	687b      	ldr	r3, [r7, #4]
 800647c:	2201      	movs	r2, #1
 800647e:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
    /* Set State as Error */
    heth->gState = HAL_ETH_STATE_ERROR;
 8006482:	687b      	ldr	r3, [r7, #4]
 8006484:	22e0      	movs	r2, #224	; 0xe0
 8006486:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    /* Return Error */
    return HAL_ERROR;
 800648a:	2301      	movs	r3, #1
 800648c:	e049      	b.n	8006522 <HAL_ETH_Init+0x1b2>
  }
  else
  {
    MODIFY_REG(heth->Instance->DMACRCR, ETH_DMACRCR_RBSZ, ((heth->Init.RxBuffLen) << 1));
 800648e:	687b      	ldr	r3, [r7, #4]
 8006490:	681b      	ldr	r3, [r3, #0]
 8006492:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8006496:	f8d3 2108 	ldr.w	r2, [r3, #264]	; 0x108
 800649a:	4b27      	ldr	r3, [pc, #156]	; (8006538 <HAL_ETH_Init+0x1c8>)
 800649c:	4013      	ands	r3, r2
 800649e:	687a      	ldr	r2, [r7, #4]
 80064a0:	6952      	ldr	r2, [r2, #20]
 80064a2:	0051      	lsls	r1, r2, #1
 80064a4:	687a      	ldr	r2, [r7, #4]
 80064a6:	6812      	ldr	r2, [r2, #0]
 80064a8:	430b      	orrs	r3, r1
 80064aa:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 80064ae:	f8c2 3108 	str.w	r3, [r2, #264]	; 0x108
  }

  /*------------------ DMA Tx Descriptors Configuration ----------------------*/
  ETH_DMATxDescListInit(heth);
 80064b2:	6878      	ldr	r0, [r7, #4]
 80064b4:	f000 ff27 	bl	8007306 <ETH_DMATxDescListInit>

  /*------------------ DMA Rx Descriptors Configuration ----------------------*/
  ETH_DMARxDescListInit(heth);
 80064b8:	6878      	ldr	r0, [r7, #4]
 80064ba:	f000 ff6d 	bl	8007398 <ETH_DMARxDescListInit>

  /*--------------------- ETHERNET MAC Address Configuration ------------------*/
  /* Set MAC addr bits 32 to 47 */
  heth->Instance->MACA0HR = (((uint32_t)(heth->Init.MACAddr[5]) << 8) | (uint32_t)heth->Init.MACAddr[4]);
 80064be:	687b      	ldr	r3, [r7, #4]
 80064c0:	685b      	ldr	r3, [r3, #4]
 80064c2:	3305      	adds	r3, #5
 80064c4:	781b      	ldrb	r3, [r3, #0]
 80064c6:	021a      	lsls	r2, r3, #8
 80064c8:	687b      	ldr	r3, [r7, #4]
 80064ca:	685b      	ldr	r3, [r3, #4]
 80064cc:	3304      	adds	r3, #4
 80064ce:	781b      	ldrb	r3, [r3, #0]
 80064d0:	4619      	mov	r1, r3
 80064d2:	687b      	ldr	r3, [r7, #4]
 80064d4:	681b      	ldr	r3, [r3, #0]
 80064d6:	430a      	orrs	r2, r1
 80064d8:	f8c3 2300 	str.w	r2, [r3, #768]	; 0x300
  /* Set MAC addr bits 0 to 31 */
  heth->Instance->MACA0LR = (((uint32_t)(heth->Init.MACAddr[3]) << 24) | ((uint32_t)(heth->Init.MACAddr[2]) << 16) |
 80064dc:	687b      	ldr	r3, [r7, #4]
 80064de:	685b      	ldr	r3, [r3, #4]
 80064e0:	3303      	adds	r3, #3
 80064e2:	781b      	ldrb	r3, [r3, #0]
 80064e4:	061a      	lsls	r2, r3, #24
 80064e6:	687b      	ldr	r3, [r7, #4]
 80064e8:	685b      	ldr	r3, [r3, #4]
 80064ea:	3302      	adds	r3, #2
 80064ec:	781b      	ldrb	r3, [r3, #0]
 80064ee:	041b      	lsls	r3, r3, #16
 80064f0:	431a      	orrs	r2, r3
                             ((uint32_t)(heth->Init.MACAddr[1]) << 8) | (uint32_t)heth->Init.MACAddr[0]);
 80064f2:	687b      	ldr	r3, [r7, #4]
 80064f4:	685b      	ldr	r3, [r3, #4]
 80064f6:	3301      	adds	r3, #1
 80064f8:	781b      	ldrb	r3, [r3, #0]
 80064fa:	021b      	lsls	r3, r3, #8
  heth->Instance->MACA0LR = (((uint32_t)(heth->Init.MACAddr[3]) << 24) | ((uint32_t)(heth->Init.MACAddr[2]) << 16) |
 80064fc:	431a      	orrs	r2, r3
                             ((uint32_t)(heth->Init.MACAddr[1]) << 8) | (uint32_t)heth->Init.MACAddr[0]);
 80064fe:	687b      	ldr	r3, [r7, #4]
 8006500:	685b      	ldr	r3, [r3, #4]
 8006502:	781b      	ldrb	r3, [r3, #0]
 8006504:	4619      	mov	r1, r3
  heth->Instance->MACA0LR = (((uint32_t)(heth->Init.MACAddr[3]) << 24) | ((uint32_t)(heth->Init.MACAddr[2]) << 16) |
 8006506:	687b      	ldr	r3, [r7, #4]
 8006508:	681b      	ldr	r3, [r3, #0]
                             ((uint32_t)(heth->Init.MACAddr[1]) << 8) | (uint32_t)heth->Init.MACAddr[0]);
 800650a:	430a      	orrs	r2, r1
  heth->Instance->MACA0LR = (((uint32_t)(heth->Init.MACAddr[3]) << 24) | ((uint32_t)(heth->Init.MACAddr[2]) << 16) |
 800650c:	f8c3 2304 	str.w	r2, [r3, #772]	; 0x304

  heth->ErrorCode = HAL_ETH_ERROR_NONE;
 8006510:	687b      	ldr	r3, [r7, #4]
 8006512:	2200      	movs	r2, #0
 8006514:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  heth->gState = HAL_ETH_STATE_READY;
 8006518:	687b      	ldr	r3, [r7, #4]
 800651a:	2210      	movs	r2, #16
 800651c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 8006520:	2300      	movs	r3, #0
}
 8006522:	4618      	mov	r0, r3
 8006524:	3710      	adds	r7, #16
 8006526:	46bd      	mov	sp, r7
 8006528:	bd80      	pop	{r7, pc}
 800652a:	bf00      	nop
 800652c:	58024400 	.word	0x58024400
 8006530:	58000400 	.word	0x58000400
 8006534:	431bde83 	.word	0x431bde83
 8006538:	ffff8001 	.word	0xffff8001

0800653c <HAL_ETH_Start>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Start(ETH_HandleTypeDef *heth)
{
 800653c:	b580      	push	{r7, lr}
 800653e:	b082      	sub	sp, #8
 8006540:	af00      	add	r7, sp, #0
 8006542:	6078      	str	r0, [r7, #4]
  if (heth->gState == HAL_ETH_STATE_READY)
 8006544:	687b      	ldr	r3, [r7, #4]
 8006546:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800654a:	2b10      	cmp	r3, #16
 800654c:	d153      	bne.n	80065f6 <HAL_ETH_Start+0xba>
  {
    heth->gState = HAL_ETH_STATE_BUSY;
 800654e:	687b      	ldr	r3, [r7, #4]
 8006550:	2223      	movs	r2, #35	; 0x23
 8006552:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    /* Set nombre of descriptors to build */
    heth->RxDescList.RxBuildDescCnt = ETH_RX_DESC_CNT;
 8006556:	687b      	ldr	r3, [r7, #4]
 8006558:	2204      	movs	r2, #4
 800655a:	66da      	str	r2, [r3, #108]	; 0x6c

    /* Build all descriptors */
    ETH_UpdateDescriptor(heth);
 800655c:	6878      	ldr	r0, [r7, #4]
 800655e:	f000 f936 	bl	80067ce <ETH_UpdateDescriptor>

    /* Enable the MAC transmission */
    SET_BIT(heth->Instance->MACCR, ETH_MACCR_TE);
 8006562:	687b      	ldr	r3, [r7, #4]
 8006564:	681b      	ldr	r3, [r3, #0]
 8006566:	681a      	ldr	r2, [r3, #0]
 8006568:	687b      	ldr	r3, [r7, #4]
 800656a:	681b      	ldr	r3, [r3, #0]
 800656c:	f042 0202 	orr.w	r2, r2, #2
 8006570:	601a      	str	r2, [r3, #0]

    /* Enable the MAC reception */
    SET_BIT(heth->Instance->MACCR, ETH_MACCR_RE);
 8006572:	687b      	ldr	r3, [r7, #4]
 8006574:	681b      	ldr	r3, [r3, #0]
 8006576:	681a      	ldr	r2, [r3, #0]
 8006578:	687b      	ldr	r3, [r7, #4]
 800657a:	681b      	ldr	r3, [r3, #0]
 800657c:	f042 0201 	orr.w	r2, r2, #1
 8006580:	601a      	str	r2, [r3, #0]

    /* Set the Flush Transmit FIFO bit */
    SET_BIT(heth->Instance->MTLTQOMR, ETH_MTLTQOMR_FTQ);
 8006582:	687b      	ldr	r3, [r7, #4]
 8006584:	681b      	ldr	r3, [r3, #0]
 8006586:	f8d3 2d00 	ldr.w	r2, [r3, #3328]	; 0xd00
 800658a:	687b      	ldr	r3, [r7, #4]
 800658c:	681b      	ldr	r3, [r3, #0]
 800658e:	f042 0201 	orr.w	r2, r2, #1
 8006592:	f8c3 2d00 	str.w	r2, [r3, #3328]	; 0xd00

    /* Enable the DMA transmission */
    SET_BIT(heth->Instance->DMACTCR, ETH_DMACTCR_ST);
 8006596:	687b      	ldr	r3, [r7, #4]
 8006598:	681b      	ldr	r3, [r3, #0]
 800659a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800659e:	f8d3 3104 	ldr.w	r3, [r3, #260]	; 0x104
 80065a2:	687a      	ldr	r2, [r7, #4]
 80065a4:	6812      	ldr	r2, [r2, #0]
 80065a6:	f043 0301 	orr.w	r3, r3, #1
 80065aa:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 80065ae:	f8c2 3104 	str.w	r3, [r2, #260]	; 0x104

    /* Enable the DMA reception */
    SET_BIT(heth->Instance->DMACRCR, ETH_DMACRCR_SR);
 80065b2:	687b      	ldr	r3, [r7, #4]
 80065b4:	681b      	ldr	r3, [r3, #0]
 80065b6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80065ba:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 80065be:	687a      	ldr	r2, [r7, #4]
 80065c0:	6812      	ldr	r2, [r2, #0]
 80065c2:	f043 0301 	orr.w	r3, r3, #1
 80065c6:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 80065ca:	f8c2 3108 	str.w	r3, [r2, #264]	; 0x108

    /* Clear Tx and Rx process stopped flags */
    heth->Instance->DMACSR |= (ETH_DMACSR_TPS | ETH_DMACSR_RPS);
 80065ce:	687b      	ldr	r3, [r7, #4]
 80065d0:	681b      	ldr	r3, [r3, #0]
 80065d2:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80065d6:	f8d3 3160 	ldr.w	r3, [r3, #352]	; 0x160
 80065da:	687a      	ldr	r2, [r7, #4]
 80065dc:	6812      	ldr	r2, [r2, #0]
 80065de:	f443 7381 	orr.w	r3, r3, #258	; 0x102
 80065e2:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 80065e6:	f8c2 3160 	str.w	r3, [r2, #352]	; 0x160

    heth->gState = HAL_ETH_STATE_STARTED;
 80065ea:	687b      	ldr	r3, [r7, #4]
 80065ec:	2223      	movs	r2, #35	; 0x23
 80065ee:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    return HAL_OK;
 80065f2:	2300      	movs	r3, #0
 80065f4:	e000      	b.n	80065f8 <HAL_ETH_Start+0xbc>
  }
  else
  {
    return HAL_ERROR;
 80065f6:	2301      	movs	r3, #1
  }
}
 80065f8:	4618      	mov	r0, r3
 80065fa:	3708      	adds	r7, #8
 80065fc:	46bd      	mov	sp, r7
 80065fe:	bd80      	pop	{r7, pc}

08006600 <HAL_ETH_Stop>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Stop(ETH_HandleTypeDef *heth)
{
 8006600:	b480      	push	{r7}
 8006602:	b083      	sub	sp, #12
 8006604:	af00      	add	r7, sp, #0
 8006606:	6078      	str	r0, [r7, #4]
  if (heth->gState == HAL_ETH_STATE_STARTED)
 8006608:	687b      	ldr	r3, [r7, #4]
 800660a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800660e:	2b23      	cmp	r3, #35	; 0x23
 8006610:	d13f      	bne.n	8006692 <HAL_ETH_Stop+0x92>
  {
    /* Set the ETH peripheral state to BUSY */
    heth->gState = HAL_ETH_STATE_BUSY;
 8006612:	687b      	ldr	r3, [r7, #4]
 8006614:	2223      	movs	r2, #35	; 0x23
 8006616:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    /* Disable the DMA transmission */
    CLEAR_BIT(heth->Instance->DMACTCR, ETH_DMACTCR_ST);
 800661a:	687b      	ldr	r3, [r7, #4]
 800661c:	681b      	ldr	r3, [r3, #0]
 800661e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8006622:	f8d3 3104 	ldr.w	r3, [r3, #260]	; 0x104
 8006626:	687a      	ldr	r2, [r7, #4]
 8006628:	6812      	ldr	r2, [r2, #0]
 800662a:	f023 0301 	bic.w	r3, r3, #1
 800662e:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8006632:	f8c2 3104 	str.w	r3, [r2, #260]	; 0x104

    /* Disable the DMA reception */
    CLEAR_BIT(heth->Instance->DMACRCR, ETH_DMACRCR_SR);
 8006636:	687b      	ldr	r3, [r7, #4]
 8006638:	681b      	ldr	r3, [r3, #0]
 800663a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800663e:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 8006642:	687a      	ldr	r2, [r7, #4]
 8006644:	6812      	ldr	r2, [r2, #0]
 8006646:	f023 0301 	bic.w	r3, r3, #1
 800664a:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 800664e:	f8c2 3108 	str.w	r3, [r2, #264]	; 0x108

    /* Disable the MAC reception */
    CLEAR_BIT(heth->Instance->MACCR, ETH_MACCR_RE);
 8006652:	687b      	ldr	r3, [r7, #4]
 8006654:	681b      	ldr	r3, [r3, #0]
 8006656:	681a      	ldr	r2, [r3, #0]
 8006658:	687b      	ldr	r3, [r7, #4]
 800665a:	681b      	ldr	r3, [r3, #0]
 800665c:	f022 0201 	bic.w	r2, r2, #1
 8006660:	601a      	str	r2, [r3, #0]

    /* Set the Flush Transmit FIFO bit */
    SET_BIT(heth->Instance->MTLTQOMR, ETH_MTLTQOMR_FTQ);
 8006662:	687b      	ldr	r3, [r7, #4]
 8006664:	681b      	ldr	r3, [r3, #0]
 8006666:	f8d3 2d00 	ldr.w	r2, [r3, #3328]	; 0xd00
 800666a:	687b      	ldr	r3, [r7, #4]
 800666c:	681b      	ldr	r3, [r3, #0]
 800666e:	f042 0201 	orr.w	r2, r2, #1
 8006672:	f8c3 2d00 	str.w	r2, [r3, #3328]	; 0xd00

    /* Disable the MAC transmission */
    CLEAR_BIT(heth->Instance->MACCR, ETH_MACCR_TE);
 8006676:	687b      	ldr	r3, [r7, #4]
 8006678:	681b      	ldr	r3, [r3, #0]
 800667a:	681a      	ldr	r2, [r3, #0]
 800667c:	687b      	ldr	r3, [r7, #4]
 800667e:	681b      	ldr	r3, [r3, #0]
 8006680:	f022 0202 	bic.w	r2, r2, #2
 8006684:	601a      	str	r2, [r3, #0]

    heth->gState = HAL_ETH_STATE_READY;
 8006686:	687b      	ldr	r3, [r7, #4]
 8006688:	2210      	movs	r2, #16
 800668a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    /* Return function status */
    return HAL_OK;
 800668e:	2300      	movs	r3, #0
 8006690:	e000      	b.n	8006694 <HAL_ETH_Stop+0x94>
  }
  else
  {
    return HAL_ERROR;
 8006692:	2301      	movs	r3, #1
  }
}
 8006694:	4618      	mov	r0, r3
 8006696:	370c      	adds	r7, #12
 8006698:	46bd      	mov	sp, r7
 800669a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800669e:	4770      	bx	lr

080066a0 <HAL_ETH_Transmit>:
  * @param  pTxConfig: Hold the configuration of packet to be transmitted
  * @param  Timeout: timeout value
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Transmit(ETH_HandleTypeDef *heth, ETH_TxPacketConfig *pTxConfig, uint32_t Timeout)
{
 80066a0:	b580      	push	{r7, lr}
 80066a2:	b086      	sub	sp, #24
 80066a4:	af00      	add	r7, sp, #0
 80066a6:	60f8      	str	r0, [r7, #12]
 80066a8:	60b9      	str	r1, [r7, #8]
 80066aa:	607a      	str	r2, [r7, #4]
  uint32_t tickstart;
  ETH_DMADescTypeDef *dmatxdesc;

  if (pTxConfig == NULL)
 80066ac:	68bb      	ldr	r3, [r7, #8]
 80066ae:	2b00      	cmp	r3, #0
 80066b0:	d109      	bne.n	80066c6 <HAL_ETH_Transmit+0x26>
  {
    heth->ErrorCode |= HAL_ETH_ERROR_PARAM;
 80066b2:	68fb      	ldr	r3, [r7, #12]
 80066b4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80066b8:	f043 0201 	orr.w	r2, r3, #1
 80066bc:	68fb      	ldr	r3, [r7, #12]
 80066be:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
    return HAL_ERROR;
 80066c2:	2301      	movs	r3, #1
 80066c4:	e07f      	b.n	80067c6 <HAL_ETH_Transmit+0x126>
  }

  if (heth->gState == HAL_ETH_STATE_STARTED)
 80066c6:	68fb      	ldr	r3, [r7, #12]
 80066c8:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80066cc:	2b23      	cmp	r3, #35	; 0x23
 80066ce:	d179      	bne.n	80067c4 <HAL_ETH_Transmit+0x124>
  {
    /* Config DMA Tx descriptor by Tx Packet info */
    if (ETH_Prepare_Tx_Descriptors(heth, pTxConfig, 0) != HAL_ETH_ERROR_NONE)
 80066d0:	2200      	movs	r2, #0
 80066d2:	68b9      	ldr	r1, [r7, #8]
 80066d4:	68f8      	ldr	r0, [r7, #12]
 80066d6:	f000 febd 	bl	8007454 <ETH_Prepare_Tx_Descriptors>
 80066da:	4603      	mov	r3, r0
 80066dc:	2b00      	cmp	r3, #0
 80066de:	d009      	beq.n	80066f4 <HAL_ETH_Transmit+0x54>
    {
      /* Set the ETH error code */
      heth->ErrorCode |= HAL_ETH_ERROR_BUSY;
 80066e0:	68fb      	ldr	r3, [r7, #12]
 80066e2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80066e6:	f043 0202 	orr.w	r2, r3, #2
 80066ea:	68fb      	ldr	r3, [r7, #12]
 80066ec:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
      return HAL_ERROR;
 80066f0:	2301      	movs	r3, #1
 80066f2:	e068      	b.n	80067c6 <HAL_ETH_Transmit+0x126>
  __ASM volatile ("dsb 0xF":::"memory");
 80066f4:	f3bf 8f4f 	dsb	sy
}
 80066f8:	bf00      	nop
    }

    /* Ensure completion of descriptor preparation before transmission start */
    __DSB();

    dmatxdesc = (ETH_DMADescTypeDef *)(&heth->TxDescList)->TxDesc[heth->TxDescList.CurTxDesc];
 80066fa:	68fb      	ldr	r3, [r7, #12]
 80066fc:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80066fe:	68fb      	ldr	r3, [r7, #12]
 8006700:	3206      	adds	r2, #6
 8006702:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006706:	617b      	str	r3, [r7, #20]

    /* Incr current tx desc index */
    INCR_TX_DESC_INDEX(heth->TxDescList.CurTxDesc, 1U);
 8006708:	68fb      	ldr	r3, [r7, #12]
 800670a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800670c:	1c5a      	adds	r2, r3, #1
 800670e:	68fb      	ldr	r3, [r7, #12]
 8006710:	629a      	str	r2, [r3, #40]	; 0x28
 8006712:	68fb      	ldr	r3, [r7, #12]
 8006714:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006716:	2b03      	cmp	r3, #3
 8006718:	d904      	bls.n	8006724 <HAL_ETH_Transmit+0x84>
 800671a:	68fb      	ldr	r3, [r7, #12]
 800671c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800671e:	1f1a      	subs	r2, r3, #4
 8006720:	68fb      	ldr	r3, [r7, #12]
 8006722:	629a      	str	r2, [r3, #40]	; 0x28

    /* Start transmission */
    /* issue a poll command to Tx DMA by writing address of next immediate free descriptor */
    WRITE_REG(heth->Instance->DMACTDTPR, (uint32_t)(heth->TxDescList.TxDesc[heth->TxDescList.CurTxDesc]));
 8006724:	68fb      	ldr	r3, [r7, #12]
 8006726:	6a99      	ldr	r1, [r3, #40]	; 0x28
 8006728:	68fb      	ldr	r3, [r7, #12]
 800672a:	681a      	ldr	r2, [r3, #0]
 800672c:	68fb      	ldr	r3, [r7, #12]
 800672e:	3106      	adds	r1, #6
 8006730:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8006734:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8006738:	f8c2 3120 	str.w	r3, [r2, #288]	; 0x120

    tickstart = HAL_GetTick();
 800673c:	f7fd fce8 	bl	8004110 <HAL_GetTick>
 8006740:	6138      	str	r0, [r7, #16]

    /* Wait for data to be transmitted or timeout occurred */
    while ((dmatxdesc->DESC3 & ETH_DMATXNDESCWBF_OWN) != (uint32_t)RESET)
 8006742:	e039      	b.n	80067b8 <HAL_ETH_Transmit+0x118>
    {
      if ((heth->Instance->DMACSR & ETH_DMACSR_FBE) != (uint32_t)RESET)
 8006744:	68fb      	ldr	r3, [r7, #12]
 8006746:	681b      	ldr	r3, [r3, #0]
 8006748:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800674c:	f8d3 3160 	ldr.w	r3, [r3, #352]	; 0x160
 8006750:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8006754:	2b00      	cmp	r3, #0
 8006756:	d012      	beq.n	800677e <HAL_ETH_Transmit+0xde>
      {
        heth->ErrorCode |= HAL_ETH_ERROR_DMA;
 8006758:	68fb      	ldr	r3, [r7, #12]
 800675a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800675e:	f043 0208 	orr.w	r2, r3, #8
 8006762:	68fb      	ldr	r3, [r7, #12]
 8006764:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
        heth->DMAErrorCode = heth->Instance->DMACSR;
 8006768:	68fb      	ldr	r3, [r7, #12]
 800676a:	681b      	ldr	r3, [r3, #0]
 800676c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8006770:	f8d3 2160 	ldr.w	r2, [r3, #352]	; 0x160
 8006774:	68fb      	ldr	r3, [r7, #12]
 8006776:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        /* Return function status */
        return HAL_ERROR;
 800677a:	2301      	movs	r3, #1
 800677c:	e023      	b.n	80067c6 <HAL_ETH_Transmit+0x126>
      }

      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 800677e:	687b      	ldr	r3, [r7, #4]
 8006780:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006784:	d018      	beq.n	80067b8 <HAL_ETH_Transmit+0x118>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8006786:	f7fd fcc3 	bl	8004110 <HAL_GetTick>
 800678a:	4602      	mov	r2, r0
 800678c:	693b      	ldr	r3, [r7, #16]
 800678e:	1ad3      	subs	r3, r2, r3
 8006790:	687a      	ldr	r2, [r7, #4]
 8006792:	429a      	cmp	r2, r3
 8006794:	d302      	bcc.n	800679c <HAL_ETH_Transmit+0xfc>
 8006796:	687b      	ldr	r3, [r7, #4]
 8006798:	2b00      	cmp	r3, #0
 800679a:	d10d      	bne.n	80067b8 <HAL_ETH_Transmit+0x118>
        {
          heth->ErrorCode |= HAL_ETH_ERROR_TIMEOUT;
 800679c:	68fb      	ldr	r3, [r7, #12]
 800679e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80067a2:	f043 0204 	orr.w	r2, r3, #4
 80067a6:	68fb      	ldr	r3, [r7, #12]
 80067a8:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
          /* Clear TX descriptor so that we can proceed */
          dmatxdesc->DESC3 = (ETH_DMATXNDESCWBF_FD | ETH_DMATXNDESCWBF_LD);
 80067ac:	697b      	ldr	r3, [r7, #20]
 80067ae:	f04f 5240 	mov.w	r2, #805306368	; 0x30000000
 80067b2:	60da      	str	r2, [r3, #12]
          return HAL_ERROR;
 80067b4:	2301      	movs	r3, #1
 80067b6:	e006      	b.n	80067c6 <HAL_ETH_Transmit+0x126>
    while ((dmatxdesc->DESC3 & ETH_DMATXNDESCWBF_OWN) != (uint32_t)RESET)
 80067b8:	697b      	ldr	r3, [r7, #20]
 80067ba:	68db      	ldr	r3, [r3, #12]
 80067bc:	2b00      	cmp	r3, #0
 80067be:	dbc1      	blt.n	8006744 <HAL_ETH_Transmit+0xa4>
        }
      }
    }

    /* Return function status */
    return HAL_OK;
 80067c0:	2300      	movs	r3, #0
 80067c2:	e000      	b.n	80067c6 <HAL_ETH_Transmit+0x126>
  }
  else
  {
    return HAL_ERROR;
 80067c4:	2301      	movs	r3, #1
  }
}
 80067c6:	4618      	mov	r0, r3
 80067c8:	3718      	adds	r7, #24
 80067ca:	46bd      	mov	sp, r7
 80067cc:	bd80      	pop	{r7, pc}

080067ce <ETH_UpdateDescriptor>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
static void ETH_UpdateDescriptor(ETH_HandleTypeDef *heth)
{
 80067ce:	b580      	push	{r7, lr}
 80067d0:	b088      	sub	sp, #32
 80067d2:	af00      	add	r7, sp, #0
 80067d4:	6078      	str	r0, [r7, #4]
  uint32_t descidx;
  uint32_t desccount;
  ETH_DMADescTypeDef *dmarxdesc;
  uint8_t *buff = NULL;
 80067d6:	2300      	movs	r3, #0
 80067d8:	60fb      	str	r3, [r7, #12]
  uint8_t allocStatus = 1U;
 80067da:	2301      	movs	r3, #1
 80067dc:	74fb      	strb	r3, [r7, #19]

  descidx = heth->RxDescList.RxBuildDescIdx;
 80067de:	687b      	ldr	r3, [r7, #4]
 80067e0:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80067e2:	61fb      	str	r3, [r7, #28]
  dmarxdesc = (ETH_DMADescTypeDef *)heth->RxDescList.RxDesc[descidx];
 80067e4:	687b      	ldr	r3, [r7, #4]
 80067e6:	69fa      	ldr	r2, [r7, #28]
 80067e8:	3212      	adds	r2, #18
 80067ea:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80067ee:	617b      	str	r3, [r7, #20]
  desccount = heth->RxDescList.RxBuildDescCnt;
 80067f0:	687b      	ldr	r3, [r7, #4]
 80067f2:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80067f4:	61bb      	str	r3, [r7, #24]

  while ((desccount > 0U) && (allocStatus != 0U))
 80067f6:	e03b      	b.n	8006870 <ETH_UpdateDescriptor+0xa2>
  {
    /* Check if a buffer's attached the descriptor */
    if (READ_REG(dmarxdesc->BackupAddr0) == 0U)
 80067f8:	697b      	ldr	r3, [r7, #20]
 80067fa:	691b      	ldr	r3, [r3, #16]
 80067fc:	2b00      	cmp	r3, #0
 80067fe:	d112      	bne.n	8006826 <ETH_UpdateDescriptor+0x58>
#if (USE_HAL_ETH_REGISTER_CALLBACKS == 1)
      /*Call registered Allocate callback*/
      heth->rxAllocateCallback(&buff);
#else
      /* Allocate callback */
      HAL_ETH_RxAllocateCallback(&buff);
 8006800:	f107 030c 	add.w	r3, r7, #12
 8006804:	4618      	mov	r0, r3
 8006806:	f009 f83f 	bl	800f888 <HAL_ETH_RxAllocateCallback>
#endif  /* USE_HAL_ETH_REGISTER_CALLBACKS */
      if (buff == NULL)
 800680a:	68fb      	ldr	r3, [r7, #12]
 800680c:	2b00      	cmp	r3, #0
 800680e:	d102      	bne.n	8006816 <ETH_UpdateDescriptor+0x48>
      {
        allocStatus = 0U;
 8006810:	2300      	movs	r3, #0
 8006812:	74fb      	strb	r3, [r7, #19]
 8006814:	e007      	b.n	8006826 <ETH_UpdateDescriptor+0x58>
      }
      else
      {
        WRITE_REG(dmarxdesc->BackupAddr0, (uint32_t)buff);
 8006816:	68fb      	ldr	r3, [r7, #12]
 8006818:	461a      	mov	r2, r3
 800681a:	697b      	ldr	r3, [r7, #20]
 800681c:	611a      	str	r2, [r3, #16]
        WRITE_REG(dmarxdesc->DESC0, (uint32_t)buff);
 800681e:	68fb      	ldr	r3, [r7, #12]
 8006820:	461a      	mov	r2, r3
 8006822:	697b      	ldr	r3, [r7, #20]
 8006824:	601a      	str	r2, [r3, #0]
      }
    }

    if (allocStatus != 0U)
 8006826:	7cfb      	ldrb	r3, [r7, #19]
 8006828:	2b00      	cmp	r3, #0
 800682a:	d021      	beq.n	8006870 <ETH_UpdateDescriptor+0xa2>
  __ASM volatile ("dmb 0xF":::"memory");
 800682c:	f3bf 8f5f 	dmb	sy
}
 8006830:	bf00      	nop
    {
      /* Ensure rest of descriptor is written to RAM before the OWN bit */
      __DMB();

      if (heth->RxDescList.ItMode != 0U)
 8006832:	687b      	ldr	r3, [r7, #4]
 8006834:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006836:	2b00      	cmp	r3, #0
 8006838:	d004      	beq.n	8006844 <ETH_UpdateDescriptor+0x76>
      {
        WRITE_REG(dmarxdesc->DESC3, ETH_DMARXNDESCRF_OWN | ETH_DMARXNDESCRF_BUF1V | ETH_DMARXNDESCRF_IOC);
 800683a:	697b      	ldr	r3, [r7, #20]
 800683c:	f04f 4241 	mov.w	r2, #3238002688	; 0xc1000000
 8006840:	60da      	str	r2, [r3, #12]
 8006842:	e003      	b.n	800684c <ETH_UpdateDescriptor+0x7e>
      }
      else
      {
        WRITE_REG(dmarxdesc->DESC3, ETH_DMARXNDESCRF_OWN | ETH_DMARXNDESCRF_BUF1V);
 8006844:	697b      	ldr	r3, [r7, #20]
 8006846:	f04f 4201 	mov.w	r2, #2164260864	; 0x81000000
 800684a:	60da      	str	r2, [r3, #12]
      }

      /* Increment current rx descriptor index */
      INCR_RX_DESC_INDEX(descidx, 1U);
 800684c:	69fb      	ldr	r3, [r7, #28]
 800684e:	3301      	adds	r3, #1
 8006850:	61fb      	str	r3, [r7, #28]
 8006852:	69fb      	ldr	r3, [r7, #28]
 8006854:	2b03      	cmp	r3, #3
 8006856:	d902      	bls.n	800685e <ETH_UpdateDescriptor+0x90>
 8006858:	69fb      	ldr	r3, [r7, #28]
 800685a:	3b04      	subs	r3, #4
 800685c:	61fb      	str	r3, [r7, #28]
      /* Get current descriptor address */
      dmarxdesc = (ETH_DMADescTypeDef *)heth->RxDescList.RxDesc[descidx];
 800685e:	687b      	ldr	r3, [r7, #4]
 8006860:	69fa      	ldr	r2, [r7, #28]
 8006862:	3212      	adds	r2, #18
 8006864:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006868:	617b      	str	r3, [r7, #20]
      desccount--;
 800686a:	69bb      	ldr	r3, [r7, #24]
 800686c:	3b01      	subs	r3, #1
 800686e:	61bb      	str	r3, [r7, #24]
  while ((desccount > 0U) && (allocStatus != 0U))
 8006870:	69bb      	ldr	r3, [r7, #24]
 8006872:	2b00      	cmp	r3, #0
 8006874:	d002      	beq.n	800687c <ETH_UpdateDescriptor+0xae>
 8006876:	7cfb      	ldrb	r3, [r7, #19]
 8006878:	2b00      	cmp	r3, #0
 800687a:	d1bd      	bne.n	80067f8 <ETH_UpdateDescriptor+0x2a>
    }
  }

  if (heth->RxDescList.RxBuildDescCnt != desccount)
 800687c:	687b      	ldr	r3, [r7, #4]
 800687e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8006880:	69ba      	ldr	r2, [r7, #24]
 8006882:	429a      	cmp	r2, r3
 8006884:	d00d      	beq.n	80068a2 <ETH_UpdateDescriptor+0xd4>
  {
    /* Set the Tail pointer address */
    WRITE_REG(heth->Instance->DMACRDTPR, 0);
 8006886:	687b      	ldr	r3, [r7, #4]
 8006888:	681b      	ldr	r3, [r3, #0]
 800688a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800688e:	461a      	mov	r2, r3
 8006890:	2300      	movs	r3, #0
 8006892:	f8c2 3128 	str.w	r3, [r2, #296]	; 0x128

    heth->RxDescList.RxBuildDescIdx = descidx;
 8006896:	687b      	ldr	r3, [r7, #4]
 8006898:	69fa      	ldr	r2, [r7, #28]
 800689a:	669a      	str	r2, [r3, #104]	; 0x68
    heth->RxDescList.RxBuildDescCnt = desccount;
 800689c:	687b      	ldr	r3, [r7, #4]
 800689e:	69ba      	ldr	r2, [r7, #24]
 80068a0:	66da      	str	r2, [r3, #108]	; 0x6c
  }
}
 80068a2:	bf00      	nop
 80068a4:	3720      	adds	r7, #32
 80068a6:	46bd      	mov	sp, r7
 80068a8:	bd80      	pop	{r7, pc}

080068aa <HAL_ETH_ReadPHYRegister>:
  * @param pRegValue: parameter to hold read value
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_ReadPHYRegister(ETH_HandleTypeDef *heth, uint32_t PHYAddr, uint32_t PHYReg,
                                          uint32_t *pRegValue)
{
 80068aa:	b580      	push	{r7, lr}
 80068ac:	b086      	sub	sp, #24
 80068ae:	af00      	add	r7, sp, #0
 80068b0:	60f8      	str	r0, [r7, #12]
 80068b2:	60b9      	str	r1, [r7, #8]
 80068b4:	607a      	str	r2, [r7, #4]
 80068b6:	603b      	str	r3, [r7, #0]
  uint32_t tickstart;
  uint32_t tmpreg;

  /* Check for the Busy flag */
  if (READ_BIT(heth->Instance->MACMDIOAR, ETH_MACMDIOAR_MB) != (uint32_t)RESET)
 80068b8:	68fb      	ldr	r3, [r7, #12]
 80068ba:	681b      	ldr	r3, [r3, #0]
 80068bc:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 80068c0:	f003 0301 	and.w	r3, r3, #1
 80068c4:	2b00      	cmp	r3, #0
 80068c6:	d001      	beq.n	80068cc <HAL_ETH_ReadPHYRegister+0x22>
  {
    return HAL_ERROR;
 80068c8:	2301      	movs	r3, #1
 80068ca:	e03e      	b.n	800694a <HAL_ETH_ReadPHYRegister+0xa0>
  }

  /* Get the  MACMDIOAR value */
  WRITE_REG(tmpreg, heth->Instance->MACMDIOAR);
 80068cc:	68fb      	ldr	r3, [r7, #12]
 80068ce:	681b      	ldr	r3, [r3, #0]
 80068d0:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 80068d4:	617b      	str	r3, [r7, #20]
     - Set the PHY device address
     - Set the PHY register address
     - Set the read mode
     - Set the MII Busy bit */

  MODIFY_REG(tmpreg, ETH_MACMDIOAR_PA, (PHYAddr << 21));
 80068d6:	697b      	ldr	r3, [r7, #20]
 80068d8:	f023 7278 	bic.w	r2, r3, #65011712	; 0x3e00000
 80068dc:	68bb      	ldr	r3, [r7, #8]
 80068de:	055b      	lsls	r3, r3, #21
 80068e0:	4313      	orrs	r3, r2
 80068e2:	617b      	str	r3, [r7, #20]
  MODIFY_REG(tmpreg, ETH_MACMDIOAR_RDA, (PHYReg << 16));
 80068e4:	697b      	ldr	r3, [r7, #20]
 80068e6:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 80068ea:	687b      	ldr	r3, [r7, #4]
 80068ec:	041b      	lsls	r3, r3, #16
 80068ee:	4313      	orrs	r3, r2
 80068f0:	617b      	str	r3, [r7, #20]
  MODIFY_REG(tmpreg, ETH_MACMDIOAR_MOC, ETH_MACMDIOAR_MOC_RD);
 80068f2:	697b      	ldr	r3, [r7, #20]
 80068f4:	f043 030c 	orr.w	r3, r3, #12
 80068f8:	617b      	str	r3, [r7, #20]
  SET_BIT(tmpreg, ETH_MACMDIOAR_MB);
 80068fa:	697b      	ldr	r3, [r7, #20]
 80068fc:	f043 0301 	orr.w	r3, r3, #1
 8006900:	617b      	str	r3, [r7, #20]

  /* Write the result value into the MDII Address register */
  WRITE_REG(heth->Instance->MACMDIOAR, tmpreg);
 8006902:	68fb      	ldr	r3, [r7, #12]
 8006904:	681b      	ldr	r3, [r3, #0]
 8006906:	697a      	ldr	r2, [r7, #20]
 8006908:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200

  tickstart = HAL_GetTick();
 800690c:	f7fd fc00 	bl	8004110 <HAL_GetTick>
 8006910:	6138      	str	r0, [r7, #16]

  /* Wait for the Busy flag */
  while (READ_BIT(heth->Instance->MACMDIOAR, ETH_MACMDIOAR_MB) > 0U)
 8006912:	e009      	b.n	8006928 <HAL_ETH_ReadPHYRegister+0x7e>
  {
    if (((HAL_GetTick() - tickstart) > ETH_MDIO_BUS_TIMEOUT))
 8006914:	f7fd fbfc 	bl	8004110 <HAL_GetTick>
 8006918:	4602      	mov	r2, r0
 800691a:	693b      	ldr	r3, [r7, #16]
 800691c:	1ad3      	subs	r3, r2, r3
 800691e:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8006922:	d901      	bls.n	8006928 <HAL_ETH_ReadPHYRegister+0x7e>
    {
      return HAL_ERROR;
 8006924:	2301      	movs	r3, #1
 8006926:	e010      	b.n	800694a <HAL_ETH_ReadPHYRegister+0xa0>
  while (READ_BIT(heth->Instance->MACMDIOAR, ETH_MACMDIOAR_MB) > 0U)
 8006928:	68fb      	ldr	r3, [r7, #12]
 800692a:	681b      	ldr	r3, [r3, #0]
 800692c:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8006930:	f003 0301 	and.w	r3, r3, #1
 8006934:	2b00      	cmp	r3, #0
 8006936:	d1ed      	bne.n	8006914 <HAL_ETH_ReadPHYRegister+0x6a>
    }
  }

  /* Get MACMIIDR value */
  WRITE_REG(*pRegValue, (uint16_t)heth->Instance->MACMDIODR);
 8006938:	68fb      	ldr	r3, [r7, #12]
 800693a:	681b      	ldr	r3, [r3, #0]
 800693c:	f8d3 3204 	ldr.w	r3, [r3, #516]	; 0x204
 8006940:	b29b      	uxth	r3, r3
 8006942:	461a      	mov	r2, r3
 8006944:	683b      	ldr	r3, [r7, #0]
 8006946:	601a      	str	r2, [r3, #0]

  return HAL_OK;
 8006948:	2300      	movs	r3, #0
}
 800694a:	4618      	mov	r0, r3
 800694c:	3718      	adds	r7, #24
 800694e:	46bd      	mov	sp, r7
 8006950:	bd80      	pop	{r7, pc}
	...

08006954 <HAL_ETH_WritePHYRegister>:
  * @param  RegValue: the value to write
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_WritePHYRegister(ETH_HandleTypeDef *heth, uint32_t PHYAddr, uint32_t PHYReg,
                                           uint32_t RegValue)
{
 8006954:	b580      	push	{r7, lr}
 8006956:	b086      	sub	sp, #24
 8006958:	af00      	add	r7, sp, #0
 800695a:	60f8      	str	r0, [r7, #12]
 800695c:	60b9      	str	r1, [r7, #8]
 800695e:	607a      	str	r2, [r7, #4]
 8006960:	603b      	str	r3, [r7, #0]
  uint32_t tickstart;
  uint32_t tmpreg;

  /* Check for the Busy flag */
  if (READ_BIT(heth->Instance->MACMDIOAR, ETH_MACMDIOAR_MB) != (uint32_t)RESET)
 8006962:	68fb      	ldr	r3, [r7, #12]
 8006964:	681b      	ldr	r3, [r3, #0]
 8006966:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 800696a:	f003 0301 	and.w	r3, r3, #1
 800696e:	2b00      	cmp	r3, #0
 8006970:	d001      	beq.n	8006976 <HAL_ETH_WritePHYRegister+0x22>
  {
    return HAL_ERROR;
 8006972:	2301      	movs	r3, #1
 8006974:	e03c      	b.n	80069f0 <HAL_ETH_WritePHYRegister+0x9c>
  }

  /* Get the  MACMDIOAR value */
  WRITE_REG(tmpreg, heth->Instance->MACMDIOAR);
 8006976:	68fb      	ldr	r3, [r7, #12]
 8006978:	681b      	ldr	r3, [r3, #0]
 800697a:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 800697e:	617b      	str	r3, [r7, #20]
     - Set the PHY device address
     - Set the PHY register address
     - Set the write mode
     - Set the MII Busy bit */

  MODIFY_REG(tmpreg, ETH_MACMDIOAR_PA, (PHYAddr << 21));
 8006980:	697b      	ldr	r3, [r7, #20]
 8006982:	f023 7278 	bic.w	r2, r3, #65011712	; 0x3e00000
 8006986:	68bb      	ldr	r3, [r7, #8]
 8006988:	055b      	lsls	r3, r3, #21
 800698a:	4313      	orrs	r3, r2
 800698c:	617b      	str	r3, [r7, #20]
  MODIFY_REG(tmpreg, ETH_MACMDIOAR_RDA, (PHYReg << 16));
 800698e:	697b      	ldr	r3, [r7, #20]
 8006990:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 8006994:	687b      	ldr	r3, [r7, #4]
 8006996:	041b      	lsls	r3, r3, #16
 8006998:	4313      	orrs	r3, r2
 800699a:	617b      	str	r3, [r7, #20]
  MODIFY_REG(tmpreg, ETH_MACMDIOAR_MOC, ETH_MACMDIOAR_MOC_WR);
 800699c:	697b      	ldr	r3, [r7, #20]
 800699e:	f023 030c 	bic.w	r3, r3, #12
 80069a2:	f043 0304 	orr.w	r3, r3, #4
 80069a6:	617b      	str	r3, [r7, #20]
  SET_BIT(tmpreg, ETH_MACMDIOAR_MB);
 80069a8:	697b      	ldr	r3, [r7, #20]
 80069aa:	f043 0301 	orr.w	r3, r3, #1
 80069ae:	617b      	str	r3, [r7, #20]


  /* Give the value to the MII data register */
  WRITE_REG(ETH->MACMDIODR, (uint16_t)RegValue);
 80069b0:	683b      	ldr	r3, [r7, #0]
 80069b2:	b29a      	uxth	r2, r3
 80069b4:	4b10      	ldr	r3, [pc, #64]	; (80069f8 <HAL_ETH_WritePHYRegister+0xa4>)
 80069b6:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204

  /* Write the result value into the MII Address register */
  WRITE_REG(ETH->MACMDIOAR, tmpreg);
 80069ba:	4a0f      	ldr	r2, [pc, #60]	; (80069f8 <HAL_ETH_WritePHYRegister+0xa4>)
 80069bc:	697b      	ldr	r3, [r7, #20]
 80069be:	f8c2 3200 	str.w	r3, [r2, #512]	; 0x200

  tickstart = HAL_GetTick();
 80069c2:	f7fd fba5 	bl	8004110 <HAL_GetTick>
 80069c6:	6138      	str	r0, [r7, #16]

  /* Wait for the Busy flag */
  while (READ_BIT(heth->Instance->MACMDIOAR, ETH_MACMDIOAR_MB) > 0U)
 80069c8:	e009      	b.n	80069de <HAL_ETH_WritePHYRegister+0x8a>
  {
    if (((HAL_GetTick() - tickstart) > ETH_MDIO_BUS_TIMEOUT))
 80069ca:	f7fd fba1 	bl	8004110 <HAL_GetTick>
 80069ce:	4602      	mov	r2, r0
 80069d0:	693b      	ldr	r3, [r7, #16]
 80069d2:	1ad3      	subs	r3, r2, r3
 80069d4:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80069d8:	d901      	bls.n	80069de <HAL_ETH_WritePHYRegister+0x8a>
    {
      return HAL_ERROR;
 80069da:	2301      	movs	r3, #1
 80069dc:	e008      	b.n	80069f0 <HAL_ETH_WritePHYRegister+0x9c>
  while (READ_BIT(heth->Instance->MACMDIOAR, ETH_MACMDIOAR_MB) > 0U)
 80069de:	68fb      	ldr	r3, [r7, #12]
 80069e0:	681b      	ldr	r3, [r3, #0]
 80069e2:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 80069e6:	f003 0301 	and.w	r3, r3, #1
 80069ea:	2b00      	cmp	r3, #0
 80069ec:	d1ed      	bne.n	80069ca <HAL_ETH_WritePHYRegister+0x76>
    }
  }

  return HAL_OK;
 80069ee:	2300      	movs	r3, #0
}
 80069f0:	4618      	mov	r0, r3
 80069f2:	3718      	adds	r7, #24
 80069f4:	46bd      	mov	sp, r7
 80069f6:	bd80      	pop	{r7, pc}
 80069f8:	40028000 	.word	0x40028000

080069fc <HAL_ETH_GetMACConfig>:
  * @param  macconf: pointer to a ETH_MACConfigTypeDef structure that will hold
  *         the configuration of the MAC.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_ETH_GetMACConfig(ETH_HandleTypeDef *heth, ETH_MACConfigTypeDef *macconf)
{
 80069fc:	b480      	push	{r7}
 80069fe:	b083      	sub	sp, #12
 8006a00:	af00      	add	r7, sp, #0
 8006a02:	6078      	str	r0, [r7, #4]
 8006a04:	6039      	str	r1, [r7, #0]
  if (macconf == NULL)
 8006a06:	683b      	ldr	r3, [r7, #0]
 8006a08:	2b00      	cmp	r3, #0
 8006a0a:	d101      	bne.n	8006a10 <HAL_ETH_GetMACConfig+0x14>
  {
    return HAL_ERROR;
 8006a0c:	2301      	movs	r3, #1
 8006a0e:	e1c3      	b.n	8006d98 <HAL_ETH_GetMACConfig+0x39c>
  }

  /* Get MAC parameters */
  macconf->PreambleLength = READ_BIT(heth->Instance->MACCR, ETH_MACCR_PRELEN);
 8006a10:	687b      	ldr	r3, [r7, #4]
 8006a12:	681b      	ldr	r3, [r3, #0]
 8006a14:	681b      	ldr	r3, [r3, #0]
 8006a16:	f003 020c 	and.w	r2, r3, #12
 8006a1a:	683b      	ldr	r3, [r7, #0]
 8006a1c:	62da      	str	r2, [r3, #44]	; 0x2c
  macconf->DeferralCheck = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_DC) >> 4) > 0U) ? ENABLE : DISABLE;
 8006a1e:	687b      	ldr	r3, [r7, #4]
 8006a20:	681b      	ldr	r3, [r3, #0]
 8006a22:	681b      	ldr	r3, [r3, #0]
 8006a24:	f003 0310 	and.w	r3, r3, #16
 8006a28:	2b00      	cmp	r3, #0
 8006a2a:	bf14      	ite	ne
 8006a2c:	2301      	movne	r3, #1
 8006a2e:	2300      	moveq	r3, #0
 8006a30:	b2db      	uxtb	r3, r3
 8006a32:	461a      	mov	r2, r3
 8006a34:	683b      	ldr	r3, [r7, #0]
 8006a36:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
  macconf->BackOffLimit = READ_BIT(heth->Instance->MACCR, ETH_MACCR_BL);
 8006a3a:	687b      	ldr	r3, [r7, #4]
 8006a3c:	681b      	ldr	r3, [r3, #0]
 8006a3e:	681b      	ldr	r3, [r3, #0]
 8006a40:	f003 0260 	and.w	r2, r3, #96	; 0x60
 8006a44:	683b      	ldr	r3, [r7, #0]
 8006a46:	625a      	str	r2, [r3, #36]	; 0x24
  macconf->RetryTransmission = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_DR) >> 8) == 0U) ? ENABLE : DISABLE;
 8006a48:	687b      	ldr	r3, [r7, #4]
 8006a4a:	681b      	ldr	r3, [r3, #0]
 8006a4c:	681b      	ldr	r3, [r3, #0]
 8006a4e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006a52:	2b00      	cmp	r3, #0
 8006a54:	bf0c      	ite	eq
 8006a56:	2301      	moveq	r3, #1
 8006a58:	2300      	movne	r3, #0
 8006a5a:	b2db      	uxtb	r3, r3
 8006a5c:	461a      	mov	r2, r3
 8006a5e:	683b      	ldr	r3, [r7, #0]
 8006a60:	f883 2020 	strb.w	r2, [r3, #32]
  macconf->CarrierSenseDuringTransmit = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_DCRS) >> 9) > 0U)
 8006a64:	687b      	ldr	r3, [r7, #4]
 8006a66:	681b      	ldr	r3, [r3, #0]
 8006a68:	681b      	ldr	r3, [r3, #0]
 8006a6a:	f403 7300 	and.w	r3, r3, #512	; 0x200
                                        ? ENABLE : DISABLE;
 8006a6e:	2b00      	cmp	r3, #0
 8006a70:	bf14      	ite	ne
 8006a72:	2301      	movne	r3, #1
 8006a74:	2300      	moveq	r3, #0
 8006a76:	b2db      	uxtb	r3, r3
 8006a78:	461a      	mov	r2, r3
  macconf->CarrierSenseDuringTransmit = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_DCRS) >> 9) > 0U)
 8006a7a:	683b      	ldr	r3, [r7, #0]
 8006a7c:	77da      	strb	r2, [r3, #31]
  macconf->ReceiveOwn = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_DO) >> 10) == 0U) ? ENABLE : DISABLE;
 8006a7e:	687b      	ldr	r3, [r7, #4]
 8006a80:	681b      	ldr	r3, [r3, #0]
 8006a82:	681b      	ldr	r3, [r3, #0]
 8006a84:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8006a88:	2b00      	cmp	r3, #0
 8006a8a:	bf0c      	ite	eq
 8006a8c:	2301      	moveq	r3, #1
 8006a8e:	2300      	movne	r3, #0
 8006a90:	b2db      	uxtb	r3, r3
 8006a92:	461a      	mov	r2, r3
 8006a94:	683b      	ldr	r3, [r7, #0]
 8006a96:	779a      	strb	r2, [r3, #30]
  macconf->CarrierSenseBeforeTransmit = ((READ_BIT(heth->Instance->MACCR,
 8006a98:	687b      	ldr	r3, [r7, #4]
 8006a9a:	681b      	ldr	r3, [r3, #0]
 8006a9c:	681b      	ldr	r3, [r3, #0]
                                                   ETH_MACCR_ECRSFD) >> 11) > 0U) ? ENABLE : DISABLE;
 8006a9e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8006aa2:	2b00      	cmp	r3, #0
 8006aa4:	bf14      	ite	ne
 8006aa6:	2301      	movne	r3, #1
 8006aa8:	2300      	moveq	r3, #0
 8006aaa:	b2db      	uxtb	r3, r3
 8006aac:	461a      	mov	r2, r3
  macconf->CarrierSenseBeforeTransmit = ((READ_BIT(heth->Instance->MACCR,
 8006aae:	683b      	ldr	r3, [r7, #0]
 8006ab0:	775a      	strb	r2, [r3, #29]
  macconf->LoopbackMode = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_LM) >> 12) > 0U) ? ENABLE : DISABLE;
 8006ab2:	687b      	ldr	r3, [r7, #4]
 8006ab4:	681b      	ldr	r3, [r3, #0]
 8006ab6:	681b      	ldr	r3, [r3, #0]
 8006ab8:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8006abc:	2b00      	cmp	r3, #0
 8006abe:	bf14      	ite	ne
 8006ac0:	2301      	movne	r3, #1
 8006ac2:	2300      	moveq	r3, #0
 8006ac4:	b2db      	uxtb	r3, r3
 8006ac6:	461a      	mov	r2, r3
 8006ac8:	683b      	ldr	r3, [r7, #0]
 8006aca:	771a      	strb	r2, [r3, #28]
  macconf->DuplexMode = READ_BIT(heth->Instance->MACCR, ETH_MACCR_DM);
 8006acc:	687b      	ldr	r3, [r7, #4]
 8006ace:	681b      	ldr	r3, [r3, #0]
 8006ad0:	681b      	ldr	r3, [r3, #0]
 8006ad2:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8006ad6:	683b      	ldr	r3, [r7, #0]
 8006ad8:	619a      	str	r2, [r3, #24]
  macconf->Speed = READ_BIT(heth->Instance->MACCR, ETH_MACCR_FES);
 8006ada:	687b      	ldr	r3, [r7, #4]
 8006adc:	681b      	ldr	r3, [r3, #0]
 8006ade:	681b      	ldr	r3, [r3, #0]
 8006ae0:	f403 4280 	and.w	r2, r3, #16384	; 0x4000
 8006ae4:	683b      	ldr	r3, [r7, #0]
 8006ae6:	615a      	str	r2, [r3, #20]
  macconf->JumboPacket = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_JE) >> 16) > 0U) ? ENABLE : DISABLE;
 8006ae8:	687b      	ldr	r3, [r7, #4]
 8006aea:	681b      	ldr	r3, [r3, #0]
 8006aec:	681b      	ldr	r3, [r3, #0]
 8006aee:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8006af2:	2b00      	cmp	r3, #0
 8006af4:	bf14      	ite	ne
 8006af6:	2301      	movne	r3, #1
 8006af8:	2300      	moveq	r3, #0
 8006afa:	b2db      	uxtb	r3, r3
 8006afc:	461a      	mov	r2, r3
 8006afe:	683b      	ldr	r3, [r7, #0]
 8006b00:	749a      	strb	r2, [r3, #18]
  macconf->Jabber = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_JD) >> 17) == 0U) ? ENABLE : DISABLE;
 8006b02:	687b      	ldr	r3, [r7, #4]
 8006b04:	681b      	ldr	r3, [r3, #0]
 8006b06:	681b      	ldr	r3, [r3, #0]
 8006b08:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006b0c:	2b00      	cmp	r3, #0
 8006b0e:	bf0c      	ite	eq
 8006b10:	2301      	moveq	r3, #1
 8006b12:	2300      	movne	r3, #0
 8006b14:	b2db      	uxtb	r3, r3
 8006b16:	461a      	mov	r2, r3
 8006b18:	683b      	ldr	r3, [r7, #0]
 8006b1a:	745a      	strb	r2, [r3, #17]
  macconf->Watchdog = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_WD) >> 19) == 0U) ? ENABLE : DISABLE;
 8006b1c:	687b      	ldr	r3, [r7, #4]
 8006b1e:	681b      	ldr	r3, [r3, #0]
 8006b20:	681b      	ldr	r3, [r3, #0]
 8006b22:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8006b26:	2b00      	cmp	r3, #0
 8006b28:	bf0c      	ite	eq
 8006b2a:	2301      	moveq	r3, #1
 8006b2c:	2300      	movne	r3, #0
 8006b2e:	b2db      	uxtb	r3, r3
 8006b30:	461a      	mov	r2, r3
 8006b32:	683b      	ldr	r3, [r7, #0]
 8006b34:	741a      	strb	r2, [r3, #16]
  macconf->AutomaticPadCRCStrip = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_ACS) >> 20) > 0U) ? ENABLE : DISABLE;
 8006b36:	687b      	ldr	r3, [r7, #4]
 8006b38:	681b      	ldr	r3, [r3, #0]
 8006b3a:	681b      	ldr	r3, [r3, #0]
 8006b3c:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8006b40:	2b00      	cmp	r3, #0
 8006b42:	bf14      	ite	ne
 8006b44:	2301      	movne	r3, #1
 8006b46:	2300      	moveq	r3, #0
 8006b48:	b2db      	uxtb	r3, r3
 8006b4a:	461a      	mov	r2, r3
 8006b4c:	683b      	ldr	r3, [r7, #0]
 8006b4e:	73da      	strb	r2, [r3, #15]
  macconf->CRCStripTypePacket = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_CST) >> 21) > 0U) ? ENABLE : DISABLE;
 8006b50:	687b      	ldr	r3, [r7, #4]
 8006b52:	681b      	ldr	r3, [r3, #0]
 8006b54:	681b      	ldr	r3, [r3, #0]
 8006b56:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8006b5a:	2b00      	cmp	r3, #0
 8006b5c:	bf14      	ite	ne
 8006b5e:	2301      	movne	r3, #1
 8006b60:	2300      	moveq	r3, #0
 8006b62:	b2db      	uxtb	r3, r3
 8006b64:	461a      	mov	r2, r3
 8006b66:	683b      	ldr	r3, [r7, #0]
 8006b68:	739a      	strb	r2, [r3, #14]
  macconf->Support2KPacket = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_S2KP) >> 22) > 0U) ? ENABLE : DISABLE;
 8006b6a:	687b      	ldr	r3, [r7, #4]
 8006b6c:	681b      	ldr	r3, [r3, #0]
 8006b6e:	681b      	ldr	r3, [r3, #0]
 8006b70:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8006b74:	2b00      	cmp	r3, #0
 8006b76:	bf14      	ite	ne
 8006b78:	2301      	movne	r3, #1
 8006b7a:	2300      	moveq	r3, #0
 8006b7c:	b2db      	uxtb	r3, r3
 8006b7e:	461a      	mov	r2, r3
 8006b80:	683b      	ldr	r3, [r7, #0]
 8006b82:	735a      	strb	r2, [r3, #13]
  macconf->GiantPacketSizeLimitControl = ((READ_BIT(heth->Instance->MACCR,
 8006b84:	687b      	ldr	r3, [r7, #4]
 8006b86:	681b      	ldr	r3, [r3, #0]
 8006b88:	681b      	ldr	r3, [r3, #0]
                                                    ETH_MACCR_GPSLCE) >> 23) > 0U) ? ENABLE : DISABLE;
 8006b8a:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8006b8e:	2b00      	cmp	r3, #0
 8006b90:	bf14      	ite	ne
 8006b92:	2301      	movne	r3, #1
 8006b94:	2300      	moveq	r3, #0
 8006b96:	b2db      	uxtb	r3, r3
 8006b98:	461a      	mov	r2, r3
  macconf->GiantPacketSizeLimitControl = ((READ_BIT(heth->Instance->MACCR,
 8006b9a:	683b      	ldr	r3, [r7, #0]
 8006b9c:	731a      	strb	r2, [r3, #12]
  macconf->InterPacketGapVal = READ_BIT(heth->Instance->MACCR, ETH_MACCR_IPG);
 8006b9e:	687b      	ldr	r3, [r7, #4]
 8006ba0:	681b      	ldr	r3, [r3, #0]
 8006ba2:	681b      	ldr	r3, [r3, #0]
 8006ba4:	f003 62e0 	and.w	r2, r3, #117440512	; 0x7000000
 8006ba8:	683b      	ldr	r3, [r7, #0]
 8006baa:	609a      	str	r2, [r3, #8]
  macconf->ChecksumOffload = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_IPC) >> 27) > 0U) ? ENABLE : DISABLE;
 8006bac:	687b      	ldr	r3, [r7, #4]
 8006bae:	681b      	ldr	r3, [r3, #0]
 8006bb0:	681b      	ldr	r3, [r3, #0]
 8006bb2:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8006bb6:	2b00      	cmp	r3, #0
 8006bb8:	bf14      	ite	ne
 8006bba:	2301      	movne	r3, #1
 8006bbc:	2300      	moveq	r3, #0
 8006bbe:	b2db      	uxtb	r3, r3
 8006bc0:	461a      	mov	r2, r3
 8006bc2:	683b      	ldr	r3, [r7, #0]
 8006bc4:	711a      	strb	r2, [r3, #4]
  macconf->SourceAddrControl = READ_BIT(heth->Instance->MACCR, ETH_MACCR_SARC);
 8006bc6:	687b      	ldr	r3, [r7, #4]
 8006bc8:	681b      	ldr	r3, [r3, #0]
 8006bca:	681b      	ldr	r3, [r3, #0]
 8006bcc:	f003 42e0 	and.w	r2, r3, #1879048192	; 0x70000000
 8006bd0:	683b      	ldr	r3, [r7, #0]
 8006bd2:	601a      	str	r2, [r3, #0]

  macconf->GiantPacketSizeLimit = READ_BIT(heth->Instance->MACECR, ETH_MACECR_GPSL);
 8006bd4:	687b      	ldr	r3, [r7, #4]
 8006bd6:	681b      	ldr	r3, [r3, #0]
 8006bd8:	685b      	ldr	r3, [r3, #4]
 8006bda:	f3c3 020d 	ubfx	r2, r3, #0, #14
 8006bde:	683b      	ldr	r3, [r7, #0]
 8006be0:	635a      	str	r2, [r3, #52]	; 0x34
  macconf->CRCCheckingRxPackets = ((READ_BIT(heth->Instance->MACECR, ETH_MACECR_DCRCC) >> 16) == 0U) ? ENABLE : DISABLE;
 8006be2:	687b      	ldr	r3, [r7, #4]
 8006be4:	681b      	ldr	r3, [r3, #0]
 8006be6:	685b      	ldr	r3, [r3, #4]
 8006be8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8006bec:	2b00      	cmp	r3, #0
 8006bee:	bf0c      	ite	eq
 8006bf0:	2301      	moveq	r3, #1
 8006bf2:	2300      	movne	r3, #0
 8006bf4:	b2db      	uxtb	r3, r3
 8006bf6:	461a      	mov	r2, r3
 8006bf8:	683b      	ldr	r3, [r7, #0]
 8006bfa:	f883 2032 	strb.w	r2, [r3, #50]	; 0x32
  macconf->SlowProtocolDetect = ((READ_BIT(heth->Instance->MACECR, ETH_MACECR_SPEN) >> 17) > 0U) ? ENABLE : DISABLE;
 8006bfe:	687b      	ldr	r3, [r7, #4]
 8006c00:	681b      	ldr	r3, [r3, #0]
 8006c02:	685b      	ldr	r3, [r3, #4]
 8006c04:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006c08:	2b00      	cmp	r3, #0
 8006c0a:	bf14      	ite	ne
 8006c0c:	2301      	movne	r3, #1
 8006c0e:	2300      	moveq	r3, #0
 8006c10:	b2db      	uxtb	r3, r3
 8006c12:	461a      	mov	r2, r3
 8006c14:	683b      	ldr	r3, [r7, #0]
 8006c16:	f883 2031 	strb.w	r2, [r3, #49]	; 0x31
  macconf->UnicastSlowProtocolPacketDetect = ((READ_BIT(heth->Instance->MACECR,
 8006c1a:	687b      	ldr	r3, [r7, #4]
 8006c1c:	681b      	ldr	r3, [r3, #0]
 8006c1e:	685b      	ldr	r3, [r3, #4]
                                                        ETH_MACECR_USP) >> 18) > 0U) ? ENABLE : DISABLE;
 8006c20:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8006c24:	2b00      	cmp	r3, #0
 8006c26:	bf14      	ite	ne
 8006c28:	2301      	movne	r3, #1
 8006c2a:	2300      	moveq	r3, #0
 8006c2c:	b2db      	uxtb	r3, r3
 8006c2e:	461a      	mov	r2, r3
  macconf->UnicastSlowProtocolPacketDetect = ((READ_BIT(heth->Instance->MACECR,
 8006c30:	683b      	ldr	r3, [r7, #0]
 8006c32:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  macconf->ExtendedInterPacketGap = ((READ_BIT(heth->Instance->MACECR, ETH_MACECR_EIPGEN) >> 24) > 0U)
 8006c36:	687b      	ldr	r3, [r7, #4]
 8006c38:	681b      	ldr	r3, [r3, #0]
 8006c3a:	685b      	ldr	r3, [r3, #4]
 8006c3c:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
                                    ? ENABLE : DISABLE;
 8006c40:	2b00      	cmp	r3, #0
 8006c42:	bf14      	ite	ne
 8006c44:	2301      	movne	r3, #1
 8006c46:	2300      	moveq	r3, #0
 8006c48:	b2db      	uxtb	r3, r3
 8006c4a:	461a      	mov	r2, r3
  macconf->ExtendedInterPacketGap = ((READ_BIT(heth->Instance->MACECR, ETH_MACECR_EIPGEN) >> 24) > 0U)
 8006c4c:	683b      	ldr	r3, [r7, #0]
 8006c4e:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  macconf->ExtendedInterPacketGapVal = READ_BIT(heth->Instance->MACECR, ETH_MACECR_EIPG) >> 25;
 8006c52:	687b      	ldr	r3, [r7, #4]
 8006c54:	681b      	ldr	r3, [r3, #0]
 8006c56:	685b      	ldr	r3, [r3, #4]
 8006c58:	0e5b      	lsrs	r3, r3, #25
 8006c5a:	f003 021f 	and.w	r2, r3, #31
 8006c5e:	683b      	ldr	r3, [r7, #0]
 8006c60:	63da      	str	r2, [r3, #60]	; 0x3c


  macconf->ProgrammableWatchdog = ((READ_BIT(heth->Instance->MACWTR, ETH_MACWTR_PWE) >> 8) > 0U) ? ENABLE : DISABLE;
 8006c62:	687b      	ldr	r3, [r7, #4]
 8006c64:	681b      	ldr	r3, [r3, #0]
 8006c66:	68db      	ldr	r3, [r3, #12]
 8006c68:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006c6c:	2b00      	cmp	r3, #0
 8006c6e:	bf14      	ite	ne
 8006c70:	2301      	movne	r3, #1
 8006c72:	2300      	moveq	r3, #0
 8006c74:	b2db      	uxtb	r3, r3
 8006c76:	461a      	mov	r2, r3
 8006c78:	683b      	ldr	r3, [r7, #0]
 8006c7a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
  macconf->WatchdogTimeout = READ_BIT(heth->Instance->MACWTR, ETH_MACWTR_WTO);
 8006c7e:	687b      	ldr	r3, [r7, #4]
 8006c80:	681b      	ldr	r3, [r3, #0]
 8006c82:	68db      	ldr	r3, [r3, #12]
 8006c84:	f003 020f 	and.w	r2, r3, #15
 8006c88:	683b      	ldr	r3, [r7, #0]
 8006c8a:	645a      	str	r2, [r3, #68]	; 0x44

  macconf->TransmitFlowControl = ((READ_BIT(heth->Instance->MACTFCR, ETH_MACTFCR_TFE) >> 1) > 0U) ? ENABLE : DISABLE;
 8006c8c:	687b      	ldr	r3, [r7, #4]
 8006c8e:	681b      	ldr	r3, [r3, #0]
 8006c90:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006c92:	f003 0302 	and.w	r3, r3, #2
 8006c96:	2b00      	cmp	r3, #0
 8006c98:	bf14      	ite	ne
 8006c9a:	2301      	movne	r3, #1
 8006c9c:	2300      	moveq	r3, #0
 8006c9e:	b2db      	uxtb	r3, r3
 8006ca0:	461a      	mov	r2, r3
 8006ca2:	683b      	ldr	r3, [r7, #0]
 8006ca4:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54
  macconf->ZeroQuantaPause = ((READ_BIT(heth->Instance->MACTFCR, ETH_MACTFCR_DZPQ) >> 7) == 0U) ? ENABLE : DISABLE;
 8006ca8:	687b      	ldr	r3, [r7, #4]
 8006caa:	681b      	ldr	r3, [r3, #0]
 8006cac:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006cae:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006cb2:	2b00      	cmp	r3, #0
 8006cb4:	bf0c      	ite	eq
 8006cb6:	2301      	moveq	r3, #1
 8006cb8:	2300      	movne	r3, #0
 8006cba:	b2db      	uxtb	r3, r3
 8006cbc:	461a      	mov	r2, r3
 8006cbe:	683b      	ldr	r3, [r7, #0]
 8006cc0:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
  macconf->PauseLowThreshold = READ_BIT(heth->Instance->MACTFCR, ETH_MACTFCR_PLT);
 8006cc4:	687b      	ldr	r3, [r7, #4]
 8006cc6:	681b      	ldr	r3, [r3, #0]
 8006cc8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006cca:	f003 0270 	and.w	r2, r3, #112	; 0x70
 8006cce:	683b      	ldr	r3, [r7, #0]
 8006cd0:	651a      	str	r2, [r3, #80]	; 0x50
  macconf->PauseTime = (READ_BIT(heth->Instance->MACTFCR, ETH_MACTFCR_PT) >> 16);
 8006cd2:	687b      	ldr	r3, [r7, #4]
 8006cd4:	681b      	ldr	r3, [r3, #0]
 8006cd6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006cd8:	0c1b      	lsrs	r3, r3, #16
 8006cda:	b29a      	uxth	r2, r3
 8006cdc:	683b      	ldr	r3, [r7, #0]
 8006cde:	649a      	str	r2, [r3, #72]	; 0x48


  macconf->ReceiveFlowControl = (READ_BIT(heth->Instance->MACRFCR, ETH_MACRFCR_RFE) > 0U) ? ENABLE : DISABLE;
 8006ce0:	687b      	ldr	r3, [r7, #4]
 8006ce2:	681b      	ldr	r3, [r3, #0]
 8006ce4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006ce8:	f003 0301 	and.w	r3, r3, #1
 8006cec:	2b00      	cmp	r3, #0
 8006cee:	bf14      	ite	ne
 8006cf0:	2301      	movne	r3, #1
 8006cf2:	2300      	moveq	r3, #0
 8006cf4:	b2db      	uxtb	r3, r3
 8006cf6:	461a      	mov	r2, r3
 8006cf8:	683b      	ldr	r3, [r7, #0]
 8006cfa:	f883 2056 	strb.w	r2, [r3, #86]	; 0x56
  macconf->UnicastPausePacketDetect = ((READ_BIT(heth->Instance->MACRFCR, ETH_MACRFCR_UP) >> 1) > 0U)
 8006cfe:	687b      	ldr	r3, [r7, #4]
 8006d00:	681b      	ldr	r3, [r3, #0]
 8006d02:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006d06:	f003 0302 	and.w	r3, r3, #2
                                      ? ENABLE : DISABLE;
 8006d0a:	2b00      	cmp	r3, #0
 8006d0c:	bf14      	ite	ne
 8006d0e:	2301      	movne	r3, #1
 8006d10:	2300      	moveq	r3, #0
 8006d12:	b2db      	uxtb	r3, r3
 8006d14:	461a      	mov	r2, r3
  macconf->UnicastPausePacketDetect = ((READ_BIT(heth->Instance->MACRFCR, ETH_MACRFCR_UP) >> 1) > 0U)
 8006d16:	683b      	ldr	r3, [r7, #0]
 8006d18:	f883 2055 	strb.w	r2, [r3, #85]	; 0x55

  macconf->TransmitQueueMode = READ_BIT(heth->Instance->MTLTQOMR, (ETH_MTLTQOMR_TTC | ETH_MTLTQOMR_TSF));
 8006d1c:	687b      	ldr	r3, [r7, #4]
 8006d1e:	681b      	ldr	r3, [r3, #0]
 8006d20:	f8d3 3d00 	ldr.w	r3, [r3, #3328]	; 0xd00
 8006d24:	f003 0272 	and.w	r2, r3, #114	; 0x72
 8006d28:	683b      	ldr	r3, [r7, #0]
 8006d2a:	659a      	str	r2, [r3, #88]	; 0x58

  macconf->ReceiveQueueMode = READ_BIT(heth->Instance->MTLRQOMR, (ETH_MTLRQOMR_RTC | ETH_MTLRQOMR_RSF));
 8006d2c:	687b      	ldr	r3, [r7, #4]
 8006d2e:	681b      	ldr	r3, [r3, #0]
 8006d30:	f8d3 3d30 	ldr.w	r3, [r3, #3376]	; 0xd30
 8006d34:	f003 0223 	and.w	r2, r3, #35	; 0x23
 8006d38:	683b      	ldr	r3, [r7, #0]
 8006d3a:	65da      	str	r2, [r3, #92]	; 0x5c
  macconf->ForwardRxUndersizedGoodPacket = ((READ_BIT(heth->Instance->MTLRQOMR,
 8006d3c:	687b      	ldr	r3, [r7, #4]
 8006d3e:	681b      	ldr	r3, [r3, #0]
 8006d40:	f8d3 3d30 	ldr.w	r3, [r3, #3376]	; 0xd30
                                                      ETH_MTLRQOMR_FUP) >> 3) > 0U) ? ENABLE : DISABLE;
 8006d44:	f003 0308 	and.w	r3, r3, #8
 8006d48:	2b00      	cmp	r3, #0
 8006d4a:	bf14      	ite	ne
 8006d4c:	2301      	movne	r3, #1
 8006d4e:	2300      	moveq	r3, #0
 8006d50:	b2db      	uxtb	r3, r3
 8006d52:	461a      	mov	r2, r3
  macconf->ForwardRxUndersizedGoodPacket = ((READ_BIT(heth->Instance->MTLRQOMR,
 8006d54:	683b      	ldr	r3, [r7, #0]
 8006d56:	f883 2062 	strb.w	r2, [r3, #98]	; 0x62
  macconf->ForwardRxErrorPacket = ((READ_BIT(heth->Instance->MTLRQOMR, ETH_MTLRQOMR_FEP) >> 4) > 0U) ? ENABLE : DISABLE;
 8006d5a:	687b      	ldr	r3, [r7, #4]
 8006d5c:	681b      	ldr	r3, [r3, #0]
 8006d5e:	f8d3 3d30 	ldr.w	r3, [r3, #3376]	; 0xd30
 8006d62:	f003 0310 	and.w	r3, r3, #16
 8006d66:	2b00      	cmp	r3, #0
 8006d68:	bf14      	ite	ne
 8006d6a:	2301      	movne	r3, #1
 8006d6c:	2300      	moveq	r3, #0
 8006d6e:	b2db      	uxtb	r3, r3
 8006d70:	461a      	mov	r2, r3
 8006d72:	683b      	ldr	r3, [r7, #0]
 8006d74:	f883 2061 	strb.w	r2, [r3, #97]	; 0x61
  macconf->DropTCPIPChecksumErrorPacket = ((READ_BIT(heth->Instance->MTLRQOMR,
 8006d78:	687b      	ldr	r3, [r7, #4]
 8006d7a:	681b      	ldr	r3, [r3, #0]
 8006d7c:	f8d3 3d30 	ldr.w	r3, [r3, #3376]	; 0xd30
                                                     ETH_MTLRQOMR_DISTCPEF) >> 6) == 0U) ? ENABLE : DISABLE;
 8006d80:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006d84:	2b00      	cmp	r3, #0
 8006d86:	bf0c      	ite	eq
 8006d88:	2301      	moveq	r3, #1
 8006d8a:	2300      	movne	r3, #0
 8006d8c:	b2db      	uxtb	r3, r3
 8006d8e:	461a      	mov	r2, r3
  macconf->DropTCPIPChecksumErrorPacket = ((READ_BIT(heth->Instance->MTLRQOMR,
 8006d90:	683b      	ldr	r3, [r7, #0]
 8006d92:	f883 2060 	strb.w	r2, [r3, #96]	; 0x60

  return HAL_OK;
 8006d96:	2300      	movs	r3, #0
}
 8006d98:	4618      	mov	r0, r3
 8006d9a:	370c      	adds	r7, #12
 8006d9c:	46bd      	mov	sp, r7
 8006d9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006da2:	4770      	bx	lr

08006da4 <HAL_ETH_SetMACConfig>:
  * @param  macconf: pointer to a ETH_MACConfigTypeDef structure that contains
  *         the configuration of the MAC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_SetMACConfig(ETH_HandleTypeDef *heth,  ETH_MACConfigTypeDef *macconf)
{
 8006da4:	b580      	push	{r7, lr}
 8006da6:	b082      	sub	sp, #8
 8006da8:	af00      	add	r7, sp, #0
 8006daa:	6078      	str	r0, [r7, #4]
 8006dac:	6039      	str	r1, [r7, #0]
  if (macconf == NULL)
 8006dae:	683b      	ldr	r3, [r7, #0]
 8006db0:	2b00      	cmp	r3, #0
 8006db2:	d101      	bne.n	8006db8 <HAL_ETH_SetMACConfig+0x14>
  {
    return HAL_ERROR;
 8006db4:	2301      	movs	r3, #1
 8006db6:	e00b      	b.n	8006dd0 <HAL_ETH_SetMACConfig+0x2c>
  }

  if (heth->gState == HAL_ETH_STATE_READY)
 8006db8:	687b      	ldr	r3, [r7, #4]
 8006dba:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8006dbe:	2b10      	cmp	r3, #16
 8006dc0:	d105      	bne.n	8006dce <HAL_ETH_SetMACConfig+0x2a>
  {
    ETH_SetMACConfig(heth, macconf);
 8006dc2:	6839      	ldr	r1, [r7, #0]
 8006dc4:	6878      	ldr	r0, [r7, #4]
 8006dc6:	f000 f85f 	bl	8006e88 <ETH_SetMACConfig>

    return HAL_OK;
 8006dca:	2300      	movs	r3, #0
 8006dcc:	e000      	b.n	8006dd0 <HAL_ETH_SetMACConfig+0x2c>
  }
  else
  {
    return HAL_ERROR;
 8006dce:	2301      	movs	r3, #1
  }
}
 8006dd0:	4618      	mov	r0, r3
 8006dd2:	3708      	adds	r7, #8
 8006dd4:	46bd      	mov	sp, r7
 8006dd6:	bd80      	pop	{r7, pc}

08006dd8 <HAL_ETH_SetMDIOClockRange>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
void HAL_ETH_SetMDIOClockRange(ETH_HandleTypeDef *heth)
{
 8006dd8:	b580      	push	{r7, lr}
 8006dda:	b084      	sub	sp, #16
 8006ddc:	af00      	add	r7, sp, #0
 8006dde:	6078      	str	r0, [r7, #4]
  uint32_t hclk;
  uint32_t tmpreg;

  /* Get the ETHERNET MACMDIOAR value */
  tmpreg = (heth->Instance)->MACMDIOAR;
 8006de0:	687b      	ldr	r3, [r7, #4]
 8006de2:	681b      	ldr	r3, [r3, #0]
 8006de4:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8006de8:	60fb      	str	r3, [r7, #12]

  /* Clear CSR Clock Range bits */
  tmpreg &= ~ETH_MACMDIOAR_CR;
 8006dea:	68fb      	ldr	r3, [r7, #12]
 8006dec:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8006df0:	60fb      	str	r3, [r7, #12]

  /* Get hclk frequency value */
  hclk = HAL_RCC_GetHCLKFreq();
 8006df2:	f003 fec3 	bl	800ab7c <HAL_RCC_GetHCLKFreq>
 8006df6:	60b8      	str	r0, [r7, #8]

  /* Set CR bits depending on hclk value */
  if ((hclk >= 20000000U) && (hclk < 35000000U))
 8006df8:	68bb      	ldr	r3, [r7, #8]
 8006dfa:	4a1e      	ldr	r2, [pc, #120]	; (8006e74 <HAL_ETH_SetMDIOClockRange+0x9c>)
 8006dfc:	4293      	cmp	r3, r2
 8006dfe:	d908      	bls.n	8006e12 <HAL_ETH_SetMDIOClockRange+0x3a>
 8006e00:	68bb      	ldr	r3, [r7, #8]
 8006e02:	4a1d      	ldr	r2, [pc, #116]	; (8006e78 <HAL_ETH_SetMDIOClockRange+0xa0>)
 8006e04:	4293      	cmp	r3, r2
 8006e06:	d804      	bhi.n	8006e12 <HAL_ETH_SetMDIOClockRange+0x3a>
  {
    /* CSR Clock Range between 20-35 MHz */
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV16;
 8006e08:	68fb      	ldr	r3, [r7, #12]
 8006e0a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8006e0e:	60fb      	str	r3, [r7, #12]
 8006e10:	e027      	b.n	8006e62 <HAL_ETH_SetMDIOClockRange+0x8a>
  }
  else if ((hclk >= 35000000U) && (hclk < 60000000U))
 8006e12:	68bb      	ldr	r3, [r7, #8]
 8006e14:	4a18      	ldr	r2, [pc, #96]	; (8006e78 <HAL_ETH_SetMDIOClockRange+0xa0>)
 8006e16:	4293      	cmp	r3, r2
 8006e18:	d908      	bls.n	8006e2c <HAL_ETH_SetMDIOClockRange+0x54>
 8006e1a:	68bb      	ldr	r3, [r7, #8]
 8006e1c:	4a17      	ldr	r2, [pc, #92]	; (8006e7c <HAL_ETH_SetMDIOClockRange+0xa4>)
 8006e1e:	4293      	cmp	r3, r2
 8006e20:	d204      	bcs.n	8006e2c <HAL_ETH_SetMDIOClockRange+0x54>
  {
    /* CSR Clock Range between 35-60 MHz */
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV26;
 8006e22:	68fb      	ldr	r3, [r7, #12]
 8006e24:	f443 7340 	orr.w	r3, r3, #768	; 0x300
 8006e28:	60fb      	str	r3, [r7, #12]
 8006e2a:	e01a      	b.n	8006e62 <HAL_ETH_SetMDIOClockRange+0x8a>
  }
  else if ((hclk >= 60000000U) && (hclk < 100000000U))
 8006e2c:	68bb      	ldr	r3, [r7, #8]
 8006e2e:	4a13      	ldr	r2, [pc, #76]	; (8006e7c <HAL_ETH_SetMDIOClockRange+0xa4>)
 8006e30:	4293      	cmp	r3, r2
 8006e32:	d303      	bcc.n	8006e3c <HAL_ETH_SetMDIOClockRange+0x64>
 8006e34:	68bb      	ldr	r3, [r7, #8]
 8006e36:	4a12      	ldr	r2, [pc, #72]	; (8006e80 <HAL_ETH_SetMDIOClockRange+0xa8>)
 8006e38:	4293      	cmp	r3, r2
 8006e3a:	d911      	bls.n	8006e60 <HAL_ETH_SetMDIOClockRange+0x88>
  {
    /* CSR Clock Range between 60-100 MHz */
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV42;
  }
  else if ((hclk >= 100000000U) && (hclk < 150000000U))
 8006e3c:	68bb      	ldr	r3, [r7, #8]
 8006e3e:	4a10      	ldr	r2, [pc, #64]	; (8006e80 <HAL_ETH_SetMDIOClockRange+0xa8>)
 8006e40:	4293      	cmp	r3, r2
 8006e42:	d908      	bls.n	8006e56 <HAL_ETH_SetMDIOClockRange+0x7e>
 8006e44:	68bb      	ldr	r3, [r7, #8]
 8006e46:	4a0f      	ldr	r2, [pc, #60]	; (8006e84 <HAL_ETH_SetMDIOClockRange+0xac>)
 8006e48:	4293      	cmp	r3, r2
 8006e4a:	d804      	bhi.n	8006e56 <HAL_ETH_SetMDIOClockRange+0x7e>
  {
    /* CSR Clock Range between 100-150 MHz */
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV62;
 8006e4c:	68fb      	ldr	r3, [r7, #12]
 8006e4e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8006e52:	60fb      	str	r3, [r7, #12]
 8006e54:	e005      	b.n	8006e62 <HAL_ETH_SetMDIOClockRange+0x8a>
  }
  else /* (hclk >= 150000000)&&(hclk <= 200000000) */
  {
    /* CSR Clock Range between 150-200 MHz */
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV102;
 8006e56:	68fb      	ldr	r3, [r7, #12]
 8006e58:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8006e5c:	60fb      	str	r3, [r7, #12]
 8006e5e:	e000      	b.n	8006e62 <HAL_ETH_SetMDIOClockRange+0x8a>
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV42;
 8006e60:	bf00      	nop
  }

  /* Configure the CSR Clock Range */
  (heth->Instance)->MACMDIOAR = (uint32_t)tmpreg;
 8006e62:	687b      	ldr	r3, [r7, #4]
 8006e64:	681b      	ldr	r3, [r3, #0]
 8006e66:	68fa      	ldr	r2, [r7, #12]
 8006e68:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
}
 8006e6c:	bf00      	nop
 8006e6e:	3710      	adds	r7, #16
 8006e70:	46bd      	mov	sp, r7
 8006e72:	bd80      	pop	{r7, pc}
 8006e74:	01312cff 	.word	0x01312cff
 8006e78:	02160ebf 	.word	0x02160ebf
 8006e7c:	03938700 	.word	0x03938700
 8006e80:	05f5e0ff 	.word	0x05f5e0ff
 8006e84:	08f0d17f 	.word	0x08f0d17f

08006e88 <ETH_SetMACConfig>:
  * @{
  */


static void ETH_SetMACConfig(ETH_HandleTypeDef *heth,  ETH_MACConfigTypeDef *macconf)
{
 8006e88:	b480      	push	{r7}
 8006e8a:	b085      	sub	sp, #20
 8006e8c:	af00      	add	r7, sp, #0
 8006e8e:	6078      	str	r0, [r7, #4]
 8006e90:	6039      	str	r1, [r7, #0]
  uint32_t macregval;

  /*------------------------ MACCR Configuration --------------------*/
  macregval = (macconf->InterPacketGapVal |
 8006e92:	683b      	ldr	r3, [r7, #0]
 8006e94:	689a      	ldr	r2, [r3, #8]
               macconf->SourceAddrControl |
 8006e96:	683b      	ldr	r3, [r7, #0]
 8006e98:	681b      	ldr	r3, [r3, #0]
  macregval = (macconf->InterPacketGapVal |
 8006e9a:	431a      	orrs	r2, r3
               ((uint32_t)macconf->ChecksumOffload << 27) |
 8006e9c:	683b      	ldr	r3, [r7, #0]
 8006e9e:	791b      	ldrb	r3, [r3, #4]
 8006ea0:	06db      	lsls	r3, r3, #27
               macconf->SourceAddrControl |
 8006ea2:	431a      	orrs	r2, r3
               ((uint32_t)macconf->GiantPacketSizeLimitControl << 23) |
 8006ea4:	683b      	ldr	r3, [r7, #0]
 8006ea6:	7b1b      	ldrb	r3, [r3, #12]
 8006ea8:	05db      	lsls	r3, r3, #23
               ((uint32_t)macconf->ChecksumOffload << 27) |
 8006eaa:	431a      	orrs	r2, r3
               ((uint32_t)macconf->Support2KPacket  << 22) |
 8006eac:	683b      	ldr	r3, [r7, #0]
 8006eae:	7b5b      	ldrb	r3, [r3, #13]
 8006eb0:	059b      	lsls	r3, r3, #22
               ((uint32_t)macconf->GiantPacketSizeLimitControl << 23) |
 8006eb2:	431a      	orrs	r2, r3
               ((uint32_t)macconf->CRCStripTypePacket << 21) |
 8006eb4:	683b      	ldr	r3, [r7, #0]
 8006eb6:	7b9b      	ldrb	r3, [r3, #14]
 8006eb8:	055b      	lsls	r3, r3, #21
               ((uint32_t)macconf->Support2KPacket  << 22) |
 8006eba:	431a      	orrs	r2, r3
               ((uint32_t)macconf->AutomaticPadCRCStrip << 20) |
 8006ebc:	683b      	ldr	r3, [r7, #0]
 8006ebe:	7bdb      	ldrb	r3, [r3, #15]
 8006ec0:	051b      	lsls	r3, r3, #20
               ((uint32_t)macconf->CRCStripTypePacket << 21) |
 8006ec2:	4313      	orrs	r3, r2
               ((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 19) |
 8006ec4:	683a      	ldr	r2, [r7, #0]
 8006ec6:	7c12      	ldrb	r2, [r2, #16]
 8006ec8:	2a00      	cmp	r2, #0
 8006eca:	d102      	bne.n	8006ed2 <ETH_SetMACConfig+0x4a>
 8006ecc:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 8006ed0:	e000      	b.n	8006ed4 <ETH_SetMACConfig+0x4c>
 8006ed2:	2200      	movs	r2, #0
               ((uint32_t)macconf->AutomaticPadCRCStrip << 20) |
 8006ed4:	4313      	orrs	r3, r2
               ((uint32_t)((macconf->Jabber == DISABLE) ? 1U : 0U) << 17) |
 8006ed6:	683a      	ldr	r2, [r7, #0]
 8006ed8:	7c52      	ldrb	r2, [r2, #17]
 8006eda:	2a00      	cmp	r2, #0
 8006edc:	d102      	bne.n	8006ee4 <ETH_SetMACConfig+0x5c>
 8006ede:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8006ee2:	e000      	b.n	8006ee6 <ETH_SetMACConfig+0x5e>
 8006ee4:	2200      	movs	r2, #0
               ((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 19) |
 8006ee6:	431a      	orrs	r2, r3
               ((uint32_t)macconf->JumboPacket << 16) |
 8006ee8:	683b      	ldr	r3, [r7, #0]
 8006eea:	7c9b      	ldrb	r3, [r3, #18]
 8006eec:	041b      	lsls	r3, r3, #16
               ((uint32_t)((macconf->Jabber == DISABLE) ? 1U : 0U) << 17) |
 8006eee:	431a      	orrs	r2, r3
               macconf->Speed |
 8006ef0:	683b      	ldr	r3, [r7, #0]
 8006ef2:	695b      	ldr	r3, [r3, #20]
               ((uint32_t)macconf->JumboPacket << 16) |
 8006ef4:	431a      	orrs	r2, r3
               macconf->DuplexMode |
 8006ef6:	683b      	ldr	r3, [r7, #0]
 8006ef8:	699b      	ldr	r3, [r3, #24]
               macconf->Speed |
 8006efa:	431a      	orrs	r2, r3
               ((uint32_t)macconf->LoopbackMode << 12) |
 8006efc:	683b      	ldr	r3, [r7, #0]
 8006efe:	7f1b      	ldrb	r3, [r3, #28]
 8006f00:	031b      	lsls	r3, r3, #12
               macconf->DuplexMode |
 8006f02:	431a      	orrs	r2, r3
               ((uint32_t)macconf->CarrierSenseBeforeTransmit << 11) |
 8006f04:	683b      	ldr	r3, [r7, #0]
 8006f06:	7f5b      	ldrb	r3, [r3, #29]
 8006f08:	02db      	lsls	r3, r3, #11
               ((uint32_t)macconf->LoopbackMode << 12) |
 8006f0a:	4313      	orrs	r3, r2
               ((uint32_t)((macconf->ReceiveOwn == DISABLE) ? 1U : 0U) << 10) |
 8006f0c:	683a      	ldr	r2, [r7, #0]
 8006f0e:	7f92      	ldrb	r2, [r2, #30]
 8006f10:	2a00      	cmp	r2, #0
 8006f12:	d102      	bne.n	8006f1a <ETH_SetMACConfig+0x92>
 8006f14:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8006f18:	e000      	b.n	8006f1c <ETH_SetMACConfig+0x94>
 8006f1a:	2200      	movs	r2, #0
               ((uint32_t)macconf->CarrierSenseBeforeTransmit << 11) |
 8006f1c:	431a      	orrs	r2, r3
               ((uint32_t)macconf->CarrierSenseDuringTransmit << 9) |
 8006f1e:	683b      	ldr	r3, [r7, #0]
 8006f20:	7fdb      	ldrb	r3, [r3, #31]
 8006f22:	025b      	lsls	r3, r3, #9
               ((uint32_t)((macconf->ReceiveOwn == DISABLE) ? 1U : 0U) << 10) |
 8006f24:	4313      	orrs	r3, r2
               ((uint32_t)((macconf->RetryTransmission == DISABLE) ? 1U : 0U) << 8) |
 8006f26:	683a      	ldr	r2, [r7, #0]
 8006f28:	f892 2020 	ldrb.w	r2, [r2, #32]
 8006f2c:	2a00      	cmp	r2, #0
 8006f2e:	d102      	bne.n	8006f36 <ETH_SetMACConfig+0xae>
 8006f30:	f44f 7280 	mov.w	r2, #256	; 0x100
 8006f34:	e000      	b.n	8006f38 <ETH_SetMACConfig+0xb0>
 8006f36:	2200      	movs	r2, #0
               ((uint32_t)macconf->CarrierSenseDuringTransmit << 9) |
 8006f38:	431a      	orrs	r2, r3
               macconf->BackOffLimit |
 8006f3a:	683b      	ldr	r3, [r7, #0]
 8006f3c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
               ((uint32_t)((macconf->RetryTransmission == DISABLE) ? 1U : 0U) << 8) |
 8006f3e:	431a      	orrs	r2, r3
               ((uint32_t)macconf->DeferralCheck << 4) |
 8006f40:	683b      	ldr	r3, [r7, #0]
 8006f42:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8006f46:	011b      	lsls	r3, r3, #4
               macconf->BackOffLimit |
 8006f48:	431a      	orrs	r2, r3
               macconf->PreambleLength);
 8006f4a:	683b      	ldr	r3, [r7, #0]
 8006f4c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
  macregval = (macconf->InterPacketGapVal |
 8006f4e:	4313      	orrs	r3, r2
 8006f50:	60fb      	str	r3, [r7, #12]

  /* Write to MACCR */
  MODIFY_REG(heth->Instance->MACCR, ETH_MACCR_MASK, macregval);
 8006f52:	687b      	ldr	r3, [r7, #4]
 8006f54:	681b      	ldr	r3, [r3, #0]
 8006f56:	681a      	ldr	r2, [r3, #0]
 8006f58:	4b56      	ldr	r3, [pc, #344]	; (80070b4 <ETH_SetMACConfig+0x22c>)
 8006f5a:	4013      	ands	r3, r2
 8006f5c:	687a      	ldr	r2, [r7, #4]
 8006f5e:	6812      	ldr	r2, [r2, #0]
 8006f60:	68f9      	ldr	r1, [r7, #12]
 8006f62:	430b      	orrs	r3, r1
 8006f64:	6013      	str	r3, [r2, #0]

  /*------------------------ MACECR Configuration --------------------*/
  macregval = ((macconf->ExtendedInterPacketGapVal << 25) |
 8006f66:	683b      	ldr	r3, [r7, #0]
 8006f68:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006f6a:	065a      	lsls	r2, r3, #25
               ((uint32_t)macconf->ExtendedInterPacketGap << 24) |
 8006f6c:	683b      	ldr	r3, [r7, #0]
 8006f6e:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8006f72:	061b      	lsls	r3, r3, #24
  macregval = ((macconf->ExtendedInterPacketGapVal << 25) |
 8006f74:	431a      	orrs	r2, r3
               ((uint32_t)macconf->UnicastSlowProtocolPacketDetect << 18) |
 8006f76:	683b      	ldr	r3, [r7, #0]
 8006f78:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8006f7c:	049b      	lsls	r3, r3, #18
               ((uint32_t)macconf->ExtendedInterPacketGap << 24) |
 8006f7e:	431a      	orrs	r2, r3
               ((uint32_t)macconf->SlowProtocolDetect << 17) |
 8006f80:	683b      	ldr	r3, [r7, #0]
 8006f82:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 8006f86:	045b      	lsls	r3, r3, #17
               ((uint32_t)macconf->UnicastSlowProtocolPacketDetect << 18) |
 8006f88:	4313      	orrs	r3, r2
               ((uint32_t)((macconf->CRCCheckingRxPackets == DISABLE) ? 1U : 0U) << 16) |
 8006f8a:	683a      	ldr	r2, [r7, #0]
 8006f8c:	f892 2032 	ldrb.w	r2, [r2, #50]	; 0x32
 8006f90:	2a00      	cmp	r2, #0
 8006f92:	d102      	bne.n	8006f9a <ETH_SetMACConfig+0x112>
 8006f94:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8006f98:	e000      	b.n	8006f9c <ETH_SetMACConfig+0x114>
 8006f9a:	2200      	movs	r2, #0
               ((uint32_t)macconf->SlowProtocolDetect << 17) |
 8006f9c:	431a      	orrs	r2, r3
               macconf->GiantPacketSizeLimit);
 8006f9e:	683b      	ldr	r3, [r7, #0]
 8006fa0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
  macregval = ((macconf->ExtendedInterPacketGapVal << 25) |
 8006fa2:	4313      	orrs	r3, r2
 8006fa4:	60fb      	str	r3, [r7, #12]

  /* Write to MACECR */
  MODIFY_REG(heth->Instance->MACECR, ETH_MACECR_MASK, macregval);
 8006fa6:	687b      	ldr	r3, [r7, #4]
 8006fa8:	681b      	ldr	r3, [r3, #0]
 8006faa:	685a      	ldr	r2, [r3, #4]
 8006fac:	4b42      	ldr	r3, [pc, #264]	; (80070b8 <ETH_SetMACConfig+0x230>)
 8006fae:	4013      	ands	r3, r2
 8006fb0:	687a      	ldr	r2, [r7, #4]
 8006fb2:	6812      	ldr	r2, [r2, #0]
 8006fb4:	68f9      	ldr	r1, [r7, #12]
 8006fb6:	430b      	orrs	r3, r1
 8006fb8:	6053      	str	r3, [r2, #4]

  /*------------------------ MACWTR Configuration --------------------*/
  macregval = (((uint32_t)macconf->ProgrammableWatchdog << 8) |
 8006fba:	683b      	ldr	r3, [r7, #0]
 8006fbc:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8006fc0:	021a      	lsls	r2, r3, #8
               macconf->WatchdogTimeout);
 8006fc2:	683b      	ldr	r3, [r7, #0]
 8006fc4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
  macregval = (((uint32_t)macconf->ProgrammableWatchdog << 8) |
 8006fc6:	4313      	orrs	r3, r2
 8006fc8:	60fb      	str	r3, [r7, #12]

  /* Write to MACWTR */
  MODIFY_REG(heth->Instance->MACWTR, ETH_MACWTR_MASK, macregval);
 8006fca:	687b      	ldr	r3, [r7, #4]
 8006fcc:	681b      	ldr	r3, [r3, #0]
 8006fce:	68da      	ldr	r2, [r3, #12]
 8006fd0:	4b3a      	ldr	r3, [pc, #232]	; (80070bc <ETH_SetMACConfig+0x234>)
 8006fd2:	4013      	ands	r3, r2
 8006fd4:	687a      	ldr	r2, [r7, #4]
 8006fd6:	6812      	ldr	r2, [r2, #0]
 8006fd8:	68f9      	ldr	r1, [r7, #12]
 8006fda:	430b      	orrs	r3, r1
 8006fdc:	60d3      	str	r3, [r2, #12]

  /*------------------------ MACTFCR Configuration --------------------*/
  macregval = (((uint32_t)macconf->TransmitFlowControl << 1) |
 8006fde:	683b      	ldr	r3, [r7, #0]
 8006fe0:	f893 3054 	ldrb.w	r3, [r3, #84]	; 0x54
 8006fe4:	005a      	lsls	r2, r3, #1
               macconf->PauseLowThreshold |
 8006fe6:	683b      	ldr	r3, [r7, #0]
 8006fe8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
  macregval = (((uint32_t)macconf->TransmitFlowControl << 1) |
 8006fea:	4313      	orrs	r3, r2
               ((uint32_t)((macconf->ZeroQuantaPause == DISABLE) ? 1U : 0U) << 7) |
 8006fec:	683a      	ldr	r2, [r7, #0]
 8006fee:	f892 204c 	ldrb.w	r2, [r2, #76]	; 0x4c
 8006ff2:	2a00      	cmp	r2, #0
 8006ff4:	d101      	bne.n	8006ffa <ETH_SetMACConfig+0x172>
 8006ff6:	2280      	movs	r2, #128	; 0x80
 8006ff8:	e000      	b.n	8006ffc <ETH_SetMACConfig+0x174>
 8006ffa:	2200      	movs	r2, #0
               macconf->PauseLowThreshold |
 8006ffc:	431a      	orrs	r2, r3
               (macconf->PauseTime << 16));
 8006ffe:	683b      	ldr	r3, [r7, #0]
 8007000:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8007002:	041b      	lsls	r3, r3, #16
  macregval = (((uint32_t)macconf->TransmitFlowControl << 1) |
 8007004:	4313      	orrs	r3, r2
 8007006:	60fb      	str	r3, [r7, #12]

  /* Write to MACTFCR */
  MODIFY_REG(heth->Instance->MACTFCR, ETH_MACTFCR_MASK, macregval);
 8007008:	687b      	ldr	r3, [r7, #4]
 800700a:	681b      	ldr	r3, [r3, #0]
 800700c:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 800700e:	f64f 730d 	movw	r3, #65293	; 0xff0d
 8007012:	4013      	ands	r3, r2
 8007014:	687a      	ldr	r2, [r7, #4]
 8007016:	6812      	ldr	r2, [r2, #0]
 8007018:	68f9      	ldr	r1, [r7, #12]
 800701a:	430b      	orrs	r3, r1
 800701c:	6713      	str	r3, [r2, #112]	; 0x70

  /*------------------------ MACRFCR Configuration --------------------*/
  macregval = ((uint32_t)macconf->ReceiveFlowControl |
 800701e:	683b      	ldr	r3, [r7, #0]
 8007020:	f893 3056 	ldrb.w	r3, [r3, #86]	; 0x56
 8007024:	461a      	mov	r2, r3
               ((uint32_t)macconf->UnicastPausePacketDetect << 1));
 8007026:	683b      	ldr	r3, [r7, #0]
 8007028:	f893 3055 	ldrb.w	r3, [r3, #85]	; 0x55
 800702c:	005b      	lsls	r3, r3, #1
  macregval = ((uint32_t)macconf->ReceiveFlowControl |
 800702e:	4313      	orrs	r3, r2
 8007030:	60fb      	str	r3, [r7, #12]

  /* Write to MACRFCR */
  MODIFY_REG(heth->Instance->MACRFCR, ETH_MACRFCR_MASK, macregval);
 8007032:	687b      	ldr	r3, [r7, #4]
 8007034:	681b      	ldr	r3, [r3, #0]
 8007036:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800703a:	f023 0103 	bic.w	r1, r3, #3
 800703e:	687b      	ldr	r3, [r7, #4]
 8007040:	681b      	ldr	r3, [r3, #0]
 8007042:	68fa      	ldr	r2, [r7, #12]
 8007044:	430a      	orrs	r2, r1
 8007046:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

  /*------------------------ MTLTQOMR Configuration --------------------*/
  /* Write to MTLTQOMR */
  MODIFY_REG(heth->Instance->MTLTQOMR, ETH_MTLTQOMR_MASK, macconf->TransmitQueueMode);
 800704a:	687b      	ldr	r3, [r7, #4]
 800704c:	681b      	ldr	r3, [r3, #0]
 800704e:	f8d3 3d00 	ldr.w	r3, [r3, #3328]	; 0xd00
 8007052:	f023 0172 	bic.w	r1, r3, #114	; 0x72
 8007056:	683b      	ldr	r3, [r7, #0]
 8007058:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 800705a:	687b      	ldr	r3, [r7, #4]
 800705c:	681b      	ldr	r3, [r3, #0]
 800705e:	430a      	orrs	r2, r1
 8007060:	f8c3 2d00 	str.w	r2, [r3, #3328]	; 0xd00

  /*------------------------ MTLRQOMR Configuration --------------------*/
  macregval = (macconf->ReceiveQueueMode |
 8007064:	683b      	ldr	r3, [r7, #0]
 8007066:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
               ((uint32_t)((macconf->DropTCPIPChecksumErrorPacket == DISABLE) ? 1U : 0U) << 6) |
 8007068:	683a      	ldr	r2, [r7, #0]
 800706a:	f892 2060 	ldrb.w	r2, [r2, #96]	; 0x60
 800706e:	2a00      	cmp	r2, #0
 8007070:	d101      	bne.n	8007076 <ETH_SetMACConfig+0x1ee>
 8007072:	2240      	movs	r2, #64	; 0x40
 8007074:	e000      	b.n	8007078 <ETH_SetMACConfig+0x1f0>
 8007076:	2200      	movs	r2, #0
  macregval = (macconf->ReceiveQueueMode |
 8007078:	431a      	orrs	r2, r3
               ((uint32_t)macconf->ForwardRxErrorPacket << 4) |
 800707a:	683b      	ldr	r3, [r7, #0]
 800707c:	f893 3061 	ldrb.w	r3, [r3, #97]	; 0x61
 8007080:	011b      	lsls	r3, r3, #4
               ((uint32_t)((macconf->DropTCPIPChecksumErrorPacket == DISABLE) ? 1U : 0U) << 6) |
 8007082:	431a      	orrs	r2, r3
               ((uint32_t)macconf->ForwardRxUndersizedGoodPacket << 3));
 8007084:	683b      	ldr	r3, [r7, #0]
 8007086:	f893 3062 	ldrb.w	r3, [r3, #98]	; 0x62
 800708a:	00db      	lsls	r3, r3, #3
  macregval = (macconf->ReceiveQueueMode |
 800708c:	4313      	orrs	r3, r2
 800708e:	60fb      	str	r3, [r7, #12]

  /* Write to MTLRQOMR */
  MODIFY_REG(heth->Instance->MTLRQOMR, ETH_MTLRQOMR_MASK, macregval);
 8007090:	687b      	ldr	r3, [r7, #4]
 8007092:	681b      	ldr	r3, [r3, #0]
 8007094:	f8d3 3d30 	ldr.w	r3, [r3, #3376]	; 0xd30
 8007098:	f023 017b 	bic.w	r1, r3, #123	; 0x7b
 800709c:	687b      	ldr	r3, [r7, #4]
 800709e:	681b      	ldr	r3, [r3, #0]
 80070a0:	68fa      	ldr	r2, [r7, #12]
 80070a2:	430a      	orrs	r2, r1
 80070a4:	f8c3 2d30 	str.w	r2, [r3, #3376]	; 0xd30
}
 80070a8:	bf00      	nop
 80070aa:	3714      	adds	r7, #20
 80070ac:	46bd      	mov	sp, r7
 80070ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80070b2:	4770      	bx	lr
 80070b4:	00048083 	.word	0x00048083
 80070b8:	c0f88000 	.word	0xc0f88000
 80070bc:	fffffef0 	.word	0xfffffef0

080070c0 <ETH_SetDMAConfig>:

static void ETH_SetDMAConfig(ETH_HandleTypeDef *heth,  ETH_DMAConfigTypeDef *dmaconf)
{
 80070c0:	b480      	push	{r7}
 80070c2:	b085      	sub	sp, #20
 80070c4:	af00      	add	r7, sp, #0
 80070c6:	6078      	str	r0, [r7, #4]
 80070c8:	6039      	str	r1, [r7, #0]
  uint32_t dmaregval;

  /*------------------------ DMAMR Configuration --------------------*/
  MODIFY_REG(heth->Instance->DMAMR, ETH_DMAMR_MASK, dmaconf->DMAArbitration);
 80070ca:	687b      	ldr	r3, [r7, #4]
 80070cc:	681b      	ldr	r3, [r3, #0]
 80070ce:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80070d2:	681a      	ldr	r2, [r3, #0]
 80070d4:	4b38      	ldr	r3, [pc, #224]	; (80071b8 <ETH_SetDMAConfig+0xf8>)
 80070d6:	4013      	ands	r3, r2
 80070d8:	683a      	ldr	r2, [r7, #0]
 80070da:	6811      	ldr	r1, [r2, #0]
 80070dc:	687a      	ldr	r2, [r7, #4]
 80070de:	6812      	ldr	r2, [r2, #0]
 80070e0:	430b      	orrs	r3, r1
 80070e2:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 80070e6:	6013      	str	r3, [r2, #0]

  /*------------------------ DMASBMR Configuration --------------------*/
  dmaregval = (((uint32_t)dmaconf->AddressAlignedBeats << 12) |
 80070e8:	683b      	ldr	r3, [r7, #0]
 80070ea:	791b      	ldrb	r3, [r3, #4]
 80070ec:	031a      	lsls	r2, r3, #12
               dmaconf->BurstMode |
 80070ee:	683b      	ldr	r3, [r7, #0]
 80070f0:	689b      	ldr	r3, [r3, #8]
  dmaregval = (((uint32_t)dmaconf->AddressAlignedBeats << 12) |
 80070f2:	431a      	orrs	r2, r3
               ((uint32_t)dmaconf->RebuildINCRxBurst << 15));
 80070f4:	683b      	ldr	r3, [r7, #0]
 80070f6:	7b1b      	ldrb	r3, [r3, #12]
 80070f8:	03db      	lsls	r3, r3, #15
  dmaregval = (((uint32_t)dmaconf->AddressAlignedBeats << 12) |
 80070fa:	4313      	orrs	r3, r2
 80070fc:	60fb      	str	r3, [r7, #12]

  MODIFY_REG(heth->Instance->DMASBMR, ETH_DMASBMR_MASK, dmaregval);
 80070fe:	687b      	ldr	r3, [r7, #4]
 8007100:	681b      	ldr	r3, [r3, #0]
 8007102:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8007106:	685a      	ldr	r2, [r3, #4]
 8007108:	4b2c      	ldr	r3, [pc, #176]	; (80071bc <ETH_SetDMAConfig+0xfc>)
 800710a:	4013      	ands	r3, r2
 800710c:	687a      	ldr	r2, [r7, #4]
 800710e:	6812      	ldr	r2, [r2, #0]
 8007110:	68f9      	ldr	r1, [r7, #12]
 8007112:	430b      	orrs	r3, r1
 8007114:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8007118:	6053      	str	r3, [r2, #4]

  /*------------------------ DMACCR Configuration --------------------*/
  dmaregval = (((uint32_t)dmaconf->PBLx8Mode << 16) |
 800711a:	683b      	ldr	r3, [r7, #0]
 800711c:	7b5b      	ldrb	r3, [r3, #13]
 800711e:	041a      	lsls	r2, r3, #16
               dmaconf->MaximumSegmentSize);
 8007120:	683b      	ldr	r3, [r7, #0]
 8007122:	6a1b      	ldr	r3, [r3, #32]
  dmaregval = (((uint32_t)dmaconf->PBLx8Mode << 16) |
 8007124:	4313      	orrs	r3, r2
 8007126:	60fb      	str	r3, [r7, #12]

  MODIFY_REG(heth->Instance->DMACCR, ETH_DMACCR_MASK, dmaregval);
 8007128:	687b      	ldr	r3, [r7, #4]
 800712a:	681b      	ldr	r3, [r3, #0]
 800712c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8007130:	f8d3 2100 	ldr.w	r2, [r3, #256]	; 0x100
 8007134:	4b22      	ldr	r3, [pc, #136]	; (80071c0 <ETH_SetDMAConfig+0x100>)
 8007136:	4013      	ands	r3, r2
 8007138:	687a      	ldr	r2, [r7, #4]
 800713a:	6812      	ldr	r2, [r2, #0]
 800713c:	68f9      	ldr	r1, [r7, #12]
 800713e:	430b      	orrs	r3, r1
 8007140:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8007144:	f8c2 3100 	str.w	r3, [r2, #256]	; 0x100

  /*------------------------ DMACTCR Configuration --------------------*/
  dmaregval = (dmaconf->TxDMABurstLength |
 8007148:	683b      	ldr	r3, [r7, #0]
 800714a:	691a      	ldr	r2, [r3, #16]
               ((uint32_t)dmaconf->SecondPacketOperate << 4) |
 800714c:	683b      	ldr	r3, [r7, #0]
 800714e:	7d1b      	ldrb	r3, [r3, #20]
 8007150:	011b      	lsls	r3, r3, #4
  dmaregval = (dmaconf->TxDMABurstLength |
 8007152:	431a      	orrs	r2, r3
               ((uint32_t)dmaconf->TCPSegmentation << 12));
 8007154:	683b      	ldr	r3, [r7, #0]
 8007156:	7f5b      	ldrb	r3, [r3, #29]
 8007158:	031b      	lsls	r3, r3, #12
  dmaregval = (dmaconf->TxDMABurstLength |
 800715a:	4313      	orrs	r3, r2
 800715c:	60fb      	str	r3, [r7, #12]

  MODIFY_REG(heth->Instance->DMACTCR, ETH_DMACTCR_MASK, dmaregval);
 800715e:	687b      	ldr	r3, [r7, #4]
 8007160:	681b      	ldr	r3, [r3, #0]
 8007162:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8007166:	f8d3 2104 	ldr.w	r2, [r3, #260]	; 0x104
 800716a:	4b16      	ldr	r3, [pc, #88]	; (80071c4 <ETH_SetDMAConfig+0x104>)
 800716c:	4013      	ands	r3, r2
 800716e:	687a      	ldr	r2, [r7, #4]
 8007170:	6812      	ldr	r2, [r2, #0]
 8007172:	68f9      	ldr	r1, [r7, #12]
 8007174:	430b      	orrs	r3, r1
 8007176:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 800717a:	f8c2 3104 	str.w	r3, [r2, #260]	; 0x104

  /*------------------------ DMACRCR Configuration --------------------*/
  dmaregval = (((uint32_t)dmaconf->FlushRxPacket  << 31) |
 800717e:	683b      	ldr	r3, [r7, #0]
 8007180:	7f1b      	ldrb	r3, [r3, #28]
 8007182:	07da      	lsls	r2, r3, #31
               dmaconf->RxDMABurstLength);
 8007184:	683b      	ldr	r3, [r7, #0]
 8007186:	699b      	ldr	r3, [r3, #24]
  dmaregval = (((uint32_t)dmaconf->FlushRxPacket  << 31) |
 8007188:	4313      	orrs	r3, r2
 800718a:	60fb      	str	r3, [r7, #12]

  /* Write to DMACRCR */
  MODIFY_REG(heth->Instance->DMACRCR, ETH_DMACRCR_MASK, dmaregval);
 800718c:	687b      	ldr	r3, [r7, #4]
 800718e:	681b      	ldr	r3, [r3, #0]
 8007190:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8007194:	f8d3 2108 	ldr.w	r2, [r3, #264]	; 0x108
 8007198:	4b0b      	ldr	r3, [pc, #44]	; (80071c8 <ETH_SetDMAConfig+0x108>)
 800719a:	4013      	ands	r3, r2
 800719c:	687a      	ldr	r2, [r7, #4]
 800719e:	6812      	ldr	r2, [r2, #0]
 80071a0:	68f9      	ldr	r1, [r7, #12]
 80071a2:	430b      	orrs	r3, r1
 80071a4:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 80071a8:	f8c2 3108 	str.w	r3, [r2, #264]	; 0x108
}
 80071ac:	bf00      	nop
 80071ae:	3714      	adds	r7, #20
 80071b0:	46bd      	mov	sp, r7
 80071b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80071b6:	4770      	bx	lr
 80071b8:	ffff87fd 	.word	0xffff87fd
 80071bc:	ffff2ffe 	.word	0xffff2ffe
 80071c0:	fffec000 	.word	0xfffec000
 80071c4:	ffc0efef 	.word	0xffc0efef
 80071c8:	7fc0ffff 	.word	0x7fc0ffff

080071cc <ETH_MACDMAConfig>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
static void ETH_MACDMAConfig(ETH_HandleTypeDef *heth)
{
 80071cc:	b580      	push	{r7, lr}
 80071ce:	b0a4      	sub	sp, #144	; 0x90
 80071d0:	af00      	add	r7, sp, #0
 80071d2:	6078      	str	r0, [r7, #4]
  ETH_MACConfigTypeDef macDefaultConf;
  ETH_DMAConfigTypeDef dmaDefaultConf;

  /*--------------- ETHERNET MAC registers default Configuration --------------*/
  macDefaultConf.AutomaticPadCRCStrip = ENABLE;
 80071d4:	2301      	movs	r3, #1
 80071d6:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
  macDefaultConf.BackOffLimit = ETH_BACKOFFLIMIT_10;
 80071da:	2300      	movs	r3, #0
 80071dc:	653b      	str	r3, [r7, #80]	; 0x50
  macDefaultConf.CarrierSenseBeforeTransmit = DISABLE;
 80071de:	2300      	movs	r3, #0
 80071e0:	f887 3049 	strb.w	r3, [r7, #73]	; 0x49
  macDefaultConf.CarrierSenseDuringTransmit = DISABLE;
 80071e4:	2300      	movs	r3, #0
 80071e6:	f887 304b 	strb.w	r3, [r7, #75]	; 0x4b
  macDefaultConf.ChecksumOffload = ENABLE;
 80071ea:	2301      	movs	r3, #1
 80071ec:	f887 3030 	strb.w	r3, [r7, #48]	; 0x30
  macDefaultConf.CRCCheckingRxPackets = ENABLE;
 80071f0:	2301      	movs	r3, #1
 80071f2:	f887 305e 	strb.w	r3, [r7, #94]	; 0x5e
  macDefaultConf.CRCStripTypePacket = ENABLE;
 80071f6:	2301      	movs	r3, #1
 80071f8:	f887 303a 	strb.w	r3, [r7, #58]	; 0x3a
  macDefaultConf.DeferralCheck = DISABLE;
 80071fc:	2300      	movs	r3, #0
 80071fe:	f887 3054 	strb.w	r3, [r7, #84]	; 0x54
  macDefaultConf.DropTCPIPChecksumErrorPacket = ENABLE;
 8007202:	2301      	movs	r3, #1
 8007204:	f887 308c 	strb.w	r3, [r7, #140]	; 0x8c
  macDefaultConf.DuplexMode = ETH_FULLDUPLEX_MODE;
 8007208:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800720c:	647b      	str	r3, [r7, #68]	; 0x44
  macDefaultConf.ExtendedInterPacketGap = DISABLE;
 800720e:	2300      	movs	r3, #0
 8007210:	f887 3064 	strb.w	r3, [r7, #100]	; 0x64
  macDefaultConf.ExtendedInterPacketGapVal = 0x0;
 8007214:	2300      	movs	r3, #0
 8007216:	66bb      	str	r3, [r7, #104]	; 0x68
  macDefaultConf.ForwardRxErrorPacket = DISABLE;
 8007218:	2300      	movs	r3, #0
 800721a:	f887 308d 	strb.w	r3, [r7, #141]	; 0x8d
  macDefaultConf.ForwardRxUndersizedGoodPacket = DISABLE;
 800721e:	2300      	movs	r3, #0
 8007220:	f887 308e 	strb.w	r3, [r7, #142]	; 0x8e
  macDefaultConf.GiantPacketSizeLimit = 0x618;
 8007224:	f44f 63c3 	mov.w	r3, #1560	; 0x618
 8007228:	663b      	str	r3, [r7, #96]	; 0x60
  macDefaultConf.GiantPacketSizeLimitControl = DISABLE;
 800722a:	2300      	movs	r3, #0
 800722c:	f887 3038 	strb.w	r3, [r7, #56]	; 0x38
  macDefaultConf.InterPacketGapVal = ETH_INTERPACKETGAP_96BIT;
 8007230:	2300      	movs	r3, #0
 8007232:	637b      	str	r3, [r7, #52]	; 0x34
  macDefaultConf.Jabber = ENABLE;
 8007234:	2301      	movs	r3, #1
 8007236:	f887 303d 	strb.w	r3, [r7, #61]	; 0x3d
  macDefaultConf.JumboPacket = DISABLE;
 800723a:	2300      	movs	r3, #0
 800723c:	f887 303e 	strb.w	r3, [r7, #62]	; 0x3e
  macDefaultConf.LoopbackMode = DISABLE;
 8007240:	2300      	movs	r3, #0
 8007242:	f887 3048 	strb.w	r3, [r7, #72]	; 0x48
  macDefaultConf.PauseLowThreshold = ETH_PAUSELOWTHRESHOLD_MINUS_4;
 8007246:	2300      	movs	r3, #0
 8007248:	67fb      	str	r3, [r7, #124]	; 0x7c
  macDefaultConf.PauseTime = 0x0;
 800724a:	2300      	movs	r3, #0
 800724c:	677b      	str	r3, [r7, #116]	; 0x74
  macDefaultConf.PreambleLength = ETH_PREAMBLELENGTH_7;
 800724e:	2300      	movs	r3, #0
 8007250:	65bb      	str	r3, [r7, #88]	; 0x58
  macDefaultConf.ProgrammableWatchdog = DISABLE;
 8007252:	2300      	movs	r3, #0
 8007254:	f887 306c 	strb.w	r3, [r7, #108]	; 0x6c
  macDefaultConf.ReceiveFlowControl = DISABLE;
 8007258:	2300      	movs	r3, #0
 800725a:	f887 3082 	strb.w	r3, [r7, #130]	; 0x82
  macDefaultConf.ReceiveOwn = ENABLE;
 800725e:	2301      	movs	r3, #1
 8007260:	f887 304a 	strb.w	r3, [r7, #74]	; 0x4a
  macDefaultConf.ReceiveQueueMode = ETH_RECEIVESTOREFORWARD;
 8007264:	2320      	movs	r3, #32
 8007266:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  macDefaultConf.RetryTransmission = ENABLE;
 800726a:	2301      	movs	r3, #1
 800726c:	f887 304c 	strb.w	r3, [r7, #76]	; 0x4c
  macDefaultConf.SlowProtocolDetect = DISABLE;
 8007270:	2300      	movs	r3, #0
 8007272:	f887 305d 	strb.w	r3, [r7, #93]	; 0x5d
  macDefaultConf.SourceAddrControl = ETH_SOURCEADDRESS_REPLACE_ADDR0;
 8007276:	f04f 5340 	mov.w	r3, #805306368	; 0x30000000
 800727a:	62fb      	str	r3, [r7, #44]	; 0x2c
  macDefaultConf.Speed = ETH_SPEED_100M;
 800727c:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8007280:	643b      	str	r3, [r7, #64]	; 0x40
  macDefaultConf.Support2KPacket = DISABLE;
 8007282:	2300      	movs	r3, #0
 8007284:	f887 3039 	strb.w	r3, [r7, #57]	; 0x39
  macDefaultConf.TransmitQueueMode = ETH_TRANSMITSTOREFORWARD;
 8007288:	2302      	movs	r3, #2
 800728a:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  macDefaultConf.TransmitFlowControl = DISABLE;
 800728e:	2300      	movs	r3, #0
 8007290:	f887 3080 	strb.w	r3, [r7, #128]	; 0x80
  macDefaultConf.UnicastPausePacketDetect = DISABLE;
 8007294:	2300      	movs	r3, #0
 8007296:	f887 3081 	strb.w	r3, [r7, #129]	; 0x81
  macDefaultConf.UnicastSlowProtocolPacketDetect = DISABLE;
 800729a:	2300      	movs	r3, #0
 800729c:	f887 305c 	strb.w	r3, [r7, #92]	; 0x5c
  macDefaultConf.Watchdog = ENABLE;
 80072a0:	2301      	movs	r3, #1
 80072a2:	f887 303c 	strb.w	r3, [r7, #60]	; 0x3c
  macDefaultConf.WatchdogTimeout =  ETH_MACWTR_WTO_2KB;
 80072a6:	2300      	movs	r3, #0
 80072a8:	673b      	str	r3, [r7, #112]	; 0x70
  macDefaultConf.ZeroQuantaPause = ENABLE;
 80072aa:	2301      	movs	r3, #1
 80072ac:	f887 3078 	strb.w	r3, [r7, #120]	; 0x78

  /* MAC default configuration */
  ETH_SetMACConfig(heth, &macDefaultConf);
 80072b0:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80072b4:	4619      	mov	r1, r3
 80072b6:	6878      	ldr	r0, [r7, #4]
 80072b8:	f7ff fde6 	bl	8006e88 <ETH_SetMACConfig>

  /*--------------- ETHERNET DMA registers default Configuration --------------*/
  dmaDefaultConf.AddressAlignedBeats = ENABLE;
 80072bc:	2301      	movs	r3, #1
 80072be:	733b      	strb	r3, [r7, #12]
  dmaDefaultConf.BurstMode = ETH_BURSTLENGTH_FIXED;
 80072c0:	2301      	movs	r3, #1
 80072c2:	613b      	str	r3, [r7, #16]
  dmaDefaultConf.DMAArbitration = ETH_DMAARBITRATION_RX1_TX1;
 80072c4:	2300      	movs	r3, #0
 80072c6:	60bb      	str	r3, [r7, #8]
  dmaDefaultConf.FlushRxPacket = DISABLE;
 80072c8:	2300      	movs	r3, #0
 80072ca:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
  dmaDefaultConf.PBLx8Mode = DISABLE;
 80072ce:	2300      	movs	r3, #0
 80072d0:	757b      	strb	r3, [r7, #21]
  dmaDefaultConf.RebuildINCRxBurst = DISABLE;
 80072d2:	2300      	movs	r3, #0
 80072d4:	753b      	strb	r3, [r7, #20]
  dmaDefaultConf.RxDMABurstLength = ETH_RXDMABURSTLENGTH_32BEAT;
 80072d6:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 80072da:	623b      	str	r3, [r7, #32]
  dmaDefaultConf.SecondPacketOperate = DISABLE;
 80072dc:	2300      	movs	r3, #0
 80072de:	773b      	strb	r3, [r7, #28]
  dmaDefaultConf.TxDMABurstLength = ETH_TXDMABURSTLENGTH_32BEAT;
 80072e0:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 80072e4:	61bb      	str	r3, [r7, #24]
  dmaDefaultConf.TCPSegmentation = DISABLE;
 80072e6:	2300      	movs	r3, #0
 80072e8:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
  dmaDefaultConf.MaximumSegmentSize = ETH_SEGMENT_SIZE_DEFAULT;
 80072ec:	f44f 7306 	mov.w	r3, #536	; 0x218
 80072f0:	62bb      	str	r3, [r7, #40]	; 0x28

  /* DMA default configuration */
  ETH_SetDMAConfig(heth, &dmaDefaultConf);
 80072f2:	f107 0308 	add.w	r3, r7, #8
 80072f6:	4619      	mov	r1, r3
 80072f8:	6878      	ldr	r0, [r7, #4]
 80072fa:	f7ff fee1 	bl	80070c0 <ETH_SetDMAConfig>
}
 80072fe:	bf00      	nop
 8007300:	3790      	adds	r7, #144	; 0x90
 8007302:	46bd      	mov	sp, r7
 8007304:	bd80      	pop	{r7, pc}

08007306 <ETH_DMATxDescListInit>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_DMATxDescListInit(ETH_HandleTypeDef *heth)
{
 8007306:	b480      	push	{r7}
 8007308:	b085      	sub	sp, #20
 800730a:	af00      	add	r7, sp, #0
 800730c:	6078      	str	r0, [r7, #4]
  ETH_DMADescTypeDef *dmatxdesc;
  uint32_t i;

  /* Fill each DMATxDesc descriptor with the right values */
  for (i = 0; i < (uint32_t)ETH_TX_DESC_CNT; i++)
 800730e:	2300      	movs	r3, #0
 8007310:	60fb      	str	r3, [r7, #12]
 8007312:	e01d      	b.n	8007350 <ETH_DMATxDescListInit+0x4a>
  {
    dmatxdesc = heth->Init.TxDesc + i;
 8007314:	687b      	ldr	r3, [r7, #4]
 8007316:	68d9      	ldr	r1, [r3, #12]
 8007318:	68fa      	ldr	r2, [r7, #12]
 800731a:	4613      	mov	r3, r2
 800731c:	005b      	lsls	r3, r3, #1
 800731e:	4413      	add	r3, r2
 8007320:	00db      	lsls	r3, r3, #3
 8007322:	440b      	add	r3, r1
 8007324:	60bb      	str	r3, [r7, #8]

    WRITE_REG(dmatxdesc->DESC0, 0x0);
 8007326:	68bb      	ldr	r3, [r7, #8]
 8007328:	2200      	movs	r2, #0
 800732a:	601a      	str	r2, [r3, #0]
    WRITE_REG(dmatxdesc->DESC1, 0x0);
 800732c:	68bb      	ldr	r3, [r7, #8]
 800732e:	2200      	movs	r2, #0
 8007330:	605a      	str	r2, [r3, #4]
    WRITE_REG(dmatxdesc->DESC2, 0x0);
 8007332:	68bb      	ldr	r3, [r7, #8]
 8007334:	2200      	movs	r2, #0
 8007336:	609a      	str	r2, [r3, #8]
    WRITE_REG(dmatxdesc->DESC3, 0x0);
 8007338:	68bb      	ldr	r3, [r7, #8]
 800733a:	2200      	movs	r2, #0
 800733c:	60da      	str	r2, [r3, #12]

    WRITE_REG(heth->TxDescList.TxDesc[i], (uint32_t)dmatxdesc);
 800733e:	68b9      	ldr	r1, [r7, #8]
 8007340:	687b      	ldr	r3, [r7, #4]
 8007342:	68fa      	ldr	r2, [r7, #12]
 8007344:	3206      	adds	r2, #6
 8007346:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  for (i = 0; i < (uint32_t)ETH_TX_DESC_CNT; i++)
 800734a:	68fb      	ldr	r3, [r7, #12]
 800734c:	3301      	adds	r3, #1
 800734e:	60fb      	str	r3, [r7, #12]
 8007350:	68fb      	ldr	r3, [r7, #12]
 8007352:	2b03      	cmp	r3, #3
 8007354:	d9de      	bls.n	8007314 <ETH_DMATxDescListInit+0xe>

  }

  heth->TxDescList.CurTxDesc = 0;
 8007356:	687b      	ldr	r3, [r7, #4]
 8007358:	2200      	movs	r2, #0
 800735a:	629a      	str	r2, [r3, #40]	; 0x28

  /* Set Transmit Descriptor Ring Length */
  WRITE_REG(heth->Instance->DMACTDRLR, (ETH_TX_DESC_CNT - 1U));
 800735c:	687b      	ldr	r3, [r7, #4]
 800735e:	681b      	ldr	r3, [r3, #0]
 8007360:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8007364:	461a      	mov	r2, r3
 8007366:	2303      	movs	r3, #3
 8007368:	f8c2 312c 	str.w	r3, [r2, #300]	; 0x12c

  /* Set Transmit Descriptor List Address */
  WRITE_REG(heth->Instance->DMACTDLAR, (uint32_t) heth->Init.TxDesc);
 800736c:	687b      	ldr	r3, [r7, #4]
 800736e:	68da      	ldr	r2, [r3, #12]
 8007370:	687b      	ldr	r3, [r7, #4]
 8007372:	681b      	ldr	r3, [r3, #0]
 8007374:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8007378:	f8c3 2114 	str.w	r2, [r3, #276]	; 0x114

  /* Set Transmit Descriptor Tail pointer */
  WRITE_REG(heth->Instance->DMACTDTPR, (uint32_t) heth->Init.TxDesc);
 800737c:	687b      	ldr	r3, [r7, #4]
 800737e:	68da      	ldr	r2, [r3, #12]
 8007380:	687b      	ldr	r3, [r7, #4]
 8007382:	681b      	ldr	r3, [r3, #0]
 8007384:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8007388:	f8c3 2120 	str.w	r2, [r3, #288]	; 0x120
}
 800738c:	bf00      	nop
 800738e:	3714      	adds	r7, #20
 8007390:	46bd      	mov	sp, r7
 8007392:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007396:	4770      	bx	lr

08007398 <ETH_DMARxDescListInit>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_DMARxDescListInit(ETH_HandleTypeDef *heth)
{
 8007398:	b480      	push	{r7}
 800739a:	b085      	sub	sp, #20
 800739c:	af00      	add	r7, sp, #0
 800739e:	6078      	str	r0, [r7, #4]
  ETH_DMADescTypeDef *dmarxdesc;
  uint32_t i;

  for (i = 0; i < (uint32_t)ETH_RX_DESC_CNT; i++)
 80073a0:	2300      	movs	r3, #0
 80073a2:	60fb      	str	r3, [r7, #12]
 80073a4:	e023      	b.n	80073ee <ETH_DMARxDescListInit+0x56>
  {
    dmarxdesc =  heth->Init.RxDesc + i;
 80073a6:	687b      	ldr	r3, [r7, #4]
 80073a8:	6919      	ldr	r1, [r3, #16]
 80073aa:	68fa      	ldr	r2, [r7, #12]
 80073ac:	4613      	mov	r3, r2
 80073ae:	005b      	lsls	r3, r3, #1
 80073b0:	4413      	add	r3, r2
 80073b2:	00db      	lsls	r3, r3, #3
 80073b4:	440b      	add	r3, r1
 80073b6:	60bb      	str	r3, [r7, #8]

    WRITE_REG(dmarxdesc->DESC0, 0x0);
 80073b8:	68bb      	ldr	r3, [r7, #8]
 80073ba:	2200      	movs	r2, #0
 80073bc:	601a      	str	r2, [r3, #0]
    WRITE_REG(dmarxdesc->DESC1, 0x0);
 80073be:	68bb      	ldr	r3, [r7, #8]
 80073c0:	2200      	movs	r2, #0
 80073c2:	605a      	str	r2, [r3, #4]
    WRITE_REG(dmarxdesc->DESC2, 0x0);
 80073c4:	68bb      	ldr	r3, [r7, #8]
 80073c6:	2200      	movs	r2, #0
 80073c8:	609a      	str	r2, [r3, #8]
    WRITE_REG(dmarxdesc->DESC3, 0x0);
 80073ca:	68bb      	ldr	r3, [r7, #8]
 80073cc:	2200      	movs	r2, #0
 80073ce:	60da      	str	r2, [r3, #12]
    WRITE_REG(dmarxdesc->BackupAddr0, 0x0);
 80073d0:	68bb      	ldr	r3, [r7, #8]
 80073d2:	2200      	movs	r2, #0
 80073d4:	611a      	str	r2, [r3, #16]
    WRITE_REG(dmarxdesc->BackupAddr1, 0x0);
 80073d6:	68bb      	ldr	r3, [r7, #8]
 80073d8:	2200      	movs	r2, #0
 80073da:	615a      	str	r2, [r3, #20]


    /* Set Rx descritors addresses */
    WRITE_REG(heth->RxDescList.RxDesc[i], (uint32_t)dmarxdesc);
 80073dc:	68b9      	ldr	r1, [r7, #8]
 80073de:	687b      	ldr	r3, [r7, #4]
 80073e0:	68fa      	ldr	r2, [r7, #12]
 80073e2:	3212      	adds	r2, #18
 80073e4:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  for (i = 0; i < (uint32_t)ETH_RX_DESC_CNT; i++)
 80073e8:	68fb      	ldr	r3, [r7, #12]
 80073ea:	3301      	adds	r3, #1
 80073ec:	60fb      	str	r3, [r7, #12]
 80073ee:	68fb      	ldr	r3, [r7, #12]
 80073f0:	2b03      	cmp	r3, #3
 80073f2:	d9d8      	bls.n	80073a6 <ETH_DMARxDescListInit+0xe>

  }

  WRITE_REG(heth->RxDescList.RxDescIdx, 0);
 80073f4:	687b      	ldr	r3, [r7, #4]
 80073f6:	2200      	movs	r2, #0
 80073f8:	65da      	str	r2, [r3, #92]	; 0x5c
  WRITE_REG(heth->RxDescList.RxDescCnt, 0);
 80073fa:	687b      	ldr	r3, [r7, #4]
 80073fc:	2200      	movs	r2, #0
 80073fe:	661a      	str	r2, [r3, #96]	; 0x60
  WRITE_REG(heth->RxDescList.RxBuildDescIdx, 0);
 8007400:	687b      	ldr	r3, [r7, #4]
 8007402:	2200      	movs	r2, #0
 8007404:	669a      	str	r2, [r3, #104]	; 0x68
  WRITE_REG(heth->RxDescList.RxBuildDescCnt, 0);
 8007406:	687b      	ldr	r3, [r7, #4]
 8007408:	2200      	movs	r2, #0
 800740a:	66da      	str	r2, [r3, #108]	; 0x6c
  WRITE_REG(heth->RxDescList.ItMode, 0);
 800740c:	687b      	ldr	r3, [r7, #4]
 800740e:	2200      	movs	r2, #0
 8007410:	659a      	str	r2, [r3, #88]	; 0x58

  /* Set Receive Descriptor Ring Length */
  WRITE_REG(heth->Instance->DMACRDRLR, ((uint32_t)(ETH_RX_DESC_CNT - 1U)));
 8007412:	687b      	ldr	r3, [r7, #4]
 8007414:	681b      	ldr	r3, [r3, #0]
 8007416:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800741a:	461a      	mov	r2, r3
 800741c:	2303      	movs	r3, #3
 800741e:	f8c2 3130 	str.w	r3, [r2, #304]	; 0x130

  /* Set Receive Descriptor List Address */
  WRITE_REG(heth->Instance->DMACRDLAR, (uint32_t) heth->Init.RxDesc);
 8007422:	687b      	ldr	r3, [r7, #4]
 8007424:	691a      	ldr	r2, [r3, #16]
 8007426:	687b      	ldr	r3, [r7, #4]
 8007428:	681b      	ldr	r3, [r3, #0]
 800742a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800742e:	f8c3 211c 	str.w	r2, [r3, #284]	; 0x11c

  /* Set Receive Descriptor Tail pointer Address */
  WRITE_REG(heth->Instance->DMACRDTPR, ((uint32_t)(heth->Init.RxDesc + (uint32_t)(ETH_RX_DESC_CNT - 1U))));
 8007432:	687b      	ldr	r3, [r7, #4]
 8007434:	691b      	ldr	r3, [r3, #16]
 8007436:	f103 0248 	add.w	r2, r3, #72	; 0x48
 800743a:	687b      	ldr	r3, [r7, #4]
 800743c:	681b      	ldr	r3, [r3, #0]
 800743e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8007442:	f8c3 2128 	str.w	r2, [r3, #296]	; 0x128
}
 8007446:	bf00      	nop
 8007448:	3714      	adds	r7, #20
 800744a:	46bd      	mov	sp, r7
 800744c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007450:	4770      	bx	lr
	...

08007454 <ETH_Prepare_Tx_Descriptors>:
  * @param  pTxConfig: Tx packet configuration
  * @param  ItMode: Enable or disable Tx EOT interrept
  * @retval Status
  */
static uint32_t ETH_Prepare_Tx_Descriptors(ETH_HandleTypeDef *heth, ETH_TxPacketConfig *pTxConfig, uint32_t ItMode)
{
 8007454:	b480      	push	{r7}
 8007456:	b08d      	sub	sp, #52	; 0x34
 8007458:	af00      	add	r7, sp, #0
 800745a:	60f8      	str	r0, [r7, #12]
 800745c:	60b9      	str	r1, [r7, #8]
 800745e:	607a      	str	r2, [r7, #4]
  ETH_TxDescListTypeDef *dmatxdesclist = &heth->TxDescList;
 8007460:	68fb      	ldr	r3, [r7, #12]
 8007462:	3318      	adds	r3, #24
 8007464:	617b      	str	r3, [r7, #20]
  uint32_t descidx = dmatxdesclist->CurTxDesc;
 8007466:	697b      	ldr	r3, [r7, #20]
 8007468:	691b      	ldr	r3, [r3, #16]
 800746a:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t firstdescidx = dmatxdesclist->CurTxDesc;
 800746c:	697b      	ldr	r3, [r7, #20]
 800746e:	691b      	ldr	r3, [r3, #16]
 8007470:	613b      	str	r3, [r7, #16]
  uint32_t idx;
  uint32_t descnbr = 0;
 8007472:	2300      	movs	r3, #0
 8007474:	627b      	str	r3, [r7, #36]	; 0x24
  ETH_DMADescTypeDef *dmatxdesc = (ETH_DMADescTypeDef *)dmatxdesclist->TxDesc[descidx];
 8007476:	697b      	ldr	r3, [r7, #20]
 8007478:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800747a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800747e:	623b      	str	r3, [r7, #32]

  ETH_BufferTypeDef  *txbuffer = pTxConfig->TxBuffer;
 8007480:	68bb      	ldr	r3, [r7, #8]
 8007482:	689b      	ldr	r3, [r3, #8]
 8007484:	61fb      	str	r3, [r7, #28]
  uint32_t           bd_count = 0;
 8007486:	2300      	movs	r3, #0
 8007488:	61bb      	str	r3, [r7, #24]

  /* Current Tx Descriptor Owned by DMA: cannot be used by the application  */
  if ((READ_BIT(dmatxdesc->DESC3, ETH_DMATXNDESCWBF_OWN) == ETH_DMATXNDESCWBF_OWN)
 800748a:	6a3b      	ldr	r3, [r7, #32]
 800748c:	68db      	ldr	r3, [r3, #12]
 800748e:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8007492:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8007496:	d007      	beq.n	80074a8 <ETH_Prepare_Tx_Descriptors+0x54>
      || (dmatxdesclist->PacketAddress[descidx] != NULL))
 8007498:	697a      	ldr	r2, [r7, #20]
 800749a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800749c:	3304      	adds	r3, #4
 800749e:	009b      	lsls	r3, r3, #2
 80074a0:	4413      	add	r3, r2
 80074a2:	685b      	ldr	r3, [r3, #4]
 80074a4:	2b00      	cmp	r3, #0
 80074a6:	d001      	beq.n	80074ac <ETH_Prepare_Tx_Descriptors+0x58>
  {
    return HAL_ETH_ERROR_BUSY;
 80074a8:	2302      	movs	r3, #2
 80074aa:	e259      	b.n	8007960 <ETH_Prepare_Tx_Descriptors+0x50c>

  /***************************************************************************/
  /*****************    Context descriptor configuration (Optional) **********/
  /***************************************************************************/
  /* If VLAN tag is enabled for this packet */
  if (READ_BIT(pTxConfig->Attributes, ETH_TX_PACKETS_FEATURES_VLANTAG) != (uint32_t)RESET)
 80074ac:	68bb      	ldr	r3, [r7, #8]
 80074ae:	681b      	ldr	r3, [r3, #0]
 80074b0:	f003 0304 	and.w	r3, r3, #4
 80074b4:	2b00      	cmp	r3, #0
 80074b6:	d044      	beq.n	8007542 <ETH_Prepare_Tx_Descriptors+0xee>
  {
    /* Set vlan tag value */
    MODIFY_REG(dmatxdesc->DESC3, ETH_DMATXCDESC_VT, pTxConfig->VlanTag);
 80074b8:	6a3b      	ldr	r3, [r7, #32]
 80074ba:	68da      	ldr	r2, [r3, #12]
 80074bc:	4b75      	ldr	r3, [pc, #468]	; (8007694 <ETH_Prepare_Tx_Descriptors+0x240>)
 80074be:	4013      	ands	r3, r2
 80074c0:	68ba      	ldr	r2, [r7, #8]
 80074c2:	6a52      	ldr	r2, [r2, #36]	; 0x24
 80074c4:	431a      	orrs	r2, r3
 80074c6:	6a3b      	ldr	r3, [r7, #32]
 80074c8:	60da      	str	r2, [r3, #12]
    /* Set vlan tag valid bit */
    SET_BIT(dmatxdesc->DESC3, ETH_DMATXCDESC_VLTV);
 80074ca:	6a3b      	ldr	r3, [r7, #32]
 80074cc:	68db      	ldr	r3, [r3, #12]
 80074ce:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 80074d2:	6a3b      	ldr	r3, [r7, #32]
 80074d4:	60da      	str	r2, [r3, #12]
    /* Set the descriptor as the vlan input source */
    SET_BIT(heth->Instance->MACVIR, ETH_MACVIR_VLTI);
 80074d6:	68fb      	ldr	r3, [r7, #12]
 80074d8:	681b      	ldr	r3, [r3, #0]
 80074da:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 80074dc:	68fb      	ldr	r3, [r7, #12]
 80074de:	681b      	ldr	r3, [r3, #0]
 80074e0:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
 80074e4:	661a      	str	r2, [r3, #96]	; 0x60

    /* if inner VLAN is enabled */
    if (READ_BIT(pTxConfig->Attributes, ETH_TX_PACKETS_FEATURES_INNERVLANTAG) != (uint32_t)RESET)
 80074e6:	68bb      	ldr	r3, [r7, #8]
 80074e8:	681b      	ldr	r3, [r3, #0]
 80074ea:	f003 0308 	and.w	r3, r3, #8
 80074ee:	2b00      	cmp	r3, #0
 80074f0:	d027      	beq.n	8007542 <ETH_Prepare_Tx_Descriptors+0xee>
    {
      /* Set inner vlan tag value */
      MODIFY_REG(dmatxdesc->DESC2, ETH_DMATXCDESC_IVT, (pTxConfig->InnerVlanTag << 16));
 80074f2:	6a3b      	ldr	r3, [r7, #32]
 80074f4:	689b      	ldr	r3, [r3, #8]
 80074f6:	b29a      	uxth	r2, r3
 80074f8:	68bb      	ldr	r3, [r7, #8]
 80074fa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80074fc:	041b      	lsls	r3, r3, #16
 80074fe:	431a      	orrs	r2, r3
 8007500:	6a3b      	ldr	r3, [r7, #32]
 8007502:	609a      	str	r2, [r3, #8]
      /* Set inner vlan tag valid bit */
      SET_BIT(dmatxdesc->DESC3, ETH_DMATXCDESC_IVLTV);
 8007504:	6a3b      	ldr	r3, [r7, #32]
 8007506:	68db      	ldr	r3, [r3, #12]
 8007508:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 800750c:	6a3b      	ldr	r3, [r7, #32]
 800750e:	60da      	str	r2, [r3, #12]

      /* Set Vlan Tag control */
      MODIFY_REG(dmatxdesc->DESC3, ETH_DMATXCDESC_IVTIR, pTxConfig->InnerVlanCtrl);
 8007510:	6a3b      	ldr	r3, [r7, #32]
 8007512:	68db      	ldr	r3, [r3, #12]
 8007514:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8007518:	68bb      	ldr	r3, [r7, #8]
 800751a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800751c:	431a      	orrs	r2, r3
 800751e:	6a3b      	ldr	r3, [r7, #32]
 8007520:	60da      	str	r2, [r3, #12]

      /* Set the descriptor as the inner vlan input source */
      SET_BIT(heth->Instance->MACIVIR, ETH_MACIVIR_VLTI);
 8007522:	68fb      	ldr	r3, [r7, #12]
 8007524:	681b      	ldr	r3, [r3, #0]
 8007526:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 8007528:	68fb      	ldr	r3, [r7, #12]
 800752a:	681b      	ldr	r3, [r3, #0]
 800752c:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
 8007530:	665a      	str	r2, [r3, #100]	; 0x64
      /* Enable double VLAN processing */
      SET_BIT(heth->Instance->MACVTR, ETH_MACVTR_EDVLP);
 8007532:	68fb      	ldr	r3, [r7, #12]
 8007534:	681b      	ldr	r3, [r3, #0]
 8007536:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8007538:	68fb      	ldr	r3, [r7, #12]
 800753a:	681b      	ldr	r3, [r3, #0]
 800753c:	f042 6280 	orr.w	r2, r2, #67108864	; 0x4000000
 8007540:	651a      	str	r2, [r3, #80]	; 0x50
    }
  }

  /* if tcp segmentation is enabled for this packet */
  if (READ_BIT(pTxConfig->Attributes, ETH_TX_PACKETS_FEATURES_TSO) != (uint32_t)RESET)
 8007542:	68bb      	ldr	r3, [r7, #8]
 8007544:	681b      	ldr	r3, [r3, #0]
 8007546:	f003 0310 	and.w	r3, r3, #16
 800754a:	2b00      	cmp	r3, #0
 800754c:	d00e      	beq.n	800756c <ETH_Prepare_Tx_Descriptors+0x118>
  {
    /* Set MSS value */
    MODIFY_REG(dmatxdesc->DESC2, ETH_DMATXCDESC_MSS, pTxConfig->MaxSegmentSize);
 800754e:	6a3b      	ldr	r3, [r7, #32]
 8007550:	689a      	ldr	r2, [r3, #8]
 8007552:	4b51      	ldr	r3, [pc, #324]	; (8007698 <ETH_Prepare_Tx_Descriptors+0x244>)
 8007554:	4013      	ands	r3, r2
 8007556:	68ba      	ldr	r2, [r7, #8]
 8007558:	6992      	ldr	r2, [r2, #24]
 800755a:	431a      	orrs	r2, r3
 800755c:	6a3b      	ldr	r3, [r7, #32]
 800755e:	609a      	str	r2, [r3, #8]
    /* Set MSS valid bit */
    SET_BIT(dmatxdesc->DESC3, ETH_DMATXCDESC_TCMSSV);
 8007560:	6a3b      	ldr	r3, [r7, #32]
 8007562:	68db      	ldr	r3, [r3, #12]
 8007564:	f043 6280 	orr.w	r2, r3, #67108864	; 0x4000000
 8007568:	6a3b      	ldr	r3, [r7, #32]
 800756a:	60da      	str	r2, [r3, #12]
  }

  if ((READ_BIT(pTxConfig->Attributes, ETH_TX_PACKETS_FEATURES_VLANTAG) != (uint32_t)RESET)
 800756c:	68bb      	ldr	r3, [r7, #8]
 800756e:	681b      	ldr	r3, [r3, #0]
 8007570:	f003 0304 	and.w	r3, r3, #4
 8007574:	2b00      	cmp	r3, #0
 8007576:	d105      	bne.n	8007584 <ETH_Prepare_Tx_Descriptors+0x130>
      || (READ_BIT(pTxConfig->Attributes, ETH_TX_PACKETS_FEATURES_TSO) != (uint32_t)RESET))
 8007578:	68bb      	ldr	r3, [r7, #8]
 800757a:	681b      	ldr	r3, [r3, #0]
 800757c:	f003 0310 	and.w	r3, r3, #16
 8007580:	2b00      	cmp	r3, #0
 8007582:	d036      	beq.n	80075f2 <ETH_Prepare_Tx_Descriptors+0x19e>
  {
    /* Set as context descriptor */
    SET_BIT(dmatxdesc->DESC3, ETH_DMATXCDESC_CTXT);
 8007584:	6a3b      	ldr	r3, [r7, #32]
 8007586:	68db      	ldr	r3, [r3, #12]
 8007588:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 800758c:	6a3b      	ldr	r3, [r7, #32]
 800758e:	60da      	str	r2, [r3, #12]
  __ASM volatile ("dmb 0xF":::"memory");
 8007590:	f3bf 8f5f 	dmb	sy
}
 8007594:	bf00      	nop
    /* Ensure rest of descriptor is written to RAM before the OWN bit */
    __DMB();
    /* Set own bit */
    SET_BIT(dmatxdesc->DESC3, ETH_DMATXCDESC_OWN);
 8007596:	6a3b      	ldr	r3, [r7, #32]
 8007598:	68db      	ldr	r3, [r3, #12]
 800759a:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 800759e:	6a3b      	ldr	r3, [r7, #32]
 80075a0:	60da      	str	r2, [r3, #12]
    /* Increment current tx descriptor index */
    INCR_TX_DESC_INDEX(descidx, 1U);
 80075a2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80075a4:	3301      	adds	r3, #1
 80075a6:	62fb      	str	r3, [r7, #44]	; 0x2c
 80075a8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80075aa:	2b03      	cmp	r3, #3
 80075ac:	d902      	bls.n	80075b4 <ETH_Prepare_Tx_Descriptors+0x160>
 80075ae:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80075b0:	3b04      	subs	r3, #4
 80075b2:	62fb      	str	r3, [r7, #44]	; 0x2c
    /* Get current descriptor address */
    dmatxdesc = (ETH_DMADescTypeDef *)dmatxdesclist->TxDesc[descidx];
 80075b4:	697b      	ldr	r3, [r7, #20]
 80075b6:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80075b8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80075bc:	623b      	str	r3, [r7, #32]

    descnbr += 1U;
 80075be:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80075c0:	3301      	adds	r3, #1
 80075c2:	627b      	str	r3, [r7, #36]	; 0x24

    /* Current Tx Descriptor Owned by DMA: cannot be used by the application  */
    if (READ_BIT(dmatxdesc->DESC3, ETH_DMATXNDESCWBF_OWN) == ETH_DMATXNDESCWBF_OWN)
 80075c4:	6a3b      	ldr	r3, [r7, #32]
 80075c6:	68db      	ldr	r3, [r3, #12]
 80075c8:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80075cc:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80075d0:	d10f      	bne.n	80075f2 <ETH_Prepare_Tx_Descriptors+0x19e>
    {
      dmatxdesc = (ETH_DMADescTypeDef *)dmatxdesclist->TxDesc[firstdescidx];
 80075d2:	697b      	ldr	r3, [r7, #20]
 80075d4:	693a      	ldr	r2, [r7, #16]
 80075d6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80075da:	623b      	str	r3, [r7, #32]
  __ASM volatile ("dmb 0xF":::"memory");
 80075dc:	f3bf 8f5f 	dmb	sy
}
 80075e0:	bf00      	nop
      /* Ensure rest of descriptor is written to RAM before the OWN bit */
      __DMB();
      /* Clear own bit */
      CLEAR_BIT(dmatxdesc->DESC3, ETH_DMATXCDESC_OWN);
 80075e2:	6a3b      	ldr	r3, [r7, #32]
 80075e4:	68db      	ldr	r3, [r3, #12]
 80075e6:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 80075ea:	6a3b      	ldr	r3, [r7, #32]
 80075ec:	60da      	str	r2, [r3, #12]

      return HAL_ETH_ERROR_BUSY;
 80075ee:	2302      	movs	r3, #2
 80075f0:	e1b6      	b.n	8007960 <ETH_Prepare_Tx_Descriptors+0x50c>

  /***************************************************************************/
  /*****************    Normal descriptors configuration     *****************/
  /***************************************************************************/

  descnbr += 1U;
 80075f2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80075f4:	3301      	adds	r3, #1
 80075f6:	627b      	str	r3, [r7, #36]	; 0x24

  /* Set header or buffer 1 address */
  WRITE_REG(dmatxdesc->DESC0, (uint32_t)txbuffer->buffer);
 80075f8:	69fb      	ldr	r3, [r7, #28]
 80075fa:	681b      	ldr	r3, [r3, #0]
 80075fc:	461a      	mov	r2, r3
 80075fe:	6a3b      	ldr	r3, [r7, #32]
 8007600:	601a      	str	r2, [r3, #0]
  /* Set header or buffer 1 Length */
  MODIFY_REG(dmatxdesc->DESC2, ETH_DMATXNDESCRF_B1L, txbuffer->len);
 8007602:	6a3b      	ldr	r3, [r7, #32]
 8007604:	689a      	ldr	r2, [r3, #8]
 8007606:	4b24      	ldr	r3, [pc, #144]	; (8007698 <ETH_Prepare_Tx_Descriptors+0x244>)
 8007608:	4013      	ands	r3, r2
 800760a:	69fa      	ldr	r2, [r7, #28]
 800760c:	6852      	ldr	r2, [r2, #4]
 800760e:	431a      	orrs	r2, r3
 8007610:	6a3b      	ldr	r3, [r7, #32]
 8007612:	609a      	str	r2, [r3, #8]

  if (txbuffer->next != NULL)
 8007614:	69fb      	ldr	r3, [r7, #28]
 8007616:	689b      	ldr	r3, [r3, #8]
 8007618:	2b00      	cmp	r3, #0
 800761a:	d012      	beq.n	8007642 <ETH_Prepare_Tx_Descriptors+0x1ee>
  {
    txbuffer = txbuffer->next;
 800761c:	69fb      	ldr	r3, [r7, #28]
 800761e:	689b      	ldr	r3, [r3, #8]
 8007620:	61fb      	str	r3, [r7, #28]
    /* Set buffer 2 address */
    WRITE_REG(dmatxdesc->DESC1, (uint32_t)txbuffer->buffer);
 8007622:	69fb      	ldr	r3, [r7, #28]
 8007624:	681b      	ldr	r3, [r3, #0]
 8007626:	461a      	mov	r2, r3
 8007628:	6a3b      	ldr	r3, [r7, #32]
 800762a:	605a      	str	r2, [r3, #4]
    /* Set buffer 2 Length */
    MODIFY_REG(dmatxdesc->DESC2, ETH_DMATXNDESCRF_B2L, (txbuffer->len << 16));
 800762c:	6a3b      	ldr	r3, [r7, #32]
 800762e:	689a      	ldr	r2, [r3, #8]
 8007630:	4b1a      	ldr	r3, [pc, #104]	; (800769c <ETH_Prepare_Tx_Descriptors+0x248>)
 8007632:	4013      	ands	r3, r2
 8007634:	69fa      	ldr	r2, [r7, #28]
 8007636:	6852      	ldr	r2, [r2, #4]
 8007638:	0412      	lsls	r2, r2, #16
 800763a:	431a      	orrs	r2, r3
 800763c:	6a3b      	ldr	r3, [r7, #32]
 800763e:	609a      	str	r2, [r3, #8]
 8007640:	e008      	b.n	8007654 <ETH_Prepare_Tx_Descriptors+0x200>
  }
  else
  {
    WRITE_REG(dmatxdesc->DESC1, 0x0);
 8007642:	6a3b      	ldr	r3, [r7, #32]
 8007644:	2200      	movs	r2, #0
 8007646:	605a      	str	r2, [r3, #4]
    /* Set buffer 2 Length */
    MODIFY_REG(dmatxdesc->DESC2, ETH_DMATXNDESCRF_B2L, 0x0U);
 8007648:	6a3b      	ldr	r3, [r7, #32]
 800764a:	689a      	ldr	r2, [r3, #8]
 800764c:	4b13      	ldr	r3, [pc, #76]	; (800769c <ETH_Prepare_Tx_Descriptors+0x248>)
 800764e:	4013      	ands	r3, r2
 8007650:	6a3a      	ldr	r2, [r7, #32]
 8007652:	6093      	str	r3, [r2, #8]
  }

  if (READ_BIT(pTxConfig->Attributes, ETH_TX_PACKETS_FEATURES_TSO) != (uint32_t)RESET)
 8007654:	68bb      	ldr	r3, [r7, #8]
 8007656:	681b      	ldr	r3, [r3, #0]
 8007658:	f003 0310 	and.w	r3, r3, #16
 800765c:	2b00      	cmp	r3, #0
 800765e:	d021      	beq.n	80076a4 <ETH_Prepare_Tx_Descriptors+0x250>
  {
    /* Set TCP Header length */
    MODIFY_REG(dmatxdesc->DESC3, ETH_DMATXNDESCRF_THL, (pTxConfig->TCPHeaderLen << 19));
 8007660:	6a3b      	ldr	r3, [r7, #32]
 8007662:	68db      	ldr	r3, [r3, #12]
 8007664:	f423 02f0 	bic.w	r2, r3, #7864320	; 0x780000
 8007668:	68bb      	ldr	r3, [r7, #8]
 800766a:	6a1b      	ldr	r3, [r3, #32]
 800766c:	04db      	lsls	r3, r3, #19
 800766e:	431a      	orrs	r2, r3
 8007670:	6a3b      	ldr	r3, [r7, #32]
 8007672:	60da      	str	r2, [r3, #12]
    /* Set TCP payload length */
    MODIFY_REG(dmatxdesc->DESC3, ETH_DMATXNDESCRF_TPL, pTxConfig->PayloadLen);
 8007674:	6a3b      	ldr	r3, [r7, #32]
 8007676:	68da      	ldr	r2, [r3, #12]
 8007678:	4b09      	ldr	r3, [pc, #36]	; (80076a0 <ETH_Prepare_Tx_Descriptors+0x24c>)
 800767a:	4013      	ands	r3, r2
 800767c:	68ba      	ldr	r2, [r7, #8]
 800767e:	69d2      	ldr	r2, [r2, #28]
 8007680:	431a      	orrs	r2, r3
 8007682:	6a3b      	ldr	r3, [r7, #32]
 8007684:	60da      	str	r2, [r3, #12]
    /* Set TCP Segmentation Enabled bit */
    SET_BIT(dmatxdesc->DESC3, ETH_DMATXNDESCRF_TSE);
 8007686:	6a3b      	ldr	r3, [r7, #32]
 8007688:	68db      	ldr	r3, [r3, #12]
 800768a:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 800768e:	6a3b      	ldr	r3, [r7, #32]
 8007690:	60da      	str	r2, [r3, #12]
 8007692:	e02e      	b.n	80076f2 <ETH_Prepare_Tx_Descriptors+0x29e>
 8007694:	ffff0000 	.word	0xffff0000
 8007698:	ffffc000 	.word	0xffffc000
 800769c:	c000ffff 	.word	0xc000ffff
 80076a0:	fffc0000 	.word	0xfffc0000
  }
  else
  {
    MODIFY_REG(dmatxdesc->DESC3, ETH_DMATXNDESCRF_FL, pTxConfig->Length);
 80076a4:	6a3b      	ldr	r3, [r7, #32]
 80076a6:	68da      	ldr	r2, [r3, #12]
 80076a8:	4b7b      	ldr	r3, [pc, #492]	; (8007898 <ETH_Prepare_Tx_Descriptors+0x444>)
 80076aa:	4013      	ands	r3, r2
 80076ac:	68ba      	ldr	r2, [r7, #8]
 80076ae:	6852      	ldr	r2, [r2, #4]
 80076b0:	431a      	orrs	r2, r3
 80076b2:	6a3b      	ldr	r3, [r7, #32]
 80076b4:	60da      	str	r2, [r3, #12]

    if (READ_BIT(pTxConfig->Attributes, ETH_TX_PACKETS_FEATURES_CSUM) != (uint32_t)RESET)
 80076b6:	68bb      	ldr	r3, [r7, #8]
 80076b8:	681b      	ldr	r3, [r3, #0]
 80076ba:	f003 0301 	and.w	r3, r3, #1
 80076be:	2b00      	cmp	r3, #0
 80076c0:	d008      	beq.n	80076d4 <ETH_Prepare_Tx_Descriptors+0x280>
    {
      MODIFY_REG(dmatxdesc->DESC3, ETH_DMATXNDESCRF_CIC, pTxConfig->ChecksumCtrl);
 80076c2:	6a3b      	ldr	r3, [r7, #32]
 80076c4:	68db      	ldr	r3, [r3, #12]
 80076c6:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 80076ca:	68bb      	ldr	r3, [r7, #8]
 80076cc:	695b      	ldr	r3, [r3, #20]
 80076ce:	431a      	orrs	r2, r3
 80076d0:	6a3b      	ldr	r3, [r7, #32]
 80076d2:	60da      	str	r2, [r3, #12]
    }

    if (READ_BIT(pTxConfig->Attributes, ETH_TX_PACKETS_FEATURES_CRCPAD) != (uint32_t)RESET)
 80076d4:	68bb      	ldr	r3, [r7, #8]
 80076d6:	681b      	ldr	r3, [r3, #0]
 80076d8:	f003 0320 	and.w	r3, r3, #32
 80076dc:	2b00      	cmp	r3, #0
 80076de:	d008      	beq.n	80076f2 <ETH_Prepare_Tx_Descriptors+0x29e>
    {
      MODIFY_REG(dmatxdesc->DESC3, ETH_DMATXNDESCRF_CPC, pTxConfig->CRCPadCtrl);
 80076e0:	6a3b      	ldr	r3, [r7, #32]
 80076e2:	68db      	ldr	r3, [r3, #12]
 80076e4:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 80076e8:	68bb      	ldr	r3, [r7, #8]
 80076ea:	691b      	ldr	r3, [r3, #16]
 80076ec:	431a      	orrs	r2, r3
 80076ee:	6a3b      	ldr	r3, [r7, #32]
 80076f0:	60da      	str	r2, [r3, #12]
    }
  }

  if (READ_BIT(pTxConfig->Attributes, ETH_TX_PACKETS_FEATURES_VLANTAG) != (uint32_t)RESET)
 80076f2:	68bb      	ldr	r3, [r7, #8]
 80076f4:	681b      	ldr	r3, [r3, #0]
 80076f6:	f003 0304 	and.w	r3, r3, #4
 80076fa:	2b00      	cmp	r3, #0
 80076fc:	d008      	beq.n	8007710 <ETH_Prepare_Tx_Descriptors+0x2bc>
  {
    /* Set Vlan Tag control */
    MODIFY_REG(dmatxdesc->DESC2, ETH_DMATXNDESCRF_VTIR, pTxConfig->VlanCtrl);
 80076fe:	6a3b      	ldr	r3, [r7, #32]
 8007700:	689b      	ldr	r3, [r3, #8]
 8007702:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8007706:	68bb      	ldr	r3, [r7, #8]
 8007708:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800770a:	431a      	orrs	r2, r3
 800770c:	6a3b      	ldr	r3, [r7, #32]
 800770e:	609a      	str	r2, [r3, #8]
  }

  /* Mark it as First Descriptor */
  SET_BIT(dmatxdesc->DESC3, ETH_DMATXNDESCRF_FD);
 8007710:	6a3b      	ldr	r3, [r7, #32]
 8007712:	68db      	ldr	r3, [r3, #12]
 8007714:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 8007718:	6a3b      	ldr	r3, [r7, #32]
 800771a:	60da      	str	r2, [r3, #12]
  /* Mark it as NORMAL descriptor */
  CLEAR_BIT(dmatxdesc->DESC3, ETH_DMATXNDESCRF_CTXT);
 800771c:	6a3b      	ldr	r3, [r7, #32]
 800771e:	68db      	ldr	r3, [r3, #12]
 8007720:	f023 4280 	bic.w	r2, r3, #1073741824	; 0x40000000
 8007724:	6a3b      	ldr	r3, [r7, #32]
 8007726:	60da      	str	r2, [r3, #12]
  __ASM volatile ("dmb 0xF":::"memory");
 8007728:	f3bf 8f5f 	dmb	sy
}
 800772c:	bf00      	nop
  /* Ensure rest of descriptor is written to RAM before the OWN bit */
  __DMB();
  /* set OWN bit of FIRST descriptor */
  SET_BIT(dmatxdesc->DESC3, ETH_DMATXNDESCRF_OWN);
 800772e:	6a3b      	ldr	r3, [r7, #32]
 8007730:	68db      	ldr	r3, [r3, #12]
 8007732:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 8007736:	6a3b      	ldr	r3, [r7, #32]
 8007738:	60da      	str	r2, [r3, #12]

  /* If source address insertion/replacement is enabled for this packet */
  if (READ_BIT(pTxConfig->Attributes, ETH_TX_PACKETS_FEATURES_SAIC) != (uint32_t)RESET)
 800773a:	68bb      	ldr	r3, [r7, #8]
 800773c:	681b      	ldr	r3, [r3, #0]
 800773e:	f003 0302 	and.w	r3, r3, #2
 8007742:	2b00      	cmp	r3, #0
 8007744:	f000 80da 	beq.w	80078fc <ETH_Prepare_Tx_Descriptors+0x4a8>
  {
    MODIFY_REG(dmatxdesc->DESC3, ETH_DMATXNDESCRF_SAIC, pTxConfig->SrcAddrCtrl);
 8007748:	6a3b      	ldr	r3, [r7, #32]
 800774a:	68db      	ldr	r3, [r3, #12]
 800774c:	f023 7260 	bic.w	r2, r3, #58720256	; 0x3800000
 8007750:	68bb      	ldr	r3, [r7, #8]
 8007752:	68db      	ldr	r3, [r3, #12]
 8007754:	431a      	orrs	r2, r3
 8007756:	6a3b      	ldr	r3, [r7, #32]
 8007758:	60da      	str	r2, [r3, #12]
  }

  /* only if the packet is split into more than one descriptors > 1 */
  while (txbuffer->next != NULL)
 800775a:	e0cf      	b.n	80078fc <ETH_Prepare_Tx_Descriptors+0x4a8>
  {
    /* Clear the LD bit of previous descriptor */
    CLEAR_BIT(dmatxdesc->DESC3, ETH_DMATXNDESCRF_LD);
 800775c:	6a3b      	ldr	r3, [r7, #32]
 800775e:	68db      	ldr	r3, [r3, #12]
 8007760:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 8007764:	6a3b      	ldr	r3, [r7, #32]
 8007766:	60da      	str	r2, [r3, #12]
    /* Increment current tx descriptor index */
    INCR_TX_DESC_INDEX(descidx, 1U);
 8007768:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800776a:	3301      	adds	r3, #1
 800776c:	62fb      	str	r3, [r7, #44]	; 0x2c
 800776e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007770:	2b03      	cmp	r3, #3
 8007772:	d902      	bls.n	800777a <ETH_Prepare_Tx_Descriptors+0x326>
 8007774:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007776:	3b04      	subs	r3, #4
 8007778:	62fb      	str	r3, [r7, #44]	; 0x2c
    /* Get current descriptor address */
    dmatxdesc = (ETH_DMADescTypeDef *)dmatxdesclist->TxDesc[descidx];
 800777a:	697b      	ldr	r3, [r7, #20]
 800777c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800777e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007782:	623b      	str	r3, [r7, #32]

    /* Clear the FD bit of new Descriptor */
    CLEAR_BIT(dmatxdesc->DESC3, ETH_DMATXNDESCRF_FD);
 8007784:	6a3b      	ldr	r3, [r7, #32]
 8007786:	68db      	ldr	r3, [r3, #12]
 8007788:	f023 5200 	bic.w	r2, r3, #536870912	; 0x20000000
 800778c:	6a3b      	ldr	r3, [r7, #32]
 800778e:	60da      	str	r2, [r3, #12]

    /* Current Tx Descriptor Owned by DMA: cannot be used by the application  */
    if ((READ_BIT(dmatxdesc->DESC3, ETH_DMATXNDESCRF_OWN) == ETH_DMATXNDESCRF_OWN)
 8007790:	6a3b      	ldr	r3, [r7, #32]
 8007792:	68db      	ldr	r3, [r3, #12]
 8007794:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8007798:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800779c:	d007      	beq.n	80077ae <ETH_Prepare_Tx_Descriptors+0x35a>
        || (dmatxdesclist->PacketAddress[descidx] != NULL))
 800779e:	697a      	ldr	r2, [r7, #20]
 80077a0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80077a2:	3304      	adds	r3, #4
 80077a4:	009b      	lsls	r3, r3, #2
 80077a6:	4413      	add	r3, r2
 80077a8:	685b      	ldr	r3, [r3, #4]
 80077aa:	2b00      	cmp	r3, #0
 80077ac:	d029      	beq.n	8007802 <ETH_Prepare_Tx_Descriptors+0x3ae>
    {
      descidx = firstdescidx;
 80077ae:	693b      	ldr	r3, [r7, #16]
 80077b0:	62fb      	str	r3, [r7, #44]	; 0x2c
      dmatxdesc = (ETH_DMADescTypeDef *)dmatxdesclist->TxDesc[descidx];
 80077b2:	697b      	ldr	r3, [r7, #20]
 80077b4:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80077b6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80077ba:	623b      	str	r3, [r7, #32]

      /* clear previous desc own bit */
      for (idx = 0; idx < descnbr; idx ++)
 80077bc:	2300      	movs	r3, #0
 80077be:	62bb      	str	r3, [r7, #40]	; 0x28
 80077c0:	e019      	b.n	80077f6 <ETH_Prepare_Tx_Descriptors+0x3a2>
  __ASM volatile ("dmb 0xF":::"memory");
 80077c2:	f3bf 8f5f 	dmb	sy
}
 80077c6:	bf00      	nop
      {
        /* Ensure rest of descriptor is written to RAM before the OWN bit */
        __DMB();

        CLEAR_BIT(dmatxdesc->DESC3, ETH_DMATXNDESCRF_OWN);
 80077c8:	6a3b      	ldr	r3, [r7, #32]
 80077ca:	68db      	ldr	r3, [r3, #12]
 80077cc:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 80077d0:	6a3b      	ldr	r3, [r7, #32]
 80077d2:	60da      	str	r2, [r3, #12]

        /* Increment current tx descriptor index */
        INCR_TX_DESC_INDEX(descidx, 1U);
 80077d4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80077d6:	3301      	adds	r3, #1
 80077d8:	62fb      	str	r3, [r7, #44]	; 0x2c
 80077da:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80077dc:	2b03      	cmp	r3, #3
 80077de:	d902      	bls.n	80077e6 <ETH_Prepare_Tx_Descriptors+0x392>
 80077e0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80077e2:	3b04      	subs	r3, #4
 80077e4:	62fb      	str	r3, [r7, #44]	; 0x2c
        /* Get current descriptor address */
        dmatxdesc = (ETH_DMADescTypeDef *)dmatxdesclist->TxDesc[descidx];
 80077e6:	697b      	ldr	r3, [r7, #20]
 80077e8:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80077ea:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80077ee:	623b      	str	r3, [r7, #32]
      for (idx = 0; idx < descnbr; idx ++)
 80077f0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80077f2:	3301      	adds	r3, #1
 80077f4:	62bb      	str	r3, [r7, #40]	; 0x28
 80077f6:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80077f8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80077fa:	429a      	cmp	r2, r3
 80077fc:	d3e1      	bcc.n	80077c2 <ETH_Prepare_Tx_Descriptors+0x36e>
      }

      return HAL_ETH_ERROR_BUSY;
 80077fe:	2302      	movs	r3, #2
 8007800:	e0ae      	b.n	8007960 <ETH_Prepare_Tx_Descriptors+0x50c>
    }

    descnbr += 1U;
 8007802:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007804:	3301      	adds	r3, #1
 8007806:	627b      	str	r3, [r7, #36]	; 0x24

    /* Get the next Tx buffer in the list */
    txbuffer = txbuffer->next;
 8007808:	69fb      	ldr	r3, [r7, #28]
 800780a:	689b      	ldr	r3, [r3, #8]
 800780c:	61fb      	str	r3, [r7, #28]

    /* Set header or buffer 1 address */
    WRITE_REG(dmatxdesc->DESC0, (uint32_t)txbuffer->buffer);
 800780e:	69fb      	ldr	r3, [r7, #28]
 8007810:	681b      	ldr	r3, [r3, #0]
 8007812:	461a      	mov	r2, r3
 8007814:	6a3b      	ldr	r3, [r7, #32]
 8007816:	601a      	str	r2, [r3, #0]
    /* Set header or buffer 1 Length */
    MODIFY_REG(dmatxdesc->DESC2, ETH_DMATXNDESCRF_B1L, txbuffer->len);
 8007818:	6a3b      	ldr	r3, [r7, #32]
 800781a:	689a      	ldr	r2, [r3, #8]
 800781c:	4b1f      	ldr	r3, [pc, #124]	; (800789c <ETH_Prepare_Tx_Descriptors+0x448>)
 800781e:	4013      	ands	r3, r2
 8007820:	69fa      	ldr	r2, [r7, #28]
 8007822:	6852      	ldr	r2, [r2, #4]
 8007824:	431a      	orrs	r2, r3
 8007826:	6a3b      	ldr	r3, [r7, #32]
 8007828:	609a      	str	r2, [r3, #8]

    if (txbuffer->next != NULL)
 800782a:	69fb      	ldr	r3, [r7, #28]
 800782c:	689b      	ldr	r3, [r3, #8]
 800782e:	2b00      	cmp	r3, #0
 8007830:	d012      	beq.n	8007858 <ETH_Prepare_Tx_Descriptors+0x404>
    {
      /* Get the next Tx buffer in the list */
      txbuffer = txbuffer->next;
 8007832:	69fb      	ldr	r3, [r7, #28]
 8007834:	689b      	ldr	r3, [r3, #8]
 8007836:	61fb      	str	r3, [r7, #28]
      /* Set buffer 2 address */
      WRITE_REG(dmatxdesc->DESC1, (uint32_t)txbuffer->buffer);
 8007838:	69fb      	ldr	r3, [r7, #28]
 800783a:	681b      	ldr	r3, [r3, #0]
 800783c:	461a      	mov	r2, r3
 800783e:	6a3b      	ldr	r3, [r7, #32]
 8007840:	605a      	str	r2, [r3, #4]
      /* Set buffer 2 Length */
      MODIFY_REG(dmatxdesc->DESC2, ETH_DMATXNDESCRF_B2L, (txbuffer->len << 16));
 8007842:	6a3b      	ldr	r3, [r7, #32]
 8007844:	689a      	ldr	r2, [r3, #8]
 8007846:	4b16      	ldr	r3, [pc, #88]	; (80078a0 <ETH_Prepare_Tx_Descriptors+0x44c>)
 8007848:	4013      	ands	r3, r2
 800784a:	69fa      	ldr	r2, [r7, #28]
 800784c:	6852      	ldr	r2, [r2, #4]
 800784e:	0412      	lsls	r2, r2, #16
 8007850:	431a      	orrs	r2, r3
 8007852:	6a3b      	ldr	r3, [r7, #32]
 8007854:	609a      	str	r2, [r3, #8]
 8007856:	e008      	b.n	800786a <ETH_Prepare_Tx_Descriptors+0x416>
    }
    else
    {
      WRITE_REG(dmatxdesc->DESC1, 0x0);
 8007858:	6a3b      	ldr	r3, [r7, #32]
 800785a:	2200      	movs	r2, #0
 800785c:	605a      	str	r2, [r3, #4]
      /* Set buffer 2 Length */
      MODIFY_REG(dmatxdesc->DESC2, ETH_DMATXNDESCRF_B2L, 0x0U);
 800785e:	6a3b      	ldr	r3, [r7, #32]
 8007860:	689a      	ldr	r2, [r3, #8]
 8007862:	4b0f      	ldr	r3, [pc, #60]	; (80078a0 <ETH_Prepare_Tx_Descriptors+0x44c>)
 8007864:	4013      	ands	r3, r2
 8007866:	6a3a      	ldr	r2, [r7, #32]
 8007868:	6093      	str	r3, [r2, #8]
    }

    if (READ_BIT(pTxConfig->Attributes, ETH_TX_PACKETS_FEATURES_TSO) != (uint32_t)RESET)
 800786a:	68bb      	ldr	r3, [r7, #8]
 800786c:	681b      	ldr	r3, [r3, #0]
 800786e:	f003 0310 	and.w	r3, r3, #16
 8007872:	2b00      	cmp	r3, #0
 8007874:	d018      	beq.n	80078a8 <ETH_Prepare_Tx_Descriptors+0x454>
    {
      /* Set TCP payload length */
      MODIFY_REG(dmatxdesc->DESC3, ETH_DMATXNDESCRF_TPL, pTxConfig->PayloadLen);
 8007876:	6a3b      	ldr	r3, [r7, #32]
 8007878:	68da      	ldr	r2, [r3, #12]
 800787a:	4b0a      	ldr	r3, [pc, #40]	; (80078a4 <ETH_Prepare_Tx_Descriptors+0x450>)
 800787c:	4013      	ands	r3, r2
 800787e:	68ba      	ldr	r2, [r7, #8]
 8007880:	69d2      	ldr	r2, [r2, #28]
 8007882:	431a      	orrs	r2, r3
 8007884:	6a3b      	ldr	r3, [r7, #32]
 8007886:	60da      	str	r2, [r3, #12]
      /* Set TCP Segmentation Enabled bit */
      SET_BIT(dmatxdesc->DESC3, ETH_DMATXNDESCRF_TSE);
 8007888:	6a3b      	ldr	r3, [r7, #32]
 800788a:	68db      	ldr	r3, [r3, #12]
 800788c:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 8007890:	6a3b      	ldr	r3, [r7, #32]
 8007892:	60da      	str	r2, [r3, #12]
 8007894:	e020      	b.n	80078d8 <ETH_Prepare_Tx_Descriptors+0x484>
 8007896:	bf00      	nop
 8007898:	ffff8000 	.word	0xffff8000
 800789c:	ffffc000 	.word	0xffffc000
 80078a0:	c000ffff 	.word	0xc000ffff
 80078a4:	fffc0000 	.word	0xfffc0000
    }
    else
    {
      /* Set the packet length */
      MODIFY_REG(dmatxdesc->DESC3, ETH_DMATXNDESCRF_FL, pTxConfig->Length);
 80078a8:	6a3b      	ldr	r3, [r7, #32]
 80078aa:	68da      	ldr	r2, [r3, #12]
 80078ac:	4b2f      	ldr	r3, [pc, #188]	; (800796c <ETH_Prepare_Tx_Descriptors+0x518>)
 80078ae:	4013      	ands	r3, r2
 80078b0:	68ba      	ldr	r2, [r7, #8]
 80078b2:	6852      	ldr	r2, [r2, #4]
 80078b4:	431a      	orrs	r2, r3
 80078b6:	6a3b      	ldr	r3, [r7, #32]
 80078b8:	60da      	str	r2, [r3, #12]

      if (READ_BIT(pTxConfig->Attributes, ETH_TX_PACKETS_FEATURES_CSUM) != (uint32_t)RESET)
 80078ba:	68bb      	ldr	r3, [r7, #8]
 80078bc:	681b      	ldr	r3, [r3, #0]
 80078be:	f003 0301 	and.w	r3, r3, #1
 80078c2:	2b00      	cmp	r3, #0
 80078c4:	d008      	beq.n	80078d8 <ETH_Prepare_Tx_Descriptors+0x484>
      {
        /* Checksum Insertion Control */
        MODIFY_REG(dmatxdesc->DESC3, ETH_DMATXNDESCRF_CIC, pTxConfig->ChecksumCtrl);
 80078c6:	6a3b      	ldr	r3, [r7, #32]
 80078c8:	68db      	ldr	r3, [r3, #12]
 80078ca:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 80078ce:	68bb      	ldr	r3, [r7, #8]
 80078d0:	695b      	ldr	r3, [r3, #20]
 80078d2:	431a      	orrs	r2, r3
 80078d4:	6a3b      	ldr	r3, [r7, #32]
 80078d6:	60da      	str	r2, [r3, #12]
      }
    }

    bd_count += 1U;
 80078d8:	69bb      	ldr	r3, [r7, #24]
 80078da:	3301      	adds	r3, #1
 80078dc:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("dmb 0xF":::"memory");
 80078de:	f3bf 8f5f 	dmb	sy
}
 80078e2:	bf00      	nop

    /* Ensure rest of descriptor is written to RAM before the OWN bit */
    __DMB();
    /* Set Own bit */
    SET_BIT(dmatxdesc->DESC3, ETH_DMATXNDESCRF_OWN);
 80078e4:	6a3b      	ldr	r3, [r7, #32]
 80078e6:	68db      	ldr	r3, [r3, #12]
 80078e8:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 80078ec:	6a3b      	ldr	r3, [r7, #32]
 80078ee:	60da      	str	r2, [r3, #12]
    /* Mark it as NORMAL descriptor */
    CLEAR_BIT(dmatxdesc->DESC3, ETH_DMATXNDESCRF_CTXT);
 80078f0:	6a3b      	ldr	r3, [r7, #32]
 80078f2:	68db      	ldr	r3, [r3, #12]
 80078f4:	f023 4280 	bic.w	r2, r3, #1073741824	; 0x40000000
 80078f8:	6a3b      	ldr	r3, [r7, #32]
 80078fa:	60da      	str	r2, [r3, #12]
  while (txbuffer->next != NULL)
 80078fc:	69fb      	ldr	r3, [r7, #28]
 80078fe:	689b      	ldr	r3, [r3, #8]
 8007900:	2b00      	cmp	r3, #0
 8007902:	f47f af2b 	bne.w	800775c <ETH_Prepare_Tx_Descriptors+0x308>
  }

  if (ItMode != ((uint32_t)RESET))
 8007906:	687b      	ldr	r3, [r7, #4]
 8007908:	2b00      	cmp	r3, #0
 800790a:	d006      	beq.n	800791a <ETH_Prepare_Tx_Descriptors+0x4c6>
  {
    /* Set Interrupt on completion bit */
    SET_BIT(dmatxdesc->DESC2, ETH_DMATXNDESCRF_IOC);
 800790c:	6a3b      	ldr	r3, [r7, #32]
 800790e:	689b      	ldr	r3, [r3, #8]
 8007910:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 8007914:	6a3b      	ldr	r3, [r7, #32]
 8007916:	609a      	str	r2, [r3, #8]
 8007918:	e005      	b.n	8007926 <ETH_Prepare_Tx_Descriptors+0x4d2>
  }
  else
  {
    /* Clear Interrupt on completion bit */
    CLEAR_BIT(dmatxdesc->DESC2, ETH_DMATXNDESCRF_IOC);
 800791a:	6a3b      	ldr	r3, [r7, #32]
 800791c:	689b      	ldr	r3, [r3, #8]
 800791e:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8007922:	6a3b      	ldr	r3, [r7, #32]
 8007924:	609a      	str	r2, [r3, #8]
  }

  /* Mark it as LAST descriptor */
  SET_BIT(dmatxdesc->DESC3, ETH_DMATXNDESCRF_LD);
 8007926:	6a3b      	ldr	r3, [r7, #32]
 8007928:	68db      	ldr	r3, [r3, #12]
 800792a:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 800792e:	6a3b      	ldr	r3, [r7, #32]
 8007930:	60da      	str	r2, [r3, #12]
  /* Save the current packet address to expose it to the application */
  dmatxdesclist->PacketAddress[descidx] = dmatxdesclist->CurrentPacketAddress;
 8007932:	697b      	ldr	r3, [r7, #20]
 8007934:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8007936:	6979      	ldr	r1, [r7, #20]
 8007938:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800793a:	3304      	adds	r3, #4
 800793c:	009b      	lsls	r3, r3, #2
 800793e:	440b      	add	r3, r1
 8007940:	605a      	str	r2, [r3, #4]

  dmatxdesclist->CurTxDesc = descidx;
 8007942:	697b      	ldr	r3, [r7, #20]
 8007944:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8007946:	611a      	str	r2, [r3, #16]
  __ASM volatile ("cpsid i" : : : "memory");
 8007948:	b672      	cpsid	i
}
 800794a:	bf00      	nop

  /* disable the interrupt */
  __disable_irq();

  dmatxdesclist->BuffersInUse += bd_count + 1U;
 800794c:	697b      	ldr	r3, [r7, #20]
 800794e:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8007950:	69bb      	ldr	r3, [r7, #24]
 8007952:	4413      	add	r3, r2
 8007954:	1c5a      	adds	r2, r3, #1
 8007956:	697b      	ldr	r3, [r7, #20]
 8007958:	629a      	str	r2, [r3, #40]	; 0x28
  __ASM volatile ("cpsie i" : : : "memory");
 800795a:	b662      	cpsie	i
}
 800795c:	bf00      	nop
  /* Enable interrupts back */
  __enable_irq();


  /* Return function status */
  return HAL_ETH_ERROR_NONE;
 800795e:	2300      	movs	r3, #0
}
 8007960:	4618      	mov	r0, r3
 8007962:	3734      	adds	r7, #52	; 0x34
 8007964:	46bd      	mov	sp, r7
 8007966:	f85d 7b04 	ldr.w	r7, [sp], #4
 800796a:	4770      	bx	lr
 800796c:	ffff8000 	.word	0xffff8000

08007970 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8007970:	b480      	push	{r7}
 8007972:	b089      	sub	sp, #36	; 0x24
 8007974:	af00      	add	r7, sp, #0
 8007976:	6078      	str	r0, [r7, #4]
 8007978:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 800797a:	2300      	movs	r3, #0
 800797c:	61fb      	str	r3, [r7, #28]
  EXTI_Core_TypeDef *EXTI_CurrentCPU;

#if defined(DUAL_CORE) && defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_D2; /* EXTI for CM4 CPU */
#else
  EXTI_CurrentCPU = EXTI_D1; /* EXTI for CM7 CPU */
 800797e:	4b89      	ldr	r3, [pc, #548]	; (8007ba4 <HAL_GPIO_Init+0x234>)
 8007980:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8007982:	e194      	b.n	8007cae <HAL_GPIO_Init+0x33e>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8007984:	683b      	ldr	r3, [r7, #0]
 8007986:	681a      	ldr	r2, [r3, #0]
 8007988:	2101      	movs	r1, #1
 800798a:	69fb      	ldr	r3, [r7, #28]
 800798c:	fa01 f303 	lsl.w	r3, r1, r3
 8007990:	4013      	ands	r3, r2
 8007992:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00U)
 8007994:	693b      	ldr	r3, [r7, #16]
 8007996:	2b00      	cmp	r3, #0
 8007998:	f000 8186 	beq.w	8007ca8 <HAL_GPIO_Init+0x338>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 800799c:	683b      	ldr	r3, [r7, #0]
 800799e:	685b      	ldr	r3, [r3, #4]
 80079a0:	f003 0303 	and.w	r3, r3, #3
 80079a4:	2b01      	cmp	r3, #1
 80079a6:	d005      	beq.n	80079b4 <HAL_GPIO_Init+0x44>
 80079a8:	683b      	ldr	r3, [r7, #0]
 80079aa:	685b      	ldr	r3, [r3, #4]
 80079ac:	f003 0303 	and.w	r3, r3, #3
 80079b0:	2b02      	cmp	r3, #2
 80079b2:	d130      	bne.n	8007a16 <HAL_GPIO_Init+0xa6>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80079b4:	687b      	ldr	r3, [r7, #4]
 80079b6:	689b      	ldr	r3, [r3, #8]
 80079b8:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 80079ba:	69fb      	ldr	r3, [r7, #28]
 80079bc:	005b      	lsls	r3, r3, #1
 80079be:	2203      	movs	r2, #3
 80079c0:	fa02 f303 	lsl.w	r3, r2, r3
 80079c4:	43db      	mvns	r3, r3
 80079c6:	69ba      	ldr	r2, [r7, #24]
 80079c8:	4013      	ands	r3, r2
 80079ca:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80079cc:	683b      	ldr	r3, [r7, #0]
 80079ce:	68da      	ldr	r2, [r3, #12]
 80079d0:	69fb      	ldr	r3, [r7, #28]
 80079d2:	005b      	lsls	r3, r3, #1
 80079d4:	fa02 f303 	lsl.w	r3, r2, r3
 80079d8:	69ba      	ldr	r2, [r7, #24]
 80079da:	4313      	orrs	r3, r2
 80079dc:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80079de:	687b      	ldr	r3, [r7, #4]
 80079e0:	69ba      	ldr	r2, [r7, #24]
 80079e2:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80079e4:	687b      	ldr	r3, [r7, #4]
 80079e6:	685b      	ldr	r3, [r3, #4]
 80079e8:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 80079ea:	2201      	movs	r2, #1
 80079ec:	69fb      	ldr	r3, [r7, #28]
 80079ee:	fa02 f303 	lsl.w	r3, r2, r3
 80079f2:	43db      	mvns	r3, r3
 80079f4:	69ba      	ldr	r2, [r7, #24]
 80079f6:	4013      	ands	r3, r2
 80079f8:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80079fa:	683b      	ldr	r3, [r7, #0]
 80079fc:	685b      	ldr	r3, [r3, #4]
 80079fe:	091b      	lsrs	r3, r3, #4
 8007a00:	f003 0201 	and.w	r2, r3, #1
 8007a04:	69fb      	ldr	r3, [r7, #28]
 8007a06:	fa02 f303 	lsl.w	r3, r2, r3
 8007a0a:	69ba      	ldr	r2, [r7, #24]
 8007a0c:	4313      	orrs	r3, r2
 8007a0e:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8007a10:	687b      	ldr	r3, [r7, #4]
 8007a12:	69ba      	ldr	r2, [r7, #24]
 8007a14:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8007a16:	683b      	ldr	r3, [r7, #0]
 8007a18:	685b      	ldr	r3, [r3, #4]
 8007a1a:	f003 0303 	and.w	r3, r3, #3
 8007a1e:	2b03      	cmp	r3, #3
 8007a20:	d017      	beq.n	8007a52 <HAL_GPIO_Init+0xe2>
      {
       /* Check the Pull parameter */
       assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8007a22:	687b      	ldr	r3, [r7, #4]
 8007a24:	68db      	ldr	r3, [r3, #12]
 8007a26:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8007a28:	69fb      	ldr	r3, [r7, #28]
 8007a2a:	005b      	lsls	r3, r3, #1
 8007a2c:	2203      	movs	r2, #3
 8007a2e:	fa02 f303 	lsl.w	r3, r2, r3
 8007a32:	43db      	mvns	r3, r3
 8007a34:	69ba      	ldr	r2, [r7, #24]
 8007a36:	4013      	ands	r3, r2
 8007a38:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8007a3a:	683b      	ldr	r3, [r7, #0]
 8007a3c:	689a      	ldr	r2, [r3, #8]
 8007a3e:	69fb      	ldr	r3, [r7, #28]
 8007a40:	005b      	lsls	r3, r3, #1
 8007a42:	fa02 f303 	lsl.w	r3, r2, r3
 8007a46:	69ba      	ldr	r2, [r7, #24]
 8007a48:	4313      	orrs	r3, r2
 8007a4a:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8007a4c:	687b      	ldr	r3, [r7, #4]
 8007a4e:	69ba      	ldr	r2, [r7, #24]
 8007a50:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8007a52:	683b      	ldr	r3, [r7, #0]
 8007a54:	685b      	ldr	r3, [r3, #4]
 8007a56:	f003 0303 	and.w	r3, r3, #3
 8007a5a:	2b02      	cmp	r3, #2
 8007a5c:	d123      	bne.n	8007aa6 <HAL_GPIO_Init+0x136>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8007a5e:	69fb      	ldr	r3, [r7, #28]
 8007a60:	08da      	lsrs	r2, r3, #3
 8007a62:	687b      	ldr	r3, [r7, #4]
 8007a64:	3208      	adds	r2, #8
 8007a66:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007a6a:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8007a6c:	69fb      	ldr	r3, [r7, #28]
 8007a6e:	f003 0307 	and.w	r3, r3, #7
 8007a72:	009b      	lsls	r3, r3, #2
 8007a74:	220f      	movs	r2, #15
 8007a76:	fa02 f303 	lsl.w	r3, r2, r3
 8007a7a:	43db      	mvns	r3, r3
 8007a7c:	69ba      	ldr	r2, [r7, #24]
 8007a7e:	4013      	ands	r3, r2
 8007a80:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8007a82:	683b      	ldr	r3, [r7, #0]
 8007a84:	691a      	ldr	r2, [r3, #16]
 8007a86:	69fb      	ldr	r3, [r7, #28]
 8007a88:	f003 0307 	and.w	r3, r3, #7
 8007a8c:	009b      	lsls	r3, r3, #2
 8007a8e:	fa02 f303 	lsl.w	r3, r2, r3
 8007a92:	69ba      	ldr	r2, [r7, #24]
 8007a94:	4313      	orrs	r3, r2
 8007a96:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8007a98:	69fb      	ldr	r3, [r7, #28]
 8007a9a:	08da      	lsrs	r2, r3, #3
 8007a9c:	687b      	ldr	r3, [r7, #4]
 8007a9e:	3208      	adds	r2, #8
 8007aa0:	69b9      	ldr	r1, [r7, #24]
 8007aa2:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8007aa6:	687b      	ldr	r3, [r7, #4]
 8007aa8:	681b      	ldr	r3, [r3, #0]
 8007aaa:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8007aac:	69fb      	ldr	r3, [r7, #28]
 8007aae:	005b      	lsls	r3, r3, #1
 8007ab0:	2203      	movs	r2, #3
 8007ab2:	fa02 f303 	lsl.w	r3, r2, r3
 8007ab6:	43db      	mvns	r3, r3
 8007ab8:	69ba      	ldr	r2, [r7, #24]
 8007aba:	4013      	ands	r3, r2
 8007abc:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8007abe:	683b      	ldr	r3, [r7, #0]
 8007ac0:	685b      	ldr	r3, [r3, #4]
 8007ac2:	f003 0203 	and.w	r2, r3, #3
 8007ac6:	69fb      	ldr	r3, [r7, #28]
 8007ac8:	005b      	lsls	r3, r3, #1
 8007aca:	fa02 f303 	lsl.w	r3, r2, r3
 8007ace:	69ba      	ldr	r2, [r7, #24]
 8007ad0:	4313      	orrs	r3, r2
 8007ad2:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8007ad4:	687b      	ldr	r3, [r7, #4]
 8007ad6:	69ba      	ldr	r2, [r7, #24]
 8007ad8:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8007ada:	683b      	ldr	r3, [r7, #0]
 8007adc:	685b      	ldr	r3, [r3, #4]
 8007ade:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8007ae2:	2b00      	cmp	r3, #0
 8007ae4:	f000 80e0 	beq.w	8007ca8 <HAL_GPIO_Init+0x338>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8007ae8:	4b2f      	ldr	r3, [pc, #188]	; (8007ba8 <HAL_GPIO_Init+0x238>)
 8007aea:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8007aee:	4a2e      	ldr	r2, [pc, #184]	; (8007ba8 <HAL_GPIO_Init+0x238>)
 8007af0:	f043 0302 	orr.w	r3, r3, #2
 8007af4:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 8007af8:	4b2b      	ldr	r3, [pc, #172]	; (8007ba8 <HAL_GPIO_Init+0x238>)
 8007afa:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8007afe:	f003 0302 	and.w	r3, r3, #2
 8007b02:	60fb      	str	r3, [r7, #12]
 8007b04:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8007b06:	4a29      	ldr	r2, [pc, #164]	; (8007bac <HAL_GPIO_Init+0x23c>)
 8007b08:	69fb      	ldr	r3, [r7, #28]
 8007b0a:	089b      	lsrs	r3, r3, #2
 8007b0c:	3302      	adds	r3, #2
 8007b0e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8007b12:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8007b14:	69fb      	ldr	r3, [r7, #28]
 8007b16:	f003 0303 	and.w	r3, r3, #3
 8007b1a:	009b      	lsls	r3, r3, #2
 8007b1c:	220f      	movs	r2, #15
 8007b1e:	fa02 f303 	lsl.w	r3, r2, r3
 8007b22:	43db      	mvns	r3, r3
 8007b24:	69ba      	ldr	r2, [r7, #24]
 8007b26:	4013      	ands	r3, r2
 8007b28:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8007b2a:	687b      	ldr	r3, [r7, #4]
 8007b2c:	4a20      	ldr	r2, [pc, #128]	; (8007bb0 <HAL_GPIO_Init+0x240>)
 8007b2e:	4293      	cmp	r3, r2
 8007b30:	d052      	beq.n	8007bd8 <HAL_GPIO_Init+0x268>
 8007b32:	687b      	ldr	r3, [r7, #4]
 8007b34:	4a1f      	ldr	r2, [pc, #124]	; (8007bb4 <HAL_GPIO_Init+0x244>)
 8007b36:	4293      	cmp	r3, r2
 8007b38:	d031      	beq.n	8007b9e <HAL_GPIO_Init+0x22e>
 8007b3a:	687b      	ldr	r3, [r7, #4]
 8007b3c:	4a1e      	ldr	r2, [pc, #120]	; (8007bb8 <HAL_GPIO_Init+0x248>)
 8007b3e:	4293      	cmp	r3, r2
 8007b40:	d02b      	beq.n	8007b9a <HAL_GPIO_Init+0x22a>
 8007b42:	687b      	ldr	r3, [r7, #4]
 8007b44:	4a1d      	ldr	r2, [pc, #116]	; (8007bbc <HAL_GPIO_Init+0x24c>)
 8007b46:	4293      	cmp	r3, r2
 8007b48:	d025      	beq.n	8007b96 <HAL_GPIO_Init+0x226>
 8007b4a:	687b      	ldr	r3, [r7, #4]
 8007b4c:	4a1c      	ldr	r2, [pc, #112]	; (8007bc0 <HAL_GPIO_Init+0x250>)
 8007b4e:	4293      	cmp	r3, r2
 8007b50:	d01f      	beq.n	8007b92 <HAL_GPIO_Init+0x222>
 8007b52:	687b      	ldr	r3, [r7, #4]
 8007b54:	4a1b      	ldr	r2, [pc, #108]	; (8007bc4 <HAL_GPIO_Init+0x254>)
 8007b56:	4293      	cmp	r3, r2
 8007b58:	d019      	beq.n	8007b8e <HAL_GPIO_Init+0x21e>
 8007b5a:	687b      	ldr	r3, [r7, #4]
 8007b5c:	4a1a      	ldr	r2, [pc, #104]	; (8007bc8 <HAL_GPIO_Init+0x258>)
 8007b5e:	4293      	cmp	r3, r2
 8007b60:	d013      	beq.n	8007b8a <HAL_GPIO_Init+0x21a>
 8007b62:	687b      	ldr	r3, [r7, #4]
 8007b64:	4a19      	ldr	r2, [pc, #100]	; (8007bcc <HAL_GPIO_Init+0x25c>)
 8007b66:	4293      	cmp	r3, r2
 8007b68:	d00d      	beq.n	8007b86 <HAL_GPIO_Init+0x216>
 8007b6a:	687b      	ldr	r3, [r7, #4]
 8007b6c:	4a18      	ldr	r2, [pc, #96]	; (8007bd0 <HAL_GPIO_Init+0x260>)
 8007b6e:	4293      	cmp	r3, r2
 8007b70:	d007      	beq.n	8007b82 <HAL_GPIO_Init+0x212>
 8007b72:	687b      	ldr	r3, [r7, #4]
 8007b74:	4a17      	ldr	r2, [pc, #92]	; (8007bd4 <HAL_GPIO_Init+0x264>)
 8007b76:	4293      	cmp	r3, r2
 8007b78:	d101      	bne.n	8007b7e <HAL_GPIO_Init+0x20e>
 8007b7a:	2309      	movs	r3, #9
 8007b7c:	e02d      	b.n	8007bda <HAL_GPIO_Init+0x26a>
 8007b7e:	230a      	movs	r3, #10
 8007b80:	e02b      	b.n	8007bda <HAL_GPIO_Init+0x26a>
 8007b82:	2308      	movs	r3, #8
 8007b84:	e029      	b.n	8007bda <HAL_GPIO_Init+0x26a>
 8007b86:	2307      	movs	r3, #7
 8007b88:	e027      	b.n	8007bda <HAL_GPIO_Init+0x26a>
 8007b8a:	2306      	movs	r3, #6
 8007b8c:	e025      	b.n	8007bda <HAL_GPIO_Init+0x26a>
 8007b8e:	2305      	movs	r3, #5
 8007b90:	e023      	b.n	8007bda <HAL_GPIO_Init+0x26a>
 8007b92:	2304      	movs	r3, #4
 8007b94:	e021      	b.n	8007bda <HAL_GPIO_Init+0x26a>
 8007b96:	2303      	movs	r3, #3
 8007b98:	e01f      	b.n	8007bda <HAL_GPIO_Init+0x26a>
 8007b9a:	2302      	movs	r3, #2
 8007b9c:	e01d      	b.n	8007bda <HAL_GPIO_Init+0x26a>
 8007b9e:	2301      	movs	r3, #1
 8007ba0:	e01b      	b.n	8007bda <HAL_GPIO_Init+0x26a>
 8007ba2:	bf00      	nop
 8007ba4:	58000080 	.word	0x58000080
 8007ba8:	58024400 	.word	0x58024400
 8007bac:	58000400 	.word	0x58000400
 8007bb0:	58020000 	.word	0x58020000
 8007bb4:	58020400 	.word	0x58020400
 8007bb8:	58020800 	.word	0x58020800
 8007bbc:	58020c00 	.word	0x58020c00
 8007bc0:	58021000 	.word	0x58021000
 8007bc4:	58021400 	.word	0x58021400
 8007bc8:	58021800 	.word	0x58021800
 8007bcc:	58021c00 	.word	0x58021c00
 8007bd0:	58022000 	.word	0x58022000
 8007bd4:	58022400 	.word	0x58022400
 8007bd8:	2300      	movs	r3, #0
 8007bda:	69fa      	ldr	r2, [r7, #28]
 8007bdc:	f002 0203 	and.w	r2, r2, #3
 8007be0:	0092      	lsls	r2, r2, #2
 8007be2:	4093      	lsls	r3, r2
 8007be4:	69ba      	ldr	r2, [r7, #24]
 8007be6:	4313      	orrs	r3, r2
 8007be8:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8007bea:	4938      	ldr	r1, [pc, #224]	; (8007ccc <HAL_GPIO_Init+0x35c>)
 8007bec:	69fb      	ldr	r3, [r7, #28]
 8007bee:	089b      	lsrs	r3, r3, #2
 8007bf0:	3302      	adds	r3, #2
 8007bf2:	69ba      	ldr	r2, [r7, #24]
 8007bf4:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8007bf8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8007bfc:	681b      	ldr	r3, [r3, #0]
 8007bfe:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8007c00:	693b      	ldr	r3, [r7, #16]
 8007c02:	43db      	mvns	r3, r3
 8007c04:	69ba      	ldr	r2, [r7, #24]
 8007c06:	4013      	ands	r3, r2
 8007c08:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8007c0a:	683b      	ldr	r3, [r7, #0]
 8007c0c:	685b      	ldr	r3, [r3, #4]
 8007c0e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8007c12:	2b00      	cmp	r3, #0
 8007c14:	d003      	beq.n	8007c1e <HAL_GPIO_Init+0x2ae>
        {
          temp |= iocurrent;
 8007c16:	69ba      	ldr	r2, [r7, #24]
 8007c18:	693b      	ldr	r3, [r7, #16]
 8007c1a:	4313      	orrs	r3, r2
 8007c1c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR1 = temp;
 8007c1e:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8007c22:	69bb      	ldr	r3, [r7, #24]
 8007c24:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 8007c26:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8007c2a:	685b      	ldr	r3, [r3, #4]
 8007c2c:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8007c2e:	693b      	ldr	r3, [r7, #16]
 8007c30:	43db      	mvns	r3, r3
 8007c32:	69ba      	ldr	r2, [r7, #24]
 8007c34:	4013      	ands	r3, r2
 8007c36:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8007c38:	683b      	ldr	r3, [r7, #0]
 8007c3a:	685b      	ldr	r3, [r3, #4]
 8007c3c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8007c40:	2b00      	cmp	r3, #0
 8007c42:	d003      	beq.n	8007c4c <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 8007c44:	69ba      	ldr	r2, [r7, #24]
 8007c46:	693b      	ldr	r3, [r7, #16]
 8007c48:	4313      	orrs	r3, r2
 8007c4a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR1 = temp;
 8007c4c:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8007c50:	69bb      	ldr	r3, [r7, #24]
 8007c52:	6053      	str	r3, [r2, #4]

        temp = EXTI_CurrentCPU->EMR1;
 8007c54:	697b      	ldr	r3, [r7, #20]
 8007c56:	685b      	ldr	r3, [r3, #4]
 8007c58:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8007c5a:	693b      	ldr	r3, [r7, #16]
 8007c5c:	43db      	mvns	r3, r3
 8007c5e:	69ba      	ldr	r2, [r7, #24]
 8007c60:	4013      	ands	r3, r2
 8007c62:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8007c64:	683b      	ldr	r3, [r7, #0]
 8007c66:	685b      	ldr	r3, [r3, #4]
 8007c68:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8007c6c:	2b00      	cmp	r3, #0
 8007c6e:	d003      	beq.n	8007c78 <HAL_GPIO_Init+0x308>
        {
          temp |= iocurrent;
 8007c70:	69ba      	ldr	r2, [r7, #24]
 8007c72:	693b      	ldr	r3, [r7, #16]
 8007c74:	4313      	orrs	r3, r2
 8007c76:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->EMR1 = temp;
 8007c78:	697b      	ldr	r3, [r7, #20]
 8007c7a:	69ba      	ldr	r2, [r7, #24]
 8007c7c:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI_CurrentCPU->IMR1;
 8007c7e:	697b      	ldr	r3, [r7, #20]
 8007c80:	681b      	ldr	r3, [r3, #0]
 8007c82:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8007c84:	693b      	ldr	r3, [r7, #16]
 8007c86:	43db      	mvns	r3, r3
 8007c88:	69ba      	ldr	r2, [r7, #24]
 8007c8a:	4013      	ands	r3, r2
 8007c8c:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8007c8e:	683b      	ldr	r3, [r7, #0]
 8007c90:	685b      	ldr	r3, [r3, #4]
 8007c92:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8007c96:	2b00      	cmp	r3, #0
 8007c98:	d003      	beq.n	8007ca2 <HAL_GPIO_Init+0x332>
        {
          temp |= iocurrent;
 8007c9a:	69ba      	ldr	r2, [r7, #24]
 8007c9c:	693b      	ldr	r3, [r7, #16]
 8007c9e:	4313      	orrs	r3, r2
 8007ca0:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->IMR1 = temp;
 8007ca2:	697b      	ldr	r3, [r7, #20]
 8007ca4:	69ba      	ldr	r2, [r7, #24]
 8007ca6:	601a      	str	r2, [r3, #0]
      }
    }

    position++;
 8007ca8:	69fb      	ldr	r3, [r7, #28]
 8007caa:	3301      	adds	r3, #1
 8007cac:	61fb      	str	r3, [r7, #28]
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8007cae:	683b      	ldr	r3, [r7, #0]
 8007cb0:	681a      	ldr	r2, [r3, #0]
 8007cb2:	69fb      	ldr	r3, [r7, #28]
 8007cb4:	fa22 f303 	lsr.w	r3, r2, r3
 8007cb8:	2b00      	cmp	r3, #0
 8007cba:	f47f ae63 	bne.w	8007984 <HAL_GPIO_Init+0x14>
  }
}
 8007cbe:	bf00      	nop
 8007cc0:	bf00      	nop
 8007cc2:	3724      	adds	r7, #36	; 0x24
 8007cc4:	46bd      	mov	sp, r7
 8007cc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007cca:	4770      	bx	lr
 8007ccc:	58000400 	.word	0x58000400

08007cd0 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8007cd0:	b480      	push	{r7}
 8007cd2:	b085      	sub	sp, #20
 8007cd4:	af00      	add	r7, sp, #0
 8007cd6:	6078      	str	r0, [r7, #4]
 8007cd8:	460b      	mov	r3, r1
 8007cda:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != 0x00U)
 8007cdc:	687b      	ldr	r3, [r7, #4]
 8007cde:	691a      	ldr	r2, [r3, #16]
 8007ce0:	887b      	ldrh	r3, [r7, #2]
 8007ce2:	4013      	ands	r3, r2
 8007ce4:	2b00      	cmp	r3, #0
 8007ce6:	d002      	beq.n	8007cee <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8007ce8:	2301      	movs	r3, #1
 8007cea:	73fb      	strb	r3, [r7, #15]
 8007cec:	e001      	b.n	8007cf2 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8007cee:	2300      	movs	r3, #0
 8007cf0:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8007cf2:	7bfb      	ldrb	r3, [r7, #15]
}
 8007cf4:	4618      	mov	r0, r3
 8007cf6:	3714      	adds	r7, #20
 8007cf8:	46bd      	mov	sp, r7
 8007cfa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007cfe:	4770      	bx	lr

08007d00 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8007d00:	b480      	push	{r7}
 8007d02:	b083      	sub	sp, #12
 8007d04:	af00      	add	r7, sp, #0
 8007d06:	6078      	str	r0, [r7, #4]
 8007d08:	460b      	mov	r3, r1
 8007d0a:	807b      	strh	r3, [r7, #2]
 8007d0c:	4613      	mov	r3, r2
 8007d0e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8007d10:	787b      	ldrb	r3, [r7, #1]
 8007d12:	2b00      	cmp	r3, #0
 8007d14:	d003      	beq.n	8007d1e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8007d16:	887a      	ldrh	r2, [r7, #2]
 8007d18:	687b      	ldr	r3, [r7, #4]
 8007d1a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
  }
}
 8007d1c:	e003      	b.n	8007d26 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 8007d1e:	887b      	ldrh	r3, [r7, #2]
 8007d20:	041a      	lsls	r2, r3, #16
 8007d22:	687b      	ldr	r3, [r7, #4]
 8007d24:	619a      	str	r2, [r3, #24]
}
 8007d26:	bf00      	nop
 8007d28:	370c      	adds	r7, #12
 8007d2a:	46bd      	mov	sp, r7
 8007d2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d30:	4770      	bx	lr

08007d32 <HAL_GPIO_TogglePin>:
  * @param  GPIOx: Where x can be (A..K) to select the GPIO peripheral.
  * @param  GPIO_Pin: Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8007d32:	b480      	push	{r7}
 8007d34:	b085      	sub	sp, #20
 8007d36:	af00      	add	r7, sp, #0
 8007d38:	6078      	str	r0, [r7, #4]
 8007d3a:	460b      	mov	r3, r1
 8007d3c:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8007d3e:	687b      	ldr	r3, [r7, #4]
 8007d40:	695b      	ldr	r3, [r3, #20]
 8007d42:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8007d44:	887a      	ldrh	r2, [r7, #2]
 8007d46:	68fb      	ldr	r3, [r7, #12]
 8007d48:	4013      	ands	r3, r2
 8007d4a:	041a      	lsls	r2, r3, #16
 8007d4c:	68fb      	ldr	r3, [r7, #12]
 8007d4e:	43d9      	mvns	r1, r3
 8007d50:	887b      	ldrh	r3, [r7, #2]
 8007d52:	400b      	ands	r3, r1
 8007d54:	431a      	orrs	r2, r3
 8007d56:	687b      	ldr	r3, [r7, #4]
 8007d58:	619a      	str	r2, [r3, #24]
}
 8007d5a:	bf00      	nop
 8007d5c:	3714      	adds	r7, #20
 8007d5e:	46bd      	mov	sp, r7
 8007d60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d64:	4770      	bx	lr

08007d66 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin: Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8007d66:	b580      	push	{r7, lr}
 8007d68:	b082      	sub	sp, #8
 8007d6a:	af00      	add	r7, sp, #0
 8007d6c:	4603      	mov	r3, r0
 8007d6e:	80fb      	strh	r3, [r7, #6]
    __HAL_GPIO_EXTID2_CLEAR_IT(GPIO_Pin);
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
  }
#else
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00U)
 8007d70:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8007d74:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 8007d78:	88fb      	ldrh	r3, [r7, #6]
 8007d7a:	4013      	ands	r3, r2
 8007d7c:	2b00      	cmp	r3, #0
 8007d7e:	d008      	beq.n	8007d92 <HAL_GPIO_EXTI_IRQHandler+0x2c>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8007d80:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8007d84:	88fb      	ldrh	r3, [r7, #6]
 8007d86:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8007d8a:	88fb      	ldrh	r3, [r7, #6]
 8007d8c:	4618      	mov	r0, r3
 8007d8e:	f000 f804 	bl	8007d9a <HAL_GPIO_EXTI_Callback>
  }
#endif
}
 8007d92:	bf00      	nop
 8007d94:	3708      	adds	r7, #8
 8007d96:	46bd      	mov	sp, r7
 8007d98:	bd80      	pop	{r7, pc}

08007d9a <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callback.
  * @param  GPIO_Pin: Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8007d9a:	b480      	push	{r7}
 8007d9c:	b083      	sub	sp, #12
 8007d9e:	af00      	add	r7, sp, #0
 8007da0:	4603      	mov	r3, r0
 8007da2:	80fb      	strh	r3, [r7, #6]
  UNUSED(GPIO_Pin);

  /* NOTE: This function Should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 8007da4:	bf00      	nop
 8007da6:	370c      	adds	r7, #12
 8007da8:	46bd      	mov	sp, r7
 8007daa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007dae:	4770      	bx	lr

08007db0 <HAL_HRTIM_Init>:
  * @brief  Initialize a HRTIM instance
  * @param  hhrtim pointer to HAL HRTIM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HRTIM_Init(HRTIM_HandleTypeDef * hhrtim)
{
 8007db0:	b580      	push	{r7, lr}
 8007db2:	b086      	sub	sp, #24
 8007db4:	af00      	add	r7, sp, #0
 8007db6:	6078      	str	r0, [r7, #4]
  uint8_t timer_idx;
  uint32_t hrtim_mcr;

  /* Check the HRTIM handle allocation */
  if(hhrtim == NULL)
 8007db8:	687b      	ldr	r3, [r7, #4]
 8007dba:	2b00      	cmp	r3, #0
 8007dbc:	d101      	bne.n	8007dc2 <HAL_HRTIM_Init+0x12>
  {
    return HAL_ERROR;
 8007dbe:	2301      	movs	r3, #1
 8007dc0:	e0bd      	b.n	8007f3e <HAL_HRTIM_Init+0x18e>
    }
  }
#endif /* USE_HAL_HRTIM_REGISTER_CALLBACKS */

  /* Set the HRTIM state */
  hhrtim->State = HAL_HRTIM_STATE_BUSY;
 8007dc2:	687b      	ldr	r3, [r7, #4]
 8007dc4:	2202      	movs	r2, #2
 8007dc6:	f883 20c1 	strb.w	r2, [r3, #193]	; 0xc1

  /* Initialize the DMA handles */
  hhrtim->hdmaMaster = (DMA_HandleTypeDef *)NULL;
 8007dca:	687b      	ldr	r3, [r7, #4]
 8007dcc:	2200      	movs	r2, #0
 8007dce:	f8c3 20c4 	str.w	r2, [r3, #196]	; 0xc4
  hhrtim->hdmaTimerA = (DMA_HandleTypeDef *)NULL;
 8007dd2:	687b      	ldr	r3, [r7, #4]
 8007dd4:	2200      	movs	r2, #0
 8007dd6:	f8c3 20c8 	str.w	r2, [r3, #200]	; 0xc8
  hhrtim->hdmaTimerB = (DMA_HandleTypeDef *)NULL;
 8007dda:	687b      	ldr	r3, [r7, #4]
 8007ddc:	2200      	movs	r2, #0
 8007dde:	f8c3 20cc 	str.w	r2, [r3, #204]	; 0xcc
  hhrtim->hdmaTimerC = (DMA_HandleTypeDef *)NULL;
 8007de2:	687b      	ldr	r3, [r7, #4]
 8007de4:	2200      	movs	r2, #0
 8007de6:	f8c3 20d0 	str.w	r2, [r3, #208]	; 0xd0
  hhrtim->hdmaTimerD = (DMA_HandleTypeDef *)NULL;
 8007dea:	687b      	ldr	r3, [r7, #4]
 8007dec:	2200      	movs	r2, #0
 8007dee:	f8c3 20d4 	str.w	r2, [r3, #212]	; 0xd4
  hhrtim->hdmaTimerE = (DMA_HandleTypeDef *)NULL;
 8007df2:	687b      	ldr	r3, [r7, #4]
 8007df4:	2200      	movs	r2, #0
 8007df6:	f8c3 20d8 	str.w	r2, [r3, #216]	; 0xd8

  /* HRTIM output synchronization configuration (if required) */
  if ((hhrtim->Init.SyncOptions & HRTIM_SYNCOPTION_MASTER) != (uint32_t)RESET)
 8007dfa:	687b      	ldr	r3, [r7, #4]
 8007dfc:	689b      	ldr	r3, [r3, #8]
 8007dfe:	f003 0301 	and.w	r3, r3, #1
 8007e02:	2b00      	cmp	r3, #0
 8007e04:	d031      	beq.n	8007e6a <HAL_HRTIM_Init+0xba>
    assert_param(IS_HRTIM_SYNCOUTPUTPOLARITY(hhrtim->Init.SyncOutputPolarity));

    /* The synchronization output initialization procedure must be done prior
       to the configuration of the MCU outputs (done within HAL_HRTIM_MspInit)
    */
    if (hhrtim->Instance == HRTIM1)
 8007e06:	687b      	ldr	r3, [r7, #4]
 8007e08:	681b      	ldr	r3, [r3, #0]
 8007e0a:	4a4f      	ldr	r2, [pc, #316]	; (8007f48 <HAL_HRTIM_Init+0x198>)
 8007e0c:	4293      	cmp	r3, r2
 8007e0e:	d10e      	bne.n	8007e2e <HAL_HRTIM_Init+0x7e>
    {
      /* Enable the HRTIM peripheral clock */
      __HAL_RCC_HRTIM1_CLK_ENABLE();
 8007e10:	4b4e      	ldr	r3, [pc, #312]	; (8007f4c <HAL_HRTIM_Init+0x19c>)
 8007e12:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8007e16:	4a4d      	ldr	r2, [pc, #308]	; (8007f4c <HAL_HRTIM_Init+0x19c>)
 8007e18:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8007e1c:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 8007e20:	4b4a      	ldr	r3, [pc, #296]	; (8007f4c <HAL_HRTIM_Init+0x19c>)
 8007e22:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8007e26:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8007e2a:	60fb      	str	r3, [r7, #12]
 8007e2c:	68fb      	ldr	r3, [r7, #12]
    }

    hrtim_mcr = hhrtim->Instance->sMasterRegs.MCR;
 8007e2e:	687b      	ldr	r3, [r7, #4]
 8007e30:	681b      	ldr	r3, [r3, #0]
 8007e32:	681b      	ldr	r3, [r3, #0]
 8007e34:	613b      	str	r3, [r7, #16]

    /* Set the event to be sent on the synchronization output */
    hrtim_mcr &= ~(HRTIM_MCR_SYNC_SRC);
 8007e36:	693b      	ldr	r3, [r7, #16]
 8007e38:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8007e3c:	613b      	str	r3, [r7, #16]
    hrtim_mcr |= (hhrtim->Init.SyncOutputSource & HRTIM_MCR_SYNC_SRC);
 8007e3e:	687b      	ldr	r3, [r7, #4]
 8007e40:	691b      	ldr	r3, [r3, #16]
 8007e42:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8007e46:	693a      	ldr	r2, [r7, #16]
 8007e48:	4313      	orrs	r3, r2
 8007e4a:	613b      	str	r3, [r7, #16]

    /* Set the polarity of the synchronization output */
    hrtim_mcr &= ~(HRTIM_MCR_SYNC_OUT);
 8007e4c:	693b      	ldr	r3, [r7, #16]
 8007e4e:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8007e52:	613b      	str	r3, [r7, #16]
    hrtim_mcr |= (hhrtim->Init.SyncOutputPolarity & HRTIM_MCR_SYNC_OUT);
 8007e54:	687b      	ldr	r3, [r7, #4]
 8007e56:	695b      	ldr	r3, [r3, #20]
 8007e58:	f403 5340 	and.w	r3, r3, #12288	; 0x3000
 8007e5c:	693a      	ldr	r2, [r7, #16]
 8007e5e:	4313      	orrs	r3, r2
 8007e60:	613b      	str	r3, [r7, #16]

    /* Update the HRTIM registers */
    hhrtim->Instance->sMasterRegs.MCR = hrtim_mcr;
 8007e62:	687b      	ldr	r3, [r7, #4]
 8007e64:	681b      	ldr	r3, [r3, #0]
 8007e66:	693a      	ldr	r2, [r7, #16]
 8007e68:	601a      	str	r2, [r3, #0]

  /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
#if (USE_HAL_HRTIM_REGISTER_CALLBACKS == 1)
  hhrtim->MspInitCallback(hhrtim);
#else
  HAL_HRTIM_MspInit(hhrtim);
 8007e6a:	6878      	ldr	r0, [r7, #4]
 8007e6c:	f7fb fb0a 	bl	8003484 <HAL_HRTIM_MspInit>
#endif /* USE_HAL_HRTIM_REGISTER_CALLBACKS */

  /* HRTIM input synchronization configuration (if required) */
  if ((hhrtim->Init.SyncOptions & HRTIM_SYNCOPTION_SLAVE) != (uint32_t)RESET)
 8007e70:	687b      	ldr	r3, [r7, #4]
 8007e72:	689b      	ldr	r3, [r3, #8]
 8007e74:	f003 0302 	and.w	r3, r3, #2
 8007e78:	2b00      	cmp	r3, #0
 8007e7a:	d012      	beq.n	8007ea2 <HAL_HRTIM_Init+0xf2>
  {
    /* Check parameters */
    assert_param(IS_HRTIM_SYNCINPUTSOURCE(hhrtim->Init.SyncInputSource));

    hrtim_mcr = hhrtim->Instance->sMasterRegs.MCR;
 8007e7c:	687b      	ldr	r3, [r7, #4]
 8007e7e:	681b      	ldr	r3, [r3, #0]
 8007e80:	681b      	ldr	r3, [r3, #0]
 8007e82:	613b      	str	r3, [r7, #16]

    /* Set the synchronization input source */
    hrtim_mcr &= ~(HRTIM_MCR_SYNC_IN);
 8007e84:	693b      	ldr	r3, [r7, #16]
 8007e86:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8007e8a:	613b      	str	r3, [r7, #16]
    hrtim_mcr |= (hhrtim->Init.SyncInputSource & HRTIM_MCR_SYNC_IN);
 8007e8c:	687b      	ldr	r3, [r7, #4]
 8007e8e:	68db      	ldr	r3, [r3, #12]
 8007e90:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8007e94:	693a      	ldr	r2, [r7, #16]
 8007e96:	4313      	orrs	r3, r2
 8007e98:	613b      	str	r3, [r7, #16]

    /* Update the HRTIM registers */
    hhrtim->Instance->sMasterRegs.MCR = hrtim_mcr;
 8007e9a:	687b      	ldr	r3, [r7, #4]
 8007e9c:	681b      	ldr	r3, [r3, #0]
 8007e9e:	693a      	ldr	r2, [r7, #16]
 8007ea0:	601a      	str	r2, [r3, #0]
  }

  /* Initialize the HRTIM state*/
  hhrtim->State = HAL_HRTIM_STATE_READY;
 8007ea2:	687b      	ldr	r3, [r7, #4]
 8007ea4:	2201      	movs	r2, #1
 8007ea6:	f883 20c1 	strb.w	r2, [r3, #193]	; 0xc1

  /* Initialize the lock status of the HRTIM HAL API */
  __HAL_UNLOCK(hhrtim);
 8007eaa:	687b      	ldr	r3, [r7, #4]
 8007eac:	2200      	movs	r2, #0
 8007eae:	f883 20c0 	strb.w	r2, [r3, #192]	; 0xc0

  /* Initialize timer related parameters */
  for (timer_idx = HRTIM_TIMERINDEX_TIMER_A ;
 8007eb2:	2300      	movs	r3, #0
 8007eb4:	75fb      	strb	r3, [r7, #23]
 8007eb6:	e03e      	b.n	8007f36 <HAL_HRTIM_Init+0x186>
       timer_idx <= HRTIM_TIMERINDEX_MASTER ;
       timer_idx++)
  {
    hhrtim->TimerParam[timer_idx].CaptureTrigger1 = HRTIM_CAPTURETRIGGER_NONE;
 8007eb8:	7dfa      	ldrb	r2, [r7, #23]
 8007eba:	6879      	ldr	r1, [r7, #4]
 8007ebc:	4613      	mov	r3, r2
 8007ebe:	00db      	lsls	r3, r3, #3
 8007ec0:	1a9b      	subs	r3, r3, r2
 8007ec2:	009b      	lsls	r3, r3, #2
 8007ec4:	440b      	add	r3, r1
 8007ec6:	3318      	adds	r3, #24
 8007ec8:	2200      	movs	r2, #0
 8007eca:	601a      	str	r2, [r3, #0]
    hhrtim->TimerParam[timer_idx].CaptureTrigger2 = HRTIM_CAPTURETRIGGER_NONE;
 8007ecc:	7dfa      	ldrb	r2, [r7, #23]
 8007ece:	6879      	ldr	r1, [r7, #4]
 8007ed0:	4613      	mov	r3, r2
 8007ed2:	00db      	lsls	r3, r3, #3
 8007ed4:	1a9b      	subs	r3, r3, r2
 8007ed6:	009b      	lsls	r3, r3, #2
 8007ed8:	440b      	add	r3, r1
 8007eda:	331c      	adds	r3, #28
 8007edc:	2200      	movs	r2, #0
 8007ede:	601a      	str	r2, [r3, #0]
    hhrtim->TimerParam[timer_idx].InterruptRequests = HRTIM_IT_NONE;
 8007ee0:	7dfa      	ldrb	r2, [r7, #23]
 8007ee2:	6879      	ldr	r1, [r7, #4]
 8007ee4:	4613      	mov	r3, r2
 8007ee6:	00db      	lsls	r3, r3, #3
 8007ee8:	1a9b      	subs	r3, r3, r2
 8007eea:	009b      	lsls	r3, r3, #2
 8007eec:	440b      	add	r3, r1
 8007eee:	3320      	adds	r3, #32
 8007ef0:	2200      	movs	r2, #0
 8007ef2:	601a      	str	r2, [r3, #0]
    hhrtim->TimerParam[timer_idx].DMARequests = HRTIM_IT_NONE;
 8007ef4:	7dfa      	ldrb	r2, [r7, #23]
 8007ef6:	6879      	ldr	r1, [r7, #4]
 8007ef8:	4613      	mov	r3, r2
 8007efa:	00db      	lsls	r3, r3, #3
 8007efc:	1a9b      	subs	r3, r3, r2
 8007efe:	009b      	lsls	r3, r3, #2
 8007f00:	440b      	add	r3, r1
 8007f02:	3324      	adds	r3, #36	; 0x24
 8007f04:	2200      	movs	r2, #0
 8007f06:	601a      	str	r2, [r3, #0]
    hhrtim->TimerParam[timer_idx].DMASrcAddress = 0U;
 8007f08:	7dfa      	ldrb	r2, [r7, #23]
 8007f0a:	6879      	ldr	r1, [r7, #4]
 8007f0c:	4613      	mov	r3, r2
 8007f0e:	00db      	lsls	r3, r3, #3
 8007f10:	1a9b      	subs	r3, r3, r2
 8007f12:	009b      	lsls	r3, r3, #2
 8007f14:	440b      	add	r3, r1
 8007f16:	3328      	adds	r3, #40	; 0x28
 8007f18:	2200      	movs	r2, #0
 8007f1a:	601a      	str	r2, [r3, #0]
    hhrtim->TimerParam[timer_idx].DMASize = 0U;
 8007f1c:	7dfa      	ldrb	r2, [r7, #23]
 8007f1e:	6879      	ldr	r1, [r7, #4]
 8007f20:	4613      	mov	r3, r2
 8007f22:	00db      	lsls	r3, r3, #3
 8007f24:	1a9b      	subs	r3, r3, r2
 8007f26:	009b      	lsls	r3, r3, #2
 8007f28:	440b      	add	r3, r1
 8007f2a:	3330      	adds	r3, #48	; 0x30
 8007f2c:	2200      	movs	r2, #0
 8007f2e:	601a      	str	r2, [r3, #0]
       timer_idx++)
 8007f30:	7dfb      	ldrb	r3, [r7, #23]
 8007f32:	3301      	adds	r3, #1
 8007f34:	75fb      	strb	r3, [r7, #23]
       timer_idx <= HRTIM_TIMERINDEX_MASTER ;
 8007f36:	7dfb      	ldrb	r3, [r7, #23]
 8007f38:	2b05      	cmp	r3, #5
 8007f3a:	d9bd      	bls.n	8007eb8 <HAL_HRTIM_Init+0x108>
  }

  return HAL_OK;
 8007f3c:	2300      	movs	r3, #0
}
 8007f3e:	4618      	mov	r0, r3
 8007f40:	3718      	adds	r7, #24
 8007f42:	46bd      	mov	sp, r7
 8007f44:	bd80      	pop	{r7, pc}
 8007f46:	bf00      	nop
 8007f48:	40017400 	.word	0x40017400
 8007f4c:	58024400 	.word	0x58024400

08007f50 <HAL_HRTIM_TimeBaseConfig>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HRTIM_TimeBaseConfig(HRTIM_HandleTypeDef *hhrtim,
                                           uint32_t TimerIdx,
                                           const HRTIM_TimeBaseCfgTypeDef * pTimeBaseCfg)
{
 8007f50:	b580      	push	{r7, lr}
 8007f52:	b084      	sub	sp, #16
 8007f54:	af00      	add	r7, sp, #0
 8007f56:	60f8      	str	r0, [r7, #12]
 8007f58:	60b9      	str	r1, [r7, #8]
 8007f5a:	607a      	str	r2, [r7, #4]
  /* Check the parameters */
  assert_param(IS_HRTIM_TIMERINDEX(TimerIdx));
  assert_param(IS_HRTIM_PRESCALERRATIO(pTimeBaseCfg->PrescalerRatio));
  assert_param(IS_HRTIM_MODE(pTimeBaseCfg->Mode));

  if(hhrtim->State == HAL_HRTIM_STATE_BUSY)
 8007f5c:	68fb      	ldr	r3, [r7, #12]
 8007f5e:	f893 30c1 	ldrb.w	r3, [r3, #193]	; 0xc1
 8007f62:	b2db      	uxtb	r3, r3
 8007f64:	2b02      	cmp	r3, #2
 8007f66:	d101      	bne.n	8007f6c <HAL_HRTIM_TimeBaseConfig+0x1c>
  {
     return HAL_BUSY;
 8007f68:	2302      	movs	r3, #2
 8007f6a:	e015      	b.n	8007f98 <HAL_HRTIM_TimeBaseConfig+0x48>
  }

  /* Set the HRTIM state */
  hhrtim->State = HAL_HRTIM_STATE_BUSY;
 8007f6c:	68fb      	ldr	r3, [r7, #12]
 8007f6e:	2202      	movs	r2, #2
 8007f70:	f883 20c1 	strb.w	r2, [r3, #193]	; 0xc1

  if (TimerIdx == HRTIM_TIMERINDEX_MASTER)
 8007f74:	68bb      	ldr	r3, [r7, #8]
 8007f76:	2b05      	cmp	r3, #5
 8007f78:	d104      	bne.n	8007f84 <HAL_HRTIM_TimeBaseConfig+0x34>
  {
    /* Configure master timer time base unit */
    HRTIM_MasterBase_Config(hhrtim, pTimeBaseCfg);
 8007f7a:	6879      	ldr	r1, [r7, #4]
 8007f7c:	68f8      	ldr	r0, [r7, #12]
 8007f7e:	f000 fc4d 	bl	800881c <HRTIM_MasterBase_Config>
 8007f82:	e004      	b.n	8007f8e <HAL_HRTIM_TimeBaseConfig+0x3e>
  }
  else
  {
    /* Configure timing unit time base unit */
    HRTIM_TimingUnitBase_Config(hhrtim, TimerIdx, pTimeBaseCfg);
 8007f84:	687a      	ldr	r2, [r7, #4]
 8007f86:	68b9      	ldr	r1, [r7, #8]
 8007f88:	68f8      	ldr	r0, [r7, #12]
 8007f8a:	f000 fc76 	bl	800887a <HRTIM_TimingUnitBase_Config>
  }

  /* Set HRTIM state */
  hhrtim->State = HAL_HRTIM_STATE_READY;
 8007f8e:	68fb      	ldr	r3, [r7, #12]
 8007f90:	2201      	movs	r2, #1
 8007f92:	f883 20c1 	strb.w	r2, [r3, #193]	; 0xc1

  return HAL_OK;
 8007f96:	2300      	movs	r3, #0
}
 8007f98:	4618      	mov	r0, r3
 8007f9a:	3710      	adds	r7, #16
 8007f9c:	46bd      	mov	sp, r7
 8007f9e:	bd80      	pop	{r7, pc}

08007fa0 <HAL_HRTIM_WaveformTimerConfig>:
  * @note This function must be called before starting the timer
  */
HAL_StatusTypeDef HAL_HRTIM_WaveformTimerConfig(HRTIM_HandleTypeDef * hhrtim,
                                                uint32_t TimerIdx,
                                                const HRTIM_TimerCfgTypeDef * pTimerCfg)
{
 8007fa0:	b580      	push	{r7, lr}
 8007fa2:	b084      	sub	sp, #16
 8007fa4:	af00      	add	r7, sp, #0
 8007fa6:	60f8      	str	r0, [r7, #12]
 8007fa8:	60b9      	str	r1, [r7, #8]
 8007faa:	607a      	str	r2, [r7, #4]
  assert_param(IS_HRTIM_DACSYNC(pTimerCfg->DACSynchro));
  assert_param(IS_HRTIM_PRELOAD(pTimerCfg->PreloadEnable));
  assert_param(IS_HRTIM_TIMERBURSTMODE(pTimerCfg->BurstMode));
  assert_param(IS_HRTIM_UPDATEONREPETITION(pTimerCfg->RepetitionUpdate));

  if(hhrtim->State == HAL_HRTIM_STATE_BUSY)
 8007fac:	68fb      	ldr	r3, [r7, #12]
 8007fae:	f893 30c1 	ldrb.w	r3, [r3, #193]	; 0xc1
 8007fb2:	b2db      	uxtb	r3, r3
 8007fb4:	2b02      	cmp	r3, #2
 8007fb6:	d101      	bne.n	8007fbc <HAL_HRTIM_WaveformTimerConfig+0x1c>
  {
     return HAL_BUSY;
 8007fb8:	2302      	movs	r3, #2
 8007fba:	e05f      	b.n	800807c <HAL_HRTIM_WaveformTimerConfig+0xdc>
  }

  /* Process Locked */
  __HAL_LOCK(hhrtim);
 8007fbc:	68fb      	ldr	r3, [r7, #12]
 8007fbe:	f893 30c0 	ldrb.w	r3, [r3, #192]	; 0xc0
 8007fc2:	2b01      	cmp	r3, #1
 8007fc4:	d101      	bne.n	8007fca <HAL_HRTIM_WaveformTimerConfig+0x2a>
 8007fc6:	2302      	movs	r3, #2
 8007fc8:	e058      	b.n	800807c <HAL_HRTIM_WaveformTimerConfig+0xdc>
 8007fca:	68fb      	ldr	r3, [r7, #12]
 8007fcc:	2201      	movs	r2, #1
 8007fce:	f883 20c0 	strb.w	r2, [r3, #192]	; 0xc0

  hhrtim->State = HAL_HRTIM_STATE_BUSY;
 8007fd2:	68fb      	ldr	r3, [r7, #12]
 8007fd4:	2202      	movs	r2, #2
 8007fd6:	f883 20c1 	strb.w	r2, [r3, #193]	; 0xc1

  if (TimerIdx == HRTIM_TIMERINDEX_MASTER)
 8007fda:	68bb      	ldr	r3, [r7, #8]
 8007fdc:	2b05      	cmp	r3, #5
 8007fde:	d104      	bne.n	8007fea <HAL_HRTIM_WaveformTimerConfig+0x4a>
    assert_param(IS_HRTIM_UPDATEGATING_MASTER(pTimerCfg->UpdateGating));
    assert_param(IS_HRTIM_MASTER_IT(pTimerCfg->InterruptRequests));
    assert_param(IS_HRTIM_MASTER_DMA(pTimerCfg->DMARequests));

    /* Configure master timer */
    HRTIM_MasterWaveform_Config(hhrtim, pTimerCfg);
 8007fe0:	6879      	ldr	r1, [r7, #4]
 8007fe2:	68f8      	ldr	r0, [r7, #12]
 8007fe4:	f000 fc89 	bl	80088fa <HRTIM_MasterWaveform_Config>
 8007fe8:	e004      	b.n	8007ff4 <HAL_HRTIM_WaveformTimerConfig+0x54>
    assert_param(IS_HRTIM_TIMUPDATETRIGGER(pTimerCfg->UpdateTrigger));
    assert_param(IS_HRTIM_TIMRESETTRIGGER(pTimerCfg->ResetTrigger));
    assert_param(IS_HRTIM_TIMUPDATEONRESET(pTimerCfg->ResetUpdate));

    /* Configure timing unit */
    HRTIM_TimingUnitWaveform_Config(hhrtim, TimerIdx, pTimerCfg);
 8007fea:	687a      	ldr	r2, [r7, #4]
 8007fec:	68b9      	ldr	r1, [r7, #8]
 8007fee:	68f8      	ldr	r0, [r7, #12]
 8007ff0:	f000 fcea 	bl	80089c8 <HRTIM_TimingUnitWaveform_Config>
  }

  /* Update timer parameters */
  hhrtim->TimerParam[TimerIdx].InterruptRequests = pTimerCfg->InterruptRequests;
 8007ff4:	687b      	ldr	r3, [r7, #4]
 8007ff6:	6819      	ldr	r1, [r3, #0]
 8007ff8:	68f8      	ldr	r0, [r7, #12]
 8007ffa:	68ba      	ldr	r2, [r7, #8]
 8007ffc:	4613      	mov	r3, r2
 8007ffe:	00db      	lsls	r3, r3, #3
 8008000:	1a9b      	subs	r3, r3, r2
 8008002:	009b      	lsls	r3, r3, #2
 8008004:	4403      	add	r3, r0
 8008006:	3320      	adds	r3, #32
 8008008:	6019      	str	r1, [r3, #0]
  hhrtim->TimerParam[TimerIdx].DMARequests = pTimerCfg->DMARequests;
 800800a:	687b      	ldr	r3, [r7, #4]
 800800c:	6859      	ldr	r1, [r3, #4]
 800800e:	68f8      	ldr	r0, [r7, #12]
 8008010:	68ba      	ldr	r2, [r7, #8]
 8008012:	4613      	mov	r3, r2
 8008014:	00db      	lsls	r3, r3, #3
 8008016:	1a9b      	subs	r3, r3, r2
 8008018:	009b      	lsls	r3, r3, #2
 800801a:	4403      	add	r3, r0
 800801c:	3324      	adds	r3, #36	; 0x24
 800801e:	6019      	str	r1, [r3, #0]
  hhrtim->TimerParam[TimerIdx].DMASrcAddress = pTimerCfg->DMASrcAddress;
 8008020:	687b      	ldr	r3, [r7, #4]
 8008022:	6899      	ldr	r1, [r3, #8]
 8008024:	68f8      	ldr	r0, [r7, #12]
 8008026:	68ba      	ldr	r2, [r7, #8]
 8008028:	4613      	mov	r3, r2
 800802a:	00db      	lsls	r3, r3, #3
 800802c:	1a9b      	subs	r3, r3, r2
 800802e:	009b      	lsls	r3, r3, #2
 8008030:	4403      	add	r3, r0
 8008032:	3328      	adds	r3, #40	; 0x28
 8008034:	6019      	str	r1, [r3, #0]
  hhrtim->TimerParam[TimerIdx].DMADstAddress = pTimerCfg->DMADstAddress;
 8008036:	687b      	ldr	r3, [r7, #4]
 8008038:	68d9      	ldr	r1, [r3, #12]
 800803a:	68f8      	ldr	r0, [r7, #12]
 800803c:	68ba      	ldr	r2, [r7, #8]
 800803e:	4613      	mov	r3, r2
 8008040:	00db      	lsls	r3, r3, #3
 8008042:	1a9b      	subs	r3, r3, r2
 8008044:	009b      	lsls	r3, r3, #2
 8008046:	4403      	add	r3, r0
 8008048:	332c      	adds	r3, #44	; 0x2c
 800804a:	6019      	str	r1, [r3, #0]
  hhrtim->TimerParam[TimerIdx].DMASize = pTimerCfg->DMASize;
 800804c:	687b      	ldr	r3, [r7, #4]
 800804e:	6919      	ldr	r1, [r3, #16]
 8008050:	68f8      	ldr	r0, [r7, #12]
 8008052:	68ba      	ldr	r2, [r7, #8]
 8008054:	4613      	mov	r3, r2
 8008056:	00db      	lsls	r3, r3, #3
 8008058:	1a9b      	subs	r3, r3, r2
 800805a:	009b      	lsls	r3, r3, #2
 800805c:	4403      	add	r3, r0
 800805e:	3330      	adds	r3, #48	; 0x30
 8008060:	6019      	str	r1, [r3, #0]

  /* Force a software update */
  HRTIM_ForceRegistersUpdate(hhrtim, TimerIdx);
 8008062:	68b9      	ldr	r1, [r7, #8]
 8008064:	68f8      	ldr	r0, [r7, #12]
 8008066:	f000 fec7 	bl	8008df8 <HRTIM_ForceRegistersUpdate>

  hhrtim->State = HAL_HRTIM_STATE_READY;
 800806a:	68fb      	ldr	r3, [r7, #12]
 800806c:	2201      	movs	r2, #1
 800806e:	f883 20c1 	strb.w	r2, [r3, #193]	; 0xc1

  /* Process Unlocked */
  __HAL_UNLOCK(hhrtim);
 8008072:	68fb      	ldr	r3, [r7, #12]
 8008074:	2200      	movs	r2, #0
 8008076:	f883 20c0 	strb.w	r2, [r3, #192]	; 0xc0

  return HAL_OK;
 800807a:	2300      	movs	r3, #0
}
 800807c:	4618      	mov	r0, r3
 800807e:	3710      	adds	r7, #16
 8008080:	46bd      	mov	sp, r7
 8008082:	bd80      	pop	{r7, pc}

08008084 <HAL_HRTIM_WaveformCompareConfig>:
  */
HAL_StatusTypeDef HAL_HRTIM_WaveformCompareConfig(HRTIM_HandleTypeDef * hhrtim,
                                                  uint32_t TimerIdx,
                                                  uint32_t CompareUnit,
                                                  const HRTIM_CompareCfgTypeDef* pCompareCfg)
{
 8008084:	b480      	push	{r7}
 8008086:	b085      	sub	sp, #20
 8008088:	af00      	add	r7, sp, #0
 800808a:	60f8      	str	r0, [r7, #12]
 800808c:	60b9      	str	r1, [r7, #8]
 800808e:	607a      	str	r2, [r7, #4]
 8008090:	603b      	str	r3, [r7, #0]
  /* Check parameters */
  assert_param(IS_HRTIM_TIMERINDEX(TimerIdx));

  if(hhrtim->State == HAL_HRTIM_STATE_BUSY)
 8008092:	68fb      	ldr	r3, [r7, #12]
 8008094:	f893 30c1 	ldrb.w	r3, [r3, #193]	; 0xc1
 8008098:	b2db      	uxtb	r3, r3
 800809a:	2b02      	cmp	r3, #2
 800809c:	d101      	bne.n	80080a2 <HAL_HRTIM_WaveformCompareConfig+0x1e>
  {
     return HAL_BUSY;
 800809e:	2302      	movs	r3, #2
 80080a0:	e157      	b.n	8008352 <HAL_HRTIM_WaveformCompareConfig+0x2ce>
  }

  /* Process Locked */
  __HAL_LOCK(hhrtim);
 80080a2:	68fb      	ldr	r3, [r7, #12]
 80080a4:	f893 30c0 	ldrb.w	r3, [r3, #192]	; 0xc0
 80080a8:	2b01      	cmp	r3, #1
 80080aa:	d101      	bne.n	80080b0 <HAL_HRTIM_WaveformCompareConfig+0x2c>
 80080ac:	2302      	movs	r3, #2
 80080ae:	e150      	b.n	8008352 <HAL_HRTIM_WaveformCompareConfig+0x2ce>
 80080b0:	68fb      	ldr	r3, [r7, #12]
 80080b2:	2201      	movs	r2, #1
 80080b4:	f883 20c0 	strb.w	r2, [r3, #192]	; 0xc0

  hhrtim->State = HAL_HRTIM_STATE_BUSY;
 80080b8:	68fb      	ldr	r3, [r7, #12]
 80080ba:	2202      	movs	r2, #2
 80080bc:	f883 20c1 	strb.w	r2, [r3, #193]	; 0xc1

  /* Configure the compare unit */
  if (TimerIdx == HRTIM_TIMERINDEX_MASTER)
 80080c0:	68bb      	ldr	r3, [r7, #8]
 80080c2:	2b05      	cmp	r3, #5
 80080c4:	d140      	bne.n	8008148 <HAL_HRTIM_WaveformCompareConfig+0xc4>
  {
    switch (CompareUnit)
 80080c6:	687b      	ldr	r3, [r7, #4]
 80080c8:	3b01      	subs	r3, #1
 80080ca:	2b07      	cmp	r3, #7
 80080cc:	d82a      	bhi.n	8008124 <HAL_HRTIM_WaveformCompareConfig+0xa0>
 80080ce:	a201      	add	r2, pc, #4	; (adr r2, 80080d4 <HAL_HRTIM_WaveformCompareConfig+0x50>)
 80080d0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80080d4:	080080f5 	.word	0x080080f5
 80080d8:	08008101 	.word	0x08008101
 80080dc:	08008125 	.word	0x08008125
 80080e0:	0800810d 	.word	0x0800810d
 80080e4:	08008125 	.word	0x08008125
 80080e8:	08008125 	.word	0x08008125
 80080ec:	08008125 	.word	0x08008125
 80080f0:	08008119 	.word	0x08008119
    {
      case HRTIM_COMPAREUNIT_1:
        {
        hhrtim->Instance->sMasterRegs.MCMP1R = pCompareCfg->CompareValue;
 80080f4:	68fb      	ldr	r3, [r7, #12]
 80080f6:	681b      	ldr	r3, [r3, #0]
 80080f8:	683a      	ldr	r2, [r7, #0]
 80080fa:	6812      	ldr	r2, [r2, #0]
 80080fc:	61da      	str	r2, [r3, #28]
        break;
 80080fe:	e01a      	b.n	8008136 <HAL_HRTIM_WaveformCompareConfig+0xb2>
        }

      case HRTIM_COMPAREUNIT_2:
        {
        hhrtim->Instance->sMasterRegs.MCMP2R = pCompareCfg->CompareValue;
 8008100:	68fb      	ldr	r3, [r7, #12]
 8008102:	681b      	ldr	r3, [r3, #0]
 8008104:	683a      	ldr	r2, [r7, #0]
 8008106:	6812      	ldr	r2, [r2, #0]
 8008108:	625a      	str	r2, [r3, #36]	; 0x24
        break;
 800810a:	e014      	b.n	8008136 <HAL_HRTIM_WaveformCompareConfig+0xb2>
        }

      case HRTIM_COMPAREUNIT_3:
        {
        hhrtim->Instance->sMasterRegs.MCMP3R = pCompareCfg->CompareValue;
 800810c:	68fb      	ldr	r3, [r7, #12]
 800810e:	681b      	ldr	r3, [r3, #0]
 8008110:	683a      	ldr	r2, [r7, #0]
 8008112:	6812      	ldr	r2, [r2, #0]
 8008114:	629a      	str	r2, [r3, #40]	; 0x28
        break;
 8008116:	e00e      	b.n	8008136 <HAL_HRTIM_WaveformCompareConfig+0xb2>
        }

      case HRTIM_COMPAREUNIT_4:
        {
        hhrtim->Instance->sMasterRegs.MCMP4R = pCompareCfg->CompareValue;
 8008118:	68fb      	ldr	r3, [r7, #12]
 800811a:	681b      	ldr	r3, [r3, #0]
 800811c:	683a      	ldr	r2, [r7, #0]
 800811e:	6812      	ldr	r2, [r2, #0]
 8008120:	62da      	str	r2, [r3, #44]	; 0x2c
        break;
 8008122:	e008      	b.n	8008136 <HAL_HRTIM_WaveformCompareConfig+0xb2>
        }

      default:
        {
        hhrtim->State = HAL_HRTIM_STATE_ERROR;
 8008124:	68fb      	ldr	r3, [r7, #12]
 8008126:	2207      	movs	r2, #7
 8008128:	f883 20c1 	strb.w	r2, [r3, #193]	; 0xc1

        /* Process Unlocked */
        __HAL_UNLOCK(hhrtim);
 800812c:	68fb      	ldr	r3, [r7, #12]
 800812e:	2200      	movs	r2, #0
 8008130:	f883 20c0 	strb.w	r2, [r3, #192]	; 0xc0

        break;
 8008134:	bf00      	nop
        }
    }

    if(hhrtim->State == HAL_HRTIM_STATE_ERROR)
 8008136:	68fb      	ldr	r3, [r7, #12]
 8008138:	f893 30c1 	ldrb.w	r3, [r3, #193]	; 0xc1
 800813c:	b2db      	uxtb	r3, r3
 800813e:	2b07      	cmp	r3, #7
 8008140:	f040 80fe 	bne.w	8008340 <HAL_HRTIM_WaveformCompareConfig+0x2bc>
    {
     return HAL_ERROR;
 8008144:	2301      	movs	r3, #1
 8008146:	e104      	b.n	8008352 <HAL_HRTIM_WaveformCompareConfig+0x2ce>
    }

  }
  else
  {
    switch (CompareUnit)
 8008148:	687b      	ldr	r3, [r7, #4]
 800814a:	3b01      	subs	r3, #1
 800814c:	2b07      	cmp	r3, #7
 800814e:	f200 80e3 	bhi.w	8008318 <HAL_HRTIM_WaveformCompareConfig+0x294>
 8008152:	a201      	add	r2, pc, #4	; (adr r2, 8008158 <HAL_HRTIM_WaveformCompareConfig+0xd4>)
 8008154:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008158:	08008179 	.word	0x08008179
 800815c:	0800818d 	.word	0x0800818d
 8008160:	08008319 	.word	0x08008319
 8008164:	08008249 	.word	0x08008249
 8008168:	08008319 	.word	0x08008319
 800816c:	08008319 	.word	0x08008319
 8008170:	08008319 	.word	0x08008319
 8008174:	0800825d 	.word	0x0800825d
    {
    case HRTIM_COMPAREUNIT_1:
      {
        /* Set the compare value */
        hhrtim->Instance->sTimerxRegs[TimerIdx].CMP1xR = pCompareCfg->CompareValue;
 8008178:	68fb      	ldr	r3, [r7, #12]
 800817a:	6819      	ldr	r1, [r3, #0]
 800817c:	683b      	ldr	r3, [r7, #0]
 800817e:	681a      	ldr	r2, [r3, #0]
 8008180:	68bb      	ldr	r3, [r7, #8]
 8008182:	01db      	lsls	r3, r3, #7
 8008184:	440b      	add	r3, r1
 8008186:	339c      	adds	r3, #156	; 0x9c
 8008188:	601a      	str	r2, [r3, #0]
        break;
 800818a:	e0d1      	b.n	8008330 <HAL_HRTIM_WaveformCompareConfig+0x2ac>
      {
        /* Check parameters */
        assert_param(IS_HRTIM_COMPAREUNIT_AUTODELAYEDMODE(CompareUnit, pCompareCfg->AutoDelayedMode));

        /* Set the compare value */
        hhrtim->Instance->sTimerxRegs[TimerIdx].CMP2xR = pCompareCfg->CompareValue;
 800818c:	68fb      	ldr	r3, [r7, #12]
 800818e:	6819      	ldr	r1, [r3, #0]
 8008190:	683b      	ldr	r3, [r7, #0]
 8008192:	681a      	ldr	r2, [r3, #0]
 8008194:	68bb      	ldr	r3, [r7, #8]
 8008196:	01db      	lsls	r3, r3, #7
 8008198:	440b      	add	r3, r1
 800819a:	33a4      	adds	r3, #164	; 0xa4
 800819c:	601a      	str	r2, [r3, #0]

        if (pCompareCfg->AutoDelayedMode != HRTIM_AUTODELAYEDMODE_REGULAR)
 800819e:	683b      	ldr	r3, [r7, #0]
 80081a0:	685b      	ldr	r3, [r3, #4]
 80081a2:	2b00      	cmp	r3, #0
 80081a4:	d03f      	beq.n	8008226 <HAL_HRTIM_WaveformCompareConfig+0x1a2>
        {
          /* Configure auto-delayed mode */
          /* DELCMP2 bitfield must be reset when reprogrammed from one value */
          /* to the other to reinitialize properly the auto-delayed mechanism */
          hhrtim->Instance->sTimerxRegs[TimerIdx].TIMxCR &= ~HRTIM_TIMCR_DELCMP2;
 80081a6:	68fb      	ldr	r3, [r7, #12]
 80081a8:	681a      	ldr	r2, [r3, #0]
 80081aa:	68bb      	ldr	r3, [r7, #8]
 80081ac:	3301      	adds	r3, #1
 80081ae:	01db      	lsls	r3, r3, #7
 80081b0:	4413      	add	r3, r2
 80081b2:	681b      	ldr	r3, [r3, #0]
 80081b4:	68fa      	ldr	r2, [r7, #12]
 80081b6:	6811      	ldr	r1, [r2, #0]
 80081b8:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 80081bc:	68bb      	ldr	r3, [r7, #8]
 80081be:	3301      	adds	r3, #1
 80081c0:	01db      	lsls	r3, r3, #7
 80081c2:	440b      	add	r3, r1
 80081c4:	601a      	str	r2, [r3, #0]
          hhrtim->Instance->sTimerxRegs[TimerIdx].TIMxCR |= pCompareCfg->AutoDelayedMode;
 80081c6:	68fb      	ldr	r3, [r7, #12]
 80081c8:	681a      	ldr	r2, [r3, #0]
 80081ca:	68bb      	ldr	r3, [r7, #8]
 80081cc:	3301      	adds	r3, #1
 80081ce:	01db      	lsls	r3, r3, #7
 80081d0:	4413      	add	r3, r2
 80081d2:	681a      	ldr	r2, [r3, #0]
 80081d4:	683b      	ldr	r3, [r7, #0]
 80081d6:	685b      	ldr	r3, [r3, #4]
 80081d8:	68f9      	ldr	r1, [r7, #12]
 80081da:	6809      	ldr	r1, [r1, #0]
 80081dc:	431a      	orrs	r2, r3
 80081de:	68bb      	ldr	r3, [r7, #8]
 80081e0:	3301      	adds	r3, #1
 80081e2:	01db      	lsls	r3, r3, #7
 80081e4:	440b      	add	r3, r1
 80081e6:	601a      	str	r2, [r3, #0]

          /* Set the compare value for timeout compare unit (if any) */
          if (pCompareCfg->AutoDelayedMode == HRTIM_AUTODELAYEDMODE_AUTODELAYED_TIMEOUTCMP1)
 80081e8:	683b      	ldr	r3, [r7, #0]
 80081ea:	685b      	ldr	r3, [r3, #4]
 80081ec:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80081f0:	d109      	bne.n	8008206 <HAL_HRTIM_WaveformCompareConfig+0x182>
          {
            hhrtim->Instance->sTimerxRegs[TimerIdx].CMP1xR = pCompareCfg->AutoDelayedTimeout;
 80081f2:	68fb      	ldr	r3, [r7, #12]
 80081f4:	6819      	ldr	r1, [r3, #0]
 80081f6:	683b      	ldr	r3, [r7, #0]
 80081f8:	689a      	ldr	r2, [r3, #8]
 80081fa:	68bb      	ldr	r3, [r7, #8]
 80081fc:	01db      	lsls	r3, r3, #7
 80081fe:	440b      	add	r3, r1
 8008200:	339c      	adds	r3, #156	; 0x9c
 8008202:	601a      	str	r2, [r3, #0]
        else
        {
          /* Clear HRTIM_TIMxCR.DELCMP2 bitfield */
          MODIFY_REG(hhrtim->Instance->sTimerxRegs[TimerIdx].TIMxCR, HRTIM_TIMCR_DELCMP2, 0U);
        }
         break;
 8008204:	e091      	b.n	800832a <HAL_HRTIM_WaveformCompareConfig+0x2a6>
          else if (pCompareCfg->AutoDelayedMode == HRTIM_AUTODELAYEDMODE_AUTODELAYED_TIMEOUTCMP3)
 8008206:	683b      	ldr	r3, [r7, #0]
 8008208:	685b      	ldr	r3, [r3, #4]
 800820a:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 800820e:	f040 808c 	bne.w	800832a <HAL_HRTIM_WaveformCompareConfig+0x2a6>
            hhrtim->Instance->sTimerxRegs[TimerIdx].CMP3xR = pCompareCfg->AutoDelayedTimeout;
 8008212:	68fb      	ldr	r3, [r7, #12]
 8008214:	6819      	ldr	r1, [r3, #0]
 8008216:	683b      	ldr	r3, [r7, #0]
 8008218:	689a      	ldr	r2, [r3, #8]
 800821a:	68bb      	ldr	r3, [r7, #8]
 800821c:	01db      	lsls	r3, r3, #7
 800821e:	440b      	add	r3, r1
 8008220:	33a8      	adds	r3, #168	; 0xa8
 8008222:	601a      	str	r2, [r3, #0]
         break;
 8008224:	e081      	b.n	800832a <HAL_HRTIM_WaveformCompareConfig+0x2a6>
          MODIFY_REG(hhrtim->Instance->sTimerxRegs[TimerIdx].TIMxCR, HRTIM_TIMCR_DELCMP2, 0U);
 8008226:	68fb      	ldr	r3, [r7, #12]
 8008228:	681a      	ldr	r2, [r3, #0]
 800822a:	68bb      	ldr	r3, [r7, #8]
 800822c:	3301      	adds	r3, #1
 800822e:	01db      	lsls	r3, r3, #7
 8008230:	4413      	add	r3, r2
 8008232:	681b      	ldr	r3, [r3, #0]
 8008234:	68fa      	ldr	r2, [r7, #12]
 8008236:	6811      	ldr	r1, [r2, #0]
 8008238:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 800823c:	68bb      	ldr	r3, [r7, #8]
 800823e:	3301      	adds	r3, #1
 8008240:	01db      	lsls	r3, r3, #7
 8008242:	440b      	add	r3, r1
 8008244:	601a      	str	r2, [r3, #0]
         break;
 8008246:	e070      	b.n	800832a <HAL_HRTIM_WaveformCompareConfig+0x2a6>
      }

    case HRTIM_COMPAREUNIT_3:
      {
        /* Set the compare value */
        hhrtim->Instance->sTimerxRegs[TimerIdx].CMP3xR = pCompareCfg->CompareValue;
 8008248:	68fb      	ldr	r3, [r7, #12]
 800824a:	6819      	ldr	r1, [r3, #0]
 800824c:	683b      	ldr	r3, [r7, #0]
 800824e:	681a      	ldr	r2, [r3, #0]
 8008250:	68bb      	ldr	r3, [r7, #8]
 8008252:	01db      	lsls	r3, r3, #7
 8008254:	440b      	add	r3, r1
 8008256:	33a8      	adds	r3, #168	; 0xa8
 8008258:	601a      	str	r2, [r3, #0]
        break;
 800825a:	e069      	b.n	8008330 <HAL_HRTIM_WaveformCompareConfig+0x2ac>
      {
        /* Check parameters */
        assert_param(IS_HRTIM_COMPAREUNIT_AUTODELAYEDMODE(CompareUnit, pCompareCfg->AutoDelayedMode));

        /* Set the compare value */
        hhrtim->Instance->sTimerxRegs[TimerIdx].CMP4xR = pCompareCfg->CompareValue;
 800825c:	68fb      	ldr	r3, [r7, #12]
 800825e:	6819      	ldr	r1, [r3, #0]
 8008260:	683b      	ldr	r3, [r7, #0]
 8008262:	681a      	ldr	r2, [r3, #0]
 8008264:	68bb      	ldr	r3, [r7, #8]
 8008266:	01db      	lsls	r3, r3, #7
 8008268:	440b      	add	r3, r1
 800826a:	33ac      	adds	r3, #172	; 0xac
 800826c:	601a      	str	r2, [r3, #0]

        if (pCompareCfg->AutoDelayedMode != HRTIM_AUTODELAYEDMODE_REGULAR)
 800826e:	683b      	ldr	r3, [r7, #0]
 8008270:	685b      	ldr	r3, [r3, #4]
 8008272:	2b00      	cmp	r3, #0
 8008274:	d03f      	beq.n	80082f6 <HAL_HRTIM_WaveformCompareConfig+0x272>
        {
          /* Configure auto-delayed mode */
          /* DELCMP4 bitfield must be reset when reprogrammed from one value */
          /* to the other to reinitialize properly the auto-delayed mechanism */
          hhrtim->Instance->sTimerxRegs[TimerIdx].TIMxCR &= ~HRTIM_TIMCR_DELCMP4;
 8008276:	68fb      	ldr	r3, [r7, #12]
 8008278:	681a      	ldr	r2, [r3, #0]
 800827a:	68bb      	ldr	r3, [r7, #8]
 800827c:	3301      	adds	r3, #1
 800827e:	01db      	lsls	r3, r3, #7
 8008280:	4413      	add	r3, r2
 8008282:	681b      	ldr	r3, [r3, #0]
 8008284:	68fa      	ldr	r2, [r7, #12]
 8008286:	6811      	ldr	r1, [r2, #0]
 8008288:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 800828c:	68bb      	ldr	r3, [r7, #8]
 800828e:	3301      	adds	r3, #1
 8008290:	01db      	lsls	r3, r3, #7
 8008292:	440b      	add	r3, r1
 8008294:	601a      	str	r2, [r3, #0]
          hhrtim->Instance->sTimerxRegs[TimerIdx].TIMxCR |= (pCompareCfg->AutoDelayedMode << 2U);
 8008296:	68fb      	ldr	r3, [r7, #12]
 8008298:	681a      	ldr	r2, [r3, #0]
 800829a:	68bb      	ldr	r3, [r7, #8]
 800829c:	3301      	adds	r3, #1
 800829e:	01db      	lsls	r3, r3, #7
 80082a0:	4413      	add	r3, r2
 80082a2:	681a      	ldr	r2, [r3, #0]
 80082a4:	683b      	ldr	r3, [r7, #0]
 80082a6:	685b      	ldr	r3, [r3, #4]
 80082a8:	009b      	lsls	r3, r3, #2
 80082aa:	68f9      	ldr	r1, [r7, #12]
 80082ac:	6809      	ldr	r1, [r1, #0]
 80082ae:	431a      	orrs	r2, r3
 80082b0:	68bb      	ldr	r3, [r7, #8]
 80082b2:	3301      	adds	r3, #1
 80082b4:	01db      	lsls	r3, r3, #7
 80082b6:	440b      	add	r3, r1
 80082b8:	601a      	str	r2, [r3, #0]

          /* Set the compare value for timeout compare unit (if any) */
          if (pCompareCfg->AutoDelayedMode == HRTIM_AUTODELAYEDMODE_AUTODELAYED_TIMEOUTCMP1)
 80082ba:	683b      	ldr	r3, [r7, #0]
 80082bc:	685b      	ldr	r3, [r3, #4]
 80082be:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80082c2:	d109      	bne.n	80082d8 <HAL_HRTIM_WaveformCompareConfig+0x254>
          {
            hhrtim->Instance->sTimerxRegs[TimerIdx].CMP1xR = pCompareCfg->AutoDelayedTimeout;
 80082c4:	68fb      	ldr	r3, [r7, #12]
 80082c6:	6819      	ldr	r1, [r3, #0]
 80082c8:	683b      	ldr	r3, [r7, #0]
 80082ca:	689a      	ldr	r2, [r3, #8]
 80082cc:	68bb      	ldr	r3, [r7, #8]
 80082ce:	01db      	lsls	r3, r3, #7
 80082d0:	440b      	add	r3, r1
 80082d2:	339c      	adds	r3, #156	; 0x9c
 80082d4:	601a      	str	r2, [r3, #0]
        else
        {
          /* Clear HRTIM_TIMxCR.DELCMP4 bitfield */
          MODIFY_REG(hhrtim->Instance->sTimerxRegs[TimerIdx].TIMxCR, HRTIM_TIMCR_DELCMP4, 0U);
        }
         break;
 80082d6:	e02a      	b.n	800832e <HAL_HRTIM_WaveformCompareConfig+0x2aa>
          else if (pCompareCfg->AutoDelayedMode == HRTIM_AUTODELAYEDMODE_AUTODELAYED_TIMEOUTCMP3)
 80082d8:	683b      	ldr	r3, [r7, #0]
 80082da:	685b      	ldr	r3, [r3, #4]
 80082dc:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 80082e0:	d125      	bne.n	800832e <HAL_HRTIM_WaveformCompareConfig+0x2aa>
            hhrtim->Instance->sTimerxRegs[TimerIdx].CMP3xR = pCompareCfg->AutoDelayedTimeout;
 80082e2:	68fb      	ldr	r3, [r7, #12]
 80082e4:	6819      	ldr	r1, [r3, #0]
 80082e6:	683b      	ldr	r3, [r7, #0]
 80082e8:	689a      	ldr	r2, [r3, #8]
 80082ea:	68bb      	ldr	r3, [r7, #8]
 80082ec:	01db      	lsls	r3, r3, #7
 80082ee:	440b      	add	r3, r1
 80082f0:	33a8      	adds	r3, #168	; 0xa8
 80082f2:	601a      	str	r2, [r3, #0]
         break;
 80082f4:	e01b      	b.n	800832e <HAL_HRTIM_WaveformCompareConfig+0x2aa>
          MODIFY_REG(hhrtim->Instance->sTimerxRegs[TimerIdx].TIMxCR, HRTIM_TIMCR_DELCMP4, 0U);
 80082f6:	68fb      	ldr	r3, [r7, #12]
 80082f8:	681a      	ldr	r2, [r3, #0]
 80082fa:	68bb      	ldr	r3, [r7, #8]
 80082fc:	3301      	adds	r3, #1
 80082fe:	01db      	lsls	r3, r3, #7
 8008300:	4413      	add	r3, r2
 8008302:	681b      	ldr	r3, [r3, #0]
 8008304:	68fa      	ldr	r2, [r7, #12]
 8008306:	6811      	ldr	r1, [r2, #0]
 8008308:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 800830c:	68bb      	ldr	r3, [r7, #8]
 800830e:	3301      	adds	r3, #1
 8008310:	01db      	lsls	r3, r3, #7
 8008312:	440b      	add	r3, r1
 8008314:	601a      	str	r2, [r3, #0]
         break;
 8008316:	e00a      	b.n	800832e <HAL_HRTIM_WaveformCompareConfig+0x2aa>
      }

  default:
     {
      hhrtim->State = HAL_HRTIM_STATE_ERROR;
 8008318:	68fb      	ldr	r3, [r7, #12]
 800831a:	2207      	movs	r2, #7
 800831c:	f883 20c1 	strb.w	r2, [r3, #193]	; 0xc1

      /* Process Unlocked */
      __HAL_UNLOCK(hhrtim);
 8008320:	68fb      	ldr	r3, [r7, #12]
 8008322:	2200      	movs	r2, #0
 8008324:	f883 20c0 	strb.w	r2, [r3, #192]	; 0xc0

      break;
 8008328:	e002      	b.n	8008330 <HAL_HRTIM_WaveformCompareConfig+0x2ac>
         break;
 800832a:	bf00      	nop
 800832c:	e000      	b.n	8008330 <HAL_HRTIM_WaveformCompareConfig+0x2ac>
         break;
 800832e:	bf00      	nop
     }
   }

   if(hhrtim->State == HAL_HRTIM_STATE_ERROR)
 8008330:	68fb      	ldr	r3, [r7, #12]
 8008332:	f893 30c1 	ldrb.w	r3, [r3, #193]	; 0xc1
 8008336:	b2db      	uxtb	r3, r3
 8008338:	2b07      	cmp	r3, #7
 800833a:	d101      	bne.n	8008340 <HAL_HRTIM_WaveformCompareConfig+0x2bc>
   {
     return HAL_ERROR;
 800833c:	2301      	movs	r3, #1
 800833e:	e008      	b.n	8008352 <HAL_HRTIM_WaveformCompareConfig+0x2ce>
   }

  }
  hhrtim->State = HAL_HRTIM_STATE_READY;
 8008340:	68fb      	ldr	r3, [r7, #12]
 8008342:	2201      	movs	r2, #1
 8008344:	f883 20c1 	strb.w	r2, [r3, #193]	; 0xc1

  /* Process Unlocked */
  __HAL_UNLOCK(hhrtim);
 8008348:	68fb      	ldr	r3, [r7, #12]
 800834a:	2200      	movs	r2, #0
 800834c:	f883 20c0 	strb.w	r2, [r3, #192]	; 0xc0

  return HAL_OK;
 8008350:	2300      	movs	r3, #0
}
 8008352:	4618      	mov	r0, r3
 8008354:	3714      	adds	r7, #20
 8008356:	46bd      	mov	sp, r7
 8008358:	f85d 7b04 	ldr.w	r7, [sp], #4
 800835c:	4770      	bx	lr
 800835e:	bf00      	nop

08008360 <HAL_HRTIM_WaveformOutputConfig>:
  */
HAL_StatusTypeDef HAL_HRTIM_WaveformOutputConfig(HRTIM_HandleTypeDef * hhrtim,
                                                uint32_t TimerIdx,
                                                uint32_t Output,
                                                const HRTIM_OutputCfgTypeDef * pOutputCfg)
{
 8008360:	b580      	push	{r7, lr}
 8008362:	b084      	sub	sp, #16
 8008364:	af00      	add	r7, sp, #0
 8008366:	60f8      	str	r0, [r7, #12]
 8008368:	60b9      	str	r1, [r7, #8]
 800836a:	607a      	str	r2, [r7, #4]
 800836c:	603b      	str	r3, [r7, #0]
  assert_param(IS_HRTIM_OUTPUTIDLEMODE(pOutputCfg->IdleMode));
  assert_param(IS_HRTIM_OUTPUTFAULTLEVEL(pOutputCfg->FaultLevel));
  assert_param(IS_HRTIM_OUTPUTCHOPPERMODE(pOutputCfg->ChopperModeEnable));
  assert_param(IS_HRTIM_OUTPUTBURSTMODEENTRY(pOutputCfg->BurstModeEntryDelayed));

  if(hhrtim->State == HAL_HRTIM_STATE_BUSY)
 800836e:	68fb      	ldr	r3, [r7, #12]
 8008370:	f893 30c1 	ldrb.w	r3, [r3, #193]	; 0xc1
 8008374:	b2db      	uxtb	r3, r3
 8008376:	2b02      	cmp	r3, #2
 8008378:	d101      	bne.n	800837e <HAL_HRTIM_WaveformOutputConfig+0x1e>
  {
     return HAL_BUSY;
 800837a:	2302      	movs	r3, #2
 800837c:	e01d      	b.n	80083ba <HAL_HRTIM_WaveformOutputConfig+0x5a>
  }

  /* Process Locked */
  __HAL_LOCK(hhrtim);
 800837e:	68fb      	ldr	r3, [r7, #12]
 8008380:	f893 30c0 	ldrb.w	r3, [r3, #192]	; 0xc0
 8008384:	2b01      	cmp	r3, #1
 8008386:	d101      	bne.n	800838c <HAL_HRTIM_WaveformOutputConfig+0x2c>
 8008388:	2302      	movs	r3, #2
 800838a:	e016      	b.n	80083ba <HAL_HRTIM_WaveformOutputConfig+0x5a>
 800838c:	68fb      	ldr	r3, [r7, #12]
 800838e:	2201      	movs	r2, #1
 8008390:	f883 20c0 	strb.w	r2, [r3, #192]	; 0xc0

  hhrtim->State = HAL_HRTIM_STATE_BUSY;
 8008394:	68fb      	ldr	r3, [r7, #12]
 8008396:	2202      	movs	r2, #2
 8008398:	f883 20c1 	strb.w	r2, [r3, #193]	; 0xc1

  /* Configure the timer output */
  HRTIM_OutputConfig(hhrtim,
 800839c:	683b      	ldr	r3, [r7, #0]
 800839e:	687a      	ldr	r2, [r7, #4]
 80083a0:	68b9      	ldr	r1, [r7, #8]
 80083a2:	68f8      	ldr	r0, [r7, #12]
 80083a4:	f000 fc50 	bl	8008c48 <HRTIM_OutputConfig>
                     TimerIdx,
                     Output,
                     pOutputCfg);

  hhrtim->State = HAL_HRTIM_STATE_READY;
 80083a8:	68fb      	ldr	r3, [r7, #12]
 80083aa:	2201      	movs	r2, #1
 80083ac:	f883 20c1 	strb.w	r2, [r3, #193]	; 0xc1

  /* Process Unlocked */
  __HAL_UNLOCK(hhrtim);
 80083b0:	68fb      	ldr	r3, [r7, #12]
 80083b2:	2200      	movs	r2, #0
 80083b4:	f883 20c0 	strb.w	r2, [r3, #192]	; 0xc0

  return HAL_OK;
 80083b8:	2300      	movs	r3, #0
}
 80083ba:	4618      	mov	r0, r3
 80083bc:	3710      	adds	r7, #16
 80083be:	46bd      	mov	sp, r7
 80083c0:	bd80      	pop	{r7, pc}

080083c2 <HAL_HRTIM_WaveformOutputStart>:
  *                    @arg HRTIM_OUTPUT_TE2: Timer E - Output 2
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HRTIM_WaveformOutputStart(HRTIM_HandleTypeDef * hhrtim,
                                                uint32_t OutputsToStart)
{
 80083c2:	b480      	push	{r7}
 80083c4:	b083      	sub	sp, #12
 80083c6:	af00      	add	r7, sp, #0
 80083c8:	6078      	str	r0, [r7, #4]
 80083ca:	6039      	str	r1, [r7, #0]
   /* Check the parameters */
  assert_param(IS_HRTIM_OUTPUT(OutputsToStart));

  /* Process Locked */
  __HAL_LOCK(hhrtim);
 80083cc:	687b      	ldr	r3, [r7, #4]
 80083ce:	f893 30c0 	ldrb.w	r3, [r3, #192]	; 0xc0
 80083d2:	2b01      	cmp	r3, #1
 80083d4:	d101      	bne.n	80083da <HAL_HRTIM_WaveformOutputStart+0x18>
 80083d6:	2302      	movs	r3, #2
 80083d8:	e01a      	b.n	8008410 <HAL_HRTIM_WaveformOutputStart+0x4e>
 80083da:	687b      	ldr	r3, [r7, #4]
 80083dc:	2201      	movs	r2, #1
 80083de:	f883 20c0 	strb.w	r2, [r3, #192]	; 0xc0

  hhrtim->State = HAL_HRTIM_STATE_BUSY;
 80083e2:	687b      	ldr	r3, [r7, #4]
 80083e4:	2202      	movs	r2, #2
 80083e6:	f883 20c1 	strb.w	r2, [r3, #193]	; 0xc1

  /* Enable the HRTIM outputs */
  hhrtim->Instance->sCommonRegs.OENR |= (OutputsToStart);
 80083ea:	687b      	ldr	r3, [r7, #4]
 80083ec:	681b      	ldr	r3, [r3, #0]
 80083ee:	f8d3 1394 	ldr.w	r1, [r3, #916]	; 0x394
 80083f2:	687b      	ldr	r3, [r7, #4]
 80083f4:	681b      	ldr	r3, [r3, #0]
 80083f6:	683a      	ldr	r2, [r7, #0]
 80083f8:	430a      	orrs	r2, r1
 80083fa:	f8c3 2394 	str.w	r2, [r3, #916]	; 0x394

  hhrtim->State = HAL_HRTIM_STATE_READY;
 80083fe:	687b      	ldr	r3, [r7, #4]
 8008400:	2201      	movs	r2, #1
 8008402:	f883 20c1 	strb.w	r2, [r3, #193]	; 0xc1

  /* Process Unlocked */
  __HAL_UNLOCK(hhrtim);
 8008406:	687b      	ldr	r3, [r7, #4]
 8008408:	2200      	movs	r2, #0
 800840a:	f883 20c0 	strb.w	r2, [r3, #192]	; 0xc0

  return HAL_OK;
 800840e:	2300      	movs	r3, #0
}
 8008410:	4618      	mov	r0, r3
 8008412:	370c      	adds	r7, #12
 8008414:	46bd      	mov	sp, r7
 8008416:	f85d 7b04 	ldr.w	r7, [sp], #4
 800841a:	4770      	bx	lr

0800841c <HAL_HRTIM_WaveformOutputStop>:
  *                    @arg HRTIM_OUTPUT_TE2: Timer E - Output 2
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HRTIM_WaveformOutputStop(HRTIM_HandleTypeDef * hhrtim,
                                               uint32_t OutputsToStop)
{
 800841c:	b480      	push	{r7}
 800841e:	b083      	sub	sp, #12
 8008420:	af00      	add	r7, sp, #0
 8008422:	6078      	str	r0, [r7, #4]
 8008424:	6039      	str	r1, [r7, #0]
   /* Check the parameters */
  assert_param(IS_HRTIM_OUTPUT(OutputsToStop));

  /* Process Locked */
  __HAL_LOCK(hhrtim);
 8008426:	687b      	ldr	r3, [r7, #4]
 8008428:	f893 30c0 	ldrb.w	r3, [r3, #192]	; 0xc0
 800842c:	2b01      	cmp	r3, #1
 800842e:	d101      	bne.n	8008434 <HAL_HRTIM_WaveformOutputStop+0x18>
 8008430:	2302      	movs	r3, #2
 8008432:	e01a      	b.n	800846a <HAL_HRTIM_WaveformOutputStop+0x4e>
 8008434:	687b      	ldr	r3, [r7, #4]
 8008436:	2201      	movs	r2, #1
 8008438:	f883 20c0 	strb.w	r2, [r3, #192]	; 0xc0

  hhrtim->State = HAL_HRTIM_STATE_BUSY;
 800843c:	687b      	ldr	r3, [r7, #4]
 800843e:	2202      	movs	r2, #2
 8008440:	f883 20c1 	strb.w	r2, [r3, #193]	; 0xc1

  /* Enable the HRTIM outputs */
  hhrtim->Instance->sCommonRegs.ODISR |= (OutputsToStop);
 8008444:	687b      	ldr	r3, [r7, #4]
 8008446:	681b      	ldr	r3, [r3, #0]
 8008448:	f8d3 1398 	ldr.w	r1, [r3, #920]	; 0x398
 800844c:	687b      	ldr	r3, [r7, #4]
 800844e:	681b      	ldr	r3, [r3, #0]
 8008450:	683a      	ldr	r2, [r7, #0]
 8008452:	430a      	orrs	r2, r1
 8008454:	f8c3 2398 	str.w	r2, [r3, #920]	; 0x398

  hhrtim->State = HAL_HRTIM_STATE_READY;
 8008458:	687b      	ldr	r3, [r7, #4]
 800845a:	2201      	movs	r2, #1
 800845c:	f883 20c1 	strb.w	r2, [r3, #193]	; 0xc1

  /* Process Unlocked */
  __HAL_UNLOCK(hhrtim);
 8008460:	687b      	ldr	r3, [r7, #4]
 8008462:	2200      	movs	r2, #0
 8008464:	f883 20c0 	strb.w	r2, [r3, #192]	; 0xc0

  return HAL_OK;
 8008468:	2300      	movs	r3, #0
}
 800846a:	4618      	mov	r0, r3
 800846c:	370c      	adds	r7, #12
 800846e:	46bd      	mov	sp, r7
 8008470:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008474:	4770      	bx	lr
	...

08008478 <HAL_HRTIM_WaveformCountStart_IT>:
  *       function.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HRTIM_WaveformCountStart_IT(HRTIM_HandleTypeDef * hhrtim,
                                                    uint32_t Timers)
{
 8008478:	b480      	push	{r7}
 800847a:	b085      	sub	sp, #20
 800847c:	af00      	add	r7, sp, #0
 800847e:	6078      	str	r0, [r7, #4]
 8008480:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_HRTIM_TIMERID(Timers));

  /* Process Locked */
  __HAL_LOCK(hhrtim);
 8008482:	687b      	ldr	r3, [r7, #4]
 8008484:	f893 30c0 	ldrb.w	r3, [r3, #192]	; 0xc0
 8008488:	2b01      	cmp	r3, #1
 800848a:	d101      	bne.n	8008490 <HAL_HRTIM_WaveformCountStart_IT+0x18>
 800848c:	2302      	movs	r3, #2
 800848e:	e05b      	b.n	8008548 <HAL_HRTIM_WaveformCountStart_IT+0xd0>
 8008490:	687b      	ldr	r3, [r7, #4]
 8008492:	2201      	movs	r2, #1
 8008494:	f883 20c0 	strb.w	r2, [r3, #192]	; 0xc0

  hhrtim->State = HAL_HRTIM_STATE_BUSY;
 8008498:	687b      	ldr	r3, [r7, #4]
 800849a:	2202      	movs	r2, #2
 800849c:	f883 20c1 	strb.w	r2, [r3, #193]	; 0xc1

  /* Enable HRTIM interrupts (if required) */
  __HAL_HRTIM_ENABLE_IT(hhrtim, hhrtim->Init.HRTIMInterruptResquests);
 80084a0:	687b      	ldr	r3, [r7, #4]
 80084a2:	681b      	ldr	r3, [r3, #0]
 80084a4:	f8d3 1390 	ldr.w	r1, [r3, #912]	; 0x390
 80084a8:	687b      	ldr	r3, [r7, #4]
 80084aa:	685a      	ldr	r2, [r3, #4]
 80084ac:	687b      	ldr	r3, [r7, #4]
 80084ae:	681b      	ldr	r3, [r3, #0]
 80084b0:	430a      	orrs	r2, r1
 80084b2:	f8c3 2390 	str.w	r2, [r3, #912]	; 0x390

  /* Enable master timer related interrupts (if required) */
  if ((Timers & HRTIM_TIMERID_MASTER) != 0U)
 80084b6:	683b      	ldr	r3, [r7, #0]
 80084b8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80084bc:	2b00      	cmp	r3, #0
 80084be:	d009      	beq.n	80084d4 <HAL_HRTIM_WaveformCountStart_IT+0x5c>
  {
    __HAL_HRTIM_MASTER_ENABLE_IT(hhrtim,
 80084c0:	687b      	ldr	r3, [r7, #4]
 80084c2:	681b      	ldr	r3, [r3, #0]
 80084c4:	68d9      	ldr	r1, [r3, #12]
 80084c6:	687b      	ldr	r3, [r7, #4]
 80084c8:	f8d3 20ac 	ldr.w	r2, [r3, #172]	; 0xac
 80084cc:	687b      	ldr	r3, [r7, #4]
 80084ce:	681b      	ldr	r3, [r3, #0]
 80084d0:	430a      	orrs	r2, r1
 80084d2:	60da      	str	r2, [r3, #12]
                                 hhrtim->TimerParam[HRTIM_TIMERINDEX_MASTER].InterruptRequests);
  }

  /* Enable timing unit related interrupts (if required) */
  for (timer_idx = HRTIM_TIMERINDEX_TIMER_A ;
 80084d4:	2300      	movs	r3, #0
 80084d6:	73fb      	strb	r3, [r7, #15]
 80084d8:	e022      	b.n	8008520 <HAL_HRTIM_WaveformCountStart_IT+0xa8>
       timer_idx < HRTIM_TIMERINDEX_MASTER ;
       timer_idx++)
  {
    if ((Timers & TimerIdxToTimerId[timer_idx]) != 0U)
 80084da:	7bfb      	ldrb	r3, [r7, #15]
 80084dc:	4a1d      	ldr	r2, [pc, #116]	; (8008554 <HAL_HRTIM_WaveformCountStart_IT+0xdc>)
 80084de:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 80084e2:	683b      	ldr	r3, [r7, #0]
 80084e4:	4013      	ands	r3, r2
 80084e6:	2b00      	cmp	r3, #0
 80084e8:	d017      	beq.n	800851a <HAL_HRTIM_WaveformCountStart_IT+0xa2>
    {
      __HAL_HRTIM_TIMER_ENABLE_IT(hhrtim,
 80084ea:	687b      	ldr	r3, [r7, #4]
 80084ec:	681a      	ldr	r2, [r3, #0]
 80084ee:	7bfb      	ldrb	r3, [r7, #15]
 80084f0:	01db      	lsls	r3, r3, #7
 80084f2:	4413      	add	r3, r2
 80084f4:	338c      	adds	r3, #140	; 0x8c
 80084f6:	6818      	ldr	r0, [r3, #0]
 80084f8:	7bfa      	ldrb	r2, [r7, #15]
 80084fa:	6879      	ldr	r1, [r7, #4]
 80084fc:	4613      	mov	r3, r2
 80084fe:	00db      	lsls	r3, r3, #3
 8008500:	1a9b      	subs	r3, r3, r2
 8008502:	009b      	lsls	r3, r3, #2
 8008504:	440b      	add	r3, r1
 8008506:	3320      	adds	r3, #32
 8008508:	681a      	ldr	r2, [r3, #0]
 800850a:	687b      	ldr	r3, [r7, #4]
 800850c:	6819      	ldr	r1, [r3, #0]
 800850e:	7bfb      	ldrb	r3, [r7, #15]
 8008510:	4302      	orrs	r2, r0
 8008512:	01db      	lsls	r3, r3, #7
 8008514:	440b      	add	r3, r1
 8008516:	338c      	adds	r3, #140	; 0x8c
 8008518:	601a      	str	r2, [r3, #0]
       timer_idx++)
 800851a:	7bfb      	ldrb	r3, [r7, #15]
 800851c:	3301      	adds	r3, #1
 800851e:	73fb      	strb	r3, [r7, #15]
       timer_idx < HRTIM_TIMERINDEX_MASTER ;
 8008520:	7bfb      	ldrb	r3, [r7, #15]
 8008522:	2b04      	cmp	r3, #4
 8008524:	d9d9      	bls.n	80084da <HAL_HRTIM_WaveformCountStart_IT+0x62>
                                  hhrtim->TimerParam[timer_idx].InterruptRequests);
    }
  }

  /* Enable timer(s) counter */
  hhrtim->Instance->sMasterRegs.MCR |= (Timers);
 8008526:	687b      	ldr	r3, [r7, #4]
 8008528:	681b      	ldr	r3, [r3, #0]
 800852a:	6819      	ldr	r1, [r3, #0]
 800852c:	687b      	ldr	r3, [r7, #4]
 800852e:	681b      	ldr	r3, [r3, #0]
 8008530:	683a      	ldr	r2, [r7, #0]
 8008532:	430a      	orrs	r2, r1
 8008534:	601a      	str	r2, [r3, #0]

  hhrtim->State = HAL_HRTIM_STATE_READY;
 8008536:	687b      	ldr	r3, [r7, #4]
 8008538:	2201      	movs	r2, #1
 800853a:	f883 20c1 	strb.w	r2, [r3, #193]	; 0xc1

  /* Process Unlocked */
  __HAL_UNLOCK(hhrtim);
 800853e:	687b      	ldr	r3, [r7, #4]
 8008540:	2200      	movs	r2, #0
 8008542:	f883 20c0 	strb.w	r2, [r3, #192]	; 0xc0

  return HAL_OK;}
 8008546:	2300      	movs	r3, #0
 8008548:	4618      	mov	r0, r3
 800854a:	3714      	adds	r7, #20
 800854c:	46bd      	mov	sp, r7
 800854e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008552:	4770      	bx	lr
 8008554:	2000002c 	.word	0x2000002c

08008558 <HAL_HRTIM_WaveformCountStop_IT>:
  * @note The counter of a timer is stopped only if all timer outputs are disabled
  * @note All enabled timer related interrupts are disabled.
  */
HAL_StatusTypeDef HAL_HRTIM_WaveformCountStop_IT(HRTIM_HandleTypeDef * hhrtim,
                                                   uint32_t Timers)
{
 8008558:	b480      	push	{r7}
 800855a:	b085      	sub	sp, #20
 800855c:	af00      	add	r7, sp, #0
 800855e:	6078      	str	r0, [r7, #4]
 8008560:	6039      	str	r1, [r7, #0]
  /* ++ WA */
  __IO uint32_t delai = (uint32_t)(0x17FU);
 8008562:	f240 137f 	movw	r3, #383	; 0x17f
 8008566:	60bb      	str	r3, [r7, #8]

  /* Check the parameters */
  assert_param(IS_HRTIM_TIMERID(Timers));

  /* Process Locked */
  __HAL_LOCK(hhrtim);
 8008568:	687b      	ldr	r3, [r7, #4]
 800856a:	f893 30c0 	ldrb.w	r3, [r3, #192]	; 0xc0
 800856e:	2b01      	cmp	r3, #1
 8008570:	d101      	bne.n	8008576 <HAL_HRTIM_WaveformCountStop_IT+0x1e>
 8008572:	2302      	movs	r3, #2
 8008574:	e065      	b.n	8008642 <HAL_HRTIM_WaveformCountStop_IT+0xea>
 8008576:	687b      	ldr	r3, [r7, #4]
 8008578:	2201      	movs	r2, #1
 800857a:	f883 20c0 	strb.w	r2, [r3, #192]	; 0xc0

  hhrtim->State = HAL_HRTIM_STATE_BUSY;
 800857e:	687b      	ldr	r3, [r7, #4]
 8008580:	2202      	movs	r2, #2
 8008582:	f883 20c1 	strb.w	r2, [r3, #193]	; 0xc1

  /* Disable HRTIM interrupts (if required) */
  __HAL_HRTIM_DISABLE_IT(hhrtim, hhrtim->Init.HRTIMInterruptResquests);
 8008586:	687b      	ldr	r3, [r7, #4]
 8008588:	681b      	ldr	r3, [r3, #0]
 800858a:	f8d3 1390 	ldr.w	r1, [r3, #912]	; 0x390
 800858e:	687b      	ldr	r3, [r7, #4]
 8008590:	685b      	ldr	r3, [r3, #4]
 8008592:	43da      	mvns	r2, r3
 8008594:	687b      	ldr	r3, [r7, #4]
 8008596:	681b      	ldr	r3, [r3, #0]
 8008598:	400a      	ands	r2, r1
 800859a:	f8c3 2390 	str.w	r2, [r3, #912]	; 0x390

  /* Disable master timer related interrupts (if required) */
  if ((Timers & HRTIM_TIMERID_MASTER) != 0U)
 800859e:	683b      	ldr	r3, [r7, #0]
 80085a0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80085a4:	2b00      	cmp	r3, #0
 80085a6:	d00a      	beq.n	80085be <HAL_HRTIM_WaveformCountStop_IT+0x66>
  {
    /* Interrupts enable flag must be cleared one by one */
    __HAL_HRTIM_MASTER_DISABLE_IT(hhrtim, hhrtim->TimerParam[HRTIM_TIMERINDEX_MASTER].InterruptRequests);
 80085a8:	687b      	ldr	r3, [r7, #4]
 80085aa:	681b      	ldr	r3, [r3, #0]
 80085ac:	68d9      	ldr	r1, [r3, #12]
 80085ae:	687b      	ldr	r3, [r7, #4]
 80085b0:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 80085b4:	43da      	mvns	r2, r3
 80085b6:	687b      	ldr	r3, [r7, #4]
 80085b8:	681b      	ldr	r3, [r3, #0]
 80085ba:	400a      	ands	r2, r1
 80085bc:	60da      	str	r2, [r3, #12]
  }

  /* Disable timing unit related interrupts (if required) */
  for (timer_idx = HRTIM_TIMERINDEX_TIMER_A ;
 80085be:	2300      	movs	r3, #0
 80085c0:	73fb      	strb	r3, [r7, #15]
 80085c2:	e023      	b.n	800860c <HAL_HRTIM_WaveformCountStop_IT+0xb4>
       timer_idx < HRTIM_TIMERINDEX_MASTER ;
       timer_idx++)
  {
    if ((Timers & TimerIdxToTimerId[timer_idx]) != 0U)
 80085c4:	7bfb      	ldrb	r3, [r7, #15]
 80085c6:	4a22      	ldr	r2, [pc, #136]	; (8008650 <HAL_HRTIM_WaveformCountStop_IT+0xf8>)
 80085c8:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 80085cc:	683b      	ldr	r3, [r7, #0]
 80085ce:	4013      	ands	r3, r2
 80085d0:	2b00      	cmp	r3, #0
 80085d2:	d018      	beq.n	8008606 <HAL_HRTIM_WaveformCountStop_IT+0xae>
    {
      __HAL_HRTIM_TIMER_DISABLE_IT(hhrtim, timer_idx, hhrtim->TimerParam[timer_idx].InterruptRequests);
 80085d4:	687b      	ldr	r3, [r7, #4]
 80085d6:	681a      	ldr	r2, [r3, #0]
 80085d8:	7bfb      	ldrb	r3, [r7, #15]
 80085da:	01db      	lsls	r3, r3, #7
 80085dc:	4413      	add	r3, r2
 80085de:	338c      	adds	r3, #140	; 0x8c
 80085e0:	6818      	ldr	r0, [r3, #0]
 80085e2:	7bfa      	ldrb	r2, [r7, #15]
 80085e4:	6879      	ldr	r1, [r7, #4]
 80085e6:	4613      	mov	r3, r2
 80085e8:	00db      	lsls	r3, r3, #3
 80085ea:	1a9b      	subs	r3, r3, r2
 80085ec:	009b      	lsls	r3, r3, #2
 80085ee:	440b      	add	r3, r1
 80085f0:	3320      	adds	r3, #32
 80085f2:	681b      	ldr	r3, [r3, #0]
 80085f4:	43da      	mvns	r2, r3
 80085f6:	687b      	ldr	r3, [r7, #4]
 80085f8:	6819      	ldr	r1, [r3, #0]
 80085fa:	7bfb      	ldrb	r3, [r7, #15]
 80085fc:	4002      	ands	r2, r0
 80085fe:	01db      	lsls	r3, r3, #7
 8008600:	440b      	add	r3, r1
 8008602:	338c      	adds	r3, #140	; 0x8c
 8008604:	601a      	str	r2, [r3, #0]
       timer_idx++)
 8008606:	7bfb      	ldrb	r3, [r7, #15]
 8008608:	3301      	adds	r3, #1
 800860a:	73fb      	strb	r3, [r7, #15]
       timer_idx < HRTIM_TIMERINDEX_MASTER ;
 800860c:	7bfb      	ldrb	r3, [r7, #15]
 800860e:	2b04      	cmp	r3, #4
 8008610:	d9d8      	bls.n	80085c4 <HAL_HRTIM_WaveformCountStop_IT+0x6c>
    }
  }

  /* ++ WA */
  do { delai--; } while (delai != 0U);
 8008612:	68bb      	ldr	r3, [r7, #8]
 8008614:	3b01      	subs	r3, #1
 8008616:	60bb      	str	r3, [r7, #8]
 8008618:	68bb      	ldr	r3, [r7, #8]
 800861a:	2b00      	cmp	r3, #0
 800861c:	d1f9      	bne.n	8008612 <HAL_HRTIM_WaveformCountStop_IT+0xba>
  /* -- WA */

  /* Disable timer(s) counter */
  hhrtim->Instance->sMasterRegs.MCR &= ~(Timers);
 800861e:	687b      	ldr	r3, [r7, #4]
 8008620:	681b      	ldr	r3, [r3, #0]
 8008622:	6819      	ldr	r1, [r3, #0]
 8008624:	683b      	ldr	r3, [r7, #0]
 8008626:	43da      	mvns	r2, r3
 8008628:	687b      	ldr	r3, [r7, #4]
 800862a:	681b      	ldr	r3, [r3, #0]
 800862c:	400a      	ands	r2, r1
 800862e:	601a      	str	r2, [r3, #0]

  hhrtim->State = HAL_HRTIM_STATE_READY;
 8008630:	687b      	ldr	r3, [r7, #4]
 8008632:	2201      	movs	r2, #1
 8008634:	f883 20c1 	strb.w	r2, [r3, #193]	; 0xc1

  /* Process Unlocked */
  __HAL_UNLOCK(hhrtim);
 8008638:	687b      	ldr	r3, [r7, #4]
 800863a:	2200      	movs	r2, #0
 800863c:	f883 20c0 	strb.w	r2, [r3, #192]	; 0xc0

  return HAL_OK;
 8008640:	2300      	movs	r3, #0
}
 8008642:	4618      	mov	r0, r3
 8008644:	3714      	adds	r7, #20
 8008646:	46bd      	mov	sp, r7
 8008648:	f85d 7b04 	ldr.w	r7, [sp], #4
 800864c:	4770      	bx	lr
 800864e:	bf00      	nop
 8008650:	2000002c 	.word	0x2000002c

08008654 <HAL_HRTIM_IRQHandler>:
  *                   This parameter can be any value of HRTIM_Timer_Index
  * @retval None
  */
void HAL_HRTIM_IRQHandler(HRTIM_HandleTypeDef * hhrtim,
                          uint32_t TimerIdx)
{
 8008654:	b580      	push	{r7, lr}
 8008656:	b082      	sub	sp, #8
 8008658:	af00      	add	r7, sp, #0
 800865a:	6078      	str	r0, [r7, #4]
 800865c:	6039      	str	r1, [r7, #0]
  /* HRTIM interrupts handling */
  if (TimerIdx == HRTIM_TIMERINDEX_COMMON)
 800865e:	683b      	ldr	r3, [r7, #0]
 8008660:	2bff      	cmp	r3, #255	; 0xff
 8008662:	d103      	bne.n	800866c <HAL_HRTIM_IRQHandler+0x18>
  {
    HRTIM_HRTIM_ISR(hhrtim);
 8008664:	6878      	ldr	r0, [r7, #4]
 8008666:	f000 fc29 	bl	8008ebc <HRTIM_HRTIM_ISR>
  {
    /* Timing unit related interrupts handling */
    HRTIM_Timer_ISR(hhrtim, TimerIdx);
  }

}
 800866a:	e00a      	b.n	8008682 <HAL_HRTIM_IRQHandler+0x2e>
  else if (TimerIdx == HRTIM_TIMERINDEX_MASTER)
 800866c:	683b      	ldr	r3, [r7, #0]
 800866e:	2b05      	cmp	r3, #5
 8008670:	d103      	bne.n	800867a <HAL_HRTIM_IRQHandler+0x26>
    HRTIM_Master_ISR(hhrtim);
 8008672:	6878      	ldr	r0, [r7, #4]
 8008674:	f000 fca0 	bl	8008fb8 <HRTIM_Master_ISR>
}
 8008678:	e003      	b.n	8008682 <HAL_HRTIM_IRQHandler+0x2e>
    HRTIM_Timer_ISR(hhrtim, TimerIdx);
 800867a:	6839      	ldr	r1, [r7, #0]
 800867c:	6878      	ldr	r0, [r7, #4]
 800867e:	f000 fd45 	bl	800910c <HRTIM_Timer_ISR>
}
 8008682:	bf00      	nop
 8008684:	3708      	adds	r7, #8
 8008686:	46bd      	mov	sp, r7
 8008688:	bd80      	pop	{r7, pc}

0800868a <HAL_HRTIM_Fault1Callback>:
  * @brief  Callback function invoked when a fault 1 interrupt occurred
  * @param  hhrtim pointer to HAL HRTIM handle  * @retval None
  * @retval None
  */
__weak void HAL_HRTIM_Fault1Callback(HRTIM_HandleTypeDef * hhrtim)
{
 800868a:	b480      	push	{r7}
 800868c:	b083      	sub	sp, #12
 800868e:	af00      	add	r7, sp, #0
 8008690:	6078      	str	r0, [r7, #4]
  UNUSED(hhrtim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_HRTIM_Fault1Callback could be implemented in the user file
   */
}
 8008692:	bf00      	nop
 8008694:	370c      	adds	r7, #12
 8008696:	46bd      	mov	sp, r7
 8008698:	f85d 7b04 	ldr.w	r7, [sp], #4
 800869c:	4770      	bx	lr

0800869e <HAL_HRTIM_Fault2Callback>:
  * @brief  Callback function invoked when a fault 2 interrupt occurred
  * @param  hhrtim pointer to HAL HRTIM handle
  * @retval None
  */
__weak void HAL_HRTIM_Fault2Callback(HRTIM_HandleTypeDef * hhrtim)
{
 800869e:	b480      	push	{r7}
 80086a0:	b083      	sub	sp, #12
 80086a2:	af00      	add	r7, sp, #0
 80086a4:	6078      	str	r0, [r7, #4]
  UNUSED(hhrtim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_HRTIM_Fault2Callback could be implemented in the user file
   */
}
 80086a6:	bf00      	nop
 80086a8:	370c      	adds	r7, #12
 80086aa:	46bd      	mov	sp, r7
 80086ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80086b0:	4770      	bx	lr

080086b2 <HAL_HRTIM_Fault3Callback>:
  * @brief  Callback function invoked when a fault 3 interrupt occurred
  * @param  hhrtim pointer to HAL HRTIM handle
  * @retval None
  */
__weak void HAL_HRTIM_Fault3Callback(HRTIM_HandleTypeDef * hhrtim)
{
 80086b2:	b480      	push	{r7}
 80086b4:	b083      	sub	sp, #12
 80086b6:	af00      	add	r7, sp, #0
 80086b8:	6078      	str	r0, [r7, #4]
  UNUSED(hhrtim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_HRTIM_Fault3Callback could be implemented in the user file
   */
}
 80086ba:	bf00      	nop
 80086bc:	370c      	adds	r7, #12
 80086be:	46bd      	mov	sp, r7
 80086c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80086c4:	4770      	bx	lr

080086c6 <HAL_HRTIM_Fault4Callback>:
  * @brief  Callback function invoked when a fault 4 interrupt occurred
  * @param  hhrtim pointer to HAL HRTIM handle
  * @retval None
  */
__weak void HAL_HRTIM_Fault4Callback(HRTIM_HandleTypeDef * hhrtim)
{
 80086c6:	b480      	push	{r7}
 80086c8:	b083      	sub	sp, #12
 80086ca:	af00      	add	r7, sp, #0
 80086cc:	6078      	str	r0, [r7, #4]
  UNUSED(hhrtim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_HRTIM_Fault4Callback could be implemented in the user file
   */
}
 80086ce:	bf00      	nop
 80086d0:	370c      	adds	r7, #12
 80086d2:	46bd      	mov	sp, r7
 80086d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80086d8:	4770      	bx	lr

080086da <HAL_HRTIM_Fault5Callback>:
  * @brief  Callback function invoked when a fault 5 interrupt occurred
  * @param  hhrtim pointer to HAL HRTIM handle
  * @retval None
  */
__weak void HAL_HRTIM_Fault5Callback(HRTIM_HandleTypeDef * hhrtim)
{
 80086da:	b480      	push	{r7}
 80086dc:	b083      	sub	sp, #12
 80086de:	af00      	add	r7, sp, #0
 80086e0:	6078      	str	r0, [r7, #4]
  UNUSED(hhrtim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_HRTIM_Fault5Callback could be implemented in the user file
   */
}
 80086e2:	bf00      	nop
 80086e4:	370c      	adds	r7, #12
 80086e6:	46bd      	mov	sp, r7
 80086e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80086ec:	4770      	bx	lr

080086ee <HAL_HRTIM_SystemFaultCallback>:
  * @brief  Callback function invoked when a system fault interrupt occurred
  * @param  hhrtim pointer to HAL HRTIM handle
  * @retval None
  */
__weak void HAL_HRTIM_SystemFaultCallback(HRTIM_HandleTypeDef * hhrtim)
{
 80086ee:	b480      	push	{r7}
 80086f0:	b083      	sub	sp, #12
 80086f2:	af00      	add	r7, sp, #0
 80086f4:	6078      	str	r0, [r7, #4]
  UNUSED(hhrtim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_HRTIM_SystemFaultCallback could be implemented in the user file
   */
}
 80086f6:	bf00      	nop
 80086f8:	370c      	adds	r7, #12
 80086fa:	46bd      	mov	sp, r7
 80086fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008700:	4770      	bx	lr

08008702 <HAL_HRTIM_BurstModePeriodCallback>:
  * @brief  Callback function invoked when the end of the burst mode period is reached
  * @param  hhrtim pointer to HAL HRTIM handle
  * @retval None
  */
__weak void HAL_HRTIM_BurstModePeriodCallback(HRTIM_HandleTypeDef * hhrtim)
{
 8008702:	b480      	push	{r7}
 8008704:	b083      	sub	sp, #12
 8008706:	af00      	add	r7, sp, #0
 8008708:	6078      	str	r0, [r7, #4]
  UNUSED(hhrtim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_HRTIM_BurstModeCallback could be implemented in the user file
   */
}
 800870a:	bf00      	nop
 800870c:	370c      	adds	r7, #12
 800870e:	46bd      	mov	sp, r7
 8008710:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008714:	4770      	bx	lr

08008716 <HAL_HRTIM_SynchronizationEventCallback>:
  * @brief  Callback function invoked when a synchronization input event is received
  * @param  hhrtim pointer to HAL HRTIM handle
  * @retval None
  */
__weak void HAL_HRTIM_SynchronizationEventCallback(HRTIM_HandleTypeDef * hhrtim)
{
 8008716:	b480      	push	{r7}
 8008718:	b083      	sub	sp, #12
 800871a:	af00      	add	r7, sp, #0
 800871c:	6078      	str	r0, [r7, #4]
  UNUSED(hhrtim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_HRTIM_SynchronizationEventCallback could be implemented in the user file
   */
}
 800871e:	bf00      	nop
 8008720:	370c      	adds	r7, #12
 8008722:	46bd      	mov	sp, r7
 8008724:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008728:	4770      	bx	lr

0800872a <HAL_HRTIM_RegistersUpdateCallback>:
  *                   @arg HRTIM_TIMERINDEX_TIMER_E for timer E
  * @retval None
  */
__weak void HAL_HRTIM_RegistersUpdateCallback(HRTIM_HandleTypeDef * hhrtim,
                                              uint32_t TimerIdx)
{
 800872a:	b480      	push	{r7}
 800872c:	b083      	sub	sp, #12
 800872e:	af00      	add	r7, sp, #0
 8008730:	6078      	str	r0, [r7, #4]
 8008732:	6039      	str	r1, [r7, #0]
  UNUSED(TimerIdx);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_HRTIM_Master_RegistersUpdateCallback could be implemented in the user file
   */
}
 8008734:	bf00      	nop
 8008736:	370c      	adds	r7, #12
 8008738:	46bd      	mov	sp, r7
 800873a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800873e:	4770      	bx	lr

08008740 <HAL_HRTIM_Compare1EventCallback>:
  *                   @arg HRTIM_TIMERINDEX_TIMER_E for timer E
  * @retval None
  */
__weak void HAL_HRTIM_Compare1EventCallback(HRTIM_HandleTypeDef * hhrtim,
                                              uint32_t TimerIdx)
{
 8008740:	b480      	push	{r7}
 8008742:	b083      	sub	sp, #12
 8008744:	af00      	add	r7, sp, #0
 8008746:	6078      	str	r0, [r7, #4]
 8008748:	6039      	str	r1, [r7, #0]
  UNUSED(TimerIdx);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_HRTIM_Master_Compare1EventCallback could be implemented in the user file
   */
}
 800874a:	bf00      	nop
 800874c:	370c      	adds	r7, #12
 800874e:	46bd      	mov	sp, r7
 8008750:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008754:	4770      	bx	lr

08008756 <HAL_HRTIM_Compare4EventCallback>:
  *                   @arg HRTIM_TIMERINDEX_TIMER_E for timer E
  * @retval None
  */
__weak void HAL_HRTIM_Compare4EventCallback(HRTIM_HandleTypeDef * hhrtim,
                                              uint32_t TimerIdx)
{
 8008756:	b480      	push	{r7}
 8008758:	b083      	sub	sp, #12
 800875a:	af00      	add	r7, sp, #0
 800875c:	6078      	str	r0, [r7, #4]
 800875e:	6039      	str	r1, [r7, #0]
  UNUSED(TimerIdx);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_HRTIM_Master_Compare4EventCallback could be implemented in the user file
   */
}
 8008760:	bf00      	nop
 8008762:	370c      	adds	r7, #12
 8008764:	46bd      	mov	sp, r7
 8008766:	f85d 7b04 	ldr.w	r7, [sp], #4
 800876a:	4770      	bx	lr

0800876c <HAL_HRTIM_Capture1EventCallback>:
  *                   @arg HRTIM_TIMERINDEX_TIMER_E for timer E
  * @retval None
  */
__weak void HAL_HRTIM_Capture1EventCallback(HRTIM_HandleTypeDef * hhrtim,
                                              uint32_t TimerIdx)
{
 800876c:	b480      	push	{r7}
 800876e:	b083      	sub	sp, #12
 8008770:	af00      	add	r7, sp, #0
 8008772:	6078      	str	r0, [r7, #4]
 8008774:	6039      	str	r1, [r7, #0]
  UNUSED(TimerIdx);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_HRTIM_Timer_Capture1EventCallback could be implemented in the user file
   */
}
 8008776:	bf00      	nop
 8008778:	370c      	adds	r7, #12
 800877a:	46bd      	mov	sp, r7
 800877c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008780:	4770      	bx	lr

08008782 <HAL_HRTIM_Capture2EventCallback>:
  *                   @arg HRTIM_TIMERINDEX_TIMER_E for timer E
  * @retval None
  */
__weak void HAL_HRTIM_Capture2EventCallback(HRTIM_HandleTypeDef * hhrtim,
                                              uint32_t TimerIdx)
{
 8008782:	b480      	push	{r7}
 8008784:	b083      	sub	sp, #12
 8008786:	af00      	add	r7, sp, #0
 8008788:	6078      	str	r0, [r7, #4]
 800878a:	6039      	str	r1, [r7, #0]
  UNUSED(TimerIdx);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_HRTIM_Timer_Capture2EventCallback could be implemented in the user file
   */
}
 800878c:	bf00      	nop
 800878e:	370c      	adds	r7, #12
 8008790:	46bd      	mov	sp, r7
 8008792:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008796:	4770      	bx	lr

08008798 <HAL_HRTIM_DelayedProtectionCallback>:
  *                   @arg HRTIM_TIMERINDEX_TIMER_E for timer E
  * @retval None
  */
__weak void HAL_HRTIM_DelayedProtectionCallback(HRTIM_HandleTypeDef * hhrtim,
                                              uint32_t TimerIdx)
{
 8008798:	b480      	push	{r7}
 800879a:	b083      	sub	sp, #12
 800879c:	af00      	add	r7, sp, #0
 800879e:	6078      	str	r0, [r7, #4]
 80087a0:	6039      	str	r1, [r7, #0]
  UNUSED(TimerIdx);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_HRTIM_Timer_DelayedProtectionCallback could be implemented in the user file
   */
}
 80087a2:	bf00      	nop
 80087a4:	370c      	adds	r7, #12
 80087a6:	46bd      	mov	sp, r7
 80087a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80087ac:	4770      	bx	lr

080087ae <HAL_HRTIM_CounterResetCallback>:
  *                   @arg HRTIM_TIMERINDEX_TIMER_E for timer E
  * @retval None
  */
__weak void HAL_HRTIM_CounterResetCallback(HRTIM_HandleTypeDef * hhrtim,
                                              uint32_t TimerIdx)
{
 80087ae:	b480      	push	{r7}
 80087b0:	b083      	sub	sp, #12
 80087b2:	af00      	add	r7, sp, #0
 80087b4:	6078      	str	r0, [r7, #4]
 80087b6:	6039      	str	r1, [r7, #0]
  UNUSED(TimerIdx);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_HRTIM_Timer_CounterResetCallback could be implemented in the user file
   */
}
 80087b8:	bf00      	nop
 80087ba:	370c      	adds	r7, #12
 80087bc:	46bd      	mov	sp, r7
 80087be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80087c2:	4770      	bx	lr

080087c4 <HAL_HRTIM_Output1SetCallback>:
  *                   @arg HRTIM_TIMERINDEX_TIMER_E for timer E
  * @retval None
  */
__weak void HAL_HRTIM_Output1SetCallback(HRTIM_HandleTypeDef * hhrtim,
                                              uint32_t TimerIdx)
{
 80087c4:	b480      	push	{r7}
 80087c6:	b083      	sub	sp, #12
 80087c8:	af00      	add	r7, sp, #0
 80087ca:	6078      	str	r0, [r7, #4]
 80087cc:	6039      	str	r1, [r7, #0]
  UNUSED(TimerIdx);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_HRTIM_Timer_Output1SetCallback could be implemented in the user file
   */
}
 80087ce:	bf00      	nop
 80087d0:	370c      	adds	r7, #12
 80087d2:	46bd      	mov	sp, r7
 80087d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80087d8:	4770      	bx	lr

080087da <HAL_HRTIM_Output1ResetCallback>:
  *                   @arg HRTIM_TIMERINDEX_TIMER_E for timer E
  * @retval None
  */
__weak void HAL_HRTIM_Output1ResetCallback(HRTIM_HandleTypeDef * hhrtim,
                                              uint32_t TimerIdx)
{
 80087da:	b480      	push	{r7}
 80087dc:	b083      	sub	sp, #12
 80087de:	af00      	add	r7, sp, #0
 80087e0:	6078      	str	r0, [r7, #4]
 80087e2:	6039      	str	r1, [r7, #0]
  UNUSED(TimerIdx);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_HRTIM_Timer_Output1ResetCallback could be implemented in the user file
   */
}
 80087e4:	bf00      	nop
 80087e6:	370c      	adds	r7, #12
 80087e8:	46bd      	mov	sp, r7
 80087ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80087ee:	4770      	bx	lr

080087f0 <HAL_HRTIM_Output2SetCallback>:
  *                   @arg HRTIM_TIMERINDEX_TIMER_E for timer E
  * @retval None
  */
__weak void HAL_HRTIM_Output2SetCallback(HRTIM_HandleTypeDef * hhrtim,
                                              uint32_t TimerIdx)
{
 80087f0:	b480      	push	{r7}
 80087f2:	b083      	sub	sp, #12
 80087f4:	af00      	add	r7, sp, #0
 80087f6:	6078      	str	r0, [r7, #4]
 80087f8:	6039      	str	r1, [r7, #0]
  UNUSED(TimerIdx);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_HRTIM_Timer_Output2SetCallback could be implemented in the user file
   */
}
 80087fa:	bf00      	nop
 80087fc:	370c      	adds	r7, #12
 80087fe:	46bd      	mov	sp, r7
 8008800:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008804:	4770      	bx	lr

08008806 <HAL_HRTIM_Output2ResetCallback>:
  *                   @arg HRTIM_TIMERINDEX_TIMER_E for timer E
  * @retval None
  */
__weak void HAL_HRTIM_Output2ResetCallback(HRTIM_HandleTypeDef * hhrtim,
                                              uint32_t TimerIdx)
{
 8008806:	b480      	push	{r7}
 8008808:	b083      	sub	sp, #12
 800880a:	af00      	add	r7, sp, #0
 800880c:	6078      	str	r0, [r7, #4]
 800880e:	6039      	str	r1, [r7, #0]
  UNUSED(TimerIdx);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_HRTIM_Timer_Output2ResetCallback could be implemented in the user file
   */
}
 8008810:	bf00      	nop
 8008812:	370c      	adds	r7, #12
 8008814:	46bd      	mov	sp, r7
 8008816:	f85d 7b04 	ldr.w	r7, [sp], #4
 800881a:	4770      	bx	lr

0800881c <HRTIM_MasterBase_Config>:
  * @param  pTimeBaseCfg pointer to the time base configuration structure
  * @retval None
  */
static void HRTIM_MasterBase_Config(HRTIM_HandleTypeDef * hhrtim,
                                    const HRTIM_TimeBaseCfgTypeDef * pTimeBaseCfg)
{
 800881c:	b480      	push	{r7}
 800881e:	b085      	sub	sp, #20
 8008820:	af00      	add	r7, sp, #0
 8008822:	6078      	str	r0, [r7, #4]
 8008824:	6039      	str	r1, [r7, #0]
  uint32_t hrtim_mcr;

  /* Configure master timer */
  hrtim_mcr = hhrtim->Instance->sMasterRegs.MCR;
 8008826:	687b      	ldr	r3, [r7, #4]
 8008828:	681b      	ldr	r3, [r3, #0]
 800882a:	681b      	ldr	r3, [r3, #0]
 800882c:	60fb      	str	r3, [r7, #12]

  /* Set the prescaler ratio */
  hrtim_mcr &= (uint32_t) ~(HRTIM_MCR_CK_PSC);
 800882e:	68fb      	ldr	r3, [r7, #12]
 8008830:	f023 0307 	bic.w	r3, r3, #7
 8008834:	60fb      	str	r3, [r7, #12]
  hrtim_mcr |= (uint32_t)pTimeBaseCfg->PrescalerRatio;
 8008836:	683b      	ldr	r3, [r7, #0]
 8008838:	689b      	ldr	r3, [r3, #8]
 800883a:	68fa      	ldr	r2, [r7, #12]
 800883c:	4313      	orrs	r3, r2
 800883e:	60fb      	str	r3, [r7, #12]

  /* Set the operating mode */
  hrtim_mcr &= (uint32_t) ~(HRTIM_MCR_CONT | HRTIM_MCR_RETRIG);
 8008840:	68fb      	ldr	r3, [r7, #12]
 8008842:	f023 0318 	bic.w	r3, r3, #24
 8008846:	60fb      	str	r3, [r7, #12]
  hrtim_mcr |= (uint32_t)pTimeBaseCfg->Mode;
 8008848:	683b      	ldr	r3, [r7, #0]
 800884a:	68db      	ldr	r3, [r3, #12]
 800884c:	68fa      	ldr	r2, [r7, #12]
 800884e:	4313      	orrs	r3, r2
 8008850:	60fb      	str	r3, [r7, #12]

  /* Update the HRTIM registers */
  hhrtim->Instance->sMasterRegs.MCR = hrtim_mcr;
 8008852:	687b      	ldr	r3, [r7, #4]
 8008854:	681b      	ldr	r3, [r3, #0]
 8008856:	68fa      	ldr	r2, [r7, #12]
 8008858:	601a      	str	r2, [r3, #0]
  hhrtim->Instance->sMasterRegs.MPER = pTimeBaseCfg->Period;
 800885a:	687b      	ldr	r3, [r7, #4]
 800885c:	681b      	ldr	r3, [r3, #0]
 800885e:	683a      	ldr	r2, [r7, #0]
 8008860:	6812      	ldr	r2, [r2, #0]
 8008862:	615a      	str	r2, [r3, #20]
  hhrtim->Instance->sMasterRegs.MREP = pTimeBaseCfg->RepetitionCounter;
 8008864:	687b      	ldr	r3, [r7, #4]
 8008866:	681b      	ldr	r3, [r3, #0]
 8008868:	683a      	ldr	r2, [r7, #0]
 800886a:	6852      	ldr	r2, [r2, #4]
 800886c:	619a      	str	r2, [r3, #24]
}
 800886e:	bf00      	nop
 8008870:	3714      	adds	r7, #20
 8008872:	46bd      	mov	sp, r7
 8008874:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008878:	4770      	bx	lr

0800887a <HRTIM_TimingUnitBase_Config>:
  * @retval None
  */
static void HRTIM_TimingUnitBase_Config(HRTIM_HandleTypeDef * hhrtim,
                                        uint32_t TimerIdx ,
                                        const HRTIM_TimeBaseCfgTypeDef * pTimeBaseCfg)
{
 800887a:	b480      	push	{r7}
 800887c:	b087      	sub	sp, #28
 800887e:	af00      	add	r7, sp, #0
 8008880:	60f8      	str	r0, [r7, #12]
 8008882:	60b9      	str	r1, [r7, #8]
 8008884:	607a      	str	r2, [r7, #4]
  uint32_t hrtim_timcr;

  /* Configure master timing unit */
  hrtim_timcr = hhrtim->Instance->sTimerxRegs[TimerIdx].TIMxCR;
 8008886:	68fb      	ldr	r3, [r7, #12]
 8008888:	681a      	ldr	r2, [r3, #0]
 800888a:	68bb      	ldr	r3, [r7, #8]
 800888c:	3301      	adds	r3, #1
 800888e:	01db      	lsls	r3, r3, #7
 8008890:	4413      	add	r3, r2
 8008892:	681b      	ldr	r3, [r3, #0]
 8008894:	617b      	str	r3, [r7, #20]

  /* Set the prescaler ratio */
  hrtim_timcr &= (uint32_t) ~(HRTIM_TIMCR_CK_PSC);
 8008896:	697b      	ldr	r3, [r7, #20]
 8008898:	f023 0307 	bic.w	r3, r3, #7
 800889c:	617b      	str	r3, [r7, #20]
  hrtim_timcr |= (uint32_t)pTimeBaseCfg->PrescalerRatio;
 800889e:	687b      	ldr	r3, [r7, #4]
 80088a0:	689b      	ldr	r3, [r3, #8]
 80088a2:	697a      	ldr	r2, [r7, #20]
 80088a4:	4313      	orrs	r3, r2
 80088a6:	617b      	str	r3, [r7, #20]

  /* Set the operating mode */
  hrtim_timcr &= (uint32_t) ~(HRTIM_TIMCR_CONT | HRTIM_TIMCR_RETRIG);
 80088a8:	697b      	ldr	r3, [r7, #20]
 80088aa:	f023 0318 	bic.w	r3, r3, #24
 80088ae:	617b      	str	r3, [r7, #20]
  hrtim_timcr |= (uint32_t)pTimeBaseCfg->Mode;
 80088b0:	687b      	ldr	r3, [r7, #4]
 80088b2:	68db      	ldr	r3, [r3, #12]
 80088b4:	697a      	ldr	r2, [r7, #20]
 80088b6:	4313      	orrs	r3, r2
 80088b8:	617b      	str	r3, [r7, #20]

  /* Update the HRTIM registers */
  hhrtim->Instance->sTimerxRegs[TimerIdx].TIMxCR = hrtim_timcr;
 80088ba:	68fb      	ldr	r3, [r7, #12]
 80088bc:	681a      	ldr	r2, [r3, #0]
 80088be:	68bb      	ldr	r3, [r7, #8]
 80088c0:	3301      	adds	r3, #1
 80088c2:	01db      	lsls	r3, r3, #7
 80088c4:	4413      	add	r3, r2
 80088c6:	697a      	ldr	r2, [r7, #20]
 80088c8:	601a      	str	r2, [r3, #0]
  hhrtim->Instance->sTimerxRegs[TimerIdx].PERxR = pTimeBaseCfg->Period;
 80088ca:	68fb      	ldr	r3, [r7, #12]
 80088cc:	6819      	ldr	r1, [r3, #0]
 80088ce:	687b      	ldr	r3, [r7, #4]
 80088d0:	681a      	ldr	r2, [r3, #0]
 80088d2:	68bb      	ldr	r3, [r7, #8]
 80088d4:	01db      	lsls	r3, r3, #7
 80088d6:	440b      	add	r3, r1
 80088d8:	3394      	adds	r3, #148	; 0x94
 80088da:	601a      	str	r2, [r3, #0]
  hhrtim->Instance->sTimerxRegs[TimerIdx].REPxR = pTimeBaseCfg->RepetitionCounter;
 80088dc:	68fb      	ldr	r3, [r7, #12]
 80088de:	6819      	ldr	r1, [r3, #0]
 80088e0:	687b      	ldr	r3, [r7, #4]
 80088e2:	685a      	ldr	r2, [r3, #4]
 80088e4:	68bb      	ldr	r3, [r7, #8]
 80088e6:	01db      	lsls	r3, r3, #7
 80088e8:	440b      	add	r3, r1
 80088ea:	3398      	adds	r3, #152	; 0x98
 80088ec:	601a      	str	r2, [r3, #0]
}
 80088ee:	bf00      	nop
 80088f0:	371c      	adds	r7, #28
 80088f2:	46bd      	mov	sp, r7
 80088f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80088f8:	4770      	bx	lr

080088fa <HRTIM_MasterWaveform_Config>:
  * @param  pTimerCfg pointer to the timer configuration data structure
  * @retval None
  */
static void HRTIM_MasterWaveform_Config(HRTIM_HandleTypeDef * hhrtim,
                                        const HRTIM_TimerCfgTypeDef * pTimerCfg)
{
 80088fa:	b480      	push	{r7}
 80088fc:	b085      	sub	sp, #20
 80088fe:	af00      	add	r7, sp, #0
 8008900:	6078      	str	r0, [r7, #4]
 8008902:	6039      	str	r1, [r7, #0]
  uint32_t hrtim_mcr;
  uint32_t hrtim_bmcr;

  /* Configure master timer */
  hrtim_mcr = hhrtim->Instance->sMasterRegs.MCR;
 8008904:	687b      	ldr	r3, [r7, #4]
 8008906:	681b      	ldr	r3, [r3, #0]
 8008908:	681b      	ldr	r3, [r3, #0]
 800890a:	60fb      	str	r3, [r7, #12]
  hrtim_bmcr = hhrtim->Instance->sCommonRegs.BMCR;
 800890c:	687b      	ldr	r3, [r7, #4]
 800890e:	681b      	ldr	r3, [r3, #0]
 8008910:	f8d3 33a0 	ldr.w	r3, [r3, #928]	; 0x3a0
 8008914:	60bb      	str	r3, [r7, #8]

  /* Enable/Disable the half mode */
  hrtim_mcr &= ~(HRTIM_MCR_HALF);
 8008916:	68fb      	ldr	r3, [r7, #12]
 8008918:	f023 0320 	bic.w	r3, r3, #32
 800891c:	60fb      	str	r3, [r7, #12]
  hrtim_mcr |= pTimerCfg->HalfModeEnable;
 800891e:	683b      	ldr	r3, [r7, #0]
 8008920:	695b      	ldr	r3, [r3, #20]
 8008922:	68fa      	ldr	r2, [r7, #12]
 8008924:	4313      	orrs	r3, r2
 8008926:	60fb      	str	r3, [r7, #12]

  /* Enable/Disable the timer start upon synchronization event reception */
  hrtim_mcr &= ~(HRTIM_MCR_SYNCSTRTM);
 8008928:	68fb      	ldr	r3, [r7, #12]
 800892a:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800892e:	60fb      	str	r3, [r7, #12]
  hrtim_mcr |= pTimerCfg->StartOnSync;
 8008930:	683b      	ldr	r3, [r7, #0]
 8008932:	699b      	ldr	r3, [r3, #24]
 8008934:	68fa      	ldr	r2, [r7, #12]
 8008936:	4313      	orrs	r3, r2
 8008938:	60fb      	str	r3, [r7, #12]

  /* Enable/Disable the timer reset upon synchronization event reception */
  hrtim_mcr &= ~(HRTIM_MCR_SYNCRSTM);
 800893a:	68fb      	ldr	r3, [r7, #12]
 800893c:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8008940:	60fb      	str	r3, [r7, #12]
  hrtim_mcr |= pTimerCfg->ResetOnSync;
 8008942:	683b      	ldr	r3, [r7, #0]
 8008944:	69db      	ldr	r3, [r3, #28]
 8008946:	68fa      	ldr	r2, [r7, #12]
 8008948:	4313      	orrs	r3, r2
 800894a:	60fb      	str	r3, [r7, #12]

  /* Enable/Disable the DAC synchronization event generation */
  hrtim_mcr &= ~(HRTIM_MCR_DACSYNC);
 800894c:	68fb      	ldr	r3, [r7, #12]
 800894e:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 8008952:	60fb      	str	r3, [r7, #12]
  hrtim_mcr |= pTimerCfg->DACSynchro;
 8008954:	683b      	ldr	r3, [r7, #0]
 8008956:	6a1b      	ldr	r3, [r3, #32]
 8008958:	68fa      	ldr	r2, [r7, #12]
 800895a:	4313      	orrs	r3, r2
 800895c:	60fb      	str	r3, [r7, #12]

  /* Enable/Disable preload mechanism for timer registers */
  hrtim_mcr &= ~(HRTIM_MCR_PREEN);
 800895e:	68fb      	ldr	r3, [r7, #12]
 8008960:	f023 6300 	bic.w	r3, r3, #134217728	; 0x8000000
 8008964:	60fb      	str	r3, [r7, #12]
  hrtim_mcr |= pTimerCfg->PreloadEnable;
 8008966:	683b      	ldr	r3, [r7, #0]
 8008968:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800896a:	68fa      	ldr	r2, [r7, #12]
 800896c:	4313      	orrs	r3, r2
 800896e:	60fb      	str	r3, [r7, #12]

  /* Master timer registers update handling */
  hrtim_mcr &= ~(HRTIM_MCR_BRSTDMA);
 8008970:	68fb      	ldr	r3, [r7, #12]
 8008972:	f023 4340 	bic.w	r3, r3, #3221225472	; 0xc0000000
 8008976:	60fb      	str	r3, [r7, #12]
  hrtim_mcr |= (pTimerCfg->UpdateGating << 2U);
 8008978:	683b      	ldr	r3, [r7, #0]
 800897a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800897c:	009b      	lsls	r3, r3, #2
 800897e:	68fa      	ldr	r2, [r7, #12]
 8008980:	4313      	orrs	r3, r2
 8008982:	60fb      	str	r3, [r7, #12]

  /* Enable/Disable registers update on repetition */
  hrtim_mcr &= ~(HRTIM_MCR_MREPU);
 8008984:	68fb      	ldr	r3, [r7, #12]
 8008986:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 800898a:	60fb      	str	r3, [r7, #12]
  hrtim_mcr |= pTimerCfg->RepetitionUpdate;
 800898c:	683b      	ldr	r3, [r7, #0]
 800898e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008990:	68fa      	ldr	r2, [r7, #12]
 8008992:	4313      	orrs	r3, r2
 8008994:	60fb      	str	r3, [r7, #12]

  /* Set the timer burst mode */
  hrtim_bmcr &= ~(HRTIM_BMCR_MTBM);
 8008996:	68bb      	ldr	r3, [r7, #8]
 8008998:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800899c:	60bb      	str	r3, [r7, #8]
  hrtim_bmcr |= pTimerCfg->BurstMode;
 800899e:	683b      	ldr	r3, [r7, #0]
 80089a0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80089a2:	68ba      	ldr	r2, [r7, #8]
 80089a4:	4313      	orrs	r3, r2
 80089a6:	60bb      	str	r3, [r7, #8]

  /* Update the HRTIM registers */
  hhrtim->Instance->sMasterRegs.MCR = hrtim_mcr;
 80089a8:	687b      	ldr	r3, [r7, #4]
 80089aa:	681b      	ldr	r3, [r3, #0]
 80089ac:	68fa      	ldr	r2, [r7, #12]
 80089ae:	601a      	str	r2, [r3, #0]
  hhrtim->Instance->sCommonRegs.BMCR = hrtim_bmcr;
 80089b0:	687b      	ldr	r3, [r7, #4]
 80089b2:	681b      	ldr	r3, [r3, #0]
 80089b4:	68ba      	ldr	r2, [r7, #8]
 80089b6:	f8c3 23a0 	str.w	r2, [r3, #928]	; 0x3a0
}
 80089ba:	bf00      	nop
 80089bc:	3714      	adds	r7, #20
 80089be:	46bd      	mov	sp, r7
 80089c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80089c4:	4770      	bx	lr
	...

080089c8 <HRTIM_TimingUnitWaveform_Config>:
  * @retval None
  */
static void  HRTIM_TimingUnitWaveform_Config(HRTIM_HandleTypeDef * hhrtim,
                                             uint32_t TimerIdx,
                                             const HRTIM_TimerCfgTypeDef * pTimerCfg)
{
 80089c8:	b480      	push	{r7}
 80089ca:	b08b      	sub	sp, #44	; 0x2c
 80089cc:	af00      	add	r7, sp, #0
 80089ce:	60f8      	str	r0, [r7, #12]
 80089d0:	60b9      	str	r1, [r7, #8]
 80089d2:	607a      	str	r2, [r7, #4]
  uint32_t hrtim_timoutr;
  uint32_t hrtim_timrstr;
  uint32_t hrtim_bmcr;

  /* UPDGAT bitfield must be reset before programming a new value */
  hhrtim->Instance->sTimerxRegs[TimerIdx].TIMxCR &= ~(HRTIM_TIMCR_UPDGAT);
 80089d4:	68fb      	ldr	r3, [r7, #12]
 80089d6:	681a      	ldr	r2, [r3, #0]
 80089d8:	68bb      	ldr	r3, [r7, #8]
 80089da:	3301      	adds	r3, #1
 80089dc:	01db      	lsls	r3, r3, #7
 80089de:	4413      	add	r3, r2
 80089e0:	681b      	ldr	r3, [r3, #0]
 80089e2:	68fa      	ldr	r2, [r7, #12]
 80089e4:	6811      	ldr	r1, [r2, #0]
 80089e6:	f023 4270 	bic.w	r2, r3, #4026531840	; 0xf0000000
 80089ea:	68bb      	ldr	r3, [r7, #8]
 80089ec:	3301      	adds	r3, #1
 80089ee:	01db      	lsls	r3, r3, #7
 80089f0:	440b      	add	r3, r1
 80089f2:	601a      	str	r2, [r3, #0]

  /* Configure timing unit (Timer A to Timer E) */
  hrtim_timcr = hhrtim->Instance->sTimerxRegs[TimerIdx].TIMxCR;
 80089f4:	68fb      	ldr	r3, [r7, #12]
 80089f6:	681a      	ldr	r2, [r3, #0]
 80089f8:	68bb      	ldr	r3, [r7, #8]
 80089fa:	3301      	adds	r3, #1
 80089fc:	01db      	lsls	r3, r3, #7
 80089fe:	4413      	add	r3, r2
 8008a00:	681b      	ldr	r3, [r3, #0]
 8008a02:	627b      	str	r3, [r7, #36]	; 0x24
  hrtim_timfltr = hhrtim->Instance->sTimerxRegs[TimerIdx].FLTxR;
 8008a04:	68fb      	ldr	r3, [r7, #12]
 8008a06:	681a      	ldr	r2, [r3, #0]
 8008a08:	68bb      	ldr	r3, [r7, #8]
 8008a0a:	01db      	lsls	r3, r3, #7
 8008a0c:	4413      	add	r3, r2
 8008a0e:	33e8      	adds	r3, #232	; 0xe8
 8008a10:	681b      	ldr	r3, [r3, #0]
 8008a12:	61bb      	str	r3, [r7, #24]
  hrtim_timoutr = hhrtim->Instance->sTimerxRegs[TimerIdx].OUTxR;
 8008a14:	68fb      	ldr	r3, [r7, #12]
 8008a16:	681a      	ldr	r2, [r3, #0]
 8008a18:	68bb      	ldr	r3, [r7, #8]
 8008a1a:	01db      	lsls	r3, r3, #7
 8008a1c:	4413      	add	r3, r2
 8008a1e:	33e4      	adds	r3, #228	; 0xe4
 8008a20:	681b      	ldr	r3, [r3, #0]
 8008a22:	623b      	str	r3, [r7, #32]
  hrtim_bmcr = hhrtim->Instance->sCommonRegs.BMCR;
 8008a24:	68fb      	ldr	r3, [r7, #12]
 8008a26:	681b      	ldr	r3, [r3, #0]
 8008a28:	f8d3 33a0 	ldr.w	r3, [r3, #928]	; 0x3a0
 8008a2c:	61fb      	str	r3, [r7, #28]

  /* Enable/Disable the half mode */
  hrtim_timcr &= ~(HRTIM_TIMCR_HALF);
 8008a2e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008a30:	f023 0320 	bic.w	r3, r3, #32
 8008a34:	627b      	str	r3, [r7, #36]	; 0x24
  hrtim_timcr |= pTimerCfg->HalfModeEnable;
 8008a36:	687b      	ldr	r3, [r7, #4]
 8008a38:	695b      	ldr	r3, [r3, #20]
 8008a3a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008a3c:	4313      	orrs	r3, r2
 8008a3e:	627b      	str	r3, [r7, #36]	; 0x24

  /* Enable/Disable the timer start upon synchronization event reception */
  hrtim_timcr &= ~(HRTIM_TIMCR_SYNCSTRT);
 8008a40:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008a42:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8008a46:	627b      	str	r3, [r7, #36]	; 0x24
  hrtim_timcr |= pTimerCfg->StartOnSync;
 8008a48:	687b      	ldr	r3, [r7, #4]
 8008a4a:	699b      	ldr	r3, [r3, #24]
 8008a4c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008a4e:	4313      	orrs	r3, r2
 8008a50:	627b      	str	r3, [r7, #36]	; 0x24

  /* Enable/Disable the timer reset upon synchronization event reception */
  hrtim_timcr &= ~(HRTIM_TIMCR_SYNCRST);
 8008a52:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008a54:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8008a58:	627b      	str	r3, [r7, #36]	; 0x24
  hrtim_timcr |= pTimerCfg->ResetOnSync;
 8008a5a:	687b      	ldr	r3, [r7, #4]
 8008a5c:	69db      	ldr	r3, [r3, #28]
 8008a5e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008a60:	4313      	orrs	r3, r2
 8008a62:	627b      	str	r3, [r7, #36]	; 0x24

  /* Enable/Disable the DAC synchronization event generation */
  hrtim_timcr &= ~(HRTIM_TIMCR_DACSYNC);
 8008a64:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008a66:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 8008a6a:	627b      	str	r3, [r7, #36]	; 0x24
  hrtim_timcr |= pTimerCfg->DACSynchro;
 8008a6c:	687b      	ldr	r3, [r7, #4]
 8008a6e:	6a1b      	ldr	r3, [r3, #32]
 8008a70:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008a72:	4313      	orrs	r3, r2
 8008a74:	627b      	str	r3, [r7, #36]	; 0x24

  /* Enable/Disable preload mechanism for timer registers */
  hrtim_timcr &= ~(HRTIM_TIMCR_PREEN);
 8008a76:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008a78:	f023 6300 	bic.w	r3, r3, #134217728	; 0x8000000
 8008a7c:	627b      	str	r3, [r7, #36]	; 0x24
  hrtim_timcr |= pTimerCfg->PreloadEnable;
 8008a7e:	687b      	ldr	r3, [r7, #4]
 8008a80:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008a82:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008a84:	4313      	orrs	r3, r2
 8008a86:	627b      	str	r3, [r7, #36]	; 0x24

  /* Timing unit registers update handling */
  hrtim_timcr &= ~(HRTIM_TIMCR_UPDGAT);
 8008a88:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008a8a:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 8008a8e:	627b      	str	r3, [r7, #36]	; 0x24
  hrtim_timcr |= pTimerCfg->UpdateGating;
 8008a90:	687b      	ldr	r3, [r7, #4]
 8008a92:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008a94:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008a96:	4313      	orrs	r3, r2
 8008a98:	627b      	str	r3, [r7, #36]	; 0x24

  /* Enable/Disable registers update on repetition */
  hrtim_timcr &= ~(HRTIM_TIMCR_TREPU);
 8008a9a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008a9c:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 8008aa0:	627b      	str	r3, [r7, #36]	; 0x24
  if (pTimerCfg->RepetitionUpdate == HRTIM_UPDATEONREPETITION_ENABLED)
 8008aa2:	687b      	ldr	r3, [r7, #4]
 8008aa4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008aa6:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8008aaa:	d103      	bne.n	8008ab4 <HRTIM_TimingUnitWaveform_Config+0xec>
  {
    hrtim_timcr |= HRTIM_TIMCR_TREPU;
 8008aac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008aae:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8008ab2:	627b      	str	r3, [r7, #36]	; 0x24
  }

  /* Set the push-pull mode */
  hrtim_timcr &= ~(HRTIM_TIMCR_PSHPLL);
 8008ab4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008ab6:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8008aba:	627b      	str	r3, [r7, #36]	; 0x24
  hrtim_timcr |= pTimerCfg->PushPull;
 8008abc:	687b      	ldr	r3, [r7, #4]
 8008abe:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008ac0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008ac2:	4313      	orrs	r3, r2
 8008ac4:	627b      	str	r3, [r7, #36]	; 0x24

  /* Enable/Disable registers update on timer counter reset */
  hrtim_timcr &= ~(HRTIM_TIMCR_TRSTU);
 8008ac6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008ac8:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8008acc:	627b      	str	r3, [r7, #36]	; 0x24
  hrtim_timcr |= pTimerCfg->ResetUpdate;
 8008ace:	687b      	ldr	r3, [r7, #4]
 8008ad0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8008ad2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008ad4:	4313      	orrs	r3, r2
 8008ad6:	627b      	str	r3, [r7, #36]	; 0x24

  /* Set the timer update trigger */
  hrtim_timcr &= ~(HRTIM_TIMCR_TIMUPDATETRIGGER);
 8008ad8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008ada:	f023 73fc 	bic.w	r3, r3, #33030144	; 0x1f80000
 8008ade:	627b      	str	r3, [r7, #36]	; 0x24
  hrtim_timcr |= pTimerCfg->UpdateTrigger;
 8008ae0:	687b      	ldr	r3, [r7, #4]
 8008ae2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8008ae4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008ae6:	4313      	orrs	r3, r2
 8008ae8:	627b      	str	r3, [r7, #36]	; 0x24

  /* Enable/Disable the fault channel at timer level */
  hrtim_timfltr &= ~(HRTIM_FLTR_FLTxEN);
 8008aea:	69bb      	ldr	r3, [r7, #24]
 8008aec:	f023 031f 	bic.w	r3, r3, #31
 8008af0:	61bb      	str	r3, [r7, #24]
  hrtim_timfltr |= (pTimerCfg->FaultEnable & HRTIM_FLTR_FLTxEN);
 8008af2:	687b      	ldr	r3, [r7, #4]
 8008af4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008af6:	f003 031f 	and.w	r3, r3, #31
 8008afa:	69ba      	ldr	r2, [r7, #24]
 8008afc:	4313      	orrs	r3, r2
 8008afe:	61bb      	str	r3, [r7, #24]

  /* Lock/Unlock fault sources at timer level */
  hrtim_timfltr &= ~(HRTIM_FLTR_FLTLCK);
 8008b00:	69bb      	ldr	r3, [r7, #24]
 8008b02:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8008b06:	61bb      	str	r3, [r7, #24]
  hrtim_timfltr |= pTimerCfg->FaultLock;
 8008b08:	687b      	ldr	r3, [r7, #4]
 8008b0a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008b0c:	69ba      	ldr	r2, [r7, #24]
 8008b0e:	4313      	orrs	r3, r2
 8008b10:	61bb      	str	r3, [r7, #24]

  /* The deadtime cannot be used simultaneously with the push-pull mode */
  if (pTimerCfg->PushPull == HRTIM_TIMPUSHPULLMODE_DISABLED)
 8008b12:	687b      	ldr	r3, [r7, #4]
 8008b14:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008b16:	2b00      	cmp	r3, #0
 8008b18:	d108      	bne.n	8008b2c <HRTIM_TimingUnitWaveform_Config+0x164>
  {
    /* Enable/Disable dead time insertion at timer level */
    hrtim_timoutr &= ~(HRTIM_OUTR_DTEN);
 8008b1a:	6a3b      	ldr	r3, [r7, #32]
 8008b1c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8008b20:	623b      	str	r3, [r7, #32]
    hrtim_timoutr |= pTimerCfg->DeadTimeInsertion;
 8008b22:	687b      	ldr	r3, [r7, #4]
 8008b24:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008b26:	6a3a      	ldr	r2, [r7, #32]
 8008b28:	4313      	orrs	r3, r2
 8008b2a:	623b      	str	r3, [r7, #32]

  /* Enable/Disable delayed protection at timer level
     Delayed Idle is available whatever the timer operating mode (regular, push-pull)
     Balanced Idle is only available in push-pull mode
  */
  if ( ((pTimerCfg->DelayedProtectionMode != HRTIM_TIMER_A_B_C_DELAYEDPROTECTION_BALANCED_EEV6)
 8008b2c:	687b      	ldr	r3, [r7, #4]
 8008b2e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008b30:	f5b3 6f60 	cmp.w	r3, #3584	; 0xe00
 8008b34:	d004      	beq.n	8008b40 <HRTIM_TimingUnitWaveform_Config+0x178>
       && (pTimerCfg->DelayedProtectionMode != HRTIM_TIMER_A_B_C_DELAYEDPROTECTION_BALANCED_EEV7))
 8008b36:	687b      	ldr	r3, [r7, #4]
 8008b38:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008b3a:	f5b3 5ff0 	cmp.w	r3, #7680	; 0x1e00
 8008b3e:	d103      	bne.n	8008b48 <HRTIM_TimingUnitWaveform_Config+0x180>
       || (pTimerCfg->PushPull == HRTIM_TIMPUSHPULLMODE_ENABLED))
 8008b40:	687b      	ldr	r3, [r7, #4]
 8008b42:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008b44:	2b40      	cmp	r3, #64	; 0x40
 8008b46:	d108      	bne.n	8008b5a <HRTIM_TimingUnitWaveform_Config+0x192>
  {
    hrtim_timoutr &= ~(HRTIM_OUTR_DLYPRT| HRTIM_OUTR_DLYPRTEN);
 8008b48:	6a3b      	ldr	r3, [r7, #32]
 8008b4a:	f423 53f0 	bic.w	r3, r3, #7680	; 0x1e00
 8008b4e:	623b      	str	r3, [r7, #32]
    hrtim_timoutr |= pTimerCfg->DelayedProtectionMode;
 8008b50:	687b      	ldr	r3, [r7, #4]
 8008b52:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008b54:	6a3a      	ldr	r2, [r7, #32]
 8008b56:	4313      	orrs	r3, r2
 8008b58:	623b      	str	r3, [r7, #32]
  }

  /* Set the timer counter reset trigger */
  hrtim_timrstr = pTimerCfg->ResetTrigger;
 8008b5a:	687b      	ldr	r3, [r7, #4]
 8008b5c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8008b5e:	617b      	str	r3, [r7, #20]

  /* Set the timer burst mode */
  switch (TimerIdx)
 8008b60:	68bb      	ldr	r3, [r7, #8]
 8008b62:	2b04      	cmp	r3, #4
 8008b64:	d843      	bhi.n	8008bee <HRTIM_TimingUnitWaveform_Config+0x226>
 8008b66:	a201      	add	r2, pc, #4	; (adr r2, 8008b6c <HRTIM_TimingUnitWaveform_Config+0x1a4>)
 8008b68:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008b6c:	08008b81 	.word	0x08008b81
 8008b70:	08008b97 	.word	0x08008b97
 8008b74:	08008bad 	.word	0x08008bad
 8008b78:	08008bc3 	.word	0x08008bc3
 8008b7c:	08008bd9 	.word	0x08008bd9
  {
  case HRTIM_TIMERINDEX_TIMER_A:
    {
      hrtim_bmcr &= ~(HRTIM_BMCR_TABM);
 8008b80:	69fb      	ldr	r3, [r7, #28]
 8008b82:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 8008b86:	61fb      	str	r3, [r7, #28]
      hrtim_bmcr |= ( pTimerCfg->BurstMode << 1U);
 8008b88:	687b      	ldr	r3, [r7, #4]
 8008b8a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008b8c:	005b      	lsls	r3, r3, #1
 8008b8e:	69fa      	ldr	r2, [r7, #28]
 8008b90:	4313      	orrs	r3, r2
 8008b92:	61fb      	str	r3, [r7, #28]
      break;
 8008b94:	e02c      	b.n	8008bf0 <HRTIM_TimingUnitWaveform_Config+0x228>
    }

  case HRTIM_TIMERINDEX_TIMER_B:
    {
      hrtim_bmcr &= ~(HRTIM_BMCR_TBBM);
 8008b96:	69fb      	ldr	r3, [r7, #28]
 8008b98:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8008b9c:	61fb      	str	r3, [r7, #28]
      hrtim_bmcr |= ( pTimerCfg->BurstMode << 2U);
 8008b9e:	687b      	ldr	r3, [r7, #4]
 8008ba0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008ba2:	009b      	lsls	r3, r3, #2
 8008ba4:	69fa      	ldr	r2, [r7, #28]
 8008ba6:	4313      	orrs	r3, r2
 8008ba8:	61fb      	str	r3, [r7, #28]
      break;
 8008baa:	e021      	b.n	8008bf0 <HRTIM_TimingUnitWaveform_Config+0x228>
    }

  case HRTIM_TIMERINDEX_TIMER_C:
    {
      hrtim_bmcr &= ~(HRTIM_BMCR_TCBM);
 8008bac:	69fb      	ldr	r3, [r7, #28]
 8008bae:	f423 2300 	bic.w	r3, r3, #524288	; 0x80000
 8008bb2:	61fb      	str	r3, [r7, #28]
      hrtim_bmcr |= ( pTimerCfg->BurstMode << 3U);
 8008bb4:	687b      	ldr	r3, [r7, #4]
 8008bb6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008bb8:	00db      	lsls	r3, r3, #3
 8008bba:	69fa      	ldr	r2, [r7, #28]
 8008bbc:	4313      	orrs	r3, r2
 8008bbe:	61fb      	str	r3, [r7, #28]
      break;
 8008bc0:	e016      	b.n	8008bf0 <HRTIM_TimingUnitWaveform_Config+0x228>
    }

  case HRTIM_TIMERINDEX_TIMER_D:
    {
      hrtim_bmcr &= ~(HRTIM_BMCR_TDBM);
 8008bc2:	69fb      	ldr	r3, [r7, #28]
 8008bc4:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 8008bc8:	61fb      	str	r3, [r7, #28]
      hrtim_bmcr |= ( pTimerCfg->BurstMode << 4U);
 8008bca:	687b      	ldr	r3, [r7, #4]
 8008bcc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008bce:	011b      	lsls	r3, r3, #4
 8008bd0:	69fa      	ldr	r2, [r7, #28]
 8008bd2:	4313      	orrs	r3, r2
 8008bd4:	61fb      	str	r3, [r7, #28]
      break;
 8008bd6:	e00b      	b.n	8008bf0 <HRTIM_TimingUnitWaveform_Config+0x228>
    }

  case HRTIM_TIMERINDEX_TIMER_E:
    {
      hrtim_bmcr &= ~(HRTIM_BMCR_TEBM);
 8008bd8:	69fb      	ldr	r3, [r7, #28]
 8008bda:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8008bde:	61fb      	str	r3, [r7, #28]
      hrtim_bmcr |= ( pTimerCfg->BurstMode << 5U);
 8008be0:	687b      	ldr	r3, [r7, #4]
 8008be2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008be4:	015b      	lsls	r3, r3, #5
 8008be6:	69fa      	ldr	r2, [r7, #28]
 8008be8:	4313      	orrs	r3, r2
 8008bea:	61fb      	str	r3, [r7, #28]
      break;
 8008bec:	e000      	b.n	8008bf0 <HRTIM_TimingUnitWaveform_Config+0x228>
    }

  default:
    break;
 8008bee:	bf00      	nop
  }

  /* Update the HRTIM registers */
  hhrtim->Instance->sTimerxRegs[TimerIdx].TIMxCR = hrtim_timcr;
 8008bf0:	68fb      	ldr	r3, [r7, #12]
 8008bf2:	681a      	ldr	r2, [r3, #0]
 8008bf4:	68bb      	ldr	r3, [r7, #8]
 8008bf6:	3301      	adds	r3, #1
 8008bf8:	01db      	lsls	r3, r3, #7
 8008bfa:	4413      	add	r3, r2
 8008bfc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008bfe:	601a      	str	r2, [r3, #0]
  hhrtim->Instance->sTimerxRegs[TimerIdx].FLTxR = hrtim_timfltr;
 8008c00:	68fb      	ldr	r3, [r7, #12]
 8008c02:	681a      	ldr	r2, [r3, #0]
 8008c04:	68bb      	ldr	r3, [r7, #8]
 8008c06:	01db      	lsls	r3, r3, #7
 8008c08:	4413      	add	r3, r2
 8008c0a:	33e8      	adds	r3, #232	; 0xe8
 8008c0c:	69ba      	ldr	r2, [r7, #24]
 8008c0e:	601a      	str	r2, [r3, #0]
  hhrtim->Instance->sTimerxRegs[TimerIdx].OUTxR = hrtim_timoutr;
 8008c10:	68fb      	ldr	r3, [r7, #12]
 8008c12:	681a      	ldr	r2, [r3, #0]
 8008c14:	68bb      	ldr	r3, [r7, #8]
 8008c16:	01db      	lsls	r3, r3, #7
 8008c18:	4413      	add	r3, r2
 8008c1a:	33e4      	adds	r3, #228	; 0xe4
 8008c1c:	6a3a      	ldr	r2, [r7, #32]
 8008c1e:	601a      	str	r2, [r3, #0]
  hhrtim->Instance->sTimerxRegs[TimerIdx].RSTxR = hrtim_timrstr;
 8008c20:	68fb      	ldr	r3, [r7, #12]
 8008c22:	681a      	ldr	r2, [r3, #0]
 8008c24:	68bb      	ldr	r3, [r7, #8]
 8008c26:	01db      	lsls	r3, r3, #7
 8008c28:	4413      	add	r3, r2
 8008c2a:	33d4      	adds	r3, #212	; 0xd4
 8008c2c:	697a      	ldr	r2, [r7, #20]
 8008c2e:	601a      	str	r2, [r3, #0]
  hhrtim->Instance->sCommonRegs.BMCR = hrtim_bmcr;
 8008c30:	68fb      	ldr	r3, [r7, #12]
 8008c32:	681b      	ldr	r3, [r3, #0]
 8008c34:	69fa      	ldr	r2, [r7, #28]
 8008c36:	f8c3 23a0 	str.w	r2, [r3, #928]	; 0x3a0
}
 8008c3a:	bf00      	nop
 8008c3c:	372c      	adds	r7, #44	; 0x2c
 8008c3e:	46bd      	mov	sp, r7
 8008c40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c44:	4770      	bx	lr
 8008c46:	bf00      	nop

08008c48 <HRTIM_OutputConfig>:
  */
static void  HRTIM_OutputConfig(HRTIM_HandleTypeDef * hhrtim,
                                uint32_t TimerIdx,
                                uint32_t Output,
                                const HRTIM_OutputCfgTypeDef * pOutputCfg)
{
 8008c48:	b480      	push	{r7}
 8008c4a:	b089      	sub	sp, #36	; 0x24
 8008c4c:	af00      	add	r7, sp, #0
 8008c4e:	60f8      	str	r0, [r7, #12]
 8008c50:	60b9      	str	r1, [r7, #8]
 8008c52:	607a      	str	r2, [r7, #4]
 8008c54:	603b      	str	r3, [r7, #0]
  uint32_t hrtim_outr;
  uint32_t hrtim_dtr;

  uint32_t shift = 0U;
 8008c56:	2300      	movs	r3, #0
 8008c58:	61bb      	str	r3, [r7, #24]

  hrtim_outr = hhrtim->Instance->sTimerxRegs[TimerIdx].OUTxR;
 8008c5a:	68fb      	ldr	r3, [r7, #12]
 8008c5c:	681a      	ldr	r2, [r3, #0]
 8008c5e:	68bb      	ldr	r3, [r7, #8]
 8008c60:	01db      	lsls	r3, r3, #7
 8008c62:	4413      	add	r3, r2
 8008c64:	33e4      	adds	r3, #228	; 0xe4
 8008c66:	681b      	ldr	r3, [r3, #0]
 8008c68:	61fb      	str	r3, [r7, #28]
  hrtim_dtr = hhrtim->Instance->sTimerxRegs[TimerIdx].DTxR;
 8008c6a:	68fb      	ldr	r3, [r7, #12]
 8008c6c:	681a      	ldr	r2, [r3, #0]
 8008c6e:	68bb      	ldr	r3, [r7, #8]
 8008c70:	01db      	lsls	r3, r3, #7
 8008c72:	4413      	add	r3, r2
 8008c74:	33b8      	adds	r3, #184	; 0xb8
 8008c76:	681b      	ldr	r3, [r3, #0]
 8008c78:	617b      	str	r3, [r7, #20]

  switch (Output)
 8008c7a:	687b      	ldr	r3, [r7, #4]
 8008c7c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8008c80:	d04d      	beq.n	8008d1e <HRTIM_OutputConfig+0xd6>
 8008c82:	687b      	ldr	r3, [r7, #4]
 8008c84:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8008c88:	d85e      	bhi.n	8008d48 <HRTIM_OutputConfig+0x100>
 8008c8a:	687b      	ldr	r3, [r7, #4]
 8008c8c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8008c90:	d032      	beq.n	8008cf8 <HRTIM_OutputConfig+0xb0>
 8008c92:	687b      	ldr	r3, [r7, #4]
 8008c94:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8008c98:	d856      	bhi.n	8008d48 <HRTIM_OutputConfig+0x100>
 8008c9a:	687b      	ldr	r3, [r7, #4]
 8008c9c:	2b80      	cmp	r3, #128	; 0x80
 8008c9e:	d03e      	beq.n	8008d1e <HRTIM_OutputConfig+0xd6>
 8008ca0:	687b      	ldr	r3, [r7, #4]
 8008ca2:	2b80      	cmp	r3, #128	; 0x80
 8008ca4:	d850      	bhi.n	8008d48 <HRTIM_OutputConfig+0x100>
 8008ca6:	687b      	ldr	r3, [r7, #4]
 8008ca8:	2b40      	cmp	r3, #64	; 0x40
 8008caa:	d025      	beq.n	8008cf8 <HRTIM_OutputConfig+0xb0>
 8008cac:	687b      	ldr	r3, [r7, #4]
 8008cae:	2b40      	cmp	r3, #64	; 0x40
 8008cb0:	d84a      	bhi.n	8008d48 <HRTIM_OutputConfig+0x100>
 8008cb2:	687b      	ldr	r3, [r7, #4]
 8008cb4:	2b01      	cmp	r3, #1
 8008cb6:	d01f      	beq.n	8008cf8 <HRTIM_OutputConfig+0xb0>
 8008cb8:	687b      	ldr	r3, [r7, #4]
 8008cba:	2b00      	cmp	r3, #0
 8008cbc:	d044      	beq.n	8008d48 <HRTIM_OutputConfig+0x100>
 8008cbe:	687b      	ldr	r3, [r7, #4]
 8008cc0:	2b20      	cmp	r3, #32
 8008cc2:	d841      	bhi.n	8008d48 <HRTIM_OutputConfig+0x100>
 8008cc4:	687b      	ldr	r3, [r7, #4]
 8008cc6:	2b02      	cmp	r3, #2
 8008cc8:	d33e      	bcc.n	8008d48 <HRTIM_OutputConfig+0x100>
 8008cca:	687b      	ldr	r3, [r7, #4]
 8008ccc:	3b02      	subs	r3, #2
 8008cce:	2201      	movs	r2, #1
 8008cd0:	409a      	lsls	r2, r3
 8008cd2:	4b48      	ldr	r3, [pc, #288]	; (8008df4 <HRTIM_OutputConfig+0x1ac>)
 8008cd4:	4013      	ands	r3, r2
 8008cd6:	2b00      	cmp	r3, #0
 8008cd8:	bf14      	ite	ne
 8008cda:	2301      	movne	r3, #1
 8008cdc:	2300      	moveq	r3, #0
 8008cde:	b2db      	uxtb	r3, r3
 8008ce0:	2b00      	cmp	r3, #0
 8008ce2:	d11c      	bne.n	8008d1e <HRTIM_OutputConfig+0xd6>
 8008ce4:	f244 0304 	movw	r3, #16388	; 0x4004
 8008ce8:	4013      	ands	r3, r2
 8008cea:	2b00      	cmp	r3, #0
 8008cec:	bf14      	ite	ne
 8008cee:	2301      	movne	r3, #1
 8008cf0:	2300      	moveq	r3, #0
 8008cf2:	b2db      	uxtb	r3, r3
 8008cf4:	2b00      	cmp	r3, #0
 8008cf6:	d027      	beq.n	8008d48 <HRTIM_OutputConfig+0x100>
  case HRTIM_OUTPUT_TC1:
  case HRTIM_OUTPUT_TD1:
  case HRTIM_OUTPUT_TE1:
    {
      /* Set the output set/reset crossbar */
      hhrtim->Instance->sTimerxRegs[TimerIdx].SETx1R = pOutputCfg->SetSource;
 8008cf8:	68fb      	ldr	r3, [r7, #12]
 8008cfa:	6819      	ldr	r1, [r3, #0]
 8008cfc:	683b      	ldr	r3, [r7, #0]
 8008cfe:	685a      	ldr	r2, [r3, #4]
 8008d00:	68bb      	ldr	r3, [r7, #8]
 8008d02:	01db      	lsls	r3, r3, #7
 8008d04:	440b      	add	r3, r1
 8008d06:	33bc      	adds	r3, #188	; 0xbc
 8008d08:	601a      	str	r2, [r3, #0]
      hhrtim->Instance->sTimerxRegs[TimerIdx].RSTx1R = pOutputCfg->ResetSource;
 8008d0a:	68fb      	ldr	r3, [r7, #12]
 8008d0c:	6819      	ldr	r1, [r3, #0]
 8008d0e:	683b      	ldr	r3, [r7, #0]
 8008d10:	689a      	ldr	r2, [r3, #8]
 8008d12:	68bb      	ldr	r3, [r7, #8]
 8008d14:	01db      	lsls	r3, r3, #7
 8008d16:	440b      	add	r3, r1
 8008d18:	33c0      	adds	r3, #192	; 0xc0
 8008d1a:	601a      	str	r2, [r3, #0]
      break;
 8008d1c:	e015      	b.n	8008d4a <HRTIM_OutputConfig+0x102>
  case HRTIM_OUTPUT_TC2:
  case HRTIM_OUTPUT_TD2:
  case HRTIM_OUTPUT_TE2:
    {
      /* Set the output set/reset crossbar */
      hhrtim->Instance->sTimerxRegs[TimerIdx].SETx2R = pOutputCfg->SetSource;
 8008d1e:	68fb      	ldr	r3, [r7, #12]
 8008d20:	6819      	ldr	r1, [r3, #0]
 8008d22:	683b      	ldr	r3, [r7, #0]
 8008d24:	685a      	ldr	r2, [r3, #4]
 8008d26:	68bb      	ldr	r3, [r7, #8]
 8008d28:	01db      	lsls	r3, r3, #7
 8008d2a:	440b      	add	r3, r1
 8008d2c:	33c4      	adds	r3, #196	; 0xc4
 8008d2e:	601a      	str	r2, [r3, #0]
      hhrtim->Instance->sTimerxRegs[TimerIdx].RSTx2R = pOutputCfg->ResetSource;
 8008d30:	68fb      	ldr	r3, [r7, #12]
 8008d32:	6819      	ldr	r1, [r3, #0]
 8008d34:	683b      	ldr	r3, [r7, #0]
 8008d36:	689a      	ldr	r2, [r3, #8]
 8008d38:	68bb      	ldr	r3, [r7, #8]
 8008d3a:	01db      	lsls	r3, r3, #7
 8008d3c:	440b      	add	r3, r1
 8008d3e:	33c8      	adds	r3, #200	; 0xc8
 8008d40:	601a      	str	r2, [r3, #0]
      shift = 16U;
 8008d42:	2310      	movs	r3, #16
 8008d44:	61bb      	str	r3, [r7, #24]
      break;
 8008d46:	e000      	b.n	8008d4a <HRTIM_OutputConfig+0x102>
    }

  default:
    break;
 8008d48:	bf00      	nop
  hrtim_outr &= ~((HRTIM_OUTR_POL1 |
                   HRTIM_OUTR_IDLM1 |
                   HRTIM_OUTR_IDLES1|
                   HRTIM_OUTR_FAULT1|
                   HRTIM_OUTR_CHP1 |
                   HRTIM_OUTR_DIDL1) << shift);
 8008d4a:	22fe      	movs	r2, #254	; 0xfe
 8008d4c:	69bb      	ldr	r3, [r7, #24]
 8008d4e:	fa02 f303 	lsl.w	r3, r2, r3
  hrtim_outr &= ~((HRTIM_OUTR_POL1 |
 8008d52:	43db      	mvns	r3, r3
 8008d54:	69fa      	ldr	r2, [r7, #28]
 8008d56:	4013      	ands	r3, r2
 8008d58:	61fb      	str	r3, [r7, #28]

  /* Set the polarity */
  hrtim_outr |= (pOutputCfg->Polarity << shift);
 8008d5a:	683b      	ldr	r3, [r7, #0]
 8008d5c:	681a      	ldr	r2, [r3, #0]
 8008d5e:	69bb      	ldr	r3, [r7, #24]
 8008d60:	fa02 f303 	lsl.w	r3, r2, r3
 8008d64:	69fa      	ldr	r2, [r7, #28]
 8008d66:	4313      	orrs	r3, r2
 8008d68:	61fb      	str	r3, [r7, #28]

  /* Set the IDLE mode */
  hrtim_outr |= (pOutputCfg->IdleMode << shift);
 8008d6a:	683b      	ldr	r3, [r7, #0]
 8008d6c:	68da      	ldr	r2, [r3, #12]
 8008d6e:	69bb      	ldr	r3, [r7, #24]
 8008d70:	fa02 f303 	lsl.w	r3, r2, r3
 8008d74:	69fa      	ldr	r2, [r7, #28]
 8008d76:	4313      	orrs	r3, r2
 8008d78:	61fb      	str	r3, [r7, #28]

  /* Set the IDLE state */
  hrtim_outr |= (pOutputCfg->IdleLevel << shift);
 8008d7a:	683b      	ldr	r3, [r7, #0]
 8008d7c:	691a      	ldr	r2, [r3, #16]
 8008d7e:	69bb      	ldr	r3, [r7, #24]
 8008d80:	fa02 f303 	lsl.w	r3, r2, r3
 8008d84:	69fa      	ldr	r2, [r7, #28]
 8008d86:	4313      	orrs	r3, r2
 8008d88:	61fb      	str	r3, [r7, #28]

  /* Set the FAULT state */
  hrtim_outr |= (pOutputCfg->FaultLevel << shift);
 8008d8a:	683b      	ldr	r3, [r7, #0]
 8008d8c:	695a      	ldr	r2, [r3, #20]
 8008d8e:	69bb      	ldr	r3, [r7, #24]
 8008d90:	fa02 f303 	lsl.w	r3, r2, r3
 8008d94:	69fa      	ldr	r2, [r7, #28]
 8008d96:	4313      	orrs	r3, r2
 8008d98:	61fb      	str	r3, [r7, #28]

  /* Set the chopper mode */
  hrtim_outr |= (pOutputCfg->ChopperModeEnable << shift);
 8008d9a:	683b      	ldr	r3, [r7, #0]
 8008d9c:	699a      	ldr	r2, [r3, #24]
 8008d9e:	69bb      	ldr	r3, [r7, #24]
 8008da0:	fa02 f303 	lsl.w	r3, r2, r3
 8008da4:	69fa      	ldr	r2, [r7, #28]
 8008da6:	4313      	orrs	r3, r2
 8008da8:	61fb      	str	r3, [r7, #28]
     state during a burst mode operation is allowed only under the following
     conditions:
     - the outputs is active during the burst mode (IDLES=1U)
     - positive deadtimes (SDTR/SDTF set to 0U)
  */
  if ((pOutputCfg->IdleLevel == HRTIM_OUTPUTIDLELEVEL_ACTIVE) &&
 8008daa:	683b      	ldr	r3, [r7, #0]
 8008dac:	691b      	ldr	r3, [r3, #16]
 8008dae:	2b08      	cmp	r3, #8
 8008db0:	d111      	bne.n	8008dd6 <HRTIM_OutputConfig+0x18e>
      ((hrtim_dtr & HRTIM_DTR_SDTR) == (uint32_t)RESET) &&
 8008db2:	697b      	ldr	r3, [r7, #20]
 8008db4:	f403 7300 	and.w	r3, r3, #512	; 0x200
  if ((pOutputCfg->IdleLevel == HRTIM_OUTPUTIDLELEVEL_ACTIVE) &&
 8008db8:	2b00      	cmp	r3, #0
 8008dba:	d10c      	bne.n	8008dd6 <HRTIM_OutputConfig+0x18e>
      ((hrtim_dtr & HRTIM_DTR_SDTF) == (uint32_t)RESET))
 8008dbc:	697b      	ldr	r3, [r7, #20]
 8008dbe:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
      ((hrtim_dtr & HRTIM_DTR_SDTR) == (uint32_t)RESET) &&
 8008dc2:	2b00      	cmp	r3, #0
 8008dc4:	d107      	bne.n	8008dd6 <HRTIM_OutputConfig+0x18e>
  {
    hrtim_outr |= (pOutputCfg->BurstModeEntryDelayed << shift);
 8008dc6:	683b      	ldr	r3, [r7, #0]
 8008dc8:	69da      	ldr	r2, [r3, #28]
 8008dca:	69bb      	ldr	r3, [r7, #24]
 8008dcc:	fa02 f303 	lsl.w	r3, r2, r3
 8008dd0:	69fa      	ldr	r2, [r7, #28]
 8008dd2:	4313      	orrs	r3, r2
 8008dd4:	61fb      	str	r3, [r7, #28]
  }

  /* Update HRTIM register */
  hhrtim->Instance->sTimerxRegs[TimerIdx].OUTxR = hrtim_outr;
 8008dd6:	68fb      	ldr	r3, [r7, #12]
 8008dd8:	681a      	ldr	r2, [r3, #0]
 8008dda:	68bb      	ldr	r3, [r7, #8]
 8008ddc:	01db      	lsls	r3, r3, #7
 8008dde:	4413      	add	r3, r2
 8008de0:	33e4      	adds	r3, #228	; 0xe4
 8008de2:	69fa      	ldr	r2, [r7, #28]
 8008de4:	601a      	str	r2, [r3, #0]
}
 8008de6:	bf00      	nop
 8008de8:	3724      	adds	r7, #36	; 0x24
 8008dea:	46bd      	mov	sp, r7
 8008dec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008df0:	4770      	bx	lr
 8008df2:	bf00      	nop
 8008df4:	40000041 	.word	0x40000041

08008df8 <HRTIM_ForceRegistersUpdate>:
  * @param  TimerIdx Timer index
  * @retval None
  */
static void HRTIM_ForceRegistersUpdate(HRTIM_HandleTypeDef * hhrtim,
                                       uint32_t TimerIdx)
{
 8008df8:	b480      	push	{r7}
 8008dfa:	b083      	sub	sp, #12
 8008dfc:	af00      	add	r7, sp, #0
 8008dfe:	6078      	str	r0, [r7, #4]
 8008e00:	6039      	str	r1, [r7, #0]
  switch (TimerIdx)
 8008e02:	683b      	ldr	r3, [r7, #0]
 8008e04:	2b05      	cmp	r3, #5
 8008e06:	d851      	bhi.n	8008eac <HRTIM_ForceRegistersUpdate+0xb4>
 8008e08:	a201      	add	r2, pc, #4	; (adr r2, 8008e10 <HRTIM_ForceRegistersUpdate+0x18>)
 8008e0a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008e0e:	bf00      	nop
 8008e10:	08008e3f 	.word	0x08008e3f
 8008e14:	08008e55 	.word	0x08008e55
 8008e18:	08008e6b 	.word	0x08008e6b
 8008e1c:	08008e81 	.word	0x08008e81
 8008e20:	08008e97 	.word	0x08008e97
 8008e24:	08008e29 	.word	0x08008e29
  {
  case HRTIM_TIMERINDEX_MASTER:
    {
      hhrtim->Instance->sCommonRegs.CR2 |= HRTIM_CR2_MSWU;
 8008e28:	687b      	ldr	r3, [r7, #4]
 8008e2a:	681b      	ldr	r3, [r3, #0]
 8008e2c:	f8d3 2384 	ldr.w	r2, [r3, #900]	; 0x384
 8008e30:	687b      	ldr	r3, [r7, #4]
 8008e32:	681b      	ldr	r3, [r3, #0]
 8008e34:	f042 0201 	orr.w	r2, r2, #1
 8008e38:	f8c3 2384 	str.w	r2, [r3, #900]	; 0x384
      break;
 8008e3c:	e037      	b.n	8008eae <HRTIM_ForceRegistersUpdate+0xb6>
    }

  case HRTIM_TIMERINDEX_TIMER_A:
    {
      hhrtim->Instance->sCommonRegs.CR2 |= HRTIM_CR2_TASWU;
 8008e3e:	687b      	ldr	r3, [r7, #4]
 8008e40:	681b      	ldr	r3, [r3, #0]
 8008e42:	f8d3 2384 	ldr.w	r2, [r3, #900]	; 0x384
 8008e46:	687b      	ldr	r3, [r7, #4]
 8008e48:	681b      	ldr	r3, [r3, #0]
 8008e4a:	f042 0202 	orr.w	r2, r2, #2
 8008e4e:	f8c3 2384 	str.w	r2, [r3, #900]	; 0x384
      break;
 8008e52:	e02c      	b.n	8008eae <HRTIM_ForceRegistersUpdate+0xb6>
    }

  case HRTIM_TIMERINDEX_TIMER_B:
    {
      hhrtim->Instance->sCommonRegs.CR2 |= HRTIM_CR2_TBSWU;
 8008e54:	687b      	ldr	r3, [r7, #4]
 8008e56:	681b      	ldr	r3, [r3, #0]
 8008e58:	f8d3 2384 	ldr.w	r2, [r3, #900]	; 0x384
 8008e5c:	687b      	ldr	r3, [r7, #4]
 8008e5e:	681b      	ldr	r3, [r3, #0]
 8008e60:	f042 0204 	orr.w	r2, r2, #4
 8008e64:	f8c3 2384 	str.w	r2, [r3, #900]	; 0x384
      break;
 8008e68:	e021      	b.n	8008eae <HRTIM_ForceRegistersUpdate+0xb6>
    }

  case HRTIM_TIMERINDEX_TIMER_C:
    {
      hhrtim->Instance->sCommonRegs.CR2 |= HRTIM_CR2_TCSWU;
 8008e6a:	687b      	ldr	r3, [r7, #4]
 8008e6c:	681b      	ldr	r3, [r3, #0]
 8008e6e:	f8d3 2384 	ldr.w	r2, [r3, #900]	; 0x384
 8008e72:	687b      	ldr	r3, [r7, #4]
 8008e74:	681b      	ldr	r3, [r3, #0]
 8008e76:	f042 0208 	orr.w	r2, r2, #8
 8008e7a:	f8c3 2384 	str.w	r2, [r3, #900]	; 0x384
      break;
 8008e7e:	e016      	b.n	8008eae <HRTIM_ForceRegistersUpdate+0xb6>
    }

  case HRTIM_TIMERINDEX_TIMER_D:
    {
      hhrtim->Instance->sCommonRegs.CR2 |= HRTIM_CR2_TDSWU;
 8008e80:	687b      	ldr	r3, [r7, #4]
 8008e82:	681b      	ldr	r3, [r3, #0]
 8008e84:	f8d3 2384 	ldr.w	r2, [r3, #900]	; 0x384
 8008e88:	687b      	ldr	r3, [r7, #4]
 8008e8a:	681b      	ldr	r3, [r3, #0]
 8008e8c:	f042 0210 	orr.w	r2, r2, #16
 8008e90:	f8c3 2384 	str.w	r2, [r3, #900]	; 0x384
      break;
 8008e94:	e00b      	b.n	8008eae <HRTIM_ForceRegistersUpdate+0xb6>
    }

  case HRTIM_TIMERINDEX_TIMER_E:
    {
      hhrtim->Instance->sCommonRegs.CR2 |= HRTIM_CR2_TESWU;
 8008e96:	687b      	ldr	r3, [r7, #4]
 8008e98:	681b      	ldr	r3, [r3, #0]
 8008e9a:	f8d3 2384 	ldr.w	r2, [r3, #900]	; 0x384
 8008e9e:	687b      	ldr	r3, [r7, #4]
 8008ea0:	681b      	ldr	r3, [r3, #0]
 8008ea2:	f042 0220 	orr.w	r2, r2, #32
 8008ea6:	f8c3 2384 	str.w	r2, [r3, #900]	; 0x384
      break;
 8008eaa:	e000      	b.n	8008eae <HRTIM_ForceRegistersUpdate+0xb6>
    }

  default:
    break;
 8008eac:	bf00      	nop
  }
}
 8008eae:	bf00      	nop
 8008eb0:	370c      	adds	r7, #12
 8008eb2:	46bd      	mov	sp, r7
 8008eb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008eb8:	4770      	bx	lr
 8008eba:	bf00      	nop

08008ebc <HRTIM_HRTIM_ISR>:
  * @brief  HRTIM interrupts service routine
  * @param  hhrtim pointer to HAL HRTIM handle
  * @retval None
  */
static void HRTIM_HRTIM_ISR(HRTIM_HandleTypeDef * hhrtim)
{
 8008ebc:	b580      	push	{r7, lr}
 8008ebe:	b084      	sub	sp, #16
 8008ec0:	af00      	add	r7, sp, #0
 8008ec2:	6078      	str	r0, [r7, #4]
  uint32_t isrflags = READ_REG(hhrtim->Instance->sCommonRegs.ISR);
 8008ec4:	687b      	ldr	r3, [r7, #4]
 8008ec6:	681b      	ldr	r3, [r3, #0]
 8008ec8:	f8d3 3388 	ldr.w	r3, [r3, #904]	; 0x388
 8008ecc:	60fb      	str	r3, [r7, #12]
  uint32_t ierits   = READ_REG(hhrtim->Instance->sCommonRegs.IER);
 8008ece:	687b      	ldr	r3, [r7, #4]
 8008ed0:	681b      	ldr	r3, [r3, #0]
 8008ed2:	f8d3 3390 	ldr.w	r3, [r3, #912]	; 0x390
 8008ed6:	60bb      	str	r3, [r7, #8]

  /* Fault 1 event */
  if((uint32_t)(isrflags & HRTIM_FLAG_FLT1) != (uint32_t)RESET)
 8008ed8:	68fb      	ldr	r3, [r7, #12]
 8008eda:	f003 0301 	and.w	r3, r3, #1
 8008ede:	2b00      	cmp	r3, #0
 8008ee0:	d00c      	beq.n	8008efc <HRTIM_HRTIM_ISR+0x40>
  {
    if((uint32_t)(ierits & HRTIM_IT_FLT1) != (uint32_t)RESET)
 8008ee2:	68bb      	ldr	r3, [r7, #8]
 8008ee4:	f003 0301 	and.w	r3, r3, #1
 8008ee8:	2b00      	cmp	r3, #0
 8008eea:	d007      	beq.n	8008efc <HRTIM_HRTIM_ISR+0x40>
    {
      __HAL_HRTIM_CLEAR_IT(hhrtim, HRTIM_IT_FLT1);
 8008eec:	687b      	ldr	r3, [r7, #4]
 8008eee:	681b      	ldr	r3, [r3, #0]
 8008ef0:	2201      	movs	r2, #1
 8008ef2:	f8c3 238c 	str.w	r2, [r3, #908]	; 0x38c

      /* Invoke Fault 1 event callback */
#if (USE_HAL_HRTIM_REGISTER_CALLBACKS == 1)
      hhrtim->Fault1Callback(hhrtim);
#else
      HAL_HRTIM_Fault1Callback(hhrtim);
 8008ef6:	6878      	ldr	r0, [r7, #4]
 8008ef8:	f7ff fbc7 	bl	800868a <HAL_HRTIM_Fault1Callback>
#endif /* USE_HAL_HRTIM_REGISTER_CALLBACKS */
    }
  }

  /* Fault 2 event */
  if((uint32_t)(isrflags & HRTIM_FLAG_FLT2) != (uint32_t)RESET)
 8008efc:	68fb      	ldr	r3, [r7, #12]
 8008efe:	f003 0302 	and.w	r3, r3, #2
 8008f02:	2b00      	cmp	r3, #0
 8008f04:	d00c      	beq.n	8008f20 <HRTIM_HRTIM_ISR+0x64>
  {
    if((uint32_t)(ierits & HRTIM_IT_FLT2) != (uint32_t)RESET)
 8008f06:	68bb      	ldr	r3, [r7, #8]
 8008f08:	f003 0302 	and.w	r3, r3, #2
 8008f0c:	2b00      	cmp	r3, #0
 8008f0e:	d007      	beq.n	8008f20 <HRTIM_HRTIM_ISR+0x64>
    {
      __HAL_HRTIM_CLEAR_IT(hhrtim, HRTIM_IT_FLT2);
 8008f10:	687b      	ldr	r3, [r7, #4]
 8008f12:	681b      	ldr	r3, [r3, #0]
 8008f14:	2202      	movs	r2, #2
 8008f16:	f8c3 238c 	str.w	r2, [r3, #908]	; 0x38c

      /* Invoke Fault 2 event callback */
#if (USE_HAL_HRTIM_REGISTER_CALLBACKS == 1)
      hhrtim->Fault2Callback(hhrtim);
#else
      HAL_HRTIM_Fault2Callback(hhrtim);
 8008f1a:	6878      	ldr	r0, [r7, #4]
 8008f1c:	f7ff fbbf 	bl	800869e <HAL_HRTIM_Fault2Callback>
#endif /* USE_HAL_HRTIM_REGISTER_CALLBACKS */
    }
  }

  /* Fault 3 event */
  if((uint32_t)(isrflags & HRTIM_FLAG_FLT3) != (uint32_t)RESET)
 8008f20:	68fb      	ldr	r3, [r7, #12]
 8008f22:	f003 0304 	and.w	r3, r3, #4
 8008f26:	2b00      	cmp	r3, #0
 8008f28:	d00c      	beq.n	8008f44 <HRTIM_HRTIM_ISR+0x88>
  {
    if((uint32_t)(ierits & HRTIM_IT_FLT3) != (uint32_t)RESET)
 8008f2a:	68bb      	ldr	r3, [r7, #8]
 8008f2c:	f003 0304 	and.w	r3, r3, #4
 8008f30:	2b00      	cmp	r3, #0
 8008f32:	d007      	beq.n	8008f44 <HRTIM_HRTIM_ISR+0x88>
    {
      __HAL_HRTIM_CLEAR_IT(hhrtim, HRTIM_IT_FLT3);
 8008f34:	687b      	ldr	r3, [r7, #4]
 8008f36:	681b      	ldr	r3, [r3, #0]
 8008f38:	2204      	movs	r2, #4
 8008f3a:	f8c3 238c 	str.w	r2, [r3, #908]	; 0x38c

      /* Invoke Fault 3 event callback */
#if (USE_HAL_HRTIM_REGISTER_CALLBACKS == 1)
      hhrtim->Fault3Callback(hhrtim);
#else
      HAL_HRTIM_Fault3Callback(hhrtim);
 8008f3e:	6878      	ldr	r0, [r7, #4]
 8008f40:	f7ff fbb7 	bl	80086b2 <HAL_HRTIM_Fault3Callback>
#endif /* USE_HAL_HRTIM_REGISTER_CALLBACKS */
    }
  }

  /* Fault 4 event */
  if((uint32_t)(isrflags & HRTIM_FLAG_FLT4) != (uint32_t)RESET)
 8008f44:	68fb      	ldr	r3, [r7, #12]
 8008f46:	f003 0308 	and.w	r3, r3, #8
 8008f4a:	2b00      	cmp	r3, #0
 8008f4c:	d00c      	beq.n	8008f68 <HRTIM_HRTIM_ISR+0xac>
  {
    if((uint32_t)(ierits & HRTIM_IT_FLT4) != (uint32_t)RESET)
 8008f4e:	68bb      	ldr	r3, [r7, #8]
 8008f50:	f003 0308 	and.w	r3, r3, #8
 8008f54:	2b00      	cmp	r3, #0
 8008f56:	d007      	beq.n	8008f68 <HRTIM_HRTIM_ISR+0xac>
    {
      __HAL_HRTIM_CLEAR_IT(hhrtim, HRTIM_IT_FLT4);
 8008f58:	687b      	ldr	r3, [r7, #4]
 8008f5a:	681b      	ldr	r3, [r3, #0]
 8008f5c:	2208      	movs	r2, #8
 8008f5e:	f8c3 238c 	str.w	r2, [r3, #908]	; 0x38c

      /* Invoke Fault 4 event callback */
#if (USE_HAL_HRTIM_REGISTER_CALLBACKS == 1)
      hhrtim->Fault4Callback(hhrtim);
#else
      HAL_HRTIM_Fault4Callback(hhrtim);
 8008f62:	6878      	ldr	r0, [r7, #4]
 8008f64:	f7ff fbaf 	bl	80086c6 <HAL_HRTIM_Fault4Callback>
#endif /* USE_HAL_HRTIM_REGISTER_CALLBACKS */
    }
  }

  /* Fault 5 event */
  if((uint32_t)(isrflags & HRTIM_FLAG_FLT5) != (uint32_t)RESET)
 8008f68:	68fb      	ldr	r3, [r7, #12]
 8008f6a:	f003 0310 	and.w	r3, r3, #16
 8008f6e:	2b00      	cmp	r3, #0
 8008f70:	d00c      	beq.n	8008f8c <HRTIM_HRTIM_ISR+0xd0>
  {
    if((uint32_t)(ierits & HRTIM_IT_FLT5) != (uint32_t)RESET)
 8008f72:	68bb      	ldr	r3, [r7, #8]
 8008f74:	f003 0310 	and.w	r3, r3, #16
 8008f78:	2b00      	cmp	r3, #0
 8008f7a:	d007      	beq.n	8008f8c <HRTIM_HRTIM_ISR+0xd0>
    {
      __HAL_HRTIM_CLEAR_IT(hhrtim, HRTIM_IT_FLT5);
 8008f7c:	687b      	ldr	r3, [r7, #4]
 8008f7e:	681b      	ldr	r3, [r3, #0]
 8008f80:	2210      	movs	r2, #16
 8008f82:	f8c3 238c 	str.w	r2, [r3, #908]	; 0x38c

      /* Invoke Fault 5 event callback */
#if (USE_HAL_HRTIM_REGISTER_CALLBACKS == 1)
      hhrtim->Fault5Callback(hhrtim);
#else
      HAL_HRTIM_Fault5Callback(hhrtim);
 8008f86:	6878      	ldr	r0, [r7, #4]
 8008f88:	f7ff fba7 	bl	80086da <HAL_HRTIM_Fault5Callback>
#endif /* USE_HAL_HRTIM_REGISTER_CALLBACKS */
    }
  }

  /* System fault event */
  if((uint32_t)(isrflags & HRTIM_FLAG_SYSFLT) != (uint32_t)RESET)
 8008f8c:	68fb      	ldr	r3, [r7, #12]
 8008f8e:	f003 0320 	and.w	r3, r3, #32
 8008f92:	2b00      	cmp	r3, #0
 8008f94:	d00c      	beq.n	8008fb0 <HRTIM_HRTIM_ISR+0xf4>
  {
    if((uint32_t)(ierits & HRTIM_IT_SYSFLT) != (uint32_t)RESET)
 8008f96:	68bb      	ldr	r3, [r7, #8]
 8008f98:	f003 0320 	and.w	r3, r3, #32
 8008f9c:	2b00      	cmp	r3, #0
 8008f9e:	d007      	beq.n	8008fb0 <HRTIM_HRTIM_ISR+0xf4>
    {
      __HAL_HRTIM_CLEAR_IT(hhrtim, HRTIM_IT_SYSFLT);
 8008fa0:	687b      	ldr	r3, [r7, #4]
 8008fa2:	681b      	ldr	r3, [r3, #0]
 8008fa4:	2220      	movs	r2, #32
 8008fa6:	f8c3 238c 	str.w	r2, [r3, #908]	; 0x38c

      /* Invoke System fault event callback */
#if (USE_HAL_HRTIM_REGISTER_CALLBACKS == 1)
      hhrtim->SystemFaultCallback(hhrtim);
#else
      HAL_HRTIM_SystemFaultCallback(hhrtim);
 8008faa:	6878      	ldr	r0, [r7, #4]
 8008fac:	f7ff fb9f 	bl	80086ee <HAL_HRTIM_SystemFaultCallback>
#endif /* USE_HAL_HRTIM_REGISTER_CALLBACKS */
    }
  }
}
 8008fb0:	bf00      	nop
 8008fb2:	3710      	adds	r7, #16
 8008fb4:	46bd      	mov	sp, r7
 8008fb6:	bd80      	pop	{r7, pc}

08008fb8 <HRTIM_Master_ISR>:
* @brief  Master timer interrupts service routine
* @param  hhrtim pointer to HAL HRTIM handle
* @retval None
*/
static void HRTIM_Master_ISR(HRTIM_HandleTypeDef * hhrtim)
{
 8008fb8:	b580      	push	{r7, lr}
 8008fba:	b086      	sub	sp, #24
 8008fbc:	af00      	add	r7, sp, #0
 8008fbe:	6078      	str	r0, [r7, #4]
  uint32_t isrflags  = READ_REG(hhrtim->Instance->sCommonRegs.ISR);
 8008fc0:	687b      	ldr	r3, [r7, #4]
 8008fc2:	681b      	ldr	r3, [r3, #0]
 8008fc4:	f8d3 3388 	ldr.w	r3, [r3, #904]	; 0x388
 8008fc8:	617b      	str	r3, [r7, #20]
  uint32_t ierits    = READ_REG(hhrtim->Instance->sCommonRegs.IER);
 8008fca:	687b      	ldr	r3, [r7, #4]
 8008fcc:	681b      	ldr	r3, [r3, #0]
 8008fce:	f8d3 3390 	ldr.w	r3, [r3, #912]	; 0x390
 8008fd2:	613b      	str	r3, [r7, #16]
  uint32_t misrflags = READ_REG(hhrtim->Instance->sMasterRegs.MISR);
 8008fd4:	687b      	ldr	r3, [r7, #4]
 8008fd6:	681b      	ldr	r3, [r3, #0]
 8008fd8:	685b      	ldr	r3, [r3, #4]
 8008fda:	60fb      	str	r3, [r7, #12]
  uint32_t mdierits  = READ_REG(hhrtim->Instance->sMasterRegs.MDIER);
 8008fdc:	687b      	ldr	r3, [r7, #4]
 8008fde:	681b      	ldr	r3, [r3, #0]
 8008fe0:	68db      	ldr	r3, [r3, #12]
 8008fe2:	60bb      	str	r3, [r7, #8]

  /* Burst mode period event */
  if((uint32_t)(isrflags & HRTIM_FLAG_BMPER) != (uint32_t)RESET)
 8008fe4:	697b      	ldr	r3, [r7, #20]
 8008fe6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8008fea:	2b00      	cmp	r3, #0
 8008fec:	d00d      	beq.n	800900a <HRTIM_Master_ISR+0x52>
  {
    if((uint32_t)(ierits & HRTIM_IT_BMPER) != (uint32_t)RESET)
 8008fee:	693b      	ldr	r3, [r7, #16]
 8008ff0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8008ff4:	2b00      	cmp	r3, #0
 8008ff6:	d008      	beq.n	800900a <HRTIM_Master_ISR+0x52>
    {
      __HAL_HRTIM_CLEAR_IT(hhrtim, HRTIM_IT_BMPER);
 8008ff8:	687b      	ldr	r3, [r7, #4]
 8008ffa:	681b      	ldr	r3, [r3, #0]
 8008ffc:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8009000:	f8c3 238c 	str.w	r2, [r3, #908]	; 0x38c

      /* Invoke Burst mode period event callback */
#if (USE_HAL_HRTIM_REGISTER_CALLBACKS == 1)
      hhrtim->BurstModePeriodCallback(hhrtim);
#else
      HAL_HRTIM_BurstModePeriodCallback(hhrtim);
 8009004:	6878      	ldr	r0, [r7, #4]
 8009006:	f7ff fb7c 	bl	8008702 <HAL_HRTIM_BurstModePeriodCallback>
#endif /* USE_HAL_HRTIM_REGISTER_CALLBACKS */
    }
  }

  /* Master timer compare 1 event */
  if((uint32_t)(misrflags & HRTIM_MASTER_FLAG_MCMP1) != (uint32_t)RESET)
 800900a:	68fb      	ldr	r3, [r7, #12]
 800900c:	f003 0301 	and.w	r3, r3, #1
 8009010:	2b00      	cmp	r3, #0
 8009012:	d00c      	beq.n	800902e <HRTIM_Master_ISR+0x76>
  {
    if((uint32_t)(mdierits & HRTIM_MASTER_IT_MCMP1) != (uint32_t)RESET)
 8009014:	68bb      	ldr	r3, [r7, #8]
 8009016:	f003 0301 	and.w	r3, r3, #1
 800901a:	2b00      	cmp	r3, #0
 800901c:	d007      	beq.n	800902e <HRTIM_Master_ISR+0x76>
    {
      __HAL_HRTIM_MASTER_CLEAR_IT(hhrtim, HRTIM_MASTER_IT_MCMP1);
 800901e:	687b      	ldr	r3, [r7, #4]
 8009020:	681b      	ldr	r3, [r3, #0]
 8009022:	2201      	movs	r2, #1
 8009024:	609a      	str	r2, [r3, #8]

      /* Invoke compare 1 event callback */
#if (USE_HAL_HRTIM_REGISTER_CALLBACKS == 1)
      hhrtim->Compare1EventCallback(hhrtim, HRTIM_TIMERINDEX_MASTER);
#else
      HAL_HRTIM_Compare1EventCallback(hhrtim, HRTIM_TIMERINDEX_MASTER);
 8009026:	2105      	movs	r1, #5
 8009028:	6878      	ldr	r0, [r7, #4]
 800902a:	f7ff fb89 	bl	8008740 <HAL_HRTIM_Compare1EventCallback>
#endif /* USE_HAL_HRTIM_REGISTER_CALLBACKS */
    }
  }

  /* Master timer compare 2 event */
  if((uint32_t)(misrflags & HRTIM_MASTER_FLAG_MCMP2) != (uint32_t)RESET)
 800902e:	68fb      	ldr	r3, [r7, #12]
 8009030:	f003 0302 	and.w	r3, r3, #2
 8009034:	2b00      	cmp	r3, #0
 8009036:	d00c      	beq.n	8009052 <HRTIM_Master_ISR+0x9a>
  {
    if((uint32_t)(mdierits & HRTIM_MASTER_IT_MCMP2) != (uint32_t)RESET)
 8009038:	68bb      	ldr	r3, [r7, #8]
 800903a:	f003 0302 	and.w	r3, r3, #2
 800903e:	2b00      	cmp	r3, #0
 8009040:	d007      	beq.n	8009052 <HRTIM_Master_ISR+0x9a>
    {
      __HAL_HRTIM_MASTER_CLEAR_IT(hhrtim, HRTIM_MASTER_IT_MCMP2);
 8009042:	687b      	ldr	r3, [r7, #4]
 8009044:	681b      	ldr	r3, [r3, #0]
 8009046:	2202      	movs	r2, #2
 8009048:	609a      	str	r2, [r3, #8]

      /* Invoke compare 2 event callback */
#if (USE_HAL_HRTIM_REGISTER_CALLBACKS == 1)
      hhrtim->Compare2EventCallback(hhrtim, HRTIM_TIMERINDEX_MASTER);
#else
      HAL_HRTIM_Compare2EventCallback(hhrtim, HRTIM_TIMERINDEX_MASTER);
 800904a:	2105      	movs	r1, #5
 800904c:	6878      	ldr	r0, [r7, #4]
 800904e:	f7fa fdc3 	bl	8003bd8 <HAL_HRTIM_Compare2EventCallback>
#endif /* USE_HAL_HRTIM_REGISTER_CALLBACKS */
    }
  }

  /* Master timer compare 3 event */
  if((uint32_t)(misrflags & HRTIM_MASTER_FLAG_MCMP3) != (uint32_t)RESET)
 8009052:	68fb      	ldr	r3, [r7, #12]
 8009054:	f003 0304 	and.w	r3, r3, #4
 8009058:	2b00      	cmp	r3, #0
 800905a:	d00c      	beq.n	8009076 <HRTIM_Master_ISR+0xbe>
  {
    if((uint32_t)(mdierits & HRTIM_MASTER_IT_MCMP3) != (uint32_t)RESET)
 800905c:	68bb      	ldr	r3, [r7, #8]
 800905e:	f003 0304 	and.w	r3, r3, #4
 8009062:	2b00      	cmp	r3, #0
 8009064:	d007      	beq.n	8009076 <HRTIM_Master_ISR+0xbe>
    {
      __HAL_HRTIM_MASTER_CLEAR_IT(hhrtim, HRTIM_MASTER_IT_MCMP3);
 8009066:	687b      	ldr	r3, [r7, #4]
 8009068:	681b      	ldr	r3, [r3, #0]
 800906a:	2204      	movs	r2, #4
 800906c:	609a      	str	r2, [r3, #8]

      /* Invoke compare 3 event callback */
#if (USE_HAL_HRTIM_REGISTER_CALLBACKS == 1)
      hhrtim->Compare3EventCallback(hhrtim, HRTIM_TIMERINDEX_MASTER);
#else
      HAL_HRTIM_Compare3EventCallback(hhrtim, HRTIM_TIMERINDEX_MASTER);
 800906e:	2105      	movs	r1, #5
 8009070:	6878      	ldr	r0, [r7, #4]
 8009072:	f7fa fdbd 	bl	8003bf0 <HAL_HRTIM_Compare3EventCallback>
#endif /* USE_HAL_HRTIM_REGISTER_CALLBACKS */
    }
  }

  /* Master timer compare 4 event */
  if((uint32_t)(misrflags & HRTIM_MASTER_FLAG_MCMP4) != (uint32_t)RESET)
 8009076:	68fb      	ldr	r3, [r7, #12]
 8009078:	f003 0308 	and.w	r3, r3, #8
 800907c:	2b00      	cmp	r3, #0
 800907e:	d00c      	beq.n	800909a <HRTIM_Master_ISR+0xe2>
  {
    if((uint32_t)(mdierits & HRTIM_MASTER_IT_MCMP4) != (uint32_t)RESET)
 8009080:	68bb      	ldr	r3, [r7, #8]
 8009082:	f003 0308 	and.w	r3, r3, #8
 8009086:	2b00      	cmp	r3, #0
 8009088:	d007      	beq.n	800909a <HRTIM_Master_ISR+0xe2>
    {
      __HAL_HRTIM_MASTER_CLEAR_IT(hhrtim, HRTIM_MASTER_IT_MCMP4);
 800908a:	687b      	ldr	r3, [r7, #4]
 800908c:	681b      	ldr	r3, [r3, #0]
 800908e:	2208      	movs	r2, #8
 8009090:	609a      	str	r2, [r3, #8]

      /* Invoke compare 4 event callback */
#if (USE_HAL_HRTIM_REGISTER_CALLBACKS == 1)
      hhrtim->Compare4EventCallback(hhrtim, HRTIM_TIMERINDEX_MASTER);
#else
      HAL_HRTIM_Compare4EventCallback(hhrtim, HRTIM_TIMERINDEX_MASTER);
 8009092:	2105      	movs	r1, #5
 8009094:	6878      	ldr	r0, [r7, #4]
 8009096:	f7ff fb5e 	bl	8008756 <HAL_HRTIM_Compare4EventCallback>
#endif /* USE_HAL_HRTIM_REGISTER_CALLBACKS */
    }
  }

  /* Master timer repetition event */
  if((uint32_t)(misrflags & HRTIM_MASTER_FLAG_MREP) != (uint32_t)RESET)
 800909a:	68fb      	ldr	r3, [r7, #12]
 800909c:	f003 0310 	and.w	r3, r3, #16
 80090a0:	2b00      	cmp	r3, #0
 80090a2:	d00c      	beq.n	80090be <HRTIM_Master_ISR+0x106>
  {
    if((uint32_t)(mdierits & HRTIM_MASTER_IT_MREP) != (uint32_t)RESET)
 80090a4:	68bb      	ldr	r3, [r7, #8]
 80090a6:	f003 0310 	and.w	r3, r3, #16
 80090aa:	2b00      	cmp	r3, #0
 80090ac:	d007      	beq.n	80090be <HRTIM_Master_ISR+0x106>
    {
      __HAL_HRTIM_MASTER_CLEAR_IT(hhrtim, HRTIM_MASTER_IT_MREP);
 80090ae:	687b      	ldr	r3, [r7, #4]
 80090b0:	681b      	ldr	r3, [r3, #0]
 80090b2:	2210      	movs	r2, #16
 80090b4:	609a      	str	r2, [r3, #8]

      /* Invoke repetition event callback */
#if (USE_HAL_HRTIM_REGISTER_CALLBACKS == 1)
      hhrtim->RepetitionEventCallback(hhrtim, HRTIM_TIMERINDEX_MASTER);
#else
      HAL_HRTIM_RepetitionEventCallback(hhrtim, HRTIM_TIMERINDEX_MASTER);
 80090b6:	2105      	movs	r1, #5
 80090b8:	6878      	ldr	r0, [r7, #4]
 80090ba:	f7fa fe0d 	bl	8003cd8 <HAL_HRTIM_RepetitionEventCallback>
#endif /* USE_HAL_HRTIM_REGISTER_CALLBACKS */
    }
  }

  /* Synchronization input event */
  if((uint32_t)(misrflags & HRTIM_MASTER_FLAG_SYNC) != (uint32_t)RESET)
 80090be:	68fb      	ldr	r3, [r7, #12]
 80090c0:	f003 0320 	and.w	r3, r3, #32
 80090c4:	2b00      	cmp	r3, #0
 80090c6:	d00b      	beq.n	80090e0 <HRTIM_Master_ISR+0x128>
  {
    if((uint32_t)(mdierits & HRTIM_MASTER_IT_SYNC) != (uint32_t)RESET)
 80090c8:	68bb      	ldr	r3, [r7, #8]
 80090ca:	f003 0320 	and.w	r3, r3, #32
 80090ce:	2b00      	cmp	r3, #0
 80090d0:	d006      	beq.n	80090e0 <HRTIM_Master_ISR+0x128>
    {
      __HAL_HRTIM_MASTER_CLEAR_IT(hhrtim, HRTIM_MASTER_IT_SYNC);
 80090d2:	687b      	ldr	r3, [r7, #4]
 80090d4:	681b      	ldr	r3, [r3, #0]
 80090d6:	2220      	movs	r2, #32
 80090d8:	609a      	str	r2, [r3, #8]

      /* Invoke synchronization event callback */
#if (USE_HAL_HRTIM_REGISTER_CALLBACKS == 1)
      hhrtim->SynchronizationEventCallback(hhrtim);
#else
      HAL_HRTIM_SynchronizationEventCallback(hhrtim);
 80090da:	6878      	ldr	r0, [r7, #4]
 80090dc:	f7ff fb1b 	bl	8008716 <HAL_HRTIM_SynchronizationEventCallback>
#endif /* USE_HAL_HRTIM_REGISTER_CALLBACKS */
    }
  }

  /* Master timer registers update event */
  if((uint32_t)(misrflags & HRTIM_MASTER_FLAG_MUPD) != (uint32_t)RESET)
 80090e0:	68fb      	ldr	r3, [r7, #12]
 80090e2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80090e6:	2b00      	cmp	r3, #0
 80090e8:	d00c      	beq.n	8009104 <HRTIM_Master_ISR+0x14c>
  {
    if((uint32_t)(mdierits & HRTIM_MASTER_IT_MUPD) != (uint32_t)RESET)
 80090ea:	68bb      	ldr	r3, [r7, #8]
 80090ec:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80090f0:	2b00      	cmp	r3, #0
 80090f2:	d007      	beq.n	8009104 <HRTIM_Master_ISR+0x14c>
    {
      __HAL_HRTIM_MASTER_CLEAR_IT(hhrtim, HRTIM_MASTER_IT_MUPD);
 80090f4:	687b      	ldr	r3, [r7, #4]
 80090f6:	681b      	ldr	r3, [r3, #0]
 80090f8:	2240      	movs	r2, #64	; 0x40
 80090fa:	609a      	str	r2, [r3, #8]

      /* Invoke registers update event callback */
#if (USE_HAL_HRTIM_REGISTER_CALLBACKS == 1)
      hhrtim->RegistersUpdateCallback(hhrtim, HRTIM_TIMERINDEX_MASTER);
#else
      HAL_HRTIM_RegistersUpdateCallback(hhrtim, HRTIM_TIMERINDEX_MASTER);
 80090fc:	2105      	movs	r1, #5
 80090fe:	6878      	ldr	r0, [r7, #4]
 8009100:	f7ff fb13 	bl	800872a <HAL_HRTIM_RegistersUpdateCallback>
#endif /* USE_HAL_HRTIM_REGISTER_CALLBACKS */
    }
  }
}
 8009104:	bf00      	nop
 8009106:	3718      	adds	r7, #24
 8009108:	46bd      	mov	sp, r7
 800910a:	bd80      	pop	{r7, pc}

0800910c <HRTIM_Timer_ISR>:
  *                   @arg HRTIM_TIMERINDEX_TIMER_E for timer E
  * @retval None
*/
static void HRTIM_Timer_ISR(HRTIM_HandleTypeDef * hhrtim,
                     uint32_t TimerIdx)
{
 800910c:	b580      	push	{r7, lr}
 800910e:	b084      	sub	sp, #16
 8009110:	af00      	add	r7, sp, #0
 8009112:	6078      	str	r0, [r7, #4]
 8009114:	6039      	str	r1, [r7, #0]
  uint32_t tisrflags = READ_REG(hhrtim->Instance->sTimerxRegs[TimerIdx].TIMxISR);
 8009116:	687b      	ldr	r3, [r7, #4]
 8009118:	681a      	ldr	r2, [r3, #0]
 800911a:	683b      	ldr	r3, [r7, #0]
 800911c:	3301      	adds	r3, #1
 800911e:	01db      	lsls	r3, r3, #7
 8009120:	4413      	add	r3, r2
 8009122:	3304      	adds	r3, #4
 8009124:	681b      	ldr	r3, [r3, #0]
 8009126:	60fb      	str	r3, [r7, #12]
  uint32_t tdierits  = READ_REG(hhrtim->Instance->sTimerxRegs[TimerIdx].TIMxDIER);
 8009128:	687b      	ldr	r3, [r7, #4]
 800912a:	681a      	ldr	r2, [r3, #0]
 800912c:	683b      	ldr	r3, [r7, #0]
 800912e:	01db      	lsls	r3, r3, #7
 8009130:	4413      	add	r3, r2
 8009132:	338c      	adds	r3, #140	; 0x8c
 8009134:	681b      	ldr	r3, [r3, #0]
 8009136:	60bb      	str	r3, [r7, #8]

  /* Timer compare 1 event */
  if((uint32_t)(tisrflags & HRTIM_TIM_FLAG_CMP1) != (uint32_t)RESET)
 8009138:	68fb      	ldr	r3, [r7, #12]
 800913a:	f003 0301 	and.w	r3, r3, #1
 800913e:	2b00      	cmp	r3, #0
 8009140:	d010      	beq.n	8009164 <HRTIM_Timer_ISR+0x58>
  {
    if((uint32_t)(tdierits & HRTIM_TIM_IT_CMP1) != (uint32_t)RESET)
 8009142:	68bb      	ldr	r3, [r7, #8]
 8009144:	f003 0301 	and.w	r3, r3, #1
 8009148:	2b00      	cmp	r3, #0
 800914a:	d00b      	beq.n	8009164 <HRTIM_Timer_ISR+0x58>
    {
      __HAL_HRTIM_TIMER_CLEAR_IT(hhrtim, TimerIdx, HRTIM_TIM_IT_CMP1);
 800914c:	687b      	ldr	r3, [r7, #4]
 800914e:	681a      	ldr	r2, [r3, #0]
 8009150:	683b      	ldr	r3, [r7, #0]
 8009152:	01db      	lsls	r3, r3, #7
 8009154:	4413      	add	r3, r2
 8009156:	3388      	adds	r3, #136	; 0x88
 8009158:	2201      	movs	r2, #1
 800915a:	601a      	str	r2, [r3, #0]

      /* Invoke compare 1 event callback */
#if (USE_HAL_HRTIM_REGISTER_CALLBACKS == 1)
      hhrtim->Compare1EventCallback(hhrtim, TimerIdx);
#else
      HAL_HRTIM_Compare1EventCallback(hhrtim, TimerIdx);
 800915c:	6839      	ldr	r1, [r7, #0]
 800915e:	6878      	ldr	r0, [r7, #4]
 8009160:	f7ff faee 	bl	8008740 <HAL_HRTIM_Compare1EventCallback>
#endif /* USE_HAL_HRTIM_REGISTER_CALLBACKS */
    }
  }

  /* Timer compare 2 event */
  if((uint32_t)(tisrflags & HRTIM_TIM_FLAG_CMP2) != (uint32_t)RESET)
 8009164:	68fb      	ldr	r3, [r7, #12]
 8009166:	f003 0302 	and.w	r3, r3, #2
 800916a:	2b00      	cmp	r3, #0
 800916c:	d010      	beq.n	8009190 <HRTIM_Timer_ISR+0x84>
  {
    if((uint32_t)(tdierits & HRTIM_TIM_IT_CMP2) != (uint32_t)RESET)
 800916e:	68bb      	ldr	r3, [r7, #8]
 8009170:	f003 0302 	and.w	r3, r3, #2
 8009174:	2b00      	cmp	r3, #0
 8009176:	d00b      	beq.n	8009190 <HRTIM_Timer_ISR+0x84>
    {
      __HAL_HRTIM_TIMER_CLEAR_IT(hhrtim, TimerIdx, HRTIM_TIM_IT_CMP2);
 8009178:	687b      	ldr	r3, [r7, #4]
 800917a:	681a      	ldr	r2, [r3, #0]
 800917c:	683b      	ldr	r3, [r7, #0]
 800917e:	01db      	lsls	r3, r3, #7
 8009180:	4413      	add	r3, r2
 8009182:	3388      	adds	r3, #136	; 0x88
 8009184:	2202      	movs	r2, #2
 8009186:	601a      	str	r2, [r3, #0]

      /* Invoke compare 2 event callback */
#if (USE_HAL_HRTIM_REGISTER_CALLBACKS == 1)
      hhrtim->Compare2EventCallback(hhrtim, TimerIdx);
#else
      HAL_HRTIM_Compare2EventCallback(hhrtim, TimerIdx);
 8009188:	6839      	ldr	r1, [r7, #0]
 800918a:	6878      	ldr	r0, [r7, #4]
 800918c:	f7fa fd24 	bl	8003bd8 <HAL_HRTIM_Compare2EventCallback>
#endif /* USE_HAL_HRTIM_REGISTER_CALLBACKS */
    }
  }

  /* Timer compare 3 event */
  if((uint32_t)(tisrflags & HRTIM_TIM_FLAG_CMP3) != (uint32_t)RESET)
 8009190:	68fb      	ldr	r3, [r7, #12]
 8009192:	f003 0304 	and.w	r3, r3, #4
 8009196:	2b00      	cmp	r3, #0
 8009198:	d010      	beq.n	80091bc <HRTIM_Timer_ISR+0xb0>
  {
    if((uint32_t)(tdierits & HRTIM_TIM_IT_CMP3) != (uint32_t)RESET)
 800919a:	68bb      	ldr	r3, [r7, #8]
 800919c:	f003 0304 	and.w	r3, r3, #4
 80091a0:	2b00      	cmp	r3, #0
 80091a2:	d00b      	beq.n	80091bc <HRTIM_Timer_ISR+0xb0>
    {
      __HAL_HRTIM_TIMER_CLEAR_IT(hhrtim, TimerIdx, HRTIM_TIM_IT_CMP3);
 80091a4:	687b      	ldr	r3, [r7, #4]
 80091a6:	681a      	ldr	r2, [r3, #0]
 80091a8:	683b      	ldr	r3, [r7, #0]
 80091aa:	01db      	lsls	r3, r3, #7
 80091ac:	4413      	add	r3, r2
 80091ae:	3388      	adds	r3, #136	; 0x88
 80091b0:	2204      	movs	r2, #4
 80091b2:	601a      	str	r2, [r3, #0]

      /* Invoke compare 3 event callback */
#if (USE_HAL_HRTIM_REGISTER_CALLBACKS == 1)
      hhrtim->Compare3EventCallback(hhrtim, TimerIdx);
#else
      HAL_HRTIM_Compare3EventCallback(hhrtim, TimerIdx);
 80091b4:	6839      	ldr	r1, [r7, #0]
 80091b6:	6878      	ldr	r0, [r7, #4]
 80091b8:	f7fa fd1a 	bl	8003bf0 <HAL_HRTIM_Compare3EventCallback>
#endif /* USE_HAL_HRTIM_REGISTER_CALLBACKS */
    }
  }

  /* Timer compare 4 event */
  if((uint32_t)(tisrflags & HRTIM_TIM_FLAG_CMP4) != (uint32_t)RESET)
 80091bc:	68fb      	ldr	r3, [r7, #12]
 80091be:	f003 0308 	and.w	r3, r3, #8
 80091c2:	2b00      	cmp	r3, #0
 80091c4:	d010      	beq.n	80091e8 <HRTIM_Timer_ISR+0xdc>
  {
    if((uint32_t)(tdierits & HRTIM_TIM_IT_CMP4) != (uint32_t)RESET)
 80091c6:	68bb      	ldr	r3, [r7, #8]
 80091c8:	f003 0308 	and.w	r3, r3, #8
 80091cc:	2b00      	cmp	r3, #0
 80091ce:	d00b      	beq.n	80091e8 <HRTIM_Timer_ISR+0xdc>
    {
      __HAL_HRTIM_TIMER_CLEAR_IT(hhrtim, TimerIdx, HRTIM_TIM_IT_CMP4);
 80091d0:	687b      	ldr	r3, [r7, #4]
 80091d2:	681a      	ldr	r2, [r3, #0]
 80091d4:	683b      	ldr	r3, [r7, #0]
 80091d6:	01db      	lsls	r3, r3, #7
 80091d8:	4413      	add	r3, r2
 80091da:	3388      	adds	r3, #136	; 0x88
 80091dc:	2208      	movs	r2, #8
 80091de:	601a      	str	r2, [r3, #0]

      /* Invoke compare 4 event callback */
#if (USE_HAL_HRTIM_REGISTER_CALLBACKS == 1)
      hhrtim->Compare4EventCallback(hhrtim, TimerIdx);
#else
      HAL_HRTIM_Compare4EventCallback(hhrtim, TimerIdx);
 80091e0:	6839      	ldr	r1, [r7, #0]
 80091e2:	6878      	ldr	r0, [r7, #4]
 80091e4:	f7ff fab7 	bl	8008756 <HAL_HRTIM_Compare4EventCallback>
#endif /* USE_HAL_HRTIM_REGISTER_CALLBACKS */
    }
  }

  /* Timer repetition event */
  if((uint32_t)(tisrflags & HRTIM_TIM_FLAG_REP) != (uint32_t)RESET)
 80091e8:	68fb      	ldr	r3, [r7, #12]
 80091ea:	f003 0310 	and.w	r3, r3, #16
 80091ee:	2b00      	cmp	r3, #0
 80091f0:	d010      	beq.n	8009214 <HRTIM_Timer_ISR+0x108>
  {
    if((uint32_t)(tdierits & HRTIM_TIM_IT_REP) != (uint32_t)RESET)
 80091f2:	68bb      	ldr	r3, [r7, #8]
 80091f4:	f003 0310 	and.w	r3, r3, #16
 80091f8:	2b00      	cmp	r3, #0
 80091fa:	d00b      	beq.n	8009214 <HRTIM_Timer_ISR+0x108>
    {
      __HAL_HRTIM_TIMER_CLEAR_IT(hhrtim, TimerIdx, HRTIM_TIM_IT_REP);
 80091fc:	687b      	ldr	r3, [r7, #4]
 80091fe:	681a      	ldr	r2, [r3, #0]
 8009200:	683b      	ldr	r3, [r7, #0]
 8009202:	01db      	lsls	r3, r3, #7
 8009204:	4413      	add	r3, r2
 8009206:	3388      	adds	r3, #136	; 0x88
 8009208:	2210      	movs	r2, #16
 800920a:	601a      	str	r2, [r3, #0]

      /* Invoke repetition event callback */
#if (USE_HAL_HRTIM_REGISTER_CALLBACKS == 1)
      hhrtim->RepetitionEventCallback(hhrtim, TimerIdx);
#else
      HAL_HRTIM_RepetitionEventCallback(hhrtim, TimerIdx);
 800920c:	6839      	ldr	r1, [r7, #0]
 800920e:	6878      	ldr	r0, [r7, #4]
 8009210:	f7fa fd62 	bl	8003cd8 <HAL_HRTIM_RepetitionEventCallback>
#endif /* USE_HAL_HRTIM_REGISTER_CALLBACKS */
    }
  }

  /* Timer registers update event */
  if((uint32_t)(tisrflags & HRTIM_TIM_FLAG_UPD) != (uint32_t)RESET)
 8009214:	68fb      	ldr	r3, [r7, #12]
 8009216:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800921a:	2b00      	cmp	r3, #0
 800921c:	d010      	beq.n	8009240 <HRTIM_Timer_ISR+0x134>
  {
    if((uint32_t)(tdierits & HRTIM_TIM_IT_UPD) != (uint32_t)RESET)
 800921e:	68bb      	ldr	r3, [r7, #8]
 8009220:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009224:	2b00      	cmp	r3, #0
 8009226:	d00b      	beq.n	8009240 <HRTIM_Timer_ISR+0x134>
    {
      __HAL_HRTIM_TIMER_CLEAR_IT(hhrtim, TimerIdx, HRTIM_TIM_IT_UPD);
 8009228:	687b      	ldr	r3, [r7, #4]
 800922a:	681a      	ldr	r2, [r3, #0]
 800922c:	683b      	ldr	r3, [r7, #0]
 800922e:	01db      	lsls	r3, r3, #7
 8009230:	4413      	add	r3, r2
 8009232:	3388      	adds	r3, #136	; 0x88
 8009234:	2240      	movs	r2, #64	; 0x40
 8009236:	601a      	str	r2, [r3, #0]

      /* Invoke registers update event callback */
#if (USE_HAL_HRTIM_REGISTER_CALLBACKS == 1)
      hhrtim->RegistersUpdateCallback(hhrtim, TimerIdx);
#else
      HAL_HRTIM_RegistersUpdateCallback(hhrtim, TimerIdx);
 8009238:	6839      	ldr	r1, [r7, #0]
 800923a:	6878      	ldr	r0, [r7, #4]
 800923c:	f7ff fa75 	bl	800872a <HAL_HRTIM_RegistersUpdateCallback>
#endif /* USE_HAL_HRTIM_REGISTER_CALLBACKS */
    }
  }

  /* Timer capture 1 event */
  if((uint32_t)(tisrflags & HRTIM_TIM_FLAG_CPT1) != (uint32_t)RESET)
 8009240:	68fb      	ldr	r3, [r7, #12]
 8009242:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8009246:	2b00      	cmp	r3, #0
 8009248:	d010      	beq.n	800926c <HRTIM_Timer_ISR+0x160>
  {
    if((uint32_t)(tdierits & HRTIM_TIM_IT_CPT1) != (uint32_t)RESET)
 800924a:	68bb      	ldr	r3, [r7, #8]
 800924c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8009250:	2b00      	cmp	r3, #0
 8009252:	d00b      	beq.n	800926c <HRTIM_Timer_ISR+0x160>
    {
      __HAL_HRTIM_TIMER_CLEAR_IT(hhrtim, TimerIdx, HRTIM_TIM_IT_CPT1);
 8009254:	687b      	ldr	r3, [r7, #4]
 8009256:	681a      	ldr	r2, [r3, #0]
 8009258:	683b      	ldr	r3, [r7, #0]
 800925a:	01db      	lsls	r3, r3, #7
 800925c:	4413      	add	r3, r2
 800925e:	3388      	adds	r3, #136	; 0x88
 8009260:	2280      	movs	r2, #128	; 0x80
 8009262:	601a      	str	r2, [r3, #0]

      /* Invoke capture 1 event callback */
#if (USE_HAL_HRTIM_REGISTER_CALLBACKS == 1)
      hhrtim->Capture1EventCallback(hhrtim, TimerIdx);
#else
      HAL_HRTIM_Capture1EventCallback(hhrtim, TimerIdx);
 8009264:	6839      	ldr	r1, [r7, #0]
 8009266:	6878      	ldr	r0, [r7, #4]
 8009268:	f7ff fa80 	bl	800876c <HAL_HRTIM_Capture1EventCallback>
#endif /* USE_HAL_HRTIM_REGISTER_CALLBACKS */
    }
  }

  /* Timer capture 2 event */
  if((uint32_t)(tisrflags & HRTIM_TIM_FLAG_CPT2) != (uint32_t)RESET)
 800926c:	68fb      	ldr	r3, [r7, #12]
 800926e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8009272:	2b00      	cmp	r3, #0
 8009274:	d011      	beq.n	800929a <HRTIM_Timer_ISR+0x18e>
  {
    if((uint32_t)(tdierits & HRTIM_TIM_IT_CPT2) != (uint32_t)RESET)
 8009276:	68bb      	ldr	r3, [r7, #8]
 8009278:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800927c:	2b00      	cmp	r3, #0
 800927e:	d00c      	beq.n	800929a <HRTIM_Timer_ISR+0x18e>
    {
      __HAL_HRTIM_TIMER_CLEAR_IT(hhrtim, TimerIdx, HRTIM_TIM_IT_CPT2);
 8009280:	687b      	ldr	r3, [r7, #4]
 8009282:	681a      	ldr	r2, [r3, #0]
 8009284:	683b      	ldr	r3, [r7, #0]
 8009286:	01db      	lsls	r3, r3, #7
 8009288:	4413      	add	r3, r2
 800928a:	3388      	adds	r3, #136	; 0x88
 800928c:	f44f 7280 	mov.w	r2, #256	; 0x100
 8009290:	601a      	str	r2, [r3, #0]

      /* Invoke capture 2 event callback */
#if (USE_HAL_HRTIM_REGISTER_CALLBACKS == 1)
      hhrtim->Capture2EventCallback(hhrtim, TimerIdx);
#else
      HAL_HRTIM_Capture2EventCallback(hhrtim, TimerIdx);
 8009292:	6839      	ldr	r1, [r7, #0]
 8009294:	6878      	ldr	r0, [r7, #4]
 8009296:	f7ff fa74 	bl	8008782 <HAL_HRTIM_Capture2EventCallback>
#endif /* USE_HAL_HRTIM_REGISTER_CALLBACKS */
    }
  }

  /* Timer output 1 set event */
  if((uint32_t)(tisrflags & HRTIM_TIM_FLAG_SET1) != (uint32_t)RESET)
 800929a:	68fb      	ldr	r3, [r7, #12]
 800929c:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80092a0:	2b00      	cmp	r3, #0
 80092a2:	d011      	beq.n	80092c8 <HRTIM_Timer_ISR+0x1bc>
  {
    if((uint32_t)(tdierits & HRTIM_TIM_IT_SET1) != (uint32_t)RESET)
 80092a4:	68bb      	ldr	r3, [r7, #8]
 80092a6:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80092aa:	2b00      	cmp	r3, #0
 80092ac:	d00c      	beq.n	80092c8 <HRTIM_Timer_ISR+0x1bc>
    {
      __HAL_HRTIM_TIMER_CLEAR_IT(hhrtim, TimerIdx, HRTIM_TIM_IT_SET1);
 80092ae:	687b      	ldr	r3, [r7, #4]
 80092b0:	681a      	ldr	r2, [r3, #0]
 80092b2:	683b      	ldr	r3, [r7, #0]
 80092b4:	01db      	lsls	r3, r3, #7
 80092b6:	4413      	add	r3, r2
 80092b8:	3388      	adds	r3, #136	; 0x88
 80092ba:	f44f 7200 	mov.w	r2, #512	; 0x200
 80092be:	601a      	str	r2, [r3, #0]

      /* Invoke output 1 set event callback */
#if (USE_HAL_HRTIM_REGISTER_CALLBACKS == 1)
      hhrtim->Output1SetCallback(hhrtim, TimerIdx);
#else
      HAL_HRTIM_Output1SetCallback(hhrtim, TimerIdx);
 80092c0:	6839      	ldr	r1, [r7, #0]
 80092c2:	6878      	ldr	r0, [r7, #4]
 80092c4:	f7ff fa7e 	bl	80087c4 <HAL_HRTIM_Output1SetCallback>
#endif /* USE_HAL_HRTIM_REGISTER_CALLBACKS */
    }
  }

  /* Timer output 1 reset event */
  if((uint32_t)(tisrflags & HRTIM_TIM_FLAG_RST1) != (uint32_t)RESET)
 80092c8:	68fb      	ldr	r3, [r7, #12]
 80092ca:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80092ce:	2b00      	cmp	r3, #0
 80092d0:	d011      	beq.n	80092f6 <HRTIM_Timer_ISR+0x1ea>
  {
    if((uint32_t)(tdierits & HRTIM_TIM_IT_RST1) != (uint32_t)RESET)
 80092d2:	68bb      	ldr	r3, [r7, #8]
 80092d4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80092d8:	2b00      	cmp	r3, #0
 80092da:	d00c      	beq.n	80092f6 <HRTIM_Timer_ISR+0x1ea>
    {
      __HAL_HRTIM_TIMER_CLEAR_IT(hhrtim, TimerIdx, HRTIM_TIM_IT_RST1);
 80092dc:	687b      	ldr	r3, [r7, #4]
 80092de:	681a      	ldr	r2, [r3, #0]
 80092e0:	683b      	ldr	r3, [r7, #0]
 80092e2:	01db      	lsls	r3, r3, #7
 80092e4:	4413      	add	r3, r2
 80092e6:	3388      	adds	r3, #136	; 0x88
 80092e8:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80092ec:	601a      	str	r2, [r3, #0]

      /* Invoke output 1 reset event callback */
#if (USE_HAL_HRTIM_REGISTER_CALLBACKS == 1)
      hhrtim->Output1ResetCallback(hhrtim, TimerIdx);
#else
      HAL_HRTIM_Output1ResetCallback(hhrtim, TimerIdx);
 80092ee:	6839      	ldr	r1, [r7, #0]
 80092f0:	6878      	ldr	r0, [r7, #4]
 80092f2:	f7ff fa72 	bl	80087da <HAL_HRTIM_Output1ResetCallback>
#endif /* USE_HAL_HRTIM_REGISTER_CALLBACKS */
    }
  }

  /* Timer output 2 set event */
  if((uint32_t)(tisrflags & HRTIM_TIM_FLAG_SET2) != (uint32_t)RESET)
 80092f6:	68fb      	ldr	r3, [r7, #12]
 80092f8:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80092fc:	2b00      	cmp	r3, #0
 80092fe:	d011      	beq.n	8009324 <HRTIM_Timer_ISR+0x218>
  {
    if((uint32_t)(tdierits & HRTIM_TIM_IT_SET2) != (uint32_t)RESET)
 8009300:	68bb      	ldr	r3, [r7, #8]
 8009302:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8009306:	2b00      	cmp	r3, #0
 8009308:	d00c      	beq.n	8009324 <HRTIM_Timer_ISR+0x218>
    {
      __HAL_HRTIM_TIMER_CLEAR_IT(hhrtim, TimerIdx, HRTIM_TIM_IT_SET2);
 800930a:	687b      	ldr	r3, [r7, #4]
 800930c:	681a      	ldr	r2, [r3, #0]
 800930e:	683b      	ldr	r3, [r7, #0]
 8009310:	01db      	lsls	r3, r3, #7
 8009312:	4413      	add	r3, r2
 8009314:	3388      	adds	r3, #136	; 0x88
 8009316:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800931a:	601a      	str	r2, [r3, #0]

      /* Invoke output 2 set event callback */
#if (USE_HAL_HRTIM_REGISTER_CALLBACKS == 1)
      hhrtim->Output2SetCallback(hhrtim, TimerIdx);
#else
      HAL_HRTIM_Output2SetCallback(hhrtim, TimerIdx);
 800931c:	6839      	ldr	r1, [r7, #0]
 800931e:	6878      	ldr	r0, [r7, #4]
 8009320:	f7ff fa66 	bl	80087f0 <HAL_HRTIM_Output2SetCallback>
#endif /* USE_HAL_HRTIM_REGISTER_CALLBACKS */
    }
  }

  /* Timer output 2 reset event */
  if((uint32_t)(tisrflags & HRTIM_TIM_FLAG_RST2) != (uint32_t)RESET)
 8009324:	68fb      	ldr	r3, [r7, #12]
 8009326:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800932a:	2b00      	cmp	r3, #0
 800932c:	d011      	beq.n	8009352 <HRTIM_Timer_ISR+0x246>
  {
    if((uint32_t)(tdierits & HRTIM_TIM_IT_RST2) != (uint32_t)RESET)
 800932e:	68bb      	ldr	r3, [r7, #8]
 8009330:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8009334:	2b00      	cmp	r3, #0
 8009336:	d00c      	beq.n	8009352 <HRTIM_Timer_ISR+0x246>
    {
      __HAL_HRTIM_TIMER_CLEAR_IT(hhrtim, TimerIdx, HRTIM_TIM_IT_RST2);
 8009338:	687b      	ldr	r3, [r7, #4]
 800933a:	681a      	ldr	r2, [r3, #0]
 800933c:	683b      	ldr	r3, [r7, #0]
 800933e:	01db      	lsls	r3, r3, #7
 8009340:	4413      	add	r3, r2
 8009342:	3388      	adds	r3, #136	; 0x88
 8009344:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8009348:	601a      	str	r2, [r3, #0]

      /* Invoke output 2 reset event callback */
#if (USE_HAL_HRTIM_REGISTER_CALLBACKS == 1)
      hhrtim->Output2ResetCallback(hhrtim, TimerIdx);
#else
      HAL_HRTIM_Output2ResetCallback(hhrtim, TimerIdx);
 800934a:	6839      	ldr	r1, [r7, #0]
 800934c:	6878      	ldr	r0, [r7, #4]
 800934e:	f7ff fa5a 	bl	8008806 <HAL_HRTIM_Output2ResetCallback>
#endif /* USE_HAL_HRTIM_REGISTER_CALLBACKS */
    }
  }

  /* Timer reset event */
  if((uint32_t)(tisrflags & HRTIM_TIM_FLAG_RST) != (uint32_t)RESET)
 8009352:	68fb      	ldr	r3, [r7, #12]
 8009354:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8009358:	2b00      	cmp	r3, #0
 800935a:	d011      	beq.n	8009380 <HRTIM_Timer_ISR+0x274>
  {
    if((uint32_t)(tdierits & HRTIM_TIM_IT_RST) != (uint32_t)RESET)
 800935c:	68bb      	ldr	r3, [r7, #8]
 800935e:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8009362:	2b00      	cmp	r3, #0
 8009364:	d00c      	beq.n	8009380 <HRTIM_Timer_ISR+0x274>
    {
      __HAL_HRTIM_TIMER_CLEAR_IT(hhrtim, TimerIdx, HRTIM_TIM_IT_RST);
 8009366:	687b      	ldr	r3, [r7, #4]
 8009368:	681a      	ldr	r2, [r3, #0]
 800936a:	683b      	ldr	r3, [r7, #0]
 800936c:	01db      	lsls	r3, r3, #7
 800936e:	4413      	add	r3, r2
 8009370:	3388      	adds	r3, #136	; 0x88
 8009372:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8009376:	601a      	str	r2, [r3, #0]

      /* Invoke timer reset callback */
#if (USE_HAL_HRTIM_REGISTER_CALLBACKS == 1)
      hhrtim->CounterResetCallback(hhrtim, TimerIdx);
#else
      HAL_HRTIM_CounterResetCallback(hhrtim, TimerIdx);
 8009378:	6839      	ldr	r1, [r7, #0]
 800937a:	6878      	ldr	r0, [r7, #4]
 800937c:	f7ff fa17 	bl	80087ae <HAL_HRTIM_CounterResetCallback>
#endif /* USE_HAL_HRTIM_REGISTER_CALLBACKS */
    }
  }

  /* Delayed protection event */
  if((uint32_t)(tisrflags & HRTIM_TIM_FLAG_DLYPRT) != (uint32_t)RESET)
 8009380:	68fb      	ldr	r3, [r7, #12]
 8009382:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8009386:	2b00      	cmp	r3, #0
 8009388:	d011      	beq.n	80093ae <HRTIM_Timer_ISR+0x2a2>
  {
    if((uint32_t)(tdierits & HRTIM_TIM_IT_DLYPRT) != (uint32_t)RESET)
 800938a:	68bb      	ldr	r3, [r7, #8]
 800938c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8009390:	2b00      	cmp	r3, #0
 8009392:	d00c      	beq.n	80093ae <HRTIM_Timer_ISR+0x2a2>
    {
      __HAL_HRTIM_TIMER_CLEAR_IT(hhrtim, TimerIdx, HRTIM_TIM_IT_DLYPRT);
 8009394:	687b      	ldr	r3, [r7, #4]
 8009396:	681a      	ldr	r2, [r3, #0]
 8009398:	683b      	ldr	r3, [r7, #0]
 800939a:	01db      	lsls	r3, r3, #7
 800939c:	4413      	add	r3, r2
 800939e:	3388      	adds	r3, #136	; 0x88
 80093a0:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 80093a4:	601a      	str	r2, [r3, #0]

      /* Invoke delayed protection callback */
#if (USE_HAL_HRTIM_REGISTER_CALLBACKS == 1)
      hhrtim->DelayedProtectionCallback(hhrtim, TimerIdx);
#else
      HAL_HRTIM_DelayedProtectionCallback(hhrtim, TimerIdx);
 80093a6:	6839      	ldr	r1, [r7, #0]
 80093a8:	6878      	ldr	r0, [r7, #4]
 80093aa:	f7ff f9f5 	bl	8008798 <HAL_HRTIM_DelayedProtectionCallback>
#endif /* USE_HAL_HRTIM_REGISTER_CALLBACKS */
    }
  }
}
 80093ae:	bf00      	nop
 80093b0:	3710      	adds	r7, #16
 80093b2:	46bd      	mov	sp, r7
 80093b4:	bd80      	pop	{r7, pc}
	...

080093b8 <HAL_LPTIM_Init>:
  *         LPTIM_InitTypeDef and initialize the associated handle.
  * @param  hlptim LPTIM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_LPTIM_Init(LPTIM_HandleTypeDef *hlptim)
{
 80093b8:	b580      	push	{r7, lr}
 80093ba:	b084      	sub	sp, #16
 80093bc:	af00      	add	r7, sp, #0
 80093be:	6078      	str	r0, [r7, #4]
  uint32_t tmpcfgr;

  /* Check the LPTIM handle allocation */
  if (hlptim == NULL)
 80093c0:	687b      	ldr	r3, [r7, #4]
 80093c2:	2b00      	cmp	r3, #0
 80093c4:	d101      	bne.n	80093ca <HAL_LPTIM_Init+0x12>
  {
    return HAL_ERROR;
 80093c6:	2301      	movs	r3, #1
 80093c8:	e097      	b.n	80094fa <HAL_LPTIM_Init+0x142>
  /* Check the parameters */
  assert_param(IS_LPTIM_INSTANCE(hlptim->Instance));

  assert_param(IS_LPTIM_CLOCK_SOURCE(hlptim->Init.Clock.Source));
  assert_param(IS_LPTIM_CLOCK_PRESCALER(hlptim->Init.Clock.Prescaler));
  if ((hlptim->Init.Clock.Source == LPTIM_CLOCKSOURCE_ULPTIM)
 80093ca:	687b      	ldr	r3, [r7, #4]
 80093cc:	685b      	ldr	r3, [r3, #4]
 80093ce:	2b01      	cmp	r3, #1
  }
  assert_param(IS_LPTIM_OUTPUT_POLARITY(hlptim->Init.OutputPolarity));
  assert_param(IS_LPTIM_UPDATE_MODE(hlptim->Init.UpdateMode));
  assert_param(IS_LPTIM_COUNTER_SOURCE(hlptim->Init.CounterSource));

  if (hlptim->State == HAL_LPTIM_STATE_RESET)
 80093d0:	687b      	ldr	r3, [r7, #4]
 80093d2:	f893 3036 	ldrb.w	r3, [r3, #54]	; 0x36
 80093d6:	b2db      	uxtb	r3, r3
 80093d8:	2b00      	cmp	r3, #0
 80093da:	d106      	bne.n	80093ea <HAL_LPTIM_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hlptim->Lock = HAL_UNLOCKED;
 80093dc:	687b      	ldr	r3, [r7, #4]
 80093de:	2200      	movs	r2, #0
 80093e0:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hlptim->MspInitCallback(hlptim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_LPTIM_MspInit(hlptim);
 80093e4:	6878      	ldr	r0, [r7, #4]
 80093e6:	f7fa f8f3 	bl	80035d0 <HAL_LPTIM_MspInit>
#endif /* USE_HAL_LPTIM_REGISTER_CALLBACKS */
  }

  /* Change the LPTIM state */
  hlptim->State = HAL_LPTIM_STATE_BUSY;
 80093ea:	687b      	ldr	r3, [r7, #4]
 80093ec:	2202      	movs	r2, #2
 80093ee:	f883 2036 	strb.w	r2, [r3, #54]	; 0x36

  /* Get the LPTIMx CFGR value */
  tmpcfgr = hlptim->Instance->CFGR;
 80093f2:	687b      	ldr	r3, [r7, #4]
 80093f4:	681b      	ldr	r3, [r3, #0]
 80093f6:	68db      	ldr	r3, [r3, #12]
 80093f8:	60fb      	str	r3, [r7, #12]

  if ((hlptim->Init.Clock.Source == LPTIM_CLOCKSOURCE_ULPTIM)
 80093fa:	687b      	ldr	r3, [r7, #4]
 80093fc:	685b      	ldr	r3, [r3, #4]
 80093fe:	2b01      	cmp	r3, #1
 8009400:	d004      	beq.n	800940c <HAL_LPTIM_Init+0x54>
      || (hlptim->Init.CounterSource == LPTIM_COUNTERSOURCE_EXTERNAL))
 8009402:	687b      	ldr	r3, [r7, #4]
 8009404:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009406:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 800940a:	d103      	bne.n	8009414 <HAL_LPTIM_Init+0x5c>
  {
    tmpcfgr &= (uint32_t)(~(LPTIM_CFGR_CKPOL | LPTIM_CFGR_CKFLT));
 800940c:	68fb      	ldr	r3, [r7, #12]
 800940e:	f023 031e 	bic.w	r3, r3, #30
 8009412:	60fb      	str	r3, [r7, #12]
  }
  if (hlptim->Init.Trigger.Source != LPTIM_TRIGSOURCE_SOFTWARE)
 8009414:	687b      	ldr	r3, [r7, #4]
 8009416:	695b      	ldr	r3, [r3, #20]
 8009418:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800941c:	4293      	cmp	r3, r2
 800941e:	d003      	beq.n	8009428 <HAL_LPTIM_Init+0x70>
  {
    tmpcfgr &= (uint32_t)(~(LPTIM_CFGR_TRGFLT | LPTIM_CFGR_TRIGSEL));
 8009420:	68fa      	ldr	r2, [r7, #12]
 8009422:	4b38      	ldr	r3, [pc, #224]	; (8009504 <HAL_LPTIM_Init+0x14c>)
 8009424:	4013      	ands	r3, r2
 8009426:	60fb      	str	r3, [r7, #12]
  }

  /* Clear CKSEL, PRESC, TRIGEN, TRGFLT, WAVPOL, PRELOAD & COUNTMODE bits */
  tmpcfgr &= (uint32_t)(~(LPTIM_CFGR_CKSEL | LPTIM_CFGR_TRIGEN | LPTIM_CFGR_PRELOAD |
 8009428:	68fa      	ldr	r2, [r7, #12]
 800942a:	4b37      	ldr	r3, [pc, #220]	; (8009508 <HAL_LPTIM_Init+0x150>)
 800942c:	4013      	ands	r3, r2
 800942e:	60fb      	str	r3, [r7, #12]
                          LPTIM_CFGR_WAVPOL | LPTIM_CFGR_PRESC | LPTIM_CFGR_COUNTMODE));

  /* Set initialization parameters */
  tmpcfgr |= (hlptim->Init.Clock.Source    |
 8009430:	687b      	ldr	r3, [r7, #4]
 8009432:	685a      	ldr	r2, [r3, #4]
              hlptim->Init.Clock.Prescaler |
 8009434:	687b      	ldr	r3, [r7, #4]
 8009436:	689b      	ldr	r3, [r3, #8]
  tmpcfgr |= (hlptim->Init.Clock.Source    |
 8009438:	431a      	orrs	r2, r3
              hlptim->Init.OutputPolarity  |
 800943a:	687b      	ldr	r3, [r7, #4]
 800943c:	6a1b      	ldr	r3, [r3, #32]
              hlptim->Init.Clock.Prescaler |
 800943e:	431a      	orrs	r2, r3
              hlptim->Init.UpdateMode      |
 8009440:	687b      	ldr	r3, [r7, #4]
 8009442:	6a5b      	ldr	r3, [r3, #36]	; 0x24
              hlptim->Init.OutputPolarity  |
 8009444:	431a      	orrs	r2, r3
              hlptim->Init.CounterSource);
 8009446:	687b      	ldr	r3, [r7, #4]
 8009448:	6a9b      	ldr	r3, [r3, #40]	; 0x28
              hlptim->Init.UpdateMode      |
 800944a:	4313      	orrs	r3, r2
  tmpcfgr |= (hlptim->Init.Clock.Source    |
 800944c:	68fa      	ldr	r2, [r7, #12]
 800944e:	4313      	orrs	r3, r2
 8009450:	60fb      	str	r3, [r7, #12]

  /* Glitch filters for internal triggers and  external inputs are configured
   * only if an internal clock source is provided to the LPTIM
   */
  if (hlptim->Init.Clock.Source == LPTIM_CLOCKSOURCE_APBCLOCK_LPOSC)
 8009452:	687b      	ldr	r3, [r7, #4]
 8009454:	685b      	ldr	r3, [r3, #4]
 8009456:	2b00      	cmp	r3, #0
 8009458:	d107      	bne.n	800946a <HAL_LPTIM_Init+0xb2>
  {
    tmpcfgr |= (hlptim->Init.Trigger.SampleTime |
 800945a:	687b      	ldr	r3, [r7, #4]
 800945c:	69da      	ldr	r2, [r3, #28]
                hlptim->Init.UltraLowPowerClock.SampleTime);
 800945e:	687b      	ldr	r3, [r7, #4]
 8009460:	691b      	ldr	r3, [r3, #16]
    tmpcfgr |= (hlptim->Init.Trigger.SampleTime |
 8009462:	4313      	orrs	r3, r2
 8009464:	68fa      	ldr	r2, [r7, #12]
 8009466:	4313      	orrs	r3, r2
 8009468:	60fb      	str	r3, [r7, #12]
  }

  /* Configure LPTIM external clock polarity and digital filter */
  if ((hlptim->Init.Clock.Source == LPTIM_CLOCKSOURCE_ULPTIM)
 800946a:	687b      	ldr	r3, [r7, #4]
 800946c:	685b      	ldr	r3, [r3, #4]
 800946e:	2b01      	cmp	r3, #1
 8009470:	d004      	beq.n	800947c <HAL_LPTIM_Init+0xc4>
      || (hlptim->Init.CounterSource == LPTIM_COUNTERSOURCE_EXTERNAL))
 8009472:	687b      	ldr	r3, [r7, #4]
 8009474:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009476:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 800947a:	d107      	bne.n	800948c <HAL_LPTIM_Init+0xd4>
  {
    tmpcfgr |= (hlptim->Init.UltraLowPowerClock.Polarity |
 800947c:	687b      	ldr	r3, [r7, #4]
 800947e:	68da      	ldr	r2, [r3, #12]
                hlptim->Init.UltraLowPowerClock.SampleTime);
 8009480:	687b      	ldr	r3, [r7, #4]
 8009482:	691b      	ldr	r3, [r3, #16]
    tmpcfgr |= (hlptim->Init.UltraLowPowerClock.Polarity |
 8009484:	4313      	orrs	r3, r2
 8009486:	68fa      	ldr	r2, [r7, #12]
 8009488:	4313      	orrs	r3, r2
 800948a:	60fb      	str	r3, [r7, #12]
  }

  /* Configure LPTIM external trigger */
  if (hlptim->Init.Trigger.Source != LPTIM_TRIGSOURCE_SOFTWARE)
 800948c:	687b      	ldr	r3, [r7, #4]
 800948e:	695b      	ldr	r3, [r3, #20]
 8009490:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8009494:	4293      	cmp	r3, r2
 8009496:	d00a      	beq.n	80094ae <HAL_LPTIM_Init+0xf6>
  {
    /* Enable External trigger and set the trigger source */
    tmpcfgr |= (hlptim->Init.Trigger.Source     |
 8009498:	687b      	ldr	r3, [r7, #4]
 800949a:	695a      	ldr	r2, [r3, #20]
                hlptim->Init.Trigger.ActiveEdge |
 800949c:	687b      	ldr	r3, [r7, #4]
 800949e:	699b      	ldr	r3, [r3, #24]
    tmpcfgr |= (hlptim->Init.Trigger.Source     |
 80094a0:	431a      	orrs	r2, r3
                hlptim->Init.Trigger.SampleTime);
 80094a2:	687b      	ldr	r3, [r7, #4]
 80094a4:	69db      	ldr	r3, [r3, #28]
                hlptim->Init.Trigger.ActiveEdge |
 80094a6:	4313      	orrs	r3, r2
    tmpcfgr |= (hlptim->Init.Trigger.Source     |
 80094a8:	68fa      	ldr	r2, [r7, #12]
 80094aa:	4313      	orrs	r3, r2
 80094ac:	60fb      	str	r3, [r7, #12]
  }

  /* Write to LPTIMx CFGR */
  hlptim->Instance->CFGR = tmpcfgr;
 80094ae:	687b      	ldr	r3, [r7, #4]
 80094b0:	681b      	ldr	r3, [r3, #0]
 80094b2:	68fa      	ldr	r2, [r7, #12]
 80094b4:	60da      	str	r2, [r3, #12]

  /* Configure LPTIM input sources */
  if ((hlptim->Instance == LPTIM1) || (hlptim->Instance == LPTIM2))
 80094b6:	687b      	ldr	r3, [r7, #4]
 80094b8:	681b      	ldr	r3, [r3, #0]
 80094ba:	4a14      	ldr	r2, [pc, #80]	; (800950c <HAL_LPTIM_Init+0x154>)
 80094bc:	4293      	cmp	r3, r2
 80094be:	d004      	beq.n	80094ca <HAL_LPTIM_Init+0x112>
 80094c0:	687b      	ldr	r3, [r7, #4]
 80094c2:	681b      	ldr	r3, [r3, #0]
 80094c4:	4a12      	ldr	r2, [pc, #72]	; (8009510 <HAL_LPTIM_Init+0x158>)
 80094c6:	4293      	cmp	r3, r2
 80094c8:	d108      	bne.n	80094dc <HAL_LPTIM_Init+0x124>
    /* Check LPTIM Input1 and Input2 sources */
    assert_param(IS_LPTIM_INPUT1_SOURCE(hlptim->Instance, hlptim->Init.Input1Source));
    assert_param(IS_LPTIM_INPUT2_SOURCE(hlptim->Instance, hlptim->Init.Input2Source));

    /* Configure LPTIM Input1 and Input2 sources */
    hlptim->Instance->CFGR2 = (hlptim->Init.Input1Source | hlptim->Init.Input2Source);
 80094ca:	687b      	ldr	r3, [r7, #4]
 80094cc:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 80094ce:	687b      	ldr	r3, [r7, #4]
 80094d0:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80094d2:	687b      	ldr	r3, [r7, #4]
 80094d4:	681b      	ldr	r3, [r3, #0]
 80094d6:	430a      	orrs	r2, r1
 80094d8:	625a      	str	r2, [r3, #36]	; 0x24
 80094da:	e009      	b.n	80094f0 <HAL_LPTIM_Init+0x138>
  }
  else
  {
    if (hlptim->Instance == LPTIM3)
 80094dc:	687b      	ldr	r3, [r7, #4]
 80094de:	681b      	ldr	r3, [r3, #0]
 80094e0:	4a0c      	ldr	r2, [pc, #48]	; (8009514 <HAL_LPTIM_Init+0x15c>)
 80094e2:	4293      	cmp	r3, r2
 80094e4:	d104      	bne.n	80094f0 <HAL_LPTIM_Init+0x138>
    {
      /* Check LPTIM3 Input1 source */
      assert_param(IS_LPTIM_INPUT1_SOURCE(hlptim->Instance, hlptim->Init.Input1Source));

      /* Configure LPTIM3 Input1 source */
      hlptim->Instance->CFGR2 = hlptim->Init.Input1Source;
 80094e6:	687b      	ldr	r3, [r7, #4]
 80094e8:	681b      	ldr	r3, [r3, #0]
 80094ea:	687a      	ldr	r2, [r7, #4]
 80094ec:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 80094ee:	625a      	str	r2, [r3, #36]	; 0x24
    }
  }

  /* Change the LPTIM state */
  hlptim->State = HAL_LPTIM_STATE_READY;
 80094f0:	687b      	ldr	r3, [r7, #4]
 80094f2:	2201      	movs	r2, #1
 80094f4:	f883 2036 	strb.w	r2, [r3, #54]	; 0x36

  /* Return function status */
  return HAL_OK;
 80094f8:	2300      	movs	r3, #0
}
 80094fa:	4618      	mov	r0, r3
 80094fc:	3710      	adds	r7, #16
 80094fe:	46bd      	mov	sp, r7
 8009500:	bd80      	pop	{r7, pc}
 8009502:	bf00      	nop
 8009504:	ffff1f3f 	.word	0xffff1f3f
 8009508:	ff19f1fe 	.word	0xff19f1fe
 800950c:	40002400 	.word	0x40002400
 8009510:	58002400 	.word	0x58002400
 8009514:	58002800 	.word	0x58002800

08009518 <HAL_LPTIM_Counter_Start_IT>:
  * @param  Period Specifies the Autoreload value.
  *         This parameter must be a value between 0x0001 and 0xFFFF.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_LPTIM_Counter_Start_IT(LPTIM_HandleTypeDef *hlptim, uint32_t Period)
{
 8009518:	b580      	push	{r7, lr}
 800951a:	b082      	sub	sp, #8
 800951c:	af00      	add	r7, sp, #0
 800951e:	6078      	str	r0, [r7, #4]
 8009520:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_LPTIM_INSTANCE(hlptim->Instance));
  assert_param(IS_LPTIM_PERIOD(Period));

  /* Set the LPTIM state */
  hlptim->State = HAL_LPTIM_STATE_BUSY;
 8009522:	687b      	ldr	r3, [r7, #4]
 8009524:	2202      	movs	r2, #2
 8009526:	f883 2036 	strb.w	r2, [r3, #54]	; 0x36

  /* If clock source is not ULPTIM clock and counter source is external, then it must not be prescaled */
  if ((hlptim->Init.Clock.Source != LPTIM_CLOCKSOURCE_ULPTIM)
 800952a:	687b      	ldr	r3, [r7, #4]
 800952c:	685b      	ldr	r3, [r3, #4]
 800952e:	2b01      	cmp	r3, #1
 8009530:	d00c      	beq.n	800954c <HAL_LPTIM_Counter_Start_IT+0x34>
      && (hlptim->Init.CounterSource == LPTIM_COUNTERSOURCE_EXTERNAL))
 8009532:	687b      	ldr	r3, [r7, #4]
 8009534:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009536:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 800953a:	d107      	bne.n	800954c <HAL_LPTIM_Counter_Start_IT+0x34>
  {
    /* Check if clock is prescaled */
    assert_param(IS_LPTIM_CLOCK_PRESCALERDIV1(hlptim->Init.Clock.Prescaler));
    /* Set clock prescaler to 0 */
    hlptim->Instance->CFGR &= ~LPTIM_CFGR_PRESC;
 800953c:	687b      	ldr	r3, [r7, #4]
 800953e:	681b      	ldr	r3, [r3, #0]
 8009540:	68da      	ldr	r2, [r3, #12]
 8009542:	687b      	ldr	r3, [r7, #4]
 8009544:	681b      	ldr	r3, [r3, #0]
 8009546:	f422 6260 	bic.w	r2, r2, #3584	; 0xe00
 800954a:	60da      	str	r2, [r3, #12]
  }

  /* Enable the Peripheral */
  __HAL_LPTIM_ENABLE(hlptim);
 800954c:	687b      	ldr	r3, [r7, #4]
 800954e:	681b      	ldr	r3, [r3, #0]
 8009550:	691a      	ldr	r2, [r3, #16]
 8009552:	687b      	ldr	r3, [r7, #4]
 8009554:	681b      	ldr	r3, [r3, #0]
 8009556:	f042 0201 	orr.w	r2, r2, #1
 800955a:	611a      	str	r2, [r3, #16]

  /* Clear flag */
  __HAL_LPTIM_CLEAR_FLAG(hlptim, LPTIM_FLAG_ARROK);
 800955c:	687b      	ldr	r3, [r7, #4]
 800955e:	681b      	ldr	r3, [r3, #0]
 8009560:	2210      	movs	r2, #16
 8009562:	605a      	str	r2, [r3, #4]

  /* Load the period value in the autoreload register */
  __HAL_LPTIM_AUTORELOAD_SET(hlptim, Period);
 8009564:	687b      	ldr	r3, [r7, #4]
 8009566:	681b      	ldr	r3, [r3, #0]
 8009568:	683a      	ldr	r2, [r7, #0]
 800956a:	619a      	str	r2, [r3, #24]

  /* Wait for the completion of the write operation to the LPTIM_ARR register */
  if (LPTIM_WaitForFlag(hlptim, LPTIM_FLAG_ARROK) == HAL_TIMEOUT)
 800956c:	2110      	movs	r1, #16
 800956e:	6878      	ldr	r0, [r7, #4]
 8009570:	f000 f91e 	bl	80097b0 <LPTIM_WaitForFlag>
 8009574:	4603      	mov	r3, r0
 8009576:	2b03      	cmp	r3, #3
 8009578:	d101      	bne.n	800957e <HAL_LPTIM_Counter_Start_IT+0x66>
  {
    return HAL_TIMEOUT;
 800957a:	2303      	movs	r3, #3
 800957c:	e02f      	b.n	80095de <HAL_LPTIM_Counter_Start_IT+0xc6>
  }

  /* Disable the Peripheral */
  __HAL_LPTIM_DISABLE(hlptim);
 800957e:	6878      	ldr	r0, [r7, #4]
 8009580:	f000 f946 	bl	8009810 <LPTIM_Disable>

  if (HAL_LPTIM_GetState(hlptim) == HAL_LPTIM_STATE_TIMEOUT)
 8009584:	6878      	ldr	r0, [r7, #4]
 8009586:	f000 f905 	bl	8009794 <HAL_LPTIM_GetState>
 800958a:	4603      	mov	r3, r0
 800958c:	2b03      	cmp	r3, #3
 800958e:	d101      	bne.n	8009594 <HAL_LPTIM_Counter_Start_IT+0x7c>
  {
    return HAL_TIMEOUT;
 8009590:	2303      	movs	r3, #3
 8009592:	e024      	b.n	80095de <HAL_LPTIM_Counter_Start_IT+0xc6>
  }

  /* Enable Autoreload write complete interrupt */
  __HAL_LPTIM_ENABLE_IT(hlptim, LPTIM_IT_ARROK);
 8009594:	687b      	ldr	r3, [r7, #4]
 8009596:	681b      	ldr	r3, [r3, #0]
 8009598:	689a      	ldr	r2, [r3, #8]
 800959a:	687b      	ldr	r3, [r7, #4]
 800959c:	681b      	ldr	r3, [r3, #0]
 800959e:	f042 0210 	orr.w	r2, r2, #16
 80095a2:	609a      	str	r2, [r3, #8]

  /* Enable Autoreload match interrupt */
  __HAL_LPTIM_ENABLE_IT(hlptim, LPTIM_IT_ARRM);
 80095a4:	687b      	ldr	r3, [r7, #4]
 80095a6:	681b      	ldr	r3, [r3, #0]
 80095a8:	689a      	ldr	r2, [r3, #8]
 80095aa:	687b      	ldr	r3, [r7, #4]
 80095ac:	681b      	ldr	r3, [r3, #0]
 80095ae:	f042 0202 	orr.w	r2, r2, #2
 80095b2:	609a      	str	r2, [r3, #8]

  /* Enable the Peripheral */
  __HAL_LPTIM_ENABLE(hlptim);
 80095b4:	687b      	ldr	r3, [r7, #4]
 80095b6:	681b      	ldr	r3, [r3, #0]
 80095b8:	691a      	ldr	r2, [r3, #16]
 80095ba:	687b      	ldr	r3, [r7, #4]
 80095bc:	681b      	ldr	r3, [r3, #0]
 80095be:	f042 0201 	orr.w	r2, r2, #1
 80095c2:	611a      	str	r2, [r3, #16]

  /* Start timer in continuous mode */
  __HAL_LPTIM_START_CONTINUOUS(hlptim);
 80095c4:	687b      	ldr	r3, [r7, #4]
 80095c6:	681b      	ldr	r3, [r3, #0]
 80095c8:	691a      	ldr	r2, [r3, #16]
 80095ca:	687b      	ldr	r3, [r7, #4]
 80095cc:	681b      	ldr	r3, [r3, #0]
 80095ce:	f042 0204 	orr.w	r2, r2, #4
 80095d2:	611a      	str	r2, [r3, #16]

  /* Change the LPTIM state */
  hlptim->State = HAL_LPTIM_STATE_READY;
 80095d4:	687b      	ldr	r3, [r7, #4]
 80095d6:	2201      	movs	r2, #1
 80095d8:	f883 2036 	strb.w	r2, [r3, #54]	; 0x36

  /* Return function status */
  return HAL_OK;
 80095dc:	2300      	movs	r3, #0
}
 80095de:	4618      	mov	r0, r3
 80095e0:	3708      	adds	r7, #8
 80095e2:	46bd      	mov	sp, r7
 80095e4:	bd80      	pop	{r7, pc}

080095e6 <HAL_LPTIM_IRQHandler>:
  * @brief  Handle LPTIM interrupt request.
  * @param  hlptim LPTIM handle
  * @retval None
  */
void HAL_LPTIM_IRQHandler(LPTIM_HandleTypeDef *hlptim)
{
 80095e6:	b580      	push	{r7, lr}
 80095e8:	b082      	sub	sp, #8
 80095ea:	af00      	add	r7, sp, #0
 80095ec:	6078      	str	r0, [r7, #4]
  /* Compare match interrupt */
  if (__HAL_LPTIM_GET_FLAG(hlptim, LPTIM_FLAG_CMPM) != RESET)
 80095ee:	687b      	ldr	r3, [r7, #4]
 80095f0:	681b      	ldr	r3, [r3, #0]
 80095f2:	681b      	ldr	r3, [r3, #0]
 80095f4:	f003 0301 	and.w	r3, r3, #1
 80095f8:	2b01      	cmp	r3, #1
 80095fa:	d10d      	bne.n	8009618 <HAL_LPTIM_IRQHandler+0x32>
  {
    if (__HAL_LPTIM_GET_IT_SOURCE(hlptim, LPTIM_IT_CMPM) != RESET)
 80095fc:	687b      	ldr	r3, [r7, #4]
 80095fe:	681b      	ldr	r3, [r3, #0]
 8009600:	689b      	ldr	r3, [r3, #8]
 8009602:	f003 0301 	and.w	r3, r3, #1
 8009606:	2b01      	cmp	r3, #1
 8009608:	d106      	bne.n	8009618 <HAL_LPTIM_IRQHandler+0x32>
    {
      /* Clear Compare match flag */
      __HAL_LPTIM_CLEAR_FLAG(hlptim, LPTIM_FLAG_CMPM);
 800960a:	687b      	ldr	r3, [r7, #4]
 800960c:	681b      	ldr	r3, [r3, #0]
 800960e:	2201      	movs	r2, #1
 8009610:	605a      	str	r2, [r3, #4]

      /* Compare match Callback */
#if (USE_HAL_LPTIM_REGISTER_CALLBACKS == 1)
      hlptim->CompareMatchCallback(hlptim);
#else
      HAL_LPTIM_CompareMatchCallback(hlptim);
 8009612:	6878      	ldr	r0, [r7, #4]
 8009614:	f000 f882 	bl	800971c <HAL_LPTIM_CompareMatchCallback>
#endif /* USE_HAL_LPTIM_REGISTER_CALLBACKS */
    }
  }

  /* Autoreload match interrupt */
  if (__HAL_LPTIM_GET_FLAG(hlptim, LPTIM_FLAG_ARRM) != RESET)
 8009618:	687b      	ldr	r3, [r7, #4]
 800961a:	681b      	ldr	r3, [r3, #0]
 800961c:	681b      	ldr	r3, [r3, #0]
 800961e:	f003 0302 	and.w	r3, r3, #2
 8009622:	2b02      	cmp	r3, #2
 8009624:	d10d      	bne.n	8009642 <HAL_LPTIM_IRQHandler+0x5c>
  {
    if (__HAL_LPTIM_GET_IT_SOURCE(hlptim, LPTIM_IT_ARRM) != RESET)
 8009626:	687b      	ldr	r3, [r7, #4]
 8009628:	681b      	ldr	r3, [r3, #0]
 800962a:	689b      	ldr	r3, [r3, #8]
 800962c:	f003 0302 	and.w	r3, r3, #2
 8009630:	2b02      	cmp	r3, #2
 8009632:	d106      	bne.n	8009642 <HAL_LPTIM_IRQHandler+0x5c>
    {
      /* Clear Autoreload match flag */
      __HAL_LPTIM_CLEAR_FLAG(hlptim, LPTIM_FLAG_ARRM);
 8009634:	687b      	ldr	r3, [r7, #4]
 8009636:	681b      	ldr	r3, [r3, #0]
 8009638:	2202      	movs	r2, #2
 800963a:	605a      	str	r2, [r3, #4]

      /* Autoreload match Callback */
#if (USE_HAL_LPTIM_REGISTER_CALLBACKS == 1)
      hlptim->AutoReloadMatchCallback(hlptim);
#else
      HAL_LPTIM_AutoReloadMatchCallback(hlptim);
 800963c:	6878      	ldr	r0, [r7, #4]
 800963e:	f7fa fabd 	bl	8003bbc <HAL_LPTIM_AutoReloadMatchCallback>
#endif /* USE_HAL_LPTIM_REGISTER_CALLBACKS */
    }
  }

  /* Trigger detected interrupt */
  if (__HAL_LPTIM_GET_FLAG(hlptim, LPTIM_FLAG_EXTTRIG) != RESET)
 8009642:	687b      	ldr	r3, [r7, #4]
 8009644:	681b      	ldr	r3, [r3, #0]
 8009646:	681b      	ldr	r3, [r3, #0]
 8009648:	f003 0304 	and.w	r3, r3, #4
 800964c:	2b04      	cmp	r3, #4
 800964e:	d10d      	bne.n	800966c <HAL_LPTIM_IRQHandler+0x86>
  {
    if (__HAL_LPTIM_GET_IT_SOURCE(hlptim, LPTIM_IT_EXTTRIG) != RESET)
 8009650:	687b      	ldr	r3, [r7, #4]
 8009652:	681b      	ldr	r3, [r3, #0]
 8009654:	689b      	ldr	r3, [r3, #8]
 8009656:	f003 0304 	and.w	r3, r3, #4
 800965a:	2b04      	cmp	r3, #4
 800965c:	d106      	bne.n	800966c <HAL_LPTIM_IRQHandler+0x86>
    {
      /* Clear Trigger detected flag */
      __HAL_LPTIM_CLEAR_FLAG(hlptim, LPTIM_FLAG_EXTTRIG);
 800965e:	687b      	ldr	r3, [r7, #4]
 8009660:	681b      	ldr	r3, [r3, #0]
 8009662:	2204      	movs	r2, #4
 8009664:	605a      	str	r2, [r3, #4]

      /* Trigger detected callback */
#if (USE_HAL_LPTIM_REGISTER_CALLBACKS == 1)
      hlptim->TriggerCallback(hlptim);
#else
      HAL_LPTIM_TriggerCallback(hlptim);
 8009666:	6878      	ldr	r0, [r7, #4]
 8009668:	f000 f862 	bl	8009730 <HAL_LPTIM_TriggerCallback>
#endif /* USE_HAL_LPTIM_REGISTER_CALLBACKS */
    }
  }

  /* Compare write interrupt */
  if (__HAL_LPTIM_GET_FLAG(hlptim, LPTIM_FLAG_CMPOK) != RESET)
 800966c:	687b      	ldr	r3, [r7, #4]
 800966e:	681b      	ldr	r3, [r3, #0]
 8009670:	681b      	ldr	r3, [r3, #0]
 8009672:	f003 0308 	and.w	r3, r3, #8
 8009676:	2b08      	cmp	r3, #8
 8009678:	d10d      	bne.n	8009696 <HAL_LPTIM_IRQHandler+0xb0>
  {
    if (__HAL_LPTIM_GET_IT_SOURCE(hlptim, LPTIM_IT_CMPOK) != RESET)
 800967a:	687b      	ldr	r3, [r7, #4]
 800967c:	681b      	ldr	r3, [r3, #0]
 800967e:	689b      	ldr	r3, [r3, #8]
 8009680:	f003 0308 	and.w	r3, r3, #8
 8009684:	2b08      	cmp	r3, #8
 8009686:	d106      	bne.n	8009696 <HAL_LPTIM_IRQHandler+0xb0>
    {
      /* Clear Compare write flag */
      __HAL_LPTIM_CLEAR_FLAG(hlptim, LPTIM_FLAG_CMPOK);
 8009688:	687b      	ldr	r3, [r7, #4]
 800968a:	681b      	ldr	r3, [r3, #0]
 800968c:	2208      	movs	r2, #8
 800968e:	605a      	str	r2, [r3, #4]

      /* Compare write Callback */
#if (USE_HAL_LPTIM_REGISTER_CALLBACKS == 1)
      hlptim->CompareWriteCallback(hlptim);
#else
      HAL_LPTIM_CompareWriteCallback(hlptim);
 8009690:	6878      	ldr	r0, [r7, #4]
 8009692:	f000 f857 	bl	8009744 <HAL_LPTIM_CompareWriteCallback>
#endif /* USE_HAL_LPTIM_REGISTER_CALLBACKS */
    }
  }

  /* Autoreload write interrupt */
  if (__HAL_LPTIM_GET_FLAG(hlptim, LPTIM_FLAG_ARROK) != RESET)
 8009696:	687b      	ldr	r3, [r7, #4]
 8009698:	681b      	ldr	r3, [r3, #0]
 800969a:	681b      	ldr	r3, [r3, #0]
 800969c:	f003 0310 	and.w	r3, r3, #16
 80096a0:	2b10      	cmp	r3, #16
 80096a2:	d10d      	bne.n	80096c0 <HAL_LPTIM_IRQHandler+0xda>
  {
    if (__HAL_LPTIM_GET_IT_SOURCE(hlptim, LPTIM_IT_ARROK) != RESET)
 80096a4:	687b      	ldr	r3, [r7, #4]
 80096a6:	681b      	ldr	r3, [r3, #0]
 80096a8:	689b      	ldr	r3, [r3, #8]
 80096aa:	f003 0310 	and.w	r3, r3, #16
 80096ae:	2b10      	cmp	r3, #16
 80096b0:	d106      	bne.n	80096c0 <HAL_LPTIM_IRQHandler+0xda>
    {
      /* Clear Autoreload write flag */
      __HAL_LPTIM_CLEAR_FLAG(hlptim, LPTIM_FLAG_ARROK);
 80096b2:	687b      	ldr	r3, [r7, #4]
 80096b4:	681b      	ldr	r3, [r3, #0]
 80096b6:	2210      	movs	r2, #16
 80096b8:	605a      	str	r2, [r3, #4]

      /* Autoreload write Callback */
#if (USE_HAL_LPTIM_REGISTER_CALLBACKS == 1)
      hlptim->AutoReloadWriteCallback(hlptim);
#else
      HAL_LPTIM_AutoReloadWriteCallback(hlptim);
 80096ba:	6878      	ldr	r0, [r7, #4]
 80096bc:	f000 f84c 	bl	8009758 <HAL_LPTIM_AutoReloadWriteCallback>
#endif /* USE_HAL_LPTIM_REGISTER_CALLBACKS */
    }
  }

  /* Direction counter changed from Down to Up interrupt */
  if (__HAL_LPTIM_GET_FLAG(hlptim, LPTIM_FLAG_UP) != RESET)
 80096c0:	687b      	ldr	r3, [r7, #4]
 80096c2:	681b      	ldr	r3, [r3, #0]
 80096c4:	681b      	ldr	r3, [r3, #0]
 80096c6:	f003 0320 	and.w	r3, r3, #32
 80096ca:	2b20      	cmp	r3, #32
 80096cc:	d10d      	bne.n	80096ea <HAL_LPTIM_IRQHandler+0x104>
  {
    if (__HAL_LPTIM_GET_IT_SOURCE(hlptim, LPTIM_IT_UP) != RESET)
 80096ce:	687b      	ldr	r3, [r7, #4]
 80096d0:	681b      	ldr	r3, [r3, #0]
 80096d2:	689b      	ldr	r3, [r3, #8]
 80096d4:	f003 0320 	and.w	r3, r3, #32
 80096d8:	2b20      	cmp	r3, #32
 80096da:	d106      	bne.n	80096ea <HAL_LPTIM_IRQHandler+0x104>
    {
      /* Clear Direction counter changed from Down to Up flag */
      __HAL_LPTIM_CLEAR_FLAG(hlptim, LPTIM_FLAG_UP);
 80096dc:	687b      	ldr	r3, [r7, #4]
 80096de:	681b      	ldr	r3, [r3, #0]
 80096e0:	2220      	movs	r2, #32
 80096e2:	605a      	str	r2, [r3, #4]

      /* Direction counter changed from Down to Up Callback */
#if (USE_HAL_LPTIM_REGISTER_CALLBACKS == 1)
      hlptim->DirectionUpCallback(hlptim);
#else
      HAL_LPTIM_DirectionUpCallback(hlptim);
 80096e4:	6878      	ldr	r0, [r7, #4]
 80096e6:	f000 f841 	bl	800976c <HAL_LPTIM_DirectionUpCallback>
#endif /* USE_HAL_LPTIM_REGISTER_CALLBACKS */
    }
  }

  /* Direction counter changed from Up to Down interrupt */
  if (__HAL_LPTIM_GET_FLAG(hlptim, LPTIM_FLAG_DOWN) != RESET)
 80096ea:	687b      	ldr	r3, [r7, #4]
 80096ec:	681b      	ldr	r3, [r3, #0]
 80096ee:	681b      	ldr	r3, [r3, #0]
 80096f0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80096f4:	2b40      	cmp	r3, #64	; 0x40
 80096f6:	d10d      	bne.n	8009714 <HAL_LPTIM_IRQHandler+0x12e>
  {
    if (__HAL_LPTIM_GET_IT_SOURCE(hlptim, LPTIM_IT_DOWN) != RESET)
 80096f8:	687b      	ldr	r3, [r7, #4]
 80096fa:	681b      	ldr	r3, [r3, #0]
 80096fc:	689b      	ldr	r3, [r3, #8]
 80096fe:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009702:	2b40      	cmp	r3, #64	; 0x40
 8009704:	d106      	bne.n	8009714 <HAL_LPTIM_IRQHandler+0x12e>
    {
      /* Clear Direction counter changed from Up to Down flag */
      __HAL_LPTIM_CLEAR_FLAG(hlptim, LPTIM_FLAG_DOWN);
 8009706:	687b      	ldr	r3, [r7, #4]
 8009708:	681b      	ldr	r3, [r3, #0]
 800970a:	2240      	movs	r2, #64	; 0x40
 800970c:	605a      	str	r2, [r3, #4]

      /* Direction counter changed from Up to Down Callback */
#if (USE_HAL_LPTIM_REGISTER_CALLBACKS == 1)
      hlptim->DirectionDownCallback(hlptim);
#else
      HAL_LPTIM_DirectionDownCallback(hlptim);
 800970e:	6878      	ldr	r0, [r7, #4]
 8009710:	f000 f836 	bl	8009780 <HAL_LPTIM_DirectionDownCallback>
#endif /* USE_HAL_LPTIM_REGISTER_CALLBACKS */
    }
  }
}
 8009714:	bf00      	nop
 8009716:	3708      	adds	r7, #8
 8009718:	46bd      	mov	sp, r7
 800971a:	bd80      	pop	{r7, pc}

0800971c <HAL_LPTIM_CompareMatchCallback>:
  * @brief  Compare match callback in non-blocking mode.
  * @param  hlptim LPTIM handle
  * @retval None
  */
__weak void HAL_LPTIM_CompareMatchCallback(LPTIM_HandleTypeDef *hlptim)
{
 800971c:	b480      	push	{r7}
 800971e:	b083      	sub	sp, #12
 8009720:	af00      	add	r7, sp, #0
 8009722:	6078      	str	r0, [r7, #4]
  UNUSED(hlptim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_LPTIM_CompareMatchCallback could be implemented in the user file
   */
}
 8009724:	bf00      	nop
 8009726:	370c      	adds	r7, #12
 8009728:	46bd      	mov	sp, r7
 800972a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800972e:	4770      	bx	lr

08009730 <HAL_LPTIM_TriggerCallback>:
  * @brief  Trigger detected callback in non-blocking mode.
  * @param  hlptim LPTIM handle
  * @retval None
  */
__weak void HAL_LPTIM_TriggerCallback(LPTIM_HandleTypeDef *hlptim)
{
 8009730:	b480      	push	{r7}
 8009732:	b083      	sub	sp, #12
 8009734:	af00      	add	r7, sp, #0
 8009736:	6078      	str	r0, [r7, #4]
  UNUSED(hlptim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_LPTIM_TriggerCallback could be implemented in the user file
   */
}
 8009738:	bf00      	nop
 800973a:	370c      	adds	r7, #12
 800973c:	46bd      	mov	sp, r7
 800973e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009742:	4770      	bx	lr

08009744 <HAL_LPTIM_CompareWriteCallback>:
  * @brief  Compare write callback in non-blocking mode.
  * @param  hlptim LPTIM handle
  * @retval None
  */
__weak void HAL_LPTIM_CompareWriteCallback(LPTIM_HandleTypeDef *hlptim)
{
 8009744:	b480      	push	{r7}
 8009746:	b083      	sub	sp, #12
 8009748:	af00      	add	r7, sp, #0
 800974a:	6078      	str	r0, [r7, #4]
  UNUSED(hlptim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_LPTIM_CompareWriteCallback could be implemented in the user file
   */
}
 800974c:	bf00      	nop
 800974e:	370c      	adds	r7, #12
 8009750:	46bd      	mov	sp, r7
 8009752:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009756:	4770      	bx	lr

08009758 <HAL_LPTIM_AutoReloadWriteCallback>:
  * @brief  Autoreload write callback in non-blocking mode.
  * @param  hlptim LPTIM handle
  * @retval None
  */
__weak void HAL_LPTIM_AutoReloadWriteCallback(LPTIM_HandleTypeDef *hlptim)
{
 8009758:	b480      	push	{r7}
 800975a:	b083      	sub	sp, #12
 800975c:	af00      	add	r7, sp, #0
 800975e:	6078      	str	r0, [r7, #4]
  UNUSED(hlptim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_LPTIM_AutoReloadWriteCallback could be implemented in the user file
   */
}
 8009760:	bf00      	nop
 8009762:	370c      	adds	r7, #12
 8009764:	46bd      	mov	sp, r7
 8009766:	f85d 7b04 	ldr.w	r7, [sp], #4
 800976a:	4770      	bx	lr

0800976c <HAL_LPTIM_DirectionUpCallback>:
  * @brief  Direction counter changed from Down to Up callback in non-blocking mode.
  * @param  hlptim LPTIM handle
  * @retval None
  */
__weak void HAL_LPTIM_DirectionUpCallback(LPTIM_HandleTypeDef *hlptim)
{
 800976c:	b480      	push	{r7}
 800976e:	b083      	sub	sp, #12
 8009770:	af00      	add	r7, sp, #0
 8009772:	6078      	str	r0, [r7, #4]
  UNUSED(hlptim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_LPTIM_DirectionUpCallback could be implemented in the user file
   */
}
 8009774:	bf00      	nop
 8009776:	370c      	adds	r7, #12
 8009778:	46bd      	mov	sp, r7
 800977a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800977e:	4770      	bx	lr

08009780 <HAL_LPTIM_DirectionDownCallback>:
  * @brief  Direction counter changed from Up to Down callback in non-blocking mode.
  * @param  hlptim LPTIM handle
  * @retval None
  */
__weak void HAL_LPTIM_DirectionDownCallback(LPTIM_HandleTypeDef *hlptim)
{
 8009780:	b480      	push	{r7}
 8009782:	b083      	sub	sp, #12
 8009784:	af00      	add	r7, sp, #0
 8009786:	6078      	str	r0, [r7, #4]
  UNUSED(hlptim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_LPTIM_DirectionDownCallback could be implemented in the user file
   */
}
 8009788:	bf00      	nop
 800978a:	370c      	adds	r7, #12
 800978c:	46bd      	mov	sp, r7
 800978e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009792:	4770      	bx	lr

08009794 <HAL_LPTIM_GetState>:
  * @brief  Return the LPTIM handle state.
  * @param  hlptim LPTIM handle
  * @retval HAL state
  */
HAL_LPTIM_StateTypeDef HAL_LPTIM_GetState(LPTIM_HandleTypeDef *hlptim)
{
 8009794:	b480      	push	{r7}
 8009796:	b083      	sub	sp, #12
 8009798:	af00      	add	r7, sp, #0
 800979a:	6078      	str	r0, [r7, #4]
  /* Return LPTIM handle state */
  return hlptim->State;
 800979c:	687b      	ldr	r3, [r7, #4]
 800979e:	f893 3036 	ldrb.w	r3, [r3, #54]	; 0x36
 80097a2:	b2db      	uxtb	r3, r3
}
 80097a4:	4618      	mov	r0, r3
 80097a6:	370c      	adds	r7, #12
 80097a8:	46bd      	mov	sp, r7
 80097aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80097ae:	4770      	bx	lr

080097b0 <LPTIM_WaitForFlag>:
  *                the configuration information for LPTIM module.
  * @param  flag   The lptim flag
  * @retval HAL status
  */
static HAL_StatusTypeDef LPTIM_WaitForFlag(LPTIM_HandleTypeDef *hlptim, uint32_t flag)
{
 80097b0:	b480      	push	{r7}
 80097b2:	b085      	sub	sp, #20
 80097b4:	af00      	add	r7, sp, #0
 80097b6:	6078      	str	r0, [r7, #4]
 80097b8:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef result = HAL_OK;
 80097ba:	2300      	movs	r3, #0
 80097bc:	73fb      	strb	r3, [r7, #15]
  uint32_t count = TIMEOUT * (SystemCoreClock / 20UL / 1000UL);
 80097be:	4b12      	ldr	r3, [pc, #72]	; (8009808 <LPTIM_WaitForFlag+0x58>)
 80097c0:	681b      	ldr	r3, [r3, #0]
 80097c2:	4a12      	ldr	r2, [pc, #72]	; (800980c <LPTIM_WaitForFlag+0x5c>)
 80097c4:	fba2 2303 	umull	r2, r3, r2, r3
 80097c8:	0b9b      	lsrs	r3, r3, #14
 80097ca:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80097ce:	fb02 f303 	mul.w	r3, r2, r3
 80097d2:	60bb      	str	r3, [r7, #8]
  do
  {
    count--;
 80097d4:	68bb      	ldr	r3, [r7, #8]
 80097d6:	3b01      	subs	r3, #1
 80097d8:	60bb      	str	r3, [r7, #8]
    if (count == 0UL)
 80097da:	68bb      	ldr	r3, [r7, #8]
 80097dc:	2b00      	cmp	r3, #0
 80097de:	d101      	bne.n	80097e4 <LPTIM_WaitForFlag+0x34>
    {
      result = HAL_TIMEOUT;
 80097e0:	2303      	movs	r3, #3
 80097e2:	73fb      	strb	r3, [r7, #15]
    }
  } while ((!(__HAL_LPTIM_GET_FLAG((hlptim), (flag)))) && (count != 0UL));
 80097e4:	687b      	ldr	r3, [r7, #4]
 80097e6:	681b      	ldr	r3, [r3, #0]
 80097e8:	681a      	ldr	r2, [r3, #0]
 80097ea:	683b      	ldr	r3, [r7, #0]
 80097ec:	4013      	ands	r3, r2
 80097ee:	683a      	ldr	r2, [r7, #0]
 80097f0:	429a      	cmp	r2, r3
 80097f2:	d002      	beq.n	80097fa <LPTIM_WaitForFlag+0x4a>
 80097f4:	68bb      	ldr	r3, [r7, #8]
 80097f6:	2b00      	cmp	r3, #0
 80097f8:	d1ec      	bne.n	80097d4 <LPTIM_WaitForFlag+0x24>

  return result;
 80097fa:	7bfb      	ldrb	r3, [r7, #15]
}
 80097fc:	4618      	mov	r0, r3
 80097fe:	3714      	adds	r7, #20
 8009800:	46bd      	mov	sp, r7
 8009802:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009806:	4770      	bx	lr
 8009808:	20000010 	.word	0x20000010
 800980c:	d1b71759 	.word	0xd1b71759

08009810 <LPTIM_Disable>:
  *         Please check Errata Sheet ES0335 for more details under "MCU may remain
  *         stuck in LPTIM interrupt when entering Stop mode" section.
  * @retval None
  */
void LPTIM_Disable(LPTIM_HandleTypeDef *hlptim)
{
 8009810:	b580      	push	{r7, lr}
 8009812:	b08c      	sub	sp, #48	; 0x30
 8009814:	af00      	add	r7, sp, #0
 8009816:	6078      	str	r0, [r7, #4]
  uint32_t tmpclksource = 0;
 8009818:	2300      	movs	r3, #0
 800981a:	62fb      	str	r3, [r7, #44]	; 0x2c
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800981c:	f3ef 8310 	mrs	r3, PRIMASK
 8009820:	60fb      	str	r3, [r7, #12]
  return(result);
 8009822:	68fb      	ldr	r3, [r7, #12]
  uint32_t tmpARR;
  uint32_t primask_bit;
  uint32_t tmpCFGR2;

  /* Enter critical section */
  primask_bit = __get_PRIMASK();
 8009824:	62bb      	str	r3, [r7, #40]	; 0x28
 8009826:	2301      	movs	r3, #1
 8009828:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800982a:	693b      	ldr	r3, [r7, #16]
 800982c:	f383 8810 	msr	PRIMASK, r3
}
 8009830:	bf00      	nop
  __set_PRIMASK(1) ;

  /*********** Save LPTIM Config ***********/
  /* Save LPTIM source clock */
  switch ((uint32_t)hlptim->Instance)
 8009832:	687b      	ldr	r3, [r7, #4]
 8009834:	681b      	ldr	r3, [r3, #0]
 8009836:	4a81      	ldr	r2, [pc, #516]	; (8009a3c <LPTIM_Disable+0x22c>)
 8009838:	4293      	cmp	r3, r2
 800983a:	d02d      	beq.n	8009898 <LPTIM_Disable+0x88>
 800983c:	4a7f      	ldr	r2, [pc, #508]	; (8009a3c <LPTIM_Disable+0x22c>)
 800983e:	4293      	cmp	r3, r2
 8009840:	d830      	bhi.n	80098a4 <LPTIM_Disable+0x94>
 8009842:	4a7f      	ldr	r2, [pc, #508]	; (8009a40 <LPTIM_Disable+0x230>)
 8009844:	4293      	cmp	r3, r2
 8009846:	d021      	beq.n	800988c <LPTIM_Disable+0x7c>
 8009848:	4a7d      	ldr	r2, [pc, #500]	; (8009a40 <LPTIM_Disable+0x230>)
 800984a:	4293      	cmp	r3, r2
 800984c:	d82a      	bhi.n	80098a4 <LPTIM_Disable+0x94>
 800984e:	4a7d      	ldr	r2, [pc, #500]	; (8009a44 <LPTIM_Disable+0x234>)
 8009850:	4293      	cmp	r3, r2
 8009852:	d015      	beq.n	8009880 <LPTIM_Disable+0x70>
 8009854:	4a7b      	ldr	r2, [pc, #492]	; (8009a44 <LPTIM_Disable+0x234>)
 8009856:	4293      	cmp	r3, r2
 8009858:	d824      	bhi.n	80098a4 <LPTIM_Disable+0x94>
 800985a:	4a7b      	ldr	r2, [pc, #492]	; (8009a48 <LPTIM_Disable+0x238>)
 800985c:	4293      	cmp	r3, r2
 800985e:	d003      	beq.n	8009868 <LPTIM_Disable+0x58>
 8009860:	4a7a      	ldr	r2, [pc, #488]	; (8009a4c <LPTIM_Disable+0x23c>)
 8009862:	4293      	cmp	r3, r2
 8009864:	d006      	beq.n	8009874 <LPTIM_Disable+0x64>
    case LPTIM5_BASE:
      tmpclksource = __HAL_RCC_GET_LPTIM5_SOURCE();
      break;
#endif /* LPTIM5 */
    default:
      break;
 8009866:	e01d      	b.n	80098a4 <LPTIM_Disable+0x94>
      tmpclksource = __HAL_RCC_GET_LPTIM1_SOURCE();
 8009868:	4b79      	ldr	r3, [pc, #484]	; (8009a50 <LPTIM_Disable+0x240>)
 800986a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800986c:	f003 43e0 	and.w	r3, r3, #1879048192	; 0x70000000
 8009870:	62fb      	str	r3, [r7, #44]	; 0x2c
      break;
 8009872:	e018      	b.n	80098a6 <LPTIM_Disable+0x96>
      tmpclksource = __HAL_RCC_GET_LPTIM2_SOURCE();
 8009874:	4b76      	ldr	r3, [pc, #472]	; (8009a50 <LPTIM_Disable+0x240>)
 8009876:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8009878:	f403 53e0 	and.w	r3, r3, #7168	; 0x1c00
 800987c:	62fb      	str	r3, [r7, #44]	; 0x2c
      break;
 800987e:	e012      	b.n	80098a6 <LPTIM_Disable+0x96>
      tmpclksource = __HAL_RCC_GET_LPTIM3_SOURCE();
 8009880:	4b73      	ldr	r3, [pc, #460]	; (8009a50 <LPTIM_Disable+0x240>)
 8009882:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8009884:	f403 4360 	and.w	r3, r3, #57344	; 0xe000
 8009888:	62fb      	str	r3, [r7, #44]	; 0x2c
      break;
 800988a:	e00c      	b.n	80098a6 <LPTIM_Disable+0x96>
      tmpclksource = __HAL_RCC_GET_LPTIM4_SOURCE();
 800988c:	4b70      	ldr	r3, [pc, #448]	; (8009a50 <LPTIM_Disable+0x240>)
 800988e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8009890:	f403 4360 	and.w	r3, r3, #57344	; 0xe000
 8009894:	62fb      	str	r3, [r7, #44]	; 0x2c
      break;
 8009896:	e006      	b.n	80098a6 <LPTIM_Disable+0x96>
      tmpclksource = __HAL_RCC_GET_LPTIM5_SOURCE();
 8009898:	4b6d      	ldr	r3, [pc, #436]	; (8009a50 <LPTIM_Disable+0x240>)
 800989a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800989c:	f403 4360 	and.w	r3, r3, #57344	; 0xe000
 80098a0:	62fb      	str	r3, [r7, #44]	; 0x2c
      break;
 80098a2:	e000      	b.n	80098a6 <LPTIM_Disable+0x96>
      break;
 80098a4:	bf00      	nop
  }

  /* Save LPTIM configuration registers */
  tmpIER = hlptim->Instance->IER;
 80098a6:	687b      	ldr	r3, [r7, #4]
 80098a8:	681b      	ldr	r3, [r3, #0]
 80098aa:	689b      	ldr	r3, [r3, #8]
 80098ac:	627b      	str	r3, [r7, #36]	; 0x24
  tmpCFGR = hlptim->Instance->CFGR;
 80098ae:	687b      	ldr	r3, [r7, #4]
 80098b0:	681b      	ldr	r3, [r3, #0]
 80098b2:	68db      	ldr	r3, [r3, #12]
 80098b4:	623b      	str	r3, [r7, #32]
  tmpCMP = hlptim->Instance->CMP;
 80098b6:	687b      	ldr	r3, [r7, #4]
 80098b8:	681b      	ldr	r3, [r3, #0]
 80098ba:	695b      	ldr	r3, [r3, #20]
 80098bc:	61fb      	str	r3, [r7, #28]
  tmpARR = hlptim->Instance->ARR;
 80098be:	687b      	ldr	r3, [r7, #4]
 80098c0:	681b      	ldr	r3, [r3, #0]
 80098c2:	699b      	ldr	r3, [r3, #24]
 80098c4:	61bb      	str	r3, [r7, #24]
  tmpCFGR2 = hlptim->Instance->CFGR2;
 80098c6:	687b      	ldr	r3, [r7, #4]
 80098c8:	681b      	ldr	r3, [r3, #0]
 80098ca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80098cc:	617b      	str	r3, [r7, #20]

  /*********** Reset LPTIM ***********/
  switch ((uint32_t)hlptim->Instance)
 80098ce:	687b      	ldr	r3, [r7, #4]
 80098d0:	681b      	ldr	r3, [r3, #0]
 80098d2:	4a5a      	ldr	r2, [pc, #360]	; (8009a3c <LPTIM_Disable+0x22c>)
 80098d4:	4293      	cmp	r3, r2
 80098d6:	d059      	beq.n	800998c <LPTIM_Disable+0x17c>
 80098d8:	4a58      	ldr	r2, [pc, #352]	; (8009a3c <LPTIM_Disable+0x22c>)
 80098da:	4293      	cmp	r3, r2
 80098dc:	d867      	bhi.n	80099ae <LPTIM_Disable+0x19e>
 80098de:	4a58      	ldr	r2, [pc, #352]	; (8009a40 <LPTIM_Disable+0x230>)
 80098e0:	4293      	cmp	r3, r2
 80098e2:	d042      	beq.n	800996a <LPTIM_Disable+0x15a>
 80098e4:	4a56      	ldr	r2, [pc, #344]	; (8009a40 <LPTIM_Disable+0x230>)
 80098e6:	4293      	cmp	r3, r2
 80098e8:	d861      	bhi.n	80099ae <LPTIM_Disable+0x19e>
 80098ea:	4a56      	ldr	r2, [pc, #344]	; (8009a44 <LPTIM_Disable+0x234>)
 80098ec:	4293      	cmp	r3, r2
 80098ee:	d02b      	beq.n	8009948 <LPTIM_Disable+0x138>
 80098f0:	4a54      	ldr	r2, [pc, #336]	; (8009a44 <LPTIM_Disable+0x234>)
 80098f2:	4293      	cmp	r3, r2
 80098f4:	d85b      	bhi.n	80099ae <LPTIM_Disable+0x19e>
 80098f6:	4a54      	ldr	r2, [pc, #336]	; (8009a48 <LPTIM_Disable+0x238>)
 80098f8:	4293      	cmp	r3, r2
 80098fa:	d003      	beq.n	8009904 <LPTIM_Disable+0xf4>
 80098fc:	4a53      	ldr	r2, [pc, #332]	; (8009a4c <LPTIM_Disable+0x23c>)
 80098fe:	4293      	cmp	r3, r2
 8009900:	d011      	beq.n	8009926 <LPTIM_Disable+0x116>
      __HAL_RCC_LPTIM5_FORCE_RESET();
      __HAL_RCC_LPTIM5_RELEASE_RESET();
      break;
#endif /* LPTIM5 */
    default:
      break;
 8009902:	e054      	b.n	80099ae <LPTIM_Disable+0x19e>
      __HAL_RCC_LPTIM1_FORCE_RESET();
 8009904:	4b52      	ldr	r3, [pc, #328]	; (8009a50 <LPTIM_Disable+0x240>)
 8009906:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800990a:	4a51      	ldr	r2, [pc, #324]	; (8009a50 <LPTIM_Disable+0x240>)
 800990c:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8009910:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      __HAL_RCC_LPTIM1_RELEASE_RESET();
 8009914:	4b4e      	ldr	r3, [pc, #312]	; (8009a50 <LPTIM_Disable+0x240>)
 8009916:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800991a:	4a4d      	ldr	r2, [pc, #308]	; (8009a50 <LPTIM_Disable+0x240>)
 800991c:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8009920:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      break;
 8009924:	e044      	b.n	80099b0 <LPTIM_Disable+0x1a0>
      __HAL_RCC_LPTIM2_FORCE_RESET();
 8009926:	4b4a      	ldr	r3, [pc, #296]	; (8009a50 <LPTIM_Disable+0x240>)
 8009928:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800992c:	4a48      	ldr	r2, [pc, #288]	; (8009a50 <LPTIM_Disable+0x240>)
 800992e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8009932:	f8c2 309c 	str.w	r3, [r2, #156]	; 0x9c
      __HAL_RCC_LPTIM2_RELEASE_RESET();
 8009936:	4b46      	ldr	r3, [pc, #280]	; (8009a50 <LPTIM_Disable+0x240>)
 8009938:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800993c:	4a44      	ldr	r2, [pc, #272]	; (8009a50 <LPTIM_Disable+0x240>)
 800993e:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8009942:	f8c2 309c 	str.w	r3, [r2, #156]	; 0x9c
      break;
 8009946:	e033      	b.n	80099b0 <LPTIM_Disable+0x1a0>
      __HAL_RCC_LPTIM3_FORCE_RESET();
 8009948:	4b41      	ldr	r3, [pc, #260]	; (8009a50 <LPTIM_Disable+0x240>)
 800994a:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800994e:	4a40      	ldr	r2, [pc, #256]	; (8009a50 <LPTIM_Disable+0x240>)
 8009950:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8009954:	f8c2 309c 	str.w	r3, [r2, #156]	; 0x9c
      __HAL_RCC_LPTIM3_RELEASE_RESET();
 8009958:	4b3d      	ldr	r3, [pc, #244]	; (8009a50 <LPTIM_Disable+0x240>)
 800995a:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800995e:	4a3c      	ldr	r2, [pc, #240]	; (8009a50 <LPTIM_Disable+0x240>)
 8009960:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8009964:	f8c2 309c 	str.w	r3, [r2, #156]	; 0x9c
      break;
 8009968:	e022      	b.n	80099b0 <LPTIM_Disable+0x1a0>
      __HAL_RCC_LPTIM4_FORCE_RESET();
 800996a:	4b39      	ldr	r3, [pc, #228]	; (8009a50 <LPTIM_Disable+0x240>)
 800996c:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8009970:	4a37      	ldr	r2, [pc, #220]	; (8009a50 <LPTIM_Disable+0x240>)
 8009972:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8009976:	f8c2 309c 	str.w	r3, [r2, #156]	; 0x9c
      __HAL_RCC_LPTIM4_RELEASE_RESET();
 800997a:	4b35      	ldr	r3, [pc, #212]	; (8009a50 <LPTIM_Disable+0x240>)
 800997c:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8009980:	4a33      	ldr	r2, [pc, #204]	; (8009a50 <LPTIM_Disable+0x240>)
 8009982:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8009986:	f8c2 309c 	str.w	r3, [r2, #156]	; 0x9c
      break;
 800998a:	e011      	b.n	80099b0 <LPTIM_Disable+0x1a0>
      __HAL_RCC_LPTIM5_FORCE_RESET();
 800998c:	4b30      	ldr	r3, [pc, #192]	; (8009a50 <LPTIM_Disable+0x240>)
 800998e:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8009992:	4a2f      	ldr	r2, [pc, #188]	; (8009a50 <LPTIM_Disable+0x240>)
 8009994:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8009998:	f8c2 309c 	str.w	r3, [r2, #156]	; 0x9c
      __HAL_RCC_LPTIM5_RELEASE_RESET();
 800999c:	4b2c      	ldr	r3, [pc, #176]	; (8009a50 <LPTIM_Disable+0x240>)
 800999e:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 80099a2:	4a2b      	ldr	r2, [pc, #172]	; (8009a50 <LPTIM_Disable+0x240>)
 80099a4:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80099a8:	f8c2 309c 	str.w	r3, [r2, #156]	; 0x9c
      break;
 80099ac:	e000      	b.n	80099b0 <LPTIM_Disable+0x1a0>
      break;
 80099ae:	bf00      	nop
  }

  /*********** Restore LPTIM Config ***********/
  if ((tmpCMP != 0UL) || (tmpARR != 0UL))
 80099b0:	69fb      	ldr	r3, [r7, #28]
 80099b2:	2b00      	cmp	r3, #0
 80099b4:	d103      	bne.n	80099be <LPTIM_Disable+0x1ae>
 80099b6:	69bb      	ldr	r3, [r7, #24]
 80099b8:	2b00      	cmp	r3, #0
 80099ba:	f000 80d1 	beq.w	8009b60 <LPTIM_Disable+0x350>
  {
    /* Force LPTIM source kernel clock from APB */
    switch ((uint32_t)hlptim->Instance)
 80099be:	687b      	ldr	r3, [r7, #4]
 80099c0:	681b      	ldr	r3, [r3, #0]
 80099c2:	4a1e      	ldr	r2, [pc, #120]	; (8009a3c <LPTIM_Disable+0x22c>)
 80099c4:	4293      	cmp	r3, r2
 80099c6:	d031      	beq.n	8009a2c <LPTIM_Disable+0x21c>
 80099c8:	4a1c      	ldr	r2, [pc, #112]	; (8009a3c <LPTIM_Disable+0x22c>)
 80099ca:	4293      	cmp	r3, r2
 80099cc:	d842      	bhi.n	8009a54 <LPTIM_Disable+0x244>
 80099ce:	4a1c      	ldr	r2, [pc, #112]	; (8009a40 <LPTIM_Disable+0x230>)
 80099d0:	4293      	cmp	r3, r2
 80099d2:	d024      	beq.n	8009a1e <LPTIM_Disable+0x20e>
 80099d4:	4a1a      	ldr	r2, [pc, #104]	; (8009a40 <LPTIM_Disable+0x230>)
 80099d6:	4293      	cmp	r3, r2
 80099d8:	d83c      	bhi.n	8009a54 <LPTIM_Disable+0x244>
 80099da:	4a1a      	ldr	r2, [pc, #104]	; (8009a44 <LPTIM_Disable+0x234>)
 80099dc:	4293      	cmp	r3, r2
 80099de:	d017      	beq.n	8009a10 <LPTIM_Disable+0x200>
 80099e0:	4a18      	ldr	r2, [pc, #96]	; (8009a44 <LPTIM_Disable+0x234>)
 80099e2:	4293      	cmp	r3, r2
 80099e4:	d836      	bhi.n	8009a54 <LPTIM_Disable+0x244>
 80099e6:	4a18      	ldr	r2, [pc, #96]	; (8009a48 <LPTIM_Disable+0x238>)
 80099e8:	4293      	cmp	r3, r2
 80099ea:	d003      	beq.n	80099f4 <LPTIM_Disable+0x1e4>
 80099ec:	4a17      	ldr	r2, [pc, #92]	; (8009a4c <LPTIM_Disable+0x23c>)
 80099ee:	4293      	cmp	r3, r2
 80099f0:	d007      	beq.n	8009a02 <LPTIM_Disable+0x1f2>
      case LPTIM5_BASE:
        __HAL_RCC_LPTIM5_CONFIG(RCC_LPTIM5CLKSOURCE_D3PCLK1);
        break;
#endif /* LPTIM5 */
      default:
        break;
 80099f2:	e02f      	b.n	8009a54 <LPTIM_Disable+0x244>
        __HAL_RCC_LPTIM1_CONFIG(RCC_LPTIM1CLKSOURCE_D2PCLK1);
 80099f4:	4b16      	ldr	r3, [pc, #88]	; (8009a50 <LPTIM_Disable+0x240>)
 80099f6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80099f8:	4a15      	ldr	r2, [pc, #84]	; (8009a50 <LPTIM_Disable+0x240>)
 80099fa:	f023 43e0 	bic.w	r3, r3, #1879048192	; 0x70000000
 80099fe:	6553      	str	r3, [r2, #84]	; 0x54
        break;
 8009a00:	e029      	b.n	8009a56 <LPTIM_Disable+0x246>
        __HAL_RCC_LPTIM2_CONFIG(RCC_LPTIM2CLKSOURCE_D3PCLK1);
 8009a02:	4b13      	ldr	r3, [pc, #76]	; (8009a50 <LPTIM_Disable+0x240>)
 8009a04:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8009a06:	4a12      	ldr	r2, [pc, #72]	; (8009a50 <LPTIM_Disable+0x240>)
 8009a08:	f423 53e0 	bic.w	r3, r3, #7168	; 0x1c00
 8009a0c:	6593      	str	r3, [r2, #88]	; 0x58
        break;
 8009a0e:	e022      	b.n	8009a56 <LPTIM_Disable+0x246>
        __HAL_RCC_LPTIM3_CONFIG(RCC_LPTIM3CLKSOURCE_D3PCLK1);
 8009a10:	4b0f      	ldr	r3, [pc, #60]	; (8009a50 <LPTIM_Disable+0x240>)
 8009a12:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8009a14:	4a0e      	ldr	r2, [pc, #56]	; (8009a50 <LPTIM_Disable+0x240>)
 8009a16:	f423 4360 	bic.w	r3, r3, #57344	; 0xe000
 8009a1a:	6593      	str	r3, [r2, #88]	; 0x58
        break;
 8009a1c:	e01b      	b.n	8009a56 <LPTIM_Disable+0x246>
        __HAL_RCC_LPTIM4_CONFIG(RCC_LPTIM4CLKSOURCE_D3PCLK1);
 8009a1e:	4b0c      	ldr	r3, [pc, #48]	; (8009a50 <LPTIM_Disable+0x240>)
 8009a20:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8009a22:	4a0b      	ldr	r2, [pc, #44]	; (8009a50 <LPTIM_Disable+0x240>)
 8009a24:	f423 4360 	bic.w	r3, r3, #57344	; 0xe000
 8009a28:	6593      	str	r3, [r2, #88]	; 0x58
        break;
 8009a2a:	e014      	b.n	8009a56 <LPTIM_Disable+0x246>
        __HAL_RCC_LPTIM5_CONFIG(RCC_LPTIM5CLKSOURCE_D3PCLK1);
 8009a2c:	4b08      	ldr	r3, [pc, #32]	; (8009a50 <LPTIM_Disable+0x240>)
 8009a2e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8009a30:	4a07      	ldr	r2, [pc, #28]	; (8009a50 <LPTIM_Disable+0x240>)
 8009a32:	f423 4360 	bic.w	r3, r3, #57344	; 0xe000
 8009a36:	6593      	str	r3, [r2, #88]	; 0x58
        break;
 8009a38:	e00d      	b.n	8009a56 <LPTIM_Disable+0x246>
 8009a3a:	bf00      	nop
 8009a3c:	58003000 	.word	0x58003000
 8009a40:	58002c00 	.word	0x58002c00
 8009a44:	58002800 	.word	0x58002800
 8009a48:	40002400 	.word	0x40002400
 8009a4c:	58002400 	.word	0x58002400
 8009a50:	58024400 	.word	0x58024400
        break;
 8009a54:	bf00      	nop
    }

    if (tmpCMP != 0UL)
 8009a56:	69fb      	ldr	r3, [r7, #28]
 8009a58:	2b00      	cmp	r3, #0
 8009a5a:	d01a      	beq.n	8009a92 <LPTIM_Disable+0x282>
    {
      /* Restore CMP register (LPTIM should be enabled first) */
      hlptim->Instance->CR |= LPTIM_CR_ENABLE;
 8009a5c:	687b      	ldr	r3, [r7, #4]
 8009a5e:	681b      	ldr	r3, [r3, #0]
 8009a60:	691a      	ldr	r2, [r3, #16]
 8009a62:	687b      	ldr	r3, [r7, #4]
 8009a64:	681b      	ldr	r3, [r3, #0]
 8009a66:	f042 0201 	orr.w	r2, r2, #1
 8009a6a:	611a      	str	r2, [r3, #16]
      hlptim->Instance->CMP = tmpCMP;
 8009a6c:	687b      	ldr	r3, [r7, #4]
 8009a6e:	681b      	ldr	r3, [r3, #0]
 8009a70:	69fa      	ldr	r2, [r7, #28]
 8009a72:	615a      	str	r2, [r3, #20]

      /* Wait for the completion of the write operation to the LPTIM_CMP register */
      if (LPTIM_WaitForFlag(hlptim, LPTIM_FLAG_CMPOK) == HAL_TIMEOUT)
 8009a74:	2108      	movs	r1, #8
 8009a76:	6878      	ldr	r0, [r7, #4]
 8009a78:	f7ff fe9a 	bl	80097b0 <LPTIM_WaitForFlag>
 8009a7c:	4603      	mov	r3, r0
 8009a7e:	2b03      	cmp	r3, #3
 8009a80:	d103      	bne.n	8009a8a <LPTIM_Disable+0x27a>
      {
        hlptim->State = HAL_LPTIM_STATE_TIMEOUT;
 8009a82:	687b      	ldr	r3, [r7, #4]
 8009a84:	2203      	movs	r2, #3
 8009a86:	f883 2036 	strb.w	r2, [r3, #54]	; 0x36
      }
      __HAL_LPTIM_CLEAR_FLAG(hlptim, LPTIM_FLAG_CMPOK);
 8009a8a:	687b      	ldr	r3, [r7, #4]
 8009a8c:	681b      	ldr	r3, [r3, #0]
 8009a8e:	2208      	movs	r2, #8
 8009a90:	605a      	str	r2, [r3, #4]
    }

    if (tmpARR != 0UL)
 8009a92:	69bb      	ldr	r3, [r7, #24]
 8009a94:	2b00      	cmp	r3, #0
 8009a96:	d01a      	beq.n	8009ace <LPTIM_Disable+0x2be>
    {
      /* Restore ARR register (LPTIM should be enabled first) */
      hlptim->Instance->CR |= LPTIM_CR_ENABLE;
 8009a98:	687b      	ldr	r3, [r7, #4]
 8009a9a:	681b      	ldr	r3, [r3, #0]
 8009a9c:	691a      	ldr	r2, [r3, #16]
 8009a9e:	687b      	ldr	r3, [r7, #4]
 8009aa0:	681b      	ldr	r3, [r3, #0]
 8009aa2:	f042 0201 	orr.w	r2, r2, #1
 8009aa6:	611a      	str	r2, [r3, #16]
      hlptim->Instance->ARR = tmpARR;
 8009aa8:	687b      	ldr	r3, [r7, #4]
 8009aaa:	681b      	ldr	r3, [r3, #0]
 8009aac:	69ba      	ldr	r2, [r7, #24]
 8009aae:	619a      	str	r2, [r3, #24]

      /* Wait for the completion of the write operation to the LPTIM_ARR register */
      if (LPTIM_WaitForFlag(hlptim, LPTIM_FLAG_ARROK) == HAL_TIMEOUT)
 8009ab0:	2110      	movs	r1, #16
 8009ab2:	6878      	ldr	r0, [r7, #4]
 8009ab4:	f7ff fe7c 	bl	80097b0 <LPTIM_WaitForFlag>
 8009ab8:	4603      	mov	r3, r0
 8009aba:	2b03      	cmp	r3, #3
 8009abc:	d103      	bne.n	8009ac6 <LPTIM_Disable+0x2b6>
      {
        hlptim->State = HAL_LPTIM_STATE_TIMEOUT;
 8009abe:	687b      	ldr	r3, [r7, #4]
 8009ac0:	2203      	movs	r2, #3
 8009ac2:	f883 2036 	strb.w	r2, [r3, #54]	; 0x36
      }

      __HAL_LPTIM_CLEAR_FLAG(hlptim, LPTIM_FLAG_ARROK);
 8009ac6:	687b      	ldr	r3, [r7, #4]
 8009ac8:	681b      	ldr	r3, [r3, #0]
 8009aca:	2210      	movs	r2, #16
 8009acc:	605a      	str	r2, [r3, #4]
    }

    /* Restore LPTIM source kernel clock */
    switch ((uint32_t)hlptim->Instance)
 8009ace:	687b      	ldr	r3, [r7, #4]
 8009ad0:	681b      	ldr	r3, [r3, #0]
 8009ad2:	4a32      	ldr	r2, [pc, #200]	; (8009b9c <LPTIM_Disable+0x38c>)
 8009ad4:	4293      	cmp	r3, r2
 8009ad6:	d039      	beq.n	8009b4c <LPTIM_Disable+0x33c>
 8009ad8:	4a30      	ldr	r2, [pc, #192]	; (8009b9c <LPTIM_Disable+0x38c>)
 8009ada:	4293      	cmp	r3, r2
 8009adc:	d83f      	bhi.n	8009b5e <LPTIM_Disable+0x34e>
 8009ade:	4a30      	ldr	r2, [pc, #192]	; (8009ba0 <LPTIM_Disable+0x390>)
 8009ae0:	4293      	cmp	r3, r2
 8009ae2:	d02a      	beq.n	8009b3a <LPTIM_Disable+0x32a>
 8009ae4:	4a2e      	ldr	r2, [pc, #184]	; (8009ba0 <LPTIM_Disable+0x390>)
 8009ae6:	4293      	cmp	r3, r2
 8009ae8:	d839      	bhi.n	8009b5e <LPTIM_Disable+0x34e>
 8009aea:	4a2e      	ldr	r2, [pc, #184]	; (8009ba4 <LPTIM_Disable+0x394>)
 8009aec:	4293      	cmp	r3, r2
 8009aee:	d01b      	beq.n	8009b28 <LPTIM_Disable+0x318>
 8009af0:	4a2c      	ldr	r2, [pc, #176]	; (8009ba4 <LPTIM_Disable+0x394>)
 8009af2:	4293      	cmp	r3, r2
 8009af4:	d833      	bhi.n	8009b5e <LPTIM_Disable+0x34e>
 8009af6:	4a2c      	ldr	r2, [pc, #176]	; (8009ba8 <LPTIM_Disable+0x398>)
 8009af8:	4293      	cmp	r3, r2
 8009afa:	d003      	beq.n	8009b04 <LPTIM_Disable+0x2f4>
 8009afc:	4a2b      	ldr	r2, [pc, #172]	; (8009bac <LPTIM_Disable+0x39c>)
 8009afe:	4293      	cmp	r3, r2
 8009b00:	d009      	beq.n	8009b16 <LPTIM_Disable+0x306>
      case LPTIM5_BASE:
        __HAL_RCC_LPTIM5_CONFIG(tmpclksource);
        break;
#endif /* LPTIM5 */
      default:
        break;
 8009b02:	e02c      	b.n	8009b5e <LPTIM_Disable+0x34e>
        __HAL_RCC_LPTIM1_CONFIG(tmpclksource);
 8009b04:	4b2a      	ldr	r3, [pc, #168]	; (8009bb0 <LPTIM_Disable+0x3a0>)
 8009b06:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8009b08:	f023 42e0 	bic.w	r2, r3, #1879048192	; 0x70000000
 8009b0c:	4928      	ldr	r1, [pc, #160]	; (8009bb0 <LPTIM_Disable+0x3a0>)
 8009b0e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009b10:	4313      	orrs	r3, r2
 8009b12:	654b      	str	r3, [r1, #84]	; 0x54
        break;
 8009b14:	e024      	b.n	8009b60 <LPTIM_Disable+0x350>
        __HAL_RCC_LPTIM2_CONFIG(tmpclksource);
 8009b16:	4b26      	ldr	r3, [pc, #152]	; (8009bb0 <LPTIM_Disable+0x3a0>)
 8009b18:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8009b1a:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8009b1e:	4924      	ldr	r1, [pc, #144]	; (8009bb0 <LPTIM_Disable+0x3a0>)
 8009b20:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009b22:	4313      	orrs	r3, r2
 8009b24:	658b      	str	r3, [r1, #88]	; 0x58
        break;
 8009b26:	e01b      	b.n	8009b60 <LPTIM_Disable+0x350>
        __HAL_RCC_LPTIM3_CONFIG(tmpclksource);
 8009b28:	4b21      	ldr	r3, [pc, #132]	; (8009bb0 <LPTIM_Disable+0x3a0>)
 8009b2a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8009b2c:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8009b30:	491f      	ldr	r1, [pc, #124]	; (8009bb0 <LPTIM_Disable+0x3a0>)
 8009b32:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009b34:	4313      	orrs	r3, r2
 8009b36:	658b      	str	r3, [r1, #88]	; 0x58
        break;
 8009b38:	e012      	b.n	8009b60 <LPTIM_Disable+0x350>
        __HAL_RCC_LPTIM4_CONFIG(tmpclksource);
 8009b3a:	4b1d      	ldr	r3, [pc, #116]	; (8009bb0 <LPTIM_Disable+0x3a0>)
 8009b3c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8009b3e:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8009b42:	491b      	ldr	r1, [pc, #108]	; (8009bb0 <LPTIM_Disable+0x3a0>)
 8009b44:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009b46:	4313      	orrs	r3, r2
 8009b48:	658b      	str	r3, [r1, #88]	; 0x58
        break;
 8009b4a:	e009      	b.n	8009b60 <LPTIM_Disable+0x350>
        __HAL_RCC_LPTIM5_CONFIG(tmpclksource);
 8009b4c:	4b18      	ldr	r3, [pc, #96]	; (8009bb0 <LPTIM_Disable+0x3a0>)
 8009b4e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8009b50:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8009b54:	4916      	ldr	r1, [pc, #88]	; (8009bb0 <LPTIM_Disable+0x3a0>)
 8009b56:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009b58:	4313      	orrs	r3, r2
 8009b5a:	658b      	str	r3, [r1, #88]	; 0x58
        break;
 8009b5c:	e000      	b.n	8009b60 <LPTIM_Disable+0x350>
        break;
 8009b5e:	bf00      	nop
    }
  }

  /* Restore configuration registers (LPTIM should be disabled first) */
  hlptim->Instance->CR &= ~(LPTIM_CR_ENABLE);
 8009b60:	687b      	ldr	r3, [r7, #4]
 8009b62:	681b      	ldr	r3, [r3, #0]
 8009b64:	691a      	ldr	r2, [r3, #16]
 8009b66:	687b      	ldr	r3, [r7, #4]
 8009b68:	681b      	ldr	r3, [r3, #0]
 8009b6a:	f022 0201 	bic.w	r2, r2, #1
 8009b6e:	611a      	str	r2, [r3, #16]
  hlptim->Instance->IER = tmpIER;
 8009b70:	687b      	ldr	r3, [r7, #4]
 8009b72:	681b      	ldr	r3, [r3, #0]
 8009b74:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8009b76:	609a      	str	r2, [r3, #8]
  hlptim->Instance->CFGR = tmpCFGR;
 8009b78:	687b      	ldr	r3, [r7, #4]
 8009b7a:	681b      	ldr	r3, [r3, #0]
 8009b7c:	6a3a      	ldr	r2, [r7, #32]
 8009b7e:	60da      	str	r2, [r3, #12]
  hlptim->Instance->CFGR2 = tmpCFGR2;
 8009b80:	687b      	ldr	r3, [r7, #4]
 8009b82:	681b      	ldr	r3, [r3, #0]
 8009b84:	697a      	ldr	r2, [r7, #20]
 8009b86:	625a      	str	r2, [r3, #36]	; 0x24
 8009b88:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009b8a:	60bb      	str	r3, [r7, #8]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8009b8c:	68bb      	ldr	r3, [r7, #8]
 8009b8e:	f383 8810 	msr	PRIMASK, r3
}
 8009b92:	bf00      	nop

  /* Exit critical section: restore previous priority mask */
  __set_PRIMASK(primask_bit);
}
 8009b94:	bf00      	nop
 8009b96:	3730      	adds	r7, #48	; 0x30
 8009b98:	46bd      	mov	sp, r7
 8009b9a:	bd80      	pop	{r7, pc}
 8009b9c:	58003000 	.word	0x58003000
 8009ba0:	58002c00 	.word	0x58002c00
 8009ba4:	58002800 	.word	0x58002800
 8009ba8:	40002400 	.word	0x40002400
 8009bac:	58002400 	.word	0x58002400
 8009bb0:	58024400 	.word	0x58024400

08009bb4 <HAL_PWR_EnableBkUpAccess>:
  * @note   If the HSE divided by 2, 3, ..31 is used as the RTC clock, the
  *         Backup Domain Access should be kept enabled.
  * @retval None.
  */
void HAL_PWR_EnableBkUpAccess (void)
{
 8009bb4:	b480      	push	{r7}
 8009bb6:	af00      	add	r7, sp, #0
  /* Enable access to RTC and backup registers */
  SET_BIT (PWR->CR1, PWR_CR1_DBP);
 8009bb8:	4b05      	ldr	r3, [pc, #20]	; (8009bd0 <HAL_PWR_EnableBkUpAccess+0x1c>)
 8009bba:	681b      	ldr	r3, [r3, #0]
 8009bbc:	4a04      	ldr	r2, [pc, #16]	; (8009bd0 <HAL_PWR_EnableBkUpAccess+0x1c>)
 8009bbe:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8009bc2:	6013      	str	r3, [r2, #0]
}
 8009bc4:	bf00      	nop
 8009bc6:	46bd      	mov	sp, r7
 8009bc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009bcc:	4770      	bx	lr
 8009bce:	bf00      	nop
 8009bd0:	58024800 	.word	0x58024800

08009bd4 <HAL_PWREx_ConfigSupply>:
  *         PWR_SMPS_2V5_SUPPLIES_EXT are used only for lines that supports SMPS
  *         regulator.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply (uint32_t SupplySource)
{
 8009bd4:	b580      	push	{r7, lr}
 8009bd6:	b084      	sub	sp, #16
 8009bd8:	af00      	add	r7, sp, #0
 8009bda:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param (IS_PWR_SUPPLY (SupplySource));

  /* Check if supply source was configured */
#if defined (PWR_FLAG_SCUEN)
  if (__HAL_PWR_GET_FLAG (PWR_FLAG_SCUEN) == 0U)
 8009bdc:	4b19      	ldr	r3, [pc, #100]	; (8009c44 <HAL_PWREx_ConfigSupply+0x70>)
 8009bde:	68db      	ldr	r3, [r3, #12]
 8009be0:	f003 0304 	and.w	r3, r3, #4
 8009be4:	2b04      	cmp	r3, #4
 8009be6:	d00a      	beq.n	8009bfe <HAL_PWREx_ConfigSupply+0x2a>
#else
  if ((PWR->CR3 & (PWR_CR3_SMPSEN | PWR_CR3_LDOEN | PWR_CR3_BYPASS)) != (PWR_CR3_SMPSEN | PWR_CR3_LDOEN))
#endif /* defined (PWR_FLAG_SCUEN) */
  {
    /* Check supply configuration */
    if ((PWR->CR3 & PWR_SUPPLY_CONFIG_MASK) != SupplySource)
 8009be8:	4b16      	ldr	r3, [pc, #88]	; (8009c44 <HAL_PWREx_ConfigSupply+0x70>)
 8009bea:	68db      	ldr	r3, [r3, #12]
 8009bec:	f003 0307 	and.w	r3, r3, #7
 8009bf0:	687a      	ldr	r2, [r7, #4]
 8009bf2:	429a      	cmp	r2, r3
 8009bf4:	d001      	beq.n	8009bfa <HAL_PWREx_ConfigSupply+0x26>
    {
      /* Supply configuration update locked, can't apply a new supply config */
      return HAL_ERROR;
 8009bf6:	2301      	movs	r3, #1
 8009bf8:	e01f      	b.n	8009c3a <HAL_PWREx_ConfigSupply+0x66>
    else
    {
      /* Supply configuration update locked, but new supply configuration
         matches with old supply configuration : nothing to do
      */
      return HAL_OK;
 8009bfa:	2300      	movs	r3, #0
 8009bfc:	e01d      	b.n	8009c3a <HAL_PWREx_ConfigSupply+0x66>
    }
  }

  /* Set the power supply configuration */
  MODIFY_REG (PWR->CR3, PWR_SUPPLY_CONFIG_MASK, SupplySource);
 8009bfe:	4b11      	ldr	r3, [pc, #68]	; (8009c44 <HAL_PWREx_ConfigSupply+0x70>)
 8009c00:	68db      	ldr	r3, [r3, #12]
 8009c02:	f023 0207 	bic.w	r2, r3, #7
 8009c06:	490f      	ldr	r1, [pc, #60]	; (8009c44 <HAL_PWREx_ConfigSupply+0x70>)
 8009c08:	687b      	ldr	r3, [r7, #4]
 8009c0a:	4313      	orrs	r3, r2
 8009c0c:	60cb      	str	r3, [r1, #12]

  /* Get tick */
  tickstart = HAL_GetTick ();
 8009c0e:	f7fa fa7f 	bl	8004110 <HAL_GetTick>
 8009c12:	60f8      	str	r0, [r7, #12]

  /* Wait till voltage level flag is set */
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8009c14:	e009      	b.n	8009c2a <HAL_PWREx_ConfigSupply+0x56>
  {
    if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 8009c16:	f7fa fa7b 	bl	8004110 <HAL_GetTick>
 8009c1a:	4602      	mov	r2, r0
 8009c1c:	68fb      	ldr	r3, [r7, #12]
 8009c1e:	1ad3      	subs	r3, r2, r3
 8009c20:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8009c24:	d901      	bls.n	8009c2a <HAL_PWREx_ConfigSupply+0x56>
    {
      return HAL_ERROR;
 8009c26:	2301      	movs	r3, #1
 8009c28:	e007      	b.n	8009c3a <HAL_PWREx_ConfigSupply+0x66>
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8009c2a:	4b06      	ldr	r3, [pc, #24]	; (8009c44 <HAL_PWREx_ConfigSupply+0x70>)
 8009c2c:	685b      	ldr	r3, [r3, #4]
 8009c2e:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8009c32:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8009c36:	d1ee      	bne.n	8009c16 <HAL_PWREx_ConfigSupply+0x42>
      }
    }
  }
#endif /* defined (SMPS) */

  return HAL_OK;
 8009c38:	2300      	movs	r3, #0
}
 8009c3a:	4618      	mov	r0, r3
 8009c3c:	3710      	adds	r7, #16
 8009c3e:	46bd      	mov	sp, r7
 8009c40:	bd80      	pop	{r7, pc}
 8009c42:	bf00      	nop
 8009c44:	58024800 	.word	0x58024800

08009c48 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8009c48:	b580      	push	{r7, lr}
 8009c4a:	b08c      	sub	sp, #48	; 0x30
 8009c4c:	af00      	add	r7, sp, #0
 8009c4e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp1_pllckcfg, temp2_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8009c50:	687b      	ldr	r3, [r7, #4]
 8009c52:	2b00      	cmp	r3, #0
 8009c54:	d102      	bne.n	8009c5c <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 8009c56:	2301      	movs	r3, #1
 8009c58:	f000 bc48 	b.w	800a4ec <HAL_RCC_OscConfig+0x8a4>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8009c5c:	687b      	ldr	r3, [r7, #4]
 8009c5e:	681b      	ldr	r3, [r3, #0]
 8009c60:	f003 0301 	and.w	r3, r3, #1
 8009c64:	2b00      	cmp	r3, #0
 8009c66:	f000 8088 	beq.w	8009d7a <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8009c6a:	4b99      	ldr	r3, [pc, #612]	; (8009ed0 <HAL_RCC_OscConfig+0x288>)
 8009c6c:	691b      	ldr	r3, [r3, #16]
 8009c6e:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8009c72:	62fb      	str	r3, [r7, #44]	; 0x2c
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8009c74:	4b96      	ldr	r3, [pc, #600]	; (8009ed0 <HAL_RCC_OscConfig+0x288>)
 8009c76:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009c78:	62bb      	str	r3, [r7, #40]	; 0x28
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
 8009c7a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009c7c:	2b10      	cmp	r3, #16
 8009c7e:	d007      	beq.n	8009c90 <HAL_RCC_OscConfig+0x48>
 8009c80:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009c82:	2b18      	cmp	r3, #24
 8009c84:	d111      	bne.n	8009caa <HAL_RCC_OscConfig+0x62>
 8009c86:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009c88:	f003 0303 	and.w	r3, r3, #3
 8009c8c:	2b02      	cmp	r3, #2
 8009c8e:	d10c      	bne.n	8009caa <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8009c90:	4b8f      	ldr	r3, [pc, #572]	; (8009ed0 <HAL_RCC_OscConfig+0x288>)
 8009c92:	681b      	ldr	r3, [r3, #0]
 8009c94:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8009c98:	2b00      	cmp	r3, #0
 8009c9a:	d06d      	beq.n	8009d78 <HAL_RCC_OscConfig+0x130>
 8009c9c:	687b      	ldr	r3, [r7, #4]
 8009c9e:	685b      	ldr	r3, [r3, #4]
 8009ca0:	2b00      	cmp	r3, #0
 8009ca2:	d169      	bne.n	8009d78 <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 8009ca4:	2301      	movs	r3, #1
 8009ca6:	f000 bc21 	b.w	800a4ec <HAL_RCC_OscConfig+0x8a4>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8009caa:	687b      	ldr	r3, [r7, #4]
 8009cac:	685b      	ldr	r3, [r3, #4]
 8009cae:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8009cb2:	d106      	bne.n	8009cc2 <HAL_RCC_OscConfig+0x7a>
 8009cb4:	4b86      	ldr	r3, [pc, #536]	; (8009ed0 <HAL_RCC_OscConfig+0x288>)
 8009cb6:	681b      	ldr	r3, [r3, #0]
 8009cb8:	4a85      	ldr	r2, [pc, #532]	; (8009ed0 <HAL_RCC_OscConfig+0x288>)
 8009cba:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8009cbe:	6013      	str	r3, [r2, #0]
 8009cc0:	e02e      	b.n	8009d20 <HAL_RCC_OscConfig+0xd8>
 8009cc2:	687b      	ldr	r3, [r7, #4]
 8009cc4:	685b      	ldr	r3, [r3, #4]
 8009cc6:	2b00      	cmp	r3, #0
 8009cc8:	d10c      	bne.n	8009ce4 <HAL_RCC_OscConfig+0x9c>
 8009cca:	4b81      	ldr	r3, [pc, #516]	; (8009ed0 <HAL_RCC_OscConfig+0x288>)
 8009ccc:	681b      	ldr	r3, [r3, #0]
 8009cce:	4a80      	ldr	r2, [pc, #512]	; (8009ed0 <HAL_RCC_OscConfig+0x288>)
 8009cd0:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8009cd4:	6013      	str	r3, [r2, #0]
 8009cd6:	4b7e      	ldr	r3, [pc, #504]	; (8009ed0 <HAL_RCC_OscConfig+0x288>)
 8009cd8:	681b      	ldr	r3, [r3, #0]
 8009cda:	4a7d      	ldr	r2, [pc, #500]	; (8009ed0 <HAL_RCC_OscConfig+0x288>)
 8009cdc:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8009ce0:	6013      	str	r3, [r2, #0]
 8009ce2:	e01d      	b.n	8009d20 <HAL_RCC_OscConfig+0xd8>
 8009ce4:	687b      	ldr	r3, [r7, #4]
 8009ce6:	685b      	ldr	r3, [r3, #4]
 8009ce8:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8009cec:	d10c      	bne.n	8009d08 <HAL_RCC_OscConfig+0xc0>
 8009cee:	4b78      	ldr	r3, [pc, #480]	; (8009ed0 <HAL_RCC_OscConfig+0x288>)
 8009cf0:	681b      	ldr	r3, [r3, #0]
 8009cf2:	4a77      	ldr	r2, [pc, #476]	; (8009ed0 <HAL_RCC_OscConfig+0x288>)
 8009cf4:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8009cf8:	6013      	str	r3, [r2, #0]
 8009cfa:	4b75      	ldr	r3, [pc, #468]	; (8009ed0 <HAL_RCC_OscConfig+0x288>)
 8009cfc:	681b      	ldr	r3, [r3, #0]
 8009cfe:	4a74      	ldr	r2, [pc, #464]	; (8009ed0 <HAL_RCC_OscConfig+0x288>)
 8009d00:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8009d04:	6013      	str	r3, [r2, #0]
 8009d06:	e00b      	b.n	8009d20 <HAL_RCC_OscConfig+0xd8>
 8009d08:	4b71      	ldr	r3, [pc, #452]	; (8009ed0 <HAL_RCC_OscConfig+0x288>)
 8009d0a:	681b      	ldr	r3, [r3, #0]
 8009d0c:	4a70      	ldr	r2, [pc, #448]	; (8009ed0 <HAL_RCC_OscConfig+0x288>)
 8009d0e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8009d12:	6013      	str	r3, [r2, #0]
 8009d14:	4b6e      	ldr	r3, [pc, #440]	; (8009ed0 <HAL_RCC_OscConfig+0x288>)
 8009d16:	681b      	ldr	r3, [r3, #0]
 8009d18:	4a6d      	ldr	r2, [pc, #436]	; (8009ed0 <HAL_RCC_OscConfig+0x288>)
 8009d1a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8009d1e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8009d20:	687b      	ldr	r3, [r7, #4]
 8009d22:	685b      	ldr	r3, [r3, #4]
 8009d24:	2b00      	cmp	r3, #0
 8009d26:	d013      	beq.n	8009d50 <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8009d28:	f7fa f9f2 	bl	8004110 <HAL_GetTick>
 8009d2c:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8009d2e:	e008      	b.n	8009d42 <HAL_RCC_OscConfig+0xfa>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8009d30:	f7fa f9ee 	bl	8004110 <HAL_GetTick>
 8009d34:	4602      	mov	r2, r0
 8009d36:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009d38:	1ad3      	subs	r3, r2, r3
 8009d3a:	2b64      	cmp	r3, #100	; 0x64
 8009d3c:	d901      	bls.n	8009d42 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8009d3e:	2303      	movs	r3, #3
 8009d40:	e3d4      	b.n	800a4ec <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8009d42:	4b63      	ldr	r3, [pc, #396]	; (8009ed0 <HAL_RCC_OscConfig+0x288>)
 8009d44:	681b      	ldr	r3, [r3, #0]
 8009d46:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8009d4a:	2b00      	cmp	r3, #0
 8009d4c:	d0f0      	beq.n	8009d30 <HAL_RCC_OscConfig+0xe8>
 8009d4e:	e014      	b.n	8009d7a <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8009d50:	f7fa f9de 	bl	8004110 <HAL_GetTick>
 8009d54:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8009d56:	e008      	b.n	8009d6a <HAL_RCC_OscConfig+0x122>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8009d58:	f7fa f9da 	bl	8004110 <HAL_GetTick>
 8009d5c:	4602      	mov	r2, r0
 8009d5e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009d60:	1ad3      	subs	r3, r2, r3
 8009d62:	2b64      	cmp	r3, #100	; 0x64
 8009d64:	d901      	bls.n	8009d6a <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 8009d66:	2303      	movs	r3, #3
 8009d68:	e3c0      	b.n	800a4ec <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8009d6a:	4b59      	ldr	r3, [pc, #356]	; (8009ed0 <HAL_RCC_OscConfig+0x288>)
 8009d6c:	681b      	ldr	r3, [r3, #0]
 8009d6e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8009d72:	2b00      	cmp	r3, #0
 8009d74:	d1f0      	bne.n	8009d58 <HAL_RCC_OscConfig+0x110>
 8009d76:	e000      	b.n	8009d7a <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8009d78:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8009d7a:	687b      	ldr	r3, [r7, #4]
 8009d7c:	681b      	ldr	r3, [r3, #0]
 8009d7e:	f003 0302 	and.w	r3, r3, #2
 8009d82:	2b00      	cmp	r3, #0
 8009d84:	f000 80ca 	beq.w	8009f1c <HAL_RCC_OscConfig+0x2d4>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSICALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* When the HSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8009d88:	4b51      	ldr	r3, [pc, #324]	; (8009ed0 <HAL_RCC_OscConfig+0x288>)
 8009d8a:	691b      	ldr	r3, [r3, #16]
 8009d8c:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8009d90:	623b      	str	r3, [r7, #32]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8009d92:	4b4f      	ldr	r3, [pc, #316]	; (8009ed0 <HAL_RCC_OscConfig+0x288>)
 8009d94:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009d96:	61fb      	str	r3, [r7, #28]
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 8009d98:	6a3b      	ldr	r3, [r7, #32]
 8009d9a:	2b00      	cmp	r3, #0
 8009d9c:	d007      	beq.n	8009dae <HAL_RCC_OscConfig+0x166>
 8009d9e:	6a3b      	ldr	r3, [r7, #32]
 8009da0:	2b18      	cmp	r3, #24
 8009da2:	d156      	bne.n	8009e52 <HAL_RCC_OscConfig+0x20a>
 8009da4:	69fb      	ldr	r3, [r7, #28]
 8009da6:	f003 0303 	and.w	r3, r3, #3
 8009daa:	2b00      	cmp	r3, #0
 8009dac:	d151      	bne.n	8009e52 <HAL_RCC_OscConfig+0x20a>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8009dae:	4b48      	ldr	r3, [pc, #288]	; (8009ed0 <HAL_RCC_OscConfig+0x288>)
 8009db0:	681b      	ldr	r3, [r3, #0]
 8009db2:	f003 0304 	and.w	r3, r3, #4
 8009db6:	2b00      	cmp	r3, #0
 8009db8:	d005      	beq.n	8009dc6 <HAL_RCC_OscConfig+0x17e>
 8009dba:	687b      	ldr	r3, [r7, #4]
 8009dbc:	68db      	ldr	r3, [r3, #12]
 8009dbe:	2b00      	cmp	r3, #0
 8009dc0:	d101      	bne.n	8009dc6 <HAL_RCC_OscConfig+0x17e>
      {
        return HAL_ERROR;
 8009dc2:	2301      	movs	r3, #1
 8009dc4:	e392      	b.n	800a4ec <HAL_RCC_OscConfig+0x8a4>
      }
      /* Otherwise, only HSI division and calibration are allowed */
      else
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2, HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 8009dc6:	4b42      	ldr	r3, [pc, #264]	; (8009ed0 <HAL_RCC_OscConfig+0x288>)
 8009dc8:	681b      	ldr	r3, [r3, #0]
 8009dca:	f023 0219 	bic.w	r2, r3, #25
 8009dce:	687b      	ldr	r3, [r7, #4]
 8009dd0:	68db      	ldr	r3, [r3, #12]
 8009dd2:	493f      	ldr	r1, [pc, #252]	; (8009ed0 <HAL_RCC_OscConfig+0x288>)
 8009dd4:	4313      	orrs	r3, r2
 8009dd6:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8009dd8:	f7fa f99a 	bl	8004110 <HAL_GetTick>
 8009ddc:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8009dde:	e008      	b.n	8009df2 <HAL_RCC_OscConfig+0x1aa>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8009de0:	f7fa f996 	bl	8004110 <HAL_GetTick>
 8009de4:	4602      	mov	r2, r0
 8009de6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009de8:	1ad3      	subs	r3, r2, r3
 8009dea:	2b02      	cmp	r3, #2
 8009dec:	d901      	bls.n	8009df2 <HAL_RCC_OscConfig+0x1aa>
          {
            return HAL_TIMEOUT;
 8009dee:	2303      	movs	r3, #3
 8009df0:	e37c      	b.n	800a4ec <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8009df2:	4b37      	ldr	r3, [pc, #220]	; (8009ed0 <HAL_RCC_OscConfig+0x288>)
 8009df4:	681b      	ldr	r3, [r3, #0]
 8009df6:	f003 0304 	and.w	r3, r3, #4
 8009dfa:	2b00      	cmp	r3, #0
 8009dfc:	d0f0      	beq.n	8009de0 <HAL_RCC_OscConfig+0x198>
          }
        }
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8009dfe:	f7fa f9b7 	bl	8004170 <HAL_GetREVID>
 8009e02:	4603      	mov	r3, r0
 8009e04:	f241 0203 	movw	r2, #4099	; 0x1003
 8009e08:	4293      	cmp	r3, r2
 8009e0a:	d817      	bhi.n	8009e3c <HAL_RCC_OscConfig+0x1f4>
 8009e0c:	687b      	ldr	r3, [r7, #4]
 8009e0e:	691b      	ldr	r3, [r3, #16]
 8009e10:	2b40      	cmp	r3, #64	; 0x40
 8009e12:	d108      	bne.n	8009e26 <HAL_RCC_OscConfig+0x1de>
 8009e14:	4b2e      	ldr	r3, [pc, #184]	; (8009ed0 <HAL_RCC_OscConfig+0x288>)
 8009e16:	685b      	ldr	r3, [r3, #4]
 8009e18:	f423 337c 	bic.w	r3, r3, #258048	; 0x3f000
 8009e1c:	4a2c      	ldr	r2, [pc, #176]	; (8009ed0 <HAL_RCC_OscConfig+0x288>)
 8009e1e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8009e22:	6053      	str	r3, [r2, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8009e24:	e07a      	b.n	8009f1c <HAL_RCC_OscConfig+0x2d4>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8009e26:	4b2a      	ldr	r3, [pc, #168]	; (8009ed0 <HAL_RCC_OscConfig+0x288>)
 8009e28:	685b      	ldr	r3, [r3, #4]
 8009e2a:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 8009e2e:	687b      	ldr	r3, [r7, #4]
 8009e30:	691b      	ldr	r3, [r3, #16]
 8009e32:	031b      	lsls	r3, r3, #12
 8009e34:	4926      	ldr	r1, [pc, #152]	; (8009ed0 <HAL_RCC_OscConfig+0x288>)
 8009e36:	4313      	orrs	r3, r2
 8009e38:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8009e3a:	e06f      	b.n	8009f1c <HAL_RCC_OscConfig+0x2d4>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8009e3c:	4b24      	ldr	r3, [pc, #144]	; (8009ed0 <HAL_RCC_OscConfig+0x288>)
 8009e3e:	685b      	ldr	r3, [r3, #4]
 8009e40:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8009e44:	687b      	ldr	r3, [r7, #4]
 8009e46:	691b      	ldr	r3, [r3, #16]
 8009e48:	061b      	lsls	r3, r3, #24
 8009e4a:	4921      	ldr	r1, [pc, #132]	; (8009ed0 <HAL_RCC_OscConfig+0x288>)
 8009e4c:	4313      	orrs	r3, r2
 8009e4e:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8009e50:	e064      	b.n	8009f1c <HAL_RCC_OscConfig+0x2d4>
    }

    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8009e52:	687b      	ldr	r3, [r7, #4]
 8009e54:	68db      	ldr	r3, [r3, #12]
 8009e56:	2b00      	cmp	r3, #0
 8009e58:	d047      	beq.n	8009eea <HAL_RCC_OscConfig+0x2a2>
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2,HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 8009e5a:	4b1d      	ldr	r3, [pc, #116]	; (8009ed0 <HAL_RCC_OscConfig+0x288>)
 8009e5c:	681b      	ldr	r3, [r3, #0]
 8009e5e:	f023 0219 	bic.w	r2, r3, #25
 8009e62:	687b      	ldr	r3, [r7, #4]
 8009e64:	68db      	ldr	r3, [r3, #12]
 8009e66:	491a      	ldr	r1, [pc, #104]	; (8009ed0 <HAL_RCC_OscConfig+0x288>)
 8009e68:	4313      	orrs	r3, r2
 8009e6a:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8009e6c:	f7fa f950 	bl	8004110 <HAL_GetTick>
 8009e70:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8009e72:	e008      	b.n	8009e86 <HAL_RCC_OscConfig+0x23e>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8009e74:	f7fa f94c 	bl	8004110 <HAL_GetTick>
 8009e78:	4602      	mov	r2, r0
 8009e7a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009e7c:	1ad3      	subs	r3, r2, r3
 8009e7e:	2b02      	cmp	r3, #2
 8009e80:	d901      	bls.n	8009e86 <HAL_RCC_OscConfig+0x23e>
          {
            return HAL_TIMEOUT;
 8009e82:	2303      	movs	r3, #3
 8009e84:	e332      	b.n	800a4ec <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8009e86:	4b12      	ldr	r3, [pc, #72]	; (8009ed0 <HAL_RCC_OscConfig+0x288>)
 8009e88:	681b      	ldr	r3, [r3, #0]
 8009e8a:	f003 0304 	and.w	r3, r3, #4
 8009e8e:	2b00      	cmp	r3, #0
 8009e90:	d0f0      	beq.n	8009e74 <HAL_RCC_OscConfig+0x22c>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8009e92:	f7fa f96d 	bl	8004170 <HAL_GetREVID>
 8009e96:	4603      	mov	r3, r0
 8009e98:	f241 0203 	movw	r2, #4099	; 0x1003
 8009e9c:	4293      	cmp	r3, r2
 8009e9e:	d819      	bhi.n	8009ed4 <HAL_RCC_OscConfig+0x28c>
 8009ea0:	687b      	ldr	r3, [r7, #4]
 8009ea2:	691b      	ldr	r3, [r3, #16]
 8009ea4:	2b40      	cmp	r3, #64	; 0x40
 8009ea6:	d108      	bne.n	8009eba <HAL_RCC_OscConfig+0x272>
 8009ea8:	4b09      	ldr	r3, [pc, #36]	; (8009ed0 <HAL_RCC_OscConfig+0x288>)
 8009eaa:	685b      	ldr	r3, [r3, #4]
 8009eac:	f423 337c 	bic.w	r3, r3, #258048	; 0x3f000
 8009eb0:	4a07      	ldr	r2, [pc, #28]	; (8009ed0 <HAL_RCC_OscConfig+0x288>)
 8009eb2:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8009eb6:	6053      	str	r3, [r2, #4]
 8009eb8:	e030      	b.n	8009f1c <HAL_RCC_OscConfig+0x2d4>
 8009eba:	4b05      	ldr	r3, [pc, #20]	; (8009ed0 <HAL_RCC_OscConfig+0x288>)
 8009ebc:	685b      	ldr	r3, [r3, #4]
 8009ebe:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 8009ec2:	687b      	ldr	r3, [r7, #4]
 8009ec4:	691b      	ldr	r3, [r3, #16]
 8009ec6:	031b      	lsls	r3, r3, #12
 8009ec8:	4901      	ldr	r1, [pc, #4]	; (8009ed0 <HAL_RCC_OscConfig+0x288>)
 8009eca:	4313      	orrs	r3, r2
 8009ecc:	604b      	str	r3, [r1, #4]
 8009ece:	e025      	b.n	8009f1c <HAL_RCC_OscConfig+0x2d4>
 8009ed0:	58024400 	.word	0x58024400
 8009ed4:	4b9a      	ldr	r3, [pc, #616]	; (800a140 <HAL_RCC_OscConfig+0x4f8>)
 8009ed6:	685b      	ldr	r3, [r3, #4]
 8009ed8:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8009edc:	687b      	ldr	r3, [r7, #4]
 8009ede:	691b      	ldr	r3, [r3, #16]
 8009ee0:	061b      	lsls	r3, r3, #24
 8009ee2:	4997      	ldr	r1, [pc, #604]	; (800a140 <HAL_RCC_OscConfig+0x4f8>)
 8009ee4:	4313      	orrs	r3, r2
 8009ee6:	604b      	str	r3, [r1, #4]
 8009ee8:	e018      	b.n	8009f1c <HAL_RCC_OscConfig+0x2d4>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8009eea:	4b95      	ldr	r3, [pc, #596]	; (800a140 <HAL_RCC_OscConfig+0x4f8>)
 8009eec:	681b      	ldr	r3, [r3, #0]
 8009eee:	4a94      	ldr	r2, [pc, #592]	; (800a140 <HAL_RCC_OscConfig+0x4f8>)
 8009ef0:	f023 0301 	bic.w	r3, r3, #1
 8009ef4:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8009ef6:	f7fa f90b 	bl	8004110 <HAL_GetTick>
 8009efa:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8009efc:	e008      	b.n	8009f10 <HAL_RCC_OscConfig+0x2c8>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8009efe:	f7fa f907 	bl	8004110 <HAL_GetTick>
 8009f02:	4602      	mov	r2, r0
 8009f04:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009f06:	1ad3      	subs	r3, r2, r3
 8009f08:	2b02      	cmp	r3, #2
 8009f0a:	d901      	bls.n	8009f10 <HAL_RCC_OscConfig+0x2c8>
          {
            return HAL_TIMEOUT;
 8009f0c:	2303      	movs	r3, #3
 8009f0e:	e2ed      	b.n	800a4ec <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8009f10:	4b8b      	ldr	r3, [pc, #556]	; (800a140 <HAL_RCC_OscConfig+0x4f8>)
 8009f12:	681b      	ldr	r3, [r3, #0]
 8009f14:	f003 0304 	and.w	r3, r3, #4
 8009f18:	2b00      	cmp	r3, #0
 8009f1a:	d1f0      	bne.n	8009efe <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }
  }
  /*----------------------------- CSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 8009f1c:	687b      	ldr	r3, [r7, #4]
 8009f1e:	681b      	ldr	r3, [r3, #0]
 8009f20:	f003 0310 	and.w	r3, r3, #16
 8009f24:	2b00      	cmp	r3, #0
 8009f26:	f000 80a9 	beq.w	800a07c <HAL_RCC_OscConfig+0x434>
    /* Check the parameters */
    assert_param(IS_RCC_CSI(RCC_OscInitStruct->CSIState));
    assert_param(IS_RCC_CSICALIBRATION_VALUE(RCC_OscInitStruct->CSICalibrationValue));

    /* When the CSI is used as system clock it will not disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8009f2a:	4b85      	ldr	r3, [pc, #532]	; (800a140 <HAL_RCC_OscConfig+0x4f8>)
 8009f2c:	691b      	ldr	r3, [r3, #16]
 8009f2e:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8009f32:	61bb      	str	r3, [r7, #24]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8009f34:	4b82      	ldr	r3, [pc, #520]	; (800a140 <HAL_RCC_OscConfig+0x4f8>)
 8009f36:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009f38:	617b      	str	r3, [r7, #20]
    if ((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
 8009f3a:	69bb      	ldr	r3, [r7, #24]
 8009f3c:	2b08      	cmp	r3, #8
 8009f3e:	d007      	beq.n	8009f50 <HAL_RCC_OscConfig+0x308>
 8009f40:	69bb      	ldr	r3, [r7, #24]
 8009f42:	2b18      	cmp	r3, #24
 8009f44:	d13a      	bne.n	8009fbc <HAL_RCC_OscConfig+0x374>
 8009f46:	697b      	ldr	r3, [r7, #20]
 8009f48:	f003 0303 	and.w	r3, r3, #3
 8009f4c:	2b01      	cmp	r3, #1
 8009f4e:	d135      	bne.n	8009fbc <HAL_RCC_OscConfig+0x374>
    {
      /* When CSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8009f50:	4b7b      	ldr	r3, [pc, #492]	; (800a140 <HAL_RCC_OscConfig+0x4f8>)
 8009f52:	681b      	ldr	r3, [r3, #0]
 8009f54:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8009f58:	2b00      	cmp	r3, #0
 8009f5a:	d005      	beq.n	8009f68 <HAL_RCC_OscConfig+0x320>
 8009f5c:	687b      	ldr	r3, [r7, #4]
 8009f5e:	69db      	ldr	r3, [r3, #28]
 8009f60:	2b80      	cmp	r3, #128	; 0x80
 8009f62:	d001      	beq.n	8009f68 <HAL_RCC_OscConfig+0x320>
      {
        return HAL_ERROR;
 8009f64:	2301      	movs	r3, #1
 8009f66:	e2c1      	b.n	800a4ec <HAL_RCC_OscConfig+0x8a4>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8009f68:	f7fa f902 	bl	8004170 <HAL_GetREVID>
 8009f6c:	4603      	mov	r3, r0
 8009f6e:	f241 0203 	movw	r2, #4099	; 0x1003
 8009f72:	4293      	cmp	r3, r2
 8009f74:	d817      	bhi.n	8009fa6 <HAL_RCC_OscConfig+0x35e>
 8009f76:	687b      	ldr	r3, [r7, #4]
 8009f78:	6a1b      	ldr	r3, [r3, #32]
 8009f7a:	2b20      	cmp	r3, #32
 8009f7c:	d108      	bne.n	8009f90 <HAL_RCC_OscConfig+0x348>
 8009f7e:	4b70      	ldr	r3, [pc, #448]	; (800a140 <HAL_RCC_OscConfig+0x4f8>)
 8009f80:	685b      	ldr	r3, [r3, #4]
 8009f82:	f023 43f8 	bic.w	r3, r3, #2080374784	; 0x7c000000
 8009f86:	4a6e      	ldr	r2, [pc, #440]	; (800a140 <HAL_RCC_OscConfig+0x4f8>)
 8009f88:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8009f8c:	6053      	str	r3, [r2, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8009f8e:	e075      	b.n	800a07c <HAL_RCC_OscConfig+0x434>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8009f90:	4b6b      	ldr	r3, [pc, #428]	; (800a140 <HAL_RCC_OscConfig+0x4f8>)
 8009f92:	685b      	ldr	r3, [r3, #4]
 8009f94:	f023 42f8 	bic.w	r2, r3, #2080374784	; 0x7c000000
 8009f98:	687b      	ldr	r3, [r7, #4]
 8009f9a:	6a1b      	ldr	r3, [r3, #32]
 8009f9c:	069b      	lsls	r3, r3, #26
 8009f9e:	4968      	ldr	r1, [pc, #416]	; (800a140 <HAL_RCC_OscConfig+0x4f8>)
 8009fa0:	4313      	orrs	r3, r2
 8009fa2:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8009fa4:	e06a      	b.n	800a07c <HAL_RCC_OscConfig+0x434>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8009fa6:	4b66      	ldr	r3, [pc, #408]	; (800a140 <HAL_RCC_OscConfig+0x4f8>)
 8009fa8:	68db      	ldr	r3, [r3, #12]
 8009faa:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 8009fae:	687b      	ldr	r3, [r7, #4]
 8009fb0:	6a1b      	ldr	r3, [r3, #32]
 8009fb2:	061b      	lsls	r3, r3, #24
 8009fb4:	4962      	ldr	r1, [pc, #392]	; (800a140 <HAL_RCC_OscConfig+0x4f8>)
 8009fb6:	4313      	orrs	r3, r2
 8009fb8:	60cb      	str	r3, [r1, #12]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8009fba:	e05f      	b.n	800a07c <HAL_RCC_OscConfig+0x434>
      }
    }
    else
    {
      /* Check the CSI State */
      if ((RCC_OscInitStruct->CSIState) != RCC_CSI_OFF)
 8009fbc:	687b      	ldr	r3, [r7, #4]
 8009fbe:	69db      	ldr	r3, [r3, #28]
 8009fc0:	2b00      	cmp	r3, #0
 8009fc2:	d042      	beq.n	800a04a <HAL_RCC_OscConfig+0x402>
      {
        /* Enable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_ENABLE();
 8009fc4:	4b5e      	ldr	r3, [pc, #376]	; (800a140 <HAL_RCC_OscConfig+0x4f8>)
 8009fc6:	681b      	ldr	r3, [r3, #0]
 8009fc8:	4a5d      	ldr	r2, [pc, #372]	; (800a140 <HAL_RCC_OscConfig+0x4f8>)
 8009fca:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8009fce:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8009fd0:	f7fa f89e 	bl	8004110 <HAL_GetTick>
 8009fd4:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8009fd6:	e008      	b.n	8009fea <HAL_RCC_OscConfig+0x3a2>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 8009fd8:	f7fa f89a 	bl	8004110 <HAL_GetTick>
 8009fdc:	4602      	mov	r2, r0
 8009fde:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009fe0:	1ad3      	subs	r3, r2, r3
 8009fe2:	2b02      	cmp	r3, #2
 8009fe4:	d901      	bls.n	8009fea <HAL_RCC_OscConfig+0x3a2>
          {
            return HAL_TIMEOUT;
 8009fe6:	2303      	movs	r3, #3
 8009fe8:	e280      	b.n	800a4ec <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8009fea:	4b55      	ldr	r3, [pc, #340]	; (800a140 <HAL_RCC_OscConfig+0x4f8>)
 8009fec:	681b      	ldr	r3, [r3, #0]
 8009fee:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8009ff2:	2b00      	cmp	r3, #0
 8009ff4:	d0f0      	beq.n	8009fd8 <HAL_RCC_OscConfig+0x390>
          }
        }

        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8009ff6:	f7fa f8bb 	bl	8004170 <HAL_GetREVID>
 8009ffa:	4603      	mov	r3, r0
 8009ffc:	f241 0203 	movw	r2, #4099	; 0x1003
 800a000:	4293      	cmp	r3, r2
 800a002:	d817      	bhi.n	800a034 <HAL_RCC_OscConfig+0x3ec>
 800a004:	687b      	ldr	r3, [r7, #4]
 800a006:	6a1b      	ldr	r3, [r3, #32]
 800a008:	2b20      	cmp	r3, #32
 800a00a:	d108      	bne.n	800a01e <HAL_RCC_OscConfig+0x3d6>
 800a00c:	4b4c      	ldr	r3, [pc, #304]	; (800a140 <HAL_RCC_OscConfig+0x4f8>)
 800a00e:	685b      	ldr	r3, [r3, #4]
 800a010:	f023 43f8 	bic.w	r3, r3, #2080374784	; 0x7c000000
 800a014:	4a4a      	ldr	r2, [pc, #296]	; (800a140 <HAL_RCC_OscConfig+0x4f8>)
 800a016:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800a01a:	6053      	str	r3, [r2, #4]
 800a01c:	e02e      	b.n	800a07c <HAL_RCC_OscConfig+0x434>
 800a01e:	4b48      	ldr	r3, [pc, #288]	; (800a140 <HAL_RCC_OscConfig+0x4f8>)
 800a020:	685b      	ldr	r3, [r3, #4]
 800a022:	f023 42f8 	bic.w	r2, r3, #2080374784	; 0x7c000000
 800a026:	687b      	ldr	r3, [r7, #4]
 800a028:	6a1b      	ldr	r3, [r3, #32]
 800a02a:	069b      	lsls	r3, r3, #26
 800a02c:	4944      	ldr	r1, [pc, #272]	; (800a140 <HAL_RCC_OscConfig+0x4f8>)
 800a02e:	4313      	orrs	r3, r2
 800a030:	604b      	str	r3, [r1, #4]
 800a032:	e023      	b.n	800a07c <HAL_RCC_OscConfig+0x434>
 800a034:	4b42      	ldr	r3, [pc, #264]	; (800a140 <HAL_RCC_OscConfig+0x4f8>)
 800a036:	68db      	ldr	r3, [r3, #12]
 800a038:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 800a03c:	687b      	ldr	r3, [r7, #4]
 800a03e:	6a1b      	ldr	r3, [r3, #32]
 800a040:	061b      	lsls	r3, r3, #24
 800a042:	493f      	ldr	r1, [pc, #252]	; (800a140 <HAL_RCC_OscConfig+0x4f8>)
 800a044:	4313      	orrs	r3, r2
 800a046:	60cb      	str	r3, [r1, #12]
 800a048:	e018      	b.n	800a07c <HAL_RCC_OscConfig+0x434>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_DISABLE();
 800a04a:	4b3d      	ldr	r3, [pc, #244]	; (800a140 <HAL_RCC_OscConfig+0x4f8>)
 800a04c:	681b      	ldr	r3, [r3, #0]
 800a04e:	4a3c      	ldr	r2, [pc, #240]	; (800a140 <HAL_RCC_OscConfig+0x4f8>)
 800a050:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800a054:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800a056:	f7fa f85b 	bl	8004110 <HAL_GetTick>
 800a05a:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 800a05c:	e008      	b.n	800a070 <HAL_RCC_OscConfig+0x428>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 800a05e:	f7fa f857 	bl	8004110 <HAL_GetTick>
 800a062:	4602      	mov	r2, r0
 800a064:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a066:	1ad3      	subs	r3, r2, r3
 800a068:	2b02      	cmp	r3, #2
 800a06a:	d901      	bls.n	800a070 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 800a06c:	2303      	movs	r3, #3
 800a06e:	e23d      	b.n	800a4ec <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 800a070:	4b33      	ldr	r3, [pc, #204]	; (800a140 <HAL_RCC_OscConfig+0x4f8>)
 800a072:	681b      	ldr	r3, [r3, #0]
 800a074:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800a078:	2b00      	cmp	r3, #0
 800a07a:	d1f0      	bne.n	800a05e <HAL_RCC_OscConfig+0x416>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800a07c:	687b      	ldr	r3, [r7, #4]
 800a07e:	681b      	ldr	r3, [r3, #0]
 800a080:	f003 0308 	and.w	r3, r3, #8
 800a084:	2b00      	cmp	r3, #0
 800a086:	d036      	beq.n	800a0f6 <HAL_RCC_OscConfig+0x4ae>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 800a088:	687b      	ldr	r3, [r7, #4]
 800a08a:	695b      	ldr	r3, [r3, #20]
 800a08c:	2b00      	cmp	r3, #0
 800a08e:	d019      	beq.n	800a0c4 <HAL_RCC_OscConfig+0x47c>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800a090:	4b2b      	ldr	r3, [pc, #172]	; (800a140 <HAL_RCC_OscConfig+0x4f8>)
 800a092:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800a094:	4a2a      	ldr	r2, [pc, #168]	; (800a140 <HAL_RCC_OscConfig+0x4f8>)
 800a096:	f043 0301 	orr.w	r3, r3, #1
 800a09a:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800a09c:	f7fa f838 	bl	8004110 <HAL_GetTick>
 800a0a0:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 800a0a2:	e008      	b.n	800a0b6 <HAL_RCC_OscConfig+0x46e>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800a0a4:	f7fa f834 	bl	8004110 <HAL_GetTick>
 800a0a8:	4602      	mov	r2, r0
 800a0aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a0ac:	1ad3      	subs	r3, r2, r3
 800a0ae:	2b02      	cmp	r3, #2
 800a0b0:	d901      	bls.n	800a0b6 <HAL_RCC_OscConfig+0x46e>
        {
          return HAL_TIMEOUT;
 800a0b2:	2303      	movs	r3, #3
 800a0b4:	e21a      	b.n	800a4ec <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 800a0b6:	4b22      	ldr	r3, [pc, #136]	; (800a140 <HAL_RCC_OscConfig+0x4f8>)
 800a0b8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800a0ba:	f003 0302 	and.w	r3, r3, #2
 800a0be:	2b00      	cmp	r3, #0
 800a0c0:	d0f0      	beq.n	800a0a4 <HAL_RCC_OscConfig+0x45c>
 800a0c2:	e018      	b.n	800a0f6 <HAL_RCC_OscConfig+0x4ae>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800a0c4:	4b1e      	ldr	r3, [pc, #120]	; (800a140 <HAL_RCC_OscConfig+0x4f8>)
 800a0c6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800a0c8:	4a1d      	ldr	r2, [pc, #116]	; (800a140 <HAL_RCC_OscConfig+0x4f8>)
 800a0ca:	f023 0301 	bic.w	r3, r3, #1
 800a0ce:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800a0d0:	f7fa f81e 	bl	8004110 <HAL_GetTick>
 800a0d4:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 800a0d6:	e008      	b.n	800a0ea <HAL_RCC_OscConfig+0x4a2>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800a0d8:	f7fa f81a 	bl	8004110 <HAL_GetTick>
 800a0dc:	4602      	mov	r2, r0
 800a0de:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a0e0:	1ad3      	subs	r3, r2, r3
 800a0e2:	2b02      	cmp	r3, #2
 800a0e4:	d901      	bls.n	800a0ea <HAL_RCC_OscConfig+0x4a2>
        {
          return HAL_TIMEOUT;
 800a0e6:	2303      	movs	r3, #3
 800a0e8:	e200      	b.n	800a4ec <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 800a0ea:	4b15      	ldr	r3, [pc, #84]	; (800a140 <HAL_RCC_OscConfig+0x4f8>)
 800a0ec:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800a0ee:	f003 0302 	and.w	r3, r3, #2
 800a0f2:	2b00      	cmp	r3, #0
 800a0f4:	d1f0      	bne.n	800a0d8 <HAL_RCC_OscConfig+0x490>
      }
    }
  }

  /*------------------------------ HSI48 Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 800a0f6:	687b      	ldr	r3, [r7, #4]
 800a0f8:	681b      	ldr	r3, [r3, #0]
 800a0fa:	f003 0320 	and.w	r3, r3, #32
 800a0fe:	2b00      	cmp	r3, #0
 800a100:	d039      	beq.n	800a176 <HAL_RCC_OscConfig+0x52e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if ((RCC_OscInitStruct->HSI48State) != RCC_HSI48_OFF)
 800a102:	687b      	ldr	r3, [r7, #4]
 800a104:	699b      	ldr	r3, [r3, #24]
 800a106:	2b00      	cmp	r3, #0
 800a108:	d01c      	beq.n	800a144 <HAL_RCC_OscConfig+0x4fc>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 800a10a:	4b0d      	ldr	r3, [pc, #52]	; (800a140 <HAL_RCC_OscConfig+0x4f8>)
 800a10c:	681b      	ldr	r3, [r3, #0]
 800a10e:	4a0c      	ldr	r2, [pc, #48]	; (800a140 <HAL_RCC_OscConfig+0x4f8>)
 800a110:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 800a114:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 800a116:	f7f9 fffb 	bl	8004110 <HAL_GetTick>
 800a11a:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 800a11c:	e008      	b.n	800a130 <HAL_RCC_OscConfig+0x4e8>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800a11e:	f7f9 fff7 	bl	8004110 <HAL_GetTick>
 800a122:	4602      	mov	r2, r0
 800a124:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a126:	1ad3      	subs	r3, r2, r3
 800a128:	2b02      	cmp	r3, #2
 800a12a:	d901      	bls.n	800a130 <HAL_RCC_OscConfig+0x4e8>
        {
          return HAL_TIMEOUT;
 800a12c:	2303      	movs	r3, #3
 800a12e:	e1dd      	b.n	800a4ec <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 800a130:	4b03      	ldr	r3, [pc, #12]	; (800a140 <HAL_RCC_OscConfig+0x4f8>)
 800a132:	681b      	ldr	r3, [r3, #0]
 800a134:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800a138:	2b00      	cmp	r3, #0
 800a13a:	d0f0      	beq.n	800a11e <HAL_RCC_OscConfig+0x4d6>
 800a13c:	e01b      	b.n	800a176 <HAL_RCC_OscConfig+0x52e>
 800a13e:	bf00      	nop
 800a140:	58024400 	.word	0x58024400
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 800a144:	4b9b      	ldr	r3, [pc, #620]	; (800a3b4 <HAL_RCC_OscConfig+0x76c>)
 800a146:	681b      	ldr	r3, [r3, #0]
 800a148:	4a9a      	ldr	r2, [pc, #616]	; (800a3b4 <HAL_RCC_OscConfig+0x76c>)
 800a14a:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800a14e:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 800a150:	f7f9 ffde 	bl	8004110 <HAL_GetTick>
 800a154:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 800a156:	e008      	b.n	800a16a <HAL_RCC_OscConfig+0x522>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800a158:	f7f9 ffda 	bl	8004110 <HAL_GetTick>
 800a15c:	4602      	mov	r2, r0
 800a15e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a160:	1ad3      	subs	r3, r2, r3
 800a162:	2b02      	cmp	r3, #2
 800a164:	d901      	bls.n	800a16a <HAL_RCC_OscConfig+0x522>
        {
          return HAL_TIMEOUT;
 800a166:	2303      	movs	r3, #3
 800a168:	e1c0      	b.n	800a4ec <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 800a16a:	4b92      	ldr	r3, [pc, #584]	; (800a3b4 <HAL_RCC_OscConfig+0x76c>)
 800a16c:	681b      	ldr	r3, [r3, #0]
 800a16e:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800a172:	2b00      	cmp	r3, #0
 800a174:	d1f0      	bne.n	800a158 <HAL_RCC_OscConfig+0x510>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800a176:	687b      	ldr	r3, [r7, #4]
 800a178:	681b      	ldr	r3, [r3, #0]
 800a17a:	f003 0304 	and.w	r3, r3, #4
 800a17e:	2b00      	cmp	r3, #0
 800a180:	f000 8081 	beq.w	800a286 <HAL_RCC_OscConfig+0x63e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 800a184:	4b8c      	ldr	r3, [pc, #560]	; (800a3b8 <HAL_RCC_OscConfig+0x770>)
 800a186:	681b      	ldr	r3, [r3, #0]
 800a188:	4a8b      	ldr	r2, [pc, #556]	; (800a3b8 <HAL_RCC_OscConfig+0x770>)
 800a18a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800a18e:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 800a190:	f7f9 ffbe 	bl	8004110 <HAL_GetTick>
 800a194:	6278      	str	r0, [r7, #36]	; 0x24

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800a196:	e008      	b.n	800a1aa <HAL_RCC_OscConfig+0x562>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800a198:	f7f9 ffba 	bl	8004110 <HAL_GetTick>
 800a19c:	4602      	mov	r2, r0
 800a19e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a1a0:	1ad3      	subs	r3, r2, r3
 800a1a2:	2b64      	cmp	r3, #100	; 0x64
 800a1a4:	d901      	bls.n	800a1aa <HAL_RCC_OscConfig+0x562>
      {
        return HAL_TIMEOUT;
 800a1a6:	2303      	movs	r3, #3
 800a1a8:	e1a0      	b.n	800a4ec <HAL_RCC_OscConfig+0x8a4>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800a1aa:	4b83      	ldr	r3, [pc, #524]	; (800a3b8 <HAL_RCC_OscConfig+0x770>)
 800a1ac:	681b      	ldr	r3, [r3, #0]
 800a1ae:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800a1b2:	2b00      	cmp	r3, #0
 800a1b4:	d0f0      	beq.n	800a198 <HAL_RCC_OscConfig+0x550>
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800a1b6:	687b      	ldr	r3, [r7, #4]
 800a1b8:	689b      	ldr	r3, [r3, #8]
 800a1ba:	2b01      	cmp	r3, #1
 800a1bc:	d106      	bne.n	800a1cc <HAL_RCC_OscConfig+0x584>
 800a1be:	4b7d      	ldr	r3, [pc, #500]	; (800a3b4 <HAL_RCC_OscConfig+0x76c>)
 800a1c0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800a1c2:	4a7c      	ldr	r2, [pc, #496]	; (800a3b4 <HAL_RCC_OscConfig+0x76c>)
 800a1c4:	f043 0301 	orr.w	r3, r3, #1
 800a1c8:	6713      	str	r3, [r2, #112]	; 0x70
 800a1ca:	e02d      	b.n	800a228 <HAL_RCC_OscConfig+0x5e0>
 800a1cc:	687b      	ldr	r3, [r7, #4]
 800a1ce:	689b      	ldr	r3, [r3, #8]
 800a1d0:	2b00      	cmp	r3, #0
 800a1d2:	d10c      	bne.n	800a1ee <HAL_RCC_OscConfig+0x5a6>
 800a1d4:	4b77      	ldr	r3, [pc, #476]	; (800a3b4 <HAL_RCC_OscConfig+0x76c>)
 800a1d6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800a1d8:	4a76      	ldr	r2, [pc, #472]	; (800a3b4 <HAL_RCC_OscConfig+0x76c>)
 800a1da:	f023 0301 	bic.w	r3, r3, #1
 800a1de:	6713      	str	r3, [r2, #112]	; 0x70
 800a1e0:	4b74      	ldr	r3, [pc, #464]	; (800a3b4 <HAL_RCC_OscConfig+0x76c>)
 800a1e2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800a1e4:	4a73      	ldr	r2, [pc, #460]	; (800a3b4 <HAL_RCC_OscConfig+0x76c>)
 800a1e6:	f023 0304 	bic.w	r3, r3, #4
 800a1ea:	6713      	str	r3, [r2, #112]	; 0x70
 800a1ec:	e01c      	b.n	800a228 <HAL_RCC_OscConfig+0x5e0>
 800a1ee:	687b      	ldr	r3, [r7, #4]
 800a1f0:	689b      	ldr	r3, [r3, #8]
 800a1f2:	2b05      	cmp	r3, #5
 800a1f4:	d10c      	bne.n	800a210 <HAL_RCC_OscConfig+0x5c8>
 800a1f6:	4b6f      	ldr	r3, [pc, #444]	; (800a3b4 <HAL_RCC_OscConfig+0x76c>)
 800a1f8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800a1fa:	4a6e      	ldr	r2, [pc, #440]	; (800a3b4 <HAL_RCC_OscConfig+0x76c>)
 800a1fc:	f043 0304 	orr.w	r3, r3, #4
 800a200:	6713      	str	r3, [r2, #112]	; 0x70
 800a202:	4b6c      	ldr	r3, [pc, #432]	; (800a3b4 <HAL_RCC_OscConfig+0x76c>)
 800a204:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800a206:	4a6b      	ldr	r2, [pc, #428]	; (800a3b4 <HAL_RCC_OscConfig+0x76c>)
 800a208:	f043 0301 	orr.w	r3, r3, #1
 800a20c:	6713      	str	r3, [r2, #112]	; 0x70
 800a20e:	e00b      	b.n	800a228 <HAL_RCC_OscConfig+0x5e0>
 800a210:	4b68      	ldr	r3, [pc, #416]	; (800a3b4 <HAL_RCC_OscConfig+0x76c>)
 800a212:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800a214:	4a67      	ldr	r2, [pc, #412]	; (800a3b4 <HAL_RCC_OscConfig+0x76c>)
 800a216:	f023 0301 	bic.w	r3, r3, #1
 800a21a:	6713      	str	r3, [r2, #112]	; 0x70
 800a21c:	4b65      	ldr	r3, [pc, #404]	; (800a3b4 <HAL_RCC_OscConfig+0x76c>)
 800a21e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800a220:	4a64      	ldr	r2, [pc, #400]	; (800a3b4 <HAL_RCC_OscConfig+0x76c>)
 800a222:	f023 0304 	bic.w	r3, r3, #4
 800a226:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800a228:	687b      	ldr	r3, [r7, #4]
 800a22a:	689b      	ldr	r3, [r3, #8]
 800a22c:	2b00      	cmp	r3, #0
 800a22e:	d015      	beq.n	800a25c <HAL_RCC_OscConfig+0x614>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800a230:	f7f9 ff6e 	bl	8004110 <HAL_GetTick>
 800a234:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800a236:	e00a      	b.n	800a24e <HAL_RCC_OscConfig+0x606>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800a238:	f7f9 ff6a 	bl	8004110 <HAL_GetTick>
 800a23c:	4602      	mov	r2, r0
 800a23e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a240:	1ad3      	subs	r3, r2, r3
 800a242:	f241 3288 	movw	r2, #5000	; 0x1388
 800a246:	4293      	cmp	r3, r2
 800a248:	d901      	bls.n	800a24e <HAL_RCC_OscConfig+0x606>
        {
          return HAL_TIMEOUT;
 800a24a:	2303      	movs	r3, #3
 800a24c:	e14e      	b.n	800a4ec <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800a24e:	4b59      	ldr	r3, [pc, #356]	; (800a3b4 <HAL_RCC_OscConfig+0x76c>)
 800a250:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800a252:	f003 0302 	and.w	r3, r3, #2
 800a256:	2b00      	cmp	r3, #0
 800a258:	d0ee      	beq.n	800a238 <HAL_RCC_OscConfig+0x5f0>
 800a25a:	e014      	b.n	800a286 <HAL_RCC_OscConfig+0x63e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800a25c:	f7f9 ff58 	bl	8004110 <HAL_GetTick>
 800a260:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 800a262:	e00a      	b.n	800a27a <HAL_RCC_OscConfig+0x632>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800a264:	f7f9 ff54 	bl	8004110 <HAL_GetTick>
 800a268:	4602      	mov	r2, r0
 800a26a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a26c:	1ad3      	subs	r3, r2, r3
 800a26e:	f241 3288 	movw	r2, #5000	; 0x1388
 800a272:	4293      	cmp	r3, r2
 800a274:	d901      	bls.n	800a27a <HAL_RCC_OscConfig+0x632>
        {
          return HAL_TIMEOUT;
 800a276:	2303      	movs	r3, #3
 800a278:	e138      	b.n	800a4ec <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 800a27a:	4b4e      	ldr	r3, [pc, #312]	; (800a3b4 <HAL_RCC_OscConfig+0x76c>)
 800a27c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800a27e:	f003 0302 	and.w	r3, r3, #2
 800a282:	2b00      	cmp	r3, #0
 800a284:	d1ee      	bne.n	800a264 <HAL_RCC_OscConfig+0x61c>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800a286:	687b      	ldr	r3, [r7, #4]
 800a288:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a28a:	2b00      	cmp	r3, #0
 800a28c:	f000 812d 	beq.w	800a4ea <HAL_RCC_OscConfig+0x8a2>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL1)
 800a290:	4b48      	ldr	r3, [pc, #288]	; (800a3b4 <HAL_RCC_OscConfig+0x76c>)
 800a292:	691b      	ldr	r3, [r3, #16]
 800a294:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800a298:	2b18      	cmp	r3, #24
 800a29a:	f000 80bd 	beq.w	800a418 <HAL_RCC_OscConfig+0x7d0>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800a29e:	687b      	ldr	r3, [r7, #4]
 800a2a0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a2a2:	2b02      	cmp	r3, #2
 800a2a4:	f040 809e 	bne.w	800a3e4 <HAL_RCC_OscConfig+0x79c>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
        assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800a2a8:	4b42      	ldr	r3, [pc, #264]	; (800a3b4 <HAL_RCC_OscConfig+0x76c>)
 800a2aa:	681b      	ldr	r3, [r3, #0]
 800a2ac:	4a41      	ldr	r2, [pc, #260]	; (800a3b4 <HAL_RCC_OscConfig+0x76c>)
 800a2ae:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800a2b2:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800a2b4:	f7f9 ff2c 	bl	8004110 <HAL_GetTick>
 800a2b8:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 800a2ba:	e008      	b.n	800a2ce <HAL_RCC_OscConfig+0x686>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800a2bc:	f7f9 ff28 	bl	8004110 <HAL_GetTick>
 800a2c0:	4602      	mov	r2, r0
 800a2c2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a2c4:	1ad3      	subs	r3, r2, r3
 800a2c6:	2b02      	cmp	r3, #2
 800a2c8:	d901      	bls.n	800a2ce <HAL_RCC_OscConfig+0x686>
          {
            return HAL_TIMEOUT;
 800a2ca:	2303      	movs	r3, #3
 800a2cc:	e10e      	b.n	800a4ec <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 800a2ce:	4b39      	ldr	r3, [pc, #228]	; (800a3b4 <HAL_RCC_OscConfig+0x76c>)
 800a2d0:	681b      	ldr	r3, [r3, #0]
 800a2d2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800a2d6:	2b00      	cmp	r3, #0
 800a2d8:	d1f0      	bne.n	800a2bc <HAL_RCC_OscConfig+0x674>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800a2da:	4b36      	ldr	r3, [pc, #216]	; (800a3b4 <HAL_RCC_OscConfig+0x76c>)
 800a2dc:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800a2de:	4b37      	ldr	r3, [pc, #220]	; (800a3bc <HAL_RCC_OscConfig+0x774>)
 800a2e0:	4013      	ands	r3, r2
 800a2e2:	687a      	ldr	r2, [r7, #4]
 800a2e4:	6a91      	ldr	r1, [r2, #40]	; 0x28
 800a2e6:	687a      	ldr	r2, [r7, #4]
 800a2e8:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 800a2ea:	0112      	lsls	r2, r2, #4
 800a2ec:	430a      	orrs	r2, r1
 800a2ee:	4931      	ldr	r1, [pc, #196]	; (800a3b4 <HAL_RCC_OscConfig+0x76c>)
 800a2f0:	4313      	orrs	r3, r2
 800a2f2:	628b      	str	r3, [r1, #40]	; 0x28
 800a2f4:	687b      	ldr	r3, [r7, #4]
 800a2f6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a2f8:	3b01      	subs	r3, #1
 800a2fa:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800a2fe:	687b      	ldr	r3, [r7, #4]
 800a300:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a302:	3b01      	subs	r3, #1
 800a304:	025b      	lsls	r3, r3, #9
 800a306:	b29b      	uxth	r3, r3
 800a308:	431a      	orrs	r2, r3
 800a30a:	687b      	ldr	r3, [r7, #4]
 800a30c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a30e:	3b01      	subs	r3, #1
 800a310:	041b      	lsls	r3, r3, #16
 800a312:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 800a316:	431a      	orrs	r2, r3
 800a318:	687b      	ldr	r3, [r7, #4]
 800a31a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800a31c:	3b01      	subs	r3, #1
 800a31e:	061b      	lsls	r3, r3, #24
 800a320:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 800a324:	4923      	ldr	r1, [pc, #140]	; (800a3b4 <HAL_RCC_OscConfig+0x76c>)
 800a326:	4313      	orrs	r3, r2
 800a328:	630b      	str	r3, [r1, #48]	; 0x30
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Disable PLLFRACN . */
        __HAL_RCC_PLLFRACN_DISABLE();
 800a32a:	4b22      	ldr	r3, [pc, #136]	; (800a3b4 <HAL_RCC_OscConfig+0x76c>)
 800a32c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a32e:	4a21      	ldr	r2, [pc, #132]	; (800a3b4 <HAL_RCC_OscConfig+0x76c>)
 800a330:	f023 0301 	bic.w	r3, r3, #1
 800a334:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Configure PLL PLL1FRACN */
        __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 800a336:	4b1f      	ldr	r3, [pc, #124]	; (800a3b4 <HAL_RCC_OscConfig+0x76c>)
 800a338:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800a33a:	4b21      	ldr	r3, [pc, #132]	; (800a3c0 <HAL_RCC_OscConfig+0x778>)
 800a33c:	4013      	ands	r3, r2
 800a33e:	687a      	ldr	r2, [r7, #4]
 800a340:	6c92      	ldr	r2, [r2, #72]	; 0x48
 800a342:	00d2      	lsls	r2, r2, #3
 800a344:	491b      	ldr	r1, [pc, #108]	; (800a3b4 <HAL_RCC_OscConfig+0x76c>)
 800a346:	4313      	orrs	r3, r2
 800a348:	634b      	str	r3, [r1, #52]	; 0x34

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL_VCIRANGE(RCC_OscInitStruct->PLL.PLLRGE) ;
 800a34a:	4b1a      	ldr	r3, [pc, #104]	; (800a3b4 <HAL_RCC_OscConfig+0x76c>)
 800a34c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a34e:	f023 020c 	bic.w	r2, r3, #12
 800a352:	687b      	ldr	r3, [r7, #4]
 800a354:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a356:	4917      	ldr	r1, [pc, #92]	; (800a3b4 <HAL_RCC_OscConfig+0x76c>)
 800a358:	4313      	orrs	r3, r2
 800a35a:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Select PLL1 output frequency range : VCO */
        __HAL_RCC_PLL_VCORANGE(RCC_OscInitStruct->PLL.PLLVCOSEL) ;
 800a35c:	4b15      	ldr	r3, [pc, #84]	; (800a3b4 <HAL_RCC_OscConfig+0x76c>)
 800a35e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a360:	f023 0202 	bic.w	r2, r3, #2
 800a364:	687b      	ldr	r3, [r7, #4]
 800a366:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800a368:	4912      	ldr	r1, [pc, #72]	; (800a3b4 <HAL_RCC_OscConfig+0x76c>)
 800a36a:	4313      	orrs	r3, r2
 800a36c:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Enable PLL System Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 800a36e:	4b11      	ldr	r3, [pc, #68]	; (800a3b4 <HAL_RCC_OscConfig+0x76c>)
 800a370:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a372:	4a10      	ldr	r2, [pc, #64]	; (800a3b4 <HAL_RCC_OscConfig+0x76c>)
 800a374:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800a378:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1Q Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800a37a:	4b0e      	ldr	r3, [pc, #56]	; (800a3b4 <HAL_RCC_OscConfig+0x76c>)
 800a37c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a37e:	4a0d      	ldr	r2, [pc, #52]	; (800a3b4 <HAL_RCC_OscConfig+0x76c>)
 800a380:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800a384:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1R  Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 800a386:	4b0b      	ldr	r3, [pc, #44]	; (800a3b4 <HAL_RCC_OscConfig+0x76c>)
 800a388:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a38a:	4a0a      	ldr	r2, [pc, #40]	; (800a3b4 <HAL_RCC_OscConfig+0x76c>)
 800a38c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800a390:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1FRACN . */
        __HAL_RCC_PLLFRACN_ENABLE();
 800a392:	4b08      	ldr	r3, [pc, #32]	; (800a3b4 <HAL_RCC_OscConfig+0x76c>)
 800a394:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a396:	4a07      	ldr	r2, [pc, #28]	; (800a3b4 <HAL_RCC_OscConfig+0x76c>)
 800a398:	f043 0301 	orr.w	r3, r3, #1
 800a39c:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800a39e:	4b05      	ldr	r3, [pc, #20]	; (800a3b4 <HAL_RCC_OscConfig+0x76c>)
 800a3a0:	681b      	ldr	r3, [r3, #0]
 800a3a2:	4a04      	ldr	r2, [pc, #16]	; (800a3b4 <HAL_RCC_OscConfig+0x76c>)
 800a3a4:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800a3a8:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800a3aa:	f7f9 feb1 	bl	8004110 <HAL_GetTick>
 800a3ae:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 800a3b0:	e011      	b.n	800a3d6 <HAL_RCC_OscConfig+0x78e>
 800a3b2:	bf00      	nop
 800a3b4:	58024400 	.word	0x58024400
 800a3b8:	58024800 	.word	0x58024800
 800a3bc:	fffffc0c 	.word	0xfffffc0c
 800a3c0:	ffff0007 	.word	0xffff0007
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800a3c4:	f7f9 fea4 	bl	8004110 <HAL_GetTick>
 800a3c8:	4602      	mov	r2, r0
 800a3ca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a3cc:	1ad3      	subs	r3, r2, r3
 800a3ce:	2b02      	cmp	r3, #2
 800a3d0:	d901      	bls.n	800a3d6 <HAL_RCC_OscConfig+0x78e>
          {
            return HAL_TIMEOUT;
 800a3d2:	2303      	movs	r3, #3
 800a3d4:	e08a      	b.n	800a4ec <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 800a3d6:	4b47      	ldr	r3, [pc, #284]	; (800a4f4 <HAL_RCC_OscConfig+0x8ac>)
 800a3d8:	681b      	ldr	r3, [r3, #0]
 800a3da:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800a3de:	2b00      	cmp	r3, #0
 800a3e0:	d0f0      	beq.n	800a3c4 <HAL_RCC_OscConfig+0x77c>
 800a3e2:	e082      	b.n	800a4ea <HAL_RCC_OscConfig+0x8a2>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800a3e4:	4b43      	ldr	r3, [pc, #268]	; (800a4f4 <HAL_RCC_OscConfig+0x8ac>)
 800a3e6:	681b      	ldr	r3, [r3, #0]
 800a3e8:	4a42      	ldr	r2, [pc, #264]	; (800a4f4 <HAL_RCC_OscConfig+0x8ac>)
 800a3ea:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800a3ee:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800a3f0:	f7f9 fe8e 	bl	8004110 <HAL_GetTick>
 800a3f4:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 800a3f6:	e008      	b.n	800a40a <HAL_RCC_OscConfig+0x7c2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800a3f8:	f7f9 fe8a 	bl	8004110 <HAL_GetTick>
 800a3fc:	4602      	mov	r2, r0
 800a3fe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a400:	1ad3      	subs	r3, r2, r3
 800a402:	2b02      	cmp	r3, #2
 800a404:	d901      	bls.n	800a40a <HAL_RCC_OscConfig+0x7c2>
          {
            return HAL_TIMEOUT;
 800a406:	2303      	movs	r3, #3
 800a408:	e070      	b.n	800a4ec <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 800a40a:	4b3a      	ldr	r3, [pc, #232]	; (800a4f4 <HAL_RCC_OscConfig+0x8ac>)
 800a40c:	681b      	ldr	r3, [r3, #0]
 800a40e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800a412:	2b00      	cmp	r3, #0
 800a414:	d1f0      	bne.n	800a3f8 <HAL_RCC_OscConfig+0x7b0>
 800a416:	e068      	b.n	800a4ea <HAL_RCC_OscConfig+0x8a2>
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLLCKSELR;
 800a418:	4b36      	ldr	r3, [pc, #216]	; (800a4f4 <HAL_RCC_OscConfig+0x8ac>)
 800a41a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a41c:	613b      	str	r3, [r7, #16]
      temp2_pllckcfg = RCC->PLL1DIVR;
 800a41e:	4b35      	ldr	r3, [pc, #212]	; (800a4f4 <HAL_RCC_OscConfig+0x8ac>)
 800a420:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a422:	60fb      	str	r3, [r7, #12]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800a424:	687b      	ldr	r3, [r7, #4]
 800a426:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a428:	2b01      	cmp	r3, #1
 800a42a:	d031      	beq.n	800a490 <HAL_RCC_OscConfig+0x848>
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800a42c:	693b      	ldr	r3, [r7, #16]
 800a42e:	f003 0203 	and.w	r2, r3, #3
 800a432:	687b      	ldr	r3, [r7, #4]
 800a434:	6a9b      	ldr	r3, [r3, #40]	; 0x28
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800a436:	429a      	cmp	r2, r3
 800a438:	d12a      	bne.n	800a490 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 800a43a:	693b      	ldr	r3, [r7, #16]
 800a43c:	091b      	lsrs	r3, r3, #4
 800a43e:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 800a442:	687b      	ldr	r3, [r7, #4]
 800a444:	6adb      	ldr	r3, [r3, #44]	; 0x2c
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800a446:	429a      	cmp	r2, r3
 800a448:	d122      	bne.n	800a490 <HAL_RCC_OscConfig+0x848>
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 800a44a:	68fb      	ldr	r3, [r7, #12]
 800a44c:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800a450:	687b      	ldr	r3, [r7, #4]
 800a452:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a454:	3b01      	subs	r3, #1
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 800a456:	429a      	cmp	r2, r3
 800a458:	d11a      	bne.n	800a490 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 800a45a:	68fb      	ldr	r3, [r7, #12]
 800a45c:	0a5b      	lsrs	r3, r3, #9
 800a45e:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800a462:	687b      	ldr	r3, [r7, #4]
 800a464:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a466:	3b01      	subs	r3, #1
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 800a468:	429a      	cmp	r2, r3
 800a46a:	d111      	bne.n	800a490 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 800a46c:	68fb      	ldr	r3, [r7, #12]
 800a46e:	0c1b      	lsrs	r3, r3, #16
 800a470:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800a474:	687b      	ldr	r3, [r7, #4]
 800a476:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a478:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 800a47a:	429a      	cmp	r2, r3
 800a47c:	d108      	bne.n	800a490 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_R1) >> RCC_PLL1DIVR_R1_Pos) != (RCC_OscInitStruct->PLL.PLLR - 1U)))
 800a47e:	68fb      	ldr	r3, [r7, #12]
 800a480:	0e1b      	lsrs	r3, r3, #24
 800a482:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800a486:	687b      	ldr	r3, [r7, #4]
 800a488:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800a48a:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 800a48c:	429a      	cmp	r2, r3
 800a48e:	d001      	beq.n	800a494 <HAL_RCC_OscConfig+0x84c>
      {
        return HAL_ERROR;
 800a490:	2301      	movs	r3, #1
 800a492:	e02b      	b.n	800a4ec <HAL_RCC_OscConfig+0x8a4>
      }
      else
      {
        /* Check if only fractional part needs to be updated  */
        temp1_pllckcfg = ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> RCC_PLL1FRACR_FRACN1_Pos);
 800a494:	4b17      	ldr	r3, [pc, #92]	; (800a4f4 <HAL_RCC_OscConfig+0x8ac>)
 800a496:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a498:	08db      	lsrs	r3, r3, #3
 800a49a:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800a49e:	613b      	str	r3, [r7, #16]
        if (RCC_OscInitStruct->PLL.PLLFRACN != temp1_pllckcfg)
 800a4a0:	687b      	ldr	r3, [r7, #4]
 800a4a2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800a4a4:	693a      	ldr	r2, [r7, #16]
 800a4a6:	429a      	cmp	r2, r3
 800a4a8:	d01f      	beq.n	800a4ea <HAL_RCC_OscConfig+0x8a2>
        {
          assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));
          /* Disable PLL1FRACEN */
          __HAL_RCC_PLLFRACN_DISABLE();
 800a4aa:	4b12      	ldr	r3, [pc, #72]	; (800a4f4 <HAL_RCC_OscConfig+0x8ac>)
 800a4ac:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a4ae:	4a11      	ldr	r2, [pc, #68]	; (800a4f4 <HAL_RCC_OscConfig+0x8ac>)
 800a4b0:	f023 0301 	bic.w	r3, r3, #1
 800a4b4:	62d3      	str	r3, [r2, #44]	; 0x2c
          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 800a4b6:	f7f9 fe2b 	bl	8004110 <HAL_GetTick>
 800a4ba:	6278      	str	r0, [r7, #36]	; 0x24
          /* Wait at least 2 CK_REF (PLL input source divided by M) period to make sure next latched value will be taken into account. */
          while ((HAL_GetTick() - tickstart) < PLL_FRAC_TIMEOUT_VALUE)
 800a4bc:	bf00      	nop
 800a4be:	f7f9 fe27 	bl	8004110 <HAL_GetTick>
 800a4c2:	4602      	mov	r2, r0
 800a4c4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a4c6:	4293      	cmp	r3, r2
 800a4c8:	d0f9      	beq.n	800a4be <HAL_RCC_OscConfig+0x876>
          {
          }
          /* Configure PLL1 PLL1FRACN */
          __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 800a4ca:	4b0a      	ldr	r3, [pc, #40]	; (800a4f4 <HAL_RCC_OscConfig+0x8ac>)
 800a4cc:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800a4ce:	4b0a      	ldr	r3, [pc, #40]	; (800a4f8 <HAL_RCC_OscConfig+0x8b0>)
 800a4d0:	4013      	ands	r3, r2
 800a4d2:	687a      	ldr	r2, [r7, #4]
 800a4d4:	6c92      	ldr	r2, [r2, #72]	; 0x48
 800a4d6:	00d2      	lsls	r2, r2, #3
 800a4d8:	4906      	ldr	r1, [pc, #24]	; (800a4f4 <HAL_RCC_OscConfig+0x8ac>)
 800a4da:	4313      	orrs	r3, r2
 800a4dc:	634b      	str	r3, [r1, #52]	; 0x34
          /* Enable PLL1FRACEN to latch new value. */
          __HAL_RCC_PLLFRACN_ENABLE();
 800a4de:	4b05      	ldr	r3, [pc, #20]	; (800a4f4 <HAL_RCC_OscConfig+0x8ac>)
 800a4e0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a4e2:	4a04      	ldr	r2, [pc, #16]	; (800a4f4 <HAL_RCC_OscConfig+0x8ac>)
 800a4e4:	f043 0301 	orr.w	r3, r3, #1
 800a4e8:	62d3      	str	r3, [r2, #44]	; 0x2c
        }
      }
    }
  }
  return HAL_OK;
 800a4ea:	2300      	movs	r3, #0
}
 800a4ec:	4618      	mov	r0, r3
 800a4ee:	3730      	adds	r7, #48	; 0x30
 800a4f0:	46bd      	mov	sp, r7
 800a4f2:	bd80      	pop	{r7, pc}
 800a4f4:	58024400 	.word	0x58024400
 800a4f8:	ffff0007 	.word	0xffff0007

0800a4fc <HAL_RCC_ClockConfig>:
  *         D1CPRE[3:0] bits to ensure that  Domain1 core clock not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800a4fc:	b580      	push	{r7, lr}
 800a4fe:	b086      	sub	sp, #24
 800a500:	af00      	add	r7, sp, #0
 800a502:	6078      	str	r0, [r7, #4]
 800a504:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef halstatus;
  uint32_t tickstart;
  uint32_t common_system_clock;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800a506:	687b      	ldr	r3, [r7, #4]
 800a508:	2b00      	cmp	r3, #0
 800a50a:	d101      	bne.n	800a510 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800a50c:	2301      	movs	r3, #1
 800a50e:	e19c      	b.n	800a84a <HAL_RCC_ClockConfig+0x34e>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 800a510:	4b8a      	ldr	r3, [pc, #552]	; (800a73c <HAL_RCC_ClockConfig+0x240>)
 800a512:	681b      	ldr	r3, [r3, #0]
 800a514:	f003 030f 	and.w	r3, r3, #15
 800a518:	683a      	ldr	r2, [r7, #0]
 800a51a:	429a      	cmp	r2, r3
 800a51c:	d910      	bls.n	800a540 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800a51e:	4b87      	ldr	r3, [pc, #540]	; (800a73c <HAL_RCC_ClockConfig+0x240>)
 800a520:	681b      	ldr	r3, [r3, #0]
 800a522:	f023 020f 	bic.w	r2, r3, #15
 800a526:	4985      	ldr	r1, [pc, #532]	; (800a73c <HAL_RCC_ClockConfig+0x240>)
 800a528:	683b      	ldr	r3, [r7, #0]
 800a52a:	4313      	orrs	r3, r2
 800a52c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800a52e:	4b83      	ldr	r3, [pc, #524]	; (800a73c <HAL_RCC_ClockConfig+0x240>)
 800a530:	681b      	ldr	r3, [r3, #0]
 800a532:	f003 030f 	and.w	r3, r3, #15
 800a536:	683a      	ldr	r2, [r7, #0]
 800a538:	429a      	cmp	r2, r3
 800a53a:	d001      	beq.n	800a540 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 800a53c:	2301      	movs	r3, #1
 800a53e:	e184      	b.n	800a84a <HAL_RCC_ClockConfig+0x34e>

  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- D1PCLK1/CDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 800a540:	687b      	ldr	r3, [r7, #4]
 800a542:	681b      	ldr	r3, [r3, #0]
 800a544:	f003 0304 	and.w	r3, r3, #4
 800a548:	2b00      	cmp	r3, #0
 800a54a:	d010      	beq.n	800a56e <HAL_RCC_ClockConfig+0x72>
  {
#if defined (RCC_D1CFGR_D1PPRE)
    if ((RCC_ClkInitStruct->APB3CLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 800a54c:	687b      	ldr	r3, [r7, #4]
 800a54e:	691a      	ldr	r2, [r3, #16]
 800a550:	4b7b      	ldr	r3, [pc, #492]	; (800a740 <HAL_RCC_ClockConfig+0x244>)
 800a552:	699b      	ldr	r3, [r3, #24]
 800a554:	f003 0370 	and.w	r3, r3, #112	; 0x70
 800a558:	429a      	cmp	r2, r3
 800a55a:	d908      	bls.n	800a56e <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 800a55c:	4b78      	ldr	r3, [pc, #480]	; (800a740 <HAL_RCC_ClockConfig+0x244>)
 800a55e:	699b      	ldr	r3, [r3, #24]
 800a560:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 800a564:	687b      	ldr	r3, [r7, #4]
 800a566:	691b      	ldr	r3, [r3, #16]
 800a568:	4975      	ldr	r1, [pc, #468]	; (800a740 <HAL_RCC_ClockConfig+0x244>)
 800a56a:	4313      	orrs	r3, r2
 800a56c:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800a56e:	687b      	ldr	r3, [r7, #4]
 800a570:	681b      	ldr	r3, [r3, #0]
 800a572:	f003 0308 	and.w	r3, r3, #8
 800a576:	2b00      	cmp	r3, #0
 800a578:	d010      	beq.n	800a59c <HAL_RCC_ClockConfig+0xa0>
  {
#if defined (RCC_D2CFGR_D2PPRE1)
    if ((RCC_ClkInitStruct->APB1CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 800a57a:	687b      	ldr	r3, [r7, #4]
 800a57c:	695a      	ldr	r2, [r3, #20]
 800a57e:	4b70      	ldr	r3, [pc, #448]	; (800a740 <HAL_RCC_ClockConfig+0x244>)
 800a580:	69db      	ldr	r3, [r3, #28]
 800a582:	f003 0370 	and.w	r3, r3, #112	; 0x70
 800a586:	429a      	cmp	r2, r3
 800a588:	d908      	bls.n	800a59c <HAL_RCC_ClockConfig+0xa0>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 800a58a:	4b6d      	ldr	r3, [pc, #436]	; (800a740 <HAL_RCC_ClockConfig+0x244>)
 800a58c:	69db      	ldr	r3, [r3, #28]
 800a58e:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 800a592:	687b      	ldr	r3, [r7, #4]
 800a594:	695b      	ldr	r3, [r3, #20]
 800a596:	496a      	ldr	r1, [pc, #424]	; (800a740 <HAL_RCC_ClockConfig+0x244>)
 800a598:	4313      	orrs	r3, r2
 800a59a:	61cb      	str	r3, [r1, #28]
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
    }
#endif
  }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800a59c:	687b      	ldr	r3, [r7, #4]
 800a59e:	681b      	ldr	r3, [r3, #0]
 800a5a0:	f003 0310 	and.w	r3, r3, #16
 800a5a4:	2b00      	cmp	r3, #0
 800a5a6:	d010      	beq.n	800a5ca <HAL_RCC_ClockConfig+0xce>
  {
#if defined(RCC_D2CFGR_D2PPRE2)
    if ((RCC_ClkInitStruct->APB2CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 800a5a8:	687b      	ldr	r3, [r7, #4]
 800a5aa:	699a      	ldr	r2, [r3, #24]
 800a5ac:	4b64      	ldr	r3, [pc, #400]	; (800a740 <HAL_RCC_ClockConfig+0x244>)
 800a5ae:	69db      	ldr	r3, [r3, #28]
 800a5b0:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800a5b4:	429a      	cmp	r2, r3
 800a5b6:	d908      	bls.n	800a5ca <HAL_RCC_ClockConfig+0xce>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 800a5b8:	4b61      	ldr	r3, [pc, #388]	; (800a740 <HAL_RCC_ClockConfig+0x244>)
 800a5ba:	69db      	ldr	r3, [r3, #28]
 800a5bc:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 800a5c0:	687b      	ldr	r3, [r7, #4]
 800a5c2:	699b      	ldr	r3, [r3, #24]
 800a5c4:	495e      	ldr	r1, [pc, #376]	; (800a740 <HAL_RCC_ClockConfig+0x244>)
 800a5c6:	4313      	orrs	r3, r2
 800a5c8:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 800a5ca:	687b      	ldr	r3, [r7, #4]
 800a5cc:	681b      	ldr	r3, [r3, #0]
 800a5ce:	f003 0320 	and.w	r3, r3, #32
 800a5d2:	2b00      	cmp	r3, #0
 800a5d4:	d010      	beq.n	800a5f8 <HAL_RCC_ClockConfig+0xfc>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if ((RCC_ClkInitStruct->APB4CLKDivider) > (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 800a5d6:	687b      	ldr	r3, [r7, #4]
 800a5d8:	69da      	ldr	r2, [r3, #28]
 800a5da:	4b59      	ldr	r3, [pc, #356]	; (800a740 <HAL_RCC_ClockConfig+0x244>)
 800a5dc:	6a1b      	ldr	r3, [r3, #32]
 800a5de:	f003 0370 	and.w	r3, r3, #112	; 0x70
 800a5e2:	429a      	cmp	r2, r3
 800a5e4:	d908      	bls.n	800a5f8 <HAL_RCC_ClockConfig+0xfc>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 800a5e6:	4b56      	ldr	r3, [pc, #344]	; (800a740 <HAL_RCC_ClockConfig+0x244>)
 800a5e8:	6a1b      	ldr	r3, [r3, #32]
 800a5ea:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 800a5ee:	687b      	ldr	r3, [r7, #4]
 800a5f0:	69db      	ldr	r3, [r3, #28]
 800a5f2:	4953      	ldr	r1, [pc, #332]	; (800a740 <HAL_RCC_ClockConfig+0x244>)
 800a5f4:	4313      	orrs	r3, r2
 800a5f6:	620b      	str	r3, [r1, #32]
    }
#endif
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800a5f8:	687b      	ldr	r3, [r7, #4]
 800a5fa:	681b      	ldr	r3, [r3, #0]
 800a5fc:	f003 0302 	and.w	r3, r3, #2
 800a600:	2b00      	cmp	r3, #0
 800a602:	d010      	beq.n	800a626 <HAL_RCC_ClockConfig+0x12a>
  {
#if defined (RCC_D1CFGR_HPRE)
    if ((RCC_ClkInitStruct->AHBCLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 800a604:	687b      	ldr	r3, [r7, #4]
 800a606:	68da      	ldr	r2, [r3, #12]
 800a608:	4b4d      	ldr	r3, [pc, #308]	; (800a740 <HAL_RCC_ClockConfig+0x244>)
 800a60a:	699b      	ldr	r3, [r3, #24]
 800a60c:	f003 030f 	and.w	r3, r3, #15
 800a610:	429a      	cmp	r2, r3
 800a612:	d908      	bls.n	800a626 <HAL_RCC_ClockConfig+0x12a>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800a614:	4b4a      	ldr	r3, [pc, #296]	; (800a740 <HAL_RCC_ClockConfig+0x244>)
 800a616:	699b      	ldr	r3, [r3, #24]
 800a618:	f023 020f 	bic.w	r2, r3, #15
 800a61c:	687b      	ldr	r3, [r7, #4]
 800a61e:	68db      	ldr	r3, [r3, #12]
 800a620:	4947      	ldr	r1, [pc, #284]	; (800a740 <HAL_RCC_ClockConfig+0x244>)
 800a622:	4313      	orrs	r3, r2
 800a624:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*------------------------- SYSCLK Configuration -------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800a626:	687b      	ldr	r3, [r7, #4]
 800a628:	681b      	ldr	r3, [r3, #0]
 800a62a:	f003 0301 	and.w	r3, r3, #1
 800a62e:	2b00      	cmp	r3, #0
 800a630:	d055      	beq.n	800a6de <HAL_RCC_ClockConfig+0x1e2>
  {
    assert_param(IS_RCC_SYSCLK(RCC_ClkInitStruct->SYSCLKDivider));
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
#if defined(RCC_D1CFGR_D1CPRE)
    MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1CPRE, RCC_ClkInitStruct->SYSCLKDivider);
 800a632:	4b43      	ldr	r3, [pc, #268]	; (800a740 <HAL_RCC_ClockConfig+0x244>)
 800a634:	699b      	ldr	r3, [r3, #24]
 800a636:	f423 6270 	bic.w	r2, r3, #3840	; 0xf00
 800a63a:	687b      	ldr	r3, [r7, #4]
 800a63c:	689b      	ldr	r3, [r3, #8]
 800a63e:	4940      	ldr	r1, [pc, #256]	; (800a740 <HAL_RCC_ClockConfig+0x244>)
 800a640:	4313      	orrs	r3, r2
 800a642:	618b      	str	r3, [r1, #24]
#else
    MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDCPRE, RCC_ClkInitStruct->SYSCLKDivider);
#endif
    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800a644:	687b      	ldr	r3, [r7, #4]
 800a646:	685b      	ldr	r3, [r3, #4]
 800a648:	2b02      	cmp	r3, #2
 800a64a:	d107      	bne.n	800a65c <HAL_RCC_ClockConfig+0x160>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 800a64c:	4b3c      	ldr	r3, [pc, #240]	; (800a740 <HAL_RCC_ClockConfig+0x244>)
 800a64e:	681b      	ldr	r3, [r3, #0]
 800a650:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800a654:	2b00      	cmp	r3, #0
 800a656:	d121      	bne.n	800a69c <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 800a658:	2301      	movs	r3, #1
 800a65a:	e0f6      	b.n	800a84a <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800a65c:	687b      	ldr	r3, [r7, #4]
 800a65e:	685b      	ldr	r3, [r3, #4]
 800a660:	2b03      	cmp	r3, #3
 800a662:	d107      	bne.n	800a674 <HAL_RCC_ClockConfig+0x178>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 800a664:	4b36      	ldr	r3, [pc, #216]	; (800a740 <HAL_RCC_ClockConfig+0x244>)
 800a666:	681b      	ldr	r3, [r3, #0]
 800a668:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800a66c:	2b00      	cmp	r3, #0
 800a66e:	d115      	bne.n	800a69c <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 800a670:	2301      	movs	r3, #1
 800a672:	e0ea      	b.n	800a84a <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* CSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 800a674:	687b      	ldr	r3, [r7, #4]
 800a676:	685b      	ldr	r3, [r3, #4]
 800a678:	2b01      	cmp	r3, #1
 800a67a:	d107      	bne.n	800a68c <HAL_RCC_ClockConfig+0x190>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 800a67c:	4b30      	ldr	r3, [pc, #192]	; (800a740 <HAL_RCC_ClockConfig+0x244>)
 800a67e:	681b      	ldr	r3, [r3, #0]
 800a680:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800a684:	2b00      	cmp	r3, #0
 800a686:	d109      	bne.n	800a69c <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 800a688:	2301      	movs	r3, #1
 800a68a:	e0de      	b.n	800a84a <HAL_RCC_ClockConfig+0x34e>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800a68c:	4b2c      	ldr	r3, [pc, #176]	; (800a740 <HAL_RCC_ClockConfig+0x244>)
 800a68e:	681b      	ldr	r3, [r3, #0]
 800a690:	f003 0304 	and.w	r3, r3, #4
 800a694:	2b00      	cmp	r3, #0
 800a696:	d101      	bne.n	800a69c <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 800a698:	2301      	movs	r3, #1
 800a69a:	e0d6      	b.n	800a84a <HAL_RCC_ClockConfig+0x34e>
      }
    }
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 800a69c:	4b28      	ldr	r3, [pc, #160]	; (800a740 <HAL_RCC_ClockConfig+0x244>)
 800a69e:	691b      	ldr	r3, [r3, #16]
 800a6a0:	f023 0207 	bic.w	r2, r3, #7
 800a6a4:	687b      	ldr	r3, [r7, #4]
 800a6a6:	685b      	ldr	r3, [r3, #4]
 800a6a8:	4925      	ldr	r1, [pc, #148]	; (800a740 <HAL_RCC_ClockConfig+0x244>)
 800a6aa:	4313      	orrs	r3, r2
 800a6ac:	610b      	str	r3, [r1, #16]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800a6ae:	f7f9 fd2f 	bl	8004110 <HAL_GetTick>
 800a6b2:	6178      	str	r0, [r7, #20]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800a6b4:	e00a      	b.n	800a6cc <HAL_RCC_ClockConfig+0x1d0>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800a6b6:	f7f9 fd2b 	bl	8004110 <HAL_GetTick>
 800a6ba:	4602      	mov	r2, r0
 800a6bc:	697b      	ldr	r3, [r7, #20]
 800a6be:	1ad3      	subs	r3, r2, r3
 800a6c0:	f241 3288 	movw	r2, #5000	; 0x1388
 800a6c4:	4293      	cmp	r3, r2
 800a6c6:	d901      	bls.n	800a6cc <HAL_RCC_ClockConfig+0x1d0>
      {
        return HAL_TIMEOUT;
 800a6c8:	2303      	movs	r3, #3
 800a6ca:	e0be      	b.n	800a84a <HAL_RCC_ClockConfig+0x34e>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800a6cc:	4b1c      	ldr	r3, [pc, #112]	; (800a740 <HAL_RCC_ClockConfig+0x244>)
 800a6ce:	691b      	ldr	r3, [r3, #16]
 800a6d0:	f003 0238 	and.w	r2, r3, #56	; 0x38
 800a6d4:	687b      	ldr	r3, [r7, #4]
 800a6d6:	685b      	ldr	r3, [r3, #4]
 800a6d8:	00db      	lsls	r3, r3, #3
 800a6da:	429a      	cmp	r2, r3
 800a6dc:	d1eb      	bne.n	800a6b6 <HAL_RCC_ClockConfig+0x1ba>

  }

  /* Decreasing the BUS frequency divider */
  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800a6de:	687b      	ldr	r3, [r7, #4]
 800a6e0:	681b      	ldr	r3, [r3, #0]
 800a6e2:	f003 0302 	and.w	r3, r3, #2
 800a6e6:	2b00      	cmp	r3, #0
 800a6e8:	d010      	beq.n	800a70c <HAL_RCC_ClockConfig+0x210>
  {
#if defined(RCC_D1CFGR_HPRE)
    if ((RCC_ClkInitStruct->AHBCLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 800a6ea:	687b      	ldr	r3, [r7, #4]
 800a6ec:	68da      	ldr	r2, [r3, #12]
 800a6ee:	4b14      	ldr	r3, [pc, #80]	; (800a740 <HAL_RCC_ClockConfig+0x244>)
 800a6f0:	699b      	ldr	r3, [r3, #24]
 800a6f2:	f003 030f 	and.w	r3, r3, #15
 800a6f6:	429a      	cmp	r2, r3
 800a6f8:	d208      	bcs.n	800a70c <HAL_RCC_ClockConfig+0x210>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800a6fa:	4b11      	ldr	r3, [pc, #68]	; (800a740 <HAL_RCC_ClockConfig+0x244>)
 800a6fc:	699b      	ldr	r3, [r3, #24]
 800a6fe:	f023 020f 	bic.w	r2, r3, #15
 800a702:	687b      	ldr	r3, [r7, #4]
 800a704:	68db      	ldr	r3, [r3, #12]
 800a706:	490e      	ldr	r1, [pc, #56]	; (800a740 <HAL_RCC_ClockConfig+0x244>)
 800a708:	4313      	orrs	r3, r2
 800a70a:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 800a70c:	4b0b      	ldr	r3, [pc, #44]	; (800a73c <HAL_RCC_ClockConfig+0x240>)
 800a70e:	681b      	ldr	r3, [r3, #0]
 800a710:	f003 030f 	and.w	r3, r3, #15
 800a714:	683a      	ldr	r2, [r7, #0]
 800a716:	429a      	cmp	r2, r3
 800a718:	d214      	bcs.n	800a744 <HAL_RCC_ClockConfig+0x248>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800a71a:	4b08      	ldr	r3, [pc, #32]	; (800a73c <HAL_RCC_ClockConfig+0x240>)
 800a71c:	681b      	ldr	r3, [r3, #0]
 800a71e:	f023 020f 	bic.w	r2, r3, #15
 800a722:	4906      	ldr	r1, [pc, #24]	; (800a73c <HAL_RCC_ClockConfig+0x240>)
 800a724:	683b      	ldr	r3, [r7, #0]
 800a726:	4313      	orrs	r3, r2
 800a728:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800a72a:	4b04      	ldr	r3, [pc, #16]	; (800a73c <HAL_RCC_ClockConfig+0x240>)
 800a72c:	681b      	ldr	r3, [r3, #0]
 800a72e:	f003 030f 	and.w	r3, r3, #15
 800a732:	683a      	ldr	r2, [r7, #0]
 800a734:	429a      	cmp	r2, r3
 800a736:	d005      	beq.n	800a744 <HAL_RCC_ClockConfig+0x248>
    {
      return HAL_ERROR;
 800a738:	2301      	movs	r3, #1
 800a73a:	e086      	b.n	800a84a <HAL_RCC_ClockConfig+0x34e>
 800a73c:	52002000 	.word	0x52002000
 800a740:	58024400 	.word	0x58024400
    }
  }

  /*-------------------------- D1PCLK1/CDPCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 800a744:	687b      	ldr	r3, [r7, #4]
 800a746:	681b      	ldr	r3, [r3, #0]
 800a748:	f003 0304 	and.w	r3, r3, #4
 800a74c:	2b00      	cmp	r3, #0
 800a74e:	d010      	beq.n	800a772 <HAL_RCC_ClockConfig+0x276>
  {
#if defined(RCC_D1CFGR_D1PPRE)
    if ((RCC_ClkInitStruct->APB3CLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 800a750:	687b      	ldr	r3, [r7, #4]
 800a752:	691a      	ldr	r2, [r3, #16]
 800a754:	4b3f      	ldr	r3, [pc, #252]	; (800a854 <HAL_RCC_ClockConfig+0x358>)
 800a756:	699b      	ldr	r3, [r3, #24]
 800a758:	f003 0370 	and.w	r3, r3, #112	; 0x70
 800a75c:	429a      	cmp	r2, r3
 800a75e:	d208      	bcs.n	800a772 <HAL_RCC_ClockConfig+0x276>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 800a760:	4b3c      	ldr	r3, [pc, #240]	; (800a854 <HAL_RCC_ClockConfig+0x358>)
 800a762:	699b      	ldr	r3, [r3, #24]
 800a764:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 800a768:	687b      	ldr	r3, [r7, #4]
 800a76a:	691b      	ldr	r3, [r3, #16]
 800a76c:	4939      	ldr	r1, [pc, #228]	; (800a854 <HAL_RCC_ClockConfig+0x358>)
 800a76e:	4313      	orrs	r3, r2
 800a770:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800a772:	687b      	ldr	r3, [r7, #4]
 800a774:	681b      	ldr	r3, [r3, #0]
 800a776:	f003 0308 	and.w	r3, r3, #8
 800a77a:	2b00      	cmp	r3, #0
 800a77c:	d010      	beq.n	800a7a0 <HAL_RCC_ClockConfig+0x2a4>
  {
#if defined(RCC_D2CFGR_D2PPRE1)
    if ((RCC_ClkInitStruct->APB1CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 800a77e:	687b      	ldr	r3, [r7, #4]
 800a780:	695a      	ldr	r2, [r3, #20]
 800a782:	4b34      	ldr	r3, [pc, #208]	; (800a854 <HAL_RCC_ClockConfig+0x358>)
 800a784:	69db      	ldr	r3, [r3, #28]
 800a786:	f003 0370 	and.w	r3, r3, #112	; 0x70
 800a78a:	429a      	cmp	r2, r3
 800a78c:	d208      	bcs.n	800a7a0 <HAL_RCC_ClockConfig+0x2a4>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 800a78e:	4b31      	ldr	r3, [pc, #196]	; (800a854 <HAL_RCC_ClockConfig+0x358>)
 800a790:	69db      	ldr	r3, [r3, #28]
 800a792:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 800a796:	687b      	ldr	r3, [r7, #4]
 800a798:	695b      	ldr	r3, [r3, #20]
 800a79a:	492e      	ldr	r1, [pc, #184]	; (800a854 <HAL_RCC_ClockConfig+0x358>)
 800a79c:	4313      	orrs	r3, r2
 800a79e:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800a7a0:	687b      	ldr	r3, [r7, #4]
 800a7a2:	681b      	ldr	r3, [r3, #0]
 800a7a4:	f003 0310 	and.w	r3, r3, #16
 800a7a8:	2b00      	cmp	r3, #0
 800a7aa:	d010      	beq.n	800a7ce <HAL_RCC_ClockConfig+0x2d2>
  {
#if defined (RCC_D2CFGR_D2PPRE2)
    if ((RCC_ClkInitStruct->APB2CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 800a7ac:	687b      	ldr	r3, [r7, #4]
 800a7ae:	699a      	ldr	r2, [r3, #24]
 800a7b0:	4b28      	ldr	r3, [pc, #160]	; (800a854 <HAL_RCC_ClockConfig+0x358>)
 800a7b2:	69db      	ldr	r3, [r3, #28]
 800a7b4:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800a7b8:	429a      	cmp	r2, r3
 800a7ba:	d208      	bcs.n	800a7ce <HAL_RCC_ClockConfig+0x2d2>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 800a7bc:	4b25      	ldr	r3, [pc, #148]	; (800a854 <HAL_RCC_ClockConfig+0x358>)
 800a7be:	69db      	ldr	r3, [r3, #28]
 800a7c0:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 800a7c4:	687b      	ldr	r3, [r7, #4]
 800a7c6:	699b      	ldr	r3, [r3, #24]
 800a7c8:	4922      	ldr	r1, [pc, #136]	; (800a854 <HAL_RCC_ClockConfig+0x358>)
 800a7ca:	4313      	orrs	r3, r2
 800a7cc:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1/SRDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 800a7ce:	687b      	ldr	r3, [r7, #4]
 800a7d0:	681b      	ldr	r3, [r3, #0]
 800a7d2:	f003 0320 	and.w	r3, r3, #32
 800a7d6:	2b00      	cmp	r3, #0
 800a7d8:	d010      	beq.n	800a7fc <HAL_RCC_ClockConfig+0x300>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if ((RCC_ClkInitStruct->APB4CLKDivider) < (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 800a7da:	687b      	ldr	r3, [r7, #4]
 800a7dc:	69da      	ldr	r2, [r3, #28]
 800a7de:	4b1d      	ldr	r3, [pc, #116]	; (800a854 <HAL_RCC_ClockConfig+0x358>)
 800a7e0:	6a1b      	ldr	r3, [r3, #32]
 800a7e2:	f003 0370 	and.w	r3, r3, #112	; 0x70
 800a7e6:	429a      	cmp	r2, r3
 800a7e8:	d208      	bcs.n	800a7fc <HAL_RCC_ClockConfig+0x300>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 800a7ea:	4b1a      	ldr	r3, [pc, #104]	; (800a854 <HAL_RCC_ClockConfig+0x358>)
 800a7ec:	6a1b      	ldr	r3, [r3, #32]
 800a7ee:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 800a7f2:	687b      	ldr	r3, [r7, #4]
 800a7f4:	69db      	ldr	r3, [r3, #28]
 800a7f6:	4917      	ldr	r1, [pc, #92]	; (800a854 <HAL_RCC_ClockConfig+0x358>)
 800a7f8:	4313      	orrs	r3, r2
 800a7fa:	620b      	str	r3, [r1, #32]
#endif
  }

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 800a7fc:	f000 f844 	bl	800a888 <HAL_RCC_GetSysClockFreq>
 800a800:	4602      	mov	r2, r0
 800a802:	4b14      	ldr	r3, [pc, #80]	; (800a854 <HAL_RCC_ClockConfig+0x358>)
 800a804:	699b      	ldr	r3, [r3, #24]
 800a806:	0a1b      	lsrs	r3, r3, #8
 800a808:	f003 030f 	and.w	r3, r3, #15
 800a80c:	4912      	ldr	r1, [pc, #72]	; (800a858 <HAL_RCC_ClockConfig+0x35c>)
 800a80e:	5ccb      	ldrb	r3, [r1, r3]
 800a810:	f003 031f 	and.w	r3, r3, #31
 800a814:	fa22 f303 	lsr.w	r3, r2, r3
 800a818:	613b      	str	r3, [r7, #16]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 800a81a:	4b0e      	ldr	r3, [pc, #56]	; (800a854 <HAL_RCC_ClockConfig+0x358>)
 800a81c:	699b      	ldr	r3, [r3, #24]
 800a81e:	f003 030f 	and.w	r3, r3, #15
 800a822:	4a0d      	ldr	r2, [pc, #52]	; (800a858 <HAL_RCC_ClockConfig+0x35c>)
 800a824:	5cd3      	ldrb	r3, [r2, r3]
 800a826:	f003 031f 	and.w	r3, r3, #31
 800a82a:	693a      	ldr	r2, [r7, #16]
 800a82c:	fa22 f303 	lsr.w	r3, r2, r3
 800a830:	4a0a      	ldr	r2, [pc, #40]	; (800a85c <HAL_RCC_ClockConfig+0x360>)
 800a832:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 800a834:	4a0a      	ldr	r2, [pc, #40]	; (800a860 <HAL_RCC_ClockConfig+0x364>)
 800a836:	693b      	ldr	r3, [r7, #16]
 800a838:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Configure the source of time base considering new system clocks settings*/
  halstatus = HAL_InitTick(uwTickPrio);
 800a83a:	4b0a      	ldr	r3, [pc, #40]	; (800a864 <HAL_RCC_ClockConfig+0x368>)
 800a83c:	681b      	ldr	r3, [r3, #0]
 800a83e:	4618      	mov	r0, r3
 800a840:	f7f9 fc1c 	bl	800407c <HAL_InitTick>
 800a844:	4603      	mov	r3, r0
 800a846:	73fb      	strb	r3, [r7, #15]

  return halstatus;
 800a848:	7bfb      	ldrb	r3, [r7, #15]
}
 800a84a:	4618      	mov	r0, r3
 800a84c:	3718      	adds	r7, #24
 800a84e:	46bd      	mov	sp, r7
 800a850:	bd80      	pop	{r7, pc}
 800a852:	bf00      	nop
 800a854:	58024400 	.word	0x58024400
 800a858:	0801f3b8 	.word	0x0801f3b8
 800a85c:	20000014 	.word	0x20000014
 800a860:	20000010 	.word	0x20000010
 800a864:	20000024 	.word	0x20000024

0800a868 <HAL_RCC_EnableCSS>:
  *         allowing the MCU to perform rescue operations. The CSSI is linked to
  *         the Cortex-M NMI (Non-Mask-able Interrupt) exception vector.
  * @retval None
  */
void HAL_RCC_EnableCSS(void)
{
 800a868:	b480      	push	{r7}
 800a86a:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_CSSHSEON) ;
 800a86c:	4b05      	ldr	r3, [pc, #20]	; (800a884 <HAL_RCC_EnableCSS+0x1c>)
 800a86e:	681b      	ldr	r3, [r3, #0]
 800a870:	4a04      	ldr	r2, [pc, #16]	; (800a884 <HAL_RCC_EnableCSS+0x1c>)
 800a872:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800a876:	6013      	str	r3, [r2, #0]
}
 800a878:	bf00      	nop
 800a87a:	46bd      	mov	sp, r7
 800a87c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a880:	4770      	bx	lr
 800a882:	bf00      	nop
 800a884:	58024400 	.word	0x58024400

0800a888 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800a888:	b480      	push	{r7}
 800a88a:	b089      	sub	sp, #36	; 0x24
 800a88c:	af00      	add	r7, sp, #0
  float_t fracn1, pllvco;
  uint32_t sysclockfreq;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
 800a88e:	4bb3      	ldr	r3, [pc, #716]	; (800ab5c <HAL_RCC_GetSysClockFreq+0x2d4>)
 800a890:	691b      	ldr	r3, [r3, #16]
 800a892:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800a896:	2b18      	cmp	r3, #24
 800a898:	f200 8155 	bhi.w	800ab46 <HAL_RCC_GetSysClockFreq+0x2be>
 800a89c:	a201      	add	r2, pc, #4	; (adr r2, 800a8a4 <HAL_RCC_GetSysClockFreq+0x1c>)
 800a89e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a8a2:	bf00      	nop
 800a8a4:	0800a909 	.word	0x0800a909
 800a8a8:	0800ab47 	.word	0x0800ab47
 800a8ac:	0800ab47 	.word	0x0800ab47
 800a8b0:	0800ab47 	.word	0x0800ab47
 800a8b4:	0800ab47 	.word	0x0800ab47
 800a8b8:	0800ab47 	.word	0x0800ab47
 800a8bc:	0800ab47 	.word	0x0800ab47
 800a8c0:	0800ab47 	.word	0x0800ab47
 800a8c4:	0800a92f 	.word	0x0800a92f
 800a8c8:	0800ab47 	.word	0x0800ab47
 800a8cc:	0800ab47 	.word	0x0800ab47
 800a8d0:	0800ab47 	.word	0x0800ab47
 800a8d4:	0800ab47 	.word	0x0800ab47
 800a8d8:	0800ab47 	.word	0x0800ab47
 800a8dc:	0800ab47 	.word	0x0800ab47
 800a8e0:	0800ab47 	.word	0x0800ab47
 800a8e4:	0800a935 	.word	0x0800a935
 800a8e8:	0800ab47 	.word	0x0800ab47
 800a8ec:	0800ab47 	.word	0x0800ab47
 800a8f0:	0800ab47 	.word	0x0800ab47
 800a8f4:	0800ab47 	.word	0x0800ab47
 800a8f8:	0800ab47 	.word	0x0800ab47
 800a8fc:	0800ab47 	.word	0x0800ab47
 800a900:	0800ab47 	.word	0x0800ab47
 800a904:	0800a93b 	.word	0x0800a93b
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800a908:	4b94      	ldr	r3, [pc, #592]	; (800ab5c <HAL_RCC_GetSysClockFreq+0x2d4>)
 800a90a:	681b      	ldr	r3, [r3, #0]
 800a90c:	f003 0320 	and.w	r3, r3, #32
 800a910:	2b00      	cmp	r3, #0
 800a912:	d009      	beq.n	800a928 <HAL_RCC_GetSysClockFreq+0xa0>
      {
        sysclockfreq = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800a914:	4b91      	ldr	r3, [pc, #580]	; (800ab5c <HAL_RCC_GetSysClockFreq+0x2d4>)
 800a916:	681b      	ldr	r3, [r3, #0]
 800a918:	08db      	lsrs	r3, r3, #3
 800a91a:	f003 0303 	and.w	r3, r3, #3
 800a91e:	4a90      	ldr	r2, [pc, #576]	; (800ab60 <HAL_RCC_GetSysClockFreq+0x2d8>)
 800a920:	fa22 f303 	lsr.w	r3, r2, r3
 800a924:	61bb      	str	r3, [r7, #24]
      else
      {
        sysclockfreq = (uint32_t) HSI_VALUE;
      }

      break;
 800a926:	e111      	b.n	800ab4c <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = (uint32_t) HSI_VALUE;
 800a928:	4b8d      	ldr	r3, [pc, #564]	; (800ab60 <HAL_RCC_GetSysClockFreq+0x2d8>)
 800a92a:	61bb      	str	r3, [r7, #24]
      break;
 800a92c:	e10e      	b.n	800ab4c <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_CSI:  /* CSI used as system clock  source */
      sysclockfreq = CSI_VALUE;
 800a92e:	4b8d      	ldr	r3, [pc, #564]	; (800ab64 <HAL_RCC_GetSysClockFreq+0x2dc>)
 800a930:	61bb      	str	r3, [r7, #24]
      break;
 800a932:	e10b      	b.n	800ab4c <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
      sysclockfreq = HSE_VALUE;
 800a934:	4b8c      	ldr	r3, [pc, #560]	; (800ab68 <HAL_RCC_GetSysClockFreq+0x2e0>)
 800a936:	61bb      	str	r3, [r7, #24]
      break;
 800a938:	e108      	b.n	800ab4c <HAL_RCC_GetSysClockFreq+0x2c4>
    case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

      /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR
      */
      pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 800a93a:	4b88      	ldr	r3, [pc, #544]	; (800ab5c <HAL_RCC_GetSysClockFreq+0x2d4>)
 800a93c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a93e:	f003 0303 	and.w	r3, r3, #3
 800a942:	617b      	str	r3, [r7, #20]
      pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1) >> 4)  ;
 800a944:	4b85      	ldr	r3, [pc, #532]	; (800ab5c <HAL_RCC_GetSysClockFreq+0x2d4>)
 800a946:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a948:	091b      	lsrs	r3, r3, #4
 800a94a:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800a94e:	613b      	str	r3, [r7, #16]
      pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN) >> RCC_PLLCFGR_PLL1FRACEN_Pos);
 800a950:	4b82      	ldr	r3, [pc, #520]	; (800ab5c <HAL_RCC_GetSysClockFreq+0x2d4>)
 800a952:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a954:	f003 0301 	and.w	r3, r3, #1
 800a958:	60fb      	str	r3, [r7, #12]
      fracn1 = (float_t)(uint32_t)(pllfracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
 800a95a:	4b80      	ldr	r3, [pc, #512]	; (800ab5c <HAL_RCC_GetSysClockFreq+0x2d4>)
 800a95c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a95e:	08db      	lsrs	r3, r3, #3
 800a960:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800a964:	68fa      	ldr	r2, [r7, #12]
 800a966:	fb02 f303 	mul.w	r3, r2, r3
 800a96a:	ee07 3a90 	vmov	s15, r3
 800a96e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800a972:	edc7 7a02 	vstr	s15, [r7, #8]

      if (pllm != 0U)
 800a976:	693b      	ldr	r3, [r7, #16]
 800a978:	2b00      	cmp	r3, #0
 800a97a:	f000 80e1 	beq.w	800ab40 <HAL_RCC_GetSysClockFreq+0x2b8>
 800a97e:	697b      	ldr	r3, [r7, #20]
 800a980:	2b02      	cmp	r3, #2
 800a982:	f000 8083 	beq.w	800aa8c <HAL_RCC_GetSysClockFreq+0x204>
 800a986:	697b      	ldr	r3, [r7, #20]
 800a988:	2b02      	cmp	r3, #2
 800a98a:	f200 80a1 	bhi.w	800aad0 <HAL_RCC_GetSysClockFreq+0x248>
 800a98e:	697b      	ldr	r3, [r7, #20]
 800a990:	2b00      	cmp	r3, #0
 800a992:	d003      	beq.n	800a99c <HAL_RCC_GetSysClockFreq+0x114>
 800a994:	697b      	ldr	r3, [r7, #20]
 800a996:	2b01      	cmp	r3, #1
 800a998:	d056      	beq.n	800aa48 <HAL_RCC_GetSysClockFreq+0x1c0>
 800a99a:	e099      	b.n	800aad0 <HAL_RCC_GetSysClockFreq+0x248>
      {
        switch (pllsource)
        {
          case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

            if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800a99c:	4b6f      	ldr	r3, [pc, #444]	; (800ab5c <HAL_RCC_GetSysClockFreq+0x2d4>)
 800a99e:	681b      	ldr	r3, [r3, #0]
 800a9a0:	f003 0320 	and.w	r3, r3, #32
 800a9a4:	2b00      	cmp	r3, #0
 800a9a6:	d02d      	beq.n	800aa04 <HAL_RCC_GetSysClockFreq+0x17c>
            {
              hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800a9a8:	4b6c      	ldr	r3, [pc, #432]	; (800ab5c <HAL_RCC_GetSysClockFreq+0x2d4>)
 800a9aa:	681b      	ldr	r3, [r3, #0]
 800a9ac:	08db      	lsrs	r3, r3, #3
 800a9ae:	f003 0303 	and.w	r3, r3, #3
 800a9b2:	4a6b      	ldr	r2, [pc, #428]	; (800ab60 <HAL_RCC_GetSysClockFreq+0x2d8>)
 800a9b4:	fa22 f303 	lsr.w	r3, r2, r3
 800a9b8:	607b      	str	r3, [r7, #4]
              pllvco = ((float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800a9ba:	687b      	ldr	r3, [r7, #4]
 800a9bc:	ee07 3a90 	vmov	s15, r3
 800a9c0:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800a9c4:	693b      	ldr	r3, [r7, #16]
 800a9c6:	ee07 3a90 	vmov	s15, r3
 800a9ca:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800a9ce:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800a9d2:	4b62      	ldr	r3, [pc, #392]	; (800ab5c <HAL_RCC_GetSysClockFreq+0x2d4>)
 800a9d4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a9d6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800a9da:	ee07 3a90 	vmov	s15, r3
 800a9de:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800a9e2:	ed97 6a02 	vldr	s12, [r7, #8]
 800a9e6:	eddf 5a61 	vldr	s11, [pc, #388]	; 800ab6c <HAL_RCC_GetSysClockFreq+0x2e4>
 800a9ea:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800a9ee:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800a9f2:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800a9f6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800a9fa:	ee67 7a27 	vmul.f32	s15, s14, s15
 800a9fe:	edc7 7a07 	vstr	s15, [r7, #28]
            }
            else
            {
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
            }
            break;
 800aa02:	e087      	b.n	800ab14 <HAL_RCC_GetSysClockFreq+0x28c>
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800aa04:	693b      	ldr	r3, [r7, #16]
 800aa06:	ee07 3a90 	vmov	s15, r3
 800aa0a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800aa0e:	eddf 6a58 	vldr	s13, [pc, #352]	; 800ab70 <HAL_RCC_GetSysClockFreq+0x2e8>
 800aa12:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800aa16:	4b51      	ldr	r3, [pc, #324]	; (800ab5c <HAL_RCC_GetSysClockFreq+0x2d4>)
 800aa18:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800aa1a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800aa1e:	ee07 3a90 	vmov	s15, r3
 800aa22:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800aa26:	ed97 6a02 	vldr	s12, [r7, #8]
 800aa2a:	eddf 5a50 	vldr	s11, [pc, #320]	; 800ab6c <HAL_RCC_GetSysClockFreq+0x2e4>
 800aa2e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800aa32:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800aa36:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800aa3a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800aa3e:	ee67 7a27 	vmul.f32	s15, s14, s15
 800aa42:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 800aa46:	e065      	b.n	800ab14 <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800aa48:	693b      	ldr	r3, [r7, #16]
 800aa4a:	ee07 3a90 	vmov	s15, r3
 800aa4e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800aa52:	eddf 6a48 	vldr	s13, [pc, #288]	; 800ab74 <HAL_RCC_GetSysClockFreq+0x2ec>
 800aa56:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800aa5a:	4b40      	ldr	r3, [pc, #256]	; (800ab5c <HAL_RCC_GetSysClockFreq+0x2d4>)
 800aa5c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800aa5e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800aa62:	ee07 3a90 	vmov	s15, r3
 800aa66:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800aa6a:	ed97 6a02 	vldr	s12, [r7, #8]
 800aa6e:	eddf 5a3f 	vldr	s11, [pc, #252]	; 800ab6c <HAL_RCC_GetSysClockFreq+0x2e4>
 800aa72:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800aa76:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800aa7a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800aa7e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800aa82:	ee67 7a27 	vmul.f32	s15, s14, s15
 800aa86:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 800aa8a:	e043      	b.n	800ab14 <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
            pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800aa8c:	693b      	ldr	r3, [r7, #16]
 800aa8e:	ee07 3a90 	vmov	s15, r3
 800aa92:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800aa96:	eddf 6a38 	vldr	s13, [pc, #224]	; 800ab78 <HAL_RCC_GetSysClockFreq+0x2f0>
 800aa9a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800aa9e:	4b2f      	ldr	r3, [pc, #188]	; (800ab5c <HAL_RCC_GetSysClockFreq+0x2d4>)
 800aaa0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800aaa2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800aaa6:	ee07 3a90 	vmov	s15, r3
 800aaaa:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800aaae:	ed97 6a02 	vldr	s12, [r7, #8]
 800aab2:	eddf 5a2e 	vldr	s11, [pc, #184]	; 800ab6c <HAL_RCC_GetSysClockFreq+0x2e4>
 800aab6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800aaba:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800aabe:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800aac2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800aac6:	ee67 7a27 	vmul.f32	s15, s14, s15
 800aaca:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 800aace:	e021      	b.n	800ab14 <HAL_RCC_GetSysClockFreq+0x28c>

          default:
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800aad0:	693b      	ldr	r3, [r7, #16]
 800aad2:	ee07 3a90 	vmov	s15, r3
 800aad6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800aada:	eddf 6a26 	vldr	s13, [pc, #152]	; 800ab74 <HAL_RCC_GetSysClockFreq+0x2ec>
 800aade:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800aae2:	4b1e      	ldr	r3, [pc, #120]	; (800ab5c <HAL_RCC_GetSysClockFreq+0x2d4>)
 800aae4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800aae6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800aaea:	ee07 3a90 	vmov	s15, r3
 800aaee:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800aaf2:	ed97 6a02 	vldr	s12, [r7, #8]
 800aaf6:	eddf 5a1d 	vldr	s11, [pc, #116]	; 800ab6c <HAL_RCC_GetSysClockFreq+0x2e4>
 800aafa:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800aafe:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800ab02:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800ab06:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800ab0a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800ab0e:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 800ab12:	bf00      	nop
        }
        pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >> 9) + 1U) ;
 800ab14:	4b11      	ldr	r3, [pc, #68]	; (800ab5c <HAL_RCC_GetSysClockFreq+0x2d4>)
 800ab16:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800ab18:	0a5b      	lsrs	r3, r3, #9
 800ab1a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800ab1e:	3301      	adds	r3, #1
 800ab20:	603b      	str	r3, [r7, #0]
        sysclockfreq = (uint32_t)(float_t)(pllvco / (float_t)pllp);
 800ab22:	683b      	ldr	r3, [r7, #0]
 800ab24:	ee07 3a90 	vmov	s15, r3
 800ab28:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 800ab2c:	edd7 6a07 	vldr	s13, [r7, #28]
 800ab30:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800ab34:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800ab38:	ee17 3a90 	vmov	r3, s15
 800ab3c:	61bb      	str	r3, [r7, #24]
      }
      else
      {
        sysclockfreq = 0U;
      }
      break;
 800ab3e:	e005      	b.n	800ab4c <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = 0U;
 800ab40:	2300      	movs	r3, #0
 800ab42:	61bb      	str	r3, [r7, #24]
      break;
 800ab44:	e002      	b.n	800ab4c <HAL_RCC_GetSysClockFreq+0x2c4>

    default:
      sysclockfreq = CSI_VALUE;
 800ab46:	4b07      	ldr	r3, [pc, #28]	; (800ab64 <HAL_RCC_GetSysClockFreq+0x2dc>)
 800ab48:	61bb      	str	r3, [r7, #24]
      break;
 800ab4a:	bf00      	nop
  }

  return sysclockfreq;
 800ab4c:	69bb      	ldr	r3, [r7, #24]
}
 800ab4e:	4618      	mov	r0, r3
 800ab50:	3724      	adds	r7, #36	; 0x24
 800ab52:	46bd      	mov	sp, r7
 800ab54:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ab58:	4770      	bx	lr
 800ab5a:	bf00      	nop
 800ab5c:	58024400 	.word	0x58024400
 800ab60:	03d09000 	.word	0x03d09000
 800ab64:	003d0900 	.word	0x003d0900
 800ab68:	00989680 	.word	0x00989680
 800ab6c:	46000000 	.word	0x46000000
 800ab70:	4c742400 	.word	0x4c742400
 800ab74:	4a742400 	.word	0x4a742400
 800ab78:	4b189680 	.word	0x4b189680

0800ab7c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemD2Clock CMSIS variable is used to store System domain2 Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800ab7c:	b580      	push	{r7, lr}
 800ab7e:	b082      	sub	sp, #8
 800ab80:	af00      	add	r7, sp, #0
  uint32_t common_system_clock;

#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 800ab82:	f7ff fe81 	bl	800a888 <HAL_RCC_GetSysClockFreq>
 800ab86:	4602      	mov	r2, r0
 800ab88:	4b10      	ldr	r3, [pc, #64]	; (800abcc <HAL_RCC_GetHCLKFreq+0x50>)
 800ab8a:	699b      	ldr	r3, [r3, #24]
 800ab8c:	0a1b      	lsrs	r3, r3, #8
 800ab8e:	f003 030f 	and.w	r3, r3, #15
 800ab92:	490f      	ldr	r1, [pc, #60]	; (800abd0 <HAL_RCC_GetHCLKFreq+0x54>)
 800ab94:	5ccb      	ldrb	r3, [r1, r3]
 800ab96:	f003 031f 	and.w	r3, r3, #31
 800ab9a:	fa22 f303 	lsr.w	r3, r2, r3
 800ab9e:	607b      	str	r3, [r7, #4]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos] & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 800aba0:	4b0a      	ldr	r3, [pc, #40]	; (800abcc <HAL_RCC_GetHCLKFreq+0x50>)
 800aba2:	699b      	ldr	r3, [r3, #24]
 800aba4:	f003 030f 	and.w	r3, r3, #15
 800aba8:	4a09      	ldr	r2, [pc, #36]	; (800abd0 <HAL_RCC_GetHCLKFreq+0x54>)
 800abaa:	5cd3      	ldrb	r3, [r2, r3]
 800abac:	f003 031f 	and.w	r3, r3, #31
 800abb0:	687a      	ldr	r2, [r7, #4]
 800abb2:	fa22 f303 	lsr.w	r3, r2, r3
 800abb6:	4a07      	ldr	r2, [pc, #28]	; (800abd4 <HAL_RCC_GetHCLKFreq+0x58>)
 800abb8:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 800abba:	4a07      	ldr	r2, [pc, #28]	; (800abd8 <HAL_RCC_GetHCLKFreq+0x5c>)
 800abbc:	687b      	ldr	r3, [r7, #4]
 800abbe:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  return SystemD2Clock;
 800abc0:	4b04      	ldr	r3, [pc, #16]	; (800abd4 <HAL_RCC_GetHCLKFreq+0x58>)
 800abc2:	681b      	ldr	r3, [r3, #0]
}
 800abc4:	4618      	mov	r0, r3
 800abc6:	3708      	adds	r7, #8
 800abc8:	46bd      	mov	sp, r7
 800abca:	bd80      	pop	{r7, pc}
 800abcc:	58024400 	.word	0x58024400
 800abd0:	0801f3b8 	.word	0x0801f3b8
 800abd4:	20000014 	.word	0x20000014
 800abd8:	20000010 	.word	0x20000010

0800abdc <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800abdc:	b580      	push	{r7, lr}
 800abde:	af00      	add	r7, sp, #0
#if defined (RCC_D2CFGR_D2PPRE1)
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1) >> RCC_D2CFGR_D2PPRE1_Pos]) & 0x1FU));
 800abe0:	f7ff ffcc 	bl	800ab7c <HAL_RCC_GetHCLKFreq>
 800abe4:	4602      	mov	r2, r0
 800abe6:	4b06      	ldr	r3, [pc, #24]	; (800ac00 <HAL_RCC_GetPCLK1Freq+0x24>)
 800abe8:	69db      	ldr	r3, [r3, #28]
 800abea:	091b      	lsrs	r3, r3, #4
 800abec:	f003 0307 	and.w	r3, r3, #7
 800abf0:	4904      	ldr	r1, [pc, #16]	; (800ac04 <HAL_RCC_GetPCLK1Freq+0x28>)
 800abf2:	5ccb      	ldrb	r3, [r1, r3]
 800abf4:	f003 031f 	and.w	r3, r3, #31
 800abf8:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1) >> RCC_CDCFGR2_CDPPRE1_Pos]) & 0x1FU));
#endif
}
 800abfc:	4618      	mov	r0, r3
 800abfe:	bd80      	pop	{r7, pc}
 800ac00:	58024400 	.word	0x58024400
 800ac04:	0801f3b8 	.word	0x0801f3b8

0800ac08 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800ac08:	b580      	push	{r7, lr}
 800ac0a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
#if defined(RCC_D2CFGR_D2PPRE2)
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2) >> RCC_D2CFGR_D2PPRE2_Pos]) & 0x1FU));
 800ac0c:	f7ff ffb6 	bl	800ab7c <HAL_RCC_GetHCLKFreq>
 800ac10:	4602      	mov	r2, r0
 800ac12:	4b06      	ldr	r3, [pc, #24]	; (800ac2c <HAL_RCC_GetPCLK2Freq+0x24>)
 800ac14:	69db      	ldr	r3, [r3, #28]
 800ac16:	0a1b      	lsrs	r3, r3, #8
 800ac18:	f003 0307 	and.w	r3, r3, #7
 800ac1c:	4904      	ldr	r1, [pc, #16]	; (800ac30 <HAL_RCC_GetPCLK2Freq+0x28>)
 800ac1e:	5ccb      	ldrb	r3, [r1, r3]
 800ac20:	f003 031f 	and.w	r3, r3, #31
 800ac24:	fa22 f303 	lsr.w	r3, r2, r3
#else
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2) >> RCC_CDCFGR2_CDPPRE2_Pos]) & 0x1FU));
#endif
}
 800ac28:	4618      	mov	r0, r3
 800ac2a:	bd80      	pop	{r7, pc}
 800ac2c:	58024400 	.word	0x58024400
 800ac30:	0801f3b8 	.word	0x0801f3b8

0800ac34 <HAL_RCC_NMI_IRQHandler>:
  * @brief This function handles the RCC CSS interrupt request.
  * @note This API should be called under the NMI_Handler().
  * @retval None
  */
void HAL_RCC_NMI_IRQHandler(void)
{
 800ac34:	b580      	push	{r7, lr}
 800ac36:	af00      	add	r7, sp, #0
  /* Check RCC CSSF flag  */
  if (__HAL_RCC_GET_IT(RCC_IT_CSS))
 800ac38:	4b07      	ldr	r3, [pc, #28]	; (800ac58 <HAL_RCC_NMI_IRQHandler+0x24>)
 800ac3a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800ac3c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800ac40:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800ac44:	d105      	bne.n	800ac52 <HAL_RCC_NMI_IRQHandler+0x1e>
  {
    /* RCC Clock Security System interrupt user callback */
    HAL_RCC_CSSCallback();
 800ac46:	f000 f809 	bl	800ac5c <HAL_RCC_CSSCallback>

    /* Clear RCC CSS pending bit */
    __HAL_RCC_CLEAR_IT(RCC_IT_CSS);
 800ac4a:	4b03      	ldr	r3, [pc, #12]	; (800ac58 <HAL_RCC_NMI_IRQHandler+0x24>)
 800ac4c:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800ac50:	669a      	str	r2, [r3, #104]	; 0x68
  }
}
 800ac52:	bf00      	nop
 800ac54:	bd80      	pop	{r7, pc}
 800ac56:	bf00      	nop
 800ac58:	58024400 	.word	0x58024400

0800ac5c <HAL_RCC_CSSCallback>:
/**
  * @brief  RCC Clock Security System interrupt callback
  * @retval none
  */
__weak void HAL_RCC_CSSCallback(void)
{
 800ac5c:	b480      	push	{r7}
 800ac5e:	af00      	add	r7, sp, #0
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_RCC_CSSCallback could be implemented in the user file
   */
}
 800ac60:	bf00      	nop
 800ac62:	46bd      	mov	sp, r7
 800ac64:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ac68:	4770      	bx	lr
	...

0800ac6c <HAL_RCCEx_PeriphCLKConfig>:
  * (*) : Available on some STM32H7 lines only.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 800ac6c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800ac70:	b0ca      	sub	sp, #296	; 0x128
 800ac72:	af00      	add	r7, sp, #0
 800ac74:	f8c7 0114 	str.w	r0, [r7, #276]	; 0x114
  uint32_t tmpreg;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 800ac78:	2300      	movs	r3, #0
 800ac7a:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 800ac7e:	2300      	movs	r3, #0
 800ac80:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126

  /*---------------------------- SPDIFRX configuration -------------------------------*/

  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 800ac84:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800ac88:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ac8c:	f002 6400 	and.w	r4, r2, #134217728	; 0x8000000
 800ac90:	2500      	movs	r5, #0
 800ac92:	ea54 0305 	orrs.w	r3, r4, r5
 800ac96:	d049      	beq.n	800ad2c <HAL_RCCEx_PeriphCLKConfig+0xc0>
  {

    switch (PeriphClkInit->SpdifrxClockSelection)
 800ac98:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800ac9c:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800ac9e:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 800aca2:	d02f      	beq.n	800ad04 <HAL_RCCEx_PeriphCLKConfig+0x98>
 800aca4:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 800aca8:	d828      	bhi.n	800acfc <HAL_RCCEx_PeriphCLKConfig+0x90>
 800acaa:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800acae:	d01a      	beq.n	800ace6 <HAL_RCCEx_PeriphCLKConfig+0x7a>
 800acb0:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800acb4:	d822      	bhi.n	800acfc <HAL_RCCEx_PeriphCLKConfig+0x90>
 800acb6:	2b00      	cmp	r3, #0
 800acb8:	d003      	beq.n	800acc2 <HAL_RCCEx_PeriphCLKConfig+0x56>
 800acba:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800acbe:	d007      	beq.n	800acd0 <HAL_RCCEx_PeriphCLKConfig+0x64>
 800acc0:	e01c      	b.n	800acfc <HAL_RCCEx_PeriphCLKConfig+0x90>
    {
      case RCC_SPDIFRXCLKSOURCE_PLL:      /* PLL is used as clock source for SPDIFRX*/
        /* Enable PLL1Q Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800acc2:	4bb8      	ldr	r3, [pc, #736]	; (800afa4 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800acc4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800acc6:	4ab7      	ldr	r2, [pc, #732]	; (800afa4 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800acc8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800accc:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 800acce:	e01a      	b.n	800ad06 <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL2: /* PLL2 is used as clock source for SPDIFRX*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 800acd0:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800acd4:	3308      	adds	r3, #8
 800acd6:	2102      	movs	r1, #2
 800acd8:	4618      	mov	r0, r3
 800acda:	f002 fbb7 	bl	800d44c <RCCEx_PLL2_Config>
 800acde:	4603      	mov	r3, r0
 800ace0:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 800ace4:	e00f      	b.n	800ad06 <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPDIFRX*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800ace6:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800acea:	3328      	adds	r3, #40	; 0x28
 800acec:	2102      	movs	r1, #2
 800acee:	4618      	mov	r0, r3
 800acf0:	f002 fc5e 	bl	800d5b0 <RCCEx_PLL3_Config>
 800acf4:	4603      	mov	r3, r0
 800acf6:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 800acfa:	e004      	b.n	800ad06 <HAL_RCCEx_PeriphCLKConfig+0x9a>
        /* Internal OSC clock is used as source of SPDIFRX clock*/
        /* SPDIFRX clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800acfc:	2301      	movs	r3, #1
 800acfe:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 800ad02:	e000      	b.n	800ad06 <HAL_RCCEx_PeriphCLKConfig+0x9a>
        break;
 800ad04:	bf00      	nop
    }

    if (ret == HAL_OK)
 800ad06:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800ad0a:	2b00      	cmp	r3, #0
 800ad0c:	d10a      	bne.n	800ad24 <HAL_RCCEx_PeriphCLKConfig+0xb8>
    {
      /* Set the source of SPDIFRX clock*/
      __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifrxClockSelection);
 800ad0e:	4ba5      	ldr	r3, [pc, #660]	; (800afa4 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800ad10:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800ad12:	f423 1140 	bic.w	r1, r3, #3145728	; 0x300000
 800ad16:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800ad1a:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800ad1c:	4aa1      	ldr	r2, [pc, #644]	; (800afa4 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800ad1e:	430b      	orrs	r3, r1
 800ad20:	6513      	str	r3, [r2, #80]	; 0x50
 800ad22:	e003      	b.n	800ad2c <HAL_RCCEx_PeriphCLKConfig+0xc0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800ad24:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800ad28:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*---------------------------- SAI1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 800ad2c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800ad30:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ad34:	f402 7880 	and.w	r8, r2, #256	; 0x100
 800ad38:	f04f 0900 	mov.w	r9, #0
 800ad3c:	ea58 0309 	orrs.w	r3, r8, r9
 800ad40:	d047      	beq.n	800add2 <HAL_RCCEx_PeriphCLKConfig+0x166>
  {
    switch (PeriphClkInit->Sai1ClockSelection)
 800ad42:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800ad46:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800ad48:	2b04      	cmp	r3, #4
 800ad4a:	d82a      	bhi.n	800ada2 <HAL_RCCEx_PeriphCLKConfig+0x136>
 800ad4c:	a201      	add	r2, pc, #4	; (adr r2, 800ad54 <HAL_RCCEx_PeriphCLKConfig+0xe8>)
 800ad4e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ad52:	bf00      	nop
 800ad54:	0800ad69 	.word	0x0800ad69
 800ad58:	0800ad77 	.word	0x0800ad77
 800ad5c:	0800ad8d 	.word	0x0800ad8d
 800ad60:	0800adab 	.word	0x0800adab
 800ad64:	0800adab 	.word	0x0800adab
    {
      case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800ad68:	4b8e      	ldr	r3, [pc, #568]	; (800afa4 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800ad6a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ad6c:	4a8d      	ldr	r2, [pc, #564]	; (800afa4 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800ad6e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800ad72:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 800ad74:	e01a      	b.n	800adac <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800ad76:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800ad7a:	3308      	adds	r3, #8
 800ad7c:	2100      	movs	r1, #0
 800ad7e:	4618      	mov	r0, r3
 800ad80:	f002 fb64 	bl	800d44c <RCCEx_PLL2_Config>
 800ad84:	4603      	mov	r3, r0
 800ad86:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 800ad8a:	e00f      	b.n	800adac <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 800ad8c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800ad90:	3328      	adds	r3, #40	; 0x28
 800ad92:	2100      	movs	r1, #0
 800ad94:	4618      	mov	r0, r3
 800ad96:	f002 fc0b 	bl	800d5b0 <RCCEx_PLL3_Config>
 800ad9a:	4603      	mov	r3, r0
 800ad9c:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 800ada0:	e004      	b.n	800adac <HAL_RCCEx_PeriphCLKConfig+0x140>
        /* HSI, HSE, or CSI oscillator is used as source of SAI1 clock */
        /* SAI1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800ada2:	2301      	movs	r3, #1
 800ada4:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 800ada8:	e000      	b.n	800adac <HAL_RCCEx_PeriphCLKConfig+0x140>
        break;
 800adaa:	bf00      	nop
    }

    if (ret == HAL_OK)
 800adac:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800adb0:	2b00      	cmp	r3, #0
 800adb2:	d10a      	bne.n	800adca <HAL_RCCEx_PeriphCLKConfig+0x15e>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 800adb4:	4b7b      	ldr	r3, [pc, #492]	; (800afa4 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800adb6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800adb8:	f023 0107 	bic.w	r1, r3, #7
 800adbc:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800adc0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800adc2:	4a78      	ldr	r2, [pc, #480]	; (800afa4 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800adc4:	430b      	orrs	r3, r1
 800adc6:	6513      	str	r3, [r2, #80]	; 0x50
 800adc8:	e003      	b.n	800add2 <HAL_RCCEx_PeriphCLKConfig+0x166>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800adca:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800adce:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

#if defined(SAI3)
  /*---------------------------- SAI2/3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI23) == RCC_PERIPHCLK_SAI23)
 800add2:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800add6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800adda:	f402 7a00 	and.w	sl, r2, #512	; 0x200
 800adde:	f04f 0b00 	mov.w	fp, #0
 800ade2:	ea5a 030b 	orrs.w	r3, sl, fp
 800ade6:	d04c      	beq.n	800ae82 <HAL_RCCEx_PeriphCLKConfig+0x216>
  {
    switch (PeriphClkInit->Sai23ClockSelection)
 800ade8:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800adec:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800adee:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800adf2:	d030      	beq.n	800ae56 <HAL_RCCEx_PeriphCLKConfig+0x1ea>
 800adf4:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800adf8:	d829      	bhi.n	800ae4e <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 800adfa:	2bc0      	cmp	r3, #192	; 0xc0
 800adfc:	d02d      	beq.n	800ae5a <HAL_RCCEx_PeriphCLKConfig+0x1ee>
 800adfe:	2bc0      	cmp	r3, #192	; 0xc0
 800ae00:	d825      	bhi.n	800ae4e <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 800ae02:	2b80      	cmp	r3, #128	; 0x80
 800ae04:	d018      	beq.n	800ae38 <HAL_RCCEx_PeriphCLKConfig+0x1cc>
 800ae06:	2b80      	cmp	r3, #128	; 0x80
 800ae08:	d821      	bhi.n	800ae4e <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 800ae0a:	2b00      	cmp	r3, #0
 800ae0c:	d002      	beq.n	800ae14 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
 800ae0e:	2b40      	cmp	r3, #64	; 0x40
 800ae10:	d007      	beq.n	800ae22 <HAL_RCCEx_PeriphCLKConfig+0x1b6>
 800ae12:	e01c      	b.n	800ae4e <HAL_RCCEx_PeriphCLKConfig+0x1e2>
    {
      case RCC_SAI23CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2/3 */
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800ae14:	4b63      	ldr	r3, [pc, #396]	; (800afa4 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800ae16:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ae18:	4a62      	ldr	r2, [pc, #392]	; (800afa4 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800ae1a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800ae1e:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SAI2/3 clock source configuration done later after clock selection check */
        break;
 800ae20:	e01c      	b.n	800ae5c <HAL_RCCEx_PeriphCLKConfig+0x1f0>

      case RCC_SAI23CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2/3 */

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800ae22:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800ae26:	3308      	adds	r3, #8
 800ae28:	2100      	movs	r1, #0
 800ae2a:	4618      	mov	r0, r3
 800ae2c:	f002 fb0e 	bl	800d44c <RCCEx_PLL2_Config>
 800ae30:	4603      	mov	r3, r0
 800ae32:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SAI2/3 clock source configuration done later after clock selection check */
        break;
 800ae36:	e011      	b.n	800ae5c <HAL_RCCEx_PeriphCLKConfig+0x1f0>

      case RCC_SAI23CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2/3 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 800ae38:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800ae3c:	3328      	adds	r3, #40	; 0x28
 800ae3e:	2100      	movs	r1, #0
 800ae40:	4618      	mov	r0, r3
 800ae42:	f002 fbb5 	bl	800d5b0 <RCCEx_PLL3_Config>
 800ae46:	4603      	mov	r3, r0
 800ae48:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SAI2/3 clock source configuration done later after clock selection check */
        break;
 800ae4c:	e006      	b.n	800ae5c <HAL_RCCEx_PeriphCLKConfig+0x1f0>
        /* HSI, HSE, or CSI oscillator is used as source of SAI2/3 clock */
        /* SAI2/3 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800ae4e:	2301      	movs	r3, #1
 800ae50:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 800ae54:	e002      	b.n	800ae5c <HAL_RCCEx_PeriphCLKConfig+0x1f0>
        break;
 800ae56:	bf00      	nop
 800ae58:	e000      	b.n	800ae5c <HAL_RCCEx_PeriphCLKConfig+0x1f0>
        break;
 800ae5a:	bf00      	nop
    }

    if (ret == HAL_OK)
 800ae5c:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800ae60:	2b00      	cmp	r3, #0
 800ae62:	d10a      	bne.n	800ae7a <HAL_RCCEx_PeriphCLKConfig+0x20e>
    {
      /* Set the source of SAI2/3 clock*/
      __HAL_RCC_SAI23_CONFIG(PeriphClkInit->Sai23ClockSelection);
 800ae64:	4b4f      	ldr	r3, [pc, #316]	; (800afa4 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800ae66:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800ae68:	f423 71e0 	bic.w	r1, r3, #448	; 0x1c0
 800ae6c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800ae70:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800ae72:	4a4c      	ldr	r2, [pc, #304]	; (800afa4 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800ae74:	430b      	orrs	r3, r1
 800ae76:	6513      	str	r3, [r2, #80]	; 0x50
 800ae78:	e003      	b.n	800ae82 <HAL_RCCEx_PeriphCLKConfig+0x216>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800ae7a:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800ae7e:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
  }
#endif  /*SAI2B*/

#if defined(SAI4)
  /*---------------------------- SAI4A configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4A) == RCC_PERIPHCLK_SAI4A)
 800ae82:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800ae86:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ae8a:	f402 6380 	and.w	r3, r2, #1024	; 0x400
 800ae8e:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
 800ae92:	2300      	movs	r3, #0
 800ae94:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
 800ae98:	e9d7 1242 	ldrd	r1, r2, [r7, #264]	; 0x108
 800ae9c:	460b      	mov	r3, r1
 800ae9e:	4313      	orrs	r3, r2
 800aea0:	d053      	beq.n	800af4a <HAL_RCCEx_PeriphCLKConfig+0x2de>
  {
    switch (PeriphClkInit->Sai4AClockSelection)
 800aea2:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800aea6:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 800aeaa:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 800aeae:	d035      	beq.n	800af1c <HAL_RCCEx_PeriphCLKConfig+0x2b0>
 800aeb0:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 800aeb4:	d82e      	bhi.n	800af14 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 800aeb6:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 800aeba:	d031      	beq.n	800af20 <HAL_RCCEx_PeriphCLKConfig+0x2b4>
 800aebc:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 800aec0:	d828      	bhi.n	800af14 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 800aec2:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800aec6:	d01a      	beq.n	800aefe <HAL_RCCEx_PeriphCLKConfig+0x292>
 800aec8:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800aecc:	d822      	bhi.n	800af14 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 800aece:	2b00      	cmp	r3, #0
 800aed0:	d003      	beq.n	800aeda <HAL_RCCEx_PeriphCLKConfig+0x26e>
 800aed2:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800aed6:	d007      	beq.n	800aee8 <HAL_RCCEx_PeriphCLKConfig+0x27c>
 800aed8:	e01c      	b.n	800af14 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
    {
      case RCC_SAI4ACLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800aeda:	4b32      	ldr	r3, [pc, #200]	; (800afa4 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800aedc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800aede:	4a31      	ldr	r2, [pc, #196]	; (800afa4 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800aee0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800aee4:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 800aee6:	e01c      	b.n	800af22 <HAL_RCCEx_PeriphCLKConfig+0x2b6>

      case RCC_SAI4ACLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800aee8:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800aeec:	3308      	adds	r3, #8
 800aeee:	2100      	movs	r1, #0
 800aef0:	4618      	mov	r0, r3
 800aef2:	f002 faab 	bl	800d44c <RCCEx_PLL2_Config>
 800aef6:	4603      	mov	r3, r0
 800aef8:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SAI2 clock source configuration done later after clock selection check */
        break;
 800aefc:	e011      	b.n	800af22 <HAL_RCCEx_PeriphCLKConfig+0x2b6>

      case RCC_SAI4ACLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 800aefe:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800af02:	3328      	adds	r3, #40	; 0x28
 800af04:	2100      	movs	r1, #0
 800af06:	4618      	mov	r0, r3
 800af08:	f002 fb52 	bl	800d5b0 <RCCEx_PLL3_Config>
 800af0c:	4603      	mov	r3, r0
 800af0e:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 800af12:	e006      	b.n	800af22 <HAL_RCCEx_PeriphCLKConfig+0x2b6>
        /* SAI4A clock source configuration done later after clock selection check */
        break;
#endif /* RCC_VER_3_0 */

      default:
        ret = HAL_ERROR;
 800af14:	2301      	movs	r3, #1
 800af16:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 800af1a:	e002      	b.n	800af22 <HAL_RCCEx_PeriphCLKConfig+0x2b6>
        break;
 800af1c:	bf00      	nop
 800af1e:	e000      	b.n	800af22 <HAL_RCCEx_PeriphCLKConfig+0x2b6>
        break;
 800af20:	bf00      	nop
    }

    if (ret == HAL_OK)
 800af22:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800af26:	2b00      	cmp	r3, #0
 800af28:	d10b      	bne.n	800af42 <HAL_RCCEx_PeriphCLKConfig+0x2d6>
    {
      /* Set the source of SAI4A clock*/
      __HAL_RCC_SAI4A_CONFIG(PeriphClkInit->Sai4AClockSelection);
 800af2a:	4b1e      	ldr	r3, [pc, #120]	; (800afa4 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800af2c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800af2e:	f423 0160 	bic.w	r1, r3, #14680064	; 0xe00000
 800af32:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800af36:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 800af3a:	4a1a      	ldr	r2, [pc, #104]	; (800afa4 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800af3c:	430b      	orrs	r3, r1
 800af3e:	6593      	str	r3, [r2, #88]	; 0x58
 800af40:	e003      	b.n	800af4a <HAL_RCCEx_PeriphCLKConfig+0x2de>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800af42:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800af46:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }
  /*---------------------------- SAI4B configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4B) == RCC_PERIPHCLK_SAI4B)
 800af4a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800af4e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800af52:	f402 6300 	and.w	r3, r2, #2048	; 0x800
 800af56:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 800af5a:	2300      	movs	r3, #0
 800af5c:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 800af60:	e9d7 1240 	ldrd	r1, r2, [r7, #256]	; 0x100
 800af64:	460b      	mov	r3, r1
 800af66:	4313      	orrs	r3, r2
 800af68:	d056      	beq.n	800b018 <HAL_RCCEx_PeriphCLKConfig+0x3ac>
  {
    switch (PeriphClkInit->Sai4BClockSelection)
 800af6a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800af6e:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 800af72:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800af76:	d038      	beq.n	800afea <HAL_RCCEx_PeriphCLKConfig+0x37e>
 800af78:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800af7c:	d831      	bhi.n	800afe2 <HAL_RCCEx_PeriphCLKConfig+0x376>
 800af7e:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 800af82:	d034      	beq.n	800afee <HAL_RCCEx_PeriphCLKConfig+0x382>
 800af84:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 800af88:	d82b      	bhi.n	800afe2 <HAL_RCCEx_PeriphCLKConfig+0x376>
 800af8a:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800af8e:	d01d      	beq.n	800afcc <HAL_RCCEx_PeriphCLKConfig+0x360>
 800af90:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800af94:	d825      	bhi.n	800afe2 <HAL_RCCEx_PeriphCLKConfig+0x376>
 800af96:	2b00      	cmp	r3, #0
 800af98:	d006      	beq.n	800afa8 <HAL_RCCEx_PeriphCLKConfig+0x33c>
 800af9a:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800af9e:	d00a      	beq.n	800afb6 <HAL_RCCEx_PeriphCLKConfig+0x34a>
 800afa0:	e01f      	b.n	800afe2 <HAL_RCCEx_PeriphCLKConfig+0x376>
 800afa2:	bf00      	nop
 800afa4:	58024400 	.word	0x58024400
    {
      case RCC_SAI4BCLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800afa8:	4ba2      	ldr	r3, [pc, #648]	; (800b234 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800afaa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800afac:	4aa1      	ldr	r2, [pc, #644]	; (800b234 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800afae:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800afb2:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 800afb4:	e01c      	b.n	800aff0 <HAL_RCCEx_PeriphCLKConfig+0x384>

      case RCC_SAI4BCLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800afb6:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800afba:	3308      	adds	r3, #8
 800afbc:	2100      	movs	r1, #0
 800afbe:	4618      	mov	r0, r3
 800afc0:	f002 fa44 	bl	800d44c <RCCEx_PLL2_Config>
 800afc4:	4603      	mov	r3, r0
 800afc6:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SAI2 clock source configuration done later after clock selection check */
        break;
 800afca:	e011      	b.n	800aff0 <HAL_RCCEx_PeriphCLKConfig+0x384>

      case RCC_SAI4BCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 800afcc:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800afd0:	3328      	adds	r3, #40	; 0x28
 800afd2:	2100      	movs	r1, #0
 800afd4:	4618      	mov	r0, r3
 800afd6:	f002 faeb 	bl	800d5b0 <RCCEx_PLL3_Config>
 800afda:	4603      	mov	r3, r0
 800afdc:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 800afe0:	e006      	b.n	800aff0 <HAL_RCCEx_PeriphCLKConfig+0x384>
        /* SAI4B clock source configuration done later after clock selection check */
        break;
#endif /* RCC_VER_3_0 */

      default:
        ret = HAL_ERROR;
 800afe2:	2301      	movs	r3, #1
 800afe4:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 800afe8:	e002      	b.n	800aff0 <HAL_RCCEx_PeriphCLKConfig+0x384>
        break;
 800afea:	bf00      	nop
 800afec:	e000      	b.n	800aff0 <HAL_RCCEx_PeriphCLKConfig+0x384>
        break;
 800afee:	bf00      	nop
    }

    if (ret == HAL_OK)
 800aff0:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800aff4:	2b00      	cmp	r3, #0
 800aff6:	d10b      	bne.n	800b010 <HAL_RCCEx_PeriphCLKConfig+0x3a4>
    {
      /* Set the source of SAI4B clock*/
      __HAL_RCC_SAI4B_CONFIG(PeriphClkInit->Sai4BClockSelection);
 800aff8:	4b8e      	ldr	r3, [pc, #568]	; (800b234 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800affa:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800affc:	f023 61e0 	bic.w	r1, r3, #117440512	; 0x7000000
 800b000:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800b004:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 800b008:	4a8a      	ldr	r2, [pc, #552]	; (800b234 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800b00a:	430b      	orrs	r3, r1
 800b00c:	6593      	str	r3, [r2, #88]	; 0x58
 800b00e:	e003      	b.n	800b018 <HAL_RCCEx_PeriphCLKConfig+0x3ac>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800b010:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800b014:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
  }
#endif  /*SAI4*/

#if defined(QUADSPI)
  /*---------------------------- QSPI configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 800b018:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800b01c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b020:	f002 7300 	and.w	r3, r2, #33554432	; 0x2000000
 800b024:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 800b028:	2300      	movs	r3, #0
 800b02a:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 800b02e:	e9d7 123e 	ldrd	r1, r2, [r7, #248]	; 0xf8
 800b032:	460b      	mov	r3, r1
 800b034:	4313      	orrs	r3, r2
 800b036:	d03a      	beq.n	800b0ae <HAL_RCCEx_PeriphCLKConfig+0x442>
  {
    switch (PeriphClkInit->QspiClockSelection)
 800b038:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800b03c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800b03e:	2b30      	cmp	r3, #48	; 0x30
 800b040:	d01f      	beq.n	800b082 <HAL_RCCEx_PeriphCLKConfig+0x416>
 800b042:	2b30      	cmp	r3, #48	; 0x30
 800b044:	d819      	bhi.n	800b07a <HAL_RCCEx_PeriphCLKConfig+0x40e>
 800b046:	2b20      	cmp	r3, #32
 800b048:	d00c      	beq.n	800b064 <HAL_RCCEx_PeriphCLKConfig+0x3f8>
 800b04a:	2b20      	cmp	r3, #32
 800b04c:	d815      	bhi.n	800b07a <HAL_RCCEx_PeriphCLKConfig+0x40e>
 800b04e:	2b00      	cmp	r3, #0
 800b050:	d019      	beq.n	800b086 <HAL_RCCEx_PeriphCLKConfig+0x41a>
 800b052:	2b10      	cmp	r3, #16
 800b054:	d111      	bne.n	800b07a <HAL_RCCEx_PeriphCLKConfig+0x40e>
    {
      case RCC_QSPICLKSOURCE_PLL:      /* PLL is used as clock source for QSPI*/
        /* Enable QSPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800b056:	4b77      	ldr	r3, [pc, #476]	; (800b234 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800b058:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b05a:	4a76      	ldr	r2, [pc, #472]	; (800b234 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800b05c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800b060:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* QSPI clock source configuration done later after clock selection check */
        break;
 800b062:	e011      	b.n	800b088 <HAL_RCCEx_PeriphCLKConfig+0x41c>

      case RCC_QSPICLKSOURCE_PLL2: /* PLL2 is used as clock source for QSPI*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 800b064:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800b068:	3308      	adds	r3, #8
 800b06a:	2102      	movs	r1, #2
 800b06c:	4618      	mov	r0, r3
 800b06e:	f002 f9ed 	bl	800d44c <RCCEx_PLL2_Config>
 800b072:	4603      	mov	r3, r0
 800b074:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* QSPI clock source configuration done later after clock selection check */
        break;
 800b078:	e006      	b.n	800b088 <HAL_RCCEx_PeriphCLKConfig+0x41c>
      case RCC_QSPICLKSOURCE_D1HCLK:
        /* Domain1 HCLK  clock selected as QSPI kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 800b07a:	2301      	movs	r3, #1
 800b07c:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 800b080:	e002      	b.n	800b088 <HAL_RCCEx_PeriphCLKConfig+0x41c>
        break;
 800b082:	bf00      	nop
 800b084:	e000      	b.n	800b088 <HAL_RCCEx_PeriphCLKConfig+0x41c>
        break;
 800b086:	bf00      	nop
    }

    if (ret == HAL_OK)
 800b088:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800b08c:	2b00      	cmp	r3, #0
 800b08e:	d10a      	bne.n	800b0a6 <HAL_RCCEx_PeriphCLKConfig+0x43a>
    {
      /* Set the source of QSPI clock*/
      __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 800b090:	4b68      	ldr	r3, [pc, #416]	; (800b234 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800b092:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800b094:	f023 0130 	bic.w	r1, r3, #48	; 0x30
 800b098:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800b09c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800b09e:	4a65      	ldr	r2, [pc, #404]	; (800b234 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800b0a0:	430b      	orrs	r3, r1
 800b0a2:	64d3      	str	r3, [r2, #76]	; 0x4c
 800b0a4:	e003      	b.n	800b0ae <HAL_RCCEx_PeriphCLKConfig+0x442>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800b0a6:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800b0aa:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }
#endif  /*OCTOSPI*/

  /*---------------------------- SPI1/2/3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI123) == RCC_PERIPHCLK_SPI123)
 800b0ae:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800b0b2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b0b6:	f402 5380 	and.w	r3, r2, #4096	; 0x1000
 800b0ba:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 800b0be:	2300      	movs	r3, #0
 800b0c0:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 800b0c4:	e9d7 123c 	ldrd	r1, r2, [r7, #240]	; 0xf0
 800b0c8:	460b      	mov	r3, r1
 800b0ca:	4313      	orrs	r3, r2
 800b0cc:	d051      	beq.n	800b172 <HAL_RCCEx_PeriphCLKConfig+0x506>
  {
    switch (PeriphClkInit->Spi123ClockSelection)
 800b0ce:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800b0d2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800b0d4:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800b0d8:	d035      	beq.n	800b146 <HAL_RCCEx_PeriphCLKConfig+0x4da>
 800b0da:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800b0de:	d82e      	bhi.n	800b13e <HAL_RCCEx_PeriphCLKConfig+0x4d2>
 800b0e0:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 800b0e4:	d031      	beq.n	800b14a <HAL_RCCEx_PeriphCLKConfig+0x4de>
 800b0e6:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 800b0ea:	d828      	bhi.n	800b13e <HAL_RCCEx_PeriphCLKConfig+0x4d2>
 800b0ec:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800b0f0:	d01a      	beq.n	800b128 <HAL_RCCEx_PeriphCLKConfig+0x4bc>
 800b0f2:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800b0f6:	d822      	bhi.n	800b13e <HAL_RCCEx_PeriphCLKConfig+0x4d2>
 800b0f8:	2b00      	cmp	r3, #0
 800b0fa:	d003      	beq.n	800b104 <HAL_RCCEx_PeriphCLKConfig+0x498>
 800b0fc:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800b100:	d007      	beq.n	800b112 <HAL_RCCEx_PeriphCLKConfig+0x4a6>
 800b102:	e01c      	b.n	800b13e <HAL_RCCEx_PeriphCLKConfig+0x4d2>
    {
      case RCC_SPI123CLKSOURCE_PLL:      /* PLL is used as clock source for SPI1/2/3 */
        /* Enable SPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800b104:	4b4b      	ldr	r3, [pc, #300]	; (800b234 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800b106:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b108:	4a4a      	ldr	r2, [pc, #296]	; (800b234 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800b10a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800b10e:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 800b110:	e01c      	b.n	800b14c <HAL_RCCEx_PeriphCLKConfig+0x4e0>

      case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800b112:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800b116:	3308      	adds	r3, #8
 800b118:	2100      	movs	r1, #0
 800b11a:	4618      	mov	r0, r3
 800b11c:	f002 f996 	bl	800d44c <RCCEx_PLL2_Config>
 800b120:	4603      	mov	r3, r0
 800b122:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 800b126:	e011      	b.n	800b14c <HAL_RCCEx_PeriphCLKConfig+0x4e0>

      case RCC_SPI123CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 800b128:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800b12c:	3328      	adds	r3, #40	; 0x28
 800b12e:	2100      	movs	r1, #0
 800b130:	4618      	mov	r0, r3
 800b132:	f002 fa3d 	bl	800d5b0 <RCCEx_PLL3_Config>
 800b136:	4603      	mov	r3, r0
 800b138:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 800b13c:	e006      	b.n	800b14c <HAL_RCCEx_PeriphCLKConfig+0x4e0>
        /* HSI, HSE, or CSI oscillator is used as source of SPI1/2/3 clock */
        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800b13e:	2301      	movs	r3, #1
 800b140:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 800b144:	e002      	b.n	800b14c <HAL_RCCEx_PeriphCLKConfig+0x4e0>
        break;
 800b146:	bf00      	nop
 800b148:	e000      	b.n	800b14c <HAL_RCCEx_PeriphCLKConfig+0x4e0>
        break;
 800b14a:	bf00      	nop
    }

    if (ret == HAL_OK)
 800b14c:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800b150:	2b00      	cmp	r3, #0
 800b152:	d10a      	bne.n	800b16a <HAL_RCCEx_PeriphCLKConfig+0x4fe>
    {
      /* Set the source of SPI1/2/3 clock*/
      __HAL_RCC_SPI123_CONFIG(PeriphClkInit->Spi123ClockSelection);
 800b154:	4b37      	ldr	r3, [pc, #220]	; (800b234 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800b156:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800b158:	f423 41e0 	bic.w	r1, r3, #28672	; 0x7000
 800b15c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800b160:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800b162:	4a34      	ldr	r2, [pc, #208]	; (800b234 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800b164:	430b      	orrs	r3, r1
 800b166:	6513      	str	r3, [r2, #80]	; 0x50
 800b168:	e003      	b.n	800b172 <HAL_RCCEx_PeriphCLKConfig+0x506>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800b16a:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800b16e:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*---------------------------- SPI4/5 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI45) == RCC_PERIPHCLK_SPI45)
 800b172:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800b176:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b17a:	f402 5300 	and.w	r3, r2, #8192	; 0x2000
 800b17e:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 800b182:	2300      	movs	r3, #0
 800b184:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 800b188:	e9d7 123a 	ldrd	r1, r2, [r7, #232]	; 0xe8
 800b18c:	460b      	mov	r3, r1
 800b18e:	4313      	orrs	r3, r2
 800b190:	d056      	beq.n	800b240 <HAL_RCCEx_PeriphCLKConfig+0x5d4>
  {
    switch (PeriphClkInit->Spi45ClockSelection)
 800b192:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800b196:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800b198:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800b19c:	d033      	beq.n	800b206 <HAL_RCCEx_PeriphCLKConfig+0x59a>
 800b19e:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800b1a2:	d82c      	bhi.n	800b1fe <HAL_RCCEx_PeriphCLKConfig+0x592>
 800b1a4:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 800b1a8:	d02f      	beq.n	800b20a <HAL_RCCEx_PeriphCLKConfig+0x59e>
 800b1aa:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 800b1ae:	d826      	bhi.n	800b1fe <HAL_RCCEx_PeriphCLKConfig+0x592>
 800b1b0:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 800b1b4:	d02b      	beq.n	800b20e <HAL_RCCEx_PeriphCLKConfig+0x5a2>
 800b1b6:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 800b1ba:	d820      	bhi.n	800b1fe <HAL_RCCEx_PeriphCLKConfig+0x592>
 800b1bc:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800b1c0:	d012      	beq.n	800b1e8 <HAL_RCCEx_PeriphCLKConfig+0x57c>
 800b1c2:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800b1c6:	d81a      	bhi.n	800b1fe <HAL_RCCEx_PeriphCLKConfig+0x592>
 800b1c8:	2b00      	cmp	r3, #0
 800b1ca:	d022      	beq.n	800b212 <HAL_RCCEx_PeriphCLKConfig+0x5a6>
 800b1cc:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800b1d0:	d115      	bne.n	800b1fe <HAL_RCCEx_PeriphCLKConfig+0x592>
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI4/5 */

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800b1d2:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800b1d6:	3308      	adds	r3, #8
 800b1d8:	2101      	movs	r1, #1
 800b1da:	4618      	mov	r0, r3
 800b1dc:	f002 f936 	bl	800d44c <RCCEx_PLL2_Config>
 800b1e0:	4603      	mov	r3, r0
 800b1e2:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 800b1e6:	e015      	b.n	800b214 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
      case RCC_SPI45CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800b1e8:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800b1ec:	3328      	adds	r3, #40	; 0x28
 800b1ee:	2101      	movs	r1, #1
 800b1f0:	4618      	mov	r0, r3
 800b1f2:	f002 f9dd 	bl	800d5b0 <RCCEx_PLL3_Config>
 800b1f6:	4603      	mov	r3, r0
 800b1f8:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 800b1fc:	e00a      	b.n	800b214 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        /* HSE,  oscillator is used as source of SPI4/5 clock */
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800b1fe:	2301      	movs	r3, #1
 800b200:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 800b204:	e006      	b.n	800b214 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 800b206:	bf00      	nop
 800b208:	e004      	b.n	800b214 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 800b20a:	bf00      	nop
 800b20c:	e002      	b.n	800b214 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 800b20e:	bf00      	nop
 800b210:	e000      	b.n	800b214 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 800b212:	bf00      	nop
    }

    if (ret == HAL_OK)
 800b214:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800b218:	2b00      	cmp	r3, #0
 800b21a:	d10d      	bne.n	800b238 <HAL_RCCEx_PeriphCLKConfig+0x5cc>
    {
      /* Set the source of SPI4/5 clock*/
      __HAL_RCC_SPI45_CONFIG(PeriphClkInit->Spi45ClockSelection);
 800b21c:	4b05      	ldr	r3, [pc, #20]	; (800b234 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800b21e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800b220:	f423 21e0 	bic.w	r1, r3, #458752	; 0x70000
 800b224:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800b228:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800b22a:	4a02      	ldr	r2, [pc, #8]	; (800b234 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800b22c:	430b      	orrs	r3, r1
 800b22e:	6513      	str	r3, [r2, #80]	; 0x50
 800b230:	e006      	b.n	800b240 <HAL_RCCEx_PeriphCLKConfig+0x5d4>
 800b232:	bf00      	nop
 800b234:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 800b238:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800b23c:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*---------------------------- SPI6 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 800b240:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800b244:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b248:	f402 4380 	and.w	r3, r2, #16384	; 0x4000
 800b24c:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 800b250:	2300      	movs	r3, #0
 800b252:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 800b256:	e9d7 1238 	ldrd	r1, r2, [r7, #224]	; 0xe0
 800b25a:	460b      	mov	r3, r1
 800b25c:	4313      	orrs	r3, r2
 800b25e:	d055      	beq.n	800b30c <HAL_RCCEx_PeriphCLKConfig+0x6a0>
  {
    switch (PeriphClkInit->Spi6ClockSelection)
 800b260:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800b264:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 800b268:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800b26c:	d033      	beq.n	800b2d6 <HAL_RCCEx_PeriphCLKConfig+0x66a>
 800b26e:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800b272:	d82c      	bhi.n	800b2ce <HAL_RCCEx_PeriphCLKConfig+0x662>
 800b274:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800b278:	d02f      	beq.n	800b2da <HAL_RCCEx_PeriphCLKConfig+0x66e>
 800b27a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800b27e:	d826      	bhi.n	800b2ce <HAL_RCCEx_PeriphCLKConfig+0x662>
 800b280:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 800b284:	d02b      	beq.n	800b2de <HAL_RCCEx_PeriphCLKConfig+0x672>
 800b286:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 800b28a:	d820      	bhi.n	800b2ce <HAL_RCCEx_PeriphCLKConfig+0x662>
 800b28c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800b290:	d012      	beq.n	800b2b8 <HAL_RCCEx_PeriphCLKConfig+0x64c>
 800b292:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800b296:	d81a      	bhi.n	800b2ce <HAL_RCCEx_PeriphCLKConfig+0x662>
 800b298:	2b00      	cmp	r3, #0
 800b29a:	d022      	beq.n	800b2e2 <HAL_RCCEx_PeriphCLKConfig+0x676>
 800b29c:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800b2a0:	d115      	bne.n	800b2ce <HAL_RCCEx_PeriphCLKConfig+0x662>
        /* SPI6 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI6*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800b2a2:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800b2a6:	3308      	adds	r3, #8
 800b2a8:	2101      	movs	r1, #1
 800b2aa:	4618      	mov	r0, r3
 800b2ac:	f002 f8ce 	bl	800d44c <RCCEx_PLL2_Config>
 800b2b0:	4603      	mov	r3, r0
 800b2b2:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SPI6 clock source configuration done later after clock selection check */
        break;
 800b2b6:	e015      	b.n	800b2e4 <HAL_RCCEx_PeriphCLKConfig+0x678>
      case RCC_SPI6CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI6*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800b2b8:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800b2bc:	3328      	adds	r3, #40	; 0x28
 800b2be:	2101      	movs	r1, #1
 800b2c0:	4618      	mov	r0, r3
 800b2c2:	f002 f975 	bl	800d5b0 <RCCEx_PLL3_Config>
 800b2c6:	4603      	mov	r3, r0
 800b2c8:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        /* SPI6 clock source configuration done later after clock selection check */
        break;
 800b2cc:	e00a      	b.n	800b2e4 <HAL_RCCEx_PeriphCLKConfig+0x678>
        /* SPI6 clock source configuration done later after clock selection check */
        break;
#endif

      default:
        ret = HAL_ERROR;
 800b2ce:	2301      	movs	r3, #1
 800b2d0:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 800b2d4:	e006      	b.n	800b2e4 <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 800b2d6:	bf00      	nop
 800b2d8:	e004      	b.n	800b2e4 <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 800b2da:	bf00      	nop
 800b2dc:	e002      	b.n	800b2e4 <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 800b2de:	bf00      	nop
 800b2e0:	e000      	b.n	800b2e4 <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 800b2e2:	bf00      	nop
    }

    if (ret == HAL_OK)
 800b2e4:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800b2e8:	2b00      	cmp	r3, #0
 800b2ea:	d10b      	bne.n	800b304 <HAL_RCCEx_PeriphCLKConfig+0x698>
    {
      /* Set the source of SPI6 clock*/
      __HAL_RCC_SPI6_CONFIG(PeriphClkInit->Spi6ClockSelection);
 800b2ec:	4ba3      	ldr	r3, [pc, #652]	; (800b57c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800b2ee:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800b2f0:	f023 41e0 	bic.w	r1, r3, #1879048192	; 0x70000000
 800b2f4:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800b2f8:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 800b2fc:	4a9f      	ldr	r2, [pc, #636]	; (800b57c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800b2fe:	430b      	orrs	r3, r1
 800b300:	6593      	str	r3, [r2, #88]	; 0x58
 800b302:	e003      	b.n	800b30c <HAL_RCCEx_PeriphCLKConfig+0x6a0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800b304:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800b308:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
  }
#endif /*DSI*/

#if defined(FDCAN1) || defined(FDCAN2)
  /*---------------------------- FDCAN configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 800b30c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800b310:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b314:	f402 4300 	and.w	r3, r2, #32768	; 0x8000
 800b318:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 800b31c:	2300      	movs	r3, #0
 800b31e:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 800b322:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 800b326:	460b      	mov	r3, r1
 800b328:	4313      	orrs	r3, r2
 800b32a:	d037      	beq.n	800b39c <HAL_RCCEx_PeriphCLKConfig+0x730>
  {
    switch (PeriphClkInit->FdcanClockSelection)
 800b32c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800b330:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800b332:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800b336:	d00e      	beq.n	800b356 <HAL_RCCEx_PeriphCLKConfig+0x6ea>
 800b338:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800b33c:	d816      	bhi.n	800b36c <HAL_RCCEx_PeriphCLKConfig+0x700>
 800b33e:	2b00      	cmp	r3, #0
 800b340:	d018      	beq.n	800b374 <HAL_RCCEx_PeriphCLKConfig+0x708>
 800b342:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800b346:	d111      	bne.n	800b36c <HAL_RCCEx_PeriphCLKConfig+0x700>
    {
      case RCC_FDCANCLKSOURCE_PLL:      /* PLL is used as clock source for FDCAN*/
        /* Enable FDCAN Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800b348:	4b8c      	ldr	r3, [pc, #560]	; (800b57c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800b34a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b34c:	4a8b      	ldr	r2, [pc, #556]	; (800b57c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800b34e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800b352:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 800b354:	e00f      	b.n	800b376 <HAL_RCCEx_PeriphCLKConfig+0x70a>

      case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is used as clock source for FDCAN*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800b356:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800b35a:	3308      	adds	r3, #8
 800b35c:	2101      	movs	r1, #1
 800b35e:	4618      	mov	r0, r3
 800b360:	f002 f874 	bl	800d44c <RCCEx_PLL2_Config>
 800b364:	4603      	mov	r3, r0
 800b366:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 800b36a:	e004      	b.n	800b376 <HAL_RCCEx_PeriphCLKConfig+0x70a>
        /* HSE is used as clock source for FDCAN*/
        /* FDCAN clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800b36c:	2301      	movs	r3, #1
 800b36e:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 800b372:	e000      	b.n	800b376 <HAL_RCCEx_PeriphCLKConfig+0x70a>
        break;
 800b374:	bf00      	nop
    }

    if (ret == HAL_OK)
 800b376:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800b37a:	2b00      	cmp	r3, #0
 800b37c:	d10a      	bne.n	800b394 <HAL_RCCEx_PeriphCLKConfig+0x728>
    {
      /* Set the source of FDCAN clock*/
      __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 800b37e:	4b7f      	ldr	r3, [pc, #508]	; (800b57c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800b380:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800b382:	f023 5140 	bic.w	r1, r3, #805306368	; 0x30000000
 800b386:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800b38a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800b38c:	4a7b      	ldr	r2, [pc, #492]	; (800b57c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800b38e:	430b      	orrs	r3, r1
 800b390:	6513      	str	r3, [r2, #80]	; 0x50
 800b392:	e003      	b.n	800b39c <HAL_RCCEx_PeriphCLKConfig+0x730>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800b394:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800b398:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }
#endif /*FDCAN1 || FDCAN2*/

  /*---------------------------- FMC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMC) == RCC_PERIPHCLK_FMC)
 800b39c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800b3a0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b3a4:	f002 7380 	and.w	r3, r2, #16777216	; 0x1000000
 800b3a8:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 800b3ac:	2300      	movs	r3, #0
 800b3ae:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
 800b3b2:	e9d7 1234 	ldrd	r1, r2, [r7, #208]	; 0xd0
 800b3b6:	460b      	mov	r3, r1
 800b3b8:	4313      	orrs	r3, r2
 800b3ba:	d039      	beq.n	800b430 <HAL_RCCEx_PeriphCLKConfig+0x7c4>
  {
    switch (PeriphClkInit->FmcClockSelection)
 800b3bc:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800b3c0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800b3c2:	2b03      	cmp	r3, #3
 800b3c4:	d81c      	bhi.n	800b400 <HAL_RCCEx_PeriphCLKConfig+0x794>
 800b3c6:	a201      	add	r2, pc, #4	; (adr r2, 800b3cc <HAL_RCCEx_PeriphCLKConfig+0x760>)
 800b3c8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b3cc:	0800b409 	.word	0x0800b409
 800b3d0:	0800b3dd 	.word	0x0800b3dd
 800b3d4:	0800b3eb 	.word	0x0800b3eb
 800b3d8:	0800b409 	.word	0x0800b409
    {
      case RCC_FMCCLKSOURCE_PLL:      /* PLL is used as clock source for FMC*/
        /* Enable FMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800b3dc:	4b67      	ldr	r3, [pc, #412]	; (800b57c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800b3de:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b3e0:	4a66      	ldr	r2, [pc, #408]	; (800b57c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800b3e2:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800b3e6:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* FMC clock source configuration done later after clock selection check */
        break;
 800b3e8:	e00f      	b.n	800b40a <HAL_RCCEx_PeriphCLKConfig+0x79e>

      case RCC_FMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for FMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 800b3ea:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800b3ee:	3308      	adds	r3, #8
 800b3f0:	2102      	movs	r1, #2
 800b3f2:	4618      	mov	r0, r3
 800b3f4:	f002 f82a 	bl	800d44c <RCCEx_PLL2_Config>
 800b3f8:	4603      	mov	r3, r0
 800b3fa:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* FMC clock source configuration done later after clock selection check */
        break;
 800b3fe:	e004      	b.n	800b40a <HAL_RCCEx_PeriphCLKConfig+0x79e>
      case RCC_FMCCLKSOURCE_HCLK:
        /* D1/CD HCLK  clock selected as FMC kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 800b400:	2301      	movs	r3, #1
 800b402:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 800b406:	e000      	b.n	800b40a <HAL_RCCEx_PeriphCLKConfig+0x79e>
        break;
 800b408:	bf00      	nop
    }

    if (ret == HAL_OK)
 800b40a:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800b40e:	2b00      	cmp	r3, #0
 800b410:	d10a      	bne.n	800b428 <HAL_RCCEx_PeriphCLKConfig+0x7bc>
    {
      /* Set the source of FMC clock*/
      __HAL_RCC_FMC_CONFIG(PeriphClkInit->FmcClockSelection);
 800b412:	4b5a      	ldr	r3, [pc, #360]	; (800b57c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800b414:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800b416:	f023 0103 	bic.w	r1, r3, #3
 800b41a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800b41e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800b420:	4a56      	ldr	r2, [pc, #344]	; (800b57c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800b422:	430b      	orrs	r3, r1
 800b424:	64d3      	str	r3, [r2, #76]	; 0x4c
 800b426:	e003      	b.n	800b430 <HAL_RCCEx_PeriphCLKConfig+0x7c4>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800b428:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800b42c:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*---------------------------- RTC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 800b430:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800b434:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b438:	f402 0380 	and.w	r3, r2, #4194304	; 0x400000
 800b43c:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 800b440:	2300      	movs	r3, #0
 800b442:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 800b446:	e9d7 1232 	ldrd	r1, r2, [r7, #200]	; 0xc8
 800b44a:	460b      	mov	r3, r1
 800b44c:	4313      	orrs	r3, r2
 800b44e:	f000 809f 	beq.w	800b590 <HAL_RCCEx_PeriphCLKConfig+0x924>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800b452:	4b4b      	ldr	r3, [pc, #300]	; (800b580 <HAL_RCCEx_PeriphCLKConfig+0x914>)
 800b454:	681b      	ldr	r3, [r3, #0]
 800b456:	4a4a      	ldr	r2, [pc, #296]	; (800b580 <HAL_RCCEx_PeriphCLKConfig+0x914>)
 800b458:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800b45c:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 800b45e:	f7f8 fe57 	bl	8004110 <HAL_GetTick>
 800b462:	f8c7 0120 	str.w	r0, [r7, #288]	; 0x120

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800b466:	e00b      	b.n	800b480 <HAL_RCCEx_PeriphCLKConfig+0x814>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800b468:	f7f8 fe52 	bl	8004110 <HAL_GetTick>
 800b46c:	4602      	mov	r2, r0
 800b46e:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 800b472:	1ad3      	subs	r3, r2, r3
 800b474:	2b64      	cmp	r3, #100	; 0x64
 800b476:	d903      	bls.n	800b480 <HAL_RCCEx_PeriphCLKConfig+0x814>
      {
        ret = HAL_TIMEOUT;
 800b478:	2303      	movs	r3, #3
 800b47a:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 800b47e:	e005      	b.n	800b48c <HAL_RCCEx_PeriphCLKConfig+0x820>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800b480:	4b3f      	ldr	r3, [pc, #252]	; (800b580 <HAL_RCCEx_PeriphCLKConfig+0x914>)
 800b482:	681b      	ldr	r3, [r3, #0]
 800b484:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800b488:	2b00      	cmp	r3, #0
 800b48a:	d0ed      	beq.n	800b468 <HAL_RCCEx_PeriphCLKConfig+0x7fc>
      }
    }

    if (ret == HAL_OK)
 800b48c:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800b490:	2b00      	cmp	r3, #0
 800b492:	d179      	bne.n	800b588 <HAL_RCCEx_PeriphCLKConfig+0x91c>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if ((RCC->BDCR & RCC_BDCR_RTCSEL) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL))
 800b494:	4b39      	ldr	r3, [pc, #228]	; (800b57c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800b496:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 800b498:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800b49c:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 800b4a0:	4053      	eors	r3, r2
 800b4a2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800b4a6:	2b00      	cmp	r3, #0
 800b4a8:	d015      	beq.n	800b4d6 <HAL_RCCEx_PeriphCLKConfig+0x86a>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 800b4aa:	4b34      	ldr	r3, [pc, #208]	; (800b57c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800b4ac:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800b4ae:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800b4b2:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 800b4b6:	4b31      	ldr	r3, [pc, #196]	; (800b57c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800b4b8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800b4ba:	4a30      	ldr	r2, [pc, #192]	; (800b57c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800b4bc:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800b4c0:	6713      	str	r3, [r2, #112]	; 0x70
        __HAL_RCC_BACKUPRESET_RELEASE();
 800b4c2:	4b2e      	ldr	r3, [pc, #184]	; (800b57c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800b4c4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800b4c6:	4a2d      	ldr	r2, [pc, #180]	; (800b57c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800b4c8:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800b4cc:	6713      	str	r3, [r2, #112]	; 0x70
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpreg;
 800b4ce:	4a2b      	ldr	r2, [pc, #172]	; (800b57c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800b4d0:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 800b4d4:	6713      	str	r3, [r2, #112]	; 0x70
      }

      /* If LSE is selected as RTC clock source (and enabled prior to Backup Domain reset), wait for LSE reactivation */
      if (PeriphClkInit->RTCClockSelection == RCC_RTCCLKSOURCE_LSE)
 800b4d6:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800b4da:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 800b4de:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800b4e2:	d118      	bne.n	800b516 <HAL_RCCEx_PeriphCLKConfig+0x8aa>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800b4e4:	f7f8 fe14 	bl	8004110 <HAL_GetTick>
 800b4e8:	f8c7 0120 	str.w	r0, [r7, #288]	; 0x120

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800b4ec:	e00d      	b.n	800b50a <HAL_RCCEx_PeriphCLKConfig+0x89e>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800b4ee:	f7f8 fe0f 	bl	8004110 <HAL_GetTick>
 800b4f2:	4602      	mov	r2, r0
 800b4f4:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 800b4f8:	1ad2      	subs	r2, r2, r3
 800b4fa:	f241 3388 	movw	r3, #5000	; 0x1388
 800b4fe:	429a      	cmp	r2, r3
 800b500:	d903      	bls.n	800b50a <HAL_RCCEx_PeriphCLKConfig+0x89e>
          {
            ret = HAL_TIMEOUT;
 800b502:	2303      	movs	r3, #3
 800b504:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
            break;
 800b508:	e005      	b.n	800b516 <HAL_RCCEx_PeriphCLKConfig+0x8aa>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800b50a:	4b1c      	ldr	r3, [pc, #112]	; (800b57c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800b50c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800b50e:	f003 0302 	and.w	r3, r3, #2
 800b512:	2b00      	cmp	r3, #0
 800b514:	d0eb      	beq.n	800b4ee <HAL_RCCEx_PeriphCLKConfig+0x882>
          }
        }
      }

      if (ret == HAL_OK)
 800b516:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800b51a:	2b00      	cmp	r3, #0
 800b51c:	d129      	bne.n	800b572 <HAL_RCCEx_PeriphCLKConfig+0x906>
      {
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800b51e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800b522:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 800b526:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800b52a:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800b52e:	d10e      	bne.n	800b54e <HAL_RCCEx_PeriphCLKConfig+0x8e2>
 800b530:	4b12      	ldr	r3, [pc, #72]	; (800b57c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800b532:	691b      	ldr	r3, [r3, #16]
 800b534:	f423 517c 	bic.w	r1, r3, #16128	; 0x3f00
 800b538:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800b53c:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 800b540:	091a      	lsrs	r2, r3, #4
 800b542:	4b10      	ldr	r3, [pc, #64]	; (800b584 <HAL_RCCEx_PeriphCLKConfig+0x918>)
 800b544:	4013      	ands	r3, r2
 800b546:	4a0d      	ldr	r2, [pc, #52]	; (800b57c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800b548:	430b      	orrs	r3, r1
 800b54a:	6113      	str	r3, [r2, #16]
 800b54c:	e005      	b.n	800b55a <HAL_RCCEx_PeriphCLKConfig+0x8ee>
 800b54e:	4b0b      	ldr	r3, [pc, #44]	; (800b57c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800b550:	691b      	ldr	r3, [r3, #16]
 800b552:	4a0a      	ldr	r2, [pc, #40]	; (800b57c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800b554:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 800b558:	6113      	str	r3, [r2, #16]
 800b55a:	4b08      	ldr	r3, [pc, #32]	; (800b57c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800b55c:	6f19      	ldr	r1, [r3, #112]	; 0x70
 800b55e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800b562:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 800b566:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800b56a:	4a04      	ldr	r2, [pc, #16]	; (800b57c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800b56c:	430b      	orrs	r3, r1
 800b56e:	6713      	str	r3, [r2, #112]	; 0x70
 800b570:	e00e      	b.n	800b590 <HAL_RCCEx_PeriphCLKConfig+0x924>
      }
      else
      {
        /* set overall return value */
        status = ret;
 800b572:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800b576:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
 800b57a:	e009      	b.n	800b590 <HAL_RCCEx_PeriphCLKConfig+0x924>
 800b57c:	58024400 	.word	0x58024400
 800b580:	58024800 	.word	0x58024800
 800b584:	00ffffcf 	.word	0x00ffffcf
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 800b588:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800b58c:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }


  /*-------------------------- USART1/6 configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
 800b590:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800b594:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b598:	f002 0301 	and.w	r3, r2, #1
 800b59c:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 800b5a0:	2300      	movs	r3, #0
 800b5a2:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 800b5a6:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 800b5aa:	460b      	mov	r3, r1
 800b5ac:	4313      	orrs	r3, r2
 800b5ae:	f000 8089 	beq.w	800b6c4 <HAL_RCCEx_PeriphCLKConfig+0xa58>
  {
    switch (PeriphClkInit->Usart16ClockSelection)
 800b5b2:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800b5b6:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800b5b8:	2b28      	cmp	r3, #40	; 0x28
 800b5ba:	d86b      	bhi.n	800b694 <HAL_RCCEx_PeriphCLKConfig+0xa28>
 800b5bc:	a201      	add	r2, pc, #4	; (adr r2, 800b5c4 <HAL_RCCEx_PeriphCLKConfig+0x958>)
 800b5be:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b5c2:	bf00      	nop
 800b5c4:	0800b69d 	.word	0x0800b69d
 800b5c8:	0800b695 	.word	0x0800b695
 800b5cc:	0800b695 	.word	0x0800b695
 800b5d0:	0800b695 	.word	0x0800b695
 800b5d4:	0800b695 	.word	0x0800b695
 800b5d8:	0800b695 	.word	0x0800b695
 800b5dc:	0800b695 	.word	0x0800b695
 800b5e0:	0800b695 	.word	0x0800b695
 800b5e4:	0800b669 	.word	0x0800b669
 800b5e8:	0800b695 	.word	0x0800b695
 800b5ec:	0800b695 	.word	0x0800b695
 800b5f0:	0800b695 	.word	0x0800b695
 800b5f4:	0800b695 	.word	0x0800b695
 800b5f8:	0800b695 	.word	0x0800b695
 800b5fc:	0800b695 	.word	0x0800b695
 800b600:	0800b695 	.word	0x0800b695
 800b604:	0800b67f 	.word	0x0800b67f
 800b608:	0800b695 	.word	0x0800b695
 800b60c:	0800b695 	.word	0x0800b695
 800b610:	0800b695 	.word	0x0800b695
 800b614:	0800b695 	.word	0x0800b695
 800b618:	0800b695 	.word	0x0800b695
 800b61c:	0800b695 	.word	0x0800b695
 800b620:	0800b695 	.word	0x0800b695
 800b624:	0800b69d 	.word	0x0800b69d
 800b628:	0800b695 	.word	0x0800b695
 800b62c:	0800b695 	.word	0x0800b695
 800b630:	0800b695 	.word	0x0800b695
 800b634:	0800b695 	.word	0x0800b695
 800b638:	0800b695 	.word	0x0800b695
 800b63c:	0800b695 	.word	0x0800b695
 800b640:	0800b695 	.word	0x0800b695
 800b644:	0800b69d 	.word	0x0800b69d
 800b648:	0800b695 	.word	0x0800b695
 800b64c:	0800b695 	.word	0x0800b695
 800b650:	0800b695 	.word	0x0800b695
 800b654:	0800b695 	.word	0x0800b695
 800b658:	0800b695 	.word	0x0800b695
 800b65c:	0800b695 	.word	0x0800b695
 800b660:	0800b695 	.word	0x0800b695
 800b664:	0800b69d 	.word	0x0800b69d
      case RCC_USART16CLKSOURCE_PCLK2: /* CD/D2 PCLK2 as clock source for USART1/6 */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      case RCC_USART16CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART1/6 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800b668:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800b66c:	3308      	adds	r3, #8
 800b66e:	2101      	movs	r1, #1
 800b670:	4618      	mov	r0, r3
 800b672:	f001 feeb 	bl	800d44c <RCCEx_PLL2_Config>
 800b676:	4603      	mov	r3, r0
 800b678:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 800b67c:	e00f      	b.n	800b69e <HAL_RCCEx_PeriphCLKConfig+0xa32>

      case RCC_USART16CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART1/6 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800b67e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800b682:	3328      	adds	r3, #40	; 0x28
 800b684:	2101      	movs	r1, #1
 800b686:	4618      	mov	r0, r3
 800b688:	f001 ff92 	bl	800d5b0 <RCCEx_PLL3_Config>
 800b68c:	4603      	mov	r3, r0
 800b68e:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 800b692:	e004      	b.n	800b69e <HAL_RCCEx_PeriphCLKConfig+0xa32>
        /* LSE,  oscillator is used as source of USART1/6 clock */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800b694:	2301      	movs	r3, #1
 800b696:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 800b69a:	e000      	b.n	800b69e <HAL_RCCEx_PeriphCLKConfig+0xa32>
        break;
 800b69c:	bf00      	nop
    }

    if (ret == HAL_OK)
 800b69e:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800b6a2:	2b00      	cmp	r3, #0
 800b6a4:	d10a      	bne.n	800b6bc <HAL_RCCEx_PeriphCLKConfig+0xa50>
    {
      /* Set the source of USART1/6 clock */
      __HAL_RCC_USART16_CONFIG(PeriphClkInit->Usart16ClockSelection);
 800b6a6:	4bbf      	ldr	r3, [pc, #764]	; (800b9a4 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 800b6a8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800b6aa:	f023 0138 	bic.w	r1, r3, #56	; 0x38
 800b6ae:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800b6b2:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800b6b4:	4abb      	ldr	r2, [pc, #748]	; (800b9a4 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 800b6b6:	430b      	orrs	r3, r1
 800b6b8:	6553      	str	r3, [r2, #84]	; 0x54
 800b6ba:	e003      	b.n	800b6c4 <HAL_RCCEx_PeriphCLKConfig+0xa58>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800b6bc:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800b6c0:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*-------------------------- USART2/3/4/5/7/8 Configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
 800b6c4:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800b6c8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b6cc:	f002 0302 	and.w	r3, r2, #2
 800b6d0:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 800b6d4:	2300      	movs	r3, #0
 800b6d6:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
 800b6da:	e9d7 122e 	ldrd	r1, r2, [r7, #184]	; 0xb8
 800b6de:	460b      	mov	r3, r1
 800b6e0:	4313      	orrs	r3, r2
 800b6e2:	d041      	beq.n	800b768 <HAL_RCCEx_PeriphCLKConfig+0xafc>
  {
    switch (PeriphClkInit->Usart234578ClockSelection)
 800b6e4:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800b6e8:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800b6ea:	2b05      	cmp	r3, #5
 800b6ec:	d824      	bhi.n	800b738 <HAL_RCCEx_PeriphCLKConfig+0xacc>
 800b6ee:	a201      	add	r2, pc, #4	; (adr r2, 800b6f4 <HAL_RCCEx_PeriphCLKConfig+0xa88>)
 800b6f0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b6f4:	0800b741 	.word	0x0800b741
 800b6f8:	0800b70d 	.word	0x0800b70d
 800b6fc:	0800b723 	.word	0x0800b723
 800b700:	0800b741 	.word	0x0800b741
 800b704:	0800b741 	.word	0x0800b741
 800b708:	0800b741 	.word	0x0800b741
      case RCC_USART234578CLKSOURCE_PCLK1: /* CD/D2 PCLK1 as clock source for USART2/3/4/5/7/8 */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      case RCC_USART234578CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800b70c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800b710:	3308      	adds	r3, #8
 800b712:	2101      	movs	r1, #1
 800b714:	4618      	mov	r0, r3
 800b716:	f001 fe99 	bl	800d44c <RCCEx_PLL2_Config>
 800b71a:	4603      	mov	r3, r0
 800b71c:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 800b720:	e00f      	b.n	800b742 <HAL_RCCEx_PeriphCLKConfig+0xad6>

      case RCC_USART234578CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800b722:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800b726:	3328      	adds	r3, #40	; 0x28
 800b728:	2101      	movs	r1, #1
 800b72a:	4618      	mov	r0, r3
 800b72c:	f001 ff40 	bl	800d5b0 <RCCEx_PLL3_Config>
 800b730:	4603      	mov	r3, r0
 800b732:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 800b736:	e004      	b.n	800b742 <HAL_RCCEx_PeriphCLKConfig+0xad6>
        /* LSE,  oscillator is used as source of USART2/3/4/5/7/8 clock */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800b738:	2301      	movs	r3, #1
 800b73a:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 800b73e:	e000      	b.n	800b742 <HAL_RCCEx_PeriphCLKConfig+0xad6>
        break;
 800b740:	bf00      	nop
    }

    if (ret == HAL_OK)
 800b742:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800b746:	2b00      	cmp	r3, #0
 800b748:	d10a      	bne.n	800b760 <HAL_RCCEx_PeriphCLKConfig+0xaf4>
    {
      /* Set the source of USART2/3/4/5/7/8 clock */
      __HAL_RCC_USART234578_CONFIG(PeriphClkInit->Usart234578ClockSelection);
 800b74a:	4b96      	ldr	r3, [pc, #600]	; (800b9a4 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 800b74c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800b74e:	f023 0107 	bic.w	r1, r3, #7
 800b752:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800b756:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800b758:	4a92      	ldr	r2, [pc, #584]	; (800b9a4 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 800b75a:	430b      	orrs	r3, r1
 800b75c:	6553      	str	r3, [r2, #84]	; 0x54
 800b75e:	e003      	b.n	800b768 <HAL_RCCEx_PeriphCLKConfig+0xafc>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800b760:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800b764:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*-------------------------- LPUART1 Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 800b768:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800b76c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b770:	f002 0304 	and.w	r3, r2, #4
 800b774:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 800b778:	2300      	movs	r3, #0
 800b77a:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 800b77e:	e9d7 122c 	ldrd	r1, r2, [r7, #176]	; 0xb0
 800b782:	460b      	mov	r3, r1
 800b784:	4313      	orrs	r3, r2
 800b786:	d044      	beq.n	800b812 <HAL_RCCEx_PeriphCLKConfig+0xba6>
  {
    switch (PeriphClkInit->Lpuart1ClockSelection)
 800b788:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800b78c:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800b790:	2b05      	cmp	r3, #5
 800b792:	d825      	bhi.n	800b7e0 <HAL_RCCEx_PeriphCLKConfig+0xb74>
 800b794:	a201      	add	r2, pc, #4	; (adr r2, 800b79c <HAL_RCCEx_PeriphCLKConfig+0xb30>)
 800b796:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b79a:	bf00      	nop
 800b79c:	0800b7e9 	.word	0x0800b7e9
 800b7a0:	0800b7b5 	.word	0x0800b7b5
 800b7a4:	0800b7cb 	.word	0x0800b7cb
 800b7a8:	0800b7e9 	.word	0x0800b7e9
 800b7ac:	0800b7e9 	.word	0x0800b7e9
 800b7b0:	0800b7e9 	.word	0x0800b7e9
      case RCC_LPUART1CLKSOURCE_PCLK4: /* SRD/D3 PCLK1 (PCLK4) as clock source for LPUART1 */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPUART1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPUART1 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800b7b4:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800b7b8:	3308      	adds	r3, #8
 800b7ba:	2101      	movs	r1, #1
 800b7bc:	4618      	mov	r0, r3
 800b7be:	f001 fe45 	bl	800d44c <RCCEx_PLL2_Config>
 800b7c2:	4603      	mov	r3, r0
 800b7c4:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 800b7c8:	e00f      	b.n	800b7ea <HAL_RCCEx_PeriphCLKConfig+0xb7e>

      case RCC_LPUART1CLKSOURCE_PLL3: /* PLL3 is used as clock source for LPUART1 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800b7ca:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800b7ce:	3328      	adds	r3, #40	; 0x28
 800b7d0:	2101      	movs	r1, #1
 800b7d2:	4618      	mov	r0, r3
 800b7d4:	f001 feec 	bl	800d5b0 <RCCEx_PLL3_Config>
 800b7d8:	4603      	mov	r3, r0
 800b7da:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 800b7de:	e004      	b.n	800b7ea <HAL_RCCEx_PeriphCLKConfig+0xb7e>
        /* LSE,  oscillator is used as source of LPUART1 clock */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800b7e0:	2301      	movs	r3, #1
 800b7e2:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 800b7e6:	e000      	b.n	800b7ea <HAL_RCCEx_PeriphCLKConfig+0xb7e>
        break;
 800b7e8:	bf00      	nop
    }

    if (ret == HAL_OK)
 800b7ea:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800b7ee:	2b00      	cmp	r3, #0
 800b7f0:	d10b      	bne.n	800b80a <HAL_RCCEx_PeriphCLKConfig+0xb9e>
    {
      /* Set the source of LPUART1 clock */
      __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 800b7f2:	4b6c      	ldr	r3, [pc, #432]	; (800b9a4 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 800b7f4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800b7f6:	f023 0107 	bic.w	r1, r3, #7
 800b7fa:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800b7fe:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800b802:	4a68      	ldr	r2, [pc, #416]	; (800b9a4 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 800b804:	430b      	orrs	r3, r1
 800b806:	6593      	str	r3, [r2, #88]	; 0x58
 800b808:	e003      	b.n	800b812 <HAL_RCCEx_PeriphCLKConfig+0xba6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800b80a:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800b80e:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*---------------------------- LPTIM1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 800b812:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800b816:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b81a:	f002 0320 	and.w	r3, r2, #32
 800b81e:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 800b822:	2300      	movs	r3, #0
 800b824:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 800b828:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 800b82c:	460b      	mov	r3, r1
 800b82e:	4313      	orrs	r3, r2
 800b830:	d055      	beq.n	800b8de <HAL_RCCEx_PeriphCLKConfig+0xc72>
  {
    switch (PeriphClkInit->Lptim1ClockSelection)
 800b832:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800b836:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800b83a:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800b83e:	d033      	beq.n	800b8a8 <HAL_RCCEx_PeriphCLKConfig+0xc3c>
 800b840:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800b844:	d82c      	bhi.n	800b8a0 <HAL_RCCEx_PeriphCLKConfig+0xc34>
 800b846:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800b84a:	d02f      	beq.n	800b8ac <HAL_RCCEx_PeriphCLKConfig+0xc40>
 800b84c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800b850:	d826      	bhi.n	800b8a0 <HAL_RCCEx_PeriphCLKConfig+0xc34>
 800b852:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 800b856:	d02b      	beq.n	800b8b0 <HAL_RCCEx_PeriphCLKConfig+0xc44>
 800b858:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 800b85c:	d820      	bhi.n	800b8a0 <HAL_RCCEx_PeriphCLKConfig+0xc34>
 800b85e:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800b862:	d012      	beq.n	800b88a <HAL_RCCEx_PeriphCLKConfig+0xc1e>
 800b864:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800b868:	d81a      	bhi.n	800b8a0 <HAL_RCCEx_PeriphCLKConfig+0xc34>
 800b86a:	2b00      	cmp	r3, #0
 800b86c:	d022      	beq.n	800b8b4 <HAL_RCCEx_PeriphCLKConfig+0xc48>
 800b86e:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800b872:	d115      	bne.n	800b8a0 <HAL_RCCEx_PeriphCLKConfig+0xc34>
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800b874:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800b878:	3308      	adds	r3, #8
 800b87a:	2100      	movs	r1, #0
 800b87c:	4618      	mov	r0, r3
 800b87e:	f001 fde5 	bl	800d44c <RCCEx_PLL2_Config>
 800b882:	4603      	mov	r3, r0
 800b884:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 800b888:	e015      	b.n	800b8b6 <HAL_RCCEx_PeriphCLKConfig+0xc4a>

      case RCC_LPTIM1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800b88a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800b88e:	3328      	adds	r3, #40	; 0x28
 800b890:	2102      	movs	r1, #2
 800b892:	4618      	mov	r0, r3
 800b894:	f001 fe8c 	bl	800d5b0 <RCCEx_PLL3_Config>
 800b898:	4603      	mov	r3, r0
 800b89a:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 800b89e:	e00a      	b.n	800b8b6 <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM1 clock */
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800b8a0:	2301      	movs	r3, #1
 800b8a2:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 800b8a6:	e006      	b.n	800b8b6 <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 800b8a8:	bf00      	nop
 800b8aa:	e004      	b.n	800b8b6 <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 800b8ac:	bf00      	nop
 800b8ae:	e002      	b.n	800b8b6 <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 800b8b0:	bf00      	nop
 800b8b2:	e000      	b.n	800b8b6 <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 800b8b4:	bf00      	nop
    }

    if (ret == HAL_OK)
 800b8b6:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800b8ba:	2b00      	cmp	r3, #0
 800b8bc:	d10b      	bne.n	800b8d6 <HAL_RCCEx_PeriphCLKConfig+0xc6a>
    {
      /* Set the source of LPTIM1 clock*/
      __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 800b8be:	4b39      	ldr	r3, [pc, #228]	; (800b9a4 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 800b8c0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800b8c2:	f023 41e0 	bic.w	r1, r3, #1879048192	; 0x70000000
 800b8c6:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800b8ca:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800b8ce:	4a35      	ldr	r2, [pc, #212]	; (800b9a4 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 800b8d0:	430b      	orrs	r3, r1
 800b8d2:	6553      	str	r3, [r2, #84]	; 0x54
 800b8d4:	e003      	b.n	800b8de <HAL_RCCEx_PeriphCLKConfig+0xc72>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800b8d6:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800b8da:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*---------------------------- LPTIM2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 800b8de:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800b8e2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b8e6:	f002 0340 	and.w	r3, r2, #64	; 0x40
 800b8ea:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 800b8ee:	2300      	movs	r3, #0
 800b8f0:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 800b8f4:	e9d7 1228 	ldrd	r1, r2, [r7, #160]	; 0xa0
 800b8f8:	460b      	mov	r3, r1
 800b8fa:	4313      	orrs	r3, r2
 800b8fc:	d058      	beq.n	800b9b0 <HAL_RCCEx_PeriphCLKConfig+0xd44>
  {
    switch (PeriphClkInit->Lptim2ClockSelection)
 800b8fe:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800b902:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800b906:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 800b90a:	d033      	beq.n	800b974 <HAL_RCCEx_PeriphCLKConfig+0xd08>
 800b90c:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 800b910:	d82c      	bhi.n	800b96c <HAL_RCCEx_PeriphCLKConfig+0xd00>
 800b912:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800b916:	d02f      	beq.n	800b978 <HAL_RCCEx_PeriphCLKConfig+0xd0c>
 800b918:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800b91c:	d826      	bhi.n	800b96c <HAL_RCCEx_PeriphCLKConfig+0xd00>
 800b91e:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800b922:	d02b      	beq.n	800b97c <HAL_RCCEx_PeriphCLKConfig+0xd10>
 800b924:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800b928:	d820      	bhi.n	800b96c <HAL_RCCEx_PeriphCLKConfig+0xd00>
 800b92a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800b92e:	d012      	beq.n	800b956 <HAL_RCCEx_PeriphCLKConfig+0xcea>
 800b930:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800b934:	d81a      	bhi.n	800b96c <HAL_RCCEx_PeriphCLKConfig+0xd00>
 800b936:	2b00      	cmp	r3, #0
 800b938:	d022      	beq.n	800b980 <HAL_RCCEx_PeriphCLKConfig+0xd14>
 800b93a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800b93e:	d115      	bne.n	800b96c <HAL_RCCEx_PeriphCLKConfig+0xd00>
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM2CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800b940:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800b944:	3308      	adds	r3, #8
 800b946:	2100      	movs	r1, #0
 800b948:	4618      	mov	r0, r3
 800b94a:	f001 fd7f 	bl	800d44c <RCCEx_PLL2_Config>
 800b94e:	4603      	mov	r3, r0
 800b950:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 800b954:	e015      	b.n	800b982 <HAL_RCCEx_PeriphCLKConfig+0xd16>

      case RCC_LPTIM2CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800b956:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800b95a:	3328      	adds	r3, #40	; 0x28
 800b95c:	2102      	movs	r1, #2
 800b95e:	4618      	mov	r0, r3
 800b960:	f001 fe26 	bl	800d5b0 <RCCEx_PLL3_Config>
 800b964:	4603      	mov	r3, r0
 800b966:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 800b96a:	e00a      	b.n	800b982 <HAL_RCCEx_PeriphCLKConfig+0xd16>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM2 clock */
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800b96c:	2301      	movs	r3, #1
 800b96e:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 800b972:	e006      	b.n	800b982 <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 800b974:	bf00      	nop
 800b976:	e004      	b.n	800b982 <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 800b978:	bf00      	nop
 800b97a:	e002      	b.n	800b982 <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 800b97c:	bf00      	nop
 800b97e:	e000      	b.n	800b982 <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 800b980:	bf00      	nop
    }

    if (ret == HAL_OK)
 800b982:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800b986:	2b00      	cmp	r3, #0
 800b988:	d10e      	bne.n	800b9a8 <HAL_RCCEx_PeriphCLKConfig+0xd3c>
    {
      /* Set the source of LPTIM2 clock*/
      __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 800b98a:	4b06      	ldr	r3, [pc, #24]	; (800b9a4 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 800b98c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800b98e:	f423 51e0 	bic.w	r1, r3, #7168	; 0x1c00
 800b992:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800b996:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800b99a:	4a02      	ldr	r2, [pc, #8]	; (800b9a4 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 800b99c:	430b      	orrs	r3, r1
 800b99e:	6593      	str	r3, [r2, #88]	; 0x58
 800b9a0:	e006      	b.n	800b9b0 <HAL_RCCEx_PeriphCLKConfig+0xd44>
 800b9a2:	bf00      	nop
 800b9a4:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 800b9a8:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800b9ac:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*---------------------------- LPTIM345 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM345) == RCC_PERIPHCLK_LPTIM345)
 800b9b0:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800b9b4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b9b8:	f002 0380 	and.w	r3, r2, #128	; 0x80
 800b9bc:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 800b9c0:	2300      	movs	r3, #0
 800b9c2:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 800b9c6:	e9d7 1226 	ldrd	r1, r2, [r7, #152]	; 0x98
 800b9ca:	460b      	mov	r3, r1
 800b9cc:	4313      	orrs	r3, r2
 800b9ce:	d055      	beq.n	800ba7c <HAL_RCCEx_PeriphCLKConfig+0xe10>
  {
    switch (PeriphClkInit->Lptim345ClockSelection)
 800b9d0:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800b9d4:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 800b9d8:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 800b9dc:	d033      	beq.n	800ba46 <HAL_RCCEx_PeriphCLKConfig+0xdda>
 800b9de:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 800b9e2:	d82c      	bhi.n	800ba3e <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 800b9e4:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800b9e8:	d02f      	beq.n	800ba4a <HAL_RCCEx_PeriphCLKConfig+0xdde>
 800b9ea:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800b9ee:	d826      	bhi.n	800ba3e <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 800b9f0:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 800b9f4:	d02b      	beq.n	800ba4e <HAL_RCCEx_PeriphCLKConfig+0xde2>
 800b9f6:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 800b9fa:	d820      	bhi.n	800ba3e <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 800b9fc:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800ba00:	d012      	beq.n	800ba28 <HAL_RCCEx_PeriphCLKConfig+0xdbc>
 800ba02:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800ba06:	d81a      	bhi.n	800ba3e <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 800ba08:	2b00      	cmp	r3, #0
 800ba0a:	d022      	beq.n	800ba52 <HAL_RCCEx_PeriphCLKConfig+0xde6>
 800ba0c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800ba10:	d115      	bne.n	800ba3e <HAL_RCCEx_PeriphCLKConfig+0xdd2>
      case RCC_LPTIM345CLKSOURCE_PCLK4:      /* SRD/D3 PCLK1 (PCLK4) as clock source for LPTIM3/4/5 */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM345CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800ba12:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800ba16:	3308      	adds	r3, #8
 800ba18:	2100      	movs	r1, #0
 800ba1a:	4618      	mov	r0, r3
 800ba1c:	f001 fd16 	bl	800d44c <RCCEx_PLL2_Config>
 800ba20:	4603      	mov	r3, r0
 800ba22:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 800ba26:	e015      	b.n	800ba54 <HAL_RCCEx_PeriphCLKConfig+0xde8>

      case RCC_LPTIM345CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800ba28:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800ba2c:	3328      	adds	r3, #40	; 0x28
 800ba2e:	2102      	movs	r1, #2
 800ba30:	4618      	mov	r0, r3
 800ba32:	f001 fdbd 	bl	800d5b0 <RCCEx_PLL3_Config>
 800ba36:	4603      	mov	r3, r0
 800ba38:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 800ba3c:	e00a      	b.n	800ba54 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM3/4/5 clock */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800ba3e:	2301      	movs	r3, #1
 800ba40:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 800ba44:	e006      	b.n	800ba54 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 800ba46:	bf00      	nop
 800ba48:	e004      	b.n	800ba54 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 800ba4a:	bf00      	nop
 800ba4c:	e002      	b.n	800ba54 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 800ba4e:	bf00      	nop
 800ba50:	e000      	b.n	800ba54 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 800ba52:	bf00      	nop
    }

    if (ret == HAL_OK)
 800ba54:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800ba58:	2b00      	cmp	r3, #0
 800ba5a:	d10b      	bne.n	800ba74 <HAL_RCCEx_PeriphCLKConfig+0xe08>
    {
      /* Set the source of LPTIM3/4/5 clock */
      __HAL_RCC_LPTIM345_CONFIG(PeriphClkInit->Lptim345ClockSelection);
 800ba5c:	4ba1      	ldr	r3, [pc, #644]	; (800bce4 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800ba5e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800ba60:	f423 4160 	bic.w	r1, r3, #57344	; 0xe000
 800ba64:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800ba68:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 800ba6c:	4a9d      	ldr	r2, [pc, #628]	; (800bce4 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800ba6e:	430b      	orrs	r3, r1
 800ba70:	6593      	str	r3, [r2, #88]	; 0x58
 800ba72:	e003      	b.n	800ba7c <HAL_RCCEx_PeriphCLKConfig+0xe10>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800ba74:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800ba78:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126

    __HAL_RCC_I2C1235_CONFIG(PeriphClkInit->I2c1235ClockSelection);

  }
#else
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C123) == RCC_PERIPHCLK_I2C123)
 800ba7c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800ba80:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ba84:	f002 0308 	and.w	r3, r2, #8
 800ba88:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 800ba8c:	2300      	movs	r3, #0
 800ba8e:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 800ba92:	e9d7 1224 	ldrd	r1, r2, [r7, #144]	; 0x90
 800ba96:	460b      	mov	r3, r1
 800ba98:	4313      	orrs	r3, r2
 800ba9a:	d01e      	beq.n	800bada <HAL_RCCEx_PeriphCLKConfig+0xe6e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C123CLKSOURCE(PeriphClkInit->I2c123ClockSelection));

    if ((PeriphClkInit->I2c123ClockSelection) == RCC_I2C123CLKSOURCE_PLL3)
 800ba9c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800baa0:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800baa4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800baa8:	d10c      	bne.n	800bac4 <HAL_RCCEx_PeriphCLKConfig+0xe58>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 800baaa:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800baae:	3328      	adds	r3, #40	; 0x28
 800bab0:	2102      	movs	r1, #2
 800bab2:	4618      	mov	r0, r3
 800bab4:	f001 fd7c 	bl	800d5b0 <RCCEx_PLL3_Config>
 800bab8:	4603      	mov	r3, r0
 800baba:	2b00      	cmp	r3, #0
 800babc:	d002      	beq.n	800bac4 <HAL_RCCEx_PeriphCLKConfig+0xe58>
      {
        status = HAL_ERROR;
 800babe:	2301      	movs	r3, #1
 800bac0:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
      }
    }

    __HAL_RCC_I2C123_CONFIG(PeriphClkInit->I2c123ClockSelection);
 800bac4:	4b87      	ldr	r3, [pc, #540]	; (800bce4 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800bac6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800bac8:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800bacc:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800bad0:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800bad4:	4a83      	ldr	r2, [pc, #524]	; (800bce4 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800bad6:	430b      	orrs	r3, r1
 800bad8:	6553      	str	r3, [r2, #84]	; 0x54

  }
#endif /* I2C5 */

  /*------------------------------ I2C4 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 800bada:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800bade:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bae2:	f002 0310 	and.w	r3, r2, #16
 800bae6:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 800baea:	2300      	movs	r3, #0
 800baec:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 800baf0:	e9d7 1222 	ldrd	r1, r2, [r7, #136]	; 0x88
 800baf4:	460b      	mov	r3, r1
 800baf6:	4313      	orrs	r3, r2
 800baf8:	d01e      	beq.n	800bb38 <HAL_RCCEx_PeriphCLKConfig+0xecc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    if ((PeriphClkInit->I2c4ClockSelection) == RCC_I2C4CLKSOURCE_PLL3)
 800bafa:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800bafe:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800bb02:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800bb06:	d10c      	bne.n	800bb22 <HAL_RCCEx_PeriphCLKConfig+0xeb6>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 800bb08:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800bb0c:	3328      	adds	r3, #40	; 0x28
 800bb0e:	2102      	movs	r1, #2
 800bb10:	4618      	mov	r0, r3
 800bb12:	f001 fd4d 	bl	800d5b0 <RCCEx_PLL3_Config>
 800bb16:	4603      	mov	r3, r0
 800bb18:	2b00      	cmp	r3, #0
 800bb1a:	d002      	beq.n	800bb22 <HAL_RCCEx_PeriphCLKConfig+0xeb6>
      {
        status = HAL_ERROR;
 800bb1c:	2301      	movs	r3, #1
 800bb1e:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
      }
    }

    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 800bb22:	4b70      	ldr	r3, [pc, #448]	; (800bce4 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800bb24:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800bb26:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 800bb2a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800bb2e:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800bb32:	4a6c      	ldr	r2, [pc, #432]	; (800bce4 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800bb34:	430b      	orrs	r3, r1
 800bb36:	6593      	str	r3, [r2, #88]	; 0x58

  }

  /*---------------------------- ADC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 800bb38:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800bb3c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bb40:	f402 2300 	and.w	r3, r2, #524288	; 0x80000
 800bb44:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 800bb48:	2300      	movs	r3, #0
 800bb4a:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 800bb4e:	e9d7 1220 	ldrd	r1, r2, [r7, #128]	; 0x80
 800bb52:	460b      	mov	r3, r1
 800bb54:	4313      	orrs	r3, r2
 800bb56:	d03e      	beq.n	800bbd6 <HAL_RCCEx_PeriphCLKConfig+0xf6a>
  {
    switch (PeriphClkInit->AdcClockSelection)
 800bb58:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800bb5c:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 800bb60:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800bb64:	d022      	beq.n	800bbac <HAL_RCCEx_PeriphCLKConfig+0xf40>
 800bb66:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800bb6a:	d81b      	bhi.n	800bba4 <HAL_RCCEx_PeriphCLKConfig+0xf38>
 800bb6c:	2b00      	cmp	r3, #0
 800bb6e:	d003      	beq.n	800bb78 <HAL_RCCEx_PeriphCLKConfig+0xf0c>
 800bb70:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800bb74:	d00b      	beq.n	800bb8e <HAL_RCCEx_PeriphCLKConfig+0xf22>
 800bb76:	e015      	b.n	800bba4 <HAL_RCCEx_PeriphCLKConfig+0xf38>
    {

      case RCC_ADCCLKSOURCE_PLL2: /* PLL2 is used as clock source for ADC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800bb78:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800bb7c:	3308      	adds	r3, #8
 800bb7e:	2100      	movs	r1, #0
 800bb80:	4618      	mov	r0, r3
 800bb82:	f001 fc63 	bl	800d44c <RCCEx_PLL2_Config>
 800bb86:	4603      	mov	r3, r0
 800bb88:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* ADC clock source configuration done later after clock selection check */
        break;
 800bb8c:	e00f      	b.n	800bbae <HAL_RCCEx_PeriphCLKConfig+0xf42>

      case RCC_ADCCLKSOURCE_PLL3:  /* PLL3 is used as clock source for ADC*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800bb8e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800bb92:	3328      	adds	r3, #40	; 0x28
 800bb94:	2102      	movs	r1, #2
 800bb96:	4618      	mov	r0, r3
 800bb98:	f001 fd0a 	bl	800d5b0 <RCCEx_PLL3_Config>
 800bb9c:	4603      	mov	r3, r0
 800bb9e:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* ADC clock source configuration done later after clock selection check */
        break;
 800bba2:	e004      	b.n	800bbae <HAL_RCCEx_PeriphCLKConfig+0xf42>
        /* HSI, HSE, or CSI oscillator is used as source of ADC clock */
        /* ADC clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800bba4:	2301      	movs	r3, #1
 800bba6:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 800bbaa:	e000      	b.n	800bbae <HAL_RCCEx_PeriphCLKConfig+0xf42>
        break;
 800bbac:	bf00      	nop
    }

    if (ret == HAL_OK)
 800bbae:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800bbb2:	2b00      	cmp	r3, #0
 800bbb4:	d10b      	bne.n	800bbce <HAL_RCCEx_PeriphCLKConfig+0xf62>
    {
      /* Set the source of ADC clock*/
      __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 800bbb6:	4b4b      	ldr	r3, [pc, #300]	; (800bce4 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800bbb8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800bbba:	f423 3140 	bic.w	r1, r3, #196608	; 0x30000
 800bbbe:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800bbc2:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 800bbc6:	4a47      	ldr	r2, [pc, #284]	; (800bce4 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800bbc8:	430b      	orrs	r3, r1
 800bbca:	6593      	str	r3, [r2, #88]	; 0x58
 800bbcc:	e003      	b.n	800bbd6 <HAL_RCCEx_PeriphCLKConfig+0xf6a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800bbce:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800bbd2:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*------------------------------ USB Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 800bbd6:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800bbda:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bbde:	f402 2380 	and.w	r3, r2, #262144	; 0x40000
 800bbe2:	67bb      	str	r3, [r7, #120]	; 0x78
 800bbe4:	2300      	movs	r3, #0
 800bbe6:	67fb      	str	r3, [r7, #124]	; 0x7c
 800bbe8:	e9d7 121e 	ldrd	r1, r2, [r7, #120]	; 0x78
 800bbec:	460b      	mov	r3, r1
 800bbee:	4313      	orrs	r3, r2
 800bbf0:	d03b      	beq.n	800bc6a <HAL_RCCEx_PeriphCLKConfig+0xffe>
  {

    switch (PeriphClkInit->UsbClockSelection)
 800bbf2:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800bbf6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800bbfa:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 800bbfe:	d01f      	beq.n	800bc40 <HAL_RCCEx_PeriphCLKConfig+0xfd4>
 800bc00:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 800bc04:	d818      	bhi.n	800bc38 <HAL_RCCEx_PeriphCLKConfig+0xfcc>
 800bc06:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800bc0a:	d003      	beq.n	800bc14 <HAL_RCCEx_PeriphCLKConfig+0xfa8>
 800bc0c:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800bc10:	d007      	beq.n	800bc22 <HAL_RCCEx_PeriphCLKConfig+0xfb6>
 800bc12:	e011      	b.n	800bc38 <HAL_RCCEx_PeriphCLKConfig+0xfcc>
    {
      case RCC_USBCLKSOURCE_PLL:      /* PLL is used as clock source for USB*/
        /* Enable USB Clock output generated form System USB . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800bc14:	4b33      	ldr	r3, [pc, #204]	; (800bce4 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800bc16:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800bc18:	4a32      	ldr	r2, [pc, #200]	; (800bce4 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800bc1a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800bc1e:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* USB clock source configuration done later after clock selection check */
        break;
 800bc20:	e00f      	b.n	800bc42 <HAL_RCCEx_PeriphCLKConfig+0xfd6>

      case RCC_USBCLKSOURCE_PLL3: /* PLL3 is used as clock source for USB*/

        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800bc22:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800bc26:	3328      	adds	r3, #40	; 0x28
 800bc28:	2101      	movs	r1, #1
 800bc2a:	4618      	mov	r0, r3
 800bc2c:	f001 fcc0 	bl	800d5b0 <RCCEx_PLL3_Config>
 800bc30:	4603      	mov	r3, r0
 800bc32:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* USB clock source configuration done later after clock selection check */
        break;
 800bc36:	e004      	b.n	800bc42 <HAL_RCCEx_PeriphCLKConfig+0xfd6>
        /* HSI48 oscillator is used as source of USB clock */
        /* USB clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800bc38:	2301      	movs	r3, #1
 800bc3a:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 800bc3e:	e000      	b.n	800bc42 <HAL_RCCEx_PeriphCLKConfig+0xfd6>
        break;
 800bc40:	bf00      	nop
    }

    if (ret == HAL_OK)
 800bc42:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800bc46:	2b00      	cmp	r3, #0
 800bc48:	d10b      	bne.n	800bc62 <HAL_RCCEx_PeriphCLKConfig+0xff6>
    {
      /* Set the source of USB clock*/
      __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 800bc4a:	4b26      	ldr	r3, [pc, #152]	; (800bce4 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800bc4c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800bc4e:	f423 1140 	bic.w	r1, r3, #3145728	; 0x300000
 800bc52:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800bc56:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800bc5a:	4a22      	ldr	r2, [pc, #136]	; (800bce4 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800bc5c:	430b      	orrs	r3, r1
 800bc5e:	6553      	str	r3, [r2, #84]	; 0x54
 800bc60:	e003      	b.n	800bc6a <HAL_RCCEx_PeriphCLKConfig+0xffe>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800bc62:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800bc66:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }

  }

  /*------------------------------------- SDMMC Configuration ------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == RCC_PERIPHCLK_SDMMC)
 800bc6a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800bc6e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bc72:	f402 3380 	and.w	r3, r2, #65536	; 0x10000
 800bc76:	673b      	str	r3, [r7, #112]	; 0x70
 800bc78:	2300      	movs	r3, #0
 800bc7a:	677b      	str	r3, [r7, #116]	; 0x74
 800bc7c:	e9d7 121c 	ldrd	r1, r2, [r7, #112]	; 0x70
 800bc80:	460b      	mov	r3, r1
 800bc82:	4313      	orrs	r3, r2
 800bc84:	d034      	beq.n	800bcf0 <HAL_RCCEx_PeriphCLKConfig+0x1084>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC(PeriphClkInit->SdmmcClockSelection));

    switch (PeriphClkInit->SdmmcClockSelection)
 800bc86:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800bc8a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800bc8c:	2b00      	cmp	r3, #0
 800bc8e:	d003      	beq.n	800bc98 <HAL_RCCEx_PeriphCLKConfig+0x102c>
 800bc90:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800bc94:	d007      	beq.n	800bca6 <HAL_RCCEx_PeriphCLKConfig+0x103a>
 800bc96:	e011      	b.n	800bcbc <HAL_RCCEx_PeriphCLKConfig+0x1050>
    {
      case RCC_SDMMCCLKSOURCE_PLL:      /* PLL is used as clock source for SDMMC*/
        /* Enable SDMMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800bc98:	4b12      	ldr	r3, [pc, #72]	; (800bce4 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800bc9a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800bc9c:	4a11      	ldr	r2, [pc, #68]	; (800bce4 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800bc9e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800bca2:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 800bca4:	e00e      	b.n	800bcc4 <HAL_RCCEx_PeriphCLKConfig+0x1058>

      case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for SDMMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 800bca6:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800bcaa:	3308      	adds	r3, #8
 800bcac:	2102      	movs	r1, #2
 800bcae:	4618      	mov	r0, r3
 800bcb0:	f001 fbcc 	bl	800d44c <RCCEx_PLL2_Config>
 800bcb4:	4603      	mov	r3, r0
 800bcb6:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 800bcba:	e003      	b.n	800bcc4 <HAL_RCCEx_PeriphCLKConfig+0x1058>

      default:
        ret = HAL_ERROR;
 800bcbc:	2301      	movs	r3, #1
 800bcbe:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 800bcc2:	bf00      	nop
    }

    if (ret == HAL_OK)
 800bcc4:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800bcc8:	2b00      	cmp	r3, #0
 800bcca:	d10d      	bne.n	800bce8 <HAL_RCCEx_PeriphCLKConfig+0x107c>
    {
      /* Set the source of SDMMC clock*/
      __HAL_RCC_SDMMC_CONFIG(PeriphClkInit->SdmmcClockSelection);
 800bccc:	4b05      	ldr	r3, [pc, #20]	; (800bce4 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800bcce:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800bcd0:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 800bcd4:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800bcd8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800bcda:	4a02      	ldr	r2, [pc, #8]	; (800bce4 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800bcdc:	430b      	orrs	r3, r1
 800bcde:	64d3      	str	r3, [r2, #76]	; 0x4c
 800bce0:	e006      	b.n	800bcf0 <HAL_RCCEx_PeriphCLKConfig+0x1084>
 800bce2:	bf00      	nop
 800bce4:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 800bce8:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800bcec:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

#if defined(LTDC)
  /*-------------------------------------- LTDC Configuration -----------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 800bcf0:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800bcf4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bcf8:	f002 5300 	and.w	r3, r2, #536870912	; 0x20000000
 800bcfc:	66bb      	str	r3, [r7, #104]	; 0x68
 800bcfe:	2300      	movs	r3, #0
 800bd00:	66fb      	str	r3, [r7, #108]	; 0x6c
 800bd02:	e9d7 121a 	ldrd	r1, r2, [r7, #104]	; 0x68
 800bd06:	460b      	mov	r3, r1
 800bd08:	4313      	orrs	r3, r2
 800bd0a:	d00c      	beq.n	800bd26 <HAL_RCCEx_PeriphCLKConfig+0x10ba>
  {
    if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 800bd0c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800bd10:	3328      	adds	r3, #40	; 0x28
 800bd12:	2102      	movs	r1, #2
 800bd14:	4618      	mov	r0, r3
 800bd16:	f001 fc4b 	bl	800d5b0 <RCCEx_PLL3_Config>
 800bd1a:	4603      	mov	r3, r0
 800bd1c:	2b00      	cmp	r3, #0
 800bd1e:	d002      	beq.n	800bd26 <HAL_RCCEx_PeriphCLKConfig+0x10ba>
    {
      status = HAL_ERROR;
 800bd20:	2301      	movs	r3, #1
 800bd22:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }
#endif /* LTDC */

  /*------------------------------ RNG Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 800bd26:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800bd2a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bd2e:	f402 3300 	and.w	r3, r2, #131072	; 0x20000
 800bd32:	663b      	str	r3, [r7, #96]	; 0x60
 800bd34:	2300      	movs	r3, #0
 800bd36:	667b      	str	r3, [r7, #100]	; 0x64
 800bd38:	e9d7 1218 	ldrd	r1, r2, [r7, #96]	; 0x60
 800bd3c:	460b      	mov	r3, r1
 800bd3e:	4313      	orrs	r3, r2
 800bd40:	d038      	beq.n	800bdb4 <HAL_RCCEx_PeriphCLKConfig+0x1148>
  {

    switch (PeriphClkInit->RngClockSelection)
 800bd42:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800bd46:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800bd4a:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800bd4e:	d018      	beq.n	800bd82 <HAL_RCCEx_PeriphCLKConfig+0x1116>
 800bd50:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800bd54:	d811      	bhi.n	800bd7a <HAL_RCCEx_PeriphCLKConfig+0x110e>
 800bd56:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800bd5a:	d014      	beq.n	800bd86 <HAL_RCCEx_PeriphCLKConfig+0x111a>
 800bd5c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800bd60:	d80b      	bhi.n	800bd7a <HAL_RCCEx_PeriphCLKConfig+0x110e>
 800bd62:	2b00      	cmp	r3, #0
 800bd64:	d011      	beq.n	800bd8a <HAL_RCCEx_PeriphCLKConfig+0x111e>
 800bd66:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800bd6a:	d106      	bne.n	800bd7a <HAL_RCCEx_PeriphCLKConfig+0x110e>
    {
      case RCC_RNGCLKSOURCE_PLL:     /* PLL is used as clock source for RNG*/
        /* Enable RNG Clock output generated form System RNG . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800bd6c:	4bc3      	ldr	r3, [pc, #780]	; (800c07c <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800bd6e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800bd70:	4ac2      	ldr	r2, [pc, #776]	; (800c07c <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800bd72:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800bd76:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* RNG clock source configuration done later after clock selection check */
        break;
 800bd78:	e008      	b.n	800bd8c <HAL_RCCEx_PeriphCLKConfig+0x1120>
        /* HSI48 oscillator is used as source of RNG clock */
        /* RNG clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800bd7a:	2301      	movs	r3, #1
 800bd7c:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 800bd80:	e004      	b.n	800bd8c <HAL_RCCEx_PeriphCLKConfig+0x1120>
        break;
 800bd82:	bf00      	nop
 800bd84:	e002      	b.n	800bd8c <HAL_RCCEx_PeriphCLKConfig+0x1120>
        break;
 800bd86:	bf00      	nop
 800bd88:	e000      	b.n	800bd8c <HAL_RCCEx_PeriphCLKConfig+0x1120>
        break;
 800bd8a:	bf00      	nop
    }

    if (ret == HAL_OK)
 800bd8c:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800bd90:	2b00      	cmp	r3, #0
 800bd92:	d10b      	bne.n	800bdac <HAL_RCCEx_PeriphCLKConfig+0x1140>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 800bd94:	4bb9      	ldr	r3, [pc, #740]	; (800c07c <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800bd96:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800bd98:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 800bd9c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800bda0:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800bda4:	4ab5      	ldr	r2, [pc, #724]	; (800c07c <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800bda6:	430b      	orrs	r3, r1
 800bda8:	6553      	str	r3, [r2, #84]	; 0x54
 800bdaa:	e003      	b.n	800bdb4 <HAL_RCCEx_PeriphCLKConfig+0x1148>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800bdac:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800bdb0:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }

  }

  /*------------------------------ SWPMI1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 800bdb4:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800bdb8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bdbc:	f402 1380 	and.w	r3, r2, #1048576	; 0x100000
 800bdc0:	65bb      	str	r3, [r7, #88]	; 0x58
 800bdc2:	2300      	movs	r3, #0
 800bdc4:	65fb      	str	r3, [r7, #92]	; 0x5c
 800bdc6:	e9d7 1216 	ldrd	r1, r2, [r7, #88]	; 0x58
 800bdca:	460b      	mov	r3, r1
 800bdcc:	4313      	orrs	r3, r2
 800bdce:	d009      	beq.n	800bde4 <HAL_RCCEx_PeriphCLKConfig+0x1178>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 interface clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 800bdd0:	4baa      	ldr	r3, [pc, #680]	; (800c07c <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800bdd2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800bdd4:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
 800bdd8:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800bddc:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800bdde:	4aa7      	ldr	r2, [pc, #668]	; (800c07c <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800bde0:	430b      	orrs	r3, r1
 800bde2:	6513      	str	r3, [r2, #80]	; 0x50
  }
#if defined(HRTIM1)
  /*------------------------------ HRTIM1 clock Configuration ----------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_HRTIM1) == RCC_PERIPHCLK_HRTIM1)
 800bde4:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800bde8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bdec:	f002 5380 	and.w	r3, r2, #268435456	; 0x10000000
 800bdf0:	653b      	str	r3, [r7, #80]	; 0x50
 800bdf2:	2300      	movs	r3, #0
 800bdf4:	657b      	str	r3, [r7, #84]	; 0x54
 800bdf6:	e9d7 1214 	ldrd	r1, r2, [r7, #80]	; 0x50
 800bdfa:	460b      	mov	r3, r1
 800bdfc:	4313      	orrs	r3, r2
 800bdfe:	d00a      	beq.n	800be16 <HAL_RCCEx_PeriphCLKConfig+0x11aa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HRTIM1CLKSOURCE(PeriphClkInit->Hrtim1ClockSelection));

    /* Configure the HRTIM1 clock source */
    __HAL_RCC_HRTIM1_CONFIG(PeriphClkInit->Hrtim1ClockSelection);
 800be00:	4b9e      	ldr	r3, [pc, #632]	; (800c07c <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800be02:	691b      	ldr	r3, [r3, #16]
 800be04:	f423 4180 	bic.w	r1, r3, #16384	; 0x4000
 800be08:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800be0c:	f8d3 30b8 	ldr.w	r3, [r3, #184]	; 0xb8
 800be10:	4a9a      	ldr	r2, [pc, #616]	; (800c07c <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800be12:	430b      	orrs	r3, r1
 800be14:	6113      	str	r3, [r2, #16]
  }
#endif  /*HRTIM1*/
  /*------------------------------ DFSDM1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 800be16:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800be1a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800be1e:	f402 1300 	and.w	r3, r2, #2097152	; 0x200000
 800be22:	64bb      	str	r3, [r7, #72]	; 0x48
 800be24:	2300      	movs	r3, #0
 800be26:	64fb      	str	r3, [r7, #76]	; 0x4c
 800be28:	e9d7 1212 	ldrd	r1, r2, [r7, #72]	; 0x48
 800be2c:	460b      	mov	r3, r1
 800be2e:	4313      	orrs	r3, r2
 800be30:	d009      	beq.n	800be46 <HAL_RCCEx_PeriphCLKConfig+0x11da>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 800be32:	4b92      	ldr	r3, [pc, #584]	; (800c07c <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800be34:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800be36:	f023 7180 	bic.w	r1, r3, #16777216	; 0x1000000
 800be3a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800be3e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800be40:	4a8e      	ldr	r2, [pc, #568]	; (800c07c <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800be42:	430b      	orrs	r3, r1
 800be44:	6513      	str	r3, [r2, #80]	; 0x50
    __HAL_RCC_DFSDM2_CONFIG(PeriphClkInit->Dfsdm2ClockSelection);
  }
#endif  /* DFSDM2 */

  /*------------------------------------ TIM configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
 800be46:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800be4a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800be4e:	f002 4380 	and.w	r3, r2, #1073741824	; 0x40000000
 800be52:	643b      	str	r3, [r7, #64]	; 0x40
 800be54:	2300      	movs	r3, #0
 800be56:	647b      	str	r3, [r7, #68]	; 0x44
 800be58:	e9d7 1210 	ldrd	r1, r2, [r7, #64]	; 0x40
 800be5c:	460b      	mov	r3, r1
 800be5e:	4313      	orrs	r3, r2
 800be60:	d00e      	beq.n	800be80 <HAL_RCCEx_PeriphCLKConfig+0x1214>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 800be62:	4b86      	ldr	r3, [pc, #536]	; (800c07c <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800be64:	691b      	ldr	r3, [r3, #16]
 800be66:	4a85      	ldr	r2, [pc, #532]	; (800c07c <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800be68:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 800be6c:	6113      	str	r3, [r2, #16]
 800be6e:	4b83      	ldr	r3, [pc, #524]	; (800c07c <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800be70:	6919      	ldr	r1, [r3, #16]
 800be72:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800be76:	f8d3 30bc 	ldr.w	r3, [r3, #188]	; 0xbc
 800be7a:	4a80      	ldr	r2, [pc, #512]	; (800c07c <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800be7c:	430b      	orrs	r3, r1
 800be7e:	6113      	str	r3, [r2, #16]
  }

  /*------------------------------------ CKPER configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
 800be80:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800be84:	e9d3 2300 	ldrd	r2, r3, [r3]
 800be88:	f002 4300 	and.w	r3, r2, #2147483648	; 0x80000000
 800be8c:	63bb      	str	r3, [r7, #56]	; 0x38
 800be8e:	2300      	movs	r3, #0
 800be90:	63fb      	str	r3, [r7, #60]	; 0x3c
 800be92:	e9d7 120e 	ldrd	r1, r2, [r7, #56]	; 0x38
 800be96:	460b      	mov	r3, r1
 800be98:	4313      	orrs	r3, r2
 800be9a:	d009      	beq.n	800beb0 <HAL_RCCEx_PeriphCLKConfig+0x1244>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLKPSOURCE(PeriphClkInit->CkperClockSelection));

    /* Configure the CKPER clock source */
    __HAL_RCC_CLKP_CONFIG(PeriphClkInit->CkperClockSelection);
 800be9c:	4b77      	ldr	r3, [pc, #476]	; (800c07c <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800be9e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800bea0:	f023 5140 	bic.w	r1, r3, #805306368	; 0x30000000
 800bea4:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800bea8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800beaa:	4a74      	ldr	r2, [pc, #464]	; (800c07c <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800beac:	430b      	orrs	r3, r1
 800beae:	64d3      	str	r3, [r2, #76]	; 0x4c
  }

  /*------------------------------ CEC Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 800beb0:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800beb4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800beb8:	f402 0300 	and.w	r3, r2, #8388608	; 0x800000
 800bebc:	633b      	str	r3, [r7, #48]	; 0x30
 800bebe:	2300      	movs	r3, #0
 800bec0:	637b      	str	r3, [r7, #52]	; 0x34
 800bec2:	e9d7 120c 	ldrd	r1, r2, [r7, #48]	; 0x30
 800bec6:	460b      	mov	r3, r1
 800bec8:	4313      	orrs	r3, r2
 800beca:	d00a      	beq.n	800bee2 <HAL_RCCEx_PeriphCLKConfig+0x1276>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC interface clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 800becc:	4b6b      	ldr	r3, [pc, #428]	; (800c07c <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800bece:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800bed0:	f423 0140 	bic.w	r1, r3, #12582912	; 0xc00000
 800bed4:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800bed8:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800bedc:	4a67      	ldr	r2, [pc, #412]	; (800c07c <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800bede:	430b      	orrs	r3, r1
 800bee0:	6553      	str	r3, [r2, #84]	; 0x54
  }

  /*---------------------------- PLL2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVP) == RCC_PERIPHCLK_PLL2_DIVP)
 800bee2:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800bee6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800beea:	2100      	movs	r1, #0
 800beec:	62b9      	str	r1, [r7, #40]	; 0x28
 800beee:	f003 0301 	and.w	r3, r3, #1
 800bef2:	62fb      	str	r3, [r7, #44]	; 0x2c
 800bef4:	e9d7 120a 	ldrd	r1, r2, [r7, #40]	; 0x28
 800bef8:	460b      	mov	r3, r1
 800befa:	4313      	orrs	r3, r2
 800befc:	d011      	beq.n	800bf22 <HAL_RCCEx_PeriphCLKConfig+0x12b6>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800befe:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800bf02:	3308      	adds	r3, #8
 800bf04:	2100      	movs	r1, #0
 800bf06:	4618      	mov	r0, r3
 800bf08:	f001 faa0 	bl	800d44c <RCCEx_PLL2_Config>
 800bf0c:	4603      	mov	r3, r0
 800bf0e:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
    
    if (ret == HAL_OK)
 800bf12:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800bf16:	2b00      	cmp	r3, #0
 800bf18:	d003      	beq.n	800bf22 <HAL_RCCEx_PeriphCLKConfig+0x12b6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 800bf1a:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800bf1e:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    } 
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVQ) == RCC_PERIPHCLK_PLL2_DIVQ)
 800bf22:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800bf26:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bf2a:	2100      	movs	r1, #0
 800bf2c:	6239      	str	r1, [r7, #32]
 800bf2e:	f003 0302 	and.w	r3, r3, #2
 800bf32:	627b      	str	r3, [r7, #36]	; 0x24
 800bf34:	e9d7 1208 	ldrd	r1, r2, [r7, #32]
 800bf38:	460b      	mov	r3, r1
 800bf3a:	4313      	orrs	r3, r2
 800bf3c:	d011      	beq.n	800bf62 <HAL_RCCEx_PeriphCLKConfig+0x12f6>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800bf3e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800bf42:	3308      	adds	r3, #8
 800bf44:	2101      	movs	r1, #1
 800bf46:	4618      	mov	r0, r3
 800bf48:	f001 fa80 	bl	800d44c <RCCEx_PLL2_Config>
 800bf4c:	4603      	mov	r3, r0
 800bf4e:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
    
    if (ret == HAL_OK)
 800bf52:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800bf56:	2b00      	cmp	r3, #0
 800bf58:	d003      	beq.n	800bf62 <HAL_RCCEx_PeriphCLKConfig+0x12f6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 800bf5a:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800bf5e:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVR) == RCC_PERIPHCLK_PLL2_DIVR)
 800bf62:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800bf66:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bf6a:	2100      	movs	r1, #0
 800bf6c:	61b9      	str	r1, [r7, #24]
 800bf6e:	f003 0304 	and.w	r3, r3, #4
 800bf72:	61fb      	str	r3, [r7, #28]
 800bf74:	e9d7 1206 	ldrd	r1, r2, [r7, #24]
 800bf78:	460b      	mov	r3, r1
 800bf7a:	4313      	orrs	r3, r2
 800bf7c:	d011      	beq.n	800bfa2 <HAL_RCCEx_PeriphCLKConfig+0x1336>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 800bf7e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800bf82:	3308      	adds	r3, #8
 800bf84:	2102      	movs	r1, #2
 800bf86:	4618      	mov	r0, r3
 800bf88:	f001 fa60 	bl	800d44c <RCCEx_PLL2_Config>
 800bf8c:	4603      	mov	r3, r0
 800bf8e:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
    
    if (ret == HAL_OK)
 800bf92:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800bf96:	2b00      	cmp	r3, #0
 800bf98:	d003      	beq.n	800bfa2 <HAL_RCCEx_PeriphCLKConfig+0x1336>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 800bf9a:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800bf9e:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }
  

  /*---------------------------- PLL3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVP) == RCC_PERIPHCLK_PLL3_DIVP)
 800bfa2:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800bfa6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bfaa:	2100      	movs	r1, #0
 800bfac:	6139      	str	r1, [r7, #16]
 800bfae:	f003 0308 	and.w	r3, r3, #8
 800bfb2:	617b      	str	r3, [r7, #20]
 800bfb4:	e9d7 1204 	ldrd	r1, r2, [r7, #16]
 800bfb8:	460b      	mov	r3, r1
 800bfba:	4313      	orrs	r3, r2
 800bfbc:	d011      	beq.n	800bfe2 <HAL_RCCEx_PeriphCLKConfig+0x1376>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 800bfbe:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800bfc2:	3328      	adds	r3, #40	; 0x28
 800bfc4:	2100      	movs	r1, #0
 800bfc6:	4618      	mov	r0, r3
 800bfc8:	f001 faf2 	bl	800d5b0 <RCCEx_PLL3_Config>
 800bfcc:	4603      	mov	r3, r0
 800bfce:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
  
    if (ret == HAL_OK)
 800bfd2:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800bfd6:	2b00      	cmp	r3, #0
 800bfd8:	d003      	beq.n	800bfe2 <HAL_RCCEx_PeriphCLKConfig+0x1376>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 800bfda:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800bfde:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVQ) == RCC_PERIPHCLK_PLL3_DIVQ)
 800bfe2:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800bfe6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bfea:	2100      	movs	r1, #0
 800bfec:	60b9      	str	r1, [r7, #8]
 800bfee:	f003 0310 	and.w	r3, r3, #16
 800bff2:	60fb      	str	r3, [r7, #12]
 800bff4:	e9d7 1202 	ldrd	r1, r2, [r7, #8]
 800bff8:	460b      	mov	r3, r1
 800bffa:	4313      	orrs	r3, r2
 800bffc:	d011      	beq.n	800c022 <HAL_RCCEx_PeriphCLKConfig+0x13b6>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800bffe:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800c002:	3328      	adds	r3, #40	; 0x28
 800c004:	2101      	movs	r1, #1
 800c006:	4618      	mov	r0, r3
 800c008:	f001 fad2 	bl	800d5b0 <RCCEx_PLL3_Config>
 800c00c:	4603      	mov	r3, r0
 800c00e:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
    
    if (ret == HAL_OK)
 800c012:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800c016:	2b00      	cmp	r3, #0
 800c018:	d003      	beq.n	800c022 <HAL_RCCEx_PeriphCLKConfig+0x13b6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 800c01a:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800c01e:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVR) == RCC_PERIPHCLK_PLL3_DIVR)
 800c022:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800c026:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c02a:	2100      	movs	r1, #0
 800c02c:	6039      	str	r1, [r7, #0]
 800c02e:	f003 0320 	and.w	r3, r3, #32
 800c032:	607b      	str	r3, [r7, #4]
 800c034:	e9d7 1200 	ldrd	r1, r2, [r7]
 800c038:	460b      	mov	r3, r1
 800c03a:	4313      	orrs	r3, r2
 800c03c:	d011      	beq.n	800c062 <HAL_RCCEx_PeriphCLKConfig+0x13f6>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800c03e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800c042:	3328      	adds	r3, #40	; 0x28
 800c044:	2102      	movs	r1, #2
 800c046:	4618      	mov	r0, r3
 800c048:	f001 fab2 	bl	800d5b0 <RCCEx_PLL3_Config>
 800c04c:	4603      	mov	r3, r0
 800c04e:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
    
    if (ret == HAL_OK)
 800c052:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800c056:	2b00      	cmp	r3, #0
 800c058:	d003      	beq.n	800c062 <HAL_RCCEx_PeriphCLKConfig+0x13f6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 800c05a:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800c05e:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    } 
  }

  if (status == HAL_OK)
 800c062:	f897 3126 	ldrb.w	r3, [r7, #294]	; 0x126
 800c066:	2b00      	cmp	r3, #0
 800c068:	d101      	bne.n	800c06e <HAL_RCCEx_PeriphCLKConfig+0x1402>
  {
    return HAL_OK;
 800c06a:	2300      	movs	r3, #0
 800c06c:	e000      	b.n	800c070 <HAL_RCCEx_PeriphCLKConfig+0x1404>
  }
  return HAL_ERROR;
 800c06e:	2301      	movs	r3, #1
}
 800c070:	4618      	mov	r0, r3
 800c072:	f507 7794 	add.w	r7, r7, #296	; 0x128
 800c076:	46bd      	mov	sp, r7
 800c078:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800c07c:	58024400 	.word	0x58024400

0800c080 <HAL_RCCEx_GetPeriphCLKFreq>:
  * @retval Frequency in KHz
  *
  *  (*) : Available on some STM32H7 lines only.
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint64_t PeriphClk)
{
 800c080:	b580      	push	{r7, lr}
 800c082:	b090      	sub	sp, #64	; 0x40
 800c084:	af00      	add	r7, sp, #0
 800c086:	e9c7 0100 	strd	r0, r1, [r7]
  /* This variable is used to store the SAI and CKP clock source */
  uint32_t saiclocksource;
  uint32_t ckpclocksource;
  uint32_t srcclk;

  if (PeriphClk == RCC_PERIPHCLK_SAI1)
 800c08a:	e9d7 2300 	ldrd	r2, r3, [r7]
 800c08e:	f5a2 7180 	sub.w	r1, r2, #256	; 0x100
 800c092:	430b      	orrs	r3, r1
 800c094:	f040 8094 	bne.w	800c1c0 <HAL_RCCEx_GetPeriphCLKFreq+0x140>
  {

    saiclocksource = __HAL_RCC_GET_SAI1_SOURCE();
 800c098:	4b9e      	ldr	r3, [pc, #632]	; (800c314 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800c09a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800c09c:	f003 0307 	and.w	r3, r3, #7
 800c0a0:	633b      	str	r3, [r7, #48]	; 0x30

    switch (saiclocksource)
 800c0a2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c0a4:	2b04      	cmp	r3, #4
 800c0a6:	f200 8087 	bhi.w	800c1b8 <HAL_RCCEx_GetPeriphCLKFreq+0x138>
 800c0aa:	a201      	add	r2, pc, #4	; (adr r2, 800c0b0 <HAL_RCCEx_GetPeriphCLKFreq+0x30>)
 800c0ac:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c0b0:	0800c0c5 	.word	0x0800c0c5
 800c0b4:	0800c0ed 	.word	0x0800c0ed
 800c0b8:	0800c115 	.word	0x0800c115
 800c0bc:	0800c1b1 	.word	0x0800c1b1
 800c0c0:	0800c13d 	.word	0x0800c13d
    {
      case RCC_SAI1CLKSOURCE_PLL: /* PLL1 is the clock source for SAI1 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 800c0c4:	4b93      	ldr	r3, [pc, #588]	; (800c314 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800c0c6:	681b      	ldr	r3, [r3, #0]
 800c0c8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800c0cc:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800c0d0:	d108      	bne.n	800c0e4 <HAL_RCCEx_GetPeriphCLKFreq+0x64>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800c0d2:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800c0d6:	4618      	mov	r0, r3
 800c0d8:	f001 f810 	bl	800d0fc <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 800c0dc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c0de:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800c0e0:	f000 bd45 	b.w	800cb6e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800c0e4:	2300      	movs	r3, #0
 800c0e6:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800c0e8:	f000 bd41 	b.w	800cb6e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is the clock source for SAI1 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800c0ec:	4b89      	ldr	r3, [pc, #548]	; (800c314 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800c0ee:	681b      	ldr	r3, [r3, #0]
 800c0f0:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800c0f4:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800c0f8:	d108      	bne.n	800c10c <HAL_RCCEx_GetPeriphCLKFreq+0x8c>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800c0fa:	f107 0318 	add.w	r3, r7, #24
 800c0fe:	4618      	mov	r0, r3
 800c100:	f000 fd54 	bl	800cbac <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 800c104:	69bb      	ldr	r3, [r7, #24]
 800c106:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800c108:	f000 bd31 	b.w	800cb6e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800c10c:	2300      	movs	r3, #0
 800c10e:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800c110:	f000 bd2d 	b.w	800cb6e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI1CLKSOURCE_PLL3: /* PLL3 is the clock source for SAI1 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800c114:	4b7f      	ldr	r3, [pc, #508]	; (800c314 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800c116:	681b      	ldr	r3, [r3, #0]
 800c118:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800c11c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800c120:	d108      	bne.n	800c134 <HAL_RCCEx_GetPeriphCLKFreq+0xb4>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800c122:	f107 030c 	add.w	r3, r7, #12
 800c126:	4618      	mov	r0, r3
 800c128:	f000 fe94 	bl	800ce54 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 800c12c:	68fb      	ldr	r3, [r7, #12]
 800c12e:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800c130:	f000 bd1d 	b.w	800cb6e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800c134:	2300      	movs	r3, #0
 800c136:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800c138:	f000 bd19 	b.w	800cb6e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI1CLKSOURCE_CLKP: /* CKPER is the clock source for SAI1*/
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 800c13c:	4b75      	ldr	r3, [pc, #468]	; (800c314 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800c13e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800c140:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800c144:	637b      	str	r3, [r7, #52]	; 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 800c146:	4b73      	ldr	r3, [pc, #460]	; (800c314 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800c148:	681b      	ldr	r3, [r3, #0]
 800c14a:	f003 0304 	and.w	r3, r3, #4
 800c14e:	2b04      	cmp	r3, #4
 800c150:	d10c      	bne.n	800c16c <HAL_RCCEx_GetPeriphCLKFreq+0xec>
 800c152:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800c154:	2b00      	cmp	r3, #0
 800c156:	d109      	bne.n	800c16c <HAL_RCCEx_GetPeriphCLKFreq+0xec>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800c158:	4b6e      	ldr	r3, [pc, #440]	; (800c314 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800c15a:	681b      	ldr	r3, [r3, #0]
 800c15c:	08db      	lsrs	r3, r3, #3
 800c15e:	f003 0303 	and.w	r3, r3, #3
 800c162:	4a6d      	ldr	r2, [pc, #436]	; (800c318 <HAL_RCCEx_GetPeriphCLKFreq+0x298>)
 800c164:	fa22 f303 	lsr.w	r3, r2, r3
 800c168:	63fb      	str	r3, [r7, #60]	; 0x3c
 800c16a:	e01f      	b.n	800c1ac <HAL_RCCEx_GetPeriphCLKFreq+0x12c>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 800c16c:	4b69      	ldr	r3, [pc, #420]	; (800c314 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800c16e:	681b      	ldr	r3, [r3, #0]
 800c170:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800c174:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800c178:	d106      	bne.n	800c188 <HAL_RCCEx_GetPeriphCLKFreq+0x108>
 800c17a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800c17c:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800c180:	d102      	bne.n	800c188 <HAL_RCCEx_GetPeriphCLKFreq+0x108>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 800c182:	4b66      	ldr	r3, [pc, #408]	; (800c31c <HAL_RCCEx_GetPeriphCLKFreq+0x29c>)
 800c184:	63fb      	str	r3, [r7, #60]	; 0x3c
 800c186:	e011      	b.n	800c1ac <HAL_RCCEx_GetPeriphCLKFreq+0x12c>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 800c188:	4b62      	ldr	r3, [pc, #392]	; (800c314 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800c18a:	681b      	ldr	r3, [r3, #0]
 800c18c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800c190:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800c194:	d106      	bne.n	800c1a4 <HAL_RCCEx_GetPeriphCLKFreq+0x124>
 800c196:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800c198:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800c19c:	d102      	bne.n	800c1a4 <HAL_RCCEx_GetPeriphCLKFreq+0x124>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 800c19e:	4b60      	ldr	r3, [pc, #384]	; (800c320 <HAL_RCCEx_GetPeriphCLKFreq+0x2a0>)
 800c1a0:	63fb      	str	r3, [r7, #60]	; 0x3c
 800c1a2:	e003      	b.n	800c1ac <HAL_RCCEx_GetPeriphCLKFreq+0x12c>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 800c1a4:	2300      	movs	r3, #0
 800c1a6:	63fb      	str	r3, [r7, #60]	; 0x3c
        }

        break;
 800c1a8:	f000 bce1 	b.w	800cb6e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 800c1ac:	f000 bcdf 	b.w	800cb6e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case (RCC_SAI1CLKSOURCE_PIN): /* External clock is the clock source for SAI1 */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 800c1b0:	4b5c      	ldr	r3, [pc, #368]	; (800c324 <HAL_RCCEx_GetPeriphCLKFreq+0x2a4>)
 800c1b2:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800c1b4:	f000 bcdb 	b.w	800cb6e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      default :
      {
        frequency = 0;
 800c1b8:	2300      	movs	r3, #0
 800c1ba:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800c1bc:	f000 bcd7 	b.w	800cb6e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }

#if defined(SAI3)
  else if (PeriphClk == RCC_PERIPHCLK_SAI23)
 800c1c0:	e9d7 2300 	ldrd	r2, r3, [r7]
 800c1c4:	f5a2 7100 	sub.w	r1, r2, #512	; 0x200
 800c1c8:	430b      	orrs	r3, r1
 800c1ca:	f040 80ad 	bne.w	800c328 <HAL_RCCEx_GetPeriphCLKFreq+0x2a8>
  {

    saiclocksource = __HAL_RCC_GET_SAI23_SOURCE();
 800c1ce:	4b51      	ldr	r3, [pc, #324]	; (800c314 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800c1d0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800c1d2:	f403 73e0 	and.w	r3, r3, #448	; 0x1c0
 800c1d6:	633b      	str	r3, [r7, #48]	; 0x30

    switch (saiclocksource)
 800c1d8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c1da:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800c1de:	d056      	beq.n	800c28e <HAL_RCCEx_GetPeriphCLKFreq+0x20e>
 800c1e0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c1e2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800c1e6:	f200 8090 	bhi.w	800c30a <HAL_RCCEx_GetPeriphCLKFreq+0x28a>
 800c1ea:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c1ec:	2bc0      	cmp	r3, #192	; 0xc0
 800c1ee:	f000 8088 	beq.w	800c302 <HAL_RCCEx_GetPeriphCLKFreq+0x282>
 800c1f2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c1f4:	2bc0      	cmp	r3, #192	; 0xc0
 800c1f6:	f200 8088 	bhi.w	800c30a <HAL_RCCEx_GetPeriphCLKFreq+0x28a>
 800c1fa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c1fc:	2b80      	cmp	r3, #128	; 0x80
 800c1fe:	d032      	beq.n	800c266 <HAL_RCCEx_GetPeriphCLKFreq+0x1e6>
 800c200:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c202:	2b80      	cmp	r3, #128	; 0x80
 800c204:	f200 8081 	bhi.w	800c30a <HAL_RCCEx_GetPeriphCLKFreq+0x28a>
 800c208:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c20a:	2b00      	cmp	r3, #0
 800c20c:	d003      	beq.n	800c216 <HAL_RCCEx_GetPeriphCLKFreq+0x196>
 800c20e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c210:	2b40      	cmp	r3, #64	; 0x40
 800c212:	d014      	beq.n	800c23e <HAL_RCCEx_GetPeriphCLKFreq+0x1be>
 800c214:	e079      	b.n	800c30a <HAL_RCCEx_GetPeriphCLKFreq+0x28a>
    {
      case RCC_SAI23CLKSOURCE_PLL: /* PLL1 is the clock source for SAI2/3 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 800c216:	4b3f      	ldr	r3, [pc, #252]	; (800c314 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800c218:	681b      	ldr	r3, [r3, #0]
 800c21a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800c21e:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800c222:	d108      	bne.n	800c236 <HAL_RCCEx_GetPeriphCLKFreq+0x1b6>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800c224:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800c228:	4618      	mov	r0, r3
 800c22a:	f000 ff67 	bl	800d0fc <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 800c22e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c230:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800c232:	f000 bc9c 	b.w	800cb6e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800c236:	2300      	movs	r3, #0
 800c238:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800c23a:	f000 bc98 	b.w	800cb6e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SAI23CLKSOURCE_PLL2: /* PLL2 is the clock source for SAI2/3 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800c23e:	4b35      	ldr	r3, [pc, #212]	; (800c314 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800c240:	681b      	ldr	r3, [r3, #0]
 800c242:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800c246:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800c24a:	d108      	bne.n	800c25e <HAL_RCCEx_GetPeriphCLKFreq+0x1de>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800c24c:	f107 0318 	add.w	r3, r7, #24
 800c250:	4618      	mov	r0, r3
 800c252:	f000 fcab 	bl	800cbac <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 800c256:	69bb      	ldr	r3, [r7, #24]
 800c258:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800c25a:	f000 bc88 	b.w	800cb6e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800c25e:	2300      	movs	r3, #0
 800c260:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800c262:	f000 bc84 	b.w	800cb6e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI23CLKSOURCE_PLL3: /* PLL3 is the clock source for SAI2/3 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800c266:	4b2b      	ldr	r3, [pc, #172]	; (800c314 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800c268:	681b      	ldr	r3, [r3, #0]
 800c26a:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800c26e:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800c272:	d108      	bne.n	800c286 <HAL_RCCEx_GetPeriphCLKFreq+0x206>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800c274:	f107 030c 	add.w	r3, r7, #12
 800c278:	4618      	mov	r0, r3
 800c27a:	f000 fdeb 	bl	800ce54 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 800c27e:	68fb      	ldr	r3, [r7, #12]
 800c280:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800c282:	f000 bc74 	b.w	800cb6e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800c286:	2300      	movs	r3, #0
 800c288:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800c28a:	f000 bc70 	b.w	800cb6e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI23CLKSOURCE_CLKP: /* CKPER is the clock source for SAI2/3 */
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 800c28e:	4b21      	ldr	r3, [pc, #132]	; (800c314 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800c290:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800c292:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800c296:	637b      	str	r3, [r7, #52]	; 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 800c298:	4b1e      	ldr	r3, [pc, #120]	; (800c314 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800c29a:	681b      	ldr	r3, [r3, #0]
 800c29c:	f003 0304 	and.w	r3, r3, #4
 800c2a0:	2b04      	cmp	r3, #4
 800c2a2:	d10c      	bne.n	800c2be <HAL_RCCEx_GetPeriphCLKFreq+0x23e>
 800c2a4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800c2a6:	2b00      	cmp	r3, #0
 800c2a8:	d109      	bne.n	800c2be <HAL_RCCEx_GetPeriphCLKFreq+0x23e>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800c2aa:	4b1a      	ldr	r3, [pc, #104]	; (800c314 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800c2ac:	681b      	ldr	r3, [r3, #0]
 800c2ae:	08db      	lsrs	r3, r3, #3
 800c2b0:	f003 0303 	and.w	r3, r3, #3
 800c2b4:	4a18      	ldr	r2, [pc, #96]	; (800c318 <HAL_RCCEx_GetPeriphCLKFreq+0x298>)
 800c2b6:	fa22 f303 	lsr.w	r3, r2, r3
 800c2ba:	63fb      	str	r3, [r7, #60]	; 0x3c
 800c2bc:	e01f      	b.n	800c2fe <HAL_RCCEx_GetPeriphCLKFreq+0x27e>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 800c2be:	4b15      	ldr	r3, [pc, #84]	; (800c314 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800c2c0:	681b      	ldr	r3, [r3, #0]
 800c2c2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800c2c6:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800c2ca:	d106      	bne.n	800c2da <HAL_RCCEx_GetPeriphCLKFreq+0x25a>
 800c2cc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800c2ce:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800c2d2:	d102      	bne.n	800c2da <HAL_RCCEx_GetPeriphCLKFreq+0x25a>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 800c2d4:	4b11      	ldr	r3, [pc, #68]	; (800c31c <HAL_RCCEx_GetPeriphCLKFreq+0x29c>)
 800c2d6:	63fb      	str	r3, [r7, #60]	; 0x3c
 800c2d8:	e011      	b.n	800c2fe <HAL_RCCEx_GetPeriphCLKFreq+0x27e>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 800c2da:	4b0e      	ldr	r3, [pc, #56]	; (800c314 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800c2dc:	681b      	ldr	r3, [r3, #0]
 800c2de:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800c2e2:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800c2e6:	d106      	bne.n	800c2f6 <HAL_RCCEx_GetPeriphCLKFreq+0x276>
 800c2e8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800c2ea:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800c2ee:	d102      	bne.n	800c2f6 <HAL_RCCEx_GetPeriphCLKFreq+0x276>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 800c2f0:	4b0b      	ldr	r3, [pc, #44]	; (800c320 <HAL_RCCEx_GetPeriphCLKFreq+0x2a0>)
 800c2f2:	63fb      	str	r3, [r7, #60]	; 0x3c
 800c2f4:	e003      	b.n	800c2fe <HAL_RCCEx_GetPeriphCLKFreq+0x27e>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 800c2f6:	2300      	movs	r3, #0
 800c2f8:	63fb      	str	r3, [r7, #60]	; 0x3c
        }

        break;
 800c2fa:	f000 bc38 	b.w	800cb6e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 800c2fe:	f000 bc36 	b.w	800cb6e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case (RCC_SAI23CLKSOURCE_PIN): /* External clock is the clock source for SAI2/3 */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 800c302:	4b08      	ldr	r3, [pc, #32]	; (800c324 <HAL_RCCEx_GetPeriphCLKFreq+0x2a4>)
 800c304:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800c306:	f000 bc32 	b.w	800cb6e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      default :
      {
        frequency = 0;
 800c30a:	2300      	movs	r3, #0
 800c30c:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800c30e:	f000 bc2e 	b.w	800cb6e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 800c312:	bf00      	nop
 800c314:	58024400 	.word	0x58024400
 800c318:	03d09000 	.word	0x03d09000
 800c31c:	003d0900 	.word	0x003d0900
 800c320:	00989680 	.word	0x00989680
 800c324:	00bb8000 	.word	0x00bb8000
    }
  }
#endif

#if defined(SAI4)
  else if (PeriphClk == RCC_PERIPHCLK_SAI4A)
 800c328:	e9d7 2300 	ldrd	r2, r3, [r7]
 800c32c:	f5a2 6180 	sub.w	r1, r2, #1024	; 0x400
 800c330:	430b      	orrs	r3, r1
 800c332:	f040 809c 	bne.w	800c46e <HAL_RCCEx_GetPeriphCLKFreq+0x3ee>
  {

    saiclocksource = __HAL_RCC_GET_SAI4A_SOURCE();
 800c336:	4b9e      	ldr	r3, [pc, #632]	; (800c5b0 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800c338:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800c33a:	f403 0360 	and.w	r3, r3, #14680064	; 0xe00000
 800c33e:	633b      	str	r3, [r7, #48]	; 0x30

    switch (saiclocksource)
 800c340:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c342:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 800c346:	d054      	beq.n	800c3f2 <HAL_RCCEx_GetPeriphCLKFreq+0x372>
 800c348:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c34a:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 800c34e:	f200 808b 	bhi.w	800c468 <HAL_RCCEx_GetPeriphCLKFreq+0x3e8>
 800c352:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c354:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 800c358:	f000 8083 	beq.w	800c462 <HAL_RCCEx_GetPeriphCLKFreq+0x3e2>
 800c35c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c35e:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 800c362:	f200 8081 	bhi.w	800c468 <HAL_RCCEx_GetPeriphCLKFreq+0x3e8>
 800c366:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c368:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800c36c:	d02f      	beq.n	800c3ce <HAL_RCCEx_GetPeriphCLKFreq+0x34e>
 800c36e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c370:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800c374:	d878      	bhi.n	800c468 <HAL_RCCEx_GetPeriphCLKFreq+0x3e8>
 800c376:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c378:	2b00      	cmp	r3, #0
 800c37a:	d004      	beq.n	800c386 <HAL_RCCEx_GetPeriphCLKFreq+0x306>
 800c37c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c37e:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800c382:	d012      	beq.n	800c3aa <HAL_RCCEx_GetPeriphCLKFreq+0x32a>
 800c384:	e070      	b.n	800c468 <HAL_RCCEx_GetPeriphCLKFreq+0x3e8>
    {
      case RCC_SAI4ACLKSOURCE_PLL: /* PLL1 is the clock source for SAI4A */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 800c386:	4b8a      	ldr	r3, [pc, #552]	; (800c5b0 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800c388:	681b      	ldr	r3, [r3, #0]
 800c38a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800c38e:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800c392:	d107      	bne.n	800c3a4 <HAL_RCCEx_GetPeriphCLKFreq+0x324>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800c394:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800c398:	4618      	mov	r0, r3
 800c39a:	f000 feaf 	bl	800d0fc <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 800c39e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c3a0:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800c3a2:	e3e4      	b.n	800cb6e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800c3a4:	2300      	movs	r3, #0
 800c3a6:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800c3a8:	e3e1      	b.n	800cb6e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SAI4ACLKSOURCE_PLL2: /* PLLI2 is the clock source for SAI4A */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800c3aa:	4b81      	ldr	r3, [pc, #516]	; (800c5b0 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800c3ac:	681b      	ldr	r3, [r3, #0]
 800c3ae:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800c3b2:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800c3b6:	d107      	bne.n	800c3c8 <HAL_RCCEx_GetPeriphCLKFreq+0x348>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800c3b8:	f107 0318 	add.w	r3, r7, #24
 800c3bc:	4618      	mov	r0, r3
 800c3be:	f000 fbf5 	bl	800cbac <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 800c3c2:	69bb      	ldr	r3, [r7, #24]
 800c3c4:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800c3c6:	e3d2      	b.n	800cb6e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800c3c8:	2300      	movs	r3, #0
 800c3ca:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800c3cc:	e3cf      	b.n	800cb6e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI4ACLKSOURCE_PLL3: /* PLLI3 is the clock source for SAI4A */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800c3ce:	4b78      	ldr	r3, [pc, #480]	; (800c5b0 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800c3d0:	681b      	ldr	r3, [r3, #0]
 800c3d2:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800c3d6:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800c3da:	d107      	bne.n	800c3ec <HAL_RCCEx_GetPeriphCLKFreq+0x36c>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800c3dc:	f107 030c 	add.w	r3, r7, #12
 800c3e0:	4618      	mov	r0, r3
 800c3e2:	f000 fd37 	bl	800ce54 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 800c3e6:	68fb      	ldr	r3, [r7, #12]
 800c3e8:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800c3ea:	e3c0      	b.n	800cb6e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800c3ec:	2300      	movs	r3, #0
 800c3ee:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800c3f0:	e3bd      	b.n	800cb6e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI4ACLKSOURCE_CLKP: /* CKPER is the clock source for SAI4A*/
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 800c3f2:	4b6f      	ldr	r3, [pc, #444]	; (800c5b0 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800c3f4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800c3f6:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800c3fa:	637b      	str	r3, [r7, #52]	; 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 800c3fc:	4b6c      	ldr	r3, [pc, #432]	; (800c5b0 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800c3fe:	681b      	ldr	r3, [r3, #0]
 800c400:	f003 0304 	and.w	r3, r3, #4
 800c404:	2b04      	cmp	r3, #4
 800c406:	d10c      	bne.n	800c422 <HAL_RCCEx_GetPeriphCLKFreq+0x3a2>
 800c408:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800c40a:	2b00      	cmp	r3, #0
 800c40c:	d109      	bne.n	800c422 <HAL_RCCEx_GetPeriphCLKFreq+0x3a2>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800c40e:	4b68      	ldr	r3, [pc, #416]	; (800c5b0 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800c410:	681b      	ldr	r3, [r3, #0]
 800c412:	08db      	lsrs	r3, r3, #3
 800c414:	f003 0303 	and.w	r3, r3, #3
 800c418:	4a66      	ldr	r2, [pc, #408]	; (800c5b4 <HAL_RCCEx_GetPeriphCLKFreq+0x534>)
 800c41a:	fa22 f303 	lsr.w	r3, r2, r3
 800c41e:	63fb      	str	r3, [r7, #60]	; 0x3c
 800c420:	e01e      	b.n	800c460 <HAL_RCCEx_GetPeriphCLKFreq+0x3e0>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 800c422:	4b63      	ldr	r3, [pc, #396]	; (800c5b0 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800c424:	681b      	ldr	r3, [r3, #0]
 800c426:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800c42a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800c42e:	d106      	bne.n	800c43e <HAL_RCCEx_GetPeriphCLKFreq+0x3be>
 800c430:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800c432:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800c436:	d102      	bne.n	800c43e <HAL_RCCEx_GetPeriphCLKFreq+0x3be>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 800c438:	4b5f      	ldr	r3, [pc, #380]	; (800c5b8 <HAL_RCCEx_GetPeriphCLKFreq+0x538>)
 800c43a:	63fb      	str	r3, [r7, #60]	; 0x3c
 800c43c:	e010      	b.n	800c460 <HAL_RCCEx_GetPeriphCLKFreq+0x3e0>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 800c43e:	4b5c      	ldr	r3, [pc, #368]	; (800c5b0 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800c440:	681b      	ldr	r3, [r3, #0]
 800c442:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800c446:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800c44a:	d106      	bne.n	800c45a <HAL_RCCEx_GetPeriphCLKFreq+0x3da>
 800c44c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800c44e:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800c452:	d102      	bne.n	800c45a <HAL_RCCEx_GetPeriphCLKFreq+0x3da>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 800c454:	4b59      	ldr	r3, [pc, #356]	; (800c5bc <HAL_RCCEx_GetPeriphCLKFreq+0x53c>)
 800c456:	63fb      	str	r3, [r7, #60]	; 0x3c
 800c458:	e002      	b.n	800c460 <HAL_RCCEx_GetPeriphCLKFreq+0x3e0>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 800c45a:	2300      	movs	r3, #0
 800c45c:	63fb      	str	r3, [r7, #60]	; 0x3c
        }

        break;
 800c45e:	e386      	b.n	800cb6e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 800c460:	e385      	b.n	800cb6e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI4ACLKSOURCE_PIN: /* External clock is the clock source for SAI4A */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 800c462:	4b57      	ldr	r3, [pc, #348]	; (800c5c0 <HAL_RCCEx_GetPeriphCLKFreq+0x540>)
 800c464:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800c466:	e382      	b.n	800cb6e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      default :
      {
        frequency = 0;
 800c468:	2300      	movs	r3, #0
 800c46a:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800c46c:	e37f      	b.n	800cb6e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }

  else if (PeriphClk == RCC_PERIPHCLK_SAI4B)
 800c46e:	e9d7 2300 	ldrd	r2, r3, [r7]
 800c472:	f5a2 6100 	sub.w	r1, r2, #2048	; 0x800
 800c476:	430b      	orrs	r3, r1
 800c478:	f040 80a7 	bne.w	800c5ca <HAL_RCCEx_GetPeriphCLKFreq+0x54a>
  {

    saiclocksource = __HAL_RCC_GET_SAI4B_SOURCE();
 800c47c:	4b4c      	ldr	r3, [pc, #304]	; (800c5b0 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800c47e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800c480:	f003 63e0 	and.w	r3, r3, #117440512	; 0x7000000
 800c484:	633b      	str	r3, [r7, #48]	; 0x30

    switch (saiclocksource)
 800c486:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c488:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800c48c:	d055      	beq.n	800c53a <HAL_RCCEx_GetPeriphCLKFreq+0x4ba>
 800c48e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c490:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800c494:	f200 8096 	bhi.w	800c5c4 <HAL_RCCEx_GetPeriphCLKFreq+0x544>
 800c498:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c49a:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 800c49e:	f000 8084 	beq.w	800c5aa <HAL_RCCEx_GetPeriphCLKFreq+0x52a>
 800c4a2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c4a4:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 800c4a8:	f200 808c 	bhi.w	800c5c4 <HAL_RCCEx_GetPeriphCLKFreq+0x544>
 800c4ac:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c4ae:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800c4b2:	d030      	beq.n	800c516 <HAL_RCCEx_GetPeriphCLKFreq+0x496>
 800c4b4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c4b6:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800c4ba:	f200 8083 	bhi.w	800c5c4 <HAL_RCCEx_GetPeriphCLKFreq+0x544>
 800c4be:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c4c0:	2b00      	cmp	r3, #0
 800c4c2:	d004      	beq.n	800c4ce <HAL_RCCEx_GetPeriphCLKFreq+0x44e>
 800c4c4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c4c6:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800c4ca:	d012      	beq.n	800c4f2 <HAL_RCCEx_GetPeriphCLKFreq+0x472>
 800c4cc:	e07a      	b.n	800c5c4 <HAL_RCCEx_GetPeriphCLKFreq+0x544>
    {
      case RCC_SAI4BCLKSOURCE_PLL: /* PLL1 is the clock source for SAI4B */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 800c4ce:	4b38      	ldr	r3, [pc, #224]	; (800c5b0 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800c4d0:	681b      	ldr	r3, [r3, #0]
 800c4d2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800c4d6:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800c4da:	d107      	bne.n	800c4ec <HAL_RCCEx_GetPeriphCLKFreq+0x46c>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800c4dc:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800c4e0:	4618      	mov	r0, r3
 800c4e2:	f000 fe0b 	bl	800d0fc <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 800c4e6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c4e8:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800c4ea:	e340      	b.n	800cb6e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800c4ec:	2300      	movs	r3, #0
 800c4ee:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800c4f0:	e33d      	b.n	800cb6e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SAI4BCLKSOURCE_PLL2: /* PLLI2 is the clock source for SAI4B */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800c4f2:	4b2f      	ldr	r3, [pc, #188]	; (800c5b0 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800c4f4:	681b      	ldr	r3, [r3, #0]
 800c4f6:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800c4fa:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800c4fe:	d107      	bne.n	800c510 <HAL_RCCEx_GetPeriphCLKFreq+0x490>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800c500:	f107 0318 	add.w	r3, r7, #24
 800c504:	4618      	mov	r0, r3
 800c506:	f000 fb51 	bl	800cbac <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 800c50a:	69bb      	ldr	r3, [r7, #24]
 800c50c:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800c50e:	e32e      	b.n	800cb6e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800c510:	2300      	movs	r3, #0
 800c512:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800c514:	e32b      	b.n	800cb6e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI4BCLKSOURCE_PLL3: /* PLLI3 is the clock source for SAI4B */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800c516:	4b26      	ldr	r3, [pc, #152]	; (800c5b0 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800c518:	681b      	ldr	r3, [r3, #0]
 800c51a:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800c51e:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800c522:	d107      	bne.n	800c534 <HAL_RCCEx_GetPeriphCLKFreq+0x4b4>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800c524:	f107 030c 	add.w	r3, r7, #12
 800c528:	4618      	mov	r0, r3
 800c52a:	f000 fc93 	bl	800ce54 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 800c52e:	68fb      	ldr	r3, [r7, #12]
 800c530:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800c532:	e31c      	b.n	800cb6e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800c534:	2300      	movs	r3, #0
 800c536:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800c538:	e319      	b.n	800cb6e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI4BCLKSOURCE_CLKP: /* CKPER is the clock source for SAI4B*/
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 800c53a:	4b1d      	ldr	r3, [pc, #116]	; (800c5b0 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800c53c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800c53e:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800c542:	637b      	str	r3, [r7, #52]	; 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 800c544:	4b1a      	ldr	r3, [pc, #104]	; (800c5b0 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800c546:	681b      	ldr	r3, [r3, #0]
 800c548:	f003 0304 	and.w	r3, r3, #4
 800c54c:	2b04      	cmp	r3, #4
 800c54e:	d10c      	bne.n	800c56a <HAL_RCCEx_GetPeriphCLKFreq+0x4ea>
 800c550:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800c552:	2b00      	cmp	r3, #0
 800c554:	d109      	bne.n	800c56a <HAL_RCCEx_GetPeriphCLKFreq+0x4ea>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800c556:	4b16      	ldr	r3, [pc, #88]	; (800c5b0 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800c558:	681b      	ldr	r3, [r3, #0]
 800c55a:	08db      	lsrs	r3, r3, #3
 800c55c:	f003 0303 	and.w	r3, r3, #3
 800c560:	4a14      	ldr	r2, [pc, #80]	; (800c5b4 <HAL_RCCEx_GetPeriphCLKFreq+0x534>)
 800c562:	fa22 f303 	lsr.w	r3, r2, r3
 800c566:	63fb      	str	r3, [r7, #60]	; 0x3c
 800c568:	e01e      	b.n	800c5a8 <HAL_RCCEx_GetPeriphCLKFreq+0x528>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 800c56a:	4b11      	ldr	r3, [pc, #68]	; (800c5b0 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800c56c:	681b      	ldr	r3, [r3, #0]
 800c56e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800c572:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800c576:	d106      	bne.n	800c586 <HAL_RCCEx_GetPeriphCLKFreq+0x506>
 800c578:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800c57a:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800c57e:	d102      	bne.n	800c586 <HAL_RCCEx_GetPeriphCLKFreq+0x506>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 800c580:	4b0d      	ldr	r3, [pc, #52]	; (800c5b8 <HAL_RCCEx_GetPeriphCLKFreq+0x538>)
 800c582:	63fb      	str	r3, [r7, #60]	; 0x3c
 800c584:	e010      	b.n	800c5a8 <HAL_RCCEx_GetPeriphCLKFreq+0x528>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 800c586:	4b0a      	ldr	r3, [pc, #40]	; (800c5b0 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800c588:	681b      	ldr	r3, [r3, #0]
 800c58a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800c58e:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800c592:	d106      	bne.n	800c5a2 <HAL_RCCEx_GetPeriphCLKFreq+0x522>
 800c594:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800c596:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800c59a:	d102      	bne.n	800c5a2 <HAL_RCCEx_GetPeriphCLKFreq+0x522>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 800c59c:	4b07      	ldr	r3, [pc, #28]	; (800c5bc <HAL_RCCEx_GetPeriphCLKFreq+0x53c>)
 800c59e:	63fb      	str	r3, [r7, #60]	; 0x3c
 800c5a0:	e002      	b.n	800c5a8 <HAL_RCCEx_GetPeriphCLKFreq+0x528>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 800c5a2:	2300      	movs	r3, #0
 800c5a4:	63fb      	str	r3, [r7, #60]	; 0x3c
        }

        break;
 800c5a6:	e2e2      	b.n	800cb6e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 800c5a8:	e2e1      	b.n	800cb6e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI4BCLKSOURCE_PIN: /* External clock is the clock source for SAI4B */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 800c5aa:	4b05      	ldr	r3, [pc, #20]	; (800c5c0 <HAL_RCCEx_GetPeriphCLKFreq+0x540>)
 800c5ac:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800c5ae:	e2de      	b.n	800cb6e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 800c5b0:	58024400 	.word	0x58024400
 800c5b4:	03d09000 	.word	0x03d09000
 800c5b8:	003d0900 	.word	0x003d0900
 800c5bc:	00989680 	.word	0x00989680
 800c5c0:	00bb8000 	.word	0x00bb8000
      }

      default :
      {
        frequency = 0;
 800c5c4:	2300      	movs	r3, #0
 800c5c6:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800c5c8:	e2d1      	b.n	800cb6e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }
#endif /*SAI4*/
  else if (PeriphClk == RCC_PERIPHCLK_SPI123)
 800c5ca:	e9d7 2300 	ldrd	r2, r3, [r7]
 800c5ce:	f5a2 5180 	sub.w	r1, r2, #4096	; 0x1000
 800c5d2:	430b      	orrs	r3, r1
 800c5d4:	f040 809c 	bne.w	800c710 <HAL_RCCEx_GetPeriphCLKFreq+0x690>
  {
    /* Get SPI1/2/3 clock source */
    srcclk = __HAL_RCC_GET_SPI123_SOURCE();
 800c5d8:	4b93      	ldr	r3, [pc, #588]	; (800c828 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 800c5da:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800c5dc:	f403 43e0 	and.w	r3, r3, #28672	; 0x7000
 800c5e0:	63bb      	str	r3, [r7, #56]	; 0x38

    switch (srcclk)
 800c5e2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c5e4:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800c5e8:	d054      	beq.n	800c694 <HAL_RCCEx_GetPeriphCLKFreq+0x614>
 800c5ea:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c5ec:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800c5f0:	f200 808b 	bhi.w	800c70a <HAL_RCCEx_GetPeriphCLKFreq+0x68a>
 800c5f4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c5f6:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 800c5fa:	f000 8083 	beq.w	800c704 <HAL_RCCEx_GetPeriphCLKFreq+0x684>
 800c5fe:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c600:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 800c604:	f200 8081 	bhi.w	800c70a <HAL_RCCEx_GetPeriphCLKFreq+0x68a>
 800c608:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c60a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800c60e:	d02f      	beq.n	800c670 <HAL_RCCEx_GetPeriphCLKFreq+0x5f0>
 800c610:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c612:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800c616:	d878      	bhi.n	800c70a <HAL_RCCEx_GetPeriphCLKFreq+0x68a>
 800c618:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c61a:	2b00      	cmp	r3, #0
 800c61c:	d004      	beq.n	800c628 <HAL_RCCEx_GetPeriphCLKFreq+0x5a8>
 800c61e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c620:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800c624:	d012      	beq.n	800c64c <HAL_RCCEx_GetPeriphCLKFreq+0x5cc>
 800c626:	e070      	b.n	800c70a <HAL_RCCEx_GetPeriphCLKFreq+0x68a>
    {
      case RCC_SPI123CLKSOURCE_PLL: /* PLL1 is the clock source for SPI123 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 800c628:	4b7f      	ldr	r3, [pc, #508]	; (800c828 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 800c62a:	681b      	ldr	r3, [r3, #0]
 800c62c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800c630:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800c634:	d107      	bne.n	800c646 <HAL_RCCEx_GetPeriphCLKFreq+0x5c6>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800c636:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800c63a:	4618      	mov	r0, r3
 800c63c:	f000 fd5e 	bl	800d0fc <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 800c640:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c642:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800c644:	e293      	b.n	800cb6e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800c646:	2300      	movs	r3, #0
 800c648:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800c64a:	e290      	b.n	800cb6e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is the clock source for SPI123 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800c64c:	4b76      	ldr	r3, [pc, #472]	; (800c828 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 800c64e:	681b      	ldr	r3, [r3, #0]
 800c650:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800c654:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800c658:	d107      	bne.n	800c66a <HAL_RCCEx_GetPeriphCLKFreq+0x5ea>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800c65a:	f107 0318 	add.w	r3, r7, #24
 800c65e:	4618      	mov	r0, r3
 800c660:	f000 faa4 	bl	800cbac <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 800c664:	69bb      	ldr	r3, [r7, #24]
 800c666:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800c668:	e281      	b.n	800cb6e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800c66a:	2300      	movs	r3, #0
 800c66c:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800c66e:	e27e      	b.n	800cb6e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SPI123CLKSOURCE_PLL3: /* PLL3 is the clock source for SPI123 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800c670:	4b6d      	ldr	r3, [pc, #436]	; (800c828 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 800c672:	681b      	ldr	r3, [r3, #0]
 800c674:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800c678:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800c67c:	d107      	bne.n	800c68e <HAL_RCCEx_GetPeriphCLKFreq+0x60e>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800c67e:	f107 030c 	add.w	r3, r7, #12
 800c682:	4618      	mov	r0, r3
 800c684:	f000 fbe6 	bl	800ce54 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 800c688:	68fb      	ldr	r3, [r7, #12]
 800c68a:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800c68c:	e26f      	b.n	800cb6e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800c68e:	2300      	movs	r3, #0
 800c690:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800c692:	e26c      	b.n	800cb6e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SPI123CLKSOURCE_CLKP: /* CKPER is the clock source for SPI123 */
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 800c694:	4b64      	ldr	r3, [pc, #400]	; (800c828 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 800c696:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800c698:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800c69c:	637b      	str	r3, [r7, #52]	; 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 800c69e:	4b62      	ldr	r3, [pc, #392]	; (800c828 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 800c6a0:	681b      	ldr	r3, [r3, #0]
 800c6a2:	f003 0304 	and.w	r3, r3, #4
 800c6a6:	2b04      	cmp	r3, #4
 800c6a8:	d10c      	bne.n	800c6c4 <HAL_RCCEx_GetPeriphCLKFreq+0x644>
 800c6aa:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800c6ac:	2b00      	cmp	r3, #0
 800c6ae:	d109      	bne.n	800c6c4 <HAL_RCCEx_GetPeriphCLKFreq+0x644>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800c6b0:	4b5d      	ldr	r3, [pc, #372]	; (800c828 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 800c6b2:	681b      	ldr	r3, [r3, #0]
 800c6b4:	08db      	lsrs	r3, r3, #3
 800c6b6:	f003 0303 	and.w	r3, r3, #3
 800c6ba:	4a5c      	ldr	r2, [pc, #368]	; (800c82c <HAL_RCCEx_GetPeriphCLKFreq+0x7ac>)
 800c6bc:	fa22 f303 	lsr.w	r3, r2, r3
 800c6c0:	63fb      	str	r3, [r7, #60]	; 0x3c
 800c6c2:	e01e      	b.n	800c702 <HAL_RCCEx_GetPeriphCLKFreq+0x682>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 800c6c4:	4b58      	ldr	r3, [pc, #352]	; (800c828 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 800c6c6:	681b      	ldr	r3, [r3, #0]
 800c6c8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800c6cc:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800c6d0:	d106      	bne.n	800c6e0 <HAL_RCCEx_GetPeriphCLKFreq+0x660>
 800c6d2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800c6d4:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800c6d8:	d102      	bne.n	800c6e0 <HAL_RCCEx_GetPeriphCLKFreq+0x660>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 800c6da:	4b55      	ldr	r3, [pc, #340]	; (800c830 <HAL_RCCEx_GetPeriphCLKFreq+0x7b0>)
 800c6dc:	63fb      	str	r3, [r7, #60]	; 0x3c
 800c6de:	e010      	b.n	800c702 <HAL_RCCEx_GetPeriphCLKFreq+0x682>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 800c6e0:	4b51      	ldr	r3, [pc, #324]	; (800c828 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 800c6e2:	681b      	ldr	r3, [r3, #0]
 800c6e4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800c6e8:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800c6ec:	d106      	bne.n	800c6fc <HAL_RCCEx_GetPeriphCLKFreq+0x67c>
 800c6ee:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800c6f0:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800c6f4:	d102      	bne.n	800c6fc <HAL_RCCEx_GetPeriphCLKFreq+0x67c>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 800c6f6:	4b4f      	ldr	r3, [pc, #316]	; (800c834 <HAL_RCCEx_GetPeriphCLKFreq+0x7b4>)
 800c6f8:	63fb      	str	r3, [r7, #60]	; 0x3c
 800c6fa:	e002      	b.n	800c702 <HAL_RCCEx_GetPeriphCLKFreq+0x682>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 800c6fc:	2300      	movs	r3, #0
 800c6fe:	63fb      	str	r3, [r7, #60]	; 0x3c
        }

        break;
 800c700:	e235      	b.n	800cb6e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 800c702:	e234      	b.n	800cb6e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case (RCC_SPI123CLKSOURCE_PIN): /* External clock is the clock source for I2S */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 800c704:	4b4c      	ldr	r3, [pc, #304]	; (800c838 <HAL_RCCEx_GetPeriphCLKFreq+0x7b8>)
 800c706:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800c708:	e231      	b.n	800cb6e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      default :
      {
        frequency = 0;
 800c70a:	2300      	movs	r3, #0
 800c70c:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800c70e:	e22e      	b.n	800cb6e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SPI45)
 800c710:	e9d7 2300 	ldrd	r2, r3, [r7]
 800c714:	f5a2 5100 	sub.w	r1, r2, #8192	; 0x2000
 800c718:	430b      	orrs	r3, r1
 800c71a:	f040 808f 	bne.w	800c83c <HAL_RCCEx_GetPeriphCLKFreq+0x7bc>
  {
    /* Get SPI45 clock source */
    srcclk = __HAL_RCC_GET_SPI45_SOURCE();
 800c71e:	4b42      	ldr	r3, [pc, #264]	; (800c828 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 800c720:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800c722:	f403 23e0 	and.w	r3, r3, #458752	; 0x70000
 800c726:	63bb      	str	r3, [r7, #56]	; 0x38
    switch (srcclk)
 800c728:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c72a:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800c72e:	d06b      	beq.n	800c808 <HAL_RCCEx_GetPeriphCLKFreq+0x788>
 800c730:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c732:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800c736:	d874      	bhi.n	800c822 <HAL_RCCEx_GetPeriphCLKFreq+0x7a2>
 800c738:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c73a:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 800c73e:	d056      	beq.n	800c7ee <HAL_RCCEx_GetPeriphCLKFreq+0x76e>
 800c740:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c742:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 800c746:	d86c      	bhi.n	800c822 <HAL_RCCEx_GetPeriphCLKFreq+0x7a2>
 800c748:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c74a:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 800c74e:	d03b      	beq.n	800c7c8 <HAL_RCCEx_GetPeriphCLKFreq+0x748>
 800c750:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c752:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 800c756:	d864      	bhi.n	800c822 <HAL_RCCEx_GetPeriphCLKFreq+0x7a2>
 800c758:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c75a:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800c75e:	d021      	beq.n	800c7a4 <HAL_RCCEx_GetPeriphCLKFreq+0x724>
 800c760:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c762:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800c766:	d85c      	bhi.n	800c822 <HAL_RCCEx_GetPeriphCLKFreq+0x7a2>
 800c768:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c76a:	2b00      	cmp	r3, #0
 800c76c:	d004      	beq.n	800c778 <HAL_RCCEx_GetPeriphCLKFreq+0x6f8>
 800c76e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c770:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800c774:	d004      	beq.n	800c780 <HAL_RCCEx_GetPeriphCLKFreq+0x700>
 800c776:	e054      	b.n	800c822 <HAL_RCCEx_GetPeriphCLKFreq+0x7a2>
    {
      case RCC_SPI45CLKSOURCE_PCLK2: /* CD/D2 PCLK2 is the clock source for SPI4/5 */
      {
        frequency = HAL_RCC_GetPCLK1Freq();
 800c778:	f7fe fa30 	bl	800abdc <HAL_RCC_GetPCLK1Freq>
 800c77c:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 800c77e:	e1f6      	b.n	800cb6e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800c780:	4b29      	ldr	r3, [pc, #164]	; (800c828 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 800c782:	681b      	ldr	r3, [r3, #0]
 800c784:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800c788:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800c78c:	d107      	bne.n	800c79e <HAL_RCCEx_GetPeriphCLKFreq+0x71e>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800c78e:	f107 0318 	add.w	r3, r7, #24
 800c792:	4618      	mov	r0, r3
 800c794:	f000 fa0a 	bl	800cbac <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 800c798:	69fb      	ldr	r3, [r7, #28]
 800c79a:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800c79c:	e1e7      	b.n	800cb6e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800c79e:	2300      	movs	r3, #0
 800c7a0:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800c7a2:	e1e4      	b.n	800cb6e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI45CLKSOURCE_PLL3: /* PLL3 is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800c7a4:	4b20      	ldr	r3, [pc, #128]	; (800c828 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 800c7a6:	681b      	ldr	r3, [r3, #0]
 800c7a8:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800c7ac:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800c7b0:	d107      	bne.n	800c7c2 <HAL_RCCEx_GetPeriphCLKFreq+0x742>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800c7b2:	f107 030c 	add.w	r3, r7, #12
 800c7b6:	4618      	mov	r0, r3
 800c7b8:	f000 fb4c 	bl	800ce54 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 800c7bc:	693b      	ldr	r3, [r7, #16]
 800c7be:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800c7c0:	e1d5      	b.n	800cb6e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800c7c2:	2300      	movs	r3, #0
 800c7c4:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800c7c6:	e1d2      	b.n	800cb6e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI45CLKSOURCE_HSI: /* HSI is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 800c7c8:	4b17      	ldr	r3, [pc, #92]	; (800c828 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 800c7ca:	681b      	ldr	r3, [r3, #0]
 800c7cc:	f003 0304 	and.w	r3, r3, #4
 800c7d0:	2b04      	cmp	r3, #4
 800c7d2:	d109      	bne.n	800c7e8 <HAL_RCCEx_GetPeriphCLKFreq+0x768>
        {
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800c7d4:	4b14      	ldr	r3, [pc, #80]	; (800c828 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 800c7d6:	681b      	ldr	r3, [r3, #0]
 800c7d8:	08db      	lsrs	r3, r3, #3
 800c7da:	f003 0303 	and.w	r3, r3, #3
 800c7de:	4a13      	ldr	r2, [pc, #76]	; (800c82c <HAL_RCCEx_GetPeriphCLKFreq+0x7ac>)
 800c7e0:	fa22 f303 	lsr.w	r3, r2, r3
 800c7e4:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800c7e6:	e1c2      	b.n	800cb6e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800c7e8:	2300      	movs	r3, #0
 800c7ea:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800c7ec:	e1bf      	b.n	800cb6e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI45CLKSOURCE_CSI: /* CSI is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY))
 800c7ee:	4b0e      	ldr	r3, [pc, #56]	; (800c828 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 800c7f0:	681b      	ldr	r3, [r3, #0]
 800c7f2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800c7f6:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800c7fa:	d102      	bne.n	800c802 <HAL_RCCEx_GetPeriphCLKFreq+0x782>
        {
          frequency = CSI_VALUE;
 800c7fc:	4b0c      	ldr	r3, [pc, #48]	; (800c830 <HAL_RCCEx_GetPeriphCLKFreq+0x7b0>)
 800c7fe:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800c800:	e1b5      	b.n	800cb6e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800c802:	2300      	movs	r3, #0
 800c804:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800c806:	e1b2      	b.n	800cb6e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI45CLKSOURCE_HSE: /* HSE is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 800c808:	4b07      	ldr	r3, [pc, #28]	; (800c828 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 800c80a:	681b      	ldr	r3, [r3, #0]
 800c80c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800c810:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800c814:	d102      	bne.n	800c81c <HAL_RCCEx_GetPeriphCLKFreq+0x79c>
        {
          frequency = HSE_VALUE;
 800c816:	4b07      	ldr	r3, [pc, #28]	; (800c834 <HAL_RCCEx_GetPeriphCLKFreq+0x7b4>)
 800c818:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800c81a:	e1a8      	b.n	800cb6e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800c81c:	2300      	movs	r3, #0
 800c81e:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800c820:	e1a5      	b.n	800cb6e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      default :
      {
        frequency = 0;
 800c822:	2300      	movs	r3, #0
 800c824:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800c826:	e1a2      	b.n	800cb6e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 800c828:	58024400 	.word	0x58024400
 800c82c:	03d09000 	.word	0x03d09000
 800c830:	003d0900 	.word	0x003d0900
 800c834:	00989680 	.word	0x00989680
 800c838:	00bb8000 	.word	0x00bb8000
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_ADC)
 800c83c:	e9d7 2300 	ldrd	r2, r3, [r7]
 800c840:	f5a2 2100 	sub.w	r1, r2, #524288	; 0x80000
 800c844:	430b      	orrs	r3, r1
 800c846:	d173      	bne.n	800c930 <HAL_RCCEx_GetPeriphCLKFreq+0x8b0>
  {
    /* Get ADC clock source */
    srcclk = __HAL_RCC_GET_ADC_SOURCE();
 800c848:	4b9c      	ldr	r3, [pc, #624]	; (800cabc <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800c84a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800c84c:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 800c850:	63bb      	str	r3, [r7, #56]	; 0x38

    switch (srcclk)
 800c852:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c854:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800c858:	d02f      	beq.n	800c8ba <HAL_RCCEx_GetPeriphCLKFreq+0x83a>
 800c85a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c85c:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800c860:	d863      	bhi.n	800c92a <HAL_RCCEx_GetPeriphCLKFreq+0x8aa>
 800c862:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c864:	2b00      	cmp	r3, #0
 800c866:	d004      	beq.n	800c872 <HAL_RCCEx_GetPeriphCLKFreq+0x7f2>
 800c868:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c86a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800c86e:	d012      	beq.n	800c896 <HAL_RCCEx_GetPeriphCLKFreq+0x816>
 800c870:	e05b      	b.n	800c92a <HAL_RCCEx_GetPeriphCLKFreq+0x8aa>
    {
      case RCC_ADCCLKSOURCE_PLL2:
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800c872:	4b92      	ldr	r3, [pc, #584]	; (800cabc <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800c874:	681b      	ldr	r3, [r3, #0]
 800c876:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800c87a:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800c87e:	d107      	bne.n	800c890 <HAL_RCCEx_GetPeriphCLKFreq+0x810>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800c880:	f107 0318 	add.w	r3, r7, #24
 800c884:	4618      	mov	r0, r3
 800c886:	f000 f991 	bl	800cbac <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 800c88a:	69bb      	ldr	r3, [r7, #24]
 800c88c:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800c88e:	e16e      	b.n	800cb6e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800c890:	2300      	movs	r3, #0
 800c892:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800c894:	e16b      	b.n	800cb6e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_ADCCLKSOURCE_PLL3:
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800c896:	4b89      	ldr	r3, [pc, #548]	; (800cabc <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800c898:	681b      	ldr	r3, [r3, #0]
 800c89a:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800c89e:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800c8a2:	d107      	bne.n	800c8b4 <HAL_RCCEx_GetPeriphCLKFreq+0x834>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800c8a4:	f107 030c 	add.w	r3, r7, #12
 800c8a8:	4618      	mov	r0, r3
 800c8aa:	f000 fad3 	bl	800ce54 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_R_Frequency;
 800c8ae:	697b      	ldr	r3, [r7, #20]
 800c8b0:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800c8b2:	e15c      	b.n	800cb6e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800c8b4:	2300      	movs	r3, #0
 800c8b6:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800c8b8:	e159      	b.n	800cb6e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_ADCCLKSOURCE_CLKP:
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 800c8ba:	4b80      	ldr	r3, [pc, #512]	; (800cabc <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800c8bc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800c8be:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800c8c2:	637b      	str	r3, [r7, #52]	; 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 800c8c4:	4b7d      	ldr	r3, [pc, #500]	; (800cabc <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800c8c6:	681b      	ldr	r3, [r3, #0]
 800c8c8:	f003 0304 	and.w	r3, r3, #4
 800c8cc:	2b04      	cmp	r3, #4
 800c8ce:	d10c      	bne.n	800c8ea <HAL_RCCEx_GetPeriphCLKFreq+0x86a>
 800c8d0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800c8d2:	2b00      	cmp	r3, #0
 800c8d4:	d109      	bne.n	800c8ea <HAL_RCCEx_GetPeriphCLKFreq+0x86a>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800c8d6:	4b79      	ldr	r3, [pc, #484]	; (800cabc <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800c8d8:	681b      	ldr	r3, [r3, #0]
 800c8da:	08db      	lsrs	r3, r3, #3
 800c8dc:	f003 0303 	and.w	r3, r3, #3
 800c8e0:	4a77      	ldr	r2, [pc, #476]	; (800cac0 <HAL_RCCEx_GetPeriphCLKFreq+0xa40>)
 800c8e2:	fa22 f303 	lsr.w	r3, r2, r3
 800c8e6:	63fb      	str	r3, [r7, #60]	; 0x3c
 800c8e8:	e01e      	b.n	800c928 <HAL_RCCEx_GetPeriphCLKFreq+0x8a8>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 800c8ea:	4b74      	ldr	r3, [pc, #464]	; (800cabc <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800c8ec:	681b      	ldr	r3, [r3, #0]
 800c8ee:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800c8f2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800c8f6:	d106      	bne.n	800c906 <HAL_RCCEx_GetPeriphCLKFreq+0x886>
 800c8f8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800c8fa:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800c8fe:	d102      	bne.n	800c906 <HAL_RCCEx_GetPeriphCLKFreq+0x886>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 800c900:	4b70      	ldr	r3, [pc, #448]	; (800cac4 <HAL_RCCEx_GetPeriphCLKFreq+0xa44>)
 800c902:	63fb      	str	r3, [r7, #60]	; 0x3c
 800c904:	e010      	b.n	800c928 <HAL_RCCEx_GetPeriphCLKFreq+0x8a8>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 800c906:	4b6d      	ldr	r3, [pc, #436]	; (800cabc <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800c908:	681b      	ldr	r3, [r3, #0]
 800c90a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800c90e:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800c912:	d106      	bne.n	800c922 <HAL_RCCEx_GetPeriphCLKFreq+0x8a2>
 800c914:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800c916:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800c91a:	d102      	bne.n	800c922 <HAL_RCCEx_GetPeriphCLKFreq+0x8a2>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 800c91c:	4b6a      	ldr	r3, [pc, #424]	; (800cac8 <HAL_RCCEx_GetPeriphCLKFreq+0xa48>)
 800c91e:	63fb      	str	r3, [r7, #60]	; 0x3c
 800c920:	e002      	b.n	800c928 <HAL_RCCEx_GetPeriphCLKFreq+0x8a8>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 800c922:	2300      	movs	r3, #0
 800c924:	63fb      	str	r3, [r7, #60]	; 0x3c
        }

        break;
 800c926:	e122      	b.n	800cb6e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 800c928:	e121      	b.n	800cb6e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      default :
      {
        frequency = 0;
 800c92a:	2300      	movs	r3, #0
 800c92c:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800c92e:	e11e      	b.n	800cb6e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SDMMC)
 800c930:	e9d7 2300 	ldrd	r2, r3, [r7]
 800c934:	f5a2 3180 	sub.w	r1, r2, #65536	; 0x10000
 800c938:	430b      	orrs	r3, r1
 800c93a:	d133      	bne.n	800c9a4 <HAL_RCCEx_GetPeriphCLKFreq+0x924>
  {
    /* Get SDMMC clock source */
    srcclk = __HAL_RCC_GET_SDMMC_SOURCE();
 800c93c:	4b5f      	ldr	r3, [pc, #380]	; (800cabc <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800c93e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800c940:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800c944:	63bb      	str	r3, [r7, #56]	; 0x38

    switch (srcclk)
 800c946:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c948:	2b00      	cmp	r3, #0
 800c94a:	d004      	beq.n	800c956 <HAL_RCCEx_GetPeriphCLKFreq+0x8d6>
 800c94c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c94e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800c952:	d012      	beq.n	800c97a <HAL_RCCEx_GetPeriphCLKFreq+0x8fa>
 800c954:	e023      	b.n	800c99e <HAL_RCCEx_GetPeriphCLKFreq+0x91e>
    {
      case RCC_SDMMCCLKSOURCE_PLL: /* PLL1 is the clock source for SDMMC */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 800c956:	4b59      	ldr	r3, [pc, #356]	; (800cabc <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800c958:	681b      	ldr	r3, [r3, #0]
 800c95a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800c95e:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800c962:	d107      	bne.n	800c974 <HAL_RCCEx_GetPeriphCLKFreq+0x8f4>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800c964:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800c968:	4618      	mov	r0, r3
 800c96a:	f000 fbc7 	bl	800d0fc <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 800c96e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c970:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800c972:	e0fc      	b.n	800cb6e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800c974:	2300      	movs	r3, #0
 800c976:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800c978:	e0f9      	b.n	800cb6e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is the clock source for SDMMC */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800c97a:	4b50      	ldr	r3, [pc, #320]	; (800cabc <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800c97c:	681b      	ldr	r3, [r3, #0]
 800c97e:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800c982:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800c986:	d107      	bne.n	800c998 <HAL_RCCEx_GetPeriphCLKFreq+0x918>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800c988:	f107 0318 	add.w	r3, r7, #24
 800c98c:	4618      	mov	r0, r3
 800c98e:	f000 f90d 	bl	800cbac <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_R_Frequency;
 800c992:	6a3b      	ldr	r3, [r7, #32]
 800c994:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800c996:	e0ea      	b.n	800cb6e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800c998:	2300      	movs	r3, #0
 800c99a:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800c99c:	e0e7      	b.n	800cb6e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      default :
      {
        frequency = 0;
 800c99e:	2300      	movs	r3, #0
 800c9a0:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800c9a2:	e0e4      	b.n	800cb6e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SPI6)
 800c9a4:	e9d7 2300 	ldrd	r2, r3, [r7]
 800c9a8:	f5a2 4180 	sub.w	r1, r2, #16384	; 0x4000
 800c9ac:	430b      	orrs	r3, r1
 800c9ae:	f040 808d 	bne.w	800cacc <HAL_RCCEx_GetPeriphCLKFreq+0xa4c>
  {
    /* Get SPI6 clock source */
    srcclk = __HAL_RCC_GET_SPI6_SOURCE();
 800c9b2:	4b42      	ldr	r3, [pc, #264]	; (800cabc <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800c9b4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800c9b6:	f003 43e0 	and.w	r3, r3, #1879048192	; 0x70000000
 800c9ba:	63bb      	str	r3, [r7, #56]	; 0x38

    switch (srcclk)
 800c9bc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c9be:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800c9c2:	d06b      	beq.n	800ca9c <HAL_RCCEx_GetPeriphCLKFreq+0xa1c>
 800c9c4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c9c6:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800c9ca:	d874      	bhi.n	800cab6 <HAL_RCCEx_GetPeriphCLKFreq+0xa36>
 800c9cc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c9ce:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800c9d2:	d056      	beq.n	800ca82 <HAL_RCCEx_GetPeriphCLKFreq+0xa02>
 800c9d4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c9d6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800c9da:	d86c      	bhi.n	800cab6 <HAL_RCCEx_GetPeriphCLKFreq+0xa36>
 800c9dc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c9de:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 800c9e2:	d03b      	beq.n	800ca5c <HAL_RCCEx_GetPeriphCLKFreq+0x9dc>
 800c9e4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c9e6:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 800c9ea:	d864      	bhi.n	800cab6 <HAL_RCCEx_GetPeriphCLKFreq+0xa36>
 800c9ec:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c9ee:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800c9f2:	d021      	beq.n	800ca38 <HAL_RCCEx_GetPeriphCLKFreq+0x9b8>
 800c9f4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c9f6:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800c9fa:	d85c      	bhi.n	800cab6 <HAL_RCCEx_GetPeriphCLKFreq+0xa36>
 800c9fc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c9fe:	2b00      	cmp	r3, #0
 800ca00:	d004      	beq.n	800ca0c <HAL_RCCEx_GetPeriphCLKFreq+0x98c>
 800ca02:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ca04:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800ca08:	d004      	beq.n	800ca14 <HAL_RCCEx_GetPeriphCLKFreq+0x994>
 800ca0a:	e054      	b.n	800cab6 <HAL_RCCEx_GetPeriphCLKFreq+0xa36>
    {
      case RCC_SPI6CLKSOURCE_D3PCLK1: /* D3PCLK1 (PCLK4) is the clock source for SPI6 */
      {
        frequency = HAL_RCCEx_GetD3PCLK1Freq();
 800ca0c:	f000 f8b8 	bl	800cb80 <HAL_RCCEx_GetD3PCLK1Freq>
 800ca10:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 800ca12:	e0ac      	b.n	800cb6e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800ca14:	4b29      	ldr	r3, [pc, #164]	; (800cabc <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800ca16:	681b      	ldr	r3, [r3, #0]
 800ca18:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800ca1c:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800ca20:	d107      	bne.n	800ca32 <HAL_RCCEx_GetPeriphCLKFreq+0x9b2>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800ca22:	f107 0318 	add.w	r3, r7, #24
 800ca26:	4618      	mov	r0, r3
 800ca28:	f000 f8c0 	bl	800cbac <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 800ca2c:	69fb      	ldr	r3, [r7, #28]
 800ca2e:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800ca30:	e09d      	b.n	800cb6e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800ca32:	2300      	movs	r3, #0
 800ca34:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800ca36:	e09a      	b.n	800cb6e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI6CLKSOURCE_PLL3: /* PLL3 is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800ca38:	4b20      	ldr	r3, [pc, #128]	; (800cabc <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800ca3a:	681b      	ldr	r3, [r3, #0]
 800ca3c:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800ca40:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800ca44:	d107      	bne.n	800ca56 <HAL_RCCEx_GetPeriphCLKFreq+0x9d6>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800ca46:	f107 030c 	add.w	r3, r7, #12
 800ca4a:	4618      	mov	r0, r3
 800ca4c:	f000 fa02 	bl	800ce54 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 800ca50:	693b      	ldr	r3, [r7, #16]
 800ca52:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800ca54:	e08b      	b.n	800cb6e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800ca56:	2300      	movs	r3, #0
 800ca58:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800ca5a:	e088      	b.n	800cb6e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI6CLKSOURCE_HSI: /* HSI is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 800ca5c:	4b17      	ldr	r3, [pc, #92]	; (800cabc <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800ca5e:	681b      	ldr	r3, [r3, #0]
 800ca60:	f003 0304 	and.w	r3, r3, #4
 800ca64:	2b04      	cmp	r3, #4
 800ca66:	d109      	bne.n	800ca7c <HAL_RCCEx_GetPeriphCLKFreq+0x9fc>
        {
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800ca68:	4b14      	ldr	r3, [pc, #80]	; (800cabc <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800ca6a:	681b      	ldr	r3, [r3, #0]
 800ca6c:	08db      	lsrs	r3, r3, #3
 800ca6e:	f003 0303 	and.w	r3, r3, #3
 800ca72:	4a13      	ldr	r2, [pc, #76]	; (800cac0 <HAL_RCCEx_GetPeriphCLKFreq+0xa40>)
 800ca74:	fa22 f303 	lsr.w	r3, r2, r3
 800ca78:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800ca7a:	e078      	b.n	800cb6e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800ca7c:	2300      	movs	r3, #0
 800ca7e:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800ca80:	e075      	b.n	800cb6e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI6CLKSOURCE_CSI: /* CSI is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY))
 800ca82:	4b0e      	ldr	r3, [pc, #56]	; (800cabc <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800ca84:	681b      	ldr	r3, [r3, #0]
 800ca86:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800ca8a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800ca8e:	d102      	bne.n	800ca96 <HAL_RCCEx_GetPeriphCLKFreq+0xa16>
        {
          frequency = CSI_VALUE;
 800ca90:	4b0c      	ldr	r3, [pc, #48]	; (800cac4 <HAL_RCCEx_GetPeriphCLKFreq+0xa44>)
 800ca92:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800ca94:	e06b      	b.n	800cb6e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800ca96:	2300      	movs	r3, #0
 800ca98:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800ca9a:	e068      	b.n	800cb6e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI6CLKSOURCE_HSE: /* HSE is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 800ca9c:	4b07      	ldr	r3, [pc, #28]	; (800cabc <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800ca9e:	681b      	ldr	r3, [r3, #0]
 800caa0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800caa4:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800caa8:	d102      	bne.n	800cab0 <HAL_RCCEx_GetPeriphCLKFreq+0xa30>
        {
          frequency = HSE_VALUE;
 800caaa:	4b07      	ldr	r3, [pc, #28]	; (800cac8 <HAL_RCCEx_GetPeriphCLKFreq+0xa48>)
 800caac:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800caae:	e05e      	b.n	800cb6e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800cab0:	2300      	movs	r3, #0
 800cab2:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800cab4:	e05b      	b.n	800cb6e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
        break;
      }
#endif /* RCC_SPI6CLKSOURCE_PIN */
      default :
      {
        frequency = 0;
 800cab6:	2300      	movs	r3, #0
 800cab8:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800caba:	e058      	b.n	800cb6e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 800cabc:	58024400 	.word	0x58024400
 800cac0:	03d09000 	.word	0x03d09000
 800cac4:	003d0900 	.word	0x003d0900
 800cac8:	00989680 	.word	0x00989680
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_FDCAN)
 800cacc:	e9d7 2300 	ldrd	r2, r3, [r7]
 800cad0:	f5a2 4100 	sub.w	r1, r2, #32768	; 0x8000
 800cad4:	430b      	orrs	r3, r1
 800cad6:	d148      	bne.n	800cb6a <HAL_RCCEx_GetPeriphCLKFreq+0xaea>
  {
    /* Get FDCAN clock source */
    srcclk = __HAL_RCC_GET_FDCAN_SOURCE();
 800cad8:	4b27      	ldr	r3, [pc, #156]	; (800cb78 <HAL_RCCEx_GetPeriphCLKFreq+0xaf8>)
 800cada:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800cadc:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800cae0:	63bb      	str	r3, [r7, #56]	; 0x38

    switch (srcclk)
 800cae2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cae4:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800cae8:	d02a      	beq.n	800cb40 <HAL_RCCEx_GetPeriphCLKFreq+0xac0>
 800caea:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800caec:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800caf0:	d838      	bhi.n	800cb64 <HAL_RCCEx_GetPeriphCLKFreq+0xae4>
 800caf2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800caf4:	2b00      	cmp	r3, #0
 800caf6:	d004      	beq.n	800cb02 <HAL_RCCEx_GetPeriphCLKFreq+0xa82>
 800caf8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cafa:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800cafe:	d00d      	beq.n	800cb1c <HAL_RCCEx_GetPeriphCLKFreq+0xa9c>
 800cb00:	e030      	b.n	800cb64 <HAL_RCCEx_GetPeriphCLKFreq+0xae4>
    {
      case RCC_FDCANCLKSOURCE_HSE: /* HSE is the clock source for FDCAN */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 800cb02:	4b1d      	ldr	r3, [pc, #116]	; (800cb78 <HAL_RCCEx_GetPeriphCLKFreq+0xaf8>)
 800cb04:	681b      	ldr	r3, [r3, #0]
 800cb06:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800cb0a:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800cb0e:	d102      	bne.n	800cb16 <HAL_RCCEx_GetPeriphCLKFreq+0xa96>
        {
          frequency = HSE_VALUE;
 800cb10:	4b1a      	ldr	r3, [pc, #104]	; (800cb7c <HAL_RCCEx_GetPeriphCLKFreq+0xafc>)
 800cb12:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800cb14:	e02b      	b.n	800cb6e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800cb16:	2300      	movs	r3, #0
 800cb18:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800cb1a:	e028      	b.n	800cb6e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_FDCANCLKSOURCE_PLL: /* PLL is the clock source for FDCAN */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 800cb1c:	4b16      	ldr	r3, [pc, #88]	; (800cb78 <HAL_RCCEx_GetPeriphCLKFreq+0xaf8>)
 800cb1e:	681b      	ldr	r3, [r3, #0]
 800cb20:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800cb24:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800cb28:	d107      	bne.n	800cb3a <HAL_RCCEx_GetPeriphCLKFreq+0xaba>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800cb2a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800cb2e:	4618      	mov	r0, r3
 800cb30:	f000 fae4 	bl	800d0fc <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 800cb34:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800cb36:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800cb38:	e019      	b.n	800cb6e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800cb3a:	2300      	movs	r3, #0
 800cb3c:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800cb3e:	e016      	b.n	800cb6e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is the clock source for FDCAN */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800cb40:	4b0d      	ldr	r3, [pc, #52]	; (800cb78 <HAL_RCCEx_GetPeriphCLKFreq+0xaf8>)
 800cb42:	681b      	ldr	r3, [r3, #0]
 800cb44:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800cb48:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800cb4c:	d107      	bne.n	800cb5e <HAL_RCCEx_GetPeriphCLKFreq+0xade>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800cb4e:	f107 0318 	add.w	r3, r7, #24
 800cb52:	4618      	mov	r0, r3
 800cb54:	f000 f82a 	bl	800cbac <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 800cb58:	69fb      	ldr	r3, [r7, #28]
 800cb5a:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800cb5c:	e007      	b.n	800cb6e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800cb5e:	2300      	movs	r3, #0
 800cb60:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800cb62:	e004      	b.n	800cb6e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      default :
      {
        frequency = 0;
 800cb64:	2300      	movs	r3, #0
 800cb66:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800cb68:	e001      	b.n	800cb6e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }
  else
  {
    frequency = 0;
 800cb6a:	2300      	movs	r3, #0
 800cb6c:	63fb      	str	r3, [r7, #60]	; 0x3c
  }

  return frequency;
 800cb6e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 800cb70:	4618      	mov	r0, r3
 800cb72:	3740      	adds	r7, #64	; 0x40
 800cb74:	46bd      	mov	sp, r7
 800cb76:	bd80      	pop	{r7, pc}
 800cb78:	58024400 	.word	0x58024400
 800cb7c:	00989680 	.word	0x00989680

0800cb80 <HAL_RCCEx_GetD3PCLK1Freq>:
  * @note   Each time D3PCLK1 changes, this function must be called to update the
  *         right D3PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval D3PCLK1 frequency
  */
uint32_t HAL_RCCEx_GetD3PCLK1Freq(void)
{
 800cb80:	b580      	push	{r7, lr}
 800cb82:	af00      	add	r7, sp, #0
#if defined(RCC_D3CFGR_D3PPRE)
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->D3CFGR & RCC_D3CFGR_D3PPRE) >> RCC_D3CFGR_D3PPRE_Pos] & 0x1FU));
 800cb84:	f7fd fffa 	bl	800ab7c <HAL_RCC_GetHCLKFreq>
 800cb88:	4602      	mov	r2, r0
 800cb8a:	4b06      	ldr	r3, [pc, #24]	; (800cba4 <HAL_RCCEx_GetD3PCLK1Freq+0x24>)
 800cb8c:	6a1b      	ldr	r3, [r3, #32]
 800cb8e:	091b      	lsrs	r3, r3, #4
 800cb90:	f003 0307 	and.w	r3, r3, #7
 800cb94:	4904      	ldr	r1, [pc, #16]	; (800cba8 <HAL_RCCEx_GetD3PCLK1Freq+0x28>)
 800cb96:	5ccb      	ldrb	r3, [r1, r3]
 800cb98:	f003 031f 	and.w	r3, r3, #31
 800cb9c:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE) >> RCC_SRDCFGR_SRDPPRE_Pos] & 0x1FU));
#endif
}
 800cba0:	4618      	mov	r0, r3
 800cba2:	bd80      	pop	{r7, pc}
 800cba4:	58024400 	.word	0x58024400
 800cba8:	0801f3b8 	.word	0x0801f3b8

0800cbac <HAL_RCCEx_GetPLL2ClockFreq>:
  *         right PLL2CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL2_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL2ClockFreq(PLL2_ClocksTypeDef *PLL2_Clocks)
{
 800cbac:	b480      	push	{r7}
 800cbae:	b089      	sub	sp, #36	; 0x24
 800cbb0:	af00      	add	r7, sp, #0
 800cbb2:	6078      	str	r0, [r7, #4]
  float_t fracn2, pll2vco;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL2M) * PLL2N
     PLL2xCLK = PLL2_VCO / PLL2x
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 800cbb4:	4ba1      	ldr	r3, [pc, #644]	; (800ce3c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800cbb6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800cbb8:	f003 0303 	and.w	r3, r3, #3
 800cbbc:	61bb      	str	r3, [r7, #24]
  pll2m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM2) >> 12);
 800cbbe:	4b9f      	ldr	r3, [pc, #636]	; (800ce3c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800cbc0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800cbc2:	0b1b      	lsrs	r3, r3, #12
 800cbc4:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800cbc8:	617b      	str	r3, [r7, #20]
  pll2fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL2FRACEN) >> RCC_PLLCFGR_PLL2FRACEN_Pos;
 800cbca:	4b9c      	ldr	r3, [pc, #624]	; (800ce3c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800cbcc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800cbce:	091b      	lsrs	r3, r3, #4
 800cbd0:	f003 0301 	and.w	r3, r3, #1
 800cbd4:	613b      	str	r3, [r7, #16]
  fracn2 = (float_t)(uint32_t)(pll2fracen * ((RCC->PLL2FRACR & RCC_PLL2FRACR_FRACN2) >> 3));
 800cbd6:	4b99      	ldr	r3, [pc, #612]	; (800ce3c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800cbd8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800cbda:	08db      	lsrs	r3, r3, #3
 800cbdc:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800cbe0:	693a      	ldr	r2, [r7, #16]
 800cbe2:	fb02 f303 	mul.w	r3, r2, r3
 800cbe6:	ee07 3a90 	vmov	s15, r3
 800cbea:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800cbee:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll2m != 0U)
 800cbf2:	697b      	ldr	r3, [r7, #20]
 800cbf4:	2b00      	cmp	r3, #0
 800cbf6:	f000 8111 	beq.w	800ce1c <HAL_RCCEx_GetPLL2ClockFreq+0x270>
  {
    switch (pllsource)
 800cbfa:	69bb      	ldr	r3, [r7, #24]
 800cbfc:	2b02      	cmp	r3, #2
 800cbfe:	f000 8083 	beq.w	800cd08 <HAL_RCCEx_GetPLL2ClockFreq+0x15c>
 800cc02:	69bb      	ldr	r3, [r7, #24]
 800cc04:	2b02      	cmp	r3, #2
 800cc06:	f200 80a1 	bhi.w	800cd4c <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
 800cc0a:	69bb      	ldr	r3, [r7, #24]
 800cc0c:	2b00      	cmp	r3, #0
 800cc0e:	d003      	beq.n	800cc18 <HAL_RCCEx_GetPLL2ClockFreq+0x6c>
 800cc10:	69bb      	ldr	r3, [r7, #24]
 800cc12:	2b01      	cmp	r3, #1
 800cc14:	d056      	beq.n	800ccc4 <HAL_RCCEx_GetPLL2ClockFreq+0x118>
 800cc16:	e099      	b.n	800cd4c <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
    {

      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800cc18:	4b88      	ldr	r3, [pc, #544]	; (800ce3c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800cc1a:	681b      	ldr	r3, [r3, #0]
 800cc1c:	f003 0320 	and.w	r3, r3, #32
 800cc20:	2b00      	cmp	r3, #0
 800cc22:	d02d      	beq.n	800cc80 <HAL_RCCEx_GetPLL2ClockFreq+0xd4>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800cc24:	4b85      	ldr	r3, [pc, #532]	; (800ce3c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800cc26:	681b      	ldr	r3, [r3, #0]
 800cc28:	08db      	lsrs	r3, r3, #3
 800cc2a:	f003 0303 	and.w	r3, r3, #3
 800cc2e:	4a84      	ldr	r2, [pc, #528]	; (800ce40 <HAL_RCCEx_GetPLL2ClockFreq+0x294>)
 800cc30:	fa22 f303 	lsr.w	r3, r2, r3
 800cc34:	60bb      	str	r3, [r7, #8]
          pll2vco = ((float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 800cc36:	68bb      	ldr	r3, [r7, #8]
 800cc38:	ee07 3a90 	vmov	s15, r3
 800cc3c:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800cc40:	697b      	ldr	r3, [r7, #20]
 800cc42:	ee07 3a90 	vmov	s15, r3
 800cc46:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800cc4a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800cc4e:	4b7b      	ldr	r3, [pc, #492]	; (800ce3c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800cc50:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800cc52:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800cc56:	ee07 3a90 	vmov	s15, r3
 800cc5a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800cc5e:	ed97 6a03 	vldr	s12, [r7, #12]
 800cc62:	eddf 5a78 	vldr	s11, [pc, #480]	; 800ce44 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800cc66:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800cc6a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800cc6e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800cc72:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800cc76:	ee67 7a27 	vmul.f32	s15, s14, s15
 800cc7a:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
        }
        break;
 800cc7e:	e087      	b.n	800cd90 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>
          pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 800cc80:	697b      	ldr	r3, [r7, #20]
 800cc82:	ee07 3a90 	vmov	s15, r3
 800cc86:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800cc8a:	eddf 6a6f 	vldr	s13, [pc, #444]	; 800ce48 <HAL_RCCEx_GetPLL2ClockFreq+0x29c>
 800cc8e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800cc92:	4b6a      	ldr	r3, [pc, #424]	; (800ce3c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800cc94:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800cc96:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800cc9a:	ee07 3a90 	vmov	s15, r3
 800cc9e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800cca2:	ed97 6a03 	vldr	s12, [r7, #12]
 800cca6:	eddf 5a67 	vldr	s11, [pc, #412]	; 800ce44 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800ccaa:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800ccae:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800ccb2:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800ccb6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800ccba:	ee67 7a27 	vmul.f32	s15, s14, s15
 800ccbe:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800ccc2:	e065      	b.n	800cd90 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 800ccc4:	697b      	ldr	r3, [r7, #20]
 800ccc6:	ee07 3a90 	vmov	s15, r3
 800ccca:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800ccce:	eddf 6a5f 	vldr	s13, [pc, #380]	; 800ce4c <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 800ccd2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800ccd6:	4b59      	ldr	r3, [pc, #356]	; (800ce3c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800ccd8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ccda:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800ccde:	ee07 3a90 	vmov	s15, r3
 800cce2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800cce6:	ed97 6a03 	vldr	s12, [r7, #12]
 800ccea:	eddf 5a56 	vldr	s11, [pc, #344]	; 800ce44 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800ccee:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800ccf2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800ccf6:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800ccfa:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800ccfe:	ee67 7a27 	vmul.f32	s15, s14, s15
 800cd02:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800cd06:	e043      	b.n	800cd90 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 800cd08:	697b      	ldr	r3, [r7, #20]
 800cd0a:	ee07 3a90 	vmov	s15, r3
 800cd0e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800cd12:	eddf 6a4f 	vldr	s13, [pc, #316]	; 800ce50 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>
 800cd16:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800cd1a:	4b48      	ldr	r3, [pc, #288]	; (800ce3c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800cd1c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800cd1e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800cd22:	ee07 3a90 	vmov	s15, r3
 800cd26:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800cd2a:	ed97 6a03 	vldr	s12, [r7, #12]
 800cd2e:	eddf 5a45 	vldr	s11, [pc, #276]	; 800ce44 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800cd32:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800cd36:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800cd3a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800cd3e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800cd42:	ee67 7a27 	vmul.f32	s15, s14, s15
 800cd46:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800cd4a:	e021      	b.n	800cd90 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      default:
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 800cd4c:	697b      	ldr	r3, [r7, #20]
 800cd4e:	ee07 3a90 	vmov	s15, r3
 800cd52:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800cd56:	eddf 6a3d 	vldr	s13, [pc, #244]	; 800ce4c <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 800cd5a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800cd5e:	4b37      	ldr	r3, [pc, #220]	; (800ce3c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800cd60:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800cd62:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800cd66:	ee07 3a90 	vmov	s15, r3
 800cd6a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800cd6e:	ed97 6a03 	vldr	s12, [r7, #12]
 800cd72:	eddf 5a34 	vldr	s11, [pc, #208]	; 800ce44 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800cd76:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800cd7a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800cd7e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800cd82:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800cd86:	ee67 7a27 	vmul.f32	s15, s14, s15
 800cd8a:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800cd8e:	bf00      	nop
    }
    PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_P2) >> 9)  + (float_t)1)) ;
 800cd90:	4b2a      	ldr	r3, [pc, #168]	; (800ce3c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800cd92:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800cd94:	0a5b      	lsrs	r3, r3, #9
 800cd96:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800cd9a:	ee07 3a90 	vmov	s15, r3
 800cd9e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800cda2:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800cda6:	ee37 7a87 	vadd.f32	s14, s15, s14
 800cdaa:	edd7 6a07 	vldr	s13, [r7, #28]
 800cdae:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800cdb2:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800cdb6:	ee17 2a90 	vmov	r2, s15
 800cdba:	687b      	ldr	r3, [r7, #4]
 800cdbc:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_Q2) >> 16) + (float_t)1)) ;
 800cdbe:	4b1f      	ldr	r3, [pc, #124]	; (800ce3c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800cdc0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800cdc2:	0c1b      	lsrs	r3, r3, #16
 800cdc4:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800cdc8:	ee07 3a90 	vmov	s15, r3
 800cdcc:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800cdd0:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800cdd4:	ee37 7a87 	vadd.f32	s14, s15, s14
 800cdd8:	edd7 6a07 	vldr	s13, [r7, #28]
 800cddc:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800cde0:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800cde4:	ee17 2a90 	vmov	r2, s15
 800cde8:	687b      	ldr	r3, [r7, #4]
 800cdea:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_R2) >> 24) + (float_t)1)) ;
 800cdec:	4b13      	ldr	r3, [pc, #76]	; (800ce3c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800cdee:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800cdf0:	0e1b      	lsrs	r3, r3, #24
 800cdf2:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800cdf6:	ee07 3a90 	vmov	s15, r3
 800cdfa:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800cdfe:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800ce02:	ee37 7a87 	vadd.f32	s14, s15, s14
 800ce06:	edd7 6a07 	vldr	s13, [r7, #28]
 800ce0a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800ce0e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800ce12:	ee17 2a90 	vmov	r2, s15
 800ce16:	687b      	ldr	r3, [r7, #4]
 800ce18:	609a      	str	r2, [r3, #8]
  {
    PLL2_Clocks->PLL2_P_Frequency = 0U;
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
    PLL2_Clocks->PLL2_R_Frequency = 0U;
  }
}
 800ce1a:	e008      	b.n	800ce2e <HAL_RCCEx_GetPLL2ClockFreq+0x282>
    PLL2_Clocks->PLL2_P_Frequency = 0U;
 800ce1c:	687b      	ldr	r3, [r7, #4]
 800ce1e:	2200      	movs	r2, #0
 800ce20:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
 800ce22:	687b      	ldr	r3, [r7, #4]
 800ce24:	2200      	movs	r2, #0
 800ce26:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = 0U;
 800ce28:	687b      	ldr	r3, [r7, #4]
 800ce2a:	2200      	movs	r2, #0
 800ce2c:	609a      	str	r2, [r3, #8]
}
 800ce2e:	bf00      	nop
 800ce30:	3724      	adds	r7, #36	; 0x24
 800ce32:	46bd      	mov	sp, r7
 800ce34:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ce38:	4770      	bx	lr
 800ce3a:	bf00      	nop
 800ce3c:	58024400 	.word	0x58024400
 800ce40:	03d09000 	.word	0x03d09000
 800ce44:	46000000 	.word	0x46000000
 800ce48:	4c742400 	.word	0x4c742400
 800ce4c:	4a742400 	.word	0x4a742400
 800ce50:	4b189680 	.word	0x4b189680

0800ce54 <HAL_RCCEx_GetPLL3ClockFreq>:
  *         right PLL3CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL3_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL3ClockFreq(PLL3_ClocksTypeDef *PLL3_Clocks)
{
 800ce54:	b480      	push	{r7}
 800ce56:	b089      	sub	sp, #36	; 0x24
 800ce58:	af00      	add	r7, sp, #0
 800ce5a:	6078      	str	r0, [r7, #4]
  float_t fracn3, pll3vco;

  /* PLL3_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL3M) * PLL3N
     PLL3xCLK = PLL3_VCO / PLLxR
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 800ce5c:	4ba1      	ldr	r3, [pc, #644]	; (800d0e4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800ce5e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800ce60:	f003 0303 	and.w	r3, r3, #3
 800ce64:	61bb      	str	r3, [r7, #24]
  pll3m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM3) >> 20)  ;
 800ce66:	4b9f      	ldr	r3, [pc, #636]	; (800d0e4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800ce68:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800ce6a:	0d1b      	lsrs	r3, r3, #20
 800ce6c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800ce70:	617b      	str	r3, [r7, #20]
  pll3fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL3FRACEN) >> RCC_PLLCFGR_PLL3FRACEN_Pos;
 800ce72:	4b9c      	ldr	r3, [pc, #624]	; (800d0e4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800ce74:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ce76:	0a1b      	lsrs	r3, r3, #8
 800ce78:	f003 0301 	and.w	r3, r3, #1
 800ce7c:	613b      	str	r3, [r7, #16]
  fracn3 = (float_t)(uint32_t)(pll3fracen * ((RCC->PLL3FRACR & RCC_PLL3FRACR_FRACN3) >> 3));
 800ce7e:	4b99      	ldr	r3, [pc, #612]	; (800d0e4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800ce80:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800ce82:	08db      	lsrs	r3, r3, #3
 800ce84:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800ce88:	693a      	ldr	r2, [r7, #16]
 800ce8a:	fb02 f303 	mul.w	r3, r2, r3
 800ce8e:	ee07 3a90 	vmov	s15, r3
 800ce92:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800ce96:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll3m != 0U)
 800ce9a:	697b      	ldr	r3, [r7, #20]
 800ce9c:	2b00      	cmp	r3, #0
 800ce9e:	f000 8111 	beq.w	800d0c4 <HAL_RCCEx_GetPLL3ClockFreq+0x270>
  {
    switch (pllsource)
 800cea2:	69bb      	ldr	r3, [r7, #24]
 800cea4:	2b02      	cmp	r3, #2
 800cea6:	f000 8083 	beq.w	800cfb0 <HAL_RCCEx_GetPLL3ClockFreq+0x15c>
 800ceaa:	69bb      	ldr	r3, [r7, #24]
 800ceac:	2b02      	cmp	r3, #2
 800ceae:	f200 80a1 	bhi.w	800cff4 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
 800ceb2:	69bb      	ldr	r3, [r7, #24]
 800ceb4:	2b00      	cmp	r3, #0
 800ceb6:	d003      	beq.n	800cec0 <HAL_RCCEx_GetPLL3ClockFreq+0x6c>
 800ceb8:	69bb      	ldr	r3, [r7, #24]
 800ceba:	2b01      	cmp	r3, #1
 800cebc:	d056      	beq.n	800cf6c <HAL_RCCEx_GetPLL3ClockFreq+0x118>
 800cebe:	e099      	b.n	800cff4 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
    {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800cec0:	4b88      	ldr	r3, [pc, #544]	; (800d0e4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800cec2:	681b      	ldr	r3, [r3, #0]
 800cec4:	f003 0320 	and.w	r3, r3, #32
 800cec8:	2b00      	cmp	r3, #0
 800ceca:	d02d      	beq.n	800cf28 <HAL_RCCEx_GetPLL3ClockFreq+0xd4>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800cecc:	4b85      	ldr	r3, [pc, #532]	; (800d0e4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800cece:	681b      	ldr	r3, [r3, #0]
 800ced0:	08db      	lsrs	r3, r3, #3
 800ced2:	f003 0303 	and.w	r3, r3, #3
 800ced6:	4a84      	ldr	r2, [pc, #528]	; (800d0e8 <HAL_RCCEx_GetPLL3ClockFreq+0x294>)
 800ced8:	fa22 f303 	lsr.w	r3, r2, r3
 800cedc:	60bb      	str	r3, [r7, #8]
          pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 800cede:	68bb      	ldr	r3, [r7, #8]
 800cee0:	ee07 3a90 	vmov	s15, r3
 800cee4:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800cee8:	697b      	ldr	r3, [r7, #20]
 800ceea:	ee07 3a90 	vmov	s15, r3
 800ceee:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800cef2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800cef6:	4b7b      	ldr	r3, [pc, #492]	; (800d0e4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800cef8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800cefa:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800cefe:	ee07 3a90 	vmov	s15, r3
 800cf02:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800cf06:	ed97 6a03 	vldr	s12, [r7, #12]
 800cf0a:	eddf 5a78 	vldr	s11, [pc, #480]	; 800d0ec <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800cf0e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800cf12:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800cf16:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800cf1a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800cf1e:	ee67 7a27 	vmul.f32	s15, s14, s15
 800cf22:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
        }
        break;
 800cf26:	e087      	b.n	800d038 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
          pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 800cf28:	697b      	ldr	r3, [r7, #20]
 800cf2a:	ee07 3a90 	vmov	s15, r3
 800cf2e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800cf32:	eddf 6a6f 	vldr	s13, [pc, #444]	; 800d0f0 <HAL_RCCEx_GetPLL3ClockFreq+0x29c>
 800cf36:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800cf3a:	4b6a      	ldr	r3, [pc, #424]	; (800d0e4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800cf3c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800cf3e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800cf42:	ee07 3a90 	vmov	s15, r3
 800cf46:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800cf4a:	ed97 6a03 	vldr	s12, [r7, #12]
 800cf4e:	eddf 5a67 	vldr	s11, [pc, #412]	; 800d0ec <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800cf52:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800cf56:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800cf5a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800cf5e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800cf62:	ee67 7a27 	vmul.f32	s15, s14, s15
 800cf66:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800cf6a:	e065      	b.n	800d038 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 800cf6c:	697b      	ldr	r3, [r7, #20]
 800cf6e:	ee07 3a90 	vmov	s15, r3
 800cf72:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800cf76:	eddf 6a5f 	vldr	s13, [pc, #380]	; 800d0f4 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 800cf7a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800cf7e:	4b59      	ldr	r3, [pc, #356]	; (800d0e4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800cf80:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800cf82:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800cf86:	ee07 3a90 	vmov	s15, r3
 800cf8a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800cf8e:	ed97 6a03 	vldr	s12, [r7, #12]
 800cf92:	eddf 5a56 	vldr	s11, [pc, #344]	; 800d0ec <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800cf96:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800cf9a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800cf9e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800cfa2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800cfa6:	ee67 7a27 	vmul.f32	s15, s14, s15
 800cfaa:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800cfae:	e043      	b.n	800d038 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 800cfb0:	697b      	ldr	r3, [r7, #20]
 800cfb2:	ee07 3a90 	vmov	s15, r3
 800cfb6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800cfba:	eddf 6a4f 	vldr	s13, [pc, #316]	; 800d0f8 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>
 800cfbe:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800cfc2:	4b48      	ldr	r3, [pc, #288]	; (800d0e4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800cfc4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800cfc6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800cfca:	ee07 3a90 	vmov	s15, r3
 800cfce:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800cfd2:	ed97 6a03 	vldr	s12, [r7, #12]
 800cfd6:	eddf 5a45 	vldr	s11, [pc, #276]	; 800d0ec <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800cfda:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800cfde:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800cfe2:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800cfe6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800cfea:	ee67 7a27 	vmul.f32	s15, s14, s15
 800cfee:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800cff2:	e021      	b.n	800d038 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

      default:
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 800cff4:	697b      	ldr	r3, [r7, #20]
 800cff6:	ee07 3a90 	vmov	s15, r3
 800cffa:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800cffe:	eddf 6a3d 	vldr	s13, [pc, #244]	; 800d0f4 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 800d002:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800d006:	4b37      	ldr	r3, [pc, #220]	; (800d0e4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800d008:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800d00a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800d00e:	ee07 3a90 	vmov	s15, r3
 800d012:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800d016:	ed97 6a03 	vldr	s12, [r7, #12]
 800d01a:	eddf 5a34 	vldr	s11, [pc, #208]	; 800d0ec <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800d01e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800d022:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800d026:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800d02a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800d02e:	ee67 7a27 	vmul.f32	s15, s14, s15
 800d032:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800d036:	bf00      	nop
    }
    PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_P3) >> 9)  + (float_t)1)) ;
 800d038:	4b2a      	ldr	r3, [pc, #168]	; (800d0e4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800d03a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800d03c:	0a5b      	lsrs	r3, r3, #9
 800d03e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800d042:	ee07 3a90 	vmov	s15, r3
 800d046:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800d04a:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800d04e:	ee37 7a87 	vadd.f32	s14, s15, s14
 800d052:	edd7 6a07 	vldr	s13, [r7, #28]
 800d056:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800d05a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800d05e:	ee17 2a90 	vmov	r2, s15
 800d062:	687b      	ldr	r3, [r7, #4]
 800d064:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_Q3) >> 16) + (float_t)1)) ;
 800d066:	4b1f      	ldr	r3, [pc, #124]	; (800d0e4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800d068:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800d06a:	0c1b      	lsrs	r3, r3, #16
 800d06c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800d070:	ee07 3a90 	vmov	s15, r3
 800d074:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800d078:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800d07c:	ee37 7a87 	vadd.f32	s14, s15, s14
 800d080:	edd7 6a07 	vldr	s13, [r7, #28]
 800d084:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800d088:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800d08c:	ee17 2a90 	vmov	r2, s15
 800d090:	687b      	ldr	r3, [r7, #4]
 800d092:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_R3) >> 24) + (float_t)1)) ;
 800d094:	4b13      	ldr	r3, [pc, #76]	; (800d0e4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800d096:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800d098:	0e1b      	lsrs	r3, r3, #24
 800d09a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800d09e:	ee07 3a90 	vmov	s15, r3
 800d0a2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800d0a6:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800d0aa:	ee37 7a87 	vadd.f32	s14, s15, s14
 800d0ae:	edd7 6a07 	vldr	s13, [r7, #28]
 800d0b2:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800d0b6:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800d0ba:	ee17 2a90 	vmov	r2, s15
 800d0be:	687b      	ldr	r3, [r7, #4]
 800d0c0:	609a      	str	r2, [r3, #8]
    PLL3_Clocks->PLL3_P_Frequency = 0U;
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
    PLL3_Clocks->PLL3_R_Frequency = 0U;
  }

}
 800d0c2:	e008      	b.n	800d0d6 <HAL_RCCEx_GetPLL3ClockFreq+0x282>
    PLL3_Clocks->PLL3_P_Frequency = 0U;
 800d0c4:	687b      	ldr	r3, [r7, #4]
 800d0c6:	2200      	movs	r2, #0
 800d0c8:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
 800d0ca:	687b      	ldr	r3, [r7, #4]
 800d0cc:	2200      	movs	r2, #0
 800d0ce:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = 0U;
 800d0d0:	687b      	ldr	r3, [r7, #4]
 800d0d2:	2200      	movs	r2, #0
 800d0d4:	609a      	str	r2, [r3, #8]
}
 800d0d6:	bf00      	nop
 800d0d8:	3724      	adds	r7, #36	; 0x24
 800d0da:	46bd      	mov	sp, r7
 800d0dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d0e0:	4770      	bx	lr
 800d0e2:	bf00      	nop
 800d0e4:	58024400 	.word	0x58024400
 800d0e8:	03d09000 	.word	0x03d09000
 800d0ec:	46000000 	.word	0x46000000
 800d0f0:	4c742400 	.word	0x4c742400
 800d0f4:	4a742400 	.word	0x4a742400
 800d0f8:	4b189680 	.word	0x4b189680

0800d0fc <HAL_RCCEx_GetPLL1ClockFreq>:
  *         right PLL1CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL1_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL1ClockFreq(PLL1_ClocksTypeDef *PLL1_Clocks)
{
 800d0fc:	b480      	push	{r7}
 800d0fe:	b089      	sub	sp, #36	; 0x24
 800d100:	af00      	add	r7, sp, #0
 800d102:	6078      	str	r0, [r7, #4]
  uint32_t pllsource, pll1m, pll1fracen, hsivalue;
  float_t fracn1, pll1vco;

  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 800d104:	4ba0      	ldr	r3, [pc, #640]	; (800d388 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800d106:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800d108:	f003 0303 	and.w	r3, r3, #3
 800d10c:	61bb      	str	r3, [r7, #24]
  pll1m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1) >> 4);
 800d10e:	4b9e      	ldr	r3, [pc, #632]	; (800d388 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800d110:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800d112:	091b      	lsrs	r3, r3, #4
 800d114:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800d118:	617b      	str	r3, [r7, #20]
  pll1fracen = RCC->PLLCFGR & RCC_PLLCFGR_PLL1FRACEN;
 800d11a:	4b9b      	ldr	r3, [pc, #620]	; (800d388 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800d11c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d11e:	f003 0301 	and.w	r3, r3, #1
 800d122:	613b      	str	r3, [r7, #16]
  fracn1 = (float_t)(uint32_t)(pll1fracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
 800d124:	4b98      	ldr	r3, [pc, #608]	; (800d388 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800d126:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800d128:	08db      	lsrs	r3, r3, #3
 800d12a:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800d12e:	693a      	ldr	r2, [r7, #16]
 800d130:	fb02 f303 	mul.w	r3, r2, r3
 800d134:	ee07 3a90 	vmov	s15, r3
 800d138:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800d13c:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll1m != 0U)
 800d140:	697b      	ldr	r3, [r7, #20]
 800d142:	2b00      	cmp	r3, #0
 800d144:	f000 8111 	beq.w	800d36a <HAL_RCCEx_GetPLL1ClockFreq+0x26e>
  {
    switch (pllsource)
 800d148:	69bb      	ldr	r3, [r7, #24]
 800d14a:	2b02      	cmp	r3, #2
 800d14c:	f000 8083 	beq.w	800d256 <HAL_RCCEx_GetPLL1ClockFreq+0x15a>
 800d150:	69bb      	ldr	r3, [r7, #24]
 800d152:	2b02      	cmp	r3, #2
 800d154:	f200 80a1 	bhi.w	800d29a <HAL_RCCEx_GetPLL1ClockFreq+0x19e>
 800d158:	69bb      	ldr	r3, [r7, #24]
 800d15a:	2b00      	cmp	r3, #0
 800d15c:	d003      	beq.n	800d166 <HAL_RCCEx_GetPLL1ClockFreq+0x6a>
 800d15e:	69bb      	ldr	r3, [r7, #24]
 800d160:	2b01      	cmp	r3, #1
 800d162:	d056      	beq.n	800d212 <HAL_RCCEx_GetPLL1ClockFreq+0x116>
 800d164:	e099      	b.n	800d29a <HAL_RCCEx_GetPLL1ClockFreq+0x19e>
    {

      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800d166:	4b88      	ldr	r3, [pc, #544]	; (800d388 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800d168:	681b      	ldr	r3, [r3, #0]
 800d16a:	f003 0320 	and.w	r3, r3, #32
 800d16e:	2b00      	cmp	r3, #0
 800d170:	d02d      	beq.n	800d1ce <HAL_RCCEx_GetPLL1ClockFreq+0xd2>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800d172:	4b85      	ldr	r3, [pc, #532]	; (800d388 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800d174:	681b      	ldr	r3, [r3, #0]
 800d176:	08db      	lsrs	r3, r3, #3
 800d178:	f003 0303 	and.w	r3, r3, #3
 800d17c:	4a83      	ldr	r2, [pc, #524]	; (800d38c <HAL_RCCEx_GetPLL1ClockFreq+0x290>)
 800d17e:	fa22 f303 	lsr.w	r3, r2, r3
 800d182:	60bb      	str	r3, [r7, #8]
          pll1vco = ((float_t)hsivalue / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800d184:	68bb      	ldr	r3, [r7, #8]
 800d186:	ee07 3a90 	vmov	s15, r3
 800d18a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800d18e:	697b      	ldr	r3, [r7, #20]
 800d190:	ee07 3a90 	vmov	s15, r3
 800d194:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800d198:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800d19c:	4b7a      	ldr	r3, [pc, #488]	; (800d388 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800d19e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800d1a0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800d1a4:	ee07 3a90 	vmov	s15, r3
 800d1a8:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800d1ac:	ed97 6a03 	vldr	s12, [r7, #12]
 800d1b0:	eddf 5a77 	vldr	s11, [pc, #476]	; 800d390 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 800d1b4:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800d1b8:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800d1bc:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800d1c0:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800d1c4:	ee67 7a27 	vmul.f32	s15, s14, s15
 800d1c8:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
        }
        break;
 800d1cc:	e087      	b.n	800d2de <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>
          pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800d1ce:	697b      	ldr	r3, [r7, #20]
 800d1d0:	ee07 3a90 	vmov	s15, r3
 800d1d4:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800d1d8:	eddf 6a6e 	vldr	s13, [pc, #440]	; 800d394 <HAL_RCCEx_GetPLL1ClockFreq+0x298>
 800d1dc:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800d1e0:	4b69      	ldr	r3, [pc, #420]	; (800d388 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800d1e2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800d1e4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800d1e8:	ee07 3a90 	vmov	s15, r3
 800d1ec:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800d1f0:	ed97 6a03 	vldr	s12, [r7, #12]
 800d1f4:	eddf 5a66 	vldr	s11, [pc, #408]	; 800d390 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 800d1f8:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800d1fc:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800d200:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800d204:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800d208:	ee67 7a27 	vmul.f32	s15, s14, s15
 800d20c:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800d210:	e065      	b.n	800d2de <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>
      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll1vco = ((float_t)CSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800d212:	697b      	ldr	r3, [r7, #20]
 800d214:	ee07 3a90 	vmov	s15, r3
 800d218:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800d21c:	eddf 6a5e 	vldr	s13, [pc, #376]	; 800d398 <HAL_RCCEx_GetPLL1ClockFreq+0x29c>
 800d220:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800d224:	4b58      	ldr	r3, [pc, #352]	; (800d388 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800d226:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800d228:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800d22c:	ee07 3a90 	vmov	s15, r3
 800d230:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800d234:	ed97 6a03 	vldr	s12, [r7, #12]
 800d238:	eddf 5a55 	vldr	s11, [pc, #340]	; 800d390 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 800d23c:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800d240:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800d244:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800d248:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800d24c:	ee67 7a27 	vmul.f32	s15, s14, s15
 800d250:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800d254:	e043      	b.n	800d2de <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll1vco = ((float_t)HSE_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800d256:	697b      	ldr	r3, [r7, #20]
 800d258:	ee07 3a90 	vmov	s15, r3
 800d25c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800d260:	eddf 6a4e 	vldr	s13, [pc, #312]	; 800d39c <HAL_RCCEx_GetPLL1ClockFreq+0x2a0>
 800d264:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800d268:	4b47      	ldr	r3, [pc, #284]	; (800d388 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800d26a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800d26c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800d270:	ee07 3a90 	vmov	s15, r3
 800d274:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800d278:	ed97 6a03 	vldr	s12, [r7, #12]
 800d27c:	eddf 5a44 	vldr	s11, [pc, #272]	; 800d390 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 800d280:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800d284:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800d288:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800d28c:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800d290:	ee67 7a27 	vmul.f32	s15, s14, s15
 800d294:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800d298:	e021      	b.n	800d2de <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>

      default:
        pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800d29a:	697b      	ldr	r3, [r7, #20]
 800d29c:	ee07 3a90 	vmov	s15, r3
 800d2a0:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800d2a4:	eddf 6a3b 	vldr	s13, [pc, #236]	; 800d394 <HAL_RCCEx_GetPLL1ClockFreq+0x298>
 800d2a8:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800d2ac:	4b36      	ldr	r3, [pc, #216]	; (800d388 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800d2ae:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800d2b0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800d2b4:	ee07 3a90 	vmov	s15, r3
 800d2b8:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800d2bc:	ed97 6a03 	vldr	s12, [r7, #12]
 800d2c0:	eddf 5a33 	vldr	s11, [pc, #204]	; 800d390 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 800d2c4:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800d2c8:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800d2cc:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800d2d0:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800d2d4:	ee67 7a27 	vmul.f32	s15, s14, s15
 800d2d8:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800d2dc:	bf00      	nop
    }

    PLL1_Clocks->PLL1_P_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >> 9)  + (float_t)1)) ;
 800d2de:	4b2a      	ldr	r3, [pc, #168]	; (800d388 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800d2e0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800d2e2:	0a5b      	lsrs	r3, r3, #9
 800d2e4:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800d2e8:	ee07 3a90 	vmov	s15, r3
 800d2ec:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800d2f0:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800d2f4:	ee37 7a87 	vadd.f32	s14, s15, s14
 800d2f8:	edd7 6a07 	vldr	s13, [r7, #28]
 800d2fc:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800d300:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800d304:	ee17 2a90 	vmov	r2, s15
 800d308:	687b      	ldr	r3, [r7, #4]
 800d30a:	601a      	str	r2, [r3, #0]
    PLL1_Clocks->PLL1_Q_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_Q1) >> 16) + (float_t)1)) ;
 800d30c:	4b1e      	ldr	r3, [pc, #120]	; (800d388 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800d30e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800d310:	0c1b      	lsrs	r3, r3, #16
 800d312:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800d316:	ee07 3a90 	vmov	s15, r3
 800d31a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800d31e:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800d322:	ee37 7a87 	vadd.f32	s14, s15, s14
 800d326:	edd7 6a07 	vldr	s13, [r7, #28]
 800d32a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800d32e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800d332:	ee17 2a90 	vmov	r2, s15
 800d336:	687b      	ldr	r3, [r7, #4]
 800d338:	605a      	str	r2, [r3, #4]
    PLL1_Clocks->PLL1_R_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_R1) >> 24) + (float_t)1)) ;
 800d33a:	4b13      	ldr	r3, [pc, #76]	; (800d388 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800d33c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800d33e:	0e1b      	lsrs	r3, r3, #24
 800d340:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800d344:	ee07 3a90 	vmov	s15, r3
 800d348:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800d34c:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800d350:	ee37 7a87 	vadd.f32	s14, s15, s14
 800d354:	edd7 6a07 	vldr	s13, [r7, #28]
 800d358:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800d35c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800d360:	ee17 2a90 	vmov	r2, s15
 800d364:	687b      	ldr	r3, [r7, #4]
 800d366:	609a      	str	r2, [r3, #8]
    PLL1_Clocks->PLL1_P_Frequency = 0U;
    PLL1_Clocks->PLL1_Q_Frequency = 0U;
    PLL1_Clocks->PLL1_R_Frequency = 0U;
  }

}
 800d368:	e008      	b.n	800d37c <HAL_RCCEx_GetPLL1ClockFreq+0x280>
    PLL1_Clocks->PLL1_P_Frequency = 0U;
 800d36a:	687b      	ldr	r3, [r7, #4]
 800d36c:	2200      	movs	r2, #0
 800d36e:	601a      	str	r2, [r3, #0]
    PLL1_Clocks->PLL1_Q_Frequency = 0U;
 800d370:	687b      	ldr	r3, [r7, #4]
 800d372:	2200      	movs	r2, #0
 800d374:	605a      	str	r2, [r3, #4]
    PLL1_Clocks->PLL1_R_Frequency = 0U;
 800d376:	687b      	ldr	r3, [r7, #4]
 800d378:	2200      	movs	r2, #0
 800d37a:	609a      	str	r2, [r3, #8]
}
 800d37c:	bf00      	nop
 800d37e:	3724      	adds	r7, #36	; 0x24
 800d380:	46bd      	mov	sp, r7
 800d382:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d386:	4770      	bx	lr
 800d388:	58024400 	.word	0x58024400
 800d38c:	03d09000 	.word	0x03d09000
 800d390:	46000000 	.word	0x46000000
 800d394:	4c742400 	.word	0x4c742400
 800d398:	4a742400 	.word	0x4a742400
 800d39c:	4b189680 	.word	0x4b189680

0800d3a0 <HAL_RCCEx_CRSConfig>:
  * @brief  Start automatic synchronization for polling mode
  * @param  pInit Pointer on RCC_CRSInitTypeDef structure
  * @retval None
  */
void HAL_RCCEx_CRSConfig(RCC_CRSInitTypeDef *pInit)
{
 800d3a0:	b580      	push	{r7, lr}
 800d3a2:	b084      	sub	sp, #16
 800d3a4:	af00      	add	r7, sp, #0
 800d3a6:	6078      	str	r0, [r7, #4]
  assert_param(IS_RCC_CRS_HSI48CALIBRATION(pInit->HSI48CalibrationValue));

  /* CONFIGURATION */

  /* Before configuration, reset CRS registers to their default values*/
  __HAL_RCC_CRS_FORCE_RESET();
 800d3a8:	4b26      	ldr	r3, [pc, #152]	; (800d444 <HAL_RCCEx_CRSConfig+0xa4>)
 800d3aa:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800d3ae:	4a25      	ldr	r2, [pc, #148]	; (800d444 <HAL_RCCEx_CRSConfig+0xa4>)
 800d3b0:	f043 0302 	orr.w	r3, r3, #2
 800d3b4:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
  __HAL_RCC_CRS_RELEASE_RESET();
 800d3b8:	4b22      	ldr	r3, [pc, #136]	; (800d444 <HAL_RCCEx_CRSConfig+0xa4>)
 800d3ba:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800d3be:	4a21      	ldr	r2, [pc, #132]	; (800d444 <HAL_RCCEx_CRSConfig+0xa4>)
 800d3c0:	f023 0302 	bic.w	r3, r3, #2
 800d3c4:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

  /* Set the SYNCDIV[2:0] bits according to Pre-scaler value */
  /* Set the SYNCSRC[1:0] bits according to Source value */
  /* Set the SYNCSPOL bit according to Polarity value */
  if ((HAL_GetREVID() <= REV_ID_Y) && (pInit->Source == RCC_CRS_SYNC_SOURCE_USB2))
 800d3c8:	f7f6 fed2 	bl	8004170 <HAL_GetREVID>
 800d3cc:	4603      	mov	r3, r0
 800d3ce:	f241 0203 	movw	r2, #4099	; 0x1003
 800d3d2:	4293      	cmp	r3, r2
 800d3d4:	d80b      	bhi.n	800d3ee <HAL_RCCEx_CRSConfig+0x4e>
 800d3d6:	687b      	ldr	r3, [r7, #4]
 800d3d8:	685b      	ldr	r3, [r3, #4]
 800d3da:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 800d3de:	d106      	bne.n	800d3ee <HAL_RCCEx_CRSConfig+0x4e>
  {
    /* Use Rev.Y value of USB2 */
    value = (pInit->Prescaler | RCC_CRS_SYNC_SOURCE_PIN | pInit->Polarity);
 800d3e0:	687b      	ldr	r3, [r7, #4]
 800d3e2:	681a      	ldr	r2, [r3, #0]
 800d3e4:	687b      	ldr	r3, [r7, #4]
 800d3e6:	689b      	ldr	r3, [r3, #8]
 800d3e8:	4313      	orrs	r3, r2
 800d3ea:	60fb      	str	r3, [r7, #12]
 800d3ec:	e008      	b.n	800d400 <HAL_RCCEx_CRSConfig+0x60>
  }
  else
  {
    value = (pInit->Prescaler | pInit->Source | pInit->Polarity);
 800d3ee:	687b      	ldr	r3, [r7, #4]
 800d3f0:	681a      	ldr	r2, [r3, #0]
 800d3f2:	687b      	ldr	r3, [r7, #4]
 800d3f4:	685b      	ldr	r3, [r3, #4]
 800d3f6:	431a      	orrs	r2, r3
 800d3f8:	687b      	ldr	r3, [r7, #4]
 800d3fa:	689b      	ldr	r3, [r3, #8]
 800d3fc:	4313      	orrs	r3, r2
 800d3fe:	60fb      	str	r3, [r7, #12]
  }
  /* Set the RELOAD[15:0] bits according to ReloadValue value */
  value |= pInit->ReloadValue;
 800d400:	687b      	ldr	r3, [r7, #4]
 800d402:	68db      	ldr	r3, [r3, #12]
 800d404:	68fa      	ldr	r2, [r7, #12]
 800d406:	4313      	orrs	r3, r2
 800d408:	60fb      	str	r3, [r7, #12]
  /* Set the FELIM[7:0] bits according to ErrorLimitValue value */
  value |= (pInit->ErrorLimitValue << CRS_CFGR_FELIM_Pos);
 800d40a:	687b      	ldr	r3, [r7, #4]
 800d40c:	691b      	ldr	r3, [r3, #16]
 800d40e:	041b      	lsls	r3, r3, #16
 800d410:	68fa      	ldr	r2, [r7, #12]
 800d412:	4313      	orrs	r3, r2
 800d414:	60fb      	str	r3, [r7, #12]
  WRITE_REG(CRS->CFGR, value);
 800d416:	4a0c      	ldr	r2, [pc, #48]	; (800d448 <HAL_RCCEx_CRSConfig+0xa8>)
 800d418:	68fb      	ldr	r3, [r7, #12]
 800d41a:	6053      	str	r3, [r2, #4]

  /* Adjust HSI48 oscillator smooth trimming */
  /* Set the TRIM[5:0] bits according to RCC_CRS_HSI48CalibrationValue value */
  MODIFY_REG(CRS->CR, CRS_CR_TRIM, (pInit->HSI48CalibrationValue << CRS_CR_TRIM_Pos));
 800d41c:	4b0a      	ldr	r3, [pc, #40]	; (800d448 <HAL_RCCEx_CRSConfig+0xa8>)
 800d41e:	681b      	ldr	r3, [r3, #0]
 800d420:	f423 527c 	bic.w	r2, r3, #16128	; 0x3f00
 800d424:	687b      	ldr	r3, [r7, #4]
 800d426:	695b      	ldr	r3, [r3, #20]
 800d428:	021b      	lsls	r3, r3, #8
 800d42a:	4907      	ldr	r1, [pc, #28]	; (800d448 <HAL_RCCEx_CRSConfig+0xa8>)
 800d42c:	4313      	orrs	r3, r2
 800d42e:	600b      	str	r3, [r1, #0]

  /* START AUTOMATIC SYNCHRONIZATION*/

  /* Enable Automatic trimming & Frequency error counter */
  SET_BIT(CRS->CR, CRS_CR_AUTOTRIMEN | CRS_CR_CEN);
 800d430:	4b05      	ldr	r3, [pc, #20]	; (800d448 <HAL_RCCEx_CRSConfig+0xa8>)
 800d432:	681b      	ldr	r3, [r3, #0]
 800d434:	4a04      	ldr	r2, [pc, #16]	; (800d448 <HAL_RCCEx_CRSConfig+0xa8>)
 800d436:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 800d43a:	6013      	str	r3, [r2, #0]
}
 800d43c:	bf00      	nop
 800d43e:	3710      	adds	r7, #16
 800d440:	46bd      	mov	sp, r7
 800d442:	bd80      	pop	{r7, pc}
 800d444:	58024400 	.word	0x58024400
 800d448:	40008400 	.word	0x40008400

0800d44c <RCCEx_PLL2_Config>:
  * @note   PLL2 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(RCC_PLL2InitTypeDef *pll2, uint32_t Divider)
{
 800d44c:	b580      	push	{r7, lr}
 800d44e:	b084      	sub	sp, #16
 800d450:	af00      	add	r7, sp, #0
 800d452:	6078      	str	r0, [r7, #4]
 800d454:	6039      	str	r1, [r7, #0]

  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800d456:	2300      	movs	r3, #0
 800d458:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL2RGE_VALUE(pll2->PLL2RGE));
  assert_param(IS_RCC_PLL2VCO_VALUE(pll2->PLL2VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll2->PLL2FRACN));

  /* Check that PLL2 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 800d45a:	4b53      	ldr	r3, [pc, #332]	; (800d5a8 <RCCEx_PLL2_Config+0x15c>)
 800d45c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800d45e:	f003 0303 	and.w	r3, r3, #3
 800d462:	2b03      	cmp	r3, #3
 800d464:	d101      	bne.n	800d46a <RCCEx_PLL2_Config+0x1e>
  {
    return HAL_ERROR;
 800d466:	2301      	movs	r3, #1
 800d468:	e099      	b.n	800d59e <RCCEx_PLL2_Config+0x152>


  else
  {
    /* Disable  PLL2. */
    __HAL_RCC_PLL2_DISABLE();
 800d46a:	4b4f      	ldr	r3, [pc, #316]	; (800d5a8 <RCCEx_PLL2_Config+0x15c>)
 800d46c:	681b      	ldr	r3, [r3, #0]
 800d46e:	4a4e      	ldr	r2, [pc, #312]	; (800d5a8 <RCCEx_PLL2_Config+0x15c>)
 800d470:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 800d474:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800d476:	f7f6 fe4b 	bl	8004110 <HAL_GetTick>
 800d47a:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL is disabled */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 800d47c:	e008      	b.n	800d490 <RCCEx_PLL2_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 800d47e:	f7f6 fe47 	bl	8004110 <HAL_GetTick>
 800d482:	4602      	mov	r2, r0
 800d484:	68bb      	ldr	r3, [r7, #8]
 800d486:	1ad3      	subs	r3, r2, r3
 800d488:	2b02      	cmp	r3, #2
 800d48a:	d901      	bls.n	800d490 <RCCEx_PLL2_Config+0x44>
      {
        return HAL_TIMEOUT;
 800d48c:	2303      	movs	r3, #3
 800d48e:	e086      	b.n	800d59e <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 800d490:	4b45      	ldr	r3, [pc, #276]	; (800d5a8 <RCCEx_PLL2_Config+0x15c>)
 800d492:	681b      	ldr	r3, [r3, #0]
 800d494:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800d498:	2b00      	cmp	r3, #0
 800d49a:	d1f0      	bne.n	800d47e <RCCEx_PLL2_Config+0x32>
      }
    }

    /* Configure PLL2 multiplication and division factors. */
    __HAL_RCC_PLL2_CONFIG(pll2->PLL2M,
 800d49c:	4b42      	ldr	r3, [pc, #264]	; (800d5a8 <RCCEx_PLL2_Config+0x15c>)
 800d49e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800d4a0:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 800d4a4:	687b      	ldr	r3, [r7, #4]
 800d4a6:	681b      	ldr	r3, [r3, #0]
 800d4a8:	031b      	lsls	r3, r3, #12
 800d4aa:	493f      	ldr	r1, [pc, #252]	; (800d5a8 <RCCEx_PLL2_Config+0x15c>)
 800d4ac:	4313      	orrs	r3, r2
 800d4ae:	628b      	str	r3, [r1, #40]	; 0x28
 800d4b0:	687b      	ldr	r3, [r7, #4]
 800d4b2:	685b      	ldr	r3, [r3, #4]
 800d4b4:	3b01      	subs	r3, #1
 800d4b6:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800d4ba:	687b      	ldr	r3, [r7, #4]
 800d4bc:	689b      	ldr	r3, [r3, #8]
 800d4be:	3b01      	subs	r3, #1
 800d4c0:	025b      	lsls	r3, r3, #9
 800d4c2:	b29b      	uxth	r3, r3
 800d4c4:	431a      	orrs	r2, r3
 800d4c6:	687b      	ldr	r3, [r7, #4]
 800d4c8:	68db      	ldr	r3, [r3, #12]
 800d4ca:	3b01      	subs	r3, #1
 800d4cc:	041b      	lsls	r3, r3, #16
 800d4ce:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 800d4d2:	431a      	orrs	r2, r3
 800d4d4:	687b      	ldr	r3, [r7, #4]
 800d4d6:	691b      	ldr	r3, [r3, #16]
 800d4d8:	3b01      	subs	r3, #1
 800d4da:	061b      	lsls	r3, r3, #24
 800d4dc:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 800d4e0:	4931      	ldr	r1, [pc, #196]	; (800d5a8 <RCCEx_PLL2_Config+0x15c>)
 800d4e2:	4313      	orrs	r3, r2
 800d4e4:	638b      	str	r3, [r1, #56]	; 0x38
                          pll2->PLL2P,
                          pll2->PLL2Q,
                          pll2->PLL2R);

    /* Select PLL2 input reference frequency range: VCI */
    __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE) ;
 800d4e6:	4b30      	ldr	r3, [pc, #192]	; (800d5a8 <RCCEx_PLL2_Config+0x15c>)
 800d4e8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d4ea:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 800d4ee:	687b      	ldr	r3, [r7, #4]
 800d4f0:	695b      	ldr	r3, [r3, #20]
 800d4f2:	492d      	ldr	r1, [pc, #180]	; (800d5a8 <RCCEx_PLL2_Config+0x15c>)
 800d4f4:	4313      	orrs	r3, r2
 800d4f6:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL2 output frequency range : VCO */
    __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL) ;
 800d4f8:	4b2b      	ldr	r3, [pc, #172]	; (800d5a8 <RCCEx_PLL2_Config+0x15c>)
 800d4fa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d4fc:	f023 0220 	bic.w	r2, r3, #32
 800d500:	687b      	ldr	r3, [r7, #4]
 800d502:	699b      	ldr	r3, [r3, #24]
 800d504:	4928      	ldr	r1, [pc, #160]	; (800d5a8 <RCCEx_PLL2_Config+0x15c>)
 800d506:	4313      	orrs	r3, r2
 800d508:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_DISABLE();
 800d50a:	4b27      	ldr	r3, [pc, #156]	; (800d5a8 <RCCEx_PLL2_Config+0x15c>)
 800d50c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d50e:	4a26      	ldr	r2, [pc, #152]	; (800d5a8 <RCCEx_PLL2_Config+0x15c>)
 800d510:	f023 0310 	bic.w	r3, r3, #16
 800d514:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 800d516:	4b24      	ldr	r3, [pc, #144]	; (800d5a8 <RCCEx_PLL2_Config+0x15c>)
 800d518:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800d51a:	4b24      	ldr	r3, [pc, #144]	; (800d5ac <RCCEx_PLL2_Config+0x160>)
 800d51c:	4013      	ands	r3, r2
 800d51e:	687a      	ldr	r2, [r7, #4]
 800d520:	69d2      	ldr	r2, [r2, #28]
 800d522:	00d2      	lsls	r2, r2, #3
 800d524:	4920      	ldr	r1, [pc, #128]	; (800d5a8 <RCCEx_PLL2_Config+0x15c>)
 800d526:	4313      	orrs	r3, r2
 800d528:	63cb      	str	r3, [r1, #60]	; 0x3c

    /* Enable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_ENABLE();
 800d52a:	4b1f      	ldr	r3, [pc, #124]	; (800d5a8 <RCCEx_PLL2_Config+0x15c>)
 800d52c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d52e:	4a1e      	ldr	r2, [pc, #120]	; (800d5a8 <RCCEx_PLL2_Config+0x15c>)
 800d530:	f043 0310 	orr.w	r3, r3, #16
 800d534:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL2 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 800d536:	683b      	ldr	r3, [r7, #0]
 800d538:	2b00      	cmp	r3, #0
 800d53a:	d106      	bne.n	800d54a <RCCEx_PLL2_Config+0xfe>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 800d53c:	4b1a      	ldr	r3, [pc, #104]	; (800d5a8 <RCCEx_PLL2_Config+0x15c>)
 800d53e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d540:	4a19      	ldr	r2, [pc, #100]	; (800d5a8 <RCCEx_PLL2_Config+0x15c>)
 800d542:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800d546:	62d3      	str	r3, [r2, #44]	; 0x2c
 800d548:	e00f      	b.n	800d56a <RCCEx_PLL2_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 800d54a:	683b      	ldr	r3, [r7, #0]
 800d54c:	2b01      	cmp	r3, #1
 800d54e:	d106      	bne.n	800d55e <RCCEx_PLL2_Config+0x112>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVQ);
 800d550:	4b15      	ldr	r3, [pc, #84]	; (800d5a8 <RCCEx_PLL2_Config+0x15c>)
 800d552:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d554:	4a14      	ldr	r2, [pc, #80]	; (800d5a8 <RCCEx_PLL2_Config+0x15c>)
 800d556:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800d55a:	62d3      	str	r3, [r2, #44]	; 0x2c
 800d55c:	e005      	b.n	800d56a <RCCEx_PLL2_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVR);
 800d55e:	4b12      	ldr	r3, [pc, #72]	; (800d5a8 <RCCEx_PLL2_Config+0x15c>)
 800d560:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d562:	4a11      	ldr	r2, [pc, #68]	; (800d5a8 <RCCEx_PLL2_Config+0x15c>)
 800d564:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800d568:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL2. */
    __HAL_RCC_PLL2_ENABLE();
 800d56a:	4b0f      	ldr	r3, [pc, #60]	; (800d5a8 <RCCEx_PLL2_Config+0x15c>)
 800d56c:	681b      	ldr	r3, [r3, #0]
 800d56e:	4a0e      	ldr	r2, [pc, #56]	; (800d5a8 <RCCEx_PLL2_Config+0x15c>)
 800d570:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 800d574:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800d576:	f7f6 fdcb 	bl	8004110 <HAL_GetTick>
 800d57a:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL2 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 800d57c:	e008      	b.n	800d590 <RCCEx_PLL2_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 800d57e:	f7f6 fdc7 	bl	8004110 <HAL_GetTick>
 800d582:	4602      	mov	r2, r0
 800d584:	68bb      	ldr	r3, [r7, #8]
 800d586:	1ad3      	subs	r3, r2, r3
 800d588:	2b02      	cmp	r3, #2
 800d58a:	d901      	bls.n	800d590 <RCCEx_PLL2_Config+0x144>
      {
        return HAL_TIMEOUT;
 800d58c:	2303      	movs	r3, #3
 800d58e:	e006      	b.n	800d59e <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 800d590:	4b05      	ldr	r3, [pc, #20]	; (800d5a8 <RCCEx_PLL2_Config+0x15c>)
 800d592:	681b      	ldr	r3, [r3, #0]
 800d594:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800d598:	2b00      	cmp	r3, #0
 800d59a:	d0f0      	beq.n	800d57e <RCCEx_PLL2_Config+0x132>
    }

  }


  return status;
 800d59c:	7bfb      	ldrb	r3, [r7, #15]
}
 800d59e:	4618      	mov	r0, r3
 800d5a0:	3710      	adds	r7, #16
 800d5a2:	46bd      	mov	sp, r7
 800d5a4:	bd80      	pop	{r7, pc}
 800d5a6:	bf00      	nop
 800d5a8:	58024400 	.word	0x58024400
 800d5ac:	ffff0007 	.word	0xffff0007

0800d5b0 <RCCEx_PLL3_Config>:
  * @note   PLL3 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(RCC_PLL3InitTypeDef *pll3, uint32_t Divider)
{
 800d5b0:	b580      	push	{r7, lr}
 800d5b2:	b084      	sub	sp, #16
 800d5b4:	af00      	add	r7, sp, #0
 800d5b6:	6078      	str	r0, [r7, #4]
 800d5b8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800d5ba:	2300      	movs	r3, #0
 800d5bc:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL3RGE_VALUE(pll3->PLL3RGE));
  assert_param(IS_RCC_PLL3VCO_VALUE(pll3->PLL3VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll3->PLL3FRACN));

  /* Check that PLL3 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 800d5be:	4b53      	ldr	r3, [pc, #332]	; (800d70c <RCCEx_PLL3_Config+0x15c>)
 800d5c0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800d5c2:	f003 0303 	and.w	r3, r3, #3
 800d5c6:	2b03      	cmp	r3, #3
 800d5c8:	d101      	bne.n	800d5ce <RCCEx_PLL3_Config+0x1e>
  {
    return HAL_ERROR;
 800d5ca:	2301      	movs	r3, #1
 800d5cc:	e099      	b.n	800d702 <RCCEx_PLL3_Config+0x152>


  else
  {
    /* Disable  PLL3. */
    __HAL_RCC_PLL3_DISABLE();
 800d5ce:	4b4f      	ldr	r3, [pc, #316]	; (800d70c <RCCEx_PLL3_Config+0x15c>)
 800d5d0:	681b      	ldr	r3, [r3, #0]
 800d5d2:	4a4e      	ldr	r2, [pc, #312]	; (800d70c <RCCEx_PLL3_Config+0x15c>)
 800d5d4:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800d5d8:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800d5da:	f7f6 fd99 	bl	8004110 <HAL_GetTick>
 800d5de:	60b8      	str	r0, [r7, #8]
    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 800d5e0:	e008      	b.n	800d5f4 <RCCEx_PLL3_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 800d5e2:	f7f6 fd95 	bl	8004110 <HAL_GetTick>
 800d5e6:	4602      	mov	r2, r0
 800d5e8:	68bb      	ldr	r3, [r7, #8]
 800d5ea:	1ad3      	subs	r3, r2, r3
 800d5ec:	2b02      	cmp	r3, #2
 800d5ee:	d901      	bls.n	800d5f4 <RCCEx_PLL3_Config+0x44>
      {
        return HAL_TIMEOUT;
 800d5f0:	2303      	movs	r3, #3
 800d5f2:	e086      	b.n	800d702 <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 800d5f4:	4b45      	ldr	r3, [pc, #276]	; (800d70c <RCCEx_PLL3_Config+0x15c>)
 800d5f6:	681b      	ldr	r3, [r3, #0]
 800d5f8:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800d5fc:	2b00      	cmp	r3, #0
 800d5fe:	d1f0      	bne.n	800d5e2 <RCCEx_PLL3_Config+0x32>
      }
    }

    /* Configure the PLL3  multiplication and division factors. */
    __HAL_RCC_PLL3_CONFIG(pll3->PLL3M,
 800d600:	4b42      	ldr	r3, [pc, #264]	; (800d70c <RCCEx_PLL3_Config+0x15c>)
 800d602:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800d604:	f023 727c 	bic.w	r2, r3, #66060288	; 0x3f00000
 800d608:	687b      	ldr	r3, [r7, #4]
 800d60a:	681b      	ldr	r3, [r3, #0]
 800d60c:	051b      	lsls	r3, r3, #20
 800d60e:	493f      	ldr	r1, [pc, #252]	; (800d70c <RCCEx_PLL3_Config+0x15c>)
 800d610:	4313      	orrs	r3, r2
 800d612:	628b      	str	r3, [r1, #40]	; 0x28
 800d614:	687b      	ldr	r3, [r7, #4]
 800d616:	685b      	ldr	r3, [r3, #4]
 800d618:	3b01      	subs	r3, #1
 800d61a:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800d61e:	687b      	ldr	r3, [r7, #4]
 800d620:	689b      	ldr	r3, [r3, #8]
 800d622:	3b01      	subs	r3, #1
 800d624:	025b      	lsls	r3, r3, #9
 800d626:	b29b      	uxth	r3, r3
 800d628:	431a      	orrs	r2, r3
 800d62a:	687b      	ldr	r3, [r7, #4]
 800d62c:	68db      	ldr	r3, [r3, #12]
 800d62e:	3b01      	subs	r3, #1
 800d630:	041b      	lsls	r3, r3, #16
 800d632:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 800d636:	431a      	orrs	r2, r3
 800d638:	687b      	ldr	r3, [r7, #4]
 800d63a:	691b      	ldr	r3, [r3, #16]
 800d63c:	3b01      	subs	r3, #1
 800d63e:	061b      	lsls	r3, r3, #24
 800d640:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 800d644:	4931      	ldr	r1, [pc, #196]	; (800d70c <RCCEx_PLL3_Config+0x15c>)
 800d646:	4313      	orrs	r3, r2
 800d648:	640b      	str	r3, [r1, #64]	; 0x40
                          pll3->PLL3P,
                          pll3->PLL3Q,
                          pll3->PLL3R);

    /* Select PLL3 input reference frequency range: VCI */
    __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE) ;
 800d64a:	4b30      	ldr	r3, [pc, #192]	; (800d70c <RCCEx_PLL3_Config+0x15c>)
 800d64c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d64e:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 800d652:	687b      	ldr	r3, [r7, #4]
 800d654:	695b      	ldr	r3, [r3, #20]
 800d656:	492d      	ldr	r1, [pc, #180]	; (800d70c <RCCEx_PLL3_Config+0x15c>)
 800d658:	4313      	orrs	r3, r2
 800d65a:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL3 output frequency range : VCO */
    __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL) ;
 800d65c:	4b2b      	ldr	r3, [pc, #172]	; (800d70c <RCCEx_PLL3_Config+0x15c>)
 800d65e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d660:	f423 7200 	bic.w	r2, r3, #512	; 0x200
 800d664:	687b      	ldr	r3, [r7, #4]
 800d666:	699b      	ldr	r3, [r3, #24]
 800d668:	4928      	ldr	r1, [pc, #160]	; (800d70c <RCCEx_PLL3_Config+0x15c>)
 800d66a:	4313      	orrs	r3, r2
 800d66c:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_DISABLE();
 800d66e:	4b27      	ldr	r3, [pc, #156]	; (800d70c <RCCEx_PLL3_Config+0x15c>)
 800d670:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d672:	4a26      	ldr	r2, [pc, #152]	; (800d70c <RCCEx_PLL3_Config+0x15c>)
 800d674:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800d678:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 800d67a:	4b24      	ldr	r3, [pc, #144]	; (800d70c <RCCEx_PLL3_Config+0x15c>)
 800d67c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800d67e:	4b24      	ldr	r3, [pc, #144]	; (800d710 <RCCEx_PLL3_Config+0x160>)
 800d680:	4013      	ands	r3, r2
 800d682:	687a      	ldr	r2, [r7, #4]
 800d684:	69d2      	ldr	r2, [r2, #28]
 800d686:	00d2      	lsls	r2, r2, #3
 800d688:	4920      	ldr	r1, [pc, #128]	; (800d70c <RCCEx_PLL3_Config+0x15c>)
 800d68a:	4313      	orrs	r3, r2
 800d68c:	644b      	str	r3, [r1, #68]	; 0x44

    /* Enable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_ENABLE();
 800d68e:	4b1f      	ldr	r3, [pc, #124]	; (800d70c <RCCEx_PLL3_Config+0x15c>)
 800d690:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d692:	4a1e      	ldr	r2, [pc, #120]	; (800d70c <RCCEx_PLL3_Config+0x15c>)
 800d694:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800d698:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL3 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 800d69a:	683b      	ldr	r3, [r7, #0]
 800d69c:	2b00      	cmp	r3, #0
 800d69e:	d106      	bne.n	800d6ae <RCCEx_PLL3_Config+0xfe>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
 800d6a0:	4b1a      	ldr	r3, [pc, #104]	; (800d70c <RCCEx_PLL3_Config+0x15c>)
 800d6a2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d6a4:	4a19      	ldr	r2, [pc, #100]	; (800d70c <RCCEx_PLL3_Config+0x15c>)
 800d6a6:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 800d6aa:	62d3      	str	r3, [r2, #44]	; 0x2c
 800d6ac:	e00f      	b.n	800d6ce <RCCEx_PLL3_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 800d6ae:	683b      	ldr	r3, [r7, #0]
 800d6b0:	2b01      	cmp	r3, #1
 800d6b2:	d106      	bne.n	800d6c2 <RCCEx_PLL3_Config+0x112>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
 800d6b4:	4b15      	ldr	r3, [pc, #84]	; (800d70c <RCCEx_PLL3_Config+0x15c>)
 800d6b6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d6b8:	4a14      	ldr	r2, [pc, #80]	; (800d70c <RCCEx_PLL3_Config+0x15c>)
 800d6ba:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 800d6be:	62d3      	str	r3, [r2, #44]	; 0x2c
 800d6c0:	e005      	b.n	800d6ce <RCCEx_PLL3_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
 800d6c2:	4b12      	ldr	r3, [pc, #72]	; (800d70c <RCCEx_PLL3_Config+0x15c>)
 800d6c4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d6c6:	4a11      	ldr	r2, [pc, #68]	; (800d70c <RCCEx_PLL3_Config+0x15c>)
 800d6c8:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800d6cc:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL3. */
    __HAL_RCC_PLL3_ENABLE();
 800d6ce:	4b0f      	ldr	r3, [pc, #60]	; (800d70c <RCCEx_PLL3_Config+0x15c>)
 800d6d0:	681b      	ldr	r3, [r3, #0]
 800d6d2:	4a0e      	ldr	r2, [pc, #56]	; (800d70c <RCCEx_PLL3_Config+0x15c>)
 800d6d4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800d6d8:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800d6da:	f7f6 fd19 	bl	8004110 <HAL_GetTick>
 800d6de:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 800d6e0:	e008      	b.n	800d6f4 <RCCEx_PLL3_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 800d6e2:	f7f6 fd15 	bl	8004110 <HAL_GetTick>
 800d6e6:	4602      	mov	r2, r0
 800d6e8:	68bb      	ldr	r3, [r7, #8]
 800d6ea:	1ad3      	subs	r3, r2, r3
 800d6ec:	2b02      	cmp	r3, #2
 800d6ee:	d901      	bls.n	800d6f4 <RCCEx_PLL3_Config+0x144>
      {
        return HAL_TIMEOUT;
 800d6f0:	2303      	movs	r3, #3
 800d6f2:	e006      	b.n	800d702 <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 800d6f4:	4b05      	ldr	r3, [pc, #20]	; (800d70c <RCCEx_PLL3_Config+0x15c>)
 800d6f6:	681b      	ldr	r3, [r3, #0]
 800d6f8:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800d6fc:	2b00      	cmp	r3, #0
 800d6fe:	d0f0      	beq.n	800d6e2 <RCCEx_PLL3_Config+0x132>
    }

  }


  return status;
 800d700:	7bfb      	ldrb	r3, [r7, #15]
}
 800d702:	4618      	mov	r0, r3
 800d704:	3710      	adds	r7, #16
 800d706:	46bd      	mov	sp, r7
 800d708:	bd80      	pop	{r7, pc}
 800d70a:	bf00      	nop
 800d70c:	58024400 	.word	0x58024400
 800d710:	ffff0007 	.word	0xffff0007

0800d714 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800d714:	b580      	push	{r7, lr}
 800d716:	b082      	sub	sp, #8
 800d718:	af00      	add	r7, sp, #0
 800d71a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800d71c:	687b      	ldr	r3, [r7, #4]
 800d71e:	2b00      	cmp	r3, #0
 800d720:	d101      	bne.n	800d726 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800d722:	2301      	movs	r3, #1
 800d724:	e049      	b.n	800d7ba <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800d726:	687b      	ldr	r3, [r7, #4]
 800d728:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800d72c:	b2db      	uxtb	r3, r3
 800d72e:	2b00      	cmp	r3, #0
 800d730:	d106      	bne.n	800d740 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800d732:	687b      	ldr	r3, [r7, #4]
 800d734:	2200      	movs	r2, #0
 800d736:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800d73a:	6878      	ldr	r0, [r7, #4]
 800d73c:	f7f5 ff8c 	bl	8003658 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800d740:	687b      	ldr	r3, [r7, #4]
 800d742:	2202      	movs	r2, #2
 800d744:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800d748:	687b      	ldr	r3, [r7, #4]
 800d74a:	681a      	ldr	r2, [r3, #0]
 800d74c:	687b      	ldr	r3, [r7, #4]
 800d74e:	3304      	adds	r3, #4
 800d750:	4619      	mov	r1, r3
 800d752:	4610      	mov	r0, r2
 800d754:	f000 f92e 	bl	800d9b4 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800d758:	687b      	ldr	r3, [r7, #4]
 800d75a:	2201      	movs	r2, #1
 800d75c:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800d760:	687b      	ldr	r3, [r7, #4]
 800d762:	2201      	movs	r2, #1
 800d764:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800d768:	687b      	ldr	r3, [r7, #4]
 800d76a:	2201      	movs	r2, #1
 800d76c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800d770:	687b      	ldr	r3, [r7, #4]
 800d772:	2201      	movs	r2, #1
 800d774:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800d778:	687b      	ldr	r3, [r7, #4]
 800d77a:	2201      	movs	r2, #1
 800d77c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800d780:	687b      	ldr	r3, [r7, #4]
 800d782:	2201      	movs	r2, #1
 800d784:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800d788:	687b      	ldr	r3, [r7, #4]
 800d78a:	2201      	movs	r2, #1
 800d78c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800d790:	687b      	ldr	r3, [r7, #4]
 800d792:	2201      	movs	r2, #1
 800d794:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800d798:	687b      	ldr	r3, [r7, #4]
 800d79a:	2201      	movs	r2, #1
 800d79c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800d7a0:	687b      	ldr	r3, [r7, #4]
 800d7a2:	2201      	movs	r2, #1
 800d7a4:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 800d7a8:	687b      	ldr	r3, [r7, #4]
 800d7aa:	2201      	movs	r2, #1
 800d7ac:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800d7b0:	687b      	ldr	r3, [r7, #4]
 800d7b2:	2201      	movs	r2, #1
 800d7b4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800d7b8:	2300      	movs	r3, #0
}
 800d7ba:	4618      	mov	r0, r3
 800d7bc:	3708      	adds	r7, #8
 800d7be:	46bd      	mov	sp, r7
 800d7c0:	bd80      	pop	{r7, pc}
	...

0800d7c4 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 800d7c4:	b580      	push	{r7, lr}
 800d7c6:	b084      	sub	sp, #16
 800d7c8:	af00      	add	r7, sp, #0
 800d7ca:	6078      	str	r0, [r7, #4]
 800d7cc:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800d7ce:	2300      	movs	r3, #0
 800d7d0:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800d7d2:	687b      	ldr	r3, [r7, #4]
 800d7d4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800d7d8:	2b01      	cmp	r3, #1
 800d7da:	d101      	bne.n	800d7e0 <HAL_TIM_ConfigClockSource+0x1c>
 800d7dc:	2302      	movs	r3, #2
 800d7de:	e0dc      	b.n	800d99a <HAL_TIM_ConfigClockSource+0x1d6>
 800d7e0:	687b      	ldr	r3, [r7, #4]
 800d7e2:	2201      	movs	r2, #1
 800d7e4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800d7e8:	687b      	ldr	r3, [r7, #4]
 800d7ea:	2202      	movs	r2, #2
 800d7ec:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 800d7f0:	687b      	ldr	r3, [r7, #4]
 800d7f2:	681b      	ldr	r3, [r3, #0]
 800d7f4:	689b      	ldr	r3, [r3, #8]
 800d7f6:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 800d7f8:	68ba      	ldr	r2, [r7, #8]
 800d7fa:	4b6a      	ldr	r3, [pc, #424]	; (800d9a4 <HAL_TIM_ConfigClockSource+0x1e0>)
 800d7fc:	4013      	ands	r3, r2
 800d7fe:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800d800:	68bb      	ldr	r3, [r7, #8]
 800d802:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800d806:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 800d808:	687b      	ldr	r3, [r7, #4]
 800d80a:	681b      	ldr	r3, [r3, #0]
 800d80c:	68ba      	ldr	r2, [r7, #8]
 800d80e:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 800d810:	683b      	ldr	r3, [r7, #0]
 800d812:	681b      	ldr	r3, [r3, #0]
 800d814:	4a64      	ldr	r2, [pc, #400]	; (800d9a8 <HAL_TIM_ConfigClockSource+0x1e4>)
 800d816:	4293      	cmp	r3, r2
 800d818:	f000 80a9 	beq.w	800d96e <HAL_TIM_ConfigClockSource+0x1aa>
 800d81c:	4a62      	ldr	r2, [pc, #392]	; (800d9a8 <HAL_TIM_ConfigClockSource+0x1e4>)
 800d81e:	4293      	cmp	r3, r2
 800d820:	f200 80ae 	bhi.w	800d980 <HAL_TIM_ConfigClockSource+0x1bc>
 800d824:	4a61      	ldr	r2, [pc, #388]	; (800d9ac <HAL_TIM_ConfigClockSource+0x1e8>)
 800d826:	4293      	cmp	r3, r2
 800d828:	f000 80a1 	beq.w	800d96e <HAL_TIM_ConfigClockSource+0x1aa>
 800d82c:	4a5f      	ldr	r2, [pc, #380]	; (800d9ac <HAL_TIM_ConfigClockSource+0x1e8>)
 800d82e:	4293      	cmp	r3, r2
 800d830:	f200 80a6 	bhi.w	800d980 <HAL_TIM_ConfigClockSource+0x1bc>
 800d834:	4a5e      	ldr	r2, [pc, #376]	; (800d9b0 <HAL_TIM_ConfigClockSource+0x1ec>)
 800d836:	4293      	cmp	r3, r2
 800d838:	f000 8099 	beq.w	800d96e <HAL_TIM_ConfigClockSource+0x1aa>
 800d83c:	4a5c      	ldr	r2, [pc, #368]	; (800d9b0 <HAL_TIM_ConfigClockSource+0x1ec>)
 800d83e:	4293      	cmp	r3, r2
 800d840:	f200 809e 	bhi.w	800d980 <HAL_TIM_ConfigClockSource+0x1bc>
 800d844:	f1b3 1f10 	cmp.w	r3, #1048592	; 0x100010
 800d848:	f000 8091 	beq.w	800d96e <HAL_TIM_ConfigClockSource+0x1aa>
 800d84c:	f1b3 1f10 	cmp.w	r3, #1048592	; 0x100010
 800d850:	f200 8096 	bhi.w	800d980 <HAL_TIM_ConfigClockSource+0x1bc>
 800d854:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800d858:	f000 8089 	beq.w	800d96e <HAL_TIM_ConfigClockSource+0x1aa>
 800d85c:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800d860:	f200 808e 	bhi.w	800d980 <HAL_TIM_ConfigClockSource+0x1bc>
 800d864:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800d868:	d03e      	beq.n	800d8e8 <HAL_TIM_ConfigClockSource+0x124>
 800d86a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800d86e:	f200 8087 	bhi.w	800d980 <HAL_TIM_ConfigClockSource+0x1bc>
 800d872:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800d876:	f000 8086 	beq.w	800d986 <HAL_TIM_ConfigClockSource+0x1c2>
 800d87a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800d87e:	d87f      	bhi.n	800d980 <HAL_TIM_ConfigClockSource+0x1bc>
 800d880:	2b70      	cmp	r3, #112	; 0x70
 800d882:	d01a      	beq.n	800d8ba <HAL_TIM_ConfigClockSource+0xf6>
 800d884:	2b70      	cmp	r3, #112	; 0x70
 800d886:	d87b      	bhi.n	800d980 <HAL_TIM_ConfigClockSource+0x1bc>
 800d888:	2b60      	cmp	r3, #96	; 0x60
 800d88a:	d050      	beq.n	800d92e <HAL_TIM_ConfigClockSource+0x16a>
 800d88c:	2b60      	cmp	r3, #96	; 0x60
 800d88e:	d877      	bhi.n	800d980 <HAL_TIM_ConfigClockSource+0x1bc>
 800d890:	2b50      	cmp	r3, #80	; 0x50
 800d892:	d03c      	beq.n	800d90e <HAL_TIM_ConfigClockSource+0x14a>
 800d894:	2b50      	cmp	r3, #80	; 0x50
 800d896:	d873      	bhi.n	800d980 <HAL_TIM_ConfigClockSource+0x1bc>
 800d898:	2b40      	cmp	r3, #64	; 0x40
 800d89a:	d058      	beq.n	800d94e <HAL_TIM_ConfigClockSource+0x18a>
 800d89c:	2b40      	cmp	r3, #64	; 0x40
 800d89e:	d86f      	bhi.n	800d980 <HAL_TIM_ConfigClockSource+0x1bc>
 800d8a0:	2b30      	cmp	r3, #48	; 0x30
 800d8a2:	d064      	beq.n	800d96e <HAL_TIM_ConfigClockSource+0x1aa>
 800d8a4:	2b30      	cmp	r3, #48	; 0x30
 800d8a6:	d86b      	bhi.n	800d980 <HAL_TIM_ConfigClockSource+0x1bc>
 800d8a8:	2b20      	cmp	r3, #32
 800d8aa:	d060      	beq.n	800d96e <HAL_TIM_ConfigClockSource+0x1aa>
 800d8ac:	2b20      	cmp	r3, #32
 800d8ae:	d867      	bhi.n	800d980 <HAL_TIM_ConfigClockSource+0x1bc>
 800d8b0:	2b00      	cmp	r3, #0
 800d8b2:	d05c      	beq.n	800d96e <HAL_TIM_ConfigClockSource+0x1aa>
 800d8b4:	2b10      	cmp	r3, #16
 800d8b6:	d05a      	beq.n	800d96e <HAL_TIM_ConfigClockSource+0x1aa>
 800d8b8:	e062      	b.n	800d980 <HAL_TIM_ConfigClockSource+0x1bc>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800d8ba:	687b      	ldr	r3, [r7, #4]
 800d8bc:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 800d8be:	683b      	ldr	r3, [r7, #0]
 800d8c0:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 800d8c2:	683b      	ldr	r3, [r7, #0]
 800d8c4:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 800d8c6:	683b      	ldr	r3, [r7, #0]
 800d8c8:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 800d8ca:	f000 f98b 	bl	800dbe4 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 800d8ce:	687b      	ldr	r3, [r7, #4]
 800d8d0:	681b      	ldr	r3, [r3, #0]
 800d8d2:	689b      	ldr	r3, [r3, #8]
 800d8d4:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800d8d6:	68bb      	ldr	r3, [r7, #8]
 800d8d8:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 800d8dc:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 800d8de:	687b      	ldr	r3, [r7, #4]
 800d8e0:	681b      	ldr	r3, [r3, #0]
 800d8e2:	68ba      	ldr	r2, [r7, #8]
 800d8e4:	609a      	str	r2, [r3, #8]
      break;
 800d8e6:	e04f      	b.n	800d988 <HAL_TIM_ConfigClockSource+0x1c4>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800d8e8:	687b      	ldr	r3, [r7, #4]
 800d8ea:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 800d8ec:	683b      	ldr	r3, [r7, #0]
 800d8ee:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 800d8f0:	683b      	ldr	r3, [r7, #0]
 800d8f2:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 800d8f4:	683b      	ldr	r3, [r7, #0]
 800d8f6:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 800d8f8:	f000 f974 	bl	800dbe4 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800d8fc:	687b      	ldr	r3, [r7, #4]
 800d8fe:	681b      	ldr	r3, [r3, #0]
 800d900:	689a      	ldr	r2, [r3, #8]
 800d902:	687b      	ldr	r3, [r7, #4]
 800d904:	681b      	ldr	r3, [r3, #0]
 800d906:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800d90a:	609a      	str	r2, [r3, #8]
      break;
 800d90c:	e03c      	b.n	800d988 <HAL_TIM_ConfigClockSource+0x1c4>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800d90e:	687b      	ldr	r3, [r7, #4]
 800d910:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800d912:	683b      	ldr	r3, [r7, #0]
 800d914:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800d916:	683b      	ldr	r3, [r7, #0]
 800d918:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800d91a:	461a      	mov	r2, r3
 800d91c:	f000 f8e4 	bl	800dae8 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 800d920:	687b      	ldr	r3, [r7, #4]
 800d922:	681b      	ldr	r3, [r3, #0]
 800d924:	2150      	movs	r1, #80	; 0x50
 800d926:	4618      	mov	r0, r3
 800d928:	f000 f93e 	bl	800dba8 <TIM_ITRx_SetConfig>
      break;
 800d92c:	e02c      	b.n	800d988 <HAL_TIM_ConfigClockSource+0x1c4>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 800d92e:	687b      	ldr	r3, [r7, #4]
 800d930:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800d932:	683b      	ldr	r3, [r7, #0]
 800d934:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800d936:	683b      	ldr	r3, [r7, #0]
 800d938:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 800d93a:	461a      	mov	r2, r3
 800d93c:	f000 f903 	bl	800db46 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 800d940:	687b      	ldr	r3, [r7, #4]
 800d942:	681b      	ldr	r3, [r3, #0]
 800d944:	2160      	movs	r1, #96	; 0x60
 800d946:	4618      	mov	r0, r3
 800d948:	f000 f92e 	bl	800dba8 <TIM_ITRx_SetConfig>
      break;
 800d94c:	e01c      	b.n	800d988 <HAL_TIM_ConfigClockSource+0x1c4>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800d94e:	687b      	ldr	r3, [r7, #4]
 800d950:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800d952:	683b      	ldr	r3, [r7, #0]
 800d954:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800d956:	683b      	ldr	r3, [r7, #0]
 800d958:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800d95a:	461a      	mov	r2, r3
 800d95c:	f000 f8c4 	bl	800dae8 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 800d960:	687b      	ldr	r3, [r7, #4]
 800d962:	681b      	ldr	r3, [r3, #0]
 800d964:	2140      	movs	r1, #64	; 0x40
 800d966:	4618      	mov	r0, r3
 800d968:	f000 f91e 	bl	800dba8 <TIM_ITRx_SetConfig>
      break;
 800d96c:	e00c      	b.n	800d988 <HAL_TIM_ConfigClockSource+0x1c4>
    case TIM_CLOCKSOURCE_ITR8:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800d96e:	687b      	ldr	r3, [r7, #4]
 800d970:	681a      	ldr	r2, [r3, #0]
 800d972:	683b      	ldr	r3, [r7, #0]
 800d974:	681b      	ldr	r3, [r3, #0]
 800d976:	4619      	mov	r1, r3
 800d978:	4610      	mov	r0, r2
 800d97a:	f000 f915 	bl	800dba8 <TIM_ITRx_SetConfig>
      break;
 800d97e:	e003      	b.n	800d988 <HAL_TIM_ConfigClockSource+0x1c4>
    }

    default:
      status = HAL_ERROR;
 800d980:	2301      	movs	r3, #1
 800d982:	73fb      	strb	r3, [r7, #15]
      break;
 800d984:	e000      	b.n	800d988 <HAL_TIM_ConfigClockSource+0x1c4>
      break;
 800d986:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 800d988:	687b      	ldr	r3, [r7, #4]
 800d98a:	2201      	movs	r2, #1
 800d98c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800d990:	687b      	ldr	r3, [r7, #4]
 800d992:	2200      	movs	r2, #0
 800d994:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 800d998:	7bfb      	ldrb	r3, [r7, #15]
}
 800d99a:	4618      	mov	r0, r3
 800d99c:	3710      	adds	r7, #16
 800d99e:	46bd      	mov	sp, r7
 800d9a0:	bd80      	pop	{r7, pc}
 800d9a2:	bf00      	nop
 800d9a4:	ffceff88 	.word	0xffceff88
 800d9a8:	00100040 	.word	0x00100040
 800d9ac:	00100030 	.word	0x00100030
 800d9b0:	00100020 	.word	0x00100020

0800d9b4 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 800d9b4:	b480      	push	{r7}
 800d9b6:	b085      	sub	sp, #20
 800d9b8:	af00      	add	r7, sp, #0
 800d9ba:	6078      	str	r0, [r7, #4]
 800d9bc:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800d9be:	687b      	ldr	r3, [r7, #4]
 800d9c0:	681b      	ldr	r3, [r3, #0]
 800d9c2:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800d9c4:	687b      	ldr	r3, [r7, #4]
 800d9c6:	4a40      	ldr	r2, [pc, #256]	; (800dac8 <TIM_Base_SetConfig+0x114>)
 800d9c8:	4293      	cmp	r3, r2
 800d9ca:	d013      	beq.n	800d9f4 <TIM_Base_SetConfig+0x40>
 800d9cc:	687b      	ldr	r3, [r7, #4]
 800d9ce:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800d9d2:	d00f      	beq.n	800d9f4 <TIM_Base_SetConfig+0x40>
 800d9d4:	687b      	ldr	r3, [r7, #4]
 800d9d6:	4a3d      	ldr	r2, [pc, #244]	; (800dacc <TIM_Base_SetConfig+0x118>)
 800d9d8:	4293      	cmp	r3, r2
 800d9da:	d00b      	beq.n	800d9f4 <TIM_Base_SetConfig+0x40>
 800d9dc:	687b      	ldr	r3, [r7, #4]
 800d9de:	4a3c      	ldr	r2, [pc, #240]	; (800dad0 <TIM_Base_SetConfig+0x11c>)
 800d9e0:	4293      	cmp	r3, r2
 800d9e2:	d007      	beq.n	800d9f4 <TIM_Base_SetConfig+0x40>
 800d9e4:	687b      	ldr	r3, [r7, #4]
 800d9e6:	4a3b      	ldr	r2, [pc, #236]	; (800dad4 <TIM_Base_SetConfig+0x120>)
 800d9e8:	4293      	cmp	r3, r2
 800d9ea:	d003      	beq.n	800d9f4 <TIM_Base_SetConfig+0x40>
 800d9ec:	687b      	ldr	r3, [r7, #4]
 800d9ee:	4a3a      	ldr	r2, [pc, #232]	; (800dad8 <TIM_Base_SetConfig+0x124>)
 800d9f0:	4293      	cmp	r3, r2
 800d9f2:	d108      	bne.n	800da06 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800d9f4:	68fb      	ldr	r3, [r7, #12]
 800d9f6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800d9fa:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800d9fc:	683b      	ldr	r3, [r7, #0]
 800d9fe:	685b      	ldr	r3, [r3, #4]
 800da00:	68fa      	ldr	r2, [r7, #12]
 800da02:	4313      	orrs	r3, r2
 800da04:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800da06:	687b      	ldr	r3, [r7, #4]
 800da08:	4a2f      	ldr	r2, [pc, #188]	; (800dac8 <TIM_Base_SetConfig+0x114>)
 800da0a:	4293      	cmp	r3, r2
 800da0c:	d01f      	beq.n	800da4e <TIM_Base_SetConfig+0x9a>
 800da0e:	687b      	ldr	r3, [r7, #4]
 800da10:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800da14:	d01b      	beq.n	800da4e <TIM_Base_SetConfig+0x9a>
 800da16:	687b      	ldr	r3, [r7, #4]
 800da18:	4a2c      	ldr	r2, [pc, #176]	; (800dacc <TIM_Base_SetConfig+0x118>)
 800da1a:	4293      	cmp	r3, r2
 800da1c:	d017      	beq.n	800da4e <TIM_Base_SetConfig+0x9a>
 800da1e:	687b      	ldr	r3, [r7, #4]
 800da20:	4a2b      	ldr	r2, [pc, #172]	; (800dad0 <TIM_Base_SetConfig+0x11c>)
 800da22:	4293      	cmp	r3, r2
 800da24:	d013      	beq.n	800da4e <TIM_Base_SetConfig+0x9a>
 800da26:	687b      	ldr	r3, [r7, #4]
 800da28:	4a2a      	ldr	r2, [pc, #168]	; (800dad4 <TIM_Base_SetConfig+0x120>)
 800da2a:	4293      	cmp	r3, r2
 800da2c:	d00f      	beq.n	800da4e <TIM_Base_SetConfig+0x9a>
 800da2e:	687b      	ldr	r3, [r7, #4]
 800da30:	4a29      	ldr	r2, [pc, #164]	; (800dad8 <TIM_Base_SetConfig+0x124>)
 800da32:	4293      	cmp	r3, r2
 800da34:	d00b      	beq.n	800da4e <TIM_Base_SetConfig+0x9a>
 800da36:	687b      	ldr	r3, [r7, #4]
 800da38:	4a28      	ldr	r2, [pc, #160]	; (800dadc <TIM_Base_SetConfig+0x128>)
 800da3a:	4293      	cmp	r3, r2
 800da3c:	d007      	beq.n	800da4e <TIM_Base_SetConfig+0x9a>
 800da3e:	687b      	ldr	r3, [r7, #4]
 800da40:	4a27      	ldr	r2, [pc, #156]	; (800dae0 <TIM_Base_SetConfig+0x12c>)
 800da42:	4293      	cmp	r3, r2
 800da44:	d003      	beq.n	800da4e <TIM_Base_SetConfig+0x9a>
 800da46:	687b      	ldr	r3, [r7, #4]
 800da48:	4a26      	ldr	r2, [pc, #152]	; (800dae4 <TIM_Base_SetConfig+0x130>)
 800da4a:	4293      	cmp	r3, r2
 800da4c:	d108      	bne.n	800da60 <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800da4e:	68fb      	ldr	r3, [r7, #12]
 800da50:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800da54:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800da56:	683b      	ldr	r3, [r7, #0]
 800da58:	68db      	ldr	r3, [r3, #12]
 800da5a:	68fa      	ldr	r2, [r7, #12]
 800da5c:	4313      	orrs	r3, r2
 800da5e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800da60:	68fb      	ldr	r3, [r7, #12]
 800da62:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800da66:	683b      	ldr	r3, [r7, #0]
 800da68:	695b      	ldr	r3, [r3, #20]
 800da6a:	4313      	orrs	r3, r2
 800da6c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800da6e:	687b      	ldr	r3, [r7, #4]
 800da70:	68fa      	ldr	r2, [r7, #12]
 800da72:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800da74:	683b      	ldr	r3, [r7, #0]
 800da76:	689a      	ldr	r2, [r3, #8]
 800da78:	687b      	ldr	r3, [r7, #4]
 800da7a:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800da7c:	683b      	ldr	r3, [r7, #0]
 800da7e:	681a      	ldr	r2, [r3, #0]
 800da80:	687b      	ldr	r3, [r7, #4]
 800da82:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800da84:	687b      	ldr	r3, [r7, #4]
 800da86:	4a10      	ldr	r2, [pc, #64]	; (800dac8 <TIM_Base_SetConfig+0x114>)
 800da88:	4293      	cmp	r3, r2
 800da8a:	d00f      	beq.n	800daac <TIM_Base_SetConfig+0xf8>
 800da8c:	687b      	ldr	r3, [r7, #4]
 800da8e:	4a12      	ldr	r2, [pc, #72]	; (800dad8 <TIM_Base_SetConfig+0x124>)
 800da90:	4293      	cmp	r3, r2
 800da92:	d00b      	beq.n	800daac <TIM_Base_SetConfig+0xf8>
 800da94:	687b      	ldr	r3, [r7, #4]
 800da96:	4a11      	ldr	r2, [pc, #68]	; (800dadc <TIM_Base_SetConfig+0x128>)
 800da98:	4293      	cmp	r3, r2
 800da9a:	d007      	beq.n	800daac <TIM_Base_SetConfig+0xf8>
 800da9c:	687b      	ldr	r3, [r7, #4]
 800da9e:	4a10      	ldr	r2, [pc, #64]	; (800dae0 <TIM_Base_SetConfig+0x12c>)
 800daa0:	4293      	cmp	r3, r2
 800daa2:	d003      	beq.n	800daac <TIM_Base_SetConfig+0xf8>
 800daa4:	687b      	ldr	r3, [r7, #4]
 800daa6:	4a0f      	ldr	r2, [pc, #60]	; (800dae4 <TIM_Base_SetConfig+0x130>)
 800daa8:	4293      	cmp	r3, r2
 800daaa:	d103      	bne.n	800dab4 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800daac:	683b      	ldr	r3, [r7, #0]
 800daae:	691a      	ldr	r2, [r3, #16]
 800dab0:	687b      	ldr	r3, [r7, #4]
 800dab2:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800dab4:	687b      	ldr	r3, [r7, #4]
 800dab6:	2201      	movs	r2, #1
 800dab8:	615a      	str	r2, [r3, #20]
}
 800daba:	bf00      	nop
 800dabc:	3714      	adds	r7, #20
 800dabe:	46bd      	mov	sp, r7
 800dac0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dac4:	4770      	bx	lr
 800dac6:	bf00      	nop
 800dac8:	40010000 	.word	0x40010000
 800dacc:	40000400 	.word	0x40000400
 800dad0:	40000800 	.word	0x40000800
 800dad4:	40000c00 	.word	0x40000c00
 800dad8:	40010400 	.word	0x40010400
 800dadc:	40014000 	.word	0x40014000
 800dae0:	40014400 	.word	0x40014400
 800dae4:	40014800 	.word	0x40014800

0800dae8 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800dae8:	b480      	push	{r7}
 800daea:	b087      	sub	sp, #28
 800daec:	af00      	add	r7, sp, #0
 800daee:	60f8      	str	r0, [r7, #12]
 800daf0:	60b9      	str	r1, [r7, #8]
 800daf2:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 800daf4:	68fb      	ldr	r3, [r7, #12]
 800daf6:	6a1b      	ldr	r3, [r3, #32]
 800daf8:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800dafa:	68fb      	ldr	r3, [r7, #12]
 800dafc:	6a1b      	ldr	r3, [r3, #32]
 800dafe:	f023 0201 	bic.w	r2, r3, #1
 800db02:	68fb      	ldr	r3, [r7, #12]
 800db04:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800db06:	68fb      	ldr	r3, [r7, #12]
 800db08:	699b      	ldr	r3, [r3, #24]
 800db0a:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800db0c:	693b      	ldr	r3, [r7, #16]
 800db0e:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800db12:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800db14:	687b      	ldr	r3, [r7, #4]
 800db16:	011b      	lsls	r3, r3, #4
 800db18:	693a      	ldr	r2, [r7, #16]
 800db1a:	4313      	orrs	r3, r2
 800db1c:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800db1e:	697b      	ldr	r3, [r7, #20]
 800db20:	f023 030a 	bic.w	r3, r3, #10
 800db24:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800db26:	697a      	ldr	r2, [r7, #20]
 800db28:	68bb      	ldr	r3, [r7, #8]
 800db2a:	4313      	orrs	r3, r2
 800db2c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800db2e:	68fb      	ldr	r3, [r7, #12]
 800db30:	693a      	ldr	r2, [r7, #16]
 800db32:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800db34:	68fb      	ldr	r3, [r7, #12]
 800db36:	697a      	ldr	r2, [r7, #20]
 800db38:	621a      	str	r2, [r3, #32]
}
 800db3a:	bf00      	nop
 800db3c:	371c      	adds	r7, #28
 800db3e:	46bd      	mov	sp, r7
 800db40:	f85d 7b04 	ldr.w	r7, [sp], #4
 800db44:	4770      	bx	lr

0800db46 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800db46:	b480      	push	{r7}
 800db48:	b087      	sub	sp, #28
 800db4a:	af00      	add	r7, sp, #0
 800db4c:	60f8      	str	r0, [r7, #12]
 800db4e:	60b9      	str	r1, [r7, #8]
 800db50:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800db52:	68fb      	ldr	r3, [r7, #12]
 800db54:	6a1b      	ldr	r3, [r3, #32]
 800db56:	f023 0210 	bic.w	r2, r3, #16
 800db5a:	68fb      	ldr	r3, [r7, #12]
 800db5c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800db5e:	68fb      	ldr	r3, [r7, #12]
 800db60:	699b      	ldr	r3, [r3, #24]
 800db62:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 800db64:	68fb      	ldr	r3, [r7, #12]
 800db66:	6a1b      	ldr	r3, [r3, #32]
 800db68:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800db6a:	697b      	ldr	r3, [r7, #20]
 800db6c:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800db70:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800db72:	687b      	ldr	r3, [r7, #4]
 800db74:	031b      	lsls	r3, r3, #12
 800db76:	697a      	ldr	r2, [r7, #20]
 800db78:	4313      	orrs	r3, r2
 800db7a:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800db7c:	693b      	ldr	r3, [r7, #16]
 800db7e:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 800db82:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 800db84:	68bb      	ldr	r3, [r7, #8]
 800db86:	011b      	lsls	r3, r3, #4
 800db88:	693a      	ldr	r2, [r7, #16]
 800db8a:	4313      	orrs	r3, r2
 800db8c:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800db8e:	68fb      	ldr	r3, [r7, #12]
 800db90:	697a      	ldr	r2, [r7, #20]
 800db92:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800db94:	68fb      	ldr	r3, [r7, #12]
 800db96:	693a      	ldr	r2, [r7, #16]
 800db98:	621a      	str	r2, [r3, #32]
}
 800db9a:	bf00      	nop
 800db9c:	371c      	adds	r7, #28
 800db9e:	46bd      	mov	sp, r7
 800dba0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dba4:	4770      	bx	lr
	...

0800dba8 <TIM_ITRx_SetConfig>:
  *       (*)  Value not defined in all devices.
  *
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800dba8:	b480      	push	{r7}
 800dbaa:	b085      	sub	sp, #20
 800dbac:	af00      	add	r7, sp, #0
 800dbae:	6078      	str	r0, [r7, #4]
 800dbb0:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 800dbb2:	687b      	ldr	r3, [r7, #4]
 800dbb4:	689b      	ldr	r3, [r3, #8]
 800dbb6:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800dbb8:	68fa      	ldr	r2, [r7, #12]
 800dbba:	4b09      	ldr	r3, [pc, #36]	; (800dbe0 <TIM_ITRx_SetConfig+0x38>)
 800dbbc:	4013      	ands	r3, r2
 800dbbe:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800dbc0:	683a      	ldr	r2, [r7, #0]
 800dbc2:	68fb      	ldr	r3, [r7, #12]
 800dbc4:	4313      	orrs	r3, r2
 800dbc6:	f043 0307 	orr.w	r3, r3, #7
 800dbca:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800dbcc:	687b      	ldr	r3, [r7, #4]
 800dbce:	68fa      	ldr	r2, [r7, #12]
 800dbd0:	609a      	str	r2, [r3, #8]
}
 800dbd2:	bf00      	nop
 800dbd4:	3714      	adds	r7, #20
 800dbd6:	46bd      	mov	sp, r7
 800dbd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dbdc:	4770      	bx	lr
 800dbde:	bf00      	nop
 800dbe0:	ffcfff8f 	.word	0xffcfff8f

0800dbe4 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800dbe4:	b480      	push	{r7}
 800dbe6:	b087      	sub	sp, #28
 800dbe8:	af00      	add	r7, sp, #0
 800dbea:	60f8      	str	r0, [r7, #12]
 800dbec:	60b9      	str	r1, [r7, #8]
 800dbee:	607a      	str	r2, [r7, #4]
 800dbf0:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800dbf2:	68fb      	ldr	r3, [r7, #12]
 800dbf4:	689b      	ldr	r3, [r3, #8]
 800dbf6:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800dbf8:	697b      	ldr	r3, [r7, #20]
 800dbfa:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800dbfe:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800dc00:	683b      	ldr	r3, [r7, #0]
 800dc02:	021a      	lsls	r2, r3, #8
 800dc04:	687b      	ldr	r3, [r7, #4]
 800dc06:	431a      	orrs	r2, r3
 800dc08:	68bb      	ldr	r3, [r7, #8]
 800dc0a:	4313      	orrs	r3, r2
 800dc0c:	697a      	ldr	r2, [r7, #20]
 800dc0e:	4313      	orrs	r3, r2
 800dc10:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800dc12:	68fb      	ldr	r3, [r7, #12]
 800dc14:	697a      	ldr	r2, [r7, #20]
 800dc16:	609a      	str	r2, [r3, #8]
}
 800dc18:	bf00      	nop
 800dc1a:	371c      	adds	r7, #28
 800dc1c:	46bd      	mov	sp, r7
 800dc1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dc22:	4770      	bx	lr

0800dc24 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 800dc24:	b480      	push	{r7}
 800dc26:	b085      	sub	sp, #20
 800dc28:	af00      	add	r7, sp, #0
 800dc2a:	6078      	str	r0, [r7, #4]
 800dc2c:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800dc2e:	687b      	ldr	r3, [r7, #4]
 800dc30:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800dc34:	2b01      	cmp	r3, #1
 800dc36:	d101      	bne.n	800dc3c <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800dc38:	2302      	movs	r3, #2
 800dc3a:	e06d      	b.n	800dd18 <HAL_TIMEx_MasterConfigSynchronization+0xf4>
 800dc3c:	687b      	ldr	r3, [r7, #4]
 800dc3e:	2201      	movs	r2, #1
 800dc40:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800dc44:	687b      	ldr	r3, [r7, #4]
 800dc46:	2202      	movs	r2, #2
 800dc48:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800dc4c:	687b      	ldr	r3, [r7, #4]
 800dc4e:	681b      	ldr	r3, [r3, #0]
 800dc50:	685b      	ldr	r3, [r3, #4]
 800dc52:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800dc54:	687b      	ldr	r3, [r7, #4]
 800dc56:	681b      	ldr	r3, [r3, #0]
 800dc58:	689b      	ldr	r3, [r3, #8]
 800dc5a:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 800dc5c:	687b      	ldr	r3, [r7, #4]
 800dc5e:	681b      	ldr	r3, [r3, #0]
 800dc60:	4a30      	ldr	r2, [pc, #192]	; (800dd24 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 800dc62:	4293      	cmp	r3, r2
 800dc64:	d004      	beq.n	800dc70 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 800dc66:	687b      	ldr	r3, [r7, #4]
 800dc68:	681b      	ldr	r3, [r3, #0]
 800dc6a:	4a2f      	ldr	r2, [pc, #188]	; (800dd28 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 800dc6c:	4293      	cmp	r3, r2
 800dc6e:	d108      	bne.n	800dc82 <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 800dc70:	68fb      	ldr	r3, [r7, #12]
 800dc72:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 800dc76:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 800dc78:	683b      	ldr	r3, [r7, #0]
 800dc7a:	685b      	ldr	r3, [r3, #4]
 800dc7c:	68fa      	ldr	r2, [r7, #12]
 800dc7e:	4313      	orrs	r3, r2
 800dc80:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800dc82:	68fb      	ldr	r3, [r7, #12]
 800dc84:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800dc88:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800dc8a:	683b      	ldr	r3, [r7, #0]
 800dc8c:	681b      	ldr	r3, [r3, #0]
 800dc8e:	68fa      	ldr	r2, [r7, #12]
 800dc90:	4313      	orrs	r3, r2
 800dc92:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800dc94:	687b      	ldr	r3, [r7, #4]
 800dc96:	681b      	ldr	r3, [r3, #0]
 800dc98:	68fa      	ldr	r2, [r7, #12]
 800dc9a:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800dc9c:	687b      	ldr	r3, [r7, #4]
 800dc9e:	681b      	ldr	r3, [r3, #0]
 800dca0:	4a20      	ldr	r2, [pc, #128]	; (800dd24 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 800dca2:	4293      	cmp	r3, r2
 800dca4:	d022      	beq.n	800dcec <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800dca6:	687b      	ldr	r3, [r7, #4]
 800dca8:	681b      	ldr	r3, [r3, #0]
 800dcaa:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800dcae:	d01d      	beq.n	800dcec <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800dcb0:	687b      	ldr	r3, [r7, #4]
 800dcb2:	681b      	ldr	r3, [r3, #0]
 800dcb4:	4a1d      	ldr	r2, [pc, #116]	; (800dd2c <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 800dcb6:	4293      	cmp	r3, r2
 800dcb8:	d018      	beq.n	800dcec <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800dcba:	687b      	ldr	r3, [r7, #4]
 800dcbc:	681b      	ldr	r3, [r3, #0]
 800dcbe:	4a1c      	ldr	r2, [pc, #112]	; (800dd30 <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 800dcc0:	4293      	cmp	r3, r2
 800dcc2:	d013      	beq.n	800dcec <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800dcc4:	687b      	ldr	r3, [r7, #4]
 800dcc6:	681b      	ldr	r3, [r3, #0]
 800dcc8:	4a1a      	ldr	r2, [pc, #104]	; (800dd34 <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 800dcca:	4293      	cmp	r3, r2
 800dccc:	d00e      	beq.n	800dcec <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800dcce:	687b      	ldr	r3, [r7, #4]
 800dcd0:	681b      	ldr	r3, [r3, #0]
 800dcd2:	4a15      	ldr	r2, [pc, #84]	; (800dd28 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 800dcd4:	4293      	cmp	r3, r2
 800dcd6:	d009      	beq.n	800dcec <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800dcd8:	687b      	ldr	r3, [r7, #4]
 800dcda:	681b      	ldr	r3, [r3, #0]
 800dcdc:	4a16      	ldr	r2, [pc, #88]	; (800dd38 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 800dcde:	4293      	cmp	r3, r2
 800dce0:	d004      	beq.n	800dcec <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800dce2:	687b      	ldr	r3, [r7, #4]
 800dce4:	681b      	ldr	r3, [r3, #0]
 800dce6:	4a15      	ldr	r2, [pc, #84]	; (800dd3c <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 800dce8:	4293      	cmp	r3, r2
 800dcea:	d10c      	bne.n	800dd06 <HAL_TIMEx_MasterConfigSynchronization+0xe2>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800dcec:	68bb      	ldr	r3, [r7, #8]
 800dcee:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800dcf2:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800dcf4:	683b      	ldr	r3, [r7, #0]
 800dcf6:	689b      	ldr	r3, [r3, #8]
 800dcf8:	68ba      	ldr	r2, [r7, #8]
 800dcfa:	4313      	orrs	r3, r2
 800dcfc:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800dcfe:	687b      	ldr	r3, [r7, #4]
 800dd00:	681b      	ldr	r3, [r3, #0]
 800dd02:	68ba      	ldr	r2, [r7, #8]
 800dd04:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800dd06:	687b      	ldr	r3, [r7, #4]
 800dd08:	2201      	movs	r2, #1
 800dd0a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800dd0e:	687b      	ldr	r3, [r7, #4]
 800dd10:	2200      	movs	r2, #0
 800dd12:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800dd16:	2300      	movs	r3, #0
}
 800dd18:	4618      	mov	r0, r3
 800dd1a:	3714      	adds	r7, #20
 800dd1c:	46bd      	mov	sp, r7
 800dd1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dd22:	4770      	bx	lr
 800dd24:	40010000 	.word	0x40010000
 800dd28:	40010400 	.word	0x40010400
 800dd2c:	40000400 	.word	0x40000400
 800dd30:	40000800 	.word	0x40000800
 800dd34:	40000c00 	.word	0x40000c00
 800dd38:	40001800 	.word	0x40001800
 800dd3c:	40014000 	.word	0x40014000

0800dd40 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800dd40:	b580      	push	{r7, lr}
 800dd42:	b082      	sub	sp, #8
 800dd44:	af00      	add	r7, sp, #0
 800dd46:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800dd48:	687b      	ldr	r3, [r7, #4]
 800dd4a:	2b00      	cmp	r3, #0
 800dd4c:	d101      	bne.n	800dd52 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800dd4e:	2301      	movs	r3, #1
 800dd50:	e042      	b.n	800ddd8 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800dd52:	687b      	ldr	r3, [r7, #4]
 800dd54:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800dd58:	2b00      	cmp	r3, #0
 800dd5a:	d106      	bne.n	800dd6a <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800dd5c:	687b      	ldr	r3, [r7, #4]
 800dd5e:	2200      	movs	r2, #0
 800dd60:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800dd64:	6878      	ldr	r0, [r7, #4]
 800dd66:	f7f5 fcf3 	bl	8003750 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800dd6a:	687b      	ldr	r3, [r7, #4]
 800dd6c:	2224      	movs	r2, #36	; 0x24
 800dd6e:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  __HAL_UART_DISABLE(huart);
 800dd72:	687b      	ldr	r3, [r7, #4]
 800dd74:	681b      	ldr	r3, [r3, #0]
 800dd76:	681a      	ldr	r2, [r3, #0]
 800dd78:	687b      	ldr	r3, [r7, #4]
 800dd7a:	681b      	ldr	r3, [r3, #0]
 800dd7c:	f022 0201 	bic.w	r2, r2, #1
 800dd80:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800dd82:	6878      	ldr	r0, [r7, #4]
 800dd84:	f000 f8ba 	bl	800defc <UART_SetConfig>
 800dd88:	4603      	mov	r3, r0
 800dd8a:	2b01      	cmp	r3, #1
 800dd8c:	d101      	bne.n	800dd92 <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 800dd8e:	2301      	movs	r3, #1
 800dd90:	e022      	b.n	800ddd8 <HAL_UART_Init+0x98>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800dd92:	687b      	ldr	r3, [r7, #4]
 800dd94:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800dd96:	2b00      	cmp	r3, #0
 800dd98:	d002      	beq.n	800dda0 <HAL_UART_Init+0x60>
  {
    UART_AdvFeatureConfig(huart);
 800dd9a:	6878      	ldr	r0, [r7, #4]
 800dd9c:	f000 fe16 	bl	800e9cc <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800dda0:	687b      	ldr	r3, [r7, #4]
 800dda2:	681b      	ldr	r3, [r3, #0]
 800dda4:	685a      	ldr	r2, [r3, #4]
 800dda6:	687b      	ldr	r3, [r7, #4]
 800dda8:	681b      	ldr	r3, [r3, #0]
 800ddaa:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800ddae:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800ddb0:	687b      	ldr	r3, [r7, #4]
 800ddb2:	681b      	ldr	r3, [r3, #0]
 800ddb4:	689a      	ldr	r2, [r3, #8]
 800ddb6:	687b      	ldr	r3, [r7, #4]
 800ddb8:	681b      	ldr	r3, [r3, #0]
 800ddba:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800ddbe:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 800ddc0:	687b      	ldr	r3, [r7, #4]
 800ddc2:	681b      	ldr	r3, [r3, #0]
 800ddc4:	681a      	ldr	r2, [r3, #0]
 800ddc6:	687b      	ldr	r3, [r7, #4]
 800ddc8:	681b      	ldr	r3, [r3, #0]
 800ddca:	f042 0201 	orr.w	r2, r2, #1
 800ddce:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 800ddd0:	6878      	ldr	r0, [r7, #4]
 800ddd2:	f000 fe9d 	bl	800eb10 <UART_CheckIdleState>
 800ddd6:	4603      	mov	r3, r0
}
 800ddd8:	4618      	mov	r0, r3
 800ddda:	3708      	adds	r7, #8
 800dddc:	46bd      	mov	sp, r7
 800ddde:	bd80      	pop	{r7, pc}

0800dde0 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800dde0:	b580      	push	{r7, lr}
 800dde2:	b08a      	sub	sp, #40	; 0x28
 800dde4:	af02      	add	r7, sp, #8
 800dde6:	60f8      	str	r0, [r7, #12]
 800dde8:	60b9      	str	r1, [r7, #8]
 800ddea:	603b      	str	r3, [r7, #0]
 800ddec:	4613      	mov	r3, r2
 800ddee:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800ddf0:	68fb      	ldr	r3, [r7, #12]
 800ddf2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800ddf6:	2b20      	cmp	r3, #32
 800ddf8:	d17b      	bne.n	800def2 <HAL_UART_Transmit+0x112>
  {
    if ((pData == NULL) || (Size == 0U))
 800ddfa:	68bb      	ldr	r3, [r7, #8]
 800ddfc:	2b00      	cmp	r3, #0
 800ddfe:	d002      	beq.n	800de06 <HAL_UART_Transmit+0x26>
 800de00:	88fb      	ldrh	r3, [r7, #6]
 800de02:	2b00      	cmp	r3, #0
 800de04:	d101      	bne.n	800de0a <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 800de06:	2301      	movs	r3, #1
 800de08:	e074      	b.n	800def4 <HAL_UART_Transmit+0x114>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800de0a:	68fb      	ldr	r3, [r7, #12]
 800de0c:	2200      	movs	r2, #0
 800de0e:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800de12:	68fb      	ldr	r3, [r7, #12]
 800de14:	2221      	movs	r2, #33	; 0x21
 800de16:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800de1a:	f7f6 f979 	bl	8004110 <HAL_GetTick>
 800de1e:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 800de20:	68fb      	ldr	r3, [r7, #12]
 800de22:	88fa      	ldrh	r2, [r7, #6]
 800de24:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
    huart->TxXferCount = Size;
 800de28:	68fb      	ldr	r3, [r7, #12]
 800de2a:	88fa      	ldrh	r2, [r7, #6]
 800de2c:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800de30:	68fb      	ldr	r3, [r7, #12]
 800de32:	689b      	ldr	r3, [r3, #8]
 800de34:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800de38:	d108      	bne.n	800de4c <HAL_UART_Transmit+0x6c>
 800de3a:	68fb      	ldr	r3, [r7, #12]
 800de3c:	691b      	ldr	r3, [r3, #16]
 800de3e:	2b00      	cmp	r3, #0
 800de40:	d104      	bne.n	800de4c <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 800de42:	2300      	movs	r3, #0
 800de44:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 800de46:	68bb      	ldr	r3, [r7, #8]
 800de48:	61bb      	str	r3, [r7, #24]
 800de4a:	e003      	b.n	800de54 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 800de4c:	68bb      	ldr	r3, [r7, #8]
 800de4e:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800de50:	2300      	movs	r3, #0
 800de52:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 800de54:	e030      	b.n	800deb8 <HAL_UART_Transmit+0xd8>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800de56:	683b      	ldr	r3, [r7, #0]
 800de58:	9300      	str	r3, [sp, #0]
 800de5a:	697b      	ldr	r3, [r7, #20]
 800de5c:	2200      	movs	r2, #0
 800de5e:	2180      	movs	r1, #128	; 0x80
 800de60:	68f8      	ldr	r0, [r7, #12]
 800de62:	f000 feff 	bl	800ec64 <UART_WaitOnFlagUntilTimeout>
 800de66:	4603      	mov	r3, r0
 800de68:	2b00      	cmp	r3, #0
 800de6a:	d005      	beq.n	800de78 <HAL_UART_Transmit+0x98>
      {

        huart->gState = HAL_UART_STATE_READY;
 800de6c:	68fb      	ldr	r3, [r7, #12]
 800de6e:	2220      	movs	r2, #32
 800de70:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

        return HAL_TIMEOUT;
 800de74:	2303      	movs	r3, #3
 800de76:	e03d      	b.n	800def4 <HAL_UART_Transmit+0x114>
      }
      if (pdata8bits == NULL)
 800de78:	69fb      	ldr	r3, [r7, #28]
 800de7a:	2b00      	cmp	r3, #0
 800de7c:	d10b      	bne.n	800de96 <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 800de7e:	69bb      	ldr	r3, [r7, #24]
 800de80:	881b      	ldrh	r3, [r3, #0]
 800de82:	461a      	mov	r2, r3
 800de84:	68fb      	ldr	r3, [r7, #12]
 800de86:	681b      	ldr	r3, [r3, #0]
 800de88:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800de8c:	629a      	str	r2, [r3, #40]	; 0x28
        pdata16bits++;
 800de8e:	69bb      	ldr	r3, [r7, #24]
 800de90:	3302      	adds	r3, #2
 800de92:	61bb      	str	r3, [r7, #24]
 800de94:	e007      	b.n	800dea6 <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 800de96:	69fb      	ldr	r3, [r7, #28]
 800de98:	781a      	ldrb	r2, [r3, #0]
 800de9a:	68fb      	ldr	r3, [r7, #12]
 800de9c:	681b      	ldr	r3, [r3, #0]
 800de9e:	629a      	str	r2, [r3, #40]	; 0x28
        pdata8bits++;
 800dea0:	69fb      	ldr	r3, [r7, #28]
 800dea2:	3301      	adds	r3, #1
 800dea4:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800dea6:	68fb      	ldr	r3, [r7, #12]
 800dea8:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 800deac:	b29b      	uxth	r3, r3
 800deae:	3b01      	subs	r3, #1
 800deb0:	b29a      	uxth	r2, r3
 800deb2:	68fb      	ldr	r3, [r7, #12]
 800deb4:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
    while (huart->TxXferCount > 0U)
 800deb8:	68fb      	ldr	r3, [r7, #12]
 800deba:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 800debe:	b29b      	uxth	r3, r3
 800dec0:	2b00      	cmp	r3, #0
 800dec2:	d1c8      	bne.n	800de56 <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800dec4:	683b      	ldr	r3, [r7, #0]
 800dec6:	9300      	str	r3, [sp, #0]
 800dec8:	697b      	ldr	r3, [r7, #20]
 800deca:	2200      	movs	r2, #0
 800decc:	2140      	movs	r1, #64	; 0x40
 800dece:	68f8      	ldr	r0, [r7, #12]
 800ded0:	f000 fec8 	bl	800ec64 <UART_WaitOnFlagUntilTimeout>
 800ded4:	4603      	mov	r3, r0
 800ded6:	2b00      	cmp	r3, #0
 800ded8:	d005      	beq.n	800dee6 <HAL_UART_Transmit+0x106>
    {
      huart->gState = HAL_UART_STATE_READY;
 800deda:	68fb      	ldr	r3, [r7, #12]
 800dedc:	2220      	movs	r2, #32
 800dede:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

      return HAL_TIMEOUT;
 800dee2:	2303      	movs	r3, #3
 800dee4:	e006      	b.n	800def4 <HAL_UART_Transmit+0x114>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800dee6:	68fb      	ldr	r3, [r7, #12]
 800dee8:	2220      	movs	r2, #32
 800deea:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

    return HAL_OK;
 800deee:	2300      	movs	r3, #0
 800def0:	e000      	b.n	800def4 <HAL_UART_Transmit+0x114>
  }
  else
  {
    return HAL_BUSY;
 800def2:	2302      	movs	r3, #2
  }
}
 800def4:	4618      	mov	r0, r3
 800def6:	3720      	adds	r7, #32
 800def8:	46bd      	mov	sp, r7
 800defa:	bd80      	pop	{r7, pc}

0800defc <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 800defc:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800df00:	b092      	sub	sp, #72	; 0x48
 800df02:	af00      	add	r7, sp, #0
 800df04:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 800df06:	2300      	movs	r3, #0
 800df08:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800df0c:	697b      	ldr	r3, [r7, #20]
 800df0e:	689a      	ldr	r2, [r3, #8]
 800df10:	697b      	ldr	r3, [r7, #20]
 800df12:	691b      	ldr	r3, [r3, #16]
 800df14:	431a      	orrs	r2, r3
 800df16:	697b      	ldr	r3, [r7, #20]
 800df18:	695b      	ldr	r3, [r3, #20]
 800df1a:	431a      	orrs	r2, r3
 800df1c:	697b      	ldr	r3, [r7, #20]
 800df1e:	69db      	ldr	r3, [r3, #28]
 800df20:	4313      	orrs	r3, r2
 800df22:	647b      	str	r3, [r7, #68]	; 0x44
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800df24:	697b      	ldr	r3, [r7, #20]
 800df26:	681b      	ldr	r3, [r3, #0]
 800df28:	681a      	ldr	r2, [r3, #0]
 800df2a:	4bbe      	ldr	r3, [pc, #760]	; (800e224 <UART_SetConfig+0x328>)
 800df2c:	4013      	ands	r3, r2
 800df2e:	697a      	ldr	r2, [r7, #20]
 800df30:	6812      	ldr	r2, [r2, #0]
 800df32:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800df34:	430b      	orrs	r3, r1
 800df36:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800df38:	697b      	ldr	r3, [r7, #20]
 800df3a:	681b      	ldr	r3, [r3, #0]
 800df3c:	685b      	ldr	r3, [r3, #4]
 800df3e:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800df42:	697b      	ldr	r3, [r7, #20]
 800df44:	68da      	ldr	r2, [r3, #12]
 800df46:	697b      	ldr	r3, [r7, #20]
 800df48:	681b      	ldr	r3, [r3, #0]
 800df4a:	430a      	orrs	r2, r1
 800df4c:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800df4e:	697b      	ldr	r3, [r7, #20]
 800df50:	699b      	ldr	r3, [r3, #24]
 800df52:	647b      	str	r3, [r7, #68]	; 0x44

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 800df54:	697b      	ldr	r3, [r7, #20]
 800df56:	681b      	ldr	r3, [r3, #0]
 800df58:	4ab3      	ldr	r2, [pc, #716]	; (800e228 <UART_SetConfig+0x32c>)
 800df5a:	4293      	cmp	r3, r2
 800df5c:	d004      	beq.n	800df68 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 800df5e:	697b      	ldr	r3, [r7, #20]
 800df60:	6a1b      	ldr	r3, [r3, #32]
 800df62:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800df64:	4313      	orrs	r3, r2
 800df66:	647b      	str	r3, [r7, #68]	; 0x44
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800df68:	697b      	ldr	r3, [r7, #20]
 800df6a:	681b      	ldr	r3, [r3, #0]
 800df6c:	689a      	ldr	r2, [r3, #8]
 800df6e:	4baf      	ldr	r3, [pc, #700]	; (800e22c <UART_SetConfig+0x330>)
 800df70:	4013      	ands	r3, r2
 800df72:	697a      	ldr	r2, [r7, #20]
 800df74:	6812      	ldr	r2, [r2, #0]
 800df76:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800df78:	430b      	orrs	r3, r1
 800df7a:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 800df7c:	697b      	ldr	r3, [r7, #20]
 800df7e:	681b      	ldr	r3, [r3, #0]
 800df80:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800df82:	f023 010f 	bic.w	r1, r3, #15
 800df86:	697b      	ldr	r3, [r7, #20]
 800df88:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800df8a:	697b      	ldr	r3, [r7, #20]
 800df8c:	681b      	ldr	r3, [r3, #0]
 800df8e:	430a      	orrs	r2, r1
 800df90:	62da      	str	r2, [r3, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800df92:	697b      	ldr	r3, [r7, #20]
 800df94:	681b      	ldr	r3, [r3, #0]
 800df96:	4aa6      	ldr	r2, [pc, #664]	; (800e230 <UART_SetConfig+0x334>)
 800df98:	4293      	cmp	r3, r2
 800df9a:	d177      	bne.n	800e08c <UART_SetConfig+0x190>
 800df9c:	4ba5      	ldr	r3, [pc, #660]	; (800e234 <UART_SetConfig+0x338>)
 800df9e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800dfa0:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800dfa4:	2b28      	cmp	r3, #40	; 0x28
 800dfa6:	d86d      	bhi.n	800e084 <UART_SetConfig+0x188>
 800dfa8:	a201      	add	r2, pc, #4	; (adr r2, 800dfb0 <UART_SetConfig+0xb4>)
 800dfaa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800dfae:	bf00      	nop
 800dfb0:	0800e055 	.word	0x0800e055
 800dfb4:	0800e085 	.word	0x0800e085
 800dfb8:	0800e085 	.word	0x0800e085
 800dfbc:	0800e085 	.word	0x0800e085
 800dfc0:	0800e085 	.word	0x0800e085
 800dfc4:	0800e085 	.word	0x0800e085
 800dfc8:	0800e085 	.word	0x0800e085
 800dfcc:	0800e085 	.word	0x0800e085
 800dfd0:	0800e05d 	.word	0x0800e05d
 800dfd4:	0800e085 	.word	0x0800e085
 800dfd8:	0800e085 	.word	0x0800e085
 800dfdc:	0800e085 	.word	0x0800e085
 800dfe0:	0800e085 	.word	0x0800e085
 800dfe4:	0800e085 	.word	0x0800e085
 800dfe8:	0800e085 	.word	0x0800e085
 800dfec:	0800e085 	.word	0x0800e085
 800dff0:	0800e065 	.word	0x0800e065
 800dff4:	0800e085 	.word	0x0800e085
 800dff8:	0800e085 	.word	0x0800e085
 800dffc:	0800e085 	.word	0x0800e085
 800e000:	0800e085 	.word	0x0800e085
 800e004:	0800e085 	.word	0x0800e085
 800e008:	0800e085 	.word	0x0800e085
 800e00c:	0800e085 	.word	0x0800e085
 800e010:	0800e06d 	.word	0x0800e06d
 800e014:	0800e085 	.word	0x0800e085
 800e018:	0800e085 	.word	0x0800e085
 800e01c:	0800e085 	.word	0x0800e085
 800e020:	0800e085 	.word	0x0800e085
 800e024:	0800e085 	.word	0x0800e085
 800e028:	0800e085 	.word	0x0800e085
 800e02c:	0800e085 	.word	0x0800e085
 800e030:	0800e075 	.word	0x0800e075
 800e034:	0800e085 	.word	0x0800e085
 800e038:	0800e085 	.word	0x0800e085
 800e03c:	0800e085 	.word	0x0800e085
 800e040:	0800e085 	.word	0x0800e085
 800e044:	0800e085 	.word	0x0800e085
 800e048:	0800e085 	.word	0x0800e085
 800e04c:	0800e085 	.word	0x0800e085
 800e050:	0800e07d 	.word	0x0800e07d
 800e054:	2301      	movs	r3, #1
 800e056:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800e05a:	e222      	b.n	800e4a2 <UART_SetConfig+0x5a6>
 800e05c:	2304      	movs	r3, #4
 800e05e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800e062:	e21e      	b.n	800e4a2 <UART_SetConfig+0x5a6>
 800e064:	2308      	movs	r3, #8
 800e066:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800e06a:	e21a      	b.n	800e4a2 <UART_SetConfig+0x5a6>
 800e06c:	2310      	movs	r3, #16
 800e06e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800e072:	e216      	b.n	800e4a2 <UART_SetConfig+0x5a6>
 800e074:	2320      	movs	r3, #32
 800e076:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800e07a:	e212      	b.n	800e4a2 <UART_SetConfig+0x5a6>
 800e07c:	2340      	movs	r3, #64	; 0x40
 800e07e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800e082:	e20e      	b.n	800e4a2 <UART_SetConfig+0x5a6>
 800e084:	2380      	movs	r3, #128	; 0x80
 800e086:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800e08a:	e20a      	b.n	800e4a2 <UART_SetConfig+0x5a6>
 800e08c:	697b      	ldr	r3, [r7, #20]
 800e08e:	681b      	ldr	r3, [r3, #0]
 800e090:	4a69      	ldr	r2, [pc, #420]	; (800e238 <UART_SetConfig+0x33c>)
 800e092:	4293      	cmp	r3, r2
 800e094:	d130      	bne.n	800e0f8 <UART_SetConfig+0x1fc>
 800e096:	4b67      	ldr	r3, [pc, #412]	; (800e234 <UART_SetConfig+0x338>)
 800e098:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800e09a:	f003 0307 	and.w	r3, r3, #7
 800e09e:	2b05      	cmp	r3, #5
 800e0a0:	d826      	bhi.n	800e0f0 <UART_SetConfig+0x1f4>
 800e0a2:	a201      	add	r2, pc, #4	; (adr r2, 800e0a8 <UART_SetConfig+0x1ac>)
 800e0a4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800e0a8:	0800e0c1 	.word	0x0800e0c1
 800e0ac:	0800e0c9 	.word	0x0800e0c9
 800e0b0:	0800e0d1 	.word	0x0800e0d1
 800e0b4:	0800e0d9 	.word	0x0800e0d9
 800e0b8:	0800e0e1 	.word	0x0800e0e1
 800e0bc:	0800e0e9 	.word	0x0800e0e9
 800e0c0:	2300      	movs	r3, #0
 800e0c2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800e0c6:	e1ec      	b.n	800e4a2 <UART_SetConfig+0x5a6>
 800e0c8:	2304      	movs	r3, #4
 800e0ca:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800e0ce:	e1e8      	b.n	800e4a2 <UART_SetConfig+0x5a6>
 800e0d0:	2308      	movs	r3, #8
 800e0d2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800e0d6:	e1e4      	b.n	800e4a2 <UART_SetConfig+0x5a6>
 800e0d8:	2310      	movs	r3, #16
 800e0da:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800e0de:	e1e0      	b.n	800e4a2 <UART_SetConfig+0x5a6>
 800e0e0:	2320      	movs	r3, #32
 800e0e2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800e0e6:	e1dc      	b.n	800e4a2 <UART_SetConfig+0x5a6>
 800e0e8:	2340      	movs	r3, #64	; 0x40
 800e0ea:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800e0ee:	e1d8      	b.n	800e4a2 <UART_SetConfig+0x5a6>
 800e0f0:	2380      	movs	r3, #128	; 0x80
 800e0f2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800e0f6:	e1d4      	b.n	800e4a2 <UART_SetConfig+0x5a6>
 800e0f8:	697b      	ldr	r3, [r7, #20]
 800e0fa:	681b      	ldr	r3, [r3, #0]
 800e0fc:	4a4f      	ldr	r2, [pc, #316]	; (800e23c <UART_SetConfig+0x340>)
 800e0fe:	4293      	cmp	r3, r2
 800e100:	d130      	bne.n	800e164 <UART_SetConfig+0x268>
 800e102:	4b4c      	ldr	r3, [pc, #304]	; (800e234 <UART_SetConfig+0x338>)
 800e104:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800e106:	f003 0307 	and.w	r3, r3, #7
 800e10a:	2b05      	cmp	r3, #5
 800e10c:	d826      	bhi.n	800e15c <UART_SetConfig+0x260>
 800e10e:	a201      	add	r2, pc, #4	; (adr r2, 800e114 <UART_SetConfig+0x218>)
 800e110:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800e114:	0800e12d 	.word	0x0800e12d
 800e118:	0800e135 	.word	0x0800e135
 800e11c:	0800e13d 	.word	0x0800e13d
 800e120:	0800e145 	.word	0x0800e145
 800e124:	0800e14d 	.word	0x0800e14d
 800e128:	0800e155 	.word	0x0800e155
 800e12c:	2300      	movs	r3, #0
 800e12e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800e132:	e1b6      	b.n	800e4a2 <UART_SetConfig+0x5a6>
 800e134:	2304      	movs	r3, #4
 800e136:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800e13a:	e1b2      	b.n	800e4a2 <UART_SetConfig+0x5a6>
 800e13c:	2308      	movs	r3, #8
 800e13e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800e142:	e1ae      	b.n	800e4a2 <UART_SetConfig+0x5a6>
 800e144:	2310      	movs	r3, #16
 800e146:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800e14a:	e1aa      	b.n	800e4a2 <UART_SetConfig+0x5a6>
 800e14c:	2320      	movs	r3, #32
 800e14e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800e152:	e1a6      	b.n	800e4a2 <UART_SetConfig+0x5a6>
 800e154:	2340      	movs	r3, #64	; 0x40
 800e156:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800e15a:	e1a2      	b.n	800e4a2 <UART_SetConfig+0x5a6>
 800e15c:	2380      	movs	r3, #128	; 0x80
 800e15e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800e162:	e19e      	b.n	800e4a2 <UART_SetConfig+0x5a6>
 800e164:	697b      	ldr	r3, [r7, #20]
 800e166:	681b      	ldr	r3, [r3, #0]
 800e168:	4a35      	ldr	r2, [pc, #212]	; (800e240 <UART_SetConfig+0x344>)
 800e16a:	4293      	cmp	r3, r2
 800e16c:	d130      	bne.n	800e1d0 <UART_SetConfig+0x2d4>
 800e16e:	4b31      	ldr	r3, [pc, #196]	; (800e234 <UART_SetConfig+0x338>)
 800e170:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800e172:	f003 0307 	and.w	r3, r3, #7
 800e176:	2b05      	cmp	r3, #5
 800e178:	d826      	bhi.n	800e1c8 <UART_SetConfig+0x2cc>
 800e17a:	a201      	add	r2, pc, #4	; (adr r2, 800e180 <UART_SetConfig+0x284>)
 800e17c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800e180:	0800e199 	.word	0x0800e199
 800e184:	0800e1a1 	.word	0x0800e1a1
 800e188:	0800e1a9 	.word	0x0800e1a9
 800e18c:	0800e1b1 	.word	0x0800e1b1
 800e190:	0800e1b9 	.word	0x0800e1b9
 800e194:	0800e1c1 	.word	0x0800e1c1
 800e198:	2300      	movs	r3, #0
 800e19a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800e19e:	e180      	b.n	800e4a2 <UART_SetConfig+0x5a6>
 800e1a0:	2304      	movs	r3, #4
 800e1a2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800e1a6:	e17c      	b.n	800e4a2 <UART_SetConfig+0x5a6>
 800e1a8:	2308      	movs	r3, #8
 800e1aa:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800e1ae:	e178      	b.n	800e4a2 <UART_SetConfig+0x5a6>
 800e1b0:	2310      	movs	r3, #16
 800e1b2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800e1b6:	e174      	b.n	800e4a2 <UART_SetConfig+0x5a6>
 800e1b8:	2320      	movs	r3, #32
 800e1ba:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800e1be:	e170      	b.n	800e4a2 <UART_SetConfig+0x5a6>
 800e1c0:	2340      	movs	r3, #64	; 0x40
 800e1c2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800e1c6:	e16c      	b.n	800e4a2 <UART_SetConfig+0x5a6>
 800e1c8:	2380      	movs	r3, #128	; 0x80
 800e1ca:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800e1ce:	e168      	b.n	800e4a2 <UART_SetConfig+0x5a6>
 800e1d0:	697b      	ldr	r3, [r7, #20]
 800e1d2:	681b      	ldr	r3, [r3, #0]
 800e1d4:	4a1b      	ldr	r2, [pc, #108]	; (800e244 <UART_SetConfig+0x348>)
 800e1d6:	4293      	cmp	r3, r2
 800e1d8:	d142      	bne.n	800e260 <UART_SetConfig+0x364>
 800e1da:	4b16      	ldr	r3, [pc, #88]	; (800e234 <UART_SetConfig+0x338>)
 800e1dc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800e1de:	f003 0307 	and.w	r3, r3, #7
 800e1e2:	2b05      	cmp	r3, #5
 800e1e4:	d838      	bhi.n	800e258 <UART_SetConfig+0x35c>
 800e1e6:	a201      	add	r2, pc, #4	; (adr r2, 800e1ec <UART_SetConfig+0x2f0>)
 800e1e8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800e1ec:	0800e205 	.word	0x0800e205
 800e1f0:	0800e20d 	.word	0x0800e20d
 800e1f4:	0800e215 	.word	0x0800e215
 800e1f8:	0800e21d 	.word	0x0800e21d
 800e1fc:	0800e249 	.word	0x0800e249
 800e200:	0800e251 	.word	0x0800e251
 800e204:	2300      	movs	r3, #0
 800e206:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800e20a:	e14a      	b.n	800e4a2 <UART_SetConfig+0x5a6>
 800e20c:	2304      	movs	r3, #4
 800e20e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800e212:	e146      	b.n	800e4a2 <UART_SetConfig+0x5a6>
 800e214:	2308      	movs	r3, #8
 800e216:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800e21a:	e142      	b.n	800e4a2 <UART_SetConfig+0x5a6>
 800e21c:	2310      	movs	r3, #16
 800e21e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800e222:	e13e      	b.n	800e4a2 <UART_SetConfig+0x5a6>
 800e224:	cfff69f3 	.word	0xcfff69f3
 800e228:	58000c00 	.word	0x58000c00
 800e22c:	11fff4ff 	.word	0x11fff4ff
 800e230:	40011000 	.word	0x40011000
 800e234:	58024400 	.word	0x58024400
 800e238:	40004400 	.word	0x40004400
 800e23c:	40004800 	.word	0x40004800
 800e240:	40004c00 	.word	0x40004c00
 800e244:	40005000 	.word	0x40005000
 800e248:	2320      	movs	r3, #32
 800e24a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800e24e:	e128      	b.n	800e4a2 <UART_SetConfig+0x5a6>
 800e250:	2340      	movs	r3, #64	; 0x40
 800e252:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800e256:	e124      	b.n	800e4a2 <UART_SetConfig+0x5a6>
 800e258:	2380      	movs	r3, #128	; 0x80
 800e25a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800e25e:	e120      	b.n	800e4a2 <UART_SetConfig+0x5a6>
 800e260:	697b      	ldr	r3, [r7, #20]
 800e262:	681b      	ldr	r3, [r3, #0]
 800e264:	4acb      	ldr	r2, [pc, #812]	; (800e594 <UART_SetConfig+0x698>)
 800e266:	4293      	cmp	r3, r2
 800e268:	d176      	bne.n	800e358 <UART_SetConfig+0x45c>
 800e26a:	4bcb      	ldr	r3, [pc, #812]	; (800e598 <UART_SetConfig+0x69c>)
 800e26c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800e26e:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800e272:	2b28      	cmp	r3, #40	; 0x28
 800e274:	d86c      	bhi.n	800e350 <UART_SetConfig+0x454>
 800e276:	a201      	add	r2, pc, #4	; (adr r2, 800e27c <UART_SetConfig+0x380>)
 800e278:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800e27c:	0800e321 	.word	0x0800e321
 800e280:	0800e351 	.word	0x0800e351
 800e284:	0800e351 	.word	0x0800e351
 800e288:	0800e351 	.word	0x0800e351
 800e28c:	0800e351 	.word	0x0800e351
 800e290:	0800e351 	.word	0x0800e351
 800e294:	0800e351 	.word	0x0800e351
 800e298:	0800e351 	.word	0x0800e351
 800e29c:	0800e329 	.word	0x0800e329
 800e2a0:	0800e351 	.word	0x0800e351
 800e2a4:	0800e351 	.word	0x0800e351
 800e2a8:	0800e351 	.word	0x0800e351
 800e2ac:	0800e351 	.word	0x0800e351
 800e2b0:	0800e351 	.word	0x0800e351
 800e2b4:	0800e351 	.word	0x0800e351
 800e2b8:	0800e351 	.word	0x0800e351
 800e2bc:	0800e331 	.word	0x0800e331
 800e2c0:	0800e351 	.word	0x0800e351
 800e2c4:	0800e351 	.word	0x0800e351
 800e2c8:	0800e351 	.word	0x0800e351
 800e2cc:	0800e351 	.word	0x0800e351
 800e2d0:	0800e351 	.word	0x0800e351
 800e2d4:	0800e351 	.word	0x0800e351
 800e2d8:	0800e351 	.word	0x0800e351
 800e2dc:	0800e339 	.word	0x0800e339
 800e2e0:	0800e351 	.word	0x0800e351
 800e2e4:	0800e351 	.word	0x0800e351
 800e2e8:	0800e351 	.word	0x0800e351
 800e2ec:	0800e351 	.word	0x0800e351
 800e2f0:	0800e351 	.word	0x0800e351
 800e2f4:	0800e351 	.word	0x0800e351
 800e2f8:	0800e351 	.word	0x0800e351
 800e2fc:	0800e341 	.word	0x0800e341
 800e300:	0800e351 	.word	0x0800e351
 800e304:	0800e351 	.word	0x0800e351
 800e308:	0800e351 	.word	0x0800e351
 800e30c:	0800e351 	.word	0x0800e351
 800e310:	0800e351 	.word	0x0800e351
 800e314:	0800e351 	.word	0x0800e351
 800e318:	0800e351 	.word	0x0800e351
 800e31c:	0800e349 	.word	0x0800e349
 800e320:	2301      	movs	r3, #1
 800e322:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800e326:	e0bc      	b.n	800e4a2 <UART_SetConfig+0x5a6>
 800e328:	2304      	movs	r3, #4
 800e32a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800e32e:	e0b8      	b.n	800e4a2 <UART_SetConfig+0x5a6>
 800e330:	2308      	movs	r3, #8
 800e332:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800e336:	e0b4      	b.n	800e4a2 <UART_SetConfig+0x5a6>
 800e338:	2310      	movs	r3, #16
 800e33a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800e33e:	e0b0      	b.n	800e4a2 <UART_SetConfig+0x5a6>
 800e340:	2320      	movs	r3, #32
 800e342:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800e346:	e0ac      	b.n	800e4a2 <UART_SetConfig+0x5a6>
 800e348:	2340      	movs	r3, #64	; 0x40
 800e34a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800e34e:	e0a8      	b.n	800e4a2 <UART_SetConfig+0x5a6>
 800e350:	2380      	movs	r3, #128	; 0x80
 800e352:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800e356:	e0a4      	b.n	800e4a2 <UART_SetConfig+0x5a6>
 800e358:	697b      	ldr	r3, [r7, #20]
 800e35a:	681b      	ldr	r3, [r3, #0]
 800e35c:	4a8f      	ldr	r2, [pc, #572]	; (800e59c <UART_SetConfig+0x6a0>)
 800e35e:	4293      	cmp	r3, r2
 800e360:	d130      	bne.n	800e3c4 <UART_SetConfig+0x4c8>
 800e362:	4b8d      	ldr	r3, [pc, #564]	; (800e598 <UART_SetConfig+0x69c>)
 800e364:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800e366:	f003 0307 	and.w	r3, r3, #7
 800e36a:	2b05      	cmp	r3, #5
 800e36c:	d826      	bhi.n	800e3bc <UART_SetConfig+0x4c0>
 800e36e:	a201      	add	r2, pc, #4	; (adr r2, 800e374 <UART_SetConfig+0x478>)
 800e370:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800e374:	0800e38d 	.word	0x0800e38d
 800e378:	0800e395 	.word	0x0800e395
 800e37c:	0800e39d 	.word	0x0800e39d
 800e380:	0800e3a5 	.word	0x0800e3a5
 800e384:	0800e3ad 	.word	0x0800e3ad
 800e388:	0800e3b5 	.word	0x0800e3b5
 800e38c:	2300      	movs	r3, #0
 800e38e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800e392:	e086      	b.n	800e4a2 <UART_SetConfig+0x5a6>
 800e394:	2304      	movs	r3, #4
 800e396:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800e39a:	e082      	b.n	800e4a2 <UART_SetConfig+0x5a6>
 800e39c:	2308      	movs	r3, #8
 800e39e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800e3a2:	e07e      	b.n	800e4a2 <UART_SetConfig+0x5a6>
 800e3a4:	2310      	movs	r3, #16
 800e3a6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800e3aa:	e07a      	b.n	800e4a2 <UART_SetConfig+0x5a6>
 800e3ac:	2320      	movs	r3, #32
 800e3ae:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800e3b2:	e076      	b.n	800e4a2 <UART_SetConfig+0x5a6>
 800e3b4:	2340      	movs	r3, #64	; 0x40
 800e3b6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800e3ba:	e072      	b.n	800e4a2 <UART_SetConfig+0x5a6>
 800e3bc:	2380      	movs	r3, #128	; 0x80
 800e3be:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800e3c2:	e06e      	b.n	800e4a2 <UART_SetConfig+0x5a6>
 800e3c4:	697b      	ldr	r3, [r7, #20]
 800e3c6:	681b      	ldr	r3, [r3, #0]
 800e3c8:	4a75      	ldr	r2, [pc, #468]	; (800e5a0 <UART_SetConfig+0x6a4>)
 800e3ca:	4293      	cmp	r3, r2
 800e3cc:	d130      	bne.n	800e430 <UART_SetConfig+0x534>
 800e3ce:	4b72      	ldr	r3, [pc, #456]	; (800e598 <UART_SetConfig+0x69c>)
 800e3d0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800e3d2:	f003 0307 	and.w	r3, r3, #7
 800e3d6:	2b05      	cmp	r3, #5
 800e3d8:	d826      	bhi.n	800e428 <UART_SetConfig+0x52c>
 800e3da:	a201      	add	r2, pc, #4	; (adr r2, 800e3e0 <UART_SetConfig+0x4e4>)
 800e3dc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800e3e0:	0800e3f9 	.word	0x0800e3f9
 800e3e4:	0800e401 	.word	0x0800e401
 800e3e8:	0800e409 	.word	0x0800e409
 800e3ec:	0800e411 	.word	0x0800e411
 800e3f0:	0800e419 	.word	0x0800e419
 800e3f4:	0800e421 	.word	0x0800e421
 800e3f8:	2300      	movs	r3, #0
 800e3fa:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800e3fe:	e050      	b.n	800e4a2 <UART_SetConfig+0x5a6>
 800e400:	2304      	movs	r3, #4
 800e402:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800e406:	e04c      	b.n	800e4a2 <UART_SetConfig+0x5a6>
 800e408:	2308      	movs	r3, #8
 800e40a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800e40e:	e048      	b.n	800e4a2 <UART_SetConfig+0x5a6>
 800e410:	2310      	movs	r3, #16
 800e412:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800e416:	e044      	b.n	800e4a2 <UART_SetConfig+0x5a6>
 800e418:	2320      	movs	r3, #32
 800e41a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800e41e:	e040      	b.n	800e4a2 <UART_SetConfig+0x5a6>
 800e420:	2340      	movs	r3, #64	; 0x40
 800e422:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800e426:	e03c      	b.n	800e4a2 <UART_SetConfig+0x5a6>
 800e428:	2380      	movs	r3, #128	; 0x80
 800e42a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800e42e:	e038      	b.n	800e4a2 <UART_SetConfig+0x5a6>
 800e430:	697b      	ldr	r3, [r7, #20]
 800e432:	681b      	ldr	r3, [r3, #0]
 800e434:	4a5b      	ldr	r2, [pc, #364]	; (800e5a4 <UART_SetConfig+0x6a8>)
 800e436:	4293      	cmp	r3, r2
 800e438:	d130      	bne.n	800e49c <UART_SetConfig+0x5a0>
 800e43a:	4b57      	ldr	r3, [pc, #348]	; (800e598 <UART_SetConfig+0x69c>)
 800e43c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800e43e:	f003 0307 	and.w	r3, r3, #7
 800e442:	2b05      	cmp	r3, #5
 800e444:	d826      	bhi.n	800e494 <UART_SetConfig+0x598>
 800e446:	a201      	add	r2, pc, #4	; (adr r2, 800e44c <UART_SetConfig+0x550>)
 800e448:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800e44c:	0800e465 	.word	0x0800e465
 800e450:	0800e46d 	.word	0x0800e46d
 800e454:	0800e475 	.word	0x0800e475
 800e458:	0800e47d 	.word	0x0800e47d
 800e45c:	0800e485 	.word	0x0800e485
 800e460:	0800e48d 	.word	0x0800e48d
 800e464:	2302      	movs	r3, #2
 800e466:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800e46a:	e01a      	b.n	800e4a2 <UART_SetConfig+0x5a6>
 800e46c:	2304      	movs	r3, #4
 800e46e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800e472:	e016      	b.n	800e4a2 <UART_SetConfig+0x5a6>
 800e474:	2308      	movs	r3, #8
 800e476:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800e47a:	e012      	b.n	800e4a2 <UART_SetConfig+0x5a6>
 800e47c:	2310      	movs	r3, #16
 800e47e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800e482:	e00e      	b.n	800e4a2 <UART_SetConfig+0x5a6>
 800e484:	2320      	movs	r3, #32
 800e486:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800e48a:	e00a      	b.n	800e4a2 <UART_SetConfig+0x5a6>
 800e48c:	2340      	movs	r3, #64	; 0x40
 800e48e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800e492:	e006      	b.n	800e4a2 <UART_SetConfig+0x5a6>
 800e494:	2380      	movs	r3, #128	; 0x80
 800e496:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800e49a:	e002      	b.n	800e4a2 <UART_SetConfig+0x5a6>
 800e49c:	2380      	movs	r3, #128	; 0x80
 800e49e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 800e4a2:	697b      	ldr	r3, [r7, #20]
 800e4a4:	681b      	ldr	r3, [r3, #0]
 800e4a6:	4a3f      	ldr	r2, [pc, #252]	; (800e5a4 <UART_SetConfig+0x6a8>)
 800e4a8:	4293      	cmp	r3, r2
 800e4aa:	f040 80f8 	bne.w	800e69e <UART_SetConfig+0x7a2>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 800e4ae:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 800e4b2:	2b20      	cmp	r3, #32
 800e4b4:	dc46      	bgt.n	800e544 <UART_SetConfig+0x648>
 800e4b6:	2b02      	cmp	r3, #2
 800e4b8:	f2c0 8082 	blt.w	800e5c0 <UART_SetConfig+0x6c4>
 800e4bc:	3b02      	subs	r3, #2
 800e4be:	2b1e      	cmp	r3, #30
 800e4c0:	d87e      	bhi.n	800e5c0 <UART_SetConfig+0x6c4>
 800e4c2:	a201      	add	r2, pc, #4	; (adr r2, 800e4c8 <UART_SetConfig+0x5cc>)
 800e4c4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800e4c8:	0800e54b 	.word	0x0800e54b
 800e4cc:	0800e5c1 	.word	0x0800e5c1
 800e4d0:	0800e553 	.word	0x0800e553
 800e4d4:	0800e5c1 	.word	0x0800e5c1
 800e4d8:	0800e5c1 	.word	0x0800e5c1
 800e4dc:	0800e5c1 	.word	0x0800e5c1
 800e4e0:	0800e563 	.word	0x0800e563
 800e4e4:	0800e5c1 	.word	0x0800e5c1
 800e4e8:	0800e5c1 	.word	0x0800e5c1
 800e4ec:	0800e5c1 	.word	0x0800e5c1
 800e4f0:	0800e5c1 	.word	0x0800e5c1
 800e4f4:	0800e5c1 	.word	0x0800e5c1
 800e4f8:	0800e5c1 	.word	0x0800e5c1
 800e4fc:	0800e5c1 	.word	0x0800e5c1
 800e500:	0800e573 	.word	0x0800e573
 800e504:	0800e5c1 	.word	0x0800e5c1
 800e508:	0800e5c1 	.word	0x0800e5c1
 800e50c:	0800e5c1 	.word	0x0800e5c1
 800e510:	0800e5c1 	.word	0x0800e5c1
 800e514:	0800e5c1 	.word	0x0800e5c1
 800e518:	0800e5c1 	.word	0x0800e5c1
 800e51c:	0800e5c1 	.word	0x0800e5c1
 800e520:	0800e5c1 	.word	0x0800e5c1
 800e524:	0800e5c1 	.word	0x0800e5c1
 800e528:	0800e5c1 	.word	0x0800e5c1
 800e52c:	0800e5c1 	.word	0x0800e5c1
 800e530:	0800e5c1 	.word	0x0800e5c1
 800e534:	0800e5c1 	.word	0x0800e5c1
 800e538:	0800e5c1 	.word	0x0800e5c1
 800e53c:	0800e5c1 	.word	0x0800e5c1
 800e540:	0800e5b3 	.word	0x0800e5b3
 800e544:	2b40      	cmp	r3, #64	; 0x40
 800e546:	d037      	beq.n	800e5b8 <UART_SetConfig+0x6bc>
 800e548:	e03a      	b.n	800e5c0 <UART_SetConfig+0x6c4>
    {
      case UART_CLOCKSOURCE_D3PCLK1:
        pclk = HAL_RCCEx_GetD3PCLK1Freq();
 800e54a:	f7fe fb19 	bl	800cb80 <HAL_RCCEx_GetD3PCLK1Freq>
 800e54e:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 800e550:	e03c      	b.n	800e5cc <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800e552:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800e556:	4618      	mov	r0, r3
 800e558:	f7fe fb28 	bl	800cbac <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 800e55c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e55e:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800e560:	e034      	b.n	800e5cc <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800e562:	f107 0318 	add.w	r3, r7, #24
 800e566:	4618      	mov	r0, r3
 800e568:	f7fe fc74 	bl	800ce54 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 800e56c:	69fb      	ldr	r3, [r7, #28]
 800e56e:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800e570:	e02c      	b.n	800e5cc <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800e572:	4b09      	ldr	r3, [pc, #36]	; (800e598 <UART_SetConfig+0x69c>)
 800e574:	681b      	ldr	r3, [r3, #0]
 800e576:	f003 0320 	and.w	r3, r3, #32
 800e57a:	2b00      	cmp	r3, #0
 800e57c:	d016      	beq.n	800e5ac <UART_SetConfig+0x6b0>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 800e57e:	4b06      	ldr	r3, [pc, #24]	; (800e598 <UART_SetConfig+0x69c>)
 800e580:	681b      	ldr	r3, [r3, #0]
 800e582:	08db      	lsrs	r3, r3, #3
 800e584:	f003 0303 	and.w	r3, r3, #3
 800e588:	4a07      	ldr	r2, [pc, #28]	; (800e5a8 <UART_SetConfig+0x6ac>)
 800e58a:	fa22 f303 	lsr.w	r3, r2, r3
 800e58e:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 800e590:	e01c      	b.n	800e5cc <UART_SetConfig+0x6d0>
 800e592:	bf00      	nop
 800e594:	40011400 	.word	0x40011400
 800e598:	58024400 	.word	0x58024400
 800e59c:	40007800 	.word	0x40007800
 800e5a0:	40007c00 	.word	0x40007c00
 800e5a4:	58000c00 	.word	0x58000c00
 800e5a8:	03d09000 	.word	0x03d09000
          pclk = (uint32_t) HSI_VALUE;
 800e5ac:	4b9d      	ldr	r3, [pc, #628]	; (800e824 <UART_SetConfig+0x928>)
 800e5ae:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800e5b0:	e00c      	b.n	800e5cc <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 800e5b2:	4b9d      	ldr	r3, [pc, #628]	; (800e828 <UART_SetConfig+0x92c>)
 800e5b4:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800e5b6:	e009      	b.n	800e5cc <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800e5b8:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800e5bc:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800e5be:	e005      	b.n	800e5cc <UART_SetConfig+0x6d0>
      default:
        pclk = 0U;
 800e5c0:	2300      	movs	r3, #0
 800e5c2:	63fb      	str	r3, [r7, #60]	; 0x3c
        ret = HAL_ERROR;
 800e5c4:	2301      	movs	r3, #1
 800e5c6:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
        break;
 800e5ca:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 800e5cc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800e5ce:	2b00      	cmp	r3, #0
 800e5d0:	f000 81de 	beq.w	800e990 <UART_SetConfig+0xa94>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 800e5d4:	697b      	ldr	r3, [r7, #20]
 800e5d6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e5d8:	4a94      	ldr	r2, [pc, #592]	; (800e82c <UART_SetConfig+0x930>)
 800e5da:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800e5de:	461a      	mov	r2, r3
 800e5e0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800e5e2:	fbb3 f3f2 	udiv	r3, r3, r2
 800e5e6:	633b      	str	r3, [r7, #48]	; 0x30

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800e5e8:	697b      	ldr	r3, [r7, #20]
 800e5ea:	685a      	ldr	r2, [r3, #4]
 800e5ec:	4613      	mov	r3, r2
 800e5ee:	005b      	lsls	r3, r3, #1
 800e5f0:	4413      	add	r3, r2
 800e5f2:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800e5f4:	429a      	cmp	r2, r3
 800e5f6:	d305      	bcc.n	800e604 <UART_SetConfig+0x708>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 800e5f8:	697b      	ldr	r3, [r7, #20]
 800e5fa:	685b      	ldr	r3, [r3, #4]
 800e5fc:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800e5fe:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800e600:	429a      	cmp	r2, r3
 800e602:	d903      	bls.n	800e60c <UART_SetConfig+0x710>
      {
        ret = HAL_ERROR;
 800e604:	2301      	movs	r3, #1
 800e606:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
 800e60a:	e1c1      	b.n	800e990 <UART_SetConfig+0xa94>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800e60c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800e60e:	2200      	movs	r2, #0
 800e610:	60bb      	str	r3, [r7, #8]
 800e612:	60fa      	str	r2, [r7, #12]
 800e614:	697b      	ldr	r3, [r7, #20]
 800e616:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e618:	4a84      	ldr	r2, [pc, #528]	; (800e82c <UART_SetConfig+0x930>)
 800e61a:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800e61e:	b29b      	uxth	r3, r3
 800e620:	2200      	movs	r2, #0
 800e622:	603b      	str	r3, [r7, #0]
 800e624:	607a      	str	r2, [r7, #4]
 800e626:	e9d7 2300 	ldrd	r2, r3, [r7]
 800e62a:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 800e62e:	f7f3 fc1f 	bl	8001e70 <__aeabi_uldivmod>
 800e632:	4602      	mov	r2, r0
 800e634:	460b      	mov	r3, r1
 800e636:	4610      	mov	r0, r2
 800e638:	4619      	mov	r1, r3
 800e63a:	f04f 0200 	mov.w	r2, #0
 800e63e:	f04f 0300 	mov.w	r3, #0
 800e642:	020b      	lsls	r3, r1, #8
 800e644:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 800e648:	0202      	lsls	r2, r0, #8
 800e64a:	6979      	ldr	r1, [r7, #20]
 800e64c:	6849      	ldr	r1, [r1, #4]
 800e64e:	0849      	lsrs	r1, r1, #1
 800e650:	2000      	movs	r0, #0
 800e652:	460c      	mov	r4, r1
 800e654:	4605      	mov	r5, r0
 800e656:	eb12 0804 	adds.w	r8, r2, r4
 800e65a:	eb43 0905 	adc.w	r9, r3, r5
 800e65e:	697b      	ldr	r3, [r7, #20]
 800e660:	685b      	ldr	r3, [r3, #4]
 800e662:	2200      	movs	r2, #0
 800e664:	469a      	mov	sl, r3
 800e666:	4693      	mov	fp, r2
 800e668:	4652      	mov	r2, sl
 800e66a:	465b      	mov	r3, fp
 800e66c:	4640      	mov	r0, r8
 800e66e:	4649      	mov	r1, r9
 800e670:	f7f3 fbfe 	bl	8001e70 <__aeabi_uldivmod>
 800e674:	4602      	mov	r2, r0
 800e676:	460b      	mov	r3, r1
 800e678:	4613      	mov	r3, r2
 800e67a:	63bb      	str	r3, [r7, #56]	; 0x38
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 800e67c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e67e:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800e682:	d308      	bcc.n	800e696 <UART_SetConfig+0x79a>
 800e684:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e686:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800e68a:	d204      	bcs.n	800e696 <UART_SetConfig+0x79a>
        {
          huart->Instance->BRR = usartdiv;
 800e68c:	697b      	ldr	r3, [r7, #20]
 800e68e:	681b      	ldr	r3, [r3, #0]
 800e690:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800e692:	60da      	str	r2, [r3, #12]
 800e694:	e17c      	b.n	800e990 <UART_SetConfig+0xa94>
        }
        else
        {
          ret = HAL_ERROR;
 800e696:	2301      	movs	r3, #1
 800e698:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
 800e69c:	e178      	b.n	800e990 <UART_SetConfig+0xa94>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800e69e:	697b      	ldr	r3, [r7, #20]
 800e6a0:	69db      	ldr	r3, [r3, #28]
 800e6a2:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800e6a6:	f040 80c5 	bne.w	800e834 <UART_SetConfig+0x938>
  {
    switch (clocksource)
 800e6aa:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 800e6ae:	2b20      	cmp	r3, #32
 800e6b0:	dc48      	bgt.n	800e744 <UART_SetConfig+0x848>
 800e6b2:	2b00      	cmp	r3, #0
 800e6b4:	db7b      	blt.n	800e7ae <UART_SetConfig+0x8b2>
 800e6b6:	2b20      	cmp	r3, #32
 800e6b8:	d879      	bhi.n	800e7ae <UART_SetConfig+0x8b2>
 800e6ba:	a201      	add	r2, pc, #4	; (adr r2, 800e6c0 <UART_SetConfig+0x7c4>)
 800e6bc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800e6c0:	0800e74b 	.word	0x0800e74b
 800e6c4:	0800e753 	.word	0x0800e753
 800e6c8:	0800e7af 	.word	0x0800e7af
 800e6cc:	0800e7af 	.word	0x0800e7af
 800e6d0:	0800e75b 	.word	0x0800e75b
 800e6d4:	0800e7af 	.word	0x0800e7af
 800e6d8:	0800e7af 	.word	0x0800e7af
 800e6dc:	0800e7af 	.word	0x0800e7af
 800e6e0:	0800e76b 	.word	0x0800e76b
 800e6e4:	0800e7af 	.word	0x0800e7af
 800e6e8:	0800e7af 	.word	0x0800e7af
 800e6ec:	0800e7af 	.word	0x0800e7af
 800e6f0:	0800e7af 	.word	0x0800e7af
 800e6f4:	0800e7af 	.word	0x0800e7af
 800e6f8:	0800e7af 	.word	0x0800e7af
 800e6fc:	0800e7af 	.word	0x0800e7af
 800e700:	0800e77b 	.word	0x0800e77b
 800e704:	0800e7af 	.word	0x0800e7af
 800e708:	0800e7af 	.word	0x0800e7af
 800e70c:	0800e7af 	.word	0x0800e7af
 800e710:	0800e7af 	.word	0x0800e7af
 800e714:	0800e7af 	.word	0x0800e7af
 800e718:	0800e7af 	.word	0x0800e7af
 800e71c:	0800e7af 	.word	0x0800e7af
 800e720:	0800e7af 	.word	0x0800e7af
 800e724:	0800e7af 	.word	0x0800e7af
 800e728:	0800e7af 	.word	0x0800e7af
 800e72c:	0800e7af 	.word	0x0800e7af
 800e730:	0800e7af 	.word	0x0800e7af
 800e734:	0800e7af 	.word	0x0800e7af
 800e738:	0800e7af 	.word	0x0800e7af
 800e73c:	0800e7af 	.word	0x0800e7af
 800e740:	0800e7a1 	.word	0x0800e7a1
 800e744:	2b40      	cmp	r3, #64	; 0x40
 800e746:	d02e      	beq.n	800e7a6 <UART_SetConfig+0x8aa>
 800e748:	e031      	b.n	800e7ae <UART_SetConfig+0x8b2>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800e74a:	f7fc fa47 	bl	800abdc <HAL_RCC_GetPCLK1Freq>
 800e74e:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 800e750:	e033      	b.n	800e7ba <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800e752:	f7fc fa59 	bl	800ac08 <HAL_RCC_GetPCLK2Freq>
 800e756:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 800e758:	e02f      	b.n	800e7ba <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800e75a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800e75e:	4618      	mov	r0, r3
 800e760:	f7fe fa24 	bl	800cbac <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 800e764:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e766:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800e768:	e027      	b.n	800e7ba <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800e76a:	f107 0318 	add.w	r3, r7, #24
 800e76e:	4618      	mov	r0, r3
 800e770:	f7fe fb70 	bl	800ce54 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 800e774:	69fb      	ldr	r3, [r7, #28]
 800e776:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800e778:	e01f      	b.n	800e7ba <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800e77a:	4b2d      	ldr	r3, [pc, #180]	; (800e830 <UART_SetConfig+0x934>)
 800e77c:	681b      	ldr	r3, [r3, #0]
 800e77e:	f003 0320 	and.w	r3, r3, #32
 800e782:	2b00      	cmp	r3, #0
 800e784:	d009      	beq.n	800e79a <UART_SetConfig+0x89e>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 800e786:	4b2a      	ldr	r3, [pc, #168]	; (800e830 <UART_SetConfig+0x934>)
 800e788:	681b      	ldr	r3, [r3, #0]
 800e78a:	08db      	lsrs	r3, r3, #3
 800e78c:	f003 0303 	and.w	r3, r3, #3
 800e790:	4a24      	ldr	r2, [pc, #144]	; (800e824 <UART_SetConfig+0x928>)
 800e792:	fa22 f303 	lsr.w	r3, r2, r3
 800e796:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 800e798:	e00f      	b.n	800e7ba <UART_SetConfig+0x8be>
          pclk = (uint32_t) HSI_VALUE;
 800e79a:	4b22      	ldr	r3, [pc, #136]	; (800e824 <UART_SetConfig+0x928>)
 800e79c:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800e79e:	e00c      	b.n	800e7ba <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 800e7a0:	4b21      	ldr	r3, [pc, #132]	; (800e828 <UART_SetConfig+0x92c>)
 800e7a2:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800e7a4:	e009      	b.n	800e7ba <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800e7a6:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800e7aa:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800e7ac:	e005      	b.n	800e7ba <UART_SetConfig+0x8be>
      default:
        pclk = 0U;
 800e7ae:	2300      	movs	r3, #0
 800e7b0:	63fb      	str	r3, [r7, #60]	; 0x3c
        ret = HAL_ERROR;
 800e7b2:	2301      	movs	r3, #1
 800e7b4:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
        break;
 800e7b8:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800e7ba:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800e7bc:	2b00      	cmp	r3, #0
 800e7be:	f000 80e7 	beq.w	800e990 <UART_SetConfig+0xa94>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800e7c2:	697b      	ldr	r3, [r7, #20]
 800e7c4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e7c6:	4a19      	ldr	r2, [pc, #100]	; (800e82c <UART_SetConfig+0x930>)
 800e7c8:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800e7cc:	461a      	mov	r2, r3
 800e7ce:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800e7d0:	fbb3 f3f2 	udiv	r3, r3, r2
 800e7d4:	005a      	lsls	r2, r3, #1
 800e7d6:	697b      	ldr	r3, [r7, #20]
 800e7d8:	685b      	ldr	r3, [r3, #4]
 800e7da:	085b      	lsrs	r3, r3, #1
 800e7dc:	441a      	add	r2, r3
 800e7de:	697b      	ldr	r3, [r7, #20]
 800e7e0:	685b      	ldr	r3, [r3, #4]
 800e7e2:	fbb2 f3f3 	udiv	r3, r2, r3
 800e7e6:	63bb      	str	r3, [r7, #56]	; 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800e7e8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e7ea:	2b0f      	cmp	r3, #15
 800e7ec:	d916      	bls.n	800e81c <UART_SetConfig+0x920>
 800e7ee:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e7f0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800e7f4:	d212      	bcs.n	800e81c <UART_SetConfig+0x920>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800e7f6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e7f8:	b29b      	uxth	r3, r3
 800e7fa:	f023 030f 	bic.w	r3, r3, #15
 800e7fe:	86fb      	strh	r3, [r7, #54]	; 0x36
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800e800:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e802:	085b      	lsrs	r3, r3, #1
 800e804:	b29b      	uxth	r3, r3
 800e806:	f003 0307 	and.w	r3, r3, #7
 800e80a:	b29a      	uxth	r2, r3
 800e80c:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 800e80e:	4313      	orrs	r3, r2
 800e810:	86fb      	strh	r3, [r7, #54]	; 0x36
        huart->Instance->BRR = brrtemp;
 800e812:	697b      	ldr	r3, [r7, #20]
 800e814:	681b      	ldr	r3, [r3, #0]
 800e816:	8efa      	ldrh	r2, [r7, #54]	; 0x36
 800e818:	60da      	str	r2, [r3, #12]
 800e81a:	e0b9      	b.n	800e990 <UART_SetConfig+0xa94>
      }
      else
      {
        ret = HAL_ERROR;
 800e81c:	2301      	movs	r3, #1
 800e81e:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
 800e822:	e0b5      	b.n	800e990 <UART_SetConfig+0xa94>
 800e824:	03d09000 	.word	0x03d09000
 800e828:	003d0900 	.word	0x003d0900
 800e82c:	0801f3c8 	.word	0x0801f3c8
 800e830:	58024400 	.word	0x58024400
      }
    }
  }
  else
  {
    switch (clocksource)
 800e834:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 800e838:	2b20      	cmp	r3, #32
 800e83a:	dc49      	bgt.n	800e8d0 <UART_SetConfig+0x9d4>
 800e83c:	2b00      	cmp	r3, #0
 800e83e:	db7c      	blt.n	800e93a <UART_SetConfig+0xa3e>
 800e840:	2b20      	cmp	r3, #32
 800e842:	d87a      	bhi.n	800e93a <UART_SetConfig+0xa3e>
 800e844:	a201      	add	r2, pc, #4	; (adr r2, 800e84c <UART_SetConfig+0x950>)
 800e846:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800e84a:	bf00      	nop
 800e84c:	0800e8d7 	.word	0x0800e8d7
 800e850:	0800e8df 	.word	0x0800e8df
 800e854:	0800e93b 	.word	0x0800e93b
 800e858:	0800e93b 	.word	0x0800e93b
 800e85c:	0800e8e7 	.word	0x0800e8e7
 800e860:	0800e93b 	.word	0x0800e93b
 800e864:	0800e93b 	.word	0x0800e93b
 800e868:	0800e93b 	.word	0x0800e93b
 800e86c:	0800e8f7 	.word	0x0800e8f7
 800e870:	0800e93b 	.word	0x0800e93b
 800e874:	0800e93b 	.word	0x0800e93b
 800e878:	0800e93b 	.word	0x0800e93b
 800e87c:	0800e93b 	.word	0x0800e93b
 800e880:	0800e93b 	.word	0x0800e93b
 800e884:	0800e93b 	.word	0x0800e93b
 800e888:	0800e93b 	.word	0x0800e93b
 800e88c:	0800e907 	.word	0x0800e907
 800e890:	0800e93b 	.word	0x0800e93b
 800e894:	0800e93b 	.word	0x0800e93b
 800e898:	0800e93b 	.word	0x0800e93b
 800e89c:	0800e93b 	.word	0x0800e93b
 800e8a0:	0800e93b 	.word	0x0800e93b
 800e8a4:	0800e93b 	.word	0x0800e93b
 800e8a8:	0800e93b 	.word	0x0800e93b
 800e8ac:	0800e93b 	.word	0x0800e93b
 800e8b0:	0800e93b 	.word	0x0800e93b
 800e8b4:	0800e93b 	.word	0x0800e93b
 800e8b8:	0800e93b 	.word	0x0800e93b
 800e8bc:	0800e93b 	.word	0x0800e93b
 800e8c0:	0800e93b 	.word	0x0800e93b
 800e8c4:	0800e93b 	.word	0x0800e93b
 800e8c8:	0800e93b 	.word	0x0800e93b
 800e8cc:	0800e92d 	.word	0x0800e92d
 800e8d0:	2b40      	cmp	r3, #64	; 0x40
 800e8d2:	d02e      	beq.n	800e932 <UART_SetConfig+0xa36>
 800e8d4:	e031      	b.n	800e93a <UART_SetConfig+0xa3e>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800e8d6:	f7fc f981 	bl	800abdc <HAL_RCC_GetPCLK1Freq>
 800e8da:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 800e8dc:	e033      	b.n	800e946 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800e8de:	f7fc f993 	bl	800ac08 <HAL_RCC_GetPCLK2Freq>
 800e8e2:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 800e8e4:	e02f      	b.n	800e946 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800e8e6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800e8ea:	4618      	mov	r0, r3
 800e8ec:	f7fe f95e 	bl	800cbac <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 800e8f0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e8f2:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800e8f4:	e027      	b.n	800e946 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800e8f6:	f107 0318 	add.w	r3, r7, #24
 800e8fa:	4618      	mov	r0, r3
 800e8fc:	f7fe faaa 	bl	800ce54 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 800e900:	69fb      	ldr	r3, [r7, #28]
 800e902:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800e904:	e01f      	b.n	800e946 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800e906:	4b2d      	ldr	r3, [pc, #180]	; (800e9bc <UART_SetConfig+0xac0>)
 800e908:	681b      	ldr	r3, [r3, #0]
 800e90a:	f003 0320 	and.w	r3, r3, #32
 800e90e:	2b00      	cmp	r3, #0
 800e910:	d009      	beq.n	800e926 <UART_SetConfig+0xa2a>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 800e912:	4b2a      	ldr	r3, [pc, #168]	; (800e9bc <UART_SetConfig+0xac0>)
 800e914:	681b      	ldr	r3, [r3, #0]
 800e916:	08db      	lsrs	r3, r3, #3
 800e918:	f003 0303 	and.w	r3, r3, #3
 800e91c:	4a28      	ldr	r2, [pc, #160]	; (800e9c0 <UART_SetConfig+0xac4>)
 800e91e:	fa22 f303 	lsr.w	r3, r2, r3
 800e922:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 800e924:	e00f      	b.n	800e946 <UART_SetConfig+0xa4a>
          pclk = (uint32_t) HSI_VALUE;
 800e926:	4b26      	ldr	r3, [pc, #152]	; (800e9c0 <UART_SetConfig+0xac4>)
 800e928:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800e92a:	e00c      	b.n	800e946 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 800e92c:	4b25      	ldr	r3, [pc, #148]	; (800e9c4 <UART_SetConfig+0xac8>)
 800e92e:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800e930:	e009      	b.n	800e946 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800e932:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800e936:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800e938:	e005      	b.n	800e946 <UART_SetConfig+0xa4a>
      default:
        pclk = 0U;
 800e93a:	2300      	movs	r3, #0
 800e93c:	63fb      	str	r3, [r7, #60]	; 0x3c
        ret = HAL_ERROR;
 800e93e:	2301      	movs	r3, #1
 800e940:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
        break;
 800e944:	bf00      	nop
    }

    if (pclk != 0U)
 800e946:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800e948:	2b00      	cmp	r3, #0
 800e94a:	d021      	beq.n	800e990 <UART_SetConfig+0xa94>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800e94c:	697b      	ldr	r3, [r7, #20]
 800e94e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e950:	4a1d      	ldr	r2, [pc, #116]	; (800e9c8 <UART_SetConfig+0xacc>)
 800e952:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800e956:	461a      	mov	r2, r3
 800e958:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800e95a:	fbb3 f2f2 	udiv	r2, r3, r2
 800e95e:	697b      	ldr	r3, [r7, #20]
 800e960:	685b      	ldr	r3, [r3, #4]
 800e962:	085b      	lsrs	r3, r3, #1
 800e964:	441a      	add	r2, r3
 800e966:	697b      	ldr	r3, [r7, #20]
 800e968:	685b      	ldr	r3, [r3, #4]
 800e96a:	fbb2 f3f3 	udiv	r3, r2, r3
 800e96e:	63bb      	str	r3, [r7, #56]	; 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800e970:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e972:	2b0f      	cmp	r3, #15
 800e974:	d909      	bls.n	800e98a <UART_SetConfig+0xa8e>
 800e976:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e978:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800e97c:	d205      	bcs.n	800e98a <UART_SetConfig+0xa8e>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 800e97e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e980:	b29a      	uxth	r2, r3
 800e982:	697b      	ldr	r3, [r7, #20]
 800e984:	681b      	ldr	r3, [r3, #0]
 800e986:	60da      	str	r2, [r3, #12]
 800e988:	e002      	b.n	800e990 <UART_SetConfig+0xa94>
      }
      else
      {
        ret = HAL_ERROR;
 800e98a:	2301      	movs	r3, #1
 800e98c:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 800e990:	697b      	ldr	r3, [r7, #20]
 800e992:	2201      	movs	r2, #1
 800e994:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
 800e998:	697b      	ldr	r3, [r7, #20]
 800e99a:	2201      	movs	r2, #1
 800e99c:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800e9a0:	697b      	ldr	r3, [r7, #20]
 800e9a2:	2200      	movs	r2, #0
 800e9a4:	675a      	str	r2, [r3, #116]	; 0x74
  huart->TxISR = NULL;
 800e9a6:	697b      	ldr	r3, [r7, #20]
 800e9a8:	2200      	movs	r2, #0
 800e9aa:	679a      	str	r2, [r3, #120]	; 0x78

  return ret;
 800e9ac:	f897 3042 	ldrb.w	r3, [r7, #66]	; 0x42
}
 800e9b0:	4618      	mov	r0, r3
 800e9b2:	3748      	adds	r7, #72	; 0x48
 800e9b4:	46bd      	mov	sp, r7
 800e9b6:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800e9ba:	bf00      	nop
 800e9bc:	58024400 	.word	0x58024400
 800e9c0:	03d09000 	.word	0x03d09000
 800e9c4:	003d0900 	.word	0x003d0900
 800e9c8:	0801f3c8 	.word	0x0801f3c8

0800e9cc <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 800e9cc:	b480      	push	{r7}
 800e9ce:	b083      	sub	sp, #12
 800e9d0:	af00      	add	r7, sp, #0
 800e9d2:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800e9d4:	687b      	ldr	r3, [r7, #4]
 800e9d6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800e9d8:	f003 0301 	and.w	r3, r3, #1
 800e9dc:	2b00      	cmp	r3, #0
 800e9de:	d00a      	beq.n	800e9f6 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800e9e0:	687b      	ldr	r3, [r7, #4]
 800e9e2:	681b      	ldr	r3, [r3, #0]
 800e9e4:	685b      	ldr	r3, [r3, #4]
 800e9e6:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 800e9ea:	687b      	ldr	r3, [r7, #4]
 800e9ec:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800e9ee:	687b      	ldr	r3, [r7, #4]
 800e9f0:	681b      	ldr	r3, [r3, #0]
 800e9f2:	430a      	orrs	r2, r1
 800e9f4:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800e9f6:	687b      	ldr	r3, [r7, #4]
 800e9f8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800e9fa:	f003 0302 	and.w	r3, r3, #2
 800e9fe:	2b00      	cmp	r3, #0
 800ea00:	d00a      	beq.n	800ea18 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800ea02:	687b      	ldr	r3, [r7, #4]
 800ea04:	681b      	ldr	r3, [r3, #0]
 800ea06:	685b      	ldr	r3, [r3, #4]
 800ea08:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 800ea0c:	687b      	ldr	r3, [r7, #4]
 800ea0e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800ea10:	687b      	ldr	r3, [r7, #4]
 800ea12:	681b      	ldr	r3, [r3, #0]
 800ea14:	430a      	orrs	r2, r1
 800ea16:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800ea18:	687b      	ldr	r3, [r7, #4]
 800ea1a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800ea1c:	f003 0304 	and.w	r3, r3, #4
 800ea20:	2b00      	cmp	r3, #0
 800ea22:	d00a      	beq.n	800ea3a <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800ea24:	687b      	ldr	r3, [r7, #4]
 800ea26:	681b      	ldr	r3, [r3, #0]
 800ea28:	685b      	ldr	r3, [r3, #4]
 800ea2a:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 800ea2e:	687b      	ldr	r3, [r7, #4]
 800ea30:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800ea32:	687b      	ldr	r3, [r7, #4]
 800ea34:	681b      	ldr	r3, [r3, #0]
 800ea36:	430a      	orrs	r2, r1
 800ea38:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800ea3a:	687b      	ldr	r3, [r7, #4]
 800ea3c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800ea3e:	f003 0308 	and.w	r3, r3, #8
 800ea42:	2b00      	cmp	r3, #0
 800ea44:	d00a      	beq.n	800ea5c <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800ea46:	687b      	ldr	r3, [r7, #4]
 800ea48:	681b      	ldr	r3, [r3, #0]
 800ea4a:	685b      	ldr	r3, [r3, #4]
 800ea4c:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 800ea50:	687b      	ldr	r3, [r7, #4]
 800ea52:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800ea54:	687b      	ldr	r3, [r7, #4]
 800ea56:	681b      	ldr	r3, [r3, #0]
 800ea58:	430a      	orrs	r2, r1
 800ea5a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 800ea5c:	687b      	ldr	r3, [r7, #4]
 800ea5e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800ea60:	f003 0310 	and.w	r3, r3, #16
 800ea64:	2b00      	cmp	r3, #0
 800ea66:	d00a      	beq.n	800ea7e <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800ea68:	687b      	ldr	r3, [r7, #4]
 800ea6a:	681b      	ldr	r3, [r3, #0]
 800ea6c:	689b      	ldr	r3, [r3, #8]
 800ea6e:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 800ea72:	687b      	ldr	r3, [r7, #4]
 800ea74:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800ea76:	687b      	ldr	r3, [r7, #4]
 800ea78:	681b      	ldr	r3, [r3, #0]
 800ea7a:	430a      	orrs	r2, r1
 800ea7c:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800ea7e:	687b      	ldr	r3, [r7, #4]
 800ea80:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800ea82:	f003 0320 	and.w	r3, r3, #32
 800ea86:	2b00      	cmp	r3, #0
 800ea88:	d00a      	beq.n	800eaa0 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800ea8a:	687b      	ldr	r3, [r7, #4]
 800ea8c:	681b      	ldr	r3, [r3, #0]
 800ea8e:	689b      	ldr	r3, [r3, #8]
 800ea90:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 800ea94:	687b      	ldr	r3, [r7, #4]
 800ea96:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800ea98:	687b      	ldr	r3, [r7, #4]
 800ea9a:	681b      	ldr	r3, [r3, #0]
 800ea9c:	430a      	orrs	r2, r1
 800ea9e:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 800eaa0:	687b      	ldr	r3, [r7, #4]
 800eaa2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800eaa4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800eaa8:	2b00      	cmp	r3, #0
 800eaaa:	d01a      	beq.n	800eae2 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800eaac:	687b      	ldr	r3, [r7, #4]
 800eaae:	681b      	ldr	r3, [r3, #0]
 800eab0:	685b      	ldr	r3, [r3, #4]
 800eab2:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 800eab6:	687b      	ldr	r3, [r7, #4]
 800eab8:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800eaba:	687b      	ldr	r3, [r7, #4]
 800eabc:	681b      	ldr	r3, [r3, #0]
 800eabe:	430a      	orrs	r2, r1
 800eac0:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800eac2:	687b      	ldr	r3, [r7, #4]
 800eac4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800eac6:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800eaca:	d10a      	bne.n	800eae2 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800eacc:	687b      	ldr	r3, [r7, #4]
 800eace:	681b      	ldr	r3, [r3, #0]
 800ead0:	685b      	ldr	r3, [r3, #4]
 800ead2:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 800ead6:	687b      	ldr	r3, [r7, #4]
 800ead8:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800eada:	687b      	ldr	r3, [r7, #4]
 800eadc:	681b      	ldr	r3, [r3, #0]
 800eade:	430a      	orrs	r2, r1
 800eae0:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800eae2:	687b      	ldr	r3, [r7, #4]
 800eae4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800eae6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800eaea:	2b00      	cmp	r3, #0
 800eaec:	d00a      	beq.n	800eb04 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800eaee:	687b      	ldr	r3, [r7, #4]
 800eaf0:	681b      	ldr	r3, [r3, #0]
 800eaf2:	685b      	ldr	r3, [r3, #4]
 800eaf4:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 800eaf8:	687b      	ldr	r3, [r7, #4]
 800eafa:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800eafc:	687b      	ldr	r3, [r7, #4]
 800eafe:	681b      	ldr	r3, [r3, #0]
 800eb00:	430a      	orrs	r2, r1
 800eb02:	605a      	str	r2, [r3, #4]
  }
}
 800eb04:	bf00      	nop
 800eb06:	370c      	adds	r7, #12
 800eb08:	46bd      	mov	sp, r7
 800eb0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800eb0e:	4770      	bx	lr

0800eb10 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 800eb10:	b580      	push	{r7, lr}
 800eb12:	b098      	sub	sp, #96	; 0x60
 800eb14:	af02      	add	r7, sp, #8
 800eb16:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800eb18:	687b      	ldr	r3, [r7, #4]
 800eb1a:	2200      	movs	r2, #0
 800eb1c:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 800eb20:	f7f5 faf6 	bl	8004110 <HAL_GetTick>
 800eb24:	6578      	str	r0, [r7, #84]	; 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800eb26:	687b      	ldr	r3, [r7, #4]
 800eb28:	681b      	ldr	r3, [r3, #0]
 800eb2a:	681b      	ldr	r3, [r3, #0]
 800eb2c:	f003 0308 	and.w	r3, r3, #8
 800eb30:	2b08      	cmp	r3, #8
 800eb32:	d12f      	bne.n	800eb94 <UART_CheckIdleState+0x84>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800eb34:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800eb38:	9300      	str	r3, [sp, #0]
 800eb3a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800eb3c:	2200      	movs	r2, #0
 800eb3e:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 800eb42:	6878      	ldr	r0, [r7, #4]
 800eb44:	f000 f88e 	bl	800ec64 <UART_WaitOnFlagUntilTimeout>
 800eb48:	4603      	mov	r3, r0
 800eb4a:	2b00      	cmp	r3, #0
 800eb4c:	d022      	beq.n	800eb94 <UART_CheckIdleState+0x84>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 800eb4e:	687b      	ldr	r3, [r7, #4]
 800eb50:	681b      	ldr	r3, [r3, #0]
 800eb52:	63bb      	str	r3, [r7, #56]	; 0x38
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800eb54:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800eb56:	e853 3f00 	ldrex	r3, [r3]
 800eb5a:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 800eb5c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800eb5e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800eb62:	653b      	str	r3, [r7, #80]	; 0x50
 800eb64:	687b      	ldr	r3, [r7, #4]
 800eb66:	681b      	ldr	r3, [r3, #0]
 800eb68:	461a      	mov	r2, r3
 800eb6a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800eb6c:	647b      	str	r3, [r7, #68]	; 0x44
 800eb6e:	643a      	str	r2, [r7, #64]	; 0x40
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800eb70:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800eb72:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800eb74:	e841 2300 	strex	r3, r2, [r1]
 800eb78:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 800eb7a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800eb7c:	2b00      	cmp	r3, #0
 800eb7e:	d1e6      	bne.n	800eb4e <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 800eb80:	687b      	ldr	r3, [r7, #4]
 800eb82:	2220      	movs	r2, #32
 800eb84:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

      __HAL_UNLOCK(huart);
 800eb88:	687b      	ldr	r3, [r7, #4]
 800eb8a:	2200      	movs	r2, #0
 800eb8c:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800eb90:	2303      	movs	r3, #3
 800eb92:	e063      	b.n	800ec5c <UART_CheckIdleState+0x14c>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800eb94:	687b      	ldr	r3, [r7, #4]
 800eb96:	681b      	ldr	r3, [r3, #0]
 800eb98:	681b      	ldr	r3, [r3, #0]
 800eb9a:	f003 0304 	and.w	r3, r3, #4
 800eb9e:	2b04      	cmp	r3, #4
 800eba0:	d149      	bne.n	800ec36 <UART_CheckIdleState+0x126>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800eba2:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800eba6:	9300      	str	r3, [sp, #0]
 800eba8:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800ebaa:	2200      	movs	r2, #0
 800ebac:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 800ebb0:	6878      	ldr	r0, [r7, #4]
 800ebb2:	f000 f857 	bl	800ec64 <UART_WaitOnFlagUntilTimeout>
 800ebb6:	4603      	mov	r3, r0
 800ebb8:	2b00      	cmp	r3, #0
 800ebba:	d03c      	beq.n	800ec36 <UART_CheckIdleState+0x126>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800ebbc:	687b      	ldr	r3, [r7, #4]
 800ebbe:	681b      	ldr	r3, [r3, #0]
 800ebc0:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ebc2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ebc4:	e853 3f00 	ldrex	r3, [r3]
 800ebc8:	623b      	str	r3, [r7, #32]
   return(result);
 800ebca:	6a3b      	ldr	r3, [r7, #32]
 800ebcc:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800ebd0:	64fb      	str	r3, [r7, #76]	; 0x4c
 800ebd2:	687b      	ldr	r3, [r7, #4]
 800ebd4:	681b      	ldr	r3, [r3, #0]
 800ebd6:	461a      	mov	r2, r3
 800ebd8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800ebda:	633b      	str	r3, [r7, #48]	; 0x30
 800ebdc:	62fa      	str	r2, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ebde:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800ebe0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800ebe2:	e841 2300 	strex	r3, r2, [r1]
 800ebe6:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800ebe8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ebea:	2b00      	cmp	r3, #0
 800ebec:	d1e6      	bne.n	800ebbc <UART_CheckIdleState+0xac>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800ebee:	687b      	ldr	r3, [r7, #4]
 800ebf0:	681b      	ldr	r3, [r3, #0]
 800ebf2:	3308      	adds	r3, #8
 800ebf4:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ebf6:	693b      	ldr	r3, [r7, #16]
 800ebf8:	e853 3f00 	ldrex	r3, [r3]
 800ebfc:	60fb      	str	r3, [r7, #12]
   return(result);
 800ebfe:	68fb      	ldr	r3, [r7, #12]
 800ec00:	f023 0301 	bic.w	r3, r3, #1
 800ec04:	64bb      	str	r3, [r7, #72]	; 0x48
 800ec06:	687b      	ldr	r3, [r7, #4]
 800ec08:	681b      	ldr	r3, [r3, #0]
 800ec0a:	3308      	adds	r3, #8
 800ec0c:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800ec0e:	61fa      	str	r2, [r7, #28]
 800ec10:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ec12:	69b9      	ldr	r1, [r7, #24]
 800ec14:	69fa      	ldr	r2, [r7, #28]
 800ec16:	e841 2300 	strex	r3, r2, [r1]
 800ec1a:	617b      	str	r3, [r7, #20]
   return(result);
 800ec1c:	697b      	ldr	r3, [r7, #20]
 800ec1e:	2b00      	cmp	r3, #0
 800ec20:	d1e5      	bne.n	800ebee <UART_CheckIdleState+0xde>

      huart->RxState = HAL_UART_STATE_READY;
 800ec22:	687b      	ldr	r3, [r7, #4]
 800ec24:	2220      	movs	r2, #32
 800ec26:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

      __HAL_UNLOCK(huart);
 800ec2a:	687b      	ldr	r3, [r7, #4]
 800ec2c:	2200      	movs	r2, #0
 800ec2e:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800ec32:	2303      	movs	r3, #3
 800ec34:	e012      	b.n	800ec5c <UART_CheckIdleState+0x14c>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800ec36:	687b      	ldr	r3, [r7, #4]
 800ec38:	2220      	movs	r2, #32
 800ec3a:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->RxState = HAL_UART_STATE_READY;
 800ec3e:	687b      	ldr	r3, [r7, #4]
 800ec40:	2220      	movs	r2, #32
 800ec42:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800ec46:	687b      	ldr	r3, [r7, #4]
 800ec48:	2200      	movs	r2, #0
 800ec4a:	66da      	str	r2, [r3, #108]	; 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800ec4c:	687b      	ldr	r3, [r7, #4]
 800ec4e:	2200      	movs	r2, #0
 800ec50:	671a      	str	r2, [r3, #112]	; 0x70

  __HAL_UNLOCK(huart);
 800ec52:	687b      	ldr	r3, [r7, #4]
 800ec54:	2200      	movs	r2, #0
 800ec56:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 800ec5a:	2300      	movs	r3, #0
}
 800ec5c:	4618      	mov	r0, r3
 800ec5e:	3758      	adds	r7, #88	; 0x58
 800ec60:	46bd      	mov	sp, r7
 800ec62:	bd80      	pop	{r7, pc}

0800ec64 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800ec64:	b580      	push	{r7, lr}
 800ec66:	b084      	sub	sp, #16
 800ec68:	af00      	add	r7, sp, #0
 800ec6a:	60f8      	str	r0, [r7, #12]
 800ec6c:	60b9      	str	r1, [r7, #8]
 800ec6e:	603b      	str	r3, [r7, #0]
 800ec70:	4613      	mov	r3, r2
 800ec72:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800ec74:	e049      	b.n	800ed0a <UART_WaitOnFlagUntilTimeout+0xa6>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800ec76:	69bb      	ldr	r3, [r7, #24]
 800ec78:	f1b3 3fff 	cmp.w	r3, #4294967295
 800ec7c:	d045      	beq.n	800ed0a <UART_WaitOnFlagUntilTimeout+0xa6>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800ec7e:	f7f5 fa47 	bl	8004110 <HAL_GetTick>
 800ec82:	4602      	mov	r2, r0
 800ec84:	683b      	ldr	r3, [r7, #0]
 800ec86:	1ad3      	subs	r3, r2, r3
 800ec88:	69ba      	ldr	r2, [r7, #24]
 800ec8a:	429a      	cmp	r2, r3
 800ec8c:	d302      	bcc.n	800ec94 <UART_WaitOnFlagUntilTimeout+0x30>
 800ec8e:	69bb      	ldr	r3, [r7, #24]
 800ec90:	2b00      	cmp	r3, #0
 800ec92:	d101      	bne.n	800ec98 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 800ec94:	2303      	movs	r3, #3
 800ec96:	e048      	b.n	800ed2a <UART_WaitOnFlagUntilTimeout+0xc6>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 800ec98:	68fb      	ldr	r3, [r7, #12]
 800ec9a:	681b      	ldr	r3, [r3, #0]
 800ec9c:	681b      	ldr	r3, [r3, #0]
 800ec9e:	f003 0304 	and.w	r3, r3, #4
 800eca2:	2b00      	cmp	r3, #0
 800eca4:	d031      	beq.n	800ed0a <UART_WaitOnFlagUntilTimeout+0xa6>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 800eca6:	68fb      	ldr	r3, [r7, #12]
 800eca8:	681b      	ldr	r3, [r3, #0]
 800ecaa:	69db      	ldr	r3, [r3, #28]
 800ecac:	f003 0308 	and.w	r3, r3, #8
 800ecb0:	2b08      	cmp	r3, #8
 800ecb2:	d110      	bne.n	800ecd6 <UART_WaitOnFlagUntilTimeout+0x72>
        {
           /* Clear Overrun Error flag*/
           __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 800ecb4:	68fb      	ldr	r3, [r7, #12]
 800ecb6:	681b      	ldr	r3, [r3, #0]
 800ecb8:	2208      	movs	r2, #8
 800ecba:	621a      	str	r2, [r3, #32]

           /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts if ongoing */
           UART_EndRxTransfer(huart);
 800ecbc:	68f8      	ldr	r0, [r7, #12]
 800ecbe:	f000 f839 	bl	800ed34 <UART_EndRxTransfer>

           huart->ErrorCode = HAL_UART_ERROR_ORE;
 800ecc2:	68fb      	ldr	r3, [r7, #12]
 800ecc4:	2208      	movs	r2, #8
 800ecc6:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

           /* Process Unlocked */
           __HAL_UNLOCK(huart);
 800ecca:	68fb      	ldr	r3, [r7, #12]
 800eccc:	2200      	movs	r2, #0
 800ecce:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

           return HAL_ERROR;
 800ecd2:	2301      	movs	r3, #1
 800ecd4:	e029      	b.n	800ed2a <UART_WaitOnFlagUntilTimeout+0xc6>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800ecd6:	68fb      	ldr	r3, [r7, #12]
 800ecd8:	681b      	ldr	r3, [r3, #0]
 800ecda:	69db      	ldr	r3, [r3, #28]
 800ecdc:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800ece0:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800ece4:	d111      	bne.n	800ed0a <UART_WaitOnFlagUntilTimeout+0xa6>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800ece6:	68fb      	ldr	r3, [r7, #12]
 800ece8:	681b      	ldr	r3, [r3, #0]
 800ecea:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800ecee:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800ecf0:	68f8      	ldr	r0, [r7, #12]
 800ecf2:	f000 f81f 	bl	800ed34 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800ecf6:	68fb      	ldr	r3, [r7, #12]
 800ecf8:	2220      	movs	r2, #32
 800ecfa:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800ecfe:	68fb      	ldr	r3, [r7, #12]
 800ed00:	2200      	movs	r2, #0
 800ed02:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

          return HAL_TIMEOUT;
 800ed06:	2303      	movs	r3, #3
 800ed08:	e00f      	b.n	800ed2a <UART_WaitOnFlagUntilTimeout+0xc6>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800ed0a:	68fb      	ldr	r3, [r7, #12]
 800ed0c:	681b      	ldr	r3, [r3, #0]
 800ed0e:	69da      	ldr	r2, [r3, #28]
 800ed10:	68bb      	ldr	r3, [r7, #8]
 800ed12:	4013      	ands	r3, r2
 800ed14:	68ba      	ldr	r2, [r7, #8]
 800ed16:	429a      	cmp	r2, r3
 800ed18:	bf0c      	ite	eq
 800ed1a:	2301      	moveq	r3, #1
 800ed1c:	2300      	movne	r3, #0
 800ed1e:	b2db      	uxtb	r3, r3
 800ed20:	461a      	mov	r2, r3
 800ed22:	79fb      	ldrb	r3, [r7, #7]
 800ed24:	429a      	cmp	r2, r3
 800ed26:	d0a6      	beq.n	800ec76 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800ed28:	2300      	movs	r3, #0
}
 800ed2a:	4618      	mov	r0, r3
 800ed2c:	3710      	adds	r7, #16
 800ed2e:	46bd      	mov	sp, r7
 800ed30:	bd80      	pop	{r7, pc}
	...

0800ed34 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800ed34:	b480      	push	{r7}
 800ed36:	b095      	sub	sp, #84	; 0x54
 800ed38:	af00      	add	r7, sp, #0
 800ed3a:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800ed3c:	687b      	ldr	r3, [r7, #4]
 800ed3e:	681b      	ldr	r3, [r3, #0]
 800ed40:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ed42:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800ed44:	e853 3f00 	ldrex	r3, [r3]
 800ed48:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 800ed4a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ed4c:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800ed50:	64fb      	str	r3, [r7, #76]	; 0x4c
 800ed52:	687b      	ldr	r3, [r7, #4]
 800ed54:	681b      	ldr	r3, [r3, #0]
 800ed56:	461a      	mov	r2, r3
 800ed58:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800ed5a:	643b      	str	r3, [r7, #64]	; 0x40
 800ed5c:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ed5e:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800ed60:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800ed62:	e841 2300 	strex	r3, r2, [r1]
 800ed66:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800ed68:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ed6a:	2b00      	cmp	r3, #0
 800ed6c:	d1e6      	bne.n	800ed3c <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800ed6e:	687b      	ldr	r3, [r7, #4]
 800ed70:	681b      	ldr	r3, [r3, #0]
 800ed72:	3308      	adds	r3, #8
 800ed74:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ed76:	6a3b      	ldr	r3, [r7, #32]
 800ed78:	e853 3f00 	ldrex	r3, [r3]
 800ed7c:	61fb      	str	r3, [r7, #28]
   return(result);
 800ed7e:	69fa      	ldr	r2, [r7, #28]
 800ed80:	4b1e      	ldr	r3, [pc, #120]	; (800edfc <UART_EndRxTransfer+0xc8>)
 800ed82:	4013      	ands	r3, r2
 800ed84:	64bb      	str	r3, [r7, #72]	; 0x48
 800ed86:	687b      	ldr	r3, [r7, #4]
 800ed88:	681b      	ldr	r3, [r3, #0]
 800ed8a:	3308      	adds	r3, #8
 800ed8c:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800ed8e:	62fa      	str	r2, [r7, #44]	; 0x2c
 800ed90:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ed92:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800ed94:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800ed96:	e841 2300 	strex	r3, r2, [r1]
 800ed9a:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800ed9c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ed9e:	2b00      	cmp	r3, #0
 800eda0:	d1e5      	bne.n	800ed6e <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800eda2:	687b      	ldr	r3, [r7, #4]
 800eda4:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800eda6:	2b01      	cmp	r3, #1
 800eda8:	d118      	bne.n	800eddc <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800edaa:	687b      	ldr	r3, [r7, #4]
 800edac:	681b      	ldr	r3, [r3, #0]
 800edae:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800edb0:	68fb      	ldr	r3, [r7, #12]
 800edb2:	e853 3f00 	ldrex	r3, [r3]
 800edb6:	60bb      	str	r3, [r7, #8]
   return(result);
 800edb8:	68bb      	ldr	r3, [r7, #8]
 800edba:	f023 0310 	bic.w	r3, r3, #16
 800edbe:	647b      	str	r3, [r7, #68]	; 0x44
 800edc0:	687b      	ldr	r3, [r7, #4]
 800edc2:	681b      	ldr	r3, [r3, #0]
 800edc4:	461a      	mov	r2, r3
 800edc6:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800edc8:	61bb      	str	r3, [r7, #24]
 800edca:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800edcc:	6979      	ldr	r1, [r7, #20]
 800edce:	69ba      	ldr	r2, [r7, #24]
 800edd0:	e841 2300 	strex	r3, r2, [r1]
 800edd4:	613b      	str	r3, [r7, #16]
   return(result);
 800edd6:	693b      	ldr	r3, [r7, #16]
 800edd8:	2b00      	cmp	r3, #0
 800edda:	d1e6      	bne.n	800edaa <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800eddc:	687b      	ldr	r3, [r7, #4]
 800edde:	2220      	movs	r2, #32
 800ede0:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800ede4:	687b      	ldr	r3, [r7, #4]
 800ede6:	2200      	movs	r2, #0
 800ede8:	66da      	str	r2, [r3, #108]	; 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 800edea:	687b      	ldr	r3, [r7, #4]
 800edec:	2200      	movs	r2, #0
 800edee:	675a      	str	r2, [r3, #116]	; 0x74
}
 800edf0:	bf00      	nop
 800edf2:	3754      	adds	r7, #84	; 0x54
 800edf4:	46bd      	mov	sp, r7
 800edf6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800edfa:	4770      	bx	lr
 800edfc:	effffffe 	.word	0xeffffffe

0800ee00 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 800ee00:	b480      	push	{r7}
 800ee02:	b085      	sub	sp, #20
 800ee04:	af00      	add	r7, sp, #0
 800ee06:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 800ee08:	687b      	ldr	r3, [r7, #4]
 800ee0a:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 800ee0e:	2b01      	cmp	r3, #1
 800ee10:	d101      	bne.n	800ee16 <HAL_UARTEx_DisableFifoMode+0x16>
 800ee12:	2302      	movs	r3, #2
 800ee14:	e027      	b.n	800ee66 <HAL_UARTEx_DisableFifoMode+0x66>
 800ee16:	687b      	ldr	r3, [r7, #4]
 800ee18:	2201      	movs	r2, #1
 800ee1a:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800ee1e:	687b      	ldr	r3, [r7, #4]
 800ee20:	2224      	movs	r2, #36	; 0x24
 800ee22:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800ee26:	687b      	ldr	r3, [r7, #4]
 800ee28:	681b      	ldr	r3, [r3, #0]
 800ee2a:	681b      	ldr	r3, [r3, #0]
 800ee2c:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800ee2e:	687b      	ldr	r3, [r7, #4]
 800ee30:	681b      	ldr	r3, [r3, #0]
 800ee32:	681a      	ldr	r2, [r3, #0]
 800ee34:	687b      	ldr	r3, [r7, #4]
 800ee36:	681b      	ldr	r3, [r3, #0]
 800ee38:	f022 0201 	bic.w	r2, r2, #1
 800ee3c:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 800ee3e:	68fb      	ldr	r3, [r7, #12]
 800ee40:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 800ee44:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 800ee46:	687b      	ldr	r3, [r7, #4]
 800ee48:	2200      	movs	r2, #0
 800ee4a:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800ee4c:	687b      	ldr	r3, [r7, #4]
 800ee4e:	681b      	ldr	r3, [r3, #0]
 800ee50:	68fa      	ldr	r2, [r7, #12]
 800ee52:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800ee54:	687b      	ldr	r3, [r7, #4]
 800ee56:	2220      	movs	r2, #32
 800ee58:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800ee5c:	687b      	ldr	r3, [r7, #4]
 800ee5e:	2200      	movs	r2, #0
 800ee60:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 800ee64:	2300      	movs	r3, #0
}
 800ee66:	4618      	mov	r0, r3
 800ee68:	3714      	adds	r7, #20
 800ee6a:	46bd      	mov	sp, r7
 800ee6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ee70:	4770      	bx	lr

0800ee72 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800ee72:	b580      	push	{r7, lr}
 800ee74:	b084      	sub	sp, #16
 800ee76:	af00      	add	r7, sp, #0
 800ee78:	6078      	str	r0, [r7, #4]
 800ee7a:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800ee7c:	687b      	ldr	r3, [r7, #4]
 800ee7e:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 800ee82:	2b01      	cmp	r3, #1
 800ee84:	d101      	bne.n	800ee8a <HAL_UARTEx_SetTxFifoThreshold+0x18>
 800ee86:	2302      	movs	r3, #2
 800ee88:	e02d      	b.n	800eee6 <HAL_UARTEx_SetTxFifoThreshold+0x74>
 800ee8a:	687b      	ldr	r3, [r7, #4]
 800ee8c:	2201      	movs	r2, #1
 800ee8e:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800ee92:	687b      	ldr	r3, [r7, #4]
 800ee94:	2224      	movs	r2, #36	; 0x24
 800ee96:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800ee9a:	687b      	ldr	r3, [r7, #4]
 800ee9c:	681b      	ldr	r3, [r3, #0]
 800ee9e:	681b      	ldr	r3, [r3, #0]
 800eea0:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800eea2:	687b      	ldr	r3, [r7, #4]
 800eea4:	681b      	ldr	r3, [r3, #0]
 800eea6:	681a      	ldr	r2, [r3, #0]
 800eea8:	687b      	ldr	r3, [r7, #4]
 800eeaa:	681b      	ldr	r3, [r3, #0]
 800eeac:	f022 0201 	bic.w	r2, r2, #1
 800eeb0:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 800eeb2:	687b      	ldr	r3, [r7, #4]
 800eeb4:	681b      	ldr	r3, [r3, #0]
 800eeb6:	689b      	ldr	r3, [r3, #8]
 800eeb8:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 800eebc:	687b      	ldr	r3, [r7, #4]
 800eebe:	681b      	ldr	r3, [r3, #0]
 800eec0:	683a      	ldr	r2, [r7, #0]
 800eec2:	430a      	orrs	r2, r1
 800eec4:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800eec6:	6878      	ldr	r0, [r7, #4]
 800eec8:	f000 f850 	bl	800ef6c <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800eecc:	687b      	ldr	r3, [r7, #4]
 800eece:	681b      	ldr	r3, [r3, #0]
 800eed0:	68fa      	ldr	r2, [r7, #12]
 800eed2:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800eed4:	687b      	ldr	r3, [r7, #4]
 800eed6:	2220      	movs	r2, #32
 800eed8:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800eedc:	687b      	ldr	r3, [r7, #4]
 800eede:	2200      	movs	r2, #0
 800eee0:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 800eee4:	2300      	movs	r3, #0
}
 800eee6:	4618      	mov	r0, r3
 800eee8:	3710      	adds	r7, #16
 800eeea:	46bd      	mov	sp, r7
 800eeec:	bd80      	pop	{r7, pc}

0800eeee <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800eeee:	b580      	push	{r7, lr}
 800eef0:	b084      	sub	sp, #16
 800eef2:	af00      	add	r7, sp, #0
 800eef4:	6078      	str	r0, [r7, #4]
 800eef6:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800eef8:	687b      	ldr	r3, [r7, #4]
 800eefa:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 800eefe:	2b01      	cmp	r3, #1
 800ef00:	d101      	bne.n	800ef06 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 800ef02:	2302      	movs	r3, #2
 800ef04:	e02d      	b.n	800ef62 <HAL_UARTEx_SetRxFifoThreshold+0x74>
 800ef06:	687b      	ldr	r3, [r7, #4]
 800ef08:	2201      	movs	r2, #1
 800ef0a:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800ef0e:	687b      	ldr	r3, [r7, #4]
 800ef10:	2224      	movs	r2, #36	; 0x24
 800ef12:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800ef16:	687b      	ldr	r3, [r7, #4]
 800ef18:	681b      	ldr	r3, [r3, #0]
 800ef1a:	681b      	ldr	r3, [r3, #0]
 800ef1c:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800ef1e:	687b      	ldr	r3, [r7, #4]
 800ef20:	681b      	ldr	r3, [r3, #0]
 800ef22:	681a      	ldr	r2, [r3, #0]
 800ef24:	687b      	ldr	r3, [r7, #4]
 800ef26:	681b      	ldr	r3, [r3, #0]
 800ef28:	f022 0201 	bic.w	r2, r2, #1
 800ef2c:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 800ef2e:	687b      	ldr	r3, [r7, #4]
 800ef30:	681b      	ldr	r3, [r3, #0]
 800ef32:	689b      	ldr	r3, [r3, #8]
 800ef34:	f023 6160 	bic.w	r1, r3, #234881024	; 0xe000000
 800ef38:	687b      	ldr	r3, [r7, #4]
 800ef3a:	681b      	ldr	r3, [r3, #0]
 800ef3c:	683a      	ldr	r2, [r7, #0]
 800ef3e:	430a      	orrs	r2, r1
 800ef40:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800ef42:	6878      	ldr	r0, [r7, #4]
 800ef44:	f000 f812 	bl	800ef6c <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800ef48:	687b      	ldr	r3, [r7, #4]
 800ef4a:	681b      	ldr	r3, [r3, #0]
 800ef4c:	68fa      	ldr	r2, [r7, #12]
 800ef4e:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800ef50:	687b      	ldr	r3, [r7, #4]
 800ef52:	2220      	movs	r2, #32
 800ef54:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800ef58:	687b      	ldr	r3, [r7, #4]
 800ef5a:	2200      	movs	r2, #0
 800ef5c:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 800ef60:	2300      	movs	r3, #0
}
 800ef62:	4618      	mov	r0, r3
 800ef64:	3710      	adds	r7, #16
 800ef66:	46bd      	mov	sp, r7
 800ef68:	bd80      	pop	{r7, pc}
	...

0800ef6c <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 800ef6c:	b480      	push	{r7}
 800ef6e:	b085      	sub	sp, #20
 800ef70:	af00      	add	r7, sp, #0
 800ef72:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 800ef74:	687b      	ldr	r3, [r7, #4]
 800ef76:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800ef78:	2b00      	cmp	r3, #0
 800ef7a:	d108      	bne.n	800ef8e <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 800ef7c:	687b      	ldr	r3, [r7, #4]
 800ef7e:	2201      	movs	r2, #1
 800ef80:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = 1U;
 800ef84:	687b      	ldr	r3, [r7, #4]
 800ef86:	2201      	movs	r2, #1
 800ef88:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 800ef8c:	e031      	b.n	800eff2 <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 800ef8e:	2310      	movs	r3, #16
 800ef90:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 800ef92:	2310      	movs	r3, #16
 800ef94:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 800ef96:	687b      	ldr	r3, [r7, #4]
 800ef98:	681b      	ldr	r3, [r3, #0]
 800ef9a:	689b      	ldr	r3, [r3, #8]
 800ef9c:	0e5b      	lsrs	r3, r3, #25
 800ef9e:	b2db      	uxtb	r3, r3
 800efa0:	f003 0307 	and.w	r3, r3, #7
 800efa4:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 800efa6:	687b      	ldr	r3, [r7, #4]
 800efa8:	681b      	ldr	r3, [r3, #0]
 800efaa:	689b      	ldr	r3, [r3, #8]
 800efac:	0f5b      	lsrs	r3, r3, #29
 800efae:	b2db      	uxtb	r3, r3
 800efb0:	f003 0307 	and.w	r3, r3, #7
 800efb4:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800efb6:	7bbb      	ldrb	r3, [r7, #14]
 800efb8:	7b3a      	ldrb	r2, [r7, #12]
 800efba:	4911      	ldr	r1, [pc, #68]	; (800f000 <UARTEx_SetNbDataToProcess+0x94>)
 800efbc:	5c8a      	ldrb	r2, [r1, r2]
 800efbe:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 800efc2:	7b3a      	ldrb	r2, [r7, #12]
 800efc4:	490f      	ldr	r1, [pc, #60]	; (800f004 <UARTEx_SetNbDataToProcess+0x98>)
 800efc6:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800efc8:	fb93 f3f2 	sdiv	r3, r3, r2
 800efcc:	b29a      	uxth	r2, r3
 800efce:	687b      	ldr	r3, [r7, #4]
 800efd0:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800efd4:	7bfb      	ldrb	r3, [r7, #15]
 800efd6:	7b7a      	ldrb	r2, [r7, #13]
 800efd8:	4909      	ldr	r1, [pc, #36]	; (800f000 <UARTEx_SetNbDataToProcess+0x94>)
 800efda:	5c8a      	ldrb	r2, [r1, r2]
 800efdc:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 800efe0:	7b7a      	ldrb	r2, [r7, #13]
 800efe2:	4908      	ldr	r1, [pc, #32]	; (800f004 <UARTEx_SetNbDataToProcess+0x98>)
 800efe4:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800efe6:	fb93 f3f2 	sdiv	r3, r3, r2
 800efea:	b29a      	uxth	r2, r3
 800efec:	687b      	ldr	r3, [r7, #4]
 800efee:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
}
 800eff2:	bf00      	nop
 800eff4:	3714      	adds	r7, #20
 800eff6:	46bd      	mov	sp, r7
 800eff8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800effc:	4770      	bx	lr
 800effe:	bf00      	nop
 800f000:	0801f3e0 	.word	0x0801f3e0
 800f004:	0801f3e8 	.word	0x0801f3e8

0800f008 <MX_LWIP_Init>:

/**
  * LwIP initialization function
  */
void MX_LWIP_Init(void)
{
 800f008:	b580      	push	{r7, lr}
 800f00a:	b084      	sub	sp, #16
 800f00c:	af04      	add	r7, sp, #16
  /* IP addresses initialization */
  IP_ADDRESS[0] = 192;
 800f00e:	4b87      	ldr	r3, [pc, #540]	; (800f22c <MX_LWIP_Init+0x224>)
 800f010:	22c0      	movs	r2, #192	; 0xc0
 800f012:	701a      	strb	r2, [r3, #0]
  IP_ADDRESS[1] = 168;
 800f014:	4b85      	ldr	r3, [pc, #532]	; (800f22c <MX_LWIP_Init+0x224>)
 800f016:	22a8      	movs	r2, #168	; 0xa8
 800f018:	705a      	strb	r2, [r3, #1]
  IP_ADDRESS[2] = 1;
 800f01a:	4b84      	ldr	r3, [pc, #528]	; (800f22c <MX_LWIP_Init+0x224>)
 800f01c:	2201      	movs	r2, #1
 800f01e:	709a      	strb	r2, [r3, #2]
  IP_ADDRESS[3] = 10;
 800f020:	4b82      	ldr	r3, [pc, #520]	; (800f22c <MX_LWIP_Init+0x224>)
 800f022:	220a      	movs	r2, #10
 800f024:	70da      	strb	r2, [r3, #3]
  NETMASK_ADDRESS[0] = 255;
 800f026:	4b82      	ldr	r3, [pc, #520]	; (800f230 <MX_LWIP_Init+0x228>)
 800f028:	22ff      	movs	r2, #255	; 0xff
 800f02a:	701a      	strb	r2, [r3, #0]
  NETMASK_ADDRESS[1] = 255;
 800f02c:	4b80      	ldr	r3, [pc, #512]	; (800f230 <MX_LWIP_Init+0x228>)
 800f02e:	22ff      	movs	r2, #255	; 0xff
 800f030:	705a      	strb	r2, [r3, #1]
  NETMASK_ADDRESS[2] = 0;
 800f032:	4b7f      	ldr	r3, [pc, #508]	; (800f230 <MX_LWIP_Init+0x228>)
 800f034:	2200      	movs	r2, #0
 800f036:	709a      	strb	r2, [r3, #2]
  NETMASK_ADDRESS[3] = 0;
 800f038:	4b7d      	ldr	r3, [pc, #500]	; (800f230 <MX_LWIP_Init+0x228>)
 800f03a:	2200      	movs	r2, #0
 800f03c:	70da      	strb	r2, [r3, #3]
  GATEWAY_ADDRESS[0] = 192;
 800f03e:	4b7d      	ldr	r3, [pc, #500]	; (800f234 <MX_LWIP_Init+0x22c>)
 800f040:	22c0      	movs	r2, #192	; 0xc0
 800f042:	701a      	strb	r2, [r3, #0]
  GATEWAY_ADDRESS[1] = 168;
 800f044:	4b7b      	ldr	r3, [pc, #492]	; (800f234 <MX_LWIP_Init+0x22c>)
 800f046:	22a8      	movs	r2, #168	; 0xa8
 800f048:	705a      	strb	r2, [r3, #1]
  GATEWAY_ADDRESS[2] = 1;
 800f04a:	4b7a      	ldr	r3, [pc, #488]	; (800f234 <MX_LWIP_Init+0x22c>)
 800f04c:	2201      	movs	r2, #1
 800f04e:	709a      	strb	r2, [r3, #2]
  GATEWAY_ADDRESS[3] = 1;
 800f050:	4b78      	ldr	r3, [pc, #480]	; (800f234 <MX_LWIP_Init+0x22c>)
 800f052:	2201      	movs	r2, #1
 800f054:	70da      	strb	r2, [r3, #3]

/* USER CODE BEGIN IP_ADDRESSES */
/* USER CODE END IP_ADDRESSES */

  /* Initilialize the LwIP stack without RTOS */
  lwip_init();
 800f056:	f000 fd31 	bl	800fabc <lwip_init>

  /* IP addresses initialization without DHCP (IPv4) */
  IP4_ADDR(&ipaddr, IP_ADDRESS[0], IP_ADDRESS[1], IP_ADDRESS[2], IP_ADDRESS[3]);
 800f05a:	4b74      	ldr	r3, [pc, #464]	; (800f22c <MX_LWIP_Init+0x224>)
 800f05c:	781b      	ldrb	r3, [r3, #0]
 800f05e:	061a      	lsls	r2, r3, #24
 800f060:	4b72      	ldr	r3, [pc, #456]	; (800f22c <MX_LWIP_Init+0x224>)
 800f062:	785b      	ldrb	r3, [r3, #1]
 800f064:	041b      	lsls	r3, r3, #16
 800f066:	431a      	orrs	r2, r3
 800f068:	4b70      	ldr	r3, [pc, #448]	; (800f22c <MX_LWIP_Init+0x224>)
 800f06a:	789b      	ldrb	r3, [r3, #2]
 800f06c:	021b      	lsls	r3, r3, #8
 800f06e:	4313      	orrs	r3, r2
 800f070:	4a6e      	ldr	r2, [pc, #440]	; (800f22c <MX_LWIP_Init+0x224>)
 800f072:	78d2      	ldrb	r2, [r2, #3]
 800f074:	4313      	orrs	r3, r2
 800f076:	061a      	lsls	r2, r3, #24
 800f078:	4b6c      	ldr	r3, [pc, #432]	; (800f22c <MX_LWIP_Init+0x224>)
 800f07a:	781b      	ldrb	r3, [r3, #0]
 800f07c:	0619      	lsls	r1, r3, #24
 800f07e:	4b6b      	ldr	r3, [pc, #428]	; (800f22c <MX_LWIP_Init+0x224>)
 800f080:	785b      	ldrb	r3, [r3, #1]
 800f082:	041b      	lsls	r3, r3, #16
 800f084:	4319      	orrs	r1, r3
 800f086:	4b69      	ldr	r3, [pc, #420]	; (800f22c <MX_LWIP_Init+0x224>)
 800f088:	789b      	ldrb	r3, [r3, #2]
 800f08a:	021b      	lsls	r3, r3, #8
 800f08c:	430b      	orrs	r3, r1
 800f08e:	4967      	ldr	r1, [pc, #412]	; (800f22c <MX_LWIP_Init+0x224>)
 800f090:	78c9      	ldrb	r1, [r1, #3]
 800f092:	430b      	orrs	r3, r1
 800f094:	021b      	lsls	r3, r3, #8
 800f096:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 800f09a:	431a      	orrs	r2, r3
 800f09c:	4b63      	ldr	r3, [pc, #396]	; (800f22c <MX_LWIP_Init+0x224>)
 800f09e:	781b      	ldrb	r3, [r3, #0]
 800f0a0:	0619      	lsls	r1, r3, #24
 800f0a2:	4b62      	ldr	r3, [pc, #392]	; (800f22c <MX_LWIP_Init+0x224>)
 800f0a4:	785b      	ldrb	r3, [r3, #1]
 800f0a6:	041b      	lsls	r3, r3, #16
 800f0a8:	4319      	orrs	r1, r3
 800f0aa:	4b60      	ldr	r3, [pc, #384]	; (800f22c <MX_LWIP_Init+0x224>)
 800f0ac:	789b      	ldrb	r3, [r3, #2]
 800f0ae:	021b      	lsls	r3, r3, #8
 800f0b0:	430b      	orrs	r3, r1
 800f0b2:	495e      	ldr	r1, [pc, #376]	; (800f22c <MX_LWIP_Init+0x224>)
 800f0b4:	78c9      	ldrb	r1, [r1, #3]
 800f0b6:	430b      	orrs	r3, r1
 800f0b8:	0a1b      	lsrs	r3, r3, #8
 800f0ba:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 800f0be:	431a      	orrs	r2, r3
 800f0c0:	4b5a      	ldr	r3, [pc, #360]	; (800f22c <MX_LWIP_Init+0x224>)
 800f0c2:	781b      	ldrb	r3, [r3, #0]
 800f0c4:	0619      	lsls	r1, r3, #24
 800f0c6:	4b59      	ldr	r3, [pc, #356]	; (800f22c <MX_LWIP_Init+0x224>)
 800f0c8:	785b      	ldrb	r3, [r3, #1]
 800f0ca:	041b      	lsls	r3, r3, #16
 800f0cc:	4319      	orrs	r1, r3
 800f0ce:	4b57      	ldr	r3, [pc, #348]	; (800f22c <MX_LWIP_Init+0x224>)
 800f0d0:	789b      	ldrb	r3, [r3, #2]
 800f0d2:	021b      	lsls	r3, r3, #8
 800f0d4:	430b      	orrs	r3, r1
 800f0d6:	4955      	ldr	r1, [pc, #340]	; (800f22c <MX_LWIP_Init+0x224>)
 800f0d8:	78c9      	ldrb	r1, [r1, #3]
 800f0da:	430b      	orrs	r3, r1
 800f0dc:	0e1b      	lsrs	r3, r3, #24
 800f0de:	4313      	orrs	r3, r2
 800f0e0:	4a55      	ldr	r2, [pc, #340]	; (800f238 <MX_LWIP_Init+0x230>)
 800f0e2:	6013      	str	r3, [r2, #0]
  IP4_ADDR(&netmask, NETMASK_ADDRESS[0], NETMASK_ADDRESS[1] , NETMASK_ADDRESS[2], NETMASK_ADDRESS[3]);
 800f0e4:	4b52      	ldr	r3, [pc, #328]	; (800f230 <MX_LWIP_Init+0x228>)
 800f0e6:	781b      	ldrb	r3, [r3, #0]
 800f0e8:	061a      	lsls	r2, r3, #24
 800f0ea:	4b51      	ldr	r3, [pc, #324]	; (800f230 <MX_LWIP_Init+0x228>)
 800f0ec:	785b      	ldrb	r3, [r3, #1]
 800f0ee:	041b      	lsls	r3, r3, #16
 800f0f0:	431a      	orrs	r2, r3
 800f0f2:	4b4f      	ldr	r3, [pc, #316]	; (800f230 <MX_LWIP_Init+0x228>)
 800f0f4:	789b      	ldrb	r3, [r3, #2]
 800f0f6:	021b      	lsls	r3, r3, #8
 800f0f8:	4313      	orrs	r3, r2
 800f0fa:	4a4d      	ldr	r2, [pc, #308]	; (800f230 <MX_LWIP_Init+0x228>)
 800f0fc:	78d2      	ldrb	r2, [r2, #3]
 800f0fe:	4313      	orrs	r3, r2
 800f100:	061a      	lsls	r2, r3, #24
 800f102:	4b4b      	ldr	r3, [pc, #300]	; (800f230 <MX_LWIP_Init+0x228>)
 800f104:	781b      	ldrb	r3, [r3, #0]
 800f106:	0619      	lsls	r1, r3, #24
 800f108:	4b49      	ldr	r3, [pc, #292]	; (800f230 <MX_LWIP_Init+0x228>)
 800f10a:	785b      	ldrb	r3, [r3, #1]
 800f10c:	041b      	lsls	r3, r3, #16
 800f10e:	4319      	orrs	r1, r3
 800f110:	4b47      	ldr	r3, [pc, #284]	; (800f230 <MX_LWIP_Init+0x228>)
 800f112:	789b      	ldrb	r3, [r3, #2]
 800f114:	021b      	lsls	r3, r3, #8
 800f116:	430b      	orrs	r3, r1
 800f118:	4945      	ldr	r1, [pc, #276]	; (800f230 <MX_LWIP_Init+0x228>)
 800f11a:	78c9      	ldrb	r1, [r1, #3]
 800f11c:	430b      	orrs	r3, r1
 800f11e:	021b      	lsls	r3, r3, #8
 800f120:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 800f124:	431a      	orrs	r2, r3
 800f126:	4b42      	ldr	r3, [pc, #264]	; (800f230 <MX_LWIP_Init+0x228>)
 800f128:	781b      	ldrb	r3, [r3, #0]
 800f12a:	0619      	lsls	r1, r3, #24
 800f12c:	4b40      	ldr	r3, [pc, #256]	; (800f230 <MX_LWIP_Init+0x228>)
 800f12e:	785b      	ldrb	r3, [r3, #1]
 800f130:	041b      	lsls	r3, r3, #16
 800f132:	4319      	orrs	r1, r3
 800f134:	4b3e      	ldr	r3, [pc, #248]	; (800f230 <MX_LWIP_Init+0x228>)
 800f136:	789b      	ldrb	r3, [r3, #2]
 800f138:	021b      	lsls	r3, r3, #8
 800f13a:	430b      	orrs	r3, r1
 800f13c:	493c      	ldr	r1, [pc, #240]	; (800f230 <MX_LWIP_Init+0x228>)
 800f13e:	78c9      	ldrb	r1, [r1, #3]
 800f140:	430b      	orrs	r3, r1
 800f142:	0a1b      	lsrs	r3, r3, #8
 800f144:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 800f148:	431a      	orrs	r2, r3
 800f14a:	4b39      	ldr	r3, [pc, #228]	; (800f230 <MX_LWIP_Init+0x228>)
 800f14c:	781b      	ldrb	r3, [r3, #0]
 800f14e:	0619      	lsls	r1, r3, #24
 800f150:	4b37      	ldr	r3, [pc, #220]	; (800f230 <MX_LWIP_Init+0x228>)
 800f152:	785b      	ldrb	r3, [r3, #1]
 800f154:	041b      	lsls	r3, r3, #16
 800f156:	4319      	orrs	r1, r3
 800f158:	4b35      	ldr	r3, [pc, #212]	; (800f230 <MX_LWIP_Init+0x228>)
 800f15a:	789b      	ldrb	r3, [r3, #2]
 800f15c:	021b      	lsls	r3, r3, #8
 800f15e:	430b      	orrs	r3, r1
 800f160:	4933      	ldr	r1, [pc, #204]	; (800f230 <MX_LWIP_Init+0x228>)
 800f162:	78c9      	ldrb	r1, [r1, #3]
 800f164:	430b      	orrs	r3, r1
 800f166:	0e1b      	lsrs	r3, r3, #24
 800f168:	4313      	orrs	r3, r2
 800f16a:	4a34      	ldr	r2, [pc, #208]	; (800f23c <MX_LWIP_Init+0x234>)
 800f16c:	6013      	str	r3, [r2, #0]
  IP4_ADDR(&gw, GATEWAY_ADDRESS[0], GATEWAY_ADDRESS[1], GATEWAY_ADDRESS[2], GATEWAY_ADDRESS[3]);
 800f16e:	4b31      	ldr	r3, [pc, #196]	; (800f234 <MX_LWIP_Init+0x22c>)
 800f170:	781b      	ldrb	r3, [r3, #0]
 800f172:	061a      	lsls	r2, r3, #24
 800f174:	4b2f      	ldr	r3, [pc, #188]	; (800f234 <MX_LWIP_Init+0x22c>)
 800f176:	785b      	ldrb	r3, [r3, #1]
 800f178:	041b      	lsls	r3, r3, #16
 800f17a:	431a      	orrs	r2, r3
 800f17c:	4b2d      	ldr	r3, [pc, #180]	; (800f234 <MX_LWIP_Init+0x22c>)
 800f17e:	789b      	ldrb	r3, [r3, #2]
 800f180:	021b      	lsls	r3, r3, #8
 800f182:	4313      	orrs	r3, r2
 800f184:	4a2b      	ldr	r2, [pc, #172]	; (800f234 <MX_LWIP_Init+0x22c>)
 800f186:	78d2      	ldrb	r2, [r2, #3]
 800f188:	4313      	orrs	r3, r2
 800f18a:	061a      	lsls	r2, r3, #24
 800f18c:	4b29      	ldr	r3, [pc, #164]	; (800f234 <MX_LWIP_Init+0x22c>)
 800f18e:	781b      	ldrb	r3, [r3, #0]
 800f190:	0619      	lsls	r1, r3, #24
 800f192:	4b28      	ldr	r3, [pc, #160]	; (800f234 <MX_LWIP_Init+0x22c>)
 800f194:	785b      	ldrb	r3, [r3, #1]
 800f196:	041b      	lsls	r3, r3, #16
 800f198:	4319      	orrs	r1, r3
 800f19a:	4b26      	ldr	r3, [pc, #152]	; (800f234 <MX_LWIP_Init+0x22c>)
 800f19c:	789b      	ldrb	r3, [r3, #2]
 800f19e:	021b      	lsls	r3, r3, #8
 800f1a0:	430b      	orrs	r3, r1
 800f1a2:	4924      	ldr	r1, [pc, #144]	; (800f234 <MX_LWIP_Init+0x22c>)
 800f1a4:	78c9      	ldrb	r1, [r1, #3]
 800f1a6:	430b      	orrs	r3, r1
 800f1a8:	021b      	lsls	r3, r3, #8
 800f1aa:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 800f1ae:	431a      	orrs	r2, r3
 800f1b0:	4b20      	ldr	r3, [pc, #128]	; (800f234 <MX_LWIP_Init+0x22c>)
 800f1b2:	781b      	ldrb	r3, [r3, #0]
 800f1b4:	0619      	lsls	r1, r3, #24
 800f1b6:	4b1f      	ldr	r3, [pc, #124]	; (800f234 <MX_LWIP_Init+0x22c>)
 800f1b8:	785b      	ldrb	r3, [r3, #1]
 800f1ba:	041b      	lsls	r3, r3, #16
 800f1bc:	4319      	orrs	r1, r3
 800f1be:	4b1d      	ldr	r3, [pc, #116]	; (800f234 <MX_LWIP_Init+0x22c>)
 800f1c0:	789b      	ldrb	r3, [r3, #2]
 800f1c2:	021b      	lsls	r3, r3, #8
 800f1c4:	430b      	orrs	r3, r1
 800f1c6:	491b      	ldr	r1, [pc, #108]	; (800f234 <MX_LWIP_Init+0x22c>)
 800f1c8:	78c9      	ldrb	r1, [r1, #3]
 800f1ca:	430b      	orrs	r3, r1
 800f1cc:	0a1b      	lsrs	r3, r3, #8
 800f1ce:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 800f1d2:	431a      	orrs	r2, r3
 800f1d4:	4b17      	ldr	r3, [pc, #92]	; (800f234 <MX_LWIP_Init+0x22c>)
 800f1d6:	781b      	ldrb	r3, [r3, #0]
 800f1d8:	0619      	lsls	r1, r3, #24
 800f1da:	4b16      	ldr	r3, [pc, #88]	; (800f234 <MX_LWIP_Init+0x22c>)
 800f1dc:	785b      	ldrb	r3, [r3, #1]
 800f1de:	041b      	lsls	r3, r3, #16
 800f1e0:	4319      	orrs	r1, r3
 800f1e2:	4b14      	ldr	r3, [pc, #80]	; (800f234 <MX_LWIP_Init+0x22c>)
 800f1e4:	789b      	ldrb	r3, [r3, #2]
 800f1e6:	021b      	lsls	r3, r3, #8
 800f1e8:	430b      	orrs	r3, r1
 800f1ea:	4912      	ldr	r1, [pc, #72]	; (800f234 <MX_LWIP_Init+0x22c>)
 800f1ec:	78c9      	ldrb	r1, [r1, #3]
 800f1ee:	430b      	orrs	r3, r1
 800f1f0:	0e1b      	lsrs	r3, r3, #24
 800f1f2:	4313      	orrs	r3, r2
 800f1f4:	4a12      	ldr	r2, [pc, #72]	; (800f240 <MX_LWIP_Init+0x238>)
 800f1f6:	6013      	str	r3, [r2, #0]

  /* add the network interface (IPv4/IPv6) without RTOS */
  netif_add(&gnetif, &ipaddr, &netmask, &gw, NULL, &ethernetif_init, &ethernet_input);
 800f1f8:	4b12      	ldr	r3, [pc, #72]	; (800f244 <MX_LWIP_Init+0x23c>)
 800f1fa:	9302      	str	r3, [sp, #8]
 800f1fc:	4b12      	ldr	r3, [pc, #72]	; (800f248 <MX_LWIP_Init+0x240>)
 800f1fe:	9301      	str	r3, [sp, #4]
 800f200:	2300      	movs	r3, #0
 800f202:	9300      	str	r3, [sp, #0]
 800f204:	4b0e      	ldr	r3, [pc, #56]	; (800f240 <MX_LWIP_Init+0x238>)
 800f206:	4a0d      	ldr	r2, [pc, #52]	; (800f23c <MX_LWIP_Init+0x234>)
 800f208:	490b      	ldr	r1, [pc, #44]	; (800f238 <MX_LWIP_Init+0x230>)
 800f20a:	4810      	ldr	r0, [pc, #64]	; (800f24c <MX_LWIP_Init+0x244>)
 800f20c:	f001 f92c 	bl	8010468 <netif_add>

  /* Registers the default network interface */
  netif_set_default(&gnetif);
 800f210:	480e      	ldr	r0, [pc, #56]	; (800f24c <MX_LWIP_Init+0x244>)
 800f212:	f001 fadb 	bl	80107cc <netif_set_default>

  /* We must always bring the network interface up connection or not... */
  netif_set_up(&gnetif);
 800f216:	480d      	ldr	r0, [pc, #52]	; (800f24c <MX_LWIP_Init+0x244>)
 800f218:	f001 fae8 	bl	80107ec <netif_set_up>

  /* Set the link callback function, this function is called on change of link status*/
  netif_set_link_callback(&gnetif, ethernet_link_status_updated);
 800f21c:	490c      	ldr	r1, [pc, #48]	; (800f250 <MX_LWIP_Init+0x248>)
 800f21e:	480b      	ldr	r0, [pc, #44]	; (800f24c <MX_LWIP_Init+0x244>)
 800f220:	f001 fbe6 	bl	80109f0 <netif_set_link_callback>
  /* Create the Ethernet link handler thread */

/* USER CODE BEGIN 3 */

/* USER CODE END 3 */
}
 800f224:	bf00      	nop
 800f226:	46bd      	mov	sp, r7
 800f228:	bd80      	pop	{r7, pc}
 800f22a:	bf00      	nop
 800f22c:	200006dc 	.word	0x200006dc
 800f230:	200006e0 	.word	0x200006e0
 800f234:	200006e4 	.word	0x200006e4
 800f238:	200006d0 	.word	0x200006d0
 800f23c:	200006d4 	.word	0x200006d4
 800f240:	200006d8 	.word	0x200006d8
 800f244:	0801923d 	.word	0x0801923d
 800f248:	0800f499 	.word	0x0800f499
 800f24c:	2000069c 	.word	0x2000069c
 800f250:	0800f255 	.word	0x0800f255

0800f254 <ethernet_link_status_updated>:
  * @brief  Notify the User about the network interface config status
  * @param  netif: the network interface
  * @retval None
  */
static void ethernet_link_status_updated(struct netif *netif)
{
 800f254:	b480      	push	{r7}
 800f256:	b083      	sub	sp, #12
 800f258:	af00      	add	r7, sp, #0
 800f25a:	6078      	str	r0, [r7, #4]
  else /* netif is down */
  {
/* USER CODE BEGIN 6 */
/* USER CODE END 6 */
  }
}
 800f25c:	bf00      	nop
 800f25e:	370c      	adds	r7, #12
 800f260:	46bd      	mov	sp, r7
 800f262:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f266:	4770      	bx	lr

0800f268 <low_level_init>:
 *
 * @param netif the already initialized lwip network interface structure
 *        for this ethernetif
 */
static void low_level_init(struct netif *netif)
{
 800f268:	b580      	push	{r7, lr}
 800f26a:	b084      	sub	sp, #16
 800f26c:	af00      	add	r7, sp, #0
 800f26e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_eth_init_status = HAL_OK;
 800f270:	2300      	movs	r3, #0
 800f272:	73fb      	strb	r3, [r7, #15]
  /* Start ETH HAL Init */

   uint8_t MACAddr[6] ;
  heth.Instance = ETH;
 800f274:	4b3f      	ldr	r3, [pc, #252]	; (800f374 <low_level_init+0x10c>)
 800f276:	4a40      	ldr	r2, [pc, #256]	; (800f378 <low_level_init+0x110>)
 800f278:	601a      	str	r2, [r3, #0]
  MACAddr[0] = 0x00;
 800f27a:	2300      	movs	r3, #0
 800f27c:	723b      	strb	r3, [r7, #8]
  MACAddr[1] = 0x80;
 800f27e:	2380      	movs	r3, #128	; 0x80
 800f280:	727b      	strb	r3, [r7, #9]
  MACAddr[2] = 0xE1;
 800f282:	23e1      	movs	r3, #225	; 0xe1
 800f284:	72bb      	strb	r3, [r7, #10]
  MACAddr[3] = 0x00;
 800f286:	2300      	movs	r3, #0
 800f288:	72fb      	strb	r3, [r7, #11]
  MACAddr[4] = 0x00;
 800f28a:	2300      	movs	r3, #0
 800f28c:	733b      	strb	r3, [r7, #12]
  MACAddr[5] = 0x00;
 800f28e:	2300      	movs	r3, #0
 800f290:	737b      	strb	r3, [r7, #13]
  heth.Init.MACAddr = &MACAddr[0];
 800f292:	4a38      	ldr	r2, [pc, #224]	; (800f374 <low_level_init+0x10c>)
 800f294:	f107 0308 	add.w	r3, r7, #8
 800f298:	6053      	str	r3, [r2, #4]
  heth.Init.MediaInterface = HAL_ETH_RMII_MODE;
 800f29a:	4b36      	ldr	r3, [pc, #216]	; (800f374 <low_level_init+0x10c>)
 800f29c:	2201      	movs	r2, #1
 800f29e:	721a      	strb	r2, [r3, #8]
  heth.Init.TxDesc = DMATxDscrTab;
 800f2a0:	4b34      	ldr	r3, [pc, #208]	; (800f374 <low_level_init+0x10c>)
 800f2a2:	4a36      	ldr	r2, [pc, #216]	; (800f37c <low_level_init+0x114>)
 800f2a4:	60da      	str	r2, [r3, #12]
  heth.Init.RxDesc = DMARxDscrTab;
 800f2a6:	4b33      	ldr	r3, [pc, #204]	; (800f374 <low_level_init+0x10c>)
 800f2a8:	4a35      	ldr	r2, [pc, #212]	; (800f380 <low_level_init+0x118>)
 800f2aa:	611a      	str	r2, [r3, #16]
  heth.Init.RxBuffLen = 1536;
 800f2ac:	4b31      	ldr	r3, [pc, #196]	; (800f374 <low_level_init+0x10c>)
 800f2ae:	f44f 62c0 	mov.w	r2, #1536	; 0x600
 800f2b2:	615a      	str	r2, [r3, #20]

  /* USER CODE BEGIN MACADDRESS */

  /* USER CODE END MACADDRESS */

  hal_eth_init_status = HAL_ETH_Init(&heth);
 800f2b4:	482f      	ldr	r0, [pc, #188]	; (800f374 <low_level_init+0x10c>)
 800f2b6:	f7f7 f85b 	bl	8006370 <HAL_ETH_Init>
 800f2ba:	4603      	mov	r3, r0
 800f2bc:	73fb      	strb	r3, [r7, #15]

  memset(&TxConfig, 0 , sizeof(ETH_TxPacketConfig));
 800f2be:	2238      	movs	r2, #56	; 0x38
 800f2c0:	2100      	movs	r1, #0
 800f2c2:	4830      	ldr	r0, [pc, #192]	; (800f384 <low_level_init+0x11c>)
 800f2c4:	f00a ff22 	bl	801a10c <memset>
  TxConfig.Attributes = ETH_TX_PACKETS_FEATURES_CSUM | ETH_TX_PACKETS_FEATURES_CRCPAD;
 800f2c8:	4b2e      	ldr	r3, [pc, #184]	; (800f384 <low_level_init+0x11c>)
 800f2ca:	2221      	movs	r2, #33	; 0x21
 800f2cc:	601a      	str	r2, [r3, #0]
  TxConfig.ChecksumCtrl = ETH_CHECKSUM_IPHDR_PAYLOAD_INSERT_PHDR_CALC;
 800f2ce:	4b2d      	ldr	r3, [pc, #180]	; (800f384 <low_level_init+0x11c>)
 800f2d0:	f44f 3240 	mov.w	r2, #196608	; 0x30000
 800f2d4:	615a      	str	r2, [r3, #20]
  TxConfig.CRCPadCtrl = ETH_CRC_PAD_INSERT;
 800f2d6:	4b2b      	ldr	r3, [pc, #172]	; (800f384 <low_level_init+0x11c>)
 800f2d8:	2200      	movs	r2, #0
 800f2da:	611a      	str	r2, [r3, #16]

  /* End ETH HAL Init */

  /* Initialize the RX POOL */
  LWIP_MEMPOOL_INIT(RX_POOL);
 800f2dc:	482a      	ldr	r0, [pc, #168]	; (800f388 <low_level_init+0x120>)
 800f2de:	f000 ff8b 	bl	80101f8 <memp_init_pool>

#if LWIP_ARP || LWIP_ETHERNET

  /* set MAC hardware address length */
  netif->hwaddr_len = ETH_HWADDR_LEN;
 800f2e2:	687b      	ldr	r3, [r7, #4]
 800f2e4:	2206      	movs	r2, #6
 800f2e6:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c

  /* set MAC hardware address */
  netif->hwaddr[0] =  heth.Init.MACAddr[0];
 800f2ea:	4b22      	ldr	r3, [pc, #136]	; (800f374 <low_level_init+0x10c>)
 800f2ec:	685b      	ldr	r3, [r3, #4]
 800f2ee:	781a      	ldrb	r2, [r3, #0]
 800f2f0:	687b      	ldr	r3, [r7, #4]
 800f2f2:	f883 2026 	strb.w	r2, [r3, #38]	; 0x26
  netif->hwaddr[1] =  heth.Init.MACAddr[1];
 800f2f6:	4b1f      	ldr	r3, [pc, #124]	; (800f374 <low_level_init+0x10c>)
 800f2f8:	685b      	ldr	r3, [r3, #4]
 800f2fa:	785a      	ldrb	r2, [r3, #1]
 800f2fc:	687b      	ldr	r3, [r7, #4]
 800f2fe:	f883 2027 	strb.w	r2, [r3, #39]	; 0x27
  netif->hwaddr[2] =  heth.Init.MACAddr[2];
 800f302:	4b1c      	ldr	r3, [pc, #112]	; (800f374 <low_level_init+0x10c>)
 800f304:	685b      	ldr	r3, [r3, #4]
 800f306:	789a      	ldrb	r2, [r3, #2]
 800f308:	687b      	ldr	r3, [r7, #4]
 800f30a:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
  netif->hwaddr[3] =  heth.Init.MACAddr[3];
 800f30e:	4b19      	ldr	r3, [pc, #100]	; (800f374 <low_level_init+0x10c>)
 800f310:	685b      	ldr	r3, [r3, #4]
 800f312:	78da      	ldrb	r2, [r3, #3]
 800f314:	687b      	ldr	r3, [r7, #4]
 800f316:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29
  netif->hwaddr[4] =  heth.Init.MACAddr[4];
 800f31a:	4b16      	ldr	r3, [pc, #88]	; (800f374 <low_level_init+0x10c>)
 800f31c:	685b      	ldr	r3, [r3, #4]
 800f31e:	791a      	ldrb	r2, [r3, #4]
 800f320:	687b      	ldr	r3, [r7, #4]
 800f322:	f883 202a 	strb.w	r2, [r3, #42]	; 0x2a
  netif->hwaddr[5] =  heth.Init.MACAddr[5];
 800f326:	4b13      	ldr	r3, [pc, #76]	; (800f374 <low_level_init+0x10c>)
 800f328:	685b      	ldr	r3, [r3, #4]
 800f32a:	795a      	ldrb	r2, [r3, #5]
 800f32c:	687b      	ldr	r3, [r7, #4]
 800f32e:	f883 202b 	strb.w	r2, [r3, #43]	; 0x2b

  /* maximum transfer unit */
  netif->mtu = ETH_MAX_PAYLOAD;
 800f332:	687b      	ldr	r3, [r7, #4]
 800f334:	f240 52dc 	movw	r2, #1500	; 0x5dc
 800f338:	849a      	strh	r2, [r3, #36]	; 0x24

  /* Accept broadcast address and ARP traffic */
  /* don't set NETIF_FLAG_ETHARP if this device is not an ethernet one */
  #if LWIP_ARP
    netif->flags |= NETIF_FLAG_BROADCAST | NETIF_FLAG_ETHARP;
 800f33a:	687b      	ldr	r3, [r7, #4]
 800f33c:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 800f340:	f043 030a 	orr.w	r3, r3, #10
 800f344:	b2da      	uxtb	r2, r3
 800f346:	687b      	ldr	r3, [r7, #4]
 800f348:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d

/* USER CODE BEGIN PHY_PRE_CONFIG */

/* USER CODE END PHY_PRE_CONFIG */
  /* Set PHY IO functions */
  LAN8742_RegisterBusIO(&LAN8742, &LAN8742_IOCtx);
 800f34c:	490f      	ldr	r1, [pc, #60]	; (800f38c <low_level_init+0x124>)
 800f34e:	4810      	ldr	r0, [pc, #64]	; (800f390 <low_level_init+0x128>)
 800f350:	f7f4 fcf7 	bl	8003d42 <LAN8742_RegisterBusIO>

  /* Initialize the LAN8742 ETH PHY */
  LAN8742_Init(&LAN8742);
 800f354:	480e      	ldr	r0, [pc, #56]	; (800f390 <low_level_init+0x128>)
 800f356:	f7f4 fd26 	bl	8003da6 <LAN8742_Init>

  if (hal_eth_init_status == HAL_OK)
 800f35a:	7bfb      	ldrb	r3, [r7, #15]
 800f35c:	2b00      	cmp	r3, #0
 800f35e:	d103      	bne.n	800f368 <low_level_init+0x100>
  {
  /* Get link state */
  ethernet_link_check_state(netif);
 800f360:	6878      	ldr	r0, [r7, #4]
 800f362:	f000 fa05 	bl	800f770 <ethernet_link_check_state>
#endif /* LWIP_ARP || LWIP_ETHERNET */

/* USER CODE BEGIN LOW_LEVEL_INIT */

/* USER CODE END LOW_LEVEL_INIT */
}
 800f366:	e001      	b.n	800f36c <low_level_init+0x104>
    Error_Handler();
 800f368:	f7f3 ff94 	bl	8003294 <Error_Handler>
}
 800f36c:	bf00      	nop
 800f36e:	3710      	adds	r7, #16
 800f370:	46bd      	mov	sp, r7
 800f372:	bd80      	pop	{r7, pc}
 800f374:	200006f0 	.word	0x200006f0
 800f378:	40028000 	.word	0x40028000
 800f37c:	30040060 	.word	0x30040060
 800f380:	30040000 	.word	0x30040000
 800f384:	200007a0 	.word	0x200007a0
 800f388:	0801f3f0 	.word	0x0801f3f0
 800f38c:	20000044 	.word	0x20000044
 800f390:	200007d8 	.word	0x200007d8

0800f394 <low_level_output>:
 *       to become available since the stack doesn't retry to send a packet
 *       dropped because of memory failure (except for the TCP timers).
 */

static err_t low_level_output(struct netif *netif, struct pbuf *p)
{
 800f394:	b580      	push	{r7, lr}
 800f396:	b092      	sub	sp, #72	; 0x48
 800f398:	af00      	add	r7, sp, #0
 800f39a:	6078      	str	r0, [r7, #4]
 800f39c:	6039      	str	r1, [r7, #0]
  uint32_t i = 0U;
 800f39e:	2300      	movs	r3, #0
 800f3a0:	647b      	str	r3, [r7, #68]	; 0x44
  struct pbuf *q = NULL;
 800f3a2:	2300      	movs	r3, #0
 800f3a4:	643b      	str	r3, [r7, #64]	; 0x40
  err_t errval = ERR_OK;
 800f3a6:	2300      	movs	r3, #0
 800f3a8:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
  ETH_BufferTypeDef Txbuffer[ETH_TX_DESC_CNT] = {0};
 800f3ac:	f107 030c 	add.w	r3, r7, #12
 800f3b0:	2230      	movs	r2, #48	; 0x30
 800f3b2:	2100      	movs	r1, #0
 800f3b4:	4618      	mov	r0, r3
 800f3b6:	f00a fea9 	bl	801a10c <memset>

  memset(Txbuffer, 0 , ETH_TX_DESC_CNT*sizeof(ETH_BufferTypeDef));
 800f3ba:	f107 030c 	add.w	r3, r7, #12
 800f3be:	2230      	movs	r2, #48	; 0x30
 800f3c0:	2100      	movs	r1, #0
 800f3c2:	4618      	mov	r0, r3
 800f3c4:	f00a fea2 	bl	801a10c <memset>

  for(q = p; q != NULL; q = q->next)
 800f3c8:	683b      	ldr	r3, [r7, #0]
 800f3ca:	643b      	str	r3, [r7, #64]	; 0x40
 800f3cc:	e045      	b.n	800f45a <low_level_output+0xc6>
  {
    if(i >= ETH_TX_DESC_CNT)
 800f3ce:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800f3d0:	2b03      	cmp	r3, #3
 800f3d2:	d902      	bls.n	800f3da <low_level_output+0x46>
      return ERR_IF;
 800f3d4:	f06f 030b 	mvn.w	r3, #11
 800f3d8:	e055      	b.n	800f486 <low_level_output+0xf2>

    Txbuffer[i].buffer = q->payload;
 800f3da:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800f3dc:	6859      	ldr	r1, [r3, #4]
 800f3de:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800f3e0:	4613      	mov	r3, r2
 800f3e2:	005b      	lsls	r3, r3, #1
 800f3e4:	4413      	add	r3, r2
 800f3e6:	009b      	lsls	r3, r3, #2
 800f3e8:	3348      	adds	r3, #72	; 0x48
 800f3ea:	443b      	add	r3, r7
 800f3ec:	3b3c      	subs	r3, #60	; 0x3c
 800f3ee:	6019      	str	r1, [r3, #0]
    Txbuffer[i].len = q->len;
 800f3f0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800f3f2:	895b      	ldrh	r3, [r3, #10]
 800f3f4:	4619      	mov	r1, r3
 800f3f6:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800f3f8:	4613      	mov	r3, r2
 800f3fa:	005b      	lsls	r3, r3, #1
 800f3fc:	4413      	add	r3, r2
 800f3fe:	009b      	lsls	r3, r3, #2
 800f400:	3348      	adds	r3, #72	; 0x48
 800f402:	443b      	add	r3, r7
 800f404:	3b38      	subs	r3, #56	; 0x38
 800f406:	6019      	str	r1, [r3, #0]

    if(i>0)
 800f408:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800f40a:	2b00      	cmp	r3, #0
 800f40c:	d011      	beq.n	800f432 <low_level_output+0x9e>
    {
      Txbuffer[i-1].next = &Txbuffer[i];
 800f40e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800f410:	1e5a      	subs	r2, r3, #1
 800f412:	f107 000c 	add.w	r0, r7, #12
 800f416:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800f418:	460b      	mov	r3, r1
 800f41a:	005b      	lsls	r3, r3, #1
 800f41c:	440b      	add	r3, r1
 800f41e:	009b      	lsls	r3, r3, #2
 800f420:	18c1      	adds	r1, r0, r3
 800f422:	4613      	mov	r3, r2
 800f424:	005b      	lsls	r3, r3, #1
 800f426:	4413      	add	r3, r2
 800f428:	009b      	lsls	r3, r3, #2
 800f42a:	3348      	adds	r3, #72	; 0x48
 800f42c:	443b      	add	r3, r7
 800f42e:	3b34      	subs	r3, #52	; 0x34
 800f430:	6019      	str	r1, [r3, #0]
    }

    if(q->next == NULL)
 800f432:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800f434:	681b      	ldr	r3, [r3, #0]
 800f436:	2b00      	cmp	r3, #0
 800f438:	d109      	bne.n	800f44e <low_level_output+0xba>
    {
      Txbuffer[i].next = NULL;
 800f43a:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800f43c:	4613      	mov	r3, r2
 800f43e:	005b      	lsls	r3, r3, #1
 800f440:	4413      	add	r3, r2
 800f442:	009b      	lsls	r3, r3, #2
 800f444:	3348      	adds	r3, #72	; 0x48
 800f446:	443b      	add	r3, r7
 800f448:	3b34      	subs	r3, #52	; 0x34
 800f44a:	2200      	movs	r2, #0
 800f44c:	601a      	str	r2, [r3, #0]
    }

    i++;
 800f44e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800f450:	3301      	adds	r3, #1
 800f452:	647b      	str	r3, [r7, #68]	; 0x44
  for(q = p; q != NULL; q = q->next)
 800f454:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800f456:	681b      	ldr	r3, [r3, #0]
 800f458:	643b      	str	r3, [r7, #64]	; 0x40
 800f45a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800f45c:	2b00      	cmp	r3, #0
 800f45e:	d1b6      	bne.n	800f3ce <low_level_output+0x3a>
  }

  TxConfig.Length = p->tot_len;
 800f460:	683b      	ldr	r3, [r7, #0]
 800f462:	891b      	ldrh	r3, [r3, #8]
 800f464:	461a      	mov	r2, r3
 800f466:	4b0a      	ldr	r3, [pc, #40]	; (800f490 <low_level_output+0xfc>)
 800f468:	605a      	str	r2, [r3, #4]
  TxConfig.TxBuffer = Txbuffer;
 800f46a:	4a09      	ldr	r2, [pc, #36]	; (800f490 <low_level_output+0xfc>)
 800f46c:	f107 030c 	add.w	r3, r7, #12
 800f470:	6093      	str	r3, [r2, #8]
  TxConfig.pData = p;
 800f472:	4a07      	ldr	r2, [pc, #28]	; (800f490 <low_level_output+0xfc>)
 800f474:	683b      	ldr	r3, [r7, #0]
 800f476:	6353      	str	r3, [r2, #52]	; 0x34

  HAL_ETH_Transmit(&heth, &TxConfig, ETH_DMA_TRANSMIT_TIMEOUT);
 800f478:	2214      	movs	r2, #20
 800f47a:	4905      	ldr	r1, [pc, #20]	; (800f490 <low_level_output+0xfc>)
 800f47c:	4805      	ldr	r0, [pc, #20]	; (800f494 <low_level_output+0x100>)
 800f47e:	f7f7 f90f 	bl	80066a0 <HAL_ETH_Transmit>

  return errval;
 800f482:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
}
 800f486:	4618      	mov	r0, r3
 800f488:	3748      	adds	r7, #72	; 0x48
 800f48a:	46bd      	mov	sp, r7
 800f48c:	bd80      	pop	{r7, pc}
 800f48e:	bf00      	nop
 800f490:	200007a0 	.word	0x200007a0
 800f494:	200006f0 	.word	0x200006f0

0800f498 <ethernetif_init>:
 * @return ERR_OK if the loopif is initialized
 *         ERR_MEM if private data couldn't be allocated
 *         any other err_t on error
 */
err_t ethernetif_init(struct netif *netif)
{
 800f498:	b580      	push	{r7, lr}
 800f49a:	b082      	sub	sp, #8
 800f49c:	af00      	add	r7, sp, #0
 800f49e:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("netif != NULL", (netif != NULL));
 800f4a0:	687b      	ldr	r3, [r7, #4]
 800f4a2:	2b00      	cmp	r3, #0
 800f4a4:	d106      	bne.n	800f4b4 <ethernetif_init+0x1c>
 800f4a6:	4b0e      	ldr	r3, [pc, #56]	; (800f4e0 <ethernetif_init+0x48>)
 800f4a8:	f240 1285 	movw	r2, #389	; 0x185
 800f4ac:	490d      	ldr	r1, [pc, #52]	; (800f4e4 <ethernetif_init+0x4c>)
 800f4ae:	480e      	ldr	r0, [pc, #56]	; (800f4e8 <ethernetif_init+0x50>)
 800f4b0:	f00a fcd6 	bl	8019e60 <iprintf>
   * The last argument should be replaced with your link speed, in units
   * of bits per second.
   */
  // MIB2_INIT_NETIF(netif, snmp_ifType_ethernet_csmacd, LINK_SPEED_OF_YOUR_NETIF_IN_BPS);

  netif->name[0] = IFNAME0;
 800f4b4:	687b      	ldr	r3, [r7, #4]
 800f4b6:	2273      	movs	r2, #115	; 0x73
 800f4b8:	f883 202e 	strb.w	r2, [r3, #46]	; 0x2e
  netif->name[1] = IFNAME1;
 800f4bc:	687b      	ldr	r3, [r7, #4]
 800f4be:	2274      	movs	r2, #116	; 0x74
 800f4c0:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f
   * is available...) */

#if LWIP_IPV4
#if LWIP_ARP || LWIP_ETHERNET
#if LWIP_ARP
  netif->output = etharp_output;
 800f4c4:	687b      	ldr	r3, [r7, #4]
 800f4c6:	4a09      	ldr	r2, [pc, #36]	; (800f4ec <ethernetif_init+0x54>)
 800f4c8:	615a      	str	r2, [r3, #20]

#if LWIP_IPV6
  netif->output_ip6 = ethip6_output;
#endif /* LWIP_IPV6 */

  netif->linkoutput = low_level_output;
 800f4ca:	687b      	ldr	r3, [r7, #4]
 800f4cc:	4a08      	ldr	r2, [pc, #32]	; (800f4f0 <ethernetif_init+0x58>)
 800f4ce:	619a      	str	r2, [r3, #24]

  /* initialize the hardware */
  low_level_init(netif);
 800f4d0:	6878      	ldr	r0, [r7, #4]
 800f4d2:	f7ff fec9 	bl	800f268 <low_level_init>

  return ERR_OK;
 800f4d6:	2300      	movs	r3, #0
}
 800f4d8:	4618      	mov	r0, r3
 800f4da:	3708      	adds	r7, #8
 800f4dc:	46bd      	mov	sp, r7
 800f4de:	bd80      	pop	{r7, pc}
 800f4e0:	0801c9b8 	.word	0x0801c9b8
 800f4e4:	0801c9d4 	.word	0x0801c9d4
 800f4e8:	0801c9e4 	.word	0x0801c9e4
 800f4ec:	080176a9 	.word	0x080176a9
 800f4f0:	0800f395 	.word	0x0800f395

0800f4f4 <pbuf_free_custom>:
  * @brief  Custom Rx pbuf free callback
  * @param  pbuf: pbuf to be freed
  * @retval None
  */
void pbuf_free_custom(struct pbuf *p)
{
 800f4f4:	b580      	push	{r7, lr}
 800f4f6:	b084      	sub	sp, #16
 800f4f8:	af00      	add	r7, sp, #0
 800f4fa:	6078      	str	r0, [r7, #4]
  struct pbuf_custom* custom_pbuf = (struct pbuf_custom*)p;
 800f4fc:	687b      	ldr	r3, [r7, #4]
 800f4fe:	60fb      	str	r3, [r7, #12]
  LWIP_MEMPOOL_FREE(RX_POOL, custom_pbuf);
 800f500:	68f9      	ldr	r1, [r7, #12]
 800f502:	4807      	ldr	r0, [pc, #28]	; (800f520 <pbuf_free_custom+0x2c>)
 800f504:	f000 ff5a 	bl	80103bc <memp_free_pool>

  /* If the Rx Buffer Pool was exhausted, signal the ethernetif_input task to
   * call HAL_ETH_GetRxDataBuffer to rebuild the Rx descriptors. */

  if (RxAllocStatus == RX_ALLOC_ERROR)
 800f508:	4b06      	ldr	r3, [pc, #24]	; (800f524 <pbuf_free_custom+0x30>)
 800f50a:	781b      	ldrb	r3, [r3, #0]
 800f50c:	2b01      	cmp	r3, #1
 800f50e:	d102      	bne.n	800f516 <pbuf_free_custom+0x22>
  {
    RxAllocStatus = RX_ALLOC_OK;
 800f510:	4b04      	ldr	r3, [pc, #16]	; (800f524 <pbuf_free_custom+0x30>)
 800f512:	2200      	movs	r2, #0
 800f514:	701a      	strb	r2, [r3, #0]
  }
}
 800f516:	bf00      	nop
 800f518:	3710      	adds	r7, #16
 800f51a:	46bd      	mov	sp, r7
 800f51c:	bd80      	pop	{r7, pc}
 800f51e:	bf00      	nop
 800f520:	0801f3f0 	.word	0x0801f3f0
 800f524:	200006ec 	.word	0x200006ec

0800f528 <sys_now>:
*         when LWIP_TIMERS == 1 and NO_SYS == 1
* @param  None
* @retval Current Time value
*/
u32_t sys_now(void)
{
 800f528:	b580      	push	{r7, lr}
 800f52a:	af00      	add	r7, sp, #0
  return HAL_GetTick();
 800f52c:	f7f4 fdf0 	bl	8004110 <HAL_GetTick>
 800f530:	4603      	mov	r3, r0
}
 800f532:	4618      	mov	r0, r3
 800f534:	bd80      	pop	{r7, pc}
	...

0800f538 <HAL_ETH_MspInit>:
  * @param  ethHandle: ETH handle
  * @retval None
  */

void HAL_ETH_MspInit(ETH_HandleTypeDef* ethHandle)
{
 800f538:	b580      	push	{r7, lr}
 800f53a:	b08e      	sub	sp, #56	; 0x38
 800f53c:	af00      	add	r7, sp, #0
 800f53e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800f540:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800f544:	2200      	movs	r2, #0
 800f546:	601a      	str	r2, [r3, #0]
 800f548:	605a      	str	r2, [r3, #4]
 800f54a:	609a      	str	r2, [r3, #8]
 800f54c:	60da      	str	r2, [r3, #12]
 800f54e:	611a      	str	r2, [r3, #16]
  if(ethHandle->Instance==ETH)
 800f550:	687b      	ldr	r3, [r7, #4]
 800f552:	681b      	ldr	r3, [r3, #0]
 800f554:	4a59      	ldr	r2, [pc, #356]	; (800f6bc <HAL_ETH_MspInit+0x184>)
 800f556:	4293      	cmp	r3, r2
 800f558:	f040 80ab 	bne.w	800f6b2 <HAL_ETH_MspInit+0x17a>
  {
  /* USER CODE BEGIN ETH_MspInit 0 */

  /* USER CODE END ETH_MspInit 0 */
    /* Enable Peripheral clock */
    __HAL_RCC_ETH1MAC_CLK_ENABLE();
 800f55c:	4b58      	ldr	r3, [pc, #352]	; (800f6c0 <HAL_ETH_MspInit+0x188>)
 800f55e:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 800f562:	4a57      	ldr	r2, [pc, #348]	; (800f6c0 <HAL_ETH_MspInit+0x188>)
 800f564:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800f568:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 800f56c:	4b54      	ldr	r3, [pc, #336]	; (800f6c0 <HAL_ETH_MspInit+0x188>)
 800f56e:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 800f572:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800f576:	623b      	str	r3, [r7, #32]
 800f578:	6a3b      	ldr	r3, [r7, #32]
    __HAL_RCC_ETH1TX_CLK_ENABLE();
 800f57a:	4b51      	ldr	r3, [pc, #324]	; (800f6c0 <HAL_ETH_MspInit+0x188>)
 800f57c:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 800f580:	4a4f      	ldr	r2, [pc, #316]	; (800f6c0 <HAL_ETH_MspInit+0x188>)
 800f582:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800f586:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 800f58a:	4b4d      	ldr	r3, [pc, #308]	; (800f6c0 <HAL_ETH_MspInit+0x188>)
 800f58c:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 800f590:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800f594:	61fb      	str	r3, [r7, #28]
 800f596:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_ETH1RX_CLK_ENABLE();
 800f598:	4b49      	ldr	r3, [pc, #292]	; (800f6c0 <HAL_ETH_MspInit+0x188>)
 800f59a:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 800f59e:	4a48      	ldr	r2, [pc, #288]	; (800f6c0 <HAL_ETH_MspInit+0x188>)
 800f5a0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800f5a4:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 800f5a8:	4b45      	ldr	r3, [pc, #276]	; (800f6c0 <HAL_ETH_MspInit+0x188>)
 800f5aa:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 800f5ae:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800f5b2:	61bb      	str	r3, [r7, #24]
 800f5b4:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 800f5b6:	4b42      	ldr	r3, [pc, #264]	; (800f6c0 <HAL_ETH_MspInit+0x188>)
 800f5b8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800f5bc:	4a40      	ldr	r2, [pc, #256]	; (800f6c0 <HAL_ETH_MspInit+0x188>)
 800f5be:	f043 0304 	orr.w	r3, r3, #4
 800f5c2:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800f5c6:	4b3e      	ldr	r3, [pc, #248]	; (800f6c0 <HAL_ETH_MspInit+0x188>)
 800f5c8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800f5cc:	f003 0304 	and.w	r3, r3, #4
 800f5d0:	617b      	str	r3, [r7, #20]
 800f5d2:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800f5d4:	4b3a      	ldr	r3, [pc, #232]	; (800f6c0 <HAL_ETH_MspInit+0x188>)
 800f5d6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800f5da:	4a39      	ldr	r2, [pc, #228]	; (800f6c0 <HAL_ETH_MspInit+0x188>)
 800f5dc:	f043 0301 	orr.w	r3, r3, #1
 800f5e0:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800f5e4:	4b36      	ldr	r3, [pc, #216]	; (800f6c0 <HAL_ETH_MspInit+0x188>)
 800f5e6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800f5ea:	f003 0301 	and.w	r3, r3, #1
 800f5ee:	613b      	str	r3, [r7, #16]
 800f5f0:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800f5f2:	4b33      	ldr	r3, [pc, #204]	; (800f6c0 <HAL_ETH_MspInit+0x188>)
 800f5f4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800f5f8:	4a31      	ldr	r2, [pc, #196]	; (800f6c0 <HAL_ETH_MspInit+0x188>)
 800f5fa:	f043 0302 	orr.w	r3, r3, #2
 800f5fe:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800f602:	4b2f      	ldr	r3, [pc, #188]	; (800f6c0 <HAL_ETH_MspInit+0x188>)
 800f604:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800f608:	f003 0302 	and.w	r3, r3, #2
 800f60c:	60fb      	str	r3, [r7, #12]
 800f60e:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOG_CLK_ENABLE();
 800f610:	4b2b      	ldr	r3, [pc, #172]	; (800f6c0 <HAL_ETH_MspInit+0x188>)
 800f612:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800f616:	4a2a      	ldr	r2, [pc, #168]	; (800f6c0 <HAL_ETH_MspInit+0x188>)
 800f618:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800f61c:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800f620:	4b27      	ldr	r3, [pc, #156]	; (800f6c0 <HAL_ETH_MspInit+0x188>)
 800f622:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800f626:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800f62a:	60bb      	str	r3, [r7, #8]
 800f62c:	68bb      	ldr	r3, [r7, #8]
    PC5     ------> ETH_RXD1
    PB13     ------> ETH_TXD1
    PG11     ------> ETH_TX_EN
    PG13     ------> ETH_TXD0
    */
    GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_4|GPIO_PIN_5;
 800f62e:	2332      	movs	r3, #50	; 0x32
 800f630:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800f632:	2302      	movs	r3, #2
 800f634:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800f636:	2300      	movs	r3, #0
 800f638:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800f63a:	2300      	movs	r3, #0
 800f63c:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 800f63e:	230b      	movs	r3, #11
 800f640:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800f642:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800f646:	4619      	mov	r1, r3
 800f648:	481e      	ldr	r0, [pc, #120]	; (800f6c4 <HAL_ETH_MspInit+0x18c>)
 800f64a:	f7f8 f991 	bl	8007970 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_7;
 800f64e:	2386      	movs	r3, #134	; 0x86
 800f650:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800f652:	2302      	movs	r3, #2
 800f654:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800f656:	2300      	movs	r3, #0
 800f658:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800f65a:	2300      	movs	r3, #0
 800f65c:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 800f65e:	230b      	movs	r3, #11
 800f660:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800f662:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800f666:	4619      	mov	r1, r3
 800f668:	4817      	ldr	r0, [pc, #92]	; (800f6c8 <HAL_ETH_MspInit+0x190>)
 800f66a:	f7f8 f981 	bl	8007970 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_13;
 800f66e:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800f672:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800f674:	2302      	movs	r3, #2
 800f676:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800f678:	2300      	movs	r3, #0
 800f67a:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800f67c:	2300      	movs	r3, #0
 800f67e:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 800f680:	230b      	movs	r3, #11
 800f682:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800f684:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800f688:	4619      	mov	r1, r3
 800f68a:	4810      	ldr	r0, [pc, #64]	; (800f6cc <HAL_ETH_MspInit+0x194>)
 800f68c:	f7f8 f970 	bl	8007970 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_13;
 800f690:	f44f 5320 	mov.w	r3, #10240	; 0x2800
 800f694:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800f696:	2302      	movs	r3, #2
 800f698:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800f69a:	2300      	movs	r3, #0
 800f69c:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800f69e:	2300      	movs	r3, #0
 800f6a0:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 800f6a2:	230b      	movs	r3, #11
 800f6a4:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 800f6a6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800f6aa:	4619      	mov	r1, r3
 800f6ac:	4808      	ldr	r0, [pc, #32]	; (800f6d0 <HAL_ETH_MspInit+0x198>)
 800f6ae:	f7f8 f95f 	bl	8007970 <HAL_GPIO_Init>

  /* USER CODE BEGIN ETH_MspInit 1 */

  /* USER CODE END ETH_MspInit 1 */
  }
}
 800f6b2:	bf00      	nop
 800f6b4:	3738      	adds	r7, #56	; 0x38
 800f6b6:	46bd      	mov	sp, r7
 800f6b8:	bd80      	pop	{r7, pc}
 800f6ba:	bf00      	nop
 800f6bc:	40028000 	.word	0x40028000
 800f6c0:	58024400 	.word	0x58024400
 800f6c4:	58020800 	.word	0x58020800
 800f6c8:	58020000 	.word	0x58020000
 800f6cc:	58020400 	.word	0x58020400
 800f6d0:	58021800 	.word	0x58021800

0800f6d4 <ETH_PHY_IO_Init>:
  * @brief  Initializes the MDIO interface GPIO and clocks.
  * @param  None
  * @retval 0 if OK, -1 if ERROR
  */
int32_t ETH_PHY_IO_Init(void)
{
 800f6d4:	b580      	push	{r7, lr}
 800f6d6:	af00      	add	r7, sp, #0
  /* We assume that MDIO GPIO configuration is already done
     in the ETH_MspInit() else it should be done here
  */

  /* Configure the MDIO Clock */
  HAL_ETH_SetMDIOClockRange(&heth);
 800f6d8:	4802      	ldr	r0, [pc, #8]	; (800f6e4 <ETH_PHY_IO_Init+0x10>)
 800f6da:	f7f7 fb7d 	bl	8006dd8 <HAL_ETH_SetMDIOClockRange>

  return 0;
 800f6de:	2300      	movs	r3, #0
}
 800f6e0:	4618      	mov	r0, r3
 800f6e2:	bd80      	pop	{r7, pc}
 800f6e4:	200006f0 	.word	0x200006f0

0800f6e8 <ETH_PHY_IO_DeInit>:
  * @brief  De-Initializes the MDIO interface .
  * @param  None
  * @retval 0 if OK, -1 if ERROR
  */
int32_t ETH_PHY_IO_DeInit (void)
{
 800f6e8:	b480      	push	{r7}
 800f6ea:	af00      	add	r7, sp, #0
  return 0;
 800f6ec:	2300      	movs	r3, #0
}
 800f6ee:	4618      	mov	r0, r3
 800f6f0:	46bd      	mov	sp, r7
 800f6f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f6f6:	4770      	bx	lr

0800f6f8 <ETH_PHY_IO_ReadReg>:
  * @param  RegAddr: PHY register address
  * @param  pRegVal: pointer to hold the register value
  * @retval 0 if OK -1 if Error
  */
int32_t ETH_PHY_IO_ReadReg(uint32_t DevAddr, uint32_t RegAddr, uint32_t *pRegVal)
{
 800f6f8:	b580      	push	{r7, lr}
 800f6fa:	b084      	sub	sp, #16
 800f6fc:	af00      	add	r7, sp, #0
 800f6fe:	60f8      	str	r0, [r7, #12]
 800f700:	60b9      	str	r1, [r7, #8]
 800f702:	607a      	str	r2, [r7, #4]
  if(HAL_ETH_ReadPHYRegister(&heth, DevAddr, RegAddr, pRegVal) != HAL_OK)
 800f704:	687b      	ldr	r3, [r7, #4]
 800f706:	68ba      	ldr	r2, [r7, #8]
 800f708:	68f9      	ldr	r1, [r7, #12]
 800f70a:	4807      	ldr	r0, [pc, #28]	; (800f728 <ETH_PHY_IO_ReadReg+0x30>)
 800f70c:	f7f7 f8cd 	bl	80068aa <HAL_ETH_ReadPHYRegister>
 800f710:	4603      	mov	r3, r0
 800f712:	2b00      	cmp	r3, #0
 800f714:	d002      	beq.n	800f71c <ETH_PHY_IO_ReadReg+0x24>
  {
    return -1;
 800f716:	f04f 33ff 	mov.w	r3, #4294967295
 800f71a:	e000      	b.n	800f71e <ETH_PHY_IO_ReadReg+0x26>
  }

  return 0;
 800f71c:	2300      	movs	r3, #0
}
 800f71e:	4618      	mov	r0, r3
 800f720:	3710      	adds	r7, #16
 800f722:	46bd      	mov	sp, r7
 800f724:	bd80      	pop	{r7, pc}
 800f726:	bf00      	nop
 800f728:	200006f0 	.word	0x200006f0

0800f72c <ETH_PHY_IO_WriteReg>:
  * @param  RegAddr: PHY register address
  * @param  RegVal: Value to be written
  * @retval 0 if OK -1 if Error
  */
int32_t ETH_PHY_IO_WriteReg(uint32_t DevAddr, uint32_t RegAddr, uint32_t RegVal)
{
 800f72c:	b580      	push	{r7, lr}
 800f72e:	b084      	sub	sp, #16
 800f730:	af00      	add	r7, sp, #0
 800f732:	60f8      	str	r0, [r7, #12]
 800f734:	60b9      	str	r1, [r7, #8]
 800f736:	607a      	str	r2, [r7, #4]
  if(HAL_ETH_WritePHYRegister(&heth, DevAddr, RegAddr, RegVal) != HAL_OK)
 800f738:	687b      	ldr	r3, [r7, #4]
 800f73a:	68ba      	ldr	r2, [r7, #8]
 800f73c:	68f9      	ldr	r1, [r7, #12]
 800f73e:	4807      	ldr	r0, [pc, #28]	; (800f75c <ETH_PHY_IO_WriteReg+0x30>)
 800f740:	f7f7 f908 	bl	8006954 <HAL_ETH_WritePHYRegister>
 800f744:	4603      	mov	r3, r0
 800f746:	2b00      	cmp	r3, #0
 800f748:	d002      	beq.n	800f750 <ETH_PHY_IO_WriteReg+0x24>
  {
    return -1;
 800f74a:	f04f 33ff 	mov.w	r3, #4294967295
 800f74e:	e000      	b.n	800f752 <ETH_PHY_IO_WriteReg+0x26>
  }

  return 0;
 800f750:	2300      	movs	r3, #0
}
 800f752:	4618      	mov	r0, r3
 800f754:	3710      	adds	r7, #16
 800f756:	46bd      	mov	sp, r7
 800f758:	bd80      	pop	{r7, pc}
 800f75a:	bf00      	nop
 800f75c:	200006f0 	.word	0x200006f0

0800f760 <ETH_PHY_IO_GetTick>:
/**
  * @brief  Get the time in millisecons used for internal PHY driver process.
  * @retval Time value
  */
int32_t ETH_PHY_IO_GetTick(void)
{
 800f760:	b580      	push	{r7, lr}
 800f762:	af00      	add	r7, sp, #0
  return HAL_GetTick();
 800f764:	f7f4 fcd4 	bl	8004110 <HAL_GetTick>
 800f768:	4603      	mov	r3, r0
}
 800f76a:	4618      	mov	r0, r3
 800f76c:	bd80      	pop	{r7, pc}
	...

0800f770 <ethernet_link_check_state>:
/**
  * @brief  Check the ETH link state then update ETH driver and netif link accordingly.
  * @retval None
  */
void ethernet_link_check_state(struct netif *netif)
{
 800f770:	b580      	push	{r7, lr}
 800f772:	b0a0      	sub	sp, #128	; 0x80
 800f774:	af00      	add	r7, sp, #0
 800f776:	6078      	str	r0, [r7, #4]
  ETH_MACConfigTypeDef MACConf = {0};
 800f778:	f107 030c 	add.w	r3, r7, #12
 800f77c:	2264      	movs	r2, #100	; 0x64
 800f77e:	2100      	movs	r1, #0
 800f780:	4618      	mov	r0, r3
 800f782:	f00a fcc3 	bl	801a10c <memset>
  int32_t PHYLinkState = 0;
 800f786:	2300      	movs	r3, #0
 800f788:	673b      	str	r3, [r7, #112]	; 0x70
  uint32_t linkchanged = 0U, speed = 0U, duplex = 0U;
 800f78a:	2300      	movs	r3, #0
 800f78c:	67fb      	str	r3, [r7, #124]	; 0x7c
 800f78e:	2300      	movs	r3, #0
 800f790:	67bb      	str	r3, [r7, #120]	; 0x78
 800f792:	2300      	movs	r3, #0
 800f794:	677b      	str	r3, [r7, #116]	; 0x74

  PHYLinkState = LAN8742_GetLinkState(&LAN8742);
 800f796:	483a      	ldr	r0, [pc, #232]	; (800f880 <ethernet_link_check_state+0x110>)
 800f798:	f7f4 fbad 	bl	8003ef6 <LAN8742_GetLinkState>
 800f79c:	6738      	str	r0, [r7, #112]	; 0x70

  if(netif_is_link_up(netif) && (PHYLinkState <= LAN8742_STATUS_LINK_DOWN))
 800f79e:	687b      	ldr	r3, [r7, #4]
 800f7a0:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 800f7a4:	089b      	lsrs	r3, r3, #2
 800f7a6:	f003 0301 	and.w	r3, r3, #1
 800f7aa:	b2db      	uxtb	r3, r3
 800f7ac:	2b00      	cmp	r3, #0
 800f7ae:	d00c      	beq.n	800f7ca <ethernet_link_check_state+0x5a>
 800f7b0:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800f7b2:	2b01      	cmp	r3, #1
 800f7b4:	dc09      	bgt.n	800f7ca <ethernet_link_check_state+0x5a>
  {
    HAL_ETH_Stop(&heth);
 800f7b6:	4833      	ldr	r0, [pc, #204]	; (800f884 <ethernet_link_check_state+0x114>)
 800f7b8:	f7f6 ff22 	bl	8006600 <HAL_ETH_Stop>
    netif_set_down(netif);
 800f7bc:	6878      	ldr	r0, [r7, #4]
 800f7be:	f001 f881 	bl	80108c4 <netif_set_down>
    netif_set_link_down(netif);
 800f7c2:	6878      	ldr	r0, [r7, #4]
 800f7c4:	f001 f8e4 	bl	8010990 <netif_set_link_down>
      netif_set_up(netif);
      netif_set_link_up(netif);
    }
  }

}
 800f7c8:	e055      	b.n	800f876 <ethernet_link_check_state+0x106>
  else if(!netif_is_link_up(netif) && (PHYLinkState > LAN8742_STATUS_LINK_DOWN))
 800f7ca:	687b      	ldr	r3, [r7, #4]
 800f7cc:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 800f7d0:	f003 0304 	and.w	r3, r3, #4
 800f7d4:	2b00      	cmp	r3, #0
 800f7d6:	d14e      	bne.n	800f876 <ethernet_link_check_state+0x106>
 800f7d8:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800f7da:	2b01      	cmp	r3, #1
 800f7dc:	dd4b      	ble.n	800f876 <ethernet_link_check_state+0x106>
    switch (PHYLinkState)
 800f7de:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800f7e0:	3b02      	subs	r3, #2
 800f7e2:	2b03      	cmp	r3, #3
 800f7e4:	d82a      	bhi.n	800f83c <ethernet_link_check_state+0xcc>
 800f7e6:	a201      	add	r2, pc, #4	; (adr r2, 800f7ec <ethernet_link_check_state+0x7c>)
 800f7e8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800f7ec:	0800f7fd 	.word	0x0800f7fd
 800f7f0:	0800f80f 	.word	0x0800f80f
 800f7f4:	0800f81f 	.word	0x0800f81f
 800f7f8:	0800f82f 	.word	0x0800f82f
      duplex = ETH_FULLDUPLEX_MODE;
 800f7fc:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800f800:	677b      	str	r3, [r7, #116]	; 0x74
      speed = ETH_SPEED_100M;
 800f802:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 800f806:	67bb      	str	r3, [r7, #120]	; 0x78
      linkchanged = 1;
 800f808:	2301      	movs	r3, #1
 800f80a:	67fb      	str	r3, [r7, #124]	; 0x7c
      break;
 800f80c:	e017      	b.n	800f83e <ethernet_link_check_state+0xce>
      duplex = ETH_HALFDUPLEX_MODE;
 800f80e:	2300      	movs	r3, #0
 800f810:	677b      	str	r3, [r7, #116]	; 0x74
      speed = ETH_SPEED_100M;
 800f812:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 800f816:	67bb      	str	r3, [r7, #120]	; 0x78
      linkchanged = 1;
 800f818:	2301      	movs	r3, #1
 800f81a:	67fb      	str	r3, [r7, #124]	; 0x7c
      break;
 800f81c:	e00f      	b.n	800f83e <ethernet_link_check_state+0xce>
      duplex = ETH_FULLDUPLEX_MODE;
 800f81e:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800f822:	677b      	str	r3, [r7, #116]	; 0x74
      speed = ETH_SPEED_10M;
 800f824:	2300      	movs	r3, #0
 800f826:	67bb      	str	r3, [r7, #120]	; 0x78
      linkchanged = 1;
 800f828:	2301      	movs	r3, #1
 800f82a:	67fb      	str	r3, [r7, #124]	; 0x7c
      break;
 800f82c:	e007      	b.n	800f83e <ethernet_link_check_state+0xce>
      duplex = ETH_HALFDUPLEX_MODE;
 800f82e:	2300      	movs	r3, #0
 800f830:	677b      	str	r3, [r7, #116]	; 0x74
      speed = ETH_SPEED_10M;
 800f832:	2300      	movs	r3, #0
 800f834:	67bb      	str	r3, [r7, #120]	; 0x78
      linkchanged = 1;
 800f836:	2301      	movs	r3, #1
 800f838:	67fb      	str	r3, [r7, #124]	; 0x7c
      break;
 800f83a:	e000      	b.n	800f83e <ethernet_link_check_state+0xce>
      break;
 800f83c:	bf00      	nop
    if(linkchanged)
 800f83e:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800f840:	2b00      	cmp	r3, #0
 800f842:	d018      	beq.n	800f876 <ethernet_link_check_state+0x106>
      HAL_ETH_GetMACConfig(&heth, &MACConf);
 800f844:	f107 030c 	add.w	r3, r7, #12
 800f848:	4619      	mov	r1, r3
 800f84a:	480e      	ldr	r0, [pc, #56]	; (800f884 <ethernet_link_check_state+0x114>)
 800f84c:	f7f7 f8d6 	bl	80069fc <HAL_ETH_GetMACConfig>
      MACConf.DuplexMode = duplex;
 800f850:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800f852:	627b      	str	r3, [r7, #36]	; 0x24
      MACConf.Speed = speed;
 800f854:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800f856:	623b      	str	r3, [r7, #32]
      HAL_ETH_SetMACConfig(&heth, &MACConf);
 800f858:	f107 030c 	add.w	r3, r7, #12
 800f85c:	4619      	mov	r1, r3
 800f85e:	4809      	ldr	r0, [pc, #36]	; (800f884 <ethernet_link_check_state+0x114>)
 800f860:	f7f7 faa0 	bl	8006da4 <HAL_ETH_SetMACConfig>
      HAL_ETH_Start(&heth);
 800f864:	4807      	ldr	r0, [pc, #28]	; (800f884 <ethernet_link_check_state+0x114>)
 800f866:	f7f6 fe69 	bl	800653c <HAL_ETH_Start>
      netif_set_up(netif);
 800f86a:	6878      	ldr	r0, [r7, #4]
 800f86c:	f000 ffbe 	bl	80107ec <netif_set_up>
      netif_set_link_up(netif);
 800f870:	6878      	ldr	r0, [r7, #4]
 800f872:	f001 f859 	bl	8010928 <netif_set_link_up>
}
 800f876:	bf00      	nop
 800f878:	3780      	adds	r7, #128	; 0x80
 800f87a:	46bd      	mov	sp, r7
 800f87c:	bd80      	pop	{r7, pc}
 800f87e:	bf00      	nop
 800f880:	200007d8 	.word	0x200007d8
 800f884:	200006f0 	.word	0x200006f0

0800f888 <HAL_ETH_RxAllocateCallback>:

void HAL_ETH_RxAllocateCallback(uint8_t **buff)
{
 800f888:	b580      	push	{r7, lr}
 800f88a:	b086      	sub	sp, #24
 800f88c:	af02      	add	r7, sp, #8
 800f88e:	6078      	str	r0, [r7, #4]
/* USER CODE BEGIN HAL ETH RxAllocateCallback */
  struct pbuf_custom *p = LWIP_MEMPOOL_ALLOC(RX_POOL);
 800f890:	4812      	ldr	r0, [pc, #72]	; (800f8dc <HAL_ETH_RxAllocateCallback+0x54>)
 800f892:	f000 fd25 	bl	80102e0 <memp_malloc_pool>
 800f896:	60f8      	str	r0, [r7, #12]
  if (p)
 800f898:	68fb      	ldr	r3, [r7, #12]
 800f89a:	2b00      	cmp	r3, #0
 800f89c:	d014      	beq.n	800f8c8 <HAL_ETH_RxAllocateCallback+0x40>
  {
    /* Get the buff from the struct pbuf address. */
    *buff = (uint8_t *)p + offsetof(RxBuff_t, buff);
 800f89e:	68fb      	ldr	r3, [r7, #12]
 800f8a0:	f103 0220 	add.w	r2, r3, #32
 800f8a4:	687b      	ldr	r3, [r7, #4]
 800f8a6:	601a      	str	r2, [r3, #0]
    p->custom_free_function = pbuf_free_custom;
 800f8a8:	68fb      	ldr	r3, [r7, #12]
 800f8aa:	4a0d      	ldr	r2, [pc, #52]	; (800f8e0 <HAL_ETH_RxAllocateCallback+0x58>)
 800f8ac:	611a      	str	r2, [r3, #16]
    /* Initialize the struct pbuf.
    * This must be performed whenever a buffer's allocated because it may be
    * changed by lwIP or the app, e.g., pbuf_free decrements ref. */
    pbuf_alloced_custom(PBUF_RAW, 0, PBUF_REF, p, *buff, ETH_RX_BUFFER_SIZE);
 800f8ae:	687b      	ldr	r3, [r7, #4]
 800f8b0:	681b      	ldr	r3, [r3, #0]
 800f8b2:	f44f 62c0 	mov.w	r2, #1536	; 0x600
 800f8b6:	9201      	str	r2, [sp, #4]
 800f8b8:	9300      	str	r3, [sp, #0]
 800f8ba:	68fb      	ldr	r3, [r7, #12]
 800f8bc:	2241      	movs	r2, #65	; 0x41
 800f8be:	2100      	movs	r1, #0
 800f8c0:	2000      	movs	r0, #0
 800f8c2:	f001 fa3d 	bl	8010d40 <pbuf_alloced_custom>
  {
    RxAllocStatus = RX_ALLOC_ERROR;
    *buff = NULL;
  }
/* USER CODE END HAL ETH RxAllocateCallback */
}
 800f8c6:	e005      	b.n	800f8d4 <HAL_ETH_RxAllocateCallback+0x4c>
    RxAllocStatus = RX_ALLOC_ERROR;
 800f8c8:	4b06      	ldr	r3, [pc, #24]	; (800f8e4 <HAL_ETH_RxAllocateCallback+0x5c>)
 800f8ca:	2201      	movs	r2, #1
 800f8cc:	701a      	strb	r2, [r3, #0]
    *buff = NULL;
 800f8ce:	687b      	ldr	r3, [r7, #4]
 800f8d0:	2200      	movs	r2, #0
 800f8d2:	601a      	str	r2, [r3, #0]
}
 800f8d4:	bf00      	nop
 800f8d6:	3710      	adds	r7, #16
 800f8d8:	46bd      	mov	sp, r7
 800f8da:	bd80      	pop	{r7, pc}
 800f8dc:	0801f3f0 	.word	0x0801f3f0
 800f8e0:	0800f4f5 	.word	0x0800f4f5
 800f8e4:	200006ec 	.word	0x200006ec

0800f8e8 <lwip_htons>:
 * @param n u16_t in host byte order
 * @return n in network byte order
 */
u16_t
lwip_htons(u16_t n)
{
 800f8e8:	b480      	push	{r7}
 800f8ea:	b083      	sub	sp, #12
 800f8ec:	af00      	add	r7, sp, #0
 800f8ee:	4603      	mov	r3, r0
 800f8f0:	80fb      	strh	r3, [r7, #6]
  return PP_HTONS(n);
 800f8f2:	88fb      	ldrh	r3, [r7, #6]
 800f8f4:	021b      	lsls	r3, r3, #8
 800f8f6:	b21a      	sxth	r2, r3
 800f8f8:	88fb      	ldrh	r3, [r7, #6]
 800f8fa:	0a1b      	lsrs	r3, r3, #8
 800f8fc:	b29b      	uxth	r3, r3
 800f8fe:	b21b      	sxth	r3, r3
 800f900:	4313      	orrs	r3, r2
 800f902:	b21b      	sxth	r3, r3
 800f904:	b29b      	uxth	r3, r3
}
 800f906:	4618      	mov	r0, r3
 800f908:	370c      	adds	r7, #12
 800f90a:	46bd      	mov	sp, r7
 800f90c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f910:	4770      	bx	lr

0800f912 <lwip_htonl>:
 * @param n u32_t in host byte order
 * @return n in network byte order
 */
u32_t
lwip_htonl(u32_t n)
{
 800f912:	b480      	push	{r7}
 800f914:	b083      	sub	sp, #12
 800f916:	af00      	add	r7, sp, #0
 800f918:	6078      	str	r0, [r7, #4]
  return PP_HTONL(n);
 800f91a:	687b      	ldr	r3, [r7, #4]
 800f91c:	061a      	lsls	r2, r3, #24
 800f91e:	687b      	ldr	r3, [r7, #4]
 800f920:	021b      	lsls	r3, r3, #8
 800f922:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 800f926:	431a      	orrs	r2, r3
 800f928:	687b      	ldr	r3, [r7, #4]
 800f92a:	0a1b      	lsrs	r3, r3, #8
 800f92c:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 800f930:	431a      	orrs	r2, r3
 800f932:	687b      	ldr	r3, [r7, #4]
 800f934:	0e1b      	lsrs	r3, r3, #24
 800f936:	4313      	orrs	r3, r2
}
 800f938:	4618      	mov	r0, r3
 800f93a:	370c      	adds	r7, #12
 800f93c:	46bd      	mov	sp, r7
 800f93e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f942:	4770      	bx	lr

0800f944 <lwip_standard_chksum>:
 * @param len length of data to be summed
 * @return host order (!) lwip checksum (non-inverted Internet sum)
 */
u16_t
lwip_standard_chksum(const void *dataptr, int len)
{
 800f944:	b480      	push	{r7}
 800f946:	b089      	sub	sp, #36	; 0x24
 800f948:	af00      	add	r7, sp, #0
 800f94a:	6078      	str	r0, [r7, #4]
 800f94c:	6039      	str	r1, [r7, #0]
  const u8_t *pb = (const u8_t *)dataptr;
 800f94e:	687b      	ldr	r3, [r7, #4]
 800f950:	61fb      	str	r3, [r7, #28]
  const u16_t *ps;
  u16_t t = 0;
 800f952:	2300      	movs	r3, #0
 800f954:	81fb      	strh	r3, [r7, #14]
  u32_t sum = 0;
 800f956:	2300      	movs	r3, #0
 800f958:	617b      	str	r3, [r7, #20]
  int odd = ((mem_ptr_t)pb & 1);
 800f95a:	69fb      	ldr	r3, [r7, #28]
 800f95c:	f003 0301 	and.w	r3, r3, #1
 800f960:	613b      	str	r3, [r7, #16]

  /* Get aligned to u16_t */
  if (odd && len > 0) {
 800f962:	693b      	ldr	r3, [r7, #16]
 800f964:	2b00      	cmp	r3, #0
 800f966:	d00d      	beq.n	800f984 <lwip_standard_chksum+0x40>
 800f968:	683b      	ldr	r3, [r7, #0]
 800f96a:	2b00      	cmp	r3, #0
 800f96c:	dd0a      	ble.n	800f984 <lwip_standard_chksum+0x40>
    ((u8_t *)&t)[1] = *pb++;
 800f96e:	69fa      	ldr	r2, [r7, #28]
 800f970:	1c53      	adds	r3, r2, #1
 800f972:	61fb      	str	r3, [r7, #28]
 800f974:	f107 030e 	add.w	r3, r7, #14
 800f978:	3301      	adds	r3, #1
 800f97a:	7812      	ldrb	r2, [r2, #0]
 800f97c:	701a      	strb	r2, [r3, #0]
    len--;
 800f97e:	683b      	ldr	r3, [r7, #0]
 800f980:	3b01      	subs	r3, #1
 800f982:	603b      	str	r3, [r7, #0]
  }

  /* Add the bulk of the data */
  ps = (const u16_t *)(const void *)pb;
 800f984:	69fb      	ldr	r3, [r7, #28]
 800f986:	61bb      	str	r3, [r7, #24]
  while (len > 1) {
 800f988:	e00a      	b.n	800f9a0 <lwip_standard_chksum+0x5c>
    sum += *ps++;
 800f98a:	69bb      	ldr	r3, [r7, #24]
 800f98c:	1c9a      	adds	r2, r3, #2
 800f98e:	61ba      	str	r2, [r7, #24]
 800f990:	881b      	ldrh	r3, [r3, #0]
 800f992:	461a      	mov	r2, r3
 800f994:	697b      	ldr	r3, [r7, #20]
 800f996:	4413      	add	r3, r2
 800f998:	617b      	str	r3, [r7, #20]
    len -= 2;
 800f99a:	683b      	ldr	r3, [r7, #0]
 800f99c:	3b02      	subs	r3, #2
 800f99e:	603b      	str	r3, [r7, #0]
  while (len > 1) {
 800f9a0:	683b      	ldr	r3, [r7, #0]
 800f9a2:	2b01      	cmp	r3, #1
 800f9a4:	dcf1      	bgt.n	800f98a <lwip_standard_chksum+0x46>
  }

  /* Consume left-over byte, if any */
  if (len > 0) {
 800f9a6:	683b      	ldr	r3, [r7, #0]
 800f9a8:	2b00      	cmp	r3, #0
 800f9aa:	dd04      	ble.n	800f9b6 <lwip_standard_chksum+0x72>
    ((u8_t *)&t)[0] = *(const u8_t *)ps;
 800f9ac:	f107 030e 	add.w	r3, r7, #14
 800f9b0:	69ba      	ldr	r2, [r7, #24]
 800f9b2:	7812      	ldrb	r2, [r2, #0]
 800f9b4:	701a      	strb	r2, [r3, #0]
  }

  /* Add end bytes */
  sum += t;
 800f9b6:	89fb      	ldrh	r3, [r7, #14]
 800f9b8:	461a      	mov	r2, r3
 800f9ba:	697b      	ldr	r3, [r7, #20]
 800f9bc:	4413      	add	r3, r2
 800f9be:	617b      	str	r3, [r7, #20]

  /* Fold 32-bit sum to 16 bits
     calling this twice is probably faster than if statements... */
  sum = FOLD_U32T(sum);
 800f9c0:	697b      	ldr	r3, [r7, #20]
 800f9c2:	0c1a      	lsrs	r2, r3, #16
 800f9c4:	697b      	ldr	r3, [r7, #20]
 800f9c6:	b29b      	uxth	r3, r3
 800f9c8:	4413      	add	r3, r2
 800f9ca:	617b      	str	r3, [r7, #20]
  sum = FOLD_U32T(sum);
 800f9cc:	697b      	ldr	r3, [r7, #20]
 800f9ce:	0c1a      	lsrs	r2, r3, #16
 800f9d0:	697b      	ldr	r3, [r7, #20]
 800f9d2:	b29b      	uxth	r3, r3
 800f9d4:	4413      	add	r3, r2
 800f9d6:	617b      	str	r3, [r7, #20]

  /* Swap if alignment was odd */
  if (odd) {
 800f9d8:	693b      	ldr	r3, [r7, #16]
 800f9da:	2b00      	cmp	r3, #0
 800f9dc:	d007      	beq.n	800f9ee <lwip_standard_chksum+0xaa>
    sum = SWAP_BYTES_IN_WORD(sum);
 800f9de:	697b      	ldr	r3, [r7, #20]
 800f9e0:	021b      	lsls	r3, r3, #8
 800f9e2:	b29a      	uxth	r2, r3
 800f9e4:	697b      	ldr	r3, [r7, #20]
 800f9e6:	0a1b      	lsrs	r3, r3, #8
 800f9e8:	b2db      	uxtb	r3, r3
 800f9ea:	4313      	orrs	r3, r2
 800f9ec:	617b      	str	r3, [r7, #20]
  }

  return (u16_t)sum;
 800f9ee:	697b      	ldr	r3, [r7, #20]
 800f9f0:	b29b      	uxth	r3, r3
}
 800f9f2:	4618      	mov	r0, r3
 800f9f4:	3724      	adds	r7, #36	; 0x24
 800f9f6:	46bd      	mov	sp, r7
 800f9f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f9fc:	4770      	bx	lr

0800f9fe <inet_chksum>:
 * @return checksum (as u16_t) to be saved directly in the protocol header
 */

u16_t
inet_chksum(const void *dataptr, u16_t len)
{
 800f9fe:	b580      	push	{r7, lr}
 800fa00:	b082      	sub	sp, #8
 800fa02:	af00      	add	r7, sp, #0
 800fa04:	6078      	str	r0, [r7, #4]
 800fa06:	460b      	mov	r3, r1
 800fa08:	807b      	strh	r3, [r7, #2]
  return (u16_t)~(unsigned int)LWIP_CHKSUM(dataptr, len);
 800fa0a:	887b      	ldrh	r3, [r7, #2]
 800fa0c:	4619      	mov	r1, r3
 800fa0e:	6878      	ldr	r0, [r7, #4]
 800fa10:	f7ff ff98 	bl	800f944 <lwip_standard_chksum>
 800fa14:	4603      	mov	r3, r0
 800fa16:	43db      	mvns	r3, r3
 800fa18:	b29b      	uxth	r3, r3
}
 800fa1a:	4618      	mov	r0, r3
 800fa1c:	3708      	adds	r7, #8
 800fa1e:	46bd      	mov	sp, r7
 800fa20:	bd80      	pop	{r7, pc}

0800fa22 <inet_chksum_pbuf>:
 * @param p pbuf chain over that the checksum should be calculated
 * @return checksum (as u16_t) to be saved directly in the protocol header
 */
u16_t
inet_chksum_pbuf(struct pbuf *p)
{
 800fa22:	b580      	push	{r7, lr}
 800fa24:	b086      	sub	sp, #24
 800fa26:	af00      	add	r7, sp, #0
 800fa28:	6078      	str	r0, [r7, #4]
  u32_t acc;
  struct pbuf *q;
  int swapped = 0;
 800fa2a:	2300      	movs	r3, #0
 800fa2c:	60fb      	str	r3, [r7, #12]

  acc = 0;
 800fa2e:	2300      	movs	r3, #0
 800fa30:	617b      	str	r3, [r7, #20]
  for (q = p; q != NULL; q = q->next) {
 800fa32:	687b      	ldr	r3, [r7, #4]
 800fa34:	613b      	str	r3, [r7, #16]
 800fa36:	e02b      	b.n	800fa90 <inet_chksum_pbuf+0x6e>
    acc += LWIP_CHKSUM(q->payload, q->len);
 800fa38:	693b      	ldr	r3, [r7, #16]
 800fa3a:	685a      	ldr	r2, [r3, #4]
 800fa3c:	693b      	ldr	r3, [r7, #16]
 800fa3e:	895b      	ldrh	r3, [r3, #10]
 800fa40:	4619      	mov	r1, r3
 800fa42:	4610      	mov	r0, r2
 800fa44:	f7ff ff7e 	bl	800f944 <lwip_standard_chksum>
 800fa48:	4603      	mov	r3, r0
 800fa4a:	461a      	mov	r2, r3
 800fa4c:	697b      	ldr	r3, [r7, #20]
 800fa4e:	4413      	add	r3, r2
 800fa50:	617b      	str	r3, [r7, #20]
    acc = FOLD_U32T(acc);
 800fa52:	697b      	ldr	r3, [r7, #20]
 800fa54:	0c1a      	lsrs	r2, r3, #16
 800fa56:	697b      	ldr	r3, [r7, #20]
 800fa58:	b29b      	uxth	r3, r3
 800fa5a:	4413      	add	r3, r2
 800fa5c:	617b      	str	r3, [r7, #20]
    if (q->len % 2 != 0) {
 800fa5e:	693b      	ldr	r3, [r7, #16]
 800fa60:	895b      	ldrh	r3, [r3, #10]
 800fa62:	f003 0301 	and.w	r3, r3, #1
 800fa66:	b29b      	uxth	r3, r3
 800fa68:	2b00      	cmp	r3, #0
 800fa6a:	d00e      	beq.n	800fa8a <inet_chksum_pbuf+0x68>
      swapped = !swapped;
 800fa6c:	68fb      	ldr	r3, [r7, #12]
 800fa6e:	2b00      	cmp	r3, #0
 800fa70:	bf0c      	ite	eq
 800fa72:	2301      	moveq	r3, #1
 800fa74:	2300      	movne	r3, #0
 800fa76:	b2db      	uxtb	r3, r3
 800fa78:	60fb      	str	r3, [r7, #12]
      acc = SWAP_BYTES_IN_WORD(acc);
 800fa7a:	697b      	ldr	r3, [r7, #20]
 800fa7c:	021b      	lsls	r3, r3, #8
 800fa7e:	b29a      	uxth	r2, r3
 800fa80:	697b      	ldr	r3, [r7, #20]
 800fa82:	0a1b      	lsrs	r3, r3, #8
 800fa84:	b2db      	uxtb	r3, r3
 800fa86:	4313      	orrs	r3, r2
 800fa88:	617b      	str	r3, [r7, #20]
  for (q = p; q != NULL; q = q->next) {
 800fa8a:	693b      	ldr	r3, [r7, #16]
 800fa8c:	681b      	ldr	r3, [r3, #0]
 800fa8e:	613b      	str	r3, [r7, #16]
 800fa90:	693b      	ldr	r3, [r7, #16]
 800fa92:	2b00      	cmp	r3, #0
 800fa94:	d1d0      	bne.n	800fa38 <inet_chksum_pbuf+0x16>
    }
  }

  if (swapped) {
 800fa96:	68fb      	ldr	r3, [r7, #12]
 800fa98:	2b00      	cmp	r3, #0
 800fa9a:	d007      	beq.n	800faac <inet_chksum_pbuf+0x8a>
    acc = SWAP_BYTES_IN_WORD(acc);
 800fa9c:	697b      	ldr	r3, [r7, #20]
 800fa9e:	021b      	lsls	r3, r3, #8
 800faa0:	b29a      	uxth	r2, r3
 800faa2:	697b      	ldr	r3, [r7, #20]
 800faa4:	0a1b      	lsrs	r3, r3, #8
 800faa6:	b2db      	uxtb	r3, r3
 800faa8:	4313      	orrs	r3, r2
 800faaa:	617b      	str	r3, [r7, #20]
  }
  return (u16_t)~(acc & 0xffffUL);
 800faac:	697b      	ldr	r3, [r7, #20]
 800faae:	b29b      	uxth	r3, r3
 800fab0:	43db      	mvns	r3, r3
 800fab2:	b29b      	uxth	r3, r3
}
 800fab4:	4618      	mov	r0, r3
 800fab6:	3718      	adds	r7, #24
 800fab8:	46bd      	mov	sp, r7
 800faba:	bd80      	pop	{r7, pc}

0800fabc <lwip_init>:
 * Initialize all modules.
 * Use this in NO_SYS mode. Use tcpip_init() otherwise.
 */
void
lwip_init(void)
{
 800fabc:	b580      	push	{r7, lr}
 800fabe:	b082      	sub	sp, #8
 800fac0:	af00      	add	r7, sp, #0
#ifndef LWIP_SKIP_CONST_CHECK
  int a = 0;
 800fac2:	2300      	movs	r3, #0
 800fac4:	607b      	str	r3, [r7, #4]
  /* Modules initialization */
  stats_init();
#if !NO_SYS
  sys_init();
#endif /* !NO_SYS */
  mem_init();
 800fac6:	f000 f8d3 	bl	800fc70 <mem_init>
  memp_init();
 800faca:	f000 fbc5 	bl	8010258 <memp_init>
  pbuf_init();
  netif_init();
 800face:	f000 fcc3 	bl	8010458 <netif_init>
#endif /* LWIP_IPV4 */
#if LWIP_RAW
  raw_init();
#endif /* LWIP_RAW */
#if LWIP_UDP
  udp_init();
 800fad2:	f006 ffe3 	bl	8016a9c <udp_init>
#endif /* LWIP_UDP */
#if LWIP_TCP
  tcp_init();
 800fad6:	f001 fd79 	bl	80115cc <tcp_init>
#if PPP_SUPPORT
  ppp_init();
#endif

#if LWIP_TIMERS
  sys_timeouts_init();
 800fada:	f006 ff97 	bl	8016a0c <sys_timeouts_init>
#endif /* LWIP_TIMERS */
}
 800fade:	bf00      	nop
 800fae0:	3708      	adds	r7, #8
 800fae2:	46bd      	mov	sp, r7
 800fae4:	bd80      	pop	{r7, pc}
	...

0800fae8 <ptr_to_mem>:
#define mem_overflow_check_element(mem)
#endif /* MEM_OVERFLOW_CHECK */

static struct mem *
ptr_to_mem(mem_size_t ptr)
{
 800fae8:	b480      	push	{r7}
 800faea:	b083      	sub	sp, #12
 800faec:	af00      	add	r7, sp, #0
 800faee:	6078      	str	r0, [r7, #4]
  return (struct mem *)(void *)&ram[ptr];
 800faf0:	4b04      	ldr	r3, [pc, #16]	; (800fb04 <ptr_to_mem+0x1c>)
 800faf2:	681a      	ldr	r2, [r3, #0]
 800faf4:	687b      	ldr	r3, [r7, #4]
 800faf6:	4413      	add	r3, r2
}
 800faf8:	4618      	mov	r0, r3
 800fafa:	370c      	adds	r7, #12
 800fafc:	46bd      	mov	sp, r7
 800fafe:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fb02:	4770      	bx	lr
 800fb04:	20000810 	.word	0x20000810

0800fb08 <mem_to_ptr>:

static mem_size_t
mem_to_ptr(void *mem)
{
 800fb08:	b480      	push	{r7}
 800fb0a:	b083      	sub	sp, #12
 800fb0c:	af00      	add	r7, sp, #0
 800fb0e:	6078      	str	r0, [r7, #4]
  return (mem_size_t)((u8_t *)mem - ram);
 800fb10:	4b04      	ldr	r3, [pc, #16]	; (800fb24 <mem_to_ptr+0x1c>)
 800fb12:	681b      	ldr	r3, [r3, #0]
 800fb14:	687a      	ldr	r2, [r7, #4]
 800fb16:	1ad3      	subs	r3, r2, r3
}
 800fb18:	4618      	mov	r0, r3
 800fb1a:	370c      	adds	r7, #12
 800fb1c:	46bd      	mov	sp, r7
 800fb1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fb22:	4770      	bx	lr
 800fb24:	20000810 	.word	0x20000810

0800fb28 <plug_holes>:
 * This assumes access to the heap is protected by the calling function
 * already.
 */
static void
plug_holes(struct mem *mem)
{
 800fb28:	b590      	push	{r4, r7, lr}
 800fb2a:	b085      	sub	sp, #20
 800fb2c:	af00      	add	r7, sp, #0
 800fb2e:	6078      	str	r0, [r7, #4]
  struct mem *nmem;
  struct mem *pmem;

  LWIP_ASSERT("plug_holes: mem >= ram", (u8_t *)mem >= ram);
 800fb30:	4b45      	ldr	r3, [pc, #276]	; (800fc48 <plug_holes+0x120>)
 800fb32:	681b      	ldr	r3, [r3, #0]
 800fb34:	687a      	ldr	r2, [r7, #4]
 800fb36:	429a      	cmp	r2, r3
 800fb38:	d206      	bcs.n	800fb48 <plug_holes+0x20>
 800fb3a:	4b44      	ldr	r3, [pc, #272]	; (800fc4c <plug_holes+0x124>)
 800fb3c:	f240 12df 	movw	r2, #479	; 0x1df
 800fb40:	4943      	ldr	r1, [pc, #268]	; (800fc50 <plug_holes+0x128>)
 800fb42:	4844      	ldr	r0, [pc, #272]	; (800fc54 <plug_holes+0x12c>)
 800fb44:	f00a f98c 	bl	8019e60 <iprintf>
  LWIP_ASSERT("plug_holes: mem < ram_end", (u8_t *)mem < (u8_t *)ram_end);
 800fb48:	4b43      	ldr	r3, [pc, #268]	; (800fc58 <plug_holes+0x130>)
 800fb4a:	681b      	ldr	r3, [r3, #0]
 800fb4c:	687a      	ldr	r2, [r7, #4]
 800fb4e:	429a      	cmp	r2, r3
 800fb50:	d306      	bcc.n	800fb60 <plug_holes+0x38>
 800fb52:	4b3e      	ldr	r3, [pc, #248]	; (800fc4c <plug_holes+0x124>)
 800fb54:	f44f 72f0 	mov.w	r2, #480	; 0x1e0
 800fb58:	4940      	ldr	r1, [pc, #256]	; (800fc5c <plug_holes+0x134>)
 800fb5a:	483e      	ldr	r0, [pc, #248]	; (800fc54 <plug_holes+0x12c>)
 800fb5c:	f00a f980 	bl	8019e60 <iprintf>
  LWIP_ASSERT("plug_holes: mem->used == 0", mem->used == 0);
 800fb60:	687b      	ldr	r3, [r7, #4]
 800fb62:	7a1b      	ldrb	r3, [r3, #8]
 800fb64:	2b00      	cmp	r3, #0
 800fb66:	d006      	beq.n	800fb76 <plug_holes+0x4e>
 800fb68:	4b38      	ldr	r3, [pc, #224]	; (800fc4c <plug_holes+0x124>)
 800fb6a:	f240 12e1 	movw	r2, #481	; 0x1e1
 800fb6e:	493c      	ldr	r1, [pc, #240]	; (800fc60 <plug_holes+0x138>)
 800fb70:	4838      	ldr	r0, [pc, #224]	; (800fc54 <plug_holes+0x12c>)
 800fb72:	f00a f975 	bl	8019e60 <iprintf>

  /* plug hole forward */
  LWIP_ASSERT("plug_holes: mem->next <= MEM_SIZE_ALIGNED", mem->next <= MEM_SIZE_ALIGNED);
 800fb76:	687b      	ldr	r3, [r7, #4]
 800fb78:	681b      	ldr	r3, [r3, #0]
 800fb7a:	4a3a      	ldr	r2, [pc, #232]	; (800fc64 <plug_holes+0x13c>)
 800fb7c:	4293      	cmp	r3, r2
 800fb7e:	d906      	bls.n	800fb8e <plug_holes+0x66>
 800fb80:	4b32      	ldr	r3, [pc, #200]	; (800fc4c <plug_holes+0x124>)
 800fb82:	f44f 72f2 	mov.w	r2, #484	; 0x1e4
 800fb86:	4938      	ldr	r1, [pc, #224]	; (800fc68 <plug_holes+0x140>)
 800fb88:	4832      	ldr	r0, [pc, #200]	; (800fc54 <plug_holes+0x12c>)
 800fb8a:	f00a f969 	bl	8019e60 <iprintf>

  nmem = ptr_to_mem(mem->next);
 800fb8e:	687b      	ldr	r3, [r7, #4]
 800fb90:	681b      	ldr	r3, [r3, #0]
 800fb92:	4618      	mov	r0, r3
 800fb94:	f7ff ffa8 	bl	800fae8 <ptr_to_mem>
 800fb98:	60f8      	str	r0, [r7, #12]
  if (mem != nmem && nmem->used == 0 && (u8_t *)nmem != (u8_t *)ram_end) {
 800fb9a:	687a      	ldr	r2, [r7, #4]
 800fb9c:	68fb      	ldr	r3, [r7, #12]
 800fb9e:	429a      	cmp	r2, r3
 800fba0:	d024      	beq.n	800fbec <plug_holes+0xc4>
 800fba2:	68fb      	ldr	r3, [r7, #12]
 800fba4:	7a1b      	ldrb	r3, [r3, #8]
 800fba6:	2b00      	cmp	r3, #0
 800fba8:	d120      	bne.n	800fbec <plug_holes+0xc4>
 800fbaa:	4b2b      	ldr	r3, [pc, #172]	; (800fc58 <plug_holes+0x130>)
 800fbac:	681b      	ldr	r3, [r3, #0]
 800fbae:	68fa      	ldr	r2, [r7, #12]
 800fbb0:	429a      	cmp	r2, r3
 800fbb2:	d01b      	beq.n	800fbec <plug_holes+0xc4>
    /* if mem->next is unused and not end of ram, combine mem and mem->next */
    if (lfree == nmem) {
 800fbb4:	4b2d      	ldr	r3, [pc, #180]	; (800fc6c <plug_holes+0x144>)
 800fbb6:	681b      	ldr	r3, [r3, #0]
 800fbb8:	68fa      	ldr	r2, [r7, #12]
 800fbba:	429a      	cmp	r2, r3
 800fbbc:	d102      	bne.n	800fbc4 <plug_holes+0x9c>
      lfree = mem;
 800fbbe:	4a2b      	ldr	r2, [pc, #172]	; (800fc6c <plug_holes+0x144>)
 800fbc0:	687b      	ldr	r3, [r7, #4]
 800fbc2:	6013      	str	r3, [r2, #0]
    }
    mem->next = nmem->next;
 800fbc4:	68fb      	ldr	r3, [r7, #12]
 800fbc6:	681a      	ldr	r2, [r3, #0]
 800fbc8:	687b      	ldr	r3, [r7, #4]
 800fbca:	601a      	str	r2, [r3, #0]
    if (nmem->next != MEM_SIZE_ALIGNED) {
 800fbcc:	68fb      	ldr	r3, [r7, #12]
 800fbce:	681b      	ldr	r3, [r3, #0]
 800fbd0:	4a24      	ldr	r2, [pc, #144]	; (800fc64 <plug_holes+0x13c>)
 800fbd2:	4293      	cmp	r3, r2
 800fbd4:	d00a      	beq.n	800fbec <plug_holes+0xc4>
      ptr_to_mem(nmem->next)->prev = mem_to_ptr(mem);
 800fbd6:	68fb      	ldr	r3, [r7, #12]
 800fbd8:	681b      	ldr	r3, [r3, #0]
 800fbda:	4618      	mov	r0, r3
 800fbdc:	f7ff ff84 	bl	800fae8 <ptr_to_mem>
 800fbe0:	4604      	mov	r4, r0
 800fbe2:	6878      	ldr	r0, [r7, #4]
 800fbe4:	f7ff ff90 	bl	800fb08 <mem_to_ptr>
 800fbe8:	4603      	mov	r3, r0
 800fbea:	6063      	str	r3, [r4, #4]
    }
  }

  /* plug hole backward */
  pmem = ptr_to_mem(mem->prev);
 800fbec:	687b      	ldr	r3, [r7, #4]
 800fbee:	685b      	ldr	r3, [r3, #4]
 800fbf0:	4618      	mov	r0, r3
 800fbf2:	f7ff ff79 	bl	800fae8 <ptr_to_mem>
 800fbf6:	60b8      	str	r0, [r7, #8]
  if (pmem != mem && pmem->used == 0) {
 800fbf8:	68ba      	ldr	r2, [r7, #8]
 800fbfa:	687b      	ldr	r3, [r7, #4]
 800fbfc:	429a      	cmp	r2, r3
 800fbfe:	d01f      	beq.n	800fc40 <plug_holes+0x118>
 800fc00:	68bb      	ldr	r3, [r7, #8]
 800fc02:	7a1b      	ldrb	r3, [r3, #8]
 800fc04:	2b00      	cmp	r3, #0
 800fc06:	d11b      	bne.n	800fc40 <plug_holes+0x118>
    /* if mem->prev is unused, combine mem and mem->prev */
    if (lfree == mem) {
 800fc08:	4b18      	ldr	r3, [pc, #96]	; (800fc6c <plug_holes+0x144>)
 800fc0a:	681b      	ldr	r3, [r3, #0]
 800fc0c:	687a      	ldr	r2, [r7, #4]
 800fc0e:	429a      	cmp	r2, r3
 800fc10:	d102      	bne.n	800fc18 <plug_holes+0xf0>
      lfree = pmem;
 800fc12:	4a16      	ldr	r2, [pc, #88]	; (800fc6c <plug_holes+0x144>)
 800fc14:	68bb      	ldr	r3, [r7, #8]
 800fc16:	6013      	str	r3, [r2, #0]
    }
    pmem->next = mem->next;
 800fc18:	687b      	ldr	r3, [r7, #4]
 800fc1a:	681a      	ldr	r2, [r3, #0]
 800fc1c:	68bb      	ldr	r3, [r7, #8]
 800fc1e:	601a      	str	r2, [r3, #0]
    if (mem->next != MEM_SIZE_ALIGNED) {
 800fc20:	687b      	ldr	r3, [r7, #4]
 800fc22:	681b      	ldr	r3, [r3, #0]
 800fc24:	4a0f      	ldr	r2, [pc, #60]	; (800fc64 <plug_holes+0x13c>)
 800fc26:	4293      	cmp	r3, r2
 800fc28:	d00a      	beq.n	800fc40 <plug_holes+0x118>
      ptr_to_mem(mem->next)->prev = mem_to_ptr(pmem);
 800fc2a:	687b      	ldr	r3, [r7, #4]
 800fc2c:	681b      	ldr	r3, [r3, #0]
 800fc2e:	4618      	mov	r0, r3
 800fc30:	f7ff ff5a 	bl	800fae8 <ptr_to_mem>
 800fc34:	4604      	mov	r4, r0
 800fc36:	68b8      	ldr	r0, [r7, #8]
 800fc38:	f7ff ff66 	bl	800fb08 <mem_to_ptr>
 800fc3c:	4603      	mov	r3, r0
 800fc3e:	6063      	str	r3, [r4, #4]
    }
  }
}
 800fc40:	bf00      	nop
 800fc42:	3714      	adds	r7, #20
 800fc44:	46bd      	mov	sp, r7
 800fc46:	bd90      	pop	{r4, r7, pc}
 800fc48:	20000810 	.word	0x20000810
 800fc4c:	0801ca0c 	.word	0x0801ca0c
 800fc50:	0801ca3c 	.word	0x0801ca3c
 800fc54:	0801ca54 	.word	0x0801ca54
 800fc58:	20000814 	.word	0x20000814
 800fc5c:	0801ca7c 	.word	0x0801ca7c
 800fc60:	0801ca98 	.word	0x0801ca98
 800fc64:	0001ffe8 	.word	0x0001ffe8
 800fc68:	0801cab4 	.word	0x0801cab4
 800fc6c:	20000818 	.word	0x20000818

0800fc70 <mem_init>:
/**
 * Zero the heap and initialize start, end and lowest-free
 */
void
mem_init(void)
{
 800fc70:	b580      	push	{r7, lr}
 800fc72:	b082      	sub	sp, #8
 800fc74:	af00      	add	r7, sp, #0

  LWIP_ASSERT("Sanity check alignment",
              (SIZEOF_STRUCT_MEM & (MEM_ALIGNMENT - 1)) == 0);

  /* align the heap */
  ram = (u8_t *)LWIP_MEM_ALIGN(LWIP_RAM_HEAP_POINTER);
 800fc76:	4b14      	ldr	r3, [pc, #80]	; (800fcc8 <mem_init+0x58>)
 800fc78:	4a14      	ldr	r2, [pc, #80]	; (800fccc <mem_init+0x5c>)
 800fc7a:	601a      	str	r2, [r3, #0]
  /* initialize the start of the heap */
  mem = (struct mem *)(void *)ram;
 800fc7c:	4b12      	ldr	r3, [pc, #72]	; (800fcc8 <mem_init+0x58>)
 800fc7e:	681b      	ldr	r3, [r3, #0]
 800fc80:	607b      	str	r3, [r7, #4]
  mem->next = MEM_SIZE_ALIGNED;
 800fc82:	687b      	ldr	r3, [r7, #4]
 800fc84:	4a12      	ldr	r2, [pc, #72]	; (800fcd0 <mem_init+0x60>)
 800fc86:	601a      	str	r2, [r3, #0]
  mem->prev = 0;
 800fc88:	687b      	ldr	r3, [r7, #4]
 800fc8a:	2200      	movs	r2, #0
 800fc8c:	605a      	str	r2, [r3, #4]
  mem->used = 0;
 800fc8e:	687b      	ldr	r3, [r7, #4]
 800fc90:	2200      	movs	r2, #0
 800fc92:	721a      	strb	r2, [r3, #8]
  /* initialize the end of the heap */
  ram_end = ptr_to_mem(MEM_SIZE_ALIGNED);
 800fc94:	480e      	ldr	r0, [pc, #56]	; (800fcd0 <mem_init+0x60>)
 800fc96:	f7ff ff27 	bl	800fae8 <ptr_to_mem>
 800fc9a:	4603      	mov	r3, r0
 800fc9c:	4a0d      	ldr	r2, [pc, #52]	; (800fcd4 <mem_init+0x64>)
 800fc9e:	6013      	str	r3, [r2, #0]
  ram_end->used = 1;
 800fca0:	4b0c      	ldr	r3, [pc, #48]	; (800fcd4 <mem_init+0x64>)
 800fca2:	681b      	ldr	r3, [r3, #0]
 800fca4:	2201      	movs	r2, #1
 800fca6:	721a      	strb	r2, [r3, #8]
  ram_end->next = MEM_SIZE_ALIGNED;
 800fca8:	4b0a      	ldr	r3, [pc, #40]	; (800fcd4 <mem_init+0x64>)
 800fcaa:	681b      	ldr	r3, [r3, #0]
 800fcac:	4a08      	ldr	r2, [pc, #32]	; (800fcd0 <mem_init+0x60>)
 800fcae:	601a      	str	r2, [r3, #0]
  ram_end->prev = MEM_SIZE_ALIGNED;
 800fcb0:	4b08      	ldr	r3, [pc, #32]	; (800fcd4 <mem_init+0x64>)
 800fcb2:	681b      	ldr	r3, [r3, #0]
 800fcb4:	4a06      	ldr	r2, [pc, #24]	; (800fcd0 <mem_init+0x60>)
 800fcb6:	605a      	str	r2, [r3, #4]
  MEM_SANITY();

  /* initialize the lowest-free pointer to the start of the heap */
  lfree = (struct mem *)(void *)ram;
 800fcb8:	4b03      	ldr	r3, [pc, #12]	; (800fcc8 <mem_init+0x58>)
 800fcba:	681b      	ldr	r3, [r3, #0]
 800fcbc:	4a06      	ldr	r2, [pc, #24]	; (800fcd8 <mem_init+0x68>)
 800fcbe:	6013      	str	r3, [r2, #0]
  MEM_STATS_AVAIL(avail, MEM_SIZE_ALIGNED);

  if (sys_mutex_new(&mem_mutex) != ERR_OK) {
    LWIP_ASSERT("failed to create mem_mutex", 0);
  }
}
 800fcc0:	bf00      	nop
 800fcc2:	3708      	adds	r7, #8
 800fcc4:	46bd      	mov	sp, r7
 800fcc6:	bd80      	pop	{r7, pc}
 800fcc8:	20000810 	.word	0x20000810
 800fccc:	30020000 	.word	0x30020000
 800fcd0:	0001ffe8 	.word	0x0001ffe8
 800fcd4:	20000814 	.word	0x20000814
 800fcd8:	20000818 	.word	0x20000818

0800fcdc <mem_link_valid>:
/* Check if a struct mem is correctly linked.
 * If not, double-free is a possible reason.
 */
static int
mem_link_valid(struct mem *mem)
{
 800fcdc:	b580      	push	{r7, lr}
 800fcde:	b086      	sub	sp, #24
 800fce0:	af00      	add	r7, sp, #0
 800fce2:	6078      	str	r0, [r7, #4]
  struct mem *nmem, *pmem;
  mem_size_t rmem_idx;
  rmem_idx = mem_to_ptr(mem);
 800fce4:	6878      	ldr	r0, [r7, #4]
 800fce6:	f7ff ff0f 	bl	800fb08 <mem_to_ptr>
 800fcea:	6178      	str	r0, [r7, #20]
  nmem = ptr_to_mem(mem->next);
 800fcec:	687b      	ldr	r3, [r7, #4]
 800fcee:	681b      	ldr	r3, [r3, #0]
 800fcf0:	4618      	mov	r0, r3
 800fcf2:	f7ff fef9 	bl	800fae8 <ptr_to_mem>
 800fcf6:	6138      	str	r0, [r7, #16]
  pmem = ptr_to_mem(mem->prev);
 800fcf8:	687b      	ldr	r3, [r7, #4]
 800fcfa:	685b      	ldr	r3, [r3, #4]
 800fcfc:	4618      	mov	r0, r3
 800fcfe:	f7ff fef3 	bl	800fae8 <ptr_to_mem>
 800fd02:	60f8      	str	r0, [r7, #12]
  if ((mem->next > MEM_SIZE_ALIGNED) || (mem->prev > MEM_SIZE_ALIGNED) ||
 800fd04:	687b      	ldr	r3, [r7, #4]
 800fd06:	681b      	ldr	r3, [r3, #0]
 800fd08:	4a11      	ldr	r2, [pc, #68]	; (800fd50 <mem_link_valid+0x74>)
 800fd0a:	4293      	cmp	r3, r2
 800fd0c:	d818      	bhi.n	800fd40 <mem_link_valid+0x64>
 800fd0e:	687b      	ldr	r3, [r7, #4]
 800fd10:	685b      	ldr	r3, [r3, #4]
 800fd12:	4a0f      	ldr	r2, [pc, #60]	; (800fd50 <mem_link_valid+0x74>)
 800fd14:	4293      	cmp	r3, r2
 800fd16:	d813      	bhi.n	800fd40 <mem_link_valid+0x64>
      ((mem->prev != rmem_idx) && (pmem->next != rmem_idx)) ||
 800fd18:	687b      	ldr	r3, [r7, #4]
 800fd1a:	685b      	ldr	r3, [r3, #4]
  if ((mem->next > MEM_SIZE_ALIGNED) || (mem->prev > MEM_SIZE_ALIGNED) ||
 800fd1c:	697a      	ldr	r2, [r7, #20]
 800fd1e:	429a      	cmp	r2, r3
 800fd20:	d004      	beq.n	800fd2c <mem_link_valid+0x50>
      ((mem->prev != rmem_idx) && (pmem->next != rmem_idx)) ||
 800fd22:	68fb      	ldr	r3, [r7, #12]
 800fd24:	681b      	ldr	r3, [r3, #0]
 800fd26:	697a      	ldr	r2, [r7, #20]
 800fd28:	429a      	cmp	r2, r3
 800fd2a:	d109      	bne.n	800fd40 <mem_link_valid+0x64>
      ((nmem != ram_end) && (nmem->prev != rmem_idx))) {
 800fd2c:	4b09      	ldr	r3, [pc, #36]	; (800fd54 <mem_link_valid+0x78>)
 800fd2e:	681b      	ldr	r3, [r3, #0]
      ((mem->prev != rmem_idx) && (pmem->next != rmem_idx)) ||
 800fd30:	693a      	ldr	r2, [r7, #16]
 800fd32:	429a      	cmp	r2, r3
 800fd34:	d006      	beq.n	800fd44 <mem_link_valid+0x68>
      ((nmem != ram_end) && (nmem->prev != rmem_idx))) {
 800fd36:	693b      	ldr	r3, [r7, #16]
 800fd38:	685b      	ldr	r3, [r3, #4]
 800fd3a:	697a      	ldr	r2, [r7, #20]
 800fd3c:	429a      	cmp	r2, r3
 800fd3e:	d001      	beq.n	800fd44 <mem_link_valid+0x68>
    return 0;
 800fd40:	2300      	movs	r3, #0
 800fd42:	e000      	b.n	800fd46 <mem_link_valid+0x6a>
  }
  return 1;
 800fd44:	2301      	movs	r3, #1
}
 800fd46:	4618      	mov	r0, r3
 800fd48:	3718      	adds	r7, #24
 800fd4a:	46bd      	mov	sp, r7
 800fd4c:	bd80      	pop	{r7, pc}
 800fd4e:	bf00      	nop
 800fd50:	0001ffe8 	.word	0x0001ffe8
 800fd54:	20000814 	.word	0x20000814

0800fd58 <mem_free>:
 * @param rmem is the data portion of a struct mem as returned by a previous
 *             call to mem_malloc()
 */
void
mem_free(void *rmem)
{
 800fd58:	b580      	push	{r7, lr}
 800fd5a:	b084      	sub	sp, #16
 800fd5c:	af00      	add	r7, sp, #0
 800fd5e:	6078      	str	r0, [r7, #4]
  struct mem *mem;
  LWIP_MEM_FREE_DECL_PROTECT();

  if (rmem == NULL) {
 800fd60:	687b      	ldr	r3, [r7, #4]
 800fd62:	2b00      	cmp	r3, #0
 800fd64:	d04c      	beq.n	800fe00 <mem_free+0xa8>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS, ("mem_free(p == NULL) was called.\n"));
    return;
  }
  if ((((mem_ptr_t)rmem) & (MEM_ALIGNMENT - 1)) != 0) {
 800fd66:	687b      	ldr	r3, [r7, #4]
 800fd68:	f003 0303 	and.w	r3, r3, #3
 800fd6c:	2b00      	cmp	r3, #0
 800fd6e:	d007      	beq.n	800fd80 <mem_free+0x28>
    LWIP_MEM_ILLEGAL_FREE("mem_free: sanity check alignment");
 800fd70:	4b25      	ldr	r3, [pc, #148]	; (800fe08 <mem_free+0xb0>)
 800fd72:	f240 2273 	movw	r2, #627	; 0x273
 800fd76:	4925      	ldr	r1, [pc, #148]	; (800fe0c <mem_free+0xb4>)
 800fd78:	4825      	ldr	r0, [pc, #148]	; (800fe10 <mem_free+0xb8>)
 800fd7a:	f00a f871 	bl	8019e60 <iprintf>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_free: sanity check alignment\n"));
    /* protect mem stats from concurrent access */
    MEM_STATS_INC_LOCKED(illegal);
    return;
 800fd7e:	e040      	b.n	800fe02 <mem_free+0xaa>
  }

  /* Get the corresponding struct mem: */
  /* cast through void* to get rid of alignment warnings */
  mem = (struct mem *)(void *)((u8_t *)rmem - (SIZEOF_STRUCT_MEM + MEM_SANITY_OFFSET));
 800fd80:	687b      	ldr	r3, [r7, #4]
 800fd82:	3b0c      	subs	r3, #12
 800fd84:	60fb      	str	r3, [r7, #12]

  if ((u8_t *)mem < ram || (u8_t *)rmem + MIN_SIZE_ALIGNED > (u8_t *)ram_end) {
 800fd86:	4b23      	ldr	r3, [pc, #140]	; (800fe14 <mem_free+0xbc>)
 800fd88:	681b      	ldr	r3, [r3, #0]
 800fd8a:	68fa      	ldr	r2, [r7, #12]
 800fd8c:	429a      	cmp	r2, r3
 800fd8e:	d306      	bcc.n	800fd9e <mem_free+0x46>
 800fd90:	687b      	ldr	r3, [r7, #4]
 800fd92:	f103 020c 	add.w	r2, r3, #12
 800fd96:	4b20      	ldr	r3, [pc, #128]	; (800fe18 <mem_free+0xc0>)
 800fd98:	681b      	ldr	r3, [r3, #0]
 800fd9a:	429a      	cmp	r2, r3
 800fd9c:	d907      	bls.n	800fdae <mem_free+0x56>
    LWIP_MEM_ILLEGAL_FREE("mem_free: illegal memory");
 800fd9e:	4b1a      	ldr	r3, [pc, #104]	; (800fe08 <mem_free+0xb0>)
 800fda0:	f240 227f 	movw	r2, #639	; 0x27f
 800fda4:	491d      	ldr	r1, [pc, #116]	; (800fe1c <mem_free+0xc4>)
 800fda6:	481a      	ldr	r0, [pc, #104]	; (800fe10 <mem_free+0xb8>)
 800fda8:	f00a f85a 	bl	8019e60 <iprintf>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_free: illegal memory\n"));
    /* protect mem stats from concurrent access */
    MEM_STATS_INC_LOCKED(illegal);
    return;
 800fdac:	e029      	b.n	800fe02 <mem_free+0xaa>
  mem_overflow_check_element(mem);
#endif
  /* protect the heap from concurrent access */
  LWIP_MEM_FREE_PROTECT();
  /* mem has to be in a used state */
  if (!mem->used) {
 800fdae:	68fb      	ldr	r3, [r7, #12]
 800fdb0:	7a1b      	ldrb	r3, [r3, #8]
 800fdb2:	2b00      	cmp	r3, #0
 800fdb4:	d107      	bne.n	800fdc6 <mem_free+0x6e>
    LWIP_MEM_ILLEGAL_FREE("mem_free: illegal memory: double free");
 800fdb6:	4b14      	ldr	r3, [pc, #80]	; (800fe08 <mem_free+0xb0>)
 800fdb8:	f44f 7223 	mov.w	r2, #652	; 0x28c
 800fdbc:	4918      	ldr	r1, [pc, #96]	; (800fe20 <mem_free+0xc8>)
 800fdbe:	4814      	ldr	r0, [pc, #80]	; (800fe10 <mem_free+0xb8>)
 800fdc0:	f00a f84e 	bl	8019e60 <iprintf>
    LWIP_MEM_FREE_UNPROTECT();
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_free: illegal memory: double free?\n"));
    /* protect mem stats from concurrent access */
    MEM_STATS_INC_LOCKED(illegal);
    return;
 800fdc4:	e01d      	b.n	800fe02 <mem_free+0xaa>
  }

  if (!mem_link_valid(mem)) {
 800fdc6:	68f8      	ldr	r0, [r7, #12]
 800fdc8:	f7ff ff88 	bl	800fcdc <mem_link_valid>
 800fdcc:	4603      	mov	r3, r0
 800fdce:	2b00      	cmp	r3, #0
 800fdd0:	d107      	bne.n	800fde2 <mem_free+0x8a>
    LWIP_MEM_ILLEGAL_FREE("mem_free: illegal memory: non-linked: double free");
 800fdd2:	4b0d      	ldr	r3, [pc, #52]	; (800fe08 <mem_free+0xb0>)
 800fdd4:	f240 2295 	movw	r2, #661	; 0x295
 800fdd8:	4912      	ldr	r1, [pc, #72]	; (800fe24 <mem_free+0xcc>)
 800fdda:	480d      	ldr	r0, [pc, #52]	; (800fe10 <mem_free+0xb8>)
 800fddc:	f00a f840 	bl	8019e60 <iprintf>
    LWIP_MEM_FREE_UNPROTECT();
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_free: illegal memory: non-linked: double free?\n"));
    /* protect mem stats from concurrent access */
    MEM_STATS_INC_LOCKED(illegal);
    return;
 800fde0:	e00f      	b.n	800fe02 <mem_free+0xaa>
  }

  /* mem is now unused. */
  mem->used = 0;
 800fde2:	68fb      	ldr	r3, [r7, #12]
 800fde4:	2200      	movs	r2, #0
 800fde6:	721a      	strb	r2, [r3, #8]

  if (mem < lfree) {
 800fde8:	4b0f      	ldr	r3, [pc, #60]	; (800fe28 <mem_free+0xd0>)
 800fdea:	681b      	ldr	r3, [r3, #0]
 800fdec:	68fa      	ldr	r2, [r7, #12]
 800fdee:	429a      	cmp	r2, r3
 800fdf0:	d202      	bcs.n	800fdf8 <mem_free+0xa0>
    /* the newly freed struct is now the lowest */
    lfree = mem;
 800fdf2:	4a0d      	ldr	r2, [pc, #52]	; (800fe28 <mem_free+0xd0>)
 800fdf4:	68fb      	ldr	r3, [r7, #12]
 800fdf6:	6013      	str	r3, [r2, #0]
  }

  MEM_STATS_DEC_USED(used, mem->next - (mem_size_t)(((u8_t *)mem - ram)));

  /* finally, see if prev or next are free also */
  plug_holes(mem);
 800fdf8:	68f8      	ldr	r0, [r7, #12]
 800fdfa:	f7ff fe95 	bl	800fb28 <plug_holes>
 800fdfe:	e000      	b.n	800fe02 <mem_free+0xaa>
    return;
 800fe00:	bf00      	nop
  MEM_SANITY();
#if LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
  mem_free_count = 1;
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
  LWIP_MEM_FREE_UNPROTECT();
}
 800fe02:	3710      	adds	r7, #16
 800fe04:	46bd      	mov	sp, r7
 800fe06:	bd80      	pop	{r7, pc}
 800fe08:	0801ca0c 	.word	0x0801ca0c
 800fe0c:	0801cae0 	.word	0x0801cae0
 800fe10:	0801ca54 	.word	0x0801ca54
 800fe14:	20000810 	.word	0x20000810
 800fe18:	20000814 	.word	0x20000814
 800fe1c:	0801cb04 	.word	0x0801cb04
 800fe20:	0801cb20 	.word	0x0801cb20
 800fe24:	0801cb48 	.word	0x0801cb48
 800fe28:	20000818 	.word	0x20000818

0800fe2c <mem_trim>:
 *         or NULL if newsize is > old size, in which case rmem is NOT touched
 *         or freed!
 */
void *
mem_trim(void *rmem, mem_size_t new_size)
{
 800fe2c:	b580      	push	{r7, lr}
 800fe2e:	b08a      	sub	sp, #40	; 0x28
 800fe30:	af00      	add	r7, sp, #0
 800fe32:	6078      	str	r0, [r7, #4]
 800fe34:	6039      	str	r1, [r7, #0]
  /* use the FREE_PROTECT here: it protects with sem OR SYS_ARCH_PROTECT */
  LWIP_MEM_FREE_DECL_PROTECT();

  /* Expand the size of the allocated memory region so that we can
     adjust for alignment. */
  newsize = (mem_size_t)LWIP_MEM_ALIGN_SIZE(new_size);
 800fe36:	683b      	ldr	r3, [r7, #0]
 800fe38:	3303      	adds	r3, #3
 800fe3a:	f023 0303 	bic.w	r3, r3, #3
 800fe3e:	627b      	str	r3, [r7, #36]	; 0x24
  if (newsize < MIN_SIZE_ALIGNED) {
 800fe40:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800fe42:	2b0b      	cmp	r3, #11
 800fe44:	d801      	bhi.n	800fe4a <mem_trim+0x1e>
    /* every data block must be at least MIN_SIZE_ALIGNED long */
    newsize = MIN_SIZE_ALIGNED;
 800fe46:	230c      	movs	r3, #12
 800fe48:	627b      	str	r3, [r7, #36]	; 0x24
  }
#if MEM_OVERFLOW_CHECK
  newsize += MEM_SANITY_REGION_BEFORE_ALIGNED + MEM_SANITY_REGION_AFTER_ALIGNED;
#endif
  if ((newsize > MEM_SIZE_ALIGNED) || (newsize < new_size)) {
 800fe4a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800fe4c:	4a68      	ldr	r2, [pc, #416]	; (800fff0 <mem_trim+0x1c4>)
 800fe4e:	4293      	cmp	r3, r2
 800fe50:	d803      	bhi.n	800fe5a <mem_trim+0x2e>
 800fe52:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800fe54:	683b      	ldr	r3, [r7, #0]
 800fe56:	429a      	cmp	r2, r3
 800fe58:	d201      	bcs.n	800fe5e <mem_trim+0x32>
    return NULL;
 800fe5a:	2300      	movs	r3, #0
 800fe5c:	e0c4      	b.n	800ffe8 <mem_trim+0x1bc>
  }

  LWIP_ASSERT("mem_trim: legal memory", (u8_t *)rmem >= (u8_t *)ram &&
 800fe5e:	4b65      	ldr	r3, [pc, #404]	; (800fff4 <mem_trim+0x1c8>)
 800fe60:	681b      	ldr	r3, [r3, #0]
 800fe62:	687a      	ldr	r2, [r7, #4]
 800fe64:	429a      	cmp	r2, r3
 800fe66:	d304      	bcc.n	800fe72 <mem_trim+0x46>
 800fe68:	4b63      	ldr	r3, [pc, #396]	; (800fff8 <mem_trim+0x1cc>)
 800fe6a:	681b      	ldr	r3, [r3, #0]
 800fe6c:	687a      	ldr	r2, [r7, #4]
 800fe6e:	429a      	cmp	r2, r3
 800fe70:	d306      	bcc.n	800fe80 <mem_trim+0x54>
 800fe72:	4b62      	ldr	r3, [pc, #392]	; (800fffc <mem_trim+0x1d0>)
 800fe74:	f240 22d1 	movw	r2, #721	; 0x2d1
 800fe78:	4961      	ldr	r1, [pc, #388]	; (8010000 <mem_trim+0x1d4>)
 800fe7a:	4862      	ldr	r0, [pc, #392]	; (8010004 <mem_trim+0x1d8>)
 800fe7c:	f009 fff0 	bl	8019e60 <iprintf>
              (u8_t *)rmem < (u8_t *)ram_end);

  if ((u8_t *)rmem < (u8_t *)ram || (u8_t *)rmem >= (u8_t *)ram_end) {
 800fe80:	4b5c      	ldr	r3, [pc, #368]	; (800fff4 <mem_trim+0x1c8>)
 800fe82:	681b      	ldr	r3, [r3, #0]
 800fe84:	687a      	ldr	r2, [r7, #4]
 800fe86:	429a      	cmp	r2, r3
 800fe88:	d304      	bcc.n	800fe94 <mem_trim+0x68>
 800fe8a:	4b5b      	ldr	r3, [pc, #364]	; (800fff8 <mem_trim+0x1cc>)
 800fe8c:	681b      	ldr	r3, [r3, #0]
 800fe8e:	687a      	ldr	r2, [r7, #4]
 800fe90:	429a      	cmp	r2, r3
 800fe92:	d301      	bcc.n	800fe98 <mem_trim+0x6c>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_trim: illegal memory\n"));
    /* protect mem stats from concurrent access */
    MEM_STATS_INC_LOCKED(illegal);
    return rmem;
 800fe94:	687b      	ldr	r3, [r7, #4]
 800fe96:	e0a7      	b.n	800ffe8 <mem_trim+0x1bc>
  }
  /* Get the corresponding struct mem ... */
  /* cast through void* to get rid of alignment warnings */
  mem = (struct mem *)(void *)((u8_t *)rmem - (SIZEOF_STRUCT_MEM + MEM_SANITY_OFFSET));
 800fe98:	687b      	ldr	r3, [r7, #4]
 800fe9a:	3b0c      	subs	r3, #12
 800fe9c:	623b      	str	r3, [r7, #32]
#if MEM_OVERFLOW_CHECK
  mem_overflow_check_element(mem);
#endif
  /* ... and its offset pointer */
  ptr = mem_to_ptr(mem);
 800fe9e:	6a38      	ldr	r0, [r7, #32]
 800fea0:	f7ff fe32 	bl	800fb08 <mem_to_ptr>
 800fea4:	61f8      	str	r0, [r7, #28]

  size = (mem_size_t)((mem_size_t)(mem->next - ptr) - (SIZEOF_STRUCT_MEM + MEM_SANITY_OVERHEAD));
 800fea6:	6a3b      	ldr	r3, [r7, #32]
 800fea8:	681a      	ldr	r2, [r3, #0]
 800feaa:	69fb      	ldr	r3, [r7, #28]
 800feac:	1ad3      	subs	r3, r2, r3
 800feae:	3b0c      	subs	r3, #12
 800feb0:	61bb      	str	r3, [r7, #24]
  LWIP_ASSERT("mem_trim can only shrink memory", newsize <= size);
 800feb2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800feb4:	69bb      	ldr	r3, [r7, #24]
 800feb6:	429a      	cmp	r2, r3
 800feb8:	d906      	bls.n	800fec8 <mem_trim+0x9c>
 800feba:	4b50      	ldr	r3, [pc, #320]	; (800fffc <mem_trim+0x1d0>)
 800febc:	f44f 7239 	mov.w	r2, #740	; 0x2e4
 800fec0:	4951      	ldr	r1, [pc, #324]	; (8010008 <mem_trim+0x1dc>)
 800fec2:	4850      	ldr	r0, [pc, #320]	; (8010004 <mem_trim+0x1d8>)
 800fec4:	f009 ffcc 	bl	8019e60 <iprintf>
  if (newsize > size) {
 800fec8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800feca:	69bb      	ldr	r3, [r7, #24]
 800fecc:	429a      	cmp	r2, r3
 800fece:	d901      	bls.n	800fed4 <mem_trim+0xa8>
    /* not supported */
    return NULL;
 800fed0:	2300      	movs	r3, #0
 800fed2:	e089      	b.n	800ffe8 <mem_trim+0x1bc>
  }
  if (newsize == size) {
 800fed4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800fed6:	69bb      	ldr	r3, [r7, #24]
 800fed8:	429a      	cmp	r2, r3
 800feda:	d101      	bne.n	800fee0 <mem_trim+0xb4>
    /* No change in size, simply return */
    return rmem;
 800fedc:	687b      	ldr	r3, [r7, #4]
 800fede:	e083      	b.n	800ffe8 <mem_trim+0x1bc>
  }

  /* protect the heap from concurrent access */
  LWIP_MEM_FREE_PROTECT();

  mem2 = ptr_to_mem(mem->next);
 800fee0:	6a3b      	ldr	r3, [r7, #32]
 800fee2:	681b      	ldr	r3, [r3, #0]
 800fee4:	4618      	mov	r0, r3
 800fee6:	f7ff fdff 	bl	800fae8 <ptr_to_mem>
 800feea:	6178      	str	r0, [r7, #20]
  if (mem2->used == 0) {
 800feec:	697b      	ldr	r3, [r7, #20]
 800feee:	7a1b      	ldrb	r3, [r3, #8]
 800fef0:	2b00      	cmp	r3, #0
 800fef2:	d13c      	bne.n	800ff6e <mem_trim+0x142>
    /* The next struct is unused, we can simply move it at little */
    mem_size_t next;
    LWIP_ASSERT("invalid next ptr", mem->next != MEM_SIZE_ALIGNED);
 800fef4:	6a3b      	ldr	r3, [r7, #32]
 800fef6:	681b      	ldr	r3, [r3, #0]
 800fef8:	4a3d      	ldr	r2, [pc, #244]	; (800fff0 <mem_trim+0x1c4>)
 800fefa:	4293      	cmp	r3, r2
 800fefc:	d106      	bne.n	800ff0c <mem_trim+0xe0>
 800fefe:	4b3f      	ldr	r3, [pc, #252]	; (800fffc <mem_trim+0x1d0>)
 800ff00:	f240 22f5 	movw	r2, #757	; 0x2f5
 800ff04:	4941      	ldr	r1, [pc, #260]	; (801000c <mem_trim+0x1e0>)
 800ff06:	483f      	ldr	r0, [pc, #252]	; (8010004 <mem_trim+0x1d8>)
 800ff08:	f009 ffaa 	bl	8019e60 <iprintf>
    /* remember the old next pointer */
    next = mem2->next;
 800ff0c:	697b      	ldr	r3, [r7, #20]
 800ff0e:	681b      	ldr	r3, [r3, #0]
 800ff10:	60fb      	str	r3, [r7, #12]
    /* create new struct mem which is moved directly after the shrinked mem */
    ptr2 = (mem_size_t)(ptr + SIZEOF_STRUCT_MEM + newsize);
 800ff12:	69fa      	ldr	r2, [r7, #28]
 800ff14:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ff16:	4413      	add	r3, r2
 800ff18:	330c      	adds	r3, #12
 800ff1a:	613b      	str	r3, [r7, #16]
    if (lfree == mem2) {
 800ff1c:	4b3c      	ldr	r3, [pc, #240]	; (8010010 <mem_trim+0x1e4>)
 800ff1e:	681b      	ldr	r3, [r3, #0]
 800ff20:	697a      	ldr	r2, [r7, #20]
 800ff22:	429a      	cmp	r2, r3
 800ff24:	d105      	bne.n	800ff32 <mem_trim+0x106>
      lfree = ptr_to_mem(ptr2);
 800ff26:	6938      	ldr	r0, [r7, #16]
 800ff28:	f7ff fdde 	bl	800fae8 <ptr_to_mem>
 800ff2c:	4603      	mov	r3, r0
 800ff2e:	4a38      	ldr	r2, [pc, #224]	; (8010010 <mem_trim+0x1e4>)
 800ff30:	6013      	str	r3, [r2, #0]
    }
    mem2 = ptr_to_mem(ptr2);
 800ff32:	6938      	ldr	r0, [r7, #16]
 800ff34:	f7ff fdd8 	bl	800fae8 <ptr_to_mem>
 800ff38:	6178      	str	r0, [r7, #20]
    mem2->used = 0;
 800ff3a:	697b      	ldr	r3, [r7, #20]
 800ff3c:	2200      	movs	r2, #0
 800ff3e:	721a      	strb	r2, [r3, #8]
    /* restore the next pointer */
    mem2->next = next;
 800ff40:	697b      	ldr	r3, [r7, #20]
 800ff42:	68fa      	ldr	r2, [r7, #12]
 800ff44:	601a      	str	r2, [r3, #0]
    /* link it back to mem */
    mem2->prev = ptr;
 800ff46:	697b      	ldr	r3, [r7, #20]
 800ff48:	69fa      	ldr	r2, [r7, #28]
 800ff4a:	605a      	str	r2, [r3, #4]
    /* link mem to it */
    mem->next = ptr2;
 800ff4c:	6a3b      	ldr	r3, [r7, #32]
 800ff4e:	693a      	ldr	r2, [r7, #16]
 800ff50:	601a      	str	r2, [r3, #0]
    /* last thing to restore linked list: as we have moved mem2,
     * let 'mem2->next->prev' point to mem2 again. but only if mem2->next is not
     * the end of the heap */
    if (mem2->next != MEM_SIZE_ALIGNED) {
 800ff52:	697b      	ldr	r3, [r7, #20]
 800ff54:	681b      	ldr	r3, [r3, #0]
 800ff56:	4a26      	ldr	r2, [pc, #152]	; (800fff0 <mem_trim+0x1c4>)
 800ff58:	4293      	cmp	r3, r2
 800ff5a:	d044      	beq.n	800ffe6 <mem_trim+0x1ba>
      ptr_to_mem(mem2->next)->prev = ptr2;
 800ff5c:	697b      	ldr	r3, [r7, #20]
 800ff5e:	681b      	ldr	r3, [r3, #0]
 800ff60:	4618      	mov	r0, r3
 800ff62:	f7ff fdc1 	bl	800fae8 <ptr_to_mem>
 800ff66:	4602      	mov	r2, r0
 800ff68:	693b      	ldr	r3, [r7, #16]
 800ff6a:	6053      	str	r3, [r2, #4]
 800ff6c:	e03b      	b.n	800ffe6 <mem_trim+0x1ba>
    }
    MEM_STATS_DEC_USED(used, (size - newsize));
    /* no need to plug holes, we've already done that */
  } else if (newsize + SIZEOF_STRUCT_MEM + MIN_SIZE_ALIGNED <= size) {
 800ff6e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ff70:	3318      	adds	r3, #24
 800ff72:	69ba      	ldr	r2, [r7, #24]
 800ff74:	429a      	cmp	r2, r3
 800ff76:	d336      	bcc.n	800ffe6 <mem_trim+0x1ba>
     * Old size ('size') must be big enough to contain at least 'newsize' plus a struct mem
     * ('SIZEOF_STRUCT_MEM') with some data ('MIN_SIZE_ALIGNED').
     * @todo we could leave out MIN_SIZE_ALIGNED. We would create an empty
     *       region that couldn't hold data, but when mem->next gets freed,
     *       the 2 regions would be combined, resulting in more free memory */
    ptr2 = (mem_size_t)(ptr + SIZEOF_STRUCT_MEM + newsize);
 800ff78:	69fa      	ldr	r2, [r7, #28]
 800ff7a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ff7c:	4413      	add	r3, r2
 800ff7e:	330c      	adds	r3, #12
 800ff80:	613b      	str	r3, [r7, #16]
    LWIP_ASSERT("invalid next ptr", mem->next != MEM_SIZE_ALIGNED);
 800ff82:	6a3b      	ldr	r3, [r7, #32]
 800ff84:	681b      	ldr	r3, [r3, #0]
 800ff86:	4a1a      	ldr	r2, [pc, #104]	; (800fff0 <mem_trim+0x1c4>)
 800ff88:	4293      	cmp	r3, r2
 800ff8a:	d106      	bne.n	800ff9a <mem_trim+0x16e>
 800ff8c:	4b1b      	ldr	r3, [pc, #108]	; (800fffc <mem_trim+0x1d0>)
 800ff8e:	f240 3216 	movw	r2, #790	; 0x316
 800ff92:	491e      	ldr	r1, [pc, #120]	; (801000c <mem_trim+0x1e0>)
 800ff94:	481b      	ldr	r0, [pc, #108]	; (8010004 <mem_trim+0x1d8>)
 800ff96:	f009 ff63 	bl	8019e60 <iprintf>
    mem2 = ptr_to_mem(ptr2);
 800ff9a:	6938      	ldr	r0, [r7, #16]
 800ff9c:	f7ff fda4 	bl	800fae8 <ptr_to_mem>
 800ffa0:	6178      	str	r0, [r7, #20]
    if (mem2 < lfree) {
 800ffa2:	4b1b      	ldr	r3, [pc, #108]	; (8010010 <mem_trim+0x1e4>)
 800ffa4:	681b      	ldr	r3, [r3, #0]
 800ffa6:	697a      	ldr	r2, [r7, #20]
 800ffa8:	429a      	cmp	r2, r3
 800ffaa:	d202      	bcs.n	800ffb2 <mem_trim+0x186>
      lfree = mem2;
 800ffac:	4a18      	ldr	r2, [pc, #96]	; (8010010 <mem_trim+0x1e4>)
 800ffae:	697b      	ldr	r3, [r7, #20]
 800ffb0:	6013      	str	r3, [r2, #0]
    }
    mem2->used = 0;
 800ffb2:	697b      	ldr	r3, [r7, #20]
 800ffb4:	2200      	movs	r2, #0
 800ffb6:	721a      	strb	r2, [r3, #8]
    mem2->next = mem->next;
 800ffb8:	6a3b      	ldr	r3, [r7, #32]
 800ffba:	681a      	ldr	r2, [r3, #0]
 800ffbc:	697b      	ldr	r3, [r7, #20]
 800ffbe:	601a      	str	r2, [r3, #0]
    mem2->prev = ptr;
 800ffc0:	697b      	ldr	r3, [r7, #20]
 800ffc2:	69fa      	ldr	r2, [r7, #28]
 800ffc4:	605a      	str	r2, [r3, #4]
    mem->next = ptr2;
 800ffc6:	6a3b      	ldr	r3, [r7, #32]
 800ffc8:	693a      	ldr	r2, [r7, #16]
 800ffca:	601a      	str	r2, [r3, #0]
    if (mem2->next != MEM_SIZE_ALIGNED) {
 800ffcc:	697b      	ldr	r3, [r7, #20]
 800ffce:	681b      	ldr	r3, [r3, #0]
 800ffd0:	4a07      	ldr	r2, [pc, #28]	; (800fff0 <mem_trim+0x1c4>)
 800ffd2:	4293      	cmp	r3, r2
 800ffd4:	d007      	beq.n	800ffe6 <mem_trim+0x1ba>
      ptr_to_mem(mem2->next)->prev = ptr2;
 800ffd6:	697b      	ldr	r3, [r7, #20]
 800ffd8:	681b      	ldr	r3, [r3, #0]
 800ffda:	4618      	mov	r0, r3
 800ffdc:	f7ff fd84 	bl	800fae8 <ptr_to_mem>
 800ffe0:	4602      	mov	r2, r0
 800ffe2:	693b      	ldr	r3, [r7, #16]
 800ffe4:	6053      	str	r3, [r2, #4]
  MEM_SANITY();
#if LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
  mem_free_count = 1;
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
  LWIP_MEM_FREE_UNPROTECT();
  return rmem;
 800ffe6:	687b      	ldr	r3, [r7, #4]
}
 800ffe8:	4618      	mov	r0, r3
 800ffea:	3728      	adds	r7, #40	; 0x28
 800ffec:	46bd      	mov	sp, r7
 800ffee:	bd80      	pop	{r7, pc}
 800fff0:	0001ffe8 	.word	0x0001ffe8
 800fff4:	20000810 	.word	0x20000810
 800fff8:	20000814 	.word	0x20000814
 800fffc:	0801ca0c 	.word	0x0801ca0c
 8010000:	0801cb7c 	.word	0x0801cb7c
 8010004:	0801ca54 	.word	0x0801ca54
 8010008:	0801cb94 	.word	0x0801cb94
 801000c:	0801cbb4 	.word	0x0801cbb4
 8010010:	20000818 	.word	0x20000818

08010014 <mem_malloc>:
 *
 * Note that the returned value will always be aligned (as defined by MEM_ALIGNMENT).
 */
void *
mem_malloc(mem_size_t size_in)
{
 8010014:	b580      	push	{r7, lr}
 8010016:	b088      	sub	sp, #32
 8010018:	af00      	add	r7, sp, #0
 801001a:	6078      	str	r0, [r7, #4]
#if LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
  u8_t local_mem_free_count = 0;
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
  LWIP_MEM_ALLOC_DECL_PROTECT();

  if (size_in == 0) {
 801001c:	687b      	ldr	r3, [r7, #4]
 801001e:	2b00      	cmp	r3, #0
 8010020:	d101      	bne.n	8010026 <mem_malloc+0x12>
    return NULL;
 8010022:	2300      	movs	r3, #0
 8010024:	e0d0      	b.n	80101c8 <mem_malloc+0x1b4>
  }

  /* Expand the size of the allocated memory region so that we can
     adjust for alignment. */
  size = (mem_size_t)LWIP_MEM_ALIGN_SIZE(size_in);
 8010026:	687b      	ldr	r3, [r7, #4]
 8010028:	3303      	adds	r3, #3
 801002a:	f023 0303 	bic.w	r3, r3, #3
 801002e:	61bb      	str	r3, [r7, #24]
  if (size < MIN_SIZE_ALIGNED) {
 8010030:	69bb      	ldr	r3, [r7, #24]
 8010032:	2b0b      	cmp	r3, #11
 8010034:	d801      	bhi.n	801003a <mem_malloc+0x26>
    /* every data block must be at least MIN_SIZE_ALIGNED long */
    size = MIN_SIZE_ALIGNED;
 8010036:	230c      	movs	r3, #12
 8010038:	61bb      	str	r3, [r7, #24]
  }
#if MEM_OVERFLOW_CHECK
  size += MEM_SANITY_REGION_BEFORE_ALIGNED + MEM_SANITY_REGION_AFTER_ALIGNED;
#endif
  if ((size > MEM_SIZE_ALIGNED) || (size < size_in)) {
 801003a:	69bb      	ldr	r3, [r7, #24]
 801003c:	4a64      	ldr	r2, [pc, #400]	; (80101d0 <mem_malloc+0x1bc>)
 801003e:	4293      	cmp	r3, r2
 8010040:	d803      	bhi.n	801004a <mem_malloc+0x36>
 8010042:	69ba      	ldr	r2, [r7, #24]
 8010044:	687b      	ldr	r3, [r7, #4]
 8010046:	429a      	cmp	r2, r3
 8010048:	d201      	bcs.n	801004e <mem_malloc+0x3a>
    return NULL;
 801004a:	2300      	movs	r3, #0
 801004c:	e0bc      	b.n	80101c8 <mem_malloc+0x1b4>
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */

    /* Scan through the heap searching for a free block that is big enough,
     * beginning with the lowest free block.
     */
    for (ptr = mem_to_ptr(lfree); ptr < MEM_SIZE_ALIGNED - size;
 801004e:	4b61      	ldr	r3, [pc, #388]	; (80101d4 <mem_malloc+0x1c0>)
 8010050:	681b      	ldr	r3, [r3, #0]
 8010052:	4618      	mov	r0, r3
 8010054:	f7ff fd58 	bl	800fb08 <mem_to_ptr>
 8010058:	61f8      	str	r0, [r7, #28]
 801005a:	e0ad      	b.n	80101b8 <mem_malloc+0x1a4>
         ptr = ptr_to_mem(ptr)->next) {
      mem = ptr_to_mem(ptr);
 801005c:	69f8      	ldr	r0, [r7, #28]
 801005e:	f7ff fd43 	bl	800fae8 <ptr_to_mem>
 8010062:	6138      	str	r0, [r7, #16]
        local_mem_free_count = 1;
        break;
      }
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */

      if ((!mem->used) &&
 8010064:	693b      	ldr	r3, [r7, #16]
 8010066:	7a1b      	ldrb	r3, [r3, #8]
 8010068:	2b00      	cmp	r3, #0
 801006a:	f040 809f 	bne.w	80101ac <mem_malloc+0x198>
          (mem->next - (ptr + SIZEOF_STRUCT_MEM)) >= size) {
 801006e:	693b      	ldr	r3, [r7, #16]
 8010070:	681a      	ldr	r2, [r3, #0]
 8010072:	69fb      	ldr	r3, [r7, #28]
 8010074:	1ad3      	subs	r3, r2, r3
 8010076:	3b0c      	subs	r3, #12
      if ((!mem->used) &&
 8010078:	69ba      	ldr	r2, [r7, #24]
 801007a:	429a      	cmp	r2, r3
 801007c:	f200 8096 	bhi.w	80101ac <mem_malloc+0x198>
        /* mem is not used and at least perfect fit is possible:
         * mem->next - (ptr + SIZEOF_STRUCT_MEM) gives us the 'user data size' of mem */

        if (mem->next - (ptr + SIZEOF_STRUCT_MEM) >= (size + SIZEOF_STRUCT_MEM + MIN_SIZE_ALIGNED)) {
 8010080:	693b      	ldr	r3, [r7, #16]
 8010082:	681a      	ldr	r2, [r3, #0]
 8010084:	69fb      	ldr	r3, [r7, #28]
 8010086:	1ad3      	subs	r3, r2, r3
 8010088:	f1a3 020c 	sub.w	r2, r3, #12
 801008c:	69bb      	ldr	r3, [r7, #24]
 801008e:	3318      	adds	r3, #24
 8010090:	429a      	cmp	r2, r3
 8010092:	d331      	bcc.n	80100f8 <mem_malloc+0xe4>
           * struct mem would fit in but no data between mem2 and mem2->next
           * @todo we could leave out MIN_SIZE_ALIGNED. We would create an empty
           *       region that couldn't hold data, but when mem->next gets freed,
           *       the 2 regions would be combined, resulting in more free memory
           */
          ptr2 = (mem_size_t)(ptr + SIZEOF_STRUCT_MEM + size);
 8010094:	69fa      	ldr	r2, [r7, #28]
 8010096:	69bb      	ldr	r3, [r7, #24]
 8010098:	4413      	add	r3, r2
 801009a:	330c      	adds	r3, #12
 801009c:	60fb      	str	r3, [r7, #12]
          LWIP_ASSERT("invalid next ptr",ptr2 != MEM_SIZE_ALIGNED);
 801009e:	68fb      	ldr	r3, [r7, #12]
 80100a0:	4a4b      	ldr	r2, [pc, #300]	; (80101d0 <mem_malloc+0x1bc>)
 80100a2:	4293      	cmp	r3, r2
 80100a4:	d106      	bne.n	80100b4 <mem_malloc+0xa0>
 80100a6:	4b4c      	ldr	r3, [pc, #304]	; (80101d8 <mem_malloc+0x1c4>)
 80100a8:	f240 3287 	movw	r2, #903	; 0x387
 80100ac:	494b      	ldr	r1, [pc, #300]	; (80101dc <mem_malloc+0x1c8>)
 80100ae:	484c      	ldr	r0, [pc, #304]	; (80101e0 <mem_malloc+0x1cc>)
 80100b0:	f009 fed6 	bl	8019e60 <iprintf>
          /* create mem2 struct */
          mem2 = ptr_to_mem(ptr2);
 80100b4:	68f8      	ldr	r0, [r7, #12]
 80100b6:	f7ff fd17 	bl	800fae8 <ptr_to_mem>
 80100ba:	60b8      	str	r0, [r7, #8]
          mem2->used = 0;
 80100bc:	68bb      	ldr	r3, [r7, #8]
 80100be:	2200      	movs	r2, #0
 80100c0:	721a      	strb	r2, [r3, #8]
          mem2->next = mem->next;
 80100c2:	693b      	ldr	r3, [r7, #16]
 80100c4:	681a      	ldr	r2, [r3, #0]
 80100c6:	68bb      	ldr	r3, [r7, #8]
 80100c8:	601a      	str	r2, [r3, #0]
          mem2->prev = ptr;
 80100ca:	68bb      	ldr	r3, [r7, #8]
 80100cc:	69fa      	ldr	r2, [r7, #28]
 80100ce:	605a      	str	r2, [r3, #4]
          /* and insert it between mem and mem->next */
          mem->next = ptr2;
 80100d0:	693b      	ldr	r3, [r7, #16]
 80100d2:	68fa      	ldr	r2, [r7, #12]
 80100d4:	601a      	str	r2, [r3, #0]
          mem->used = 1;
 80100d6:	693b      	ldr	r3, [r7, #16]
 80100d8:	2201      	movs	r2, #1
 80100da:	721a      	strb	r2, [r3, #8]

          if (mem2->next != MEM_SIZE_ALIGNED) {
 80100dc:	68bb      	ldr	r3, [r7, #8]
 80100de:	681b      	ldr	r3, [r3, #0]
 80100e0:	4a3b      	ldr	r2, [pc, #236]	; (80101d0 <mem_malloc+0x1bc>)
 80100e2:	4293      	cmp	r3, r2
 80100e4:	d00b      	beq.n	80100fe <mem_malloc+0xea>
            ptr_to_mem(mem2->next)->prev = ptr2;
 80100e6:	68bb      	ldr	r3, [r7, #8]
 80100e8:	681b      	ldr	r3, [r3, #0]
 80100ea:	4618      	mov	r0, r3
 80100ec:	f7ff fcfc 	bl	800fae8 <ptr_to_mem>
 80100f0:	4602      	mov	r2, r0
 80100f2:	68fb      	ldr	r3, [r7, #12]
 80100f4:	6053      	str	r3, [r2, #4]
 80100f6:	e002      	b.n	80100fe <mem_malloc+0xea>
           * take care of this).
           * -> near fit or exact fit: do not split, no mem2 creation
           * also can't move mem->next directly behind mem, since mem->next
           * will always be used at this point!
           */
          mem->used = 1;
 80100f8:	693b      	ldr	r3, [r7, #16]
 80100fa:	2201      	movs	r2, #1
 80100fc:	721a      	strb	r2, [r3, #8]
          MEM_STATS_INC_USED(used, mem->next - mem_to_ptr(mem));
        }
#if LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
mem_malloc_adjust_lfree:
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
        if (mem == lfree) {
 80100fe:	4b35      	ldr	r3, [pc, #212]	; (80101d4 <mem_malloc+0x1c0>)
 8010100:	681b      	ldr	r3, [r3, #0]
 8010102:	693a      	ldr	r2, [r7, #16]
 8010104:	429a      	cmp	r2, r3
 8010106:	d127      	bne.n	8010158 <mem_malloc+0x144>
          struct mem *cur = lfree;
 8010108:	4b32      	ldr	r3, [pc, #200]	; (80101d4 <mem_malloc+0x1c0>)
 801010a:	681b      	ldr	r3, [r3, #0]
 801010c:	617b      	str	r3, [r7, #20]
          /* Find next free block after mem and update lowest free pointer */
          while (cur->used && cur != ram_end) {
 801010e:	e005      	b.n	801011c <mem_malloc+0x108>
              /* If mem_free or mem_trim have run, we have to restart since they
                 could have altered our current struct mem or lfree. */
              goto mem_malloc_adjust_lfree;
            }
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
            cur = ptr_to_mem(cur->next);
 8010110:	697b      	ldr	r3, [r7, #20]
 8010112:	681b      	ldr	r3, [r3, #0]
 8010114:	4618      	mov	r0, r3
 8010116:	f7ff fce7 	bl	800fae8 <ptr_to_mem>
 801011a:	6178      	str	r0, [r7, #20]
          while (cur->used && cur != ram_end) {
 801011c:	697b      	ldr	r3, [r7, #20]
 801011e:	7a1b      	ldrb	r3, [r3, #8]
 8010120:	2b00      	cmp	r3, #0
 8010122:	d004      	beq.n	801012e <mem_malloc+0x11a>
 8010124:	4b2f      	ldr	r3, [pc, #188]	; (80101e4 <mem_malloc+0x1d0>)
 8010126:	681b      	ldr	r3, [r3, #0]
 8010128:	697a      	ldr	r2, [r7, #20]
 801012a:	429a      	cmp	r2, r3
 801012c:	d1f0      	bne.n	8010110 <mem_malloc+0xfc>
          }
          lfree = cur;
 801012e:	4a29      	ldr	r2, [pc, #164]	; (80101d4 <mem_malloc+0x1c0>)
 8010130:	697b      	ldr	r3, [r7, #20]
 8010132:	6013      	str	r3, [r2, #0]
          LWIP_ASSERT("mem_malloc: !lfree->used", ((lfree == ram_end) || (!lfree->used)));
 8010134:	4b27      	ldr	r3, [pc, #156]	; (80101d4 <mem_malloc+0x1c0>)
 8010136:	681a      	ldr	r2, [r3, #0]
 8010138:	4b2a      	ldr	r3, [pc, #168]	; (80101e4 <mem_malloc+0x1d0>)
 801013a:	681b      	ldr	r3, [r3, #0]
 801013c:	429a      	cmp	r2, r3
 801013e:	d00b      	beq.n	8010158 <mem_malloc+0x144>
 8010140:	4b24      	ldr	r3, [pc, #144]	; (80101d4 <mem_malloc+0x1c0>)
 8010142:	681b      	ldr	r3, [r3, #0]
 8010144:	7a1b      	ldrb	r3, [r3, #8]
 8010146:	2b00      	cmp	r3, #0
 8010148:	d006      	beq.n	8010158 <mem_malloc+0x144>
 801014a:	4b23      	ldr	r3, [pc, #140]	; (80101d8 <mem_malloc+0x1c4>)
 801014c:	f240 32b5 	movw	r2, #949	; 0x3b5
 8010150:	4925      	ldr	r1, [pc, #148]	; (80101e8 <mem_malloc+0x1d4>)
 8010152:	4823      	ldr	r0, [pc, #140]	; (80101e0 <mem_malloc+0x1cc>)
 8010154:	f009 fe84 	bl	8019e60 <iprintf>
        }
        LWIP_MEM_ALLOC_UNPROTECT();
        sys_mutex_unlock(&mem_mutex);
        LWIP_ASSERT("mem_malloc: allocated memory not above ram_end.",
 8010158:	693a      	ldr	r2, [r7, #16]
 801015a:	69bb      	ldr	r3, [r7, #24]
 801015c:	4413      	add	r3, r2
 801015e:	330c      	adds	r3, #12
 8010160:	4a20      	ldr	r2, [pc, #128]	; (80101e4 <mem_malloc+0x1d0>)
 8010162:	6812      	ldr	r2, [r2, #0]
 8010164:	4293      	cmp	r3, r2
 8010166:	d906      	bls.n	8010176 <mem_malloc+0x162>
 8010168:	4b1b      	ldr	r3, [pc, #108]	; (80101d8 <mem_malloc+0x1c4>)
 801016a:	f240 32b9 	movw	r2, #953	; 0x3b9
 801016e:	491f      	ldr	r1, [pc, #124]	; (80101ec <mem_malloc+0x1d8>)
 8010170:	481b      	ldr	r0, [pc, #108]	; (80101e0 <mem_malloc+0x1cc>)
 8010172:	f009 fe75 	bl	8019e60 <iprintf>
                    (mem_ptr_t)mem + SIZEOF_STRUCT_MEM + size <= (mem_ptr_t)ram_end);
        LWIP_ASSERT("mem_malloc: allocated memory properly aligned.",
 8010176:	693b      	ldr	r3, [r7, #16]
 8010178:	f003 0303 	and.w	r3, r3, #3
 801017c:	2b00      	cmp	r3, #0
 801017e:	d006      	beq.n	801018e <mem_malloc+0x17a>
 8010180:	4b15      	ldr	r3, [pc, #84]	; (80101d8 <mem_malloc+0x1c4>)
 8010182:	f240 32bb 	movw	r2, #955	; 0x3bb
 8010186:	491a      	ldr	r1, [pc, #104]	; (80101f0 <mem_malloc+0x1dc>)
 8010188:	4815      	ldr	r0, [pc, #84]	; (80101e0 <mem_malloc+0x1cc>)
 801018a:	f009 fe69 	bl	8019e60 <iprintf>
                    ((mem_ptr_t)mem + SIZEOF_STRUCT_MEM) % MEM_ALIGNMENT == 0);
        LWIP_ASSERT("mem_malloc: sanity check alignment",
 801018e:	693b      	ldr	r3, [r7, #16]
 8010190:	f003 0303 	and.w	r3, r3, #3
 8010194:	2b00      	cmp	r3, #0
 8010196:	d006      	beq.n	80101a6 <mem_malloc+0x192>
 8010198:	4b0f      	ldr	r3, [pc, #60]	; (80101d8 <mem_malloc+0x1c4>)
 801019a:	f240 32bd 	movw	r2, #957	; 0x3bd
 801019e:	4915      	ldr	r1, [pc, #84]	; (80101f4 <mem_malloc+0x1e0>)
 80101a0:	480f      	ldr	r0, [pc, #60]	; (80101e0 <mem_malloc+0x1cc>)
 80101a2:	f009 fe5d 	bl	8019e60 <iprintf>

#if MEM_OVERFLOW_CHECK
        mem_overflow_init_element(mem, size_in);
#endif
        MEM_SANITY();
        return (u8_t *)mem + SIZEOF_STRUCT_MEM + MEM_SANITY_OFFSET;
 80101a6:	693b      	ldr	r3, [r7, #16]
 80101a8:	330c      	adds	r3, #12
 80101aa:	e00d      	b.n	80101c8 <mem_malloc+0x1b4>
         ptr = ptr_to_mem(ptr)->next) {
 80101ac:	69f8      	ldr	r0, [r7, #28]
 80101ae:	f7ff fc9b 	bl	800fae8 <ptr_to_mem>
 80101b2:	4603      	mov	r3, r0
 80101b4:	681b      	ldr	r3, [r3, #0]
 80101b6:	61fb      	str	r3, [r7, #28]
    for (ptr = mem_to_ptr(lfree); ptr < MEM_SIZE_ALIGNED - size;
 80101b8:	69ba      	ldr	r2, [r7, #24]
 80101ba:	4b05      	ldr	r3, [pc, #20]	; (80101d0 <mem_malloc+0x1bc>)
 80101bc:	1a9b      	subs	r3, r3, r2
 80101be:	69fa      	ldr	r2, [r7, #28]
 80101c0:	429a      	cmp	r2, r3
 80101c2:	f4ff af4b 	bcc.w	801005c <mem_malloc+0x48>
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
  MEM_STATS_INC(err);
  LWIP_MEM_ALLOC_UNPROTECT();
  sys_mutex_unlock(&mem_mutex);
  LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("mem_malloc: could not allocate %"S16_F" bytes\n", (s16_t)size));
  return NULL;
 80101c6:	2300      	movs	r3, #0
}
 80101c8:	4618      	mov	r0, r3
 80101ca:	3720      	adds	r7, #32
 80101cc:	46bd      	mov	sp, r7
 80101ce:	bd80      	pop	{r7, pc}
 80101d0:	0001ffe8 	.word	0x0001ffe8
 80101d4:	20000818 	.word	0x20000818
 80101d8:	0801ca0c 	.word	0x0801ca0c
 80101dc:	0801cbb4 	.word	0x0801cbb4
 80101e0:	0801ca54 	.word	0x0801ca54
 80101e4:	20000814 	.word	0x20000814
 80101e8:	0801cbc8 	.word	0x0801cbc8
 80101ec:	0801cbe4 	.word	0x0801cbe4
 80101f0:	0801cc14 	.word	0x0801cc14
 80101f4:	0801cc44 	.word	0x0801cc44

080101f8 <memp_init_pool>:
 *
 * @param desc pool to initialize
 */
void
memp_init_pool(const struct memp_desc *desc)
{
 80101f8:	b480      	push	{r7}
 80101fa:	b085      	sub	sp, #20
 80101fc:	af00      	add	r7, sp, #0
 80101fe:	6078      	str	r0, [r7, #4]
  LWIP_UNUSED_ARG(desc);
#else
  int i;
  struct memp *memp;

  *desc->tab = NULL;
 8010200:	687b      	ldr	r3, [r7, #4]
 8010202:	689b      	ldr	r3, [r3, #8]
 8010204:	2200      	movs	r2, #0
 8010206:	601a      	str	r2, [r3, #0]
  memp = (struct memp *)LWIP_MEM_ALIGN(desc->base);
 8010208:	687b      	ldr	r3, [r7, #4]
 801020a:	685b      	ldr	r3, [r3, #4]
 801020c:	3303      	adds	r3, #3
 801020e:	f023 0303 	bic.w	r3, r3, #3
 8010212:	60bb      	str	r3, [r7, #8]
                                       + MEM_SANITY_REGION_AFTER_ALIGNED
#endif
                                      ));
#endif
  /* create a linked list of memp elements */
  for (i = 0; i < desc->num; ++i) {
 8010214:	2300      	movs	r3, #0
 8010216:	60fb      	str	r3, [r7, #12]
 8010218:	e011      	b.n	801023e <memp_init_pool+0x46>
    memp->next = *desc->tab;
 801021a:	687b      	ldr	r3, [r7, #4]
 801021c:	689b      	ldr	r3, [r3, #8]
 801021e:	681a      	ldr	r2, [r3, #0]
 8010220:	68bb      	ldr	r3, [r7, #8]
 8010222:	601a      	str	r2, [r3, #0]
    *desc->tab = memp;
 8010224:	687b      	ldr	r3, [r7, #4]
 8010226:	689b      	ldr	r3, [r3, #8]
 8010228:	68ba      	ldr	r2, [r7, #8]
 801022a:	601a      	str	r2, [r3, #0]
#if MEMP_OVERFLOW_CHECK
    memp_overflow_init_element(memp, desc);
#endif /* MEMP_OVERFLOW_CHECK */
    /* cast through void* to get rid of alignment warnings */
    memp = (struct memp *)(void *)((u8_t *)memp + MEMP_SIZE + desc->size
 801022c:	687b      	ldr	r3, [r7, #4]
 801022e:	881b      	ldrh	r3, [r3, #0]
 8010230:	461a      	mov	r2, r3
 8010232:	68bb      	ldr	r3, [r7, #8]
 8010234:	4413      	add	r3, r2
 8010236:	60bb      	str	r3, [r7, #8]
  for (i = 0; i < desc->num; ++i) {
 8010238:	68fb      	ldr	r3, [r7, #12]
 801023a:	3301      	adds	r3, #1
 801023c:	60fb      	str	r3, [r7, #12]
 801023e:	687b      	ldr	r3, [r7, #4]
 8010240:	885b      	ldrh	r3, [r3, #2]
 8010242:	461a      	mov	r2, r3
 8010244:	68fb      	ldr	r3, [r7, #12]
 8010246:	4293      	cmp	r3, r2
 8010248:	dbe7      	blt.n	801021a <memp_init_pool+0x22>
#endif /* !MEMP_MEM_MALLOC */

#if MEMP_STATS && (defined(LWIP_DEBUG) || LWIP_STATS_DISPLAY)
  desc->stats->name  = desc->desc;
#endif /* MEMP_STATS && (defined(LWIP_DEBUG) || LWIP_STATS_DISPLAY) */
}
 801024a:	bf00      	nop
 801024c:	bf00      	nop
 801024e:	3714      	adds	r7, #20
 8010250:	46bd      	mov	sp, r7
 8010252:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010256:	4770      	bx	lr

08010258 <memp_init>:
 *
 * Carves out memp_memory into linked lists for each pool-type.
 */
void
memp_init(void)
{
 8010258:	b580      	push	{r7, lr}
 801025a:	b082      	sub	sp, #8
 801025c:	af00      	add	r7, sp, #0
  u16_t i;

  /* for every pool: */
  for (i = 0; i < LWIP_ARRAYSIZE(memp_pools); i++) {
 801025e:	2300      	movs	r3, #0
 8010260:	80fb      	strh	r3, [r7, #6]
 8010262:	e009      	b.n	8010278 <memp_init+0x20>
    memp_init_pool(memp_pools[i]);
 8010264:	88fb      	ldrh	r3, [r7, #6]
 8010266:	4a08      	ldr	r2, [pc, #32]	; (8010288 <memp_init+0x30>)
 8010268:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 801026c:	4618      	mov	r0, r3
 801026e:	f7ff ffc3 	bl	80101f8 <memp_init_pool>
  for (i = 0; i < LWIP_ARRAYSIZE(memp_pools); i++) {
 8010272:	88fb      	ldrh	r3, [r7, #6]
 8010274:	3301      	adds	r3, #1
 8010276:	80fb      	strh	r3, [r7, #6]
 8010278:	88fb      	ldrh	r3, [r7, #6]
 801027a:	2b08      	cmp	r3, #8
 801027c:	d9f2      	bls.n	8010264 <memp_init+0xc>

#if MEMP_OVERFLOW_CHECK >= 2
  /* check everything a first time to see if it worked */
  memp_overflow_check_all();
#endif /* MEMP_OVERFLOW_CHECK >= 2 */
}
 801027e:	bf00      	nop
 8010280:	bf00      	nop
 8010282:	3708      	adds	r7, #8
 8010284:	46bd      	mov	sp, r7
 8010286:	bd80      	pop	{r7, pc}
 8010288:	0801f468 	.word	0x0801f468

0801028c <do_memp_malloc_pool>:
#if !MEMP_OVERFLOW_CHECK
do_memp_malloc_pool(const struct memp_desc *desc)
#else
do_memp_malloc_pool_fn(const struct memp_desc *desc, const char *file, const int line)
#endif
{
 801028c:	b580      	push	{r7, lr}
 801028e:	b084      	sub	sp, #16
 8010290:	af00      	add	r7, sp, #0
 8010292:	6078      	str	r0, [r7, #4]
  memp = (struct memp *)mem_malloc(MEMP_SIZE + MEMP_ALIGN_SIZE(desc->size));
  SYS_ARCH_PROTECT(old_level);
#else /* MEMP_MEM_MALLOC */
  SYS_ARCH_PROTECT(old_level);

  memp = *desc->tab;
 8010294:	687b      	ldr	r3, [r7, #4]
 8010296:	689b      	ldr	r3, [r3, #8]
 8010298:	681b      	ldr	r3, [r3, #0]
 801029a:	60fb      	str	r3, [r7, #12]
#endif /* MEMP_MEM_MALLOC */

  if (memp != NULL) {
 801029c:	68fb      	ldr	r3, [r7, #12]
 801029e:	2b00      	cmp	r3, #0
 80102a0:	d012      	beq.n	80102c8 <do_memp_malloc_pool+0x3c>
#if !MEMP_MEM_MALLOC
#if MEMP_OVERFLOW_CHECK == 1
    memp_overflow_check_element(memp, desc);
#endif /* MEMP_OVERFLOW_CHECK */

    *desc->tab = memp->next;
 80102a2:	687b      	ldr	r3, [r7, #4]
 80102a4:	689b      	ldr	r3, [r3, #8]
 80102a6:	68fa      	ldr	r2, [r7, #12]
 80102a8:	6812      	ldr	r2, [r2, #0]
 80102aa:	601a      	str	r2, [r3, #0]
    memp->line = line;
#if MEMP_MEM_MALLOC
    memp_overflow_init_element(memp, desc);
#endif /* MEMP_MEM_MALLOC */
#endif /* MEMP_OVERFLOW_CHECK */
    LWIP_ASSERT("memp_malloc: memp properly aligned",
 80102ac:	68fb      	ldr	r3, [r7, #12]
 80102ae:	f003 0303 	and.w	r3, r3, #3
 80102b2:	2b00      	cmp	r3, #0
 80102b4:	d006      	beq.n	80102c4 <do_memp_malloc_pool+0x38>
 80102b6:	4b07      	ldr	r3, [pc, #28]	; (80102d4 <do_memp_malloc_pool+0x48>)
 80102b8:	f44f 728c 	mov.w	r2, #280	; 0x118
 80102bc:	4906      	ldr	r1, [pc, #24]	; (80102d8 <do_memp_malloc_pool+0x4c>)
 80102be:	4807      	ldr	r0, [pc, #28]	; (80102dc <do_memp_malloc_pool+0x50>)
 80102c0:	f009 fdce 	bl	8019e60 <iprintf>
      desc->stats->max = desc->stats->used;
    }
#endif
    SYS_ARCH_UNPROTECT(old_level);
    /* cast through u8_t* to get rid of alignment warnings */
    return ((u8_t *)memp + MEMP_SIZE);
 80102c4:	68fb      	ldr	r3, [r7, #12]
 80102c6:	e000      	b.n	80102ca <do_memp_malloc_pool+0x3e>
#endif
    SYS_ARCH_UNPROTECT(old_level);
    LWIP_DEBUGF(MEMP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("memp_malloc: out of memory in pool %s\n", desc->desc));
  }

  return NULL;
 80102c8:	2300      	movs	r3, #0
}
 80102ca:	4618      	mov	r0, r3
 80102cc:	3710      	adds	r7, #16
 80102ce:	46bd      	mov	sp, r7
 80102d0:	bd80      	pop	{r7, pc}
 80102d2:	bf00      	nop
 80102d4:	0801cc68 	.word	0x0801cc68
 80102d8:	0801cc98 	.word	0x0801cc98
 80102dc:	0801ccbc 	.word	0x0801ccbc

080102e0 <memp_malloc_pool>:
#if !MEMP_OVERFLOW_CHECK
memp_malloc_pool(const struct memp_desc *desc)
#else
memp_malloc_pool_fn(const struct memp_desc *desc, const char *file, const int line)
#endif
{
 80102e0:	b580      	push	{r7, lr}
 80102e2:	b082      	sub	sp, #8
 80102e4:	af00      	add	r7, sp, #0
 80102e6:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("invalid pool desc", desc != NULL);
 80102e8:	687b      	ldr	r3, [r7, #4]
 80102ea:	2b00      	cmp	r3, #0
 80102ec:	d106      	bne.n	80102fc <memp_malloc_pool+0x1c>
 80102ee:	4b0a      	ldr	r3, [pc, #40]	; (8010318 <memp_malloc_pool+0x38>)
 80102f0:	f44f 729e 	mov.w	r2, #316	; 0x13c
 80102f4:	4909      	ldr	r1, [pc, #36]	; (801031c <memp_malloc_pool+0x3c>)
 80102f6:	480a      	ldr	r0, [pc, #40]	; (8010320 <memp_malloc_pool+0x40>)
 80102f8:	f009 fdb2 	bl	8019e60 <iprintf>
  if (desc == NULL) {
 80102fc:	687b      	ldr	r3, [r7, #4]
 80102fe:	2b00      	cmp	r3, #0
 8010300:	d101      	bne.n	8010306 <memp_malloc_pool+0x26>
    return NULL;
 8010302:	2300      	movs	r3, #0
 8010304:	e003      	b.n	801030e <memp_malloc_pool+0x2e>
  }

#if !MEMP_OVERFLOW_CHECK
  return do_memp_malloc_pool(desc);
 8010306:	6878      	ldr	r0, [r7, #4]
 8010308:	f7ff ffc0 	bl	801028c <do_memp_malloc_pool>
 801030c:	4603      	mov	r3, r0
#else
  return do_memp_malloc_pool_fn(desc, file, line);
#endif
}
 801030e:	4618      	mov	r0, r3
 8010310:	3708      	adds	r7, #8
 8010312:	46bd      	mov	sp, r7
 8010314:	bd80      	pop	{r7, pc}
 8010316:	bf00      	nop
 8010318:	0801cc68 	.word	0x0801cc68
 801031c:	0801cce4 	.word	0x0801cce4
 8010320:	0801ccbc 	.word	0x0801ccbc

08010324 <memp_malloc>:
#if !MEMP_OVERFLOW_CHECK
memp_malloc(memp_t type)
#else
memp_malloc_fn(memp_t type, const char *file, const int line)
#endif
{
 8010324:	b580      	push	{r7, lr}
 8010326:	b084      	sub	sp, #16
 8010328:	af00      	add	r7, sp, #0
 801032a:	4603      	mov	r3, r0
 801032c:	71fb      	strb	r3, [r7, #7]
  void *memp;
  LWIP_ERROR("memp_malloc: type < MEMP_MAX", (type < MEMP_MAX), return NULL;);
 801032e:	79fb      	ldrb	r3, [r7, #7]
 8010330:	2b08      	cmp	r3, #8
 8010332:	d908      	bls.n	8010346 <memp_malloc+0x22>
 8010334:	4b0a      	ldr	r3, [pc, #40]	; (8010360 <memp_malloc+0x3c>)
 8010336:	f240 1257 	movw	r2, #343	; 0x157
 801033a:	490a      	ldr	r1, [pc, #40]	; (8010364 <memp_malloc+0x40>)
 801033c:	480a      	ldr	r0, [pc, #40]	; (8010368 <memp_malloc+0x44>)
 801033e:	f009 fd8f 	bl	8019e60 <iprintf>
 8010342:	2300      	movs	r3, #0
 8010344:	e008      	b.n	8010358 <memp_malloc+0x34>
#if MEMP_OVERFLOW_CHECK >= 2
  memp_overflow_check_all();
#endif /* MEMP_OVERFLOW_CHECK >= 2 */

#if !MEMP_OVERFLOW_CHECK
  memp = do_memp_malloc_pool(memp_pools[type]);
 8010346:	79fb      	ldrb	r3, [r7, #7]
 8010348:	4a08      	ldr	r2, [pc, #32]	; (801036c <memp_malloc+0x48>)
 801034a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 801034e:	4618      	mov	r0, r3
 8010350:	f7ff ff9c 	bl	801028c <do_memp_malloc_pool>
 8010354:	60f8      	str	r0, [r7, #12]
#else
  memp = do_memp_malloc_pool_fn(memp_pools[type], file, line);
#endif

  return memp;
 8010356:	68fb      	ldr	r3, [r7, #12]
}
 8010358:	4618      	mov	r0, r3
 801035a:	3710      	adds	r7, #16
 801035c:	46bd      	mov	sp, r7
 801035e:	bd80      	pop	{r7, pc}
 8010360:	0801cc68 	.word	0x0801cc68
 8010364:	0801ccf8 	.word	0x0801ccf8
 8010368:	0801ccbc 	.word	0x0801ccbc
 801036c:	0801f468 	.word	0x0801f468

08010370 <do_memp_free_pool>:

static void
do_memp_free_pool(const struct memp_desc *desc, void *mem)
{
 8010370:	b580      	push	{r7, lr}
 8010372:	b084      	sub	sp, #16
 8010374:	af00      	add	r7, sp, #0
 8010376:	6078      	str	r0, [r7, #4]
 8010378:	6039      	str	r1, [r7, #0]
  struct memp *memp;
  SYS_ARCH_DECL_PROTECT(old_level);

  LWIP_ASSERT("memp_free: mem properly aligned",
 801037a:	683b      	ldr	r3, [r7, #0]
 801037c:	f003 0303 	and.w	r3, r3, #3
 8010380:	2b00      	cmp	r3, #0
 8010382:	d006      	beq.n	8010392 <do_memp_free_pool+0x22>
 8010384:	4b0a      	ldr	r3, [pc, #40]	; (80103b0 <do_memp_free_pool+0x40>)
 8010386:	f44f 72b6 	mov.w	r2, #364	; 0x16c
 801038a:	490a      	ldr	r1, [pc, #40]	; (80103b4 <do_memp_free_pool+0x44>)
 801038c:	480a      	ldr	r0, [pc, #40]	; (80103b8 <do_memp_free_pool+0x48>)
 801038e:	f009 fd67 	bl	8019e60 <iprintf>
              ((mem_ptr_t)mem % MEM_ALIGNMENT) == 0);

  /* cast through void* to get rid of alignment warnings */
  memp = (struct memp *)(void *)((u8_t *)mem - MEMP_SIZE);
 8010392:	683b      	ldr	r3, [r7, #0]
 8010394:	60fb      	str	r3, [r7, #12]
#if MEMP_MEM_MALLOC
  LWIP_UNUSED_ARG(desc);
  SYS_ARCH_UNPROTECT(old_level);
  mem_free(memp);
#else /* MEMP_MEM_MALLOC */
  memp->next = *desc->tab;
 8010396:	687b      	ldr	r3, [r7, #4]
 8010398:	689b      	ldr	r3, [r3, #8]
 801039a:	681a      	ldr	r2, [r3, #0]
 801039c:	68fb      	ldr	r3, [r7, #12]
 801039e:	601a      	str	r2, [r3, #0]
  *desc->tab = memp;
 80103a0:	687b      	ldr	r3, [r7, #4]
 80103a2:	689b      	ldr	r3, [r3, #8]
 80103a4:	68fa      	ldr	r2, [r7, #12]
 80103a6:	601a      	str	r2, [r3, #0]
  LWIP_ASSERT("memp sanity", memp_sanity(desc));
#endif /* MEMP_SANITY_CHECK */

  SYS_ARCH_UNPROTECT(old_level);
#endif /* !MEMP_MEM_MALLOC */
}
 80103a8:	bf00      	nop
 80103aa:	3710      	adds	r7, #16
 80103ac:	46bd      	mov	sp, r7
 80103ae:	bd80      	pop	{r7, pc}
 80103b0:	0801cc68 	.word	0x0801cc68
 80103b4:	0801cd18 	.word	0x0801cd18
 80103b8:	0801ccbc 	.word	0x0801ccbc

080103bc <memp_free_pool>:
 * @param desc the pool where to put mem
 * @param mem the memp element to free
 */
void
memp_free_pool(const struct memp_desc *desc, void *mem)
{
 80103bc:	b580      	push	{r7, lr}
 80103be:	b082      	sub	sp, #8
 80103c0:	af00      	add	r7, sp, #0
 80103c2:	6078      	str	r0, [r7, #4]
 80103c4:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT("invalid pool desc", desc != NULL);
 80103c6:	687b      	ldr	r3, [r7, #4]
 80103c8:	2b00      	cmp	r3, #0
 80103ca:	d106      	bne.n	80103da <memp_free_pool+0x1e>
 80103cc:	4b0a      	ldr	r3, [pc, #40]	; (80103f8 <memp_free_pool+0x3c>)
 80103ce:	f240 1295 	movw	r2, #405	; 0x195
 80103d2:	490a      	ldr	r1, [pc, #40]	; (80103fc <memp_free_pool+0x40>)
 80103d4:	480a      	ldr	r0, [pc, #40]	; (8010400 <memp_free_pool+0x44>)
 80103d6:	f009 fd43 	bl	8019e60 <iprintf>
  if ((desc == NULL) || (mem == NULL)) {
 80103da:	687b      	ldr	r3, [r7, #4]
 80103dc:	2b00      	cmp	r3, #0
 80103de:	d007      	beq.n	80103f0 <memp_free_pool+0x34>
 80103e0:	683b      	ldr	r3, [r7, #0]
 80103e2:	2b00      	cmp	r3, #0
 80103e4:	d004      	beq.n	80103f0 <memp_free_pool+0x34>
    return;
  }

  do_memp_free_pool(desc, mem);
 80103e6:	6839      	ldr	r1, [r7, #0]
 80103e8:	6878      	ldr	r0, [r7, #4]
 80103ea:	f7ff ffc1 	bl	8010370 <do_memp_free_pool>
 80103ee:	e000      	b.n	80103f2 <memp_free_pool+0x36>
    return;
 80103f0:	bf00      	nop
}
 80103f2:	3708      	adds	r7, #8
 80103f4:	46bd      	mov	sp, r7
 80103f6:	bd80      	pop	{r7, pc}
 80103f8:	0801cc68 	.word	0x0801cc68
 80103fc:	0801cce4 	.word	0x0801cce4
 8010400:	0801ccbc 	.word	0x0801ccbc

08010404 <memp_free>:
 * @param type the pool where to put mem
 * @param mem the memp element to free
 */
void
memp_free(memp_t type, void *mem)
{
 8010404:	b580      	push	{r7, lr}
 8010406:	b082      	sub	sp, #8
 8010408:	af00      	add	r7, sp, #0
 801040a:	4603      	mov	r3, r0
 801040c:	6039      	str	r1, [r7, #0]
 801040e:	71fb      	strb	r3, [r7, #7]
#ifdef LWIP_HOOK_MEMP_AVAILABLE
  struct memp *old_first;
#endif

  LWIP_ERROR("memp_free: type < MEMP_MAX", (type < MEMP_MAX), return;);
 8010410:	79fb      	ldrb	r3, [r7, #7]
 8010412:	2b08      	cmp	r3, #8
 8010414:	d907      	bls.n	8010426 <memp_free+0x22>
 8010416:	4b0c      	ldr	r3, [pc, #48]	; (8010448 <memp_free+0x44>)
 8010418:	f44f 72d5 	mov.w	r2, #426	; 0x1aa
 801041c:	490b      	ldr	r1, [pc, #44]	; (801044c <memp_free+0x48>)
 801041e:	480c      	ldr	r0, [pc, #48]	; (8010450 <memp_free+0x4c>)
 8010420:	f009 fd1e 	bl	8019e60 <iprintf>
 8010424:	e00c      	b.n	8010440 <memp_free+0x3c>

  if (mem == NULL) {
 8010426:	683b      	ldr	r3, [r7, #0]
 8010428:	2b00      	cmp	r3, #0
 801042a:	d008      	beq.n	801043e <memp_free+0x3a>

#ifdef LWIP_HOOK_MEMP_AVAILABLE
  old_first = *memp_pools[type]->tab;
#endif

  do_memp_free_pool(memp_pools[type], mem);
 801042c:	79fb      	ldrb	r3, [r7, #7]
 801042e:	4a09      	ldr	r2, [pc, #36]	; (8010454 <memp_free+0x50>)
 8010430:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8010434:	6839      	ldr	r1, [r7, #0]
 8010436:	4618      	mov	r0, r3
 8010438:	f7ff ff9a 	bl	8010370 <do_memp_free_pool>
 801043c:	e000      	b.n	8010440 <memp_free+0x3c>
    return;
 801043e:	bf00      	nop
#ifdef LWIP_HOOK_MEMP_AVAILABLE
  if (old_first == NULL) {
    LWIP_HOOK_MEMP_AVAILABLE(type);
  }
#endif
}
 8010440:	3708      	adds	r7, #8
 8010442:	46bd      	mov	sp, r7
 8010444:	bd80      	pop	{r7, pc}
 8010446:	bf00      	nop
 8010448:	0801cc68 	.word	0x0801cc68
 801044c:	0801cd38 	.word	0x0801cd38
 8010450:	0801ccbc 	.word	0x0801ccbc
 8010454:	0801f468 	.word	0x0801f468

08010458 <netif_init>:
}
#endif /* LWIP_HAVE_LOOPIF */

void
netif_init(void)
{
 8010458:	b480      	push	{r7}
 801045a:	af00      	add	r7, sp, #0

  netif_set_link_up(&loop_netif);
  netif_set_up(&loop_netif);

#endif /* LWIP_HAVE_LOOPIF */
}
 801045c:	bf00      	nop
 801045e:	46bd      	mov	sp, r7
 8010460:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010464:	4770      	bx	lr
	...

08010468 <netif_add>:
netif_add(struct netif *netif,
#if LWIP_IPV4
          const ip4_addr_t *ipaddr, const ip4_addr_t *netmask, const ip4_addr_t *gw,
#endif /* LWIP_IPV4 */
          void *state, netif_init_fn init, netif_input_fn input)
{
 8010468:	b580      	push	{r7, lr}
 801046a:	b086      	sub	sp, #24
 801046c:	af00      	add	r7, sp, #0
 801046e:	60f8      	str	r0, [r7, #12]
 8010470:	60b9      	str	r1, [r7, #8]
 8010472:	607a      	str	r2, [r7, #4]
 8010474:	603b      	str	r3, [r7, #0]
    LWIP_ASSERT("single netif already set", 0);
    return NULL;
  }
#endif

  LWIP_ERROR("netif_add: invalid netif", netif != NULL, return NULL);
 8010476:	68fb      	ldr	r3, [r7, #12]
 8010478:	2b00      	cmp	r3, #0
 801047a:	d108      	bne.n	801048e <netif_add+0x26>
 801047c:	4b57      	ldr	r3, [pc, #348]	; (80105dc <netif_add+0x174>)
 801047e:	f240 1227 	movw	r2, #295	; 0x127
 8010482:	4957      	ldr	r1, [pc, #348]	; (80105e0 <netif_add+0x178>)
 8010484:	4857      	ldr	r0, [pc, #348]	; (80105e4 <netif_add+0x17c>)
 8010486:	f009 fceb 	bl	8019e60 <iprintf>
 801048a:	2300      	movs	r3, #0
 801048c:	e0a2      	b.n	80105d4 <netif_add+0x16c>
  LWIP_ERROR("netif_add: No init function given", init != NULL, return NULL);
 801048e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010490:	2b00      	cmp	r3, #0
 8010492:	d108      	bne.n	80104a6 <netif_add+0x3e>
 8010494:	4b51      	ldr	r3, [pc, #324]	; (80105dc <netif_add+0x174>)
 8010496:	f44f 7294 	mov.w	r2, #296	; 0x128
 801049a:	4953      	ldr	r1, [pc, #332]	; (80105e8 <netif_add+0x180>)
 801049c:	4851      	ldr	r0, [pc, #324]	; (80105e4 <netif_add+0x17c>)
 801049e:	f009 fcdf 	bl	8019e60 <iprintf>
 80104a2:	2300      	movs	r3, #0
 80104a4:	e096      	b.n	80105d4 <netif_add+0x16c>

#if LWIP_IPV4
  if (ipaddr == NULL) {
 80104a6:	68bb      	ldr	r3, [r7, #8]
 80104a8:	2b00      	cmp	r3, #0
 80104aa:	d101      	bne.n	80104b0 <netif_add+0x48>
    ipaddr = ip_2_ip4(IP4_ADDR_ANY);
 80104ac:	4b4f      	ldr	r3, [pc, #316]	; (80105ec <netif_add+0x184>)
 80104ae:	60bb      	str	r3, [r7, #8]
  }
  if (netmask == NULL) {
 80104b0:	687b      	ldr	r3, [r7, #4]
 80104b2:	2b00      	cmp	r3, #0
 80104b4:	d101      	bne.n	80104ba <netif_add+0x52>
    netmask = ip_2_ip4(IP4_ADDR_ANY);
 80104b6:	4b4d      	ldr	r3, [pc, #308]	; (80105ec <netif_add+0x184>)
 80104b8:	607b      	str	r3, [r7, #4]
  }
  if (gw == NULL) {
 80104ba:	683b      	ldr	r3, [r7, #0]
 80104bc:	2b00      	cmp	r3, #0
 80104be:	d101      	bne.n	80104c4 <netif_add+0x5c>
    gw = ip_2_ip4(IP4_ADDR_ANY);
 80104c0:	4b4a      	ldr	r3, [pc, #296]	; (80105ec <netif_add+0x184>)
 80104c2:	603b      	str	r3, [r7, #0]
  }

  /* reset new interface configuration state */
  ip_addr_set_zero_ip4(&netif->ip_addr);
 80104c4:	68fb      	ldr	r3, [r7, #12]
 80104c6:	2200      	movs	r2, #0
 80104c8:	605a      	str	r2, [r3, #4]
  ip_addr_set_zero_ip4(&netif->netmask);
 80104ca:	68fb      	ldr	r3, [r7, #12]
 80104cc:	2200      	movs	r2, #0
 80104ce:	609a      	str	r2, [r3, #8]
  ip_addr_set_zero_ip4(&netif->gw);
 80104d0:	68fb      	ldr	r3, [r7, #12]
 80104d2:	2200      	movs	r2, #0
 80104d4:	60da      	str	r2, [r3, #12]
  netif->output = netif_null_output_ip4;
 80104d6:	68fb      	ldr	r3, [r7, #12]
 80104d8:	4a45      	ldr	r2, [pc, #276]	; (80105f0 <netif_add+0x188>)
 80104da:	615a      	str	r2, [r3, #20]
#endif /* LWIP_IPV6_ADDRESS_LIFETIMES */
  }
  netif->output_ip6 = netif_null_output_ip6;
#endif /* LWIP_IPV6 */
  NETIF_SET_CHECKSUM_CTRL(netif, NETIF_CHECKSUM_ENABLE_ALL);
  netif->mtu = 0;
 80104dc:	68fb      	ldr	r3, [r7, #12]
 80104de:	2200      	movs	r2, #0
 80104e0:	849a      	strh	r2, [r3, #36]	; 0x24
  netif->flags = 0;
 80104e2:	68fb      	ldr	r3, [r7, #12]
 80104e4:	2200      	movs	r2, #0
 80104e6:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
#endif /* LWIP_IPV6 */
#if LWIP_NETIF_STATUS_CALLBACK
  netif->status_callback = NULL;
#endif /* LWIP_NETIF_STATUS_CALLBACK */
#if LWIP_NETIF_LINK_CALLBACK
  netif->link_callback = NULL;
 80104ea:	68fb      	ldr	r3, [r7, #12]
 80104ec:	2200      	movs	r2, #0
 80104ee:	61da      	str	r2, [r3, #28]
  netif->loop_first = NULL;
  netif->loop_last = NULL;
#endif /* ENABLE_LOOPBACK */

  /* remember netif specific state information data */
  netif->state = state;
 80104f0:	68fb      	ldr	r3, [r7, #12]
 80104f2:	6a3a      	ldr	r2, [r7, #32]
 80104f4:	621a      	str	r2, [r3, #32]
  netif->num = netif_num;
 80104f6:	4b3f      	ldr	r3, [pc, #252]	; (80105f4 <netif_add+0x18c>)
 80104f8:	781a      	ldrb	r2, [r3, #0]
 80104fa:	68fb      	ldr	r3, [r7, #12]
 80104fc:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  netif->input = input;
 8010500:	68fb      	ldr	r3, [r7, #12]
 8010502:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8010504:	611a      	str	r2, [r3, #16]
#if ENABLE_LOOPBACK && LWIP_LOOPBACK_MAX_PBUFS
  netif->loop_cnt_current = 0;
#endif /* ENABLE_LOOPBACK && LWIP_LOOPBACK_MAX_PBUFS */

#if LWIP_IPV4
  netif_set_addr(netif, ipaddr, netmask, gw);
 8010506:	683b      	ldr	r3, [r7, #0]
 8010508:	687a      	ldr	r2, [r7, #4]
 801050a:	68b9      	ldr	r1, [r7, #8]
 801050c:	68f8      	ldr	r0, [r7, #12]
 801050e:	f000 f913 	bl	8010738 <netif_set_addr>
#endif /* LWIP_IPV4 */

  /* call user specified initialization function for netif */
  if (init(netif) != ERR_OK) {
 8010512:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010514:	68f8      	ldr	r0, [r7, #12]
 8010516:	4798      	blx	r3
 8010518:	4603      	mov	r3, r0
 801051a:	2b00      	cmp	r3, #0
 801051c:	d001      	beq.n	8010522 <netif_add+0xba>
    return NULL;
 801051e:	2300      	movs	r3, #0
 8010520:	e058      	b.n	80105d4 <netif_add+0x16c>
     */
  {
    struct netif *netif2;
    int num_netifs;
    do {
      if (netif->num == 255) {
 8010522:	68fb      	ldr	r3, [r7, #12]
 8010524:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8010528:	2bff      	cmp	r3, #255	; 0xff
 801052a:	d103      	bne.n	8010534 <netif_add+0xcc>
        netif->num = 0;
 801052c:	68fb      	ldr	r3, [r7, #12]
 801052e:	2200      	movs	r2, #0
 8010530:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
      }
      num_netifs = 0;
 8010534:	2300      	movs	r3, #0
 8010536:	613b      	str	r3, [r7, #16]
      for (netif2 = netif_list; netif2 != NULL; netif2 = netif2->next) {
 8010538:	4b2f      	ldr	r3, [pc, #188]	; (80105f8 <netif_add+0x190>)
 801053a:	681b      	ldr	r3, [r3, #0]
 801053c:	617b      	str	r3, [r7, #20]
 801053e:	e02b      	b.n	8010598 <netif_add+0x130>
        LWIP_ASSERT("netif already added", netif2 != netif);
 8010540:	697a      	ldr	r2, [r7, #20]
 8010542:	68fb      	ldr	r3, [r7, #12]
 8010544:	429a      	cmp	r2, r3
 8010546:	d106      	bne.n	8010556 <netif_add+0xee>
 8010548:	4b24      	ldr	r3, [pc, #144]	; (80105dc <netif_add+0x174>)
 801054a:	f240 128b 	movw	r2, #395	; 0x18b
 801054e:	492b      	ldr	r1, [pc, #172]	; (80105fc <netif_add+0x194>)
 8010550:	4824      	ldr	r0, [pc, #144]	; (80105e4 <netif_add+0x17c>)
 8010552:	f009 fc85 	bl	8019e60 <iprintf>
        num_netifs++;
 8010556:	693b      	ldr	r3, [r7, #16]
 8010558:	3301      	adds	r3, #1
 801055a:	613b      	str	r3, [r7, #16]
        LWIP_ASSERT("too many netifs, max. supported number is 255", num_netifs <= 255);
 801055c:	693b      	ldr	r3, [r7, #16]
 801055e:	2bff      	cmp	r3, #255	; 0xff
 8010560:	dd06      	ble.n	8010570 <netif_add+0x108>
 8010562:	4b1e      	ldr	r3, [pc, #120]	; (80105dc <netif_add+0x174>)
 8010564:	f240 128d 	movw	r2, #397	; 0x18d
 8010568:	4925      	ldr	r1, [pc, #148]	; (8010600 <netif_add+0x198>)
 801056a:	481e      	ldr	r0, [pc, #120]	; (80105e4 <netif_add+0x17c>)
 801056c:	f009 fc78 	bl	8019e60 <iprintf>
        if (netif2->num == netif->num) {
 8010570:	697b      	ldr	r3, [r7, #20]
 8010572:	f893 2030 	ldrb.w	r2, [r3, #48]	; 0x30
 8010576:	68fb      	ldr	r3, [r7, #12]
 8010578:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 801057c:	429a      	cmp	r2, r3
 801057e:	d108      	bne.n	8010592 <netif_add+0x12a>
          netif->num++;
 8010580:	68fb      	ldr	r3, [r7, #12]
 8010582:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8010586:	3301      	adds	r3, #1
 8010588:	b2da      	uxtb	r2, r3
 801058a:	68fb      	ldr	r3, [r7, #12]
 801058c:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
          break;
 8010590:	e005      	b.n	801059e <netif_add+0x136>
      for (netif2 = netif_list; netif2 != NULL; netif2 = netif2->next) {
 8010592:	697b      	ldr	r3, [r7, #20]
 8010594:	681b      	ldr	r3, [r3, #0]
 8010596:	617b      	str	r3, [r7, #20]
 8010598:	697b      	ldr	r3, [r7, #20]
 801059a:	2b00      	cmp	r3, #0
 801059c:	d1d0      	bne.n	8010540 <netif_add+0xd8>
        }
      }
    } while (netif2 != NULL);
 801059e:	697b      	ldr	r3, [r7, #20]
 80105a0:	2b00      	cmp	r3, #0
 80105a2:	d1be      	bne.n	8010522 <netif_add+0xba>
  }
  if (netif->num == 254) {
 80105a4:	68fb      	ldr	r3, [r7, #12]
 80105a6:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 80105aa:	2bfe      	cmp	r3, #254	; 0xfe
 80105ac:	d103      	bne.n	80105b6 <netif_add+0x14e>
    netif_num = 0;
 80105ae:	4b11      	ldr	r3, [pc, #68]	; (80105f4 <netif_add+0x18c>)
 80105b0:	2200      	movs	r2, #0
 80105b2:	701a      	strb	r2, [r3, #0]
 80105b4:	e006      	b.n	80105c4 <netif_add+0x15c>
  } else {
    netif_num = (u8_t)(netif->num + 1);
 80105b6:	68fb      	ldr	r3, [r7, #12]
 80105b8:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 80105bc:	3301      	adds	r3, #1
 80105be:	b2da      	uxtb	r2, r3
 80105c0:	4b0c      	ldr	r3, [pc, #48]	; (80105f4 <netif_add+0x18c>)
 80105c2:	701a      	strb	r2, [r3, #0]
  }

  /* add this netif to the list */
  netif->next = netif_list;
 80105c4:	4b0c      	ldr	r3, [pc, #48]	; (80105f8 <netif_add+0x190>)
 80105c6:	681a      	ldr	r2, [r3, #0]
 80105c8:	68fb      	ldr	r3, [r7, #12]
 80105ca:	601a      	str	r2, [r3, #0]
  netif_list = netif;
 80105cc:	4a0a      	ldr	r2, [pc, #40]	; (80105f8 <netif_add+0x190>)
 80105ce:	68fb      	ldr	r3, [r7, #12]
 80105d0:	6013      	str	r3, [r2, #0]
#endif /* LWIP_IPV4 */
  LWIP_DEBUGF(NETIF_DEBUG, ("\n"));

  netif_invoke_ext_callback(netif, LWIP_NSC_NETIF_ADDED, NULL);

  return netif;
 80105d2:	68fb      	ldr	r3, [r7, #12]
}
 80105d4:	4618      	mov	r0, r3
 80105d6:	3718      	adds	r7, #24
 80105d8:	46bd      	mov	sp, r7
 80105da:	bd80      	pop	{r7, pc}
 80105dc:	0801cd54 	.word	0x0801cd54
 80105e0:	0801cde8 	.word	0x0801cde8
 80105e4:	0801cda4 	.word	0x0801cda4
 80105e8:	0801ce04 	.word	0x0801ce04
 80105ec:	0801f4cc 	.word	0x0801f4cc
 80105f0:	08010a13 	.word	0x08010a13
 80105f4:	200070d0 	.word	0x200070d0
 80105f8:	200070c8 	.word	0x200070c8
 80105fc:	0801ce28 	.word	0x0801ce28
 8010600:	0801ce3c 	.word	0x0801ce3c

08010604 <netif_do_ip_addr_changed>:

static void
netif_do_ip_addr_changed(const ip_addr_t *old_addr, const ip_addr_t *new_addr)
{
 8010604:	b580      	push	{r7, lr}
 8010606:	b082      	sub	sp, #8
 8010608:	af00      	add	r7, sp, #0
 801060a:	6078      	str	r0, [r7, #4]
 801060c:	6039      	str	r1, [r7, #0]
#if LWIP_TCP
  tcp_netif_ip_addr_changed(old_addr, new_addr);
 801060e:	6839      	ldr	r1, [r7, #0]
 8010610:	6878      	ldr	r0, [r7, #4]
 8010612:	f002 fb27 	bl	8012c64 <tcp_netif_ip_addr_changed>
#endif /* LWIP_TCP */
#if LWIP_UDP
  udp_netif_ip_addr_changed(old_addr, new_addr);
 8010616:	6839      	ldr	r1, [r7, #0]
 8010618:	6878      	ldr	r0, [r7, #4]
 801061a:	f006 fbc9 	bl	8016db0 <udp_netif_ip_addr_changed>
#endif /* LWIP_UDP */
#if LWIP_RAW
  raw_netif_ip_addr_changed(old_addr, new_addr);
#endif /* LWIP_RAW */
}
 801061e:	bf00      	nop
 8010620:	3708      	adds	r7, #8
 8010622:	46bd      	mov	sp, r7
 8010624:	bd80      	pop	{r7, pc}
	...

08010628 <netif_do_set_ipaddr>:

#if LWIP_IPV4
static int
netif_do_set_ipaddr(struct netif *netif, const ip4_addr_t *ipaddr, ip_addr_t *old_addr)
{
 8010628:	b580      	push	{r7, lr}
 801062a:	b086      	sub	sp, #24
 801062c:	af00      	add	r7, sp, #0
 801062e:	60f8      	str	r0, [r7, #12]
 8010630:	60b9      	str	r1, [r7, #8]
 8010632:	607a      	str	r2, [r7, #4]
  LWIP_ASSERT("invalid pointer", ipaddr != NULL);
 8010634:	68bb      	ldr	r3, [r7, #8]
 8010636:	2b00      	cmp	r3, #0
 8010638:	d106      	bne.n	8010648 <netif_do_set_ipaddr+0x20>
 801063a:	4b1d      	ldr	r3, [pc, #116]	; (80106b0 <netif_do_set_ipaddr+0x88>)
 801063c:	f240 12cb 	movw	r2, #459	; 0x1cb
 8010640:	491c      	ldr	r1, [pc, #112]	; (80106b4 <netif_do_set_ipaddr+0x8c>)
 8010642:	481d      	ldr	r0, [pc, #116]	; (80106b8 <netif_do_set_ipaddr+0x90>)
 8010644:	f009 fc0c 	bl	8019e60 <iprintf>
  LWIP_ASSERT("invalid pointer", old_addr != NULL);
 8010648:	687b      	ldr	r3, [r7, #4]
 801064a:	2b00      	cmp	r3, #0
 801064c:	d106      	bne.n	801065c <netif_do_set_ipaddr+0x34>
 801064e:	4b18      	ldr	r3, [pc, #96]	; (80106b0 <netif_do_set_ipaddr+0x88>)
 8010650:	f44f 72e6 	mov.w	r2, #460	; 0x1cc
 8010654:	4917      	ldr	r1, [pc, #92]	; (80106b4 <netif_do_set_ipaddr+0x8c>)
 8010656:	4818      	ldr	r0, [pc, #96]	; (80106b8 <netif_do_set_ipaddr+0x90>)
 8010658:	f009 fc02 	bl	8019e60 <iprintf>

  /* address is actually being changed? */
  if (ip4_addr_cmp(ipaddr, netif_ip4_addr(netif)) == 0) {
 801065c:	68bb      	ldr	r3, [r7, #8]
 801065e:	681a      	ldr	r2, [r3, #0]
 8010660:	68fb      	ldr	r3, [r7, #12]
 8010662:	3304      	adds	r3, #4
 8010664:	681b      	ldr	r3, [r3, #0]
 8010666:	429a      	cmp	r2, r3
 8010668:	d01c      	beq.n	80106a4 <netif_do_set_ipaddr+0x7c>
    ip_addr_t new_addr;
    *ip_2_ip4(&new_addr) = *ipaddr;
 801066a:	68bb      	ldr	r3, [r7, #8]
 801066c:	681b      	ldr	r3, [r3, #0]
 801066e:	617b      	str	r3, [r7, #20]
    IP_SET_TYPE_VAL(new_addr, IPADDR_TYPE_V4);

    ip_addr_copy(*old_addr, *netif_ip_addr4(netif));
 8010670:	68fb      	ldr	r3, [r7, #12]
 8010672:	3304      	adds	r3, #4
 8010674:	681a      	ldr	r2, [r3, #0]
 8010676:	687b      	ldr	r3, [r7, #4]
 8010678:	601a      	str	r2, [r3, #0]

    LWIP_DEBUGF(NETIF_DEBUG | LWIP_DBG_STATE, ("netif_set_ipaddr: netif address being changed\n"));
    netif_do_ip_addr_changed(old_addr, &new_addr);
 801067a:	f107 0314 	add.w	r3, r7, #20
 801067e:	4619      	mov	r1, r3
 8010680:	6878      	ldr	r0, [r7, #4]
 8010682:	f7ff ffbf 	bl	8010604 <netif_do_ip_addr_changed>

    mib2_remove_ip4(netif);
    mib2_remove_route_ip4(0, netif);
    /* set new IP address to netif */
    ip4_addr_set(ip_2_ip4(&netif->ip_addr), ipaddr);
 8010686:	68bb      	ldr	r3, [r7, #8]
 8010688:	2b00      	cmp	r3, #0
 801068a:	d002      	beq.n	8010692 <netif_do_set_ipaddr+0x6a>
 801068c:	68bb      	ldr	r3, [r7, #8]
 801068e:	681b      	ldr	r3, [r3, #0]
 8010690:	e000      	b.n	8010694 <netif_do_set_ipaddr+0x6c>
 8010692:	2300      	movs	r3, #0
 8010694:	68fa      	ldr	r2, [r7, #12]
 8010696:	6053      	str	r3, [r2, #4]
    IP_SET_TYPE_VAL(netif->ip_addr, IPADDR_TYPE_V4);
    mib2_add_ip4(netif);
    mib2_add_route_ip4(0, netif);

    netif_issue_reports(netif, NETIF_REPORT_TYPE_IPV4);
 8010698:	2101      	movs	r1, #1
 801069a:	68f8      	ldr	r0, [r7, #12]
 801069c:	f000 f8d2 	bl	8010844 <netif_issue_reports>

    NETIF_STATUS_CALLBACK(netif);
    return 1; /* address changed */
 80106a0:	2301      	movs	r3, #1
 80106a2:	e000      	b.n	80106a6 <netif_do_set_ipaddr+0x7e>
  }
  return 0; /* address unchanged */
 80106a4:	2300      	movs	r3, #0
}
 80106a6:	4618      	mov	r0, r3
 80106a8:	3718      	adds	r7, #24
 80106aa:	46bd      	mov	sp, r7
 80106ac:	bd80      	pop	{r7, pc}
 80106ae:	bf00      	nop
 80106b0:	0801cd54 	.word	0x0801cd54
 80106b4:	0801ce6c 	.word	0x0801ce6c
 80106b8:	0801cda4 	.word	0x0801cda4

080106bc <netif_do_set_netmask>:
  }
}

static int
netif_do_set_netmask(struct netif *netif, const ip4_addr_t *netmask, ip_addr_t *old_nm)
{
 80106bc:	b480      	push	{r7}
 80106be:	b085      	sub	sp, #20
 80106c0:	af00      	add	r7, sp, #0
 80106c2:	60f8      	str	r0, [r7, #12]
 80106c4:	60b9      	str	r1, [r7, #8]
 80106c6:	607a      	str	r2, [r7, #4]
  /* address is actually being changed? */
  if (ip4_addr_cmp(netmask, netif_ip4_netmask(netif)) == 0) {
 80106c8:	68bb      	ldr	r3, [r7, #8]
 80106ca:	681a      	ldr	r2, [r3, #0]
 80106cc:	68fb      	ldr	r3, [r7, #12]
 80106ce:	3308      	adds	r3, #8
 80106d0:	681b      	ldr	r3, [r3, #0]
 80106d2:	429a      	cmp	r2, r3
 80106d4:	d00a      	beq.n	80106ec <netif_do_set_netmask+0x30>
#else
    LWIP_UNUSED_ARG(old_nm);
#endif
    mib2_remove_route_ip4(0, netif);
    /* set new netmask to netif */
    ip4_addr_set(ip_2_ip4(&netif->netmask), netmask);
 80106d6:	68bb      	ldr	r3, [r7, #8]
 80106d8:	2b00      	cmp	r3, #0
 80106da:	d002      	beq.n	80106e2 <netif_do_set_netmask+0x26>
 80106dc:	68bb      	ldr	r3, [r7, #8]
 80106de:	681b      	ldr	r3, [r3, #0]
 80106e0:	e000      	b.n	80106e4 <netif_do_set_netmask+0x28>
 80106e2:	2300      	movs	r3, #0
 80106e4:	68fa      	ldr	r2, [r7, #12]
 80106e6:	6093      	str	r3, [r2, #8]
                netif->name[0], netif->name[1],
                ip4_addr1_16(netif_ip4_netmask(netif)),
                ip4_addr2_16(netif_ip4_netmask(netif)),
                ip4_addr3_16(netif_ip4_netmask(netif)),
                ip4_addr4_16(netif_ip4_netmask(netif))));
    return 1; /* netmask changed */
 80106e8:	2301      	movs	r3, #1
 80106ea:	e000      	b.n	80106ee <netif_do_set_netmask+0x32>
  }
  return 0; /* netmask unchanged */
 80106ec:	2300      	movs	r3, #0
}
 80106ee:	4618      	mov	r0, r3
 80106f0:	3714      	adds	r7, #20
 80106f2:	46bd      	mov	sp, r7
 80106f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80106f8:	4770      	bx	lr

080106fa <netif_do_set_gw>:
  }
}

static int
netif_do_set_gw(struct netif *netif, const ip4_addr_t *gw, ip_addr_t *old_gw)
{
 80106fa:	b480      	push	{r7}
 80106fc:	b085      	sub	sp, #20
 80106fe:	af00      	add	r7, sp, #0
 8010700:	60f8      	str	r0, [r7, #12]
 8010702:	60b9      	str	r1, [r7, #8]
 8010704:	607a      	str	r2, [r7, #4]
  /* address is actually being changed? */
  if (ip4_addr_cmp(gw, netif_ip4_gw(netif)) == 0) {
 8010706:	68bb      	ldr	r3, [r7, #8]
 8010708:	681a      	ldr	r2, [r3, #0]
 801070a:	68fb      	ldr	r3, [r7, #12]
 801070c:	330c      	adds	r3, #12
 801070e:	681b      	ldr	r3, [r3, #0]
 8010710:	429a      	cmp	r2, r3
 8010712:	d00a      	beq.n	801072a <netif_do_set_gw+0x30>
    ip_addr_copy(*old_gw, *netif_ip_gw4(netif));
#else
    LWIP_UNUSED_ARG(old_gw);
#endif

    ip4_addr_set(ip_2_ip4(&netif->gw), gw);
 8010714:	68bb      	ldr	r3, [r7, #8]
 8010716:	2b00      	cmp	r3, #0
 8010718:	d002      	beq.n	8010720 <netif_do_set_gw+0x26>
 801071a:	68bb      	ldr	r3, [r7, #8]
 801071c:	681b      	ldr	r3, [r3, #0]
 801071e:	e000      	b.n	8010722 <netif_do_set_gw+0x28>
 8010720:	2300      	movs	r3, #0
 8010722:	68fa      	ldr	r2, [r7, #12]
 8010724:	60d3      	str	r3, [r2, #12]
                netif->name[0], netif->name[1],
                ip4_addr1_16(netif_ip4_gw(netif)),
                ip4_addr2_16(netif_ip4_gw(netif)),
                ip4_addr3_16(netif_ip4_gw(netif)),
                ip4_addr4_16(netif_ip4_gw(netif))));
    return 1; /* gateway changed */
 8010726:	2301      	movs	r3, #1
 8010728:	e000      	b.n	801072c <netif_do_set_gw+0x32>
  }
  return 0; /* gateway unchanged */
 801072a:	2300      	movs	r3, #0
}
 801072c:	4618      	mov	r0, r3
 801072e:	3714      	adds	r7, #20
 8010730:	46bd      	mov	sp, r7
 8010732:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010736:	4770      	bx	lr

08010738 <netif_set_addr>:
 * @param gw the new default gateway
 */
void
netif_set_addr(struct netif *netif, const ip4_addr_t *ipaddr, const ip4_addr_t *netmask,
               const ip4_addr_t *gw)
{
 8010738:	b580      	push	{r7, lr}
 801073a:	b088      	sub	sp, #32
 801073c:	af00      	add	r7, sp, #0
 801073e:	60f8      	str	r0, [r7, #12]
 8010740:	60b9      	str	r1, [r7, #8]
 8010742:	607a      	str	r2, [r7, #4]
 8010744:	603b      	str	r3, [r7, #0]
  ip_addr_t old_nm_val;
  ip_addr_t old_gw_val;
  ip_addr_t *old_nm = &old_nm_val;
  ip_addr_t *old_gw = &old_gw_val;
#else
  ip_addr_t *old_nm = NULL;
 8010746:	2300      	movs	r3, #0
 8010748:	61fb      	str	r3, [r7, #28]
  ip_addr_t *old_gw = NULL;
 801074a:	2300      	movs	r3, #0
 801074c:	61bb      	str	r3, [r7, #24]
  int remove;

  LWIP_ASSERT_CORE_LOCKED();

  /* Don't propagate NULL pointer (IPv4 ANY) to subsequent functions */
  if (ipaddr == NULL) {
 801074e:	68bb      	ldr	r3, [r7, #8]
 8010750:	2b00      	cmp	r3, #0
 8010752:	d101      	bne.n	8010758 <netif_set_addr+0x20>
    ipaddr = IP4_ADDR_ANY4;
 8010754:	4b1c      	ldr	r3, [pc, #112]	; (80107c8 <netif_set_addr+0x90>)
 8010756:	60bb      	str	r3, [r7, #8]
  }
  if (netmask == NULL) {
 8010758:	687b      	ldr	r3, [r7, #4]
 801075a:	2b00      	cmp	r3, #0
 801075c:	d101      	bne.n	8010762 <netif_set_addr+0x2a>
    netmask = IP4_ADDR_ANY4;
 801075e:	4b1a      	ldr	r3, [pc, #104]	; (80107c8 <netif_set_addr+0x90>)
 8010760:	607b      	str	r3, [r7, #4]
  }
  if (gw == NULL) {
 8010762:	683b      	ldr	r3, [r7, #0]
 8010764:	2b00      	cmp	r3, #0
 8010766:	d101      	bne.n	801076c <netif_set_addr+0x34>
    gw = IP4_ADDR_ANY4;
 8010768:	4b17      	ldr	r3, [pc, #92]	; (80107c8 <netif_set_addr+0x90>)
 801076a:	603b      	str	r3, [r7, #0]
  }

  remove = ip4_addr_isany(ipaddr);
 801076c:	68bb      	ldr	r3, [r7, #8]
 801076e:	2b00      	cmp	r3, #0
 8010770:	d003      	beq.n	801077a <netif_set_addr+0x42>
 8010772:	68bb      	ldr	r3, [r7, #8]
 8010774:	681b      	ldr	r3, [r3, #0]
 8010776:	2b00      	cmp	r3, #0
 8010778:	d101      	bne.n	801077e <netif_set_addr+0x46>
 801077a:	2301      	movs	r3, #1
 801077c:	e000      	b.n	8010780 <netif_set_addr+0x48>
 801077e:	2300      	movs	r3, #0
 8010780:	617b      	str	r3, [r7, #20]
  if (remove) {
 8010782:	697b      	ldr	r3, [r7, #20]
 8010784:	2b00      	cmp	r3, #0
 8010786:	d006      	beq.n	8010796 <netif_set_addr+0x5e>
    /* when removing an address, we have to remove it *before* changing netmask/gw
       to ensure that tcp RST segment can be sent correctly */
    if (netif_do_set_ipaddr(netif, ipaddr, &old_addr)) {
 8010788:	f107 0310 	add.w	r3, r7, #16
 801078c:	461a      	mov	r2, r3
 801078e:	68b9      	ldr	r1, [r7, #8]
 8010790:	68f8      	ldr	r0, [r7, #12]
 8010792:	f7ff ff49 	bl	8010628 <netif_do_set_ipaddr>
      change_reason |= LWIP_NSC_IPV4_ADDRESS_CHANGED;
      cb_args.ipv4_changed.old_address = &old_addr;
#endif
    }
  }
  if (netif_do_set_netmask(netif, netmask, old_nm)) {
 8010796:	69fa      	ldr	r2, [r7, #28]
 8010798:	6879      	ldr	r1, [r7, #4]
 801079a:	68f8      	ldr	r0, [r7, #12]
 801079c:	f7ff ff8e 	bl	80106bc <netif_do_set_netmask>
#if LWIP_NETIF_EXT_STATUS_CALLBACK
    change_reason |= LWIP_NSC_IPV4_NETMASK_CHANGED;
    cb_args.ipv4_changed.old_netmask = old_nm;
#endif
  }
  if (netif_do_set_gw(netif, gw, old_gw)) {
 80107a0:	69ba      	ldr	r2, [r7, #24]
 80107a2:	6839      	ldr	r1, [r7, #0]
 80107a4:	68f8      	ldr	r0, [r7, #12]
 80107a6:	f7ff ffa8 	bl	80106fa <netif_do_set_gw>
#if LWIP_NETIF_EXT_STATUS_CALLBACK
    change_reason |= LWIP_NSC_IPV4_GATEWAY_CHANGED;
    cb_args.ipv4_changed.old_gw = old_gw;
#endif
  }
  if (!remove) {
 80107aa:	697b      	ldr	r3, [r7, #20]
 80107ac:	2b00      	cmp	r3, #0
 80107ae:	d106      	bne.n	80107be <netif_set_addr+0x86>
    /* set ipaddr last to ensure netmask/gw have been set when status callback is called */
    if (netif_do_set_ipaddr(netif, ipaddr, &old_addr)) {
 80107b0:	f107 0310 	add.w	r3, r7, #16
 80107b4:	461a      	mov	r2, r3
 80107b6:	68b9      	ldr	r1, [r7, #8]
 80107b8:	68f8      	ldr	r0, [r7, #12]
 80107ba:	f7ff ff35 	bl	8010628 <netif_do_set_ipaddr>
  if (change_reason != LWIP_NSC_NONE) {
    change_reason |= LWIP_NSC_IPV4_SETTINGS_CHANGED;
    netif_invoke_ext_callback(netif, change_reason, &cb_args);
  }
#endif
}
 80107be:	bf00      	nop
 80107c0:	3720      	adds	r7, #32
 80107c2:	46bd      	mov	sp, r7
 80107c4:	bd80      	pop	{r7, pc}
 80107c6:	bf00      	nop
 80107c8:	0801f4cc 	.word	0x0801f4cc

080107cc <netif_set_default>:
 *
 * @param netif the default network interface
 */
void
netif_set_default(struct netif *netif)
{
 80107cc:	b480      	push	{r7}
 80107ce:	b083      	sub	sp, #12
 80107d0:	af00      	add	r7, sp, #0
 80107d2:	6078      	str	r0, [r7, #4]
    mib2_remove_route_ip4(1, netif);
  } else {
    /* install default route */
    mib2_add_route_ip4(1, netif);
  }
  netif_default = netif;
 80107d4:	4a04      	ldr	r2, [pc, #16]	; (80107e8 <netif_set_default+0x1c>)
 80107d6:	687b      	ldr	r3, [r7, #4]
 80107d8:	6013      	str	r3, [r2, #0]
  LWIP_DEBUGF(NETIF_DEBUG, ("netif: setting default interface %c%c\n",
                            netif ? netif->name[0] : '\'', netif ? netif->name[1] : '\''));
}
 80107da:	bf00      	nop
 80107dc:	370c      	adds	r7, #12
 80107de:	46bd      	mov	sp, r7
 80107e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80107e4:	4770      	bx	lr
 80107e6:	bf00      	nop
 80107e8:	200070cc 	.word	0x200070cc

080107ec <netif_set_up>:
 * Bring an interface up, available for processing
 * traffic.
 */
void
netif_set_up(struct netif *netif)
{
 80107ec:	b580      	push	{r7, lr}
 80107ee:	b082      	sub	sp, #8
 80107f0:	af00      	add	r7, sp, #0
 80107f2:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("netif_set_up: invalid netif", netif != NULL, return);
 80107f4:	687b      	ldr	r3, [r7, #4]
 80107f6:	2b00      	cmp	r3, #0
 80107f8:	d107      	bne.n	801080a <netif_set_up+0x1e>
 80107fa:	4b0f      	ldr	r3, [pc, #60]	; (8010838 <netif_set_up+0x4c>)
 80107fc:	f44f 7254 	mov.w	r2, #848	; 0x350
 8010800:	490e      	ldr	r1, [pc, #56]	; (801083c <netif_set_up+0x50>)
 8010802:	480f      	ldr	r0, [pc, #60]	; (8010840 <netif_set_up+0x54>)
 8010804:	f009 fb2c 	bl	8019e60 <iprintf>
 8010808:	e013      	b.n	8010832 <netif_set_up+0x46>

  if (!(netif->flags & NETIF_FLAG_UP)) {
 801080a:	687b      	ldr	r3, [r7, #4]
 801080c:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8010810:	f003 0301 	and.w	r3, r3, #1
 8010814:	2b00      	cmp	r3, #0
 8010816:	d10c      	bne.n	8010832 <netif_set_up+0x46>
    netif_set_flags(netif, NETIF_FLAG_UP);
 8010818:	687b      	ldr	r3, [r7, #4]
 801081a:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 801081e:	f043 0301 	orr.w	r3, r3, #1
 8010822:	b2da      	uxtb	r2, r3
 8010824:	687b      	ldr	r3, [r7, #4]
 8010826:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
      args.status_changed.state = 1;
      netif_invoke_ext_callback(netif, LWIP_NSC_STATUS_CHANGED, &args);
    }
#endif

    netif_issue_reports(netif, NETIF_REPORT_TYPE_IPV4 | NETIF_REPORT_TYPE_IPV6);
 801082a:	2103      	movs	r1, #3
 801082c:	6878      	ldr	r0, [r7, #4]
 801082e:	f000 f809 	bl	8010844 <netif_issue_reports>
#if LWIP_IPV6
    nd6_restart_netif(netif);
#endif /* LWIP_IPV6 */
  }
}
 8010832:	3708      	adds	r7, #8
 8010834:	46bd      	mov	sp, r7
 8010836:	bd80      	pop	{r7, pc}
 8010838:	0801cd54 	.word	0x0801cd54
 801083c:	0801cedc 	.word	0x0801cedc
 8010840:	0801cda4 	.word	0x0801cda4

08010844 <netif_issue_reports>:

/** Send ARP/IGMP/MLD/RS events, e.g. on link-up/netif-up or addr-change
 */
static void
netif_issue_reports(struct netif *netif, u8_t report_type)
{
 8010844:	b580      	push	{r7, lr}
 8010846:	b082      	sub	sp, #8
 8010848:	af00      	add	r7, sp, #0
 801084a:	6078      	str	r0, [r7, #4]
 801084c:	460b      	mov	r3, r1
 801084e:	70fb      	strb	r3, [r7, #3]
  LWIP_ASSERT("netif_issue_reports: invalid netif", netif != NULL);
 8010850:	687b      	ldr	r3, [r7, #4]
 8010852:	2b00      	cmp	r3, #0
 8010854:	d106      	bne.n	8010864 <netif_issue_reports+0x20>
 8010856:	4b18      	ldr	r3, [pc, #96]	; (80108b8 <netif_issue_reports+0x74>)
 8010858:	f240 326d 	movw	r2, #877	; 0x36d
 801085c:	4917      	ldr	r1, [pc, #92]	; (80108bc <netif_issue_reports+0x78>)
 801085e:	4818      	ldr	r0, [pc, #96]	; (80108c0 <netif_issue_reports+0x7c>)
 8010860:	f009 fafe 	bl	8019e60 <iprintf>

  /* Only send reports when both link and admin states are up */
  if (!(netif->flags & NETIF_FLAG_LINK_UP) ||
 8010864:	687b      	ldr	r3, [r7, #4]
 8010866:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 801086a:	f003 0304 	and.w	r3, r3, #4
 801086e:	2b00      	cmp	r3, #0
 8010870:	d01e      	beq.n	80108b0 <netif_issue_reports+0x6c>
      !(netif->flags & NETIF_FLAG_UP)) {
 8010872:	687b      	ldr	r3, [r7, #4]
 8010874:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8010878:	f003 0301 	and.w	r3, r3, #1
  if (!(netif->flags & NETIF_FLAG_LINK_UP) ||
 801087c:	2b00      	cmp	r3, #0
 801087e:	d017      	beq.n	80108b0 <netif_issue_reports+0x6c>
    return;
  }

#if LWIP_IPV4
  if ((report_type & NETIF_REPORT_TYPE_IPV4) &&
 8010880:	78fb      	ldrb	r3, [r7, #3]
 8010882:	f003 0301 	and.w	r3, r3, #1
 8010886:	2b00      	cmp	r3, #0
 8010888:	d013      	beq.n	80108b2 <netif_issue_reports+0x6e>
      !ip4_addr_isany_val(*netif_ip4_addr(netif))) {
 801088a:	687b      	ldr	r3, [r7, #4]
 801088c:	3304      	adds	r3, #4
 801088e:	681b      	ldr	r3, [r3, #0]
  if ((report_type & NETIF_REPORT_TYPE_IPV4) &&
 8010890:	2b00      	cmp	r3, #0
 8010892:	d00e      	beq.n	80108b2 <netif_issue_reports+0x6e>
#if LWIP_ARP
    /* For Ethernet network interfaces, we would like to send a "gratuitous ARP" */
    if (netif->flags & (NETIF_FLAG_ETHARP)) {
 8010894:	687b      	ldr	r3, [r7, #4]
 8010896:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 801089a:	f003 0308 	and.w	r3, r3, #8
 801089e:	2b00      	cmp	r3, #0
 80108a0:	d007      	beq.n	80108b2 <netif_issue_reports+0x6e>
      etharp_gratuitous(netif);
 80108a2:	687b      	ldr	r3, [r7, #4]
 80108a4:	3304      	adds	r3, #4
 80108a6:	4619      	mov	r1, r3
 80108a8:	6878      	ldr	r0, [r7, #4]
 80108aa:	f007 f9eb 	bl	8017c84 <etharp_request>
 80108ae:	e000      	b.n	80108b2 <netif_issue_reports+0x6e>
    return;
 80108b0:	bf00      	nop
    /* send mld memberships */
    mld6_report_groups(netif);
#endif /* LWIP_IPV6_MLD */
  }
#endif /* LWIP_IPV6 */
}
 80108b2:	3708      	adds	r7, #8
 80108b4:	46bd      	mov	sp, r7
 80108b6:	bd80      	pop	{r7, pc}
 80108b8:	0801cd54 	.word	0x0801cd54
 80108bc:	0801cef8 	.word	0x0801cef8
 80108c0:	0801cda4 	.word	0x0801cda4

080108c4 <netif_set_down>:
 * @ingroup netif
 * Bring an interface down, disabling any traffic processing.
 */
void
netif_set_down(struct netif *netif)
{
 80108c4:	b580      	push	{r7, lr}
 80108c6:	b082      	sub	sp, #8
 80108c8:	af00      	add	r7, sp, #0
 80108ca:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("netif_set_down: invalid netif", netif != NULL, return);
 80108cc:	687b      	ldr	r3, [r7, #4]
 80108ce:	2b00      	cmp	r3, #0
 80108d0:	d107      	bne.n	80108e2 <netif_set_down+0x1e>
 80108d2:	4b12      	ldr	r3, [pc, #72]	; (801091c <netif_set_down+0x58>)
 80108d4:	f240 329b 	movw	r2, #923	; 0x39b
 80108d8:	4911      	ldr	r1, [pc, #68]	; (8010920 <netif_set_down+0x5c>)
 80108da:	4812      	ldr	r0, [pc, #72]	; (8010924 <netif_set_down+0x60>)
 80108dc:	f009 fac0 	bl	8019e60 <iprintf>
 80108e0:	e019      	b.n	8010916 <netif_set_down+0x52>

  if (netif->flags & NETIF_FLAG_UP) {
 80108e2:	687b      	ldr	r3, [r7, #4]
 80108e4:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 80108e8:	f003 0301 	and.w	r3, r3, #1
 80108ec:	2b00      	cmp	r3, #0
 80108ee:	d012      	beq.n	8010916 <netif_set_down+0x52>
      args.status_changed.state = 0;
      netif_invoke_ext_callback(netif, LWIP_NSC_STATUS_CHANGED, &args);
    }
#endif

    netif_clear_flags(netif, NETIF_FLAG_UP);
 80108f0:	687b      	ldr	r3, [r7, #4]
 80108f2:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 80108f6:	f023 0301 	bic.w	r3, r3, #1
 80108fa:	b2da      	uxtb	r2, r3
 80108fc:	687b      	ldr	r3, [r7, #4]
 80108fe:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
    MIB2_COPY_SYSUPTIME_TO(&netif->ts);

#if LWIP_IPV4 && LWIP_ARP
    if (netif->flags & NETIF_FLAG_ETHARP) {
 8010902:	687b      	ldr	r3, [r7, #4]
 8010904:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8010908:	f003 0308 	and.w	r3, r3, #8
 801090c:	2b00      	cmp	r3, #0
 801090e:	d002      	beq.n	8010916 <netif_set_down+0x52>
      etharp_cleanup_netif(netif);
 8010910:	6878      	ldr	r0, [r7, #4]
 8010912:	f006 fd75 	bl	8017400 <etharp_cleanup_netif>
    nd6_cleanup_netif(netif);
#endif /* LWIP_IPV6 */

    NETIF_STATUS_CALLBACK(netif);
  }
}
 8010916:	3708      	adds	r7, #8
 8010918:	46bd      	mov	sp, r7
 801091a:	bd80      	pop	{r7, pc}
 801091c:	0801cd54 	.word	0x0801cd54
 8010920:	0801cf1c 	.word	0x0801cf1c
 8010924:	0801cda4 	.word	0x0801cda4

08010928 <netif_set_link_up>:
 * @ingroup netif
 * Called by a driver when its link goes up
 */
void
netif_set_link_up(struct netif *netif)
{
 8010928:	b580      	push	{r7, lr}
 801092a:	b082      	sub	sp, #8
 801092c:	af00      	add	r7, sp, #0
 801092e:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("netif_set_link_up: invalid netif", netif != NULL, return);
 8010930:	687b      	ldr	r3, [r7, #4]
 8010932:	2b00      	cmp	r3, #0
 8010934:	d107      	bne.n	8010946 <netif_set_link_up+0x1e>
 8010936:	4b13      	ldr	r3, [pc, #76]	; (8010984 <netif_set_link_up+0x5c>)
 8010938:	f44f 7278 	mov.w	r2, #992	; 0x3e0
 801093c:	4912      	ldr	r1, [pc, #72]	; (8010988 <netif_set_link_up+0x60>)
 801093e:	4813      	ldr	r0, [pc, #76]	; (801098c <netif_set_link_up+0x64>)
 8010940:	f009 fa8e 	bl	8019e60 <iprintf>
 8010944:	e01b      	b.n	801097e <netif_set_link_up+0x56>

  if (!(netif->flags & NETIF_FLAG_LINK_UP)) {
 8010946:	687b      	ldr	r3, [r7, #4]
 8010948:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 801094c:	f003 0304 	and.w	r3, r3, #4
 8010950:	2b00      	cmp	r3, #0
 8010952:	d114      	bne.n	801097e <netif_set_link_up+0x56>
    netif_set_flags(netif, NETIF_FLAG_LINK_UP);
 8010954:	687b      	ldr	r3, [r7, #4]
 8010956:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 801095a:	f043 0304 	orr.w	r3, r3, #4
 801095e:	b2da      	uxtb	r2, r3
 8010960:	687b      	ldr	r3, [r7, #4]
 8010962:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d

#if LWIP_AUTOIP
    autoip_network_changed(netif);
#endif /* LWIP_AUTOIP */

    netif_issue_reports(netif, NETIF_REPORT_TYPE_IPV4 | NETIF_REPORT_TYPE_IPV6);
 8010966:	2103      	movs	r1, #3
 8010968:	6878      	ldr	r0, [r7, #4]
 801096a:	f7ff ff6b 	bl	8010844 <netif_issue_reports>
#if LWIP_IPV6
    nd6_restart_netif(netif);
#endif /* LWIP_IPV6 */

    NETIF_LINK_CALLBACK(netif);
 801096e:	687b      	ldr	r3, [r7, #4]
 8010970:	69db      	ldr	r3, [r3, #28]
 8010972:	2b00      	cmp	r3, #0
 8010974:	d003      	beq.n	801097e <netif_set_link_up+0x56>
 8010976:	687b      	ldr	r3, [r7, #4]
 8010978:	69db      	ldr	r3, [r3, #28]
 801097a:	6878      	ldr	r0, [r7, #4]
 801097c:	4798      	blx	r3
      args.link_changed.state = 1;
      netif_invoke_ext_callback(netif, LWIP_NSC_LINK_CHANGED, &args);
    }
#endif
  }
}
 801097e:	3708      	adds	r7, #8
 8010980:	46bd      	mov	sp, r7
 8010982:	bd80      	pop	{r7, pc}
 8010984:	0801cd54 	.word	0x0801cd54
 8010988:	0801cf3c 	.word	0x0801cf3c
 801098c:	0801cda4 	.word	0x0801cda4

08010990 <netif_set_link_down>:
 * @ingroup netif
 * Called by a driver when its link goes down
 */
void
netif_set_link_down(struct netif *netif)
{
 8010990:	b580      	push	{r7, lr}
 8010992:	b082      	sub	sp, #8
 8010994:	af00      	add	r7, sp, #0
 8010996:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("netif_set_link_down: invalid netif", netif != NULL, return);
 8010998:	687b      	ldr	r3, [r7, #4]
 801099a:	2b00      	cmp	r3, #0
 801099c:	d107      	bne.n	80109ae <netif_set_link_down+0x1e>
 801099e:	4b11      	ldr	r3, [pc, #68]	; (80109e4 <netif_set_link_down+0x54>)
 80109a0:	f240 4206 	movw	r2, #1030	; 0x406
 80109a4:	4910      	ldr	r1, [pc, #64]	; (80109e8 <netif_set_link_down+0x58>)
 80109a6:	4811      	ldr	r0, [pc, #68]	; (80109ec <netif_set_link_down+0x5c>)
 80109a8:	f009 fa5a 	bl	8019e60 <iprintf>
 80109ac:	e017      	b.n	80109de <netif_set_link_down+0x4e>

  if (netif->flags & NETIF_FLAG_LINK_UP) {
 80109ae:	687b      	ldr	r3, [r7, #4]
 80109b0:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 80109b4:	f003 0304 	and.w	r3, r3, #4
 80109b8:	2b00      	cmp	r3, #0
 80109ba:	d010      	beq.n	80109de <netif_set_link_down+0x4e>
    netif_clear_flags(netif, NETIF_FLAG_LINK_UP);
 80109bc:	687b      	ldr	r3, [r7, #4]
 80109be:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 80109c2:	f023 0304 	bic.w	r3, r3, #4
 80109c6:	b2da      	uxtb	r2, r3
 80109c8:	687b      	ldr	r3, [r7, #4]
 80109ca:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
    NETIF_LINK_CALLBACK(netif);
 80109ce:	687b      	ldr	r3, [r7, #4]
 80109d0:	69db      	ldr	r3, [r3, #28]
 80109d2:	2b00      	cmp	r3, #0
 80109d4:	d003      	beq.n	80109de <netif_set_link_down+0x4e>
 80109d6:	687b      	ldr	r3, [r7, #4]
 80109d8:	69db      	ldr	r3, [r3, #28]
 80109da:	6878      	ldr	r0, [r7, #4]
 80109dc:	4798      	blx	r3
      args.link_changed.state = 0;
      netif_invoke_ext_callback(netif, LWIP_NSC_LINK_CHANGED, &args);
    }
#endif
  }
}
 80109de:	3708      	adds	r7, #8
 80109e0:	46bd      	mov	sp, r7
 80109e2:	bd80      	pop	{r7, pc}
 80109e4:	0801cd54 	.word	0x0801cd54
 80109e8:	0801cf60 	.word	0x0801cf60
 80109ec:	0801cda4 	.word	0x0801cda4

080109f0 <netif_set_link_callback>:
 * @ingroup netif
 * Set callback to be called when link is brought up/down
 */
void
netif_set_link_callback(struct netif *netif, netif_status_callback_fn link_callback)
{
 80109f0:	b480      	push	{r7}
 80109f2:	b083      	sub	sp, #12
 80109f4:	af00      	add	r7, sp, #0
 80109f6:	6078      	str	r0, [r7, #4]
 80109f8:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT_CORE_LOCKED();

  if (netif) {
 80109fa:	687b      	ldr	r3, [r7, #4]
 80109fc:	2b00      	cmp	r3, #0
 80109fe:	d002      	beq.n	8010a06 <netif_set_link_callback+0x16>
    netif->link_callback = link_callback;
 8010a00:	687b      	ldr	r3, [r7, #4]
 8010a02:	683a      	ldr	r2, [r7, #0]
 8010a04:	61da      	str	r2, [r3, #28]
  }
}
 8010a06:	bf00      	nop
 8010a08:	370c      	adds	r7, #12
 8010a0a:	46bd      	mov	sp, r7
 8010a0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010a10:	4770      	bx	lr

08010a12 <netif_null_output_ip4>:
#if LWIP_IPV4
/** Dummy IPv4 output function for netifs not supporting IPv4
 */
static err_t
netif_null_output_ip4(struct netif *netif, struct pbuf *p, const ip4_addr_t *ipaddr)
{
 8010a12:	b480      	push	{r7}
 8010a14:	b085      	sub	sp, #20
 8010a16:	af00      	add	r7, sp, #0
 8010a18:	60f8      	str	r0, [r7, #12]
 8010a1a:	60b9      	str	r1, [r7, #8]
 8010a1c:	607a      	str	r2, [r7, #4]
  LWIP_UNUSED_ARG(netif);
  LWIP_UNUSED_ARG(p);
  LWIP_UNUSED_ARG(ipaddr);

  return ERR_IF;
 8010a1e:	f06f 030b 	mvn.w	r3, #11
}
 8010a22:	4618      	mov	r0, r3
 8010a24:	3714      	adds	r7, #20
 8010a26:	46bd      	mov	sp, r7
 8010a28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010a2c:	4770      	bx	lr
	...

08010a30 <netif_get_by_index>:
*
* @param idx index of netif to find
*/
struct netif *
netif_get_by_index(u8_t idx)
{
 8010a30:	b480      	push	{r7}
 8010a32:	b085      	sub	sp, #20
 8010a34:	af00      	add	r7, sp, #0
 8010a36:	4603      	mov	r3, r0
 8010a38:	71fb      	strb	r3, [r7, #7]
  struct netif *netif;

  LWIP_ASSERT_CORE_LOCKED();

  if (idx != NETIF_NO_INDEX) {
 8010a3a:	79fb      	ldrb	r3, [r7, #7]
 8010a3c:	2b00      	cmp	r3, #0
 8010a3e:	d013      	beq.n	8010a68 <netif_get_by_index+0x38>
    NETIF_FOREACH(netif) {
 8010a40:	4b0d      	ldr	r3, [pc, #52]	; (8010a78 <netif_get_by_index+0x48>)
 8010a42:	681b      	ldr	r3, [r3, #0]
 8010a44:	60fb      	str	r3, [r7, #12]
 8010a46:	e00c      	b.n	8010a62 <netif_get_by_index+0x32>
      if (idx == netif_get_index(netif)) {
 8010a48:	68fb      	ldr	r3, [r7, #12]
 8010a4a:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8010a4e:	3301      	adds	r3, #1
 8010a50:	b2db      	uxtb	r3, r3
 8010a52:	79fa      	ldrb	r2, [r7, #7]
 8010a54:	429a      	cmp	r2, r3
 8010a56:	d101      	bne.n	8010a5c <netif_get_by_index+0x2c>
        return netif; /* found! */
 8010a58:	68fb      	ldr	r3, [r7, #12]
 8010a5a:	e006      	b.n	8010a6a <netif_get_by_index+0x3a>
    NETIF_FOREACH(netif) {
 8010a5c:	68fb      	ldr	r3, [r7, #12]
 8010a5e:	681b      	ldr	r3, [r3, #0]
 8010a60:	60fb      	str	r3, [r7, #12]
 8010a62:	68fb      	ldr	r3, [r7, #12]
 8010a64:	2b00      	cmp	r3, #0
 8010a66:	d1ef      	bne.n	8010a48 <netif_get_by_index+0x18>
      }
    }
  }

  return NULL;
 8010a68:	2300      	movs	r3, #0
}
 8010a6a:	4618      	mov	r0, r3
 8010a6c:	3714      	adds	r7, #20
 8010a6e:	46bd      	mov	sp, r7
 8010a70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010a74:	4770      	bx	lr
 8010a76:	bf00      	nop
 8010a78:	200070c8 	.word	0x200070c8

08010a7c <pbuf_pool_is_empty>:
#endif /* !NO_SYS */

/** Queue a call to pbuf_free_ooseq if not already queued. */
static void
pbuf_pool_is_empty(void)
{
 8010a7c:	b480      	push	{r7}
 8010a7e:	af00      	add	r7, sp, #0
#ifndef PBUF_POOL_FREE_OOSEQ_QUEUE_CALL
  SYS_ARCH_SET(pbuf_free_ooseq_pending, 1);
 8010a80:	4b03      	ldr	r3, [pc, #12]	; (8010a90 <pbuf_pool_is_empty+0x14>)
 8010a82:	2201      	movs	r2, #1
 8010a84:	701a      	strb	r2, [r3, #0]
  if (!queued) {
    /* queue a call to pbuf_free_ooseq if not already queued */
    PBUF_POOL_FREE_OOSEQ_QUEUE_CALL();
  }
#endif /* PBUF_POOL_FREE_OOSEQ_QUEUE_CALL */
}
 8010a86:	bf00      	nop
 8010a88:	46bd      	mov	sp, r7
 8010a8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010a8e:	4770      	bx	lr
 8010a90:	200070d1 	.word	0x200070d1

08010a94 <pbuf_init_alloced_pbuf>:
#endif /* !LWIP_TCP || !TCP_QUEUE_OOSEQ || !PBUF_POOL_FREE_OOSEQ */

/* Initialize members of struct pbuf after allocation */
static void
pbuf_init_alloced_pbuf(struct pbuf *p, void *payload, u16_t tot_len, u16_t len, pbuf_type type, u8_t flags)
{
 8010a94:	b480      	push	{r7}
 8010a96:	b085      	sub	sp, #20
 8010a98:	af00      	add	r7, sp, #0
 8010a9a:	60f8      	str	r0, [r7, #12]
 8010a9c:	60b9      	str	r1, [r7, #8]
 8010a9e:	4611      	mov	r1, r2
 8010aa0:	461a      	mov	r2, r3
 8010aa2:	460b      	mov	r3, r1
 8010aa4:	80fb      	strh	r3, [r7, #6]
 8010aa6:	4613      	mov	r3, r2
 8010aa8:	80bb      	strh	r3, [r7, #4]
  p->next = NULL;
 8010aaa:	68fb      	ldr	r3, [r7, #12]
 8010aac:	2200      	movs	r2, #0
 8010aae:	601a      	str	r2, [r3, #0]
  p->payload = payload;
 8010ab0:	68fb      	ldr	r3, [r7, #12]
 8010ab2:	68ba      	ldr	r2, [r7, #8]
 8010ab4:	605a      	str	r2, [r3, #4]
  p->tot_len = tot_len;
 8010ab6:	68fb      	ldr	r3, [r7, #12]
 8010ab8:	88fa      	ldrh	r2, [r7, #6]
 8010aba:	811a      	strh	r2, [r3, #8]
  p->len = len;
 8010abc:	68fb      	ldr	r3, [r7, #12]
 8010abe:	88ba      	ldrh	r2, [r7, #4]
 8010ac0:	815a      	strh	r2, [r3, #10]
  p->type_internal = (u8_t)type;
 8010ac2:	8b3b      	ldrh	r3, [r7, #24]
 8010ac4:	b2da      	uxtb	r2, r3
 8010ac6:	68fb      	ldr	r3, [r7, #12]
 8010ac8:	731a      	strb	r2, [r3, #12]
  p->flags = flags;
 8010aca:	68fb      	ldr	r3, [r7, #12]
 8010acc:	7f3a      	ldrb	r2, [r7, #28]
 8010ace:	735a      	strb	r2, [r3, #13]
  p->ref = 1;
 8010ad0:	68fb      	ldr	r3, [r7, #12]
 8010ad2:	2201      	movs	r2, #1
 8010ad4:	739a      	strb	r2, [r3, #14]
  p->if_idx = NETIF_NO_INDEX;
 8010ad6:	68fb      	ldr	r3, [r7, #12]
 8010ad8:	2200      	movs	r2, #0
 8010ada:	73da      	strb	r2, [r3, #15]
}
 8010adc:	bf00      	nop
 8010ade:	3714      	adds	r7, #20
 8010ae0:	46bd      	mov	sp, r7
 8010ae2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010ae6:	4770      	bx	lr

08010ae8 <pbuf_alloc>:
 * @return the allocated pbuf. If multiple pbufs where allocated, this
 * is the first pbuf of a pbuf chain.
 */
struct pbuf *
pbuf_alloc(pbuf_layer layer, u16_t length, pbuf_type type)
{
 8010ae8:	b580      	push	{r7, lr}
 8010aea:	b08c      	sub	sp, #48	; 0x30
 8010aec:	af02      	add	r7, sp, #8
 8010aee:	4603      	mov	r3, r0
 8010af0:	71fb      	strb	r3, [r7, #7]
 8010af2:	460b      	mov	r3, r1
 8010af4:	80bb      	strh	r3, [r7, #4]
 8010af6:	4613      	mov	r3, r2
 8010af8:	807b      	strh	r3, [r7, #2]
  struct pbuf *p;
  u16_t offset = (u16_t)layer;
 8010afa:	79fb      	ldrb	r3, [r7, #7]
 8010afc:	847b      	strh	r3, [r7, #34]	; 0x22
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_alloc(length=%"U16_F")\n", length));

  switch (type) {
 8010afe:	887b      	ldrh	r3, [r7, #2]
 8010b00:	f5b3 7f20 	cmp.w	r3, #640	; 0x280
 8010b04:	f000 8082 	beq.w	8010c0c <pbuf_alloc+0x124>
 8010b08:	f5b3 7f20 	cmp.w	r3, #640	; 0x280
 8010b0c:	f300 80c9 	bgt.w	8010ca2 <pbuf_alloc+0x1ba>
 8010b10:	f5b3 7fc1 	cmp.w	r3, #386	; 0x182
 8010b14:	d010      	beq.n	8010b38 <pbuf_alloc+0x50>
 8010b16:	f5b3 7fc1 	cmp.w	r3, #386	; 0x182
 8010b1a:	f300 80c2 	bgt.w	8010ca2 <pbuf_alloc+0x1ba>
 8010b1e:	2b01      	cmp	r3, #1
 8010b20:	d002      	beq.n	8010b28 <pbuf_alloc+0x40>
 8010b22:	2b41      	cmp	r3, #65	; 0x41
 8010b24:	f040 80bd 	bne.w	8010ca2 <pbuf_alloc+0x1ba>
    case PBUF_REF: /* fall through */
    case PBUF_ROM:
      p = pbuf_alloc_reference(NULL, length, type);
 8010b28:	887a      	ldrh	r2, [r7, #2]
 8010b2a:	88bb      	ldrh	r3, [r7, #4]
 8010b2c:	4619      	mov	r1, r3
 8010b2e:	2000      	movs	r0, #0
 8010b30:	f000 f8d2 	bl	8010cd8 <pbuf_alloc_reference>
 8010b34:	6278      	str	r0, [r7, #36]	; 0x24
      break;
 8010b36:	e0be      	b.n	8010cb6 <pbuf_alloc+0x1ce>
    case PBUF_POOL: {
      struct pbuf *q, *last;
      u16_t rem_len; /* remaining length */
      p = NULL;
 8010b38:	2300      	movs	r3, #0
 8010b3a:	627b      	str	r3, [r7, #36]	; 0x24
      last = NULL;
 8010b3c:	2300      	movs	r3, #0
 8010b3e:	61fb      	str	r3, [r7, #28]
      rem_len = length;
 8010b40:	88bb      	ldrh	r3, [r7, #4]
 8010b42:	837b      	strh	r3, [r7, #26]
      do {
        u16_t qlen;
        q = (struct pbuf *)memp_malloc(MEMP_PBUF_POOL);
 8010b44:	2008      	movs	r0, #8
 8010b46:	f7ff fbed 	bl	8010324 <memp_malloc>
 8010b4a:	6138      	str	r0, [r7, #16]
        if (q == NULL) {
 8010b4c:	693b      	ldr	r3, [r7, #16]
 8010b4e:	2b00      	cmp	r3, #0
 8010b50:	d109      	bne.n	8010b66 <pbuf_alloc+0x7e>
          PBUF_POOL_IS_EMPTY();
 8010b52:	f7ff ff93 	bl	8010a7c <pbuf_pool_is_empty>
          /* free chain so far allocated */
          if (p) {
 8010b56:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010b58:	2b00      	cmp	r3, #0
 8010b5a:	d002      	beq.n	8010b62 <pbuf_alloc+0x7a>
            pbuf_free(p);
 8010b5c:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8010b5e:	f000 faa7 	bl	80110b0 <pbuf_free>
          }
          /* bail out unsuccessfully */
          return NULL;
 8010b62:	2300      	movs	r3, #0
 8010b64:	e0a8      	b.n	8010cb8 <pbuf_alloc+0x1d0>
        }
        qlen = LWIP_MIN(rem_len, (u16_t)(PBUF_POOL_BUFSIZE_ALIGNED - LWIP_MEM_ALIGN_SIZE(offset)));
 8010b66:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8010b68:	3303      	adds	r3, #3
 8010b6a:	b29b      	uxth	r3, r3
 8010b6c:	f023 0303 	bic.w	r3, r3, #3
 8010b70:	b29a      	uxth	r2, r3
 8010b72:	f240 53ec 	movw	r3, #1516	; 0x5ec
 8010b76:	1a9b      	subs	r3, r3, r2
 8010b78:	b29b      	uxth	r3, r3
 8010b7a:	8b7a      	ldrh	r2, [r7, #26]
 8010b7c:	4293      	cmp	r3, r2
 8010b7e:	bf28      	it	cs
 8010b80:	4613      	movcs	r3, r2
 8010b82:	81fb      	strh	r3, [r7, #14]
        pbuf_init_alloced_pbuf(q, LWIP_MEM_ALIGN((void *)((u8_t *)q + SIZEOF_STRUCT_PBUF + offset)),
 8010b84:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8010b86:	3310      	adds	r3, #16
 8010b88:	693a      	ldr	r2, [r7, #16]
 8010b8a:	4413      	add	r3, r2
 8010b8c:	3303      	adds	r3, #3
 8010b8e:	f023 0303 	bic.w	r3, r3, #3
 8010b92:	4618      	mov	r0, r3
 8010b94:	89f9      	ldrh	r1, [r7, #14]
 8010b96:	8b7a      	ldrh	r2, [r7, #26]
 8010b98:	2300      	movs	r3, #0
 8010b9a:	9301      	str	r3, [sp, #4]
 8010b9c:	887b      	ldrh	r3, [r7, #2]
 8010b9e:	9300      	str	r3, [sp, #0]
 8010ba0:	460b      	mov	r3, r1
 8010ba2:	4601      	mov	r1, r0
 8010ba4:	6938      	ldr	r0, [r7, #16]
 8010ba6:	f7ff ff75 	bl	8010a94 <pbuf_init_alloced_pbuf>
                               rem_len, qlen, type, 0);
        LWIP_ASSERT("pbuf_alloc: pbuf q->payload properly aligned",
 8010baa:	693b      	ldr	r3, [r7, #16]
 8010bac:	685b      	ldr	r3, [r3, #4]
 8010bae:	f003 0303 	and.w	r3, r3, #3
 8010bb2:	2b00      	cmp	r3, #0
 8010bb4:	d006      	beq.n	8010bc4 <pbuf_alloc+0xdc>
 8010bb6:	4b42      	ldr	r3, [pc, #264]	; (8010cc0 <pbuf_alloc+0x1d8>)
 8010bb8:	f44f 7280 	mov.w	r2, #256	; 0x100
 8010bbc:	4941      	ldr	r1, [pc, #260]	; (8010cc4 <pbuf_alloc+0x1dc>)
 8010bbe:	4842      	ldr	r0, [pc, #264]	; (8010cc8 <pbuf_alloc+0x1e0>)
 8010bc0:	f009 f94e 	bl	8019e60 <iprintf>
                    ((mem_ptr_t)q->payload % MEM_ALIGNMENT) == 0);
        LWIP_ASSERT("PBUF_POOL_BUFSIZE must be bigger than MEM_ALIGNMENT",
 8010bc4:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8010bc6:	3303      	adds	r3, #3
 8010bc8:	f023 0303 	bic.w	r3, r3, #3
 8010bcc:	f240 52ec 	movw	r2, #1516	; 0x5ec
 8010bd0:	4293      	cmp	r3, r2
 8010bd2:	d106      	bne.n	8010be2 <pbuf_alloc+0xfa>
 8010bd4:	4b3a      	ldr	r3, [pc, #232]	; (8010cc0 <pbuf_alloc+0x1d8>)
 8010bd6:	f44f 7281 	mov.w	r2, #258	; 0x102
 8010bda:	493c      	ldr	r1, [pc, #240]	; (8010ccc <pbuf_alloc+0x1e4>)
 8010bdc:	483a      	ldr	r0, [pc, #232]	; (8010cc8 <pbuf_alloc+0x1e0>)
 8010bde:	f009 f93f 	bl	8019e60 <iprintf>
                    (PBUF_POOL_BUFSIZE_ALIGNED - LWIP_MEM_ALIGN_SIZE(offset)) > 0 );
        if (p == NULL) {
 8010be2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010be4:	2b00      	cmp	r3, #0
 8010be6:	d102      	bne.n	8010bee <pbuf_alloc+0x106>
          /* allocated head of pbuf chain (into p) */
          p = q;
 8010be8:	693b      	ldr	r3, [r7, #16]
 8010bea:	627b      	str	r3, [r7, #36]	; 0x24
 8010bec:	e002      	b.n	8010bf4 <pbuf_alloc+0x10c>
        } else {
          /* make previous pbuf point to this pbuf */
          last->next = q;
 8010bee:	69fb      	ldr	r3, [r7, #28]
 8010bf0:	693a      	ldr	r2, [r7, #16]
 8010bf2:	601a      	str	r2, [r3, #0]
        }
        last = q;
 8010bf4:	693b      	ldr	r3, [r7, #16]
 8010bf6:	61fb      	str	r3, [r7, #28]
        rem_len = (u16_t)(rem_len - qlen);
 8010bf8:	8b7a      	ldrh	r2, [r7, #26]
 8010bfa:	89fb      	ldrh	r3, [r7, #14]
 8010bfc:	1ad3      	subs	r3, r2, r3
 8010bfe:	837b      	strh	r3, [r7, #26]
        offset = 0;
 8010c00:	2300      	movs	r3, #0
 8010c02:	847b      	strh	r3, [r7, #34]	; 0x22
      } while (rem_len > 0);
 8010c04:	8b7b      	ldrh	r3, [r7, #26]
 8010c06:	2b00      	cmp	r3, #0
 8010c08:	d19c      	bne.n	8010b44 <pbuf_alloc+0x5c>
      break;
 8010c0a:	e054      	b.n	8010cb6 <pbuf_alloc+0x1ce>
    }
    case PBUF_RAM: {
      u16_t payload_len = (u16_t)(LWIP_MEM_ALIGN_SIZE(offset) + LWIP_MEM_ALIGN_SIZE(length));
 8010c0c:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8010c0e:	3303      	adds	r3, #3
 8010c10:	b29b      	uxth	r3, r3
 8010c12:	f023 0303 	bic.w	r3, r3, #3
 8010c16:	b29a      	uxth	r2, r3
 8010c18:	88bb      	ldrh	r3, [r7, #4]
 8010c1a:	3303      	adds	r3, #3
 8010c1c:	b29b      	uxth	r3, r3
 8010c1e:	f023 0303 	bic.w	r3, r3, #3
 8010c22:	b29b      	uxth	r3, r3
 8010c24:	4413      	add	r3, r2
 8010c26:	833b      	strh	r3, [r7, #24]
      mem_size_t alloc_len = (mem_size_t)(LWIP_MEM_ALIGN_SIZE(SIZEOF_STRUCT_PBUF) + payload_len);
 8010c28:	8b3b      	ldrh	r3, [r7, #24]
 8010c2a:	3310      	adds	r3, #16
 8010c2c:	617b      	str	r3, [r7, #20]

      /* bug #50040: Check for integer overflow when calculating alloc_len */
      if ((payload_len < LWIP_MEM_ALIGN_SIZE(length)) ||
 8010c2e:	8b3a      	ldrh	r2, [r7, #24]
 8010c30:	88bb      	ldrh	r3, [r7, #4]
 8010c32:	3303      	adds	r3, #3
 8010c34:	f023 0303 	bic.w	r3, r3, #3
 8010c38:	429a      	cmp	r2, r3
 8010c3a:	d306      	bcc.n	8010c4a <pbuf_alloc+0x162>
          (alloc_len < LWIP_MEM_ALIGN_SIZE(length))) {
 8010c3c:	88bb      	ldrh	r3, [r7, #4]
 8010c3e:	3303      	adds	r3, #3
 8010c40:	f023 0303 	bic.w	r3, r3, #3
      if ((payload_len < LWIP_MEM_ALIGN_SIZE(length)) ||
 8010c44:	697a      	ldr	r2, [r7, #20]
 8010c46:	429a      	cmp	r2, r3
 8010c48:	d201      	bcs.n	8010c4e <pbuf_alloc+0x166>
        return NULL;
 8010c4a:	2300      	movs	r3, #0
 8010c4c:	e034      	b.n	8010cb8 <pbuf_alloc+0x1d0>
      }

      /* If pbuf is to be allocated in RAM, allocate memory for it. */
      p = (struct pbuf *)mem_malloc(alloc_len);
 8010c4e:	6978      	ldr	r0, [r7, #20]
 8010c50:	f7ff f9e0 	bl	8010014 <mem_malloc>
 8010c54:	6278      	str	r0, [r7, #36]	; 0x24
      if (p == NULL) {
 8010c56:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010c58:	2b00      	cmp	r3, #0
 8010c5a:	d101      	bne.n	8010c60 <pbuf_alloc+0x178>
        return NULL;
 8010c5c:	2300      	movs	r3, #0
 8010c5e:	e02b      	b.n	8010cb8 <pbuf_alloc+0x1d0>
      }
      pbuf_init_alloced_pbuf(p, LWIP_MEM_ALIGN((void *)((u8_t *)p + SIZEOF_STRUCT_PBUF + offset)),
 8010c60:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8010c62:	3310      	adds	r3, #16
 8010c64:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8010c66:	4413      	add	r3, r2
 8010c68:	3303      	adds	r3, #3
 8010c6a:	f023 0303 	bic.w	r3, r3, #3
 8010c6e:	4618      	mov	r0, r3
 8010c70:	88b9      	ldrh	r1, [r7, #4]
 8010c72:	88ba      	ldrh	r2, [r7, #4]
 8010c74:	2300      	movs	r3, #0
 8010c76:	9301      	str	r3, [sp, #4]
 8010c78:	887b      	ldrh	r3, [r7, #2]
 8010c7a:	9300      	str	r3, [sp, #0]
 8010c7c:	460b      	mov	r3, r1
 8010c7e:	4601      	mov	r1, r0
 8010c80:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8010c82:	f7ff ff07 	bl	8010a94 <pbuf_init_alloced_pbuf>
                             length, length, type, 0);
      LWIP_ASSERT("pbuf_alloc: pbuf->payload properly aligned",
 8010c86:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010c88:	685b      	ldr	r3, [r3, #4]
 8010c8a:	f003 0303 	and.w	r3, r3, #3
 8010c8e:	2b00      	cmp	r3, #0
 8010c90:	d010      	beq.n	8010cb4 <pbuf_alloc+0x1cc>
 8010c92:	4b0b      	ldr	r3, [pc, #44]	; (8010cc0 <pbuf_alloc+0x1d8>)
 8010c94:	f44f 7291 	mov.w	r2, #290	; 0x122
 8010c98:	490d      	ldr	r1, [pc, #52]	; (8010cd0 <pbuf_alloc+0x1e8>)
 8010c9a:	480b      	ldr	r0, [pc, #44]	; (8010cc8 <pbuf_alloc+0x1e0>)
 8010c9c:	f009 f8e0 	bl	8019e60 <iprintf>
                  ((mem_ptr_t)p->payload % MEM_ALIGNMENT) == 0);
      break;
 8010ca0:	e008      	b.n	8010cb4 <pbuf_alloc+0x1cc>
    }
    default:
      LWIP_ASSERT("pbuf_alloc: erroneous type", 0);
 8010ca2:	4b07      	ldr	r3, [pc, #28]	; (8010cc0 <pbuf_alloc+0x1d8>)
 8010ca4:	f240 1227 	movw	r2, #295	; 0x127
 8010ca8:	490a      	ldr	r1, [pc, #40]	; (8010cd4 <pbuf_alloc+0x1ec>)
 8010caa:	4807      	ldr	r0, [pc, #28]	; (8010cc8 <pbuf_alloc+0x1e0>)
 8010cac:	f009 f8d8 	bl	8019e60 <iprintf>
      return NULL;
 8010cb0:	2300      	movs	r3, #0
 8010cb2:	e001      	b.n	8010cb8 <pbuf_alloc+0x1d0>
      break;
 8010cb4:	bf00      	nop
  }
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_alloc(length=%"U16_F") == %p\n", length, (void *)p));
  return p;
 8010cb6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8010cb8:	4618      	mov	r0, r3
 8010cba:	3728      	adds	r7, #40	; 0x28
 8010cbc:	46bd      	mov	sp, r7
 8010cbe:	bd80      	pop	{r7, pc}
 8010cc0:	0801cf84 	.word	0x0801cf84
 8010cc4:	0801cfb4 	.word	0x0801cfb4
 8010cc8:	0801cfe4 	.word	0x0801cfe4
 8010ccc:	0801d00c 	.word	0x0801d00c
 8010cd0:	0801d040 	.word	0x0801d040
 8010cd4:	0801d06c 	.word	0x0801d06c

08010cd8 <pbuf_alloc_reference>:
 *
 * @return the allocated pbuf.
 */
struct pbuf *
pbuf_alloc_reference(void *payload, u16_t length, pbuf_type type)
{
 8010cd8:	b580      	push	{r7, lr}
 8010cda:	b086      	sub	sp, #24
 8010cdc:	af02      	add	r7, sp, #8
 8010cde:	6078      	str	r0, [r7, #4]
 8010ce0:	460b      	mov	r3, r1
 8010ce2:	807b      	strh	r3, [r7, #2]
 8010ce4:	4613      	mov	r3, r2
 8010ce6:	803b      	strh	r3, [r7, #0]
  struct pbuf *p;
  LWIP_ASSERT("invalid pbuf_type", (type == PBUF_REF) || (type == PBUF_ROM));
 8010ce8:	883b      	ldrh	r3, [r7, #0]
 8010cea:	2b41      	cmp	r3, #65	; 0x41
 8010cec:	d009      	beq.n	8010d02 <pbuf_alloc_reference+0x2a>
 8010cee:	883b      	ldrh	r3, [r7, #0]
 8010cf0:	2b01      	cmp	r3, #1
 8010cf2:	d006      	beq.n	8010d02 <pbuf_alloc_reference+0x2a>
 8010cf4:	4b0f      	ldr	r3, [pc, #60]	; (8010d34 <pbuf_alloc_reference+0x5c>)
 8010cf6:	f44f 72a5 	mov.w	r2, #330	; 0x14a
 8010cfa:	490f      	ldr	r1, [pc, #60]	; (8010d38 <pbuf_alloc_reference+0x60>)
 8010cfc:	480f      	ldr	r0, [pc, #60]	; (8010d3c <pbuf_alloc_reference+0x64>)
 8010cfe:	f009 f8af 	bl	8019e60 <iprintf>
  /* only allocate memory for the pbuf structure */
  p = (struct pbuf *)memp_malloc(MEMP_PBUF);
 8010d02:	2007      	movs	r0, #7
 8010d04:	f7ff fb0e 	bl	8010324 <memp_malloc>
 8010d08:	60f8      	str	r0, [r7, #12]
  if (p == NULL) {
 8010d0a:	68fb      	ldr	r3, [r7, #12]
 8010d0c:	2b00      	cmp	r3, #0
 8010d0e:	d101      	bne.n	8010d14 <pbuf_alloc_reference+0x3c>
    LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_LEVEL_SERIOUS,
                ("pbuf_alloc_reference: Could not allocate MEMP_PBUF for PBUF_%s.\n",
                 (type == PBUF_ROM) ? "ROM" : "REF"));
    return NULL;
 8010d10:	2300      	movs	r3, #0
 8010d12:	e00b      	b.n	8010d2c <pbuf_alloc_reference+0x54>
  }
  pbuf_init_alloced_pbuf(p, payload, length, length, type, 0);
 8010d14:	8879      	ldrh	r1, [r7, #2]
 8010d16:	887a      	ldrh	r2, [r7, #2]
 8010d18:	2300      	movs	r3, #0
 8010d1a:	9301      	str	r3, [sp, #4]
 8010d1c:	883b      	ldrh	r3, [r7, #0]
 8010d1e:	9300      	str	r3, [sp, #0]
 8010d20:	460b      	mov	r3, r1
 8010d22:	6879      	ldr	r1, [r7, #4]
 8010d24:	68f8      	ldr	r0, [r7, #12]
 8010d26:	f7ff feb5 	bl	8010a94 <pbuf_init_alloced_pbuf>
  return p;
 8010d2a:	68fb      	ldr	r3, [r7, #12]
}
 8010d2c:	4618      	mov	r0, r3
 8010d2e:	3710      	adds	r7, #16
 8010d30:	46bd      	mov	sp, r7
 8010d32:	bd80      	pop	{r7, pc}
 8010d34:	0801cf84 	.word	0x0801cf84
 8010d38:	0801d088 	.word	0x0801d088
 8010d3c:	0801cfe4 	.word	0x0801cfe4

08010d40 <pbuf_alloced_custom>:
 *        big enough to hold 'length' plus the header size
 */
struct pbuf *
pbuf_alloced_custom(pbuf_layer l, u16_t length, pbuf_type type, struct pbuf_custom *p,
                    void *payload_mem, u16_t payload_mem_len)
{
 8010d40:	b580      	push	{r7, lr}
 8010d42:	b088      	sub	sp, #32
 8010d44:	af02      	add	r7, sp, #8
 8010d46:	607b      	str	r3, [r7, #4]
 8010d48:	4603      	mov	r3, r0
 8010d4a:	73fb      	strb	r3, [r7, #15]
 8010d4c:	460b      	mov	r3, r1
 8010d4e:	81bb      	strh	r3, [r7, #12]
 8010d50:	4613      	mov	r3, r2
 8010d52:	817b      	strh	r3, [r7, #10]
  u16_t offset = (u16_t)l;
 8010d54:	7bfb      	ldrb	r3, [r7, #15]
 8010d56:	827b      	strh	r3, [r7, #18]
  void *payload;
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_alloced_custom(length=%"U16_F")\n", length));

  if (LWIP_MEM_ALIGN_SIZE(offset) + length > payload_mem_len) {
 8010d58:	8a7b      	ldrh	r3, [r7, #18]
 8010d5a:	3303      	adds	r3, #3
 8010d5c:	f023 0203 	bic.w	r2, r3, #3
 8010d60:	89bb      	ldrh	r3, [r7, #12]
 8010d62:	441a      	add	r2, r3
 8010d64:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8010d66:	429a      	cmp	r2, r3
 8010d68:	d901      	bls.n	8010d6e <pbuf_alloced_custom+0x2e>
    LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_LEVEL_WARNING, ("pbuf_alloced_custom(length=%"U16_F") buffer too short\n", length));
    return NULL;
 8010d6a:	2300      	movs	r3, #0
 8010d6c:	e018      	b.n	8010da0 <pbuf_alloced_custom+0x60>
  }

  if (payload_mem != NULL) {
 8010d6e:	6a3b      	ldr	r3, [r7, #32]
 8010d70:	2b00      	cmp	r3, #0
 8010d72:	d007      	beq.n	8010d84 <pbuf_alloced_custom+0x44>
    payload = (u8_t *)payload_mem + LWIP_MEM_ALIGN_SIZE(offset);
 8010d74:	8a7b      	ldrh	r3, [r7, #18]
 8010d76:	3303      	adds	r3, #3
 8010d78:	f023 0303 	bic.w	r3, r3, #3
 8010d7c:	6a3a      	ldr	r2, [r7, #32]
 8010d7e:	4413      	add	r3, r2
 8010d80:	617b      	str	r3, [r7, #20]
 8010d82:	e001      	b.n	8010d88 <pbuf_alloced_custom+0x48>
  } else {
    payload = NULL;
 8010d84:	2300      	movs	r3, #0
 8010d86:	617b      	str	r3, [r7, #20]
  }
  pbuf_init_alloced_pbuf(&p->pbuf, payload, length, length, type, PBUF_FLAG_IS_CUSTOM);
 8010d88:	6878      	ldr	r0, [r7, #4]
 8010d8a:	89b9      	ldrh	r1, [r7, #12]
 8010d8c:	89ba      	ldrh	r2, [r7, #12]
 8010d8e:	2302      	movs	r3, #2
 8010d90:	9301      	str	r3, [sp, #4]
 8010d92:	897b      	ldrh	r3, [r7, #10]
 8010d94:	9300      	str	r3, [sp, #0]
 8010d96:	460b      	mov	r3, r1
 8010d98:	6979      	ldr	r1, [r7, #20]
 8010d9a:	f7ff fe7b 	bl	8010a94 <pbuf_init_alloced_pbuf>
  return &p->pbuf;
 8010d9e:	687b      	ldr	r3, [r7, #4]
}
 8010da0:	4618      	mov	r0, r3
 8010da2:	3718      	adds	r7, #24
 8010da4:	46bd      	mov	sp, r7
 8010da6:	bd80      	pop	{r7, pc}

08010da8 <pbuf_realloc>:
 *
 * @note Despite its name, pbuf_realloc cannot grow the size of a pbuf (chain).
 */
void
pbuf_realloc(struct pbuf *p, u16_t new_len)
{
 8010da8:	b580      	push	{r7, lr}
 8010daa:	b084      	sub	sp, #16
 8010dac:	af00      	add	r7, sp, #0
 8010dae:	6078      	str	r0, [r7, #4]
 8010db0:	460b      	mov	r3, r1
 8010db2:	807b      	strh	r3, [r7, #2]
  struct pbuf *q;
  u16_t rem_len; /* remaining length */
  u16_t shrink;

  LWIP_ASSERT("pbuf_realloc: p != NULL", p != NULL);
 8010db4:	687b      	ldr	r3, [r7, #4]
 8010db6:	2b00      	cmp	r3, #0
 8010db8:	d106      	bne.n	8010dc8 <pbuf_realloc+0x20>
 8010dba:	4b39      	ldr	r3, [pc, #228]	; (8010ea0 <pbuf_realloc+0xf8>)
 8010dbc:	f44f 72cc 	mov.w	r2, #408	; 0x198
 8010dc0:	4938      	ldr	r1, [pc, #224]	; (8010ea4 <pbuf_realloc+0xfc>)
 8010dc2:	4839      	ldr	r0, [pc, #228]	; (8010ea8 <pbuf_realloc+0x100>)
 8010dc4:	f009 f84c 	bl	8019e60 <iprintf>

  /* desired length larger than current length? */
  if (new_len >= p->tot_len) {
 8010dc8:	687b      	ldr	r3, [r7, #4]
 8010dca:	891b      	ldrh	r3, [r3, #8]
 8010dcc:	887a      	ldrh	r2, [r7, #2]
 8010dce:	429a      	cmp	r2, r3
 8010dd0:	d261      	bcs.n	8010e96 <pbuf_realloc+0xee>
    return;
  }

  /* the pbuf chain grows by (new_len - p->tot_len) bytes
   * (which may be negative in case of shrinking) */
  shrink = (u16_t)(p->tot_len - new_len);
 8010dd2:	687b      	ldr	r3, [r7, #4]
 8010dd4:	891a      	ldrh	r2, [r3, #8]
 8010dd6:	887b      	ldrh	r3, [r7, #2]
 8010dd8:	1ad3      	subs	r3, r2, r3
 8010dda:	813b      	strh	r3, [r7, #8]

  /* first, step over any pbufs that should remain in the chain */
  rem_len = new_len;
 8010ddc:	887b      	ldrh	r3, [r7, #2]
 8010dde:	817b      	strh	r3, [r7, #10]
  q = p;
 8010de0:	687b      	ldr	r3, [r7, #4]
 8010de2:	60fb      	str	r3, [r7, #12]
  /* should this pbuf be kept? */
  while (rem_len > q->len) {
 8010de4:	e018      	b.n	8010e18 <pbuf_realloc+0x70>
    /* decrease remaining length by pbuf length */
    rem_len = (u16_t)(rem_len - q->len);
 8010de6:	68fb      	ldr	r3, [r7, #12]
 8010de8:	895b      	ldrh	r3, [r3, #10]
 8010dea:	897a      	ldrh	r2, [r7, #10]
 8010dec:	1ad3      	subs	r3, r2, r3
 8010dee:	817b      	strh	r3, [r7, #10]
    /* decrease total length indicator */
    q->tot_len = (u16_t)(q->tot_len - shrink);
 8010df0:	68fb      	ldr	r3, [r7, #12]
 8010df2:	891a      	ldrh	r2, [r3, #8]
 8010df4:	893b      	ldrh	r3, [r7, #8]
 8010df6:	1ad3      	subs	r3, r2, r3
 8010df8:	b29a      	uxth	r2, r3
 8010dfa:	68fb      	ldr	r3, [r7, #12]
 8010dfc:	811a      	strh	r2, [r3, #8]
    /* proceed to next pbuf in chain */
    q = q->next;
 8010dfe:	68fb      	ldr	r3, [r7, #12]
 8010e00:	681b      	ldr	r3, [r3, #0]
 8010e02:	60fb      	str	r3, [r7, #12]
    LWIP_ASSERT("pbuf_realloc: q != NULL", q != NULL);
 8010e04:	68fb      	ldr	r3, [r7, #12]
 8010e06:	2b00      	cmp	r3, #0
 8010e08:	d106      	bne.n	8010e18 <pbuf_realloc+0x70>
 8010e0a:	4b25      	ldr	r3, [pc, #148]	; (8010ea0 <pbuf_realloc+0xf8>)
 8010e0c:	f240 12af 	movw	r2, #431	; 0x1af
 8010e10:	4926      	ldr	r1, [pc, #152]	; (8010eac <pbuf_realloc+0x104>)
 8010e12:	4825      	ldr	r0, [pc, #148]	; (8010ea8 <pbuf_realloc+0x100>)
 8010e14:	f009 f824 	bl	8019e60 <iprintf>
  while (rem_len > q->len) {
 8010e18:	68fb      	ldr	r3, [r7, #12]
 8010e1a:	895b      	ldrh	r3, [r3, #10]
 8010e1c:	897a      	ldrh	r2, [r7, #10]
 8010e1e:	429a      	cmp	r2, r3
 8010e20:	d8e1      	bhi.n	8010de6 <pbuf_realloc+0x3e>
  /* we have now reached the new last pbuf (in q) */
  /* rem_len == desired length for pbuf q */

  /* shrink allocated memory for PBUF_RAM */
  /* (other types merely adjust their length fields */
  if (pbuf_match_allocsrc(q, PBUF_TYPE_ALLOC_SRC_MASK_STD_HEAP) && (rem_len != q->len)
 8010e22:	68fb      	ldr	r3, [r7, #12]
 8010e24:	7b1b      	ldrb	r3, [r3, #12]
 8010e26:	f003 030f 	and.w	r3, r3, #15
 8010e2a:	2b00      	cmp	r3, #0
 8010e2c:	d11f      	bne.n	8010e6e <pbuf_realloc+0xc6>
 8010e2e:	68fb      	ldr	r3, [r7, #12]
 8010e30:	895b      	ldrh	r3, [r3, #10]
 8010e32:	897a      	ldrh	r2, [r7, #10]
 8010e34:	429a      	cmp	r2, r3
 8010e36:	d01a      	beq.n	8010e6e <pbuf_realloc+0xc6>
#if LWIP_SUPPORT_CUSTOM_PBUF
      && ((q->flags & PBUF_FLAG_IS_CUSTOM) == 0)
 8010e38:	68fb      	ldr	r3, [r7, #12]
 8010e3a:	7b5b      	ldrb	r3, [r3, #13]
 8010e3c:	f003 0302 	and.w	r3, r3, #2
 8010e40:	2b00      	cmp	r3, #0
 8010e42:	d114      	bne.n	8010e6e <pbuf_realloc+0xc6>
#endif /* LWIP_SUPPORT_CUSTOM_PBUF */
     ) {
    /* reallocate and adjust the length of the pbuf that will be split */
    q = (struct pbuf *)mem_trim(q, (mem_size_t)(((u8_t *)q->payload - (u8_t *)q) + rem_len));
 8010e44:	68fb      	ldr	r3, [r7, #12]
 8010e46:	685a      	ldr	r2, [r3, #4]
 8010e48:	68fb      	ldr	r3, [r7, #12]
 8010e4a:	1ad2      	subs	r2, r2, r3
 8010e4c:	897b      	ldrh	r3, [r7, #10]
 8010e4e:	4413      	add	r3, r2
 8010e50:	4619      	mov	r1, r3
 8010e52:	68f8      	ldr	r0, [r7, #12]
 8010e54:	f7fe ffea 	bl	800fe2c <mem_trim>
 8010e58:	60f8      	str	r0, [r7, #12]
    LWIP_ASSERT("mem_trim returned q == NULL", q != NULL);
 8010e5a:	68fb      	ldr	r3, [r7, #12]
 8010e5c:	2b00      	cmp	r3, #0
 8010e5e:	d106      	bne.n	8010e6e <pbuf_realloc+0xc6>
 8010e60:	4b0f      	ldr	r3, [pc, #60]	; (8010ea0 <pbuf_realloc+0xf8>)
 8010e62:	f240 12bd 	movw	r2, #445	; 0x1bd
 8010e66:	4912      	ldr	r1, [pc, #72]	; (8010eb0 <pbuf_realloc+0x108>)
 8010e68:	480f      	ldr	r0, [pc, #60]	; (8010ea8 <pbuf_realloc+0x100>)
 8010e6a:	f008 fff9 	bl	8019e60 <iprintf>
  }
  /* adjust length fields for new last pbuf */
  q->len = rem_len;
 8010e6e:	68fb      	ldr	r3, [r7, #12]
 8010e70:	897a      	ldrh	r2, [r7, #10]
 8010e72:	815a      	strh	r2, [r3, #10]
  q->tot_len = q->len;
 8010e74:	68fb      	ldr	r3, [r7, #12]
 8010e76:	895a      	ldrh	r2, [r3, #10]
 8010e78:	68fb      	ldr	r3, [r7, #12]
 8010e7a:	811a      	strh	r2, [r3, #8]

  /* any remaining pbufs in chain? */
  if (q->next != NULL) {
 8010e7c:	68fb      	ldr	r3, [r7, #12]
 8010e7e:	681b      	ldr	r3, [r3, #0]
 8010e80:	2b00      	cmp	r3, #0
 8010e82:	d004      	beq.n	8010e8e <pbuf_realloc+0xe6>
    /* free remaining pbufs in chain */
    pbuf_free(q->next);
 8010e84:	68fb      	ldr	r3, [r7, #12]
 8010e86:	681b      	ldr	r3, [r3, #0]
 8010e88:	4618      	mov	r0, r3
 8010e8a:	f000 f911 	bl	80110b0 <pbuf_free>
  }
  /* q is last packet in chain */
  q->next = NULL;
 8010e8e:	68fb      	ldr	r3, [r7, #12]
 8010e90:	2200      	movs	r2, #0
 8010e92:	601a      	str	r2, [r3, #0]
 8010e94:	e000      	b.n	8010e98 <pbuf_realloc+0xf0>
    return;
 8010e96:	bf00      	nop

}
 8010e98:	3710      	adds	r7, #16
 8010e9a:	46bd      	mov	sp, r7
 8010e9c:	bd80      	pop	{r7, pc}
 8010e9e:	bf00      	nop
 8010ea0:	0801cf84 	.word	0x0801cf84
 8010ea4:	0801d09c 	.word	0x0801d09c
 8010ea8:	0801cfe4 	.word	0x0801cfe4
 8010eac:	0801d0b4 	.word	0x0801d0b4
 8010eb0:	0801d0cc 	.word	0x0801d0cc

08010eb4 <pbuf_add_header_impl>:
 * @return non-zero on failure, zero on success.
 *
 */
static u8_t
pbuf_add_header_impl(struct pbuf *p, size_t header_size_increment, u8_t force)
{
 8010eb4:	b580      	push	{r7, lr}
 8010eb6:	b086      	sub	sp, #24
 8010eb8:	af00      	add	r7, sp, #0
 8010eba:	60f8      	str	r0, [r7, #12]
 8010ebc:	60b9      	str	r1, [r7, #8]
 8010ebe:	4613      	mov	r3, r2
 8010ec0:	71fb      	strb	r3, [r7, #7]
  u16_t type_internal;
  void *payload;
  u16_t increment_magnitude;

  LWIP_ASSERT("p != NULL", p != NULL);
 8010ec2:	68fb      	ldr	r3, [r7, #12]
 8010ec4:	2b00      	cmp	r3, #0
 8010ec6:	d106      	bne.n	8010ed6 <pbuf_add_header_impl+0x22>
 8010ec8:	4b2b      	ldr	r3, [pc, #172]	; (8010f78 <pbuf_add_header_impl+0xc4>)
 8010eca:	f240 12df 	movw	r2, #479	; 0x1df
 8010ece:	492b      	ldr	r1, [pc, #172]	; (8010f7c <pbuf_add_header_impl+0xc8>)
 8010ed0:	482b      	ldr	r0, [pc, #172]	; (8010f80 <pbuf_add_header_impl+0xcc>)
 8010ed2:	f008 ffc5 	bl	8019e60 <iprintf>
  if ((p == NULL) || (header_size_increment > 0xFFFF)) {
 8010ed6:	68fb      	ldr	r3, [r7, #12]
 8010ed8:	2b00      	cmp	r3, #0
 8010eda:	d003      	beq.n	8010ee4 <pbuf_add_header_impl+0x30>
 8010edc:	68bb      	ldr	r3, [r7, #8]
 8010ede:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8010ee2:	d301      	bcc.n	8010ee8 <pbuf_add_header_impl+0x34>
    return 1;
 8010ee4:	2301      	movs	r3, #1
 8010ee6:	e043      	b.n	8010f70 <pbuf_add_header_impl+0xbc>
  }
  if (header_size_increment == 0) {
 8010ee8:	68bb      	ldr	r3, [r7, #8]
 8010eea:	2b00      	cmp	r3, #0
 8010eec:	d101      	bne.n	8010ef2 <pbuf_add_header_impl+0x3e>
    return 0;
 8010eee:	2300      	movs	r3, #0
 8010ef0:	e03e      	b.n	8010f70 <pbuf_add_header_impl+0xbc>
  }

  increment_magnitude = (u16_t)header_size_increment;
 8010ef2:	68bb      	ldr	r3, [r7, #8]
 8010ef4:	827b      	strh	r3, [r7, #18]
  /* Do not allow tot_len to wrap as a result. */
  if ((u16_t)(increment_magnitude + p->tot_len) < increment_magnitude) {
 8010ef6:	68fb      	ldr	r3, [r7, #12]
 8010ef8:	891a      	ldrh	r2, [r3, #8]
 8010efa:	8a7b      	ldrh	r3, [r7, #18]
 8010efc:	4413      	add	r3, r2
 8010efe:	b29b      	uxth	r3, r3
 8010f00:	8a7a      	ldrh	r2, [r7, #18]
 8010f02:	429a      	cmp	r2, r3
 8010f04:	d901      	bls.n	8010f0a <pbuf_add_header_impl+0x56>
    return 1;
 8010f06:	2301      	movs	r3, #1
 8010f08:	e032      	b.n	8010f70 <pbuf_add_header_impl+0xbc>
  }

  type_internal = p->type_internal;
 8010f0a:	68fb      	ldr	r3, [r7, #12]
 8010f0c:	7b1b      	ldrb	r3, [r3, #12]
 8010f0e:	823b      	strh	r3, [r7, #16]

  /* pbuf types containing payloads? */
  if (type_internal & PBUF_TYPE_FLAG_STRUCT_DATA_CONTIGUOUS) {
 8010f10:	8a3b      	ldrh	r3, [r7, #16]
 8010f12:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8010f16:	2b00      	cmp	r3, #0
 8010f18:	d00c      	beq.n	8010f34 <pbuf_add_header_impl+0x80>
    /* set new payload pointer */
    payload = (u8_t *)p->payload - header_size_increment;
 8010f1a:	68fb      	ldr	r3, [r7, #12]
 8010f1c:	685a      	ldr	r2, [r3, #4]
 8010f1e:	68bb      	ldr	r3, [r7, #8]
 8010f20:	425b      	negs	r3, r3
 8010f22:	4413      	add	r3, r2
 8010f24:	617b      	str	r3, [r7, #20]
    /* boundary check fails? */
    if ((u8_t *)payload < (u8_t *)p + SIZEOF_STRUCT_PBUF) {
 8010f26:	68fb      	ldr	r3, [r7, #12]
 8010f28:	3310      	adds	r3, #16
 8010f2a:	697a      	ldr	r2, [r7, #20]
 8010f2c:	429a      	cmp	r2, r3
 8010f2e:	d20d      	bcs.n	8010f4c <pbuf_add_header_impl+0x98>
      LWIP_DEBUGF( PBUF_DEBUG | LWIP_DBG_TRACE,
                   ("pbuf_add_header: failed as %p < %p (not enough space for new header size)\n",
                    (void *)payload, (void *)((u8_t *)p + SIZEOF_STRUCT_PBUF)));
      /* bail out unsuccessfully */
      return 1;
 8010f30:	2301      	movs	r3, #1
 8010f32:	e01d      	b.n	8010f70 <pbuf_add_header_impl+0xbc>
    }
    /* pbuf types referring to external payloads? */
  } else {
    /* hide a header in the payload? */
    if (force) {
 8010f34:	79fb      	ldrb	r3, [r7, #7]
 8010f36:	2b00      	cmp	r3, #0
 8010f38:	d006      	beq.n	8010f48 <pbuf_add_header_impl+0x94>
      payload = (u8_t *)p->payload - header_size_increment;
 8010f3a:	68fb      	ldr	r3, [r7, #12]
 8010f3c:	685a      	ldr	r2, [r3, #4]
 8010f3e:	68bb      	ldr	r3, [r7, #8]
 8010f40:	425b      	negs	r3, r3
 8010f42:	4413      	add	r3, r2
 8010f44:	617b      	str	r3, [r7, #20]
 8010f46:	e001      	b.n	8010f4c <pbuf_add_header_impl+0x98>
    } else {
      /* cannot expand payload to front (yet!)
       * bail out unsuccessfully */
      return 1;
 8010f48:	2301      	movs	r3, #1
 8010f4a:	e011      	b.n	8010f70 <pbuf_add_header_impl+0xbc>
  }
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_add_header: old %p new %p (%"U16_F")\n",
              (void *)p->payload, (void *)payload, increment_magnitude));

  /* modify pbuf fields */
  p->payload = payload;
 8010f4c:	68fb      	ldr	r3, [r7, #12]
 8010f4e:	697a      	ldr	r2, [r7, #20]
 8010f50:	605a      	str	r2, [r3, #4]
  p->len = (u16_t)(p->len + increment_magnitude);
 8010f52:	68fb      	ldr	r3, [r7, #12]
 8010f54:	895a      	ldrh	r2, [r3, #10]
 8010f56:	8a7b      	ldrh	r3, [r7, #18]
 8010f58:	4413      	add	r3, r2
 8010f5a:	b29a      	uxth	r2, r3
 8010f5c:	68fb      	ldr	r3, [r7, #12]
 8010f5e:	815a      	strh	r2, [r3, #10]
  p->tot_len = (u16_t)(p->tot_len + increment_magnitude);
 8010f60:	68fb      	ldr	r3, [r7, #12]
 8010f62:	891a      	ldrh	r2, [r3, #8]
 8010f64:	8a7b      	ldrh	r3, [r7, #18]
 8010f66:	4413      	add	r3, r2
 8010f68:	b29a      	uxth	r2, r3
 8010f6a:	68fb      	ldr	r3, [r7, #12]
 8010f6c:	811a      	strh	r2, [r3, #8]


  return 0;
 8010f6e:	2300      	movs	r3, #0
}
 8010f70:	4618      	mov	r0, r3
 8010f72:	3718      	adds	r7, #24
 8010f74:	46bd      	mov	sp, r7
 8010f76:	bd80      	pop	{r7, pc}
 8010f78:	0801cf84 	.word	0x0801cf84
 8010f7c:	0801d0e8 	.word	0x0801d0e8
 8010f80:	0801cfe4 	.word	0x0801cfe4

08010f84 <pbuf_add_header>:
 * @return non-zero on failure, zero on success.
 *
 */
u8_t
pbuf_add_header(struct pbuf *p, size_t header_size_increment)
{
 8010f84:	b580      	push	{r7, lr}
 8010f86:	b082      	sub	sp, #8
 8010f88:	af00      	add	r7, sp, #0
 8010f8a:	6078      	str	r0, [r7, #4]
 8010f8c:	6039      	str	r1, [r7, #0]
  return pbuf_add_header_impl(p, header_size_increment, 0);
 8010f8e:	2200      	movs	r2, #0
 8010f90:	6839      	ldr	r1, [r7, #0]
 8010f92:	6878      	ldr	r0, [r7, #4]
 8010f94:	f7ff ff8e 	bl	8010eb4 <pbuf_add_header_impl>
 8010f98:	4603      	mov	r3, r0
}
 8010f9a:	4618      	mov	r0, r3
 8010f9c:	3708      	adds	r7, #8
 8010f9e:	46bd      	mov	sp, r7
 8010fa0:	bd80      	pop	{r7, pc}
	...

08010fa4 <pbuf_remove_header>:
 * @return non-zero on failure, zero on success.
 *
 */
u8_t
pbuf_remove_header(struct pbuf *p, size_t header_size_decrement)
{
 8010fa4:	b580      	push	{r7, lr}
 8010fa6:	b084      	sub	sp, #16
 8010fa8:	af00      	add	r7, sp, #0
 8010faa:	6078      	str	r0, [r7, #4]
 8010fac:	6039      	str	r1, [r7, #0]
  void *payload;
  u16_t increment_magnitude;

  LWIP_ASSERT("p != NULL", p != NULL);
 8010fae:	687b      	ldr	r3, [r7, #4]
 8010fb0:	2b00      	cmp	r3, #0
 8010fb2:	d106      	bne.n	8010fc2 <pbuf_remove_header+0x1e>
 8010fb4:	4b20      	ldr	r3, [pc, #128]	; (8011038 <pbuf_remove_header+0x94>)
 8010fb6:	f240 224b 	movw	r2, #587	; 0x24b
 8010fba:	4920      	ldr	r1, [pc, #128]	; (801103c <pbuf_remove_header+0x98>)
 8010fbc:	4820      	ldr	r0, [pc, #128]	; (8011040 <pbuf_remove_header+0x9c>)
 8010fbe:	f008 ff4f 	bl	8019e60 <iprintf>
  if ((p == NULL) || (header_size_decrement > 0xFFFF)) {
 8010fc2:	687b      	ldr	r3, [r7, #4]
 8010fc4:	2b00      	cmp	r3, #0
 8010fc6:	d003      	beq.n	8010fd0 <pbuf_remove_header+0x2c>
 8010fc8:	683b      	ldr	r3, [r7, #0]
 8010fca:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8010fce:	d301      	bcc.n	8010fd4 <pbuf_remove_header+0x30>
    return 1;
 8010fd0:	2301      	movs	r3, #1
 8010fd2:	e02c      	b.n	801102e <pbuf_remove_header+0x8a>
  }
  if (header_size_decrement == 0) {
 8010fd4:	683b      	ldr	r3, [r7, #0]
 8010fd6:	2b00      	cmp	r3, #0
 8010fd8:	d101      	bne.n	8010fde <pbuf_remove_header+0x3a>
    return 0;
 8010fda:	2300      	movs	r3, #0
 8010fdc:	e027      	b.n	801102e <pbuf_remove_header+0x8a>
  }

  increment_magnitude = (u16_t)header_size_decrement;
 8010fde:	683b      	ldr	r3, [r7, #0]
 8010fe0:	81fb      	strh	r3, [r7, #14]
  /* Check that we aren't going to move off the end of the pbuf */
  LWIP_ERROR("increment_magnitude <= p->len", (increment_magnitude <= p->len), return 1;);
 8010fe2:	687b      	ldr	r3, [r7, #4]
 8010fe4:	895b      	ldrh	r3, [r3, #10]
 8010fe6:	89fa      	ldrh	r2, [r7, #14]
 8010fe8:	429a      	cmp	r2, r3
 8010fea:	d908      	bls.n	8010ffe <pbuf_remove_header+0x5a>
 8010fec:	4b12      	ldr	r3, [pc, #72]	; (8011038 <pbuf_remove_header+0x94>)
 8010fee:	f240 2255 	movw	r2, #597	; 0x255
 8010ff2:	4914      	ldr	r1, [pc, #80]	; (8011044 <pbuf_remove_header+0xa0>)
 8010ff4:	4812      	ldr	r0, [pc, #72]	; (8011040 <pbuf_remove_header+0x9c>)
 8010ff6:	f008 ff33 	bl	8019e60 <iprintf>
 8010ffa:	2301      	movs	r3, #1
 8010ffc:	e017      	b.n	801102e <pbuf_remove_header+0x8a>

  /* remember current payload pointer */
  payload = p->payload;
 8010ffe:	687b      	ldr	r3, [r7, #4]
 8011000:	685b      	ldr	r3, [r3, #4]
 8011002:	60bb      	str	r3, [r7, #8]
  LWIP_UNUSED_ARG(payload); /* only used in LWIP_DEBUGF below */

  /* increase payload pointer (guarded by length check above) */
  p->payload = (u8_t *)p->payload + header_size_decrement;
 8011004:	687b      	ldr	r3, [r7, #4]
 8011006:	685a      	ldr	r2, [r3, #4]
 8011008:	683b      	ldr	r3, [r7, #0]
 801100a:	441a      	add	r2, r3
 801100c:	687b      	ldr	r3, [r7, #4]
 801100e:	605a      	str	r2, [r3, #4]
  /* modify pbuf length fields */
  p->len = (u16_t)(p->len - increment_magnitude);
 8011010:	687b      	ldr	r3, [r7, #4]
 8011012:	895a      	ldrh	r2, [r3, #10]
 8011014:	89fb      	ldrh	r3, [r7, #14]
 8011016:	1ad3      	subs	r3, r2, r3
 8011018:	b29a      	uxth	r2, r3
 801101a:	687b      	ldr	r3, [r7, #4]
 801101c:	815a      	strh	r2, [r3, #10]
  p->tot_len = (u16_t)(p->tot_len - increment_magnitude);
 801101e:	687b      	ldr	r3, [r7, #4]
 8011020:	891a      	ldrh	r2, [r3, #8]
 8011022:	89fb      	ldrh	r3, [r7, #14]
 8011024:	1ad3      	subs	r3, r2, r3
 8011026:	b29a      	uxth	r2, r3
 8011028:	687b      	ldr	r3, [r7, #4]
 801102a:	811a      	strh	r2, [r3, #8]

  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_remove_header: old %p new %p (%"U16_F")\n",
              (void *)payload, (void *)p->payload, increment_magnitude));

  return 0;
 801102c:	2300      	movs	r3, #0
}
 801102e:	4618      	mov	r0, r3
 8011030:	3710      	adds	r7, #16
 8011032:	46bd      	mov	sp, r7
 8011034:	bd80      	pop	{r7, pc}
 8011036:	bf00      	nop
 8011038:	0801cf84 	.word	0x0801cf84
 801103c:	0801d0e8 	.word	0x0801d0e8
 8011040:	0801cfe4 	.word	0x0801cfe4
 8011044:	0801d0f4 	.word	0x0801d0f4

08011048 <pbuf_header_impl>:

static u8_t
pbuf_header_impl(struct pbuf *p, s16_t header_size_increment, u8_t force)
{
 8011048:	b580      	push	{r7, lr}
 801104a:	b082      	sub	sp, #8
 801104c:	af00      	add	r7, sp, #0
 801104e:	6078      	str	r0, [r7, #4]
 8011050:	460b      	mov	r3, r1
 8011052:	807b      	strh	r3, [r7, #2]
 8011054:	4613      	mov	r3, r2
 8011056:	707b      	strb	r3, [r7, #1]
  if (header_size_increment < 0) {
 8011058:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 801105c:	2b00      	cmp	r3, #0
 801105e:	da08      	bge.n	8011072 <pbuf_header_impl+0x2a>
    return pbuf_remove_header(p, (size_t) - header_size_increment);
 8011060:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8011064:	425b      	negs	r3, r3
 8011066:	4619      	mov	r1, r3
 8011068:	6878      	ldr	r0, [r7, #4]
 801106a:	f7ff ff9b 	bl	8010fa4 <pbuf_remove_header>
 801106e:	4603      	mov	r3, r0
 8011070:	e007      	b.n	8011082 <pbuf_header_impl+0x3a>
  } else {
    return pbuf_add_header_impl(p, (size_t)header_size_increment, force);
 8011072:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8011076:	787a      	ldrb	r2, [r7, #1]
 8011078:	4619      	mov	r1, r3
 801107a:	6878      	ldr	r0, [r7, #4]
 801107c:	f7ff ff1a 	bl	8010eb4 <pbuf_add_header_impl>
 8011080:	4603      	mov	r3, r0
  }
}
 8011082:	4618      	mov	r0, r3
 8011084:	3708      	adds	r7, #8
 8011086:	46bd      	mov	sp, r7
 8011088:	bd80      	pop	{r7, pc}

0801108a <pbuf_header_force>:
 * Same as pbuf_header but does not check if 'header_size > 0' is allowed.
 * This is used internally only, to allow PBUF_REF for RX.
 */
u8_t
pbuf_header_force(struct pbuf *p, s16_t header_size_increment)
{
 801108a:	b580      	push	{r7, lr}
 801108c:	b082      	sub	sp, #8
 801108e:	af00      	add	r7, sp, #0
 8011090:	6078      	str	r0, [r7, #4]
 8011092:	460b      	mov	r3, r1
 8011094:	807b      	strh	r3, [r7, #2]
  return pbuf_header_impl(p, header_size_increment, 1);
 8011096:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 801109a:	2201      	movs	r2, #1
 801109c:	4619      	mov	r1, r3
 801109e:	6878      	ldr	r0, [r7, #4]
 80110a0:	f7ff ffd2 	bl	8011048 <pbuf_header_impl>
 80110a4:	4603      	mov	r3, r0
}
 80110a6:	4618      	mov	r0, r3
 80110a8:	3708      	adds	r7, #8
 80110aa:	46bd      	mov	sp, r7
 80110ac:	bd80      	pop	{r7, pc}
	...

080110b0 <pbuf_free>:
 * 1->1->1 becomes .......
 *
 */
u8_t
pbuf_free(struct pbuf *p)
{
 80110b0:	b580      	push	{r7, lr}
 80110b2:	b086      	sub	sp, #24
 80110b4:	af00      	add	r7, sp, #0
 80110b6:	6078      	str	r0, [r7, #4]
  u8_t alloc_src;
  struct pbuf *q;
  u8_t count;

  if (p == NULL) {
 80110b8:	687b      	ldr	r3, [r7, #4]
 80110ba:	2b00      	cmp	r3, #0
 80110bc:	d10b      	bne.n	80110d6 <pbuf_free+0x26>
    LWIP_ASSERT("p != NULL", p != NULL);
 80110be:	687b      	ldr	r3, [r7, #4]
 80110c0:	2b00      	cmp	r3, #0
 80110c2:	d106      	bne.n	80110d2 <pbuf_free+0x22>
 80110c4:	4b38      	ldr	r3, [pc, #224]	; (80111a8 <pbuf_free+0xf8>)
 80110c6:	f44f 7237 	mov.w	r2, #732	; 0x2dc
 80110ca:	4938      	ldr	r1, [pc, #224]	; (80111ac <pbuf_free+0xfc>)
 80110cc:	4838      	ldr	r0, [pc, #224]	; (80111b0 <pbuf_free+0x100>)
 80110ce:	f008 fec7 	bl	8019e60 <iprintf>
    /* if assertions are disabled, proceed with debug output */
    LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_LEVEL_SERIOUS,
                ("pbuf_free(p == NULL) was called.\n"));
    return 0;
 80110d2:	2300      	movs	r3, #0
 80110d4:	e063      	b.n	801119e <pbuf_free+0xee>
  }
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_free(%p)\n", (void *)p));

  PERF_START;

  count = 0;
 80110d6:	2300      	movs	r3, #0
 80110d8:	75fb      	strb	r3, [r7, #23]
  /* de-allocate all consecutive pbufs from the head of the chain that
   * obtain a zero reference count after decrementing*/
  while (p != NULL) {
 80110da:	e05c      	b.n	8011196 <pbuf_free+0xe6>
    /* Since decrementing ref cannot be guaranteed to be a single machine operation
     * we must protect it. We put the new ref into a local variable to prevent
     * further protection. */
    SYS_ARCH_PROTECT(old_level);
    /* all pbufs in a chain are referenced at least once */
    LWIP_ASSERT("pbuf_free: p->ref > 0", p->ref > 0);
 80110dc:	687b      	ldr	r3, [r7, #4]
 80110de:	7b9b      	ldrb	r3, [r3, #14]
 80110e0:	2b00      	cmp	r3, #0
 80110e2:	d106      	bne.n	80110f2 <pbuf_free+0x42>
 80110e4:	4b30      	ldr	r3, [pc, #192]	; (80111a8 <pbuf_free+0xf8>)
 80110e6:	f240 22f1 	movw	r2, #753	; 0x2f1
 80110ea:	4932      	ldr	r1, [pc, #200]	; (80111b4 <pbuf_free+0x104>)
 80110ec:	4830      	ldr	r0, [pc, #192]	; (80111b0 <pbuf_free+0x100>)
 80110ee:	f008 feb7 	bl	8019e60 <iprintf>
    /* decrease reference count (number of pointers to pbuf) */
    ref = --(p->ref);
 80110f2:	687b      	ldr	r3, [r7, #4]
 80110f4:	7b9b      	ldrb	r3, [r3, #14]
 80110f6:	3b01      	subs	r3, #1
 80110f8:	b2da      	uxtb	r2, r3
 80110fa:	687b      	ldr	r3, [r7, #4]
 80110fc:	739a      	strb	r2, [r3, #14]
 80110fe:	687b      	ldr	r3, [r7, #4]
 8011100:	7b9b      	ldrb	r3, [r3, #14]
 8011102:	75bb      	strb	r3, [r7, #22]
    SYS_ARCH_UNPROTECT(old_level);
    /* this pbuf is no longer referenced to? */
    if (ref == 0) {
 8011104:	7dbb      	ldrb	r3, [r7, #22]
 8011106:	2b00      	cmp	r3, #0
 8011108:	d143      	bne.n	8011192 <pbuf_free+0xe2>
      /* remember next pbuf in chain for next iteration */
      q = p->next;
 801110a:	687b      	ldr	r3, [r7, #4]
 801110c:	681b      	ldr	r3, [r3, #0]
 801110e:	613b      	str	r3, [r7, #16]
      LWIP_DEBUGF( PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_free: deallocating %p\n", (void *)p));
      alloc_src = pbuf_get_allocsrc(p);
 8011110:	687b      	ldr	r3, [r7, #4]
 8011112:	7b1b      	ldrb	r3, [r3, #12]
 8011114:	f003 030f 	and.w	r3, r3, #15
 8011118:	73fb      	strb	r3, [r7, #15]
#if LWIP_SUPPORT_CUSTOM_PBUF
      /* is this a custom pbuf? */
      if ((p->flags & PBUF_FLAG_IS_CUSTOM) != 0) {
 801111a:	687b      	ldr	r3, [r7, #4]
 801111c:	7b5b      	ldrb	r3, [r3, #13]
 801111e:	f003 0302 	and.w	r3, r3, #2
 8011122:	2b00      	cmp	r3, #0
 8011124:	d011      	beq.n	801114a <pbuf_free+0x9a>
        struct pbuf_custom *pc = (struct pbuf_custom *)p;
 8011126:	687b      	ldr	r3, [r7, #4]
 8011128:	60bb      	str	r3, [r7, #8]
        LWIP_ASSERT("pc->custom_free_function != NULL", pc->custom_free_function != NULL);
 801112a:	68bb      	ldr	r3, [r7, #8]
 801112c:	691b      	ldr	r3, [r3, #16]
 801112e:	2b00      	cmp	r3, #0
 8011130:	d106      	bne.n	8011140 <pbuf_free+0x90>
 8011132:	4b1d      	ldr	r3, [pc, #116]	; (80111a8 <pbuf_free+0xf8>)
 8011134:	f240 22ff 	movw	r2, #767	; 0x2ff
 8011138:	491f      	ldr	r1, [pc, #124]	; (80111b8 <pbuf_free+0x108>)
 801113a:	481d      	ldr	r0, [pc, #116]	; (80111b0 <pbuf_free+0x100>)
 801113c:	f008 fe90 	bl	8019e60 <iprintf>
        pc->custom_free_function(p);
 8011140:	68bb      	ldr	r3, [r7, #8]
 8011142:	691b      	ldr	r3, [r3, #16]
 8011144:	6878      	ldr	r0, [r7, #4]
 8011146:	4798      	blx	r3
 8011148:	e01d      	b.n	8011186 <pbuf_free+0xd6>
      } else
#endif /* LWIP_SUPPORT_CUSTOM_PBUF */
      {
        /* is this a pbuf from the pool? */
        if (alloc_src == PBUF_TYPE_ALLOC_SRC_MASK_STD_MEMP_PBUF_POOL) {
 801114a:	7bfb      	ldrb	r3, [r7, #15]
 801114c:	2b02      	cmp	r3, #2
 801114e:	d104      	bne.n	801115a <pbuf_free+0xaa>
          memp_free(MEMP_PBUF_POOL, p);
 8011150:	6879      	ldr	r1, [r7, #4]
 8011152:	2008      	movs	r0, #8
 8011154:	f7ff f956 	bl	8010404 <memp_free>
 8011158:	e015      	b.n	8011186 <pbuf_free+0xd6>
          /* is this a ROM or RAM referencing pbuf? */
        } else if (alloc_src == PBUF_TYPE_ALLOC_SRC_MASK_STD_MEMP_PBUF) {
 801115a:	7bfb      	ldrb	r3, [r7, #15]
 801115c:	2b01      	cmp	r3, #1
 801115e:	d104      	bne.n	801116a <pbuf_free+0xba>
          memp_free(MEMP_PBUF, p);
 8011160:	6879      	ldr	r1, [r7, #4]
 8011162:	2007      	movs	r0, #7
 8011164:	f7ff f94e 	bl	8010404 <memp_free>
 8011168:	e00d      	b.n	8011186 <pbuf_free+0xd6>
          /* type == PBUF_RAM */
        } else if (alloc_src == PBUF_TYPE_ALLOC_SRC_MASK_STD_HEAP) {
 801116a:	7bfb      	ldrb	r3, [r7, #15]
 801116c:	2b00      	cmp	r3, #0
 801116e:	d103      	bne.n	8011178 <pbuf_free+0xc8>
          mem_free(p);
 8011170:	6878      	ldr	r0, [r7, #4]
 8011172:	f7fe fdf1 	bl	800fd58 <mem_free>
 8011176:	e006      	b.n	8011186 <pbuf_free+0xd6>
        } else {
          /* @todo: support freeing other types */
          LWIP_ASSERT("invalid pbuf type", 0);
 8011178:	4b0b      	ldr	r3, [pc, #44]	; (80111a8 <pbuf_free+0xf8>)
 801117a:	f240 320f 	movw	r2, #783	; 0x30f
 801117e:	490f      	ldr	r1, [pc, #60]	; (80111bc <pbuf_free+0x10c>)
 8011180:	480b      	ldr	r0, [pc, #44]	; (80111b0 <pbuf_free+0x100>)
 8011182:	f008 fe6d 	bl	8019e60 <iprintf>
        }
      }
      count++;
 8011186:	7dfb      	ldrb	r3, [r7, #23]
 8011188:	3301      	adds	r3, #1
 801118a:	75fb      	strb	r3, [r7, #23]
      /* proceed to next pbuf */
      p = q;
 801118c:	693b      	ldr	r3, [r7, #16]
 801118e:	607b      	str	r3, [r7, #4]
 8011190:	e001      	b.n	8011196 <pbuf_free+0xe6>
      /* p->ref > 0, this pbuf is still referenced to */
      /* (and so the remaining pbufs in chain as well) */
    } else {
      LWIP_DEBUGF( PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_free: %p has ref %"U16_F", ending here.\n", (void *)p, (u16_t)ref));
      /* stop walking through the chain */
      p = NULL;
 8011192:	2300      	movs	r3, #0
 8011194:	607b      	str	r3, [r7, #4]
  while (p != NULL) {
 8011196:	687b      	ldr	r3, [r7, #4]
 8011198:	2b00      	cmp	r3, #0
 801119a:	d19f      	bne.n	80110dc <pbuf_free+0x2c>
    }
  }
  PERF_STOP("pbuf_free");
  /* return number of de-allocated pbufs */
  return count;
 801119c:	7dfb      	ldrb	r3, [r7, #23]
}
 801119e:	4618      	mov	r0, r3
 80111a0:	3718      	adds	r7, #24
 80111a2:	46bd      	mov	sp, r7
 80111a4:	bd80      	pop	{r7, pc}
 80111a6:	bf00      	nop
 80111a8:	0801cf84 	.word	0x0801cf84
 80111ac:	0801d0e8 	.word	0x0801d0e8
 80111b0:	0801cfe4 	.word	0x0801cfe4
 80111b4:	0801d114 	.word	0x0801d114
 80111b8:	0801d12c 	.word	0x0801d12c
 80111bc:	0801d150 	.word	0x0801d150

080111c0 <pbuf_clen>:
 * @param p first pbuf of chain
 * @return the number of pbufs in a chain
 */
u16_t
pbuf_clen(const struct pbuf *p)
{
 80111c0:	b480      	push	{r7}
 80111c2:	b085      	sub	sp, #20
 80111c4:	af00      	add	r7, sp, #0
 80111c6:	6078      	str	r0, [r7, #4]
  u16_t len;

  len = 0;
 80111c8:	2300      	movs	r3, #0
 80111ca:	81fb      	strh	r3, [r7, #14]
  while (p != NULL) {
 80111cc:	e005      	b.n	80111da <pbuf_clen+0x1a>
    ++len;
 80111ce:	89fb      	ldrh	r3, [r7, #14]
 80111d0:	3301      	adds	r3, #1
 80111d2:	81fb      	strh	r3, [r7, #14]
    p = p->next;
 80111d4:	687b      	ldr	r3, [r7, #4]
 80111d6:	681b      	ldr	r3, [r3, #0]
 80111d8:	607b      	str	r3, [r7, #4]
  while (p != NULL) {
 80111da:	687b      	ldr	r3, [r7, #4]
 80111dc:	2b00      	cmp	r3, #0
 80111de:	d1f6      	bne.n	80111ce <pbuf_clen+0xe>
  }
  return len;
 80111e0:	89fb      	ldrh	r3, [r7, #14]
}
 80111e2:	4618      	mov	r0, r3
 80111e4:	3714      	adds	r7, #20
 80111e6:	46bd      	mov	sp, r7
 80111e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80111ec:	4770      	bx	lr
	...

080111f0 <pbuf_ref>:
 * @param p pbuf to increase reference counter of
 *
 */
void
pbuf_ref(struct pbuf *p)
{
 80111f0:	b580      	push	{r7, lr}
 80111f2:	b082      	sub	sp, #8
 80111f4:	af00      	add	r7, sp, #0
 80111f6:	6078      	str	r0, [r7, #4]
  /* pbuf given? */
  if (p != NULL) {
 80111f8:	687b      	ldr	r3, [r7, #4]
 80111fa:	2b00      	cmp	r3, #0
 80111fc:	d010      	beq.n	8011220 <pbuf_ref+0x30>
    SYS_ARCH_SET(p->ref, (LWIP_PBUF_REF_T)(p->ref + 1));
 80111fe:	687b      	ldr	r3, [r7, #4]
 8011200:	7b9b      	ldrb	r3, [r3, #14]
 8011202:	3301      	adds	r3, #1
 8011204:	b2da      	uxtb	r2, r3
 8011206:	687b      	ldr	r3, [r7, #4]
 8011208:	739a      	strb	r2, [r3, #14]
    LWIP_ASSERT("pbuf ref overflow", p->ref > 0);
 801120a:	687b      	ldr	r3, [r7, #4]
 801120c:	7b9b      	ldrb	r3, [r3, #14]
 801120e:	2b00      	cmp	r3, #0
 8011210:	d106      	bne.n	8011220 <pbuf_ref+0x30>
 8011212:	4b05      	ldr	r3, [pc, #20]	; (8011228 <pbuf_ref+0x38>)
 8011214:	f240 3242 	movw	r2, #834	; 0x342
 8011218:	4904      	ldr	r1, [pc, #16]	; (801122c <pbuf_ref+0x3c>)
 801121a:	4805      	ldr	r0, [pc, #20]	; (8011230 <pbuf_ref+0x40>)
 801121c:	f008 fe20 	bl	8019e60 <iprintf>
  }
}
 8011220:	bf00      	nop
 8011222:	3708      	adds	r7, #8
 8011224:	46bd      	mov	sp, r7
 8011226:	bd80      	pop	{r7, pc}
 8011228:	0801cf84 	.word	0x0801cf84
 801122c:	0801d164 	.word	0x0801d164
 8011230:	0801cfe4 	.word	0x0801cfe4

08011234 <pbuf_cat>:
 *
 * @see pbuf_chain()
 */
void
pbuf_cat(struct pbuf *h, struct pbuf *t)
{
 8011234:	b580      	push	{r7, lr}
 8011236:	b084      	sub	sp, #16
 8011238:	af00      	add	r7, sp, #0
 801123a:	6078      	str	r0, [r7, #4]
 801123c:	6039      	str	r1, [r7, #0]
  struct pbuf *p;

  LWIP_ERROR("(h != NULL) && (t != NULL) (programmer violates API)",
 801123e:	687b      	ldr	r3, [r7, #4]
 8011240:	2b00      	cmp	r3, #0
 8011242:	d002      	beq.n	801124a <pbuf_cat+0x16>
 8011244:	683b      	ldr	r3, [r7, #0]
 8011246:	2b00      	cmp	r3, #0
 8011248:	d107      	bne.n	801125a <pbuf_cat+0x26>
 801124a:	4b20      	ldr	r3, [pc, #128]	; (80112cc <pbuf_cat+0x98>)
 801124c:	f240 3259 	movw	r2, #857	; 0x359
 8011250:	491f      	ldr	r1, [pc, #124]	; (80112d0 <pbuf_cat+0x9c>)
 8011252:	4820      	ldr	r0, [pc, #128]	; (80112d4 <pbuf_cat+0xa0>)
 8011254:	f008 fe04 	bl	8019e60 <iprintf>
 8011258:	e034      	b.n	80112c4 <pbuf_cat+0x90>
             ((h != NULL) && (t != NULL)), return;);

  /* proceed to last pbuf of chain */
  for (p = h; p->next != NULL; p = p->next) {
 801125a:	687b      	ldr	r3, [r7, #4]
 801125c:	60fb      	str	r3, [r7, #12]
 801125e:	e00a      	b.n	8011276 <pbuf_cat+0x42>
    /* add total length of second chain to all totals of first chain */
    p->tot_len = (u16_t)(p->tot_len + t->tot_len);
 8011260:	68fb      	ldr	r3, [r7, #12]
 8011262:	891a      	ldrh	r2, [r3, #8]
 8011264:	683b      	ldr	r3, [r7, #0]
 8011266:	891b      	ldrh	r3, [r3, #8]
 8011268:	4413      	add	r3, r2
 801126a:	b29a      	uxth	r2, r3
 801126c:	68fb      	ldr	r3, [r7, #12]
 801126e:	811a      	strh	r2, [r3, #8]
  for (p = h; p->next != NULL; p = p->next) {
 8011270:	68fb      	ldr	r3, [r7, #12]
 8011272:	681b      	ldr	r3, [r3, #0]
 8011274:	60fb      	str	r3, [r7, #12]
 8011276:	68fb      	ldr	r3, [r7, #12]
 8011278:	681b      	ldr	r3, [r3, #0]
 801127a:	2b00      	cmp	r3, #0
 801127c:	d1f0      	bne.n	8011260 <pbuf_cat+0x2c>
  }
  /* { p is last pbuf of first h chain, p->next == NULL } */
  LWIP_ASSERT("p->tot_len == p->len (of last pbuf in chain)", p->tot_len == p->len);
 801127e:	68fb      	ldr	r3, [r7, #12]
 8011280:	891a      	ldrh	r2, [r3, #8]
 8011282:	68fb      	ldr	r3, [r7, #12]
 8011284:	895b      	ldrh	r3, [r3, #10]
 8011286:	429a      	cmp	r2, r3
 8011288:	d006      	beq.n	8011298 <pbuf_cat+0x64>
 801128a:	4b10      	ldr	r3, [pc, #64]	; (80112cc <pbuf_cat+0x98>)
 801128c:	f240 3262 	movw	r2, #866	; 0x362
 8011290:	4911      	ldr	r1, [pc, #68]	; (80112d8 <pbuf_cat+0xa4>)
 8011292:	4810      	ldr	r0, [pc, #64]	; (80112d4 <pbuf_cat+0xa0>)
 8011294:	f008 fde4 	bl	8019e60 <iprintf>
  LWIP_ASSERT("p->next == NULL", p->next == NULL);
 8011298:	68fb      	ldr	r3, [r7, #12]
 801129a:	681b      	ldr	r3, [r3, #0]
 801129c:	2b00      	cmp	r3, #0
 801129e:	d006      	beq.n	80112ae <pbuf_cat+0x7a>
 80112a0:	4b0a      	ldr	r3, [pc, #40]	; (80112cc <pbuf_cat+0x98>)
 80112a2:	f240 3263 	movw	r2, #867	; 0x363
 80112a6:	490d      	ldr	r1, [pc, #52]	; (80112dc <pbuf_cat+0xa8>)
 80112a8:	480a      	ldr	r0, [pc, #40]	; (80112d4 <pbuf_cat+0xa0>)
 80112aa:	f008 fdd9 	bl	8019e60 <iprintf>
  /* add total length of second chain to last pbuf total of first chain */
  p->tot_len = (u16_t)(p->tot_len + t->tot_len);
 80112ae:	68fb      	ldr	r3, [r7, #12]
 80112b0:	891a      	ldrh	r2, [r3, #8]
 80112b2:	683b      	ldr	r3, [r7, #0]
 80112b4:	891b      	ldrh	r3, [r3, #8]
 80112b6:	4413      	add	r3, r2
 80112b8:	b29a      	uxth	r2, r3
 80112ba:	68fb      	ldr	r3, [r7, #12]
 80112bc:	811a      	strh	r2, [r3, #8]
  /* chain last pbuf of head (p) with first of tail (t) */
  p->next = t;
 80112be:	68fb      	ldr	r3, [r7, #12]
 80112c0:	683a      	ldr	r2, [r7, #0]
 80112c2:	601a      	str	r2, [r3, #0]
  /* p->next now references t, but the caller will drop its reference to t,
   * so netto there is no change to the reference count of t.
   */
}
 80112c4:	3710      	adds	r7, #16
 80112c6:	46bd      	mov	sp, r7
 80112c8:	bd80      	pop	{r7, pc}
 80112ca:	bf00      	nop
 80112cc:	0801cf84 	.word	0x0801cf84
 80112d0:	0801d178 	.word	0x0801d178
 80112d4:	0801cfe4 	.word	0x0801cfe4
 80112d8:	0801d1b0 	.word	0x0801d1b0
 80112dc:	0801d1e0 	.word	0x0801d1e0

080112e0 <pbuf_copy>:
 *         ERR_ARG if one of the pbufs is NULL or p_to is not big
 *                 enough to hold p_from
 */
err_t
pbuf_copy(struct pbuf *p_to, const struct pbuf *p_from)
{
 80112e0:	b580      	push	{r7, lr}
 80112e2:	b086      	sub	sp, #24
 80112e4:	af00      	add	r7, sp, #0
 80112e6:	6078      	str	r0, [r7, #4]
 80112e8:	6039      	str	r1, [r7, #0]
  size_t offset_to = 0, offset_from = 0, len;
 80112ea:	2300      	movs	r3, #0
 80112ec:	617b      	str	r3, [r7, #20]
 80112ee:	2300      	movs	r3, #0
 80112f0:	613b      	str	r3, [r7, #16]

  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_copy(%p, %p)\n",
              (const void *)p_to, (const void *)p_from));

  /* is the target big enough to hold the source? */
  LWIP_ERROR("pbuf_copy: target not big enough to hold source", ((p_to != NULL) &&
 80112f2:	687b      	ldr	r3, [r7, #4]
 80112f4:	2b00      	cmp	r3, #0
 80112f6:	d008      	beq.n	801130a <pbuf_copy+0x2a>
 80112f8:	683b      	ldr	r3, [r7, #0]
 80112fa:	2b00      	cmp	r3, #0
 80112fc:	d005      	beq.n	801130a <pbuf_copy+0x2a>
 80112fe:	687b      	ldr	r3, [r7, #4]
 8011300:	891a      	ldrh	r2, [r3, #8]
 8011302:	683b      	ldr	r3, [r7, #0]
 8011304:	891b      	ldrh	r3, [r3, #8]
 8011306:	429a      	cmp	r2, r3
 8011308:	d209      	bcs.n	801131e <pbuf_copy+0x3e>
 801130a:	4b57      	ldr	r3, [pc, #348]	; (8011468 <pbuf_copy+0x188>)
 801130c:	f240 32c9 	movw	r2, #969	; 0x3c9
 8011310:	4956      	ldr	r1, [pc, #344]	; (801146c <pbuf_copy+0x18c>)
 8011312:	4857      	ldr	r0, [pc, #348]	; (8011470 <pbuf_copy+0x190>)
 8011314:	f008 fda4 	bl	8019e60 <iprintf>
 8011318:	f06f 030f 	mvn.w	r3, #15
 801131c:	e09f      	b.n	801145e <pbuf_copy+0x17e>
             (p_from != NULL) && (p_to->tot_len >= p_from->tot_len)), return ERR_ARG;);

  /* iterate through pbuf chain */
  do {
    /* copy one part of the original chain */
    if ((p_to->len - offset_to) >= (p_from->len - offset_from)) {
 801131e:	687b      	ldr	r3, [r7, #4]
 8011320:	895b      	ldrh	r3, [r3, #10]
 8011322:	461a      	mov	r2, r3
 8011324:	697b      	ldr	r3, [r7, #20]
 8011326:	1ad2      	subs	r2, r2, r3
 8011328:	683b      	ldr	r3, [r7, #0]
 801132a:	895b      	ldrh	r3, [r3, #10]
 801132c:	4619      	mov	r1, r3
 801132e:	693b      	ldr	r3, [r7, #16]
 8011330:	1acb      	subs	r3, r1, r3
 8011332:	429a      	cmp	r2, r3
 8011334:	d306      	bcc.n	8011344 <pbuf_copy+0x64>
      /* complete current p_from fits into current p_to */
      len = p_from->len - offset_from;
 8011336:	683b      	ldr	r3, [r7, #0]
 8011338:	895b      	ldrh	r3, [r3, #10]
 801133a:	461a      	mov	r2, r3
 801133c:	693b      	ldr	r3, [r7, #16]
 801133e:	1ad3      	subs	r3, r2, r3
 8011340:	60fb      	str	r3, [r7, #12]
 8011342:	e005      	b.n	8011350 <pbuf_copy+0x70>
    } else {
      /* current p_from does not fit into current p_to */
      len = p_to->len - offset_to;
 8011344:	687b      	ldr	r3, [r7, #4]
 8011346:	895b      	ldrh	r3, [r3, #10]
 8011348:	461a      	mov	r2, r3
 801134a:	697b      	ldr	r3, [r7, #20]
 801134c:	1ad3      	subs	r3, r2, r3
 801134e:	60fb      	str	r3, [r7, #12]
    }
    MEMCPY((u8_t *)p_to->payload + offset_to, (u8_t *)p_from->payload + offset_from, len);
 8011350:	687b      	ldr	r3, [r7, #4]
 8011352:	685a      	ldr	r2, [r3, #4]
 8011354:	697b      	ldr	r3, [r7, #20]
 8011356:	18d0      	adds	r0, r2, r3
 8011358:	683b      	ldr	r3, [r7, #0]
 801135a:	685a      	ldr	r2, [r3, #4]
 801135c:	693b      	ldr	r3, [r7, #16]
 801135e:	4413      	add	r3, r2
 8011360:	68fa      	ldr	r2, [r7, #12]
 8011362:	4619      	mov	r1, r3
 8011364:	f008 ff4b 	bl	801a1fe <memcpy>
    offset_to += len;
 8011368:	697a      	ldr	r2, [r7, #20]
 801136a:	68fb      	ldr	r3, [r7, #12]
 801136c:	4413      	add	r3, r2
 801136e:	617b      	str	r3, [r7, #20]
    offset_from += len;
 8011370:	693a      	ldr	r2, [r7, #16]
 8011372:	68fb      	ldr	r3, [r7, #12]
 8011374:	4413      	add	r3, r2
 8011376:	613b      	str	r3, [r7, #16]
    LWIP_ASSERT("offset_to <= p_to->len", offset_to <= p_to->len);
 8011378:	687b      	ldr	r3, [r7, #4]
 801137a:	895b      	ldrh	r3, [r3, #10]
 801137c:	461a      	mov	r2, r3
 801137e:	697b      	ldr	r3, [r7, #20]
 8011380:	4293      	cmp	r3, r2
 8011382:	d906      	bls.n	8011392 <pbuf_copy+0xb2>
 8011384:	4b38      	ldr	r3, [pc, #224]	; (8011468 <pbuf_copy+0x188>)
 8011386:	f240 32d9 	movw	r2, #985	; 0x3d9
 801138a:	493a      	ldr	r1, [pc, #232]	; (8011474 <pbuf_copy+0x194>)
 801138c:	4838      	ldr	r0, [pc, #224]	; (8011470 <pbuf_copy+0x190>)
 801138e:	f008 fd67 	bl	8019e60 <iprintf>
    LWIP_ASSERT("offset_from <= p_from->len", offset_from <= p_from->len);
 8011392:	683b      	ldr	r3, [r7, #0]
 8011394:	895b      	ldrh	r3, [r3, #10]
 8011396:	461a      	mov	r2, r3
 8011398:	693b      	ldr	r3, [r7, #16]
 801139a:	4293      	cmp	r3, r2
 801139c:	d906      	bls.n	80113ac <pbuf_copy+0xcc>
 801139e:	4b32      	ldr	r3, [pc, #200]	; (8011468 <pbuf_copy+0x188>)
 80113a0:	f240 32da 	movw	r2, #986	; 0x3da
 80113a4:	4934      	ldr	r1, [pc, #208]	; (8011478 <pbuf_copy+0x198>)
 80113a6:	4832      	ldr	r0, [pc, #200]	; (8011470 <pbuf_copy+0x190>)
 80113a8:	f008 fd5a 	bl	8019e60 <iprintf>
    if (offset_from >= p_from->len) {
 80113ac:	683b      	ldr	r3, [r7, #0]
 80113ae:	895b      	ldrh	r3, [r3, #10]
 80113b0:	461a      	mov	r2, r3
 80113b2:	693b      	ldr	r3, [r7, #16]
 80113b4:	4293      	cmp	r3, r2
 80113b6:	d304      	bcc.n	80113c2 <pbuf_copy+0xe2>
      /* on to next p_from (if any) */
      offset_from = 0;
 80113b8:	2300      	movs	r3, #0
 80113ba:	613b      	str	r3, [r7, #16]
      p_from = p_from->next;
 80113bc:	683b      	ldr	r3, [r7, #0]
 80113be:	681b      	ldr	r3, [r3, #0]
 80113c0:	603b      	str	r3, [r7, #0]
    }
    if (offset_to == p_to->len) {
 80113c2:	687b      	ldr	r3, [r7, #4]
 80113c4:	895b      	ldrh	r3, [r3, #10]
 80113c6:	461a      	mov	r2, r3
 80113c8:	697b      	ldr	r3, [r7, #20]
 80113ca:	4293      	cmp	r3, r2
 80113cc:	d114      	bne.n	80113f8 <pbuf_copy+0x118>
      /* on to next p_to (if any) */
      offset_to = 0;
 80113ce:	2300      	movs	r3, #0
 80113d0:	617b      	str	r3, [r7, #20]
      p_to = p_to->next;
 80113d2:	687b      	ldr	r3, [r7, #4]
 80113d4:	681b      	ldr	r3, [r3, #0]
 80113d6:	607b      	str	r3, [r7, #4]
      LWIP_ERROR("p_to != NULL", (p_to != NULL) || (p_from == NULL), return ERR_ARG;);
 80113d8:	687b      	ldr	r3, [r7, #4]
 80113da:	2b00      	cmp	r3, #0
 80113dc:	d10c      	bne.n	80113f8 <pbuf_copy+0x118>
 80113de:	683b      	ldr	r3, [r7, #0]
 80113e0:	2b00      	cmp	r3, #0
 80113e2:	d009      	beq.n	80113f8 <pbuf_copy+0x118>
 80113e4:	4b20      	ldr	r3, [pc, #128]	; (8011468 <pbuf_copy+0x188>)
 80113e6:	f44f 7279 	mov.w	r2, #996	; 0x3e4
 80113ea:	4924      	ldr	r1, [pc, #144]	; (801147c <pbuf_copy+0x19c>)
 80113ec:	4820      	ldr	r0, [pc, #128]	; (8011470 <pbuf_copy+0x190>)
 80113ee:	f008 fd37 	bl	8019e60 <iprintf>
 80113f2:	f06f 030f 	mvn.w	r3, #15
 80113f6:	e032      	b.n	801145e <pbuf_copy+0x17e>
    }

    if ((p_from != NULL) && (p_from->len == p_from->tot_len)) {
 80113f8:	683b      	ldr	r3, [r7, #0]
 80113fa:	2b00      	cmp	r3, #0
 80113fc:	d013      	beq.n	8011426 <pbuf_copy+0x146>
 80113fe:	683b      	ldr	r3, [r7, #0]
 8011400:	895a      	ldrh	r2, [r3, #10]
 8011402:	683b      	ldr	r3, [r7, #0]
 8011404:	891b      	ldrh	r3, [r3, #8]
 8011406:	429a      	cmp	r2, r3
 8011408:	d10d      	bne.n	8011426 <pbuf_copy+0x146>
      /* don't copy more than one packet! */
      LWIP_ERROR("pbuf_copy() does not allow packet queues!",
 801140a:	683b      	ldr	r3, [r7, #0]
 801140c:	681b      	ldr	r3, [r3, #0]
 801140e:	2b00      	cmp	r3, #0
 8011410:	d009      	beq.n	8011426 <pbuf_copy+0x146>
 8011412:	4b15      	ldr	r3, [pc, #84]	; (8011468 <pbuf_copy+0x188>)
 8011414:	f240 32e9 	movw	r2, #1001	; 0x3e9
 8011418:	4919      	ldr	r1, [pc, #100]	; (8011480 <pbuf_copy+0x1a0>)
 801141a:	4815      	ldr	r0, [pc, #84]	; (8011470 <pbuf_copy+0x190>)
 801141c:	f008 fd20 	bl	8019e60 <iprintf>
 8011420:	f06f 0305 	mvn.w	r3, #5
 8011424:	e01b      	b.n	801145e <pbuf_copy+0x17e>
                 (p_from->next == NULL), return ERR_VAL;);
    }
    if ((p_to != NULL) && (p_to->len == p_to->tot_len)) {
 8011426:	687b      	ldr	r3, [r7, #4]
 8011428:	2b00      	cmp	r3, #0
 801142a:	d013      	beq.n	8011454 <pbuf_copy+0x174>
 801142c:	687b      	ldr	r3, [r7, #4]
 801142e:	895a      	ldrh	r2, [r3, #10]
 8011430:	687b      	ldr	r3, [r7, #4]
 8011432:	891b      	ldrh	r3, [r3, #8]
 8011434:	429a      	cmp	r2, r3
 8011436:	d10d      	bne.n	8011454 <pbuf_copy+0x174>
      /* don't copy more than one packet! */
      LWIP_ERROR("pbuf_copy() does not allow packet queues!",
 8011438:	687b      	ldr	r3, [r7, #4]
 801143a:	681b      	ldr	r3, [r3, #0]
 801143c:	2b00      	cmp	r3, #0
 801143e:	d009      	beq.n	8011454 <pbuf_copy+0x174>
 8011440:	4b09      	ldr	r3, [pc, #36]	; (8011468 <pbuf_copy+0x188>)
 8011442:	f240 32ee 	movw	r2, #1006	; 0x3ee
 8011446:	490e      	ldr	r1, [pc, #56]	; (8011480 <pbuf_copy+0x1a0>)
 8011448:	4809      	ldr	r0, [pc, #36]	; (8011470 <pbuf_copy+0x190>)
 801144a:	f008 fd09 	bl	8019e60 <iprintf>
 801144e:	f06f 0305 	mvn.w	r3, #5
 8011452:	e004      	b.n	801145e <pbuf_copy+0x17e>
                 (p_to->next == NULL), return ERR_VAL;);
    }
  } while (p_from);
 8011454:	683b      	ldr	r3, [r7, #0]
 8011456:	2b00      	cmp	r3, #0
 8011458:	f47f af61 	bne.w	801131e <pbuf_copy+0x3e>
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_copy: end of chain reached.\n"));
  return ERR_OK;
 801145c:	2300      	movs	r3, #0
}
 801145e:	4618      	mov	r0, r3
 8011460:	3718      	adds	r7, #24
 8011462:	46bd      	mov	sp, r7
 8011464:	bd80      	pop	{r7, pc}
 8011466:	bf00      	nop
 8011468:	0801cf84 	.word	0x0801cf84
 801146c:	0801d22c 	.word	0x0801d22c
 8011470:	0801cfe4 	.word	0x0801cfe4
 8011474:	0801d25c 	.word	0x0801d25c
 8011478:	0801d274 	.word	0x0801d274
 801147c:	0801d290 	.word	0x0801d290
 8011480:	0801d2a0 	.word	0x0801d2a0

08011484 <pbuf_copy_partial>:
 * @param offset offset into the packet buffer from where to begin copying len bytes
 * @return the number of bytes copied, or 0 on failure
 */
u16_t
pbuf_copy_partial(const struct pbuf *buf, void *dataptr, u16_t len, u16_t offset)
{
 8011484:	b580      	push	{r7, lr}
 8011486:	b088      	sub	sp, #32
 8011488:	af00      	add	r7, sp, #0
 801148a:	60f8      	str	r0, [r7, #12]
 801148c:	60b9      	str	r1, [r7, #8]
 801148e:	4611      	mov	r1, r2
 8011490:	461a      	mov	r2, r3
 8011492:	460b      	mov	r3, r1
 8011494:	80fb      	strh	r3, [r7, #6]
 8011496:	4613      	mov	r3, r2
 8011498:	80bb      	strh	r3, [r7, #4]
  const struct pbuf *p;
  u16_t left = 0;
 801149a:	2300      	movs	r3, #0
 801149c:	837b      	strh	r3, [r7, #26]
  u16_t buf_copy_len;
  u16_t copied_total = 0;
 801149e:	2300      	movs	r3, #0
 80114a0:	82fb      	strh	r3, [r7, #22]

  LWIP_ERROR("pbuf_copy_partial: invalid buf", (buf != NULL), return 0;);
 80114a2:	68fb      	ldr	r3, [r7, #12]
 80114a4:	2b00      	cmp	r3, #0
 80114a6:	d108      	bne.n	80114ba <pbuf_copy_partial+0x36>
 80114a8:	4b2b      	ldr	r3, [pc, #172]	; (8011558 <pbuf_copy_partial+0xd4>)
 80114aa:	f240 420a 	movw	r2, #1034	; 0x40a
 80114ae:	492b      	ldr	r1, [pc, #172]	; (801155c <pbuf_copy_partial+0xd8>)
 80114b0:	482b      	ldr	r0, [pc, #172]	; (8011560 <pbuf_copy_partial+0xdc>)
 80114b2:	f008 fcd5 	bl	8019e60 <iprintf>
 80114b6:	2300      	movs	r3, #0
 80114b8:	e04a      	b.n	8011550 <pbuf_copy_partial+0xcc>
  LWIP_ERROR("pbuf_copy_partial: invalid dataptr", (dataptr != NULL), return 0;);
 80114ba:	68bb      	ldr	r3, [r7, #8]
 80114bc:	2b00      	cmp	r3, #0
 80114be:	d108      	bne.n	80114d2 <pbuf_copy_partial+0x4e>
 80114c0:	4b25      	ldr	r3, [pc, #148]	; (8011558 <pbuf_copy_partial+0xd4>)
 80114c2:	f240 420b 	movw	r2, #1035	; 0x40b
 80114c6:	4927      	ldr	r1, [pc, #156]	; (8011564 <pbuf_copy_partial+0xe0>)
 80114c8:	4825      	ldr	r0, [pc, #148]	; (8011560 <pbuf_copy_partial+0xdc>)
 80114ca:	f008 fcc9 	bl	8019e60 <iprintf>
 80114ce:	2300      	movs	r3, #0
 80114d0:	e03e      	b.n	8011550 <pbuf_copy_partial+0xcc>

  /* Note some systems use byte copy if dataptr or one of the pbuf payload pointers are unaligned. */
  for (p = buf; len != 0 && p != NULL; p = p->next) {
 80114d2:	68fb      	ldr	r3, [r7, #12]
 80114d4:	61fb      	str	r3, [r7, #28]
 80114d6:	e034      	b.n	8011542 <pbuf_copy_partial+0xbe>
    if ((offset != 0) && (offset >= p->len)) {
 80114d8:	88bb      	ldrh	r3, [r7, #4]
 80114da:	2b00      	cmp	r3, #0
 80114dc:	d00a      	beq.n	80114f4 <pbuf_copy_partial+0x70>
 80114de:	69fb      	ldr	r3, [r7, #28]
 80114e0:	895b      	ldrh	r3, [r3, #10]
 80114e2:	88ba      	ldrh	r2, [r7, #4]
 80114e4:	429a      	cmp	r2, r3
 80114e6:	d305      	bcc.n	80114f4 <pbuf_copy_partial+0x70>
      /* don't copy from this buffer -> on to the next */
      offset = (u16_t)(offset - p->len);
 80114e8:	69fb      	ldr	r3, [r7, #28]
 80114ea:	895b      	ldrh	r3, [r3, #10]
 80114ec:	88ba      	ldrh	r2, [r7, #4]
 80114ee:	1ad3      	subs	r3, r2, r3
 80114f0:	80bb      	strh	r3, [r7, #4]
 80114f2:	e023      	b.n	801153c <pbuf_copy_partial+0xb8>
    } else {
      /* copy from this buffer. maybe only partially. */
      buf_copy_len = (u16_t)(p->len - offset);
 80114f4:	69fb      	ldr	r3, [r7, #28]
 80114f6:	895a      	ldrh	r2, [r3, #10]
 80114f8:	88bb      	ldrh	r3, [r7, #4]
 80114fa:	1ad3      	subs	r3, r2, r3
 80114fc:	833b      	strh	r3, [r7, #24]
      if (buf_copy_len > len) {
 80114fe:	8b3a      	ldrh	r2, [r7, #24]
 8011500:	88fb      	ldrh	r3, [r7, #6]
 8011502:	429a      	cmp	r2, r3
 8011504:	d901      	bls.n	801150a <pbuf_copy_partial+0x86>
        buf_copy_len = len;
 8011506:	88fb      	ldrh	r3, [r7, #6]
 8011508:	833b      	strh	r3, [r7, #24]
      }
      /* copy the necessary parts of the buffer */
      MEMCPY(&((char *)dataptr)[left], &((char *)p->payload)[offset], buf_copy_len);
 801150a:	8b7b      	ldrh	r3, [r7, #26]
 801150c:	68ba      	ldr	r2, [r7, #8]
 801150e:	18d0      	adds	r0, r2, r3
 8011510:	69fb      	ldr	r3, [r7, #28]
 8011512:	685a      	ldr	r2, [r3, #4]
 8011514:	88bb      	ldrh	r3, [r7, #4]
 8011516:	4413      	add	r3, r2
 8011518:	8b3a      	ldrh	r2, [r7, #24]
 801151a:	4619      	mov	r1, r3
 801151c:	f008 fe6f 	bl	801a1fe <memcpy>
      copied_total = (u16_t)(copied_total + buf_copy_len);
 8011520:	8afa      	ldrh	r2, [r7, #22]
 8011522:	8b3b      	ldrh	r3, [r7, #24]
 8011524:	4413      	add	r3, r2
 8011526:	82fb      	strh	r3, [r7, #22]
      left = (u16_t)(left + buf_copy_len);
 8011528:	8b7a      	ldrh	r2, [r7, #26]
 801152a:	8b3b      	ldrh	r3, [r7, #24]
 801152c:	4413      	add	r3, r2
 801152e:	837b      	strh	r3, [r7, #26]
      len = (u16_t)(len - buf_copy_len);
 8011530:	88fa      	ldrh	r2, [r7, #6]
 8011532:	8b3b      	ldrh	r3, [r7, #24]
 8011534:	1ad3      	subs	r3, r2, r3
 8011536:	80fb      	strh	r3, [r7, #6]
      offset = 0;
 8011538:	2300      	movs	r3, #0
 801153a:	80bb      	strh	r3, [r7, #4]
  for (p = buf; len != 0 && p != NULL; p = p->next) {
 801153c:	69fb      	ldr	r3, [r7, #28]
 801153e:	681b      	ldr	r3, [r3, #0]
 8011540:	61fb      	str	r3, [r7, #28]
 8011542:	88fb      	ldrh	r3, [r7, #6]
 8011544:	2b00      	cmp	r3, #0
 8011546:	d002      	beq.n	801154e <pbuf_copy_partial+0xca>
 8011548:	69fb      	ldr	r3, [r7, #28]
 801154a:	2b00      	cmp	r3, #0
 801154c:	d1c4      	bne.n	80114d8 <pbuf_copy_partial+0x54>
    }
  }
  return copied_total;
 801154e:	8afb      	ldrh	r3, [r7, #22]
}
 8011550:	4618      	mov	r0, r3
 8011552:	3720      	adds	r7, #32
 8011554:	46bd      	mov	sp, r7
 8011556:	bd80      	pop	{r7, pc}
 8011558:	0801cf84 	.word	0x0801cf84
 801155c:	0801d2cc 	.word	0x0801d2cc
 8011560:	0801cfe4 	.word	0x0801cfe4
 8011564:	0801d2ec 	.word	0x0801d2ec

08011568 <pbuf_clone>:
 *
 * @return a new pbuf or NULL if allocation fails
 */
struct pbuf *
pbuf_clone(pbuf_layer layer, pbuf_type type, struct pbuf *p)
{
 8011568:	b580      	push	{r7, lr}
 801156a:	b084      	sub	sp, #16
 801156c:	af00      	add	r7, sp, #0
 801156e:	4603      	mov	r3, r0
 8011570:	603a      	str	r2, [r7, #0]
 8011572:	71fb      	strb	r3, [r7, #7]
 8011574:	460b      	mov	r3, r1
 8011576:	80bb      	strh	r3, [r7, #4]
  struct pbuf *q;
  err_t err;
  q = pbuf_alloc(layer, p->tot_len, type);
 8011578:	683b      	ldr	r3, [r7, #0]
 801157a:	8919      	ldrh	r1, [r3, #8]
 801157c:	88ba      	ldrh	r2, [r7, #4]
 801157e:	79fb      	ldrb	r3, [r7, #7]
 8011580:	4618      	mov	r0, r3
 8011582:	f7ff fab1 	bl	8010ae8 <pbuf_alloc>
 8011586:	60f8      	str	r0, [r7, #12]
  if (q == NULL) {
 8011588:	68fb      	ldr	r3, [r7, #12]
 801158a:	2b00      	cmp	r3, #0
 801158c:	d101      	bne.n	8011592 <pbuf_clone+0x2a>
    return NULL;
 801158e:	2300      	movs	r3, #0
 8011590:	e011      	b.n	80115b6 <pbuf_clone+0x4e>
  }
  err = pbuf_copy(q, p);
 8011592:	6839      	ldr	r1, [r7, #0]
 8011594:	68f8      	ldr	r0, [r7, #12]
 8011596:	f7ff fea3 	bl	80112e0 <pbuf_copy>
 801159a:	4603      	mov	r3, r0
 801159c:	72fb      	strb	r3, [r7, #11]
  LWIP_UNUSED_ARG(err); /* in case of LWIP_NOASSERT */
  LWIP_ASSERT("pbuf_copy failed", err == ERR_OK);
 801159e:	f997 300b 	ldrsb.w	r3, [r7, #11]
 80115a2:	2b00      	cmp	r3, #0
 80115a4:	d006      	beq.n	80115b4 <pbuf_clone+0x4c>
 80115a6:	4b06      	ldr	r3, [pc, #24]	; (80115c0 <pbuf_clone+0x58>)
 80115a8:	f240 5224 	movw	r2, #1316	; 0x524
 80115ac:	4905      	ldr	r1, [pc, #20]	; (80115c4 <pbuf_clone+0x5c>)
 80115ae:	4806      	ldr	r0, [pc, #24]	; (80115c8 <pbuf_clone+0x60>)
 80115b0:	f008 fc56 	bl	8019e60 <iprintf>
  return q;
 80115b4:	68fb      	ldr	r3, [r7, #12]
}
 80115b6:	4618      	mov	r0, r3
 80115b8:	3710      	adds	r7, #16
 80115ba:	46bd      	mov	sp, r7
 80115bc:	bd80      	pop	{r7, pc}
 80115be:	bf00      	nop
 80115c0:	0801cf84 	.word	0x0801cf84
 80115c4:	0801d3f8 	.word	0x0801d3f8
 80115c8:	0801cfe4 	.word	0x0801cfe4

080115cc <tcp_init>:
/**
 * Initialize this module.
 */
void
tcp_init(void)
{
 80115cc:	b580      	push	{r7, lr}
 80115ce:	af00      	add	r7, sp, #0
#ifdef LWIP_RAND
  tcp_port = TCP_ENSURE_LOCAL_PORT_RANGE(LWIP_RAND());
 80115d0:	f007 ff0a 	bl	80193e8 <rand>
 80115d4:	4603      	mov	r3, r0
 80115d6:	b29b      	uxth	r3, r3
 80115d8:	f3c3 030d 	ubfx	r3, r3, #0, #14
 80115dc:	b29b      	uxth	r3, r3
 80115de:	f5a3 4380 	sub.w	r3, r3, #16384	; 0x4000
 80115e2:	b29a      	uxth	r2, r3
 80115e4:	4b01      	ldr	r3, [pc, #4]	; (80115ec <tcp_init+0x20>)
 80115e6:	801a      	strh	r2, [r3, #0]
#endif /* LWIP_RAND */
}
 80115e8:	bf00      	nop
 80115ea:	bd80      	pop	{r7, pc}
 80115ec:	20000058 	.word	0x20000058

080115f0 <tcp_free>:

/** Free a tcp pcb */
void
tcp_free(struct tcp_pcb *pcb)
{
 80115f0:	b580      	push	{r7, lr}
 80115f2:	b082      	sub	sp, #8
 80115f4:	af00      	add	r7, sp, #0
 80115f6:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_free: LISTEN", pcb->state != LISTEN);
 80115f8:	687b      	ldr	r3, [r7, #4]
 80115fa:	7d1b      	ldrb	r3, [r3, #20]
 80115fc:	2b01      	cmp	r3, #1
 80115fe:	d105      	bne.n	801160c <tcp_free+0x1c>
 8011600:	4b06      	ldr	r3, [pc, #24]	; (801161c <tcp_free+0x2c>)
 8011602:	22d4      	movs	r2, #212	; 0xd4
 8011604:	4906      	ldr	r1, [pc, #24]	; (8011620 <tcp_free+0x30>)
 8011606:	4807      	ldr	r0, [pc, #28]	; (8011624 <tcp_free+0x34>)
 8011608:	f008 fc2a 	bl	8019e60 <iprintf>
#if LWIP_TCP_PCB_NUM_EXT_ARGS
  tcp_ext_arg_invoke_callbacks_destroyed(pcb->ext_args);
#endif
  memp_free(MEMP_TCP_PCB, pcb);
 801160c:	6879      	ldr	r1, [r7, #4]
 801160e:	2001      	movs	r0, #1
 8011610:	f7fe fef8 	bl	8010404 <memp_free>
}
 8011614:	bf00      	nop
 8011616:	3708      	adds	r7, #8
 8011618:	46bd      	mov	sp, r7
 801161a:	bd80      	pop	{r7, pc}
 801161c:	0801d484 	.word	0x0801d484
 8011620:	0801d4b4 	.word	0x0801d4b4
 8011624:	0801d4c8 	.word	0x0801d4c8

08011628 <tcp_free_listen>:

/** Free a tcp listen pcb */
static void
tcp_free_listen(struct tcp_pcb *pcb)
{
 8011628:	b580      	push	{r7, lr}
 801162a:	b082      	sub	sp, #8
 801162c:	af00      	add	r7, sp, #0
 801162e:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_free_listen: !LISTEN", pcb->state != LISTEN);
 8011630:	687b      	ldr	r3, [r7, #4]
 8011632:	7d1b      	ldrb	r3, [r3, #20]
 8011634:	2b01      	cmp	r3, #1
 8011636:	d105      	bne.n	8011644 <tcp_free_listen+0x1c>
 8011638:	4b06      	ldr	r3, [pc, #24]	; (8011654 <tcp_free_listen+0x2c>)
 801163a:	22df      	movs	r2, #223	; 0xdf
 801163c:	4906      	ldr	r1, [pc, #24]	; (8011658 <tcp_free_listen+0x30>)
 801163e:	4807      	ldr	r0, [pc, #28]	; (801165c <tcp_free_listen+0x34>)
 8011640:	f008 fc0e 	bl	8019e60 <iprintf>
#if LWIP_TCP_PCB_NUM_EXT_ARGS
  tcp_ext_arg_invoke_callbacks_destroyed(pcb->ext_args);
#endif
  memp_free(MEMP_TCP_PCB_LISTEN, pcb);
 8011644:	6879      	ldr	r1, [r7, #4]
 8011646:	2002      	movs	r0, #2
 8011648:	f7fe fedc 	bl	8010404 <memp_free>
}
 801164c:	bf00      	nop
 801164e:	3708      	adds	r7, #8
 8011650:	46bd      	mov	sp, r7
 8011652:	bd80      	pop	{r7, pc}
 8011654:	0801d484 	.word	0x0801d484
 8011658:	0801d4f0 	.word	0x0801d4f0
 801165c:	0801d4c8 	.word	0x0801d4c8

08011660 <tcp_tmr>:
/**
 * Called periodically to dispatch TCP timers.
 */
void
tcp_tmr(void)
{
 8011660:	b580      	push	{r7, lr}
 8011662:	af00      	add	r7, sp, #0
  /* Call tcp_fasttmr() every 250 ms */
  tcp_fasttmr();
 8011664:	f000 fea4 	bl	80123b0 <tcp_fasttmr>

  if (++tcp_timer & 1) {
 8011668:	4b07      	ldr	r3, [pc, #28]	; (8011688 <tcp_tmr+0x28>)
 801166a:	781b      	ldrb	r3, [r3, #0]
 801166c:	3301      	adds	r3, #1
 801166e:	b2da      	uxtb	r2, r3
 8011670:	4b05      	ldr	r3, [pc, #20]	; (8011688 <tcp_tmr+0x28>)
 8011672:	701a      	strb	r2, [r3, #0]
 8011674:	4b04      	ldr	r3, [pc, #16]	; (8011688 <tcp_tmr+0x28>)
 8011676:	781b      	ldrb	r3, [r3, #0]
 8011678:	f003 0301 	and.w	r3, r3, #1
 801167c:	2b00      	cmp	r3, #0
 801167e:	d001      	beq.n	8011684 <tcp_tmr+0x24>
    /* Call tcp_slowtmr() every 500 ms, i.e., every other timer
       tcp_tmr() is called. */
    tcp_slowtmr();
 8011680:	f000 fb56 	bl	8011d30 <tcp_slowtmr>
  }
}
 8011684:	bf00      	nop
 8011686:	bd80      	pop	{r7, pc}
 8011688:	200070e9 	.word	0x200070e9

0801168c <tcp_remove_listener>:
/** Called when a listen pcb is closed. Iterates one pcb list and removes the
 * closed listener pcb from pcb->listener if matching.
 */
static void
tcp_remove_listener(struct tcp_pcb *list, struct tcp_pcb_listen *lpcb)
{
 801168c:	b580      	push	{r7, lr}
 801168e:	b084      	sub	sp, #16
 8011690:	af00      	add	r7, sp, #0
 8011692:	6078      	str	r0, [r7, #4]
 8011694:	6039      	str	r1, [r7, #0]
  struct tcp_pcb *pcb;

  LWIP_ASSERT("tcp_remove_listener: invalid listener", lpcb != NULL);
 8011696:	683b      	ldr	r3, [r7, #0]
 8011698:	2b00      	cmp	r3, #0
 801169a:	d105      	bne.n	80116a8 <tcp_remove_listener+0x1c>
 801169c:	4b0d      	ldr	r3, [pc, #52]	; (80116d4 <tcp_remove_listener+0x48>)
 801169e:	22ff      	movs	r2, #255	; 0xff
 80116a0:	490d      	ldr	r1, [pc, #52]	; (80116d8 <tcp_remove_listener+0x4c>)
 80116a2:	480e      	ldr	r0, [pc, #56]	; (80116dc <tcp_remove_listener+0x50>)
 80116a4:	f008 fbdc 	bl	8019e60 <iprintf>

  for (pcb = list; pcb != NULL; pcb = pcb->next) {
 80116a8:	687b      	ldr	r3, [r7, #4]
 80116aa:	60fb      	str	r3, [r7, #12]
 80116ac:	e00a      	b.n	80116c4 <tcp_remove_listener+0x38>
    if (pcb->listener == lpcb) {
 80116ae:	68fb      	ldr	r3, [r7, #12]
 80116b0:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80116b2:	683a      	ldr	r2, [r7, #0]
 80116b4:	429a      	cmp	r2, r3
 80116b6:	d102      	bne.n	80116be <tcp_remove_listener+0x32>
      pcb->listener = NULL;
 80116b8:	68fb      	ldr	r3, [r7, #12]
 80116ba:	2200      	movs	r2, #0
 80116bc:	67da      	str	r2, [r3, #124]	; 0x7c
  for (pcb = list; pcb != NULL; pcb = pcb->next) {
 80116be:	68fb      	ldr	r3, [r7, #12]
 80116c0:	68db      	ldr	r3, [r3, #12]
 80116c2:	60fb      	str	r3, [r7, #12]
 80116c4:	68fb      	ldr	r3, [r7, #12]
 80116c6:	2b00      	cmp	r3, #0
 80116c8:	d1f1      	bne.n	80116ae <tcp_remove_listener+0x22>
    }
  }
}
 80116ca:	bf00      	nop
 80116cc:	bf00      	nop
 80116ce:	3710      	adds	r7, #16
 80116d0:	46bd      	mov	sp, r7
 80116d2:	bd80      	pop	{r7, pc}
 80116d4:	0801d484 	.word	0x0801d484
 80116d8:	0801d50c 	.word	0x0801d50c
 80116dc:	0801d4c8 	.word	0x0801d4c8

080116e0 <tcp_listen_closed>:
/** Called when a listen pcb is closed. Iterates all pcb lists and removes the
 * closed listener pcb from pcb->listener if matching.
 */
static void
tcp_listen_closed(struct tcp_pcb *pcb)
{
 80116e0:	b580      	push	{r7, lr}
 80116e2:	b084      	sub	sp, #16
 80116e4:	af00      	add	r7, sp, #0
 80116e6:	6078      	str	r0, [r7, #4]
#if LWIP_CALLBACK_API || TCP_LISTEN_BACKLOG
  size_t i;
  LWIP_ASSERT("pcb != NULL", pcb != NULL);
 80116e8:	687b      	ldr	r3, [r7, #4]
 80116ea:	2b00      	cmp	r3, #0
 80116ec:	d106      	bne.n	80116fc <tcp_listen_closed+0x1c>
 80116ee:	4b14      	ldr	r3, [pc, #80]	; (8011740 <tcp_listen_closed+0x60>)
 80116f0:	f240 1211 	movw	r2, #273	; 0x111
 80116f4:	4913      	ldr	r1, [pc, #76]	; (8011744 <tcp_listen_closed+0x64>)
 80116f6:	4814      	ldr	r0, [pc, #80]	; (8011748 <tcp_listen_closed+0x68>)
 80116f8:	f008 fbb2 	bl	8019e60 <iprintf>
  LWIP_ASSERT("pcb->state == LISTEN", pcb->state == LISTEN);
 80116fc:	687b      	ldr	r3, [r7, #4]
 80116fe:	7d1b      	ldrb	r3, [r3, #20]
 8011700:	2b01      	cmp	r3, #1
 8011702:	d006      	beq.n	8011712 <tcp_listen_closed+0x32>
 8011704:	4b0e      	ldr	r3, [pc, #56]	; (8011740 <tcp_listen_closed+0x60>)
 8011706:	f44f 7289 	mov.w	r2, #274	; 0x112
 801170a:	4910      	ldr	r1, [pc, #64]	; (801174c <tcp_listen_closed+0x6c>)
 801170c:	480e      	ldr	r0, [pc, #56]	; (8011748 <tcp_listen_closed+0x68>)
 801170e:	f008 fba7 	bl	8019e60 <iprintf>
  for (i = 1; i < LWIP_ARRAYSIZE(tcp_pcb_lists); i++) {
 8011712:	2301      	movs	r3, #1
 8011714:	60fb      	str	r3, [r7, #12]
 8011716:	e00b      	b.n	8011730 <tcp_listen_closed+0x50>
    tcp_remove_listener(*tcp_pcb_lists[i], (struct tcp_pcb_listen *)pcb);
 8011718:	4a0d      	ldr	r2, [pc, #52]	; (8011750 <tcp_listen_closed+0x70>)
 801171a:	68fb      	ldr	r3, [r7, #12]
 801171c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8011720:	681b      	ldr	r3, [r3, #0]
 8011722:	6879      	ldr	r1, [r7, #4]
 8011724:	4618      	mov	r0, r3
 8011726:	f7ff ffb1 	bl	801168c <tcp_remove_listener>
  for (i = 1; i < LWIP_ARRAYSIZE(tcp_pcb_lists); i++) {
 801172a:	68fb      	ldr	r3, [r7, #12]
 801172c:	3301      	adds	r3, #1
 801172e:	60fb      	str	r3, [r7, #12]
 8011730:	68fb      	ldr	r3, [r7, #12]
 8011732:	2b03      	cmp	r3, #3
 8011734:	d9f0      	bls.n	8011718 <tcp_listen_closed+0x38>
  }
#endif
  LWIP_UNUSED_ARG(pcb);
}
 8011736:	bf00      	nop
 8011738:	bf00      	nop
 801173a:	3710      	adds	r7, #16
 801173c:	46bd      	mov	sp, r7
 801173e:	bd80      	pop	{r7, pc}
 8011740:	0801d484 	.word	0x0801d484
 8011744:	0801d534 	.word	0x0801d534
 8011748:	0801d4c8 	.word	0x0801d4c8
 801174c:	0801d540 	.word	0x0801d540
 8011750:	0801f4a4 	.word	0x0801f4a4

08011754 <tcp_close_shutdown>:
 * @return ERR_OK if connection has been closed
 *         another err_t if closing failed and pcb is not freed
 */
static err_t
tcp_close_shutdown(struct tcp_pcb *pcb, u8_t rst_on_unacked_data)
{
 8011754:	b5b0      	push	{r4, r5, r7, lr}
 8011756:	b088      	sub	sp, #32
 8011758:	af04      	add	r7, sp, #16
 801175a:	6078      	str	r0, [r7, #4]
 801175c:	460b      	mov	r3, r1
 801175e:	70fb      	strb	r3, [r7, #3]
  LWIP_ASSERT("tcp_close_shutdown: invalid pcb", pcb != NULL);
 8011760:	687b      	ldr	r3, [r7, #4]
 8011762:	2b00      	cmp	r3, #0
 8011764:	d106      	bne.n	8011774 <tcp_close_shutdown+0x20>
 8011766:	4b63      	ldr	r3, [pc, #396]	; (80118f4 <tcp_close_shutdown+0x1a0>)
 8011768:	f44f 72af 	mov.w	r2, #350	; 0x15e
 801176c:	4962      	ldr	r1, [pc, #392]	; (80118f8 <tcp_close_shutdown+0x1a4>)
 801176e:	4863      	ldr	r0, [pc, #396]	; (80118fc <tcp_close_shutdown+0x1a8>)
 8011770:	f008 fb76 	bl	8019e60 <iprintf>

  if (rst_on_unacked_data && ((pcb->state == ESTABLISHED) || (pcb->state == CLOSE_WAIT))) {
 8011774:	78fb      	ldrb	r3, [r7, #3]
 8011776:	2b00      	cmp	r3, #0
 8011778:	d067      	beq.n	801184a <tcp_close_shutdown+0xf6>
 801177a:	687b      	ldr	r3, [r7, #4]
 801177c:	7d1b      	ldrb	r3, [r3, #20]
 801177e:	2b04      	cmp	r3, #4
 8011780:	d003      	beq.n	801178a <tcp_close_shutdown+0x36>
 8011782:	687b      	ldr	r3, [r7, #4]
 8011784:	7d1b      	ldrb	r3, [r3, #20]
 8011786:	2b07      	cmp	r3, #7
 8011788:	d15f      	bne.n	801184a <tcp_close_shutdown+0xf6>
    if ((pcb->refused_data != NULL) || (pcb->rcv_wnd != TCP_WND_MAX(pcb))) {
 801178a:	687b      	ldr	r3, [r7, #4]
 801178c:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 801178e:	2b00      	cmp	r3, #0
 8011790:	d105      	bne.n	801179e <tcp_close_shutdown+0x4a>
 8011792:	687b      	ldr	r3, [r7, #4]
 8011794:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8011796:	f241 62d0 	movw	r2, #5840	; 0x16d0
 801179a:	4293      	cmp	r3, r2
 801179c:	d055      	beq.n	801184a <tcp_close_shutdown+0xf6>
      /* Not all data received by application, send RST to tell the remote
         side about this. */
      LWIP_ASSERT("pcb->flags & TF_RXCLOSED", pcb->flags & TF_RXCLOSED);
 801179e:	687b      	ldr	r3, [r7, #4]
 80117a0:	8b5b      	ldrh	r3, [r3, #26]
 80117a2:	f003 0310 	and.w	r3, r3, #16
 80117a6:	2b00      	cmp	r3, #0
 80117a8:	d106      	bne.n	80117b8 <tcp_close_shutdown+0x64>
 80117aa:	4b52      	ldr	r3, [pc, #328]	; (80118f4 <tcp_close_shutdown+0x1a0>)
 80117ac:	f44f 72b2 	mov.w	r2, #356	; 0x164
 80117b0:	4953      	ldr	r1, [pc, #332]	; (8011900 <tcp_close_shutdown+0x1ac>)
 80117b2:	4852      	ldr	r0, [pc, #328]	; (80118fc <tcp_close_shutdown+0x1a8>)
 80117b4:	f008 fb54 	bl	8019e60 <iprintf>

      /* don't call tcp_abort here: we must not deallocate the pcb since
         that might not be expected when calling tcp_close */
      tcp_rst(pcb, pcb->snd_nxt, pcb->rcv_nxt, &pcb->local_ip, &pcb->remote_ip,
 80117b8:	687b      	ldr	r3, [r7, #4]
 80117ba:	6d18      	ldr	r0, [r3, #80]	; 0x50
 80117bc:	687b      	ldr	r3, [r7, #4]
 80117be:	6a5c      	ldr	r4, [r3, #36]	; 0x24
 80117c0:	687d      	ldr	r5, [r7, #4]
 80117c2:	687b      	ldr	r3, [r7, #4]
 80117c4:	3304      	adds	r3, #4
 80117c6:	687a      	ldr	r2, [r7, #4]
 80117c8:	8ad2      	ldrh	r2, [r2, #22]
 80117ca:	6879      	ldr	r1, [r7, #4]
 80117cc:	8b09      	ldrh	r1, [r1, #24]
 80117ce:	9102      	str	r1, [sp, #8]
 80117d0:	9201      	str	r2, [sp, #4]
 80117d2:	9300      	str	r3, [sp, #0]
 80117d4:	462b      	mov	r3, r5
 80117d6:	4622      	mov	r2, r4
 80117d8:	4601      	mov	r1, r0
 80117da:	6878      	ldr	r0, [r7, #4]
 80117dc:	f004 fe94 	bl	8016508 <tcp_rst>
              pcb->local_port, pcb->remote_port);

      tcp_pcb_purge(pcb);
 80117e0:	6878      	ldr	r0, [r7, #4]
 80117e2:	f001 f8c9 	bl	8012978 <tcp_pcb_purge>
      TCP_RMV_ACTIVE(pcb);
 80117e6:	4b47      	ldr	r3, [pc, #284]	; (8011904 <tcp_close_shutdown+0x1b0>)
 80117e8:	681b      	ldr	r3, [r3, #0]
 80117ea:	687a      	ldr	r2, [r7, #4]
 80117ec:	429a      	cmp	r2, r3
 80117ee:	d105      	bne.n	80117fc <tcp_close_shutdown+0xa8>
 80117f0:	4b44      	ldr	r3, [pc, #272]	; (8011904 <tcp_close_shutdown+0x1b0>)
 80117f2:	681b      	ldr	r3, [r3, #0]
 80117f4:	68db      	ldr	r3, [r3, #12]
 80117f6:	4a43      	ldr	r2, [pc, #268]	; (8011904 <tcp_close_shutdown+0x1b0>)
 80117f8:	6013      	str	r3, [r2, #0]
 80117fa:	e013      	b.n	8011824 <tcp_close_shutdown+0xd0>
 80117fc:	4b41      	ldr	r3, [pc, #260]	; (8011904 <tcp_close_shutdown+0x1b0>)
 80117fe:	681b      	ldr	r3, [r3, #0]
 8011800:	60fb      	str	r3, [r7, #12]
 8011802:	e00c      	b.n	801181e <tcp_close_shutdown+0xca>
 8011804:	68fb      	ldr	r3, [r7, #12]
 8011806:	68db      	ldr	r3, [r3, #12]
 8011808:	687a      	ldr	r2, [r7, #4]
 801180a:	429a      	cmp	r2, r3
 801180c:	d104      	bne.n	8011818 <tcp_close_shutdown+0xc4>
 801180e:	687b      	ldr	r3, [r7, #4]
 8011810:	68da      	ldr	r2, [r3, #12]
 8011812:	68fb      	ldr	r3, [r7, #12]
 8011814:	60da      	str	r2, [r3, #12]
 8011816:	e005      	b.n	8011824 <tcp_close_shutdown+0xd0>
 8011818:	68fb      	ldr	r3, [r7, #12]
 801181a:	68db      	ldr	r3, [r3, #12]
 801181c:	60fb      	str	r3, [r7, #12]
 801181e:	68fb      	ldr	r3, [r7, #12]
 8011820:	2b00      	cmp	r3, #0
 8011822:	d1ef      	bne.n	8011804 <tcp_close_shutdown+0xb0>
 8011824:	687b      	ldr	r3, [r7, #4]
 8011826:	2200      	movs	r2, #0
 8011828:	60da      	str	r2, [r3, #12]
 801182a:	4b37      	ldr	r3, [pc, #220]	; (8011908 <tcp_close_shutdown+0x1b4>)
 801182c:	2201      	movs	r2, #1
 801182e:	701a      	strb	r2, [r3, #0]
      /* Deallocate the pcb since we already sent a RST for it */
      if (tcp_input_pcb == pcb) {
 8011830:	4b36      	ldr	r3, [pc, #216]	; (801190c <tcp_close_shutdown+0x1b8>)
 8011832:	681b      	ldr	r3, [r3, #0]
 8011834:	687a      	ldr	r2, [r7, #4]
 8011836:	429a      	cmp	r2, r3
 8011838:	d102      	bne.n	8011840 <tcp_close_shutdown+0xec>
        /* prevent using a deallocated pcb: free it from tcp_input later */
        tcp_trigger_input_pcb_close();
 801183a:	f003 fd61 	bl	8015300 <tcp_trigger_input_pcb_close>
 801183e:	e002      	b.n	8011846 <tcp_close_shutdown+0xf2>
      } else {
        tcp_free(pcb);
 8011840:	6878      	ldr	r0, [r7, #4]
 8011842:	f7ff fed5 	bl	80115f0 <tcp_free>
      }
      return ERR_OK;
 8011846:	2300      	movs	r3, #0
 8011848:	e050      	b.n	80118ec <tcp_close_shutdown+0x198>
    }
  }

  /* - states which free the pcb are handled here,
     - states which send FIN and change state are handled in tcp_close_shutdown_fin() */
  switch (pcb->state) {
 801184a:	687b      	ldr	r3, [r7, #4]
 801184c:	7d1b      	ldrb	r3, [r3, #20]
 801184e:	2b02      	cmp	r3, #2
 8011850:	d03b      	beq.n	80118ca <tcp_close_shutdown+0x176>
 8011852:	2b02      	cmp	r3, #2
 8011854:	dc44      	bgt.n	80118e0 <tcp_close_shutdown+0x18c>
 8011856:	2b00      	cmp	r3, #0
 8011858:	d002      	beq.n	8011860 <tcp_close_shutdown+0x10c>
 801185a:	2b01      	cmp	r3, #1
 801185c:	d02a      	beq.n	80118b4 <tcp_close_shutdown+0x160>
 801185e:	e03f      	b.n	80118e0 <tcp_close_shutdown+0x18c>
       * and the user needs some way to free it should the need arise.
       * Calling tcp_close() with a pcb that has already been closed, (i.e. twice)
       * or for a pcb that has been used and then entered the CLOSED state
       * is erroneous, but this should never happen as the pcb has in those cases
       * been freed, and so any remaining handles are bogus. */
      if (pcb->local_port != 0) {
 8011860:	687b      	ldr	r3, [r7, #4]
 8011862:	8adb      	ldrh	r3, [r3, #22]
 8011864:	2b00      	cmp	r3, #0
 8011866:	d021      	beq.n	80118ac <tcp_close_shutdown+0x158>
        TCP_RMV(&tcp_bound_pcbs, pcb);
 8011868:	4b29      	ldr	r3, [pc, #164]	; (8011910 <tcp_close_shutdown+0x1bc>)
 801186a:	681b      	ldr	r3, [r3, #0]
 801186c:	687a      	ldr	r2, [r7, #4]
 801186e:	429a      	cmp	r2, r3
 8011870:	d105      	bne.n	801187e <tcp_close_shutdown+0x12a>
 8011872:	4b27      	ldr	r3, [pc, #156]	; (8011910 <tcp_close_shutdown+0x1bc>)
 8011874:	681b      	ldr	r3, [r3, #0]
 8011876:	68db      	ldr	r3, [r3, #12]
 8011878:	4a25      	ldr	r2, [pc, #148]	; (8011910 <tcp_close_shutdown+0x1bc>)
 801187a:	6013      	str	r3, [r2, #0]
 801187c:	e013      	b.n	80118a6 <tcp_close_shutdown+0x152>
 801187e:	4b24      	ldr	r3, [pc, #144]	; (8011910 <tcp_close_shutdown+0x1bc>)
 8011880:	681b      	ldr	r3, [r3, #0]
 8011882:	60bb      	str	r3, [r7, #8]
 8011884:	e00c      	b.n	80118a0 <tcp_close_shutdown+0x14c>
 8011886:	68bb      	ldr	r3, [r7, #8]
 8011888:	68db      	ldr	r3, [r3, #12]
 801188a:	687a      	ldr	r2, [r7, #4]
 801188c:	429a      	cmp	r2, r3
 801188e:	d104      	bne.n	801189a <tcp_close_shutdown+0x146>
 8011890:	687b      	ldr	r3, [r7, #4]
 8011892:	68da      	ldr	r2, [r3, #12]
 8011894:	68bb      	ldr	r3, [r7, #8]
 8011896:	60da      	str	r2, [r3, #12]
 8011898:	e005      	b.n	80118a6 <tcp_close_shutdown+0x152>
 801189a:	68bb      	ldr	r3, [r7, #8]
 801189c:	68db      	ldr	r3, [r3, #12]
 801189e:	60bb      	str	r3, [r7, #8]
 80118a0:	68bb      	ldr	r3, [r7, #8]
 80118a2:	2b00      	cmp	r3, #0
 80118a4:	d1ef      	bne.n	8011886 <tcp_close_shutdown+0x132>
 80118a6:	687b      	ldr	r3, [r7, #4]
 80118a8:	2200      	movs	r2, #0
 80118aa:	60da      	str	r2, [r3, #12]
      }
      tcp_free(pcb);
 80118ac:	6878      	ldr	r0, [r7, #4]
 80118ae:	f7ff fe9f 	bl	80115f0 <tcp_free>
      break;
 80118b2:	e01a      	b.n	80118ea <tcp_close_shutdown+0x196>
    case LISTEN:
      tcp_listen_closed(pcb);
 80118b4:	6878      	ldr	r0, [r7, #4]
 80118b6:	f7ff ff13 	bl	80116e0 <tcp_listen_closed>
      tcp_pcb_remove(&tcp_listen_pcbs.pcbs, pcb);
 80118ba:	6879      	ldr	r1, [r7, #4]
 80118bc:	4815      	ldr	r0, [pc, #84]	; (8011914 <tcp_close_shutdown+0x1c0>)
 80118be:	f001 f8ab 	bl	8012a18 <tcp_pcb_remove>
      tcp_free_listen(pcb);
 80118c2:	6878      	ldr	r0, [r7, #4]
 80118c4:	f7ff feb0 	bl	8011628 <tcp_free_listen>
      break;
 80118c8:	e00f      	b.n	80118ea <tcp_close_shutdown+0x196>
    case SYN_SENT:
      TCP_PCB_REMOVE_ACTIVE(pcb);
 80118ca:	6879      	ldr	r1, [r7, #4]
 80118cc:	480d      	ldr	r0, [pc, #52]	; (8011904 <tcp_close_shutdown+0x1b0>)
 80118ce:	f001 f8a3 	bl	8012a18 <tcp_pcb_remove>
 80118d2:	4b0d      	ldr	r3, [pc, #52]	; (8011908 <tcp_close_shutdown+0x1b4>)
 80118d4:	2201      	movs	r2, #1
 80118d6:	701a      	strb	r2, [r3, #0]
      tcp_free(pcb);
 80118d8:	6878      	ldr	r0, [r7, #4]
 80118da:	f7ff fe89 	bl	80115f0 <tcp_free>
      MIB2_STATS_INC(mib2.tcpattemptfails);
      break;
 80118de:	e004      	b.n	80118ea <tcp_close_shutdown+0x196>
    default:
      return tcp_close_shutdown_fin(pcb);
 80118e0:	6878      	ldr	r0, [r7, #4]
 80118e2:	f000 f819 	bl	8011918 <tcp_close_shutdown_fin>
 80118e6:	4603      	mov	r3, r0
 80118e8:	e000      	b.n	80118ec <tcp_close_shutdown+0x198>
  }
  return ERR_OK;
 80118ea:	2300      	movs	r3, #0
}
 80118ec:	4618      	mov	r0, r3
 80118ee:	3710      	adds	r7, #16
 80118f0:	46bd      	mov	sp, r7
 80118f2:	bdb0      	pop	{r4, r5, r7, pc}
 80118f4:	0801d484 	.word	0x0801d484
 80118f8:	0801d558 	.word	0x0801d558
 80118fc:	0801d4c8 	.word	0x0801d4c8
 8011900:	0801d578 	.word	0x0801d578
 8011904:	200070e0 	.word	0x200070e0
 8011908:	200070e8 	.word	0x200070e8
 801190c:	20007120 	.word	0x20007120
 8011910:	200070d8 	.word	0x200070d8
 8011914:	200070dc 	.word	0x200070dc

08011918 <tcp_close_shutdown_fin>:

static err_t
tcp_close_shutdown_fin(struct tcp_pcb *pcb)
{
 8011918:	b580      	push	{r7, lr}
 801191a:	b084      	sub	sp, #16
 801191c:	af00      	add	r7, sp, #0
 801191e:	6078      	str	r0, [r7, #4]
  err_t err;
  LWIP_ASSERT("pcb != NULL", pcb != NULL);
 8011920:	687b      	ldr	r3, [r7, #4]
 8011922:	2b00      	cmp	r3, #0
 8011924:	d106      	bne.n	8011934 <tcp_close_shutdown_fin+0x1c>
 8011926:	4b2e      	ldr	r3, [pc, #184]	; (80119e0 <tcp_close_shutdown_fin+0xc8>)
 8011928:	f44f 72ce 	mov.w	r2, #412	; 0x19c
 801192c:	492d      	ldr	r1, [pc, #180]	; (80119e4 <tcp_close_shutdown_fin+0xcc>)
 801192e:	482e      	ldr	r0, [pc, #184]	; (80119e8 <tcp_close_shutdown_fin+0xd0>)
 8011930:	f008 fa96 	bl	8019e60 <iprintf>

  switch (pcb->state) {
 8011934:	687b      	ldr	r3, [r7, #4]
 8011936:	7d1b      	ldrb	r3, [r3, #20]
 8011938:	2b07      	cmp	r3, #7
 801193a:	d020      	beq.n	801197e <tcp_close_shutdown_fin+0x66>
 801193c:	2b07      	cmp	r3, #7
 801193e:	dc2b      	bgt.n	8011998 <tcp_close_shutdown_fin+0x80>
 8011940:	2b03      	cmp	r3, #3
 8011942:	d002      	beq.n	801194a <tcp_close_shutdown_fin+0x32>
 8011944:	2b04      	cmp	r3, #4
 8011946:	d00d      	beq.n	8011964 <tcp_close_shutdown_fin+0x4c>
 8011948:	e026      	b.n	8011998 <tcp_close_shutdown_fin+0x80>
    case SYN_RCVD:
      err = tcp_send_fin(pcb);
 801194a:	6878      	ldr	r0, [r7, #4]
 801194c:	f003 feea 	bl	8015724 <tcp_send_fin>
 8011950:	4603      	mov	r3, r0
 8011952:	73fb      	strb	r3, [r7, #15]
      if (err == ERR_OK) {
 8011954:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8011958:	2b00      	cmp	r3, #0
 801195a:	d11f      	bne.n	801199c <tcp_close_shutdown_fin+0x84>
        tcp_backlog_accepted(pcb);
        MIB2_STATS_INC(mib2.tcpattemptfails);
        pcb->state = FIN_WAIT_1;
 801195c:	687b      	ldr	r3, [r7, #4]
 801195e:	2205      	movs	r2, #5
 8011960:	751a      	strb	r2, [r3, #20]
      }
      break;
 8011962:	e01b      	b.n	801199c <tcp_close_shutdown_fin+0x84>
    case ESTABLISHED:
      err = tcp_send_fin(pcb);
 8011964:	6878      	ldr	r0, [r7, #4]
 8011966:	f003 fedd 	bl	8015724 <tcp_send_fin>
 801196a:	4603      	mov	r3, r0
 801196c:	73fb      	strb	r3, [r7, #15]
      if (err == ERR_OK) {
 801196e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8011972:	2b00      	cmp	r3, #0
 8011974:	d114      	bne.n	80119a0 <tcp_close_shutdown_fin+0x88>
        MIB2_STATS_INC(mib2.tcpestabresets);
        pcb->state = FIN_WAIT_1;
 8011976:	687b      	ldr	r3, [r7, #4]
 8011978:	2205      	movs	r2, #5
 801197a:	751a      	strb	r2, [r3, #20]
      }
      break;
 801197c:	e010      	b.n	80119a0 <tcp_close_shutdown_fin+0x88>
    case CLOSE_WAIT:
      err = tcp_send_fin(pcb);
 801197e:	6878      	ldr	r0, [r7, #4]
 8011980:	f003 fed0 	bl	8015724 <tcp_send_fin>
 8011984:	4603      	mov	r3, r0
 8011986:	73fb      	strb	r3, [r7, #15]
      if (err == ERR_OK) {
 8011988:	f997 300f 	ldrsb.w	r3, [r7, #15]
 801198c:	2b00      	cmp	r3, #0
 801198e:	d109      	bne.n	80119a4 <tcp_close_shutdown_fin+0x8c>
        MIB2_STATS_INC(mib2.tcpestabresets);
        pcb->state = LAST_ACK;
 8011990:	687b      	ldr	r3, [r7, #4]
 8011992:	2209      	movs	r2, #9
 8011994:	751a      	strb	r2, [r3, #20]
      }
      break;
 8011996:	e005      	b.n	80119a4 <tcp_close_shutdown_fin+0x8c>
    default:
      /* Has already been closed, do nothing. */
      return ERR_OK;
 8011998:	2300      	movs	r3, #0
 801199a:	e01c      	b.n	80119d6 <tcp_close_shutdown_fin+0xbe>
      break;
 801199c:	bf00      	nop
 801199e:	e002      	b.n	80119a6 <tcp_close_shutdown_fin+0x8e>
      break;
 80119a0:	bf00      	nop
 80119a2:	e000      	b.n	80119a6 <tcp_close_shutdown_fin+0x8e>
      break;
 80119a4:	bf00      	nop
  }

  if (err == ERR_OK) {
 80119a6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80119aa:	2b00      	cmp	r3, #0
 80119ac:	d103      	bne.n	80119b6 <tcp_close_shutdown_fin+0x9e>
    /* To ensure all data has been sent when tcp_close returns, we have
       to make sure tcp_output doesn't fail.
       Since we don't really have to ensure all data has been sent when tcp_close
       returns (unsent data is sent from tcp timer functions, also), we don't care
       for the return value of tcp_output for now. */
    tcp_output(pcb);
 80119ae:	6878      	ldr	r0, [r7, #4]
 80119b0:	f003 fff6 	bl	80159a0 <tcp_output>
 80119b4:	e00d      	b.n	80119d2 <tcp_close_shutdown_fin+0xba>
  } else if (err == ERR_MEM) {
 80119b6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80119ba:	f1b3 3fff 	cmp.w	r3, #4294967295
 80119be:	d108      	bne.n	80119d2 <tcp_close_shutdown_fin+0xba>
    /* Mark this pcb for closing. Closing is retried from tcp_tmr. */
    tcp_set_flags(pcb, TF_CLOSEPEND);
 80119c0:	687b      	ldr	r3, [r7, #4]
 80119c2:	8b5b      	ldrh	r3, [r3, #26]
 80119c4:	f043 0308 	orr.w	r3, r3, #8
 80119c8:	b29a      	uxth	r2, r3
 80119ca:	687b      	ldr	r3, [r7, #4]
 80119cc:	835a      	strh	r2, [r3, #26]
    /* We have to return ERR_OK from here to indicate to the callers that this
       pcb should not be used any more as it will be freed soon via tcp_tmr.
       This is OK here since sending FIN does not guarantee a time frime for
       actually freeing the pcb, either (it is left in closure states for
       remote ACK or timeout) */
    return ERR_OK;
 80119ce:	2300      	movs	r3, #0
 80119d0:	e001      	b.n	80119d6 <tcp_close_shutdown_fin+0xbe>
  }
  return err;
 80119d2:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 80119d6:	4618      	mov	r0, r3
 80119d8:	3710      	adds	r7, #16
 80119da:	46bd      	mov	sp, r7
 80119dc:	bd80      	pop	{r7, pc}
 80119de:	bf00      	nop
 80119e0:	0801d484 	.word	0x0801d484
 80119e4:	0801d534 	.word	0x0801d534
 80119e8:	0801d4c8 	.word	0x0801d4c8

080119ec <tcp_close>:
 * @return ERR_OK if connection has been closed
 *         another err_t if closing failed and pcb is not freed
 */
err_t
tcp_close(struct tcp_pcb *pcb)
{
 80119ec:	b580      	push	{r7, lr}
 80119ee:	b082      	sub	sp, #8
 80119f0:	af00      	add	r7, sp, #0
 80119f2:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("tcp_close: invalid pcb", pcb != NULL, return ERR_ARG);
 80119f4:	687b      	ldr	r3, [r7, #4]
 80119f6:	2b00      	cmp	r3, #0
 80119f8:	d109      	bne.n	8011a0e <tcp_close+0x22>
 80119fa:	4b0f      	ldr	r3, [pc, #60]	; (8011a38 <tcp_close+0x4c>)
 80119fc:	f44f 72f4 	mov.w	r2, #488	; 0x1e8
 8011a00:	490e      	ldr	r1, [pc, #56]	; (8011a3c <tcp_close+0x50>)
 8011a02:	480f      	ldr	r0, [pc, #60]	; (8011a40 <tcp_close+0x54>)
 8011a04:	f008 fa2c 	bl	8019e60 <iprintf>
 8011a08:	f06f 030f 	mvn.w	r3, #15
 8011a0c:	e00f      	b.n	8011a2e <tcp_close+0x42>
  LWIP_DEBUGF(TCP_DEBUG, ("tcp_close: closing in "));

  tcp_debug_print_state(pcb->state);

  if (pcb->state != LISTEN) {
 8011a0e:	687b      	ldr	r3, [r7, #4]
 8011a10:	7d1b      	ldrb	r3, [r3, #20]
 8011a12:	2b01      	cmp	r3, #1
 8011a14:	d006      	beq.n	8011a24 <tcp_close+0x38>
    /* Set a flag not to receive any more data... */
    tcp_set_flags(pcb, TF_RXCLOSED);
 8011a16:	687b      	ldr	r3, [r7, #4]
 8011a18:	8b5b      	ldrh	r3, [r3, #26]
 8011a1a:	f043 0310 	orr.w	r3, r3, #16
 8011a1e:	b29a      	uxth	r2, r3
 8011a20:	687b      	ldr	r3, [r7, #4]
 8011a22:	835a      	strh	r2, [r3, #26]
  }
  /* ... and close */
  return tcp_close_shutdown(pcb, 1);
 8011a24:	2101      	movs	r1, #1
 8011a26:	6878      	ldr	r0, [r7, #4]
 8011a28:	f7ff fe94 	bl	8011754 <tcp_close_shutdown>
 8011a2c:	4603      	mov	r3, r0
}
 8011a2e:	4618      	mov	r0, r3
 8011a30:	3708      	adds	r7, #8
 8011a32:	46bd      	mov	sp, r7
 8011a34:	bd80      	pop	{r7, pc}
 8011a36:	bf00      	nop
 8011a38:	0801d484 	.word	0x0801d484
 8011a3c:	0801d594 	.word	0x0801d594
 8011a40:	0801d4c8 	.word	0x0801d4c8

08011a44 <tcp_abandon>:
 * @param pcb the tcp_pcb to abort
 * @param reset boolean to indicate whether a reset should be sent
 */
void
tcp_abandon(struct tcp_pcb *pcb, int reset)
{
 8011a44:	b580      	push	{r7, lr}
 8011a46:	b08e      	sub	sp, #56	; 0x38
 8011a48:	af04      	add	r7, sp, #16
 8011a4a:	6078      	str	r0, [r7, #4]
 8011a4c:	6039      	str	r1, [r7, #0]
#endif /* LWIP_CALLBACK_API */
  void *errf_arg;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("tcp_abandon: invalid pcb", pcb != NULL, return);
 8011a4e:	687b      	ldr	r3, [r7, #4]
 8011a50:	2b00      	cmp	r3, #0
 8011a52:	d107      	bne.n	8011a64 <tcp_abandon+0x20>
 8011a54:	4b52      	ldr	r3, [pc, #328]	; (8011ba0 <tcp_abandon+0x15c>)
 8011a56:	f240 223d 	movw	r2, #573	; 0x23d
 8011a5a:	4952      	ldr	r1, [pc, #328]	; (8011ba4 <tcp_abandon+0x160>)
 8011a5c:	4852      	ldr	r0, [pc, #328]	; (8011ba8 <tcp_abandon+0x164>)
 8011a5e:	f008 f9ff 	bl	8019e60 <iprintf>
 8011a62:	e099      	b.n	8011b98 <tcp_abandon+0x154>

  /* pcb->state LISTEN not allowed here */
  LWIP_ASSERT("don't call tcp_abort/tcp_abandon for listen-pcbs",
 8011a64:	687b      	ldr	r3, [r7, #4]
 8011a66:	7d1b      	ldrb	r3, [r3, #20]
 8011a68:	2b01      	cmp	r3, #1
 8011a6a:	d106      	bne.n	8011a7a <tcp_abandon+0x36>
 8011a6c:	4b4c      	ldr	r3, [pc, #304]	; (8011ba0 <tcp_abandon+0x15c>)
 8011a6e:	f44f 7210 	mov.w	r2, #576	; 0x240
 8011a72:	494e      	ldr	r1, [pc, #312]	; (8011bac <tcp_abandon+0x168>)
 8011a74:	484c      	ldr	r0, [pc, #304]	; (8011ba8 <tcp_abandon+0x164>)
 8011a76:	f008 f9f3 	bl	8019e60 <iprintf>
              pcb->state != LISTEN);
  /* Figure out on which TCP PCB list we are, and remove us. If we
     are in an active state, call the receive function associated with
     the PCB with a NULL argument, and send an RST to the remote end. */
  if (pcb->state == TIME_WAIT) {
 8011a7a:	687b      	ldr	r3, [r7, #4]
 8011a7c:	7d1b      	ldrb	r3, [r3, #20]
 8011a7e:	2b0a      	cmp	r3, #10
 8011a80:	d107      	bne.n	8011a92 <tcp_abandon+0x4e>
    tcp_pcb_remove(&tcp_tw_pcbs, pcb);
 8011a82:	6879      	ldr	r1, [r7, #4]
 8011a84:	484a      	ldr	r0, [pc, #296]	; (8011bb0 <tcp_abandon+0x16c>)
 8011a86:	f000 ffc7 	bl	8012a18 <tcp_pcb_remove>
    tcp_free(pcb);
 8011a8a:	6878      	ldr	r0, [r7, #4]
 8011a8c:	f7ff fdb0 	bl	80115f0 <tcp_free>
 8011a90:	e082      	b.n	8011b98 <tcp_abandon+0x154>
  } else {
    int send_rst = 0;
 8011a92:	2300      	movs	r3, #0
 8011a94:	627b      	str	r3, [r7, #36]	; 0x24
    u16_t local_port = 0;
 8011a96:	2300      	movs	r3, #0
 8011a98:	847b      	strh	r3, [r7, #34]	; 0x22
    enum tcp_state last_state;
    seqno = pcb->snd_nxt;
 8011a9a:	687b      	ldr	r3, [r7, #4]
 8011a9c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8011a9e:	61bb      	str	r3, [r7, #24]
    ackno = pcb->rcv_nxt;
 8011aa0:	687b      	ldr	r3, [r7, #4]
 8011aa2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8011aa4:	617b      	str	r3, [r7, #20]
#if LWIP_CALLBACK_API
    errf = pcb->errf;
 8011aa6:	687b      	ldr	r3, [r7, #4]
 8011aa8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8011aac:	613b      	str	r3, [r7, #16]
#endif /* LWIP_CALLBACK_API */
    errf_arg = pcb->callback_arg;
 8011aae:	687b      	ldr	r3, [r7, #4]
 8011ab0:	691b      	ldr	r3, [r3, #16]
 8011ab2:	60fb      	str	r3, [r7, #12]
    if (pcb->state == CLOSED) {
 8011ab4:	687b      	ldr	r3, [r7, #4]
 8011ab6:	7d1b      	ldrb	r3, [r3, #20]
 8011ab8:	2b00      	cmp	r3, #0
 8011aba:	d126      	bne.n	8011b0a <tcp_abandon+0xc6>
      if (pcb->local_port != 0) {
 8011abc:	687b      	ldr	r3, [r7, #4]
 8011abe:	8adb      	ldrh	r3, [r3, #22]
 8011ac0:	2b00      	cmp	r3, #0
 8011ac2:	d02e      	beq.n	8011b22 <tcp_abandon+0xde>
        /* bound, not yet opened */
        TCP_RMV(&tcp_bound_pcbs, pcb);
 8011ac4:	4b3b      	ldr	r3, [pc, #236]	; (8011bb4 <tcp_abandon+0x170>)
 8011ac6:	681b      	ldr	r3, [r3, #0]
 8011ac8:	687a      	ldr	r2, [r7, #4]
 8011aca:	429a      	cmp	r2, r3
 8011acc:	d105      	bne.n	8011ada <tcp_abandon+0x96>
 8011ace:	4b39      	ldr	r3, [pc, #228]	; (8011bb4 <tcp_abandon+0x170>)
 8011ad0:	681b      	ldr	r3, [r3, #0]
 8011ad2:	68db      	ldr	r3, [r3, #12]
 8011ad4:	4a37      	ldr	r2, [pc, #220]	; (8011bb4 <tcp_abandon+0x170>)
 8011ad6:	6013      	str	r3, [r2, #0]
 8011ad8:	e013      	b.n	8011b02 <tcp_abandon+0xbe>
 8011ada:	4b36      	ldr	r3, [pc, #216]	; (8011bb4 <tcp_abandon+0x170>)
 8011adc:	681b      	ldr	r3, [r3, #0]
 8011ade:	61fb      	str	r3, [r7, #28]
 8011ae0:	e00c      	b.n	8011afc <tcp_abandon+0xb8>
 8011ae2:	69fb      	ldr	r3, [r7, #28]
 8011ae4:	68db      	ldr	r3, [r3, #12]
 8011ae6:	687a      	ldr	r2, [r7, #4]
 8011ae8:	429a      	cmp	r2, r3
 8011aea:	d104      	bne.n	8011af6 <tcp_abandon+0xb2>
 8011aec:	687b      	ldr	r3, [r7, #4]
 8011aee:	68da      	ldr	r2, [r3, #12]
 8011af0:	69fb      	ldr	r3, [r7, #28]
 8011af2:	60da      	str	r2, [r3, #12]
 8011af4:	e005      	b.n	8011b02 <tcp_abandon+0xbe>
 8011af6:	69fb      	ldr	r3, [r7, #28]
 8011af8:	68db      	ldr	r3, [r3, #12]
 8011afa:	61fb      	str	r3, [r7, #28]
 8011afc:	69fb      	ldr	r3, [r7, #28]
 8011afe:	2b00      	cmp	r3, #0
 8011b00:	d1ef      	bne.n	8011ae2 <tcp_abandon+0x9e>
 8011b02:	687b      	ldr	r3, [r7, #4]
 8011b04:	2200      	movs	r2, #0
 8011b06:	60da      	str	r2, [r3, #12]
 8011b08:	e00b      	b.n	8011b22 <tcp_abandon+0xde>
      }
    } else {
      send_rst = reset;
 8011b0a:	683b      	ldr	r3, [r7, #0]
 8011b0c:	627b      	str	r3, [r7, #36]	; 0x24
      local_port = pcb->local_port;
 8011b0e:	687b      	ldr	r3, [r7, #4]
 8011b10:	8adb      	ldrh	r3, [r3, #22]
 8011b12:	847b      	strh	r3, [r7, #34]	; 0x22
      TCP_PCB_REMOVE_ACTIVE(pcb);
 8011b14:	6879      	ldr	r1, [r7, #4]
 8011b16:	4828      	ldr	r0, [pc, #160]	; (8011bb8 <tcp_abandon+0x174>)
 8011b18:	f000 ff7e 	bl	8012a18 <tcp_pcb_remove>
 8011b1c:	4b27      	ldr	r3, [pc, #156]	; (8011bbc <tcp_abandon+0x178>)
 8011b1e:	2201      	movs	r2, #1
 8011b20:	701a      	strb	r2, [r3, #0]
    }
    if (pcb->unacked != NULL) {
 8011b22:	687b      	ldr	r3, [r7, #4]
 8011b24:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8011b26:	2b00      	cmp	r3, #0
 8011b28:	d004      	beq.n	8011b34 <tcp_abandon+0xf0>
      tcp_segs_free(pcb->unacked);
 8011b2a:	687b      	ldr	r3, [r7, #4]
 8011b2c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8011b2e:	4618      	mov	r0, r3
 8011b30:	f000 fd20 	bl	8012574 <tcp_segs_free>
    }
    if (pcb->unsent != NULL) {
 8011b34:	687b      	ldr	r3, [r7, #4]
 8011b36:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8011b38:	2b00      	cmp	r3, #0
 8011b3a:	d004      	beq.n	8011b46 <tcp_abandon+0x102>
      tcp_segs_free(pcb->unsent);
 8011b3c:	687b      	ldr	r3, [r7, #4]
 8011b3e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8011b40:	4618      	mov	r0, r3
 8011b42:	f000 fd17 	bl	8012574 <tcp_segs_free>
    }
#if TCP_QUEUE_OOSEQ
    if (pcb->ooseq != NULL) {
 8011b46:	687b      	ldr	r3, [r7, #4]
 8011b48:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8011b4a:	2b00      	cmp	r3, #0
 8011b4c:	d004      	beq.n	8011b58 <tcp_abandon+0x114>
      tcp_segs_free(pcb->ooseq);
 8011b4e:	687b      	ldr	r3, [r7, #4]
 8011b50:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8011b52:	4618      	mov	r0, r3
 8011b54:	f000 fd0e 	bl	8012574 <tcp_segs_free>
    }
#endif /* TCP_QUEUE_OOSEQ */
    tcp_backlog_accepted(pcb);
    if (send_rst) {
 8011b58:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011b5a:	2b00      	cmp	r3, #0
 8011b5c:	d00e      	beq.n	8011b7c <tcp_abandon+0x138>
      LWIP_DEBUGF(TCP_RST_DEBUG, ("tcp_abandon: sending RST\n"));
      tcp_rst(pcb, seqno, ackno, &pcb->local_ip, &pcb->remote_ip, local_port, pcb->remote_port);
 8011b5e:	6879      	ldr	r1, [r7, #4]
 8011b60:	687b      	ldr	r3, [r7, #4]
 8011b62:	3304      	adds	r3, #4
 8011b64:	687a      	ldr	r2, [r7, #4]
 8011b66:	8b12      	ldrh	r2, [r2, #24]
 8011b68:	9202      	str	r2, [sp, #8]
 8011b6a:	8c7a      	ldrh	r2, [r7, #34]	; 0x22
 8011b6c:	9201      	str	r2, [sp, #4]
 8011b6e:	9300      	str	r3, [sp, #0]
 8011b70:	460b      	mov	r3, r1
 8011b72:	697a      	ldr	r2, [r7, #20]
 8011b74:	69b9      	ldr	r1, [r7, #24]
 8011b76:	6878      	ldr	r0, [r7, #4]
 8011b78:	f004 fcc6 	bl	8016508 <tcp_rst>
    }
    last_state = pcb->state;
 8011b7c:	687b      	ldr	r3, [r7, #4]
 8011b7e:	7d1b      	ldrb	r3, [r3, #20]
 8011b80:	72fb      	strb	r3, [r7, #11]
    tcp_free(pcb);
 8011b82:	6878      	ldr	r0, [r7, #4]
 8011b84:	f7ff fd34 	bl	80115f0 <tcp_free>
    TCP_EVENT_ERR(last_state, errf, errf_arg, ERR_ABRT);
 8011b88:	693b      	ldr	r3, [r7, #16]
 8011b8a:	2b00      	cmp	r3, #0
 8011b8c:	d004      	beq.n	8011b98 <tcp_abandon+0x154>
 8011b8e:	693b      	ldr	r3, [r7, #16]
 8011b90:	f06f 010c 	mvn.w	r1, #12
 8011b94:	68f8      	ldr	r0, [r7, #12]
 8011b96:	4798      	blx	r3
  }
}
 8011b98:	3728      	adds	r7, #40	; 0x28
 8011b9a:	46bd      	mov	sp, r7
 8011b9c:	bd80      	pop	{r7, pc}
 8011b9e:	bf00      	nop
 8011ba0:	0801d484 	.word	0x0801d484
 8011ba4:	0801d5c8 	.word	0x0801d5c8
 8011ba8:	0801d4c8 	.word	0x0801d4c8
 8011bac:	0801d5e4 	.word	0x0801d5e4
 8011bb0:	200070e4 	.word	0x200070e4
 8011bb4:	200070d8 	.word	0x200070d8
 8011bb8:	200070e0 	.word	0x200070e0
 8011bbc:	200070e8 	.word	0x200070e8

08011bc0 <tcp_abort>:
 *
 * @param pcb the tcp pcb to abort
 */
void
tcp_abort(struct tcp_pcb *pcb)
{
 8011bc0:	b580      	push	{r7, lr}
 8011bc2:	b082      	sub	sp, #8
 8011bc4:	af00      	add	r7, sp, #0
 8011bc6:	6078      	str	r0, [r7, #4]
  tcp_abandon(pcb, 1);
 8011bc8:	2101      	movs	r1, #1
 8011bca:	6878      	ldr	r0, [r7, #4]
 8011bcc:	f7ff ff3a 	bl	8011a44 <tcp_abandon>
}
 8011bd0:	bf00      	nop
 8011bd2:	3708      	adds	r7, #8
 8011bd4:	46bd      	mov	sp, r7
 8011bd6:	bd80      	pop	{r7, pc}

08011bd8 <tcp_update_rcv_ann_wnd>:
 * Returns how much extra window would be advertised if we sent an
 * update now.
 */
u32_t
tcp_update_rcv_ann_wnd(struct tcp_pcb *pcb)
{
 8011bd8:	b580      	push	{r7, lr}
 8011bda:	b084      	sub	sp, #16
 8011bdc:	af00      	add	r7, sp, #0
 8011bde:	6078      	str	r0, [r7, #4]
  u32_t new_right_edge;

  LWIP_ASSERT("tcp_update_rcv_ann_wnd: invalid pcb", pcb != NULL);
 8011be0:	687b      	ldr	r3, [r7, #4]
 8011be2:	2b00      	cmp	r3, #0
 8011be4:	d106      	bne.n	8011bf4 <tcp_update_rcv_ann_wnd+0x1c>
 8011be6:	4b25      	ldr	r3, [pc, #148]	; (8011c7c <tcp_update_rcv_ann_wnd+0xa4>)
 8011be8:	f240 32a6 	movw	r2, #934	; 0x3a6
 8011bec:	4924      	ldr	r1, [pc, #144]	; (8011c80 <tcp_update_rcv_ann_wnd+0xa8>)
 8011bee:	4825      	ldr	r0, [pc, #148]	; (8011c84 <tcp_update_rcv_ann_wnd+0xac>)
 8011bf0:	f008 f936 	bl	8019e60 <iprintf>
  new_right_edge = pcb->rcv_nxt + pcb->rcv_wnd;
 8011bf4:	687b      	ldr	r3, [r7, #4]
 8011bf6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8011bf8:	687a      	ldr	r2, [r7, #4]
 8011bfa:	8d12      	ldrh	r2, [r2, #40]	; 0x28
 8011bfc:	4413      	add	r3, r2
 8011bfe:	60fb      	str	r3, [r7, #12]

  if (TCP_SEQ_GEQ(new_right_edge, pcb->rcv_ann_right_edge + LWIP_MIN((TCP_WND / 2), pcb->mss))) {
 8011c00:	687b      	ldr	r3, [r7, #4]
 8011c02:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8011c04:	687a      	ldr	r2, [r7, #4]
 8011c06:	8e52      	ldrh	r2, [r2, #50]	; 0x32
 8011c08:	f640 3168 	movw	r1, #2920	; 0xb68
 8011c0c:	428a      	cmp	r2, r1
 8011c0e:	bf28      	it	cs
 8011c10:	460a      	movcs	r2, r1
 8011c12:	b292      	uxth	r2, r2
 8011c14:	4413      	add	r3, r2
 8011c16:	68fa      	ldr	r2, [r7, #12]
 8011c18:	1ad3      	subs	r3, r2, r3
 8011c1a:	2b00      	cmp	r3, #0
 8011c1c:	db08      	blt.n	8011c30 <tcp_update_rcv_ann_wnd+0x58>
    /* we can advertise more window */
    pcb->rcv_ann_wnd = pcb->rcv_wnd;
 8011c1e:	687b      	ldr	r3, [r7, #4]
 8011c20:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 8011c22:	687b      	ldr	r3, [r7, #4]
 8011c24:	855a      	strh	r2, [r3, #42]	; 0x2a
    return new_right_edge - pcb->rcv_ann_right_edge;
 8011c26:	687b      	ldr	r3, [r7, #4]
 8011c28:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8011c2a:	68fa      	ldr	r2, [r7, #12]
 8011c2c:	1ad3      	subs	r3, r2, r3
 8011c2e:	e020      	b.n	8011c72 <tcp_update_rcv_ann_wnd+0x9a>
  } else {
    if (TCP_SEQ_GT(pcb->rcv_nxt, pcb->rcv_ann_right_edge)) {
 8011c30:	687b      	ldr	r3, [r7, #4]
 8011c32:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8011c34:	687b      	ldr	r3, [r7, #4]
 8011c36:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8011c38:	1ad3      	subs	r3, r2, r3
 8011c3a:	2b00      	cmp	r3, #0
 8011c3c:	dd03      	ble.n	8011c46 <tcp_update_rcv_ann_wnd+0x6e>
      /* Can happen due to other end sending out of advertised window,
       * but within actual available (but not yet advertised) window */
      pcb->rcv_ann_wnd = 0;
 8011c3e:	687b      	ldr	r3, [r7, #4]
 8011c40:	2200      	movs	r2, #0
 8011c42:	855a      	strh	r2, [r3, #42]	; 0x2a
 8011c44:	e014      	b.n	8011c70 <tcp_update_rcv_ann_wnd+0x98>
    } else {
      /* keep the right edge of window constant */
      u32_t new_rcv_ann_wnd = pcb->rcv_ann_right_edge - pcb->rcv_nxt;
 8011c46:	687b      	ldr	r3, [r7, #4]
 8011c48:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8011c4a:	687b      	ldr	r3, [r7, #4]
 8011c4c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8011c4e:	1ad3      	subs	r3, r2, r3
 8011c50:	60bb      	str	r3, [r7, #8]
#if !LWIP_WND_SCALE
      LWIP_ASSERT("new_rcv_ann_wnd <= 0xffff", new_rcv_ann_wnd <= 0xffff);
 8011c52:	68bb      	ldr	r3, [r7, #8]
 8011c54:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8011c58:	d306      	bcc.n	8011c68 <tcp_update_rcv_ann_wnd+0x90>
 8011c5a:	4b08      	ldr	r3, [pc, #32]	; (8011c7c <tcp_update_rcv_ann_wnd+0xa4>)
 8011c5c:	f240 32b6 	movw	r2, #950	; 0x3b6
 8011c60:	4909      	ldr	r1, [pc, #36]	; (8011c88 <tcp_update_rcv_ann_wnd+0xb0>)
 8011c62:	4808      	ldr	r0, [pc, #32]	; (8011c84 <tcp_update_rcv_ann_wnd+0xac>)
 8011c64:	f008 f8fc 	bl	8019e60 <iprintf>
#endif
      pcb->rcv_ann_wnd = (tcpwnd_size_t)new_rcv_ann_wnd;
 8011c68:	68bb      	ldr	r3, [r7, #8]
 8011c6a:	b29a      	uxth	r2, r3
 8011c6c:	687b      	ldr	r3, [r7, #4]
 8011c6e:	855a      	strh	r2, [r3, #42]	; 0x2a
    }
    return 0;
 8011c70:	2300      	movs	r3, #0
  }
}
 8011c72:	4618      	mov	r0, r3
 8011c74:	3710      	adds	r7, #16
 8011c76:	46bd      	mov	sp, r7
 8011c78:	bd80      	pop	{r7, pc}
 8011c7a:	bf00      	nop
 8011c7c:	0801d484 	.word	0x0801d484
 8011c80:	0801d6e0 	.word	0x0801d6e0
 8011c84:	0801d4c8 	.word	0x0801d4c8
 8011c88:	0801d704 	.word	0x0801d704

08011c8c <tcp_recved>:
 * @param pcb the tcp_pcb for which data is read
 * @param len the amount of bytes that have been read by the application
 */
void
tcp_recved(struct tcp_pcb *pcb, u16_t len)
{
 8011c8c:	b580      	push	{r7, lr}
 8011c8e:	b084      	sub	sp, #16
 8011c90:	af00      	add	r7, sp, #0
 8011c92:	6078      	str	r0, [r7, #4]
 8011c94:	460b      	mov	r3, r1
 8011c96:	807b      	strh	r3, [r7, #2]
  u32_t wnd_inflation;
  tcpwnd_size_t rcv_wnd;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("tcp_recved: invalid pcb", pcb != NULL, return);
 8011c98:	687b      	ldr	r3, [r7, #4]
 8011c9a:	2b00      	cmp	r3, #0
 8011c9c:	d107      	bne.n	8011cae <tcp_recved+0x22>
 8011c9e:	4b20      	ldr	r3, [pc, #128]	; (8011d20 <tcp_recved+0x94>)
 8011ca0:	f240 32cf 	movw	r2, #975	; 0x3cf
 8011ca4:	491f      	ldr	r1, [pc, #124]	; (8011d24 <tcp_recved+0x98>)
 8011ca6:	4820      	ldr	r0, [pc, #128]	; (8011d28 <tcp_recved+0x9c>)
 8011ca8:	f008 f8da 	bl	8019e60 <iprintf>
 8011cac:	e034      	b.n	8011d18 <tcp_recved+0x8c>

  /* pcb->state LISTEN not allowed here */
  LWIP_ASSERT("don't call tcp_recved for listen-pcbs",
 8011cae:	687b      	ldr	r3, [r7, #4]
 8011cb0:	7d1b      	ldrb	r3, [r3, #20]
 8011cb2:	2b01      	cmp	r3, #1
 8011cb4:	d106      	bne.n	8011cc4 <tcp_recved+0x38>
 8011cb6:	4b1a      	ldr	r3, [pc, #104]	; (8011d20 <tcp_recved+0x94>)
 8011cb8:	f240 32d2 	movw	r2, #978	; 0x3d2
 8011cbc:	491b      	ldr	r1, [pc, #108]	; (8011d2c <tcp_recved+0xa0>)
 8011cbe:	481a      	ldr	r0, [pc, #104]	; (8011d28 <tcp_recved+0x9c>)
 8011cc0:	f008 f8ce 	bl	8019e60 <iprintf>
              pcb->state != LISTEN);

  rcv_wnd = (tcpwnd_size_t)(pcb->rcv_wnd + len);
 8011cc4:	687b      	ldr	r3, [r7, #4]
 8011cc6:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 8011cc8:	887b      	ldrh	r3, [r7, #2]
 8011cca:	4413      	add	r3, r2
 8011ccc:	81fb      	strh	r3, [r7, #14]
  if ((rcv_wnd > TCP_WND_MAX(pcb)) || (rcv_wnd < pcb->rcv_wnd)) {
 8011cce:	89fb      	ldrh	r3, [r7, #14]
 8011cd0:	f241 62d0 	movw	r2, #5840	; 0x16d0
 8011cd4:	4293      	cmp	r3, r2
 8011cd6:	d804      	bhi.n	8011ce2 <tcp_recved+0x56>
 8011cd8:	687b      	ldr	r3, [r7, #4]
 8011cda:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8011cdc:	89fa      	ldrh	r2, [r7, #14]
 8011cde:	429a      	cmp	r2, r3
 8011ce0:	d204      	bcs.n	8011cec <tcp_recved+0x60>
    /* window got too big or tcpwnd_size_t overflow */
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_recved: window got too big or tcpwnd_size_t overflow\n"));
    pcb->rcv_wnd = TCP_WND_MAX(pcb);
 8011ce2:	687b      	ldr	r3, [r7, #4]
 8011ce4:	f241 62d0 	movw	r2, #5840	; 0x16d0
 8011ce8:	851a      	strh	r2, [r3, #40]	; 0x28
 8011cea:	e002      	b.n	8011cf2 <tcp_recved+0x66>
  } else  {
    pcb->rcv_wnd = rcv_wnd;
 8011cec:	687b      	ldr	r3, [r7, #4]
 8011cee:	89fa      	ldrh	r2, [r7, #14]
 8011cf0:	851a      	strh	r2, [r3, #40]	; 0x28
  }

  wnd_inflation = tcp_update_rcv_ann_wnd(pcb);
 8011cf2:	6878      	ldr	r0, [r7, #4]
 8011cf4:	f7ff ff70 	bl	8011bd8 <tcp_update_rcv_ann_wnd>
 8011cf8:	60b8      	str	r0, [r7, #8]

  /* If the change in the right edge of window is significant (default
   * watermark is TCP_WND/4), then send an explicit update now.
   * Otherwise wait for a packet to be sent in the normal course of
   * events (or more window to be available later) */
  if (wnd_inflation >= TCP_WND_UPDATE_THRESHOLD) {
 8011cfa:	68bb      	ldr	r3, [r7, #8]
 8011cfc:	f240 52b3 	movw	r2, #1459	; 0x5b3
 8011d00:	4293      	cmp	r3, r2
 8011d02:	d909      	bls.n	8011d18 <tcp_recved+0x8c>
    tcp_ack_now(pcb);
 8011d04:	687b      	ldr	r3, [r7, #4]
 8011d06:	8b5b      	ldrh	r3, [r3, #26]
 8011d08:	f043 0302 	orr.w	r3, r3, #2
 8011d0c:	b29a      	uxth	r2, r3
 8011d0e:	687b      	ldr	r3, [r7, #4]
 8011d10:	835a      	strh	r2, [r3, #26]
    tcp_output(pcb);
 8011d12:	6878      	ldr	r0, [r7, #4]
 8011d14:	f003 fe44 	bl	80159a0 <tcp_output>
  }

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_recved: received %"U16_F" bytes, wnd %"TCPWNDSIZE_F" (%"TCPWNDSIZE_F").\n",
                          len, pcb->rcv_wnd, (u16_t)(TCP_WND_MAX(pcb) - pcb->rcv_wnd)));
}
 8011d18:	3710      	adds	r7, #16
 8011d1a:	46bd      	mov	sp, r7
 8011d1c:	bd80      	pop	{r7, pc}
 8011d1e:	bf00      	nop
 8011d20:	0801d484 	.word	0x0801d484
 8011d24:	0801d720 	.word	0x0801d720
 8011d28:	0801d4c8 	.word	0x0801d4c8
 8011d2c:	0801d738 	.word	0x0801d738

08011d30 <tcp_slowtmr>:
 *
 * Automatically called from tcp_tmr().
 */
void
tcp_slowtmr(void)
{
 8011d30:	b5b0      	push	{r4, r5, r7, lr}
 8011d32:	b090      	sub	sp, #64	; 0x40
 8011d34:	af04      	add	r7, sp, #16
  tcpwnd_size_t eff_wnd;
  u8_t pcb_remove;      /* flag if a PCB should be removed */
  u8_t pcb_reset;       /* flag if a RST should be sent when removing */
  err_t err;

  err = ERR_OK;
 8011d36:	2300      	movs	r3, #0
 8011d38:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25

  ++tcp_ticks;
 8011d3c:	4b94      	ldr	r3, [pc, #592]	; (8011f90 <tcp_slowtmr+0x260>)
 8011d3e:	681b      	ldr	r3, [r3, #0]
 8011d40:	3301      	adds	r3, #1
 8011d42:	4a93      	ldr	r2, [pc, #588]	; (8011f90 <tcp_slowtmr+0x260>)
 8011d44:	6013      	str	r3, [r2, #0]
  ++tcp_timer_ctr;
 8011d46:	4b93      	ldr	r3, [pc, #588]	; (8011f94 <tcp_slowtmr+0x264>)
 8011d48:	781b      	ldrb	r3, [r3, #0]
 8011d4a:	3301      	adds	r3, #1
 8011d4c:	b2da      	uxtb	r2, r3
 8011d4e:	4b91      	ldr	r3, [pc, #580]	; (8011f94 <tcp_slowtmr+0x264>)
 8011d50:	701a      	strb	r2, [r3, #0]

tcp_slowtmr_start:
  /* Steps through all of the active PCBs. */
  prev = NULL;
 8011d52:	2300      	movs	r3, #0
 8011d54:	62bb      	str	r3, [r7, #40]	; 0x28
  pcb = tcp_active_pcbs;
 8011d56:	4b90      	ldr	r3, [pc, #576]	; (8011f98 <tcp_slowtmr+0x268>)
 8011d58:	681b      	ldr	r3, [r3, #0]
 8011d5a:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (pcb == NULL) {
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: no active pcbs\n"));
  }
  while (pcb != NULL) {
 8011d5c:	e29d      	b.n	801229a <tcp_slowtmr+0x56a>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: processing active pcb\n"));
    LWIP_ASSERT("tcp_slowtmr: active pcb->state != CLOSED\n", pcb->state != CLOSED);
 8011d5e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011d60:	7d1b      	ldrb	r3, [r3, #20]
 8011d62:	2b00      	cmp	r3, #0
 8011d64:	d106      	bne.n	8011d74 <tcp_slowtmr+0x44>
 8011d66:	4b8d      	ldr	r3, [pc, #564]	; (8011f9c <tcp_slowtmr+0x26c>)
 8011d68:	f240 42be 	movw	r2, #1214	; 0x4be
 8011d6c:	498c      	ldr	r1, [pc, #560]	; (8011fa0 <tcp_slowtmr+0x270>)
 8011d6e:	488d      	ldr	r0, [pc, #564]	; (8011fa4 <tcp_slowtmr+0x274>)
 8011d70:	f008 f876 	bl	8019e60 <iprintf>
    LWIP_ASSERT("tcp_slowtmr: active pcb->state != LISTEN\n", pcb->state != LISTEN);
 8011d74:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011d76:	7d1b      	ldrb	r3, [r3, #20]
 8011d78:	2b01      	cmp	r3, #1
 8011d7a:	d106      	bne.n	8011d8a <tcp_slowtmr+0x5a>
 8011d7c:	4b87      	ldr	r3, [pc, #540]	; (8011f9c <tcp_slowtmr+0x26c>)
 8011d7e:	f240 42bf 	movw	r2, #1215	; 0x4bf
 8011d82:	4989      	ldr	r1, [pc, #548]	; (8011fa8 <tcp_slowtmr+0x278>)
 8011d84:	4887      	ldr	r0, [pc, #540]	; (8011fa4 <tcp_slowtmr+0x274>)
 8011d86:	f008 f86b 	bl	8019e60 <iprintf>
    LWIP_ASSERT("tcp_slowtmr: active pcb->state != TIME-WAIT\n", pcb->state != TIME_WAIT);
 8011d8a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011d8c:	7d1b      	ldrb	r3, [r3, #20]
 8011d8e:	2b0a      	cmp	r3, #10
 8011d90:	d106      	bne.n	8011da0 <tcp_slowtmr+0x70>
 8011d92:	4b82      	ldr	r3, [pc, #520]	; (8011f9c <tcp_slowtmr+0x26c>)
 8011d94:	f44f 6298 	mov.w	r2, #1216	; 0x4c0
 8011d98:	4984      	ldr	r1, [pc, #528]	; (8011fac <tcp_slowtmr+0x27c>)
 8011d9a:	4882      	ldr	r0, [pc, #520]	; (8011fa4 <tcp_slowtmr+0x274>)
 8011d9c:	f008 f860 	bl	8019e60 <iprintf>
    if (pcb->last_timer == tcp_timer_ctr) {
 8011da0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011da2:	7f9a      	ldrb	r2, [r3, #30]
 8011da4:	4b7b      	ldr	r3, [pc, #492]	; (8011f94 <tcp_slowtmr+0x264>)
 8011da6:	781b      	ldrb	r3, [r3, #0]
 8011da8:	429a      	cmp	r2, r3
 8011daa:	d105      	bne.n	8011db8 <tcp_slowtmr+0x88>
      /* skip this pcb, we have already processed it */
      prev = pcb;
 8011dac:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011dae:	62bb      	str	r3, [r7, #40]	; 0x28
      pcb = pcb->next;
 8011db0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011db2:	68db      	ldr	r3, [r3, #12]
 8011db4:	62fb      	str	r3, [r7, #44]	; 0x2c
      continue;
 8011db6:	e270      	b.n	801229a <tcp_slowtmr+0x56a>
    }
    pcb->last_timer = tcp_timer_ctr;
 8011db8:	4b76      	ldr	r3, [pc, #472]	; (8011f94 <tcp_slowtmr+0x264>)
 8011dba:	781a      	ldrb	r2, [r3, #0]
 8011dbc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011dbe:	779a      	strb	r2, [r3, #30]

    pcb_remove = 0;
 8011dc0:	2300      	movs	r3, #0
 8011dc2:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    pcb_reset = 0;
 8011dc6:	2300      	movs	r3, #0
 8011dc8:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26

    if (pcb->state == SYN_SENT && pcb->nrtx >= TCP_SYNMAXRTX) {
 8011dcc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011dce:	7d1b      	ldrb	r3, [r3, #20]
 8011dd0:	2b02      	cmp	r3, #2
 8011dd2:	d10a      	bne.n	8011dea <tcp_slowtmr+0xba>
 8011dd4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011dd6:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8011dda:	2b05      	cmp	r3, #5
 8011ddc:	d905      	bls.n	8011dea <tcp_slowtmr+0xba>
      ++pcb_remove;
 8011dde:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8011de2:	3301      	adds	r3, #1
 8011de4:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8011de8:	e11e      	b.n	8012028 <tcp_slowtmr+0x2f8>
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: max SYN retries reached\n"));
    } else if (pcb->nrtx >= TCP_MAXRTX) {
 8011dea:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011dec:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8011df0:	2b0b      	cmp	r3, #11
 8011df2:	d905      	bls.n	8011e00 <tcp_slowtmr+0xd0>
      ++pcb_remove;
 8011df4:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8011df8:	3301      	adds	r3, #1
 8011dfa:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8011dfe:	e113      	b.n	8012028 <tcp_slowtmr+0x2f8>
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: max DATA retries reached\n"));
    } else {
      if (pcb->persist_backoff > 0) {
 8011e00:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011e02:	f893 3099 	ldrb.w	r3, [r3, #153]	; 0x99
 8011e06:	2b00      	cmp	r3, #0
 8011e08:	d075      	beq.n	8011ef6 <tcp_slowtmr+0x1c6>
        LWIP_ASSERT("tcp_slowtimr: persist ticking with in-flight data", pcb->unacked == NULL);
 8011e0a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011e0c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8011e0e:	2b00      	cmp	r3, #0
 8011e10:	d006      	beq.n	8011e20 <tcp_slowtmr+0xf0>
 8011e12:	4b62      	ldr	r3, [pc, #392]	; (8011f9c <tcp_slowtmr+0x26c>)
 8011e14:	f240 42d4 	movw	r2, #1236	; 0x4d4
 8011e18:	4965      	ldr	r1, [pc, #404]	; (8011fb0 <tcp_slowtmr+0x280>)
 8011e1a:	4862      	ldr	r0, [pc, #392]	; (8011fa4 <tcp_slowtmr+0x274>)
 8011e1c:	f008 f820 	bl	8019e60 <iprintf>
        LWIP_ASSERT("tcp_slowtimr: persist ticking with empty send buffer", pcb->unsent != NULL);
 8011e20:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011e22:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8011e24:	2b00      	cmp	r3, #0
 8011e26:	d106      	bne.n	8011e36 <tcp_slowtmr+0x106>
 8011e28:	4b5c      	ldr	r3, [pc, #368]	; (8011f9c <tcp_slowtmr+0x26c>)
 8011e2a:	f240 42d5 	movw	r2, #1237	; 0x4d5
 8011e2e:	4961      	ldr	r1, [pc, #388]	; (8011fb4 <tcp_slowtmr+0x284>)
 8011e30:	485c      	ldr	r0, [pc, #368]	; (8011fa4 <tcp_slowtmr+0x274>)
 8011e32:	f008 f815 	bl	8019e60 <iprintf>
        if (pcb->persist_probe >= TCP_MAXRTX) {
 8011e36:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011e38:	f893 309a 	ldrb.w	r3, [r3, #154]	; 0x9a
 8011e3c:	2b0b      	cmp	r3, #11
 8011e3e:	d905      	bls.n	8011e4c <tcp_slowtmr+0x11c>
          ++pcb_remove; /* max probes reached */
 8011e40:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8011e44:	3301      	adds	r3, #1
 8011e46:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8011e4a:	e0ed      	b.n	8012028 <tcp_slowtmr+0x2f8>
        } else {
          u8_t backoff_cnt = tcp_persist_backoff[pcb->persist_backoff - 1];
 8011e4c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011e4e:	f893 3099 	ldrb.w	r3, [r3, #153]	; 0x99
 8011e52:	3b01      	subs	r3, #1
 8011e54:	4a58      	ldr	r2, [pc, #352]	; (8011fb8 <tcp_slowtmr+0x288>)
 8011e56:	5cd3      	ldrb	r3, [r2, r3]
 8011e58:	747b      	strb	r3, [r7, #17]
          if (pcb->persist_cnt < backoff_cnt) {
 8011e5a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011e5c:	f893 3098 	ldrb.w	r3, [r3, #152]	; 0x98
 8011e60:	7c7a      	ldrb	r2, [r7, #17]
 8011e62:	429a      	cmp	r2, r3
 8011e64:	d907      	bls.n	8011e76 <tcp_slowtmr+0x146>
            pcb->persist_cnt++;
 8011e66:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011e68:	f893 3098 	ldrb.w	r3, [r3, #152]	; 0x98
 8011e6c:	3301      	adds	r3, #1
 8011e6e:	b2da      	uxtb	r2, r3
 8011e70:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011e72:	f883 2098 	strb.w	r2, [r3, #152]	; 0x98
          }
          if (pcb->persist_cnt >= backoff_cnt) {
 8011e76:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011e78:	f893 3098 	ldrb.w	r3, [r3, #152]	; 0x98
 8011e7c:	7c7a      	ldrb	r2, [r7, #17]
 8011e7e:	429a      	cmp	r2, r3
 8011e80:	f200 80d2 	bhi.w	8012028 <tcp_slowtmr+0x2f8>
            int next_slot = 1; /* increment timer to next slot */
 8011e84:	2301      	movs	r3, #1
 8011e86:	623b      	str	r3, [r7, #32]
            /* If snd_wnd is zero, send 1 byte probes */
            if (pcb->snd_wnd == 0) {
 8011e88:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011e8a:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 8011e8e:	2b00      	cmp	r3, #0
 8011e90:	d108      	bne.n	8011ea4 <tcp_slowtmr+0x174>
              if (tcp_zero_window_probe(pcb) != ERR_OK) {
 8011e92:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8011e94:	f004 fc2c 	bl	80166f0 <tcp_zero_window_probe>
 8011e98:	4603      	mov	r3, r0
 8011e9a:	2b00      	cmp	r3, #0
 8011e9c:	d014      	beq.n	8011ec8 <tcp_slowtmr+0x198>
                next_slot = 0; /* try probe again with current slot */
 8011e9e:	2300      	movs	r3, #0
 8011ea0:	623b      	str	r3, [r7, #32]
 8011ea2:	e011      	b.n	8011ec8 <tcp_slowtmr+0x198>
              }
              /* snd_wnd not fully closed, split unsent head and fill window */
            } else {
              if (tcp_split_unsent_seg(pcb, (u16_t)pcb->snd_wnd) == ERR_OK) {
 8011ea4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011ea6:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 8011eaa:	4619      	mov	r1, r3
 8011eac:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8011eae:	f003 faf1 	bl	8015494 <tcp_split_unsent_seg>
 8011eb2:	4603      	mov	r3, r0
 8011eb4:	2b00      	cmp	r3, #0
 8011eb6:	d107      	bne.n	8011ec8 <tcp_slowtmr+0x198>
                if (tcp_output(pcb) == ERR_OK) {
 8011eb8:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8011eba:	f003 fd71 	bl	80159a0 <tcp_output>
 8011ebe:	4603      	mov	r3, r0
 8011ec0:	2b00      	cmp	r3, #0
 8011ec2:	d101      	bne.n	8011ec8 <tcp_slowtmr+0x198>
                  /* sending will cancel persist timer, else retry with current slot */
                  next_slot = 0;
 8011ec4:	2300      	movs	r3, #0
 8011ec6:	623b      	str	r3, [r7, #32]
                }
              }
            }
            if (next_slot) {
 8011ec8:	6a3b      	ldr	r3, [r7, #32]
 8011eca:	2b00      	cmp	r3, #0
 8011ecc:	f000 80ac 	beq.w	8012028 <tcp_slowtmr+0x2f8>
              pcb->persist_cnt = 0;
 8011ed0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011ed2:	2200      	movs	r2, #0
 8011ed4:	f883 2098 	strb.w	r2, [r3, #152]	; 0x98
              if (pcb->persist_backoff < sizeof(tcp_persist_backoff)) {
 8011ed8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011eda:	f893 3099 	ldrb.w	r3, [r3, #153]	; 0x99
 8011ede:	2b06      	cmp	r3, #6
 8011ee0:	f200 80a2 	bhi.w	8012028 <tcp_slowtmr+0x2f8>
                pcb->persist_backoff++;
 8011ee4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011ee6:	f893 3099 	ldrb.w	r3, [r3, #153]	; 0x99
 8011eea:	3301      	adds	r3, #1
 8011eec:	b2da      	uxtb	r2, r3
 8011eee:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011ef0:	f883 2099 	strb.w	r2, [r3, #153]	; 0x99
 8011ef4:	e098      	b.n	8012028 <tcp_slowtmr+0x2f8>
            }
          }
        }
      } else {
        /* Increase the retransmission timer if it is running */
        if ((pcb->rtime >= 0) && (pcb->rtime < 0x7FFF)) {
 8011ef6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011ef8:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	; 0x30
 8011efc:	2b00      	cmp	r3, #0
 8011efe:	db0f      	blt.n	8011f20 <tcp_slowtmr+0x1f0>
 8011f00:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011f02:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	; 0x30
 8011f06:	f647 72ff 	movw	r2, #32767	; 0x7fff
 8011f0a:	4293      	cmp	r3, r2
 8011f0c:	d008      	beq.n	8011f20 <tcp_slowtmr+0x1f0>
          ++pcb->rtime;
 8011f0e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011f10:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	; 0x30
 8011f14:	b29b      	uxth	r3, r3
 8011f16:	3301      	adds	r3, #1
 8011f18:	b29b      	uxth	r3, r3
 8011f1a:	b21a      	sxth	r2, r3
 8011f1c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011f1e:	861a      	strh	r2, [r3, #48]	; 0x30
        }

        if (pcb->rtime >= pcb->rto) {
 8011f20:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011f22:	f9b3 2030 	ldrsh.w	r2, [r3, #48]	; 0x30
 8011f26:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011f28:	f9b3 3040 	ldrsh.w	r3, [r3, #64]	; 0x40
 8011f2c:	429a      	cmp	r2, r3
 8011f2e:	db7b      	blt.n	8012028 <tcp_slowtmr+0x2f8>
                                      " pcb->rto %"S16_F"\n",
                                      pcb->rtime, pcb->rto));
          /* If prepare phase fails but we have unsent data but no unacked data,
             still execute the backoff calculations below, as this means we somehow
             failed to send segment. */
          if ((tcp_rexmit_rto_prepare(pcb) == ERR_OK) || ((pcb->unacked == NULL) && (pcb->unsent != NULL))) {
 8011f30:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8011f32:	f004 f829 	bl	8015f88 <tcp_rexmit_rto_prepare>
 8011f36:	4603      	mov	r3, r0
 8011f38:	2b00      	cmp	r3, #0
 8011f3a:	d007      	beq.n	8011f4c <tcp_slowtmr+0x21c>
 8011f3c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011f3e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8011f40:	2b00      	cmp	r3, #0
 8011f42:	d171      	bne.n	8012028 <tcp_slowtmr+0x2f8>
 8011f44:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011f46:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8011f48:	2b00      	cmp	r3, #0
 8011f4a:	d06d      	beq.n	8012028 <tcp_slowtmr+0x2f8>
            /* Double retransmission time-out unless we are trying to
             * connect to somebody (i.e., we are in SYN_SENT). */
            if (pcb->state != SYN_SENT) {
 8011f4c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011f4e:	7d1b      	ldrb	r3, [r3, #20]
 8011f50:	2b02      	cmp	r3, #2
 8011f52:	d03a      	beq.n	8011fca <tcp_slowtmr+0x29a>
              u8_t backoff_idx = LWIP_MIN(pcb->nrtx, sizeof(tcp_backoff) - 1);
 8011f54:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011f56:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8011f5a:	2b0c      	cmp	r3, #12
 8011f5c:	bf28      	it	cs
 8011f5e:	230c      	movcs	r3, #12
 8011f60:	76fb      	strb	r3, [r7, #27]
              int calc_rto = ((pcb->sa >> 3) + pcb->sv) << tcp_backoff[backoff_idx];
 8011f62:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011f64:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	; 0x3c
 8011f68:	10db      	asrs	r3, r3, #3
 8011f6a:	b21b      	sxth	r3, r3
 8011f6c:	461a      	mov	r2, r3
 8011f6e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011f70:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	; 0x3e
 8011f74:	4413      	add	r3, r2
 8011f76:	7efa      	ldrb	r2, [r7, #27]
 8011f78:	4910      	ldr	r1, [pc, #64]	; (8011fbc <tcp_slowtmr+0x28c>)
 8011f7a:	5c8a      	ldrb	r2, [r1, r2]
 8011f7c:	4093      	lsls	r3, r2
 8011f7e:	617b      	str	r3, [r7, #20]
              pcb->rto = (s16_t)LWIP_MIN(calc_rto, 0x7FFF);
 8011f80:	697b      	ldr	r3, [r7, #20]
 8011f82:	f647 72fe 	movw	r2, #32766	; 0x7ffe
 8011f86:	4293      	cmp	r3, r2
 8011f88:	dc1a      	bgt.n	8011fc0 <tcp_slowtmr+0x290>
 8011f8a:	697b      	ldr	r3, [r7, #20]
 8011f8c:	b21a      	sxth	r2, r3
 8011f8e:	e019      	b.n	8011fc4 <tcp_slowtmr+0x294>
 8011f90:	200070d4 	.word	0x200070d4
 8011f94:	200070ea 	.word	0x200070ea
 8011f98:	200070e0 	.word	0x200070e0
 8011f9c:	0801d484 	.word	0x0801d484
 8011fa0:	0801d7c8 	.word	0x0801d7c8
 8011fa4:	0801d4c8 	.word	0x0801d4c8
 8011fa8:	0801d7f4 	.word	0x0801d7f4
 8011fac:	0801d820 	.word	0x0801d820
 8011fb0:	0801d850 	.word	0x0801d850
 8011fb4:	0801d884 	.word	0x0801d884
 8011fb8:	0801f49c 	.word	0x0801f49c
 8011fbc:	0801f48c 	.word	0x0801f48c
 8011fc0:	f647 72ff 	movw	r2, #32767	; 0x7fff
 8011fc4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011fc6:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
            }

            /* Reset the retransmission timer. */
            pcb->rtime = 0;
 8011fca:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011fcc:	2200      	movs	r2, #0
 8011fce:	861a      	strh	r2, [r3, #48]	; 0x30

            /* Reduce congestion window and ssthresh. */
            eff_wnd = LWIP_MIN(pcb->cwnd, pcb->snd_wnd);
 8011fd0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011fd2:	f8b3 2060 	ldrh.w	r2, [r3, #96]	; 0x60
 8011fd6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011fd8:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 8011fdc:	4293      	cmp	r3, r2
 8011fde:	bf28      	it	cs
 8011fe0:	4613      	movcs	r3, r2
 8011fe2:	827b      	strh	r3, [r7, #18]
            pcb->ssthresh = eff_wnd >> 1;
 8011fe4:	8a7b      	ldrh	r3, [r7, #18]
 8011fe6:	085b      	lsrs	r3, r3, #1
 8011fe8:	b29a      	uxth	r2, r3
 8011fea:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011fec:	f8a3 204a 	strh.w	r2, [r3, #74]	; 0x4a
            if (pcb->ssthresh < (tcpwnd_size_t)(pcb->mss << 1)) {
 8011ff0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011ff2:	f8b3 204a 	ldrh.w	r2, [r3, #74]	; 0x4a
 8011ff6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011ff8:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8011ffa:	005b      	lsls	r3, r3, #1
 8011ffc:	b29b      	uxth	r3, r3
 8011ffe:	429a      	cmp	r2, r3
 8012000:	d206      	bcs.n	8012010 <tcp_slowtmr+0x2e0>
              pcb->ssthresh = (tcpwnd_size_t)(pcb->mss << 1);
 8012002:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8012004:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8012006:	005b      	lsls	r3, r3, #1
 8012008:	b29a      	uxth	r2, r3
 801200a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801200c:	f8a3 204a 	strh.w	r2, [r3, #74]	; 0x4a
            }
            pcb->cwnd = pcb->mss;
 8012010:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8012012:	8e5a      	ldrh	r2, [r3, #50]	; 0x32
 8012014:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8012016:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
            LWIP_DEBUGF(TCP_CWND_DEBUG, ("tcp_slowtmr: cwnd %"TCPWNDSIZE_F
                                         " ssthresh %"TCPWNDSIZE_F"\n",
                                         pcb->cwnd, pcb->ssthresh));
            pcb->bytes_acked = 0;
 801201a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801201c:	2200      	movs	r2, #0
 801201e:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a

            /* The following needs to be called AFTER cwnd is set to one
               mss - STJ */
            tcp_rexmit_rto_commit(pcb);
 8012022:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8012024:	f004 f820 	bl	8016068 <tcp_rexmit_rto_commit>
          }
        }
      }
    }
    /* Check if this PCB has stayed too long in FIN-WAIT-2 */
    if (pcb->state == FIN_WAIT_2) {
 8012028:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801202a:	7d1b      	ldrb	r3, [r3, #20]
 801202c:	2b06      	cmp	r3, #6
 801202e:	d111      	bne.n	8012054 <tcp_slowtmr+0x324>
      /* If this PCB is in FIN_WAIT_2 because of SHUT_WR don't let it time out. */
      if (pcb->flags & TF_RXCLOSED) {
 8012030:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8012032:	8b5b      	ldrh	r3, [r3, #26]
 8012034:	f003 0310 	and.w	r3, r3, #16
 8012038:	2b00      	cmp	r3, #0
 801203a:	d00b      	beq.n	8012054 <tcp_slowtmr+0x324>
        /* PCB was fully closed (either through close() or SHUT_RDWR):
           normal FIN-WAIT timeout handling. */
        if ((u32_t)(tcp_ticks - pcb->tmr) >
 801203c:	4b9c      	ldr	r3, [pc, #624]	; (80122b0 <tcp_slowtmr+0x580>)
 801203e:	681a      	ldr	r2, [r3, #0]
 8012040:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8012042:	6a1b      	ldr	r3, [r3, #32]
 8012044:	1ad3      	subs	r3, r2, r3
 8012046:	2b28      	cmp	r3, #40	; 0x28
 8012048:	d904      	bls.n	8012054 <tcp_slowtmr+0x324>
            TCP_FIN_WAIT_TIMEOUT / TCP_SLOW_INTERVAL) {
          ++pcb_remove;
 801204a:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 801204e:	3301      	adds	r3, #1
 8012050:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
        }
      }
    }

    /* Check if KEEPALIVE should be sent */
    if (ip_get_option(pcb, SOF_KEEPALIVE) &&
 8012054:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8012056:	7a5b      	ldrb	r3, [r3, #9]
 8012058:	f003 0308 	and.w	r3, r3, #8
 801205c:	2b00      	cmp	r3, #0
 801205e:	d04a      	beq.n	80120f6 <tcp_slowtmr+0x3c6>
        ((pcb->state == ESTABLISHED) ||
 8012060:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8012062:	7d1b      	ldrb	r3, [r3, #20]
    if (ip_get_option(pcb, SOF_KEEPALIVE) &&
 8012064:	2b04      	cmp	r3, #4
 8012066:	d003      	beq.n	8012070 <tcp_slowtmr+0x340>
         (pcb->state == CLOSE_WAIT))) {
 8012068:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801206a:	7d1b      	ldrb	r3, [r3, #20]
        ((pcb->state == ESTABLISHED) ||
 801206c:	2b07      	cmp	r3, #7
 801206e:	d142      	bne.n	80120f6 <tcp_slowtmr+0x3c6>
      if ((u32_t)(tcp_ticks - pcb->tmr) >
 8012070:	4b8f      	ldr	r3, [pc, #572]	; (80122b0 <tcp_slowtmr+0x580>)
 8012072:	681a      	ldr	r2, [r3, #0]
 8012074:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8012076:	6a1b      	ldr	r3, [r3, #32]
 8012078:	1ad2      	subs	r2, r2, r3
          (pcb->keep_idle + TCP_KEEP_DUR(pcb)) / TCP_SLOW_INTERVAL) {
 801207a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801207c:	f8d3 1094 	ldr.w	r1, [r3, #148]	; 0x94
 8012080:	4b8c      	ldr	r3, [pc, #560]	; (80122b4 <tcp_slowtmr+0x584>)
 8012082:	440b      	add	r3, r1
 8012084:	498c      	ldr	r1, [pc, #560]	; (80122b8 <tcp_slowtmr+0x588>)
 8012086:	fba1 1303 	umull	r1, r3, r1, r3
 801208a:	095b      	lsrs	r3, r3, #5
      if ((u32_t)(tcp_ticks - pcb->tmr) >
 801208c:	429a      	cmp	r2, r3
 801208e:	d90a      	bls.n	80120a6 <tcp_slowtmr+0x376>
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: KEEPALIVE timeout. Aborting connection to "));
        ip_addr_debug_print_val(TCP_DEBUG, pcb->remote_ip);
        LWIP_DEBUGF(TCP_DEBUG, ("\n"));

        ++pcb_remove;
 8012090:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8012094:	3301      	adds	r3, #1
 8012096:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
        ++pcb_reset;
 801209a:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 801209e:	3301      	adds	r3, #1
 80120a0:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 80120a4:	e027      	b.n	80120f6 <tcp_slowtmr+0x3c6>
      } else if ((u32_t)(tcp_ticks - pcb->tmr) >
 80120a6:	4b82      	ldr	r3, [pc, #520]	; (80122b0 <tcp_slowtmr+0x580>)
 80120a8:	681a      	ldr	r2, [r3, #0]
 80120aa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80120ac:	6a1b      	ldr	r3, [r3, #32]
 80120ae:	1ad2      	subs	r2, r2, r3
                 (pcb->keep_idle + pcb->keep_cnt_sent * TCP_KEEP_INTVL(pcb))
 80120b0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80120b2:	f8d3 1094 	ldr.w	r1, [r3, #148]	; 0x94
 80120b6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80120b8:	f893 309b 	ldrb.w	r3, [r3, #155]	; 0x9b
 80120bc:	4618      	mov	r0, r3
 80120be:	4b7f      	ldr	r3, [pc, #508]	; (80122bc <tcp_slowtmr+0x58c>)
 80120c0:	fb00 f303 	mul.w	r3, r0, r3
 80120c4:	440b      	add	r3, r1
                 / TCP_SLOW_INTERVAL) {
 80120c6:	497c      	ldr	r1, [pc, #496]	; (80122b8 <tcp_slowtmr+0x588>)
 80120c8:	fba1 1303 	umull	r1, r3, r1, r3
 80120cc:	095b      	lsrs	r3, r3, #5
      } else if ((u32_t)(tcp_ticks - pcb->tmr) >
 80120ce:	429a      	cmp	r2, r3
 80120d0:	d911      	bls.n	80120f6 <tcp_slowtmr+0x3c6>
        err = tcp_keepalive(pcb);
 80120d2:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 80120d4:	f004 facc 	bl	8016670 <tcp_keepalive>
 80120d8:	4603      	mov	r3, r0
 80120da:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
        if (err == ERR_OK) {
 80120de:	f997 3025 	ldrsb.w	r3, [r7, #37]	; 0x25
 80120e2:	2b00      	cmp	r3, #0
 80120e4:	d107      	bne.n	80120f6 <tcp_slowtmr+0x3c6>
          pcb->keep_cnt_sent++;
 80120e6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80120e8:	f893 309b 	ldrb.w	r3, [r3, #155]	; 0x9b
 80120ec:	3301      	adds	r3, #1
 80120ee:	b2da      	uxtb	r2, r3
 80120f0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80120f2:	f883 209b 	strb.w	r2, [r3, #155]	; 0x9b

    /* If this PCB has queued out of sequence data, but has been
       inactive for too long, will drop the data (it will eventually
       be retransmitted). */
#if TCP_QUEUE_OOSEQ
    if (pcb->ooseq != NULL &&
 80120f6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80120f8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80120fa:	2b00      	cmp	r3, #0
 80120fc:	d011      	beq.n	8012122 <tcp_slowtmr+0x3f2>
        (tcp_ticks - pcb->tmr >= (u32_t)pcb->rto * TCP_OOSEQ_TIMEOUT)) {
 80120fe:	4b6c      	ldr	r3, [pc, #432]	; (80122b0 <tcp_slowtmr+0x580>)
 8012100:	681a      	ldr	r2, [r3, #0]
 8012102:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8012104:	6a1b      	ldr	r3, [r3, #32]
 8012106:	1ad2      	subs	r2, r2, r3
 8012108:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801210a:	f9b3 3040 	ldrsh.w	r3, [r3, #64]	; 0x40
 801210e:	4619      	mov	r1, r3
 8012110:	460b      	mov	r3, r1
 8012112:	005b      	lsls	r3, r3, #1
 8012114:	440b      	add	r3, r1
 8012116:	005b      	lsls	r3, r3, #1
    if (pcb->ooseq != NULL &&
 8012118:	429a      	cmp	r2, r3
 801211a:	d302      	bcc.n	8012122 <tcp_slowtmr+0x3f2>
      LWIP_DEBUGF(TCP_CWND_DEBUG, ("tcp_slowtmr: dropping OOSEQ queued data\n"));
      tcp_free_ooseq(pcb);
 801211c:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 801211e:	f000 fddf 	bl	8012ce0 <tcp_free_ooseq>
    }
#endif /* TCP_QUEUE_OOSEQ */

    /* Check if this PCB has stayed too long in SYN-RCVD */
    if (pcb->state == SYN_RCVD) {
 8012122:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8012124:	7d1b      	ldrb	r3, [r3, #20]
 8012126:	2b03      	cmp	r3, #3
 8012128:	d10b      	bne.n	8012142 <tcp_slowtmr+0x412>
      if ((u32_t)(tcp_ticks - pcb->tmr) >
 801212a:	4b61      	ldr	r3, [pc, #388]	; (80122b0 <tcp_slowtmr+0x580>)
 801212c:	681a      	ldr	r2, [r3, #0]
 801212e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8012130:	6a1b      	ldr	r3, [r3, #32]
 8012132:	1ad3      	subs	r3, r2, r3
 8012134:	2b28      	cmp	r3, #40	; 0x28
 8012136:	d904      	bls.n	8012142 <tcp_slowtmr+0x412>
          TCP_SYN_RCVD_TIMEOUT / TCP_SLOW_INTERVAL) {
        ++pcb_remove;
 8012138:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 801213c:	3301      	adds	r3, #1
 801213e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: removing pcb stuck in SYN-RCVD\n"));
      }
    }

    /* Check if this PCB has stayed too long in LAST-ACK */
    if (pcb->state == LAST_ACK) {
 8012142:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8012144:	7d1b      	ldrb	r3, [r3, #20]
 8012146:	2b09      	cmp	r3, #9
 8012148:	d10b      	bne.n	8012162 <tcp_slowtmr+0x432>
      if ((u32_t)(tcp_ticks - pcb->tmr) > 2 * TCP_MSL / TCP_SLOW_INTERVAL) {
 801214a:	4b59      	ldr	r3, [pc, #356]	; (80122b0 <tcp_slowtmr+0x580>)
 801214c:	681a      	ldr	r2, [r3, #0]
 801214e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8012150:	6a1b      	ldr	r3, [r3, #32]
 8012152:	1ad3      	subs	r3, r2, r3
 8012154:	2bf0      	cmp	r3, #240	; 0xf0
 8012156:	d904      	bls.n	8012162 <tcp_slowtmr+0x432>
        ++pcb_remove;
 8012158:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 801215c:	3301      	adds	r3, #1
 801215e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: removing pcb stuck in LAST-ACK\n"));
      }
    }

    /* If the PCB should be removed, do it. */
    if (pcb_remove) {
 8012162:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8012166:	2b00      	cmp	r3, #0
 8012168:	d060      	beq.n	801222c <tcp_slowtmr+0x4fc>
      struct tcp_pcb *pcb2;
#if LWIP_CALLBACK_API
      tcp_err_fn err_fn = pcb->errf;
 801216a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801216c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8012170:	60fb      	str	r3, [r7, #12]
#endif /* LWIP_CALLBACK_API */
      void *err_arg;
      enum tcp_state last_state;
      tcp_pcb_purge(pcb);
 8012172:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8012174:	f000 fc00 	bl	8012978 <tcp_pcb_purge>
      /* Remove PCB from tcp_active_pcbs list. */
      if (prev != NULL) {
 8012178:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801217a:	2b00      	cmp	r3, #0
 801217c:	d010      	beq.n	80121a0 <tcp_slowtmr+0x470>
        LWIP_ASSERT("tcp_slowtmr: middle tcp != tcp_active_pcbs", pcb != tcp_active_pcbs);
 801217e:	4b50      	ldr	r3, [pc, #320]	; (80122c0 <tcp_slowtmr+0x590>)
 8012180:	681b      	ldr	r3, [r3, #0]
 8012182:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8012184:	429a      	cmp	r2, r3
 8012186:	d106      	bne.n	8012196 <tcp_slowtmr+0x466>
 8012188:	4b4e      	ldr	r3, [pc, #312]	; (80122c4 <tcp_slowtmr+0x594>)
 801218a:	f240 526d 	movw	r2, #1389	; 0x56d
 801218e:	494e      	ldr	r1, [pc, #312]	; (80122c8 <tcp_slowtmr+0x598>)
 8012190:	484e      	ldr	r0, [pc, #312]	; (80122cc <tcp_slowtmr+0x59c>)
 8012192:	f007 fe65 	bl	8019e60 <iprintf>
        prev->next = pcb->next;
 8012196:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8012198:	68da      	ldr	r2, [r3, #12]
 801219a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801219c:	60da      	str	r2, [r3, #12]
 801219e:	e00f      	b.n	80121c0 <tcp_slowtmr+0x490>
      } else {
        /* This PCB was the first. */
        LWIP_ASSERT("tcp_slowtmr: first pcb == tcp_active_pcbs", tcp_active_pcbs == pcb);
 80121a0:	4b47      	ldr	r3, [pc, #284]	; (80122c0 <tcp_slowtmr+0x590>)
 80121a2:	681b      	ldr	r3, [r3, #0]
 80121a4:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80121a6:	429a      	cmp	r2, r3
 80121a8:	d006      	beq.n	80121b8 <tcp_slowtmr+0x488>
 80121aa:	4b46      	ldr	r3, [pc, #280]	; (80122c4 <tcp_slowtmr+0x594>)
 80121ac:	f240 5271 	movw	r2, #1393	; 0x571
 80121b0:	4947      	ldr	r1, [pc, #284]	; (80122d0 <tcp_slowtmr+0x5a0>)
 80121b2:	4846      	ldr	r0, [pc, #280]	; (80122cc <tcp_slowtmr+0x59c>)
 80121b4:	f007 fe54 	bl	8019e60 <iprintf>
        tcp_active_pcbs = pcb->next;
 80121b8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80121ba:	68db      	ldr	r3, [r3, #12]
 80121bc:	4a40      	ldr	r2, [pc, #256]	; (80122c0 <tcp_slowtmr+0x590>)
 80121be:	6013      	str	r3, [r2, #0]
      }

      if (pcb_reset) {
 80121c0:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 80121c4:	2b00      	cmp	r3, #0
 80121c6:	d013      	beq.n	80121f0 <tcp_slowtmr+0x4c0>
        tcp_rst(pcb, pcb->snd_nxt, pcb->rcv_nxt, &pcb->local_ip, &pcb->remote_ip,
 80121c8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80121ca:	6d18      	ldr	r0, [r3, #80]	; 0x50
 80121cc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80121ce:	6a5c      	ldr	r4, [r3, #36]	; 0x24
 80121d0:	6afd      	ldr	r5, [r7, #44]	; 0x2c
 80121d2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80121d4:	3304      	adds	r3, #4
 80121d6:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80121d8:	8ad2      	ldrh	r2, [r2, #22]
 80121da:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80121dc:	8b09      	ldrh	r1, [r1, #24]
 80121de:	9102      	str	r1, [sp, #8]
 80121e0:	9201      	str	r2, [sp, #4]
 80121e2:	9300      	str	r3, [sp, #0]
 80121e4:	462b      	mov	r3, r5
 80121e6:	4622      	mov	r2, r4
 80121e8:	4601      	mov	r1, r0
 80121ea:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 80121ec:	f004 f98c 	bl	8016508 <tcp_rst>
                pcb->local_port, pcb->remote_port);
      }

      err_arg = pcb->callback_arg;
 80121f0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80121f2:	691b      	ldr	r3, [r3, #16]
 80121f4:	60bb      	str	r3, [r7, #8]
      last_state = pcb->state;
 80121f6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80121f8:	7d1b      	ldrb	r3, [r3, #20]
 80121fa:	71fb      	strb	r3, [r7, #7]
      pcb2 = pcb;
 80121fc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80121fe:	603b      	str	r3, [r7, #0]
      pcb = pcb->next;
 8012200:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8012202:	68db      	ldr	r3, [r3, #12]
 8012204:	62fb      	str	r3, [r7, #44]	; 0x2c
      tcp_free(pcb2);
 8012206:	6838      	ldr	r0, [r7, #0]
 8012208:	f7ff f9f2 	bl	80115f0 <tcp_free>

      tcp_active_pcbs_changed = 0;
 801220c:	4b31      	ldr	r3, [pc, #196]	; (80122d4 <tcp_slowtmr+0x5a4>)
 801220e:	2200      	movs	r2, #0
 8012210:	701a      	strb	r2, [r3, #0]
      TCP_EVENT_ERR(last_state, err_fn, err_arg, ERR_ABRT);
 8012212:	68fb      	ldr	r3, [r7, #12]
 8012214:	2b00      	cmp	r3, #0
 8012216:	d004      	beq.n	8012222 <tcp_slowtmr+0x4f2>
 8012218:	68fb      	ldr	r3, [r7, #12]
 801221a:	f06f 010c 	mvn.w	r1, #12
 801221e:	68b8      	ldr	r0, [r7, #8]
 8012220:	4798      	blx	r3
      if (tcp_active_pcbs_changed) {
 8012222:	4b2c      	ldr	r3, [pc, #176]	; (80122d4 <tcp_slowtmr+0x5a4>)
 8012224:	781b      	ldrb	r3, [r3, #0]
 8012226:	2b00      	cmp	r3, #0
 8012228:	d037      	beq.n	801229a <tcp_slowtmr+0x56a>
        goto tcp_slowtmr_start;
 801222a:	e592      	b.n	8011d52 <tcp_slowtmr+0x22>
      }
    } else {
      /* get the 'next' element now and work with 'prev' below (in case of abort) */
      prev = pcb;
 801222c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801222e:	62bb      	str	r3, [r7, #40]	; 0x28
      pcb = pcb->next;
 8012230:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8012232:	68db      	ldr	r3, [r3, #12]
 8012234:	62fb      	str	r3, [r7, #44]	; 0x2c

      /* We check if we should poll the connection. */
      ++prev->polltmr;
 8012236:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8012238:	7f1b      	ldrb	r3, [r3, #28]
 801223a:	3301      	adds	r3, #1
 801223c:	b2da      	uxtb	r2, r3
 801223e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8012240:	771a      	strb	r2, [r3, #28]
      if (prev->polltmr >= prev->pollinterval) {
 8012242:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8012244:	7f1a      	ldrb	r2, [r3, #28]
 8012246:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8012248:	7f5b      	ldrb	r3, [r3, #29]
 801224a:	429a      	cmp	r2, r3
 801224c:	d325      	bcc.n	801229a <tcp_slowtmr+0x56a>
        prev->polltmr = 0;
 801224e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8012250:	2200      	movs	r2, #0
 8012252:	771a      	strb	r2, [r3, #28]
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: polling application\n"));
        tcp_active_pcbs_changed = 0;
 8012254:	4b1f      	ldr	r3, [pc, #124]	; (80122d4 <tcp_slowtmr+0x5a4>)
 8012256:	2200      	movs	r2, #0
 8012258:	701a      	strb	r2, [r3, #0]
        TCP_EVENT_POLL(prev, err);
 801225a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801225c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8012260:	2b00      	cmp	r3, #0
 8012262:	d00b      	beq.n	801227c <tcp_slowtmr+0x54c>
 8012264:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8012266:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 801226a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 801226c:	6912      	ldr	r2, [r2, #16]
 801226e:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8012270:	4610      	mov	r0, r2
 8012272:	4798      	blx	r3
 8012274:	4603      	mov	r3, r0
 8012276:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
 801227a:	e002      	b.n	8012282 <tcp_slowtmr+0x552>
 801227c:	2300      	movs	r3, #0
 801227e:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
        if (tcp_active_pcbs_changed) {
 8012282:	4b14      	ldr	r3, [pc, #80]	; (80122d4 <tcp_slowtmr+0x5a4>)
 8012284:	781b      	ldrb	r3, [r3, #0]
 8012286:	2b00      	cmp	r3, #0
 8012288:	d000      	beq.n	801228c <tcp_slowtmr+0x55c>
          goto tcp_slowtmr_start;
 801228a:	e562      	b.n	8011d52 <tcp_slowtmr+0x22>
        }
        /* if err == ERR_ABRT, 'prev' is already deallocated */
        if (err == ERR_OK) {
 801228c:	f997 3025 	ldrsb.w	r3, [r7, #37]	; 0x25
 8012290:	2b00      	cmp	r3, #0
 8012292:	d102      	bne.n	801229a <tcp_slowtmr+0x56a>
          tcp_output(prev);
 8012294:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8012296:	f003 fb83 	bl	80159a0 <tcp_output>
  while (pcb != NULL) {
 801229a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801229c:	2b00      	cmp	r3, #0
 801229e:	f47f ad5e 	bne.w	8011d5e <tcp_slowtmr+0x2e>
    }
  }


  /* Steps through all of the TIME-WAIT PCBs. */
  prev = NULL;
 80122a2:	2300      	movs	r3, #0
 80122a4:	62bb      	str	r3, [r7, #40]	; 0x28
  pcb = tcp_tw_pcbs;
 80122a6:	4b0c      	ldr	r3, [pc, #48]	; (80122d8 <tcp_slowtmr+0x5a8>)
 80122a8:	681b      	ldr	r3, [r3, #0]
 80122aa:	62fb      	str	r3, [r7, #44]	; 0x2c
  while (pcb != NULL) {
 80122ac:	e069      	b.n	8012382 <tcp_slowtmr+0x652>
 80122ae:	bf00      	nop
 80122b0:	200070d4 	.word	0x200070d4
 80122b4:	000a4cb8 	.word	0x000a4cb8
 80122b8:	10624dd3 	.word	0x10624dd3
 80122bc:	000124f8 	.word	0x000124f8
 80122c0:	200070e0 	.word	0x200070e0
 80122c4:	0801d484 	.word	0x0801d484
 80122c8:	0801d8bc 	.word	0x0801d8bc
 80122cc:	0801d4c8 	.word	0x0801d4c8
 80122d0:	0801d8e8 	.word	0x0801d8e8
 80122d4:	200070e8 	.word	0x200070e8
 80122d8:	200070e4 	.word	0x200070e4
    LWIP_ASSERT("tcp_slowtmr: TIME-WAIT pcb->state == TIME-WAIT", pcb->state == TIME_WAIT);
 80122dc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80122de:	7d1b      	ldrb	r3, [r3, #20]
 80122e0:	2b0a      	cmp	r3, #10
 80122e2:	d006      	beq.n	80122f2 <tcp_slowtmr+0x5c2>
 80122e4:	4b2b      	ldr	r3, [pc, #172]	; (8012394 <tcp_slowtmr+0x664>)
 80122e6:	f240 52a1 	movw	r2, #1441	; 0x5a1
 80122ea:	492b      	ldr	r1, [pc, #172]	; (8012398 <tcp_slowtmr+0x668>)
 80122ec:	482b      	ldr	r0, [pc, #172]	; (801239c <tcp_slowtmr+0x66c>)
 80122ee:	f007 fdb7 	bl	8019e60 <iprintf>
    pcb_remove = 0;
 80122f2:	2300      	movs	r3, #0
 80122f4:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

    /* Check if this PCB has stayed long enough in TIME-WAIT */
    if ((u32_t)(tcp_ticks - pcb->tmr) > 2 * TCP_MSL / TCP_SLOW_INTERVAL) {
 80122f8:	4b29      	ldr	r3, [pc, #164]	; (80123a0 <tcp_slowtmr+0x670>)
 80122fa:	681a      	ldr	r2, [r3, #0]
 80122fc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80122fe:	6a1b      	ldr	r3, [r3, #32]
 8012300:	1ad3      	subs	r3, r2, r3
 8012302:	2bf0      	cmp	r3, #240	; 0xf0
 8012304:	d904      	bls.n	8012310 <tcp_slowtmr+0x5e0>
      ++pcb_remove;
 8012306:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 801230a:	3301      	adds	r3, #1
 801230c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    }

    /* If the PCB should be removed, do it. */
    if (pcb_remove) {
 8012310:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8012314:	2b00      	cmp	r3, #0
 8012316:	d02f      	beq.n	8012378 <tcp_slowtmr+0x648>
      struct tcp_pcb *pcb2;
      tcp_pcb_purge(pcb);
 8012318:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 801231a:	f000 fb2d 	bl	8012978 <tcp_pcb_purge>
      /* Remove PCB from tcp_tw_pcbs list. */
      if (prev != NULL) {
 801231e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8012320:	2b00      	cmp	r3, #0
 8012322:	d010      	beq.n	8012346 <tcp_slowtmr+0x616>
        LWIP_ASSERT("tcp_slowtmr: middle tcp != tcp_tw_pcbs", pcb != tcp_tw_pcbs);
 8012324:	4b1f      	ldr	r3, [pc, #124]	; (80123a4 <tcp_slowtmr+0x674>)
 8012326:	681b      	ldr	r3, [r3, #0]
 8012328:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 801232a:	429a      	cmp	r2, r3
 801232c:	d106      	bne.n	801233c <tcp_slowtmr+0x60c>
 801232e:	4b19      	ldr	r3, [pc, #100]	; (8012394 <tcp_slowtmr+0x664>)
 8012330:	f240 52af 	movw	r2, #1455	; 0x5af
 8012334:	491c      	ldr	r1, [pc, #112]	; (80123a8 <tcp_slowtmr+0x678>)
 8012336:	4819      	ldr	r0, [pc, #100]	; (801239c <tcp_slowtmr+0x66c>)
 8012338:	f007 fd92 	bl	8019e60 <iprintf>
        prev->next = pcb->next;
 801233c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801233e:	68da      	ldr	r2, [r3, #12]
 8012340:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8012342:	60da      	str	r2, [r3, #12]
 8012344:	e00f      	b.n	8012366 <tcp_slowtmr+0x636>
      } else {
        /* This PCB was the first. */
        LWIP_ASSERT("tcp_slowtmr: first pcb == tcp_tw_pcbs", tcp_tw_pcbs == pcb);
 8012346:	4b17      	ldr	r3, [pc, #92]	; (80123a4 <tcp_slowtmr+0x674>)
 8012348:	681b      	ldr	r3, [r3, #0]
 801234a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 801234c:	429a      	cmp	r2, r3
 801234e:	d006      	beq.n	801235e <tcp_slowtmr+0x62e>
 8012350:	4b10      	ldr	r3, [pc, #64]	; (8012394 <tcp_slowtmr+0x664>)
 8012352:	f240 52b3 	movw	r2, #1459	; 0x5b3
 8012356:	4915      	ldr	r1, [pc, #84]	; (80123ac <tcp_slowtmr+0x67c>)
 8012358:	4810      	ldr	r0, [pc, #64]	; (801239c <tcp_slowtmr+0x66c>)
 801235a:	f007 fd81 	bl	8019e60 <iprintf>
        tcp_tw_pcbs = pcb->next;
 801235e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8012360:	68db      	ldr	r3, [r3, #12]
 8012362:	4a10      	ldr	r2, [pc, #64]	; (80123a4 <tcp_slowtmr+0x674>)
 8012364:	6013      	str	r3, [r2, #0]
      }
      pcb2 = pcb;
 8012366:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8012368:	61fb      	str	r3, [r7, #28]
      pcb = pcb->next;
 801236a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801236c:	68db      	ldr	r3, [r3, #12]
 801236e:	62fb      	str	r3, [r7, #44]	; 0x2c
      tcp_free(pcb2);
 8012370:	69f8      	ldr	r0, [r7, #28]
 8012372:	f7ff f93d 	bl	80115f0 <tcp_free>
 8012376:	e004      	b.n	8012382 <tcp_slowtmr+0x652>
    } else {
      prev = pcb;
 8012378:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801237a:	62bb      	str	r3, [r7, #40]	; 0x28
      pcb = pcb->next;
 801237c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801237e:	68db      	ldr	r3, [r3, #12]
 8012380:	62fb      	str	r3, [r7, #44]	; 0x2c
  while (pcb != NULL) {
 8012382:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8012384:	2b00      	cmp	r3, #0
 8012386:	d1a9      	bne.n	80122dc <tcp_slowtmr+0x5ac>
    }
  }
}
 8012388:	bf00      	nop
 801238a:	bf00      	nop
 801238c:	3730      	adds	r7, #48	; 0x30
 801238e:	46bd      	mov	sp, r7
 8012390:	bdb0      	pop	{r4, r5, r7, pc}
 8012392:	bf00      	nop
 8012394:	0801d484 	.word	0x0801d484
 8012398:	0801d914 	.word	0x0801d914
 801239c:	0801d4c8 	.word	0x0801d4c8
 80123a0:	200070d4 	.word	0x200070d4
 80123a4:	200070e4 	.word	0x200070e4
 80123a8:	0801d944 	.word	0x0801d944
 80123ac:	0801d96c 	.word	0x0801d96c

080123b0 <tcp_fasttmr>:
 *
 * Automatically called from tcp_tmr().
 */
void
tcp_fasttmr(void)
{
 80123b0:	b580      	push	{r7, lr}
 80123b2:	b082      	sub	sp, #8
 80123b4:	af00      	add	r7, sp, #0
  struct tcp_pcb *pcb;

  ++tcp_timer_ctr;
 80123b6:	4b2d      	ldr	r3, [pc, #180]	; (801246c <tcp_fasttmr+0xbc>)
 80123b8:	781b      	ldrb	r3, [r3, #0]
 80123ba:	3301      	adds	r3, #1
 80123bc:	b2da      	uxtb	r2, r3
 80123be:	4b2b      	ldr	r3, [pc, #172]	; (801246c <tcp_fasttmr+0xbc>)
 80123c0:	701a      	strb	r2, [r3, #0]

tcp_fasttmr_start:
  pcb = tcp_active_pcbs;
 80123c2:	4b2b      	ldr	r3, [pc, #172]	; (8012470 <tcp_fasttmr+0xc0>)
 80123c4:	681b      	ldr	r3, [r3, #0]
 80123c6:	607b      	str	r3, [r7, #4]

  while (pcb != NULL) {
 80123c8:	e048      	b.n	801245c <tcp_fasttmr+0xac>
    if (pcb->last_timer != tcp_timer_ctr) {
 80123ca:	687b      	ldr	r3, [r7, #4]
 80123cc:	7f9a      	ldrb	r2, [r3, #30]
 80123ce:	4b27      	ldr	r3, [pc, #156]	; (801246c <tcp_fasttmr+0xbc>)
 80123d0:	781b      	ldrb	r3, [r3, #0]
 80123d2:	429a      	cmp	r2, r3
 80123d4:	d03f      	beq.n	8012456 <tcp_fasttmr+0xa6>
      struct tcp_pcb *next;
      pcb->last_timer = tcp_timer_ctr;
 80123d6:	4b25      	ldr	r3, [pc, #148]	; (801246c <tcp_fasttmr+0xbc>)
 80123d8:	781a      	ldrb	r2, [r3, #0]
 80123da:	687b      	ldr	r3, [r7, #4]
 80123dc:	779a      	strb	r2, [r3, #30]
      /* send delayed ACKs */
      if (pcb->flags & TF_ACK_DELAY) {
 80123de:	687b      	ldr	r3, [r7, #4]
 80123e0:	8b5b      	ldrh	r3, [r3, #26]
 80123e2:	f003 0301 	and.w	r3, r3, #1
 80123e6:	2b00      	cmp	r3, #0
 80123e8:	d010      	beq.n	801240c <tcp_fasttmr+0x5c>
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_fasttmr: delayed ACK\n"));
        tcp_ack_now(pcb);
 80123ea:	687b      	ldr	r3, [r7, #4]
 80123ec:	8b5b      	ldrh	r3, [r3, #26]
 80123ee:	f043 0302 	orr.w	r3, r3, #2
 80123f2:	b29a      	uxth	r2, r3
 80123f4:	687b      	ldr	r3, [r7, #4]
 80123f6:	835a      	strh	r2, [r3, #26]
        tcp_output(pcb);
 80123f8:	6878      	ldr	r0, [r7, #4]
 80123fa:	f003 fad1 	bl	80159a0 <tcp_output>
        tcp_clear_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 80123fe:	687b      	ldr	r3, [r7, #4]
 8012400:	8b5b      	ldrh	r3, [r3, #26]
 8012402:	f023 0303 	bic.w	r3, r3, #3
 8012406:	b29a      	uxth	r2, r3
 8012408:	687b      	ldr	r3, [r7, #4]
 801240a:	835a      	strh	r2, [r3, #26]
      }
      /* send pending FIN */
      if (pcb->flags & TF_CLOSEPEND) {
 801240c:	687b      	ldr	r3, [r7, #4]
 801240e:	8b5b      	ldrh	r3, [r3, #26]
 8012410:	f003 0308 	and.w	r3, r3, #8
 8012414:	2b00      	cmp	r3, #0
 8012416:	d009      	beq.n	801242c <tcp_fasttmr+0x7c>
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_fasttmr: pending FIN\n"));
        tcp_clear_flags(pcb, TF_CLOSEPEND);
 8012418:	687b      	ldr	r3, [r7, #4]
 801241a:	8b5b      	ldrh	r3, [r3, #26]
 801241c:	f023 0308 	bic.w	r3, r3, #8
 8012420:	b29a      	uxth	r2, r3
 8012422:	687b      	ldr	r3, [r7, #4]
 8012424:	835a      	strh	r2, [r3, #26]
        tcp_close_shutdown_fin(pcb);
 8012426:	6878      	ldr	r0, [r7, #4]
 8012428:	f7ff fa76 	bl	8011918 <tcp_close_shutdown_fin>
      }

      next = pcb->next;
 801242c:	687b      	ldr	r3, [r7, #4]
 801242e:	68db      	ldr	r3, [r3, #12]
 8012430:	603b      	str	r3, [r7, #0]

      /* If there is data which was previously "refused" by upper layer */
      if (pcb->refused_data != NULL) {
 8012432:	687b      	ldr	r3, [r7, #4]
 8012434:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8012436:	2b00      	cmp	r3, #0
 8012438:	d00a      	beq.n	8012450 <tcp_fasttmr+0xa0>
        tcp_active_pcbs_changed = 0;
 801243a:	4b0e      	ldr	r3, [pc, #56]	; (8012474 <tcp_fasttmr+0xc4>)
 801243c:	2200      	movs	r2, #0
 801243e:	701a      	strb	r2, [r3, #0]
        tcp_process_refused_data(pcb);
 8012440:	6878      	ldr	r0, [r7, #4]
 8012442:	f000 f819 	bl	8012478 <tcp_process_refused_data>
        if (tcp_active_pcbs_changed) {
 8012446:	4b0b      	ldr	r3, [pc, #44]	; (8012474 <tcp_fasttmr+0xc4>)
 8012448:	781b      	ldrb	r3, [r3, #0]
 801244a:	2b00      	cmp	r3, #0
 801244c:	d000      	beq.n	8012450 <tcp_fasttmr+0xa0>
          /* application callback has changed the pcb list: restart the loop */
          goto tcp_fasttmr_start;
 801244e:	e7b8      	b.n	80123c2 <tcp_fasttmr+0x12>
        }
      }
      pcb = next;
 8012450:	683b      	ldr	r3, [r7, #0]
 8012452:	607b      	str	r3, [r7, #4]
 8012454:	e002      	b.n	801245c <tcp_fasttmr+0xac>
    } else {
      pcb = pcb->next;
 8012456:	687b      	ldr	r3, [r7, #4]
 8012458:	68db      	ldr	r3, [r3, #12]
 801245a:	607b      	str	r3, [r7, #4]
  while (pcb != NULL) {
 801245c:	687b      	ldr	r3, [r7, #4]
 801245e:	2b00      	cmp	r3, #0
 8012460:	d1b3      	bne.n	80123ca <tcp_fasttmr+0x1a>
    }
  }
}
 8012462:	bf00      	nop
 8012464:	bf00      	nop
 8012466:	3708      	adds	r7, #8
 8012468:	46bd      	mov	sp, r7
 801246a:	bd80      	pop	{r7, pc}
 801246c:	200070ea 	.word	0x200070ea
 8012470:	200070e0 	.word	0x200070e0
 8012474:	200070e8 	.word	0x200070e8

08012478 <tcp_process_refused_data>:
}

/** Pass pcb->refused_data to the recv callback */
err_t
tcp_process_refused_data(struct tcp_pcb *pcb)
{
 8012478:	b590      	push	{r4, r7, lr}
 801247a:	b085      	sub	sp, #20
 801247c:	af00      	add	r7, sp, #0
 801247e:	6078      	str	r0, [r7, #4]
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
  struct pbuf *rest;
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */

  LWIP_ERROR("tcp_process_refused_data: invalid pcb", pcb != NULL, return ERR_ARG);
 8012480:	687b      	ldr	r3, [r7, #4]
 8012482:	2b00      	cmp	r3, #0
 8012484:	d109      	bne.n	801249a <tcp_process_refused_data+0x22>
 8012486:	4b38      	ldr	r3, [pc, #224]	; (8012568 <tcp_process_refused_data+0xf0>)
 8012488:	f240 6209 	movw	r2, #1545	; 0x609
 801248c:	4937      	ldr	r1, [pc, #220]	; (801256c <tcp_process_refused_data+0xf4>)
 801248e:	4838      	ldr	r0, [pc, #224]	; (8012570 <tcp_process_refused_data+0xf8>)
 8012490:	f007 fce6 	bl	8019e60 <iprintf>
 8012494:	f06f 030f 	mvn.w	r3, #15
 8012498:	e061      	b.n	801255e <tcp_process_refused_data+0xe6>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
  while (pcb->refused_data != NULL)
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
  {
    err_t err;
    u8_t refused_flags = pcb->refused_data->flags;
 801249a:	687b      	ldr	r3, [r7, #4]
 801249c:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 801249e:	7b5b      	ldrb	r3, [r3, #13]
 80124a0:	73bb      	strb	r3, [r7, #14]
    /* set pcb->refused_data to NULL in case the callback frees it and then
       closes the pcb */
    struct pbuf *refused_data = pcb->refused_data;
 80124a2:	687b      	ldr	r3, [r7, #4]
 80124a4:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80124a6:	60bb      	str	r3, [r7, #8]
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
    pbuf_split_64k(refused_data, &rest);
    pcb->refused_data = rest;
#else /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
    pcb->refused_data = NULL;
 80124a8:	687b      	ldr	r3, [r7, #4]
 80124aa:	2200      	movs	r2, #0
 80124ac:	679a      	str	r2, [r3, #120]	; 0x78
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
    /* Notify again application with data previously received. */
    LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_input: notify kept packet\n"));
    TCP_EVENT_RECV(pcb, refused_data, ERR_OK, err);
 80124ae:	687b      	ldr	r3, [r7, #4]
 80124b0:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80124b4:	2b00      	cmp	r3, #0
 80124b6:	d00b      	beq.n	80124d0 <tcp_process_refused_data+0x58>
 80124b8:	687b      	ldr	r3, [r7, #4]
 80124ba:	f8d3 4084 	ldr.w	r4, [r3, #132]	; 0x84
 80124be:	687b      	ldr	r3, [r7, #4]
 80124c0:	6918      	ldr	r0, [r3, #16]
 80124c2:	2300      	movs	r3, #0
 80124c4:	68ba      	ldr	r2, [r7, #8]
 80124c6:	6879      	ldr	r1, [r7, #4]
 80124c8:	47a0      	blx	r4
 80124ca:	4603      	mov	r3, r0
 80124cc:	73fb      	strb	r3, [r7, #15]
 80124ce:	e007      	b.n	80124e0 <tcp_process_refused_data+0x68>
 80124d0:	2300      	movs	r3, #0
 80124d2:	68ba      	ldr	r2, [r7, #8]
 80124d4:	6879      	ldr	r1, [r7, #4]
 80124d6:	2000      	movs	r0, #0
 80124d8:	f000 f8a6 	bl	8012628 <tcp_recv_null>
 80124dc:	4603      	mov	r3, r0
 80124de:	73fb      	strb	r3, [r7, #15]
    if (err == ERR_OK) {
 80124e0:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80124e4:	2b00      	cmp	r3, #0
 80124e6:	d12b      	bne.n	8012540 <tcp_process_refused_data+0xc8>
      /* did refused_data include a FIN? */
      if ((refused_flags & PBUF_FLAG_TCP_FIN)
 80124e8:	7bbb      	ldrb	r3, [r7, #14]
 80124ea:	f003 0320 	and.w	r3, r3, #32
 80124ee:	2b00      	cmp	r3, #0
 80124f0:	d034      	beq.n	801255c <tcp_process_refused_data+0xe4>
          && (rest == NULL)
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
         ) {
        /* correct rcv_wnd as the application won't call tcp_recved()
           for the FIN's seqno */
        if (pcb->rcv_wnd != TCP_WND_MAX(pcb)) {
 80124f2:	687b      	ldr	r3, [r7, #4]
 80124f4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80124f6:	f241 62d0 	movw	r2, #5840	; 0x16d0
 80124fa:	4293      	cmp	r3, r2
 80124fc:	d005      	beq.n	801250a <tcp_process_refused_data+0x92>
          pcb->rcv_wnd++;
 80124fe:	687b      	ldr	r3, [r7, #4]
 8012500:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8012502:	3301      	adds	r3, #1
 8012504:	b29a      	uxth	r2, r3
 8012506:	687b      	ldr	r3, [r7, #4]
 8012508:	851a      	strh	r2, [r3, #40]	; 0x28
        }
        TCP_EVENT_CLOSED(pcb, err);
 801250a:	687b      	ldr	r3, [r7, #4]
 801250c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8012510:	2b00      	cmp	r3, #0
 8012512:	d00b      	beq.n	801252c <tcp_process_refused_data+0xb4>
 8012514:	687b      	ldr	r3, [r7, #4]
 8012516:	f8d3 4084 	ldr.w	r4, [r3, #132]	; 0x84
 801251a:	687b      	ldr	r3, [r7, #4]
 801251c:	6918      	ldr	r0, [r3, #16]
 801251e:	2300      	movs	r3, #0
 8012520:	2200      	movs	r2, #0
 8012522:	6879      	ldr	r1, [r7, #4]
 8012524:	47a0      	blx	r4
 8012526:	4603      	mov	r3, r0
 8012528:	73fb      	strb	r3, [r7, #15]
 801252a:	e001      	b.n	8012530 <tcp_process_refused_data+0xb8>
 801252c:	2300      	movs	r3, #0
 801252e:	73fb      	strb	r3, [r7, #15]
        if (err == ERR_ABRT) {
 8012530:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8012534:	f113 0f0d 	cmn.w	r3, #13
 8012538:	d110      	bne.n	801255c <tcp_process_refused_data+0xe4>
          return ERR_ABRT;
 801253a:	f06f 030c 	mvn.w	r3, #12
 801253e:	e00e      	b.n	801255e <tcp_process_refused_data+0xe6>
        }
      }
    } else if (err == ERR_ABRT) {
 8012540:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8012544:	f113 0f0d 	cmn.w	r3, #13
 8012548:	d102      	bne.n	8012550 <tcp_process_refused_data+0xd8>
      /* if err == ERR_ABRT, 'pcb' is already deallocated */
      /* Drop incoming packets because pcb is "full" (only if the incoming
         segment contains data). */
      LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_input: drop incoming packets, because pcb is \"full\"\n"));
      return ERR_ABRT;
 801254a:	f06f 030c 	mvn.w	r3, #12
 801254e:	e006      	b.n	801255e <tcp_process_refused_data+0xe6>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
      if (rest != NULL) {
        pbuf_cat(refused_data, rest);
      }
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
      pcb->refused_data = refused_data;
 8012550:	687b      	ldr	r3, [r7, #4]
 8012552:	68ba      	ldr	r2, [r7, #8]
 8012554:	679a      	str	r2, [r3, #120]	; 0x78
      return ERR_INPROGRESS;
 8012556:	f06f 0304 	mvn.w	r3, #4
 801255a:	e000      	b.n	801255e <tcp_process_refused_data+0xe6>
    }
  }
  return ERR_OK;
 801255c:	2300      	movs	r3, #0
}
 801255e:	4618      	mov	r0, r3
 8012560:	3714      	adds	r7, #20
 8012562:	46bd      	mov	sp, r7
 8012564:	bd90      	pop	{r4, r7, pc}
 8012566:	bf00      	nop
 8012568:	0801d484 	.word	0x0801d484
 801256c:	0801d994 	.word	0x0801d994
 8012570:	0801d4c8 	.word	0x0801d4c8

08012574 <tcp_segs_free>:
 *
 * @param seg tcp_seg list of TCP segments to free
 */
void
tcp_segs_free(struct tcp_seg *seg)
{
 8012574:	b580      	push	{r7, lr}
 8012576:	b084      	sub	sp, #16
 8012578:	af00      	add	r7, sp, #0
 801257a:	6078      	str	r0, [r7, #4]
  while (seg != NULL) {
 801257c:	e007      	b.n	801258e <tcp_segs_free+0x1a>
    struct tcp_seg *next = seg->next;
 801257e:	687b      	ldr	r3, [r7, #4]
 8012580:	681b      	ldr	r3, [r3, #0]
 8012582:	60fb      	str	r3, [r7, #12]
    tcp_seg_free(seg);
 8012584:	6878      	ldr	r0, [r7, #4]
 8012586:	f000 f80a 	bl	801259e <tcp_seg_free>
    seg = next;
 801258a:	68fb      	ldr	r3, [r7, #12]
 801258c:	607b      	str	r3, [r7, #4]
  while (seg != NULL) {
 801258e:	687b      	ldr	r3, [r7, #4]
 8012590:	2b00      	cmp	r3, #0
 8012592:	d1f4      	bne.n	801257e <tcp_segs_free+0xa>
  }
}
 8012594:	bf00      	nop
 8012596:	bf00      	nop
 8012598:	3710      	adds	r7, #16
 801259a:	46bd      	mov	sp, r7
 801259c:	bd80      	pop	{r7, pc}

0801259e <tcp_seg_free>:
 *
 * @param seg single tcp_seg to free
 */
void
tcp_seg_free(struct tcp_seg *seg)
{
 801259e:	b580      	push	{r7, lr}
 80125a0:	b082      	sub	sp, #8
 80125a2:	af00      	add	r7, sp, #0
 80125a4:	6078      	str	r0, [r7, #4]
  if (seg != NULL) {
 80125a6:	687b      	ldr	r3, [r7, #4]
 80125a8:	2b00      	cmp	r3, #0
 80125aa:	d00c      	beq.n	80125c6 <tcp_seg_free+0x28>
    if (seg->p != NULL) {
 80125ac:	687b      	ldr	r3, [r7, #4]
 80125ae:	685b      	ldr	r3, [r3, #4]
 80125b0:	2b00      	cmp	r3, #0
 80125b2:	d004      	beq.n	80125be <tcp_seg_free+0x20>
      pbuf_free(seg->p);
 80125b4:	687b      	ldr	r3, [r7, #4]
 80125b6:	685b      	ldr	r3, [r3, #4]
 80125b8:	4618      	mov	r0, r3
 80125ba:	f7fe fd79 	bl	80110b0 <pbuf_free>
#if TCP_DEBUG
      seg->p = NULL;
#endif /* TCP_DEBUG */
    }
    memp_free(MEMP_TCP_SEG, seg);
 80125be:	6879      	ldr	r1, [r7, #4]
 80125c0:	2003      	movs	r0, #3
 80125c2:	f7fd ff1f 	bl	8010404 <memp_free>
  }
}
 80125c6:	bf00      	nop
 80125c8:	3708      	adds	r7, #8
 80125ca:	46bd      	mov	sp, r7
 80125cc:	bd80      	pop	{r7, pc}
	...

080125d0 <tcp_seg_copy>:
 * @param seg the old tcp_seg
 * @return a copy of seg
 */
struct tcp_seg *
tcp_seg_copy(struct tcp_seg *seg)
{
 80125d0:	b580      	push	{r7, lr}
 80125d2:	b084      	sub	sp, #16
 80125d4:	af00      	add	r7, sp, #0
 80125d6:	6078      	str	r0, [r7, #4]
  struct tcp_seg *cseg;

  LWIP_ASSERT("tcp_seg_copy: invalid seg", seg != NULL);
 80125d8:	687b      	ldr	r3, [r7, #4]
 80125da:	2b00      	cmp	r3, #0
 80125dc:	d106      	bne.n	80125ec <tcp_seg_copy+0x1c>
 80125de:	4b0f      	ldr	r3, [pc, #60]	; (801261c <tcp_seg_copy+0x4c>)
 80125e0:	f240 6282 	movw	r2, #1666	; 0x682
 80125e4:	490e      	ldr	r1, [pc, #56]	; (8012620 <tcp_seg_copy+0x50>)
 80125e6:	480f      	ldr	r0, [pc, #60]	; (8012624 <tcp_seg_copy+0x54>)
 80125e8:	f007 fc3a 	bl	8019e60 <iprintf>

  cseg = (struct tcp_seg *)memp_malloc(MEMP_TCP_SEG);
 80125ec:	2003      	movs	r0, #3
 80125ee:	f7fd fe99 	bl	8010324 <memp_malloc>
 80125f2:	60f8      	str	r0, [r7, #12]
  if (cseg == NULL) {
 80125f4:	68fb      	ldr	r3, [r7, #12]
 80125f6:	2b00      	cmp	r3, #0
 80125f8:	d101      	bne.n	80125fe <tcp_seg_copy+0x2e>
    return NULL;
 80125fa:	2300      	movs	r3, #0
 80125fc:	e00a      	b.n	8012614 <tcp_seg_copy+0x44>
  }
  SMEMCPY((u8_t *)cseg, (const u8_t *)seg, sizeof(struct tcp_seg));
 80125fe:	2210      	movs	r2, #16
 8012600:	6879      	ldr	r1, [r7, #4]
 8012602:	68f8      	ldr	r0, [r7, #12]
 8012604:	f007 fdfb 	bl	801a1fe <memcpy>
  pbuf_ref(cseg->p);
 8012608:	68fb      	ldr	r3, [r7, #12]
 801260a:	685b      	ldr	r3, [r3, #4]
 801260c:	4618      	mov	r0, r3
 801260e:	f7fe fdef 	bl	80111f0 <pbuf_ref>
  return cseg;
 8012612:	68fb      	ldr	r3, [r7, #12]
}
 8012614:	4618      	mov	r0, r3
 8012616:	3710      	adds	r7, #16
 8012618:	46bd      	mov	sp, r7
 801261a:	bd80      	pop	{r7, pc}
 801261c:	0801d484 	.word	0x0801d484
 8012620:	0801d9d8 	.word	0x0801d9d8
 8012624:	0801d4c8 	.word	0x0801d4c8

08012628 <tcp_recv_null>:
 * Default receive callback that is called if the user didn't register
 * a recv callback for the pcb.
 */
err_t
tcp_recv_null(void *arg, struct tcp_pcb *pcb, struct pbuf *p, err_t err)
{
 8012628:	b580      	push	{r7, lr}
 801262a:	b084      	sub	sp, #16
 801262c:	af00      	add	r7, sp, #0
 801262e:	60f8      	str	r0, [r7, #12]
 8012630:	60b9      	str	r1, [r7, #8]
 8012632:	607a      	str	r2, [r7, #4]
 8012634:	70fb      	strb	r3, [r7, #3]
  LWIP_UNUSED_ARG(arg);

  LWIP_ERROR("tcp_recv_null: invalid pcb", pcb != NULL, return ERR_ARG);
 8012636:	68bb      	ldr	r3, [r7, #8]
 8012638:	2b00      	cmp	r3, #0
 801263a:	d109      	bne.n	8012650 <tcp_recv_null+0x28>
 801263c:	4b12      	ldr	r3, [pc, #72]	; (8012688 <tcp_recv_null+0x60>)
 801263e:	f44f 62d3 	mov.w	r2, #1688	; 0x698
 8012642:	4912      	ldr	r1, [pc, #72]	; (801268c <tcp_recv_null+0x64>)
 8012644:	4812      	ldr	r0, [pc, #72]	; (8012690 <tcp_recv_null+0x68>)
 8012646:	f007 fc0b 	bl	8019e60 <iprintf>
 801264a:	f06f 030f 	mvn.w	r3, #15
 801264e:	e016      	b.n	801267e <tcp_recv_null+0x56>

  if (p != NULL) {
 8012650:	687b      	ldr	r3, [r7, #4]
 8012652:	2b00      	cmp	r3, #0
 8012654:	d009      	beq.n	801266a <tcp_recv_null+0x42>
    tcp_recved(pcb, p->tot_len);
 8012656:	687b      	ldr	r3, [r7, #4]
 8012658:	891b      	ldrh	r3, [r3, #8]
 801265a:	4619      	mov	r1, r3
 801265c:	68b8      	ldr	r0, [r7, #8]
 801265e:	f7ff fb15 	bl	8011c8c <tcp_recved>
    pbuf_free(p);
 8012662:	6878      	ldr	r0, [r7, #4]
 8012664:	f7fe fd24 	bl	80110b0 <pbuf_free>
 8012668:	e008      	b.n	801267c <tcp_recv_null+0x54>
  } else if (err == ERR_OK) {
 801266a:	f997 3003 	ldrsb.w	r3, [r7, #3]
 801266e:	2b00      	cmp	r3, #0
 8012670:	d104      	bne.n	801267c <tcp_recv_null+0x54>
    return tcp_close(pcb);
 8012672:	68b8      	ldr	r0, [r7, #8]
 8012674:	f7ff f9ba 	bl	80119ec <tcp_close>
 8012678:	4603      	mov	r3, r0
 801267a:	e000      	b.n	801267e <tcp_recv_null+0x56>
  }
  return ERR_OK;
 801267c:	2300      	movs	r3, #0
}
 801267e:	4618      	mov	r0, r3
 8012680:	3710      	adds	r7, #16
 8012682:	46bd      	mov	sp, r7
 8012684:	bd80      	pop	{r7, pc}
 8012686:	bf00      	nop
 8012688:	0801d484 	.word	0x0801d484
 801268c:	0801d9f4 	.word	0x0801d9f4
 8012690:	0801d4c8 	.word	0x0801d4c8

08012694 <tcp_kill_prio>:
 *
 * @param prio minimum priority
 */
static void
tcp_kill_prio(u8_t prio)
{
 8012694:	b580      	push	{r7, lr}
 8012696:	b086      	sub	sp, #24
 8012698:	af00      	add	r7, sp, #0
 801269a:	4603      	mov	r3, r0
 801269c:	71fb      	strb	r3, [r7, #7]
  struct tcp_pcb *pcb, *inactive;
  u32_t inactivity;
  u8_t mprio;

  mprio = LWIP_MIN(TCP_PRIO_MAX, prio);
 801269e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80126a2:	2b00      	cmp	r3, #0
 80126a4:	db01      	blt.n	80126aa <tcp_kill_prio+0x16>
 80126a6:	79fb      	ldrb	r3, [r7, #7]
 80126a8:	e000      	b.n	80126ac <tcp_kill_prio+0x18>
 80126aa:	237f      	movs	r3, #127	; 0x7f
 80126ac:	72fb      	strb	r3, [r7, #11]

  /* We want to kill connections with a lower prio, so bail out if 
   * supplied prio is 0 - there can never be a lower prio
   */
  if (mprio == 0) {
 80126ae:	7afb      	ldrb	r3, [r7, #11]
 80126b0:	2b00      	cmp	r3, #0
 80126b2:	d034      	beq.n	801271e <tcp_kill_prio+0x8a>
  /* We only want kill connections with a lower prio, so decrement prio by one 
   * and start searching for oldest connection with same or lower priority than mprio.
   * We want to find the connections with the lowest possible prio, and among
   * these the one with the longest inactivity time.
   */
  mprio--;
 80126b4:	7afb      	ldrb	r3, [r7, #11]
 80126b6:	3b01      	subs	r3, #1
 80126b8:	72fb      	strb	r3, [r7, #11]

  inactivity = 0;
 80126ba:	2300      	movs	r3, #0
 80126bc:	60fb      	str	r3, [r7, #12]
  inactive = NULL;
 80126be:	2300      	movs	r3, #0
 80126c0:	613b      	str	r3, [r7, #16]
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 80126c2:	4b19      	ldr	r3, [pc, #100]	; (8012728 <tcp_kill_prio+0x94>)
 80126c4:	681b      	ldr	r3, [r3, #0]
 80126c6:	617b      	str	r3, [r7, #20]
 80126c8:	e01f      	b.n	801270a <tcp_kill_prio+0x76>
        /* lower prio is always a kill candidate */
    if ((pcb->prio < mprio) ||
 80126ca:	697b      	ldr	r3, [r7, #20]
 80126cc:	7d5b      	ldrb	r3, [r3, #21]
 80126ce:	7afa      	ldrb	r2, [r7, #11]
 80126d0:	429a      	cmp	r2, r3
 80126d2:	d80c      	bhi.n	80126ee <tcp_kill_prio+0x5a>
        /* longer inactivity is also a kill candidate */
        ((pcb->prio == mprio) && ((u32_t)(tcp_ticks - pcb->tmr) >= inactivity))) {
 80126d4:	697b      	ldr	r3, [r7, #20]
 80126d6:	7d5b      	ldrb	r3, [r3, #21]
    if ((pcb->prio < mprio) ||
 80126d8:	7afa      	ldrb	r2, [r7, #11]
 80126da:	429a      	cmp	r2, r3
 80126dc:	d112      	bne.n	8012704 <tcp_kill_prio+0x70>
        ((pcb->prio == mprio) && ((u32_t)(tcp_ticks - pcb->tmr) >= inactivity))) {
 80126de:	4b13      	ldr	r3, [pc, #76]	; (801272c <tcp_kill_prio+0x98>)
 80126e0:	681a      	ldr	r2, [r3, #0]
 80126e2:	697b      	ldr	r3, [r7, #20]
 80126e4:	6a1b      	ldr	r3, [r3, #32]
 80126e6:	1ad3      	subs	r3, r2, r3
 80126e8:	68fa      	ldr	r2, [r7, #12]
 80126ea:	429a      	cmp	r2, r3
 80126ec:	d80a      	bhi.n	8012704 <tcp_kill_prio+0x70>
      inactivity = tcp_ticks - pcb->tmr;
 80126ee:	4b0f      	ldr	r3, [pc, #60]	; (801272c <tcp_kill_prio+0x98>)
 80126f0:	681a      	ldr	r2, [r3, #0]
 80126f2:	697b      	ldr	r3, [r7, #20]
 80126f4:	6a1b      	ldr	r3, [r3, #32]
 80126f6:	1ad3      	subs	r3, r2, r3
 80126f8:	60fb      	str	r3, [r7, #12]
      inactive   = pcb;
 80126fa:	697b      	ldr	r3, [r7, #20]
 80126fc:	613b      	str	r3, [r7, #16]
      mprio      = pcb->prio;
 80126fe:	697b      	ldr	r3, [r7, #20]
 8012700:	7d5b      	ldrb	r3, [r3, #21]
 8012702:	72fb      	strb	r3, [r7, #11]
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 8012704:	697b      	ldr	r3, [r7, #20]
 8012706:	68db      	ldr	r3, [r3, #12]
 8012708:	617b      	str	r3, [r7, #20]
 801270a:	697b      	ldr	r3, [r7, #20]
 801270c:	2b00      	cmp	r3, #0
 801270e:	d1dc      	bne.n	80126ca <tcp_kill_prio+0x36>
    }
  }
  if (inactive != NULL) {
 8012710:	693b      	ldr	r3, [r7, #16]
 8012712:	2b00      	cmp	r3, #0
 8012714:	d004      	beq.n	8012720 <tcp_kill_prio+0x8c>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_kill_prio: killing oldest PCB %p (%"S32_F")\n",
                            (void *)inactive, inactivity));
    tcp_abort(inactive);
 8012716:	6938      	ldr	r0, [r7, #16]
 8012718:	f7ff fa52 	bl	8011bc0 <tcp_abort>
 801271c:	e000      	b.n	8012720 <tcp_kill_prio+0x8c>
    return;
 801271e:	bf00      	nop
  }
}
 8012720:	3718      	adds	r7, #24
 8012722:	46bd      	mov	sp, r7
 8012724:	bd80      	pop	{r7, pc}
 8012726:	bf00      	nop
 8012728:	200070e0 	.word	0x200070e0
 801272c:	200070d4 	.word	0x200070d4

08012730 <tcp_kill_state>:
 * Kills the oldest connection that is in specific state.
 * Called from tcp_alloc() for LAST_ACK and CLOSING if no more connections are available.
 */
static void
tcp_kill_state(enum tcp_state state)
{
 8012730:	b580      	push	{r7, lr}
 8012732:	b086      	sub	sp, #24
 8012734:	af00      	add	r7, sp, #0
 8012736:	4603      	mov	r3, r0
 8012738:	71fb      	strb	r3, [r7, #7]
  struct tcp_pcb *pcb, *inactive;
  u32_t inactivity;

  LWIP_ASSERT("invalid state", (state == CLOSING) || (state == LAST_ACK));
 801273a:	79fb      	ldrb	r3, [r7, #7]
 801273c:	2b08      	cmp	r3, #8
 801273e:	d009      	beq.n	8012754 <tcp_kill_state+0x24>
 8012740:	79fb      	ldrb	r3, [r7, #7]
 8012742:	2b09      	cmp	r3, #9
 8012744:	d006      	beq.n	8012754 <tcp_kill_state+0x24>
 8012746:	4b1a      	ldr	r3, [pc, #104]	; (80127b0 <tcp_kill_state+0x80>)
 8012748:	f240 62dd 	movw	r2, #1757	; 0x6dd
 801274c:	4919      	ldr	r1, [pc, #100]	; (80127b4 <tcp_kill_state+0x84>)
 801274e:	481a      	ldr	r0, [pc, #104]	; (80127b8 <tcp_kill_state+0x88>)
 8012750:	f007 fb86 	bl	8019e60 <iprintf>

  inactivity = 0;
 8012754:	2300      	movs	r3, #0
 8012756:	60fb      	str	r3, [r7, #12]
  inactive = NULL;
 8012758:	2300      	movs	r3, #0
 801275a:	613b      	str	r3, [r7, #16]
  /* Go through the list of active pcbs and get the oldest pcb that is in state
     CLOSING/LAST_ACK. */
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 801275c:	4b17      	ldr	r3, [pc, #92]	; (80127bc <tcp_kill_state+0x8c>)
 801275e:	681b      	ldr	r3, [r3, #0]
 8012760:	617b      	str	r3, [r7, #20]
 8012762:	e017      	b.n	8012794 <tcp_kill_state+0x64>
    if (pcb->state == state) {
 8012764:	697b      	ldr	r3, [r7, #20]
 8012766:	7d1b      	ldrb	r3, [r3, #20]
 8012768:	79fa      	ldrb	r2, [r7, #7]
 801276a:	429a      	cmp	r2, r3
 801276c:	d10f      	bne.n	801278e <tcp_kill_state+0x5e>
      if ((u32_t)(tcp_ticks - pcb->tmr) >= inactivity) {
 801276e:	4b14      	ldr	r3, [pc, #80]	; (80127c0 <tcp_kill_state+0x90>)
 8012770:	681a      	ldr	r2, [r3, #0]
 8012772:	697b      	ldr	r3, [r7, #20]
 8012774:	6a1b      	ldr	r3, [r3, #32]
 8012776:	1ad3      	subs	r3, r2, r3
 8012778:	68fa      	ldr	r2, [r7, #12]
 801277a:	429a      	cmp	r2, r3
 801277c:	d807      	bhi.n	801278e <tcp_kill_state+0x5e>
        inactivity = tcp_ticks - pcb->tmr;
 801277e:	4b10      	ldr	r3, [pc, #64]	; (80127c0 <tcp_kill_state+0x90>)
 8012780:	681a      	ldr	r2, [r3, #0]
 8012782:	697b      	ldr	r3, [r7, #20]
 8012784:	6a1b      	ldr	r3, [r3, #32]
 8012786:	1ad3      	subs	r3, r2, r3
 8012788:	60fb      	str	r3, [r7, #12]
        inactive = pcb;
 801278a:	697b      	ldr	r3, [r7, #20]
 801278c:	613b      	str	r3, [r7, #16]
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 801278e:	697b      	ldr	r3, [r7, #20]
 8012790:	68db      	ldr	r3, [r3, #12]
 8012792:	617b      	str	r3, [r7, #20]
 8012794:	697b      	ldr	r3, [r7, #20]
 8012796:	2b00      	cmp	r3, #0
 8012798:	d1e4      	bne.n	8012764 <tcp_kill_state+0x34>
      }
    }
  }
  if (inactive != NULL) {
 801279a:	693b      	ldr	r3, [r7, #16]
 801279c:	2b00      	cmp	r3, #0
 801279e:	d003      	beq.n	80127a8 <tcp_kill_state+0x78>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_kill_closing: killing oldest %s PCB %p (%"S32_F")\n",
                            tcp_state_str[state], (void *)inactive, inactivity));
    /* Don't send a RST, since no data is lost. */
    tcp_abandon(inactive, 0);
 80127a0:	2100      	movs	r1, #0
 80127a2:	6938      	ldr	r0, [r7, #16]
 80127a4:	f7ff f94e 	bl	8011a44 <tcp_abandon>
  }
}
 80127a8:	bf00      	nop
 80127aa:	3718      	adds	r7, #24
 80127ac:	46bd      	mov	sp, r7
 80127ae:	bd80      	pop	{r7, pc}
 80127b0:	0801d484 	.word	0x0801d484
 80127b4:	0801da10 	.word	0x0801da10
 80127b8:	0801d4c8 	.word	0x0801d4c8
 80127bc:	200070e0 	.word	0x200070e0
 80127c0:	200070d4 	.word	0x200070d4

080127c4 <tcp_kill_timewait>:
 * Kills the oldest connection that is in TIME_WAIT state.
 * Called from tcp_alloc() if no more connections are available.
 */
static void
tcp_kill_timewait(void)
{
 80127c4:	b580      	push	{r7, lr}
 80127c6:	b084      	sub	sp, #16
 80127c8:	af00      	add	r7, sp, #0
  struct tcp_pcb *pcb, *inactive;
  u32_t inactivity;

  inactivity = 0;
 80127ca:	2300      	movs	r3, #0
 80127cc:	607b      	str	r3, [r7, #4]
  inactive = NULL;
 80127ce:	2300      	movs	r3, #0
 80127d0:	60bb      	str	r3, [r7, #8]
  /* Go through the list of TIME_WAIT pcbs and get the oldest pcb. */
  for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 80127d2:	4b12      	ldr	r3, [pc, #72]	; (801281c <tcp_kill_timewait+0x58>)
 80127d4:	681b      	ldr	r3, [r3, #0]
 80127d6:	60fb      	str	r3, [r7, #12]
 80127d8:	e012      	b.n	8012800 <tcp_kill_timewait+0x3c>
    if ((u32_t)(tcp_ticks - pcb->tmr) >= inactivity) {
 80127da:	4b11      	ldr	r3, [pc, #68]	; (8012820 <tcp_kill_timewait+0x5c>)
 80127dc:	681a      	ldr	r2, [r3, #0]
 80127de:	68fb      	ldr	r3, [r7, #12]
 80127e0:	6a1b      	ldr	r3, [r3, #32]
 80127e2:	1ad3      	subs	r3, r2, r3
 80127e4:	687a      	ldr	r2, [r7, #4]
 80127e6:	429a      	cmp	r2, r3
 80127e8:	d807      	bhi.n	80127fa <tcp_kill_timewait+0x36>
      inactivity = tcp_ticks - pcb->tmr;
 80127ea:	4b0d      	ldr	r3, [pc, #52]	; (8012820 <tcp_kill_timewait+0x5c>)
 80127ec:	681a      	ldr	r2, [r3, #0]
 80127ee:	68fb      	ldr	r3, [r7, #12]
 80127f0:	6a1b      	ldr	r3, [r3, #32]
 80127f2:	1ad3      	subs	r3, r2, r3
 80127f4:	607b      	str	r3, [r7, #4]
      inactive = pcb;
 80127f6:	68fb      	ldr	r3, [r7, #12]
 80127f8:	60bb      	str	r3, [r7, #8]
  for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 80127fa:	68fb      	ldr	r3, [r7, #12]
 80127fc:	68db      	ldr	r3, [r3, #12]
 80127fe:	60fb      	str	r3, [r7, #12]
 8012800:	68fb      	ldr	r3, [r7, #12]
 8012802:	2b00      	cmp	r3, #0
 8012804:	d1e9      	bne.n	80127da <tcp_kill_timewait+0x16>
    }
  }
  if (inactive != NULL) {
 8012806:	68bb      	ldr	r3, [r7, #8]
 8012808:	2b00      	cmp	r3, #0
 801280a:	d002      	beq.n	8012812 <tcp_kill_timewait+0x4e>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_kill_timewait: killing oldest TIME-WAIT PCB %p (%"S32_F")\n",
                            (void *)inactive, inactivity));
    tcp_abort(inactive);
 801280c:	68b8      	ldr	r0, [r7, #8]
 801280e:	f7ff f9d7 	bl	8011bc0 <tcp_abort>
  }
}
 8012812:	bf00      	nop
 8012814:	3710      	adds	r7, #16
 8012816:	46bd      	mov	sp, r7
 8012818:	bd80      	pop	{r7, pc}
 801281a:	bf00      	nop
 801281c:	200070e4 	.word	0x200070e4
 8012820:	200070d4 	.word	0x200070d4

08012824 <tcp_handle_closepend>:
 * now send the FIN (which failed before), the pcb might be in a state that is
 * OK for us to now free it.
 */
static void
tcp_handle_closepend(void)
{
 8012824:	b580      	push	{r7, lr}
 8012826:	b082      	sub	sp, #8
 8012828:	af00      	add	r7, sp, #0
  struct tcp_pcb *pcb = tcp_active_pcbs;
 801282a:	4b10      	ldr	r3, [pc, #64]	; (801286c <tcp_handle_closepend+0x48>)
 801282c:	681b      	ldr	r3, [r3, #0]
 801282e:	607b      	str	r3, [r7, #4]

  while (pcb != NULL) {
 8012830:	e014      	b.n	801285c <tcp_handle_closepend+0x38>
    struct tcp_pcb *next = pcb->next;
 8012832:	687b      	ldr	r3, [r7, #4]
 8012834:	68db      	ldr	r3, [r3, #12]
 8012836:	603b      	str	r3, [r7, #0]
    /* send pending FIN */
    if (pcb->flags & TF_CLOSEPEND) {
 8012838:	687b      	ldr	r3, [r7, #4]
 801283a:	8b5b      	ldrh	r3, [r3, #26]
 801283c:	f003 0308 	and.w	r3, r3, #8
 8012840:	2b00      	cmp	r3, #0
 8012842:	d009      	beq.n	8012858 <tcp_handle_closepend+0x34>
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_handle_closepend: pending FIN\n"));
      tcp_clear_flags(pcb, TF_CLOSEPEND);
 8012844:	687b      	ldr	r3, [r7, #4]
 8012846:	8b5b      	ldrh	r3, [r3, #26]
 8012848:	f023 0308 	bic.w	r3, r3, #8
 801284c:	b29a      	uxth	r2, r3
 801284e:	687b      	ldr	r3, [r7, #4]
 8012850:	835a      	strh	r2, [r3, #26]
      tcp_close_shutdown_fin(pcb);
 8012852:	6878      	ldr	r0, [r7, #4]
 8012854:	f7ff f860 	bl	8011918 <tcp_close_shutdown_fin>
    }
    pcb = next;
 8012858:	683b      	ldr	r3, [r7, #0]
 801285a:	607b      	str	r3, [r7, #4]
  while (pcb != NULL) {
 801285c:	687b      	ldr	r3, [r7, #4]
 801285e:	2b00      	cmp	r3, #0
 8012860:	d1e7      	bne.n	8012832 <tcp_handle_closepend+0xe>
  }
}
 8012862:	bf00      	nop
 8012864:	bf00      	nop
 8012866:	3708      	adds	r7, #8
 8012868:	46bd      	mov	sp, r7
 801286a:	bd80      	pop	{r7, pc}
 801286c:	200070e0 	.word	0x200070e0

08012870 <tcp_alloc>:
 * @param prio priority for the new pcb
 * @return a new tcp_pcb that initially is in state CLOSED
 */
struct tcp_pcb *
tcp_alloc(u8_t prio)
{
 8012870:	b580      	push	{r7, lr}
 8012872:	b084      	sub	sp, #16
 8012874:	af00      	add	r7, sp, #0
 8012876:	4603      	mov	r3, r0
 8012878:	71fb      	strb	r3, [r7, #7]
  struct tcp_pcb *pcb;

  LWIP_ASSERT_CORE_LOCKED();

  pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 801287a:	2001      	movs	r0, #1
 801287c:	f7fd fd52 	bl	8010324 <memp_malloc>
 8012880:	60f8      	str	r0, [r7, #12]
  if (pcb == NULL) {
 8012882:	68fb      	ldr	r3, [r7, #12]
 8012884:	2b00      	cmp	r3, #0
 8012886:	d126      	bne.n	80128d6 <tcp_alloc+0x66>
    /* Try to send FIN for all pcbs stuck in TF_CLOSEPEND first */
    tcp_handle_closepend();
 8012888:	f7ff ffcc 	bl	8012824 <tcp_handle_closepend>

    /* Try killing oldest connection in TIME-WAIT. */
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_alloc: killing off oldest TIME-WAIT connection\n"));
    tcp_kill_timewait();
 801288c:	f7ff ff9a 	bl	80127c4 <tcp_kill_timewait>
    /* Try to allocate a tcp_pcb again. */
    pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 8012890:	2001      	movs	r0, #1
 8012892:	f7fd fd47 	bl	8010324 <memp_malloc>
 8012896:	60f8      	str	r0, [r7, #12]
    if (pcb == NULL) {
 8012898:	68fb      	ldr	r3, [r7, #12]
 801289a:	2b00      	cmp	r3, #0
 801289c:	d11b      	bne.n	80128d6 <tcp_alloc+0x66>
      /* Try killing oldest connection in LAST-ACK (these wouldn't go to TIME-WAIT). */
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_alloc: killing off oldest LAST-ACK connection\n"));
      tcp_kill_state(LAST_ACK);
 801289e:	2009      	movs	r0, #9
 80128a0:	f7ff ff46 	bl	8012730 <tcp_kill_state>
      /* Try to allocate a tcp_pcb again. */
      pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 80128a4:	2001      	movs	r0, #1
 80128a6:	f7fd fd3d 	bl	8010324 <memp_malloc>
 80128aa:	60f8      	str	r0, [r7, #12]
      if (pcb == NULL) {
 80128ac:	68fb      	ldr	r3, [r7, #12]
 80128ae:	2b00      	cmp	r3, #0
 80128b0:	d111      	bne.n	80128d6 <tcp_alloc+0x66>
        /* Try killing oldest connection in CLOSING. */
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_alloc: killing off oldest CLOSING connection\n"));
        tcp_kill_state(CLOSING);
 80128b2:	2008      	movs	r0, #8
 80128b4:	f7ff ff3c 	bl	8012730 <tcp_kill_state>
        /* Try to allocate a tcp_pcb again. */
        pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 80128b8:	2001      	movs	r0, #1
 80128ba:	f7fd fd33 	bl	8010324 <memp_malloc>
 80128be:	60f8      	str	r0, [r7, #12]
        if (pcb == NULL) {
 80128c0:	68fb      	ldr	r3, [r7, #12]
 80128c2:	2b00      	cmp	r3, #0
 80128c4:	d107      	bne.n	80128d6 <tcp_alloc+0x66>
          /* Try killing oldest active connection with lower priority than the new one. */
          LWIP_DEBUGF(TCP_DEBUG, ("tcp_alloc: killing oldest connection with prio lower than %d\n", prio));
          tcp_kill_prio(prio);
 80128c6:	79fb      	ldrb	r3, [r7, #7]
 80128c8:	4618      	mov	r0, r3
 80128ca:	f7ff fee3 	bl	8012694 <tcp_kill_prio>
          /* Try to allocate a tcp_pcb again. */
          pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 80128ce:	2001      	movs	r0, #1
 80128d0:	f7fd fd28 	bl	8010324 <memp_malloc>
 80128d4:	60f8      	str	r0, [r7, #12]
    if (pcb != NULL) {
      /* adjust err stats: memp_malloc failed above */
      MEMP_STATS_DEC(err, MEMP_TCP_PCB);
    }
  }
  if (pcb != NULL) {
 80128d6:	68fb      	ldr	r3, [r7, #12]
 80128d8:	2b00      	cmp	r3, #0
 80128da:	d03f      	beq.n	801295c <tcp_alloc+0xec>
    /* zero out the whole pcb, so there is no need to initialize members to zero */
    memset(pcb, 0, sizeof(struct tcp_pcb));
 80128dc:	229c      	movs	r2, #156	; 0x9c
 80128de:	2100      	movs	r1, #0
 80128e0:	68f8      	ldr	r0, [r7, #12]
 80128e2:	f007 fc13 	bl	801a10c <memset>
    pcb->prio = prio;
 80128e6:	68fb      	ldr	r3, [r7, #12]
 80128e8:	79fa      	ldrb	r2, [r7, #7]
 80128ea:	755a      	strb	r2, [r3, #21]
    pcb->snd_buf = TCP_SND_BUF;
 80128ec:	68fb      	ldr	r3, [r7, #12]
 80128ee:	f241 62d0 	movw	r2, #5840	; 0x16d0
 80128f2:	f8a3 2064 	strh.w	r2, [r3, #100]	; 0x64
    /* Start with a window that does not need scaling. When window scaling is
       enabled and used, the window is enlarged when both sides agree on scaling. */
    pcb->rcv_wnd = pcb->rcv_ann_wnd = TCPWND_MIN16(TCP_WND);
 80128f6:	68fb      	ldr	r3, [r7, #12]
 80128f8:	f241 62d0 	movw	r2, #5840	; 0x16d0
 80128fc:	855a      	strh	r2, [r3, #42]	; 0x2a
 80128fe:	68fb      	ldr	r3, [r7, #12]
 8012900:	8d5a      	ldrh	r2, [r3, #42]	; 0x2a
 8012902:	68fb      	ldr	r3, [r7, #12]
 8012904:	851a      	strh	r2, [r3, #40]	; 0x28
    pcb->ttl = TCP_TTL;
 8012906:	68fb      	ldr	r3, [r7, #12]
 8012908:	22ff      	movs	r2, #255	; 0xff
 801290a:	72da      	strb	r2, [r3, #11]
    /* As initial send MSS, we use TCP_MSS but limit it to 536.
       The send MSS is updated when an MSS option is received. */
    pcb->mss = INITIAL_MSS;
 801290c:	68fb      	ldr	r3, [r7, #12]
 801290e:	f44f 7206 	mov.w	r2, #536	; 0x218
 8012912:	865a      	strh	r2, [r3, #50]	; 0x32
    pcb->rto = 3000 / TCP_SLOW_INTERVAL;
 8012914:	68fb      	ldr	r3, [r7, #12]
 8012916:	2206      	movs	r2, #6
 8012918:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
    pcb->sv = 3000 / TCP_SLOW_INTERVAL;
 801291c:	68fb      	ldr	r3, [r7, #12]
 801291e:	2206      	movs	r2, #6
 8012920:	87da      	strh	r2, [r3, #62]	; 0x3e
    pcb->rtime = -1;
 8012922:	68fb      	ldr	r3, [r7, #12]
 8012924:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8012928:	861a      	strh	r2, [r3, #48]	; 0x30
    pcb->cwnd = 1;
 801292a:	68fb      	ldr	r3, [r7, #12]
 801292c:	2201      	movs	r2, #1
 801292e:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
    pcb->tmr = tcp_ticks;
 8012932:	4b0d      	ldr	r3, [pc, #52]	; (8012968 <tcp_alloc+0xf8>)
 8012934:	681a      	ldr	r2, [r3, #0]
 8012936:	68fb      	ldr	r3, [r7, #12]
 8012938:	621a      	str	r2, [r3, #32]
    pcb->last_timer = tcp_timer_ctr;
 801293a:	4b0c      	ldr	r3, [pc, #48]	; (801296c <tcp_alloc+0xfc>)
 801293c:	781a      	ldrb	r2, [r3, #0]
 801293e:	68fb      	ldr	r3, [r7, #12]
 8012940:	779a      	strb	r2, [r3, #30]
    of using the largest advertised receive window.  We've seen complications with
    receiving TCPs that use window scaling and/or window auto-tuning where the
    initial advertised window is very small and then grows rapidly once the
    connection is established. To avoid these complications, we set ssthresh to the
    largest effective cwnd (amount of in-flight data) that the sender can have. */
    pcb->ssthresh = TCP_SND_BUF;
 8012942:	68fb      	ldr	r3, [r7, #12]
 8012944:	f241 62d0 	movw	r2, #5840	; 0x16d0
 8012948:	f8a3 204a 	strh.w	r2, [r3, #74]	; 0x4a

#if LWIP_CALLBACK_API
    pcb->recv = tcp_recv_null;
 801294c:	68fb      	ldr	r3, [r7, #12]
 801294e:	4a08      	ldr	r2, [pc, #32]	; (8012970 <tcp_alloc+0x100>)
 8012950:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
#endif /* LWIP_CALLBACK_API */

    /* Init KEEPALIVE timer */
    pcb->keep_idle  = TCP_KEEPIDLE_DEFAULT;
 8012954:	68fb      	ldr	r3, [r7, #12]
 8012956:	4a07      	ldr	r2, [pc, #28]	; (8012974 <tcp_alloc+0x104>)
 8012958:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
#if LWIP_TCP_KEEPALIVE
    pcb->keep_intvl = TCP_KEEPINTVL_DEFAULT;
    pcb->keep_cnt   = TCP_KEEPCNT_DEFAULT;
#endif /* LWIP_TCP_KEEPALIVE */
  }
  return pcb;
 801295c:	68fb      	ldr	r3, [r7, #12]
}
 801295e:	4618      	mov	r0, r3
 8012960:	3710      	adds	r7, #16
 8012962:	46bd      	mov	sp, r7
 8012964:	bd80      	pop	{r7, pc}
 8012966:	bf00      	nop
 8012968:	200070d4 	.word	0x200070d4
 801296c:	200070ea 	.word	0x200070ea
 8012970:	08012629 	.word	0x08012629
 8012974:	006ddd00 	.word	0x006ddd00

08012978 <tcp_pcb_purge>:
 *
 * @param pcb tcp_pcb to purge. The pcb itself is not deallocated!
 */
void
tcp_pcb_purge(struct tcp_pcb *pcb)
{
 8012978:	b580      	push	{r7, lr}
 801297a:	b082      	sub	sp, #8
 801297c:	af00      	add	r7, sp, #0
 801297e:	6078      	str	r0, [r7, #4]
  LWIP_ERROR("tcp_pcb_purge: invalid pcb", pcb != NULL, return);
 8012980:	687b      	ldr	r3, [r7, #4]
 8012982:	2b00      	cmp	r3, #0
 8012984:	d107      	bne.n	8012996 <tcp_pcb_purge+0x1e>
 8012986:	4b21      	ldr	r3, [pc, #132]	; (8012a0c <tcp_pcb_purge+0x94>)
 8012988:	f640 0251 	movw	r2, #2129	; 0x851
 801298c:	4920      	ldr	r1, [pc, #128]	; (8012a10 <tcp_pcb_purge+0x98>)
 801298e:	4821      	ldr	r0, [pc, #132]	; (8012a14 <tcp_pcb_purge+0x9c>)
 8012990:	f007 fa66 	bl	8019e60 <iprintf>
 8012994:	e037      	b.n	8012a06 <tcp_pcb_purge+0x8e>

  if (pcb->state != CLOSED &&
 8012996:	687b      	ldr	r3, [r7, #4]
 8012998:	7d1b      	ldrb	r3, [r3, #20]
 801299a:	2b00      	cmp	r3, #0
 801299c:	d033      	beq.n	8012a06 <tcp_pcb_purge+0x8e>
      pcb->state != TIME_WAIT &&
 801299e:	687b      	ldr	r3, [r7, #4]
 80129a0:	7d1b      	ldrb	r3, [r3, #20]
  if (pcb->state != CLOSED &&
 80129a2:	2b0a      	cmp	r3, #10
 80129a4:	d02f      	beq.n	8012a06 <tcp_pcb_purge+0x8e>
      pcb->state != LISTEN) {
 80129a6:	687b      	ldr	r3, [r7, #4]
 80129a8:	7d1b      	ldrb	r3, [r3, #20]
      pcb->state != TIME_WAIT &&
 80129aa:	2b01      	cmp	r3, #1
 80129ac:	d02b      	beq.n	8012a06 <tcp_pcb_purge+0x8e>

    LWIP_DEBUGF(TCP_DEBUG, ("tcp_pcb_purge\n"));

    tcp_backlog_accepted(pcb);

    if (pcb->refused_data != NULL) {
 80129ae:	687b      	ldr	r3, [r7, #4]
 80129b0:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80129b2:	2b00      	cmp	r3, #0
 80129b4:	d007      	beq.n	80129c6 <tcp_pcb_purge+0x4e>
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_pcb_purge: data left on ->refused_data\n"));
      pbuf_free(pcb->refused_data);
 80129b6:	687b      	ldr	r3, [r7, #4]
 80129b8:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80129ba:	4618      	mov	r0, r3
 80129bc:	f7fe fb78 	bl	80110b0 <pbuf_free>
      pcb->refused_data = NULL;
 80129c0:	687b      	ldr	r3, [r7, #4]
 80129c2:	2200      	movs	r2, #0
 80129c4:	679a      	str	r2, [r3, #120]	; 0x78
    }
    if (pcb->unacked != NULL) {
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_pcb_purge: data left on ->unacked\n"));
    }
#if TCP_QUEUE_OOSEQ
    if (pcb->ooseq != NULL) {
 80129c6:	687b      	ldr	r3, [r7, #4]
 80129c8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80129ca:	2b00      	cmp	r3, #0
 80129cc:	d002      	beq.n	80129d4 <tcp_pcb_purge+0x5c>
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_pcb_purge: data left on ->ooseq\n"));
      tcp_free_ooseq(pcb);
 80129ce:	6878      	ldr	r0, [r7, #4]
 80129d0:	f000 f986 	bl	8012ce0 <tcp_free_ooseq>
    }
#endif /* TCP_QUEUE_OOSEQ */

    /* Stop the retransmission timer as it will expect data on unacked
       queue if it fires */
    pcb->rtime = -1;
 80129d4:	687b      	ldr	r3, [r7, #4]
 80129d6:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80129da:	861a      	strh	r2, [r3, #48]	; 0x30

    tcp_segs_free(pcb->unsent);
 80129dc:	687b      	ldr	r3, [r7, #4]
 80129de:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80129e0:	4618      	mov	r0, r3
 80129e2:	f7ff fdc7 	bl	8012574 <tcp_segs_free>
    tcp_segs_free(pcb->unacked);
 80129e6:	687b      	ldr	r3, [r7, #4]
 80129e8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80129ea:	4618      	mov	r0, r3
 80129ec:	f7ff fdc2 	bl	8012574 <tcp_segs_free>
    pcb->unacked = pcb->unsent = NULL;
 80129f0:	687b      	ldr	r3, [r7, #4]
 80129f2:	2200      	movs	r2, #0
 80129f4:	66da      	str	r2, [r3, #108]	; 0x6c
 80129f6:	687b      	ldr	r3, [r7, #4]
 80129f8:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 80129fa:	687b      	ldr	r3, [r7, #4]
 80129fc:	671a      	str	r2, [r3, #112]	; 0x70
#if TCP_OVERSIZE
    pcb->unsent_oversize = 0;
 80129fe:	687b      	ldr	r3, [r7, #4]
 8012a00:	2200      	movs	r2, #0
 8012a02:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
#endif /* TCP_OVERSIZE */
  }
}
 8012a06:	3708      	adds	r7, #8
 8012a08:	46bd      	mov	sp, r7
 8012a0a:	bd80      	pop	{r7, pc}
 8012a0c:	0801d484 	.word	0x0801d484
 8012a10:	0801dad0 	.word	0x0801dad0
 8012a14:	0801d4c8 	.word	0x0801d4c8

08012a18 <tcp_pcb_remove>:
 * @param pcblist PCB list to purge.
 * @param pcb tcp_pcb to purge. The pcb itself is NOT deallocated!
 */
void
tcp_pcb_remove(struct tcp_pcb **pcblist, struct tcp_pcb *pcb)
{
 8012a18:	b580      	push	{r7, lr}
 8012a1a:	b084      	sub	sp, #16
 8012a1c:	af00      	add	r7, sp, #0
 8012a1e:	6078      	str	r0, [r7, #4]
 8012a20:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT("tcp_pcb_remove: invalid pcb", pcb != NULL);
 8012a22:	683b      	ldr	r3, [r7, #0]
 8012a24:	2b00      	cmp	r3, #0
 8012a26:	d106      	bne.n	8012a36 <tcp_pcb_remove+0x1e>
 8012a28:	4b3e      	ldr	r3, [pc, #248]	; (8012b24 <tcp_pcb_remove+0x10c>)
 8012a2a:	f640 0283 	movw	r2, #2179	; 0x883
 8012a2e:	493e      	ldr	r1, [pc, #248]	; (8012b28 <tcp_pcb_remove+0x110>)
 8012a30:	483e      	ldr	r0, [pc, #248]	; (8012b2c <tcp_pcb_remove+0x114>)
 8012a32:	f007 fa15 	bl	8019e60 <iprintf>
  LWIP_ASSERT("tcp_pcb_remove: invalid pcblist", pcblist != NULL);
 8012a36:	687b      	ldr	r3, [r7, #4]
 8012a38:	2b00      	cmp	r3, #0
 8012a3a:	d106      	bne.n	8012a4a <tcp_pcb_remove+0x32>
 8012a3c:	4b39      	ldr	r3, [pc, #228]	; (8012b24 <tcp_pcb_remove+0x10c>)
 8012a3e:	f640 0284 	movw	r2, #2180	; 0x884
 8012a42:	493b      	ldr	r1, [pc, #236]	; (8012b30 <tcp_pcb_remove+0x118>)
 8012a44:	4839      	ldr	r0, [pc, #228]	; (8012b2c <tcp_pcb_remove+0x114>)
 8012a46:	f007 fa0b 	bl	8019e60 <iprintf>

  TCP_RMV(pcblist, pcb);
 8012a4a:	687b      	ldr	r3, [r7, #4]
 8012a4c:	681b      	ldr	r3, [r3, #0]
 8012a4e:	683a      	ldr	r2, [r7, #0]
 8012a50:	429a      	cmp	r2, r3
 8012a52:	d105      	bne.n	8012a60 <tcp_pcb_remove+0x48>
 8012a54:	687b      	ldr	r3, [r7, #4]
 8012a56:	681b      	ldr	r3, [r3, #0]
 8012a58:	68da      	ldr	r2, [r3, #12]
 8012a5a:	687b      	ldr	r3, [r7, #4]
 8012a5c:	601a      	str	r2, [r3, #0]
 8012a5e:	e013      	b.n	8012a88 <tcp_pcb_remove+0x70>
 8012a60:	687b      	ldr	r3, [r7, #4]
 8012a62:	681b      	ldr	r3, [r3, #0]
 8012a64:	60fb      	str	r3, [r7, #12]
 8012a66:	e00c      	b.n	8012a82 <tcp_pcb_remove+0x6a>
 8012a68:	68fb      	ldr	r3, [r7, #12]
 8012a6a:	68db      	ldr	r3, [r3, #12]
 8012a6c:	683a      	ldr	r2, [r7, #0]
 8012a6e:	429a      	cmp	r2, r3
 8012a70:	d104      	bne.n	8012a7c <tcp_pcb_remove+0x64>
 8012a72:	683b      	ldr	r3, [r7, #0]
 8012a74:	68da      	ldr	r2, [r3, #12]
 8012a76:	68fb      	ldr	r3, [r7, #12]
 8012a78:	60da      	str	r2, [r3, #12]
 8012a7a:	e005      	b.n	8012a88 <tcp_pcb_remove+0x70>
 8012a7c:	68fb      	ldr	r3, [r7, #12]
 8012a7e:	68db      	ldr	r3, [r3, #12]
 8012a80:	60fb      	str	r3, [r7, #12]
 8012a82:	68fb      	ldr	r3, [r7, #12]
 8012a84:	2b00      	cmp	r3, #0
 8012a86:	d1ef      	bne.n	8012a68 <tcp_pcb_remove+0x50>
 8012a88:	683b      	ldr	r3, [r7, #0]
 8012a8a:	2200      	movs	r2, #0
 8012a8c:	60da      	str	r2, [r3, #12]

  tcp_pcb_purge(pcb);
 8012a8e:	6838      	ldr	r0, [r7, #0]
 8012a90:	f7ff ff72 	bl	8012978 <tcp_pcb_purge>

  /* if there is an outstanding delayed ACKs, send it */
  if ((pcb->state != TIME_WAIT) &&
 8012a94:	683b      	ldr	r3, [r7, #0]
 8012a96:	7d1b      	ldrb	r3, [r3, #20]
 8012a98:	2b0a      	cmp	r3, #10
 8012a9a:	d013      	beq.n	8012ac4 <tcp_pcb_remove+0xac>
      (pcb->state != LISTEN) &&
 8012a9c:	683b      	ldr	r3, [r7, #0]
 8012a9e:	7d1b      	ldrb	r3, [r3, #20]
  if ((pcb->state != TIME_WAIT) &&
 8012aa0:	2b01      	cmp	r3, #1
 8012aa2:	d00f      	beq.n	8012ac4 <tcp_pcb_remove+0xac>
      (pcb->flags & TF_ACK_DELAY)) {
 8012aa4:	683b      	ldr	r3, [r7, #0]
 8012aa6:	8b5b      	ldrh	r3, [r3, #26]
 8012aa8:	f003 0301 	and.w	r3, r3, #1
      (pcb->state != LISTEN) &&
 8012aac:	2b00      	cmp	r3, #0
 8012aae:	d009      	beq.n	8012ac4 <tcp_pcb_remove+0xac>
    tcp_ack_now(pcb);
 8012ab0:	683b      	ldr	r3, [r7, #0]
 8012ab2:	8b5b      	ldrh	r3, [r3, #26]
 8012ab4:	f043 0302 	orr.w	r3, r3, #2
 8012ab8:	b29a      	uxth	r2, r3
 8012aba:	683b      	ldr	r3, [r7, #0]
 8012abc:	835a      	strh	r2, [r3, #26]
    tcp_output(pcb);
 8012abe:	6838      	ldr	r0, [r7, #0]
 8012ac0:	f002 ff6e 	bl	80159a0 <tcp_output>
  }

  if (pcb->state != LISTEN) {
 8012ac4:	683b      	ldr	r3, [r7, #0]
 8012ac6:	7d1b      	ldrb	r3, [r3, #20]
 8012ac8:	2b01      	cmp	r3, #1
 8012aca:	d020      	beq.n	8012b0e <tcp_pcb_remove+0xf6>
    LWIP_ASSERT("unsent segments leaking", pcb->unsent == NULL);
 8012acc:	683b      	ldr	r3, [r7, #0]
 8012ace:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8012ad0:	2b00      	cmp	r3, #0
 8012ad2:	d006      	beq.n	8012ae2 <tcp_pcb_remove+0xca>
 8012ad4:	4b13      	ldr	r3, [pc, #76]	; (8012b24 <tcp_pcb_remove+0x10c>)
 8012ad6:	f640 0293 	movw	r2, #2195	; 0x893
 8012ada:	4916      	ldr	r1, [pc, #88]	; (8012b34 <tcp_pcb_remove+0x11c>)
 8012adc:	4813      	ldr	r0, [pc, #76]	; (8012b2c <tcp_pcb_remove+0x114>)
 8012ade:	f007 f9bf 	bl	8019e60 <iprintf>
    LWIP_ASSERT("unacked segments leaking", pcb->unacked == NULL);
 8012ae2:	683b      	ldr	r3, [r7, #0]
 8012ae4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8012ae6:	2b00      	cmp	r3, #0
 8012ae8:	d006      	beq.n	8012af8 <tcp_pcb_remove+0xe0>
 8012aea:	4b0e      	ldr	r3, [pc, #56]	; (8012b24 <tcp_pcb_remove+0x10c>)
 8012aec:	f640 0294 	movw	r2, #2196	; 0x894
 8012af0:	4911      	ldr	r1, [pc, #68]	; (8012b38 <tcp_pcb_remove+0x120>)
 8012af2:	480e      	ldr	r0, [pc, #56]	; (8012b2c <tcp_pcb_remove+0x114>)
 8012af4:	f007 f9b4 	bl	8019e60 <iprintf>
#if TCP_QUEUE_OOSEQ
    LWIP_ASSERT("ooseq segments leaking", pcb->ooseq == NULL);
 8012af8:	683b      	ldr	r3, [r7, #0]
 8012afa:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8012afc:	2b00      	cmp	r3, #0
 8012afe:	d006      	beq.n	8012b0e <tcp_pcb_remove+0xf6>
 8012b00:	4b08      	ldr	r3, [pc, #32]	; (8012b24 <tcp_pcb_remove+0x10c>)
 8012b02:	f640 0296 	movw	r2, #2198	; 0x896
 8012b06:	490d      	ldr	r1, [pc, #52]	; (8012b3c <tcp_pcb_remove+0x124>)
 8012b08:	4808      	ldr	r0, [pc, #32]	; (8012b2c <tcp_pcb_remove+0x114>)
 8012b0a:	f007 f9a9 	bl	8019e60 <iprintf>
#endif /* TCP_QUEUE_OOSEQ */
  }

  pcb->state = CLOSED;
 8012b0e:	683b      	ldr	r3, [r7, #0]
 8012b10:	2200      	movs	r2, #0
 8012b12:	751a      	strb	r2, [r3, #20]
  /* reset the local port to prevent the pcb from being 'bound' */
  pcb->local_port = 0;
 8012b14:	683b      	ldr	r3, [r7, #0]
 8012b16:	2200      	movs	r2, #0
 8012b18:	82da      	strh	r2, [r3, #22]

  LWIP_ASSERT("tcp_pcb_remove: tcp_pcbs_sane()", tcp_pcbs_sane());
}
 8012b1a:	bf00      	nop
 8012b1c:	3710      	adds	r7, #16
 8012b1e:	46bd      	mov	sp, r7
 8012b20:	bd80      	pop	{r7, pc}
 8012b22:	bf00      	nop
 8012b24:	0801d484 	.word	0x0801d484
 8012b28:	0801daec 	.word	0x0801daec
 8012b2c:	0801d4c8 	.word	0x0801d4c8
 8012b30:	0801db08 	.word	0x0801db08
 8012b34:	0801db28 	.word	0x0801db28
 8012b38:	0801db40 	.word	0x0801db40
 8012b3c:	0801db5c 	.word	0x0801db5c

08012b40 <tcp_next_iss>:
 *
 * @return u32_t pseudo random sequence number
 */
u32_t
tcp_next_iss(struct tcp_pcb *pcb)
{
 8012b40:	b580      	push	{r7, lr}
 8012b42:	b082      	sub	sp, #8
 8012b44:	af00      	add	r7, sp, #0
 8012b46:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_next_iss: invalid pcb", pcb != NULL);
  return LWIP_HOOK_TCP_ISN(&pcb->local_ip, pcb->local_port, &pcb->remote_ip, pcb->remote_port);
#else /* LWIP_HOOK_TCP_ISN */
  static u32_t iss = 6510;

  LWIP_ASSERT("tcp_next_iss: invalid pcb", pcb != NULL);
 8012b48:	687b      	ldr	r3, [r7, #4]
 8012b4a:	2b00      	cmp	r3, #0
 8012b4c:	d106      	bne.n	8012b5c <tcp_next_iss+0x1c>
 8012b4e:	4b0a      	ldr	r3, [pc, #40]	; (8012b78 <tcp_next_iss+0x38>)
 8012b50:	f640 02af 	movw	r2, #2223	; 0x8af
 8012b54:	4909      	ldr	r1, [pc, #36]	; (8012b7c <tcp_next_iss+0x3c>)
 8012b56:	480a      	ldr	r0, [pc, #40]	; (8012b80 <tcp_next_iss+0x40>)
 8012b58:	f007 f982 	bl	8019e60 <iprintf>
  LWIP_UNUSED_ARG(pcb);

  iss += tcp_ticks;       /* XXX */
 8012b5c:	4b09      	ldr	r3, [pc, #36]	; (8012b84 <tcp_next_iss+0x44>)
 8012b5e:	681a      	ldr	r2, [r3, #0]
 8012b60:	4b09      	ldr	r3, [pc, #36]	; (8012b88 <tcp_next_iss+0x48>)
 8012b62:	681b      	ldr	r3, [r3, #0]
 8012b64:	4413      	add	r3, r2
 8012b66:	4a07      	ldr	r2, [pc, #28]	; (8012b84 <tcp_next_iss+0x44>)
 8012b68:	6013      	str	r3, [r2, #0]
  return iss;
 8012b6a:	4b06      	ldr	r3, [pc, #24]	; (8012b84 <tcp_next_iss+0x44>)
 8012b6c:	681b      	ldr	r3, [r3, #0]
#endif /* LWIP_HOOK_TCP_ISN */
}
 8012b6e:	4618      	mov	r0, r3
 8012b70:	3708      	adds	r7, #8
 8012b72:	46bd      	mov	sp, r7
 8012b74:	bd80      	pop	{r7, pc}
 8012b76:	bf00      	nop
 8012b78:	0801d484 	.word	0x0801d484
 8012b7c:	0801db74 	.word	0x0801db74
 8012b80:	0801d4c8 	.word	0x0801d4c8
 8012b84:	2000005c 	.word	0x2000005c
 8012b88:	200070d4 	.word	0x200070d4

08012b8c <tcp_eff_send_mss_netif>:
 * by calculating the minimum of TCP_MSS and the mtu (if set) of the target
 * netif (if not NULL).
 */
u16_t
tcp_eff_send_mss_netif(u16_t sendmss, struct netif *outif, const ip_addr_t *dest)
{
 8012b8c:	b580      	push	{r7, lr}
 8012b8e:	b086      	sub	sp, #24
 8012b90:	af00      	add	r7, sp, #0
 8012b92:	4603      	mov	r3, r0
 8012b94:	60b9      	str	r1, [r7, #8]
 8012b96:	607a      	str	r2, [r7, #4]
 8012b98:	81fb      	strh	r3, [r7, #14]
  u16_t mss_s;
  u16_t mtu;

  LWIP_UNUSED_ARG(dest); /* in case IPv6 is disabled */

  LWIP_ASSERT("tcp_eff_send_mss_netif: invalid dst_ip", dest != NULL);
 8012b9a:	687b      	ldr	r3, [r7, #4]
 8012b9c:	2b00      	cmp	r3, #0
 8012b9e:	d106      	bne.n	8012bae <tcp_eff_send_mss_netif+0x22>
 8012ba0:	4b14      	ldr	r3, [pc, #80]	; (8012bf4 <tcp_eff_send_mss_netif+0x68>)
 8012ba2:	f640 02c5 	movw	r2, #2245	; 0x8c5
 8012ba6:	4914      	ldr	r1, [pc, #80]	; (8012bf8 <tcp_eff_send_mss_netif+0x6c>)
 8012ba8:	4814      	ldr	r0, [pc, #80]	; (8012bfc <tcp_eff_send_mss_netif+0x70>)
 8012baa:	f007 f959 	bl	8019e60 <iprintf>
  else
#endif /* LWIP_IPV4 */
#endif /* LWIP_IPV6 */
#if LWIP_IPV4
  {
    if (outif == NULL) {
 8012bae:	68bb      	ldr	r3, [r7, #8]
 8012bb0:	2b00      	cmp	r3, #0
 8012bb2:	d101      	bne.n	8012bb8 <tcp_eff_send_mss_netif+0x2c>
      return sendmss;
 8012bb4:	89fb      	ldrh	r3, [r7, #14]
 8012bb6:	e019      	b.n	8012bec <tcp_eff_send_mss_netif+0x60>
    }
    mtu = outif->mtu;
 8012bb8:	68bb      	ldr	r3, [r7, #8]
 8012bba:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 8012bbc:	82fb      	strh	r3, [r7, #22]
  }
#endif /* LWIP_IPV4 */

  if (mtu != 0) {
 8012bbe:	8afb      	ldrh	r3, [r7, #22]
 8012bc0:	2b00      	cmp	r3, #0
 8012bc2:	d012      	beq.n	8012bea <tcp_eff_send_mss_netif+0x5e>
    else
#endif /* LWIP_IPV4 */
#endif /* LWIP_IPV6 */
#if LWIP_IPV4
    {
      offset = IP_HLEN + TCP_HLEN;
 8012bc4:	2328      	movs	r3, #40	; 0x28
 8012bc6:	82bb      	strh	r3, [r7, #20]
    }
#endif /* LWIP_IPV4 */
    mss_s = (mtu > offset) ? (u16_t)(mtu - offset) : 0;
 8012bc8:	8afa      	ldrh	r2, [r7, #22]
 8012bca:	8abb      	ldrh	r3, [r7, #20]
 8012bcc:	429a      	cmp	r2, r3
 8012bce:	d904      	bls.n	8012bda <tcp_eff_send_mss_netif+0x4e>
 8012bd0:	8afa      	ldrh	r2, [r7, #22]
 8012bd2:	8abb      	ldrh	r3, [r7, #20]
 8012bd4:	1ad3      	subs	r3, r2, r3
 8012bd6:	b29b      	uxth	r3, r3
 8012bd8:	e000      	b.n	8012bdc <tcp_eff_send_mss_netif+0x50>
 8012bda:	2300      	movs	r3, #0
 8012bdc:	827b      	strh	r3, [r7, #18]
    /* RFC 1122, chap 4.2.2.6:
     * Eff.snd.MSS = min(SendMSS+20, MMS_S) - TCPhdrsize - IPoptionsize
     * We correct for TCP options in tcp_write(), and don't support IP options.
     */
    sendmss = LWIP_MIN(sendmss, mss_s);
 8012bde:	8a7a      	ldrh	r2, [r7, #18]
 8012be0:	89fb      	ldrh	r3, [r7, #14]
 8012be2:	4293      	cmp	r3, r2
 8012be4:	bf28      	it	cs
 8012be6:	4613      	movcs	r3, r2
 8012be8:	81fb      	strh	r3, [r7, #14]
  }
  return sendmss;
 8012bea:	89fb      	ldrh	r3, [r7, #14]
}
 8012bec:	4618      	mov	r0, r3
 8012bee:	3718      	adds	r7, #24
 8012bf0:	46bd      	mov	sp, r7
 8012bf2:	bd80      	pop	{r7, pc}
 8012bf4:	0801d484 	.word	0x0801d484
 8012bf8:	0801db90 	.word	0x0801db90
 8012bfc:	0801d4c8 	.word	0x0801d4c8

08012c00 <tcp_netif_ip_addr_changed_pcblist>:
#endif /* TCP_CALCULATE_EFF_SEND_MSS */

/** Helper function for tcp_netif_ip_addr_changed() that iterates a pcb list */
static void
tcp_netif_ip_addr_changed_pcblist(const ip_addr_t *old_addr, struct tcp_pcb *pcb_list)
{
 8012c00:	b580      	push	{r7, lr}
 8012c02:	b084      	sub	sp, #16
 8012c04:	af00      	add	r7, sp, #0
 8012c06:	6078      	str	r0, [r7, #4]
 8012c08:	6039      	str	r1, [r7, #0]
  struct tcp_pcb *pcb;
  pcb = pcb_list;
 8012c0a:	683b      	ldr	r3, [r7, #0]
 8012c0c:	60fb      	str	r3, [r7, #12]

  LWIP_ASSERT("tcp_netif_ip_addr_changed_pcblist: invalid old_addr", old_addr != NULL);
 8012c0e:	687b      	ldr	r3, [r7, #4]
 8012c10:	2b00      	cmp	r3, #0
 8012c12:	d119      	bne.n	8012c48 <tcp_netif_ip_addr_changed_pcblist+0x48>
 8012c14:	4b10      	ldr	r3, [pc, #64]	; (8012c58 <tcp_netif_ip_addr_changed_pcblist+0x58>)
 8012c16:	f44f 6210 	mov.w	r2, #2304	; 0x900
 8012c1a:	4910      	ldr	r1, [pc, #64]	; (8012c5c <tcp_netif_ip_addr_changed_pcblist+0x5c>)
 8012c1c:	4810      	ldr	r0, [pc, #64]	; (8012c60 <tcp_netif_ip_addr_changed_pcblist+0x60>)
 8012c1e:	f007 f91f 	bl	8019e60 <iprintf>

  while (pcb != NULL) {
 8012c22:	e011      	b.n	8012c48 <tcp_netif_ip_addr_changed_pcblist+0x48>
    /* PCB bound to current local interface address? */
    if (ip_addr_cmp(&pcb->local_ip, old_addr)
 8012c24:	68fb      	ldr	r3, [r7, #12]
 8012c26:	681a      	ldr	r2, [r3, #0]
 8012c28:	687b      	ldr	r3, [r7, #4]
 8012c2a:	681b      	ldr	r3, [r3, #0]
 8012c2c:	429a      	cmp	r2, r3
 8012c2e:	d108      	bne.n	8012c42 <tcp_netif_ip_addr_changed_pcblist+0x42>
        /* connections to link-local addresses must persist (RFC3927 ch. 1.9) */
        && (!IP_IS_V4_VAL(pcb->local_ip) || !ip4_addr_islinklocal(ip_2_ip4(&pcb->local_ip)))
#endif /* LWIP_AUTOIP */
       ) {
      /* this connection must be aborted */
      struct tcp_pcb *next = pcb->next;
 8012c30:	68fb      	ldr	r3, [r7, #12]
 8012c32:	68db      	ldr	r3, [r3, #12]
 8012c34:	60bb      	str	r3, [r7, #8]
      LWIP_DEBUGF(NETIF_DEBUG | LWIP_DBG_STATE, ("netif_set_ipaddr: aborting TCP pcb %p\n", (void *)pcb));
      tcp_abort(pcb);
 8012c36:	68f8      	ldr	r0, [r7, #12]
 8012c38:	f7fe ffc2 	bl	8011bc0 <tcp_abort>
      pcb = next;
 8012c3c:	68bb      	ldr	r3, [r7, #8]
 8012c3e:	60fb      	str	r3, [r7, #12]
 8012c40:	e002      	b.n	8012c48 <tcp_netif_ip_addr_changed_pcblist+0x48>
    } else {
      pcb = pcb->next;
 8012c42:	68fb      	ldr	r3, [r7, #12]
 8012c44:	68db      	ldr	r3, [r3, #12]
 8012c46:	60fb      	str	r3, [r7, #12]
  while (pcb != NULL) {
 8012c48:	68fb      	ldr	r3, [r7, #12]
 8012c4a:	2b00      	cmp	r3, #0
 8012c4c:	d1ea      	bne.n	8012c24 <tcp_netif_ip_addr_changed_pcblist+0x24>
    }
  }
}
 8012c4e:	bf00      	nop
 8012c50:	bf00      	nop
 8012c52:	3710      	adds	r7, #16
 8012c54:	46bd      	mov	sp, r7
 8012c56:	bd80      	pop	{r7, pc}
 8012c58:	0801d484 	.word	0x0801d484
 8012c5c:	0801dbb8 	.word	0x0801dbb8
 8012c60:	0801d4c8 	.word	0x0801d4c8

08012c64 <tcp_netif_ip_addr_changed>:
 * @param old_addr IP address of the netif before change
 * @param new_addr IP address of the netif after change or NULL if netif has been removed
 */
void
tcp_netif_ip_addr_changed(const ip_addr_t *old_addr, const ip_addr_t *new_addr)
{
 8012c64:	b580      	push	{r7, lr}
 8012c66:	b084      	sub	sp, #16
 8012c68:	af00      	add	r7, sp, #0
 8012c6a:	6078      	str	r0, [r7, #4]
 8012c6c:	6039      	str	r1, [r7, #0]
  struct tcp_pcb_listen *lpcb;

  if (!ip_addr_isany(old_addr)) {
 8012c6e:	687b      	ldr	r3, [r7, #4]
 8012c70:	2b00      	cmp	r3, #0
 8012c72:	d02a      	beq.n	8012cca <tcp_netif_ip_addr_changed+0x66>
 8012c74:	687b      	ldr	r3, [r7, #4]
 8012c76:	681b      	ldr	r3, [r3, #0]
 8012c78:	2b00      	cmp	r3, #0
 8012c7a:	d026      	beq.n	8012cca <tcp_netif_ip_addr_changed+0x66>
    tcp_netif_ip_addr_changed_pcblist(old_addr, tcp_active_pcbs);
 8012c7c:	4b15      	ldr	r3, [pc, #84]	; (8012cd4 <tcp_netif_ip_addr_changed+0x70>)
 8012c7e:	681b      	ldr	r3, [r3, #0]
 8012c80:	4619      	mov	r1, r3
 8012c82:	6878      	ldr	r0, [r7, #4]
 8012c84:	f7ff ffbc 	bl	8012c00 <tcp_netif_ip_addr_changed_pcblist>
    tcp_netif_ip_addr_changed_pcblist(old_addr, tcp_bound_pcbs);
 8012c88:	4b13      	ldr	r3, [pc, #76]	; (8012cd8 <tcp_netif_ip_addr_changed+0x74>)
 8012c8a:	681b      	ldr	r3, [r3, #0]
 8012c8c:	4619      	mov	r1, r3
 8012c8e:	6878      	ldr	r0, [r7, #4]
 8012c90:	f7ff ffb6 	bl	8012c00 <tcp_netif_ip_addr_changed_pcblist>

    if (!ip_addr_isany(new_addr)) {
 8012c94:	683b      	ldr	r3, [r7, #0]
 8012c96:	2b00      	cmp	r3, #0
 8012c98:	d017      	beq.n	8012cca <tcp_netif_ip_addr_changed+0x66>
 8012c9a:	683b      	ldr	r3, [r7, #0]
 8012c9c:	681b      	ldr	r3, [r3, #0]
 8012c9e:	2b00      	cmp	r3, #0
 8012ca0:	d013      	beq.n	8012cca <tcp_netif_ip_addr_changed+0x66>
      /* PCB bound to current local interface address? */
      for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = lpcb->next) {
 8012ca2:	4b0e      	ldr	r3, [pc, #56]	; (8012cdc <tcp_netif_ip_addr_changed+0x78>)
 8012ca4:	681b      	ldr	r3, [r3, #0]
 8012ca6:	60fb      	str	r3, [r7, #12]
 8012ca8:	e00c      	b.n	8012cc4 <tcp_netif_ip_addr_changed+0x60>
        /* PCB bound to current local interface address? */
        if (ip_addr_cmp(&lpcb->local_ip, old_addr)) {
 8012caa:	68fb      	ldr	r3, [r7, #12]
 8012cac:	681a      	ldr	r2, [r3, #0]
 8012cae:	687b      	ldr	r3, [r7, #4]
 8012cb0:	681b      	ldr	r3, [r3, #0]
 8012cb2:	429a      	cmp	r2, r3
 8012cb4:	d103      	bne.n	8012cbe <tcp_netif_ip_addr_changed+0x5a>
          /* The PCB is listening to the old ipaddr and
            * is set to listen to the new one instead */
          ip_addr_copy(lpcb->local_ip, *new_addr);
 8012cb6:	683b      	ldr	r3, [r7, #0]
 8012cb8:	681a      	ldr	r2, [r3, #0]
 8012cba:	68fb      	ldr	r3, [r7, #12]
 8012cbc:	601a      	str	r2, [r3, #0]
      for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = lpcb->next) {
 8012cbe:	68fb      	ldr	r3, [r7, #12]
 8012cc0:	68db      	ldr	r3, [r3, #12]
 8012cc2:	60fb      	str	r3, [r7, #12]
 8012cc4:	68fb      	ldr	r3, [r7, #12]
 8012cc6:	2b00      	cmp	r3, #0
 8012cc8:	d1ef      	bne.n	8012caa <tcp_netif_ip_addr_changed+0x46>
        }
      }
    }
  }
}
 8012cca:	bf00      	nop
 8012ccc:	3710      	adds	r7, #16
 8012cce:	46bd      	mov	sp, r7
 8012cd0:	bd80      	pop	{r7, pc}
 8012cd2:	bf00      	nop
 8012cd4:	200070e0 	.word	0x200070e0
 8012cd8:	200070d8 	.word	0x200070d8
 8012cdc:	200070dc 	.word	0x200070dc

08012ce0 <tcp_free_ooseq>:

#if TCP_QUEUE_OOSEQ
/* Free all ooseq pbufs (and possibly reset SACK state) */
void
tcp_free_ooseq(struct tcp_pcb *pcb)
{
 8012ce0:	b580      	push	{r7, lr}
 8012ce2:	b082      	sub	sp, #8
 8012ce4:	af00      	add	r7, sp, #0
 8012ce6:	6078      	str	r0, [r7, #4]
  if (pcb->ooseq) {
 8012ce8:	687b      	ldr	r3, [r7, #4]
 8012cea:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8012cec:	2b00      	cmp	r3, #0
 8012cee:	d007      	beq.n	8012d00 <tcp_free_ooseq+0x20>
    tcp_segs_free(pcb->ooseq);
 8012cf0:	687b      	ldr	r3, [r7, #4]
 8012cf2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8012cf4:	4618      	mov	r0, r3
 8012cf6:	f7ff fc3d 	bl	8012574 <tcp_segs_free>
    pcb->ooseq = NULL;
 8012cfa:	687b      	ldr	r3, [r7, #4]
 8012cfc:	2200      	movs	r2, #0
 8012cfe:	675a      	str	r2, [r3, #116]	; 0x74
#if LWIP_TCP_SACK_OUT
    memset(pcb->rcv_sacks, 0, sizeof(pcb->rcv_sacks));
#endif /* LWIP_TCP_SACK_OUT */
  }
}
 8012d00:	bf00      	nop
 8012d02:	3708      	adds	r7, #8
 8012d04:	46bd      	mov	sp, r7
 8012d06:	bd80      	pop	{r7, pc}

08012d08 <tcp_input>:
 * @param p received TCP segment to process (p->payload pointing to the TCP header)
 * @param inp network interface on which this segment was received
 */
void
tcp_input(struct pbuf *p, struct netif *inp)
{
 8012d08:	b590      	push	{r4, r7, lr}
 8012d0a:	b08d      	sub	sp, #52	; 0x34
 8012d0c:	af04      	add	r7, sp, #16
 8012d0e:	6078      	str	r0, [r7, #4]
 8012d10:	6039      	str	r1, [r7, #0]
  u8_t hdrlen_bytes;
  err_t err;

  LWIP_UNUSED_ARG(inp);
  LWIP_ASSERT_CORE_LOCKED();
  LWIP_ASSERT("tcp_input: invalid pbuf", p != NULL);
 8012d12:	687b      	ldr	r3, [r7, #4]
 8012d14:	2b00      	cmp	r3, #0
 8012d16:	d105      	bne.n	8012d24 <tcp_input+0x1c>
 8012d18:	4b9b      	ldr	r3, [pc, #620]	; (8012f88 <tcp_input+0x280>)
 8012d1a:	2283      	movs	r2, #131	; 0x83
 8012d1c:	499b      	ldr	r1, [pc, #620]	; (8012f8c <tcp_input+0x284>)
 8012d1e:	489c      	ldr	r0, [pc, #624]	; (8012f90 <tcp_input+0x288>)
 8012d20:	f007 f89e 	bl	8019e60 <iprintf>
  PERF_START;

  TCP_STATS_INC(tcp.recv);
  MIB2_STATS_INC(mib2.tcpinsegs);

  tcphdr = (struct tcp_hdr *)p->payload;
 8012d24:	687b      	ldr	r3, [r7, #4]
 8012d26:	685b      	ldr	r3, [r3, #4]
 8012d28:	4a9a      	ldr	r2, [pc, #616]	; (8012f94 <tcp_input+0x28c>)
 8012d2a:	6013      	str	r3, [r2, #0]
#if TCP_INPUT_DEBUG
  tcp_debug_print(tcphdr);
#endif

  /* Check that TCP header fits in payload */
  if (p->len < TCP_HLEN) {
 8012d2c:	687b      	ldr	r3, [r7, #4]
 8012d2e:	895b      	ldrh	r3, [r3, #10]
 8012d30:	2b13      	cmp	r3, #19
 8012d32:	f240 83d1 	bls.w	80134d8 <tcp_input+0x7d0>
    TCP_STATS_INC(tcp.lenerr);
    goto dropped;
  }

  /* Don't even process incoming broadcasts/multicasts. */
  if (ip_addr_isbroadcast(ip_current_dest_addr(), ip_current_netif()) ||
 8012d36:	4b98      	ldr	r3, [pc, #608]	; (8012f98 <tcp_input+0x290>)
 8012d38:	695b      	ldr	r3, [r3, #20]
 8012d3a:	4a97      	ldr	r2, [pc, #604]	; (8012f98 <tcp_input+0x290>)
 8012d3c:	6812      	ldr	r2, [r2, #0]
 8012d3e:	4611      	mov	r1, r2
 8012d40:	4618      	mov	r0, r3
 8012d42:	f005 fbfb 	bl	801853c <ip4_addr_isbroadcast_u32>
 8012d46:	4603      	mov	r3, r0
 8012d48:	2b00      	cmp	r3, #0
 8012d4a:	f040 83c7 	bne.w	80134dc <tcp_input+0x7d4>
      ip_addr_ismulticast(ip_current_dest_addr())) {
 8012d4e:	4b92      	ldr	r3, [pc, #584]	; (8012f98 <tcp_input+0x290>)
 8012d50:	695b      	ldr	r3, [r3, #20]
 8012d52:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
  if (ip_addr_isbroadcast(ip_current_dest_addr(), ip_current_netif()) ||
 8012d56:	2be0      	cmp	r3, #224	; 0xe0
 8012d58:	f000 83c0 	beq.w	80134dc <tcp_input+0x7d4>
    }
  }
#endif /* CHECKSUM_CHECK_TCP */

  /* sanity-check header length */
  hdrlen_bytes = TCPH_HDRLEN_BYTES(tcphdr);
 8012d5c:	4b8d      	ldr	r3, [pc, #564]	; (8012f94 <tcp_input+0x28c>)
 8012d5e:	681b      	ldr	r3, [r3, #0]
 8012d60:	899b      	ldrh	r3, [r3, #12]
 8012d62:	b29b      	uxth	r3, r3
 8012d64:	4618      	mov	r0, r3
 8012d66:	f7fc fdbf 	bl	800f8e8 <lwip_htons>
 8012d6a:	4603      	mov	r3, r0
 8012d6c:	0b1b      	lsrs	r3, r3, #12
 8012d6e:	b29b      	uxth	r3, r3
 8012d70:	b2db      	uxtb	r3, r3
 8012d72:	009b      	lsls	r3, r3, #2
 8012d74:	74bb      	strb	r3, [r7, #18]
  if ((hdrlen_bytes < TCP_HLEN) || (hdrlen_bytes > p->tot_len)) {
 8012d76:	7cbb      	ldrb	r3, [r7, #18]
 8012d78:	2b13      	cmp	r3, #19
 8012d7a:	f240 83b1 	bls.w	80134e0 <tcp_input+0x7d8>
 8012d7e:	7cbb      	ldrb	r3, [r7, #18]
 8012d80:	b29a      	uxth	r2, r3
 8012d82:	687b      	ldr	r3, [r7, #4]
 8012d84:	891b      	ldrh	r3, [r3, #8]
 8012d86:	429a      	cmp	r2, r3
 8012d88:	f200 83aa 	bhi.w	80134e0 <tcp_input+0x7d8>
    goto dropped;
  }

  /* Move the payload pointer in the pbuf so that it points to the
     TCP data instead of the TCP header. */
  tcphdr_optlen = (u16_t)(hdrlen_bytes - TCP_HLEN);
 8012d8c:	7cbb      	ldrb	r3, [r7, #18]
 8012d8e:	b29b      	uxth	r3, r3
 8012d90:	3b14      	subs	r3, #20
 8012d92:	b29a      	uxth	r2, r3
 8012d94:	4b81      	ldr	r3, [pc, #516]	; (8012f9c <tcp_input+0x294>)
 8012d96:	801a      	strh	r2, [r3, #0]
  tcphdr_opt2 = NULL;
 8012d98:	4b81      	ldr	r3, [pc, #516]	; (8012fa0 <tcp_input+0x298>)
 8012d9a:	2200      	movs	r2, #0
 8012d9c:	601a      	str	r2, [r3, #0]
  if (p->len >= hdrlen_bytes) {
 8012d9e:	687b      	ldr	r3, [r7, #4]
 8012da0:	895a      	ldrh	r2, [r3, #10]
 8012da2:	7cbb      	ldrb	r3, [r7, #18]
 8012da4:	b29b      	uxth	r3, r3
 8012da6:	429a      	cmp	r2, r3
 8012da8:	d309      	bcc.n	8012dbe <tcp_input+0xb6>
    /* all options are in the first pbuf */
    tcphdr_opt1len = tcphdr_optlen;
 8012daa:	4b7c      	ldr	r3, [pc, #496]	; (8012f9c <tcp_input+0x294>)
 8012dac:	881a      	ldrh	r2, [r3, #0]
 8012dae:	4b7d      	ldr	r3, [pc, #500]	; (8012fa4 <tcp_input+0x29c>)
 8012db0:	801a      	strh	r2, [r3, #0]
    pbuf_remove_header(p, hdrlen_bytes); /* cannot fail */
 8012db2:	7cbb      	ldrb	r3, [r7, #18]
 8012db4:	4619      	mov	r1, r3
 8012db6:	6878      	ldr	r0, [r7, #4]
 8012db8:	f7fe f8f4 	bl	8010fa4 <pbuf_remove_header>
 8012dbc:	e04e      	b.n	8012e5c <tcp_input+0x154>
  } else {
    u16_t opt2len;
    /* TCP header fits into first pbuf, options don't - data is in the next pbuf */
    /* there must be a next pbuf, due to hdrlen_bytes sanity check above */
    LWIP_ASSERT("p->next != NULL", p->next != NULL);
 8012dbe:	687b      	ldr	r3, [r7, #4]
 8012dc0:	681b      	ldr	r3, [r3, #0]
 8012dc2:	2b00      	cmp	r3, #0
 8012dc4:	d105      	bne.n	8012dd2 <tcp_input+0xca>
 8012dc6:	4b70      	ldr	r3, [pc, #448]	; (8012f88 <tcp_input+0x280>)
 8012dc8:	22c2      	movs	r2, #194	; 0xc2
 8012dca:	4977      	ldr	r1, [pc, #476]	; (8012fa8 <tcp_input+0x2a0>)
 8012dcc:	4870      	ldr	r0, [pc, #448]	; (8012f90 <tcp_input+0x288>)
 8012dce:	f007 f847 	bl	8019e60 <iprintf>

    /* advance over the TCP header (cannot fail) */
    pbuf_remove_header(p, TCP_HLEN);
 8012dd2:	2114      	movs	r1, #20
 8012dd4:	6878      	ldr	r0, [r7, #4]
 8012dd6:	f7fe f8e5 	bl	8010fa4 <pbuf_remove_header>

    /* determine how long the first and second parts of the options are */
    tcphdr_opt1len = p->len;
 8012dda:	687b      	ldr	r3, [r7, #4]
 8012ddc:	895a      	ldrh	r2, [r3, #10]
 8012dde:	4b71      	ldr	r3, [pc, #452]	; (8012fa4 <tcp_input+0x29c>)
 8012de0:	801a      	strh	r2, [r3, #0]
    opt2len = (u16_t)(tcphdr_optlen - tcphdr_opt1len);
 8012de2:	4b6e      	ldr	r3, [pc, #440]	; (8012f9c <tcp_input+0x294>)
 8012de4:	881a      	ldrh	r2, [r3, #0]
 8012de6:	4b6f      	ldr	r3, [pc, #444]	; (8012fa4 <tcp_input+0x29c>)
 8012de8:	881b      	ldrh	r3, [r3, #0]
 8012dea:	1ad3      	subs	r3, r2, r3
 8012dec:	823b      	strh	r3, [r7, #16]

    /* options continue in the next pbuf: set p to zero length and hide the
        options in the next pbuf (adjusting p->tot_len) */
    pbuf_remove_header(p, tcphdr_opt1len);
 8012dee:	4b6d      	ldr	r3, [pc, #436]	; (8012fa4 <tcp_input+0x29c>)
 8012df0:	881b      	ldrh	r3, [r3, #0]
 8012df2:	4619      	mov	r1, r3
 8012df4:	6878      	ldr	r0, [r7, #4]
 8012df6:	f7fe f8d5 	bl	8010fa4 <pbuf_remove_header>

    /* check that the options fit in the second pbuf */
    if (opt2len > p->next->len) {
 8012dfa:	687b      	ldr	r3, [r7, #4]
 8012dfc:	681b      	ldr	r3, [r3, #0]
 8012dfe:	895b      	ldrh	r3, [r3, #10]
 8012e00:	8a3a      	ldrh	r2, [r7, #16]
 8012e02:	429a      	cmp	r2, r3
 8012e04:	f200 836e 	bhi.w	80134e4 <tcp_input+0x7dc>
      TCP_STATS_INC(tcp.lenerr);
      goto dropped;
    }

    /* remember the pointer to the second part of the options */
    tcphdr_opt2 = (u8_t *)p->next->payload;
 8012e08:	687b      	ldr	r3, [r7, #4]
 8012e0a:	681b      	ldr	r3, [r3, #0]
 8012e0c:	685b      	ldr	r3, [r3, #4]
 8012e0e:	4a64      	ldr	r2, [pc, #400]	; (8012fa0 <tcp_input+0x298>)
 8012e10:	6013      	str	r3, [r2, #0]

    /* advance p->next to point after the options, and manually
        adjust p->tot_len to keep it consistent with the changed p->next */
    pbuf_remove_header(p->next, opt2len);
 8012e12:	687b      	ldr	r3, [r7, #4]
 8012e14:	681b      	ldr	r3, [r3, #0]
 8012e16:	8a3a      	ldrh	r2, [r7, #16]
 8012e18:	4611      	mov	r1, r2
 8012e1a:	4618      	mov	r0, r3
 8012e1c:	f7fe f8c2 	bl	8010fa4 <pbuf_remove_header>
    p->tot_len = (u16_t)(p->tot_len - opt2len);
 8012e20:	687b      	ldr	r3, [r7, #4]
 8012e22:	891a      	ldrh	r2, [r3, #8]
 8012e24:	8a3b      	ldrh	r3, [r7, #16]
 8012e26:	1ad3      	subs	r3, r2, r3
 8012e28:	b29a      	uxth	r2, r3
 8012e2a:	687b      	ldr	r3, [r7, #4]
 8012e2c:	811a      	strh	r2, [r3, #8]

    LWIP_ASSERT("p->len == 0", p->len == 0);
 8012e2e:	687b      	ldr	r3, [r7, #4]
 8012e30:	895b      	ldrh	r3, [r3, #10]
 8012e32:	2b00      	cmp	r3, #0
 8012e34:	d005      	beq.n	8012e42 <tcp_input+0x13a>
 8012e36:	4b54      	ldr	r3, [pc, #336]	; (8012f88 <tcp_input+0x280>)
 8012e38:	22df      	movs	r2, #223	; 0xdf
 8012e3a:	495c      	ldr	r1, [pc, #368]	; (8012fac <tcp_input+0x2a4>)
 8012e3c:	4854      	ldr	r0, [pc, #336]	; (8012f90 <tcp_input+0x288>)
 8012e3e:	f007 f80f 	bl	8019e60 <iprintf>
    LWIP_ASSERT("p->tot_len == p->next->tot_len", p->tot_len == p->next->tot_len);
 8012e42:	687b      	ldr	r3, [r7, #4]
 8012e44:	891a      	ldrh	r2, [r3, #8]
 8012e46:	687b      	ldr	r3, [r7, #4]
 8012e48:	681b      	ldr	r3, [r3, #0]
 8012e4a:	891b      	ldrh	r3, [r3, #8]
 8012e4c:	429a      	cmp	r2, r3
 8012e4e:	d005      	beq.n	8012e5c <tcp_input+0x154>
 8012e50:	4b4d      	ldr	r3, [pc, #308]	; (8012f88 <tcp_input+0x280>)
 8012e52:	22e0      	movs	r2, #224	; 0xe0
 8012e54:	4956      	ldr	r1, [pc, #344]	; (8012fb0 <tcp_input+0x2a8>)
 8012e56:	484e      	ldr	r0, [pc, #312]	; (8012f90 <tcp_input+0x288>)
 8012e58:	f007 f802 	bl	8019e60 <iprintf>
  }

  /* Convert fields in TCP header to host byte order. */
  tcphdr->src = lwip_ntohs(tcphdr->src);
 8012e5c:	4b4d      	ldr	r3, [pc, #308]	; (8012f94 <tcp_input+0x28c>)
 8012e5e:	681b      	ldr	r3, [r3, #0]
 8012e60:	881b      	ldrh	r3, [r3, #0]
 8012e62:	b29b      	uxth	r3, r3
 8012e64:	4a4b      	ldr	r2, [pc, #300]	; (8012f94 <tcp_input+0x28c>)
 8012e66:	6814      	ldr	r4, [r2, #0]
 8012e68:	4618      	mov	r0, r3
 8012e6a:	f7fc fd3d 	bl	800f8e8 <lwip_htons>
 8012e6e:	4603      	mov	r3, r0
 8012e70:	8023      	strh	r3, [r4, #0]
  tcphdr->dest = lwip_ntohs(tcphdr->dest);
 8012e72:	4b48      	ldr	r3, [pc, #288]	; (8012f94 <tcp_input+0x28c>)
 8012e74:	681b      	ldr	r3, [r3, #0]
 8012e76:	885b      	ldrh	r3, [r3, #2]
 8012e78:	b29b      	uxth	r3, r3
 8012e7a:	4a46      	ldr	r2, [pc, #280]	; (8012f94 <tcp_input+0x28c>)
 8012e7c:	6814      	ldr	r4, [r2, #0]
 8012e7e:	4618      	mov	r0, r3
 8012e80:	f7fc fd32 	bl	800f8e8 <lwip_htons>
 8012e84:	4603      	mov	r3, r0
 8012e86:	8063      	strh	r3, [r4, #2]
  seqno = tcphdr->seqno = lwip_ntohl(tcphdr->seqno);
 8012e88:	4b42      	ldr	r3, [pc, #264]	; (8012f94 <tcp_input+0x28c>)
 8012e8a:	681b      	ldr	r3, [r3, #0]
 8012e8c:	685b      	ldr	r3, [r3, #4]
 8012e8e:	4a41      	ldr	r2, [pc, #260]	; (8012f94 <tcp_input+0x28c>)
 8012e90:	6814      	ldr	r4, [r2, #0]
 8012e92:	4618      	mov	r0, r3
 8012e94:	f7fc fd3d 	bl	800f912 <lwip_htonl>
 8012e98:	4603      	mov	r3, r0
 8012e9a:	6063      	str	r3, [r4, #4]
 8012e9c:	6863      	ldr	r3, [r4, #4]
 8012e9e:	4a45      	ldr	r2, [pc, #276]	; (8012fb4 <tcp_input+0x2ac>)
 8012ea0:	6013      	str	r3, [r2, #0]
  ackno = tcphdr->ackno = lwip_ntohl(tcphdr->ackno);
 8012ea2:	4b3c      	ldr	r3, [pc, #240]	; (8012f94 <tcp_input+0x28c>)
 8012ea4:	681b      	ldr	r3, [r3, #0]
 8012ea6:	689b      	ldr	r3, [r3, #8]
 8012ea8:	4a3a      	ldr	r2, [pc, #232]	; (8012f94 <tcp_input+0x28c>)
 8012eaa:	6814      	ldr	r4, [r2, #0]
 8012eac:	4618      	mov	r0, r3
 8012eae:	f7fc fd30 	bl	800f912 <lwip_htonl>
 8012eb2:	4603      	mov	r3, r0
 8012eb4:	60a3      	str	r3, [r4, #8]
 8012eb6:	68a3      	ldr	r3, [r4, #8]
 8012eb8:	4a3f      	ldr	r2, [pc, #252]	; (8012fb8 <tcp_input+0x2b0>)
 8012eba:	6013      	str	r3, [r2, #0]
  tcphdr->wnd = lwip_ntohs(tcphdr->wnd);
 8012ebc:	4b35      	ldr	r3, [pc, #212]	; (8012f94 <tcp_input+0x28c>)
 8012ebe:	681b      	ldr	r3, [r3, #0]
 8012ec0:	89db      	ldrh	r3, [r3, #14]
 8012ec2:	b29b      	uxth	r3, r3
 8012ec4:	4a33      	ldr	r2, [pc, #204]	; (8012f94 <tcp_input+0x28c>)
 8012ec6:	6814      	ldr	r4, [r2, #0]
 8012ec8:	4618      	mov	r0, r3
 8012eca:	f7fc fd0d 	bl	800f8e8 <lwip_htons>
 8012ece:	4603      	mov	r3, r0
 8012ed0:	81e3      	strh	r3, [r4, #14]

  flags = TCPH_FLAGS(tcphdr);
 8012ed2:	4b30      	ldr	r3, [pc, #192]	; (8012f94 <tcp_input+0x28c>)
 8012ed4:	681b      	ldr	r3, [r3, #0]
 8012ed6:	899b      	ldrh	r3, [r3, #12]
 8012ed8:	b29b      	uxth	r3, r3
 8012eda:	4618      	mov	r0, r3
 8012edc:	f7fc fd04 	bl	800f8e8 <lwip_htons>
 8012ee0:	4603      	mov	r3, r0
 8012ee2:	b2db      	uxtb	r3, r3
 8012ee4:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8012ee8:	b2da      	uxtb	r2, r3
 8012eea:	4b34      	ldr	r3, [pc, #208]	; (8012fbc <tcp_input+0x2b4>)
 8012eec:	701a      	strb	r2, [r3, #0]
  tcplen = p->tot_len;
 8012eee:	687b      	ldr	r3, [r7, #4]
 8012ef0:	891a      	ldrh	r2, [r3, #8]
 8012ef2:	4b33      	ldr	r3, [pc, #204]	; (8012fc0 <tcp_input+0x2b8>)
 8012ef4:	801a      	strh	r2, [r3, #0]
  if (flags & (TCP_FIN | TCP_SYN)) {
 8012ef6:	4b31      	ldr	r3, [pc, #196]	; (8012fbc <tcp_input+0x2b4>)
 8012ef8:	781b      	ldrb	r3, [r3, #0]
 8012efa:	f003 0303 	and.w	r3, r3, #3
 8012efe:	2b00      	cmp	r3, #0
 8012f00:	d00c      	beq.n	8012f1c <tcp_input+0x214>
    tcplen++;
 8012f02:	4b2f      	ldr	r3, [pc, #188]	; (8012fc0 <tcp_input+0x2b8>)
 8012f04:	881b      	ldrh	r3, [r3, #0]
 8012f06:	3301      	adds	r3, #1
 8012f08:	b29a      	uxth	r2, r3
 8012f0a:	4b2d      	ldr	r3, [pc, #180]	; (8012fc0 <tcp_input+0x2b8>)
 8012f0c:	801a      	strh	r2, [r3, #0]
    if (tcplen < p->tot_len) {
 8012f0e:	687b      	ldr	r3, [r7, #4]
 8012f10:	891a      	ldrh	r2, [r3, #8]
 8012f12:	4b2b      	ldr	r3, [pc, #172]	; (8012fc0 <tcp_input+0x2b8>)
 8012f14:	881b      	ldrh	r3, [r3, #0]
 8012f16:	429a      	cmp	r2, r3
 8012f18:	f200 82e6 	bhi.w	80134e8 <tcp_input+0x7e0>
    }
  }

  /* Demultiplex an incoming segment. First, we check if it is destined
     for an active connection. */
  prev = NULL;
 8012f1c:	2300      	movs	r3, #0
 8012f1e:	61bb      	str	r3, [r7, #24]

  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 8012f20:	4b28      	ldr	r3, [pc, #160]	; (8012fc4 <tcp_input+0x2bc>)
 8012f22:	681b      	ldr	r3, [r3, #0]
 8012f24:	61fb      	str	r3, [r7, #28]
 8012f26:	e09d      	b.n	8013064 <tcp_input+0x35c>
    LWIP_ASSERT("tcp_input: active pcb->state != CLOSED", pcb->state != CLOSED);
 8012f28:	69fb      	ldr	r3, [r7, #28]
 8012f2a:	7d1b      	ldrb	r3, [r3, #20]
 8012f2c:	2b00      	cmp	r3, #0
 8012f2e:	d105      	bne.n	8012f3c <tcp_input+0x234>
 8012f30:	4b15      	ldr	r3, [pc, #84]	; (8012f88 <tcp_input+0x280>)
 8012f32:	22fb      	movs	r2, #251	; 0xfb
 8012f34:	4924      	ldr	r1, [pc, #144]	; (8012fc8 <tcp_input+0x2c0>)
 8012f36:	4816      	ldr	r0, [pc, #88]	; (8012f90 <tcp_input+0x288>)
 8012f38:	f006 ff92 	bl	8019e60 <iprintf>
    LWIP_ASSERT("tcp_input: active pcb->state != TIME-WAIT", pcb->state != TIME_WAIT);
 8012f3c:	69fb      	ldr	r3, [r7, #28]
 8012f3e:	7d1b      	ldrb	r3, [r3, #20]
 8012f40:	2b0a      	cmp	r3, #10
 8012f42:	d105      	bne.n	8012f50 <tcp_input+0x248>
 8012f44:	4b10      	ldr	r3, [pc, #64]	; (8012f88 <tcp_input+0x280>)
 8012f46:	22fc      	movs	r2, #252	; 0xfc
 8012f48:	4920      	ldr	r1, [pc, #128]	; (8012fcc <tcp_input+0x2c4>)
 8012f4a:	4811      	ldr	r0, [pc, #68]	; (8012f90 <tcp_input+0x288>)
 8012f4c:	f006 ff88 	bl	8019e60 <iprintf>
    LWIP_ASSERT("tcp_input: active pcb->state != LISTEN", pcb->state != LISTEN);
 8012f50:	69fb      	ldr	r3, [r7, #28]
 8012f52:	7d1b      	ldrb	r3, [r3, #20]
 8012f54:	2b01      	cmp	r3, #1
 8012f56:	d105      	bne.n	8012f64 <tcp_input+0x25c>
 8012f58:	4b0b      	ldr	r3, [pc, #44]	; (8012f88 <tcp_input+0x280>)
 8012f5a:	22fd      	movs	r2, #253	; 0xfd
 8012f5c:	491c      	ldr	r1, [pc, #112]	; (8012fd0 <tcp_input+0x2c8>)
 8012f5e:	480c      	ldr	r0, [pc, #48]	; (8012f90 <tcp_input+0x288>)
 8012f60:	f006 ff7e 	bl	8019e60 <iprintf>

    /* check if PCB is bound to specific netif */
    if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 8012f64:	69fb      	ldr	r3, [r7, #28]
 8012f66:	7a1b      	ldrb	r3, [r3, #8]
 8012f68:	2b00      	cmp	r3, #0
 8012f6a:	d033      	beq.n	8012fd4 <tcp_input+0x2cc>
        (pcb->netif_idx != netif_get_index(ip_data.current_input_netif))) {
 8012f6c:	69fb      	ldr	r3, [r7, #28]
 8012f6e:	7a1a      	ldrb	r2, [r3, #8]
 8012f70:	4b09      	ldr	r3, [pc, #36]	; (8012f98 <tcp_input+0x290>)
 8012f72:	685b      	ldr	r3, [r3, #4]
 8012f74:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8012f78:	3301      	adds	r3, #1
 8012f7a:	b2db      	uxtb	r3, r3
    if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 8012f7c:	429a      	cmp	r2, r3
 8012f7e:	d029      	beq.n	8012fd4 <tcp_input+0x2cc>
      prev = pcb;
 8012f80:	69fb      	ldr	r3, [r7, #28]
 8012f82:	61bb      	str	r3, [r7, #24]
      continue;
 8012f84:	e06b      	b.n	801305e <tcp_input+0x356>
 8012f86:	bf00      	nop
 8012f88:	0801dbec 	.word	0x0801dbec
 8012f8c:	0801dc20 	.word	0x0801dc20
 8012f90:	0801dc38 	.word	0x0801dc38
 8012f94:	200070fc 	.word	0x200070fc
 8012f98:	200007f8 	.word	0x200007f8
 8012f9c:	20007100 	.word	0x20007100
 8012fa0:	20007104 	.word	0x20007104
 8012fa4:	20007102 	.word	0x20007102
 8012fa8:	0801dc60 	.word	0x0801dc60
 8012fac:	0801dc70 	.word	0x0801dc70
 8012fb0:	0801dc7c 	.word	0x0801dc7c
 8012fb4:	2000710c 	.word	0x2000710c
 8012fb8:	20007110 	.word	0x20007110
 8012fbc:	20007118 	.word	0x20007118
 8012fc0:	20007116 	.word	0x20007116
 8012fc4:	200070e0 	.word	0x200070e0
 8012fc8:	0801dc9c 	.word	0x0801dc9c
 8012fcc:	0801dcc4 	.word	0x0801dcc4
 8012fd0:	0801dcf0 	.word	0x0801dcf0
    }

    if (pcb->remote_port == tcphdr->src &&
 8012fd4:	69fb      	ldr	r3, [r7, #28]
 8012fd6:	8b1a      	ldrh	r2, [r3, #24]
 8012fd8:	4b72      	ldr	r3, [pc, #456]	; (80131a4 <tcp_input+0x49c>)
 8012fda:	681b      	ldr	r3, [r3, #0]
 8012fdc:	881b      	ldrh	r3, [r3, #0]
 8012fde:	b29b      	uxth	r3, r3
 8012fe0:	429a      	cmp	r2, r3
 8012fe2:	d13a      	bne.n	801305a <tcp_input+0x352>
        pcb->local_port == tcphdr->dest &&
 8012fe4:	69fb      	ldr	r3, [r7, #28]
 8012fe6:	8ada      	ldrh	r2, [r3, #22]
 8012fe8:	4b6e      	ldr	r3, [pc, #440]	; (80131a4 <tcp_input+0x49c>)
 8012fea:	681b      	ldr	r3, [r3, #0]
 8012fec:	885b      	ldrh	r3, [r3, #2]
 8012fee:	b29b      	uxth	r3, r3
    if (pcb->remote_port == tcphdr->src &&
 8012ff0:	429a      	cmp	r2, r3
 8012ff2:	d132      	bne.n	801305a <tcp_input+0x352>
        ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()) &&
 8012ff4:	69fb      	ldr	r3, [r7, #28]
 8012ff6:	685a      	ldr	r2, [r3, #4]
 8012ff8:	4b6b      	ldr	r3, [pc, #428]	; (80131a8 <tcp_input+0x4a0>)
 8012ffa:	691b      	ldr	r3, [r3, #16]
        pcb->local_port == tcphdr->dest &&
 8012ffc:	429a      	cmp	r2, r3
 8012ffe:	d12c      	bne.n	801305a <tcp_input+0x352>
        ip_addr_cmp(&pcb->local_ip, ip_current_dest_addr())) {
 8013000:	69fb      	ldr	r3, [r7, #28]
 8013002:	681a      	ldr	r2, [r3, #0]
 8013004:	4b68      	ldr	r3, [pc, #416]	; (80131a8 <tcp_input+0x4a0>)
 8013006:	695b      	ldr	r3, [r3, #20]
        ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()) &&
 8013008:	429a      	cmp	r2, r3
 801300a:	d126      	bne.n	801305a <tcp_input+0x352>
      /* Move this PCB to the front of the list so that subsequent
         lookups will be faster (we exploit locality in TCP segment
         arrivals). */
      LWIP_ASSERT("tcp_input: pcb->next != pcb (before cache)", pcb->next != pcb);
 801300c:	69fb      	ldr	r3, [r7, #28]
 801300e:	68db      	ldr	r3, [r3, #12]
 8013010:	69fa      	ldr	r2, [r7, #28]
 8013012:	429a      	cmp	r2, r3
 8013014:	d106      	bne.n	8013024 <tcp_input+0x31c>
 8013016:	4b65      	ldr	r3, [pc, #404]	; (80131ac <tcp_input+0x4a4>)
 8013018:	f240 120d 	movw	r2, #269	; 0x10d
 801301c:	4964      	ldr	r1, [pc, #400]	; (80131b0 <tcp_input+0x4a8>)
 801301e:	4865      	ldr	r0, [pc, #404]	; (80131b4 <tcp_input+0x4ac>)
 8013020:	f006 ff1e 	bl	8019e60 <iprintf>
      if (prev != NULL) {
 8013024:	69bb      	ldr	r3, [r7, #24]
 8013026:	2b00      	cmp	r3, #0
 8013028:	d00a      	beq.n	8013040 <tcp_input+0x338>
        prev->next = pcb->next;
 801302a:	69fb      	ldr	r3, [r7, #28]
 801302c:	68da      	ldr	r2, [r3, #12]
 801302e:	69bb      	ldr	r3, [r7, #24]
 8013030:	60da      	str	r2, [r3, #12]
        pcb->next = tcp_active_pcbs;
 8013032:	4b61      	ldr	r3, [pc, #388]	; (80131b8 <tcp_input+0x4b0>)
 8013034:	681a      	ldr	r2, [r3, #0]
 8013036:	69fb      	ldr	r3, [r7, #28]
 8013038:	60da      	str	r2, [r3, #12]
        tcp_active_pcbs = pcb;
 801303a:	4a5f      	ldr	r2, [pc, #380]	; (80131b8 <tcp_input+0x4b0>)
 801303c:	69fb      	ldr	r3, [r7, #28]
 801303e:	6013      	str	r3, [r2, #0]
      } else {
        TCP_STATS_INC(tcp.cachehit);
      }
      LWIP_ASSERT("tcp_input: pcb->next != pcb (after cache)", pcb->next != pcb);
 8013040:	69fb      	ldr	r3, [r7, #28]
 8013042:	68db      	ldr	r3, [r3, #12]
 8013044:	69fa      	ldr	r2, [r7, #28]
 8013046:	429a      	cmp	r2, r3
 8013048:	d111      	bne.n	801306e <tcp_input+0x366>
 801304a:	4b58      	ldr	r3, [pc, #352]	; (80131ac <tcp_input+0x4a4>)
 801304c:	f240 1215 	movw	r2, #277	; 0x115
 8013050:	495a      	ldr	r1, [pc, #360]	; (80131bc <tcp_input+0x4b4>)
 8013052:	4858      	ldr	r0, [pc, #352]	; (80131b4 <tcp_input+0x4ac>)
 8013054:	f006 ff04 	bl	8019e60 <iprintf>
      break;
 8013058:	e009      	b.n	801306e <tcp_input+0x366>
    }
    prev = pcb;
 801305a:	69fb      	ldr	r3, [r7, #28]
 801305c:	61bb      	str	r3, [r7, #24]
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 801305e:	69fb      	ldr	r3, [r7, #28]
 8013060:	68db      	ldr	r3, [r3, #12]
 8013062:	61fb      	str	r3, [r7, #28]
 8013064:	69fb      	ldr	r3, [r7, #28]
 8013066:	2b00      	cmp	r3, #0
 8013068:	f47f af5e 	bne.w	8012f28 <tcp_input+0x220>
 801306c:	e000      	b.n	8013070 <tcp_input+0x368>
      break;
 801306e:	bf00      	nop
  }

  if (pcb == NULL) {
 8013070:	69fb      	ldr	r3, [r7, #28]
 8013072:	2b00      	cmp	r3, #0
 8013074:	f040 80aa 	bne.w	80131cc <tcp_input+0x4c4>
    /* If it did not go to an active connection, we check the connections
       in the TIME-WAIT state. */
    for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 8013078:	4b51      	ldr	r3, [pc, #324]	; (80131c0 <tcp_input+0x4b8>)
 801307a:	681b      	ldr	r3, [r3, #0]
 801307c:	61fb      	str	r3, [r7, #28]
 801307e:	e03f      	b.n	8013100 <tcp_input+0x3f8>
      LWIP_ASSERT("tcp_input: TIME-WAIT pcb->state == TIME-WAIT", pcb->state == TIME_WAIT);
 8013080:	69fb      	ldr	r3, [r7, #28]
 8013082:	7d1b      	ldrb	r3, [r3, #20]
 8013084:	2b0a      	cmp	r3, #10
 8013086:	d006      	beq.n	8013096 <tcp_input+0x38e>
 8013088:	4b48      	ldr	r3, [pc, #288]	; (80131ac <tcp_input+0x4a4>)
 801308a:	f240 121f 	movw	r2, #287	; 0x11f
 801308e:	494d      	ldr	r1, [pc, #308]	; (80131c4 <tcp_input+0x4bc>)
 8013090:	4848      	ldr	r0, [pc, #288]	; (80131b4 <tcp_input+0x4ac>)
 8013092:	f006 fee5 	bl	8019e60 <iprintf>

      /* check if PCB is bound to specific netif */
      if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 8013096:	69fb      	ldr	r3, [r7, #28]
 8013098:	7a1b      	ldrb	r3, [r3, #8]
 801309a:	2b00      	cmp	r3, #0
 801309c:	d009      	beq.n	80130b2 <tcp_input+0x3aa>
          (pcb->netif_idx != netif_get_index(ip_data.current_input_netif))) {
 801309e:	69fb      	ldr	r3, [r7, #28]
 80130a0:	7a1a      	ldrb	r2, [r3, #8]
 80130a2:	4b41      	ldr	r3, [pc, #260]	; (80131a8 <tcp_input+0x4a0>)
 80130a4:	685b      	ldr	r3, [r3, #4]
 80130a6:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 80130aa:	3301      	adds	r3, #1
 80130ac:	b2db      	uxtb	r3, r3
      if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 80130ae:	429a      	cmp	r2, r3
 80130b0:	d122      	bne.n	80130f8 <tcp_input+0x3f0>
        continue;
      }

      if (pcb->remote_port == tcphdr->src &&
 80130b2:	69fb      	ldr	r3, [r7, #28]
 80130b4:	8b1a      	ldrh	r2, [r3, #24]
 80130b6:	4b3b      	ldr	r3, [pc, #236]	; (80131a4 <tcp_input+0x49c>)
 80130b8:	681b      	ldr	r3, [r3, #0]
 80130ba:	881b      	ldrh	r3, [r3, #0]
 80130bc:	b29b      	uxth	r3, r3
 80130be:	429a      	cmp	r2, r3
 80130c0:	d11b      	bne.n	80130fa <tcp_input+0x3f2>
          pcb->local_port == tcphdr->dest &&
 80130c2:	69fb      	ldr	r3, [r7, #28]
 80130c4:	8ada      	ldrh	r2, [r3, #22]
 80130c6:	4b37      	ldr	r3, [pc, #220]	; (80131a4 <tcp_input+0x49c>)
 80130c8:	681b      	ldr	r3, [r3, #0]
 80130ca:	885b      	ldrh	r3, [r3, #2]
 80130cc:	b29b      	uxth	r3, r3
      if (pcb->remote_port == tcphdr->src &&
 80130ce:	429a      	cmp	r2, r3
 80130d0:	d113      	bne.n	80130fa <tcp_input+0x3f2>
          ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()) &&
 80130d2:	69fb      	ldr	r3, [r7, #28]
 80130d4:	685a      	ldr	r2, [r3, #4]
 80130d6:	4b34      	ldr	r3, [pc, #208]	; (80131a8 <tcp_input+0x4a0>)
 80130d8:	691b      	ldr	r3, [r3, #16]
          pcb->local_port == tcphdr->dest &&
 80130da:	429a      	cmp	r2, r3
 80130dc:	d10d      	bne.n	80130fa <tcp_input+0x3f2>
          ip_addr_cmp(&pcb->local_ip, ip_current_dest_addr())) {
 80130de:	69fb      	ldr	r3, [r7, #28]
 80130e0:	681a      	ldr	r2, [r3, #0]
 80130e2:	4b31      	ldr	r3, [pc, #196]	; (80131a8 <tcp_input+0x4a0>)
 80130e4:	695b      	ldr	r3, [r3, #20]
          ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()) &&
 80130e6:	429a      	cmp	r2, r3
 80130e8:	d107      	bne.n	80130fa <tcp_input+0x3f2>
#ifdef LWIP_HOOK_TCP_INPACKET_PCB
        if (LWIP_HOOK_TCP_INPACKET_PCB(pcb, tcphdr, tcphdr_optlen, tcphdr_opt1len,
                                       tcphdr_opt2, p) == ERR_OK)
#endif
        {
          tcp_timewait_input(pcb);
 80130ea:	69f8      	ldr	r0, [r7, #28]
 80130ec:	f000 fb56 	bl	801379c <tcp_timewait_input>
        }
        pbuf_free(p);
 80130f0:	6878      	ldr	r0, [r7, #4]
 80130f2:	f7fd ffdd 	bl	80110b0 <pbuf_free>
        return;
 80130f6:	e1fd      	b.n	80134f4 <tcp_input+0x7ec>
        continue;
 80130f8:	bf00      	nop
    for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 80130fa:	69fb      	ldr	r3, [r7, #28]
 80130fc:	68db      	ldr	r3, [r3, #12]
 80130fe:	61fb      	str	r3, [r7, #28]
 8013100:	69fb      	ldr	r3, [r7, #28]
 8013102:	2b00      	cmp	r3, #0
 8013104:	d1bc      	bne.n	8013080 <tcp_input+0x378>
      }
    }

    /* Finally, if we still did not get a match, we check all PCBs that
       are LISTENing for incoming connections. */
    prev = NULL;
 8013106:	2300      	movs	r3, #0
 8013108:	61bb      	str	r3, [r7, #24]
    for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = lpcb->next) {
 801310a:	4b2f      	ldr	r3, [pc, #188]	; (80131c8 <tcp_input+0x4c0>)
 801310c:	681b      	ldr	r3, [r3, #0]
 801310e:	617b      	str	r3, [r7, #20]
 8013110:	e02a      	b.n	8013168 <tcp_input+0x460>
      /* check if PCB is bound to specific netif */
      if ((lpcb->netif_idx != NETIF_NO_INDEX) &&
 8013112:	697b      	ldr	r3, [r7, #20]
 8013114:	7a1b      	ldrb	r3, [r3, #8]
 8013116:	2b00      	cmp	r3, #0
 8013118:	d00c      	beq.n	8013134 <tcp_input+0x42c>
          (lpcb->netif_idx != netif_get_index(ip_data.current_input_netif))) {
 801311a:	697b      	ldr	r3, [r7, #20]
 801311c:	7a1a      	ldrb	r2, [r3, #8]
 801311e:	4b22      	ldr	r3, [pc, #136]	; (80131a8 <tcp_input+0x4a0>)
 8013120:	685b      	ldr	r3, [r3, #4]
 8013122:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8013126:	3301      	adds	r3, #1
 8013128:	b2db      	uxtb	r3, r3
      if ((lpcb->netif_idx != NETIF_NO_INDEX) &&
 801312a:	429a      	cmp	r2, r3
 801312c:	d002      	beq.n	8013134 <tcp_input+0x42c>
        prev = (struct tcp_pcb *)lpcb;
 801312e:	697b      	ldr	r3, [r7, #20]
 8013130:	61bb      	str	r3, [r7, #24]
        continue;
 8013132:	e016      	b.n	8013162 <tcp_input+0x45a>
      }

      if (lpcb->local_port == tcphdr->dest) {
 8013134:	697b      	ldr	r3, [r7, #20]
 8013136:	8ada      	ldrh	r2, [r3, #22]
 8013138:	4b1a      	ldr	r3, [pc, #104]	; (80131a4 <tcp_input+0x49c>)
 801313a:	681b      	ldr	r3, [r3, #0]
 801313c:	885b      	ldrh	r3, [r3, #2]
 801313e:	b29b      	uxth	r3, r3
 8013140:	429a      	cmp	r2, r3
 8013142:	d10c      	bne.n	801315e <tcp_input+0x456>
          lpcb_prev = prev;
#else /* SO_REUSE */
          break;
#endif /* SO_REUSE */
        } else if (IP_ADDR_PCB_VERSION_MATCH_EXACT(lpcb, ip_current_dest_addr())) {
          if (ip_addr_cmp(&lpcb->local_ip, ip_current_dest_addr())) {
 8013144:	697b      	ldr	r3, [r7, #20]
 8013146:	681a      	ldr	r2, [r3, #0]
 8013148:	4b17      	ldr	r3, [pc, #92]	; (80131a8 <tcp_input+0x4a0>)
 801314a:	695b      	ldr	r3, [r3, #20]
 801314c:	429a      	cmp	r2, r3
 801314e:	d00f      	beq.n	8013170 <tcp_input+0x468>
            /* found an exact match */
            break;
          } else if (ip_addr_isany(&lpcb->local_ip)) {
 8013150:	697b      	ldr	r3, [r7, #20]
 8013152:	2b00      	cmp	r3, #0
 8013154:	d00d      	beq.n	8013172 <tcp_input+0x46a>
 8013156:	697b      	ldr	r3, [r7, #20]
 8013158:	681b      	ldr	r3, [r3, #0]
 801315a:	2b00      	cmp	r3, #0
 801315c:	d009      	beq.n	8013172 <tcp_input+0x46a>
            break;
#endif /* SO_REUSE */
          }
        }
      }
      prev = (struct tcp_pcb *)lpcb;
 801315e:	697b      	ldr	r3, [r7, #20]
 8013160:	61bb      	str	r3, [r7, #24]
    for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = lpcb->next) {
 8013162:	697b      	ldr	r3, [r7, #20]
 8013164:	68db      	ldr	r3, [r3, #12]
 8013166:	617b      	str	r3, [r7, #20]
 8013168:	697b      	ldr	r3, [r7, #20]
 801316a:	2b00      	cmp	r3, #0
 801316c:	d1d1      	bne.n	8013112 <tcp_input+0x40a>
 801316e:	e000      	b.n	8013172 <tcp_input+0x46a>
            break;
 8013170:	bf00      	nop
      /* only pass to ANY if no specific local IP has been found */
      lpcb = lpcb_any;
      prev = lpcb_prev;
    }
#endif /* SO_REUSE */
    if (lpcb != NULL) {
 8013172:	697b      	ldr	r3, [r7, #20]
 8013174:	2b00      	cmp	r3, #0
 8013176:	d029      	beq.n	80131cc <tcp_input+0x4c4>
      /* Move this PCB to the front of the list so that subsequent
         lookups will be faster (we exploit locality in TCP segment
         arrivals). */
      if (prev != NULL) {
 8013178:	69bb      	ldr	r3, [r7, #24]
 801317a:	2b00      	cmp	r3, #0
 801317c:	d00a      	beq.n	8013194 <tcp_input+0x48c>
        ((struct tcp_pcb_listen *)prev)->next = lpcb->next;
 801317e:	697b      	ldr	r3, [r7, #20]
 8013180:	68da      	ldr	r2, [r3, #12]
 8013182:	69bb      	ldr	r3, [r7, #24]
 8013184:	60da      	str	r2, [r3, #12]
        /* our successor is the remainder of the listening list */
        lpcb->next = tcp_listen_pcbs.listen_pcbs;
 8013186:	4b10      	ldr	r3, [pc, #64]	; (80131c8 <tcp_input+0x4c0>)
 8013188:	681a      	ldr	r2, [r3, #0]
 801318a:	697b      	ldr	r3, [r7, #20]
 801318c:	60da      	str	r2, [r3, #12]
        /* put this listening pcb at the head of the listening list */
        tcp_listen_pcbs.listen_pcbs = lpcb;
 801318e:	4a0e      	ldr	r2, [pc, #56]	; (80131c8 <tcp_input+0x4c0>)
 8013190:	697b      	ldr	r3, [r7, #20]
 8013192:	6013      	str	r3, [r2, #0]
#ifdef LWIP_HOOK_TCP_INPACKET_PCB
      if (LWIP_HOOK_TCP_INPACKET_PCB((struct tcp_pcb *)lpcb, tcphdr, tcphdr_optlen,
                                     tcphdr_opt1len, tcphdr_opt2, p) == ERR_OK)
#endif
      {
        tcp_listen_input(lpcb);
 8013194:	6978      	ldr	r0, [r7, #20]
 8013196:	f000 fa03 	bl	80135a0 <tcp_listen_input>
      }
      pbuf_free(p);
 801319a:	6878      	ldr	r0, [r7, #4]
 801319c:	f7fd ff88 	bl	80110b0 <pbuf_free>
      return;
 80131a0:	e1a8      	b.n	80134f4 <tcp_input+0x7ec>
 80131a2:	bf00      	nop
 80131a4:	200070fc 	.word	0x200070fc
 80131a8:	200007f8 	.word	0x200007f8
 80131ac:	0801dbec 	.word	0x0801dbec
 80131b0:	0801dd18 	.word	0x0801dd18
 80131b4:	0801dc38 	.word	0x0801dc38
 80131b8:	200070e0 	.word	0x200070e0
 80131bc:	0801dd44 	.word	0x0801dd44
 80131c0:	200070e4 	.word	0x200070e4
 80131c4:	0801dd70 	.word	0x0801dd70
 80131c8:	200070dc 	.word	0x200070dc
      tcphdr_opt1len, tcphdr_opt2, p) != ERR_OK) {
    pbuf_free(p);
    return;
  }
#endif
  if (pcb != NULL) {
 80131cc:	69fb      	ldr	r3, [r7, #28]
 80131ce:	2b00      	cmp	r3, #0
 80131d0:	f000 8158 	beq.w	8013484 <tcp_input+0x77c>
#if TCP_INPUT_DEBUG
    tcp_debug_print_state(pcb->state);
#endif /* TCP_INPUT_DEBUG */

    /* Set up a tcp_seg structure. */
    inseg.next = NULL;
 80131d4:	4b95      	ldr	r3, [pc, #596]	; (801342c <tcp_input+0x724>)
 80131d6:	2200      	movs	r2, #0
 80131d8:	601a      	str	r2, [r3, #0]
    inseg.len = p->tot_len;
 80131da:	687b      	ldr	r3, [r7, #4]
 80131dc:	891a      	ldrh	r2, [r3, #8]
 80131de:	4b93      	ldr	r3, [pc, #588]	; (801342c <tcp_input+0x724>)
 80131e0:	811a      	strh	r2, [r3, #8]
    inseg.p = p;
 80131e2:	4a92      	ldr	r2, [pc, #584]	; (801342c <tcp_input+0x724>)
 80131e4:	687b      	ldr	r3, [r7, #4]
 80131e6:	6053      	str	r3, [r2, #4]
    inseg.tcphdr = tcphdr;
 80131e8:	4b91      	ldr	r3, [pc, #580]	; (8013430 <tcp_input+0x728>)
 80131ea:	681b      	ldr	r3, [r3, #0]
 80131ec:	4a8f      	ldr	r2, [pc, #572]	; (801342c <tcp_input+0x724>)
 80131ee:	60d3      	str	r3, [r2, #12]

    recv_data = NULL;
 80131f0:	4b90      	ldr	r3, [pc, #576]	; (8013434 <tcp_input+0x72c>)
 80131f2:	2200      	movs	r2, #0
 80131f4:	601a      	str	r2, [r3, #0]
    recv_flags = 0;
 80131f6:	4b90      	ldr	r3, [pc, #576]	; (8013438 <tcp_input+0x730>)
 80131f8:	2200      	movs	r2, #0
 80131fa:	701a      	strb	r2, [r3, #0]
    recv_acked = 0;
 80131fc:	4b8f      	ldr	r3, [pc, #572]	; (801343c <tcp_input+0x734>)
 80131fe:	2200      	movs	r2, #0
 8013200:	801a      	strh	r2, [r3, #0]

    if (flags & TCP_PSH) {
 8013202:	4b8f      	ldr	r3, [pc, #572]	; (8013440 <tcp_input+0x738>)
 8013204:	781b      	ldrb	r3, [r3, #0]
 8013206:	f003 0308 	and.w	r3, r3, #8
 801320a:	2b00      	cmp	r3, #0
 801320c:	d006      	beq.n	801321c <tcp_input+0x514>
      p->flags |= PBUF_FLAG_PUSH;
 801320e:	687b      	ldr	r3, [r7, #4]
 8013210:	7b5b      	ldrb	r3, [r3, #13]
 8013212:	f043 0301 	orr.w	r3, r3, #1
 8013216:	b2da      	uxtb	r2, r3
 8013218:	687b      	ldr	r3, [r7, #4]
 801321a:	735a      	strb	r2, [r3, #13]
    }

    /* If there is data which was previously "refused" by upper layer */
    if (pcb->refused_data != NULL) {
 801321c:	69fb      	ldr	r3, [r7, #28]
 801321e:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8013220:	2b00      	cmp	r3, #0
 8013222:	d017      	beq.n	8013254 <tcp_input+0x54c>
      if ((tcp_process_refused_data(pcb) == ERR_ABRT) ||
 8013224:	69f8      	ldr	r0, [r7, #28]
 8013226:	f7ff f927 	bl	8012478 <tcp_process_refused_data>
 801322a:	4603      	mov	r3, r0
 801322c:	f113 0f0d 	cmn.w	r3, #13
 8013230:	d007      	beq.n	8013242 <tcp_input+0x53a>
          ((pcb->refused_data != NULL) && (tcplen > 0))) {
 8013232:	69fb      	ldr	r3, [r7, #28]
 8013234:	6f9b      	ldr	r3, [r3, #120]	; 0x78
      if ((tcp_process_refused_data(pcb) == ERR_ABRT) ||
 8013236:	2b00      	cmp	r3, #0
 8013238:	d00c      	beq.n	8013254 <tcp_input+0x54c>
          ((pcb->refused_data != NULL) && (tcplen > 0))) {
 801323a:	4b82      	ldr	r3, [pc, #520]	; (8013444 <tcp_input+0x73c>)
 801323c:	881b      	ldrh	r3, [r3, #0]
 801323e:	2b00      	cmp	r3, #0
 8013240:	d008      	beq.n	8013254 <tcp_input+0x54c>
        /* pcb has been aborted or refused data is still refused and the new
           segment contains data */
        if (pcb->rcv_ann_wnd == 0) {
 8013242:	69fb      	ldr	r3, [r7, #28]
 8013244:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8013246:	2b00      	cmp	r3, #0
 8013248:	f040 80e4 	bne.w	8013414 <tcp_input+0x70c>
          /* this is a zero-window probe, we respond to it with current RCV.NXT
          and drop the data segment */
          tcp_send_empty_ack(pcb);
 801324c:	69f8      	ldr	r0, [r7, #28]
 801324e:	f003 f9ad 	bl	80165ac <tcp_send_empty_ack>
        }
        TCP_STATS_INC(tcp.drop);
        MIB2_STATS_INC(mib2.tcpinerrs);
        goto aborted;
 8013252:	e0df      	b.n	8013414 <tcp_input+0x70c>
      }
    }
    tcp_input_pcb = pcb;
 8013254:	4a7c      	ldr	r2, [pc, #496]	; (8013448 <tcp_input+0x740>)
 8013256:	69fb      	ldr	r3, [r7, #28]
 8013258:	6013      	str	r3, [r2, #0]
    err = tcp_process(pcb);
 801325a:	69f8      	ldr	r0, [r7, #28]
 801325c:	f000 fb18 	bl	8013890 <tcp_process>
 8013260:	4603      	mov	r3, r0
 8013262:	74fb      	strb	r3, [r7, #19]
    /* A return value of ERR_ABRT means that tcp_abort() was called
       and that the pcb has been freed. If so, we don't do anything. */
    if (err != ERR_ABRT) {
 8013264:	f997 3013 	ldrsb.w	r3, [r7, #19]
 8013268:	f113 0f0d 	cmn.w	r3, #13
 801326c:	f000 80d4 	beq.w	8013418 <tcp_input+0x710>
      if (recv_flags & TF_RESET) {
 8013270:	4b71      	ldr	r3, [pc, #452]	; (8013438 <tcp_input+0x730>)
 8013272:	781b      	ldrb	r3, [r3, #0]
 8013274:	f003 0308 	and.w	r3, r3, #8
 8013278:	2b00      	cmp	r3, #0
 801327a:	d015      	beq.n	80132a8 <tcp_input+0x5a0>
        /* TF_RESET means that the connection was reset by the other
           end. We then call the error callback to inform the
           application that the connection is dead before we
           deallocate the PCB. */
        TCP_EVENT_ERR(pcb->state, pcb->errf, pcb->callback_arg, ERR_RST);
 801327c:	69fb      	ldr	r3, [r7, #28]
 801327e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8013282:	2b00      	cmp	r3, #0
 8013284:	d008      	beq.n	8013298 <tcp_input+0x590>
 8013286:	69fb      	ldr	r3, [r7, #28]
 8013288:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 801328c:	69fa      	ldr	r2, [r7, #28]
 801328e:	6912      	ldr	r2, [r2, #16]
 8013290:	f06f 010d 	mvn.w	r1, #13
 8013294:	4610      	mov	r0, r2
 8013296:	4798      	blx	r3
        tcp_pcb_remove(&tcp_active_pcbs, pcb);
 8013298:	69f9      	ldr	r1, [r7, #28]
 801329a:	486c      	ldr	r0, [pc, #432]	; (801344c <tcp_input+0x744>)
 801329c:	f7ff fbbc 	bl	8012a18 <tcp_pcb_remove>
        tcp_free(pcb);
 80132a0:	69f8      	ldr	r0, [r7, #28]
 80132a2:	f7fe f9a5 	bl	80115f0 <tcp_free>
 80132a6:	e0da      	b.n	801345e <tcp_input+0x756>
      } else {
        err = ERR_OK;
 80132a8:	2300      	movs	r3, #0
 80132aa:	74fb      	strb	r3, [r7, #19]
        /* If the application has registered a "sent" function to be
           called when new send buffer space is available, we call it
           now. */
        if (recv_acked > 0) {
 80132ac:	4b63      	ldr	r3, [pc, #396]	; (801343c <tcp_input+0x734>)
 80132ae:	881b      	ldrh	r3, [r3, #0]
 80132b0:	2b00      	cmp	r3, #0
 80132b2:	d01d      	beq.n	80132f0 <tcp_input+0x5e8>
          while (acked > 0) {
            acked16 = (u16_t)LWIP_MIN(acked, 0xffffu);
            acked -= acked16;
#else
          {
            acked16 = recv_acked;
 80132b4:	4b61      	ldr	r3, [pc, #388]	; (801343c <tcp_input+0x734>)
 80132b6:	881b      	ldrh	r3, [r3, #0]
 80132b8:	81fb      	strh	r3, [r7, #14]
#endif
            TCP_EVENT_SENT(pcb, (u16_t)acked16, err);
 80132ba:	69fb      	ldr	r3, [r7, #28]
 80132bc:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80132c0:	2b00      	cmp	r3, #0
 80132c2:	d00a      	beq.n	80132da <tcp_input+0x5d2>
 80132c4:	69fb      	ldr	r3, [r7, #28]
 80132c6:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80132ca:	69fa      	ldr	r2, [r7, #28]
 80132cc:	6910      	ldr	r0, [r2, #16]
 80132ce:	89fa      	ldrh	r2, [r7, #14]
 80132d0:	69f9      	ldr	r1, [r7, #28]
 80132d2:	4798      	blx	r3
 80132d4:	4603      	mov	r3, r0
 80132d6:	74fb      	strb	r3, [r7, #19]
 80132d8:	e001      	b.n	80132de <tcp_input+0x5d6>
 80132da:	2300      	movs	r3, #0
 80132dc:	74fb      	strb	r3, [r7, #19]
            if (err == ERR_ABRT) {
 80132de:	f997 3013 	ldrsb.w	r3, [r7, #19]
 80132e2:	f113 0f0d 	cmn.w	r3, #13
 80132e6:	f000 8099 	beq.w	801341c <tcp_input+0x714>
              goto aborted;
            }
          }
          recv_acked = 0;
 80132ea:	4b54      	ldr	r3, [pc, #336]	; (801343c <tcp_input+0x734>)
 80132ec:	2200      	movs	r2, #0
 80132ee:	801a      	strh	r2, [r3, #0]
        }
        if (tcp_input_delayed_close(pcb)) {
 80132f0:	69f8      	ldr	r0, [r7, #28]
 80132f2:	f000 f915 	bl	8013520 <tcp_input_delayed_close>
 80132f6:	4603      	mov	r3, r0
 80132f8:	2b00      	cmp	r3, #0
 80132fa:	f040 8091 	bne.w	8013420 <tcp_input+0x718>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
        while (recv_data != NULL) {
          struct pbuf *rest = NULL;
          pbuf_split_64k(recv_data, &rest);
#else /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
        if (recv_data != NULL) {
 80132fe:	4b4d      	ldr	r3, [pc, #308]	; (8013434 <tcp_input+0x72c>)
 8013300:	681b      	ldr	r3, [r3, #0]
 8013302:	2b00      	cmp	r3, #0
 8013304:	d041      	beq.n	801338a <tcp_input+0x682>
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */

          LWIP_ASSERT("pcb->refused_data == NULL", pcb->refused_data == NULL);
 8013306:	69fb      	ldr	r3, [r7, #28]
 8013308:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 801330a:	2b00      	cmp	r3, #0
 801330c:	d006      	beq.n	801331c <tcp_input+0x614>
 801330e:	4b50      	ldr	r3, [pc, #320]	; (8013450 <tcp_input+0x748>)
 8013310:	f44f 72f3 	mov.w	r2, #486	; 0x1e6
 8013314:	494f      	ldr	r1, [pc, #316]	; (8013454 <tcp_input+0x74c>)
 8013316:	4850      	ldr	r0, [pc, #320]	; (8013458 <tcp_input+0x750>)
 8013318:	f006 fda2 	bl	8019e60 <iprintf>
          if (pcb->flags & TF_RXCLOSED) {
 801331c:	69fb      	ldr	r3, [r7, #28]
 801331e:	8b5b      	ldrh	r3, [r3, #26]
 8013320:	f003 0310 	and.w	r3, r3, #16
 8013324:	2b00      	cmp	r3, #0
 8013326:	d008      	beq.n	801333a <tcp_input+0x632>
            /* received data although already closed -> abort (send RST) to
               notify the remote host that not all data has been processed */
            pbuf_free(recv_data);
 8013328:	4b42      	ldr	r3, [pc, #264]	; (8013434 <tcp_input+0x72c>)
 801332a:	681b      	ldr	r3, [r3, #0]
 801332c:	4618      	mov	r0, r3
 801332e:	f7fd febf 	bl	80110b0 <pbuf_free>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
            if (rest != NULL) {
              pbuf_free(rest);
            }
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
            tcp_abort(pcb);
 8013332:	69f8      	ldr	r0, [r7, #28]
 8013334:	f7fe fc44 	bl	8011bc0 <tcp_abort>
            goto aborted;
 8013338:	e091      	b.n	801345e <tcp_input+0x756>
          }

          /* Notify application that data has been received. */
          TCP_EVENT_RECV(pcb, recv_data, ERR_OK, err);
 801333a:	69fb      	ldr	r3, [r7, #28]
 801333c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8013340:	2b00      	cmp	r3, #0
 8013342:	d00c      	beq.n	801335e <tcp_input+0x656>
 8013344:	69fb      	ldr	r3, [r7, #28]
 8013346:	f8d3 4084 	ldr.w	r4, [r3, #132]	; 0x84
 801334a:	69fb      	ldr	r3, [r7, #28]
 801334c:	6918      	ldr	r0, [r3, #16]
 801334e:	4b39      	ldr	r3, [pc, #228]	; (8013434 <tcp_input+0x72c>)
 8013350:	681a      	ldr	r2, [r3, #0]
 8013352:	2300      	movs	r3, #0
 8013354:	69f9      	ldr	r1, [r7, #28]
 8013356:	47a0      	blx	r4
 8013358:	4603      	mov	r3, r0
 801335a:	74fb      	strb	r3, [r7, #19]
 801335c:	e008      	b.n	8013370 <tcp_input+0x668>
 801335e:	4b35      	ldr	r3, [pc, #212]	; (8013434 <tcp_input+0x72c>)
 8013360:	681a      	ldr	r2, [r3, #0]
 8013362:	2300      	movs	r3, #0
 8013364:	69f9      	ldr	r1, [r7, #28]
 8013366:	2000      	movs	r0, #0
 8013368:	f7ff f95e 	bl	8012628 <tcp_recv_null>
 801336c:	4603      	mov	r3, r0
 801336e:	74fb      	strb	r3, [r7, #19]
          if (err == ERR_ABRT) {
 8013370:	f997 3013 	ldrsb.w	r3, [r7, #19]
 8013374:	f113 0f0d 	cmn.w	r3, #13
 8013378:	d054      	beq.n	8013424 <tcp_input+0x71c>
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
            goto aborted;
          }

          /* If the upper layer can't receive this data, store it */
          if (err != ERR_OK) {
 801337a:	f997 3013 	ldrsb.w	r3, [r7, #19]
 801337e:	2b00      	cmp	r3, #0
 8013380:	d003      	beq.n	801338a <tcp_input+0x682>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
            if (rest != NULL) {
              pbuf_cat(recv_data, rest);
            }
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
            pcb->refused_data = recv_data;
 8013382:	4b2c      	ldr	r3, [pc, #176]	; (8013434 <tcp_input+0x72c>)
 8013384:	681a      	ldr	r2, [r3, #0]
 8013386:	69fb      	ldr	r3, [r7, #28]
 8013388:	679a      	str	r2, [r3, #120]	; 0x78
          }
        }

        /* If a FIN segment was received, we call the callback
           function with a NULL buffer to indicate EOF. */
        if (recv_flags & TF_GOT_FIN) {
 801338a:	4b2b      	ldr	r3, [pc, #172]	; (8013438 <tcp_input+0x730>)
 801338c:	781b      	ldrb	r3, [r3, #0]
 801338e:	f003 0320 	and.w	r3, r3, #32
 8013392:	2b00      	cmp	r3, #0
 8013394:	d031      	beq.n	80133fa <tcp_input+0x6f2>
          if (pcb->refused_data != NULL) {
 8013396:	69fb      	ldr	r3, [r7, #28]
 8013398:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 801339a:	2b00      	cmp	r3, #0
 801339c:	d009      	beq.n	80133b2 <tcp_input+0x6aa>
            /* Delay this if we have refused data. */
            pcb->refused_data->flags |= PBUF_FLAG_TCP_FIN;
 801339e:	69fb      	ldr	r3, [r7, #28]
 80133a0:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80133a2:	7b5a      	ldrb	r2, [r3, #13]
 80133a4:	69fb      	ldr	r3, [r7, #28]
 80133a6:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80133a8:	f042 0220 	orr.w	r2, r2, #32
 80133ac:	b2d2      	uxtb	r2, r2
 80133ae:	735a      	strb	r2, [r3, #13]
 80133b0:	e023      	b.n	80133fa <tcp_input+0x6f2>
          } else {
            /* correct rcv_wnd as the application won't call tcp_recved()
               for the FIN's seqno */
            if (pcb->rcv_wnd != TCP_WND_MAX(pcb)) {
 80133b2:	69fb      	ldr	r3, [r7, #28]
 80133b4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80133b6:	f241 62d0 	movw	r2, #5840	; 0x16d0
 80133ba:	4293      	cmp	r3, r2
 80133bc:	d005      	beq.n	80133ca <tcp_input+0x6c2>
              pcb->rcv_wnd++;
 80133be:	69fb      	ldr	r3, [r7, #28]
 80133c0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80133c2:	3301      	adds	r3, #1
 80133c4:	b29a      	uxth	r2, r3
 80133c6:	69fb      	ldr	r3, [r7, #28]
 80133c8:	851a      	strh	r2, [r3, #40]	; 0x28
            }
            TCP_EVENT_CLOSED(pcb, err);
 80133ca:	69fb      	ldr	r3, [r7, #28]
 80133cc:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80133d0:	2b00      	cmp	r3, #0
 80133d2:	d00b      	beq.n	80133ec <tcp_input+0x6e4>
 80133d4:	69fb      	ldr	r3, [r7, #28]
 80133d6:	f8d3 4084 	ldr.w	r4, [r3, #132]	; 0x84
 80133da:	69fb      	ldr	r3, [r7, #28]
 80133dc:	6918      	ldr	r0, [r3, #16]
 80133de:	2300      	movs	r3, #0
 80133e0:	2200      	movs	r2, #0
 80133e2:	69f9      	ldr	r1, [r7, #28]
 80133e4:	47a0      	blx	r4
 80133e6:	4603      	mov	r3, r0
 80133e8:	74fb      	strb	r3, [r7, #19]
 80133ea:	e001      	b.n	80133f0 <tcp_input+0x6e8>
 80133ec:	2300      	movs	r3, #0
 80133ee:	74fb      	strb	r3, [r7, #19]
            if (err == ERR_ABRT) {
 80133f0:	f997 3013 	ldrsb.w	r3, [r7, #19]
 80133f4:	f113 0f0d 	cmn.w	r3, #13
 80133f8:	d016      	beq.n	8013428 <tcp_input+0x720>
              goto aborted;
            }
          }
        }

        tcp_input_pcb = NULL;
 80133fa:	4b13      	ldr	r3, [pc, #76]	; (8013448 <tcp_input+0x740>)
 80133fc:	2200      	movs	r2, #0
 80133fe:	601a      	str	r2, [r3, #0]
        if (tcp_input_delayed_close(pcb)) {
 8013400:	69f8      	ldr	r0, [r7, #28]
 8013402:	f000 f88d 	bl	8013520 <tcp_input_delayed_close>
 8013406:	4603      	mov	r3, r0
 8013408:	2b00      	cmp	r3, #0
 801340a:	d127      	bne.n	801345c <tcp_input+0x754>
          goto aborted;
        }
        /* Try to send something out. */
        tcp_output(pcb);
 801340c:	69f8      	ldr	r0, [r7, #28]
 801340e:	f002 fac7 	bl	80159a0 <tcp_output>
 8013412:	e024      	b.n	801345e <tcp_input+0x756>
        goto aborted;
 8013414:	bf00      	nop
 8013416:	e022      	b.n	801345e <tcp_input+0x756>
#endif /* TCP_INPUT_DEBUG */
      }
    }
    /* Jump target if pcb has been aborted in a callback (by calling tcp_abort()).
       Below this line, 'pcb' may not be dereferenced! */
aborted:
 8013418:	bf00      	nop
 801341a:	e020      	b.n	801345e <tcp_input+0x756>
              goto aborted;
 801341c:	bf00      	nop
 801341e:	e01e      	b.n	801345e <tcp_input+0x756>
          goto aborted;
 8013420:	bf00      	nop
 8013422:	e01c      	b.n	801345e <tcp_input+0x756>
            goto aborted;
 8013424:	bf00      	nop
 8013426:	e01a      	b.n	801345e <tcp_input+0x756>
              goto aborted;
 8013428:	bf00      	nop
 801342a:	e018      	b.n	801345e <tcp_input+0x756>
 801342c:	200070ec 	.word	0x200070ec
 8013430:	200070fc 	.word	0x200070fc
 8013434:	2000711c 	.word	0x2000711c
 8013438:	20007119 	.word	0x20007119
 801343c:	20007114 	.word	0x20007114
 8013440:	20007118 	.word	0x20007118
 8013444:	20007116 	.word	0x20007116
 8013448:	20007120 	.word	0x20007120
 801344c:	200070e0 	.word	0x200070e0
 8013450:	0801dbec 	.word	0x0801dbec
 8013454:	0801dda0 	.word	0x0801dda0
 8013458:	0801dc38 	.word	0x0801dc38
          goto aborted;
 801345c:	bf00      	nop
    tcp_input_pcb = NULL;
 801345e:	4b27      	ldr	r3, [pc, #156]	; (80134fc <tcp_input+0x7f4>)
 8013460:	2200      	movs	r2, #0
 8013462:	601a      	str	r2, [r3, #0]
    recv_data = NULL;
 8013464:	4b26      	ldr	r3, [pc, #152]	; (8013500 <tcp_input+0x7f8>)
 8013466:	2200      	movs	r2, #0
 8013468:	601a      	str	r2, [r3, #0]

    /* give up our reference to inseg.p */
    if (inseg.p != NULL) {
 801346a:	4b26      	ldr	r3, [pc, #152]	; (8013504 <tcp_input+0x7fc>)
 801346c:	685b      	ldr	r3, [r3, #4]
 801346e:	2b00      	cmp	r3, #0
 8013470:	d03f      	beq.n	80134f2 <tcp_input+0x7ea>
      pbuf_free(inseg.p);
 8013472:	4b24      	ldr	r3, [pc, #144]	; (8013504 <tcp_input+0x7fc>)
 8013474:	685b      	ldr	r3, [r3, #4]
 8013476:	4618      	mov	r0, r3
 8013478:	f7fd fe1a 	bl	80110b0 <pbuf_free>
      inseg.p = NULL;
 801347c:	4b21      	ldr	r3, [pc, #132]	; (8013504 <tcp_input+0x7fc>)
 801347e:	2200      	movs	r2, #0
 8013480:	605a      	str	r2, [r3, #4]
    pbuf_free(p);
  }

  LWIP_ASSERT("tcp_input: tcp_pcbs_sane()", tcp_pcbs_sane());
  PERF_STOP("tcp_input");
  return;
 8013482:	e036      	b.n	80134f2 <tcp_input+0x7ea>
    if (!(TCPH_FLAGS(tcphdr) & TCP_RST)) {
 8013484:	4b20      	ldr	r3, [pc, #128]	; (8013508 <tcp_input+0x800>)
 8013486:	681b      	ldr	r3, [r3, #0]
 8013488:	899b      	ldrh	r3, [r3, #12]
 801348a:	b29b      	uxth	r3, r3
 801348c:	4618      	mov	r0, r3
 801348e:	f7fc fa2b 	bl	800f8e8 <lwip_htons>
 8013492:	4603      	mov	r3, r0
 8013494:	b2db      	uxtb	r3, r3
 8013496:	f003 0304 	and.w	r3, r3, #4
 801349a:	2b00      	cmp	r3, #0
 801349c:	d118      	bne.n	80134d0 <tcp_input+0x7c8>
      tcp_rst(NULL, ackno, seqno + tcplen, ip_current_dest_addr(),
 801349e:	4b1b      	ldr	r3, [pc, #108]	; (801350c <tcp_input+0x804>)
 80134a0:	6819      	ldr	r1, [r3, #0]
 80134a2:	4b1b      	ldr	r3, [pc, #108]	; (8013510 <tcp_input+0x808>)
 80134a4:	881b      	ldrh	r3, [r3, #0]
 80134a6:	461a      	mov	r2, r3
 80134a8:	4b1a      	ldr	r3, [pc, #104]	; (8013514 <tcp_input+0x80c>)
 80134aa:	681b      	ldr	r3, [r3, #0]
 80134ac:	18d0      	adds	r0, r2, r3
              ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 80134ae:	4b16      	ldr	r3, [pc, #88]	; (8013508 <tcp_input+0x800>)
 80134b0:	681b      	ldr	r3, [r3, #0]
      tcp_rst(NULL, ackno, seqno + tcplen, ip_current_dest_addr(),
 80134b2:	885b      	ldrh	r3, [r3, #2]
 80134b4:	b29b      	uxth	r3, r3
              ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 80134b6:	4a14      	ldr	r2, [pc, #80]	; (8013508 <tcp_input+0x800>)
 80134b8:	6812      	ldr	r2, [r2, #0]
      tcp_rst(NULL, ackno, seqno + tcplen, ip_current_dest_addr(),
 80134ba:	8812      	ldrh	r2, [r2, #0]
 80134bc:	b292      	uxth	r2, r2
 80134be:	9202      	str	r2, [sp, #8]
 80134c0:	9301      	str	r3, [sp, #4]
 80134c2:	4b15      	ldr	r3, [pc, #84]	; (8013518 <tcp_input+0x810>)
 80134c4:	9300      	str	r3, [sp, #0]
 80134c6:	4b15      	ldr	r3, [pc, #84]	; (801351c <tcp_input+0x814>)
 80134c8:	4602      	mov	r2, r0
 80134ca:	2000      	movs	r0, #0
 80134cc:	f003 f81c 	bl	8016508 <tcp_rst>
    pbuf_free(p);
 80134d0:	6878      	ldr	r0, [r7, #4]
 80134d2:	f7fd fded 	bl	80110b0 <pbuf_free>
  return;
 80134d6:	e00c      	b.n	80134f2 <tcp_input+0x7ea>
    goto dropped;
 80134d8:	bf00      	nop
 80134da:	e006      	b.n	80134ea <tcp_input+0x7e2>
    goto dropped;
 80134dc:	bf00      	nop
 80134de:	e004      	b.n	80134ea <tcp_input+0x7e2>
    goto dropped;
 80134e0:	bf00      	nop
 80134e2:	e002      	b.n	80134ea <tcp_input+0x7e2>
      goto dropped;
 80134e4:	bf00      	nop
 80134e6:	e000      	b.n	80134ea <tcp_input+0x7e2>
      goto dropped;
 80134e8:	bf00      	nop
dropped:
  TCP_STATS_INC(tcp.drop);
  MIB2_STATS_INC(mib2.tcpinerrs);
  pbuf_free(p);
 80134ea:	6878      	ldr	r0, [r7, #4]
 80134ec:	f7fd fde0 	bl	80110b0 <pbuf_free>
 80134f0:	e000      	b.n	80134f4 <tcp_input+0x7ec>
  return;
 80134f2:	bf00      	nop
}
 80134f4:	3724      	adds	r7, #36	; 0x24
 80134f6:	46bd      	mov	sp, r7
 80134f8:	bd90      	pop	{r4, r7, pc}
 80134fa:	bf00      	nop
 80134fc:	20007120 	.word	0x20007120
 8013500:	2000711c 	.word	0x2000711c
 8013504:	200070ec 	.word	0x200070ec
 8013508:	200070fc 	.word	0x200070fc
 801350c:	20007110 	.word	0x20007110
 8013510:	20007116 	.word	0x20007116
 8013514:	2000710c 	.word	0x2000710c
 8013518:	20000808 	.word	0x20000808
 801351c:	2000080c 	.word	0x2000080c

08013520 <tcp_input_delayed_close>:
 * any more.
 * @returns 1 if the pcb has been closed and deallocated, 0 otherwise
 */
static int
tcp_input_delayed_close(struct tcp_pcb *pcb)
{
 8013520:	b580      	push	{r7, lr}
 8013522:	b082      	sub	sp, #8
 8013524:	af00      	add	r7, sp, #0
 8013526:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_input_delayed_close: invalid pcb", pcb != NULL);
 8013528:	687b      	ldr	r3, [r7, #4]
 801352a:	2b00      	cmp	r3, #0
 801352c:	d106      	bne.n	801353c <tcp_input_delayed_close+0x1c>
 801352e:	4b17      	ldr	r3, [pc, #92]	; (801358c <tcp_input_delayed_close+0x6c>)
 8013530:	f240 225a 	movw	r2, #602	; 0x25a
 8013534:	4916      	ldr	r1, [pc, #88]	; (8013590 <tcp_input_delayed_close+0x70>)
 8013536:	4817      	ldr	r0, [pc, #92]	; (8013594 <tcp_input_delayed_close+0x74>)
 8013538:	f006 fc92 	bl	8019e60 <iprintf>

  if (recv_flags & TF_CLOSED) {
 801353c:	4b16      	ldr	r3, [pc, #88]	; (8013598 <tcp_input_delayed_close+0x78>)
 801353e:	781b      	ldrb	r3, [r3, #0]
 8013540:	f003 0310 	and.w	r3, r3, #16
 8013544:	2b00      	cmp	r3, #0
 8013546:	d01c      	beq.n	8013582 <tcp_input_delayed_close+0x62>
    /* The connection has been closed and we will deallocate the
        PCB. */
    if (!(pcb->flags & TF_RXCLOSED)) {
 8013548:	687b      	ldr	r3, [r7, #4]
 801354a:	8b5b      	ldrh	r3, [r3, #26]
 801354c:	f003 0310 	and.w	r3, r3, #16
 8013550:	2b00      	cmp	r3, #0
 8013552:	d10d      	bne.n	8013570 <tcp_input_delayed_close+0x50>
      /* Connection closed although the application has only shut down the
          tx side: call the PCB's err callback and indicate the closure to
          ensure the application doesn't continue using the PCB. */
      TCP_EVENT_ERR(pcb->state, pcb->errf, pcb->callback_arg, ERR_CLSD);
 8013554:	687b      	ldr	r3, [r7, #4]
 8013556:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 801355a:	2b00      	cmp	r3, #0
 801355c:	d008      	beq.n	8013570 <tcp_input_delayed_close+0x50>
 801355e:	687b      	ldr	r3, [r7, #4]
 8013560:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8013564:	687a      	ldr	r2, [r7, #4]
 8013566:	6912      	ldr	r2, [r2, #16]
 8013568:	f06f 010e 	mvn.w	r1, #14
 801356c:	4610      	mov	r0, r2
 801356e:	4798      	blx	r3
    }
    tcp_pcb_remove(&tcp_active_pcbs, pcb);
 8013570:	6879      	ldr	r1, [r7, #4]
 8013572:	480a      	ldr	r0, [pc, #40]	; (801359c <tcp_input_delayed_close+0x7c>)
 8013574:	f7ff fa50 	bl	8012a18 <tcp_pcb_remove>
    tcp_free(pcb);
 8013578:	6878      	ldr	r0, [r7, #4]
 801357a:	f7fe f839 	bl	80115f0 <tcp_free>
    return 1;
 801357e:	2301      	movs	r3, #1
 8013580:	e000      	b.n	8013584 <tcp_input_delayed_close+0x64>
  }
  return 0;
 8013582:	2300      	movs	r3, #0
}
 8013584:	4618      	mov	r0, r3
 8013586:	3708      	adds	r7, #8
 8013588:	46bd      	mov	sp, r7
 801358a:	bd80      	pop	{r7, pc}
 801358c:	0801dbec 	.word	0x0801dbec
 8013590:	0801ddbc 	.word	0x0801ddbc
 8013594:	0801dc38 	.word	0x0801dc38
 8013598:	20007119 	.word	0x20007119
 801359c:	200070e0 	.word	0x200070e0

080135a0 <tcp_listen_input>:
 * @note the segment which arrived is saved in global variables, therefore only the pcb
 *       involved is passed as a parameter to this function
 */
static void
tcp_listen_input(struct tcp_pcb_listen *pcb)
{
 80135a0:	b590      	push	{r4, r7, lr}
 80135a2:	b08b      	sub	sp, #44	; 0x2c
 80135a4:	af04      	add	r7, sp, #16
 80135a6:	6078      	str	r0, [r7, #4]
  struct tcp_pcb *npcb;
  u32_t iss;
  err_t rc;

  if (flags & TCP_RST) {
 80135a8:	4b6f      	ldr	r3, [pc, #444]	; (8013768 <tcp_listen_input+0x1c8>)
 80135aa:	781b      	ldrb	r3, [r3, #0]
 80135ac:	f003 0304 	and.w	r3, r3, #4
 80135b0:	2b00      	cmp	r3, #0
 80135b2:	f040 80d2 	bne.w	801375a <tcp_listen_input+0x1ba>
    /* An incoming RST should be ignored. Return. */
    return;
  }

  LWIP_ASSERT("tcp_listen_input: invalid pcb", pcb != NULL);
 80135b6:	687b      	ldr	r3, [r7, #4]
 80135b8:	2b00      	cmp	r3, #0
 80135ba:	d106      	bne.n	80135ca <tcp_listen_input+0x2a>
 80135bc:	4b6b      	ldr	r3, [pc, #428]	; (801376c <tcp_listen_input+0x1cc>)
 80135be:	f240 2281 	movw	r2, #641	; 0x281
 80135c2:	496b      	ldr	r1, [pc, #428]	; (8013770 <tcp_listen_input+0x1d0>)
 80135c4:	486b      	ldr	r0, [pc, #428]	; (8013774 <tcp_listen_input+0x1d4>)
 80135c6:	f006 fc4b 	bl	8019e60 <iprintf>

  /* In the LISTEN state, we check for incoming SYN segments,
     creates a new PCB, and responds with a SYN|ACK. */
  if (flags & TCP_ACK) {
 80135ca:	4b67      	ldr	r3, [pc, #412]	; (8013768 <tcp_listen_input+0x1c8>)
 80135cc:	781b      	ldrb	r3, [r3, #0]
 80135ce:	f003 0310 	and.w	r3, r3, #16
 80135d2:	2b00      	cmp	r3, #0
 80135d4:	d019      	beq.n	801360a <tcp_listen_input+0x6a>
    /* For incoming segments with the ACK flag set, respond with a
       RST. */
    LWIP_DEBUGF(TCP_RST_DEBUG, ("tcp_listen_input: ACK in LISTEN, sending reset\n"));
    tcp_rst((const struct tcp_pcb *)pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 80135d6:	4b68      	ldr	r3, [pc, #416]	; (8013778 <tcp_listen_input+0x1d8>)
 80135d8:	6819      	ldr	r1, [r3, #0]
 80135da:	4b68      	ldr	r3, [pc, #416]	; (801377c <tcp_listen_input+0x1dc>)
 80135dc:	881b      	ldrh	r3, [r3, #0]
 80135de:	461a      	mov	r2, r3
 80135e0:	4b67      	ldr	r3, [pc, #412]	; (8013780 <tcp_listen_input+0x1e0>)
 80135e2:	681b      	ldr	r3, [r3, #0]
 80135e4:	18d0      	adds	r0, r2, r3
            ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 80135e6:	4b67      	ldr	r3, [pc, #412]	; (8013784 <tcp_listen_input+0x1e4>)
 80135e8:	681b      	ldr	r3, [r3, #0]
    tcp_rst((const struct tcp_pcb *)pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 80135ea:	885b      	ldrh	r3, [r3, #2]
 80135ec:	b29b      	uxth	r3, r3
            ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 80135ee:	4a65      	ldr	r2, [pc, #404]	; (8013784 <tcp_listen_input+0x1e4>)
 80135f0:	6812      	ldr	r2, [r2, #0]
    tcp_rst((const struct tcp_pcb *)pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 80135f2:	8812      	ldrh	r2, [r2, #0]
 80135f4:	b292      	uxth	r2, r2
 80135f6:	9202      	str	r2, [sp, #8]
 80135f8:	9301      	str	r3, [sp, #4]
 80135fa:	4b63      	ldr	r3, [pc, #396]	; (8013788 <tcp_listen_input+0x1e8>)
 80135fc:	9300      	str	r3, [sp, #0]
 80135fe:	4b63      	ldr	r3, [pc, #396]	; (801378c <tcp_listen_input+0x1ec>)
 8013600:	4602      	mov	r2, r0
 8013602:	6878      	ldr	r0, [r7, #4]
 8013604:	f002 ff80 	bl	8016508 <tcp_rst>
      tcp_abandon(npcb, 0);
      return;
    }
    tcp_output(npcb);
  }
  return;
 8013608:	e0a9      	b.n	801375e <tcp_listen_input+0x1be>
  } else if (flags & TCP_SYN) {
 801360a:	4b57      	ldr	r3, [pc, #348]	; (8013768 <tcp_listen_input+0x1c8>)
 801360c:	781b      	ldrb	r3, [r3, #0]
 801360e:	f003 0302 	and.w	r3, r3, #2
 8013612:	2b00      	cmp	r3, #0
 8013614:	f000 80a3 	beq.w	801375e <tcp_listen_input+0x1be>
    npcb = tcp_alloc(pcb->prio);
 8013618:	687b      	ldr	r3, [r7, #4]
 801361a:	7d5b      	ldrb	r3, [r3, #21]
 801361c:	4618      	mov	r0, r3
 801361e:	f7ff f927 	bl	8012870 <tcp_alloc>
 8013622:	6178      	str	r0, [r7, #20]
    if (npcb == NULL) {
 8013624:	697b      	ldr	r3, [r7, #20]
 8013626:	2b00      	cmp	r3, #0
 8013628:	d111      	bne.n	801364e <tcp_listen_input+0xae>
      TCP_EVENT_ACCEPT(pcb, NULL, pcb->callback_arg, ERR_MEM, err);
 801362a:	687b      	ldr	r3, [r7, #4]
 801362c:	699b      	ldr	r3, [r3, #24]
 801362e:	2b00      	cmp	r3, #0
 8013630:	d00a      	beq.n	8013648 <tcp_listen_input+0xa8>
 8013632:	687b      	ldr	r3, [r7, #4]
 8013634:	699b      	ldr	r3, [r3, #24]
 8013636:	687a      	ldr	r2, [r7, #4]
 8013638:	6910      	ldr	r0, [r2, #16]
 801363a:	f04f 32ff 	mov.w	r2, #4294967295
 801363e:	2100      	movs	r1, #0
 8013640:	4798      	blx	r3
 8013642:	4603      	mov	r3, r0
 8013644:	73bb      	strb	r3, [r7, #14]
      return;
 8013646:	e08b      	b.n	8013760 <tcp_listen_input+0x1c0>
      TCP_EVENT_ACCEPT(pcb, NULL, pcb->callback_arg, ERR_MEM, err);
 8013648:	23f0      	movs	r3, #240	; 0xf0
 801364a:	73bb      	strb	r3, [r7, #14]
      return;
 801364c:	e088      	b.n	8013760 <tcp_listen_input+0x1c0>
    ip_addr_copy(npcb->local_ip, *ip_current_dest_addr());
 801364e:	4b50      	ldr	r3, [pc, #320]	; (8013790 <tcp_listen_input+0x1f0>)
 8013650:	695a      	ldr	r2, [r3, #20]
 8013652:	697b      	ldr	r3, [r7, #20]
 8013654:	601a      	str	r2, [r3, #0]
    ip_addr_copy(npcb->remote_ip, *ip_current_src_addr());
 8013656:	4b4e      	ldr	r3, [pc, #312]	; (8013790 <tcp_listen_input+0x1f0>)
 8013658:	691a      	ldr	r2, [r3, #16]
 801365a:	697b      	ldr	r3, [r7, #20]
 801365c:	605a      	str	r2, [r3, #4]
    npcb->local_port = pcb->local_port;
 801365e:	687b      	ldr	r3, [r7, #4]
 8013660:	8ada      	ldrh	r2, [r3, #22]
 8013662:	697b      	ldr	r3, [r7, #20]
 8013664:	82da      	strh	r2, [r3, #22]
    npcb->remote_port = tcphdr->src;
 8013666:	4b47      	ldr	r3, [pc, #284]	; (8013784 <tcp_listen_input+0x1e4>)
 8013668:	681b      	ldr	r3, [r3, #0]
 801366a:	881b      	ldrh	r3, [r3, #0]
 801366c:	b29a      	uxth	r2, r3
 801366e:	697b      	ldr	r3, [r7, #20]
 8013670:	831a      	strh	r2, [r3, #24]
    npcb->state = SYN_RCVD;
 8013672:	697b      	ldr	r3, [r7, #20]
 8013674:	2203      	movs	r2, #3
 8013676:	751a      	strb	r2, [r3, #20]
    npcb->rcv_nxt = seqno + 1;
 8013678:	4b41      	ldr	r3, [pc, #260]	; (8013780 <tcp_listen_input+0x1e0>)
 801367a:	681b      	ldr	r3, [r3, #0]
 801367c:	1c5a      	adds	r2, r3, #1
 801367e:	697b      	ldr	r3, [r7, #20]
 8013680:	625a      	str	r2, [r3, #36]	; 0x24
    npcb->rcv_ann_right_edge = npcb->rcv_nxt;
 8013682:	697b      	ldr	r3, [r7, #20]
 8013684:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8013686:	697b      	ldr	r3, [r7, #20]
 8013688:	62da      	str	r2, [r3, #44]	; 0x2c
    iss = tcp_next_iss(npcb);
 801368a:	6978      	ldr	r0, [r7, #20]
 801368c:	f7ff fa58 	bl	8012b40 <tcp_next_iss>
 8013690:	6138      	str	r0, [r7, #16]
    npcb->snd_wl2 = iss;
 8013692:	697b      	ldr	r3, [r7, #20]
 8013694:	693a      	ldr	r2, [r7, #16]
 8013696:	659a      	str	r2, [r3, #88]	; 0x58
    npcb->snd_nxt = iss;
 8013698:	697b      	ldr	r3, [r7, #20]
 801369a:	693a      	ldr	r2, [r7, #16]
 801369c:	651a      	str	r2, [r3, #80]	; 0x50
    npcb->lastack = iss;
 801369e:	697b      	ldr	r3, [r7, #20]
 80136a0:	693a      	ldr	r2, [r7, #16]
 80136a2:	645a      	str	r2, [r3, #68]	; 0x44
    npcb->snd_lbb = iss;
 80136a4:	697b      	ldr	r3, [r7, #20]
 80136a6:	693a      	ldr	r2, [r7, #16]
 80136a8:	65da      	str	r2, [r3, #92]	; 0x5c
    npcb->snd_wl1 = seqno - 1;/* initialise to seqno-1 to force window update */
 80136aa:	4b35      	ldr	r3, [pc, #212]	; (8013780 <tcp_listen_input+0x1e0>)
 80136ac:	681b      	ldr	r3, [r3, #0]
 80136ae:	1e5a      	subs	r2, r3, #1
 80136b0:	697b      	ldr	r3, [r7, #20]
 80136b2:	655a      	str	r2, [r3, #84]	; 0x54
    npcb->callback_arg = pcb->callback_arg;
 80136b4:	687b      	ldr	r3, [r7, #4]
 80136b6:	691a      	ldr	r2, [r3, #16]
 80136b8:	697b      	ldr	r3, [r7, #20]
 80136ba:	611a      	str	r2, [r3, #16]
    npcb->listener = pcb;
 80136bc:	697b      	ldr	r3, [r7, #20]
 80136be:	687a      	ldr	r2, [r7, #4]
 80136c0:	67da      	str	r2, [r3, #124]	; 0x7c
    npcb->so_options = pcb->so_options & SOF_INHERITED;
 80136c2:	687b      	ldr	r3, [r7, #4]
 80136c4:	7a5b      	ldrb	r3, [r3, #9]
 80136c6:	f003 030c 	and.w	r3, r3, #12
 80136ca:	b2da      	uxtb	r2, r3
 80136cc:	697b      	ldr	r3, [r7, #20]
 80136ce:	725a      	strb	r2, [r3, #9]
    npcb->netif_idx = pcb->netif_idx;
 80136d0:	687b      	ldr	r3, [r7, #4]
 80136d2:	7a1a      	ldrb	r2, [r3, #8]
 80136d4:	697b      	ldr	r3, [r7, #20]
 80136d6:	721a      	strb	r2, [r3, #8]
    TCP_REG_ACTIVE(npcb);
 80136d8:	4b2e      	ldr	r3, [pc, #184]	; (8013794 <tcp_listen_input+0x1f4>)
 80136da:	681a      	ldr	r2, [r3, #0]
 80136dc:	697b      	ldr	r3, [r7, #20]
 80136de:	60da      	str	r2, [r3, #12]
 80136e0:	4a2c      	ldr	r2, [pc, #176]	; (8013794 <tcp_listen_input+0x1f4>)
 80136e2:	697b      	ldr	r3, [r7, #20]
 80136e4:	6013      	str	r3, [r2, #0]
 80136e6:	f003 f8d1 	bl	801688c <tcp_timer_needed>
 80136ea:	4b2b      	ldr	r3, [pc, #172]	; (8013798 <tcp_listen_input+0x1f8>)
 80136ec:	2201      	movs	r2, #1
 80136ee:	701a      	strb	r2, [r3, #0]
    tcp_parseopt(npcb);
 80136f0:	6978      	ldr	r0, [r7, #20]
 80136f2:	f001 fd8f 	bl	8015214 <tcp_parseopt>
    npcb->snd_wnd = tcphdr->wnd;
 80136f6:	4b23      	ldr	r3, [pc, #140]	; (8013784 <tcp_listen_input+0x1e4>)
 80136f8:	681b      	ldr	r3, [r3, #0]
 80136fa:	89db      	ldrh	r3, [r3, #14]
 80136fc:	b29a      	uxth	r2, r3
 80136fe:	697b      	ldr	r3, [r7, #20]
 8013700:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
    npcb->snd_wnd_max = npcb->snd_wnd;
 8013704:	697b      	ldr	r3, [r7, #20]
 8013706:	f8b3 2060 	ldrh.w	r2, [r3, #96]	; 0x60
 801370a:	697b      	ldr	r3, [r7, #20]
 801370c:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
    npcb->mss = tcp_eff_send_mss(npcb->mss, &npcb->local_ip, &npcb->remote_ip);
 8013710:	697b      	ldr	r3, [r7, #20]
 8013712:	8e5c      	ldrh	r4, [r3, #50]	; 0x32
 8013714:	697b      	ldr	r3, [r7, #20]
 8013716:	3304      	adds	r3, #4
 8013718:	4618      	mov	r0, r3
 801371a:	f004 fc79 	bl	8018010 <ip4_route>
 801371e:	4601      	mov	r1, r0
 8013720:	697b      	ldr	r3, [r7, #20]
 8013722:	3304      	adds	r3, #4
 8013724:	461a      	mov	r2, r3
 8013726:	4620      	mov	r0, r4
 8013728:	f7ff fa30 	bl	8012b8c <tcp_eff_send_mss_netif>
 801372c:	4603      	mov	r3, r0
 801372e:	461a      	mov	r2, r3
 8013730:	697b      	ldr	r3, [r7, #20]
 8013732:	865a      	strh	r2, [r3, #50]	; 0x32
    rc = tcp_enqueue_flags(npcb, TCP_SYN | TCP_ACK);
 8013734:	2112      	movs	r1, #18
 8013736:	6978      	ldr	r0, [r7, #20]
 8013738:	f002 f844 	bl	80157c4 <tcp_enqueue_flags>
 801373c:	4603      	mov	r3, r0
 801373e:	73fb      	strb	r3, [r7, #15]
    if (rc != ERR_OK) {
 8013740:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8013744:	2b00      	cmp	r3, #0
 8013746:	d004      	beq.n	8013752 <tcp_listen_input+0x1b2>
      tcp_abandon(npcb, 0);
 8013748:	2100      	movs	r1, #0
 801374a:	6978      	ldr	r0, [r7, #20]
 801374c:	f7fe f97a 	bl	8011a44 <tcp_abandon>
      return;
 8013750:	e006      	b.n	8013760 <tcp_listen_input+0x1c0>
    tcp_output(npcb);
 8013752:	6978      	ldr	r0, [r7, #20]
 8013754:	f002 f924 	bl	80159a0 <tcp_output>
  return;
 8013758:	e001      	b.n	801375e <tcp_listen_input+0x1be>
    return;
 801375a:	bf00      	nop
 801375c:	e000      	b.n	8013760 <tcp_listen_input+0x1c0>
  return;
 801375e:	bf00      	nop
}
 8013760:	371c      	adds	r7, #28
 8013762:	46bd      	mov	sp, r7
 8013764:	bd90      	pop	{r4, r7, pc}
 8013766:	bf00      	nop
 8013768:	20007118 	.word	0x20007118
 801376c:	0801dbec 	.word	0x0801dbec
 8013770:	0801dde4 	.word	0x0801dde4
 8013774:	0801dc38 	.word	0x0801dc38
 8013778:	20007110 	.word	0x20007110
 801377c:	20007116 	.word	0x20007116
 8013780:	2000710c 	.word	0x2000710c
 8013784:	200070fc 	.word	0x200070fc
 8013788:	20000808 	.word	0x20000808
 801378c:	2000080c 	.word	0x2000080c
 8013790:	200007f8 	.word	0x200007f8
 8013794:	200070e0 	.word	0x200070e0
 8013798:	200070e8 	.word	0x200070e8

0801379c <tcp_timewait_input>:
 * @note the segment which arrived is saved in global variables, therefore only the pcb
 *       involved is passed as a parameter to this function
 */
static void
tcp_timewait_input(struct tcp_pcb *pcb)
{
 801379c:	b580      	push	{r7, lr}
 801379e:	b086      	sub	sp, #24
 80137a0:	af04      	add	r7, sp, #16
 80137a2:	6078      	str	r0, [r7, #4]
  /* RFC 1337: in TIME_WAIT, ignore RST and ACK FINs + any 'acceptable' segments */
  /* RFC 793 3.9 Event Processing - Segment Arrives:
   * - first check sequence number - we skip that one in TIME_WAIT (always
   *   acceptable since we only send ACKs)
   * - second check the RST bit (... return) */
  if (flags & TCP_RST) {
 80137a4:	4b2f      	ldr	r3, [pc, #188]	; (8013864 <tcp_timewait_input+0xc8>)
 80137a6:	781b      	ldrb	r3, [r3, #0]
 80137a8:	f003 0304 	and.w	r3, r3, #4
 80137ac:	2b00      	cmp	r3, #0
 80137ae:	d153      	bne.n	8013858 <tcp_timewait_input+0xbc>
    return;
  }

  LWIP_ASSERT("tcp_timewait_input: invalid pcb", pcb != NULL);
 80137b0:	687b      	ldr	r3, [r7, #4]
 80137b2:	2b00      	cmp	r3, #0
 80137b4:	d106      	bne.n	80137c4 <tcp_timewait_input+0x28>
 80137b6:	4b2c      	ldr	r3, [pc, #176]	; (8013868 <tcp_timewait_input+0xcc>)
 80137b8:	f240 22ee 	movw	r2, #750	; 0x2ee
 80137bc:	492b      	ldr	r1, [pc, #172]	; (801386c <tcp_timewait_input+0xd0>)
 80137be:	482c      	ldr	r0, [pc, #176]	; (8013870 <tcp_timewait_input+0xd4>)
 80137c0:	f006 fb4e 	bl	8019e60 <iprintf>

  /* - fourth, check the SYN bit, */
  if (flags & TCP_SYN) {
 80137c4:	4b27      	ldr	r3, [pc, #156]	; (8013864 <tcp_timewait_input+0xc8>)
 80137c6:	781b      	ldrb	r3, [r3, #0]
 80137c8:	f003 0302 	and.w	r3, r3, #2
 80137cc:	2b00      	cmp	r3, #0
 80137ce:	d02a      	beq.n	8013826 <tcp_timewait_input+0x8a>
    /* If an incoming segment is not acceptable, an acknowledgment
       should be sent in reply */
    if (TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt, pcb->rcv_nxt + pcb->rcv_wnd)) {
 80137d0:	4b28      	ldr	r3, [pc, #160]	; (8013874 <tcp_timewait_input+0xd8>)
 80137d2:	681a      	ldr	r2, [r3, #0]
 80137d4:	687b      	ldr	r3, [r7, #4]
 80137d6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80137d8:	1ad3      	subs	r3, r2, r3
 80137da:	2b00      	cmp	r3, #0
 80137dc:	db2d      	blt.n	801383a <tcp_timewait_input+0x9e>
 80137de:	4b25      	ldr	r3, [pc, #148]	; (8013874 <tcp_timewait_input+0xd8>)
 80137e0:	681a      	ldr	r2, [r3, #0]
 80137e2:	687b      	ldr	r3, [r7, #4]
 80137e4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80137e6:	6879      	ldr	r1, [r7, #4]
 80137e8:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 80137ea:	440b      	add	r3, r1
 80137ec:	1ad3      	subs	r3, r2, r3
 80137ee:	2b00      	cmp	r3, #0
 80137f0:	dc23      	bgt.n	801383a <tcp_timewait_input+0x9e>
      /* If the SYN is in the window it is an error, send a reset */
      tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 80137f2:	4b21      	ldr	r3, [pc, #132]	; (8013878 <tcp_timewait_input+0xdc>)
 80137f4:	6819      	ldr	r1, [r3, #0]
 80137f6:	4b21      	ldr	r3, [pc, #132]	; (801387c <tcp_timewait_input+0xe0>)
 80137f8:	881b      	ldrh	r3, [r3, #0]
 80137fa:	461a      	mov	r2, r3
 80137fc:	4b1d      	ldr	r3, [pc, #116]	; (8013874 <tcp_timewait_input+0xd8>)
 80137fe:	681b      	ldr	r3, [r3, #0]
 8013800:	18d0      	adds	r0, r2, r3
              ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 8013802:	4b1f      	ldr	r3, [pc, #124]	; (8013880 <tcp_timewait_input+0xe4>)
 8013804:	681b      	ldr	r3, [r3, #0]
      tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 8013806:	885b      	ldrh	r3, [r3, #2]
 8013808:	b29b      	uxth	r3, r3
              ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 801380a:	4a1d      	ldr	r2, [pc, #116]	; (8013880 <tcp_timewait_input+0xe4>)
 801380c:	6812      	ldr	r2, [r2, #0]
      tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 801380e:	8812      	ldrh	r2, [r2, #0]
 8013810:	b292      	uxth	r2, r2
 8013812:	9202      	str	r2, [sp, #8]
 8013814:	9301      	str	r3, [sp, #4]
 8013816:	4b1b      	ldr	r3, [pc, #108]	; (8013884 <tcp_timewait_input+0xe8>)
 8013818:	9300      	str	r3, [sp, #0]
 801381a:	4b1b      	ldr	r3, [pc, #108]	; (8013888 <tcp_timewait_input+0xec>)
 801381c:	4602      	mov	r2, r0
 801381e:	6878      	ldr	r0, [r7, #4]
 8013820:	f002 fe72 	bl	8016508 <tcp_rst>
      return;
 8013824:	e01b      	b.n	801385e <tcp_timewait_input+0xc2>
    }
  } else if (flags & TCP_FIN) {
 8013826:	4b0f      	ldr	r3, [pc, #60]	; (8013864 <tcp_timewait_input+0xc8>)
 8013828:	781b      	ldrb	r3, [r3, #0]
 801382a:	f003 0301 	and.w	r3, r3, #1
 801382e:	2b00      	cmp	r3, #0
 8013830:	d003      	beq.n	801383a <tcp_timewait_input+0x9e>
    /* - eighth, check the FIN bit: Remain in the TIME-WAIT state.
         Restart the 2 MSL time-wait timeout.*/
    pcb->tmr = tcp_ticks;
 8013832:	4b16      	ldr	r3, [pc, #88]	; (801388c <tcp_timewait_input+0xf0>)
 8013834:	681a      	ldr	r2, [r3, #0]
 8013836:	687b      	ldr	r3, [r7, #4]
 8013838:	621a      	str	r2, [r3, #32]
  }

  if ((tcplen > 0)) {
 801383a:	4b10      	ldr	r3, [pc, #64]	; (801387c <tcp_timewait_input+0xe0>)
 801383c:	881b      	ldrh	r3, [r3, #0]
 801383e:	2b00      	cmp	r3, #0
 8013840:	d00c      	beq.n	801385c <tcp_timewait_input+0xc0>
    /* Acknowledge data, FIN or out-of-window SYN */
    tcp_ack_now(pcb);
 8013842:	687b      	ldr	r3, [r7, #4]
 8013844:	8b5b      	ldrh	r3, [r3, #26]
 8013846:	f043 0302 	orr.w	r3, r3, #2
 801384a:	b29a      	uxth	r2, r3
 801384c:	687b      	ldr	r3, [r7, #4]
 801384e:	835a      	strh	r2, [r3, #26]
    tcp_output(pcb);
 8013850:	6878      	ldr	r0, [r7, #4]
 8013852:	f002 f8a5 	bl	80159a0 <tcp_output>
  }
  return;
 8013856:	e001      	b.n	801385c <tcp_timewait_input+0xc0>
    return;
 8013858:	bf00      	nop
 801385a:	e000      	b.n	801385e <tcp_timewait_input+0xc2>
  return;
 801385c:	bf00      	nop
}
 801385e:	3708      	adds	r7, #8
 8013860:	46bd      	mov	sp, r7
 8013862:	bd80      	pop	{r7, pc}
 8013864:	20007118 	.word	0x20007118
 8013868:	0801dbec 	.word	0x0801dbec
 801386c:	0801de04 	.word	0x0801de04
 8013870:	0801dc38 	.word	0x0801dc38
 8013874:	2000710c 	.word	0x2000710c
 8013878:	20007110 	.word	0x20007110
 801387c:	20007116 	.word	0x20007116
 8013880:	200070fc 	.word	0x200070fc
 8013884:	20000808 	.word	0x20000808
 8013888:	2000080c 	.word	0x2000080c
 801388c:	200070d4 	.word	0x200070d4

08013890 <tcp_process>:
 * @note the segment which arrived is saved in global variables, therefore only the pcb
 *       involved is passed as a parameter to this function
 */
static err_t
tcp_process(struct tcp_pcb *pcb)
{
 8013890:	b590      	push	{r4, r7, lr}
 8013892:	b08d      	sub	sp, #52	; 0x34
 8013894:	af04      	add	r7, sp, #16
 8013896:	6078      	str	r0, [r7, #4]
  struct tcp_seg *rseg;
  u8_t acceptable = 0;
 8013898:	2300      	movs	r3, #0
 801389a:	76fb      	strb	r3, [r7, #27]
  err_t err;

  err = ERR_OK;
 801389c:	2300      	movs	r3, #0
 801389e:	76bb      	strb	r3, [r7, #26]

  LWIP_ASSERT("tcp_process: invalid pcb", pcb != NULL);
 80138a0:	687b      	ldr	r3, [r7, #4]
 80138a2:	2b00      	cmp	r3, #0
 80138a4:	d106      	bne.n	80138b4 <tcp_process+0x24>
 80138a6:	4b9d      	ldr	r3, [pc, #628]	; (8013b1c <tcp_process+0x28c>)
 80138a8:	f44f 7247 	mov.w	r2, #796	; 0x31c
 80138ac:	499c      	ldr	r1, [pc, #624]	; (8013b20 <tcp_process+0x290>)
 80138ae:	489d      	ldr	r0, [pc, #628]	; (8013b24 <tcp_process+0x294>)
 80138b0:	f006 fad6 	bl	8019e60 <iprintf>

  /* Process incoming RST segments. */
  if (flags & TCP_RST) {
 80138b4:	4b9c      	ldr	r3, [pc, #624]	; (8013b28 <tcp_process+0x298>)
 80138b6:	781b      	ldrb	r3, [r3, #0]
 80138b8:	f003 0304 	and.w	r3, r3, #4
 80138bc:	2b00      	cmp	r3, #0
 80138be:	d04e      	beq.n	801395e <tcp_process+0xce>
    /* First, determine if the reset is acceptable. */
    if (pcb->state == SYN_SENT) {
 80138c0:	687b      	ldr	r3, [r7, #4]
 80138c2:	7d1b      	ldrb	r3, [r3, #20]
 80138c4:	2b02      	cmp	r3, #2
 80138c6:	d108      	bne.n	80138da <tcp_process+0x4a>
      /* "In the SYN-SENT state (a RST received in response to an initial SYN),
          the RST is acceptable if the ACK field acknowledges the SYN." */
      if (ackno == pcb->snd_nxt) {
 80138c8:	687b      	ldr	r3, [r7, #4]
 80138ca:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80138cc:	4b97      	ldr	r3, [pc, #604]	; (8013b2c <tcp_process+0x29c>)
 80138ce:	681b      	ldr	r3, [r3, #0]
 80138d0:	429a      	cmp	r2, r3
 80138d2:	d123      	bne.n	801391c <tcp_process+0x8c>
        acceptable = 1;
 80138d4:	2301      	movs	r3, #1
 80138d6:	76fb      	strb	r3, [r7, #27]
 80138d8:	e020      	b.n	801391c <tcp_process+0x8c>
      }
    } else {
      /* "In all states except SYN-SENT, all reset (RST) segments are validated
          by checking their SEQ-fields." */
      if (seqno == pcb->rcv_nxt) {
 80138da:	687b      	ldr	r3, [r7, #4]
 80138dc:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80138de:	4b94      	ldr	r3, [pc, #592]	; (8013b30 <tcp_process+0x2a0>)
 80138e0:	681b      	ldr	r3, [r3, #0]
 80138e2:	429a      	cmp	r2, r3
 80138e4:	d102      	bne.n	80138ec <tcp_process+0x5c>
        acceptable = 1;
 80138e6:	2301      	movs	r3, #1
 80138e8:	76fb      	strb	r3, [r7, #27]
 80138ea:	e017      	b.n	801391c <tcp_process+0x8c>
      } else  if (TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt,
 80138ec:	4b90      	ldr	r3, [pc, #576]	; (8013b30 <tcp_process+0x2a0>)
 80138ee:	681a      	ldr	r2, [r3, #0]
 80138f0:	687b      	ldr	r3, [r7, #4]
 80138f2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80138f4:	1ad3      	subs	r3, r2, r3
 80138f6:	2b00      	cmp	r3, #0
 80138f8:	db10      	blt.n	801391c <tcp_process+0x8c>
 80138fa:	4b8d      	ldr	r3, [pc, #564]	; (8013b30 <tcp_process+0x2a0>)
 80138fc:	681a      	ldr	r2, [r3, #0]
 80138fe:	687b      	ldr	r3, [r7, #4]
 8013900:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8013902:	6879      	ldr	r1, [r7, #4]
 8013904:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 8013906:	440b      	add	r3, r1
 8013908:	1ad3      	subs	r3, r2, r3
 801390a:	2b00      	cmp	r3, #0
 801390c:	dc06      	bgt.n	801391c <tcp_process+0x8c>
                                  pcb->rcv_nxt + pcb->rcv_wnd)) {
        /* If the sequence number is inside the window, we send a challenge ACK
           and wait for a re-send with matching sequence number.
           This follows RFC 5961 section 3.2 and addresses CVE-2004-0230
           (RST spoofing attack), which is present in RFC 793 RST handling. */
        tcp_ack_now(pcb);
 801390e:	687b      	ldr	r3, [r7, #4]
 8013910:	8b5b      	ldrh	r3, [r3, #26]
 8013912:	f043 0302 	orr.w	r3, r3, #2
 8013916:	b29a      	uxth	r2, r3
 8013918:	687b      	ldr	r3, [r7, #4]
 801391a:	835a      	strh	r2, [r3, #26]
      }
    }

    if (acceptable) {
 801391c:	7efb      	ldrb	r3, [r7, #27]
 801391e:	2b00      	cmp	r3, #0
 8013920:	d01b      	beq.n	801395a <tcp_process+0xca>
      LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_process: Connection RESET\n"));
      LWIP_ASSERT("tcp_input: pcb->state != CLOSED", pcb->state != CLOSED);
 8013922:	687b      	ldr	r3, [r7, #4]
 8013924:	7d1b      	ldrb	r3, [r3, #20]
 8013926:	2b00      	cmp	r3, #0
 8013928:	d106      	bne.n	8013938 <tcp_process+0xa8>
 801392a:	4b7c      	ldr	r3, [pc, #496]	; (8013b1c <tcp_process+0x28c>)
 801392c:	f44f 724e 	mov.w	r2, #824	; 0x338
 8013930:	4980      	ldr	r1, [pc, #512]	; (8013b34 <tcp_process+0x2a4>)
 8013932:	487c      	ldr	r0, [pc, #496]	; (8013b24 <tcp_process+0x294>)
 8013934:	f006 fa94 	bl	8019e60 <iprintf>
      recv_flags |= TF_RESET;
 8013938:	4b7f      	ldr	r3, [pc, #508]	; (8013b38 <tcp_process+0x2a8>)
 801393a:	781b      	ldrb	r3, [r3, #0]
 801393c:	f043 0308 	orr.w	r3, r3, #8
 8013940:	b2da      	uxtb	r2, r3
 8013942:	4b7d      	ldr	r3, [pc, #500]	; (8013b38 <tcp_process+0x2a8>)
 8013944:	701a      	strb	r2, [r3, #0]
      tcp_clear_flags(pcb, TF_ACK_DELAY);
 8013946:	687b      	ldr	r3, [r7, #4]
 8013948:	8b5b      	ldrh	r3, [r3, #26]
 801394a:	f023 0301 	bic.w	r3, r3, #1
 801394e:	b29a      	uxth	r2, r3
 8013950:	687b      	ldr	r3, [r7, #4]
 8013952:	835a      	strh	r2, [r3, #26]
      return ERR_RST;
 8013954:	f06f 030d 	mvn.w	r3, #13
 8013958:	e37a      	b.n	8014050 <tcp_process+0x7c0>
    } else {
      LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_process: unacceptable reset seqno %"U32_F" rcv_nxt %"U32_F"\n",
                                    seqno, pcb->rcv_nxt));
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_process: unacceptable reset seqno %"U32_F" rcv_nxt %"U32_F"\n",
                              seqno, pcb->rcv_nxt));
      return ERR_OK;
 801395a:	2300      	movs	r3, #0
 801395c:	e378      	b.n	8014050 <tcp_process+0x7c0>
    }
  }

  if ((flags & TCP_SYN) && (pcb->state != SYN_SENT && pcb->state != SYN_RCVD)) {
 801395e:	4b72      	ldr	r3, [pc, #456]	; (8013b28 <tcp_process+0x298>)
 8013960:	781b      	ldrb	r3, [r3, #0]
 8013962:	f003 0302 	and.w	r3, r3, #2
 8013966:	2b00      	cmp	r3, #0
 8013968:	d010      	beq.n	801398c <tcp_process+0xfc>
 801396a:	687b      	ldr	r3, [r7, #4]
 801396c:	7d1b      	ldrb	r3, [r3, #20]
 801396e:	2b02      	cmp	r3, #2
 8013970:	d00c      	beq.n	801398c <tcp_process+0xfc>
 8013972:	687b      	ldr	r3, [r7, #4]
 8013974:	7d1b      	ldrb	r3, [r3, #20]
 8013976:	2b03      	cmp	r3, #3
 8013978:	d008      	beq.n	801398c <tcp_process+0xfc>
    /* Cope with new connection attempt after remote end crashed */
    tcp_ack_now(pcb);
 801397a:	687b      	ldr	r3, [r7, #4]
 801397c:	8b5b      	ldrh	r3, [r3, #26]
 801397e:	f043 0302 	orr.w	r3, r3, #2
 8013982:	b29a      	uxth	r2, r3
 8013984:	687b      	ldr	r3, [r7, #4]
 8013986:	835a      	strh	r2, [r3, #26]
    return ERR_OK;
 8013988:	2300      	movs	r3, #0
 801398a:	e361      	b.n	8014050 <tcp_process+0x7c0>
  }

  if ((pcb->flags & TF_RXCLOSED) == 0) {
 801398c:	687b      	ldr	r3, [r7, #4]
 801398e:	8b5b      	ldrh	r3, [r3, #26]
 8013990:	f003 0310 	and.w	r3, r3, #16
 8013994:	2b00      	cmp	r3, #0
 8013996:	d103      	bne.n	80139a0 <tcp_process+0x110>
    /* Update the PCB (in)activity timer unless rx is closed (see tcp_shutdown) */
    pcb->tmr = tcp_ticks;
 8013998:	4b68      	ldr	r3, [pc, #416]	; (8013b3c <tcp_process+0x2ac>)
 801399a:	681a      	ldr	r2, [r3, #0]
 801399c:	687b      	ldr	r3, [r7, #4]
 801399e:	621a      	str	r2, [r3, #32]
  }
  pcb->keep_cnt_sent = 0;
 80139a0:	687b      	ldr	r3, [r7, #4]
 80139a2:	2200      	movs	r2, #0
 80139a4:	f883 209b 	strb.w	r2, [r3, #155]	; 0x9b
  pcb->persist_probe = 0;
 80139a8:	687b      	ldr	r3, [r7, #4]
 80139aa:	2200      	movs	r2, #0
 80139ac:	f883 209a 	strb.w	r2, [r3, #154]	; 0x9a

  tcp_parseopt(pcb);
 80139b0:	6878      	ldr	r0, [r7, #4]
 80139b2:	f001 fc2f 	bl	8015214 <tcp_parseopt>

  /* Do different things depending on the TCP state. */
  switch (pcb->state) {
 80139b6:	687b      	ldr	r3, [r7, #4]
 80139b8:	7d1b      	ldrb	r3, [r3, #20]
 80139ba:	3b02      	subs	r3, #2
 80139bc:	2b07      	cmp	r3, #7
 80139be:	f200 8337 	bhi.w	8014030 <tcp_process+0x7a0>
 80139c2:	a201      	add	r2, pc, #4	; (adr r2, 80139c8 <tcp_process+0x138>)
 80139c4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80139c8:	080139e9 	.word	0x080139e9
 80139cc:	08013c19 	.word	0x08013c19
 80139d0:	08013d91 	.word	0x08013d91
 80139d4:	08013dbb 	.word	0x08013dbb
 80139d8:	08013edf 	.word	0x08013edf
 80139dc:	08013d91 	.word	0x08013d91
 80139e0:	08013f6b 	.word	0x08013f6b
 80139e4:	08013ffb 	.word	0x08013ffb
    case SYN_SENT:
      LWIP_DEBUGF(TCP_INPUT_DEBUG, ("SYN-SENT: ackno %"U32_F" pcb->snd_nxt %"U32_F" unacked %"U32_F"\n", ackno,
                                    pcb->snd_nxt, lwip_ntohl(pcb->unacked->tcphdr->seqno)));
      /* received SYN ACK with expected sequence number? */
      if ((flags & TCP_ACK) && (flags & TCP_SYN)
 80139e8:	4b4f      	ldr	r3, [pc, #316]	; (8013b28 <tcp_process+0x298>)
 80139ea:	781b      	ldrb	r3, [r3, #0]
 80139ec:	f003 0310 	and.w	r3, r3, #16
 80139f0:	2b00      	cmp	r3, #0
 80139f2:	f000 80e4 	beq.w	8013bbe <tcp_process+0x32e>
 80139f6:	4b4c      	ldr	r3, [pc, #304]	; (8013b28 <tcp_process+0x298>)
 80139f8:	781b      	ldrb	r3, [r3, #0]
 80139fa:	f003 0302 	and.w	r3, r3, #2
 80139fe:	2b00      	cmp	r3, #0
 8013a00:	f000 80dd 	beq.w	8013bbe <tcp_process+0x32e>
          && (ackno == pcb->lastack + 1)) {
 8013a04:	687b      	ldr	r3, [r7, #4]
 8013a06:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8013a08:	1c5a      	adds	r2, r3, #1
 8013a0a:	4b48      	ldr	r3, [pc, #288]	; (8013b2c <tcp_process+0x29c>)
 8013a0c:	681b      	ldr	r3, [r3, #0]
 8013a0e:	429a      	cmp	r2, r3
 8013a10:	f040 80d5 	bne.w	8013bbe <tcp_process+0x32e>
        pcb->rcv_nxt = seqno + 1;
 8013a14:	4b46      	ldr	r3, [pc, #280]	; (8013b30 <tcp_process+0x2a0>)
 8013a16:	681b      	ldr	r3, [r3, #0]
 8013a18:	1c5a      	adds	r2, r3, #1
 8013a1a:	687b      	ldr	r3, [r7, #4]
 8013a1c:	625a      	str	r2, [r3, #36]	; 0x24
        pcb->rcv_ann_right_edge = pcb->rcv_nxt;
 8013a1e:	687b      	ldr	r3, [r7, #4]
 8013a20:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8013a22:	687b      	ldr	r3, [r7, #4]
 8013a24:	62da      	str	r2, [r3, #44]	; 0x2c
        pcb->lastack = ackno;
 8013a26:	4b41      	ldr	r3, [pc, #260]	; (8013b2c <tcp_process+0x29c>)
 8013a28:	681a      	ldr	r2, [r3, #0]
 8013a2a:	687b      	ldr	r3, [r7, #4]
 8013a2c:	645a      	str	r2, [r3, #68]	; 0x44
        pcb->snd_wnd = tcphdr->wnd;
 8013a2e:	4b44      	ldr	r3, [pc, #272]	; (8013b40 <tcp_process+0x2b0>)
 8013a30:	681b      	ldr	r3, [r3, #0]
 8013a32:	89db      	ldrh	r3, [r3, #14]
 8013a34:	b29a      	uxth	r2, r3
 8013a36:	687b      	ldr	r3, [r7, #4]
 8013a38:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
        pcb->snd_wnd_max = pcb->snd_wnd;
 8013a3c:	687b      	ldr	r3, [r7, #4]
 8013a3e:	f8b3 2060 	ldrh.w	r2, [r3, #96]	; 0x60
 8013a42:	687b      	ldr	r3, [r7, #4]
 8013a44:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
        pcb->snd_wl1 = seqno - 1; /* initialise to seqno - 1 to force window update */
 8013a48:	4b39      	ldr	r3, [pc, #228]	; (8013b30 <tcp_process+0x2a0>)
 8013a4a:	681b      	ldr	r3, [r3, #0]
 8013a4c:	1e5a      	subs	r2, r3, #1
 8013a4e:	687b      	ldr	r3, [r7, #4]
 8013a50:	655a      	str	r2, [r3, #84]	; 0x54
        pcb->state = ESTABLISHED;
 8013a52:	687b      	ldr	r3, [r7, #4]
 8013a54:	2204      	movs	r2, #4
 8013a56:	751a      	strb	r2, [r3, #20]

#if TCP_CALCULATE_EFF_SEND_MSS
        pcb->mss = tcp_eff_send_mss(pcb->mss, &pcb->local_ip, &pcb->remote_ip);
 8013a58:	687b      	ldr	r3, [r7, #4]
 8013a5a:	8e5c      	ldrh	r4, [r3, #50]	; 0x32
 8013a5c:	687b      	ldr	r3, [r7, #4]
 8013a5e:	3304      	adds	r3, #4
 8013a60:	4618      	mov	r0, r3
 8013a62:	f004 fad5 	bl	8018010 <ip4_route>
 8013a66:	4601      	mov	r1, r0
 8013a68:	687b      	ldr	r3, [r7, #4]
 8013a6a:	3304      	adds	r3, #4
 8013a6c:	461a      	mov	r2, r3
 8013a6e:	4620      	mov	r0, r4
 8013a70:	f7ff f88c 	bl	8012b8c <tcp_eff_send_mss_netif>
 8013a74:	4603      	mov	r3, r0
 8013a76:	461a      	mov	r2, r3
 8013a78:	687b      	ldr	r3, [r7, #4]
 8013a7a:	865a      	strh	r2, [r3, #50]	; 0x32
#endif /* TCP_CALCULATE_EFF_SEND_MSS */

        pcb->cwnd = LWIP_TCP_CALC_INITIAL_CWND(pcb->mss);
 8013a7c:	687b      	ldr	r3, [r7, #4]
 8013a7e:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8013a80:	009a      	lsls	r2, r3, #2
 8013a82:	687b      	ldr	r3, [r7, #4]
 8013a84:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8013a86:	005b      	lsls	r3, r3, #1
 8013a88:	f241 111c 	movw	r1, #4380	; 0x111c
 8013a8c:	428b      	cmp	r3, r1
 8013a8e:	bf38      	it	cc
 8013a90:	460b      	movcc	r3, r1
 8013a92:	429a      	cmp	r2, r3
 8013a94:	d204      	bcs.n	8013aa0 <tcp_process+0x210>
 8013a96:	687b      	ldr	r3, [r7, #4]
 8013a98:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8013a9a:	009b      	lsls	r3, r3, #2
 8013a9c:	b29b      	uxth	r3, r3
 8013a9e:	e00d      	b.n	8013abc <tcp_process+0x22c>
 8013aa0:	687b      	ldr	r3, [r7, #4]
 8013aa2:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8013aa4:	005b      	lsls	r3, r3, #1
 8013aa6:	f241 121c 	movw	r2, #4380	; 0x111c
 8013aaa:	4293      	cmp	r3, r2
 8013aac:	d904      	bls.n	8013ab8 <tcp_process+0x228>
 8013aae:	687b      	ldr	r3, [r7, #4]
 8013ab0:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8013ab2:	005b      	lsls	r3, r3, #1
 8013ab4:	b29b      	uxth	r3, r3
 8013ab6:	e001      	b.n	8013abc <tcp_process+0x22c>
 8013ab8:	f241 131c 	movw	r3, #4380	; 0x111c
 8013abc:	687a      	ldr	r2, [r7, #4]
 8013abe:	f8a2 3048 	strh.w	r3, [r2, #72]	; 0x48
        LWIP_DEBUGF(TCP_CWND_DEBUG, ("tcp_process (SENT): cwnd %"TCPWNDSIZE_F
                                     " ssthresh %"TCPWNDSIZE_F"\n",
                                     pcb->cwnd, pcb->ssthresh));
        LWIP_ASSERT("pcb->snd_queuelen > 0", (pcb->snd_queuelen > 0));
 8013ac2:	687b      	ldr	r3, [r7, #4]
 8013ac4:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 8013ac8:	2b00      	cmp	r3, #0
 8013aca:	d106      	bne.n	8013ada <tcp_process+0x24a>
 8013acc:	4b13      	ldr	r3, [pc, #76]	; (8013b1c <tcp_process+0x28c>)
 8013ace:	f44f 725b 	mov.w	r2, #876	; 0x36c
 8013ad2:	491c      	ldr	r1, [pc, #112]	; (8013b44 <tcp_process+0x2b4>)
 8013ad4:	4813      	ldr	r0, [pc, #76]	; (8013b24 <tcp_process+0x294>)
 8013ad6:	f006 f9c3 	bl	8019e60 <iprintf>
        --pcb->snd_queuelen;
 8013ada:	687b      	ldr	r3, [r7, #4]
 8013adc:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 8013ae0:	3b01      	subs	r3, #1
 8013ae2:	b29a      	uxth	r2, r3
 8013ae4:	687b      	ldr	r3, [r7, #4]
 8013ae6:	f8a3 2066 	strh.w	r2, [r3, #102]	; 0x66
        LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_process: SYN-SENT --queuelen %"TCPWNDSIZE_F"\n", (tcpwnd_size_t)pcb->snd_queuelen));
        rseg = pcb->unacked;
 8013aea:	687b      	ldr	r3, [r7, #4]
 8013aec:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8013aee:	61fb      	str	r3, [r7, #28]
        if (rseg == NULL) {
 8013af0:	69fb      	ldr	r3, [r7, #28]
 8013af2:	2b00      	cmp	r3, #0
 8013af4:	d12a      	bne.n	8013b4c <tcp_process+0x2bc>
          /* might happen if tcp_output fails in tcp_rexmit_rto()
             in which case the segment is on the unsent list */
          rseg = pcb->unsent;
 8013af6:	687b      	ldr	r3, [r7, #4]
 8013af8:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8013afa:	61fb      	str	r3, [r7, #28]
          LWIP_ASSERT("no segment to free", rseg != NULL);
 8013afc:	69fb      	ldr	r3, [r7, #28]
 8013afe:	2b00      	cmp	r3, #0
 8013b00:	d106      	bne.n	8013b10 <tcp_process+0x280>
 8013b02:	4b06      	ldr	r3, [pc, #24]	; (8013b1c <tcp_process+0x28c>)
 8013b04:	f44f 725d 	mov.w	r2, #884	; 0x374
 8013b08:	490f      	ldr	r1, [pc, #60]	; (8013b48 <tcp_process+0x2b8>)
 8013b0a:	4806      	ldr	r0, [pc, #24]	; (8013b24 <tcp_process+0x294>)
 8013b0c:	f006 f9a8 	bl	8019e60 <iprintf>
          pcb->unsent = rseg->next;
 8013b10:	69fb      	ldr	r3, [r7, #28]
 8013b12:	681a      	ldr	r2, [r3, #0]
 8013b14:	687b      	ldr	r3, [r7, #4]
 8013b16:	66da      	str	r2, [r3, #108]	; 0x6c
 8013b18:	e01c      	b.n	8013b54 <tcp_process+0x2c4>
 8013b1a:	bf00      	nop
 8013b1c:	0801dbec 	.word	0x0801dbec
 8013b20:	0801de24 	.word	0x0801de24
 8013b24:	0801dc38 	.word	0x0801dc38
 8013b28:	20007118 	.word	0x20007118
 8013b2c:	20007110 	.word	0x20007110
 8013b30:	2000710c 	.word	0x2000710c
 8013b34:	0801de40 	.word	0x0801de40
 8013b38:	20007119 	.word	0x20007119
 8013b3c:	200070d4 	.word	0x200070d4
 8013b40:	200070fc 	.word	0x200070fc
 8013b44:	0801de60 	.word	0x0801de60
 8013b48:	0801de78 	.word	0x0801de78
        } else {
          pcb->unacked = rseg->next;
 8013b4c:	69fb      	ldr	r3, [r7, #28]
 8013b4e:	681a      	ldr	r2, [r3, #0]
 8013b50:	687b      	ldr	r3, [r7, #4]
 8013b52:	671a      	str	r2, [r3, #112]	; 0x70
        }
        tcp_seg_free(rseg);
 8013b54:	69f8      	ldr	r0, [r7, #28]
 8013b56:	f7fe fd22 	bl	801259e <tcp_seg_free>

        /* If there's nothing left to acknowledge, stop the retransmit
           timer, otherwise reset it to start again */
        if (pcb->unacked == NULL) {
 8013b5a:	687b      	ldr	r3, [r7, #4]
 8013b5c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8013b5e:	2b00      	cmp	r3, #0
 8013b60:	d104      	bne.n	8013b6c <tcp_process+0x2dc>
          pcb->rtime = -1;
 8013b62:	687b      	ldr	r3, [r7, #4]
 8013b64:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8013b68:	861a      	strh	r2, [r3, #48]	; 0x30
 8013b6a:	e006      	b.n	8013b7a <tcp_process+0x2ea>
        } else {
          pcb->rtime = 0;
 8013b6c:	687b      	ldr	r3, [r7, #4]
 8013b6e:	2200      	movs	r2, #0
 8013b70:	861a      	strh	r2, [r3, #48]	; 0x30
          pcb->nrtx = 0;
 8013b72:	687b      	ldr	r3, [r7, #4]
 8013b74:	2200      	movs	r2, #0
 8013b76:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
        }

        /* Call the user specified function to call when successfully
         * connected. */
        TCP_EVENT_CONNECTED(pcb, ERR_OK, err);
 8013b7a:	687b      	ldr	r3, [r7, #4]
 8013b7c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8013b80:	2b00      	cmp	r3, #0
 8013b82:	d00a      	beq.n	8013b9a <tcp_process+0x30a>
 8013b84:	687b      	ldr	r3, [r7, #4]
 8013b86:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8013b8a:	687a      	ldr	r2, [r7, #4]
 8013b8c:	6910      	ldr	r0, [r2, #16]
 8013b8e:	2200      	movs	r2, #0
 8013b90:	6879      	ldr	r1, [r7, #4]
 8013b92:	4798      	blx	r3
 8013b94:	4603      	mov	r3, r0
 8013b96:	76bb      	strb	r3, [r7, #26]
 8013b98:	e001      	b.n	8013b9e <tcp_process+0x30e>
 8013b9a:	2300      	movs	r3, #0
 8013b9c:	76bb      	strb	r3, [r7, #26]
        if (err == ERR_ABRT) {
 8013b9e:	f997 301a 	ldrsb.w	r3, [r7, #26]
 8013ba2:	f113 0f0d 	cmn.w	r3, #13
 8013ba6:	d102      	bne.n	8013bae <tcp_process+0x31e>
          return ERR_ABRT;
 8013ba8:	f06f 030c 	mvn.w	r3, #12
 8013bac:	e250      	b.n	8014050 <tcp_process+0x7c0>
        }
        tcp_ack_now(pcb);
 8013bae:	687b      	ldr	r3, [r7, #4]
 8013bb0:	8b5b      	ldrh	r3, [r3, #26]
 8013bb2:	f043 0302 	orr.w	r3, r3, #2
 8013bb6:	b29a      	uxth	r2, r3
 8013bb8:	687b      	ldr	r3, [r7, #4]
 8013bba:	835a      	strh	r2, [r3, #26]
        if (pcb->nrtx < TCP_SYNMAXRTX) {
          pcb->rtime = 0;
          tcp_rexmit_rto(pcb);
        }
      }
      break;
 8013bbc:	e23a      	b.n	8014034 <tcp_process+0x7a4>
      else if (flags & TCP_ACK) {
 8013bbe:	4b98      	ldr	r3, [pc, #608]	; (8013e20 <tcp_process+0x590>)
 8013bc0:	781b      	ldrb	r3, [r3, #0]
 8013bc2:	f003 0310 	and.w	r3, r3, #16
 8013bc6:	2b00      	cmp	r3, #0
 8013bc8:	f000 8234 	beq.w	8014034 <tcp_process+0x7a4>
        tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 8013bcc:	4b95      	ldr	r3, [pc, #596]	; (8013e24 <tcp_process+0x594>)
 8013bce:	6819      	ldr	r1, [r3, #0]
 8013bd0:	4b95      	ldr	r3, [pc, #596]	; (8013e28 <tcp_process+0x598>)
 8013bd2:	881b      	ldrh	r3, [r3, #0]
 8013bd4:	461a      	mov	r2, r3
 8013bd6:	4b95      	ldr	r3, [pc, #596]	; (8013e2c <tcp_process+0x59c>)
 8013bd8:	681b      	ldr	r3, [r3, #0]
 8013bda:	18d0      	adds	r0, r2, r3
                ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 8013bdc:	4b94      	ldr	r3, [pc, #592]	; (8013e30 <tcp_process+0x5a0>)
 8013bde:	681b      	ldr	r3, [r3, #0]
        tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 8013be0:	885b      	ldrh	r3, [r3, #2]
 8013be2:	b29b      	uxth	r3, r3
                ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 8013be4:	4a92      	ldr	r2, [pc, #584]	; (8013e30 <tcp_process+0x5a0>)
 8013be6:	6812      	ldr	r2, [r2, #0]
        tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 8013be8:	8812      	ldrh	r2, [r2, #0]
 8013bea:	b292      	uxth	r2, r2
 8013bec:	9202      	str	r2, [sp, #8]
 8013bee:	9301      	str	r3, [sp, #4]
 8013bf0:	4b90      	ldr	r3, [pc, #576]	; (8013e34 <tcp_process+0x5a4>)
 8013bf2:	9300      	str	r3, [sp, #0]
 8013bf4:	4b90      	ldr	r3, [pc, #576]	; (8013e38 <tcp_process+0x5a8>)
 8013bf6:	4602      	mov	r2, r0
 8013bf8:	6878      	ldr	r0, [r7, #4]
 8013bfa:	f002 fc85 	bl	8016508 <tcp_rst>
        if (pcb->nrtx < TCP_SYNMAXRTX) {
 8013bfe:	687b      	ldr	r3, [r7, #4]
 8013c00:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8013c04:	2b05      	cmp	r3, #5
 8013c06:	f200 8215 	bhi.w	8014034 <tcp_process+0x7a4>
          pcb->rtime = 0;
 8013c0a:	687b      	ldr	r3, [r7, #4]
 8013c0c:	2200      	movs	r2, #0
 8013c0e:	861a      	strh	r2, [r3, #48]	; 0x30
          tcp_rexmit_rto(pcb);
 8013c10:	6878      	ldr	r0, [r7, #4]
 8013c12:	f002 fa51 	bl	80160b8 <tcp_rexmit_rto>
      break;
 8013c16:	e20d      	b.n	8014034 <tcp_process+0x7a4>
    case SYN_RCVD:
      if (flags & TCP_ACK) {
 8013c18:	4b81      	ldr	r3, [pc, #516]	; (8013e20 <tcp_process+0x590>)
 8013c1a:	781b      	ldrb	r3, [r3, #0]
 8013c1c:	f003 0310 	and.w	r3, r3, #16
 8013c20:	2b00      	cmp	r3, #0
 8013c22:	f000 80a1 	beq.w	8013d68 <tcp_process+0x4d8>
        /* expected ACK number? */
        if (TCP_SEQ_BETWEEN(ackno, pcb->lastack + 1, pcb->snd_nxt)) {
 8013c26:	4b7f      	ldr	r3, [pc, #508]	; (8013e24 <tcp_process+0x594>)
 8013c28:	681a      	ldr	r2, [r3, #0]
 8013c2a:	687b      	ldr	r3, [r7, #4]
 8013c2c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8013c2e:	1ad3      	subs	r3, r2, r3
 8013c30:	3b01      	subs	r3, #1
 8013c32:	2b00      	cmp	r3, #0
 8013c34:	db7e      	blt.n	8013d34 <tcp_process+0x4a4>
 8013c36:	4b7b      	ldr	r3, [pc, #492]	; (8013e24 <tcp_process+0x594>)
 8013c38:	681a      	ldr	r2, [r3, #0]
 8013c3a:	687b      	ldr	r3, [r7, #4]
 8013c3c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8013c3e:	1ad3      	subs	r3, r2, r3
 8013c40:	2b00      	cmp	r3, #0
 8013c42:	dc77      	bgt.n	8013d34 <tcp_process+0x4a4>
          pcb->state = ESTABLISHED;
 8013c44:	687b      	ldr	r3, [r7, #4]
 8013c46:	2204      	movs	r2, #4
 8013c48:	751a      	strb	r2, [r3, #20]
          LWIP_DEBUGF(TCP_DEBUG, ("TCP connection established %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
#if LWIP_CALLBACK_API || TCP_LISTEN_BACKLOG
          if (pcb->listener == NULL) {
 8013c4a:	687b      	ldr	r3, [r7, #4]
 8013c4c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8013c4e:	2b00      	cmp	r3, #0
 8013c50:	d102      	bne.n	8013c58 <tcp_process+0x3c8>
            /* listen pcb might be closed by now */
            err = ERR_VAL;
 8013c52:	23fa      	movs	r3, #250	; 0xfa
 8013c54:	76bb      	strb	r3, [r7, #26]
 8013c56:	e01d      	b.n	8013c94 <tcp_process+0x404>
          } else
#endif /* LWIP_CALLBACK_API || TCP_LISTEN_BACKLOG */
          {
#if LWIP_CALLBACK_API
            LWIP_ASSERT("pcb->listener->accept != NULL", pcb->listener->accept != NULL);
 8013c58:	687b      	ldr	r3, [r7, #4]
 8013c5a:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8013c5c:	699b      	ldr	r3, [r3, #24]
 8013c5e:	2b00      	cmp	r3, #0
 8013c60:	d106      	bne.n	8013c70 <tcp_process+0x3e0>
 8013c62:	4b76      	ldr	r3, [pc, #472]	; (8013e3c <tcp_process+0x5ac>)
 8013c64:	f44f 726a 	mov.w	r2, #936	; 0x3a8
 8013c68:	4975      	ldr	r1, [pc, #468]	; (8013e40 <tcp_process+0x5b0>)
 8013c6a:	4876      	ldr	r0, [pc, #472]	; (8013e44 <tcp_process+0x5b4>)
 8013c6c:	f006 f8f8 	bl	8019e60 <iprintf>
#endif
            tcp_backlog_accepted(pcb);
            /* Call the accept function. */
            TCP_EVENT_ACCEPT(pcb->listener, pcb, pcb->callback_arg, ERR_OK, err);
 8013c70:	687b      	ldr	r3, [r7, #4]
 8013c72:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8013c74:	699b      	ldr	r3, [r3, #24]
 8013c76:	2b00      	cmp	r3, #0
 8013c78:	d00a      	beq.n	8013c90 <tcp_process+0x400>
 8013c7a:	687b      	ldr	r3, [r7, #4]
 8013c7c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8013c7e:	699b      	ldr	r3, [r3, #24]
 8013c80:	687a      	ldr	r2, [r7, #4]
 8013c82:	6910      	ldr	r0, [r2, #16]
 8013c84:	2200      	movs	r2, #0
 8013c86:	6879      	ldr	r1, [r7, #4]
 8013c88:	4798      	blx	r3
 8013c8a:	4603      	mov	r3, r0
 8013c8c:	76bb      	strb	r3, [r7, #26]
 8013c8e:	e001      	b.n	8013c94 <tcp_process+0x404>
 8013c90:	23f0      	movs	r3, #240	; 0xf0
 8013c92:	76bb      	strb	r3, [r7, #26]
          }
          if (err != ERR_OK) {
 8013c94:	f997 301a 	ldrsb.w	r3, [r7, #26]
 8013c98:	2b00      	cmp	r3, #0
 8013c9a:	d00a      	beq.n	8013cb2 <tcp_process+0x422>
            /* If the accept function returns with an error, we abort
             * the connection. */
            /* Already aborted? */
            if (err != ERR_ABRT) {
 8013c9c:	f997 301a 	ldrsb.w	r3, [r7, #26]
 8013ca0:	f113 0f0d 	cmn.w	r3, #13
 8013ca4:	d002      	beq.n	8013cac <tcp_process+0x41c>
              tcp_abort(pcb);
 8013ca6:	6878      	ldr	r0, [r7, #4]
 8013ca8:	f7fd ff8a 	bl	8011bc0 <tcp_abort>
            }
            return ERR_ABRT;
 8013cac:	f06f 030c 	mvn.w	r3, #12
 8013cb0:	e1ce      	b.n	8014050 <tcp_process+0x7c0>
          }
          /* If there was any data contained within this ACK,
           * we'd better pass it on to the application as well. */
          tcp_receive(pcb);
 8013cb2:	6878      	ldr	r0, [r7, #4]
 8013cb4:	f000 fae0 	bl	8014278 <tcp_receive>

          /* Prevent ACK for SYN to generate a sent event */
          if (recv_acked != 0) {
 8013cb8:	4b63      	ldr	r3, [pc, #396]	; (8013e48 <tcp_process+0x5b8>)
 8013cba:	881b      	ldrh	r3, [r3, #0]
 8013cbc:	2b00      	cmp	r3, #0
 8013cbe:	d005      	beq.n	8013ccc <tcp_process+0x43c>
            recv_acked--;
 8013cc0:	4b61      	ldr	r3, [pc, #388]	; (8013e48 <tcp_process+0x5b8>)
 8013cc2:	881b      	ldrh	r3, [r3, #0]
 8013cc4:	3b01      	subs	r3, #1
 8013cc6:	b29a      	uxth	r2, r3
 8013cc8:	4b5f      	ldr	r3, [pc, #380]	; (8013e48 <tcp_process+0x5b8>)
 8013cca:	801a      	strh	r2, [r3, #0]
          }

          pcb->cwnd = LWIP_TCP_CALC_INITIAL_CWND(pcb->mss);
 8013ccc:	687b      	ldr	r3, [r7, #4]
 8013cce:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8013cd0:	009a      	lsls	r2, r3, #2
 8013cd2:	687b      	ldr	r3, [r7, #4]
 8013cd4:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8013cd6:	005b      	lsls	r3, r3, #1
 8013cd8:	f241 111c 	movw	r1, #4380	; 0x111c
 8013cdc:	428b      	cmp	r3, r1
 8013cde:	bf38      	it	cc
 8013ce0:	460b      	movcc	r3, r1
 8013ce2:	429a      	cmp	r2, r3
 8013ce4:	d204      	bcs.n	8013cf0 <tcp_process+0x460>
 8013ce6:	687b      	ldr	r3, [r7, #4]
 8013ce8:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8013cea:	009b      	lsls	r3, r3, #2
 8013cec:	b29b      	uxth	r3, r3
 8013cee:	e00d      	b.n	8013d0c <tcp_process+0x47c>
 8013cf0:	687b      	ldr	r3, [r7, #4]
 8013cf2:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8013cf4:	005b      	lsls	r3, r3, #1
 8013cf6:	f241 121c 	movw	r2, #4380	; 0x111c
 8013cfa:	4293      	cmp	r3, r2
 8013cfc:	d904      	bls.n	8013d08 <tcp_process+0x478>
 8013cfe:	687b      	ldr	r3, [r7, #4]
 8013d00:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8013d02:	005b      	lsls	r3, r3, #1
 8013d04:	b29b      	uxth	r3, r3
 8013d06:	e001      	b.n	8013d0c <tcp_process+0x47c>
 8013d08:	f241 131c 	movw	r3, #4380	; 0x111c
 8013d0c:	687a      	ldr	r2, [r7, #4]
 8013d0e:	f8a2 3048 	strh.w	r3, [r2, #72]	; 0x48
          LWIP_DEBUGF(TCP_CWND_DEBUG, ("tcp_process (SYN_RCVD): cwnd %"TCPWNDSIZE_F
                                       " ssthresh %"TCPWNDSIZE_F"\n",
                                       pcb->cwnd, pcb->ssthresh));

          if (recv_flags & TF_GOT_FIN) {
 8013d12:	4b4e      	ldr	r3, [pc, #312]	; (8013e4c <tcp_process+0x5bc>)
 8013d14:	781b      	ldrb	r3, [r3, #0]
 8013d16:	f003 0320 	and.w	r3, r3, #32
 8013d1a:	2b00      	cmp	r3, #0
 8013d1c:	d037      	beq.n	8013d8e <tcp_process+0x4fe>
            tcp_ack_now(pcb);
 8013d1e:	687b      	ldr	r3, [r7, #4]
 8013d20:	8b5b      	ldrh	r3, [r3, #26]
 8013d22:	f043 0302 	orr.w	r3, r3, #2
 8013d26:	b29a      	uxth	r2, r3
 8013d28:	687b      	ldr	r3, [r7, #4]
 8013d2a:	835a      	strh	r2, [r3, #26]
            pcb->state = CLOSE_WAIT;
 8013d2c:	687b      	ldr	r3, [r7, #4]
 8013d2e:	2207      	movs	r2, #7
 8013d30:	751a      	strb	r2, [r3, #20]
          if (recv_flags & TF_GOT_FIN) {
 8013d32:	e02c      	b.n	8013d8e <tcp_process+0x4fe>
          }
        } else {
          /* incorrect ACK number, send RST */
          tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 8013d34:	4b3b      	ldr	r3, [pc, #236]	; (8013e24 <tcp_process+0x594>)
 8013d36:	6819      	ldr	r1, [r3, #0]
 8013d38:	4b3b      	ldr	r3, [pc, #236]	; (8013e28 <tcp_process+0x598>)
 8013d3a:	881b      	ldrh	r3, [r3, #0]
 8013d3c:	461a      	mov	r2, r3
 8013d3e:	4b3b      	ldr	r3, [pc, #236]	; (8013e2c <tcp_process+0x59c>)
 8013d40:	681b      	ldr	r3, [r3, #0]
 8013d42:	18d0      	adds	r0, r2, r3
                  ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 8013d44:	4b3a      	ldr	r3, [pc, #232]	; (8013e30 <tcp_process+0x5a0>)
 8013d46:	681b      	ldr	r3, [r3, #0]
          tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 8013d48:	885b      	ldrh	r3, [r3, #2]
 8013d4a:	b29b      	uxth	r3, r3
                  ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 8013d4c:	4a38      	ldr	r2, [pc, #224]	; (8013e30 <tcp_process+0x5a0>)
 8013d4e:	6812      	ldr	r2, [r2, #0]
          tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 8013d50:	8812      	ldrh	r2, [r2, #0]
 8013d52:	b292      	uxth	r2, r2
 8013d54:	9202      	str	r2, [sp, #8]
 8013d56:	9301      	str	r3, [sp, #4]
 8013d58:	4b36      	ldr	r3, [pc, #216]	; (8013e34 <tcp_process+0x5a4>)
 8013d5a:	9300      	str	r3, [sp, #0]
 8013d5c:	4b36      	ldr	r3, [pc, #216]	; (8013e38 <tcp_process+0x5a8>)
 8013d5e:	4602      	mov	r2, r0
 8013d60:	6878      	ldr	r0, [r7, #4]
 8013d62:	f002 fbd1 	bl	8016508 <tcp_rst>
        }
      } else if ((flags & TCP_SYN) && (seqno == pcb->rcv_nxt - 1)) {
        /* Looks like another copy of the SYN - retransmit our SYN-ACK */
        tcp_rexmit(pcb);
      }
      break;
 8013d66:	e167      	b.n	8014038 <tcp_process+0x7a8>
      } else if ((flags & TCP_SYN) && (seqno == pcb->rcv_nxt - 1)) {
 8013d68:	4b2d      	ldr	r3, [pc, #180]	; (8013e20 <tcp_process+0x590>)
 8013d6a:	781b      	ldrb	r3, [r3, #0]
 8013d6c:	f003 0302 	and.w	r3, r3, #2
 8013d70:	2b00      	cmp	r3, #0
 8013d72:	f000 8161 	beq.w	8014038 <tcp_process+0x7a8>
 8013d76:	687b      	ldr	r3, [r7, #4]
 8013d78:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8013d7a:	1e5a      	subs	r2, r3, #1
 8013d7c:	4b2b      	ldr	r3, [pc, #172]	; (8013e2c <tcp_process+0x59c>)
 8013d7e:	681b      	ldr	r3, [r3, #0]
 8013d80:	429a      	cmp	r2, r3
 8013d82:	f040 8159 	bne.w	8014038 <tcp_process+0x7a8>
        tcp_rexmit(pcb);
 8013d86:	6878      	ldr	r0, [r7, #4]
 8013d88:	f002 f9b8 	bl	80160fc <tcp_rexmit>
      break;
 8013d8c:	e154      	b.n	8014038 <tcp_process+0x7a8>
 8013d8e:	e153      	b.n	8014038 <tcp_process+0x7a8>
    case CLOSE_WAIT:
    /* FALLTHROUGH */
    case ESTABLISHED:
      tcp_receive(pcb);
 8013d90:	6878      	ldr	r0, [r7, #4]
 8013d92:	f000 fa71 	bl	8014278 <tcp_receive>
      if (recv_flags & TF_GOT_FIN) { /* passive close */
 8013d96:	4b2d      	ldr	r3, [pc, #180]	; (8013e4c <tcp_process+0x5bc>)
 8013d98:	781b      	ldrb	r3, [r3, #0]
 8013d9a:	f003 0320 	and.w	r3, r3, #32
 8013d9e:	2b00      	cmp	r3, #0
 8013da0:	f000 814c 	beq.w	801403c <tcp_process+0x7ac>
        tcp_ack_now(pcb);
 8013da4:	687b      	ldr	r3, [r7, #4]
 8013da6:	8b5b      	ldrh	r3, [r3, #26]
 8013da8:	f043 0302 	orr.w	r3, r3, #2
 8013dac:	b29a      	uxth	r2, r3
 8013dae:	687b      	ldr	r3, [r7, #4]
 8013db0:	835a      	strh	r2, [r3, #26]
        pcb->state = CLOSE_WAIT;
 8013db2:	687b      	ldr	r3, [r7, #4]
 8013db4:	2207      	movs	r2, #7
 8013db6:	751a      	strb	r2, [r3, #20]
      }
      break;
 8013db8:	e140      	b.n	801403c <tcp_process+0x7ac>
    case FIN_WAIT_1:
      tcp_receive(pcb);
 8013dba:	6878      	ldr	r0, [r7, #4]
 8013dbc:	f000 fa5c 	bl	8014278 <tcp_receive>
      if (recv_flags & TF_GOT_FIN) {
 8013dc0:	4b22      	ldr	r3, [pc, #136]	; (8013e4c <tcp_process+0x5bc>)
 8013dc2:	781b      	ldrb	r3, [r3, #0]
 8013dc4:	f003 0320 	and.w	r3, r3, #32
 8013dc8:	2b00      	cmp	r3, #0
 8013dca:	d071      	beq.n	8013eb0 <tcp_process+0x620>
        if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
 8013dcc:	4b14      	ldr	r3, [pc, #80]	; (8013e20 <tcp_process+0x590>)
 8013dce:	781b      	ldrb	r3, [r3, #0]
 8013dd0:	f003 0310 	and.w	r3, r3, #16
 8013dd4:	2b00      	cmp	r3, #0
 8013dd6:	d060      	beq.n	8013e9a <tcp_process+0x60a>
 8013dd8:	687b      	ldr	r3, [r7, #4]
 8013dda:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8013ddc:	4b11      	ldr	r3, [pc, #68]	; (8013e24 <tcp_process+0x594>)
 8013dde:	681b      	ldr	r3, [r3, #0]
 8013de0:	429a      	cmp	r2, r3
 8013de2:	d15a      	bne.n	8013e9a <tcp_process+0x60a>
            pcb->unsent == NULL) {
 8013de4:	687b      	ldr	r3, [r7, #4]
 8013de6:	6edb      	ldr	r3, [r3, #108]	; 0x6c
        if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
 8013de8:	2b00      	cmp	r3, #0
 8013dea:	d156      	bne.n	8013e9a <tcp_process+0x60a>
          LWIP_DEBUGF(TCP_DEBUG,
                      ("TCP connection closed: FIN_WAIT_1 %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
          tcp_ack_now(pcb);
 8013dec:	687b      	ldr	r3, [r7, #4]
 8013dee:	8b5b      	ldrh	r3, [r3, #26]
 8013df0:	f043 0302 	orr.w	r3, r3, #2
 8013df4:	b29a      	uxth	r2, r3
 8013df6:	687b      	ldr	r3, [r7, #4]
 8013df8:	835a      	strh	r2, [r3, #26]
          tcp_pcb_purge(pcb);
 8013dfa:	6878      	ldr	r0, [r7, #4]
 8013dfc:	f7fe fdbc 	bl	8012978 <tcp_pcb_purge>
          TCP_RMV_ACTIVE(pcb);
 8013e00:	4b13      	ldr	r3, [pc, #76]	; (8013e50 <tcp_process+0x5c0>)
 8013e02:	681b      	ldr	r3, [r3, #0]
 8013e04:	687a      	ldr	r2, [r7, #4]
 8013e06:	429a      	cmp	r2, r3
 8013e08:	d105      	bne.n	8013e16 <tcp_process+0x586>
 8013e0a:	4b11      	ldr	r3, [pc, #68]	; (8013e50 <tcp_process+0x5c0>)
 8013e0c:	681b      	ldr	r3, [r3, #0]
 8013e0e:	68db      	ldr	r3, [r3, #12]
 8013e10:	4a0f      	ldr	r2, [pc, #60]	; (8013e50 <tcp_process+0x5c0>)
 8013e12:	6013      	str	r3, [r2, #0]
 8013e14:	e02e      	b.n	8013e74 <tcp_process+0x5e4>
 8013e16:	4b0e      	ldr	r3, [pc, #56]	; (8013e50 <tcp_process+0x5c0>)
 8013e18:	681b      	ldr	r3, [r3, #0]
 8013e1a:	617b      	str	r3, [r7, #20]
 8013e1c:	e027      	b.n	8013e6e <tcp_process+0x5de>
 8013e1e:	bf00      	nop
 8013e20:	20007118 	.word	0x20007118
 8013e24:	20007110 	.word	0x20007110
 8013e28:	20007116 	.word	0x20007116
 8013e2c:	2000710c 	.word	0x2000710c
 8013e30:	200070fc 	.word	0x200070fc
 8013e34:	20000808 	.word	0x20000808
 8013e38:	2000080c 	.word	0x2000080c
 8013e3c:	0801dbec 	.word	0x0801dbec
 8013e40:	0801de8c 	.word	0x0801de8c
 8013e44:	0801dc38 	.word	0x0801dc38
 8013e48:	20007114 	.word	0x20007114
 8013e4c:	20007119 	.word	0x20007119
 8013e50:	200070e0 	.word	0x200070e0
 8013e54:	697b      	ldr	r3, [r7, #20]
 8013e56:	68db      	ldr	r3, [r3, #12]
 8013e58:	687a      	ldr	r2, [r7, #4]
 8013e5a:	429a      	cmp	r2, r3
 8013e5c:	d104      	bne.n	8013e68 <tcp_process+0x5d8>
 8013e5e:	687b      	ldr	r3, [r7, #4]
 8013e60:	68da      	ldr	r2, [r3, #12]
 8013e62:	697b      	ldr	r3, [r7, #20]
 8013e64:	60da      	str	r2, [r3, #12]
 8013e66:	e005      	b.n	8013e74 <tcp_process+0x5e4>
 8013e68:	697b      	ldr	r3, [r7, #20]
 8013e6a:	68db      	ldr	r3, [r3, #12]
 8013e6c:	617b      	str	r3, [r7, #20]
 8013e6e:	697b      	ldr	r3, [r7, #20]
 8013e70:	2b00      	cmp	r3, #0
 8013e72:	d1ef      	bne.n	8013e54 <tcp_process+0x5c4>
 8013e74:	687b      	ldr	r3, [r7, #4]
 8013e76:	2200      	movs	r2, #0
 8013e78:	60da      	str	r2, [r3, #12]
 8013e7a:	4b77      	ldr	r3, [pc, #476]	; (8014058 <tcp_process+0x7c8>)
 8013e7c:	2201      	movs	r2, #1
 8013e7e:	701a      	strb	r2, [r3, #0]
          pcb->state = TIME_WAIT;
 8013e80:	687b      	ldr	r3, [r7, #4]
 8013e82:	220a      	movs	r2, #10
 8013e84:	751a      	strb	r2, [r3, #20]
          TCP_REG(&tcp_tw_pcbs, pcb);
 8013e86:	4b75      	ldr	r3, [pc, #468]	; (801405c <tcp_process+0x7cc>)
 8013e88:	681a      	ldr	r2, [r3, #0]
 8013e8a:	687b      	ldr	r3, [r7, #4]
 8013e8c:	60da      	str	r2, [r3, #12]
 8013e8e:	4a73      	ldr	r2, [pc, #460]	; (801405c <tcp_process+0x7cc>)
 8013e90:	687b      	ldr	r3, [r7, #4]
 8013e92:	6013      	str	r3, [r2, #0]
 8013e94:	f002 fcfa 	bl	801688c <tcp_timer_needed>
        }
      } else if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
                 pcb->unsent == NULL) {
        pcb->state = FIN_WAIT_2;
      }
      break;
 8013e98:	e0d2      	b.n	8014040 <tcp_process+0x7b0>
          tcp_ack_now(pcb);
 8013e9a:	687b      	ldr	r3, [r7, #4]
 8013e9c:	8b5b      	ldrh	r3, [r3, #26]
 8013e9e:	f043 0302 	orr.w	r3, r3, #2
 8013ea2:	b29a      	uxth	r2, r3
 8013ea4:	687b      	ldr	r3, [r7, #4]
 8013ea6:	835a      	strh	r2, [r3, #26]
          pcb->state = CLOSING;
 8013ea8:	687b      	ldr	r3, [r7, #4]
 8013eaa:	2208      	movs	r2, #8
 8013eac:	751a      	strb	r2, [r3, #20]
      break;
 8013eae:	e0c7      	b.n	8014040 <tcp_process+0x7b0>
      } else if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
 8013eb0:	4b6b      	ldr	r3, [pc, #428]	; (8014060 <tcp_process+0x7d0>)
 8013eb2:	781b      	ldrb	r3, [r3, #0]
 8013eb4:	f003 0310 	and.w	r3, r3, #16
 8013eb8:	2b00      	cmp	r3, #0
 8013eba:	f000 80c1 	beq.w	8014040 <tcp_process+0x7b0>
 8013ebe:	687b      	ldr	r3, [r7, #4]
 8013ec0:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8013ec2:	4b68      	ldr	r3, [pc, #416]	; (8014064 <tcp_process+0x7d4>)
 8013ec4:	681b      	ldr	r3, [r3, #0]
 8013ec6:	429a      	cmp	r2, r3
 8013ec8:	f040 80ba 	bne.w	8014040 <tcp_process+0x7b0>
                 pcb->unsent == NULL) {
 8013ecc:	687b      	ldr	r3, [r7, #4]
 8013ece:	6edb      	ldr	r3, [r3, #108]	; 0x6c
      } else if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
 8013ed0:	2b00      	cmp	r3, #0
 8013ed2:	f040 80b5 	bne.w	8014040 <tcp_process+0x7b0>
        pcb->state = FIN_WAIT_2;
 8013ed6:	687b      	ldr	r3, [r7, #4]
 8013ed8:	2206      	movs	r2, #6
 8013eda:	751a      	strb	r2, [r3, #20]
      break;
 8013edc:	e0b0      	b.n	8014040 <tcp_process+0x7b0>
    case FIN_WAIT_2:
      tcp_receive(pcb);
 8013ede:	6878      	ldr	r0, [r7, #4]
 8013ee0:	f000 f9ca 	bl	8014278 <tcp_receive>
      if (recv_flags & TF_GOT_FIN) {
 8013ee4:	4b60      	ldr	r3, [pc, #384]	; (8014068 <tcp_process+0x7d8>)
 8013ee6:	781b      	ldrb	r3, [r3, #0]
 8013ee8:	f003 0320 	and.w	r3, r3, #32
 8013eec:	2b00      	cmp	r3, #0
 8013eee:	f000 80a9 	beq.w	8014044 <tcp_process+0x7b4>
        LWIP_DEBUGF(TCP_DEBUG, ("TCP connection closed: FIN_WAIT_2 %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
        tcp_ack_now(pcb);
 8013ef2:	687b      	ldr	r3, [r7, #4]
 8013ef4:	8b5b      	ldrh	r3, [r3, #26]
 8013ef6:	f043 0302 	orr.w	r3, r3, #2
 8013efa:	b29a      	uxth	r2, r3
 8013efc:	687b      	ldr	r3, [r7, #4]
 8013efe:	835a      	strh	r2, [r3, #26]
        tcp_pcb_purge(pcb);
 8013f00:	6878      	ldr	r0, [r7, #4]
 8013f02:	f7fe fd39 	bl	8012978 <tcp_pcb_purge>
        TCP_RMV_ACTIVE(pcb);
 8013f06:	4b59      	ldr	r3, [pc, #356]	; (801406c <tcp_process+0x7dc>)
 8013f08:	681b      	ldr	r3, [r3, #0]
 8013f0a:	687a      	ldr	r2, [r7, #4]
 8013f0c:	429a      	cmp	r2, r3
 8013f0e:	d105      	bne.n	8013f1c <tcp_process+0x68c>
 8013f10:	4b56      	ldr	r3, [pc, #344]	; (801406c <tcp_process+0x7dc>)
 8013f12:	681b      	ldr	r3, [r3, #0]
 8013f14:	68db      	ldr	r3, [r3, #12]
 8013f16:	4a55      	ldr	r2, [pc, #340]	; (801406c <tcp_process+0x7dc>)
 8013f18:	6013      	str	r3, [r2, #0]
 8013f1a:	e013      	b.n	8013f44 <tcp_process+0x6b4>
 8013f1c:	4b53      	ldr	r3, [pc, #332]	; (801406c <tcp_process+0x7dc>)
 8013f1e:	681b      	ldr	r3, [r3, #0]
 8013f20:	613b      	str	r3, [r7, #16]
 8013f22:	e00c      	b.n	8013f3e <tcp_process+0x6ae>
 8013f24:	693b      	ldr	r3, [r7, #16]
 8013f26:	68db      	ldr	r3, [r3, #12]
 8013f28:	687a      	ldr	r2, [r7, #4]
 8013f2a:	429a      	cmp	r2, r3
 8013f2c:	d104      	bne.n	8013f38 <tcp_process+0x6a8>
 8013f2e:	687b      	ldr	r3, [r7, #4]
 8013f30:	68da      	ldr	r2, [r3, #12]
 8013f32:	693b      	ldr	r3, [r7, #16]
 8013f34:	60da      	str	r2, [r3, #12]
 8013f36:	e005      	b.n	8013f44 <tcp_process+0x6b4>
 8013f38:	693b      	ldr	r3, [r7, #16]
 8013f3a:	68db      	ldr	r3, [r3, #12]
 8013f3c:	613b      	str	r3, [r7, #16]
 8013f3e:	693b      	ldr	r3, [r7, #16]
 8013f40:	2b00      	cmp	r3, #0
 8013f42:	d1ef      	bne.n	8013f24 <tcp_process+0x694>
 8013f44:	687b      	ldr	r3, [r7, #4]
 8013f46:	2200      	movs	r2, #0
 8013f48:	60da      	str	r2, [r3, #12]
 8013f4a:	4b43      	ldr	r3, [pc, #268]	; (8014058 <tcp_process+0x7c8>)
 8013f4c:	2201      	movs	r2, #1
 8013f4e:	701a      	strb	r2, [r3, #0]
        pcb->state = TIME_WAIT;
 8013f50:	687b      	ldr	r3, [r7, #4]
 8013f52:	220a      	movs	r2, #10
 8013f54:	751a      	strb	r2, [r3, #20]
        TCP_REG(&tcp_tw_pcbs, pcb);
 8013f56:	4b41      	ldr	r3, [pc, #260]	; (801405c <tcp_process+0x7cc>)
 8013f58:	681a      	ldr	r2, [r3, #0]
 8013f5a:	687b      	ldr	r3, [r7, #4]
 8013f5c:	60da      	str	r2, [r3, #12]
 8013f5e:	4a3f      	ldr	r2, [pc, #252]	; (801405c <tcp_process+0x7cc>)
 8013f60:	687b      	ldr	r3, [r7, #4]
 8013f62:	6013      	str	r3, [r2, #0]
 8013f64:	f002 fc92 	bl	801688c <tcp_timer_needed>
      }
      break;
 8013f68:	e06c      	b.n	8014044 <tcp_process+0x7b4>
    case CLOSING:
      tcp_receive(pcb);
 8013f6a:	6878      	ldr	r0, [r7, #4]
 8013f6c:	f000 f984 	bl	8014278 <tcp_receive>
      if ((flags & TCP_ACK) && ackno == pcb->snd_nxt && pcb->unsent == NULL) {
 8013f70:	4b3b      	ldr	r3, [pc, #236]	; (8014060 <tcp_process+0x7d0>)
 8013f72:	781b      	ldrb	r3, [r3, #0]
 8013f74:	f003 0310 	and.w	r3, r3, #16
 8013f78:	2b00      	cmp	r3, #0
 8013f7a:	d065      	beq.n	8014048 <tcp_process+0x7b8>
 8013f7c:	687b      	ldr	r3, [r7, #4]
 8013f7e:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8013f80:	4b38      	ldr	r3, [pc, #224]	; (8014064 <tcp_process+0x7d4>)
 8013f82:	681b      	ldr	r3, [r3, #0]
 8013f84:	429a      	cmp	r2, r3
 8013f86:	d15f      	bne.n	8014048 <tcp_process+0x7b8>
 8013f88:	687b      	ldr	r3, [r7, #4]
 8013f8a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8013f8c:	2b00      	cmp	r3, #0
 8013f8e:	d15b      	bne.n	8014048 <tcp_process+0x7b8>
        LWIP_DEBUGF(TCP_DEBUG, ("TCP connection closed: CLOSING %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
        tcp_pcb_purge(pcb);
 8013f90:	6878      	ldr	r0, [r7, #4]
 8013f92:	f7fe fcf1 	bl	8012978 <tcp_pcb_purge>
        TCP_RMV_ACTIVE(pcb);
 8013f96:	4b35      	ldr	r3, [pc, #212]	; (801406c <tcp_process+0x7dc>)
 8013f98:	681b      	ldr	r3, [r3, #0]
 8013f9a:	687a      	ldr	r2, [r7, #4]
 8013f9c:	429a      	cmp	r2, r3
 8013f9e:	d105      	bne.n	8013fac <tcp_process+0x71c>
 8013fa0:	4b32      	ldr	r3, [pc, #200]	; (801406c <tcp_process+0x7dc>)
 8013fa2:	681b      	ldr	r3, [r3, #0]
 8013fa4:	68db      	ldr	r3, [r3, #12]
 8013fa6:	4a31      	ldr	r2, [pc, #196]	; (801406c <tcp_process+0x7dc>)
 8013fa8:	6013      	str	r3, [r2, #0]
 8013faa:	e013      	b.n	8013fd4 <tcp_process+0x744>
 8013fac:	4b2f      	ldr	r3, [pc, #188]	; (801406c <tcp_process+0x7dc>)
 8013fae:	681b      	ldr	r3, [r3, #0]
 8013fb0:	60fb      	str	r3, [r7, #12]
 8013fb2:	e00c      	b.n	8013fce <tcp_process+0x73e>
 8013fb4:	68fb      	ldr	r3, [r7, #12]
 8013fb6:	68db      	ldr	r3, [r3, #12]
 8013fb8:	687a      	ldr	r2, [r7, #4]
 8013fba:	429a      	cmp	r2, r3
 8013fbc:	d104      	bne.n	8013fc8 <tcp_process+0x738>
 8013fbe:	687b      	ldr	r3, [r7, #4]
 8013fc0:	68da      	ldr	r2, [r3, #12]
 8013fc2:	68fb      	ldr	r3, [r7, #12]
 8013fc4:	60da      	str	r2, [r3, #12]
 8013fc6:	e005      	b.n	8013fd4 <tcp_process+0x744>
 8013fc8:	68fb      	ldr	r3, [r7, #12]
 8013fca:	68db      	ldr	r3, [r3, #12]
 8013fcc:	60fb      	str	r3, [r7, #12]
 8013fce:	68fb      	ldr	r3, [r7, #12]
 8013fd0:	2b00      	cmp	r3, #0
 8013fd2:	d1ef      	bne.n	8013fb4 <tcp_process+0x724>
 8013fd4:	687b      	ldr	r3, [r7, #4]
 8013fd6:	2200      	movs	r2, #0
 8013fd8:	60da      	str	r2, [r3, #12]
 8013fda:	4b1f      	ldr	r3, [pc, #124]	; (8014058 <tcp_process+0x7c8>)
 8013fdc:	2201      	movs	r2, #1
 8013fde:	701a      	strb	r2, [r3, #0]
        pcb->state = TIME_WAIT;
 8013fe0:	687b      	ldr	r3, [r7, #4]
 8013fe2:	220a      	movs	r2, #10
 8013fe4:	751a      	strb	r2, [r3, #20]
        TCP_REG(&tcp_tw_pcbs, pcb);
 8013fe6:	4b1d      	ldr	r3, [pc, #116]	; (801405c <tcp_process+0x7cc>)
 8013fe8:	681a      	ldr	r2, [r3, #0]
 8013fea:	687b      	ldr	r3, [r7, #4]
 8013fec:	60da      	str	r2, [r3, #12]
 8013fee:	4a1b      	ldr	r2, [pc, #108]	; (801405c <tcp_process+0x7cc>)
 8013ff0:	687b      	ldr	r3, [r7, #4]
 8013ff2:	6013      	str	r3, [r2, #0]
 8013ff4:	f002 fc4a 	bl	801688c <tcp_timer_needed>
      }
      break;
 8013ff8:	e026      	b.n	8014048 <tcp_process+0x7b8>
    case LAST_ACK:
      tcp_receive(pcb);
 8013ffa:	6878      	ldr	r0, [r7, #4]
 8013ffc:	f000 f93c 	bl	8014278 <tcp_receive>
      if ((flags & TCP_ACK) && ackno == pcb->snd_nxt && pcb->unsent == NULL) {
 8014000:	4b17      	ldr	r3, [pc, #92]	; (8014060 <tcp_process+0x7d0>)
 8014002:	781b      	ldrb	r3, [r3, #0]
 8014004:	f003 0310 	and.w	r3, r3, #16
 8014008:	2b00      	cmp	r3, #0
 801400a:	d01f      	beq.n	801404c <tcp_process+0x7bc>
 801400c:	687b      	ldr	r3, [r7, #4]
 801400e:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8014010:	4b14      	ldr	r3, [pc, #80]	; (8014064 <tcp_process+0x7d4>)
 8014012:	681b      	ldr	r3, [r3, #0]
 8014014:	429a      	cmp	r2, r3
 8014016:	d119      	bne.n	801404c <tcp_process+0x7bc>
 8014018:	687b      	ldr	r3, [r7, #4]
 801401a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 801401c:	2b00      	cmp	r3, #0
 801401e:	d115      	bne.n	801404c <tcp_process+0x7bc>
        LWIP_DEBUGF(TCP_DEBUG, ("TCP connection closed: LAST_ACK %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
        /* bugfix #21699: don't set pcb->state to CLOSED here or we risk leaking segments */
        recv_flags |= TF_CLOSED;
 8014020:	4b11      	ldr	r3, [pc, #68]	; (8014068 <tcp_process+0x7d8>)
 8014022:	781b      	ldrb	r3, [r3, #0]
 8014024:	f043 0310 	orr.w	r3, r3, #16
 8014028:	b2da      	uxtb	r2, r3
 801402a:	4b0f      	ldr	r3, [pc, #60]	; (8014068 <tcp_process+0x7d8>)
 801402c:	701a      	strb	r2, [r3, #0]
      }
      break;
 801402e:	e00d      	b.n	801404c <tcp_process+0x7bc>
    default:
      break;
 8014030:	bf00      	nop
 8014032:	e00c      	b.n	801404e <tcp_process+0x7be>
      break;
 8014034:	bf00      	nop
 8014036:	e00a      	b.n	801404e <tcp_process+0x7be>
      break;
 8014038:	bf00      	nop
 801403a:	e008      	b.n	801404e <tcp_process+0x7be>
      break;
 801403c:	bf00      	nop
 801403e:	e006      	b.n	801404e <tcp_process+0x7be>
      break;
 8014040:	bf00      	nop
 8014042:	e004      	b.n	801404e <tcp_process+0x7be>
      break;
 8014044:	bf00      	nop
 8014046:	e002      	b.n	801404e <tcp_process+0x7be>
      break;
 8014048:	bf00      	nop
 801404a:	e000      	b.n	801404e <tcp_process+0x7be>
      break;
 801404c:	bf00      	nop
  }
  return ERR_OK;
 801404e:	2300      	movs	r3, #0
}
 8014050:	4618      	mov	r0, r3
 8014052:	3724      	adds	r7, #36	; 0x24
 8014054:	46bd      	mov	sp, r7
 8014056:	bd90      	pop	{r4, r7, pc}
 8014058:	200070e8 	.word	0x200070e8
 801405c:	200070e4 	.word	0x200070e4
 8014060:	20007118 	.word	0x20007118
 8014064:	20007110 	.word	0x20007110
 8014068:	20007119 	.word	0x20007119
 801406c:	200070e0 	.word	0x200070e0

08014070 <tcp_oos_insert_segment>:
 *
 * Called from tcp_receive()
 */
static void
tcp_oos_insert_segment(struct tcp_seg *cseg, struct tcp_seg *next)
{
 8014070:	b590      	push	{r4, r7, lr}
 8014072:	b085      	sub	sp, #20
 8014074:	af00      	add	r7, sp, #0
 8014076:	6078      	str	r0, [r7, #4]
 8014078:	6039      	str	r1, [r7, #0]
  struct tcp_seg *old_seg;

  LWIP_ASSERT("tcp_oos_insert_segment: invalid cseg", cseg != NULL);
 801407a:	687b      	ldr	r3, [r7, #4]
 801407c:	2b00      	cmp	r3, #0
 801407e:	d106      	bne.n	801408e <tcp_oos_insert_segment+0x1e>
 8014080:	4b3b      	ldr	r3, [pc, #236]	; (8014170 <tcp_oos_insert_segment+0x100>)
 8014082:	f240 421f 	movw	r2, #1055	; 0x41f
 8014086:	493b      	ldr	r1, [pc, #236]	; (8014174 <tcp_oos_insert_segment+0x104>)
 8014088:	483b      	ldr	r0, [pc, #236]	; (8014178 <tcp_oos_insert_segment+0x108>)
 801408a:	f005 fee9 	bl	8019e60 <iprintf>

  if (TCPH_FLAGS(cseg->tcphdr) & TCP_FIN) {
 801408e:	687b      	ldr	r3, [r7, #4]
 8014090:	68db      	ldr	r3, [r3, #12]
 8014092:	899b      	ldrh	r3, [r3, #12]
 8014094:	b29b      	uxth	r3, r3
 8014096:	4618      	mov	r0, r3
 8014098:	f7fb fc26 	bl	800f8e8 <lwip_htons>
 801409c:	4603      	mov	r3, r0
 801409e:	b2db      	uxtb	r3, r3
 80140a0:	f003 0301 	and.w	r3, r3, #1
 80140a4:	2b00      	cmp	r3, #0
 80140a6:	d028      	beq.n	80140fa <tcp_oos_insert_segment+0x8a>
    /* received segment overlaps all following segments */
    tcp_segs_free(next);
 80140a8:	6838      	ldr	r0, [r7, #0]
 80140aa:	f7fe fa63 	bl	8012574 <tcp_segs_free>
    next = NULL;
 80140ae:	2300      	movs	r3, #0
 80140b0:	603b      	str	r3, [r7, #0]
 80140b2:	e056      	b.n	8014162 <tcp_oos_insert_segment+0xf2>
       oos queue may have segments with FIN flag */
    while (next &&
           TCP_SEQ_GEQ((seqno + cseg->len),
                       (next->tcphdr->seqno + next->len))) {
      /* cseg with FIN already processed */
      if (TCPH_FLAGS(next->tcphdr) & TCP_FIN) {
 80140b4:	683b      	ldr	r3, [r7, #0]
 80140b6:	68db      	ldr	r3, [r3, #12]
 80140b8:	899b      	ldrh	r3, [r3, #12]
 80140ba:	b29b      	uxth	r3, r3
 80140bc:	4618      	mov	r0, r3
 80140be:	f7fb fc13 	bl	800f8e8 <lwip_htons>
 80140c2:	4603      	mov	r3, r0
 80140c4:	b2db      	uxtb	r3, r3
 80140c6:	f003 0301 	and.w	r3, r3, #1
 80140ca:	2b00      	cmp	r3, #0
 80140cc:	d00d      	beq.n	80140ea <tcp_oos_insert_segment+0x7a>
        TCPH_SET_FLAG(cseg->tcphdr, TCP_FIN);
 80140ce:	687b      	ldr	r3, [r7, #4]
 80140d0:	68db      	ldr	r3, [r3, #12]
 80140d2:	899b      	ldrh	r3, [r3, #12]
 80140d4:	b29c      	uxth	r4, r3
 80140d6:	2001      	movs	r0, #1
 80140d8:	f7fb fc06 	bl	800f8e8 <lwip_htons>
 80140dc:	4603      	mov	r3, r0
 80140de:	461a      	mov	r2, r3
 80140e0:	687b      	ldr	r3, [r7, #4]
 80140e2:	68db      	ldr	r3, [r3, #12]
 80140e4:	4322      	orrs	r2, r4
 80140e6:	b292      	uxth	r2, r2
 80140e8:	819a      	strh	r2, [r3, #12]
      }
      old_seg = next;
 80140ea:	683b      	ldr	r3, [r7, #0]
 80140ec:	60fb      	str	r3, [r7, #12]
      next = next->next;
 80140ee:	683b      	ldr	r3, [r7, #0]
 80140f0:	681b      	ldr	r3, [r3, #0]
 80140f2:	603b      	str	r3, [r7, #0]
      tcp_seg_free(old_seg);
 80140f4:	68f8      	ldr	r0, [r7, #12]
 80140f6:	f7fe fa52 	bl	801259e <tcp_seg_free>
    while (next &&
 80140fa:	683b      	ldr	r3, [r7, #0]
 80140fc:	2b00      	cmp	r3, #0
 80140fe:	d00e      	beq.n	801411e <tcp_oos_insert_segment+0xae>
           TCP_SEQ_GEQ((seqno + cseg->len),
 8014100:	687b      	ldr	r3, [r7, #4]
 8014102:	891b      	ldrh	r3, [r3, #8]
 8014104:	461a      	mov	r2, r3
 8014106:	4b1d      	ldr	r3, [pc, #116]	; (801417c <tcp_oos_insert_segment+0x10c>)
 8014108:	681b      	ldr	r3, [r3, #0]
 801410a:	441a      	add	r2, r3
 801410c:	683b      	ldr	r3, [r7, #0]
 801410e:	68db      	ldr	r3, [r3, #12]
 8014110:	685b      	ldr	r3, [r3, #4]
 8014112:	6839      	ldr	r1, [r7, #0]
 8014114:	8909      	ldrh	r1, [r1, #8]
 8014116:	440b      	add	r3, r1
 8014118:	1ad3      	subs	r3, r2, r3
    while (next &&
 801411a:	2b00      	cmp	r3, #0
 801411c:	daca      	bge.n	80140b4 <tcp_oos_insert_segment+0x44>
    }
    if (next &&
 801411e:	683b      	ldr	r3, [r7, #0]
 8014120:	2b00      	cmp	r3, #0
 8014122:	d01e      	beq.n	8014162 <tcp_oos_insert_segment+0xf2>
        TCP_SEQ_GT(seqno + cseg->len, next->tcphdr->seqno)) {
 8014124:	687b      	ldr	r3, [r7, #4]
 8014126:	891b      	ldrh	r3, [r3, #8]
 8014128:	461a      	mov	r2, r3
 801412a:	4b14      	ldr	r3, [pc, #80]	; (801417c <tcp_oos_insert_segment+0x10c>)
 801412c:	681b      	ldr	r3, [r3, #0]
 801412e:	441a      	add	r2, r3
 8014130:	683b      	ldr	r3, [r7, #0]
 8014132:	68db      	ldr	r3, [r3, #12]
 8014134:	685b      	ldr	r3, [r3, #4]
 8014136:	1ad3      	subs	r3, r2, r3
    if (next &&
 8014138:	2b00      	cmp	r3, #0
 801413a:	dd12      	ble.n	8014162 <tcp_oos_insert_segment+0xf2>
      /* We need to trim the incoming segment. */
      cseg->len = (u16_t)(next->tcphdr->seqno - seqno);
 801413c:	683b      	ldr	r3, [r7, #0]
 801413e:	68db      	ldr	r3, [r3, #12]
 8014140:	685b      	ldr	r3, [r3, #4]
 8014142:	b29a      	uxth	r2, r3
 8014144:	4b0d      	ldr	r3, [pc, #52]	; (801417c <tcp_oos_insert_segment+0x10c>)
 8014146:	681b      	ldr	r3, [r3, #0]
 8014148:	b29b      	uxth	r3, r3
 801414a:	1ad3      	subs	r3, r2, r3
 801414c:	b29a      	uxth	r2, r3
 801414e:	687b      	ldr	r3, [r7, #4]
 8014150:	811a      	strh	r2, [r3, #8]
      pbuf_realloc(cseg->p, cseg->len);
 8014152:	687b      	ldr	r3, [r7, #4]
 8014154:	685a      	ldr	r2, [r3, #4]
 8014156:	687b      	ldr	r3, [r7, #4]
 8014158:	891b      	ldrh	r3, [r3, #8]
 801415a:	4619      	mov	r1, r3
 801415c:	4610      	mov	r0, r2
 801415e:	f7fc fe23 	bl	8010da8 <pbuf_realloc>
    }
  }
  cseg->next = next;
 8014162:	687b      	ldr	r3, [r7, #4]
 8014164:	683a      	ldr	r2, [r7, #0]
 8014166:	601a      	str	r2, [r3, #0]
}
 8014168:	bf00      	nop
 801416a:	3714      	adds	r7, #20
 801416c:	46bd      	mov	sp, r7
 801416e:	bd90      	pop	{r4, r7, pc}
 8014170:	0801dbec 	.word	0x0801dbec
 8014174:	0801deac 	.word	0x0801deac
 8014178:	0801dc38 	.word	0x0801dc38
 801417c:	2000710c 	.word	0x2000710c

08014180 <tcp_free_acked_segments>:

/** Remove segments from a list if the incoming ACK acknowledges them */
static struct tcp_seg *
tcp_free_acked_segments(struct tcp_pcb *pcb, struct tcp_seg *seg_list, const char *dbg_list_name,
                        struct tcp_seg *dbg_other_seg_list)
{
 8014180:	b5b0      	push	{r4, r5, r7, lr}
 8014182:	b086      	sub	sp, #24
 8014184:	af00      	add	r7, sp, #0
 8014186:	60f8      	str	r0, [r7, #12]
 8014188:	60b9      	str	r1, [r7, #8]
 801418a:	607a      	str	r2, [r7, #4]
 801418c:	603b      	str	r3, [r7, #0]
  u16_t clen;

  LWIP_UNUSED_ARG(dbg_list_name);
  LWIP_UNUSED_ARG(dbg_other_seg_list);

  while (seg_list != NULL &&
 801418e:	e03e      	b.n	801420e <tcp_free_acked_segments+0x8e>
    LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_receive: removing %"U32_F":%"U32_F" from pcb->%s\n",
                                  lwip_ntohl(seg_list->tcphdr->seqno),
                                  lwip_ntohl(seg_list->tcphdr->seqno) + TCP_TCPLEN(seg_list),
                                  dbg_list_name));

    next = seg_list;
 8014190:	68bb      	ldr	r3, [r7, #8]
 8014192:	617b      	str	r3, [r7, #20]
    seg_list = seg_list->next;
 8014194:	68bb      	ldr	r3, [r7, #8]
 8014196:	681b      	ldr	r3, [r3, #0]
 8014198:	60bb      	str	r3, [r7, #8]

    clen = pbuf_clen(next->p);
 801419a:	697b      	ldr	r3, [r7, #20]
 801419c:	685b      	ldr	r3, [r3, #4]
 801419e:	4618      	mov	r0, r3
 80141a0:	f7fd f80e 	bl	80111c0 <pbuf_clen>
 80141a4:	4603      	mov	r3, r0
 80141a6:	827b      	strh	r3, [r7, #18]
    LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_receive: queuelen %"TCPWNDSIZE_F" ... ",
                                 (tcpwnd_size_t)pcb->snd_queuelen));
    LWIP_ASSERT("pcb->snd_queuelen >= pbuf_clen(next->p)", (pcb->snd_queuelen >= clen));
 80141a8:	68fb      	ldr	r3, [r7, #12]
 80141aa:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 80141ae:	8a7a      	ldrh	r2, [r7, #18]
 80141b0:	429a      	cmp	r2, r3
 80141b2:	d906      	bls.n	80141c2 <tcp_free_acked_segments+0x42>
 80141b4:	4b2a      	ldr	r3, [pc, #168]	; (8014260 <tcp_free_acked_segments+0xe0>)
 80141b6:	f240 4257 	movw	r2, #1111	; 0x457
 80141ba:	492a      	ldr	r1, [pc, #168]	; (8014264 <tcp_free_acked_segments+0xe4>)
 80141bc:	482a      	ldr	r0, [pc, #168]	; (8014268 <tcp_free_acked_segments+0xe8>)
 80141be:	f005 fe4f 	bl	8019e60 <iprintf>

    pcb->snd_queuelen = (u16_t)(pcb->snd_queuelen - clen);
 80141c2:	68fb      	ldr	r3, [r7, #12]
 80141c4:	f8b3 2066 	ldrh.w	r2, [r3, #102]	; 0x66
 80141c8:	8a7b      	ldrh	r3, [r7, #18]
 80141ca:	1ad3      	subs	r3, r2, r3
 80141cc:	b29a      	uxth	r2, r3
 80141ce:	68fb      	ldr	r3, [r7, #12]
 80141d0:	f8a3 2066 	strh.w	r2, [r3, #102]	; 0x66
    recv_acked = (tcpwnd_size_t)(recv_acked + next->len);
 80141d4:	697b      	ldr	r3, [r7, #20]
 80141d6:	891a      	ldrh	r2, [r3, #8]
 80141d8:	4b24      	ldr	r3, [pc, #144]	; (801426c <tcp_free_acked_segments+0xec>)
 80141da:	881b      	ldrh	r3, [r3, #0]
 80141dc:	4413      	add	r3, r2
 80141de:	b29a      	uxth	r2, r3
 80141e0:	4b22      	ldr	r3, [pc, #136]	; (801426c <tcp_free_acked_segments+0xec>)
 80141e2:	801a      	strh	r2, [r3, #0]
    tcp_seg_free(next);
 80141e4:	6978      	ldr	r0, [r7, #20]
 80141e6:	f7fe f9da 	bl	801259e <tcp_seg_free>

    LWIP_DEBUGF(TCP_QLEN_DEBUG, ("%"TCPWNDSIZE_F" (after freeing %s)\n",
                                 (tcpwnd_size_t)pcb->snd_queuelen,
                                 dbg_list_name));
    if (pcb->snd_queuelen != 0) {
 80141ea:	68fb      	ldr	r3, [r7, #12]
 80141ec:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 80141f0:	2b00      	cmp	r3, #0
 80141f2:	d00c      	beq.n	801420e <tcp_free_acked_segments+0x8e>
      LWIP_ASSERT("tcp_receive: valid queue length",
 80141f4:	68bb      	ldr	r3, [r7, #8]
 80141f6:	2b00      	cmp	r3, #0
 80141f8:	d109      	bne.n	801420e <tcp_free_acked_segments+0x8e>
 80141fa:	683b      	ldr	r3, [r7, #0]
 80141fc:	2b00      	cmp	r3, #0
 80141fe:	d106      	bne.n	801420e <tcp_free_acked_segments+0x8e>
 8014200:	4b17      	ldr	r3, [pc, #92]	; (8014260 <tcp_free_acked_segments+0xe0>)
 8014202:	f240 4261 	movw	r2, #1121	; 0x461
 8014206:	491a      	ldr	r1, [pc, #104]	; (8014270 <tcp_free_acked_segments+0xf0>)
 8014208:	4817      	ldr	r0, [pc, #92]	; (8014268 <tcp_free_acked_segments+0xe8>)
 801420a:	f005 fe29 	bl	8019e60 <iprintf>
  while (seg_list != NULL &&
 801420e:	68bb      	ldr	r3, [r7, #8]
 8014210:	2b00      	cmp	r3, #0
 8014212:	d020      	beq.n	8014256 <tcp_free_acked_segments+0xd6>
         TCP_SEQ_LEQ(lwip_ntohl(seg_list->tcphdr->seqno) +
 8014214:	68bb      	ldr	r3, [r7, #8]
 8014216:	68db      	ldr	r3, [r3, #12]
 8014218:	685b      	ldr	r3, [r3, #4]
 801421a:	4618      	mov	r0, r3
 801421c:	f7fb fb79 	bl	800f912 <lwip_htonl>
 8014220:	4604      	mov	r4, r0
 8014222:	68bb      	ldr	r3, [r7, #8]
 8014224:	891b      	ldrh	r3, [r3, #8]
 8014226:	461d      	mov	r5, r3
 8014228:	68bb      	ldr	r3, [r7, #8]
 801422a:	68db      	ldr	r3, [r3, #12]
 801422c:	899b      	ldrh	r3, [r3, #12]
 801422e:	b29b      	uxth	r3, r3
 8014230:	4618      	mov	r0, r3
 8014232:	f7fb fb59 	bl	800f8e8 <lwip_htons>
 8014236:	4603      	mov	r3, r0
 8014238:	b2db      	uxtb	r3, r3
 801423a:	f003 0303 	and.w	r3, r3, #3
 801423e:	2b00      	cmp	r3, #0
 8014240:	d001      	beq.n	8014246 <tcp_free_acked_segments+0xc6>
 8014242:	2301      	movs	r3, #1
 8014244:	e000      	b.n	8014248 <tcp_free_acked_segments+0xc8>
 8014246:	2300      	movs	r3, #0
 8014248:	442b      	add	r3, r5
 801424a:	18e2      	adds	r2, r4, r3
 801424c:	4b09      	ldr	r3, [pc, #36]	; (8014274 <tcp_free_acked_segments+0xf4>)
 801424e:	681b      	ldr	r3, [r3, #0]
 8014250:	1ad3      	subs	r3, r2, r3
  while (seg_list != NULL &&
 8014252:	2b00      	cmp	r3, #0
 8014254:	dd9c      	ble.n	8014190 <tcp_free_acked_segments+0x10>
                  seg_list != NULL || dbg_other_seg_list != NULL);
    }
  }
  return seg_list;
 8014256:	68bb      	ldr	r3, [r7, #8]
}
 8014258:	4618      	mov	r0, r3
 801425a:	3718      	adds	r7, #24
 801425c:	46bd      	mov	sp, r7
 801425e:	bdb0      	pop	{r4, r5, r7, pc}
 8014260:	0801dbec 	.word	0x0801dbec
 8014264:	0801ded4 	.word	0x0801ded4
 8014268:	0801dc38 	.word	0x0801dc38
 801426c:	20007114 	.word	0x20007114
 8014270:	0801defc 	.word	0x0801defc
 8014274:	20007110 	.word	0x20007110

08014278 <tcp_receive>:
 *
 * Called from tcp_process().
 */
static void
tcp_receive(struct tcp_pcb *pcb)
{
 8014278:	b5b0      	push	{r4, r5, r7, lr}
 801427a:	b094      	sub	sp, #80	; 0x50
 801427c:	af00      	add	r7, sp, #0
 801427e:	6078      	str	r0, [r7, #4]
  s16_t m;
  u32_t right_wnd_edge;
  int found_dupack = 0;
 8014280:	2300      	movs	r3, #0
 8014282:	64bb      	str	r3, [r7, #72]	; 0x48

  LWIP_ASSERT("tcp_receive: invalid pcb", pcb != NULL);
 8014284:	687b      	ldr	r3, [r7, #4]
 8014286:	2b00      	cmp	r3, #0
 8014288:	d106      	bne.n	8014298 <tcp_receive+0x20>
 801428a:	4b91      	ldr	r3, [pc, #580]	; (80144d0 <tcp_receive+0x258>)
 801428c:	f240 427b 	movw	r2, #1147	; 0x47b
 8014290:	4990      	ldr	r1, [pc, #576]	; (80144d4 <tcp_receive+0x25c>)
 8014292:	4891      	ldr	r0, [pc, #580]	; (80144d8 <tcp_receive+0x260>)
 8014294:	f005 fde4 	bl	8019e60 <iprintf>
  LWIP_ASSERT("tcp_receive: wrong state", pcb->state >= ESTABLISHED);
 8014298:	687b      	ldr	r3, [r7, #4]
 801429a:	7d1b      	ldrb	r3, [r3, #20]
 801429c:	2b03      	cmp	r3, #3
 801429e:	d806      	bhi.n	80142ae <tcp_receive+0x36>
 80142a0:	4b8b      	ldr	r3, [pc, #556]	; (80144d0 <tcp_receive+0x258>)
 80142a2:	f240 427c 	movw	r2, #1148	; 0x47c
 80142a6:	498d      	ldr	r1, [pc, #564]	; (80144dc <tcp_receive+0x264>)
 80142a8:	488b      	ldr	r0, [pc, #556]	; (80144d8 <tcp_receive+0x260>)
 80142aa:	f005 fdd9 	bl	8019e60 <iprintf>

  if (flags & TCP_ACK) {
 80142ae:	4b8c      	ldr	r3, [pc, #560]	; (80144e0 <tcp_receive+0x268>)
 80142b0:	781b      	ldrb	r3, [r3, #0]
 80142b2:	f003 0310 	and.w	r3, r3, #16
 80142b6:	2b00      	cmp	r3, #0
 80142b8:	f000 8264 	beq.w	8014784 <tcp_receive+0x50c>
    right_wnd_edge = pcb->snd_wnd + pcb->snd_wl2;
 80142bc:	687b      	ldr	r3, [r7, #4]
 80142be:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 80142c2:	461a      	mov	r2, r3
 80142c4:	687b      	ldr	r3, [r7, #4]
 80142c6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80142c8:	4413      	add	r3, r2
 80142ca:	633b      	str	r3, [r7, #48]	; 0x30

    /* Update window. */
    if (TCP_SEQ_LT(pcb->snd_wl1, seqno) ||
 80142cc:	687b      	ldr	r3, [r7, #4]
 80142ce:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80142d0:	4b84      	ldr	r3, [pc, #528]	; (80144e4 <tcp_receive+0x26c>)
 80142d2:	681b      	ldr	r3, [r3, #0]
 80142d4:	1ad3      	subs	r3, r2, r3
 80142d6:	2b00      	cmp	r3, #0
 80142d8:	db1b      	blt.n	8014312 <tcp_receive+0x9a>
        (pcb->snd_wl1 == seqno && TCP_SEQ_LT(pcb->snd_wl2, ackno)) ||
 80142da:	687b      	ldr	r3, [r7, #4]
 80142dc:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80142de:	4b81      	ldr	r3, [pc, #516]	; (80144e4 <tcp_receive+0x26c>)
 80142e0:	681b      	ldr	r3, [r3, #0]
    if (TCP_SEQ_LT(pcb->snd_wl1, seqno) ||
 80142e2:	429a      	cmp	r2, r3
 80142e4:	d106      	bne.n	80142f4 <tcp_receive+0x7c>
        (pcb->snd_wl1 == seqno && TCP_SEQ_LT(pcb->snd_wl2, ackno)) ||
 80142e6:	687b      	ldr	r3, [r7, #4]
 80142e8:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 80142ea:	4b7f      	ldr	r3, [pc, #508]	; (80144e8 <tcp_receive+0x270>)
 80142ec:	681b      	ldr	r3, [r3, #0]
 80142ee:	1ad3      	subs	r3, r2, r3
 80142f0:	2b00      	cmp	r3, #0
 80142f2:	db0e      	blt.n	8014312 <tcp_receive+0x9a>
        (pcb->snd_wl2 == ackno && (u32_t)SND_WND_SCALE(pcb, tcphdr->wnd) > pcb->snd_wnd)) {
 80142f4:	687b      	ldr	r3, [r7, #4]
 80142f6:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 80142f8:	4b7b      	ldr	r3, [pc, #492]	; (80144e8 <tcp_receive+0x270>)
 80142fa:	681b      	ldr	r3, [r3, #0]
        (pcb->snd_wl1 == seqno && TCP_SEQ_LT(pcb->snd_wl2, ackno)) ||
 80142fc:	429a      	cmp	r2, r3
 80142fe:	d125      	bne.n	801434c <tcp_receive+0xd4>
        (pcb->snd_wl2 == ackno && (u32_t)SND_WND_SCALE(pcb, tcphdr->wnd) > pcb->snd_wnd)) {
 8014300:	4b7a      	ldr	r3, [pc, #488]	; (80144ec <tcp_receive+0x274>)
 8014302:	681b      	ldr	r3, [r3, #0]
 8014304:	89db      	ldrh	r3, [r3, #14]
 8014306:	b29a      	uxth	r2, r3
 8014308:	687b      	ldr	r3, [r7, #4]
 801430a:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 801430e:	429a      	cmp	r2, r3
 8014310:	d91c      	bls.n	801434c <tcp_receive+0xd4>
      pcb->snd_wnd = SND_WND_SCALE(pcb, tcphdr->wnd);
 8014312:	4b76      	ldr	r3, [pc, #472]	; (80144ec <tcp_receive+0x274>)
 8014314:	681b      	ldr	r3, [r3, #0]
 8014316:	89db      	ldrh	r3, [r3, #14]
 8014318:	b29a      	uxth	r2, r3
 801431a:	687b      	ldr	r3, [r7, #4]
 801431c:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
      /* keep track of the biggest window announced by the remote host to calculate
         the maximum segment size */
      if (pcb->snd_wnd_max < pcb->snd_wnd) {
 8014320:	687b      	ldr	r3, [r7, #4]
 8014322:	f8b3 2062 	ldrh.w	r2, [r3, #98]	; 0x62
 8014326:	687b      	ldr	r3, [r7, #4]
 8014328:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 801432c:	429a      	cmp	r2, r3
 801432e:	d205      	bcs.n	801433c <tcp_receive+0xc4>
        pcb->snd_wnd_max = pcb->snd_wnd;
 8014330:	687b      	ldr	r3, [r7, #4]
 8014332:	f8b3 2060 	ldrh.w	r2, [r3, #96]	; 0x60
 8014336:	687b      	ldr	r3, [r7, #4]
 8014338:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
      }
      pcb->snd_wl1 = seqno;
 801433c:	4b69      	ldr	r3, [pc, #420]	; (80144e4 <tcp_receive+0x26c>)
 801433e:	681a      	ldr	r2, [r3, #0]
 8014340:	687b      	ldr	r3, [r7, #4]
 8014342:	655a      	str	r2, [r3, #84]	; 0x54
      pcb->snd_wl2 = ackno;
 8014344:	4b68      	ldr	r3, [pc, #416]	; (80144e8 <tcp_receive+0x270>)
 8014346:	681a      	ldr	r2, [r3, #0]
 8014348:	687b      	ldr	r3, [r7, #4]
 801434a:	659a      	str	r2, [r3, #88]	; 0x58
     * If it only passes 1, should reset dupack counter
     *
     */

    /* Clause 1 */
    if (TCP_SEQ_LEQ(ackno, pcb->lastack)) {
 801434c:	4b66      	ldr	r3, [pc, #408]	; (80144e8 <tcp_receive+0x270>)
 801434e:	681a      	ldr	r2, [r3, #0]
 8014350:	687b      	ldr	r3, [r7, #4]
 8014352:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8014354:	1ad3      	subs	r3, r2, r3
 8014356:	2b00      	cmp	r3, #0
 8014358:	dc58      	bgt.n	801440c <tcp_receive+0x194>
      /* Clause 2 */
      if (tcplen == 0) {
 801435a:	4b65      	ldr	r3, [pc, #404]	; (80144f0 <tcp_receive+0x278>)
 801435c:	881b      	ldrh	r3, [r3, #0]
 801435e:	2b00      	cmp	r3, #0
 8014360:	d14b      	bne.n	80143fa <tcp_receive+0x182>
        /* Clause 3 */
        if (pcb->snd_wl2 + pcb->snd_wnd == right_wnd_edge) {
 8014362:	687b      	ldr	r3, [r7, #4]
 8014364:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8014366:	687a      	ldr	r2, [r7, #4]
 8014368:	f8b2 2060 	ldrh.w	r2, [r2, #96]	; 0x60
 801436c:	4413      	add	r3, r2
 801436e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8014370:	429a      	cmp	r2, r3
 8014372:	d142      	bne.n	80143fa <tcp_receive+0x182>
          /* Clause 4 */
          if (pcb->rtime >= 0) {
 8014374:	687b      	ldr	r3, [r7, #4]
 8014376:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	; 0x30
 801437a:	2b00      	cmp	r3, #0
 801437c:	db3d      	blt.n	80143fa <tcp_receive+0x182>
            /* Clause 5 */
            if (pcb->lastack == ackno) {
 801437e:	687b      	ldr	r3, [r7, #4]
 8014380:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8014382:	4b59      	ldr	r3, [pc, #356]	; (80144e8 <tcp_receive+0x270>)
 8014384:	681b      	ldr	r3, [r3, #0]
 8014386:	429a      	cmp	r2, r3
 8014388:	d137      	bne.n	80143fa <tcp_receive+0x182>
              found_dupack = 1;
 801438a:	2301      	movs	r3, #1
 801438c:	64bb      	str	r3, [r7, #72]	; 0x48
              if ((u8_t)(pcb->dupacks + 1) > pcb->dupacks) {
 801438e:	687b      	ldr	r3, [r7, #4]
 8014390:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 8014394:	2bff      	cmp	r3, #255	; 0xff
 8014396:	d007      	beq.n	80143a8 <tcp_receive+0x130>
                ++pcb->dupacks;
 8014398:	687b      	ldr	r3, [r7, #4]
 801439a:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 801439e:	3301      	adds	r3, #1
 80143a0:	b2da      	uxtb	r2, r3
 80143a2:	687b      	ldr	r3, [r7, #4]
 80143a4:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
              }
              if (pcb->dupacks > 3) {
 80143a8:	687b      	ldr	r3, [r7, #4]
 80143aa:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 80143ae:	2b03      	cmp	r3, #3
 80143b0:	d91b      	bls.n	80143ea <tcp_receive+0x172>
                /* Inflate the congestion window */
                TCP_WND_INC(pcb->cwnd, pcb->mss);
 80143b2:	687b      	ldr	r3, [r7, #4]
 80143b4:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 80143b8:	687b      	ldr	r3, [r7, #4]
 80143ba:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 80143bc:	4413      	add	r3, r2
 80143be:	b29a      	uxth	r2, r3
 80143c0:	687b      	ldr	r3, [r7, #4]
 80143c2:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 80143c6:	429a      	cmp	r2, r3
 80143c8:	d30a      	bcc.n	80143e0 <tcp_receive+0x168>
 80143ca:	687b      	ldr	r3, [r7, #4]
 80143cc:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 80143d0:	687b      	ldr	r3, [r7, #4]
 80143d2:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 80143d4:	4413      	add	r3, r2
 80143d6:	b29a      	uxth	r2, r3
 80143d8:	687b      	ldr	r3, [r7, #4]
 80143da:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
 80143de:	e004      	b.n	80143ea <tcp_receive+0x172>
 80143e0:	687b      	ldr	r3, [r7, #4]
 80143e2:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80143e6:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
              }
              if (pcb->dupacks >= 3) {
 80143ea:	687b      	ldr	r3, [r7, #4]
 80143ec:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 80143f0:	2b02      	cmp	r3, #2
 80143f2:	d902      	bls.n	80143fa <tcp_receive+0x182>
                /* Do fast retransmit (checked via TF_INFR, not via dupacks count) */
                tcp_rexmit_fast(pcb);
 80143f4:	6878      	ldr	r0, [r7, #4]
 80143f6:	f001 feed 	bl	80161d4 <tcp_rexmit_fast>
          }
        }
      }
      /* If Clause (1) or more is true, but not a duplicate ack, reset
       * count of consecutive duplicate acks */
      if (!found_dupack) {
 80143fa:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80143fc:	2b00      	cmp	r3, #0
 80143fe:	f040 8161 	bne.w	80146c4 <tcp_receive+0x44c>
        pcb->dupacks = 0;
 8014402:	687b      	ldr	r3, [r7, #4]
 8014404:	2200      	movs	r2, #0
 8014406:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 801440a:	e15b      	b.n	80146c4 <tcp_receive+0x44c>
      }
    } else if (TCP_SEQ_BETWEEN(ackno, pcb->lastack + 1, pcb->snd_nxt)) {
 801440c:	4b36      	ldr	r3, [pc, #216]	; (80144e8 <tcp_receive+0x270>)
 801440e:	681a      	ldr	r2, [r3, #0]
 8014410:	687b      	ldr	r3, [r7, #4]
 8014412:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8014414:	1ad3      	subs	r3, r2, r3
 8014416:	3b01      	subs	r3, #1
 8014418:	2b00      	cmp	r3, #0
 801441a:	f2c0 814e 	blt.w	80146ba <tcp_receive+0x442>
 801441e:	4b32      	ldr	r3, [pc, #200]	; (80144e8 <tcp_receive+0x270>)
 8014420:	681a      	ldr	r2, [r3, #0]
 8014422:	687b      	ldr	r3, [r7, #4]
 8014424:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8014426:	1ad3      	subs	r3, r2, r3
 8014428:	2b00      	cmp	r3, #0
 801442a:	f300 8146 	bgt.w	80146ba <tcp_receive+0x442>
      tcpwnd_size_t acked;

      /* Reset the "IN Fast Retransmit" flag, since we are no longer
         in fast retransmit. Also reset the congestion window to the
         slow start threshold. */
      if (pcb->flags & TF_INFR) {
 801442e:	687b      	ldr	r3, [r7, #4]
 8014430:	8b5b      	ldrh	r3, [r3, #26]
 8014432:	f003 0304 	and.w	r3, r3, #4
 8014436:	2b00      	cmp	r3, #0
 8014438:	d010      	beq.n	801445c <tcp_receive+0x1e4>
        tcp_clear_flags(pcb, TF_INFR);
 801443a:	687b      	ldr	r3, [r7, #4]
 801443c:	8b5b      	ldrh	r3, [r3, #26]
 801443e:	f023 0304 	bic.w	r3, r3, #4
 8014442:	b29a      	uxth	r2, r3
 8014444:	687b      	ldr	r3, [r7, #4]
 8014446:	835a      	strh	r2, [r3, #26]
        pcb->cwnd = pcb->ssthresh;
 8014448:	687b      	ldr	r3, [r7, #4]
 801444a:	f8b3 204a 	ldrh.w	r2, [r3, #74]	; 0x4a
 801444e:	687b      	ldr	r3, [r7, #4]
 8014450:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
        pcb->bytes_acked = 0;
 8014454:	687b      	ldr	r3, [r7, #4]
 8014456:	2200      	movs	r2, #0
 8014458:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
      }

      /* Reset the number of retransmissions. */
      pcb->nrtx = 0;
 801445c:	687b      	ldr	r3, [r7, #4]
 801445e:	2200      	movs	r2, #0
 8014460:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

      /* Reset the retransmission time-out. */
      pcb->rto = (s16_t)((pcb->sa >> 3) + pcb->sv);
 8014464:	687b      	ldr	r3, [r7, #4]
 8014466:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	; 0x3c
 801446a:	10db      	asrs	r3, r3, #3
 801446c:	b21b      	sxth	r3, r3
 801446e:	b29a      	uxth	r2, r3
 8014470:	687b      	ldr	r3, [r7, #4]
 8014472:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	; 0x3e
 8014476:	b29b      	uxth	r3, r3
 8014478:	4413      	add	r3, r2
 801447a:	b29b      	uxth	r3, r3
 801447c:	b21a      	sxth	r2, r3
 801447e:	687b      	ldr	r3, [r7, #4]
 8014480:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

      /* Record how much data this ACK acks */
      acked = (tcpwnd_size_t)(ackno - pcb->lastack);
 8014484:	4b18      	ldr	r3, [pc, #96]	; (80144e8 <tcp_receive+0x270>)
 8014486:	681b      	ldr	r3, [r3, #0]
 8014488:	b29a      	uxth	r2, r3
 801448a:	687b      	ldr	r3, [r7, #4]
 801448c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 801448e:	b29b      	uxth	r3, r3
 8014490:	1ad3      	subs	r3, r2, r3
 8014492:	85fb      	strh	r3, [r7, #46]	; 0x2e

      /* Reset the fast retransmit variables. */
      pcb->dupacks = 0;
 8014494:	687b      	ldr	r3, [r7, #4]
 8014496:	2200      	movs	r2, #0
 8014498:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
      pcb->lastack = ackno;
 801449c:	4b12      	ldr	r3, [pc, #72]	; (80144e8 <tcp_receive+0x270>)
 801449e:	681a      	ldr	r2, [r3, #0]
 80144a0:	687b      	ldr	r3, [r7, #4]
 80144a2:	645a      	str	r2, [r3, #68]	; 0x44

      /* Update the congestion control variables (cwnd and
         ssthresh). */
      if (pcb->state >= ESTABLISHED) {
 80144a4:	687b      	ldr	r3, [r7, #4]
 80144a6:	7d1b      	ldrb	r3, [r3, #20]
 80144a8:	2b03      	cmp	r3, #3
 80144aa:	f240 8097 	bls.w	80145dc <tcp_receive+0x364>
        if (pcb->cwnd < pcb->ssthresh) {
 80144ae:	687b      	ldr	r3, [r7, #4]
 80144b0:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 80144b4:	687b      	ldr	r3, [r7, #4]
 80144b6:	f8b3 304a 	ldrh.w	r3, [r3, #74]	; 0x4a
 80144ba:	429a      	cmp	r2, r3
 80144bc:	d245      	bcs.n	801454a <tcp_receive+0x2d2>
          tcpwnd_size_t increase;
          /* limit to 1 SMSS segment during period following RTO */
          u8_t num_seg = (pcb->flags & TF_RTO) ? 1 : 2;
 80144be:	687b      	ldr	r3, [r7, #4]
 80144c0:	8b5b      	ldrh	r3, [r3, #26]
 80144c2:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80144c6:	2b00      	cmp	r3, #0
 80144c8:	d014      	beq.n	80144f4 <tcp_receive+0x27c>
 80144ca:	2301      	movs	r3, #1
 80144cc:	e013      	b.n	80144f6 <tcp_receive+0x27e>
 80144ce:	bf00      	nop
 80144d0:	0801dbec 	.word	0x0801dbec
 80144d4:	0801df1c 	.word	0x0801df1c
 80144d8:	0801dc38 	.word	0x0801dc38
 80144dc:	0801df38 	.word	0x0801df38
 80144e0:	20007118 	.word	0x20007118
 80144e4:	2000710c 	.word	0x2000710c
 80144e8:	20007110 	.word	0x20007110
 80144ec:	200070fc 	.word	0x200070fc
 80144f0:	20007116 	.word	0x20007116
 80144f4:	2302      	movs	r3, #2
 80144f6:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d
          /* RFC 3465, section 2.2 Slow Start */
          increase = LWIP_MIN(acked, (tcpwnd_size_t)(num_seg * pcb->mss));
 80144fa:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 80144fe:	b29a      	uxth	r2, r3
 8014500:	687b      	ldr	r3, [r7, #4]
 8014502:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8014504:	fb12 f303 	smulbb	r3, r2, r3
 8014508:	b29b      	uxth	r3, r3
 801450a:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 801450c:	4293      	cmp	r3, r2
 801450e:	bf28      	it	cs
 8014510:	4613      	movcs	r3, r2
 8014512:	857b      	strh	r3, [r7, #42]	; 0x2a
          TCP_WND_INC(pcb->cwnd, increase);
 8014514:	687b      	ldr	r3, [r7, #4]
 8014516:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 801451a:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 801451c:	4413      	add	r3, r2
 801451e:	b29a      	uxth	r2, r3
 8014520:	687b      	ldr	r3, [r7, #4]
 8014522:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 8014526:	429a      	cmp	r2, r3
 8014528:	d309      	bcc.n	801453e <tcp_receive+0x2c6>
 801452a:	687b      	ldr	r3, [r7, #4]
 801452c:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 8014530:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8014532:	4413      	add	r3, r2
 8014534:	b29a      	uxth	r2, r3
 8014536:	687b      	ldr	r3, [r7, #4]
 8014538:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
 801453c:	e04e      	b.n	80145dc <tcp_receive+0x364>
 801453e:	687b      	ldr	r3, [r7, #4]
 8014540:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8014544:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
 8014548:	e048      	b.n	80145dc <tcp_receive+0x364>
          LWIP_DEBUGF(TCP_CWND_DEBUG, ("tcp_receive: slow start cwnd %"TCPWNDSIZE_F"\n", pcb->cwnd));
        } else {
          /* RFC 3465, section 2.1 Congestion Avoidance */
          TCP_WND_INC(pcb->bytes_acked, acked);
 801454a:	687b      	ldr	r3, [r7, #4]
 801454c:	f8b3 206a 	ldrh.w	r2, [r3, #106]	; 0x6a
 8014550:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8014552:	4413      	add	r3, r2
 8014554:	b29a      	uxth	r2, r3
 8014556:	687b      	ldr	r3, [r7, #4]
 8014558:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 801455c:	429a      	cmp	r2, r3
 801455e:	d309      	bcc.n	8014574 <tcp_receive+0x2fc>
 8014560:	687b      	ldr	r3, [r7, #4]
 8014562:	f8b3 206a 	ldrh.w	r2, [r3, #106]	; 0x6a
 8014566:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8014568:	4413      	add	r3, r2
 801456a:	b29a      	uxth	r2, r3
 801456c:	687b      	ldr	r3, [r7, #4]
 801456e:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
 8014572:	e004      	b.n	801457e <tcp_receive+0x306>
 8014574:	687b      	ldr	r3, [r7, #4]
 8014576:	f64f 72ff 	movw	r2, #65535	; 0xffff
 801457a:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
          if (pcb->bytes_acked >= pcb->cwnd) {
 801457e:	687b      	ldr	r3, [r7, #4]
 8014580:	f8b3 206a 	ldrh.w	r2, [r3, #106]	; 0x6a
 8014584:	687b      	ldr	r3, [r7, #4]
 8014586:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 801458a:	429a      	cmp	r2, r3
 801458c:	d326      	bcc.n	80145dc <tcp_receive+0x364>
            pcb->bytes_acked = (tcpwnd_size_t)(pcb->bytes_acked - pcb->cwnd);
 801458e:	687b      	ldr	r3, [r7, #4]
 8014590:	f8b3 206a 	ldrh.w	r2, [r3, #106]	; 0x6a
 8014594:	687b      	ldr	r3, [r7, #4]
 8014596:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 801459a:	1ad3      	subs	r3, r2, r3
 801459c:	b29a      	uxth	r2, r3
 801459e:	687b      	ldr	r3, [r7, #4]
 80145a0:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
            TCP_WND_INC(pcb->cwnd, pcb->mss);
 80145a4:	687b      	ldr	r3, [r7, #4]
 80145a6:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 80145aa:	687b      	ldr	r3, [r7, #4]
 80145ac:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 80145ae:	4413      	add	r3, r2
 80145b0:	b29a      	uxth	r2, r3
 80145b2:	687b      	ldr	r3, [r7, #4]
 80145b4:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 80145b8:	429a      	cmp	r2, r3
 80145ba:	d30a      	bcc.n	80145d2 <tcp_receive+0x35a>
 80145bc:	687b      	ldr	r3, [r7, #4]
 80145be:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 80145c2:	687b      	ldr	r3, [r7, #4]
 80145c4:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 80145c6:	4413      	add	r3, r2
 80145c8:	b29a      	uxth	r2, r3
 80145ca:	687b      	ldr	r3, [r7, #4]
 80145cc:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
 80145d0:	e004      	b.n	80145dc <tcp_receive+0x364>
 80145d2:	687b      	ldr	r3, [r7, #4]
 80145d4:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80145d8:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
                                    pcb->unacked != NULL ?
                                    lwip_ntohl(pcb->unacked->tcphdr->seqno) + TCP_TCPLEN(pcb->unacked) : 0));

      /* Remove segment from the unacknowledged list if the incoming
         ACK acknowledges them. */
      pcb->unacked = tcp_free_acked_segments(pcb, pcb->unacked, "unacked", pcb->unsent);
 80145dc:	687b      	ldr	r3, [r7, #4]
 80145de:	6f19      	ldr	r1, [r3, #112]	; 0x70
 80145e0:	687b      	ldr	r3, [r7, #4]
 80145e2:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80145e4:	4a98      	ldr	r2, [pc, #608]	; (8014848 <tcp_receive+0x5d0>)
 80145e6:	6878      	ldr	r0, [r7, #4]
 80145e8:	f7ff fdca 	bl	8014180 <tcp_free_acked_segments>
 80145ec:	4602      	mov	r2, r0
 80145ee:	687b      	ldr	r3, [r7, #4]
 80145f0:	671a      	str	r2, [r3, #112]	; 0x70
         on the list are acknowledged by the ACK. This may seem
         strange since an "unsent" segment shouldn't be acked. The
         rationale is that lwIP puts all outstanding segments on the
         ->unsent list after a retransmission, so these segments may
         in fact have been sent once. */
      pcb->unsent = tcp_free_acked_segments(pcb, pcb->unsent, "unsent", pcb->unacked);
 80145f2:	687b      	ldr	r3, [r7, #4]
 80145f4:	6ed9      	ldr	r1, [r3, #108]	; 0x6c
 80145f6:	687b      	ldr	r3, [r7, #4]
 80145f8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80145fa:	4a94      	ldr	r2, [pc, #592]	; (801484c <tcp_receive+0x5d4>)
 80145fc:	6878      	ldr	r0, [r7, #4]
 80145fe:	f7ff fdbf 	bl	8014180 <tcp_free_acked_segments>
 8014602:	4602      	mov	r2, r0
 8014604:	687b      	ldr	r3, [r7, #4]
 8014606:	66da      	str	r2, [r3, #108]	; 0x6c

      /* If there's nothing left to acknowledge, stop the retransmit
         timer, otherwise reset it to start again */
      if (pcb->unacked == NULL) {
 8014608:	687b      	ldr	r3, [r7, #4]
 801460a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 801460c:	2b00      	cmp	r3, #0
 801460e:	d104      	bne.n	801461a <tcp_receive+0x3a2>
        pcb->rtime = -1;
 8014610:	687b      	ldr	r3, [r7, #4]
 8014612:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8014616:	861a      	strh	r2, [r3, #48]	; 0x30
 8014618:	e002      	b.n	8014620 <tcp_receive+0x3a8>
      } else {
        pcb->rtime = 0;
 801461a:	687b      	ldr	r3, [r7, #4]
 801461c:	2200      	movs	r2, #0
 801461e:	861a      	strh	r2, [r3, #48]	; 0x30
      }

      pcb->polltmr = 0;
 8014620:	687b      	ldr	r3, [r7, #4]
 8014622:	2200      	movs	r2, #0
 8014624:	771a      	strb	r2, [r3, #28]

#if TCP_OVERSIZE
      if (pcb->unsent == NULL) {
 8014626:	687b      	ldr	r3, [r7, #4]
 8014628:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 801462a:	2b00      	cmp	r3, #0
 801462c:	d103      	bne.n	8014636 <tcp_receive+0x3be>
        pcb->unsent_oversize = 0;
 801462e:	687b      	ldr	r3, [r7, #4]
 8014630:	2200      	movs	r2, #0
 8014632:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
        /* Inform neighbor reachability of forward progress. */
        nd6_reachability_hint(ip6_current_src_addr());
      }
#endif /* LWIP_IPV6 && LWIP_ND6_TCP_REACHABILITY_HINTS*/

      pcb->snd_buf = (tcpwnd_size_t)(pcb->snd_buf + recv_acked);
 8014636:	687b      	ldr	r3, [r7, #4]
 8014638:	f8b3 2064 	ldrh.w	r2, [r3, #100]	; 0x64
 801463c:	4b84      	ldr	r3, [pc, #528]	; (8014850 <tcp_receive+0x5d8>)
 801463e:	881b      	ldrh	r3, [r3, #0]
 8014640:	4413      	add	r3, r2
 8014642:	b29a      	uxth	r2, r3
 8014644:	687b      	ldr	r3, [r7, #4]
 8014646:	f8a3 2064 	strh.w	r2, [r3, #100]	; 0x64
      /* check if this ACK ends our retransmission of in-flight data */
      if (pcb->flags & TF_RTO) {
 801464a:	687b      	ldr	r3, [r7, #4]
 801464c:	8b5b      	ldrh	r3, [r3, #26]
 801464e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8014652:	2b00      	cmp	r3, #0
 8014654:	d035      	beq.n	80146c2 <tcp_receive+0x44a>
        /* RTO is done if
            1) both queues are empty or
            2) unacked is empty and unsent head contains data not part of RTO or
            3) unacked head contains data not part of RTO */
        if (pcb->unacked == NULL) {
 8014656:	687b      	ldr	r3, [r7, #4]
 8014658:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 801465a:	2b00      	cmp	r3, #0
 801465c:	d118      	bne.n	8014690 <tcp_receive+0x418>
          if ((pcb->unsent == NULL) ||
 801465e:	687b      	ldr	r3, [r7, #4]
 8014660:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8014662:	2b00      	cmp	r3, #0
 8014664:	d00c      	beq.n	8014680 <tcp_receive+0x408>
              (TCP_SEQ_LEQ(pcb->rto_end, lwip_ntohl(pcb->unsent->tcphdr->seqno)))) {
 8014666:	687b      	ldr	r3, [r7, #4]
 8014668:	6cdc      	ldr	r4, [r3, #76]	; 0x4c
 801466a:	687b      	ldr	r3, [r7, #4]
 801466c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 801466e:	68db      	ldr	r3, [r3, #12]
 8014670:	685b      	ldr	r3, [r3, #4]
 8014672:	4618      	mov	r0, r3
 8014674:	f7fb f94d 	bl	800f912 <lwip_htonl>
 8014678:	4603      	mov	r3, r0
 801467a:	1ae3      	subs	r3, r4, r3
          if ((pcb->unsent == NULL) ||
 801467c:	2b00      	cmp	r3, #0
 801467e:	dc20      	bgt.n	80146c2 <tcp_receive+0x44a>
            tcp_clear_flags(pcb, TF_RTO);
 8014680:	687b      	ldr	r3, [r7, #4]
 8014682:	8b5b      	ldrh	r3, [r3, #26]
 8014684:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8014688:	b29a      	uxth	r2, r3
 801468a:	687b      	ldr	r3, [r7, #4]
 801468c:	835a      	strh	r2, [r3, #26]
    } else if (TCP_SEQ_BETWEEN(ackno, pcb->lastack + 1, pcb->snd_nxt)) {
 801468e:	e018      	b.n	80146c2 <tcp_receive+0x44a>
          }
        } else if (TCP_SEQ_LEQ(pcb->rto_end, lwip_ntohl(pcb->unacked->tcphdr->seqno))) {
 8014690:	687b      	ldr	r3, [r7, #4]
 8014692:	6cdc      	ldr	r4, [r3, #76]	; 0x4c
 8014694:	687b      	ldr	r3, [r7, #4]
 8014696:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8014698:	68db      	ldr	r3, [r3, #12]
 801469a:	685b      	ldr	r3, [r3, #4]
 801469c:	4618      	mov	r0, r3
 801469e:	f7fb f938 	bl	800f912 <lwip_htonl>
 80146a2:	4603      	mov	r3, r0
 80146a4:	1ae3      	subs	r3, r4, r3
 80146a6:	2b00      	cmp	r3, #0
 80146a8:	dc0b      	bgt.n	80146c2 <tcp_receive+0x44a>
          tcp_clear_flags(pcb, TF_RTO);
 80146aa:	687b      	ldr	r3, [r7, #4]
 80146ac:	8b5b      	ldrh	r3, [r3, #26]
 80146ae:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80146b2:	b29a      	uxth	r2, r3
 80146b4:	687b      	ldr	r3, [r7, #4]
 80146b6:	835a      	strh	r2, [r3, #26]
    } else if (TCP_SEQ_BETWEEN(ackno, pcb->lastack + 1, pcb->snd_nxt)) {
 80146b8:	e003      	b.n	80146c2 <tcp_receive+0x44a>
        }
      }
      /* End of ACK for new data processing. */
    } else {
      /* Out of sequence ACK, didn't really ack anything */
      tcp_send_empty_ack(pcb);
 80146ba:	6878      	ldr	r0, [r7, #4]
 80146bc:	f001 ff76 	bl	80165ac <tcp_send_empty_ack>
 80146c0:	e000      	b.n	80146c4 <tcp_receive+0x44c>
    } else if (TCP_SEQ_BETWEEN(ackno, pcb->lastack + 1, pcb->snd_nxt)) {
 80146c2:	bf00      	nop
                                pcb->rttest, pcb->rtseq, ackno));

    /* RTT estimation calculations. This is done by checking if the
       incoming segment acknowledges the segment we use to take a
       round-trip time measurement. */
    if (pcb->rttest && TCP_SEQ_LT(pcb->rtseq, ackno)) {
 80146c4:	687b      	ldr	r3, [r7, #4]
 80146c6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80146c8:	2b00      	cmp	r3, #0
 80146ca:	d05b      	beq.n	8014784 <tcp_receive+0x50c>
 80146cc:	687b      	ldr	r3, [r7, #4]
 80146ce:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80146d0:	4b60      	ldr	r3, [pc, #384]	; (8014854 <tcp_receive+0x5dc>)
 80146d2:	681b      	ldr	r3, [r3, #0]
 80146d4:	1ad3      	subs	r3, r2, r3
 80146d6:	2b00      	cmp	r3, #0
 80146d8:	da54      	bge.n	8014784 <tcp_receive+0x50c>
      /* diff between this shouldn't exceed 32K since this are tcp timer ticks
         and a round-trip shouldn't be that long... */
      m = (s16_t)(tcp_ticks - pcb->rttest);
 80146da:	4b5f      	ldr	r3, [pc, #380]	; (8014858 <tcp_receive+0x5e0>)
 80146dc:	681b      	ldr	r3, [r3, #0]
 80146de:	b29a      	uxth	r2, r3
 80146e0:	687b      	ldr	r3, [r7, #4]
 80146e2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80146e4:	b29b      	uxth	r3, r3
 80146e6:	1ad3      	subs	r3, r2, r3
 80146e8:	b29b      	uxth	r3, r3
 80146ea:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e

      LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_receive: experienced rtt %"U16_F" ticks (%"U16_F" msec).\n",
                                  m, (u16_t)(m * TCP_SLOW_INTERVAL)));

      /* This is taken directly from VJs original code in his paper */
      m = (s16_t)(m - (pcb->sa >> 3));
 80146ee:	f8b7 204e 	ldrh.w	r2, [r7, #78]	; 0x4e
 80146f2:	687b      	ldr	r3, [r7, #4]
 80146f4:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	; 0x3c
 80146f8:	10db      	asrs	r3, r3, #3
 80146fa:	b21b      	sxth	r3, r3
 80146fc:	b29b      	uxth	r3, r3
 80146fe:	1ad3      	subs	r3, r2, r3
 8014700:	b29b      	uxth	r3, r3
 8014702:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
      pcb->sa = (s16_t)(pcb->sa + m);
 8014706:	687b      	ldr	r3, [r7, #4]
 8014708:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	; 0x3c
 801470c:	b29a      	uxth	r2, r3
 801470e:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8014712:	4413      	add	r3, r2
 8014714:	b29b      	uxth	r3, r3
 8014716:	b21a      	sxth	r2, r3
 8014718:	687b      	ldr	r3, [r7, #4]
 801471a:	879a      	strh	r2, [r3, #60]	; 0x3c
      if (m < 0) {
 801471c:	f9b7 304e 	ldrsh.w	r3, [r7, #78]	; 0x4e
 8014720:	2b00      	cmp	r3, #0
 8014722:	da05      	bge.n	8014730 <tcp_receive+0x4b8>
        m = (s16_t) - m;
 8014724:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8014728:	425b      	negs	r3, r3
 801472a:	b29b      	uxth	r3, r3
 801472c:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
      }
      m = (s16_t)(m - (pcb->sv >> 2));
 8014730:	f8b7 204e 	ldrh.w	r2, [r7, #78]	; 0x4e
 8014734:	687b      	ldr	r3, [r7, #4]
 8014736:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	; 0x3e
 801473a:	109b      	asrs	r3, r3, #2
 801473c:	b21b      	sxth	r3, r3
 801473e:	b29b      	uxth	r3, r3
 8014740:	1ad3      	subs	r3, r2, r3
 8014742:	b29b      	uxth	r3, r3
 8014744:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
      pcb->sv = (s16_t)(pcb->sv + m);
 8014748:	687b      	ldr	r3, [r7, #4]
 801474a:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	; 0x3e
 801474e:	b29a      	uxth	r2, r3
 8014750:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8014754:	4413      	add	r3, r2
 8014756:	b29b      	uxth	r3, r3
 8014758:	b21a      	sxth	r2, r3
 801475a:	687b      	ldr	r3, [r7, #4]
 801475c:	87da      	strh	r2, [r3, #62]	; 0x3e
      pcb->rto = (s16_t)((pcb->sa >> 3) + pcb->sv);
 801475e:	687b      	ldr	r3, [r7, #4]
 8014760:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	; 0x3c
 8014764:	10db      	asrs	r3, r3, #3
 8014766:	b21b      	sxth	r3, r3
 8014768:	b29a      	uxth	r2, r3
 801476a:	687b      	ldr	r3, [r7, #4]
 801476c:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	; 0x3e
 8014770:	b29b      	uxth	r3, r3
 8014772:	4413      	add	r3, r2
 8014774:	b29b      	uxth	r3, r3
 8014776:	b21a      	sxth	r2, r3
 8014778:	687b      	ldr	r3, [r7, #4]
 801477a:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

      LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_receive: RTO %"U16_F" (%"U16_F" milliseconds)\n",
                                  pcb->rto, (u16_t)(pcb->rto * TCP_SLOW_INTERVAL)));

      pcb->rttest = 0;
 801477e:	687b      	ldr	r3, [r7, #4]
 8014780:	2200      	movs	r2, #0
 8014782:	635a      	str	r2, [r3, #52]	; 0x34

  /* If the incoming segment contains data, we must process it
     further unless the pcb already received a FIN.
     (RFC 793, chapter 3.9, "SEGMENT ARRIVES" in states CLOSE-WAIT, CLOSING,
     LAST-ACK and TIME-WAIT: "Ignore the segment text.") */
  if ((tcplen > 0) && (pcb->state < CLOSE_WAIT)) {
 8014784:	4b35      	ldr	r3, [pc, #212]	; (801485c <tcp_receive+0x5e4>)
 8014786:	881b      	ldrh	r3, [r3, #0]
 8014788:	2b00      	cmp	r3, #0
 801478a:	f000 84e2 	beq.w	8015152 <tcp_receive+0xeda>
 801478e:	687b      	ldr	r3, [r7, #4]
 8014790:	7d1b      	ldrb	r3, [r3, #20]
 8014792:	2b06      	cmp	r3, #6
 8014794:	f200 84dd 	bhi.w	8015152 <tcp_receive+0xeda>
       this if the sequence number of the incoming segment is less
       than rcv_nxt, and the sequence number plus the length of the
       segment is larger than rcv_nxt. */
    /*    if (TCP_SEQ_LT(seqno, pcb->rcv_nxt)) {
          if (TCP_SEQ_LT(pcb->rcv_nxt, seqno + tcplen)) {*/
    if (TCP_SEQ_BETWEEN(pcb->rcv_nxt, seqno + 1, seqno + tcplen - 1)) {
 8014798:	687b      	ldr	r3, [r7, #4]
 801479a:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 801479c:	4b30      	ldr	r3, [pc, #192]	; (8014860 <tcp_receive+0x5e8>)
 801479e:	681b      	ldr	r3, [r3, #0]
 80147a0:	1ad3      	subs	r3, r2, r3
 80147a2:	3b01      	subs	r3, #1
 80147a4:	2b00      	cmp	r3, #0
 80147a6:	f2c0 808f 	blt.w	80148c8 <tcp_receive+0x650>
 80147aa:	687b      	ldr	r3, [r7, #4]
 80147ac:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80147ae:	4b2b      	ldr	r3, [pc, #172]	; (801485c <tcp_receive+0x5e4>)
 80147b0:	881b      	ldrh	r3, [r3, #0]
 80147b2:	4619      	mov	r1, r3
 80147b4:	4b2a      	ldr	r3, [pc, #168]	; (8014860 <tcp_receive+0x5e8>)
 80147b6:	681b      	ldr	r3, [r3, #0]
 80147b8:	440b      	add	r3, r1
 80147ba:	1ad3      	subs	r3, r2, r3
 80147bc:	3301      	adds	r3, #1
 80147be:	2b00      	cmp	r3, #0
 80147c0:	f300 8082 	bgt.w	80148c8 <tcp_receive+0x650>

         After we are done with adjusting the pbuf pointers we must
         adjust the ->data pointer in the seg and the segment
         length.*/

      struct pbuf *p = inseg.p;
 80147c4:	4b27      	ldr	r3, [pc, #156]	; (8014864 <tcp_receive+0x5ec>)
 80147c6:	685b      	ldr	r3, [r3, #4]
 80147c8:	647b      	str	r3, [r7, #68]	; 0x44
      u32_t off32 = pcb->rcv_nxt - seqno;
 80147ca:	687b      	ldr	r3, [r7, #4]
 80147cc:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80147ce:	4b24      	ldr	r3, [pc, #144]	; (8014860 <tcp_receive+0x5e8>)
 80147d0:	681b      	ldr	r3, [r3, #0]
 80147d2:	1ad3      	subs	r3, r2, r3
 80147d4:	627b      	str	r3, [r7, #36]	; 0x24
      u16_t new_tot_len, off;
      LWIP_ASSERT("inseg.p != NULL", inseg.p);
 80147d6:	4b23      	ldr	r3, [pc, #140]	; (8014864 <tcp_receive+0x5ec>)
 80147d8:	685b      	ldr	r3, [r3, #4]
 80147da:	2b00      	cmp	r3, #0
 80147dc:	d106      	bne.n	80147ec <tcp_receive+0x574>
 80147de:	4b22      	ldr	r3, [pc, #136]	; (8014868 <tcp_receive+0x5f0>)
 80147e0:	f240 5294 	movw	r2, #1428	; 0x594
 80147e4:	4921      	ldr	r1, [pc, #132]	; (801486c <tcp_receive+0x5f4>)
 80147e6:	4822      	ldr	r0, [pc, #136]	; (8014870 <tcp_receive+0x5f8>)
 80147e8:	f005 fb3a 	bl	8019e60 <iprintf>
      LWIP_ASSERT("insane offset!", (off32 < 0xffff));
 80147ec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80147ee:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 80147f2:	4293      	cmp	r3, r2
 80147f4:	d906      	bls.n	8014804 <tcp_receive+0x58c>
 80147f6:	4b1c      	ldr	r3, [pc, #112]	; (8014868 <tcp_receive+0x5f0>)
 80147f8:	f240 5295 	movw	r2, #1429	; 0x595
 80147fc:	491d      	ldr	r1, [pc, #116]	; (8014874 <tcp_receive+0x5fc>)
 80147fe:	481c      	ldr	r0, [pc, #112]	; (8014870 <tcp_receive+0x5f8>)
 8014800:	f005 fb2e 	bl	8019e60 <iprintf>
      off = (u16_t)off32;
 8014804:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8014806:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
      LWIP_ASSERT("pbuf too short!", (((s32_t)inseg.p->tot_len) >= off));
 801480a:	4b16      	ldr	r3, [pc, #88]	; (8014864 <tcp_receive+0x5ec>)
 801480c:	685b      	ldr	r3, [r3, #4]
 801480e:	891b      	ldrh	r3, [r3, #8]
 8014810:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 8014814:	429a      	cmp	r2, r3
 8014816:	d906      	bls.n	8014826 <tcp_receive+0x5ae>
 8014818:	4b13      	ldr	r3, [pc, #76]	; (8014868 <tcp_receive+0x5f0>)
 801481a:	f240 5297 	movw	r2, #1431	; 0x597
 801481e:	4916      	ldr	r1, [pc, #88]	; (8014878 <tcp_receive+0x600>)
 8014820:	4813      	ldr	r0, [pc, #76]	; (8014870 <tcp_receive+0x5f8>)
 8014822:	f005 fb1d 	bl	8019e60 <iprintf>
      inseg.len -= off;
 8014826:	4b0f      	ldr	r3, [pc, #60]	; (8014864 <tcp_receive+0x5ec>)
 8014828:	891a      	ldrh	r2, [r3, #8]
 801482a:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 801482e:	1ad3      	subs	r3, r2, r3
 8014830:	b29a      	uxth	r2, r3
 8014832:	4b0c      	ldr	r3, [pc, #48]	; (8014864 <tcp_receive+0x5ec>)
 8014834:	811a      	strh	r2, [r3, #8]
      new_tot_len = (u16_t)(inseg.p->tot_len - off);
 8014836:	4b0b      	ldr	r3, [pc, #44]	; (8014864 <tcp_receive+0x5ec>)
 8014838:	685b      	ldr	r3, [r3, #4]
 801483a:	891a      	ldrh	r2, [r3, #8]
 801483c:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 8014840:	1ad3      	subs	r3, r2, r3
 8014842:	847b      	strh	r3, [r7, #34]	; 0x22
      while (p->len < off) {
 8014844:	e02a      	b.n	801489c <tcp_receive+0x624>
 8014846:	bf00      	nop
 8014848:	0801df54 	.word	0x0801df54
 801484c:	0801df5c 	.word	0x0801df5c
 8014850:	20007114 	.word	0x20007114
 8014854:	20007110 	.word	0x20007110
 8014858:	200070d4 	.word	0x200070d4
 801485c:	20007116 	.word	0x20007116
 8014860:	2000710c 	.word	0x2000710c
 8014864:	200070ec 	.word	0x200070ec
 8014868:	0801dbec 	.word	0x0801dbec
 801486c:	0801df64 	.word	0x0801df64
 8014870:	0801dc38 	.word	0x0801dc38
 8014874:	0801df74 	.word	0x0801df74
 8014878:	0801df84 	.word	0x0801df84
        off -= p->len;
 801487c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 801487e:	895b      	ldrh	r3, [r3, #10]
 8014880:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 8014884:	1ad3      	subs	r3, r2, r3
 8014886:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
        /* all pbufs up to and including this one have len==0, so tot_len is equal */
        p->tot_len = new_tot_len;
 801488a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 801488c:	8c7a      	ldrh	r2, [r7, #34]	; 0x22
 801488e:	811a      	strh	r2, [r3, #8]
        p->len = 0;
 8014890:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8014892:	2200      	movs	r2, #0
 8014894:	815a      	strh	r2, [r3, #10]
        p = p->next;
 8014896:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8014898:	681b      	ldr	r3, [r3, #0]
 801489a:	647b      	str	r3, [r7, #68]	; 0x44
      while (p->len < off) {
 801489c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 801489e:	895b      	ldrh	r3, [r3, #10]
 80148a0:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 80148a4:	429a      	cmp	r2, r3
 80148a6:	d8e9      	bhi.n	801487c <tcp_receive+0x604>
      }
      /* cannot fail... */
      pbuf_remove_header(p, off);
 80148a8:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 80148ac:	4619      	mov	r1, r3
 80148ae:	6c78      	ldr	r0, [r7, #68]	; 0x44
 80148b0:	f7fc fb78 	bl	8010fa4 <pbuf_remove_header>
      inseg.tcphdr->seqno = seqno = pcb->rcv_nxt;
 80148b4:	687b      	ldr	r3, [r7, #4]
 80148b6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80148b8:	4a91      	ldr	r2, [pc, #580]	; (8014b00 <tcp_receive+0x888>)
 80148ba:	6013      	str	r3, [r2, #0]
 80148bc:	4b91      	ldr	r3, [pc, #580]	; (8014b04 <tcp_receive+0x88c>)
 80148be:	68db      	ldr	r3, [r3, #12]
 80148c0:	4a8f      	ldr	r2, [pc, #572]	; (8014b00 <tcp_receive+0x888>)
 80148c2:	6812      	ldr	r2, [r2, #0]
 80148c4:	605a      	str	r2, [r3, #4]
    if (TCP_SEQ_BETWEEN(pcb->rcv_nxt, seqno + 1, seqno + tcplen - 1)) {
 80148c6:	e00d      	b.n	80148e4 <tcp_receive+0x66c>
    } else {
      if (TCP_SEQ_LT(seqno, pcb->rcv_nxt)) {
 80148c8:	4b8d      	ldr	r3, [pc, #564]	; (8014b00 <tcp_receive+0x888>)
 80148ca:	681a      	ldr	r2, [r3, #0]
 80148cc:	687b      	ldr	r3, [r7, #4]
 80148ce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80148d0:	1ad3      	subs	r3, r2, r3
 80148d2:	2b00      	cmp	r3, #0
 80148d4:	da06      	bge.n	80148e4 <tcp_receive+0x66c>
        /* the whole segment is < rcv_nxt */
        /* must be a duplicate of a packet that has already been correctly handled */

        LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_receive: duplicate seqno %"U32_F"\n", seqno));
        tcp_ack_now(pcb);
 80148d6:	687b      	ldr	r3, [r7, #4]
 80148d8:	8b5b      	ldrh	r3, [r3, #26]
 80148da:	f043 0302 	orr.w	r3, r3, #2
 80148de:	b29a      	uxth	r2, r3
 80148e0:	687b      	ldr	r3, [r7, #4]
 80148e2:	835a      	strh	r2, [r3, #26]
    }

    /* The sequence number must be within the window (above rcv_nxt
       and below rcv_nxt + rcv_wnd) in order to be further
       processed. */
    if (TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt,
 80148e4:	4b86      	ldr	r3, [pc, #536]	; (8014b00 <tcp_receive+0x888>)
 80148e6:	681a      	ldr	r2, [r3, #0]
 80148e8:	687b      	ldr	r3, [r7, #4]
 80148ea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80148ec:	1ad3      	subs	r3, r2, r3
 80148ee:	2b00      	cmp	r3, #0
 80148f0:	f2c0 842a 	blt.w	8015148 <tcp_receive+0xed0>
 80148f4:	4b82      	ldr	r3, [pc, #520]	; (8014b00 <tcp_receive+0x888>)
 80148f6:	681a      	ldr	r2, [r3, #0]
 80148f8:	687b      	ldr	r3, [r7, #4]
 80148fa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80148fc:	6879      	ldr	r1, [r7, #4]
 80148fe:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 8014900:	440b      	add	r3, r1
 8014902:	1ad3      	subs	r3, r2, r3
 8014904:	3301      	adds	r3, #1
 8014906:	2b00      	cmp	r3, #0
 8014908:	f300 841e 	bgt.w	8015148 <tcp_receive+0xed0>
                        pcb->rcv_nxt + pcb->rcv_wnd - 1)) {
      if (pcb->rcv_nxt == seqno) {
 801490c:	687b      	ldr	r3, [r7, #4]
 801490e:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8014910:	4b7b      	ldr	r3, [pc, #492]	; (8014b00 <tcp_receive+0x888>)
 8014912:	681b      	ldr	r3, [r3, #0]
 8014914:	429a      	cmp	r2, r3
 8014916:	f040 829a 	bne.w	8014e4e <tcp_receive+0xbd6>
        /* The incoming segment is the next in sequence. We check if
           we have to trim the end of the segment and update rcv_nxt
           and pass the data to the application. */
        tcplen = TCP_TCPLEN(&inseg);
 801491a:	4b7a      	ldr	r3, [pc, #488]	; (8014b04 <tcp_receive+0x88c>)
 801491c:	891c      	ldrh	r4, [r3, #8]
 801491e:	4b79      	ldr	r3, [pc, #484]	; (8014b04 <tcp_receive+0x88c>)
 8014920:	68db      	ldr	r3, [r3, #12]
 8014922:	899b      	ldrh	r3, [r3, #12]
 8014924:	b29b      	uxth	r3, r3
 8014926:	4618      	mov	r0, r3
 8014928:	f7fa ffde 	bl	800f8e8 <lwip_htons>
 801492c:	4603      	mov	r3, r0
 801492e:	b2db      	uxtb	r3, r3
 8014930:	f003 0303 	and.w	r3, r3, #3
 8014934:	2b00      	cmp	r3, #0
 8014936:	d001      	beq.n	801493c <tcp_receive+0x6c4>
 8014938:	2301      	movs	r3, #1
 801493a:	e000      	b.n	801493e <tcp_receive+0x6c6>
 801493c:	2300      	movs	r3, #0
 801493e:	4423      	add	r3, r4
 8014940:	b29a      	uxth	r2, r3
 8014942:	4b71      	ldr	r3, [pc, #452]	; (8014b08 <tcp_receive+0x890>)
 8014944:	801a      	strh	r2, [r3, #0]

        if (tcplen > pcb->rcv_wnd) {
 8014946:	687b      	ldr	r3, [r7, #4]
 8014948:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 801494a:	4b6f      	ldr	r3, [pc, #444]	; (8014b08 <tcp_receive+0x890>)
 801494c:	881b      	ldrh	r3, [r3, #0]
 801494e:	429a      	cmp	r2, r3
 8014950:	d275      	bcs.n	8014a3e <tcp_receive+0x7c6>
          LWIP_DEBUGF(TCP_INPUT_DEBUG,
                      ("tcp_receive: other end overran receive window"
                       "seqno %"U32_F" len %"U16_F" right edge %"U32_F"\n",
                       seqno, tcplen, pcb->rcv_nxt + pcb->rcv_wnd));
          if (TCPH_FLAGS(inseg.tcphdr) & TCP_FIN) {
 8014952:	4b6c      	ldr	r3, [pc, #432]	; (8014b04 <tcp_receive+0x88c>)
 8014954:	68db      	ldr	r3, [r3, #12]
 8014956:	899b      	ldrh	r3, [r3, #12]
 8014958:	b29b      	uxth	r3, r3
 801495a:	4618      	mov	r0, r3
 801495c:	f7fa ffc4 	bl	800f8e8 <lwip_htons>
 8014960:	4603      	mov	r3, r0
 8014962:	b2db      	uxtb	r3, r3
 8014964:	f003 0301 	and.w	r3, r3, #1
 8014968:	2b00      	cmp	r3, #0
 801496a:	d01f      	beq.n	80149ac <tcp_receive+0x734>
            /* Must remove the FIN from the header as we're trimming
             * that byte of sequence-space from the packet */
            TCPH_FLAGS_SET(inseg.tcphdr, TCPH_FLAGS(inseg.tcphdr) & ~(unsigned int)TCP_FIN);
 801496c:	4b65      	ldr	r3, [pc, #404]	; (8014b04 <tcp_receive+0x88c>)
 801496e:	68db      	ldr	r3, [r3, #12]
 8014970:	899b      	ldrh	r3, [r3, #12]
 8014972:	b29b      	uxth	r3, r3
 8014974:	b21b      	sxth	r3, r3
 8014976:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 801497a:	b21c      	sxth	r4, r3
 801497c:	4b61      	ldr	r3, [pc, #388]	; (8014b04 <tcp_receive+0x88c>)
 801497e:	68db      	ldr	r3, [r3, #12]
 8014980:	899b      	ldrh	r3, [r3, #12]
 8014982:	b29b      	uxth	r3, r3
 8014984:	4618      	mov	r0, r3
 8014986:	f7fa ffaf 	bl	800f8e8 <lwip_htons>
 801498a:	4603      	mov	r3, r0
 801498c:	b2db      	uxtb	r3, r3
 801498e:	b29b      	uxth	r3, r3
 8014990:	f003 033e 	and.w	r3, r3, #62	; 0x3e
 8014994:	b29b      	uxth	r3, r3
 8014996:	4618      	mov	r0, r3
 8014998:	f7fa ffa6 	bl	800f8e8 <lwip_htons>
 801499c:	4603      	mov	r3, r0
 801499e:	b21b      	sxth	r3, r3
 80149a0:	4323      	orrs	r3, r4
 80149a2:	b21a      	sxth	r2, r3
 80149a4:	4b57      	ldr	r3, [pc, #348]	; (8014b04 <tcp_receive+0x88c>)
 80149a6:	68db      	ldr	r3, [r3, #12]
 80149a8:	b292      	uxth	r2, r2
 80149aa:	819a      	strh	r2, [r3, #12]
          }
          /* Adjust length of segment to fit in the window. */
          TCPWND_CHECK16(pcb->rcv_wnd);
          inseg.len = (u16_t)pcb->rcv_wnd;
 80149ac:	687b      	ldr	r3, [r7, #4]
 80149ae:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 80149b0:	4b54      	ldr	r3, [pc, #336]	; (8014b04 <tcp_receive+0x88c>)
 80149b2:	811a      	strh	r2, [r3, #8]
          if (TCPH_FLAGS(inseg.tcphdr) & TCP_SYN) {
 80149b4:	4b53      	ldr	r3, [pc, #332]	; (8014b04 <tcp_receive+0x88c>)
 80149b6:	68db      	ldr	r3, [r3, #12]
 80149b8:	899b      	ldrh	r3, [r3, #12]
 80149ba:	b29b      	uxth	r3, r3
 80149bc:	4618      	mov	r0, r3
 80149be:	f7fa ff93 	bl	800f8e8 <lwip_htons>
 80149c2:	4603      	mov	r3, r0
 80149c4:	b2db      	uxtb	r3, r3
 80149c6:	f003 0302 	and.w	r3, r3, #2
 80149ca:	2b00      	cmp	r3, #0
 80149cc:	d005      	beq.n	80149da <tcp_receive+0x762>
            inseg.len -= 1;
 80149ce:	4b4d      	ldr	r3, [pc, #308]	; (8014b04 <tcp_receive+0x88c>)
 80149d0:	891b      	ldrh	r3, [r3, #8]
 80149d2:	3b01      	subs	r3, #1
 80149d4:	b29a      	uxth	r2, r3
 80149d6:	4b4b      	ldr	r3, [pc, #300]	; (8014b04 <tcp_receive+0x88c>)
 80149d8:	811a      	strh	r2, [r3, #8]
          }
          pbuf_realloc(inseg.p, inseg.len);
 80149da:	4b4a      	ldr	r3, [pc, #296]	; (8014b04 <tcp_receive+0x88c>)
 80149dc:	685b      	ldr	r3, [r3, #4]
 80149de:	4a49      	ldr	r2, [pc, #292]	; (8014b04 <tcp_receive+0x88c>)
 80149e0:	8912      	ldrh	r2, [r2, #8]
 80149e2:	4611      	mov	r1, r2
 80149e4:	4618      	mov	r0, r3
 80149e6:	f7fc f9df 	bl	8010da8 <pbuf_realloc>
          tcplen = TCP_TCPLEN(&inseg);
 80149ea:	4b46      	ldr	r3, [pc, #280]	; (8014b04 <tcp_receive+0x88c>)
 80149ec:	891c      	ldrh	r4, [r3, #8]
 80149ee:	4b45      	ldr	r3, [pc, #276]	; (8014b04 <tcp_receive+0x88c>)
 80149f0:	68db      	ldr	r3, [r3, #12]
 80149f2:	899b      	ldrh	r3, [r3, #12]
 80149f4:	b29b      	uxth	r3, r3
 80149f6:	4618      	mov	r0, r3
 80149f8:	f7fa ff76 	bl	800f8e8 <lwip_htons>
 80149fc:	4603      	mov	r3, r0
 80149fe:	b2db      	uxtb	r3, r3
 8014a00:	f003 0303 	and.w	r3, r3, #3
 8014a04:	2b00      	cmp	r3, #0
 8014a06:	d001      	beq.n	8014a0c <tcp_receive+0x794>
 8014a08:	2301      	movs	r3, #1
 8014a0a:	e000      	b.n	8014a0e <tcp_receive+0x796>
 8014a0c:	2300      	movs	r3, #0
 8014a0e:	4423      	add	r3, r4
 8014a10:	b29a      	uxth	r2, r3
 8014a12:	4b3d      	ldr	r3, [pc, #244]	; (8014b08 <tcp_receive+0x890>)
 8014a14:	801a      	strh	r2, [r3, #0]
          LWIP_ASSERT("tcp_receive: segment not trimmed correctly to rcv_wnd\n",
 8014a16:	4b3c      	ldr	r3, [pc, #240]	; (8014b08 <tcp_receive+0x890>)
 8014a18:	881b      	ldrh	r3, [r3, #0]
 8014a1a:	461a      	mov	r2, r3
 8014a1c:	4b38      	ldr	r3, [pc, #224]	; (8014b00 <tcp_receive+0x888>)
 8014a1e:	681b      	ldr	r3, [r3, #0]
 8014a20:	441a      	add	r2, r3
 8014a22:	687b      	ldr	r3, [r7, #4]
 8014a24:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8014a26:	6879      	ldr	r1, [r7, #4]
 8014a28:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 8014a2a:	440b      	add	r3, r1
 8014a2c:	429a      	cmp	r2, r3
 8014a2e:	d006      	beq.n	8014a3e <tcp_receive+0x7c6>
 8014a30:	4b36      	ldr	r3, [pc, #216]	; (8014b0c <tcp_receive+0x894>)
 8014a32:	f240 52cb 	movw	r2, #1483	; 0x5cb
 8014a36:	4936      	ldr	r1, [pc, #216]	; (8014b10 <tcp_receive+0x898>)
 8014a38:	4836      	ldr	r0, [pc, #216]	; (8014b14 <tcp_receive+0x89c>)
 8014a3a:	f005 fa11 	bl	8019e60 <iprintf>
        }
#if TCP_QUEUE_OOSEQ
        /* Received in-sequence data, adjust ooseq data if:
           - FIN has been received or
           - inseq overlaps with ooseq */
        if (pcb->ooseq != NULL) {
 8014a3e:	687b      	ldr	r3, [r7, #4]
 8014a40:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8014a42:	2b00      	cmp	r3, #0
 8014a44:	f000 80e7 	beq.w	8014c16 <tcp_receive+0x99e>
          if (TCPH_FLAGS(inseg.tcphdr) & TCP_FIN) {
 8014a48:	4b2e      	ldr	r3, [pc, #184]	; (8014b04 <tcp_receive+0x88c>)
 8014a4a:	68db      	ldr	r3, [r3, #12]
 8014a4c:	899b      	ldrh	r3, [r3, #12]
 8014a4e:	b29b      	uxth	r3, r3
 8014a50:	4618      	mov	r0, r3
 8014a52:	f7fa ff49 	bl	800f8e8 <lwip_htons>
 8014a56:	4603      	mov	r3, r0
 8014a58:	b2db      	uxtb	r3, r3
 8014a5a:	f003 0301 	and.w	r3, r3, #1
 8014a5e:	2b00      	cmp	r3, #0
 8014a60:	d010      	beq.n	8014a84 <tcp_receive+0x80c>
            LWIP_DEBUGF(TCP_INPUT_DEBUG,
                        ("tcp_receive: received in-order FIN, binning ooseq queue\n"));
            /* Received in-order FIN means anything that was received
             * out of order must now have been received in-order, so
             * bin the ooseq queue */
            while (pcb->ooseq != NULL) {
 8014a62:	e00a      	b.n	8014a7a <tcp_receive+0x802>
              struct tcp_seg *old_ooseq = pcb->ooseq;
 8014a64:	687b      	ldr	r3, [r7, #4]
 8014a66:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8014a68:	60fb      	str	r3, [r7, #12]
              pcb->ooseq = pcb->ooseq->next;
 8014a6a:	687b      	ldr	r3, [r7, #4]
 8014a6c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8014a6e:	681a      	ldr	r2, [r3, #0]
 8014a70:	687b      	ldr	r3, [r7, #4]
 8014a72:	675a      	str	r2, [r3, #116]	; 0x74
              tcp_seg_free(old_ooseq);
 8014a74:	68f8      	ldr	r0, [r7, #12]
 8014a76:	f7fd fd92 	bl	801259e <tcp_seg_free>
            while (pcb->ooseq != NULL) {
 8014a7a:	687b      	ldr	r3, [r7, #4]
 8014a7c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8014a7e:	2b00      	cmp	r3, #0
 8014a80:	d1f0      	bne.n	8014a64 <tcp_receive+0x7ec>
 8014a82:	e0c8      	b.n	8014c16 <tcp_receive+0x99e>
            }
          } else {
            struct tcp_seg *next = pcb->ooseq;
 8014a84:	687b      	ldr	r3, [r7, #4]
 8014a86:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8014a88:	63fb      	str	r3, [r7, #60]	; 0x3c
            /* Remove all segments on ooseq that are covered by inseg already.
             * FIN is copied from ooseq to inseg if present. */
            while (next &&
 8014a8a:	e052      	b.n	8014b32 <tcp_receive+0x8ba>
                   TCP_SEQ_GEQ(seqno + tcplen,
                               next->tcphdr->seqno + next->len)) {
              struct tcp_seg *tmp;
              /* inseg cannot have FIN here (already processed above) */
              if ((TCPH_FLAGS(next->tcphdr) & TCP_FIN) != 0 &&
 8014a8c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8014a8e:	68db      	ldr	r3, [r3, #12]
 8014a90:	899b      	ldrh	r3, [r3, #12]
 8014a92:	b29b      	uxth	r3, r3
 8014a94:	4618      	mov	r0, r3
 8014a96:	f7fa ff27 	bl	800f8e8 <lwip_htons>
 8014a9a:	4603      	mov	r3, r0
 8014a9c:	b2db      	uxtb	r3, r3
 8014a9e:	f003 0301 	and.w	r3, r3, #1
 8014aa2:	2b00      	cmp	r3, #0
 8014aa4:	d03d      	beq.n	8014b22 <tcp_receive+0x8aa>
                  (TCPH_FLAGS(inseg.tcphdr) & TCP_SYN) == 0) {
 8014aa6:	4b17      	ldr	r3, [pc, #92]	; (8014b04 <tcp_receive+0x88c>)
 8014aa8:	68db      	ldr	r3, [r3, #12]
 8014aaa:	899b      	ldrh	r3, [r3, #12]
 8014aac:	b29b      	uxth	r3, r3
 8014aae:	4618      	mov	r0, r3
 8014ab0:	f7fa ff1a 	bl	800f8e8 <lwip_htons>
 8014ab4:	4603      	mov	r3, r0
 8014ab6:	b2db      	uxtb	r3, r3
 8014ab8:	f003 0302 	and.w	r3, r3, #2
              if ((TCPH_FLAGS(next->tcphdr) & TCP_FIN) != 0 &&
 8014abc:	2b00      	cmp	r3, #0
 8014abe:	d130      	bne.n	8014b22 <tcp_receive+0x8aa>
                TCPH_SET_FLAG(inseg.tcphdr, TCP_FIN);
 8014ac0:	4b10      	ldr	r3, [pc, #64]	; (8014b04 <tcp_receive+0x88c>)
 8014ac2:	68db      	ldr	r3, [r3, #12]
 8014ac4:	899b      	ldrh	r3, [r3, #12]
 8014ac6:	b29c      	uxth	r4, r3
 8014ac8:	2001      	movs	r0, #1
 8014aca:	f7fa ff0d 	bl	800f8e8 <lwip_htons>
 8014ace:	4603      	mov	r3, r0
 8014ad0:	461a      	mov	r2, r3
 8014ad2:	4b0c      	ldr	r3, [pc, #48]	; (8014b04 <tcp_receive+0x88c>)
 8014ad4:	68db      	ldr	r3, [r3, #12]
 8014ad6:	4322      	orrs	r2, r4
 8014ad8:	b292      	uxth	r2, r2
 8014ada:	819a      	strh	r2, [r3, #12]
                tcplen = TCP_TCPLEN(&inseg);
 8014adc:	4b09      	ldr	r3, [pc, #36]	; (8014b04 <tcp_receive+0x88c>)
 8014ade:	891c      	ldrh	r4, [r3, #8]
 8014ae0:	4b08      	ldr	r3, [pc, #32]	; (8014b04 <tcp_receive+0x88c>)
 8014ae2:	68db      	ldr	r3, [r3, #12]
 8014ae4:	899b      	ldrh	r3, [r3, #12]
 8014ae6:	b29b      	uxth	r3, r3
 8014ae8:	4618      	mov	r0, r3
 8014aea:	f7fa fefd 	bl	800f8e8 <lwip_htons>
 8014aee:	4603      	mov	r3, r0
 8014af0:	b2db      	uxtb	r3, r3
 8014af2:	f003 0303 	and.w	r3, r3, #3
 8014af6:	2b00      	cmp	r3, #0
 8014af8:	d00e      	beq.n	8014b18 <tcp_receive+0x8a0>
 8014afa:	2301      	movs	r3, #1
 8014afc:	e00d      	b.n	8014b1a <tcp_receive+0x8a2>
 8014afe:	bf00      	nop
 8014b00:	2000710c 	.word	0x2000710c
 8014b04:	200070ec 	.word	0x200070ec
 8014b08:	20007116 	.word	0x20007116
 8014b0c:	0801dbec 	.word	0x0801dbec
 8014b10:	0801df94 	.word	0x0801df94
 8014b14:	0801dc38 	.word	0x0801dc38
 8014b18:	2300      	movs	r3, #0
 8014b1a:	4423      	add	r3, r4
 8014b1c:	b29a      	uxth	r2, r3
 8014b1e:	4b98      	ldr	r3, [pc, #608]	; (8014d80 <tcp_receive+0xb08>)
 8014b20:	801a      	strh	r2, [r3, #0]
              }
              tmp = next;
 8014b22:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8014b24:	613b      	str	r3, [r7, #16]
              next = next->next;
 8014b26:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8014b28:	681b      	ldr	r3, [r3, #0]
 8014b2a:	63fb      	str	r3, [r7, #60]	; 0x3c
              tcp_seg_free(tmp);
 8014b2c:	6938      	ldr	r0, [r7, #16]
 8014b2e:	f7fd fd36 	bl	801259e <tcp_seg_free>
            while (next &&
 8014b32:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8014b34:	2b00      	cmp	r3, #0
 8014b36:	d00e      	beq.n	8014b56 <tcp_receive+0x8de>
                   TCP_SEQ_GEQ(seqno + tcplen,
 8014b38:	4b91      	ldr	r3, [pc, #580]	; (8014d80 <tcp_receive+0xb08>)
 8014b3a:	881b      	ldrh	r3, [r3, #0]
 8014b3c:	461a      	mov	r2, r3
 8014b3e:	4b91      	ldr	r3, [pc, #580]	; (8014d84 <tcp_receive+0xb0c>)
 8014b40:	681b      	ldr	r3, [r3, #0]
 8014b42:	441a      	add	r2, r3
 8014b44:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8014b46:	68db      	ldr	r3, [r3, #12]
 8014b48:	685b      	ldr	r3, [r3, #4]
 8014b4a:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8014b4c:	8909      	ldrh	r1, [r1, #8]
 8014b4e:	440b      	add	r3, r1
 8014b50:	1ad3      	subs	r3, r2, r3
            while (next &&
 8014b52:	2b00      	cmp	r3, #0
 8014b54:	da9a      	bge.n	8014a8c <tcp_receive+0x814>
            }
            /* Now trim right side of inseg if it overlaps with the first
             * segment on ooseq */
            if (next &&
 8014b56:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8014b58:	2b00      	cmp	r3, #0
 8014b5a:	d059      	beq.n	8014c10 <tcp_receive+0x998>
                TCP_SEQ_GT(seqno + tcplen,
 8014b5c:	4b88      	ldr	r3, [pc, #544]	; (8014d80 <tcp_receive+0xb08>)
 8014b5e:	881b      	ldrh	r3, [r3, #0]
 8014b60:	461a      	mov	r2, r3
 8014b62:	4b88      	ldr	r3, [pc, #544]	; (8014d84 <tcp_receive+0xb0c>)
 8014b64:	681b      	ldr	r3, [r3, #0]
 8014b66:	441a      	add	r2, r3
 8014b68:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8014b6a:	68db      	ldr	r3, [r3, #12]
 8014b6c:	685b      	ldr	r3, [r3, #4]
 8014b6e:	1ad3      	subs	r3, r2, r3
            if (next &&
 8014b70:	2b00      	cmp	r3, #0
 8014b72:	dd4d      	ble.n	8014c10 <tcp_receive+0x998>
                           next->tcphdr->seqno)) {
              /* inseg cannot have FIN here (already processed above) */
              inseg.len = (u16_t)(next->tcphdr->seqno - seqno);
 8014b74:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8014b76:	68db      	ldr	r3, [r3, #12]
 8014b78:	685b      	ldr	r3, [r3, #4]
 8014b7a:	b29a      	uxth	r2, r3
 8014b7c:	4b81      	ldr	r3, [pc, #516]	; (8014d84 <tcp_receive+0xb0c>)
 8014b7e:	681b      	ldr	r3, [r3, #0]
 8014b80:	b29b      	uxth	r3, r3
 8014b82:	1ad3      	subs	r3, r2, r3
 8014b84:	b29a      	uxth	r2, r3
 8014b86:	4b80      	ldr	r3, [pc, #512]	; (8014d88 <tcp_receive+0xb10>)
 8014b88:	811a      	strh	r2, [r3, #8]
              if (TCPH_FLAGS(inseg.tcphdr) & TCP_SYN) {
 8014b8a:	4b7f      	ldr	r3, [pc, #508]	; (8014d88 <tcp_receive+0xb10>)
 8014b8c:	68db      	ldr	r3, [r3, #12]
 8014b8e:	899b      	ldrh	r3, [r3, #12]
 8014b90:	b29b      	uxth	r3, r3
 8014b92:	4618      	mov	r0, r3
 8014b94:	f7fa fea8 	bl	800f8e8 <lwip_htons>
 8014b98:	4603      	mov	r3, r0
 8014b9a:	b2db      	uxtb	r3, r3
 8014b9c:	f003 0302 	and.w	r3, r3, #2
 8014ba0:	2b00      	cmp	r3, #0
 8014ba2:	d005      	beq.n	8014bb0 <tcp_receive+0x938>
                inseg.len -= 1;
 8014ba4:	4b78      	ldr	r3, [pc, #480]	; (8014d88 <tcp_receive+0xb10>)
 8014ba6:	891b      	ldrh	r3, [r3, #8]
 8014ba8:	3b01      	subs	r3, #1
 8014baa:	b29a      	uxth	r2, r3
 8014bac:	4b76      	ldr	r3, [pc, #472]	; (8014d88 <tcp_receive+0xb10>)
 8014bae:	811a      	strh	r2, [r3, #8]
              }
              pbuf_realloc(inseg.p, inseg.len);
 8014bb0:	4b75      	ldr	r3, [pc, #468]	; (8014d88 <tcp_receive+0xb10>)
 8014bb2:	685b      	ldr	r3, [r3, #4]
 8014bb4:	4a74      	ldr	r2, [pc, #464]	; (8014d88 <tcp_receive+0xb10>)
 8014bb6:	8912      	ldrh	r2, [r2, #8]
 8014bb8:	4611      	mov	r1, r2
 8014bba:	4618      	mov	r0, r3
 8014bbc:	f7fc f8f4 	bl	8010da8 <pbuf_realloc>
              tcplen = TCP_TCPLEN(&inseg);
 8014bc0:	4b71      	ldr	r3, [pc, #452]	; (8014d88 <tcp_receive+0xb10>)
 8014bc2:	891c      	ldrh	r4, [r3, #8]
 8014bc4:	4b70      	ldr	r3, [pc, #448]	; (8014d88 <tcp_receive+0xb10>)
 8014bc6:	68db      	ldr	r3, [r3, #12]
 8014bc8:	899b      	ldrh	r3, [r3, #12]
 8014bca:	b29b      	uxth	r3, r3
 8014bcc:	4618      	mov	r0, r3
 8014bce:	f7fa fe8b 	bl	800f8e8 <lwip_htons>
 8014bd2:	4603      	mov	r3, r0
 8014bd4:	b2db      	uxtb	r3, r3
 8014bd6:	f003 0303 	and.w	r3, r3, #3
 8014bda:	2b00      	cmp	r3, #0
 8014bdc:	d001      	beq.n	8014be2 <tcp_receive+0x96a>
 8014bde:	2301      	movs	r3, #1
 8014be0:	e000      	b.n	8014be4 <tcp_receive+0x96c>
 8014be2:	2300      	movs	r3, #0
 8014be4:	4423      	add	r3, r4
 8014be6:	b29a      	uxth	r2, r3
 8014be8:	4b65      	ldr	r3, [pc, #404]	; (8014d80 <tcp_receive+0xb08>)
 8014bea:	801a      	strh	r2, [r3, #0]
              LWIP_ASSERT("tcp_receive: segment not trimmed correctly to ooseq queue\n",
 8014bec:	4b64      	ldr	r3, [pc, #400]	; (8014d80 <tcp_receive+0xb08>)
 8014bee:	881b      	ldrh	r3, [r3, #0]
 8014bf0:	461a      	mov	r2, r3
 8014bf2:	4b64      	ldr	r3, [pc, #400]	; (8014d84 <tcp_receive+0xb0c>)
 8014bf4:	681b      	ldr	r3, [r3, #0]
 8014bf6:	441a      	add	r2, r3
 8014bf8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8014bfa:	68db      	ldr	r3, [r3, #12]
 8014bfc:	685b      	ldr	r3, [r3, #4]
 8014bfe:	429a      	cmp	r2, r3
 8014c00:	d006      	beq.n	8014c10 <tcp_receive+0x998>
 8014c02:	4b62      	ldr	r3, [pc, #392]	; (8014d8c <tcp_receive+0xb14>)
 8014c04:	f240 52fc 	movw	r2, #1532	; 0x5fc
 8014c08:	4961      	ldr	r1, [pc, #388]	; (8014d90 <tcp_receive+0xb18>)
 8014c0a:	4862      	ldr	r0, [pc, #392]	; (8014d94 <tcp_receive+0xb1c>)
 8014c0c:	f005 f928 	bl	8019e60 <iprintf>
                          (seqno + tcplen) == next->tcphdr->seqno);
            }
            pcb->ooseq = next;
 8014c10:	687b      	ldr	r3, [r7, #4]
 8014c12:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8014c14:	675a      	str	r2, [r3, #116]	; 0x74
          }
        }
#endif /* TCP_QUEUE_OOSEQ */

        pcb->rcv_nxt = seqno + tcplen;
 8014c16:	4b5a      	ldr	r3, [pc, #360]	; (8014d80 <tcp_receive+0xb08>)
 8014c18:	881b      	ldrh	r3, [r3, #0]
 8014c1a:	461a      	mov	r2, r3
 8014c1c:	4b59      	ldr	r3, [pc, #356]	; (8014d84 <tcp_receive+0xb0c>)
 8014c1e:	681b      	ldr	r3, [r3, #0]
 8014c20:	441a      	add	r2, r3
 8014c22:	687b      	ldr	r3, [r7, #4]
 8014c24:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update the receiver's (our) window. */
        LWIP_ASSERT("tcp_receive: tcplen > rcv_wnd\n", pcb->rcv_wnd >= tcplen);
 8014c26:	687b      	ldr	r3, [r7, #4]
 8014c28:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 8014c2a:	4b55      	ldr	r3, [pc, #340]	; (8014d80 <tcp_receive+0xb08>)
 8014c2c:	881b      	ldrh	r3, [r3, #0]
 8014c2e:	429a      	cmp	r2, r3
 8014c30:	d206      	bcs.n	8014c40 <tcp_receive+0x9c8>
 8014c32:	4b56      	ldr	r3, [pc, #344]	; (8014d8c <tcp_receive+0xb14>)
 8014c34:	f240 6207 	movw	r2, #1543	; 0x607
 8014c38:	4957      	ldr	r1, [pc, #348]	; (8014d98 <tcp_receive+0xb20>)
 8014c3a:	4856      	ldr	r0, [pc, #344]	; (8014d94 <tcp_receive+0xb1c>)
 8014c3c:	f005 f910 	bl	8019e60 <iprintf>
        pcb->rcv_wnd -= tcplen;
 8014c40:	687b      	ldr	r3, [r7, #4]
 8014c42:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 8014c44:	4b4e      	ldr	r3, [pc, #312]	; (8014d80 <tcp_receive+0xb08>)
 8014c46:	881b      	ldrh	r3, [r3, #0]
 8014c48:	1ad3      	subs	r3, r2, r3
 8014c4a:	b29a      	uxth	r2, r3
 8014c4c:	687b      	ldr	r3, [r7, #4]
 8014c4e:	851a      	strh	r2, [r3, #40]	; 0x28

        tcp_update_rcv_ann_wnd(pcb);
 8014c50:	6878      	ldr	r0, [r7, #4]
 8014c52:	f7fc ffc1 	bl	8011bd8 <tcp_update_rcv_ann_wnd>
           chains its data on this pbuf as well.

           If the segment was a FIN, we set the TF_GOT_FIN flag that will
           be used to indicate to the application that the remote side has
           closed its end of the connection. */
        if (inseg.p->tot_len > 0) {
 8014c56:	4b4c      	ldr	r3, [pc, #304]	; (8014d88 <tcp_receive+0xb10>)
 8014c58:	685b      	ldr	r3, [r3, #4]
 8014c5a:	891b      	ldrh	r3, [r3, #8]
 8014c5c:	2b00      	cmp	r3, #0
 8014c5e:	d006      	beq.n	8014c6e <tcp_receive+0x9f6>
          recv_data = inseg.p;
 8014c60:	4b49      	ldr	r3, [pc, #292]	; (8014d88 <tcp_receive+0xb10>)
 8014c62:	685b      	ldr	r3, [r3, #4]
 8014c64:	4a4d      	ldr	r2, [pc, #308]	; (8014d9c <tcp_receive+0xb24>)
 8014c66:	6013      	str	r3, [r2, #0]
          /* Since this pbuf now is the responsibility of the
             application, we delete our reference to it so that we won't
             (mistakingly) deallocate it. */
          inseg.p = NULL;
 8014c68:	4b47      	ldr	r3, [pc, #284]	; (8014d88 <tcp_receive+0xb10>)
 8014c6a:	2200      	movs	r2, #0
 8014c6c:	605a      	str	r2, [r3, #4]
        }
        if (TCPH_FLAGS(inseg.tcphdr) & TCP_FIN) {
 8014c6e:	4b46      	ldr	r3, [pc, #280]	; (8014d88 <tcp_receive+0xb10>)
 8014c70:	68db      	ldr	r3, [r3, #12]
 8014c72:	899b      	ldrh	r3, [r3, #12]
 8014c74:	b29b      	uxth	r3, r3
 8014c76:	4618      	mov	r0, r3
 8014c78:	f7fa fe36 	bl	800f8e8 <lwip_htons>
 8014c7c:	4603      	mov	r3, r0
 8014c7e:	b2db      	uxtb	r3, r3
 8014c80:	f003 0301 	and.w	r3, r3, #1
 8014c84:	2b00      	cmp	r3, #0
 8014c86:	f000 80b8 	beq.w	8014dfa <tcp_receive+0xb82>
          LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_receive: received FIN.\n"));
          recv_flags |= TF_GOT_FIN;
 8014c8a:	4b45      	ldr	r3, [pc, #276]	; (8014da0 <tcp_receive+0xb28>)
 8014c8c:	781b      	ldrb	r3, [r3, #0]
 8014c8e:	f043 0320 	orr.w	r3, r3, #32
 8014c92:	b2da      	uxtb	r2, r3
 8014c94:	4b42      	ldr	r3, [pc, #264]	; (8014da0 <tcp_receive+0xb28>)
 8014c96:	701a      	strb	r2, [r3, #0]
        }

#if TCP_QUEUE_OOSEQ
        /* We now check if we have segments on the ->ooseq queue that
           are now in sequence. */
        while (pcb->ooseq != NULL &&
 8014c98:	e0af      	b.n	8014dfa <tcp_receive+0xb82>
               pcb->ooseq->tcphdr->seqno == pcb->rcv_nxt) {

          struct tcp_seg *cseg = pcb->ooseq;
 8014c9a:	687b      	ldr	r3, [r7, #4]
 8014c9c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8014c9e:	60bb      	str	r3, [r7, #8]
          seqno = pcb->ooseq->tcphdr->seqno;
 8014ca0:	687b      	ldr	r3, [r7, #4]
 8014ca2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8014ca4:	68db      	ldr	r3, [r3, #12]
 8014ca6:	685b      	ldr	r3, [r3, #4]
 8014ca8:	4a36      	ldr	r2, [pc, #216]	; (8014d84 <tcp_receive+0xb0c>)
 8014caa:	6013      	str	r3, [r2, #0]

          pcb->rcv_nxt += TCP_TCPLEN(cseg);
 8014cac:	68bb      	ldr	r3, [r7, #8]
 8014cae:	891b      	ldrh	r3, [r3, #8]
 8014cb0:	461c      	mov	r4, r3
 8014cb2:	68bb      	ldr	r3, [r7, #8]
 8014cb4:	68db      	ldr	r3, [r3, #12]
 8014cb6:	899b      	ldrh	r3, [r3, #12]
 8014cb8:	b29b      	uxth	r3, r3
 8014cba:	4618      	mov	r0, r3
 8014cbc:	f7fa fe14 	bl	800f8e8 <lwip_htons>
 8014cc0:	4603      	mov	r3, r0
 8014cc2:	b2db      	uxtb	r3, r3
 8014cc4:	f003 0303 	and.w	r3, r3, #3
 8014cc8:	2b00      	cmp	r3, #0
 8014cca:	d001      	beq.n	8014cd0 <tcp_receive+0xa58>
 8014ccc:	2301      	movs	r3, #1
 8014cce:	e000      	b.n	8014cd2 <tcp_receive+0xa5a>
 8014cd0:	2300      	movs	r3, #0
 8014cd2:	191a      	adds	r2, r3, r4
 8014cd4:	687b      	ldr	r3, [r7, #4]
 8014cd6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8014cd8:	441a      	add	r2, r3
 8014cda:	687b      	ldr	r3, [r7, #4]
 8014cdc:	625a      	str	r2, [r3, #36]	; 0x24
          LWIP_ASSERT("tcp_receive: ooseq tcplen > rcv_wnd\n",
 8014cde:	687b      	ldr	r3, [r7, #4]
 8014ce0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8014ce2:	461c      	mov	r4, r3
 8014ce4:	68bb      	ldr	r3, [r7, #8]
 8014ce6:	891b      	ldrh	r3, [r3, #8]
 8014ce8:	461d      	mov	r5, r3
 8014cea:	68bb      	ldr	r3, [r7, #8]
 8014cec:	68db      	ldr	r3, [r3, #12]
 8014cee:	899b      	ldrh	r3, [r3, #12]
 8014cf0:	b29b      	uxth	r3, r3
 8014cf2:	4618      	mov	r0, r3
 8014cf4:	f7fa fdf8 	bl	800f8e8 <lwip_htons>
 8014cf8:	4603      	mov	r3, r0
 8014cfa:	b2db      	uxtb	r3, r3
 8014cfc:	f003 0303 	and.w	r3, r3, #3
 8014d00:	2b00      	cmp	r3, #0
 8014d02:	d001      	beq.n	8014d08 <tcp_receive+0xa90>
 8014d04:	2301      	movs	r3, #1
 8014d06:	e000      	b.n	8014d0a <tcp_receive+0xa92>
 8014d08:	2300      	movs	r3, #0
 8014d0a:	442b      	add	r3, r5
 8014d0c:	429c      	cmp	r4, r3
 8014d0e:	d206      	bcs.n	8014d1e <tcp_receive+0xaa6>
 8014d10:	4b1e      	ldr	r3, [pc, #120]	; (8014d8c <tcp_receive+0xb14>)
 8014d12:	f240 622b 	movw	r2, #1579	; 0x62b
 8014d16:	4923      	ldr	r1, [pc, #140]	; (8014da4 <tcp_receive+0xb2c>)
 8014d18:	481e      	ldr	r0, [pc, #120]	; (8014d94 <tcp_receive+0xb1c>)
 8014d1a:	f005 f8a1 	bl	8019e60 <iprintf>
                      pcb->rcv_wnd >= TCP_TCPLEN(cseg));
          pcb->rcv_wnd -= TCP_TCPLEN(cseg);
 8014d1e:	68bb      	ldr	r3, [r7, #8]
 8014d20:	891b      	ldrh	r3, [r3, #8]
 8014d22:	461c      	mov	r4, r3
 8014d24:	68bb      	ldr	r3, [r7, #8]
 8014d26:	68db      	ldr	r3, [r3, #12]
 8014d28:	899b      	ldrh	r3, [r3, #12]
 8014d2a:	b29b      	uxth	r3, r3
 8014d2c:	4618      	mov	r0, r3
 8014d2e:	f7fa fddb 	bl	800f8e8 <lwip_htons>
 8014d32:	4603      	mov	r3, r0
 8014d34:	b2db      	uxtb	r3, r3
 8014d36:	f003 0303 	and.w	r3, r3, #3
 8014d3a:	2b00      	cmp	r3, #0
 8014d3c:	d001      	beq.n	8014d42 <tcp_receive+0xaca>
 8014d3e:	2301      	movs	r3, #1
 8014d40:	e000      	b.n	8014d44 <tcp_receive+0xacc>
 8014d42:	2300      	movs	r3, #0
 8014d44:	1919      	adds	r1, r3, r4
 8014d46:	687b      	ldr	r3, [r7, #4]
 8014d48:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 8014d4a:	b28b      	uxth	r3, r1
 8014d4c:	1ad3      	subs	r3, r2, r3
 8014d4e:	b29a      	uxth	r2, r3
 8014d50:	687b      	ldr	r3, [r7, #4]
 8014d52:	851a      	strh	r2, [r3, #40]	; 0x28

          tcp_update_rcv_ann_wnd(pcb);
 8014d54:	6878      	ldr	r0, [r7, #4]
 8014d56:	f7fc ff3f 	bl	8011bd8 <tcp_update_rcv_ann_wnd>

          if (cseg->p->tot_len > 0) {
 8014d5a:	68bb      	ldr	r3, [r7, #8]
 8014d5c:	685b      	ldr	r3, [r3, #4]
 8014d5e:	891b      	ldrh	r3, [r3, #8]
 8014d60:	2b00      	cmp	r3, #0
 8014d62:	d028      	beq.n	8014db6 <tcp_receive+0xb3e>
            /* Chain this pbuf onto the pbuf that we will pass to
               the application. */
            /* With window scaling, this can overflow recv_data->tot_len, but
               that's not a problem since we explicitly fix that before passing
               recv_data to the application. */
            if (recv_data) {
 8014d64:	4b0d      	ldr	r3, [pc, #52]	; (8014d9c <tcp_receive+0xb24>)
 8014d66:	681b      	ldr	r3, [r3, #0]
 8014d68:	2b00      	cmp	r3, #0
 8014d6a:	d01d      	beq.n	8014da8 <tcp_receive+0xb30>
              pbuf_cat(recv_data, cseg->p);
 8014d6c:	4b0b      	ldr	r3, [pc, #44]	; (8014d9c <tcp_receive+0xb24>)
 8014d6e:	681a      	ldr	r2, [r3, #0]
 8014d70:	68bb      	ldr	r3, [r7, #8]
 8014d72:	685b      	ldr	r3, [r3, #4]
 8014d74:	4619      	mov	r1, r3
 8014d76:	4610      	mov	r0, r2
 8014d78:	f7fc fa5c 	bl	8011234 <pbuf_cat>
 8014d7c:	e018      	b.n	8014db0 <tcp_receive+0xb38>
 8014d7e:	bf00      	nop
 8014d80:	20007116 	.word	0x20007116
 8014d84:	2000710c 	.word	0x2000710c
 8014d88:	200070ec 	.word	0x200070ec
 8014d8c:	0801dbec 	.word	0x0801dbec
 8014d90:	0801dfcc 	.word	0x0801dfcc
 8014d94:	0801dc38 	.word	0x0801dc38
 8014d98:	0801e008 	.word	0x0801e008
 8014d9c:	2000711c 	.word	0x2000711c
 8014da0:	20007119 	.word	0x20007119
 8014da4:	0801e028 	.word	0x0801e028
            } else {
              recv_data = cseg->p;
 8014da8:	68bb      	ldr	r3, [r7, #8]
 8014daa:	685b      	ldr	r3, [r3, #4]
 8014dac:	4a70      	ldr	r2, [pc, #448]	; (8014f70 <tcp_receive+0xcf8>)
 8014dae:	6013      	str	r3, [r2, #0]
            }
            cseg->p = NULL;
 8014db0:	68bb      	ldr	r3, [r7, #8]
 8014db2:	2200      	movs	r2, #0
 8014db4:	605a      	str	r2, [r3, #4]
          }
          if (TCPH_FLAGS(cseg->tcphdr) & TCP_FIN) {
 8014db6:	68bb      	ldr	r3, [r7, #8]
 8014db8:	68db      	ldr	r3, [r3, #12]
 8014dba:	899b      	ldrh	r3, [r3, #12]
 8014dbc:	b29b      	uxth	r3, r3
 8014dbe:	4618      	mov	r0, r3
 8014dc0:	f7fa fd92 	bl	800f8e8 <lwip_htons>
 8014dc4:	4603      	mov	r3, r0
 8014dc6:	b2db      	uxtb	r3, r3
 8014dc8:	f003 0301 	and.w	r3, r3, #1
 8014dcc:	2b00      	cmp	r3, #0
 8014dce:	d00d      	beq.n	8014dec <tcp_receive+0xb74>
            LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_receive: dequeued FIN.\n"));
            recv_flags |= TF_GOT_FIN;
 8014dd0:	4b68      	ldr	r3, [pc, #416]	; (8014f74 <tcp_receive+0xcfc>)
 8014dd2:	781b      	ldrb	r3, [r3, #0]
 8014dd4:	f043 0320 	orr.w	r3, r3, #32
 8014dd8:	b2da      	uxtb	r2, r3
 8014dda:	4b66      	ldr	r3, [pc, #408]	; (8014f74 <tcp_receive+0xcfc>)
 8014ddc:	701a      	strb	r2, [r3, #0]
            if (pcb->state == ESTABLISHED) { /* force passive close or we can move to active close */
 8014dde:	687b      	ldr	r3, [r7, #4]
 8014de0:	7d1b      	ldrb	r3, [r3, #20]
 8014de2:	2b04      	cmp	r3, #4
 8014de4:	d102      	bne.n	8014dec <tcp_receive+0xb74>
              pcb->state = CLOSE_WAIT;
 8014de6:	687b      	ldr	r3, [r7, #4]
 8014de8:	2207      	movs	r2, #7
 8014dea:	751a      	strb	r2, [r3, #20]
            }
          }

          pcb->ooseq = cseg->next;
 8014dec:	68bb      	ldr	r3, [r7, #8]
 8014dee:	681a      	ldr	r2, [r3, #0]
 8014df0:	687b      	ldr	r3, [r7, #4]
 8014df2:	675a      	str	r2, [r3, #116]	; 0x74
          tcp_seg_free(cseg);
 8014df4:	68b8      	ldr	r0, [r7, #8]
 8014df6:	f7fd fbd2 	bl	801259e <tcp_seg_free>
        while (pcb->ooseq != NULL &&
 8014dfa:	687b      	ldr	r3, [r7, #4]
 8014dfc:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8014dfe:	2b00      	cmp	r3, #0
 8014e00:	d008      	beq.n	8014e14 <tcp_receive+0xb9c>
               pcb->ooseq->tcphdr->seqno == pcb->rcv_nxt) {
 8014e02:	687b      	ldr	r3, [r7, #4]
 8014e04:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8014e06:	68db      	ldr	r3, [r3, #12]
 8014e08:	685a      	ldr	r2, [r3, #4]
 8014e0a:	687b      	ldr	r3, [r7, #4]
 8014e0c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        while (pcb->ooseq != NULL &&
 8014e0e:	429a      	cmp	r2, r3
 8014e10:	f43f af43 	beq.w	8014c9a <tcp_receive+0xa22>
#endif /* LWIP_TCP_SACK_OUT */
#endif /* TCP_QUEUE_OOSEQ */


        /* Acknowledge the segment(s). */
        tcp_ack(pcb);
 8014e14:	687b      	ldr	r3, [r7, #4]
 8014e16:	8b5b      	ldrh	r3, [r3, #26]
 8014e18:	f003 0301 	and.w	r3, r3, #1
 8014e1c:	2b00      	cmp	r3, #0
 8014e1e:	d00e      	beq.n	8014e3e <tcp_receive+0xbc6>
 8014e20:	687b      	ldr	r3, [r7, #4]
 8014e22:	8b5b      	ldrh	r3, [r3, #26]
 8014e24:	f023 0301 	bic.w	r3, r3, #1
 8014e28:	b29a      	uxth	r2, r3
 8014e2a:	687b      	ldr	r3, [r7, #4]
 8014e2c:	835a      	strh	r2, [r3, #26]
 8014e2e:	687b      	ldr	r3, [r7, #4]
 8014e30:	8b5b      	ldrh	r3, [r3, #26]
 8014e32:	f043 0302 	orr.w	r3, r3, #2
 8014e36:	b29a      	uxth	r2, r3
 8014e38:	687b      	ldr	r3, [r7, #4]
 8014e3a:	835a      	strh	r2, [r3, #26]
      if (pcb->rcv_nxt == seqno) {
 8014e3c:	e188      	b.n	8015150 <tcp_receive+0xed8>
        tcp_ack(pcb);
 8014e3e:	687b      	ldr	r3, [r7, #4]
 8014e40:	8b5b      	ldrh	r3, [r3, #26]
 8014e42:	f043 0301 	orr.w	r3, r3, #1
 8014e46:	b29a      	uxth	r2, r3
 8014e48:	687b      	ldr	r3, [r7, #4]
 8014e4a:	835a      	strh	r2, [r3, #26]
      if (pcb->rcv_nxt == seqno) {
 8014e4c:	e180      	b.n	8015150 <tcp_receive+0xed8>
      } else {
        /* We get here if the incoming segment is out-of-sequence. */

#if TCP_QUEUE_OOSEQ
        /* We queue the segment on the ->ooseq queue. */
        if (pcb->ooseq == NULL) {
 8014e4e:	687b      	ldr	r3, [r7, #4]
 8014e50:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8014e52:	2b00      	cmp	r3, #0
 8014e54:	d106      	bne.n	8014e64 <tcp_receive+0xbec>
          pcb->ooseq = tcp_seg_copy(&inseg);
 8014e56:	4848      	ldr	r0, [pc, #288]	; (8014f78 <tcp_receive+0xd00>)
 8014e58:	f7fd fbba 	bl	80125d0 <tcp_seg_copy>
 8014e5c:	4602      	mov	r2, r0
 8014e5e:	687b      	ldr	r3, [r7, #4]
 8014e60:	675a      	str	r2, [r3, #116]	; 0x74
 8014e62:	e16d      	b.n	8015140 <tcp_receive+0xec8>
#if LWIP_TCP_SACK_OUT
          /* This is the left edge of the lowest possible SACK range.
             It may start before the newly received segment (possibly adjusted below). */
          u32_t sackbeg = TCP_SEQ_LT(seqno, pcb->ooseq->tcphdr->seqno) ? seqno : pcb->ooseq->tcphdr->seqno;
#endif /* LWIP_TCP_SACK_OUT */
          struct tcp_seg *next, *prev = NULL;
 8014e64:	2300      	movs	r3, #0
 8014e66:	637b      	str	r3, [r7, #52]	; 0x34
          for (next = pcb->ooseq; next != NULL; next = next->next) {
 8014e68:	687b      	ldr	r3, [r7, #4]
 8014e6a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8014e6c:	63bb      	str	r3, [r7, #56]	; 0x38
 8014e6e:	e157      	b.n	8015120 <tcp_receive+0xea8>
            if (seqno == next->tcphdr->seqno) {
 8014e70:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8014e72:	68db      	ldr	r3, [r3, #12]
 8014e74:	685a      	ldr	r2, [r3, #4]
 8014e76:	4b41      	ldr	r3, [pc, #260]	; (8014f7c <tcp_receive+0xd04>)
 8014e78:	681b      	ldr	r3, [r3, #0]
 8014e7a:	429a      	cmp	r2, r3
 8014e7c:	d11d      	bne.n	8014eba <tcp_receive+0xc42>
              /* The sequence number of the incoming segment is the
                 same as the sequence number of the segment on
                 ->ooseq. We check the lengths to see which one to
                 discard. */
              if (inseg.len > next->len) {
 8014e7e:	4b3e      	ldr	r3, [pc, #248]	; (8014f78 <tcp_receive+0xd00>)
 8014e80:	891a      	ldrh	r2, [r3, #8]
 8014e82:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8014e84:	891b      	ldrh	r3, [r3, #8]
 8014e86:	429a      	cmp	r2, r3
 8014e88:	f240 814f 	bls.w	801512a <tcp_receive+0xeb2>
                /* The incoming segment is larger than the old
                   segment. We replace some segments with the new
                   one. */
                struct tcp_seg *cseg = tcp_seg_copy(&inseg);
 8014e8c:	483a      	ldr	r0, [pc, #232]	; (8014f78 <tcp_receive+0xd00>)
 8014e8e:	f7fd fb9f 	bl	80125d0 <tcp_seg_copy>
 8014e92:	6178      	str	r0, [r7, #20]
                if (cseg != NULL) {
 8014e94:	697b      	ldr	r3, [r7, #20]
 8014e96:	2b00      	cmp	r3, #0
 8014e98:	f000 8149 	beq.w	801512e <tcp_receive+0xeb6>
                  if (prev != NULL) {
 8014e9c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8014e9e:	2b00      	cmp	r3, #0
 8014ea0:	d003      	beq.n	8014eaa <tcp_receive+0xc32>
                    prev->next = cseg;
 8014ea2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8014ea4:	697a      	ldr	r2, [r7, #20]
 8014ea6:	601a      	str	r2, [r3, #0]
 8014ea8:	e002      	b.n	8014eb0 <tcp_receive+0xc38>
                  } else {
                    pcb->ooseq = cseg;
 8014eaa:	687b      	ldr	r3, [r7, #4]
 8014eac:	697a      	ldr	r2, [r7, #20]
 8014eae:	675a      	str	r2, [r3, #116]	; 0x74
                  }
                  tcp_oos_insert_segment(cseg, next);
 8014eb0:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8014eb2:	6978      	ldr	r0, [r7, #20]
 8014eb4:	f7ff f8dc 	bl	8014070 <tcp_oos_insert_segment>
                }
                break;
 8014eb8:	e139      	b.n	801512e <tcp_receive+0xeb6>
                   segment was smaller than the old one; in either
                   case, we ditch the incoming segment. */
                break;
              }
            } else {
              if (prev == NULL) {
 8014eba:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8014ebc:	2b00      	cmp	r3, #0
 8014ebe:	d117      	bne.n	8014ef0 <tcp_receive+0xc78>
                if (TCP_SEQ_LT(seqno, next->tcphdr->seqno)) {
 8014ec0:	4b2e      	ldr	r3, [pc, #184]	; (8014f7c <tcp_receive+0xd04>)
 8014ec2:	681a      	ldr	r2, [r3, #0]
 8014ec4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8014ec6:	68db      	ldr	r3, [r3, #12]
 8014ec8:	685b      	ldr	r3, [r3, #4]
 8014eca:	1ad3      	subs	r3, r2, r3
 8014ecc:	2b00      	cmp	r3, #0
 8014ece:	da57      	bge.n	8014f80 <tcp_receive+0xd08>
                  /* The sequence number of the incoming segment is lower
                     than the sequence number of the first segment on the
                     queue. We put the incoming segment first on the
                     queue. */
                  struct tcp_seg *cseg = tcp_seg_copy(&inseg);
 8014ed0:	4829      	ldr	r0, [pc, #164]	; (8014f78 <tcp_receive+0xd00>)
 8014ed2:	f7fd fb7d 	bl	80125d0 <tcp_seg_copy>
 8014ed6:	61b8      	str	r0, [r7, #24]
                  if (cseg != NULL) {
 8014ed8:	69bb      	ldr	r3, [r7, #24]
 8014eda:	2b00      	cmp	r3, #0
 8014edc:	f000 8129 	beq.w	8015132 <tcp_receive+0xeba>
                    pcb->ooseq = cseg;
 8014ee0:	687b      	ldr	r3, [r7, #4]
 8014ee2:	69ba      	ldr	r2, [r7, #24]
 8014ee4:	675a      	str	r2, [r3, #116]	; 0x74
                    tcp_oos_insert_segment(cseg, next);
 8014ee6:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8014ee8:	69b8      	ldr	r0, [r7, #24]
 8014eea:	f7ff f8c1 	bl	8014070 <tcp_oos_insert_segment>
                  }
                  break;
 8014eee:	e120      	b.n	8015132 <tcp_receive+0xeba>
                }
              } else {
                /*if (TCP_SEQ_LT(prev->tcphdr->seqno, seqno) &&
                  TCP_SEQ_LT(seqno, next->tcphdr->seqno)) {*/
                if (TCP_SEQ_BETWEEN(seqno, prev->tcphdr->seqno + 1, next->tcphdr->seqno - 1)) {
 8014ef0:	4b22      	ldr	r3, [pc, #136]	; (8014f7c <tcp_receive+0xd04>)
 8014ef2:	681a      	ldr	r2, [r3, #0]
 8014ef4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8014ef6:	68db      	ldr	r3, [r3, #12]
 8014ef8:	685b      	ldr	r3, [r3, #4]
 8014efa:	1ad3      	subs	r3, r2, r3
 8014efc:	3b01      	subs	r3, #1
 8014efe:	2b00      	cmp	r3, #0
 8014f00:	db3e      	blt.n	8014f80 <tcp_receive+0xd08>
 8014f02:	4b1e      	ldr	r3, [pc, #120]	; (8014f7c <tcp_receive+0xd04>)
 8014f04:	681a      	ldr	r2, [r3, #0]
 8014f06:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8014f08:	68db      	ldr	r3, [r3, #12]
 8014f0a:	685b      	ldr	r3, [r3, #4]
 8014f0c:	1ad3      	subs	r3, r2, r3
 8014f0e:	3301      	adds	r3, #1
 8014f10:	2b00      	cmp	r3, #0
 8014f12:	dc35      	bgt.n	8014f80 <tcp_receive+0xd08>
                  /* The sequence number of the incoming segment is in
                     between the sequence numbers of the previous and
                     the next segment on ->ooseq. We trim trim the previous
                     segment, delete next segments that included in received segment
                     and trim received, if needed. */
                  struct tcp_seg *cseg = tcp_seg_copy(&inseg);
 8014f14:	4818      	ldr	r0, [pc, #96]	; (8014f78 <tcp_receive+0xd00>)
 8014f16:	f7fd fb5b 	bl	80125d0 <tcp_seg_copy>
 8014f1a:	61f8      	str	r0, [r7, #28]
                  if (cseg != NULL) {
 8014f1c:	69fb      	ldr	r3, [r7, #28]
 8014f1e:	2b00      	cmp	r3, #0
 8014f20:	f000 8109 	beq.w	8015136 <tcp_receive+0xebe>
                    if (TCP_SEQ_GT(prev->tcphdr->seqno + prev->len, seqno)) {
 8014f24:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8014f26:	68db      	ldr	r3, [r3, #12]
 8014f28:	685b      	ldr	r3, [r3, #4]
 8014f2a:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8014f2c:	8912      	ldrh	r2, [r2, #8]
 8014f2e:	441a      	add	r2, r3
 8014f30:	4b12      	ldr	r3, [pc, #72]	; (8014f7c <tcp_receive+0xd04>)
 8014f32:	681b      	ldr	r3, [r3, #0]
 8014f34:	1ad3      	subs	r3, r2, r3
 8014f36:	2b00      	cmp	r3, #0
 8014f38:	dd12      	ble.n	8014f60 <tcp_receive+0xce8>
                      /* We need to trim the prev segment. */
                      prev->len = (u16_t)(seqno - prev->tcphdr->seqno);
 8014f3a:	4b10      	ldr	r3, [pc, #64]	; (8014f7c <tcp_receive+0xd04>)
 8014f3c:	681b      	ldr	r3, [r3, #0]
 8014f3e:	b29a      	uxth	r2, r3
 8014f40:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8014f42:	68db      	ldr	r3, [r3, #12]
 8014f44:	685b      	ldr	r3, [r3, #4]
 8014f46:	b29b      	uxth	r3, r3
 8014f48:	1ad3      	subs	r3, r2, r3
 8014f4a:	b29a      	uxth	r2, r3
 8014f4c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8014f4e:	811a      	strh	r2, [r3, #8]
                      pbuf_realloc(prev->p, prev->len);
 8014f50:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8014f52:	685a      	ldr	r2, [r3, #4]
 8014f54:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8014f56:	891b      	ldrh	r3, [r3, #8]
 8014f58:	4619      	mov	r1, r3
 8014f5a:	4610      	mov	r0, r2
 8014f5c:	f7fb ff24 	bl	8010da8 <pbuf_realloc>
                    }
                    prev->next = cseg;
 8014f60:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8014f62:	69fa      	ldr	r2, [r7, #28]
 8014f64:	601a      	str	r2, [r3, #0]
                    tcp_oos_insert_segment(cseg, next);
 8014f66:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8014f68:	69f8      	ldr	r0, [r7, #28]
 8014f6a:	f7ff f881 	bl	8014070 <tcp_oos_insert_segment>
                  }
                  break;
 8014f6e:	e0e2      	b.n	8015136 <tcp_receive+0xebe>
 8014f70:	2000711c 	.word	0x2000711c
 8014f74:	20007119 	.word	0x20007119
 8014f78:	200070ec 	.word	0x200070ec
 8014f7c:	2000710c 	.word	0x2000710c
#endif /* LWIP_TCP_SACK_OUT */

              /* We don't use 'prev' below, so let's set it to current 'next'.
                 This way even if we break the loop below, 'prev' will be pointing
                 at the segment right in front of the newly added one. */
              prev = next;
 8014f80:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8014f82:	637b      	str	r3, [r7, #52]	; 0x34

              /* If the "next" segment is the last segment on the
                 ooseq queue, we add the incoming segment to the end
                 of the list. */
              if (next->next == NULL &&
 8014f84:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8014f86:	681b      	ldr	r3, [r3, #0]
 8014f88:	2b00      	cmp	r3, #0
 8014f8a:	f040 80c6 	bne.w	801511a <tcp_receive+0xea2>
                  TCP_SEQ_GT(seqno, next->tcphdr->seqno)) {
 8014f8e:	4b80      	ldr	r3, [pc, #512]	; (8015190 <tcp_receive+0xf18>)
 8014f90:	681a      	ldr	r2, [r3, #0]
 8014f92:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8014f94:	68db      	ldr	r3, [r3, #12]
 8014f96:	685b      	ldr	r3, [r3, #4]
 8014f98:	1ad3      	subs	r3, r2, r3
              if (next->next == NULL &&
 8014f9a:	2b00      	cmp	r3, #0
 8014f9c:	f340 80bd 	ble.w	801511a <tcp_receive+0xea2>
                if (TCPH_FLAGS(next->tcphdr) & TCP_FIN) {
 8014fa0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8014fa2:	68db      	ldr	r3, [r3, #12]
 8014fa4:	899b      	ldrh	r3, [r3, #12]
 8014fa6:	b29b      	uxth	r3, r3
 8014fa8:	4618      	mov	r0, r3
 8014faa:	f7fa fc9d 	bl	800f8e8 <lwip_htons>
 8014fae:	4603      	mov	r3, r0
 8014fb0:	b2db      	uxtb	r3, r3
 8014fb2:	f003 0301 	and.w	r3, r3, #1
 8014fb6:	2b00      	cmp	r3, #0
 8014fb8:	f040 80bf 	bne.w	801513a <tcp_receive+0xec2>
                  /* segment "next" already contains all data */
                  break;
                }
                next->next = tcp_seg_copy(&inseg);
 8014fbc:	4875      	ldr	r0, [pc, #468]	; (8015194 <tcp_receive+0xf1c>)
 8014fbe:	f7fd fb07 	bl	80125d0 <tcp_seg_copy>
 8014fc2:	4602      	mov	r2, r0
 8014fc4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8014fc6:	601a      	str	r2, [r3, #0]
                if (next->next != NULL) {
 8014fc8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8014fca:	681b      	ldr	r3, [r3, #0]
 8014fcc:	2b00      	cmp	r3, #0
 8014fce:	f000 80b6 	beq.w	801513e <tcp_receive+0xec6>
                  if (TCP_SEQ_GT(next->tcphdr->seqno + next->len, seqno)) {
 8014fd2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8014fd4:	68db      	ldr	r3, [r3, #12]
 8014fd6:	685b      	ldr	r3, [r3, #4]
 8014fd8:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8014fda:	8912      	ldrh	r2, [r2, #8]
 8014fdc:	441a      	add	r2, r3
 8014fde:	4b6c      	ldr	r3, [pc, #432]	; (8015190 <tcp_receive+0xf18>)
 8014fe0:	681b      	ldr	r3, [r3, #0]
 8014fe2:	1ad3      	subs	r3, r2, r3
 8014fe4:	2b00      	cmp	r3, #0
 8014fe6:	dd12      	ble.n	801500e <tcp_receive+0xd96>
                    /* We need to trim the last segment. */
                    next->len = (u16_t)(seqno - next->tcphdr->seqno);
 8014fe8:	4b69      	ldr	r3, [pc, #420]	; (8015190 <tcp_receive+0xf18>)
 8014fea:	681b      	ldr	r3, [r3, #0]
 8014fec:	b29a      	uxth	r2, r3
 8014fee:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8014ff0:	68db      	ldr	r3, [r3, #12]
 8014ff2:	685b      	ldr	r3, [r3, #4]
 8014ff4:	b29b      	uxth	r3, r3
 8014ff6:	1ad3      	subs	r3, r2, r3
 8014ff8:	b29a      	uxth	r2, r3
 8014ffa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8014ffc:	811a      	strh	r2, [r3, #8]
                    pbuf_realloc(next->p, next->len);
 8014ffe:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8015000:	685a      	ldr	r2, [r3, #4]
 8015002:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8015004:	891b      	ldrh	r3, [r3, #8]
 8015006:	4619      	mov	r1, r3
 8015008:	4610      	mov	r0, r2
 801500a:	f7fb fecd 	bl	8010da8 <pbuf_realloc>
                  }
                  /* check if the remote side overruns our receive window */
                  if (TCP_SEQ_GT((u32_t)tcplen + seqno, pcb->rcv_nxt + (u32_t)pcb->rcv_wnd)) {
 801500e:	4b62      	ldr	r3, [pc, #392]	; (8015198 <tcp_receive+0xf20>)
 8015010:	881b      	ldrh	r3, [r3, #0]
 8015012:	461a      	mov	r2, r3
 8015014:	4b5e      	ldr	r3, [pc, #376]	; (8015190 <tcp_receive+0xf18>)
 8015016:	681b      	ldr	r3, [r3, #0]
 8015018:	441a      	add	r2, r3
 801501a:	687b      	ldr	r3, [r7, #4]
 801501c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801501e:	6879      	ldr	r1, [r7, #4]
 8015020:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 8015022:	440b      	add	r3, r1
 8015024:	1ad3      	subs	r3, r2, r3
 8015026:	2b00      	cmp	r3, #0
 8015028:	f340 8089 	ble.w	801513e <tcp_receive+0xec6>
                    LWIP_DEBUGF(TCP_INPUT_DEBUG,
                                ("tcp_receive: other end overran receive window"
                                 "seqno %"U32_F" len %"U16_F" right edge %"U32_F"\n",
                                 seqno, tcplen, pcb->rcv_nxt + pcb->rcv_wnd));
                    if (TCPH_FLAGS(next->next->tcphdr) & TCP_FIN) {
 801502c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801502e:	681b      	ldr	r3, [r3, #0]
 8015030:	68db      	ldr	r3, [r3, #12]
 8015032:	899b      	ldrh	r3, [r3, #12]
 8015034:	b29b      	uxth	r3, r3
 8015036:	4618      	mov	r0, r3
 8015038:	f7fa fc56 	bl	800f8e8 <lwip_htons>
 801503c:	4603      	mov	r3, r0
 801503e:	b2db      	uxtb	r3, r3
 8015040:	f003 0301 	and.w	r3, r3, #1
 8015044:	2b00      	cmp	r3, #0
 8015046:	d022      	beq.n	801508e <tcp_receive+0xe16>
                      /* Must remove the FIN from the header as we're trimming
                       * that byte of sequence-space from the packet */
                      TCPH_FLAGS_SET(next->next->tcphdr, TCPH_FLAGS(next->next->tcphdr) & ~TCP_FIN);
 8015048:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801504a:	681b      	ldr	r3, [r3, #0]
 801504c:	68db      	ldr	r3, [r3, #12]
 801504e:	899b      	ldrh	r3, [r3, #12]
 8015050:	b29b      	uxth	r3, r3
 8015052:	b21b      	sxth	r3, r3
 8015054:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 8015058:	b21c      	sxth	r4, r3
 801505a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801505c:	681b      	ldr	r3, [r3, #0]
 801505e:	68db      	ldr	r3, [r3, #12]
 8015060:	899b      	ldrh	r3, [r3, #12]
 8015062:	b29b      	uxth	r3, r3
 8015064:	4618      	mov	r0, r3
 8015066:	f7fa fc3f 	bl	800f8e8 <lwip_htons>
 801506a:	4603      	mov	r3, r0
 801506c:	b2db      	uxtb	r3, r3
 801506e:	b29b      	uxth	r3, r3
 8015070:	f003 033e 	and.w	r3, r3, #62	; 0x3e
 8015074:	b29b      	uxth	r3, r3
 8015076:	4618      	mov	r0, r3
 8015078:	f7fa fc36 	bl	800f8e8 <lwip_htons>
 801507c:	4603      	mov	r3, r0
 801507e:	b21b      	sxth	r3, r3
 8015080:	4323      	orrs	r3, r4
 8015082:	b21a      	sxth	r2, r3
 8015084:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8015086:	681b      	ldr	r3, [r3, #0]
 8015088:	68db      	ldr	r3, [r3, #12]
 801508a:	b292      	uxth	r2, r2
 801508c:	819a      	strh	r2, [r3, #12]
                    }
                    /* Adjust length of segment to fit in the window. */
                    next->next->len = (u16_t)(pcb->rcv_nxt + pcb->rcv_wnd - seqno);
 801508e:	687b      	ldr	r3, [r7, #4]
 8015090:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8015092:	b29a      	uxth	r2, r3
 8015094:	687b      	ldr	r3, [r7, #4]
 8015096:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8015098:	4413      	add	r3, r2
 801509a:	b299      	uxth	r1, r3
 801509c:	4b3c      	ldr	r3, [pc, #240]	; (8015190 <tcp_receive+0xf18>)
 801509e:	681b      	ldr	r3, [r3, #0]
 80150a0:	b29a      	uxth	r2, r3
 80150a2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80150a4:	681b      	ldr	r3, [r3, #0]
 80150a6:	1a8a      	subs	r2, r1, r2
 80150a8:	b292      	uxth	r2, r2
 80150aa:	811a      	strh	r2, [r3, #8]
                    pbuf_realloc(next->next->p, next->next->len);
 80150ac:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80150ae:	681b      	ldr	r3, [r3, #0]
 80150b0:	685a      	ldr	r2, [r3, #4]
 80150b2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80150b4:	681b      	ldr	r3, [r3, #0]
 80150b6:	891b      	ldrh	r3, [r3, #8]
 80150b8:	4619      	mov	r1, r3
 80150ba:	4610      	mov	r0, r2
 80150bc:	f7fb fe74 	bl	8010da8 <pbuf_realloc>
                    tcplen = TCP_TCPLEN(next->next);
 80150c0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80150c2:	681b      	ldr	r3, [r3, #0]
 80150c4:	891c      	ldrh	r4, [r3, #8]
 80150c6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80150c8:	681b      	ldr	r3, [r3, #0]
 80150ca:	68db      	ldr	r3, [r3, #12]
 80150cc:	899b      	ldrh	r3, [r3, #12]
 80150ce:	b29b      	uxth	r3, r3
 80150d0:	4618      	mov	r0, r3
 80150d2:	f7fa fc09 	bl	800f8e8 <lwip_htons>
 80150d6:	4603      	mov	r3, r0
 80150d8:	b2db      	uxtb	r3, r3
 80150da:	f003 0303 	and.w	r3, r3, #3
 80150de:	2b00      	cmp	r3, #0
 80150e0:	d001      	beq.n	80150e6 <tcp_receive+0xe6e>
 80150e2:	2301      	movs	r3, #1
 80150e4:	e000      	b.n	80150e8 <tcp_receive+0xe70>
 80150e6:	2300      	movs	r3, #0
 80150e8:	4423      	add	r3, r4
 80150ea:	b29a      	uxth	r2, r3
 80150ec:	4b2a      	ldr	r3, [pc, #168]	; (8015198 <tcp_receive+0xf20>)
 80150ee:	801a      	strh	r2, [r3, #0]
                    LWIP_ASSERT("tcp_receive: segment not trimmed correctly to rcv_wnd\n",
 80150f0:	4b29      	ldr	r3, [pc, #164]	; (8015198 <tcp_receive+0xf20>)
 80150f2:	881b      	ldrh	r3, [r3, #0]
 80150f4:	461a      	mov	r2, r3
 80150f6:	4b26      	ldr	r3, [pc, #152]	; (8015190 <tcp_receive+0xf18>)
 80150f8:	681b      	ldr	r3, [r3, #0]
 80150fa:	441a      	add	r2, r3
 80150fc:	687b      	ldr	r3, [r7, #4]
 80150fe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8015100:	6879      	ldr	r1, [r7, #4]
 8015102:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 8015104:	440b      	add	r3, r1
 8015106:	429a      	cmp	r2, r3
 8015108:	d019      	beq.n	801513e <tcp_receive+0xec6>
 801510a:	4b24      	ldr	r3, [pc, #144]	; (801519c <tcp_receive+0xf24>)
 801510c:	f44f 62df 	mov.w	r2, #1784	; 0x6f8
 8015110:	4923      	ldr	r1, [pc, #140]	; (80151a0 <tcp_receive+0xf28>)
 8015112:	4824      	ldr	r0, [pc, #144]	; (80151a4 <tcp_receive+0xf2c>)
 8015114:	f004 fea4 	bl	8019e60 <iprintf>
                                (seqno + tcplen) == (pcb->rcv_nxt + pcb->rcv_wnd));
                  }
                }
                break;
 8015118:	e011      	b.n	801513e <tcp_receive+0xec6>
          for (next = pcb->ooseq; next != NULL; next = next->next) {
 801511a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801511c:	681b      	ldr	r3, [r3, #0]
 801511e:	63bb      	str	r3, [r7, #56]	; 0x38
 8015120:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8015122:	2b00      	cmp	r3, #0
 8015124:	f47f aea4 	bne.w	8014e70 <tcp_receive+0xbf8>
 8015128:	e00a      	b.n	8015140 <tcp_receive+0xec8>
                break;
 801512a:	bf00      	nop
 801512c:	e008      	b.n	8015140 <tcp_receive+0xec8>
                break;
 801512e:	bf00      	nop
 8015130:	e006      	b.n	8015140 <tcp_receive+0xec8>
                  break;
 8015132:	bf00      	nop
 8015134:	e004      	b.n	8015140 <tcp_receive+0xec8>
                  break;
 8015136:	bf00      	nop
 8015138:	e002      	b.n	8015140 <tcp_receive+0xec8>
                  break;
 801513a:	bf00      	nop
 801513c:	e000      	b.n	8015140 <tcp_receive+0xec8>
                break;
 801513e:	bf00      	nop
#endif /* TCP_OOSEQ_BYTES_LIMIT || TCP_OOSEQ_PBUFS_LIMIT */
#endif /* TCP_QUEUE_OOSEQ */

        /* We send the ACK packet after we've (potentially) dealt with SACKs,
           so they can be included in the acknowledgment. */
        tcp_send_empty_ack(pcb);
 8015140:	6878      	ldr	r0, [r7, #4]
 8015142:	f001 fa33 	bl	80165ac <tcp_send_empty_ack>
      if (pcb->rcv_nxt == seqno) {
 8015146:	e003      	b.n	8015150 <tcp_receive+0xed8>
      }
    } else {
      /* The incoming segment is not within the window. */
      tcp_send_empty_ack(pcb);
 8015148:	6878      	ldr	r0, [r7, #4]
 801514a:	f001 fa2f 	bl	80165ac <tcp_send_empty_ack>
    if (TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt,
 801514e:	e01a      	b.n	8015186 <tcp_receive+0xf0e>
 8015150:	e019      	b.n	8015186 <tcp_receive+0xf0e>
    }
  } else {
    /* Segments with length 0 is taken care of here. Segments that
       fall out of the window are ACKed. */
    if (!TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt, pcb->rcv_nxt + pcb->rcv_wnd - 1)) {
 8015152:	4b0f      	ldr	r3, [pc, #60]	; (8015190 <tcp_receive+0xf18>)
 8015154:	681a      	ldr	r2, [r3, #0]
 8015156:	687b      	ldr	r3, [r7, #4]
 8015158:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801515a:	1ad3      	subs	r3, r2, r3
 801515c:	2b00      	cmp	r3, #0
 801515e:	db0a      	blt.n	8015176 <tcp_receive+0xefe>
 8015160:	4b0b      	ldr	r3, [pc, #44]	; (8015190 <tcp_receive+0xf18>)
 8015162:	681a      	ldr	r2, [r3, #0]
 8015164:	687b      	ldr	r3, [r7, #4]
 8015166:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8015168:	6879      	ldr	r1, [r7, #4]
 801516a:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 801516c:	440b      	add	r3, r1
 801516e:	1ad3      	subs	r3, r2, r3
 8015170:	3301      	adds	r3, #1
 8015172:	2b00      	cmp	r3, #0
 8015174:	dd07      	ble.n	8015186 <tcp_receive+0xf0e>
      tcp_ack_now(pcb);
 8015176:	687b      	ldr	r3, [r7, #4]
 8015178:	8b5b      	ldrh	r3, [r3, #26]
 801517a:	f043 0302 	orr.w	r3, r3, #2
 801517e:	b29a      	uxth	r2, r3
 8015180:	687b      	ldr	r3, [r7, #4]
 8015182:	835a      	strh	r2, [r3, #26]
    }
  }
}
 8015184:	e7ff      	b.n	8015186 <tcp_receive+0xf0e>
 8015186:	bf00      	nop
 8015188:	3750      	adds	r7, #80	; 0x50
 801518a:	46bd      	mov	sp, r7
 801518c:	bdb0      	pop	{r4, r5, r7, pc}
 801518e:	bf00      	nop
 8015190:	2000710c 	.word	0x2000710c
 8015194:	200070ec 	.word	0x200070ec
 8015198:	20007116 	.word	0x20007116
 801519c:	0801dbec 	.word	0x0801dbec
 80151a0:	0801df94 	.word	0x0801df94
 80151a4:	0801dc38 	.word	0x0801dc38

080151a8 <tcp_get_next_optbyte>:

static u8_t
tcp_get_next_optbyte(void)
{
 80151a8:	b480      	push	{r7}
 80151aa:	b083      	sub	sp, #12
 80151ac:	af00      	add	r7, sp, #0
  u16_t optidx = tcp_optidx++;
 80151ae:	4b15      	ldr	r3, [pc, #84]	; (8015204 <tcp_get_next_optbyte+0x5c>)
 80151b0:	881b      	ldrh	r3, [r3, #0]
 80151b2:	1c5a      	adds	r2, r3, #1
 80151b4:	b291      	uxth	r1, r2
 80151b6:	4a13      	ldr	r2, [pc, #76]	; (8015204 <tcp_get_next_optbyte+0x5c>)
 80151b8:	8011      	strh	r1, [r2, #0]
 80151ba:	80fb      	strh	r3, [r7, #6]
  if ((tcphdr_opt2 == NULL) || (optidx < tcphdr_opt1len)) {
 80151bc:	4b12      	ldr	r3, [pc, #72]	; (8015208 <tcp_get_next_optbyte+0x60>)
 80151be:	681b      	ldr	r3, [r3, #0]
 80151c0:	2b00      	cmp	r3, #0
 80151c2:	d004      	beq.n	80151ce <tcp_get_next_optbyte+0x26>
 80151c4:	4b11      	ldr	r3, [pc, #68]	; (801520c <tcp_get_next_optbyte+0x64>)
 80151c6:	881b      	ldrh	r3, [r3, #0]
 80151c8:	88fa      	ldrh	r2, [r7, #6]
 80151ca:	429a      	cmp	r2, r3
 80151cc:	d208      	bcs.n	80151e0 <tcp_get_next_optbyte+0x38>
    u8_t *opts = (u8_t *)tcphdr + TCP_HLEN;
 80151ce:	4b10      	ldr	r3, [pc, #64]	; (8015210 <tcp_get_next_optbyte+0x68>)
 80151d0:	681b      	ldr	r3, [r3, #0]
 80151d2:	3314      	adds	r3, #20
 80151d4:	603b      	str	r3, [r7, #0]
    return opts[optidx];
 80151d6:	88fb      	ldrh	r3, [r7, #6]
 80151d8:	683a      	ldr	r2, [r7, #0]
 80151da:	4413      	add	r3, r2
 80151dc:	781b      	ldrb	r3, [r3, #0]
 80151de:	e00b      	b.n	80151f8 <tcp_get_next_optbyte+0x50>
  } else {
    u8_t idx = (u8_t)(optidx - tcphdr_opt1len);
 80151e0:	88fb      	ldrh	r3, [r7, #6]
 80151e2:	b2da      	uxtb	r2, r3
 80151e4:	4b09      	ldr	r3, [pc, #36]	; (801520c <tcp_get_next_optbyte+0x64>)
 80151e6:	881b      	ldrh	r3, [r3, #0]
 80151e8:	b2db      	uxtb	r3, r3
 80151ea:	1ad3      	subs	r3, r2, r3
 80151ec:	717b      	strb	r3, [r7, #5]
    return tcphdr_opt2[idx];
 80151ee:	4b06      	ldr	r3, [pc, #24]	; (8015208 <tcp_get_next_optbyte+0x60>)
 80151f0:	681a      	ldr	r2, [r3, #0]
 80151f2:	797b      	ldrb	r3, [r7, #5]
 80151f4:	4413      	add	r3, r2
 80151f6:	781b      	ldrb	r3, [r3, #0]
  }
}
 80151f8:	4618      	mov	r0, r3
 80151fa:	370c      	adds	r7, #12
 80151fc:	46bd      	mov	sp, r7
 80151fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015202:	4770      	bx	lr
 8015204:	20007108 	.word	0x20007108
 8015208:	20007104 	.word	0x20007104
 801520c:	20007102 	.word	0x20007102
 8015210:	200070fc 	.word	0x200070fc

08015214 <tcp_parseopt>:
 *
 * @param pcb the tcp_pcb for which a segment arrived
 */
static void
tcp_parseopt(struct tcp_pcb *pcb)
{
 8015214:	b580      	push	{r7, lr}
 8015216:	b084      	sub	sp, #16
 8015218:	af00      	add	r7, sp, #0
 801521a:	6078      	str	r0, [r7, #4]
  u16_t mss;
#if LWIP_TCP_TIMESTAMPS
  u32_t tsval;
#endif

  LWIP_ASSERT("tcp_parseopt: invalid pcb", pcb != NULL);
 801521c:	687b      	ldr	r3, [r7, #4]
 801521e:	2b00      	cmp	r3, #0
 8015220:	d106      	bne.n	8015230 <tcp_parseopt+0x1c>
 8015222:	4b32      	ldr	r3, [pc, #200]	; (80152ec <tcp_parseopt+0xd8>)
 8015224:	f240 727d 	movw	r2, #1917	; 0x77d
 8015228:	4931      	ldr	r1, [pc, #196]	; (80152f0 <tcp_parseopt+0xdc>)
 801522a:	4832      	ldr	r0, [pc, #200]	; (80152f4 <tcp_parseopt+0xe0>)
 801522c:	f004 fe18 	bl	8019e60 <iprintf>

  /* Parse the TCP MSS option, if present. */
  if (tcphdr_optlen != 0) {
 8015230:	4b31      	ldr	r3, [pc, #196]	; (80152f8 <tcp_parseopt+0xe4>)
 8015232:	881b      	ldrh	r3, [r3, #0]
 8015234:	2b00      	cmp	r3, #0
 8015236:	d056      	beq.n	80152e6 <tcp_parseopt+0xd2>
    for (tcp_optidx = 0; tcp_optidx < tcphdr_optlen; ) {
 8015238:	4b30      	ldr	r3, [pc, #192]	; (80152fc <tcp_parseopt+0xe8>)
 801523a:	2200      	movs	r2, #0
 801523c:	801a      	strh	r2, [r3, #0]
 801523e:	e046      	b.n	80152ce <tcp_parseopt+0xba>
      u8_t opt = tcp_get_next_optbyte();
 8015240:	f7ff ffb2 	bl	80151a8 <tcp_get_next_optbyte>
 8015244:	4603      	mov	r3, r0
 8015246:	73fb      	strb	r3, [r7, #15]
      switch (opt) {
 8015248:	7bfb      	ldrb	r3, [r7, #15]
 801524a:	2b02      	cmp	r3, #2
 801524c:	d006      	beq.n	801525c <tcp_parseopt+0x48>
 801524e:	2b02      	cmp	r3, #2
 8015250:	dc2c      	bgt.n	80152ac <tcp_parseopt+0x98>
 8015252:	2b00      	cmp	r3, #0
 8015254:	d042      	beq.n	80152dc <tcp_parseopt+0xc8>
 8015256:	2b01      	cmp	r3, #1
 8015258:	d128      	bne.n	80152ac <tcp_parseopt+0x98>
          LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: EOL\n"));
          return;
        case LWIP_TCP_OPT_NOP:
          /* NOP option. */
          LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: NOP\n"));
          break;
 801525a:	e038      	b.n	80152ce <tcp_parseopt+0xba>
        case LWIP_TCP_OPT_MSS:
          LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: MSS\n"));
          if (tcp_get_next_optbyte() != LWIP_TCP_OPT_LEN_MSS || (tcp_optidx - 2 + LWIP_TCP_OPT_LEN_MSS) > tcphdr_optlen) {
 801525c:	f7ff ffa4 	bl	80151a8 <tcp_get_next_optbyte>
 8015260:	4603      	mov	r3, r0
 8015262:	2b04      	cmp	r3, #4
 8015264:	d13c      	bne.n	80152e0 <tcp_parseopt+0xcc>
 8015266:	4b25      	ldr	r3, [pc, #148]	; (80152fc <tcp_parseopt+0xe8>)
 8015268:	881b      	ldrh	r3, [r3, #0]
 801526a:	3301      	adds	r3, #1
 801526c:	4a22      	ldr	r2, [pc, #136]	; (80152f8 <tcp_parseopt+0xe4>)
 801526e:	8812      	ldrh	r2, [r2, #0]
 8015270:	4293      	cmp	r3, r2
 8015272:	da35      	bge.n	80152e0 <tcp_parseopt+0xcc>
            /* Bad length */
            LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: bad length\n"));
            return;
          }
          /* An MSS option with the right option length. */
          mss = (u16_t)(tcp_get_next_optbyte() << 8);
 8015274:	f7ff ff98 	bl	80151a8 <tcp_get_next_optbyte>
 8015278:	4603      	mov	r3, r0
 801527a:	b29b      	uxth	r3, r3
 801527c:	021b      	lsls	r3, r3, #8
 801527e:	81bb      	strh	r3, [r7, #12]
          mss |= tcp_get_next_optbyte();
 8015280:	f7ff ff92 	bl	80151a8 <tcp_get_next_optbyte>
 8015284:	4603      	mov	r3, r0
 8015286:	b29a      	uxth	r2, r3
 8015288:	89bb      	ldrh	r3, [r7, #12]
 801528a:	4313      	orrs	r3, r2
 801528c:	81bb      	strh	r3, [r7, #12]
          /* Limit the mss to the configured TCP_MSS and prevent division by zero */
          pcb->mss = ((mss > TCP_MSS) || (mss == 0)) ? TCP_MSS : mss;
 801528e:	89bb      	ldrh	r3, [r7, #12]
 8015290:	f240 52b4 	movw	r2, #1460	; 0x5b4
 8015294:	4293      	cmp	r3, r2
 8015296:	d804      	bhi.n	80152a2 <tcp_parseopt+0x8e>
 8015298:	89bb      	ldrh	r3, [r7, #12]
 801529a:	2b00      	cmp	r3, #0
 801529c:	d001      	beq.n	80152a2 <tcp_parseopt+0x8e>
 801529e:	89ba      	ldrh	r2, [r7, #12]
 80152a0:	e001      	b.n	80152a6 <tcp_parseopt+0x92>
 80152a2:	f240 52b4 	movw	r2, #1460	; 0x5b4
 80152a6:	687b      	ldr	r3, [r7, #4]
 80152a8:	865a      	strh	r2, [r3, #50]	; 0x32
          break;
 80152aa:	e010      	b.n	80152ce <tcp_parseopt+0xba>
          }
          break;
#endif /* LWIP_TCP_SACK_OUT */
        default:
          LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: other\n"));
          data = tcp_get_next_optbyte();
 80152ac:	f7ff ff7c 	bl	80151a8 <tcp_get_next_optbyte>
 80152b0:	4603      	mov	r3, r0
 80152b2:	72fb      	strb	r3, [r7, #11]
          if (data < 2) {
 80152b4:	7afb      	ldrb	r3, [r7, #11]
 80152b6:	2b01      	cmp	r3, #1
 80152b8:	d914      	bls.n	80152e4 <tcp_parseopt+0xd0>
               and we don't process them further. */
            return;
          }
          /* All other options have a length field, so that we easily
             can skip past them. */
          tcp_optidx += data - 2;
 80152ba:	7afb      	ldrb	r3, [r7, #11]
 80152bc:	b29a      	uxth	r2, r3
 80152be:	4b0f      	ldr	r3, [pc, #60]	; (80152fc <tcp_parseopt+0xe8>)
 80152c0:	881b      	ldrh	r3, [r3, #0]
 80152c2:	4413      	add	r3, r2
 80152c4:	b29b      	uxth	r3, r3
 80152c6:	3b02      	subs	r3, #2
 80152c8:	b29a      	uxth	r2, r3
 80152ca:	4b0c      	ldr	r3, [pc, #48]	; (80152fc <tcp_parseopt+0xe8>)
 80152cc:	801a      	strh	r2, [r3, #0]
    for (tcp_optidx = 0; tcp_optidx < tcphdr_optlen; ) {
 80152ce:	4b0b      	ldr	r3, [pc, #44]	; (80152fc <tcp_parseopt+0xe8>)
 80152d0:	881a      	ldrh	r2, [r3, #0]
 80152d2:	4b09      	ldr	r3, [pc, #36]	; (80152f8 <tcp_parseopt+0xe4>)
 80152d4:	881b      	ldrh	r3, [r3, #0]
 80152d6:	429a      	cmp	r2, r3
 80152d8:	d3b2      	bcc.n	8015240 <tcp_parseopt+0x2c>
 80152da:	e004      	b.n	80152e6 <tcp_parseopt+0xd2>
          return;
 80152dc:	bf00      	nop
 80152de:	e002      	b.n	80152e6 <tcp_parseopt+0xd2>
            return;
 80152e0:	bf00      	nop
 80152e2:	e000      	b.n	80152e6 <tcp_parseopt+0xd2>
            return;
 80152e4:	bf00      	nop
      }
    }
  }
}
 80152e6:	3710      	adds	r7, #16
 80152e8:	46bd      	mov	sp, r7
 80152ea:	bd80      	pop	{r7, pc}
 80152ec:	0801dbec 	.word	0x0801dbec
 80152f0:	0801e050 	.word	0x0801e050
 80152f4:	0801dc38 	.word	0x0801dc38
 80152f8:	20007100 	.word	0x20007100
 80152fc:	20007108 	.word	0x20007108

08015300 <tcp_trigger_input_pcb_close>:

void
tcp_trigger_input_pcb_close(void)
{
 8015300:	b480      	push	{r7}
 8015302:	af00      	add	r7, sp, #0
  recv_flags |= TF_CLOSED;
 8015304:	4b05      	ldr	r3, [pc, #20]	; (801531c <tcp_trigger_input_pcb_close+0x1c>)
 8015306:	781b      	ldrb	r3, [r3, #0]
 8015308:	f043 0310 	orr.w	r3, r3, #16
 801530c:	b2da      	uxtb	r2, r3
 801530e:	4b03      	ldr	r3, [pc, #12]	; (801531c <tcp_trigger_input_pcb_close+0x1c>)
 8015310:	701a      	strb	r2, [r3, #0]
}
 8015312:	bf00      	nop
 8015314:	46bd      	mov	sp, r7
 8015316:	f85d 7b04 	ldr.w	r7, [sp], #4
 801531a:	4770      	bx	lr
 801531c:	20007119 	.word	0x20007119

08015320 <tcp_route>:
static err_t tcp_output_segment(struct tcp_seg *seg, struct tcp_pcb *pcb, struct netif *netif);

/* tcp_route: common code that returns a fixed bound netif or calls ip_route */
static struct netif *
tcp_route(const struct tcp_pcb *pcb, const ip_addr_t *src, const ip_addr_t *dst)
{
 8015320:	b580      	push	{r7, lr}
 8015322:	b084      	sub	sp, #16
 8015324:	af00      	add	r7, sp, #0
 8015326:	60f8      	str	r0, [r7, #12]
 8015328:	60b9      	str	r1, [r7, #8]
 801532a:	607a      	str	r2, [r7, #4]
  LWIP_UNUSED_ARG(src); /* in case IPv4-only and source-based routing is disabled */

  if ((pcb != NULL) && (pcb->netif_idx != NETIF_NO_INDEX)) {
 801532c:	68fb      	ldr	r3, [r7, #12]
 801532e:	2b00      	cmp	r3, #0
 8015330:	d00a      	beq.n	8015348 <tcp_route+0x28>
 8015332:	68fb      	ldr	r3, [r7, #12]
 8015334:	7a1b      	ldrb	r3, [r3, #8]
 8015336:	2b00      	cmp	r3, #0
 8015338:	d006      	beq.n	8015348 <tcp_route+0x28>
    return netif_get_by_index(pcb->netif_idx);
 801533a:	68fb      	ldr	r3, [r7, #12]
 801533c:	7a1b      	ldrb	r3, [r3, #8]
 801533e:	4618      	mov	r0, r3
 8015340:	f7fb fb76 	bl	8010a30 <netif_get_by_index>
 8015344:	4603      	mov	r3, r0
 8015346:	e003      	b.n	8015350 <tcp_route+0x30>
  } else {
    return ip_route(src, dst);
 8015348:	6878      	ldr	r0, [r7, #4]
 801534a:	f002 fe61 	bl	8018010 <ip4_route>
 801534e:	4603      	mov	r3, r0
  }
}
 8015350:	4618      	mov	r0, r3
 8015352:	3710      	adds	r7, #16
 8015354:	46bd      	mov	sp, r7
 8015356:	bd80      	pop	{r7, pc}

08015358 <tcp_create_segment>:
 * The TCP header is filled in except ackno and wnd.
 * p is freed on failure.
 */
static struct tcp_seg *
tcp_create_segment(const struct tcp_pcb *pcb, struct pbuf *p, u8_t hdrflags, u32_t seqno, u8_t optflags)
{
 8015358:	b590      	push	{r4, r7, lr}
 801535a:	b087      	sub	sp, #28
 801535c:	af00      	add	r7, sp, #0
 801535e:	60f8      	str	r0, [r7, #12]
 8015360:	60b9      	str	r1, [r7, #8]
 8015362:	603b      	str	r3, [r7, #0]
 8015364:	4613      	mov	r3, r2
 8015366:	71fb      	strb	r3, [r7, #7]
  struct tcp_seg *seg;
  u8_t optlen;

  LWIP_ASSERT("tcp_create_segment: invalid pcb", pcb != NULL);
 8015368:	68fb      	ldr	r3, [r7, #12]
 801536a:	2b00      	cmp	r3, #0
 801536c:	d105      	bne.n	801537a <tcp_create_segment+0x22>
 801536e:	4b44      	ldr	r3, [pc, #272]	; (8015480 <tcp_create_segment+0x128>)
 8015370:	22a3      	movs	r2, #163	; 0xa3
 8015372:	4944      	ldr	r1, [pc, #272]	; (8015484 <tcp_create_segment+0x12c>)
 8015374:	4844      	ldr	r0, [pc, #272]	; (8015488 <tcp_create_segment+0x130>)
 8015376:	f004 fd73 	bl	8019e60 <iprintf>
  LWIP_ASSERT("tcp_create_segment: invalid pbuf", p != NULL);
 801537a:	68bb      	ldr	r3, [r7, #8]
 801537c:	2b00      	cmp	r3, #0
 801537e:	d105      	bne.n	801538c <tcp_create_segment+0x34>
 8015380:	4b3f      	ldr	r3, [pc, #252]	; (8015480 <tcp_create_segment+0x128>)
 8015382:	22a4      	movs	r2, #164	; 0xa4
 8015384:	4941      	ldr	r1, [pc, #260]	; (801548c <tcp_create_segment+0x134>)
 8015386:	4840      	ldr	r0, [pc, #256]	; (8015488 <tcp_create_segment+0x130>)
 8015388:	f004 fd6a 	bl	8019e60 <iprintf>

  optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(optflags, pcb);
 801538c:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8015390:	009b      	lsls	r3, r3, #2
 8015392:	b2db      	uxtb	r3, r3
 8015394:	f003 0304 	and.w	r3, r3, #4
 8015398:	75fb      	strb	r3, [r7, #23]

  if ((seg = (struct tcp_seg *)memp_malloc(MEMP_TCP_SEG)) == NULL) {
 801539a:	2003      	movs	r0, #3
 801539c:	f7fa ffc2 	bl	8010324 <memp_malloc>
 80153a0:	6138      	str	r0, [r7, #16]
 80153a2:	693b      	ldr	r3, [r7, #16]
 80153a4:	2b00      	cmp	r3, #0
 80153a6:	d104      	bne.n	80153b2 <tcp_create_segment+0x5a>
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("tcp_create_segment: no memory.\n"));
    pbuf_free(p);
 80153a8:	68b8      	ldr	r0, [r7, #8]
 80153aa:	f7fb fe81 	bl	80110b0 <pbuf_free>
    return NULL;
 80153ae:	2300      	movs	r3, #0
 80153b0:	e061      	b.n	8015476 <tcp_create_segment+0x11e>
  }
  seg->flags = optflags;
 80153b2:	693b      	ldr	r3, [r7, #16]
 80153b4:	f897 2028 	ldrb.w	r2, [r7, #40]	; 0x28
 80153b8:	729a      	strb	r2, [r3, #10]
  seg->next = NULL;
 80153ba:	693b      	ldr	r3, [r7, #16]
 80153bc:	2200      	movs	r2, #0
 80153be:	601a      	str	r2, [r3, #0]
  seg->p = p;
 80153c0:	693b      	ldr	r3, [r7, #16]
 80153c2:	68ba      	ldr	r2, [r7, #8]
 80153c4:	605a      	str	r2, [r3, #4]
  LWIP_ASSERT("p->tot_len >= optlen", p->tot_len >= optlen);
 80153c6:	68bb      	ldr	r3, [r7, #8]
 80153c8:	891a      	ldrh	r2, [r3, #8]
 80153ca:	7dfb      	ldrb	r3, [r7, #23]
 80153cc:	b29b      	uxth	r3, r3
 80153ce:	429a      	cmp	r2, r3
 80153d0:	d205      	bcs.n	80153de <tcp_create_segment+0x86>
 80153d2:	4b2b      	ldr	r3, [pc, #172]	; (8015480 <tcp_create_segment+0x128>)
 80153d4:	22b0      	movs	r2, #176	; 0xb0
 80153d6:	492e      	ldr	r1, [pc, #184]	; (8015490 <tcp_create_segment+0x138>)
 80153d8:	482b      	ldr	r0, [pc, #172]	; (8015488 <tcp_create_segment+0x130>)
 80153da:	f004 fd41 	bl	8019e60 <iprintf>
  seg->len = p->tot_len - optlen;
 80153de:	68bb      	ldr	r3, [r7, #8]
 80153e0:	891a      	ldrh	r2, [r3, #8]
 80153e2:	7dfb      	ldrb	r3, [r7, #23]
 80153e4:	b29b      	uxth	r3, r3
 80153e6:	1ad3      	subs	r3, r2, r3
 80153e8:	b29a      	uxth	r2, r3
 80153ea:	693b      	ldr	r3, [r7, #16]
 80153ec:	811a      	strh	r2, [r3, #8]
  LWIP_ASSERT("invalid optflags passed: TF_SEG_DATA_CHECKSUMMED",
              (optflags & TF_SEG_DATA_CHECKSUMMED) == 0);
#endif /* TCP_CHECKSUM_ON_COPY */

  /* build TCP header */
  if (pbuf_add_header(p, TCP_HLEN)) {
 80153ee:	2114      	movs	r1, #20
 80153f0:	68b8      	ldr	r0, [r7, #8]
 80153f2:	f7fb fdc7 	bl	8010f84 <pbuf_add_header>
 80153f6:	4603      	mov	r3, r0
 80153f8:	2b00      	cmp	r3, #0
 80153fa:	d004      	beq.n	8015406 <tcp_create_segment+0xae>
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("tcp_create_segment: no room for TCP header in pbuf.\n"));
    TCP_STATS_INC(tcp.err);
    tcp_seg_free(seg);
 80153fc:	6938      	ldr	r0, [r7, #16]
 80153fe:	f7fd f8ce 	bl	801259e <tcp_seg_free>
    return NULL;
 8015402:	2300      	movs	r3, #0
 8015404:	e037      	b.n	8015476 <tcp_create_segment+0x11e>
  }
  seg->tcphdr = (struct tcp_hdr *)seg->p->payload;
 8015406:	693b      	ldr	r3, [r7, #16]
 8015408:	685b      	ldr	r3, [r3, #4]
 801540a:	685a      	ldr	r2, [r3, #4]
 801540c:	693b      	ldr	r3, [r7, #16]
 801540e:	60da      	str	r2, [r3, #12]
  seg->tcphdr->src = lwip_htons(pcb->local_port);
 8015410:	68fb      	ldr	r3, [r7, #12]
 8015412:	8ada      	ldrh	r2, [r3, #22]
 8015414:	693b      	ldr	r3, [r7, #16]
 8015416:	68dc      	ldr	r4, [r3, #12]
 8015418:	4610      	mov	r0, r2
 801541a:	f7fa fa65 	bl	800f8e8 <lwip_htons>
 801541e:	4603      	mov	r3, r0
 8015420:	8023      	strh	r3, [r4, #0]
  seg->tcphdr->dest = lwip_htons(pcb->remote_port);
 8015422:	68fb      	ldr	r3, [r7, #12]
 8015424:	8b1a      	ldrh	r2, [r3, #24]
 8015426:	693b      	ldr	r3, [r7, #16]
 8015428:	68dc      	ldr	r4, [r3, #12]
 801542a:	4610      	mov	r0, r2
 801542c:	f7fa fa5c 	bl	800f8e8 <lwip_htons>
 8015430:	4603      	mov	r3, r0
 8015432:	8063      	strh	r3, [r4, #2]
  seg->tcphdr->seqno = lwip_htonl(seqno);
 8015434:	693b      	ldr	r3, [r7, #16]
 8015436:	68dc      	ldr	r4, [r3, #12]
 8015438:	6838      	ldr	r0, [r7, #0]
 801543a:	f7fa fa6a 	bl	800f912 <lwip_htonl>
 801543e:	4603      	mov	r3, r0
 8015440:	6063      	str	r3, [r4, #4]
  /* ackno is set in tcp_output */
  TCPH_HDRLEN_FLAGS_SET(seg->tcphdr, (5 + optlen / 4), hdrflags);
 8015442:	7dfb      	ldrb	r3, [r7, #23]
 8015444:	089b      	lsrs	r3, r3, #2
 8015446:	b2db      	uxtb	r3, r3
 8015448:	b29b      	uxth	r3, r3
 801544a:	3305      	adds	r3, #5
 801544c:	b29b      	uxth	r3, r3
 801544e:	031b      	lsls	r3, r3, #12
 8015450:	b29a      	uxth	r2, r3
 8015452:	79fb      	ldrb	r3, [r7, #7]
 8015454:	b29b      	uxth	r3, r3
 8015456:	4313      	orrs	r3, r2
 8015458:	b29a      	uxth	r2, r3
 801545a:	693b      	ldr	r3, [r7, #16]
 801545c:	68dc      	ldr	r4, [r3, #12]
 801545e:	4610      	mov	r0, r2
 8015460:	f7fa fa42 	bl	800f8e8 <lwip_htons>
 8015464:	4603      	mov	r3, r0
 8015466:	81a3      	strh	r3, [r4, #12]
  /* wnd and chksum are set in tcp_output */
  seg->tcphdr->urgp = 0;
 8015468:	693b      	ldr	r3, [r7, #16]
 801546a:	68db      	ldr	r3, [r3, #12]
 801546c:	2200      	movs	r2, #0
 801546e:	749a      	strb	r2, [r3, #18]
 8015470:	2200      	movs	r2, #0
 8015472:	74da      	strb	r2, [r3, #19]
  return seg;
 8015474:	693b      	ldr	r3, [r7, #16]
}
 8015476:	4618      	mov	r0, r3
 8015478:	371c      	adds	r7, #28
 801547a:	46bd      	mov	sp, r7
 801547c:	bd90      	pop	{r4, r7, pc}
 801547e:	bf00      	nop
 8015480:	0801e06c 	.word	0x0801e06c
 8015484:	0801e0a0 	.word	0x0801e0a0
 8015488:	0801e0c0 	.word	0x0801e0c0
 801548c:	0801e0e8 	.word	0x0801e0e8
 8015490:	0801e10c 	.word	0x0801e10c

08015494 <tcp_split_unsent_seg>:
 * @param pcb the tcp_pcb for which to split the unsent head
 * @param split the amount of payload to remain in the head
 */
err_t
tcp_split_unsent_seg(struct tcp_pcb *pcb, u16_t split)
{
 8015494:	b590      	push	{r4, r7, lr}
 8015496:	b08b      	sub	sp, #44	; 0x2c
 8015498:	af02      	add	r7, sp, #8
 801549a:	6078      	str	r0, [r7, #4]
 801549c:	460b      	mov	r3, r1
 801549e:	807b      	strh	r3, [r7, #2]
  struct tcp_seg *seg = NULL, *useg = NULL;
 80154a0:	2300      	movs	r3, #0
 80154a2:	61fb      	str	r3, [r7, #28]
 80154a4:	2300      	movs	r3, #0
 80154a6:	617b      	str	r3, [r7, #20]
  struct pbuf *p = NULL;
 80154a8:	2300      	movs	r3, #0
 80154aa:	613b      	str	r3, [r7, #16]
  u16_t chksum = 0;
  u8_t chksum_swapped = 0;
  struct pbuf *q;
#endif /* TCP_CHECKSUM_ON_COPY */

  LWIP_ASSERT("tcp_split_unsent_seg: invalid pcb", pcb != NULL);
 80154ac:	687b      	ldr	r3, [r7, #4]
 80154ae:	2b00      	cmp	r3, #0
 80154b0:	d106      	bne.n	80154c0 <tcp_split_unsent_seg+0x2c>
 80154b2:	4b95      	ldr	r3, [pc, #596]	; (8015708 <tcp_split_unsent_seg+0x274>)
 80154b4:	f240 324b 	movw	r2, #843	; 0x34b
 80154b8:	4994      	ldr	r1, [pc, #592]	; (801570c <tcp_split_unsent_seg+0x278>)
 80154ba:	4895      	ldr	r0, [pc, #596]	; (8015710 <tcp_split_unsent_seg+0x27c>)
 80154bc:	f004 fcd0 	bl	8019e60 <iprintf>

  useg = pcb->unsent;
 80154c0:	687b      	ldr	r3, [r7, #4]
 80154c2:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80154c4:	617b      	str	r3, [r7, #20]
  if (useg == NULL) {
 80154c6:	697b      	ldr	r3, [r7, #20]
 80154c8:	2b00      	cmp	r3, #0
 80154ca:	d102      	bne.n	80154d2 <tcp_split_unsent_seg+0x3e>
    return ERR_MEM;
 80154cc:	f04f 33ff 	mov.w	r3, #4294967295
 80154d0:	e116      	b.n	8015700 <tcp_split_unsent_seg+0x26c>
  }

  if (split == 0) {
 80154d2:	887b      	ldrh	r3, [r7, #2]
 80154d4:	2b00      	cmp	r3, #0
 80154d6:	d109      	bne.n	80154ec <tcp_split_unsent_seg+0x58>
    LWIP_ASSERT("Can't split segment into length 0", 0);
 80154d8:	4b8b      	ldr	r3, [pc, #556]	; (8015708 <tcp_split_unsent_seg+0x274>)
 80154da:	f240 3253 	movw	r2, #851	; 0x353
 80154de:	498d      	ldr	r1, [pc, #564]	; (8015714 <tcp_split_unsent_seg+0x280>)
 80154e0:	488b      	ldr	r0, [pc, #556]	; (8015710 <tcp_split_unsent_seg+0x27c>)
 80154e2:	f004 fcbd 	bl	8019e60 <iprintf>
    return ERR_VAL;
 80154e6:	f06f 0305 	mvn.w	r3, #5
 80154ea:	e109      	b.n	8015700 <tcp_split_unsent_seg+0x26c>
  }

  if (useg->len <= split) {
 80154ec:	697b      	ldr	r3, [r7, #20]
 80154ee:	891b      	ldrh	r3, [r3, #8]
 80154f0:	887a      	ldrh	r2, [r7, #2]
 80154f2:	429a      	cmp	r2, r3
 80154f4:	d301      	bcc.n	80154fa <tcp_split_unsent_seg+0x66>
    return ERR_OK;
 80154f6:	2300      	movs	r3, #0
 80154f8:	e102      	b.n	8015700 <tcp_split_unsent_seg+0x26c>
  }

  LWIP_ASSERT("split <= mss", split <= pcb->mss);
 80154fa:	687b      	ldr	r3, [r7, #4]
 80154fc:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 80154fe:	887a      	ldrh	r2, [r7, #2]
 8015500:	429a      	cmp	r2, r3
 8015502:	d906      	bls.n	8015512 <tcp_split_unsent_seg+0x7e>
 8015504:	4b80      	ldr	r3, [pc, #512]	; (8015708 <tcp_split_unsent_seg+0x274>)
 8015506:	f240 325b 	movw	r2, #859	; 0x35b
 801550a:	4983      	ldr	r1, [pc, #524]	; (8015718 <tcp_split_unsent_seg+0x284>)
 801550c:	4880      	ldr	r0, [pc, #512]	; (8015710 <tcp_split_unsent_seg+0x27c>)
 801550e:	f004 fca7 	bl	8019e60 <iprintf>
  LWIP_ASSERT("useg->len > 0", useg->len > 0);
 8015512:	697b      	ldr	r3, [r7, #20]
 8015514:	891b      	ldrh	r3, [r3, #8]
 8015516:	2b00      	cmp	r3, #0
 8015518:	d106      	bne.n	8015528 <tcp_split_unsent_seg+0x94>
 801551a:	4b7b      	ldr	r3, [pc, #492]	; (8015708 <tcp_split_unsent_seg+0x274>)
 801551c:	f44f 7257 	mov.w	r2, #860	; 0x35c
 8015520:	497e      	ldr	r1, [pc, #504]	; (801571c <tcp_split_unsent_seg+0x288>)
 8015522:	487b      	ldr	r0, [pc, #492]	; (8015710 <tcp_split_unsent_seg+0x27c>)
 8015524:	f004 fc9c 	bl	8019e60 <iprintf>
   * to split this packet so we may actually exceed the max value by
   * one!
   */
  LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_enqueue: split_unsent_seg: %u\n", (unsigned int)pcb->snd_queuelen));

  optflags = useg->flags;
 8015528:	697b      	ldr	r3, [r7, #20]
 801552a:	7a9b      	ldrb	r3, [r3, #10]
 801552c:	73fb      	strb	r3, [r7, #15]
#if TCP_CHECKSUM_ON_COPY
  /* Remove since checksum is not stored until after tcp_create_segment() */
  optflags &= ~TF_SEG_DATA_CHECKSUMMED;
#endif /* TCP_CHECKSUM_ON_COPY */
  optlen = LWIP_TCP_OPT_LENGTH(optflags);
 801552e:	7bfb      	ldrb	r3, [r7, #15]
 8015530:	009b      	lsls	r3, r3, #2
 8015532:	b2db      	uxtb	r3, r3
 8015534:	f003 0304 	and.w	r3, r3, #4
 8015538:	73bb      	strb	r3, [r7, #14]
  remainder = useg->len - split;
 801553a:	697b      	ldr	r3, [r7, #20]
 801553c:	891a      	ldrh	r2, [r3, #8]
 801553e:	887b      	ldrh	r3, [r7, #2]
 8015540:	1ad3      	subs	r3, r2, r3
 8015542:	81bb      	strh	r3, [r7, #12]

  /* Create new pbuf for the remainder of the split */
  p = pbuf_alloc(PBUF_TRANSPORT, remainder + optlen, PBUF_RAM);
 8015544:	7bbb      	ldrb	r3, [r7, #14]
 8015546:	b29a      	uxth	r2, r3
 8015548:	89bb      	ldrh	r3, [r7, #12]
 801554a:	4413      	add	r3, r2
 801554c:	b29b      	uxth	r3, r3
 801554e:	f44f 7220 	mov.w	r2, #640	; 0x280
 8015552:	4619      	mov	r1, r3
 8015554:	2036      	movs	r0, #54	; 0x36
 8015556:	f7fb fac7 	bl	8010ae8 <pbuf_alloc>
 801555a:	6138      	str	r0, [r7, #16]
  if (p == NULL) {
 801555c:	693b      	ldr	r3, [r7, #16]
 801555e:	2b00      	cmp	r3, #0
 8015560:	f000 80b7 	beq.w	80156d2 <tcp_split_unsent_seg+0x23e>
                ("tcp_split_unsent_seg: could not allocate memory for pbuf remainder %u\n", remainder));
    goto memerr;
  }

  /* Offset into the original pbuf is past TCP/IP headers, options, and split amount */
  offset = useg->p->tot_len - useg->len + split;
 8015564:	697b      	ldr	r3, [r7, #20]
 8015566:	685b      	ldr	r3, [r3, #4]
 8015568:	891a      	ldrh	r2, [r3, #8]
 801556a:	697b      	ldr	r3, [r7, #20]
 801556c:	891b      	ldrh	r3, [r3, #8]
 801556e:	1ad3      	subs	r3, r2, r3
 8015570:	b29a      	uxth	r2, r3
 8015572:	887b      	ldrh	r3, [r7, #2]
 8015574:	4413      	add	r3, r2
 8015576:	817b      	strh	r3, [r7, #10]
  /* Copy remainder into new pbuf, headers and options will not be filled out */
  if (pbuf_copy_partial(useg->p, (u8_t *)p->payload + optlen, remainder, offset ) != remainder) {
 8015578:	697b      	ldr	r3, [r7, #20]
 801557a:	6858      	ldr	r0, [r3, #4]
 801557c:	693b      	ldr	r3, [r7, #16]
 801557e:	685a      	ldr	r2, [r3, #4]
 8015580:	7bbb      	ldrb	r3, [r7, #14]
 8015582:	18d1      	adds	r1, r2, r3
 8015584:	897b      	ldrh	r3, [r7, #10]
 8015586:	89ba      	ldrh	r2, [r7, #12]
 8015588:	f7fb ff7c 	bl	8011484 <pbuf_copy_partial>
 801558c:	4603      	mov	r3, r0
 801558e:	461a      	mov	r2, r3
 8015590:	89bb      	ldrh	r3, [r7, #12]
 8015592:	4293      	cmp	r3, r2
 8015594:	f040 809f 	bne.w	80156d6 <tcp_split_unsent_seg+0x242>
#endif /* TCP_CHECKSUM_ON_COPY */

  /* Options are created when calling tcp_output() */

  /* Migrate flags from original segment */
  split_flags = TCPH_FLAGS(useg->tcphdr);
 8015598:	697b      	ldr	r3, [r7, #20]
 801559a:	68db      	ldr	r3, [r3, #12]
 801559c:	899b      	ldrh	r3, [r3, #12]
 801559e:	b29b      	uxth	r3, r3
 80155a0:	4618      	mov	r0, r3
 80155a2:	f7fa f9a1 	bl	800f8e8 <lwip_htons>
 80155a6:	4603      	mov	r3, r0
 80155a8:	b2db      	uxtb	r3, r3
 80155aa:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80155ae:	76fb      	strb	r3, [r7, #27]
  remainder_flags = 0; /* ACK added in tcp_output() */
 80155b0:	2300      	movs	r3, #0
 80155b2:	76bb      	strb	r3, [r7, #26]

  if (split_flags & TCP_PSH) {
 80155b4:	7efb      	ldrb	r3, [r7, #27]
 80155b6:	f003 0308 	and.w	r3, r3, #8
 80155ba:	2b00      	cmp	r3, #0
 80155bc:	d007      	beq.n	80155ce <tcp_split_unsent_seg+0x13a>
    split_flags &= ~TCP_PSH;
 80155be:	7efb      	ldrb	r3, [r7, #27]
 80155c0:	f023 0308 	bic.w	r3, r3, #8
 80155c4:	76fb      	strb	r3, [r7, #27]
    remainder_flags |= TCP_PSH;
 80155c6:	7ebb      	ldrb	r3, [r7, #26]
 80155c8:	f043 0308 	orr.w	r3, r3, #8
 80155cc:	76bb      	strb	r3, [r7, #26]
  }
  if (split_flags & TCP_FIN) {
 80155ce:	7efb      	ldrb	r3, [r7, #27]
 80155d0:	f003 0301 	and.w	r3, r3, #1
 80155d4:	2b00      	cmp	r3, #0
 80155d6:	d007      	beq.n	80155e8 <tcp_split_unsent_seg+0x154>
    split_flags &= ~TCP_FIN;
 80155d8:	7efb      	ldrb	r3, [r7, #27]
 80155da:	f023 0301 	bic.w	r3, r3, #1
 80155de:	76fb      	strb	r3, [r7, #27]
    remainder_flags |= TCP_FIN;
 80155e0:	7ebb      	ldrb	r3, [r7, #26]
 80155e2:	f043 0301 	orr.w	r3, r3, #1
 80155e6:	76bb      	strb	r3, [r7, #26]
  }
  /* SYN should be left on split, RST should not be present with data */

  seg = tcp_create_segment(pcb, p, remainder_flags, lwip_ntohl(useg->tcphdr->seqno) + split, optflags);
 80155e8:	697b      	ldr	r3, [r7, #20]
 80155ea:	68db      	ldr	r3, [r3, #12]
 80155ec:	685b      	ldr	r3, [r3, #4]
 80155ee:	4618      	mov	r0, r3
 80155f0:	f7fa f98f 	bl	800f912 <lwip_htonl>
 80155f4:	4602      	mov	r2, r0
 80155f6:	887b      	ldrh	r3, [r7, #2]
 80155f8:	18d1      	adds	r1, r2, r3
 80155fa:	7eba      	ldrb	r2, [r7, #26]
 80155fc:	7bfb      	ldrb	r3, [r7, #15]
 80155fe:	9300      	str	r3, [sp, #0]
 8015600:	460b      	mov	r3, r1
 8015602:	6939      	ldr	r1, [r7, #16]
 8015604:	6878      	ldr	r0, [r7, #4]
 8015606:	f7ff fea7 	bl	8015358 <tcp_create_segment>
 801560a:	61f8      	str	r0, [r7, #28]
  if (seg == NULL) {
 801560c:	69fb      	ldr	r3, [r7, #28]
 801560e:	2b00      	cmp	r3, #0
 8015610:	d063      	beq.n	80156da <tcp_split_unsent_seg+0x246>
  seg->chksum_swapped = chksum_swapped;
  seg->flags |= TF_SEG_DATA_CHECKSUMMED;
#endif /* TCP_CHECKSUM_ON_COPY */

  /* Remove this segment from the queue since trimming it may free pbufs */
  pcb->snd_queuelen -= pbuf_clen(useg->p);
 8015612:	697b      	ldr	r3, [r7, #20]
 8015614:	685b      	ldr	r3, [r3, #4]
 8015616:	4618      	mov	r0, r3
 8015618:	f7fb fdd2 	bl	80111c0 <pbuf_clen>
 801561c:	4603      	mov	r3, r0
 801561e:	461a      	mov	r2, r3
 8015620:	687b      	ldr	r3, [r7, #4]
 8015622:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 8015626:	1a9b      	subs	r3, r3, r2
 8015628:	b29a      	uxth	r2, r3
 801562a:	687b      	ldr	r3, [r7, #4]
 801562c:	f8a3 2066 	strh.w	r2, [r3, #102]	; 0x66

  /* Trim the original pbuf into our split size.  At this point our remainder segment must be setup
  successfully because we are modifying the original segment */
  pbuf_realloc(useg->p, useg->p->tot_len - remainder);
 8015630:	697b      	ldr	r3, [r7, #20]
 8015632:	6858      	ldr	r0, [r3, #4]
 8015634:	697b      	ldr	r3, [r7, #20]
 8015636:	685b      	ldr	r3, [r3, #4]
 8015638:	891a      	ldrh	r2, [r3, #8]
 801563a:	89bb      	ldrh	r3, [r7, #12]
 801563c:	1ad3      	subs	r3, r2, r3
 801563e:	b29b      	uxth	r3, r3
 8015640:	4619      	mov	r1, r3
 8015642:	f7fb fbb1 	bl	8010da8 <pbuf_realloc>
  useg->len -= remainder;
 8015646:	697b      	ldr	r3, [r7, #20]
 8015648:	891a      	ldrh	r2, [r3, #8]
 801564a:	89bb      	ldrh	r3, [r7, #12]
 801564c:	1ad3      	subs	r3, r2, r3
 801564e:	b29a      	uxth	r2, r3
 8015650:	697b      	ldr	r3, [r7, #20]
 8015652:	811a      	strh	r2, [r3, #8]
  TCPH_SET_FLAG(useg->tcphdr, split_flags);
 8015654:	697b      	ldr	r3, [r7, #20]
 8015656:	68db      	ldr	r3, [r3, #12]
 8015658:	899b      	ldrh	r3, [r3, #12]
 801565a:	b29c      	uxth	r4, r3
 801565c:	7efb      	ldrb	r3, [r7, #27]
 801565e:	b29b      	uxth	r3, r3
 8015660:	4618      	mov	r0, r3
 8015662:	f7fa f941 	bl	800f8e8 <lwip_htons>
 8015666:	4603      	mov	r3, r0
 8015668:	461a      	mov	r2, r3
 801566a:	697b      	ldr	r3, [r7, #20]
 801566c:	68db      	ldr	r3, [r3, #12]
 801566e:	4322      	orrs	r2, r4
 8015670:	b292      	uxth	r2, r2
 8015672:	819a      	strh	r2, [r3, #12]
  /* By trimming, realloc may have actually shrunk the pbuf, so clear oversize_left */
  useg->oversize_left = 0;
#endif /* TCP_OVERSIZE_DBGCHECK */

  /* Add back to the queue with new trimmed pbuf */
  pcb->snd_queuelen += pbuf_clen(useg->p);
 8015674:	697b      	ldr	r3, [r7, #20]
 8015676:	685b      	ldr	r3, [r3, #4]
 8015678:	4618      	mov	r0, r3
 801567a:	f7fb fda1 	bl	80111c0 <pbuf_clen>
 801567e:	4603      	mov	r3, r0
 8015680:	461a      	mov	r2, r3
 8015682:	687b      	ldr	r3, [r7, #4]
 8015684:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 8015688:	4413      	add	r3, r2
 801568a:	b29a      	uxth	r2, r3
 801568c:	687b      	ldr	r3, [r7, #4]
 801568e:	f8a3 2066 	strh.w	r2, [r3, #102]	; 0x66
#endif /* TCP_CHECKSUM_ON_COPY */

  /* Update number of segments on the queues. Note that length now may
   * exceed TCP_SND_QUEUELEN! We don't have to touch pcb->snd_buf
   * because the total amount of data is constant when packet is split */
  pcb->snd_queuelen += pbuf_clen(seg->p);
 8015692:	69fb      	ldr	r3, [r7, #28]
 8015694:	685b      	ldr	r3, [r3, #4]
 8015696:	4618      	mov	r0, r3
 8015698:	f7fb fd92 	bl	80111c0 <pbuf_clen>
 801569c:	4603      	mov	r3, r0
 801569e:	461a      	mov	r2, r3
 80156a0:	687b      	ldr	r3, [r7, #4]
 80156a2:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 80156a6:	4413      	add	r3, r2
 80156a8:	b29a      	uxth	r2, r3
 80156aa:	687b      	ldr	r3, [r7, #4]
 80156ac:	f8a3 2066 	strh.w	r2, [r3, #102]	; 0x66

  /* Finally insert remainder into queue after split (which stays head) */
  seg->next = useg->next;
 80156b0:	697b      	ldr	r3, [r7, #20]
 80156b2:	681a      	ldr	r2, [r3, #0]
 80156b4:	69fb      	ldr	r3, [r7, #28]
 80156b6:	601a      	str	r2, [r3, #0]
  useg->next = seg;
 80156b8:	697b      	ldr	r3, [r7, #20]
 80156ba:	69fa      	ldr	r2, [r7, #28]
 80156bc:	601a      	str	r2, [r3, #0]

#if TCP_OVERSIZE
  /* If remainder is last segment on the unsent, ensure we clear the oversize amount
   * because the remainder is always sized to the exact remaining amount */
  if (seg->next == NULL) {
 80156be:	69fb      	ldr	r3, [r7, #28]
 80156c0:	681b      	ldr	r3, [r3, #0]
 80156c2:	2b00      	cmp	r3, #0
 80156c4:	d103      	bne.n	80156ce <tcp_split_unsent_seg+0x23a>
    pcb->unsent_oversize = 0;
 80156c6:	687b      	ldr	r3, [r7, #4]
 80156c8:	2200      	movs	r2, #0
 80156ca:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
  }
#endif /* TCP_OVERSIZE */

  return ERR_OK;
 80156ce:	2300      	movs	r3, #0
 80156d0:	e016      	b.n	8015700 <tcp_split_unsent_seg+0x26c>
    goto memerr;
 80156d2:	bf00      	nop
 80156d4:	e002      	b.n	80156dc <tcp_split_unsent_seg+0x248>
    goto memerr;
 80156d6:	bf00      	nop
 80156d8:	e000      	b.n	80156dc <tcp_split_unsent_seg+0x248>
    goto memerr;
 80156da:	bf00      	nop
memerr:
  TCP_STATS_INC(tcp.memerr);

  LWIP_ASSERT("seg == NULL", seg == NULL);
 80156dc:	69fb      	ldr	r3, [r7, #28]
 80156de:	2b00      	cmp	r3, #0
 80156e0:	d006      	beq.n	80156f0 <tcp_split_unsent_seg+0x25c>
 80156e2:	4b09      	ldr	r3, [pc, #36]	; (8015708 <tcp_split_unsent_seg+0x274>)
 80156e4:	f44f 7276 	mov.w	r2, #984	; 0x3d8
 80156e8:	490d      	ldr	r1, [pc, #52]	; (8015720 <tcp_split_unsent_seg+0x28c>)
 80156ea:	4809      	ldr	r0, [pc, #36]	; (8015710 <tcp_split_unsent_seg+0x27c>)
 80156ec:	f004 fbb8 	bl	8019e60 <iprintf>
  if (p != NULL) {
 80156f0:	693b      	ldr	r3, [r7, #16]
 80156f2:	2b00      	cmp	r3, #0
 80156f4:	d002      	beq.n	80156fc <tcp_split_unsent_seg+0x268>
    pbuf_free(p);
 80156f6:	6938      	ldr	r0, [r7, #16]
 80156f8:	f7fb fcda 	bl	80110b0 <pbuf_free>
  }

  return ERR_MEM;
 80156fc:	f04f 33ff 	mov.w	r3, #4294967295
}
 8015700:	4618      	mov	r0, r3
 8015702:	3724      	adds	r7, #36	; 0x24
 8015704:	46bd      	mov	sp, r7
 8015706:	bd90      	pop	{r4, r7, pc}
 8015708:	0801e06c 	.word	0x0801e06c
 801570c:	0801e400 	.word	0x0801e400
 8015710:	0801e0c0 	.word	0x0801e0c0
 8015714:	0801e424 	.word	0x0801e424
 8015718:	0801e448 	.word	0x0801e448
 801571c:	0801e458 	.word	0x0801e458
 8015720:	0801e468 	.word	0x0801e468

08015724 <tcp_send_fin>:
 * @param pcb the tcp_pcb over which to send a segment
 * @return ERR_OK if sent, another err_t otherwise
 */
err_t
tcp_send_fin(struct tcp_pcb *pcb)
{
 8015724:	b590      	push	{r4, r7, lr}
 8015726:	b085      	sub	sp, #20
 8015728:	af00      	add	r7, sp, #0
 801572a:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_send_fin: invalid pcb", pcb != NULL);
 801572c:	687b      	ldr	r3, [r7, #4]
 801572e:	2b00      	cmp	r3, #0
 8015730:	d106      	bne.n	8015740 <tcp_send_fin+0x1c>
 8015732:	4b21      	ldr	r3, [pc, #132]	; (80157b8 <tcp_send_fin+0x94>)
 8015734:	f240 32eb 	movw	r2, #1003	; 0x3eb
 8015738:	4920      	ldr	r1, [pc, #128]	; (80157bc <tcp_send_fin+0x98>)
 801573a:	4821      	ldr	r0, [pc, #132]	; (80157c0 <tcp_send_fin+0x9c>)
 801573c:	f004 fb90 	bl	8019e60 <iprintf>

  /* first, try to add the fin to the last unsent segment */
  if (pcb->unsent != NULL) {
 8015740:	687b      	ldr	r3, [r7, #4]
 8015742:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8015744:	2b00      	cmp	r3, #0
 8015746:	d02e      	beq.n	80157a6 <tcp_send_fin+0x82>
    struct tcp_seg *last_unsent;
    for (last_unsent = pcb->unsent; last_unsent->next != NULL;
 8015748:	687b      	ldr	r3, [r7, #4]
 801574a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 801574c:	60fb      	str	r3, [r7, #12]
 801574e:	e002      	b.n	8015756 <tcp_send_fin+0x32>
         last_unsent = last_unsent->next);
 8015750:	68fb      	ldr	r3, [r7, #12]
 8015752:	681b      	ldr	r3, [r3, #0]
 8015754:	60fb      	str	r3, [r7, #12]
    for (last_unsent = pcb->unsent; last_unsent->next != NULL;
 8015756:	68fb      	ldr	r3, [r7, #12]
 8015758:	681b      	ldr	r3, [r3, #0]
 801575a:	2b00      	cmp	r3, #0
 801575c:	d1f8      	bne.n	8015750 <tcp_send_fin+0x2c>

    if ((TCPH_FLAGS(last_unsent->tcphdr) & (TCP_SYN | TCP_FIN | TCP_RST)) == 0) {
 801575e:	68fb      	ldr	r3, [r7, #12]
 8015760:	68db      	ldr	r3, [r3, #12]
 8015762:	899b      	ldrh	r3, [r3, #12]
 8015764:	b29b      	uxth	r3, r3
 8015766:	4618      	mov	r0, r3
 8015768:	f7fa f8be 	bl	800f8e8 <lwip_htons>
 801576c:	4603      	mov	r3, r0
 801576e:	b2db      	uxtb	r3, r3
 8015770:	f003 0307 	and.w	r3, r3, #7
 8015774:	2b00      	cmp	r3, #0
 8015776:	d116      	bne.n	80157a6 <tcp_send_fin+0x82>
      /* no SYN/FIN/RST flag in the header, we can add the FIN flag */
      TCPH_SET_FLAG(last_unsent->tcphdr, TCP_FIN);
 8015778:	68fb      	ldr	r3, [r7, #12]
 801577a:	68db      	ldr	r3, [r3, #12]
 801577c:	899b      	ldrh	r3, [r3, #12]
 801577e:	b29c      	uxth	r4, r3
 8015780:	2001      	movs	r0, #1
 8015782:	f7fa f8b1 	bl	800f8e8 <lwip_htons>
 8015786:	4603      	mov	r3, r0
 8015788:	461a      	mov	r2, r3
 801578a:	68fb      	ldr	r3, [r7, #12]
 801578c:	68db      	ldr	r3, [r3, #12]
 801578e:	4322      	orrs	r2, r4
 8015790:	b292      	uxth	r2, r2
 8015792:	819a      	strh	r2, [r3, #12]
      tcp_set_flags(pcb, TF_FIN);
 8015794:	687b      	ldr	r3, [r7, #4]
 8015796:	8b5b      	ldrh	r3, [r3, #26]
 8015798:	f043 0320 	orr.w	r3, r3, #32
 801579c:	b29a      	uxth	r2, r3
 801579e:	687b      	ldr	r3, [r7, #4]
 80157a0:	835a      	strh	r2, [r3, #26]
      return ERR_OK;
 80157a2:	2300      	movs	r3, #0
 80157a4:	e004      	b.n	80157b0 <tcp_send_fin+0x8c>
    }
  }
  /* no data, no length, flags, copy=1, no optdata */
  return tcp_enqueue_flags(pcb, TCP_FIN);
 80157a6:	2101      	movs	r1, #1
 80157a8:	6878      	ldr	r0, [r7, #4]
 80157aa:	f000 f80b 	bl	80157c4 <tcp_enqueue_flags>
 80157ae:	4603      	mov	r3, r0
}
 80157b0:	4618      	mov	r0, r3
 80157b2:	3714      	adds	r7, #20
 80157b4:	46bd      	mov	sp, r7
 80157b6:	bd90      	pop	{r4, r7, pc}
 80157b8:	0801e06c 	.word	0x0801e06c
 80157bc:	0801e474 	.word	0x0801e474
 80157c0:	0801e0c0 	.word	0x0801e0c0

080157c4 <tcp_enqueue_flags>:
 * @param pcb Protocol control block for the TCP connection.
 * @param flags TCP header flags to set in the outgoing segment.
 */
err_t
tcp_enqueue_flags(struct tcp_pcb *pcb, u8_t flags)
{
 80157c4:	b580      	push	{r7, lr}
 80157c6:	b08a      	sub	sp, #40	; 0x28
 80157c8:	af02      	add	r7, sp, #8
 80157ca:	6078      	str	r0, [r7, #4]
 80157cc:	460b      	mov	r3, r1
 80157ce:	70fb      	strb	r3, [r7, #3]
  struct pbuf *p;
  struct tcp_seg *seg;
  u8_t optflags = 0;
 80157d0:	2300      	movs	r3, #0
 80157d2:	77fb      	strb	r3, [r7, #31]
  u8_t optlen = 0;
 80157d4:	2300      	movs	r3, #0
 80157d6:	75fb      	strb	r3, [r7, #23]

  LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_enqueue_flags: queuelen: %"U16_F"\n", (u16_t)pcb->snd_queuelen));

  LWIP_ASSERT("tcp_enqueue_flags: need either TCP_SYN or TCP_FIN in flags (programmer violates API)",
 80157d8:	78fb      	ldrb	r3, [r7, #3]
 80157da:	f003 0303 	and.w	r3, r3, #3
 80157de:	2b00      	cmp	r3, #0
 80157e0:	d106      	bne.n	80157f0 <tcp_enqueue_flags+0x2c>
 80157e2:	4b67      	ldr	r3, [pc, #412]	; (8015980 <tcp_enqueue_flags+0x1bc>)
 80157e4:	f240 4211 	movw	r2, #1041	; 0x411
 80157e8:	4966      	ldr	r1, [pc, #408]	; (8015984 <tcp_enqueue_flags+0x1c0>)
 80157ea:	4867      	ldr	r0, [pc, #412]	; (8015988 <tcp_enqueue_flags+0x1c4>)
 80157ec:	f004 fb38 	bl	8019e60 <iprintf>
              (flags & (TCP_SYN | TCP_FIN)) != 0);
  LWIP_ASSERT("tcp_enqueue_flags: invalid pcb", pcb != NULL);
 80157f0:	687b      	ldr	r3, [r7, #4]
 80157f2:	2b00      	cmp	r3, #0
 80157f4:	d106      	bne.n	8015804 <tcp_enqueue_flags+0x40>
 80157f6:	4b62      	ldr	r3, [pc, #392]	; (8015980 <tcp_enqueue_flags+0x1bc>)
 80157f8:	f240 4213 	movw	r2, #1043	; 0x413
 80157fc:	4963      	ldr	r1, [pc, #396]	; (801598c <tcp_enqueue_flags+0x1c8>)
 80157fe:	4862      	ldr	r0, [pc, #392]	; (8015988 <tcp_enqueue_flags+0x1c4>)
 8015800:	f004 fb2e 	bl	8019e60 <iprintf>

  /* No need to check pcb->snd_queuelen if only SYN or FIN are allowed! */

  /* Get options for this segment. This is a special case since this is the
     only place where a SYN can be sent. */
  if (flags & TCP_SYN) {
 8015804:	78fb      	ldrb	r3, [r7, #3]
 8015806:	f003 0302 	and.w	r3, r3, #2
 801580a:	2b00      	cmp	r3, #0
 801580c:	d001      	beq.n	8015812 <tcp_enqueue_flags+0x4e>
    optflags = TF_SEG_OPTS_MSS;
 801580e:	2301      	movs	r3, #1
 8015810:	77fb      	strb	r3, [r7, #31]
    /* Make sure the timestamp option is only included in data segments if we
       agreed about it with the remote host (and in active open SYN segments). */
    optflags |= TF_SEG_OPTS_TS;
  }
#endif /* LWIP_TCP_TIMESTAMPS */
  optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(optflags, pcb);
 8015812:	7ffb      	ldrb	r3, [r7, #31]
 8015814:	009b      	lsls	r3, r3, #2
 8015816:	b2db      	uxtb	r3, r3
 8015818:	f003 0304 	and.w	r3, r3, #4
 801581c:	75fb      	strb	r3, [r7, #23]

  /* Allocate pbuf with room for TCP header + options */
  if ((p = pbuf_alloc(PBUF_TRANSPORT, optlen, PBUF_RAM)) == NULL) {
 801581e:	7dfb      	ldrb	r3, [r7, #23]
 8015820:	b29b      	uxth	r3, r3
 8015822:	f44f 7220 	mov.w	r2, #640	; 0x280
 8015826:	4619      	mov	r1, r3
 8015828:	2036      	movs	r0, #54	; 0x36
 801582a:	f7fb f95d 	bl	8010ae8 <pbuf_alloc>
 801582e:	6138      	str	r0, [r7, #16]
 8015830:	693b      	ldr	r3, [r7, #16]
 8015832:	2b00      	cmp	r3, #0
 8015834:	d109      	bne.n	801584a <tcp_enqueue_flags+0x86>
    tcp_set_flags(pcb, TF_NAGLEMEMERR);
 8015836:	687b      	ldr	r3, [r7, #4]
 8015838:	8b5b      	ldrh	r3, [r3, #26]
 801583a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 801583e:	b29a      	uxth	r2, r3
 8015840:	687b      	ldr	r3, [r7, #4]
 8015842:	835a      	strh	r2, [r3, #26]
    TCP_STATS_INC(tcp.memerr);
    return ERR_MEM;
 8015844:	f04f 33ff 	mov.w	r3, #4294967295
 8015848:	e095      	b.n	8015976 <tcp_enqueue_flags+0x1b2>
  }
  LWIP_ASSERT("tcp_enqueue_flags: check that first pbuf can hold optlen",
 801584a:	693b      	ldr	r3, [r7, #16]
 801584c:	895a      	ldrh	r2, [r3, #10]
 801584e:	7dfb      	ldrb	r3, [r7, #23]
 8015850:	b29b      	uxth	r3, r3
 8015852:	429a      	cmp	r2, r3
 8015854:	d206      	bcs.n	8015864 <tcp_enqueue_flags+0xa0>
 8015856:	4b4a      	ldr	r3, [pc, #296]	; (8015980 <tcp_enqueue_flags+0x1bc>)
 8015858:	f240 4239 	movw	r2, #1081	; 0x439
 801585c:	494c      	ldr	r1, [pc, #304]	; (8015990 <tcp_enqueue_flags+0x1cc>)
 801585e:	484a      	ldr	r0, [pc, #296]	; (8015988 <tcp_enqueue_flags+0x1c4>)
 8015860:	f004 fafe 	bl	8019e60 <iprintf>
              (p->len >= optlen));

  /* Allocate memory for tcp_seg, and fill in fields. */
  if ((seg = tcp_create_segment(pcb, p, flags, pcb->snd_lbb, optflags)) == NULL) {
 8015864:	687b      	ldr	r3, [r7, #4]
 8015866:	6dd9      	ldr	r1, [r3, #92]	; 0x5c
 8015868:	78fa      	ldrb	r2, [r7, #3]
 801586a:	7ffb      	ldrb	r3, [r7, #31]
 801586c:	9300      	str	r3, [sp, #0]
 801586e:	460b      	mov	r3, r1
 8015870:	6939      	ldr	r1, [r7, #16]
 8015872:	6878      	ldr	r0, [r7, #4]
 8015874:	f7ff fd70 	bl	8015358 <tcp_create_segment>
 8015878:	60f8      	str	r0, [r7, #12]
 801587a:	68fb      	ldr	r3, [r7, #12]
 801587c:	2b00      	cmp	r3, #0
 801587e:	d109      	bne.n	8015894 <tcp_enqueue_flags+0xd0>
    tcp_set_flags(pcb, TF_NAGLEMEMERR);
 8015880:	687b      	ldr	r3, [r7, #4]
 8015882:	8b5b      	ldrh	r3, [r3, #26]
 8015884:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8015888:	b29a      	uxth	r2, r3
 801588a:	687b      	ldr	r3, [r7, #4]
 801588c:	835a      	strh	r2, [r3, #26]
    TCP_STATS_INC(tcp.memerr);
    return ERR_MEM;
 801588e:	f04f 33ff 	mov.w	r3, #4294967295
 8015892:	e070      	b.n	8015976 <tcp_enqueue_flags+0x1b2>
  }
  LWIP_ASSERT("seg->tcphdr not aligned", ((mem_ptr_t)seg->tcphdr % LWIP_MIN(MEM_ALIGNMENT, 4)) == 0);
 8015894:	68fb      	ldr	r3, [r7, #12]
 8015896:	68db      	ldr	r3, [r3, #12]
 8015898:	f003 0303 	and.w	r3, r3, #3
 801589c:	2b00      	cmp	r3, #0
 801589e:	d006      	beq.n	80158ae <tcp_enqueue_flags+0xea>
 80158a0:	4b37      	ldr	r3, [pc, #220]	; (8015980 <tcp_enqueue_flags+0x1bc>)
 80158a2:	f240 4242 	movw	r2, #1090	; 0x442
 80158a6:	493b      	ldr	r1, [pc, #236]	; (8015994 <tcp_enqueue_flags+0x1d0>)
 80158a8:	4837      	ldr	r0, [pc, #220]	; (8015988 <tcp_enqueue_flags+0x1c4>)
 80158aa:	f004 fad9 	bl	8019e60 <iprintf>
  LWIP_ASSERT("tcp_enqueue_flags: invalid segment length", seg->len == 0);
 80158ae:	68fb      	ldr	r3, [r7, #12]
 80158b0:	891b      	ldrh	r3, [r3, #8]
 80158b2:	2b00      	cmp	r3, #0
 80158b4:	d006      	beq.n	80158c4 <tcp_enqueue_flags+0x100>
 80158b6:	4b32      	ldr	r3, [pc, #200]	; (8015980 <tcp_enqueue_flags+0x1bc>)
 80158b8:	f240 4243 	movw	r2, #1091	; 0x443
 80158bc:	4936      	ldr	r1, [pc, #216]	; (8015998 <tcp_enqueue_flags+0x1d4>)
 80158be:	4832      	ldr	r0, [pc, #200]	; (8015988 <tcp_enqueue_flags+0x1c4>)
 80158c0:	f004 face 	bl	8019e60 <iprintf>
               lwip_ntohl(seg->tcphdr->seqno),
               lwip_ntohl(seg->tcphdr->seqno) + TCP_TCPLEN(seg),
               (u16_t)flags));

  /* Now append seg to pcb->unsent queue */
  if (pcb->unsent == NULL) {
 80158c4:	687b      	ldr	r3, [r7, #4]
 80158c6:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80158c8:	2b00      	cmp	r3, #0
 80158ca:	d103      	bne.n	80158d4 <tcp_enqueue_flags+0x110>
    pcb->unsent = seg;
 80158cc:	687b      	ldr	r3, [r7, #4]
 80158ce:	68fa      	ldr	r2, [r7, #12]
 80158d0:	66da      	str	r2, [r3, #108]	; 0x6c
 80158d2:	e00d      	b.n	80158f0 <tcp_enqueue_flags+0x12c>
  } else {
    struct tcp_seg *useg;
    for (useg = pcb->unsent; useg->next != NULL; useg = useg->next);
 80158d4:	687b      	ldr	r3, [r7, #4]
 80158d6:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80158d8:	61bb      	str	r3, [r7, #24]
 80158da:	e002      	b.n	80158e2 <tcp_enqueue_flags+0x11e>
 80158dc:	69bb      	ldr	r3, [r7, #24]
 80158de:	681b      	ldr	r3, [r3, #0]
 80158e0:	61bb      	str	r3, [r7, #24]
 80158e2:	69bb      	ldr	r3, [r7, #24]
 80158e4:	681b      	ldr	r3, [r3, #0]
 80158e6:	2b00      	cmp	r3, #0
 80158e8:	d1f8      	bne.n	80158dc <tcp_enqueue_flags+0x118>
    useg->next = seg;
 80158ea:	69bb      	ldr	r3, [r7, #24]
 80158ec:	68fa      	ldr	r2, [r7, #12]
 80158ee:	601a      	str	r2, [r3, #0]
  }
#if TCP_OVERSIZE
  /* The new unsent tail has no space */
  pcb->unsent_oversize = 0;
 80158f0:	687b      	ldr	r3, [r7, #4]
 80158f2:	2200      	movs	r2, #0
 80158f4:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
#endif /* TCP_OVERSIZE */

  /* SYN and FIN bump the sequence number */
  if ((flags & TCP_SYN) || (flags & TCP_FIN)) {
 80158f8:	78fb      	ldrb	r3, [r7, #3]
 80158fa:	f003 0302 	and.w	r3, r3, #2
 80158fe:	2b00      	cmp	r3, #0
 8015900:	d104      	bne.n	801590c <tcp_enqueue_flags+0x148>
 8015902:	78fb      	ldrb	r3, [r7, #3]
 8015904:	f003 0301 	and.w	r3, r3, #1
 8015908:	2b00      	cmp	r3, #0
 801590a:	d004      	beq.n	8015916 <tcp_enqueue_flags+0x152>
    pcb->snd_lbb++;
 801590c:	687b      	ldr	r3, [r7, #4]
 801590e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8015910:	1c5a      	adds	r2, r3, #1
 8015912:	687b      	ldr	r3, [r7, #4]
 8015914:	65da      	str	r2, [r3, #92]	; 0x5c
    /* optlen does not influence snd_buf */
  }
  if (flags & TCP_FIN) {
 8015916:	78fb      	ldrb	r3, [r7, #3]
 8015918:	f003 0301 	and.w	r3, r3, #1
 801591c:	2b00      	cmp	r3, #0
 801591e:	d006      	beq.n	801592e <tcp_enqueue_flags+0x16a>
    tcp_set_flags(pcb, TF_FIN);
 8015920:	687b      	ldr	r3, [r7, #4]
 8015922:	8b5b      	ldrh	r3, [r3, #26]
 8015924:	f043 0320 	orr.w	r3, r3, #32
 8015928:	b29a      	uxth	r2, r3
 801592a:	687b      	ldr	r3, [r7, #4]
 801592c:	835a      	strh	r2, [r3, #26]
  }

  /* update number of segments on the queues */
  pcb->snd_queuelen += pbuf_clen(seg->p);
 801592e:	68fb      	ldr	r3, [r7, #12]
 8015930:	685b      	ldr	r3, [r3, #4]
 8015932:	4618      	mov	r0, r3
 8015934:	f7fb fc44 	bl	80111c0 <pbuf_clen>
 8015938:	4603      	mov	r3, r0
 801593a:	461a      	mov	r2, r3
 801593c:	687b      	ldr	r3, [r7, #4]
 801593e:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 8015942:	4413      	add	r3, r2
 8015944:	b29a      	uxth	r2, r3
 8015946:	687b      	ldr	r3, [r7, #4]
 8015948:	f8a3 2066 	strh.w	r2, [r3, #102]	; 0x66
  LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_enqueue_flags: %"S16_F" (after enqueued)\n", pcb->snd_queuelen));
  if (pcb->snd_queuelen != 0) {
 801594c:	687b      	ldr	r3, [r7, #4]
 801594e:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 8015952:	2b00      	cmp	r3, #0
 8015954:	d00e      	beq.n	8015974 <tcp_enqueue_flags+0x1b0>
    LWIP_ASSERT("tcp_enqueue_flags: invalid queue length",
 8015956:	687b      	ldr	r3, [r7, #4]
 8015958:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 801595a:	2b00      	cmp	r3, #0
 801595c:	d10a      	bne.n	8015974 <tcp_enqueue_flags+0x1b0>
 801595e:	687b      	ldr	r3, [r7, #4]
 8015960:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8015962:	2b00      	cmp	r3, #0
 8015964:	d106      	bne.n	8015974 <tcp_enqueue_flags+0x1b0>
 8015966:	4b06      	ldr	r3, [pc, #24]	; (8015980 <tcp_enqueue_flags+0x1bc>)
 8015968:	f240 4265 	movw	r2, #1125	; 0x465
 801596c:	490b      	ldr	r1, [pc, #44]	; (801599c <tcp_enqueue_flags+0x1d8>)
 801596e:	4806      	ldr	r0, [pc, #24]	; (8015988 <tcp_enqueue_flags+0x1c4>)
 8015970:	f004 fa76 	bl	8019e60 <iprintf>
                pcb->unacked != NULL || pcb->unsent != NULL);
  }

  return ERR_OK;
 8015974:	2300      	movs	r3, #0
}
 8015976:	4618      	mov	r0, r3
 8015978:	3720      	adds	r7, #32
 801597a:	46bd      	mov	sp, r7
 801597c:	bd80      	pop	{r7, pc}
 801597e:	bf00      	nop
 8015980:	0801e06c 	.word	0x0801e06c
 8015984:	0801e490 	.word	0x0801e490
 8015988:	0801e0c0 	.word	0x0801e0c0
 801598c:	0801e4e8 	.word	0x0801e4e8
 8015990:	0801e508 	.word	0x0801e508
 8015994:	0801e544 	.word	0x0801e544
 8015998:	0801e55c 	.word	0x0801e55c
 801599c:	0801e588 	.word	0x0801e588

080159a0 <tcp_output>:
 * @return ERR_OK if data has been sent or nothing to send
 *         another err_t on error
 */
err_t
tcp_output(struct tcp_pcb *pcb)
{
 80159a0:	b5b0      	push	{r4, r5, r7, lr}
 80159a2:	b08a      	sub	sp, #40	; 0x28
 80159a4:	af00      	add	r7, sp, #0
 80159a6:	6078      	str	r0, [r7, #4]
  s16_t i = 0;
#endif /* TCP_CWND_DEBUG */

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ASSERT("tcp_output: invalid pcb", pcb != NULL);
 80159a8:	687b      	ldr	r3, [r7, #4]
 80159aa:	2b00      	cmp	r3, #0
 80159ac:	d106      	bne.n	80159bc <tcp_output+0x1c>
 80159ae:	4b8a      	ldr	r3, [pc, #552]	; (8015bd8 <tcp_output+0x238>)
 80159b0:	f240 42e1 	movw	r2, #1249	; 0x4e1
 80159b4:	4989      	ldr	r1, [pc, #548]	; (8015bdc <tcp_output+0x23c>)
 80159b6:	488a      	ldr	r0, [pc, #552]	; (8015be0 <tcp_output+0x240>)
 80159b8:	f004 fa52 	bl	8019e60 <iprintf>
  /* pcb->state LISTEN not allowed here */
  LWIP_ASSERT("don't call tcp_output for listen-pcbs",
 80159bc:	687b      	ldr	r3, [r7, #4]
 80159be:	7d1b      	ldrb	r3, [r3, #20]
 80159c0:	2b01      	cmp	r3, #1
 80159c2:	d106      	bne.n	80159d2 <tcp_output+0x32>
 80159c4:	4b84      	ldr	r3, [pc, #528]	; (8015bd8 <tcp_output+0x238>)
 80159c6:	f240 42e3 	movw	r2, #1251	; 0x4e3
 80159ca:	4986      	ldr	r1, [pc, #536]	; (8015be4 <tcp_output+0x244>)
 80159cc:	4884      	ldr	r0, [pc, #528]	; (8015be0 <tcp_output+0x240>)
 80159ce:	f004 fa47 	bl	8019e60 <iprintf>

  /* First, check if we are invoked by the TCP input processing
     code. If so, we do not output anything. Instead, we rely on the
     input processing code to call us when input processing is done
     with. */
  if (tcp_input_pcb == pcb) {
 80159d2:	4b85      	ldr	r3, [pc, #532]	; (8015be8 <tcp_output+0x248>)
 80159d4:	681b      	ldr	r3, [r3, #0]
 80159d6:	687a      	ldr	r2, [r7, #4]
 80159d8:	429a      	cmp	r2, r3
 80159da:	d101      	bne.n	80159e0 <tcp_output+0x40>
    return ERR_OK;
 80159dc:	2300      	movs	r3, #0
 80159de:	e1ce      	b.n	8015d7e <tcp_output+0x3de>
  }

  wnd = LWIP_MIN(pcb->snd_wnd, pcb->cwnd);
 80159e0:	687b      	ldr	r3, [r7, #4]
 80159e2:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 80159e6:	687b      	ldr	r3, [r7, #4]
 80159e8:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 80159ec:	4293      	cmp	r3, r2
 80159ee:	bf28      	it	cs
 80159f0:	4613      	movcs	r3, r2
 80159f2:	b29b      	uxth	r3, r3
 80159f4:	61bb      	str	r3, [r7, #24]

  seg = pcb->unsent;
 80159f6:	687b      	ldr	r3, [r7, #4]
 80159f8:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80159fa:	627b      	str	r3, [r7, #36]	; 0x24

  if (seg == NULL) {
 80159fc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80159fe:	2b00      	cmp	r3, #0
 8015a00:	d10b      	bne.n	8015a1a <tcp_output+0x7a>
                                 ", seg == NULL, ack %"U32_F"\n",
                                 pcb->snd_wnd, pcb->cwnd, wnd, pcb->lastack));

    /* If the TF_ACK_NOW flag is set and the ->unsent queue is empty, construct
     * an empty ACK segment and send it. */
    if (pcb->flags & TF_ACK_NOW) {
 8015a02:	687b      	ldr	r3, [r7, #4]
 8015a04:	8b5b      	ldrh	r3, [r3, #26]
 8015a06:	f003 0302 	and.w	r3, r3, #2
 8015a0a:	2b00      	cmp	r3, #0
 8015a0c:	f000 81aa 	beq.w	8015d64 <tcp_output+0x3c4>
      return tcp_send_empty_ack(pcb);
 8015a10:	6878      	ldr	r0, [r7, #4]
 8015a12:	f000 fdcb 	bl	80165ac <tcp_send_empty_ack>
 8015a16:	4603      	mov	r3, r0
 8015a18:	e1b1      	b.n	8015d7e <tcp_output+0x3de>
                 pcb->snd_wnd, pcb->cwnd, wnd,
                 lwip_ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len,
                 lwip_ntohl(seg->tcphdr->seqno), pcb->lastack));
  }

  netif = tcp_route(pcb, &pcb->local_ip, &pcb->remote_ip);
 8015a1a:	6879      	ldr	r1, [r7, #4]
 8015a1c:	687b      	ldr	r3, [r7, #4]
 8015a1e:	3304      	adds	r3, #4
 8015a20:	461a      	mov	r2, r3
 8015a22:	6878      	ldr	r0, [r7, #4]
 8015a24:	f7ff fc7c 	bl	8015320 <tcp_route>
 8015a28:	6178      	str	r0, [r7, #20]
  if (netif == NULL) {
 8015a2a:	697b      	ldr	r3, [r7, #20]
 8015a2c:	2b00      	cmp	r3, #0
 8015a2e:	d102      	bne.n	8015a36 <tcp_output+0x96>
    return ERR_RTE;
 8015a30:	f06f 0303 	mvn.w	r3, #3
 8015a34:	e1a3      	b.n	8015d7e <tcp_output+0x3de>
  }

  /* If we don't have a local IP address, we get one from netif */
  if (ip_addr_isany(&pcb->local_ip)) {
 8015a36:	687b      	ldr	r3, [r7, #4]
 8015a38:	2b00      	cmp	r3, #0
 8015a3a:	d003      	beq.n	8015a44 <tcp_output+0xa4>
 8015a3c:	687b      	ldr	r3, [r7, #4]
 8015a3e:	681b      	ldr	r3, [r3, #0]
 8015a40:	2b00      	cmp	r3, #0
 8015a42:	d111      	bne.n	8015a68 <tcp_output+0xc8>
    const ip_addr_t *local_ip = ip_netif_get_local_ip(netif, &pcb->remote_ip);
 8015a44:	697b      	ldr	r3, [r7, #20]
 8015a46:	2b00      	cmp	r3, #0
 8015a48:	d002      	beq.n	8015a50 <tcp_output+0xb0>
 8015a4a:	697b      	ldr	r3, [r7, #20]
 8015a4c:	3304      	adds	r3, #4
 8015a4e:	e000      	b.n	8015a52 <tcp_output+0xb2>
 8015a50:	2300      	movs	r3, #0
 8015a52:	613b      	str	r3, [r7, #16]
    if (local_ip == NULL) {
 8015a54:	693b      	ldr	r3, [r7, #16]
 8015a56:	2b00      	cmp	r3, #0
 8015a58:	d102      	bne.n	8015a60 <tcp_output+0xc0>
      return ERR_RTE;
 8015a5a:	f06f 0303 	mvn.w	r3, #3
 8015a5e:	e18e      	b.n	8015d7e <tcp_output+0x3de>
    }
    ip_addr_copy(pcb->local_ip, *local_ip);
 8015a60:	693b      	ldr	r3, [r7, #16]
 8015a62:	681a      	ldr	r2, [r3, #0]
 8015a64:	687b      	ldr	r3, [r7, #4]
 8015a66:	601a      	str	r2, [r3, #0]
  }

  /* Handle the current segment not fitting within the window */
  if (lwip_ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len > wnd) {
 8015a68:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8015a6a:	68db      	ldr	r3, [r3, #12]
 8015a6c:	685b      	ldr	r3, [r3, #4]
 8015a6e:	4618      	mov	r0, r3
 8015a70:	f7f9 ff4f 	bl	800f912 <lwip_htonl>
 8015a74:	4602      	mov	r2, r0
 8015a76:	687b      	ldr	r3, [r7, #4]
 8015a78:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8015a7a:	1ad3      	subs	r3, r2, r3
 8015a7c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8015a7e:	8912      	ldrh	r2, [r2, #8]
 8015a80:	4413      	add	r3, r2
 8015a82:	69ba      	ldr	r2, [r7, #24]
 8015a84:	429a      	cmp	r2, r3
 8015a86:	d227      	bcs.n	8015ad8 <tcp_output+0x138>
     * within the remaining (could be 0) send window and RTO timer is not running (we
     * have no in-flight data). If window is still too small after persist timer fires,
     * then we split the segment. We don't consider the congestion window since a cwnd
     * smaller than 1 SMSS implies in-flight data
     */
    if (wnd == pcb->snd_wnd && pcb->unacked == NULL && pcb->persist_backoff == 0) {
 8015a88:	687b      	ldr	r3, [r7, #4]
 8015a8a:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 8015a8e:	461a      	mov	r2, r3
 8015a90:	69bb      	ldr	r3, [r7, #24]
 8015a92:	4293      	cmp	r3, r2
 8015a94:	d114      	bne.n	8015ac0 <tcp_output+0x120>
 8015a96:	687b      	ldr	r3, [r7, #4]
 8015a98:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8015a9a:	2b00      	cmp	r3, #0
 8015a9c:	d110      	bne.n	8015ac0 <tcp_output+0x120>
 8015a9e:	687b      	ldr	r3, [r7, #4]
 8015aa0:	f893 3099 	ldrb.w	r3, [r3, #153]	; 0x99
 8015aa4:	2b00      	cmp	r3, #0
 8015aa6:	d10b      	bne.n	8015ac0 <tcp_output+0x120>
      pcb->persist_cnt = 0;
 8015aa8:	687b      	ldr	r3, [r7, #4]
 8015aaa:	2200      	movs	r2, #0
 8015aac:	f883 2098 	strb.w	r2, [r3, #152]	; 0x98
      pcb->persist_backoff = 1;
 8015ab0:	687b      	ldr	r3, [r7, #4]
 8015ab2:	2201      	movs	r2, #1
 8015ab4:	f883 2099 	strb.w	r2, [r3, #153]	; 0x99
      pcb->persist_probe = 0;
 8015ab8:	687b      	ldr	r3, [r7, #4]
 8015aba:	2200      	movs	r2, #0
 8015abc:	f883 209a 	strb.w	r2, [r3, #154]	; 0x9a
    }
    /* We need an ACK, but can't send data now, so send an empty ACK */
    if (pcb->flags & TF_ACK_NOW) {
 8015ac0:	687b      	ldr	r3, [r7, #4]
 8015ac2:	8b5b      	ldrh	r3, [r3, #26]
 8015ac4:	f003 0302 	and.w	r3, r3, #2
 8015ac8:	2b00      	cmp	r3, #0
 8015aca:	f000 814d 	beq.w	8015d68 <tcp_output+0x3c8>
      return tcp_send_empty_ack(pcb);
 8015ace:	6878      	ldr	r0, [r7, #4]
 8015ad0:	f000 fd6c 	bl	80165ac <tcp_send_empty_ack>
 8015ad4:	4603      	mov	r3, r0
 8015ad6:	e152      	b.n	8015d7e <tcp_output+0x3de>
    }
    goto output_done;
  }
  /* Stop persist timer, above conditions are not active */
  pcb->persist_backoff = 0;
 8015ad8:	687b      	ldr	r3, [r7, #4]
 8015ada:	2200      	movs	r2, #0
 8015adc:	f883 2099 	strb.w	r2, [r3, #153]	; 0x99

  /* useg should point to last segment on unacked queue */
  useg = pcb->unacked;
 8015ae0:	687b      	ldr	r3, [r7, #4]
 8015ae2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8015ae4:	623b      	str	r3, [r7, #32]
  if (useg != NULL) {
 8015ae6:	6a3b      	ldr	r3, [r7, #32]
 8015ae8:	2b00      	cmp	r3, #0
 8015aea:	f000 811c 	beq.w	8015d26 <tcp_output+0x386>
    for (; useg->next != NULL; useg = useg->next);
 8015aee:	e002      	b.n	8015af6 <tcp_output+0x156>
 8015af0:	6a3b      	ldr	r3, [r7, #32]
 8015af2:	681b      	ldr	r3, [r3, #0]
 8015af4:	623b      	str	r3, [r7, #32]
 8015af6:	6a3b      	ldr	r3, [r7, #32]
 8015af8:	681b      	ldr	r3, [r3, #0]
 8015afa:	2b00      	cmp	r3, #0
 8015afc:	d1f8      	bne.n	8015af0 <tcp_output+0x150>
  }
  /* data available and window allows it to be sent? */
  while (seg != NULL &&
 8015afe:	e112      	b.n	8015d26 <tcp_output+0x386>
         lwip_ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len <= wnd) {
    LWIP_ASSERT("RST not expected here!",
 8015b00:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8015b02:	68db      	ldr	r3, [r3, #12]
 8015b04:	899b      	ldrh	r3, [r3, #12]
 8015b06:	b29b      	uxth	r3, r3
 8015b08:	4618      	mov	r0, r3
 8015b0a:	f7f9 feed 	bl	800f8e8 <lwip_htons>
 8015b0e:	4603      	mov	r3, r0
 8015b10:	b2db      	uxtb	r3, r3
 8015b12:	f003 0304 	and.w	r3, r3, #4
 8015b16:	2b00      	cmp	r3, #0
 8015b18:	d006      	beq.n	8015b28 <tcp_output+0x188>
 8015b1a:	4b2f      	ldr	r3, [pc, #188]	; (8015bd8 <tcp_output+0x238>)
 8015b1c:	f240 5236 	movw	r2, #1334	; 0x536
 8015b20:	4932      	ldr	r1, [pc, #200]	; (8015bec <tcp_output+0x24c>)
 8015b22:	482f      	ldr	r0, [pc, #188]	; (8015be0 <tcp_output+0x240>)
 8015b24:	f004 f99c 	bl	8019e60 <iprintf>
     * - if tcp_write had a memory error before (prevent delayed ACK timeout) or
     * - if FIN was already enqueued for this PCB (SYN is always alone in a segment -
     *   either seg->next != NULL or pcb->unacked == NULL;
     *   RST is no sent using tcp_write/tcp_output.
     */
    if ((tcp_do_output_nagle(pcb) == 0) &&
 8015b28:	687b      	ldr	r3, [r7, #4]
 8015b2a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8015b2c:	2b00      	cmp	r3, #0
 8015b2e:	d01f      	beq.n	8015b70 <tcp_output+0x1d0>
 8015b30:	687b      	ldr	r3, [r7, #4]
 8015b32:	8b5b      	ldrh	r3, [r3, #26]
 8015b34:	f003 0344 	and.w	r3, r3, #68	; 0x44
 8015b38:	2b00      	cmp	r3, #0
 8015b3a:	d119      	bne.n	8015b70 <tcp_output+0x1d0>
 8015b3c:	687b      	ldr	r3, [r7, #4]
 8015b3e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8015b40:	2b00      	cmp	r3, #0
 8015b42:	d00b      	beq.n	8015b5c <tcp_output+0x1bc>
 8015b44:	687b      	ldr	r3, [r7, #4]
 8015b46:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8015b48:	681b      	ldr	r3, [r3, #0]
 8015b4a:	2b00      	cmp	r3, #0
 8015b4c:	d110      	bne.n	8015b70 <tcp_output+0x1d0>
 8015b4e:	687b      	ldr	r3, [r7, #4]
 8015b50:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8015b52:	891a      	ldrh	r2, [r3, #8]
 8015b54:	687b      	ldr	r3, [r7, #4]
 8015b56:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8015b58:	429a      	cmp	r2, r3
 8015b5a:	d209      	bcs.n	8015b70 <tcp_output+0x1d0>
 8015b5c:	687b      	ldr	r3, [r7, #4]
 8015b5e:	f8b3 3064 	ldrh.w	r3, [r3, #100]	; 0x64
 8015b62:	2b00      	cmp	r3, #0
 8015b64:	d004      	beq.n	8015b70 <tcp_output+0x1d0>
 8015b66:	687b      	ldr	r3, [r7, #4]
 8015b68:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 8015b6c:	2b0f      	cmp	r3, #15
 8015b6e:	d901      	bls.n	8015b74 <tcp_output+0x1d4>
 8015b70:	2301      	movs	r3, #1
 8015b72:	e000      	b.n	8015b76 <tcp_output+0x1d6>
 8015b74:	2300      	movs	r3, #0
 8015b76:	2b00      	cmp	r3, #0
 8015b78:	d106      	bne.n	8015b88 <tcp_output+0x1e8>
        ((pcb->flags & (TF_NAGLEMEMERR | TF_FIN)) == 0)) {
 8015b7a:	687b      	ldr	r3, [r7, #4]
 8015b7c:	8b5b      	ldrh	r3, [r3, #26]
 8015b7e:	f003 03a0 	and.w	r3, r3, #160	; 0xa0
    if ((tcp_do_output_nagle(pcb) == 0) &&
 8015b82:	2b00      	cmp	r3, #0
 8015b84:	f000 80e4 	beq.w	8015d50 <tcp_output+0x3b0>
                                 pcb->lastack,
                                 lwip_ntohl(seg->tcphdr->seqno), pcb->lastack, i));
    ++i;
#endif /* TCP_CWND_DEBUG */

    if (pcb->state != SYN_SENT) {
 8015b88:	687b      	ldr	r3, [r7, #4]
 8015b8a:	7d1b      	ldrb	r3, [r3, #20]
 8015b8c:	2b02      	cmp	r3, #2
 8015b8e:	d00d      	beq.n	8015bac <tcp_output+0x20c>
      TCPH_SET_FLAG(seg->tcphdr, TCP_ACK);
 8015b90:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8015b92:	68db      	ldr	r3, [r3, #12]
 8015b94:	899b      	ldrh	r3, [r3, #12]
 8015b96:	b29c      	uxth	r4, r3
 8015b98:	2010      	movs	r0, #16
 8015b9a:	f7f9 fea5 	bl	800f8e8 <lwip_htons>
 8015b9e:	4603      	mov	r3, r0
 8015ba0:	461a      	mov	r2, r3
 8015ba2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8015ba4:	68db      	ldr	r3, [r3, #12]
 8015ba6:	4322      	orrs	r2, r4
 8015ba8:	b292      	uxth	r2, r2
 8015baa:	819a      	strh	r2, [r3, #12]
    }

    err = tcp_output_segment(seg, pcb, netif);
 8015bac:	697a      	ldr	r2, [r7, #20]
 8015bae:	6879      	ldr	r1, [r7, #4]
 8015bb0:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8015bb2:	f000 f909 	bl	8015dc8 <tcp_output_segment>
 8015bb6:	4603      	mov	r3, r0
 8015bb8:	73fb      	strb	r3, [r7, #15]
    if (err != ERR_OK) {
 8015bba:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8015bbe:	2b00      	cmp	r3, #0
 8015bc0:	d016      	beq.n	8015bf0 <tcp_output+0x250>
      /* segment could not be sent, for whatever reason */
      tcp_set_flags(pcb, TF_NAGLEMEMERR);
 8015bc2:	687b      	ldr	r3, [r7, #4]
 8015bc4:	8b5b      	ldrh	r3, [r3, #26]
 8015bc6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8015bca:	b29a      	uxth	r2, r3
 8015bcc:	687b      	ldr	r3, [r7, #4]
 8015bce:	835a      	strh	r2, [r3, #26]
      return err;
 8015bd0:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8015bd4:	e0d3      	b.n	8015d7e <tcp_output+0x3de>
 8015bd6:	bf00      	nop
 8015bd8:	0801e06c 	.word	0x0801e06c
 8015bdc:	0801e5b0 	.word	0x0801e5b0
 8015be0:	0801e0c0 	.word	0x0801e0c0
 8015be4:	0801e5c8 	.word	0x0801e5c8
 8015be8:	20007120 	.word	0x20007120
 8015bec:	0801e5f0 	.word	0x0801e5f0
    }
#if TCP_OVERSIZE_DBGCHECK
    seg->oversize_left = 0;
#endif /* TCP_OVERSIZE_DBGCHECK */
    pcb->unsent = seg->next;
 8015bf0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8015bf2:	681a      	ldr	r2, [r3, #0]
 8015bf4:	687b      	ldr	r3, [r7, #4]
 8015bf6:	66da      	str	r2, [r3, #108]	; 0x6c
    if (pcb->state != SYN_SENT) {
 8015bf8:	687b      	ldr	r3, [r7, #4]
 8015bfa:	7d1b      	ldrb	r3, [r3, #20]
 8015bfc:	2b02      	cmp	r3, #2
 8015bfe:	d006      	beq.n	8015c0e <tcp_output+0x26e>
      tcp_clear_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 8015c00:	687b      	ldr	r3, [r7, #4]
 8015c02:	8b5b      	ldrh	r3, [r3, #26]
 8015c04:	f023 0303 	bic.w	r3, r3, #3
 8015c08:	b29a      	uxth	r2, r3
 8015c0a:	687b      	ldr	r3, [r7, #4]
 8015c0c:	835a      	strh	r2, [r3, #26]
    }
    snd_nxt = lwip_ntohl(seg->tcphdr->seqno) + TCP_TCPLEN(seg);
 8015c0e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8015c10:	68db      	ldr	r3, [r3, #12]
 8015c12:	685b      	ldr	r3, [r3, #4]
 8015c14:	4618      	mov	r0, r3
 8015c16:	f7f9 fe7c 	bl	800f912 <lwip_htonl>
 8015c1a:	4604      	mov	r4, r0
 8015c1c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8015c1e:	891b      	ldrh	r3, [r3, #8]
 8015c20:	461d      	mov	r5, r3
 8015c22:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8015c24:	68db      	ldr	r3, [r3, #12]
 8015c26:	899b      	ldrh	r3, [r3, #12]
 8015c28:	b29b      	uxth	r3, r3
 8015c2a:	4618      	mov	r0, r3
 8015c2c:	f7f9 fe5c 	bl	800f8e8 <lwip_htons>
 8015c30:	4603      	mov	r3, r0
 8015c32:	b2db      	uxtb	r3, r3
 8015c34:	f003 0303 	and.w	r3, r3, #3
 8015c38:	2b00      	cmp	r3, #0
 8015c3a:	d001      	beq.n	8015c40 <tcp_output+0x2a0>
 8015c3c:	2301      	movs	r3, #1
 8015c3e:	e000      	b.n	8015c42 <tcp_output+0x2a2>
 8015c40:	2300      	movs	r3, #0
 8015c42:	442b      	add	r3, r5
 8015c44:	4423      	add	r3, r4
 8015c46:	60bb      	str	r3, [r7, #8]
    if (TCP_SEQ_LT(pcb->snd_nxt, snd_nxt)) {
 8015c48:	687b      	ldr	r3, [r7, #4]
 8015c4a:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8015c4c:	68bb      	ldr	r3, [r7, #8]
 8015c4e:	1ad3      	subs	r3, r2, r3
 8015c50:	2b00      	cmp	r3, #0
 8015c52:	da02      	bge.n	8015c5a <tcp_output+0x2ba>
      pcb->snd_nxt = snd_nxt;
 8015c54:	687b      	ldr	r3, [r7, #4]
 8015c56:	68ba      	ldr	r2, [r7, #8]
 8015c58:	651a      	str	r2, [r3, #80]	; 0x50
    }
    /* put segment on unacknowledged list if length > 0 */
    if (TCP_TCPLEN(seg) > 0) {
 8015c5a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8015c5c:	891b      	ldrh	r3, [r3, #8]
 8015c5e:	461c      	mov	r4, r3
 8015c60:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8015c62:	68db      	ldr	r3, [r3, #12]
 8015c64:	899b      	ldrh	r3, [r3, #12]
 8015c66:	b29b      	uxth	r3, r3
 8015c68:	4618      	mov	r0, r3
 8015c6a:	f7f9 fe3d 	bl	800f8e8 <lwip_htons>
 8015c6e:	4603      	mov	r3, r0
 8015c70:	b2db      	uxtb	r3, r3
 8015c72:	f003 0303 	and.w	r3, r3, #3
 8015c76:	2b00      	cmp	r3, #0
 8015c78:	d001      	beq.n	8015c7e <tcp_output+0x2de>
 8015c7a:	2301      	movs	r3, #1
 8015c7c:	e000      	b.n	8015c80 <tcp_output+0x2e0>
 8015c7e:	2300      	movs	r3, #0
 8015c80:	4423      	add	r3, r4
 8015c82:	2b00      	cmp	r3, #0
 8015c84:	d049      	beq.n	8015d1a <tcp_output+0x37a>
      seg->next = NULL;
 8015c86:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8015c88:	2200      	movs	r2, #0
 8015c8a:	601a      	str	r2, [r3, #0]
      /* unacked list is empty? */
      if (pcb->unacked == NULL) {
 8015c8c:	687b      	ldr	r3, [r7, #4]
 8015c8e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8015c90:	2b00      	cmp	r3, #0
 8015c92:	d105      	bne.n	8015ca0 <tcp_output+0x300>
        pcb->unacked = seg;
 8015c94:	687b      	ldr	r3, [r7, #4]
 8015c96:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8015c98:	671a      	str	r2, [r3, #112]	; 0x70
        useg = seg;
 8015c9a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8015c9c:	623b      	str	r3, [r7, #32]
 8015c9e:	e03f      	b.n	8015d20 <tcp_output+0x380>
        /* unacked list is not empty? */
      } else {
        /* In the case of fast retransmit, the packet should not go to the tail
         * of the unacked queue, but rather somewhere before it. We need to check for
         * this case. -STJ Jul 27, 2004 */
        if (TCP_SEQ_LT(lwip_ntohl(seg->tcphdr->seqno), lwip_ntohl(useg->tcphdr->seqno))) {
 8015ca0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8015ca2:	68db      	ldr	r3, [r3, #12]
 8015ca4:	685b      	ldr	r3, [r3, #4]
 8015ca6:	4618      	mov	r0, r3
 8015ca8:	f7f9 fe33 	bl	800f912 <lwip_htonl>
 8015cac:	4604      	mov	r4, r0
 8015cae:	6a3b      	ldr	r3, [r7, #32]
 8015cb0:	68db      	ldr	r3, [r3, #12]
 8015cb2:	685b      	ldr	r3, [r3, #4]
 8015cb4:	4618      	mov	r0, r3
 8015cb6:	f7f9 fe2c 	bl	800f912 <lwip_htonl>
 8015cba:	4603      	mov	r3, r0
 8015cbc:	1ae3      	subs	r3, r4, r3
 8015cbe:	2b00      	cmp	r3, #0
 8015cc0:	da24      	bge.n	8015d0c <tcp_output+0x36c>
          /* add segment to before tail of unacked list, keeping the list sorted */
          struct tcp_seg **cur_seg = &(pcb->unacked);
 8015cc2:	687b      	ldr	r3, [r7, #4]
 8015cc4:	3370      	adds	r3, #112	; 0x70
 8015cc6:	61fb      	str	r3, [r7, #28]
          while (*cur_seg &&
 8015cc8:	e002      	b.n	8015cd0 <tcp_output+0x330>
                 TCP_SEQ_LT(lwip_ntohl((*cur_seg)->tcphdr->seqno), lwip_ntohl(seg->tcphdr->seqno))) {
            cur_seg = &((*cur_seg)->next );
 8015cca:	69fb      	ldr	r3, [r7, #28]
 8015ccc:	681b      	ldr	r3, [r3, #0]
 8015cce:	61fb      	str	r3, [r7, #28]
          while (*cur_seg &&
 8015cd0:	69fb      	ldr	r3, [r7, #28]
 8015cd2:	681b      	ldr	r3, [r3, #0]
 8015cd4:	2b00      	cmp	r3, #0
 8015cd6:	d011      	beq.n	8015cfc <tcp_output+0x35c>
                 TCP_SEQ_LT(lwip_ntohl((*cur_seg)->tcphdr->seqno), lwip_ntohl(seg->tcphdr->seqno))) {
 8015cd8:	69fb      	ldr	r3, [r7, #28]
 8015cda:	681b      	ldr	r3, [r3, #0]
 8015cdc:	68db      	ldr	r3, [r3, #12]
 8015cde:	685b      	ldr	r3, [r3, #4]
 8015ce0:	4618      	mov	r0, r3
 8015ce2:	f7f9 fe16 	bl	800f912 <lwip_htonl>
 8015ce6:	4604      	mov	r4, r0
 8015ce8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8015cea:	68db      	ldr	r3, [r3, #12]
 8015cec:	685b      	ldr	r3, [r3, #4]
 8015cee:	4618      	mov	r0, r3
 8015cf0:	f7f9 fe0f 	bl	800f912 <lwip_htonl>
 8015cf4:	4603      	mov	r3, r0
 8015cf6:	1ae3      	subs	r3, r4, r3
          while (*cur_seg &&
 8015cf8:	2b00      	cmp	r3, #0
 8015cfa:	dbe6      	blt.n	8015cca <tcp_output+0x32a>
          }
          seg->next = (*cur_seg);
 8015cfc:	69fb      	ldr	r3, [r7, #28]
 8015cfe:	681a      	ldr	r2, [r3, #0]
 8015d00:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8015d02:	601a      	str	r2, [r3, #0]
          (*cur_seg) = seg;
 8015d04:	69fb      	ldr	r3, [r7, #28]
 8015d06:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8015d08:	601a      	str	r2, [r3, #0]
 8015d0a:	e009      	b.n	8015d20 <tcp_output+0x380>
        } else {
          /* add segment to tail of unacked list */
          useg->next = seg;
 8015d0c:	6a3b      	ldr	r3, [r7, #32]
 8015d0e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8015d10:	601a      	str	r2, [r3, #0]
          useg = useg->next;
 8015d12:	6a3b      	ldr	r3, [r7, #32]
 8015d14:	681b      	ldr	r3, [r3, #0]
 8015d16:	623b      	str	r3, [r7, #32]
 8015d18:	e002      	b.n	8015d20 <tcp_output+0x380>
        }
      }
      /* do not queue empty segments on the unacked list */
    } else {
      tcp_seg_free(seg);
 8015d1a:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8015d1c:	f7fc fc3f 	bl	801259e <tcp_seg_free>
    }
    seg = pcb->unsent;
 8015d20:	687b      	ldr	r3, [r7, #4]
 8015d22:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8015d24:	627b      	str	r3, [r7, #36]	; 0x24
  while (seg != NULL &&
 8015d26:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8015d28:	2b00      	cmp	r3, #0
 8015d2a:	d012      	beq.n	8015d52 <tcp_output+0x3b2>
         lwip_ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len <= wnd) {
 8015d2c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8015d2e:	68db      	ldr	r3, [r3, #12]
 8015d30:	685b      	ldr	r3, [r3, #4]
 8015d32:	4618      	mov	r0, r3
 8015d34:	f7f9 fded 	bl	800f912 <lwip_htonl>
 8015d38:	4602      	mov	r2, r0
 8015d3a:	687b      	ldr	r3, [r7, #4]
 8015d3c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8015d3e:	1ad3      	subs	r3, r2, r3
 8015d40:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8015d42:	8912      	ldrh	r2, [r2, #8]
 8015d44:	4413      	add	r3, r2
  while (seg != NULL &&
 8015d46:	69ba      	ldr	r2, [r7, #24]
 8015d48:	429a      	cmp	r2, r3
 8015d4a:	f4bf aed9 	bcs.w	8015b00 <tcp_output+0x160>
 8015d4e:	e000      	b.n	8015d52 <tcp_output+0x3b2>
      break;
 8015d50:	bf00      	nop
  }
#if TCP_OVERSIZE
  if (pcb->unsent == NULL) {
 8015d52:	687b      	ldr	r3, [r7, #4]
 8015d54:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8015d56:	2b00      	cmp	r3, #0
 8015d58:	d108      	bne.n	8015d6c <tcp_output+0x3cc>
    /* last unsent has been removed, reset unsent_oversize */
    pcb->unsent_oversize = 0;
 8015d5a:	687b      	ldr	r3, [r7, #4]
 8015d5c:	2200      	movs	r2, #0
 8015d5e:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
 8015d62:	e004      	b.n	8015d6e <tcp_output+0x3ce>
    goto output_done;
 8015d64:	bf00      	nop
 8015d66:	e002      	b.n	8015d6e <tcp_output+0x3ce>
    goto output_done;
 8015d68:	bf00      	nop
 8015d6a:	e000      	b.n	8015d6e <tcp_output+0x3ce>
  }
#endif /* TCP_OVERSIZE */

output_done:
 8015d6c:	bf00      	nop
  tcp_clear_flags(pcb, TF_NAGLEMEMERR);
 8015d6e:	687b      	ldr	r3, [r7, #4]
 8015d70:	8b5b      	ldrh	r3, [r3, #26]
 8015d72:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8015d76:	b29a      	uxth	r2, r3
 8015d78:	687b      	ldr	r3, [r7, #4]
 8015d7a:	835a      	strh	r2, [r3, #26]
  return ERR_OK;
 8015d7c:	2300      	movs	r3, #0
}
 8015d7e:	4618      	mov	r0, r3
 8015d80:	3728      	adds	r7, #40	; 0x28
 8015d82:	46bd      	mov	sp, r7
 8015d84:	bdb0      	pop	{r4, r5, r7, pc}
 8015d86:	bf00      	nop

08015d88 <tcp_output_segment_busy>:
 * @arg seg the tcp segment to check
 * @return 1 if ref != 1, 0 if ref == 1
 */
static int
tcp_output_segment_busy(const struct tcp_seg *seg)
{
 8015d88:	b580      	push	{r7, lr}
 8015d8a:	b082      	sub	sp, #8
 8015d8c:	af00      	add	r7, sp, #0
 8015d8e:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_output_segment_busy: invalid seg", seg != NULL);
 8015d90:	687b      	ldr	r3, [r7, #4]
 8015d92:	2b00      	cmp	r3, #0
 8015d94:	d106      	bne.n	8015da4 <tcp_output_segment_busy+0x1c>
 8015d96:	4b09      	ldr	r3, [pc, #36]	; (8015dbc <tcp_output_segment_busy+0x34>)
 8015d98:	f240 529a 	movw	r2, #1434	; 0x59a
 8015d9c:	4908      	ldr	r1, [pc, #32]	; (8015dc0 <tcp_output_segment_busy+0x38>)
 8015d9e:	4809      	ldr	r0, [pc, #36]	; (8015dc4 <tcp_output_segment_busy+0x3c>)
 8015da0:	f004 f85e 	bl	8019e60 <iprintf>

  /* We only need to check the first pbuf here:
     If a pbuf is queued for transmission, a driver calls pbuf_ref(),
     which only changes the ref count of the first pbuf */
  if (seg->p->ref != 1) {
 8015da4:	687b      	ldr	r3, [r7, #4]
 8015da6:	685b      	ldr	r3, [r3, #4]
 8015da8:	7b9b      	ldrb	r3, [r3, #14]
 8015daa:	2b01      	cmp	r3, #1
 8015dac:	d001      	beq.n	8015db2 <tcp_output_segment_busy+0x2a>
    /* other reference found */
    return 1;
 8015dae:	2301      	movs	r3, #1
 8015db0:	e000      	b.n	8015db4 <tcp_output_segment_busy+0x2c>
  }
  /* no other references found */
  return 0;
 8015db2:	2300      	movs	r3, #0
}
 8015db4:	4618      	mov	r0, r3
 8015db6:	3708      	adds	r7, #8
 8015db8:	46bd      	mov	sp, r7
 8015dba:	bd80      	pop	{r7, pc}
 8015dbc:	0801e06c 	.word	0x0801e06c
 8015dc0:	0801e608 	.word	0x0801e608
 8015dc4:	0801e0c0 	.word	0x0801e0c0

08015dc8 <tcp_output_segment>:
 * @param pcb the tcp_pcb for the TCP connection used to send the segment
 * @param netif the netif used to send the segment
 */
static err_t
tcp_output_segment(struct tcp_seg *seg, struct tcp_pcb *pcb, struct netif *netif)
{
 8015dc8:	b5b0      	push	{r4, r5, r7, lr}
 8015dca:	b08c      	sub	sp, #48	; 0x30
 8015dcc:	af04      	add	r7, sp, #16
 8015dce:	60f8      	str	r0, [r7, #12]
 8015dd0:	60b9      	str	r1, [r7, #8]
 8015dd2:	607a      	str	r2, [r7, #4]
  u32_t *opts;
#if TCP_CHECKSUM_ON_COPY
  int seg_chksum_was_swapped = 0;
#endif

  LWIP_ASSERT("tcp_output_segment: invalid seg", seg != NULL);
 8015dd4:	68fb      	ldr	r3, [r7, #12]
 8015dd6:	2b00      	cmp	r3, #0
 8015dd8:	d106      	bne.n	8015de8 <tcp_output_segment+0x20>
 8015dda:	4b64      	ldr	r3, [pc, #400]	; (8015f6c <tcp_output_segment+0x1a4>)
 8015ddc:	f44f 62b7 	mov.w	r2, #1464	; 0x5b8
 8015de0:	4963      	ldr	r1, [pc, #396]	; (8015f70 <tcp_output_segment+0x1a8>)
 8015de2:	4864      	ldr	r0, [pc, #400]	; (8015f74 <tcp_output_segment+0x1ac>)
 8015de4:	f004 f83c 	bl	8019e60 <iprintf>
  LWIP_ASSERT("tcp_output_segment: invalid pcb", pcb != NULL);
 8015de8:	68bb      	ldr	r3, [r7, #8]
 8015dea:	2b00      	cmp	r3, #0
 8015dec:	d106      	bne.n	8015dfc <tcp_output_segment+0x34>
 8015dee:	4b5f      	ldr	r3, [pc, #380]	; (8015f6c <tcp_output_segment+0x1a4>)
 8015df0:	f240 52b9 	movw	r2, #1465	; 0x5b9
 8015df4:	4960      	ldr	r1, [pc, #384]	; (8015f78 <tcp_output_segment+0x1b0>)
 8015df6:	485f      	ldr	r0, [pc, #380]	; (8015f74 <tcp_output_segment+0x1ac>)
 8015df8:	f004 f832 	bl	8019e60 <iprintf>
  LWIP_ASSERT("tcp_output_segment: invalid netif", netif != NULL);
 8015dfc:	687b      	ldr	r3, [r7, #4]
 8015dfe:	2b00      	cmp	r3, #0
 8015e00:	d106      	bne.n	8015e10 <tcp_output_segment+0x48>
 8015e02:	4b5a      	ldr	r3, [pc, #360]	; (8015f6c <tcp_output_segment+0x1a4>)
 8015e04:	f240 52ba 	movw	r2, #1466	; 0x5ba
 8015e08:	495c      	ldr	r1, [pc, #368]	; (8015f7c <tcp_output_segment+0x1b4>)
 8015e0a:	485a      	ldr	r0, [pc, #360]	; (8015f74 <tcp_output_segment+0x1ac>)
 8015e0c:	f004 f828 	bl	8019e60 <iprintf>

  if (tcp_output_segment_busy(seg)) {
 8015e10:	68f8      	ldr	r0, [r7, #12]
 8015e12:	f7ff ffb9 	bl	8015d88 <tcp_output_segment_busy>
 8015e16:	4603      	mov	r3, r0
 8015e18:	2b00      	cmp	r3, #0
 8015e1a:	d001      	beq.n	8015e20 <tcp_output_segment+0x58>
    /* This should not happen: rexmit functions should have checked this.
       However, since this function modifies p->len, we must not continue in this case. */
    LWIP_DEBUGF(TCP_RTO_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("tcp_output_segment: segment busy\n"));
    return ERR_OK;
 8015e1c:	2300      	movs	r3, #0
 8015e1e:	e0a1      	b.n	8015f64 <tcp_output_segment+0x19c>
  }

  /* The TCP header has already been constructed, but the ackno and
   wnd fields remain. */
  seg->tcphdr->ackno = lwip_htonl(pcb->rcv_nxt);
 8015e20:	68bb      	ldr	r3, [r7, #8]
 8015e22:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8015e24:	68fb      	ldr	r3, [r7, #12]
 8015e26:	68dc      	ldr	r4, [r3, #12]
 8015e28:	4610      	mov	r0, r2
 8015e2a:	f7f9 fd72 	bl	800f912 <lwip_htonl>
 8015e2e:	4603      	mov	r3, r0
 8015e30:	60a3      	str	r3, [r4, #8]
       the window scale option) is never scaled. */
    seg->tcphdr->wnd = lwip_htons(TCPWND_MIN16(pcb->rcv_ann_wnd));
  } else
#endif /* LWIP_WND_SCALE */
  {
    seg->tcphdr->wnd = lwip_htons(TCPWND_MIN16(RCV_WND_SCALE(pcb, pcb->rcv_ann_wnd)));
 8015e32:	68bb      	ldr	r3, [r7, #8]
 8015e34:	8d5a      	ldrh	r2, [r3, #42]	; 0x2a
 8015e36:	68fb      	ldr	r3, [r7, #12]
 8015e38:	68dc      	ldr	r4, [r3, #12]
 8015e3a:	4610      	mov	r0, r2
 8015e3c:	f7f9 fd54 	bl	800f8e8 <lwip_htons>
 8015e40:	4603      	mov	r3, r0
 8015e42:	81e3      	strh	r3, [r4, #14]
  }

  pcb->rcv_ann_right_edge = pcb->rcv_nxt + pcb->rcv_ann_wnd;
 8015e44:	68bb      	ldr	r3, [r7, #8]
 8015e46:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8015e48:	68ba      	ldr	r2, [r7, #8]
 8015e4a:	8d52      	ldrh	r2, [r2, #42]	; 0x2a
 8015e4c:	441a      	add	r2, r3
 8015e4e:	68bb      	ldr	r3, [r7, #8]
 8015e50:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Add any requested options.  NB MSS option is only set on SYN
     packets, so ignore it here */
  /* cast through void* to get rid of alignment warnings */
  opts = (u32_t *)(void *)(seg->tcphdr + 1);
 8015e52:	68fb      	ldr	r3, [r7, #12]
 8015e54:	68db      	ldr	r3, [r3, #12]
 8015e56:	3314      	adds	r3, #20
 8015e58:	61fb      	str	r3, [r7, #28]
  if (seg->flags & TF_SEG_OPTS_MSS) {
 8015e5a:	68fb      	ldr	r3, [r7, #12]
 8015e5c:	7a9b      	ldrb	r3, [r3, #10]
 8015e5e:	f003 0301 	and.w	r3, r3, #1
 8015e62:	2b00      	cmp	r3, #0
 8015e64:	d015      	beq.n	8015e92 <tcp_output_segment+0xca>
    u16_t mss;
#if TCP_CALCULATE_EFF_SEND_MSS
    mss = tcp_eff_send_mss_netif(TCP_MSS, netif, &pcb->remote_ip);
 8015e66:	68bb      	ldr	r3, [r7, #8]
 8015e68:	3304      	adds	r3, #4
 8015e6a:	461a      	mov	r2, r3
 8015e6c:	6879      	ldr	r1, [r7, #4]
 8015e6e:	f240 50b4 	movw	r0, #1460	; 0x5b4
 8015e72:	f7fc fe8b 	bl	8012b8c <tcp_eff_send_mss_netif>
 8015e76:	4603      	mov	r3, r0
 8015e78:	837b      	strh	r3, [r7, #26]
#else /* TCP_CALCULATE_EFF_SEND_MSS */
    mss = TCP_MSS;
#endif /* TCP_CALCULATE_EFF_SEND_MSS */
    *opts = TCP_BUILD_MSS_OPTION(mss);
 8015e7a:	8b7b      	ldrh	r3, [r7, #26]
 8015e7c:	f043 7301 	orr.w	r3, r3, #33816576	; 0x2040000
 8015e80:	4618      	mov	r0, r3
 8015e82:	f7f9 fd46 	bl	800f912 <lwip_htonl>
 8015e86:	4602      	mov	r2, r0
 8015e88:	69fb      	ldr	r3, [r7, #28]
 8015e8a:	601a      	str	r2, [r3, #0]
    opts += 1;
 8015e8c:	69fb      	ldr	r3, [r7, #28]
 8015e8e:	3304      	adds	r3, #4
 8015e90:	61fb      	str	r3, [r7, #28]
  }
#endif

  /* Set retransmission timer running if it is not currently enabled
     This must be set before checking the route. */
  if (pcb->rtime < 0) {
 8015e92:	68bb      	ldr	r3, [r7, #8]
 8015e94:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	; 0x30
 8015e98:	2b00      	cmp	r3, #0
 8015e9a:	da02      	bge.n	8015ea2 <tcp_output_segment+0xda>
    pcb->rtime = 0;
 8015e9c:	68bb      	ldr	r3, [r7, #8]
 8015e9e:	2200      	movs	r2, #0
 8015ea0:	861a      	strh	r2, [r3, #48]	; 0x30
  }

  if (pcb->rttest == 0) {
 8015ea2:	68bb      	ldr	r3, [r7, #8]
 8015ea4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8015ea6:	2b00      	cmp	r3, #0
 8015ea8:	d10c      	bne.n	8015ec4 <tcp_output_segment+0xfc>
    pcb->rttest = tcp_ticks;
 8015eaa:	4b35      	ldr	r3, [pc, #212]	; (8015f80 <tcp_output_segment+0x1b8>)
 8015eac:	681a      	ldr	r2, [r3, #0]
 8015eae:	68bb      	ldr	r3, [r7, #8]
 8015eb0:	635a      	str	r2, [r3, #52]	; 0x34
    pcb->rtseq = lwip_ntohl(seg->tcphdr->seqno);
 8015eb2:	68fb      	ldr	r3, [r7, #12]
 8015eb4:	68db      	ldr	r3, [r3, #12]
 8015eb6:	685b      	ldr	r3, [r3, #4]
 8015eb8:	4618      	mov	r0, r3
 8015eba:	f7f9 fd2a 	bl	800f912 <lwip_htonl>
 8015ebe:	4602      	mov	r2, r0
 8015ec0:	68bb      	ldr	r3, [r7, #8]
 8015ec2:	639a      	str	r2, [r3, #56]	; 0x38
  }
  LWIP_DEBUGF(TCP_OUTPUT_DEBUG, ("tcp_output_segment: %"U32_F":%"U32_F"\n",
                                 lwip_htonl(seg->tcphdr->seqno), lwip_htonl(seg->tcphdr->seqno) +
                                 seg->len));

  len = (u16_t)((u8_t *)seg->tcphdr - (u8_t *)seg->p->payload);
 8015ec4:	68fb      	ldr	r3, [r7, #12]
 8015ec6:	68da      	ldr	r2, [r3, #12]
 8015ec8:	68fb      	ldr	r3, [r7, #12]
 8015eca:	685b      	ldr	r3, [r3, #4]
 8015ecc:	685b      	ldr	r3, [r3, #4]
 8015ece:	1ad3      	subs	r3, r2, r3
 8015ed0:	833b      	strh	r3, [r7, #24]
  if (len == 0) {
    /** Exclude retransmitted segments from this count. */
    MIB2_STATS_INC(mib2.tcpoutsegs);
  }

  seg->p->len -= len;
 8015ed2:	68fb      	ldr	r3, [r7, #12]
 8015ed4:	685b      	ldr	r3, [r3, #4]
 8015ed6:	8959      	ldrh	r1, [r3, #10]
 8015ed8:	68fb      	ldr	r3, [r7, #12]
 8015eda:	685b      	ldr	r3, [r3, #4]
 8015edc:	8b3a      	ldrh	r2, [r7, #24]
 8015ede:	1a8a      	subs	r2, r1, r2
 8015ee0:	b292      	uxth	r2, r2
 8015ee2:	815a      	strh	r2, [r3, #10]
  seg->p->tot_len -= len;
 8015ee4:	68fb      	ldr	r3, [r7, #12]
 8015ee6:	685b      	ldr	r3, [r3, #4]
 8015ee8:	8919      	ldrh	r1, [r3, #8]
 8015eea:	68fb      	ldr	r3, [r7, #12]
 8015eec:	685b      	ldr	r3, [r3, #4]
 8015eee:	8b3a      	ldrh	r2, [r7, #24]
 8015ef0:	1a8a      	subs	r2, r1, r2
 8015ef2:	b292      	uxth	r2, r2
 8015ef4:	811a      	strh	r2, [r3, #8]

  seg->p->payload = seg->tcphdr;
 8015ef6:	68fb      	ldr	r3, [r7, #12]
 8015ef8:	685b      	ldr	r3, [r3, #4]
 8015efa:	68fa      	ldr	r2, [r7, #12]
 8015efc:	68d2      	ldr	r2, [r2, #12]
 8015efe:	605a      	str	r2, [r3, #4]

  seg->tcphdr->chksum = 0;
 8015f00:	68fb      	ldr	r3, [r7, #12]
 8015f02:	68db      	ldr	r3, [r3, #12]
 8015f04:	2200      	movs	r2, #0
 8015f06:	741a      	strb	r2, [r3, #16]
 8015f08:	2200      	movs	r2, #0
 8015f0a:	745a      	strb	r2, [r3, #17]

#ifdef LWIP_HOOK_TCP_OUT_ADD_TCPOPTS
  opts = LWIP_HOOK_TCP_OUT_ADD_TCPOPTS(seg->p, seg->tcphdr, pcb, opts);
#endif
  LWIP_ASSERT("options not filled", (u8_t *)opts == ((u8_t *)(seg->tcphdr + 1)) + LWIP_TCP_OPT_LENGTH_SEGMENT(seg->flags, pcb));
 8015f0c:	68fb      	ldr	r3, [r7, #12]
 8015f0e:	68da      	ldr	r2, [r3, #12]
 8015f10:	68fb      	ldr	r3, [r7, #12]
 8015f12:	7a9b      	ldrb	r3, [r3, #10]
 8015f14:	f003 0301 	and.w	r3, r3, #1
 8015f18:	2b00      	cmp	r3, #0
 8015f1a:	d001      	beq.n	8015f20 <tcp_output_segment+0x158>
 8015f1c:	2318      	movs	r3, #24
 8015f1e:	e000      	b.n	8015f22 <tcp_output_segment+0x15a>
 8015f20:	2314      	movs	r3, #20
 8015f22:	4413      	add	r3, r2
 8015f24:	69fa      	ldr	r2, [r7, #28]
 8015f26:	429a      	cmp	r2, r3
 8015f28:	d006      	beq.n	8015f38 <tcp_output_segment+0x170>
 8015f2a:	4b10      	ldr	r3, [pc, #64]	; (8015f6c <tcp_output_segment+0x1a4>)
 8015f2c:	f240 621c 	movw	r2, #1564	; 0x61c
 8015f30:	4914      	ldr	r1, [pc, #80]	; (8015f84 <tcp_output_segment+0x1bc>)
 8015f32:	4810      	ldr	r0, [pc, #64]	; (8015f74 <tcp_output_segment+0x1ac>)
 8015f34:	f003 ff94 	bl	8019e60 <iprintf>
  }
#endif /* CHECKSUM_GEN_TCP */
  TCP_STATS_INC(tcp.xmit);

  NETIF_SET_HINTS(netif, &(pcb->netif_hints));
  err = ip_output_if(seg->p, &pcb->local_ip, &pcb->remote_ip, pcb->ttl,
 8015f38:	68fb      	ldr	r3, [r7, #12]
 8015f3a:	6858      	ldr	r0, [r3, #4]
 8015f3c:	68b9      	ldr	r1, [r7, #8]
 8015f3e:	68bb      	ldr	r3, [r7, #8]
 8015f40:	1d1c      	adds	r4, r3, #4
 8015f42:	68bb      	ldr	r3, [r7, #8]
 8015f44:	7add      	ldrb	r5, [r3, #11]
 8015f46:	68bb      	ldr	r3, [r7, #8]
 8015f48:	7a9b      	ldrb	r3, [r3, #10]
 8015f4a:	687a      	ldr	r2, [r7, #4]
 8015f4c:	9202      	str	r2, [sp, #8]
 8015f4e:	2206      	movs	r2, #6
 8015f50:	9201      	str	r2, [sp, #4]
 8015f52:	9300      	str	r3, [sp, #0]
 8015f54:	462b      	mov	r3, r5
 8015f56:	4622      	mov	r2, r4
 8015f58:	f002 fa18 	bl	801838c <ip4_output_if>
 8015f5c:	4603      	mov	r3, r0
 8015f5e:	75fb      	strb	r3, [r7, #23]
    seg->chksum = SWAP_BYTES_IN_WORD(seg->chksum);
    seg->chksum_swapped = 1;
  }
#endif

  return err;
 8015f60:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8015f64:	4618      	mov	r0, r3
 8015f66:	3720      	adds	r7, #32
 8015f68:	46bd      	mov	sp, r7
 8015f6a:	bdb0      	pop	{r4, r5, r7, pc}
 8015f6c:	0801e06c 	.word	0x0801e06c
 8015f70:	0801e630 	.word	0x0801e630
 8015f74:	0801e0c0 	.word	0x0801e0c0
 8015f78:	0801e650 	.word	0x0801e650
 8015f7c:	0801e670 	.word	0x0801e670
 8015f80:	200070d4 	.word	0x200070d4
 8015f84:	0801e694 	.word	0x0801e694

08015f88 <tcp_rexmit_rto_prepare>:
 *
 * @param pcb the tcp_pcb for which to re-enqueue all unacked segments
 */
err_t
tcp_rexmit_rto_prepare(struct tcp_pcb *pcb)
{
 8015f88:	b5b0      	push	{r4, r5, r7, lr}
 8015f8a:	b084      	sub	sp, #16
 8015f8c:	af00      	add	r7, sp, #0
 8015f8e:	6078      	str	r0, [r7, #4]
  struct tcp_seg *seg;

  LWIP_ASSERT("tcp_rexmit_rto_prepare: invalid pcb", pcb != NULL);
 8015f90:	687b      	ldr	r3, [r7, #4]
 8015f92:	2b00      	cmp	r3, #0
 8015f94:	d106      	bne.n	8015fa4 <tcp_rexmit_rto_prepare+0x1c>
 8015f96:	4b31      	ldr	r3, [pc, #196]	; (801605c <tcp_rexmit_rto_prepare+0xd4>)
 8015f98:	f240 6263 	movw	r2, #1635	; 0x663
 8015f9c:	4930      	ldr	r1, [pc, #192]	; (8016060 <tcp_rexmit_rto_prepare+0xd8>)
 8015f9e:	4831      	ldr	r0, [pc, #196]	; (8016064 <tcp_rexmit_rto_prepare+0xdc>)
 8015fa0:	f003 ff5e 	bl	8019e60 <iprintf>

  if (pcb->unacked == NULL) {
 8015fa4:	687b      	ldr	r3, [r7, #4]
 8015fa6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8015fa8:	2b00      	cmp	r3, #0
 8015faa:	d102      	bne.n	8015fb2 <tcp_rexmit_rto_prepare+0x2a>
    return ERR_VAL;
 8015fac:	f06f 0305 	mvn.w	r3, #5
 8015fb0:	e050      	b.n	8016054 <tcp_rexmit_rto_prepare+0xcc>

  /* Move all unacked segments to the head of the unsent queue.
     However, give up if any of the unsent pbufs are still referenced by the
     netif driver due to deferred transmission. No point loading the link further
     if it is struggling to flush its buffered writes. */
  for (seg = pcb->unacked; seg->next != NULL; seg = seg->next) {
 8015fb2:	687b      	ldr	r3, [r7, #4]
 8015fb4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8015fb6:	60fb      	str	r3, [r7, #12]
 8015fb8:	e00b      	b.n	8015fd2 <tcp_rexmit_rto_prepare+0x4a>
    if (tcp_output_segment_busy(seg)) {
 8015fba:	68f8      	ldr	r0, [r7, #12]
 8015fbc:	f7ff fee4 	bl	8015d88 <tcp_output_segment_busy>
 8015fc0:	4603      	mov	r3, r0
 8015fc2:	2b00      	cmp	r3, #0
 8015fc4:	d002      	beq.n	8015fcc <tcp_rexmit_rto_prepare+0x44>
      LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_rexmit_rto: segment busy\n"));
      return ERR_VAL;
 8015fc6:	f06f 0305 	mvn.w	r3, #5
 8015fca:	e043      	b.n	8016054 <tcp_rexmit_rto_prepare+0xcc>
  for (seg = pcb->unacked; seg->next != NULL; seg = seg->next) {
 8015fcc:	68fb      	ldr	r3, [r7, #12]
 8015fce:	681b      	ldr	r3, [r3, #0]
 8015fd0:	60fb      	str	r3, [r7, #12]
 8015fd2:	68fb      	ldr	r3, [r7, #12]
 8015fd4:	681b      	ldr	r3, [r3, #0]
 8015fd6:	2b00      	cmp	r3, #0
 8015fd8:	d1ef      	bne.n	8015fba <tcp_rexmit_rto_prepare+0x32>
    }
  }
  if (tcp_output_segment_busy(seg)) {
 8015fda:	68f8      	ldr	r0, [r7, #12]
 8015fdc:	f7ff fed4 	bl	8015d88 <tcp_output_segment_busy>
 8015fe0:	4603      	mov	r3, r0
 8015fe2:	2b00      	cmp	r3, #0
 8015fe4:	d002      	beq.n	8015fec <tcp_rexmit_rto_prepare+0x64>
    LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_rexmit_rto: segment busy\n"));
    return ERR_VAL;
 8015fe6:	f06f 0305 	mvn.w	r3, #5
 8015fea:	e033      	b.n	8016054 <tcp_rexmit_rto_prepare+0xcc>
  }
  /* concatenate unsent queue after unacked queue */
  seg->next = pcb->unsent;
 8015fec:	687b      	ldr	r3, [r7, #4]
 8015fee:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 8015ff0:	68fb      	ldr	r3, [r7, #12]
 8015ff2:	601a      	str	r2, [r3, #0]
  if (pcb->unsent == NULL) {
    pcb->unsent_oversize = seg->oversize_left;
  }
#endif /* TCP_OVERSIZE_DBGCHECK */
  /* unsent queue is the concatenated queue (of unacked, unsent) */
  pcb->unsent = pcb->unacked;
 8015ff4:	687b      	ldr	r3, [r7, #4]
 8015ff6:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8015ff8:	687b      	ldr	r3, [r7, #4]
 8015ffa:	66da      	str	r2, [r3, #108]	; 0x6c
  /* unacked queue is now empty */
  pcb->unacked = NULL;
 8015ffc:	687b      	ldr	r3, [r7, #4]
 8015ffe:	2200      	movs	r2, #0
 8016000:	671a      	str	r2, [r3, #112]	; 0x70

  /* Mark RTO in-progress */
  tcp_set_flags(pcb, TF_RTO);
 8016002:	687b      	ldr	r3, [r7, #4]
 8016004:	8b5b      	ldrh	r3, [r3, #26]
 8016006:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 801600a:	b29a      	uxth	r2, r3
 801600c:	687b      	ldr	r3, [r7, #4]
 801600e:	835a      	strh	r2, [r3, #26]
  /* Record the next byte following retransmit */
  pcb->rto_end = lwip_ntohl(seg->tcphdr->seqno) + TCP_TCPLEN(seg);
 8016010:	68fb      	ldr	r3, [r7, #12]
 8016012:	68db      	ldr	r3, [r3, #12]
 8016014:	685b      	ldr	r3, [r3, #4]
 8016016:	4618      	mov	r0, r3
 8016018:	f7f9 fc7b 	bl	800f912 <lwip_htonl>
 801601c:	4604      	mov	r4, r0
 801601e:	68fb      	ldr	r3, [r7, #12]
 8016020:	891b      	ldrh	r3, [r3, #8]
 8016022:	461d      	mov	r5, r3
 8016024:	68fb      	ldr	r3, [r7, #12]
 8016026:	68db      	ldr	r3, [r3, #12]
 8016028:	899b      	ldrh	r3, [r3, #12]
 801602a:	b29b      	uxth	r3, r3
 801602c:	4618      	mov	r0, r3
 801602e:	f7f9 fc5b 	bl	800f8e8 <lwip_htons>
 8016032:	4603      	mov	r3, r0
 8016034:	b2db      	uxtb	r3, r3
 8016036:	f003 0303 	and.w	r3, r3, #3
 801603a:	2b00      	cmp	r3, #0
 801603c:	d001      	beq.n	8016042 <tcp_rexmit_rto_prepare+0xba>
 801603e:	2301      	movs	r3, #1
 8016040:	e000      	b.n	8016044 <tcp_rexmit_rto_prepare+0xbc>
 8016042:	2300      	movs	r3, #0
 8016044:	442b      	add	r3, r5
 8016046:	18e2      	adds	r2, r4, r3
 8016048:	687b      	ldr	r3, [r7, #4]
 801604a:	64da      	str	r2, [r3, #76]	; 0x4c
  /* Don't take any RTT measurements after retransmitting. */
  pcb->rttest = 0;
 801604c:	687b      	ldr	r3, [r7, #4]
 801604e:	2200      	movs	r2, #0
 8016050:	635a      	str	r2, [r3, #52]	; 0x34

  return ERR_OK;
 8016052:	2300      	movs	r3, #0
}
 8016054:	4618      	mov	r0, r3
 8016056:	3710      	adds	r7, #16
 8016058:	46bd      	mov	sp, r7
 801605a:	bdb0      	pop	{r4, r5, r7, pc}
 801605c:	0801e06c 	.word	0x0801e06c
 8016060:	0801e6a8 	.word	0x0801e6a8
 8016064:	0801e0c0 	.word	0x0801e0c0

08016068 <tcp_rexmit_rto_commit>:
 *
 * @param pcb the tcp_pcb for which to re-enqueue all unacked segments
 */
void
tcp_rexmit_rto_commit(struct tcp_pcb *pcb)
{
 8016068:	b580      	push	{r7, lr}
 801606a:	b082      	sub	sp, #8
 801606c:	af00      	add	r7, sp, #0
 801606e:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_rexmit_rto_commit: invalid pcb", pcb != NULL);
 8016070:	687b      	ldr	r3, [r7, #4]
 8016072:	2b00      	cmp	r3, #0
 8016074:	d106      	bne.n	8016084 <tcp_rexmit_rto_commit+0x1c>
 8016076:	4b0d      	ldr	r3, [pc, #52]	; (80160ac <tcp_rexmit_rto_commit+0x44>)
 8016078:	f44f 62d3 	mov.w	r2, #1688	; 0x698
 801607c:	490c      	ldr	r1, [pc, #48]	; (80160b0 <tcp_rexmit_rto_commit+0x48>)
 801607e:	480d      	ldr	r0, [pc, #52]	; (80160b4 <tcp_rexmit_rto_commit+0x4c>)
 8016080:	f003 feee 	bl	8019e60 <iprintf>

  /* increment number of retransmissions */
  if (pcb->nrtx < 0xFF) {
 8016084:	687b      	ldr	r3, [r7, #4]
 8016086:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 801608a:	2bff      	cmp	r3, #255	; 0xff
 801608c:	d007      	beq.n	801609e <tcp_rexmit_rto_commit+0x36>
    ++pcb->nrtx;
 801608e:	687b      	ldr	r3, [r7, #4]
 8016090:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8016094:	3301      	adds	r3, #1
 8016096:	b2da      	uxtb	r2, r3
 8016098:	687b      	ldr	r3, [r7, #4]
 801609a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  }
  /* Do the actual retransmission */
  tcp_output(pcb);
 801609e:	6878      	ldr	r0, [r7, #4]
 80160a0:	f7ff fc7e 	bl	80159a0 <tcp_output>
}
 80160a4:	bf00      	nop
 80160a6:	3708      	adds	r7, #8
 80160a8:	46bd      	mov	sp, r7
 80160aa:	bd80      	pop	{r7, pc}
 80160ac:	0801e06c 	.word	0x0801e06c
 80160b0:	0801e6cc 	.word	0x0801e6cc
 80160b4:	0801e0c0 	.word	0x0801e0c0

080160b8 <tcp_rexmit_rto>:
 *
 * @param pcb the tcp_pcb for which to re-enqueue all unacked segments
 */
void
tcp_rexmit_rto(struct tcp_pcb *pcb)
{
 80160b8:	b580      	push	{r7, lr}
 80160ba:	b082      	sub	sp, #8
 80160bc:	af00      	add	r7, sp, #0
 80160be:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_rexmit_rto: invalid pcb", pcb != NULL);
 80160c0:	687b      	ldr	r3, [r7, #4]
 80160c2:	2b00      	cmp	r3, #0
 80160c4:	d106      	bne.n	80160d4 <tcp_rexmit_rto+0x1c>
 80160c6:	4b0a      	ldr	r3, [pc, #40]	; (80160f0 <tcp_rexmit_rto+0x38>)
 80160c8:	f240 62ad 	movw	r2, #1709	; 0x6ad
 80160cc:	4909      	ldr	r1, [pc, #36]	; (80160f4 <tcp_rexmit_rto+0x3c>)
 80160ce:	480a      	ldr	r0, [pc, #40]	; (80160f8 <tcp_rexmit_rto+0x40>)
 80160d0:	f003 fec6 	bl	8019e60 <iprintf>

  if (tcp_rexmit_rto_prepare(pcb) == ERR_OK) {
 80160d4:	6878      	ldr	r0, [r7, #4]
 80160d6:	f7ff ff57 	bl	8015f88 <tcp_rexmit_rto_prepare>
 80160da:	4603      	mov	r3, r0
 80160dc:	2b00      	cmp	r3, #0
 80160de:	d102      	bne.n	80160e6 <tcp_rexmit_rto+0x2e>
    tcp_rexmit_rto_commit(pcb);
 80160e0:	6878      	ldr	r0, [r7, #4]
 80160e2:	f7ff ffc1 	bl	8016068 <tcp_rexmit_rto_commit>
  }
}
 80160e6:	bf00      	nop
 80160e8:	3708      	adds	r7, #8
 80160ea:	46bd      	mov	sp, r7
 80160ec:	bd80      	pop	{r7, pc}
 80160ee:	bf00      	nop
 80160f0:	0801e06c 	.word	0x0801e06c
 80160f4:	0801e6f0 	.word	0x0801e6f0
 80160f8:	0801e0c0 	.word	0x0801e0c0

080160fc <tcp_rexmit>:
 *
 * @param pcb the tcp_pcb for which to retransmit the first unacked segment
 */
err_t
tcp_rexmit(struct tcp_pcb *pcb)
{
 80160fc:	b590      	push	{r4, r7, lr}
 80160fe:	b085      	sub	sp, #20
 8016100:	af00      	add	r7, sp, #0
 8016102:	6078      	str	r0, [r7, #4]
  struct tcp_seg *seg;
  struct tcp_seg **cur_seg;

  LWIP_ASSERT("tcp_rexmit: invalid pcb", pcb != NULL);
 8016104:	687b      	ldr	r3, [r7, #4]
 8016106:	2b00      	cmp	r3, #0
 8016108:	d106      	bne.n	8016118 <tcp_rexmit+0x1c>
 801610a:	4b2f      	ldr	r3, [pc, #188]	; (80161c8 <tcp_rexmit+0xcc>)
 801610c:	f240 62c1 	movw	r2, #1729	; 0x6c1
 8016110:	492e      	ldr	r1, [pc, #184]	; (80161cc <tcp_rexmit+0xd0>)
 8016112:	482f      	ldr	r0, [pc, #188]	; (80161d0 <tcp_rexmit+0xd4>)
 8016114:	f003 fea4 	bl	8019e60 <iprintf>

  if (pcb->unacked == NULL) {
 8016118:	687b      	ldr	r3, [r7, #4]
 801611a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 801611c:	2b00      	cmp	r3, #0
 801611e:	d102      	bne.n	8016126 <tcp_rexmit+0x2a>
    return ERR_VAL;
 8016120:	f06f 0305 	mvn.w	r3, #5
 8016124:	e04c      	b.n	80161c0 <tcp_rexmit+0xc4>
  }

  seg = pcb->unacked;
 8016126:	687b      	ldr	r3, [r7, #4]
 8016128:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 801612a:	60bb      	str	r3, [r7, #8]

  /* Give up if the segment is still referenced by the netif driver
     due to deferred transmission. */
  if (tcp_output_segment_busy(seg)) {
 801612c:	68b8      	ldr	r0, [r7, #8]
 801612e:	f7ff fe2b 	bl	8015d88 <tcp_output_segment_busy>
 8016132:	4603      	mov	r3, r0
 8016134:	2b00      	cmp	r3, #0
 8016136:	d002      	beq.n	801613e <tcp_rexmit+0x42>
    LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_rexmit busy\n"));
    return ERR_VAL;
 8016138:	f06f 0305 	mvn.w	r3, #5
 801613c:	e040      	b.n	80161c0 <tcp_rexmit+0xc4>
  }

  /* Move the first unacked segment to the unsent queue */
  /* Keep the unsent queue sorted. */
  pcb->unacked = seg->next;
 801613e:	68bb      	ldr	r3, [r7, #8]
 8016140:	681a      	ldr	r2, [r3, #0]
 8016142:	687b      	ldr	r3, [r7, #4]
 8016144:	671a      	str	r2, [r3, #112]	; 0x70

  cur_seg = &(pcb->unsent);
 8016146:	687b      	ldr	r3, [r7, #4]
 8016148:	336c      	adds	r3, #108	; 0x6c
 801614a:	60fb      	str	r3, [r7, #12]
  while (*cur_seg &&
 801614c:	e002      	b.n	8016154 <tcp_rexmit+0x58>
         TCP_SEQ_LT(lwip_ntohl((*cur_seg)->tcphdr->seqno), lwip_ntohl(seg->tcphdr->seqno))) {
    cur_seg = &((*cur_seg)->next );
 801614e:	68fb      	ldr	r3, [r7, #12]
 8016150:	681b      	ldr	r3, [r3, #0]
 8016152:	60fb      	str	r3, [r7, #12]
  while (*cur_seg &&
 8016154:	68fb      	ldr	r3, [r7, #12]
 8016156:	681b      	ldr	r3, [r3, #0]
 8016158:	2b00      	cmp	r3, #0
 801615a:	d011      	beq.n	8016180 <tcp_rexmit+0x84>
         TCP_SEQ_LT(lwip_ntohl((*cur_seg)->tcphdr->seqno), lwip_ntohl(seg->tcphdr->seqno))) {
 801615c:	68fb      	ldr	r3, [r7, #12]
 801615e:	681b      	ldr	r3, [r3, #0]
 8016160:	68db      	ldr	r3, [r3, #12]
 8016162:	685b      	ldr	r3, [r3, #4]
 8016164:	4618      	mov	r0, r3
 8016166:	f7f9 fbd4 	bl	800f912 <lwip_htonl>
 801616a:	4604      	mov	r4, r0
 801616c:	68bb      	ldr	r3, [r7, #8]
 801616e:	68db      	ldr	r3, [r3, #12]
 8016170:	685b      	ldr	r3, [r3, #4]
 8016172:	4618      	mov	r0, r3
 8016174:	f7f9 fbcd 	bl	800f912 <lwip_htonl>
 8016178:	4603      	mov	r3, r0
 801617a:	1ae3      	subs	r3, r4, r3
  while (*cur_seg &&
 801617c:	2b00      	cmp	r3, #0
 801617e:	dbe6      	blt.n	801614e <tcp_rexmit+0x52>
  }
  seg->next = *cur_seg;
 8016180:	68fb      	ldr	r3, [r7, #12]
 8016182:	681a      	ldr	r2, [r3, #0]
 8016184:	68bb      	ldr	r3, [r7, #8]
 8016186:	601a      	str	r2, [r3, #0]
  *cur_seg = seg;
 8016188:	68fb      	ldr	r3, [r7, #12]
 801618a:	68ba      	ldr	r2, [r7, #8]
 801618c:	601a      	str	r2, [r3, #0]
#if TCP_OVERSIZE
  if (seg->next == NULL) {
 801618e:	68bb      	ldr	r3, [r7, #8]
 8016190:	681b      	ldr	r3, [r3, #0]
 8016192:	2b00      	cmp	r3, #0
 8016194:	d103      	bne.n	801619e <tcp_rexmit+0xa2>
    /* the retransmitted segment is last in unsent, so reset unsent_oversize */
    pcb->unsent_oversize = 0;
 8016196:	687b      	ldr	r3, [r7, #4]
 8016198:	2200      	movs	r2, #0
 801619a:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
  }
#endif /* TCP_OVERSIZE */

  if (pcb->nrtx < 0xFF) {
 801619e:	687b      	ldr	r3, [r7, #4]
 80161a0:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 80161a4:	2bff      	cmp	r3, #255	; 0xff
 80161a6:	d007      	beq.n	80161b8 <tcp_rexmit+0xbc>
    ++pcb->nrtx;
 80161a8:	687b      	ldr	r3, [r7, #4]
 80161aa:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 80161ae:	3301      	adds	r3, #1
 80161b0:	b2da      	uxtb	r2, r3
 80161b2:	687b      	ldr	r3, [r7, #4]
 80161b4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  }

  /* Don't take any rtt measurements after retransmitting. */
  pcb->rttest = 0;
 80161b8:	687b      	ldr	r3, [r7, #4]
 80161ba:	2200      	movs	r2, #0
 80161bc:	635a      	str	r2, [r3, #52]	; 0x34

  /* Do the actual retransmission. */
  MIB2_STATS_INC(mib2.tcpretranssegs);
  /* No need to call tcp_output: we are always called from tcp_input()
     and thus tcp_output directly returns. */
  return ERR_OK;
 80161be:	2300      	movs	r3, #0
}
 80161c0:	4618      	mov	r0, r3
 80161c2:	3714      	adds	r7, #20
 80161c4:	46bd      	mov	sp, r7
 80161c6:	bd90      	pop	{r4, r7, pc}
 80161c8:	0801e06c 	.word	0x0801e06c
 80161cc:	0801e70c 	.word	0x0801e70c
 80161d0:	0801e0c0 	.word	0x0801e0c0

080161d4 <tcp_rexmit_fast>:
 *
 * @param pcb the tcp_pcb for which to retransmit the first unacked segment
 */
void
tcp_rexmit_fast(struct tcp_pcb *pcb)
{
 80161d4:	b580      	push	{r7, lr}
 80161d6:	b082      	sub	sp, #8
 80161d8:	af00      	add	r7, sp, #0
 80161da:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_rexmit_fast: invalid pcb", pcb != NULL);
 80161dc:	687b      	ldr	r3, [r7, #4]
 80161de:	2b00      	cmp	r3, #0
 80161e0:	d106      	bne.n	80161f0 <tcp_rexmit_fast+0x1c>
 80161e2:	4b2a      	ldr	r3, [pc, #168]	; (801628c <tcp_rexmit_fast+0xb8>)
 80161e4:	f240 62f9 	movw	r2, #1785	; 0x6f9
 80161e8:	4929      	ldr	r1, [pc, #164]	; (8016290 <tcp_rexmit_fast+0xbc>)
 80161ea:	482a      	ldr	r0, [pc, #168]	; (8016294 <tcp_rexmit_fast+0xc0>)
 80161ec:	f003 fe38 	bl	8019e60 <iprintf>

  if (pcb->unacked != NULL && !(pcb->flags & TF_INFR)) {
 80161f0:	687b      	ldr	r3, [r7, #4]
 80161f2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80161f4:	2b00      	cmp	r3, #0
 80161f6:	d045      	beq.n	8016284 <tcp_rexmit_fast+0xb0>
 80161f8:	687b      	ldr	r3, [r7, #4]
 80161fa:	8b5b      	ldrh	r3, [r3, #26]
 80161fc:	f003 0304 	and.w	r3, r3, #4
 8016200:	2b00      	cmp	r3, #0
 8016202:	d13f      	bne.n	8016284 <tcp_rexmit_fast+0xb0>
    LWIP_DEBUGF(TCP_FR_DEBUG,
                ("tcp_receive: dupacks %"U16_F" (%"U32_F
                 "), fast retransmit %"U32_F"\n",
                 (u16_t)pcb->dupacks, pcb->lastack,
                 lwip_ntohl(pcb->unacked->tcphdr->seqno)));
    if (tcp_rexmit(pcb) == ERR_OK) {
 8016204:	6878      	ldr	r0, [r7, #4]
 8016206:	f7ff ff79 	bl	80160fc <tcp_rexmit>
 801620a:	4603      	mov	r3, r0
 801620c:	2b00      	cmp	r3, #0
 801620e:	d139      	bne.n	8016284 <tcp_rexmit_fast+0xb0>
      /* Set ssthresh to half of the minimum of the current
       * cwnd and the advertised window */
      pcb->ssthresh = LWIP_MIN(pcb->cwnd, pcb->snd_wnd) / 2;
 8016210:	687b      	ldr	r3, [r7, #4]
 8016212:	f8b3 2060 	ldrh.w	r2, [r3, #96]	; 0x60
 8016216:	687b      	ldr	r3, [r7, #4]
 8016218:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 801621c:	4293      	cmp	r3, r2
 801621e:	bf28      	it	cs
 8016220:	4613      	movcs	r3, r2
 8016222:	b29b      	uxth	r3, r3
 8016224:	2b00      	cmp	r3, #0
 8016226:	da00      	bge.n	801622a <tcp_rexmit_fast+0x56>
 8016228:	3301      	adds	r3, #1
 801622a:	105b      	asrs	r3, r3, #1
 801622c:	b29a      	uxth	r2, r3
 801622e:	687b      	ldr	r3, [r7, #4]
 8016230:	f8a3 204a 	strh.w	r2, [r3, #74]	; 0x4a

      /* The minimum value for ssthresh should be 2 MSS */
      if (pcb->ssthresh < (2U * pcb->mss)) {
 8016234:	687b      	ldr	r3, [r7, #4]
 8016236:	f8b3 304a 	ldrh.w	r3, [r3, #74]	; 0x4a
 801623a:	461a      	mov	r2, r3
 801623c:	687b      	ldr	r3, [r7, #4]
 801623e:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8016240:	005b      	lsls	r3, r3, #1
 8016242:	429a      	cmp	r2, r3
 8016244:	d206      	bcs.n	8016254 <tcp_rexmit_fast+0x80>
        LWIP_DEBUGF(TCP_FR_DEBUG,
                    ("tcp_receive: The minimum value for ssthresh %"TCPWNDSIZE_F
                     " should be min 2 mss %"U16_F"...\n",
                     pcb->ssthresh, (u16_t)(2 * pcb->mss)));
        pcb->ssthresh = 2 * pcb->mss;
 8016246:	687b      	ldr	r3, [r7, #4]
 8016248:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 801624a:	005b      	lsls	r3, r3, #1
 801624c:	b29a      	uxth	r2, r3
 801624e:	687b      	ldr	r3, [r7, #4]
 8016250:	f8a3 204a 	strh.w	r2, [r3, #74]	; 0x4a
      }

      pcb->cwnd = pcb->ssthresh + 3 * pcb->mss;
 8016254:	687b      	ldr	r3, [r7, #4]
 8016256:	f8b3 204a 	ldrh.w	r2, [r3, #74]	; 0x4a
 801625a:	687b      	ldr	r3, [r7, #4]
 801625c:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 801625e:	4619      	mov	r1, r3
 8016260:	0049      	lsls	r1, r1, #1
 8016262:	440b      	add	r3, r1
 8016264:	b29b      	uxth	r3, r3
 8016266:	4413      	add	r3, r2
 8016268:	b29a      	uxth	r2, r3
 801626a:	687b      	ldr	r3, [r7, #4]
 801626c:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
      tcp_set_flags(pcb, TF_INFR);
 8016270:	687b      	ldr	r3, [r7, #4]
 8016272:	8b5b      	ldrh	r3, [r3, #26]
 8016274:	f043 0304 	orr.w	r3, r3, #4
 8016278:	b29a      	uxth	r2, r3
 801627a:	687b      	ldr	r3, [r7, #4]
 801627c:	835a      	strh	r2, [r3, #26]

      /* Reset the retransmission timer to prevent immediate rto retransmissions */
      pcb->rtime = 0;
 801627e:	687b      	ldr	r3, [r7, #4]
 8016280:	2200      	movs	r2, #0
 8016282:	861a      	strh	r2, [r3, #48]	; 0x30
    }
  }
}
 8016284:	bf00      	nop
 8016286:	3708      	adds	r7, #8
 8016288:	46bd      	mov	sp, r7
 801628a:	bd80      	pop	{r7, pc}
 801628c:	0801e06c 	.word	0x0801e06c
 8016290:	0801e724 	.word	0x0801e724
 8016294:	0801e0c0 	.word	0x0801e0c0

08016298 <tcp_output_alloc_header_common>:

static struct pbuf *
tcp_output_alloc_header_common(u32_t ackno, u16_t optlen, u16_t datalen,
                        u32_t seqno_be /* already in network byte order */,
                        u16_t src_port, u16_t dst_port, u8_t flags, u16_t wnd)
{
 8016298:	b580      	push	{r7, lr}
 801629a:	b086      	sub	sp, #24
 801629c:	af00      	add	r7, sp, #0
 801629e:	60f8      	str	r0, [r7, #12]
 80162a0:	607b      	str	r3, [r7, #4]
 80162a2:	460b      	mov	r3, r1
 80162a4:	817b      	strh	r3, [r7, #10]
 80162a6:	4613      	mov	r3, r2
 80162a8:	813b      	strh	r3, [r7, #8]
  struct tcp_hdr *tcphdr;
  struct pbuf *p;

  p = pbuf_alloc(PBUF_IP, TCP_HLEN + optlen + datalen, PBUF_RAM);
 80162aa:	897a      	ldrh	r2, [r7, #10]
 80162ac:	893b      	ldrh	r3, [r7, #8]
 80162ae:	4413      	add	r3, r2
 80162b0:	b29b      	uxth	r3, r3
 80162b2:	3314      	adds	r3, #20
 80162b4:	b29b      	uxth	r3, r3
 80162b6:	f44f 7220 	mov.w	r2, #640	; 0x280
 80162ba:	4619      	mov	r1, r3
 80162bc:	2022      	movs	r0, #34	; 0x22
 80162be:	f7fa fc13 	bl	8010ae8 <pbuf_alloc>
 80162c2:	6178      	str	r0, [r7, #20]
  if (p != NULL) {
 80162c4:	697b      	ldr	r3, [r7, #20]
 80162c6:	2b00      	cmp	r3, #0
 80162c8:	d04d      	beq.n	8016366 <tcp_output_alloc_header_common+0xce>
    LWIP_ASSERT("check that first pbuf can hold struct tcp_hdr",
 80162ca:	897b      	ldrh	r3, [r7, #10]
 80162cc:	3313      	adds	r3, #19
 80162ce:	697a      	ldr	r2, [r7, #20]
 80162d0:	8952      	ldrh	r2, [r2, #10]
 80162d2:	4293      	cmp	r3, r2
 80162d4:	db06      	blt.n	80162e4 <tcp_output_alloc_header_common+0x4c>
 80162d6:	4b26      	ldr	r3, [pc, #152]	; (8016370 <tcp_output_alloc_header_common+0xd8>)
 80162d8:	f240 7223 	movw	r2, #1827	; 0x723
 80162dc:	4925      	ldr	r1, [pc, #148]	; (8016374 <tcp_output_alloc_header_common+0xdc>)
 80162de:	4826      	ldr	r0, [pc, #152]	; (8016378 <tcp_output_alloc_header_common+0xe0>)
 80162e0:	f003 fdbe 	bl	8019e60 <iprintf>
                (p->len >= TCP_HLEN + optlen));
    tcphdr = (struct tcp_hdr *)p->payload;
 80162e4:	697b      	ldr	r3, [r7, #20]
 80162e6:	685b      	ldr	r3, [r3, #4]
 80162e8:	613b      	str	r3, [r7, #16]
    tcphdr->src = lwip_htons(src_port);
 80162ea:	8c3b      	ldrh	r3, [r7, #32]
 80162ec:	4618      	mov	r0, r3
 80162ee:	f7f9 fafb 	bl	800f8e8 <lwip_htons>
 80162f2:	4603      	mov	r3, r0
 80162f4:	461a      	mov	r2, r3
 80162f6:	693b      	ldr	r3, [r7, #16]
 80162f8:	801a      	strh	r2, [r3, #0]
    tcphdr->dest = lwip_htons(dst_port);
 80162fa:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80162fc:	4618      	mov	r0, r3
 80162fe:	f7f9 faf3 	bl	800f8e8 <lwip_htons>
 8016302:	4603      	mov	r3, r0
 8016304:	461a      	mov	r2, r3
 8016306:	693b      	ldr	r3, [r7, #16]
 8016308:	805a      	strh	r2, [r3, #2]
    tcphdr->seqno = seqno_be;
 801630a:	693b      	ldr	r3, [r7, #16]
 801630c:	687a      	ldr	r2, [r7, #4]
 801630e:	605a      	str	r2, [r3, #4]
    tcphdr->ackno = lwip_htonl(ackno);
 8016310:	68f8      	ldr	r0, [r7, #12]
 8016312:	f7f9 fafe 	bl	800f912 <lwip_htonl>
 8016316:	4602      	mov	r2, r0
 8016318:	693b      	ldr	r3, [r7, #16]
 801631a:	609a      	str	r2, [r3, #8]
    TCPH_HDRLEN_FLAGS_SET(tcphdr, (5 + optlen / 4), flags);
 801631c:	897b      	ldrh	r3, [r7, #10]
 801631e:	089b      	lsrs	r3, r3, #2
 8016320:	b29b      	uxth	r3, r3
 8016322:	3305      	adds	r3, #5
 8016324:	b29b      	uxth	r3, r3
 8016326:	031b      	lsls	r3, r3, #12
 8016328:	b29a      	uxth	r2, r3
 801632a:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 801632e:	b29b      	uxth	r3, r3
 8016330:	4313      	orrs	r3, r2
 8016332:	b29b      	uxth	r3, r3
 8016334:	4618      	mov	r0, r3
 8016336:	f7f9 fad7 	bl	800f8e8 <lwip_htons>
 801633a:	4603      	mov	r3, r0
 801633c:	461a      	mov	r2, r3
 801633e:	693b      	ldr	r3, [r7, #16]
 8016340:	819a      	strh	r2, [r3, #12]
    tcphdr->wnd = lwip_htons(wnd);
 8016342:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 8016344:	4618      	mov	r0, r3
 8016346:	f7f9 facf 	bl	800f8e8 <lwip_htons>
 801634a:	4603      	mov	r3, r0
 801634c:	461a      	mov	r2, r3
 801634e:	693b      	ldr	r3, [r7, #16]
 8016350:	81da      	strh	r2, [r3, #14]
    tcphdr->chksum = 0;
 8016352:	693b      	ldr	r3, [r7, #16]
 8016354:	2200      	movs	r2, #0
 8016356:	741a      	strb	r2, [r3, #16]
 8016358:	2200      	movs	r2, #0
 801635a:	745a      	strb	r2, [r3, #17]
    tcphdr->urgp = 0;
 801635c:	693b      	ldr	r3, [r7, #16]
 801635e:	2200      	movs	r2, #0
 8016360:	749a      	strb	r2, [r3, #18]
 8016362:	2200      	movs	r2, #0
 8016364:	74da      	strb	r2, [r3, #19]
  }
  return p;
 8016366:	697b      	ldr	r3, [r7, #20]
}
 8016368:	4618      	mov	r0, r3
 801636a:	3718      	adds	r7, #24
 801636c:	46bd      	mov	sp, r7
 801636e:	bd80      	pop	{r7, pc}
 8016370:	0801e06c 	.word	0x0801e06c
 8016374:	0801e744 	.word	0x0801e744
 8016378:	0801e0c0 	.word	0x0801e0c0

0801637c <tcp_output_alloc_header>:
 * @return pbuf with p->payload being the tcp_hdr
 */
static struct pbuf *
tcp_output_alloc_header(struct tcp_pcb *pcb, u16_t optlen, u16_t datalen,
                        u32_t seqno_be /* already in network byte order */)
{
 801637c:	b5b0      	push	{r4, r5, r7, lr}
 801637e:	b08a      	sub	sp, #40	; 0x28
 8016380:	af04      	add	r7, sp, #16
 8016382:	60f8      	str	r0, [r7, #12]
 8016384:	607b      	str	r3, [r7, #4]
 8016386:	460b      	mov	r3, r1
 8016388:	817b      	strh	r3, [r7, #10]
 801638a:	4613      	mov	r3, r2
 801638c:	813b      	strh	r3, [r7, #8]
  struct pbuf *p;

  LWIP_ASSERT("tcp_output_alloc_header: invalid pcb", pcb != NULL);
 801638e:	68fb      	ldr	r3, [r7, #12]
 8016390:	2b00      	cmp	r3, #0
 8016392:	d106      	bne.n	80163a2 <tcp_output_alloc_header+0x26>
 8016394:	4b15      	ldr	r3, [pc, #84]	; (80163ec <tcp_output_alloc_header+0x70>)
 8016396:	f240 7242 	movw	r2, #1858	; 0x742
 801639a:	4915      	ldr	r1, [pc, #84]	; (80163f0 <tcp_output_alloc_header+0x74>)
 801639c:	4815      	ldr	r0, [pc, #84]	; (80163f4 <tcp_output_alloc_header+0x78>)
 801639e:	f003 fd5f 	bl	8019e60 <iprintf>

  p = tcp_output_alloc_header_common(pcb->rcv_nxt, optlen, datalen,
 80163a2:	68fb      	ldr	r3, [r7, #12]
 80163a4:	6a58      	ldr	r0, [r3, #36]	; 0x24
 80163a6:	68fb      	ldr	r3, [r7, #12]
 80163a8:	8adb      	ldrh	r3, [r3, #22]
 80163aa:	68fa      	ldr	r2, [r7, #12]
 80163ac:	8b12      	ldrh	r2, [r2, #24]
 80163ae:	68f9      	ldr	r1, [r7, #12]
 80163b0:	8d49      	ldrh	r1, [r1, #42]	; 0x2a
 80163b2:	893d      	ldrh	r5, [r7, #8]
 80163b4:	897c      	ldrh	r4, [r7, #10]
 80163b6:	9103      	str	r1, [sp, #12]
 80163b8:	2110      	movs	r1, #16
 80163ba:	9102      	str	r1, [sp, #8]
 80163bc:	9201      	str	r2, [sp, #4]
 80163be:	9300      	str	r3, [sp, #0]
 80163c0:	687b      	ldr	r3, [r7, #4]
 80163c2:	462a      	mov	r2, r5
 80163c4:	4621      	mov	r1, r4
 80163c6:	f7ff ff67 	bl	8016298 <tcp_output_alloc_header_common>
 80163ca:	6178      	str	r0, [r7, #20]
    seqno_be, pcb->local_port, pcb->remote_port, TCP_ACK,
    TCPWND_MIN16(RCV_WND_SCALE(pcb, pcb->rcv_ann_wnd)));
  if (p != NULL) {
 80163cc:	697b      	ldr	r3, [r7, #20]
 80163ce:	2b00      	cmp	r3, #0
 80163d0:	d006      	beq.n	80163e0 <tcp_output_alloc_header+0x64>
    /* If we're sending a packet, update the announced right window edge */
    pcb->rcv_ann_right_edge = pcb->rcv_nxt + pcb->rcv_ann_wnd;
 80163d2:	68fb      	ldr	r3, [r7, #12]
 80163d4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80163d6:	68fa      	ldr	r2, [r7, #12]
 80163d8:	8d52      	ldrh	r2, [r2, #42]	; 0x2a
 80163da:	441a      	add	r2, r3
 80163dc:	68fb      	ldr	r3, [r7, #12]
 80163de:	62da      	str	r2, [r3, #44]	; 0x2c
  }
  return p;
 80163e0:	697b      	ldr	r3, [r7, #20]
}
 80163e2:	4618      	mov	r0, r3
 80163e4:	3718      	adds	r7, #24
 80163e6:	46bd      	mov	sp, r7
 80163e8:	bdb0      	pop	{r4, r5, r7, pc}
 80163ea:	bf00      	nop
 80163ec:	0801e06c 	.word	0x0801e06c
 80163f0:	0801e774 	.word	0x0801e774
 80163f4:	0801e0c0 	.word	0x0801e0c0

080163f8 <tcp_output_fill_options>:

/* Fill in options for control segments */
static void
tcp_output_fill_options(const struct tcp_pcb *pcb, struct pbuf *p, u8_t optflags, u8_t num_sacks)
{
 80163f8:	b580      	push	{r7, lr}
 80163fa:	b088      	sub	sp, #32
 80163fc:	af00      	add	r7, sp, #0
 80163fe:	60f8      	str	r0, [r7, #12]
 8016400:	60b9      	str	r1, [r7, #8]
 8016402:	4611      	mov	r1, r2
 8016404:	461a      	mov	r2, r3
 8016406:	460b      	mov	r3, r1
 8016408:	71fb      	strb	r3, [r7, #7]
 801640a:	4613      	mov	r3, r2
 801640c:	71bb      	strb	r3, [r7, #6]
  struct tcp_hdr *tcphdr;
  u32_t *opts;
  u16_t sacks_len = 0;
 801640e:	2300      	movs	r3, #0
 8016410:	83fb      	strh	r3, [r7, #30]

  LWIP_ASSERT("tcp_output_fill_options: invalid pbuf", p != NULL);
 8016412:	68bb      	ldr	r3, [r7, #8]
 8016414:	2b00      	cmp	r3, #0
 8016416:	d106      	bne.n	8016426 <tcp_output_fill_options+0x2e>
 8016418:	4b12      	ldr	r3, [pc, #72]	; (8016464 <tcp_output_fill_options+0x6c>)
 801641a:	f240 7256 	movw	r2, #1878	; 0x756
 801641e:	4912      	ldr	r1, [pc, #72]	; (8016468 <tcp_output_fill_options+0x70>)
 8016420:	4812      	ldr	r0, [pc, #72]	; (801646c <tcp_output_fill_options+0x74>)
 8016422:	f003 fd1d 	bl	8019e60 <iprintf>

  tcphdr = (struct tcp_hdr *)p->payload;
 8016426:	68bb      	ldr	r3, [r7, #8]
 8016428:	685b      	ldr	r3, [r3, #4]
 801642a:	61bb      	str	r3, [r7, #24]
  opts = (u32_t *)(void *)(tcphdr + 1);
 801642c:	69bb      	ldr	r3, [r7, #24]
 801642e:	3314      	adds	r3, #20
 8016430:	617b      	str	r3, [r7, #20]
  opts = LWIP_HOOK_TCP_OUT_ADD_TCPOPTS(p, tcphdr, pcb, opts);
#endif

  LWIP_UNUSED_ARG(pcb);
  LWIP_UNUSED_ARG(sacks_len);
  LWIP_ASSERT("options not filled", (u8_t *)opts == ((u8_t *)(tcphdr + 1)) + sacks_len * 4 + LWIP_TCP_OPT_LENGTH_SEGMENT(optflags, pcb));
 8016432:	8bfb      	ldrh	r3, [r7, #30]
 8016434:	009b      	lsls	r3, r3, #2
 8016436:	461a      	mov	r2, r3
 8016438:	79fb      	ldrb	r3, [r7, #7]
 801643a:	009b      	lsls	r3, r3, #2
 801643c:	f003 0304 	and.w	r3, r3, #4
 8016440:	4413      	add	r3, r2
 8016442:	3314      	adds	r3, #20
 8016444:	69ba      	ldr	r2, [r7, #24]
 8016446:	4413      	add	r3, r2
 8016448:	697a      	ldr	r2, [r7, #20]
 801644a:	429a      	cmp	r2, r3
 801644c:	d006      	beq.n	801645c <tcp_output_fill_options+0x64>
 801644e:	4b05      	ldr	r3, [pc, #20]	; (8016464 <tcp_output_fill_options+0x6c>)
 8016450:	f240 7275 	movw	r2, #1909	; 0x775
 8016454:	4906      	ldr	r1, [pc, #24]	; (8016470 <tcp_output_fill_options+0x78>)
 8016456:	4805      	ldr	r0, [pc, #20]	; (801646c <tcp_output_fill_options+0x74>)
 8016458:	f003 fd02 	bl	8019e60 <iprintf>
  LWIP_UNUSED_ARG(optflags); /* for LWIP_NOASSERT */
  LWIP_UNUSED_ARG(opts); /* for LWIP_NOASSERT */
}
 801645c:	bf00      	nop
 801645e:	3720      	adds	r7, #32
 8016460:	46bd      	mov	sp, r7
 8016462:	bd80      	pop	{r7, pc}
 8016464:	0801e06c 	.word	0x0801e06c
 8016468:	0801e79c 	.word	0x0801e79c
 801646c:	0801e0c0 	.word	0x0801e0c0
 8016470:	0801e694 	.word	0x0801e694

08016474 <tcp_output_control_segment>:
 * header checksum and calling ip_output_if while handling netif hints and stats.
 */
static err_t
tcp_output_control_segment(const struct tcp_pcb *pcb, struct pbuf *p,
                           const ip_addr_t *src, const ip_addr_t *dst)
{
 8016474:	b580      	push	{r7, lr}
 8016476:	b08a      	sub	sp, #40	; 0x28
 8016478:	af04      	add	r7, sp, #16
 801647a:	60f8      	str	r0, [r7, #12]
 801647c:	60b9      	str	r1, [r7, #8]
 801647e:	607a      	str	r2, [r7, #4]
 8016480:	603b      	str	r3, [r7, #0]
  err_t err;
  struct netif *netif;

  LWIP_ASSERT("tcp_output_control_segment: invalid pbuf", p != NULL);
 8016482:	68bb      	ldr	r3, [r7, #8]
 8016484:	2b00      	cmp	r3, #0
 8016486:	d106      	bne.n	8016496 <tcp_output_control_segment+0x22>
 8016488:	4b1c      	ldr	r3, [pc, #112]	; (80164fc <tcp_output_control_segment+0x88>)
 801648a:	f240 7287 	movw	r2, #1927	; 0x787
 801648e:	491c      	ldr	r1, [pc, #112]	; (8016500 <tcp_output_control_segment+0x8c>)
 8016490:	481c      	ldr	r0, [pc, #112]	; (8016504 <tcp_output_control_segment+0x90>)
 8016492:	f003 fce5 	bl	8019e60 <iprintf>

  netif = tcp_route(pcb, src, dst);
 8016496:	683a      	ldr	r2, [r7, #0]
 8016498:	6879      	ldr	r1, [r7, #4]
 801649a:	68f8      	ldr	r0, [r7, #12]
 801649c:	f7fe ff40 	bl	8015320 <tcp_route>
 80164a0:	6138      	str	r0, [r7, #16]
  if (netif == NULL) {
 80164a2:	693b      	ldr	r3, [r7, #16]
 80164a4:	2b00      	cmp	r3, #0
 80164a6:	d102      	bne.n	80164ae <tcp_output_control_segment+0x3a>
    err = ERR_RTE;
 80164a8:	23fc      	movs	r3, #252	; 0xfc
 80164aa:	75fb      	strb	r3, [r7, #23]
 80164ac:	e01c      	b.n	80164e8 <tcp_output_control_segment+0x74>
      struct tcp_hdr *tcphdr = (struct tcp_hdr *)p->payload;
      tcphdr->chksum = ip_chksum_pseudo(p, IP_PROTO_TCP, p->tot_len,
                                        src, dst);
    }
#endif
    if (pcb != NULL) {
 80164ae:	68fb      	ldr	r3, [r7, #12]
 80164b0:	2b00      	cmp	r3, #0
 80164b2:	d006      	beq.n	80164c2 <tcp_output_control_segment+0x4e>
      NETIF_SET_HINTS(netif, LWIP_CONST_CAST(struct netif_hint*, &(pcb->netif_hints)));
      ttl = pcb->ttl;
 80164b4:	68fb      	ldr	r3, [r7, #12]
 80164b6:	7adb      	ldrb	r3, [r3, #11]
 80164b8:	75bb      	strb	r3, [r7, #22]
      tos = pcb->tos;
 80164ba:	68fb      	ldr	r3, [r7, #12]
 80164bc:	7a9b      	ldrb	r3, [r3, #10]
 80164be:	757b      	strb	r3, [r7, #21]
 80164c0:	e003      	b.n	80164ca <tcp_output_control_segment+0x56>
    } else {
      /* Send output with hardcoded TTL/HL since we have no access to the pcb */
      ttl = TCP_TTL;
 80164c2:	23ff      	movs	r3, #255	; 0xff
 80164c4:	75bb      	strb	r3, [r7, #22]
      tos = 0;
 80164c6:	2300      	movs	r3, #0
 80164c8:	757b      	strb	r3, [r7, #21]
    }
    TCP_STATS_INC(tcp.xmit);
    err = ip_output_if(p, src, dst, ttl, tos, IP_PROTO_TCP, netif);
 80164ca:	7dba      	ldrb	r2, [r7, #22]
 80164cc:	693b      	ldr	r3, [r7, #16]
 80164ce:	9302      	str	r3, [sp, #8]
 80164d0:	2306      	movs	r3, #6
 80164d2:	9301      	str	r3, [sp, #4]
 80164d4:	7d7b      	ldrb	r3, [r7, #21]
 80164d6:	9300      	str	r3, [sp, #0]
 80164d8:	4613      	mov	r3, r2
 80164da:	683a      	ldr	r2, [r7, #0]
 80164dc:	6879      	ldr	r1, [r7, #4]
 80164de:	68b8      	ldr	r0, [r7, #8]
 80164e0:	f001 ff54 	bl	801838c <ip4_output_if>
 80164e4:	4603      	mov	r3, r0
 80164e6:	75fb      	strb	r3, [r7, #23]
    NETIF_RESET_HINTS(netif);
  }
  pbuf_free(p);
 80164e8:	68b8      	ldr	r0, [r7, #8]
 80164ea:	f7fa fde1 	bl	80110b0 <pbuf_free>
  return err;
 80164ee:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 80164f2:	4618      	mov	r0, r3
 80164f4:	3718      	adds	r7, #24
 80164f6:	46bd      	mov	sp, r7
 80164f8:	bd80      	pop	{r7, pc}
 80164fa:	bf00      	nop
 80164fc:	0801e06c 	.word	0x0801e06c
 8016500:	0801e7c4 	.word	0x0801e7c4
 8016504:	0801e0c0 	.word	0x0801e0c0

08016508 <tcp_rst>:
 */
void
tcp_rst(const struct tcp_pcb *pcb, u32_t seqno, u32_t ackno,
        const ip_addr_t *local_ip, const ip_addr_t *remote_ip,
        u16_t local_port, u16_t remote_port)
{
 8016508:	b590      	push	{r4, r7, lr}
 801650a:	b08b      	sub	sp, #44	; 0x2c
 801650c:	af04      	add	r7, sp, #16
 801650e:	60f8      	str	r0, [r7, #12]
 8016510:	60b9      	str	r1, [r7, #8]
 8016512:	607a      	str	r2, [r7, #4]
 8016514:	603b      	str	r3, [r7, #0]
  struct pbuf *p;
  u16_t wnd;
  u8_t optlen;

  LWIP_ASSERT("tcp_rst: invalid local_ip", local_ip != NULL);
 8016516:	683b      	ldr	r3, [r7, #0]
 8016518:	2b00      	cmp	r3, #0
 801651a:	d106      	bne.n	801652a <tcp_rst+0x22>
 801651c:	4b1f      	ldr	r3, [pc, #124]	; (801659c <tcp_rst+0x94>)
 801651e:	f240 72c4 	movw	r2, #1988	; 0x7c4
 8016522:	491f      	ldr	r1, [pc, #124]	; (80165a0 <tcp_rst+0x98>)
 8016524:	481f      	ldr	r0, [pc, #124]	; (80165a4 <tcp_rst+0x9c>)
 8016526:	f003 fc9b 	bl	8019e60 <iprintf>
  LWIP_ASSERT("tcp_rst: invalid remote_ip", remote_ip != NULL);
 801652a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801652c:	2b00      	cmp	r3, #0
 801652e:	d106      	bne.n	801653e <tcp_rst+0x36>
 8016530:	4b1a      	ldr	r3, [pc, #104]	; (801659c <tcp_rst+0x94>)
 8016532:	f240 72c5 	movw	r2, #1989	; 0x7c5
 8016536:	491c      	ldr	r1, [pc, #112]	; (80165a8 <tcp_rst+0xa0>)
 8016538:	481a      	ldr	r0, [pc, #104]	; (80165a4 <tcp_rst+0x9c>)
 801653a:	f003 fc91 	bl	8019e60 <iprintf>

  optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(0, pcb);
 801653e:	2300      	movs	r3, #0
 8016540:	75fb      	strb	r3, [r7, #23]

#if LWIP_WND_SCALE
  wnd = PP_HTONS(((TCP_WND >> TCP_RCV_SCALE) & 0xFFFF));
#else
  wnd = PP_HTONS(TCP_WND);
 8016542:	f24d 0316 	movw	r3, #53270	; 0xd016
 8016546:	82bb      	strh	r3, [r7, #20]
#endif

  p = tcp_output_alloc_header_common(ackno, optlen, 0, lwip_htonl(seqno), local_port,
 8016548:	7dfb      	ldrb	r3, [r7, #23]
 801654a:	b29c      	uxth	r4, r3
 801654c:	68b8      	ldr	r0, [r7, #8]
 801654e:	f7f9 f9e0 	bl	800f912 <lwip_htonl>
 8016552:	4602      	mov	r2, r0
 8016554:	8abb      	ldrh	r3, [r7, #20]
 8016556:	9303      	str	r3, [sp, #12]
 8016558:	2314      	movs	r3, #20
 801655a:	9302      	str	r3, [sp, #8]
 801655c:	8e3b      	ldrh	r3, [r7, #48]	; 0x30
 801655e:	9301      	str	r3, [sp, #4]
 8016560:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 8016562:	9300      	str	r3, [sp, #0]
 8016564:	4613      	mov	r3, r2
 8016566:	2200      	movs	r2, #0
 8016568:	4621      	mov	r1, r4
 801656a:	6878      	ldr	r0, [r7, #4]
 801656c:	f7ff fe94 	bl	8016298 <tcp_output_alloc_header_common>
 8016570:	6138      	str	r0, [r7, #16]
    remote_port, TCP_RST | TCP_ACK, wnd);
  if (p == NULL) {
 8016572:	693b      	ldr	r3, [r7, #16]
 8016574:	2b00      	cmp	r3, #0
 8016576:	d00c      	beq.n	8016592 <tcp_rst+0x8a>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_rst: could not allocate memory for pbuf\n"));
    return;
  }
  tcp_output_fill_options(pcb, p, 0, optlen);
 8016578:	7dfb      	ldrb	r3, [r7, #23]
 801657a:	2200      	movs	r2, #0
 801657c:	6939      	ldr	r1, [r7, #16]
 801657e:	68f8      	ldr	r0, [r7, #12]
 8016580:	f7ff ff3a 	bl	80163f8 <tcp_output_fill_options>

  MIB2_STATS_INC(mib2.tcpoutrsts);

  tcp_output_control_segment(pcb, p, local_ip, remote_ip);
 8016584:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8016586:	683a      	ldr	r2, [r7, #0]
 8016588:	6939      	ldr	r1, [r7, #16]
 801658a:	68f8      	ldr	r0, [r7, #12]
 801658c:	f7ff ff72 	bl	8016474 <tcp_output_control_segment>
 8016590:	e000      	b.n	8016594 <tcp_rst+0x8c>
    return;
 8016592:	bf00      	nop
  LWIP_DEBUGF(TCP_RST_DEBUG, ("tcp_rst: seqno %"U32_F" ackno %"U32_F".\n", seqno, ackno));
}
 8016594:	371c      	adds	r7, #28
 8016596:	46bd      	mov	sp, r7
 8016598:	bd90      	pop	{r4, r7, pc}
 801659a:	bf00      	nop
 801659c:	0801e06c 	.word	0x0801e06c
 80165a0:	0801e7f0 	.word	0x0801e7f0
 80165a4:	0801e0c0 	.word	0x0801e0c0
 80165a8:	0801e80c 	.word	0x0801e80c

080165ac <tcp_send_empty_ack>:
 *
 * @param pcb Protocol control block for the TCP connection to send the ACK
 */
err_t
tcp_send_empty_ack(struct tcp_pcb *pcb)
{
 80165ac:	b590      	push	{r4, r7, lr}
 80165ae:	b087      	sub	sp, #28
 80165b0:	af00      	add	r7, sp, #0
 80165b2:	6078      	str	r0, [r7, #4]
  err_t err;
  struct pbuf *p;
  u8_t optlen, optflags = 0;
 80165b4:	2300      	movs	r3, #0
 80165b6:	75fb      	strb	r3, [r7, #23]
  u8_t num_sacks = 0;
 80165b8:	2300      	movs	r3, #0
 80165ba:	75bb      	strb	r3, [r7, #22]

  LWIP_ASSERT("tcp_send_empty_ack: invalid pcb", pcb != NULL);
 80165bc:	687b      	ldr	r3, [r7, #4]
 80165be:	2b00      	cmp	r3, #0
 80165c0:	d106      	bne.n	80165d0 <tcp_send_empty_ack+0x24>
 80165c2:	4b28      	ldr	r3, [pc, #160]	; (8016664 <tcp_send_empty_ack+0xb8>)
 80165c4:	f240 72ea 	movw	r2, #2026	; 0x7ea
 80165c8:	4927      	ldr	r1, [pc, #156]	; (8016668 <tcp_send_empty_ack+0xbc>)
 80165ca:	4828      	ldr	r0, [pc, #160]	; (801666c <tcp_send_empty_ack+0xc0>)
 80165cc:	f003 fc48 	bl	8019e60 <iprintf>
#if LWIP_TCP_TIMESTAMPS
  if (pcb->flags & TF_TIMESTAMP) {
    optflags = TF_SEG_OPTS_TS;
  }
#endif
  optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(optflags, pcb);
 80165d0:	7dfb      	ldrb	r3, [r7, #23]
 80165d2:	009b      	lsls	r3, r3, #2
 80165d4:	b2db      	uxtb	r3, r3
 80165d6:	f003 0304 	and.w	r3, r3, #4
 80165da:	757b      	strb	r3, [r7, #21]
  if ((num_sacks = tcp_get_num_sacks(pcb, optlen)) > 0) {
    optlen += 4 + num_sacks * 8; /* 4 bytes for header (including 2*NOP), plus 8B for each SACK */
  }
#endif

  p = tcp_output_alloc_header(pcb, optlen, 0, lwip_htonl(pcb->snd_nxt));
 80165dc:	7d7b      	ldrb	r3, [r7, #21]
 80165de:	b29c      	uxth	r4, r3
 80165e0:	687b      	ldr	r3, [r7, #4]
 80165e2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80165e4:	4618      	mov	r0, r3
 80165e6:	f7f9 f994 	bl	800f912 <lwip_htonl>
 80165ea:	4603      	mov	r3, r0
 80165ec:	2200      	movs	r2, #0
 80165ee:	4621      	mov	r1, r4
 80165f0:	6878      	ldr	r0, [r7, #4]
 80165f2:	f7ff fec3 	bl	801637c <tcp_output_alloc_header>
 80165f6:	6138      	str	r0, [r7, #16]
  if (p == NULL) {
 80165f8:	693b      	ldr	r3, [r7, #16]
 80165fa:	2b00      	cmp	r3, #0
 80165fc:	d109      	bne.n	8016612 <tcp_send_empty_ack+0x66>
    /* let tcp_fasttmr retry sending this ACK */
    tcp_set_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 80165fe:	687b      	ldr	r3, [r7, #4]
 8016600:	8b5b      	ldrh	r3, [r3, #26]
 8016602:	f043 0303 	orr.w	r3, r3, #3
 8016606:	b29a      	uxth	r2, r3
 8016608:	687b      	ldr	r3, [r7, #4]
 801660a:	835a      	strh	r2, [r3, #26]
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG, ("tcp_output: (ACK) could not allocate pbuf\n"));
    return ERR_BUF;
 801660c:	f06f 0301 	mvn.w	r3, #1
 8016610:	e023      	b.n	801665a <tcp_send_empty_ack+0xae>
  }
  tcp_output_fill_options(pcb, p, optflags, num_sacks);
 8016612:	7dbb      	ldrb	r3, [r7, #22]
 8016614:	7dfa      	ldrb	r2, [r7, #23]
 8016616:	6939      	ldr	r1, [r7, #16]
 8016618:	6878      	ldr	r0, [r7, #4]
 801661a:	f7ff feed 	bl	80163f8 <tcp_output_fill_options>
  pcb->ts_lastacksent = pcb->rcv_nxt;
#endif

  LWIP_DEBUGF(TCP_OUTPUT_DEBUG,
              ("tcp_output: sending ACK for %"U32_F"\n", pcb->rcv_nxt));
  err = tcp_output_control_segment(pcb, p, &pcb->local_ip, &pcb->remote_ip);
 801661e:	687a      	ldr	r2, [r7, #4]
 8016620:	687b      	ldr	r3, [r7, #4]
 8016622:	3304      	adds	r3, #4
 8016624:	6939      	ldr	r1, [r7, #16]
 8016626:	6878      	ldr	r0, [r7, #4]
 8016628:	f7ff ff24 	bl	8016474 <tcp_output_control_segment>
 801662c:	4603      	mov	r3, r0
 801662e:	73fb      	strb	r3, [r7, #15]
  if (err != ERR_OK) {
 8016630:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8016634:	2b00      	cmp	r3, #0
 8016636:	d007      	beq.n	8016648 <tcp_send_empty_ack+0x9c>
    /* let tcp_fasttmr retry sending this ACK */
    tcp_set_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 8016638:	687b      	ldr	r3, [r7, #4]
 801663a:	8b5b      	ldrh	r3, [r3, #26]
 801663c:	f043 0303 	orr.w	r3, r3, #3
 8016640:	b29a      	uxth	r2, r3
 8016642:	687b      	ldr	r3, [r7, #4]
 8016644:	835a      	strh	r2, [r3, #26]
 8016646:	e006      	b.n	8016656 <tcp_send_empty_ack+0xaa>
  } else {
    /* remove ACK flags from the PCB, as we sent an empty ACK now */
    tcp_clear_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 8016648:	687b      	ldr	r3, [r7, #4]
 801664a:	8b5b      	ldrh	r3, [r3, #26]
 801664c:	f023 0303 	bic.w	r3, r3, #3
 8016650:	b29a      	uxth	r2, r3
 8016652:	687b      	ldr	r3, [r7, #4]
 8016654:	835a      	strh	r2, [r3, #26]
  }

  return err;
 8016656:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 801665a:	4618      	mov	r0, r3
 801665c:	371c      	adds	r7, #28
 801665e:	46bd      	mov	sp, r7
 8016660:	bd90      	pop	{r4, r7, pc}
 8016662:	bf00      	nop
 8016664:	0801e06c 	.word	0x0801e06c
 8016668:	0801e828 	.word	0x0801e828
 801666c:	0801e0c0 	.word	0x0801e0c0

08016670 <tcp_keepalive>:
 *
 * @param pcb the tcp_pcb for which to send a keepalive packet
 */
err_t
tcp_keepalive(struct tcp_pcb *pcb)
{
 8016670:	b590      	push	{r4, r7, lr}
 8016672:	b087      	sub	sp, #28
 8016674:	af00      	add	r7, sp, #0
 8016676:	6078      	str	r0, [r7, #4]
  err_t err;
  struct pbuf *p;
  u8_t optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(0, pcb);
 8016678:	2300      	movs	r3, #0
 801667a:	75fb      	strb	r3, [r7, #23]

  LWIP_ASSERT("tcp_keepalive: invalid pcb", pcb != NULL);
 801667c:	687b      	ldr	r3, [r7, #4]
 801667e:	2b00      	cmp	r3, #0
 8016680:	d106      	bne.n	8016690 <tcp_keepalive+0x20>
 8016682:	4b18      	ldr	r3, [pc, #96]	; (80166e4 <tcp_keepalive+0x74>)
 8016684:	f640 0224 	movw	r2, #2084	; 0x824
 8016688:	4917      	ldr	r1, [pc, #92]	; (80166e8 <tcp_keepalive+0x78>)
 801668a:	4818      	ldr	r0, [pc, #96]	; (80166ec <tcp_keepalive+0x7c>)
 801668c:	f003 fbe8 	bl	8019e60 <iprintf>
  LWIP_DEBUGF(TCP_DEBUG, ("\n"));

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_keepalive: tcp_ticks %"U32_F"   pcb->tmr %"U32_F" pcb->keep_cnt_sent %"U16_F"\n",
                          tcp_ticks, pcb->tmr, (u16_t)pcb->keep_cnt_sent));

  p = tcp_output_alloc_header(pcb, optlen, 0, lwip_htonl(pcb->snd_nxt - 1));
 8016690:	7dfb      	ldrb	r3, [r7, #23]
 8016692:	b29c      	uxth	r4, r3
 8016694:	687b      	ldr	r3, [r7, #4]
 8016696:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8016698:	3b01      	subs	r3, #1
 801669a:	4618      	mov	r0, r3
 801669c:	f7f9 f939 	bl	800f912 <lwip_htonl>
 80166a0:	4603      	mov	r3, r0
 80166a2:	2200      	movs	r2, #0
 80166a4:	4621      	mov	r1, r4
 80166a6:	6878      	ldr	r0, [r7, #4]
 80166a8:	f7ff fe68 	bl	801637c <tcp_output_alloc_header>
 80166ac:	6138      	str	r0, [r7, #16]
  if (p == NULL) {
 80166ae:	693b      	ldr	r3, [r7, #16]
 80166b0:	2b00      	cmp	r3, #0
 80166b2:	d102      	bne.n	80166ba <tcp_keepalive+0x4a>
    LWIP_DEBUGF(TCP_DEBUG,
                ("tcp_keepalive: could not allocate memory for pbuf\n"));
    return ERR_MEM;
 80166b4:	f04f 33ff 	mov.w	r3, #4294967295
 80166b8:	e010      	b.n	80166dc <tcp_keepalive+0x6c>
  }
  tcp_output_fill_options(pcb, p, 0, optlen);
 80166ba:	7dfb      	ldrb	r3, [r7, #23]
 80166bc:	2200      	movs	r2, #0
 80166be:	6939      	ldr	r1, [r7, #16]
 80166c0:	6878      	ldr	r0, [r7, #4]
 80166c2:	f7ff fe99 	bl	80163f8 <tcp_output_fill_options>
  err = tcp_output_control_segment(pcb, p, &pcb->local_ip, &pcb->remote_ip);
 80166c6:	687a      	ldr	r2, [r7, #4]
 80166c8:	687b      	ldr	r3, [r7, #4]
 80166ca:	3304      	adds	r3, #4
 80166cc:	6939      	ldr	r1, [r7, #16]
 80166ce:	6878      	ldr	r0, [r7, #4]
 80166d0:	f7ff fed0 	bl	8016474 <tcp_output_control_segment>
 80166d4:	4603      	mov	r3, r0
 80166d6:	73fb      	strb	r3, [r7, #15]

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_keepalive: seqno %"U32_F" ackno %"U32_F" err %d.\n",
                          pcb->snd_nxt - 1, pcb->rcv_nxt, (int)err));
  return err;
 80166d8:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 80166dc:	4618      	mov	r0, r3
 80166de:	371c      	adds	r7, #28
 80166e0:	46bd      	mov	sp, r7
 80166e2:	bd90      	pop	{r4, r7, pc}
 80166e4:	0801e06c 	.word	0x0801e06c
 80166e8:	0801e848 	.word	0x0801e848
 80166ec:	0801e0c0 	.word	0x0801e0c0

080166f0 <tcp_zero_window_probe>:
 *
 * @param pcb the tcp_pcb for which to send a zero-window probe packet
 */
err_t
tcp_zero_window_probe(struct tcp_pcb *pcb)
{
 80166f0:	b590      	push	{r4, r7, lr}
 80166f2:	b08b      	sub	sp, #44	; 0x2c
 80166f4:	af00      	add	r7, sp, #0
 80166f6:	6078      	str	r0, [r7, #4]
  struct tcp_hdr *tcphdr;
  struct tcp_seg *seg;
  u16_t len;
  u8_t is_fin;
  u32_t snd_nxt;
  u8_t optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(0, pcb);
 80166f8:	2300      	movs	r3, #0
 80166fa:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

  LWIP_ASSERT("tcp_zero_window_probe: invalid pcb", pcb != NULL);
 80166fe:	687b      	ldr	r3, [r7, #4]
 8016700:	2b00      	cmp	r3, #0
 8016702:	d106      	bne.n	8016712 <tcp_zero_window_probe+0x22>
 8016704:	4b4c      	ldr	r3, [pc, #304]	; (8016838 <tcp_zero_window_probe+0x148>)
 8016706:	f640 024f 	movw	r2, #2127	; 0x84f
 801670a:	494c      	ldr	r1, [pc, #304]	; (801683c <tcp_zero_window_probe+0x14c>)
 801670c:	484c      	ldr	r0, [pc, #304]	; (8016840 <tcp_zero_window_probe+0x150>)
 801670e:	f003 fba7 	bl	8019e60 <iprintf>
              ("tcp_zero_window_probe: tcp_ticks %"U32_F
               "   pcb->tmr %"U32_F" pcb->keep_cnt_sent %"U16_F"\n",
               tcp_ticks, pcb->tmr, (u16_t)pcb->keep_cnt_sent));

  /* Only consider unsent, persist timer should be off when there is data in-flight */
  seg = pcb->unsent;
 8016712:	687b      	ldr	r3, [r7, #4]
 8016714:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8016716:	623b      	str	r3, [r7, #32]
  if (seg == NULL) {
 8016718:	6a3b      	ldr	r3, [r7, #32]
 801671a:	2b00      	cmp	r3, #0
 801671c:	d101      	bne.n	8016722 <tcp_zero_window_probe+0x32>
    /* Not expected, persist timer should be off when the send buffer is empty */
    return ERR_OK;
 801671e:	2300      	movs	r3, #0
 8016720:	e086      	b.n	8016830 <tcp_zero_window_probe+0x140>

  /* increment probe count. NOTE: we record probe even if it fails
     to actually transmit due to an error. This ensures memory exhaustion/
     routing problem doesn't leave a zero-window pcb as an indefinite zombie.
     RTO mechanism has similar behavior, see pcb->nrtx */
  if (pcb->persist_probe < 0xFF) {
 8016722:	687b      	ldr	r3, [r7, #4]
 8016724:	f893 309a 	ldrb.w	r3, [r3, #154]	; 0x9a
 8016728:	2bff      	cmp	r3, #255	; 0xff
 801672a:	d007      	beq.n	801673c <tcp_zero_window_probe+0x4c>
    ++pcb->persist_probe;
 801672c:	687b      	ldr	r3, [r7, #4]
 801672e:	f893 309a 	ldrb.w	r3, [r3, #154]	; 0x9a
 8016732:	3301      	adds	r3, #1
 8016734:	b2da      	uxtb	r2, r3
 8016736:	687b      	ldr	r3, [r7, #4]
 8016738:	f883 209a 	strb.w	r2, [r3, #154]	; 0x9a
  }

  is_fin = ((TCPH_FLAGS(seg->tcphdr) & TCP_FIN) != 0) && (seg->len == 0);
 801673c:	6a3b      	ldr	r3, [r7, #32]
 801673e:	68db      	ldr	r3, [r3, #12]
 8016740:	899b      	ldrh	r3, [r3, #12]
 8016742:	b29b      	uxth	r3, r3
 8016744:	4618      	mov	r0, r3
 8016746:	f7f9 f8cf 	bl	800f8e8 <lwip_htons>
 801674a:	4603      	mov	r3, r0
 801674c:	b2db      	uxtb	r3, r3
 801674e:	f003 0301 	and.w	r3, r3, #1
 8016752:	2b00      	cmp	r3, #0
 8016754:	d005      	beq.n	8016762 <tcp_zero_window_probe+0x72>
 8016756:	6a3b      	ldr	r3, [r7, #32]
 8016758:	891b      	ldrh	r3, [r3, #8]
 801675a:	2b00      	cmp	r3, #0
 801675c:	d101      	bne.n	8016762 <tcp_zero_window_probe+0x72>
 801675e:	2301      	movs	r3, #1
 8016760:	e000      	b.n	8016764 <tcp_zero_window_probe+0x74>
 8016762:	2300      	movs	r3, #0
 8016764:	77fb      	strb	r3, [r7, #31]
  /* we want to send one seqno: either FIN or data (no options) */
  len = is_fin ? 0 : 1;
 8016766:	7ffb      	ldrb	r3, [r7, #31]
 8016768:	2b00      	cmp	r3, #0
 801676a:	bf0c      	ite	eq
 801676c:	2301      	moveq	r3, #1
 801676e:	2300      	movne	r3, #0
 8016770:	b2db      	uxtb	r3, r3
 8016772:	83bb      	strh	r3, [r7, #28]

  p = tcp_output_alloc_header(pcb, optlen, len, seg->tcphdr->seqno);
 8016774:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8016778:	b299      	uxth	r1, r3
 801677a:	6a3b      	ldr	r3, [r7, #32]
 801677c:	68db      	ldr	r3, [r3, #12]
 801677e:	685b      	ldr	r3, [r3, #4]
 8016780:	8bba      	ldrh	r2, [r7, #28]
 8016782:	6878      	ldr	r0, [r7, #4]
 8016784:	f7ff fdfa 	bl	801637c <tcp_output_alloc_header>
 8016788:	61b8      	str	r0, [r7, #24]
  if (p == NULL) {
 801678a:	69bb      	ldr	r3, [r7, #24]
 801678c:	2b00      	cmp	r3, #0
 801678e:	d102      	bne.n	8016796 <tcp_zero_window_probe+0xa6>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_zero_window_probe: no memory for pbuf\n"));
    return ERR_MEM;
 8016790:	f04f 33ff 	mov.w	r3, #4294967295
 8016794:	e04c      	b.n	8016830 <tcp_zero_window_probe+0x140>
  }
  tcphdr = (struct tcp_hdr *)p->payload;
 8016796:	69bb      	ldr	r3, [r7, #24]
 8016798:	685b      	ldr	r3, [r3, #4]
 801679a:	617b      	str	r3, [r7, #20]

  if (is_fin) {
 801679c:	7ffb      	ldrb	r3, [r7, #31]
 801679e:	2b00      	cmp	r3, #0
 80167a0:	d011      	beq.n	80167c6 <tcp_zero_window_probe+0xd6>
    /* FIN segment, no data */
    TCPH_FLAGS_SET(tcphdr, TCP_ACK | TCP_FIN);
 80167a2:	697b      	ldr	r3, [r7, #20]
 80167a4:	899b      	ldrh	r3, [r3, #12]
 80167a6:	b29b      	uxth	r3, r3
 80167a8:	b21b      	sxth	r3, r3
 80167aa:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 80167ae:	b21c      	sxth	r4, r3
 80167b0:	2011      	movs	r0, #17
 80167b2:	f7f9 f899 	bl	800f8e8 <lwip_htons>
 80167b6:	4603      	mov	r3, r0
 80167b8:	b21b      	sxth	r3, r3
 80167ba:	4323      	orrs	r3, r4
 80167bc:	b21b      	sxth	r3, r3
 80167be:	b29a      	uxth	r2, r3
 80167c0:	697b      	ldr	r3, [r7, #20]
 80167c2:	819a      	strh	r2, [r3, #12]
 80167c4:	e010      	b.n	80167e8 <tcp_zero_window_probe+0xf8>
  } else {
    /* Data segment, copy in one byte from the head of the unacked queue */
    char *d = ((char *)p->payload + TCP_HLEN);
 80167c6:	69bb      	ldr	r3, [r7, #24]
 80167c8:	685b      	ldr	r3, [r3, #4]
 80167ca:	3314      	adds	r3, #20
 80167cc:	613b      	str	r3, [r7, #16]
    /* Depending on whether the segment has already been sent (unacked) or not
       (unsent), seg->p->payload points to the IP header or TCP header.
       Ensure we copy the first TCP data byte: */
    pbuf_copy_partial(seg->p, d, 1, seg->p->tot_len - seg->len);
 80167ce:	6a3b      	ldr	r3, [r7, #32]
 80167d0:	6858      	ldr	r0, [r3, #4]
 80167d2:	6a3b      	ldr	r3, [r7, #32]
 80167d4:	685b      	ldr	r3, [r3, #4]
 80167d6:	891a      	ldrh	r2, [r3, #8]
 80167d8:	6a3b      	ldr	r3, [r7, #32]
 80167da:	891b      	ldrh	r3, [r3, #8]
 80167dc:	1ad3      	subs	r3, r2, r3
 80167de:	b29b      	uxth	r3, r3
 80167e0:	2201      	movs	r2, #1
 80167e2:	6939      	ldr	r1, [r7, #16]
 80167e4:	f7fa fe4e 	bl	8011484 <pbuf_copy_partial>
  }

  /* The byte may be acknowledged without the window being opened. */
  snd_nxt = lwip_ntohl(seg->tcphdr->seqno) + 1;
 80167e8:	6a3b      	ldr	r3, [r7, #32]
 80167ea:	68db      	ldr	r3, [r3, #12]
 80167ec:	685b      	ldr	r3, [r3, #4]
 80167ee:	4618      	mov	r0, r3
 80167f0:	f7f9 f88f 	bl	800f912 <lwip_htonl>
 80167f4:	4603      	mov	r3, r0
 80167f6:	3301      	adds	r3, #1
 80167f8:	60fb      	str	r3, [r7, #12]
  if (TCP_SEQ_LT(pcb->snd_nxt, snd_nxt)) {
 80167fa:	687b      	ldr	r3, [r7, #4]
 80167fc:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80167fe:	68fb      	ldr	r3, [r7, #12]
 8016800:	1ad3      	subs	r3, r2, r3
 8016802:	2b00      	cmp	r3, #0
 8016804:	da02      	bge.n	801680c <tcp_zero_window_probe+0x11c>
    pcb->snd_nxt = snd_nxt;
 8016806:	687b      	ldr	r3, [r7, #4]
 8016808:	68fa      	ldr	r2, [r7, #12]
 801680a:	651a      	str	r2, [r3, #80]	; 0x50
  }
  tcp_output_fill_options(pcb, p, 0, optlen);
 801680c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8016810:	2200      	movs	r2, #0
 8016812:	69b9      	ldr	r1, [r7, #24]
 8016814:	6878      	ldr	r0, [r7, #4]
 8016816:	f7ff fdef 	bl	80163f8 <tcp_output_fill_options>

  err = tcp_output_control_segment(pcb, p, &pcb->local_ip, &pcb->remote_ip);
 801681a:	687a      	ldr	r2, [r7, #4]
 801681c:	687b      	ldr	r3, [r7, #4]
 801681e:	3304      	adds	r3, #4
 8016820:	69b9      	ldr	r1, [r7, #24]
 8016822:	6878      	ldr	r0, [r7, #4]
 8016824:	f7ff fe26 	bl	8016474 <tcp_output_control_segment>
 8016828:	4603      	mov	r3, r0
 801682a:	72fb      	strb	r3, [r7, #11]

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_zero_window_probe: seqno %"U32_F
                          " ackno %"U32_F" err %d.\n",
                          pcb->snd_nxt - 1, pcb->rcv_nxt, (int)err));
  return err;
 801682c:	f997 300b 	ldrsb.w	r3, [r7, #11]
}
 8016830:	4618      	mov	r0, r3
 8016832:	372c      	adds	r7, #44	; 0x2c
 8016834:	46bd      	mov	sp, r7
 8016836:	bd90      	pop	{r4, r7, pc}
 8016838:	0801e06c 	.word	0x0801e06c
 801683c:	0801e864 	.word	0x0801e864
 8016840:	0801e0c0 	.word	0x0801e0c0

08016844 <tcpip_tcp_timer>:
 *
 * @param arg unused argument
 */
static void
tcpip_tcp_timer(void *arg)
{
 8016844:	b580      	push	{r7, lr}
 8016846:	b082      	sub	sp, #8
 8016848:	af00      	add	r7, sp, #0
 801684a:	6078      	str	r0, [r7, #4]
  LWIP_UNUSED_ARG(arg);

  /* call TCP timer handler */
  tcp_tmr();
 801684c:	f7fa ff08 	bl	8011660 <tcp_tmr>
  /* timer still needed? */
  if (tcp_active_pcbs || tcp_tw_pcbs) {
 8016850:	4b0a      	ldr	r3, [pc, #40]	; (801687c <tcpip_tcp_timer+0x38>)
 8016852:	681b      	ldr	r3, [r3, #0]
 8016854:	2b00      	cmp	r3, #0
 8016856:	d103      	bne.n	8016860 <tcpip_tcp_timer+0x1c>
 8016858:	4b09      	ldr	r3, [pc, #36]	; (8016880 <tcpip_tcp_timer+0x3c>)
 801685a:	681b      	ldr	r3, [r3, #0]
 801685c:	2b00      	cmp	r3, #0
 801685e:	d005      	beq.n	801686c <tcpip_tcp_timer+0x28>
    /* restart timer */
    sys_timeout(TCP_TMR_INTERVAL, tcpip_tcp_timer, NULL);
 8016860:	2200      	movs	r2, #0
 8016862:	4908      	ldr	r1, [pc, #32]	; (8016884 <tcpip_tcp_timer+0x40>)
 8016864:	20fa      	movs	r0, #250	; 0xfa
 8016866:	f000 f8f3 	bl	8016a50 <sys_timeout>
 801686a:	e003      	b.n	8016874 <tcpip_tcp_timer+0x30>
  } else {
    /* disable timer */
    tcpip_tcp_timer_active = 0;
 801686c:	4b06      	ldr	r3, [pc, #24]	; (8016888 <tcpip_tcp_timer+0x44>)
 801686e:	2200      	movs	r2, #0
 8016870:	601a      	str	r2, [r3, #0]
  }
}
 8016872:	bf00      	nop
 8016874:	bf00      	nop
 8016876:	3708      	adds	r7, #8
 8016878:	46bd      	mov	sp, r7
 801687a:	bd80      	pop	{r7, pc}
 801687c:	200070e0 	.word	0x200070e0
 8016880:	200070e4 	.word	0x200070e4
 8016884:	08016845 	.word	0x08016845
 8016888:	2000712c 	.word	0x2000712c

0801688c <tcp_timer_needed>:
 * the reason is to have the TCP timer only running when
 * there are active (or time-wait) PCBs.
 */
void
tcp_timer_needed(void)
{
 801688c:	b580      	push	{r7, lr}
 801688e:	af00      	add	r7, sp, #0
  LWIP_ASSERT_CORE_LOCKED();

  /* timer is off but needed again? */
  if (!tcpip_tcp_timer_active && (tcp_active_pcbs || tcp_tw_pcbs)) {
 8016890:	4b0a      	ldr	r3, [pc, #40]	; (80168bc <tcp_timer_needed+0x30>)
 8016892:	681b      	ldr	r3, [r3, #0]
 8016894:	2b00      	cmp	r3, #0
 8016896:	d10f      	bne.n	80168b8 <tcp_timer_needed+0x2c>
 8016898:	4b09      	ldr	r3, [pc, #36]	; (80168c0 <tcp_timer_needed+0x34>)
 801689a:	681b      	ldr	r3, [r3, #0]
 801689c:	2b00      	cmp	r3, #0
 801689e:	d103      	bne.n	80168a8 <tcp_timer_needed+0x1c>
 80168a0:	4b08      	ldr	r3, [pc, #32]	; (80168c4 <tcp_timer_needed+0x38>)
 80168a2:	681b      	ldr	r3, [r3, #0]
 80168a4:	2b00      	cmp	r3, #0
 80168a6:	d007      	beq.n	80168b8 <tcp_timer_needed+0x2c>
    /* enable and start timer */
    tcpip_tcp_timer_active = 1;
 80168a8:	4b04      	ldr	r3, [pc, #16]	; (80168bc <tcp_timer_needed+0x30>)
 80168aa:	2201      	movs	r2, #1
 80168ac:	601a      	str	r2, [r3, #0]
    sys_timeout(TCP_TMR_INTERVAL, tcpip_tcp_timer, NULL);
 80168ae:	2200      	movs	r2, #0
 80168b0:	4905      	ldr	r1, [pc, #20]	; (80168c8 <tcp_timer_needed+0x3c>)
 80168b2:	20fa      	movs	r0, #250	; 0xfa
 80168b4:	f000 f8cc 	bl	8016a50 <sys_timeout>
  }
}
 80168b8:	bf00      	nop
 80168ba:	bd80      	pop	{r7, pc}
 80168bc:	2000712c 	.word	0x2000712c
 80168c0:	200070e0 	.word	0x200070e0
 80168c4:	200070e4 	.word	0x200070e4
 80168c8:	08016845 	.word	0x08016845

080168cc <sys_timeout_abs>:
#if LWIP_DEBUG_TIMERNAMES
sys_timeout_abs(u32_t abs_time, sys_timeout_handler handler, void *arg, const char *handler_name)
#else /* LWIP_DEBUG_TIMERNAMES */
sys_timeout_abs(u32_t abs_time, sys_timeout_handler handler, void *arg)
#endif
{
 80168cc:	b580      	push	{r7, lr}
 80168ce:	b086      	sub	sp, #24
 80168d0:	af00      	add	r7, sp, #0
 80168d2:	60f8      	str	r0, [r7, #12]
 80168d4:	60b9      	str	r1, [r7, #8]
 80168d6:	607a      	str	r2, [r7, #4]
  struct sys_timeo *timeout, *t;

  timeout = (struct sys_timeo *)memp_malloc(MEMP_SYS_TIMEOUT);
 80168d8:	2006      	movs	r0, #6
 80168da:	f7f9 fd23 	bl	8010324 <memp_malloc>
 80168de:	6138      	str	r0, [r7, #16]
  if (timeout == NULL) {
 80168e0:	693b      	ldr	r3, [r7, #16]
 80168e2:	2b00      	cmp	r3, #0
 80168e4:	d109      	bne.n	80168fa <sys_timeout_abs+0x2e>
    LWIP_ASSERT("sys_timeout: timeout != NULL, pool MEMP_SYS_TIMEOUT is empty", timeout != NULL);
 80168e6:	693b      	ldr	r3, [r7, #16]
 80168e8:	2b00      	cmp	r3, #0
 80168ea:	d151      	bne.n	8016990 <sys_timeout_abs+0xc4>
 80168ec:	4b2a      	ldr	r3, [pc, #168]	; (8016998 <sys_timeout_abs+0xcc>)
 80168ee:	22be      	movs	r2, #190	; 0xbe
 80168f0:	492a      	ldr	r1, [pc, #168]	; (801699c <sys_timeout_abs+0xd0>)
 80168f2:	482b      	ldr	r0, [pc, #172]	; (80169a0 <sys_timeout_abs+0xd4>)
 80168f4:	f003 fab4 	bl	8019e60 <iprintf>
    return;
 80168f8:	e04a      	b.n	8016990 <sys_timeout_abs+0xc4>
  }

  timeout->next = NULL;
 80168fa:	693b      	ldr	r3, [r7, #16]
 80168fc:	2200      	movs	r2, #0
 80168fe:	601a      	str	r2, [r3, #0]
  timeout->h = handler;
 8016900:	693b      	ldr	r3, [r7, #16]
 8016902:	68ba      	ldr	r2, [r7, #8]
 8016904:	609a      	str	r2, [r3, #8]
  timeout->arg = arg;
 8016906:	693b      	ldr	r3, [r7, #16]
 8016908:	687a      	ldr	r2, [r7, #4]
 801690a:	60da      	str	r2, [r3, #12]
  timeout->time = abs_time;
 801690c:	693b      	ldr	r3, [r7, #16]
 801690e:	68fa      	ldr	r2, [r7, #12]
 8016910:	605a      	str	r2, [r3, #4]
  timeout->handler_name = handler_name;
  LWIP_DEBUGF(TIMERS_DEBUG, ("sys_timeout: %p abs_time=%"U32_F" handler=%s arg=%p\n",
                             (void *)timeout, abs_time, handler_name, (void *)arg));
#endif /* LWIP_DEBUG_TIMERNAMES */

  if (next_timeout == NULL) {
 8016912:	4b24      	ldr	r3, [pc, #144]	; (80169a4 <sys_timeout_abs+0xd8>)
 8016914:	681b      	ldr	r3, [r3, #0]
 8016916:	2b00      	cmp	r3, #0
 8016918:	d103      	bne.n	8016922 <sys_timeout_abs+0x56>
    next_timeout = timeout;
 801691a:	4a22      	ldr	r2, [pc, #136]	; (80169a4 <sys_timeout_abs+0xd8>)
 801691c:	693b      	ldr	r3, [r7, #16]
 801691e:	6013      	str	r3, [r2, #0]
    return;
 8016920:	e037      	b.n	8016992 <sys_timeout_abs+0xc6>
  }
  if (TIME_LESS_THAN(timeout->time, next_timeout->time)) {
 8016922:	693b      	ldr	r3, [r7, #16]
 8016924:	685a      	ldr	r2, [r3, #4]
 8016926:	4b1f      	ldr	r3, [pc, #124]	; (80169a4 <sys_timeout_abs+0xd8>)
 8016928:	681b      	ldr	r3, [r3, #0]
 801692a:	685b      	ldr	r3, [r3, #4]
 801692c:	1ad3      	subs	r3, r2, r3
 801692e:	0fdb      	lsrs	r3, r3, #31
 8016930:	f003 0301 	and.w	r3, r3, #1
 8016934:	b2db      	uxtb	r3, r3
 8016936:	2b00      	cmp	r3, #0
 8016938:	d007      	beq.n	801694a <sys_timeout_abs+0x7e>
    timeout->next = next_timeout;
 801693a:	4b1a      	ldr	r3, [pc, #104]	; (80169a4 <sys_timeout_abs+0xd8>)
 801693c:	681a      	ldr	r2, [r3, #0]
 801693e:	693b      	ldr	r3, [r7, #16]
 8016940:	601a      	str	r2, [r3, #0]
    next_timeout = timeout;
 8016942:	4a18      	ldr	r2, [pc, #96]	; (80169a4 <sys_timeout_abs+0xd8>)
 8016944:	693b      	ldr	r3, [r7, #16]
 8016946:	6013      	str	r3, [r2, #0]
 8016948:	e023      	b.n	8016992 <sys_timeout_abs+0xc6>
  } else {
    for (t = next_timeout; t != NULL; t = t->next) {
 801694a:	4b16      	ldr	r3, [pc, #88]	; (80169a4 <sys_timeout_abs+0xd8>)
 801694c:	681b      	ldr	r3, [r3, #0]
 801694e:	617b      	str	r3, [r7, #20]
 8016950:	e01a      	b.n	8016988 <sys_timeout_abs+0xbc>
      if ((t->next == NULL) || TIME_LESS_THAN(timeout->time, t->next->time)) {
 8016952:	697b      	ldr	r3, [r7, #20]
 8016954:	681b      	ldr	r3, [r3, #0]
 8016956:	2b00      	cmp	r3, #0
 8016958:	d00b      	beq.n	8016972 <sys_timeout_abs+0xa6>
 801695a:	693b      	ldr	r3, [r7, #16]
 801695c:	685a      	ldr	r2, [r3, #4]
 801695e:	697b      	ldr	r3, [r7, #20]
 8016960:	681b      	ldr	r3, [r3, #0]
 8016962:	685b      	ldr	r3, [r3, #4]
 8016964:	1ad3      	subs	r3, r2, r3
 8016966:	0fdb      	lsrs	r3, r3, #31
 8016968:	f003 0301 	and.w	r3, r3, #1
 801696c:	b2db      	uxtb	r3, r3
 801696e:	2b00      	cmp	r3, #0
 8016970:	d007      	beq.n	8016982 <sys_timeout_abs+0xb6>
        timeout->next = t->next;
 8016972:	697b      	ldr	r3, [r7, #20]
 8016974:	681a      	ldr	r2, [r3, #0]
 8016976:	693b      	ldr	r3, [r7, #16]
 8016978:	601a      	str	r2, [r3, #0]
        t->next = timeout;
 801697a:	697b      	ldr	r3, [r7, #20]
 801697c:	693a      	ldr	r2, [r7, #16]
 801697e:	601a      	str	r2, [r3, #0]
        break;
 8016980:	e007      	b.n	8016992 <sys_timeout_abs+0xc6>
    for (t = next_timeout; t != NULL; t = t->next) {
 8016982:	697b      	ldr	r3, [r7, #20]
 8016984:	681b      	ldr	r3, [r3, #0]
 8016986:	617b      	str	r3, [r7, #20]
 8016988:	697b      	ldr	r3, [r7, #20]
 801698a:	2b00      	cmp	r3, #0
 801698c:	d1e1      	bne.n	8016952 <sys_timeout_abs+0x86>
 801698e:	e000      	b.n	8016992 <sys_timeout_abs+0xc6>
    return;
 8016990:	bf00      	nop
      }
    }
  }
}
 8016992:	3718      	adds	r7, #24
 8016994:	46bd      	mov	sp, r7
 8016996:	bd80      	pop	{r7, pc}
 8016998:	0801e888 	.word	0x0801e888
 801699c:	0801e8bc 	.word	0x0801e8bc
 80169a0:	0801e8fc 	.word	0x0801e8fc
 80169a4:	20007124 	.word	0x20007124

080169a8 <lwip_cyclic_timer>:
#if !LWIP_TESTMODE
static
#endif
void
lwip_cyclic_timer(void *arg)
{
 80169a8:	b580      	push	{r7, lr}
 80169aa:	b086      	sub	sp, #24
 80169ac:	af00      	add	r7, sp, #0
 80169ae:	6078      	str	r0, [r7, #4]
  u32_t now;
  u32_t next_timeout_time;
  const struct lwip_cyclic_timer *cyclic = (const struct lwip_cyclic_timer *)arg;
 80169b0:	687b      	ldr	r3, [r7, #4]
 80169b2:	617b      	str	r3, [r7, #20]

#if LWIP_DEBUG_TIMERNAMES
  LWIP_DEBUGF(TIMERS_DEBUG, ("tcpip: %s()\n", cyclic->handler_name));
#endif
  cyclic->handler();
 80169b4:	697b      	ldr	r3, [r7, #20]
 80169b6:	685b      	ldr	r3, [r3, #4]
 80169b8:	4798      	blx	r3

  now = sys_now();
 80169ba:	f7f8 fdb5 	bl	800f528 <sys_now>
 80169be:	6138      	str	r0, [r7, #16]
  next_timeout_time = (u32_t)(current_timeout_due_time + cyclic->interval_ms);  /* overflow handled by TIME_LESS_THAN macro */ 
 80169c0:	697b      	ldr	r3, [r7, #20]
 80169c2:	681a      	ldr	r2, [r3, #0]
 80169c4:	4b0f      	ldr	r3, [pc, #60]	; (8016a04 <lwip_cyclic_timer+0x5c>)
 80169c6:	681b      	ldr	r3, [r3, #0]
 80169c8:	4413      	add	r3, r2
 80169ca:	60fb      	str	r3, [r7, #12]
  if (TIME_LESS_THAN(next_timeout_time, now)) {
 80169cc:	68fa      	ldr	r2, [r7, #12]
 80169ce:	693b      	ldr	r3, [r7, #16]
 80169d0:	1ad3      	subs	r3, r2, r3
 80169d2:	0fdb      	lsrs	r3, r3, #31
 80169d4:	f003 0301 	and.w	r3, r3, #1
 80169d8:	b2db      	uxtb	r3, r3
 80169da:	2b00      	cmp	r3, #0
 80169dc:	d009      	beq.n	80169f2 <lwip_cyclic_timer+0x4a>
    /* timer would immediately expire again -> "overload" -> restart without any correction */
#if LWIP_DEBUG_TIMERNAMES
    sys_timeout_abs((u32_t)(now + cyclic->interval_ms), lwip_cyclic_timer, arg, cyclic->handler_name);
#else
    sys_timeout_abs((u32_t)(now + cyclic->interval_ms), lwip_cyclic_timer, arg);
 80169de:	697b      	ldr	r3, [r7, #20]
 80169e0:	681a      	ldr	r2, [r3, #0]
 80169e2:	693b      	ldr	r3, [r7, #16]
 80169e4:	4413      	add	r3, r2
 80169e6:	687a      	ldr	r2, [r7, #4]
 80169e8:	4907      	ldr	r1, [pc, #28]	; (8016a08 <lwip_cyclic_timer+0x60>)
 80169ea:	4618      	mov	r0, r3
 80169ec:	f7ff ff6e 	bl	80168cc <sys_timeout_abs>
    sys_timeout_abs(next_timeout_time, lwip_cyclic_timer, arg, cyclic->handler_name);
#else
    sys_timeout_abs(next_timeout_time, lwip_cyclic_timer, arg);
#endif
  }
}
 80169f0:	e004      	b.n	80169fc <lwip_cyclic_timer+0x54>
    sys_timeout_abs(next_timeout_time, lwip_cyclic_timer, arg);
 80169f2:	687a      	ldr	r2, [r7, #4]
 80169f4:	4904      	ldr	r1, [pc, #16]	; (8016a08 <lwip_cyclic_timer+0x60>)
 80169f6:	68f8      	ldr	r0, [r7, #12]
 80169f8:	f7ff ff68 	bl	80168cc <sys_timeout_abs>
}
 80169fc:	bf00      	nop
 80169fe:	3718      	adds	r7, #24
 8016a00:	46bd      	mov	sp, r7
 8016a02:	bd80      	pop	{r7, pc}
 8016a04:	20007128 	.word	0x20007128
 8016a08:	080169a9 	.word	0x080169a9

08016a0c <sys_timeouts_init>:

/** Initialize this module */
void sys_timeouts_init(void)
{
 8016a0c:	b580      	push	{r7, lr}
 8016a0e:	b082      	sub	sp, #8
 8016a10:	af00      	add	r7, sp, #0
  size_t i;
  /* tcp_tmr() at index 0 is started on demand */
  for (i = (LWIP_TCP ? 1 : 0); i < LWIP_ARRAYSIZE(lwip_cyclic_timers); i++) {
 8016a12:	2301      	movs	r3, #1
 8016a14:	607b      	str	r3, [r7, #4]
 8016a16:	e00e      	b.n	8016a36 <sys_timeouts_init+0x2a>
    /* we have to cast via size_t to get rid of const warning
      (this is OK as cyclic_timer() casts back to const* */
    sys_timeout(lwip_cyclic_timers[i].interval_ms, lwip_cyclic_timer, LWIP_CONST_CAST(void *, &lwip_cyclic_timers[i]));
 8016a18:	4a0b      	ldr	r2, [pc, #44]	; (8016a48 <sys_timeouts_init+0x3c>)
 8016a1a:	687b      	ldr	r3, [r7, #4]
 8016a1c:	f852 0033 	ldr.w	r0, [r2, r3, lsl #3]
 8016a20:	687b      	ldr	r3, [r7, #4]
 8016a22:	00db      	lsls	r3, r3, #3
 8016a24:	4a08      	ldr	r2, [pc, #32]	; (8016a48 <sys_timeouts_init+0x3c>)
 8016a26:	4413      	add	r3, r2
 8016a28:	461a      	mov	r2, r3
 8016a2a:	4908      	ldr	r1, [pc, #32]	; (8016a4c <sys_timeouts_init+0x40>)
 8016a2c:	f000 f810 	bl	8016a50 <sys_timeout>
  for (i = (LWIP_TCP ? 1 : 0); i < LWIP_ARRAYSIZE(lwip_cyclic_timers); i++) {
 8016a30:	687b      	ldr	r3, [r7, #4]
 8016a32:	3301      	adds	r3, #1
 8016a34:	607b      	str	r3, [r7, #4]
 8016a36:	687b      	ldr	r3, [r7, #4]
 8016a38:	2b02      	cmp	r3, #2
 8016a3a:	d9ed      	bls.n	8016a18 <sys_timeouts_init+0xc>
  }
}
 8016a3c:	bf00      	nop
 8016a3e:	bf00      	nop
 8016a40:	3708      	adds	r7, #8
 8016a42:	46bd      	mov	sp, r7
 8016a44:	bd80      	pop	{r7, pc}
 8016a46:	bf00      	nop
 8016a48:	0801f4b4 	.word	0x0801f4b4
 8016a4c:	080169a9 	.word	0x080169a9

08016a50 <sys_timeout>:
sys_timeout_debug(u32_t msecs, sys_timeout_handler handler, void *arg, const char *handler_name)
#else /* LWIP_DEBUG_TIMERNAMES */
void
sys_timeout(u32_t msecs, sys_timeout_handler handler, void *arg)
#endif /* LWIP_DEBUG_TIMERNAMES */
{
 8016a50:	b580      	push	{r7, lr}
 8016a52:	b086      	sub	sp, #24
 8016a54:	af00      	add	r7, sp, #0
 8016a56:	60f8      	str	r0, [r7, #12]
 8016a58:	60b9      	str	r1, [r7, #8]
 8016a5a:	607a      	str	r2, [r7, #4]
  u32_t next_timeout_time;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ASSERT("Timeout time too long, max is LWIP_UINT32_MAX/4 msecs", msecs <= (LWIP_UINT32_MAX / 4));
 8016a5c:	68fb      	ldr	r3, [r7, #12]
 8016a5e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8016a62:	d306      	bcc.n	8016a72 <sys_timeout+0x22>
 8016a64:	4b0a      	ldr	r3, [pc, #40]	; (8016a90 <sys_timeout+0x40>)
 8016a66:	f240 1229 	movw	r2, #297	; 0x129
 8016a6a:	490a      	ldr	r1, [pc, #40]	; (8016a94 <sys_timeout+0x44>)
 8016a6c:	480a      	ldr	r0, [pc, #40]	; (8016a98 <sys_timeout+0x48>)
 8016a6e:	f003 f9f7 	bl	8019e60 <iprintf>

  next_timeout_time = (u32_t)(sys_now() + msecs); /* overflow handled by TIME_LESS_THAN macro */ 
 8016a72:	f7f8 fd59 	bl	800f528 <sys_now>
 8016a76:	4602      	mov	r2, r0
 8016a78:	68fb      	ldr	r3, [r7, #12]
 8016a7a:	4413      	add	r3, r2
 8016a7c:	617b      	str	r3, [r7, #20]

#if LWIP_DEBUG_TIMERNAMES
  sys_timeout_abs(next_timeout_time, handler, arg, handler_name);
#else
  sys_timeout_abs(next_timeout_time, handler, arg);
 8016a7e:	687a      	ldr	r2, [r7, #4]
 8016a80:	68b9      	ldr	r1, [r7, #8]
 8016a82:	6978      	ldr	r0, [r7, #20]
 8016a84:	f7ff ff22 	bl	80168cc <sys_timeout_abs>
#endif
}
 8016a88:	bf00      	nop
 8016a8a:	3718      	adds	r7, #24
 8016a8c:	46bd      	mov	sp, r7
 8016a8e:	bd80      	pop	{r7, pc}
 8016a90:	0801e888 	.word	0x0801e888
 8016a94:	0801e924 	.word	0x0801e924
 8016a98:	0801e8fc 	.word	0x0801e8fc

08016a9c <udp_init>:
/**
 * Initialize this module.
 */
void
udp_init(void)
{
 8016a9c:	b580      	push	{r7, lr}
 8016a9e:	af00      	add	r7, sp, #0
#ifdef LWIP_RAND
  udp_port = UDP_ENSURE_LOCAL_PORT_RANGE(LWIP_RAND());
 8016aa0:	f002 fca2 	bl	80193e8 <rand>
 8016aa4:	4603      	mov	r3, r0
 8016aa6:	b29b      	uxth	r3, r3
 8016aa8:	f3c3 030d 	ubfx	r3, r3, #0, #14
 8016aac:	b29b      	uxth	r3, r3
 8016aae:	f5a3 4380 	sub.w	r3, r3, #16384	; 0x4000
 8016ab2:	b29a      	uxth	r2, r3
 8016ab4:	4b01      	ldr	r3, [pc, #4]	; (8016abc <udp_init+0x20>)
 8016ab6:	801a      	strh	r2, [r3, #0]
#endif /* LWIP_RAND */
}
 8016ab8:	bf00      	nop
 8016aba:	bd80      	pop	{r7, pc}
 8016abc:	20000060 	.word	0x20000060

08016ac0 <udp_input_local_match>:
 * @param broadcast 1 if his is an IPv4 broadcast (global or subnet-only), 0 otherwise (only used for IPv4)
 * @return 1 on match, 0 otherwise
 */
static u8_t
udp_input_local_match(struct udp_pcb *pcb, struct netif *inp, u8_t broadcast)
{
 8016ac0:	b580      	push	{r7, lr}
 8016ac2:	b084      	sub	sp, #16
 8016ac4:	af00      	add	r7, sp, #0
 8016ac6:	60f8      	str	r0, [r7, #12]
 8016ac8:	60b9      	str	r1, [r7, #8]
 8016aca:	4613      	mov	r3, r2
 8016acc:	71fb      	strb	r3, [r7, #7]
  LWIP_UNUSED_ARG(inp);       /* in IPv6 only case */
  LWIP_UNUSED_ARG(broadcast); /* in IPv6 only case */

  LWIP_ASSERT("udp_input_local_match: invalid pcb", pcb != NULL);
 8016ace:	68fb      	ldr	r3, [r7, #12]
 8016ad0:	2b00      	cmp	r3, #0
 8016ad2:	d105      	bne.n	8016ae0 <udp_input_local_match+0x20>
 8016ad4:	4b27      	ldr	r3, [pc, #156]	; (8016b74 <udp_input_local_match+0xb4>)
 8016ad6:	2287      	movs	r2, #135	; 0x87
 8016ad8:	4927      	ldr	r1, [pc, #156]	; (8016b78 <udp_input_local_match+0xb8>)
 8016ada:	4828      	ldr	r0, [pc, #160]	; (8016b7c <udp_input_local_match+0xbc>)
 8016adc:	f003 f9c0 	bl	8019e60 <iprintf>
  LWIP_ASSERT("udp_input_local_match: invalid netif", inp != NULL);
 8016ae0:	68bb      	ldr	r3, [r7, #8]
 8016ae2:	2b00      	cmp	r3, #0
 8016ae4:	d105      	bne.n	8016af2 <udp_input_local_match+0x32>
 8016ae6:	4b23      	ldr	r3, [pc, #140]	; (8016b74 <udp_input_local_match+0xb4>)
 8016ae8:	2288      	movs	r2, #136	; 0x88
 8016aea:	4925      	ldr	r1, [pc, #148]	; (8016b80 <udp_input_local_match+0xc0>)
 8016aec:	4823      	ldr	r0, [pc, #140]	; (8016b7c <udp_input_local_match+0xbc>)
 8016aee:	f003 f9b7 	bl	8019e60 <iprintf>

  /* check if PCB is bound to specific netif */
  if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 8016af2:	68fb      	ldr	r3, [r7, #12]
 8016af4:	7a1b      	ldrb	r3, [r3, #8]
 8016af6:	2b00      	cmp	r3, #0
 8016af8:	d00b      	beq.n	8016b12 <udp_input_local_match+0x52>
      (pcb->netif_idx != netif_get_index(ip_data.current_input_netif))) {
 8016afa:	68fb      	ldr	r3, [r7, #12]
 8016afc:	7a1a      	ldrb	r2, [r3, #8]
 8016afe:	4b21      	ldr	r3, [pc, #132]	; (8016b84 <udp_input_local_match+0xc4>)
 8016b00:	685b      	ldr	r3, [r3, #4]
 8016b02:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8016b06:	3301      	adds	r3, #1
 8016b08:	b2db      	uxtb	r3, r3
  if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 8016b0a:	429a      	cmp	r2, r3
 8016b0c:	d001      	beq.n	8016b12 <udp_input_local_match+0x52>
    return 0;
 8016b0e:	2300      	movs	r3, #0
 8016b10:	e02b      	b.n	8016b6a <udp_input_local_match+0xaa>
  /* Only need to check PCB if incoming IP version matches PCB IP version */
  if (IP_ADDR_PCB_VERSION_MATCH_EXACT(pcb, ip_current_dest_addr())) {
#if LWIP_IPV4
    /* Special case: IPv4 broadcast: all or broadcasts in my subnet
     * Note: broadcast variable can only be 1 if it is an IPv4 broadcast */
    if (broadcast != 0) {
 8016b12:	79fb      	ldrb	r3, [r7, #7]
 8016b14:	2b00      	cmp	r3, #0
 8016b16:	d018      	beq.n	8016b4a <udp_input_local_match+0x8a>
#if IP_SOF_BROADCAST_RECV
      if (ip_get_option(pcb, SOF_BROADCAST))
#endif /* IP_SOF_BROADCAST_RECV */
      {
        if (ip4_addr_isany(ip_2_ip4(&pcb->local_ip)) ||
 8016b18:	68fb      	ldr	r3, [r7, #12]
 8016b1a:	2b00      	cmp	r3, #0
 8016b1c:	d013      	beq.n	8016b46 <udp_input_local_match+0x86>
 8016b1e:	68fb      	ldr	r3, [r7, #12]
 8016b20:	681b      	ldr	r3, [r3, #0]
 8016b22:	2b00      	cmp	r3, #0
 8016b24:	d00f      	beq.n	8016b46 <udp_input_local_match+0x86>
            ((ip4_current_dest_addr()->addr == IPADDR_BROADCAST)) ||
 8016b26:	4b17      	ldr	r3, [pc, #92]	; (8016b84 <udp_input_local_match+0xc4>)
 8016b28:	695b      	ldr	r3, [r3, #20]
        if (ip4_addr_isany(ip_2_ip4(&pcb->local_ip)) ||
 8016b2a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8016b2e:	d00a      	beq.n	8016b46 <udp_input_local_match+0x86>
            ip4_addr_netcmp(ip_2_ip4(&pcb->local_ip), ip4_current_dest_addr(), netif_ip4_netmask(inp))) {
 8016b30:	68fb      	ldr	r3, [r7, #12]
 8016b32:	681a      	ldr	r2, [r3, #0]
 8016b34:	4b13      	ldr	r3, [pc, #76]	; (8016b84 <udp_input_local_match+0xc4>)
 8016b36:	695b      	ldr	r3, [r3, #20]
 8016b38:	405a      	eors	r2, r3
 8016b3a:	68bb      	ldr	r3, [r7, #8]
 8016b3c:	3308      	adds	r3, #8
 8016b3e:	681b      	ldr	r3, [r3, #0]
 8016b40:	4013      	ands	r3, r2
            ((ip4_current_dest_addr()->addr == IPADDR_BROADCAST)) ||
 8016b42:	2b00      	cmp	r3, #0
 8016b44:	d110      	bne.n	8016b68 <udp_input_local_match+0xa8>
          return 1;
 8016b46:	2301      	movs	r3, #1
 8016b48:	e00f      	b.n	8016b6a <udp_input_local_match+0xaa>
        }
      }
    } else
#endif /* LWIP_IPV4 */
      /* Handle IPv4 and IPv6: all or exact match */
      if (ip_addr_isany(&pcb->local_ip) || ip_addr_cmp(&pcb->local_ip, ip_current_dest_addr())) {
 8016b4a:	68fb      	ldr	r3, [r7, #12]
 8016b4c:	2b00      	cmp	r3, #0
 8016b4e:	d009      	beq.n	8016b64 <udp_input_local_match+0xa4>
 8016b50:	68fb      	ldr	r3, [r7, #12]
 8016b52:	681b      	ldr	r3, [r3, #0]
 8016b54:	2b00      	cmp	r3, #0
 8016b56:	d005      	beq.n	8016b64 <udp_input_local_match+0xa4>
 8016b58:	68fb      	ldr	r3, [r7, #12]
 8016b5a:	681a      	ldr	r2, [r3, #0]
 8016b5c:	4b09      	ldr	r3, [pc, #36]	; (8016b84 <udp_input_local_match+0xc4>)
 8016b5e:	695b      	ldr	r3, [r3, #20]
 8016b60:	429a      	cmp	r2, r3
 8016b62:	d101      	bne.n	8016b68 <udp_input_local_match+0xa8>
        return 1;
 8016b64:	2301      	movs	r3, #1
 8016b66:	e000      	b.n	8016b6a <udp_input_local_match+0xaa>
      }
  }

  return 0;
 8016b68:	2300      	movs	r3, #0
}
 8016b6a:	4618      	mov	r0, r3
 8016b6c:	3710      	adds	r7, #16
 8016b6e:	46bd      	mov	sp, r7
 8016b70:	bd80      	pop	{r7, pc}
 8016b72:	bf00      	nop
 8016b74:	0801e970 	.word	0x0801e970
 8016b78:	0801e9a0 	.word	0x0801e9a0
 8016b7c:	0801e9c4 	.word	0x0801e9c4
 8016b80:	0801e9ec 	.word	0x0801e9ec
 8016b84:	200007f8 	.word	0x200007f8

08016b88 <udp_input>:
 * @param inp network interface on which the datagram was received.
 *
 */
void
udp_input(struct pbuf *p, struct netif *inp)
{
 8016b88:	b590      	push	{r4, r7, lr}
 8016b8a:	b08d      	sub	sp, #52	; 0x34
 8016b8c:	af02      	add	r7, sp, #8
 8016b8e:	6078      	str	r0, [r7, #4]
 8016b90:	6039      	str	r1, [r7, #0]
  struct udp_hdr *udphdr;
  struct udp_pcb *pcb, *prev;
  struct udp_pcb *uncon_pcb;
  u16_t src, dest;
  u8_t broadcast;
  u8_t for_us = 0;
 8016b92:	2300      	movs	r3, #0
 8016b94:	76fb      	strb	r3, [r7, #27]

  LWIP_UNUSED_ARG(inp);

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ASSERT("udp_input: invalid pbuf", p != NULL);
 8016b96:	687b      	ldr	r3, [r7, #4]
 8016b98:	2b00      	cmp	r3, #0
 8016b9a:	d105      	bne.n	8016ba8 <udp_input+0x20>
 8016b9c:	4b7c      	ldr	r3, [pc, #496]	; (8016d90 <udp_input+0x208>)
 8016b9e:	22cf      	movs	r2, #207	; 0xcf
 8016ba0:	497c      	ldr	r1, [pc, #496]	; (8016d94 <udp_input+0x20c>)
 8016ba2:	487d      	ldr	r0, [pc, #500]	; (8016d98 <udp_input+0x210>)
 8016ba4:	f003 f95c 	bl	8019e60 <iprintf>
  LWIP_ASSERT("udp_input: invalid netif", inp != NULL);
 8016ba8:	683b      	ldr	r3, [r7, #0]
 8016baa:	2b00      	cmp	r3, #0
 8016bac:	d105      	bne.n	8016bba <udp_input+0x32>
 8016bae:	4b78      	ldr	r3, [pc, #480]	; (8016d90 <udp_input+0x208>)
 8016bb0:	22d0      	movs	r2, #208	; 0xd0
 8016bb2:	497a      	ldr	r1, [pc, #488]	; (8016d9c <udp_input+0x214>)
 8016bb4:	4878      	ldr	r0, [pc, #480]	; (8016d98 <udp_input+0x210>)
 8016bb6:	f003 f953 	bl	8019e60 <iprintf>
  PERF_START;

  UDP_STATS_INC(udp.recv);

  /* Check minimum length (UDP header) */
  if (p->len < UDP_HLEN) {
 8016bba:	687b      	ldr	r3, [r7, #4]
 8016bbc:	895b      	ldrh	r3, [r3, #10]
 8016bbe:	2b07      	cmp	r3, #7
 8016bc0:	d803      	bhi.n	8016bca <udp_input+0x42>
    LWIP_DEBUGF(UDP_DEBUG,
                ("udp_input: short UDP datagram (%"U16_F" bytes) discarded\n", p->tot_len));
    UDP_STATS_INC(udp.lenerr);
    UDP_STATS_INC(udp.drop);
    MIB2_STATS_INC(mib2.udpinerrors);
    pbuf_free(p);
 8016bc2:	6878      	ldr	r0, [r7, #4]
 8016bc4:	f7fa fa74 	bl	80110b0 <pbuf_free>
    goto end;
 8016bc8:	e0de      	b.n	8016d88 <udp_input+0x200>
  }

  udphdr = (struct udp_hdr *)p->payload;
 8016bca:	687b      	ldr	r3, [r7, #4]
 8016bcc:	685b      	ldr	r3, [r3, #4]
 8016bce:	617b      	str	r3, [r7, #20]

  /* is broadcast packet ? */
  broadcast = ip_addr_isbroadcast(ip_current_dest_addr(), ip_current_netif());
 8016bd0:	4b73      	ldr	r3, [pc, #460]	; (8016da0 <udp_input+0x218>)
 8016bd2:	695b      	ldr	r3, [r3, #20]
 8016bd4:	4a72      	ldr	r2, [pc, #456]	; (8016da0 <udp_input+0x218>)
 8016bd6:	6812      	ldr	r2, [r2, #0]
 8016bd8:	4611      	mov	r1, r2
 8016bda:	4618      	mov	r0, r3
 8016bdc:	f001 fcae 	bl	801853c <ip4_addr_isbroadcast_u32>
 8016be0:	4603      	mov	r3, r0
 8016be2:	74fb      	strb	r3, [r7, #19]

  LWIP_DEBUGF(UDP_DEBUG, ("udp_input: received datagram of length %"U16_F"\n", p->tot_len));

  /* convert src and dest ports to host byte order */
  src = lwip_ntohs(udphdr->src);
 8016be4:	697b      	ldr	r3, [r7, #20]
 8016be6:	881b      	ldrh	r3, [r3, #0]
 8016be8:	b29b      	uxth	r3, r3
 8016bea:	4618      	mov	r0, r3
 8016bec:	f7f8 fe7c 	bl	800f8e8 <lwip_htons>
 8016bf0:	4603      	mov	r3, r0
 8016bf2:	823b      	strh	r3, [r7, #16]
  dest = lwip_ntohs(udphdr->dest);
 8016bf4:	697b      	ldr	r3, [r7, #20]
 8016bf6:	885b      	ldrh	r3, [r3, #2]
 8016bf8:	b29b      	uxth	r3, r3
 8016bfa:	4618      	mov	r0, r3
 8016bfc:	f7f8 fe74 	bl	800f8e8 <lwip_htons>
 8016c00:	4603      	mov	r3, r0
 8016c02:	81fb      	strh	r3, [r7, #14]
  ip_addr_debug_print_val(UDP_DEBUG, *ip_current_dest_addr());
  LWIP_DEBUGF(UDP_DEBUG, (", %"U16_F") <-- (", lwip_ntohs(udphdr->dest)));
  ip_addr_debug_print_val(UDP_DEBUG, *ip_current_src_addr());
  LWIP_DEBUGF(UDP_DEBUG, (", %"U16_F")\n", lwip_ntohs(udphdr->src)));

  pcb = NULL;
 8016c04:	2300      	movs	r3, #0
 8016c06:	627b      	str	r3, [r7, #36]	; 0x24
  prev = NULL;
 8016c08:	2300      	movs	r3, #0
 8016c0a:	623b      	str	r3, [r7, #32]
  uncon_pcb = NULL;
 8016c0c:	2300      	movs	r3, #0
 8016c0e:	61fb      	str	r3, [r7, #28]
  /* Iterate through the UDP pcb list for a matching pcb.
   * 'Perfect match' pcbs (connected to the remote port & ip address) are
   * preferred. If no perfect match is found, the first unconnected pcb that
   * matches the local port and ip address gets the datagram. */
  for (pcb = udp_pcbs; pcb != NULL; pcb = pcb->next) {
 8016c10:	4b64      	ldr	r3, [pc, #400]	; (8016da4 <udp_input+0x21c>)
 8016c12:	681b      	ldr	r3, [r3, #0]
 8016c14:	627b      	str	r3, [r7, #36]	; 0x24
 8016c16:	e054      	b.n	8016cc2 <udp_input+0x13a>
    LWIP_DEBUGF(UDP_DEBUG, (", %"U16_F") <-- (", pcb->local_port));
    ip_addr_debug_print_val(UDP_DEBUG, pcb->remote_ip);
    LWIP_DEBUGF(UDP_DEBUG, (", %"U16_F")\n", pcb->remote_port));

    /* compare PCB local addr+port to UDP destination addr+port */
    if ((pcb->local_port == dest) &&
 8016c18:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8016c1a:	8a5b      	ldrh	r3, [r3, #18]
 8016c1c:	89fa      	ldrh	r2, [r7, #14]
 8016c1e:	429a      	cmp	r2, r3
 8016c20:	d14a      	bne.n	8016cb8 <udp_input+0x130>
        (udp_input_local_match(pcb, inp, broadcast) != 0)) {
 8016c22:	7cfb      	ldrb	r3, [r7, #19]
 8016c24:	461a      	mov	r2, r3
 8016c26:	6839      	ldr	r1, [r7, #0]
 8016c28:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8016c2a:	f7ff ff49 	bl	8016ac0 <udp_input_local_match>
 8016c2e:	4603      	mov	r3, r0
    if ((pcb->local_port == dest) &&
 8016c30:	2b00      	cmp	r3, #0
 8016c32:	d041      	beq.n	8016cb8 <udp_input+0x130>
      if ((pcb->flags & UDP_FLAGS_CONNECTED) == 0) {
 8016c34:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8016c36:	7c1b      	ldrb	r3, [r3, #16]
 8016c38:	f003 0304 	and.w	r3, r3, #4
 8016c3c:	2b00      	cmp	r3, #0
 8016c3e:	d11d      	bne.n	8016c7c <udp_input+0xf4>
        if (uncon_pcb == NULL) {
 8016c40:	69fb      	ldr	r3, [r7, #28]
 8016c42:	2b00      	cmp	r3, #0
 8016c44:	d102      	bne.n	8016c4c <udp_input+0xc4>
          /* the first unconnected matching PCB */
          uncon_pcb = pcb;
 8016c46:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8016c48:	61fb      	str	r3, [r7, #28]
 8016c4a:	e017      	b.n	8016c7c <udp_input+0xf4>
#if LWIP_IPV4
        } else if (broadcast && ip4_current_dest_addr()->addr == IPADDR_BROADCAST) {
 8016c4c:	7cfb      	ldrb	r3, [r7, #19]
 8016c4e:	2b00      	cmp	r3, #0
 8016c50:	d014      	beq.n	8016c7c <udp_input+0xf4>
 8016c52:	4b53      	ldr	r3, [pc, #332]	; (8016da0 <udp_input+0x218>)
 8016c54:	695b      	ldr	r3, [r3, #20]
 8016c56:	f1b3 3fff 	cmp.w	r3, #4294967295
 8016c5a:	d10f      	bne.n	8016c7c <udp_input+0xf4>
          /* global broadcast address (only valid for IPv4; match was checked before) */
          if (!IP_IS_V4_VAL(uncon_pcb->local_ip) || !ip4_addr_cmp(ip_2_ip4(&uncon_pcb->local_ip), netif_ip4_addr(inp))) {
 8016c5c:	69fb      	ldr	r3, [r7, #28]
 8016c5e:	681a      	ldr	r2, [r3, #0]
 8016c60:	683b      	ldr	r3, [r7, #0]
 8016c62:	3304      	adds	r3, #4
 8016c64:	681b      	ldr	r3, [r3, #0]
 8016c66:	429a      	cmp	r2, r3
 8016c68:	d008      	beq.n	8016c7c <udp_input+0xf4>
            /* uncon_pcb does not match the input netif, check this pcb */
            if (IP_IS_V4_VAL(pcb->local_ip) && ip4_addr_cmp(ip_2_ip4(&pcb->local_ip), netif_ip4_addr(inp))) {
 8016c6a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8016c6c:	681a      	ldr	r2, [r3, #0]
 8016c6e:	683b      	ldr	r3, [r7, #0]
 8016c70:	3304      	adds	r3, #4
 8016c72:	681b      	ldr	r3, [r3, #0]
 8016c74:	429a      	cmp	r2, r3
 8016c76:	d101      	bne.n	8016c7c <udp_input+0xf4>
              /* better match */
              uncon_pcb = pcb;
 8016c78:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8016c7a:	61fb      	str	r3, [r7, #28]
        }
#endif /* SO_REUSE */
      }

      /* compare PCB remote addr+port to UDP source addr+port */
      if ((pcb->remote_port == src) &&
 8016c7c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8016c7e:	8a9b      	ldrh	r3, [r3, #20]
 8016c80:	8a3a      	ldrh	r2, [r7, #16]
 8016c82:	429a      	cmp	r2, r3
 8016c84:	d118      	bne.n	8016cb8 <udp_input+0x130>
          (ip_addr_isany_val(pcb->remote_ip) ||
 8016c86:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8016c88:	685b      	ldr	r3, [r3, #4]
      if ((pcb->remote_port == src) &&
 8016c8a:	2b00      	cmp	r3, #0
 8016c8c:	d005      	beq.n	8016c9a <udp_input+0x112>
           ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()))) {
 8016c8e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8016c90:	685a      	ldr	r2, [r3, #4]
 8016c92:	4b43      	ldr	r3, [pc, #268]	; (8016da0 <udp_input+0x218>)
 8016c94:	691b      	ldr	r3, [r3, #16]
          (ip_addr_isany_val(pcb->remote_ip) ||
 8016c96:	429a      	cmp	r2, r3
 8016c98:	d10e      	bne.n	8016cb8 <udp_input+0x130>
        /* the first fully matching PCB */
        if (prev != NULL) {
 8016c9a:	6a3b      	ldr	r3, [r7, #32]
 8016c9c:	2b00      	cmp	r3, #0
 8016c9e:	d014      	beq.n	8016cca <udp_input+0x142>
          /* move the pcb to the front of udp_pcbs so that is
             found faster next time */
          prev->next = pcb->next;
 8016ca0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8016ca2:	68da      	ldr	r2, [r3, #12]
 8016ca4:	6a3b      	ldr	r3, [r7, #32]
 8016ca6:	60da      	str	r2, [r3, #12]
          pcb->next = udp_pcbs;
 8016ca8:	4b3e      	ldr	r3, [pc, #248]	; (8016da4 <udp_input+0x21c>)
 8016caa:	681a      	ldr	r2, [r3, #0]
 8016cac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8016cae:	60da      	str	r2, [r3, #12]
          udp_pcbs = pcb;
 8016cb0:	4a3c      	ldr	r2, [pc, #240]	; (8016da4 <udp_input+0x21c>)
 8016cb2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8016cb4:	6013      	str	r3, [r2, #0]
        } else {
          UDP_STATS_INC(udp.cachehit);
        }
        break;
 8016cb6:	e008      	b.n	8016cca <udp_input+0x142>
      }
    }

    prev = pcb;
 8016cb8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8016cba:	623b      	str	r3, [r7, #32]
  for (pcb = udp_pcbs; pcb != NULL; pcb = pcb->next) {
 8016cbc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8016cbe:	68db      	ldr	r3, [r3, #12]
 8016cc0:	627b      	str	r3, [r7, #36]	; 0x24
 8016cc2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8016cc4:	2b00      	cmp	r3, #0
 8016cc6:	d1a7      	bne.n	8016c18 <udp_input+0x90>
 8016cc8:	e000      	b.n	8016ccc <udp_input+0x144>
        break;
 8016cca:	bf00      	nop
  }
  /* no fully matching pcb found? then look for an unconnected pcb */
  if (pcb == NULL) {
 8016ccc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8016cce:	2b00      	cmp	r3, #0
 8016cd0:	d101      	bne.n	8016cd6 <udp_input+0x14e>
    pcb = uncon_pcb;
 8016cd2:	69fb      	ldr	r3, [r7, #28]
 8016cd4:	627b      	str	r3, [r7, #36]	; 0x24
  }

  /* Check checksum if this is a match or if it was directed at us. */
  if (pcb != NULL) {
 8016cd6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8016cd8:	2b00      	cmp	r3, #0
 8016cda:	d002      	beq.n	8016ce2 <udp_input+0x15a>
    for_us = 1;
 8016cdc:	2301      	movs	r3, #1
 8016cde:	76fb      	strb	r3, [r7, #27]
 8016ce0:	e00a      	b.n	8016cf8 <udp_input+0x170>
      for_us = netif_get_ip6_addr_match(inp, ip6_current_dest_addr()) >= 0;
    }
#endif /* LWIP_IPV6 */
#if LWIP_IPV4
    if (!ip_current_is_v6()) {
      for_us = ip4_addr_cmp(netif_ip4_addr(inp), ip4_current_dest_addr());
 8016ce2:	683b      	ldr	r3, [r7, #0]
 8016ce4:	3304      	adds	r3, #4
 8016ce6:	681a      	ldr	r2, [r3, #0]
 8016ce8:	4b2d      	ldr	r3, [pc, #180]	; (8016da0 <udp_input+0x218>)
 8016cea:	695b      	ldr	r3, [r3, #20]
 8016cec:	429a      	cmp	r2, r3
 8016cee:	bf0c      	ite	eq
 8016cf0:	2301      	moveq	r3, #1
 8016cf2:	2300      	movne	r3, #0
 8016cf4:	b2db      	uxtb	r3, r3
 8016cf6:	76fb      	strb	r3, [r7, #27]
    }
#endif /* LWIP_IPV4 */
  }

  if (for_us) {
 8016cf8:	7efb      	ldrb	r3, [r7, #27]
 8016cfa:	2b00      	cmp	r3, #0
 8016cfc:	d041      	beq.n	8016d82 <udp_input+0x1fa>
          }
        }
      }
    }
#endif /* CHECKSUM_CHECK_UDP */
    if (pbuf_remove_header(p, UDP_HLEN)) {
 8016cfe:	2108      	movs	r1, #8
 8016d00:	6878      	ldr	r0, [r7, #4]
 8016d02:	f7fa f94f 	bl	8010fa4 <pbuf_remove_header>
 8016d06:	4603      	mov	r3, r0
 8016d08:	2b00      	cmp	r3, #0
 8016d0a:	d00a      	beq.n	8016d22 <udp_input+0x19a>
      /* Can we cope with this failing? Just assert for now */
      LWIP_ASSERT("pbuf_remove_header failed\n", 0);
 8016d0c:	4b20      	ldr	r3, [pc, #128]	; (8016d90 <udp_input+0x208>)
 8016d0e:	f44f 72b8 	mov.w	r2, #368	; 0x170
 8016d12:	4925      	ldr	r1, [pc, #148]	; (8016da8 <udp_input+0x220>)
 8016d14:	4820      	ldr	r0, [pc, #128]	; (8016d98 <udp_input+0x210>)
 8016d16:	f003 f8a3 	bl	8019e60 <iprintf>
      UDP_STATS_INC(udp.drop);
      MIB2_STATS_INC(mib2.udpinerrors);
      pbuf_free(p);
 8016d1a:	6878      	ldr	r0, [r7, #4]
 8016d1c:	f7fa f9c8 	bl	80110b0 <pbuf_free>
      goto end;
 8016d20:	e032      	b.n	8016d88 <udp_input+0x200>
    }

    if (pcb != NULL) {
 8016d22:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8016d24:	2b00      	cmp	r3, #0
 8016d26:	d012      	beq.n	8016d4e <udp_input+0x1c6>
          }
        }
      }
#endif /* SO_REUSE && SO_REUSE_RXTOALL */
      /* callback */
      if (pcb->recv != NULL) {
 8016d28:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8016d2a:	699b      	ldr	r3, [r3, #24]
 8016d2c:	2b00      	cmp	r3, #0
 8016d2e:	d00a      	beq.n	8016d46 <udp_input+0x1be>
        /* now the recv function is responsible for freeing p */
        pcb->recv(pcb->recv_arg, pcb, p, ip_current_src_addr(), src);
 8016d30:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8016d32:	699c      	ldr	r4, [r3, #24]
 8016d34:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8016d36:	69d8      	ldr	r0, [r3, #28]
 8016d38:	8a3b      	ldrh	r3, [r7, #16]
 8016d3a:	9300      	str	r3, [sp, #0]
 8016d3c:	4b1b      	ldr	r3, [pc, #108]	; (8016dac <udp_input+0x224>)
 8016d3e:	687a      	ldr	r2, [r7, #4]
 8016d40:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8016d42:	47a0      	blx	r4
  } else {
    pbuf_free(p);
  }
end:
  PERF_STOP("udp_input");
  return;
 8016d44:	e021      	b.n	8016d8a <udp_input+0x202>
        pbuf_free(p);
 8016d46:	6878      	ldr	r0, [r7, #4]
 8016d48:	f7fa f9b2 	bl	80110b0 <pbuf_free>
        goto end;
 8016d4c:	e01c      	b.n	8016d88 <udp_input+0x200>
      if (!broadcast && !ip_addr_ismulticast(ip_current_dest_addr())) {
 8016d4e:	7cfb      	ldrb	r3, [r7, #19]
 8016d50:	2b00      	cmp	r3, #0
 8016d52:	d112      	bne.n	8016d7a <udp_input+0x1f2>
 8016d54:	4b12      	ldr	r3, [pc, #72]	; (8016da0 <udp_input+0x218>)
 8016d56:	695b      	ldr	r3, [r3, #20]
 8016d58:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8016d5c:	2be0      	cmp	r3, #224	; 0xe0
 8016d5e:	d00c      	beq.n	8016d7a <udp_input+0x1f2>
        pbuf_header_force(p, (s16_t)(ip_current_header_tot_len() + UDP_HLEN));
 8016d60:	4b0f      	ldr	r3, [pc, #60]	; (8016da0 <udp_input+0x218>)
 8016d62:	899b      	ldrh	r3, [r3, #12]
 8016d64:	3308      	adds	r3, #8
 8016d66:	b29b      	uxth	r3, r3
 8016d68:	b21b      	sxth	r3, r3
 8016d6a:	4619      	mov	r1, r3
 8016d6c:	6878      	ldr	r0, [r7, #4]
 8016d6e:	f7fa f98c 	bl	801108a <pbuf_header_force>
        icmp_port_unreach(ip_current_is_v6(), p);
 8016d72:	2103      	movs	r1, #3
 8016d74:	6878      	ldr	r0, [r7, #4]
 8016d76:	f001 f8b7 	bl	8017ee8 <icmp_dest_unreach>
      pbuf_free(p);
 8016d7a:	6878      	ldr	r0, [r7, #4]
 8016d7c:	f7fa f998 	bl	80110b0 <pbuf_free>
  return;
 8016d80:	e003      	b.n	8016d8a <udp_input+0x202>
    pbuf_free(p);
 8016d82:	6878      	ldr	r0, [r7, #4]
 8016d84:	f7fa f994 	bl	80110b0 <pbuf_free>
  return;
 8016d88:	bf00      	nop
  UDP_STATS_INC(udp.drop);
  MIB2_STATS_INC(mib2.udpinerrors);
  pbuf_free(p);
  PERF_STOP("udp_input");
#endif /* CHECKSUM_CHECK_UDP */
}
 8016d8a:	372c      	adds	r7, #44	; 0x2c
 8016d8c:	46bd      	mov	sp, r7
 8016d8e:	bd90      	pop	{r4, r7, pc}
 8016d90:	0801e970 	.word	0x0801e970
 8016d94:	0801ea14 	.word	0x0801ea14
 8016d98:	0801e9c4 	.word	0x0801e9c4
 8016d9c:	0801ea2c 	.word	0x0801ea2c
 8016da0:	200007f8 	.word	0x200007f8
 8016da4:	20007130 	.word	0x20007130
 8016da8:	0801ea48 	.word	0x0801ea48
 8016dac:	20000808 	.word	0x20000808

08016db0 <udp_netif_ip_addr_changed>:
 *
 * @param old_addr IP address of the netif before change
 * @param new_addr IP address of the netif after change
 */
void udp_netif_ip_addr_changed(const ip_addr_t *old_addr, const ip_addr_t *new_addr)
{
 8016db0:	b480      	push	{r7}
 8016db2:	b085      	sub	sp, #20
 8016db4:	af00      	add	r7, sp, #0
 8016db6:	6078      	str	r0, [r7, #4]
 8016db8:	6039      	str	r1, [r7, #0]
  struct udp_pcb *upcb;

  if (!ip_addr_isany(old_addr) && !ip_addr_isany(new_addr)) {
 8016dba:	687b      	ldr	r3, [r7, #4]
 8016dbc:	2b00      	cmp	r3, #0
 8016dbe:	d01e      	beq.n	8016dfe <udp_netif_ip_addr_changed+0x4e>
 8016dc0:	687b      	ldr	r3, [r7, #4]
 8016dc2:	681b      	ldr	r3, [r3, #0]
 8016dc4:	2b00      	cmp	r3, #0
 8016dc6:	d01a      	beq.n	8016dfe <udp_netif_ip_addr_changed+0x4e>
 8016dc8:	683b      	ldr	r3, [r7, #0]
 8016dca:	2b00      	cmp	r3, #0
 8016dcc:	d017      	beq.n	8016dfe <udp_netif_ip_addr_changed+0x4e>
 8016dce:	683b      	ldr	r3, [r7, #0]
 8016dd0:	681b      	ldr	r3, [r3, #0]
 8016dd2:	2b00      	cmp	r3, #0
 8016dd4:	d013      	beq.n	8016dfe <udp_netif_ip_addr_changed+0x4e>
    for (upcb = udp_pcbs; upcb != NULL; upcb = upcb->next) {
 8016dd6:	4b0d      	ldr	r3, [pc, #52]	; (8016e0c <udp_netif_ip_addr_changed+0x5c>)
 8016dd8:	681b      	ldr	r3, [r3, #0]
 8016dda:	60fb      	str	r3, [r7, #12]
 8016ddc:	e00c      	b.n	8016df8 <udp_netif_ip_addr_changed+0x48>
      /* PCB bound to current local interface address? */
      if (ip_addr_cmp(&upcb->local_ip, old_addr)) {
 8016dde:	68fb      	ldr	r3, [r7, #12]
 8016de0:	681a      	ldr	r2, [r3, #0]
 8016de2:	687b      	ldr	r3, [r7, #4]
 8016de4:	681b      	ldr	r3, [r3, #0]
 8016de6:	429a      	cmp	r2, r3
 8016de8:	d103      	bne.n	8016df2 <udp_netif_ip_addr_changed+0x42>
        /* The PCB is bound to the old ipaddr and
         * is set to bound to the new one instead */
        ip_addr_copy(upcb->local_ip, *new_addr);
 8016dea:	683b      	ldr	r3, [r7, #0]
 8016dec:	681a      	ldr	r2, [r3, #0]
 8016dee:	68fb      	ldr	r3, [r7, #12]
 8016df0:	601a      	str	r2, [r3, #0]
    for (upcb = udp_pcbs; upcb != NULL; upcb = upcb->next) {
 8016df2:	68fb      	ldr	r3, [r7, #12]
 8016df4:	68db      	ldr	r3, [r3, #12]
 8016df6:	60fb      	str	r3, [r7, #12]
 8016df8:	68fb      	ldr	r3, [r7, #12]
 8016dfa:	2b00      	cmp	r3, #0
 8016dfc:	d1ef      	bne.n	8016dde <udp_netif_ip_addr_changed+0x2e>
      }
    }
  }
}
 8016dfe:	bf00      	nop
 8016e00:	3714      	adds	r7, #20
 8016e02:	46bd      	mov	sp, r7
 8016e04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016e08:	4770      	bx	lr
 8016e0a:	bf00      	nop
 8016e0c:	20007130 	.word	0x20007130

08016e10 <etharp_free_entry>:
#endif /* ARP_QUEUEING */

/** Clean up ARP table entries */
static void
etharp_free_entry(int i)
{
 8016e10:	b580      	push	{r7, lr}
 8016e12:	b082      	sub	sp, #8
 8016e14:	af00      	add	r7, sp, #0
 8016e16:	6078      	str	r0, [r7, #4]
  /* remove from SNMP ARP index tree */
  mib2_remove_arp_entry(arp_table[i].netif, &arp_table[i].ipaddr);
  /* and empty packet queue */
  if (arp_table[i].q != NULL) {
 8016e18:	4915      	ldr	r1, [pc, #84]	; (8016e70 <etharp_free_entry+0x60>)
 8016e1a:	687a      	ldr	r2, [r7, #4]
 8016e1c:	4613      	mov	r3, r2
 8016e1e:	005b      	lsls	r3, r3, #1
 8016e20:	4413      	add	r3, r2
 8016e22:	00db      	lsls	r3, r3, #3
 8016e24:	440b      	add	r3, r1
 8016e26:	681b      	ldr	r3, [r3, #0]
 8016e28:	2b00      	cmp	r3, #0
 8016e2a:	d013      	beq.n	8016e54 <etharp_free_entry+0x44>
    /* remove all queued packets */
    LWIP_DEBUGF(ETHARP_DEBUG, ("etharp_free_entry: freeing entry %"U16_F", packet queue %p.\n", (u16_t)i, (void *)(arp_table[i].q)));
    free_etharp_q(arp_table[i].q);
 8016e2c:	4910      	ldr	r1, [pc, #64]	; (8016e70 <etharp_free_entry+0x60>)
 8016e2e:	687a      	ldr	r2, [r7, #4]
 8016e30:	4613      	mov	r3, r2
 8016e32:	005b      	lsls	r3, r3, #1
 8016e34:	4413      	add	r3, r2
 8016e36:	00db      	lsls	r3, r3, #3
 8016e38:	440b      	add	r3, r1
 8016e3a:	681b      	ldr	r3, [r3, #0]
 8016e3c:	4618      	mov	r0, r3
 8016e3e:	f7fa f937 	bl	80110b0 <pbuf_free>
    arp_table[i].q = NULL;
 8016e42:	490b      	ldr	r1, [pc, #44]	; (8016e70 <etharp_free_entry+0x60>)
 8016e44:	687a      	ldr	r2, [r7, #4]
 8016e46:	4613      	mov	r3, r2
 8016e48:	005b      	lsls	r3, r3, #1
 8016e4a:	4413      	add	r3, r2
 8016e4c:	00db      	lsls	r3, r3, #3
 8016e4e:	440b      	add	r3, r1
 8016e50:	2200      	movs	r2, #0
 8016e52:	601a      	str	r2, [r3, #0]
  }
  /* recycle entry for re-use */
  arp_table[i].state = ETHARP_STATE_EMPTY;
 8016e54:	4906      	ldr	r1, [pc, #24]	; (8016e70 <etharp_free_entry+0x60>)
 8016e56:	687a      	ldr	r2, [r7, #4]
 8016e58:	4613      	mov	r3, r2
 8016e5a:	005b      	lsls	r3, r3, #1
 8016e5c:	4413      	add	r3, r2
 8016e5e:	00db      	lsls	r3, r3, #3
 8016e60:	440b      	add	r3, r1
 8016e62:	3314      	adds	r3, #20
 8016e64:	2200      	movs	r2, #0
 8016e66:	701a      	strb	r2, [r3, #0]
  arp_table[i].ctime = 0;
  arp_table[i].netif = NULL;
  ip4_addr_set_zero(&arp_table[i].ipaddr);
  arp_table[i].ethaddr = ethzero;
#endif /* LWIP_DEBUG */
}
 8016e68:	bf00      	nop
 8016e6a:	3708      	adds	r7, #8
 8016e6c:	46bd      	mov	sp, r7
 8016e6e:	bd80      	pop	{r7, pc}
 8016e70:	20007134 	.word	0x20007134

08016e74 <etharp_tmr>:
 * This function should be called every ARP_TMR_INTERVAL milliseconds (1 second),
 * in order to expire entries in the ARP table.
 */
void
etharp_tmr(void)
{
 8016e74:	b580      	push	{r7, lr}
 8016e76:	b082      	sub	sp, #8
 8016e78:	af00      	add	r7, sp, #0
  int i;

  LWIP_DEBUGF(ETHARP_DEBUG, ("etharp_timer\n"));
  /* remove expired entries from the ARP table */
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 8016e7a:	2300      	movs	r3, #0
 8016e7c:	607b      	str	r3, [r7, #4]
 8016e7e:	e096      	b.n	8016fae <etharp_tmr+0x13a>
    u8_t state = arp_table[i].state;
 8016e80:	494f      	ldr	r1, [pc, #316]	; (8016fc0 <etharp_tmr+0x14c>)
 8016e82:	687a      	ldr	r2, [r7, #4]
 8016e84:	4613      	mov	r3, r2
 8016e86:	005b      	lsls	r3, r3, #1
 8016e88:	4413      	add	r3, r2
 8016e8a:	00db      	lsls	r3, r3, #3
 8016e8c:	440b      	add	r3, r1
 8016e8e:	3314      	adds	r3, #20
 8016e90:	781b      	ldrb	r3, [r3, #0]
 8016e92:	70fb      	strb	r3, [r7, #3]
    if (state != ETHARP_STATE_EMPTY
 8016e94:	78fb      	ldrb	r3, [r7, #3]
 8016e96:	2b00      	cmp	r3, #0
 8016e98:	f000 8086 	beq.w	8016fa8 <etharp_tmr+0x134>
#if ETHARP_SUPPORT_STATIC_ENTRIES
        && (state != ETHARP_STATE_STATIC)
#endif /* ETHARP_SUPPORT_STATIC_ENTRIES */
       ) {
      arp_table[i].ctime++;
 8016e9c:	4948      	ldr	r1, [pc, #288]	; (8016fc0 <etharp_tmr+0x14c>)
 8016e9e:	687a      	ldr	r2, [r7, #4]
 8016ea0:	4613      	mov	r3, r2
 8016ea2:	005b      	lsls	r3, r3, #1
 8016ea4:	4413      	add	r3, r2
 8016ea6:	00db      	lsls	r3, r3, #3
 8016ea8:	440b      	add	r3, r1
 8016eaa:	3312      	adds	r3, #18
 8016eac:	881b      	ldrh	r3, [r3, #0]
 8016eae:	3301      	adds	r3, #1
 8016eb0:	b298      	uxth	r0, r3
 8016eb2:	4943      	ldr	r1, [pc, #268]	; (8016fc0 <etharp_tmr+0x14c>)
 8016eb4:	687a      	ldr	r2, [r7, #4]
 8016eb6:	4613      	mov	r3, r2
 8016eb8:	005b      	lsls	r3, r3, #1
 8016eba:	4413      	add	r3, r2
 8016ebc:	00db      	lsls	r3, r3, #3
 8016ebe:	440b      	add	r3, r1
 8016ec0:	3312      	adds	r3, #18
 8016ec2:	4602      	mov	r2, r0
 8016ec4:	801a      	strh	r2, [r3, #0]
      if ((arp_table[i].ctime >= ARP_MAXAGE) ||
 8016ec6:	493e      	ldr	r1, [pc, #248]	; (8016fc0 <etharp_tmr+0x14c>)
 8016ec8:	687a      	ldr	r2, [r7, #4]
 8016eca:	4613      	mov	r3, r2
 8016ecc:	005b      	lsls	r3, r3, #1
 8016ece:	4413      	add	r3, r2
 8016ed0:	00db      	lsls	r3, r3, #3
 8016ed2:	440b      	add	r3, r1
 8016ed4:	3312      	adds	r3, #18
 8016ed6:	881b      	ldrh	r3, [r3, #0]
 8016ed8:	f5b3 7f96 	cmp.w	r3, #300	; 0x12c
 8016edc:	d215      	bcs.n	8016f0a <etharp_tmr+0x96>
          ((arp_table[i].state == ETHARP_STATE_PENDING)  &&
 8016ede:	4938      	ldr	r1, [pc, #224]	; (8016fc0 <etharp_tmr+0x14c>)
 8016ee0:	687a      	ldr	r2, [r7, #4]
 8016ee2:	4613      	mov	r3, r2
 8016ee4:	005b      	lsls	r3, r3, #1
 8016ee6:	4413      	add	r3, r2
 8016ee8:	00db      	lsls	r3, r3, #3
 8016eea:	440b      	add	r3, r1
 8016eec:	3314      	adds	r3, #20
 8016eee:	781b      	ldrb	r3, [r3, #0]
      if ((arp_table[i].ctime >= ARP_MAXAGE) ||
 8016ef0:	2b01      	cmp	r3, #1
 8016ef2:	d10e      	bne.n	8016f12 <etharp_tmr+0x9e>
           (arp_table[i].ctime >= ARP_MAXPENDING))) {
 8016ef4:	4932      	ldr	r1, [pc, #200]	; (8016fc0 <etharp_tmr+0x14c>)
 8016ef6:	687a      	ldr	r2, [r7, #4]
 8016ef8:	4613      	mov	r3, r2
 8016efa:	005b      	lsls	r3, r3, #1
 8016efc:	4413      	add	r3, r2
 8016efe:	00db      	lsls	r3, r3, #3
 8016f00:	440b      	add	r3, r1
 8016f02:	3312      	adds	r3, #18
 8016f04:	881b      	ldrh	r3, [r3, #0]
          ((arp_table[i].state == ETHARP_STATE_PENDING)  &&
 8016f06:	2b04      	cmp	r3, #4
 8016f08:	d903      	bls.n	8016f12 <etharp_tmr+0x9e>
        /* pending or stable entry has become old! */
        LWIP_DEBUGF(ETHARP_DEBUG, ("etharp_timer: expired %s entry %d.\n",
                                   arp_table[i].state >= ETHARP_STATE_STABLE ? "stable" : "pending", i));
        /* clean up entries that have just been expired */
        etharp_free_entry(i);
 8016f0a:	6878      	ldr	r0, [r7, #4]
 8016f0c:	f7ff ff80 	bl	8016e10 <etharp_free_entry>
 8016f10:	e04a      	b.n	8016fa8 <etharp_tmr+0x134>
      } else if (arp_table[i].state == ETHARP_STATE_STABLE_REREQUESTING_1) {
 8016f12:	492b      	ldr	r1, [pc, #172]	; (8016fc0 <etharp_tmr+0x14c>)
 8016f14:	687a      	ldr	r2, [r7, #4]
 8016f16:	4613      	mov	r3, r2
 8016f18:	005b      	lsls	r3, r3, #1
 8016f1a:	4413      	add	r3, r2
 8016f1c:	00db      	lsls	r3, r3, #3
 8016f1e:	440b      	add	r3, r1
 8016f20:	3314      	adds	r3, #20
 8016f22:	781b      	ldrb	r3, [r3, #0]
 8016f24:	2b03      	cmp	r3, #3
 8016f26:	d10a      	bne.n	8016f3e <etharp_tmr+0xca>
        /* Don't send more than one request every 2 seconds. */
        arp_table[i].state = ETHARP_STATE_STABLE_REREQUESTING_2;
 8016f28:	4925      	ldr	r1, [pc, #148]	; (8016fc0 <etharp_tmr+0x14c>)
 8016f2a:	687a      	ldr	r2, [r7, #4]
 8016f2c:	4613      	mov	r3, r2
 8016f2e:	005b      	lsls	r3, r3, #1
 8016f30:	4413      	add	r3, r2
 8016f32:	00db      	lsls	r3, r3, #3
 8016f34:	440b      	add	r3, r1
 8016f36:	3314      	adds	r3, #20
 8016f38:	2204      	movs	r2, #4
 8016f3a:	701a      	strb	r2, [r3, #0]
 8016f3c:	e034      	b.n	8016fa8 <etharp_tmr+0x134>
      } else if (arp_table[i].state == ETHARP_STATE_STABLE_REREQUESTING_2) {
 8016f3e:	4920      	ldr	r1, [pc, #128]	; (8016fc0 <etharp_tmr+0x14c>)
 8016f40:	687a      	ldr	r2, [r7, #4]
 8016f42:	4613      	mov	r3, r2
 8016f44:	005b      	lsls	r3, r3, #1
 8016f46:	4413      	add	r3, r2
 8016f48:	00db      	lsls	r3, r3, #3
 8016f4a:	440b      	add	r3, r1
 8016f4c:	3314      	adds	r3, #20
 8016f4e:	781b      	ldrb	r3, [r3, #0]
 8016f50:	2b04      	cmp	r3, #4
 8016f52:	d10a      	bne.n	8016f6a <etharp_tmr+0xf6>
        /* Reset state to stable, so that the next transmitted packet will
           re-send an ARP request. */
        arp_table[i].state = ETHARP_STATE_STABLE;
 8016f54:	491a      	ldr	r1, [pc, #104]	; (8016fc0 <etharp_tmr+0x14c>)
 8016f56:	687a      	ldr	r2, [r7, #4]
 8016f58:	4613      	mov	r3, r2
 8016f5a:	005b      	lsls	r3, r3, #1
 8016f5c:	4413      	add	r3, r2
 8016f5e:	00db      	lsls	r3, r3, #3
 8016f60:	440b      	add	r3, r1
 8016f62:	3314      	adds	r3, #20
 8016f64:	2202      	movs	r2, #2
 8016f66:	701a      	strb	r2, [r3, #0]
 8016f68:	e01e      	b.n	8016fa8 <etharp_tmr+0x134>
      } else if (arp_table[i].state == ETHARP_STATE_PENDING) {
 8016f6a:	4915      	ldr	r1, [pc, #84]	; (8016fc0 <etharp_tmr+0x14c>)
 8016f6c:	687a      	ldr	r2, [r7, #4]
 8016f6e:	4613      	mov	r3, r2
 8016f70:	005b      	lsls	r3, r3, #1
 8016f72:	4413      	add	r3, r2
 8016f74:	00db      	lsls	r3, r3, #3
 8016f76:	440b      	add	r3, r1
 8016f78:	3314      	adds	r3, #20
 8016f7a:	781b      	ldrb	r3, [r3, #0]
 8016f7c:	2b01      	cmp	r3, #1
 8016f7e:	d113      	bne.n	8016fa8 <etharp_tmr+0x134>
        /* still pending, resend an ARP query */
        etharp_request(arp_table[i].netif, &arp_table[i].ipaddr);
 8016f80:	490f      	ldr	r1, [pc, #60]	; (8016fc0 <etharp_tmr+0x14c>)
 8016f82:	687a      	ldr	r2, [r7, #4]
 8016f84:	4613      	mov	r3, r2
 8016f86:	005b      	lsls	r3, r3, #1
 8016f88:	4413      	add	r3, r2
 8016f8a:	00db      	lsls	r3, r3, #3
 8016f8c:	440b      	add	r3, r1
 8016f8e:	3308      	adds	r3, #8
 8016f90:	6818      	ldr	r0, [r3, #0]
 8016f92:	687a      	ldr	r2, [r7, #4]
 8016f94:	4613      	mov	r3, r2
 8016f96:	005b      	lsls	r3, r3, #1
 8016f98:	4413      	add	r3, r2
 8016f9a:	00db      	lsls	r3, r3, #3
 8016f9c:	4a08      	ldr	r2, [pc, #32]	; (8016fc0 <etharp_tmr+0x14c>)
 8016f9e:	4413      	add	r3, r2
 8016fa0:	3304      	adds	r3, #4
 8016fa2:	4619      	mov	r1, r3
 8016fa4:	f000 fe6e 	bl	8017c84 <etharp_request>
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 8016fa8:	687b      	ldr	r3, [r7, #4]
 8016faa:	3301      	adds	r3, #1
 8016fac:	607b      	str	r3, [r7, #4]
 8016fae:	687b      	ldr	r3, [r7, #4]
 8016fb0:	2b09      	cmp	r3, #9
 8016fb2:	f77f af65 	ble.w	8016e80 <etharp_tmr+0xc>
      }
    }
  }
}
 8016fb6:	bf00      	nop
 8016fb8:	bf00      	nop
 8016fba:	3708      	adds	r7, #8
 8016fbc:	46bd      	mov	sp, r7
 8016fbe:	bd80      	pop	{r7, pc}
 8016fc0:	20007134 	.word	0x20007134

08016fc4 <etharp_find_entry>:
 * @return The ARP entry index that matched or is created, ERR_MEM if no
 * entry is found or could be recycled.
 */
static s16_t
etharp_find_entry(const ip4_addr_t *ipaddr, u8_t flags, struct netif *netif)
{
 8016fc4:	b580      	push	{r7, lr}
 8016fc6:	b08a      	sub	sp, #40	; 0x28
 8016fc8:	af00      	add	r7, sp, #0
 8016fca:	60f8      	str	r0, [r7, #12]
 8016fcc:	460b      	mov	r3, r1
 8016fce:	607a      	str	r2, [r7, #4]
 8016fd0:	72fb      	strb	r3, [r7, #11]
  s16_t old_pending = ARP_TABLE_SIZE, old_stable = ARP_TABLE_SIZE;
 8016fd2:	230a      	movs	r3, #10
 8016fd4:	84fb      	strh	r3, [r7, #38]	; 0x26
 8016fd6:	230a      	movs	r3, #10
 8016fd8:	84bb      	strh	r3, [r7, #36]	; 0x24
  s16_t empty = ARP_TABLE_SIZE;
 8016fda:	230a      	movs	r3, #10
 8016fdc:	847b      	strh	r3, [r7, #34]	; 0x22
  s16_t i = 0;
 8016fde:	2300      	movs	r3, #0
 8016fe0:	843b      	strh	r3, [r7, #32]
  /* oldest entry with packets on queue */
  s16_t old_queue = ARP_TABLE_SIZE;
 8016fe2:	230a      	movs	r3, #10
 8016fe4:	83fb      	strh	r3, [r7, #30]
  /* its age */
  u16_t age_queue = 0, age_pending = 0, age_stable = 0;
 8016fe6:	2300      	movs	r3, #0
 8016fe8:	83bb      	strh	r3, [r7, #28]
 8016fea:	2300      	movs	r3, #0
 8016fec:	837b      	strh	r3, [r7, #26]
 8016fee:	2300      	movs	r3, #0
 8016ff0:	833b      	strh	r3, [r7, #24]
   * 4) remember the oldest pending entry with queued packets (if any)
   * 5) search for a matching IP entry, either pending or stable
   *    until 5 matches, or all entries are searched for.
   */

  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 8016ff2:	2300      	movs	r3, #0
 8016ff4:	843b      	strh	r3, [r7, #32]
 8016ff6:	e0ae      	b.n	8017156 <etharp_find_entry+0x192>
    u8_t state = arp_table[i].state;
 8016ff8:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8016ffc:	49a6      	ldr	r1, [pc, #664]	; (8017298 <etharp_find_entry+0x2d4>)
 8016ffe:	4613      	mov	r3, r2
 8017000:	005b      	lsls	r3, r3, #1
 8017002:	4413      	add	r3, r2
 8017004:	00db      	lsls	r3, r3, #3
 8017006:	440b      	add	r3, r1
 8017008:	3314      	adds	r3, #20
 801700a:	781b      	ldrb	r3, [r3, #0]
 801700c:	75fb      	strb	r3, [r7, #23]
    /* no empty entry found yet and now we do find one? */
    if ((empty == ARP_TABLE_SIZE) && (state == ETHARP_STATE_EMPTY)) {
 801700e:	f9b7 3022 	ldrsh.w	r3, [r7, #34]	; 0x22
 8017012:	2b0a      	cmp	r3, #10
 8017014:	d105      	bne.n	8017022 <etharp_find_entry+0x5e>
 8017016:	7dfb      	ldrb	r3, [r7, #23]
 8017018:	2b00      	cmp	r3, #0
 801701a:	d102      	bne.n	8017022 <etharp_find_entry+0x5e>
      LWIP_DEBUGF(ETHARP_DEBUG, ("etharp_find_entry: found empty entry %d\n", (int)i));
      /* remember first empty entry */
      empty = i;
 801701c:	8c3b      	ldrh	r3, [r7, #32]
 801701e:	847b      	strh	r3, [r7, #34]	; 0x22
 8017020:	e095      	b.n	801714e <etharp_find_entry+0x18a>
    } else if (state != ETHARP_STATE_EMPTY) {
 8017022:	7dfb      	ldrb	r3, [r7, #23]
 8017024:	2b00      	cmp	r3, #0
 8017026:	f000 8092 	beq.w	801714e <etharp_find_entry+0x18a>
      LWIP_ASSERT("state == ETHARP_STATE_PENDING || state >= ETHARP_STATE_STABLE",
 801702a:	7dfb      	ldrb	r3, [r7, #23]
 801702c:	2b01      	cmp	r3, #1
 801702e:	d009      	beq.n	8017044 <etharp_find_entry+0x80>
 8017030:	7dfb      	ldrb	r3, [r7, #23]
 8017032:	2b01      	cmp	r3, #1
 8017034:	d806      	bhi.n	8017044 <etharp_find_entry+0x80>
 8017036:	4b99      	ldr	r3, [pc, #612]	; (801729c <etharp_find_entry+0x2d8>)
 8017038:	f240 1223 	movw	r2, #291	; 0x123
 801703c:	4998      	ldr	r1, [pc, #608]	; (80172a0 <etharp_find_entry+0x2dc>)
 801703e:	4899      	ldr	r0, [pc, #612]	; (80172a4 <etharp_find_entry+0x2e0>)
 8017040:	f002 ff0e 	bl	8019e60 <iprintf>
                  state == ETHARP_STATE_PENDING || state >= ETHARP_STATE_STABLE);
      /* if given, does IP address match IP address in ARP entry? */
      if (ipaddr && ip4_addr_cmp(ipaddr, &arp_table[i].ipaddr)
 8017044:	68fb      	ldr	r3, [r7, #12]
 8017046:	2b00      	cmp	r3, #0
 8017048:	d020      	beq.n	801708c <etharp_find_entry+0xc8>
 801704a:	68fb      	ldr	r3, [r7, #12]
 801704c:	6819      	ldr	r1, [r3, #0]
 801704e:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8017052:	4891      	ldr	r0, [pc, #580]	; (8017298 <etharp_find_entry+0x2d4>)
 8017054:	4613      	mov	r3, r2
 8017056:	005b      	lsls	r3, r3, #1
 8017058:	4413      	add	r3, r2
 801705a:	00db      	lsls	r3, r3, #3
 801705c:	4403      	add	r3, r0
 801705e:	3304      	adds	r3, #4
 8017060:	681b      	ldr	r3, [r3, #0]
 8017062:	4299      	cmp	r1, r3
 8017064:	d112      	bne.n	801708c <etharp_find_entry+0xc8>
#if ETHARP_TABLE_MATCH_NETIF
          && ((netif == NULL) || (netif == arp_table[i].netif))
 8017066:	687b      	ldr	r3, [r7, #4]
 8017068:	2b00      	cmp	r3, #0
 801706a:	d00c      	beq.n	8017086 <etharp_find_entry+0xc2>
 801706c:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8017070:	4989      	ldr	r1, [pc, #548]	; (8017298 <etharp_find_entry+0x2d4>)
 8017072:	4613      	mov	r3, r2
 8017074:	005b      	lsls	r3, r3, #1
 8017076:	4413      	add	r3, r2
 8017078:	00db      	lsls	r3, r3, #3
 801707a:	440b      	add	r3, r1
 801707c:	3308      	adds	r3, #8
 801707e:	681b      	ldr	r3, [r3, #0]
 8017080:	687a      	ldr	r2, [r7, #4]
 8017082:	429a      	cmp	r2, r3
 8017084:	d102      	bne.n	801708c <etharp_find_entry+0xc8>
#endif /* ETHARP_TABLE_MATCH_NETIF */
         ) {
        LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: found matching entry %d\n", (int)i));
        /* found exact IP address match, simply bail out */
        return i;
 8017086:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 801708a:	e100      	b.n	801728e <etharp_find_entry+0x2ca>
      }
      /* pending entry? */
      if (state == ETHARP_STATE_PENDING) {
 801708c:	7dfb      	ldrb	r3, [r7, #23]
 801708e:	2b01      	cmp	r3, #1
 8017090:	d140      	bne.n	8017114 <etharp_find_entry+0x150>
        /* pending with queued packets? */
        if (arp_table[i].q != NULL) {
 8017092:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8017096:	4980      	ldr	r1, [pc, #512]	; (8017298 <etharp_find_entry+0x2d4>)
 8017098:	4613      	mov	r3, r2
 801709a:	005b      	lsls	r3, r3, #1
 801709c:	4413      	add	r3, r2
 801709e:	00db      	lsls	r3, r3, #3
 80170a0:	440b      	add	r3, r1
 80170a2:	681b      	ldr	r3, [r3, #0]
 80170a4:	2b00      	cmp	r3, #0
 80170a6:	d01a      	beq.n	80170de <etharp_find_entry+0x11a>
          if (arp_table[i].ctime >= age_queue) {
 80170a8:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 80170ac:	497a      	ldr	r1, [pc, #488]	; (8017298 <etharp_find_entry+0x2d4>)
 80170ae:	4613      	mov	r3, r2
 80170b0:	005b      	lsls	r3, r3, #1
 80170b2:	4413      	add	r3, r2
 80170b4:	00db      	lsls	r3, r3, #3
 80170b6:	440b      	add	r3, r1
 80170b8:	3312      	adds	r3, #18
 80170ba:	881b      	ldrh	r3, [r3, #0]
 80170bc:	8bba      	ldrh	r2, [r7, #28]
 80170be:	429a      	cmp	r2, r3
 80170c0:	d845      	bhi.n	801714e <etharp_find_entry+0x18a>
            old_queue = i;
 80170c2:	8c3b      	ldrh	r3, [r7, #32]
 80170c4:	83fb      	strh	r3, [r7, #30]
            age_queue = arp_table[i].ctime;
 80170c6:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 80170ca:	4973      	ldr	r1, [pc, #460]	; (8017298 <etharp_find_entry+0x2d4>)
 80170cc:	4613      	mov	r3, r2
 80170ce:	005b      	lsls	r3, r3, #1
 80170d0:	4413      	add	r3, r2
 80170d2:	00db      	lsls	r3, r3, #3
 80170d4:	440b      	add	r3, r1
 80170d6:	3312      	adds	r3, #18
 80170d8:	881b      	ldrh	r3, [r3, #0]
 80170da:	83bb      	strh	r3, [r7, #28]
 80170dc:	e037      	b.n	801714e <etharp_find_entry+0x18a>
          }
        } else
          /* pending without queued packets? */
        {
          if (arp_table[i].ctime >= age_pending) {
 80170de:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 80170e2:	496d      	ldr	r1, [pc, #436]	; (8017298 <etharp_find_entry+0x2d4>)
 80170e4:	4613      	mov	r3, r2
 80170e6:	005b      	lsls	r3, r3, #1
 80170e8:	4413      	add	r3, r2
 80170ea:	00db      	lsls	r3, r3, #3
 80170ec:	440b      	add	r3, r1
 80170ee:	3312      	adds	r3, #18
 80170f0:	881b      	ldrh	r3, [r3, #0]
 80170f2:	8b7a      	ldrh	r2, [r7, #26]
 80170f4:	429a      	cmp	r2, r3
 80170f6:	d82a      	bhi.n	801714e <etharp_find_entry+0x18a>
            old_pending = i;
 80170f8:	8c3b      	ldrh	r3, [r7, #32]
 80170fa:	84fb      	strh	r3, [r7, #38]	; 0x26
            age_pending = arp_table[i].ctime;
 80170fc:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8017100:	4965      	ldr	r1, [pc, #404]	; (8017298 <etharp_find_entry+0x2d4>)
 8017102:	4613      	mov	r3, r2
 8017104:	005b      	lsls	r3, r3, #1
 8017106:	4413      	add	r3, r2
 8017108:	00db      	lsls	r3, r3, #3
 801710a:	440b      	add	r3, r1
 801710c:	3312      	adds	r3, #18
 801710e:	881b      	ldrh	r3, [r3, #0]
 8017110:	837b      	strh	r3, [r7, #26]
 8017112:	e01c      	b.n	801714e <etharp_find_entry+0x18a>
          }
        }
        /* stable entry? */
      } else if (state >= ETHARP_STATE_STABLE) {
 8017114:	7dfb      	ldrb	r3, [r7, #23]
 8017116:	2b01      	cmp	r3, #1
 8017118:	d919      	bls.n	801714e <etharp_find_entry+0x18a>
        /* don't record old_stable for static entries since they never expire */
        if (state < ETHARP_STATE_STATIC)
#endif /* ETHARP_SUPPORT_STATIC_ENTRIES */
        {
          /* remember entry with oldest stable entry in oldest, its age in maxtime */
          if (arp_table[i].ctime >= age_stable) {
 801711a:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 801711e:	495e      	ldr	r1, [pc, #376]	; (8017298 <etharp_find_entry+0x2d4>)
 8017120:	4613      	mov	r3, r2
 8017122:	005b      	lsls	r3, r3, #1
 8017124:	4413      	add	r3, r2
 8017126:	00db      	lsls	r3, r3, #3
 8017128:	440b      	add	r3, r1
 801712a:	3312      	adds	r3, #18
 801712c:	881b      	ldrh	r3, [r3, #0]
 801712e:	8b3a      	ldrh	r2, [r7, #24]
 8017130:	429a      	cmp	r2, r3
 8017132:	d80c      	bhi.n	801714e <etharp_find_entry+0x18a>
            old_stable = i;
 8017134:	8c3b      	ldrh	r3, [r7, #32]
 8017136:	84bb      	strh	r3, [r7, #36]	; 0x24
            age_stable = arp_table[i].ctime;
 8017138:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 801713c:	4956      	ldr	r1, [pc, #344]	; (8017298 <etharp_find_entry+0x2d4>)
 801713e:	4613      	mov	r3, r2
 8017140:	005b      	lsls	r3, r3, #1
 8017142:	4413      	add	r3, r2
 8017144:	00db      	lsls	r3, r3, #3
 8017146:	440b      	add	r3, r1
 8017148:	3312      	adds	r3, #18
 801714a:	881b      	ldrh	r3, [r3, #0]
 801714c:	833b      	strh	r3, [r7, #24]
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 801714e:	8c3b      	ldrh	r3, [r7, #32]
 8017150:	3301      	adds	r3, #1
 8017152:	b29b      	uxth	r3, r3
 8017154:	843b      	strh	r3, [r7, #32]
 8017156:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 801715a:	2b09      	cmp	r3, #9
 801715c:	f77f af4c 	ble.w	8016ff8 <etharp_find_entry+0x34>
    }
  }
  /* { we have no match } => try to create a new entry */

  /* don't create new entry, only search? */
  if (((flags & ETHARP_FLAG_FIND_ONLY) != 0) ||
 8017160:	7afb      	ldrb	r3, [r7, #11]
 8017162:	f003 0302 	and.w	r3, r3, #2
 8017166:	2b00      	cmp	r3, #0
 8017168:	d108      	bne.n	801717c <etharp_find_entry+0x1b8>
 801716a:	f9b7 3022 	ldrsh.w	r3, [r7, #34]	; 0x22
 801716e:	2b0a      	cmp	r3, #10
 8017170:	d107      	bne.n	8017182 <etharp_find_entry+0x1be>
      /* or no empty entry found and not allowed to recycle? */
      ((empty == ARP_TABLE_SIZE) && ((flags & ETHARP_FLAG_TRY_HARD) == 0))) {
 8017172:	7afb      	ldrb	r3, [r7, #11]
 8017174:	f003 0301 	and.w	r3, r3, #1
 8017178:	2b00      	cmp	r3, #0
 801717a:	d102      	bne.n	8017182 <etharp_find_entry+0x1be>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: no empty entry found and not allowed to recycle\n"));
    return (s16_t)ERR_MEM;
 801717c:	f04f 33ff 	mov.w	r3, #4294967295
 8017180:	e085      	b.n	801728e <etharp_find_entry+0x2ca>
   *
   * { ETHARP_FLAG_TRY_HARD is set at this point }
   */

  /* 1) empty entry available? */
  if (empty < ARP_TABLE_SIZE) {
 8017182:	f9b7 3022 	ldrsh.w	r3, [r7, #34]	; 0x22
 8017186:	2b09      	cmp	r3, #9
 8017188:	dc02      	bgt.n	8017190 <etharp_find_entry+0x1cc>
    i = empty;
 801718a:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 801718c:	843b      	strh	r3, [r7, #32]
 801718e:	e039      	b.n	8017204 <etharp_find_entry+0x240>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: selecting empty entry %d\n", (int)i));
  } else {
    /* 2) found recyclable stable entry? */
    if (old_stable < ARP_TABLE_SIZE) {
 8017190:	f9b7 3024 	ldrsh.w	r3, [r7, #36]	; 0x24
 8017194:	2b09      	cmp	r3, #9
 8017196:	dc14      	bgt.n	80171c2 <etharp_find_entry+0x1fe>
      /* recycle oldest stable*/
      i = old_stable;
 8017198:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 801719a:	843b      	strh	r3, [r7, #32]
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: selecting oldest stable entry %d\n", (int)i));
      /* no queued packets should exist on stable entries */
      LWIP_ASSERT("arp_table[i].q == NULL", arp_table[i].q == NULL);
 801719c:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 80171a0:	493d      	ldr	r1, [pc, #244]	; (8017298 <etharp_find_entry+0x2d4>)
 80171a2:	4613      	mov	r3, r2
 80171a4:	005b      	lsls	r3, r3, #1
 80171a6:	4413      	add	r3, r2
 80171a8:	00db      	lsls	r3, r3, #3
 80171aa:	440b      	add	r3, r1
 80171ac:	681b      	ldr	r3, [r3, #0]
 80171ae:	2b00      	cmp	r3, #0
 80171b0:	d018      	beq.n	80171e4 <etharp_find_entry+0x220>
 80171b2:	4b3a      	ldr	r3, [pc, #232]	; (801729c <etharp_find_entry+0x2d8>)
 80171b4:	f240 126d 	movw	r2, #365	; 0x16d
 80171b8:	493b      	ldr	r1, [pc, #236]	; (80172a8 <etharp_find_entry+0x2e4>)
 80171ba:	483a      	ldr	r0, [pc, #232]	; (80172a4 <etharp_find_entry+0x2e0>)
 80171bc:	f002 fe50 	bl	8019e60 <iprintf>
 80171c0:	e010      	b.n	80171e4 <etharp_find_entry+0x220>
      /* 3) found recyclable pending entry without queued packets? */
    } else if (old_pending < ARP_TABLE_SIZE) {
 80171c2:	f9b7 3026 	ldrsh.w	r3, [r7, #38]	; 0x26
 80171c6:	2b09      	cmp	r3, #9
 80171c8:	dc02      	bgt.n	80171d0 <etharp_find_entry+0x20c>
      /* recycle oldest pending */
      i = old_pending;
 80171ca:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 80171cc:	843b      	strh	r3, [r7, #32]
 80171ce:	e009      	b.n	80171e4 <etharp_find_entry+0x220>
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: selecting oldest pending entry %d (without queue)\n", (int)i));
      /* 4) found recyclable pending entry with queued packets? */
    } else if (old_queue < ARP_TABLE_SIZE) {
 80171d0:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
 80171d4:	2b09      	cmp	r3, #9
 80171d6:	dc02      	bgt.n	80171de <etharp_find_entry+0x21a>
      /* recycle oldest pending (queued packets are free in etharp_free_entry) */
      i = old_queue;
 80171d8:	8bfb      	ldrh	r3, [r7, #30]
 80171da:	843b      	strh	r3, [r7, #32]
 80171dc:	e002      	b.n	80171e4 <etharp_find_entry+0x220>
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: selecting oldest pending entry %d, freeing packet queue %p\n", (int)i, (void *)(arp_table[i].q)));
      /* no empty or recyclable entries found */
    } else {
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: no empty or recyclable entries found\n"));
      return (s16_t)ERR_MEM;
 80171de:	f04f 33ff 	mov.w	r3, #4294967295
 80171e2:	e054      	b.n	801728e <etharp_find_entry+0x2ca>
    }

    /* { empty or recyclable entry found } */
    LWIP_ASSERT("i < ARP_TABLE_SIZE", i < ARP_TABLE_SIZE);
 80171e4:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 80171e8:	2b09      	cmp	r3, #9
 80171ea:	dd06      	ble.n	80171fa <etharp_find_entry+0x236>
 80171ec:	4b2b      	ldr	r3, [pc, #172]	; (801729c <etharp_find_entry+0x2d8>)
 80171ee:	f240 127f 	movw	r2, #383	; 0x17f
 80171f2:	492e      	ldr	r1, [pc, #184]	; (80172ac <etharp_find_entry+0x2e8>)
 80171f4:	482b      	ldr	r0, [pc, #172]	; (80172a4 <etharp_find_entry+0x2e0>)
 80171f6:	f002 fe33 	bl	8019e60 <iprintf>
    etharp_free_entry(i);
 80171fa:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 80171fe:	4618      	mov	r0, r3
 8017200:	f7ff fe06 	bl	8016e10 <etharp_free_entry>
  }

  LWIP_ASSERT("i < ARP_TABLE_SIZE", i < ARP_TABLE_SIZE);
 8017204:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 8017208:	2b09      	cmp	r3, #9
 801720a:	dd06      	ble.n	801721a <etharp_find_entry+0x256>
 801720c:	4b23      	ldr	r3, [pc, #140]	; (801729c <etharp_find_entry+0x2d8>)
 801720e:	f240 1283 	movw	r2, #387	; 0x183
 8017212:	4926      	ldr	r1, [pc, #152]	; (80172ac <etharp_find_entry+0x2e8>)
 8017214:	4823      	ldr	r0, [pc, #140]	; (80172a4 <etharp_find_entry+0x2e0>)
 8017216:	f002 fe23 	bl	8019e60 <iprintf>
  LWIP_ASSERT("arp_table[i].state == ETHARP_STATE_EMPTY",
 801721a:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 801721e:	491e      	ldr	r1, [pc, #120]	; (8017298 <etharp_find_entry+0x2d4>)
 8017220:	4613      	mov	r3, r2
 8017222:	005b      	lsls	r3, r3, #1
 8017224:	4413      	add	r3, r2
 8017226:	00db      	lsls	r3, r3, #3
 8017228:	440b      	add	r3, r1
 801722a:	3314      	adds	r3, #20
 801722c:	781b      	ldrb	r3, [r3, #0]
 801722e:	2b00      	cmp	r3, #0
 8017230:	d006      	beq.n	8017240 <etharp_find_entry+0x27c>
 8017232:	4b1a      	ldr	r3, [pc, #104]	; (801729c <etharp_find_entry+0x2d8>)
 8017234:	f44f 72c2 	mov.w	r2, #388	; 0x184
 8017238:	491d      	ldr	r1, [pc, #116]	; (80172b0 <etharp_find_entry+0x2ec>)
 801723a:	481a      	ldr	r0, [pc, #104]	; (80172a4 <etharp_find_entry+0x2e0>)
 801723c:	f002 fe10 	bl	8019e60 <iprintf>
              arp_table[i].state == ETHARP_STATE_EMPTY);

  /* IP address given? */
  if (ipaddr != NULL) {
 8017240:	68fb      	ldr	r3, [r7, #12]
 8017242:	2b00      	cmp	r3, #0
 8017244:	d00b      	beq.n	801725e <etharp_find_entry+0x29a>
    /* set IP address */
    ip4_addr_copy(arp_table[i].ipaddr, *ipaddr);
 8017246:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 801724a:	68fb      	ldr	r3, [r7, #12]
 801724c:	6819      	ldr	r1, [r3, #0]
 801724e:	4812      	ldr	r0, [pc, #72]	; (8017298 <etharp_find_entry+0x2d4>)
 8017250:	4613      	mov	r3, r2
 8017252:	005b      	lsls	r3, r3, #1
 8017254:	4413      	add	r3, r2
 8017256:	00db      	lsls	r3, r3, #3
 8017258:	4403      	add	r3, r0
 801725a:	3304      	adds	r3, #4
 801725c:	6019      	str	r1, [r3, #0]
  }
  arp_table[i].ctime = 0;
 801725e:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8017262:	490d      	ldr	r1, [pc, #52]	; (8017298 <etharp_find_entry+0x2d4>)
 8017264:	4613      	mov	r3, r2
 8017266:	005b      	lsls	r3, r3, #1
 8017268:	4413      	add	r3, r2
 801726a:	00db      	lsls	r3, r3, #3
 801726c:	440b      	add	r3, r1
 801726e:	3312      	adds	r3, #18
 8017270:	2200      	movs	r2, #0
 8017272:	801a      	strh	r2, [r3, #0]
#if ETHARP_TABLE_MATCH_NETIF
  arp_table[i].netif = netif;
 8017274:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8017278:	4907      	ldr	r1, [pc, #28]	; (8017298 <etharp_find_entry+0x2d4>)
 801727a:	4613      	mov	r3, r2
 801727c:	005b      	lsls	r3, r3, #1
 801727e:	4413      	add	r3, r2
 8017280:	00db      	lsls	r3, r3, #3
 8017282:	440b      	add	r3, r1
 8017284:	3308      	adds	r3, #8
 8017286:	687a      	ldr	r2, [r7, #4]
 8017288:	601a      	str	r2, [r3, #0]
#endif /* ETHARP_TABLE_MATCH_NETIF */
  return (s16_t)i;
 801728a:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
}
 801728e:	4618      	mov	r0, r3
 8017290:	3728      	adds	r7, #40	; 0x28
 8017292:	46bd      	mov	sp, r7
 8017294:	bd80      	pop	{r7, pc}
 8017296:	bf00      	nop
 8017298:	20007134 	.word	0x20007134
 801729c:	0801ecd4 	.word	0x0801ecd4
 80172a0:	0801ed0c 	.word	0x0801ed0c
 80172a4:	0801ed4c 	.word	0x0801ed4c
 80172a8:	0801ed74 	.word	0x0801ed74
 80172ac:	0801ed8c 	.word	0x0801ed8c
 80172b0:	0801eda0 	.word	0x0801eda0

080172b4 <etharp_update_arp_entry>:
 *
 * @see pbuf_free()
 */
static err_t
etharp_update_arp_entry(struct netif *netif, const ip4_addr_t *ipaddr, struct eth_addr *ethaddr, u8_t flags)
{
 80172b4:	b580      	push	{r7, lr}
 80172b6:	b088      	sub	sp, #32
 80172b8:	af02      	add	r7, sp, #8
 80172ba:	60f8      	str	r0, [r7, #12]
 80172bc:	60b9      	str	r1, [r7, #8]
 80172be:	607a      	str	r2, [r7, #4]
 80172c0:	70fb      	strb	r3, [r7, #3]
  s16_t i;
  LWIP_ASSERT("netif->hwaddr_len == ETH_HWADDR_LEN", netif->hwaddr_len == ETH_HWADDR_LEN);
 80172c2:	68fb      	ldr	r3, [r7, #12]
 80172c4:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 80172c8:	2b06      	cmp	r3, #6
 80172ca:	d006      	beq.n	80172da <etharp_update_arp_entry+0x26>
 80172cc:	4b48      	ldr	r3, [pc, #288]	; (80173f0 <etharp_update_arp_entry+0x13c>)
 80172ce:	f240 12a9 	movw	r2, #425	; 0x1a9
 80172d2:	4948      	ldr	r1, [pc, #288]	; (80173f4 <etharp_update_arp_entry+0x140>)
 80172d4:	4848      	ldr	r0, [pc, #288]	; (80173f8 <etharp_update_arp_entry+0x144>)
 80172d6:	f002 fdc3 	bl	8019e60 <iprintf>
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_update_arp_entry: %"U16_F".%"U16_F".%"U16_F".%"U16_F" - %02"X16_F":%02"X16_F":%02"X16_F":%02"X16_F":%02"X16_F":%02"X16_F"\n",
              ip4_addr1_16(ipaddr), ip4_addr2_16(ipaddr), ip4_addr3_16(ipaddr), ip4_addr4_16(ipaddr),
              (u16_t)ethaddr->addr[0], (u16_t)ethaddr->addr[1], (u16_t)ethaddr->addr[2],
              (u16_t)ethaddr->addr[3], (u16_t)ethaddr->addr[4], (u16_t)ethaddr->addr[5]));
  /* non-unicast address? */
  if (ip4_addr_isany(ipaddr) ||
 80172da:	68bb      	ldr	r3, [r7, #8]
 80172dc:	2b00      	cmp	r3, #0
 80172de:	d012      	beq.n	8017306 <etharp_update_arp_entry+0x52>
 80172e0:	68bb      	ldr	r3, [r7, #8]
 80172e2:	681b      	ldr	r3, [r3, #0]
 80172e4:	2b00      	cmp	r3, #0
 80172e6:	d00e      	beq.n	8017306 <etharp_update_arp_entry+0x52>
      ip4_addr_isbroadcast(ipaddr, netif) ||
 80172e8:	68bb      	ldr	r3, [r7, #8]
 80172ea:	681b      	ldr	r3, [r3, #0]
 80172ec:	68f9      	ldr	r1, [r7, #12]
 80172ee:	4618      	mov	r0, r3
 80172f0:	f001 f924 	bl	801853c <ip4_addr_isbroadcast_u32>
 80172f4:	4603      	mov	r3, r0
  if (ip4_addr_isany(ipaddr) ||
 80172f6:	2b00      	cmp	r3, #0
 80172f8:	d105      	bne.n	8017306 <etharp_update_arp_entry+0x52>
      ip4_addr_ismulticast(ipaddr)) {
 80172fa:	68bb      	ldr	r3, [r7, #8]
 80172fc:	681b      	ldr	r3, [r3, #0]
 80172fe:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
      ip4_addr_isbroadcast(ipaddr, netif) ||
 8017302:	2be0      	cmp	r3, #224	; 0xe0
 8017304:	d102      	bne.n	801730c <etharp_update_arp_entry+0x58>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_update_arp_entry: will not add non-unicast IP address to ARP cache\n"));
    return ERR_ARG;
 8017306:	f06f 030f 	mvn.w	r3, #15
 801730a:	e06c      	b.n	80173e6 <etharp_update_arp_entry+0x132>
  }
  /* find or create ARP entry */
  i = etharp_find_entry(ipaddr, flags, netif);
 801730c:	78fb      	ldrb	r3, [r7, #3]
 801730e:	68fa      	ldr	r2, [r7, #12]
 8017310:	4619      	mov	r1, r3
 8017312:	68b8      	ldr	r0, [r7, #8]
 8017314:	f7ff fe56 	bl	8016fc4 <etharp_find_entry>
 8017318:	4603      	mov	r3, r0
 801731a:	82fb      	strh	r3, [r7, #22]
  /* bail out if no entry could be found */
  if (i < 0) {
 801731c:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 8017320:	2b00      	cmp	r3, #0
 8017322:	da02      	bge.n	801732a <etharp_update_arp_entry+0x76>
    return (err_t)i;
 8017324:	8afb      	ldrh	r3, [r7, #22]
 8017326:	b25b      	sxtb	r3, r3
 8017328:	e05d      	b.n	80173e6 <etharp_update_arp_entry+0x132>
    return ERR_VAL;
  } else
#endif /* ETHARP_SUPPORT_STATIC_ENTRIES */
  {
    /* mark it stable */
    arp_table[i].state = ETHARP_STATE_STABLE;
 801732a:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 801732e:	4933      	ldr	r1, [pc, #204]	; (80173fc <etharp_update_arp_entry+0x148>)
 8017330:	4613      	mov	r3, r2
 8017332:	005b      	lsls	r3, r3, #1
 8017334:	4413      	add	r3, r2
 8017336:	00db      	lsls	r3, r3, #3
 8017338:	440b      	add	r3, r1
 801733a:	3314      	adds	r3, #20
 801733c:	2202      	movs	r2, #2
 801733e:	701a      	strb	r2, [r3, #0]
  }

  /* record network interface */
  arp_table[i].netif = netif;
 8017340:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 8017344:	492d      	ldr	r1, [pc, #180]	; (80173fc <etharp_update_arp_entry+0x148>)
 8017346:	4613      	mov	r3, r2
 8017348:	005b      	lsls	r3, r3, #1
 801734a:	4413      	add	r3, r2
 801734c:	00db      	lsls	r3, r3, #3
 801734e:	440b      	add	r3, r1
 8017350:	3308      	adds	r3, #8
 8017352:	68fa      	ldr	r2, [r7, #12]
 8017354:	601a      	str	r2, [r3, #0]
  /* insert in SNMP ARP index tree */
  mib2_add_arp_entry(netif, &arp_table[i].ipaddr);

  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_update_arp_entry: updating stable entry %"S16_F"\n", i));
  /* update address */
  SMEMCPY(&arp_table[i].ethaddr, ethaddr, ETH_HWADDR_LEN);
 8017356:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 801735a:	4613      	mov	r3, r2
 801735c:	005b      	lsls	r3, r3, #1
 801735e:	4413      	add	r3, r2
 8017360:	00db      	lsls	r3, r3, #3
 8017362:	3308      	adds	r3, #8
 8017364:	4a25      	ldr	r2, [pc, #148]	; (80173fc <etharp_update_arp_entry+0x148>)
 8017366:	4413      	add	r3, r2
 8017368:	3304      	adds	r3, #4
 801736a:	2206      	movs	r2, #6
 801736c:	6879      	ldr	r1, [r7, #4]
 801736e:	4618      	mov	r0, r3
 8017370:	f002 ff45 	bl	801a1fe <memcpy>
  /* reset time stamp */
  arp_table[i].ctime = 0;
 8017374:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 8017378:	4920      	ldr	r1, [pc, #128]	; (80173fc <etharp_update_arp_entry+0x148>)
 801737a:	4613      	mov	r3, r2
 801737c:	005b      	lsls	r3, r3, #1
 801737e:	4413      	add	r3, r2
 8017380:	00db      	lsls	r3, r3, #3
 8017382:	440b      	add	r3, r1
 8017384:	3312      	adds	r3, #18
 8017386:	2200      	movs	r2, #0
 8017388:	801a      	strh	r2, [r3, #0]
    /* get the packet pointer */
    p = q->p;
    /* now queue entry can be freed */
    memp_free(MEMP_ARP_QUEUE, q);
#else /* ARP_QUEUEING */
  if (arp_table[i].q != NULL) {
 801738a:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 801738e:	491b      	ldr	r1, [pc, #108]	; (80173fc <etharp_update_arp_entry+0x148>)
 8017390:	4613      	mov	r3, r2
 8017392:	005b      	lsls	r3, r3, #1
 8017394:	4413      	add	r3, r2
 8017396:	00db      	lsls	r3, r3, #3
 8017398:	440b      	add	r3, r1
 801739a:	681b      	ldr	r3, [r3, #0]
 801739c:	2b00      	cmp	r3, #0
 801739e:	d021      	beq.n	80173e4 <etharp_update_arp_entry+0x130>
    struct pbuf *p = arp_table[i].q;
 80173a0:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 80173a4:	4915      	ldr	r1, [pc, #84]	; (80173fc <etharp_update_arp_entry+0x148>)
 80173a6:	4613      	mov	r3, r2
 80173a8:	005b      	lsls	r3, r3, #1
 80173aa:	4413      	add	r3, r2
 80173ac:	00db      	lsls	r3, r3, #3
 80173ae:	440b      	add	r3, r1
 80173b0:	681b      	ldr	r3, [r3, #0]
 80173b2:	613b      	str	r3, [r7, #16]
    arp_table[i].q = NULL;
 80173b4:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 80173b8:	4910      	ldr	r1, [pc, #64]	; (80173fc <etharp_update_arp_entry+0x148>)
 80173ba:	4613      	mov	r3, r2
 80173bc:	005b      	lsls	r3, r3, #1
 80173be:	4413      	add	r3, r2
 80173c0:	00db      	lsls	r3, r3, #3
 80173c2:	440b      	add	r3, r1
 80173c4:	2200      	movs	r2, #0
 80173c6:	601a      	str	r2, [r3, #0]
#endif /* ARP_QUEUEING */
    /* send the queued IP packet */
    ethernet_output(netif, p, (struct eth_addr *)(netif->hwaddr), ethaddr, ETHTYPE_IP);
 80173c8:	68fb      	ldr	r3, [r7, #12]
 80173ca:	f103 0226 	add.w	r2, r3, #38	; 0x26
 80173ce:	f44f 6300 	mov.w	r3, #2048	; 0x800
 80173d2:	9300      	str	r3, [sp, #0]
 80173d4:	687b      	ldr	r3, [r7, #4]
 80173d6:	6939      	ldr	r1, [r7, #16]
 80173d8:	68f8      	ldr	r0, [r7, #12]
 80173da:	f001 ffbd 	bl	8019358 <ethernet_output>
    /* free the queued IP packet */
    pbuf_free(p);
 80173de:	6938      	ldr	r0, [r7, #16]
 80173e0:	f7f9 fe66 	bl	80110b0 <pbuf_free>
  }
  return ERR_OK;
 80173e4:	2300      	movs	r3, #0
}
 80173e6:	4618      	mov	r0, r3
 80173e8:	3718      	adds	r7, #24
 80173ea:	46bd      	mov	sp, r7
 80173ec:	bd80      	pop	{r7, pc}
 80173ee:	bf00      	nop
 80173f0:	0801ecd4 	.word	0x0801ecd4
 80173f4:	0801edcc 	.word	0x0801edcc
 80173f8:	0801ed4c 	.word	0x0801ed4c
 80173fc:	20007134 	.word	0x20007134

08017400 <etharp_cleanup_netif>:
 *
 * @param netif points to a network interface
 */
void
etharp_cleanup_netif(struct netif *netif)
{
 8017400:	b580      	push	{r7, lr}
 8017402:	b084      	sub	sp, #16
 8017404:	af00      	add	r7, sp, #0
 8017406:	6078      	str	r0, [r7, #4]
  int i;

  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 8017408:	2300      	movs	r3, #0
 801740a:	60fb      	str	r3, [r7, #12]
 801740c:	e01e      	b.n	801744c <etharp_cleanup_netif+0x4c>
    u8_t state = arp_table[i].state;
 801740e:	4913      	ldr	r1, [pc, #76]	; (801745c <etharp_cleanup_netif+0x5c>)
 8017410:	68fa      	ldr	r2, [r7, #12]
 8017412:	4613      	mov	r3, r2
 8017414:	005b      	lsls	r3, r3, #1
 8017416:	4413      	add	r3, r2
 8017418:	00db      	lsls	r3, r3, #3
 801741a:	440b      	add	r3, r1
 801741c:	3314      	adds	r3, #20
 801741e:	781b      	ldrb	r3, [r3, #0]
 8017420:	72fb      	strb	r3, [r7, #11]
    if ((state != ETHARP_STATE_EMPTY) && (arp_table[i].netif == netif)) {
 8017422:	7afb      	ldrb	r3, [r7, #11]
 8017424:	2b00      	cmp	r3, #0
 8017426:	d00e      	beq.n	8017446 <etharp_cleanup_netif+0x46>
 8017428:	490c      	ldr	r1, [pc, #48]	; (801745c <etharp_cleanup_netif+0x5c>)
 801742a:	68fa      	ldr	r2, [r7, #12]
 801742c:	4613      	mov	r3, r2
 801742e:	005b      	lsls	r3, r3, #1
 8017430:	4413      	add	r3, r2
 8017432:	00db      	lsls	r3, r3, #3
 8017434:	440b      	add	r3, r1
 8017436:	3308      	adds	r3, #8
 8017438:	681b      	ldr	r3, [r3, #0]
 801743a:	687a      	ldr	r2, [r7, #4]
 801743c:	429a      	cmp	r2, r3
 801743e:	d102      	bne.n	8017446 <etharp_cleanup_netif+0x46>
      etharp_free_entry(i);
 8017440:	68f8      	ldr	r0, [r7, #12]
 8017442:	f7ff fce5 	bl	8016e10 <etharp_free_entry>
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 8017446:	68fb      	ldr	r3, [r7, #12]
 8017448:	3301      	adds	r3, #1
 801744a:	60fb      	str	r3, [r7, #12]
 801744c:	68fb      	ldr	r3, [r7, #12]
 801744e:	2b09      	cmp	r3, #9
 8017450:	dddd      	ble.n	801740e <etharp_cleanup_netif+0xe>
    }
  }
}
 8017452:	bf00      	nop
 8017454:	bf00      	nop
 8017456:	3710      	adds	r7, #16
 8017458:	46bd      	mov	sp, r7
 801745a:	bd80      	pop	{r7, pc}
 801745c:	20007134 	.word	0x20007134

08017460 <etharp_input>:
 *
 * @see pbuf_free()
 */
void
etharp_input(struct pbuf *p, struct netif *netif)
{
 8017460:	b5b0      	push	{r4, r5, r7, lr}
 8017462:	b08a      	sub	sp, #40	; 0x28
 8017464:	af04      	add	r7, sp, #16
 8017466:	6078      	str	r0, [r7, #4]
 8017468:	6039      	str	r1, [r7, #0]
  ip4_addr_t sipaddr, dipaddr;
  u8_t for_us;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("netif != NULL", (netif != NULL), return;);
 801746a:	683b      	ldr	r3, [r7, #0]
 801746c:	2b00      	cmp	r3, #0
 801746e:	d107      	bne.n	8017480 <etharp_input+0x20>
 8017470:	4b3d      	ldr	r3, [pc, #244]	; (8017568 <etharp_input+0x108>)
 8017472:	f240 228a 	movw	r2, #650	; 0x28a
 8017476:	493d      	ldr	r1, [pc, #244]	; (801756c <etharp_input+0x10c>)
 8017478:	483d      	ldr	r0, [pc, #244]	; (8017570 <etharp_input+0x110>)
 801747a:	f002 fcf1 	bl	8019e60 <iprintf>
 801747e:	e06f      	b.n	8017560 <etharp_input+0x100>

  hdr = (struct etharp_hdr *)p->payload;
 8017480:	687b      	ldr	r3, [r7, #4]
 8017482:	685b      	ldr	r3, [r3, #4]
 8017484:	613b      	str	r3, [r7, #16]

  /* RFC 826 "Packet Reception": */
  if ((hdr->hwtype != PP_HTONS(LWIP_IANA_HWTYPE_ETHERNET)) ||
 8017486:	693b      	ldr	r3, [r7, #16]
 8017488:	881b      	ldrh	r3, [r3, #0]
 801748a:	b29b      	uxth	r3, r3
 801748c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8017490:	d10c      	bne.n	80174ac <etharp_input+0x4c>
      (hdr->hwlen != ETH_HWADDR_LEN) ||
 8017492:	693b      	ldr	r3, [r7, #16]
 8017494:	791b      	ldrb	r3, [r3, #4]
  if ((hdr->hwtype != PP_HTONS(LWIP_IANA_HWTYPE_ETHERNET)) ||
 8017496:	2b06      	cmp	r3, #6
 8017498:	d108      	bne.n	80174ac <etharp_input+0x4c>
      (hdr->protolen != sizeof(ip4_addr_t)) ||
 801749a:	693b      	ldr	r3, [r7, #16]
 801749c:	795b      	ldrb	r3, [r3, #5]
      (hdr->hwlen != ETH_HWADDR_LEN) ||
 801749e:	2b04      	cmp	r3, #4
 80174a0:	d104      	bne.n	80174ac <etharp_input+0x4c>
      (hdr->proto != PP_HTONS(ETHTYPE_IP)))  {
 80174a2:	693b      	ldr	r3, [r7, #16]
 80174a4:	885b      	ldrh	r3, [r3, #2]
 80174a6:	b29b      	uxth	r3, r3
      (hdr->protolen != sizeof(ip4_addr_t)) ||
 80174a8:	2b08      	cmp	r3, #8
 80174aa:	d003      	beq.n	80174b4 <etharp_input+0x54>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_WARNING,
                ("etharp_input: packet dropped, wrong hw type, hwlen, proto, protolen or ethernet type (%"U16_F"/%"U16_F"/%"U16_F"/%"U16_F")\n",
                 hdr->hwtype, (u16_t)hdr->hwlen, hdr->proto, (u16_t)hdr->protolen));
    ETHARP_STATS_INC(etharp.proterr);
    ETHARP_STATS_INC(etharp.drop);
    pbuf_free(p);
 80174ac:	6878      	ldr	r0, [r7, #4]
 80174ae:	f7f9 fdff 	bl	80110b0 <pbuf_free>
    return;
 80174b2:	e055      	b.n	8017560 <etharp_input+0x100>
  autoip_arp_reply(netif, hdr);
#endif /* LWIP_AUTOIP */

  /* Copy struct ip4_addr_wordaligned to aligned ip4_addr, to support compilers without
   * structure packing (not using structure copy which breaks strict-aliasing rules). */
  IPADDR_WORDALIGNED_COPY_TO_IP4_ADDR_T(&sipaddr, &hdr->sipaddr);
 80174b4:	693b      	ldr	r3, [r7, #16]
 80174b6:	330e      	adds	r3, #14
 80174b8:	681b      	ldr	r3, [r3, #0]
 80174ba:	60fb      	str	r3, [r7, #12]
  IPADDR_WORDALIGNED_COPY_TO_IP4_ADDR_T(&dipaddr, &hdr->dipaddr);
 80174bc:	693b      	ldr	r3, [r7, #16]
 80174be:	3318      	adds	r3, #24
 80174c0:	681b      	ldr	r3, [r3, #0]
 80174c2:	60bb      	str	r3, [r7, #8]

  /* this interface is not configured? */
  if (ip4_addr_isany_val(*netif_ip4_addr(netif))) {
 80174c4:	683b      	ldr	r3, [r7, #0]
 80174c6:	3304      	adds	r3, #4
 80174c8:	681b      	ldr	r3, [r3, #0]
 80174ca:	2b00      	cmp	r3, #0
 80174cc:	d102      	bne.n	80174d4 <etharp_input+0x74>
    for_us = 0;
 80174ce:	2300      	movs	r3, #0
 80174d0:	75fb      	strb	r3, [r7, #23]
 80174d2:	e009      	b.n	80174e8 <etharp_input+0x88>
  } else {
    /* ARP packet directed to us? */
    for_us = (u8_t)ip4_addr_cmp(&dipaddr, netif_ip4_addr(netif));
 80174d4:	68ba      	ldr	r2, [r7, #8]
 80174d6:	683b      	ldr	r3, [r7, #0]
 80174d8:	3304      	adds	r3, #4
 80174da:	681b      	ldr	r3, [r3, #0]
 80174dc:	429a      	cmp	r2, r3
 80174de:	bf0c      	ite	eq
 80174e0:	2301      	moveq	r3, #1
 80174e2:	2300      	movne	r3, #0
 80174e4:	b2db      	uxtb	r3, r3
 80174e6:	75fb      	strb	r3, [r7, #23]
  /* ARP message directed to us?
      -> add IP address in ARP cache; assume requester wants to talk to us,
         can result in directly sending the queued packets for this host.
     ARP message not directed to us?
      ->  update the source IP address in the cache, if present */
  etharp_update_arp_entry(netif, &sipaddr, &(hdr->shwaddr),
 80174e8:	693b      	ldr	r3, [r7, #16]
 80174ea:	f103 0208 	add.w	r2, r3, #8
 80174ee:	7dfb      	ldrb	r3, [r7, #23]
 80174f0:	2b00      	cmp	r3, #0
 80174f2:	d001      	beq.n	80174f8 <etharp_input+0x98>
 80174f4:	2301      	movs	r3, #1
 80174f6:	e000      	b.n	80174fa <etharp_input+0x9a>
 80174f8:	2302      	movs	r3, #2
 80174fa:	f107 010c 	add.w	r1, r7, #12
 80174fe:	6838      	ldr	r0, [r7, #0]
 8017500:	f7ff fed8 	bl	80172b4 <etharp_update_arp_entry>
                          for_us ? ETHARP_FLAG_TRY_HARD : ETHARP_FLAG_FIND_ONLY);

  /* now act on the message itself */
  switch (hdr->opcode) {
 8017504:	693b      	ldr	r3, [r7, #16]
 8017506:	88db      	ldrh	r3, [r3, #6]
 8017508:	b29b      	uxth	r3, r3
 801750a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 801750e:	d003      	beq.n	8017518 <etharp_input+0xb8>
 8017510:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8017514:	d01e      	beq.n	8017554 <etharp_input+0xf4>
#endif /* (LWIP_DHCP && DHCP_DOES_ARP_CHECK) */
      break;
    default:
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_input: ARP unknown opcode type %"S16_F"\n", lwip_htons(hdr->opcode)));
      ETHARP_STATS_INC(etharp.err);
      break;
 8017516:	e020      	b.n	801755a <etharp_input+0xfa>
      if (for_us) {
 8017518:	7dfb      	ldrb	r3, [r7, #23]
 801751a:	2b00      	cmp	r3, #0
 801751c:	d01c      	beq.n	8017558 <etharp_input+0xf8>
                   (struct eth_addr *)netif->hwaddr, &hdr->shwaddr,
 801751e:	683b      	ldr	r3, [r7, #0]
 8017520:	f103 0026 	add.w	r0, r3, #38	; 0x26
 8017524:	693b      	ldr	r3, [r7, #16]
 8017526:	f103 0408 	add.w	r4, r3, #8
                   (struct eth_addr *)netif->hwaddr, netif_ip4_addr(netif),
 801752a:	683b      	ldr	r3, [r7, #0]
 801752c:	f103 0526 	add.w	r5, r3, #38	; 0x26
 8017530:	683b      	ldr	r3, [r7, #0]
 8017532:	3304      	adds	r3, #4
                   &hdr->shwaddr, &sipaddr,
 8017534:	693a      	ldr	r2, [r7, #16]
 8017536:	3208      	adds	r2, #8
        etharp_raw(netif,
 8017538:	2102      	movs	r1, #2
 801753a:	9103      	str	r1, [sp, #12]
 801753c:	f107 010c 	add.w	r1, r7, #12
 8017540:	9102      	str	r1, [sp, #8]
 8017542:	9201      	str	r2, [sp, #4]
 8017544:	9300      	str	r3, [sp, #0]
 8017546:	462b      	mov	r3, r5
 8017548:	4622      	mov	r2, r4
 801754a:	4601      	mov	r1, r0
 801754c:	6838      	ldr	r0, [r7, #0]
 801754e:	f000 faeb 	bl	8017b28 <etharp_raw>
      break;
 8017552:	e001      	b.n	8017558 <etharp_input+0xf8>
      break;
 8017554:	bf00      	nop
 8017556:	e000      	b.n	801755a <etharp_input+0xfa>
      break;
 8017558:	bf00      	nop
  }
  /* free ARP packet */
  pbuf_free(p);
 801755a:	6878      	ldr	r0, [r7, #4]
 801755c:	f7f9 fda8 	bl	80110b0 <pbuf_free>
}
 8017560:	3718      	adds	r7, #24
 8017562:	46bd      	mov	sp, r7
 8017564:	bdb0      	pop	{r4, r5, r7, pc}
 8017566:	bf00      	nop
 8017568:	0801ecd4 	.word	0x0801ecd4
 801756c:	0801ee24 	.word	0x0801ee24
 8017570:	0801ed4c 	.word	0x0801ed4c

08017574 <etharp_output_to_arp_index>:
/** Just a small helper function that sends a pbuf to an ethernet address
 * in the arp_table specified by the index 'arp_idx'.
 */
static err_t
etharp_output_to_arp_index(struct netif *netif, struct pbuf *q, netif_addr_idx_t arp_idx)
{
 8017574:	b580      	push	{r7, lr}
 8017576:	b086      	sub	sp, #24
 8017578:	af02      	add	r7, sp, #8
 801757a:	60f8      	str	r0, [r7, #12]
 801757c:	60b9      	str	r1, [r7, #8]
 801757e:	4613      	mov	r3, r2
 8017580:	71fb      	strb	r3, [r7, #7]
  LWIP_ASSERT("arp_table[arp_idx].state >= ETHARP_STATE_STABLE",
 8017582:	79fa      	ldrb	r2, [r7, #7]
 8017584:	4944      	ldr	r1, [pc, #272]	; (8017698 <etharp_output_to_arp_index+0x124>)
 8017586:	4613      	mov	r3, r2
 8017588:	005b      	lsls	r3, r3, #1
 801758a:	4413      	add	r3, r2
 801758c:	00db      	lsls	r3, r3, #3
 801758e:	440b      	add	r3, r1
 8017590:	3314      	adds	r3, #20
 8017592:	781b      	ldrb	r3, [r3, #0]
 8017594:	2b01      	cmp	r3, #1
 8017596:	d806      	bhi.n	80175a6 <etharp_output_to_arp_index+0x32>
 8017598:	4b40      	ldr	r3, [pc, #256]	; (801769c <etharp_output_to_arp_index+0x128>)
 801759a:	f240 22ee 	movw	r2, #750	; 0x2ee
 801759e:	4940      	ldr	r1, [pc, #256]	; (80176a0 <etharp_output_to_arp_index+0x12c>)
 80175a0:	4840      	ldr	r0, [pc, #256]	; (80176a4 <etharp_output_to_arp_index+0x130>)
 80175a2:	f002 fc5d 	bl	8019e60 <iprintf>
              arp_table[arp_idx].state >= ETHARP_STATE_STABLE);
  /* if arp table entry is about to expire: re-request it,
     but only if its state is ETHARP_STATE_STABLE to prevent flooding the
     network with ARP requests if this address is used frequently. */
  if (arp_table[arp_idx].state == ETHARP_STATE_STABLE) {
 80175a6:	79fa      	ldrb	r2, [r7, #7]
 80175a8:	493b      	ldr	r1, [pc, #236]	; (8017698 <etharp_output_to_arp_index+0x124>)
 80175aa:	4613      	mov	r3, r2
 80175ac:	005b      	lsls	r3, r3, #1
 80175ae:	4413      	add	r3, r2
 80175b0:	00db      	lsls	r3, r3, #3
 80175b2:	440b      	add	r3, r1
 80175b4:	3314      	adds	r3, #20
 80175b6:	781b      	ldrb	r3, [r3, #0]
 80175b8:	2b02      	cmp	r3, #2
 80175ba:	d153      	bne.n	8017664 <etharp_output_to_arp_index+0xf0>
    if (arp_table[arp_idx].ctime >= ARP_AGE_REREQUEST_USED_BROADCAST) {
 80175bc:	79fa      	ldrb	r2, [r7, #7]
 80175be:	4936      	ldr	r1, [pc, #216]	; (8017698 <etharp_output_to_arp_index+0x124>)
 80175c0:	4613      	mov	r3, r2
 80175c2:	005b      	lsls	r3, r3, #1
 80175c4:	4413      	add	r3, r2
 80175c6:	00db      	lsls	r3, r3, #3
 80175c8:	440b      	add	r3, r1
 80175ca:	3312      	adds	r3, #18
 80175cc:	881b      	ldrh	r3, [r3, #0]
 80175ce:	f5b3 7f8e 	cmp.w	r3, #284	; 0x11c
 80175d2:	d919      	bls.n	8017608 <etharp_output_to_arp_index+0x94>
      /* issue a standard request using broadcast */
      if (etharp_request(netif, &arp_table[arp_idx].ipaddr) == ERR_OK) {
 80175d4:	79fa      	ldrb	r2, [r7, #7]
 80175d6:	4613      	mov	r3, r2
 80175d8:	005b      	lsls	r3, r3, #1
 80175da:	4413      	add	r3, r2
 80175dc:	00db      	lsls	r3, r3, #3
 80175de:	4a2e      	ldr	r2, [pc, #184]	; (8017698 <etharp_output_to_arp_index+0x124>)
 80175e0:	4413      	add	r3, r2
 80175e2:	3304      	adds	r3, #4
 80175e4:	4619      	mov	r1, r3
 80175e6:	68f8      	ldr	r0, [r7, #12]
 80175e8:	f000 fb4c 	bl	8017c84 <etharp_request>
 80175ec:	4603      	mov	r3, r0
 80175ee:	2b00      	cmp	r3, #0
 80175f0:	d138      	bne.n	8017664 <etharp_output_to_arp_index+0xf0>
        arp_table[arp_idx].state = ETHARP_STATE_STABLE_REREQUESTING_1;
 80175f2:	79fa      	ldrb	r2, [r7, #7]
 80175f4:	4928      	ldr	r1, [pc, #160]	; (8017698 <etharp_output_to_arp_index+0x124>)
 80175f6:	4613      	mov	r3, r2
 80175f8:	005b      	lsls	r3, r3, #1
 80175fa:	4413      	add	r3, r2
 80175fc:	00db      	lsls	r3, r3, #3
 80175fe:	440b      	add	r3, r1
 8017600:	3314      	adds	r3, #20
 8017602:	2203      	movs	r2, #3
 8017604:	701a      	strb	r2, [r3, #0]
 8017606:	e02d      	b.n	8017664 <etharp_output_to_arp_index+0xf0>
      }
    } else if (arp_table[arp_idx].ctime >= ARP_AGE_REREQUEST_USED_UNICAST) {
 8017608:	79fa      	ldrb	r2, [r7, #7]
 801760a:	4923      	ldr	r1, [pc, #140]	; (8017698 <etharp_output_to_arp_index+0x124>)
 801760c:	4613      	mov	r3, r2
 801760e:	005b      	lsls	r3, r3, #1
 8017610:	4413      	add	r3, r2
 8017612:	00db      	lsls	r3, r3, #3
 8017614:	440b      	add	r3, r1
 8017616:	3312      	adds	r3, #18
 8017618:	881b      	ldrh	r3, [r3, #0]
 801761a:	f5b3 7f87 	cmp.w	r3, #270	; 0x10e
 801761e:	d321      	bcc.n	8017664 <etharp_output_to_arp_index+0xf0>
      /* issue a unicast request (for 15 seconds) to prevent unnecessary broadcast */
      if (etharp_request_dst(netif, &arp_table[arp_idx].ipaddr, &arp_table[arp_idx].ethaddr) == ERR_OK) {
 8017620:	79fa      	ldrb	r2, [r7, #7]
 8017622:	4613      	mov	r3, r2
 8017624:	005b      	lsls	r3, r3, #1
 8017626:	4413      	add	r3, r2
 8017628:	00db      	lsls	r3, r3, #3
 801762a:	4a1b      	ldr	r2, [pc, #108]	; (8017698 <etharp_output_to_arp_index+0x124>)
 801762c:	4413      	add	r3, r2
 801762e:	1d19      	adds	r1, r3, #4
 8017630:	79fa      	ldrb	r2, [r7, #7]
 8017632:	4613      	mov	r3, r2
 8017634:	005b      	lsls	r3, r3, #1
 8017636:	4413      	add	r3, r2
 8017638:	00db      	lsls	r3, r3, #3
 801763a:	3308      	adds	r3, #8
 801763c:	4a16      	ldr	r2, [pc, #88]	; (8017698 <etharp_output_to_arp_index+0x124>)
 801763e:	4413      	add	r3, r2
 8017640:	3304      	adds	r3, #4
 8017642:	461a      	mov	r2, r3
 8017644:	68f8      	ldr	r0, [r7, #12]
 8017646:	f000 fafb 	bl	8017c40 <etharp_request_dst>
 801764a:	4603      	mov	r3, r0
 801764c:	2b00      	cmp	r3, #0
 801764e:	d109      	bne.n	8017664 <etharp_output_to_arp_index+0xf0>
        arp_table[arp_idx].state = ETHARP_STATE_STABLE_REREQUESTING_1;
 8017650:	79fa      	ldrb	r2, [r7, #7]
 8017652:	4911      	ldr	r1, [pc, #68]	; (8017698 <etharp_output_to_arp_index+0x124>)
 8017654:	4613      	mov	r3, r2
 8017656:	005b      	lsls	r3, r3, #1
 8017658:	4413      	add	r3, r2
 801765a:	00db      	lsls	r3, r3, #3
 801765c:	440b      	add	r3, r1
 801765e:	3314      	adds	r3, #20
 8017660:	2203      	movs	r2, #3
 8017662:	701a      	strb	r2, [r3, #0]
      }
    }
  }

  return ethernet_output(netif, q, (struct eth_addr *)(netif->hwaddr), &arp_table[arp_idx].ethaddr, ETHTYPE_IP);
 8017664:	68fb      	ldr	r3, [r7, #12]
 8017666:	f103 0126 	add.w	r1, r3, #38	; 0x26
 801766a:	79fa      	ldrb	r2, [r7, #7]
 801766c:	4613      	mov	r3, r2
 801766e:	005b      	lsls	r3, r3, #1
 8017670:	4413      	add	r3, r2
 8017672:	00db      	lsls	r3, r3, #3
 8017674:	3308      	adds	r3, #8
 8017676:	4a08      	ldr	r2, [pc, #32]	; (8017698 <etharp_output_to_arp_index+0x124>)
 8017678:	4413      	add	r3, r2
 801767a:	3304      	adds	r3, #4
 801767c:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8017680:	9200      	str	r2, [sp, #0]
 8017682:	460a      	mov	r2, r1
 8017684:	68b9      	ldr	r1, [r7, #8]
 8017686:	68f8      	ldr	r0, [r7, #12]
 8017688:	f001 fe66 	bl	8019358 <ethernet_output>
 801768c:	4603      	mov	r3, r0
}
 801768e:	4618      	mov	r0, r3
 8017690:	3710      	adds	r7, #16
 8017692:	46bd      	mov	sp, r7
 8017694:	bd80      	pop	{r7, pc}
 8017696:	bf00      	nop
 8017698:	20007134 	.word	0x20007134
 801769c:	0801ecd4 	.word	0x0801ecd4
 80176a0:	0801ee44 	.word	0x0801ee44
 80176a4:	0801ed4c 	.word	0x0801ed4c

080176a8 <etharp_output>:
 * - ERR_RTE No route to destination (no gateway to external networks),
 * or the return type of either etharp_query() or ethernet_output().
 */
err_t
etharp_output(struct netif *netif, struct pbuf *q, const ip4_addr_t *ipaddr)
{
 80176a8:	b580      	push	{r7, lr}
 80176aa:	b08a      	sub	sp, #40	; 0x28
 80176ac:	af02      	add	r7, sp, #8
 80176ae:	60f8      	str	r0, [r7, #12]
 80176b0:	60b9      	str	r1, [r7, #8]
 80176b2:	607a      	str	r2, [r7, #4]
  const struct eth_addr *dest;
  struct eth_addr mcastaddr;
  const ip4_addr_t *dst_addr = ipaddr;
 80176b4:	687b      	ldr	r3, [r7, #4]
 80176b6:	61bb      	str	r3, [r7, #24]

  LWIP_ASSERT_CORE_LOCKED();
  LWIP_ASSERT("netif != NULL", netif != NULL);
 80176b8:	68fb      	ldr	r3, [r7, #12]
 80176ba:	2b00      	cmp	r3, #0
 80176bc:	d106      	bne.n	80176cc <etharp_output+0x24>
 80176be:	4b73      	ldr	r3, [pc, #460]	; (801788c <etharp_output+0x1e4>)
 80176c0:	f240 321e 	movw	r2, #798	; 0x31e
 80176c4:	4972      	ldr	r1, [pc, #456]	; (8017890 <etharp_output+0x1e8>)
 80176c6:	4873      	ldr	r0, [pc, #460]	; (8017894 <etharp_output+0x1ec>)
 80176c8:	f002 fbca 	bl	8019e60 <iprintf>
  LWIP_ASSERT("q != NULL", q != NULL);
 80176cc:	68bb      	ldr	r3, [r7, #8]
 80176ce:	2b00      	cmp	r3, #0
 80176d0:	d106      	bne.n	80176e0 <etharp_output+0x38>
 80176d2:	4b6e      	ldr	r3, [pc, #440]	; (801788c <etharp_output+0x1e4>)
 80176d4:	f240 321f 	movw	r2, #799	; 0x31f
 80176d8:	496f      	ldr	r1, [pc, #444]	; (8017898 <etharp_output+0x1f0>)
 80176da:	486e      	ldr	r0, [pc, #440]	; (8017894 <etharp_output+0x1ec>)
 80176dc:	f002 fbc0 	bl	8019e60 <iprintf>
  LWIP_ASSERT("ipaddr != NULL", ipaddr != NULL);
 80176e0:	687b      	ldr	r3, [r7, #4]
 80176e2:	2b00      	cmp	r3, #0
 80176e4:	d106      	bne.n	80176f4 <etharp_output+0x4c>
 80176e6:	4b69      	ldr	r3, [pc, #420]	; (801788c <etharp_output+0x1e4>)
 80176e8:	f44f 7248 	mov.w	r2, #800	; 0x320
 80176ec:	496b      	ldr	r1, [pc, #428]	; (801789c <etharp_output+0x1f4>)
 80176ee:	4869      	ldr	r0, [pc, #420]	; (8017894 <etharp_output+0x1ec>)
 80176f0:	f002 fbb6 	bl	8019e60 <iprintf>

  /* Determine on destination hardware address. Broadcasts and multicasts
   * are special, other IP addresses are looked up in the ARP table. */

  /* broadcast destination IP address? */
  if (ip4_addr_isbroadcast(ipaddr, netif)) {
 80176f4:	687b      	ldr	r3, [r7, #4]
 80176f6:	681b      	ldr	r3, [r3, #0]
 80176f8:	68f9      	ldr	r1, [r7, #12]
 80176fa:	4618      	mov	r0, r3
 80176fc:	f000 ff1e 	bl	801853c <ip4_addr_isbroadcast_u32>
 8017700:	4603      	mov	r3, r0
 8017702:	2b00      	cmp	r3, #0
 8017704:	d002      	beq.n	801770c <etharp_output+0x64>
    /* broadcast on Ethernet also */
    dest = (const struct eth_addr *)&ethbroadcast;
 8017706:	4b66      	ldr	r3, [pc, #408]	; (80178a0 <etharp_output+0x1f8>)
 8017708:	61fb      	str	r3, [r7, #28]
 801770a:	e0af      	b.n	801786c <etharp_output+0x1c4>
    /* multicast destination IP address? */
  } else if (ip4_addr_ismulticast(ipaddr)) {
 801770c:	687b      	ldr	r3, [r7, #4]
 801770e:	681b      	ldr	r3, [r3, #0]
 8017710:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8017714:	2be0      	cmp	r3, #224	; 0xe0
 8017716:	d118      	bne.n	801774a <etharp_output+0xa2>
    /* Hash IP multicast address to MAC address.*/
    mcastaddr.addr[0] = LL_IP4_MULTICAST_ADDR_0;
 8017718:	2301      	movs	r3, #1
 801771a:	743b      	strb	r3, [r7, #16]
    mcastaddr.addr[1] = LL_IP4_MULTICAST_ADDR_1;
 801771c:	2300      	movs	r3, #0
 801771e:	747b      	strb	r3, [r7, #17]
    mcastaddr.addr[2] = LL_IP4_MULTICAST_ADDR_2;
 8017720:	235e      	movs	r3, #94	; 0x5e
 8017722:	74bb      	strb	r3, [r7, #18]
    mcastaddr.addr[3] = ip4_addr2(ipaddr) & 0x7f;
 8017724:	687b      	ldr	r3, [r7, #4]
 8017726:	3301      	adds	r3, #1
 8017728:	781b      	ldrb	r3, [r3, #0]
 801772a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 801772e:	b2db      	uxtb	r3, r3
 8017730:	74fb      	strb	r3, [r7, #19]
    mcastaddr.addr[4] = ip4_addr3(ipaddr);
 8017732:	687b      	ldr	r3, [r7, #4]
 8017734:	3302      	adds	r3, #2
 8017736:	781b      	ldrb	r3, [r3, #0]
 8017738:	753b      	strb	r3, [r7, #20]
    mcastaddr.addr[5] = ip4_addr4(ipaddr);
 801773a:	687b      	ldr	r3, [r7, #4]
 801773c:	3303      	adds	r3, #3
 801773e:	781b      	ldrb	r3, [r3, #0]
 8017740:	757b      	strb	r3, [r7, #21]
    /* destination Ethernet address is multicast */
    dest = &mcastaddr;
 8017742:	f107 0310 	add.w	r3, r7, #16
 8017746:	61fb      	str	r3, [r7, #28]
 8017748:	e090      	b.n	801786c <etharp_output+0x1c4>
    /* unicast destination IP address? */
  } else {
    netif_addr_idx_t i;
    /* outside local network? if so, this can neither be a global broadcast nor
       a subnet broadcast. */
    if (!ip4_addr_netcmp(ipaddr, netif_ip4_addr(netif), netif_ip4_netmask(netif)) &&
 801774a:	687b      	ldr	r3, [r7, #4]
 801774c:	681a      	ldr	r2, [r3, #0]
 801774e:	68fb      	ldr	r3, [r7, #12]
 8017750:	3304      	adds	r3, #4
 8017752:	681b      	ldr	r3, [r3, #0]
 8017754:	405a      	eors	r2, r3
 8017756:	68fb      	ldr	r3, [r7, #12]
 8017758:	3308      	adds	r3, #8
 801775a:	681b      	ldr	r3, [r3, #0]
 801775c:	4013      	ands	r3, r2
 801775e:	2b00      	cmp	r3, #0
 8017760:	d012      	beq.n	8017788 <etharp_output+0xe0>
        !ip4_addr_islinklocal(ipaddr)) {
 8017762:	687b      	ldr	r3, [r7, #4]
 8017764:	681b      	ldr	r3, [r3, #0]
 8017766:	b29b      	uxth	r3, r3
    if (!ip4_addr_netcmp(ipaddr, netif_ip4_addr(netif), netif_ip4_netmask(netif)) &&
 8017768:	f64f 62a9 	movw	r2, #65193	; 0xfea9
 801776c:	4293      	cmp	r3, r2
 801776e:	d00b      	beq.n	8017788 <etharp_output+0xe0>
        dst_addr = LWIP_HOOK_ETHARP_GET_GW(netif, ipaddr);
        if (dst_addr == NULL)
#endif /* LWIP_HOOK_ETHARP_GET_GW */
        {
          /* interface has default gateway? */
          if (!ip4_addr_isany_val(*netif_ip4_gw(netif))) {
 8017770:	68fb      	ldr	r3, [r7, #12]
 8017772:	330c      	adds	r3, #12
 8017774:	681b      	ldr	r3, [r3, #0]
 8017776:	2b00      	cmp	r3, #0
 8017778:	d003      	beq.n	8017782 <etharp_output+0xda>
            /* send to hardware address of default gateway IP address */
            dst_addr = netif_ip4_gw(netif);
 801777a:	68fb      	ldr	r3, [r7, #12]
 801777c:	330c      	adds	r3, #12
 801777e:	61bb      	str	r3, [r7, #24]
 8017780:	e002      	b.n	8017788 <etharp_output+0xe0>
            /* no default gateway available */
          } else {
            /* no route to destination error (default gateway missing) */
            return ERR_RTE;
 8017782:	f06f 0303 	mvn.w	r3, #3
 8017786:	e07d      	b.n	8017884 <etharp_output+0x1dc>
    if (netif->hints != NULL) {
      /* per-pcb cached entry was given */
      netif_addr_idx_t etharp_cached_entry = netif->hints->addr_hint;
      if (etharp_cached_entry < ARP_TABLE_SIZE) {
#endif /* LWIP_NETIF_HWADDRHINT */
        if ((arp_table[etharp_cached_entry].state >= ETHARP_STATE_STABLE) &&
 8017788:	4b46      	ldr	r3, [pc, #280]	; (80178a4 <etharp_output+0x1fc>)
 801778a:	781b      	ldrb	r3, [r3, #0]
 801778c:	4619      	mov	r1, r3
 801778e:	4a46      	ldr	r2, [pc, #280]	; (80178a8 <etharp_output+0x200>)
 8017790:	460b      	mov	r3, r1
 8017792:	005b      	lsls	r3, r3, #1
 8017794:	440b      	add	r3, r1
 8017796:	00db      	lsls	r3, r3, #3
 8017798:	4413      	add	r3, r2
 801779a:	3314      	adds	r3, #20
 801779c:	781b      	ldrb	r3, [r3, #0]
 801779e:	2b01      	cmp	r3, #1
 80177a0:	d925      	bls.n	80177ee <etharp_output+0x146>
#if ETHARP_TABLE_MATCH_NETIF
            (arp_table[etharp_cached_entry].netif == netif) &&
 80177a2:	4b40      	ldr	r3, [pc, #256]	; (80178a4 <etharp_output+0x1fc>)
 80177a4:	781b      	ldrb	r3, [r3, #0]
 80177a6:	4619      	mov	r1, r3
 80177a8:	4a3f      	ldr	r2, [pc, #252]	; (80178a8 <etharp_output+0x200>)
 80177aa:	460b      	mov	r3, r1
 80177ac:	005b      	lsls	r3, r3, #1
 80177ae:	440b      	add	r3, r1
 80177b0:	00db      	lsls	r3, r3, #3
 80177b2:	4413      	add	r3, r2
 80177b4:	3308      	adds	r3, #8
 80177b6:	681b      	ldr	r3, [r3, #0]
        if ((arp_table[etharp_cached_entry].state >= ETHARP_STATE_STABLE) &&
 80177b8:	68fa      	ldr	r2, [r7, #12]
 80177ba:	429a      	cmp	r2, r3
 80177bc:	d117      	bne.n	80177ee <etharp_output+0x146>
#endif
            (ip4_addr_cmp(dst_addr, &arp_table[etharp_cached_entry].ipaddr))) {
 80177be:	69bb      	ldr	r3, [r7, #24]
 80177c0:	681a      	ldr	r2, [r3, #0]
 80177c2:	4b38      	ldr	r3, [pc, #224]	; (80178a4 <etharp_output+0x1fc>)
 80177c4:	781b      	ldrb	r3, [r3, #0]
 80177c6:	4618      	mov	r0, r3
 80177c8:	4937      	ldr	r1, [pc, #220]	; (80178a8 <etharp_output+0x200>)
 80177ca:	4603      	mov	r3, r0
 80177cc:	005b      	lsls	r3, r3, #1
 80177ce:	4403      	add	r3, r0
 80177d0:	00db      	lsls	r3, r3, #3
 80177d2:	440b      	add	r3, r1
 80177d4:	3304      	adds	r3, #4
 80177d6:	681b      	ldr	r3, [r3, #0]
            (arp_table[etharp_cached_entry].netif == netif) &&
 80177d8:	429a      	cmp	r2, r3
 80177da:	d108      	bne.n	80177ee <etharp_output+0x146>
          /* the per-pcb-cached entry is stable and the right one! */
          ETHARP_STATS_INC(etharp.cachehit);
          return etharp_output_to_arp_index(netif, q, etharp_cached_entry);
 80177dc:	4b31      	ldr	r3, [pc, #196]	; (80178a4 <etharp_output+0x1fc>)
 80177de:	781b      	ldrb	r3, [r3, #0]
 80177e0:	461a      	mov	r2, r3
 80177e2:	68b9      	ldr	r1, [r7, #8]
 80177e4:	68f8      	ldr	r0, [r7, #12]
 80177e6:	f7ff fec5 	bl	8017574 <etharp_output_to_arp_index>
 80177ea:	4603      	mov	r3, r0
 80177ec:	e04a      	b.n	8017884 <etharp_output+0x1dc>
    }
#endif /* LWIP_NETIF_HWADDRHINT */

    /* find stable entry: do this here since this is a critical path for
       throughput and etharp_find_entry() is kind of slow */
    for (i = 0; i < ARP_TABLE_SIZE; i++) {
 80177ee:	2300      	movs	r3, #0
 80177f0:	75fb      	strb	r3, [r7, #23]
 80177f2:	e031      	b.n	8017858 <etharp_output+0x1b0>
      if ((arp_table[i].state >= ETHARP_STATE_STABLE) &&
 80177f4:	7dfa      	ldrb	r2, [r7, #23]
 80177f6:	492c      	ldr	r1, [pc, #176]	; (80178a8 <etharp_output+0x200>)
 80177f8:	4613      	mov	r3, r2
 80177fa:	005b      	lsls	r3, r3, #1
 80177fc:	4413      	add	r3, r2
 80177fe:	00db      	lsls	r3, r3, #3
 8017800:	440b      	add	r3, r1
 8017802:	3314      	adds	r3, #20
 8017804:	781b      	ldrb	r3, [r3, #0]
 8017806:	2b01      	cmp	r3, #1
 8017808:	d923      	bls.n	8017852 <etharp_output+0x1aa>
#if ETHARP_TABLE_MATCH_NETIF
          (arp_table[i].netif == netif) &&
 801780a:	7dfa      	ldrb	r2, [r7, #23]
 801780c:	4926      	ldr	r1, [pc, #152]	; (80178a8 <etharp_output+0x200>)
 801780e:	4613      	mov	r3, r2
 8017810:	005b      	lsls	r3, r3, #1
 8017812:	4413      	add	r3, r2
 8017814:	00db      	lsls	r3, r3, #3
 8017816:	440b      	add	r3, r1
 8017818:	3308      	adds	r3, #8
 801781a:	681b      	ldr	r3, [r3, #0]
      if ((arp_table[i].state >= ETHARP_STATE_STABLE) &&
 801781c:	68fa      	ldr	r2, [r7, #12]
 801781e:	429a      	cmp	r2, r3
 8017820:	d117      	bne.n	8017852 <etharp_output+0x1aa>
#endif
          (ip4_addr_cmp(dst_addr, &arp_table[i].ipaddr))) {
 8017822:	69bb      	ldr	r3, [r7, #24]
 8017824:	6819      	ldr	r1, [r3, #0]
 8017826:	7dfa      	ldrb	r2, [r7, #23]
 8017828:	481f      	ldr	r0, [pc, #124]	; (80178a8 <etharp_output+0x200>)
 801782a:	4613      	mov	r3, r2
 801782c:	005b      	lsls	r3, r3, #1
 801782e:	4413      	add	r3, r2
 8017830:	00db      	lsls	r3, r3, #3
 8017832:	4403      	add	r3, r0
 8017834:	3304      	adds	r3, #4
 8017836:	681b      	ldr	r3, [r3, #0]
          (arp_table[i].netif == netif) &&
 8017838:	4299      	cmp	r1, r3
 801783a:	d10a      	bne.n	8017852 <etharp_output+0x1aa>
        /* found an existing, stable entry */
        ETHARP_SET_ADDRHINT(netif, i);
 801783c:	4a19      	ldr	r2, [pc, #100]	; (80178a4 <etharp_output+0x1fc>)
 801783e:	7dfb      	ldrb	r3, [r7, #23]
 8017840:	7013      	strb	r3, [r2, #0]
        return etharp_output_to_arp_index(netif, q, i);
 8017842:	7dfb      	ldrb	r3, [r7, #23]
 8017844:	461a      	mov	r2, r3
 8017846:	68b9      	ldr	r1, [r7, #8]
 8017848:	68f8      	ldr	r0, [r7, #12]
 801784a:	f7ff fe93 	bl	8017574 <etharp_output_to_arp_index>
 801784e:	4603      	mov	r3, r0
 8017850:	e018      	b.n	8017884 <etharp_output+0x1dc>
    for (i = 0; i < ARP_TABLE_SIZE; i++) {
 8017852:	7dfb      	ldrb	r3, [r7, #23]
 8017854:	3301      	adds	r3, #1
 8017856:	75fb      	strb	r3, [r7, #23]
 8017858:	7dfb      	ldrb	r3, [r7, #23]
 801785a:	2b09      	cmp	r3, #9
 801785c:	d9ca      	bls.n	80177f4 <etharp_output+0x14c>
      }
    }
    /* no stable entry found, use the (slower) query function:
       queue on destination Ethernet address belonging to ipaddr */
    return etharp_query(netif, dst_addr, q);
 801785e:	68ba      	ldr	r2, [r7, #8]
 8017860:	69b9      	ldr	r1, [r7, #24]
 8017862:	68f8      	ldr	r0, [r7, #12]
 8017864:	f000 f822 	bl	80178ac <etharp_query>
 8017868:	4603      	mov	r3, r0
 801786a:	e00b      	b.n	8017884 <etharp_output+0x1dc>
  }

  /* continuation for multicast/broadcast destinations */
  /* obtain source Ethernet address of the given interface */
  /* send packet directly on the link */
  return ethernet_output(netif, q, (struct eth_addr *)(netif->hwaddr), dest, ETHTYPE_IP);
 801786c:	68fb      	ldr	r3, [r7, #12]
 801786e:	f103 0226 	add.w	r2, r3, #38	; 0x26
 8017872:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8017876:	9300      	str	r3, [sp, #0]
 8017878:	69fb      	ldr	r3, [r7, #28]
 801787a:	68b9      	ldr	r1, [r7, #8]
 801787c:	68f8      	ldr	r0, [r7, #12]
 801787e:	f001 fd6b 	bl	8019358 <ethernet_output>
 8017882:	4603      	mov	r3, r0
}
 8017884:	4618      	mov	r0, r3
 8017886:	3720      	adds	r7, #32
 8017888:	46bd      	mov	sp, r7
 801788a:	bd80      	pop	{r7, pc}
 801788c:	0801ecd4 	.word	0x0801ecd4
 8017890:	0801ee24 	.word	0x0801ee24
 8017894:	0801ed4c 	.word	0x0801ed4c
 8017898:	0801ee74 	.word	0x0801ee74
 801789c:	0801ee14 	.word	0x0801ee14
 80178a0:	0801f4d0 	.word	0x0801f4d0
 80178a4:	20007224 	.word	0x20007224
 80178a8:	20007134 	.word	0x20007134

080178ac <etharp_query>:
 * - ERR_ARG Non-unicast address given, those will not appear in ARP cache.
 *
 */
err_t
etharp_query(struct netif *netif, const ip4_addr_t *ipaddr, struct pbuf *q)
{
 80178ac:	b580      	push	{r7, lr}
 80178ae:	b08c      	sub	sp, #48	; 0x30
 80178b0:	af02      	add	r7, sp, #8
 80178b2:	60f8      	str	r0, [r7, #12]
 80178b4:	60b9      	str	r1, [r7, #8]
 80178b6:	607a      	str	r2, [r7, #4]
  struct eth_addr *srcaddr = (struct eth_addr *)netif->hwaddr;
 80178b8:	68fb      	ldr	r3, [r7, #12]
 80178ba:	3326      	adds	r3, #38	; 0x26
 80178bc:	617b      	str	r3, [r7, #20]
  err_t result = ERR_MEM;
 80178be:	23ff      	movs	r3, #255	; 0xff
 80178c0:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  int is_new_entry = 0;
 80178c4:	2300      	movs	r3, #0
 80178c6:	623b      	str	r3, [r7, #32]
  s16_t i_err;
  netif_addr_idx_t i;

  /* non-unicast address? */
  if (ip4_addr_isbroadcast(ipaddr, netif) ||
 80178c8:	68bb      	ldr	r3, [r7, #8]
 80178ca:	681b      	ldr	r3, [r3, #0]
 80178cc:	68f9      	ldr	r1, [r7, #12]
 80178ce:	4618      	mov	r0, r3
 80178d0:	f000 fe34 	bl	801853c <ip4_addr_isbroadcast_u32>
 80178d4:	4603      	mov	r3, r0
 80178d6:	2b00      	cmp	r3, #0
 80178d8:	d10c      	bne.n	80178f4 <etharp_query+0x48>
      ip4_addr_ismulticast(ipaddr) ||
 80178da:	68bb      	ldr	r3, [r7, #8]
 80178dc:	681b      	ldr	r3, [r3, #0]
 80178de:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
  if (ip4_addr_isbroadcast(ipaddr, netif) ||
 80178e2:	2be0      	cmp	r3, #224	; 0xe0
 80178e4:	d006      	beq.n	80178f4 <etharp_query+0x48>
      ip4_addr_ismulticast(ipaddr) ||
 80178e6:	68bb      	ldr	r3, [r7, #8]
 80178e8:	2b00      	cmp	r3, #0
 80178ea:	d003      	beq.n	80178f4 <etharp_query+0x48>
      ip4_addr_isany(ipaddr)) {
 80178ec:	68bb      	ldr	r3, [r7, #8]
 80178ee:	681b      	ldr	r3, [r3, #0]
 80178f0:	2b00      	cmp	r3, #0
 80178f2:	d102      	bne.n	80178fa <etharp_query+0x4e>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: will not add non-unicast IP address to ARP cache\n"));
    return ERR_ARG;
 80178f4:	f06f 030f 	mvn.w	r3, #15
 80178f8:	e101      	b.n	8017afe <etharp_query+0x252>
  }

  /* find entry in ARP cache, ask to create entry if queueing packet */
  i_err = etharp_find_entry(ipaddr, ETHARP_FLAG_TRY_HARD, netif);
 80178fa:	68fa      	ldr	r2, [r7, #12]
 80178fc:	2101      	movs	r1, #1
 80178fe:	68b8      	ldr	r0, [r7, #8]
 8017900:	f7ff fb60 	bl	8016fc4 <etharp_find_entry>
 8017904:	4603      	mov	r3, r0
 8017906:	827b      	strh	r3, [r7, #18]

  /* could not find or create entry? */
  if (i_err < 0) {
 8017908:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 801790c:	2b00      	cmp	r3, #0
 801790e:	da02      	bge.n	8017916 <etharp_query+0x6a>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: could not create ARP entry\n"));
    if (q) {
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: packet dropped\n"));
      ETHARP_STATS_INC(etharp.memerr);
    }
    return (err_t)i_err;
 8017910:	8a7b      	ldrh	r3, [r7, #18]
 8017912:	b25b      	sxtb	r3, r3
 8017914:	e0f3      	b.n	8017afe <etharp_query+0x252>
  }
  LWIP_ASSERT("type overflow", (size_t)i_err < NETIF_ADDR_IDX_MAX);
 8017916:	8a7b      	ldrh	r3, [r7, #18]
 8017918:	2b7e      	cmp	r3, #126	; 0x7e
 801791a:	d906      	bls.n	801792a <etharp_query+0x7e>
 801791c:	4b7a      	ldr	r3, [pc, #488]	; (8017b08 <etharp_query+0x25c>)
 801791e:	f240 32c1 	movw	r2, #961	; 0x3c1
 8017922:	497a      	ldr	r1, [pc, #488]	; (8017b0c <etharp_query+0x260>)
 8017924:	487a      	ldr	r0, [pc, #488]	; (8017b10 <etharp_query+0x264>)
 8017926:	f002 fa9b 	bl	8019e60 <iprintf>
  i = (netif_addr_idx_t)i_err;
 801792a:	8a7b      	ldrh	r3, [r7, #18]
 801792c:	747b      	strb	r3, [r7, #17]

  /* mark a fresh entry as pending (we just sent a request) */
  if (arp_table[i].state == ETHARP_STATE_EMPTY) {
 801792e:	7c7a      	ldrb	r2, [r7, #17]
 8017930:	4978      	ldr	r1, [pc, #480]	; (8017b14 <etharp_query+0x268>)
 8017932:	4613      	mov	r3, r2
 8017934:	005b      	lsls	r3, r3, #1
 8017936:	4413      	add	r3, r2
 8017938:	00db      	lsls	r3, r3, #3
 801793a:	440b      	add	r3, r1
 801793c:	3314      	adds	r3, #20
 801793e:	781b      	ldrb	r3, [r3, #0]
 8017940:	2b00      	cmp	r3, #0
 8017942:	d115      	bne.n	8017970 <etharp_query+0xc4>
    is_new_entry = 1;
 8017944:	2301      	movs	r3, #1
 8017946:	623b      	str	r3, [r7, #32]
    arp_table[i].state = ETHARP_STATE_PENDING;
 8017948:	7c7a      	ldrb	r2, [r7, #17]
 801794a:	4972      	ldr	r1, [pc, #456]	; (8017b14 <etharp_query+0x268>)
 801794c:	4613      	mov	r3, r2
 801794e:	005b      	lsls	r3, r3, #1
 8017950:	4413      	add	r3, r2
 8017952:	00db      	lsls	r3, r3, #3
 8017954:	440b      	add	r3, r1
 8017956:	3314      	adds	r3, #20
 8017958:	2201      	movs	r2, #1
 801795a:	701a      	strb	r2, [r3, #0]
    /* record network interface for re-sending arp request in etharp_tmr */
    arp_table[i].netif = netif;
 801795c:	7c7a      	ldrb	r2, [r7, #17]
 801795e:	496d      	ldr	r1, [pc, #436]	; (8017b14 <etharp_query+0x268>)
 8017960:	4613      	mov	r3, r2
 8017962:	005b      	lsls	r3, r3, #1
 8017964:	4413      	add	r3, r2
 8017966:	00db      	lsls	r3, r3, #3
 8017968:	440b      	add	r3, r1
 801796a:	3308      	adds	r3, #8
 801796c:	68fa      	ldr	r2, [r7, #12]
 801796e:	601a      	str	r2, [r3, #0]
  }

  /* { i is either a STABLE or (new or existing) PENDING entry } */
  LWIP_ASSERT("arp_table[i].state == PENDING or STABLE",
 8017970:	7c7a      	ldrb	r2, [r7, #17]
 8017972:	4968      	ldr	r1, [pc, #416]	; (8017b14 <etharp_query+0x268>)
 8017974:	4613      	mov	r3, r2
 8017976:	005b      	lsls	r3, r3, #1
 8017978:	4413      	add	r3, r2
 801797a:	00db      	lsls	r3, r3, #3
 801797c:	440b      	add	r3, r1
 801797e:	3314      	adds	r3, #20
 8017980:	781b      	ldrb	r3, [r3, #0]
 8017982:	2b01      	cmp	r3, #1
 8017984:	d011      	beq.n	80179aa <etharp_query+0xfe>
 8017986:	7c7a      	ldrb	r2, [r7, #17]
 8017988:	4962      	ldr	r1, [pc, #392]	; (8017b14 <etharp_query+0x268>)
 801798a:	4613      	mov	r3, r2
 801798c:	005b      	lsls	r3, r3, #1
 801798e:	4413      	add	r3, r2
 8017990:	00db      	lsls	r3, r3, #3
 8017992:	440b      	add	r3, r1
 8017994:	3314      	adds	r3, #20
 8017996:	781b      	ldrb	r3, [r3, #0]
 8017998:	2b01      	cmp	r3, #1
 801799a:	d806      	bhi.n	80179aa <etharp_query+0xfe>
 801799c:	4b5a      	ldr	r3, [pc, #360]	; (8017b08 <etharp_query+0x25c>)
 801799e:	f240 32cd 	movw	r2, #973	; 0x3cd
 80179a2:	495d      	ldr	r1, [pc, #372]	; (8017b18 <etharp_query+0x26c>)
 80179a4:	485a      	ldr	r0, [pc, #360]	; (8017b10 <etharp_query+0x264>)
 80179a6:	f002 fa5b 	bl	8019e60 <iprintf>
              ((arp_table[i].state == ETHARP_STATE_PENDING) ||
               (arp_table[i].state >= ETHARP_STATE_STABLE)));

  /* do we have a new entry? or an implicit query request? */
  if (is_new_entry || (q == NULL)) {
 80179aa:	6a3b      	ldr	r3, [r7, #32]
 80179ac:	2b00      	cmp	r3, #0
 80179ae:	d102      	bne.n	80179b6 <etharp_query+0x10a>
 80179b0:	687b      	ldr	r3, [r7, #4]
 80179b2:	2b00      	cmp	r3, #0
 80179b4:	d10c      	bne.n	80179d0 <etharp_query+0x124>
    /* try to resolve it; send out ARP request */
    result = etharp_request(netif, ipaddr);
 80179b6:	68b9      	ldr	r1, [r7, #8]
 80179b8:	68f8      	ldr	r0, [r7, #12]
 80179ba:	f000 f963 	bl	8017c84 <etharp_request>
 80179be:	4603      	mov	r3, r0
 80179c0:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
      /* ARP request couldn't be sent */
      /* We don't re-send arp request in etharp_tmr, but we still queue packets,
         since this failure could be temporary, and the next packet calling
         etharp_query again could lead to sending the queued packets. */
    }
    if (q == NULL) {
 80179c4:	687b      	ldr	r3, [r7, #4]
 80179c6:	2b00      	cmp	r3, #0
 80179c8:	d102      	bne.n	80179d0 <etharp_query+0x124>
      return result;
 80179ca:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 80179ce:	e096      	b.n	8017afe <etharp_query+0x252>
    }
  }

  /* packet given? */
  LWIP_ASSERT("q != NULL", q != NULL);
 80179d0:	687b      	ldr	r3, [r7, #4]
 80179d2:	2b00      	cmp	r3, #0
 80179d4:	d106      	bne.n	80179e4 <etharp_query+0x138>
 80179d6:	4b4c      	ldr	r3, [pc, #304]	; (8017b08 <etharp_query+0x25c>)
 80179d8:	f240 32e1 	movw	r2, #993	; 0x3e1
 80179dc:	494f      	ldr	r1, [pc, #316]	; (8017b1c <etharp_query+0x270>)
 80179de:	484c      	ldr	r0, [pc, #304]	; (8017b10 <etharp_query+0x264>)
 80179e0:	f002 fa3e 	bl	8019e60 <iprintf>
  /* stable entry? */
  if (arp_table[i].state >= ETHARP_STATE_STABLE) {
 80179e4:	7c7a      	ldrb	r2, [r7, #17]
 80179e6:	494b      	ldr	r1, [pc, #300]	; (8017b14 <etharp_query+0x268>)
 80179e8:	4613      	mov	r3, r2
 80179ea:	005b      	lsls	r3, r3, #1
 80179ec:	4413      	add	r3, r2
 80179ee:	00db      	lsls	r3, r3, #3
 80179f0:	440b      	add	r3, r1
 80179f2:	3314      	adds	r3, #20
 80179f4:	781b      	ldrb	r3, [r3, #0]
 80179f6:	2b01      	cmp	r3, #1
 80179f8:	d917      	bls.n	8017a2a <etharp_query+0x17e>
    /* we have a valid IP->Ethernet address mapping */
    ETHARP_SET_ADDRHINT(netif, i);
 80179fa:	4a49      	ldr	r2, [pc, #292]	; (8017b20 <etharp_query+0x274>)
 80179fc:	7c7b      	ldrb	r3, [r7, #17]
 80179fe:	7013      	strb	r3, [r2, #0]
    /* send the packet */
    result = ethernet_output(netif, q, srcaddr, &(arp_table[i].ethaddr), ETHTYPE_IP);
 8017a00:	7c7a      	ldrb	r2, [r7, #17]
 8017a02:	4613      	mov	r3, r2
 8017a04:	005b      	lsls	r3, r3, #1
 8017a06:	4413      	add	r3, r2
 8017a08:	00db      	lsls	r3, r3, #3
 8017a0a:	3308      	adds	r3, #8
 8017a0c:	4a41      	ldr	r2, [pc, #260]	; (8017b14 <etharp_query+0x268>)
 8017a0e:	4413      	add	r3, r2
 8017a10:	3304      	adds	r3, #4
 8017a12:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8017a16:	9200      	str	r2, [sp, #0]
 8017a18:	697a      	ldr	r2, [r7, #20]
 8017a1a:	6879      	ldr	r1, [r7, #4]
 8017a1c:	68f8      	ldr	r0, [r7, #12]
 8017a1e:	f001 fc9b 	bl	8019358 <ethernet_output>
 8017a22:	4603      	mov	r3, r0
 8017a24:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8017a28:	e067      	b.n	8017afa <etharp_query+0x24e>
    /* pending entry? (either just created or already pending */
  } else if (arp_table[i].state == ETHARP_STATE_PENDING) {
 8017a2a:	7c7a      	ldrb	r2, [r7, #17]
 8017a2c:	4939      	ldr	r1, [pc, #228]	; (8017b14 <etharp_query+0x268>)
 8017a2e:	4613      	mov	r3, r2
 8017a30:	005b      	lsls	r3, r3, #1
 8017a32:	4413      	add	r3, r2
 8017a34:	00db      	lsls	r3, r3, #3
 8017a36:	440b      	add	r3, r1
 8017a38:	3314      	adds	r3, #20
 8017a3a:	781b      	ldrb	r3, [r3, #0]
 8017a3c:	2b01      	cmp	r3, #1
 8017a3e:	d15c      	bne.n	8017afa <etharp_query+0x24e>
    /* entry is still pending, queue the given packet 'q' */
    struct pbuf *p;
    int copy_needed = 0;
 8017a40:	2300      	movs	r3, #0
 8017a42:	61bb      	str	r3, [r7, #24]
    /* IF q includes a pbuf that must be copied, copy the whole chain into a
     * new PBUF_RAM. See the definition of PBUF_NEEDS_COPY for details. */
    p = q;
 8017a44:	687b      	ldr	r3, [r7, #4]
 8017a46:	61fb      	str	r3, [r7, #28]
    while (p) {
 8017a48:	e01c      	b.n	8017a84 <etharp_query+0x1d8>
      LWIP_ASSERT("no packet queues allowed!", (p->len != p->tot_len) || (p->next == 0));
 8017a4a:	69fb      	ldr	r3, [r7, #28]
 8017a4c:	895a      	ldrh	r2, [r3, #10]
 8017a4e:	69fb      	ldr	r3, [r7, #28]
 8017a50:	891b      	ldrh	r3, [r3, #8]
 8017a52:	429a      	cmp	r2, r3
 8017a54:	d10a      	bne.n	8017a6c <etharp_query+0x1c0>
 8017a56:	69fb      	ldr	r3, [r7, #28]
 8017a58:	681b      	ldr	r3, [r3, #0]
 8017a5a:	2b00      	cmp	r3, #0
 8017a5c:	d006      	beq.n	8017a6c <etharp_query+0x1c0>
 8017a5e:	4b2a      	ldr	r3, [pc, #168]	; (8017b08 <etharp_query+0x25c>)
 8017a60:	f240 32f1 	movw	r2, #1009	; 0x3f1
 8017a64:	492f      	ldr	r1, [pc, #188]	; (8017b24 <etharp_query+0x278>)
 8017a66:	482a      	ldr	r0, [pc, #168]	; (8017b10 <etharp_query+0x264>)
 8017a68:	f002 f9fa 	bl	8019e60 <iprintf>
      if (PBUF_NEEDS_COPY(p)) {
 8017a6c:	69fb      	ldr	r3, [r7, #28]
 8017a6e:	7b1b      	ldrb	r3, [r3, #12]
 8017a70:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8017a74:	2b00      	cmp	r3, #0
 8017a76:	d002      	beq.n	8017a7e <etharp_query+0x1d2>
        copy_needed = 1;
 8017a78:	2301      	movs	r3, #1
 8017a7a:	61bb      	str	r3, [r7, #24]
        break;
 8017a7c:	e005      	b.n	8017a8a <etharp_query+0x1de>
      }
      p = p->next;
 8017a7e:	69fb      	ldr	r3, [r7, #28]
 8017a80:	681b      	ldr	r3, [r3, #0]
 8017a82:	61fb      	str	r3, [r7, #28]
    while (p) {
 8017a84:	69fb      	ldr	r3, [r7, #28]
 8017a86:	2b00      	cmp	r3, #0
 8017a88:	d1df      	bne.n	8017a4a <etharp_query+0x19e>
    }
    if (copy_needed) {
 8017a8a:	69bb      	ldr	r3, [r7, #24]
 8017a8c:	2b00      	cmp	r3, #0
 8017a8e:	d007      	beq.n	8017aa0 <etharp_query+0x1f4>
      /* copy the whole packet into new pbufs */
      p = pbuf_clone(PBUF_LINK, PBUF_RAM, q);
 8017a90:	687a      	ldr	r2, [r7, #4]
 8017a92:	f44f 7120 	mov.w	r1, #640	; 0x280
 8017a96:	200e      	movs	r0, #14
 8017a98:	f7f9 fd66 	bl	8011568 <pbuf_clone>
 8017a9c:	61f8      	str	r0, [r7, #28]
 8017a9e:	e004      	b.n	8017aaa <etharp_query+0x1fe>
    } else {
      /* referencing the old pbuf is enough */
      p = q;
 8017aa0:	687b      	ldr	r3, [r7, #4]
 8017aa2:	61fb      	str	r3, [r7, #28]
      pbuf_ref(p);
 8017aa4:	69f8      	ldr	r0, [r7, #28]
 8017aa6:	f7f9 fba3 	bl	80111f0 <pbuf_ref>
    }
    /* packet could be taken over? */
    if (p != NULL) {
 8017aaa:	69fb      	ldr	r3, [r7, #28]
 8017aac:	2b00      	cmp	r3, #0
 8017aae:	d021      	beq.n	8017af4 <etharp_query+0x248>
        LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: could not queue a copy of PBUF_REF packet %p (out of memory)\n", (void *)q));
        result = ERR_MEM;
      }
#else /* ARP_QUEUEING */
      /* always queue one packet per ARP request only, freeing a previously queued packet */
      if (arp_table[i].q != NULL) {
 8017ab0:	7c7a      	ldrb	r2, [r7, #17]
 8017ab2:	4918      	ldr	r1, [pc, #96]	; (8017b14 <etharp_query+0x268>)
 8017ab4:	4613      	mov	r3, r2
 8017ab6:	005b      	lsls	r3, r3, #1
 8017ab8:	4413      	add	r3, r2
 8017aba:	00db      	lsls	r3, r3, #3
 8017abc:	440b      	add	r3, r1
 8017abe:	681b      	ldr	r3, [r3, #0]
 8017ac0:	2b00      	cmp	r3, #0
 8017ac2:	d00a      	beq.n	8017ada <etharp_query+0x22e>
        LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: dropped previously queued packet %p for ARP entry %"U16_F"\n", (void *)q, (u16_t)i));
        pbuf_free(arp_table[i].q);
 8017ac4:	7c7a      	ldrb	r2, [r7, #17]
 8017ac6:	4913      	ldr	r1, [pc, #76]	; (8017b14 <etharp_query+0x268>)
 8017ac8:	4613      	mov	r3, r2
 8017aca:	005b      	lsls	r3, r3, #1
 8017acc:	4413      	add	r3, r2
 8017ace:	00db      	lsls	r3, r3, #3
 8017ad0:	440b      	add	r3, r1
 8017ad2:	681b      	ldr	r3, [r3, #0]
 8017ad4:	4618      	mov	r0, r3
 8017ad6:	f7f9 faeb 	bl	80110b0 <pbuf_free>
      }
      arp_table[i].q = p;
 8017ada:	7c7a      	ldrb	r2, [r7, #17]
 8017adc:	490d      	ldr	r1, [pc, #52]	; (8017b14 <etharp_query+0x268>)
 8017ade:	4613      	mov	r3, r2
 8017ae0:	005b      	lsls	r3, r3, #1
 8017ae2:	4413      	add	r3, r2
 8017ae4:	00db      	lsls	r3, r3, #3
 8017ae6:	440b      	add	r3, r1
 8017ae8:	69fa      	ldr	r2, [r7, #28]
 8017aea:	601a      	str	r2, [r3, #0]
      result = ERR_OK;
 8017aec:	2300      	movs	r3, #0
 8017aee:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8017af2:	e002      	b.n	8017afa <etharp_query+0x24e>
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: queued packet %p on ARP entry %"U16_F"\n", (void *)q, (u16_t)i));
#endif /* ARP_QUEUEING */
    } else {
      ETHARP_STATS_INC(etharp.memerr);
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: could not queue a copy of PBUF_REF packet %p (out of memory)\n", (void *)q));
      result = ERR_MEM;
 8017af4:	23ff      	movs	r3, #255	; 0xff
 8017af6:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    }
  }
  return result;
 8017afa:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
}
 8017afe:	4618      	mov	r0, r3
 8017b00:	3728      	adds	r7, #40	; 0x28
 8017b02:	46bd      	mov	sp, r7
 8017b04:	bd80      	pop	{r7, pc}
 8017b06:	bf00      	nop
 8017b08:	0801ecd4 	.word	0x0801ecd4
 8017b0c:	0801ee80 	.word	0x0801ee80
 8017b10:	0801ed4c 	.word	0x0801ed4c
 8017b14:	20007134 	.word	0x20007134
 8017b18:	0801ee90 	.word	0x0801ee90
 8017b1c:	0801ee74 	.word	0x0801ee74
 8017b20:	20007224 	.word	0x20007224
 8017b24:	0801eeb8 	.word	0x0801eeb8

08017b28 <etharp_raw>:
etharp_raw(struct netif *netif, const struct eth_addr *ethsrc_addr,
           const struct eth_addr *ethdst_addr,
           const struct eth_addr *hwsrc_addr, const ip4_addr_t *ipsrc_addr,
           const struct eth_addr *hwdst_addr, const ip4_addr_t *ipdst_addr,
           const u16_t opcode)
{
 8017b28:	b580      	push	{r7, lr}
 8017b2a:	b08a      	sub	sp, #40	; 0x28
 8017b2c:	af02      	add	r7, sp, #8
 8017b2e:	60f8      	str	r0, [r7, #12]
 8017b30:	60b9      	str	r1, [r7, #8]
 8017b32:	607a      	str	r2, [r7, #4]
 8017b34:	603b      	str	r3, [r7, #0]
  struct pbuf *p;
  err_t result = ERR_OK;
 8017b36:	2300      	movs	r3, #0
 8017b38:	77fb      	strb	r3, [r7, #31]
  struct etharp_hdr *hdr;

  LWIP_ASSERT("netif != NULL", netif != NULL);
 8017b3a:	68fb      	ldr	r3, [r7, #12]
 8017b3c:	2b00      	cmp	r3, #0
 8017b3e:	d106      	bne.n	8017b4e <etharp_raw+0x26>
 8017b40:	4b3a      	ldr	r3, [pc, #232]	; (8017c2c <etharp_raw+0x104>)
 8017b42:	f240 4257 	movw	r2, #1111	; 0x457
 8017b46:	493a      	ldr	r1, [pc, #232]	; (8017c30 <etharp_raw+0x108>)
 8017b48:	483a      	ldr	r0, [pc, #232]	; (8017c34 <etharp_raw+0x10c>)
 8017b4a:	f002 f989 	bl	8019e60 <iprintf>

  /* allocate a pbuf for the outgoing ARP request packet */
  p = pbuf_alloc(PBUF_LINK, SIZEOF_ETHARP_HDR, PBUF_RAM);
 8017b4e:	f44f 7220 	mov.w	r2, #640	; 0x280
 8017b52:	211c      	movs	r1, #28
 8017b54:	200e      	movs	r0, #14
 8017b56:	f7f8 ffc7 	bl	8010ae8 <pbuf_alloc>
 8017b5a:	61b8      	str	r0, [r7, #24]
  /* could allocate a pbuf for an ARP request? */
  if (p == NULL) {
 8017b5c:	69bb      	ldr	r3, [r7, #24]
 8017b5e:	2b00      	cmp	r3, #0
 8017b60:	d102      	bne.n	8017b68 <etharp_raw+0x40>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS,
                ("etharp_raw: could not allocate pbuf for ARP request.\n"));
    ETHARP_STATS_INC(etharp.memerr);
    return ERR_MEM;
 8017b62:	f04f 33ff 	mov.w	r3, #4294967295
 8017b66:	e05d      	b.n	8017c24 <etharp_raw+0xfc>
  }
  LWIP_ASSERT("check that first pbuf can hold struct etharp_hdr",
 8017b68:	69bb      	ldr	r3, [r7, #24]
 8017b6a:	895b      	ldrh	r3, [r3, #10]
 8017b6c:	2b1b      	cmp	r3, #27
 8017b6e:	d806      	bhi.n	8017b7e <etharp_raw+0x56>
 8017b70:	4b2e      	ldr	r3, [pc, #184]	; (8017c2c <etharp_raw+0x104>)
 8017b72:	f240 4262 	movw	r2, #1122	; 0x462
 8017b76:	4930      	ldr	r1, [pc, #192]	; (8017c38 <etharp_raw+0x110>)
 8017b78:	482e      	ldr	r0, [pc, #184]	; (8017c34 <etharp_raw+0x10c>)
 8017b7a:	f002 f971 	bl	8019e60 <iprintf>
              (p->len >= SIZEOF_ETHARP_HDR));

  hdr = (struct etharp_hdr *)p->payload;
 8017b7e:	69bb      	ldr	r3, [r7, #24]
 8017b80:	685b      	ldr	r3, [r3, #4]
 8017b82:	617b      	str	r3, [r7, #20]
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_raw: sending raw ARP packet.\n"));
  hdr->opcode = lwip_htons(opcode);
 8017b84:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 8017b86:	4618      	mov	r0, r3
 8017b88:	f7f7 feae 	bl	800f8e8 <lwip_htons>
 8017b8c:	4603      	mov	r3, r0
 8017b8e:	461a      	mov	r2, r3
 8017b90:	697b      	ldr	r3, [r7, #20]
 8017b92:	80da      	strh	r2, [r3, #6]

  LWIP_ASSERT("netif->hwaddr_len must be the same as ETH_HWADDR_LEN for etharp!",
 8017b94:	68fb      	ldr	r3, [r7, #12]
 8017b96:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 8017b9a:	2b06      	cmp	r3, #6
 8017b9c:	d006      	beq.n	8017bac <etharp_raw+0x84>
 8017b9e:	4b23      	ldr	r3, [pc, #140]	; (8017c2c <etharp_raw+0x104>)
 8017ba0:	f240 4269 	movw	r2, #1129	; 0x469
 8017ba4:	4925      	ldr	r1, [pc, #148]	; (8017c3c <etharp_raw+0x114>)
 8017ba6:	4823      	ldr	r0, [pc, #140]	; (8017c34 <etharp_raw+0x10c>)
 8017ba8:	f002 f95a 	bl	8019e60 <iprintf>
              (netif->hwaddr_len == ETH_HWADDR_LEN));

  /* Write the ARP MAC-Addresses */
  SMEMCPY(&hdr->shwaddr, hwsrc_addr, ETH_HWADDR_LEN);
 8017bac:	697b      	ldr	r3, [r7, #20]
 8017bae:	3308      	adds	r3, #8
 8017bb0:	2206      	movs	r2, #6
 8017bb2:	6839      	ldr	r1, [r7, #0]
 8017bb4:	4618      	mov	r0, r3
 8017bb6:	f002 fb22 	bl	801a1fe <memcpy>
  SMEMCPY(&hdr->dhwaddr, hwdst_addr, ETH_HWADDR_LEN);
 8017bba:	697b      	ldr	r3, [r7, #20]
 8017bbc:	3312      	adds	r3, #18
 8017bbe:	2206      	movs	r2, #6
 8017bc0:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8017bc2:	4618      	mov	r0, r3
 8017bc4:	f002 fb1b 	bl	801a1fe <memcpy>
  /* Copy struct ip4_addr_wordaligned to aligned ip4_addr, to support compilers without
   * structure packing. */
  IPADDR_WORDALIGNED_COPY_FROM_IP4_ADDR_T(&hdr->sipaddr, ipsrc_addr);
 8017bc8:	697b      	ldr	r3, [r7, #20]
 8017bca:	330e      	adds	r3, #14
 8017bcc:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8017bce:	6812      	ldr	r2, [r2, #0]
 8017bd0:	601a      	str	r2, [r3, #0]
  IPADDR_WORDALIGNED_COPY_FROM_IP4_ADDR_T(&hdr->dipaddr, ipdst_addr);
 8017bd2:	697b      	ldr	r3, [r7, #20]
 8017bd4:	3318      	adds	r3, #24
 8017bd6:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8017bd8:	6812      	ldr	r2, [r2, #0]
 8017bda:	601a      	str	r2, [r3, #0]

  hdr->hwtype = PP_HTONS(LWIP_IANA_HWTYPE_ETHERNET);
 8017bdc:	697b      	ldr	r3, [r7, #20]
 8017bde:	2200      	movs	r2, #0
 8017be0:	701a      	strb	r2, [r3, #0]
 8017be2:	2200      	movs	r2, #0
 8017be4:	f042 0201 	orr.w	r2, r2, #1
 8017be8:	705a      	strb	r2, [r3, #1]
  hdr->proto = PP_HTONS(ETHTYPE_IP);
 8017bea:	697b      	ldr	r3, [r7, #20]
 8017bec:	2200      	movs	r2, #0
 8017bee:	f042 0208 	orr.w	r2, r2, #8
 8017bf2:	709a      	strb	r2, [r3, #2]
 8017bf4:	2200      	movs	r2, #0
 8017bf6:	70da      	strb	r2, [r3, #3]
  /* set hwlen and protolen */
  hdr->hwlen = ETH_HWADDR_LEN;
 8017bf8:	697b      	ldr	r3, [r7, #20]
 8017bfa:	2206      	movs	r2, #6
 8017bfc:	711a      	strb	r2, [r3, #4]
  hdr->protolen = sizeof(ip4_addr_t);
 8017bfe:	697b      	ldr	r3, [r7, #20]
 8017c00:	2204      	movs	r2, #4
 8017c02:	715a      	strb	r2, [r3, #5]
  if (ip4_addr_islinklocal(ipsrc_addr)) {
    ethernet_output(netif, p, ethsrc_addr, &ethbroadcast, ETHTYPE_ARP);
  } else
#endif /* LWIP_AUTOIP */
  {
    ethernet_output(netif, p, ethsrc_addr, ethdst_addr, ETHTYPE_ARP);
 8017c04:	f640 0306 	movw	r3, #2054	; 0x806
 8017c08:	9300      	str	r3, [sp, #0]
 8017c0a:	687b      	ldr	r3, [r7, #4]
 8017c0c:	68ba      	ldr	r2, [r7, #8]
 8017c0e:	69b9      	ldr	r1, [r7, #24]
 8017c10:	68f8      	ldr	r0, [r7, #12]
 8017c12:	f001 fba1 	bl	8019358 <ethernet_output>
  }

  ETHARP_STATS_INC(etharp.xmit);
  /* free ARP query packet */
  pbuf_free(p);
 8017c16:	69b8      	ldr	r0, [r7, #24]
 8017c18:	f7f9 fa4a 	bl	80110b0 <pbuf_free>
  p = NULL;
 8017c1c:	2300      	movs	r3, #0
 8017c1e:	61bb      	str	r3, [r7, #24]
  /* could not allocate pbuf for ARP request */

  return result;
 8017c20:	f997 301f 	ldrsb.w	r3, [r7, #31]
}
 8017c24:	4618      	mov	r0, r3
 8017c26:	3720      	adds	r7, #32
 8017c28:	46bd      	mov	sp, r7
 8017c2a:	bd80      	pop	{r7, pc}
 8017c2c:	0801ecd4 	.word	0x0801ecd4
 8017c30:	0801ee24 	.word	0x0801ee24
 8017c34:	0801ed4c 	.word	0x0801ed4c
 8017c38:	0801eed4 	.word	0x0801eed4
 8017c3c:	0801ef08 	.word	0x0801ef08

08017c40 <etharp_request_dst>:
 *         ERR_MEM if the ARP packet couldn't be allocated
 *         any other err_t on failure
 */
static err_t
etharp_request_dst(struct netif *netif, const ip4_addr_t *ipaddr, const struct eth_addr *hw_dst_addr)
{
 8017c40:	b580      	push	{r7, lr}
 8017c42:	b088      	sub	sp, #32
 8017c44:	af04      	add	r7, sp, #16
 8017c46:	60f8      	str	r0, [r7, #12]
 8017c48:	60b9      	str	r1, [r7, #8]
 8017c4a:	607a      	str	r2, [r7, #4]
  return etharp_raw(netif, (struct eth_addr *)netif->hwaddr, hw_dst_addr,
 8017c4c:	68fb      	ldr	r3, [r7, #12]
 8017c4e:	f103 0126 	add.w	r1, r3, #38	; 0x26
                    (struct eth_addr *)netif->hwaddr, netif_ip4_addr(netif), &ethzero,
 8017c52:	68fb      	ldr	r3, [r7, #12]
 8017c54:	f103 0026 	add.w	r0, r3, #38	; 0x26
 8017c58:	68fb      	ldr	r3, [r7, #12]
 8017c5a:	3304      	adds	r3, #4
  return etharp_raw(netif, (struct eth_addr *)netif->hwaddr, hw_dst_addr,
 8017c5c:	2201      	movs	r2, #1
 8017c5e:	9203      	str	r2, [sp, #12]
 8017c60:	68ba      	ldr	r2, [r7, #8]
 8017c62:	9202      	str	r2, [sp, #8]
 8017c64:	4a06      	ldr	r2, [pc, #24]	; (8017c80 <etharp_request_dst+0x40>)
 8017c66:	9201      	str	r2, [sp, #4]
 8017c68:	9300      	str	r3, [sp, #0]
 8017c6a:	4603      	mov	r3, r0
 8017c6c:	687a      	ldr	r2, [r7, #4]
 8017c6e:	68f8      	ldr	r0, [r7, #12]
 8017c70:	f7ff ff5a 	bl	8017b28 <etharp_raw>
 8017c74:	4603      	mov	r3, r0
                    ipaddr, ARP_REQUEST);
}
 8017c76:	4618      	mov	r0, r3
 8017c78:	3710      	adds	r7, #16
 8017c7a:	46bd      	mov	sp, r7
 8017c7c:	bd80      	pop	{r7, pc}
 8017c7e:	bf00      	nop
 8017c80:	0801f4d8 	.word	0x0801f4d8

08017c84 <etharp_request>:
 *         ERR_MEM if the ARP packet couldn't be allocated
 *         any other err_t on failure
 */
err_t
etharp_request(struct netif *netif, const ip4_addr_t *ipaddr)
{
 8017c84:	b580      	push	{r7, lr}
 8017c86:	b082      	sub	sp, #8
 8017c88:	af00      	add	r7, sp, #0
 8017c8a:	6078      	str	r0, [r7, #4]
 8017c8c:	6039      	str	r1, [r7, #0]
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_request: sending ARP request.\n"));
  return etharp_request_dst(netif, ipaddr, &ethbroadcast);
 8017c8e:	4a05      	ldr	r2, [pc, #20]	; (8017ca4 <etharp_request+0x20>)
 8017c90:	6839      	ldr	r1, [r7, #0]
 8017c92:	6878      	ldr	r0, [r7, #4]
 8017c94:	f7ff ffd4 	bl	8017c40 <etharp_request_dst>
 8017c98:	4603      	mov	r3, r0
}
 8017c9a:	4618      	mov	r0, r3
 8017c9c:	3708      	adds	r7, #8
 8017c9e:	46bd      	mov	sp, r7
 8017ca0:	bd80      	pop	{r7, pc}
 8017ca2:	bf00      	nop
 8017ca4:	0801f4d0 	.word	0x0801f4d0

08017ca8 <icmp_input>:
 * @param p the icmp echo request packet, p->payload pointing to the icmp header
 * @param inp the netif on which this packet was received
 */
void
icmp_input(struct pbuf *p, struct netif *inp)
{
 8017ca8:	b580      	push	{r7, lr}
 8017caa:	b08e      	sub	sp, #56	; 0x38
 8017cac:	af04      	add	r7, sp, #16
 8017cae:	6078      	str	r0, [r7, #4]
 8017cb0:	6039      	str	r1, [r7, #0]
  const ip4_addr_t *src;

  ICMP_STATS_INC(icmp.recv);
  MIB2_STATS_INC(mib2.icmpinmsgs);

  iphdr_in = ip4_current_header();
 8017cb2:	4b87      	ldr	r3, [pc, #540]	; (8017ed0 <icmp_input+0x228>)
 8017cb4:	689b      	ldr	r3, [r3, #8]
 8017cb6:	627b      	str	r3, [r7, #36]	; 0x24
  hlen = IPH_HL_BYTES(iphdr_in);
 8017cb8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8017cba:	781b      	ldrb	r3, [r3, #0]
 8017cbc:	f003 030f 	and.w	r3, r3, #15
 8017cc0:	b2db      	uxtb	r3, r3
 8017cc2:	009b      	lsls	r3, r3, #2
 8017cc4:	b2db      	uxtb	r3, r3
 8017cc6:	847b      	strh	r3, [r7, #34]	; 0x22
  if (hlen < IP_HLEN) {
 8017cc8:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8017cca:	2b13      	cmp	r3, #19
 8017ccc:	f240 80e8 	bls.w	8017ea0 <icmp_input+0x1f8>
    LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: short IP header (%"S16_F" bytes) received\n", hlen));
    goto lenerr;
  }
  if (p->len < sizeof(u16_t) * 2) {
 8017cd0:	687b      	ldr	r3, [r7, #4]
 8017cd2:	895b      	ldrh	r3, [r3, #10]
 8017cd4:	2b03      	cmp	r3, #3
 8017cd6:	f240 80e5 	bls.w	8017ea4 <icmp_input+0x1fc>
    LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: short ICMP (%"U16_F" bytes) received\n", p->tot_len));
    goto lenerr;
  }

  type = *((u8_t *)p->payload);
 8017cda:	687b      	ldr	r3, [r7, #4]
 8017cdc:	685b      	ldr	r3, [r3, #4]
 8017cde:	781b      	ldrb	r3, [r3, #0]
 8017ce0:	f887 3021 	strb.w	r3, [r7, #33]	; 0x21
#ifdef LWIP_DEBUG
  code = *(((u8_t *)p->payload) + 1);
  /* if debug is enabled but debug statement below is somehow disabled: */
  LWIP_UNUSED_ARG(code);
#endif /* LWIP_DEBUG */
  switch (type) {
 8017ce4:	f897 3021 	ldrb.w	r3, [r7, #33]	; 0x21
 8017ce8:	2b00      	cmp	r3, #0
 8017cea:	f000 80d2 	beq.w	8017e92 <icmp_input+0x1ea>
 8017cee:	2b08      	cmp	r3, #8
 8017cf0:	f040 80d2 	bne.w	8017e98 <icmp_input+0x1f0>
         (as obviously, an echo request has been sent, too). */
      MIB2_STATS_INC(mib2.icmpinechoreps);
      break;
    case ICMP_ECHO:
      MIB2_STATS_INC(mib2.icmpinechos);
      src = ip4_current_dest_addr();
 8017cf4:	4b77      	ldr	r3, [pc, #476]	; (8017ed4 <icmp_input+0x22c>)
 8017cf6:	61fb      	str	r3, [r7, #28]
      /* multicast destination address? */
      if (ip4_addr_ismulticast(ip4_current_dest_addr())) {
 8017cf8:	4b75      	ldr	r3, [pc, #468]	; (8017ed0 <icmp_input+0x228>)
 8017cfa:	695b      	ldr	r3, [r3, #20]
 8017cfc:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8017d00:	2be0      	cmp	r3, #224	; 0xe0
 8017d02:	f000 80d6 	beq.w	8017eb2 <icmp_input+0x20a>
        LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: Not echoing to multicast pings\n"));
        goto icmperr;
#endif /* LWIP_MULTICAST_PING */
      }
      /* broadcast destination address? */
      if (ip4_addr_isbroadcast(ip4_current_dest_addr(), ip_current_netif())) {
 8017d06:	4b72      	ldr	r3, [pc, #456]	; (8017ed0 <icmp_input+0x228>)
 8017d08:	695b      	ldr	r3, [r3, #20]
 8017d0a:	4a71      	ldr	r2, [pc, #452]	; (8017ed0 <icmp_input+0x228>)
 8017d0c:	6812      	ldr	r2, [r2, #0]
 8017d0e:	4611      	mov	r1, r2
 8017d10:	4618      	mov	r0, r3
 8017d12:	f000 fc13 	bl	801853c <ip4_addr_isbroadcast_u32>
 8017d16:	4603      	mov	r3, r0
 8017d18:	2b00      	cmp	r3, #0
 8017d1a:	f040 80cc 	bne.w	8017eb6 <icmp_input+0x20e>
        LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: Not echoing to broadcast pings\n"));
        goto icmperr;
#endif /* LWIP_BROADCAST_PING */
      }
      LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: ping\n"));
      if (p->tot_len < sizeof(struct icmp_echo_hdr)) {
 8017d1e:	687b      	ldr	r3, [r7, #4]
 8017d20:	891b      	ldrh	r3, [r3, #8]
 8017d22:	2b07      	cmp	r3, #7
 8017d24:	f240 80c0 	bls.w	8017ea8 <icmp_input+0x200>
        LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: bad ICMP echo received\n"));
        goto lenerr;
      }
#if CHECKSUM_CHECK_ICMP
      IF__NETIF_CHECKSUM_ENABLED(inp, NETIF_CHECKSUM_CHECK_ICMP) {
        if (inet_chksum_pbuf(p) != 0) {
 8017d28:	6878      	ldr	r0, [r7, #4]
 8017d2a:	f7f7 fe7a 	bl	800fa22 <inet_chksum_pbuf>
 8017d2e:	4603      	mov	r3, r0
 8017d30:	2b00      	cmp	r3, #0
 8017d32:	d003      	beq.n	8017d3c <icmp_input+0x94>
          LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: checksum failed for received ICMP echo\n"));
          pbuf_free(p);
 8017d34:	6878      	ldr	r0, [r7, #4]
 8017d36:	f7f9 f9bb 	bl	80110b0 <pbuf_free>
          ICMP_STATS_INC(icmp.chkerr);
          MIB2_STATS_INC(mib2.icmpinerrors);
          return;
 8017d3a:	e0c5      	b.n	8017ec8 <icmp_input+0x220>
        }
      }
#endif
#if LWIP_ICMP_ECHO_CHECK_INPUT_PBUF_LEN
      if (pbuf_add_header(p, hlen + PBUF_LINK_HLEN + PBUF_LINK_ENCAPSULATION_HLEN)) {
 8017d3c:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8017d3e:	330e      	adds	r3, #14
 8017d40:	4619      	mov	r1, r3
 8017d42:	6878      	ldr	r0, [r7, #4]
 8017d44:	f7f9 f91e 	bl	8010f84 <pbuf_add_header>
 8017d48:	4603      	mov	r3, r0
 8017d4a:	2b00      	cmp	r3, #0
 8017d4c:	d04b      	beq.n	8017de6 <icmp_input+0x13e>
        /* p is not big enough to contain link headers
         * allocate a new one and copy p into it
         */
        struct pbuf *r;
        u16_t alloc_len = (u16_t)(p->tot_len + hlen);
 8017d4e:	687b      	ldr	r3, [r7, #4]
 8017d50:	891a      	ldrh	r2, [r3, #8]
 8017d52:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8017d54:	4413      	add	r3, r2
 8017d56:	837b      	strh	r3, [r7, #26]
        if (alloc_len < p->tot_len) {
 8017d58:	687b      	ldr	r3, [r7, #4]
 8017d5a:	891b      	ldrh	r3, [r3, #8]
 8017d5c:	8b7a      	ldrh	r2, [r7, #26]
 8017d5e:	429a      	cmp	r2, r3
 8017d60:	f0c0 80ab 	bcc.w	8017eba <icmp_input+0x212>
          LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: allocating new pbuf failed (tot_len overflow)\n"));
          goto icmperr;
        }
        /* allocate new packet buffer with space for link headers */
        r = pbuf_alloc(PBUF_LINK, alloc_len, PBUF_RAM);
 8017d64:	8b7b      	ldrh	r3, [r7, #26]
 8017d66:	f44f 7220 	mov.w	r2, #640	; 0x280
 8017d6a:	4619      	mov	r1, r3
 8017d6c:	200e      	movs	r0, #14
 8017d6e:	f7f8 febb 	bl	8010ae8 <pbuf_alloc>
 8017d72:	6178      	str	r0, [r7, #20]
        if (r == NULL) {
 8017d74:	697b      	ldr	r3, [r7, #20]
 8017d76:	2b00      	cmp	r3, #0
 8017d78:	f000 80a1 	beq.w	8017ebe <icmp_input+0x216>
          LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: allocating new pbuf failed\n"));
          goto icmperr;
        }
        if (r->len < hlen + sizeof(struct icmp_echo_hdr)) {
 8017d7c:	697b      	ldr	r3, [r7, #20]
 8017d7e:	895b      	ldrh	r3, [r3, #10]
 8017d80:	461a      	mov	r2, r3
 8017d82:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8017d84:	3308      	adds	r3, #8
 8017d86:	429a      	cmp	r2, r3
 8017d88:	d203      	bcs.n	8017d92 <icmp_input+0xea>
          LWIP_DEBUGF(ICMP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("first pbuf cannot hold the ICMP header"));
          pbuf_free(r);
 8017d8a:	6978      	ldr	r0, [r7, #20]
 8017d8c:	f7f9 f990 	bl	80110b0 <pbuf_free>
          goto icmperr;
 8017d90:	e096      	b.n	8017ec0 <icmp_input+0x218>
        }
        /* copy the ip header */
        MEMCPY(r->payload, iphdr_in, hlen);
 8017d92:	697b      	ldr	r3, [r7, #20]
 8017d94:	685b      	ldr	r3, [r3, #4]
 8017d96:	8c7a      	ldrh	r2, [r7, #34]	; 0x22
 8017d98:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8017d9a:	4618      	mov	r0, r3
 8017d9c:	f002 fa2f 	bl	801a1fe <memcpy>
        /* switch r->payload back to icmp header (cannot fail) */
        if (pbuf_remove_header(r, hlen)) {
 8017da0:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8017da2:	4619      	mov	r1, r3
 8017da4:	6978      	ldr	r0, [r7, #20]
 8017da6:	f7f9 f8fd 	bl	8010fa4 <pbuf_remove_header>
 8017daa:	4603      	mov	r3, r0
 8017dac:	2b00      	cmp	r3, #0
 8017dae:	d009      	beq.n	8017dc4 <icmp_input+0x11c>
          LWIP_ASSERT("icmp_input: moving r->payload to icmp header failed\n", 0);
 8017db0:	4b49      	ldr	r3, [pc, #292]	; (8017ed8 <icmp_input+0x230>)
 8017db2:	22b6      	movs	r2, #182	; 0xb6
 8017db4:	4949      	ldr	r1, [pc, #292]	; (8017edc <icmp_input+0x234>)
 8017db6:	484a      	ldr	r0, [pc, #296]	; (8017ee0 <icmp_input+0x238>)
 8017db8:	f002 f852 	bl	8019e60 <iprintf>
          pbuf_free(r);
 8017dbc:	6978      	ldr	r0, [r7, #20]
 8017dbe:	f7f9 f977 	bl	80110b0 <pbuf_free>
          goto icmperr;
 8017dc2:	e07d      	b.n	8017ec0 <icmp_input+0x218>
        }
        /* copy the rest of the packet without ip header */
        if (pbuf_copy(r, p) != ERR_OK) {
 8017dc4:	6879      	ldr	r1, [r7, #4]
 8017dc6:	6978      	ldr	r0, [r7, #20]
 8017dc8:	f7f9 fa8a 	bl	80112e0 <pbuf_copy>
 8017dcc:	4603      	mov	r3, r0
 8017dce:	2b00      	cmp	r3, #0
 8017dd0:	d003      	beq.n	8017dda <icmp_input+0x132>
          LWIP_DEBUGF(ICMP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("icmp_input: copying to new pbuf failed"));
          pbuf_free(r);
 8017dd2:	6978      	ldr	r0, [r7, #20]
 8017dd4:	f7f9 f96c 	bl	80110b0 <pbuf_free>
          goto icmperr;
 8017dd8:	e072      	b.n	8017ec0 <icmp_input+0x218>
        }
        /* free the original p */
        pbuf_free(p);
 8017dda:	6878      	ldr	r0, [r7, #4]
 8017ddc:	f7f9 f968 	bl	80110b0 <pbuf_free>
        /* we now have an identical copy of p that has room for link headers */
        p = r;
 8017de0:	697b      	ldr	r3, [r7, #20]
 8017de2:	607b      	str	r3, [r7, #4]
 8017de4:	e00f      	b.n	8017e06 <icmp_input+0x15e>
      } else {
        /* restore p->payload to point to icmp header (cannot fail) */
        if (pbuf_remove_header(p, hlen + PBUF_LINK_HLEN + PBUF_LINK_ENCAPSULATION_HLEN)) {
 8017de6:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8017de8:	330e      	adds	r3, #14
 8017dea:	4619      	mov	r1, r3
 8017dec:	6878      	ldr	r0, [r7, #4]
 8017dee:	f7f9 f8d9 	bl	8010fa4 <pbuf_remove_header>
 8017df2:	4603      	mov	r3, r0
 8017df4:	2b00      	cmp	r3, #0
 8017df6:	d006      	beq.n	8017e06 <icmp_input+0x15e>
          LWIP_ASSERT("icmp_input: restoring original p->payload failed\n", 0);
 8017df8:	4b37      	ldr	r3, [pc, #220]	; (8017ed8 <icmp_input+0x230>)
 8017dfa:	22c7      	movs	r2, #199	; 0xc7
 8017dfc:	4939      	ldr	r1, [pc, #228]	; (8017ee4 <icmp_input+0x23c>)
 8017dfe:	4838      	ldr	r0, [pc, #224]	; (8017ee0 <icmp_input+0x238>)
 8017e00:	f002 f82e 	bl	8019e60 <iprintf>
          goto icmperr;
 8017e04:	e05c      	b.n	8017ec0 <icmp_input+0x218>
      }
#endif /* LWIP_ICMP_ECHO_CHECK_INPUT_PBUF_LEN */
      /* At this point, all checks are OK. */
      /* We generate an answer by switching the dest and src ip addresses,
       * setting the icmp type to ECHO_RESPONSE and updating the checksum. */
      iecho = (struct icmp_echo_hdr *)p->payload;
 8017e06:	687b      	ldr	r3, [r7, #4]
 8017e08:	685b      	ldr	r3, [r3, #4]
 8017e0a:	613b      	str	r3, [r7, #16]
      if (pbuf_add_header(p, hlen)) {
 8017e0c:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8017e0e:	4619      	mov	r1, r3
 8017e10:	6878      	ldr	r0, [r7, #4]
 8017e12:	f7f9 f8b7 	bl	8010f84 <pbuf_add_header>
 8017e16:	4603      	mov	r3, r0
 8017e18:	2b00      	cmp	r3, #0
 8017e1a:	d13c      	bne.n	8017e96 <icmp_input+0x1ee>
        LWIP_DEBUGF(ICMP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("Can't move over header in packet"));
      } else {
        err_t ret;
        struct ip_hdr *iphdr = (struct ip_hdr *)p->payload;
 8017e1c:	687b      	ldr	r3, [r7, #4]
 8017e1e:	685b      	ldr	r3, [r3, #4]
 8017e20:	60fb      	str	r3, [r7, #12]
        ip4_addr_copy(iphdr->src, *src);
 8017e22:	69fb      	ldr	r3, [r7, #28]
 8017e24:	681a      	ldr	r2, [r3, #0]
 8017e26:	68fb      	ldr	r3, [r7, #12]
 8017e28:	60da      	str	r2, [r3, #12]
        ip4_addr_copy(iphdr->dest, *ip4_current_src_addr());
 8017e2a:	4b29      	ldr	r3, [pc, #164]	; (8017ed0 <icmp_input+0x228>)
 8017e2c:	691a      	ldr	r2, [r3, #16]
 8017e2e:	68fb      	ldr	r3, [r7, #12]
 8017e30:	611a      	str	r2, [r3, #16]
        ICMPH_TYPE_SET(iecho, ICMP_ER);
 8017e32:	693b      	ldr	r3, [r7, #16]
 8017e34:	2200      	movs	r2, #0
 8017e36:	701a      	strb	r2, [r3, #0]
#if CHECKSUM_GEN_ICMP
        IF__NETIF_CHECKSUM_ENABLED(inp, NETIF_CHECKSUM_GEN_ICMP) {
          /* adjust the checksum */
          if (iecho->chksum > PP_HTONS(0xffffU - (ICMP_ECHO << 8))) {
 8017e38:	693b      	ldr	r3, [r7, #16]
 8017e3a:	885b      	ldrh	r3, [r3, #2]
 8017e3c:	b29b      	uxth	r3, r3
 8017e3e:	f64f 72f7 	movw	r2, #65527	; 0xfff7
 8017e42:	4293      	cmp	r3, r2
 8017e44:	d907      	bls.n	8017e56 <icmp_input+0x1ae>
            iecho->chksum = (u16_t)(iecho->chksum + PP_HTONS((u16_t)(ICMP_ECHO << 8)) + 1);
 8017e46:	693b      	ldr	r3, [r7, #16]
 8017e48:	885b      	ldrh	r3, [r3, #2]
 8017e4a:	b29b      	uxth	r3, r3
 8017e4c:	3309      	adds	r3, #9
 8017e4e:	b29a      	uxth	r2, r3
 8017e50:	693b      	ldr	r3, [r7, #16]
 8017e52:	805a      	strh	r2, [r3, #2]
 8017e54:	e006      	b.n	8017e64 <icmp_input+0x1bc>
          } else {
            iecho->chksum = (u16_t)(iecho->chksum + PP_HTONS(ICMP_ECHO << 8));
 8017e56:	693b      	ldr	r3, [r7, #16]
 8017e58:	885b      	ldrh	r3, [r3, #2]
 8017e5a:	b29b      	uxth	r3, r3
 8017e5c:	3308      	adds	r3, #8
 8017e5e:	b29a      	uxth	r2, r3
 8017e60:	693b      	ldr	r3, [r7, #16]
 8017e62:	805a      	strh	r2, [r3, #2]
#else /* CHECKSUM_GEN_ICMP */
        iecho->chksum = 0;
#endif /* CHECKSUM_GEN_ICMP */

        /* Set the correct TTL and recalculate the header checksum. */
        IPH_TTL_SET(iphdr, ICMP_TTL);
 8017e64:	68fb      	ldr	r3, [r7, #12]
 8017e66:	22ff      	movs	r2, #255	; 0xff
 8017e68:	721a      	strb	r2, [r3, #8]
        IPH_CHKSUM_SET(iphdr, 0);
 8017e6a:	68fb      	ldr	r3, [r7, #12]
 8017e6c:	2200      	movs	r2, #0
 8017e6e:	729a      	strb	r2, [r3, #10]
 8017e70:	2200      	movs	r2, #0
 8017e72:	72da      	strb	r2, [r3, #11]
        MIB2_STATS_INC(mib2.icmpoutmsgs);
        /* increase number of echo replies attempted to send */
        MIB2_STATS_INC(mib2.icmpoutechoreps);

        /* send an ICMP packet */
        ret = ip4_output_if(p, src, LWIP_IP_HDRINCL,
 8017e74:	683b      	ldr	r3, [r7, #0]
 8017e76:	9302      	str	r3, [sp, #8]
 8017e78:	2301      	movs	r3, #1
 8017e7a:	9301      	str	r3, [sp, #4]
 8017e7c:	2300      	movs	r3, #0
 8017e7e:	9300      	str	r3, [sp, #0]
 8017e80:	23ff      	movs	r3, #255	; 0xff
 8017e82:	2200      	movs	r2, #0
 8017e84:	69f9      	ldr	r1, [r7, #28]
 8017e86:	6878      	ldr	r0, [r7, #4]
 8017e88:	f000 fa80 	bl	801838c <ip4_output_if>
 8017e8c:	4603      	mov	r3, r0
 8017e8e:	72fb      	strb	r3, [r7, #11]
                            ICMP_TTL, 0, IP_PROTO_ICMP, inp);
        if (ret != ERR_OK) {
          LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: ip_output_if returned an error: %s\n", lwip_strerr(ret)));
        }
      }
      break;
 8017e90:	e001      	b.n	8017e96 <icmp_input+0x1ee>
      break;
 8017e92:	bf00      	nop
 8017e94:	e000      	b.n	8017e98 <icmp_input+0x1f0>
      break;
 8017e96:	bf00      	nop
      LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: ICMP type %"S16_F" code %"S16_F" not supported.\n",
                               (s16_t)type, (s16_t)code));
      ICMP_STATS_INC(icmp.proterr);
      ICMP_STATS_INC(icmp.drop);
  }
  pbuf_free(p);
 8017e98:	6878      	ldr	r0, [r7, #4]
 8017e9a:	f7f9 f909 	bl	80110b0 <pbuf_free>
  return;
 8017e9e:	e013      	b.n	8017ec8 <icmp_input+0x220>
    goto lenerr;
 8017ea0:	bf00      	nop
 8017ea2:	e002      	b.n	8017eaa <icmp_input+0x202>
    goto lenerr;
 8017ea4:	bf00      	nop
 8017ea6:	e000      	b.n	8017eaa <icmp_input+0x202>
        goto lenerr;
 8017ea8:	bf00      	nop
lenerr:
  pbuf_free(p);
 8017eaa:	6878      	ldr	r0, [r7, #4]
 8017eac:	f7f9 f900 	bl	80110b0 <pbuf_free>
  ICMP_STATS_INC(icmp.lenerr);
  MIB2_STATS_INC(mib2.icmpinerrors);
  return;
 8017eb0:	e00a      	b.n	8017ec8 <icmp_input+0x220>
        goto icmperr;
 8017eb2:	bf00      	nop
 8017eb4:	e004      	b.n	8017ec0 <icmp_input+0x218>
        goto icmperr;
 8017eb6:	bf00      	nop
 8017eb8:	e002      	b.n	8017ec0 <icmp_input+0x218>
          goto icmperr;
 8017eba:	bf00      	nop
 8017ebc:	e000      	b.n	8017ec0 <icmp_input+0x218>
          goto icmperr;
 8017ebe:	bf00      	nop
#if LWIP_ICMP_ECHO_CHECK_INPUT_PBUF_LEN || !LWIP_MULTICAST_PING || !LWIP_BROADCAST_PING
icmperr:
  pbuf_free(p);
 8017ec0:	6878      	ldr	r0, [r7, #4]
 8017ec2:	f7f9 f8f5 	bl	80110b0 <pbuf_free>
  ICMP_STATS_INC(icmp.err);
  MIB2_STATS_INC(mib2.icmpinerrors);
  return;
 8017ec6:	bf00      	nop
#endif /* LWIP_ICMP_ECHO_CHECK_INPUT_PBUF_LEN || !LWIP_MULTICAST_PING || !LWIP_BROADCAST_PING */
}
 8017ec8:	3728      	adds	r7, #40	; 0x28
 8017eca:	46bd      	mov	sp, r7
 8017ecc:	bd80      	pop	{r7, pc}
 8017ece:	bf00      	nop
 8017ed0:	200007f8 	.word	0x200007f8
 8017ed4:	2000080c 	.word	0x2000080c
 8017ed8:	0801ef4c 	.word	0x0801ef4c
 8017edc:	0801ef84 	.word	0x0801ef84
 8017ee0:	0801efbc 	.word	0x0801efbc
 8017ee4:	0801efe4 	.word	0x0801efe4

08017ee8 <icmp_dest_unreach>:
 *          p->payload pointing to the IP header
 * @param t type of the 'unreachable' packet
 */
void
icmp_dest_unreach(struct pbuf *p, enum icmp_dur_type t)
{
 8017ee8:	b580      	push	{r7, lr}
 8017eea:	b082      	sub	sp, #8
 8017eec:	af00      	add	r7, sp, #0
 8017eee:	6078      	str	r0, [r7, #4]
 8017ef0:	460b      	mov	r3, r1
 8017ef2:	70fb      	strb	r3, [r7, #3]
  MIB2_STATS_INC(mib2.icmpoutdestunreachs);
  icmp_send_response(p, ICMP_DUR, t);
 8017ef4:	78fb      	ldrb	r3, [r7, #3]
 8017ef6:	461a      	mov	r2, r3
 8017ef8:	2103      	movs	r1, #3
 8017efa:	6878      	ldr	r0, [r7, #4]
 8017efc:	f000 f814 	bl	8017f28 <icmp_send_response>
}
 8017f00:	bf00      	nop
 8017f02:	3708      	adds	r7, #8
 8017f04:	46bd      	mov	sp, r7
 8017f06:	bd80      	pop	{r7, pc}

08017f08 <icmp_time_exceeded>:
 *          p->payload pointing to the IP header
 * @param t type of the 'time exceeded' packet
 */
void
icmp_time_exceeded(struct pbuf *p, enum icmp_te_type t)
{
 8017f08:	b580      	push	{r7, lr}
 8017f0a:	b082      	sub	sp, #8
 8017f0c:	af00      	add	r7, sp, #0
 8017f0e:	6078      	str	r0, [r7, #4]
 8017f10:	460b      	mov	r3, r1
 8017f12:	70fb      	strb	r3, [r7, #3]
  MIB2_STATS_INC(mib2.icmpouttimeexcds);
  icmp_send_response(p, ICMP_TE, t);
 8017f14:	78fb      	ldrb	r3, [r7, #3]
 8017f16:	461a      	mov	r2, r3
 8017f18:	210b      	movs	r1, #11
 8017f1a:	6878      	ldr	r0, [r7, #4]
 8017f1c:	f000 f804 	bl	8017f28 <icmp_send_response>
}
 8017f20:	bf00      	nop
 8017f22:	3708      	adds	r7, #8
 8017f24:	46bd      	mov	sp, r7
 8017f26:	bd80      	pop	{r7, pc}

08017f28 <icmp_send_response>:
 * @param type Type of the ICMP header
 * @param code Code of the ICMP header
 */
static void
icmp_send_response(struct pbuf *p, u8_t type, u8_t code)
{
 8017f28:	b580      	push	{r7, lr}
 8017f2a:	b08c      	sub	sp, #48	; 0x30
 8017f2c:	af04      	add	r7, sp, #16
 8017f2e:	6078      	str	r0, [r7, #4]
 8017f30:	460b      	mov	r3, r1
 8017f32:	70fb      	strb	r3, [r7, #3]
 8017f34:	4613      	mov	r3, r2
 8017f36:	70bb      	strb	r3, [r7, #2]

  /* increase number of messages attempted to send */
  MIB2_STATS_INC(mib2.icmpoutmsgs);

  /* ICMP header + IP header + 8 bytes of data */
  q = pbuf_alloc(PBUF_IP, sizeof(struct icmp_echo_hdr) + IP_HLEN + ICMP_DEST_UNREACH_DATASIZE,
 8017f38:	f44f 7220 	mov.w	r2, #640	; 0x280
 8017f3c:	2124      	movs	r1, #36	; 0x24
 8017f3e:	2022      	movs	r0, #34	; 0x22
 8017f40:	f7f8 fdd2 	bl	8010ae8 <pbuf_alloc>
 8017f44:	61f8      	str	r0, [r7, #28]
                 PBUF_RAM);
  if (q == NULL) {
 8017f46:	69fb      	ldr	r3, [r7, #28]
 8017f48:	2b00      	cmp	r3, #0
 8017f4a:	d056      	beq.n	8017ffa <icmp_send_response+0xd2>
    LWIP_DEBUGF(ICMP_DEBUG, ("icmp_time_exceeded: failed to allocate pbuf for ICMP packet.\n"));
    MIB2_STATS_INC(mib2.icmpouterrors);
    return;
  }
  LWIP_ASSERT("check that first pbuf can hold icmp message",
 8017f4c:	69fb      	ldr	r3, [r7, #28]
 8017f4e:	895b      	ldrh	r3, [r3, #10]
 8017f50:	2b23      	cmp	r3, #35	; 0x23
 8017f52:	d806      	bhi.n	8017f62 <icmp_send_response+0x3a>
 8017f54:	4b2b      	ldr	r3, [pc, #172]	; (8018004 <icmp_send_response+0xdc>)
 8017f56:	f44f 72b4 	mov.w	r2, #360	; 0x168
 8017f5a:	492b      	ldr	r1, [pc, #172]	; (8018008 <icmp_send_response+0xe0>)
 8017f5c:	482b      	ldr	r0, [pc, #172]	; (801800c <icmp_send_response+0xe4>)
 8017f5e:	f001 ff7f 	bl	8019e60 <iprintf>
              (q->len >= (sizeof(struct icmp_echo_hdr) + IP_HLEN + ICMP_DEST_UNREACH_DATASIZE)));

  iphdr = (struct ip_hdr *)p->payload;
 8017f62:	687b      	ldr	r3, [r7, #4]
 8017f64:	685b      	ldr	r3, [r3, #4]
 8017f66:	61bb      	str	r3, [r7, #24]
  ip4_addr_debug_print_val(ICMP_DEBUG, iphdr->src);
  LWIP_DEBUGF(ICMP_DEBUG, (" to "));
  ip4_addr_debug_print_val(ICMP_DEBUG, iphdr->dest);
  LWIP_DEBUGF(ICMP_DEBUG, ("\n"));

  icmphdr = (struct icmp_echo_hdr *)q->payload;
 8017f68:	69fb      	ldr	r3, [r7, #28]
 8017f6a:	685b      	ldr	r3, [r3, #4]
 8017f6c:	617b      	str	r3, [r7, #20]
  icmphdr->type = type;
 8017f6e:	697b      	ldr	r3, [r7, #20]
 8017f70:	78fa      	ldrb	r2, [r7, #3]
 8017f72:	701a      	strb	r2, [r3, #0]
  icmphdr->code = code;
 8017f74:	697b      	ldr	r3, [r7, #20]
 8017f76:	78ba      	ldrb	r2, [r7, #2]
 8017f78:	705a      	strb	r2, [r3, #1]
  icmphdr->id = 0;
 8017f7a:	697b      	ldr	r3, [r7, #20]
 8017f7c:	2200      	movs	r2, #0
 8017f7e:	711a      	strb	r2, [r3, #4]
 8017f80:	2200      	movs	r2, #0
 8017f82:	715a      	strb	r2, [r3, #5]
  icmphdr->seqno = 0;
 8017f84:	697b      	ldr	r3, [r7, #20]
 8017f86:	2200      	movs	r2, #0
 8017f88:	719a      	strb	r2, [r3, #6]
 8017f8a:	2200      	movs	r2, #0
 8017f8c:	71da      	strb	r2, [r3, #7]

  /* copy fields from original packet */
  SMEMCPY((u8_t *)q->payload + sizeof(struct icmp_echo_hdr), (u8_t *)p->payload,
 8017f8e:	69fb      	ldr	r3, [r7, #28]
 8017f90:	685b      	ldr	r3, [r3, #4]
 8017f92:	f103 0008 	add.w	r0, r3, #8
 8017f96:	687b      	ldr	r3, [r7, #4]
 8017f98:	685b      	ldr	r3, [r3, #4]
 8017f9a:	221c      	movs	r2, #28
 8017f9c:	4619      	mov	r1, r3
 8017f9e:	f002 f92e 	bl	801a1fe <memcpy>
          IP_HLEN + ICMP_DEST_UNREACH_DATASIZE);

  ip4_addr_copy(iphdr_src, iphdr->src);
 8017fa2:	69bb      	ldr	r3, [r7, #24]
 8017fa4:	68db      	ldr	r3, [r3, #12]
 8017fa6:	60fb      	str	r3, [r7, #12]
    ip4_addr_t iphdr_dst;
    ip4_addr_copy(iphdr_dst, iphdr->dest);
    netif = ip4_route_src(&iphdr_dst, &iphdr_src);
  }
#else
  netif = ip4_route(&iphdr_src);
 8017fa8:	f107 030c 	add.w	r3, r7, #12
 8017fac:	4618      	mov	r0, r3
 8017fae:	f000 f82f 	bl	8018010 <ip4_route>
 8017fb2:	6138      	str	r0, [r7, #16]
#endif
  if (netif != NULL) {
 8017fb4:	693b      	ldr	r3, [r7, #16]
 8017fb6:	2b00      	cmp	r3, #0
 8017fb8:	d01b      	beq.n	8017ff2 <icmp_send_response+0xca>
    /* calculate checksum */
    icmphdr->chksum = 0;
 8017fba:	697b      	ldr	r3, [r7, #20]
 8017fbc:	2200      	movs	r2, #0
 8017fbe:	709a      	strb	r2, [r3, #2]
 8017fc0:	2200      	movs	r2, #0
 8017fc2:	70da      	strb	r2, [r3, #3]
#if CHECKSUM_GEN_ICMP
    IF__NETIF_CHECKSUM_ENABLED(netif, NETIF_CHECKSUM_GEN_ICMP) {
      icmphdr->chksum = inet_chksum(icmphdr, q->len);
 8017fc4:	69fb      	ldr	r3, [r7, #28]
 8017fc6:	895b      	ldrh	r3, [r3, #10]
 8017fc8:	4619      	mov	r1, r3
 8017fca:	6978      	ldr	r0, [r7, #20]
 8017fcc:	f7f7 fd17 	bl	800f9fe <inet_chksum>
 8017fd0:	4603      	mov	r3, r0
 8017fd2:	461a      	mov	r2, r3
 8017fd4:	697b      	ldr	r3, [r7, #20]
 8017fd6:	805a      	strh	r2, [r3, #2]
    }
#endif
    ICMP_STATS_INC(icmp.xmit);
    ip4_output_if(q, NULL, &iphdr_src, ICMP_TTL, 0, IP_PROTO_ICMP, netif);
 8017fd8:	f107 020c 	add.w	r2, r7, #12
 8017fdc:	693b      	ldr	r3, [r7, #16]
 8017fde:	9302      	str	r3, [sp, #8]
 8017fe0:	2301      	movs	r3, #1
 8017fe2:	9301      	str	r3, [sp, #4]
 8017fe4:	2300      	movs	r3, #0
 8017fe6:	9300      	str	r3, [sp, #0]
 8017fe8:	23ff      	movs	r3, #255	; 0xff
 8017fea:	2100      	movs	r1, #0
 8017fec:	69f8      	ldr	r0, [r7, #28]
 8017fee:	f000 f9cd 	bl	801838c <ip4_output_if>
  }
  pbuf_free(q);
 8017ff2:	69f8      	ldr	r0, [r7, #28]
 8017ff4:	f7f9 f85c 	bl	80110b0 <pbuf_free>
 8017ff8:	e000      	b.n	8017ffc <icmp_send_response+0xd4>
    return;
 8017ffa:	bf00      	nop
}
 8017ffc:	3720      	adds	r7, #32
 8017ffe:	46bd      	mov	sp, r7
 8018000:	bd80      	pop	{r7, pc}
 8018002:	bf00      	nop
 8018004:	0801ef4c 	.word	0x0801ef4c
 8018008:	0801f018 	.word	0x0801f018
 801800c:	0801efbc 	.word	0x0801efbc

08018010 <ip4_route>:
 * @param dest the destination IP address for which to find the route
 * @return the netif on which to send to reach dest
 */
struct netif *
ip4_route(const ip4_addr_t *dest)
{
 8018010:	b480      	push	{r7}
 8018012:	b085      	sub	sp, #20
 8018014:	af00      	add	r7, sp, #0
 8018016:	6078      	str	r0, [r7, #4]

  /* bug #54569: in case LWIP_SINGLE_NETIF=1 and LWIP_DEBUGF() disabled, the following loop is optimized away */
  LWIP_UNUSED_ARG(dest);

  /* iterate through netifs */
  NETIF_FOREACH(netif) {
 8018018:	4b33      	ldr	r3, [pc, #204]	; (80180e8 <ip4_route+0xd8>)
 801801a:	681b      	ldr	r3, [r3, #0]
 801801c:	60fb      	str	r3, [r7, #12]
 801801e:	e036      	b.n	801808e <ip4_route+0x7e>
    /* is the netif up, does it have a link and a valid address? */
    if (netif_is_up(netif) && netif_is_link_up(netif) && !ip4_addr_isany_val(*netif_ip4_addr(netif))) {
 8018020:	68fb      	ldr	r3, [r7, #12]
 8018022:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8018026:	f003 0301 	and.w	r3, r3, #1
 801802a:	b2db      	uxtb	r3, r3
 801802c:	2b00      	cmp	r3, #0
 801802e:	d02b      	beq.n	8018088 <ip4_route+0x78>
 8018030:	68fb      	ldr	r3, [r7, #12]
 8018032:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8018036:	089b      	lsrs	r3, r3, #2
 8018038:	f003 0301 	and.w	r3, r3, #1
 801803c:	b2db      	uxtb	r3, r3
 801803e:	2b00      	cmp	r3, #0
 8018040:	d022      	beq.n	8018088 <ip4_route+0x78>
 8018042:	68fb      	ldr	r3, [r7, #12]
 8018044:	3304      	adds	r3, #4
 8018046:	681b      	ldr	r3, [r3, #0]
 8018048:	2b00      	cmp	r3, #0
 801804a:	d01d      	beq.n	8018088 <ip4_route+0x78>
      /* network mask matches? */
      if (ip4_addr_netcmp(dest, netif_ip4_addr(netif), netif_ip4_netmask(netif))) {
 801804c:	687b      	ldr	r3, [r7, #4]
 801804e:	681a      	ldr	r2, [r3, #0]
 8018050:	68fb      	ldr	r3, [r7, #12]
 8018052:	3304      	adds	r3, #4
 8018054:	681b      	ldr	r3, [r3, #0]
 8018056:	405a      	eors	r2, r3
 8018058:	68fb      	ldr	r3, [r7, #12]
 801805a:	3308      	adds	r3, #8
 801805c:	681b      	ldr	r3, [r3, #0]
 801805e:	4013      	ands	r3, r2
 8018060:	2b00      	cmp	r3, #0
 8018062:	d101      	bne.n	8018068 <ip4_route+0x58>
        /* return netif on which to forward IP packet */
        return netif;
 8018064:	68fb      	ldr	r3, [r7, #12]
 8018066:	e038      	b.n	80180da <ip4_route+0xca>
      }
      /* gateway matches on a non broadcast interface? (i.e. peer in a point to point interface) */
      if (((netif->flags & NETIF_FLAG_BROADCAST) == 0) && ip4_addr_cmp(dest, netif_ip4_gw(netif))) {
 8018068:	68fb      	ldr	r3, [r7, #12]
 801806a:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 801806e:	f003 0302 	and.w	r3, r3, #2
 8018072:	2b00      	cmp	r3, #0
 8018074:	d108      	bne.n	8018088 <ip4_route+0x78>
 8018076:	687b      	ldr	r3, [r7, #4]
 8018078:	681a      	ldr	r2, [r3, #0]
 801807a:	68fb      	ldr	r3, [r7, #12]
 801807c:	330c      	adds	r3, #12
 801807e:	681b      	ldr	r3, [r3, #0]
 8018080:	429a      	cmp	r2, r3
 8018082:	d101      	bne.n	8018088 <ip4_route+0x78>
        /* return netif on which to forward IP packet */
        return netif;
 8018084:	68fb      	ldr	r3, [r7, #12]
 8018086:	e028      	b.n	80180da <ip4_route+0xca>
  NETIF_FOREACH(netif) {
 8018088:	68fb      	ldr	r3, [r7, #12]
 801808a:	681b      	ldr	r3, [r3, #0]
 801808c:	60fb      	str	r3, [r7, #12]
 801808e:	68fb      	ldr	r3, [r7, #12]
 8018090:	2b00      	cmp	r3, #0
 8018092:	d1c5      	bne.n	8018020 <ip4_route+0x10>
    return netif;
  }
#endif
#endif /* !LWIP_SINGLE_NETIF */

  if ((netif_default == NULL) || !netif_is_up(netif_default) || !netif_is_link_up(netif_default) ||
 8018094:	4b15      	ldr	r3, [pc, #84]	; (80180ec <ip4_route+0xdc>)
 8018096:	681b      	ldr	r3, [r3, #0]
 8018098:	2b00      	cmp	r3, #0
 801809a:	d01a      	beq.n	80180d2 <ip4_route+0xc2>
 801809c:	4b13      	ldr	r3, [pc, #76]	; (80180ec <ip4_route+0xdc>)
 801809e:	681b      	ldr	r3, [r3, #0]
 80180a0:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 80180a4:	f003 0301 	and.w	r3, r3, #1
 80180a8:	2b00      	cmp	r3, #0
 80180aa:	d012      	beq.n	80180d2 <ip4_route+0xc2>
 80180ac:	4b0f      	ldr	r3, [pc, #60]	; (80180ec <ip4_route+0xdc>)
 80180ae:	681b      	ldr	r3, [r3, #0]
 80180b0:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 80180b4:	f003 0304 	and.w	r3, r3, #4
 80180b8:	2b00      	cmp	r3, #0
 80180ba:	d00a      	beq.n	80180d2 <ip4_route+0xc2>
      ip4_addr_isany_val(*netif_ip4_addr(netif_default)) || ip4_addr_isloopback(dest)) {
 80180bc:	4b0b      	ldr	r3, [pc, #44]	; (80180ec <ip4_route+0xdc>)
 80180be:	681b      	ldr	r3, [r3, #0]
 80180c0:	3304      	adds	r3, #4
 80180c2:	681b      	ldr	r3, [r3, #0]
  if ((netif_default == NULL) || !netif_is_up(netif_default) || !netif_is_link_up(netif_default) ||
 80180c4:	2b00      	cmp	r3, #0
 80180c6:	d004      	beq.n	80180d2 <ip4_route+0xc2>
      ip4_addr_isany_val(*netif_ip4_addr(netif_default)) || ip4_addr_isloopback(dest)) {
 80180c8:	687b      	ldr	r3, [r7, #4]
 80180ca:	681b      	ldr	r3, [r3, #0]
 80180cc:	b2db      	uxtb	r3, r3
 80180ce:	2b7f      	cmp	r3, #127	; 0x7f
 80180d0:	d101      	bne.n	80180d6 <ip4_route+0xc6>
       If this is not good enough for you, use LWIP_HOOK_IP4_ROUTE() */
    LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("ip4_route: No route to %"U16_F".%"U16_F".%"U16_F".%"U16_F"\n",
                ip4_addr1_16(dest), ip4_addr2_16(dest), ip4_addr3_16(dest), ip4_addr4_16(dest)));
    IP_STATS_INC(ip.rterr);
    MIB2_STATS_INC(mib2.ipoutnoroutes);
    return NULL;
 80180d2:	2300      	movs	r3, #0
 80180d4:	e001      	b.n	80180da <ip4_route+0xca>
  }

  return netif_default;
 80180d6:	4b05      	ldr	r3, [pc, #20]	; (80180ec <ip4_route+0xdc>)
 80180d8:	681b      	ldr	r3, [r3, #0]
}
 80180da:	4618      	mov	r0, r3
 80180dc:	3714      	adds	r7, #20
 80180de:	46bd      	mov	sp, r7
 80180e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80180e4:	4770      	bx	lr
 80180e6:	bf00      	nop
 80180e8:	200070c8 	.word	0x200070c8
 80180ec:	200070cc 	.word	0x200070cc

080180f0 <ip4_input_accept>:
#endif /* IP_FORWARD */

/** Return true if the current input packet should be accepted on this netif */
static int
ip4_input_accept(struct netif *netif)
{
 80180f0:	b580      	push	{r7, lr}
 80180f2:	b082      	sub	sp, #8
 80180f4:	af00      	add	r7, sp, #0
 80180f6:	6078      	str	r0, [r7, #4]
                         ip4_addr_get_u32(ip4_current_dest_addr()) & ip4_addr_get_u32(netif_ip4_netmask(netif)),
                         ip4_addr_get_u32(netif_ip4_addr(netif)) & ip4_addr_get_u32(netif_ip4_netmask(netif)),
                         ip4_addr_get_u32(ip4_current_dest_addr()) & ~ip4_addr_get_u32(netif_ip4_netmask(netif))));

  /* interface is up and configured? */
  if ((netif_is_up(netif)) && (!ip4_addr_isany_val(*netif_ip4_addr(netif)))) {
 80180f8:	687b      	ldr	r3, [r7, #4]
 80180fa:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 80180fe:	f003 0301 	and.w	r3, r3, #1
 8018102:	b2db      	uxtb	r3, r3
 8018104:	2b00      	cmp	r3, #0
 8018106:	d016      	beq.n	8018136 <ip4_input_accept+0x46>
 8018108:	687b      	ldr	r3, [r7, #4]
 801810a:	3304      	adds	r3, #4
 801810c:	681b      	ldr	r3, [r3, #0]
 801810e:	2b00      	cmp	r3, #0
 8018110:	d011      	beq.n	8018136 <ip4_input_accept+0x46>
    /* unicast to this interface address? */
    if (ip4_addr_cmp(ip4_current_dest_addr(), netif_ip4_addr(netif)) ||
 8018112:	4b0b      	ldr	r3, [pc, #44]	; (8018140 <ip4_input_accept+0x50>)
 8018114:	695a      	ldr	r2, [r3, #20]
 8018116:	687b      	ldr	r3, [r7, #4]
 8018118:	3304      	adds	r3, #4
 801811a:	681b      	ldr	r3, [r3, #0]
 801811c:	429a      	cmp	r2, r3
 801811e:	d008      	beq.n	8018132 <ip4_input_accept+0x42>
        /* or broadcast on this interface network address? */
        ip4_addr_isbroadcast(ip4_current_dest_addr(), netif)
 8018120:	4b07      	ldr	r3, [pc, #28]	; (8018140 <ip4_input_accept+0x50>)
 8018122:	695b      	ldr	r3, [r3, #20]
 8018124:	6879      	ldr	r1, [r7, #4]
 8018126:	4618      	mov	r0, r3
 8018128:	f000 fa08 	bl	801853c <ip4_addr_isbroadcast_u32>
 801812c:	4603      	mov	r3, r0
    if (ip4_addr_cmp(ip4_current_dest_addr(), netif_ip4_addr(netif)) ||
 801812e:	2b00      	cmp	r3, #0
 8018130:	d001      	beq.n	8018136 <ip4_input_accept+0x46>
#endif /* LWIP_NETIF_LOOPBACK && !LWIP_HAVE_LOOPIF */
       ) {
      LWIP_DEBUGF(IP_DEBUG, ("ip4_input: packet accepted on interface %c%c\n",
                             netif->name[0], netif->name[1]));
      /* accept on this netif */
      return 1;
 8018132:	2301      	movs	r3, #1
 8018134:	e000      	b.n	8018138 <ip4_input_accept+0x48>
      /* accept on this netif */
      return 1;
    }
#endif /* LWIP_AUTOIP */
  }
  return 0;
 8018136:	2300      	movs	r3, #0
}
 8018138:	4618      	mov	r0, r3
 801813a:	3708      	adds	r7, #8
 801813c:	46bd      	mov	sp, r7
 801813e:	bd80      	pop	{r7, pc}
 8018140:	200007f8 	.word	0x200007f8

08018144 <ip4_input>:
 * @return ERR_OK if the packet was processed (could return ERR_* if it wasn't
 *         processed, but currently always returns ERR_OK)
 */
err_t
ip4_input(struct pbuf *p, struct netif *inp)
{
 8018144:	b580      	push	{r7, lr}
 8018146:	b086      	sub	sp, #24
 8018148:	af00      	add	r7, sp, #0
 801814a:	6078      	str	r0, [r7, #4]
 801814c:	6039      	str	r1, [r7, #0]

  IP_STATS_INC(ip.recv);
  MIB2_STATS_INC(mib2.ipinreceives);

  /* identify the IP header */
  iphdr = (struct ip_hdr *)p->payload;
 801814e:	687b      	ldr	r3, [r7, #4]
 8018150:	685b      	ldr	r3, [r3, #4]
 8018152:	617b      	str	r3, [r7, #20]
  if (IPH_V(iphdr) != 4) {
 8018154:	697b      	ldr	r3, [r7, #20]
 8018156:	781b      	ldrb	r3, [r3, #0]
 8018158:	091b      	lsrs	r3, r3, #4
 801815a:	b2db      	uxtb	r3, r3
 801815c:	2b04      	cmp	r3, #4
 801815e:	d004      	beq.n	801816a <ip4_input+0x26>
    LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_WARNING, ("IP packet dropped due to bad version number %"U16_F"\n", (u16_t)IPH_V(iphdr)));
    ip4_debug_print(p);
    pbuf_free(p);
 8018160:	6878      	ldr	r0, [r7, #4]
 8018162:	f7f8 ffa5 	bl	80110b0 <pbuf_free>
    IP_STATS_INC(ip.err);
    IP_STATS_INC(ip.drop);
    MIB2_STATS_INC(mib2.ipinhdrerrors);
    return ERR_OK;
 8018166:	2300      	movs	r3, #0
 8018168:	e107      	b.n	801837a <ip4_input+0x236>
    return ERR_OK;
  }
#endif

  /* obtain IP header length in bytes */
  iphdr_hlen = IPH_HL_BYTES(iphdr);
 801816a:	697b      	ldr	r3, [r7, #20]
 801816c:	781b      	ldrb	r3, [r3, #0]
 801816e:	f003 030f 	and.w	r3, r3, #15
 8018172:	b2db      	uxtb	r3, r3
 8018174:	009b      	lsls	r3, r3, #2
 8018176:	b2db      	uxtb	r3, r3
 8018178:	81fb      	strh	r3, [r7, #14]
  /* obtain ip length in bytes */
  iphdr_len = lwip_ntohs(IPH_LEN(iphdr));
 801817a:	697b      	ldr	r3, [r7, #20]
 801817c:	885b      	ldrh	r3, [r3, #2]
 801817e:	b29b      	uxth	r3, r3
 8018180:	4618      	mov	r0, r3
 8018182:	f7f7 fbb1 	bl	800f8e8 <lwip_htons>
 8018186:	4603      	mov	r3, r0
 8018188:	81bb      	strh	r3, [r7, #12]

  /* Trim pbuf. This is especially required for packets < 60 bytes. */
  if (iphdr_len < p->tot_len) {
 801818a:	687b      	ldr	r3, [r7, #4]
 801818c:	891b      	ldrh	r3, [r3, #8]
 801818e:	89ba      	ldrh	r2, [r7, #12]
 8018190:	429a      	cmp	r2, r3
 8018192:	d204      	bcs.n	801819e <ip4_input+0x5a>
    pbuf_realloc(p, iphdr_len);
 8018194:	89bb      	ldrh	r3, [r7, #12]
 8018196:	4619      	mov	r1, r3
 8018198:	6878      	ldr	r0, [r7, #4]
 801819a:	f7f8 fe05 	bl	8010da8 <pbuf_realloc>
  }

  /* header length exceeds first pbuf length, or ip length exceeds total pbuf length? */
  if ((iphdr_hlen > p->len) || (iphdr_len > p->tot_len) || (iphdr_hlen < IP_HLEN)) {
 801819e:	687b      	ldr	r3, [r7, #4]
 80181a0:	895b      	ldrh	r3, [r3, #10]
 80181a2:	89fa      	ldrh	r2, [r7, #14]
 80181a4:	429a      	cmp	r2, r3
 80181a6:	d807      	bhi.n	80181b8 <ip4_input+0x74>
 80181a8:	687b      	ldr	r3, [r7, #4]
 80181aa:	891b      	ldrh	r3, [r3, #8]
 80181ac:	89ba      	ldrh	r2, [r7, #12]
 80181ae:	429a      	cmp	r2, r3
 80181b0:	d802      	bhi.n	80181b8 <ip4_input+0x74>
 80181b2:	89fb      	ldrh	r3, [r7, #14]
 80181b4:	2b13      	cmp	r3, #19
 80181b6:	d804      	bhi.n	80181c2 <ip4_input+0x7e>
      LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_SERIOUS,
                  ("IP (len %"U16_F") is longer than pbuf (len %"U16_F"), IP packet dropped.\n",
                   iphdr_len, p->tot_len));
    }
    /* free (drop) packet pbufs */
    pbuf_free(p);
 80181b8:	6878      	ldr	r0, [r7, #4]
 80181ba:	f7f8 ff79 	bl	80110b0 <pbuf_free>
    IP_STATS_INC(ip.lenerr);
    IP_STATS_INC(ip.drop);
    MIB2_STATS_INC(mib2.ipindiscards);
    return ERR_OK;
 80181be:	2300      	movs	r3, #0
 80181c0:	e0db      	b.n	801837a <ip4_input+0x236>
    }
  }
#endif

  /* copy IP addresses to aligned ip_addr_t */
  ip_addr_copy_from_ip4(ip_data.current_iphdr_dest, iphdr->dest);
 80181c2:	697b      	ldr	r3, [r7, #20]
 80181c4:	691b      	ldr	r3, [r3, #16]
 80181c6:	4a6f      	ldr	r2, [pc, #444]	; (8018384 <ip4_input+0x240>)
 80181c8:	6153      	str	r3, [r2, #20]
  ip_addr_copy_from_ip4(ip_data.current_iphdr_src, iphdr->src);
 80181ca:	697b      	ldr	r3, [r7, #20]
 80181cc:	68db      	ldr	r3, [r3, #12]
 80181ce:	4a6d      	ldr	r2, [pc, #436]	; (8018384 <ip4_input+0x240>)
 80181d0:	6113      	str	r3, [r2, #16]

  /* match packet against an interface, i.e. is this packet for us? */
  if (ip4_addr_ismulticast(ip4_current_dest_addr())) {
 80181d2:	4b6c      	ldr	r3, [pc, #432]	; (8018384 <ip4_input+0x240>)
 80181d4:	695b      	ldr	r3, [r3, #20]
 80181d6:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80181da:	2be0      	cmp	r3, #224	; 0xe0
 80181dc:	d112      	bne.n	8018204 <ip4_input+0xc0>
      netif = inp;
    } else {
      netif = NULL;
    }
#else /* LWIP_IGMP */
    if ((netif_is_up(inp)) && (!ip4_addr_isany_val(*netif_ip4_addr(inp)))) {
 80181de:	683b      	ldr	r3, [r7, #0]
 80181e0:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 80181e4:	f003 0301 	and.w	r3, r3, #1
 80181e8:	b2db      	uxtb	r3, r3
 80181ea:	2b00      	cmp	r3, #0
 80181ec:	d007      	beq.n	80181fe <ip4_input+0xba>
 80181ee:	683b      	ldr	r3, [r7, #0]
 80181f0:	3304      	adds	r3, #4
 80181f2:	681b      	ldr	r3, [r3, #0]
 80181f4:	2b00      	cmp	r3, #0
 80181f6:	d002      	beq.n	80181fe <ip4_input+0xba>
      netif = inp;
 80181f8:	683b      	ldr	r3, [r7, #0]
 80181fa:	613b      	str	r3, [r7, #16]
 80181fc:	e02a      	b.n	8018254 <ip4_input+0x110>
    } else {
      netif = NULL;
 80181fe:	2300      	movs	r3, #0
 8018200:	613b      	str	r3, [r7, #16]
 8018202:	e027      	b.n	8018254 <ip4_input+0x110>
    }
#endif /* LWIP_IGMP */
  } else {
    /* start trying with inp. if that's not acceptable, start walking the
       list of configured netifs. */
    if (ip4_input_accept(inp)) {
 8018204:	6838      	ldr	r0, [r7, #0]
 8018206:	f7ff ff73 	bl	80180f0 <ip4_input_accept>
 801820a:	4603      	mov	r3, r0
 801820c:	2b00      	cmp	r3, #0
 801820e:	d002      	beq.n	8018216 <ip4_input+0xd2>
      netif = inp;
 8018210:	683b      	ldr	r3, [r7, #0]
 8018212:	613b      	str	r3, [r7, #16]
 8018214:	e01e      	b.n	8018254 <ip4_input+0x110>
    } else {
      netif = NULL;
 8018216:	2300      	movs	r3, #0
 8018218:	613b      	str	r3, [r7, #16]
#if !LWIP_NETIF_LOOPBACK || LWIP_HAVE_LOOPIF
      /* Packets sent to the loopback address must not be accepted on an
       * interface that does not have the loopback address assigned to it,
       * unless a non-loopback interface is used for loopback traffic. */
      if (!ip4_addr_isloopback(ip4_current_dest_addr()))
 801821a:	4b5a      	ldr	r3, [pc, #360]	; (8018384 <ip4_input+0x240>)
 801821c:	695b      	ldr	r3, [r3, #20]
 801821e:	b2db      	uxtb	r3, r3
 8018220:	2b7f      	cmp	r3, #127	; 0x7f
 8018222:	d017      	beq.n	8018254 <ip4_input+0x110>
#endif /* !LWIP_NETIF_LOOPBACK || LWIP_HAVE_LOOPIF */
      {
#if !LWIP_SINGLE_NETIF
        NETIF_FOREACH(netif) {
 8018224:	4b58      	ldr	r3, [pc, #352]	; (8018388 <ip4_input+0x244>)
 8018226:	681b      	ldr	r3, [r3, #0]
 8018228:	613b      	str	r3, [r7, #16]
 801822a:	e00e      	b.n	801824a <ip4_input+0x106>
          if (netif == inp) {
 801822c:	693a      	ldr	r2, [r7, #16]
 801822e:	683b      	ldr	r3, [r7, #0]
 8018230:	429a      	cmp	r2, r3
 8018232:	d006      	beq.n	8018242 <ip4_input+0xfe>
            /* we checked that before already */
            continue;
          }
          if (ip4_input_accept(netif)) {
 8018234:	6938      	ldr	r0, [r7, #16]
 8018236:	f7ff ff5b 	bl	80180f0 <ip4_input_accept>
 801823a:	4603      	mov	r3, r0
 801823c:	2b00      	cmp	r3, #0
 801823e:	d108      	bne.n	8018252 <ip4_input+0x10e>
 8018240:	e000      	b.n	8018244 <ip4_input+0x100>
            continue;
 8018242:	bf00      	nop
        NETIF_FOREACH(netif) {
 8018244:	693b      	ldr	r3, [r7, #16]
 8018246:	681b      	ldr	r3, [r3, #0]
 8018248:	613b      	str	r3, [r7, #16]
 801824a:	693b      	ldr	r3, [r7, #16]
 801824c:	2b00      	cmp	r3, #0
 801824e:	d1ed      	bne.n	801822c <ip4_input+0xe8>
 8018250:	e000      	b.n	8018254 <ip4_input+0x110>
            break;
 8018252:	bf00      	nop
      && !ip4_addr_isany_val(*ip4_current_src_addr())
#endif /* IP_ACCEPT_LINK_LAYER_ADDRESSING */
     )
#endif /* LWIP_IGMP || IP_ACCEPT_LINK_LAYER_ADDRESSING */
  {
    if ((ip4_addr_isbroadcast(ip4_current_src_addr(), inp)) ||
 8018254:	4b4b      	ldr	r3, [pc, #300]	; (8018384 <ip4_input+0x240>)
 8018256:	691b      	ldr	r3, [r3, #16]
 8018258:	6839      	ldr	r1, [r7, #0]
 801825a:	4618      	mov	r0, r3
 801825c:	f000 f96e 	bl	801853c <ip4_addr_isbroadcast_u32>
 8018260:	4603      	mov	r3, r0
 8018262:	2b00      	cmp	r3, #0
 8018264:	d105      	bne.n	8018272 <ip4_input+0x12e>
        (ip4_addr_ismulticast(ip4_current_src_addr()))) {
 8018266:	4b47      	ldr	r3, [pc, #284]	; (8018384 <ip4_input+0x240>)
 8018268:	691b      	ldr	r3, [r3, #16]
 801826a:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
    if ((ip4_addr_isbroadcast(ip4_current_src_addr(), inp)) ||
 801826e:	2be0      	cmp	r3, #224	; 0xe0
 8018270:	d104      	bne.n	801827c <ip4_input+0x138>
      /* packet source is not valid */
      LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_WARNING, ("ip4_input: packet source is not valid.\n"));
      /* free (drop) packet pbufs */
      pbuf_free(p);
 8018272:	6878      	ldr	r0, [r7, #4]
 8018274:	f7f8 ff1c 	bl	80110b0 <pbuf_free>
      IP_STATS_INC(ip.drop);
      MIB2_STATS_INC(mib2.ipinaddrerrors);
      MIB2_STATS_INC(mib2.ipindiscards);
      return ERR_OK;
 8018278:	2300      	movs	r3, #0
 801827a:	e07e      	b.n	801837a <ip4_input+0x236>
    }
  }

  /* packet not for us? */
  if (netif == NULL) {
 801827c:	693b      	ldr	r3, [r7, #16]
 801827e:	2b00      	cmp	r3, #0
 8018280:	d104      	bne.n	801828c <ip4_input+0x148>
    {
      IP_STATS_INC(ip.drop);
      MIB2_STATS_INC(mib2.ipinaddrerrors);
      MIB2_STATS_INC(mib2.ipindiscards);
    }
    pbuf_free(p);
 8018282:	6878      	ldr	r0, [r7, #4]
 8018284:	f7f8 ff14 	bl	80110b0 <pbuf_free>
    return ERR_OK;
 8018288:	2300      	movs	r3, #0
 801828a:	e076      	b.n	801837a <ip4_input+0x236>
  }
  /* packet consists of multiple fragments? */
  if ((IPH_OFFSET(iphdr) & PP_HTONS(IP_OFFMASK | IP_MF)) != 0) {
 801828c:	697b      	ldr	r3, [r7, #20]
 801828e:	88db      	ldrh	r3, [r3, #6]
 8018290:	b29b      	uxth	r3, r3
 8018292:	461a      	mov	r2, r3
 8018294:	f64f 733f 	movw	r3, #65343	; 0xff3f
 8018298:	4013      	ands	r3, r2
 801829a:	2b00      	cmp	r3, #0
 801829c:	d00b      	beq.n	80182b6 <ip4_input+0x172>
#if IP_REASSEMBLY /* packet fragment reassembly code present? */
    LWIP_DEBUGF(IP_DEBUG, ("IP packet is a fragment (id=0x%04"X16_F" tot_len=%"U16_F" len=%"U16_F" MF=%"U16_F" offset=%"U16_F"), calling ip4_reass()\n",
                           lwip_ntohs(IPH_ID(iphdr)), p->tot_len, lwip_ntohs(IPH_LEN(iphdr)), (u16_t)!!(IPH_OFFSET(iphdr) & PP_HTONS(IP_MF)), (u16_t)((lwip_ntohs(IPH_OFFSET(iphdr)) & IP_OFFMASK) * 8)));
    /* reassemble the packet*/
    p = ip4_reass(p);
 801829e:	6878      	ldr	r0, [r7, #4]
 80182a0:	f000 fc92 	bl	8018bc8 <ip4_reass>
 80182a4:	6078      	str	r0, [r7, #4]
    /* packet not fully reassembled yet? */
    if (p == NULL) {
 80182a6:	687b      	ldr	r3, [r7, #4]
 80182a8:	2b00      	cmp	r3, #0
 80182aa:	d101      	bne.n	80182b0 <ip4_input+0x16c>
      return ERR_OK;
 80182ac:	2300      	movs	r3, #0
 80182ae:	e064      	b.n	801837a <ip4_input+0x236>
    }
    iphdr = (const struct ip_hdr *)p->payload;
 80182b0:	687b      	ldr	r3, [r7, #4]
 80182b2:	685b      	ldr	r3, [r3, #4]
 80182b4:	617b      	str	r3, [r7, #20]
  /* send to upper layers */
  LWIP_DEBUGF(IP_DEBUG, ("ip4_input: \n"));
  ip4_debug_print(p);
  LWIP_DEBUGF(IP_DEBUG, ("ip4_input: p->len %"U16_F" p->tot_len %"U16_F"\n", p->len, p->tot_len));

  ip_data.current_netif = netif;
 80182b6:	4a33      	ldr	r2, [pc, #204]	; (8018384 <ip4_input+0x240>)
 80182b8:	693b      	ldr	r3, [r7, #16]
 80182ba:	6013      	str	r3, [r2, #0]
  ip_data.current_input_netif = inp;
 80182bc:	4a31      	ldr	r2, [pc, #196]	; (8018384 <ip4_input+0x240>)
 80182be:	683b      	ldr	r3, [r7, #0]
 80182c0:	6053      	str	r3, [r2, #4]
  ip_data.current_ip4_header = iphdr;
 80182c2:	4a30      	ldr	r2, [pc, #192]	; (8018384 <ip4_input+0x240>)
 80182c4:	697b      	ldr	r3, [r7, #20]
 80182c6:	6093      	str	r3, [r2, #8]
  ip_data.current_ip_header_tot_len = IPH_HL_BYTES(iphdr);
 80182c8:	697b      	ldr	r3, [r7, #20]
 80182ca:	781b      	ldrb	r3, [r3, #0]
 80182cc:	f003 030f 	and.w	r3, r3, #15
 80182d0:	b2db      	uxtb	r3, r3
 80182d2:	009b      	lsls	r3, r3, #2
 80182d4:	b2db      	uxtb	r3, r3
 80182d6:	b29a      	uxth	r2, r3
 80182d8:	4b2a      	ldr	r3, [pc, #168]	; (8018384 <ip4_input+0x240>)
 80182da:	819a      	strh	r2, [r3, #12]
  /* raw input did not eat the packet? */
  raw_status = raw_input(p, inp);
  if (raw_status != RAW_INPUT_EATEN)
#endif /* LWIP_RAW */
  {
    pbuf_remove_header(p, iphdr_hlen); /* Move to payload, no check necessary. */
 80182dc:	89fb      	ldrh	r3, [r7, #14]
 80182de:	4619      	mov	r1, r3
 80182e0:	6878      	ldr	r0, [r7, #4]
 80182e2:	f7f8 fe5f 	bl	8010fa4 <pbuf_remove_header>

    switch (IPH_PROTO(iphdr)) {
 80182e6:	697b      	ldr	r3, [r7, #20]
 80182e8:	7a5b      	ldrb	r3, [r3, #9]
 80182ea:	2b11      	cmp	r3, #17
 80182ec:	d006      	beq.n	80182fc <ip4_input+0x1b8>
 80182ee:	2b11      	cmp	r3, #17
 80182f0:	dc13      	bgt.n	801831a <ip4_input+0x1d6>
 80182f2:	2b01      	cmp	r3, #1
 80182f4:	d00c      	beq.n	8018310 <ip4_input+0x1cc>
 80182f6:	2b06      	cmp	r3, #6
 80182f8:	d005      	beq.n	8018306 <ip4_input+0x1c2>
 80182fa:	e00e      	b.n	801831a <ip4_input+0x1d6>
      case IP_PROTO_UDP:
#if LWIP_UDPLITE
      case IP_PROTO_UDPLITE:
#endif /* LWIP_UDPLITE */
        MIB2_STATS_INC(mib2.ipindelivers);
        udp_input(p, inp);
 80182fc:	6839      	ldr	r1, [r7, #0]
 80182fe:	6878      	ldr	r0, [r7, #4]
 8018300:	f7fe fc42 	bl	8016b88 <udp_input>
        break;
 8018304:	e026      	b.n	8018354 <ip4_input+0x210>
#endif /* LWIP_UDP */
#if LWIP_TCP
      case IP_PROTO_TCP:
        MIB2_STATS_INC(mib2.ipindelivers);
        tcp_input(p, inp);
 8018306:	6839      	ldr	r1, [r7, #0]
 8018308:	6878      	ldr	r0, [r7, #4]
 801830a:	f7fa fcfd 	bl	8012d08 <tcp_input>
        break;
 801830e:	e021      	b.n	8018354 <ip4_input+0x210>
#endif /* LWIP_TCP */
#if LWIP_ICMP
      case IP_PROTO_ICMP:
        MIB2_STATS_INC(mib2.ipindelivers);
        icmp_input(p, inp);
 8018310:	6839      	ldr	r1, [r7, #0]
 8018312:	6878      	ldr	r0, [r7, #4]
 8018314:	f7ff fcc8 	bl	8017ca8 <icmp_input>
        break;
 8018318:	e01c      	b.n	8018354 <ip4_input+0x210>
        } else
#endif /* LWIP_RAW */
        {
#if LWIP_ICMP
          /* send ICMP destination protocol unreachable unless is was a broadcast */
          if (!ip4_addr_isbroadcast(ip4_current_dest_addr(), netif) &&
 801831a:	4b1a      	ldr	r3, [pc, #104]	; (8018384 <ip4_input+0x240>)
 801831c:	695b      	ldr	r3, [r3, #20]
 801831e:	6939      	ldr	r1, [r7, #16]
 8018320:	4618      	mov	r0, r3
 8018322:	f000 f90b 	bl	801853c <ip4_addr_isbroadcast_u32>
 8018326:	4603      	mov	r3, r0
 8018328:	2b00      	cmp	r3, #0
 801832a:	d10f      	bne.n	801834c <ip4_input+0x208>
              !ip4_addr_ismulticast(ip4_current_dest_addr())) {
 801832c:	4b15      	ldr	r3, [pc, #84]	; (8018384 <ip4_input+0x240>)
 801832e:	695b      	ldr	r3, [r3, #20]
 8018330:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
          if (!ip4_addr_isbroadcast(ip4_current_dest_addr(), netif) &&
 8018334:	2be0      	cmp	r3, #224	; 0xe0
 8018336:	d009      	beq.n	801834c <ip4_input+0x208>
            pbuf_header_force(p, (s16_t)iphdr_hlen); /* Move to ip header, no check necessary. */
 8018338:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 801833c:	4619      	mov	r1, r3
 801833e:	6878      	ldr	r0, [r7, #4]
 8018340:	f7f8 fea3 	bl	801108a <pbuf_header_force>
            icmp_dest_unreach(p, ICMP_DUR_PROTO);
 8018344:	2102      	movs	r1, #2
 8018346:	6878      	ldr	r0, [r7, #4]
 8018348:	f7ff fdce 	bl	8017ee8 <icmp_dest_unreach>

          IP_STATS_INC(ip.proterr);
          IP_STATS_INC(ip.drop);
          MIB2_STATS_INC(mib2.ipinunknownprotos);
        }
        pbuf_free(p);
 801834c:	6878      	ldr	r0, [r7, #4]
 801834e:	f7f8 feaf 	bl	80110b0 <pbuf_free>
        break;
 8018352:	bf00      	nop
    }
  }

  /* @todo: this is not really necessary... */
  ip_data.current_netif = NULL;
 8018354:	4b0b      	ldr	r3, [pc, #44]	; (8018384 <ip4_input+0x240>)
 8018356:	2200      	movs	r2, #0
 8018358:	601a      	str	r2, [r3, #0]
  ip_data.current_input_netif = NULL;
 801835a:	4b0a      	ldr	r3, [pc, #40]	; (8018384 <ip4_input+0x240>)
 801835c:	2200      	movs	r2, #0
 801835e:	605a      	str	r2, [r3, #4]
  ip_data.current_ip4_header = NULL;
 8018360:	4b08      	ldr	r3, [pc, #32]	; (8018384 <ip4_input+0x240>)
 8018362:	2200      	movs	r2, #0
 8018364:	609a      	str	r2, [r3, #8]
  ip_data.current_ip_header_tot_len = 0;
 8018366:	4b07      	ldr	r3, [pc, #28]	; (8018384 <ip4_input+0x240>)
 8018368:	2200      	movs	r2, #0
 801836a:	819a      	strh	r2, [r3, #12]
  ip4_addr_set_any(ip4_current_src_addr());
 801836c:	4b05      	ldr	r3, [pc, #20]	; (8018384 <ip4_input+0x240>)
 801836e:	2200      	movs	r2, #0
 8018370:	611a      	str	r2, [r3, #16]
  ip4_addr_set_any(ip4_current_dest_addr());
 8018372:	4b04      	ldr	r3, [pc, #16]	; (8018384 <ip4_input+0x240>)
 8018374:	2200      	movs	r2, #0
 8018376:	615a      	str	r2, [r3, #20]

  return ERR_OK;
 8018378:	2300      	movs	r3, #0
}
 801837a:	4618      	mov	r0, r3
 801837c:	3718      	adds	r7, #24
 801837e:	46bd      	mov	sp, r7
 8018380:	bd80      	pop	{r7, pc}
 8018382:	bf00      	nop
 8018384:	200007f8 	.word	0x200007f8
 8018388:	200070c8 	.word	0x200070c8

0801838c <ip4_output_if>:
 */
err_t
ip4_output_if(struct pbuf *p, const ip4_addr_t *src, const ip4_addr_t *dest,
              u8_t ttl, u8_t tos,
              u8_t proto, struct netif *netif)
{
 801838c:	b580      	push	{r7, lr}
 801838e:	b08a      	sub	sp, #40	; 0x28
 8018390:	af04      	add	r7, sp, #16
 8018392:	60f8      	str	r0, [r7, #12]
 8018394:	60b9      	str	r1, [r7, #8]
 8018396:	607a      	str	r2, [r7, #4]
 8018398:	70fb      	strb	r3, [r7, #3]
ip4_output_if_opt(struct pbuf *p, const ip4_addr_t *src, const ip4_addr_t *dest,
                  u8_t ttl, u8_t tos, u8_t proto, struct netif *netif, void *ip_options,
                  u16_t optlen)
{
#endif /* IP_OPTIONS_SEND */
  const ip4_addr_t *src_used = src;
 801839a:	68bb      	ldr	r3, [r7, #8]
 801839c:	617b      	str	r3, [r7, #20]
  if (dest != LWIP_IP_HDRINCL) {
 801839e:	687b      	ldr	r3, [r7, #4]
 80183a0:	2b00      	cmp	r3, #0
 80183a2:	d009      	beq.n	80183b8 <ip4_output_if+0x2c>
    if (ip4_addr_isany(src)) {
 80183a4:	68bb      	ldr	r3, [r7, #8]
 80183a6:	2b00      	cmp	r3, #0
 80183a8:	d003      	beq.n	80183b2 <ip4_output_if+0x26>
 80183aa:	68bb      	ldr	r3, [r7, #8]
 80183ac:	681b      	ldr	r3, [r3, #0]
 80183ae:	2b00      	cmp	r3, #0
 80183b0:	d102      	bne.n	80183b8 <ip4_output_if+0x2c>
      src_used = netif_ip4_addr(netif);
 80183b2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80183b4:	3304      	adds	r3, #4
 80183b6:	617b      	str	r3, [r7, #20]

#if IP_OPTIONS_SEND
  return ip4_output_if_opt_src(p, src_used, dest, ttl, tos, proto, netif,
                               ip_options, optlen);
#else /* IP_OPTIONS_SEND */
  return ip4_output_if_src(p, src_used, dest, ttl, tos, proto, netif);
 80183b8:	78fa      	ldrb	r2, [r7, #3]
 80183ba:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80183bc:	9302      	str	r3, [sp, #8]
 80183be:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 80183c2:	9301      	str	r3, [sp, #4]
 80183c4:	f897 3020 	ldrb.w	r3, [r7, #32]
 80183c8:	9300      	str	r3, [sp, #0]
 80183ca:	4613      	mov	r3, r2
 80183cc:	687a      	ldr	r2, [r7, #4]
 80183ce:	6979      	ldr	r1, [r7, #20]
 80183d0:	68f8      	ldr	r0, [r7, #12]
 80183d2:	f000 f805 	bl	80183e0 <ip4_output_if_src>
 80183d6:	4603      	mov	r3, r0
#endif /* IP_OPTIONS_SEND */
}
 80183d8:	4618      	mov	r0, r3
 80183da:	3718      	adds	r7, #24
 80183dc:	46bd      	mov	sp, r7
 80183de:	bd80      	pop	{r7, pc}

080183e0 <ip4_output_if_src>:
 */
err_t
ip4_output_if_src(struct pbuf *p, const ip4_addr_t *src, const ip4_addr_t *dest,
                  u8_t ttl, u8_t tos,
                  u8_t proto, struct netif *netif)
{
 80183e0:	b580      	push	{r7, lr}
 80183e2:	b088      	sub	sp, #32
 80183e4:	af00      	add	r7, sp, #0
 80183e6:	60f8      	str	r0, [r7, #12]
 80183e8:	60b9      	str	r1, [r7, #8]
 80183ea:	607a      	str	r2, [r7, #4]
 80183ec:	70fb      	strb	r3, [r7, #3]
#if CHECKSUM_GEN_IP_INLINE
  u32_t chk_sum = 0;
#endif /* CHECKSUM_GEN_IP_INLINE */

  LWIP_ASSERT_CORE_LOCKED();
  LWIP_IP_CHECK_PBUF_REF_COUNT_FOR_TX(p);
 80183ee:	68fb      	ldr	r3, [r7, #12]
 80183f0:	7b9b      	ldrb	r3, [r3, #14]
 80183f2:	2b01      	cmp	r3, #1
 80183f4:	d006      	beq.n	8018404 <ip4_output_if_src+0x24>
 80183f6:	4b4b      	ldr	r3, [pc, #300]	; (8018524 <ip4_output_if_src+0x144>)
 80183f8:	f44f 7255 	mov.w	r2, #852	; 0x354
 80183fc:	494a      	ldr	r1, [pc, #296]	; (8018528 <ip4_output_if_src+0x148>)
 80183fe:	484b      	ldr	r0, [pc, #300]	; (801852c <ip4_output_if_src+0x14c>)
 8018400:	f001 fd2e 	bl	8019e60 <iprintf>

  MIB2_STATS_INC(mib2.ipoutrequests);

  /* Should the IP header be generated or is it already included in p? */
  if (dest != LWIP_IP_HDRINCL) {
 8018404:	687b      	ldr	r3, [r7, #4]
 8018406:	2b00      	cmp	r3, #0
 8018408:	d060      	beq.n	80184cc <ip4_output_if_src+0xec>
    u16_t ip_hlen = IP_HLEN;
 801840a:	2314      	movs	r3, #20
 801840c:	837b      	strh	r3, [r7, #26]
      }
#endif /* CHECKSUM_GEN_IP_INLINE */
    }
#endif /* IP_OPTIONS_SEND */
    /* generate IP header */
    if (pbuf_add_header(p, IP_HLEN)) {
 801840e:	2114      	movs	r1, #20
 8018410:	68f8      	ldr	r0, [r7, #12]
 8018412:	f7f8 fdb7 	bl	8010f84 <pbuf_add_header>
 8018416:	4603      	mov	r3, r0
 8018418:	2b00      	cmp	r3, #0
 801841a:	d002      	beq.n	8018422 <ip4_output_if_src+0x42>
      LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("ip4_output: not enough room for IP header in pbuf\n"));

      IP_STATS_INC(ip.err);
      MIB2_STATS_INC(mib2.ipoutdiscards);
      return ERR_BUF;
 801841c:	f06f 0301 	mvn.w	r3, #1
 8018420:	e07c      	b.n	801851c <ip4_output_if_src+0x13c>
    }

    iphdr = (struct ip_hdr *)p->payload;
 8018422:	68fb      	ldr	r3, [r7, #12]
 8018424:	685b      	ldr	r3, [r3, #4]
 8018426:	61fb      	str	r3, [r7, #28]
    LWIP_ASSERT("check that first pbuf can hold struct ip_hdr",
 8018428:	68fb      	ldr	r3, [r7, #12]
 801842a:	895b      	ldrh	r3, [r3, #10]
 801842c:	2b13      	cmp	r3, #19
 801842e:	d806      	bhi.n	801843e <ip4_output_if_src+0x5e>
 8018430:	4b3c      	ldr	r3, [pc, #240]	; (8018524 <ip4_output_if_src+0x144>)
 8018432:	f44f 7262 	mov.w	r2, #904	; 0x388
 8018436:	493e      	ldr	r1, [pc, #248]	; (8018530 <ip4_output_if_src+0x150>)
 8018438:	483c      	ldr	r0, [pc, #240]	; (801852c <ip4_output_if_src+0x14c>)
 801843a:	f001 fd11 	bl	8019e60 <iprintf>
                (p->len >= sizeof(struct ip_hdr)));

    IPH_TTL_SET(iphdr, ttl);
 801843e:	69fb      	ldr	r3, [r7, #28]
 8018440:	78fa      	ldrb	r2, [r7, #3]
 8018442:	721a      	strb	r2, [r3, #8]
    IPH_PROTO_SET(iphdr, proto);
 8018444:	69fb      	ldr	r3, [r7, #28]
 8018446:	f897 202c 	ldrb.w	r2, [r7, #44]	; 0x2c
 801844a:	725a      	strb	r2, [r3, #9]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += PP_NTOHS(proto | (ttl << 8));
#endif /* CHECKSUM_GEN_IP_INLINE */

    /* dest cannot be NULL here */
    ip4_addr_copy(iphdr->dest, *dest);
 801844c:	687b      	ldr	r3, [r7, #4]
 801844e:	681a      	ldr	r2, [r3, #0]
 8018450:	69fb      	ldr	r3, [r7, #28]
 8018452:	611a      	str	r2, [r3, #16]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += ip4_addr_get_u32(&iphdr->dest) & 0xFFFF;
    chk_sum += ip4_addr_get_u32(&iphdr->dest) >> 16;
#endif /* CHECKSUM_GEN_IP_INLINE */

    IPH_VHL_SET(iphdr, 4, ip_hlen / 4);
 8018454:	8b7b      	ldrh	r3, [r7, #26]
 8018456:	089b      	lsrs	r3, r3, #2
 8018458:	b29b      	uxth	r3, r3
 801845a:	b2db      	uxtb	r3, r3
 801845c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8018460:	b2da      	uxtb	r2, r3
 8018462:	69fb      	ldr	r3, [r7, #28]
 8018464:	701a      	strb	r2, [r3, #0]
    IPH_TOS_SET(iphdr, tos);
 8018466:	69fb      	ldr	r3, [r7, #28]
 8018468:	f897 2028 	ldrb.w	r2, [r7, #40]	; 0x28
 801846c:	705a      	strb	r2, [r3, #1]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += PP_NTOHS(tos | (iphdr->_v_hl << 8));
#endif /* CHECKSUM_GEN_IP_INLINE */
    IPH_LEN_SET(iphdr, lwip_htons(p->tot_len));
 801846e:	68fb      	ldr	r3, [r7, #12]
 8018470:	891b      	ldrh	r3, [r3, #8]
 8018472:	4618      	mov	r0, r3
 8018474:	f7f7 fa38 	bl	800f8e8 <lwip_htons>
 8018478:	4603      	mov	r3, r0
 801847a:	461a      	mov	r2, r3
 801847c:	69fb      	ldr	r3, [r7, #28]
 801847e:	805a      	strh	r2, [r3, #2]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += iphdr->_len;
#endif /* CHECKSUM_GEN_IP_INLINE */
    IPH_OFFSET_SET(iphdr, 0);
 8018480:	69fb      	ldr	r3, [r7, #28]
 8018482:	2200      	movs	r2, #0
 8018484:	719a      	strb	r2, [r3, #6]
 8018486:	2200      	movs	r2, #0
 8018488:	71da      	strb	r2, [r3, #7]
    IPH_ID_SET(iphdr, lwip_htons(ip_id));
 801848a:	4b2a      	ldr	r3, [pc, #168]	; (8018534 <ip4_output_if_src+0x154>)
 801848c:	881b      	ldrh	r3, [r3, #0]
 801848e:	4618      	mov	r0, r3
 8018490:	f7f7 fa2a 	bl	800f8e8 <lwip_htons>
 8018494:	4603      	mov	r3, r0
 8018496:	461a      	mov	r2, r3
 8018498:	69fb      	ldr	r3, [r7, #28]
 801849a:	809a      	strh	r2, [r3, #4]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += iphdr->_id;
#endif /* CHECKSUM_GEN_IP_INLINE */
    ++ip_id;
 801849c:	4b25      	ldr	r3, [pc, #148]	; (8018534 <ip4_output_if_src+0x154>)
 801849e:	881b      	ldrh	r3, [r3, #0]
 80184a0:	3301      	adds	r3, #1
 80184a2:	b29a      	uxth	r2, r3
 80184a4:	4b23      	ldr	r3, [pc, #140]	; (8018534 <ip4_output_if_src+0x154>)
 80184a6:	801a      	strh	r2, [r3, #0]

    if (src == NULL) {
 80184a8:	68bb      	ldr	r3, [r7, #8]
 80184aa:	2b00      	cmp	r3, #0
 80184ac:	d104      	bne.n	80184b8 <ip4_output_if_src+0xd8>
      ip4_addr_copy(iphdr->src, *IP4_ADDR_ANY4);
 80184ae:	4b22      	ldr	r3, [pc, #136]	; (8018538 <ip4_output_if_src+0x158>)
 80184b0:	681a      	ldr	r2, [r3, #0]
 80184b2:	69fb      	ldr	r3, [r7, #28]
 80184b4:	60da      	str	r2, [r3, #12]
 80184b6:	e003      	b.n	80184c0 <ip4_output_if_src+0xe0>
    } else {
      /* src cannot be NULL here */
      ip4_addr_copy(iphdr->src, *src);
 80184b8:	68bb      	ldr	r3, [r7, #8]
 80184ba:	681a      	ldr	r2, [r3, #0]
 80184bc:	69fb      	ldr	r3, [r7, #28]
 80184be:	60da      	str	r2, [r3, #12]
    else {
      IPH_CHKSUM_SET(iphdr, 0);
    }
#endif /* LWIP_CHECKSUM_CTRL_PER_NETIF*/
#else /* CHECKSUM_GEN_IP_INLINE */
    IPH_CHKSUM_SET(iphdr, 0);
 80184c0:	69fb      	ldr	r3, [r7, #28]
 80184c2:	2200      	movs	r2, #0
 80184c4:	729a      	strb	r2, [r3, #10]
 80184c6:	2200      	movs	r2, #0
 80184c8:	72da      	strb	r2, [r3, #11]
 80184ca:	e00f      	b.n	80184ec <ip4_output_if_src+0x10c>
    }
#endif /* CHECKSUM_GEN_IP */
#endif /* CHECKSUM_GEN_IP_INLINE */
  } else {
    /* IP header already included in p */
    if (p->len < IP_HLEN) {
 80184cc:	68fb      	ldr	r3, [r7, #12]
 80184ce:	895b      	ldrh	r3, [r3, #10]
 80184d0:	2b13      	cmp	r3, #19
 80184d2:	d802      	bhi.n	80184da <ip4_output_if_src+0xfa>
      LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("ip4_output: LWIP_IP_HDRINCL but pbuf is too short\n"));
      IP_STATS_INC(ip.err);
      MIB2_STATS_INC(mib2.ipoutdiscards);
      return ERR_BUF;
 80184d4:	f06f 0301 	mvn.w	r3, #1
 80184d8:	e020      	b.n	801851c <ip4_output_if_src+0x13c>
    }
    iphdr = (struct ip_hdr *)p->payload;
 80184da:	68fb      	ldr	r3, [r7, #12]
 80184dc:	685b      	ldr	r3, [r3, #4]
 80184de:	61fb      	str	r3, [r7, #28]
    ip4_addr_copy(dest_addr, iphdr->dest);
 80184e0:	69fb      	ldr	r3, [r7, #28]
 80184e2:	691b      	ldr	r3, [r3, #16]
 80184e4:	617b      	str	r3, [r7, #20]
    dest = &dest_addr;
 80184e6:	f107 0314 	add.w	r3, r7, #20
 80184ea:	607b      	str	r3, [r7, #4]
  }
#endif /* LWIP_MULTICAST_TX_OPTIONS */
#endif /* ENABLE_LOOPBACK */
#if IP_FRAG
  /* don't fragment if interface has mtu set to 0 [loopif] */
  if (netif->mtu && (p->tot_len > netif->mtu)) {
 80184ec:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80184ee:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 80184f0:	2b00      	cmp	r3, #0
 80184f2:	d00c      	beq.n	801850e <ip4_output_if_src+0x12e>
 80184f4:	68fb      	ldr	r3, [r7, #12]
 80184f6:	891a      	ldrh	r2, [r3, #8]
 80184f8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80184fa:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 80184fc:	429a      	cmp	r2, r3
 80184fe:	d906      	bls.n	801850e <ip4_output_if_src+0x12e>
    return ip4_frag(p, netif, dest);
 8018500:	687a      	ldr	r2, [r7, #4]
 8018502:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8018504:	68f8      	ldr	r0, [r7, #12]
 8018506:	f000 fd53 	bl	8018fb0 <ip4_frag>
 801850a:	4603      	mov	r3, r0
 801850c:	e006      	b.n	801851c <ip4_output_if_src+0x13c>
  }
#endif /* IP_FRAG */

  LWIP_DEBUGF(IP_DEBUG, ("ip4_output_if: call netif->output()\n"));
  return netif->output(netif, p, dest);
 801850e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8018510:	695b      	ldr	r3, [r3, #20]
 8018512:	687a      	ldr	r2, [r7, #4]
 8018514:	68f9      	ldr	r1, [r7, #12]
 8018516:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8018518:	4798      	blx	r3
 801851a:	4603      	mov	r3, r0
}
 801851c:	4618      	mov	r0, r3
 801851e:	3720      	adds	r7, #32
 8018520:	46bd      	mov	sp, r7
 8018522:	bd80      	pop	{r7, pc}
 8018524:	0801f044 	.word	0x0801f044
 8018528:	0801f078 	.word	0x0801f078
 801852c:	0801f084 	.word	0x0801f084
 8018530:	0801f0ac 	.word	0x0801f0ac
 8018534:	20007226 	.word	0x20007226
 8018538:	0801f4cc 	.word	0x0801f4cc

0801853c <ip4_addr_isbroadcast_u32>:
 * @param netif the network interface against which the address is checked
 * @return returns non-zero if the address is a broadcast address
 */
u8_t
ip4_addr_isbroadcast_u32(u32_t addr, const struct netif *netif)
{
 801853c:	b480      	push	{r7}
 801853e:	b085      	sub	sp, #20
 8018540:	af00      	add	r7, sp, #0
 8018542:	6078      	str	r0, [r7, #4]
 8018544:	6039      	str	r1, [r7, #0]
  ip4_addr_t ipaddr;
  ip4_addr_set_u32(&ipaddr, addr);
 8018546:	687b      	ldr	r3, [r7, #4]
 8018548:	60fb      	str	r3, [r7, #12]

  /* all ones (broadcast) or all zeroes (old skool broadcast) */
  if ((~addr == IPADDR_ANY) ||
 801854a:	687b      	ldr	r3, [r7, #4]
 801854c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8018550:	d002      	beq.n	8018558 <ip4_addr_isbroadcast_u32+0x1c>
 8018552:	687b      	ldr	r3, [r7, #4]
 8018554:	2b00      	cmp	r3, #0
 8018556:	d101      	bne.n	801855c <ip4_addr_isbroadcast_u32+0x20>
      (addr == IPADDR_ANY)) {
    return 1;
 8018558:	2301      	movs	r3, #1
 801855a:	e02a      	b.n	80185b2 <ip4_addr_isbroadcast_u32+0x76>
    /* no broadcast support on this network interface? */
  } else if ((netif->flags & NETIF_FLAG_BROADCAST) == 0) {
 801855c:	683b      	ldr	r3, [r7, #0]
 801855e:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8018562:	f003 0302 	and.w	r3, r3, #2
 8018566:	2b00      	cmp	r3, #0
 8018568:	d101      	bne.n	801856e <ip4_addr_isbroadcast_u32+0x32>
    /* the given address cannot be a broadcast address
     * nor can we check against any broadcast addresses */
    return 0;
 801856a:	2300      	movs	r3, #0
 801856c:	e021      	b.n	80185b2 <ip4_addr_isbroadcast_u32+0x76>
    /* address matches network interface address exactly? => no broadcast */
  } else if (addr == ip4_addr_get_u32(netif_ip4_addr(netif))) {
 801856e:	683b      	ldr	r3, [r7, #0]
 8018570:	3304      	adds	r3, #4
 8018572:	681b      	ldr	r3, [r3, #0]
 8018574:	687a      	ldr	r2, [r7, #4]
 8018576:	429a      	cmp	r2, r3
 8018578:	d101      	bne.n	801857e <ip4_addr_isbroadcast_u32+0x42>
    return 0;
 801857a:	2300      	movs	r3, #0
 801857c:	e019      	b.n	80185b2 <ip4_addr_isbroadcast_u32+0x76>
    /*  on the same (sub) network... */
  } else if (ip4_addr_netcmp(&ipaddr, netif_ip4_addr(netif), netif_ip4_netmask(netif))
 801857e:	68fa      	ldr	r2, [r7, #12]
 8018580:	683b      	ldr	r3, [r7, #0]
 8018582:	3304      	adds	r3, #4
 8018584:	681b      	ldr	r3, [r3, #0]
 8018586:	405a      	eors	r2, r3
 8018588:	683b      	ldr	r3, [r7, #0]
 801858a:	3308      	adds	r3, #8
 801858c:	681b      	ldr	r3, [r3, #0]
 801858e:	4013      	ands	r3, r2
 8018590:	2b00      	cmp	r3, #0
 8018592:	d10d      	bne.n	80185b0 <ip4_addr_isbroadcast_u32+0x74>
             /* ...and host identifier bits are all ones? =>... */
             && ((addr & ~ip4_addr_get_u32(netif_ip4_netmask(netif))) ==
 8018594:	683b      	ldr	r3, [r7, #0]
 8018596:	3308      	adds	r3, #8
 8018598:	681b      	ldr	r3, [r3, #0]
 801859a:	43da      	mvns	r2, r3
 801859c:	687b      	ldr	r3, [r7, #4]
 801859e:	401a      	ands	r2, r3
                 (IPADDR_BROADCAST & ~ip4_addr_get_u32(netif_ip4_netmask(netif))))) {
 80185a0:	683b      	ldr	r3, [r7, #0]
 80185a2:	3308      	adds	r3, #8
 80185a4:	681b      	ldr	r3, [r3, #0]
 80185a6:	43db      	mvns	r3, r3
             && ((addr & ~ip4_addr_get_u32(netif_ip4_netmask(netif))) ==
 80185a8:	429a      	cmp	r2, r3
 80185aa:	d101      	bne.n	80185b0 <ip4_addr_isbroadcast_u32+0x74>
    /* => network broadcast address */
    return 1;
 80185ac:	2301      	movs	r3, #1
 80185ae:	e000      	b.n	80185b2 <ip4_addr_isbroadcast_u32+0x76>
  } else {
    return 0;
 80185b0:	2300      	movs	r3, #0
  }
}
 80185b2:	4618      	mov	r0, r3
 80185b4:	3714      	adds	r7, #20
 80185b6:	46bd      	mov	sp, r7
 80185b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80185bc:	4770      	bx	lr
	...

080185c0 <ip_reass_tmr>:
 *
 * Should be called every 1000 msec (defined by IP_TMR_INTERVAL).
 */
void
ip_reass_tmr(void)
{
 80185c0:	b580      	push	{r7, lr}
 80185c2:	b084      	sub	sp, #16
 80185c4:	af00      	add	r7, sp, #0
  struct ip_reassdata *r, *prev = NULL;
 80185c6:	2300      	movs	r3, #0
 80185c8:	60bb      	str	r3, [r7, #8]

  r = reassdatagrams;
 80185ca:	4b12      	ldr	r3, [pc, #72]	; (8018614 <ip_reass_tmr+0x54>)
 80185cc:	681b      	ldr	r3, [r3, #0]
 80185ce:	60fb      	str	r3, [r7, #12]
  while (r != NULL) {
 80185d0:	e018      	b.n	8018604 <ip_reass_tmr+0x44>
    /* Decrement the timer. Once it reaches 0,
     * clean up the incomplete fragment assembly */
    if (r->timer > 0) {
 80185d2:	68fb      	ldr	r3, [r7, #12]
 80185d4:	7fdb      	ldrb	r3, [r3, #31]
 80185d6:	2b00      	cmp	r3, #0
 80185d8:	d00b      	beq.n	80185f2 <ip_reass_tmr+0x32>
      r->timer--;
 80185da:	68fb      	ldr	r3, [r7, #12]
 80185dc:	7fdb      	ldrb	r3, [r3, #31]
 80185de:	3b01      	subs	r3, #1
 80185e0:	b2da      	uxtb	r2, r3
 80185e2:	68fb      	ldr	r3, [r7, #12]
 80185e4:	77da      	strb	r2, [r3, #31]
      LWIP_DEBUGF(IP_REASS_DEBUG, ("ip_reass_tmr: timer dec %"U16_F"\n", (u16_t)r->timer));
      prev = r;
 80185e6:	68fb      	ldr	r3, [r7, #12]
 80185e8:	60bb      	str	r3, [r7, #8]
      r = r->next;
 80185ea:	68fb      	ldr	r3, [r7, #12]
 80185ec:	681b      	ldr	r3, [r3, #0]
 80185ee:	60fb      	str	r3, [r7, #12]
 80185f0:	e008      	b.n	8018604 <ip_reass_tmr+0x44>
    } else {
      /* reassembly timed out */
      struct ip_reassdata *tmp;
      LWIP_DEBUGF(IP_REASS_DEBUG, ("ip_reass_tmr: timer timed out\n"));
      tmp = r;
 80185f2:	68fb      	ldr	r3, [r7, #12]
 80185f4:	607b      	str	r3, [r7, #4]
      /* get the next pointer before freeing */
      r = r->next;
 80185f6:	68fb      	ldr	r3, [r7, #12]
 80185f8:	681b      	ldr	r3, [r3, #0]
 80185fa:	60fb      	str	r3, [r7, #12]
      /* free the helper struct and all enqueued pbufs */
      ip_reass_free_complete_datagram(tmp, prev);
 80185fc:	68b9      	ldr	r1, [r7, #8]
 80185fe:	6878      	ldr	r0, [r7, #4]
 8018600:	f000 f80a 	bl	8018618 <ip_reass_free_complete_datagram>
  while (r != NULL) {
 8018604:	68fb      	ldr	r3, [r7, #12]
 8018606:	2b00      	cmp	r3, #0
 8018608:	d1e3      	bne.n	80185d2 <ip_reass_tmr+0x12>
    }
  }
}
 801860a:	bf00      	nop
 801860c:	bf00      	nop
 801860e:	3710      	adds	r7, #16
 8018610:	46bd      	mov	sp, r7
 8018612:	bd80      	pop	{r7, pc}
 8018614:	20007228 	.word	0x20007228

08018618 <ip_reass_free_complete_datagram>:
 * @param prev the previous datagram in the linked list
 * @return the number of pbufs freed
 */
static int
ip_reass_free_complete_datagram(struct ip_reassdata *ipr, struct ip_reassdata *prev)
{
 8018618:	b580      	push	{r7, lr}
 801861a:	b088      	sub	sp, #32
 801861c:	af00      	add	r7, sp, #0
 801861e:	6078      	str	r0, [r7, #4]
 8018620:	6039      	str	r1, [r7, #0]
  u16_t pbufs_freed = 0;
 8018622:	2300      	movs	r3, #0
 8018624:	83fb      	strh	r3, [r7, #30]
  u16_t clen;
  struct pbuf *p;
  struct ip_reass_helper *iprh;

  LWIP_ASSERT("prev != ipr", prev != ipr);
 8018626:	683a      	ldr	r2, [r7, #0]
 8018628:	687b      	ldr	r3, [r7, #4]
 801862a:	429a      	cmp	r2, r3
 801862c:	d105      	bne.n	801863a <ip_reass_free_complete_datagram+0x22>
 801862e:	4b45      	ldr	r3, [pc, #276]	; (8018744 <ip_reass_free_complete_datagram+0x12c>)
 8018630:	22ab      	movs	r2, #171	; 0xab
 8018632:	4945      	ldr	r1, [pc, #276]	; (8018748 <ip_reass_free_complete_datagram+0x130>)
 8018634:	4845      	ldr	r0, [pc, #276]	; (801874c <ip_reass_free_complete_datagram+0x134>)
 8018636:	f001 fc13 	bl	8019e60 <iprintf>
  if (prev != NULL) {
 801863a:	683b      	ldr	r3, [r7, #0]
 801863c:	2b00      	cmp	r3, #0
 801863e:	d00a      	beq.n	8018656 <ip_reass_free_complete_datagram+0x3e>
    LWIP_ASSERT("prev->next == ipr", prev->next == ipr);
 8018640:	683b      	ldr	r3, [r7, #0]
 8018642:	681b      	ldr	r3, [r3, #0]
 8018644:	687a      	ldr	r2, [r7, #4]
 8018646:	429a      	cmp	r2, r3
 8018648:	d005      	beq.n	8018656 <ip_reass_free_complete_datagram+0x3e>
 801864a:	4b3e      	ldr	r3, [pc, #248]	; (8018744 <ip_reass_free_complete_datagram+0x12c>)
 801864c:	22ad      	movs	r2, #173	; 0xad
 801864e:	4940      	ldr	r1, [pc, #256]	; (8018750 <ip_reass_free_complete_datagram+0x138>)
 8018650:	483e      	ldr	r0, [pc, #248]	; (801874c <ip_reass_free_complete_datagram+0x134>)
 8018652:	f001 fc05 	bl	8019e60 <iprintf>
  }

  MIB2_STATS_INC(mib2.ipreasmfails);
#if LWIP_ICMP
  iprh = (struct ip_reass_helper *)ipr->p->payload;
 8018656:	687b      	ldr	r3, [r7, #4]
 8018658:	685b      	ldr	r3, [r3, #4]
 801865a:	685b      	ldr	r3, [r3, #4]
 801865c:	617b      	str	r3, [r7, #20]
  if (iprh->start == 0) {
 801865e:	697b      	ldr	r3, [r7, #20]
 8018660:	889b      	ldrh	r3, [r3, #4]
 8018662:	b29b      	uxth	r3, r3
 8018664:	2b00      	cmp	r3, #0
 8018666:	d12a      	bne.n	80186be <ip_reass_free_complete_datagram+0xa6>
    /* The first fragment was received, send ICMP time exceeded. */
    /* First, de-queue the first pbuf from r->p. */
    p = ipr->p;
 8018668:	687b      	ldr	r3, [r7, #4]
 801866a:	685b      	ldr	r3, [r3, #4]
 801866c:	61bb      	str	r3, [r7, #24]
    ipr->p = iprh->next_pbuf;
 801866e:	697b      	ldr	r3, [r7, #20]
 8018670:	681a      	ldr	r2, [r3, #0]
 8018672:	687b      	ldr	r3, [r7, #4]
 8018674:	605a      	str	r2, [r3, #4]
    /* Then, copy the original header into it. */
    SMEMCPY(p->payload, &ipr->iphdr, IP_HLEN);
 8018676:	69bb      	ldr	r3, [r7, #24]
 8018678:	6858      	ldr	r0, [r3, #4]
 801867a:	687b      	ldr	r3, [r7, #4]
 801867c:	3308      	adds	r3, #8
 801867e:	2214      	movs	r2, #20
 8018680:	4619      	mov	r1, r3
 8018682:	f001 fdbc 	bl	801a1fe <memcpy>
    icmp_time_exceeded(p, ICMP_TE_FRAG);
 8018686:	2101      	movs	r1, #1
 8018688:	69b8      	ldr	r0, [r7, #24]
 801868a:	f7ff fc3d 	bl	8017f08 <icmp_time_exceeded>
    clen = pbuf_clen(p);
 801868e:	69b8      	ldr	r0, [r7, #24]
 8018690:	f7f8 fd96 	bl	80111c0 <pbuf_clen>
 8018694:	4603      	mov	r3, r0
 8018696:	827b      	strh	r3, [r7, #18]
    LWIP_ASSERT("pbufs_freed + clen <= 0xffff", pbufs_freed + clen <= 0xffff);
 8018698:	8bfa      	ldrh	r2, [r7, #30]
 801869a:	8a7b      	ldrh	r3, [r7, #18]
 801869c:	4413      	add	r3, r2
 801869e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80186a2:	db05      	blt.n	80186b0 <ip_reass_free_complete_datagram+0x98>
 80186a4:	4b27      	ldr	r3, [pc, #156]	; (8018744 <ip_reass_free_complete_datagram+0x12c>)
 80186a6:	22bc      	movs	r2, #188	; 0xbc
 80186a8:	492a      	ldr	r1, [pc, #168]	; (8018754 <ip_reass_free_complete_datagram+0x13c>)
 80186aa:	4828      	ldr	r0, [pc, #160]	; (801874c <ip_reass_free_complete_datagram+0x134>)
 80186ac:	f001 fbd8 	bl	8019e60 <iprintf>
    pbufs_freed = (u16_t)(pbufs_freed + clen);
 80186b0:	8bfa      	ldrh	r2, [r7, #30]
 80186b2:	8a7b      	ldrh	r3, [r7, #18]
 80186b4:	4413      	add	r3, r2
 80186b6:	83fb      	strh	r3, [r7, #30]
    pbuf_free(p);
 80186b8:	69b8      	ldr	r0, [r7, #24]
 80186ba:	f7f8 fcf9 	bl	80110b0 <pbuf_free>
  }
#endif /* LWIP_ICMP */

  /* First, free all received pbufs.  The individual pbufs need to be released
     separately as they have not yet been chained */
  p = ipr->p;
 80186be:	687b      	ldr	r3, [r7, #4]
 80186c0:	685b      	ldr	r3, [r3, #4]
 80186c2:	61bb      	str	r3, [r7, #24]
  while (p != NULL) {
 80186c4:	e01f      	b.n	8018706 <ip_reass_free_complete_datagram+0xee>
    struct pbuf *pcur;
    iprh = (struct ip_reass_helper *)p->payload;
 80186c6:	69bb      	ldr	r3, [r7, #24]
 80186c8:	685b      	ldr	r3, [r3, #4]
 80186ca:	617b      	str	r3, [r7, #20]
    pcur = p;
 80186cc:	69bb      	ldr	r3, [r7, #24]
 80186ce:	60fb      	str	r3, [r7, #12]
    /* get the next pointer before freeing */
    p = iprh->next_pbuf;
 80186d0:	697b      	ldr	r3, [r7, #20]
 80186d2:	681b      	ldr	r3, [r3, #0]
 80186d4:	61bb      	str	r3, [r7, #24]
    clen = pbuf_clen(pcur);
 80186d6:	68f8      	ldr	r0, [r7, #12]
 80186d8:	f7f8 fd72 	bl	80111c0 <pbuf_clen>
 80186dc:	4603      	mov	r3, r0
 80186de:	827b      	strh	r3, [r7, #18]
    LWIP_ASSERT("pbufs_freed + clen <= 0xffff", pbufs_freed + clen <= 0xffff);
 80186e0:	8bfa      	ldrh	r2, [r7, #30]
 80186e2:	8a7b      	ldrh	r3, [r7, #18]
 80186e4:	4413      	add	r3, r2
 80186e6:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80186ea:	db05      	blt.n	80186f8 <ip_reass_free_complete_datagram+0xe0>
 80186ec:	4b15      	ldr	r3, [pc, #84]	; (8018744 <ip_reass_free_complete_datagram+0x12c>)
 80186ee:	22cc      	movs	r2, #204	; 0xcc
 80186f0:	4918      	ldr	r1, [pc, #96]	; (8018754 <ip_reass_free_complete_datagram+0x13c>)
 80186f2:	4816      	ldr	r0, [pc, #88]	; (801874c <ip_reass_free_complete_datagram+0x134>)
 80186f4:	f001 fbb4 	bl	8019e60 <iprintf>
    pbufs_freed = (u16_t)(pbufs_freed + clen);
 80186f8:	8bfa      	ldrh	r2, [r7, #30]
 80186fa:	8a7b      	ldrh	r3, [r7, #18]
 80186fc:	4413      	add	r3, r2
 80186fe:	83fb      	strh	r3, [r7, #30]
    pbuf_free(pcur);
 8018700:	68f8      	ldr	r0, [r7, #12]
 8018702:	f7f8 fcd5 	bl	80110b0 <pbuf_free>
  while (p != NULL) {
 8018706:	69bb      	ldr	r3, [r7, #24]
 8018708:	2b00      	cmp	r3, #0
 801870a:	d1dc      	bne.n	80186c6 <ip_reass_free_complete_datagram+0xae>
  }
  /* Then, unchain the struct ip_reassdata from the list and free it. */
  ip_reass_dequeue_datagram(ipr, prev);
 801870c:	6839      	ldr	r1, [r7, #0]
 801870e:	6878      	ldr	r0, [r7, #4]
 8018710:	f000 f8c2 	bl	8018898 <ip_reass_dequeue_datagram>
  LWIP_ASSERT("ip_reass_pbufcount >= pbufs_freed", ip_reass_pbufcount >= pbufs_freed);
 8018714:	4b10      	ldr	r3, [pc, #64]	; (8018758 <ip_reass_free_complete_datagram+0x140>)
 8018716:	881b      	ldrh	r3, [r3, #0]
 8018718:	8bfa      	ldrh	r2, [r7, #30]
 801871a:	429a      	cmp	r2, r3
 801871c:	d905      	bls.n	801872a <ip_reass_free_complete_datagram+0x112>
 801871e:	4b09      	ldr	r3, [pc, #36]	; (8018744 <ip_reass_free_complete_datagram+0x12c>)
 8018720:	22d2      	movs	r2, #210	; 0xd2
 8018722:	490e      	ldr	r1, [pc, #56]	; (801875c <ip_reass_free_complete_datagram+0x144>)
 8018724:	4809      	ldr	r0, [pc, #36]	; (801874c <ip_reass_free_complete_datagram+0x134>)
 8018726:	f001 fb9b 	bl	8019e60 <iprintf>
  ip_reass_pbufcount = (u16_t)(ip_reass_pbufcount - pbufs_freed);
 801872a:	4b0b      	ldr	r3, [pc, #44]	; (8018758 <ip_reass_free_complete_datagram+0x140>)
 801872c:	881a      	ldrh	r2, [r3, #0]
 801872e:	8bfb      	ldrh	r3, [r7, #30]
 8018730:	1ad3      	subs	r3, r2, r3
 8018732:	b29a      	uxth	r2, r3
 8018734:	4b08      	ldr	r3, [pc, #32]	; (8018758 <ip_reass_free_complete_datagram+0x140>)
 8018736:	801a      	strh	r2, [r3, #0]

  return pbufs_freed;
 8018738:	8bfb      	ldrh	r3, [r7, #30]
}
 801873a:	4618      	mov	r0, r3
 801873c:	3720      	adds	r7, #32
 801873e:	46bd      	mov	sp, r7
 8018740:	bd80      	pop	{r7, pc}
 8018742:	bf00      	nop
 8018744:	0801f0dc 	.word	0x0801f0dc
 8018748:	0801f118 	.word	0x0801f118
 801874c:	0801f124 	.word	0x0801f124
 8018750:	0801f14c 	.word	0x0801f14c
 8018754:	0801f160 	.word	0x0801f160
 8018758:	2000722c 	.word	0x2000722c
 801875c:	0801f180 	.word	0x0801f180

08018760 <ip_reass_remove_oldest_datagram>:
 *        (used for freeing other datagrams if not enough space)
 * @return the number of pbufs freed
 */
static int
ip_reass_remove_oldest_datagram(struct ip_hdr *fraghdr, int pbufs_needed)
{
 8018760:	b580      	push	{r7, lr}
 8018762:	b08a      	sub	sp, #40	; 0x28
 8018764:	af00      	add	r7, sp, #0
 8018766:	6078      	str	r0, [r7, #4]
 8018768:	6039      	str	r1, [r7, #0]
  /* @todo Can't we simply remove the last datagram in the
   *       linked list behind reassdatagrams?
   */
  struct ip_reassdata *r, *oldest, *prev, *oldest_prev;
  int pbufs_freed = 0, pbufs_freed_current;
 801876a:	2300      	movs	r3, #0
 801876c:	617b      	str	r3, [r7, #20]
  int other_datagrams;

  /* Free datagrams until being allowed to enqueue 'pbufs_needed' pbufs,
   * but don't free the datagram that 'fraghdr' belongs to! */
  do {
    oldest = NULL;
 801876e:	2300      	movs	r3, #0
 8018770:	623b      	str	r3, [r7, #32]
    prev = NULL;
 8018772:	2300      	movs	r3, #0
 8018774:	61fb      	str	r3, [r7, #28]
    oldest_prev = NULL;
 8018776:	2300      	movs	r3, #0
 8018778:	61bb      	str	r3, [r7, #24]
    other_datagrams = 0;
 801877a:	2300      	movs	r3, #0
 801877c:	613b      	str	r3, [r7, #16]
    r = reassdatagrams;
 801877e:	4b28      	ldr	r3, [pc, #160]	; (8018820 <ip_reass_remove_oldest_datagram+0xc0>)
 8018780:	681b      	ldr	r3, [r3, #0]
 8018782:	627b      	str	r3, [r7, #36]	; 0x24
    while (r != NULL) {
 8018784:	e030      	b.n	80187e8 <ip_reass_remove_oldest_datagram+0x88>
      if (!IP_ADDRESSES_AND_ID_MATCH(&r->iphdr, fraghdr)) {
 8018786:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8018788:	695a      	ldr	r2, [r3, #20]
 801878a:	687b      	ldr	r3, [r7, #4]
 801878c:	68db      	ldr	r3, [r3, #12]
 801878e:	429a      	cmp	r2, r3
 8018790:	d10c      	bne.n	80187ac <ip_reass_remove_oldest_datagram+0x4c>
 8018792:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8018794:	699a      	ldr	r2, [r3, #24]
 8018796:	687b      	ldr	r3, [r7, #4]
 8018798:	691b      	ldr	r3, [r3, #16]
 801879a:	429a      	cmp	r2, r3
 801879c:	d106      	bne.n	80187ac <ip_reass_remove_oldest_datagram+0x4c>
 801879e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80187a0:	899a      	ldrh	r2, [r3, #12]
 80187a2:	687b      	ldr	r3, [r7, #4]
 80187a4:	889b      	ldrh	r3, [r3, #4]
 80187a6:	b29b      	uxth	r3, r3
 80187a8:	429a      	cmp	r2, r3
 80187aa:	d014      	beq.n	80187d6 <ip_reass_remove_oldest_datagram+0x76>
        /* Not the same datagram as fraghdr */
        other_datagrams++;
 80187ac:	693b      	ldr	r3, [r7, #16]
 80187ae:	3301      	adds	r3, #1
 80187b0:	613b      	str	r3, [r7, #16]
        if (oldest == NULL) {
 80187b2:	6a3b      	ldr	r3, [r7, #32]
 80187b4:	2b00      	cmp	r3, #0
 80187b6:	d104      	bne.n	80187c2 <ip_reass_remove_oldest_datagram+0x62>
          oldest = r;
 80187b8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80187ba:	623b      	str	r3, [r7, #32]
          oldest_prev = prev;
 80187bc:	69fb      	ldr	r3, [r7, #28]
 80187be:	61bb      	str	r3, [r7, #24]
 80187c0:	e009      	b.n	80187d6 <ip_reass_remove_oldest_datagram+0x76>
        } else if (r->timer <= oldest->timer) {
 80187c2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80187c4:	7fda      	ldrb	r2, [r3, #31]
 80187c6:	6a3b      	ldr	r3, [r7, #32]
 80187c8:	7fdb      	ldrb	r3, [r3, #31]
 80187ca:	429a      	cmp	r2, r3
 80187cc:	d803      	bhi.n	80187d6 <ip_reass_remove_oldest_datagram+0x76>
          /* older than the previous oldest */
          oldest = r;
 80187ce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80187d0:	623b      	str	r3, [r7, #32]
          oldest_prev = prev;
 80187d2:	69fb      	ldr	r3, [r7, #28]
 80187d4:	61bb      	str	r3, [r7, #24]
        }
      }
      if (r->next != NULL) {
 80187d6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80187d8:	681b      	ldr	r3, [r3, #0]
 80187da:	2b00      	cmp	r3, #0
 80187dc:	d001      	beq.n	80187e2 <ip_reass_remove_oldest_datagram+0x82>
        prev = r;
 80187de:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80187e0:	61fb      	str	r3, [r7, #28]
      }
      r = r->next;
 80187e2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80187e4:	681b      	ldr	r3, [r3, #0]
 80187e6:	627b      	str	r3, [r7, #36]	; 0x24
    while (r != NULL) {
 80187e8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80187ea:	2b00      	cmp	r3, #0
 80187ec:	d1cb      	bne.n	8018786 <ip_reass_remove_oldest_datagram+0x26>
    }
    if (oldest != NULL) {
 80187ee:	6a3b      	ldr	r3, [r7, #32]
 80187f0:	2b00      	cmp	r3, #0
 80187f2:	d008      	beq.n	8018806 <ip_reass_remove_oldest_datagram+0xa6>
      pbufs_freed_current = ip_reass_free_complete_datagram(oldest, oldest_prev);
 80187f4:	69b9      	ldr	r1, [r7, #24]
 80187f6:	6a38      	ldr	r0, [r7, #32]
 80187f8:	f7ff ff0e 	bl	8018618 <ip_reass_free_complete_datagram>
 80187fc:	60f8      	str	r0, [r7, #12]
      pbufs_freed += pbufs_freed_current;
 80187fe:	697a      	ldr	r2, [r7, #20]
 8018800:	68fb      	ldr	r3, [r7, #12]
 8018802:	4413      	add	r3, r2
 8018804:	617b      	str	r3, [r7, #20]
    }
  } while ((pbufs_freed < pbufs_needed) && (other_datagrams > 1));
 8018806:	697a      	ldr	r2, [r7, #20]
 8018808:	683b      	ldr	r3, [r7, #0]
 801880a:	429a      	cmp	r2, r3
 801880c:	da02      	bge.n	8018814 <ip_reass_remove_oldest_datagram+0xb4>
 801880e:	693b      	ldr	r3, [r7, #16]
 8018810:	2b01      	cmp	r3, #1
 8018812:	dcac      	bgt.n	801876e <ip_reass_remove_oldest_datagram+0xe>
  return pbufs_freed;
 8018814:	697b      	ldr	r3, [r7, #20]
}
 8018816:	4618      	mov	r0, r3
 8018818:	3728      	adds	r7, #40	; 0x28
 801881a:	46bd      	mov	sp, r7
 801881c:	bd80      	pop	{r7, pc}
 801881e:	bf00      	nop
 8018820:	20007228 	.word	0x20007228

08018824 <ip_reass_enqueue_new_datagram>:
 * @param clen number of pbufs needed to enqueue (used for freeing other datagrams if not enough space)
 * @return A pointer to the queue location into which the fragment was enqueued
 */
static struct ip_reassdata *
ip_reass_enqueue_new_datagram(struct ip_hdr *fraghdr, int clen)
{
 8018824:	b580      	push	{r7, lr}
 8018826:	b084      	sub	sp, #16
 8018828:	af00      	add	r7, sp, #0
 801882a:	6078      	str	r0, [r7, #4]
 801882c:	6039      	str	r1, [r7, #0]
#if ! IP_REASS_FREE_OLDEST
  LWIP_UNUSED_ARG(clen);
#endif

  /* No matching previous fragment found, allocate a new reassdata struct */
  ipr = (struct ip_reassdata *)memp_malloc(MEMP_REASSDATA);
 801882e:	2004      	movs	r0, #4
 8018830:	f7f7 fd78 	bl	8010324 <memp_malloc>
 8018834:	60f8      	str	r0, [r7, #12]
  if (ipr == NULL) {
 8018836:	68fb      	ldr	r3, [r7, #12]
 8018838:	2b00      	cmp	r3, #0
 801883a:	d110      	bne.n	801885e <ip_reass_enqueue_new_datagram+0x3a>
#if IP_REASS_FREE_OLDEST
    if (ip_reass_remove_oldest_datagram(fraghdr, clen) >= clen) {
 801883c:	6839      	ldr	r1, [r7, #0]
 801883e:	6878      	ldr	r0, [r7, #4]
 8018840:	f7ff ff8e 	bl	8018760 <ip_reass_remove_oldest_datagram>
 8018844:	4602      	mov	r2, r0
 8018846:	683b      	ldr	r3, [r7, #0]
 8018848:	4293      	cmp	r3, r2
 801884a:	dc03      	bgt.n	8018854 <ip_reass_enqueue_new_datagram+0x30>
      ipr = (struct ip_reassdata *)memp_malloc(MEMP_REASSDATA);
 801884c:	2004      	movs	r0, #4
 801884e:	f7f7 fd69 	bl	8010324 <memp_malloc>
 8018852:	60f8      	str	r0, [r7, #12]
    }
    if (ipr == NULL)
 8018854:	68fb      	ldr	r3, [r7, #12]
 8018856:	2b00      	cmp	r3, #0
 8018858:	d101      	bne.n	801885e <ip_reass_enqueue_new_datagram+0x3a>
#endif /* IP_REASS_FREE_OLDEST */
    {
      IPFRAG_STATS_INC(ip_frag.memerr);
      LWIP_DEBUGF(IP_REASS_DEBUG, ("Failed to alloc reassdata struct\n"));
      return NULL;
 801885a:	2300      	movs	r3, #0
 801885c:	e016      	b.n	801888c <ip_reass_enqueue_new_datagram+0x68>
    }
  }
  memset(ipr, 0, sizeof(struct ip_reassdata));
 801885e:	2220      	movs	r2, #32
 8018860:	2100      	movs	r1, #0
 8018862:	68f8      	ldr	r0, [r7, #12]
 8018864:	f001 fc52 	bl	801a10c <memset>
  ipr->timer = IP_REASS_MAXAGE;
 8018868:	68fb      	ldr	r3, [r7, #12]
 801886a:	220f      	movs	r2, #15
 801886c:	77da      	strb	r2, [r3, #31]

  /* enqueue the new structure to the front of the list */
  ipr->next = reassdatagrams;
 801886e:	4b09      	ldr	r3, [pc, #36]	; (8018894 <ip_reass_enqueue_new_datagram+0x70>)
 8018870:	681a      	ldr	r2, [r3, #0]
 8018872:	68fb      	ldr	r3, [r7, #12]
 8018874:	601a      	str	r2, [r3, #0]
  reassdatagrams = ipr;
 8018876:	4a07      	ldr	r2, [pc, #28]	; (8018894 <ip_reass_enqueue_new_datagram+0x70>)
 8018878:	68fb      	ldr	r3, [r7, #12]
 801887a:	6013      	str	r3, [r2, #0]
  /* copy the ip header for later tests and input */
  /* @todo: no ip options supported? */
  SMEMCPY(&(ipr->iphdr), fraghdr, IP_HLEN);
 801887c:	68fb      	ldr	r3, [r7, #12]
 801887e:	3308      	adds	r3, #8
 8018880:	2214      	movs	r2, #20
 8018882:	6879      	ldr	r1, [r7, #4]
 8018884:	4618      	mov	r0, r3
 8018886:	f001 fcba 	bl	801a1fe <memcpy>
  return ipr;
 801888a:	68fb      	ldr	r3, [r7, #12]
}
 801888c:	4618      	mov	r0, r3
 801888e:	3710      	adds	r7, #16
 8018890:	46bd      	mov	sp, r7
 8018892:	bd80      	pop	{r7, pc}
 8018894:	20007228 	.word	0x20007228

08018898 <ip_reass_dequeue_datagram>:
 * Dequeues a datagram from the datagram queue. Doesn't deallocate the pbufs.
 * @param ipr points to the queue entry to dequeue
 */
static void
ip_reass_dequeue_datagram(struct ip_reassdata *ipr, struct ip_reassdata *prev)
{
 8018898:	b580      	push	{r7, lr}
 801889a:	b082      	sub	sp, #8
 801889c:	af00      	add	r7, sp, #0
 801889e:	6078      	str	r0, [r7, #4]
 80188a0:	6039      	str	r1, [r7, #0]
  /* dequeue the reass struct  */
  if (reassdatagrams == ipr) {
 80188a2:	4b10      	ldr	r3, [pc, #64]	; (80188e4 <ip_reass_dequeue_datagram+0x4c>)
 80188a4:	681b      	ldr	r3, [r3, #0]
 80188a6:	687a      	ldr	r2, [r7, #4]
 80188a8:	429a      	cmp	r2, r3
 80188aa:	d104      	bne.n	80188b6 <ip_reass_dequeue_datagram+0x1e>
    /* it was the first in the list */
    reassdatagrams = ipr->next;
 80188ac:	687b      	ldr	r3, [r7, #4]
 80188ae:	681b      	ldr	r3, [r3, #0]
 80188b0:	4a0c      	ldr	r2, [pc, #48]	; (80188e4 <ip_reass_dequeue_datagram+0x4c>)
 80188b2:	6013      	str	r3, [r2, #0]
 80188b4:	e00d      	b.n	80188d2 <ip_reass_dequeue_datagram+0x3a>
  } else {
    /* it wasn't the first, so it must have a valid 'prev' */
    LWIP_ASSERT("sanity check linked list", prev != NULL);
 80188b6:	683b      	ldr	r3, [r7, #0]
 80188b8:	2b00      	cmp	r3, #0
 80188ba:	d106      	bne.n	80188ca <ip_reass_dequeue_datagram+0x32>
 80188bc:	4b0a      	ldr	r3, [pc, #40]	; (80188e8 <ip_reass_dequeue_datagram+0x50>)
 80188be:	f240 1245 	movw	r2, #325	; 0x145
 80188c2:	490a      	ldr	r1, [pc, #40]	; (80188ec <ip_reass_dequeue_datagram+0x54>)
 80188c4:	480a      	ldr	r0, [pc, #40]	; (80188f0 <ip_reass_dequeue_datagram+0x58>)
 80188c6:	f001 facb 	bl	8019e60 <iprintf>
    prev->next = ipr->next;
 80188ca:	687b      	ldr	r3, [r7, #4]
 80188cc:	681a      	ldr	r2, [r3, #0]
 80188ce:	683b      	ldr	r3, [r7, #0]
 80188d0:	601a      	str	r2, [r3, #0]
  }

  /* now we can free the ip_reassdata struct */
  memp_free(MEMP_REASSDATA, ipr);
 80188d2:	6879      	ldr	r1, [r7, #4]
 80188d4:	2004      	movs	r0, #4
 80188d6:	f7f7 fd95 	bl	8010404 <memp_free>
}
 80188da:	bf00      	nop
 80188dc:	3708      	adds	r7, #8
 80188de:	46bd      	mov	sp, r7
 80188e0:	bd80      	pop	{r7, pc}
 80188e2:	bf00      	nop
 80188e4:	20007228 	.word	0x20007228
 80188e8:	0801f0dc 	.word	0x0801f0dc
 80188ec:	0801f1a4 	.word	0x0801f1a4
 80188f0:	0801f124 	.word	0x0801f124

080188f4 <ip_reass_chain_frag_into_datagram_and_validate>:
 * @param is_last is 1 if this pbuf has MF==0 (ipr->flags not updated yet)
 * @return see IP_REASS_VALIDATE_* defines
 */
static int
ip_reass_chain_frag_into_datagram_and_validate(struct ip_reassdata *ipr, struct pbuf *new_p, int is_last)
{
 80188f4:	b580      	push	{r7, lr}
 80188f6:	b08c      	sub	sp, #48	; 0x30
 80188f8:	af00      	add	r7, sp, #0
 80188fa:	60f8      	str	r0, [r7, #12]
 80188fc:	60b9      	str	r1, [r7, #8]
 80188fe:	607a      	str	r2, [r7, #4]
  struct ip_reass_helper *iprh, *iprh_tmp, *iprh_prev = NULL;
 8018900:	2300      	movs	r3, #0
 8018902:	62bb      	str	r3, [r7, #40]	; 0x28
  struct pbuf *q;
  u16_t offset, len;
  u8_t hlen;
  struct ip_hdr *fraghdr;
  int valid = 1;
 8018904:	2301      	movs	r3, #1
 8018906:	623b      	str	r3, [r7, #32]

  /* Extract length and fragment offset from current fragment */
  fraghdr = (struct ip_hdr *)new_p->payload;
 8018908:	68bb      	ldr	r3, [r7, #8]
 801890a:	685b      	ldr	r3, [r3, #4]
 801890c:	61fb      	str	r3, [r7, #28]
  len = lwip_ntohs(IPH_LEN(fraghdr));
 801890e:	69fb      	ldr	r3, [r7, #28]
 8018910:	885b      	ldrh	r3, [r3, #2]
 8018912:	b29b      	uxth	r3, r3
 8018914:	4618      	mov	r0, r3
 8018916:	f7f6 ffe7 	bl	800f8e8 <lwip_htons>
 801891a:	4603      	mov	r3, r0
 801891c:	837b      	strh	r3, [r7, #26]
  hlen = IPH_HL_BYTES(fraghdr);
 801891e:	69fb      	ldr	r3, [r7, #28]
 8018920:	781b      	ldrb	r3, [r3, #0]
 8018922:	f003 030f 	and.w	r3, r3, #15
 8018926:	b2db      	uxtb	r3, r3
 8018928:	009b      	lsls	r3, r3, #2
 801892a:	767b      	strb	r3, [r7, #25]
  if (hlen > len) {
 801892c:	7e7b      	ldrb	r3, [r7, #25]
 801892e:	b29b      	uxth	r3, r3
 8018930:	8b7a      	ldrh	r2, [r7, #26]
 8018932:	429a      	cmp	r2, r3
 8018934:	d202      	bcs.n	801893c <ip_reass_chain_frag_into_datagram_and_validate+0x48>
    /* invalid datagram */
    return IP_REASS_VALIDATE_PBUF_DROPPED;
 8018936:	f04f 33ff 	mov.w	r3, #4294967295
 801893a:	e135      	b.n	8018ba8 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
  }
  len = (u16_t)(len - hlen);
 801893c:	7e7b      	ldrb	r3, [r7, #25]
 801893e:	b29b      	uxth	r3, r3
 8018940:	8b7a      	ldrh	r2, [r7, #26]
 8018942:	1ad3      	subs	r3, r2, r3
 8018944:	837b      	strh	r3, [r7, #26]
  offset = IPH_OFFSET_BYTES(fraghdr);
 8018946:	69fb      	ldr	r3, [r7, #28]
 8018948:	88db      	ldrh	r3, [r3, #6]
 801894a:	b29b      	uxth	r3, r3
 801894c:	4618      	mov	r0, r3
 801894e:	f7f6 ffcb 	bl	800f8e8 <lwip_htons>
 8018952:	4603      	mov	r3, r0
 8018954:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8018958:	b29b      	uxth	r3, r3
 801895a:	00db      	lsls	r3, r3, #3
 801895c:	82fb      	strh	r3, [r7, #22]
  /* overwrite the fragment's ip header from the pbuf with our helper struct,
   * and setup the embedded helper structure. */
  /* make sure the struct ip_reass_helper fits into the IP header */
  LWIP_ASSERT("sizeof(struct ip_reass_helper) <= IP_HLEN",
              sizeof(struct ip_reass_helper) <= IP_HLEN);
  iprh = (struct ip_reass_helper *)new_p->payload;
 801895e:	68bb      	ldr	r3, [r7, #8]
 8018960:	685b      	ldr	r3, [r3, #4]
 8018962:	62fb      	str	r3, [r7, #44]	; 0x2c
  iprh->next_pbuf = NULL;
 8018964:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8018966:	2200      	movs	r2, #0
 8018968:	701a      	strb	r2, [r3, #0]
 801896a:	2200      	movs	r2, #0
 801896c:	705a      	strb	r2, [r3, #1]
 801896e:	2200      	movs	r2, #0
 8018970:	709a      	strb	r2, [r3, #2]
 8018972:	2200      	movs	r2, #0
 8018974:	70da      	strb	r2, [r3, #3]
  iprh->start = offset;
 8018976:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8018978:	8afa      	ldrh	r2, [r7, #22]
 801897a:	809a      	strh	r2, [r3, #4]
  iprh->end = (u16_t)(offset + len);
 801897c:	8afa      	ldrh	r2, [r7, #22]
 801897e:	8b7b      	ldrh	r3, [r7, #26]
 8018980:	4413      	add	r3, r2
 8018982:	b29a      	uxth	r2, r3
 8018984:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8018986:	80da      	strh	r2, [r3, #6]
  if (iprh->end < offset) {
 8018988:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801898a:	88db      	ldrh	r3, [r3, #6]
 801898c:	b29b      	uxth	r3, r3
 801898e:	8afa      	ldrh	r2, [r7, #22]
 8018990:	429a      	cmp	r2, r3
 8018992:	d902      	bls.n	801899a <ip_reass_chain_frag_into_datagram_and_validate+0xa6>
    /* u16_t overflow, cannot handle this */
    return IP_REASS_VALIDATE_PBUF_DROPPED;
 8018994:	f04f 33ff 	mov.w	r3, #4294967295
 8018998:	e106      	b.n	8018ba8 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
  }

  /* Iterate through until we either get to the end of the list (append),
   * or we find one with a larger offset (insert). */
  for (q = ipr->p; q != NULL;) {
 801899a:	68fb      	ldr	r3, [r7, #12]
 801899c:	685b      	ldr	r3, [r3, #4]
 801899e:	627b      	str	r3, [r7, #36]	; 0x24
 80189a0:	e068      	b.n	8018a74 <ip_reass_chain_frag_into_datagram_and_validate+0x180>
    iprh_tmp = (struct ip_reass_helper *)q->payload;
 80189a2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80189a4:	685b      	ldr	r3, [r3, #4]
 80189a6:	613b      	str	r3, [r7, #16]
    if (iprh->start < iprh_tmp->start) {
 80189a8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80189aa:	889b      	ldrh	r3, [r3, #4]
 80189ac:	b29a      	uxth	r2, r3
 80189ae:	693b      	ldr	r3, [r7, #16]
 80189b0:	889b      	ldrh	r3, [r3, #4]
 80189b2:	b29b      	uxth	r3, r3
 80189b4:	429a      	cmp	r2, r3
 80189b6:	d235      	bcs.n	8018a24 <ip_reass_chain_frag_into_datagram_and_validate+0x130>
      /* the new pbuf should be inserted before this */
      iprh->next_pbuf = q;
 80189b8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80189ba:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80189bc:	601a      	str	r2, [r3, #0]
      if (iprh_prev != NULL) {
 80189be:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80189c0:	2b00      	cmp	r3, #0
 80189c2:	d020      	beq.n	8018a06 <ip_reass_chain_frag_into_datagram_and_validate+0x112>
        /* not the fragment with the lowest offset */
#if IP_REASS_CHECK_OVERLAP
        if ((iprh->start < iprh_prev->end) || (iprh->end > iprh_tmp->start)) {
 80189c4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80189c6:	889b      	ldrh	r3, [r3, #4]
 80189c8:	b29a      	uxth	r2, r3
 80189ca:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80189cc:	88db      	ldrh	r3, [r3, #6]
 80189ce:	b29b      	uxth	r3, r3
 80189d0:	429a      	cmp	r2, r3
 80189d2:	d307      	bcc.n	80189e4 <ip_reass_chain_frag_into_datagram_and_validate+0xf0>
 80189d4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80189d6:	88db      	ldrh	r3, [r3, #6]
 80189d8:	b29a      	uxth	r2, r3
 80189da:	693b      	ldr	r3, [r7, #16]
 80189dc:	889b      	ldrh	r3, [r3, #4]
 80189de:	b29b      	uxth	r3, r3
 80189e0:	429a      	cmp	r2, r3
 80189e2:	d902      	bls.n	80189ea <ip_reass_chain_frag_into_datagram_and_validate+0xf6>
          /* fragment overlaps with previous or following, throw away */
          return IP_REASS_VALIDATE_PBUF_DROPPED;
 80189e4:	f04f 33ff 	mov.w	r3, #4294967295
 80189e8:	e0de      	b.n	8018ba8 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
        }
#endif /* IP_REASS_CHECK_OVERLAP */
        iprh_prev->next_pbuf = new_p;
 80189ea:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80189ec:	68ba      	ldr	r2, [r7, #8]
 80189ee:	601a      	str	r2, [r3, #0]
        if (iprh_prev->end != iprh->start) {
 80189f0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80189f2:	88db      	ldrh	r3, [r3, #6]
 80189f4:	b29a      	uxth	r2, r3
 80189f6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80189f8:	889b      	ldrh	r3, [r3, #4]
 80189fa:	b29b      	uxth	r3, r3
 80189fc:	429a      	cmp	r2, r3
 80189fe:	d03d      	beq.n	8018a7c <ip_reass_chain_frag_into_datagram_and_validate+0x188>
          /* There is a fragment missing between the current
           * and the previous fragment */
          valid = 0;
 8018a00:	2300      	movs	r3, #0
 8018a02:	623b      	str	r3, [r7, #32]
        }
#endif /* IP_REASS_CHECK_OVERLAP */
        /* fragment with the lowest offset */
        ipr->p = new_p;
      }
      break;
 8018a04:	e03a      	b.n	8018a7c <ip_reass_chain_frag_into_datagram_and_validate+0x188>
        if (iprh->end > iprh_tmp->start) {
 8018a06:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8018a08:	88db      	ldrh	r3, [r3, #6]
 8018a0a:	b29a      	uxth	r2, r3
 8018a0c:	693b      	ldr	r3, [r7, #16]
 8018a0e:	889b      	ldrh	r3, [r3, #4]
 8018a10:	b29b      	uxth	r3, r3
 8018a12:	429a      	cmp	r2, r3
 8018a14:	d902      	bls.n	8018a1c <ip_reass_chain_frag_into_datagram_and_validate+0x128>
          return IP_REASS_VALIDATE_PBUF_DROPPED;
 8018a16:	f04f 33ff 	mov.w	r3, #4294967295
 8018a1a:	e0c5      	b.n	8018ba8 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
        ipr->p = new_p;
 8018a1c:	68fb      	ldr	r3, [r7, #12]
 8018a1e:	68ba      	ldr	r2, [r7, #8]
 8018a20:	605a      	str	r2, [r3, #4]
      break;
 8018a22:	e02b      	b.n	8018a7c <ip_reass_chain_frag_into_datagram_and_validate+0x188>
    } else if (iprh->start == iprh_tmp->start) {
 8018a24:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8018a26:	889b      	ldrh	r3, [r3, #4]
 8018a28:	b29a      	uxth	r2, r3
 8018a2a:	693b      	ldr	r3, [r7, #16]
 8018a2c:	889b      	ldrh	r3, [r3, #4]
 8018a2e:	b29b      	uxth	r3, r3
 8018a30:	429a      	cmp	r2, r3
 8018a32:	d102      	bne.n	8018a3a <ip_reass_chain_frag_into_datagram_and_validate+0x146>
      /* received the same datagram twice: no need to keep the datagram */
      return IP_REASS_VALIDATE_PBUF_DROPPED;
 8018a34:	f04f 33ff 	mov.w	r3, #4294967295
 8018a38:	e0b6      	b.n	8018ba8 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
#if IP_REASS_CHECK_OVERLAP
    } else if (iprh->start < iprh_tmp->end) {
 8018a3a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8018a3c:	889b      	ldrh	r3, [r3, #4]
 8018a3e:	b29a      	uxth	r2, r3
 8018a40:	693b      	ldr	r3, [r7, #16]
 8018a42:	88db      	ldrh	r3, [r3, #6]
 8018a44:	b29b      	uxth	r3, r3
 8018a46:	429a      	cmp	r2, r3
 8018a48:	d202      	bcs.n	8018a50 <ip_reass_chain_frag_into_datagram_and_validate+0x15c>
      /* overlap: no need to keep the new datagram */
      return IP_REASS_VALIDATE_PBUF_DROPPED;
 8018a4a:	f04f 33ff 	mov.w	r3, #4294967295
 8018a4e:	e0ab      	b.n	8018ba8 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
#endif /* IP_REASS_CHECK_OVERLAP */
    } else {
      /* Check if the fragments received so far have no holes. */
      if (iprh_prev != NULL) {
 8018a50:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8018a52:	2b00      	cmp	r3, #0
 8018a54:	d009      	beq.n	8018a6a <ip_reass_chain_frag_into_datagram_and_validate+0x176>
        if (iprh_prev->end != iprh_tmp->start) {
 8018a56:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8018a58:	88db      	ldrh	r3, [r3, #6]
 8018a5a:	b29a      	uxth	r2, r3
 8018a5c:	693b      	ldr	r3, [r7, #16]
 8018a5e:	889b      	ldrh	r3, [r3, #4]
 8018a60:	b29b      	uxth	r3, r3
 8018a62:	429a      	cmp	r2, r3
 8018a64:	d001      	beq.n	8018a6a <ip_reass_chain_frag_into_datagram_and_validate+0x176>
          /* There is a fragment missing between the current
           * and the previous fragment */
          valid = 0;
 8018a66:	2300      	movs	r3, #0
 8018a68:	623b      	str	r3, [r7, #32]
        }
      }
    }
    q = iprh_tmp->next_pbuf;
 8018a6a:	693b      	ldr	r3, [r7, #16]
 8018a6c:	681b      	ldr	r3, [r3, #0]
 8018a6e:	627b      	str	r3, [r7, #36]	; 0x24
    iprh_prev = iprh_tmp;
 8018a70:	693b      	ldr	r3, [r7, #16]
 8018a72:	62bb      	str	r3, [r7, #40]	; 0x28
  for (q = ipr->p; q != NULL;) {
 8018a74:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8018a76:	2b00      	cmp	r3, #0
 8018a78:	d193      	bne.n	80189a2 <ip_reass_chain_frag_into_datagram_and_validate+0xae>
 8018a7a:	e000      	b.n	8018a7e <ip_reass_chain_frag_into_datagram_and_validate+0x18a>
      break;
 8018a7c:	bf00      	nop
  }

  /* If q is NULL, then we made it to the end of the list. Determine what to do now */
  if (q == NULL) {
 8018a7e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8018a80:	2b00      	cmp	r3, #0
 8018a82:	d12d      	bne.n	8018ae0 <ip_reass_chain_frag_into_datagram_and_validate+0x1ec>
    if (iprh_prev != NULL) {
 8018a84:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8018a86:	2b00      	cmp	r3, #0
 8018a88:	d01c      	beq.n	8018ac4 <ip_reass_chain_frag_into_datagram_and_validate+0x1d0>
      /* this is (for now), the fragment with the highest offset:
       * chain it to the last fragment */
#if IP_REASS_CHECK_OVERLAP
      LWIP_ASSERT("check fragments don't overlap", iprh_prev->end <= iprh->start);
 8018a8a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8018a8c:	88db      	ldrh	r3, [r3, #6]
 8018a8e:	b29a      	uxth	r2, r3
 8018a90:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8018a92:	889b      	ldrh	r3, [r3, #4]
 8018a94:	b29b      	uxth	r3, r3
 8018a96:	429a      	cmp	r2, r3
 8018a98:	d906      	bls.n	8018aa8 <ip_reass_chain_frag_into_datagram_and_validate+0x1b4>
 8018a9a:	4b45      	ldr	r3, [pc, #276]	; (8018bb0 <ip_reass_chain_frag_into_datagram_and_validate+0x2bc>)
 8018a9c:	f44f 72db 	mov.w	r2, #438	; 0x1b6
 8018aa0:	4944      	ldr	r1, [pc, #272]	; (8018bb4 <ip_reass_chain_frag_into_datagram_and_validate+0x2c0>)
 8018aa2:	4845      	ldr	r0, [pc, #276]	; (8018bb8 <ip_reass_chain_frag_into_datagram_and_validate+0x2c4>)
 8018aa4:	f001 f9dc 	bl	8019e60 <iprintf>
#endif /* IP_REASS_CHECK_OVERLAP */
      iprh_prev->next_pbuf = new_p;
 8018aa8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8018aaa:	68ba      	ldr	r2, [r7, #8]
 8018aac:	601a      	str	r2, [r3, #0]
      if (iprh_prev->end != iprh->start) {
 8018aae:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8018ab0:	88db      	ldrh	r3, [r3, #6]
 8018ab2:	b29a      	uxth	r2, r3
 8018ab4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8018ab6:	889b      	ldrh	r3, [r3, #4]
 8018ab8:	b29b      	uxth	r3, r3
 8018aba:	429a      	cmp	r2, r3
 8018abc:	d010      	beq.n	8018ae0 <ip_reass_chain_frag_into_datagram_and_validate+0x1ec>
        valid = 0;
 8018abe:	2300      	movs	r3, #0
 8018ac0:	623b      	str	r3, [r7, #32]
 8018ac2:	e00d      	b.n	8018ae0 <ip_reass_chain_frag_into_datagram_and_validate+0x1ec>
      }
    } else {
#if IP_REASS_CHECK_OVERLAP
      LWIP_ASSERT("no previous fragment, this must be the first fragment!",
 8018ac4:	68fb      	ldr	r3, [r7, #12]
 8018ac6:	685b      	ldr	r3, [r3, #4]
 8018ac8:	2b00      	cmp	r3, #0
 8018aca:	d006      	beq.n	8018ada <ip_reass_chain_frag_into_datagram_and_validate+0x1e6>
 8018acc:	4b38      	ldr	r3, [pc, #224]	; (8018bb0 <ip_reass_chain_frag_into_datagram_and_validate+0x2bc>)
 8018ace:	f44f 72df 	mov.w	r2, #446	; 0x1be
 8018ad2:	493a      	ldr	r1, [pc, #232]	; (8018bbc <ip_reass_chain_frag_into_datagram_and_validate+0x2c8>)
 8018ad4:	4838      	ldr	r0, [pc, #224]	; (8018bb8 <ip_reass_chain_frag_into_datagram_and_validate+0x2c4>)
 8018ad6:	f001 f9c3 	bl	8019e60 <iprintf>
                  ipr->p == NULL);
#endif /* IP_REASS_CHECK_OVERLAP */
      /* this is the first fragment we ever received for this ip datagram */
      ipr->p = new_p;
 8018ada:	68fb      	ldr	r3, [r7, #12]
 8018adc:	68ba      	ldr	r2, [r7, #8]
 8018ade:	605a      	str	r2, [r3, #4]
    }
  }

  /* At this point, the validation part begins: */
  /* If we already received the last fragment */
  if (is_last || ((ipr->flags & IP_REASS_FLAG_LASTFRAG) != 0)) {
 8018ae0:	687b      	ldr	r3, [r7, #4]
 8018ae2:	2b00      	cmp	r3, #0
 8018ae4:	d105      	bne.n	8018af2 <ip_reass_chain_frag_into_datagram_and_validate+0x1fe>
 8018ae6:	68fb      	ldr	r3, [r7, #12]
 8018ae8:	7f9b      	ldrb	r3, [r3, #30]
 8018aea:	f003 0301 	and.w	r3, r3, #1
 8018aee:	2b00      	cmp	r3, #0
 8018af0:	d059      	beq.n	8018ba6 <ip_reass_chain_frag_into_datagram_and_validate+0x2b2>
    /* and had no holes so far */
    if (valid) {
 8018af2:	6a3b      	ldr	r3, [r7, #32]
 8018af4:	2b00      	cmp	r3, #0
 8018af6:	d04f      	beq.n	8018b98 <ip_reass_chain_frag_into_datagram_and_validate+0x2a4>
      /* then check if the rest of the fragments is here */
      /* Check if the queue starts with the first datagram */
      if ((ipr->p == NULL) || (((struct ip_reass_helper *)ipr->p->payload)->start != 0)) {
 8018af8:	68fb      	ldr	r3, [r7, #12]
 8018afa:	685b      	ldr	r3, [r3, #4]
 8018afc:	2b00      	cmp	r3, #0
 8018afe:	d006      	beq.n	8018b0e <ip_reass_chain_frag_into_datagram_and_validate+0x21a>
 8018b00:	68fb      	ldr	r3, [r7, #12]
 8018b02:	685b      	ldr	r3, [r3, #4]
 8018b04:	685b      	ldr	r3, [r3, #4]
 8018b06:	889b      	ldrh	r3, [r3, #4]
 8018b08:	b29b      	uxth	r3, r3
 8018b0a:	2b00      	cmp	r3, #0
 8018b0c:	d002      	beq.n	8018b14 <ip_reass_chain_frag_into_datagram_and_validate+0x220>
        valid = 0;
 8018b0e:	2300      	movs	r3, #0
 8018b10:	623b      	str	r3, [r7, #32]
 8018b12:	e041      	b.n	8018b98 <ip_reass_chain_frag_into_datagram_and_validate+0x2a4>
      } else {
        /* and check that there are no holes after this datagram */
        iprh_prev = iprh;
 8018b14:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8018b16:	62bb      	str	r3, [r7, #40]	; 0x28
        q = iprh->next_pbuf;
 8018b18:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8018b1a:	681b      	ldr	r3, [r3, #0]
 8018b1c:	627b      	str	r3, [r7, #36]	; 0x24
        while (q != NULL) {
 8018b1e:	e012      	b.n	8018b46 <ip_reass_chain_frag_into_datagram_and_validate+0x252>
          iprh = (struct ip_reass_helper *)q->payload;
 8018b20:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8018b22:	685b      	ldr	r3, [r3, #4]
 8018b24:	62fb      	str	r3, [r7, #44]	; 0x2c
          if (iprh_prev->end != iprh->start) {
 8018b26:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8018b28:	88db      	ldrh	r3, [r3, #6]
 8018b2a:	b29a      	uxth	r2, r3
 8018b2c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8018b2e:	889b      	ldrh	r3, [r3, #4]
 8018b30:	b29b      	uxth	r3, r3
 8018b32:	429a      	cmp	r2, r3
 8018b34:	d002      	beq.n	8018b3c <ip_reass_chain_frag_into_datagram_and_validate+0x248>
            valid = 0;
 8018b36:	2300      	movs	r3, #0
 8018b38:	623b      	str	r3, [r7, #32]
            break;
 8018b3a:	e007      	b.n	8018b4c <ip_reass_chain_frag_into_datagram_and_validate+0x258>
          }
          iprh_prev = iprh;
 8018b3c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8018b3e:	62bb      	str	r3, [r7, #40]	; 0x28
          q = iprh->next_pbuf;
 8018b40:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8018b42:	681b      	ldr	r3, [r3, #0]
 8018b44:	627b      	str	r3, [r7, #36]	; 0x24
        while (q != NULL) {
 8018b46:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8018b48:	2b00      	cmp	r3, #0
 8018b4a:	d1e9      	bne.n	8018b20 <ip_reass_chain_frag_into_datagram_and_validate+0x22c>
        }
        /* if still valid, all fragments are received
         * (because to the MF==0 already arrived */
        if (valid) {
 8018b4c:	6a3b      	ldr	r3, [r7, #32]
 8018b4e:	2b00      	cmp	r3, #0
 8018b50:	d022      	beq.n	8018b98 <ip_reass_chain_frag_into_datagram_and_validate+0x2a4>
          LWIP_ASSERT("sanity check", ipr->p != NULL);
 8018b52:	68fb      	ldr	r3, [r7, #12]
 8018b54:	685b      	ldr	r3, [r3, #4]
 8018b56:	2b00      	cmp	r3, #0
 8018b58:	d106      	bne.n	8018b68 <ip_reass_chain_frag_into_datagram_and_validate+0x274>
 8018b5a:	4b15      	ldr	r3, [pc, #84]	; (8018bb0 <ip_reass_chain_frag_into_datagram_and_validate+0x2bc>)
 8018b5c:	f240 12df 	movw	r2, #479	; 0x1df
 8018b60:	4917      	ldr	r1, [pc, #92]	; (8018bc0 <ip_reass_chain_frag_into_datagram_and_validate+0x2cc>)
 8018b62:	4815      	ldr	r0, [pc, #84]	; (8018bb8 <ip_reass_chain_frag_into_datagram_and_validate+0x2c4>)
 8018b64:	f001 f97c 	bl	8019e60 <iprintf>
          LWIP_ASSERT("sanity check",
 8018b68:	68fb      	ldr	r3, [r7, #12]
 8018b6a:	685b      	ldr	r3, [r3, #4]
 8018b6c:	685b      	ldr	r3, [r3, #4]
 8018b6e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8018b70:	429a      	cmp	r2, r3
 8018b72:	d106      	bne.n	8018b82 <ip_reass_chain_frag_into_datagram_and_validate+0x28e>
 8018b74:	4b0e      	ldr	r3, [pc, #56]	; (8018bb0 <ip_reass_chain_frag_into_datagram_and_validate+0x2bc>)
 8018b76:	f44f 72f0 	mov.w	r2, #480	; 0x1e0
 8018b7a:	4911      	ldr	r1, [pc, #68]	; (8018bc0 <ip_reass_chain_frag_into_datagram_and_validate+0x2cc>)
 8018b7c:	480e      	ldr	r0, [pc, #56]	; (8018bb8 <ip_reass_chain_frag_into_datagram_and_validate+0x2c4>)
 8018b7e:	f001 f96f 	bl	8019e60 <iprintf>
                      ((struct ip_reass_helper *)ipr->p->payload) != iprh);
          LWIP_ASSERT("validate_datagram:next_pbuf!=NULL",
 8018b82:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8018b84:	681b      	ldr	r3, [r3, #0]
 8018b86:	2b00      	cmp	r3, #0
 8018b88:	d006      	beq.n	8018b98 <ip_reass_chain_frag_into_datagram_and_validate+0x2a4>
 8018b8a:	4b09      	ldr	r3, [pc, #36]	; (8018bb0 <ip_reass_chain_frag_into_datagram_and_validate+0x2bc>)
 8018b8c:	f44f 72f1 	mov.w	r2, #482	; 0x1e2
 8018b90:	490c      	ldr	r1, [pc, #48]	; (8018bc4 <ip_reass_chain_frag_into_datagram_and_validate+0x2d0>)
 8018b92:	4809      	ldr	r0, [pc, #36]	; (8018bb8 <ip_reass_chain_frag_into_datagram_and_validate+0x2c4>)
 8018b94:	f001 f964 	bl	8019e60 <iprintf>
      }
    }
    /* If valid is 0 here, there are some fragments missing in the middle
     * (since MF == 0 has already arrived). Such datagrams simply time out if
     * no more fragments are received... */
    return valid ? IP_REASS_VALIDATE_TELEGRAM_FINISHED : IP_REASS_VALIDATE_PBUF_QUEUED;
 8018b98:	6a3b      	ldr	r3, [r7, #32]
 8018b9a:	2b00      	cmp	r3, #0
 8018b9c:	bf14      	ite	ne
 8018b9e:	2301      	movne	r3, #1
 8018ba0:	2300      	moveq	r3, #0
 8018ba2:	b2db      	uxtb	r3, r3
 8018ba4:	e000      	b.n	8018ba8 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
  }
  /* If we come here, not all fragments were received, yet! */
  return IP_REASS_VALIDATE_PBUF_QUEUED; /* not yet valid! */
 8018ba6:	2300      	movs	r3, #0
}
 8018ba8:	4618      	mov	r0, r3
 8018baa:	3730      	adds	r7, #48	; 0x30
 8018bac:	46bd      	mov	sp, r7
 8018bae:	bd80      	pop	{r7, pc}
 8018bb0:	0801f0dc 	.word	0x0801f0dc
 8018bb4:	0801f1c0 	.word	0x0801f1c0
 8018bb8:	0801f124 	.word	0x0801f124
 8018bbc:	0801f1e0 	.word	0x0801f1e0
 8018bc0:	0801f218 	.word	0x0801f218
 8018bc4:	0801f228 	.word	0x0801f228

08018bc8 <ip4_reass>:
 * @param p points to a pbuf chain of the fragment
 * @return NULL if reassembly is incomplete, ? otherwise
 */
struct pbuf *
ip4_reass(struct pbuf *p)
{
 8018bc8:	b580      	push	{r7, lr}
 8018bca:	b08e      	sub	sp, #56	; 0x38
 8018bcc:	af00      	add	r7, sp, #0
 8018bce:	6078      	str	r0, [r7, #4]
  int is_last;

  IPFRAG_STATS_INC(ip_frag.recv);
  MIB2_STATS_INC(mib2.ipreasmreqds);

  fraghdr = (struct ip_hdr *)p->payload;
 8018bd0:	687b      	ldr	r3, [r7, #4]
 8018bd2:	685b      	ldr	r3, [r3, #4]
 8018bd4:	62bb      	str	r3, [r7, #40]	; 0x28

  if (IPH_HL_BYTES(fraghdr) != IP_HLEN) {
 8018bd6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8018bd8:	781b      	ldrb	r3, [r3, #0]
 8018bda:	f003 030f 	and.w	r3, r3, #15
 8018bde:	b2db      	uxtb	r3, r3
 8018be0:	009b      	lsls	r3, r3, #2
 8018be2:	b2db      	uxtb	r3, r3
 8018be4:	2b14      	cmp	r3, #20
 8018be6:	f040 8171 	bne.w	8018ecc <ip4_reass+0x304>
    LWIP_DEBUGF(IP_REASS_DEBUG, ("ip4_reass: IP options currently not supported!\n"));
    IPFRAG_STATS_INC(ip_frag.err);
    goto nullreturn;
  }

  offset = IPH_OFFSET_BYTES(fraghdr);
 8018bea:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8018bec:	88db      	ldrh	r3, [r3, #6]
 8018bee:	b29b      	uxth	r3, r3
 8018bf0:	4618      	mov	r0, r3
 8018bf2:	f7f6 fe79 	bl	800f8e8 <lwip_htons>
 8018bf6:	4603      	mov	r3, r0
 8018bf8:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8018bfc:	b29b      	uxth	r3, r3
 8018bfe:	00db      	lsls	r3, r3, #3
 8018c00:	84fb      	strh	r3, [r7, #38]	; 0x26
  len = lwip_ntohs(IPH_LEN(fraghdr));
 8018c02:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8018c04:	885b      	ldrh	r3, [r3, #2]
 8018c06:	b29b      	uxth	r3, r3
 8018c08:	4618      	mov	r0, r3
 8018c0a:	f7f6 fe6d 	bl	800f8e8 <lwip_htons>
 8018c0e:	4603      	mov	r3, r0
 8018c10:	84bb      	strh	r3, [r7, #36]	; 0x24
  hlen = IPH_HL_BYTES(fraghdr);
 8018c12:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8018c14:	781b      	ldrb	r3, [r3, #0]
 8018c16:	f003 030f 	and.w	r3, r3, #15
 8018c1a:	b2db      	uxtb	r3, r3
 8018c1c:	009b      	lsls	r3, r3, #2
 8018c1e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  if (hlen > len) {
 8018c22:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8018c26:	b29b      	uxth	r3, r3
 8018c28:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8018c2a:	429a      	cmp	r2, r3
 8018c2c:	f0c0 8150 	bcc.w	8018ed0 <ip4_reass+0x308>
    /* invalid datagram */
    goto nullreturn;
  }
  len = (u16_t)(len - hlen);
 8018c30:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8018c34:	b29b      	uxth	r3, r3
 8018c36:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8018c38:	1ad3      	subs	r3, r2, r3
 8018c3a:	84bb      	strh	r3, [r7, #36]	; 0x24

  /* Check if we are allowed to enqueue more datagrams. */
  clen = pbuf_clen(p);
 8018c3c:	6878      	ldr	r0, [r7, #4]
 8018c3e:	f7f8 fabf 	bl	80111c0 <pbuf_clen>
 8018c42:	4603      	mov	r3, r0
 8018c44:	843b      	strh	r3, [r7, #32]
  if ((ip_reass_pbufcount + clen) > IP_REASS_MAX_PBUFS) {
 8018c46:	4b8c      	ldr	r3, [pc, #560]	; (8018e78 <ip4_reass+0x2b0>)
 8018c48:	881b      	ldrh	r3, [r3, #0]
 8018c4a:	461a      	mov	r2, r3
 8018c4c:	8c3b      	ldrh	r3, [r7, #32]
 8018c4e:	4413      	add	r3, r2
 8018c50:	2b0a      	cmp	r3, #10
 8018c52:	dd10      	ble.n	8018c76 <ip4_reass+0xae>
#if IP_REASS_FREE_OLDEST
    if (!ip_reass_remove_oldest_datagram(fraghdr, clen) ||
 8018c54:	8c3b      	ldrh	r3, [r7, #32]
 8018c56:	4619      	mov	r1, r3
 8018c58:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8018c5a:	f7ff fd81 	bl	8018760 <ip_reass_remove_oldest_datagram>
 8018c5e:	4603      	mov	r3, r0
 8018c60:	2b00      	cmp	r3, #0
 8018c62:	f000 8137 	beq.w	8018ed4 <ip4_reass+0x30c>
        ((ip_reass_pbufcount + clen) > IP_REASS_MAX_PBUFS))
 8018c66:	4b84      	ldr	r3, [pc, #528]	; (8018e78 <ip4_reass+0x2b0>)
 8018c68:	881b      	ldrh	r3, [r3, #0]
 8018c6a:	461a      	mov	r2, r3
 8018c6c:	8c3b      	ldrh	r3, [r7, #32]
 8018c6e:	4413      	add	r3, r2
    if (!ip_reass_remove_oldest_datagram(fraghdr, clen) ||
 8018c70:	2b0a      	cmp	r3, #10
 8018c72:	f300 812f 	bgt.w	8018ed4 <ip4_reass+0x30c>
    }
  }

  /* Look for the datagram the fragment belongs to in the current datagram queue,
   * remembering the previous in the queue for later dequeueing. */
  for (ipr = reassdatagrams; ipr != NULL; ipr = ipr->next) {
 8018c76:	4b81      	ldr	r3, [pc, #516]	; (8018e7c <ip4_reass+0x2b4>)
 8018c78:	681b      	ldr	r3, [r3, #0]
 8018c7a:	633b      	str	r3, [r7, #48]	; 0x30
 8018c7c:	e015      	b.n	8018caa <ip4_reass+0xe2>
    /* Check if the incoming fragment matches the one currently present
       in the reassembly buffer. If so, we proceed with copying the
       fragment into the buffer. */
    if (IP_ADDRESSES_AND_ID_MATCH(&ipr->iphdr, fraghdr)) {
 8018c7e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8018c80:	695a      	ldr	r2, [r3, #20]
 8018c82:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8018c84:	68db      	ldr	r3, [r3, #12]
 8018c86:	429a      	cmp	r2, r3
 8018c88:	d10c      	bne.n	8018ca4 <ip4_reass+0xdc>
 8018c8a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8018c8c:	699a      	ldr	r2, [r3, #24]
 8018c8e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8018c90:	691b      	ldr	r3, [r3, #16]
 8018c92:	429a      	cmp	r2, r3
 8018c94:	d106      	bne.n	8018ca4 <ip4_reass+0xdc>
 8018c96:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8018c98:	899a      	ldrh	r2, [r3, #12]
 8018c9a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8018c9c:	889b      	ldrh	r3, [r3, #4]
 8018c9e:	b29b      	uxth	r3, r3
 8018ca0:	429a      	cmp	r2, r3
 8018ca2:	d006      	beq.n	8018cb2 <ip4_reass+0xea>
  for (ipr = reassdatagrams; ipr != NULL; ipr = ipr->next) {
 8018ca4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8018ca6:	681b      	ldr	r3, [r3, #0]
 8018ca8:	633b      	str	r3, [r7, #48]	; 0x30
 8018caa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8018cac:	2b00      	cmp	r3, #0
 8018cae:	d1e6      	bne.n	8018c7e <ip4_reass+0xb6>
 8018cb0:	e000      	b.n	8018cb4 <ip4_reass+0xec>
      LWIP_DEBUGF(IP_REASS_DEBUG, ("ip4_reass: matching previous fragment ID=%"X16_F"\n",
                                   lwip_ntohs(IPH_ID(fraghdr))));
      IPFRAG_STATS_INC(ip_frag.cachehit);
      break;
 8018cb2:	bf00      	nop
    }
  }

  if (ipr == NULL) {
 8018cb4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8018cb6:	2b00      	cmp	r3, #0
 8018cb8:	d109      	bne.n	8018cce <ip4_reass+0x106>
    /* Enqueue a new datagram into the datagram queue */
    ipr = ip_reass_enqueue_new_datagram(fraghdr, clen);
 8018cba:	8c3b      	ldrh	r3, [r7, #32]
 8018cbc:	4619      	mov	r1, r3
 8018cbe:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8018cc0:	f7ff fdb0 	bl	8018824 <ip_reass_enqueue_new_datagram>
 8018cc4:	6338      	str	r0, [r7, #48]	; 0x30
    /* Bail if unable to enqueue */
    if (ipr == NULL) {
 8018cc6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8018cc8:	2b00      	cmp	r3, #0
 8018cca:	d11c      	bne.n	8018d06 <ip4_reass+0x13e>
      goto nullreturn;
 8018ccc:	e105      	b.n	8018eda <ip4_reass+0x312>
    }
  } else {
    if (((lwip_ntohs(IPH_OFFSET(fraghdr)) & IP_OFFMASK) == 0) &&
 8018cce:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8018cd0:	88db      	ldrh	r3, [r3, #6]
 8018cd2:	b29b      	uxth	r3, r3
 8018cd4:	4618      	mov	r0, r3
 8018cd6:	f7f6 fe07 	bl	800f8e8 <lwip_htons>
 8018cda:	4603      	mov	r3, r0
 8018cdc:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8018ce0:	2b00      	cmp	r3, #0
 8018ce2:	d110      	bne.n	8018d06 <ip4_reass+0x13e>
        ((lwip_ntohs(IPH_OFFSET(&ipr->iphdr)) & IP_OFFMASK) != 0)) {
 8018ce4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8018ce6:	89db      	ldrh	r3, [r3, #14]
 8018ce8:	4618      	mov	r0, r3
 8018cea:	f7f6 fdfd 	bl	800f8e8 <lwip_htons>
 8018cee:	4603      	mov	r3, r0
 8018cf0:	f3c3 030c 	ubfx	r3, r3, #0, #13
    if (((lwip_ntohs(IPH_OFFSET(fraghdr)) & IP_OFFMASK) == 0) &&
 8018cf4:	2b00      	cmp	r3, #0
 8018cf6:	d006      	beq.n	8018d06 <ip4_reass+0x13e>
      /* ipr->iphdr is not the header from the first fragment, but fraghdr is
       * -> copy fraghdr into ipr->iphdr since we want to have the header
       * of the first fragment (for ICMP time exceeded and later, for copying
       * all options, if supported)*/
      SMEMCPY(&ipr->iphdr, fraghdr, IP_HLEN);
 8018cf8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8018cfa:	3308      	adds	r3, #8
 8018cfc:	2214      	movs	r2, #20
 8018cfe:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8018d00:	4618      	mov	r0, r3
 8018d02:	f001 fa7c 	bl	801a1fe <memcpy>

  /* At this point, we have either created a new entry or pointing
   * to an existing one */

  /* check for 'no more fragments', and update queue entry*/
  is_last = (IPH_OFFSET(fraghdr) & PP_NTOHS(IP_MF)) == 0;
 8018d06:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8018d08:	88db      	ldrh	r3, [r3, #6]
 8018d0a:	b29b      	uxth	r3, r3
 8018d0c:	f003 0320 	and.w	r3, r3, #32
 8018d10:	2b00      	cmp	r3, #0
 8018d12:	bf0c      	ite	eq
 8018d14:	2301      	moveq	r3, #1
 8018d16:	2300      	movne	r3, #0
 8018d18:	b2db      	uxtb	r3, r3
 8018d1a:	61fb      	str	r3, [r7, #28]
  if (is_last) {
 8018d1c:	69fb      	ldr	r3, [r7, #28]
 8018d1e:	2b00      	cmp	r3, #0
 8018d20:	d00e      	beq.n	8018d40 <ip4_reass+0x178>
    u16_t datagram_len = (u16_t)(offset + len);
 8018d22:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 8018d24:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8018d26:	4413      	add	r3, r2
 8018d28:	837b      	strh	r3, [r7, #26]
    if ((datagram_len < offset) || (datagram_len > (0xFFFF - IP_HLEN))) {
 8018d2a:	8b7a      	ldrh	r2, [r7, #26]
 8018d2c:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8018d2e:	429a      	cmp	r2, r3
 8018d30:	f0c0 80a0 	bcc.w	8018e74 <ip4_reass+0x2ac>
 8018d34:	8b7b      	ldrh	r3, [r7, #26]
 8018d36:	f64f 72eb 	movw	r2, #65515	; 0xffeb
 8018d3a:	4293      	cmp	r3, r2
 8018d3c:	f200 809a 	bhi.w	8018e74 <ip4_reass+0x2ac>
      goto nullreturn_ipr;
    }
  }
  /* find the right place to insert this pbuf */
  /* @todo: trim pbufs if fragments are overlapping */
  valid = ip_reass_chain_frag_into_datagram_and_validate(ipr, p, is_last);
 8018d40:	69fa      	ldr	r2, [r7, #28]
 8018d42:	6879      	ldr	r1, [r7, #4]
 8018d44:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8018d46:	f7ff fdd5 	bl	80188f4 <ip_reass_chain_frag_into_datagram_and_validate>
 8018d4a:	6178      	str	r0, [r7, #20]
  if (valid == IP_REASS_VALIDATE_PBUF_DROPPED) {
 8018d4c:	697b      	ldr	r3, [r7, #20]
 8018d4e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8018d52:	f000 809b 	beq.w	8018e8c <ip4_reass+0x2c4>
  /* if we come here, the pbuf has been enqueued */

  /* Track the current number of pbufs current 'in-flight', in order to limit
     the number of fragments that may be enqueued at any one time
     (overflow checked by testing against IP_REASS_MAX_PBUFS) */
  ip_reass_pbufcount = (u16_t)(ip_reass_pbufcount + clen);
 8018d56:	4b48      	ldr	r3, [pc, #288]	; (8018e78 <ip4_reass+0x2b0>)
 8018d58:	881a      	ldrh	r2, [r3, #0]
 8018d5a:	8c3b      	ldrh	r3, [r7, #32]
 8018d5c:	4413      	add	r3, r2
 8018d5e:	b29a      	uxth	r2, r3
 8018d60:	4b45      	ldr	r3, [pc, #276]	; (8018e78 <ip4_reass+0x2b0>)
 8018d62:	801a      	strh	r2, [r3, #0]
  if (is_last) {
 8018d64:	69fb      	ldr	r3, [r7, #28]
 8018d66:	2b00      	cmp	r3, #0
 8018d68:	d00d      	beq.n	8018d86 <ip4_reass+0x1be>
    u16_t datagram_len = (u16_t)(offset + len);
 8018d6a:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 8018d6c:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8018d6e:	4413      	add	r3, r2
 8018d70:	827b      	strh	r3, [r7, #18]
    ipr->datagram_len = datagram_len;
 8018d72:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8018d74:	8a7a      	ldrh	r2, [r7, #18]
 8018d76:	839a      	strh	r2, [r3, #28]
    ipr->flags |= IP_REASS_FLAG_LASTFRAG;
 8018d78:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8018d7a:	7f9b      	ldrb	r3, [r3, #30]
 8018d7c:	f043 0301 	orr.w	r3, r3, #1
 8018d80:	b2da      	uxtb	r2, r3
 8018d82:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8018d84:	779a      	strb	r2, [r3, #30]
    LWIP_DEBUGF(IP_REASS_DEBUG,
                ("ip4_reass: last fragment seen, total len %"S16_F"\n",
                 ipr->datagram_len));
  }

  if (valid == IP_REASS_VALIDATE_TELEGRAM_FINISHED) {
 8018d86:	697b      	ldr	r3, [r7, #20]
 8018d88:	2b01      	cmp	r3, #1
 8018d8a:	d171      	bne.n	8018e70 <ip4_reass+0x2a8>
    struct ip_reassdata *ipr_prev;
    /* the totally last fragment (flag more fragments = 0) was received at least
     * once AND all fragments are received */
    u16_t datagram_len = (u16_t)(ipr->datagram_len + IP_HLEN);
 8018d8c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8018d8e:	8b9b      	ldrh	r3, [r3, #28]
 8018d90:	3314      	adds	r3, #20
 8018d92:	823b      	strh	r3, [r7, #16]

    /* save the second pbuf before copying the header over the pointer */
    r = ((struct ip_reass_helper *)ipr->p->payload)->next_pbuf;
 8018d94:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8018d96:	685b      	ldr	r3, [r3, #4]
 8018d98:	685b      	ldr	r3, [r3, #4]
 8018d9a:	681b      	ldr	r3, [r3, #0]
 8018d9c:	637b      	str	r3, [r7, #52]	; 0x34

    /* copy the original ip header back to the first pbuf */
    fraghdr = (struct ip_hdr *)(ipr->p->payload);
 8018d9e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8018da0:	685b      	ldr	r3, [r3, #4]
 8018da2:	685b      	ldr	r3, [r3, #4]
 8018da4:	62bb      	str	r3, [r7, #40]	; 0x28
    SMEMCPY(fraghdr, &ipr->iphdr, IP_HLEN);
 8018da6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8018da8:	3308      	adds	r3, #8
 8018daa:	2214      	movs	r2, #20
 8018dac:	4619      	mov	r1, r3
 8018dae:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8018db0:	f001 fa25 	bl	801a1fe <memcpy>
    IPH_LEN_SET(fraghdr, lwip_htons(datagram_len));
 8018db4:	8a3b      	ldrh	r3, [r7, #16]
 8018db6:	4618      	mov	r0, r3
 8018db8:	f7f6 fd96 	bl	800f8e8 <lwip_htons>
 8018dbc:	4603      	mov	r3, r0
 8018dbe:	461a      	mov	r2, r3
 8018dc0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8018dc2:	805a      	strh	r2, [r3, #2]
    IPH_OFFSET_SET(fraghdr, 0);
 8018dc4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8018dc6:	2200      	movs	r2, #0
 8018dc8:	719a      	strb	r2, [r3, #6]
 8018dca:	2200      	movs	r2, #0
 8018dcc:	71da      	strb	r2, [r3, #7]
    IPH_CHKSUM_SET(fraghdr, 0);
 8018dce:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8018dd0:	2200      	movs	r2, #0
 8018dd2:	729a      	strb	r2, [r3, #10]
 8018dd4:	2200      	movs	r2, #0
 8018dd6:	72da      	strb	r2, [r3, #11]
    IF__NETIF_CHECKSUM_ENABLED(ip_current_input_netif(), NETIF_CHECKSUM_GEN_IP) {
      IPH_CHKSUM_SET(fraghdr, inet_chksum(fraghdr, IP_HLEN));
    }
#endif /* CHECKSUM_GEN_IP */

    p = ipr->p;
 8018dd8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8018dda:	685b      	ldr	r3, [r3, #4]
 8018ddc:	607b      	str	r3, [r7, #4]

    /* chain together the pbufs contained within the reass_data list. */
    while (r != NULL) {
 8018dde:	e00d      	b.n	8018dfc <ip4_reass+0x234>
      iprh = (struct ip_reass_helper *)r->payload;
 8018de0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8018de2:	685b      	ldr	r3, [r3, #4]
 8018de4:	60fb      	str	r3, [r7, #12]

      /* hide the ip header for every succeeding fragment */
      pbuf_remove_header(r, IP_HLEN);
 8018de6:	2114      	movs	r1, #20
 8018de8:	6b78      	ldr	r0, [r7, #52]	; 0x34
 8018dea:	f7f8 f8db 	bl	8010fa4 <pbuf_remove_header>
      pbuf_cat(p, r);
 8018dee:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8018df0:	6878      	ldr	r0, [r7, #4]
 8018df2:	f7f8 fa1f 	bl	8011234 <pbuf_cat>
      r = iprh->next_pbuf;
 8018df6:	68fb      	ldr	r3, [r7, #12]
 8018df8:	681b      	ldr	r3, [r3, #0]
 8018dfa:	637b      	str	r3, [r7, #52]	; 0x34
    while (r != NULL) {
 8018dfc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8018dfe:	2b00      	cmp	r3, #0
 8018e00:	d1ee      	bne.n	8018de0 <ip4_reass+0x218>
    }

    /* find the previous entry in the linked list */
    if (ipr == reassdatagrams) {
 8018e02:	4b1e      	ldr	r3, [pc, #120]	; (8018e7c <ip4_reass+0x2b4>)
 8018e04:	681b      	ldr	r3, [r3, #0]
 8018e06:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8018e08:	429a      	cmp	r2, r3
 8018e0a:	d102      	bne.n	8018e12 <ip4_reass+0x24a>
      ipr_prev = NULL;
 8018e0c:	2300      	movs	r3, #0
 8018e0e:	62fb      	str	r3, [r7, #44]	; 0x2c
 8018e10:	e010      	b.n	8018e34 <ip4_reass+0x26c>
    } else {
      for (ipr_prev = reassdatagrams; ipr_prev != NULL; ipr_prev = ipr_prev->next) {
 8018e12:	4b1a      	ldr	r3, [pc, #104]	; (8018e7c <ip4_reass+0x2b4>)
 8018e14:	681b      	ldr	r3, [r3, #0]
 8018e16:	62fb      	str	r3, [r7, #44]	; 0x2c
 8018e18:	e007      	b.n	8018e2a <ip4_reass+0x262>
        if (ipr_prev->next == ipr) {
 8018e1a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8018e1c:	681b      	ldr	r3, [r3, #0]
 8018e1e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8018e20:	429a      	cmp	r2, r3
 8018e22:	d006      	beq.n	8018e32 <ip4_reass+0x26a>
      for (ipr_prev = reassdatagrams; ipr_prev != NULL; ipr_prev = ipr_prev->next) {
 8018e24:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8018e26:	681b      	ldr	r3, [r3, #0]
 8018e28:	62fb      	str	r3, [r7, #44]	; 0x2c
 8018e2a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8018e2c:	2b00      	cmp	r3, #0
 8018e2e:	d1f4      	bne.n	8018e1a <ip4_reass+0x252>
 8018e30:	e000      	b.n	8018e34 <ip4_reass+0x26c>
          break;
 8018e32:	bf00      	nop
        }
      }
    }

    /* release the sources allocate for the fragment queue entry */
    ip_reass_dequeue_datagram(ipr, ipr_prev);
 8018e34:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8018e36:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8018e38:	f7ff fd2e 	bl	8018898 <ip_reass_dequeue_datagram>

    /* and adjust the number of pbufs currently queued for reassembly. */
    clen = pbuf_clen(p);
 8018e3c:	6878      	ldr	r0, [r7, #4]
 8018e3e:	f7f8 f9bf 	bl	80111c0 <pbuf_clen>
 8018e42:	4603      	mov	r3, r0
 8018e44:	843b      	strh	r3, [r7, #32]
    LWIP_ASSERT("ip_reass_pbufcount >= clen", ip_reass_pbufcount >= clen);
 8018e46:	4b0c      	ldr	r3, [pc, #48]	; (8018e78 <ip4_reass+0x2b0>)
 8018e48:	881b      	ldrh	r3, [r3, #0]
 8018e4a:	8c3a      	ldrh	r2, [r7, #32]
 8018e4c:	429a      	cmp	r2, r3
 8018e4e:	d906      	bls.n	8018e5e <ip4_reass+0x296>
 8018e50:	4b0b      	ldr	r3, [pc, #44]	; (8018e80 <ip4_reass+0x2b8>)
 8018e52:	f240 229b 	movw	r2, #667	; 0x29b
 8018e56:	490b      	ldr	r1, [pc, #44]	; (8018e84 <ip4_reass+0x2bc>)
 8018e58:	480b      	ldr	r0, [pc, #44]	; (8018e88 <ip4_reass+0x2c0>)
 8018e5a:	f001 f801 	bl	8019e60 <iprintf>
    ip_reass_pbufcount = (u16_t)(ip_reass_pbufcount - clen);
 8018e5e:	4b06      	ldr	r3, [pc, #24]	; (8018e78 <ip4_reass+0x2b0>)
 8018e60:	881a      	ldrh	r2, [r3, #0]
 8018e62:	8c3b      	ldrh	r3, [r7, #32]
 8018e64:	1ad3      	subs	r3, r2, r3
 8018e66:	b29a      	uxth	r2, r3
 8018e68:	4b03      	ldr	r3, [pc, #12]	; (8018e78 <ip4_reass+0x2b0>)
 8018e6a:	801a      	strh	r2, [r3, #0]

    MIB2_STATS_INC(mib2.ipreasmoks);

    /* Return the pbuf chain */
    return p;
 8018e6c:	687b      	ldr	r3, [r7, #4]
 8018e6e:	e038      	b.n	8018ee2 <ip4_reass+0x31a>
  }
  /* the datagram is not (yet?) reassembled completely */
  LWIP_DEBUGF(IP_REASS_DEBUG, ("ip_reass_pbufcount: %d out\n", ip_reass_pbufcount));
  return NULL;
 8018e70:	2300      	movs	r3, #0
 8018e72:	e036      	b.n	8018ee2 <ip4_reass+0x31a>
      goto nullreturn_ipr;
 8018e74:	bf00      	nop
 8018e76:	e00a      	b.n	8018e8e <ip4_reass+0x2c6>
 8018e78:	2000722c 	.word	0x2000722c
 8018e7c:	20007228 	.word	0x20007228
 8018e80:	0801f0dc 	.word	0x0801f0dc
 8018e84:	0801f24c 	.word	0x0801f24c
 8018e88:	0801f124 	.word	0x0801f124
    goto nullreturn_ipr;
 8018e8c:	bf00      	nop

nullreturn_ipr:
  LWIP_ASSERT("ipr != NULL", ipr != NULL);
 8018e8e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8018e90:	2b00      	cmp	r3, #0
 8018e92:	d106      	bne.n	8018ea2 <ip4_reass+0x2da>
 8018e94:	4b15      	ldr	r3, [pc, #84]	; (8018eec <ip4_reass+0x324>)
 8018e96:	f44f 722a 	mov.w	r2, #680	; 0x2a8
 8018e9a:	4915      	ldr	r1, [pc, #84]	; (8018ef0 <ip4_reass+0x328>)
 8018e9c:	4815      	ldr	r0, [pc, #84]	; (8018ef4 <ip4_reass+0x32c>)
 8018e9e:	f000 ffdf 	bl	8019e60 <iprintf>
  if (ipr->p == NULL) {
 8018ea2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8018ea4:	685b      	ldr	r3, [r3, #4]
 8018ea6:	2b00      	cmp	r3, #0
 8018ea8:	d116      	bne.n	8018ed8 <ip4_reass+0x310>
    /* dropped pbuf after creating a new datagram entry: remove the entry, too */
    LWIP_ASSERT("not firstalthough just enqueued", ipr == reassdatagrams);
 8018eaa:	4b13      	ldr	r3, [pc, #76]	; (8018ef8 <ip4_reass+0x330>)
 8018eac:	681b      	ldr	r3, [r3, #0]
 8018eae:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8018eb0:	429a      	cmp	r2, r3
 8018eb2:	d006      	beq.n	8018ec2 <ip4_reass+0x2fa>
 8018eb4:	4b0d      	ldr	r3, [pc, #52]	; (8018eec <ip4_reass+0x324>)
 8018eb6:	f240 22ab 	movw	r2, #683	; 0x2ab
 8018eba:	4910      	ldr	r1, [pc, #64]	; (8018efc <ip4_reass+0x334>)
 8018ebc:	480d      	ldr	r0, [pc, #52]	; (8018ef4 <ip4_reass+0x32c>)
 8018ebe:	f000 ffcf 	bl	8019e60 <iprintf>
    ip_reass_dequeue_datagram(ipr, NULL);
 8018ec2:	2100      	movs	r1, #0
 8018ec4:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8018ec6:	f7ff fce7 	bl	8018898 <ip_reass_dequeue_datagram>
 8018eca:	e006      	b.n	8018eda <ip4_reass+0x312>
    goto nullreturn;
 8018ecc:	bf00      	nop
 8018ece:	e004      	b.n	8018eda <ip4_reass+0x312>
    goto nullreturn;
 8018ed0:	bf00      	nop
 8018ed2:	e002      	b.n	8018eda <ip4_reass+0x312>
      goto nullreturn;
 8018ed4:	bf00      	nop
 8018ed6:	e000      	b.n	8018eda <ip4_reass+0x312>
  }

nullreturn:
 8018ed8:	bf00      	nop
  LWIP_DEBUGF(IP_REASS_DEBUG, ("ip4_reass: nullreturn\n"));
  IPFRAG_STATS_INC(ip_frag.drop);
  pbuf_free(p);
 8018eda:	6878      	ldr	r0, [r7, #4]
 8018edc:	f7f8 f8e8 	bl	80110b0 <pbuf_free>
  return NULL;
 8018ee0:	2300      	movs	r3, #0
}
 8018ee2:	4618      	mov	r0, r3
 8018ee4:	3738      	adds	r7, #56	; 0x38
 8018ee6:	46bd      	mov	sp, r7
 8018ee8:	bd80      	pop	{r7, pc}
 8018eea:	bf00      	nop
 8018eec:	0801f0dc 	.word	0x0801f0dc
 8018ef0:	0801f268 	.word	0x0801f268
 8018ef4:	0801f124 	.word	0x0801f124
 8018ef8:	20007228 	.word	0x20007228
 8018efc:	0801f274 	.word	0x0801f274

08018f00 <ip_frag_alloc_pbuf_custom_ref>:
#if IP_FRAG
#if !LWIP_NETIF_TX_SINGLE_PBUF
/** Allocate a new struct pbuf_custom_ref */
static struct pbuf_custom_ref *
ip_frag_alloc_pbuf_custom_ref(void)
{
 8018f00:	b580      	push	{r7, lr}
 8018f02:	af00      	add	r7, sp, #0
  return (struct pbuf_custom_ref *)memp_malloc(MEMP_FRAG_PBUF);
 8018f04:	2005      	movs	r0, #5
 8018f06:	f7f7 fa0d 	bl	8010324 <memp_malloc>
 8018f0a:	4603      	mov	r3, r0
}
 8018f0c:	4618      	mov	r0, r3
 8018f0e:	bd80      	pop	{r7, pc}

08018f10 <ip_frag_free_pbuf_custom_ref>:

/** Free a struct pbuf_custom_ref */
static void
ip_frag_free_pbuf_custom_ref(struct pbuf_custom_ref *p)
{
 8018f10:	b580      	push	{r7, lr}
 8018f12:	b082      	sub	sp, #8
 8018f14:	af00      	add	r7, sp, #0
 8018f16:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("p != NULL", p != NULL);
 8018f18:	687b      	ldr	r3, [r7, #4]
 8018f1a:	2b00      	cmp	r3, #0
 8018f1c:	d106      	bne.n	8018f2c <ip_frag_free_pbuf_custom_ref+0x1c>
 8018f1e:	4b07      	ldr	r3, [pc, #28]	; (8018f3c <ip_frag_free_pbuf_custom_ref+0x2c>)
 8018f20:	f44f 7231 	mov.w	r2, #708	; 0x2c4
 8018f24:	4906      	ldr	r1, [pc, #24]	; (8018f40 <ip_frag_free_pbuf_custom_ref+0x30>)
 8018f26:	4807      	ldr	r0, [pc, #28]	; (8018f44 <ip_frag_free_pbuf_custom_ref+0x34>)
 8018f28:	f000 ff9a 	bl	8019e60 <iprintf>
  memp_free(MEMP_FRAG_PBUF, p);
 8018f2c:	6879      	ldr	r1, [r7, #4]
 8018f2e:	2005      	movs	r0, #5
 8018f30:	f7f7 fa68 	bl	8010404 <memp_free>
}
 8018f34:	bf00      	nop
 8018f36:	3708      	adds	r7, #8
 8018f38:	46bd      	mov	sp, r7
 8018f3a:	bd80      	pop	{r7, pc}
 8018f3c:	0801f0dc 	.word	0x0801f0dc
 8018f40:	0801f294 	.word	0x0801f294
 8018f44:	0801f124 	.word	0x0801f124

08018f48 <ipfrag_free_pbuf_custom>:

/** Free-callback function to free a 'struct pbuf_custom_ref', called by
 * pbuf_free. */
static void
ipfrag_free_pbuf_custom(struct pbuf *p)
{
 8018f48:	b580      	push	{r7, lr}
 8018f4a:	b084      	sub	sp, #16
 8018f4c:	af00      	add	r7, sp, #0
 8018f4e:	6078      	str	r0, [r7, #4]
  struct pbuf_custom_ref *pcr = (struct pbuf_custom_ref *)p;
 8018f50:	687b      	ldr	r3, [r7, #4]
 8018f52:	60fb      	str	r3, [r7, #12]
  LWIP_ASSERT("pcr != NULL", pcr != NULL);
 8018f54:	68fb      	ldr	r3, [r7, #12]
 8018f56:	2b00      	cmp	r3, #0
 8018f58:	d106      	bne.n	8018f68 <ipfrag_free_pbuf_custom+0x20>
 8018f5a:	4b11      	ldr	r3, [pc, #68]	; (8018fa0 <ipfrag_free_pbuf_custom+0x58>)
 8018f5c:	f240 22ce 	movw	r2, #718	; 0x2ce
 8018f60:	4910      	ldr	r1, [pc, #64]	; (8018fa4 <ipfrag_free_pbuf_custom+0x5c>)
 8018f62:	4811      	ldr	r0, [pc, #68]	; (8018fa8 <ipfrag_free_pbuf_custom+0x60>)
 8018f64:	f000 ff7c 	bl	8019e60 <iprintf>
  LWIP_ASSERT("pcr == p", (void *)pcr == (void *)p);
 8018f68:	68fa      	ldr	r2, [r7, #12]
 8018f6a:	687b      	ldr	r3, [r7, #4]
 8018f6c:	429a      	cmp	r2, r3
 8018f6e:	d006      	beq.n	8018f7e <ipfrag_free_pbuf_custom+0x36>
 8018f70:	4b0b      	ldr	r3, [pc, #44]	; (8018fa0 <ipfrag_free_pbuf_custom+0x58>)
 8018f72:	f240 22cf 	movw	r2, #719	; 0x2cf
 8018f76:	490d      	ldr	r1, [pc, #52]	; (8018fac <ipfrag_free_pbuf_custom+0x64>)
 8018f78:	480b      	ldr	r0, [pc, #44]	; (8018fa8 <ipfrag_free_pbuf_custom+0x60>)
 8018f7a:	f000 ff71 	bl	8019e60 <iprintf>
  if (pcr->original != NULL) {
 8018f7e:	68fb      	ldr	r3, [r7, #12]
 8018f80:	695b      	ldr	r3, [r3, #20]
 8018f82:	2b00      	cmp	r3, #0
 8018f84:	d004      	beq.n	8018f90 <ipfrag_free_pbuf_custom+0x48>
    pbuf_free(pcr->original);
 8018f86:	68fb      	ldr	r3, [r7, #12]
 8018f88:	695b      	ldr	r3, [r3, #20]
 8018f8a:	4618      	mov	r0, r3
 8018f8c:	f7f8 f890 	bl	80110b0 <pbuf_free>
  }
  ip_frag_free_pbuf_custom_ref(pcr);
 8018f90:	68f8      	ldr	r0, [r7, #12]
 8018f92:	f7ff ffbd 	bl	8018f10 <ip_frag_free_pbuf_custom_ref>
}
 8018f96:	bf00      	nop
 8018f98:	3710      	adds	r7, #16
 8018f9a:	46bd      	mov	sp, r7
 8018f9c:	bd80      	pop	{r7, pc}
 8018f9e:	bf00      	nop
 8018fa0:	0801f0dc 	.word	0x0801f0dc
 8018fa4:	0801f2a0 	.word	0x0801f2a0
 8018fa8:	0801f124 	.word	0x0801f124
 8018fac:	0801f2ac 	.word	0x0801f2ac

08018fb0 <ip4_frag>:
 *
 * @return ERR_OK if sent successfully, err_t otherwise
 */
err_t
ip4_frag(struct pbuf *p, struct netif *netif, const ip4_addr_t *dest)
{
 8018fb0:	b580      	push	{r7, lr}
 8018fb2:	b094      	sub	sp, #80	; 0x50
 8018fb4:	af02      	add	r7, sp, #8
 8018fb6:	60f8      	str	r0, [r7, #12]
 8018fb8:	60b9      	str	r1, [r7, #8]
 8018fba:	607a      	str	r2, [r7, #4]
  struct pbuf *rambuf;
#if !LWIP_NETIF_TX_SINGLE_PBUF
  struct pbuf *newpbuf;
  u16_t newpbuflen = 0;
 8018fbc:	2300      	movs	r3, #0
 8018fbe:	f8a7 3046 	strh.w	r3, [r7, #70]	; 0x46
  u16_t left_to_copy;
#endif
  struct ip_hdr *original_iphdr;
  struct ip_hdr *iphdr;
  const u16_t nfb = (u16_t)((netif->mtu - IP_HLEN) / 8);
 8018fc2:	68bb      	ldr	r3, [r7, #8]
 8018fc4:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 8018fc6:	3b14      	subs	r3, #20
 8018fc8:	2b00      	cmp	r3, #0
 8018fca:	da00      	bge.n	8018fce <ip4_frag+0x1e>
 8018fcc:	3307      	adds	r3, #7
 8018fce:	10db      	asrs	r3, r3, #3
 8018fd0:	877b      	strh	r3, [r7, #58]	; 0x3a
  u16_t left, fragsize;
  u16_t ofo;
  int last;
  u16_t poff = IP_HLEN;
 8018fd2:	2314      	movs	r3, #20
 8018fd4:	87fb      	strh	r3, [r7, #62]	; 0x3e
  u16_t tmp;
  int mf_set;

  original_iphdr = (struct ip_hdr *)p->payload;
 8018fd6:	68fb      	ldr	r3, [r7, #12]
 8018fd8:	685b      	ldr	r3, [r3, #4]
 8018fda:	637b      	str	r3, [r7, #52]	; 0x34
  iphdr = original_iphdr;
 8018fdc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8018fde:	633b      	str	r3, [r7, #48]	; 0x30
  if (IPH_HL_BYTES(iphdr) != IP_HLEN) {
 8018fe0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8018fe2:	781b      	ldrb	r3, [r3, #0]
 8018fe4:	f003 030f 	and.w	r3, r3, #15
 8018fe8:	b2db      	uxtb	r3, r3
 8018fea:	009b      	lsls	r3, r3, #2
 8018fec:	b2db      	uxtb	r3, r3
 8018fee:	2b14      	cmp	r3, #20
 8018ff0:	d002      	beq.n	8018ff8 <ip4_frag+0x48>
    /* ip4_frag() does not support IP options */
    return ERR_VAL;
 8018ff2:	f06f 0305 	mvn.w	r3, #5
 8018ff6:	e110      	b.n	801921a <ip4_frag+0x26a>
  }
  LWIP_ERROR("ip4_frag(): pbuf too short", p->len >= IP_HLEN, return ERR_VAL);
 8018ff8:	68fb      	ldr	r3, [r7, #12]
 8018ffa:	895b      	ldrh	r3, [r3, #10]
 8018ffc:	2b13      	cmp	r3, #19
 8018ffe:	d809      	bhi.n	8019014 <ip4_frag+0x64>
 8019000:	4b88      	ldr	r3, [pc, #544]	; (8019224 <ip4_frag+0x274>)
 8019002:	f44f 723f 	mov.w	r2, #764	; 0x2fc
 8019006:	4988      	ldr	r1, [pc, #544]	; (8019228 <ip4_frag+0x278>)
 8019008:	4888      	ldr	r0, [pc, #544]	; (801922c <ip4_frag+0x27c>)
 801900a:	f000 ff29 	bl	8019e60 <iprintf>
 801900e:	f06f 0305 	mvn.w	r3, #5
 8019012:	e102      	b.n	801921a <ip4_frag+0x26a>

  /* Save original offset */
  tmp = lwip_ntohs(IPH_OFFSET(iphdr));
 8019014:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8019016:	88db      	ldrh	r3, [r3, #6]
 8019018:	b29b      	uxth	r3, r3
 801901a:	4618      	mov	r0, r3
 801901c:	f7f6 fc64 	bl	800f8e8 <lwip_htons>
 8019020:	4603      	mov	r3, r0
 8019022:	87bb      	strh	r3, [r7, #60]	; 0x3c
  ofo = tmp & IP_OFFMASK;
 8019024:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 8019026:	f3c3 030c 	ubfx	r3, r3, #0, #13
 801902a:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
  /* already fragmented? if so, the last fragment we create must have MF, too */
  mf_set = tmp & IP_MF;
 801902e:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 8019030:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8019034:	62fb      	str	r3, [r7, #44]	; 0x2c

  left = (u16_t)(p->tot_len - IP_HLEN);
 8019036:	68fb      	ldr	r3, [r7, #12]
 8019038:	891b      	ldrh	r3, [r3, #8]
 801903a:	3b14      	subs	r3, #20
 801903c:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42

  while (left) {
 8019040:	e0e1      	b.n	8019206 <ip4_frag+0x256>
    /* Fill this fragment */
    fragsize = LWIP_MIN(left, (u16_t)(nfb * 8));
 8019042:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 8019044:	00db      	lsls	r3, r3, #3
 8019046:	b29b      	uxth	r3, r3
 8019048:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 801904c:	4293      	cmp	r3, r2
 801904e:	bf28      	it	cs
 8019050:	4613      	movcs	r3, r2
 8019052:	857b      	strh	r3, [r7, #42]	; 0x2a
    /* When not using a static buffer, create a chain of pbufs.
     * The first will be a PBUF_RAM holding the link and IP header.
     * The rest will be PBUF_REFs mirroring the pbuf chain to be fragged,
     * but limited to the size of an mtu.
     */
    rambuf = pbuf_alloc(PBUF_LINK, IP_HLEN, PBUF_RAM);
 8019054:	f44f 7220 	mov.w	r2, #640	; 0x280
 8019058:	2114      	movs	r1, #20
 801905a:	200e      	movs	r0, #14
 801905c:	f7f7 fd44 	bl	8010ae8 <pbuf_alloc>
 8019060:	6278      	str	r0, [r7, #36]	; 0x24
    if (rambuf == NULL) {
 8019062:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8019064:	2b00      	cmp	r3, #0
 8019066:	f000 80d5 	beq.w	8019214 <ip4_frag+0x264>
      goto memerr;
    }
    LWIP_ASSERT("this needs a pbuf in one piece!",
 801906a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801906c:	895b      	ldrh	r3, [r3, #10]
 801906e:	2b13      	cmp	r3, #19
 8019070:	d806      	bhi.n	8019080 <ip4_frag+0xd0>
 8019072:	4b6c      	ldr	r3, [pc, #432]	; (8019224 <ip4_frag+0x274>)
 8019074:	f44f 7249 	mov.w	r2, #804	; 0x324
 8019078:	496d      	ldr	r1, [pc, #436]	; (8019230 <ip4_frag+0x280>)
 801907a:	486c      	ldr	r0, [pc, #432]	; (801922c <ip4_frag+0x27c>)
 801907c:	f000 fef0 	bl	8019e60 <iprintf>
                (rambuf->len >= (IP_HLEN)));
    SMEMCPY(rambuf->payload, original_iphdr, IP_HLEN);
 8019080:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8019082:	685b      	ldr	r3, [r3, #4]
 8019084:	2214      	movs	r2, #20
 8019086:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8019088:	4618      	mov	r0, r3
 801908a:	f001 f8b8 	bl	801a1fe <memcpy>
    iphdr = (struct ip_hdr *)rambuf->payload;
 801908e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8019090:	685b      	ldr	r3, [r3, #4]
 8019092:	633b      	str	r3, [r7, #48]	; 0x30

    left_to_copy = fragsize;
 8019094:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8019096:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
    while (left_to_copy) {
 801909a:	e064      	b.n	8019166 <ip4_frag+0x1b6>
      struct pbuf_custom_ref *pcr;
      u16_t plen = (u16_t)(p->len - poff);
 801909c:	68fb      	ldr	r3, [r7, #12]
 801909e:	895a      	ldrh	r2, [r3, #10]
 80190a0:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 80190a2:	1ad3      	subs	r3, r2, r3
 80190a4:	83fb      	strh	r3, [r7, #30]
      LWIP_ASSERT("p->len >= poff", p->len >= poff);
 80190a6:	68fb      	ldr	r3, [r7, #12]
 80190a8:	895b      	ldrh	r3, [r3, #10]
 80190aa:	8ffa      	ldrh	r2, [r7, #62]	; 0x3e
 80190ac:	429a      	cmp	r2, r3
 80190ae:	d906      	bls.n	80190be <ip4_frag+0x10e>
 80190b0:	4b5c      	ldr	r3, [pc, #368]	; (8019224 <ip4_frag+0x274>)
 80190b2:	f240 322d 	movw	r2, #813	; 0x32d
 80190b6:	495f      	ldr	r1, [pc, #380]	; (8019234 <ip4_frag+0x284>)
 80190b8:	485c      	ldr	r0, [pc, #368]	; (801922c <ip4_frag+0x27c>)
 80190ba:	f000 fed1 	bl	8019e60 <iprintf>
      newpbuflen = LWIP_MIN(left_to_copy, plen);
 80190be:	8bfa      	ldrh	r2, [r7, #30]
 80190c0:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 80190c4:	4293      	cmp	r3, r2
 80190c6:	bf28      	it	cs
 80190c8:	4613      	movcs	r3, r2
 80190ca:	f8a7 3046 	strh.w	r3, [r7, #70]	; 0x46
      /* Is this pbuf already empty? */
      if (!newpbuflen) {
 80190ce:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 80190d2:	2b00      	cmp	r3, #0
 80190d4:	d105      	bne.n	80190e2 <ip4_frag+0x132>
        poff = 0;
 80190d6:	2300      	movs	r3, #0
 80190d8:	87fb      	strh	r3, [r7, #62]	; 0x3e
        p = p->next;
 80190da:	68fb      	ldr	r3, [r7, #12]
 80190dc:	681b      	ldr	r3, [r3, #0]
 80190de:	60fb      	str	r3, [r7, #12]
        continue;
 80190e0:	e041      	b.n	8019166 <ip4_frag+0x1b6>
      }
      pcr = ip_frag_alloc_pbuf_custom_ref();
 80190e2:	f7ff ff0d 	bl	8018f00 <ip_frag_alloc_pbuf_custom_ref>
 80190e6:	61b8      	str	r0, [r7, #24]
      if (pcr == NULL) {
 80190e8:	69bb      	ldr	r3, [r7, #24]
 80190ea:	2b00      	cmp	r3, #0
 80190ec:	d103      	bne.n	80190f6 <ip4_frag+0x146>
        pbuf_free(rambuf);
 80190ee:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80190f0:	f7f7 ffde 	bl	80110b0 <pbuf_free>
        goto memerr;
 80190f4:	e08f      	b.n	8019216 <ip4_frag+0x266>
      }
      /* Mirror this pbuf, although we might not need all of it. */
      newpbuf = pbuf_alloced_custom(PBUF_RAW, newpbuflen, PBUF_REF, &pcr->pc,
 80190f6:	69b8      	ldr	r0, [r7, #24]
                                    (u8_t *)p->payload + poff, newpbuflen);
 80190f8:	68fb      	ldr	r3, [r7, #12]
 80190fa:	685a      	ldr	r2, [r3, #4]
      newpbuf = pbuf_alloced_custom(PBUF_RAW, newpbuflen, PBUF_REF, &pcr->pc,
 80190fc:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 80190fe:	4413      	add	r3, r2
 8019100:	f8b7 1046 	ldrh.w	r1, [r7, #70]	; 0x46
 8019104:	f8b7 2046 	ldrh.w	r2, [r7, #70]	; 0x46
 8019108:	9201      	str	r2, [sp, #4]
 801910a:	9300      	str	r3, [sp, #0]
 801910c:	4603      	mov	r3, r0
 801910e:	2241      	movs	r2, #65	; 0x41
 8019110:	2000      	movs	r0, #0
 8019112:	f7f7 fe15 	bl	8010d40 <pbuf_alloced_custom>
 8019116:	6178      	str	r0, [r7, #20]
      if (newpbuf == NULL) {
 8019118:	697b      	ldr	r3, [r7, #20]
 801911a:	2b00      	cmp	r3, #0
 801911c:	d106      	bne.n	801912c <ip4_frag+0x17c>
        ip_frag_free_pbuf_custom_ref(pcr);
 801911e:	69b8      	ldr	r0, [r7, #24]
 8019120:	f7ff fef6 	bl	8018f10 <ip_frag_free_pbuf_custom_ref>
        pbuf_free(rambuf);
 8019124:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8019126:	f7f7 ffc3 	bl	80110b0 <pbuf_free>
        goto memerr;
 801912a:	e074      	b.n	8019216 <ip4_frag+0x266>
      }
      pbuf_ref(p);
 801912c:	68f8      	ldr	r0, [r7, #12]
 801912e:	f7f8 f85f 	bl	80111f0 <pbuf_ref>
      pcr->original = p;
 8019132:	69bb      	ldr	r3, [r7, #24]
 8019134:	68fa      	ldr	r2, [r7, #12]
 8019136:	615a      	str	r2, [r3, #20]
      pcr->pc.custom_free_function = ipfrag_free_pbuf_custom;
 8019138:	69bb      	ldr	r3, [r7, #24]
 801913a:	4a3f      	ldr	r2, [pc, #252]	; (8019238 <ip4_frag+0x288>)
 801913c:	611a      	str	r2, [r3, #16]

      /* Add it to end of rambuf's chain, but using pbuf_cat, not pbuf_chain
       * so that it is removed when pbuf_dechain is later called on rambuf.
       */
      pbuf_cat(rambuf, newpbuf);
 801913e:	6979      	ldr	r1, [r7, #20]
 8019140:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8019142:	f7f8 f877 	bl	8011234 <pbuf_cat>
      left_to_copy = (u16_t)(left_to_copy - newpbuflen);
 8019146:	f8b7 2044 	ldrh.w	r2, [r7, #68]	; 0x44
 801914a:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 801914e:	1ad3      	subs	r3, r2, r3
 8019150:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
      if (left_to_copy) {
 8019154:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 8019158:	2b00      	cmp	r3, #0
 801915a:	d004      	beq.n	8019166 <ip4_frag+0x1b6>
        poff = 0;
 801915c:	2300      	movs	r3, #0
 801915e:	87fb      	strh	r3, [r7, #62]	; 0x3e
        p = p->next;
 8019160:	68fb      	ldr	r3, [r7, #12]
 8019162:	681b      	ldr	r3, [r3, #0]
 8019164:	60fb      	str	r3, [r7, #12]
    while (left_to_copy) {
 8019166:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 801916a:	2b00      	cmp	r3, #0
 801916c:	d196      	bne.n	801909c <ip4_frag+0xec>
      }
    }
    poff = (u16_t)(poff + newpbuflen);
 801916e:	8ffa      	ldrh	r2, [r7, #62]	; 0x3e
 8019170:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 8019174:	4413      	add	r3, r2
 8019176:	87fb      	strh	r3, [r7, #62]	; 0x3e
#endif /* LWIP_NETIF_TX_SINGLE_PBUF */

    /* Correct header */
    last = (left <= netif->mtu - IP_HLEN);
 8019178:	68bb      	ldr	r3, [r7, #8]
 801917a:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 801917c:	f1a3 0213 	sub.w	r2, r3, #19
 8019180:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 8019184:	429a      	cmp	r2, r3
 8019186:	bfcc      	ite	gt
 8019188:	2301      	movgt	r3, #1
 801918a:	2300      	movle	r3, #0
 801918c:	b2db      	uxtb	r3, r3
 801918e:	623b      	str	r3, [r7, #32]

    /* Set new offset and MF flag */
    tmp = (IP_OFFMASK & (ofo));
 8019190:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 8019194:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8019198:	87bb      	strh	r3, [r7, #60]	; 0x3c
    if (!last || mf_set) {
 801919a:	6a3b      	ldr	r3, [r7, #32]
 801919c:	2b00      	cmp	r3, #0
 801919e:	d002      	beq.n	80191a6 <ip4_frag+0x1f6>
 80191a0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80191a2:	2b00      	cmp	r3, #0
 80191a4:	d003      	beq.n	80191ae <ip4_frag+0x1fe>
      /* the last fragment has MF set if the input frame had it */
      tmp = tmp | IP_MF;
 80191a6:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 80191a8:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 80191ac:	87bb      	strh	r3, [r7, #60]	; 0x3c
    }
    IPH_OFFSET_SET(iphdr, lwip_htons(tmp));
 80191ae:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 80191b0:	4618      	mov	r0, r3
 80191b2:	f7f6 fb99 	bl	800f8e8 <lwip_htons>
 80191b6:	4603      	mov	r3, r0
 80191b8:	461a      	mov	r2, r3
 80191ba:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80191bc:	80da      	strh	r2, [r3, #6]
    IPH_LEN_SET(iphdr, lwip_htons((u16_t)(fragsize + IP_HLEN)));
 80191be:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 80191c0:	3314      	adds	r3, #20
 80191c2:	b29b      	uxth	r3, r3
 80191c4:	4618      	mov	r0, r3
 80191c6:	f7f6 fb8f 	bl	800f8e8 <lwip_htons>
 80191ca:	4603      	mov	r3, r0
 80191cc:	461a      	mov	r2, r3
 80191ce:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80191d0:	805a      	strh	r2, [r3, #2]
    IPH_CHKSUM_SET(iphdr, 0);
 80191d2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80191d4:	2200      	movs	r2, #0
 80191d6:	729a      	strb	r2, [r3, #10]
 80191d8:	2200      	movs	r2, #0
 80191da:	72da      	strb	r2, [r3, #11]
#endif /* CHECKSUM_GEN_IP */

    /* No need for separate header pbuf - we allowed room for it in rambuf
     * when allocated.
     */
    netif->output(netif, rambuf, dest);
 80191dc:	68bb      	ldr	r3, [r7, #8]
 80191de:	695b      	ldr	r3, [r3, #20]
 80191e0:	687a      	ldr	r2, [r7, #4]
 80191e2:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80191e4:	68b8      	ldr	r0, [r7, #8]
 80191e6:	4798      	blx	r3
     * recreate it next time round the loop. If we're lucky the hardware
     * will have already sent the packet, the free will really free, and
     * there will be zero memory penalty.
     */

    pbuf_free(rambuf);
 80191e8:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80191ea:	f7f7 ff61 	bl	80110b0 <pbuf_free>
    left = (u16_t)(left - fragsize);
 80191ee:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 80191f2:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 80191f4:	1ad3      	subs	r3, r2, r3
 80191f6:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
    ofo = (u16_t)(ofo + nfb);
 80191fa:	f8b7 2040 	ldrh.w	r2, [r7, #64]	; 0x40
 80191fe:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 8019200:	4413      	add	r3, r2
 8019202:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
  while (left) {
 8019206:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 801920a:	2b00      	cmp	r3, #0
 801920c:	f47f af19 	bne.w	8019042 <ip4_frag+0x92>
  }
  MIB2_STATS_INC(mib2.ipfragoks);
  return ERR_OK;
 8019210:	2300      	movs	r3, #0
 8019212:	e002      	b.n	801921a <ip4_frag+0x26a>
      goto memerr;
 8019214:	bf00      	nop
memerr:
  MIB2_STATS_INC(mib2.ipfragfails);
  return ERR_MEM;
 8019216:	f04f 33ff 	mov.w	r3, #4294967295
}
 801921a:	4618      	mov	r0, r3
 801921c:	3748      	adds	r7, #72	; 0x48
 801921e:	46bd      	mov	sp, r7
 8019220:	bd80      	pop	{r7, pc}
 8019222:	bf00      	nop
 8019224:	0801f0dc 	.word	0x0801f0dc
 8019228:	0801f2b8 	.word	0x0801f2b8
 801922c:	0801f124 	.word	0x0801f124
 8019230:	0801f2d4 	.word	0x0801f2d4
 8019234:	0801f2f4 	.word	0x0801f2f4
 8019238:	08018f49 	.word	0x08018f49

0801923c <ethernet_input>:
 * @see ETHARP_SUPPORT_VLAN
 * @see LWIP_HOOK_VLAN_CHECK
 */
err_t
ethernet_input(struct pbuf *p, struct netif *netif)
{
 801923c:	b580      	push	{r7, lr}
 801923e:	b086      	sub	sp, #24
 8019240:	af00      	add	r7, sp, #0
 8019242:	6078      	str	r0, [r7, #4]
 8019244:	6039      	str	r1, [r7, #0]
  struct eth_hdr *ethhdr;
  u16_t type;
#if LWIP_ARP || ETHARP_SUPPORT_VLAN || LWIP_IPV6
  u16_t next_hdr_offset = SIZEOF_ETH_HDR;
 8019246:	230e      	movs	r3, #14
 8019248:	82fb      	strh	r3, [r7, #22]
#endif /* LWIP_ARP || ETHARP_SUPPORT_VLAN */

  LWIP_ASSERT_CORE_LOCKED();

  if (p->len <= SIZEOF_ETH_HDR) {
 801924a:	687b      	ldr	r3, [r7, #4]
 801924c:	895b      	ldrh	r3, [r3, #10]
 801924e:	2b0e      	cmp	r3, #14
 8019250:	d96e      	bls.n	8019330 <ethernet_input+0xf4>
    ETHARP_STATS_INC(etharp.drop);
    MIB2_STATS_NETIF_INC(netif, ifinerrors);
    goto free_and_return;
  }

  if (p->if_idx == NETIF_NO_INDEX) {
 8019252:	687b      	ldr	r3, [r7, #4]
 8019254:	7bdb      	ldrb	r3, [r3, #15]
 8019256:	2b00      	cmp	r3, #0
 8019258:	d106      	bne.n	8019268 <ethernet_input+0x2c>
    p->if_idx = netif_get_index(netif);
 801925a:	683b      	ldr	r3, [r7, #0]
 801925c:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8019260:	3301      	adds	r3, #1
 8019262:	b2da      	uxtb	r2, r3
 8019264:	687b      	ldr	r3, [r7, #4]
 8019266:	73da      	strb	r2, [r3, #15]
  }

  /* points to packet payload, which starts with an Ethernet header */
  ethhdr = (struct eth_hdr *)p->payload;
 8019268:	687b      	ldr	r3, [r7, #4]
 801926a:	685b      	ldr	r3, [r3, #4]
 801926c:	613b      	str	r3, [r7, #16]
               (unsigned char)ethhdr->dest.addr[3], (unsigned char)ethhdr->dest.addr[4], (unsigned char)ethhdr->dest.addr[5],
               (unsigned char)ethhdr->src.addr[0],  (unsigned char)ethhdr->src.addr[1],  (unsigned char)ethhdr->src.addr[2],
               (unsigned char)ethhdr->src.addr[3],  (unsigned char)ethhdr->src.addr[4],  (unsigned char)ethhdr->src.addr[5],
               lwip_htons(ethhdr->type)));

  type = ethhdr->type;
 801926e:	693b      	ldr	r3, [r7, #16]
 8019270:	7b1a      	ldrb	r2, [r3, #12]
 8019272:	7b5b      	ldrb	r3, [r3, #13]
 8019274:	021b      	lsls	r3, r3, #8
 8019276:	4313      	orrs	r3, r2
 8019278:	81fb      	strh	r3, [r7, #14]

#if LWIP_ARP_FILTER_NETIF
  netif = LWIP_ARP_FILTER_NETIF_FN(p, netif, lwip_htons(type));
#endif /* LWIP_ARP_FILTER_NETIF*/

  if (ethhdr->dest.addr[0] & 1) {
 801927a:	693b      	ldr	r3, [r7, #16]
 801927c:	781b      	ldrb	r3, [r3, #0]
 801927e:	f003 0301 	and.w	r3, r3, #1
 8019282:	2b00      	cmp	r3, #0
 8019284:	d023      	beq.n	80192ce <ethernet_input+0x92>
    /* this might be a multicast or broadcast packet */
    if (ethhdr->dest.addr[0] == LL_IP4_MULTICAST_ADDR_0) {
 8019286:	693b      	ldr	r3, [r7, #16]
 8019288:	781b      	ldrb	r3, [r3, #0]
 801928a:	2b01      	cmp	r3, #1
 801928c:	d10f      	bne.n	80192ae <ethernet_input+0x72>
#if LWIP_IPV4
      if ((ethhdr->dest.addr[1] == LL_IP4_MULTICAST_ADDR_1) &&
 801928e:	693b      	ldr	r3, [r7, #16]
 8019290:	785b      	ldrb	r3, [r3, #1]
 8019292:	2b00      	cmp	r3, #0
 8019294:	d11b      	bne.n	80192ce <ethernet_input+0x92>
          (ethhdr->dest.addr[2] == LL_IP4_MULTICAST_ADDR_2)) {
 8019296:	693b      	ldr	r3, [r7, #16]
 8019298:	789b      	ldrb	r3, [r3, #2]
      if ((ethhdr->dest.addr[1] == LL_IP4_MULTICAST_ADDR_1) &&
 801929a:	2b5e      	cmp	r3, #94	; 0x5e
 801929c:	d117      	bne.n	80192ce <ethernet_input+0x92>
        /* mark the pbuf as link-layer multicast */
        p->flags |= PBUF_FLAG_LLMCAST;
 801929e:	687b      	ldr	r3, [r7, #4]
 80192a0:	7b5b      	ldrb	r3, [r3, #13]
 80192a2:	f043 0310 	orr.w	r3, r3, #16
 80192a6:	b2da      	uxtb	r2, r3
 80192a8:	687b      	ldr	r3, [r7, #4]
 80192aa:	735a      	strb	r2, [r3, #13]
 80192ac:	e00f      	b.n	80192ce <ethernet_input+0x92>
             (ethhdr->dest.addr[1] == LL_IP6_MULTICAST_ADDR_1)) {
      /* mark the pbuf as link-layer multicast */
      p->flags |= PBUF_FLAG_LLMCAST;
    }
#endif /* LWIP_IPV6 */
    else if (eth_addr_cmp(&ethhdr->dest, &ethbroadcast)) {
 80192ae:	693b      	ldr	r3, [r7, #16]
 80192b0:	2206      	movs	r2, #6
 80192b2:	4928      	ldr	r1, [pc, #160]	; (8019354 <ethernet_input+0x118>)
 80192b4:	4618      	mov	r0, r3
 80192b6:	f000 ff19 	bl	801a0ec <memcmp>
 80192ba:	4603      	mov	r3, r0
 80192bc:	2b00      	cmp	r3, #0
 80192be:	d106      	bne.n	80192ce <ethernet_input+0x92>
      /* mark the pbuf as link-layer broadcast */
      p->flags |= PBUF_FLAG_LLBCAST;
 80192c0:	687b      	ldr	r3, [r7, #4]
 80192c2:	7b5b      	ldrb	r3, [r3, #13]
 80192c4:	f043 0308 	orr.w	r3, r3, #8
 80192c8:	b2da      	uxtb	r2, r3
 80192ca:	687b      	ldr	r3, [r7, #4]
 80192cc:	735a      	strb	r2, [r3, #13]
    }
  }

  switch (type) {
 80192ce:	89fb      	ldrh	r3, [r7, #14]
 80192d0:	2b08      	cmp	r3, #8
 80192d2:	d003      	beq.n	80192dc <ethernet_input+0xa0>
 80192d4:	f5b3 6fc1 	cmp.w	r3, #1544	; 0x608
 80192d8:	d014      	beq.n	8019304 <ethernet_input+0xc8>
      }
#endif
      ETHARP_STATS_INC(etharp.proterr);
      ETHARP_STATS_INC(etharp.drop);
      MIB2_STATS_NETIF_INC(netif, ifinunknownprotos);
      goto free_and_return;
 80192da:	e032      	b.n	8019342 <ethernet_input+0x106>
      if (!(netif->flags & NETIF_FLAG_ETHARP)) {
 80192dc:	683b      	ldr	r3, [r7, #0]
 80192de:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 80192e2:	f003 0308 	and.w	r3, r3, #8
 80192e6:	2b00      	cmp	r3, #0
 80192e8:	d024      	beq.n	8019334 <ethernet_input+0xf8>
      if (pbuf_remove_header(p, next_hdr_offset)) {
 80192ea:	8afb      	ldrh	r3, [r7, #22]
 80192ec:	4619      	mov	r1, r3
 80192ee:	6878      	ldr	r0, [r7, #4]
 80192f0:	f7f7 fe58 	bl	8010fa4 <pbuf_remove_header>
 80192f4:	4603      	mov	r3, r0
 80192f6:	2b00      	cmp	r3, #0
 80192f8:	d11e      	bne.n	8019338 <ethernet_input+0xfc>
        ip4_input(p, netif);
 80192fa:	6839      	ldr	r1, [r7, #0]
 80192fc:	6878      	ldr	r0, [r7, #4]
 80192fe:	f7fe ff21 	bl	8018144 <ip4_input>
      break;
 8019302:	e013      	b.n	801932c <ethernet_input+0xf0>
      if (!(netif->flags & NETIF_FLAG_ETHARP)) {
 8019304:	683b      	ldr	r3, [r7, #0]
 8019306:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 801930a:	f003 0308 	and.w	r3, r3, #8
 801930e:	2b00      	cmp	r3, #0
 8019310:	d014      	beq.n	801933c <ethernet_input+0x100>
      if (pbuf_remove_header(p, next_hdr_offset)) {
 8019312:	8afb      	ldrh	r3, [r7, #22]
 8019314:	4619      	mov	r1, r3
 8019316:	6878      	ldr	r0, [r7, #4]
 8019318:	f7f7 fe44 	bl	8010fa4 <pbuf_remove_header>
 801931c:	4603      	mov	r3, r0
 801931e:	2b00      	cmp	r3, #0
 8019320:	d10e      	bne.n	8019340 <ethernet_input+0x104>
        etharp_input(p, netif);
 8019322:	6839      	ldr	r1, [r7, #0]
 8019324:	6878      	ldr	r0, [r7, #4]
 8019326:	f7fe f89b 	bl	8017460 <etharp_input>
      break;
 801932a:	bf00      	nop
  }

  /* This means the pbuf is freed or consumed,
     so the caller doesn't have to free it again */
  return ERR_OK;
 801932c:	2300      	movs	r3, #0
 801932e:	e00c      	b.n	801934a <ethernet_input+0x10e>
    goto free_and_return;
 8019330:	bf00      	nop
 8019332:	e006      	b.n	8019342 <ethernet_input+0x106>
        goto free_and_return;
 8019334:	bf00      	nop
 8019336:	e004      	b.n	8019342 <ethernet_input+0x106>
        goto free_and_return;
 8019338:	bf00      	nop
 801933a:	e002      	b.n	8019342 <ethernet_input+0x106>
        goto free_and_return;
 801933c:	bf00      	nop
 801933e:	e000      	b.n	8019342 <ethernet_input+0x106>
        goto free_and_return;
 8019340:	bf00      	nop

free_and_return:
  pbuf_free(p);
 8019342:	6878      	ldr	r0, [r7, #4]
 8019344:	f7f7 feb4 	bl	80110b0 <pbuf_free>
  return ERR_OK;
 8019348:	2300      	movs	r3, #0
}
 801934a:	4618      	mov	r0, r3
 801934c:	3718      	adds	r7, #24
 801934e:	46bd      	mov	sp, r7
 8019350:	bd80      	pop	{r7, pc}
 8019352:	bf00      	nop
 8019354:	0801f4d0 	.word	0x0801f4d0

08019358 <ethernet_output>:
 * @return ERR_OK if the packet was sent, any other err_t on failure
 */
err_t
ethernet_output(struct netif * netif, struct pbuf * p,
                const struct eth_addr * src, const struct eth_addr * dst,
                u16_t eth_type) {
 8019358:	b580      	push	{r7, lr}
 801935a:	b086      	sub	sp, #24
 801935c:	af00      	add	r7, sp, #0
 801935e:	60f8      	str	r0, [r7, #12]
 8019360:	60b9      	str	r1, [r7, #8]
 8019362:	607a      	str	r2, [r7, #4]
 8019364:	603b      	str	r3, [r7, #0]
  struct eth_hdr *ethhdr;
  u16_t eth_type_be = lwip_htons(eth_type);
 8019366:	8c3b      	ldrh	r3, [r7, #32]
 8019368:	4618      	mov	r0, r3
 801936a:	f7f6 fabd 	bl	800f8e8 <lwip_htons>
 801936e:	4603      	mov	r3, r0
 8019370:	82fb      	strh	r3, [r7, #22]

    eth_type_be = PP_HTONS(ETHTYPE_VLAN);
  } else
#endif /* ETHARP_SUPPORT_VLAN && defined(LWIP_HOOK_VLAN_SET) */
  {
    if (pbuf_add_header(p, SIZEOF_ETH_HDR) != 0) {
 8019372:	210e      	movs	r1, #14
 8019374:	68b8      	ldr	r0, [r7, #8]
 8019376:	f7f7 fe05 	bl	8010f84 <pbuf_add_header>
 801937a:	4603      	mov	r3, r0
 801937c:	2b00      	cmp	r3, #0
 801937e:	d125      	bne.n	80193cc <ethernet_output+0x74>
    }
  }

  LWIP_ASSERT_CORE_LOCKED();

  ethhdr = (struct eth_hdr *)p->payload;
 8019380:	68bb      	ldr	r3, [r7, #8]
 8019382:	685b      	ldr	r3, [r3, #4]
 8019384:	613b      	str	r3, [r7, #16]
  ethhdr->type = eth_type_be;
 8019386:	693b      	ldr	r3, [r7, #16]
 8019388:	8afa      	ldrh	r2, [r7, #22]
 801938a:	819a      	strh	r2, [r3, #12]
  SMEMCPY(&ethhdr->dest, dst, ETH_HWADDR_LEN);
 801938c:	693b      	ldr	r3, [r7, #16]
 801938e:	2206      	movs	r2, #6
 8019390:	6839      	ldr	r1, [r7, #0]
 8019392:	4618      	mov	r0, r3
 8019394:	f000 ff33 	bl	801a1fe <memcpy>
  SMEMCPY(&ethhdr->src,  src, ETH_HWADDR_LEN);
 8019398:	693b      	ldr	r3, [r7, #16]
 801939a:	3306      	adds	r3, #6
 801939c:	2206      	movs	r2, #6
 801939e:	6879      	ldr	r1, [r7, #4]
 80193a0:	4618      	mov	r0, r3
 80193a2:	f000 ff2c 	bl	801a1fe <memcpy>

  LWIP_ASSERT("netif->hwaddr_len must be 6 for ethernet_output!",
 80193a6:	68fb      	ldr	r3, [r7, #12]
 80193a8:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 80193ac:	2b06      	cmp	r3, #6
 80193ae:	d006      	beq.n	80193be <ethernet_output+0x66>
 80193b0:	4b0a      	ldr	r3, [pc, #40]	; (80193dc <ethernet_output+0x84>)
 80193b2:	f44f 7299 	mov.w	r2, #306	; 0x132
 80193b6:	490a      	ldr	r1, [pc, #40]	; (80193e0 <ethernet_output+0x88>)
 80193b8:	480a      	ldr	r0, [pc, #40]	; (80193e4 <ethernet_output+0x8c>)
 80193ba:	f000 fd51 	bl	8019e60 <iprintf>
              (netif->hwaddr_len == ETH_HWADDR_LEN));
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE,
              ("ethernet_output: sending packet %p\n", (void *)p));

  /* send the packet */
  return netif->linkoutput(netif, p);
 80193be:	68fb      	ldr	r3, [r7, #12]
 80193c0:	699b      	ldr	r3, [r3, #24]
 80193c2:	68b9      	ldr	r1, [r7, #8]
 80193c4:	68f8      	ldr	r0, [r7, #12]
 80193c6:	4798      	blx	r3
 80193c8:	4603      	mov	r3, r0
 80193ca:	e002      	b.n	80193d2 <ethernet_output+0x7a>
      goto pbuf_header_failed;
 80193cc:	bf00      	nop

pbuf_header_failed:
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS,
              ("ethernet_output: could not allocate room for header.\n"));
  LINK_STATS_INC(link.lenerr);
  return ERR_BUF;
 80193ce:	f06f 0301 	mvn.w	r3, #1
}
 80193d2:	4618      	mov	r0, r3
 80193d4:	3718      	adds	r7, #24
 80193d6:	46bd      	mov	sp, r7
 80193d8:	bd80      	pop	{r7, pc}
 80193da:	bf00      	nop
 80193dc:	0801f304 	.word	0x0801f304
 80193e0:	0801f33c 	.word	0x0801f33c
 80193e4:	0801f370 	.word	0x0801f370

080193e8 <rand>:
 80193e8:	4b16      	ldr	r3, [pc, #88]	; (8019444 <rand+0x5c>)
 80193ea:	b510      	push	{r4, lr}
 80193ec:	681c      	ldr	r4, [r3, #0]
 80193ee:	6b23      	ldr	r3, [r4, #48]	; 0x30
 80193f0:	b9b3      	cbnz	r3, 8019420 <rand+0x38>
 80193f2:	2018      	movs	r0, #24
 80193f4:	f001 fd70 	bl	801aed8 <malloc>
 80193f8:	4602      	mov	r2, r0
 80193fa:	6320      	str	r0, [r4, #48]	; 0x30
 80193fc:	b920      	cbnz	r0, 8019408 <rand+0x20>
 80193fe:	4b12      	ldr	r3, [pc, #72]	; (8019448 <rand+0x60>)
 8019400:	4812      	ldr	r0, [pc, #72]	; (801944c <rand+0x64>)
 8019402:	2152      	movs	r1, #82	; 0x52
 8019404:	f000 ff0a 	bl	801a21c <__assert_func>
 8019408:	4911      	ldr	r1, [pc, #68]	; (8019450 <rand+0x68>)
 801940a:	4b12      	ldr	r3, [pc, #72]	; (8019454 <rand+0x6c>)
 801940c:	e9c0 1300 	strd	r1, r3, [r0]
 8019410:	4b11      	ldr	r3, [pc, #68]	; (8019458 <rand+0x70>)
 8019412:	6083      	str	r3, [r0, #8]
 8019414:	230b      	movs	r3, #11
 8019416:	8183      	strh	r3, [r0, #12]
 8019418:	2100      	movs	r1, #0
 801941a:	2001      	movs	r0, #1
 801941c:	e9c2 0104 	strd	r0, r1, [r2, #16]
 8019420:	6b21      	ldr	r1, [r4, #48]	; 0x30
 8019422:	480e      	ldr	r0, [pc, #56]	; (801945c <rand+0x74>)
 8019424:	690b      	ldr	r3, [r1, #16]
 8019426:	694c      	ldr	r4, [r1, #20]
 8019428:	4a0d      	ldr	r2, [pc, #52]	; (8019460 <rand+0x78>)
 801942a:	4358      	muls	r0, r3
 801942c:	fb02 0004 	mla	r0, r2, r4, r0
 8019430:	fba3 3202 	umull	r3, r2, r3, r2
 8019434:	3301      	adds	r3, #1
 8019436:	eb40 0002 	adc.w	r0, r0, r2
 801943a:	e9c1 3004 	strd	r3, r0, [r1, #16]
 801943e:	f020 4000 	bic.w	r0, r0, #2147483648	; 0x80000000
 8019442:	bd10      	pop	{r4, pc}
 8019444:	200000bc 	.word	0x200000bc
 8019448:	0801f4de 	.word	0x0801f4de
 801944c:	0801f4f5 	.word	0x0801f4f5
 8019450:	abcd330e 	.word	0xabcd330e
 8019454:	e66d1234 	.word	0xe66d1234
 8019458:	0005deec 	.word	0x0005deec
 801945c:	5851f42d 	.word	0x5851f42d
 8019460:	4c957f2d 	.word	0x4c957f2d

08019464 <__cvt>:
 8019464:	b5f0      	push	{r4, r5, r6, r7, lr}
 8019466:	ed2d 8b02 	vpush	{d8}
 801946a:	eeb0 8b40 	vmov.f64	d8, d0
 801946e:	b085      	sub	sp, #20
 8019470:	4617      	mov	r7, r2
 8019472:	9d0d      	ldr	r5, [sp, #52]	; 0x34
 8019474:	9e0c      	ldr	r6, [sp, #48]	; 0x30
 8019476:	ee18 2a90 	vmov	r2, s17
 801947a:	f025 0520 	bic.w	r5, r5, #32
 801947e:	2a00      	cmp	r2, #0
 8019480:	bfb6      	itet	lt
 8019482:	222d      	movlt	r2, #45	; 0x2d
 8019484:	2200      	movge	r2, #0
 8019486:	eeb1 8b40 	vneglt.f64	d8, d0
 801948a:	2d46      	cmp	r5, #70	; 0x46
 801948c:	460c      	mov	r4, r1
 801948e:	701a      	strb	r2, [r3, #0]
 8019490:	d004      	beq.n	801949c <__cvt+0x38>
 8019492:	2d45      	cmp	r5, #69	; 0x45
 8019494:	d100      	bne.n	8019498 <__cvt+0x34>
 8019496:	3401      	adds	r4, #1
 8019498:	2102      	movs	r1, #2
 801949a:	e000      	b.n	801949e <__cvt+0x3a>
 801949c:	2103      	movs	r1, #3
 801949e:	ab03      	add	r3, sp, #12
 80194a0:	9301      	str	r3, [sp, #4]
 80194a2:	ab02      	add	r3, sp, #8
 80194a4:	9300      	str	r3, [sp, #0]
 80194a6:	4622      	mov	r2, r4
 80194a8:	4633      	mov	r3, r6
 80194aa:	eeb0 0b48 	vmov.f64	d0, d8
 80194ae:	f000 ff5b 	bl	801a368 <_dtoa_r>
 80194b2:	2d47      	cmp	r5, #71	; 0x47
 80194b4:	d101      	bne.n	80194ba <__cvt+0x56>
 80194b6:	07fb      	lsls	r3, r7, #31
 80194b8:	d51a      	bpl.n	80194f0 <__cvt+0x8c>
 80194ba:	2d46      	cmp	r5, #70	; 0x46
 80194bc:	eb00 0204 	add.w	r2, r0, r4
 80194c0:	d10c      	bne.n	80194dc <__cvt+0x78>
 80194c2:	7803      	ldrb	r3, [r0, #0]
 80194c4:	2b30      	cmp	r3, #48	; 0x30
 80194c6:	d107      	bne.n	80194d8 <__cvt+0x74>
 80194c8:	eeb5 8b40 	vcmp.f64	d8, #0.0
 80194cc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80194d0:	bf1c      	itt	ne
 80194d2:	f1c4 0401 	rsbne	r4, r4, #1
 80194d6:	6034      	strne	r4, [r6, #0]
 80194d8:	6833      	ldr	r3, [r6, #0]
 80194da:	441a      	add	r2, r3
 80194dc:	eeb5 8b40 	vcmp.f64	d8, #0.0
 80194e0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80194e4:	bf08      	it	eq
 80194e6:	9203      	streq	r2, [sp, #12]
 80194e8:	2130      	movs	r1, #48	; 0x30
 80194ea:	9b03      	ldr	r3, [sp, #12]
 80194ec:	4293      	cmp	r3, r2
 80194ee:	d307      	bcc.n	8019500 <__cvt+0x9c>
 80194f0:	9b03      	ldr	r3, [sp, #12]
 80194f2:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 80194f4:	1a1b      	subs	r3, r3, r0
 80194f6:	6013      	str	r3, [r2, #0]
 80194f8:	b005      	add	sp, #20
 80194fa:	ecbd 8b02 	vpop	{d8}
 80194fe:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8019500:	1c5c      	adds	r4, r3, #1
 8019502:	9403      	str	r4, [sp, #12]
 8019504:	7019      	strb	r1, [r3, #0]
 8019506:	e7f0      	b.n	80194ea <__cvt+0x86>

08019508 <__exponent>:
 8019508:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 801950a:	4603      	mov	r3, r0
 801950c:	2900      	cmp	r1, #0
 801950e:	bfb8      	it	lt
 8019510:	4249      	neglt	r1, r1
 8019512:	f803 2b02 	strb.w	r2, [r3], #2
 8019516:	bfb4      	ite	lt
 8019518:	222d      	movlt	r2, #45	; 0x2d
 801951a:	222b      	movge	r2, #43	; 0x2b
 801951c:	2909      	cmp	r1, #9
 801951e:	7042      	strb	r2, [r0, #1]
 8019520:	dd2a      	ble.n	8019578 <__exponent+0x70>
 8019522:	f10d 0207 	add.w	r2, sp, #7
 8019526:	4617      	mov	r7, r2
 8019528:	260a      	movs	r6, #10
 801952a:	4694      	mov	ip, r2
 801952c:	fb91 f5f6 	sdiv	r5, r1, r6
 8019530:	fb06 1415 	mls	r4, r6, r5, r1
 8019534:	3430      	adds	r4, #48	; 0x30
 8019536:	f80c 4c01 	strb.w	r4, [ip, #-1]
 801953a:	460c      	mov	r4, r1
 801953c:	2c63      	cmp	r4, #99	; 0x63
 801953e:	f102 32ff 	add.w	r2, r2, #4294967295
 8019542:	4629      	mov	r1, r5
 8019544:	dcf1      	bgt.n	801952a <__exponent+0x22>
 8019546:	3130      	adds	r1, #48	; 0x30
 8019548:	f1ac 0402 	sub.w	r4, ip, #2
 801954c:	f802 1c01 	strb.w	r1, [r2, #-1]
 8019550:	1c41      	adds	r1, r0, #1
 8019552:	4622      	mov	r2, r4
 8019554:	42ba      	cmp	r2, r7
 8019556:	d30a      	bcc.n	801956e <__exponent+0x66>
 8019558:	f10d 0209 	add.w	r2, sp, #9
 801955c:	eba2 020c 	sub.w	r2, r2, ip
 8019560:	42bc      	cmp	r4, r7
 8019562:	bf88      	it	hi
 8019564:	2200      	movhi	r2, #0
 8019566:	4413      	add	r3, r2
 8019568:	1a18      	subs	r0, r3, r0
 801956a:	b003      	add	sp, #12
 801956c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801956e:	f812 5b01 	ldrb.w	r5, [r2], #1
 8019572:	f801 5f01 	strb.w	r5, [r1, #1]!
 8019576:	e7ed      	b.n	8019554 <__exponent+0x4c>
 8019578:	2330      	movs	r3, #48	; 0x30
 801957a:	3130      	adds	r1, #48	; 0x30
 801957c:	7083      	strb	r3, [r0, #2]
 801957e:	70c1      	strb	r1, [r0, #3]
 8019580:	1d03      	adds	r3, r0, #4
 8019582:	e7f1      	b.n	8019568 <__exponent+0x60>
 8019584:	0000      	movs	r0, r0
	...

08019588 <_printf_float>:
 8019588:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801958c:	b08b      	sub	sp, #44	; 0x2c
 801958e:	460c      	mov	r4, r1
 8019590:	f8dd 8050 	ldr.w	r8, [sp, #80]	; 0x50
 8019594:	4616      	mov	r6, r2
 8019596:	461f      	mov	r7, r3
 8019598:	4605      	mov	r5, r0
 801959a:	f000 fdbf 	bl	801a11c <_localeconv_r>
 801959e:	f8d0 b000 	ldr.w	fp, [r0]
 80195a2:	4658      	mov	r0, fp
 80195a4:	f7e8 fc5c 	bl	8001e60 <strlen>
 80195a8:	2300      	movs	r3, #0
 80195aa:	9308      	str	r3, [sp, #32]
 80195ac:	f8d8 3000 	ldr.w	r3, [r8]
 80195b0:	f894 9018 	ldrb.w	r9, [r4, #24]
 80195b4:	6822      	ldr	r2, [r4, #0]
 80195b6:	3307      	adds	r3, #7
 80195b8:	f023 0307 	bic.w	r3, r3, #7
 80195bc:	f103 0108 	add.w	r1, r3, #8
 80195c0:	f8c8 1000 	str.w	r1, [r8]
 80195c4:	ed93 0b00 	vldr	d0, [r3]
 80195c8:	ed9f 6b97 	vldr	d6, [pc, #604]	; 8019828 <_printf_float+0x2a0>
 80195cc:	eeb0 7bc0 	vabs.f64	d7, d0
 80195d0:	eeb4 7b46 	vcmp.f64	d7, d6
 80195d4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80195d8:	ed84 0b12 	vstr	d0, [r4, #72]	; 0x48
 80195dc:	4682      	mov	sl, r0
 80195de:	dd24      	ble.n	801962a <_printf_float+0xa2>
 80195e0:	eeb5 0bc0 	vcmpe.f64	d0, #0.0
 80195e4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80195e8:	d502      	bpl.n	80195f0 <_printf_float+0x68>
 80195ea:	232d      	movs	r3, #45	; 0x2d
 80195ec:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80195f0:	498f      	ldr	r1, [pc, #572]	; (8019830 <_printf_float+0x2a8>)
 80195f2:	4b90      	ldr	r3, [pc, #576]	; (8019834 <_printf_float+0x2ac>)
 80195f4:	f1b9 0f47 	cmp.w	r9, #71	; 0x47
 80195f8:	bf94      	ite	ls
 80195fa:	4688      	movls	r8, r1
 80195fc:	4698      	movhi	r8, r3
 80195fe:	2303      	movs	r3, #3
 8019600:	6123      	str	r3, [r4, #16]
 8019602:	f022 0204 	bic.w	r2, r2, #4
 8019606:	2300      	movs	r3, #0
 8019608:	6022      	str	r2, [r4, #0]
 801960a:	9304      	str	r3, [sp, #16]
 801960c:	9700      	str	r7, [sp, #0]
 801960e:	4633      	mov	r3, r6
 8019610:	aa09      	add	r2, sp, #36	; 0x24
 8019612:	4621      	mov	r1, r4
 8019614:	4628      	mov	r0, r5
 8019616:	f000 f9d1 	bl	80199bc <_printf_common>
 801961a:	3001      	adds	r0, #1
 801961c:	f040 808a 	bne.w	8019734 <_printf_float+0x1ac>
 8019620:	f04f 30ff 	mov.w	r0, #4294967295
 8019624:	b00b      	add	sp, #44	; 0x2c
 8019626:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801962a:	eeb4 0b40 	vcmp.f64	d0, d0
 801962e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8019632:	d709      	bvc.n	8019648 <_printf_float+0xc0>
 8019634:	ee10 3a90 	vmov	r3, s1
 8019638:	2b00      	cmp	r3, #0
 801963a:	bfbc      	itt	lt
 801963c:	232d      	movlt	r3, #45	; 0x2d
 801963e:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 8019642:	497d      	ldr	r1, [pc, #500]	; (8019838 <_printf_float+0x2b0>)
 8019644:	4b7d      	ldr	r3, [pc, #500]	; (801983c <_printf_float+0x2b4>)
 8019646:	e7d5      	b.n	80195f4 <_printf_float+0x6c>
 8019648:	6863      	ldr	r3, [r4, #4]
 801964a:	f009 01df 	and.w	r1, r9, #223	; 0xdf
 801964e:	9104      	str	r1, [sp, #16]
 8019650:	1c59      	adds	r1, r3, #1
 8019652:	d13c      	bne.n	80196ce <_printf_float+0x146>
 8019654:	2306      	movs	r3, #6
 8019656:	6063      	str	r3, [r4, #4]
 8019658:	2300      	movs	r3, #0
 801965a:	9303      	str	r3, [sp, #12]
 801965c:	ab08      	add	r3, sp, #32
 801965e:	e9cd 9301 	strd	r9, r3, [sp, #4]
 8019662:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8019666:	ab07      	add	r3, sp, #28
 8019668:	6861      	ldr	r1, [r4, #4]
 801966a:	9300      	str	r3, [sp, #0]
 801966c:	6022      	str	r2, [r4, #0]
 801966e:	f10d 031b 	add.w	r3, sp, #27
 8019672:	4628      	mov	r0, r5
 8019674:	f7ff fef6 	bl	8019464 <__cvt>
 8019678:	9b04      	ldr	r3, [sp, #16]
 801967a:	9907      	ldr	r1, [sp, #28]
 801967c:	2b47      	cmp	r3, #71	; 0x47
 801967e:	4680      	mov	r8, r0
 8019680:	d108      	bne.n	8019694 <_printf_float+0x10c>
 8019682:	1cc8      	adds	r0, r1, #3
 8019684:	db02      	blt.n	801968c <_printf_float+0x104>
 8019686:	6863      	ldr	r3, [r4, #4]
 8019688:	4299      	cmp	r1, r3
 801968a:	dd41      	ble.n	8019710 <_printf_float+0x188>
 801968c:	f1a9 0902 	sub.w	r9, r9, #2
 8019690:	fa5f f989 	uxtb.w	r9, r9
 8019694:	f1b9 0f65 	cmp.w	r9, #101	; 0x65
 8019698:	d820      	bhi.n	80196dc <_printf_float+0x154>
 801969a:	3901      	subs	r1, #1
 801969c:	464a      	mov	r2, r9
 801969e:	f104 0050 	add.w	r0, r4, #80	; 0x50
 80196a2:	9107      	str	r1, [sp, #28]
 80196a4:	f7ff ff30 	bl	8019508 <__exponent>
 80196a8:	9a08      	ldr	r2, [sp, #32]
 80196aa:	9004      	str	r0, [sp, #16]
 80196ac:	1813      	adds	r3, r2, r0
 80196ae:	2a01      	cmp	r2, #1
 80196b0:	6123      	str	r3, [r4, #16]
 80196b2:	dc02      	bgt.n	80196ba <_printf_float+0x132>
 80196b4:	6822      	ldr	r2, [r4, #0]
 80196b6:	07d2      	lsls	r2, r2, #31
 80196b8:	d501      	bpl.n	80196be <_printf_float+0x136>
 80196ba:	3301      	adds	r3, #1
 80196bc:	6123      	str	r3, [r4, #16]
 80196be:	f89d 301b 	ldrb.w	r3, [sp, #27]
 80196c2:	2b00      	cmp	r3, #0
 80196c4:	d0a2      	beq.n	801960c <_printf_float+0x84>
 80196c6:	232d      	movs	r3, #45	; 0x2d
 80196c8:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80196cc:	e79e      	b.n	801960c <_printf_float+0x84>
 80196ce:	9904      	ldr	r1, [sp, #16]
 80196d0:	2947      	cmp	r1, #71	; 0x47
 80196d2:	d1c1      	bne.n	8019658 <_printf_float+0xd0>
 80196d4:	2b00      	cmp	r3, #0
 80196d6:	d1bf      	bne.n	8019658 <_printf_float+0xd0>
 80196d8:	2301      	movs	r3, #1
 80196da:	e7bc      	b.n	8019656 <_printf_float+0xce>
 80196dc:	f1b9 0f66 	cmp.w	r9, #102	; 0x66
 80196e0:	d118      	bne.n	8019714 <_printf_float+0x18c>
 80196e2:	2900      	cmp	r1, #0
 80196e4:	6863      	ldr	r3, [r4, #4]
 80196e6:	dd0b      	ble.n	8019700 <_printf_float+0x178>
 80196e8:	6121      	str	r1, [r4, #16]
 80196ea:	b913      	cbnz	r3, 80196f2 <_printf_float+0x16a>
 80196ec:	6822      	ldr	r2, [r4, #0]
 80196ee:	07d0      	lsls	r0, r2, #31
 80196f0:	d502      	bpl.n	80196f8 <_printf_float+0x170>
 80196f2:	3301      	adds	r3, #1
 80196f4:	440b      	add	r3, r1
 80196f6:	6123      	str	r3, [r4, #16]
 80196f8:	2300      	movs	r3, #0
 80196fa:	65a1      	str	r1, [r4, #88]	; 0x58
 80196fc:	9304      	str	r3, [sp, #16]
 80196fe:	e7de      	b.n	80196be <_printf_float+0x136>
 8019700:	b913      	cbnz	r3, 8019708 <_printf_float+0x180>
 8019702:	6822      	ldr	r2, [r4, #0]
 8019704:	07d2      	lsls	r2, r2, #31
 8019706:	d501      	bpl.n	801970c <_printf_float+0x184>
 8019708:	3302      	adds	r3, #2
 801970a:	e7f4      	b.n	80196f6 <_printf_float+0x16e>
 801970c:	2301      	movs	r3, #1
 801970e:	e7f2      	b.n	80196f6 <_printf_float+0x16e>
 8019710:	f04f 0967 	mov.w	r9, #103	; 0x67
 8019714:	9b08      	ldr	r3, [sp, #32]
 8019716:	4299      	cmp	r1, r3
 8019718:	db05      	blt.n	8019726 <_printf_float+0x19e>
 801971a:	6823      	ldr	r3, [r4, #0]
 801971c:	6121      	str	r1, [r4, #16]
 801971e:	07d8      	lsls	r0, r3, #31
 8019720:	d5ea      	bpl.n	80196f8 <_printf_float+0x170>
 8019722:	1c4b      	adds	r3, r1, #1
 8019724:	e7e7      	b.n	80196f6 <_printf_float+0x16e>
 8019726:	2900      	cmp	r1, #0
 8019728:	bfd4      	ite	le
 801972a:	f1c1 0202 	rsble	r2, r1, #2
 801972e:	2201      	movgt	r2, #1
 8019730:	4413      	add	r3, r2
 8019732:	e7e0      	b.n	80196f6 <_printf_float+0x16e>
 8019734:	6823      	ldr	r3, [r4, #0]
 8019736:	055a      	lsls	r2, r3, #21
 8019738:	d407      	bmi.n	801974a <_printf_float+0x1c2>
 801973a:	6923      	ldr	r3, [r4, #16]
 801973c:	4642      	mov	r2, r8
 801973e:	4631      	mov	r1, r6
 8019740:	4628      	mov	r0, r5
 8019742:	47b8      	blx	r7
 8019744:	3001      	adds	r0, #1
 8019746:	d12a      	bne.n	801979e <_printf_float+0x216>
 8019748:	e76a      	b.n	8019620 <_printf_float+0x98>
 801974a:	f1b9 0f65 	cmp.w	r9, #101	; 0x65
 801974e:	f240 80e0 	bls.w	8019912 <_printf_float+0x38a>
 8019752:	ed94 7b12 	vldr	d7, [r4, #72]	; 0x48
 8019756:	eeb5 7b40 	vcmp.f64	d7, #0.0
 801975a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801975e:	d133      	bne.n	80197c8 <_printf_float+0x240>
 8019760:	4a37      	ldr	r2, [pc, #220]	; (8019840 <_printf_float+0x2b8>)
 8019762:	2301      	movs	r3, #1
 8019764:	4631      	mov	r1, r6
 8019766:	4628      	mov	r0, r5
 8019768:	47b8      	blx	r7
 801976a:	3001      	adds	r0, #1
 801976c:	f43f af58 	beq.w	8019620 <_printf_float+0x98>
 8019770:	e9dd 2307 	ldrd	r2, r3, [sp, #28]
 8019774:	429a      	cmp	r2, r3
 8019776:	db02      	blt.n	801977e <_printf_float+0x1f6>
 8019778:	6823      	ldr	r3, [r4, #0]
 801977a:	07d8      	lsls	r0, r3, #31
 801977c:	d50f      	bpl.n	801979e <_printf_float+0x216>
 801977e:	4653      	mov	r3, sl
 8019780:	465a      	mov	r2, fp
 8019782:	4631      	mov	r1, r6
 8019784:	4628      	mov	r0, r5
 8019786:	47b8      	blx	r7
 8019788:	3001      	adds	r0, #1
 801978a:	f43f af49 	beq.w	8019620 <_printf_float+0x98>
 801978e:	f04f 0800 	mov.w	r8, #0
 8019792:	f104 091a 	add.w	r9, r4, #26
 8019796:	9b08      	ldr	r3, [sp, #32]
 8019798:	3b01      	subs	r3, #1
 801979a:	4543      	cmp	r3, r8
 801979c:	dc09      	bgt.n	80197b2 <_printf_float+0x22a>
 801979e:	6823      	ldr	r3, [r4, #0]
 80197a0:	079b      	lsls	r3, r3, #30
 80197a2:	f100 8106 	bmi.w	80199b2 <_printf_float+0x42a>
 80197a6:	68e0      	ldr	r0, [r4, #12]
 80197a8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80197aa:	4298      	cmp	r0, r3
 80197ac:	bfb8      	it	lt
 80197ae:	4618      	movlt	r0, r3
 80197b0:	e738      	b.n	8019624 <_printf_float+0x9c>
 80197b2:	2301      	movs	r3, #1
 80197b4:	464a      	mov	r2, r9
 80197b6:	4631      	mov	r1, r6
 80197b8:	4628      	mov	r0, r5
 80197ba:	47b8      	blx	r7
 80197bc:	3001      	adds	r0, #1
 80197be:	f43f af2f 	beq.w	8019620 <_printf_float+0x98>
 80197c2:	f108 0801 	add.w	r8, r8, #1
 80197c6:	e7e6      	b.n	8019796 <_printf_float+0x20e>
 80197c8:	9b07      	ldr	r3, [sp, #28]
 80197ca:	2b00      	cmp	r3, #0
 80197cc:	dc3a      	bgt.n	8019844 <_printf_float+0x2bc>
 80197ce:	4a1c      	ldr	r2, [pc, #112]	; (8019840 <_printf_float+0x2b8>)
 80197d0:	2301      	movs	r3, #1
 80197d2:	4631      	mov	r1, r6
 80197d4:	4628      	mov	r0, r5
 80197d6:	47b8      	blx	r7
 80197d8:	3001      	adds	r0, #1
 80197da:	f43f af21 	beq.w	8019620 <_printf_float+0x98>
 80197de:	e9dd 3207 	ldrd	r3, r2, [sp, #28]
 80197e2:	4313      	orrs	r3, r2
 80197e4:	d102      	bne.n	80197ec <_printf_float+0x264>
 80197e6:	6823      	ldr	r3, [r4, #0]
 80197e8:	07d9      	lsls	r1, r3, #31
 80197ea:	d5d8      	bpl.n	801979e <_printf_float+0x216>
 80197ec:	4653      	mov	r3, sl
 80197ee:	465a      	mov	r2, fp
 80197f0:	4631      	mov	r1, r6
 80197f2:	4628      	mov	r0, r5
 80197f4:	47b8      	blx	r7
 80197f6:	3001      	adds	r0, #1
 80197f8:	f43f af12 	beq.w	8019620 <_printf_float+0x98>
 80197fc:	f04f 0900 	mov.w	r9, #0
 8019800:	f104 0a1a 	add.w	sl, r4, #26
 8019804:	9b07      	ldr	r3, [sp, #28]
 8019806:	425b      	negs	r3, r3
 8019808:	454b      	cmp	r3, r9
 801980a:	dc01      	bgt.n	8019810 <_printf_float+0x288>
 801980c:	9b08      	ldr	r3, [sp, #32]
 801980e:	e795      	b.n	801973c <_printf_float+0x1b4>
 8019810:	2301      	movs	r3, #1
 8019812:	4652      	mov	r2, sl
 8019814:	4631      	mov	r1, r6
 8019816:	4628      	mov	r0, r5
 8019818:	47b8      	blx	r7
 801981a:	3001      	adds	r0, #1
 801981c:	f43f af00 	beq.w	8019620 <_printf_float+0x98>
 8019820:	f109 0901 	add.w	r9, r9, #1
 8019824:	e7ee      	b.n	8019804 <_printf_float+0x27c>
 8019826:	bf00      	nop
 8019828:	ffffffff 	.word	0xffffffff
 801982c:	7fefffff 	.word	0x7fefffff
 8019830:	0801f64e 	.word	0x0801f64e
 8019834:	0801f652 	.word	0x0801f652
 8019838:	0801f656 	.word	0x0801f656
 801983c:	0801f65a 	.word	0x0801f65a
 8019840:	0801f65e 	.word	0x0801f65e
 8019844:	9a08      	ldr	r2, [sp, #32]
 8019846:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8019848:	429a      	cmp	r2, r3
 801984a:	bfa8      	it	ge
 801984c:	461a      	movge	r2, r3
 801984e:	2a00      	cmp	r2, #0
 8019850:	4691      	mov	r9, r2
 8019852:	dc38      	bgt.n	80198c6 <_printf_float+0x33e>
 8019854:	2300      	movs	r3, #0
 8019856:	9305      	str	r3, [sp, #20]
 8019858:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 801985c:	f104 021a 	add.w	r2, r4, #26
 8019860:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8019862:	9905      	ldr	r1, [sp, #20]
 8019864:	9304      	str	r3, [sp, #16]
 8019866:	eba3 0309 	sub.w	r3, r3, r9
 801986a:	428b      	cmp	r3, r1
 801986c:	dc33      	bgt.n	80198d6 <_printf_float+0x34e>
 801986e:	e9dd 2307 	ldrd	r2, r3, [sp, #28]
 8019872:	429a      	cmp	r2, r3
 8019874:	db3c      	blt.n	80198f0 <_printf_float+0x368>
 8019876:	6823      	ldr	r3, [r4, #0]
 8019878:	07da      	lsls	r2, r3, #31
 801987a:	d439      	bmi.n	80198f0 <_printf_float+0x368>
 801987c:	e9dd 3207 	ldrd	r3, r2, [sp, #28]
 8019880:	eba2 0903 	sub.w	r9, r2, r3
 8019884:	9b04      	ldr	r3, [sp, #16]
 8019886:	1ad2      	subs	r2, r2, r3
 8019888:	4591      	cmp	r9, r2
 801988a:	bfa8      	it	ge
 801988c:	4691      	movge	r9, r2
 801988e:	f1b9 0f00 	cmp.w	r9, #0
 8019892:	dc35      	bgt.n	8019900 <_printf_float+0x378>
 8019894:	f04f 0800 	mov.w	r8, #0
 8019898:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 801989c:	f104 0a1a 	add.w	sl, r4, #26
 80198a0:	e9dd 2307 	ldrd	r2, r3, [sp, #28]
 80198a4:	1a9b      	subs	r3, r3, r2
 80198a6:	eba3 0309 	sub.w	r3, r3, r9
 80198aa:	4543      	cmp	r3, r8
 80198ac:	f77f af77 	ble.w	801979e <_printf_float+0x216>
 80198b0:	2301      	movs	r3, #1
 80198b2:	4652      	mov	r2, sl
 80198b4:	4631      	mov	r1, r6
 80198b6:	4628      	mov	r0, r5
 80198b8:	47b8      	blx	r7
 80198ba:	3001      	adds	r0, #1
 80198bc:	f43f aeb0 	beq.w	8019620 <_printf_float+0x98>
 80198c0:	f108 0801 	add.w	r8, r8, #1
 80198c4:	e7ec      	b.n	80198a0 <_printf_float+0x318>
 80198c6:	4613      	mov	r3, r2
 80198c8:	4631      	mov	r1, r6
 80198ca:	4642      	mov	r2, r8
 80198cc:	4628      	mov	r0, r5
 80198ce:	47b8      	blx	r7
 80198d0:	3001      	adds	r0, #1
 80198d2:	d1bf      	bne.n	8019854 <_printf_float+0x2cc>
 80198d4:	e6a4      	b.n	8019620 <_printf_float+0x98>
 80198d6:	2301      	movs	r3, #1
 80198d8:	4631      	mov	r1, r6
 80198da:	4628      	mov	r0, r5
 80198dc:	9204      	str	r2, [sp, #16]
 80198de:	47b8      	blx	r7
 80198e0:	3001      	adds	r0, #1
 80198e2:	f43f ae9d 	beq.w	8019620 <_printf_float+0x98>
 80198e6:	9b05      	ldr	r3, [sp, #20]
 80198e8:	9a04      	ldr	r2, [sp, #16]
 80198ea:	3301      	adds	r3, #1
 80198ec:	9305      	str	r3, [sp, #20]
 80198ee:	e7b7      	b.n	8019860 <_printf_float+0x2d8>
 80198f0:	4653      	mov	r3, sl
 80198f2:	465a      	mov	r2, fp
 80198f4:	4631      	mov	r1, r6
 80198f6:	4628      	mov	r0, r5
 80198f8:	47b8      	blx	r7
 80198fa:	3001      	adds	r0, #1
 80198fc:	d1be      	bne.n	801987c <_printf_float+0x2f4>
 80198fe:	e68f      	b.n	8019620 <_printf_float+0x98>
 8019900:	9a04      	ldr	r2, [sp, #16]
 8019902:	464b      	mov	r3, r9
 8019904:	4442      	add	r2, r8
 8019906:	4631      	mov	r1, r6
 8019908:	4628      	mov	r0, r5
 801990a:	47b8      	blx	r7
 801990c:	3001      	adds	r0, #1
 801990e:	d1c1      	bne.n	8019894 <_printf_float+0x30c>
 8019910:	e686      	b.n	8019620 <_printf_float+0x98>
 8019912:	9a08      	ldr	r2, [sp, #32]
 8019914:	2a01      	cmp	r2, #1
 8019916:	dc01      	bgt.n	801991c <_printf_float+0x394>
 8019918:	07db      	lsls	r3, r3, #31
 801991a:	d537      	bpl.n	801998c <_printf_float+0x404>
 801991c:	2301      	movs	r3, #1
 801991e:	4642      	mov	r2, r8
 8019920:	4631      	mov	r1, r6
 8019922:	4628      	mov	r0, r5
 8019924:	47b8      	blx	r7
 8019926:	3001      	adds	r0, #1
 8019928:	f43f ae7a 	beq.w	8019620 <_printf_float+0x98>
 801992c:	4653      	mov	r3, sl
 801992e:	465a      	mov	r2, fp
 8019930:	4631      	mov	r1, r6
 8019932:	4628      	mov	r0, r5
 8019934:	47b8      	blx	r7
 8019936:	3001      	adds	r0, #1
 8019938:	f43f ae72 	beq.w	8019620 <_printf_float+0x98>
 801993c:	ed94 7b12 	vldr	d7, [r4, #72]	; 0x48
 8019940:	eeb5 7b40 	vcmp.f64	d7, #0.0
 8019944:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8019948:	9b08      	ldr	r3, [sp, #32]
 801994a:	d01a      	beq.n	8019982 <_printf_float+0x3fa>
 801994c:	3b01      	subs	r3, #1
 801994e:	f108 0201 	add.w	r2, r8, #1
 8019952:	4631      	mov	r1, r6
 8019954:	4628      	mov	r0, r5
 8019956:	47b8      	blx	r7
 8019958:	3001      	adds	r0, #1
 801995a:	d10e      	bne.n	801997a <_printf_float+0x3f2>
 801995c:	e660      	b.n	8019620 <_printf_float+0x98>
 801995e:	2301      	movs	r3, #1
 8019960:	464a      	mov	r2, r9
 8019962:	4631      	mov	r1, r6
 8019964:	4628      	mov	r0, r5
 8019966:	47b8      	blx	r7
 8019968:	3001      	adds	r0, #1
 801996a:	f43f ae59 	beq.w	8019620 <_printf_float+0x98>
 801996e:	f108 0801 	add.w	r8, r8, #1
 8019972:	9b08      	ldr	r3, [sp, #32]
 8019974:	3b01      	subs	r3, #1
 8019976:	4543      	cmp	r3, r8
 8019978:	dcf1      	bgt.n	801995e <_printf_float+0x3d6>
 801997a:	9b04      	ldr	r3, [sp, #16]
 801997c:	f104 0250 	add.w	r2, r4, #80	; 0x50
 8019980:	e6dd      	b.n	801973e <_printf_float+0x1b6>
 8019982:	f04f 0800 	mov.w	r8, #0
 8019986:	f104 091a 	add.w	r9, r4, #26
 801998a:	e7f2      	b.n	8019972 <_printf_float+0x3ea>
 801998c:	2301      	movs	r3, #1
 801998e:	4642      	mov	r2, r8
 8019990:	e7df      	b.n	8019952 <_printf_float+0x3ca>
 8019992:	2301      	movs	r3, #1
 8019994:	464a      	mov	r2, r9
 8019996:	4631      	mov	r1, r6
 8019998:	4628      	mov	r0, r5
 801999a:	47b8      	blx	r7
 801999c:	3001      	adds	r0, #1
 801999e:	f43f ae3f 	beq.w	8019620 <_printf_float+0x98>
 80199a2:	f108 0801 	add.w	r8, r8, #1
 80199a6:	68e3      	ldr	r3, [r4, #12]
 80199a8:	9909      	ldr	r1, [sp, #36]	; 0x24
 80199aa:	1a5b      	subs	r3, r3, r1
 80199ac:	4543      	cmp	r3, r8
 80199ae:	dcf0      	bgt.n	8019992 <_printf_float+0x40a>
 80199b0:	e6f9      	b.n	80197a6 <_printf_float+0x21e>
 80199b2:	f04f 0800 	mov.w	r8, #0
 80199b6:	f104 0919 	add.w	r9, r4, #25
 80199ba:	e7f4      	b.n	80199a6 <_printf_float+0x41e>

080199bc <_printf_common>:
 80199bc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80199c0:	4616      	mov	r6, r2
 80199c2:	4699      	mov	r9, r3
 80199c4:	688a      	ldr	r2, [r1, #8]
 80199c6:	690b      	ldr	r3, [r1, #16]
 80199c8:	f8dd 8020 	ldr.w	r8, [sp, #32]
 80199cc:	4293      	cmp	r3, r2
 80199ce:	bfb8      	it	lt
 80199d0:	4613      	movlt	r3, r2
 80199d2:	6033      	str	r3, [r6, #0]
 80199d4:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 80199d8:	4607      	mov	r7, r0
 80199da:	460c      	mov	r4, r1
 80199dc:	b10a      	cbz	r2, 80199e2 <_printf_common+0x26>
 80199de:	3301      	adds	r3, #1
 80199e0:	6033      	str	r3, [r6, #0]
 80199e2:	6823      	ldr	r3, [r4, #0]
 80199e4:	0699      	lsls	r1, r3, #26
 80199e6:	bf42      	ittt	mi
 80199e8:	6833      	ldrmi	r3, [r6, #0]
 80199ea:	3302      	addmi	r3, #2
 80199ec:	6033      	strmi	r3, [r6, #0]
 80199ee:	6825      	ldr	r5, [r4, #0]
 80199f0:	f015 0506 	ands.w	r5, r5, #6
 80199f4:	d106      	bne.n	8019a04 <_printf_common+0x48>
 80199f6:	f104 0a19 	add.w	sl, r4, #25
 80199fa:	68e3      	ldr	r3, [r4, #12]
 80199fc:	6832      	ldr	r2, [r6, #0]
 80199fe:	1a9b      	subs	r3, r3, r2
 8019a00:	42ab      	cmp	r3, r5
 8019a02:	dc26      	bgt.n	8019a52 <_printf_common+0x96>
 8019a04:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8019a08:	1e13      	subs	r3, r2, #0
 8019a0a:	6822      	ldr	r2, [r4, #0]
 8019a0c:	bf18      	it	ne
 8019a0e:	2301      	movne	r3, #1
 8019a10:	0692      	lsls	r2, r2, #26
 8019a12:	d42b      	bmi.n	8019a6c <_printf_common+0xb0>
 8019a14:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8019a18:	4649      	mov	r1, r9
 8019a1a:	4638      	mov	r0, r7
 8019a1c:	47c0      	blx	r8
 8019a1e:	3001      	adds	r0, #1
 8019a20:	d01e      	beq.n	8019a60 <_printf_common+0xa4>
 8019a22:	6823      	ldr	r3, [r4, #0]
 8019a24:	6922      	ldr	r2, [r4, #16]
 8019a26:	f003 0306 	and.w	r3, r3, #6
 8019a2a:	2b04      	cmp	r3, #4
 8019a2c:	bf02      	ittt	eq
 8019a2e:	68e5      	ldreq	r5, [r4, #12]
 8019a30:	6833      	ldreq	r3, [r6, #0]
 8019a32:	1aed      	subeq	r5, r5, r3
 8019a34:	68a3      	ldr	r3, [r4, #8]
 8019a36:	bf0c      	ite	eq
 8019a38:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8019a3c:	2500      	movne	r5, #0
 8019a3e:	4293      	cmp	r3, r2
 8019a40:	bfc4      	itt	gt
 8019a42:	1a9b      	subgt	r3, r3, r2
 8019a44:	18ed      	addgt	r5, r5, r3
 8019a46:	2600      	movs	r6, #0
 8019a48:	341a      	adds	r4, #26
 8019a4a:	42b5      	cmp	r5, r6
 8019a4c:	d11a      	bne.n	8019a84 <_printf_common+0xc8>
 8019a4e:	2000      	movs	r0, #0
 8019a50:	e008      	b.n	8019a64 <_printf_common+0xa8>
 8019a52:	2301      	movs	r3, #1
 8019a54:	4652      	mov	r2, sl
 8019a56:	4649      	mov	r1, r9
 8019a58:	4638      	mov	r0, r7
 8019a5a:	47c0      	blx	r8
 8019a5c:	3001      	adds	r0, #1
 8019a5e:	d103      	bne.n	8019a68 <_printf_common+0xac>
 8019a60:	f04f 30ff 	mov.w	r0, #4294967295
 8019a64:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8019a68:	3501      	adds	r5, #1
 8019a6a:	e7c6      	b.n	80199fa <_printf_common+0x3e>
 8019a6c:	18e1      	adds	r1, r4, r3
 8019a6e:	1c5a      	adds	r2, r3, #1
 8019a70:	2030      	movs	r0, #48	; 0x30
 8019a72:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8019a76:	4422      	add	r2, r4
 8019a78:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8019a7c:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8019a80:	3302      	adds	r3, #2
 8019a82:	e7c7      	b.n	8019a14 <_printf_common+0x58>
 8019a84:	2301      	movs	r3, #1
 8019a86:	4622      	mov	r2, r4
 8019a88:	4649      	mov	r1, r9
 8019a8a:	4638      	mov	r0, r7
 8019a8c:	47c0      	blx	r8
 8019a8e:	3001      	adds	r0, #1
 8019a90:	d0e6      	beq.n	8019a60 <_printf_common+0xa4>
 8019a92:	3601      	adds	r6, #1
 8019a94:	e7d9      	b.n	8019a4a <_printf_common+0x8e>
	...

08019a98 <_printf_i>:
 8019a98:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8019a9c:	7e0f      	ldrb	r7, [r1, #24]
 8019a9e:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8019aa0:	2f78      	cmp	r7, #120	; 0x78
 8019aa2:	4691      	mov	r9, r2
 8019aa4:	4680      	mov	r8, r0
 8019aa6:	460c      	mov	r4, r1
 8019aa8:	469a      	mov	sl, r3
 8019aaa:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8019aae:	d807      	bhi.n	8019ac0 <_printf_i+0x28>
 8019ab0:	2f62      	cmp	r7, #98	; 0x62
 8019ab2:	d80a      	bhi.n	8019aca <_printf_i+0x32>
 8019ab4:	2f00      	cmp	r7, #0
 8019ab6:	f000 80d4 	beq.w	8019c62 <_printf_i+0x1ca>
 8019aba:	2f58      	cmp	r7, #88	; 0x58
 8019abc:	f000 80c0 	beq.w	8019c40 <_printf_i+0x1a8>
 8019ac0:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8019ac4:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8019ac8:	e03a      	b.n	8019b40 <_printf_i+0xa8>
 8019aca:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8019ace:	2b15      	cmp	r3, #21
 8019ad0:	d8f6      	bhi.n	8019ac0 <_printf_i+0x28>
 8019ad2:	a101      	add	r1, pc, #4	; (adr r1, 8019ad8 <_printf_i+0x40>)
 8019ad4:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8019ad8:	08019b31 	.word	0x08019b31
 8019adc:	08019b45 	.word	0x08019b45
 8019ae0:	08019ac1 	.word	0x08019ac1
 8019ae4:	08019ac1 	.word	0x08019ac1
 8019ae8:	08019ac1 	.word	0x08019ac1
 8019aec:	08019ac1 	.word	0x08019ac1
 8019af0:	08019b45 	.word	0x08019b45
 8019af4:	08019ac1 	.word	0x08019ac1
 8019af8:	08019ac1 	.word	0x08019ac1
 8019afc:	08019ac1 	.word	0x08019ac1
 8019b00:	08019ac1 	.word	0x08019ac1
 8019b04:	08019c49 	.word	0x08019c49
 8019b08:	08019b71 	.word	0x08019b71
 8019b0c:	08019c03 	.word	0x08019c03
 8019b10:	08019ac1 	.word	0x08019ac1
 8019b14:	08019ac1 	.word	0x08019ac1
 8019b18:	08019c6b 	.word	0x08019c6b
 8019b1c:	08019ac1 	.word	0x08019ac1
 8019b20:	08019b71 	.word	0x08019b71
 8019b24:	08019ac1 	.word	0x08019ac1
 8019b28:	08019ac1 	.word	0x08019ac1
 8019b2c:	08019c0b 	.word	0x08019c0b
 8019b30:	682b      	ldr	r3, [r5, #0]
 8019b32:	1d1a      	adds	r2, r3, #4
 8019b34:	681b      	ldr	r3, [r3, #0]
 8019b36:	602a      	str	r2, [r5, #0]
 8019b38:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8019b3c:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8019b40:	2301      	movs	r3, #1
 8019b42:	e09f      	b.n	8019c84 <_printf_i+0x1ec>
 8019b44:	6820      	ldr	r0, [r4, #0]
 8019b46:	682b      	ldr	r3, [r5, #0]
 8019b48:	0607      	lsls	r7, r0, #24
 8019b4a:	f103 0104 	add.w	r1, r3, #4
 8019b4e:	6029      	str	r1, [r5, #0]
 8019b50:	d501      	bpl.n	8019b56 <_printf_i+0xbe>
 8019b52:	681e      	ldr	r6, [r3, #0]
 8019b54:	e003      	b.n	8019b5e <_printf_i+0xc6>
 8019b56:	0646      	lsls	r6, r0, #25
 8019b58:	d5fb      	bpl.n	8019b52 <_printf_i+0xba>
 8019b5a:	f9b3 6000 	ldrsh.w	r6, [r3]
 8019b5e:	2e00      	cmp	r6, #0
 8019b60:	da03      	bge.n	8019b6a <_printf_i+0xd2>
 8019b62:	232d      	movs	r3, #45	; 0x2d
 8019b64:	4276      	negs	r6, r6
 8019b66:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8019b6a:	485a      	ldr	r0, [pc, #360]	; (8019cd4 <_printf_i+0x23c>)
 8019b6c:	230a      	movs	r3, #10
 8019b6e:	e012      	b.n	8019b96 <_printf_i+0xfe>
 8019b70:	682b      	ldr	r3, [r5, #0]
 8019b72:	6820      	ldr	r0, [r4, #0]
 8019b74:	1d19      	adds	r1, r3, #4
 8019b76:	6029      	str	r1, [r5, #0]
 8019b78:	0605      	lsls	r5, r0, #24
 8019b7a:	d501      	bpl.n	8019b80 <_printf_i+0xe8>
 8019b7c:	681e      	ldr	r6, [r3, #0]
 8019b7e:	e002      	b.n	8019b86 <_printf_i+0xee>
 8019b80:	0641      	lsls	r1, r0, #25
 8019b82:	d5fb      	bpl.n	8019b7c <_printf_i+0xe4>
 8019b84:	881e      	ldrh	r6, [r3, #0]
 8019b86:	4853      	ldr	r0, [pc, #332]	; (8019cd4 <_printf_i+0x23c>)
 8019b88:	2f6f      	cmp	r7, #111	; 0x6f
 8019b8a:	bf0c      	ite	eq
 8019b8c:	2308      	moveq	r3, #8
 8019b8e:	230a      	movne	r3, #10
 8019b90:	2100      	movs	r1, #0
 8019b92:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8019b96:	6865      	ldr	r5, [r4, #4]
 8019b98:	60a5      	str	r5, [r4, #8]
 8019b9a:	2d00      	cmp	r5, #0
 8019b9c:	bfa2      	ittt	ge
 8019b9e:	6821      	ldrge	r1, [r4, #0]
 8019ba0:	f021 0104 	bicge.w	r1, r1, #4
 8019ba4:	6021      	strge	r1, [r4, #0]
 8019ba6:	b90e      	cbnz	r6, 8019bac <_printf_i+0x114>
 8019ba8:	2d00      	cmp	r5, #0
 8019baa:	d04b      	beq.n	8019c44 <_printf_i+0x1ac>
 8019bac:	4615      	mov	r5, r2
 8019bae:	fbb6 f1f3 	udiv	r1, r6, r3
 8019bb2:	fb03 6711 	mls	r7, r3, r1, r6
 8019bb6:	5dc7      	ldrb	r7, [r0, r7]
 8019bb8:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8019bbc:	4637      	mov	r7, r6
 8019bbe:	42bb      	cmp	r3, r7
 8019bc0:	460e      	mov	r6, r1
 8019bc2:	d9f4      	bls.n	8019bae <_printf_i+0x116>
 8019bc4:	2b08      	cmp	r3, #8
 8019bc6:	d10b      	bne.n	8019be0 <_printf_i+0x148>
 8019bc8:	6823      	ldr	r3, [r4, #0]
 8019bca:	07de      	lsls	r6, r3, #31
 8019bcc:	d508      	bpl.n	8019be0 <_printf_i+0x148>
 8019bce:	6923      	ldr	r3, [r4, #16]
 8019bd0:	6861      	ldr	r1, [r4, #4]
 8019bd2:	4299      	cmp	r1, r3
 8019bd4:	bfde      	ittt	le
 8019bd6:	2330      	movle	r3, #48	; 0x30
 8019bd8:	f805 3c01 	strble.w	r3, [r5, #-1]
 8019bdc:	f105 35ff 	addle.w	r5, r5, #4294967295
 8019be0:	1b52      	subs	r2, r2, r5
 8019be2:	6122      	str	r2, [r4, #16]
 8019be4:	f8cd a000 	str.w	sl, [sp]
 8019be8:	464b      	mov	r3, r9
 8019bea:	aa03      	add	r2, sp, #12
 8019bec:	4621      	mov	r1, r4
 8019bee:	4640      	mov	r0, r8
 8019bf0:	f7ff fee4 	bl	80199bc <_printf_common>
 8019bf4:	3001      	adds	r0, #1
 8019bf6:	d14a      	bne.n	8019c8e <_printf_i+0x1f6>
 8019bf8:	f04f 30ff 	mov.w	r0, #4294967295
 8019bfc:	b004      	add	sp, #16
 8019bfe:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8019c02:	6823      	ldr	r3, [r4, #0]
 8019c04:	f043 0320 	orr.w	r3, r3, #32
 8019c08:	6023      	str	r3, [r4, #0]
 8019c0a:	4833      	ldr	r0, [pc, #204]	; (8019cd8 <_printf_i+0x240>)
 8019c0c:	2778      	movs	r7, #120	; 0x78
 8019c0e:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8019c12:	6823      	ldr	r3, [r4, #0]
 8019c14:	6829      	ldr	r1, [r5, #0]
 8019c16:	061f      	lsls	r7, r3, #24
 8019c18:	f851 6b04 	ldr.w	r6, [r1], #4
 8019c1c:	d402      	bmi.n	8019c24 <_printf_i+0x18c>
 8019c1e:	065f      	lsls	r7, r3, #25
 8019c20:	bf48      	it	mi
 8019c22:	b2b6      	uxthmi	r6, r6
 8019c24:	07df      	lsls	r7, r3, #31
 8019c26:	bf48      	it	mi
 8019c28:	f043 0320 	orrmi.w	r3, r3, #32
 8019c2c:	6029      	str	r1, [r5, #0]
 8019c2e:	bf48      	it	mi
 8019c30:	6023      	strmi	r3, [r4, #0]
 8019c32:	b91e      	cbnz	r6, 8019c3c <_printf_i+0x1a4>
 8019c34:	6823      	ldr	r3, [r4, #0]
 8019c36:	f023 0320 	bic.w	r3, r3, #32
 8019c3a:	6023      	str	r3, [r4, #0]
 8019c3c:	2310      	movs	r3, #16
 8019c3e:	e7a7      	b.n	8019b90 <_printf_i+0xf8>
 8019c40:	4824      	ldr	r0, [pc, #144]	; (8019cd4 <_printf_i+0x23c>)
 8019c42:	e7e4      	b.n	8019c0e <_printf_i+0x176>
 8019c44:	4615      	mov	r5, r2
 8019c46:	e7bd      	b.n	8019bc4 <_printf_i+0x12c>
 8019c48:	682b      	ldr	r3, [r5, #0]
 8019c4a:	6826      	ldr	r6, [r4, #0]
 8019c4c:	6961      	ldr	r1, [r4, #20]
 8019c4e:	1d18      	adds	r0, r3, #4
 8019c50:	6028      	str	r0, [r5, #0]
 8019c52:	0635      	lsls	r5, r6, #24
 8019c54:	681b      	ldr	r3, [r3, #0]
 8019c56:	d501      	bpl.n	8019c5c <_printf_i+0x1c4>
 8019c58:	6019      	str	r1, [r3, #0]
 8019c5a:	e002      	b.n	8019c62 <_printf_i+0x1ca>
 8019c5c:	0670      	lsls	r0, r6, #25
 8019c5e:	d5fb      	bpl.n	8019c58 <_printf_i+0x1c0>
 8019c60:	8019      	strh	r1, [r3, #0]
 8019c62:	2300      	movs	r3, #0
 8019c64:	6123      	str	r3, [r4, #16]
 8019c66:	4615      	mov	r5, r2
 8019c68:	e7bc      	b.n	8019be4 <_printf_i+0x14c>
 8019c6a:	682b      	ldr	r3, [r5, #0]
 8019c6c:	1d1a      	adds	r2, r3, #4
 8019c6e:	602a      	str	r2, [r5, #0]
 8019c70:	681d      	ldr	r5, [r3, #0]
 8019c72:	6862      	ldr	r2, [r4, #4]
 8019c74:	2100      	movs	r1, #0
 8019c76:	4628      	mov	r0, r5
 8019c78:	f7e8 f8a2 	bl	8001dc0 <memchr>
 8019c7c:	b108      	cbz	r0, 8019c82 <_printf_i+0x1ea>
 8019c7e:	1b40      	subs	r0, r0, r5
 8019c80:	6060      	str	r0, [r4, #4]
 8019c82:	6863      	ldr	r3, [r4, #4]
 8019c84:	6123      	str	r3, [r4, #16]
 8019c86:	2300      	movs	r3, #0
 8019c88:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8019c8c:	e7aa      	b.n	8019be4 <_printf_i+0x14c>
 8019c8e:	6923      	ldr	r3, [r4, #16]
 8019c90:	462a      	mov	r2, r5
 8019c92:	4649      	mov	r1, r9
 8019c94:	4640      	mov	r0, r8
 8019c96:	47d0      	blx	sl
 8019c98:	3001      	adds	r0, #1
 8019c9a:	d0ad      	beq.n	8019bf8 <_printf_i+0x160>
 8019c9c:	6823      	ldr	r3, [r4, #0]
 8019c9e:	079b      	lsls	r3, r3, #30
 8019ca0:	d413      	bmi.n	8019cca <_printf_i+0x232>
 8019ca2:	68e0      	ldr	r0, [r4, #12]
 8019ca4:	9b03      	ldr	r3, [sp, #12]
 8019ca6:	4298      	cmp	r0, r3
 8019ca8:	bfb8      	it	lt
 8019caa:	4618      	movlt	r0, r3
 8019cac:	e7a6      	b.n	8019bfc <_printf_i+0x164>
 8019cae:	2301      	movs	r3, #1
 8019cb0:	4632      	mov	r2, r6
 8019cb2:	4649      	mov	r1, r9
 8019cb4:	4640      	mov	r0, r8
 8019cb6:	47d0      	blx	sl
 8019cb8:	3001      	adds	r0, #1
 8019cba:	d09d      	beq.n	8019bf8 <_printf_i+0x160>
 8019cbc:	3501      	adds	r5, #1
 8019cbe:	68e3      	ldr	r3, [r4, #12]
 8019cc0:	9903      	ldr	r1, [sp, #12]
 8019cc2:	1a5b      	subs	r3, r3, r1
 8019cc4:	42ab      	cmp	r3, r5
 8019cc6:	dcf2      	bgt.n	8019cae <_printf_i+0x216>
 8019cc8:	e7eb      	b.n	8019ca2 <_printf_i+0x20a>
 8019cca:	2500      	movs	r5, #0
 8019ccc:	f104 0619 	add.w	r6, r4, #25
 8019cd0:	e7f5      	b.n	8019cbe <_printf_i+0x226>
 8019cd2:	bf00      	nop
 8019cd4:	0801f660 	.word	0x0801f660
 8019cd8:	0801f671 	.word	0x0801f671

08019cdc <std>:
 8019cdc:	2300      	movs	r3, #0
 8019cde:	b510      	push	{r4, lr}
 8019ce0:	4604      	mov	r4, r0
 8019ce2:	e9c0 3300 	strd	r3, r3, [r0]
 8019ce6:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8019cea:	6083      	str	r3, [r0, #8]
 8019cec:	8181      	strh	r1, [r0, #12]
 8019cee:	6643      	str	r3, [r0, #100]	; 0x64
 8019cf0:	81c2      	strh	r2, [r0, #14]
 8019cf2:	6183      	str	r3, [r0, #24]
 8019cf4:	4619      	mov	r1, r3
 8019cf6:	2208      	movs	r2, #8
 8019cf8:	305c      	adds	r0, #92	; 0x5c
 8019cfa:	f000 fa07 	bl	801a10c <memset>
 8019cfe:	4b0d      	ldr	r3, [pc, #52]	; (8019d34 <std+0x58>)
 8019d00:	6263      	str	r3, [r4, #36]	; 0x24
 8019d02:	4b0d      	ldr	r3, [pc, #52]	; (8019d38 <std+0x5c>)
 8019d04:	62a3      	str	r3, [r4, #40]	; 0x28
 8019d06:	4b0d      	ldr	r3, [pc, #52]	; (8019d3c <std+0x60>)
 8019d08:	62e3      	str	r3, [r4, #44]	; 0x2c
 8019d0a:	4b0d      	ldr	r3, [pc, #52]	; (8019d40 <std+0x64>)
 8019d0c:	6323      	str	r3, [r4, #48]	; 0x30
 8019d0e:	4b0d      	ldr	r3, [pc, #52]	; (8019d44 <std+0x68>)
 8019d10:	6224      	str	r4, [r4, #32]
 8019d12:	429c      	cmp	r4, r3
 8019d14:	d006      	beq.n	8019d24 <std+0x48>
 8019d16:	f103 0268 	add.w	r2, r3, #104	; 0x68
 8019d1a:	4294      	cmp	r4, r2
 8019d1c:	d002      	beq.n	8019d24 <std+0x48>
 8019d1e:	33d0      	adds	r3, #208	; 0xd0
 8019d20:	429c      	cmp	r4, r3
 8019d22:	d105      	bne.n	8019d30 <std+0x54>
 8019d24:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8019d28:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8019d2c:	f000 ba64 	b.w	801a1f8 <__retarget_lock_init_recursive>
 8019d30:	bd10      	pop	{r4, pc}
 8019d32:	bf00      	nop
 8019d34:	08019f3d 	.word	0x08019f3d
 8019d38:	08019f5f 	.word	0x08019f5f
 8019d3c:	08019f97 	.word	0x08019f97
 8019d40:	08019fbb 	.word	0x08019fbb
 8019d44:	20007230 	.word	0x20007230

08019d48 <stdio_exit_handler>:
 8019d48:	4a02      	ldr	r2, [pc, #8]	; (8019d54 <stdio_exit_handler+0xc>)
 8019d4a:	4903      	ldr	r1, [pc, #12]	; (8019d58 <stdio_exit_handler+0x10>)
 8019d4c:	4803      	ldr	r0, [pc, #12]	; (8019d5c <stdio_exit_handler+0x14>)
 8019d4e:	f000 b869 	b.w	8019e24 <_fwalk_sglue>
 8019d52:	bf00      	nop
 8019d54:	20000064 	.word	0x20000064
 8019d58:	0801bacd 	.word	0x0801bacd
 8019d5c:	20000070 	.word	0x20000070

08019d60 <cleanup_stdio>:
 8019d60:	6841      	ldr	r1, [r0, #4]
 8019d62:	4b0c      	ldr	r3, [pc, #48]	; (8019d94 <cleanup_stdio+0x34>)
 8019d64:	4299      	cmp	r1, r3
 8019d66:	b510      	push	{r4, lr}
 8019d68:	4604      	mov	r4, r0
 8019d6a:	d001      	beq.n	8019d70 <cleanup_stdio+0x10>
 8019d6c:	f001 feae 	bl	801bacc <_fflush_r>
 8019d70:	68a1      	ldr	r1, [r4, #8]
 8019d72:	4b09      	ldr	r3, [pc, #36]	; (8019d98 <cleanup_stdio+0x38>)
 8019d74:	4299      	cmp	r1, r3
 8019d76:	d002      	beq.n	8019d7e <cleanup_stdio+0x1e>
 8019d78:	4620      	mov	r0, r4
 8019d7a:	f001 fea7 	bl	801bacc <_fflush_r>
 8019d7e:	68e1      	ldr	r1, [r4, #12]
 8019d80:	4b06      	ldr	r3, [pc, #24]	; (8019d9c <cleanup_stdio+0x3c>)
 8019d82:	4299      	cmp	r1, r3
 8019d84:	d004      	beq.n	8019d90 <cleanup_stdio+0x30>
 8019d86:	4620      	mov	r0, r4
 8019d88:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8019d8c:	f001 be9e 	b.w	801bacc <_fflush_r>
 8019d90:	bd10      	pop	{r4, pc}
 8019d92:	bf00      	nop
 8019d94:	20007230 	.word	0x20007230
 8019d98:	20007298 	.word	0x20007298
 8019d9c:	20007300 	.word	0x20007300

08019da0 <global_stdio_init.part.0>:
 8019da0:	b510      	push	{r4, lr}
 8019da2:	4b0b      	ldr	r3, [pc, #44]	; (8019dd0 <global_stdio_init.part.0+0x30>)
 8019da4:	4c0b      	ldr	r4, [pc, #44]	; (8019dd4 <global_stdio_init.part.0+0x34>)
 8019da6:	4a0c      	ldr	r2, [pc, #48]	; (8019dd8 <global_stdio_init.part.0+0x38>)
 8019da8:	601a      	str	r2, [r3, #0]
 8019daa:	4620      	mov	r0, r4
 8019dac:	2200      	movs	r2, #0
 8019dae:	2104      	movs	r1, #4
 8019db0:	f7ff ff94 	bl	8019cdc <std>
 8019db4:	f104 0068 	add.w	r0, r4, #104	; 0x68
 8019db8:	2201      	movs	r2, #1
 8019dba:	2109      	movs	r1, #9
 8019dbc:	f7ff ff8e 	bl	8019cdc <std>
 8019dc0:	f104 00d0 	add.w	r0, r4, #208	; 0xd0
 8019dc4:	2202      	movs	r2, #2
 8019dc6:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8019dca:	2112      	movs	r1, #18
 8019dcc:	f7ff bf86 	b.w	8019cdc <std>
 8019dd0:	20007368 	.word	0x20007368
 8019dd4:	20007230 	.word	0x20007230
 8019dd8:	08019d49 	.word	0x08019d49

08019ddc <__sfp_lock_acquire>:
 8019ddc:	4801      	ldr	r0, [pc, #4]	; (8019de4 <__sfp_lock_acquire+0x8>)
 8019dde:	f000 ba0c 	b.w	801a1fa <__retarget_lock_acquire_recursive>
 8019de2:	bf00      	nop
 8019de4:	20007371 	.word	0x20007371

08019de8 <__sfp_lock_release>:
 8019de8:	4801      	ldr	r0, [pc, #4]	; (8019df0 <__sfp_lock_release+0x8>)
 8019dea:	f000 ba07 	b.w	801a1fc <__retarget_lock_release_recursive>
 8019dee:	bf00      	nop
 8019df0:	20007371 	.word	0x20007371

08019df4 <__sinit>:
 8019df4:	b510      	push	{r4, lr}
 8019df6:	4604      	mov	r4, r0
 8019df8:	f7ff fff0 	bl	8019ddc <__sfp_lock_acquire>
 8019dfc:	6a23      	ldr	r3, [r4, #32]
 8019dfe:	b11b      	cbz	r3, 8019e08 <__sinit+0x14>
 8019e00:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8019e04:	f7ff bff0 	b.w	8019de8 <__sfp_lock_release>
 8019e08:	4b04      	ldr	r3, [pc, #16]	; (8019e1c <__sinit+0x28>)
 8019e0a:	6223      	str	r3, [r4, #32]
 8019e0c:	4b04      	ldr	r3, [pc, #16]	; (8019e20 <__sinit+0x2c>)
 8019e0e:	681b      	ldr	r3, [r3, #0]
 8019e10:	2b00      	cmp	r3, #0
 8019e12:	d1f5      	bne.n	8019e00 <__sinit+0xc>
 8019e14:	f7ff ffc4 	bl	8019da0 <global_stdio_init.part.0>
 8019e18:	e7f2      	b.n	8019e00 <__sinit+0xc>
 8019e1a:	bf00      	nop
 8019e1c:	08019d61 	.word	0x08019d61
 8019e20:	20007368 	.word	0x20007368

08019e24 <_fwalk_sglue>:
 8019e24:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8019e28:	4607      	mov	r7, r0
 8019e2a:	4688      	mov	r8, r1
 8019e2c:	4614      	mov	r4, r2
 8019e2e:	2600      	movs	r6, #0
 8019e30:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8019e34:	f1b9 0901 	subs.w	r9, r9, #1
 8019e38:	d505      	bpl.n	8019e46 <_fwalk_sglue+0x22>
 8019e3a:	6824      	ldr	r4, [r4, #0]
 8019e3c:	2c00      	cmp	r4, #0
 8019e3e:	d1f7      	bne.n	8019e30 <_fwalk_sglue+0xc>
 8019e40:	4630      	mov	r0, r6
 8019e42:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8019e46:	89ab      	ldrh	r3, [r5, #12]
 8019e48:	2b01      	cmp	r3, #1
 8019e4a:	d907      	bls.n	8019e5c <_fwalk_sglue+0x38>
 8019e4c:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8019e50:	3301      	adds	r3, #1
 8019e52:	d003      	beq.n	8019e5c <_fwalk_sglue+0x38>
 8019e54:	4629      	mov	r1, r5
 8019e56:	4638      	mov	r0, r7
 8019e58:	47c0      	blx	r8
 8019e5a:	4306      	orrs	r6, r0
 8019e5c:	3568      	adds	r5, #104	; 0x68
 8019e5e:	e7e9      	b.n	8019e34 <_fwalk_sglue+0x10>

08019e60 <iprintf>:
 8019e60:	b40f      	push	{r0, r1, r2, r3}
 8019e62:	b507      	push	{r0, r1, r2, lr}
 8019e64:	4906      	ldr	r1, [pc, #24]	; (8019e80 <iprintf+0x20>)
 8019e66:	ab04      	add	r3, sp, #16
 8019e68:	6808      	ldr	r0, [r1, #0]
 8019e6a:	f853 2b04 	ldr.w	r2, [r3], #4
 8019e6e:	6881      	ldr	r1, [r0, #8]
 8019e70:	9301      	str	r3, [sp, #4]
 8019e72:	f001 fc8b 	bl	801b78c <_vfiprintf_r>
 8019e76:	b003      	add	sp, #12
 8019e78:	f85d eb04 	ldr.w	lr, [sp], #4
 8019e7c:	b004      	add	sp, #16
 8019e7e:	4770      	bx	lr
 8019e80:	200000bc 	.word	0x200000bc

08019e84 <_puts_r>:
 8019e84:	6a03      	ldr	r3, [r0, #32]
 8019e86:	b570      	push	{r4, r5, r6, lr}
 8019e88:	6884      	ldr	r4, [r0, #8]
 8019e8a:	4605      	mov	r5, r0
 8019e8c:	460e      	mov	r6, r1
 8019e8e:	b90b      	cbnz	r3, 8019e94 <_puts_r+0x10>
 8019e90:	f7ff ffb0 	bl	8019df4 <__sinit>
 8019e94:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8019e96:	07db      	lsls	r3, r3, #31
 8019e98:	d405      	bmi.n	8019ea6 <_puts_r+0x22>
 8019e9a:	89a3      	ldrh	r3, [r4, #12]
 8019e9c:	0598      	lsls	r0, r3, #22
 8019e9e:	d402      	bmi.n	8019ea6 <_puts_r+0x22>
 8019ea0:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8019ea2:	f000 f9aa 	bl	801a1fa <__retarget_lock_acquire_recursive>
 8019ea6:	89a3      	ldrh	r3, [r4, #12]
 8019ea8:	0719      	lsls	r1, r3, #28
 8019eaa:	d513      	bpl.n	8019ed4 <_puts_r+0x50>
 8019eac:	6923      	ldr	r3, [r4, #16]
 8019eae:	b18b      	cbz	r3, 8019ed4 <_puts_r+0x50>
 8019eb0:	3e01      	subs	r6, #1
 8019eb2:	68a3      	ldr	r3, [r4, #8]
 8019eb4:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 8019eb8:	3b01      	subs	r3, #1
 8019eba:	60a3      	str	r3, [r4, #8]
 8019ebc:	b9e9      	cbnz	r1, 8019efa <_puts_r+0x76>
 8019ebe:	2b00      	cmp	r3, #0
 8019ec0:	da2e      	bge.n	8019f20 <_puts_r+0x9c>
 8019ec2:	4622      	mov	r2, r4
 8019ec4:	210a      	movs	r1, #10
 8019ec6:	4628      	mov	r0, r5
 8019ec8:	f000 f87b 	bl	8019fc2 <__swbuf_r>
 8019ecc:	3001      	adds	r0, #1
 8019ece:	d007      	beq.n	8019ee0 <_puts_r+0x5c>
 8019ed0:	250a      	movs	r5, #10
 8019ed2:	e007      	b.n	8019ee4 <_puts_r+0x60>
 8019ed4:	4621      	mov	r1, r4
 8019ed6:	4628      	mov	r0, r5
 8019ed8:	f000 f8b0 	bl	801a03c <__swsetup_r>
 8019edc:	2800      	cmp	r0, #0
 8019ede:	d0e7      	beq.n	8019eb0 <_puts_r+0x2c>
 8019ee0:	f04f 35ff 	mov.w	r5, #4294967295
 8019ee4:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8019ee6:	07da      	lsls	r2, r3, #31
 8019ee8:	d405      	bmi.n	8019ef6 <_puts_r+0x72>
 8019eea:	89a3      	ldrh	r3, [r4, #12]
 8019eec:	059b      	lsls	r3, r3, #22
 8019eee:	d402      	bmi.n	8019ef6 <_puts_r+0x72>
 8019ef0:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8019ef2:	f000 f983 	bl	801a1fc <__retarget_lock_release_recursive>
 8019ef6:	4628      	mov	r0, r5
 8019ef8:	bd70      	pop	{r4, r5, r6, pc}
 8019efa:	2b00      	cmp	r3, #0
 8019efc:	da04      	bge.n	8019f08 <_puts_r+0x84>
 8019efe:	69a2      	ldr	r2, [r4, #24]
 8019f00:	429a      	cmp	r2, r3
 8019f02:	dc06      	bgt.n	8019f12 <_puts_r+0x8e>
 8019f04:	290a      	cmp	r1, #10
 8019f06:	d004      	beq.n	8019f12 <_puts_r+0x8e>
 8019f08:	6823      	ldr	r3, [r4, #0]
 8019f0a:	1c5a      	adds	r2, r3, #1
 8019f0c:	6022      	str	r2, [r4, #0]
 8019f0e:	7019      	strb	r1, [r3, #0]
 8019f10:	e7cf      	b.n	8019eb2 <_puts_r+0x2e>
 8019f12:	4622      	mov	r2, r4
 8019f14:	4628      	mov	r0, r5
 8019f16:	f000 f854 	bl	8019fc2 <__swbuf_r>
 8019f1a:	3001      	adds	r0, #1
 8019f1c:	d1c9      	bne.n	8019eb2 <_puts_r+0x2e>
 8019f1e:	e7df      	b.n	8019ee0 <_puts_r+0x5c>
 8019f20:	6823      	ldr	r3, [r4, #0]
 8019f22:	250a      	movs	r5, #10
 8019f24:	1c5a      	adds	r2, r3, #1
 8019f26:	6022      	str	r2, [r4, #0]
 8019f28:	701d      	strb	r5, [r3, #0]
 8019f2a:	e7db      	b.n	8019ee4 <_puts_r+0x60>

08019f2c <puts>:
 8019f2c:	4b02      	ldr	r3, [pc, #8]	; (8019f38 <puts+0xc>)
 8019f2e:	4601      	mov	r1, r0
 8019f30:	6818      	ldr	r0, [r3, #0]
 8019f32:	f7ff bfa7 	b.w	8019e84 <_puts_r>
 8019f36:	bf00      	nop
 8019f38:	200000bc 	.word	0x200000bc

08019f3c <__sread>:
 8019f3c:	b510      	push	{r4, lr}
 8019f3e:	460c      	mov	r4, r1
 8019f40:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8019f44:	f000 f910 	bl	801a168 <_read_r>
 8019f48:	2800      	cmp	r0, #0
 8019f4a:	bfab      	itete	ge
 8019f4c:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8019f4e:	89a3      	ldrhlt	r3, [r4, #12]
 8019f50:	181b      	addge	r3, r3, r0
 8019f52:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8019f56:	bfac      	ite	ge
 8019f58:	6563      	strge	r3, [r4, #84]	; 0x54
 8019f5a:	81a3      	strhlt	r3, [r4, #12]
 8019f5c:	bd10      	pop	{r4, pc}

08019f5e <__swrite>:
 8019f5e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8019f62:	461f      	mov	r7, r3
 8019f64:	898b      	ldrh	r3, [r1, #12]
 8019f66:	05db      	lsls	r3, r3, #23
 8019f68:	4605      	mov	r5, r0
 8019f6a:	460c      	mov	r4, r1
 8019f6c:	4616      	mov	r6, r2
 8019f6e:	d505      	bpl.n	8019f7c <__swrite+0x1e>
 8019f70:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8019f74:	2302      	movs	r3, #2
 8019f76:	2200      	movs	r2, #0
 8019f78:	f000 f8e4 	bl	801a144 <_lseek_r>
 8019f7c:	89a3      	ldrh	r3, [r4, #12]
 8019f7e:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8019f82:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8019f86:	81a3      	strh	r3, [r4, #12]
 8019f88:	4632      	mov	r2, r6
 8019f8a:	463b      	mov	r3, r7
 8019f8c:	4628      	mov	r0, r5
 8019f8e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8019f92:	f000 b8fb 	b.w	801a18c <_write_r>

08019f96 <__sseek>:
 8019f96:	b510      	push	{r4, lr}
 8019f98:	460c      	mov	r4, r1
 8019f9a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8019f9e:	f000 f8d1 	bl	801a144 <_lseek_r>
 8019fa2:	1c43      	adds	r3, r0, #1
 8019fa4:	89a3      	ldrh	r3, [r4, #12]
 8019fa6:	bf15      	itete	ne
 8019fa8:	6560      	strne	r0, [r4, #84]	; 0x54
 8019faa:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8019fae:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8019fb2:	81a3      	strheq	r3, [r4, #12]
 8019fb4:	bf18      	it	ne
 8019fb6:	81a3      	strhne	r3, [r4, #12]
 8019fb8:	bd10      	pop	{r4, pc}

08019fba <__sclose>:
 8019fba:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8019fbe:	f000 b8b1 	b.w	801a124 <_close_r>

08019fc2 <__swbuf_r>:
 8019fc2:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8019fc4:	460e      	mov	r6, r1
 8019fc6:	4614      	mov	r4, r2
 8019fc8:	4605      	mov	r5, r0
 8019fca:	b118      	cbz	r0, 8019fd4 <__swbuf_r+0x12>
 8019fcc:	6a03      	ldr	r3, [r0, #32]
 8019fce:	b90b      	cbnz	r3, 8019fd4 <__swbuf_r+0x12>
 8019fd0:	f7ff ff10 	bl	8019df4 <__sinit>
 8019fd4:	69a3      	ldr	r3, [r4, #24]
 8019fd6:	60a3      	str	r3, [r4, #8]
 8019fd8:	89a3      	ldrh	r3, [r4, #12]
 8019fda:	071a      	lsls	r2, r3, #28
 8019fdc:	d525      	bpl.n	801a02a <__swbuf_r+0x68>
 8019fde:	6923      	ldr	r3, [r4, #16]
 8019fe0:	b31b      	cbz	r3, 801a02a <__swbuf_r+0x68>
 8019fe2:	6823      	ldr	r3, [r4, #0]
 8019fe4:	6922      	ldr	r2, [r4, #16]
 8019fe6:	1a98      	subs	r0, r3, r2
 8019fe8:	6963      	ldr	r3, [r4, #20]
 8019fea:	b2f6      	uxtb	r6, r6
 8019fec:	4283      	cmp	r3, r0
 8019fee:	4637      	mov	r7, r6
 8019ff0:	dc04      	bgt.n	8019ffc <__swbuf_r+0x3a>
 8019ff2:	4621      	mov	r1, r4
 8019ff4:	4628      	mov	r0, r5
 8019ff6:	f001 fd69 	bl	801bacc <_fflush_r>
 8019ffa:	b9e0      	cbnz	r0, 801a036 <__swbuf_r+0x74>
 8019ffc:	68a3      	ldr	r3, [r4, #8]
 8019ffe:	3b01      	subs	r3, #1
 801a000:	60a3      	str	r3, [r4, #8]
 801a002:	6823      	ldr	r3, [r4, #0]
 801a004:	1c5a      	adds	r2, r3, #1
 801a006:	6022      	str	r2, [r4, #0]
 801a008:	701e      	strb	r6, [r3, #0]
 801a00a:	6962      	ldr	r2, [r4, #20]
 801a00c:	1c43      	adds	r3, r0, #1
 801a00e:	429a      	cmp	r2, r3
 801a010:	d004      	beq.n	801a01c <__swbuf_r+0x5a>
 801a012:	89a3      	ldrh	r3, [r4, #12]
 801a014:	07db      	lsls	r3, r3, #31
 801a016:	d506      	bpl.n	801a026 <__swbuf_r+0x64>
 801a018:	2e0a      	cmp	r6, #10
 801a01a:	d104      	bne.n	801a026 <__swbuf_r+0x64>
 801a01c:	4621      	mov	r1, r4
 801a01e:	4628      	mov	r0, r5
 801a020:	f001 fd54 	bl	801bacc <_fflush_r>
 801a024:	b938      	cbnz	r0, 801a036 <__swbuf_r+0x74>
 801a026:	4638      	mov	r0, r7
 801a028:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801a02a:	4621      	mov	r1, r4
 801a02c:	4628      	mov	r0, r5
 801a02e:	f000 f805 	bl	801a03c <__swsetup_r>
 801a032:	2800      	cmp	r0, #0
 801a034:	d0d5      	beq.n	8019fe2 <__swbuf_r+0x20>
 801a036:	f04f 37ff 	mov.w	r7, #4294967295
 801a03a:	e7f4      	b.n	801a026 <__swbuf_r+0x64>

0801a03c <__swsetup_r>:
 801a03c:	b538      	push	{r3, r4, r5, lr}
 801a03e:	4b2a      	ldr	r3, [pc, #168]	; (801a0e8 <__swsetup_r+0xac>)
 801a040:	4605      	mov	r5, r0
 801a042:	6818      	ldr	r0, [r3, #0]
 801a044:	460c      	mov	r4, r1
 801a046:	b118      	cbz	r0, 801a050 <__swsetup_r+0x14>
 801a048:	6a03      	ldr	r3, [r0, #32]
 801a04a:	b90b      	cbnz	r3, 801a050 <__swsetup_r+0x14>
 801a04c:	f7ff fed2 	bl	8019df4 <__sinit>
 801a050:	89a3      	ldrh	r3, [r4, #12]
 801a052:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 801a056:	0718      	lsls	r0, r3, #28
 801a058:	d422      	bmi.n	801a0a0 <__swsetup_r+0x64>
 801a05a:	06d9      	lsls	r1, r3, #27
 801a05c:	d407      	bmi.n	801a06e <__swsetup_r+0x32>
 801a05e:	2309      	movs	r3, #9
 801a060:	602b      	str	r3, [r5, #0]
 801a062:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 801a066:	81a3      	strh	r3, [r4, #12]
 801a068:	f04f 30ff 	mov.w	r0, #4294967295
 801a06c:	e034      	b.n	801a0d8 <__swsetup_r+0x9c>
 801a06e:	0758      	lsls	r0, r3, #29
 801a070:	d512      	bpl.n	801a098 <__swsetup_r+0x5c>
 801a072:	6b61      	ldr	r1, [r4, #52]	; 0x34
 801a074:	b141      	cbz	r1, 801a088 <__swsetup_r+0x4c>
 801a076:	f104 0344 	add.w	r3, r4, #68	; 0x44
 801a07a:	4299      	cmp	r1, r3
 801a07c:	d002      	beq.n	801a084 <__swsetup_r+0x48>
 801a07e:	4628      	mov	r0, r5
 801a080:	f000 fede 	bl	801ae40 <_free_r>
 801a084:	2300      	movs	r3, #0
 801a086:	6363      	str	r3, [r4, #52]	; 0x34
 801a088:	89a3      	ldrh	r3, [r4, #12]
 801a08a:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 801a08e:	81a3      	strh	r3, [r4, #12]
 801a090:	2300      	movs	r3, #0
 801a092:	6063      	str	r3, [r4, #4]
 801a094:	6923      	ldr	r3, [r4, #16]
 801a096:	6023      	str	r3, [r4, #0]
 801a098:	89a3      	ldrh	r3, [r4, #12]
 801a09a:	f043 0308 	orr.w	r3, r3, #8
 801a09e:	81a3      	strh	r3, [r4, #12]
 801a0a0:	6923      	ldr	r3, [r4, #16]
 801a0a2:	b94b      	cbnz	r3, 801a0b8 <__swsetup_r+0x7c>
 801a0a4:	89a3      	ldrh	r3, [r4, #12]
 801a0a6:	f403 7320 	and.w	r3, r3, #640	; 0x280
 801a0aa:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 801a0ae:	d003      	beq.n	801a0b8 <__swsetup_r+0x7c>
 801a0b0:	4621      	mov	r1, r4
 801a0b2:	4628      	mov	r0, r5
 801a0b4:	f001 fd6a 	bl	801bb8c <__smakebuf_r>
 801a0b8:	89a0      	ldrh	r0, [r4, #12]
 801a0ba:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 801a0be:	f010 0301 	ands.w	r3, r0, #1
 801a0c2:	d00a      	beq.n	801a0da <__swsetup_r+0x9e>
 801a0c4:	2300      	movs	r3, #0
 801a0c6:	60a3      	str	r3, [r4, #8]
 801a0c8:	6963      	ldr	r3, [r4, #20]
 801a0ca:	425b      	negs	r3, r3
 801a0cc:	61a3      	str	r3, [r4, #24]
 801a0ce:	6923      	ldr	r3, [r4, #16]
 801a0d0:	b943      	cbnz	r3, 801a0e4 <__swsetup_r+0xa8>
 801a0d2:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 801a0d6:	d1c4      	bne.n	801a062 <__swsetup_r+0x26>
 801a0d8:	bd38      	pop	{r3, r4, r5, pc}
 801a0da:	0781      	lsls	r1, r0, #30
 801a0dc:	bf58      	it	pl
 801a0de:	6963      	ldrpl	r3, [r4, #20]
 801a0e0:	60a3      	str	r3, [r4, #8]
 801a0e2:	e7f4      	b.n	801a0ce <__swsetup_r+0x92>
 801a0e4:	2000      	movs	r0, #0
 801a0e6:	e7f7      	b.n	801a0d8 <__swsetup_r+0x9c>
 801a0e8:	200000bc 	.word	0x200000bc

0801a0ec <memcmp>:
 801a0ec:	b510      	push	{r4, lr}
 801a0ee:	3901      	subs	r1, #1
 801a0f0:	4402      	add	r2, r0
 801a0f2:	4290      	cmp	r0, r2
 801a0f4:	d101      	bne.n	801a0fa <memcmp+0xe>
 801a0f6:	2000      	movs	r0, #0
 801a0f8:	e005      	b.n	801a106 <memcmp+0x1a>
 801a0fa:	7803      	ldrb	r3, [r0, #0]
 801a0fc:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 801a100:	42a3      	cmp	r3, r4
 801a102:	d001      	beq.n	801a108 <memcmp+0x1c>
 801a104:	1b18      	subs	r0, r3, r4
 801a106:	bd10      	pop	{r4, pc}
 801a108:	3001      	adds	r0, #1
 801a10a:	e7f2      	b.n	801a0f2 <memcmp+0x6>

0801a10c <memset>:
 801a10c:	4402      	add	r2, r0
 801a10e:	4603      	mov	r3, r0
 801a110:	4293      	cmp	r3, r2
 801a112:	d100      	bne.n	801a116 <memset+0xa>
 801a114:	4770      	bx	lr
 801a116:	f803 1b01 	strb.w	r1, [r3], #1
 801a11a:	e7f9      	b.n	801a110 <memset+0x4>

0801a11c <_localeconv_r>:
 801a11c:	4800      	ldr	r0, [pc, #0]	; (801a120 <_localeconv_r+0x4>)
 801a11e:	4770      	bx	lr
 801a120:	200001b0 	.word	0x200001b0

0801a124 <_close_r>:
 801a124:	b538      	push	{r3, r4, r5, lr}
 801a126:	4d06      	ldr	r5, [pc, #24]	; (801a140 <_close_r+0x1c>)
 801a128:	2300      	movs	r3, #0
 801a12a:	4604      	mov	r4, r0
 801a12c:	4608      	mov	r0, r1
 801a12e:	602b      	str	r3, [r5, #0]
 801a130:	f7e9 fc3f 	bl	80039b2 <_close>
 801a134:	1c43      	adds	r3, r0, #1
 801a136:	d102      	bne.n	801a13e <_close_r+0x1a>
 801a138:	682b      	ldr	r3, [r5, #0]
 801a13a:	b103      	cbz	r3, 801a13e <_close_r+0x1a>
 801a13c:	6023      	str	r3, [r4, #0]
 801a13e:	bd38      	pop	{r3, r4, r5, pc}
 801a140:	2000736c 	.word	0x2000736c

0801a144 <_lseek_r>:
 801a144:	b538      	push	{r3, r4, r5, lr}
 801a146:	4d07      	ldr	r5, [pc, #28]	; (801a164 <_lseek_r+0x20>)
 801a148:	4604      	mov	r4, r0
 801a14a:	4608      	mov	r0, r1
 801a14c:	4611      	mov	r1, r2
 801a14e:	2200      	movs	r2, #0
 801a150:	602a      	str	r2, [r5, #0]
 801a152:	461a      	mov	r2, r3
 801a154:	f7e9 fc54 	bl	8003a00 <_lseek>
 801a158:	1c43      	adds	r3, r0, #1
 801a15a:	d102      	bne.n	801a162 <_lseek_r+0x1e>
 801a15c:	682b      	ldr	r3, [r5, #0]
 801a15e:	b103      	cbz	r3, 801a162 <_lseek_r+0x1e>
 801a160:	6023      	str	r3, [r4, #0]
 801a162:	bd38      	pop	{r3, r4, r5, pc}
 801a164:	2000736c 	.word	0x2000736c

0801a168 <_read_r>:
 801a168:	b538      	push	{r3, r4, r5, lr}
 801a16a:	4d07      	ldr	r5, [pc, #28]	; (801a188 <_read_r+0x20>)
 801a16c:	4604      	mov	r4, r0
 801a16e:	4608      	mov	r0, r1
 801a170:	4611      	mov	r1, r2
 801a172:	2200      	movs	r2, #0
 801a174:	602a      	str	r2, [r5, #0]
 801a176:	461a      	mov	r2, r3
 801a178:	f7e9 fbe2 	bl	8003940 <_read>
 801a17c:	1c43      	adds	r3, r0, #1
 801a17e:	d102      	bne.n	801a186 <_read_r+0x1e>
 801a180:	682b      	ldr	r3, [r5, #0]
 801a182:	b103      	cbz	r3, 801a186 <_read_r+0x1e>
 801a184:	6023      	str	r3, [r4, #0]
 801a186:	bd38      	pop	{r3, r4, r5, pc}
 801a188:	2000736c 	.word	0x2000736c

0801a18c <_write_r>:
 801a18c:	b538      	push	{r3, r4, r5, lr}
 801a18e:	4d07      	ldr	r5, [pc, #28]	; (801a1ac <_write_r+0x20>)
 801a190:	4604      	mov	r4, r0
 801a192:	4608      	mov	r0, r1
 801a194:	4611      	mov	r1, r2
 801a196:	2200      	movs	r2, #0
 801a198:	602a      	str	r2, [r5, #0]
 801a19a:	461a      	mov	r2, r3
 801a19c:	f7e9 fbed 	bl	800397a <_write>
 801a1a0:	1c43      	adds	r3, r0, #1
 801a1a2:	d102      	bne.n	801a1aa <_write_r+0x1e>
 801a1a4:	682b      	ldr	r3, [r5, #0]
 801a1a6:	b103      	cbz	r3, 801a1aa <_write_r+0x1e>
 801a1a8:	6023      	str	r3, [r4, #0]
 801a1aa:	bd38      	pop	{r3, r4, r5, pc}
 801a1ac:	2000736c 	.word	0x2000736c

0801a1b0 <__libc_init_array>:
 801a1b0:	b570      	push	{r4, r5, r6, lr}
 801a1b2:	4d0d      	ldr	r5, [pc, #52]	; (801a1e8 <__libc_init_array+0x38>)
 801a1b4:	4c0d      	ldr	r4, [pc, #52]	; (801a1ec <__libc_init_array+0x3c>)
 801a1b6:	1b64      	subs	r4, r4, r5
 801a1b8:	10a4      	asrs	r4, r4, #2
 801a1ba:	2600      	movs	r6, #0
 801a1bc:	42a6      	cmp	r6, r4
 801a1be:	d109      	bne.n	801a1d4 <__libc_init_array+0x24>
 801a1c0:	4d0b      	ldr	r5, [pc, #44]	; (801a1f0 <__libc_init_array+0x40>)
 801a1c2:	4c0c      	ldr	r4, [pc, #48]	; (801a1f4 <__libc_init_array+0x44>)
 801a1c4:	f001 fdd0 	bl	801bd68 <_init>
 801a1c8:	1b64      	subs	r4, r4, r5
 801a1ca:	10a4      	asrs	r4, r4, #2
 801a1cc:	2600      	movs	r6, #0
 801a1ce:	42a6      	cmp	r6, r4
 801a1d0:	d105      	bne.n	801a1de <__libc_init_array+0x2e>
 801a1d2:	bd70      	pop	{r4, r5, r6, pc}
 801a1d4:	f855 3b04 	ldr.w	r3, [r5], #4
 801a1d8:	4798      	blx	r3
 801a1da:	3601      	adds	r6, #1
 801a1dc:	e7ee      	b.n	801a1bc <__libc_init_array+0xc>
 801a1de:	f855 3b04 	ldr.w	r3, [r5], #4
 801a1e2:	4798      	blx	r3
 801a1e4:	3601      	adds	r6, #1
 801a1e6:	e7f2      	b.n	801a1ce <__libc_init_array+0x1e>
 801a1e8:	0801f8b0 	.word	0x0801f8b0
 801a1ec:	0801f8b0 	.word	0x0801f8b0
 801a1f0:	0801f8b0 	.word	0x0801f8b0
 801a1f4:	0801f8b4 	.word	0x0801f8b4

0801a1f8 <__retarget_lock_init_recursive>:
 801a1f8:	4770      	bx	lr

0801a1fa <__retarget_lock_acquire_recursive>:
 801a1fa:	4770      	bx	lr

0801a1fc <__retarget_lock_release_recursive>:
 801a1fc:	4770      	bx	lr

0801a1fe <memcpy>:
 801a1fe:	440a      	add	r2, r1
 801a200:	4291      	cmp	r1, r2
 801a202:	f100 33ff 	add.w	r3, r0, #4294967295
 801a206:	d100      	bne.n	801a20a <memcpy+0xc>
 801a208:	4770      	bx	lr
 801a20a:	b510      	push	{r4, lr}
 801a20c:	f811 4b01 	ldrb.w	r4, [r1], #1
 801a210:	f803 4f01 	strb.w	r4, [r3, #1]!
 801a214:	4291      	cmp	r1, r2
 801a216:	d1f9      	bne.n	801a20c <memcpy+0xe>
 801a218:	bd10      	pop	{r4, pc}
	...

0801a21c <__assert_func>:
 801a21c:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 801a21e:	4614      	mov	r4, r2
 801a220:	461a      	mov	r2, r3
 801a222:	4b09      	ldr	r3, [pc, #36]	; (801a248 <__assert_func+0x2c>)
 801a224:	681b      	ldr	r3, [r3, #0]
 801a226:	4605      	mov	r5, r0
 801a228:	68d8      	ldr	r0, [r3, #12]
 801a22a:	b14c      	cbz	r4, 801a240 <__assert_func+0x24>
 801a22c:	4b07      	ldr	r3, [pc, #28]	; (801a24c <__assert_func+0x30>)
 801a22e:	9100      	str	r1, [sp, #0]
 801a230:	e9cd 3401 	strd	r3, r4, [sp, #4]
 801a234:	4906      	ldr	r1, [pc, #24]	; (801a250 <__assert_func+0x34>)
 801a236:	462b      	mov	r3, r5
 801a238:	f001 fc70 	bl	801bb1c <fiprintf>
 801a23c:	f001 fd14 	bl	801bc68 <abort>
 801a240:	4b04      	ldr	r3, [pc, #16]	; (801a254 <__assert_func+0x38>)
 801a242:	461c      	mov	r4, r3
 801a244:	e7f3      	b.n	801a22e <__assert_func+0x12>
 801a246:	bf00      	nop
 801a248:	200000bc 	.word	0x200000bc
 801a24c:	0801f682 	.word	0x0801f682
 801a250:	0801f68f 	.word	0x0801f68f
 801a254:	0801f6bd 	.word	0x0801f6bd

0801a258 <quorem>:
 801a258:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801a25c:	6903      	ldr	r3, [r0, #16]
 801a25e:	690c      	ldr	r4, [r1, #16]
 801a260:	42a3      	cmp	r3, r4
 801a262:	4607      	mov	r7, r0
 801a264:	db7e      	blt.n	801a364 <quorem+0x10c>
 801a266:	3c01      	subs	r4, #1
 801a268:	f101 0814 	add.w	r8, r1, #20
 801a26c:	f100 0514 	add.w	r5, r0, #20
 801a270:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 801a274:	9301      	str	r3, [sp, #4]
 801a276:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 801a27a:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 801a27e:	3301      	adds	r3, #1
 801a280:	429a      	cmp	r2, r3
 801a282:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 801a286:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 801a28a:	fbb2 f6f3 	udiv	r6, r2, r3
 801a28e:	d331      	bcc.n	801a2f4 <quorem+0x9c>
 801a290:	f04f 0e00 	mov.w	lr, #0
 801a294:	4640      	mov	r0, r8
 801a296:	46ac      	mov	ip, r5
 801a298:	46f2      	mov	sl, lr
 801a29a:	f850 2b04 	ldr.w	r2, [r0], #4
 801a29e:	b293      	uxth	r3, r2
 801a2a0:	fb06 e303 	mla	r3, r6, r3, lr
 801a2a4:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 801a2a8:	0c1a      	lsrs	r2, r3, #16
 801a2aa:	b29b      	uxth	r3, r3
 801a2ac:	ebaa 0303 	sub.w	r3, sl, r3
 801a2b0:	f8dc a000 	ldr.w	sl, [ip]
 801a2b4:	fa13 f38a 	uxtah	r3, r3, sl
 801a2b8:	fb06 220e 	mla	r2, r6, lr, r2
 801a2bc:	9300      	str	r3, [sp, #0]
 801a2be:	9b00      	ldr	r3, [sp, #0]
 801a2c0:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 801a2c4:	b292      	uxth	r2, r2
 801a2c6:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 801a2ca:	eb02 4223 	add.w	r2, r2, r3, asr #16
 801a2ce:	f8bd 3000 	ldrh.w	r3, [sp]
 801a2d2:	4581      	cmp	r9, r0
 801a2d4:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 801a2d8:	f84c 3b04 	str.w	r3, [ip], #4
 801a2dc:	ea4f 4a22 	mov.w	sl, r2, asr #16
 801a2e0:	d2db      	bcs.n	801a29a <quorem+0x42>
 801a2e2:	f855 300b 	ldr.w	r3, [r5, fp]
 801a2e6:	b92b      	cbnz	r3, 801a2f4 <quorem+0x9c>
 801a2e8:	9b01      	ldr	r3, [sp, #4]
 801a2ea:	3b04      	subs	r3, #4
 801a2ec:	429d      	cmp	r5, r3
 801a2ee:	461a      	mov	r2, r3
 801a2f0:	d32c      	bcc.n	801a34c <quorem+0xf4>
 801a2f2:	613c      	str	r4, [r7, #16]
 801a2f4:	4638      	mov	r0, r7
 801a2f6:	f001 f91f 	bl	801b538 <__mcmp>
 801a2fa:	2800      	cmp	r0, #0
 801a2fc:	db22      	blt.n	801a344 <quorem+0xec>
 801a2fe:	3601      	adds	r6, #1
 801a300:	4629      	mov	r1, r5
 801a302:	2000      	movs	r0, #0
 801a304:	f858 2b04 	ldr.w	r2, [r8], #4
 801a308:	f8d1 c000 	ldr.w	ip, [r1]
 801a30c:	b293      	uxth	r3, r2
 801a30e:	1ac3      	subs	r3, r0, r3
 801a310:	0c12      	lsrs	r2, r2, #16
 801a312:	fa13 f38c 	uxtah	r3, r3, ip
 801a316:	ebc2 421c 	rsb	r2, r2, ip, lsr #16
 801a31a:	eb02 4223 	add.w	r2, r2, r3, asr #16
 801a31e:	b29b      	uxth	r3, r3
 801a320:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 801a324:	45c1      	cmp	r9, r8
 801a326:	f841 3b04 	str.w	r3, [r1], #4
 801a32a:	ea4f 4022 	mov.w	r0, r2, asr #16
 801a32e:	d2e9      	bcs.n	801a304 <quorem+0xac>
 801a330:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 801a334:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 801a338:	b922      	cbnz	r2, 801a344 <quorem+0xec>
 801a33a:	3b04      	subs	r3, #4
 801a33c:	429d      	cmp	r5, r3
 801a33e:	461a      	mov	r2, r3
 801a340:	d30a      	bcc.n	801a358 <quorem+0x100>
 801a342:	613c      	str	r4, [r7, #16]
 801a344:	4630      	mov	r0, r6
 801a346:	b003      	add	sp, #12
 801a348:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801a34c:	6812      	ldr	r2, [r2, #0]
 801a34e:	3b04      	subs	r3, #4
 801a350:	2a00      	cmp	r2, #0
 801a352:	d1ce      	bne.n	801a2f2 <quorem+0x9a>
 801a354:	3c01      	subs	r4, #1
 801a356:	e7c9      	b.n	801a2ec <quorem+0x94>
 801a358:	6812      	ldr	r2, [r2, #0]
 801a35a:	3b04      	subs	r3, #4
 801a35c:	2a00      	cmp	r2, #0
 801a35e:	d1f0      	bne.n	801a342 <quorem+0xea>
 801a360:	3c01      	subs	r4, #1
 801a362:	e7eb      	b.n	801a33c <quorem+0xe4>
 801a364:	2000      	movs	r0, #0
 801a366:	e7ee      	b.n	801a346 <quorem+0xee>

0801a368 <_dtoa_r>:
 801a368:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801a36c:	ed2d 8b02 	vpush	{d8}
 801a370:	69c5      	ldr	r5, [r0, #28]
 801a372:	b091      	sub	sp, #68	; 0x44
 801a374:	ed8d 0b02 	vstr	d0, [sp, #8]
 801a378:	ec59 8b10 	vmov	r8, r9, d0
 801a37c:	9c1c      	ldr	r4, [sp, #112]	; 0x70
 801a37e:	9106      	str	r1, [sp, #24]
 801a380:	4606      	mov	r6, r0
 801a382:	9208      	str	r2, [sp, #32]
 801a384:	930c      	str	r3, [sp, #48]	; 0x30
 801a386:	b975      	cbnz	r5, 801a3a6 <_dtoa_r+0x3e>
 801a388:	2010      	movs	r0, #16
 801a38a:	f000 fda5 	bl	801aed8 <malloc>
 801a38e:	4602      	mov	r2, r0
 801a390:	61f0      	str	r0, [r6, #28]
 801a392:	b920      	cbnz	r0, 801a39e <_dtoa_r+0x36>
 801a394:	4ba6      	ldr	r3, [pc, #664]	; (801a630 <_dtoa_r+0x2c8>)
 801a396:	21ef      	movs	r1, #239	; 0xef
 801a398:	48a6      	ldr	r0, [pc, #664]	; (801a634 <_dtoa_r+0x2cc>)
 801a39a:	f7ff ff3f 	bl	801a21c <__assert_func>
 801a39e:	e9c0 5501 	strd	r5, r5, [r0, #4]
 801a3a2:	6005      	str	r5, [r0, #0]
 801a3a4:	60c5      	str	r5, [r0, #12]
 801a3a6:	69f3      	ldr	r3, [r6, #28]
 801a3a8:	6819      	ldr	r1, [r3, #0]
 801a3aa:	b151      	cbz	r1, 801a3c2 <_dtoa_r+0x5a>
 801a3ac:	685a      	ldr	r2, [r3, #4]
 801a3ae:	604a      	str	r2, [r1, #4]
 801a3b0:	2301      	movs	r3, #1
 801a3b2:	4093      	lsls	r3, r2
 801a3b4:	608b      	str	r3, [r1, #8]
 801a3b6:	4630      	mov	r0, r6
 801a3b8:	f000 fe82 	bl	801b0c0 <_Bfree>
 801a3bc:	69f3      	ldr	r3, [r6, #28]
 801a3be:	2200      	movs	r2, #0
 801a3c0:	601a      	str	r2, [r3, #0]
 801a3c2:	f1b9 0300 	subs.w	r3, r9, #0
 801a3c6:	bfbb      	ittet	lt
 801a3c8:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 801a3cc:	9303      	strlt	r3, [sp, #12]
 801a3ce:	2300      	movge	r3, #0
 801a3d0:	2201      	movlt	r2, #1
 801a3d2:	bfac      	ite	ge
 801a3d4:	6023      	strge	r3, [r4, #0]
 801a3d6:	6022      	strlt	r2, [r4, #0]
 801a3d8:	4b97      	ldr	r3, [pc, #604]	; (801a638 <_dtoa_r+0x2d0>)
 801a3da:	9c03      	ldr	r4, [sp, #12]
 801a3dc:	43a3      	bics	r3, r4
 801a3de:	d11c      	bne.n	801a41a <_dtoa_r+0xb2>
 801a3e0:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 801a3e2:	f242 730f 	movw	r3, #9999	; 0x270f
 801a3e6:	6013      	str	r3, [r2, #0]
 801a3e8:	f3c4 0313 	ubfx	r3, r4, #0, #20
 801a3ec:	ea53 0308 	orrs.w	r3, r3, r8
 801a3f0:	f000 84fb 	beq.w	801adea <_dtoa_r+0xa82>
 801a3f4:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 801a3f6:	b963      	cbnz	r3, 801a412 <_dtoa_r+0xaa>
 801a3f8:	4b90      	ldr	r3, [pc, #576]	; (801a63c <_dtoa_r+0x2d4>)
 801a3fa:	e020      	b.n	801a43e <_dtoa_r+0xd6>
 801a3fc:	4b90      	ldr	r3, [pc, #576]	; (801a640 <_dtoa_r+0x2d8>)
 801a3fe:	9301      	str	r3, [sp, #4]
 801a400:	3308      	adds	r3, #8
 801a402:	9a1d      	ldr	r2, [sp, #116]	; 0x74
 801a404:	6013      	str	r3, [r2, #0]
 801a406:	9801      	ldr	r0, [sp, #4]
 801a408:	b011      	add	sp, #68	; 0x44
 801a40a:	ecbd 8b02 	vpop	{d8}
 801a40e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801a412:	4b8a      	ldr	r3, [pc, #552]	; (801a63c <_dtoa_r+0x2d4>)
 801a414:	9301      	str	r3, [sp, #4]
 801a416:	3303      	adds	r3, #3
 801a418:	e7f3      	b.n	801a402 <_dtoa_r+0x9a>
 801a41a:	ed9d 8b02 	vldr	d8, [sp, #8]
 801a41e:	eeb5 8b40 	vcmp.f64	d8, #0.0
 801a422:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801a426:	d10c      	bne.n	801a442 <_dtoa_r+0xda>
 801a428:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 801a42a:	2301      	movs	r3, #1
 801a42c:	6013      	str	r3, [r2, #0]
 801a42e:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 801a430:	2b00      	cmp	r3, #0
 801a432:	f000 84d7 	beq.w	801ade4 <_dtoa_r+0xa7c>
 801a436:	4b83      	ldr	r3, [pc, #524]	; (801a644 <_dtoa_r+0x2dc>)
 801a438:	9a1d      	ldr	r2, [sp, #116]	; 0x74
 801a43a:	6013      	str	r3, [r2, #0]
 801a43c:	3b01      	subs	r3, #1
 801a43e:	9301      	str	r3, [sp, #4]
 801a440:	e7e1      	b.n	801a406 <_dtoa_r+0x9e>
 801a442:	aa0e      	add	r2, sp, #56	; 0x38
 801a444:	a90f      	add	r1, sp, #60	; 0x3c
 801a446:	4630      	mov	r0, r6
 801a448:	eeb0 0b48 	vmov.f64	d0, d8
 801a44c:	f001 f91a 	bl	801b684 <__d2b>
 801a450:	f3c4 530a 	ubfx	r3, r4, #20, #11
 801a454:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 801a456:	4605      	mov	r5, r0
 801a458:	2b00      	cmp	r3, #0
 801a45a:	d046      	beq.n	801a4ea <_dtoa_r+0x182>
 801a45c:	eeb0 7b48 	vmov.f64	d7, d8
 801a460:	ee18 1a90 	vmov	r1, s17
 801a464:	f3c1 0113 	ubfx	r1, r1, #0, #20
 801a468:	f041 517f 	orr.w	r1, r1, #1069547520	; 0x3fc00000
 801a46c:	f441 1140 	orr.w	r1, r1, #3145728	; 0x300000
 801a470:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
 801a474:	2000      	movs	r0, #0
 801a476:	ee07 1a90 	vmov	s15, r1
 801a47a:	eeb7 6b08 	vmov.f64	d6, #120	; 0x3fc00000  1.5
 801a47e:	ed9f 5b66 	vldr	d5, [pc, #408]	; 801a618 <_dtoa_r+0x2b0>
 801a482:	ee37 7b46 	vsub.f64	d7, d7, d6
 801a486:	ed9f 6b66 	vldr	d6, [pc, #408]	; 801a620 <_dtoa_r+0x2b8>
 801a48a:	eea7 6b05 	vfma.f64	d6, d7, d5
 801a48e:	ed9f 5b66 	vldr	d5, [pc, #408]	; 801a628 <_dtoa_r+0x2c0>
 801a492:	ee07 3a90 	vmov	s15, r3
 801a496:	eeb8 4be7 	vcvt.f64.s32	d4, s15
 801a49a:	eeb0 7b46 	vmov.f64	d7, d6
 801a49e:	eea4 7b05 	vfma.f64	d7, d4, d5
 801a4a2:	eefd 6bc7 	vcvt.s32.f64	s13, d7
 801a4a6:	eeb5 7bc0 	vcmpe.f64	d7, #0.0
 801a4aa:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801a4ae:	ee16 ba90 	vmov	fp, s13
 801a4b2:	9009      	str	r0, [sp, #36]	; 0x24
 801a4b4:	d508      	bpl.n	801a4c8 <_dtoa_r+0x160>
 801a4b6:	eeb8 6be6 	vcvt.f64.s32	d6, s13
 801a4ba:	eeb4 6b47 	vcmp.f64	d6, d7
 801a4be:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801a4c2:	bf18      	it	ne
 801a4c4:	f10b 3bff 	addne.w	fp, fp, #4294967295
 801a4c8:	f1bb 0f16 	cmp.w	fp, #22
 801a4cc:	d82b      	bhi.n	801a526 <_dtoa_r+0x1be>
 801a4ce:	495e      	ldr	r1, [pc, #376]	; (801a648 <_dtoa_r+0x2e0>)
 801a4d0:	eb01 01cb 	add.w	r1, r1, fp, lsl #3
 801a4d4:	ed91 7b00 	vldr	d7, [r1]
 801a4d8:	eeb4 8bc7 	vcmpe.f64	d8, d7
 801a4dc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801a4e0:	d501      	bpl.n	801a4e6 <_dtoa_r+0x17e>
 801a4e2:	f10b 3bff 	add.w	fp, fp, #4294967295
 801a4e6:	2100      	movs	r1, #0
 801a4e8:	e01e      	b.n	801a528 <_dtoa_r+0x1c0>
 801a4ea:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 801a4ec:	4413      	add	r3, r2
 801a4ee:	f203 4132 	addw	r1, r3, #1074	; 0x432
 801a4f2:	2920      	cmp	r1, #32
 801a4f4:	bfc1      	itttt	gt
 801a4f6:	f1c1 0140 	rsbgt	r1, r1, #64	; 0x40
 801a4fa:	408c      	lslgt	r4, r1
 801a4fc:	f203 4112 	addwgt	r1, r3, #1042	; 0x412
 801a500:	fa28 f101 	lsrgt.w	r1, r8, r1
 801a504:	bfd6      	itet	le
 801a506:	f1c1 0120 	rsble	r1, r1, #32
 801a50a:	4321      	orrgt	r1, r4
 801a50c:	fa08 f101 	lslle.w	r1, r8, r1
 801a510:	ee07 1a90 	vmov	s15, r1
 801a514:	eeb8 7b67 	vcvt.f64.u32	d7, s15
 801a518:	3b01      	subs	r3, #1
 801a51a:	ee17 1a90 	vmov	r1, s15
 801a51e:	2001      	movs	r0, #1
 801a520:	f1a1 71f8 	sub.w	r1, r1, #32505856	; 0x1f00000
 801a524:	e7a7      	b.n	801a476 <_dtoa_r+0x10e>
 801a526:	2101      	movs	r1, #1
 801a528:	1ad2      	subs	r2, r2, r3
 801a52a:	1e53      	subs	r3, r2, #1
 801a52c:	9305      	str	r3, [sp, #20]
 801a52e:	bf45      	ittet	mi
 801a530:	f1c2 0301 	rsbmi	r3, r2, #1
 801a534:	9304      	strmi	r3, [sp, #16]
 801a536:	2300      	movpl	r3, #0
 801a538:	2300      	movmi	r3, #0
 801a53a:	bf4c      	ite	mi
 801a53c:	9305      	strmi	r3, [sp, #20]
 801a53e:	9304      	strpl	r3, [sp, #16]
 801a540:	f1bb 0f00 	cmp.w	fp, #0
 801a544:	910b      	str	r1, [sp, #44]	; 0x2c
 801a546:	db18      	blt.n	801a57a <_dtoa_r+0x212>
 801a548:	9b05      	ldr	r3, [sp, #20]
 801a54a:	f8cd b028 	str.w	fp, [sp, #40]	; 0x28
 801a54e:	445b      	add	r3, fp
 801a550:	9305      	str	r3, [sp, #20]
 801a552:	2300      	movs	r3, #0
 801a554:	9a06      	ldr	r2, [sp, #24]
 801a556:	2a09      	cmp	r2, #9
 801a558:	d848      	bhi.n	801a5ec <_dtoa_r+0x284>
 801a55a:	2a05      	cmp	r2, #5
 801a55c:	bfc4      	itt	gt
 801a55e:	3a04      	subgt	r2, #4
 801a560:	9206      	strgt	r2, [sp, #24]
 801a562:	9a06      	ldr	r2, [sp, #24]
 801a564:	f1a2 0202 	sub.w	r2, r2, #2
 801a568:	bfcc      	ite	gt
 801a56a:	2400      	movgt	r4, #0
 801a56c:	2401      	movle	r4, #1
 801a56e:	2a03      	cmp	r2, #3
 801a570:	d847      	bhi.n	801a602 <_dtoa_r+0x29a>
 801a572:	e8df f002 	tbb	[pc, r2]
 801a576:	2d0b      	.short	0x2d0b
 801a578:	392b      	.short	0x392b
 801a57a:	9b04      	ldr	r3, [sp, #16]
 801a57c:	2200      	movs	r2, #0
 801a57e:	eba3 030b 	sub.w	r3, r3, fp
 801a582:	9304      	str	r3, [sp, #16]
 801a584:	920a      	str	r2, [sp, #40]	; 0x28
 801a586:	f1cb 0300 	rsb	r3, fp, #0
 801a58a:	e7e3      	b.n	801a554 <_dtoa_r+0x1ec>
 801a58c:	2200      	movs	r2, #0
 801a58e:	9207      	str	r2, [sp, #28]
 801a590:	9a08      	ldr	r2, [sp, #32]
 801a592:	2a00      	cmp	r2, #0
 801a594:	dc38      	bgt.n	801a608 <_dtoa_r+0x2a0>
 801a596:	f04f 0a01 	mov.w	sl, #1
 801a59a:	46d1      	mov	r9, sl
 801a59c:	4652      	mov	r2, sl
 801a59e:	f8cd a020 	str.w	sl, [sp, #32]
 801a5a2:	69f7      	ldr	r7, [r6, #28]
 801a5a4:	2100      	movs	r1, #0
 801a5a6:	2004      	movs	r0, #4
 801a5a8:	f100 0c14 	add.w	ip, r0, #20
 801a5ac:	4594      	cmp	ip, r2
 801a5ae:	d930      	bls.n	801a612 <_dtoa_r+0x2aa>
 801a5b0:	6079      	str	r1, [r7, #4]
 801a5b2:	4630      	mov	r0, r6
 801a5b4:	930d      	str	r3, [sp, #52]	; 0x34
 801a5b6:	f000 fd43 	bl	801b040 <_Balloc>
 801a5ba:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 801a5bc:	9001      	str	r0, [sp, #4]
 801a5be:	4602      	mov	r2, r0
 801a5c0:	2800      	cmp	r0, #0
 801a5c2:	d145      	bne.n	801a650 <_dtoa_r+0x2e8>
 801a5c4:	4b21      	ldr	r3, [pc, #132]	; (801a64c <_dtoa_r+0x2e4>)
 801a5c6:	f240 11af 	movw	r1, #431	; 0x1af
 801a5ca:	e6e5      	b.n	801a398 <_dtoa_r+0x30>
 801a5cc:	2201      	movs	r2, #1
 801a5ce:	e7de      	b.n	801a58e <_dtoa_r+0x226>
 801a5d0:	2200      	movs	r2, #0
 801a5d2:	9207      	str	r2, [sp, #28]
 801a5d4:	9a08      	ldr	r2, [sp, #32]
 801a5d6:	eb0b 0a02 	add.w	sl, fp, r2
 801a5da:	f10a 0901 	add.w	r9, sl, #1
 801a5de:	464a      	mov	r2, r9
 801a5e0:	2a01      	cmp	r2, #1
 801a5e2:	bfb8      	it	lt
 801a5e4:	2201      	movlt	r2, #1
 801a5e6:	e7dc      	b.n	801a5a2 <_dtoa_r+0x23a>
 801a5e8:	2201      	movs	r2, #1
 801a5ea:	e7f2      	b.n	801a5d2 <_dtoa_r+0x26a>
 801a5ec:	2401      	movs	r4, #1
 801a5ee:	2200      	movs	r2, #0
 801a5f0:	e9cd 2406 	strd	r2, r4, [sp, #24]
 801a5f4:	f04f 3aff 	mov.w	sl, #4294967295
 801a5f8:	2100      	movs	r1, #0
 801a5fa:	46d1      	mov	r9, sl
 801a5fc:	2212      	movs	r2, #18
 801a5fe:	9108      	str	r1, [sp, #32]
 801a600:	e7cf      	b.n	801a5a2 <_dtoa_r+0x23a>
 801a602:	2201      	movs	r2, #1
 801a604:	9207      	str	r2, [sp, #28]
 801a606:	e7f5      	b.n	801a5f4 <_dtoa_r+0x28c>
 801a608:	f8dd a020 	ldr.w	sl, [sp, #32]
 801a60c:	46d1      	mov	r9, sl
 801a60e:	4652      	mov	r2, sl
 801a610:	e7c7      	b.n	801a5a2 <_dtoa_r+0x23a>
 801a612:	3101      	adds	r1, #1
 801a614:	0040      	lsls	r0, r0, #1
 801a616:	e7c7      	b.n	801a5a8 <_dtoa_r+0x240>
 801a618:	636f4361 	.word	0x636f4361
 801a61c:	3fd287a7 	.word	0x3fd287a7
 801a620:	8b60c8b3 	.word	0x8b60c8b3
 801a624:	3fc68a28 	.word	0x3fc68a28
 801a628:	509f79fb 	.word	0x509f79fb
 801a62c:	3fd34413 	.word	0x3fd34413
 801a630:	0801f4de 	.word	0x0801f4de
 801a634:	0801f6cb 	.word	0x0801f6cb
 801a638:	7ff00000 	.word	0x7ff00000
 801a63c:	0801f6c7 	.word	0x0801f6c7
 801a640:	0801f6be 	.word	0x0801f6be
 801a644:	0801f65f 	.word	0x0801f65f
 801a648:	0801f7b8 	.word	0x0801f7b8
 801a64c:	0801f723 	.word	0x0801f723
 801a650:	69f2      	ldr	r2, [r6, #28]
 801a652:	9901      	ldr	r1, [sp, #4]
 801a654:	6011      	str	r1, [r2, #0]
 801a656:	f1b9 0f0e 	cmp.w	r9, #14
 801a65a:	d86c      	bhi.n	801a736 <_dtoa_r+0x3ce>
 801a65c:	2c00      	cmp	r4, #0
 801a65e:	d06a      	beq.n	801a736 <_dtoa_r+0x3ce>
 801a660:	f1bb 0f00 	cmp.w	fp, #0
 801a664:	f340 80a0 	ble.w	801a7a8 <_dtoa_r+0x440>
 801a668:	4ac1      	ldr	r2, [pc, #772]	; (801a970 <_dtoa_r+0x608>)
 801a66a:	f00b 010f 	and.w	r1, fp, #15
 801a66e:	eb02 02c1 	add.w	r2, r2, r1, lsl #3
 801a672:	f41b 7f80 	tst.w	fp, #256	; 0x100
 801a676:	ed92 7b00 	vldr	d7, [r2]
 801a67a:	ea4f 122b 	mov.w	r2, fp, asr #4
 801a67e:	f000 8087 	beq.w	801a790 <_dtoa_r+0x428>
 801a682:	49bc      	ldr	r1, [pc, #752]	; (801a974 <_dtoa_r+0x60c>)
 801a684:	ed91 6b08 	vldr	d6, [r1, #32]
 801a688:	ee88 6b06 	vdiv.f64	d6, d8, d6
 801a68c:	ed8d 6b02 	vstr	d6, [sp, #8]
 801a690:	f002 020f 	and.w	r2, r2, #15
 801a694:	2103      	movs	r1, #3
 801a696:	48b7      	ldr	r0, [pc, #732]	; (801a974 <_dtoa_r+0x60c>)
 801a698:	2a00      	cmp	r2, #0
 801a69a:	d17b      	bne.n	801a794 <_dtoa_r+0x42c>
 801a69c:	ed9d 6b02 	vldr	d6, [sp, #8]
 801a6a0:	ee86 7b07 	vdiv.f64	d7, d6, d7
 801a6a4:	ed8d 7b02 	vstr	d7, [sp, #8]
 801a6a8:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 801a6aa:	ed9d 7b02 	vldr	d7, [sp, #8]
 801a6ae:	2a00      	cmp	r2, #0
 801a6b0:	f000 80a0 	beq.w	801a7f4 <_dtoa_r+0x48c>
 801a6b4:	eeb7 6b00 	vmov.f64	d6, #112	; 0x3f800000  1.0
 801a6b8:	eeb4 7bc6 	vcmpe.f64	d7, d6
 801a6bc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801a6c0:	f140 8098 	bpl.w	801a7f4 <_dtoa_r+0x48c>
 801a6c4:	f1b9 0f00 	cmp.w	r9, #0
 801a6c8:	f000 8094 	beq.w	801a7f4 <_dtoa_r+0x48c>
 801a6cc:	f1ba 0f00 	cmp.w	sl, #0
 801a6d0:	dd2f      	ble.n	801a732 <_dtoa_r+0x3ca>
 801a6d2:	eeb2 6b04 	vmov.f64	d6, #36	; 0x41200000  10.0
 801a6d6:	ee27 7b06 	vmul.f64	d7, d7, d6
 801a6da:	ed8d 7b02 	vstr	d7, [sp, #8]
 801a6de:	f10b 32ff 	add.w	r2, fp, #4294967295
 801a6e2:	3101      	adds	r1, #1
 801a6e4:	4654      	mov	r4, sl
 801a6e6:	ed9d 6b02 	vldr	d6, [sp, #8]
 801a6ea:	eeb1 5b0c 	vmov.f64	d5, #28	; 0x40e00000  7.0
 801a6ee:	ee07 1a90 	vmov	s15, r1
 801a6f2:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 801a6f6:	eea7 5b06 	vfma.f64	d5, d7, d6
 801a6fa:	ee15 7a90 	vmov	r7, s11
 801a6fe:	ec51 0b15 	vmov	r0, r1, d5
 801a702:	f1a7 7150 	sub.w	r1, r7, #54525952	; 0x3400000
 801a706:	2c00      	cmp	r4, #0
 801a708:	d177      	bne.n	801a7fa <_dtoa_r+0x492>
 801a70a:	eeb1 7b04 	vmov.f64	d7, #20	; 0x40a00000  5.0
 801a70e:	ee36 6b47 	vsub.f64	d6, d6, d7
 801a712:	ec41 0b17 	vmov	d7, r0, r1
 801a716:	eeb4 6bc7 	vcmpe.f64	d6, d7
 801a71a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801a71e:	f300 826a 	bgt.w	801abf6 <_dtoa_r+0x88e>
 801a722:	eeb1 7b47 	vneg.f64	d7, d7
 801a726:	eeb4 6bc7 	vcmpe.f64	d6, d7
 801a72a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801a72e:	f100 8260 	bmi.w	801abf2 <_dtoa_r+0x88a>
 801a732:	ed8d 8b02 	vstr	d8, [sp, #8]
 801a736:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 801a738:	2a00      	cmp	r2, #0
 801a73a:	f2c0 811d 	blt.w	801a978 <_dtoa_r+0x610>
 801a73e:	f1bb 0f0e 	cmp.w	fp, #14
 801a742:	f300 8119 	bgt.w	801a978 <_dtoa_r+0x610>
 801a746:	4b8a      	ldr	r3, [pc, #552]	; (801a970 <_dtoa_r+0x608>)
 801a748:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 801a74c:	ed93 6b00 	vldr	d6, [r3]
 801a750:	9b08      	ldr	r3, [sp, #32]
 801a752:	2b00      	cmp	r3, #0
 801a754:	f280 80b7 	bge.w	801a8c6 <_dtoa_r+0x55e>
 801a758:	f1b9 0f00 	cmp.w	r9, #0
 801a75c:	f300 80b3 	bgt.w	801a8c6 <_dtoa_r+0x55e>
 801a760:	f040 8246 	bne.w	801abf0 <_dtoa_r+0x888>
 801a764:	eeb1 7b04 	vmov.f64	d7, #20	; 0x40a00000  5.0
 801a768:	ee26 6b07 	vmul.f64	d6, d6, d7
 801a76c:	ed9d 7b02 	vldr	d7, [sp, #8]
 801a770:	eeb4 6bc7 	vcmpe.f64	d6, d7
 801a774:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801a778:	464c      	mov	r4, r9
 801a77a:	464f      	mov	r7, r9
 801a77c:	f280 821c 	bge.w	801abb8 <_dtoa_r+0x850>
 801a780:	f8dd 8004 	ldr.w	r8, [sp, #4]
 801a784:	2331      	movs	r3, #49	; 0x31
 801a786:	f808 3b01 	strb.w	r3, [r8], #1
 801a78a:	f10b 0b01 	add.w	fp, fp, #1
 801a78e:	e218      	b.n	801abc2 <_dtoa_r+0x85a>
 801a790:	2102      	movs	r1, #2
 801a792:	e780      	b.n	801a696 <_dtoa_r+0x32e>
 801a794:	07d4      	lsls	r4, r2, #31
 801a796:	d504      	bpl.n	801a7a2 <_dtoa_r+0x43a>
 801a798:	ed90 6b00 	vldr	d6, [r0]
 801a79c:	3101      	adds	r1, #1
 801a79e:	ee27 7b06 	vmul.f64	d7, d7, d6
 801a7a2:	1052      	asrs	r2, r2, #1
 801a7a4:	3008      	adds	r0, #8
 801a7a6:	e777      	b.n	801a698 <_dtoa_r+0x330>
 801a7a8:	d022      	beq.n	801a7f0 <_dtoa_r+0x488>
 801a7aa:	f1cb 0200 	rsb	r2, fp, #0
 801a7ae:	4970      	ldr	r1, [pc, #448]	; (801a970 <_dtoa_r+0x608>)
 801a7b0:	f002 000f 	and.w	r0, r2, #15
 801a7b4:	eb01 01c0 	add.w	r1, r1, r0, lsl #3
 801a7b8:	ed91 7b00 	vldr	d7, [r1]
 801a7bc:	ee28 7b07 	vmul.f64	d7, d8, d7
 801a7c0:	ed8d 7b02 	vstr	d7, [sp, #8]
 801a7c4:	486b      	ldr	r0, [pc, #428]	; (801a974 <_dtoa_r+0x60c>)
 801a7c6:	1112      	asrs	r2, r2, #4
 801a7c8:	2400      	movs	r4, #0
 801a7ca:	2102      	movs	r1, #2
 801a7cc:	b92a      	cbnz	r2, 801a7da <_dtoa_r+0x472>
 801a7ce:	2c00      	cmp	r4, #0
 801a7d0:	f43f af6a 	beq.w	801a6a8 <_dtoa_r+0x340>
 801a7d4:	ed8d 7b02 	vstr	d7, [sp, #8]
 801a7d8:	e766      	b.n	801a6a8 <_dtoa_r+0x340>
 801a7da:	07d7      	lsls	r7, r2, #31
 801a7dc:	d505      	bpl.n	801a7ea <_dtoa_r+0x482>
 801a7de:	ed90 6b00 	vldr	d6, [r0]
 801a7e2:	3101      	adds	r1, #1
 801a7e4:	2401      	movs	r4, #1
 801a7e6:	ee27 7b06 	vmul.f64	d7, d7, d6
 801a7ea:	1052      	asrs	r2, r2, #1
 801a7ec:	3008      	adds	r0, #8
 801a7ee:	e7ed      	b.n	801a7cc <_dtoa_r+0x464>
 801a7f0:	2102      	movs	r1, #2
 801a7f2:	e759      	b.n	801a6a8 <_dtoa_r+0x340>
 801a7f4:	465a      	mov	r2, fp
 801a7f6:	464c      	mov	r4, r9
 801a7f8:	e775      	b.n	801a6e6 <_dtoa_r+0x37e>
 801a7fa:	ec41 0b17 	vmov	d7, r0, r1
 801a7fe:	495c      	ldr	r1, [pc, #368]	; (801a970 <_dtoa_r+0x608>)
 801a800:	eb01 01c4 	add.w	r1, r1, r4, lsl #3
 801a804:	ed11 4b02 	vldr	d4, [r1, #-8]
 801a808:	9901      	ldr	r1, [sp, #4]
 801a80a:	440c      	add	r4, r1
 801a80c:	9907      	ldr	r1, [sp, #28]
 801a80e:	b351      	cbz	r1, 801a866 <_dtoa_r+0x4fe>
 801a810:	eeb6 3b00 	vmov.f64	d3, #96	; 0x3f000000  0.5
 801a814:	eeb7 2b00 	vmov.f64	d2, #112	; 0x3f800000  1.0
 801a818:	f8dd 8004 	ldr.w	r8, [sp, #4]
 801a81c:	ee83 5b04 	vdiv.f64	d5, d3, d4
 801a820:	eeb2 3b04 	vmov.f64	d3, #36	; 0x41200000  10.0
 801a824:	ee35 7b47 	vsub.f64	d7, d5, d7
 801a828:	eefd 4bc6 	vcvt.s32.f64	s9, d6
 801a82c:	ee14 1a90 	vmov	r1, s9
 801a830:	eeb8 5be4 	vcvt.f64.s32	d5, s9
 801a834:	3130      	adds	r1, #48	; 0x30
 801a836:	ee36 6b45 	vsub.f64	d6, d6, d5
 801a83a:	eeb4 6bc7 	vcmpe.f64	d6, d7
 801a83e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801a842:	f808 1b01 	strb.w	r1, [r8], #1
 801a846:	d439      	bmi.n	801a8bc <_dtoa_r+0x554>
 801a848:	ee32 5b46 	vsub.f64	d5, d2, d6
 801a84c:	eeb4 5bc7 	vcmpe.f64	d5, d7
 801a850:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801a854:	d472      	bmi.n	801a93c <_dtoa_r+0x5d4>
 801a856:	45a0      	cmp	r8, r4
 801a858:	f43f af6b 	beq.w	801a732 <_dtoa_r+0x3ca>
 801a85c:	ee27 7b03 	vmul.f64	d7, d7, d3
 801a860:	ee26 6b03 	vmul.f64	d6, d6, d3
 801a864:	e7e0      	b.n	801a828 <_dtoa_r+0x4c0>
 801a866:	f8dd 8004 	ldr.w	r8, [sp, #4]
 801a86a:	ee27 7b04 	vmul.f64	d7, d7, d4
 801a86e:	4620      	mov	r0, r4
 801a870:	eeb2 3b04 	vmov.f64	d3, #36	; 0x41200000  10.0
 801a874:	eefd 4bc6 	vcvt.s32.f64	s9, d6
 801a878:	ee14 1a90 	vmov	r1, s9
 801a87c:	3130      	adds	r1, #48	; 0x30
 801a87e:	f808 1b01 	strb.w	r1, [r8], #1
 801a882:	45a0      	cmp	r8, r4
 801a884:	eeb8 5be4 	vcvt.f64.s32	d5, s9
 801a888:	ee36 6b45 	vsub.f64	d6, d6, d5
 801a88c:	d118      	bne.n	801a8c0 <_dtoa_r+0x558>
 801a88e:	eeb6 5b00 	vmov.f64	d5, #96	; 0x3f000000  0.5
 801a892:	ee37 4b05 	vadd.f64	d4, d7, d5
 801a896:	eeb4 6bc4 	vcmpe.f64	d6, d4
 801a89a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801a89e:	dc4d      	bgt.n	801a93c <_dtoa_r+0x5d4>
 801a8a0:	ee35 5b47 	vsub.f64	d5, d5, d7
 801a8a4:	eeb4 6bc5 	vcmpe.f64	d6, d5
 801a8a8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801a8ac:	f57f af41 	bpl.w	801a732 <_dtoa_r+0x3ca>
 801a8b0:	4680      	mov	r8, r0
 801a8b2:	3801      	subs	r0, #1
 801a8b4:	f818 3c01 	ldrb.w	r3, [r8, #-1]
 801a8b8:	2b30      	cmp	r3, #48	; 0x30
 801a8ba:	d0f9      	beq.n	801a8b0 <_dtoa_r+0x548>
 801a8bc:	4693      	mov	fp, r2
 801a8be:	e02a      	b.n	801a916 <_dtoa_r+0x5ae>
 801a8c0:	ee26 6b03 	vmul.f64	d6, d6, d3
 801a8c4:	e7d6      	b.n	801a874 <_dtoa_r+0x50c>
 801a8c6:	ed9d 7b02 	vldr	d7, [sp, #8]
 801a8ca:	eeb2 4b04 	vmov.f64	d4, #36	; 0x41200000  10.0
 801a8ce:	f8dd 8004 	ldr.w	r8, [sp, #4]
 801a8d2:	ee87 5b06 	vdiv.f64	d5, d7, d6
 801a8d6:	eebd 5bc5 	vcvt.s32.f64	s10, d5
 801a8da:	ee15 3a10 	vmov	r3, s10
 801a8de:	3330      	adds	r3, #48	; 0x30
 801a8e0:	f808 3b01 	strb.w	r3, [r8], #1
 801a8e4:	9b01      	ldr	r3, [sp, #4]
 801a8e6:	eba8 0303 	sub.w	r3, r8, r3
 801a8ea:	4599      	cmp	r9, r3
 801a8ec:	eeb8 3bc5 	vcvt.f64.s32	d3, s10
 801a8f0:	eea3 7b46 	vfms.f64	d7, d3, d6
 801a8f4:	d133      	bne.n	801a95e <_dtoa_r+0x5f6>
 801a8f6:	ee37 7b07 	vadd.f64	d7, d7, d7
 801a8fa:	eeb4 7bc6 	vcmpe.f64	d7, d6
 801a8fe:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801a902:	dc1a      	bgt.n	801a93a <_dtoa_r+0x5d2>
 801a904:	eeb4 7b46 	vcmp.f64	d7, d6
 801a908:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801a90c:	d103      	bne.n	801a916 <_dtoa_r+0x5ae>
 801a90e:	ee15 3a10 	vmov	r3, s10
 801a912:	07d9      	lsls	r1, r3, #31
 801a914:	d411      	bmi.n	801a93a <_dtoa_r+0x5d2>
 801a916:	4629      	mov	r1, r5
 801a918:	4630      	mov	r0, r6
 801a91a:	f000 fbd1 	bl	801b0c0 <_Bfree>
 801a91e:	2300      	movs	r3, #0
 801a920:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 801a922:	f888 3000 	strb.w	r3, [r8]
 801a926:	f10b 0301 	add.w	r3, fp, #1
 801a92a:	6013      	str	r3, [r2, #0]
 801a92c:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 801a92e:	2b00      	cmp	r3, #0
 801a930:	f43f ad69 	beq.w	801a406 <_dtoa_r+0x9e>
 801a934:	f8c3 8000 	str.w	r8, [r3]
 801a938:	e565      	b.n	801a406 <_dtoa_r+0x9e>
 801a93a:	465a      	mov	r2, fp
 801a93c:	4643      	mov	r3, r8
 801a93e:	4698      	mov	r8, r3
 801a940:	f813 1d01 	ldrb.w	r1, [r3, #-1]!
 801a944:	2939      	cmp	r1, #57	; 0x39
 801a946:	d106      	bne.n	801a956 <_dtoa_r+0x5ee>
 801a948:	9901      	ldr	r1, [sp, #4]
 801a94a:	4299      	cmp	r1, r3
 801a94c:	d1f7      	bne.n	801a93e <_dtoa_r+0x5d6>
 801a94e:	9801      	ldr	r0, [sp, #4]
 801a950:	2130      	movs	r1, #48	; 0x30
 801a952:	3201      	adds	r2, #1
 801a954:	7001      	strb	r1, [r0, #0]
 801a956:	7819      	ldrb	r1, [r3, #0]
 801a958:	3101      	adds	r1, #1
 801a95a:	7019      	strb	r1, [r3, #0]
 801a95c:	e7ae      	b.n	801a8bc <_dtoa_r+0x554>
 801a95e:	ee27 7b04 	vmul.f64	d7, d7, d4
 801a962:	eeb5 7b40 	vcmp.f64	d7, #0.0
 801a966:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801a96a:	d1b2      	bne.n	801a8d2 <_dtoa_r+0x56a>
 801a96c:	e7d3      	b.n	801a916 <_dtoa_r+0x5ae>
 801a96e:	bf00      	nop
 801a970:	0801f7b8 	.word	0x0801f7b8
 801a974:	0801f790 	.word	0x0801f790
 801a978:	9907      	ldr	r1, [sp, #28]
 801a97a:	2900      	cmp	r1, #0
 801a97c:	f000 80d0 	beq.w	801ab20 <_dtoa_r+0x7b8>
 801a980:	9906      	ldr	r1, [sp, #24]
 801a982:	2901      	cmp	r1, #1
 801a984:	f300 80b4 	bgt.w	801aaf0 <_dtoa_r+0x788>
 801a988:	9909      	ldr	r1, [sp, #36]	; 0x24
 801a98a:	2900      	cmp	r1, #0
 801a98c:	f000 80ac 	beq.w	801aae8 <_dtoa_r+0x780>
 801a990:	f202 4233 	addw	r2, r2, #1075	; 0x433
 801a994:	f8dd 8010 	ldr.w	r8, [sp, #16]
 801a998:	461c      	mov	r4, r3
 801a99a:	9309      	str	r3, [sp, #36]	; 0x24
 801a99c:	9b04      	ldr	r3, [sp, #16]
 801a99e:	4413      	add	r3, r2
 801a9a0:	9304      	str	r3, [sp, #16]
 801a9a2:	9b05      	ldr	r3, [sp, #20]
 801a9a4:	2101      	movs	r1, #1
 801a9a6:	4413      	add	r3, r2
 801a9a8:	4630      	mov	r0, r6
 801a9aa:	9305      	str	r3, [sp, #20]
 801a9ac:	f000 fc3e 	bl	801b22c <__i2b>
 801a9b0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801a9b2:	4607      	mov	r7, r0
 801a9b4:	f1b8 0f00 	cmp.w	r8, #0
 801a9b8:	d00d      	beq.n	801a9d6 <_dtoa_r+0x66e>
 801a9ba:	9a05      	ldr	r2, [sp, #20]
 801a9bc:	2a00      	cmp	r2, #0
 801a9be:	dd0a      	ble.n	801a9d6 <_dtoa_r+0x66e>
 801a9c0:	4542      	cmp	r2, r8
 801a9c2:	9904      	ldr	r1, [sp, #16]
 801a9c4:	bfa8      	it	ge
 801a9c6:	4642      	movge	r2, r8
 801a9c8:	1a89      	subs	r1, r1, r2
 801a9ca:	9104      	str	r1, [sp, #16]
 801a9cc:	9905      	ldr	r1, [sp, #20]
 801a9ce:	eba8 0802 	sub.w	r8, r8, r2
 801a9d2:	1a8a      	subs	r2, r1, r2
 801a9d4:	9205      	str	r2, [sp, #20]
 801a9d6:	b303      	cbz	r3, 801aa1a <_dtoa_r+0x6b2>
 801a9d8:	9a07      	ldr	r2, [sp, #28]
 801a9da:	2a00      	cmp	r2, #0
 801a9dc:	f000 80a5 	beq.w	801ab2a <_dtoa_r+0x7c2>
 801a9e0:	2c00      	cmp	r4, #0
 801a9e2:	dd13      	ble.n	801aa0c <_dtoa_r+0x6a4>
 801a9e4:	4639      	mov	r1, r7
 801a9e6:	4622      	mov	r2, r4
 801a9e8:	4630      	mov	r0, r6
 801a9ea:	930d      	str	r3, [sp, #52]	; 0x34
 801a9ec:	f000 fcde 	bl	801b3ac <__pow5mult>
 801a9f0:	462a      	mov	r2, r5
 801a9f2:	4601      	mov	r1, r0
 801a9f4:	4607      	mov	r7, r0
 801a9f6:	4630      	mov	r0, r6
 801a9f8:	f000 fc2e 	bl	801b258 <__multiply>
 801a9fc:	4629      	mov	r1, r5
 801a9fe:	9009      	str	r0, [sp, #36]	; 0x24
 801aa00:	4630      	mov	r0, r6
 801aa02:	f000 fb5d 	bl	801b0c0 <_Bfree>
 801aa06:	9a09      	ldr	r2, [sp, #36]	; 0x24
 801aa08:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 801aa0a:	4615      	mov	r5, r2
 801aa0c:	1b1a      	subs	r2, r3, r4
 801aa0e:	d004      	beq.n	801aa1a <_dtoa_r+0x6b2>
 801aa10:	4629      	mov	r1, r5
 801aa12:	4630      	mov	r0, r6
 801aa14:	f000 fcca 	bl	801b3ac <__pow5mult>
 801aa18:	4605      	mov	r5, r0
 801aa1a:	2101      	movs	r1, #1
 801aa1c:	4630      	mov	r0, r6
 801aa1e:	f000 fc05 	bl	801b22c <__i2b>
 801aa22:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801aa24:	2b00      	cmp	r3, #0
 801aa26:	4604      	mov	r4, r0
 801aa28:	f340 8081 	ble.w	801ab2e <_dtoa_r+0x7c6>
 801aa2c:	461a      	mov	r2, r3
 801aa2e:	4601      	mov	r1, r0
 801aa30:	4630      	mov	r0, r6
 801aa32:	f000 fcbb 	bl	801b3ac <__pow5mult>
 801aa36:	9b06      	ldr	r3, [sp, #24]
 801aa38:	2b01      	cmp	r3, #1
 801aa3a:	4604      	mov	r4, r0
 801aa3c:	dd7a      	ble.n	801ab34 <_dtoa_r+0x7cc>
 801aa3e:	2300      	movs	r3, #0
 801aa40:	9309      	str	r3, [sp, #36]	; 0x24
 801aa42:	6922      	ldr	r2, [r4, #16]
 801aa44:	eb04 0282 	add.w	r2, r4, r2, lsl #2
 801aa48:	6910      	ldr	r0, [r2, #16]
 801aa4a:	f000 fba1 	bl	801b190 <__hi0bits>
 801aa4e:	f1c0 0020 	rsb	r0, r0, #32
 801aa52:	9b05      	ldr	r3, [sp, #20]
 801aa54:	4418      	add	r0, r3
 801aa56:	f010 001f 	ands.w	r0, r0, #31
 801aa5a:	f000 8093 	beq.w	801ab84 <_dtoa_r+0x81c>
 801aa5e:	f1c0 0220 	rsb	r2, r0, #32
 801aa62:	2a04      	cmp	r2, #4
 801aa64:	f340 8085 	ble.w	801ab72 <_dtoa_r+0x80a>
 801aa68:	9b04      	ldr	r3, [sp, #16]
 801aa6a:	f1c0 001c 	rsb	r0, r0, #28
 801aa6e:	4403      	add	r3, r0
 801aa70:	9304      	str	r3, [sp, #16]
 801aa72:	9b05      	ldr	r3, [sp, #20]
 801aa74:	4480      	add	r8, r0
 801aa76:	4403      	add	r3, r0
 801aa78:	9305      	str	r3, [sp, #20]
 801aa7a:	9b04      	ldr	r3, [sp, #16]
 801aa7c:	2b00      	cmp	r3, #0
 801aa7e:	dd05      	ble.n	801aa8c <_dtoa_r+0x724>
 801aa80:	4629      	mov	r1, r5
 801aa82:	461a      	mov	r2, r3
 801aa84:	4630      	mov	r0, r6
 801aa86:	f000 fceb 	bl	801b460 <__lshift>
 801aa8a:	4605      	mov	r5, r0
 801aa8c:	9b05      	ldr	r3, [sp, #20]
 801aa8e:	2b00      	cmp	r3, #0
 801aa90:	dd05      	ble.n	801aa9e <_dtoa_r+0x736>
 801aa92:	4621      	mov	r1, r4
 801aa94:	461a      	mov	r2, r3
 801aa96:	4630      	mov	r0, r6
 801aa98:	f000 fce2 	bl	801b460 <__lshift>
 801aa9c:	4604      	mov	r4, r0
 801aa9e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 801aaa0:	2b00      	cmp	r3, #0
 801aaa2:	d071      	beq.n	801ab88 <_dtoa_r+0x820>
 801aaa4:	4621      	mov	r1, r4
 801aaa6:	4628      	mov	r0, r5
 801aaa8:	f000 fd46 	bl	801b538 <__mcmp>
 801aaac:	2800      	cmp	r0, #0
 801aaae:	da6b      	bge.n	801ab88 <_dtoa_r+0x820>
 801aab0:	2300      	movs	r3, #0
 801aab2:	4629      	mov	r1, r5
 801aab4:	220a      	movs	r2, #10
 801aab6:	4630      	mov	r0, r6
 801aab8:	f000 fb24 	bl	801b104 <__multadd>
 801aabc:	9b07      	ldr	r3, [sp, #28]
 801aabe:	f10b 3bff 	add.w	fp, fp, #4294967295
 801aac2:	4605      	mov	r5, r0
 801aac4:	2b00      	cmp	r3, #0
 801aac6:	f000 8197 	beq.w	801adf8 <_dtoa_r+0xa90>
 801aaca:	4639      	mov	r1, r7
 801aacc:	2300      	movs	r3, #0
 801aace:	220a      	movs	r2, #10
 801aad0:	4630      	mov	r0, r6
 801aad2:	f000 fb17 	bl	801b104 <__multadd>
 801aad6:	f1ba 0f00 	cmp.w	sl, #0
 801aada:	4607      	mov	r7, r0
 801aadc:	f300 8093 	bgt.w	801ac06 <_dtoa_r+0x89e>
 801aae0:	9b06      	ldr	r3, [sp, #24]
 801aae2:	2b02      	cmp	r3, #2
 801aae4:	dc57      	bgt.n	801ab96 <_dtoa_r+0x82e>
 801aae6:	e08e      	b.n	801ac06 <_dtoa_r+0x89e>
 801aae8:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 801aaea:	f1c2 0236 	rsb	r2, r2, #54	; 0x36
 801aaee:	e751      	b.n	801a994 <_dtoa_r+0x62c>
 801aaf0:	f109 34ff 	add.w	r4, r9, #4294967295
 801aaf4:	42a3      	cmp	r3, r4
 801aaf6:	bfbf      	itttt	lt
 801aaf8:	1ae2      	sublt	r2, r4, r3
 801aafa:	9b0a      	ldrlt	r3, [sp, #40]	; 0x28
 801aafc:	189b      	addlt	r3, r3, r2
 801aafe:	930a      	strlt	r3, [sp, #40]	; 0x28
 801ab00:	bfae      	itee	ge
 801ab02:	1b1c      	subge	r4, r3, r4
 801ab04:	4623      	movlt	r3, r4
 801ab06:	2400      	movlt	r4, #0
 801ab08:	f1b9 0f00 	cmp.w	r9, #0
 801ab0c:	bfb5      	itete	lt
 801ab0e:	9a04      	ldrlt	r2, [sp, #16]
 801ab10:	f8dd 8010 	ldrge.w	r8, [sp, #16]
 801ab14:	eba2 0809 	sublt.w	r8, r2, r9
 801ab18:	464a      	movge	r2, r9
 801ab1a:	bfb8      	it	lt
 801ab1c:	2200      	movlt	r2, #0
 801ab1e:	e73c      	b.n	801a99a <_dtoa_r+0x632>
 801ab20:	f8dd 8010 	ldr.w	r8, [sp, #16]
 801ab24:	9f07      	ldr	r7, [sp, #28]
 801ab26:	461c      	mov	r4, r3
 801ab28:	e744      	b.n	801a9b4 <_dtoa_r+0x64c>
 801ab2a:	461a      	mov	r2, r3
 801ab2c:	e770      	b.n	801aa10 <_dtoa_r+0x6a8>
 801ab2e:	9b06      	ldr	r3, [sp, #24]
 801ab30:	2b01      	cmp	r3, #1
 801ab32:	dc18      	bgt.n	801ab66 <_dtoa_r+0x7fe>
 801ab34:	9b02      	ldr	r3, [sp, #8]
 801ab36:	b9b3      	cbnz	r3, 801ab66 <_dtoa_r+0x7fe>
 801ab38:	9b03      	ldr	r3, [sp, #12]
 801ab3a:	f3c3 0213 	ubfx	r2, r3, #0, #20
 801ab3e:	b9a2      	cbnz	r2, 801ab6a <_dtoa_r+0x802>
 801ab40:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 801ab44:	0d12      	lsrs	r2, r2, #20
 801ab46:	0512      	lsls	r2, r2, #20
 801ab48:	b18a      	cbz	r2, 801ab6e <_dtoa_r+0x806>
 801ab4a:	9b04      	ldr	r3, [sp, #16]
 801ab4c:	3301      	adds	r3, #1
 801ab4e:	9304      	str	r3, [sp, #16]
 801ab50:	9b05      	ldr	r3, [sp, #20]
 801ab52:	3301      	adds	r3, #1
 801ab54:	9305      	str	r3, [sp, #20]
 801ab56:	2301      	movs	r3, #1
 801ab58:	9309      	str	r3, [sp, #36]	; 0x24
 801ab5a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801ab5c:	2b00      	cmp	r3, #0
 801ab5e:	f47f af70 	bne.w	801aa42 <_dtoa_r+0x6da>
 801ab62:	2001      	movs	r0, #1
 801ab64:	e775      	b.n	801aa52 <_dtoa_r+0x6ea>
 801ab66:	2300      	movs	r3, #0
 801ab68:	e7f6      	b.n	801ab58 <_dtoa_r+0x7f0>
 801ab6a:	9b02      	ldr	r3, [sp, #8]
 801ab6c:	e7f4      	b.n	801ab58 <_dtoa_r+0x7f0>
 801ab6e:	9209      	str	r2, [sp, #36]	; 0x24
 801ab70:	e7f3      	b.n	801ab5a <_dtoa_r+0x7f2>
 801ab72:	d082      	beq.n	801aa7a <_dtoa_r+0x712>
 801ab74:	9b04      	ldr	r3, [sp, #16]
 801ab76:	321c      	adds	r2, #28
 801ab78:	4413      	add	r3, r2
 801ab7a:	9304      	str	r3, [sp, #16]
 801ab7c:	9b05      	ldr	r3, [sp, #20]
 801ab7e:	4490      	add	r8, r2
 801ab80:	4413      	add	r3, r2
 801ab82:	e779      	b.n	801aa78 <_dtoa_r+0x710>
 801ab84:	4602      	mov	r2, r0
 801ab86:	e7f5      	b.n	801ab74 <_dtoa_r+0x80c>
 801ab88:	f1b9 0f00 	cmp.w	r9, #0
 801ab8c:	dc36      	bgt.n	801abfc <_dtoa_r+0x894>
 801ab8e:	9b06      	ldr	r3, [sp, #24]
 801ab90:	2b02      	cmp	r3, #2
 801ab92:	dd33      	ble.n	801abfc <_dtoa_r+0x894>
 801ab94:	46ca      	mov	sl, r9
 801ab96:	f1ba 0f00 	cmp.w	sl, #0
 801ab9a:	d10d      	bne.n	801abb8 <_dtoa_r+0x850>
 801ab9c:	4621      	mov	r1, r4
 801ab9e:	4653      	mov	r3, sl
 801aba0:	2205      	movs	r2, #5
 801aba2:	4630      	mov	r0, r6
 801aba4:	f000 faae 	bl	801b104 <__multadd>
 801aba8:	4601      	mov	r1, r0
 801abaa:	4604      	mov	r4, r0
 801abac:	4628      	mov	r0, r5
 801abae:	f000 fcc3 	bl	801b538 <__mcmp>
 801abb2:	2800      	cmp	r0, #0
 801abb4:	f73f ade4 	bgt.w	801a780 <_dtoa_r+0x418>
 801abb8:	9b08      	ldr	r3, [sp, #32]
 801abba:	f8dd 8004 	ldr.w	r8, [sp, #4]
 801abbe:	ea6f 0b03 	mvn.w	fp, r3
 801abc2:	f04f 0900 	mov.w	r9, #0
 801abc6:	4621      	mov	r1, r4
 801abc8:	4630      	mov	r0, r6
 801abca:	f000 fa79 	bl	801b0c0 <_Bfree>
 801abce:	2f00      	cmp	r7, #0
 801abd0:	f43f aea1 	beq.w	801a916 <_dtoa_r+0x5ae>
 801abd4:	f1b9 0f00 	cmp.w	r9, #0
 801abd8:	d005      	beq.n	801abe6 <_dtoa_r+0x87e>
 801abda:	45b9      	cmp	r9, r7
 801abdc:	d003      	beq.n	801abe6 <_dtoa_r+0x87e>
 801abde:	4649      	mov	r1, r9
 801abe0:	4630      	mov	r0, r6
 801abe2:	f000 fa6d 	bl	801b0c0 <_Bfree>
 801abe6:	4639      	mov	r1, r7
 801abe8:	4630      	mov	r0, r6
 801abea:	f000 fa69 	bl	801b0c0 <_Bfree>
 801abee:	e692      	b.n	801a916 <_dtoa_r+0x5ae>
 801abf0:	2400      	movs	r4, #0
 801abf2:	4627      	mov	r7, r4
 801abf4:	e7e0      	b.n	801abb8 <_dtoa_r+0x850>
 801abf6:	4693      	mov	fp, r2
 801abf8:	4627      	mov	r7, r4
 801abfa:	e5c1      	b.n	801a780 <_dtoa_r+0x418>
 801abfc:	9b07      	ldr	r3, [sp, #28]
 801abfe:	46ca      	mov	sl, r9
 801ac00:	2b00      	cmp	r3, #0
 801ac02:	f000 8100 	beq.w	801ae06 <_dtoa_r+0xa9e>
 801ac06:	f1b8 0f00 	cmp.w	r8, #0
 801ac0a:	dd05      	ble.n	801ac18 <_dtoa_r+0x8b0>
 801ac0c:	4639      	mov	r1, r7
 801ac0e:	4642      	mov	r2, r8
 801ac10:	4630      	mov	r0, r6
 801ac12:	f000 fc25 	bl	801b460 <__lshift>
 801ac16:	4607      	mov	r7, r0
 801ac18:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801ac1a:	2b00      	cmp	r3, #0
 801ac1c:	d05d      	beq.n	801acda <_dtoa_r+0x972>
 801ac1e:	6879      	ldr	r1, [r7, #4]
 801ac20:	4630      	mov	r0, r6
 801ac22:	f000 fa0d 	bl	801b040 <_Balloc>
 801ac26:	4680      	mov	r8, r0
 801ac28:	b928      	cbnz	r0, 801ac36 <_dtoa_r+0x8ce>
 801ac2a:	4b82      	ldr	r3, [pc, #520]	; (801ae34 <_dtoa_r+0xacc>)
 801ac2c:	4602      	mov	r2, r0
 801ac2e:	f240 21ef 	movw	r1, #751	; 0x2ef
 801ac32:	f7ff bbb1 	b.w	801a398 <_dtoa_r+0x30>
 801ac36:	693a      	ldr	r2, [r7, #16]
 801ac38:	3202      	adds	r2, #2
 801ac3a:	0092      	lsls	r2, r2, #2
 801ac3c:	f107 010c 	add.w	r1, r7, #12
 801ac40:	300c      	adds	r0, #12
 801ac42:	f7ff fadc 	bl	801a1fe <memcpy>
 801ac46:	2201      	movs	r2, #1
 801ac48:	4641      	mov	r1, r8
 801ac4a:	4630      	mov	r0, r6
 801ac4c:	f000 fc08 	bl	801b460 <__lshift>
 801ac50:	9b01      	ldr	r3, [sp, #4]
 801ac52:	3301      	adds	r3, #1
 801ac54:	9304      	str	r3, [sp, #16]
 801ac56:	9b01      	ldr	r3, [sp, #4]
 801ac58:	4453      	add	r3, sl
 801ac5a:	9308      	str	r3, [sp, #32]
 801ac5c:	9b02      	ldr	r3, [sp, #8]
 801ac5e:	f003 0301 	and.w	r3, r3, #1
 801ac62:	46b9      	mov	r9, r7
 801ac64:	9307      	str	r3, [sp, #28]
 801ac66:	4607      	mov	r7, r0
 801ac68:	9b04      	ldr	r3, [sp, #16]
 801ac6a:	4621      	mov	r1, r4
 801ac6c:	3b01      	subs	r3, #1
 801ac6e:	4628      	mov	r0, r5
 801ac70:	9302      	str	r3, [sp, #8]
 801ac72:	f7ff faf1 	bl	801a258 <quorem>
 801ac76:	4603      	mov	r3, r0
 801ac78:	3330      	adds	r3, #48	; 0x30
 801ac7a:	9005      	str	r0, [sp, #20]
 801ac7c:	4649      	mov	r1, r9
 801ac7e:	4628      	mov	r0, r5
 801ac80:	9309      	str	r3, [sp, #36]	; 0x24
 801ac82:	f000 fc59 	bl	801b538 <__mcmp>
 801ac86:	463a      	mov	r2, r7
 801ac88:	4682      	mov	sl, r0
 801ac8a:	4621      	mov	r1, r4
 801ac8c:	4630      	mov	r0, r6
 801ac8e:	f000 fc6f 	bl	801b570 <__mdiff>
 801ac92:	68c2      	ldr	r2, [r0, #12]
 801ac94:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801ac96:	4680      	mov	r8, r0
 801ac98:	bb0a      	cbnz	r2, 801acde <_dtoa_r+0x976>
 801ac9a:	4601      	mov	r1, r0
 801ac9c:	4628      	mov	r0, r5
 801ac9e:	f000 fc4b 	bl	801b538 <__mcmp>
 801aca2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801aca4:	4602      	mov	r2, r0
 801aca6:	4641      	mov	r1, r8
 801aca8:	4630      	mov	r0, r6
 801acaa:	e9cd 3209 	strd	r3, r2, [sp, #36]	; 0x24
 801acae:	f000 fa07 	bl	801b0c0 <_Bfree>
 801acb2:	9b06      	ldr	r3, [sp, #24]
 801acb4:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 801acb6:	f8dd 8010 	ldr.w	r8, [sp, #16]
 801acba:	ea43 0102 	orr.w	r1, r3, r2
 801acbe:	9b07      	ldr	r3, [sp, #28]
 801acc0:	4319      	orrs	r1, r3
 801acc2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801acc4:	d10d      	bne.n	801ace2 <_dtoa_r+0x97a>
 801acc6:	2b39      	cmp	r3, #57	; 0x39
 801acc8:	d029      	beq.n	801ad1e <_dtoa_r+0x9b6>
 801acca:	f1ba 0f00 	cmp.w	sl, #0
 801acce:	dd01      	ble.n	801acd4 <_dtoa_r+0x96c>
 801acd0:	9b05      	ldr	r3, [sp, #20]
 801acd2:	3331      	adds	r3, #49	; 0x31
 801acd4:	9a02      	ldr	r2, [sp, #8]
 801acd6:	7013      	strb	r3, [r2, #0]
 801acd8:	e775      	b.n	801abc6 <_dtoa_r+0x85e>
 801acda:	4638      	mov	r0, r7
 801acdc:	e7b8      	b.n	801ac50 <_dtoa_r+0x8e8>
 801acde:	2201      	movs	r2, #1
 801ace0:	e7e1      	b.n	801aca6 <_dtoa_r+0x93e>
 801ace2:	f1ba 0f00 	cmp.w	sl, #0
 801ace6:	db06      	blt.n	801acf6 <_dtoa_r+0x98e>
 801ace8:	9906      	ldr	r1, [sp, #24]
 801acea:	ea41 0a0a 	orr.w	sl, r1, sl
 801acee:	9907      	ldr	r1, [sp, #28]
 801acf0:	ea5a 0a01 	orrs.w	sl, sl, r1
 801acf4:	d120      	bne.n	801ad38 <_dtoa_r+0x9d0>
 801acf6:	2a00      	cmp	r2, #0
 801acf8:	ddec      	ble.n	801acd4 <_dtoa_r+0x96c>
 801acfa:	4629      	mov	r1, r5
 801acfc:	2201      	movs	r2, #1
 801acfe:	4630      	mov	r0, r6
 801ad00:	9304      	str	r3, [sp, #16]
 801ad02:	f000 fbad 	bl	801b460 <__lshift>
 801ad06:	4621      	mov	r1, r4
 801ad08:	4605      	mov	r5, r0
 801ad0a:	f000 fc15 	bl	801b538 <__mcmp>
 801ad0e:	2800      	cmp	r0, #0
 801ad10:	9b04      	ldr	r3, [sp, #16]
 801ad12:	dc02      	bgt.n	801ad1a <_dtoa_r+0x9b2>
 801ad14:	d1de      	bne.n	801acd4 <_dtoa_r+0x96c>
 801ad16:	07da      	lsls	r2, r3, #31
 801ad18:	d5dc      	bpl.n	801acd4 <_dtoa_r+0x96c>
 801ad1a:	2b39      	cmp	r3, #57	; 0x39
 801ad1c:	d1d8      	bne.n	801acd0 <_dtoa_r+0x968>
 801ad1e:	9a02      	ldr	r2, [sp, #8]
 801ad20:	2339      	movs	r3, #57	; 0x39
 801ad22:	7013      	strb	r3, [r2, #0]
 801ad24:	4643      	mov	r3, r8
 801ad26:	4698      	mov	r8, r3
 801ad28:	3b01      	subs	r3, #1
 801ad2a:	f818 2c01 	ldrb.w	r2, [r8, #-1]
 801ad2e:	2a39      	cmp	r2, #57	; 0x39
 801ad30:	d051      	beq.n	801add6 <_dtoa_r+0xa6e>
 801ad32:	3201      	adds	r2, #1
 801ad34:	701a      	strb	r2, [r3, #0]
 801ad36:	e746      	b.n	801abc6 <_dtoa_r+0x85e>
 801ad38:	2a00      	cmp	r2, #0
 801ad3a:	dd03      	ble.n	801ad44 <_dtoa_r+0x9dc>
 801ad3c:	2b39      	cmp	r3, #57	; 0x39
 801ad3e:	d0ee      	beq.n	801ad1e <_dtoa_r+0x9b6>
 801ad40:	3301      	adds	r3, #1
 801ad42:	e7c7      	b.n	801acd4 <_dtoa_r+0x96c>
 801ad44:	9a04      	ldr	r2, [sp, #16]
 801ad46:	9908      	ldr	r1, [sp, #32]
 801ad48:	f802 3c01 	strb.w	r3, [r2, #-1]
 801ad4c:	428a      	cmp	r2, r1
 801ad4e:	d02b      	beq.n	801ada8 <_dtoa_r+0xa40>
 801ad50:	4629      	mov	r1, r5
 801ad52:	2300      	movs	r3, #0
 801ad54:	220a      	movs	r2, #10
 801ad56:	4630      	mov	r0, r6
 801ad58:	f000 f9d4 	bl	801b104 <__multadd>
 801ad5c:	45b9      	cmp	r9, r7
 801ad5e:	4605      	mov	r5, r0
 801ad60:	f04f 0300 	mov.w	r3, #0
 801ad64:	f04f 020a 	mov.w	r2, #10
 801ad68:	4649      	mov	r1, r9
 801ad6a:	4630      	mov	r0, r6
 801ad6c:	d107      	bne.n	801ad7e <_dtoa_r+0xa16>
 801ad6e:	f000 f9c9 	bl	801b104 <__multadd>
 801ad72:	4681      	mov	r9, r0
 801ad74:	4607      	mov	r7, r0
 801ad76:	9b04      	ldr	r3, [sp, #16]
 801ad78:	3301      	adds	r3, #1
 801ad7a:	9304      	str	r3, [sp, #16]
 801ad7c:	e774      	b.n	801ac68 <_dtoa_r+0x900>
 801ad7e:	f000 f9c1 	bl	801b104 <__multadd>
 801ad82:	4639      	mov	r1, r7
 801ad84:	4681      	mov	r9, r0
 801ad86:	2300      	movs	r3, #0
 801ad88:	220a      	movs	r2, #10
 801ad8a:	4630      	mov	r0, r6
 801ad8c:	f000 f9ba 	bl	801b104 <__multadd>
 801ad90:	4607      	mov	r7, r0
 801ad92:	e7f0      	b.n	801ad76 <_dtoa_r+0xa0e>
 801ad94:	f1ba 0f00 	cmp.w	sl, #0
 801ad98:	9a01      	ldr	r2, [sp, #4]
 801ad9a:	bfcc      	ite	gt
 801ad9c:	46d0      	movgt	r8, sl
 801ad9e:	f04f 0801 	movle.w	r8, #1
 801ada2:	4490      	add	r8, r2
 801ada4:	f04f 0900 	mov.w	r9, #0
 801ada8:	4629      	mov	r1, r5
 801adaa:	2201      	movs	r2, #1
 801adac:	4630      	mov	r0, r6
 801adae:	9302      	str	r3, [sp, #8]
 801adb0:	f000 fb56 	bl	801b460 <__lshift>
 801adb4:	4621      	mov	r1, r4
 801adb6:	4605      	mov	r5, r0
 801adb8:	f000 fbbe 	bl	801b538 <__mcmp>
 801adbc:	2800      	cmp	r0, #0
 801adbe:	dcb1      	bgt.n	801ad24 <_dtoa_r+0x9bc>
 801adc0:	d102      	bne.n	801adc8 <_dtoa_r+0xa60>
 801adc2:	9b02      	ldr	r3, [sp, #8]
 801adc4:	07db      	lsls	r3, r3, #31
 801adc6:	d4ad      	bmi.n	801ad24 <_dtoa_r+0x9bc>
 801adc8:	4643      	mov	r3, r8
 801adca:	4698      	mov	r8, r3
 801adcc:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 801add0:	2a30      	cmp	r2, #48	; 0x30
 801add2:	d0fa      	beq.n	801adca <_dtoa_r+0xa62>
 801add4:	e6f7      	b.n	801abc6 <_dtoa_r+0x85e>
 801add6:	9a01      	ldr	r2, [sp, #4]
 801add8:	429a      	cmp	r2, r3
 801adda:	d1a4      	bne.n	801ad26 <_dtoa_r+0x9be>
 801addc:	f10b 0b01 	add.w	fp, fp, #1
 801ade0:	2331      	movs	r3, #49	; 0x31
 801ade2:	e778      	b.n	801acd6 <_dtoa_r+0x96e>
 801ade4:	4b14      	ldr	r3, [pc, #80]	; (801ae38 <_dtoa_r+0xad0>)
 801ade6:	f7ff bb2a 	b.w	801a43e <_dtoa_r+0xd6>
 801adea:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 801adec:	2b00      	cmp	r3, #0
 801adee:	f47f ab05 	bne.w	801a3fc <_dtoa_r+0x94>
 801adf2:	4b12      	ldr	r3, [pc, #72]	; (801ae3c <_dtoa_r+0xad4>)
 801adf4:	f7ff bb23 	b.w	801a43e <_dtoa_r+0xd6>
 801adf8:	f1ba 0f00 	cmp.w	sl, #0
 801adfc:	dc03      	bgt.n	801ae06 <_dtoa_r+0xa9e>
 801adfe:	9b06      	ldr	r3, [sp, #24]
 801ae00:	2b02      	cmp	r3, #2
 801ae02:	f73f aec8 	bgt.w	801ab96 <_dtoa_r+0x82e>
 801ae06:	f8dd 8004 	ldr.w	r8, [sp, #4]
 801ae0a:	4621      	mov	r1, r4
 801ae0c:	4628      	mov	r0, r5
 801ae0e:	f7ff fa23 	bl	801a258 <quorem>
 801ae12:	f100 0330 	add.w	r3, r0, #48	; 0x30
 801ae16:	f808 3b01 	strb.w	r3, [r8], #1
 801ae1a:	9a01      	ldr	r2, [sp, #4]
 801ae1c:	eba8 0202 	sub.w	r2, r8, r2
 801ae20:	4592      	cmp	sl, r2
 801ae22:	ddb7      	ble.n	801ad94 <_dtoa_r+0xa2c>
 801ae24:	4629      	mov	r1, r5
 801ae26:	2300      	movs	r3, #0
 801ae28:	220a      	movs	r2, #10
 801ae2a:	4630      	mov	r0, r6
 801ae2c:	f000 f96a 	bl	801b104 <__multadd>
 801ae30:	4605      	mov	r5, r0
 801ae32:	e7ea      	b.n	801ae0a <_dtoa_r+0xaa2>
 801ae34:	0801f723 	.word	0x0801f723
 801ae38:	0801f65e 	.word	0x0801f65e
 801ae3c:	0801f6be 	.word	0x0801f6be

0801ae40 <_free_r>:
 801ae40:	b537      	push	{r0, r1, r2, r4, r5, lr}
 801ae42:	2900      	cmp	r1, #0
 801ae44:	d044      	beq.n	801aed0 <_free_r+0x90>
 801ae46:	f851 3c04 	ldr.w	r3, [r1, #-4]
 801ae4a:	9001      	str	r0, [sp, #4]
 801ae4c:	2b00      	cmp	r3, #0
 801ae4e:	f1a1 0404 	sub.w	r4, r1, #4
 801ae52:	bfb8      	it	lt
 801ae54:	18e4      	addlt	r4, r4, r3
 801ae56:	f000 f8e7 	bl	801b028 <__malloc_lock>
 801ae5a:	4a1e      	ldr	r2, [pc, #120]	; (801aed4 <_free_r+0x94>)
 801ae5c:	9801      	ldr	r0, [sp, #4]
 801ae5e:	6813      	ldr	r3, [r2, #0]
 801ae60:	b933      	cbnz	r3, 801ae70 <_free_r+0x30>
 801ae62:	6063      	str	r3, [r4, #4]
 801ae64:	6014      	str	r4, [r2, #0]
 801ae66:	b003      	add	sp, #12
 801ae68:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 801ae6c:	f000 b8e2 	b.w	801b034 <__malloc_unlock>
 801ae70:	42a3      	cmp	r3, r4
 801ae72:	d908      	bls.n	801ae86 <_free_r+0x46>
 801ae74:	6825      	ldr	r5, [r4, #0]
 801ae76:	1961      	adds	r1, r4, r5
 801ae78:	428b      	cmp	r3, r1
 801ae7a:	bf01      	itttt	eq
 801ae7c:	6819      	ldreq	r1, [r3, #0]
 801ae7e:	685b      	ldreq	r3, [r3, #4]
 801ae80:	1949      	addeq	r1, r1, r5
 801ae82:	6021      	streq	r1, [r4, #0]
 801ae84:	e7ed      	b.n	801ae62 <_free_r+0x22>
 801ae86:	461a      	mov	r2, r3
 801ae88:	685b      	ldr	r3, [r3, #4]
 801ae8a:	b10b      	cbz	r3, 801ae90 <_free_r+0x50>
 801ae8c:	42a3      	cmp	r3, r4
 801ae8e:	d9fa      	bls.n	801ae86 <_free_r+0x46>
 801ae90:	6811      	ldr	r1, [r2, #0]
 801ae92:	1855      	adds	r5, r2, r1
 801ae94:	42a5      	cmp	r5, r4
 801ae96:	d10b      	bne.n	801aeb0 <_free_r+0x70>
 801ae98:	6824      	ldr	r4, [r4, #0]
 801ae9a:	4421      	add	r1, r4
 801ae9c:	1854      	adds	r4, r2, r1
 801ae9e:	42a3      	cmp	r3, r4
 801aea0:	6011      	str	r1, [r2, #0]
 801aea2:	d1e0      	bne.n	801ae66 <_free_r+0x26>
 801aea4:	681c      	ldr	r4, [r3, #0]
 801aea6:	685b      	ldr	r3, [r3, #4]
 801aea8:	6053      	str	r3, [r2, #4]
 801aeaa:	440c      	add	r4, r1
 801aeac:	6014      	str	r4, [r2, #0]
 801aeae:	e7da      	b.n	801ae66 <_free_r+0x26>
 801aeb0:	d902      	bls.n	801aeb8 <_free_r+0x78>
 801aeb2:	230c      	movs	r3, #12
 801aeb4:	6003      	str	r3, [r0, #0]
 801aeb6:	e7d6      	b.n	801ae66 <_free_r+0x26>
 801aeb8:	6825      	ldr	r5, [r4, #0]
 801aeba:	1961      	adds	r1, r4, r5
 801aebc:	428b      	cmp	r3, r1
 801aebe:	bf04      	itt	eq
 801aec0:	6819      	ldreq	r1, [r3, #0]
 801aec2:	685b      	ldreq	r3, [r3, #4]
 801aec4:	6063      	str	r3, [r4, #4]
 801aec6:	bf04      	itt	eq
 801aec8:	1949      	addeq	r1, r1, r5
 801aeca:	6021      	streq	r1, [r4, #0]
 801aecc:	6054      	str	r4, [r2, #4]
 801aece:	e7ca      	b.n	801ae66 <_free_r+0x26>
 801aed0:	b003      	add	sp, #12
 801aed2:	bd30      	pop	{r4, r5, pc}
 801aed4:	20007374 	.word	0x20007374

0801aed8 <malloc>:
 801aed8:	4b02      	ldr	r3, [pc, #8]	; (801aee4 <malloc+0xc>)
 801aeda:	4601      	mov	r1, r0
 801aedc:	6818      	ldr	r0, [r3, #0]
 801aede:	f000 b823 	b.w	801af28 <_malloc_r>
 801aee2:	bf00      	nop
 801aee4:	200000bc 	.word	0x200000bc

0801aee8 <sbrk_aligned>:
 801aee8:	b570      	push	{r4, r5, r6, lr}
 801aeea:	4e0e      	ldr	r6, [pc, #56]	; (801af24 <sbrk_aligned+0x3c>)
 801aeec:	460c      	mov	r4, r1
 801aeee:	6831      	ldr	r1, [r6, #0]
 801aef0:	4605      	mov	r5, r0
 801aef2:	b911      	cbnz	r1, 801aefa <sbrk_aligned+0x12>
 801aef4:	f000 fea8 	bl	801bc48 <_sbrk_r>
 801aef8:	6030      	str	r0, [r6, #0]
 801aefa:	4621      	mov	r1, r4
 801aefc:	4628      	mov	r0, r5
 801aefe:	f000 fea3 	bl	801bc48 <_sbrk_r>
 801af02:	1c43      	adds	r3, r0, #1
 801af04:	d00a      	beq.n	801af1c <sbrk_aligned+0x34>
 801af06:	1cc4      	adds	r4, r0, #3
 801af08:	f024 0403 	bic.w	r4, r4, #3
 801af0c:	42a0      	cmp	r0, r4
 801af0e:	d007      	beq.n	801af20 <sbrk_aligned+0x38>
 801af10:	1a21      	subs	r1, r4, r0
 801af12:	4628      	mov	r0, r5
 801af14:	f000 fe98 	bl	801bc48 <_sbrk_r>
 801af18:	3001      	adds	r0, #1
 801af1a:	d101      	bne.n	801af20 <sbrk_aligned+0x38>
 801af1c:	f04f 34ff 	mov.w	r4, #4294967295
 801af20:	4620      	mov	r0, r4
 801af22:	bd70      	pop	{r4, r5, r6, pc}
 801af24:	20007378 	.word	0x20007378

0801af28 <_malloc_r>:
 801af28:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 801af2c:	1ccd      	adds	r5, r1, #3
 801af2e:	f025 0503 	bic.w	r5, r5, #3
 801af32:	3508      	adds	r5, #8
 801af34:	2d0c      	cmp	r5, #12
 801af36:	bf38      	it	cc
 801af38:	250c      	movcc	r5, #12
 801af3a:	2d00      	cmp	r5, #0
 801af3c:	4607      	mov	r7, r0
 801af3e:	db01      	blt.n	801af44 <_malloc_r+0x1c>
 801af40:	42a9      	cmp	r1, r5
 801af42:	d905      	bls.n	801af50 <_malloc_r+0x28>
 801af44:	230c      	movs	r3, #12
 801af46:	603b      	str	r3, [r7, #0]
 801af48:	2600      	movs	r6, #0
 801af4a:	4630      	mov	r0, r6
 801af4c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801af50:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 801b024 <_malloc_r+0xfc>
 801af54:	f000 f868 	bl	801b028 <__malloc_lock>
 801af58:	f8d8 3000 	ldr.w	r3, [r8]
 801af5c:	461c      	mov	r4, r3
 801af5e:	bb5c      	cbnz	r4, 801afb8 <_malloc_r+0x90>
 801af60:	4629      	mov	r1, r5
 801af62:	4638      	mov	r0, r7
 801af64:	f7ff ffc0 	bl	801aee8 <sbrk_aligned>
 801af68:	1c43      	adds	r3, r0, #1
 801af6a:	4604      	mov	r4, r0
 801af6c:	d155      	bne.n	801b01a <_malloc_r+0xf2>
 801af6e:	f8d8 4000 	ldr.w	r4, [r8]
 801af72:	4626      	mov	r6, r4
 801af74:	2e00      	cmp	r6, #0
 801af76:	d145      	bne.n	801b004 <_malloc_r+0xdc>
 801af78:	2c00      	cmp	r4, #0
 801af7a:	d048      	beq.n	801b00e <_malloc_r+0xe6>
 801af7c:	6823      	ldr	r3, [r4, #0]
 801af7e:	4631      	mov	r1, r6
 801af80:	4638      	mov	r0, r7
 801af82:	eb04 0903 	add.w	r9, r4, r3
 801af86:	f000 fe5f 	bl	801bc48 <_sbrk_r>
 801af8a:	4581      	cmp	r9, r0
 801af8c:	d13f      	bne.n	801b00e <_malloc_r+0xe6>
 801af8e:	6821      	ldr	r1, [r4, #0]
 801af90:	1a6d      	subs	r5, r5, r1
 801af92:	4629      	mov	r1, r5
 801af94:	4638      	mov	r0, r7
 801af96:	f7ff ffa7 	bl	801aee8 <sbrk_aligned>
 801af9a:	3001      	adds	r0, #1
 801af9c:	d037      	beq.n	801b00e <_malloc_r+0xe6>
 801af9e:	6823      	ldr	r3, [r4, #0]
 801afa0:	442b      	add	r3, r5
 801afa2:	6023      	str	r3, [r4, #0]
 801afa4:	f8d8 3000 	ldr.w	r3, [r8]
 801afa8:	2b00      	cmp	r3, #0
 801afaa:	d038      	beq.n	801b01e <_malloc_r+0xf6>
 801afac:	685a      	ldr	r2, [r3, #4]
 801afae:	42a2      	cmp	r2, r4
 801afb0:	d12b      	bne.n	801b00a <_malloc_r+0xe2>
 801afb2:	2200      	movs	r2, #0
 801afb4:	605a      	str	r2, [r3, #4]
 801afb6:	e00f      	b.n	801afd8 <_malloc_r+0xb0>
 801afb8:	6822      	ldr	r2, [r4, #0]
 801afba:	1b52      	subs	r2, r2, r5
 801afbc:	d41f      	bmi.n	801affe <_malloc_r+0xd6>
 801afbe:	2a0b      	cmp	r2, #11
 801afc0:	d917      	bls.n	801aff2 <_malloc_r+0xca>
 801afc2:	1961      	adds	r1, r4, r5
 801afc4:	42a3      	cmp	r3, r4
 801afc6:	6025      	str	r5, [r4, #0]
 801afc8:	bf18      	it	ne
 801afca:	6059      	strne	r1, [r3, #4]
 801afcc:	6863      	ldr	r3, [r4, #4]
 801afce:	bf08      	it	eq
 801afd0:	f8c8 1000 	streq.w	r1, [r8]
 801afd4:	5162      	str	r2, [r4, r5]
 801afd6:	604b      	str	r3, [r1, #4]
 801afd8:	4638      	mov	r0, r7
 801afda:	f104 060b 	add.w	r6, r4, #11
 801afde:	f000 f829 	bl	801b034 <__malloc_unlock>
 801afe2:	f026 0607 	bic.w	r6, r6, #7
 801afe6:	1d23      	adds	r3, r4, #4
 801afe8:	1af2      	subs	r2, r6, r3
 801afea:	d0ae      	beq.n	801af4a <_malloc_r+0x22>
 801afec:	1b9b      	subs	r3, r3, r6
 801afee:	50a3      	str	r3, [r4, r2]
 801aff0:	e7ab      	b.n	801af4a <_malloc_r+0x22>
 801aff2:	42a3      	cmp	r3, r4
 801aff4:	6862      	ldr	r2, [r4, #4]
 801aff6:	d1dd      	bne.n	801afb4 <_malloc_r+0x8c>
 801aff8:	f8c8 2000 	str.w	r2, [r8]
 801affc:	e7ec      	b.n	801afd8 <_malloc_r+0xb0>
 801affe:	4623      	mov	r3, r4
 801b000:	6864      	ldr	r4, [r4, #4]
 801b002:	e7ac      	b.n	801af5e <_malloc_r+0x36>
 801b004:	4634      	mov	r4, r6
 801b006:	6876      	ldr	r6, [r6, #4]
 801b008:	e7b4      	b.n	801af74 <_malloc_r+0x4c>
 801b00a:	4613      	mov	r3, r2
 801b00c:	e7cc      	b.n	801afa8 <_malloc_r+0x80>
 801b00e:	230c      	movs	r3, #12
 801b010:	603b      	str	r3, [r7, #0]
 801b012:	4638      	mov	r0, r7
 801b014:	f000 f80e 	bl	801b034 <__malloc_unlock>
 801b018:	e797      	b.n	801af4a <_malloc_r+0x22>
 801b01a:	6025      	str	r5, [r4, #0]
 801b01c:	e7dc      	b.n	801afd8 <_malloc_r+0xb0>
 801b01e:	605b      	str	r3, [r3, #4]
 801b020:	deff      	udf	#255	; 0xff
 801b022:	bf00      	nop
 801b024:	20007374 	.word	0x20007374

0801b028 <__malloc_lock>:
 801b028:	4801      	ldr	r0, [pc, #4]	; (801b030 <__malloc_lock+0x8>)
 801b02a:	f7ff b8e6 	b.w	801a1fa <__retarget_lock_acquire_recursive>
 801b02e:	bf00      	nop
 801b030:	20007370 	.word	0x20007370

0801b034 <__malloc_unlock>:
 801b034:	4801      	ldr	r0, [pc, #4]	; (801b03c <__malloc_unlock+0x8>)
 801b036:	f7ff b8e1 	b.w	801a1fc <__retarget_lock_release_recursive>
 801b03a:	bf00      	nop
 801b03c:	20007370 	.word	0x20007370

0801b040 <_Balloc>:
 801b040:	b570      	push	{r4, r5, r6, lr}
 801b042:	69c6      	ldr	r6, [r0, #28]
 801b044:	4604      	mov	r4, r0
 801b046:	460d      	mov	r5, r1
 801b048:	b976      	cbnz	r6, 801b068 <_Balloc+0x28>
 801b04a:	2010      	movs	r0, #16
 801b04c:	f7ff ff44 	bl	801aed8 <malloc>
 801b050:	4602      	mov	r2, r0
 801b052:	61e0      	str	r0, [r4, #28]
 801b054:	b920      	cbnz	r0, 801b060 <_Balloc+0x20>
 801b056:	4b18      	ldr	r3, [pc, #96]	; (801b0b8 <_Balloc+0x78>)
 801b058:	4818      	ldr	r0, [pc, #96]	; (801b0bc <_Balloc+0x7c>)
 801b05a:	216b      	movs	r1, #107	; 0x6b
 801b05c:	f7ff f8de 	bl	801a21c <__assert_func>
 801b060:	e9c0 6601 	strd	r6, r6, [r0, #4]
 801b064:	6006      	str	r6, [r0, #0]
 801b066:	60c6      	str	r6, [r0, #12]
 801b068:	69e6      	ldr	r6, [r4, #28]
 801b06a:	68f3      	ldr	r3, [r6, #12]
 801b06c:	b183      	cbz	r3, 801b090 <_Balloc+0x50>
 801b06e:	69e3      	ldr	r3, [r4, #28]
 801b070:	68db      	ldr	r3, [r3, #12]
 801b072:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 801b076:	b9b8      	cbnz	r0, 801b0a8 <_Balloc+0x68>
 801b078:	2101      	movs	r1, #1
 801b07a:	fa01 f605 	lsl.w	r6, r1, r5
 801b07e:	1d72      	adds	r2, r6, #5
 801b080:	0092      	lsls	r2, r2, #2
 801b082:	4620      	mov	r0, r4
 801b084:	f000 fdf7 	bl	801bc76 <_calloc_r>
 801b088:	b160      	cbz	r0, 801b0a4 <_Balloc+0x64>
 801b08a:	e9c0 5601 	strd	r5, r6, [r0, #4]
 801b08e:	e00e      	b.n	801b0ae <_Balloc+0x6e>
 801b090:	2221      	movs	r2, #33	; 0x21
 801b092:	2104      	movs	r1, #4
 801b094:	4620      	mov	r0, r4
 801b096:	f000 fdee 	bl	801bc76 <_calloc_r>
 801b09a:	69e3      	ldr	r3, [r4, #28]
 801b09c:	60f0      	str	r0, [r6, #12]
 801b09e:	68db      	ldr	r3, [r3, #12]
 801b0a0:	2b00      	cmp	r3, #0
 801b0a2:	d1e4      	bne.n	801b06e <_Balloc+0x2e>
 801b0a4:	2000      	movs	r0, #0
 801b0a6:	bd70      	pop	{r4, r5, r6, pc}
 801b0a8:	6802      	ldr	r2, [r0, #0]
 801b0aa:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 801b0ae:	2300      	movs	r3, #0
 801b0b0:	e9c0 3303 	strd	r3, r3, [r0, #12]
 801b0b4:	e7f7      	b.n	801b0a6 <_Balloc+0x66>
 801b0b6:	bf00      	nop
 801b0b8:	0801f4de 	.word	0x0801f4de
 801b0bc:	0801f734 	.word	0x0801f734

0801b0c0 <_Bfree>:
 801b0c0:	b570      	push	{r4, r5, r6, lr}
 801b0c2:	69c6      	ldr	r6, [r0, #28]
 801b0c4:	4605      	mov	r5, r0
 801b0c6:	460c      	mov	r4, r1
 801b0c8:	b976      	cbnz	r6, 801b0e8 <_Bfree+0x28>
 801b0ca:	2010      	movs	r0, #16
 801b0cc:	f7ff ff04 	bl	801aed8 <malloc>
 801b0d0:	4602      	mov	r2, r0
 801b0d2:	61e8      	str	r0, [r5, #28]
 801b0d4:	b920      	cbnz	r0, 801b0e0 <_Bfree+0x20>
 801b0d6:	4b09      	ldr	r3, [pc, #36]	; (801b0fc <_Bfree+0x3c>)
 801b0d8:	4809      	ldr	r0, [pc, #36]	; (801b100 <_Bfree+0x40>)
 801b0da:	218f      	movs	r1, #143	; 0x8f
 801b0dc:	f7ff f89e 	bl	801a21c <__assert_func>
 801b0e0:	e9c0 6601 	strd	r6, r6, [r0, #4]
 801b0e4:	6006      	str	r6, [r0, #0]
 801b0e6:	60c6      	str	r6, [r0, #12]
 801b0e8:	b13c      	cbz	r4, 801b0fa <_Bfree+0x3a>
 801b0ea:	69eb      	ldr	r3, [r5, #28]
 801b0ec:	6862      	ldr	r2, [r4, #4]
 801b0ee:	68db      	ldr	r3, [r3, #12]
 801b0f0:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 801b0f4:	6021      	str	r1, [r4, #0]
 801b0f6:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 801b0fa:	bd70      	pop	{r4, r5, r6, pc}
 801b0fc:	0801f4de 	.word	0x0801f4de
 801b100:	0801f734 	.word	0x0801f734

0801b104 <__multadd>:
 801b104:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801b108:	690d      	ldr	r5, [r1, #16]
 801b10a:	4607      	mov	r7, r0
 801b10c:	460c      	mov	r4, r1
 801b10e:	461e      	mov	r6, r3
 801b110:	f101 0c14 	add.w	ip, r1, #20
 801b114:	2000      	movs	r0, #0
 801b116:	f8dc 3000 	ldr.w	r3, [ip]
 801b11a:	b299      	uxth	r1, r3
 801b11c:	fb02 6101 	mla	r1, r2, r1, r6
 801b120:	0c1e      	lsrs	r6, r3, #16
 801b122:	0c0b      	lsrs	r3, r1, #16
 801b124:	fb02 3306 	mla	r3, r2, r6, r3
 801b128:	b289      	uxth	r1, r1
 801b12a:	3001      	adds	r0, #1
 801b12c:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 801b130:	4285      	cmp	r5, r0
 801b132:	f84c 1b04 	str.w	r1, [ip], #4
 801b136:	ea4f 4613 	mov.w	r6, r3, lsr #16
 801b13a:	dcec      	bgt.n	801b116 <__multadd+0x12>
 801b13c:	b30e      	cbz	r6, 801b182 <__multadd+0x7e>
 801b13e:	68a3      	ldr	r3, [r4, #8]
 801b140:	42ab      	cmp	r3, r5
 801b142:	dc19      	bgt.n	801b178 <__multadd+0x74>
 801b144:	6861      	ldr	r1, [r4, #4]
 801b146:	4638      	mov	r0, r7
 801b148:	3101      	adds	r1, #1
 801b14a:	f7ff ff79 	bl	801b040 <_Balloc>
 801b14e:	4680      	mov	r8, r0
 801b150:	b928      	cbnz	r0, 801b15e <__multadd+0x5a>
 801b152:	4602      	mov	r2, r0
 801b154:	4b0c      	ldr	r3, [pc, #48]	; (801b188 <__multadd+0x84>)
 801b156:	480d      	ldr	r0, [pc, #52]	; (801b18c <__multadd+0x88>)
 801b158:	21ba      	movs	r1, #186	; 0xba
 801b15a:	f7ff f85f 	bl	801a21c <__assert_func>
 801b15e:	6922      	ldr	r2, [r4, #16]
 801b160:	3202      	adds	r2, #2
 801b162:	f104 010c 	add.w	r1, r4, #12
 801b166:	0092      	lsls	r2, r2, #2
 801b168:	300c      	adds	r0, #12
 801b16a:	f7ff f848 	bl	801a1fe <memcpy>
 801b16e:	4621      	mov	r1, r4
 801b170:	4638      	mov	r0, r7
 801b172:	f7ff ffa5 	bl	801b0c0 <_Bfree>
 801b176:	4644      	mov	r4, r8
 801b178:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 801b17c:	3501      	adds	r5, #1
 801b17e:	615e      	str	r6, [r3, #20]
 801b180:	6125      	str	r5, [r4, #16]
 801b182:	4620      	mov	r0, r4
 801b184:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801b188:	0801f723 	.word	0x0801f723
 801b18c:	0801f734 	.word	0x0801f734

0801b190 <__hi0bits>:
 801b190:	0c03      	lsrs	r3, r0, #16
 801b192:	041b      	lsls	r3, r3, #16
 801b194:	b9d3      	cbnz	r3, 801b1cc <__hi0bits+0x3c>
 801b196:	0400      	lsls	r0, r0, #16
 801b198:	2310      	movs	r3, #16
 801b19a:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 801b19e:	bf04      	itt	eq
 801b1a0:	0200      	lsleq	r0, r0, #8
 801b1a2:	3308      	addeq	r3, #8
 801b1a4:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 801b1a8:	bf04      	itt	eq
 801b1aa:	0100      	lsleq	r0, r0, #4
 801b1ac:	3304      	addeq	r3, #4
 801b1ae:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 801b1b2:	bf04      	itt	eq
 801b1b4:	0080      	lsleq	r0, r0, #2
 801b1b6:	3302      	addeq	r3, #2
 801b1b8:	2800      	cmp	r0, #0
 801b1ba:	db05      	blt.n	801b1c8 <__hi0bits+0x38>
 801b1bc:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 801b1c0:	f103 0301 	add.w	r3, r3, #1
 801b1c4:	bf08      	it	eq
 801b1c6:	2320      	moveq	r3, #32
 801b1c8:	4618      	mov	r0, r3
 801b1ca:	4770      	bx	lr
 801b1cc:	2300      	movs	r3, #0
 801b1ce:	e7e4      	b.n	801b19a <__hi0bits+0xa>

0801b1d0 <__lo0bits>:
 801b1d0:	6803      	ldr	r3, [r0, #0]
 801b1d2:	f013 0207 	ands.w	r2, r3, #7
 801b1d6:	d00c      	beq.n	801b1f2 <__lo0bits+0x22>
 801b1d8:	07d9      	lsls	r1, r3, #31
 801b1da:	d422      	bmi.n	801b222 <__lo0bits+0x52>
 801b1dc:	079a      	lsls	r2, r3, #30
 801b1de:	bf49      	itett	mi
 801b1e0:	085b      	lsrmi	r3, r3, #1
 801b1e2:	089b      	lsrpl	r3, r3, #2
 801b1e4:	6003      	strmi	r3, [r0, #0]
 801b1e6:	2201      	movmi	r2, #1
 801b1e8:	bf5c      	itt	pl
 801b1ea:	6003      	strpl	r3, [r0, #0]
 801b1ec:	2202      	movpl	r2, #2
 801b1ee:	4610      	mov	r0, r2
 801b1f0:	4770      	bx	lr
 801b1f2:	b299      	uxth	r1, r3
 801b1f4:	b909      	cbnz	r1, 801b1fa <__lo0bits+0x2a>
 801b1f6:	0c1b      	lsrs	r3, r3, #16
 801b1f8:	2210      	movs	r2, #16
 801b1fa:	b2d9      	uxtb	r1, r3
 801b1fc:	b909      	cbnz	r1, 801b202 <__lo0bits+0x32>
 801b1fe:	3208      	adds	r2, #8
 801b200:	0a1b      	lsrs	r3, r3, #8
 801b202:	0719      	lsls	r1, r3, #28
 801b204:	bf04      	itt	eq
 801b206:	091b      	lsreq	r3, r3, #4
 801b208:	3204      	addeq	r2, #4
 801b20a:	0799      	lsls	r1, r3, #30
 801b20c:	bf04      	itt	eq
 801b20e:	089b      	lsreq	r3, r3, #2
 801b210:	3202      	addeq	r2, #2
 801b212:	07d9      	lsls	r1, r3, #31
 801b214:	d403      	bmi.n	801b21e <__lo0bits+0x4e>
 801b216:	085b      	lsrs	r3, r3, #1
 801b218:	f102 0201 	add.w	r2, r2, #1
 801b21c:	d003      	beq.n	801b226 <__lo0bits+0x56>
 801b21e:	6003      	str	r3, [r0, #0]
 801b220:	e7e5      	b.n	801b1ee <__lo0bits+0x1e>
 801b222:	2200      	movs	r2, #0
 801b224:	e7e3      	b.n	801b1ee <__lo0bits+0x1e>
 801b226:	2220      	movs	r2, #32
 801b228:	e7e1      	b.n	801b1ee <__lo0bits+0x1e>
	...

0801b22c <__i2b>:
 801b22c:	b510      	push	{r4, lr}
 801b22e:	460c      	mov	r4, r1
 801b230:	2101      	movs	r1, #1
 801b232:	f7ff ff05 	bl	801b040 <_Balloc>
 801b236:	4602      	mov	r2, r0
 801b238:	b928      	cbnz	r0, 801b246 <__i2b+0x1a>
 801b23a:	4b05      	ldr	r3, [pc, #20]	; (801b250 <__i2b+0x24>)
 801b23c:	4805      	ldr	r0, [pc, #20]	; (801b254 <__i2b+0x28>)
 801b23e:	f240 1145 	movw	r1, #325	; 0x145
 801b242:	f7fe ffeb 	bl	801a21c <__assert_func>
 801b246:	2301      	movs	r3, #1
 801b248:	6144      	str	r4, [r0, #20]
 801b24a:	6103      	str	r3, [r0, #16]
 801b24c:	bd10      	pop	{r4, pc}
 801b24e:	bf00      	nop
 801b250:	0801f723 	.word	0x0801f723
 801b254:	0801f734 	.word	0x0801f734

0801b258 <__multiply>:
 801b258:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801b25c:	4691      	mov	r9, r2
 801b25e:	690a      	ldr	r2, [r1, #16]
 801b260:	f8d9 3010 	ldr.w	r3, [r9, #16]
 801b264:	429a      	cmp	r2, r3
 801b266:	bfb8      	it	lt
 801b268:	460b      	movlt	r3, r1
 801b26a:	460c      	mov	r4, r1
 801b26c:	bfbc      	itt	lt
 801b26e:	464c      	movlt	r4, r9
 801b270:	4699      	movlt	r9, r3
 801b272:	6927      	ldr	r7, [r4, #16]
 801b274:	f8d9 a010 	ldr.w	sl, [r9, #16]
 801b278:	68a3      	ldr	r3, [r4, #8]
 801b27a:	6861      	ldr	r1, [r4, #4]
 801b27c:	eb07 060a 	add.w	r6, r7, sl
 801b280:	42b3      	cmp	r3, r6
 801b282:	b085      	sub	sp, #20
 801b284:	bfb8      	it	lt
 801b286:	3101      	addlt	r1, #1
 801b288:	f7ff feda 	bl	801b040 <_Balloc>
 801b28c:	b930      	cbnz	r0, 801b29c <__multiply+0x44>
 801b28e:	4602      	mov	r2, r0
 801b290:	4b44      	ldr	r3, [pc, #272]	; (801b3a4 <__multiply+0x14c>)
 801b292:	4845      	ldr	r0, [pc, #276]	; (801b3a8 <__multiply+0x150>)
 801b294:	f44f 71b1 	mov.w	r1, #354	; 0x162
 801b298:	f7fe ffc0 	bl	801a21c <__assert_func>
 801b29c:	f100 0514 	add.w	r5, r0, #20
 801b2a0:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 801b2a4:	462b      	mov	r3, r5
 801b2a6:	2200      	movs	r2, #0
 801b2a8:	4543      	cmp	r3, r8
 801b2aa:	d321      	bcc.n	801b2f0 <__multiply+0x98>
 801b2ac:	f104 0314 	add.w	r3, r4, #20
 801b2b0:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 801b2b4:	f109 0314 	add.w	r3, r9, #20
 801b2b8:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 801b2bc:	9202      	str	r2, [sp, #8]
 801b2be:	1b3a      	subs	r2, r7, r4
 801b2c0:	3a15      	subs	r2, #21
 801b2c2:	f022 0203 	bic.w	r2, r2, #3
 801b2c6:	3204      	adds	r2, #4
 801b2c8:	f104 0115 	add.w	r1, r4, #21
 801b2cc:	428f      	cmp	r7, r1
 801b2ce:	bf38      	it	cc
 801b2d0:	2204      	movcc	r2, #4
 801b2d2:	9201      	str	r2, [sp, #4]
 801b2d4:	9a02      	ldr	r2, [sp, #8]
 801b2d6:	9303      	str	r3, [sp, #12]
 801b2d8:	429a      	cmp	r2, r3
 801b2da:	d80c      	bhi.n	801b2f6 <__multiply+0x9e>
 801b2dc:	2e00      	cmp	r6, #0
 801b2de:	dd03      	ble.n	801b2e8 <__multiply+0x90>
 801b2e0:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 801b2e4:	2b00      	cmp	r3, #0
 801b2e6:	d05b      	beq.n	801b3a0 <__multiply+0x148>
 801b2e8:	6106      	str	r6, [r0, #16]
 801b2ea:	b005      	add	sp, #20
 801b2ec:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801b2f0:	f843 2b04 	str.w	r2, [r3], #4
 801b2f4:	e7d8      	b.n	801b2a8 <__multiply+0x50>
 801b2f6:	f8b3 a000 	ldrh.w	sl, [r3]
 801b2fa:	f1ba 0f00 	cmp.w	sl, #0
 801b2fe:	d024      	beq.n	801b34a <__multiply+0xf2>
 801b300:	f104 0e14 	add.w	lr, r4, #20
 801b304:	46a9      	mov	r9, r5
 801b306:	f04f 0c00 	mov.w	ip, #0
 801b30a:	f85e 2b04 	ldr.w	r2, [lr], #4
 801b30e:	f8d9 1000 	ldr.w	r1, [r9]
 801b312:	fa1f fb82 	uxth.w	fp, r2
 801b316:	b289      	uxth	r1, r1
 801b318:	fb0a 110b 	mla	r1, sl, fp, r1
 801b31c:	ea4f 4b12 	mov.w	fp, r2, lsr #16
 801b320:	f8d9 2000 	ldr.w	r2, [r9]
 801b324:	4461      	add	r1, ip
 801b326:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 801b32a:	fb0a c20b 	mla	r2, sl, fp, ip
 801b32e:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 801b332:	b289      	uxth	r1, r1
 801b334:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 801b338:	4577      	cmp	r7, lr
 801b33a:	f849 1b04 	str.w	r1, [r9], #4
 801b33e:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 801b342:	d8e2      	bhi.n	801b30a <__multiply+0xb2>
 801b344:	9a01      	ldr	r2, [sp, #4]
 801b346:	f845 c002 	str.w	ip, [r5, r2]
 801b34a:	9a03      	ldr	r2, [sp, #12]
 801b34c:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 801b350:	3304      	adds	r3, #4
 801b352:	f1b9 0f00 	cmp.w	r9, #0
 801b356:	d021      	beq.n	801b39c <__multiply+0x144>
 801b358:	6829      	ldr	r1, [r5, #0]
 801b35a:	f104 0c14 	add.w	ip, r4, #20
 801b35e:	46ae      	mov	lr, r5
 801b360:	f04f 0a00 	mov.w	sl, #0
 801b364:	f8bc b000 	ldrh.w	fp, [ip]
 801b368:	f8be 2002 	ldrh.w	r2, [lr, #2]
 801b36c:	fb09 220b 	mla	r2, r9, fp, r2
 801b370:	4452      	add	r2, sl
 801b372:	b289      	uxth	r1, r1
 801b374:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 801b378:	f84e 1b04 	str.w	r1, [lr], #4
 801b37c:	f85c 1b04 	ldr.w	r1, [ip], #4
 801b380:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 801b384:	f8be 1000 	ldrh.w	r1, [lr]
 801b388:	fb09 110a 	mla	r1, r9, sl, r1
 801b38c:	eb01 4112 	add.w	r1, r1, r2, lsr #16
 801b390:	4567      	cmp	r7, ip
 801b392:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 801b396:	d8e5      	bhi.n	801b364 <__multiply+0x10c>
 801b398:	9a01      	ldr	r2, [sp, #4]
 801b39a:	50a9      	str	r1, [r5, r2]
 801b39c:	3504      	adds	r5, #4
 801b39e:	e799      	b.n	801b2d4 <__multiply+0x7c>
 801b3a0:	3e01      	subs	r6, #1
 801b3a2:	e79b      	b.n	801b2dc <__multiply+0x84>
 801b3a4:	0801f723 	.word	0x0801f723
 801b3a8:	0801f734 	.word	0x0801f734

0801b3ac <__pow5mult>:
 801b3ac:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 801b3b0:	4615      	mov	r5, r2
 801b3b2:	f012 0203 	ands.w	r2, r2, #3
 801b3b6:	4606      	mov	r6, r0
 801b3b8:	460f      	mov	r7, r1
 801b3ba:	d007      	beq.n	801b3cc <__pow5mult+0x20>
 801b3bc:	4c25      	ldr	r4, [pc, #148]	; (801b454 <__pow5mult+0xa8>)
 801b3be:	3a01      	subs	r2, #1
 801b3c0:	2300      	movs	r3, #0
 801b3c2:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 801b3c6:	f7ff fe9d 	bl	801b104 <__multadd>
 801b3ca:	4607      	mov	r7, r0
 801b3cc:	10ad      	asrs	r5, r5, #2
 801b3ce:	d03d      	beq.n	801b44c <__pow5mult+0xa0>
 801b3d0:	69f4      	ldr	r4, [r6, #28]
 801b3d2:	b97c      	cbnz	r4, 801b3f4 <__pow5mult+0x48>
 801b3d4:	2010      	movs	r0, #16
 801b3d6:	f7ff fd7f 	bl	801aed8 <malloc>
 801b3da:	4602      	mov	r2, r0
 801b3dc:	61f0      	str	r0, [r6, #28]
 801b3de:	b928      	cbnz	r0, 801b3ec <__pow5mult+0x40>
 801b3e0:	4b1d      	ldr	r3, [pc, #116]	; (801b458 <__pow5mult+0xac>)
 801b3e2:	481e      	ldr	r0, [pc, #120]	; (801b45c <__pow5mult+0xb0>)
 801b3e4:	f240 11b3 	movw	r1, #435	; 0x1b3
 801b3e8:	f7fe ff18 	bl	801a21c <__assert_func>
 801b3ec:	e9c0 4401 	strd	r4, r4, [r0, #4]
 801b3f0:	6004      	str	r4, [r0, #0]
 801b3f2:	60c4      	str	r4, [r0, #12]
 801b3f4:	f8d6 801c 	ldr.w	r8, [r6, #28]
 801b3f8:	f8d8 4008 	ldr.w	r4, [r8, #8]
 801b3fc:	b94c      	cbnz	r4, 801b412 <__pow5mult+0x66>
 801b3fe:	f240 2171 	movw	r1, #625	; 0x271
 801b402:	4630      	mov	r0, r6
 801b404:	f7ff ff12 	bl	801b22c <__i2b>
 801b408:	2300      	movs	r3, #0
 801b40a:	f8c8 0008 	str.w	r0, [r8, #8]
 801b40e:	4604      	mov	r4, r0
 801b410:	6003      	str	r3, [r0, #0]
 801b412:	f04f 0900 	mov.w	r9, #0
 801b416:	07eb      	lsls	r3, r5, #31
 801b418:	d50a      	bpl.n	801b430 <__pow5mult+0x84>
 801b41a:	4639      	mov	r1, r7
 801b41c:	4622      	mov	r2, r4
 801b41e:	4630      	mov	r0, r6
 801b420:	f7ff ff1a 	bl	801b258 <__multiply>
 801b424:	4639      	mov	r1, r7
 801b426:	4680      	mov	r8, r0
 801b428:	4630      	mov	r0, r6
 801b42a:	f7ff fe49 	bl	801b0c0 <_Bfree>
 801b42e:	4647      	mov	r7, r8
 801b430:	106d      	asrs	r5, r5, #1
 801b432:	d00b      	beq.n	801b44c <__pow5mult+0xa0>
 801b434:	6820      	ldr	r0, [r4, #0]
 801b436:	b938      	cbnz	r0, 801b448 <__pow5mult+0x9c>
 801b438:	4622      	mov	r2, r4
 801b43a:	4621      	mov	r1, r4
 801b43c:	4630      	mov	r0, r6
 801b43e:	f7ff ff0b 	bl	801b258 <__multiply>
 801b442:	6020      	str	r0, [r4, #0]
 801b444:	f8c0 9000 	str.w	r9, [r0]
 801b448:	4604      	mov	r4, r0
 801b44a:	e7e4      	b.n	801b416 <__pow5mult+0x6a>
 801b44c:	4638      	mov	r0, r7
 801b44e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801b452:	bf00      	nop
 801b454:	0801f880 	.word	0x0801f880
 801b458:	0801f4de 	.word	0x0801f4de
 801b45c:	0801f734 	.word	0x0801f734

0801b460 <__lshift>:
 801b460:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801b464:	460c      	mov	r4, r1
 801b466:	6849      	ldr	r1, [r1, #4]
 801b468:	6923      	ldr	r3, [r4, #16]
 801b46a:	eb03 1862 	add.w	r8, r3, r2, asr #5
 801b46e:	68a3      	ldr	r3, [r4, #8]
 801b470:	4607      	mov	r7, r0
 801b472:	4691      	mov	r9, r2
 801b474:	ea4f 1a62 	mov.w	sl, r2, asr #5
 801b478:	f108 0601 	add.w	r6, r8, #1
 801b47c:	42b3      	cmp	r3, r6
 801b47e:	db0b      	blt.n	801b498 <__lshift+0x38>
 801b480:	4638      	mov	r0, r7
 801b482:	f7ff fddd 	bl	801b040 <_Balloc>
 801b486:	4605      	mov	r5, r0
 801b488:	b948      	cbnz	r0, 801b49e <__lshift+0x3e>
 801b48a:	4602      	mov	r2, r0
 801b48c:	4b28      	ldr	r3, [pc, #160]	; (801b530 <__lshift+0xd0>)
 801b48e:	4829      	ldr	r0, [pc, #164]	; (801b534 <__lshift+0xd4>)
 801b490:	f44f 71ef 	mov.w	r1, #478	; 0x1de
 801b494:	f7fe fec2 	bl	801a21c <__assert_func>
 801b498:	3101      	adds	r1, #1
 801b49a:	005b      	lsls	r3, r3, #1
 801b49c:	e7ee      	b.n	801b47c <__lshift+0x1c>
 801b49e:	2300      	movs	r3, #0
 801b4a0:	f100 0114 	add.w	r1, r0, #20
 801b4a4:	f100 0210 	add.w	r2, r0, #16
 801b4a8:	4618      	mov	r0, r3
 801b4aa:	4553      	cmp	r3, sl
 801b4ac:	db33      	blt.n	801b516 <__lshift+0xb6>
 801b4ae:	6920      	ldr	r0, [r4, #16]
 801b4b0:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 801b4b4:	f104 0314 	add.w	r3, r4, #20
 801b4b8:	f019 091f 	ands.w	r9, r9, #31
 801b4bc:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 801b4c0:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 801b4c4:	d02b      	beq.n	801b51e <__lshift+0xbe>
 801b4c6:	f1c9 0e20 	rsb	lr, r9, #32
 801b4ca:	468a      	mov	sl, r1
 801b4cc:	2200      	movs	r2, #0
 801b4ce:	6818      	ldr	r0, [r3, #0]
 801b4d0:	fa00 f009 	lsl.w	r0, r0, r9
 801b4d4:	4310      	orrs	r0, r2
 801b4d6:	f84a 0b04 	str.w	r0, [sl], #4
 801b4da:	f853 2b04 	ldr.w	r2, [r3], #4
 801b4de:	459c      	cmp	ip, r3
 801b4e0:	fa22 f20e 	lsr.w	r2, r2, lr
 801b4e4:	d8f3      	bhi.n	801b4ce <__lshift+0x6e>
 801b4e6:	ebac 0304 	sub.w	r3, ip, r4
 801b4ea:	3b15      	subs	r3, #21
 801b4ec:	f023 0303 	bic.w	r3, r3, #3
 801b4f0:	3304      	adds	r3, #4
 801b4f2:	f104 0015 	add.w	r0, r4, #21
 801b4f6:	4584      	cmp	ip, r0
 801b4f8:	bf38      	it	cc
 801b4fa:	2304      	movcc	r3, #4
 801b4fc:	50ca      	str	r2, [r1, r3]
 801b4fe:	b10a      	cbz	r2, 801b504 <__lshift+0xa4>
 801b500:	f108 0602 	add.w	r6, r8, #2
 801b504:	3e01      	subs	r6, #1
 801b506:	4638      	mov	r0, r7
 801b508:	612e      	str	r6, [r5, #16]
 801b50a:	4621      	mov	r1, r4
 801b50c:	f7ff fdd8 	bl	801b0c0 <_Bfree>
 801b510:	4628      	mov	r0, r5
 801b512:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801b516:	f842 0f04 	str.w	r0, [r2, #4]!
 801b51a:	3301      	adds	r3, #1
 801b51c:	e7c5      	b.n	801b4aa <__lshift+0x4a>
 801b51e:	3904      	subs	r1, #4
 801b520:	f853 2b04 	ldr.w	r2, [r3], #4
 801b524:	f841 2f04 	str.w	r2, [r1, #4]!
 801b528:	459c      	cmp	ip, r3
 801b52a:	d8f9      	bhi.n	801b520 <__lshift+0xc0>
 801b52c:	e7ea      	b.n	801b504 <__lshift+0xa4>
 801b52e:	bf00      	nop
 801b530:	0801f723 	.word	0x0801f723
 801b534:	0801f734 	.word	0x0801f734

0801b538 <__mcmp>:
 801b538:	b530      	push	{r4, r5, lr}
 801b53a:	6902      	ldr	r2, [r0, #16]
 801b53c:	690c      	ldr	r4, [r1, #16]
 801b53e:	1b12      	subs	r2, r2, r4
 801b540:	d10e      	bne.n	801b560 <__mcmp+0x28>
 801b542:	f100 0314 	add.w	r3, r0, #20
 801b546:	3114      	adds	r1, #20
 801b548:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 801b54c:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 801b550:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 801b554:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 801b558:	42a5      	cmp	r5, r4
 801b55a:	d003      	beq.n	801b564 <__mcmp+0x2c>
 801b55c:	d305      	bcc.n	801b56a <__mcmp+0x32>
 801b55e:	2201      	movs	r2, #1
 801b560:	4610      	mov	r0, r2
 801b562:	bd30      	pop	{r4, r5, pc}
 801b564:	4283      	cmp	r3, r0
 801b566:	d3f3      	bcc.n	801b550 <__mcmp+0x18>
 801b568:	e7fa      	b.n	801b560 <__mcmp+0x28>
 801b56a:	f04f 32ff 	mov.w	r2, #4294967295
 801b56e:	e7f7      	b.n	801b560 <__mcmp+0x28>

0801b570 <__mdiff>:
 801b570:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801b574:	460c      	mov	r4, r1
 801b576:	4606      	mov	r6, r0
 801b578:	4611      	mov	r1, r2
 801b57a:	4620      	mov	r0, r4
 801b57c:	4690      	mov	r8, r2
 801b57e:	f7ff ffdb 	bl	801b538 <__mcmp>
 801b582:	1e05      	subs	r5, r0, #0
 801b584:	d110      	bne.n	801b5a8 <__mdiff+0x38>
 801b586:	4629      	mov	r1, r5
 801b588:	4630      	mov	r0, r6
 801b58a:	f7ff fd59 	bl	801b040 <_Balloc>
 801b58e:	b930      	cbnz	r0, 801b59e <__mdiff+0x2e>
 801b590:	4b3a      	ldr	r3, [pc, #232]	; (801b67c <__mdiff+0x10c>)
 801b592:	4602      	mov	r2, r0
 801b594:	f240 2137 	movw	r1, #567	; 0x237
 801b598:	4839      	ldr	r0, [pc, #228]	; (801b680 <__mdiff+0x110>)
 801b59a:	f7fe fe3f 	bl	801a21c <__assert_func>
 801b59e:	2301      	movs	r3, #1
 801b5a0:	e9c0 3504 	strd	r3, r5, [r0, #16]
 801b5a4:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801b5a8:	bfa4      	itt	ge
 801b5aa:	4643      	movge	r3, r8
 801b5ac:	46a0      	movge	r8, r4
 801b5ae:	4630      	mov	r0, r6
 801b5b0:	f8d8 1004 	ldr.w	r1, [r8, #4]
 801b5b4:	bfa6      	itte	ge
 801b5b6:	461c      	movge	r4, r3
 801b5b8:	2500      	movge	r5, #0
 801b5ba:	2501      	movlt	r5, #1
 801b5bc:	f7ff fd40 	bl	801b040 <_Balloc>
 801b5c0:	b920      	cbnz	r0, 801b5cc <__mdiff+0x5c>
 801b5c2:	4b2e      	ldr	r3, [pc, #184]	; (801b67c <__mdiff+0x10c>)
 801b5c4:	4602      	mov	r2, r0
 801b5c6:	f240 2145 	movw	r1, #581	; 0x245
 801b5ca:	e7e5      	b.n	801b598 <__mdiff+0x28>
 801b5cc:	f8d8 7010 	ldr.w	r7, [r8, #16]
 801b5d0:	6926      	ldr	r6, [r4, #16]
 801b5d2:	60c5      	str	r5, [r0, #12]
 801b5d4:	f104 0914 	add.w	r9, r4, #20
 801b5d8:	f108 0514 	add.w	r5, r8, #20
 801b5dc:	f100 0e14 	add.w	lr, r0, #20
 801b5e0:	eb05 0c87 	add.w	ip, r5, r7, lsl #2
 801b5e4:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 801b5e8:	f108 0210 	add.w	r2, r8, #16
 801b5ec:	46f2      	mov	sl, lr
 801b5ee:	2100      	movs	r1, #0
 801b5f0:	f859 3b04 	ldr.w	r3, [r9], #4
 801b5f4:	f852 bf04 	ldr.w	fp, [r2, #4]!
 801b5f8:	fa11 f88b 	uxtah	r8, r1, fp
 801b5fc:	b299      	uxth	r1, r3
 801b5fe:	0c1b      	lsrs	r3, r3, #16
 801b600:	eba8 0801 	sub.w	r8, r8, r1
 801b604:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 801b608:	eb03 4328 	add.w	r3, r3, r8, asr #16
 801b60c:	fa1f f888 	uxth.w	r8, r8
 801b610:	1419      	asrs	r1, r3, #16
 801b612:	454e      	cmp	r6, r9
 801b614:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 801b618:	f84a 3b04 	str.w	r3, [sl], #4
 801b61c:	d8e8      	bhi.n	801b5f0 <__mdiff+0x80>
 801b61e:	1b33      	subs	r3, r6, r4
 801b620:	3b15      	subs	r3, #21
 801b622:	f023 0303 	bic.w	r3, r3, #3
 801b626:	3304      	adds	r3, #4
 801b628:	3415      	adds	r4, #21
 801b62a:	42a6      	cmp	r6, r4
 801b62c:	bf38      	it	cc
 801b62e:	2304      	movcc	r3, #4
 801b630:	441d      	add	r5, r3
 801b632:	4473      	add	r3, lr
 801b634:	469e      	mov	lr, r3
 801b636:	462e      	mov	r6, r5
 801b638:	4566      	cmp	r6, ip
 801b63a:	d30e      	bcc.n	801b65a <__mdiff+0xea>
 801b63c:	f10c 0203 	add.w	r2, ip, #3
 801b640:	1b52      	subs	r2, r2, r5
 801b642:	f022 0203 	bic.w	r2, r2, #3
 801b646:	3d03      	subs	r5, #3
 801b648:	45ac      	cmp	ip, r5
 801b64a:	bf38      	it	cc
 801b64c:	2200      	movcc	r2, #0
 801b64e:	4413      	add	r3, r2
 801b650:	f853 2d04 	ldr.w	r2, [r3, #-4]!
 801b654:	b17a      	cbz	r2, 801b676 <__mdiff+0x106>
 801b656:	6107      	str	r7, [r0, #16]
 801b658:	e7a4      	b.n	801b5a4 <__mdiff+0x34>
 801b65a:	f856 8b04 	ldr.w	r8, [r6], #4
 801b65e:	fa11 f288 	uxtah	r2, r1, r8
 801b662:	1414      	asrs	r4, r2, #16
 801b664:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 801b668:	b292      	uxth	r2, r2
 801b66a:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
 801b66e:	f84e 2b04 	str.w	r2, [lr], #4
 801b672:	1421      	asrs	r1, r4, #16
 801b674:	e7e0      	b.n	801b638 <__mdiff+0xc8>
 801b676:	3f01      	subs	r7, #1
 801b678:	e7ea      	b.n	801b650 <__mdiff+0xe0>
 801b67a:	bf00      	nop
 801b67c:	0801f723 	.word	0x0801f723
 801b680:	0801f734 	.word	0x0801f734

0801b684 <__d2b>:
 801b684:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 801b688:	460f      	mov	r7, r1
 801b68a:	2101      	movs	r1, #1
 801b68c:	ec59 8b10 	vmov	r8, r9, d0
 801b690:	4616      	mov	r6, r2
 801b692:	f7ff fcd5 	bl	801b040 <_Balloc>
 801b696:	4604      	mov	r4, r0
 801b698:	b930      	cbnz	r0, 801b6a8 <__d2b+0x24>
 801b69a:	4602      	mov	r2, r0
 801b69c:	4b24      	ldr	r3, [pc, #144]	; (801b730 <__d2b+0xac>)
 801b69e:	4825      	ldr	r0, [pc, #148]	; (801b734 <__d2b+0xb0>)
 801b6a0:	f240 310f 	movw	r1, #783	; 0x30f
 801b6a4:	f7fe fdba 	bl	801a21c <__assert_func>
 801b6a8:	f3c9 550a 	ubfx	r5, r9, #20, #11
 801b6ac:	f3c9 0313 	ubfx	r3, r9, #0, #20
 801b6b0:	bb2d      	cbnz	r5, 801b6fe <__d2b+0x7a>
 801b6b2:	9301      	str	r3, [sp, #4]
 801b6b4:	f1b8 0300 	subs.w	r3, r8, #0
 801b6b8:	d026      	beq.n	801b708 <__d2b+0x84>
 801b6ba:	4668      	mov	r0, sp
 801b6bc:	9300      	str	r3, [sp, #0]
 801b6be:	f7ff fd87 	bl	801b1d0 <__lo0bits>
 801b6c2:	e9dd 1200 	ldrd	r1, r2, [sp]
 801b6c6:	b1e8      	cbz	r0, 801b704 <__d2b+0x80>
 801b6c8:	f1c0 0320 	rsb	r3, r0, #32
 801b6cc:	fa02 f303 	lsl.w	r3, r2, r3
 801b6d0:	430b      	orrs	r3, r1
 801b6d2:	40c2      	lsrs	r2, r0
 801b6d4:	6163      	str	r3, [r4, #20]
 801b6d6:	9201      	str	r2, [sp, #4]
 801b6d8:	9b01      	ldr	r3, [sp, #4]
 801b6da:	61a3      	str	r3, [r4, #24]
 801b6dc:	2b00      	cmp	r3, #0
 801b6de:	bf14      	ite	ne
 801b6e0:	2202      	movne	r2, #2
 801b6e2:	2201      	moveq	r2, #1
 801b6e4:	6122      	str	r2, [r4, #16]
 801b6e6:	b1bd      	cbz	r5, 801b718 <__d2b+0x94>
 801b6e8:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 801b6ec:	4405      	add	r5, r0
 801b6ee:	603d      	str	r5, [r7, #0]
 801b6f0:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 801b6f4:	6030      	str	r0, [r6, #0]
 801b6f6:	4620      	mov	r0, r4
 801b6f8:	b003      	add	sp, #12
 801b6fa:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 801b6fe:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 801b702:	e7d6      	b.n	801b6b2 <__d2b+0x2e>
 801b704:	6161      	str	r1, [r4, #20]
 801b706:	e7e7      	b.n	801b6d8 <__d2b+0x54>
 801b708:	a801      	add	r0, sp, #4
 801b70a:	f7ff fd61 	bl	801b1d0 <__lo0bits>
 801b70e:	9b01      	ldr	r3, [sp, #4]
 801b710:	6163      	str	r3, [r4, #20]
 801b712:	3020      	adds	r0, #32
 801b714:	2201      	movs	r2, #1
 801b716:	e7e5      	b.n	801b6e4 <__d2b+0x60>
 801b718:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 801b71c:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 801b720:	6038      	str	r0, [r7, #0]
 801b722:	6918      	ldr	r0, [r3, #16]
 801b724:	f7ff fd34 	bl	801b190 <__hi0bits>
 801b728:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 801b72c:	e7e2      	b.n	801b6f4 <__d2b+0x70>
 801b72e:	bf00      	nop
 801b730:	0801f723 	.word	0x0801f723
 801b734:	0801f734 	.word	0x0801f734

0801b738 <__sfputc_r>:
 801b738:	6893      	ldr	r3, [r2, #8]
 801b73a:	3b01      	subs	r3, #1
 801b73c:	2b00      	cmp	r3, #0
 801b73e:	b410      	push	{r4}
 801b740:	6093      	str	r3, [r2, #8]
 801b742:	da08      	bge.n	801b756 <__sfputc_r+0x1e>
 801b744:	6994      	ldr	r4, [r2, #24]
 801b746:	42a3      	cmp	r3, r4
 801b748:	db01      	blt.n	801b74e <__sfputc_r+0x16>
 801b74a:	290a      	cmp	r1, #10
 801b74c:	d103      	bne.n	801b756 <__sfputc_r+0x1e>
 801b74e:	f85d 4b04 	ldr.w	r4, [sp], #4
 801b752:	f7fe bc36 	b.w	8019fc2 <__swbuf_r>
 801b756:	6813      	ldr	r3, [r2, #0]
 801b758:	1c58      	adds	r0, r3, #1
 801b75a:	6010      	str	r0, [r2, #0]
 801b75c:	7019      	strb	r1, [r3, #0]
 801b75e:	4608      	mov	r0, r1
 801b760:	f85d 4b04 	ldr.w	r4, [sp], #4
 801b764:	4770      	bx	lr

0801b766 <__sfputs_r>:
 801b766:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801b768:	4606      	mov	r6, r0
 801b76a:	460f      	mov	r7, r1
 801b76c:	4614      	mov	r4, r2
 801b76e:	18d5      	adds	r5, r2, r3
 801b770:	42ac      	cmp	r4, r5
 801b772:	d101      	bne.n	801b778 <__sfputs_r+0x12>
 801b774:	2000      	movs	r0, #0
 801b776:	e007      	b.n	801b788 <__sfputs_r+0x22>
 801b778:	f814 1b01 	ldrb.w	r1, [r4], #1
 801b77c:	463a      	mov	r2, r7
 801b77e:	4630      	mov	r0, r6
 801b780:	f7ff ffda 	bl	801b738 <__sfputc_r>
 801b784:	1c43      	adds	r3, r0, #1
 801b786:	d1f3      	bne.n	801b770 <__sfputs_r+0xa>
 801b788:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0801b78c <_vfiprintf_r>:
 801b78c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801b790:	460d      	mov	r5, r1
 801b792:	b09d      	sub	sp, #116	; 0x74
 801b794:	4614      	mov	r4, r2
 801b796:	4698      	mov	r8, r3
 801b798:	4606      	mov	r6, r0
 801b79a:	b118      	cbz	r0, 801b7a4 <_vfiprintf_r+0x18>
 801b79c:	6a03      	ldr	r3, [r0, #32]
 801b79e:	b90b      	cbnz	r3, 801b7a4 <_vfiprintf_r+0x18>
 801b7a0:	f7fe fb28 	bl	8019df4 <__sinit>
 801b7a4:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 801b7a6:	07d9      	lsls	r1, r3, #31
 801b7a8:	d405      	bmi.n	801b7b6 <_vfiprintf_r+0x2a>
 801b7aa:	89ab      	ldrh	r3, [r5, #12]
 801b7ac:	059a      	lsls	r2, r3, #22
 801b7ae:	d402      	bmi.n	801b7b6 <_vfiprintf_r+0x2a>
 801b7b0:	6da8      	ldr	r0, [r5, #88]	; 0x58
 801b7b2:	f7fe fd22 	bl	801a1fa <__retarget_lock_acquire_recursive>
 801b7b6:	89ab      	ldrh	r3, [r5, #12]
 801b7b8:	071b      	lsls	r3, r3, #28
 801b7ba:	d501      	bpl.n	801b7c0 <_vfiprintf_r+0x34>
 801b7bc:	692b      	ldr	r3, [r5, #16]
 801b7be:	b99b      	cbnz	r3, 801b7e8 <_vfiprintf_r+0x5c>
 801b7c0:	4629      	mov	r1, r5
 801b7c2:	4630      	mov	r0, r6
 801b7c4:	f7fe fc3a 	bl	801a03c <__swsetup_r>
 801b7c8:	b170      	cbz	r0, 801b7e8 <_vfiprintf_r+0x5c>
 801b7ca:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 801b7cc:	07dc      	lsls	r4, r3, #31
 801b7ce:	d504      	bpl.n	801b7da <_vfiprintf_r+0x4e>
 801b7d0:	f04f 30ff 	mov.w	r0, #4294967295
 801b7d4:	b01d      	add	sp, #116	; 0x74
 801b7d6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801b7da:	89ab      	ldrh	r3, [r5, #12]
 801b7dc:	0598      	lsls	r0, r3, #22
 801b7de:	d4f7      	bmi.n	801b7d0 <_vfiprintf_r+0x44>
 801b7e0:	6da8      	ldr	r0, [r5, #88]	; 0x58
 801b7e2:	f7fe fd0b 	bl	801a1fc <__retarget_lock_release_recursive>
 801b7e6:	e7f3      	b.n	801b7d0 <_vfiprintf_r+0x44>
 801b7e8:	2300      	movs	r3, #0
 801b7ea:	9309      	str	r3, [sp, #36]	; 0x24
 801b7ec:	2320      	movs	r3, #32
 801b7ee:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 801b7f2:	f8cd 800c 	str.w	r8, [sp, #12]
 801b7f6:	2330      	movs	r3, #48	; 0x30
 801b7f8:	f8df 81b0 	ldr.w	r8, [pc, #432]	; 801b9ac <_vfiprintf_r+0x220>
 801b7fc:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 801b800:	f04f 0901 	mov.w	r9, #1
 801b804:	4623      	mov	r3, r4
 801b806:	469a      	mov	sl, r3
 801b808:	f813 2b01 	ldrb.w	r2, [r3], #1
 801b80c:	b10a      	cbz	r2, 801b812 <_vfiprintf_r+0x86>
 801b80e:	2a25      	cmp	r2, #37	; 0x25
 801b810:	d1f9      	bne.n	801b806 <_vfiprintf_r+0x7a>
 801b812:	ebba 0b04 	subs.w	fp, sl, r4
 801b816:	d00b      	beq.n	801b830 <_vfiprintf_r+0xa4>
 801b818:	465b      	mov	r3, fp
 801b81a:	4622      	mov	r2, r4
 801b81c:	4629      	mov	r1, r5
 801b81e:	4630      	mov	r0, r6
 801b820:	f7ff ffa1 	bl	801b766 <__sfputs_r>
 801b824:	3001      	adds	r0, #1
 801b826:	f000 80a9 	beq.w	801b97c <_vfiprintf_r+0x1f0>
 801b82a:	9a09      	ldr	r2, [sp, #36]	; 0x24
 801b82c:	445a      	add	r2, fp
 801b82e:	9209      	str	r2, [sp, #36]	; 0x24
 801b830:	f89a 3000 	ldrb.w	r3, [sl]
 801b834:	2b00      	cmp	r3, #0
 801b836:	f000 80a1 	beq.w	801b97c <_vfiprintf_r+0x1f0>
 801b83a:	2300      	movs	r3, #0
 801b83c:	f04f 32ff 	mov.w	r2, #4294967295
 801b840:	e9cd 2305 	strd	r2, r3, [sp, #20]
 801b844:	f10a 0a01 	add.w	sl, sl, #1
 801b848:	9304      	str	r3, [sp, #16]
 801b84a:	9307      	str	r3, [sp, #28]
 801b84c:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 801b850:	931a      	str	r3, [sp, #104]	; 0x68
 801b852:	4654      	mov	r4, sl
 801b854:	2205      	movs	r2, #5
 801b856:	f814 1b01 	ldrb.w	r1, [r4], #1
 801b85a:	4854      	ldr	r0, [pc, #336]	; (801b9ac <_vfiprintf_r+0x220>)
 801b85c:	f7e6 fab0 	bl	8001dc0 <memchr>
 801b860:	9a04      	ldr	r2, [sp, #16]
 801b862:	b9d8      	cbnz	r0, 801b89c <_vfiprintf_r+0x110>
 801b864:	06d1      	lsls	r1, r2, #27
 801b866:	bf44      	itt	mi
 801b868:	2320      	movmi	r3, #32
 801b86a:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 801b86e:	0713      	lsls	r3, r2, #28
 801b870:	bf44      	itt	mi
 801b872:	232b      	movmi	r3, #43	; 0x2b
 801b874:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 801b878:	f89a 3000 	ldrb.w	r3, [sl]
 801b87c:	2b2a      	cmp	r3, #42	; 0x2a
 801b87e:	d015      	beq.n	801b8ac <_vfiprintf_r+0x120>
 801b880:	9a07      	ldr	r2, [sp, #28]
 801b882:	4654      	mov	r4, sl
 801b884:	2000      	movs	r0, #0
 801b886:	f04f 0c0a 	mov.w	ip, #10
 801b88a:	4621      	mov	r1, r4
 801b88c:	f811 3b01 	ldrb.w	r3, [r1], #1
 801b890:	3b30      	subs	r3, #48	; 0x30
 801b892:	2b09      	cmp	r3, #9
 801b894:	d94d      	bls.n	801b932 <_vfiprintf_r+0x1a6>
 801b896:	b1b0      	cbz	r0, 801b8c6 <_vfiprintf_r+0x13a>
 801b898:	9207      	str	r2, [sp, #28]
 801b89a:	e014      	b.n	801b8c6 <_vfiprintf_r+0x13a>
 801b89c:	eba0 0308 	sub.w	r3, r0, r8
 801b8a0:	fa09 f303 	lsl.w	r3, r9, r3
 801b8a4:	4313      	orrs	r3, r2
 801b8a6:	9304      	str	r3, [sp, #16]
 801b8a8:	46a2      	mov	sl, r4
 801b8aa:	e7d2      	b.n	801b852 <_vfiprintf_r+0xc6>
 801b8ac:	9b03      	ldr	r3, [sp, #12]
 801b8ae:	1d19      	adds	r1, r3, #4
 801b8b0:	681b      	ldr	r3, [r3, #0]
 801b8b2:	9103      	str	r1, [sp, #12]
 801b8b4:	2b00      	cmp	r3, #0
 801b8b6:	bfbb      	ittet	lt
 801b8b8:	425b      	neglt	r3, r3
 801b8ba:	f042 0202 	orrlt.w	r2, r2, #2
 801b8be:	9307      	strge	r3, [sp, #28]
 801b8c0:	9307      	strlt	r3, [sp, #28]
 801b8c2:	bfb8      	it	lt
 801b8c4:	9204      	strlt	r2, [sp, #16]
 801b8c6:	7823      	ldrb	r3, [r4, #0]
 801b8c8:	2b2e      	cmp	r3, #46	; 0x2e
 801b8ca:	d10c      	bne.n	801b8e6 <_vfiprintf_r+0x15a>
 801b8cc:	7863      	ldrb	r3, [r4, #1]
 801b8ce:	2b2a      	cmp	r3, #42	; 0x2a
 801b8d0:	d134      	bne.n	801b93c <_vfiprintf_r+0x1b0>
 801b8d2:	9b03      	ldr	r3, [sp, #12]
 801b8d4:	1d1a      	adds	r2, r3, #4
 801b8d6:	681b      	ldr	r3, [r3, #0]
 801b8d8:	9203      	str	r2, [sp, #12]
 801b8da:	2b00      	cmp	r3, #0
 801b8dc:	bfb8      	it	lt
 801b8de:	f04f 33ff 	movlt.w	r3, #4294967295
 801b8e2:	3402      	adds	r4, #2
 801b8e4:	9305      	str	r3, [sp, #20]
 801b8e6:	f8df a0d4 	ldr.w	sl, [pc, #212]	; 801b9bc <_vfiprintf_r+0x230>
 801b8ea:	7821      	ldrb	r1, [r4, #0]
 801b8ec:	2203      	movs	r2, #3
 801b8ee:	4650      	mov	r0, sl
 801b8f0:	f7e6 fa66 	bl	8001dc0 <memchr>
 801b8f4:	b138      	cbz	r0, 801b906 <_vfiprintf_r+0x17a>
 801b8f6:	9b04      	ldr	r3, [sp, #16]
 801b8f8:	eba0 000a 	sub.w	r0, r0, sl
 801b8fc:	2240      	movs	r2, #64	; 0x40
 801b8fe:	4082      	lsls	r2, r0
 801b900:	4313      	orrs	r3, r2
 801b902:	3401      	adds	r4, #1
 801b904:	9304      	str	r3, [sp, #16]
 801b906:	f814 1b01 	ldrb.w	r1, [r4], #1
 801b90a:	4829      	ldr	r0, [pc, #164]	; (801b9b0 <_vfiprintf_r+0x224>)
 801b90c:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 801b910:	2206      	movs	r2, #6
 801b912:	f7e6 fa55 	bl	8001dc0 <memchr>
 801b916:	2800      	cmp	r0, #0
 801b918:	d03f      	beq.n	801b99a <_vfiprintf_r+0x20e>
 801b91a:	4b26      	ldr	r3, [pc, #152]	; (801b9b4 <_vfiprintf_r+0x228>)
 801b91c:	bb1b      	cbnz	r3, 801b966 <_vfiprintf_r+0x1da>
 801b91e:	9b03      	ldr	r3, [sp, #12]
 801b920:	3307      	adds	r3, #7
 801b922:	f023 0307 	bic.w	r3, r3, #7
 801b926:	3308      	adds	r3, #8
 801b928:	9303      	str	r3, [sp, #12]
 801b92a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801b92c:	443b      	add	r3, r7
 801b92e:	9309      	str	r3, [sp, #36]	; 0x24
 801b930:	e768      	b.n	801b804 <_vfiprintf_r+0x78>
 801b932:	fb0c 3202 	mla	r2, ip, r2, r3
 801b936:	460c      	mov	r4, r1
 801b938:	2001      	movs	r0, #1
 801b93a:	e7a6      	b.n	801b88a <_vfiprintf_r+0xfe>
 801b93c:	2300      	movs	r3, #0
 801b93e:	3401      	adds	r4, #1
 801b940:	9305      	str	r3, [sp, #20]
 801b942:	4619      	mov	r1, r3
 801b944:	f04f 0c0a 	mov.w	ip, #10
 801b948:	4620      	mov	r0, r4
 801b94a:	f810 2b01 	ldrb.w	r2, [r0], #1
 801b94e:	3a30      	subs	r2, #48	; 0x30
 801b950:	2a09      	cmp	r2, #9
 801b952:	d903      	bls.n	801b95c <_vfiprintf_r+0x1d0>
 801b954:	2b00      	cmp	r3, #0
 801b956:	d0c6      	beq.n	801b8e6 <_vfiprintf_r+0x15a>
 801b958:	9105      	str	r1, [sp, #20]
 801b95a:	e7c4      	b.n	801b8e6 <_vfiprintf_r+0x15a>
 801b95c:	fb0c 2101 	mla	r1, ip, r1, r2
 801b960:	4604      	mov	r4, r0
 801b962:	2301      	movs	r3, #1
 801b964:	e7f0      	b.n	801b948 <_vfiprintf_r+0x1bc>
 801b966:	ab03      	add	r3, sp, #12
 801b968:	9300      	str	r3, [sp, #0]
 801b96a:	462a      	mov	r2, r5
 801b96c:	4b12      	ldr	r3, [pc, #72]	; (801b9b8 <_vfiprintf_r+0x22c>)
 801b96e:	a904      	add	r1, sp, #16
 801b970:	4630      	mov	r0, r6
 801b972:	f7fd fe09 	bl	8019588 <_printf_float>
 801b976:	4607      	mov	r7, r0
 801b978:	1c78      	adds	r0, r7, #1
 801b97a:	d1d6      	bne.n	801b92a <_vfiprintf_r+0x19e>
 801b97c:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 801b97e:	07d9      	lsls	r1, r3, #31
 801b980:	d405      	bmi.n	801b98e <_vfiprintf_r+0x202>
 801b982:	89ab      	ldrh	r3, [r5, #12]
 801b984:	059a      	lsls	r2, r3, #22
 801b986:	d402      	bmi.n	801b98e <_vfiprintf_r+0x202>
 801b988:	6da8      	ldr	r0, [r5, #88]	; 0x58
 801b98a:	f7fe fc37 	bl	801a1fc <__retarget_lock_release_recursive>
 801b98e:	89ab      	ldrh	r3, [r5, #12]
 801b990:	065b      	lsls	r3, r3, #25
 801b992:	f53f af1d 	bmi.w	801b7d0 <_vfiprintf_r+0x44>
 801b996:	9809      	ldr	r0, [sp, #36]	; 0x24
 801b998:	e71c      	b.n	801b7d4 <_vfiprintf_r+0x48>
 801b99a:	ab03      	add	r3, sp, #12
 801b99c:	9300      	str	r3, [sp, #0]
 801b99e:	462a      	mov	r2, r5
 801b9a0:	4b05      	ldr	r3, [pc, #20]	; (801b9b8 <_vfiprintf_r+0x22c>)
 801b9a2:	a904      	add	r1, sp, #16
 801b9a4:	4630      	mov	r0, r6
 801b9a6:	f7fe f877 	bl	8019a98 <_printf_i>
 801b9aa:	e7e4      	b.n	801b976 <_vfiprintf_r+0x1ea>
 801b9ac:	0801f88c 	.word	0x0801f88c
 801b9b0:	0801f896 	.word	0x0801f896
 801b9b4:	08019589 	.word	0x08019589
 801b9b8:	0801b767 	.word	0x0801b767
 801b9bc:	0801f892 	.word	0x0801f892

0801b9c0 <__sflush_r>:
 801b9c0:	898a      	ldrh	r2, [r1, #12]
 801b9c2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801b9c6:	4605      	mov	r5, r0
 801b9c8:	0710      	lsls	r0, r2, #28
 801b9ca:	460c      	mov	r4, r1
 801b9cc:	d458      	bmi.n	801ba80 <__sflush_r+0xc0>
 801b9ce:	684b      	ldr	r3, [r1, #4]
 801b9d0:	2b00      	cmp	r3, #0
 801b9d2:	dc05      	bgt.n	801b9e0 <__sflush_r+0x20>
 801b9d4:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 801b9d6:	2b00      	cmp	r3, #0
 801b9d8:	dc02      	bgt.n	801b9e0 <__sflush_r+0x20>
 801b9da:	2000      	movs	r0, #0
 801b9dc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801b9e0:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 801b9e2:	2e00      	cmp	r6, #0
 801b9e4:	d0f9      	beq.n	801b9da <__sflush_r+0x1a>
 801b9e6:	2300      	movs	r3, #0
 801b9e8:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 801b9ec:	682f      	ldr	r7, [r5, #0]
 801b9ee:	6a21      	ldr	r1, [r4, #32]
 801b9f0:	602b      	str	r3, [r5, #0]
 801b9f2:	d032      	beq.n	801ba5a <__sflush_r+0x9a>
 801b9f4:	6d60      	ldr	r0, [r4, #84]	; 0x54
 801b9f6:	89a3      	ldrh	r3, [r4, #12]
 801b9f8:	075a      	lsls	r2, r3, #29
 801b9fa:	d505      	bpl.n	801ba08 <__sflush_r+0x48>
 801b9fc:	6863      	ldr	r3, [r4, #4]
 801b9fe:	1ac0      	subs	r0, r0, r3
 801ba00:	6b63      	ldr	r3, [r4, #52]	; 0x34
 801ba02:	b10b      	cbz	r3, 801ba08 <__sflush_r+0x48>
 801ba04:	6c23      	ldr	r3, [r4, #64]	; 0x40
 801ba06:	1ac0      	subs	r0, r0, r3
 801ba08:	2300      	movs	r3, #0
 801ba0a:	4602      	mov	r2, r0
 801ba0c:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 801ba0e:	6a21      	ldr	r1, [r4, #32]
 801ba10:	4628      	mov	r0, r5
 801ba12:	47b0      	blx	r6
 801ba14:	1c43      	adds	r3, r0, #1
 801ba16:	89a3      	ldrh	r3, [r4, #12]
 801ba18:	d106      	bne.n	801ba28 <__sflush_r+0x68>
 801ba1a:	6829      	ldr	r1, [r5, #0]
 801ba1c:	291d      	cmp	r1, #29
 801ba1e:	d82b      	bhi.n	801ba78 <__sflush_r+0xb8>
 801ba20:	4a29      	ldr	r2, [pc, #164]	; (801bac8 <__sflush_r+0x108>)
 801ba22:	410a      	asrs	r2, r1
 801ba24:	07d6      	lsls	r6, r2, #31
 801ba26:	d427      	bmi.n	801ba78 <__sflush_r+0xb8>
 801ba28:	2200      	movs	r2, #0
 801ba2a:	6062      	str	r2, [r4, #4]
 801ba2c:	04d9      	lsls	r1, r3, #19
 801ba2e:	6922      	ldr	r2, [r4, #16]
 801ba30:	6022      	str	r2, [r4, #0]
 801ba32:	d504      	bpl.n	801ba3e <__sflush_r+0x7e>
 801ba34:	1c42      	adds	r2, r0, #1
 801ba36:	d101      	bne.n	801ba3c <__sflush_r+0x7c>
 801ba38:	682b      	ldr	r3, [r5, #0]
 801ba3a:	b903      	cbnz	r3, 801ba3e <__sflush_r+0x7e>
 801ba3c:	6560      	str	r0, [r4, #84]	; 0x54
 801ba3e:	6b61      	ldr	r1, [r4, #52]	; 0x34
 801ba40:	602f      	str	r7, [r5, #0]
 801ba42:	2900      	cmp	r1, #0
 801ba44:	d0c9      	beq.n	801b9da <__sflush_r+0x1a>
 801ba46:	f104 0344 	add.w	r3, r4, #68	; 0x44
 801ba4a:	4299      	cmp	r1, r3
 801ba4c:	d002      	beq.n	801ba54 <__sflush_r+0x94>
 801ba4e:	4628      	mov	r0, r5
 801ba50:	f7ff f9f6 	bl	801ae40 <_free_r>
 801ba54:	2000      	movs	r0, #0
 801ba56:	6360      	str	r0, [r4, #52]	; 0x34
 801ba58:	e7c0      	b.n	801b9dc <__sflush_r+0x1c>
 801ba5a:	2301      	movs	r3, #1
 801ba5c:	4628      	mov	r0, r5
 801ba5e:	47b0      	blx	r6
 801ba60:	1c41      	adds	r1, r0, #1
 801ba62:	d1c8      	bne.n	801b9f6 <__sflush_r+0x36>
 801ba64:	682b      	ldr	r3, [r5, #0]
 801ba66:	2b00      	cmp	r3, #0
 801ba68:	d0c5      	beq.n	801b9f6 <__sflush_r+0x36>
 801ba6a:	2b1d      	cmp	r3, #29
 801ba6c:	d001      	beq.n	801ba72 <__sflush_r+0xb2>
 801ba6e:	2b16      	cmp	r3, #22
 801ba70:	d101      	bne.n	801ba76 <__sflush_r+0xb6>
 801ba72:	602f      	str	r7, [r5, #0]
 801ba74:	e7b1      	b.n	801b9da <__sflush_r+0x1a>
 801ba76:	89a3      	ldrh	r3, [r4, #12]
 801ba78:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 801ba7c:	81a3      	strh	r3, [r4, #12]
 801ba7e:	e7ad      	b.n	801b9dc <__sflush_r+0x1c>
 801ba80:	690f      	ldr	r7, [r1, #16]
 801ba82:	2f00      	cmp	r7, #0
 801ba84:	d0a9      	beq.n	801b9da <__sflush_r+0x1a>
 801ba86:	0793      	lsls	r3, r2, #30
 801ba88:	680e      	ldr	r6, [r1, #0]
 801ba8a:	bf08      	it	eq
 801ba8c:	694b      	ldreq	r3, [r1, #20]
 801ba8e:	600f      	str	r7, [r1, #0]
 801ba90:	bf18      	it	ne
 801ba92:	2300      	movne	r3, #0
 801ba94:	eba6 0807 	sub.w	r8, r6, r7
 801ba98:	608b      	str	r3, [r1, #8]
 801ba9a:	f1b8 0f00 	cmp.w	r8, #0
 801ba9e:	dd9c      	ble.n	801b9da <__sflush_r+0x1a>
 801baa0:	6a21      	ldr	r1, [r4, #32]
 801baa2:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 801baa4:	4643      	mov	r3, r8
 801baa6:	463a      	mov	r2, r7
 801baa8:	4628      	mov	r0, r5
 801baaa:	47b0      	blx	r6
 801baac:	2800      	cmp	r0, #0
 801baae:	dc06      	bgt.n	801babe <__sflush_r+0xfe>
 801bab0:	89a3      	ldrh	r3, [r4, #12]
 801bab2:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 801bab6:	81a3      	strh	r3, [r4, #12]
 801bab8:	f04f 30ff 	mov.w	r0, #4294967295
 801babc:	e78e      	b.n	801b9dc <__sflush_r+0x1c>
 801babe:	4407      	add	r7, r0
 801bac0:	eba8 0800 	sub.w	r8, r8, r0
 801bac4:	e7e9      	b.n	801ba9a <__sflush_r+0xda>
 801bac6:	bf00      	nop
 801bac8:	dfbffffe 	.word	0xdfbffffe

0801bacc <_fflush_r>:
 801bacc:	b538      	push	{r3, r4, r5, lr}
 801bace:	690b      	ldr	r3, [r1, #16]
 801bad0:	4605      	mov	r5, r0
 801bad2:	460c      	mov	r4, r1
 801bad4:	b913      	cbnz	r3, 801badc <_fflush_r+0x10>
 801bad6:	2500      	movs	r5, #0
 801bad8:	4628      	mov	r0, r5
 801bada:	bd38      	pop	{r3, r4, r5, pc}
 801badc:	b118      	cbz	r0, 801bae6 <_fflush_r+0x1a>
 801bade:	6a03      	ldr	r3, [r0, #32]
 801bae0:	b90b      	cbnz	r3, 801bae6 <_fflush_r+0x1a>
 801bae2:	f7fe f987 	bl	8019df4 <__sinit>
 801bae6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 801baea:	2b00      	cmp	r3, #0
 801baec:	d0f3      	beq.n	801bad6 <_fflush_r+0xa>
 801baee:	6e62      	ldr	r2, [r4, #100]	; 0x64
 801baf0:	07d0      	lsls	r0, r2, #31
 801baf2:	d404      	bmi.n	801bafe <_fflush_r+0x32>
 801baf4:	0599      	lsls	r1, r3, #22
 801baf6:	d402      	bmi.n	801bafe <_fflush_r+0x32>
 801baf8:	6da0      	ldr	r0, [r4, #88]	; 0x58
 801bafa:	f7fe fb7e 	bl	801a1fa <__retarget_lock_acquire_recursive>
 801bafe:	4628      	mov	r0, r5
 801bb00:	4621      	mov	r1, r4
 801bb02:	f7ff ff5d 	bl	801b9c0 <__sflush_r>
 801bb06:	6e63      	ldr	r3, [r4, #100]	; 0x64
 801bb08:	07da      	lsls	r2, r3, #31
 801bb0a:	4605      	mov	r5, r0
 801bb0c:	d4e4      	bmi.n	801bad8 <_fflush_r+0xc>
 801bb0e:	89a3      	ldrh	r3, [r4, #12]
 801bb10:	059b      	lsls	r3, r3, #22
 801bb12:	d4e1      	bmi.n	801bad8 <_fflush_r+0xc>
 801bb14:	6da0      	ldr	r0, [r4, #88]	; 0x58
 801bb16:	f7fe fb71 	bl	801a1fc <__retarget_lock_release_recursive>
 801bb1a:	e7dd      	b.n	801bad8 <_fflush_r+0xc>

0801bb1c <fiprintf>:
 801bb1c:	b40e      	push	{r1, r2, r3}
 801bb1e:	b503      	push	{r0, r1, lr}
 801bb20:	4601      	mov	r1, r0
 801bb22:	ab03      	add	r3, sp, #12
 801bb24:	4805      	ldr	r0, [pc, #20]	; (801bb3c <fiprintf+0x20>)
 801bb26:	f853 2b04 	ldr.w	r2, [r3], #4
 801bb2a:	6800      	ldr	r0, [r0, #0]
 801bb2c:	9301      	str	r3, [sp, #4]
 801bb2e:	f7ff fe2d 	bl	801b78c <_vfiprintf_r>
 801bb32:	b002      	add	sp, #8
 801bb34:	f85d eb04 	ldr.w	lr, [sp], #4
 801bb38:	b003      	add	sp, #12
 801bb3a:	4770      	bx	lr
 801bb3c:	200000bc 	.word	0x200000bc

0801bb40 <__swhatbuf_r>:
 801bb40:	b570      	push	{r4, r5, r6, lr}
 801bb42:	460c      	mov	r4, r1
 801bb44:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801bb48:	2900      	cmp	r1, #0
 801bb4a:	b096      	sub	sp, #88	; 0x58
 801bb4c:	4615      	mov	r5, r2
 801bb4e:	461e      	mov	r6, r3
 801bb50:	da0d      	bge.n	801bb6e <__swhatbuf_r+0x2e>
 801bb52:	89a3      	ldrh	r3, [r4, #12]
 801bb54:	f013 0f80 	tst.w	r3, #128	; 0x80
 801bb58:	f04f 0100 	mov.w	r1, #0
 801bb5c:	bf0c      	ite	eq
 801bb5e:	f44f 6380 	moveq.w	r3, #1024	; 0x400
 801bb62:	2340      	movne	r3, #64	; 0x40
 801bb64:	2000      	movs	r0, #0
 801bb66:	6031      	str	r1, [r6, #0]
 801bb68:	602b      	str	r3, [r5, #0]
 801bb6a:	b016      	add	sp, #88	; 0x58
 801bb6c:	bd70      	pop	{r4, r5, r6, pc}
 801bb6e:	466a      	mov	r2, sp
 801bb70:	f000 f848 	bl	801bc04 <_fstat_r>
 801bb74:	2800      	cmp	r0, #0
 801bb76:	dbec      	blt.n	801bb52 <__swhatbuf_r+0x12>
 801bb78:	9901      	ldr	r1, [sp, #4]
 801bb7a:	f401 4170 	and.w	r1, r1, #61440	; 0xf000
 801bb7e:	f5a1 5300 	sub.w	r3, r1, #8192	; 0x2000
 801bb82:	4259      	negs	r1, r3
 801bb84:	4159      	adcs	r1, r3
 801bb86:	f44f 6380 	mov.w	r3, #1024	; 0x400
 801bb8a:	e7eb      	b.n	801bb64 <__swhatbuf_r+0x24>

0801bb8c <__smakebuf_r>:
 801bb8c:	898b      	ldrh	r3, [r1, #12]
 801bb8e:	b573      	push	{r0, r1, r4, r5, r6, lr}
 801bb90:	079d      	lsls	r5, r3, #30
 801bb92:	4606      	mov	r6, r0
 801bb94:	460c      	mov	r4, r1
 801bb96:	d507      	bpl.n	801bba8 <__smakebuf_r+0x1c>
 801bb98:	f104 0347 	add.w	r3, r4, #71	; 0x47
 801bb9c:	6023      	str	r3, [r4, #0]
 801bb9e:	6123      	str	r3, [r4, #16]
 801bba0:	2301      	movs	r3, #1
 801bba2:	6163      	str	r3, [r4, #20]
 801bba4:	b002      	add	sp, #8
 801bba6:	bd70      	pop	{r4, r5, r6, pc}
 801bba8:	ab01      	add	r3, sp, #4
 801bbaa:	466a      	mov	r2, sp
 801bbac:	f7ff ffc8 	bl	801bb40 <__swhatbuf_r>
 801bbb0:	9900      	ldr	r1, [sp, #0]
 801bbb2:	4605      	mov	r5, r0
 801bbb4:	4630      	mov	r0, r6
 801bbb6:	f7ff f9b7 	bl	801af28 <_malloc_r>
 801bbba:	b948      	cbnz	r0, 801bbd0 <__smakebuf_r+0x44>
 801bbbc:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 801bbc0:	059a      	lsls	r2, r3, #22
 801bbc2:	d4ef      	bmi.n	801bba4 <__smakebuf_r+0x18>
 801bbc4:	f023 0303 	bic.w	r3, r3, #3
 801bbc8:	f043 0302 	orr.w	r3, r3, #2
 801bbcc:	81a3      	strh	r3, [r4, #12]
 801bbce:	e7e3      	b.n	801bb98 <__smakebuf_r+0xc>
 801bbd0:	89a3      	ldrh	r3, [r4, #12]
 801bbd2:	6020      	str	r0, [r4, #0]
 801bbd4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 801bbd8:	81a3      	strh	r3, [r4, #12]
 801bbda:	9b00      	ldr	r3, [sp, #0]
 801bbdc:	6163      	str	r3, [r4, #20]
 801bbde:	9b01      	ldr	r3, [sp, #4]
 801bbe0:	6120      	str	r0, [r4, #16]
 801bbe2:	b15b      	cbz	r3, 801bbfc <__smakebuf_r+0x70>
 801bbe4:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 801bbe8:	4630      	mov	r0, r6
 801bbea:	f000 f81d 	bl	801bc28 <_isatty_r>
 801bbee:	b128      	cbz	r0, 801bbfc <__smakebuf_r+0x70>
 801bbf0:	89a3      	ldrh	r3, [r4, #12]
 801bbf2:	f023 0303 	bic.w	r3, r3, #3
 801bbf6:	f043 0301 	orr.w	r3, r3, #1
 801bbfa:	81a3      	strh	r3, [r4, #12]
 801bbfc:	89a3      	ldrh	r3, [r4, #12]
 801bbfe:	431d      	orrs	r5, r3
 801bc00:	81a5      	strh	r5, [r4, #12]
 801bc02:	e7cf      	b.n	801bba4 <__smakebuf_r+0x18>

0801bc04 <_fstat_r>:
 801bc04:	b538      	push	{r3, r4, r5, lr}
 801bc06:	4d07      	ldr	r5, [pc, #28]	; (801bc24 <_fstat_r+0x20>)
 801bc08:	2300      	movs	r3, #0
 801bc0a:	4604      	mov	r4, r0
 801bc0c:	4608      	mov	r0, r1
 801bc0e:	4611      	mov	r1, r2
 801bc10:	602b      	str	r3, [r5, #0]
 801bc12:	f7e7 feda 	bl	80039ca <_fstat>
 801bc16:	1c43      	adds	r3, r0, #1
 801bc18:	d102      	bne.n	801bc20 <_fstat_r+0x1c>
 801bc1a:	682b      	ldr	r3, [r5, #0]
 801bc1c:	b103      	cbz	r3, 801bc20 <_fstat_r+0x1c>
 801bc1e:	6023      	str	r3, [r4, #0]
 801bc20:	bd38      	pop	{r3, r4, r5, pc}
 801bc22:	bf00      	nop
 801bc24:	2000736c 	.word	0x2000736c

0801bc28 <_isatty_r>:
 801bc28:	b538      	push	{r3, r4, r5, lr}
 801bc2a:	4d06      	ldr	r5, [pc, #24]	; (801bc44 <_isatty_r+0x1c>)
 801bc2c:	2300      	movs	r3, #0
 801bc2e:	4604      	mov	r4, r0
 801bc30:	4608      	mov	r0, r1
 801bc32:	602b      	str	r3, [r5, #0]
 801bc34:	f7e7 fed9 	bl	80039ea <_isatty>
 801bc38:	1c43      	adds	r3, r0, #1
 801bc3a:	d102      	bne.n	801bc42 <_isatty_r+0x1a>
 801bc3c:	682b      	ldr	r3, [r5, #0]
 801bc3e:	b103      	cbz	r3, 801bc42 <_isatty_r+0x1a>
 801bc40:	6023      	str	r3, [r4, #0]
 801bc42:	bd38      	pop	{r3, r4, r5, pc}
 801bc44:	2000736c 	.word	0x2000736c

0801bc48 <_sbrk_r>:
 801bc48:	b538      	push	{r3, r4, r5, lr}
 801bc4a:	4d06      	ldr	r5, [pc, #24]	; (801bc64 <_sbrk_r+0x1c>)
 801bc4c:	2300      	movs	r3, #0
 801bc4e:	4604      	mov	r4, r0
 801bc50:	4608      	mov	r0, r1
 801bc52:	602b      	str	r3, [r5, #0]
 801bc54:	f7e7 fee2 	bl	8003a1c <_sbrk>
 801bc58:	1c43      	adds	r3, r0, #1
 801bc5a:	d102      	bne.n	801bc62 <_sbrk_r+0x1a>
 801bc5c:	682b      	ldr	r3, [r5, #0]
 801bc5e:	b103      	cbz	r3, 801bc62 <_sbrk_r+0x1a>
 801bc60:	6023      	str	r3, [r4, #0]
 801bc62:	bd38      	pop	{r3, r4, r5, pc}
 801bc64:	2000736c 	.word	0x2000736c

0801bc68 <abort>:
 801bc68:	b508      	push	{r3, lr}
 801bc6a:	2006      	movs	r0, #6
 801bc6c:	f000 f860 	bl	801bd30 <raise>
 801bc70:	2001      	movs	r0, #1
 801bc72:	f7e7 fe5b 	bl	800392c <_exit>

0801bc76 <_calloc_r>:
 801bc76:	b537      	push	{r0, r1, r2, r4, r5, lr}
 801bc78:	fba1 2402 	umull	r2, r4, r1, r2
 801bc7c:	b94c      	cbnz	r4, 801bc92 <_calloc_r+0x1c>
 801bc7e:	4611      	mov	r1, r2
 801bc80:	9201      	str	r2, [sp, #4]
 801bc82:	f7ff f951 	bl	801af28 <_malloc_r>
 801bc86:	9a01      	ldr	r2, [sp, #4]
 801bc88:	4605      	mov	r5, r0
 801bc8a:	b930      	cbnz	r0, 801bc9a <_calloc_r+0x24>
 801bc8c:	4628      	mov	r0, r5
 801bc8e:	b003      	add	sp, #12
 801bc90:	bd30      	pop	{r4, r5, pc}
 801bc92:	220c      	movs	r2, #12
 801bc94:	6002      	str	r2, [r0, #0]
 801bc96:	2500      	movs	r5, #0
 801bc98:	e7f8      	b.n	801bc8c <_calloc_r+0x16>
 801bc9a:	4621      	mov	r1, r4
 801bc9c:	f7fe fa36 	bl	801a10c <memset>
 801bca0:	e7f4      	b.n	801bc8c <_calloc_r+0x16>

0801bca2 <__ascii_mbtowc>:
 801bca2:	b082      	sub	sp, #8
 801bca4:	b901      	cbnz	r1, 801bca8 <__ascii_mbtowc+0x6>
 801bca6:	a901      	add	r1, sp, #4
 801bca8:	b142      	cbz	r2, 801bcbc <__ascii_mbtowc+0x1a>
 801bcaa:	b14b      	cbz	r3, 801bcc0 <__ascii_mbtowc+0x1e>
 801bcac:	7813      	ldrb	r3, [r2, #0]
 801bcae:	600b      	str	r3, [r1, #0]
 801bcb0:	7812      	ldrb	r2, [r2, #0]
 801bcb2:	1e10      	subs	r0, r2, #0
 801bcb4:	bf18      	it	ne
 801bcb6:	2001      	movne	r0, #1
 801bcb8:	b002      	add	sp, #8
 801bcba:	4770      	bx	lr
 801bcbc:	4610      	mov	r0, r2
 801bcbe:	e7fb      	b.n	801bcb8 <__ascii_mbtowc+0x16>
 801bcc0:	f06f 0001 	mvn.w	r0, #1
 801bcc4:	e7f8      	b.n	801bcb8 <__ascii_mbtowc+0x16>

0801bcc6 <__ascii_wctomb>:
 801bcc6:	b149      	cbz	r1, 801bcdc <__ascii_wctomb+0x16>
 801bcc8:	2aff      	cmp	r2, #255	; 0xff
 801bcca:	bf85      	ittet	hi
 801bccc:	238a      	movhi	r3, #138	; 0x8a
 801bcce:	6003      	strhi	r3, [r0, #0]
 801bcd0:	700a      	strbls	r2, [r1, #0]
 801bcd2:	f04f 30ff 	movhi.w	r0, #4294967295
 801bcd6:	bf98      	it	ls
 801bcd8:	2001      	movls	r0, #1
 801bcda:	4770      	bx	lr
 801bcdc:	4608      	mov	r0, r1
 801bcde:	4770      	bx	lr

0801bce0 <_raise_r>:
 801bce0:	291f      	cmp	r1, #31
 801bce2:	b538      	push	{r3, r4, r5, lr}
 801bce4:	4604      	mov	r4, r0
 801bce6:	460d      	mov	r5, r1
 801bce8:	d904      	bls.n	801bcf4 <_raise_r+0x14>
 801bcea:	2316      	movs	r3, #22
 801bcec:	6003      	str	r3, [r0, #0]
 801bcee:	f04f 30ff 	mov.w	r0, #4294967295
 801bcf2:	bd38      	pop	{r3, r4, r5, pc}
 801bcf4:	6bc2      	ldr	r2, [r0, #60]	; 0x3c
 801bcf6:	b112      	cbz	r2, 801bcfe <_raise_r+0x1e>
 801bcf8:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 801bcfc:	b94b      	cbnz	r3, 801bd12 <_raise_r+0x32>
 801bcfe:	4620      	mov	r0, r4
 801bd00:	f000 f830 	bl	801bd64 <_getpid_r>
 801bd04:	462a      	mov	r2, r5
 801bd06:	4601      	mov	r1, r0
 801bd08:	4620      	mov	r0, r4
 801bd0a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 801bd0e:	f000 b817 	b.w	801bd40 <_kill_r>
 801bd12:	2b01      	cmp	r3, #1
 801bd14:	d00a      	beq.n	801bd2c <_raise_r+0x4c>
 801bd16:	1c59      	adds	r1, r3, #1
 801bd18:	d103      	bne.n	801bd22 <_raise_r+0x42>
 801bd1a:	2316      	movs	r3, #22
 801bd1c:	6003      	str	r3, [r0, #0]
 801bd1e:	2001      	movs	r0, #1
 801bd20:	e7e7      	b.n	801bcf2 <_raise_r+0x12>
 801bd22:	2400      	movs	r4, #0
 801bd24:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 801bd28:	4628      	mov	r0, r5
 801bd2a:	4798      	blx	r3
 801bd2c:	2000      	movs	r0, #0
 801bd2e:	e7e0      	b.n	801bcf2 <_raise_r+0x12>

0801bd30 <raise>:
 801bd30:	4b02      	ldr	r3, [pc, #8]	; (801bd3c <raise+0xc>)
 801bd32:	4601      	mov	r1, r0
 801bd34:	6818      	ldr	r0, [r3, #0]
 801bd36:	f7ff bfd3 	b.w	801bce0 <_raise_r>
 801bd3a:	bf00      	nop
 801bd3c:	200000bc 	.word	0x200000bc

0801bd40 <_kill_r>:
 801bd40:	b538      	push	{r3, r4, r5, lr}
 801bd42:	4d07      	ldr	r5, [pc, #28]	; (801bd60 <_kill_r+0x20>)
 801bd44:	2300      	movs	r3, #0
 801bd46:	4604      	mov	r4, r0
 801bd48:	4608      	mov	r0, r1
 801bd4a:	4611      	mov	r1, r2
 801bd4c:	602b      	str	r3, [r5, #0]
 801bd4e:	f7e7 fddb 	bl	8003908 <_kill>
 801bd52:	1c43      	adds	r3, r0, #1
 801bd54:	d102      	bne.n	801bd5c <_kill_r+0x1c>
 801bd56:	682b      	ldr	r3, [r5, #0]
 801bd58:	b103      	cbz	r3, 801bd5c <_kill_r+0x1c>
 801bd5a:	6023      	str	r3, [r4, #0]
 801bd5c:	bd38      	pop	{r3, r4, r5, pc}
 801bd5e:	bf00      	nop
 801bd60:	2000736c 	.word	0x2000736c

0801bd64 <_getpid_r>:
 801bd64:	f7e7 bdc8 	b.w	80038f8 <_getpid>

0801bd68 <_init>:
 801bd68:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801bd6a:	bf00      	nop
 801bd6c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 801bd6e:	bc08      	pop	{r3}
 801bd70:	469e      	mov	lr, r3
 801bd72:	4770      	bx	lr

0801bd74 <_fini>:
 801bd74:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801bd76:	bf00      	nop
 801bd78:	bcf8      	pop	{r3, r4, r5, r6, r7}
 801bd7a:	bc08      	pop	{r3}
 801bd7c:	469e      	mov	lr, r3
 801bd7e:	4770      	bx	lr

0801bd80 <__init_synthesiser_veneer>:
 801bd80:	f85f f000 	ldr.w	pc, [pc]	; 801bd84 <__init_synthesiser_veneer+0x4>
 801bd84:	00000789 	.word	0x00000789

0801bd88 <__start_pop_veneer>:
 801bd88:	f85f f000 	ldr.w	pc, [pc]	; 801bd8c <__start_pop_veneer+0x4>
 801bd8c:	000019b1 	.word	0x000019b1

0801bd90 <__MW_update_veneer>:
 801bd90:	f85f f000 	ldr.w	pc, [pc]	; 801bd94 <__MW_update_veneer+0x4>
 801bd94:	0000145d 	.word	0x0000145d

0801bd98 <__stop_pop_veneer>:
 801bd98:	f85f f000 	ldr.w	pc, [pc]	; 801bd9c <__stop_pop_veneer+0x4>
 801bd9c:	00001a0d 	.word	0x00001a0d

0801bda0 <__measure_POP_cycle_time_veneer>:
 801bda0:	f85f f000 	ldr.w	pc, [pc]	; 801bda4 <__measure_POP_cycle_time_veneer+0x4>
 801bda4:	00000549 	.word	0x00000549

0801bda8 <__timer_delay_veneer>:
 801bda8:	f85f f000 	ldr.w	pc, [pc]	; 801bdac <__timer_delay_veneer+0x4>
 801bdac:	00001985 	.word	0x00001985

0801bdb0 <__laser_update_veneer>:
 801bdb0:	f85f f000 	ldr.w	pc, [pc]	; 801bdb4 <__laser_update_veneer+0x4>
 801bdb4:	00000135 	.word	0x00000135

0801bdb8 <__calc_fixed_time_MW_sweep_veneer>:
 801bdb8:	f85f f000 	ldr.w	pc, [pc]	; 801bdbc <__calc_fixed_time_MW_sweep_veneer+0x4>
 801bdbc:	00000e99 	.word	0x00000e99
