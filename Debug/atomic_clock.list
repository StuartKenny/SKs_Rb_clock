
atomic_clock.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000298  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .itcm         000014e0  00000000  08000298  00020000  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .text         0001a240  08001780  08001780  00021780  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  3 .user_flash   00000000  08100000  08100000  0004022c  2**0
                  CONTENTS
  4 .rodata       00003710  0801b9c0  0801b9c0  0003b9c0  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .ARM          00000008  0801f0d0  0801f0d0  0003f0d0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  6 .init_array   00000004  0801f0d8  0801f0d8  0003f0d8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0801f0dc  0801f0dc  0003f0dc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000022c  20000000  0801f0e0  00040000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000070bc  20000230  0801f30c  00040230  2**3
                  ALLOC
 10 ._user_heap_stack 00000604  200072ec  0801f30c  000472ec  2**0
                  ALLOC
 11 .lwip_sec     00044b83  30000000  30000000  00050000  2**2
                  ALLOC
 12 .ARM.attributes 0000002e  00000000  00000000  0004022c  2**0
                  CONTENTS, READONLY
 13 .comment      00000043  00000000  00000000  0004025a  2**0
                  CONTENTS, READONLY
 14 .debug_info   000395b2  00000000  00000000  0004029d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_abbrev 00007474  00000000  00000000  0007984f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_aranges 000029a8  00000000  00000000  00080cc8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_rnglists 00002140  00000000  00000000  00083670  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_macro  00011b7f  00000000  00000000  000857b0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_line   00040826  00000000  00000000  0009732f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_str    001a94cb  00000000  00000000  000d7b55  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_frame  0000bff0  00000000  00000000  00281020  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 00000052  00000000  00000000  0028d010  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .itcm:

00000000 <synth_writereg>:
  * @param  Address
  * @param  Chip address
  * @param  Verify
  * @retval Contents read back from register
  */
static uint32_t synth_writereg(const uint32_t data, const uint32_t reg_address, const uint32_t chip_address, const bool verify) {
       0:	b580      	push	{r7, lr}
       2:	b08a      	sub	sp, #40	; 0x28
       4:	af00      	add	r7, sp, #0
       6:	60f8      	str	r0, [r7, #12]
       8:	60b9      	str	r1, [r7, #8]
       a:	607a      	str	r2, [r7, #4]
       c:	70fb      	strb	r3, [r7, #3]

	uint32_t read_data = 0;
       e:	2300      	movs	r3, #0
      10:	627b      	str	r3, [r7, #36]	; 0x24
	const uint32_t write_data = (data << 8) | (reg_address << 3) | chip_address; // This is what we will write, 32 bits in total.
      12:	68fb      	ldr	r3, [r7, #12]
      14:	021a      	lsls	r2, r3, #8
      16:	68bb      	ldr	r3, [r7, #8]
      18:	00db      	lsls	r3, r3, #3
      1a:	4313      	orrs	r3, r2
      1c:	687a      	ldr	r2, [r7, #4]
      1e:	4313      	orrs	r3, r2
      20:	61fb      	str	r3, [r7, #28]
	#ifdef SPI_DEBUG
		printf("SPI BYTES WRITTEN: 0x%X \r\n", write_data);
	#endif //SPI_DEBUG
	HAL_GPIO_WritePin(SCLK_GPIO_Port, SCLK_Pin, 0);
      22:	2200      	movs	r2, #0
      24:	f44f 7180 	mov.w	r1, #256	; 0x100
      28:	4830      	ldr	r0, [pc, #192]	; (ec <synth_writereg+0xec>)
      2a:	f001 fa41 	bl	14b0 <__HAL_GPIO_WritePin_veneer>
	HAL_GPIO_WritePin(SEN_GPIO_Port, SEN_Pin, 0); // Take SEN low to indicate we are sending data
      2e:	2200      	movs	r2, #0
      30:	f44f 6100 	mov.w	r1, #2048	; 0x800
      34:	482d      	ldr	r0, [pc, #180]	; (ec <synth_writereg+0xec>)
      36:	f001 fa3b 	bl	14b0 <__HAL_GPIO_WritePin_veneer>

	/* Clock in the data */
	for (uint32_t i = 0; i < SYNTH_SPI_BITS; i++) {
      3a:	2300      	movs	r3, #0
      3c:	623b      	str	r3, [r7, #32]
      3e:	e036      	b.n	ae <synth_writereg+0xae>

		/* Data written on the rising edge */
		uint32_t bit = (SYNTH_SPI_BITS - 1 - i);
      40:	2220      	movs	r2, #32
      42:	6a3b      	ldr	r3, [r7, #32]
      44:	1ad3      	subs	r3, r2, r3
      46:	3b01      	subs	r3, #1
      48:	617b      	str	r3, [r7, #20]
		HAL_GPIO_WritePin(MOSI_GPIO_Port, MOSI_Pin, !!(write_data & (1 << bit)));
      4a:	2201      	movs	r2, #1
      4c:	697b      	ldr	r3, [r7, #20]
      4e:	fa02 f303 	lsl.w	r3, r2, r3
      52:	461a      	mov	r2, r3
      54:	69fb      	ldr	r3, [r7, #28]
      56:	4013      	ands	r3, r2
      58:	2b00      	cmp	r3, #0
      5a:	bf14      	ite	ne
      5c:	2301      	movne	r3, #1
      5e:	2300      	moveq	r3, #0
      60:	b2db      	uxtb	r3, r3
      62:	461a      	mov	r2, r3
      64:	f44f 7100 	mov.w	r1, #512	; 0x200
      68:	4820      	ldr	r0, [pc, #128]	; (ec <synth_writereg+0xec>)
      6a:	f001 fa21 	bl	14b0 <__HAL_GPIO_WritePin_veneer>
		HAL_GPIO_WritePin(SCLK_GPIO_Port, SCLK_Pin, 1);
      6e:	2201      	movs	r2, #1
      70:	f44f 7180 	mov.w	r1, #256	; 0x100
      74:	481d      	ldr	r0, [pc, #116]	; (ec <synth_writereg+0xec>)
      76:	f001 fa1b 	bl	14b0 <__HAL_GPIO_WritePin_veneer>
		HAL_GPIO_WritePin(SCLK_GPIO_Port, SCLK_Pin, 0);
      7a:	2200      	movs	r2, #0
      7c:	f44f 7180 	mov.w	r1, #256	; 0x100
      80:	481a      	ldr	r0, [pc, #104]	; (ec <synth_writereg+0xec>)
      82:	f001 fa15 	bl	14b0 <__HAL_GPIO_WritePin_veneer>

		/* Data read on the falling edge */
		read_data = read_data
				| (HAL_GPIO_ReadPin(MISO_GPIO_Port, MISO_Pin)
      86:	f44f 6180 	mov.w	r1, #1024	; 0x400
      8a:	4818      	ldr	r0, [pc, #96]	; (ec <synth_writereg+0xec>)
      8c:	f001 fa00 	bl	1490 <__HAL_GPIO_ReadPin_veneer>
      90:	4603      	mov	r3, r0
      92:	4619      	mov	r1, r3
						<< (SYNTH_SPI_BITS - 1 - i));
      94:	2220      	movs	r2, #32
      96:	6a3b      	ldr	r3, [r7, #32]
      98:	1ad3      	subs	r3, r2, r3
      9a:	3b01      	subs	r3, #1
      9c:	fa01 f303 	lsl.w	r3, r1, r3
      a0:	461a      	mov	r2, r3
		read_data = read_data
      a2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
      a4:	4313      	orrs	r3, r2
      a6:	627b      	str	r3, [r7, #36]	; 0x24
	for (uint32_t i = 0; i < SYNTH_SPI_BITS; i++) {
      a8:	6a3b      	ldr	r3, [r7, #32]
      aa:	3301      	adds	r3, #1
      ac:	623b      	str	r3, [r7, #32]
      ae:	2220      	movs	r2, #32
      b0:	6a3b      	ldr	r3, [r7, #32]
      b2:	4293      	cmp	r3, r2
      b4:	d3c4      	bcc.n	40 <synth_writereg+0x40>
	}

	HAL_GPIO_WritePin(SEN_GPIO_Port, SEN_Pin, 1); // Assert the SEN line to register the transmitted data
      b6:	2201      	movs	r2, #1
      b8:	f44f 6100 	mov.w	r1, #2048	; 0x800
      bc:	480b      	ldr	r0, [pc, #44]	; (ec <synth_writereg+0xec>)
      be:	f001 f9f7 	bl	14b0 <__HAL_GPIO_WritePin_veneer>

	if (verify) {
      c2:	78fb      	ldrb	r3, [r7, #3]
      c4:	2b00      	cmp	r3, #0
      c6:	d00c      	beq.n	e2 <synth_writereg+0xe2>
		const uint32_t verify_data = synth_readreg(reg_address); // Data returned on the second cycle
      c8:	68b8      	ldr	r0, [r7, #8]
      ca:	f000 f813 	bl	f4 <synth_readreg>
      ce:	61b8      	str	r0, [r7, #24]
		if (verify_data != data) {
      d0:	69ba      	ldr	r2, [r7, #24]
      d2:	68fb      	ldr	r3, [r7, #12]
      d4:	429a      	cmp	r2, r3
      d6:	d004      	beq.n	e2 <synth_writereg+0xe2>
			printf("SPI transmission error!\n");
      d8:	4805      	ldr	r0, [pc, #20]	; (f0 <synth_writereg+0xf0>)
      da:	f001 f9dd 	bl	1498 <__puts_veneer>
			Error_Handler(); // We enter an infinite loop here
      de:	f001 f9fb 	bl	14d8 <__Error_Handler_veneer>
		}
	}

	return read_data;
      e2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
      e4:	4618      	mov	r0, r3
      e6:	3728      	adds	r7, #40	; 0x28
      e8:	46bd      	mov	sp, r7
      ea:	bd80      	pop	{r7, pc}
      ec:	58020800 	.word	0x58020800
      f0:	0801bbb0 	.word	0x0801bbb0

000000f4 <synth_readreg>:
/**
  * @brief  Reads a register.
  * @param  Address
  * @retval Register contents
  */
static uint32_t synth_readreg(const uint32_t reg_address){
      f4:	b580      	push	{r7, lr}
      f6:	b084      	sub	sp, #16
      f8:	af00      	add	r7, sp, #0
      fa:	6078      	str	r0, [r7, #4]

    synth_writereg(reg_address, 0x0, 0x0, DONT_VERIFY); // First cycle to send the read address
      fc:	2300      	movs	r3, #0
      fe:	2200      	movs	r2, #0
     100:	2100      	movs	r1, #0
     102:	6878      	ldr	r0, [r7, #4]
     104:	f7ff ff7c 	bl	0 <synth_writereg>
    const uint32_t read_data = synth_writereg(reg_address, 0x0, 0x0, DONT_VERIFY);  // Data returned on the second cycle
     108:	2300      	movs	r3, #0
     10a:	2200      	movs	r2, #0
     10c:	2100      	movs	r1, #0
     10e:	6878      	ldr	r0, [r7, #4]
     110:	f7ff ff76 	bl	0 <synth_writereg>
     114:	60f8      	str	r0, [r7, #12]

    return (read_data >> 8); // We only care about the first 24 bits returned.
     116:	68fb      	ldr	r3, [r7, #12]
     118:	0a1b      	lsrs	r3, r3, #8

}
     11a:	4618      	mov	r0, r3
     11c:	3710      	adds	r7, #16
     11e:	46bd      	mov	sp, r7
     120:	bd80      	pop	{r7, pc}

00000122 <set_MW_power>:
/**
  * @brief  Program LO2 output gain.
  * @param  MW power setting
  * @retval Success/fail
  */
uint32_t set_MW_power (const uint8_t mw_power) {
     122:	b580      	push	{r7, lr}
     124:	b084      	sub	sp, #16
     126:	af00      	add	r7, sp, #0
     128:	4603      	mov	r3, r0
     12a:	71fb      	strb	r3, [r7, #7]
	if (mw_power > 3) {//check that LO2GAIN is an integer from 0 to 3 inclusive
     12c:	79fb      	ldrb	r3, [r7, #7]
     12e:	2b03      	cmp	r3, #3
     130:	d904      	bls.n	13c <set_MW_power+0x1a>
		printf("illegal mw_power - must be an integer from 0 to 3!\n");
     132:	4811      	ldr	r0, [pc, #68]	; (178 <set_MW_power+0x56>)
     134:	f001 f9b0 	bl	1498 <__puts_veneer>
		Error_Handler(); // We enter an infinite loop here
     138:	f001 f9ce 	bl	14d8 <__Error_Handler_veneer>
	}
	uint32_t read_data = synth_readreg(GAIN_DIVIDER_REGISTER); // Get the current value.
     13c:	2016      	movs	r0, #22
     13e:	f7ff ffd9 	bl	f4 <synth_readreg>
     142:	60f8      	str	r0, [r7, #12]
	read_data &= 0xFFFFFCFF; 		// Zero bits 8:9.
     144:	68fb      	ldr	r3, [r7, #12]
     146:	f423 7340 	bic.w	r3, r3, #768	; 0x300
     14a:	60fb      	str	r3, [r7, #12]
	read_data |= (mw_power << 8);	// Set LO2GAIN value.
     14c:	79fb      	ldrb	r3, [r7, #7]
     14e:	021b      	lsls	r3, r3, #8
     150:	461a      	mov	r2, r3
     152:	68fb      	ldr	r3, [r7, #12]
     154:	4313      	orrs	r3, r2
     156:	60fb      	str	r3, [r7, #12]
	synth_writereg(read_data, GAIN_DIVIDER_REGISTER, 0x0, VERIFY); // Update the VCO divide register.
     158:	2301      	movs	r3, #1
     15a:	2200      	movs	r2, #0
     15c:	2116      	movs	r1, #22
     15e:	68f8      	ldr	r0, [r7, #12]
     160:	f7ff ff4e 	bl	0 <synth_writereg>
	#ifdef MW_VERBOSE
		printf("PROGRAMMED GAIN DIVIDER REGISTER: 0x%lX \r\n", read_data);
	#endif
	printf("LO2 gain setting: %u \r\n", mw_power);
     164:	79fb      	ldrb	r3, [r7, #7]
     166:	4619      	mov	r1, r3
     168:	4804      	ldr	r0, [pc, #16]	; (17c <set_MW_power+0x5a>)
     16a:	f001 f9b1 	bl	14d0 <__printf_veneer>
	return SUCCESS;
     16e:	2300      	movs	r3, #0
}
     170:	4618      	mov	r0, r3
     172:	3710      	adds	r7, #16
     174:	46bd      	mov	sp, r7
     176:	bd80      	pop	{r7, pc}
     178:	0801bbc8 	.word	0x0801bbc8
     17c:	0801bbfc 	.word	0x0801bbfc

00000180 <init_synthesiser>:
/**
  * @brief  Initialises HMC835 synthesiser.
  * @param  MW power setting
  * @retval Success/fail
  */
uint32_t init_synthesiser(const uint8_t mw_power) {
     180:	b580      	push	{r7, lr}
     182:	b084      	sub	sp, #16
     184:	af00      	add	r7, sp, #0
     186:	4603      	mov	r3, r0
     188:	71fb      	strb	r3, [r7, #7]

	//Set pins to required initial conditions
	HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET); // Turn off the amber lock LED
     18a:	2200      	movs	r2, #0
     18c:	2102      	movs	r1, #2
     18e:	4858      	ldr	r0, [pc, #352]	; (2f0 <_Min_Heap_Size+0xf0>)
     190:	f001 f98e 	bl	14b0 <__HAL_GPIO_WritePin_veneer>
	HAL_GPIO_WritePin(SCOPE_TRIG_OUT_GPIO_Port, SCOPE_TRIG_OUT_Pin, GPIO_PIN_SET); // Sets trigger output high
     194:	2201      	movs	r2, #1
     196:	2101      	movs	r1, #1
     198:	4856      	ldr	r0, [pc, #344]	; (2f4 <_Min_Heap_Size+0xf4>)
     19a:	f001 f989 	bl	14b0 <__HAL_GPIO_WritePin_veneer>
	HAL_GPIO_WritePin(SCLK_GPIO_Port, SCLK_Pin, 0);
     19e:	2200      	movs	r2, #0
     1a0:	f44f 7180 	mov.w	r1, #256	; 0x100
     1a4:	4854      	ldr	r0, [pc, #336]	; (2f8 <_Min_Heap_Size+0xf8>)
     1a6:	f001 f983 	bl	14b0 <__HAL_GPIO_WritePin_veneer>
	HAL_GPIO_WritePin(SEN_GPIO_Port, SEN_Pin, 1);
     1aa:	2201      	movs	r2, #1
     1ac:	f44f 6100 	mov.w	r1, #2048	; 0x800
     1b0:	4851      	ldr	r0, [pc, #324]	; (2f8 <_Min_Heap_Size+0xf8>)
     1b2:	f001 f97d 	bl	14b0 <__HAL_GPIO_WritePin_veneer>
	HAL_GPIO_WritePin(REG_EN_GPIO_Port, REG_EN_Pin, 1); // Enable the main regulator.
     1b6:	2201      	movs	r2, #1
     1b8:	f44f 5180 	mov.w	r1, #4096	; 0x1000
     1bc:	484e      	ldr	r0, [pc, #312]	; (2f8 <_Min_Heap_Size+0xf8>)
     1be:	f001 f977 	bl	14b0 <__HAL_GPIO_WritePin_veneer>

	HAL_Delay(100); // Wait 100 ms for the supply to stabilise.
     1c2:	2064      	movs	r0, #100	; 0x64
     1c4:	f001 f95c 	bl	1480 <__HAL_Delay_veneer>

	synth_writereg(0x1UL << 5, OPEN_MODE_READ_ADDRESS, 0x0, DONT_VERIFY); // Soft reset.
     1c8:	2300      	movs	r3, #0
     1ca:	2200      	movs	r2, #0
     1cc:	2100      	movs	r1, #0
     1ce:	2020      	movs	r0, #32
     1d0:	f7ff ff16 	bl	0 <synth_writereg>
	synth_writereg(0x41BFFF, ANALOG_EN_REGISTER, 0x0, VERIFY); // Set the SDO output level to 3.3 Volts
     1d4:	2301      	movs	r3, #1
     1d6:	2200      	movs	r2, #0
     1d8:	2108      	movs	r1, #8
     1da:	4848      	ldr	r0, [pc, #288]	; (2fc <_Min_Heap_Size+0xfc>)
     1dc:	f7ff ff10 	bl	0 <synth_writereg>

	uint32_t read_data = synth_readreg(ID_REGISTER); // Read the ID register to check the chip is communicating
     1e0:	2000      	movs	r0, #0
     1e2:	f7ff ff87 	bl	f4 <synth_readreg>
     1e6:	60f8      	str	r0, [r7, #12]
	/* Check we have the correct ID */
	if (read_data != SYNTH_ID) {
     1e8:	4a45      	ldr	r2, [pc, #276]	; (300 <_Min_Heap_Size+0x100>)
     1ea:	68fb      	ldr	r3, [r7, #12]
     1ec:	4293      	cmp	r3, r2
     1ee:	d00a      	beq.n	206 <_Min_Heap_Size+0x6>
		HAL_GPIO_WritePin(REG_EN_GPIO_Port, REG_EN_Pin, 0); // Disable the main regulator.
     1f0:	2200      	movs	r2, #0
     1f2:	f44f 5180 	mov.w	r1, #4096	; 0x1000
     1f6:	4840      	ldr	r0, [pc, #256]	; (2f8 <_Min_Heap_Size+0xf8>)
     1f8:	f001 f95a 	bl	14b0 <__HAL_GPIO_WritePin_veneer>
		printf("Incorrect synthesiser ID!\r\n");
     1fc:	4841      	ldr	r0, [pc, #260]	; (304 <_Min_Heap_Size+0x104>)
     1fe:	f001 f94b 	bl	1498 <__puts_veneer>
		return ERROR;
     202:	2301      	movs	r3, #1
     204:	e06a      	b.n	2dc <_Min_Heap_Size+0xdc>
	}

	/* Everything looks good, we can communicate with the chip :-) */
	printf("HMC835 Detected.\r\n");
     206:	4840      	ldr	r0, [pc, #256]	; (308 <_Min_Heap_Size+0x108>)
     208:	f001 f946 	bl	1498 <__puts_veneer>

	/* Enables Single-Ended output mode for LO2 output */
	read_data = synth_readreg(MODES_REGISTER); // Get the current value of the modes register
     20c:	2017      	movs	r0, #23
     20e:	f7ff ff71 	bl	f4 <synth_readreg>
     212:	60f8      	str	r0, [r7, #12]
#ifdef MW_VERBOSE
	printf("READ MODES REGISTER: 0x%lX \r\n", read_data);
#endif
	read_data |= (0x1UL << 9);     // Enable single ended output for LO2 (LO2_P)
     214:	68fb      	ldr	r3, [r7, #12]
     216:	f443 7300 	orr.w	r3, r3, #512	; 0x200
     21a:	60fb      	str	r3, [r7, #12]
	read_data  &= ~(!AUTO_MUTE << 7); //can disable auto_mute - see variable declarations
     21c:	2301      	movs	r3, #1
     21e:	f083 0301 	eor.w	r3, r3, #1
     222:	b2db      	uxtb	r3, r3
     224:	01db      	lsls	r3, r3, #7
     226:	43db      	mvns	r3, r3
     228:	461a      	mov	r2, r3
     22a:	68fb      	ldr	r3, [r7, #12]
     22c:	4013      	ands	r3, r2
     22e:	60fb      	str	r3, [r7, #12]
	synth_writereg(read_data, MODES_REGISTER, 0x0, VERIFY); // Send
     230:	2301      	movs	r3, #1
     232:	2200      	movs	r2, #0
     234:	2117      	movs	r1, #23
     236:	68f8      	ldr	r0, [r7, #12]
     238:	f7ff fee2 	bl	0 <synth_writereg>
	//read_data = synth_readreg(LOCK_DETECT_REGISTER); // Get the current value.
	//read_data &= 0xFFFFFFF8; // Zero the first 3 LSBs.
	//read_data |= 0x07;
	//synth_writereg(read_data, LOCK_DETECT_REGISTER, 0x0, VERIFY); // Update the VCO divide register.

	synth_writereg(1, REFDIV_REGISTER, 0x0, VERIFY); // Reference divider setting.
     23c:	2301      	movs	r3, #1
     23e:	2200      	movs	r2, #0
     240:	2102      	movs	r1, #2
     242:	2001      	movs	r0, #1
     244:	f7ff fedc 	bl	0 <synth_writereg>
	printf("PROGRAMMED DIVIDER REGISTER: 0x01 \r\n");
#endif

	/* Lock detect training: This must be done after any change to the PD
	 * reference frequency or after power cycle. */
	read_data = synth_readreg(LOCK_DETECT_REGISTER); // Get contents of lock detect register
     248:	2007      	movs	r0, #7
     24a:	f7ff ff53 	bl	f4 <synth_readreg>
     24e:	60f8      	str	r0, [r7, #12]
#ifdef MW_VERBOSE
	printf("READ LOCK_DETECT_REGISTER: 0x%lX \r\n", read_data);
#endif
	read_data |= (0x1UL << 11);      // Enable lock-detect counters.
     250:	68fb      	ldr	r3, [r7, #12]
     252:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
     256:	60fb      	str	r3, [r7, #12]
	read_data |= (0x1UL << 14);      // Enable the lock-detect timer.
     258:	68fb      	ldr	r3, [r7, #12]
     25a:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
     25e:	60fb      	str	r3, [r7, #12]
	read_data |= (0x1UL << 20);      // Train the lock-detect timer.
     260:	68fb      	ldr	r3, [r7, #12]
     262:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
     266:	60fb      	str	r3, [r7, #12]
	synth_writereg(read_data, LOCK_DETECT_REGISTER, 0x0, VERIFY); // Send
     268:	2301      	movs	r3, #1
     26a:	2200      	movs	r2, #0
     26c:	2107      	movs	r1, #7
     26e:	68f8      	ldr	r0, [r7, #12]
     270:	f7ff fec6 	bl	0 <synth_writereg>
#ifdef MW_VERBOSE
	printf("PROGRAMMED LOCK DETECT REGISTER: 0x%lX \r\n", read_data);
#endif
	HAL_Delay(10); // Wait 10 ms for training to complete, not sure if we really need to do this.
     274:	200a      	movs	r0, #10
     276:	f001 f903 	bl	1480 <__HAL_Delay_veneer>

	/* Program LO2 output gain */
	if (mw_power > 3) {//check that LO2GAIN is an integer from 0 to 3 inclusive
     27a:	79fb      	ldrb	r3, [r7, #7]
     27c:	2b03      	cmp	r3, #3
     27e:	d904      	bls.n	28a <_Min_Heap_Size+0x8a>
		printf("illegal mw_power - must be an integer from 0 to 3!\n");
     280:	4822      	ldr	r0, [pc, #136]	; (30c <_Min_Heap_Size+0x10c>)
     282:	f001 f909 	bl	1498 <__puts_veneer>
		Error_Handler();
     286:	f001 f927 	bl	14d8 <__Error_Handler_veneer>
	}
	read_data = synth_readreg(GAIN_DIVIDER_REGISTER); // Get the current value.
     28a:	2016      	movs	r0, #22
     28c:	f7ff ff32 	bl	f4 <synth_readreg>
     290:	60f8      	str	r0, [r7, #12]
	read_data &= 0xFFFFFCFF; 		// Zero bits 8:9.
     292:	68fb      	ldr	r3, [r7, #12]
     294:	f423 7340 	bic.w	r3, r3, #768	; 0x300
     298:	60fb      	str	r3, [r7, #12]
	read_data |= (mw_power << 8);	// Set LO2GAIN value.
     29a:	79fb      	ldrb	r3, [r7, #7]
     29c:	021b      	lsls	r3, r3, #8
     29e:	461a      	mov	r2, r3
     2a0:	68fb      	ldr	r3, [r7, #12]
     2a2:	4313      	orrs	r3, r2
     2a4:	60fb      	str	r3, [r7, #12]
	synth_writereg(read_data, GAIN_DIVIDER_REGISTER, 0x0, VERIFY); // Update the VCO divide register.
     2a6:	2301      	movs	r3, #1
     2a8:	2200      	movs	r2, #0
     2aa:	2116      	movs	r1, #22
     2ac:	68f8      	ldr	r0, [r7, #12]
     2ae:	f7ff fea7 	bl	0 <synth_writereg>
	printf("PROGRAMMED GAIN DIVIDER REGISTER: 0x%lX \r\n", read_data);
	printf("LO2 gain setting: %u \r\n", mw_power);
#endif

	/* Sets output frequency to the hyperfine value */
	set_frequency_hz(HYPERFINE);
     2b2:	ed9f 7b0d 	vldr	d7, [pc, #52]	; 2e8 <_Min_Heap_Size+0xe8>
     2b6:	eeb0 0b47 	vmov.f64	d0, d7
     2ba:	f000 f842 	bl	342 <set_frequency_hz>
	//printf("Single frequency output: %f Hz \r\n", HYPERFINE);
	printf("Single frequency output: %.10g Hz \r\n", HYPERFINE);
     2be:	a30a      	add	r3, pc, #40	; (adr r3, 2e8 <_Min_Heap_Size+0xe8>)
     2c0:	e9d3 2300 	ldrd	r2, r3, [r3]
     2c4:	4812      	ldr	r0, [pc, #72]	; (310 <_Min_Heap_Size+0x110>)
     2c6:	f001 f903 	bl	14d0 <__printf_veneer>
//	struct MW_struct *mw_sweep_settings = 0;  //create a structure to store the sweep settings
	mw_sweep_settings.state = MW_FIXED_FREQ;
     2ca:	4b12      	ldr	r3, [pc, #72]	; (314 <_Min_Heap_Size+0x114>)
     2cc:	2201      	movs	r2, #1
     2ce:	701a      	strb	r2, [r3, #0]
	HAL_GPIO_WritePin(MW_INVALID_GPIO_Port, MW_INVALID_Pin, GPIO_PIN_RESET); // MW_invalid output low
     2d0:	2200      	movs	r2, #0
     2d2:	2102      	movs	r1, #2
     2d4:	4810      	ldr	r0, [pc, #64]	; (318 <_Min_Heap_Size+0x118>)
     2d6:	f001 f8eb 	bl	14b0 <__HAL_GPIO_WritePin_veneer>
	return SUCCESS;
     2da:	2300      	movs	r3, #0
}
     2dc:	4618      	mov	r0, r3
     2de:	3710      	adds	r7, #16
     2e0:	46bd      	mov	sp, r7
     2e2:	bd80      	pop	{r7, pc}
     2e4:	f3af 8000 	nop.w
     2e8:	6d600000 	.word	0x6d600000
     2ec:	41e69e35 	.word	0x41e69e35
     2f0:	58021000 	.word	0x58021000
     2f4:	58021800 	.word	0x58021800
     2f8:	58020800 	.word	0x58020800
     2fc:	0041bfff 	.word	0x0041bfff
     300:	00c7701a 	.word	0x00c7701a
     304:	0801bc14 	.word	0x0801bc14
     308:	0801bc30 	.word	0x0801bc30
     30c:	0801bbc8 	.word	0x0801bbc8
     310:	0801bc44 	.word	0x0801bc44
     314:	200005b0 	.word	0x200005b0
     318:	58020400 	.word	0x58020400

0000031c <lock_status>:
/**
  * @brief  Checks for MW frequency lock
  * @param  None
  * @retval Lock status
  */
static const bool lock_status(void) {
     31c:	b580      	push	{r7, lr}
     31e:	b082      	sub	sp, #8
     320:	af00      	add	r7, sp, #0

	bool locked = synth_readreg(GPOLD_REGISTER) & (1UL << 1);
     322:	2012      	movs	r0, #18
     324:	f7ff fee6 	bl	f4 <synth_readreg>
     328:	4603      	mov	r3, r0
     32a:	f003 0302 	and.w	r3, r3, #2
     32e:	2b00      	cmp	r3, #0
     330:	bf14      	ite	ne
     332:	2301      	movne	r3, #1
     334:	2300      	moveq	r3, #0
     336:	71fb      	strb	r3, [r7, #7]
	return locked;
     338:	79fb      	ldrb	r3, [r7, #7]

}
     33a:	4618      	mov	r0, r3
     33c:	3708      	adds	r7, #8
     33e:	46bd      	mov	sp, r7
     340:	bd80      	pop	{r7, pc}

00000342 <set_frequency_hz>:
/**
  * @brief  Translate a frequency into register values for programming to HMC835
  * @param  Frequency
  * @retval None
  */
void set_frequency_hz(const double fo) {
     342:	b580      	push	{r7, lr}
     344:	b088      	sub	sp, #32
     346:	af00      	add	r7, sp, #0
     348:	ed87 0b00 	vstr	d0, [r7]

#ifdef OPTIMISED_FOR_3_035GHZ_GENERATION
	/* Code optimisation for Generation of frequencies close to 3.035GHz
	 * k always equals 1
	 */
	uint32_t k = 1;
     34c:	2301      	movs	r3, #1
     34e:	61fb      	str	r3, [r7, #28]
		}
	}
#endif //OPTIMISED_FOR_3_035GHZ_GENERATION

	/* Calculate the N division ratio */
	const double N = ((fo * k) / REF_FREQ);
     350:	69fb      	ldr	r3, [r7, #28]
     352:	ee07 3a90 	vmov	s15, r3
     356:	eeb8 6b67 	vcvt.f64.u32	d6, s15
     35a:	ed97 7b00 	vldr	d7, [r7]
     35e:	ee26 6b07 	vmul.f64	d6, d6, d7
     362:	ed9f 5b29 	vldr	d5, [pc, #164]	; 408 <_Min_Stack_Size+0x8>
     366:	ee86 7b05 	vdiv.f64	d7, d6, d5
     36a:	ed87 7b04 	vstr	d7, [r7, #16]

	/* Extract the fractional and integer parts */
	const uint32_t NINT = N;
     36e:	ed97 7b04 	vldr	d7, [r7, #16]
     372:	eefc 7bc7 	vcvt.u32.f64	s15, d7
     376:	ee17 3a90 	vmov	r3, s15
     37a:	60fb      	str	r3, [r7, #12]
	const uint32_t NFRAC = ((N - NINT) * (1 << 24)) + 0.5;
     37c:	68fb      	ldr	r3, [r7, #12]
     37e:	ee07 3a90 	vmov	s15, r3
     382:	eeb8 7b67 	vcvt.f64.u32	d7, s15
     386:	ed97 6b04 	vldr	d6, [r7, #16]
     38a:	ee36 7b47 	vsub.f64	d7, d6, d7
     38e:	ed9f 6b20 	vldr	d6, [pc, #128]	; 410 <_Min_Stack_Size+0x10>
     392:	ee27 7b06 	vmul.f64	d7, d7, d6
     396:	eeb6 6b00 	vmov.f64	d6, #96	; 0x3f000000  0.5
     39a:	ee37 7b06 	vadd.f64	d7, d7, d6
     39e:	eefc 7bc7 	vcvt.u32.f64	s15, d7
     3a2:	ee17 3a90 	vmov	r3, s15
     3a6:	60bb      	str	r3, [r7, #8]
		printf("Failed to establish synthesiser frequency accurately\r\n");
		Error_Handler();
	}
#endif

	HAL_GPIO_WritePin(MW_INVALID_GPIO_Port, MW_INVALID_Pin, GPIO_PIN_SET); //Sets MW_invalid pin high
     3a8:	2201      	movs	r2, #1
     3aa:	2102      	movs	r1, #2
     3ac:	481a      	ldr	r0, [pc, #104]	; (418 <_Min_Stack_Size+0x18>)
     3ae:	f001 f87f 	bl	14b0 <__HAL_GPIO_WritePin_veneer>
	//set_frequency(NINT, NFRAC, k, MANUAL_MUTE); //Sets only the necessary Hittite registers
	set_freq_regs(NINT, NFRAC, k); //Sets only the necessary Hittite registers
     3b2:	69fa      	ldr	r2, [r7, #28]
     3b4:	68b9      	ldr	r1, [r7, #8]
     3b6:	68f8      	ldr	r0, [r7, #12]
     3b8:	f000 f836 	bl	428 <set_freq_regs>

	//MW stabilisation delay and check for lock
	timer_delay(MW_TIMER, MW_STABILISE_TIME_US);
     3bc:	4b17      	ldr	r3, [pc, #92]	; (41c <_Min_Stack_Size+0x1c>)
     3be:	681b      	ldr	r3, [r3, #0]
     3c0:	f241 3288 	movw	r2, #5000	; 0x1388
     3c4:	4611      	mov	r1, r2
     3c6:	4618      	mov	r0, r3
     3c8:	f000 ff78 	bl	12bc <timer_delay>
	//if (!poll_until_locked(LOCK_WAIT_US)) {
	if (!lock_status()) {
     3cc:	f7ff ffa6 	bl	31c <lock_status>
     3d0:	4603      	mov	r3, r0
     3d2:	f083 0301 	eor.w	r3, r3, #1
     3d6:	b2db      	uxtb	r3, r3
     3d8:	2b00      	cmp	r3, #0
     3da:	d011      	beq.n	400 <_Min_Stack_Size>
		HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET); //turn off amber LED
     3dc:	2200      	movs	r2, #0
     3de:	2102      	movs	r1, #2
     3e0:	480f      	ldr	r0, [pc, #60]	; (420 <_Min_Stack_Size+0x20>)
     3e2:	f001 f865 	bl	14b0 <__HAL_GPIO_WritePin_veneer>
		printf("Failed to establish MW Lock within %ld us of setting frequency!\r\n", MW_STABILISE_TIME_US);
     3e6:	f241 3388 	movw	r3, #5000	; 0x1388
     3ea:	4619      	mov	r1, r3
     3ec:	480d      	ldr	r0, [pc, #52]	; (424 <_Min_Stack_Size+0x24>)
     3ee:	f001 f86f 	bl	14d0 <__printf_veneer>
#ifdef HALT_ON_LOSS_OF_LOCK
		Error_Handler();
     3f2:	f001 f871 	bl	14d8 <__Error_Handler_veneer>
#endif //HALT_ON_LOSS_OF_LOCK
		HAL_GPIO_WritePin(MW_INVALID_GPIO_Port, MW_INVALID_Pin, GPIO_PIN_RESET); //Sets MW_invalid pin low
     3f6:	2200      	movs	r2, #0
     3f8:	2102      	movs	r1, #2
     3fa:	4807      	ldr	r0, [pc, #28]	; (418 <_Min_Stack_Size+0x18>)
     3fc:	f001 f858 	bl	14b0 <__HAL_GPIO_WritePin_veneer>
	}

}
     400:	bf00      	nop
     402:	3720      	adds	r7, #32
     404:	46bd      	mov	sp, r7
     406:	bd80      	pop	{r7, pc}
     408:	00000000 	.word	0x00000000
     40c:	4187d784 	.word	0x4187d784
     410:	00000000 	.word	0x00000000
     414:	41700000 	.word	0x41700000
     418:	58020400 	.word	0x58020400
     41c:	2000001c 	.word	0x2000001c
     420:	58021000 	.word	0x58021000
     424:	0801bc6c 	.word	0x0801bc6c

00000428 <set_freq_regs>:
static void set_freq_regs(const uint32_t integer, const uint32_t fraction, const uint32_t vco_divider) {
     428:	b580      	push	{r7, lr}
     42a:	b086      	sub	sp, #24
     42c:	af00      	add	r7, sp, #0
     42e:	60f8      	str	r0, [r7, #12]
     430:	60b9      	str	r1, [r7, #8]
     432:	607a      	str	r2, [r7, #4]
	uint32_t read_data = 0x0;
     434:	2300      	movs	r3, #0
     436:	617b      	str	r3, [r7, #20]
	if (last_vcodiv == -1 || (last_vcodiv != vco_divider)) {
     438:	4b24      	ldr	r3, [pc, #144]	; (4cc <set_freq_regs+0xa4>)
     43a:	681b      	ldr	r3, [r3, #0]
     43c:	f1b3 3fff 	cmp.w	r3, #4294967295
     440:	d004      	beq.n	44c <set_freq_regs+0x24>
     442:	4b22      	ldr	r3, [pc, #136]	; (4cc <set_freq_regs+0xa4>)
     444:	681b      	ldr	r3, [r3, #0]
     446:	687a      	ldr	r2, [r7, #4]
     448:	429a      	cmp	r2, r3
     44a:	d014      	beq.n	476 <set_freq_regs+0x4e>
		read_data = synth_readreg(GAIN_DIVIDER_REGISTER); // Get the current value.
     44c:	2016      	movs	r0, #22
     44e:	f7ff fe51 	bl	f4 <synth_readreg>
     452:	6178      	str	r0, [r7, #20]
		read_data &= 0xFFFFFFC0; // Zero the first 6 LSBs (VCO division value - mute).
     454:	697b      	ldr	r3, [r7, #20]
     456:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
     45a:	617b      	str	r3, [r7, #20]
		read_data |= vco_divider; // This will set k which will un-mute the outputs */
     45c:	697a      	ldr	r2, [r7, #20]
     45e:	687b      	ldr	r3, [r7, #4]
     460:	4313      	orrs	r3, r2
     462:	617b      	str	r3, [r7, #20]
		synth_writereg(read_data, GAIN_DIVIDER_REGISTER, 0x0, VERIFY); // Update the VCO divide register.
     464:	2301      	movs	r3, #1
     466:	2200      	movs	r2, #0
     468:	2116      	movs	r1, #22
     46a:	6978      	ldr	r0, [r7, #20]
     46c:	f7ff fdc8 	bl	0 <synth_writereg>
		last_vcodiv = vco_divider;
     470:	4a16      	ldr	r2, [pc, #88]	; (4cc <set_freq_regs+0xa4>)
     472:	687b      	ldr	r3, [r7, #4]
     474:	6013      	str	r3, [r2, #0]
	if (last_integer == -1 || (last_integer != integer)) {
     476:	4b16      	ldr	r3, [pc, #88]	; (4d0 <set_freq_regs+0xa8>)
     478:	681b      	ldr	r3, [r3, #0]
     47a:	f1b3 3fff 	cmp.w	r3, #4294967295
     47e:	d004      	beq.n	48a <set_freq_regs+0x62>
     480:	4b13      	ldr	r3, [pc, #76]	; (4d0 <set_freq_regs+0xa8>)
     482:	681b      	ldr	r3, [r3, #0]
     484:	68fa      	ldr	r2, [r7, #12]
     486:	429a      	cmp	r2, r3
     488:	d008      	beq.n	49c <set_freq_regs+0x74>
		synth_writereg(integer, INTEGER_FREQUENCY_REGISTER, 0x0, VERIFY);   // Integer register.
     48a:	2301      	movs	r3, #1
     48c:	2200      	movs	r2, #0
     48e:	2103      	movs	r1, #3
     490:	68f8      	ldr	r0, [r7, #12]
     492:	f7ff fdb5 	bl	0 <synth_writereg>
		last_integer = integer;
     496:	4a0e      	ldr	r2, [pc, #56]	; (4d0 <set_freq_regs+0xa8>)
     498:	68fb      	ldr	r3, [r7, #12]
     49a:	6013      	str	r3, [r2, #0]
	if (last_fraction == -1 || (last_fraction != fraction)) {
     49c:	4b0d      	ldr	r3, [pc, #52]	; (4d4 <set_freq_regs+0xac>)
     49e:	681b      	ldr	r3, [r3, #0]
     4a0:	f1b3 3fff 	cmp.w	r3, #4294967295
     4a4:	d004      	beq.n	4b0 <set_freq_regs+0x88>
     4a6:	4b0b      	ldr	r3, [pc, #44]	; (4d4 <set_freq_regs+0xac>)
     4a8:	681b      	ldr	r3, [r3, #0]
     4aa:	68ba      	ldr	r2, [r7, #8]
     4ac:	429a      	cmp	r2, r3
     4ae:	d008      	beq.n	4c2 <set_freq_regs+0x9a>
		synth_writereg(fraction, FRACTIONAL_FREQUENCY_REGISTER, 0x0, VERIFY);  // Fractional register.
     4b0:	2301      	movs	r3, #1
     4b2:	2200      	movs	r2, #0
     4b4:	2104      	movs	r1, #4
     4b6:	68b8      	ldr	r0, [r7, #8]
     4b8:	f7ff fda2 	bl	0 <synth_writereg>
		last_fraction = fraction;
     4bc:	4a05      	ldr	r2, [pc, #20]	; (4d4 <set_freq_regs+0xac>)
     4be:	68bb      	ldr	r3, [r7, #8]
     4c0:	6013      	str	r3, [r2, #0]
}
     4c2:	bf00      	nop
     4c4:	3718      	adds	r7, #24
     4c6:	46bd      	mov	sp, r7
     4c8:	bd80      	pop	{r7, pc}
     4ca:	bf00      	nop
     4cc:	20000004 	.word	0x20000004
     4d0:	20000008 	.word	0x20000008
     4d4:	2000000c 	.word	0x2000000c

000004d8 <print_mw_sweep_settings>:
/**
  * @brief  Print out the contents of the mw_sweep_settings structure
  * @param  None
  * @retval None
  */
  static void print_mw_sweep_settings (void) {
     4d8:	b580      	push	{r7, lr}
     4da:	af00      	add	r7, sp, #0
  	// Check that I've populated everything
  	printf("state: %u \r\n", mw_sweep_settings.state);
     4dc:	4b1b      	ldr	r3, [pc, #108]	; (54c <print_mw_sweep_settings+0x74>)
     4de:	781b      	ldrb	r3, [r3, #0]
     4e0:	4619      	mov	r1, r3
     4e2:	481b      	ldr	r0, [pc, #108]	; (550 <print_mw_sweep_settings+0x78>)
     4e4:	f000 fff4 	bl	14d0 <__printf_veneer>
  	printf("k: %u \r\n", mw_sweep_settings.k);
     4e8:	4b18      	ldr	r3, [pc, #96]	; (54c <print_mw_sweep_settings+0x74>)
     4ea:	785b      	ldrb	r3, [r3, #1]
     4ec:	4619      	mov	r1, r3
     4ee:	4819      	ldr	r0, [pc, #100]	; (554 <print_mw_sweep_settings+0x7c>)
     4f0:	f000 ffee 	bl	14d0 <__printf_veneer>
  	printf("NINT: %lu \r\n", mw_sweep_settings.NINT);
     4f4:	4b15      	ldr	r3, [pc, #84]	; (54c <print_mw_sweep_settings+0x74>)
     4f6:	685b      	ldr	r3, [r3, #4]
     4f8:	4619      	mov	r1, r3
     4fa:	4817      	ldr	r0, [pc, #92]	; (558 <print_mw_sweep_settings+0x80>)
     4fc:	f000 ffe8 	bl	14d0 <__printf_veneer>
  	printf("NFRAC_start: %lu \r\n", mw_sweep_settings.NFRAC_start);
     500:	4b12      	ldr	r3, [pc, #72]	; (54c <print_mw_sweep_settings+0x74>)
     502:	689b      	ldr	r3, [r3, #8]
     504:	4619      	mov	r1, r3
     506:	4815      	ldr	r0, [pc, #84]	; (55c <print_mw_sweep_settings+0x84>)
     508:	f000 ffe2 	bl	14d0 <__printf_veneer>
  	printf("num_steps: %lu \r\n", mw_sweep_settings.num_steps);
     50c:	4b0f      	ldr	r3, [pc, #60]	; (54c <print_mw_sweep_settings+0x74>)
     50e:	68db      	ldr	r3, [r3, #12]
     510:	4619      	mov	r1, r3
     512:	4813      	ldr	r0, [pc, #76]	; (560 <print_mw_sweep_settings+0x88>)
     514:	f000 ffdc 	bl	14d0 <__printf_veneer>
  	printf("step_size: %lu \r\n", mw_sweep_settings.step_size);
     518:	4b0c      	ldr	r3, [pc, #48]	; (54c <print_mw_sweep_settings+0x74>)
     51a:	691b      	ldr	r3, [r3, #16]
     51c:	4619      	mov	r1, r3
     51e:	4811      	ldr	r0, [pc, #68]	; (564 <print_mw_sweep_settings+0x8c>)
     520:	f000 ffd6 	bl	14d0 <__printf_veneer>
  	printf("stabilise_time: %lu us\r\n", mw_sweep_settings.stabilise_time);
     524:	4b09      	ldr	r3, [pc, #36]	; (54c <print_mw_sweep_settings+0x74>)
     526:	699b      	ldr	r3, [r3, #24]
     528:	4619      	mov	r1, r3
     52a:	480f      	ldr	r0, [pc, #60]	; (568 <print_mw_sweep_settings+0x90>)
     52c:	f000 ffd0 	bl	14d0 <__printf_veneer>
  	printf("dwell_time: %lu us\r\n", mw_sweep_settings.dwell_time);
     530:	4b06      	ldr	r3, [pc, #24]	; (54c <print_mw_sweep_settings+0x74>)
     532:	69db      	ldr	r3, [r3, #28]
     534:	4619      	mov	r1, r3
     536:	480d      	ldr	r0, [pc, #52]	; (56c <print_mw_sweep_settings+0x94>)
     538:	f000 ffca 	bl	14d0 <__printf_veneer>
  	printf("current_point: %lu\r\n", mw_sweep_settings.current_point);
     53c:	4b03      	ldr	r3, [pc, #12]	; (54c <print_mw_sweep_settings+0x74>)
     53e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
     540:	4619      	mov	r1, r3
     542:	480b      	ldr	r0, [pc, #44]	; (570 <print_mw_sweep_settings+0x98>)
     544:	f000 ffc4 	bl	14d0 <__printf_veneer>
}
     548:	bf00      	nop
     54a:	bd80      	pop	{r7, pc}
     54c:	200005b0 	.word	0x200005b0
     550:	0801bcb0 	.word	0x0801bcb0
     554:	0801bcc0 	.word	0x0801bcc0
     558:	0801bccc 	.word	0x0801bccc
     55c:	0801bcdc 	.word	0x0801bcdc
     560:	0801bcf0 	.word	0x0801bcf0
     564:	0801bd04 	.word	0x0801bd04
     568:	0801bd18 	.word	0x0801bd18
     56c:	0801bd34 	.word	0x0801bd34
     570:	0801bd4c 	.word	0x0801bd4c

00000574 <calc_defined_step_MW_sweep>:
  * @param  POP cycles per point
  * @param  Number of points
  * @param	POP_period in us
  * @retval Success/failure or early termination
  */
bool calc_defined_step_MW_sweep(const double centre_freq, const double span, const uint32_t pop_cycles_per_point, const uint32_t num_points_req) {
     574:	b580      	push	{r7, lr}
     576:	b094      	sub	sp, #80	; 0x50
     578:	af02      	add	r7, sp, #8
     57a:	ed87 0b04 	vstr	d0, [r7, #16]
     57e:	ed87 1b02 	vstr	d1, [r7, #8]
     582:	6078      	str	r0, [r7, #4]
     584:	6039      	str	r1, [r7, #0]
	printf("MW sweep will have %.10g GHz centre frequency with %.5g Hz span\r\n", centre_freq/1000000000, span);
     586:	ed97 7b04 	vldr	d7, [r7, #16]
     58a:	ed9f 6b8d 	vldr	d6, [pc, #564]	; 7c0 <calc_defined_step_MW_sweep+0x24c>
     58e:	ee87 5b06 	vdiv.f64	d5, d7, d6
     592:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
     596:	e9cd 2300 	strd	r2, r3, [sp]
     59a:	ec53 2b15 	vmov	r2, r3, d5
     59e:	4892      	ldr	r0, [pc, #584]	; (7e8 <calc_defined_step_MW_sweep+0x274>)
     5a0:	f000 ff96 	bl	14d0 <__printf_veneer>
	printf("and %ld POP cycles per point\r\n", pop_cycles_per_point);
     5a4:	6879      	ldr	r1, [r7, #4]
     5a6:	4891      	ldr	r0, [pc, #580]	; (7ec <calc_defined_step_MW_sweep+0x278>)
     5a8:	f000 ff92 	bl	14d0 <__printf_veneer>
	mw_sweep_settings.sweep_type = FIXED_STEPS;
     5ac:	4b90      	ldr	r3, [pc, #576]	; (7f0 <calc_defined_step_MW_sweep+0x27c>)
     5ae:	2200      	movs	r2, #0
     5b0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
	mw_sweep_settings.pop_cycles_per_point = pop_cycles_per_point;
     5b4:	4a8e      	ldr	r2, [pc, #568]	; (7f0 <calc_defined_step_MW_sweep+0x27c>)
     5b6:	687b      	ldr	r3, [r7, #4]
     5b8:	6153      	str	r3, [r2, #20]
	mw_sweep_settings.centre_freq = centre_freq;
     5ba:	498d      	ldr	r1, [pc, #564]	; (7f0 <calc_defined_step_MW_sweep+0x27c>)
     5bc:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
     5c0:	e9c1 230a 	strd	r2, r3, [r1, #40]	; 0x28
	mw_sweep_settings.span = span;
     5c4:	498a      	ldr	r1, [pc, #552]	; (7f0 <calc_defined_step_MW_sweep+0x27c>)
     5c6:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
     5ca:	e9c1 230c 	strd	r2, r3, [r1, #48]	; 0x30

	/* Calculate start frequency */
	double start_freq = centre_freq - 0.5* span;
     5ce:	ed97 7b02 	vldr	d7, [r7, #8]
     5d2:	eeb6 6b00 	vmov.f64	d6, #96	; 0x3f000000  0.5
     5d6:	ee27 7b06 	vmul.f64	d7, d7, d6
     5da:	ed97 6b04 	vldr	d6, [r7, #16]
     5de:	ee36 7b47 	vsub.f64	d7, d6, d7
     5e2:	ed87 7b10 	vstr	d7, [r7, #64]	; 0x40
	mw_sweep_settings.k = calculate_k(start_freq);
     5e6:	ed97 0b10 	vldr	d0, [r7, #64]	; 0x40
     5ea:	f000 fb03 	bl	bf4 <calculate_k>
     5ee:	4603      	mov	r3, r0
     5f0:	b2da      	uxtb	r2, r3
     5f2:	4b7f      	ldr	r3, [pc, #508]	; (7f0 <calc_defined_step_MW_sweep+0x27c>)
     5f4:	705a      	strb	r2, [r3, #1]

	/* Extrapolate step size requested versus achievable  */
	const double step_size_Hz = span / (num_points_req - 1);
     5f6:	683b      	ldr	r3, [r7, #0]
     5f8:	3b01      	subs	r3, #1
     5fa:	ee07 3a90 	vmov	s15, r3
     5fe:	eeb8 6b67 	vcvt.f64.u32	d6, s15
     602:	ed97 5b02 	vldr	d5, [r7, #8]
     606:	ee85 7b06 	vdiv.f64	d7, d5, d6
     60a:	ed87 7b0e 	vstr	d7, [r7, #56]	; 0x38
	printf("Requested %ld steps, therefore step size of %.3g Hz\r\n", num_points_req, step_size_Hz);
     60e:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
     612:	6839      	ldr	r1, [r7, #0]
     614:	4877      	ldr	r0, [pc, #476]	; (7f4 <calc_defined_step_MW_sweep+0x280>)
     616:	f000 ff5b 	bl	14d0 <__printf_veneer>
	const double unit_step_size_Hz = REF_FREQ / (double) (mw_sweep_settings.k * (1 << 24)); //minimum step size possible
     61a:	ed9f 5b6b 	vldr	d5, [pc, #428]	; 7c8 <calc_defined_step_MW_sweep+0x254>
     61e:	4b74      	ldr	r3, [pc, #464]	; (7f0 <calc_defined_step_MW_sweep+0x27c>)
     620:	785b      	ldrb	r3, [r3, #1]
     622:	061b      	lsls	r3, r3, #24
     624:	ee07 3a90 	vmov	s15, r3
     628:	eeb8 6be7 	vcvt.f64.s32	d6, s15
     62c:	ee85 7b06 	vdiv.f64	d7, d5, d6
     630:	ed87 7b0c 	vstr	d7, [r7, #48]	; 0x30
	//printf("Unit step size: %.3g Hz\r\n", unit_step_size_Hz);
	mw_sweep_settings.step_size = (step_size_Hz / unit_step_size_Hz + 0.5);
     634:	ed97 5b0e 	vldr	d5, [r7, #56]	; 0x38
     638:	ed97 6b0c 	vldr	d6, [r7, #48]	; 0x30
     63c:	ee85 7b06 	vdiv.f64	d7, d5, d6
     640:	eeb6 6b00 	vmov.f64	d6, #96	; 0x3f000000  0.5
     644:	ee37 7b06 	vadd.f64	d7, d7, d6
     648:	eefc 7bc7 	vcvt.u32.f64	s15, d7
     64c:	ee17 2a90 	vmov	r2, s15
     650:	4b67      	ldr	r3, [pc, #412]	; (7f0 <calc_defined_step_MW_sweep+0x27c>)
     652:	611a      	str	r2, [r3, #16]
	if (!mw_sweep_settings.step_size) { //step_size must be a positive non-zero integer
     654:	4b66      	ldr	r3, [pc, #408]	; (7f0 <calc_defined_step_MW_sweep+0x27c>)
     656:	691b      	ldr	r3, [r3, #16]
     658:	2b00      	cmp	r3, #0
     65a:	d104      	bne.n	666 <calc_defined_step_MW_sweep+0xf2>
		mw_sweep_settings.step_size++;
     65c:	4b64      	ldr	r3, [pc, #400]	; (7f0 <calc_defined_step_MW_sweep+0x27c>)
     65e:	691b      	ldr	r3, [r3, #16]
     660:	3301      	adds	r3, #1
     662:	4a63      	ldr	r2, [pc, #396]	; (7f0 <calc_defined_step_MW_sweep+0x27c>)
     664:	6113      	str	r3, [r2, #16]
	}
	const double achieved_step_size = (double) (mw_sweep_settings.step_size * unit_step_size_Hz);
     666:	4b62      	ldr	r3, [pc, #392]	; (7f0 <calc_defined_step_MW_sweep+0x27c>)
     668:	691b      	ldr	r3, [r3, #16]
     66a:	ee07 3a90 	vmov	s15, r3
     66e:	eeb8 7b67 	vcvt.f64.u32	d7, s15
     672:	ed97 6b0c 	vldr	d6, [r7, #48]	; 0x30
     676:	ee26 7b07 	vmul.f64	d7, d6, d7
     67a:	ed87 7b0a 	vstr	d7, [r7, #40]	; 0x28
	printf("Step size achieved: %.3g Hz\r\n", achieved_step_size);
     67e:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
     682:	485d      	ldr	r0, [pc, #372]	; (7f8 <calc_defined_step_MW_sweep+0x284>)
     684:	f000 ff24 	bl	14d0 <__printf_veneer>
	mw_sweep_settings.num_steps = span / achieved_step_size;
     688:	ed97 5b02 	vldr	d5, [r7, #8]
     68c:	ed97 6b0a 	vldr	d6, [r7, #40]	; 0x28
     690:	ee85 7b06 	vdiv.f64	d7, d5, d6
     694:	eefc 7bc7 	vcvt.u32.f64	s15, d7
     698:	ee17 2a90 	vmov	r2, s15
     69c:	4b54      	ldr	r3, [pc, #336]	; (7f0 <calc_defined_step_MW_sweep+0x27c>)
     69e:	60da      	str	r2, [r3, #12]

	/* Can avoid spurs if frequency requested can be encoded exactly  */
	start_freq = ((long)(start_freq/unit_step_size_Hz)) * unit_step_size_Hz;
     6a0:	ed97 5b10 	vldr	d5, [r7, #64]	; 0x40
     6a4:	ed97 6b0c 	vldr	d6, [r7, #48]	; 0x30
     6a8:	ee85 7b06 	vdiv.f64	d7, d5, d6
     6ac:	eefd 7bc7 	vcvt.s32.f64	s15, d7
     6b0:	eeb8 7be7 	vcvt.f64.s32	d7, s15
     6b4:	ed97 6b0c 	vldr	d6, [r7, #48]	; 0x30
     6b8:	ee26 7b07 	vmul.f64	d7, d6, d7
     6bc:	ed87 7b10 	vstr	d7, [r7, #64]	; 0x40

	/* Calculate the N division ratio, extracting the fractional and integer parts */
	const double N = ((start_freq * mw_sweep_settings.k) / REF_FREQ);
     6c0:	4b4b      	ldr	r3, [pc, #300]	; (7f0 <calc_defined_step_MW_sweep+0x27c>)
     6c2:	785b      	ldrb	r3, [r3, #1]
     6c4:	ee07 3a90 	vmov	s15, r3
     6c8:	eeb8 6be7 	vcvt.f64.s32	d6, s15
     6cc:	ed97 7b10 	vldr	d7, [r7, #64]	; 0x40
     6d0:	ee26 6b07 	vmul.f64	d6, d6, d7
     6d4:	ed9f 5b3c 	vldr	d5, [pc, #240]	; 7c8 <calc_defined_step_MW_sweep+0x254>
     6d8:	ee86 7b05 	vdiv.f64	d7, d6, d5
     6dc:	ed87 7b08 	vstr	d7, [r7, #32]
	mw_sweep_settings.NINT = N;
     6e0:	ed97 7b08 	vldr	d7, [r7, #32]
     6e4:	eefc 7bc7 	vcvt.u32.f64	s15, d7
     6e8:	ee17 2a90 	vmov	r2, s15
     6ec:	4b40      	ldr	r3, [pc, #256]	; (7f0 <calc_defined_step_MW_sweep+0x27c>)
     6ee:	605a      	str	r2, [r3, #4]
	mw_sweep_settings.NFRAC_start = ((N - mw_sweep_settings.NINT) * (1 << 24)) + 0.5;
     6f0:	4b3f      	ldr	r3, [pc, #252]	; (7f0 <calc_defined_step_MW_sweep+0x27c>)
     6f2:	685b      	ldr	r3, [r3, #4]
     6f4:	ee07 3a90 	vmov	s15, r3
     6f8:	eeb8 7b67 	vcvt.f64.u32	d7, s15
     6fc:	ed97 6b08 	vldr	d6, [r7, #32]
     700:	ee36 7b47 	vsub.f64	d7, d6, d7
     704:	ed9f 6b32 	vldr	d6, [pc, #200]	; 7d0 <calc_defined_step_MW_sweep+0x25c>
     708:	ee27 7b06 	vmul.f64	d7, d7, d6
     70c:	eeb6 6b00 	vmov.f64	d6, #96	; 0x3f000000  0.5
     710:	ee37 7b06 	vadd.f64	d7, d7, d6
     714:	eefc 7bc7 	vcvt.u32.f64	s15, d7
     718:	ee17 2a90 	vmov	r2, s15
     71c:	4b34      	ldr	r3, [pc, #208]	; (7f0 <calc_defined_step_MW_sweep+0x27c>)
     71e:	609a      	str	r2, [r3, #8]

	/* Calculate dwell time at each MW frequency */
	mw_sweep_settings.stabilise_time = MW_STABILISE_TIME_US; //Global MW stabilisation time
     720:	f241 3288 	movw	r2, #5000	; 0x1388
     724:	4b32      	ldr	r3, [pc, #200]	; (7f0 <calc_defined_step_MW_sweep+0x27c>)
     726:	619a      	str	r2, [r3, #24]
	mw_sweep_settings.dwell_time = pop_cycles_per_point * POP_period_us + TIMING_MARGIN_US;
     728:	4b34      	ldr	r3, [pc, #208]	; (7fc <calc_defined_step_MW_sweep+0x288>)
     72a:	681b      	ldr	r3, [r3, #0]
     72c:	687a      	ldr	r2, [r7, #4]
     72e:	fb02 f303 	mul.w	r3, r2, r3
     732:	2264      	movs	r2, #100	; 0x64
     734:	4413      	add	r3, r2
     736:	4a2e      	ldr	r2, [pc, #184]	; (7f0 <calc_defined_step_MW_sweep+0x27c>)
     738:	61d3      	str	r3, [r2, #28]

	/* Calculate the period of a sweep */
	const double calc_sweep_time = (double)(MW_STABILISE_TIME_US + MW_PROCESSING_TIME_US + mw_sweep_settings.dwell_time) * (double)(mw_sweep_settings.num_steps+1)/1000000;
     73a:	f241 3288 	movw	r2, #5000	; 0x1388
     73e:	f641 73cc 	movw	r3, #8140	; 0x1fcc
     742:	441a      	add	r2, r3
     744:	4b2a      	ldr	r3, [pc, #168]	; (7f0 <calc_defined_step_MW_sweep+0x27c>)
     746:	69db      	ldr	r3, [r3, #28]
     748:	4413      	add	r3, r2
     74a:	ee07 3a90 	vmov	s15, r3
     74e:	eeb8 6b67 	vcvt.f64.u32	d6, s15
     752:	4b27      	ldr	r3, [pc, #156]	; (7f0 <calc_defined_step_MW_sweep+0x27c>)
     754:	68db      	ldr	r3, [r3, #12]
     756:	3301      	adds	r3, #1
     758:	ee07 3a90 	vmov	s15, r3
     75c:	eeb8 7b67 	vcvt.f64.u32	d7, s15
     760:	ee26 6b07 	vmul.f64	d6, d6, d7
     764:	ed9f 5b1c 	vldr	d5, [pc, #112]	; 7d8 <calc_defined_step_MW_sweep+0x264>
     768:	ee86 7b05 	vdiv.f64	d7, d6, d5
     76c:	ed87 7b06 	vstr	d7, [r7, #24]
	printf("Sweep period: %.3g s\r\n", calc_sweep_time);
     770:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
     774:	4822      	ldr	r0, [pc, #136]	; (800 <calc_defined_step_MW_sweep+0x28c>)
     776:	f000 feab 	bl	14d0 <__printf_veneer>
	printf("%ld points, %.3g ms each\r\n", mw_sweep_settings.num_steps, 1000 * calc_sweep_time / (mw_sweep_settings.num_steps + 1));
     77a:	4b1d      	ldr	r3, [pc, #116]	; (7f0 <calc_defined_step_MW_sweep+0x27c>)
     77c:	68d9      	ldr	r1, [r3, #12]
     77e:	ed97 7b06 	vldr	d7, [r7, #24]
     782:	ed9f 6b17 	vldr	d6, [pc, #92]	; 7e0 <calc_defined_step_MW_sweep+0x26c>
     786:	ee27 6b06 	vmul.f64	d6, d7, d6
     78a:	4b19      	ldr	r3, [pc, #100]	; (7f0 <calc_defined_step_MW_sweep+0x27c>)
     78c:	68db      	ldr	r3, [r3, #12]
     78e:	3301      	adds	r3, #1
     790:	ee07 3a90 	vmov	s15, r3
     794:	eeb8 7b67 	vcvt.f64.u32	d7, s15
     798:	ee86 5b07 	vdiv.f64	d5, d6, d7
     79c:	ec53 2b15 	vmov	r2, r3, d5
     7a0:	4818      	ldr	r0, [pc, #96]	; (804 <calc_defined_step_MW_sweep+0x290>)
     7a2:	f000 fe95 	bl	14d0 <__printf_veneer>

	mw_sweep_settings.current_point = 0;
     7a6:	4b12      	ldr	r3, [pc, #72]	; (7f0 <calc_defined_step_MW_sweep+0x27c>)
     7a8:	2200      	movs	r2, #0
     7aa:	625a      	str	r2, [r3, #36]	; 0x24
	mw_sweep_settings.sweep_period = calc_sweep_time;
     7ac:	4910      	ldr	r1, [pc, #64]	; (7f0 <calc_defined_step_MW_sweep+0x27c>)
     7ae:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
     7b2:	e9c1 230e 	strd	r2, r3, [r1, #56]	; 0x38

	//print_mw_sweep_settings();
	return(true);
     7b6:	2301      	movs	r3, #1
}
     7b8:	4618      	mov	r0, r3
     7ba:	3748      	adds	r7, #72	; 0x48
     7bc:	46bd      	mov	sp, r7
     7be:	bd80      	pop	{r7, pc}
     7c0:	00000000 	.word	0x00000000
     7c4:	41cdcd65 	.word	0x41cdcd65
     7c8:	00000000 	.word	0x00000000
     7cc:	4187d784 	.word	0x4187d784
     7d0:	00000000 	.word	0x00000000
     7d4:	41700000 	.word	0x41700000
     7d8:	00000000 	.word	0x00000000
     7dc:	412e8480 	.word	0x412e8480
     7e0:	00000000 	.word	0x00000000
     7e4:	408f4000 	.word	0x408f4000
     7e8:	0801bd64 	.word	0x0801bd64
     7ec:	0801bda8 	.word	0x0801bda8
     7f0:	200005b0 	.word	0x200005b0
     7f4:	0801bdc8 	.word	0x0801bdc8
     7f8:	0801be00 	.word	0x0801be00
     7fc:	200005a0 	.word	0x200005a0
     800:	0801be20 	.word	0x0801be20
     804:	0801be38 	.word	0x0801be38

00000808 <calc_fixed_time_MW_sweep>:
  * @param  Span in Hz
  * @param  Sweep period in s
  * @param  Additional time for scope sync
  * @retval Success/failure or early termination
  */
bool calc_fixed_time_MW_sweep(const double centre_freq, const double span, const double requested_sweep_period, const bool scope_sync_time) {
     808:	b580      	push	{r7, lr}
     80a:	b09c      	sub	sp, #112	; 0x70
     80c:	af04      	add	r7, sp, #16
     80e:	ed87 0b06 	vstr	d0, [r7, #24]
     812:	ed87 1b04 	vstr	d1, [r7, #16]
     816:	ed87 2b02 	vstr	d2, [r7, #8]
     81a:	4603      	mov	r3, r0
     81c:	71fb      	strb	r3, [r7, #7]
	//Dwell time must be a minimum of one POP cycle
	//Dwell time should be at least 50% of sweep time
	//Number of points shall be maximised within the available time

	printf("MW sweep will have %.10g GHz centre frequency with %.5g Hz span, over %.3g s\r\n", centre_freq/1000000000, span, requested_sweep_period);
     81e:	ed97 7b06 	vldr	d7, [r7, #24]
     822:	ed9f 6b9f 	vldr	d6, [pc, #636]	; aa0 <calc_fixed_time_MW_sweep+0x298>
     826:	ee87 5b06 	vdiv.f64	d5, d7, d6
     82a:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
     82e:	e9cd 2302 	strd	r2, r3, [sp, #8]
     832:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
     836:	e9cd 2300 	strd	r2, r3, [sp]
     83a:	ec53 2b15 	vmov	r2, r3, d5
     83e:	48a0      	ldr	r0, [pc, #640]	; (ac0 <calc_fixed_time_MW_sweep+0x2b8>)
     840:	f000 fe46 	bl	14d0 <__printf_veneer>
	mw_sweep_settings.sweep_type = FIXED_TIME;
     844:	4b9f      	ldr	r3, [pc, #636]	; (ac4 <calc_fixed_time_MW_sweep+0x2bc>)
     846:	2201      	movs	r2, #1
     848:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
	mw_sweep_settings.centre_freq = centre_freq;
     84c:	499d      	ldr	r1, [pc, #628]	; (ac4 <calc_fixed_time_MW_sweep+0x2bc>)
     84e:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
     852:	e9c1 230a 	strd	r2, r3, [r1, #40]	; 0x28
	mw_sweep_settings.span = span;
     856:	499b      	ldr	r1, [pc, #620]	; (ac4 <calc_fixed_time_MW_sweep+0x2bc>)
     858:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
     85c:	e9c1 230c 	strd	r2, r3, [r1, #48]	; 0x30

	mw_sweep_settings.dwell_time = POP_period_us + TIMING_MARGIN_US; //minimum possible value of dwell_time in us
     860:	4b99      	ldr	r3, [pc, #612]	; (ac8 <calc_fixed_time_MW_sweep+0x2c0>)
     862:	681b      	ldr	r3, [r3, #0]
     864:	2264      	movs	r2, #100	; 0x64
     866:	4413      	add	r3, r2
     868:	4a96      	ldr	r2, [pc, #600]	; (ac4 <calc_fixed_time_MW_sweep+0x2bc>)
     86a:	61d3      	str	r3, [r2, #28]
	uint32_t point_time = MW_STABILISE_TIME_US + MW_PROCESSING_TIME_US + mw_sweep_settings.dwell_time; //minimum possible value in us
     86c:	f241 3288 	movw	r2, #5000	; 0x1388
     870:	f641 73cc 	movw	r3, #8140	; 0x1fcc
     874:	441a      	add	r2, r3
     876:	4b93      	ldr	r3, [pc, #588]	; (ac4 <calc_fixed_time_MW_sweep+0x2bc>)
     878:	69db      	ldr	r3, [r3, #28]
     87a:	4413      	add	r3, r2
     87c:	64fb      	str	r3, [r7, #76]	; 0x4c
	uint32_t points_in_sweep = requested_sweep_period * (double)(1000000 / point_time); //maximum possible number of steps in sweep, rounded down to an integer
     87e:	4a93      	ldr	r2, [pc, #588]	; (acc <calc_fixed_time_MW_sweep+0x2c4>)
     880:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
     882:	fbb2 f3f3 	udiv	r3, r2, r3
     886:	ee07 3a90 	vmov	s15, r3
     88a:	eeb8 6b67 	vcvt.f64.u32	d6, s15
     88e:	ed97 7b02 	vldr	d7, [r7, #8]
     892:	ee26 7b07 	vmul.f64	d7, d6, d7
     896:	eefc 7bc7 	vcvt.u32.f64	s15, d7
     89a:	ee17 3a90 	vmov	r3, s15
     89e:	64bb      	str	r3, [r7, #72]	; 0x48
	//printf("%lu points in sweep, maximum\r\n", points_in_sweep);

	/* now figure out the unit_step_size and how many steps will be taken in the span */

	/* Calculate start frequency */
	double start_freq = centre_freq - 0.5* span;
     8a0:	ed97 7b04 	vldr	d7, [r7, #16]
     8a4:	eeb6 6b00 	vmov.f64	d6, #96	; 0x3f000000  0.5
     8a8:	ee27 7b06 	vmul.f64	d7, d7, d6
     8ac:	ed97 6b06 	vldr	d6, [r7, #24]
     8b0:	ee36 7b47 	vsub.f64	d7, d6, d7
     8b4:	ed87 7b10 	vstr	d7, [r7, #64]	; 0x40
	mw_sweep_settings.k = calculate_k(start_freq);
     8b8:	ed97 0b10 	vldr	d0, [r7, #64]	; 0x40
     8bc:	f000 f99a 	bl	bf4 <calculate_k>
     8c0:	4603      	mov	r3, r0
     8c2:	b2da      	uxtb	r2, r3
     8c4:	4b7f      	ldr	r3, [pc, #508]	; (ac4 <calc_fixed_time_MW_sweep+0x2bc>)
     8c6:	705a      	strb	r2, [r3, #1]

	//steps should be evenly sized
	//selected step size should be an integer multiple of the unit step size
	//increase the step_size value until the sweep fits into the available period
	const double unit_step_size_Hz = REF_FREQ / (double) (mw_sweep_settings.k * (1 << 24)); //minimum step size possible
     8c8:	ed9f 5b77 	vldr	d5, [pc, #476]	; aa8 <calc_fixed_time_MW_sweep+0x2a0>
     8cc:	4b7d      	ldr	r3, [pc, #500]	; (ac4 <calc_fixed_time_MW_sweep+0x2bc>)
     8ce:	785b      	ldrb	r3, [r3, #1]
     8d0:	061b      	lsls	r3, r3, #24
     8d2:	ee07 3a90 	vmov	s15, r3
     8d6:	eeb8 6be7 	vcvt.f64.s32	d6, s15
     8da:	ee85 7b06 	vdiv.f64	d7, d5, d6
     8de:	ed87 7b0e 	vstr	d7, [r7, #56]	; 0x38
	//printf("Unit step size: %.3g Hz\r\n", unit_step_size_Hz);
	mw_sweep_settings.step_size = 1;
     8e2:	4b78      	ldr	r3, [pc, #480]	; (ac4 <calc_fixed_time_MW_sweep+0x2bc>)
     8e4:	2201      	movs	r2, #1
     8e6:	611a      	str	r2, [r3, #16]
	while ((mw_sweep_settings.step_size * points_in_sweep) < (span / unit_step_size_Hz)) {
     8e8:	e004      	b.n	8f4 <calc_fixed_time_MW_sweep+0xec>
		mw_sweep_settings.step_size++;
     8ea:	4b76      	ldr	r3, [pc, #472]	; (ac4 <calc_fixed_time_MW_sweep+0x2bc>)
     8ec:	691b      	ldr	r3, [r3, #16]
     8ee:	3301      	adds	r3, #1
     8f0:	4a74      	ldr	r2, [pc, #464]	; (ac4 <calc_fixed_time_MW_sweep+0x2bc>)
     8f2:	6113      	str	r3, [r2, #16]
	while ((mw_sweep_settings.step_size * points_in_sweep) < (span / unit_step_size_Hz)) {
     8f4:	4b73      	ldr	r3, [pc, #460]	; (ac4 <calc_fixed_time_MW_sweep+0x2bc>)
     8f6:	691b      	ldr	r3, [r3, #16]
     8f8:	6cba      	ldr	r2, [r7, #72]	; 0x48
     8fa:	fb02 f303 	mul.w	r3, r2, r3
     8fe:	ee07 3a90 	vmov	s15, r3
     902:	eeb8 6b67 	vcvt.f64.u32	d6, s15
     906:	ed97 4b04 	vldr	d4, [r7, #16]
     90a:	ed97 5b0e 	vldr	d5, [r7, #56]	; 0x38
     90e:	ee84 7b05 	vdiv.f64	d7, d4, d5
     912:	eeb4 6bc7 	vcmpe.f64	d6, d7
     916:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
     91a:	d4e6      	bmi.n	8ea <calc_fixed_time_MW_sweep+0xe2>
	}
	const double achieved_step_size = (double) (mw_sweep_settings.step_size * unit_step_size_Hz);
     91c:	4b69      	ldr	r3, [pc, #420]	; (ac4 <calc_fixed_time_MW_sweep+0x2bc>)
     91e:	691b      	ldr	r3, [r3, #16]
     920:	ee07 3a90 	vmov	s15, r3
     924:	eeb8 7b67 	vcvt.f64.u32	d7, s15
     928:	ed97 6b0e 	vldr	d6, [r7, #56]	; 0x38
     92c:	ee26 7b07 	vmul.f64	d7, d6, d7
     930:	ed87 7b0c 	vstr	d7, [r7, #48]	; 0x30
	printf("Step size: %lu x unit step i.e. %.3g Hz\r\n", mw_sweep_settings.step_size, achieved_step_size);
     934:	4b63      	ldr	r3, [pc, #396]	; (ac4 <calc_fixed_time_MW_sweep+0x2bc>)
     936:	6919      	ldr	r1, [r3, #16]
     938:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
     93c:	4864      	ldr	r0, [pc, #400]	; (ad0 <calc_fixed_time_MW_sweep+0x2c8>)
     93e:	f000 fdc7 	bl	14d0 <__printf_veneer>

	//calculate number of steps in sweep and round off to integer
	mw_sweep_settings.num_steps = (span / achieved_step_size) + 0.5;
     942:	ed97 5b04 	vldr	d5, [r7, #16]
     946:	ed97 6b0c 	vldr	d6, [r7, #48]	; 0x30
     94a:	ee85 7b06 	vdiv.f64	d7, d5, d6
     94e:	eeb6 6b00 	vmov.f64	d6, #96	; 0x3f000000  0.5
     952:	ee37 7b06 	vadd.f64	d7, d7, d6
     956:	eefc 7bc7 	vcvt.u32.f64	s15, d7
     95a:	ee17 2a90 	vmov	r2, s15
     95e:	4b59      	ldr	r3, [pc, #356]	; (ac4 <calc_fixed_time_MW_sweep+0x2bc>)
     960:	60da      	str	r2, [r3, #12]
	const uint32_t point_time_us = 1000000 * requested_sweep_period / (mw_sweep_settings.num_steps + 1);
     962:	ed97 7b02 	vldr	d7, [r7, #8]
     966:	ed9f 6b52 	vldr	d6, [pc, #328]	; ab0 <calc_fixed_time_MW_sweep+0x2a8>
     96a:	ee27 5b06 	vmul.f64	d5, d7, d6
     96e:	4b55      	ldr	r3, [pc, #340]	; (ac4 <calc_fixed_time_MW_sweep+0x2bc>)
     970:	68db      	ldr	r3, [r3, #12]
     972:	3301      	adds	r3, #1
     974:	ee07 3a90 	vmov	s15, r3
     978:	eeb8 6b67 	vcvt.f64.u32	d6, s15
     97c:	ee85 7b06 	vdiv.f64	d7, d5, d6
     980:	eefc 7bc7 	vcvt.u32.f64	s15, d7
     984:	ee17 3a90 	vmov	r3, s15
     988:	62fb      	str	r3, [r7, #44]	; 0x2c
//	printf("%lu points in sweep, %.3g ms each\r\n", mw_sweep_settings.num_steps, (1000 * requested_sweep_period / mw_sweep_settings.num_steps));
//	printf("%lu points in sweep, %lu ms and %lu POP cycles each\r\n", mw_sweep_settings.num_steps, point_time_us / 1000, (uint32_t)(point_time_us/POP_period_us));
	mw_sweep_settings.pop_cycles_per_point = (point_time_us - MW_STABILISE_TIME_US - TIMING_MARGIN_US)/POP_period_us;
     98a:	f241 3288 	movw	r2, #5000	; 0x1388
     98e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
     990:	1a9b      	subs	r3, r3, r2
     992:	2264      	movs	r2, #100	; 0x64
     994:	1a9a      	subs	r2, r3, r2
     996:	4b4c      	ldr	r3, [pc, #304]	; (ac8 <calc_fixed_time_MW_sweep+0x2c0>)
     998:	681b      	ldr	r3, [r3, #0]
     99a:	fbb2 f3f3 	udiv	r3, r2, r3
     99e:	4a49      	ldr	r2, [pc, #292]	; (ac4 <calc_fixed_time_MW_sweep+0x2bc>)
     9a0:	6153      	str	r3, [r2, #20]
	printf("%lu points in sweep, %lu ms and %lu POP cycles each\r\n", mw_sweep_settings.num_steps + 1, point_time_us / 1000, mw_sweep_settings.pop_cycles_per_point);
     9a2:	4b48      	ldr	r3, [pc, #288]	; (ac4 <calc_fixed_time_MW_sweep+0x2bc>)
     9a4:	68db      	ldr	r3, [r3, #12]
     9a6:	1c59      	adds	r1, r3, #1
     9a8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
     9aa:	4a4a      	ldr	r2, [pc, #296]	; (ad4 <calc_fixed_time_MW_sweep+0x2cc>)
     9ac:	fba2 2303 	umull	r2, r3, r2, r3
     9b0:	099a      	lsrs	r2, r3, #6
     9b2:	4b44      	ldr	r3, [pc, #272]	; (ac4 <calc_fixed_time_MW_sweep+0x2bc>)
     9b4:	695b      	ldr	r3, [r3, #20]
     9b6:	4848      	ldr	r0, [pc, #288]	; (ad8 <calc_fixed_time_MW_sweep+0x2d0>)
     9b8:	f000 fd8a 	bl	14d0 <__printf_veneer>
	mw_sweep_settings.dwell_time = mw_sweep_settings.pop_cycles_per_point * POP_period_us + TIMING_MARGIN_US; //selected value of dwell_time in us
     9bc:	4b41      	ldr	r3, [pc, #260]	; (ac4 <calc_fixed_time_MW_sweep+0x2bc>)
     9be:	695b      	ldr	r3, [r3, #20]
     9c0:	4a41      	ldr	r2, [pc, #260]	; (ac8 <calc_fixed_time_MW_sweep+0x2c0>)
     9c2:	6812      	ldr	r2, [r2, #0]
     9c4:	fb02 f303 	mul.w	r3, r2, r3
     9c8:	2264      	movs	r2, #100	; 0x64
     9ca:	4413      	add	r3, r2
     9cc:	4a3d      	ldr	r2, [pc, #244]	; (ac4 <calc_fixed_time_MW_sweep+0x2bc>)
     9ce:	61d3      	str	r3, [r2, #28]

	/* Can avoid spurs if frequency requested can be encoded exactly  */
	start_freq = ((long)(start_freq/unit_step_size_Hz)) * unit_step_size_Hz;
     9d0:	ed97 5b10 	vldr	d5, [r7, #64]	; 0x40
     9d4:	ed97 6b0e 	vldr	d6, [r7, #56]	; 0x38
     9d8:	ee85 7b06 	vdiv.f64	d7, d5, d6
     9dc:	eefd 7bc7 	vcvt.s32.f64	s15, d7
     9e0:	eeb8 7be7 	vcvt.f64.s32	d7, s15
     9e4:	ed97 6b0e 	vldr	d6, [r7, #56]	; 0x38
     9e8:	ee26 7b07 	vmul.f64	d7, d6, d7
     9ec:	ed87 7b10 	vstr	d7, [r7, #64]	; 0x40

	/* Calculate the N division ratio, extracting the fractional and integer parts */
	const double N = ((start_freq * mw_sweep_settings.k) / REF_FREQ);
     9f0:	4b34      	ldr	r3, [pc, #208]	; (ac4 <calc_fixed_time_MW_sweep+0x2bc>)
     9f2:	785b      	ldrb	r3, [r3, #1]
     9f4:	ee07 3a90 	vmov	s15, r3
     9f8:	eeb8 6be7 	vcvt.f64.s32	d6, s15
     9fc:	ed97 7b10 	vldr	d7, [r7, #64]	; 0x40
     a00:	ee26 6b07 	vmul.f64	d6, d6, d7
     a04:	ed9f 5b28 	vldr	d5, [pc, #160]	; aa8 <calc_fixed_time_MW_sweep+0x2a0>
     a08:	ee86 7b05 	vdiv.f64	d7, d6, d5
     a0c:	ed87 7b08 	vstr	d7, [r7, #32]
	mw_sweep_settings.NINT = N;
     a10:	ed97 7b08 	vldr	d7, [r7, #32]
     a14:	eefc 7bc7 	vcvt.u32.f64	s15, d7
     a18:	ee17 2a90 	vmov	r2, s15
     a1c:	4b29      	ldr	r3, [pc, #164]	; (ac4 <calc_fixed_time_MW_sweep+0x2bc>)
     a1e:	605a      	str	r2, [r3, #4]
	mw_sweep_settings.NFRAC_start = ((N - mw_sweep_settings.NINT) * (1 << 24)) + 0.5;
     a20:	4b28      	ldr	r3, [pc, #160]	; (ac4 <calc_fixed_time_MW_sweep+0x2bc>)
     a22:	685b      	ldr	r3, [r3, #4]
     a24:	ee07 3a90 	vmov	s15, r3
     a28:	eeb8 7b67 	vcvt.f64.u32	d7, s15
     a2c:	ed97 6b08 	vldr	d6, [r7, #32]
     a30:	ee36 7b47 	vsub.f64	d7, d6, d7
     a34:	ed9f 6b20 	vldr	d6, [pc, #128]	; ab8 <calc_fixed_time_MW_sweep+0x2b0>
     a38:	ee27 7b06 	vmul.f64	d7, d7, d6
     a3c:	eeb6 6b00 	vmov.f64	d6, #96	; 0x3f000000  0.5
     a40:	ee37 7b06 	vadd.f64	d7, d7, d6
     a44:	eefc 7bc7 	vcvt.u32.f64	s15, d7
     a48:	ee17 2a90 	vmov	r2, s15
     a4c:	4b1d      	ldr	r3, [pc, #116]	; (ac4 <calc_fixed_time_MW_sweep+0x2bc>)
     a4e:	609a      	str	r2, [r3, #8]

	/* Calculate the period of a sweep */
	double point_period = (double)(MW_STABILISE_TIME_US + MW_PROCESSING_TIME_US + mw_sweep_settings.dwell_time)/1000000;
     a50:	f241 3288 	movw	r2, #5000	; 0x1388
     a54:	f641 73cc 	movw	r3, #8140	; 0x1fcc
     a58:	441a      	add	r2, r3
     a5a:	4b1a      	ldr	r3, [pc, #104]	; (ac4 <calc_fixed_time_MW_sweep+0x2bc>)
     a5c:	69db      	ldr	r3, [r3, #28]
     a5e:	4413      	add	r3, r2
     a60:	ee07 3a90 	vmov	s15, r3
     a64:	eeb8 6b67 	vcvt.f64.u32	d6, s15
     a68:	ed9f 5b11 	vldr	d5, [pc, #68]	; ab0 <calc_fixed_time_MW_sweep+0x2a8>
     a6c:	ee86 7b05 	vdiv.f64	d7, d6, d5
     a70:	ed87 7b16 	vstr	d7, [r7, #88]	; 0x58
//	printf("Point period %f\r\n", point_period);
	double calc_sweep_time = point_period * (double)(mw_sweep_settings.num_steps+1);
     a74:	4b13      	ldr	r3, [pc, #76]	; (ac4 <calc_fixed_time_MW_sweep+0x2bc>)
     a76:	68db      	ldr	r3, [r3, #12]
     a78:	3301      	adds	r3, #1
     a7a:	ee07 3a90 	vmov	s15, r3
     a7e:	eeb8 7b67 	vcvt.f64.u32	d7, s15
     a82:	ed97 6b16 	vldr	d6, [r7, #88]	; 0x58
     a86:	ee26 7b07 	vmul.f64	d7, d6, d7
     a8a:	ed87 7b14 	vstr	d7, [r7, #80]	; 0x50
//	printf("calc_sweep_time %f\r\n", calc_sweep_time);
//	double calc_sweep_time = (double)(MW_STABILISE_TIME_US + MW_PROCESSING_TIME_US + mw_sweep_settings.dwell_time) * (double)(mw_sweep_settings.num_steps)/1000000;
	printf("Sweep period could be reduced to %.3g s with same number of POP samples\r\n", calc_sweep_time);
     a8e:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
     a92:	4812      	ldr	r0, [pc, #72]	; (adc <calc_fixed_time_MW_sweep+0x2d4>)
     a94:	f000 fd1c 	bl	14d0 <__printf_veneer>
	/* Increase dwell time until the sweep is just slightly longer than the sweep period requested */
	while ((double)((mw_sweep_settings.num_steps + 1) * point_period) < requested_sweep_period) {
     a98:	e039      	b.n	b0e <calc_fixed_time_MW_sweep+0x306>
     a9a:	bf00      	nop
     a9c:	f3af 8000 	nop.w
     aa0:	00000000 	.word	0x00000000
     aa4:	41cdcd65 	.word	0x41cdcd65
     aa8:	00000000 	.word	0x00000000
     aac:	4187d784 	.word	0x4187d784
     ab0:	00000000 	.word	0x00000000
     ab4:	412e8480 	.word	0x412e8480
     ab8:	00000000 	.word	0x00000000
     abc:	41700000 	.word	0x41700000
     ac0:	0801be54 	.word	0x0801be54
     ac4:	200005b0 	.word	0x200005b0
     ac8:	200005a0 	.word	0x200005a0
     acc:	000f4240 	.word	0x000f4240
     ad0:	0801bea4 	.word	0x0801bea4
     ad4:	10624dd3 	.word	0x10624dd3
     ad8:	0801bed0 	.word	0x0801bed0
     adc:	0801bf08 	.word	0x0801bf08
		mw_sweep_settings.dwell_time++;
     ae0:	4b41      	ldr	r3, [pc, #260]	; (be8 <calc_fixed_time_MW_sweep+0x3e0>)
     ae2:	69db      	ldr	r3, [r3, #28]
     ae4:	3301      	adds	r3, #1
     ae6:	4a40      	ldr	r2, [pc, #256]	; (be8 <calc_fixed_time_MW_sweep+0x3e0>)
     ae8:	61d3      	str	r3, [r2, #28]
		point_period = (MW_STABILISE_TIME_US + MW_PROCESSING_TIME_US + mw_sweep_settings.dwell_time)/1000000; //recalculate for new dwell time
     aea:	f241 3288 	movw	r2, #5000	; 0x1388
     aee:	f641 73cc 	movw	r3, #8140	; 0x1fcc
     af2:	441a      	add	r2, r3
     af4:	4b3c      	ldr	r3, [pc, #240]	; (be8 <calc_fixed_time_MW_sweep+0x3e0>)
     af6:	69db      	ldr	r3, [r3, #28]
     af8:	4413      	add	r3, r2
     afa:	4a3c      	ldr	r2, [pc, #240]	; (bec <calc_fixed_time_MW_sweep+0x3e4>)
     afc:	fba2 2303 	umull	r2, r3, r2, r3
     b00:	0c9b      	lsrs	r3, r3, #18
     b02:	ee07 3a90 	vmov	s15, r3
     b06:	eeb8 7b67 	vcvt.f64.u32	d7, s15
     b0a:	ed87 7b16 	vstr	d7, [r7, #88]	; 0x58
	while ((double)((mw_sweep_settings.num_steps + 1) * point_period) < requested_sweep_period) {
     b0e:	4b36      	ldr	r3, [pc, #216]	; (be8 <calc_fixed_time_MW_sweep+0x3e0>)
     b10:	68db      	ldr	r3, [r3, #12]
     b12:	3301      	adds	r3, #1
     b14:	ee07 3a90 	vmov	s15, r3
     b18:	eeb8 6b67 	vcvt.f64.u32	d6, s15
     b1c:	ed97 7b16 	vldr	d7, [r7, #88]	; 0x58
     b20:	ee26 7b07 	vmul.f64	d7, d6, d7
     b24:	ed97 6b02 	vldr	d6, [r7, #8]
     b28:	eeb4 6bc7 	vcmpe.f64	d6, d7
     b2c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
     b30:	dcd6      	bgt.n	ae0 <calc_fixed_time_MW_sweep+0x2d8>
	}

	//Period of MW sweep isn't precise as it's based on measured averages processing time
	//Additional 10% (max of 1s) added to sweep period to guarantee horizontal scope sync
	if (scope_sync_time) {
     b32:	79fb      	ldrb	r3, [r7, #7]
     b34:	2b00      	cmp	r3, #0
     b36:	d045      	beq.n	bc4 <calc_fixed_time_MW_sweep+0x3bc>
		mw_sweep_settings.num_steps = mw_sweep_settings.num_steps * 1.1 + 0.5;
     b38:	4b2b      	ldr	r3, [pc, #172]	; (be8 <calc_fixed_time_MW_sweep+0x3e0>)
     b3a:	68db      	ldr	r3, [r3, #12]
     b3c:	ee07 3a90 	vmov	s15, r3
     b40:	eeb8 7b67 	vcvt.f64.u32	d7, s15
     b44:	ed9f 6b26 	vldr	d6, [pc, #152]	; be0 <calc_fixed_time_MW_sweep+0x3d8>
     b48:	ee27 7b06 	vmul.f64	d7, d7, d6
     b4c:	eeb6 6b00 	vmov.f64	d6, #96	; 0x3f000000  0.5
     b50:	ee37 7b06 	vadd.f64	d7, d7, d6
     b54:	eefc 7bc7 	vcvt.u32.f64	s15, d7
     b58:	ee17 2a90 	vmov	r2, s15
     b5c:	4b22      	ldr	r3, [pc, #136]	; (be8 <calc_fixed_time_MW_sweep+0x3e0>)
     b5e:	60da      	str	r2, [r3, #12]
		calc_sweep_time = point_period * (double)(mw_sweep_settings.num_steps + 1);
     b60:	4b21      	ldr	r3, [pc, #132]	; (be8 <calc_fixed_time_MW_sweep+0x3e0>)
     b62:	68db      	ldr	r3, [r3, #12]
     b64:	3301      	adds	r3, #1
     b66:	ee07 3a90 	vmov	s15, r3
     b6a:	eeb8 7b67 	vcvt.f64.u32	d7, s15
     b6e:	ed97 6b16 	vldr	d6, [r7, #88]	; 0x58
     b72:	ee26 7b07 	vmul.f64	d7, d6, d7
     b76:	ed87 7b14 	vstr	d7, [r7, #80]	; 0x50

		/* Decrease number of steps if additional 10% is >1s */
		while (calc_sweep_time - requested_sweep_period > 1) {
     b7a:	e011      	b.n	ba0 <calc_fixed_time_MW_sweep+0x398>
			mw_sweep_settings.num_steps--;
     b7c:	4b1a      	ldr	r3, [pc, #104]	; (be8 <calc_fixed_time_MW_sweep+0x3e0>)
     b7e:	68db      	ldr	r3, [r3, #12]
     b80:	3b01      	subs	r3, #1
     b82:	4a19      	ldr	r2, [pc, #100]	; (be8 <calc_fixed_time_MW_sweep+0x3e0>)
     b84:	60d3      	str	r3, [r2, #12]
			calc_sweep_time = point_period * (double)(mw_sweep_settings.num_steps + 1);
     b86:	4b18      	ldr	r3, [pc, #96]	; (be8 <calc_fixed_time_MW_sweep+0x3e0>)
     b88:	68db      	ldr	r3, [r3, #12]
     b8a:	3301      	adds	r3, #1
     b8c:	ee07 3a90 	vmov	s15, r3
     b90:	eeb8 7b67 	vcvt.f64.u32	d7, s15
     b94:	ed97 6b16 	vldr	d6, [r7, #88]	; 0x58
     b98:	ee26 7b07 	vmul.f64	d7, d6, d7
     b9c:	ed87 7b14 	vstr	d7, [r7, #80]	; 0x50
		while (calc_sweep_time - requested_sweep_period > 1) {
     ba0:	ed97 6b14 	vldr	d6, [r7, #80]	; 0x50
     ba4:	ed97 7b02 	vldr	d7, [r7, #8]
     ba8:	ee36 7b47 	vsub.f64	d7, d6, d7
     bac:	eeb7 6b00 	vmov.f64	d6, #112	; 0x3f800000  1.0
     bb0:	eeb4 7bc6 	vcmpe.f64	d7, d6
     bb4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
     bb8:	dce0      	bgt.n	b7c <calc_fixed_time_MW_sweep+0x374>
		}

		//Double check of the sweep period selected
		printf("Final calculated sweep period, including scope sync: %.3g s\r\n", calc_sweep_time);
     bba:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
     bbe:	480c      	ldr	r0, [pc, #48]	; (bf0 <calc_fixed_time_MW_sweep+0x3e8>)
     bc0:	f000 fc86 	bl	14d0 <__printf_veneer>
	}

	mw_sweep_settings.current_point = 0;
     bc4:	4b08      	ldr	r3, [pc, #32]	; (be8 <calc_fixed_time_MW_sweep+0x3e0>)
     bc6:	2200      	movs	r2, #0
     bc8:	625a      	str	r2, [r3, #36]	; 0x24
	mw_sweep_settings.sweep_period = calc_sweep_time;
     bca:	4907      	ldr	r1, [pc, #28]	; (be8 <calc_fixed_time_MW_sweep+0x3e0>)
     bcc:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
     bd0:	e9c1 230e 	strd	r2, r3, [r1, #56]	; 0x38
	//print_mw_sweep_settings();
	return(true);
     bd4:	2301      	movs	r3, #1
}
     bd6:	4618      	mov	r0, r3
     bd8:	3760      	adds	r7, #96	; 0x60
     bda:	46bd      	mov	sp, r7
     bdc:	bd80      	pop	{r7, pc}
     bde:	bf00      	nop
     be0:	9999999a 	.word	0x9999999a
     be4:	3ff19999 	.word	0x3ff19999
     be8:	200005b0 	.word	0x200005b0
     bec:	431bde83 	.word	0x431bde83
     bf0:	0801bf54 	.word	0x0801bf54

00000bf4 <calculate_k>:

/**
  * @brief  Calculates k value
  * @retval k
  */
static const uint32_t calculate_k(const double frequency) {
     bf4:	b480      	push	{r7}
     bf6:	b085      	sub	sp, #20
     bf8:	af00      	add	r7, sp, #0
     bfa:	ed87 0b00 	vstr	d0, [r7]
	uint32_t k = VCO_MAX_FREQ / frequency;
     bfe:	ed9f 5b10 	vldr	d5, [pc, #64]	; c40 <calculate_k+0x4c>
     c02:	ed97 6b00 	vldr	d6, [r7]
     c06:	ee85 7b06 	vdiv.f64	d7, d5, d6
     c0a:	eefc 7bc7 	vcvt.u32.f64	s15, d7
     c0e:	ee17 3a90 	vmov	r3, s15
     c12:	60fb      	str	r3, [r7, #12]

	if (k != 1) {
     c14:	68fb      	ldr	r3, [r7, #12]
     c16:	2b01      	cmp	r3, #1
     c18:	d00b      	beq.n	c32 <calculate_k+0x3e>
		while (k > 62 || k % 2) {
     c1a:	e002      	b.n	c22 <calculate_k+0x2e>
			k --;
     c1c:	68fb      	ldr	r3, [r7, #12]
     c1e:	3b01      	subs	r3, #1
     c20:	60fb      	str	r3, [r7, #12]
		while (k > 62 || k % 2) {
     c22:	68fb      	ldr	r3, [r7, #12]
     c24:	2b3e      	cmp	r3, #62	; 0x3e
     c26:	d8f9      	bhi.n	c1c <calculate_k+0x28>
     c28:	68fb      	ldr	r3, [r7, #12]
     c2a:	f003 0301 	and.w	r3, r3, #1
     c2e:	2b00      	cmp	r3, #0
     c30:	d1f4      	bne.n	c1c <calculate_k+0x28>
		}
	}
	return (k);
     c32:	68fb      	ldr	r3, [r7, #12]
}
     c34:	4618      	mov	r0, r3
     c36:	3714      	adds	r7, #20
     c38:	46bd      	mov	sp, r7
     c3a:	f85d 7b04 	ldr.w	r7, [sp], #4
     c3e:	4770      	bx	lr
     c40:	20000000 	.word	0x20000000
     c44:	41ee8c21 	.word	0x41ee8c21

00000c48 <start_POP_calibration>:

/**
  * @brief  Starts the process of measuring the POP period
  * @retval None
  */
void start_POP_calibration(const bool cal_only) {
     c48:	b580      	push	{r7, lr}
     c4a:	b082      	sub	sp, #8
     c4c:	af00      	add	r7, sp, #0
     c4e:	4603      	mov	r3, r0
     c50:	71fb      	strb	r3, [r7, #7]
	/* Requires ADC to be initialised and for HAL_ADC_ConvCpltCallback to be active */
	if (cal_only == true) {
     c52:	79fb      	ldrb	r3, [r7, #7]
     c54:	2b00      	cmp	r3, #0
     c56:	d003      	beq.n	c60 <start_POP_calibration+0x18>
		mw_sweep_settings.sweep_mode = POP_CAL_ONLY;
     c58:	4b0f      	ldr	r3, [pc, #60]	; (c98 <start_POP_calibration+0x50>)
     c5a:	2201      	movs	r2, #1
     c5c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
	}
	HAL_GPIO_WritePin(MW_INVALID_GPIO_Port, MW_INVALID_Pin, GPIO_PIN_SET); 	//Sets MW_invalid pin high to reset POP cycle
     c60:	2201      	movs	r2, #1
     c62:	2102      	movs	r1, #2
     c64:	480d      	ldr	r0, [pc, #52]	; (c9c <start_POP_calibration+0x54>)
     c66:	f000 fc23 	bl	14b0 <__HAL_GPIO_WritePin_veneer>
	start_timer(MW_TIMER); //reset MW_timer and start counting
     c6a:	4b0d      	ldr	r3, [pc, #52]	; (ca0 <start_POP_calibration+0x58>)
     c6c:	681b      	ldr	r3, [r3, #0]
     c6e:	4618      	mov	r0, r3
     c70:	f000 fae8 	bl	1244 <start_timer>
	HAL_Delay(10); // 10ms in case ADC was part-way through a conversion
     c74:	200a      	movs	r0, #10
     c76:	f000 fc03 	bl	1480 <__HAL_Delay_veneer>
	sample_count = 0; //reset sample count
     c7a:	4b0a      	ldr	r3, [pc, #40]	; (ca4 <start_POP_calibration+0x5c>)
     c7c:	2200      	movs	r2, #0
     c7e:	801a      	strh	r2, [r3, #0]
	mw_sweep_settings.state = MW_CALIBRATE;
     c80:	4b05      	ldr	r3, [pc, #20]	; (c98 <start_POP_calibration+0x50>)
     c82:	2204      	movs	r2, #4
     c84:	701a      	strb	r2, [r3, #0]
	HAL_GPIO_WritePin(MW_INVALID_GPIO_Port, MW_INVALID_Pin, GPIO_PIN_RESET); //Restart POP cycle
     c86:	2200      	movs	r2, #0
     c88:	2102      	movs	r1, #2
     c8a:	4804      	ldr	r0, [pc, #16]	; (c9c <start_POP_calibration+0x54>)
     c8c:	f000 fc10 	bl	14b0 <__HAL_GPIO_WritePin_veneer>
	#ifdef MW_VERBOSE
		printf("POP calibration started\r\n");
	#endif //MW_VERBOSE
}
     c90:	bf00      	nop
     c92:	3708      	adds	r7, #8
     c94:	46bd      	mov	sp, r7
     c96:	bd80      	pop	{r7, pc}
     c98:	200005b0 	.word	0x200005b0
     c9c:	58020400 	.word	0x58020400
     ca0:	2000001c 	.word	0x2000001c
     ca4:	2000059e 	.word	0x2000059e

00000ca8 <start_MW_sweep>:

/**
  * @brief  Starts a MW sweep
  * @retval Success/failure
  */
static const bool start_MW_sweep(const bool single_sweep) {
     ca8:	b580      	push	{r7, lr}
     caa:	b082      	sub	sp, #8
     cac:	af00      	add	r7, sp, #0
     cae:	4603      	mov	r3, r0
     cb0:	71fb      	strb	r3, [r7, #7]
	//uses settings from the mw_sweep_settings structure
	if (single_sweep == true) {
     cb2:	79fb      	ldrb	r3, [r7, #7]
     cb4:	2b00      	cmp	r3, #0
     cb6:	d003      	beq.n	cc0 <start_MW_sweep+0x18>
		mw_sweep_settings.sweep_mode = SWEEP_ONCE;
     cb8:	4b19      	ldr	r3, [pc, #100]	; (d20 <start_MW_sweep+0x78>)
     cba:	2202      	movs	r2, #2
     cbc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
	}
	HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_SET); // Assume MW lock, the LED will be disabled if lock fails.
     cc0:	2201      	movs	r2, #1
     cc2:	2102      	movs	r1, #2
     cc4:	4817      	ldr	r0, [pc, #92]	; (d24 <start_MW_sweep+0x7c>)
     cc6:	f000 fbf3 	bl	14b0 <__HAL_GPIO_WritePin_veneer>

	#ifdef MW_VERBOSE
		printf("Setting trigger output low \r\n");
	#endif //MW_VERBOSE

	HAL_GPIO_WritePin(MW_INVALID_GPIO_Port, MW_INVALID_Pin, GPIO_PIN_SET); //Sets MW_invalid pin high
     cca:	2201      	movs	r2, #1
     ccc:	2102      	movs	r1, #2
     cce:	4816      	ldr	r0, [pc, #88]	; (d28 <start_MW_sweep+0x80>)
     cd0:	f000 fbee 	bl	14b0 <__HAL_GPIO_WritePin_veneer>
//	set_frequency(mw_sweep_settings.NINT, mw_sweep_settings.NFRAC_start, mw_sweep_settings.k, MANUAL_MUTE); //program initial MW frequency
	set_freq_regs(mw_sweep_settings.NINT, mw_sweep_settings.NFRAC_start, mw_sweep_settings.k); //program initial MW frequency
     cd4:	4b12      	ldr	r3, [pc, #72]	; (d20 <start_MW_sweep+0x78>)
     cd6:	685b      	ldr	r3, [r3, #4]
     cd8:	4a11      	ldr	r2, [pc, #68]	; (d20 <start_MW_sweep+0x78>)
     cda:	6891      	ldr	r1, [r2, #8]
     cdc:	4a10      	ldr	r2, [pc, #64]	; (d20 <start_MW_sweep+0x78>)
     cde:	7852      	ldrb	r2, [r2, #1]
     ce0:	4618      	mov	r0, r3
     ce2:	f7ff fba1 	bl	428 <set_freq_regs>
	mw_sweep_settings.state = MW_STABILISING; //waiting for MW output to stabilise
     ce6:	4b0e      	ldr	r3, [pc, #56]	; (d20 <start_MW_sweep+0x78>)
     ce8:	2202      	movs	r2, #2
     cea:	701a      	strb	r2, [r3, #0]
	mw_sweep_settings.current_point = 0; //currently on at start of ramp i.e. point 0
     cec:	4b0c      	ldr	r3, [pc, #48]	; (d20 <start_MW_sweep+0x78>)
     cee:	2200      	movs	r2, #0
     cf0:	625a      	str	r2, [r3, #36]	; 0x24
	/* Output used for triggering external scope */
	HAL_GPIO_WritePin(SCOPE_TRIG_OUT_GPIO_Port, SCOPE_TRIG_OUT_Pin, GPIO_PIN_RESET); // Sets trigger output low
     cf2:	2200      	movs	r2, #0
     cf4:	2101      	movs	r1, #1
     cf6:	480d      	ldr	r0, [pc, #52]	; (d2c <start_MW_sweep+0x84>)
     cf8:	f000 fbda 	bl	14b0 <__HAL_GPIO_WritePin_veneer>
	start_timer(MW_TIMER); //reset MW_timer (MW step timer) and start counting
     cfc:	4b0c      	ldr	r3, [pc, #48]	; (d30 <start_MW_sweep+0x88>)
     cfe:	681b      	ldr	r3, [r3, #0]
     d00:	4618      	mov	r0, r3
     d02:	f000 fa9f 	bl	1244 <start_timer>
	start_timer(SWEEP_TIMER); //reset general (sweep) timer and start counting
     d06:	4b0b      	ldr	r3, [pc, #44]	; (d34 <start_MW_sweep+0x8c>)
     d08:	681b      	ldr	r3, [r3, #0]
     d0a:	4618      	mov	r0, r3
     d0c:	f000 fa9a 	bl	1244 <start_timer>
	sample_count = 0; //reset sample count
     d10:	4b09      	ldr	r3, [pc, #36]	; (d38 <start_MW_sweep+0x90>)
     d12:	2200      	movs	r2, #0
     d14:	801a      	strh	r2, [r3, #0]
	//known limitation - if the ADC has been recently triggered and HAL_ADC_ConvCpltCallback will increment sample_count by 1
	return(true);
     d16:	2301      	movs	r3, #1
}
     d18:	4618      	mov	r0, r3
     d1a:	3708      	adds	r7, #8
     d1c:	46bd      	mov	sp, r7
     d1e:	bd80      	pop	{r7, pc}
     d20:	200005b0 	.word	0x200005b0
     d24:	58021000 	.word	0x58021000
     d28:	58020400 	.word	0x58020400
     d2c:	58021800 	.word	0x58021800
     d30:	2000001c 	.word	0x2000001c
     d34:	20000020 	.word	0x20000020
     d38:	2000059e 	.word	0x2000059e

00000d3c <start_continuous_MW_sweep>:

/**
  * @brief  Starts a continuous MW calibrate/sweep cycle
  * @retval Success/failure
  */
void start_continuous_MW_sweep(void) {
     d3c:	b580      	push	{r7, lr}
     d3e:	af00      	add	r7, sp, #0
	mw_sweep_settings.sweep_mode = CONTINUOUS_SWEEP;
     d40:	4b04      	ldr	r3, [pc, #16]	; (d54 <start_continuous_MW_sweep+0x18>)
     d42:	2200      	movs	r2, #0
     d44:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
	start_POP_calibration(false);
     d48:	2000      	movs	r0, #0
     d4a:	f7ff ff7d 	bl	c48 <start_POP_calibration>
}
     d4e:	bf00      	nop
     d50:	bd80      	pop	{r7, pc}
     d52:	bf00      	nop
     d54:	200005b0 	.word	0x200005b0

00000d58 <MW_update>:

/**
  * @brief  Checks MW status to see if a timer has elapsed and if frequency needs changing.
  * @retval True if an action was taken
  */
const bool MW_update(void) {
     d58:	b580      	push	{r7, lr}
     d5a:	b08a      	sub	sp, #40	; 0x28
     d5c:	af02      	add	r7, sp, #8
	uint8_t local_copy_of_MW_state = mw_sweep_settings.state; //hack to make switch statement behave
     d5e:	4ba4      	ldr	r3, [pc, #656]	; (ff0 <MW_update+0x298>)
     d60:	781b      	ldrb	r3, [r3, #0]
     d62:	77bb      	strb	r3, [r7, #30]
	//switch (mw_sweep_settings.state)
	bool action_taken = false;
     d64:	2300      	movs	r3, #0
     d66:	77fb      	strb	r3, [r7, #31]
	uint32_t sweep_period_us;
	switch (local_copy_of_MW_state)
     d68:	7fbb      	ldrb	r3, [r7, #30]
     d6a:	2b04      	cmp	r3, #4
     d6c:	f200 8128 	bhi.w	fc0 <MW_update+0x268>
     d70:	a201      	add	r2, pc, #4	; (adr r2, d78 <MW_update+0x20>)
     d72:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
     d76:	bf00      	nop
     d78:	00000fd9 	.word	0x00000fd9
     d7c:	00000fd9 	.word	0x00000fd9
     d80:	00000d8d 	.word	0x00000d8d
     d84:	00000dcf 	.word	0x00000dcf
     d88:	00000f4d 	.word	0x00000f4d
		case MW_STOPPED:
		case MW_FIXED_FREQ:
			break; //no action to take

		case MW_STABILISING: //waiting for MW output to stabilise
			if (check_timer(MW_TIMER) < MW_STABILISE_TIME_US) return(false); //Still waiting, no action taken
     d8c:	4b99      	ldr	r3, [pc, #612]	; (ff4 <MW_update+0x29c>)
     d8e:	681b      	ldr	r3, [r3, #0]
     d90:	4618      	mov	r0, r3
     d92:	f000 fa87 	bl	12a4 <check_timer>
     d96:	4603      	mov	r3, r0
     d98:	f241 3288 	movw	r2, #5000	; 0x1388
     d9c:	4293      	cmp	r3, r2
     d9e:	d201      	bcs.n	da4 <MW_update+0x4c>
     da0:	2300      	movs	r3, #0
     da2:	e11d      	b.n	fe0 <MW_update+0x288>
			//Otherwise MW stabilisation timer has elapsed
			stop_timer(MW_TIMER);
     da4:	4b93      	ldr	r3, [pc, #588]	; (ff4 <MW_update+0x29c>)
     da6:	681b      	ldr	r3, [r3, #0]
     da8:	4618      	mov	r0, r3
     daa:	f000 fa69 	bl	1280 <stop_timer>
			HAL_GPIO_WritePin(MW_INVALID_GPIO_Port, MW_INVALID_Pin, GPIO_PIN_RESET); //Sets MW_invalid pin low as MW now stable
     dae:	2200      	movs	r2, #0
     db0:	2102      	movs	r1, #2
     db2:	4891      	ldr	r0, [pc, #580]	; (ff8 <MW_update+0x2a0>)
     db4:	f000 fb7c 	bl	14b0 <__HAL_GPIO_WritePin_veneer>
			mw_sweep_settings.state = MW_DWELL;
     db8:	4b8d      	ldr	r3, [pc, #564]	; (ff0 <MW_update+0x298>)
     dba:	2203      	movs	r2, #3
     dbc:	701a      	strb	r2, [r3, #0]
			start_timer(MW_TIMER); //Restart timer for DWELL time
     dbe:	4b8d      	ldr	r3, [pc, #564]	; (ff4 <MW_update+0x29c>)
     dc0:	681b      	ldr	r3, [r3, #0]
     dc2:	4618      	mov	r0, r3
     dc4:	f000 fa3e 	bl	1244 <start_timer>
			action_taken = true;
     dc8:	2301      	movs	r3, #1
     dca:	77fb      	strb	r3, [r7, #31]
			break;
     dcc:	e107      	b.n	fde <MW_update+0x286>

		case MW_DWELL: //valid MW output waiting for end of dwell time
			if (check_timer(MW_TIMER) < mw_sweep_settings.dwell_time) return(false); //Still waiting
     dce:	4b89      	ldr	r3, [pc, #548]	; (ff4 <MW_update+0x29c>)
     dd0:	681b      	ldr	r3, [r3, #0]
     dd2:	4618      	mov	r0, r3
     dd4:	f000 fa66 	bl	12a4 <check_timer>
     dd8:	4602      	mov	r2, r0
     dda:	4b85      	ldr	r3, [pc, #532]	; (ff0 <MW_update+0x298>)
     ddc:	69db      	ldr	r3, [r3, #28]
     dde:	429a      	cmp	r2, r3
     de0:	d201      	bcs.n	de6 <MW_update+0x8e>
     de2:	2300      	movs	r3, #0
     de4:	e0fc      	b.n	fe0 <MW_update+0x288>
			//Otherwise dwell timer has elapsed
			action_taken = true;
     de6:	2301      	movs	r3, #1
     de8:	77fb      	strb	r3, [r7, #31]
			stop_timer(MW_TIMER);
     dea:	4b82      	ldr	r3, [pc, #520]	; (ff4 <MW_update+0x29c>)
     dec:	681b      	ldr	r3, [r3, #0]
     dee:	4618      	mov	r0, r3
     df0:	f000 fa46 	bl	1280 <stop_timer>
			HAL_GPIO_TogglePin(LD3_GPIO_Port, LD3_Pin); //toggles red LED
     df4:	f44f 4180 	mov.w	r1, #16384	; 0x4000
     df8:	487f      	ldr	r0, [pc, #508]	; (ff8 <MW_update+0x2a0>)
     dfa:	f000 fb55 	bl	14a8 <__HAL_GPIO_TogglePin_veneer>
			HAL_GPIO_WritePin(MW_INVALID_GPIO_Port, MW_INVALID_Pin, GPIO_PIN_SET); //Sets MW_invalid pin high as about to change frequency
     dfe:	2201      	movs	r2, #1
     e00:	2102      	movs	r1, #2
     e02:	487d      	ldr	r0, [pc, #500]	; (ff8 <MW_update+0x2a0>)
     e04:	f000 fb54 	bl	14b0 <__HAL_GPIO_WritePin_veneer>
			mw_sweep_settings.state = MW_STABILISING;
     e08:	4b79      	ldr	r3, [pc, #484]	; (ff0 <MW_update+0x298>)
     e0a:	2202      	movs	r2, #2
     e0c:	701a      	strb	r2, [r3, #0]
			if (mw_sweep_settings.current_point == mw_sweep_settings.num_steps) { // All steps completed, tidy up and restart next sweep
     e0e:	4b78      	ldr	r3, [pc, #480]	; (ff0 <MW_update+0x298>)
     e10:	6a5a      	ldr	r2, [r3, #36]	; 0x24
     e12:	4b77      	ldr	r3, [pc, #476]	; (ff0 <MW_update+0x298>)
     e14:	68db      	ldr	r3, [r3, #12]
     e16:	429a      	cmp	r2, r3
     e18:	d17b      	bne.n	f12 <MW_update+0x1ba>
				HAL_GPIO_WritePin(SCOPE_TRIG_OUT_GPIO_Port, SCOPE_TRIG_OUT_Pin, GPIO_PIN_SET); // Sets trigger output high
     e1a:	2201      	movs	r2, #1
     e1c:	2101      	movs	r1, #1
     e1e:	4877      	ldr	r0, [pc, #476]	; (ffc <MW_update+0x2a4>)
     e20:	f000 fb46 	bl	14b0 <__HAL_GPIO_WritePin_veneer>
				sweep_period_us=check_timer(SWEEP_TIMER);
     e24:	4b76      	ldr	r3, [pc, #472]	; (1000 <MW_update+0x2a8>)
     e26:	681b      	ldr	r3, [r3, #0]
     e28:	4618      	mov	r0, r3
     e2a:	f000 fa3b 	bl	12a4 <check_timer>
     e2e:	6138      	str	r0, [r7, #16]
				stop_timer(SWEEP_TIMER);
     e30:	4b73      	ldr	r3, [pc, #460]	; (1000 <MW_update+0x2a8>)
     e32:	681b      	ldr	r3, [r3, #0]
     e34:	4618      	mov	r0, r3
     e36:	f000 fa23 	bl	1280 <stop_timer>
				printf("Sweep complete in %.4g s. Expected %.4g s\r\n", (double)(sweep_period_us)/1000000, mw_sweep_settings.sweep_period);
     e3a:	693b      	ldr	r3, [r7, #16]
     e3c:	ee07 3a90 	vmov	s15, r3
     e40:	eeb8 7b67 	vcvt.f64.u32	d7, s15
     e44:	ed9f 6b68 	vldr	d6, [pc, #416]	; fe8 <MW_update+0x290>
     e48:	ee87 5b06 	vdiv.f64	d5, d7, d6
     e4c:	4b68      	ldr	r3, [pc, #416]	; (ff0 <MW_update+0x298>)
     e4e:	e9d3 230e 	ldrd	r2, r3, [r3, #56]	; 0x38
     e52:	e9cd 2300 	strd	r2, r3, [sp]
     e56:	ec53 2b15 	vmov	r2, r3, d5
     e5a:	486a      	ldr	r0, [pc, #424]	; (1004 <MW_update+0x2ac>)
     e5c:	f000 fb38 	bl	14d0 <__printf_veneer>

				/* Check if the ADC registered the correct number of samples */
				uint16_t expected_samples = mw_sweep_settings.pop_cycles_per_point * (mw_sweep_settings.num_steps + 1);
     e60:	4b63      	ldr	r3, [pc, #396]	; (ff0 <MW_update+0x298>)
     e62:	695b      	ldr	r3, [r3, #20]
     e64:	b29a      	uxth	r2, r3
     e66:	4b62      	ldr	r3, [pc, #392]	; (ff0 <MW_update+0x298>)
     e68:	68db      	ldr	r3, [r3, #12]
     e6a:	3301      	adds	r3, #1
     e6c:	b29b      	uxth	r3, r3
     e6e:	fb12 f303 	smulbb	r3, r2, r3
     e72:	81fb      	strh	r3, [r7, #14]
				if (sample_count < expected_samples) {
     e74:	4b64      	ldr	r3, [pc, #400]	; (1008 <MW_update+0x2b0>)
     e76:	881b      	ldrh	r3, [r3, #0]
     e78:	b29b      	uxth	r3, r3
     e7a:	89fa      	ldrh	r2, [r7, #14]
     e7c:	429a      	cmp	r2, r3
     e7e:	d907      	bls.n	e90 <MW_update+0x138>
					printf("Sweep generated %u samples but only %u registered\r\n", expected_samples, sample_count);
     e80:	89fb      	ldrh	r3, [r7, #14]
     e82:	4a61      	ldr	r2, [pc, #388]	; (1008 <MW_update+0x2b0>)
     e84:	8812      	ldrh	r2, [r2, #0]
     e86:	b292      	uxth	r2, r2
     e88:	4619      	mov	r1, r3
     e8a:	4860      	ldr	r0, [pc, #384]	; (100c <MW_update+0x2b4>)
     e8c:	f000 fb20 	bl	14d0 <__printf_veneer>
				}
				/* calculate measured time per point */
				double measured_time_per_point = (double)(sweep_period_us)/(mw_sweep_settings.num_steps+1);
     e90:	693b      	ldr	r3, [r7, #16]
     e92:	ee07 3a90 	vmov	s15, r3
     e96:	eeb8 5b67 	vcvt.f64.u32	d5, s15
     e9a:	4b55      	ldr	r3, [pc, #340]	; (ff0 <MW_update+0x298>)
     e9c:	68db      	ldr	r3, [r3, #12]
     e9e:	3301      	adds	r3, #1
     ea0:	ee07 3a90 	vmov	s15, r3
     ea4:	eeb8 6b67 	vcvt.f64.u32	d6, s15
     ea8:	ee85 7b06 	vdiv.f64	d7, d5, d6
     eac:	ed87 7b00 	vstr	d7, [r7]
				printf("measured_time_per_point, %.7g us\r\n", measured_time_per_point);
     eb0:	e9d7 2300 	ldrd	r2, r3, [r7]
     eb4:	4856      	ldr	r0, [pc, #344]	; (1010 <MW_update+0x2b8>)
     eb6:	f000 fb0b 	bl	14d0 <__printf_veneer>
				printf("MW_PROCESSING_TIME static:measured %lu:%lu\r\n",MW_PROCESSING_TIME_US, (uint32_t)(measured_time_per_point - TIMING_MARGIN_US - MW_STABILISE_TIME_US - mw_sweep_settings.dwell_time));
     eba:	f641 71cc 	movw	r1, #8140	; 0x1fcc
     ebe:	eddf 7a55 	vldr	s15, [pc, #340]	; 1014 <MW_update+0x2bc>
     ec2:	eeb8 7b67 	vcvt.f64.u32	d7, s15
     ec6:	ed97 6b00 	vldr	d6, [r7]
     eca:	ee36 6b47 	vsub.f64	d6, d6, d7
     ece:	eddf 7a52 	vldr	s15, [pc, #328]	; 1018 <MW_update+0x2c0>
     ed2:	eeb8 7b67 	vcvt.f64.u32	d7, s15
     ed6:	ee36 6b47 	vsub.f64	d6, d6, d7
     eda:	4b45      	ldr	r3, [pc, #276]	; (ff0 <MW_update+0x298>)
     edc:	69db      	ldr	r3, [r3, #28]
     ede:	ee07 3a90 	vmov	s15, r3
     ee2:	eeb8 7b67 	vcvt.f64.u32	d7, s15
     ee6:	ee36 7b47 	vsub.f64	d7, d6, d7
     eea:	eefc 7bc7 	vcvt.u32.f64	s15, d7
     eee:	ee17 2a90 	vmov	r2, s15
     ef2:	484a      	ldr	r0, [pc, #296]	; (101c <MW_update+0x2c4>)
     ef4:	f000 faec 	bl	14d0 <__printf_veneer>
				if (mw_sweep_settings.sweep_mode == SWEEP_ONCE) {//have reached the end of a single sweep and should stop
     ef8:	4b3d      	ldr	r3, [pc, #244]	; (ff0 <MW_update+0x298>)
     efa:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
     efe:	2b02      	cmp	r3, #2
     f00:	d103      	bne.n	f0a <MW_update+0x1b2>
					mw_sweep_settings.state = MW_STOPPED;
     f02:	4b3b      	ldr	r3, [pc, #236]	; (ff0 <MW_update+0x298>)
     f04:	2200      	movs	r2, #0
     f06:	701a      	strb	r2, [r3, #0]
						printf("Failure to program value to DAC \r\n");
						Error_Handler();
					}
				#endif //RAMP_DAC
			}
			break;
     f08:	e069      	b.n	fde <MW_update+0x286>
					start_POP_calibration(false); //check the POP period and restart the next MW sweep without updating mw_sweep_settings.sweep_mode
     f0a:	2000      	movs	r0, #0
     f0c:	f7ff fe9c 	bl	c48 <start_POP_calibration>
			break;
     f10:	e065      	b.n	fde <MW_update+0x286>
				mw_sweep_settings.current_point++; //increment point counter
     f12:	4b37      	ldr	r3, [pc, #220]	; (ff0 <MW_update+0x298>)
     f14:	6a5b      	ldr	r3, [r3, #36]	; 0x24
     f16:	3301      	adds	r3, #1
     f18:	4a35      	ldr	r2, [pc, #212]	; (ff0 <MW_update+0x298>)
     f1a:	6253      	str	r3, [r2, #36]	; 0x24
				uint32_t local_NFRAC = mw_sweep_settings.NFRAC_start + mw_sweep_settings.step_size * mw_sweep_settings.current_point;
     f1c:	4b34      	ldr	r3, [pc, #208]	; (ff0 <MW_update+0x298>)
     f1e:	689a      	ldr	r2, [r3, #8]
     f20:	4b33      	ldr	r3, [pc, #204]	; (ff0 <MW_update+0x298>)
     f22:	691b      	ldr	r3, [r3, #16]
     f24:	4932      	ldr	r1, [pc, #200]	; (ff0 <MW_update+0x298>)
     f26:	6a49      	ldr	r1, [r1, #36]	; 0x24
     f28:	fb01 f303 	mul.w	r3, r1, r3
     f2c:	4413      	add	r3, r2
     f2e:	617b      	str	r3, [r7, #20]
				set_freq_regs(mw_sweep_settings.NINT, local_NFRAC, mw_sweep_settings.k); //program new MW frequency
     f30:	4b2f      	ldr	r3, [pc, #188]	; (ff0 <MW_update+0x298>)
     f32:	685b      	ldr	r3, [r3, #4]
     f34:	4a2e      	ldr	r2, [pc, #184]	; (ff0 <MW_update+0x298>)
     f36:	7852      	ldrb	r2, [r2, #1]
     f38:	6979      	ldr	r1, [r7, #20]
     f3a:	4618      	mov	r0, r3
     f3c:	f7ff fa74 	bl	428 <set_freq_regs>
				start_timer(MW_TIMER); //Restart timer for MW stabilisation time
     f40:	4b2c      	ldr	r3, [pc, #176]	; (ff4 <MW_update+0x29c>)
     f42:	681b      	ldr	r3, [r3, #0]
     f44:	4618      	mov	r0, r3
     f46:	f000 f97d 	bl	1244 <start_timer>
			break;
     f4a:	e048      	b.n	fde <MW_update+0x286>

		case MW_CALIBRATE: //Measures the elapsed time taken for 20 POP cycles
			if (sample_count >= 20) {//20 or more POP cycles have elapsed
     f4c:	4b2e      	ldr	r3, [pc, #184]	; (1008 <MW_update+0x2b0>)
     f4e:	881b      	ldrh	r3, [r3, #0]
     f50:	b29b      	uxth	r3, r3
     f52:	2b13      	cmp	r3, #19
     f54:	d942      	bls.n	fdc <MW_update+0x284>
				uint32_t total_POP_cal_period = check_timer(MW_TIMER);
     f56:	4b27      	ldr	r3, [pc, #156]	; (ff4 <MW_update+0x29c>)
     f58:	681b      	ldr	r3, [r3, #0]
     f5a:	4618      	mov	r0, r3
     f5c:	f000 f9a2 	bl	12a4 <check_timer>
     f60:	61b8      	str	r0, [r7, #24]
				POP_period_us = (float)(total_POP_cal_period) / 20 + 0.5;
     f62:	69bb      	ldr	r3, [r7, #24]
     f64:	ee07 3a90 	vmov	s15, r3
     f68:	eeb8 7a67 	vcvt.f32.u32	s14, s15
     f6c:	eef3 6a04 	vmov.f32	s13, #52	; 0x41a00000  20.0
     f70:	eec7 7a26 	vdiv.f32	s15, s14, s13
     f74:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
     f78:	eeb6 6b00 	vmov.f64	d6, #96	; 0x3f000000  0.5
     f7c:	ee37 7b06 	vadd.f64	d7, d7, d6
     f80:	eefc 7bc7 	vcvt.u32.f64	s15, d7
     f84:	ee17 2a90 	vmov	r2, s15
     f88:	4b25      	ldr	r3, [pc, #148]	; (1020 <MW_update+0x2c8>)
     f8a:	601a      	str	r2, [r3, #0]
				stop_timer(MW_TIMER);
     f8c:	4b19      	ldr	r3, [pc, #100]	; (ff4 <MW_update+0x29c>)
     f8e:	681b      	ldr	r3, [r3, #0]
     f90:	4618      	mov	r0, r3
     f92:	f000 f975 	bl	1280 <stop_timer>
				printf("POP period, averaged over 20 cycles: %lu us\r\n", POP_period_us);
     f96:	4b22      	ldr	r3, [pc, #136]	; (1020 <MW_update+0x2c8>)
     f98:	681b      	ldr	r3, [r3, #0]
     f9a:	4619      	mov	r1, r3
     f9c:	4821      	ldr	r0, [pc, #132]	; (1024 <MW_update+0x2cc>)
     f9e:	f000 fa97 	bl	14d0 <__printf_veneer>
				action_taken = true;
     fa2:	2301      	movs	r3, #1
     fa4:	77fb      	strb	r3, [r7, #31]
				if (mw_sweep_settings.sweep_mode == POP_CAL_ONLY) {//have reached the end of calibration and should stop
     fa6:	4b12      	ldr	r3, [pc, #72]	; (ff0 <MW_update+0x298>)
     fa8:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
     fac:	2b01      	cmp	r3, #1
     fae:	d103      	bne.n	fb8 <MW_update+0x260>
					mw_sweep_settings.state = MW_STOPPED;
     fb0:	4b0f      	ldr	r3, [pc, #60]	; (ff0 <MW_update+0x298>)
     fb2:	2200      	movs	r2, #0
     fb4:	701a      	strb	r2, [r3, #0]
				} else {
						start_MW_sweep(false); //start MW_sweep without updating mw_sweep_settings.sweep_mode
				}
			}
			break;
     fb6:	e011      	b.n	fdc <MW_update+0x284>
						start_MW_sweep(false); //start MW_sweep without updating mw_sweep_settings.sweep_mode
     fb8:	2000      	movs	r0, #0
     fba:	f7ff fe75 	bl	ca8 <start_MW_sweep>
			break;
     fbe:	e00d      	b.n	fdc <MW_update+0x284>

		default: // Other state
	       printf("MW_update has detected illegal state: %u \r\n", mw_sweep_settings.state);
     fc0:	4b0b      	ldr	r3, [pc, #44]	; (ff0 <MW_update+0x298>)
     fc2:	781b      	ldrb	r3, [r3, #0]
     fc4:	4619      	mov	r1, r3
     fc6:	4818      	ldr	r0, [pc, #96]	; (1028 <MW_update+0x2d0>)
     fc8:	f000 fa82 	bl	14d0 <__printf_veneer>
	       printf("local version: %u \r\n", local_copy_of_MW_state);
     fcc:	7fbb      	ldrb	r3, [r7, #30]
     fce:	4619      	mov	r1, r3
     fd0:	4816      	ldr	r0, [pc, #88]	; (102c <MW_update+0x2d4>)
     fd2:	f000 fa7d 	bl	14d0 <__printf_veneer>
     fd6:	e002      	b.n	fde <MW_update+0x286>
			break; //no action to take
     fd8:	bf00      	nop
     fda:	e000      	b.n	fde <MW_update+0x286>
			break;
     fdc:	bf00      	nop
	}
    return(action_taken);
     fde:	7ffb      	ldrb	r3, [r7, #31]
}
     fe0:	4618      	mov	r0, r3
     fe2:	3720      	adds	r7, #32
     fe4:	46bd      	mov	sp, r7
     fe6:	bd80      	pop	{r7, pc}
     fe8:	00000000 	.word	0x00000000
     fec:	412e8480 	.word	0x412e8480
     ff0:	200005b0 	.word	0x200005b0
     ff4:	2000001c 	.word	0x2000001c
     ff8:	58020400 	.word	0x58020400
     ffc:	58021800 	.word	0x58021800
    1000:	20000020 	.word	0x20000020
    1004:	0801bf94 	.word	0x0801bf94
    1008:	2000059e 	.word	0x2000059e
    100c:	0801bfc0 	.word	0x0801bfc0
    1010:	0801bff4 	.word	0x0801bff4
    1014:	00000064 	.word	0x00000064
    1018:	00001388 	.word	0x00001388
    101c:	0801c018 	.word	0x0801c018
    1020:	200005a0 	.word	0x200005a0
    1024:	0801c048 	.word	0x0801c048
    1028:	0801c078 	.word	0x0801c078
    102c:	0801c0a4 	.word	0x0801c0a4

00001030 <MW_frequency_toggle>:
//}

/* Function to check MW settling time
 * Toggles between two MW frequencies
 */
void MW_frequency_toggle (const double f_one, const double f_two) {
    1030:	b580      	push	{r7, lr}
    1032:	b090      	sub	sp, #64	; 0x40
    1034:	af02      	add	r7, sp, #8
    1036:	ed87 0b02 	vstr	d0, [r7, #8]
    103a:	ed87 1b00 	vstr	d1, [r7]
	printf("MW frequency toggling experiment\r\n");
    103e:	486a      	ldr	r0, [pc, #424]	; (11e8 <MW_frequency_toggle+0x1b8>)
    1040:	f000 fa2a 	bl	1498 <__puts_veneer>
	printf("Toggling between %.9g and %.9g GHz\r\n", f_one/1000000000, f_two/1000000000);
    1044:	ed97 7b02 	vldr	d7, [r7, #8]
    1048:	ed9f 6b5f 	vldr	d6, [pc, #380]	; 11c8 <MW_frequency_toggle+0x198>
    104c:	ee87 4b06 	vdiv.f64	d4, d7, d6
    1050:	ed97 6b00 	vldr	d6, [r7]
    1054:	ed9f 5b5c 	vldr	d5, [pc, #368]	; 11c8 <MW_frequency_toggle+0x198>
    1058:	ee86 7b05 	vdiv.f64	d7, d6, d5
    105c:	ed8d 7b00 	vstr	d7, [sp]
    1060:	ec53 2b14 	vmov	r2, r3, d4
    1064:	4861      	ldr	r0, [pc, #388]	; (11ec <MW_frequency_toggle+0x1bc>)
    1066:	f000 fa33 	bl	14d0 <__printf_veneer>

	/* For the k divider we need to find the smallest even integer or use a max of 62*/
	uint32_t k_one = VCO_MAX_FREQ / f_one;
    106a:	ed9f 5b59 	vldr	d5, [pc, #356]	; 11d0 <MW_frequency_toggle+0x1a0>
    106e:	ed97 6b02 	vldr	d6, [r7, #8]
    1072:	ee85 7b06 	vdiv.f64	d7, d5, d6
    1076:	eefc 7bc7 	vcvt.u32.f64	s15, d7
    107a:	ee17 3a90 	vmov	r3, s15
    107e:	637b      	str	r3, [r7, #52]	; 0x34
	if (k_one != 1) {
    1080:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    1082:	2b01      	cmp	r3, #1
    1084:	d00b      	beq.n	109e <MW_frequency_toggle+0x6e>
		while (k_one > 62 || k_one % 2) {
    1086:	e002      	b.n	108e <MW_frequency_toggle+0x5e>
			k_one--;
    1088:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    108a:	3b01      	subs	r3, #1
    108c:	637b      	str	r3, [r7, #52]	; 0x34
		while (k_one > 62 || k_one % 2) {
    108e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    1090:	2b3e      	cmp	r3, #62	; 0x3e
    1092:	d8f9      	bhi.n	1088 <MW_frequency_toggle+0x58>
    1094:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    1096:	f003 0301 	and.w	r3, r3, #1
    109a:	2b00      	cmp	r3, #0
    109c:	d1f4      	bne.n	1088 <MW_frequency_toggle+0x58>
		}
	}
	uint32_t k_two = VCO_MAX_FREQ / f_two;
    109e:	ed9f 5b4c 	vldr	d5, [pc, #304]	; 11d0 <MW_frequency_toggle+0x1a0>
    10a2:	ed97 6b00 	vldr	d6, [r7]
    10a6:	ee85 7b06 	vdiv.f64	d7, d5, d6
    10aa:	eefc 7bc7 	vcvt.u32.f64	s15, d7
    10ae:	ee17 3a90 	vmov	r3, s15
    10b2:	633b      	str	r3, [r7, #48]	; 0x30
	if (k_two != 1) {
    10b4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
    10b6:	2b01      	cmp	r3, #1
    10b8:	d00b      	beq.n	10d2 <MW_frequency_toggle+0xa2>
		while (k_two > 62 || k_two % 2) {
    10ba:	e002      	b.n	10c2 <MW_frequency_toggle+0x92>
			k_two--;
    10bc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
    10be:	3b01      	subs	r3, #1
    10c0:	633b      	str	r3, [r7, #48]	; 0x30
		while (k_two > 62 || k_two % 2) {
    10c2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
    10c4:	2b3e      	cmp	r3, #62	; 0x3e
    10c6:	d8f9      	bhi.n	10bc <MW_frequency_toggle+0x8c>
    10c8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
    10ca:	f003 0301 	and.w	r3, r3, #1
    10ce:	2b00      	cmp	r3, #0
    10d0:	d1f4      	bne.n	10bc <MW_frequency_toggle+0x8c>
		}
	}

	const double N_one = ((f_one * k_one) / REF_FREQ);
    10d2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    10d4:	ee07 3a90 	vmov	s15, r3
    10d8:	eeb8 6b67 	vcvt.f64.u32	d6, s15
    10dc:	ed97 7b02 	vldr	d7, [r7, #8]
    10e0:	ee26 6b07 	vmul.f64	d6, d6, d7
    10e4:	ed9f 5b3c 	vldr	d5, [pc, #240]	; 11d8 <MW_frequency_toggle+0x1a8>
    10e8:	ee86 7b05 	vdiv.f64	d7, d6, d5
    10ec:	ed87 7b0a 	vstr	d7, [r7, #40]	; 0x28
	const double N_two = ((f_two * k_two) / REF_FREQ);
    10f0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
    10f2:	ee07 3a90 	vmov	s15, r3
    10f6:	eeb8 6b67 	vcvt.f64.u32	d6, s15
    10fa:	ed97 7b00 	vldr	d7, [r7]
    10fe:	ee26 6b07 	vmul.f64	d6, d6, d7
    1102:	ed9f 5b35 	vldr	d5, [pc, #212]	; 11d8 <MW_frequency_toggle+0x1a8>
    1106:	ee86 7b05 	vdiv.f64	d7, d6, d5
    110a:	ed87 7b08 	vstr	d7, [r7, #32]

	/* Extract the fractional and integer parts */
	const uint32_t N_one_INT = N_one;
    110e:	ed97 7b0a 	vldr	d7, [r7, #40]	; 0x28
    1112:	eefc 7bc7 	vcvt.u32.f64	s15, d7
    1116:	ee17 3a90 	vmov	r3, s15
    111a:	61fb      	str	r3, [r7, #28]
	const uint32_t N_one_FRAC = ((N_one - N_one_INT) * (1 << 24)) + 0.5;
    111c:	69fb      	ldr	r3, [r7, #28]
    111e:	ee07 3a90 	vmov	s15, r3
    1122:	eeb8 7b67 	vcvt.f64.u32	d7, s15
    1126:	ed97 6b0a 	vldr	d6, [r7, #40]	; 0x28
    112a:	ee36 7b47 	vsub.f64	d7, d6, d7
    112e:	ed9f 6b2c 	vldr	d6, [pc, #176]	; 11e0 <MW_frequency_toggle+0x1b0>
    1132:	ee27 7b06 	vmul.f64	d7, d7, d6
    1136:	eeb6 6b00 	vmov.f64	d6, #96	; 0x3f000000  0.5
    113a:	ee37 7b06 	vadd.f64	d7, d7, d6
    113e:	eefc 7bc7 	vcvt.u32.f64	s15, d7
    1142:	ee17 3a90 	vmov	r3, s15
    1146:	61bb      	str	r3, [r7, #24]
	const uint32_t N_two_INT = N_two;
    1148:	ed97 7b08 	vldr	d7, [r7, #32]
    114c:	eefc 7bc7 	vcvt.u32.f64	s15, d7
    1150:	ee17 3a90 	vmov	r3, s15
    1154:	617b      	str	r3, [r7, #20]
	const uint32_t N_two_FRAC = ((N_two - N_two_INT) * (1 << 24)) + 0.5;
    1156:	697b      	ldr	r3, [r7, #20]
    1158:	ee07 3a90 	vmov	s15, r3
    115c:	eeb8 7b67 	vcvt.f64.u32	d7, s15
    1160:	ed97 6b08 	vldr	d6, [r7, #32]
    1164:	ee36 7b47 	vsub.f64	d7, d6, d7
    1168:	ed9f 6b1d 	vldr	d6, [pc, #116]	; 11e0 <MW_frequency_toggle+0x1b0>
    116c:	ee27 7b06 	vmul.f64	d7, d7, d6
    1170:	eeb6 6b00 	vmov.f64	d6, #96	; 0x3f000000  0.5
    1174:	ee37 7b06 	vadd.f64	d7, d7, d6
    1178:	eefc 7bc7 	vcvt.u32.f64	s15, d7
    117c:	ee17 3a90 	vmov	r3, s15
    1180:	613b      	str	r3, [r7, #16]

	while (1) {
//	set_frequency(N_one_INT, N_one_FRAC, k_one, MANUAL_MUTE); //Program necessary values for f_one
	set_freq_regs(N_one_INT, N_one_FRAC, k_one); //Program necessary values for f_one
    1182:	6b7a      	ldr	r2, [r7, #52]	; 0x34
    1184:	69b9      	ldr	r1, [r7, #24]
    1186:	69f8      	ldr	r0, [r7, #28]
    1188:	f7ff f94e 	bl	428 <set_freq_regs>
	HAL_GPIO_WritePin(SCOPE_TRIG_OUT_GPIO_Port, SCOPE_TRIG_OUT_Pin, GPIO_PIN_RESET); // Sets trigger output low
    118c:	2200      	movs	r2, #0
    118e:	2101      	movs	r1, #1
    1190:	4817      	ldr	r0, [pc, #92]	; (11f0 <MW_frequency_toggle+0x1c0>)
    1192:	f000 f98d 	bl	14b0 <__HAL_GPIO_WritePin_veneer>
	timer_delay(SLOW_TIMER, 1000); //100ms delay
    1196:	4b17      	ldr	r3, [pc, #92]	; (11f4 <MW_frequency_toggle+0x1c4>)
    1198:	681b      	ldr	r3, [r3, #0]
    119a:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
    119e:	4618      	mov	r0, r3
    11a0:	f000 f88c 	bl	12bc <timer_delay>
//	set_frequency(N_two_INT, N_two_FRAC, k_two, MANUAL_MUTE); //Program necessary values for f_two
	set_freq_regs(N_two_INT, N_two_FRAC, k_two); //Program necessary values for f_two
    11a4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
    11a6:	6939      	ldr	r1, [r7, #16]
    11a8:	6978      	ldr	r0, [r7, #20]
    11aa:	f7ff f93d 	bl	428 <set_freq_regs>
	HAL_GPIO_WritePin(SCOPE_TRIG_OUT_GPIO_Port, SCOPE_TRIG_OUT_Pin, GPIO_PIN_SET); // Sets trigger output high
    11ae:	2201      	movs	r2, #1
    11b0:	2101      	movs	r1, #1
    11b2:	480f      	ldr	r0, [pc, #60]	; (11f0 <MW_frequency_toggle+0x1c0>)
    11b4:	f000 f97c 	bl	14b0 <__HAL_GPIO_WritePin_veneer>
	timer_delay(SLOW_TIMER, 1000); //100ms delay
    11b8:	4b0e      	ldr	r3, [pc, #56]	; (11f4 <MW_frequency_toggle+0x1c4>)
    11ba:	681b      	ldr	r3, [r3, #0]
    11bc:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
    11c0:	4618      	mov	r0, r3
    11c2:	f000 f87b 	bl	12bc <timer_delay>
	set_freq_regs(N_one_INT, N_one_FRAC, k_one); //Program necessary values for f_one
    11c6:	e7dc      	b.n	1182 <MW_frequency_toggle+0x152>
    11c8:	00000000 	.word	0x00000000
    11cc:	41cdcd65 	.word	0x41cdcd65
    11d0:	20000000 	.word	0x20000000
    11d4:	41ee8c21 	.word	0x41ee8c21
    11d8:	00000000 	.word	0x00000000
    11dc:	4187d784 	.word	0x4187d784
    11e0:	00000000 	.word	0x00000000
    11e4:	41700000 	.word	0x41700000
    11e8:	0801c0bc 	.word	0x0801c0bc
    11ec:	0801c0e0 	.word	0x0801c0e0
    11f0:	58021800 	.word	0x58021800
    11f4:	20000018 	.word	0x20000018

000011f8 <set_SDO_output>:
/* Selects SDO pin connectivity/functionality
 * By default, the SDO pin will output 'Lock detect' but can be connected
 * to other internal signals. See table 2.15 of HMC835 datasheet (v04.1113)
 * for more details all options
 */
 void set_SDO_output(const uint32_t GPO_setting) {
    11f8:	b580      	push	{r7, lr}
    11fa:	b084      	sub	sp, #16
    11fc:	af00      	add	r7, sp, #0
    11fe:	6078      	str	r0, [r7, #4]
	//Default output on SDO pin is 'Lock detect output', value 0x01
	//VCO divider is 0x0A
	//See table 2.15 of HMC835 datasheet for more details (v04.1113)
	uint32_t read_data = 0x0;
    1200:	2300      	movs	r3, #0
    1202:	60fb      	str	r3, [r7, #12]

	if (GPO_setting > 31) {
    1204:	687b      	ldr	r3, [r7, #4]
    1206:	2b1f      	cmp	r3, #31
    1208:	d904      	bls.n	1214 <set_SDO_output+0x1c>
		printf("SDO pin value must be less that 32\r\n");
    120a:	480d      	ldr	r0, [pc, #52]	; (1240 <set_SDO_output+0x48>)
    120c:	f000 f944 	bl	1498 <__puts_veneer>
		Error_Handler();
    1210:	f000 f962 	bl	14d8 <__Error_Handler_veneer>
	}
	read_data = synth_readreg(GPO_REGISTER); // Get the current value.
    1214:	200f      	movs	r0, #15
    1216:	f7fe ff6d 	bl	f4 <synth_readreg>
    121a:	60f8      	str	r0, [r7, #12]
	read_data &= 0xFFFFFFE0; // Zero the first 5 LSBs.
    121c:	68fb      	ldr	r3, [r7, #12]
    121e:	f023 031f 	bic.w	r3, r3, #31
    1222:	60fb      	str	r3, [r7, #12]
	//read_data |= 0x0A; //Select VCO divider output
	read_data |= GPO_setting; //Select GPO output dependent on function input value
    1224:	68fa      	ldr	r2, [r7, #12]
    1226:	687b      	ldr	r3, [r7, #4]
    1228:	4313      	orrs	r3, r2
    122a:	60fb      	str	r3, [r7, #12]
	synth_writereg(read_data, GPO_REGISTER, 0x0, VERIFY); // Update the GPO register.
    122c:	2301      	movs	r3, #1
    122e:	2200      	movs	r2, #0
    1230:	210f      	movs	r1, #15
    1232:	68f8      	ldr	r0, [r7, #12]
    1234:	f7fe fee4 	bl	0 <synth_writereg>
}
    1238:	bf00      	nop
    123a:	3710      	adds	r7, #16
    123c:	46bd      	mov	sp, r7
    123e:	bd80      	pop	{r7, pc}
    1240:	0801c108 	.word	0x0801c108

00001244 <start_timer>:

/**
  * @brief  Starts a timer.
  * @retval uint32_t
  */
uint32_t start_timer(TIM_TypeDef * timer) {
    1244:	b480      	push	{r7}
    1246:	b083      	sub	sp, #12
    1248:	af00      	add	r7, sp, #0
    124a:	6078      	str	r0, [r7, #4]

	timer->CR1 &= ~(TIM_CR1_CEN);
    124c:	687b      	ldr	r3, [r7, #4]
    124e:	681b      	ldr	r3, [r3, #0]
    1250:	f023 0201 	bic.w	r2, r3, #1
    1254:	687b      	ldr	r3, [r7, #4]
    1256:	601a      	str	r2, [r3, #0]
	timer->EGR |= TIM_EGR_UG;  // Reset CNT and PSC
    1258:	687b      	ldr	r3, [r7, #4]
    125a:	695b      	ldr	r3, [r3, #20]
    125c:	f043 0201 	orr.w	r2, r3, #1
    1260:	687b      	ldr	r3, [r7, #4]
    1262:	615a      	str	r2, [r3, #20]
	timer->CR1 |= TIM_CR1_CEN;
    1264:	687b      	ldr	r3, [r7, #4]
    1266:	681b      	ldr	r3, [r3, #0]
    1268:	f043 0201 	orr.w	r2, r3, #1
    126c:	687b      	ldr	r3, [r7, #4]
    126e:	601a      	str	r2, [r3, #0]
	//printf("Started timer with returned CNT value: %ld \r\n", timer->CNT);
	return timer->CNT;
    1270:	687b      	ldr	r3, [r7, #4]
    1272:	6a5b      	ldr	r3, [r3, #36]	; 0x24
}
    1274:	4618      	mov	r0, r3
    1276:	370c      	adds	r7, #12
    1278:	46bd      	mov	sp, r7
    127a:	f85d 7b04 	ldr.w	r7, [sp], #4
    127e:	4770      	bx	lr

00001280 <stop_timer>:

/**
  * @brief  Stops a timer.
  * @retval uint32_t
  */
uint32_t stop_timer(TIM_TypeDef *timer) {
    1280:	b480      	push	{r7}
    1282:	b083      	sub	sp, #12
    1284:	af00      	add	r7, sp, #0
    1286:	6078      	str	r0, [r7, #4]

	timer->CR1 &= ~(TIM_CR1_CEN);
    1288:	687b      	ldr	r3, [r7, #4]
    128a:	681b      	ldr	r3, [r3, #0]
    128c:	f023 0201 	bic.w	r2, r3, #1
    1290:	687b      	ldr	r3, [r7, #4]
    1292:	601a      	str	r2, [r3, #0]
	return timer->CNT;
    1294:	687b      	ldr	r3, [r7, #4]
    1296:	6a5b      	ldr	r3, [r3, #36]	; 0x24
}
    1298:	4618      	mov	r0, r3
    129a:	370c      	adds	r7, #12
    129c:	46bd      	mov	sp, r7
    129e:	f85d 7b04 	ldr.w	r7, [sp], #4
    12a2:	4770      	bx	lr

000012a4 <check_timer>:
/**
  * @brief  Returns timer counter value
  * @param  Timer
  * @retval Counter value
  */
uint32_t check_timer(TIM_TypeDef *timer) {
    12a4:	b480      	push	{r7}
    12a6:	b083      	sub	sp, #12
    12a8:	af00      	add	r7, sp, #0
    12aa:	6078      	str	r0, [r7, #4]

	return timer->CNT;
    12ac:	687b      	ldr	r3, [r7, #4]
    12ae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
}
    12b0:	4618      	mov	r0, r3
    12b2:	370c      	adds	r7, #12
    12b4:	46bd      	mov	sp, r7
    12b6:	f85d 7b04 	ldr.w	r7, [sp], #4
    12ba:	4770      	bx	lr

000012bc <timer_delay>:

/**
  * @brief  Uses a H/W timer to loop for the cycle count requested.
  */
void timer_delay(TIM_TypeDef *timer, const uint32_t delay_count){
    12bc:	b580      	push	{r7, lr}
    12be:	b084      	sub	sp, #16
    12c0:	af00      	add	r7, sp, #0
    12c2:	6078      	str	r0, [r7, #4]
    12c4:	6039      	str	r1, [r7, #0]
	/* Note that we don't consider overflow.
	 * FAST_TIMER will take approximately 65 ms to overflow.
	 * SLOW_TIMER will take 650ms
	 * MW_TIMER and SWEEP_TIMER will take 71 minutes */

	uint32_t start = start_timer(timer);
    12c6:	6878      	ldr	r0, [r7, #4]
    12c8:	f7ff ffbc 	bl	1244 <start_timer>
    12cc:	60f8      	str	r0, [r7, #12]
//	timer->EGR |= TIM_EGR_UG;  // Reset CNT and PSC
//	timer->CR1 |= TIM_CR1_CEN; // Enable the timer
//	uint32_t start = timer->CNT; // Get the start value of the timer

//	while((timer->CNT - start) < delay_count){} // Loop until delay_us has expired
	while(timer->CNT < delay_count){} // Loop until delay_us has expired
    12ce:	bf00      	nop
    12d0:	687b      	ldr	r3, [r7, #4]
    12d2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
    12d4:	683a      	ldr	r2, [r7, #0]
    12d6:	429a      	cmp	r2, r3
    12d8:	d8fa      	bhi.n	12d0 <timer_delay+0x14>

	stop_timer(timer);
    12da:	6878      	ldr	r0, [r7, #4]
    12dc:	f7ff ffd0 	bl	1280 <stop_timer>
//	timer->CR1 &= ~(TIM_CR1_CEN); // Disable the timer

}
    12e0:	bf00      	nop
    12e2:	3710      	adds	r7, #16
    12e4:	46bd      	mov	sp, r7
    12e6:	bd80      	pop	{r7, pc}

000012e8 <measure_POP_cycle>:
/**
  * @brief  Returns the measured period of a POP cycle as averaged over 20 cycles
  * @param  None
  * @retval Period expressed as an integer number of microseconds
  */
uint32_t measure_POP_cycle(void){
    12e8:	b580      	push	{r7, lr}
    12ea:	b086      	sub	sp, #24
    12ec:	af00      	add	r7, sp, #0

	/* Measures the elapsed time taken for 20 POP cycles
	 * Relies on the ADC value changing every time a sample is taken
	 * ADC must be initialised before running
	 */
	uint32_t adc_value = 0;
    12ee:	2300      	movs	r3, #0
    12f0:	617b      	str	r3, [r7, #20]
	uint32_t last_adc_value = 9999;
    12f2:	f242 730f 	movw	r3, #9999	; 0x270f
    12f6:	613b      	str	r3, [r7, #16]
	uint8_t cycle_count = 0;
    12f8:	2300      	movs	r3, #0
    12fa:	73fb      	strb	r3, [r7, #15]
	uint32_t period;
	const uint8_t iterations = 20;
    12fc:	2314      	movs	r3, #20
    12fe:	73bb      	strb	r3, [r7, #14]

	HAL_GPIO_WritePin(MW_INVALID_GPIO_Port, MW_INVALID_Pin, GPIO_PIN_SET); 	//Sets MW_invalid pin high to reset POP cycle
    1300:	2201      	movs	r2, #1
    1302:	2102      	movs	r1, #2
    1304:	4826      	ldr	r0, [pc, #152]	; (13a0 <measure_POP_cycle+0xb8>)
    1306:	f000 f8d3 	bl	14b0 <__HAL_GPIO_WritePin_veneer>
	start_timer(MW_TIMER); //reset MW_timer and start counting
    130a:	4b26      	ldr	r3, [pc, #152]	; (13a4 <measure_POP_cycle+0xbc>)
    130c:	681b      	ldr	r3, [r3, #0]
    130e:	4618      	mov	r0, r3
    1310:	f7ff ff98 	bl	1244 <start_timer>
	HAL_GPIO_WritePin(MW_INVALID_GPIO_Port, MW_INVALID_Pin, GPIO_PIN_RESET); //Start POP cycle
    1314:	2200      	movs	r2, #0
    1316:	2102      	movs	r1, #2
    1318:	4821      	ldr	r0, [pc, #132]	; (13a0 <measure_POP_cycle+0xb8>)
    131a:	f000 f8c9 	bl	14b0 <__HAL_GPIO_WritePin_veneer>

	// get the ADC conversion value
	adc_value = HAL_ADC_GetValue(&hadc3);
    131e:	4822      	ldr	r0, [pc, #136]	; (13a8 <measure_POP_cycle+0xc0>)
    1320:	f000 f8be 	bl	14a0 <__HAL_ADC_GetValue_veneer>
    1324:	6178      	str	r0, [r7, #20]
	while (cycle_count < iterations) {
    1326:	e00c      	b.n	1342 <measure_POP_cycle+0x5a>
		while (adc_value == last_adc_value) {
			adc_value = HAL_ADC_GetValue(&hadc3); //keep reading ADC until value changes
    1328:	481f      	ldr	r0, [pc, #124]	; (13a8 <measure_POP_cycle+0xc0>)
    132a:	f000 f8b9 	bl	14a0 <__HAL_ADC_GetValue_veneer>
    132e:	6178      	str	r0, [r7, #20]
		while (adc_value == last_adc_value) {
    1330:	697a      	ldr	r2, [r7, #20]
    1332:	693b      	ldr	r3, [r7, #16]
    1334:	429a      	cmp	r2, r3
    1336:	d0f7      	beq.n	1328 <measure_POP_cycle+0x40>
		}
		last_adc_value = adc_value;
    1338:	697b      	ldr	r3, [r7, #20]
    133a:	613b      	str	r3, [r7, #16]
		cycle_count++;
    133c:	7bfb      	ldrb	r3, [r7, #15]
    133e:	3301      	adds	r3, #1
    1340:	73fb      	strb	r3, [r7, #15]
	while (cycle_count < iterations) {
    1342:	7bfa      	ldrb	r2, [r7, #15]
    1344:	7bbb      	ldrb	r3, [r7, #14]
    1346:	429a      	cmp	r2, r3
    1348:	d3f2      	bcc.n	1330 <measure_POP_cycle+0x48>
	}

	uint32_t total_period = check_timer(MW_TIMER);
    134a:	4b16      	ldr	r3, [pc, #88]	; (13a4 <measure_POP_cycle+0xbc>)
    134c:	681b      	ldr	r3, [r3, #0]
    134e:	4618      	mov	r0, r3
    1350:	f7ff ffa8 	bl	12a4 <check_timer>
    1354:	60b8      	str	r0, [r7, #8]
	period = (float)(check_timer(MW_TIMER)) / iterations + 0.5;
    1356:	4b13      	ldr	r3, [pc, #76]	; (13a4 <measure_POP_cycle+0xbc>)
    1358:	681b      	ldr	r3, [r3, #0]
    135a:	4618      	mov	r0, r3
    135c:	f7ff ffa2 	bl	12a4 <check_timer>
    1360:	ee07 0a90 	vmov	s15, r0
    1364:	eef8 6a67 	vcvt.f32.u32	s13, s15
    1368:	7bbb      	ldrb	r3, [r7, #14]
    136a:	ee07 3a90 	vmov	s15, r3
    136e:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
    1372:	eec6 7a87 	vdiv.f32	s15, s13, s14
    1376:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
    137a:	eeb6 6b00 	vmov.f64	d6, #96	; 0x3f000000  0.5
    137e:	ee37 7b06 	vadd.f64	d7, d7, d6
    1382:	eefc 7bc7 	vcvt.u32.f64	s15, d7
    1386:	ee17 3a90 	vmov	r3, s15
    138a:	607b      	str	r3, [r7, #4]
	stop_timer(MW_TIMER);
    138c:	4b05      	ldr	r3, [pc, #20]	; (13a4 <measure_POP_cycle+0xbc>)
    138e:	681b      	ldr	r3, [r3, #0]
    1390:	4618      	mov	r0, r3
    1392:	f7ff ff75 	bl	1280 <stop_timer>
	#ifdef TIMER_VERBOSE
		printf("Time for %u POP cycles: %lu us\r\n", iterations, total_period);
		printf("POP period: %lu us\r\n", period);
	#endif //TIMER_VERBOSE
	return (period);
    1396:	687b      	ldr	r3, [r7, #4]

}
    1398:	4618      	mov	r0, r3
    139a:	3718      	adds	r7, #24
    139c:	46bd      	mov	sp, r7
    139e:	bd80      	pop	{r7, pc}
    13a0:	58020400 	.word	0x58020400
    13a4:	2000001c 	.word	0x2000001c
    13a8:	2000024c 	.word	0x2000024c

000013ac <start_pop>:

	printf("POP cycle stopped!\r\n");

}

void start_pop() {
    13ac:	b580      	push	{r7, lr}
    13ae:	af00      	add	r7, sp, #0

	/* Timer A is the LASER enable, Timer E is the microwave pulse */
	if (HAL_HRTIM_WaveformOutputStart(&hhrtim,
    13b0:	f240 1103 	movw	r1, #259	; 0x103
    13b4:	480f      	ldr	r0, [pc, #60]	; (13f4 <start_pop+0x48>)
    13b6:	f000 f867 	bl	1488 <__HAL_HRTIM_WaveformOutputStart_veneer>
    13ba:	4603      	mov	r3, r0
    13bc:	2b00      	cmp	r3, #0
    13be:	d004      	beq.n	13ca <start_pop+0x1e>
	HRTIM_OUTPUT_TA1 | HRTIM_OUTPUT_TA2 | HRTIM_OUTPUT_TE1) != HAL_OK) {
		printf("Failed to start POP!\r\n");
    13c0:	480d      	ldr	r0, [pc, #52]	; (13f8 <start_pop+0x4c>)
    13c2:	f000 f869 	bl	1498 <__puts_veneer>
		Error_Handler();
    13c6:	f000 f887 	bl	14d8 <__Error_Handler_veneer>
		Error_Handler();
	}

#endif

	if (HAL_HRTIM_WaveformCounterStart_IT(&hhrtim,
    13ca:	f44f 1108 	mov.w	r1, #2228224	; 0x220000
    13ce:	4809      	ldr	r0, [pc, #36]	; (13f4 <start_pop+0x48>)
    13d0:	f000 f872 	bl	14b8 <__HAL_HRTIM_WaveformCountStart_IT_veneer>
    13d4:	4603      	mov	r3, r0
    13d6:	2b00      	cmp	r3, #0
    13d8:	d004      	beq.n	13e4 <start_pop+0x38>
	HRTIM_TIMERID_TIMER_A | HRTIM_TIMERID_TIMER_E) != HAL_OK) {
		printf("POP failure point E!\r\n");
    13da:	4808      	ldr	r0, [pc, #32]	; (13fc <start_pop+0x50>)
    13dc:	f000 f85c 	bl	1498 <__puts_veneer>
		Error_Handler();
    13e0:	f000 f87a 	bl	14d8 <__Error_Handler_veneer>
	}

	pop_running = true;
    13e4:	4b06      	ldr	r3, [pc, #24]	; (1400 <start_pop+0x54>)
    13e6:	2201      	movs	r2, #1
    13e8:	701a      	strb	r2, [r3, #0]

	printf("POP cycle running!\r\n");
    13ea:	4806      	ldr	r0, [pc, #24]	; (1404 <start_pop+0x58>)
    13ec:	f000 f854 	bl	1498 <__puts_veneer>

}
    13f0:	bf00      	nop
    13f2:	bd80      	pop	{r7, pc}
    13f4:	200002c4 	.word	0x200002c4
    13f8:	0801c148 	.word	0x0801c148
    13fc:	0801c160 	.word	0x0801c160
    1400:	20000600 	.word	0x20000600
    1404:	0801c178 	.word	0x0801c178

00001408 <stop_pop>:
void stop_pop() {
    1408:	b580      	push	{r7, lr}
    140a:	af00      	add	r7, sp, #0
	if (HAL_HRTIM_WaveformOutputStop(&hhrtim,
    140c:	f240 1103 	movw	r1, #259	; 0x103
    1410:	4813      	ldr	r0, [pc, #76]	; (1460 <stop_pop+0x58>)
    1412:	f000 f855 	bl	14c0 <__HAL_HRTIM_WaveformOutputStop_veneer>
    1416:	4603      	mov	r3, r0
    1418:	2b00      	cmp	r3, #0
    141a:	d004      	beq.n	1426 <stop_pop+0x1e>
		printf("POP failure point A!\r\n");
    141c:	4811      	ldr	r0, [pc, #68]	; (1464 <stop_pop+0x5c>)
    141e:	f000 f83b 	bl	1498 <__puts_veneer>
		Error_Handler();
    1422:	f000 f859 	bl	14d8 <__Error_Handler_veneer>
	if (HAL_HRTIM_WaveformCounterStop_IT(&hhrtim,
    1426:	f44f 1108 	mov.w	r1, #2228224	; 0x220000
    142a:	480d      	ldr	r0, [pc, #52]	; (1460 <stop_pop+0x58>)
    142c:	f000 f84c 	bl	14c8 <__HAL_HRTIM_WaveformCountStop_IT_veneer>
    1430:	4603      	mov	r3, r0
    1432:	2b00      	cmp	r3, #0
    1434:	d004      	beq.n	1440 <stop_pop+0x38>
		printf("POP failure point B!\r\n");
    1436:	480c      	ldr	r0, [pc, #48]	; (1468 <stop_pop+0x60>)
    1438:	f000 f82e 	bl	1498 <__puts_veneer>
		Error_Handler();
    143c:	f000 f84c 	bl	14d8 <__Error_Handler_veneer>
	pop_cycle_count = 0;
    1440:	4b0a      	ldr	r3, [pc, #40]	; (146c <stop_pop+0x64>)
    1442:	2200      	movs	r2, #0
    1444:	601a      	str	r2, [r3, #0]
	pop_running = false;
    1446:	4b0a      	ldr	r3, [pc, #40]	; (1470 <stop_pop+0x68>)
    1448:	2200      	movs	r2, #0
    144a:	701a      	strb	r2, [r3, #0]
	HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, 0); //turn off amber LED
    144c:	2200      	movs	r2, #0
    144e:	2102      	movs	r1, #2
    1450:	4808      	ldr	r0, [pc, #32]	; (1474 <stop_pop+0x6c>)
    1452:	f000 f82d 	bl	14b0 <__HAL_GPIO_WritePin_veneer>
	printf("POP cycle stopped!\r\n");
    1456:	4808      	ldr	r0, [pc, #32]	; (1478 <stop_pop+0x70>)
    1458:	f000 f81e 	bl	1498 <__puts_veneer>
}
    145c:	bf00      	nop
    145e:	bd80      	pop	{r7, pc}
    1460:	200002c4 	.word	0x200002c4
    1464:	0801c18c 	.word	0x0801c18c
    1468:	0801c1a4 	.word	0x0801c1a4
    146c:	200005fc 	.word	0x200005fc
    1470:	20000600 	.word	0x20000600
    1474:	58021000 	.word	0x58021000
    1478:	0801c1bc 	.word	0x0801c1bc
    147c:	00000000 	.word	0x00000000

00001480 <__HAL_Delay_veneer>:
    1480:	f85f f000 	ldr.w	pc, [pc]	; 1484 <__HAL_Delay_veneer+0x4>
    1484:	08003995 	.word	0x08003995

00001488 <__HAL_HRTIM_WaveformOutputStart_veneer>:
    1488:	f85f f000 	ldr.w	pc, [pc]	; 148c <__HAL_HRTIM_WaveformOutputStart_veneer+0x4>
    148c:	08007daf 	.word	0x08007daf

00001490 <__HAL_GPIO_ReadPin_veneer>:
    1490:	f85f f000 	ldr.w	pc, [pc]	; 1494 <__HAL_GPIO_ReadPin_veneer+0x4>
    1494:	080076bd 	.word	0x080076bd

00001498 <__puts_veneer>:
    1498:	f85f f000 	ldr.w	pc, [pc]	; 149c <__puts_veneer+0x4>
    149c:	08019b35 	.word	0x08019b35

000014a0 <__HAL_ADC_GetValue_veneer>:
    14a0:	f85f f000 	ldr.w	pc, [pc]	; 14a4 <__HAL_ADC_GetValue_veneer+0x4>
    14a4:	08004441 	.word	0x08004441

000014a8 <__HAL_GPIO_TogglePin_veneer>:
    14a8:	f85f f000 	ldr.w	pc, [pc]	; 14ac <__HAL_GPIO_TogglePin_veneer+0x4>
    14ac:	0800771f 	.word	0x0800771f

000014b0 <__HAL_GPIO_WritePin_veneer>:
    14b0:	f85f f000 	ldr.w	pc, [pc]	; 14b4 <__HAL_GPIO_WritePin_veneer+0x4>
    14b4:	080076ed 	.word	0x080076ed

000014b8 <__HAL_HRTIM_WaveformCountStart_IT_veneer>:
    14b8:	f85f f000 	ldr.w	pc, [pc]	; 14bc <__HAL_HRTIM_WaveformCountStart_IT_veneer+0x4>
    14bc:	08007e65 	.word	0x08007e65

000014c0 <__HAL_HRTIM_WaveformOutputStop_veneer>:
    14c0:	f85f f000 	ldr.w	pc, [pc]	; 14c4 <__HAL_HRTIM_WaveformOutputStop_veneer+0x4>
    14c4:	08007e09 	.word	0x08007e09

000014c8 <__HAL_HRTIM_WaveformCountStop_IT_veneer>:
    14c8:	f85f f000 	ldr.w	pc, [pc]	; 14cc <__HAL_HRTIM_WaveformCountStop_IT_veneer+0x4>
    14cc:	08007f45 	.word	0x08007f45

000014d0 <__printf_veneer>:
    14d0:	f85f f000 	ldr.w	pc, [pc]	; 14d4 <__printf_veneer+0x4>
    14d4:	08019a69 	.word	0x08019a69

000014d8 <__Error_Handler_veneer>:
    14d8:	f85f f000 	ldr.w	pc, [pc]	; 14dc <__Error_Handler_veneer+0x4>
    14dc:	08002b2d 	.word	0x08002b2d

Disassembly of section .text:

08001780 <__do_global_dtors_aux>:
 8001780:	b510      	push	{r4, lr}
 8001782:	4c05      	ldr	r4, [pc, #20]	; (8001798 <__do_global_dtors_aux+0x18>)
 8001784:	7823      	ldrb	r3, [r4, #0]
 8001786:	b933      	cbnz	r3, 8001796 <__do_global_dtors_aux+0x16>
 8001788:	4b04      	ldr	r3, [pc, #16]	; (800179c <__do_global_dtors_aux+0x1c>)
 800178a:	b113      	cbz	r3, 8001792 <__do_global_dtors_aux+0x12>
 800178c:	4804      	ldr	r0, [pc, #16]	; (80017a0 <__do_global_dtors_aux+0x20>)
 800178e:	f3af 8000 	nop.w
 8001792:	2301      	movs	r3, #1
 8001794:	7023      	strb	r3, [r4, #0]
 8001796:	bd10      	pop	{r4, pc}
 8001798:	20000230 	.word	0x20000230
 800179c:	00000000 	.word	0x00000000
 80017a0:	0801b970 	.word	0x0801b970

080017a4 <frame_dummy>:
 80017a4:	b508      	push	{r3, lr}
 80017a6:	4b03      	ldr	r3, [pc, #12]	; (80017b4 <frame_dummy+0x10>)
 80017a8:	b11b      	cbz	r3, 80017b2 <frame_dummy+0xe>
 80017aa:	4903      	ldr	r1, [pc, #12]	; (80017b8 <frame_dummy+0x14>)
 80017ac:	4803      	ldr	r0, [pc, #12]	; (80017bc <frame_dummy+0x18>)
 80017ae:	f3af 8000 	nop.w
 80017b2:	bd08      	pop	{r3, pc}
 80017b4:	00000000 	.word	0x00000000
 80017b8:	20000234 	.word	0x20000234
 80017bc:	0801b970 	.word	0x0801b970

080017c0 <memchr>:
 80017c0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80017c4:	2a10      	cmp	r2, #16
 80017c6:	db2b      	blt.n	8001820 <memchr+0x60>
 80017c8:	f010 0f07 	tst.w	r0, #7
 80017cc:	d008      	beq.n	80017e0 <memchr+0x20>
 80017ce:	f810 3b01 	ldrb.w	r3, [r0], #1
 80017d2:	3a01      	subs	r2, #1
 80017d4:	428b      	cmp	r3, r1
 80017d6:	d02d      	beq.n	8001834 <memchr+0x74>
 80017d8:	f010 0f07 	tst.w	r0, #7
 80017dc:	b342      	cbz	r2, 8001830 <memchr+0x70>
 80017de:	d1f6      	bne.n	80017ce <memchr+0xe>
 80017e0:	b4f0      	push	{r4, r5, r6, r7}
 80017e2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80017e6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80017ea:	f022 0407 	bic.w	r4, r2, #7
 80017ee:	f07f 0700 	mvns.w	r7, #0
 80017f2:	2300      	movs	r3, #0
 80017f4:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 80017f8:	3c08      	subs	r4, #8
 80017fa:	ea85 0501 	eor.w	r5, r5, r1
 80017fe:	ea86 0601 	eor.w	r6, r6, r1
 8001802:	fa85 f547 	uadd8	r5, r5, r7
 8001806:	faa3 f587 	sel	r5, r3, r7
 800180a:	fa86 f647 	uadd8	r6, r6, r7
 800180e:	faa5 f687 	sel	r6, r5, r7
 8001812:	b98e      	cbnz	r6, 8001838 <memchr+0x78>
 8001814:	d1ee      	bne.n	80017f4 <memchr+0x34>
 8001816:	bcf0      	pop	{r4, r5, r6, r7}
 8001818:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800181c:	f002 0207 	and.w	r2, r2, #7
 8001820:	b132      	cbz	r2, 8001830 <memchr+0x70>
 8001822:	f810 3b01 	ldrb.w	r3, [r0], #1
 8001826:	3a01      	subs	r2, #1
 8001828:	ea83 0301 	eor.w	r3, r3, r1
 800182c:	b113      	cbz	r3, 8001834 <memchr+0x74>
 800182e:	d1f8      	bne.n	8001822 <memchr+0x62>
 8001830:	2000      	movs	r0, #0
 8001832:	4770      	bx	lr
 8001834:	3801      	subs	r0, #1
 8001836:	4770      	bx	lr
 8001838:	2d00      	cmp	r5, #0
 800183a:	bf06      	itte	eq
 800183c:	4635      	moveq	r5, r6
 800183e:	3803      	subeq	r0, #3
 8001840:	3807      	subne	r0, #7
 8001842:	f015 0f01 	tst.w	r5, #1
 8001846:	d107      	bne.n	8001858 <memchr+0x98>
 8001848:	3001      	adds	r0, #1
 800184a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800184e:	bf02      	ittt	eq
 8001850:	3001      	addeq	r0, #1
 8001852:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8001856:	3001      	addeq	r0, #1
 8001858:	bcf0      	pop	{r4, r5, r6, r7}
 800185a:	3801      	subs	r0, #1
 800185c:	4770      	bx	lr
 800185e:	bf00      	nop

08001860 <strlen>:
 8001860:	4603      	mov	r3, r0
 8001862:	f813 2b01 	ldrb.w	r2, [r3], #1
 8001866:	2a00      	cmp	r2, #0
 8001868:	d1fb      	bne.n	8001862 <strlen+0x2>
 800186a:	1a18      	subs	r0, r3, r0
 800186c:	3801      	subs	r0, #1
 800186e:	4770      	bx	lr

08001870 <__aeabi_uldivmod>:
 8001870:	b953      	cbnz	r3, 8001888 <__aeabi_uldivmod+0x18>
 8001872:	b94a      	cbnz	r2, 8001888 <__aeabi_uldivmod+0x18>
 8001874:	2900      	cmp	r1, #0
 8001876:	bf08      	it	eq
 8001878:	2800      	cmpeq	r0, #0
 800187a:	bf1c      	itt	ne
 800187c:	f04f 31ff 	movne.w	r1, #4294967295
 8001880:	f04f 30ff 	movne.w	r0, #4294967295
 8001884:	f000 b970 	b.w	8001b68 <__aeabi_idiv0>
 8001888:	f1ad 0c08 	sub.w	ip, sp, #8
 800188c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8001890:	f000 f806 	bl	80018a0 <__udivmoddi4>
 8001894:	f8dd e004 	ldr.w	lr, [sp, #4]
 8001898:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800189c:	b004      	add	sp, #16
 800189e:	4770      	bx	lr

080018a0 <__udivmoddi4>:
 80018a0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80018a4:	9e08      	ldr	r6, [sp, #32]
 80018a6:	460d      	mov	r5, r1
 80018a8:	4604      	mov	r4, r0
 80018aa:	460f      	mov	r7, r1
 80018ac:	2b00      	cmp	r3, #0
 80018ae:	d14a      	bne.n	8001946 <__udivmoddi4+0xa6>
 80018b0:	428a      	cmp	r2, r1
 80018b2:	4694      	mov	ip, r2
 80018b4:	d965      	bls.n	8001982 <__udivmoddi4+0xe2>
 80018b6:	fab2 f382 	clz	r3, r2
 80018ba:	b143      	cbz	r3, 80018ce <__udivmoddi4+0x2e>
 80018bc:	fa02 fc03 	lsl.w	ip, r2, r3
 80018c0:	f1c3 0220 	rsb	r2, r3, #32
 80018c4:	409f      	lsls	r7, r3
 80018c6:	fa20 f202 	lsr.w	r2, r0, r2
 80018ca:	4317      	orrs	r7, r2
 80018cc:	409c      	lsls	r4, r3
 80018ce:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 80018d2:	fa1f f58c 	uxth.w	r5, ip
 80018d6:	fbb7 f1fe 	udiv	r1, r7, lr
 80018da:	0c22      	lsrs	r2, r4, #16
 80018dc:	fb0e 7711 	mls	r7, lr, r1, r7
 80018e0:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 80018e4:	fb01 f005 	mul.w	r0, r1, r5
 80018e8:	4290      	cmp	r0, r2
 80018ea:	d90a      	bls.n	8001902 <__udivmoddi4+0x62>
 80018ec:	eb1c 0202 	adds.w	r2, ip, r2
 80018f0:	f101 37ff 	add.w	r7, r1, #4294967295
 80018f4:	f080 811c 	bcs.w	8001b30 <__udivmoddi4+0x290>
 80018f8:	4290      	cmp	r0, r2
 80018fa:	f240 8119 	bls.w	8001b30 <__udivmoddi4+0x290>
 80018fe:	3902      	subs	r1, #2
 8001900:	4462      	add	r2, ip
 8001902:	1a12      	subs	r2, r2, r0
 8001904:	b2a4      	uxth	r4, r4
 8001906:	fbb2 f0fe 	udiv	r0, r2, lr
 800190a:	fb0e 2210 	mls	r2, lr, r0, r2
 800190e:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8001912:	fb00 f505 	mul.w	r5, r0, r5
 8001916:	42a5      	cmp	r5, r4
 8001918:	d90a      	bls.n	8001930 <__udivmoddi4+0x90>
 800191a:	eb1c 0404 	adds.w	r4, ip, r4
 800191e:	f100 32ff 	add.w	r2, r0, #4294967295
 8001922:	f080 8107 	bcs.w	8001b34 <__udivmoddi4+0x294>
 8001926:	42a5      	cmp	r5, r4
 8001928:	f240 8104 	bls.w	8001b34 <__udivmoddi4+0x294>
 800192c:	4464      	add	r4, ip
 800192e:	3802      	subs	r0, #2
 8001930:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8001934:	1b64      	subs	r4, r4, r5
 8001936:	2100      	movs	r1, #0
 8001938:	b11e      	cbz	r6, 8001942 <__udivmoddi4+0xa2>
 800193a:	40dc      	lsrs	r4, r3
 800193c:	2300      	movs	r3, #0
 800193e:	e9c6 4300 	strd	r4, r3, [r6]
 8001942:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8001946:	428b      	cmp	r3, r1
 8001948:	d908      	bls.n	800195c <__udivmoddi4+0xbc>
 800194a:	2e00      	cmp	r6, #0
 800194c:	f000 80ed 	beq.w	8001b2a <__udivmoddi4+0x28a>
 8001950:	2100      	movs	r1, #0
 8001952:	e9c6 0500 	strd	r0, r5, [r6]
 8001956:	4608      	mov	r0, r1
 8001958:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800195c:	fab3 f183 	clz	r1, r3
 8001960:	2900      	cmp	r1, #0
 8001962:	d149      	bne.n	80019f8 <__udivmoddi4+0x158>
 8001964:	42ab      	cmp	r3, r5
 8001966:	d302      	bcc.n	800196e <__udivmoddi4+0xce>
 8001968:	4282      	cmp	r2, r0
 800196a:	f200 80f8 	bhi.w	8001b5e <__udivmoddi4+0x2be>
 800196e:	1a84      	subs	r4, r0, r2
 8001970:	eb65 0203 	sbc.w	r2, r5, r3
 8001974:	2001      	movs	r0, #1
 8001976:	4617      	mov	r7, r2
 8001978:	2e00      	cmp	r6, #0
 800197a:	d0e2      	beq.n	8001942 <__udivmoddi4+0xa2>
 800197c:	e9c6 4700 	strd	r4, r7, [r6]
 8001980:	e7df      	b.n	8001942 <__udivmoddi4+0xa2>
 8001982:	b902      	cbnz	r2, 8001986 <__udivmoddi4+0xe6>
 8001984:	deff      	udf	#255	; 0xff
 8001986:	fab2 f382 	clz	r3, r2
 800198a:	2b00      	cmp	r3, #0
 800198c:	f040 8090 	bne.w	8001ab0 <__udivmoddi4+0x210>
 8001990:	1a8a      	subs	r2, r1, r2
 8001992:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8001996:	fa1f fe8c 	uxth.w	lr, ip
 800199a:	2101      	movs	r1, #1
 800199c:	fbb2 f5f7 	udiv	r5, r2, r7
 80019a0:	fb07 2015 	mls	r0, r7, r5, r2
 80019a4:	0c22      	lsrs	r2, r4, #16
 80019a6:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 80019aa:	fb0e f005 	mul.w	r0, lr, r5
 80019ae:	4290      	cmp	r0, r2
 80019b0:	d908      	bls.n	80019c4 <__udivmoddi4+0x124>
 80019b2:	eb1c 0202 	adds.w	r2, ip, r2
 80019b6:	f105 38ff 	add.w	r8, r5, #4294967295
 80019ba:	d202      	bcs.n	80019c2 <__udivmoddi4+0x122>
 80019bc:	4290      	cmp	r0, r2
 80019be:	f200 80cb 	bhi.w	8001b58 <__udivmoddi4+0x2b8>
 80019c2:	4645      	mov	r5, r8
 80019c4:	1a12      	subs	r2, r2, r0
 80019c6:	b2a4      	uxth	r4, r4
 80019c8:	fbb2 f0f7 	udiv	r0, r2, r7
 80019cc:	fb07 2210 	mls	r2, r7, r0, r2
 80019d0:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 80019d4:	fb0e fe00 	mul.w	lr, lr, r0
 80019d8:	45a6      	cmp	lr, r4
 80019da:	d908      	bls.n	80019ee <__udivmoddi4+0x14e>
 80019dc:	eb1c 0404 	adds.w	r4, ip, r4
 80019e0:	f100 32ff 	add.w	r2, r0, #4294967295
 80019e4:	d202      	bcs.n	80019ec <__udivmoddi4+0x14c>
 80019e6:	45a6      	cmp	lr, r4
 80019e8:	f200 80bb 	bhi.w	8001b62 <__udivmoddi4+0x2c2>
 80019ec:	4610      	mov	r0, r2
 80019ee:	eba4 040e 	sub.w	r4, r4, lr
 80019f2:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 80019f6:	e79f      	b.n	8001938 <__udivmoddi4+0x98>
 80019f8:	f1c1 0720 	rsb	r7, r1, #32
 80019fc:	408b      	lsls	r3, r1
 80019fe:	fa22 fc07 	lsr.w	ip, r2, r7
 8001a02:	ea4c 0c03 	orr.w	ip, ip, r3
 8001a06:	fa05 f401 	lsl.w	r4, r5, r1
 8001a0a:	fa20 f307 	lsr.w	r3, r0, r7
 8001a0e:	40fd      	lsrs	r5, r7
 8001a10:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8001a14:	4323      	orrs	r3, r4
 8001a16:	fbb5 f8f9 	udiv	r8, r5, r9
 8001a1a:	fa1f fe8c 	uxth.w	lr, ip
 8001a1e:	fb09 5518 	mls	r5, r9, r8, r5
 8001a22:	0c1c      	lsrs	r4, r3, #16
 8001a24:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8001a28:	fb08 f50e 	mul.w	r5, r8, lr
 8001a2c:	42a5      	cmp	r5, r4
 8001a2e:	fa02 f201 	lsl.w	r2, r2, r1
 8001a32:	fa00 f001 	lsl.w	r0, r0, r1
 8001a36:	d90b      	bls.n	8001a50 <__udivmoddi4+0x1b0>
 8001a38:	eb1c 0404 	adds.w	r4, ip, r4
 8001a3c:	f108 3aff 	add.w	sl, r8, #4294967295
 8001a40:	f080 8088 	bcs.w	8001b54 <__udivmoddi4+0x2b4>
 8001a44:	42a5      	cmp	r5, r4
 8001a46:	f240 8085 	bls.w	8001b54 <__udivmoddi4+0x2b4>
 8001a4a:	f1a8 0802 	sub.w	r8, r8, #2
 8001a4e:	4464      	add	r4, ip
 8001a50:	1b64      	subs	r4, r4, r5
 8001a52:	b29d      	uxth	r5, r3
 8001a54:	fbb4 f3f9 	udiv	r3, r4, r9
 8001a58:	fb09 4413 	mls	r4, r9, r3, r4
 8001a5c:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 8001a60:	fb03 fe0e 	mul.w	lr, r3, lr
 8001a64:	45a6      	cmp	lr, r4
 8001a66:	d908      	bls.n	8001a7a <__udivmoddi4+0x1da>
 8001a68:	eb1c 0404 	adds.w	r4, ip, r4
 8001a6c:	f103 35ff 	add.w	r5, r3, #4294967295
 8001a70:	d26c      	bcs.n	8001b4c <__udivmoddi4+0x2ac>
 8001a72:	45a6      	cmp	lr, r4
 8001a74:	d96a      	bls.n	8001b4c <__udivmoddi4+0x2ac>
 8001a76:	3b02      	subs	r3, #2
 8001a78:	4464      	add	r4, ip
 8001a7a:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8001a7e:	fba3 9502 	umull	r9, r5, r3, r2
 8001a82:	eba4 040e 	sub.w	r4, r4, lr
 8001a86:	42ac      	cmp	r4, r5
 8001a88:	46c8      	mov	r8, r9
 8001a8a:	46ae      	mov	lr, r5
 8001a8c:	d356      	bcc.n	8001b3c <__udivmoddi4+0x29c>
 8001a8e:	d053      	beq.n	8001b38 <__udivmoddi4+0x298>
 8001a90:	b156      	cbz	r6, 8001aa8 <__udivmoddi4+0x208>
 8001a92:	ebb0 0208 	subs.w	r2, r0, r8
 8001a96:	eb64 040e 	sbc.w	r4, r4, lr
 8001a9a:	fa04 f707 	lsl.w	r7, r4, r7
 8001a9e:	40ca      	lsrs	r2, r1
 8001aa0:	40cc      	lsrs	r4, r1
 8001aa2:	4317      	orrs	r7, r2
 8001aa4:	e9c6 7400 	strd	r7, r4, [r6]
 8001aa8:	4618      	mov	r0, r3
 8001aaa:	2100      	movs	r1, #0
 8001aac:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8001ab0:	f1c3 0120 	rsb	r1, r3, #32
 8001ab4:	fa02 fc03 	lsl.w	ip, r2, r3
 8001ab8:	fa20 f201 	lsr.w	r2, r0, r1
 8001abc:	fa25 f101 	lsr.w	r1, r5, r1
 8001ac0:	409d      	lsls	r5, r3
 8001ac2:	432a      	orrs	r2, r5
 8001ac4:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8001ac8:	fa1f fe8c 	uxth.w	lr, ip
 8001acc:	fbb1 f0f7 	udiv	r0, r1, r7
 8001ad0:	fb07 1510 	mls	r5, r7, r0, r1
 8001ad4:	0c11      	lsrs	r1, r2, #16
 8001ad6:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 8001ada:	fb00 f50e 	mul.w	r5, r0, lr
 8001ade:	428d      	cmp	r5, r1
 8001ae0:	fa04 f403 	lsl.w	r4, r4, r3
 8001ae4:	d908      	bls.n	8001af8 <__udivmoddi4+0x258>
 8001ae6:	eb1c 0101 	adds.w	r1, ip, r1
 8001aea:	f100 38ff 	add.w	r8, r0, #4294967295
 8001aee:	d22f      	bcs.n	8001b50 <__udivmoddi4+0x2b0>
 8001af0:	428d      	cmp	r5, r1
 8001af2:	d92d      	bls.n	8001b50 <__udivmoddi4+0x2b0>
 8001af4:	3802      	subs	r0, #2
 8001af6:	4461      	add	r1, ip
 8001af8:	1b49      	subs	r1, r1, r5
 8001afa:	b292      	uxth	r2, r2
 8001afc:	fbb1 f5f7 	udiv	r5, r1, r7
 8001b00:	fb07 1115 	mls	r1, r7, r5, r1
 8001b04:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8001b08:	fb05 f10e 	mul.w	r1, r5, lr
 8001b0c:	4291      	cmp	r1, r2
 8001b0e:	d908      	bls.n	8001b22 <__udivmoddi4+0x282>
 8001b10:	eb1c 0202 	adds.w	r2, ip, r2
 8001b14:	f105 38ff 	add.w	r8, r5, #4294967295
 8001b18:	d216      	bcs.n	8001b48 <__udivmoddi4+0x2a8>
 8001b1a:	4291      	cmp	r1, r2
 8001b1c:	d914      	bls.n	8001b48 <__udivmoddi4+0x2a8>
 8001b1e:	3d02      	subs	r5, #2
 8001b20:	4462      	add	r2, ip
 8001b22:	1a52      	subs	r2, r2, r1
 8001b24:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 8001b28:	e738      	b.n	800199c <__udivmoddi4+0xfc>
 8001b2a:	4631      	mov	r1, r6
 8001b2c:	4630      	mov	r0, r6
 8001b2e:	e708      	b.n	8001942 <__udivmoddi4+0xa2>
 8001b30:	4639      	mov	r1, r7
 8001b32:	e6e6      	b.n	8001902 <__udivmoddi4+0x62>
 8001b34:	4610      	mov	r0, r2
 8001b36:	e6fb      	b.n	8001930 <__udivmoddi4+0x90>
 8001b38:	4548      	cmp	r0, r9
 8001b3a:	d2a9      	bcs.n	8001a90 <__udivmoddi4+0x1f0>
 8001b3c:	ebb9 0802 	subs.w	r8, r9, r2
 8001b40:	eb65 0e0c 	sbc.w	lr, r5, ip
 8001b44:	3b01      	subs	r3, #1
 8001b46:	e7a3      	b.n	8001a90 <__udivmoddi4+0x1f0>
 8001b48:	4645      	mov	r5, r8
 8001b4a:	e7ea      	b.n	8001b22 <__udivmoddi4+0x282>
 8001b4c:	462b      	mov	r3, r5
 8001b4e:	e794      	b.n	8001a7a <__udivmoddi4+0x1da>
 8001b50:	4640      	mov	r0, r8
 8001b52:	e7d1      	b.n	8001af8 <__udivmoddi4+0x258>
 8001b54:	46d0      	mov	r8, sl
 8001b56:	e77b      	b.n	8001a50 <__udivmoddi4+0x1b0>
 8001b58:	3d02      	subs	r5, #2
 8001b5a:	4462      	add	r2, ip
 8001b5c:	e732      	b.n	80019c4 <__udivmoddi4+0x124>
 8001b5e:	4608      	mov	r0, r1
 8001b60:	e70a      	b.n	8001978 <__udivmoddi4+0xd8>
 8001b62:	4464      	add	r4, ip
 8001b64:	3802      	subs	r0, #2
 8001b66:	e742      	b.n	80019ee <__udivmoddi4+0x14e>

08001b68 <__aeabi_idiv0>:
 8001b68:	4770      	bx	lr
 8001b6a:	bf00      	nop

08001b6c <__io_putchar>:
/**
  * @brief  Retargets the C library printf function to the USART.
  * @param  None
  * @retval None
  */
PUTCHAR_PROTOTYPE {
 8001b6c:	b580      	push	{r7, lr}
 8001b6e:	b082      	sub	sp, #8
 8001b70:	af00      	add	r7, sp, #0
 8001b72:	6078      	str	r0, [r7, #4]
	HAL_UART_Transmit(&huart3, (uint8_t*) &ch, 1, 0xFFFF);
 8001b74:	1d39      	adds	r1, r7, #4
 8001b76:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8001b7a:	2201      	movs	r2, #1
 8001b7c:	4803      	ldr	r0, [pc, #12]	; (8001b8c <__io_putchar+0x20>)
 8001b7e:	f00b fe25 	bl	800d7cc <HAL_UART_Transmit>
	return ch;
 8001b82:	687b      	ldr	r3, [r7, #4]
}
 8001b84:	4618      	mov	r0, r3
 8001b86:	3708      	adds	r7, #8
 8001b88:	46bd      	mov	sp, r7
 8001b8a:	bd80      	pop	{r7, pc}
 8001b8c:	20000508 	.word	0x20000508

08001b90 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001b90:	b580      	push	{r7, lr}
 8001b92:	b084      	sub	sp, #16
 8001b94:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 1 */

  /* Copy from FLASH to itcm */
  memcpy(&_sitcm, &_siitcm, ((void*) &_eitcm - (void*) &_sitcm));
 8001b96:	4aac      	ldr	r2, [pc, #688]	; (8001e48 <main+0x2b8>)
 8001b98:	4bac      	ldr	r3, [pc, #688]	; (8001e4c <main+0x2bc>)
 8001b9a:	1ad3      	subs	r3, r2, r3
 8001b9c:	461a      	mov	r2, r3
 8001b9e:	49ac      	ldr	r1, [pc, #688]	; (8001e50 <main+0x2c0>)
 8001ba0:	48aa      	ldr	r0, [pc, #680]	; (8001e4c <main+0x2bc>)
 8001ba2:	f018 f930 	bl	8019e06 <memcpy>
  \details Turns on I-Cache
  */
__STATIC_FORCEINLINE void SCB_EnableICache (void)
{
  #if defined (__ICACHE_PRESENT) && (__ICACHE_PRESENT == 1U)
    if (SCB->CCR & SCB_CCR_IC_Msk) return;  /* return if ICache is already enabled */
 8001ba6:	4bab      	ldr	r3, [pc, #684]	; (8001e54 <main+0x2c4>)
 8001ba8:	695b      	ldr	r3, [r3, #20]
 8001baa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001bae:	2b00      	cmp	r3, #0
 8001bb0:	d11b      	bne.n	8001bea <main+0x5a>
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 8001bb2:	f3bf 8f4f 	dsb	sy
}
 8001bb6:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8001bb8:	f3bf 8f6f 	isb	sy
}
 8001bbc:	bf00      	nop

    __DSB();
    __ISB();
    SCB->ICIALLU = 0UL;                     /* invalidate I-Cache */
 8001bbe:	4ba5      	ldr	r3, [pc, #660]	; (8001e54 <main+0x2c4>)
 8001bc0:	2200      	movs	r2, #0
 8001bc2:	f8c3 2250 	str.w	r2, [r3, #592]	; 0x250
  __ASM volatile ("dsb 0xF":::"memory");
 8001bc6:	f3bf 8f4f 	dsb	sy
}
 8001bca:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8001bcc:	f3bf 8f6f 	isb	sy
}
 8001bd0:	bf00      	nop
    __DSB();
    __ISB();
    SCB->CCR |=  (uint32_t)SCB_CCR_IC_Msk;  /* enable I-Cache */
 8001bd2:	4ba0      	ldr	r3, [pc, #640]	; (8001e54 <main+0x2c4>)
 8001bd4:	695b      	ldr	r3, [r3, #20]
 8001bd6:	4a9f      	ldr	r2, [pc, #636]	; (8001e54 <main+0x2c4>)
 8001bd8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001bdc:	6153      	str	r3, [r2, #20]
  __ASM volatile ("dsb 0xF":::"memory");
 8001bde:	f3bf 8f4f 	dsb	sy
}
 8001be2:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8001be4:	f3bf 8f6f 	isb	sy
}
 8001be8:	e000      	b.n	8001bec <main+0x5c>
    if (SCB->CCR & SCB_CCR_IC_Msk) return;  /* return if ICache is already enabled */
 8001bea:	bf00      	nop
  #if defined (__DCACHE_PRESENT) && (__DCACHE_PRESENT == 1U)
    uint32_t ccsidr;
    uint32_t sets;
    uint32_t ways;

    if (SCB->CCR & SCB_CCR_DC_Msk) return;  /* return if DCache is already enabled */
 8001bec:	4b99      	ldr	r3, [pc, #612]	; (8001e54 <main+0x2c4>)
 8001bee:	695b      	ldr	r3, [r3, #20]
 8001bf0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001bf4:	2b00      	cmp	r3, #0
 8001bf6:	d138      	bne.n	8001c6a <main+0xda>

    SCB->CSSELR = 0U;                       /* select Level 1 data cache */
 8001bf8:	4b96      	ldr	r3, [pc, #600]	; (8001e54 <main+0x2c4>)
 8001bfa:	2200      	movs	r2, #0
 8001bfc:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  __ASM volatile ("dsb 0xF":::"memory");
 8001c00:	f3bf 8f4f 	dsb	sy
}
 8001c04:	bf00      	nop
    __DSB();

    ccsidr = SCB->CCSIDR;
 8001c06:	4b93      	ldr	r3, [pc, #588]	; (8001e54 <main+0x2c4>)
 8001c08:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8001c0c:	60fb      	str	r3, [r7, #12]

                                            /* invalidate D-Cache */
    sets = (uint32_t)(CCSIDR_SETS(ccsidr));
 8001c0e:	68fb      	ldr	r3, [r7, #12]
 8001c10:	0b5b      	lsrs	r3, r3, #13
 8001c12:	f3c3 030e 	ubfx	r3, r3, #0, #15
 8001c16:	60bb      	str	r3, [r7, #8]
    do {
      ways = (uint32_t)(CCSIDR_WAYS(ccsidr));
 8001c18:	68fb      	ldr	r3, [r7, #12]
 8001c1a:	08db      	lsrs	r3, r3, #3
 8001c1c:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8001c20:	607b      	str	r3, [r7, #4]
      do {
        SCB->DCISW = (((sets << SCB_DCISW_SET_Pos) & SCB_DCISW_SET_Msk) |
 8001c22:	68bb      	ldr	r3, [r7, #8]
 8001c24:	015a      	lsls	r2, r3, #5
 8001c26:	f643 73e0 	movw	r3, #16352	; 0x3fe0
 8001c2a:	4013      	ands	r3, r2
                      ((ways << SCB_DCISW_WAY_Pos) & SCB_DCISW_WAY_Msk)  );
 8001c2c:	687a      	ldr	r2, [r7, #4]
 8001c2e:	0792      	lsls	r2, r2, #30
        SCB->DCISW = (((sets << SCB_DCISW_SET_Pos) & SCB_DCISW_SET_Msk) |
 8001c30:	4988      	ldr	r1, [pc, #544]	; (8001e54 <main+0x2c4>)
 8001c32:	4313      	orrs	r3, r2
 8001c34:	f8c1 3260 	str.w	r3, [r1, #608]	; 0x260
        #if defined ( __CC_ARM )
          __schedule_barrier();
        #endif
      } while (ways-- != 0U);
 8001c38:	687b      	ldr	r3, [r7, #4]
 8001c3a:	1e5a      	subs	r2, r3, #1
 8001c3c:	607a      	str	r2, [r7, #4]
 8001c3e:	2b00      	cmp	r3, #0
 8001c40:	d1ef      	bne.n	8001c22 <main+0x92>
    } while(sets-- != 0U);
 8001c42:	68bb      	ldr	r3, [r7, #8]
 8001c44:	1e5a      	subs	r2, r3, #1
 8001c46:	60ba      	str	r2, [r7, #8]
 8001c48:	2b00      	cmp	r3, #0
 8001c4a:	d1e5      	bne.n	8001c18 <main+0x88>
  __ASM volatile ("dsb 0xF":::"memory");
 8001c4c:	f3bf 8f4f 	dsb	sy
}
 8001c50:	bf00      	nop
    __DSB();

    SCB->CCR |=  (uint32_t)SCB_CCR_DC_Msk;  /* enable D-Cache */
 8001c52:	4b80      	ldr	r3, [pc, #512]	; (8001e54 <main+0x2c4>)
 8001c54:	695b      	ldr	r3, [r3, #20]
 8001c56:	4a7f      	ldr	r2, [pc, #508]	; (8001e54 <main+0x2c4>)
 8001c58:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001c5c:	6153      	str	r3, [r2, #20]
  __ASM volatile ("dsb 0xF":::"memory");
 8001c5e:	f3bf 8f4f 	dsb	sy
}
 8001c62:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8001c64:	f3bf 8f6f 	isb	sy
}
 8001c68:	e000      	b.n	8001c6c <main+0xdc>
    if (SCB->CCR & SCB_CCR_DC_Msk) return;  /* return if DCache is already enabled */
 8001c6a:	bf00      	nop
  SCB_EnableDCache();

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001c6c:	f001 fe00 	bl	8003870 <HAL_Init>

  /* MPU Configuration--------------------------------------------------------*/
  MPU_Config();
 8001c70:	f000 ff0a 	bl	8002a88 <MPU_Config>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001c74:	f000 f922 	bl	8001ebc <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001c78:	f000 fd7e 	bl	8002778 <MX_GPIO_Init>
  MX_LPTIM1_Init();
 8001c7c:	f000 fbc2 	bl	8002404 <MX_LPTIM1_Init>
  MX_DAC1_Init();
 8001c80:	f000 fa3c 	bl	80020fc <MX_DAC1_Init>
  MX_USART3_UART_Init();
 8001c84:	f000 fd2a 	bl	80026dc <MX_USART3_UART_Init>
  MX_TIM3_Init();
 8001c88:	f000 fc8c 	bl	80025a4 <MX_TIM3_Init>
  MX_TIM1_Init();
 8001c8c:	f000 fbe8 	bl	8002460 <MX_TIM1_Init>
  MX_HRTIM_Init();
 8001c90:	f000 fa66 	bl	8002160 <MX_HRTIM_Init>
  MX_ADC3_Init();
 8001c94:	f000 f9d0 	bl	8002038 <MX_ADC3_Init>
  MX_LWIP_Init();
 8001c98:	f00c feac 	bl	800e9f4 <MX_LWIP_Init>
  MX_TIM2_Init();
 8001c9c:	f000 fc34 	bl	8002508 <MX_TIM2_Init>
  MX_TIM5_Init();
 8001ca0:	f000 fcce 	bl	8002640 <MX_TIM5_Init>
  /* USER CODE BEGIN 2 */
  printf("\033c"); //clears screen
 8001ca4:	486c      	ldr	r0, [pc, #432]	; (8001e58 <main+0x2c8>)
 8001ca6:	f017 fedf 	bl	8019a68 <iprintf>
  printf("Atomic Clock - Source __TIMESTAMP__: %s\r\n", __TIMESTAMP__);
 8001caa:	496c      	ldr	r1, [pc, #432]	; (8001e5c <main+0x2cc>)
 8001cac:	486c      	ldr	r0, [pc, #432]	; (8001e60 <main+0x2d0>)
 8001cae:	f017 fedb 	bl	8019a68 <iprintf>

	#ifndef SYNTH_ENABLE
	printf("WARNING - MW Synthesiser is disabled\r\n");
 8001cb2:	486c      	ldr	r0, [pc, #432]	; (8001e64 <main+0x2d4>)
 8001cb4:	f017 ff3e 	bl	8019b34 <puts>
			printf("MW power setting (LO2GAIN): 0x%x \r\n", MW_power);
		#endif	//MW_VERBOSE
	#endif //SYNTH_ENABLE

	/* Start a low power timer to flash an LED approximately every second */
	if (HAL_LPTIM_Counter_Start_IT(&hlptim1, 1024) != HAL_OK) {
 8001cb8:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8001cbc:	486a      	ldr	r0, [pc, #424]	; (8001e68 <main+0x2d8>)
 8001cbe:	f007 f921 	bl	8008f04 <HAL_LPTIM_Counter_Start_IT>
 8001cc2:	4603      	mov	r3, r0
 8001cc4:	2b00      	cmp	r3, #0
 8001cc6:	d004      	beq.n	8001cd2 <main+0x142>
		printf("Failed to start slow flashing LED!\r\n");
 8001cc8:	4868      	ldr	r0, [pc, #416]	; (8001e6c <main+0x2dc>)
 8001cca:	f017 ff33 	bl	8019b34 <puts>
		Error_Handler();
 8001cce:	f000 ff2d 	bl	8002b2c <Error_Handler>
	}

	/* Start the DAC and zero its output */
	if (HAL_DAC_Start(&hdac1, DAC_CHANNEL_1) != HAL_OK) {
 8001cd2:	2100      	movs	r1, #0
 8001cd4:	4866      	ldr	r0, [pc, #408]	; (8001e70 <main+0x2e0>)
 8001cd6:	f003 fdcb 	bl	8005870 <HAL_DAC_Start>
 8001cda:	4603      	mov	r3, r0
 8001cdc:	2b00      	cmp	r3, #0
 8001cde:	d004      	beq.n	8001cea <main+0x15a>
		printf("Failure to initialise DAC \r\n");
 8001ce0:	4864      	ldr	r0, [pc, #400]	; (8001e74 <main+0x2e4>)
 8001ce2:	f017 ff27 	bl	8019b34 <puts>
		Error_Handler();
 8001ce6:	f000 ff21 	bl	8002b2c <Error_Handler>
	}
	printf("Setting DAC output to 1.00V \r\n");
 8001cea:	4863      	ldr	r0, [pc, #396]	; (8001e78 <main+0x2e8>)
 8001cec:	f017 ff22 	bl	8019b34 <puts>
	if(HAL_DAC_SetValue(&hdac1, DAC_CHANNEL_1, DAC_ALIGN_12B_R, 1241) != HAL_OK){
 8001cf0:	f240 43d9 	movw	r3, #1241	; 0x4d9
 8001cf4:	2200      	movs	r2, #0
 8001cf6:	2100      	movs	r1, #0
 8001cf8:	485d      	ldr	r0, [pc, #372]	; (8001e70 <main+0x2e0>)
 8001cfa:	f003 fe0b 	bl	8005914 <HAL_DAC_SetValue>
 8001cfe:	4603      	mov	r3, r0
 8001d00:	2b00      	cmp	r3, #0
 8001d02:	d004      	beq.n	8001d0e <main+0x17e>
			printf("DAC setup failed!\r\n");
 8001d04:	485d      	ldr	r0, [pc, #372]	; (8001e7c <main+0x2ec>)
 8001d06:	f017 ff15 	bl	8019b34 <puts>
		Error_Handler();
 8001d0a:	f000 ff0f 	bl	8002b2c <Error_Handler>
	}

	HAL_GPIO_WritePin(LASER_TUNING_GPIO_Port, LASER_TUNING_Pin, GPIO_PIN_SET); // Laser_tuning output high
 8001d0e:	2201      	movs	r2, #1
 8001d10:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001d14:	485a      	ldr	r0, [pc, #360]	; (8001e80 <main+0x2f0>)
 8001d16:	f005 fce9 	bl	80076ec <HAL_GPIO_WritePin>

	/* Fire up the ADC
	 * external trigger, single conversion selected in ioc file
	 * calibrate ADC for better accuracy and start it w/ interrupt
	 */
	if(HAL_ADCEx_Calibration_Start(&hadc3, ADC_CALIB_OFFSET, ADC_SINGLE_ENDED) != HAL_OK){
 8001d1a:	f240 72ff 	movw	r2, #2047	; 0x7ff
 8001d1e:	2100      	movs	r1, #0
 8001d20:	4858      	ldr	r0, [pc, #352]	; (8001e84 <main+0x2f4>)
 8001d22:	f003 fb61 	bl	80053e8 <HAL_ADCEx_Calibration_Start>
 8001d26:	4603      	mov	r3, r0
 8001d28:	2b00      	cmp	r3, #0
 8001d2a:	d004      	beq.n	8001d36 <main+0x1a6>
		printf("ADC calibration failure \r\n");
 8001d2c:	4856      	ldr	r0, [pc, #344]	; (8001e88 <main+0x2f8>)
 8001d2e:	f017 ff01 	bl	8019b34 <puts>
		Error_Handler();
 8001d32:	f000 fefb 	bl	8002b2c <Error_Handler>
	}
	//Start the ADC with interrupts enabled
	if(HAL_ADC_Start_IT(&hadc3) != HAL_OK){
 8001d36:	4853      	ldr	r0, [pc, #332]	; (8001e84 <main+0x2f4>)
 8001d38:	f002 fa44 	bl	80041c4 <HAL_ADC_Start_IT>
 8001d3c:	4603      	mov	r3, r0
 8001d3e:	2b00      	cmp	r3, #0
 8001d40:	d004      	beq.n	8001d4c <main+0x1bc>
		printf("Failed to start ADC with interrupt capability \r\n");
 8001d42:	4852      	ldr	r0, [pc, #328]	; (8001e8c <main+0x2fc>)
 8001d44:	f017 fef6 	bl	8019b34 <puts>
	                Error_Handler();
 8001d48:	f000 fef0 	bl	8002b2c <Error_Handler>
	}
	printf("ADC calibrated successfully and interrupt callback enabled \r\n");
 8001d4c:	4850      	ldr	r0, [pc, #320]	; (8001e90 <main+0x300>)
 8001d4e:	f017 fef1 	bl	8019b34 <puts>
//	calc_fixed_time_MW_sweep(3035735122, 1900, 5.7); //1.8kHz sweep, 22s re-centred
//	calc_fixed_time_MW_sweep(3035735122, 1500, 20, ADD_SCOPE_SYNC_TIME); //1.5kHz sweep, 20s re-centred - TIMER OVERFLOW
//	calc_fixed_time_MW_sweep(3035735122, 1500, 10, ADD_SCOPE_SYNC_TIME); //1.5kHz sweep, 10s re-centred - TIMER OVERFLOW
//	calc_defined_step_MW_sweep(3035735122, 1500, 1, 1001); //1.5kHz sweep, 1 POP cycle per step, 1001 points, 17.4s
//	calc_defined_step_MW_sweep(3035735122, 1000, 1, 1001); //1kHz sweep, 1 POP cycle per step, 1001 points, 11.5s
	calc_fixed_time_MW_sweep(3035735122, 1000, 20, ADD_SCOPE_SYNC_TIME); //1.5kHz sweep, 20s re-centred
 8001d52:	2001      	movs	r0, #1
 8001d54:	eeb3 2b04 	vmov.f64	d2, #52	; 0x41a00000  20.0
 8001d58:	ed9f 1b37 	vldr	d1, [pc, #220]	; 8001e38 <main+0x2a8>
 8001d5c:	ed9f 0b38 	vldr	d0, [pc, #224]	; 8001e40 <main+0x2b0>
 8001d60:	f019 fe22 	bl	801b9a8 <__calc_fixed_time_MW_sweep_veneer>
//		if (pin_status != last_pin_status) {
//			printf("Blue button status: %u \r\n", pin_status);
//			last_pin_status = pin_status;
//		}

		blue_button_status = HAL_GPIO_ReadPin(BLUE_BUTTON_GPIO_Port, BLUE_BUTTON_Pin);
 8001d64:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001d68:	484a      	ldr	r0, [pc, #296]	; (8001e94 <main+0x304>)
 8001d6a:	f005 fca7 	bl	80076bc <HAL_GPIO_ReadPin>
 8001d6e:	4603      	mov	r3, r0
 8001d70:	2b00      	cmp	r3, #0
 8001d72:	bf14      	ite	ne
 8001d74:	2301      	movne	r3, #1
 8001d76:	2300      	moveq	r3, #0
 8001d78:	b2da      	uxtb	r2, r3
 8001d7a:	4b47      	ldr	r3, [pc, #284]	; (8001e98 <main+0x308>)
 8001d7c:	701a      	strb	r2, [r3, #0]
		if (blue_button_status) {// If blue button is pressed
 8001d7e:	4b46      	ldr	r3, [pc, #280]	; (8001e98 <main+0x308>)
 8001d80:	781b      	ldrb	r3, [r3, #0]
 8001d82:	b2db      	uxtb	r3, r3
 8001d84:	2b00      	cmp	r3, #0
 8001d86:	d047      	beq.n	8001e18 <main+0x288>
			printf("Blue button pressed....\r\n");
 8001d88:	4844      	ldr	r0, [pc, #272]	; (8001e9c <main+0x30c>)
 8001d8a:	f017 fed3 	bl	8019b34 <puts>
			HAL_GPIO_WritePin(LASER_TUNING_GPIO_Port, LASER_TUNING_Pin, GPIO_PIN_RESET); // Laser_tuning SMA output low
 8001d8e:	2200      	movs	r2, #0
 8001d90:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001d94:	483a      	ldr	r0, [pc, #232]	; (8001e80 <main+0x2f0>)
 8001d96:	f005 fca9 	bl	80076ec <HAL_GPIO_WritePin>
			//set_MW_power(0x03); //set maximum MW power to improve contrast
			//MW_frequency_toggle (3035733689, 3035733789); //infinite loop toggling 100Hz on left of DR dip
			//MW_frequency_toggle (3035733689, 3035733699); //infinite loop toggling 10Hz on left of DR dip

			//change the MW power each time the button is pressed, unless it's the first time round this loop
			if (mw_sweep_started) {
 8001d9a:	4b41      	ldr	r3, [pc, #260]	; (8001ea0 <main+0x310>)
 8001d9c:	781b      	ldrb	r3, [r3, #0]
 8001d9e:	b2db      	uxtb	r3, r3
 8001da0:	2b00      	cmp	r3, #0
 8001da2:	d018      	beq.n	8001dd6 <main+0x246>
				++MW_power; //increase MW_power value by 1
 8001da4:	4b3f      	ldr	r3, [pc, #252]	; (8001ea4 <main+0x314>)
 8001da6:	781b      	ldrb	r3, [r3, #0]
 8001da8:	3301      	adds	r3, #1
 8001daa:	b2da      	uxtb	r2, r3
 8001dac:	4b3d      	ldr	r3, [pc, #244]	; (8001ea4 <main+0x314>)
 8001dae:	701a      	strb	r2, [r3, #0]
				if (MW_power>3) { //Loop MW_power back round to 0 if above maximum permissible value i.e. 3
 8001db0:	4b3c      	ldr	r3, [pc, #240]	; (8001ea4 <main+0x314>)
 8001db2:	781b      	ldrb	r3, [r3, #0]
 8001db4:	2b03      	cmp	r3, #3
 8001db6:	d902      	bls.n	8001dbe <main+0x22e>
					MW_power = 0;
 8001db8:	4b3a      	ldr	r3, [pc, #232]	; (8001ea4 <main+0x314>)
 8001dba:	2200      	movs	r2, #0
 8001dbc:	701a      	strb	r2, [r3, #0]
				}
				set_MW_power(MW_power);
 8001dbe:	4b39      	ldr	r3, [pc, #228]	; (8001ea4 <main+0x314>)
 8001dc0:	781b      	ldrb	r3, [r3, #0]
 8001dc2:	4618      	mov	r0, r3
 8001dc4:	f019 fdf4 	bl	801b9b0 <__set_MW_power_veneer>
			#ifdef MW_VERBOSE
				printf("LO2GAIN changed to: 0x%x \r\n", MW_power);
 8001dc8:	4b36      	ldr	r3, [pc, #216]	; (8001ea4 <main+0x314>)
 8001dca:	781b      	ldrb	r3, [r3, #0]
 8001dcc:	4619      	mov	r1, r3
 8001dce:	4836      	ldr	r0, [pc, #216]	; (8001ea8 <main+0x318>)
 8001dd0:	f017 fe4a 	bl	8019a68 <iprintf>
 8001dd4:	e01b      	b.n	8001e0e <main+0x27e>
			#endif //MW_VERBOSE
			} else {
				printf("Initiating sweep.\r\n");
 8001dd6:	4835      	ldr	r0, [pc, #212]	; (8001eac <main+0x31c>)
 8001dd8:	f017 feac 	bl	8019b34 <puts>
				mw_sweep_started = true;
 8001ddc:	4b30      	ldr	r3, [pc, #192]	; (8001ea0 <main+0x310>)
 8001dde:	2201      	movs	r2, #1
 8001de0:	701a      	strb	r2, [r3, #0]
				start_continuous_MW_sweep();
 8001de2:	f019 fdd5 	bl	801b990 <__start_continuous_MW_sweep_veneer>
			}
			while(blue_button_status) {//remain here polling button until it is released
 8001de6:	e012      	b.n	8001e0e <main+0x27e>
				timer_delay(SLOW_TIMER, 100); //10ms delay
 8001de8:	4b31      	ldr	r3, [pc, #196]	; (8001eb0 <main+0x320>)
 8001dea:	681b      	ldr	r3, [r3, #0]
 8001dec:	2164      	movs	r1, #100	; 0x64
 8001dee:	4618      	mov	r0, r3
 8001df0:	f019 fdd2 	bl	801b998 <__timer_delay_veneer>
				blue_button_status = HAL_GPIO_ReadPin(BLUE_BUTTON_GPIO_Port, BLUE_BUTTON_Pin);
 8001df4:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001df8:	4826      	ldr	r0, [pc, #152]	; (8001e94 <main+0x304>)
 8001dfa:	f005 fc5f 	bl	80076bc <HAL_GPIO_ReadPin>
 8001dfe:	4603      	mov	r3, r0
 8001e00:	2b00      	cmp	r3, #0
 8001e02:	bf14      	ite	ne
 8001e04:	2301      	movne	r3, #1
 8001e06:	2300      	moveq	r3, #0
 8001e08:	b2da      	uxtb	r2, r3
 8001e0a:	4b23      	ldr	r3, [pc, #140]	; (8001e98 <main+0x308>)
 8001e0c:	701a      	strb	r2, [r3, #0]
			while(blue_button_status) {//remain here polling button until it is released
 8001e0e:	4b22      	ldr	r3, [pc, #136]	; (8001e98 <main+0x308>)
 8001e10:	781b      	ldrb	r3, [r3, #0]
 8001e12:	b2db      	uxtb	r3, r3
 8001e14:	2b00      	cmp	r3, #0
 8001e16:	d1e7      	bne.n	8001de8 <main+0x258>
			}
		}

		if (mw_sweep_started) {//won't execute until the first time the blue button is pressed
 8001e18:	4b21      	ldr	r3, [pc, #132]	; (8001ea0 <main+0x310>)
 8001e1a:	781b      	ldrb	r3, [r3, #0]
//			run_sweep();
//			HAL_GPIO_WritePin(LD3_GPIO_Port, LD3_Pin, GPIO_PIN_RESET); //turn off red LED
			//printf("Sweep complete.\r\n");
			//printf("LO2GAIN: 0x%x \r\n", MW_power);
		}
		MW_update();
 8001e1c:	f019 fdb4 	bl	801b988 <__MW_update_veneer>

	    /* Ethernet handling */
		ethernetif_input(&gnetif);
 8001e20:	4824      	ldr	r0, [pc, #144]	; (8001eb4 <main+0x324>)
 8001e22:	f00d f855 	bl	800eed0 <ethernetif_input>
		sys_check_timeouts();
 8001e26:	f014 fbfd 	bl	8016624 <sys_check_timeouts>
		printf("Ethernet loop.\r\n");
 8001e2a:	4823      	ldr	r0, [pc, #140]	; (8001eb8 <main+0x328>)
 8001e2c:	f017 fe82 	bl	8019b34 <puts>
		blue_button_status = HAL_GPIO_ReadPin(BLUE_BUTTON_GPIO_Port, BLUE_BUTTON_Pin);
 8001e30:	e798      	b.n	8001d64 <main+0x1d4>
 8001e32:	bf00      	nop
 8001e34:	f3af 8000 	nop.w
 8001e38:	00000000 	.word	0x00000000
 8001e3c:	408f4000 	.word	0x408f4000
 8001e40:	8a400000 	.word	0x8a400000
 8001e44:	41e69e34 	.word	0x41e69e34
 8001e48:	000014e0 	.word	0x000014e0
 8001e4c:	00000000 	.word	0x00000000
 8001e50:	08000298 	.word	0x08000298
 8001e54:	e000ed00 	.word	0xe000ed00
 8001e58:	0801b9c0 	.word	0x0801b9c0
 8001e5c:	0801b9c4 	.word	0x0801b9c4
 8001e60:	0801b9e0 	.word	0x0801b9e0
 8001e64:	0801ba0c 	.word	0x0801ba0c
 8001e68:	200003a0 	.word	0x200003a0
 8001e6c:	0801ba34 	.word	0x0801ba34
 8001e70:	200002b0 	.word	0x200002b0
 8001e74:	0801ba58 	.word	0x0801ba58
 8001e78:	0801ba74 	.word	0x0801ba74
 8001e7c:	0801ba94 	.word	0x0801ba94
 8001e80:	58020400 	.word	0x58020400
 8001e84:	2000024c 	.word	0x2000024c
 8001e88:	0801baa8 	.word	0x0801baa8
 8001e8c:	0801bac4 	.word	0x0801bac4
 8001e90:	0801baf4 	.word	0x0801baf4
 8001e94:	58020800 	.word	0x58020800
 8001e98:	2000059d 	.word	0x2000059d
 8001e9c:	0801bb34 	.word	0x0801bb34
 8001ea0:	2000059c 	.word	0x2000059c
 8001ea4:	20000000 	.word	0x20000000
 8001ea8:	0801bb50 	.word	0x0801bb50
 8001eac:	0801bb6c 	.word	0x0801bb6c
 8001eb0:	20000018 	.word	0x20000018
 8001eb4:	2000060c 	.word	0x2000060c
 8001eb8:	0801bb80 	.word	0x0801bb80

08001ebc <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001ebc:	b580      	push	{r7, lr}
 8001ebe:	b0a4      	sub	sp, #144	; 0x90
 8001ec0:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001ec2:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8001ec6:	224c      	movs	r2, #76	; 0x4c
 8001ec8:	2100      	movs	r1, #0
 8001eca:	4618      	mov	r0, r3
 8001ecc:	f017 ff22 	bl	8019d14 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001ed0:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001ed4:	2220      	movs	r2, #32
 8001ed6:	2100      	movs	r1, #0
 8001ed8:	4618      	mov	r0, r3
 8001eda:	f017 ff1b 	bl	8019d14 <memset>
  RCC_CRSInitTypeDef RCC_CRSInitStruct = {0};
 8001ede:	f107 030c 	add.w	r3, r7, #12
 8001ee2:	2200      	movs	r2, #0
 8001ee4:	601a      	str	r2, [r3, #0]
 8001ee6:	605a      	str	r2, [r3, #4]
 8001ee8:	609a      	str	r2, [r3, #8]
 8001eea:	60da      	str	r2, [r3, #12]
 8001eec:	611a      	str	r2, [r3, #16]
 8001eee:	615a      	str	r2, [r3, #20]

  /** Supply configuration update enable
  */
  HAL_PWREx_ConfigSupply(PWR_LDO_SUPPLY);
 8001ef0:	2002      	movs	r0, #2
 8001ef2:	f007 fb65 	bl	80095c0 <HAL_PWREx_ConfigSupply>

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8001ef6:	2300      	movs	r3, #0
 8001ef8:	60bb      	str	r3, [r7, #8]
 8001efa:	4b4c      	ldr	r3, [pc, #304]	; (800202c <SystemClock_Config+0x170>)
 8001efc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001efe:	4a4b      	ldr	r2, [pc, #300]	; (800202c <SystemClock_Config+0x170>)
 8001f00:	f023 0301 	bic.w	r3, r3, #1
 8001f04:	62d3      	str	r3, [r2, #44]	; 0x2c
 8001f06:	4b49      	ldr	r3, [pc, #292]	; (800202c <SystemClock_Config+0x170>)
 8001f08:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001f0a:	f003 0301 	and.w	r3, r3, #1
 8001f0e:	60bb      	str	r3, [r7, #8]
 8001f10:	4b47      	ldr	r3, [pc, #284]	; (8002030 <SystemClock_Config+0x174>)
 8001f12:	699b      	ldr	r3, [r3, #24]
 8001f14:	4a46      	ldr	r2, [pc, #280]	; (8002030 <SystemClock_Config+0x174>)
 8001f16:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8001f1a:	6193      	str	r3, [r2, #24]
 8001f1c:	4b44      	ldr	r3, [pc, #272]	; (8002030 <SystemClock_Config+0x174>)
 8001f1e:	699b      	ldr	r3, [r3, #24]
 8001f20:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8001f24:	60bb      	str	r3, [r7, #8]
 8001f26:	68bb      	ldr	r3, [r7, #8]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 8001f28:	bf00      	nop
 8001f2a:	4b41      	ldr	r3, [pc, #260]	; (8002030 <SystemClock_Config+0x174>)
 8001f2c:	699b      	ldr	r3, [r3, #24]
 8001f2e:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8001f32:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8001f36:	d1f8      	bne.n	8001f2a <SystemClock_Config+0x6e>

  /** Configure LSE Drive Capability
  */
  HAL_PWR_EnableBkUpAccess();
 8001f38:	f007 fb32 	bl	80095a0 <HAL_PWR_EnableBkUpAccess>
  __HAL_RCC_LSEDRIVE_CONFIG(RCC_LSEDRIVE_LOW);
 8001f3c:	f001 fd4e 	bl	80039dc <HAL_GetREVID>
 8001f40:	4b3c      	ldr	r3, [pc, #240]	; (8002034 <SystemClock_Config+0x178>)
 8001f42:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001f44:	4a3b      	ldr	r2, [pc, #236]	; (8002034 <SystemClock_Config+0x178>)
 8001f46:	f023 0318 	bic.w	r3, r3, #24
 8001f4a:	6713      	str	r3, [r2, #112]	; 0x70

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI48|RCC_OSCILLATORTYPE_HSE
 8001f4c:	2325      	movs	r3, #37	; 0x25
 8001f4e:	647b      	str	r3, [r7, #68]	; 0x44
                              |RCC_OSCILLATORTYPE_LSE;
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 8001f50:	f44f 23a0 	mov.w	r3, #327680	; 0x50000
 8001f54:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.LSEState = RCC_LSE_ON;
 8001f56:	2301      	movs	r3, #1
 8001f58:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.HSI48State = RCC_HSI48_ON;
 8001f5a:	2301      	movs	r3, #1
 8001f5c:	65fb      	str	r3, [r7, #92]	; 0x5c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001f5e:	2302      	movs	r3, #2
 8001f60:	66bb      	str	r3, [r7, #104]	; 0x68
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8001f62:	2302      	movs	r3, #2
 8001f64:	66fb      	str	r3, [r7, #108]	; 0x6c
  RCC_OscInitStruct.PLL.PLLM = 1;
 8001f66:	2301      	movs	r3, #1
 8001f68:	673b      	str	r3, [r7, #112]	; 0x70
  RCC_OscInitStruct.PLL.PLLN = 80;
 8001f6a:	2350      	movs	r3, #80	; 0x50
 8001f6c:	677b      	str	r3, [r7, #116]	; 0x74
  RCC_OscInitStruct.PLL.PLLP = 2;
 8001f6e:	2302      	movs	r3, #2
 8001f70:	67bb      	str	r3, [r7, #120]	; 0x78
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8001f72:	2304      	movs	r3, #4
 8001f74:	67fb      	str	r3, [r7, #124]	; 0x7c
  RCC_OscInitStruct.PLL.PLLR = 2;
 8001f76:	2302      	movs	r3, #2
 8001f78:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
  RCC_OscInitStruct.PLL.PLLRGE = RCC_PLL1VCIRANGE_3;
 8001f7c:	230c      	movs	r3, #12
 8001f7e:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  RCC_OscInitStruct.PLL.PLLVCOSEL = RCC_PLL1VCOWIDE;
 8001f82:	2300      	movs	r3, #0
 8001f84:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  RCC_OscInitStruct.PLL.PLLFRACN = 0;
 8001f88:	2300      	movs	r3, #0
 8001f8a:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001f8e:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8001f92:	4618      	mov	r0, r3
 8001f94:	f007 fb4e 	bl	8009634 <HAL_RCC_OscConfig>
 8001f98:	4603      	mov	r3, r0
 8001f9a:	2b00      	cmp	r3, #0
 8001f9c:	d001      	beq.n	8001fa2 <SystemClock_Config+0xe6>
  {
    Error_Handler();
 8001f9e:	f000 fdc5 	bl	8002b2c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001fa2:	233f      	movs	r3, #63	; 0x3f
 8001fa4:	627b      	str	r3, [r7, #36]	; 0x24
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2
                              |RCC_CLOCKTYPE_D3PCLK1|RCC_CLOCKTYPE_D1PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001fa6:	2303      	movs	r3, #3
 8001fa8:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV1;
 8001faa:	2300      	movs	r3, #0
 8001fac:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV4;
 8001fae:	2309      	movs	r3, #9
 8001fb0:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_ClkInitStruct.APB3CLKDivider = RCC_APB3_DIV1;
 8001fb2:	2300      	movs	r3, #0
 8001fb4:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV1;
 8001fb6:	2300      	movs	r3, #0
 8001fb8:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_ClkInitStruct.APB2CLKDivider = RCC_APB2_DIV16;
 8001fba:	f44f 63e0 	mov.w	r3, #1792	; 0x700
 8001fbe:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_ClkInitStruct.APB4CLKDivider = RCC_APB4_DIV1;
 8001fc0:	2300      	movs	r3, #0
 8001fc2:	643b      	str	r3, [r7, #64]	; 0x40

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 8001fc4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001fc8:	2101      	movs	r1, #1
 8001fca:	4618      	mov	r0, r3
 8001fcc:	f007 ff8c 	bl	8009ee8 <HAL_RCC_ClockConfig>
 8001fd0:	4603      	mov	r3, r0
 8001fd2:	2b00      	cmp	r3, #0
 8001fd4:	d001      	beq.n	8001fda <SystemClock_Config+0x11e>
  {
    Error_Handler();
 8001fd6:	f000 fda9 	bl	8002b2c <Error_Handler>
  }

  /** Enables the Clock Security System
  */
  HAL_RCC_EnableCSS();
 8001fda:	f008 f93b 	bl	800a254 <HAL_RCC_EnableCSS>

  /** Enable the SYSCFG APB clock
  */
  __HAL_RCC_CRS_CLK_ENABLE();
 8001fde:	4b15      	ldr	r3, [pc, #84]	; (8002034 <SystemClock_Config+0x178>)
 8001fe0:	f8d3 30ec 	ldr.w	r3, [r3, #236]	; 0xec
 8001fe4:	4a13      	ldr	r2, [pc, #76]	; (8002034 <SystemClock_Config+0x178>)
 8001fe6:	f043 0302 	orr.w	r3, r3, #2
 8001fea:	f8c2 30ec 	str.w	r3, [r2, #236]	; 0xec
 8001fee:	4b11      	ldr	r3, [pc, #68]	; (8002034 <SystemClock_Config+0x178>)
 8001ff0:	f8d3 30ec 	ldr.w	r3, [r3, #236]	; 0xec
 8001ff4:	f003 0302 	and.w	r3, r3, #2
 8001ff8:	607b      	str	r3, [r7, #4]
 8001ffa:	687b      	ldr	r3, [r7, #4]

  /** Configures CRS
  */
  RCC_CRSInitStruct.Prescaler = RCC_CRS_SYNC_DIV1;
 8001ffc:	2300      	movs	r3, #0
 8001ffe:	60fb      	str	r3, [r7, #12]
  RCC_CRSInitStruct.Source = RCC_CRS_SYNC_SOURCE_LSE;
 8002000:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8002004:	613b      	str	r3, [r7, #16]
  RCC_CRSInitStruct.Polarity = RCC_CRS_SYNC_POLARITY_RISING;
 8002006:	2300      	movs	r3, #0
 8002008:	617b      	str	r3, [r7, #20]
  RCC_CRSInitStruct.ReloadValue = __HAL_RCC_CRS_RELOADVALUE_CALCULATE(48000000,32768);
 800200a:	f240 53b7 	movw	r3, #1463	; 0x5b7
 800200e:	61bb      	str	r3, [r7, #24]
  RCC_CRSInitStruct.ErrorLimitValue = 34;
 8002010:	2322      	movs	r3, #34	; 0x22
 8002012:	61fb      	str	r3, [r7, #28]
  RCC_CRSInitStruct.HSI48CalibrationValue = 32;
 8002014:	2320      	movs	r3, #32
 8002016:	623b      	str	r3, [r7, #32]

  HAL_RCCEx_CRSConfig(&RCC_CRSInitStruct);
 8002018:	f107 030c 	add.w	r3, r7, #12
 800201c:	4618      	mov	r0, r3
 800201e:	f00a feb5 	bl	800cd8c <HAL_RCCEx_CRSConfig>
}
 8002022:	bf00      	nop
 8002024:	3790      	adds	r7, #144	; 0x90
 8002026:	46bd      	mov	sp, r7
 8002028:	bd80      	pop	{r7, pc}
 800202a:	bf00      	nop
 800202c:	58000400 	.word	0x58000400
 8002030:	58024800 	.word	0x58024800
 8002034:	58024400 	.word	0x58024400

08002038 <MX_ADC3_Init>:
  * @brief ADC3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC3_Init(void)
{
 8002038:	b580      	push	{r7, lr}
 800203a:	b088      	sub	sp, #32
 800203c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC3_Init 0 */

  /* USER CODE END ADC3_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 800203e:	1d3b      	adds	r3, r7, #4
 8002040:	2200      	movs	r2, #0
 8002042:	601a      	str	r2, [r3, #0]
 8002044:	605a      	str	r2, [r3, #4]
 8002046:	609a      	str	r2, [r3, #8]
 8002048:	60da      	str	r2, [r3, #12]
 800204a:	611a      	str	r2, [r3, #16]
 800204c:	615a      	str	r2, [r3, #20]
 800204e:	619a      	str	r2, [r3, #24]

  /* USER CODE END ADC3_Init 1 */

  /** Common config
  */
  hadc3.Instance = ADC3;
 8002050:	4b28      	ldr	r3, [pc, #160]	; (80020f4 <MX_ADC3_Init+0xbc>)
 8002052:	4a29      	ldr	r2, [pc, #164]	; (80020f8 <MX_ADC3_Init+0xc0>)
 8002054:	601a      	str	r2, [r3, #0]
  hadc3.Init.Resolution = ADC_RESOLUTION_16B;
 8002056:	4b27      	ldr	r3, [pc, #156]	; (80020f4 <MX_ADC3_Init+0xbc>)
 8002058:	2200      	movs	r2, #0
 800205a:	609a      	str	r2, [r3, #8]
  hadc3.Init.ScanConvMode = ADC_SCAN_DISABLE;
 800205c:	4b25      	ldr	r3, [pc, #148]	; (80020f4 <MX_ADC3_Init+0xbc>)
 800205e:	2200      	movs	r2, #0
 8002060:	60da      	str	r2, [r3, #12]
  hadc3.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8002062:	4b24      	ldr	r3, [pc, #144]	; (80020f4 <MX_ADC3_Init+0xbc>)
 8002064:	2204      	movs	r2, #4
 8002066:	611a      	str	r2, [r3, #16]
  hadc3.Init.LowPowerAutoWait = DISABLE;
 8002068:	4b22      	ldr	r3, [pc, #136]	; (80020f4 <MX_ADC3_Init+0xbc>)
 800206a:	2200      	movs	r2, #0
 800206c:	751a      	strb	r2, [r3, #20]
  hadc3.Init.ContinuousConvMode = DISABLE;
 800206e:	4b21      	ldr	r3, [pc, #132]	; (80020f4 <MX_ADC3_Init+0xbc>)
 8002070:	2200      	movs	r2, #0
 8002072:	755a      	strb	r2, [r3, #21]
  hadc3.Init.NbrOfConversion = 1;
 8002074:	4b1f      	ldr	r3, [pc, #124]	; (80020f4 <MX_ADC3_Init+0xbc>)
 8002076:	2201      	movs	r2, #1
 8002078:	619a      	str	r2, [r3, #24]
  hadc3.Init.DiscontinuousConvMode = DISABLE;
 800207a:	4b1e      	ldr	r3, [pc, #120]	; (80020f4 <MX_ADC3_Init+0xbc>)
 800207c:	2200      	movs	r2, #0
 800207e:	771a      	strb	r2, [r3, #28]
  hadc3.Init.ExternalTrigConv = ADC_EXTERNALTRIG_EXT_IT11;
 8002080:	4b1c      	ldr	r3, [pc, #112]	; (80020f4 <MX_ADC3_Init+0xbc>)
 8002082:	f44f 6298 	mov.w	r2, #1216	; 0x4c0
 8002086:	625a      	str	r2, [r3, #36]	; 0x24
  hadc3.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_RISING;
 8002088:	4b1a      	ldr	r3, [pc, #104]	; (80020f4 <MX_ADC3_Init+0xbc>)
 800208a:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800208e:	629a      	str	r2, [r3, #40]	; 0x28
  hadc3.Init.ConversionDataManagement = ADC_CONVERSIONDATA_DR;
 8002090:	4b18      	ldr	r3, [pc, #96]	; (80020f4 <MX_ADC3_Init+0xbc>)
 8002092:	2200      	movs	r2, #0
 8002094:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc3.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 8002096:	4b17      	ldr	r3, [pc, #92]	; (80020f4 <MX_ADC3_Init+0xbc>)
 8002098:	2200      	movs	r2, #0
 800209a:	631a      	str	r2, [r3, #48]	; 0x30
  hadc3.Init.LeftBitShift = ADC_LEFTBITSHIFT_NONE;
 800209c:	4b15      	ldr	r3, [pc, #84]	; (80020f4 <MX_ADC3_Init+0xbc>)
 800209e:	2200      	movs	r2, #0
 80020a0:	635a      	str	r2, [r3, #52]	; 0x34
  hadc3.Init.OversamplingMode = DISABLE;
 80020a2:	4b14      	ldr	r3, [pc, #80]	; (80020f4 <MX_ADC3_Init+0xbc>)
 80020a4:	2200      	movs	r2, #0
 80020a6:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  if (HAL_ADC_Init(&hadc3) != HAL_OK)
 80020aa:	4812      	ldr	r0, [pc, #72]	; (80020f4 <MX_ADC3_Init+0xbc>)
 80020ac:	f001 fee8 	bl	8003e80 <HAL_ADC_Init>
 80020b0:	4603      	mov	r3, r0
 80020b2:	2b00      	cmp	r3, #0
 80020b4:	d001      	beq.n	80020ba <MX_ADC3_Init+0x82>
  {
    Error_Handler();
 80020b6:	f000 fd39 	bl	8002b2c <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_0;
 80020ba:	2301      	movs	r3, #1
 80020bc:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 80020be:	2306      	movs	r3, #6
 80020c0:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
 80020c2:	2300      	movs	r3, #0
 80020c4:	60fb      	str	r3, [r7, #12]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 80020c6:	f240 73ff 	movw	r3, #2047	; 0x7ff
 80020ca:	613b      	str	r3, [r7, #16]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 80020cc:	2304      	movs	r3, #4
 80020ce:	617b      	str	r3, [r7, #20]
  sConfig.Offset = 0;
 80020d0:	2300      	movs	r3, #0
 80020d2:	61bb      	str	r3, [r7, #24]
  sConfig.OffsetSignedSaturation = DISABLE;
 80020d4:	2300      	movs	r3, #0
 80020d6:	777b      	strb	r3, [r7, #29]
  if (HAL_ADC_ConfigChannel(&hadc3, &sConfig) != HAL_OK)
 80020d8:	1d3b      	adds	r3, r7, #4
 80020da:	4619      	mov	r1, r3
 80020dc:	4805      	ldr	r0, [pc, #20]	; (80020f4 <MX_ADC3_Init+0xbc>)
 80020de:	f002 fc0b 	bl	80048f8 <HAL_ADC_ConfigChannel>
 80020e2:	4603      	mov	r3, r0
 80020e4:	2b00      	cmp	r3, #0
 80020e6:	d001      	beq.n	80020ec <MX_ADC3_Init+0xb4>
  {
    Error_Handler();
 80020e8:	f000 fd20 	bl	8002b2c <Error_Handler>
  }
  /* USER CODE BEGIN ADC3_Init 2 */

  /* USER CODE END ADC3_Init 2 */

}
 80020ec:	bf00      	nop
 80020ee:	3720      	adds	r7, #32
 80020f0:	46bd      	mov	sp, r7
 80020f2:	bd80      	pop	{r7, pc}
 80020f4:	2000024c 	.word	0x2000024c
 80020f8:	58026000 	.word	0x58026000

080020fc <MX_DAC1_Init>:
  * @brief DAC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_DAC1_Init(void)
{
 80020fc:	b580      	push	{r7, lr}
 80020fe:	b08a      	sub	sp, #40	; 0x28
 8002100:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN DAC1_Init 0 */

  /* USER CODE END DAC1_Init 0 */

  DAC_ChannelConfTypeDef sConfig = {0};
 8002102:	1d3b      	adds	r3, r7, #4
 8002104:	2224      	movs	r2, #36	; 0x24
 8002106:	2100      	movs	r1, #0
 8002108:	4618      	mov	r0, r3
 800210a:	f017 fe03 	bl	8019d14 <memset>

  /* USER CODE END DAC1_Init 1 */

  /** DAC Initialization
  */
  hdac1.Instance = DAC1;
 800210e:	4b12      	ldr	r3, [pc, #72]	; (8002158 <MX_DAC1_Init+0x5c>)
 8002110:	4a12      	ldr	r2, [pc, #72]	; (800215c <MX_DAC1_Init+0x60>)
 8002112:	601a      	str	r2, [r3, #0]
  if (HAL_DAC_Init(&hdac1) != HAL_OK)
 8002114:	4810      	ldr	r0, [pc, #64]	; (8002158 <MX_DAC1_Init+0x5c>)
 8002116:	f003 fb89 	bl	800582c <HAL_DAC_Init>
 800211a:	4603      	mov	r3, r0
 800211c:	2b00      	cmp	r3, #0
 800211e:	d001      	beq.n	8002124 <MX_DAC1_Init+0x28>
  {
    Error_Handler();
 8002120:	f000 fd04 	bl	8002b2c <Error_Handler>
  }

  /** DAC channel OUT1 config
  */
  sConfig.DAC_SampleAndHold = DAC_SAMPLEANDHOLD_DISABLE;
 8002124:	2300      	movs	r3, #0
 8002126:	607b      	str	r3, [r7, #4]
  sConfig.DAC_Trigger = DAC_TRIGGER_NONE;
 8002128:	2300      	movs	r3, #0
 800212a:	60bb      	str	r3, [r7, #8]
  sConfig.DAC_OutputBuffer = DAC_OUTPUTBUFFER_ENABLE;
 800212c:	2300      	movs	r3, #0
 800212e:	60fb      	str	r3, [r7, #12]
  sConfig.DAC_ConnectOnChipPeripheral = DAC_CHIPCONNECT_DISABLE;
 8002130:	2301      	movs	r3, #1
 8002132:	613b      	str	r3, [r7, #16]
  sConfig.DAC_UserTrimming = DAC_TRIMMING_FACTORY;
 8002134:	2300      	movs	r3, #0
 8002136:	617b      	str	r3, [r7, #20]
  if (HAL_DAC_ConfigChannel(&hdac1, &sConfig, DAC_CHANNEL_1) != HAL_OK)
 8002138:	1d3b      	adds	r3, r7, #4
 800213a:	2200      	movs	r2, #0
 800213c:	4619      	mov	r1, r3
 800213e:	4806      	ldr	r0, [pc, #24]	; (8002158 <MX_DAC1_Init+0x5c>)
 8002140:	f003 fc0e 	bl	8005960 <HAL_DAC_ConfigChannel>
 8002144:	4603      	mov	r3, r0
 8002146:	2b00      	cmp	r3, #0
 8002148:	d001      	beq.n	800214e <MX_DAC1_Init+0x52>
  {
    Error_Handler();
 800214a:	f000 fcef 	bl	8002b2c <Error_Handler>
//    Error_Handler();
//  }

  /* USER CODE END DAC1_Init 2 */

}
 800214e:	bf00      	nop
 8002150:	3728      	adds	r7, #40	; 0x28
 8002152:	46bd      	mov	sp, r7
 8002154:	bd80      	pop	{r7, pc}
 8002156:	bf00      	nop
 8002158:	200002b0 	.word	0x200002b0
 800215c:	40007400 	.word	0x40007400

08002160 <MX_HRTIM_Init>:
  * @brief HRTIM Initialization Function
  * @param None
  * @retval None
  */
static void MX_HRTIM_Init(void)
{
 8002160:	b580      	push	{r7, lr}
 8002162:	b0a4      	sub	sp, #144	; 0x90
 8002164:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN HRTIM_Init 0 */

  /* USER CODE END HRTIM_Init 0 */

  HRTIM_TimeBaseCfgTypeDef pTimeBaseCfg = {0};
 8002166:	f107 0380 	add.w	r3, r7, #128	; 0x80
 800216a:	2200      	movs	r2, #0
 800216c:	601a      	str	r2, [r3, #0]
 800216e:	605a      	str	r2, [r3, #4]
 8002170:	609a      	str	r2, [r3, #8]
 8002172:	60da      	str	r2, [r3, #12]
  HRTIM_TimerCfgTypeDef pTimerCfg = {0};
 8002174:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8002178:	2254      	movs	r2, #84	; 0x54
 800217a:	2100      	movs	r1, #0
 800217c:	4618      	mov	r0, r3
 800217e:	f017 fdc9 	bl	8019d14 <memset>
  HRTIM_CompareCfgTypeDef pCompareCfg = {0};
 8002182:	f107 0320 	add.w	r3, r7, #32
 8002186:	2200      	movs	r2, #0
 8002188:	601a      	str	r2, [r3, #0]
 800218a:	605a      	str	r2, [r3, #4]
 800218c:	609a      	str	r2, [r3, #8]
  HRTIM_OutputCfgTypeDef pOutputCfg = {0};
 800218e:	463b      	mov	r3, r7
 8002190:	2220      	movs	r2, #32
 8002192:	2100      	movs	r1, #0
 8002194:	4618      	mov	r0, r3
 8002196:	f017 fdbd 	bl	8019d14 <memset>

  /* USER CODE BEGIN HRTIM_Init 1 */

  /* USER CODE END HRTIM_Init 1 */
  hhrtim.Instance = HRTIM1;
 800219a:	4b98      	ldr	r3, [pc, #608]	; (80023fc <MX_HRTIM_Init+0x29c>)
 800219c:	4a98      	ldr	r2, [pc, #608]	; (8002400 <MX_HRTIM_Init+0x2a0>)
 800219e:	601a      	str	r2, [r3, #0]
  hhrtim.Init.HRTIMInterruptResquests = HRTIM_IT_NONE;
 80021a0:	4b96      	ldr	r3, [pc, #600]	; (80023fc <MX_HRTIM_Init+0x29c>)
 80021a2:	2200      	movs	r2, #0
 80021a4:	605a      	str	r2, [r3, #4]
  hhrtim.Init.SyncOptions = HRTIM_SYNCOPTION_NONE;
 80021a6:	4b95      	ldr	r3, [pc, #596]	; (80023fc <MX_HRTIM_Init+0x29c>)
 80021a8:	2200      	movs	r2, #0
 80021aa:	609a      	str	r2, [r3, #8]
  if (HAL_HRTIM_Init(&hhrtim) != HAL_OK)
 80021ac:	4893      	ldr	r0, [pc, #588]	; (80023fc <MX_HRTIM_Init+0x29c>)
 80021ae:	f005 faf5 	bl	800779c <HAL_HRTIM_Init>
 80021b2:	4603      	mov	r3, r0
 80021b4:	2b00      	cmp	r3, #0
 80021b6:	d001      	beq.n	80021bc <MX_HRTIM_Init+0x5c>
  {
    Error_Handler();
 80021b8:	f000 fcb8 	bl	8002b2c <Error_Handler>
  }
  pTimeBaseCfg.Period = PUMP_WIDTH+(2*MICROWAVE_DELAY)+(2*MICROWAVE_WIDTH)+RAMSEY_TIME+PROBE_WIDTH+POP_CYCLE_DELAY;
 80021bc:	f24c 2318 	movw	r3, #49688	; 0xc218
 80021c0:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
  pTimeBaseCfg.RepetitionCounter = 0x00;
 80021c4:	2300      	movs	r3, #0
 80021c6:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  pTimeBaseCfg.PrescalerRatio = HRTIM_PRESCALERRATIO_DIV4;
 80021ca:	2307      	movs	r3, #7
 80021cc:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  pTimeBaseCfg.Mode = HRTIM_MODE_CONTINUOUS;
 80021d0:	2308      	movs	r3, #8
 80021d2:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
  if (HAL_HRTIM_TimeBaseConfig(&hhrtim, HRTIM_TIMERINDEX_TIMER_A, &pTimeBaseCfg) != HAL_OK)
 80021d6:	f107 0380 	add.w	r3, r7, #128	; 0x80
 80021da:	461a      	mov	r2, r3
 80021dc:	2100      	movs	r1, #0
 80021de:	4887      	ldr	r0, [pc, #540]	; (80023fc <MX_HRTIM_Init+0x29c>)
 80021e0:	f005 fbac 	bl	800793c <HAL_HRTIM_TimeBaseConfig>
 80021e4:	4603      	mov	r3, r0
 80021e6:	2b00      	cmp	r3, #0
 80021e8:	d001      	beq.n	80021ee <MX_HRTIM_Init+0x8e>
  {
    Error_Handler();
 80021ea:	f000 fc9f 	bl	8002b2c <Error_Handler>
  }
  pTimerCfg.InterruptRequests = HRTIM_TIM_IT_CMP3|HRTIM_TIM_IT_REP;
 80021ee:	2314      	movs	r3, #20
 80021f0:	62fb      	str	r3, [r7, #44]	; 0x2c
  pTimerCfg.DMARequests = HRTIM_TIM_DMA_NONE;
 80021f2:	2300      	movs	r3, #0
 80021f4:	633b      	str	r3, [r7, #48]	; 0x30
  pTimerCfg.DMASrcAddress = 0x0000;
 80021f6:	2300      	movs	r3, #0
 80021f8:	637b      	str	r3, [r7, #52]	; 0x34
  pTimerCfg.DMADstAddress = 0x0000;
 80021fa:	2300      	movs	r3, #0
 80021fc:	63bb      	str	r3, [r7, #56]	; 0x38
  pTimerCfg.DMASize = 0x1;
 80021fe:	2301      	movs	r3, #1
 8002200:	63fb      	str	r3, [r7, #60]	; 0x3c
  pTimerCfg.HalfModeEnable = HRTIM_HALFMODE_DISABLED;
 8002202:	2300      	movs	r3, #0
 8002204:	643b      	str	r3, [r7, #64]	; 0x40
  pTimerCfg.StartOnSync = HRTIM_SYNCSTART_DISABLED;
 8002206:	2300      	movs	r3, #0
 8002208:	647b      	str	r3, [r7, #68]	; 0x44
  pTimerCfg.ResetOnSync = HRTIM_SYNCRESET_DISABLED;
 800220a:	2300      	movs	r3, #0
 800220c:	64bb      	str	r3, [r7, #72]	; 0x48
  pTimerCfg.DACSynchro = HRTIM_DACSYNC_NONE;
 800220e:	2300      	movs	r3, #0
 8002210:	64fb      	str	r3, [r7, #76]	; 0x4c
  pTimerCfg.PreloadEnable = HRTIM_PRELOAD_DISABLED;
 8002212:	2300      	movs	r3, #0
 8002214:	653b      	str	r3, [r7, #80]	; 0x50
  pTimerCfg.UpdateGating = HRTIM_UPDATEGATING_INDEPENDENT;
 8002216:	2300      	movs	r3, #0
 8002218:	657b      	str	r3, [r7, #84]	; 0x54
  pTimerCfg.BurstMode = HRTIM_TIMERBURSTMODE_MAINTAINCLOCK;
 800221a:	2300      	movs	r3, #0
 800221c:	65bb      	str	r3, [r7, #88]	; 0x58
  pTimerCfg.RepetitionUpdate = HRTIM_UPDATEONREPETITION_DISABLED;
 800221e:	2300      	movs	r3, #0
 8002220:	65fb      	str	r3, [r7, #92]	; 0x5c
  pTimerCfg.PushPull = HRTIM_TIMPUSHPULLMODE_DISABLED;
 8002222:	2300      	movs	r3, #0
 8002224:	663b      	str	r3, [r7, #96]	; 0x60
  pTimerCfg.FaultEnable = HRTIM_TIMFAULTENABLE_NONE;
 8002226:	2300      	movs	r3, #0
 8002228:	667b      	str	r3, [r7, #100]	; 0x64
  pTimerCfg.FaultLock = HRTIM_TIMFAULTLOCK_READWRITE;
 800222a:	2300      	movs	r3, #0
 800222c:	66bb      	str	r3, [r7, #104]	; 0x68
  pTimerCfg.DeadTimeInsertion = HRTIM_TIMDEADTIMEINSERTION_DISABLED;
 800222e:	2300      	movs	r3, #0
 8002230:	66fb      	str	r3, [r7, #108]	; 0x6c
  pTimerCfg.DelayedProtectionMode = HRTIM_TIMER_A_B_C_DELAYEDPROTECTION_DISABLED;
 8002232:	2300      	movs	r3, #0
 8002234:	673b      	str	r3, [r7, #112]	; 0x70
  pTimerCfg.UpdateTrigger = HRTIM_TIMUPDATETRIGGER_NONE;
 8002236:	2300      	movs	r3, #0
 8002238:	677b      	str	r3, [r7, #116]	; 0x74
  pTimerCfg.ResetTrigger = HRTIM_TIMRESETTRIGGER_NONE;
 800223a:	2300      	movs	r3, #0
 800223c:	67bb      	str	r3, [r7, #120]	; 0x78
  pTimerCfg.ResetUpdate = HRTIM_TIMUPDATEONRESET_DISABLED;
 800223e:	2300      	movs	r3, #0
 8002240:	67fb      	str	r3, [r7, #124]	; 0x7c
  if (HAL_HRTIM_WaveformTimerConfig(&hhrtim, HRTIM_TIMERINDEX_TIMER_A, &pTimerCfg) != HAL_OK)
 8002242:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8002246:	461a      	mov	r2, r3
 8002248:	2100      	movs	r1, #0
 800224a:	486c      	ldr	r0, [pc, #432]	; (80023fc <MX_HRTIM_Init+0x29c>)
 800224c:	f005 fb9e 	bl	800798c <HAL_HRTIM_WaveformTimerConfig>
 8002250:	4603      	mov	r3, r0
 8002252:	2b00      	cmp	r3, #0
 8002254:	d001      	beq.n	800225a <MX_HRTIM_Init+0xfa>
  {
    Error_Handler();
 8002256:	f000 fc69 	bl	8002b2c <Error_Handler>
  }
  pTimerCfg.InterruptRequests = HRTIM_TIM_IT_CMP2|HRTIM_TIM_IT_CMP3;
 800225a:	2306      	movs	r3, #6
 800225c:	62fb      	str	r3, [r7, #44]	; 0x2c
  pTimerCfg.DelayedProtectionMode = HRTIM_TIMER_D_E_DELAYEDPROTECTION_DISABLED;
 800225e:	2300      	movs	r3, #0
 8002260:	673b      	str	r3, [r7, #112]	; 0x70
  if (HAL_HRTIM_WaveformTimerConfig(&hhrtim, HRTIM_TIMERINDEX_TIMER_E, &pTimerCfg) != HAL_OK)
 8002262:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8002266:	461a      	mov	r2, r3
 8002268:	2104      	movs	r1, #4
 800226a:	4864      	ldr	r0, [pc, #400]	; (80023fc <MX_HRTIM_Init+0x29c>)
 800226c:	f005 fb8e 	bl	800798c <HAL_HRTIM_WaveformTimerConfig>
 8002270:	4603      	mov	r3, r0
 8002272:	2b00      	cmp	r3, #0
 8002274:	d001      	beq.n	800227a <MX_HRTIM_Init+0x11a>
  {
    Error_Handler();
 8002276:	f000 fc59 	bl	8002b2c <Error_Handler>
  }
  pCompareCfg.CompareValue = PUMP_WIDTH;
 800227a:	f240 631b 	movw	r3, #1563	; 0x61b
 800227e:	623b      	str	r3, [r7, #32]
  if (HAL_HRTIM_WaveformCompareConfig(&hhrtim, HRTIM_TIMERINDEX_TIMER_A, HRTIM_COMPAREUNIT_1, &pCompareCfg) != HAL_OK)
 8002280:	f107 0320 	add.w	r3, r7, #32
 8002284:	2201      	movs	r2, #1
 8002286:	2100      	movs	r1, #0
 8002288:	485c      	ldr	r0, [pc, #368]	; (80023fc <MX_HRTIM_Init+0x29c>)
 800228a:	f005 fbf1 	bl	8007a70 <HAL_HRTIM_WaveformCompareConfig>
 800228e:	4603      	mov	r3, r0
 8002290:	2b00      	cmp	r3, #0
 8002292:	d001      	beq.n	8002298 <MX_HRTIM_Init+0x138>
  {
    Error_Handler();
 8002294:	f000 fc4a 	bl	8002b2c <Error_Handler>
  }
  pCompareCfg.CompareValue = PUMP_WIDTH+(2*MICROWAVE_DELAY)+(2*MICROWAVE_WIDTH)+RAMSEY_TIME;
 8002298:	f244 5395 	movw	r3, #17813	; 0x4595
 800229c:	623b      	str	r3, [r7, #32]
  pCompareCfg.AutoDelayedMode = HRTIM_AUTODELAYEDMODE_REGULAR;
 800229e:	2300      	movs	r3, #0
 80022a0:	627b      	str	r3, [r7, #36]	; 0x24
  pCompareCfg.AutoDelayedTimeout = 0x0000;
 80022a2:	2300      	movs	r3, #0
 80022a4:	62bb      	str	r3, [r7, #40]	; 0x28

  if (HAL_HRTIM_WaveformCompareConfig(&hhrtim, HRTIM_TIMERINDEX_TIMER_A, HRTIM_COMPAREUNIT_2, &pCompareCfg) != HAL_OK)
 80022a6:	f107 0320 	add.w	r3, r7, #32
 80022aa:	2202      	movs	r2, #2
 80022ac:	2100      	movs	r1, #0
 80022ae:	4853      	ldr	r0, [pc, #332]	; (80023fc <MX_HRTIM_Init+0x29c>)
 80022b0:	f005 fbde 	bl	8007a70 <HAL_HRTIM_WaveformCompareConfig>
 80022b4:	4603      	mov	r3, r0
 80022b6:	2b00      	cmp	r3, #0
 80022b8:	d001      	beq.n	80022be <MX_HRTIM_Init+0x15e>
  {
    Error_Handler();
 80022ba:	f000 fc37 	bl	8002b2c <Error_Handler>
  }
  pCompareCfg.CompareValue = PUMP_WIDTH+MICROWAVE_DELAY+MICROWAVE_WIDTH;
 80022be:	f640 536e 	movw	r3, #3438	; 0xd6e
 80022c2:	623b      	str	r3, [r7, #32]

  if (HAL_HRTIM_WaveformCompareConfig(&hhrtim, HRTIM_TIMERINDEX_TIMER_E, HRTIM_COMPAREUNIT_2, &pCompareCfg) != HAL_OK)
 80022c4:	f107 0320 	add.w	r3, r7, #32
 80022c8:	2202      	movs	r2, #2
 80022ca:	2104      	movs	r1, #4
 80022cc:	484b      	ldr	r0, [pc, #300]	; (80023fc <MX_HRTIM_Init+0x29c>)
 80022ce:	f005 fbcf 	bl	8007a70 <HAL_HRTIM_WaveformCompareConfig>
 80022d2:	4603      	mov	r3, r0
 80022d4:	2b00      	cmp	r3, #0
 80022d6:	d001      	beq.n	80022dc <MX_HRTIM_Init+0x17c>
  {
    Error_Handler();
 80022d8:	f000 fc28 	bl	8002b2c <Error_Handler>
  }
  pCompareCfg.CompareValue = PUMP_WIDTH+(2*MICROWAVE_DELAY)+(2*MICROWAVE_WIDTH)+RAMSEY_TIME+PROBE_WIDTH;
 80022dc:	f644 0306 	movw	r3, #18438	; 0x4806
 80022e0:	623b      	str	r3, [r7, #32]
  if (HAL_HRTIM_WaveformCompareConfig(&hhrtim, HRTIM_TIMERINDEX_TIMER_A, HRTIM_COMPAREUNIT_3, &pCompareCfg) != HAL_OK)
 80022e2:	f107 0320 	add.w	r3, r7, #32
 80022e6:	2204      	movs	r2, #4
 80022e8:	2100      	movs	r1, #0
 80022ea:	4844      	ldr	r0, [pc, #272]	; (80023fc <MX_HRTIM_Init+0x29c>)
 80022ec:	f005 fbc0 	bl	8007a70 <HAL_HRTIM_WaveformCompareConfig>
 80022f0:	4603      	mov	r3, r0
 80022f2:	2b00      	cmp	r3, #0
 80022f4:	d001      	beq.n	80022fa <MX_HRTIM_Init+0x19a>
  {
    Error_Handler();
 80022f6:	f000 fc19 	bl	8002b2c <Error_Handler>
  }
  pCompareCfg.CompareValue = PUMP_WIDTH+MICROWAVE_DELAY+MICROWAVE_WIDTH+RAMSEY_TIME+MICROWAVE_WIDTH;
 80022fa:	f244 435d 	movw	r3, #17501	; 0x445d
 80022fe:	623b      	str	r3, [r7, #32]

  if (HAL_HRTIM_WaveformCompareConfig(&hhrtim, HRTIM_TIMERINDEX_TIMER_E, HRTIM_COMPAREUNIT_4, &pCompareCfg) != HAL_OK)
 8002300:	f107 0320 	add.w	r3, r7, #32
 8002304:	2208      	movs	r2, #8
 8002306:	2104      	movs	r1, #4
 8002308:	483c      	ldr	r0, [pc, #240]	; (80023fc <MX_HRTIM_Init+0x29c>)
 800230a:	f005 fbb1 	bl	8007a70 <HAL_HRTIM_WaveformCompareConfig>
 800230e:	4603      	mov	r3, r0
 8002310:	2b00      	cmp	r3, #0
 8002312:	d001      	beq.n	8002318 <MX_HRTIM_Init+0x1b8>
  {
    Error_Handler();
 8002314:	f000 fc0a 	bl	8002b2c <Error_Handler>
  }
  pOutputCfg.Polarity = HRTIM_OUTPUTPOLARITY_LOW;
 8002318:	2302      	movs	r3, #2
 800231a:	603b      	str	r3, [r7, #0]
  pOutputCfg.SetSource = HRTIM_OUTPUTSET_TIMCMP1|HRTIM_OUTPUTSET_TIMCMP3;
 800231c:	2328      	movs	r3, #40	; 0x28
 800231e:	607b      	str	r3, [r7, #4]
  pOutputCfg.ResetSource = HRTIM_OUTPUTRESET_TIMCMP2|HRTIM_OUTPUTRESET_TIMPER;
 8002320:	2314      	movs	r3, #20
 8002322:	60bb      	str	r3, [r7, #8]
  pOutputCfg.IdleMode = HRTIM_OUTPUTIDLEMODE_NONE;
 8002324:	2300      	movs	r3, #0
 8002326:	60fb      	str	r3, [r7, #12]
  pOutputCfg.IdleLevel = HRTIM_OUTPUTIDLELEVEL_ACTIVE;
 8002328:	2308      	movs	r3, #8
 800232a:	613b      	str	r3, [r7, #16]
  pOutputCfg.FaultLevel = HRTIM_OUTPUTFAULTLEVEL_NONE;
 800232c:	2300      	movs	r3, #0
 800232e:	617b      	str	r3, [r7, #20]
  pOutputCfg.ChopperModeEnable = HRTIM_OUTPUTCHOPPERMODE_DISABLED;
 8002330:	2300      	movs	r3, #0
 8002332:	61bb      	str	r3, [r7, #24]
  pOutputCfg.BurstModeEntryDelayed = HRTIM_OUTPUTBURSTMODEENTRY_REGULAR;
 8002334:	2300      	movs	r3, #0
 8002336:	61fb      	str	r3, [r7, #28]
  if (HAL_HRTIM_WaveformOutputConfig(&hhrtim, HRTIM_TIMERINDEX_TIMER_A, HRTIM_OUTPUT_TA1, &pOutputCfg) != HAL_OK)
 8002338:	463b      	mov	r3, r7
 800233a:	2201      	movs	r2, #1
 800233c:	2100      	movs	r1, #0
 800233e:	482f      	ldr	r0, [pc, #188]	; (80023fc <MX_HRTIM_Init+0x29c>)
 8002340:	f005 fd04 	bl	8007d4c <HAL_HRTIM_WaveformOutputConfig>
 8002344:	4603      	mov	r3, r0
 8002346:	2b00      	cmp	r3, #0
 8002348:	d001      	beq.n	800234e <MX_HRTIM_Init+0x1ee>
  {
    Error_Handler();
 800234a:	f000 fbef 	bl	8002b2c <Error_Handler>
  }
  pOutputCfg.Polarity = HRTIM_OUTPUTPOLARITY_HIGH;
 800234e:	2300      	movs	r3, #0
 8002350:	603b      	str	r3, [r7, #0]
  pOutputCfg.ResetSource = HRTIM_OUTPUTRESET_TIMCMP2|HRTIM_OUTPUTRESET_TIMCMP4;
 8002352:	2350      	movs	r3, #80	; 0x50
 8002354:	60bb      	str	r3, [r7, #8]
  pOutputCfg.IdleLevel = HRTIM_OUTPUTIDLELEVEL_INACTIVE;
 8002356:	2300      	movs	r3, #0
 8002358:	613b      	str	r3, [r7, #16]
  if (HAL_HRTIM_WaveformOutputConfig(&hhrtim, HRTIM_TIMERINDEX_TIMER_E, HRTIM_OUTPUT_TE1, &pOutputCfg) != HAL_OK)
 800235a:	463b      	mov	r3, r7
 800235c:	f44f 7280 	mov.w	r2, #256	; 0x100
 8002360:	2104      	movs	r1, #4
 8002362:	4826      	ldr	r0, [pc, #152]	; (80023fc <MX_HRTIM_Init+0x29c>)
 8002364:	f005 fcf2 	bl	8007d4c <HAL_HRTIM_WaveformOutputConfig>
 8002368:	4603      	mov	r3, r0
 800236a:	2b00      	cmp	r3, #0
 800236c:	d001      	beq.n	8002372 <MX_HRTIM_Init+0x212>
  {
    Error_Handler();
 800236e:	f000 fbdd 	bl	8002b2c <Error_Handler>
  }
  pOutputCfg.Polarity = HRTIM_OUTPUTPOLARITY_LOW;
 8002372:	2302      	movs	r3, #2
 8002374:	603b      	str	r3, [r7, #0]
  pOutputCfg.SetSource = HRTIM_OUTPUTSET_TIMCMP3;
 8002376:	2320      	movs	r3, #32
 8002378:	607b      	str	r3, [r7, #4]
  pOutputCfg.ResetSource = HRTIM_OUTPUTRESET_TIMCMP2;
 800237a:	2310      	movs	r3, #16
 800237c:	60bb      	str	r3, [r7, #8]
  pOutputCfg.IdleLevel = HRTIM_OUTPUTIDLELEVEL_ACTIVE;
 800237e:	2308      	movs	r3, #8
 8002380:	613b      	str	r3, [r7, #16]
  if (HAL_HRTIM_WaveformOutputConfig(&hhrtim, HRTIM_TIMERINDEX_TIMER_A, HRTIM_OUTPUT_TA2, &pOutputCfg) != HAL_OK)
 8002382:	463b      	mov	r3, r7
 8002384:	2202      	movs	r2, #2
 8002386:	2100      	movs	r1, #0
 8002388:	481c      	ldr	r0, [pc, #112]	; (80023fc <MX_HRTIM_Init+0x29c>)
 800238a:	f005 fcdf 	bl	8007d4c <HAL_HRTIM_WaveformOutputConfig>
 800238e:	4603      	mov	r3, r0
 8002390:	2b00      	cmp	r3, #0
 8002392:	d001      	beq.n	8002398 <MX_HRTIM_Init+0x238>
  {
    Error_Handler();
 8002394:	f000 fbca 	bl	8002b2c <Error_Handler>
  }
  if (HAL_HRTIM_TimeBaseConfig(&hhrtim, HRTIM_TIMERINDEX_TIMER_E, &pTimeBaseCfg) != HAL_OK)
 8002398:	f107 0380 	add.w	r3, r7, #128	; 0x80
 800239c:	461a      	mov	r2, r3
 800239e:	2104      	movs	r1, #4
 80023a0:	4816      	ldr	r0, [pc, #88]	; (80023fc <MX_HRTIM_Init+0x29c>)
 80023a2:	f005 facb 	bl	800793c <HAL_HRTIM_TimeBaseConfig>
 80023a6:	4603      	mov	r3, r0
 80023a8:	2b00      	cmp	r3, #0
 80023aa:	d001      	beq.n	80023b0 <MX_HRTIM_Init+0x250>
  {
    Error_Handler();
 80023ac:	f000 fbbe 	bl	8002b2c <Error_Handler>
  }
  pCompareCfg.CompareValue = PUMP_WIDTH+MICROWAVE_DELAY;
 80023b0:	f240 7353 	movw	r3, #1875	; 0x753
 80023b4:	623b      	str	r3, [r7, #32]
  if (HAL_HRTIM_WaveformCompareConfig(&hhrtim, HRTIM_TIMERINDEX_TIMER_E, HRTIM_COMPAREUNIT_1, &pCompareCfg) != HAL_OK)
 80023b6:	f107 0320 	add.w	r3, r7, #32
 80023ba:	2201      	movs	r2, #1
 80023bc:	2104      	movs	r1, #4
 80023be:	480f      	ldr	r0, [pc, #60]	; (80023fc <MX_HRTIM_Init+0x29c>)
 80023c0:	f005 fb56 	bl	8007a70 <HAL_HRTIM_WaveformCompareConfig>
 80023c4:	4603      	mov	r3, r0
 80023c6:	2b00      	cmp	r3, #0
 80023c8:	d001      	beq.n	80023ce <MX_HRTIM_Init+0x26e>
  {
    Error_Handler();
 80023ca:	f000 fbaf 	bl	8002b2c <Error_Handler>
  }
  pCompareCfg.CompareValue = PUMP_WIDTH+MICROWAVE_DELAY+MICROWAVE_WIDTH+RAMSEY_TIME;
 80023ce:	f643 6342 	movw	r3, #15938	; 0x3e42
 80023d2:	623b      	str	r3, [r7, #32]
  if (HAL_HRTIM_WaveformCompareConfig(&hhrtim, HRTIM_TIMERINDEX_TIMER_E, HRTIM_COMPAREUNIT_3, &pCompareCfg) != HAL_OK)
 80023d4:	f107 0320 	add.w	r3, r7, #32
 80023d8:	2204      	movs	r2, #4
 80023da:	2104      	movs	r1, #4
 80023dc:	4807      	ldr	r0, [pc, #28]	; (80023fc <MX_HRTIM_Init+0x29c>)
 80023de:	f005 fb47 	bl	8007a70 <HAL_HRTIM_WaveformCompareConfig>
 80023e2:	4603      	mov	r3, r0
 80023e4:	2b00      	cmp	r3, #0
 80023e6:	d001      	beq.n	80023ec <MX_HRTIM_Init+0x28c>
  {
    Error_Handler();
 80023e8:	f000 fba0 	bl	8002b2c <Error_Handler>
  }
  /* USER CODE BEGIN HRTIM_Init 2 */

  /* USER CODE END HRTIM_Init 2 */
  HAL_HRTIM_MspPostInit(&hhrtim);
 80023ec:	4803      	ldr	r0, [pc, #12]	; (80023fc <MX_HRTIM_Init+0x29c>)
 80023ee:	f000 fcdf 	bl	8002db0 <HAL_HRTIM_MspPostInit>

}
 80023f2:	bf00      	nop
 80023f4:	3790      	adds	r7, #144	; 0x90
 80023f6:	46bd      	mov	sp, r7
 80023f8:	bd80      	pop	{r7, pc}
 80023fa:	bf00      	nop
 80023fc:	200002c4 	.word	0x200002c4
 8002400:	40017400 	.word	0x40017400

08002404 <MX_LPTIM1_Init>:
  * @brief LPTIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_LPTIM1_Init(void)
{
 8002404:	b580      	push	{r7, lr}
 8002406:	af00      	add	r7, sp, #0
  /* USER CODE END LPTIM1_Init 0 */

  /* USER CODE BEGIN LPTIM1_Init 1 */

  /* USER CODE END LPTIM1_Init 1 */
  hlptim1.Instance = LPTIM1;
 8002408:	4b13      	ldr	r3, [pc, #76]	; (8002458 <MX_LPTIM1_Init+0x54>)
 800240a:	4a14      	ldr	r2, [pc, #80]	; (800245c <MX_LPTIM1_Init+0x58>)
 800240c:	601a      	str	r2, [r3, #0]
  hlptim1.Init.Clock.Source = LPTIM_CLOCKSOURCE_APBCLOCK_LPOSC;
 800240e:	4b12      	ldr	r3, [pc, #72]	; (8002458 <MX_LPTIM1_Init+0x54>)
 8002410:	2200      	movs	r2, #0
 8002412:	605a      	str	r2, [r3, #4]
  hlptim1.Init.Clock.Prescaler = LPTIM_PRESCALER_DIV32;
 8002414:	4b10      	ldr	r3, [pc, #64]	; (8002458 <MX_LPTIM1_Init+0x54>)
 8002416:	f44f 6220 	mov.w	r2, #2560	; 0xa00
 800241a:	609a      	str	r2, [r3, #8]
  hlptim1.Init.Trigger.Source = LPTIM_TRIGSOURCE_SOFTWARE;
 800241c:	4b0e      	ldr	r3, [pc, #56]	; (8002458 <MX_LPTIM1_Init+0x54>)
 800241e:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8002422:	615a      	str	r2, [r3, #20]
  hlptim1.Init.OutputPolarity = LPTIM_OUTPUTPOLARITY_HIGH;
 8002424:	4b0c      	ldr	r3, [pc, #48]	; (8002458 <MX_LPTIM1_Init+0x54>)
 8002426:	2200      	movs	r2, #0
 8002428:	621a      	str	r2, [r3, #32]
  hlptim1.Init.UpdateMode = LPTIM_UPDATE_IMMEDIATE;
 800242a:	4b0b      	ldr	r3, [pc, #44]	; (8002458 <MX_LPTIM1_Init+0x54>)
 800242c:	2200      	movs	r2, #0
 800242e:	625a      	str	r2, [r3, #36]	; 0x24
  hlptim1.Init.CounterSource = LPTIM_COUNTERSOURCE_INTERNAL;
 8002430:	4b09      	ldr	r3, [pc, #36]	; (8002458 <MX_LPTIM1_Init+0x54>)
 8002432:	2200      	movs	r2, #0
 8002434:	629a      	str	r2, [r3, #40]	; 0x28
  hlptim1.Init.Input1Source = LPTIM_INPUT1SOURCE_GPIO;
 8002436:	4b08      	ldr	r3, [pc, #32]	; (8002458 <MX_LPTIM1_Init+0x54>)
 8002438:	2200      	movs	r2, #0
 800243a:	62da      	str	r2, [r3, #44]	; 0x2c
  hlptim1.Init.Input2Source = LPTIM_INPUT2SOURCE_GPIO;
 800243c:	4b06      	ldr	r3, [pc, #24]	; (8002458 <MX_LPTIM1_Init+0x54>)
 800243e:	2200      	movs	r2, #0
 8002440:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_LPTIM_Init(&hlptim1) != HAL_OK)
 8002442:	4805      	ldr	r0, [pc, #20]	; (8002458 <MX_LPTIM1_Init+0x54>)
 8002444:	f006 fcae 	bl	8008da4 <HAL_LPTIM_Init>
 8002448:	4603      	mov	r3, r0
 800244a:	2b00      	cmp	r3, #0
 800244c:	d001      	beq.n	8002452 <MX_LPTIM1_Init+0x4e>
  {
    Error_Handler();
 800244e:	f000 fb6d 	bl	8002b2c <Error_Handler>
  }
  /* USER CODE BEGIN LPTIM1_Init 2 */

  /* USER CODE END LPTIM1_Init 2 */

}
 8002452:	bf00      	nop
 8002454:	bd80      	pop	{r7, pc}
 8002456:	bf00      	nop
 8002458:	200003a0 	.word	0x200003a0
 800245c:	40002400 	.word	0x40002400

08002460 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8002460:	b580      	push	{r7, lr}
 8002462:	b088      	sub	sp, #32
 8002464:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8002466:	f107 0310 	add.w	r3, r7, #16
 800246a:	2200      	movs	r2, #0
 800246c:	601a      	str	r2, [r3, #0]
 800246e:	605a      	str	r2, [r3, #4]
 8002470:	609a      	str	r2, [r3, #8]
 8002472:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002474:	1d3b      	adds	r3, r7, #4
 8002476:	2200      	movs	r2, #0
 8002478:	601a      	str	r2, [r3, #0]
 800247a:	605a      	str	r2, [r3, #4]
 800247c:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 800247e:	4b20      	ldr	r3, [pc, #128]	; (8002500 <MX_TIM1_Init+0xa0>)
 8002480:	4a20      	ldr	r2, [pc, #128]	; (8002504 <MX_TIM1_Init+0xa4>)
 8002482:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 1249;
 8002484:	4b1e      	ldr	r3, [pc, #120]	; (8002500 <MX_TIM1_Init+0xa0>)
 8002486:	f240 42e1 	movw	r2, #1249	; 0x4e1
 800248a:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 800248c:	4b1c      	ldr	r3, [pc, #112]	; (8002500 <MX_TIM1_Init+0xa0>)
 800248e:	2200      	movs	r2, #0
 8002490:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 65535;
 8002492:	4b1b      	ldr	r3, [pc, #108]	; (8002500 <MX_TIM1_Init+0xa0>)
 8002494:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8002498:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800249a:	4b19      	ldr	r3, [pc, #100]	; (8002500 <MX_TIM1_Init+0xa0>)
 800249c:	2200      	movs	r2, #0
 800249e:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 80024a0:	4b17      	ldr	r3, [pc, #92]	; (8002500 <MX_TIM1_Init+0xa0>)
 80024a2:	2200      	movs	r2, #0
 80024a4:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80024a6:	4b16      	ldr	r3, [pc, #88]	; (8002500 <MX_TIM1_Init+0xa0>)
 80024a8:	2200      	movs	r2, #0
 80024aa:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 80024ac:	4814      	ldr	r0, [pc, #80]	; (8002500 <MX_TIM1_Init+0xa0>)
 80024ae:	f00a fe27 	bl	800d100 <HAL_TIM_Base_Init>
 80024b2:	4603      	mov	r3, r0
 80024b4:	2b00      	cmp	r3, #0
 80024b6:	d001      	beq.n	80024bc <MX_TIM1_Init+0x5c>
  {
    Error_Handler();
 80024b8:	f000 fb38 	bl	8002b2c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80024bc:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80024c0:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 80024c2:	f107 0310 	add.w	r3, r7, #16
 80024c6:	4619      	mov	r1, r3
 80024c8:	480d      	ldr	r0, [pc, #52]	; (8002500 <MX_TIM1_Init+0xa0>)
 80024ca:	f00a fe71 	bl	800d1b0 <HAL_TIM_ConfigClockSource>
 80024ce:	4603      	mov	r3, r0
 80024d0:	2b00      	cmp	r3, #0
 80024d2:	d001      	beq.n	80024d8 <MX_TIM1_Init+0x78>
  {
    Error_Handler();
 80024d4:	f000 fb2a 	bl	8002b2c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80024d8:	2300      	movs	r3, #0
 80024da:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 80024dc:	2300      	movs	r3, #0
 80024de:	60bb      	str	r3, [r7, #8]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80024e0:	2300      	movs	r3, #0
 80024e2:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 80024e4:	1d3b      	adds	r3, r7, #4
 80024e6:	4619      	mov	r1, r3
 80024e8:	4805      	ldr	r0, [pc, #20]	; (8002500 <MX_TIM1_Init+0xa0>)
 80024ea:	f00b f891 	bl	800d610 <HAL_TIMEx_MasterConfigSynchronization>
 80024ee:	4603      	mov	r3, r0
 80024f0:	2b00      	cmp	r3, #0
 80024f2:	d001      	beq.n	80024f8 <MX_TIM1_Init+0x98>
  {
    Error_Handler();
 80024f4:	f000 fb1a 	bl	8002b2c <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */

}
 80024f8:	bf00      	nop
 80024fa:	3720      	adds	r7, #32
 80024fc:	46bd      	mov	sp, r7
 80024fe:	bd80      	pop	{r7, pc}
 8002500:	200003d8 	.word	0x200003d8
 8002504:	40010000 	.word	0x40010000

08002508 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8002508:	b580      	push	{r7, lr}
 800250a:	b088      	sub	sp, #32
 800250c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800250e:	f107 0310 	add.w	r3, r7, #16
 8002512:	2200      	movs	r2, #0
 8002514:	601a      	str	r2, [r3, #0]
 8002516:	605a      	str	r2, [r3, #4]
 8002518:	609a      	str	r2, [r3, #8]
 800251a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800251c:	1d3b      	adds	r3, r7, #4
 800251e:	2200      	movs	r2, #0
 8002520:	601a      	str	r2, [r3, #0]
 8002522:	605a      	str	r2, [r3, #4]
 8002524:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8002526:	4b1e      	ldr	r3, [pc, #120]	; (80025a0 <MX_TIM2_Init+0x98>)
 8002528:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 800252c:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 124;
 800252e:	4b1c      	ldr	r3, [pc, #112]	; (80025a0 <MX_TIM2_Init+0x98>)
 8002530:	227c      	movs	r2, #124	; 0x7c
 8002532:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002534:	4b1a      	ldr	r3, [pc, #104]	; (80025a0 <MX_TIM2_Init+0x98>)
 8002536:	2200      	movs	r2, #0
 8002538:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 4294967295;
 800253a:	4b19      	ldr	r3, [pc, #100]	; (80025a0 <MX_TIM2_Init+0x98>)
 800253c:	f04f 32ff 	mov.w	r2, #4294967295
 8002540:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002542:	4b17      	ldr	r3, [pc, #92]	; (80025a0 <MX_TIM2_Init+0x98>)
 8002544:	2200      	movs	r2, #0
 8002546:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002548:	4b15      	ldr	r3, [pc, #84]	; (80025a0 <MX_TIM2_Init+0x98>)
 800254a:	2200      	movs	r2, #0
 800254c:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 800254e:	4814      	ldr	r0, [pc, #80]	; (80025a0 <MX_TIM2_Init+0x98>)
 8002550:	f00a fdd6 	bl	800d100 <HAL_TIM_Base_Init>
 8002554:	4603      	mov	r3, r0
 8002556:	2b00      	cmp	r3, #0
 8002558:	d001      	beq.n	800255e <MX_TIM2_Init+0x56>
  {
    Error_Handler();
 800255a:	f000 fae7 	bl	8002b2c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800255e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002562:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8002564:	f107 0310 	add.w	r3, r7, #16
 8002568:	4619      	mov	r1, r3
 800256a:	480d      	ldr	r0, [pc, #52]	; (80025a0 <MX_TIM2_Init+0x98>)
 800256c:	f00a fe20 	bl	800d1b0 <HAL_TIM_ConfigClockSource>
 8002570:	4603      	mov	r3, r0
 8002572:	2b00      	cmp	r3, #0
 8002574:	d001      	beq.n	800257a <MX_TIM2_Init+0x72>
  {
    Error_Handler();
 8002576:	f000 fad9 	bl	8002b2c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800257a:	2300      	movs	r3, #0
 800257c:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800257e:	2300      	movs	r3, #0
 8002580:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8002582:	1d3b      	adds	r3, r7, #4
 8002584:	4619      	mov	r1, r3
 8002586:	4806      	ldr	r0, [pc, #24]	; (80025a0 <MX_TIM2_Init+0x98>)
 8002588:	f00b f842 	bl	800d610 <HAL_TIMEx_MasterConfigSynchronization>
 800258c:	4603      	mov	r3, r0
 800258e:	2b00      	cmp	r3, #0
 8002590:	d001      	beq.n	8002596 <MX_TIM2_Init+0x8e>
  {
    Error_Handler();
 8002592:	f000 facb 	bl	8002b2c <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8002596:	bf00      	nop
 8002598:	3720      	adds	r7, #32
 800259a:	46bd      	mov	sp, r7
 800259c:	bd80      	pop	{r7, pc}
 800259e:	bf00      	nop
 80025a0:	20000424 	.word	0x20000424

080025a4 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 80025a4:	b580      	push	{r7, lr}
 80025a6:	b088      	sub	sp, #32
 80025a8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80025aa:	f107 0310 	add.w	r3, r7, #16
 80025ae:	2200      	movs	r2, #0
 80025b0:	601a      	str	r2, [r3, #0]
 80025b2:	605a      	str	r2, [r3, #4]
 80025b4:	609a      	str	r2, [r3, #8]
 80025b6:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80025b8:	1d3b      	adds	r3, r7, #4
 80025ba:	2200      	movs	r2, #0
 80025bc:	601a      	str	r2, [r3, #0]
 80025be:	605a      	str	r2, [r3, #4]
 80025c0:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 80025c2:	4b1d      	ldr	r3, [pc, #116]	; (8002638 <MX_TIM3_Init+0x94>)
 80025c4:	4a1d      	ldr	r2, [pc, #116]	; (800263c <MX_TIM3_Init+0x98>)
 80025c6:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 124;
 80025c8:	4b1b      	ldr	r3, [pc, #108]	; (8002638 <MX_TIM3_Init+0x94>)
 80025ca:	227c      	movs	r2, #124	; 0x7c
 80025cc:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 80025ce:	4b1a      	ldr	r3, [pc, #104]	; (8002638 <MX_TIM3_Init+0x94>)
 80025d0:	2200      	movs	r2, #0
 80025d2:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 65535;
 80025d4:	4b18      	ldr	r3, [pc, #96]	; (8002638 <MX_TIM3_Init+0x94>)
 80025d6:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80025da:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80025dc:	4b16      	ldr	r3, [pc, #88]	; (8002638 <MX_TIM3_Init+0x94>)
 80025de:	2200      	movs	r2, #0
 80025e0:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80025e2:	4b15      	ldr	r3, [pc, #84]	; (8002638 <MX_TIM3_Init+0x94>)
 80025e4:	2200      	movs	r2, #0
 80025e6:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 80025e8:	4813      	ldr	r0, [pc, #76]	; (8002638 <MX_TIM3_Init+0x94>)
 80025ea:	f00a fd89 	bl	800d100 <HAL_TIM_Base_Init>
 80025ee:	4603      	mov	r3, r0
 80025f0:	2b00      	cmp	r3, #0
 80025f2:	d001      	beq.n	80025f8 <MX_TIM3_Init+0x54>
  {
    Error_Handler();
 80025f4:	f000 fa9a 	bl	8002b2c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80025f8:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80025fc:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 80025fe:	f107 0310 	add.w	r3, r7, #16
 8002602:	4619      	mov	r1, r3
 8002604:	480c      	ldr	r0, [pc, #48]	; (8002638 <MX_TIM3_Init+0x94>)
 8002606:	f00a fdd3 	bl	800d1b0 <HAL_TIM_ConfigClockSource>
 800260a:	4603      	mov	r3, r0
 800260c:	2b00      	cmp	r3, #0
 800260e:	d001      	beq.n	8002614 <MX_TIM3_Init+0x70>
  {
    Error_Handler();
 8002610:	f000 fa8c 	bl	8002b2c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002614:	2300      	movs	r3, #0
 8002616:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002618:	2300      	movs	r3, #0
 800261a:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 800261c:	1d3b      	adds	r3, r7, #4
 800261e:	4619      	mov	r1, r3
 8002620:	4805      	ldr	r0, [pc, #20]	; (8002638 <MX_TIM3_Init+0x94>)
 8002622:	f00a fff5 	bl	800d610 <HAL_TIMEx_MasterConfigSynchronization>
 8002626:	4603      	mov	r3, r0
 8002628:	2b00      	cmp	r3, #0
 800262a:	d001      	beq.n	8002630 <MX_TIM3_Init+0x8c>
  {
    Error_Handler();
 800262c:	f000 fa7e 	bl	8002b2c <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 8002630:	bf00      	nop
 8002632:	3720      	adds	r7, #32
 8002634:	46bd      	mov	sp, r7
 8002636:	bd80      	pop	{r7, pc}
 8002638:	20000470 	.word	0x20000470
 800263c:	40000400 	.word	0x40000400

08002640 <MX_TIM5_Init>:
  * @brief TIM5 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM5_Init(void)
{
 8002640:	b580      	push	{r7, lr}
 8002642:	b088      	sub	sp, #32
 8002644:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM5_Init 0 */

  /* USER CODE END TIM5_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8002646:	f107 0310 	add.w	r3, r7, #16
 800264a:	2200      	movs	r2, #0
 800264c:	601a      	str	r2, [r3, #0]
 800264e:	605a      	str	r2, [r3, #4]
 8002650:	609a      	str	r2, [r3, #8]
 8002652:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002654:	1d3b      	adds	r3, r7, #4
 8002656:	2200      	movs	r2, #0
 8002658:	601a      	str	r2, [r3, #0]
 800265a:	605a      	str	r2, [r3, #4]
 800265c:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM5_Init 1 */

  /* USER CODE END TIM5_Init 1 */
  htim5.Instance = TIM5;
 800265e:	4b1d      	ldr	r3, [pc, #116]	; (80026d4 <MX_TIM5_Init+0x94>)
 8002660:	4a1d      	ldr	r2, [pc, #116]	; (80026d8 <MX_TIM5_Init+0x98>)
 8002662:	601a      	str	r2, [r3, #0]
  htim5.Init.Prescaler = 124;
 8002664:	4b1b      	ldr	r3, [pc, #108]	; (80026d4 <MX_TIM5_Init+0x94>)
 8002666:	227c      	movs	r2, #124	; 0x7c
 8002668:	605a      	str	r2, [r3, #4]
  htim5.Init.CounterMode = TIM_COUNTERMODE_UP;
 800266a:	4b1a      	ldr	r3, [pc, #104]	; (80026d4 <MX_TIM5_Init+0x94>)
 800266c:	2200      	movs	r2, #0
 800266e:	609a      	str	r2, [r3, #8]
  htim5.Init.Period = 4294967295;
 8002670:	4b18      	ldr	r3, [pc, #96]	; (80026d4 <MX_TIM5_Init+0x94>)
 8002672:	f04f 32ff 	mov.w	r2, #4294967295
 8002676:	60da      	str	r2, [r3, #12]
  htim5.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002678:	4b16      	ldr	r3, [pc, #88]	; (80026d4 <MX_TIM5_Init+0x94>)
 800267a:	2200      	movs	r2, #0
 800267c:	611a      	str	r2, [r3, #16]
  htim5.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800267e:	4b15      	ldr	r3, [pc, #84]	; (80026d4 <MX_TIM5_Init+0x94>)
 8002680:	2200      	movs	r2, #0
 8002682:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim5) != HAL_OK)
 8002684:	4813      	ldr	r0, [pc, #76]	; (80026d4 <MX_TIM5_Init+0x94>)
 8002686:	f00a fd3b 	bl	800d100 <HAL_TIM_Base_Init>
 800268a:	4603      	mov	r3, r0
 800268c:	2b00      	cmp	r3, #0
 800268e:	d001      	beq.n	8002694 <MX_TIM5_Init+0x54>
  {
    Error_Handler();
 8002690:	f000 fa4c 	bl	8002b2c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8002694:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002698:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim5, &sClockSourceConfig) != HAL_OK)
 800269a:	f107 0310 	add.w	r3, r7, #16
 800269e:	4619      	mov	r1, r3
 80026a0:	480c      	ldr	r0, [pc, #48]	; (80026d4 <MX_TIM5_Init+0x94>)
 80026a2:	f00a fd85 	bl	800d1b0 <HAL_TIM_ConfigClockSource>
 80026a6:	4603      	mov	r3, r0
 80026a8:	2b00      	cmp	r3, #0
 80026aa:	d001      	beq.n	80026b0 <MX_TIM5_Init+0x70>
  {
    Error_Handler();
 80026ac:	f000 fa3e 	bl	8002b2c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80026b0:	2300      	movs	r3, #0
 80026b2:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80026b4:	2300      	movs	r3, #0
 80026b6:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim5, &sMasterConfig) != HAL_OK)
 80026b8:	1d3b      	adds	r3, r7, #4
 80026ba:	4619      	mov	r1, r3
 80026bc:	4805      	ldr	r0, [pc, #20]	; (80026d4 <MX_TIM5_Init+0x94>)
 80026be:	f00a ffa7 	bl	800d610 <HAL_TIMEx_MasterConfigSynchronization>
 80026c2:	4603      	mov	r3, r0
 80026c4:	2b00      	cmp	r3, #0
 80026c6:	d001      	beq.n	80026cc <MX_TIM5_Init+0x8c>
  {
    Error_Handler();
 80026c8:	f000 fa30 	bl	8002b2c <Error_Handler>
  }
  /* USER CODE BEGIN TIM5_Init 2 */

  /* USER CODE END TIM5_Init 2 */

}
 80026cc:	bf00      	nop
 80026ce:	3720      	adds	r7, #32
 80026d0:	46bd      	mov	sp, r7
 80026d2:	bd80      	pop	{r7, pc}
 80026d4:	200004bc 	.word	0x200004bc
 80026d8:	40000c00 	.word	0x40000c00

080026dc <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 80026dc:	b580      	push	{r7, lr}
 80026de:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 80026e0:	4b22      	ldr	r3, [pc, #136]	; (800276c <MX_USART3_UART_Init+0x90>)
 80026e2:	4a23      	ldr	r2, [pc, #140]	; (8002770 <MX_USART3_UART_Init+0x94>)
 80026e4:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 1000000;
 80026e6:	4b21      	ldr	r3, [pc, #132]	; (800276c <MX_USART3_UART_Init+0x90>)
 80026e8:	4a22      	ldr	r2, [pc, #136]	; (8002774 <MX_USART3_UART_Init+0x98>)
 80026ea:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 80026ec:	4b1f      	ldr	r3, [pc, #124]	; (800276c <MX_USART3_UART_Init+0x90>)
 80026ee:	2200      	movs	r2, #0
 80026f0:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 80026f2:	4b1e      	ldr	r3, [pc, #120]	; (800276c <MX_USART3_UART_Init+0x90>)
 80026f4:	2200      	movs	r2, #0
 80026f6:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 80026f8:	4b1c      	ldr	r3, [pc, #112]	; (800276c <MX_USART3_UART_Init+0x90>)
 80026fa:	2200      	movs	r2, #0
 80026fc:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 80026fe:	4b1b      	ldr	r3, [pc, #108]	; (800276c <MX_USART3_UART_Init+0x90>)
 8002700:	220c      	movs	r2, #12
 8002702:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8002704:	4b19      	ldr	r3, [pc, #100]	; (800276c <MX_USART3_UART_Init+0x90>)
 8002706:	2200      	movs	r2, #0
 8002708:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 800270a:	4b18      	ldr	r3, [pc, #96]	; (800276c <MX_USART3_UART_Init+0x90>)
 800270c:	2200      	movs	r2, #0
 800270e:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8002710:	4b16      	ldr	r3, [pc, #88]	; (800276c <MX_USART3_UART_Init+0x90>)
 8002712:	2200      	movs	r2, #0
 8002714:	621a      	str	r2, [r3, #32]
  huart3.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8002716:	4b15      	ldr	r3, [pc, #84]	; (800276c <MX_USART3_UART_Init+0x90>)
 8002718:	2200      	movs	r2, #0
 800271a:	625a      	str	r2, [r3, #36]	; 0x24
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 800271c:	4b13      	ldr	r3, [pc, #76]	; (800276c <MX_USART3_UART_Init+0x90>)
 800271e:	2200      	movs	r2, #0
 8002720:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8002722:	4812      	ldr	r0, [pc, #72]	; (800276c <MX_USART3_UART_Init+0x90>)
 8002724:	f00b f802 	bl	800d72c <HAL_UART_Init>
 8002728:	4603      	mov	r3, r0
 800272a:	2b00      	cmp	r3, #0
 800272c:	d001      	beq.n	8002732 <MX_USART3_UART_Init+0x56>
  {
    Error_Handler();
 800272e:	f000 f9fd 	bl	8002b2c <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart3, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8002732:	2100      	movs	r1, #0
 8002734:	480d      	ldr	r0, [pc, #52]	; (800276c <MX_USART3_UART_Init+0x90>)
 8002736:	f00c f892 	bl	800e85e <HAL_UARTEx_SetTxFifoThreshold>
 800273a:	4603      	mov	r3, r0
 800273c:	2b00      	cmp	r3, #0
 800273e:	d001      	beq.n	8002744 <MX_USART3_UART_Init+0x68>
  {
    Error_Handler();
 8002740:	f000 f9f4 	bl	8002b2c <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart3, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8002744:	2100      	movs	r1, #0
 8002746:	4809      	ldr	r0, [pc, #36]	; (800276c <MX_USART3_UART_Init+0x90>)
 8002748:	f00c f8c7 	bl	800e8da <HAL_UARTEx_SetRxFifoThreshold>
 800274c:	4603      	mov	r3, r0
 800274e:	2b00      	cmp	r3, #0
 8002750:	d001      	beq.n	8002756 <MX_USART3_UART_Init+0x7a>
  {
    Error_Handler();
 8002752:	f000 f9eb 	bl	8002b2c <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart3) != HAL_OK)
 8002756:	4805      	ldr	r0, [pc, #20]	; (800276c <MX_USART3_UART_Init+0x90>)
 8002758:	f00c f848 	bl	800e7ec <HAL_UARTEx_DisableFifoMode>
 800275c:	4603      	mov	r3, r0
 800275e:	2b00      	cmp	r3, #0
 8002760:	d001      	beq.n	8002766 <MX_USART3_UART_Init+0x8a>
  {
    Error_Handler();
 8002762:	f000 f9e3 	bl	8002b2c <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8002766:	bf00      	nop
 8002768:	bd80      	pop	{r7, pc}
 800276a:	bf00      	nop
 800276c:	20000508 	.word	0x20000508
 8002770:	40004800 	.word	0x40004800
 8002774:	000f4240 	.word	0x000f4240

08002778 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8002778:	b580      	push	{r7, lr}
 800277a:	b08e      	sub	sp, #56	; 0x38
 800277c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800277e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002782:	2200      	movs	r2, #0
 8002784:	601a      	str	r2, [r3, #0]
 8002786:	605a      	str	r2, [r3, #4]
 8002788:	609a      	str	r2, [r3, #8]
 800278a:	60da      	str	r2, [r3, #12]
 800278c:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 800278e:	4ba0      	ldr	r3, [pc, #640]	; (8002a10 <MX_GPIO_Init+0x298>)
 8002790:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002794:	4a9e      	ldr	r2, [pc, #632]	; (8002a10 <MX_GPIO_Init+0x298>)
 8002796:	f043 0310 	orr.w	r3, r3, #16
 800279a:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800279e:	4b9c      	ldr	r3, [pc, #624]	; (8002a10 <MX_GPIO_Init+0x298>)
 80027a0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80027a4:	f003 0310 	and.w	r3, r3, #16
 80027a8:	623b      	str	r3, [r7, #32]
 80027aa:	6a3b      	ldr	r3, [r7, #32]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80027ac:	4b98      	ldr	r3, [pc, #608]	; (8002a10 <MX_GPIO_Init+0x298>)
 80027ae:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80027b2:	4a97      	ldr	r2, [pc, #604]	; (8002a10 <MX_GPIO_Init+0x298>)
 80027b4:	f043 0304 	orr.w	r3, r3, #4
 80027b8:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80027bc:	4b94      	ldr	r3, [pc, #592]	; (8002a10 <MX_GPIO_Init+0x298>)
 80027be:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80027c2:	f003 0304 	and.w	r3, r3, #4
 80027c6:	61fb      	str	r3, [r7, #28]
 80027c8:	69fb      	ldr	r3, [r7, #28]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80027ca:	4b91      	ldr	r3, [pc, #580]	; (8002a10 <MX_GPIO_Init+0x298>)
 80027cc:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80027d0:	4a8f      	ldr	r2, [pc, #572]	; (8002a10 <MX_GPIO_Init+0x298>)
 80027d2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80027d6:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80027da:	4b8d      	ldr	r3, [pc, #564]	; (8002a10 <MX_GPIO_Init+0x298>)
 80027dc:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80027e0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80027e4:	61bb      	str	r3, [r7, #24]
 80027e6:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80027e8:	4b89      	ldr	r3, [pc, #548]	; (8002a10 <MX_GPIO_Init+0x298>)
 80027ea:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80027ee:	4a88      	ldr	r2, [pc, #544]	; (8002a10 <MX_GPIO_Init+0x298>)
 80027f0:	f043 0301 	orr.w	r3, r3, #1
 80027f4:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80027f8:	4b85      	ldr	r3, [pc, #532]	; (8002a10 <MX_GPIO_Init+0x298>)
 80027fa:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80027fe:	f003 0301 	and.w	r3, r3, #1
 8002802:	617b      	str	r3, [r7, #20]
 8002804:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8002806:	4b82      	ldr	r3, [pc, #520]	; (8002a10 <MX_GPIO_Init+0x298>)
 8002808:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800280c:	4a80      	ldr	r2, [pc, #512]	; (8002a10 <MX_GPIO_Init+0x298>)
 800280e:	f043 0302 	orr.w	r3, r3, #2
 8002812:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8002816:	4b7e      	ldr	r3, [pc, #504]	; (8002a10 <MX_GPIO_Init+0x298>)
 8002818:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800281c:	f003 0302 	and.w	r3, r3, #2
 8002820:	613b      	str	r3, [r7, #16]
 8002822:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8002824:	4b7a      	ldr	r3, [pc, #488]	; (8002a10 <MX_GPIO_Init+0x298>)
 8002826:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800282a:	4a79      	ldr	r2, [pc, #484]	; (8002a10 <MX_GPIO_Init+0x298>)
 800282c:	f043 0320 	orr.w	r3, r3, #32
 8002830:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8002834:	4b76      	ldr	r3, [pc, #472]	; (8002a10 <MX_GPIO_Init+0x298>)
 8002836:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800283a:	f003 0320 	and.w	r3, r3, #32
 800283e:	60fb      	str	r3, [r7, #12]
 8002840:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8002842:	4b73      	ldr	r3, [pc, #460]	; (8002a10 <MX_GPIO_Init+0x298>)
 8002844:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002848:	4a71      	ldr	r2, [pc, #452]	; (8002a10 <MX_GPIO_Init+0x298>)
 800284a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800284e:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8002852:	4b6f      	ldr	r3, [pc, #444]	; (8002a10 <MX_GPIO_Init+0x298>)
 8002854:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002858:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800285c:	60bb      	str	r3, [r7, #8]
 800285e:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8002860:	4b6b      	ldr	r3, [pc, #428]	; (8002a10 <MX_GPIO_Init+0x298>)
 8002862:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002866:	4a6a      	ldr	r2, [pc, #424]	; (8002a10 <MX_GPIO_Init+0x298>)
 8002868:	f043 0308 	orr.w	r3, r3, #8
 800286c:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8002870:	4b67      	ldr	r3, [pc, #412]	; (8002a10 <MX_GPIO_Init+0x298>)
 8002872:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002876:	f003 0308 	and.w	r3, r3, #8
 800287a:	607b      	str	r3, [r7, #4]
 800287c:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, ATT_4_Pin|ATT_8_Pin|ATT_16_Pin, GPIO_PIN_SET);
 800287e:	2201      	movs	r2, #1
 8002880:	2134      	movs	r1, #52	; 0x34
 8002882:	4864      	ldr	r0, [pc, #400]	; (8002a14 <MX_GPIO_Init+0x29c>)
 8002884:	f004 ff32 	bl	80076ec <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LD1_Pin|MW_INVALID_Pin|LASER_TUNING_Pin|LD3_Pin
 8002888:	2200      	movs	r2, #0
 800288a:	f245 1103 	movw	r1, #20739	; 0x5103
 800288e:	4862      	ldr	r0, [pc, #392]	; (8002a18 <MX_GPIO_Init+0x2a0>)
 8002890:	f004 ff2c 	bl	80076ec <HAL_GPIO_WritePin>
                          |SPARE_OUT_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(SCOPE_TRIG_OUT_GPIO_Port, SCOPE_TRIG_OUT_Pin, GPIO_PIN_RESET);
 8002894:	2200      	movs	r2, #0
 8002896:	2101      	movs	r1, #1
 8002898:	4860      	ldr	r0, [pc, #384]	; (8002a1c <MX_GPIO_Init+0x2a4>)
 800289a:	f004 ff27 	bl	80076ec <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(USB_OTG_FS_PWR_EN_GPIO_Port, USB_OTG_FS_PWR_EN_Pin, GPIO_PIN_RESET);
 800289e:	2200      	movs	r2, #0
 80028a0:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80028a4:	485e      	ldr	r0, [pc, #376]	; (8002a20 <MX_GPIO_Init+0x2a8>)
 80028a6:	f004 ff21 	bl	80076ec <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, SCLK_Pin|MOSI_Pin|REG_EN_Pin, GPIO_PIN_RESET);
 80028aa:	2200      	movs	r2, #0
 80028ac:	f44f 5198 	mov.w	r1, #4864	; 0x1300
 80028b0:	485c      	ldr	r0, [pc, #368]	; (8002a24 <MX_GPIO_Init+0x2ac>)
 80028b2:	f004 ff1b 	bl	80076ec <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(SEN_GPIO_Port, SEN_Pin, GPIO_PIN_SET);
 80028b6:	2201      	movs	r2, #1
 80028b8:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80028bc:	4859      	ldr	r0, [pc, #356]	; (8002a24 <MX_GPIO_Init+0x2ac>)
 80028be:	f004 ff15 	bl	80076ec <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, ATT_2_Pin|ATT_1_Pin|ATT_05_Pin|ATT_025_Pin
 80028c2:	2201      	movs	r2, #1
 80028c4:	21f8      	movs	r1, #248	; 0xf8
 80028c6:	4856      	ldr	r0, [pc, #344]	; (8002a20 <MX_GPIO_Init+0x2a8>)
 80028c8:	f004 ff10 	bl	80076ec <HAL_GPIO_WritePin>
                          |ATT_LE_Pin, GPIO_PIN_SET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 80028cc:	2200      	movs	r2, #0
 80028ce:	2102      	movs	r1, #2
 80028d0:	4850      	ldr	r0, [pc, #320]	; (8002a14 <MX_GPIO_Init+0x29c>)
 80028d2:	f004 ff0b 	bl	80076ec <HAL_GPIO_WritePin>

  /*Configure GPIO pins : ATT_4_Pin ATT_8_Pin ATT_16_Pin LD2_Pin */
  GPIO_InitStruct.Pin = ATT_4_Pin|ATT_8_Pin|ATT_16_Pin|LD2_Pin;
 80028d6:	2336      	movs	r3, #54	; 0x36
 80028d8:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80028da:	2301      	movs	r3, #1
 80028dc:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80028de:	2300      	movs	r3, #0
 80028e0:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80028e2:	2300      	movs	r3, #0
 80028e4:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80028e6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80028ea:	4619      	mov	r1, r3
 80028ec:	4849      	ldr	r0, [pc, #292]	; (8002a14 <MX_GPIO_Init+0x29c>)
 80028ee:	f004 fd35 	bl	800735c <HAL_GPIO_Init>

  /*Configure GPIO pin : BLUE_BUTTON_Pin */
  GPIO_InitStruct.Pin = BLUE_BUTTON_Pin;
 80028f2:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80028f6:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80028f8:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 80028fc:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80028fe:	2300      	movs	r3, #0
 8002900:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(BLUE_BUTTON_GPIO_Port, &GPIO_InitStruct);
 8002902:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002906:	4619      	mov	r1, r3
 8002908:	4846      	ldr	r0, [pc, #280]	; (8002a24 <MX_GPIO_Init+0x2ac>)
 800290a:	f004 fd27 	bl	800735c <HAL_GPIO_Init>

  /*Configure GPIO pins : LD1_Pin MW_INVALID_Pin LASER_TUNING_Pin LD3_Pin
                           SPARE_OUT_Pin */
  GPIO_InitStruct.Pin = LD1_Pin|MW_INVALID_Pin|LASER_TUNING_Pin|LD3_Pin
 800290e:	f245 1303 	movw	r3, #20739	; 0x5103
 8002912:	627b      	str	r3, [r7, #36]	; 0x24
                          |SPARE_OUT_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002914:	2301      	movs	r3, #1
 8002916:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002918:	2300      	movs	r3, #0
 800291a:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800291c:	2300      	movs	r3, #0
 800291e:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002920:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002924:	4619      	mov	r1, r3
 8002926:	483c      	ldr	r0, [pc, #240]	; (8002a18 <MX_GPIO_Init+0x2a0>)
 8002928:	f004 fd18 	bl	800735c <HAL_GPIO_Init>

  /*Configure GPIO pin : PF11 */
  GPIO_InitStruct.Pin = GPIO_PIN_11;
 800292c:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8002930:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8002932:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8002936:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002938:	2300      	movs	r3, #0
 800293a:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 800293c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002940:	4619      	mov	r1, r3
 8002942:	4839      	ldr	r0, [pc, #228]	; (8002a28 <MX_GPIO_Init+0x2b0>)
 8002944:	f004 fd0a 	bl	800735c <HAL_GPIO_Init>

  /*Configure GPIO pin : SCOPE_TRIG_OUT_Pin */
  GPIO_InitStruct.Pin = SCOPE_TRIG_OUT_Pin;
 8002948:	2301      	movs	r3, #1
 800294a:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800294c:	2301      	movs	r3, #1
 800294e:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002950:	2300      	movs	r3, #0
 8002952:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002954:	2300      	movs	r3, #0
 8002956:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(SCOPE_TRIG_OUT_GPIO_Port, &GPIO_InitStruct);
 8002958:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800295c:	4619      	mov	r1, r3
 800295e:	482f      	ldr	r0, [pc, #188]	; (8002a1c <MX_GPIO_Init+0x2a4>)
 8002960:	f004 fcfc 	bl	800735c <HAL_GPIO_Init>

  /*Configure GPIO pins : USB_OTG_FS_PWR_EN_Pin ATT_2_Pin ATT_1_Pin ATT_05_Pin
                           ATT_025_Pin ATT_LE_Pin */
  GPIO_InitStruct.Pin = USB_OTG_FS_PWR_EN_Pin|ATT_2_Pin|ATT_1_Pin|ATT_05_Pin
 8002964:	f44f 639f 	mov.w	r3, #1272	; 0x4f8
 8002968:	627b      	str	r3, [r7, #36]	; 0x24
                          |ATT_025_Pin|ATT_LE_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800296a:	2301      	movs	r3, #1
 800296c:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800296e:	2300      	movs	r3, #0
 8002970:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002972:	2300      	movs	r3, #0
 8002974:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8002976:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800297a:	4619      	mov	r1, r3
 800297c:	4828      	ldr	r0, [pc, #160]	; (8002a20 <MX_GPIO_Init+0x2a8>)
 800297e:	f004 fced 	bl	800735c <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_OTG_FS_OVCR_Pin */
  GPIO_InitStruct.Pin = USB_OTG_FS_OVCR_Pin;
 8002982:	2380      	movs	r3, #128	; 0x80
 8002984:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8002986:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 800298a:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800298c:	2300      	movs	r3, #0
 800298e:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(USB_OTG_FS_OVCR_GPIO_Port, &GPIO_InitStruct);
 8002990:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002994:	4619      	mov	r1, r3
 8002996:	4821      	ldr	r0, [pc, #132]	; (8002a1c <MX_GPIO_Init+0x2a4>)
 8002998:	f004 fce0 	bl	800735c <HAL_GPIO_Init>

  /*Configure GPIO pins : SCLK_Pin MOSI_Pin SEN_Pin REG_EN_Pin */
  GPIO_InitStruct.Pin = SCLK_Pin|MOSI_Pin|SEN_Pin|REG_EN_Pin;
 800299c:	f44f 53d8 	mov.w	r3, #6912	; 0x1b00
 80029a0:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80029a2:	2301      	movs	r3, #1
 80029a4:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 80029a6:	2302      	movs	r3, #2
 80029a8:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80029aa:	2300      	movs	r3, #0
 80029ac:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80029ae:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80029b2:	4619      	mov	r1, r3
 80029b4:	481b      	ldr	r0, [pc, #108]	; (8002a24 <MX_GPIO_Init+0x2ac>)
 80029b6:	f004 fcd1 	bl	800735c <HAL_GPIO_Init>

  /*Configure GPIO pins : PA8 PA11 PA12 */
  GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_11|GPIO_PIN_12;
 80029ba:	f44f 53c8 	mov.w	r3, #6400	; 0x1900
 80029be:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80029c0:	2302      	movs	r3, #2
 80029c2:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80029c4:	2300      	movs	r3, #0
 80029c6:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80029c8:	2300      	movs	r3, #0
 80029ca:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG1_FS;
 80029cc:	230a      	movs	r3, #10
 80029ce:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80029d0:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80029d4:	4619      	mov	r1, r3
 80029d6:	4815      	ldr	r0, [pc, #84]	; (8002a2c <MX_GPIO_Init+0x2b4>)
 80029d8:	f004 fcc0 	bl	800735c <HAL_GPIO_Init>

  /*Configure GPIO pin : MISO_Pin */
  GPIO_InitStruct.Pin = MISO_Pin;
 80029dc:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80029e0:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80029e2:	2300      	movs	r3, #0
 80029e4:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80029e6:	2300      	movs	r3, #0
 80029e8:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(MISO_GPIO_Port, &GPIO_InitStruct);
 80029ea:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80029ee:	4619      	mov	r1, r3
 80029f0:	480c      	ldr	r0, [pc, #48]	; (8002a24 <MX_GPIO_Init+0x2ac>)
 80029f2:	f004 fcb3 	bl	800735c <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 80029f6:	2200      	movs	r2, #0
 80029f8:	2100      	movs	r1, #0
 80029fa:	2028      	movs	r0, #40	; 0x28
 80029fc:	f002 fe65 	bl	80056ca <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8002a00:	2028      	movs	r0, #40	; 0x28
 8002a02:	f002 fe7c 	bl	80056fe <HAL_NVIC_EnableIRQ>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8002a06:	bf00      	nop
 8002a08:	3738      	adds	r7, #56	; 0x38
 8002a0a:	46bd      	mov	sp, r7
 8002a0c:	bd80      	pop	{r7, pc}
 8002a0e:	bf00      	nop
 8002a10:	58024400 	.word	0x58024400
 8002a14:	58021000 	.word	0x58021000
 8002a18:	58020400 	.word	0x58020400
 8002a1c:	58021800 	.word	0x58021800
 8002a20:	58020c00 	.word	0x58020c00
 8002a24:	58020800 	.word	0x58020800
 8002a28:	58021400 	.word	0x58021400
 8002a2c:	58020000 	.word	0x58020000

08002a30 <HAL_ADC_ConvCpltCallback>:

/* USER CODE BEGIN 4 */

void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef *hadc)
{
 8002a30:	b580      	push	{r7, lr}
 8002a32:	b082      	sub	sp, #8
 8002a34:	af00      	add	r7, sp, #0
 8002a36:	6078      	str	r0, [r7, #4]
  adc_val = HAL_ADC_GetValue(&hadc3);
 8002a38:	480e      	ldr	r0, [pc, #56]	; (8002a74 <HAL_ADC_ConvCpltCallback+0x44>)
 8002a3a:	f001 fd01 	bl	8004440 <HAL_ADC_GetValue>
 8002a3e:	4603      	mov	r3, r0
 8002a40:	4a0d      	ldr	r2, [pc, #52]	; (8002a78 <HAL_ADC_ConvCpltCallback+0x48>)
 8002a42:	6013      	str	r3, [r2, #0]
  //printf("ADC value: %lu \r\n", adc_val);
  dac_val = adc_val >> 4;
 8002a44:	4b0c      	ldr	r3, [pc, #48]	; (8002a78 <HAL_ADC_ConvCpltCallback+0x48>)
 8002a46:	681b      	ldr	r3, [r3, #0]
 8002a48:	091b      	lsrs	r3, r3, #4
 8002a4a:	4a0c      	ldr	r2, [pc, #48]	; (8002a7c <HAL_ADC_ConvCpltCallback+0x4c>)
 8002a4c:	6013      	str	r3, [r2, #0]
  sample_count++;
 8002a4e:	4b0c      	ldr	r3, [pc, #48]	; (8002a80 <HAL_ADC_ConvCpltCallback+0x50>)
 8002a50:	881b      	ldrh	r3, [r3, #0]
 8002a52:	b29b      	uxth	r3, r3
 8002a54:	3301      	adds	r3, #1
 8002a56:	b29a      	uxth	r2, r3
 8002a58:	4b09      	ldr	r3, [pc, #36]	; (8002a80 <HAL_ADC_ConvCpltCallback+0x50>)
 8002a5a:	801a      	strh	r2, [r3, #0]
	  printf("ADC reading: %lu, max: %lu, min: %lu \r\n", adc_val, adc_max, adc_min);
  }
  //printf("ADC reading: %lu, max: %lu, min: %lu \r\n", adc_val, adc_max, adc_min);
#endif //QUANTIFY_ADC_NOISE
  //printf("ADC value: %lu, DAC value: %lu \r\n", adc_val, dac_val);
  HAL_DAC_SetValue(&hdac1, DAC_CHANNEL_1, DAC_ALIGN_12B_R, dac_val);
 8002a5c:	4b07      	ldr	r3, [pc, #28]	; (8002a7c <HAL_ADC_ConvCpltCallback+0x4c>)
 8002a5e:	681b      	ldr	r3, [r3, #0]
 8002a60:	2200      	movs	r2, #0
 8002a62:	2100      	movs	r1, #0
 8002a64:	4807      	ldr	r0, [pc, #28]	; (8002a84 <HAL_ADC_ConvCpltCallback+0x54>)
 8002a66:	f002 ff55 	bl	8005914 <HAL_DAC_SetValue>
  //HAL_DAC_SetValue(&hdac1, DAC_CHANNEL_1, DAC_ALIGN_12B_R, 2048);
}
 8002a6a:	bf00      	nop
 8002a6c:	3708      	adds	r7, #8
 8002a6e:	46bd      	mov	sp, r7
 8002a70:	bd80      	pop	{r7, pc}
 8002a72:	bf00      	nop
 8002a74:	2000024c 	.word	0x2000024c
 8002a78:	200005a4 	.word	0x200005a4
 8002a7c:	200005a8 	.word	0x200005a8
 8002a80:	2000059e 	.word	0x2000059e
 8002a84:	200002b0 	.word	0x200002b0

08002a88 <MPU_Config>:
/* USER CODE END 4 */

/* MPU Configuration */

void MPU_Config(void)
{
 8002a88:	b580      	push	{r7, lr}
 8002a8a:	b084      	sub	sp, #16
 8002a8c:	af00      	add	r7, sp, #0
  MPU_Region_InitTypeDef MPU_InitStruct = {0};
 8002a8e:	463b      	mov	r3, r7
 8002a90:	2200      	movs	r2, #0
 8002a92:	601a      	str	r2, [r3, #0]
 8002a94:	605a      	str	r2, [r3, #4]
 8002a96:	609a      	str	r2, [r3, #8]
 8002a98:	60da      	str	r2, [r3, #12]

  /* Disables the MPU */
  HAL_MPU_Disable();
 8002a9a:	f002 fe4b 	bl	8005734 <HAL_MPU_Disable>

  /** Initializes and configures the Region and the memory to be protected
  */
  MPU_InitStruct.Enable = MPU_REGION_ENABLE;
 8002a9e:	2301      	movs	r3, #1
 8002aa0:	703b      	strb	r3, [r7, #0]
  MPU_InitStruct.Number = MPU_REGION_NUMBER0;
 8002aa2:	2300      	movs	r3, #0
 8002aa4:	707b      	strb	r3, [r7, #1]
  MPU_InitStruct.BaseAddress = 0x0;
 8002aa6:	2300      	movs	r3, #0
 8002aa8:	607b      	str	r3, [r7, #4]
  MPU_InitStruct.Size = MPU_REGION_SIZE_4GB;
 8002aaa:	231f      	movs	r3, #31
 8002aac:	723b      	strb	r3, [r7, #8]
  MPU_InitStruct.SubRegionDisable = 0x87;
 8002aae:	2387      	movs	r3, #135	; 0x87
 8002ab0:	727b      	strb	r3, [r7, #9]
  MPU_InitStruct.TypeExtField = MPU_TEX_LEVEL0;
 8002ab2:	2300      	movs	r3, #0
 8002ab4:	72bb      	strb	r3, [r7, #10]
  MPU_InitStruct.AccessPermission = MPU_REGION_NO_ACCESS;
 8002ab6:	2300      	movs	r3, #0
 8002ab8:	72fb      	strb	r3, [r7, #11]
  MPU_InitStruct.DisableExec = MPU_INSTRUCTION_ACCESS_DISABLE;
 8002aba:	2301      	movs	r3, #1
 8002abc:	733b      	strb	r3, [r7, #12]
  MPU_InitStruct.IsShareable = MPU_ACCESS_SHAREABLE;
 8002abe:	2301      	movs	r3, #1
 8002ac0:	737b      	strb	r3, [r7, #13]
  MPU_InitStruct.IsCacheable = MPU_ACCESS_NOT_CACHEABLE;
 8002ac2:	2300      	movs	r3, #0
 8002ac4:	73bb      	strb	r3, [r7, #14]
  MPU_InitStruct.IsBufferable = MPU_ACCESS_NOT_BUFFERABLE;
 8002ac6:	2300      	movs	r3, #0
 8002ac8:	73fb      	strb	r3, [r7, #15]

  HAL_MPU_ConfigRegion(&MPU_InitStruct);
 8002aca:	463b      	mov	r3, r7
 8002acc:	4618      	mov	r0, r3
 8002ace:	f002 fe69 	bl	80057a4 <HAL_MPU_ConfigRegion>

  /** Initializes and configures the Region and the memory to be protected
  */
  MPU_InitStruct.Number = MPU_REGION_NUMBER1;
 8002ad2:	2301      	movs	r3, #1
 8002ad4:	707b      	strb	r3, [r7, #1]
  MPU_InitStruct.BaseAddress = 0x30020000;
 8002ad6:	4b13      	ldr	r3, [pc, #76]	; (8002b24 <MPU_Config+0x9c>)
 8002ad8:	607b      	str	r3, [r7, #4]
  MPU_InitStruct.Size = MPU_REGION_SIZE_128KB;
 8002ada:	2310      	movs	r3, #16
 8002adc:	723b      	strb	r3, [r7, #8]
  MPU_InitStruct.SubRegionDisable = 0x0;
 8002ade:	2300      	movs	r3, #0
 8002ae0:	727b      	strb	r3, [r7, #9]
  MPU_InitStruct.TypeExtField = MPU_TEX_LEVEL1;
 8002ae2:	2301      	movs	r3, #1
 8002ae4:	72bb      	strb	r3, [r7, #10]
  MPU_InitStruct.AccessPermission = MPU_REGION_FULL_ACCESS;
 8002ae6:	2303      	movs	r3, #3
 8002ae8:	72fb      	strb	r3, [r7, #11]
  MPU_InitStruct.IsShareable = MPU_ACCESS_NOT_SHAREABLE;
 8002aea:	2300      	movs	r3, #0
 8002aec:	737b      	strb	r3, [r7, #13]

  HAL_MPU_ConfigRegion(&MPU_InitStruct);
 8002aee:	463b      	mov	r3, r7
 8002af0:	4618      	mov	r0, r3
 8002af2:	f002 fe57 	bl	80057a4 <HAL_MPU_ConfigRegion>

  /** Initializes and configures the Region and the memory to be protected
  */
  MPU_InitStruct.Number = MPU_REGION_NUMBER2;
 8002af6:	2302      	movs	r3, #2
 8002af8:	707b      	strb	r3, [r7, #1]
  MPU_InitStruct.BaseAddress = 0x30040000;
 8002afa:	4b0b      	ldr	r3, [pc, #44]	; (8002b28 <MPU_Config+0xa0>)
 8002afc:	607b      	str	r3, [r7, #4]
  MPU_InitStruct.Size = MPU_REGION_SIZE_512B;
 8002afe:	2308      	movs	r3, #8
 8002b00:	723b      	strb	r3, [r7, #8]
  MPU_InitStruct.TypeExtField = MPU_TEX_LEVEL0;
 8002b02:	2300      	movs	r3, #0
 8002b04:	72bb      	strb	r3, [r7, #10]
  MPU_InitStruct.IsShareable = MPU_ACCESS_SHAREABLE;
 8002b06:	2301      	movs	r3, #1
 8002b08:	737b      	strb	r3, [r7, #13]
  MPU_InitStruct.IsBufferable = MPU_ACCESS_BUFFERABLE;
 8002b0a:	2301      	movs	r3, #1
 8002b0c:	73fb      	strb	r3, [r7, #15]

  HAL_MPU_ConfigRegion(&MPU_InitStruct);
 8002b0e:	463b      	mov	r3, r7
 8002b10:	4618      	mov	r0, r3
 8002b12:	f002 fe47 	bl	80057a4 <HAL_MPU_ConfigRegion>
  /* Enables the MPU */
  HAL_MPU_Enable(MPU_PRIVILEGED_DEFAULT);
 8002b16:	2004      	movs	r0, #4
 8002b18:	f002 fe24 	bl	8005764 <HAL_MPU_Enable>

}
 8002b1c:	bf00      	nop
 8002b1e:	3710      	adds	r7, #16
 8002b20:	46bd      	mov	sp, r7
 8002b22:	bd80      	pop	{r7, pc}
 8002b24:	30020000 	.word	0x30020000
 8002b28:	30040000 	.word	0x30040000

08002b2c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8002b2c:	b580      	push	{r7, lr}
 8002b2e:	af00      	add	r7, sp, #0
  __ASM volatile ("cpsid i" : : : "memory");
 8002b30:	b672      	cpsid	i
}
 8002b32:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
	__disable_irq();

	printf("Error handler routine called\r\n");
 8002b34:	4810      	ldr	r0, [pc, #64]	; (8002b78 <Error_Handler+0x4c>)
 8002b36:	f016 fffd 	bl	8019b34 <puts>

	/* Disable the AOM */
	HAL_HRTIM_WaveformOutputStop(&hhrtim, HRTIM_OUTPUT_TA1 | HRTIM_OUTPUT_TA2 | HRTIM_OUTPUT_TE1);
 8002b3a:	f240 1103 	movw	r1, #259	; 0x103
 8002b3e:	480f      	ldr	r0, [pc, #60]	; (8002b7c <Error_Handler+0x50>)
 8002b40:	f005 f962 	bl	8007e08 <HAL_HRTIM_WaveformOutputStop>
	HAL_HRTIM_WaveformCounterStop_IT(&hhrtim, HRTIM_TIMERID_TIMER_A | HRTIM_TIMERID_TIMER_E);
 8002b44:	f44f 1108 	mov.w	r1, #2228224	; 0x220000
 8002b48:	480c      	ldr	r0, [pc, #48]	; (8002b7c <Error_Handler+0x50>)
 8002b4a:	f005 f9fb 	bl	8007f44 <HAL_HRTIM_WaveformCountStop_IT>

	/* Power down the synthesiser */
	HAL_GPIO_WritePin(REG_EN_GPIO_Port, REG_EN_Pin, 0);
 8002b4e:	2200      	movs	r2, #0
 8002b50:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8002b54:	480a      	ldr	r0, [pc, #40]	; (8002b80 <Error_Handler+0x54>)
 8002b56:	f004 fdc9 	bl	80076ec <HAL_GPIO_WritePin>

	while (1) {
		HAL_GPIO_TogglePin(LD3_GPIO_Port, LD3_Pin); //toggle red LED
 8002b5a:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8002b5e:	4809      	ldr	r0, [pc, #36]	; (8002b84 <Error_Handler+0x58>)
 8002b60:	f004 fddd 	bl	800771e <HAL_GPIO_TogglePin>
		timer_delay(SLOW_TIMER, ERROR_LED_DELAY);
 8002b64:	4b08      	ldr	r3, [pc, #32]	; (8002b88 <Error_Handler+0x5c>)
 8002b66:	681b      	ldr	r3, [r3, #0]
 8002b68:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8002b6c:	4611      	mov	r1, r2
 8002b6e:	4618      	mov	r0, r3
 8002b70:	f018 ff12 	bl	801b998 <__timer_delay_veneer>
		HAL_GPIO_TogglePin(LD3_GPIO_Port, LD3_Pin); //toggle red LED
 8002b74:	e7f1      	b.n	8002b5a <Error_Handler+0x2e>
 8002b76:	bf00      	nop
 8002b78:	0801bb90 	.word	0x0801bb90
 8002b7c:	200002c4 	.word	0x200002c4
 8002b80:	58020800 	.word	0x58020800
 8002b84:	58020400 	.word	0x58020400
 8002b88:	20000018 	.word	0x20000018

08002b8c <HAL_MspInit>:
void HAL_HRTIM_MspPostInit(HRTIM_HandleTypeDef *hhrtim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8002b8c:	b480      	push	{r7}
 8002b8e:	b083      	sub	sp, #12
 8002b90:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002b92:	4b0a      	ldr	r3, [pc, #40]	; (8002bbc <HAL_MspInit+0x30>)
 8002b94:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8002b98:	4a08      	ldr	r2, [pc, #32]	; (8002bbc <HAL_MspInit+0x30>)
 8002b9a:	f043 0302 	orr.w	r3, r3, #2
 8002b9e:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 8002ba2:	4b06      	ldr	r3, [pc, #24]	; (8002bbc <HAL_MspInit+0x30>)
 8002ba4:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8002ba8:	f003 0302 	and.w	r3, r3, #2
 8002bac:	607b      	str	r3, [r7, #4]
 8002bae:	687b      	ldr	r3, [r7, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8002bb0:	bf00      	nop
 8002bb2:	370c      	adds	r7, #12
 8002bb4:	46bd      	mov	sp, r7
 8002bb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bba:	4770      	bx	lr
 8002bbc:	58024400 	.word	0x58024400

08002bc0 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8002bc0:	b580      	push	{r7, lr}
 8002bc2:	b0b4      	sub	sp, #208	; 0xd0
 8002bc4:	af00      	add	r7, sp, #0
 8002bc6:	6078      	str	r0, [r7, #4]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8002bc8:	f107 0310 	add.w	r3, r7, #16
 8002bcc:	22c0      	movs	r2, #192	; 0xc0
 8002bce:	2100      	movs	r1, #0
 8002bd0:	4618      	mov	r0, r3
 8002bd2:	f017 f89f 	bl	8019d14 <memset>
  if(hadc->Instance==ADC3)
 8002bd6:	687b      	ldr	r3, [r7, #4]
 8002bd8:	681b      	ldr	r3, [r3, #0]
 8002bda:	4a2b      	ldr	r2, [pc, #172]	; (8002c88 <HAL_ADC_MspInit+0xc8>)
 8002bdc:	4293      	cmp	r3, r2
 8002bde:	d14e      	bne.n	8002c7e <HAL_ADC_MspInit+0xbe>

  /* USER CODE END ADC3_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_ADC;
 8002be0:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 8002be4:	f04f 0300 	mov.w	r3, #0
 8002be8:	e9c7 2304 	strd	r2, r3, [r7, #16]
    PeriphClkInitStruct.PLL2.PLL2M = 1;
 8002bec:	2301      	movs	r3, #1
 8002bee:	61bb      	str	r3, [r7, #24]
    PeriphClkInitStruct.PLL2.PLL2N = 19;
 8002bf0:	2313      	movs	r3, #19
 8002bf2:	61fb      	str	r3, [r7, #28]
    PeriphClkInitStruct.PLL2.PLL2P = 79;
 8002bf4:	234f      	movs	r3, #79	; 0x4f
 8002bf6:	623b      	str	r3, [r7, #32]
    PeriphClkInitStruct.PLL2.PLL2Q = 2;
 8002bf8:	2302      	movs	r3, #2
 8002bfa:	627b      	str	r3, [r7, #36]	; 0x24
    PeriphClkInitStruct.PLL2.PLL2R = 2;
 8002bfc:	2302      	movs	r3, #2
 8002bfe:	62bb      	str	r3, [r7, #40]	; 0x28
    PeriphClkInitStruct.PLL2.PLL2RGE = RCC_PLL2VCIRANGE_3;
 8002c00:	23c0      	movs	r3, #192	; 0xc0
 8002c02:	62fb      	str	r3, [r7, #44]	; 0x2c
    PeriphClkInitStruct.PLL2.PLL2VCOSEL = RCC_PLL2VCOMEDIUM;
 8002c04:	2320      	movs	r3, #32
 8002c06:	633b      	str	r3, [r7, #48]	; 0x30
    PeriphClkInitStruct.PLL2.PLL2FRACN = 0;
 8002c08:	2300      	movs	r3, #0
 8002c0a:	637b      	str	r3, [r7, #52]	; 0x34
    PeriphClkInitStruct.AdcClockSelection = RCC_ADCCLKSOURCE_PLL2;
 8002c0c:	2300      	movs	r3, #0
 8002c0e:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8002c12:	f107 0310 	add.w	r3, r7, #16
 8002c16:	4618      	mov	r0, r3
 8002c18:	f007 fd1e 	bl	800a658 <HAL_RCCEx_PeriphCLKConfig>
 8002c1c:	4603      	mov	r3, r0
 8002c1e:	2b00      	cmp	r3, #0
 8002c20:	d001      	beq.n	8002c26 <HAL_ADC_MspInit+0x66>
    {
      Error_Handler();
 8002c22:	f7ff ff83 	bl	8002b2c <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_ADC3_CLK_ENABLE();
 8002c26:	4b19      	ldr	r3, [pc, #100]	; (8002c8c <HAL_ADC_MspInit+0xcc>)
 8002c28:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002c2c:	4a17      	ldr	r2, [pc, #92]	; (8002c8c <HAL_ADC_MspInit+0xcc>)
 8002c2e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002c32:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8002c36:	4b15      	ldr	r3, [pc, #84]	; (8002c8c <HAL_ADC_MspInit+0xcc>)
 8002c38:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002c3c:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002c40:	60fb      	str	r3, [r7, #12]
 8002c42:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8002c44:	4b11      	ldr	r3, [pc, #68]	; (8002c8c <HAL_ADC_MspInit+0xcc>)
 8002c46:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002c4a:	4a10      	ldr	r2, [pc, #64]	; (8002c8c <HAL_ADC_MspInit+0xcc>)
 8002c4c:	f043 0304 	orr.w	r3, r3, #4
 8002c50:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8002c54:	4b0d      	ldr	r3, [pc, #52]	; (8002c8c <HAL_ADC_MspInit+0xcc>)
 8002c56:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002c5a:	f003 0304 	and.w	r3, r3, #4
 8002c5e:	60bb      	str	r3, [r7, #8]
 8002c60:	68bb      	ldr	r3, [r7, #8]
    /**ADC3 GPIO Configuration
    PC2_C     ------> ADC3_INP0
    */
    HAL_SYSCFG_AnalogSwitchConfig(SYSCFG_SWITCH_PC2, SYSCFG_SWITCH_PC2_OPEN);
 8002c62:	f04f 6180 	mov.w	r1, #67108864	; 0x4000000
 8002c66:	f04f 6080 	mov.w	r0, #67108864	; 0x4000000
 8002c6a:	f000 fed7 	bl	8003a1c <HAL_SYSCFG_AnalogSwitchConfig>

    /* ADC3 interrupt Init */
    HAL_NVIC_SetPriority(ADC3_IRQn, 0, 0);
 8002c6e:	2200      	movs	r2, #0
 8002c70:	2100      	movs	r1, #0
 8002c72:	207f      	movs	r0, #127	; 0x7f
 8002c74:	f002 fd29 	bl	80056ca <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ADC3_IRQn);
 8002c78:	207f      	movs	r0, #127	; 0x7f
 8002c7a:	f002 fd40 	bl	80056fe <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN ADC3_MspInit 1 */

  /* USER CODE END ADC3_MspInit 1 */
  }

}
 8002c7e:	bf00      	nop
 8002c80:	37d0      	adds	r7, #208	; 0xd0
 8002c82:	46bd      	mov	sp, r7
 8002c84:	bd80      	pop	{r7, pc}
 8002c86:	bf00      	nop
 8002c88:	58026000 	.word	0x58026000
 8002c8c:	58024400 	.word	0x58024400

08002c90 <HAL_DAC_MspInit>:
* This function configures the hardware resources used in this example
* @param hdac: DAC handle pointer
* @retval None
*/
void HAL_DAC_MspInit(DAC_HandleTypeDef* hdac)
{
 8002c90:	b580      	push	{r7, lr}
 8002c92:	b08a      	sub	sp, #40	; 0x28
 8002c94:	af00      	add	r7, sp, #0
 8002c96:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002c98:	f107 0314 	add.w	r3, r7, #20
 8002c9c:	2200      	movs	r2, #0
 8002c9e:	601a      	str	r2, [r3, #0]
 8002ca0:	605a      	str	r2, [r3, #4]
 8002ca2:	609a      	str	r2, [r3, #8]
 8002ca4:	60da      	str	r2, [r3, #12]
 8002ca6:	611a      	str	r2, [r3, #16]
  if(hdac->Instance==DAC1)
 8002ca8:	687b      	ldr	r3, [r7, #4]
 8002caa:	681b      	ldr	r3, [r3, #0]
 8002cac:	4a18      	ldr	r2, [pc, #96]	; (8002d10 <HAL_DAC_MspInit+0x80>)
 8002cae:	4293      	cmp	r3, r2
 8002cb0:	d129      	bne.n	8002d06 <HAL_DAC_MspInit+0x76>
  {
  /* USER CODE BEGIN DAC1_MspInit 0 */

  /* USER CODE END DAC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_DAC12_CLK_ENABLE();
 8002cb2:	4b18      	ldr	r3, [pc, #96]	; (8002d14 <HAL_DAC_MspInit+0x84>)
 8002cb4:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8002cb8:	4a16      	ldr	r2, [pc, #88]	; (8002d14 <HAL_DAC_MspInit+0x84>)
 8002cba:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8002cbe:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8002cc2:	4b14      	ldr	r3, [pc, #80]	; (8002d14 <HAL_DAC_MspInit+0x84>)
 8002cc4:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8002cc8:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8002ccc:	613b      	str	r3, [r7, #16]
 8002cce:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002cd0:	4b10      	ldr	r3, [pc, #64]	; (8002d14 <HAL_DAC_MspInit+0x84>)
 8002cd2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002cd6:	4a0f      	ldr	r2, [pc, #60]	; (8002d14 <HAL_DAC_MspInit+0x84>)
 8002cd8:	f043 0301 	orr.w	r3, r3, #1
 8002cdc:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8002ce0:	4b0c      	ldr	r3, [pc, #48]	; (8002d14 <HAL_DAC_MspInit+0x84>)
 8002ce2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002ce6:	f003 0301 	and.w	r3, r3, #1
 8002cea:	60fb      	str	r3, [r7, #12]
 8002cec:	68fb      	ldr	r3, [r7, #12]
    /**DAC1 GPIO Configuration
    PA4     ------> DAC1_OUT1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4;
 8002cee:	2310      	movs	r3, #16
 8002cf0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8002cf2:	2303      	movs	r3, #3
 8002cf4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002cf6:	2300      	movs	r3, #0
 8002cf8:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002cfa:	f107 0314 	add.w	r3, r7, #20
 8002cfe:	4619      	mov	r1, r3
 8002d00:	4805      	ldr	r0, [pc, #20]	; (8002d18 <HAL_DAC_MspInit+0x88>)
 8002d02:	f004 fb2b 	bl	800735c <HAL_GPIO_Init>
  /* USER CODE BEGIN DAC1_MspInit 1 */

  /* USER CODE END DAC1_MspInit 1 */
  }

}
 8002d06:	bf00      	nop
 8002d08:	3728      	adds	r7, #40	; 0x28
 8002d0a:	46bd      	mov	sp, r7
 8002d0c:	bd80      	pop	{r7, pc}
 8002d0e:	bf00      	nop
 8002d10:	40007400 	.word	0x40007400
 8002d14:	58024400 	.word	0x58024400
 8002d18:	58020000 	.word	0x58020000

08002d1c <HAL_HRTIM_MspInit>:
* This function configures the hardware resources used in this example
* @param hhrtim: HRTIM handle pointer
* @retval None
*/
void HAL_HRTIM_MspInit(HRTIM_HandleTypeDef* hhrtim)
{
 8002d1c:	b580      	push	{r7, lr}
 8002d1e:	b0b4      	sub	sp, #208	; 0xd0
 8002d20:	af00      	add	r7, sp, #0
 8002d22:	6078      	str	r0, [r7, #4]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8002d24:	f107 0310 	add.w	r3, r7, #16
 8002d28:	22c0      	movs	r2, #192	; 0xc0
 8002d2a:	2100      	movs	r1, #0
 8002d2c:	4618      	mov	r0, r3
 8002d2e:	f016 fff1 	bl	8019d14 <memset>
  if(hhrtim->Instance==HRTIM1)
 8002d32:	687b      	ldr	r3, [r7, #4]
 8002d34:	681b      	ldr	r3, [r3, #0]
 8002d36:	4a1c      	ldr	r2, [pc, #112]	; (8002da8 <HAL_HRTIM_MspInit+0x8c>)
 8002d38:	4293      	cmp	r3, r2
 8002d3a:	d131      	bne.n	8002da0 <HAL_HRTIM_MspInit+0x84>

  /* USER CODE END HRTIM1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_HRTIM1;
 8002d3c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002d40:	f04f 0300 	mov.w	r3, #0
 8002d44:	e9c7 2304 	strd	r2, r3, [r7, #16]
    PeriphClkInitStruct.Hrtim1ClockSelection = RCC_HRTIM1CLK_TIMCLK;
 8002d48:	2300      	movs	r3, #0
 8002d4a:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8002d4e:	f107 0310 	add.w	r3, r7, #16
 8002d52:	4618      	mov	r0, r3
 8002d54:	f007 fc80 	bl	800a658 <HAL_RCCEx_PeriphCLKConfig>
 8002d58:	4603      	mov	r3, r0
 8002d5a:	2b00      	cmp	r3, #0
 8002d5c:	d001      	beq.n	8002d62 <HAL_HRTIM_MspInit+0x46>
    {
      Error_Handler();
 8002d5e:	f7ff fee5 	bl	8002b2c <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_HRTIM1_CLK_ENABLE();
 8002d62:	4b12      	ldr	r3, [pc, #72]	; (8002dac <HAL_HRTIM_MspInit+0x90>)
 8002d64:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8002d68:	4a10      	ldr	r2, [pc, #64]	; (8002dac <HAL_HRTIM_MspInit+0x90>)
 8002d6a:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8002d6e:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 8002d72:	4b0e      	ldr	r3, [pc, #56]	; (8002dac <HAL_HRTIM_MspInit+0x90>)
 8002d74:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8002d78:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8002d7c:	60fb      	str	r3, [r7, #12]
 8002d7e:	68fb      	ldr	r3, [r7, #12]
    /* HRTIM1 interrupt Init */
    HAL_NVIC_SetPriority(HRTIM1_TIMA_IRQn, 0, 0);
 8002d80:	2200      	movs	r2, #0
 8002d82:	2100      	movs	r1, #0
 8002d84:	2068      	movs	r0, #104	; 0x68
 8002d86:	f002 fca0 	bl	80056ca <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(HRTIM1_TIMA_IRQn);
 8002d8a:	2068      	movs	r0, #104	; 0x68
 8002d8c:	f002 fcb7 	bl	80056fe <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(HRTIM1_TIME_IRQn, 0, 0);
 8002d90:	2200      	movs	r2, #0
 8002d92:	2100      	movs	r1, #0
 8002d94:	206c      	movs	r0, #108	; 0x6c
 8002d96:	f002 fc98 	bl	80056ca <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(HRTIM1_TIME_IRQn);
 8002d9a:	206c      	movs	r0, #108	; 0x6c
 8002d9c:	f002 fcaf 	bl	80056fe <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN HRTIM1_MspInit 1 */

  /* USER CODE END HRTIM1_MspInit 1 */
  }

}
 8002da0:	bf00      	nop
 8002da2:	37d0      	adds	r7, #208	; 0xd0
 8002da4:	46bd      	mov	sp, r7
 8002da6:	bd80      	pop	{r7, pc}
 8002da8:	40017400 	.word	0x40017400
 8002dac:	58024400 	.word	0x58024400

08002db0 <HAL_HRTIM_MspPostInit>:

void HAL_HRTIM_MspPostInit(HRTIM_HandleTypeDef* hhrtim)
{
 8002db0:	b580      	push	{r7, lr}
 8002db2:	b08a      	sub	sp, #40	; 0x28
 8002db4:	af00      	add	r7, sp, #0
 8002db6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002db8:	f107 0314 	add.w	r3, r7, #20
 8002dbc:	2200      	movs	r2, #0
 8002dbe:	601a      	str	r2, [r3, #0]
 8002dc0:	605a      	str	r2, [r3, #4]
 8002dc2:	609a      	str	r2, [r3, #8]
 8002dc4:	60da      	str	r2, [r3, #12]
 8002dc6:	611a      	str	r2, [r3, #16]
  if(hhrtim->Instance==HRTIM1)
 8002dc8:	687b      	ldr	r3, [r7, #4]
 8002dca:	681b      	ldr	r3, [r3, #0]
 8002dcc:	4a22      	ldr	r2, [pc, #136]	; (8002e58 <HAL_HRTIM_MspPostInit+0xa8>)
 8002dce:	4293      	cmp	r3, r2
 8002dd0:	d13d      	bne.n	8002e4e <HAL_HRTIM_MspPostInit+0x9e>
  {
  /* USER CODE BEGIN HRTIM1_MspPostInit 0 */

  /* USER CODE END HRTIM1_MspPostInit 0 */

    __HAL_RCC_GPIOG_CLK_ENABLE();
 8002dd2:	4b22      	ldr	r3, [pc, #136]	; (8002e5c <HAL_HRTIM_MspPostInit+0xac>)
 8002dd4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002dd8:	4a20      	ldr	r2, [pc, #128]	; (8002e5c <HAL_HRTIM_MspPostInit+0xac>)
 8002dda:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8002dde:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8002de2:	4b1e      	ldr	r3, [pc, #120]	; (8002e5c <HAL_HRTIM_MspPostInit+0xac>)
 8002de4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002de8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002dec:	613b      	str	r3, [r7, #16]
 8002dee:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8002df0:	4b1a      	ldr	r3, [pc, #104]	; (8002e5c <HAL_HRTIM_MspPostInit+0xac>)
 8002df2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002df6:	4a19      	ldr	r2, [pc, #100]	; (8002e5c <HAL_HRTIM_MspPostInit+0xac>)
 8002df8:	f043 0304 	orr.w	r3, r3, #4
 8002dfc:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8002e00:	4b16      	ldr	r3, [pc, #88]	; (8002e5c <HAL_HRTIM_MspPostInit+0xac>)
 8002e02:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002e06:	f003 0304 	and.w	r3, r3, #4
 8002e0a:	60fb      	str	r3, [r7, #12]
 8002e0c:	68fb      	ldr	r3, [r7, #12]
    /**HRTIM GPIO Configuration
    PG6     ------> HRTIM_CHE1
    PC6     ------> HRTIM_CHA1
    PC7     ------> HRTIM_CHA2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6;
 8002e0e:	2340      	movs	r3, #64	; 0x40
 8002e10:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002e12:	2302      	movs	r3, #2
 8002e14:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002e16:	2300      	movs	r3, #0
 8002e18:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002e1a:	2303      	movs	r3, #3
 8002e1c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_HRTIM1;
 8002e1e:	2302      	movs	r3, #2
 8002e20:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8002e22:	f107 0314 	add.w	r3, r7, #20
 8002e26:	4619      	mov	r1, r3
 8002e28:	480d      	ldr	r0, [pc, #52]	; (8002e60 <HAL_HRTIM_MspPostInit+0xb0>)
 8002e2a:	f004 fa97 	bl	800735c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8002e2e:	23c0      	movs	r3, #192	; 0xc0
 8002e30:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002e32:	2302      	movs	r3, #2
 8002e34:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002e36:	2300      	movs	r3, #0
 8002e38:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002e3a:	2303      	movs	r3, #3
 8002e3c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_HRTIM1;
 8002e3e:	2301      	movs	r3, #1
 8002e40:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002e42:	f107 0314 	add.w	r3, r7, #20
 8002e46:	4619      	mov	r1, r3
 8002e48:	4806      	ldr	r0, [pc, #24]	; (8002e64 <HAL_HRTIM_MspPostInit+0xb4>)
 8002e4a:	f004 fa87 	bl	800735c <HAL_GPIO_Init>
  /* USER CODE BEGIN HRTIM1_MspPostInit 1 */

  /* USER CODE END HRTIM1_MspPostInit 1 */
  }

}
 8002e4e:	bf00      	nop
 8002e50:	3728      	adds	r7, #40	; 0x28
 8002e52:	46bd      	mov	sp, r7
 8002e54:	bd80      	pop	{r7, pc}
 8002e56:	bf00      	nop
 8002e58:	40017400 	.word	0x40017400
 8002e5c:	58024400 	.word	0x58024400
 8002e60:	58021800 	.word	0x58021800
 8002e64:	58020800 	.word	0x58020800

08002e68 <HAL_LPTIM_MspInit>:
* This function configures the hardware resources used in this example
* @param hlptim: LPTIM handle pointer
* @retval None
*/
void HAL_LPTIM_MspInit(LPTIM_HandleTypeDef* hlptim)
{
 8002e68:	b580      	push	{r7, lr}
 8002e6a:	b0b4      	sub	sp, #208	; 0xd0
 8002e6c:	af00      	add	r7, sp, #0
 8002e6e:	6078      	str	r0, [r7, #4]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8002e70:	f107 0310 	add.w	r3, r7, #16
 8002e74:	22c0      	movs	r2, #192	; 0xc0
 8002e76:	2100      	movs	r1, #0
 8002e78:	4618      	mov	r0, r3
 8002e7a:	f016 ff4b 	bl	8019d14 <memset>
  if(hlptim->Instance==LPTIM1)
 8002e7e:	687b      	ldr	r3, [r7, #4]
 8002e80:	681b      	ldr	r3, [r3, #0]
 8002e82:	4a19      	ldr	r2, [pc, #100]	; (8002ee8 <HAL_LPTIM_MspInit+0x80>)
 8002e84:	4293      	cmp	r3, r2
 8002e86:	d12a      	bne.n	8002ede <HAL_LPTIM_MspInit+0x76>

  /* USER CODE END LPTIM1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_LPTIM1;
 8002e88:	f04f 0220 	mov.w	r2, #32
 8002e8c:	f04f 0300 	mov.w	r3, #0
 8002e90:	e9c7 2304 	strd	r2, r3, [r7, #16]
    PeriphClkInitStruct.Lptim1ClockSelection = RCC_LPTIM1CLKSOURCE_LSE;
 8002e94:	f04f 5340 	mov.w	r3, #805306368	; 0x30000000
 8002e98:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8002e9c:	f107 0310 	add.w	r3, r7, #16
 8002ea0:	4618      	mov	r0, r3
 8002ea2:	f007 fbd9 	bl	800a658 <HAL_RCCEx_PeriphCLKConfig>
 8002ea6:	4603      	mov	r3, r0
 8002ea8:	2b00      	cmp	r3, #0
 8002eaa:	d001      	beq.n	8002eb0 <HAL_LPTIM_MspInit+0x48>
    {
      Error_Handler();
 8002eac:	f7ff fe3e 	bl	8002b2c <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_LPTIM1_CLK_ENABLE();
 8002eb0:	4b0e      	ldr	r3, [pc, #56]	; (8002eec <HAL_LPTIM_MspInit+0x84>)
 8002eb2:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8002eb6:	4a0d      	ldr	r2, [pc, #52]	; (8002eec <HAL_LPTIM_MspInit+0x84>)
 8002eb8:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8002ebc:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8002ec0:	4b0a      	ldr	r3, [pc, #40]	; (8002eec <HAL_LPTIM_MspInit+0x84>)
 8002ec2:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8002ec6:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002eca:	60fb      	str	r3, [r7, #12]
 8002ecc:	68fb      	ldr	r3, [r7, #12]
    /* LPTIM1 interrupt Init */
    HAL_NVIC_SetPriority(LPTIM1_IRQn, 0, 0);
 8002ece:	2200      	movs	r2, #0
 8002ed0:	2100      	movs	r1, #0
 8002ed2:	205d      	movs	r0, #93	; 0x5d
 8002ed4:	f002 fbf9 	bl	80056ca <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(LPTIM1_IRQn);
 8002ed8:	205d      	movs	r0, #93	; 0x5d
 8002eda:	f002 fc10 	bl	80056fe <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN LPTIM1_MspInit 1 */

  /* USER CODE END LPTIM1_MspInit 1 */
  }

}
 8002ede:	bf00      	nop
 8002ee0:	37d0      	adds	r7, #208	; 0xd0
 8002ee2:	46bd      	mov	sp, r7
 8002ee4:	bd80      	pop	{r7, pc}
 8002ee6:	bf00      	nop
 8002ee8:	40002400 	.word	0x40002400
 8002eec:	58024400 	.word	0x58024400

08002ef0 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8002ef0:	b480      	push	{r7}
 8002ef2:	b087      	sub	sp, #28
 8002ef4:	af00      	add	r7, sp, #0
 8002ef6:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 8002ef8:	687b      	ldr	r3, [r7, #4]
 8002efa:	681b      	ldr	r3, [r3, #0]
 8002efc:	4a2b      	ldr	r2, [pc, #172]	; (8002fac <HAL_TIM_Base_MspInit+0xbc>)
 8002efe:	4293      	cmp	r3, r2
 8002f00:	d10f      	bne.n	8002f22 <HAL_TIM_Base_MspInit+0x32>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8002f02:	4b2b      	ldr	r3, [pc, #172]	; (8002fb0 <HAL_TIM_Base_MspInit+0xc0>)
 8002f04:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8002f08:	4a29      	ldr	r2, [pc, #164]	; (8002fb0 <HAL_TIM_Base_MspInit+0xc0>)
 8002f0a:	f043 0301 	orr.w	r3, r3, #1
 8002f0e:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 8002f12:	4b27      	ldr	r3, [pc, #156]	; (8002fb0 <HAL_TIM_Base_MspInit+0xc0>)
 8002f14:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8002f18:	f003 0301 	and.w	r3, r3, #1
 8002f1c:	617b      	str	r3, [r7, #20]
 8002f1e:	697b      	ldr	r3, [r7, #20]
  /* USER CODE BEGIN TIM5_MspInit 1 */

  /* USER CODE END TIM5_MspInit 1 */
  }

}
 8002f20:	e03d      	b.n	8002f9e <HAL_TIM_Base_MspInit+0xae>
  else if(htim_base->Instance==TIM2)
 8002f22:	687b      	ldr	r3, [r7, #4]
 8002f24:	681b      	ldr	r3, [r3, #0]
 8002f26:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002f2a:	d10f      	bne.n	8002f4c <HAL_TIM_Base_MspInit+0x5c>
    __HAL_RCC_TIM2_CLK_ENABLE();
 8002f2c:	4b20      	ldr	r3, [pc, #128]	; (8002fb0 <HAL_TIM_Base_MspInit+0xc0>)
 8002f2e:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8002f32:	4a1f      	ldr	r2, [pc, #124]	; (8002fb0 <HAL_TIM_Base_MspInit+0xc0>)
 8002f34:	f043 0301 	orr.w	r3, r3, #1
 8002f38:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8002f3c:	4b1c      	ldr	r3, [pc, #112]	; (8002fb0 <HAL_TIM_Base_MspInit+0xc0>)
 8002f3e:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8002f42:	f003 0301 	and.w	r3, r3, #1
 8002f46:	613b      	str	r3, [r7, #16]
 8002f48:	693b      	ldr	r3, [r7, #16]
}
 8002f4a:	e028      	b.n	8002f9e <HAL_TIM_Base_MspInit+0xae>
  else if(htim_base->Instance==TIM3)
 8002f4c:	687b      	ldr	r3, [r7, #4]
 8002f4e:	681b      	ldr	r3, [r3, #0]
 8002f50:	4a18      	ldr	r2, [pc, #96]	; (8002fb4 <HAL_TIM_Base_MspInit+0xc4>)
 8002f52:	4293      	cmp	r3, r2
 8002f54:	d10f      	bne.n	8002f76 <HAL_TIM_Base_MspInit+0x86>
    __HAL_RCC_TIM3_CLK_ENABLE();
 8002f56:	4b16      	ldr	r3, [pc, #88]	; (8002fb0 <HAL_TIM_Base_MspInit+0xc0>)
 8002f58:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8002f5c:	4a14      	ldr	r2, [pc, #80]	; (8002fb0 <HAL_TIM_Base_MspInit+0xc0>)
 8002f5e:	f043 0302 	orr.w	r3, r3, #2
 8002f62:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8002f66:	4b12      	ldr	r3, [pc, #72]	; (8002fb0 <HAL_TIM_Base_MspInit+0xc0>)
 8002f68:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8002f6c:	f003 0302 	and.w	r3, r3, #2
 8002f70:	60fb      	str	r3, [r7, #12]
 8002f72:	68fb      	ldr	r3, [r7, #12]
}
 8002f74:	e013      	b.n	8002f9e <HAL_TIM_Base_MspInit+0xae>
  else if(htim_base->Instance==TIM5)
 8002f76:	687b      	ldr	r3, [r7, #4]
 8002f78:	681b      	ldr	r3, [r3, #0]
 8002f7a:	4a0f      	ldr	r2, [pc, #60]	; (8002fb8 <HAL_TIM_Base_MspInit+0xc8>)
 8002f7c:	4293      	cmp	r3, r2
 8002f7e:	d10e      	bne.n	8002f9e <HAL_TIM_Base_MspInit+0xae>
    __HAL_RCC_TIM5_CLK_ENABLE();
 8002f80:	4b0b      	ldr	r3, [pc, #44]	; (8002fb0 <HAL_TIM_Base_MspInit+0xc0>)
 8002f82:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8002f86:	4a0a      	ldr	r2, [pc, #40]	; (8002fb0 <HAL_TIM_Base_MspInit+0xc0>)
 8002f88:	f043 0308 	orr.w	r3, r3, #8
 8002f8c:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8002f90:	4b07      	ldr	r3, [pc, #28]	; (8002fb0 <HAL_TIM_Base_MspInit+0xc0>)
 8002f92:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8002f96:	f003 0308 	and.w	r3, r3, #8
 8002f9a:	60bb      	str	r3, [r7, #8]
 8002f9c:	68bb      	ldr	r3, [r7, #8]
}
 8002f9e:	bf00      	nop
 8002fa0:	371c      	adds	r7, #28
 8002fa2:	46bd      	mov	sp, r7
 8002fa4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fa8:	4770      	bx	lr
 8002faa:	bf00      	nop
 8002fac:	40010000 	.word	0x40010000
 8002fb0:	58024400 	.word	0x58024400
 8002fb4:	40000400 	.word	0x40000400
 8002fb8:	40000c00 	.word	0x40000c00

08002fbc <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8002fbc:	b580      	push	{r7, lr}
 8002fbe:	b0ba      	sub	sp, #232	; 0xe8
 8002fc0:	af00      	add	r7, sp, #0
 8002fc2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002fc4:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 8002fc8:	2200      	movs	r2, #0
 8002fca:	601a      	str	r2, [r3, #0]
 8002fcc:	605a      	str	r2, [r3, #4]
 8002fce:	609a      	str	r2, [r3, #8]
 8002fd0:	60da      	str	r2, [r3, #12]
 8002fd2:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8002fd4:	f107 0310 	add.w	r3, r7, #16
 8002fd8:	22c0      	movs	r2, #192	; 0xc0
 8002fda:	2100      	movs	r1, #0
 8002fdc:	4618      	mov	r0, r3
 8002fde:	f016 fe99 	bl	8019d14 <memset>
  if(huart->Instance==USART3)
 8002fe2:	687b      	ldr	r3, [r7, #4]
 8002fe4:	681b      	ldr	r3, [r3, #0]
 8002fe6:	4a27      	ldr	r2, [pc, #156]	; (8003084 <HAL_UART_MspInit+0xc8>)
 8002fe8:	4293      	cmp	r3, r2
 8002fea:	d146      	bne.n	800307a <HAL_UART_MspInit+0xbe>

  /* USER CODE END USART3_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART3;
 8002fec:	f04f 0202 	mov.w	r2, #2
 8002ff0:	f04f 0300 	mov.w	r3, #0
 8002ff4:	e9c7 2304 	strd	r2, r3, [r7, #16]
    PeriphClkInitStruct.Usart234578ClockSelection = RCC_USART234578CLKSOURCE_D2PCLK1;
 8002ff8:	2300      	movs	r3, #0
 8002ffa:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8002ffe:	f107 0310 	add.w	r3, r7, #16
 8003002:	4618      	mov	r0, r3
 8003004:	f007 fb28 	bl	800a658 <HAL_RCCEx_PeriphCLKConfig>
 8003008:	4603      	mov	r3, r0
 800300a:	2b00      	cmp	r3, #0
 800300c:	d001      	beq.n	8003012 <HAL_UART_MspInit+0x56>
    {
      Error_Handler();
 800300e:	f7ff fd8d 	bl	8002b2c <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 8003012:	4b1d      	ldr	r3, [pc, #116]	; (8003088 <HAL_UART_MspInit+0xcc>)
 8003014:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8003018:	4a1b      	ldr	r2, [pc, #108]	; (8003088 <HAL_UART_MspInit+0xcc>)
 800301a:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800301e:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8003022:	4b19      	ldr	r3, [pc, #100]	; (8003088 <HAL_UART_MspInit+0xcc>)
 8003024:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8003028:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800302c:	60fb      	str	r3, [r7, #12]
 800302e:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 8003030:	4b15      	ldr	r3, [pc, #84]	; (8003088 <HAL_UART_MspInit+0xcc>)
 8003032:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8003036:	4a14      	ldr	r2, [pc, #80]	; (8003088 <HAL_UART_MspInit+0xcc>)
 8003038:	f043 0308 	orr.w	r3, r3, #8
 800303c:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8003040:	4b11      	ldr	r3, [pc, #68]	; (8003088 <HAL_UART_MspInit+0xcc>)
 8003042:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8003046:	f003 0308 	and.w	r3, r3, #8
 800304a:	60bb      	str	r3, [r7, #8]
 800304c:	68bb      	ldr	r3, [r7, #8]
    /**USART3 GPIO Configuration
    PD8     ------> USART3_TX
    PD9     ------> USART3_RX
    */
    GPIO_InitStruct.Pin = STLINK_RX_Pin|STLINK_TX_Pin;
 800304e:	f44f 7340 	mov.w	r3, #768	; 0x300
 8003052:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003056:	2302      	movs	r3, #2
 8003058:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800305c:	2300      	movs	r3, #0
 800305e:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003062:	2300      	movs	r3, #0
 8003064:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8003068:	2307      	movs	r3, #7
 800306a:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800306e:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 8003072:	4619      	mov	r1, r3
 8003074:	4805      	ldr	r0, [pc, #20]	; (800308c <HAL_UART_MspInit+0xd0>)
 8003076:	f004 f971 	bl	800735c <HAL_GPIO_Init>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 800307a:	bf00      	nop
 800307c:	37e8      	adds	r7, #232	; 0xe8
 800307e:	46bd      	mov	sp, r7
 8003080:	bd80      	pop	{r7, pc}
 8003082:	bf00      	nop
 8003084:	40004800 	.word	0x40004800
 8003088:	58024400 	.word	0x58024400
 800308c:	58020c00 	.word	0x58020c00

08003090 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8003090:	b580      	push	{r7, lr}
 8003092:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */
  /* USER CODE END NonMaskableInt_IRQn 0 */
  HAL_RCC_NMI_IRQHandler();
 8003094:	f007 fac4 	bl	800a620 <HAL_RCC_NMI_IRQHandler>
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
	while (1) {
		Error_Handler();
 8003098:	f7ff fd48 	bl	8002b2c <Error_Handler>
 800309c:	e7fc      	b.n	8003098 <NMI_Handler+0x8>

0800309e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800309e:	b580      	push	{r7, lr}
 80030a0:	af00      	add	r7, sp, #0

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
  {
    /* USER CODE BEGIN W1_HardFault_IRQn 0 */
	  Error_Handler();
 80030a2:	f7ff fd43 	bl	8002b2c <Error_Handler>
 80030a6:	e7fc      	b.n	80030a2 <HardFault_Handler+0x4>

080030a8 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80030a8:	b580      	push	{r7, lr}
 80030aa:	af00      	add	r7, sp, #0

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
  {
    /* USER CODE BEGIN W1_MemoryManagement_IRQn 0 */
	  Error_Handler();
 80030ac:	f7ff fd3e 	bl	8002b2c <Error_Handler>
 80030b0:	e7fc      	b.n	80030ac <MemManage_Handler+0x4>

080030b2 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80030b2:	b580      	push	{r7, lr}
 80030b4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */
  /* USER CODE END BusFault_IRQn 0 */
  while (1)
  {
    /* USER CODE BEGIN W1_BusFault_IRQn 0 */
	  Error_Handler();
 80030b6:	f7ff fd39 	bl	8002b2c <Error_Handler>
 80030ba:	e7fc      	b.n	80030b6 <BusFault_Handler+0x4>

080030bc <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80030bc:	b580      	push	{r7, lr}
 80030be:	af00      	add	r7, sp, #0

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
  {
    /* USER CODE BEGIN W1_UsageFault_IRQn 0 */
	  Error_Handler();
 80030c0:	f7ff fd34 	bl	8002b2c <Error_Handler>
 80030c4:	e7fc      	b.n	80030c0 <UsageFault_Handler+0x4>

080030c6 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80030c6:	b480      	push	{r7}
 80030c8:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80030ca:	bf00      	nop
 80030cc:	46bd      	mov	sp, r7
 80030ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030d2:	4770      	bx	lr

080030d4 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80030d4:	b480      	push	{r7}
 80030d6:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80030d8:	bf00      	nop
 80030da:	46bd      	mov	sp, r7
 80030dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030e0:	4770      	bx	lr

080030e2 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80030e2:	b480      	push	{r7}
 80030e4:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80030e6:	bf00      	nop
 80030e8:	46bd      	mov	sp, r7
 80030ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030ee:	4770      	bx	lr

080030f0 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80030f0:	b580      	push	{r7, lr}
 80030f2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80030f4:	f000 fc2e 	bl	8003954 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80030f8:	bf00      	nop
 80030fa:	bd80      	pop	{r7, pc}

080030fc <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 80030fc:	b580      	push	{r7, lr}
 80030fe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_11);
 8003100:	f44f 6000 	mov.w	r0, #2048	; 0x800
 8003104:	f004 fb25 	bl	8007752 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(BLUE_BUTTON_Pin);
 8003108:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 800310c:	f004 fb21 	bl	8007752 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8003110:	bf00      	nop
 8003112:	bd80      	pop	{r7, pc}

08003114 <LPTIM1_IRQHandler>:

/**
  * @brief This function handles LPTIM1 global interrupt.
  */
void LPTIM1_IRQHandler(void)
{
 8003114:	b580      	push	{r7, lr}
 8003116:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN LPTIM1_IRQn 0 */
  /* USER CODE END LPTIM1_IRQn 0 */
  HAL_LPTIM_IRQHandler(&hlptim1);
 8003118:	4802      	ldr	r0, [pc, #8]	; (8003124 <LPTIM1_IRQHandler+0x10>)
 800311a:	f005 ff5a 	bl	8008fd2 <HAL_LPTIM_IRQHandler>
  /* USER CODE BEGIN LPTIM1_IRQn 1 */
  /* USER CODE END LPTIM1_IRQn 1 */
}
 800311e:	bf00      	nop
 8003120:	bd80      	pop	{r7, pc}
 8003122:	bf00      	nop
 8003124:	200003a0 	.word	0x200003a0

08003128 <HRTIM1_TIMA_IRQHandler>:

/**
  * @brief This function handles HRTIM timer A global interrupt.
  */
void HRTIM1_TIMA_IRQHandler(void)
{
 8003128:	b580      	push	{r7, lr}
 800312a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HRTIM1_TIMA_IRQn 0 */

  /* USER CODE END HRTIM1_TIMA_IRQn 0 */
  HAL_HRTIM_IRQHandler(&hhrtim,HRTIM_TIMERINDEX_TIMER_A);
 800312c:	2100      	movs	r1, #0
 800312e:	4802      	ldr	r0, [pc, #8]	; (8003138 <HRTIM1_TIMA_IRQHandler+0x10>)
 8003130:	f004 ff86 	bl	8008040 <HAL_HRTIM_IRQHandler>
  /* USER CODE BEGIN HRTIM1_TIMA_IRQn 1 */

  /* USER CODE END HRTIM1_TIMA_IRQn 1 */
}
 8003134:	bf00      	nop
 8003136:	bd80      	pop	{r7, pc}
 8003138:	200002c4 	.word	0x200002c4

0800313c <HRTIM1_TIME_IRQHandler>:

/**
  * @brief This function handles HRTIM timer E global interrupt.
  */
void HRTIM1_TIME_IRQHandler(void)
{
 800313c:	b580      	push	{r7, lr}
 800313e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HRTIM1_TIME_IRQn 0 */

  /* USER CODE END HRTIM1_TIME_IRQn 0 */
  HAL_HRTIM_IRQHandler(&hhrtim,HRTIM_TIMERINDEX_TIMER_E);
 8003140:	2104      	movs	r1, #4
 8003142:	4802      	ldr	r0, [pc, #8]	; (800314c <HRTIM1_TIME_IRQHandler+0x10>)
 8003144:	f004 ff7c 	bl	8008040 <HAL_HRTIM_IRQHandler>
  /* USER CODE BEGIN HRTIM1_TIME_IRQn 1 */

  /* USER CODE END HRTIM1_TIME_IRQn 1 */
}
 8003148:	bf00      	nop
 800314a:	bd80      	pop	{r7, pc}
 800314c:	200002c4 	.word	0x200002c4

08003150 <ADC3_IRQHandler>:

/**
  * @brief This function handles ADC3 global interrupt.
  */
void ADC3_IRQHandler(void)
{
 8003150:	b580      	push	{r7, lr}
 8003152:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ADC3_IRQn 0 */

  /* USER CODE END ADC3_IRQn 0 */
  HAL_ADC_IRQHandler(&hadc3);
 8003154:	4802      	ldr	r0, [pc, #8]	; (8003160 <ADC3_IRQHandler+0x10>)
 8003156:	f001 f981 	bl	800445c <HAL_ADC_IRQHandler>
  /* USER CODE BEGIN ADC3_IRQn 1 */

  /* USER CODE END ADC3_IRQn 1 */
}
 800315a:	bf00      	nop
 800315c:	bd80      	pop	{r7, pc}
 800315e:	bf00      	nop
 8003160:	2000024c 	.word	0x2000024c

08003164 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8003164:	b480      	push	{r7}
 8003166:	af00      	add	r7, sp, #0
	return 1;
 8003168:	2301      	movs	r3, #1
}
 800316a:	4618      	mov	r0, r3
 800316c:	46bd      	mov	sp, r7
 800316e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003172:	4770      	bx	lr

08003174 <_kill>:

int _kill(int pid, int sig)
{
 8003174:	b480      	push	{r7}
 8003176:	b083      	sub	sp, #12
 8003178:	af00      	add	r7, sp, #0
 800317a:	6078      	str	r0, [r7, #4]
 800317c:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 800317e:	4b05      	ldr	r3, [pc, #20]	; (8003194 <_kill+0x20>)
 8003180:	2216      	movs	r2, #22
 8003182:	601a      	str	r2, [r3, #0]
	return -1;
 8003184:	f04f 33ff 	mov.w	r3, #4294967295
}
 8003188:	4618      	mov	r0, r3
 800318a:	370c      	adds	r7, #12
 800318c:	46bd      	mov	sp, r7
 800318e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003192:	4770      	bx	lr
 8003194:	200072dc 	.word	0x200072dc

08003198 <_exit>:

void _exit (int status)
{
 8003198:	b580      	push	{r7, lr}
 800319a:	b082      	sub	sp, #8
 800319c:	af00      	add	r7, sp, #0
 800319e:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 80031a0:	f04f 31ff 	mov.w	r1, #4294967295
 80031a4:	6878      	ldr	r0, [r7, #4]
 80031a6:	f7ff ffe5 	bl	8003174 <_kill>
	while (1) {}		/* Make sure we hang here */
 80031aa:	e7fe      	b.n	80031aa <_exit+0x12>

080031ac <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80031ac:	b580      	push	{r7, lr}
 80031ae:	b086      	sub	sp, #24
 80031b0:	af00      	add	r7, sp, #0
 80031b2:	60f8      	str	r0, [r7, #12]
 80031b4:	60b9      	str	r1, [r7, #8]
 80031b6:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80031b8:	2300      	movs	r3, #0
 80031ba:	617b      	str	r3, [r7, #20]
 80031bc:	e00a      	b.n	80031d4 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 80031be:	f3af 8000 	nop.w
 80031c2:	4601      	mov	r1, r0
 80031c4:	68bb      	ldr	r3, [r7, #8]
 80031c6:	1c5a      	adds	r2, r3, #1
 80031c8:	60ba      	str	r2, [r7, #8]
 80031ca:	b2ca      	uxtb	r2, r1
 80031cc:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80031ce:	697b      	ldr	r3, [r7, #20]
 80031d0:	3301      	adds	r3, #1
 80031d2:	617b      	str	r3, [r7, #20]
 80031d4:	697a      	ldr	r2, [r7, #20]
 80031d6:	687b      	ldr	r3, [r7, #4]
 80031d8:	429a      	cmp	r2, r3
 80031da:	dbf0      	blt.n	80031be <_read+0x12>
	}

return len;
 80031dc:	687b      	ldr	r3, [r7, #4]
}
 80031de:	4618      	mov	r0, r3
 80031e0:	3718      	adds	r7, #24
 80031e2:	46bd      	mov	sp, r7
 80031e4:	bd80      	pop	{r7, pc}

080031e6 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 80031e6:	b580      	push	{r7, lr}
 80031e8:	b086      	sub	sp, #24
 80031ea:	af00      	add	r7, sp, #0
 80031ec:	60f8      	str	r0, [r7, #12]
 80031ee:	60b9      	str	r1, [r7, #8]
 80031f0:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80031f2:	2300      	movs	r3, #0
 80031f4:	617b      	str	r3, [r7, #20]
 80031f6:	e009      	b.n	800320c <_write+0x26>
	{
		__io_putchar(*ptr++);
 80031f8:	68bb      	ldr	r3, [r7, #8]
 80031fa:	1c5a      	adds	r2, r3, #1
 80031fc:	60ba      	str	r2, [r7, #8]
 80031fe:	781b      	ldrb	r3, [r3, #0]
 8003200:	4618      	mov	r0, r3
 8003202:	f7fe fcb3 	bl	8001b6c <__io_putchar>
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8003206:	697b      	ldr	r3, [r7, #20]
 8003208:	3301      	adds	r3, #1
 800320a:	617b      	str	r3, [r7, #20]
 800320c:	697a      	ldr	r2, [r7, #20]
 800320e:	687b      	ldr	r3, [r7, #4]
 8003210:	429a      	cmp	r2, r3
 8003212:	dbf1      	blt.n	80031f8 <_write+0x12>
	}
	return len;
 8003214:	687b      	ldr	r3, [r7, #4]
}
 8003216:	4618      	mov	r0, r3
 8003218:	3718      	adds	r7, #24
 800321a:	46bd      	mov	sp, r7
 800321c:	bd80      	pop	{r7, pc}

0800321e <_close>:

int _close(int file)
{
 800321e:	b480      	push	{r7}
 8003220:	b083      	sub	sp, #12
 8003222:	af00      	add	r7, sp, #0
 8003224:	6078      	str	r0, [r7, #4]
	return -1;
 8003226:	f04f 33ff 	mov.w	r3, #4294967295
}
 800322a:	4618      	mov	r0, r3
 800322c:	370c      	adds	r7, #12
 800322e:	46bd      	mov	sp, r7
 8003230:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003234:	4770      	bx	lr

08003236 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8003236:	b480      	push	{r7}
 8003238:	b083      	sub	sp, #12
 800323a:	af00      	add	r7, sp, #0
 800323c:	6078      	str	r0, [r7, #4]
 800323e:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8003240:	683b      	ldr	r3, [r7, #0]
 8003242:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8003246:	605a      	str	r2, [r3, #4]
	return 0;
 8003248:	2300      	movs	r3, #0
}
 800324a:	4618      	mov	r0, r3
 800324c:	370c      	adds	r7, #12
 800324e:	46bd      	mov	sp, r7
 8003250:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003254:	4770      	bx	lr

08003256 <_isatty>:

int _isatty(int file)
{
 8003256:	b480      	push	{r7}
 8003258:	b083      	sub	sp, #12
 800325a:	af00      	add	r7, sp, #0
 800325c:	6078      	str	r0, [r7, #4]
	return 1;
 800325e:	2301      	movs	r3, #1
}
 8003260:	4618      	mov	r0, r3
 8003262:	370c      	adds	r7, #12
 8003264:	46bd      	mov	sp, r7
 8003266:	f85d 7b04 	ldr.w	r7, [sp], #4
 800326a:	4770      	bx	lr

0800326c <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 800326c:	b480      	push	{r7}
 800326e:	b085      	sub	sp, #20
 8003270:	af00      	add	r7, sp, #0
 8003272:	60f8      	str	r0, [r7, #12]
 8003274:	60b9      	str	r1, [r7, #8]
 8003276:	607a      	str	r2, [r7, #4]
	return 0;
 8003278:	2300      	movs	r3, #0
}
 800327a:	4618      	mov	r0, r3
 800327c:	3714      	adds	r7, #20
 800327e:	46bd      	mov	sp, r7
 8003280:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003284:	4770      	bx	lr
	...

08003288 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8003288:	b480      	push	{r7}
 800328a:	b087      	sub	sp, #28
 800328c:	af00      	add	r7, sp, #0
 800328e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8003290:	4a14      	ldr	r2, [pc, #80]	; (80032e4 <_sbrk+0x5c>)
 8003292:	4b15      	ldr	r3, [pc, #84]	; (80032e8 <_sbrk+0x60>)
 8003294:	1ad3      	subs	r3, r2, r3
 8003296:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8003298:	697b      	ldr	r3, [r7, #20]
 800329a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 800329c:	4b13      	ldr	r3, [pc, #76]	; (80032ec <_sbrk+0x64>)
 800329e:	681b      	ldr	r3, [r3, #0]
 80032a0:	2b00      	cmp	r3, #0
 80032a2:	d102      	bne.n	80032aa <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80032a4:	4b11      	ldr	r3, [pc, #68]	; (80032ec <_sbrk+0x64>)
 80032a6:	4a12      	ldr	r2, [pc, #72]	; (80032f0 <_sbrk+0x68>)
 80032a8:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80032aa:	4b10      	ldr	r3, [pc, #64]	; (80032ec <_sbrk+0x64>)
 80032ac:	681a      	ldr	r2, [r3, #0]
 80032ae:	687b      	ldr	r3, [r7, #4]
 80032b0:	4413      	add	r3, r2
 80032b2:	693a      	ldr	r2, [r7, #16]
 80032b4:	429a      	cmp	r2, r3
 80032b6:	d205      	bcs.n	80032c4 <_sbrk+0x3c>
  {
    errno = ENOMEM;
 80032b8:	4b0e      	ldr	r3, [pc, #56]	; (80032f4 <_sbrk+0x6c>)
 80032ba:	220c      	movs	r2, #12
 80032bc:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80032be:	f04f 33ff 	mov.w	r3, #4294967295
 80032c2:	e009      	b.n	80032d8 <_sbrk+0x50>
  }

  prev_heap_end = __sbrk_heap_end;
 80032c4:	4b09      	ldr	r3, [pc, #36]	; (80032ec <_sbrk+0x64>)
 80032c6:	681b      	ldr	r3, [r3, #0]
 80032c8:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80032ca:	4b08      	ldr	r3, [pc, #32]	; (80032ec <_sbrk+0x64>)
 80032cc:	681a      	ldr	r2, [r3, #0]
 80032ce:	687b      	ldr	r3, [r7, #4]
 80032d0:	4413      	add	r3, r2
 80032d2:	4a06      	ldr	r2, [pc, #24]	; (80032ec <_sbrk+0x64>)
 80032d4:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80032d6:	68fb      	ldr	r3, [r7, #12]
}
 80032d8:	4618      	mov	r0, r3
 80032da:	371c      	adds	r7, #28
 80032dc:	46bd      	mov	sp, r7
 80032de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032e2:	4770      	bx	lr
 80032e4:	20020000 	.word	0x20020000
 80032e8:	00000400 	.word	0x00000400
 80032ec:	200005f8 	.word	0x200005f8
 80032f0:	200072f0 	.word	0x200072f0
 80032f4:	200072dc 	.word	0x200072dc

080032f8 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 80032f8:	b480      	push	{r7}
 80032fa:	b083      	sub	sp, #12
 80032fc:	af00      	add	r7, sp, #0
 __IO uint32_t tmpreg;
#endif /* DATA_IN_D2_SRAM */

  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 80032fe:	4b3f      	ldr	r3, [pc, #252]	; (80033fc <SystemInit+0x104>)
 8003300:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003304:	4a3d      	ldr	r2, [pc, #244]	; (80033fc <SystemInit+0x104>)
 8003306:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800330a:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/

   /* Increasing the CPU frequency */
  if(FLASH_LATENCY_DEFAULT  > (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 800330e:	4b3c      	ldr	r3, [pc, #240]	; (8003400 <SystemInit+0x108>)
 8003310:	681b      	ldr	r3, [r3, #0]
 8003312:	f003 030f 	and.w	r3, r3, #15
 8003316:	2b06      	cmp	r3, #6
 8003318:	d807      	bhi.n	800332a <SystemInit+0x32>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */

	  MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 800331a:	4b39      	ldr	r3, [pc, #228]	; (8003400 <SystemInit+0x108>)
 800331c:	681b      	ldr	r3, [r3, #0]
 800331e:	f023 030f 	bic.w	r3, r3, #15
 8003322:	4a37      	ldr	r2, [pc, #220]	; (8003400 <SystemInit+0x108>)
 8003324:	f043 0307 	orr.w	r3, r3, #7
 8003328:	6013      	str	r3, [r2, #0]
  }

  /* Set HSION bit */
  RCC->CR |= RCC_CR_HSION;
 800332a:	4b36      	ldr	r3, [pc, #216]	; (8003404 <SystemInit+0x10c>)
 800332c:	681b      	ldr	r3, [r3, #0]
 800332e:	4a35      	ldr	r2, [pc, #212]	; (8003404 <SystemInit+0x10c>)
 8003330:	f043 0301 	orr.w	r3, r3, #1
 8003334:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 8003336:	4b33      	ldr	r3, [pc, #204]	; (8003404 <SystemInit+0x10c>)
 8003338:	2200      	movs	r2, #0
 800333a:	611a      	str	r2, [r3, #16]

  /* Reset HSEON, HSECSSON, CSION, HSI48ON, CSIKERON, PLL1ON, PLL2ON and PLL3ON bits */
  RCC->CR &= 0xEAF6ED7FU;
 800333c:	4b31      	ldr	r3, [pc, #196]	; (8003404 <SystemInit+0x10c>)
 800333e:	681a      	ldr	r2, [r3, #0]
 8003340:	4930      	ldr	r1, [pc, #192]	; (8003404 <SystemInit+0x10c>)
 8003342:	4b31      	ldr	r3, [pc, #196]	; (8003408 <SystemInit+0x110>)
 8003344:	4013      	ands	r3, r2
 8003346:	600b      	str	r3, [r1, #0]

   /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLASH_LATENCY_DEFAULT  < (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 8003348:	4b2d      	ldr	r3, [pc, #180]	; (8003400 <SystemInit+0x108>)
 800334a:	681b      	ldr	r3, [r3, #0]
 800334c:	f003 0308 	and.w	r3, r3, #8
 8003350:	2b00      	cmp	r3, #0
 8003352:	d007      	beq.n	8003364 <SystemInit+0x6c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 8003354:	4b2a      	ldr	r3, [pc, #168]	; (8003400 <SystemInit+0x108>)
 8003356:	681b      	ldr	r3, [r3, #0]
 8003358:	f023 030f 	bic.w	r3, r3, #15
 800335c:	4a28      	ldr	r2, [pc, #160]	; (8003400 <SystemInit+0x108>)
 800335e:	f043 0307 	orr.w	r3, r3, #7
 8003362:	6013      	str	r3, [r2, #0]
  }

#if defined(D3_SRAM_BASE)
  /* Reset D1CFGR register */
  RCC->D1CFGR = 0x00000000;
 8003364:	4b27      	ldr	r3, [pc, #156]	; (8003404 <SystemInit+0x10c>)
 8003366:	2200      	movs	r2, #0
 8003368:	619a      	str	r2, [r3, #24]

  /* Reset D2CFGR register */
  RCC->D2CFGR = 0x00000000;
 800336a:	4b26      	ldr	r3, [pc, #152]	; (8003404 <SystemInit+0x10c>)
 800336c:	2200      	movs	r2, #0
 800336e:	61da      	str	r2, [r3, #28]

  /* Reset D3CFGR register */
  RCC->D3CFGR = 0x00000000;
 8003370:	4b24      	ldr	r3, [pc, #144]	; (8003404 <SystemInit+0x10c>)
 8003372:	2200      	movs	r2, #0
 8003374:	621a      	str	r2, [r3, #32]

  /* Reset SRDCFGR register */
  RCC->SRDCFGR = 0x00000000;
#endif
  /* Reset PLLCKSELR register */
  RCC->PLLCKSELR = 0x02020200;
 8003376:	4b23      	ldr	r3, [pc, #140]	; (8003404 <SystemInit+0x10c>)
 8003378:	4a24      	ldr	r2, [pc, #144]	; (800340c <SystemInit+0x114>)
 800337a:	629a      	str	r2, [r3, #40]	; 0x28

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x01FF0000;
 800337c:	4b21      	ldr	r3, [pc, #132]	; (8003404 <SystemInit+0x10c>)
 800337e:	4a24      	ldr	r2, [pc, #144]	; (8003410 <SystemInit+0x118>)
 8003380:	62da      	str	r2, [r3, #44]	; 0x2c
  /* Reset PLL1DIVR register */
  RCC->PLL1DIVR = 0x01010280;
 8003382:	4b20      	ldr	r3, [pc, #128]	; (8003404 <SystemInit+0x10c>)
 8003384:	4a23      	ldr	r2, [pc, #140]	; (8003414 <SystemInit+0x11c>)
 8003386:	631a      	str	r2, [r3, #48]	; 0x30
  /* Reset PLL1FRACR register */
  RCC->PLL1FRACR = 0x00000000;
 8003388:	4b1e      	ldr	r3, [pc, #120]	; (8003404 <SystemInit+0x10c>)
 800338a:	2200      	movs	r2, #0
 800338c:	635a      	str	r2, [r3, #52]	; 0x34

  /* Reset PLL2DIVR register */
  RCC->PLL2DIVR = 0x01010280;
 800338e:	4b1d      	ldr	r3, [pc, #116]	; (8003404 <SystemInit+0x10c>)
 8003390:	4a20      	ldr	r2, [pc, #128]	; (8003414 <SystemInit+0x11c>)
 8003392:	639a      	str	r2, [r3, #56]	; 0x38

  /* Reset PLL2FRACR register */

  RCC->PLL2FRACR = 0x00000000;
 8003394:	4b1b      	ldr	r3, [pc, #108]	; (8003404 <SystemInit+0x10c>)
 8003396:	2200      	movs	r2, #0
 8003398:	63da      	str	r2, [r3, #60]	; 0x3c
  /* Reset PLL3DIVR register */
  RCC->PLL3DIVR = 0x01010280;
 800339a:	4b1a      	ldr	r3, [pc, #104]	; (8003404 <SystemInit+0x10c>)
 800339c:	4a1d      	ldr	r2, [pc, #116]	; (8003414 <SystemInit+0x11c>)
 800339e:	641a      	str	r2, [r3, #64]	; 0x40

  /* Reset PLL3FRACR register */
  RCC->PLL3FRACR = 0x00000000;
 80033a0:	4b18      	ldr	r3, [pc, #96]	; (8003404 <SystemInit+0x10c>)
 80033a2:	2200      	movs	r2, #0
 80033a4:	645a      	str	r2, [r3, #68]	; 0x44

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 80033a6:	4b17      	ldr	r3, [pc, #92]	; (8003404 <SystemInit+0x10c>)
 80033a8:	681b      	ldr	r3, [r3, #0]
 80033aa:	4a16      	ldr	r2, [pc, #88]	; (8003404 <SystemInit+0x10c>)
 80033ac:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80033b0:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 80033b2:	4b14      	ldr	r3, [pc, #80]	; (8003404 <SystemInit+0x10c>)
 80033b4:	2200      	movs	r2, #0
 80033b6:	661a      	str	r2, [r3, #96]	; 0x60

#if (STM32H7_DEV_ID == 0x450UL)
  /* dual core CM7 or single core line */
  if((DBGMCU->IDCODE & 0xFFFF0000U) < 0x20000000U)
 80033b8:	4b17      	ldr	r3, [pc, #92]	; (8003418 <SystemInit+0x120>)
 80033ba:	681a      	ldr	r2, [r3, #0]
 80033bc:	4b17      	ldr	r3, [pc, #92]	; (800341c <SystemInit+0x124>)
 80033be:	4013      	ands	r3, r2
 80033c0:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80033c4:	d202      	bcs.n	80033cc <SystemInit+0xd4>
  {
    /* if stm32h7 revY*/
    /* Change  the switch matrix read issuing capability to 1 for the AXI SRAM target (Target 7) */
    *((__IO uint32_t*)0x51008108) = 0x000000001U;
 80033c6:	4b16      	ldr	r3, [pc, #88]	; (8003420 <SystemInit+0x128>)
 80033c8:	2201      	movs	r2, #1
 80033ca:	601a      	str	r2, [r3, #0]
#endif /* STM32H7_DEV_ID */

#if defined(DATA_IN_D2_SRAM)
  /* in case of initialized data in D2 SRAM (AHB SRAM), enable the D2 SRAM clock (AHB SRAM clock) */
#if defined(RCC_AHB2ENR_D2SRAM3EN)
  RCC->AHB2ENR |= (RCC_AHB2ENR_D2SRAM1EN | RCC_AHB2ENR_D2SRAM2EN | RCC_AHB2ENR_D2SRAM3EN);
 80033cc:	4b0d      	ldr	r3, [pc, #52]	; (8003404 <SystemInit+0x10c>)
 80033ce:	f8d3 30dc 	ldr.w	r3, [r3, #220]	; 0xdc
 80033d2:	4a0c      	ldr	r2, [pc, #48]	; (8003404 <SystemInit+0x10c>)
 80033d4:	f043 4360 	orr.w	r3, r3, #3758096384	; 0xe0000000
 80033d8:	f8c2 30dc 	str.w	r3, [r2, #220]	; 0xdc
  RCC->AHB2ENR |= (RCC_AHB2ENR_D2SRAM1EN | RCC_AHB2ENR_D2SRAM2EN);
#else
  RCC->AHB2ENR |= (RCC_AHB2ENR_AHBSRAM1EN | RCC_AHB2ENR_AHBSRAM2EN);
#endif /* RCC_AHB2ENR_D2SRAM3EN */

  tmpreg = RCC->AHB2ENR;
 80033dc:	4b09      	ldr	r3, [pc, #36]	; (8003404 <SystemInit+0x10c>)
 80033de:	f8d3 30dc 	ldr.w	r3, [r3, #220]	; 0xdc
 80033e2:	607b      	str	r3, [r7, #4]
  (void) tmpreg;
 80033e4:	687b      	ldr	r3, [r7, #4]
  /*
   * Disable the FMC bank1 (enabled after reset).
   * This, prevents CPU speculation access on this bank which blocks the use of FMC during
   * 24us. During this time the others FMC master (such as LTDC) cannot use it!
   */
  FMC_Bank1_R->BTCR[0] = 0x000030D2;
 80033e6:	4b0f      	ldr	r3, [pc, #60]	; (8003424 <SystemInit+0x12c>)
 80033e8:	f243 02d2 	movw	r2, #12498	; 0x30d2
 80033ec:	601a      	str	r2, [r3, #0]
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal D1 AXI-RAM or in Internal FLASH */
#endif /* USER_VECT_TAB_ADDRESS */

#endif /*DUAL_CORE && CORE_CM4*/
}
 80033ee:	bf00      	nop
 80033f0:	370c      	adds	r7, #12
 80033f2:	46bd      	mov	sp, r7
 80033f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033f8:	4770      	bx	lr
 80033fa:	bf00      	nop
 80033fc:	e000ed00 	.word	0xe000ed00
 8003400:	52002000 	.word	0x52002000
 8003404:	58024400 	.word	0x58024400
 8003408:	eaf6ed7f 	.word	0xeaf6ed7f
 800340c:	02020200 	.word	0x02020200
 8003410:	01ff0000 	.word	0x01ff0000
 8003414:	01010280 	.word	0x01010280
 8003418:	5c001000 	.word	0x5c001000
 800341c:	ffff0000 	.word	0xffff0000
 8003420:	51008108 	.word	0x51008108
 8003424:	52004000 	.word	0x52004000

08003428 <HAL_LPTIM_AutoReloadMatchCallback>:
//		}
//
//	}
//}

void HAL_LPTIM_AutoReloadMatchCallback(LPTIM_HandleTypeDef *hlptim){
 8003428:	b580      	push	{r7, lr}
 800342a:	b082      	sub	sp, #8
 800342c:	af00      	add	r7, sp, #0
 800342e:	6078      	str	r0, [r7, #4]
	HAL_GPIO_TogglePin(LD1_GPIO_Port, LD1_Pin); //toggle green LED
 8003430:	2101      	movs	r1, #1
 8003432:	4803      	ldr	r0, [pc, #12]	; (8003440 <HAL_LPTIM_AutoReloadMatchCallback+0x18>)
 8003434:	f004 f973 	bl	800771e <HAL_GPIO_TogglePin>
}
 8003438:	bf00      	nop
 800343a:	3708      	adds	r7, #8
 800343c:	46bd      	mov	sp, r7
 800343e:	bd80      	pop	{r7, pc}
 8003440:	58020400 	.word	0x58020400

08003444 <HAL_HRTIM_Compare2EventCallback>:

void HAL_HRTIM_Compare2EventCallback(HRTIM_HandleTypeDef *hhrtim, uint32_t TimerIdx) {
 8003444:	b480      	push	{r7}
 8003446:	b083      	sub	sp, #12
 8003448:	af00      	add	r7, sp, #0
 800344a:	6078      	str	r0, [r7, #4]
 800344c:	6039      	str	r1, [r7, #0]
		const struct AttenuatorSettings a = {0,0,0,0,0,1,0}; // 8 dB
		set_aom_atten(a);
#endif //ATTENUATOR_CODE
	}

}
 800344e:	bf00      	nop
 8003450:	370c      	adds	r7, #12
 8003452:	46bd      	mov	sp, r7
 8003454:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003458:	4770      	bx	lr
	...

0800345c <HAL_HRTIM_Compare3EventCallback>:

void HAL_HRTIM_Compare3EventCallback(HRTIM_HandleTypeDef *hhrtim, uint32_t TimerIdx) {
 800345c:	b580      	push	{r7, lr}
 800345e:	b088      	sub	sp, #32
 8003460:	af00      	add	r7, sp, #0
 8003462:	6078      	str	r0, [r7, #4]
 8003464:	6039      	str	r1, [r7, #0]

	/* Called at the end of a POP cycle */
	if (TimerIdx == HRTIM_TIMERINDEX_TIMER_A) {
 8003466:	683b      	ldr	r3, [r7, #0]
 8003468:	2b00      	cmp	r3, #0
 800346a:	d15d      	bne.n	8003528 <HAL_HRTIM_Compare3EventCallback+0xcc>
		/* Reset the attenuator to 0 dB */
		const struct AttenuatorSettings a = { 0, 0, 0, 0, 0, 0, 0 }; // 0 dB
		set_aom_atten(a);
#endif //ATTENUATOR_CODE

		const double start_freq = ((long)(sweep_settings.req_start_freq/sweep_settings.step_size)) * sweep_settings.step_size;
 800346c:	4b30      	ldr	r3, [pc, #192]	; (8003530 <HAL_HRTIM_Compare3EventCallback+0xd4>)
 800346e:	ed93 5b00 	vldr	d5, [r3]
 8003472:	4b2f      	ldr	r3, [pc, #188]	; (8003530 <HAL_HRTIM_Compare3EventCallback+0xd4>)
 8003474:	ed93 6b04 	vldr	d6, [r3, #16]
 8003478:	ee85 7b06 	vdiv.f64	d7, d5, d6
 800347c:	eefd 7bc7 	vcvt.s32.f64	s15, d7
 8003480:	eeb8 6be7 	vcvt.f64.s32	d6, s15
 8003484:	4b2a      	ldr	r3, [pc, #168]	; (8003530 <HAL_HRTIM_Compare3EventCallback+0xd4>)
 8003486:	ed93 7b04 	vldr	d7, [r3, #16]
 800348a:	ee26 7b07 	vmul.f64	d7, d6, d7
 800348e:	ed87 7b06 	vstr	d7, [r7, #24]
		const double stop_freq = ((long)((sweep_settings.req_stop_freq/sweep_settings.step_size) + 0.5)) * sweep_settings.step_size;
 8003492:	4b27      	ldr	r3, [pc, #156]	; (8003530 <HAL_HRTIM_Compare3EventCallback+0xd4>)
 8003494:	ed93 5b02 	vldr	d5, [r3, #8]
 8003498:	4b25      	ldr	r3, [pc, #148]	; (8003530 <HAL_HRTIM_Compare3EventCallback+0xd4>)
 800349a:	ed93 6b04 	vldr	d6, [r3, #16]
 800349e:	ee85 7b06 	vdiv.f64	d7, d5, d6
 80034a2:	eeb6 6b00 	vmov.f64	d6, #96	; 0x3f000000  0.5
 80034a6:	ee37 7b06 	vadd.f64	d7, d7, d6
 80034aa:	eefd 7bc7 	vcvt.s32.f64	s15, d7
 80034ae:	eeb8 6be7 	vcvt.f64.s32	d6, s15
 80034b2:	4b1f      	ldr	r3, [pc, #124]	; (8003530 <HAL_HRTIM_Compare3EventCallback+0xd4>)
 80034b4:	ed93 7b04 	vldr	d7, [r3, #16]
 80034b8:	ee26 7b07 	vmul.f64	d7, d6, d7
 80034bc:	ed87 7b04 	vstr	d7, [r7, #16]
		const uint32_t num_points = ((stop_freq - start_freq)/sweep_settings.step_size) + 1;
 80034c0:	ed97 6b04 	vldr	d6, [r7, #16]
 80034c4:	ed97 7b06 	vldr	d7, [r7, #24]
 80034c8:	ee36 5b47 	vsub.f64	d5, d6, d7
 80034cc:	4b18      	ldr	r3, [pc, #96]	; (8003530 <HAL_HRTIM_Compare3EventCallback+0xd4>)
 80034ce:	ed93 6b04 	vldr	d6, [r3, #16]
 80034d2:	ee85 7b06 	vdiv.f64	d7, d5, d6
 80034d6:	eeb7 6b00 	vmov.f64	d6, #112	; 0x3f800000  1.0
 80034da:	ee37 7b06 	vadd.f64	d7, d7, d6
 80034de:	eefc 7bc7 	vcvt.u32.f64	s15, d7
 80034e2:	ee17 3a90 	vmov	r3, s15
 80034e6:	60fb      	str	r3, [r7, #12]
		static uint32_t i = 0;

		/* Configure the Microwave frequency */
		if (i == num_points) {
 80034e8:	4b12      	ldr	r3, [pc, #72]	; (8003534 <HAL_HRTIM_Compare3EventCallback+0xd8>)
 80034ea:	681b      	ldr	r3, [r3, #0]
 80034ec:	68fa      	ldr	r2, [r7, #12]
 80034ee:	429a      	cmp	r2, r3
 80034f0:	d106      	bne.n	8003500 <HAL_HRTIM_Compare3EventCallback+0xa4>
			stop_pop();
 80034f2:	f018 fa55 	bl	801b9a0 <__stop_pop_veneer>
			i = 0;
 80034f6:	4b0f      	ldr	r3, [pc, #60]	; (8003534 <HAL_HRTIM_Compare3EventCallback+0xd8>)
 80034f8:	2200      	movs	r2, #0
 80034fa:	601a      	str	r2, [r3, #0]
			start_pop();
 80034fc:	f018 fa5c 	bl	801b9b8 <__start_pop_veneer>

#ifdef SYNTH_ENABLE
		set_frequency_hz(start_freq + (i * sweep_settings.step_size));
#endif

		i = i + 1;
 8003500:	4b0c      	ldr	r3, [pc, #48]	; (8003534 <HAL_HRTIM_Compare3EventCallback+0xd8>)
 8003502:	681b      	ldr	r3, [r3, #0]
 8003504:	3301      	adds	r3, #1
 8003506:	4a0b      	ldr	r2, [pc, #44]	; (8003534 <HAL_HRTIM_Compare3EventCallback+0xd8>)
 8003508:	6013      	str	r3, [r2, #0]

		pop_cycle_count = pop_cycle_count + 1;
 800350a:	4b0b      	ldr	r3, [pc, #44]	; (8003538 <HAL_HRTIM_Compare3EventCallback+0xdc>)
 800350c:	681b      	ldr	r3, [r3, #0]
 800350e:	3301      	adds	r3, #1
 8003510:	4a09      	ldr	r2, [pc, #36]	; (8003538 <HAL_HRTIM_Compare3EventCallback+0xdc>)
 8003512:	6013      	str	r3, [r2, #0]
		HAL_GPIO_TogglePin(LD2_GPIO_Port, LD2_Pin); //toggle amber LED
 8003514:	2102      	movs	r1, #2
 8003516:	4809      	ldr	r0, [pc, #36]	; (800353c <HAL_HRTIM_Compare3EventCallback+0xe0>)
 8003518:	f004 f901 	bl	800771e <HAL_GPIO_TogglePin>
		printf("POP Cycle %lu done.\r\n", pop_cycle_count);
 800351c:	4b06      	ldr	r3, [pc, #24]	; (8003538 <HAL_HRTIM_Compare3EventCallback+0xdc>)
 800351e:	681b      	ldr	r3, [r3, #0]
 8003520:	4619      	mov	r1, r3
 8003522:	4807      	ldr	r0, [pc, #28]	; (8003540 <HAL_HRTIM_Compare3EventCallback+0xe4>)
 8003524:	f016 faa0 	bl	8019a68 <iprintf>

	/* Called when the second microwave pulse goes high */
	if (TimerIdx == HRTIM_TIMERINDEX_TIMER_E) {
	}

}
 8003528:	bf00      	nop
 800352a:	3720      	adds	r7, #32
 800352c:	46bd      	mov	sp, r7
 800352e:	bd80      	pop	{r7, pc}
 8003530:	0801ebc8 	.word	0x0801ebc8
 8003534:	20000604 	.word	0x20000604
 8003538:	200005fc 	.word	0x200005fc
 800353c:	58021000 	.word	0x58021000
 8003540:	0801c1d0 	.word	0x0801c1d0

08003544 <HAL_HRTIM_RepetitionEventCallback>:

void HAL_HRTIM_RepetitionEventCallback(HRTIM_HandleTypeDef *hhrtim,
		uint32_t TimerIdx) {
 8003544:	b480      	push	{r7}
 8003546:	b083      	sub	sp, #12
 8003548:	af00      	add	r7, sp, #0
 800354a:	6078      	str	r0, [r7, #4]
 800354c:	6039      	str	r1, [r7, #0]

	/* Called at the start of the next POP cycle */
	if (TimerIdx == HRTIM_TIMERINDEX_TIMER_A) {
	}
}
 800354e:	bf00      	nop
 8003550:	370c      	adds	r7, #12
 8003552:	46bd      	mov	sp, r7
 8003554:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003558:	4770      	bx	lr
	...

0800355c <Reset_Handler>:
 800355c:	f8df d034 	ldr.w	sp, [pc, #52]	; 8003594 <LoopFillZerobss+0xe>
 8003560:	f7ff feca 	bl	80032f8 <SystemInit>
 8003564:	480c      	ldr	r0, [pc, #48]	; (8003598 <LoopFillZerobss+0x12>)
 8003566:	490d      	ldr	r1, [pc, #52]	; (800359c <LoopFillZerobss+0x16>)
 8003568:	4a0d      	ldr	r2, [pc, #52]	; (80035a0 <LoopFillZerobss+0x1a>)
 800356a:	2300      	movs	r3, #0
 800356c:	e002      	b.n	8003574 <LoopCopyDataInit>

0800356e <CopyDataInit>:
 800356e:	58d4      	ldr	r4, [r2, r3]
 8003570:	50c4      	str	r4, [r0, r3]
 8003572:	3304      	adds	r3, #4

08003574 <LoopCopyDataInit>:
 8003574:	18c4      	adds	r4, r0, r3
 8003576:	428c      	cmp	r4, r1
 8003578:	d3f9      	bcc.n	800356e <CopyDataInit>
 800357a:	4a0a      	ldr	r2, [pc, #40]	; (80035a4 <LoopFillZerobss+0x1e>)
 800357c:	4c0a      	ldr	r4, [pc, #40]	; (80035a8 <LoopFillZerobss+0x22>)
 800357e:	2300      	movs	r3, #0
 8003580:	e001      	b.n	8003586 <LoopFillZerobss>

08003582 <FillZerobss>:
 8003582:	6013      	str	r3, [r2, #0]
 8003584:	3204      	adds	r2, #4

08003586 <LoopFillZerobss>:
 8003586:	42a2      	cmp	r2, r4
 8003588:	d3fb      	bcc.n	8003582 <FillZerobss>
 800358a:	f016 fc15 	bl	8019db8 <__libc_init_array>
 800358e:	f7fe faff 	bl	8001b90 <main>
 8003592:	4770      	bx	lr
 8003594:	20020000 	.word	0x20020000
 8003598:	20000000 	.word	0x20000000
 800359c:	2000022c 	.word	0x2000022c
 80035a0:	0801f0e0 	.word	0x0801f0e0
 80035a4:	20000230 	.word	0x20000230
 80035a8:	200072ec 	.word	0x200072ec

080035ac <ADC_IRQHandler>:
 80035ac:	e7fe      	b.n	80035ac <ADC_IRQHandler>

080035ae <LAN8742_RegisterBusIO>:
  * @param  ioctx: holds device IO functions.  
  * @retval LAN8742_STATUS_OK  if OK
  *         LAN8742_STATUS_ERROR if missing mandatory function
  */
int32_t  LAN8742_RegisterBusIO(lan8742_Object_t *pObj, lan8742_IOCtx_t *ioctx)
{
 80035ae:	b480      	push	{r7}
 80035b0:	b083      	sub	sp, #12
 80035b2:	af00      	add	r7, sp, #0
 80035b4:	6078      	str	r0, [r7, #4]
 80035b6:	6039      	str	r1, [r7, #0]
  if(!pObj || !ioctx->ReadReg || !ioctx->WriteReg || !ioctx->GetTick)
 80035b8:	687b      	ldr	r3, [r7, #4]
 80035ba:	2b00      	cmp	r3, #0
 80035bc:	d00b      	beq.n	80035d6 <LAN8742_RegisterBusIO+0x28>
 80035be:	683b      	ldr	r3, [r7, #0]
 80035c0:	68db      	ldr	r3, [r3, #12]
 80035c2:	2b00      	cmp	r3, #0
 80035c4:	d007      	beq.n	80035d6 <LAN8742_RegisterBusIO+0x28>
 80035c6:	683b      	ldr	r3, [r7, #0]
 80035c8:	689b      	ldr	r3, [r3, #8]
 80035ca:	2b00      	cmp	r3, #0
 80035cc:	d003      	beq.n	80035d6 <LAN8742_RegisterBusIO+0x28>
 80035ce:	683b      	ldr	r3, [r7, #0]
 80035d0:	691b      	ldr	r3, [r3, #16]
 80035d2:	2b00      	cmp	r3, #0
 80035d4:	d102      	bne.n	80035dc <LAN8742_RegisterBusIO+0x2e>
  {
    return LAN8742_STATUS_ERROR;
 80035d6:	f04f 33ff 	mov.w	r3, #4294967295
 80035da:	e014      	b.n	8003606 <LAN8742_RegisterBusIO+0x58>
  }
  
  pObj->IO.Init = ioctx->Init;
 80035dc:	683b      	ldr	r3, [r7, #0]
 80035de:	681a      	ldr	r2, [r3, #0]
 80035e0:	687b      	ldr	r3, [r7, #4]
 80035e2:	609a      	str	r2, [r3, #8]
  pObj->IO.DeInit = ioctx->DeInit;
 80035e4:	683b      	ldr	r3, [r7, #0]
 80035e6:	685a      	ldr	r2, [r3, #4]
 80035e8:	687b      	ldr	r3, [r7, #4]
 80035ea:	60da      	str	r2, [r3, #12]
  pObj->IO.ReadReg = ioctx->ReadReg;
 80035ec:	683b      	ldr	r3, [r7, #0]
 80035ee:	68da      	ldr	r2, [r3, #12]
 80035f0:	687b      	ldr	r3, [r7, #4]
 80035f2:	615a      	str	r2, [r3, #20]
  pObj->IO.WriteReg = ioctx->WriteReg;
 80035f4:	683b      	ldr	r3, [r7, #0]
 80035f6:	689a      	ldr	r2, [r3, #8]
 80035f8:	687b      	ldr	r3, [r7, #4]
 80035fa:	611a      	str	r2, [r3, #16]
  pObj->IO.GetTick = ioctx->GetTick;
 80035fc:	683b      	ldr	r3, [r7, #0]
 80035fe:	691a      	ldr	r2, [r3, #16]
 8003600:	687b      	ldr	r3, [r7, #4]
 8003602:	619a      	str	r2, [r3, #24]
  
  return LAN8742_STATUS_OK;
 8003604:	2300      	movs	r3, #0
}
 8003606:	4618      	mov	r0, r3
 8003608:	370c      	adds	r7, #12
 800360a:	46bd      	mov	sp, r7
 800360c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003610:	4770      	bx	lr

08003612 <LAN8742_Init>:
  *         LAN8742_STATUS_READ_ERROR if connot read register
  *         LAN8742_STATUS_WRITE_ERROR if connot write to register
  *         LAN8742_STATUS_RESET_TIMEOUT if cannot perform a software reset
  */
 int32_t LAN8742_Init(lan8742_Object_t *pObj)
 {
 8003612:	b580      	push	{r7, lr}
 8003614:	b086      	sub	sp, #24
 8003616:	af00      	add	r7, sp, #0
 8003618:	6078      	str	r0, [r7, #4]
   uint32_t tickstart = 0, regvalue = 0, addr = 0;
 800361a:	2300      	movs	r3, #0
 800361c:	60fb      	str	r3, [r7, #12]
 800361e:	2300      	movs	r3, #0
 8003620:	60bb      	str	r3, [r7, #8]
 8003622:	2300      	movs	r3, #0
 8003624:	617b      	str	r3, [r7, #20]
   int32_t status = LAN8742_STATUS_OK;
 8003626:	2300      	movs	r3, #0
 8003628:	613b      	str	r3, [r7, #16]
   
   if(pObj->Is_Initialized == 0)
 800362a:	687b      	ldr	r3, [r7, #4]
 800362c:	685b      	ldr	r3, [r3, #4]
 800362e:	2b00      	cmp	r3, #0
 8003630:	d17c      	bne.n	800372c <LAN8742_Init+0x11a>
   {
     if(pObj->IO.Init != 0)
 8003632:	687b      	ldr	r3, [r7, #4]
 8003634:	689b      	ldr	r3, [r3, #8]
 8003636:	2b00      	cmp	r3, #0
 8003638:	d002      	beq.n	8003640 <LAN8742_Init+0x2e>
     {
       /* GPIO and Clocks initialization */
       pObj->IO.Init();
 800363a:	687b      	ldr	r3, [r7, #4]
 800363c:	689b      	ldr	r3, [r3, #8]
 800363e:	4798      	blx	r3
     }
   
     /* for later check */
     pObj->DevAddr = LAN8742_MAX_DEV_ADDR + 1;
 8003640:	687b      	ldr	r3, [r7, #4]
 8003642:	2220      	movs	r2, #32
 8003644:	601a      	str	r2, [r3, #0]
   
     /* Get the device address from special mode register */  
     for(addr = 0; addr <= LAN8742_MAX_DEV_ADDR; addr ++)
 8003646:	2300      	movs	r3, #0
 8003648:	617b      	str	r3, [r7, #20]
 800364a:	e01c      	b.n	8003686 <LAN8742_Init+0x74>
     {
       if(pObj->IO.ReadReg(addr, LAN8742_SMR, &regvalue) < 0)
 800364c:	687b      	ldr	r3, [r7, #4]
 800364e:	695b      	ldr	r3, [r3, #20]
 8003650:	f107 0208 	add.w	r2, r7, #8
 8003654:	2112      	movs	r1, #18
 8003656:	6978      	ldr	r0, [r7, #20]
 8003658:	4798      	blx	r3
 800365a:	4603      	mov	r3, r0
 800365c:	2b00      	cmp	r3, #0
 800365e:	da03      	bge.n	8003668 <LAN8742_Init+0x56>
       { 
         status = LAN8742_STATUS_READ_ERROR;
 8003660:	f06f 0304 	mvn.w	r3, #4
 8003664:	613b      	str	r3, [r7, #16]
         /* Can't read from this device address 
            continue with next address */
         continue;
 8003666:	e00b      	b.n	8003680 <LAN8742_Init+0x6e>
       }
     
       if((regvalue & LAN8742_SMR_PHY_ADDR) == addr)
 8003668:	68bb      	ldr	r3, [r7, #8]
 800366a:	f003 031f 	and.w	r3, r3, #31
 800366e:	697a      	ldr	r2, [r7, #20]
 8003670:	429a      	cmp	r2, r3
 8003672:	d105      	bne.n	8003680 <LAN8742_Init+0x6e>
       {
         pObj->DevAddr = addr;
 8003674:	687b      	ldr	r3, [r7, #4]
 8003676:	697a      	ldr	r2, [r7, #20]
 8003678:	601a      	str	r2, [r3, #0]
         status = LAN8742_STATUS_OK;
 800367a:	2300      	movs	r3, #0
 800367c:	613b      	str	r3, [r7, #16]
         break;
 800367e:	e005      	b.n	800368c <LAN8742_Init+0x7a>
     for(addr = 0; addr <= LAN8742_MAX_DEV_ADDR; addr ++)
 8003680:	697b      	ldr	r3, [r7, #20]
 8003682:	3301      	adds	r3, #1
 8003684:	617b      	str	r3, [r7, #20]
 8003686:	697b      	ldr	r3, [r7, #20]
 8003688:	2b1f      	cmp	r3, #31
 800368a:	d9df      	bls.n	800364c <LAN8742_Init+0x3a>
       }
     }
   
     if(pObj->DevAddr > LAN8742_MAX_DEV_ADDR)
 800368c:	687b      	ldr	r3, [r7, #4]
 800368e:	681b      	ldr	r3, [r3, #0]
 8003690:	2b1f      	cmp	r3, #31
 8003692:	d902      	bls.n	800369a <LAN8742_Init+0x88>
     {
       status = LAN8742_STATUS_ADDRESS_ERROR;
 8003694:	f06f 0302 	mvn.w	r3, #2
 8003698:	613b      	str	r3, [r7, #16]
     }
     
     /* if device address is matched */
     if(status == LAN8742_STATUS_OK)
 800369a:	693b      	ldr	r3, [r7, #16]
 800369c:	2b00      	cmp	r3, #0
 800369e:	d145      	bne.n	800372c <LAN8742_Init+0x11a>
     {
       /* set a software reset  */
       if(pObj->IO.WriteReg(pObj->DevAddr, LAN8742_BCR, LAN8742_BCR_SOFT_RESET) >= 0)
 80036a0:	687b      	ldr	r3, [r7, #4]
 80036a2:	691b      	ldr	r3, [r3, #16]
 80036a4:	687a      	ldr	r2, [r7, #4]
 80036a6:	6810      	ldr	r0, [r2, #0]
 80036a8:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 80036ac:	2100      	movs	r1, #0
 80036ae:	4798      	blx	r3
 80036b0:	4603      	mov	r3, r0
 80036b2:	2b00      	cmp	r3, #0
 80036b4:	db37      	blt.n	8003726 <LAN8742_Init+0x114>
       { 
         /* get software reset status */
         if(pObj->IO.ReadReg(pObj->DevAddr, LAN8742_BCR, &regvalue) >= 0)
 80036b6:	687b      	ldr	r3, [r7, #4]
 80036b8:	695b      	ldr	r3, [r3, #20]
 80036ba:	687a      	ldr	r2, [r7, #4]
 80036bc:	6810      	ldr	r0, [r2, #0]
 80036be:	f107 0208 	add.w	r2, r7, #8
 80036c2:	2100      	movs	r1, #0
 80036c4:	4798      	blx	r3
 80036c6:	4603      	mov	r3, r0
 80036c8:	2b00      	cmp	r3, #0
 80036ca:	db28      	blt.n	800371e <LAN8742_Init+0x10c>
         { 
           tickstart = pObj->IO.GetTick();
 80036cc:	687b      	ldr	r3, [r7, #4]
 80036ce:	699b      	ldr	r3, [r3, #24]
 80036d0:	4798      	blx	r3
 80036d2:	4603      	mov	r3, r0
 80036d4:	60fb      	str	r3, [r7, #12]
           
           /* wait until software reset is done or timeout occured  */
           while(regvalue & LAN8742_BCR_SOFT_RESET)
 80036d6:	e01c      	b.n	8003712 <LAN8742_Init+0x100>
           {
             if((pObj->IO.GetTick() - tickstart) <= LAN8742_SW_RESET_TO)
 80036d8:	687b      	ldr	r3, [r7, #4]
 80036da:	699b      	ldr	r3, [r3, #24]
 80036dc:	4798      	blx	r3
 80036de:	4603      	mov	r3, r0
 80036e0:	461a      	mov	r2, r3
 80036e2:	68fb      	ldr	r3, [r7, #12]
 80036e4:	1ad3      	subs	r3, r2, r3
 80036e6:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 80036ea:	d80e      	bhi.n	800370a <LAN8742_Init+0xf8>
             {
               if(pObj->IO.ReadReg(pObj->DevAddr, LAN8742_BCR, &regvalue) < 0)
 80036ec:	687b      	ldr	r3, [r7, #4]
 80036ee:	695b      	ldr	r3, [r3, #20]
 80036f0:	687a      	ldr	r2, [r7, #4]
 80036f2:	6810      	ldr	r0, [r2, #0]
 80036f4:	f107 0208 	add.w	r2, r7, #8
 80036f8:	2100      	movs	r1, #0
 80036fa:	4798      	blx	r3
 80036fc:	4603      	mov	r3, r0
 80036fe:	2b00      	cmp	r3, #0
 8003700:	da07      	bge.n	8003712 <LAN8742_Init+0x100>
               { 
                 status = LAN8742_STATUS_READ_ERROR;
 8003702:	f06f 0304 	mvn.w	r3, #4
 8003706:	613b      	str	r3, [r7, #16]
                 break;
 8003708:	e010      	b.n	800372c <LAN8742_Init+0x11a>
               }
             }
             else
             {
               status = LAN8742_STATUS_RESET_TIMEOUT;
 800370a:	f06f 0301 	mvn.w	r3, #1
 800370e:	613b      	str	r3, [r7, #16]
               break;
 8003710:	e00c      	b.n	800372c <LAN8742_Init+0x11a>
           while(regvalue & LAN8742_BCR_SOFT_RESET)
 8003712:	68bb      	ldr	r3, [r7, #8]
 8003714:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8003718:	2b00      	cmp	r3, #0
 800371a:	d1dd      	bne.n	80036d8 <LAN8742_Init+0xc6>
 800371c:	e006      	b.n	800372c <LAN8742_Init+0x11a>
             }
           } 
         }
         else
         {
           status = LAN8742_STATUS_READ_ERROR;
 800371e:	f06f 0304 	mvn.w	r3, #4
 8003722:	613b      	str	r3, [r7, #16]
 8003724:	e002      	b.n	800372c <LAN8742_Init+0x11a>
         }
       }
       else
       {
         status = LAN8742_STATUS_WRITE_ERROR;
 8003726:	f06f 0303 	mvn.w	r3, #3
 800372a:	613b      	str	r3, [r7, #16]
       }
     }
   }
      
   if(status == LAN8742_STATUS_OK)
 800372c:	693b      	ldr	r3, [r7, #16]
 800372e:	2b00      	cmp	r3, #0
 8003730:	d112      	bne.n	8003758 <LAN8742_Init+0x146>
   {
     tickstart =  pObj->IO.GetTick();
 8003732:	687b      	ldr	r3, [r7, #4]
 8003734:	699b      	ldr	r3, [r3, #24]
 8003736:	4798      	blx	r3
 8003738:	4603      	mov	r3, r0
 800373a:	60fb      	str	r3, [r7, #12]
     
     /* Wait for 2s to perform initialization */
     while((pObj->IO.GetTick() - tickstart) <= LAN8742_INIT_TO)
 800373c:	bf00      	nop
 800373e:	687b      	ldr	r3, [r7, #4]
 8003740:	699b      	ldr	r3, [r3, #24]
 8003742:	4798      	blx	r3
 8003744:	4603      	mov	r3, r0
 8003746:	461a      	mov	r2, r3
 8003748:	68fb      	ldr	r3, [r7, #12]
 800374a:	1ad3      	subs	r3, r2, r3
 800374c:	f5b3 6ffa 	cmp.w	r3, #2000	; 0x7d0
 8003750:	d9f5      	bls.n	800373e <LAN8742_Init+0x12c>
     {
     }
     pObj->Is_Initialized = 1;
 8003752:	687b      	ldr	r3, [r7, #4]
 8003754:	2201      	movs	r2, #1
 8003756:	605a      	str	r2, [r3, #4]
   }
   
   return status;
 8003758:	693b      	ldr	r3, [r7, #16]
 }
 800375a:	4618      	mov	r0, r3
 800375c:	3718      	adds	r7, #24
 800375e:	46bd      	mov	sp, r7
 8003760:	bd80      	pop	{r7, pc}

08003762 <LAN8742_GetLinkState>:
  *         LAN8742_STATUS_10MBITS_HALFDUPLEX  if 10Mb/s HD       
  *         LAN8742_STATUS_READ_ERROR if connot read register
  *         LAN8742_STATUS_WRITE_ERROR if connot write to register
  */
int32_t LAN8742_GetLinkState(lan8742_Object_t *pObj)
{
 8003762:	b580      	push	{r7, lr}
 8003764:	b084      	sub	sp, #16
 8003766:	af00      	add	r7, sp, #0
 8003768:	6078      	str	r0, [r7, #4]
  uint32_t readval = 0;
 800376a:	2300      	movs	r3, #0
 800376c:	60fb      	str	r3, [r7, #12]
  
  /* Read Status register  */
  if(pObj->IO.ReadReg(pObj->DevAddr, LAN8742_BSR, &readval) < 0)
 800376e:	687b      	ldr	r3, [r7, #4]
 8003770:	695b      	ldr	r3, [r3, #20]
 8003772:	687a      	ldr	r2, [r7, #4]
 8003774:	6810      	ldr	r0, [r2, #0]
 8003776:	f107 020c 	add.w	r2, r7, #12
 800377a:	2101      	movs	r1, #1
 800377c:	4798      	blx	r3
 800377e:	4603      	mov	r3, r0
 8003780:	2b00      	cmp	r3, #0
 8003782:	da02      	bge.n	800378a <LAN8742_GetLinkState+0x28>
  {
    return LAN8742_STATUS_READ_ERROR;
 8003784:	f06f 0304 	mvn.w	r3, #4
 8003788:	e06e      	b.n	8003868 <LAN8742_GetLinkState+0x106>
  }
  
  /* Read Status register again */
  if(pObj->IO.ReadReg(pObj->DevAddr, LAN8742_BSR, &readval) < 0)
 800378a:	687b      	ldr	r3, [r7, #4]
 800378c:	695b      	ldr	r3, [r3, #20]
 800378e:	687a      	ldr	r2, [r7, #4]
 8003790:	6810      	ldr	r0, [r2, #0]
 8003792:	f107 020c 	add.w	r2, r7, #12
 8003796:	2101      	movs	r1, #1
 8003798:	4798      	blx	r3
 800379a:	4603      	mov	r3, r0
 800379c:	2b00      	cmp	r3, #0
 800379e:	da02      	bge.n	80037a6 <LAN8742_GetLinkState+0x44>
  {
    return LAN8742_STATUS_READ_ERROR;
 80037a0:	f06f 0304 	mvn.w	r3, #4
 80037a4:	e060      	b.n	8003868 <LAN8742_GetLinkState+0x106>
  }
  
  if((readval & LAN8742_BSR_LINK_STATUS) == 0)
 80037a6:	68fb      	ldr	r3, [r7, #12]
 80037a8:	f003 0304 	and.w	r3, r3, #4
 80037ac:	2b00      	cmp	r3, #0
 80037ae:	d101      	bne.n	80037b4 <LAN8742_GetLinkState+0x52>
  {
    /* Return Link Down status */
    return LAN8742_STATUS_LINK_DOWN;    
 80037b0:	2301      	movs	r3, #1
 80037b2:	e059      	b.n	8003868 <LAN8742_GetLinkState+0x106>
  }
  
  /* Check Auto negotiaition */
  if(pObj->IO.ReadReg(pObj->DevAddr, LAN8742_BCR, &readval) < 0)
 80037b4:	687b      	ldr	r3, [r7, #4]
 80037b6:	695b      	ldr	r3, [r3, #20]
 80037b8:	687a      	ldr	r2, [r7, #4]
 80037ba:	6810      	ldr	r0, [r2, #0]
 80037bc:	f107 020c 	add.w	r2, r7, #12
 80037c0:	2100      	movs	r1, #0
 80037c2:	4798      	blx	r3
 80037c4:	4603      	mov	r3, r0
 80037c6:	2b00      	cmp	r3, #0
 80037c8:	da02      	bge.n	80037d0 <LAN8742_GetLinkState+0x6e>
  {
    return LAN8742_STATUS_READ_ERROR;
 80037ca:	f06f 0304 	mvn.w	r3, #4
 80037ce:	e04b      	b.n	8003868 <LAN8742_GetLinkState+0x106>
  }
  
  if((readval & LAN8742_BCR_AUTONEGO_EN) != LAN8742_BCR_AUTONEGO_EN)
 80037d0:	68fb      	ldr	r3, [r7, #12]
 80037d2:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80037d6:	2b00      	cmp	r3, #0
 80037d8:	d11b      	bne.n	8003812 <LAN8742_GetLinkState+0xb0>
  {
    if(((readval & LAN8742_BCR_SPEED_SELECT) == LAN8742_BCR_SPEED_SELECT) && ((readval & LAN8742_BCR_DUPLEX_MODE) == LAN8742_BCR_DUPLEX_MODE)) 
 80037da:	68fb      	ldr	r3, [r7, #12]
 80037dc:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80037e0:	2b00      	cmp	r3, #0
 80037e2:	d006      	beq.n	80037f2 <LAN8742_GetLinkState+0x90>
 80037e4:	68fb      	ldr	r3, [r7, #12]
 80037e6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80037ea:	2b00      	cmp	r3, #0
 80037ec:	d001      	beq.n	80037f2 <LAN8742_GetLinkState+0x90>
    {
      return LAN8742_STATUS_100MBITS_FULLDUPLEX;
 80037ee:	2302      	movs	r3, #2
 80037f0:	e03a      	b.n	8003868 <LAN8742_GetLinkState+0x106>
    }
    else if ((readval & LAN8742_BCR_SPEED_SELECT) == LAN8742_BCR_SPEED_SELECT)
 80037f2:	68fb      	ldr	r3, [r7, #12]
 80037f4:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80037f8:	2b00      	cmp	r3, #0
 80037fa:	d001      	beq.n	8003800 <LAN8742_GetLinkState+0x9e>
    {
      return LAN8742_STATUS_100MBITS_HALFDUPLEX;
 80037fc:	2303      	movs	r3, #3
 80037fe:	e033      	b.n	8003868 <LAN8742_GetLinkState+0x106>
    }        
    else if ((readval & LAN8742_BCR_DUPLEX_MODE) == LAN8742_BCR_DUPLEX_MODE)
 8003800:	68fb      	ldr	r3, [r7, #12]
 8003802:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003806:	2b00      	cmp	r3, #0
 8003808:	d001      	beq.n	800380e <LAN8742_GetLinkState+0xac>
    {
      return LAN8742_STATUS_10MBITS_FULLDUPLEX;
 800380a:	2304      	movs	r3, #4
 800380c:	e02c      	b.n	8003868 <LAN8742_GetLinkState+0x106>
    }
    else
    {
      return LAN8742_STATUS_10MBITS_HALFDUPLEX;
 800380e:	2305      	movs	r3, #5
 8003810:	e02a      	b.n	8003868 <LAN8742_GetLinkState+0x106>
    }  		
  }
  else /* Auto Nego enabled */
  {
    if(pObj->IO.ReadReg(pObj->DevAddr, LAN8742_PHYSCSR, &readval) < 0)
 8003812:	687b      	ldr	r3, [r7, #4]
 8003814:	695b      	ldr	r3, [r3, #20]
 8003816:	687a      	ldr	r2, [r7, #4]
 8003818:	6810      	ldr	r0, [r2, #0]
 800381a:	f107 020c 	add.w	r2, r7, #12
 800381e:	211f      	movs	r1, #31
 8003820:	4798      	blx	r3
 8003822:	4603      	mov	r3, r0
 8003824:	2b00      	cmp	r3, #0
 8003826:	da02      	bge.n	800382e <LAN8742_GetLinkState+0xcc>
    {
      return LAN8742_STATUS_READ_ERROR;
 8003828:	f06f 0304 	mvn.w	r3, #4
 800382c:	e01c      	b.n	8003868 <LAN8742_GetLinkState+0x106>
    }
    
    /* Check if auto nego not done */
    if((readval & LAN8742_PHYSCSR_AUTONEGO_DONE) == 0)
 800382e:	68fb      	ldr	r3, [r7, #12]
 8003830:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8003834:	2b00      	cmp	r3, #0
 8003836:	d101      	bne.n	800383c <LAN8742_GetLinkState+0xda>
    {
      return LAN8742_STATUS_AUTONEGO_NOTDONE;
 8003838:	2306      	movs	r3, #6
 800383a:	e015      	b.n	8003868 <LAN8742_GetLinkState+0x106>
    }
    
    if((readval & LAN8742_PHYSCSR_HCDSPEEDMASK) == LAN8742_PHYSCSR_100BTX_FD)
 800383c:	68fb      	ldr	r3, [r7, #12]
 800383e:	f003 031c 	and.w	r3, r3, #28
 8003842:	2b18      	cmp	r3, #24
 8003844:	d101      	bne.n	800384a <LAN8742_GetLinkState+0xe8>
    {
      return LAN8742_STATUS_100MBITS_FULLDUPLEX;
 8003846:	2302      	movs	r3, #2
 8003848:	e00e      	b.n	8003868 <LAN8742_GetLinkState+0x106>
    }
    else if ((readval & LAN8742_PHYSCSR_HCDSPEEDMASK) == LAN8742_PHYSCSR_100BTX_HD)
 800384a:	68fb      	ldr	r3, [r7, #12]
 800384c:	f003 031c 	and.w	r3, r3, #28
 8003850:	2b08      	cmp	r3, #8
 8003852:	d101      	bne.n	8003858 <LAN8742_GetLinkState+0xf6>
    {
      return LAN8742_STATUS_100MBITS_HALFDUPLEX;
 8003854:	2303      	movs	r3, #3
 8003856:	e007      	b.n	8003868 <LAN8742_GetLinkState+0x106>
    }
    else if ((readval & LAN8742_PHYSCSR_HCDSPEEDMASK) == LAN8742_PHYSCSR_10BT_FD)
 8003858:	68fb      	ldr	r3, [r7, #12]
 800385a:	f003 031c 	and.w	r3, r3, #28
 800385e:	2b14      	cmp	r3, #20
 8003860:	d101      	bne.n	8003866 <LAN8742_GetLinkState+0x104>
    {
      return LAN8742_STATUS_10MBITS_FULLDUPLEX;
 8003862:	2304      	movs	r3, #4
 8003864:	e000      	b.n	8003868 <LAN8742_GetLinkState+0x106>
    }
    else
    {
      return LAN8742_STATUS_10MBITS_HALFDUPLEX;
 8003866:	2305      	movs	r3, #5
    }				
  }
}
 8003868:	4618      	mov	r0, r3
 800386a:	3710      	adds	r7, #16
 800386c:	46bd      	mov	sp, r7
 800386e:	bd80      	pop	{r7, pc}

08003870 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8003870:	b580      	push	{r7, lr}
 8003872:	b082      	sub	sp, #8
 8003874:	af00      	add	r7, sp, #0
   __HAL_ART_CONFIG_BASE_ADDRESS(0x08100000UL);  /* Configure the Cortex-M4 ART Base address to the Flash Bank 2 : */
   __HAL_ART_ENABLE();                           /* Enable the Cortex-M4 ART */
#endif /* DUAL_CORE &&  CORE_CM4 */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8003876:	2003      	movs	r0, #3
 8003878:	f001 ff1c 	bl	80056b4 <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 800387c:	f006 fcfa 	bl	800a274 <HAL_RCC_GetSysClockFreq>
 8003880:	4602      	mov	r2, r0
 8003882:	4b15      	ldr	r3, [pc, #84]	; (80038d8 <HAL_Init+0x68>)
 8003884:	699b      	ldr	r3, [r3, #24]
 8003886:	0a1b      	lsrs	r3, r3, #8
 8003888:	f003 030f 	and.w	r3, r3, #15
 800388c:	4913      	ldr	r1, [pc, #76]	; (80038dc <HAL_Init+0x6c>)
 800388e:	5ccb      	ldrb	r3, [r1, r3]
 8003890:	f003 031f 	and.w	r3, r3, #31
 8003894:	fa22 f303 	lsr.w	r3, r2, r3
 8003898:	607b      	str	r3, [r7, #4]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

  /* Update the SystemD2Clock global variable */
#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 800389a:	4b0f      	ldr	r3, [pc, #60]	; (80038d8 <HAL_Init+0x68>)
 800389c:	699b      	ldr	r3, [r3, #24]
 800389e:	f003 030f 	and.w	r3, r3, #15
 80038a2:	4a0e      	ldr	r2, [pc, #56]	; (80038dc <HAL_Init+0x6c>)
 80038a4:	5cd3      	ldrb	r3, [r2, r3]
 80038a6:	f003 031f 	and.w	r3, r3, #31
 80038aa:	687a      	ldr	r2, [r7, #4]
 80038ac:	fa22 f303 	lsr.w	r3, r2, r3
 80038b0:	4a0b      	ldr	r2, [pc, #44]	; (80038e0 <HAL_Init+0x70>)
 80038b2:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 80038b4:	4a0b      	ldr	r2, [pc, #44]	; (80038e4 <HAL_Init+0x74>)
 80038b6:	687b      	ldr	r3, [r7, #4]
 80038b8:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 80038ba:	2000      	movs	r0, #0
 80038bc:	f000 f814 	bl	80038e8 <HAL_InitTick>
 80038c0:	4603      	mov	r3, r0
 80038c2:	2b00      	cmp	r3, #0
 80038c4:	d001      	beq.n	80038ca <HAL_Init+0x5a>
  {
    return HAL_ERROR;
 80038c6:	2301      	movs	r3, #1
 80038c8:	e002      	b.n	80038d0 <HAL_Init+0x60>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 80038ca:	f7ff f95f 	bl	8002b8c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80038ce:	2300      	movs	r3, #0
}
 80038d0:	4618      	mov	r0, r3
 80038d2:	3708      	adds	r7, #8
 80038d4:	46bd      	mov	sp, r7
 80038d6:	bd80      	pop	{r7, pc}
 80038d8:	58024400 	.word	0x58024400
 80038dc:	0801ebe0 	.word	0x0801ebe0
 80038e0:	20000014 	.word	0x20000014
 80038e4:	20000010 	.word	0x20000010

080038e8 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80038e8:	b580      	push	{r7, lr}
 80038ea:	b082      	sub	sp, #8
 80038ec:	af00      	add	r7, sp, #0
 80038ee:	6078      	str	r0, [r7, #4]
  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that don't take the value zero)*/
  if((uint32_t)uwTickFreq == 0UL)
 80038f0:	4b15      	ldr	r3, [pc, #84]	; (8003948 <HAL_InitTick+0x60>)
 80038f2:	781b      	ldrb	r3, [r3, #0]
 80038f4:	2b00      	cmp	r3, #0
 80038f6:	d101      	bne.n	80038fc <HAL_InitTick+0x14>
  {
    return HAL_ERROR;
 80038f8:	2301      	movs	r3, #1
 80038fa:	e021      	b.n	8003940 <HAL_InitTick+0x58>
  }

    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000UL / (uint32_t)uwTickFreq)) > 0U)
 80038fc:	4b13      	ldr	r3, [pc, #76]	; (800394c <HAL_InitTick+0x64>)
 80038fe:	681a      	ldr	r2, [r3, #0]
 8003900:	4b11      	ldr	r3, [pc, #68]	; (8003948 <HAL_InitTick+0x60>)
 8003902:	781b      	ldrb	r3, [r3, #0]
 8003904:	4619      	mov	r1, r3
 8003906:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800390a:	fbb3 f3f1 	udiv	r3, r3, r1
 800390e:	fbb2 f3f3 	udiv	r3, r2, r3
 8003912:	4618      	mov	r0, r3
 8003914:	f001 ff01 	bl	800571a <HAL_SYSTICK_Config>
 8003918:	4603      	mov	r3, r0
 800391a:	2b00      	cmp	r3, #0
 800391c:	d001      	beq.n	8003922 <HAL_InitTick+0x3a>
    {
      return HAL_ERROR;
 800391e:	2301      	movs	r3, #1
 8003920:	e00e      	b.n	8003940 <HAL_InitTick+0x58>
    }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8003922:	687b      	ldr	r3, [r7, #4]
 8003924:	2b0f      	cmp	r3, #15
 8003926:	d80a      	bhi.n	800393e <HAL_InitTick+0x56>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8003928:	2200      	movs	r2, #0
 800392a:	6879      	ldr	r1, [r7, #4]
 800392c:	f04f 30ff 	mov.w	r0, #4294967295
 8003930:	f001 fecb 	bl	80056ca <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8003934:	4a06      	ldr	r2, [pc, #24]	; (8003950 <HAL_InitTick+0x68>)
 8003936:	687b      	ldr	r3, [r7, #4]
 8003938:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800393a:	2300      	movs	r3, #0
 800393c:	e000      	b.n	8003940 <HAL_InitTick+0x58>
    return HAL_ERROR;
 800393e:	2301      	movs	r3, #1
}
 8003940:	4618      	mov	r0, r3
 8003942:	3708      	adds	r7, #8
 8003944:	46bd      	mov	sp, r7
 8003946:	bd80      	pop	{r7, pc}
 8003948:	20000028 	.word	0x20000028
 800394c:	20000010 	.word	0x20000010
 8003950:	20000024 	.word	0x20000024

08003954 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8003954:	b480      	push	{r7}
 8003956:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8003958:	4b06      	ldr	r3, [pc, #24]	; (8003974 <HAL_IncTick+0x20>)
 800395a:	781b      	ldrb	r3, [r3, #0]
 800395c:	461a      	mov	r2, r3
 800395e:	4b06      	ldr	r3, [pc, #24]	; (8003978 <HAL_IncTick+0x24>)
 8003960:	681b      	ldr	r3, [r3, #0]
 8003962:	4413      	add	r3, r2
 8003964:	4a04      	ldr	r2, [pc, #16]	; (8003978 <HAL_IncTick+0x24>)
 8003966:	6013      	str	r3, [r2, #0]
}
 8003968:	bf00      	nop
 800396a:	46bd      	mov	sp, r7
 800396c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003970:	4770      	bx	lr
 8003972:	bf00      	nop
 8003974:	20000028 	.word	0x20000028
 8003978:	20000608 	.word	0x20000608

0800397c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800397c:	b480      	push	{r7}
 800397e:	af00      	add	r7, sp, #0
  return uwTick;
 8003980:	4b03      	ldr	r3, [pc, #12]	; (8003990 <HAL_GetTick+0x14>)
 8003982:	681b      	ldr	r3, [r3, #0]
}
 8003984:	4618      	mov	r0, r3
 8003986:	46bd      	mov	sp, r7
 8003988:	f85d 7b04 	ldr.w	r7, [sp], #4
 800398c:	4770      	bx	lr
 800398e:	bf00      	nop
 8003990:	20000608 	.word	0x20000608

08003994 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8003994:	b580      	push	{r7, lr}
 8003996:	b084      	sub	sp, #16
 8003998:	af00      	add	r7, sp, #0
 800399a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 800399c:	f7ff ffee 	bl	800397c <HAL_GetTick>
 80039a0:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80039a2:	687b      	ldr	r3, [r7, #4]
 80039a4:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80039a6:	68fb      	ldr	r3, [r7, #12]
 80039a8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80039ac:	d005      	beq.n	80039ba <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80039ae:	4b0a      	ldr	r3, [pc, #40]	; (80039d8 <HAL_Delay+0x44>)
 80039b0:	781b      	ldrb	r3, [r3, #0]
 80039b2:	461a      	mov	r2, r3
 80039b4:	68fb      	ldr	r3, [r7, #12]
 80039b6:	4413      	add	r3, r2
 80039b8:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80039ba:	bf00      	nop
 80039bc:	f7ff ffde 	bl	800397c <HAL_GetTick>
 80039c0:	4602      	mov	r2, r0
 80039c2:	68bb      	ldr	r3, [r7, #8]
 80039c4:	1ad3      	subs	r3, r2, r3
 80039c6:	68fa      	ldr	r2, [r7, #12]
 80039c8:	429a      	cmp	r2, r3
 80039ca:	d8f7      	bhi.n	80039bc <HAL_Delay+0x28>
  {
  }
}
 80039cc:	bf00      	nop
 80039ce:	bf00      	nop
 80039d0:	3710      	adds	r7, #16
 80039d2:	46bd      	mov	sp, r7
 80039d4:	bd80      	pop	{r7, pc}
 80039d6:	bf00      	nop
 80039d8:	20000028 	.word	0x20000028

080039dc <HAL_GetREVID>:
/**
  * @brief  Returns the device revision identifier.
  * @retval Device revision identifier
  */
uint32_t HAL_GetREVID(void)
{
 80039dc:	b480      	push	{r7}
 80039de:	af00      	add	r7, sp, #0
   return((DBGMCU->IDCODE) >> 16);
 80039e0:	4b03      	ldr	r3, [pc, #12]	; (80039f0 <HAL_GetREVID+0x14>)
 80039e2:	681b      	ldr	r3, [r3, #0]
 80039e4:	0c1b      	lsrs	r3, r3, #16
}
 80039e6:	4618      	mov	r0, r3
 80039e8:	46bd      	mov	sp, r7
 80039ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039ee:	4770      	bx	lr
 80039f0:	5c001000 	.word	0x5c001000

080039f4 <HAL_SYSCFG_ETHInterfaceSelect>:
  *   @arg SYSCFG_ETH_MII : Select the Media Independent Interface
  *   @arg SYSCFG_ETH_RMII: Select the Reduced Media Independent Interface
  * @retval None
  */
void HAL_SYSCFG_ETHInterfaceSelect(uint32_t SYSCFG_ETHInterface)
{
 80039f4:	b480      	push	{r7}
 80039f6:	b083      	sub	sp, #12
 80039f8:	af00      	add	r7, sp, #0
 80039fa:	6078      	str	r0, [r7, #4]
  /* Check the parameter */
  assert_param(IS_SYSCFG_ETHERNET_CONFIG(SYSCFG_ETHInterface));

  MODIFY_REG(SYSCFG->PMCR, SYSCFG_PMCR_EPIS_SEL, (uint32_t)(SYSCFG_ETHInterface));
 80039fc:	4b06      	ldr	r3, [pc, #24]	; (8003a18 <HAL_SYSCFG_ETHInterfaceSelect+0x24>)
 80039fe:	685b      	ldr	r3, [r3, #4]
 8003a00:	f423 0260 	bic.w	r2, r3, #14680064	; 0xe00000
 8003a04:	4904      	ldr	r1, [pc, #16]	; (8003a18 <HAL_SYSCFG_ETHInterfaceSelect+0x24>)
 8003a06:	687b      	ldr	r3, [r7, #4]
 8003a08:	4313      	orrs	r3, r2
 8003a0a:	604b      	str	r3, [r1, #4]
}
 8003a0c:	bf00      	nop
 8003a0e:	370c      	adds	r7, #12
 8003a10:	46bd      	mov	sp, r7
 8003a12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a16:	4770      	bx	lr
 8003a18:	58000400 	.word	0x58000400

08003a1c <HAL_SYSCFG_AnalogSwitchConfig>:
  *   @arg SYSCFG_SWITCH_PC3_CLOSE
  * @retval None
  */

void HAL_SYSCFG_AnalogSwitchConfig(uint32_t SYSCFG_AnalogSwitch , uint32_t SYSCFG_SwitchState )
{
 8003a1c:	b480      	push	{r7}
 8003a1e:	b083      	sub	sp, #12
 8003a20:	af00      	add	r7, sp, #0
 8003a22:	6078      	str	r0, [r7, #4]
 8003a24:	6039      	str	r1, [r7, #0]
  /* Check the parameter */
  assert_param(IS_SYSCFG_ANALOG_SWITCH(SYSCFG_AnalogSwitch));
  assert_param(IS_SYSCFG_SWITCH_STATE(SYSCFG_SwitchState));

  MODIFY_REG(SYSCFG->PMCR, (uint32_t) SYSCFG_AnalogSwitch, (uint32_t)(SYSCFG_SwitchState));
 8003a26:	4b07      	ldr	r3, [pc, #28]	; (8003a44 <HAL_SYSCFG_AnalogSwitchConfig+0x28>)
 8003a28:	685a      	ldr	r2, [r3, #4]
 8003a2a:	687b      	ldr	r3, [r7, #4]
 8003a2c:	43db      	mvns	r3, r3
 8003a2e:	401a      	ands	r2, r3
 8003a30:	4904      	ldr	r1, [pc, #16]	; (8003a44 <HAL_SYSCFG_AnalogSwitchConfig+0x28>)
 8003a32:	683b      	ldr	r3, [r7, #0]
 8003a34:	4313      	orrs	r3, r2
 8003a36:	604b      	str	r3, [r1, #4]
}
 8003a38:	bf00      	nop
 8003a3a:	370c      	adds	r7, #12
 8003a3c:	46bd      	mov	sp, r7
 8003a3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a42:	4770      	bx	lr
 8003a44:	58000400 	.word	0x58000400

08003a48 <LL_ADC_SetCommonClock>:
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV128
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV256
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonClock(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t CommonClock)
{
 8003a48:	b480      	push	{r7}
 8003a4a:	b083      	sub	sp, #12
 8003a4c:	af00      	add	r7, sp, #0
 8003a4e:	6078      	str	r0, [r7, #4]
 8003a50:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 8003a52:	687b      	ldr	r3, [r7, #4]
 8003a54:	689b      	ldr	r3, [r3, #8]
 8003a56:	f423 127c 	bic.w	r2, r3, #4128768	; 0x3f0000
 8003a5a:	683b      	ldr	r3, [r7, #0]
 8003a5c:	431a      	orrs	r2, r3
 8003a5e:	687b      	ldr	r3, [r7, #4]
 8003a60:	609a      	str	r2, [r3, #8]
}
 8003a62:	bf00      	nop
 8003a64:	370c      	adds	r7, #12
 8003a66:	46bd      	mov	sp, r7
 8003a68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a6c:	4770      	bx	lr

08003a6e <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 8003a6e:	b480      	push	{r7}
 8003a70:	b083      	sub	sp, #12
 8003a72:	af00      	add	r7, sp, #0
 8003a74:	6078      	str	r0, [r7, #4]
 8003a76:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 8003a78:	687b      	ldr	r3, [r7, #4]
 8003a7a:	689b      	ldr	r3, [r3, #8]
 8003a7c:	f023 72e0 	bic.w	r2, r3, #29360128	; 0x1c00000
 8003a80:	683b      	ldr	r3, [r7, #0]
 8003a82:	431a      	orrs	r2, r3
 8003a84:	687b      	ldr	r3, [r7, #4]
 8003a86:	609a      	str	r2, [r3, #8]
}
 8003a88:	bf00      	nop
 8003a8a:	370c      	adds	r7, #12
 8003a8c:	46bd      	mov	sp, r7
 8003a8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a92:	4770      	bx	lr

08003a94 <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON)
{
 8003a94:	b480      	push	{r7}
 8003a96:	b083      	sub	sp, #12
 8003a98:	af00      	add	r7, sp, #0
 8003a9a:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 8003a9c:	687b      	ldr	r3, [r7, #4]
 8003a9e:	689b      	ldr	r3, [r3, #8]
 8003aa0:	f003 73e0 	and.w	r3, r3, #29360128	; 0x1c00000
}
 8003aa4:	4618      	mov	r0, r3
 8003aa6:	370c      	adds	r7, #12
 8003aa8:	46bd      	mov	sp, r7
 8003aaa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003aae:	4770      	bx	lr

08003ab0 <LL_ADC_SetOffset>:
  *             Other channels are slow channels (conversion rate: refer to reference manual).
  * @param  OffsetLevel Value between Min_Data=0x000 and Max_Data=0x3FFFFFF
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffset(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t Channel, uint32_t OffsetLevel)
{
 8003ab0:	b480      	push	{r7}
 8003ab2:	b087      	sub	sp, #28
 8003ab4:	af00      	add	r7, sp, #0
 8003ab6:	60f8      	str	r0, [r7, #12]
 8003ab8:	60b9      	str	r1, [r7, #8]
 8003aba:	607a      	str	r2, [r7, #4]
 8003abc:	603b      	str	r3, [r7, #0]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8003abe:	68fb      	ldr	r3, [r7, #12]
 8003ac0:	3360      	adds	r3, #96	; 0x60
 8003ac2:	461a      	mov	r2, r3
 8003ac4:	68bb      	ldr	r3, [r7, #8]
 8003ac6:	009b      	lsls	r3, r3, #2
 8003ac8:	4413      	add	r3, r2
 8003aca:	617b      	str	r3, [r7, #20]
               ADC3_OFR1_OFFSET1_EN | (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
  }
  else
#endif /* ADC_VER_V5_V90 */
  {
    MODIFY_REG(*preg,
 8003acc:	697b      	ldr	r3, [r7, #20]
 8003ace:	681b      	ldr	r3, [r3, #0]
 8003ad0:	f003 4200 	and.w	r2, r3, #2147483648	; 0x80000000
 8003ad4:	687b      	ldr	r3, [r7, #4]
 8003ad6:	f003 41f8 	and.w	r1, r3, #2080374784	; 0x7c000000
 8003ada:	683b      	ldr	r3, [r7, #0]
 8003adc:	430b      	orrs	r3, r1
 8003ade:	431a      	orrs	r2, r3
 8003ae0:	697b      	ldr	r3, [r7, #20]
 8003ae2:	601a      	str	r2, [r3, #0]
               ADC_OFR1_OFFSET1_CH | ADC_OFR1_OFFSET1,
               (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
  }
}
 8003ae4:	bf00      	nop
 8003ae6:	371c      	adds	r7, #28
 8003ae8:	46bd      	mov	sp, r7
 8003aea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003aee:	4770      	bx	lr

08003af0 <LL_ADC_SetDataRightShift>:
  *         @arg @ref LL_ADC_OFFSET_RSHIFT_ENABLE
  *         @arg @ref LL_ADC_OFFSET_RSHIFT_DISABLE
  * @retval Returned None
  */
__STATIC_INLINE void LL_ADC_SetDataRightShift(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t RigthShift)
{
 8003af0:	b480      	push	{r7}
 8003af2:	b085      	sub	sp, #20
 8003af4:	af00      	add	r7, sp, #0
 8003af6:	60f8      	str	r0, [r7, #12]
 8003af8:	60b9      	str	r1, [r7, #8]
 8003afa:	607a      	str	r2, [r7, #4]
  MODIFY_REG(ADCx->CFGR2, (ADC_CFGR2_RSHIFT1 | ADC_CFGR2_RSHIFT2 | ADC_CFGR2_RSHIFT3 | ADC_CFGR2_RSHIFT4), RigthShift << (Offsety & 0x1FUL));
 8003afc:	68fb      	ldr	r3, [r7, #12]
 8003afe:	691b      	ldr	r3, [r3, #16]
 8003b00:	f423 42f0 	bic.w	r2, r3, #30720	; 0x7800
 8003b04:	68bb      	ldr	r3, [r7, #8]
 8003b06:	f003 031f 	and.w	r3, r3, #31
 8003b0a:	6879      	ldr	r1, [r7, #4]
 8003b0c:	fa01 f303 	lsl.w	r3, r1, r3
 8003b10:	431a      	orrs	r2, r3
 8003b12:	68fb      	ldr	r3, [r7, #12]
 8003b14:	611a      	str	r2, [r3, #16]
}
 8003b16:	bf00      	nop
 8003b18:	3714      	adds	r7, #20
 8003b1a:	46bd      	mov	sp, r7
 8003b1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b20:	4770      	bx	lr

08003b22 <LL_ADC_SetOffsetSignedSaturation>:
  *         @arg @ref LL_ADC_OFFSET_SIGNED_SATURATION_ENABLE
  *         @arg @ref LL_ADC_OFFSET_SIGNED_SATURATION_DISABLE
  * @retval Returned None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSignedSaturation(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSignedSaturation)
{
 8003b22:	b480      	push	{r7}
 8003b24:	b087      	sub	sp, #28
 8003b26:	af00      	add	r7, sp, #0
 8003b28:	60f8      	str	r0, [r7, #12]
 8003b2a:	60b9      	str	r1, [r7, #8]
 8003b2c:	607a      	str	r2, [r7, #4]
    /* Function not available on this instance */
  }
  else
#endif  /* ADC_VER_V5_V90 */
  {
    __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8003b2e:	68fb      	ldr	r3, [r7, #12]
 8003b30:	3360      	adds	r3, #96	; 0x60
 8003b32:	461a      	mov	r2, r3
 8003b34:	68bb      	ldr	r3, [r7, #8]
 8003b36:	009b      	lsls	r3, r3, #2
 8003b38:	4413      	add	r3, r2
 8003b3a:	617b      	str	r3, [r7, #20]
    MODIFY_REG(*preg, ADC_OFR1_SSATE, OffsetSignedSaturation);
 8003b3c:	697b      	ldr	r3, [r7, #20]
 8003b3e:	681b      	ldr	r3, [r3, #0]
 8003b40:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8003b44:	687b      	ldr	r3, [r7, #4]
 8003b46:	431a      	orrs	r2, r3
 8003b48:	697b      	ldr	r3, [r7, #20]
 8003b4a:	601a      	str	r2, [r3, #0]
  }
}
 8003b4c:	bf00      	nop
 8003b4e:	371c      	adds	r7, #28
 8003b50:	46bd      	mov	sp, r7
 8003b52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b56:	4770      	bx	lr

08003b58 <LL_ADC_REG_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsTriggerSourceSWStart(ADC_TypeDef *ADCx)
{
 8003b58:	b480      	push	{r7}
 8003b5a:	b083      	sub	sp, #12
 8003b5c:	af00      	add	r7, sp, #0
 8003b5e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CFGR, ADC_CFGR_EXTEN) == (LL_ADC_REG_TRIG_SOFTWARE & ADC_CFGR_EXTEN)) ? 1UL : 0UL);
 8003b60:	687b      	ldr	r3, [r7, #4]
 8003b62:	68db      	ldr	r3, [r3, #12]
 8003b64:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8003b68:	2b00      	cmp	r3, #0
 8003b6a:	d101      	bne.n	8003b70 <LL_ADC_REG_IsTriggerSourceSWStart+0x18>
 8003b6c:	2301      	movs	r3, #1
 8003b6e:	e000      	b.n	8003b72 <LL_ADC_REG_IsTriggerSourceSWStart+0x1a>
 8003b70:	2300      	movs	r3, #0
}
 8003b72:	4618      	mov	r0, r3
 8003b74:	370c      	adds	r7, #12
 8003b76:	46bd      	mov	sp, r7
 8003b78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b7c:	4770      	bx	lr

08003b7e <LL_ADC_REG_SetSequencerRanks>:
  *         (3) On STM32H7, fast channel (0.125 us for 14-bit resolution (ADC conversion rate up to 8 Ms/s)).
  *             Other channels are slow channels (conversion rate: refer to reference manual).
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 8003b7e:	b480      	push	{r7}
 8003b80:	b087      	sub	sp, #28
 8003b82:	af00      	add	r7, sp, #0
 8003b84:	60f8      	str	r0, [r7, #12]
 8003b86:	60b9      	str	r1, [r7, #8]
 8003b88:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1, ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));
 8003b8a:	68fb      	ldr	r3, [r7, #12]
 8003b8c:	3330      	adds	r3, #48	; 0x30
 8003b8e:	461a      	mov	r2, r3
 8003b90:	68bb      	ldr	r3, [r7, #8]
 8003b92:	0a1b      	lsrs	r3, r3, #8
 8003b94:	009b      	lsls	r3, r3, #2
 8003b96:	f003 030c 	and.w	r3, r3, #12
 8003b9a:	4413      	add	r3, r2
 8003b9c:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8003b9e:	697b      	ldr	r3, [r7, #20]
 8003ba0:	681a      	ldr	r2, [r3, #0]
 8003ba2:	68bb      	ldr	r3, [r7, #8]
 8003ba4:	f003 031f 	and.w	r3, r3, #31
 8003ba8:	211f      	movs	r1, #31
 8003baa:	fa01 f303 	lsl.w	r3, r1, r3
 8003bae:	43db      	mvns	r3, r3
 8003bb0:	401a      	ands	r2, r3
 8003bb2:	687b      	ldr	r3, [r7, #4]
 8003bb4:	0e9b      	lsrs	r3, r3, #26
 8003bb6:	f003 011f 	and.w	r1, r3, #31
 8003bba:	68bb      	ldr	r3, [r7, #8]
 8003bbc:	f003 031f 	and.w	r3, r3, #31
 8003bc0:	fa01 f303 	lsl.w	r3, r1, r3
 8003bc4:	431a      	orrs	r2, r3
 8003bc6:	697b      	ldr	r3, [r7, #20]
 8003bc8:	601a      	str	r2, [r3, #0]
             ADC_CHANNEL_ID_NUMBER_MASK_POSBIT0 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS) << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 8003bca:	bf00      	nop
 8003bcc:	371c      	adds	r7, #28
 8003bce:	46bd      	mov	sp, r7
 8003bd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bd4:	4770      	bx	lr

08003bd6 <LL_ADC_INJ_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsTriggerSourceSWStart(ADC_TypeDef *ADCx)
{
 8003bd6:	b480      	push	{r7}
 8003bd8:	b083      	sub	sp, #12
 8003bda:	af00      	add	r7, sp, #0
 8003bdc:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->JSQR, ADC_JSQR_JEXTEN) == (LL_ADC_INJ_TRIG_SOFTWARE & ADC_JSQR_JEXTEN)) ? 1UL : 0UL);
 8003bde:	687b      	ldr	r3, [r7, #4]
 8003be0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003be2:	f403 73c0 	and.w	r3, r3, #384	; 0x180
 8003be6:	2b00      	cmp	r3, #0
 8003be8:	d101      	bne.n	8003bee <LL_ADC_INJ_IsTriggerSourceSWStart+0x18>
 8003bea:	2301      	movs	r3, #1
 8003bec:	e000      	b.n	8003bf0 <LL_ADC_INJ_IsTriggerSourceSWStart+0x1a>
 8003bee:	2300      	movs	r3, #0
}
 8003bf0:	4618      	mov	r0, r3
 8003bf2:	370c      	adds	r7, #12
 8003bf4:	46bd      	mov	sp, r7
 8003bf6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bfa:	4770      	bx	lr

08003bfc <LL_ADC_SetChannelSamplingTime>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_387CYCLES_5
  *         @arg @ref LL_ADC_SAMPLINGTIME_810CYCLES_5
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 8003bfc:	b480      	push	{r7}
 8003bfe:	b087      	sub	sp, #28
 8003c00:	af00      	add	r7, sp, #0
 8003c02:	60f8      	str	r0, [r7, #12]
 8003c04:	60b9      	str	r1, [r7, #8]
 8003c06:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1, ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));
 8003c08:	68fb      	ldr	r3, [r7, #12]
 8003c0a:	3314      	adds	r3, #20
 8003c0c:	461a      	mov	r2, r3
 8003c0e:	68bb      	ldr	r3, [r7, #8]
 8003c10:	0e5b      	lsrs	r3, r3, #25
 8003c12:	009b      	lsls	r3, r3, #2
 8003c14:	f003 0304 	and.w	r3, r3, #4
 8003c18:	4413      	add	r3, r2
 8003c1a:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8003c1c:	697b      	ldr	r3, [r7, #20]
 8003c1e:	681a      	ldr	r2, [r3, #0]
 8003c20:	68bb      	ldr	r3, [r7, #8]
 8003c22:	0d1b      	lsrs	r3, r3, #20
 8003c24:	f003 031f 	and.w	r3, r3, #31
 8003c28:	2107      	movs	r1, #7
 8003c2a:	fa01 f303 	lsl.w	r3, r1, r3
 8003c2e:	43db      	mvns	r3, r3
 8003c30:	401a      	ands	r2, r3
 8003c32:	68bb      	ldr	r3, [r7, #8]
 8003c34:	0d1b      	lsrs	r3, r3, #20
 8003c36:	f003 031f 	and.w	r3, r3, #31
 8003c3a:	6879      	ldr	r1, [r7, #4]
 8003c3c:	fa01 f303 	lsl.w	r3, r1, r3
 8003c40:	431a      	orrs	r2, r3
 8003c42:	697b      	ldr	r3, [r7, #20]
 8003c44:	601a      	str	r2, [r3, #0]
             ADC_SMPR1_SMP0 << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS),
             SamplingTime   << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS));
}
 8003c46:	bf00      	nop
 8003c48:	371c      	adds	r7, #28
 8003c4a:	46bd      	mov	sp, r7
 8003c4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c50:	4770      	bx	lr
	...

08003c54 <LL_ADC_SetChannelSingleDiff>:
  *         @arg @ref LL_ADC_SINGLE_ENDED
  *         @arg @ref LL_ADC_DIFFERENTIAL_ENDED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSingleDiff(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SingleDiff)
{
 8003c54:	b480      	push	{r7}
 8003c56:	b085      	sub	sp, #20
 8003c58:	af00      	add	r7, sp, #0
 8003c5a:	60f8      	str	r0, [r7, #12]
 8003c5c:	60b9      	str	r1, [r7, #8]
 8003c5e:	607a      	str	r2, [r7, #4]
  }
#else  /* ADC_VER_V5_V90 */
  /* Bits of channels in single or differential mode are set only for         */
  /* differential mode (for single mode, mask of bits allowed to be set is    */
  /* shifted out of range of bits of channels in single or differential mode. */
  MODIFY_REG(ADCx->DIFSEL,
 8003c60:	68fb      	ldr	r3, [r7, #12]
 8003c62:	f8d3 20c0 	ldr.w	r2, [r3, #192]	; 0xc0
 8003c66:	68bb      	ldr	r3, [r7, #8]
 8003c68:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8003c6c:	43db      	mvns	r3, r3
 8003c6e:	401a      	ands	r2, r3
 8003c70:	687b      	ldr	r3, [r7, #4]
 8003c72:	f003 0318 	and.w	r3, r3, #24
 8003c76:	4908      	ldr	r1, [pc, #32]	; (8003c98 <LL_ADC_SetChannelSingleDiff+0x44>)
 8003c78:	40d9      	lsrs	r1, r3
 8003c7a:	68bb      	ldr	r3, [r7, #8]
 8003c7c:	400b      	ands	r3, r1
 8003c7e:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8003c82:	431a      	orrs	r2, r3
 8003c84:	68fb      	ldr	r3, [r7, #12]
 8003c86:	f8c3 20c0 	str.w	r2, [r3, #192]	; 0xc0
             Channel & ADC_SINGLEDIFF_CHANNEL_MASK,
             (Channel & ADC_SINGLEDIFF_CHANNEL_MASK) & (ADC_DIFSEL_DIFSEL >> (SingleDiff & ADC_SINGLEDIFF_CHANNEL_SHIFT_MASK)));
#endif /* ADC_VER_V5_V90 */
}
 8003c8a:	bf00      	nop
 8003c8c:	3714      	adds	r7, #20
 8003c8e:	46bd      	mov	sp, r7
 8003c90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c94:	4770      	bx	lr
 8003c96:	bf00      	nop
 8003c98:	000fffff 	.word	0x000fffff

08003c9c <LL_ADC_GetMultimode>:
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_SIM
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_ALT
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_INT_INJ_SIM
  */
__STATIC_INLINE uint32_t LL_ADC_GetMultimode(ADC_Common_TypeDef *ADCxy_COMMON)
{
 8003c9c:	b480      	push	{r7}
 8003c9e:	b083      	sub	sp, #12
 8003ca0:	af00      	add	r7, sp, #0
 8003ca2:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_DUAL));
 8003ca4:	687b      	ldr	r3, [r7, #4]
 8003ca6:	689b      	ldr	r3, [r3, #8]
 8003ca8:	f003 031f 	and.w	r3, r3, #31
}
 8003cac:	4618      	mov	r0, r3
 8003cae:	370c      	adds	r7, #12
 8003cb0:	46bd      	mov	sp, r7
 8003cb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cb6:	4770      	bx	lr

08003cb8 <LL_ADC_GetMultiDMATransfer>:
  *         @arg @ref LL_ADC_MULTI_REG_DMA_EACH_ADC
  *         @arg @ref LL_ADC_MULTI_REG_DMA_RES_32_10B
  *         @arg @ref LL_ADC_MULTI_REG_DMA_RES_8B
  */
__STATIC_INLINE uint32_t LL_ADC_GetMultiDMATransfer(ADC_Common_TypeDef *ADCxy_COMMON)
{
 8003cb8:	b480      	push	{r7}
 8003cba:	b083      	sub	sp, #12
 8003cbc:	af00      	add	r7, sp, #0
 8003cbe:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_DAMDF));
 8003cc0:	687b      	ldr	r3, [r7, #4]
 8003cc2:	689b      	ldr	r3, [r3, #8]
 8003cc4:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
}
 8003cc8:	4618      	mov	r0, r3
 8003cca:	370c      	adds	r7, #12
 8003ccc:	46bd      	mov	sp, r7
 8003cce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cd2:	4770      	bx	lr

08003cd4 <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
 8003cd4:	b480      	push	{r7}
 8003cd6:	b083      	sub	sp, #12
 8003cd8:	af00      	add	r7, sp, #0
 8003cda:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 8003cdc:	687b      	ldr	r3, [r7, #4]
 8003cde:	689a      	ldr	r2, [r3, #8]
 8003ce0:	4b04      	ldr	r3, [pc, #16]	; (8003cf4 <LL_ADC_DisableDeepPowerDown+0x20>)
 8003ce2:	4013      	ands	r3, r2
 8003ce4:	687a      	ldr	r2, [r7, #4]
 8003ce6:	6093      	str	r3, [r2, #8]
}
 8003ce8:	bf00      	nop
 8003cea:	370c      	adds	r7, #12
 8003cec:	46bd      	mov	sp, r7
 8003cee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cf2:	4770      	bx	lr
 8003cf4:	5fffffc0 	.word	0x5fffffc0

08003cf8 <LL_ADC_IsDeepPowerDownEnabled>:
  * @rmtoll CR       DEEPPWD        LL_ADC_IsDeepPowerDownEnabled
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(ADC_TypeDef *ADCx)
{
 8003cf8:	b480      	push	{r7}
 8003cfa:	b083      	sub	sp, #12
 8003cfc:	af00      	add	r7, sp, #0
 8003cfe:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 8003d00:	687b      	ldr	r3, [r7, #4]
 8003d02:	689b      	ldr	r3, [r3, #8]
 8003d04:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8003d08:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8003d0c:	d101      	bne.n	8003d12 <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 8003d0e:	2301      	movs	r3, #1
 8003d10:	e000      	b.n	8003d14 <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 8003d12:	2300      	movs	r3, #0
}
 8003d14:	4618      	mov	r0, r3
 8003d16:	370c      	adds	r7, #12
 8003d18:	46bd      	mov	sp, r7
 8003d1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d1e:	4770      	bx	lr

08003d20 <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 8003d20:	b480      	push	{r7}
 8003d22:	b083      	sub	sp, #12
 8003d24:	af00      	add	r7, sp, #0
 8003d26:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8003d28:	687b      	ldr	r3, [r7, #4]
 8003d2a:	689a      	ldr	r2, [r3, #8]
 8003d2c:	4b05      	ldr	r3, [pc, #20]	; (8003d44 <LL_ADC_EnableInternalRegulator+0x24>)
 8003d2e:	4013      	ands	r3, r2
 8003d30:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 8003d34:	687b      	ldr	r3, [r7, #4]
 8003d36:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 8003d38:	bf00      	nop
 8003d3a:	370c      	adds	r7, #12
 8003d3c:	46bd      	mov	sp, r7
 8003d3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d42:	4770      	bx	lr
 8003d44:	6fffffc0 	.word	0x6fffffc0

08003d48 <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(ADC_TypeDef *ADCx)
{
 8003d48:	b480      	push	{r7}
 8003d4a:	b083      	sub	sp, #12
 8003d4c:	af00      	add	r7, sp, #0
 8003d4e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 8003d50:	687b      	ldr	r3, [r7, #4]
 8003d52:	689b      	ldr	r3, [r3, #8]
 8003d54:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003d58:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8003d5c:	d101      	bne.n	8003d62 <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 8003d5e:	2301      	movs	r3, #1
 8003d60:	e000      	b.n	8003d64 <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 8003d62:	2300      	movs	r3, #0
}
 8003d64:	4618      	mov	r0, r3
 8003d66:	370c      	adds	r7, #12
 8003d68:	46bd      	mov	sp, r7
 8003d6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d6e:	4770      	bx	lr

08003d70 <LL_ADC_Enable>:
  * @rmtoll CR       ADEN           LL_ADC_Enable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Enable(ADC_TypeDef *ADCx)
{
 8003d70:	b480      	push	{r7}
 8003d72:	b083      	sub	sp, #12
 8003d74:	af00      	add	r7, sp, #0
 8003d76:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8003d78:	687b      	ldr	r3, [r7, #4]
 8003d7a:	689a      	ldr	r2, [r3, #8]
 8003d7c:	4b05      	ldr	r3, [pc, #20]	; (8003d94 <LL_ADC_Enable+0x24>)
 8003d7e:	4013      	ands	r3, r2
 8003d80:	f043 0201 	orr.w	r2, r3, #1
 8003d84:	687b      	ldr	r3, [r7, #4]
 8003d86:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADEN);
}
 8003d88:	bf00      	nop
 8003d8a:	370c      	adds	r7, #12
 8003d8c:	46bd      	mov	sp, r7
 8003d8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d92:	4770      	bx	lr
 8003d94:	7fffffc0 	.word	0x7fffffc0

08003d98 <LL_ADC_Disable>:
  * @rmtoll CR       ADDIS          LL_ADC_Disable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Disable(ADC_TypeDef *ADCx)
{
 8003d98:	b480      	push	{r7}
 8003d9a:	b083      	sub	sp, #12
 8003d9c:	af00      	add	r7, sp, #0
 8003d9e:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8003da0:	687b      	ldr	r3, [r7, #4]
 8003da2:	689a      	ldr	r2, [r3, #8]
 8003da4:	4b05      	ldr	r3, [pc, #20]	; (8003dbc <LL_ADC_Disable+0x24>)
 8003da6:	4013      	ands	r3, r2
 8003da8:	f043 0202 	orr.w	r2, r3, #2
 8003dac:	687b      	ldr	r3, [r7, #4]
 8003dae:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADDIS);
}
 8003db0:	bf00      	nop
 8003db2:	370c      	adds	r7, #12
 8003db4:	46bd      	mov	sp, r7
 8003db6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003dba:	4770      	bx	lr
 8003dbc:	7fffffc0 	.word	0x7fffffc0

08003dc0 <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(ADC_TypeDef *ADCx)
{
 8003dc0:	b480      	push	{r7}
 8003dc2:	b083      	sub	sp, #12
 8003dc4:	af00      	add	r7, sp, #0
 8003dc6:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8003dc8:	687b      	ldr	r3, [r7, #4]
 8003dca:	689b      	ldr	r3, [r3, #8]
 8003dcc:	f003 0301 	and.w	r3, r3, #1
 8003dd0:	2b01      	cmp	r3, #1
 8003dd2:	d101      	bne.n	8003dd8 <LL_ADC_IsEnabled+0x18>
 8003dd4:	2301      	movs	r3, #1
 8003dd6:	e000      	b.n	8003dda <LL_ADC_IsEnabled+0x1a>
 8003dd8:	2300      	movs	r3, #0
}
 8003dda:	4618      	mov	r0, r3
 8003ddc:	370c      	adds	r7, #12
 8003dde:	46bd      	mov	sp, r7
 8003de0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003de4:	4770      	bx	lr

08003de6 <LL_ADC_IsDisableOngoing>:
  * @rmtoll CR       ADDIS          LL_ADC_IsDisableOngoing
  * @param  ADCx ADC instance
  * @retval 0: no ADC disable command on going.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDisableOngoing(ADC_TypeDef *ADCx)
{
 8003de6:	b480      	push	{r7}
 8003de8:	b083      	sub	sp, #12
 8003dea:	af00      	add	r7, sp, #0
 8003dec:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADDIS) == (ADC_CR_ADDIS)) ? 1UL : 0UL);
 8003dee:	687b      	ldr	r3, [r7, #4]
 8003df0:	689b      	ldr	r3, [r3, #8]
 8003df2:	f003 0302 	and.w	r3, r3, #2
 8003df6:	2b02      	cmp	r3, #2
 8003df8:	d101      	bne.n	8003dfe <LL_ADC_IsDisableOngoing+0x18>
 8003dfa:	2301      	movs	r3, #1
 8003dfc:	e000      	b.n	8003e00 <LL_ADC_IsDisableOngoing+0x1a>
 8003dfe:	2300      	movs	r3, #0
}
 8003e00:	4618      	mov	r0, r3
 8003e02:	370c      	adds	r7, #12
 8003e04:	46bd      	mov	sp, r7
 8003e06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e0a:	4770      	bx	lr

08003e0c <LL_ADC_REG_StartConversion>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_StartConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StartConversion(ADC_TypeDef *ADCx)
{
 8003e0c:	b480      	push	{r7}
 8003e0e:	b083      	sub	sp, #12
 8003e10:	af00      	add	r7, sp, #0
 8003e12:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8003e14:	687b      	ldr	r3, [r7, #4]
 8003e16:	689a      	ldr	r2, [r3, #8]
 8003e18:	4b05      	ldr	r3, [pc, #20]	; (8003e30 <LL_ADC_REG_StartConversion+0x24>)
 8003e1a:	4013      	ands	r3, r2
 8003e1c:	f043 0204 	orr.w	r2, r3, #4
 8003e20:	687b      	ldr	r3, [r7, #4]
 8003e22:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTART);
}
 8003e24:	bf00      	nop
 8003e26:	370c      	adds	r7, #12
 8003e28:	46bd      	mov	sp, r7
 8003e2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e2e:	4770      	bx	lr
 8003e30:	7fffffc0 	.word	0x7fffffc0

08003e34 <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 8003e34:	b480      	push	{r7}
 8003e36:	b083      	sub	sp, #12
 8003e38:	af00      	add	r7, sp, #0
 8003e3a:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8003e3c:	687b      	ldr	r3, [r7, #4]
 8003e3e:	689b      	ldr	r3, [r3, #8]
 8003e40:	f003 0304 	and.w	r3, r3, #4
 8003e44:	2b04      	cmp	r3, #4
 8003e46:	d101      	bne.n	8003e4c <LL_ADC_REG_IsConversionOngoing+0x18>
 8003e48:	2301      	movs	r3, #1
 8003e4a:	e000      	b.n	8003e4e <LL_ADC_REG_IsConversionOngoing+0x1a>
 8003e4c:	2300      	movs	r3, #0
}
 8003e4e:	4618      	mov	r0, r3
 8003e50:	370c      	adds	r7, #12
 8003e52:	46bd      	mov	sp, r7
 8003e54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e58:	4770      	bx	lr

08003e5a <LL_ADC_INJ_IsConversionOngoing>:
  * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 8003e5a:	b480      	push	{r7}
 8003e5c:	b083      	sub	sp, #12
 8003e5e:	af00      	add	r7, sp, #0
 8003e60:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 8003e62:	687b      	ldr	r3, [r7, #4]
 8003e64:	689b      	ldr	r3, [r3, #8]
 8003e66:	f003 0308 	and.w	r3, r3, #8
 8003e6a:	2b08      	cmp	r3, #8
 8003e6c:	d101      	bne.n	8003e72 <LL_ADC_INJ_IsConversionOngoing+0x18>
 8003e6e:	2301      	movs	r3, #1
 8003e70:	e000      	b.n	8003e74 <LL_ADC_INJ_IsConversionOngoing+0x1a>
 8003e72:	2300      	movs	r3, #0
}
 8003e74:	4618      	mov	r0, r3
 8003e76:	370c      	adds	r7, #12
 8003e78:	46bd      	mov	sp, r7
 8003e7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e7e:	4770      	bx	lr

08003e80 <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8003e80:	b590      	push	{r4, r7, lr}
 8003e82:	b089      	sub	sp, #36	; 0x24
 8003e84:	af00      	add	r7, sp, #0
 8003e86:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8003e88:	2300      	movs	r3, #0
 8003e8a:	77fb      	strb	r3, [r7, #31]
  uint32_t tmpCFGR;
  uint32_t tmp_adc_reg_is_conversion_on_going;
  __IO uint32_t wait_loop_index = 0UL;
 8003e8c:	2300      	movs	r3, #0
 8003e8e:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;

  /* Check ADC handle */
  if (hadc == NULL)
 8003e90:	687b      	ldr	r3, [r7, #4]
 8003e92:	2b00      	cmp	r3, #0
 8003e94:	d101      	bne.n	8003e9a <HAL_ADC_Init+0x1a>
  {
    return HAL_ERROR;
 8003e96:	2301      	movs	r3, #1
 8003e98:	e18f      	b.n	80041ba <HAL_ADC_Init+0x33a>
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8003e9a:	687b      	ldr	r3, [r7, #4]
 8003e9c:	68db      	ldr	r3, [r3, #12]
 8003e9e:	2b00      	cmp	r3, #0
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8003ea0:	687b      	ldr	r3, [r7, #4]
 8003ea2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003ea4:	2b00      	cmp	r3, #0
 8003ea6:	d109      	bne.n	8003ebc <HAL_ADC_Init+0x3c>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8003ea8:	6878      	ldr	r0, [r7, #4]
 8003eaa:	f7fe fe89 	bl	8002bc0 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8003eae:	687b      	ldr	r3, [r7, #4]
 8003eb0:	2200      	movs	r2, #0
 8003eb2:	659a      	str	r2, [r3, #88]	; 0x58

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 8003eb4:	687b      	ldr	r3, [r7, #4]
 8003eb6:	2200      	movs	r2, #0
 8003eb8:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 8003ebc:	687b      	ldr	r3, [r7, #4]
 8003ebe:	681b      	ldr	r3, [r3, #0]
 8003ec0:	4618      	mov	r0, r3
 8003ec2:	f7ff ff19 	bl	8003cf8 <LL_ADC_IsDeepPowerDownEnabled>
 8003ec6:	4603      	mov	r3, r0
 8003ec8:	2b00      	cmp	r3, #0
 8003eca:	d004      	beq.n	8003ed6 <HAL_ADC_Init+0x56>
  {
    /* Disable ADC deep power down mode */
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
 8003ecc:	687b      	ldr	r3, [r7, #4]
 8003ece:	681b      	ldr	r3, [r3, #0]
 8003ed0:	4618      	mov	r0, r3
 8003ed2:	f7ff feff 	bl	8003cd4 <LL_ADC_DisableDeepPowerDown>
    /* System was in deep power down mode, calibration must
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8003ed6:	687b      	ldr	r3, [r7, #4]
 8003ed8:	681b      	ldr	r3, [r3, #0]
 8003eda:	4618      	mov	r0, r3
 8003edc:	f7ff ff34 	bl	8003d48 <LL_ADC_IsInternalRegulatorEnabled>
 8003ee0:	4603      	mov	r3, r0
 8003ee2:	2b00      	cmp	r3, #0
 8003ee4:	d114      	bne.n	8003f10 <HAL_ADC_Init+0x90>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 8003ee6:	687b      	ldr	r3, [r7, #4]
 8003ee8:	681b      	ldr	r3, [r3, #0]
 8003eea:	4618      	mov	r0, r3
 8003eec:	f7ff ff18 	bl	8003d20 <LL_ADC_EnableInternalRegulator>

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8003ef0:	4b87      	ldr	r3, [pc, #540]	; (8004110 <HAL_ADC_Init+0x290>)
 8003ef2:	681b      	ldr	r3, [r3, #0]
 8003ef4:	099b      	lsrs	r3, r3, #6
 8003ef6:	4a87      	ldr	r2, [pc, #540]	; (8004114 <HAL_ADC_Init+0x294>)
 8003ef8:	fba2 2303 	umull	r2, r3, r2, r3
 8003efc:	099b      	lsrs	r3, r3, #6
 8003efe:	3301      	adds	r3, #1
 8003f00:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 8003f02:	e002      	b.n	8003f0a <HAL_ADC_Init+0x8a>
    {
      wait_loop_index--;
 8003f04:	68bb      	ldr	r3, [r7, #8]
 8003f06:	3b01      	subs	r3, #1
 8003f08:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 8003f0a:	68bb      	ldr	r3, [r7, #8]
 8003f0c:	2b00      	cmp	r3, #0
 8003f0e:	d1f9      	bne.n	8003f04 <HAL_ADC_Init+0x84>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8003f10:	687b      	ldr	r3, [r7, #4]
 8003f12:	681b      	ldr	r3, [r3, #0]
 8003f14:	4618      	mov	r0, r3
 8003f16:	f7ff ff17 	bl	8003d48 <LL_ADC_IsInternalRegulatorEnabled>
 8003f1a:	4603      	mov	r3, r0
 8003f1c:	2b00      	cmp	r3, #0
 8003f1e:	d10d      	bne.n	8003f3c <HAL_ADC_Init+0xbc>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003f20:	687b      	ldr	r3, [r7, #4]
 8003f22:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003f24:	f043 0210 	orr.w	r2, r3, #16
 8003f28:	687b      	ldr	r3, [r7, #4]
 8003f2a:	655a      	str	r2, [r3, #84]	; 0x54

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003f2c:	687b      	ldr	r3, [r7, #4]
 8003f2e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003f30:	f043 0201 	orr.w	r2, r3, #1
 8003f34:	687b      	ldr	r3, [r7, #4]
 8003f36:	659a      	str	r2, [r3, #88]	; 0x58

    tmp_hal_status = HAL_ERROR;
 8003f38:	2301      	movs	r3, #1
 8003f3a:	77fb      	strb	r3, [r7, #31]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_reg_is_conversion_on_going = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8003f3c:	687b      	ldr	r3, [r7, #4]
 8003f3e:	681b      	ldr	r3, [r3, #0]
 8003f40:	4618      	mov	r0, r3
 8003f42:	f7ff ff77 	bl	8003e34 <LL_ADC_REG_IsConversionOngoing>
 8003f46:	6178      	str	r0, [r7, #20]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8003f48:	687b      	ldr	r3, [r7, #4]
 8003f4a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003f4c:	f003 0310 	and.w	r3, r3, #16
 8003f50:	2b00      	cmp	r3, #0
 8003f52:	f040 8129 	bne.w	80041a8 <HAL_ADC_Init+0x328>
      && (tmp_adc_reg_is_conversion_on_going == 0UL)
 8003f56:	697b      	ldr	r3, [r7, #20]
 8003f58:	2b00      	cmp	r3, #0
 8003f5a:	f040 8125 	bne.w	80041a8 <HAL_ADC_Init+0x328>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8003f5e:	687b      	ldr	r3, [r7, #4]
 8003f60:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003f62:	f423 7381 	bic.w	r3, r3, #258	; 0x102
 8003f66:	f043 0202 	orr.w	r2, r3, #2
 8003f6a:	687b      	ldr	r3, [r7, #4]
 8003f6c:	655a      	str	r2, [r3, #84]	; 0x54
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8003f6e:	687b      	ldr	r3, [r7, #4]
 8003f70:	681b      	ldr	r3, [r3, #0]
 8003f72:	4618      	mov	r0, r3
 8003f74:	f7ff ff24 	bl	8003dc0 <LL_ADC_IsEnabled>
 8003f78:	4603      	mov	r3, r0
 8003f7a:	2b00      	cmp	r3, #0
 8003f7c:	d136      	bne.n	8003fec <HAL_ADC_Init+0x16c>
    {
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8003f7e:	687b      	ldr	r3, [r7, #4]
 8003f80:	681b      	ldr	r3, [r3, #0]
 8003f82:	4a65      	ldr	r2, [pc, #404]	; (8004118 <HAL_ADC_Init+0x298>)
 8003f84:	4293      	cmp	r3, r2
 8003f86:	d004      	beq.n	8003f92 <HAL_ADC_Init+0x112>
 8003f88:	687b      	ldr	r3, [r7, #4]
 8003f8a:	681b      	ldr	r3, [r3, #0]
 8003f8c:	4a63      	ldr	r2, [pc, #396]	; (800411c <HAL_ADC_Init+0x29c>)
 8003f8e:	4293      	cmp	r3, r2
 8003f90:	d10e      	bne.n	8003fb0 <HAL_ADC_Init+0x130>
 8003f92:	4861      	ldr	r0, [pc, #388]	; (8004118 <HAL_ADC_Init+0x298>)
 8003f94:	f7ff ff14 	bl	8003dc0 <LL_ADC_IsEnabled>
 8003f98:	4604      	mov	r4, r0
 8003f9a:	4860      	ldr	r0, [pc, #384]	; (800411c <HAL_ADC_Init+0x29c>)
 8003f9c:	f7ff ff10 	bl	8003dc0 <LL_ADC_IsEnabled>
 8003fa0:	4603      	mov	r3, r0
 8003fa2:	4323      	orrs	r3, r4
 8003fa4:	2b00      	cmp	r3, #0
 8003fa6:	bf0c      	ite	eq
 8003fa8:	2301      	moveq	r3, #1
 8003faa:	2300      	movne	r3, #0
 8003fac:	b2db      	uxtb	r3, r3
 8003fae:	e008      	b.n	8003fc2 <HAL_ADC_Init+0x142>
 8003fb0:	485b      	ldr	r0, [pc, #364]	; (8004120 <HAL_ADC_Init+0x2a0>)
 8003fb2:	f7ff ff05 	bl	8003dc0 <LL_ADC_IsEnabled>
 8003fb6:	4603      	mov	r3, r0
 8003fb8:	2b00      	cmp	r3, #0
 8003fba:	bf0c      	ite	eq
 8003fbc:	2301      	moveq	r3, #1
 8003fbe:	2300      	movne	r3, #0
 8003fc0:	b2db      	uxtb	r3, r3
 8003fc2:	2b00      	cmp	r3, #0
 8003fc4:	d012      	beq.n	8003fec <HAL_ADC_Init+0x16c>
        /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
        /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() or                             */
        /*     HAL_ADCEx_InjectedConfigChannel() )                              */
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 8003fc6:	687b      	ldr	r3, [r7, #4]
 8003fc8:	681b      	ldr	r3, [r3, #0]
 8003fca:	4a53      	ldr	r2, [pc, #332]	; (8004118 <HAL_ADC_Init+0x298>)
 8003fcc:	4293      	cmp	r3, r2
 8003fce:	d004      	beq.n	8003fda <HAL_ADC_Init+0x15a>
 8003fd0:	687b      	ldr	r3, [r7, #4]
 8003fd2:	681b      	ldr	r3, [r3, #0]
 8003fd4:	4a51      	ldr	r2, [pc, #324]	; (800411c <HAL_ADC_Init+0x29c>)
 8003fd6:	4293      	cmp	r3, r2
 8003fd8:	d101      	bne.n	8003fde <HAL_ADC_Init+0x15e>
 8003fda:	4a52      	ldr	r2, [pc, #328]	; (8004124 <HAL_ADC_Init+0x2a4>)
 8003fdc:	e000      	b.n	8003fe0 <HAL_ADC_Init+0x160>
 8003fde:	4a52      	ldr	r2, [pc, #328]	; (8004128 <HAL_ADC_Init+0x2a8>)
 8003fe0:	687b      	ldr	r3, [r7, #4]
 8003fe2:	685b      	ldr	r3, [r3, #4]
 8003fe4:	4619      	mov	r1, r3
 8003fe6:	4610      	mov	r0, r2
 8003fe8:	f7ff fd2e 	bl	8003a48 <LL_ADC_SetCommonClock>
                  ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
    }

#else

    if ((HAL_GetREVID() > REV_ID_Y) && (ADC_RESOLUTION_8B == hadc->Init.Resolution))
 8003fec:	f7ff fcf6 	bl	80039dc <HAL_GetREVID>
 8003ff0:	4603      	mov	r3, r0
 8003ff2:	f241 0203 	movw	r2, #4099	; 0x1003
 8003ff6:	4293      	cmp	r3, r2
 8003ff8:	d914      	bls.n	8004024 <HAL_ADC_Init+0x1a4>
 8003ffa:	687b      	ldr	r3, [r7, #4]
 8003ffc:	689b      	ldr	r3, [r3, #8]
 8003ffe:	2b10      	cmp	r3, #16
 8004000:	d110      	bne.n	8004024 <HAL_ADC_Init+0x1a4>
    {
      /* for STM32H7 silicon rev.B and above , ADC_CFGR_RES value for 8bits resolution is : b111 */
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 8004002:	687b      	ldr	r3, [r7, #4]
 8004004:	7d5b      	ldrb	r3, [r3, #21]
 8004006:	035a      	lsls	r2, r3, #13
                  hadc->Init.Overrun                                                    |
 8004008:	687b      	ldr	r3, [r7, #4]
 800400a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 800400c:	431a      	orrs	r2, r3
                  hadc->Init.Resolution | (ADC_CFGR_RES_1 | ADC_CFGR_RES_0)                |
 800400e:	687b      	ldr	r3, [r7, #4]
 8004010:	689b      	ldr	r3, [r3, #8]
                  hadc->Init.Overrun                                                    |
 8004012:	431a      	orrs	r2, r3
                  ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 8004014:	687b      	ldr	r3, [r7, #4]
 8004016:	7f1b      	ldrb	r3, [r3, #28]
 8004018:	041b      	lsls	r3, r3, #16
                  hadc->Init.Resolution | (ADC_CFGR_RES_1 | ADC_CFGR_RES_0)                |
 800401a:	4313      	orrs	r3, r2
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 800401c:	f043 030c 	orr.w	r3, r3, #12
 8004020:	61bb      	str	r3, [r7, #24]
 8004022:	e00d      	b.n	8004040 <HAL_ADC_Init+0x1c0>
    }
    else
    {

      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 8004024:	687b      	ldr	r3, [r7, #4]
 8004026:	7d5b      	ldrb	r3, [r3, #21]
 8004028:	035a      	lsls	r2, r3, #13
                  hadc->Init.Overrun                                                    |
 800402a:	687b      	ldr	r3, [r7, #4]
 800402c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 800402e:	431a      	orrs	r2, r3
                  hadc->Init.Resolution                                                 |
 8004030:	687b      	ldr	r3, [r7, #4]
 8004032:	689b      	ldr	r3, [r3, #8]
                  hadc->Init.Overrun                                                    |
 8004034:	431a      	orrs	r2, r3
                  ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 8004036:	687b      	ldr	r3, [r7, #4]
 8004038:	7f1b      	ldrb	r3, [r3, #28]
 800403a:	041b      	lsls	r3, r3, #16
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 800403c:	4313      	orrs	r3, r2
 800403e:	61bb      	str	r3, [r7, #24]
    }

#endif /* ADC_VER_V5_3 */

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8004040:	687b      	ldr	r3, [r7, #4]
 8004042:	7f1b      	ldrb	r3, [r3, #28]
 8004044:	2b01      	cmp	r3, #1
 8004046:	d106      	bne.n	8004056 <HAL_ADC_Init+0x1d6>
    {
      tmpCFGR |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 8004048:	687b      	ldr	r3, [r7, #4]
 800404a:	6a1b      	ldr	r3, [r3, #32]
 800404c:	3b01      	subs	r3, #1
 800404e:	045b      	lsls	r3, r3, #17
 8004050:	69ba      	ldr	r2, [r7, #24]
 8004052:	4313      	orrs	r3, r2
 8004054:	61bb      	str	r3, [r7, #24]
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8004056:	687b      	ldr	r3, [r7, #4]
 8004058:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800405a:	2b00      	cmp	r3, #0
 800405c:	d009      	beq.n	8004072 <HAL_ADC_Init+0x1f2>
    {
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 800405e:	687b      	ldr	r3, [r7, #4]
 8004060:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004062:	f403 7278 	and.w	r2, r3, #992	; 0x3e0
                  | hadc->Init.ExternalTrigConvEdge
 8004066:	687b      	ldr	r3, [r7, #4]
 8004068:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800406a:	4313      	orrs	r3, r2
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 800406c:	69ba      	ldr	r2, [r7, #24]
 800406e:	4313      	orrs	r3, r2
 8004070:	61bb      	str	r3, [r7, #24]
      /* Update Configuration Register CFGR */
      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmpCFGR);
    }
#else
    /* Update Configuration Register CFGR */
    MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmpCFGR);
 8004072:	687b      	ldr	r3, [r7, #4]
 8004074:	681b      	ldr	r3, [r3, #0]
 8004076:	68da      	ldr	r2, [r3, #12]
 8004078:	4b2c      	ldr	r3, [pc, #176]	; (800412c <HAL_ADC_Init+0x2ac>)
 800407a:	4013      	ands	r3, r2
 800407c:	687a      	ldr	r2, [r7, #4]
 800407e:	6812      	ldr	r2, [r2, #0]
 8004080:	69b9      	ldr	r1, [r7, #24]
 8004082:	430b      	orrs	r3, r1
 8004084:	60d3      	str	r3, [r2, #12]
    /* Parameters that can be updated when ADC is disabled or enabled without */
    /* conversion on going on regular and injected groups:                    */
    /*  - Conversion data management      Init.ConversionDataManagement       */
    /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
    /*  - Oversampling parameters         Init.Oversampling                   */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8004086:	687b      	ldr	r3, [r7, #4]
 8004088:	681b      	ldr	r3, [r3, #0]
 800408a:	4618      	mov	r0, r3
 800408c:	f7ff fed2 	bl	8003e34 <LL_ADC_REG_IsConversionOngoing>
 8004090:	6138      	str	r0, [r7, #16]
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8004092:	687b      	ldr	r3, [r7, #4]
 8004094:	681b      	ldr	r3, [r3, #0]
 8004096:	4618      	mov	r0, r3
 8004098:	f7ff fedf 	bl	8003e5a <LL_ADC_INJ_IsConversionOngoing>
 800409c:	60f8      	str	r0, [r7, #12]
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 800409e:	693b      	ldr	r3, [r7, #16]
 80040a0:	2b00      	cmp	r3, #0
 80040a2:	d15f      	bne.n	8004164 <HAL_ADC_Init+0x2e4>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 80040a4:	68fb      	ldr	r3, [r7, #12]
 80040a6:	2b00      	cmp	r3, #0
 80040a8:	d15c      	bne.n	8004164 <HAL_ADC_Init+0x2e4>
                    ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
                    ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.ConversionDataManagement));
      }
#else
      tmpCFGR = (
                  ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 80040aa:	687b      	ldr	r3, [r7, #4]
 80040ac:	7d1b      	ldrb	r3, [r3, #20]
 80040ae:	039a      	lsls	r2, r3, #14
                  ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.ConversionDataManagement));
 80040b0:	687b      	ldr	r3, [r7, #4]
 80040b2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
      tmpCFGR = (
 80040b4:	4313      	orrs	r3, r2
 80040b6:	61bb      	str	r3, [r7, #24]
#endif

      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmpCFGR);
 80040b8:	687b      	ldr	r3, [r7, #4]
 80040ba:	681b      	ldr	r3, [r3, #0]
 80040bc:	68da      	ldr	r2, [r3, #12]
 80040be:	4b1c      	ldr	r3, [pc, #112]	; (8004130 <HAL_ADC_Init+0x2b0>)
 80040c0:	4013      	ands	r3, r2
 80040c2:	687a      	ldr	r2, [r7, #4]
 80040c4:	6812      	ldr	r2, [r2, #0]
 80040c6:	69b9      	ldr	r1, [r7, #24]
 80040c8:	430b      	orrs	r3, r1
 80040ca:	60d3      	str	r3, [r2, #12]

      if (hadc->Init.OversamplingMode == ENABLE)
 80040cc:	687b      	ldr	r3, [r7, #4]
 80040ce:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 80040d2:	2b01      	cmp	r3, #1
 80040d4:	d130      	bne.n	8004138 <HAL_ADC_Init+0x2b8>
#endif
        assert_param(IS_ADC_RIGHT_BIT_SHIFT(hadc->Init.Oversampling.RightBitShift));
        assert_param(IS_ADC_TRIGGERED_OVERSAMPLING_MODE(hadc->Init.Oversampling.TriggeredMode));
        assert_param(IS_ADC_REGOVERSAMPLING_MODE(hadc->Init.Oversampling.OversamplingStopReset));

        if ((hadc->Init.ExternalTrigConv == ADC_SOFTWARE_START)
 80040d6:	687b      	ldr	r3, [r7, #4]
 80040d8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80040da:	2b00      	cmp	r3, #0
        /*  - Oversampling Ratio                                               */
        /*  - Right bit shift                                                  */
        /*  - Left bit shift                                                   */
        /*  - Triggered mode                                                   */
        /*  - Oversampling mode (continued/resumed)                            */
        MODIFY_REG(hadc->Instance->CFGR2, ADC_CFGR2_FIELDS,
 80040dc:	687b      	ldr	r3, [r7, #4]
 80040de:	681b      	ldr	r3, [r3, #0]
 80040e0:	691a      	ldr	r2, [r3, #16]
 80040e2:	4b14      	ldr	r3, [pc, #80]	; (8004134 <HAL_ADC_Init+0x2b4>)
 80040e4:	4013      	ands	r3, r2
 80040e6:	687a      	ldr	r2, [r7, #4]
 80040e8:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 80040ea:	3a01      	subs	r2, #1
 80040ec:	0411      	lsls	r1, r2, #16
 80040ee:	687a      	ldr	r2, [r7, #4]
 80040f0:	6c12      	ldr	r2, [r2, #64]	; 0x40
 80040f2:	4311      	orrs	r1, r2
 80040f4:	687a      	ldr	r2, [r7, #4]
 80040f6:	6c52      	ldr	r2, [r2, #68]	; 0x44
 80040f8:	4311      	orrs	r1, r2
 80040fa:	687a      	ldr	r2, [r7, #4]
 80040fc:	6c92      	ldr	r2, [r2, #72]	; 0x48
 80040fe:	430a      	orrs	r2, r1
 8004100:	431a      	orrs	r2, r3
 8004102:	687b      	ldr	r3, [r7, #4]
 8004104:	681b      	ldr	r3, [r3, #0]
 8004106:	f042 0201 	orr.w	r2, r2, #1
 800410a:	611a      	str	r2, [r3, #16]
 800410c:	e01c      	b.n	8004148 <HAL_ADC_Init+0x2c8>
 800410e:	bf00      	nop
 8004110:	20000010 	.word	0x20000010
 8004114:	053e2d63 	.word	0x053e2d63
 8004118:	40022000 	.word	0x40022000
 800411c:	40022100 	.word	0x40022100
 8004120:	58026000 	.word	0x58026000
 8004124:	40022300 	.word	0x40022300
 8004128:	58026300 	.word	0x58026300
 800412c:	fff0c003 	.word	0xfff0c003
 8004130:	ffffbffc 	.word	0xffffbffc
 8004134:	fc00f81e 	.word	0xfc00f81e

      }
      else
      {
        /* Disable ADC oversampling scope on ADC group regular */
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 8004138:	687b      	ldr	r3, [r7, #4]
 800413a:	681b      	ldr	r3, [r3, #0]
 800413c:	691a      	ldr	r2, [r3, #16]
 800413e:	687b      	ldr	r3, [r7, #4]
 8004140:	681b      	ldr	r3, [r3, #0]
 8004142:	f022 0201 	bic.w	r2, r2, #1
 8004146:	611a      	str	r2, [r3, #16]
      }

      /* Set the LeftShift parameter: it is applied to the final result with or without oversampling */
      MODIFY_REG(hadc->Instance->CFGR2, ADC_CFGR2_LSHIFT, hadc->Init.LeftBitShift);
 8004148:	687b      	ldr	r3, [r7, #4]
 800414a:	681b      	ldr	r3, [r3, #0]
 800414c:	691b      	ldr	r3, [r3, #16]
 800414e:	f023 4170 	bic.w	r1, r3, #4026531840	; 0xf0000000
 8004152:	687b      	ldr	r3, [r7, #4]
 8004154:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8004156:	687b      	ldr	r3, [r7, #4]
 8004158:	681b      	ldr	r3, [r3, #0]
 800415a:	430a      	orrs	r2, r1
 800415c:	611a      	str	r2, [r3, #16]
        /* Configure the BOOST Mode */
        ADC_ConfigureBoostMode(hadc);
      }
#else
      /* Configure the BOOST Mode */
      ADC_ConfigureBoostMode(hadc);
 800415e:	6878      	ldr	r0, [r7, #4]
 8004160:	f001 f804 	bl	800516c <ADC_ConfigureBoostMode>
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 8004164:	687b      	ldr	r3, [r7, #4]
 8004166:	68db      	ldr	r3, [r3, #12]
 8004168:	2b01      	cmp	r3, #1
 800416a:	d10c      	bne.n	8004186 <HAL_ADC_Init+0x306>
    {
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 800416c:	687b      	ldr	r3, [r7, #4]
 800416e:	681b      	ldr	r3, [r3, #0]
 8004170:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004172:	f023 010f 	bic.w	r1, r3, #15
 8004176:	687b      	ldr	r3, [r7, #4]
 8004178:	699b      	ldr	r3, [r3, #24]
 800417a:	1e5a      	subs	r2, r3, #1
 800417c:	687b      	ldr	r3, [r7, #4]
 800417e:	681b      	ldr	r3, [r3, #0]
 8004180:	430a      	orrs	r2, r1
 8004182:	631a      	str	r2, [r3, #48]	; 0x30
 8004184:	e007      	b.n	8004196 <HAL_ADC_Init+0x316>
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 8004186:	687b      	ldr	r3, [r7, #4]
 8004188:	681b      	ldr	r3, [r3, #0]
 800418a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800418c:	687b      	ldr	r3, [r7, #4]
 800418e:	681b      	ldr	r3, [r3, #0]
 8004190:	f022 020f 	bic.w	r2, r2, #15
 8004194:	631a      	str	r2, [r3, #48]	; 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 8004196:	687b      	ldr	r3, [r7, #4]
 8004198:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800419a:	f023 0303 	bic.w	r3, r3, #3
 800419e:	f043 0201 	orr.w	r2, r3, #1
 80041a2:	687b      	ldr	r3, [r7, #4]
 80041a4:	655a      	str	r2, [r3, #84]	; 0x54
 80041a6:	e007      	b.n	80041b8 <HAL_ADC_Init+0x338>
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80041a8:	687b      	ldr	r3, [r7, #4]
 80041aa:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80041ac:	f043 0210 	orr.w	r2, r3, #16
 80041b0:	687b      	ldr	r3, [r7, #4]
 80041b2:	655a      	str	r2, [r3, #84]	; 0x54

    tmp_hal_status = HAL_ERROR;
 80041b4:	2301      	movs	r3, #1
 80041b6:	77fb      	strb	r3, [r7, #31]
  }

  /* Return function status */
  return tmp_hal_status;
 80041b8:	7ffb      	ldrb	r3, [r7, #31]
}
 80041ba:	4618      	mov	r0, r3
 80041bc:	3724      	adds	r7, #36	; 0x24
 80041be:	46bd      	mov	sp, r7
 80041c0:	bd90      	pop	{r4, r7, pc}
 80041c2:	bf00      	nop

080041c4 <HAL_ADC_Start_IT>:
  *          before calling HAL_ADC_Start_IT().
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start_IT(ADC_HandleTypeDef *hadc)
{
 80041c4:	b580      	push	{r7, lr}
 80041c6:	b086      	sub	sp, #24
 80041c8:	af00      	add	r7, sp, #0
 80041ca:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status;
  const ADC_TypeDef *tmpADC_Master;
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 80041cc:	687b      	ldr	r3, [r7, #4]
 80041ce:	681b      	ldr	r3, [r3, #0]
 80041d0:	4a92      	ldr	r2, [pc, #584]	; (800441c <HAL_ADC_Start_IT+0x258>)
 80041d2:	4293      	cmp	r3, r2
 80041d4:	d004      	beq.n	80041e0 <HAL_ADC_Start_IT+0x1c>
 80041d6:	687b      	ldr	r3, [r7, #4]
 80041d8:	681b      	ldr	r3, [r3, #0]
 80041da:	4a91      	ldr	r2, [pc, #580]	; (8004420 <HAL_ADC_Start_IT+0x25c>)
 80041dc:	4293      	cmp	r3, r2
 80041de:	d101      	bne.n	80041e4 <HAL_ADC_Start_IT+0x20>
 80041e0:	4b90      	ldr	r3, [pc, #576]	; (8004424 <HAL_ADC_Start_IT+0x260>)
 80041e2:	e000      	b.n	80041e6 <HAL_ADC_Start_IT+0x22>
 80041e4:	4b90      	ldr	r3, [pc, #576]	; (8004428 <HAL_ADC_Start_IT+0x264>)
 80041e6:	4618      	mov	r0, r3
 80041e8:	f7ff fd58 	bl	8003c9c <LL_ADC_GetMultimode>
 80041ec:	6138      	str	r0, [r7, #16]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Perform ADC enable and conversion start if no conversion is on going */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 80041ee:	687b      	ldr	r3, [r7, #4]
 80041f0:	681b      	ldr	r3, [r3, #0]
 80041f2:	4618      	mov	r0, r3
 80041f4:	f7ff fe1e 	bl	8003e34 <LL_ADC_REG_IsConversionOngoing>
 80041f8:	4603      	mov	r3, r0
 80041fa:	2b00      	cmp	r3, #0
 80041fc:	f040 8118 	bne.w	8004430 <HAL_ADC_Start_IT+0x26c>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 8004200:	687b      	ldr	r3, [r7, #4]
 8004202:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8004206:	2b01      	cmp	r3, #1
 8004208:	d101      	bne.n	800420e <HAL_ADC_Start_IT+0x4a>
 800420a:	2302      	movs	r3, #2
 800420c:	e113      	b.n	8004436 <HAL_ADC_Start_IT+0x272>
 800420e:	687b      	ldr	r3, [r7, #4]
 8004210:	2201      	movs	r2, #1
 8004212:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Enable the ADC peripheral */
    tmp_hal_status = ADC_Enable(hadc);
 8004216:	6878      	ldr	r0, [r7, #4]
 8004218:	f000 febe 	bl	8004f98 <ADC_Enable>
 800421c:	4603      	mov	r3, r0
 800421e:	75fb      	strb	r3, [r7, #23]

    /* Start conversion if ADC is effectively enabled */
    if (tmp_hal_status == HAL_OK)
 8004220:	7dfb      	ldrb	r3, [r7, #23]
 8004222:	2b00      	cmp	r3, #0
 8004224:	f040 80f5 	bne.w	8004412 <HAL_ADC_Start_IT+0x24e>
    {
      /* Set ADC state                                                        */
      /* - Clear state bitfield related to regular group conversion results   */
      /* - Set state bitfield related to regular operation                    */
      ADC_STATE_CLR_SET(hadc->State,
 8004228:	687b      	ldr	r3, [r7, #4]
 800422a:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800422c:	4b7f      	ldr	r3, [pc, #508]	; (800442c <HAL_ADC_Start_IT+0x268>)
 800422e:	4013      	ands	r3, r2
 8004230:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8004234:	687b      	ldr	r3, [r7, #4]
 8004236:	655a      	str	r2, [r3, #84]	; 0x54
                        HAL_ADC_STATE_REG_BUSY);

      /* Reset HAL_ADC_STATE_MULTIMODE_SLAVE bit
        - if ADC instance is master or if multimode feature is not available
        - if multimode setting is disabled (ADC instance slave in independent mode) */
      if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8004238:	687b      	ldr	r3, [r7, #4]
 800423a:	681b      	ldr	r3, [r3, #0]
 800423c:	4a78      	ldr	r2, [pc, #480]	; (8004420 <HAL_ADC_Start_IT+0x25c>)
 800423e:	4293      	cmp	r3, r2
 8004240:	d002      	beq.n	8004248 <HAL_ADC_Start_IT+0x84>
 8004242:	687b      	ldr	r3, [r7, #4]
 8004244:	681b      	ldr	r3, [r3, #0]
 8004246:	e000      	b.n	800424a <HAL_ADC_Start_IT+0x86>
 8004248:	4b74      	ldr	r3, [pc, #464]	; (800441c <HAL_ADC_Start_IT+0x258>)
 800424a:	687a      	ldr	r2, [r7, #4]
 800424c:	6812      	ldr	r2, [r2, #0]
 800424e:	4293      	cmp	r3, r2
 8004250:	d002      	beq.n	8004258 <HAL_ADC_Start_IT+0x94>
          || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8004252:	693b      	ldr	r3, [r7, #16]
 8004254:	2b00      	cmp	r3, #0
 8004256:	d105      	bne.n	8004264 <HAL_ADC_Start_IT+0xa0>
         )
      {
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8004258:	687b      	ldr	r3, [r7, #4]
 800425a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800425c:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 8004260:	687b      	ldr	r3, [r7, #4]
 8004262:	655a      	str	r2, [r3, #84]	; 0x54
      }

      /* Set ADC error code */
      /* Check if a conversion is on going on ADC group injected */
      if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) != 0UL)
 8004264:	687b      	ldr	r3, [r7, #4]
 8004266:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004268:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800426c:	2b00      	cmp	r3, #0
 800426e:	d006      	beq.n	800427e <HAL_ADC_Start_IT+0xba>
      {
        /* Reset ADC error code fields related to regular conversions only */
        CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 8004270:	687b      	ldr	r3, [r7, #4]
 8004272:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004274:	f023 0206 	bic.w	r2, r3, #6
 8004278:	687b      	ldr	r3, [r7, #4]
 800427a:	659a      	str	r2, [r3, #88]	; 0x58
 800427c:	e002      	b.n	8004284 <HAL_ADC_Start_IT+0xc0>
      }
      else
      {
        /* Reset all ADC error code fields */
        ADC_CLEAR_ERRORCODE(hadc);
 800427e:	687b      	ldr	r3, [r7, #4]
 8004280:	2200      	movs	r2, #0
 8004282:	659a      	str	r2, [r3, #88]	; 0x58
      }

      /* Clear ADC group regular conversion flag and overrun flag               */
      /* (To ensure of no unknown state from potential previous ADC operations) */
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 8004284:	687b      	ldr	r3, [r7, #4]
 8004286:	681b      	ldr	r3, [r3, #0]
 8004288:	221c      	movs	r2, #28
 800428a:	601a      	str	r2, [r3, #0]

      /* Process unlocked */
      /* Unlock before starting ADC conversions: in case of potential         */
      /* interruption, to let the process to ADC IRQ Handler.                 */
      __HAL_UNLOCK(hadc);
 800428c:	687b      	ldr	r3, [r7, #4]
 800428e:	2200      	movs	r2, #0
 8004290:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

      /* Disable all interruptions before enabling the desired ones */
      __HAL_ADC_DISABLE_IT(hadc, (ADC_IT_EOC | ADC_IT_EOS | ADC_IT_OVR));
 8004294:	687b      	ldr	r3, [r7, #4]
 8004296:	681b      	ldr	r3, [r3, #0]
 8004298:	685a      	ldr	r2, [r3, #4]
 800429a:	687b      	ldr	r3, [r7, #4]
 800429c:	681b      	ldr	r3, [r3, #0]
 800429e:	f022 021c 	bic.w	r2, r2, #28
 80042a2:	605a      	str	r2, [r3, #4]

      /* Enable ADC end of conversion interrupt */
      switch (hadc->Init.EOCSelection)
 80042a4:	687b      	ldr	r3, [r7, #4]
 80042a6:	691b      	ldr	r3, [r3, #16]
 80042a8:	2b08      	cmp	r3, #8
 80042aa:	d108      	bne.n	80042be <HAL_ADC_Start_IT+0xfa>
      {
        case ADC_EOC_SEQ_CONV:
          __HAL_ADC_ENABLE_IT(hadc, ADC_IT_EOS);
 80042ac:	687b      	ldr	r3, [r7, #4]
 80042ae:	681b      	ldr	r3, [r3, #0]
 80042b0:	685a      	ldr	r2, [r3, #4]
 80042b2:	687b      	ldr	r3, [r7, #4]
 80042b4:	681b      	ldr	r3, [r3, #0]
 80042b6:	f042 0208 	orr.w	r2, r2, #8
 80042ba:	605a      	str	r2, [r3, #4]
          break;
 80042bc:	e008      	b.n	80042d0 <HAL_ADC_Start_IT+0x10c>
        /* case ADC_EOC_SINGLE_CONV */
        default:
          __HAL_ADC_ENABLE_IT(hadc, ADC_IT_EOC);
 80042be:	687b      	ldr	r3, [r7, #4]
 80042c0:	681b      	ldr	r3, [r3, #0]
 80042c2:	685a      	ldr	r2, [r3, #4]
 80042c4:	687b      	ldr	r3, [r7, #4]
 80042c6:	681b      	ldr	r3, [r3, #0]
 80042c8:	f042 0204 	orr.w	r2, r2, #4
 80042cc:	605a      	str	r2, [r3, #4]
          break;
 80042ce:	bf00      	nop

      /* Enable ADC overrun interrupt */
      /* If hadc->Init.Overrun is set to ADC_OVR_DATA_PRESERVED, only then is
         ADC_IT_OVR enabled; otherwise data overwrite is considered as normal
         behavior and no CPU time is lost for a non-processed interruption */
      if (hadc->Init.Overrun == ADC_OVR_DATA_PRESERVED)
 80042d0:	687b      	ldr	r3, [r7, #4]
 80042d2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80042d4:	2b00      	cmp	r3, #0
 80042d6:	d107      	bne.n	80042e8 <HAL_ADC_Start_IT+0x124>
      {
        __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 80042d8:	687b      	ldr	r3, [r7, #4]
 80042da:	681b      	ldr	r3, [r3, #0]
 80042dc:	685a      	ldr	r2, [r3, #4]
 80042de:	687b      	ldr	r3, [r7, #4]
 80042e0:	681b      	ldr	r3, [r3, #0]
 80042e2:	f042 0210 	orr.w	r2, r2, #16
 80042e6:	605a      	str	r2, [r3, #4]
      /* trigger event.                                                       */
      /* Case of multimode enabled (when multimode feature is available):     */
      /*  - if ADC is slave and dual regular conversions are enabled, ADC is  */
      /*    enabled only (conversion is not started),                         */
      /*  - if ADC is master, ADC is enabled and conversion is started.       */
      if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 80042e8:	687b      	ldr	r3, [r7, #4]
 80042ea:	681b      	ldr	r3, [r3, #0]
 80042ec:	4a4c      	ldr	r2, [pc, #304]	; (8004420 <HAL_ADC_Start_IT+0x25c>)
 80042ee:	4293      	cmp	r3, r2
 80042f0:	d002      	beq.n	80042f8 <HAL_ADC_Start_IT+0x134>
 80042f2:	687b      	ldr	r3, [r7, #4]
 80042f4:	681b      	ldr	r3, [r3, #0]
 80042f6:	e000      	b.n	80042fa <HAL_ADC_Start_IT+0x136>
 80042f8:	4b48      	ldr	r3, [pc, #288]	; (800441c <HAL_ADC_Start_IT+0x258>)
 80042fa:	687a      	ldr	r2, [r7, #4]
 80042fc:	6812      	ldr	r2, [r2, #0]
 80042fe:	4293      	cmp	r3, r2
 8004300:	d008      	beq.n	8004314 <HAL_ADC_Start_IT+0x150>
          || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8004302:	693b      	ldr	r3, [r7, #16]
 8004304:	2b00      	cmp	r3, #0
 8004306:	d005      	beq.n	8004314 <HAL_ADC_Start_IT+0x150>
          || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 8004308:	693b      	ldr	r3, [r7, #16]
 800430a:	2b05      	cmp	r3, #5
 800430c:	d002      	beq.n	8004314 <HAL_ADC_Start_IT+0x150>
          || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 800430e:	693b      	ldr	r3, [r7, #16]
 8004310:	2b09      	cmp	r3, #9
 8004312:	d13a      	bne.n	800438a <HAL_ADC_Start_IT+0x1c6>
         )
      {
        /* ADC instance is not a multimode slave instance with multimode regular conversions enabled */
        if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_JAUTO) != 0UL)
 8004314:	687b      	ldr	r3, [r7, #4]
 8004316:	681b      	ldr	r3, [r3, #0]
 8004318:	68db      	ldr	r3, [r3, #12]
 800431a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800431e:	2b00      	cmp	r3, #0
 8004320:	d02d      	beq.n	800437e <HAL_ADC_Start_IT+0x1ba>
        {
          ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 8004322:	687b      	ldr	r3, [r7, #4]
 8004324:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004326:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 800432a:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 800432e:	687b      	ldr	r3, [r7, #4]
 8004330:	655a      	str	r2, [r3, #84]	; 0x54

          /* Enable as well injected interruptions in case
           HAL_ADCEx_InjectedStart_IT() has not been called beforehand. This
           allows to start regular and injected conversions when JAUTO is
           set with a single call to HAL_ADC_Start_IT() */
          switch (hadc->Init.EOCSelection)
 8004332:	687b      	ldr	r3, [r7, #4]
 8004334:	691b      	ldr	r3, [r3, #16]
 8004336:	2b08      	cmp	r3, #8
 8004338:	d110      	bne.n	800435c <HAL_ADC_Start_IT+0x198>
          {
            case ADC_EOC_SEQ_CONV:
              __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOC);
 800433a:	687b      	ldr	r3, [r7, #4]
 800433c:	681b      	ldr	r3, [r3, #0]
 800433e:	685a      	ldr	r2, [r3, #4]
 8004340:	687b      	ldr	r3, [r7, #4]
 8004342:	681b      	ldr	r3, [r3, #0]
 8004344:	f022 0220 	bic.w	r2, r2, #32
 8004348:	605a      	str	r2, [r3, #4]
              __HAL_ADC_ENABLE_IT(hadc, ADC_IT_JEOS);
 800434a:	687b      	ldr	r3, [r7, #4]
 800434c:	681b      	ldr	r3, [r3, #0]
 800434e:	685a      	ldr	r2, [r3, #4]
 8004350:	687b      	ldr	r3, [r7, #4]
 8004352:	681b      	ldr	r3, [r3, #0]
 8004354:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8004358:	605a      	str	r2, [r3, #4]
              break;
 800435a:	e010      	b.n	800437e <HAL_ADC_Start_IT+0x1ba>
            /* case ADC_EOC_SINGLE_CONV */
            default:
              __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOS);
 800435c:	687b      	ldr	r3, [r7, #4]
 800435e:	681b      	ldr	r3, [r3, #0]
 8004360:	685a      	ldr	r2, [r3, #4]
 8004362:	687b      	ldr	r3, [r7, #4]
 8004364:	681b      	ldr	r3, [r3, #0]
 8004366:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800436a:	605a      	str	r2, [r3, #4]
              __HAL_ADC_ENABLE_IT(hadc, ADC_IT_JEOC);
 800436c:	687b      	ldr	r3, [r7, #4]
 800436e:	681b      	ldr	r3, [r3, #0]
 8004370:	685a      	ldr	r2, [r3, #4]
 8004372:	687b      	ldr	r3, [r7, #4]
 8004374:	681b      	ldr	r3, [r3, #0]
 8004376:	f042 0220 	orr.w	r2, r2, #32
 800437a:	605a      	str	r2, [r3, #4]
              break;
 800437c:	bf00      	nop
          }
        }

        /* Start ADC group regular conversion */
        LL_ADC_REG_StartConversion(hadc->Instance);
 800437e:	687b      	ldr	r3, [r7, #4]
 8004380:	681b      	ldr	r3, [r3, #0]
 8004382:	4618      	mov	r0, r3
 8004384:	f7ff fd42 	bl	8003e0c <LL_ADC_REG_StartConversion>
 8004388:	e054      	b.n	8004434 <HAL_ADC_Start_IT+0x270>
      }
      else
      {
        /* ADC instance is a multimode slave instance with multimode regular conversions enabled */
        SET_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 800438a:	687b      	ldr	r3, [r7, #4]
 800438c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800438e:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8004392:	687b      	ldr	r3, [r7, #4]
 8004394:	655a      	str	r2, [r3, #84]	; 0x54
        /* if Master ADC JAUTO bit is set, Slave injected interruptions
           are enabled nevertheless (for same reason as above) */
        tmpADC_Master = __LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance);
 8004396:	687b      	ldr	r3, [r7, #4]
 8004398:	681b      	ldr	r3, [r3, #0]
 800439a:	4a21      	ldr	r2, [pc, #132]	; (8004420 <HAL_ADC_Start_IT+0x25c>)
 800439c:	4293      	cmp	r3, r2
 800439e:	d002      	beq.n	80043a6 <HAL_ADC_Start_IT+0x1e2>
 80043a0:	687b      	ldr	r3, [r7, #4]
 80043a2:	681b      	ldr	r3, [r3, #0]
 80043a4:	e000      	b.n	80043a8 <HAL_ADC_Start_IT+0x1e4>
 80043a6:	4b1d      	ldr	r3, [pc, #116]	; (800441c <HAL_ADC_Start_IT+0x258>)
 80043a8:	60fb      	str	r3, [r7, #12]
        if (READ_BIT(tmpADC_Master->CFGR, ADC_CFGR_JAUTO) != 0UL)
 80043aa:	68fb      	ldr	r3, [r7, #12]
 80043ac:	68db      	ldr	r3, [r3, #12]
 80043ae:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80043b2:	2b00      	cmp	r3, #0
 80043b4:	d03e      	beq.n	8004434 <HAL_ADC_Start_IT+0x270>
        {
          /* First, update Slave State in setting HAL_ADC_STATE_INJ_BUSY bit
             and in resetting HAL_ADC_STATE_INJ_EOC bit */
          ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 80043b6:	687b      	ldr	r3, [r7, #4]
 80043b8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80043ba:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 80043be:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 80043c2:	687b      	ldr	r3, [r7, #4]
 80043c4:	655a      	str	r2, [r3, #84]	; 0x54
          /* Next, set Slave injected interruptions */
          switch (hadc->Init.EOCSelection)
 80043c6:	687b      	ldr	r3, [r7, #4]
 80043c8:	691b      	ldr	r3, [r3, #16]
 80043ca:	2b08      	cmp	r3, #8
 80043cc:	d110      	bne.n	80043f0 <HAL_ADC_Start_IT+0x22c>
          {
            case ADC_EOC_SEQ_CONV:
              __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOC);
 80043ce:	687b      	ldr	r3, [r7, #4]
 80043d0:	681b      	ldr	r3, [r3, #0]
 80043d2:	685a      	ldr	r2, [r3, #4]
 80043d4:	687b      	ldr	r3, [r7, #4]
 80043d6:	681b      	ldr	r3, [r3, #0]
 80043d8:	f022 0220 	bic.w	r2, r2, #32
 80043dc:	605a      	str	r2, [r3, #4]
              __HAL_ADC_ENABLE_IT(hadc, ADC_IT_JEOS);
 80043de:	687b      	ldr	r3, [r7, #4]
 80043e0:	681b      	ldr	r3, [r3, #0]
 80043e2:	685a      	ldr	r2, [r3, #4]
 80043e4:	687b      	ldr	r3, [r7, #4]
 80043e6:	681b      	ldr	r3, [r3, #0]
 80043e8:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80043ec:	605a      	str	r2, [r3, #4]
              break;
 80043ee:	e021      	b.n	8004434 <HAL_ADC_Start_IT+0x270>
            /* case ADC_EOC_SINGLE_CONV */
            default:
              __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOS);
 80043f0:	687b      	ldr	r3, [r7, #4]
 80043f2:	681b      	ldr	r3, [r3, #0]
 80043f4:	685a      	ldr	r2, [r3, #4]
 80043f6:	687b      	ldr	r3, [r7, #4]
 80043f8:	681b      	ldr	r3, [r3, #0]
 80043fa:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80043fe:	605a      	str	r2, [r3, #4]
              __HAL_ADC_ENABLE_IT(hadc, ADC_IT_JEOC);
 8004400:	687b      	ldr	r3, [r7, #4]
 8004402:	681b      	ldr	r3, [r3, #0]
 8004404:	685a      	ldr	r2, [r3, #4]
 8004406:	687b      	ldr	r3, [r7, #4]
 8004408:	681b      	ldr	r3, [r3, #0]
 800440a:	f042 0220 	orr.w	r2, r2, #32
 800440e:	605a      	str	r2, [r3, #4]
              break;
 8004410:	e010      	b.n	8004434 <HAL_ADC_Start_IT+0x270>
      }
    }
    else
    {
      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 8004412:	687b      	ldr	r3, [r7, #4]
 8004414:	2200      	movs	r2, #0
 8004416:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
 800441a:	e00b      	b.n	8004434 <HAL_ADC_Start_IT+0x270>
 800441c:	40022000 	.word	0x40022000
 8004420:	40022100 	.word	0x40022100
 8004424:	40022300 	.word	0x40022300
 8004428:	58026300 	.word	0x58026300
 800442c:	fffff0fe 	.word	0xfffff0fe
    }

  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 8004430:	2302      	movs	r3, #2
 8004432:	75fb      	strb	r3, [r7, #23]
  }

  /* Return function status */
  return tmp_hal_status;
 8004434:	7dfb      	ldrb	r3, [r7, #23]
}
 8004436:	4618      	mov	r0, r3
 8004438:	3718      	adds	r7, #24
 800443a:	46bd      	mov	sp, r7
 800443c:	bd80      	pop	{r7, pc}
 800443e:	bf00      	nop

08004440 <HAL_ADC_GetValue>:
  *         or @ref __HAL_ADC_CLEAR_FLAG(&hadc, ADC_FLAG_EOS).
  * @param hadc ADC handle
  * @retval ADC group regular conversion data
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef *hadc)
{
 8004440:	b480      	push	{r7}
 8004442:	b083      	sub	sp, #12
 8004444:	af00      	add	r7, sp, #0
 8004446:	6078      	str	r0, [r7, #4]

  /* Note: EOC flag is not cleared here by software because automatically     */
  /*       cleared by hardware when reading register DR.                      */

  /* Return ADC converted value */
  return hadc->Instance->DR;
 8004448:	687b      	ldr	r3, [r7, #4]
 800444a:	681b      	ldr	r3, [r3, #0]
 800444c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
}
 800444e:	4618      	mov	r0, r3
 8004450:	370c      	adds	r7, #12
 8004452:	46bd      	mov	sp, r7
 8004454:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004458:	4770      	bx	lr
	...

0800445c <HAL_ADC_IRQHandler>:
  * @brief  Handle ADC interrupt request.
  * @param hadc ADC handle
  * @retval None
  */
void HAL_ADC_IRQHandler(ADC_HandleTypeDef *hadc)
{
 800445c:	b580      	push	{r7, lr}
 800445e:	b08a      	sub	sp, #40	; 0x28
 8004460:	af00      	add	r7, sp, #0
 8004462:	6078      	str	r0, [r7, #4]
  uint32_t overrun_error = 0UL; /* flag set if overrun occurrence has to be considered as an error */
 8004464:	2300      	movs	r3, #0
 8004466:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t tmp_isr = hadc->Instance->ISR;
 8004468:	687b      	ldr	r3, [r7, #4]
 800446a:	681b      	ldr	r3, [r3, #0]
 800446c:	681b      	ldr	r3, [r3, #0]
 800446e:	61fb      	str	r3, [r7, #28]
  uint32_t tmp_ier = hadc->Instance->IER;
 8004470:	687b      	ldr	r3, [r7, #4]
 8004472:	681b      	ldr	r3, [r3, #0]
 8004474:	685b      	ldr	r3, [r3, #4]
 8004476:	61bb      	str	r3, [r7, #24]
  uint32_t tmp_adc_inj_is_trigger_source_sw_start;
  uint32_t tmp_adc_reg_is_trigger_source_sw_start;
  uint32_t tmp_cfgr;
  const ADC_TypeDef *tmpADC_Master;
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8004478:	687b      	ldr	r3, [r7, #4]
 800447a:	681b      	ldr	r3, [r3, #0]
 800447c:	4a87      	ldr	r2, [pc, #540]	; (800469c <HAL_ADC_IRQHandler+0x240>)
 800447e:	4293      	cmp	r3, r2
 8004480:	d004      	beq.n	800448c <HAL_ADC_IRQHandler+0x30>
 8004482:	687b      	ldr	r3, [r7, #4]
 8004484:	681b      	ldr	r3, [r3, #0]
 8004486:	4a86      	ldr	r2, [pc, #536]	; (80046a0 <HAL_ADC_IRQHandler+0x244>)
 8004488:	4293      	cmp	r3, r2
 800448a:	d101      	bne.n	8004490 <HAL_ADC_IRQHandler+0x34>
 800448c:	4b85      	ldr	r3, [pc, #532]	; (80046a4 <HAL_ADC_IRQHandler+0x248>)
 800448e:	e000      	b.n	8004492 <HAL_ADC_IRQHandler+0x36>
 8004490:	4b85      	ldr	r3, [pc, #532]	; (80046a8 <HAL_ADC_IRQHandler+0x24c>)
 8004492:	4618      	mov	r0, r3
 8004494:	f7ff fc02 	bl	8003c9c <LL_ADC_GetMultimode>
 8004498:	6178      	str	r0, [r7, #20]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));

  /* ========== Check End of Sampling flag for ADC group regular ========== */
  if (((tmp_isr & ADC_FLAG_EOSMP) == ADC_FLAG_EOSMP) && ((tmp_ier & ADC_IT_EOSMP) == ADC_IT_EOSMP))
 800449a:	69fb      	ldr	r3, [r7, #28]
 800449c:	f003 0302 	and.w	r3, r3, #2
 80044a0:	2b00      	cmp	r3, #0
 80044a2:	d017      	beq.n	80044d4 <HAL_ADC_IRQHandler+0x78>
 80044a4:	69bb      	ldr	r3, [r7, #24]
 80044a6:	f003 0302 	and.w	r3, r3, #2
 80044aa:	2b00      	cmp	r3, #0
 80044ac:	d012      	beq.n	80044d4 <HAL_ADC_IRQHandler+0x78>
  {
    /* Update state machine on end of sampling status if not in error state */
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 80044ae:	687b      	ldr	r3, [r7, #4]
 80044b0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80044b2:	f003 0310 	and.w	r3, r3, #16
 80044b6:	2b00      	cmp	r3, #0
 80044b8:	d105      	bne.n	80044c6 <HAL_ADC_IRQHandler+0x6a>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOSMP);
 80044ba:	687b      	ldr	r3, [r7, #4]
 80044bc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80044be:	f443 6200 	orr.w	r2, r3, #2048	; 0x800
 80044c2:	687b      	ldr	r3, [r7, #4]
 80044c4:	655a      	str	r2, [r3, #84]	; 0x54

    /* End Of Sampling callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->EndOfSamplingCallback(hadc);
#else
    HAL_ADCEx_EndOfSamplingCallback(hadc);
 80044c6:	6878      	ldr	r0, [r7, #4]
 80044c8:	f001 f81a 	bl	8005500 <HAL_ADCEx_EndOfSamplingCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear regular group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOSMP);
 80044cc:	687b      	ldr	r3, [r7, #4]
 80044ce:	681b      	ldr	r3, [r3, #0]
 80044d0:	2202      	movs	r2, #2
 80044d2:	601a      	str	r2, [r3, #0]
  }

  /* ====== Check ADC group regular end of unitary conversion sequence conversions ===== */
  if ((((tmp_isr & ADC_FLAG_EOC) == ADC_FLAG_EOC) && ((tmp_ier & ADC_IT_EOC) == ADC_IT_EOC)) ||
 80044d4:	69fb      	ldr	r3, [r7, #28]
 80044d6:	f003 0304 	and.w	r3, r3, #4
 80044da:	2b00      	cmp	r3, #0
 80044dc:	d004      	beq.n	80044e8 <HAL_ADC_IRQHandler+0x8c>
 80044de:	69bb      	ldr	r3, [r7, #24]
 80044e0:	f003 0304 	and.w	r3, r3, #4
 80044e4:	2b00      	cmp	r3, #0
 80044e6:	d10a      	bne.n	80044fe <HAL_ADC_IRQHandler+0xa2>
      (((tmp_isr & ADC_FLAG_EOS) == ADC_FLAG_EOS) && ((tmp_ier & ADC_IT_EOS) == ADC_IT_EOS)))
 80044e8:	69fb      	ldr	r3, [r7, #28]
 80044ea:	f003 0308 	and.w	r3, r3, #8
  if ((((tmp_isr & ADC_FLAG_EOC) == ADC_FLAG_EOC) && ((tmp_ier & ADC_IT_EOC) == ADC_IT_EOC)) ||
 80044ee:	2b00      	cmp	r3, #0
 80044f0:	f000 8083 	beq.w	80045fa <HAL_ADC_IRQHandler+0x19e>
      (((tmp_isr & ADC_FLAG_EOS) == ADC_FLAG_EOS) && ((tmp_ier & ADC_IT_EOS) == ADC_IT_EOS)))
 80044f4:	69bb      	ldr	r3, [r7, #24]
 80044f6:	f003 0308 	and.w	r3, r3, #8
 80044fa:	2b00      	cmp	r3, #0
 80044fc:	d07d      	beq.n	80045fa <HAL_ADC_IRQHandler+0x19e>
  {
    /* Update state machine on conversion status if not in error state */
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 80044fe:	687b      	ldr	r3, [r7, #4]
 8004500:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004502:	f003 0310 	and.w	r3, r3, #16
 8004506:	2b00      	cmp	r3, #0
 8004508:	d105      	bne.n	8004516 <HAL_ADC_IRQHandler+0xba>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 800450a:	687b      	ldr	r3, [r7, #4]
 800450c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800450e:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8004512:	687b      	ldr	r3, [r7, #4]
 8004514:	655a      	str	r2, [r3, #84]	; 0x54
    }

    /* Determine whether any further conversion upcoming on group regular     */
    /* by external trigger, continuous mode or scan sequence on going         */
    /* to disable interruption.                                               */
    if (LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 8004516:	687b      	ldr	r3, [r7, #4]
 8004518:	681b      	ldr	r3, [r3, #0]
 800451a:	4618      	mov	r0, r3
 800451c:	f7ff fb1c 	bl	8003b58 <LL_ADC_REG_IsTriggerSourceSWStart>
 8004520:	4603      	mov	r3, r0
 8004522:	2b00      	cmp	r3, #0
 8004524:	d062      	beq.n	80045ec <HAL_ADC_IRQHandler+0x190>
    {
      /* Get relevant register CFGR in ADC instance of ADC master or slave    */
      /* in function of multimode state (for devices with multimode           */
      /* available).                                                          */
      if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8004526:	687b      	ldr	r3, [r7, #4]
 8004528:	681b      	ldr	r3, [r3, #0]
 800452a:	4a5d      	ldr	r2, [pc, #372]	; (80046a0 <HAL_ADC_IRQHandler+0x244>)
 800452c:	4293      	cmp	r3, r2
 800452e:	d002      	beq.n	8004536 <HAL_ADC_IRQHandler+0xda>
 8004530:	687b      	ldr	r3, [r7, #4]
 8004532:	681b      	ldr	r3, [r3, #0]
 8004534:	e000      	b.n	8004538 <HAL_ADC_IRQHandler+0xdc>
 8004536:	4b59      	ldr	r3, [pc, #356]	; (800469c <HAL_ADC_IRQHandler+0x240>)
 8004538:	687a      	ldr	r2, [r7, #4]
 800453a:	6812      	ldr	r2, [r2, #0]
 800453c:	4293      	cmp	r3, r2
 800453e:	d008      	beq.n	8004552 <HAL_ADC_IRQHandler+0xf6>
          || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8004540:	697b      	ldr	r3, [r7, #20]
 8004542:	2b00      	cmp	r3, #0
 8004544:	d005      	beq.n	8004552 <HAL_ADC_IRQHandler+0xf6>
          || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 8004546:	697b      	ldr	r3, [r7, #20]
 8004548:	2b05      	cmp	r3, #5
 800454a:	d002      	beq.n	8004552 <HAL_ADC_IRQHandler+0xf6>
          || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 800454c:	697b      	ldr	r3, [r7, #20]
 800454e:	2b09      	cmp	r3, #9
 8004550:	d104      	bne.n	800455c <HAL_ADC_IRQHandler+0x100>
         )
      {
        /* check CONT bit directly in handle ADC CFGR register */
        tmp_cfgr = READ_REG(hadc->Instance->CFGR);
 8004552:	687b      	ldr	r3, [r7, #4]
 8004554:	681b      	ldr	r3, [r3, #0]
 8004556:	68db      	ldr	r3, [r3, #12]
 8004558:	623b      	str	r3, [r7, #32]
 800455a:	e00c      	b.n	8004576 <HAL_ADC_IRQHandler+0x11a>
      }
      else
      {
        /* else need to check Master ADC CONT bit */
        tmpADC_Master = __LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance);
 800455c:	687b      	ldr	r3, [r7, #4]
 800455e:	681b      	ldr	r3, [r3, #0]
 8004560:	4a4f      	ldr	r2, [pc, #316]	; (80046a0 <HAL_ADC_IRQHandler+0x244>)
 8004562:	4293      	cmp	r3, r2
 8004564:	d002      	beq.n	800456c <HAL_ADC_IRQHandler+0x110>
 8004566:	687b      	ldr	r3, [r7, #4]
 8004568:	681b      	ldr	r3, [r3, #0]
 800456a:	e000      	b.n	800456e <HAL_ADC_IRQHandler+0x112>
 800456c:	4b4b      	ldr	r3, [pc, #300]	; (800469c <HAL_ADC_IRQHandler+0x240>)
 800456e:	613b      	str	r3, [r7, #16]
        tmp_cfgr = READ_REG(tmpADC_Master->CFGR);
 8004570:	693b      	ldr	r3, [r7, #16]
 8004572:	68db      	ldr	r3, [r3, #12]
 8004574:	623b      	str	r3, [r7, #32]
      }

      /* Carry on if continuous mode is disabled */
      if (READ_BIT(tmp_cfgr, ADC_CFGR_CONT) != ADC_CFGR_CONT)
 8004576:	6a3b      	ldr	r3, [r7, #32]
 8004578:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800457c:	2b00      	cmp	r3, #0
 800457e:	d135      	bne.n	80045ec <HAL_ADC_IRQHandler+0x190>
      {
        /* If End of Sequence is reached, disable interrupts */
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS))
 8004580:	687b      	ldr	r3, [r7, #4]
 8004582:	681b      	ldr	r3, [r3, #0]
 8004584:	681b      	ldr	r3, [r3, #0]
 8004586:	f003 0308 	and.w	r3, r3, #8
 800458a:	2b08      	cmp	r3, #8
 800458c:	d12e      	bne.n	80045ec <HAL_ADC_IRQHandler+0x190>
        {
          /* Allowed to modify bits ADC_IT_EOC/ADC_IT_EOS only if bit         */
          /* ADSTART==0 (no conversion on going)                              */
          if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 800458e:	687b      	ldr	r3, [r7, #4]
 8004590:	681b      	ldr	r3, [r3, #0]
 8004592:	4618      	mov	r0, r3
 8004594:	f7ff fc4e 	bl	8003e34 <LL_ADC_REG_IsConversionOngoing>
 8004598:	4603      	mov	r3, r0
 800459a:	2b00      	cmp	r3, #0
 800459c:	d11a      	bne.n	80045d4 <HAL_ADC_IRQHandler+0x178>
          {
            /* Disable ADC end of sequence conversion interrupt */
            /* Note: Overrun interrupt was enabled with EOC interrupt in      */
            /* HAL_Start_IT(), but is not disabled here because can be used   */
            /* by overrun IRQ process below.                                  */
            __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC | ADC_IT_EOS);
 800459e:	687b      	ldr	r3, [r7, #4]
 80045a0:	681b      	ldr	r3, [r3, #0]
 80045a2:	685a      	ldr	r2, [r3, #4]
 80045a4:	687b      	ldr	r3, [r7, #4]
 80045a6:	681b      	ldr	r3, [r3, #0]
 80045a8:	f022 020c 	bic.w	r2, r2, #12
 80045ac:	605a      	str	r2, [r3, #4]

            /* Set ADC state */
            CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 80045ae:	687b      	ldr	r3, [r7, #4]
 80045b0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80045b2:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80045b6:	687b      	ldr	r3, [r7, #4]
 80045b8:	655a      	str	r2, [r3, #84]	; 0x54

            if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 80045ba:	687b      	ldr	r3, [r7, #4]
 80045bc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80045be:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80045c2:	2b00      	cmp	r3, #0
 80045c4:	d112      	bne.n	80045ec <HAL_ADC_IRQHandler+0x190>
            {
              SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 80045c6:	687b      	ldr	r3, [r7, #4]
 80045c8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80045ca:	f043 0201 	orr.w	r2, r3, #1
 80045ce:	687b      	ldr	r3, [r7, #4]
 80045d0:	655a      	str	r2, [r3, #84]	; 0x54
 80045d2:	e00b      	b.n	80045ec <HAL_ADC_IRQHandler+0x190>
            }
          }
          else
          {
            /* Change ADC state to error state */
            SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80045d4:	687b      	ldr	r3, [r7, #4]
 80045d6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80045d8:	f043 0210 	orr.w	r2, r3, #16
 80045dc:	687b      	ldr	r3, [r7, #4]
 80045de:	655a      	str	r2, [r3, #84]	; 0x54

            /* Set ADC error code to ADC peripheral internal error */
            SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80045e0:	687b      	ldr	r3, [r7, #4]
 80045e2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80045e4:	f043 0201 	orr.w	r2, r3, #1
 80045e8:	687b      	ldr	r3, [r7, #4]
 80045ea:	659a      	str	r2, [r3, #88]	; 0x58
    /*       possibility to use:                                              */
    /*        " if( __HAL_ADC_GET_FLAG(&hadc, ADC_FLAG_EOS)) "                */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 80045ec:	6878      	ldr	r0, [r7, #4]
 80045ee:	f7fe fa1f 	bl	8002a30 <HAL_ADC_ConvCpltCallback>
    /* Clear regular group conversion flag */
    /* Note: in case of overrun set to ADC_OVR_DATA_PRESERVED, end of         */
    /*       conversion flags clear induces the release of the preserved data.*/
    /*       Therefore, if the preserved data value is needed, it must be     */
    /*       read preliminarily into HAL_ADC_ConvCpltCallback().              */
    __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS));
 80045f2:	687b      	ldr	r3, [r7, #4]
 80045f4:	681b      	ldr	r3, [r3, #0]
 80045f6:	220c      	movs	r2, #12
 80045f8:	601a      	str	r2, [r3, #0]
  }

  /* ====== Check ADC group injected end of unitary conversion sequence conversions ===== */
  if ((((tmp_isr & ADC_FLAG_JEOC) == ADC_FLAG_JEOC) && ((tmp_ier & ADC_IT_JEOC) == ADC_IT_JEOC)) ||
 80045fa:	69fb      	ldr	r3, [r7, #28]
 80045fc:	f003 0320 	and.w	r3, r3, #32
 8004600:	2b00      	cmp	r3, #0
 8004602:	d004      	beq.n	800460e <HAL_ADC_IRQHandler+0x1b2>
 8004604:	69bb      	ldr	r3, [r7, #24]
 8004606:	f003 0320 	and.w	r3, r3, #32
 800460a:	2b00      	cmp	r3, #0
 800460c:	d10b      	bne.n	8004626 <HAL_ADC_IRQHandler+0x1ca>
      (((tmp_isr & ADC_FLAG_JEOS) == ADC_FLAG_JEOS) && ((tmp_ier & ADC_IT_JEOS) == ADC_IT_JEOS)))
 800460e:	69fb      	ldr	r3, [r7, #28]
 8004610:	f003 0340 	and.w	r3, r3, #64	; 0x40
  if ((((tmp_isr & ADC_FLAG_JEOC) == ADC_FLAG_JEOC) && ((tmp_ier & ADC_IT_JEOC) == ADC_IT_JEOC)) ||
 8004614:	2b00      	cmp	r3, #0
 8004616:	f000 80a0 	beq.w	800475a <HAL_ADC_IRQHandler+0x2fe>
      (((tmp_isr & ADC_FLAG_JEOS) == ADC_FLAG_JEOS) && ((tmp_ier & ADC_IT_JEOS) == ADC_IT_JEOS)))
 800461a:	69bb      	ldr	r3, [r7, #24]
 800461c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004620:	2b00      	cmp	r3, #0
 8004622:	f000 809a 	beq.w	800475a <HAL_ADC_IRQHandler+0x2fe>
  {
    /* Update state machine on conversion status if not in error state */
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8004626:	687b      	ldr	r3, [r7, #4]
 8004628:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800462a:	f003 0310 	and.w	r3, r3, #16
 800462e:	2b00      	cmp	r3, #0
 8004630:	d105      	bne.n	800463e <HAL_ADC_IRQHandler+0x1e2>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_INJ_EOC);
 8004632:	687b      	ldr	r3, [r7, #4]
 8004634:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004636:	f443 5200 	orr.w	r2, r3, #8192	; 0x2000
 800463a:	687b      	ldr	r3, [r7, #4]
 800463c:	655a      	str	r2, [r3, #84]	; 0x54
    }

    /* Retrieve ADC configuration */
    tmp_adc_inj_is_trigger_source_sw_start = LL_ADC_INJ_IsTriggerSourceSWStart(hadc->Instance);
 800463e:	687b      	ldr	r3, [r7, #4]
 8004640:	681b      	ldr	r3, [r3, #0]
 8004642:	4618      	mov	r0, r3
 8004644:	f7ff fac7 	bl	8003bd6 <LL_ADC_INJ_IsTriggerSourceSWStart>
 8004648:	60f8      	str	r0, [r7, #12]
    tmp_adc_reg_is_trigger_source_sw_start = LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance);
 800464a:	687b      	ldr	r3, [r7, #4]
 800464c:	681b      	ldr	r3, [r3, #0]
 800464e:	4618      	mov	r0, r3
 8004650:	f7ff fa82 	bl	8003b58 <LL_ADC_REG_IsTriggerSourceSWStart>
 8004654:	60b8      	str	r0, [r7, #8]
    /* Get relevant register CFGR in ADC instance of ADC master or slave  */
    /* in function of multimode state (for devices with multimode         */
    /* available).                                                        */
    if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8004656:	687b      	ldr	r3, [r7, #4]
 8004658:	681b      	ldr	r3, [r3, #0]
 800465a:	4a11      	ldr	r2, [pc, #68]	; (80046a0 <HAL_ADC_IRQHandler+0x244>)
 800465c:	4293      	cmp	r3, r2
 800465e:	d002      	beq.n	8004666 <HAL_ADC_IRQHandler+0x20a>
 8004660:	687b      	ldr	r3, [r7, #4]
 8004662:	681b      	ldr	r3, [r3, #0]
 8004664:	e000      	b.n	8004668 <HAL_ADC_IRQHandler+0x20c>
 8004666:	4b0d      	ldr	r3, [pc, #52]	; (800469c <HAL_ADC_IRQHandler+0x240>)
 8004668:	687a      	ldr	r2, [r7, #4]
 800466a:	6812      	ldr	r2, [r2, #0]
 800466c:	4293      	cmp	r3, r2
 800466e:	d008      	beq.n	8004682 <HAL_ADC_IRQHandler+0x226>
        || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8004670:	697b      	ldr	r3, [r7, #20]
 8004672:	2b00      	cmp	r3, #0
 8004674:	d005      	beq.n	8004682 <HAL_ADC_IRQHandler+0x226>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_REG_SIMULT)
 8004676:	697b      	ldr	r3, [r7, #20]
 8004678:	2b06      	cmp	r3, #6
 800467a:	d002      	beq.n	8004682 <HAL_ADC_IRQHandler+0x226>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_REG_INTERL)
 800467c:	697b      	ldr	r3, [r7, #20]
 800467e:	2b07      	cmp	r3, #7
 8004680:	d104      	bne.n	800468c <HAL_ADC_IRQHandler+0x230>
       )
    {
      tmp_cfgr = READ_REG(hadc->Instance->CFGR);
 8004682:	687b      	ldr	r3, [r7, #4]
 8004684:	681b      	ldr	r3, [r3, #0]
 8004686:	68db      	ldr	r3, [r3, #12]
 8004688:	623b      	str	r3, [r7, #32]
 800468a:	e014      	b.n	80046b6 <HAL_ADC_IRQHandler+0x25a>
    }
    else
    {
      tmpADC_Master = __LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance);
 800468c:	687b      	ldr	r3, [r7, #4]
 800468e:	681b      	ldr	r3, [r3, #0]
 8004690:	4a03      	ldr	r2, [pc, #12]	; (80046a0 <HAL_ADC_IRQHandler+0x244>)
 8004692:	4293      	cmp	r3, r2
 8004694:	d00a      	beq.n	80046ac <HAL_ADC_IRQHandler+0x250>
 8004696:	687b      	ldr	r3, [r7, #4]
 8004698:	681b      	ldr	r3, [r3, #0]
 800469a:	e008      	b.n	80046ae <HAL_ADC_IRQHandler+0x252>
 800469c:	40022000 	.word	0x40022000
 80046a0:	40022100 	.word	0x40022100
 80046a4:	40022300 	.word	0x40022300
 80046a8:	58026300 	.word	0x58026300
 80046ac:	4b84      	ldr	r3, [pc, #528]	; (80048c0 <HAL_ADC_IRQHandler+0x464>)
 80046ae:	613b      	str	r3, [r7, #16]
      tmp_cfgr = READ_REG(tmpADC_Master->CFGR);
 80046b0:	693b      	ldr	r3, [r7, #16]
 80046b2:	68db      	ldr	r3, [r3, #12]
 80046b4:	623b      	str	r3, [r7, #32]
    /* Disable interruption if no further conversion upcoming by injected     */
    /* external trigger or by automatic injected conversion with regular      */
    /* group having no further conversion upcoming (same conditions as        */
    /* regular group interruption disabling above),                           */
    /* and if injected scan sequence is completed.                            */
    if (tmp_adc_inj_is_trigger_source_sw_start != 0UL)
 80046b6:	68fb      	ldr	r3, [r7, #12]
 80046b8:	2b00      	cmp	r3, #0
 80046ba:	d047      	beq.n	800474c <HAL_ADC_IRQHandler+0x2f0>
    {
      if ((READ_BIT(tmp_cfgr, ADC_CFGR_JAUTO) == 0UL) ||
 80046bc:	6a3b      	ldr	r3, [r7, #32]
 80046be:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80046c2:	2b00      	cmp	r3, #0
 80046c4:	d007      	beq.n	80046d6 <HAL_ADC_IRQHandler+0x27a>
 80046c6:	68bb      	ldr	r3, [r7, #8]
 80046c8:	2b00      	cmp	r3, #0
 80046ca:	d03f      	beq.n	800474c <HAL_ADC_IRQHandler+0x2f0>
          ((tmp_adc_reg_is_trigger_source_sw_start != 0UL) &&
           (READ_BIT(tmp_cfgr, ADC_CFGR_CONT) == 0UL)))
 80046cc:	6a3b      	ldr	r3, [r7, #32]
 80046ce:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
          ((tmp_adc_reg_is_trigger_source_sw_start != 0UL) &&
 80046d2:	2b00      	cmp	r3, #0
 80046d4:	d13a      	bne.n	800474c <HAL_ADC_IRQHandler+0x2f0>
      {
        /* If End of Sequence is reached, disable interrupts */
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOS))
 80046d6:	687b      	ldr	r3, [r7, #4]
 80046d8:	681b      	ldr	r3, [r3, #0]
 80046da:	681b      	ldr	r3, [r3, #0]
 80046dc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80046e0:	2b40      	cmp	r3, #64	; 0x40
 80046e2:	d133      	bne.n	800474c <HAL_ADC_IRQHandler+0x2f0>
          /* when the last context has been fully processed, JSQR is reset      */
          /* by the hardware. Even if no injected conversion is planned to come */
          /* (queue empty, triggers are ignored), it can start again            */
          /* immediately after setting a new context (JADSTART is still set).   */
          /* Therefore, state of HAL ADC injected group is kept to busy.        */
          if (READ_BIT(tmp_cfgr, ADC_CFGR_JQM) == 0UL)
 80046e4:	6a3b      	ldr	r3, [r7, #32]
 80046e6:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80046ea:	2b00      	cmp	r3, #0
 80046ec:	d12e      	bne.n	800474c <HAL_ADC_IRQHandler+0x2f0>
          {
            /* Allowed to modify bits ADC_IT_JEOC/ADC_IT_JEOS only if bit       */
            /* JADSTART==0 (no conversion on going)                             */
            if (LL_ADC_INJ_IsConversionOngoing(hadc->Instance) == 0UL)
 80046ee:	687b      	ldr	r3, [r7, #4]
 80046f0:	681b      	ldr	r3, [r3, #0]
 80046f2:	4618      	mov	r0, r3
 80046f4:	f7ff fbb1 	bl	8003e5a <LL_ADC_INJ_IsConversionOngoing>
 80046f8:	4603      	mov	r3, r0
 80046fa:	2b00      	cmp	r3, #0
 80046fc:	d11a      	bne.n	8004734 <HAL_ADC_IRQHandler+0x2d8>
            {
              /* Disable ADC end of sequence conversion interrupt  */
              __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOC | ADC_IT_JEOS);
 80046fe:	687b      	ldr	r3, [r7, #4]
 8004700:	681b      	ldr	r3, [r3, #0]
 8004702:	685a      	ldr	r2, [r3, #4]
 8004704:	687b      	ldr	r3, [r7, #4]
 8004706:	681b      	ldr	r3, [r3, #0]
 8004708:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 800470c:	605a      	str	r2, [r3, #4]

              /* Set ADC state */
              CLEAR_BIT(hadc->State, HAL_ADC_STATE_INJ_BUSY);
 800470e:	687b      	ldr	r3, [r7, #4]
 8004710:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004712:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8004716:	687b      	ldr	r3, [r7, #4]
 8004718:	655a      	str	r2, [r3, #84]	; 0x54

              if ((hadc->State & HAL_ADC_STATE_REG_BUSY) == 0UL)
 800471a:	687b      	ldr	r3, [r7, #4]
 800471c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800471e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004722:	2b00      	cmp	r3, #0
 8004724:	d112      	bne.n	800474c <HAL_ADC_IRQHandler+0x2f0>
              {
                SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8004726:	687b      	ldr	r3, [r7, #4]
 8004728:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800472a:	f043 0201 	orr.w	r2, r3, #1
 800472e:	687b      	ldr	r3, [r7, #4]
 8004730:	655a      	str	r2, [r3, #84]	; 0x54
 8004732:	e00b      	b.n	800474c <HAL_ADC_IRQHandler+0x2f0>
              }
            }
            else
            {
              /* Update ADC state machine to error */
              SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8004734:	687b      	ldr	r3, [r7, #4]
 8004736:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004738:	f043 0210 	orr.w	r2, r3, #16
 800473c:	687b      	ldr	r3, [r7, #4]
 800473e:	655a      	str	r2, [r3, #84]	; 0x54

              /* Set ADC error code to ADC peripheral internal error */
              SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8004740:	687b      	ldr	r3, [r7, #4]
 8004742:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004744:	f043 0201 	orr.w	r2, r3, #1
 8004748:	687b      	ldr	r3, [r7, #4]
 800474a:	659a      	str	r2, [r3, #88]	; 0x58
              interruption has been triggered by end of conversion or end of
              sequence.    */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->InjectedConvCpltCallback(hadc);
#else
    HAL_ADCEx_InjectedConvCpltCallback(hadc);
 800474c:	6878      	ldr	r0, [r7, #4]
 800474e:	f000 feaf 	bl	80054b0 <HAL_ADCEx_InjectedConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear injected group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_JEOC | ADC_FLAG_JEOS);
 8004752:	687b      	ldr	r3, [r7, #4]
 8004754:	681b      	ldr	r3, [r3, #0]
 8004756:	2260      	movs	r2, #96	; 0x60
 8004758:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check Analog watchdog 1 flag ========== */
  if (((tmp_isr & ADC_FLAG_AWD1) == ADC_FLAG_AWD1) && ((tmp_ier & ADC_IT_AWD1) == ADC_IT_AWD1))
 800475a:	69fb      	ldr	r3, [r7, #28]
 800475c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004760:	2b00      	cmp	r3, #0
 8004762:	d011      	beq.n	8004788 <HAL_ADC_IRQHandler+0x32c>
 8004764:	69bb      	ldr	r3, [r7, #24]
 8004766:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800476a:	2b00      	cmp	r3, #0
 800476c:	d00c      	beq.n	8004788 <HAL_ADC_IRQHandler+0x32c>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD1);
 800476e:	687b      	ldr	r3, [r7, #4]
 8004770:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004772:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8004776:	687b      	ldr	r3, [r7, #4]
 8004778:	655a      	str	r2, [r3, #84]	; 0x54

    /* Level out of window 1 callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->LevelOutOfWindowCallback(hadc);
#else
    HAL_ADC_LevelOutOfWindowCallback(hadc);
 800477a:	6878      	ldr	r0, [r7, #4]
 800477c:	f000 f8a8 	bl	80048d0 <HAL_ADC_LevelOutOfWindowCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear ADC analog watchdog flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD1);
 8004780:	687b      	ldr	r3, [r7, #4]
 8004782:	681b      	ldr	r3, [r3, #0]
 8004784:	2280      	movs	r2, #128	; 0x80
 8004786:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check analog watchdog 2 flag ========== */
  if (((tmp_isr & ADC_FLAG_AWD2) == ADC_FLAG_AWD2) && ((tmp_ier & ADC_IT_AWD2) == ADC_IT_AWD2))
 8004788:	69fb      	ldr	r3, [r7, #28]
 800478a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800478e:	2b00      	cmp	r3, #0
 8004790:	d012      	beq.n	80047b8 <HAL_ADC_IRQHandler+0x35c>
 8004792:	69bb      	ldr	r3, [r7, #24]
 8004794:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004798:	2b00      	cmp	r3, #0
 800479a:	d00d      	beq.n	80047b8 <HAL_ADC_IRQHandler+0x35c>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD2);
 800479c:	687b      	ldr	r3, [r7, #4]
 800479e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80047a0:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 80047a4:	687b      	ldr	r3, [r7, #4]
 80047a6:	655a      	str	r2, [r3, #84]	; 0x54

    /* Level out of window 2 callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->LevelOutOfWindow2Callback(hadc);
#else
    HAL_ADCEx_LevelOutOfWindow2Callback(hadc);
 80047a8:	6878      	ldr	r0, [r7, #4]
 80047aa:	f000 fe95 	bl	80054d8 <HAL_ADCEx_LevelOutOfWindow2Callback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear ADC analog watchdog flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD2);
 80047ae:	687b      	ldr	r3, [r7, #4]
 80047b0:	681b      	ldr	r3, [r3, #0]
 80047b2:	f44f 7280 	mov.w	r2, #256	; 0x100
 80047b6:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check analog watchdog 3 flag ========== */
  if (((tmp_isr & ADC_FLAG_AWD3) == ADC_FLAG_AWD3) && ((tmp_ier & ADC_IT_AWD3) == ADC_IT_AWD3))
 80047b8:	69fb      	ldr	r3, [r7, #28]
 80047ba:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80047be:	2b00      	cmp	r3, #0
 80047c0:	d012      	beq.n	80047e8 <HAL_ADC_IRQHandler+0x38c>
 80047c2:	69bb      	ldr	r3, [r7, #24]
 80047c4:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80047c8:	2b00      	cmp	r3, #0
 80047ca:	d00d      	beq.n	80047e8 <HAL_ADC_IRQHandler+0x38c>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD3);
 80047cc:	687b      	ldr	r3, [r7, #4]
 80047ce:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80047d0:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 80047d4:	687b      	ldr	r3, [r7, #4]
 80047d6:	655a      	str	r2, [r3, #84]	; 0x54

    /* Level out of window 3 callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->LevelOutOfWindow3Callback(hadc);
#else
    HAL_ADCEx_LevelOutOfWindow3Callback(hadc);
 80047d8:	6878      	ldr	r0, [r7, #4]
 80047da:	f000 fe87 	bl	80054ec <HAL_ADCEx_LevelOutOfWindow3Callback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear ADC analog watchdog flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD3);
 80047de:	687b      	ldr	r3, [r7, #4]
 80047e0:	681b      	ldr	r3, [r3, #0]
 80047e2:	f44f 7200 	mov.w	r2, #512	; 0x200
 80047e6:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check Overrun flag ========== */
  if (((tmp_isr & ADC_FLAG_OVR) == ADC_FLAG_OVR) && ((tmp_ier & ADC_IT_OVR) == ADC_IT_OVR))
 80047e8:	69fb      	ldr	r3, [r7, #28]
 80047ea:	f003 0310 	and.w	r3, r3, #16
 80047ee:	2b00      	cmp	r3, #0
 80047f0:	d043      	beq.n	800487a <HAL_ADC_IRQHandler+0x41e>
 80047f2:	69bb      	ldr	r3, [r7, #24]
 80047f4:	f003 0310 	and.w	r3, r3, #16
 80047f8:	2b00      	cmp	r3, #0
 80047fa:	d03e      	beq.n	800487a <HAL_ADC_IRQHandler+0x41e>
    /* overrun event is not considered as an error.                           */
    /* (cf ref manual "Managing conversions without using the DMA and without */
    /* overrun ")                                                             */
    /* Exception for usage with DMA overrun event always considered as an     */
    /* error.                                                                 */
    if (hadc->Init.Overrun == ADC_OVR_DATA_PRESERVED)
 80047fc:	687b      	ldr	r3, [r7, #4]
 80047fe:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004800:	2b00      	cmp	r3, #0
 8004802:	d102      	bne.n	800480a <HAL_ADC_IRQHandler+0x3ae>
    {
      overrun_error = 1UL;
 8004804:	2301      	movs	r3, #1
 8004806:	627b      	str	r3, [r7, #36]	; 0x24
 8004808:	e021      	b.n	800484e <HAL_ADC_IRQHandler+0x3f2>
    }
    else
    {
      /* Check DMA configuration */
      if (tmp_multimode_config != LL_ADC_MULTI_INDEPENDENT)
 800480a:	697b      	ldr	r3, [r7, #20]
 800480c:	2b00      	cmp	r3, #0
 800480e:	d015      	beq.n	800483c <HAL_ADC_IRQHandler+0x3e0>
      {
        /* Multimode (when feature is available) is enabled,
           Common Control Register MDMA bits must be checked. */
        if (LL_ADC_GetMultiDMATransfer(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) != LL_ADC_MULTI_REG_DMA_EACH_ADC)
 8004810:	687b      	ldr	r3, [r7, #4]
 8004812:	681b      	ldr	r3, [r3, #0]
 8004814:	4a2a      	ldr	r2, [pc, #168]	; (80048c0 <HAL_ADC_IRQHandler+0x464>)
 8004816:	4293      	cmp	r3, r2
 8004818:	d004      	beq.n	8004824 <HAL_ADC_IRQHandler+0x3c8>
 800481a:	687b      	ldr	r3, [r7, #4]
 800481c:	681b      	ldr	r3, [r3, #0]
 800481e:	4a29      	ldr	r2, [pc, #164]	; (80048c4 <HAL_ADC_IRQHandler+0x468>)
 8004820:	4293      	cmp	r3, r2
 8004822:	d101      	bne.n	8004828 <HAL_ADC_IRQHandler+0x3cc>
 8004824:	4b28      	ldr	r3, [pc, #160]	; (80048c8 <HAL_ADC_IRQHandler+0x46c>)
 8004826:	e000      	b.n	800482a <HAL_ADC_IRQHandler+0x3ce>
 8004828:	4b28      	ldr	r3, [pc, #160]	; (80048cc <HAL_ADC_IRQHandler+0x470>)
 800482a:	4618      	mov	r0, r3
 800482c:	f7ff fa44 	bl	8003cb8 <LL_ADC_GetMultiDMATransfer>
 8004830:	4603      	mov	r3, r0
 8004832:	2b00      	cmp	r3, #0
 8004834:	d00b      	beq.n	800484e <HAL_ADC_IRQHandler+0x3f2>
        {
          overrun_error = 1UL;
 8004836:	2301      	movs	r3, #1
 8004838:	627b      	str	r3, [r7, #36]	; 0x24
 800483a:	e008      	b.n	800484e <HAL_ADC_IRQHandler+0x3f2>
        }
      }
      else
      {
        /* Multimode not set or feature not available or ADC independent */
        if ((hadc->Instance->CFGR & ADC_CFGR_DMNGT) != 0UL)
 800483c:	687b      	ldr	r3, [r7, #4]
 800483e:	681b      	ldr	r3, [r3, #0]
 8004840:	68db      	ldr	r3, [r3, #12]
 8004842:	f003 0303 	and.w	r3, r3, #3
 8004846:	2b00      	cmp	r3, #0
 8004848:	d001      	beq.n	800484e <HAL_ADC_IRQHandler+0x3f2>
        {
          overrun_error = 1UL;
 800484a:	2301      	movs	r3, #1
 800484c:	627b      	str	r3, [r7, #36]	; 0x24
        }
      }
    }

    if (overrun_error == 1UL)
 800484e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004850:	2b01      	cmp	r3, #1
 8004852:	d10e      	bne.n	8004872 <HAL_ADC_IRQHandler+0x416>
    {
      /* Change ADC state to error state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_OVR);
 8004854:	687b      	ldr	r3, [r7, #4]
 8004856:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004858:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 800485c:	687b      	ldr	r3, [r7, #4]
 800485e:	655a      	str	r2, [r3, #84]	; 0x54

      /* Set ADC error code to overrun */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_OVR);
 8004860:	687b      	ldr	r3, [r7, #4]
 8004862:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004864:	f043 0202 	orr.w	r2, r3, #2
 8004868:	687b      	ldr	r3, [r7, #4]
 800486a:	659a      	str	r2, [r3, #88]	; 0x58
      /*       Therefore, old ADC conversion data can be retrieved in         */
      /*       function "HAL_ADC_ErrorCallback()".                            */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->ErrorCallback(hadc);
#else
      HAL_ADC_ErrorCallback(hadc);
 800486c:	6878      	ldr	r0, [r7, #4]
 800486e:	f000 f839 	bl	80048e4 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    }

    /* Clear ADC overrun flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 8004872:	687b      	ldr	r3, [r7, #4]
 8004874:	681b      	ldr	r3, [r3, #0]
 8004876:	2210      	movs	r2, #16
 8004878:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check Injected context queue overflow flag ========== */
  if (((tmp_isr & ADC_FLAG_JQOVF) == ADC_FLAG_JQOVF) && ((tmp_ier & ADC_IT_JQOVF) == ADC_IT_JQOVF))
 800487a:	69fb      	ldr	r3, [r7, #28]
 800487c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004880:	2b00      	cmp	r3, #0
 8004882:	d018      	beq.n	80048b6 <HAL_ADC_IRQHandler+0x45a>
 8004884:	69bb      	ldr	r3, [r7, #24]
 8004886:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800488a:	2b00      	cmp	r3, #0
 800488c:	d013      	beq.n	80048b6 <HAL_ADC_IRQHandler+0x45a>
  {
    /* Change ADC state to overrun state */
    SET_BIT(hadc->State, HAL_ADC_STATE_INJ_JQOVF);
 800488e:	687b      	ldr	r3, [r7, #4]
 8004890:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004892:	f443 4280 	orr.w	r2, r3, #16384	; 0x4000
 8004896:	687b      	ldr	r3, [r7, #4]
 8004898:	655a      	str	r2, [r3, #84]	; 0x54

    /* Set ADC error code to Injected context queue overflow */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_JQOVF);
 800489a:	687b      	ldr	r3, [r7, #4]
 800489c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800489e:	f043 0208 	orr.w	r2, r3, #8
 80048a2:	687b      	ldr	r3, [r7, #4]
 80048a4:	659a      	str	r2, [r3, #88]	; 0x58

    /* Clear the Injected context queue overflow flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_JQOVF);
 80048a6:	687b      	ldr	r3, [r7, #4]
 80048a8:	681b      	ldr	r3, [r3, #0]
 80048aa:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80048ae:	601a      	str	r2, [r3, #0]

    /* Injected context queue overflow callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->InjectedQueueOverflowCallback(hadc);
#else
    HAL_ADCEx_InjectedQueueOverflowCallback(hadc);
 80048b0:	6878      	ldr	r0, [r7, #4]
 80048b2:	f000 fe07 	bl	80054c4 <HAL_ADCEx_InjectedQueueOverflowCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
  }

}
 80048b6:	bf00      	nop
 80048b8:	3728      	adds	r7, #40	; 0x28
 80048ba:	46bd      	mov	sp, r7
 80048bc:	bd80      	pop	{r7, pc}
 80048be:	bf00      	nop
 80048c0:	40022000 	.word	0x40022000
 80048c4:	40022100 	.word	0x40022100
 80048c8:	40022300 	.word	0x40022300
 80048cc:	58026300 	.word	0x58026300

080048d0 <HAL_ADC_LevelOutOfWindowCallback>:
  * @brief  Analog watchdog 1 callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_LevelOutOfWindowCallback(ADC_HandleTypeDef *hadc)
{
 80048d0:	b480      	push	{r7}
 80048d2:	b083      	sub	sp, #12
 80048d4:	af00      	add	r7, sp, #0
 80048d6:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_LevelOutOfWindowCallback must be implemented in the user file.
  */
}
 80048d8:	bf00      	nop
 80048da:	370c      	adds	r7, #12
 80048dc:	46bd      	mov	sp, r7
 80048de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048e2:	4770      	bx	lr

080048e4 <HAL_ADC_ErrorCallback>:
  *           (this function is also clearing overrun flag)
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 80048e4:	b480      	push	{r7}
 80048e6:	b083      	sub	sp, #12
 80048e8:	af00      	add	r7, sp, #0
 80048ea:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ErrorCallback must be implemented in the user file.
  */
}
 80048ec:	bf00      	nop
 80048ee:	370c      	adds	r7, #12
 80048f0:	46bd      	mov	sp, r7
 80048f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048f6:	4770      	bx	lr

080048f8 <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param sConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *sConfig)
{
 80048f8:	b590      	push	{r4, r7, lr}
 80048fa:	b0a1      	sub	sp, #132	; 0x84
 80048fc:	af00      	add	r7, sp, #0
 80048fe:	6078      	str	r0, [r7, #4]
 8004900:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8004902:	2300      	movs	r3, #0
 8004904:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
  uint32_t tmpOffsetShifted;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0;
 8004908:	2300      	movs	r3, #0
 800490a:	60bb      	str	r3, [r7, #8]
  /* if ROVSE is set, the value of the OFFSETy_EN bit in ADCx_OFRy register is
     ignored (considered as reset) */
  assert_param(!((sConfig->OffsetNumber != ADC_OFFSET_NONE) && (hadc->Init.OversamplingMode == ENABLE)));

  /* Verification of channel number */
  if (sConfig->SingleDiff != ADC_DIFFERENTIAL_ENDED)
 800490c:	683b      	ldr	r3, [r7, #0]
 800490e:	68db      	ldr	r3, [r3, #12]
 8004910:	4a9d      	ldr	r2, [pc, #628]	; (8004b88 <HAL_ADC_ConfigChannel+0x290>)
 8004912:	4293      	cmp	r3, r2
    }
#endif
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8004914:	687b      	ldr	r3, [r7, #4]
 8004916:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 800491a:	2b01      	cmp	r3, #1
 800491c:	d101      	bne.n	8004922 <HAL_ADC_ConfigChannel+0x2a>
 800491e:	2302      	movs	r3, #2
 8004920:	e321      	b.n	8004f66 <HAL_ADC_ConfigChannel+0x66e>
 8004922:	687b      	ldr	r3, [r7, #4]
 8004924:	2201      	movs	r2, #1
 8004926:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 800492a:	687b      	ldr	r3, [r7, #4]
 800492c:	681b      	ldr	r3, [r3, #0]
 800492e:	4618      	mov	r0, r3
 8004930:	f7ff fa80 	bl	8003e34 <LL_ADC_REG_IsConversionOngoing>
 8004934:	4603      	mov	r3, r0
 8004936:	2b00      	cmp	r3, #0
 8004938:	f040 8306 	bne.w	8004f48 <HAL_ADC_ConfigChannel+0x650>
      /* ADC channels preselection */
      hadc->Instance->PCSEL_RES0 |= (1UL << (__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) & 0x1FUL));
    }
#else
    /* ADC channels preselection */
    hadc->Instance->PCSEL |= (1UL << (__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) & 0x1FUL));
 800493c:	683b      	ldr	r3, [r7, #0]
 800493e:	681b      	ldr	r3, [r3, #0]
 8004940:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8004944:	2b00      	cmp	r3, #0
 8004946:	d108      	bne.n	800495a <HAL_ADC_ConfigChannel+0x62>
 8004948:	683b      	ldr	r3, [r7, #0]
 800494a:	681b      	ldr	r3, [r3, #0]
 800494c:	0e9b      	lsrs	r3, r3, #26
 800494e:	f003 031f 	and.w	r3, r3, #31
 8004952:	2201      	movs	r2, #1
 8004954:	fa02 f303 	lsl.w	r3, r2, r3
 8004958:	e016      	b.n	8004988 <HAL_ADC_ConfigChannel+0x90>
 800495a:	683b      	ldr	r3, [r7, #0]
 800495c:	681b      	ldr	r3, [r3, #0]
 800495e:	667b      	str	r3, [r7, #100]	; 0x64
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004960:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8004962:	fa93 f3a3 	rbit	r3, r3
 8004966:	663b      	str	r3, [r7, #96]	; 0x60
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8004968:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800496a:	66bb      	str	r3, [r7, #104]	; 0x68
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 800496c:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800496e:	2b00      	cmp	r3, #0
 8004970:	d101      	bne.n	8004976 <HAL_ADC_ConfigChannel+0x7e>
  {
    return 32U;
 8004972:	2320      	movs	r3, #32
 8004974:	e003      	b.n	800497e <HAL_ADC_ConfigChannel+0x86>
  }
  return __builtin_clz(value);
 8004976:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8004978:	fab3 f383 	clz	r3, r3
 800497c:	b2db      	uxtb	r3, r3
 800497e:	f003 031f 	and.w	r3, r3, #31
 8004982:	2201      	movs	r2, #1
 8004984:	fa02 f303 	lsl.w	r3, r2, r3
 8004988:	687a      	ldr	r2, [r7, #4]
 800498a:	6812      	ldr	r2, [r2, #0]
 800498c:	69d1      	ldr	r1, [r2, #28]
 800498e:	687a      	ldr	r2, [r7, #4]
 8004990:	6812      	ldr	r2, [r2, #0]
 8004992:	430b      	orrs	r3, r1
 8004994:	61d3      	str	r3, [r2, #28]
#endif /* ADC_VER_V5_V90 */

    /* Set ADC group regular sequence: channel on the selected scan sequence rank */
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, sConfig->Rank, sConfig->Channel);
 8004996:	687b      	ldr	r3, [r7, #4]
 8004998:	6818      	ldr	r0, [r3, #0]
 800499a:	683b      	ldr	r3, [r7, #0]
 800499c:	6859      	ldr	r1, [r3, #4]
 800499e:	683b      	ldr	r3, [r7, #0]
 80049a0:	681b      	ldr	r3, [r3, #0]
 80049a2:	461a      	mov	r2, r3
 80049a4:	f7ff f8eb 	bl	8003b7e <LL_ADC_REG_SetSequencerRanks>
    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated when ADC is disabled or enabled without   */
    /* conversion on going on regular group:                                    */
    /*  - Channel sampling time                                                 */
    /*  - Channel offset                                                        */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 80049a8:	687b      	ldr	r3, [r7, #4]
 80049aa:	681b      	ldr	r3, [r3, #0]
 80049ac:	4618      	mov	r0, r3
 80049ae:	f7ff fa41 	bl	8003e34 <LL_ADC_REG_IsConversionOngoing>
 80049b2:	67b8      	str	r0, [r7, #120]	; 0x78
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 80049b4:	687b      	ldr	r3, [r7, #4]
 80049b6:	681b      	ldr	r3, [r3, #0]
 80049b8:	4618      	mov	r0, r3
 80049ba:	f7ff fa4e 	bl	8003e5a <LL_ADC_INJ_IsConversionOngoing>
 80049be:	6778      	str	r0, [r7, #116]	; 0x74
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 80049c0:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80049c2:	2b00      	cmp	r3, #0
 80049c4:	f040 80b3 	bne.w	8004b2e <HAL_ADC_ConfigChannel+0x236>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 80049c8:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80049ca:	2b00      	cmp	r3, #0
 80049cc:	f040 80af 	bne.w	8004b2e <HAL_ADC_ConfigChannel+0x236>
       )
    {
      /* Set sampling time of the selected ADC channel */
      LL_ADC_SetChannelSamplingTime(hadc->Instance, sConfig->Channel, sConfig->SamplingTime);
 80049d0:	687b      	ldr	r3, [r7, #4]
 80049d2:	6818      	ldr	r0, [r3, #0]
 80049d4:	683b      	ldr	r3, [r7, #0]
 80049d6:	6819      	ldr	r1, [r3, #0]
 80049d8:	683b      	ldr	r3, [r7, #0]
 80049da:	689b      	ldr	r3, [r3, #8]
 80049dc:	461a      	mov	r2, r3
 80049de:	f7ff f90d 	bl	8003bfc <LL_ADC_SetChannelSamplingTime>
        tmpOffsetShifted = ADC3_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)sConfig->Offset);
      }
      else
#endif /* ADC_VER_V5_V90 */
      {
        tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)sConfig->Offset);
 80049e2:	4b6a      	ldr	r3, [pc, #424]	; (8004b8c <HAL_ADC_ConfigChannel+0x294>)
 80049e4:	681b      	ldr	r3, [r3, #0]
 80049e6:	f003 4370 	and.w	r3, r3, #4026531840	; 0xf0000000
 80049ea:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80049ee:	d10b      	bne.n	8004a08 <HAL_ADC_ConfigChannel+0x110>
 80049f0:	683b      	ldr	r3, [r7, #0]
 80049f2:	695a      	ldr	r2, [r3, #20]
 80049f4:	687b      	ldr	r3, [r7, #4]
 80049f6:	681b      	ldr	r3, [r3, #0]
 80049f8:	68db      	ldr	r3, [r3, #12]
 80049fa:	089b      	lsrs	r3, r3, #2
 80049fc:	f003 0307 	and.w	r3, r3, #7
 8004a00:	005b      	lsls	r3, r3, #1
 8004a02:	fa02 f303 	lsl.w	r3, r2, r3
 8004a06:	e01d      	b.n	8004a44 <HAL_ADC_ConfigChannel+0x14c>
 8004a08:	687b      	ldr	r3, [r7, #4]
 8004a0a:	681b      	ldr	r3, [r3, #0]
 8004a0c:	68db      	ldr	r3, [r3, #12]
 8004a0e:	f003 0310 	and.w	r3, r3, #16
 8004a12:	2b00      	cmp	r3, #0
 8004a14:	d10b      	bne.n	8004a2e <HAL_ADC_ConfigChannel+0x136>
 8004a16:	683b      	ldr	r3, [r7, #0]
 8004a18:	695a      	ldr	r2, [r3, #20]
 8004a1a:	687b      	ldr	r3, [r7, #4]
 8004a1c:	681b      	ldr	r3, [r3, #0]
 8004a1e:	68db      	ldr	r3, [r3, #12]
 8004a20:	089b      	lsrs	r3, r3, #2
 8004a22:	f003 0307 	and.w	r3, r3, #7
 8004a26:	005b      	lsls	r3, r3, #1
 8004a28:	fa02 f303 	lsl.w	r3, r2, r3
 8004a2c:	e00a      	b.n	8004a44 <HAL_ADC_ConfigChannel+0x14c>
 8004a2e:	683b      	ldr	r3, [r7, #0]
 8004a30:	695a      	ldr	r2, [r3, #20]
 8004a32:	687b      	ldr	r3, [r7, #4]
 8004a34:	681b      	ldr	r3, [r3, #0]
 8004a36:	68db      	ldr	r3, [r3, #12]
 8004a38:	089b      	lsrs	r3, r3, #2
 8004a3a:	f003 0304 	and.w	r3, r3, #4
 8004a3e:	005b      	lsls	r3, r3, #1
 8004a40:	fa02 f303 	lsl.w	r3, r2, r3
 8004a44:	673b      	str	r3, [r7, #112]	; 0x70
      }
      
      if (sConfig->OffsetNumber != ADC_OFFSET_NONE)
 8004a46:	683b      	ldr	r3, [r7, #0]
 8004a48:	691b      	ldr	r3, [r3, #16]
 8004a4a:	2b04      	cmp	r3, #4
 8004a4c:	d027      	beq.n	8004a9e <HAL_ADC_ConfigChannel+0x1a6>
      {
        /* Set ADC selected offset number */
        LL_ADC_SetOffset(hadc->Instance, sConfig->OffsetNumber, sConfig->Channel, tmpOffsetShifted);
 8004a4e:	687b      	ldr	r3, [r7, #4]
 8004a50:	6818      	ldr	r0, [r3, #0]
 8004a52:	683b      	ldr	r3, [r7, #0]
 8004a54:	6919      	ldr	r1, [r3, #16]
 8004a56:	683b      	ldr	r3, [r7, #0]
 8004a58:	681a      	ldr	r2, [r3, #0]
 8004a5a:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8004a5c:	f7ff f828 	bl	8003ab0 <LL_ADC_SetOffset>
        else
#endif /* ADC_VER_V5_V90 */
        {
          assert_param(IS_FUNCTIONAL_STATE(sConfig->OffsetSignedSaturation));
          /* Set ADC selected offset signed saturation */
          LL_ADC_SetOffsetSignedSaturation(hadc->Instance, sConfig->OffsetNumber, (sConfig->OffsetSignedSaturation == ENABLE) ? LL_ADC_OFFSET_SIGNED_SATURATION_ENABLE : LL_ADC_OFFSET_SIGNED_SATURATION_DISABLE);
 8004a60:	687b      	ldr	r3, [r7, #4]
 8004a62:	6818      	ldr	r0, [r3, #0]
 8004a64:	683b      	ldr	r3, [r7, #0]
 8004a66:	6919      	ldr	r1, [r3, #16]
 8004a68:	683b      	ldr	r3, [r7, #0]
 8004a6a:	7e5b      	ldrb	r3, [r3, #25]
 8004a6c:	2b01      	cmp	r3, #1
 8004a6e:	d102      	bne.n	8004a76 <HAL_ADC_ConfigChannel+0x17e>
 8004a70:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8004a74:	e000      	b.n	8004a78 <HAL_ADC_ConfigChannel+0x180>
 8004a76:	2300      	movs	r3, #0
 8004a78:	461a      	mov	r2, r3
 8004a7a:	f7ff f852 	bl	8003b22 <LL_ADC_SetOffsetSignedSaturation>

          assert_param(IS_FUNCTIONAL_STATE(sConfig->OffsetRightShift));
          /* Set ADC selected offset right shift */
          LL_ADC_SetDataRightShift(hadc->Instance, sConfig->OffsetNumber, (sConfig->OffsetRightShift == ENABLE) ? LL_ADC_OFFSET_RSHIFT_ENABLE : LL_ADC_OFFSET_RSHIFT_DISABLE);
 8004a7e:	687b      	ldr	r3, [r7, #4]
 8004a80:	6818      	ldr	r0, [r3, #0]
 8004a82:	683b      	ldr	r3, [r7, #0]
 8004a84:	6919      	ldr	r1, [r3, #16]
 8004a86:	683b      	ldr	r3, [r7, #0]
 8004a88:	7e1b      	ldrb	r3, [r3, #24]
 8004a8a:	2b01      	cmp	r3, #1
 8004a8c:	d102      	bne.n	8004a94 <HAL_ADC_ConfigChannel+0x19c>
 8004a8e:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8004a92:	e000      	b.n	8004a96 <HAL_ADC_ConfigChannel+0x19e>
 8004a94:	2300      	movs	r3, #0
 8004a96:	461a      	mov	r2, r3
 8004a98:	f7ff f82a 	bl	8003af0 <LL_ADC_SetDataRightShift>
 8004a9c:	e047      	b.n	8004b2e <HAL_ADC_ConfigChannel+0x236>
          }
        }
        else
#endif /* ADC_VER_V5_V90 */
        {
          if (((hadc->Instance->OFR1) & ADC_OFR1_OFFSET1_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8004a9e:	687b      	ldr	r3, [r7, #4]
 8004aa0:	681b      	ldr	r3, [r3, #0]
 8004aa2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004aa4:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8004aa8:	683b      	ldr	r3, [r7, #0]
 8004aaa:	681b      	ldr	r3, [r3, #0]
 8004aac:	069b      	lsls	r3, r3, #26
 8004aae:	429a      	cmp	r2, r3
 8004ab0:	d107      	bne.n	8004ac2 <HAL_ADC_ConfigChannel+0x1ca>
          {
            CLEAR_BIT(hadc->Instance->OFR1, ADC_OFR1_SSATE);
 8004ab2:	687b      	ldr	r3, [r7, #4]
 8004ab4:	681b      	ldr	r3, [r3, #0]
 8004ab6:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8004ab8:	687b      	ldr	r3, [r7, #4]
 8004aba:	681b      	ldr	r3, [r3, #0]
 8004abc:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 8004ac0:	661a      	str	r2, [r3, #96]	; 0x60
          }
          if (((hadc->Instance->OFR2) & ADC_OFR2_OFFSET2_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8004ac2:	687b      	ldr	r3, [r7, #4]
 8004ac4:	681b      	ldr	r3, [r3, #0]
 8004ac6:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8004ac8:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8004acc:	683b      	ldr	r3, [r7, #0]
 8004ace:	681b      	ldr	r3, [r3, #0]
 8004ad0:	069b      	lsls	r3, r3, #26
 8004ad2:	429a      	cmp	r2, r3
 8004ad4:	d107      	bne.n	8004ae6 <HAL_ADC_ConfigChannel+0x1ee>
          {
            CLEAR_BIT(hadc->Instance->OFR2, ADC_OFR2_SSATE);
 8004ad6:	687b      	ldr	r3, [r7, #4]
 8004ad8:	681b      	ldr	r3, [r3, #0]
 8004ada:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 8004adc:	687b      	ldr	r3, [r7, #4]
 8004ade:	681b      	ldr	r3, [r3, #0]
 8004ae0:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 8004ae4:	665a      	str	r2, [r3, #100]	; 0x64
          }
          if (((hadc->Instance->OFR3) & ADC_OFR3_OFFSET3_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8004ae6:	687b      	ldr	r3, [r7, #4]
 8004ae8:	681b      	ldr	r3, [r3, #0]
 8004aea:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8004aec:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8004af0:	683b      	ldr	r3, [r7, #0]
 8004af2:	681b      	ldr	r3, [r3, #0]
 8004af4:	069b      	lsls	r3, r3, #26
 8004af6:	429a      	cmp	r2, r3
 8004af8:	d107      	bne.n	8004b0a <HAL_ADC_ConfigChannel+0x212>
          {
            CLEAR_BIT(hadc->Instance->OFR3, ADC_OFR3_SSATE);
 8004afa:	687b      	ldr	r3, [r7, #4]
 8004afc:	681b      	ldr	r3, [r3, #0]
 8004afe:	6e9a      	ldr	r2, [r3, #104]	; 0x68
 8004b00:	687b      	ldr	r3, [r7, #4]
 8004b02:	681b      	ldr	r3, [r3, #0]
 8004b04:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 8004b08:	669a      	str	r2, [r3, #104]	; 0x68
          }
          if (((hadc->Instance->OFR4) & ADC_OFR4_OFFSET4_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8004b0a:	687b      	ldr	r3, [r7, #4]
 8004b0c:	681b      	ldr	r3, [r3, #0]
 8004b0e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8004b10:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8004b14:	683b      	ldr	r3, [r7, #0]
 8004b16:	681b      	ldr	r3, [r3, #0]
 8004b18:	069b      	lsls	r3, r3, #26
 8004b1a:	429a      	cmp	r2, r3
 8004b1c:	d107      	bne.n	8004b2e <HAL_ADC_ConfigChannel+0x236>
          {
            CLEAR_BIT(hadc->Instance->OFR4, ADC_OFR4_SSATE);
 8004b1e:	687b      	ldr	r3, [r7, #4]
 8004b20:	681b      	ldr	r3, [r3, #0]
 8004b22:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 8004b24:	687b      	ldr	r3, [r7, #4]
 8004b26:	681b      	ldr	r3, [r3, #0]
 8004b28:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 8004b2c:	66da      	str	r2, [r3, #108]	; 0x6c

    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated only when ADC is disabled:                */
    /*  - Single or differential mode                                           */
    /*  - Internal measurement channels: Vbat/VrefInt/TempSensor                */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8004b2e:	687b      	ldr	r3, [r7, #4]
 8004b30:	681b      	ldr	r3, [r3, #0]
 8004b32:	4618      	mov	r0, r3
 8004b34:	f7ff f944 	bl	8003dc0 <LL_ADC_IsEnabled>
 8004b38:	4603      	mov	r3, r0
 8004b3a:	2b00      	cmp	r3, #0
 8004b3c:	f040 820d 	bne.w	8004f5a <HAL_ADC_ConfigChannel+0x662>
    {
      /* Set mode single-ended or differential input of the selected ADC channel */
      LL_ADC_SetChannelSingleDiff(hadc->Instance, sConfig->Channel, sConfig->SingleDiff);
 8004b40:	687b      	ldr	r3, [r7, #4]
 8004b42:	6818      	ldr	r0, [r3, #0]
 8004b44:	683b      	ldr	r3, [r7, #0]
 8004b46:	6819      	ldr	r1, [r3, #0]
 8004b48:	683b      	ldr	r3, [r7, #0]
 8004b4a:	68db      	ldr	r3, [r3, #12]
 8004b4c:	461a      	mov	r2, r3
 8004b4e:	f7ff f881 	bl	8003c54 <LL_ADC_SetChannelSingleDiff>

      /* Configuration of differential mode */
      if (sConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 8004b52:	683b      	ldr	r3, [r7, #0]
 8004b54:	68db      	ldr	r3, [r3, #12]
 8004b56:	4a0c      	ldr	r2, [pc, #48]	; (8004b88 <HAL_ADC_ConfigChannel+0x290>)
 8004b58:	4293      	cmp	r3, r2
 8004b5a:	f040 8133 	bne.w	8004dc4 <HAL_ADC_ConfigChannel+0x4cc>
      {
        /* Set sampling time of the selected ADC channel */
        /* Note: ADC channel number masked with value "0x1F" to ensure shift value within 32 bits range */
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8004b5e:	687b      	ldr	r3, [r7, #4]
 8004b60:	6818      	ldr	r0, [r3, #0]
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8004b62:	683b      	ldr	r3, [r7, #0]
 8004b64:	681b      	ldr	r3, [r3, #0]
 8004b66:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8004b6a:	2b00      	cmp	r3, #0
 8004b6c:	d110      	bne.n	8004b90 <HAL_ADC_ConfigChannel+0x298>
 8004b6e:	683b      	ldr	r3, [r7, #0]
 8004b70:	681b      	ldr	r3, [r3, #0]
 8004b72:	0e9b      	lsrs	r3, r3, #26
 8004b74:	3301      	adds	r3, #1
 8004b76:	f003 031f 	and.w	r3, r3, #31
 8004b7a:	2b09      	cmp	r3, #9
 8004b7c:	bf94      	ite	ls
 8004b7e:	2301      	movls	r3, #1
 8004b80:	2300      	movhi	r3, #0
 8004b82:	b2db      	uxtb	r3, r3
 8004b84:	e01e      	b.n	8004bc4 <HAL_ADC_ConfigChannel+0x2cc>
 8004b86:	bf00      	nop
 8004b88:	47ff0000 	.word	0x47ff0000
 8004b8c:	5c001000 	.word	0x5c001000
 8004b90:	683b      	ldr	r3, [r7, #0]
 8004b92:	681b      	ldr	r3, [r3, #0]
 8004b94:	65bb      	str	r3, [r7, #88]	; 0x58
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004b96:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8004b98:	fa93 f3a3 	rbit	r3, r3
 8004b9c:	657b      	str	r3, [r7, #84]	; 0x54
  return result;
 8004b9e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8004ba0:	65fb      	str	r3, [r7, #92]	; 0x5c
  if (value == 0U)
 8004ba2:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8004ba4:	2b00      	cmp	r3, #0
 8004ba6:	d101      	bne.n	8004bac <HAL_ADC_ConfigChannel+0x2b4>
    return 32U;
 8004ba8:	2320      	movs	r3, #32
 8004baa:	e003      	b.n	8004bb4 <HAL_ADC_ConfigChannel+0x2bc>
  return __builtin_clz(value);
 8004bac:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8004bae:	fab3 f383 	clz	r3, r3
 8004bb2:	b2db      	uxtb	r3, r3
 8004bb4:	3301      	adds	r3, #1
 8004bb6:	f003 031f 	and.w	r3, r3, #31
 8004bba:	2b09      	cmp	r3, #9
 8004bbc:	bf94      	ite	ls
 8004bbe:	2301      	movls	r3, #1
 8004bc0:	2300      	movhi	r3, #0
 8004bc2:	b2db      	uxtb	r3, r3
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8004bc4:	2b00      	cmp	r3, #0
 8004bc6:	d079      	beq.n	8004cbc <HAL_ADC_ConfigChannel+0x3c4>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8004bc8:	683b      	ldr	r3, [r7, #0]
 8004bca:	681b      	ldr	r3, [r3, #0]
 8004bcc:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8004bd0:	2b00      	cmp	r3, #0
 8004bd2:	d107      	bne.n	8004be4 <HAL_ADC_ConfigChannel+0x2ec>
 8004bd4:	683b      	ldr	r3, [r7, #0]
 8004bd6:	681b      	ldr	r3, [r3, #0]
 8004bd8:	0e9b      	lsrs	r3, r3, #26
 8004bda:	3301      	adds	r3, #1
 8004bdc:	069b      	lsls	r3, r3, #26
 8004bde:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8004be2:	e015      	b.n	8004c10 <HAL_ADC_ConfigChannel+0x318>
 8004be4:	683b      	ldr	r3, [r7, #0]
 8004be6:	681b      	ldr	r3, [r3, #0]
 8004be8:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004bea:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004bec:	fa93 f3a3 	rbit	r3, r3
 8004bf0:	64bb      	str	r3, [r7, #72]	; 0x48
  return result;
 8004bf2:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004bf4:	653b      	str	r3, [r7, #80]	; 0x50
  if (value == 0U)
 8004bf6:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004bf8:	2b00      	cmp	r3, #0
 8004bfa:	d101      	bne.n	8004c00 <HAL_ADC_ConfigChannel+0x308>
    return 32U;
 8004bfc:	2320      	movs	r3, #32
 8004bfe:	e003      	b.n	8004c08 <HAL_ADC_ConfigChannel+0x310>
  return __builtin_clz(value);
 8004c00:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004c02:	fab3 f383 	clz	r3, r3
 8004c06:	b2db      	uxtb	r3, r3
 8004c08:	3301      	adds	r3, #1
 8004c0a:	069b      	lsls	r3, r3, #26
 8004c0c:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8004c10:	683b      	ldr	r3, [r7, #0]
 8004c12:	681b      	ldr	r3, [r3, #0]
 8004c14:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8004c18:	2b00      	cmp	r3, #0
 8004c1a:	d109      	bne.n	8004c30 <HAL_ADC_ConfigChannel+0x338>
 8004c1c:	683b      	ldr	r3, [r7, #0]
 8004c1e:	681b      	ldr	r3, [r3, #0]
 8004c20:	0e9b      	lsrs	r3, r3, #26
 8004c22:	3301      	adds	r3, #1
 8004c24:	f003 031f 	and.w	r3, r3, #31
 8004c28:	2101      	movs	r1, #1
 8004c2a:	fa01 f303 	lsl.w	r3, r1, r3
 8004c2e:	e017      	b.n	8004c60 <HAL_ADC_ConfigChannel+0x368>
 8004c30:	683b      	ldr	r3, [r7, #0]
 8004c32:	681b      	ldr	r3, [r3, #0]
 8004c34:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004c36:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004c38:	fa93 f3a3 	rbit	r3, r3
 8004c3c:	63fb      	str	r3, [r7, #60]	; 0x3c
  return result;
 8004c3e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004c40:	647b      	str	r3, [r7, #68]	; 0x44
  if (value == 0U)
 8004c42:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004c44:	2b00      	cmp	r3, #0
 8004c46:	d101      	bne.n	8004c4c <HAL_ADC_ConfigChannel+0x354>
    return 32U;
 8004c48:	2320      	movs	r3, #32
 8004c4a:	e003      	b.n	8004c54 <HAL_ADC_ConfigChannel+0x35c>
  return __builtin_clz(value);
 8004c4c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004c4e:	fab3 f383 	clz	r3, r3
 8004c52:	b2db      	uxtb	r3, r3
 8004c54:	3301      	adds	r3, #1
 8004c56:	f003 031f 	and.w	r3, r3, #31
 8004c5a:	2101      	movs	r1, #1
 8004c5c:	fa01 f303 	lsl.w	r3, r1, r3
 8004c60:	ea42 0103 	orr.w	r1, r2, r3
 8004c64:	683b      	ldr	r3, [r7, #0]
 8004c66:	681b      	ldr	r3, [r3, #0]
 8004c68:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8004c6c:	2b00      	cmp	r3, #0
 8004c6e:	d10a      	bne.n	8004c86 <HAL_ADC_ConfigChannel+0x38e>
 8004c70:	683b      	ldr	r3, [r7, #0]
 8004c72:	681b      	ldr	r3, [r3, #0]
 8004c74:	0e9b      	lsrs	r3, r3, #26
 8004c76:	3301      	adds	r3, #1
 8004c78:	f003 021f 	and.w	r2, r3, #31
 8004c7c:	4613      	mov	r3, r2
 8004c7e:	005b      	lsls	r3, r3, #1
 8004c80:	4413      	add	r3, r2
 8004c82:	051b      	lsls	r3, r3, #20
 8004c84:	e018      	b.n	8004cb8 <HAL_ADC_ConfigChannel+0x3c0>
 8004c86:	683b      	ldr	r3, [r7, #0]
 8004c88:	681b      	ldr	r3, [r3, #0]
 8004c8a:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004c8c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004c8e:	fa93 f3a3 	rbit	r3, r3
 8004c92:	633b      	str	r3, [r7, #48]	; 0x30
  return result;
 8004c94:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004c96:	63bb      	str	r3, [r7, #56]	; 0x38
  if (value == 0U)
 8004c98:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004c9a:	2b00      	cmp	r3, #0
 8004c9c:	d101      	bne.n	8004ca2 <HAL_ADC_ConfigChannel+0x3aa>
    return 32U;
 8004c9e:	2320      	movs	r3, #32
 8004ca0:	e003      	b.n	8004caa <HAL_ADC_ConfigChannel+0x3b2>
  return __builtin_clz(value);
 8004ca2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004ca4:	fab3 f383 	clz	r3, r3
 8004ca8:	b2db      	uxtb	r3, r3
 8004caa:	3301      	adds	r3, #1
 8004cac:	f003 021f 	and.w	r2, r3, #31
 8004cb0:	4613      	mov	r3, r2
 8004cb2:	005b      	lsls	r3, r3, #1
 8004cb4:	4413      	add	r3, r2
 8004cb6:	051b      	lsls	r3, r3, #20
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8004cb8:	430b      	orrs	r3, r1
 8004cba:	e07e      	b.n	8004dba <HAL_ADC_ConfigChannel+0x4c2>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8004cbc:	683b      	ldr	r3, [r7, #0]
 8004cbe:	681b      	ldr	r3, [r3, #0]
 8004cc0:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8004cc4:	2b00      	cmp	r3, #0
 8004cc6:	d107      	bne.n	8004cd8 <HAL_ADC_ConfigChannel+0x3e0>
 8004cc8:	683b      	ldr	r3, [r7, #0]
 8004cca:	681b      	ldr	r3, [r3, #0]
 8004ccc:	0e9b      	lsrs	r3, r3, #26
 8004cce:	3301      	adds	r3, #1
 8004cd0:	069b      	lsls	r3, r3, #26
 8004cd2:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8004cd6:	e015      	b.n	8004d04 <HAL_ADC_ConfigChannel+0x40c>
 8004cd8:	683b      	ldr	r3, [r7, #0]
 8004cda:	681b      	ldr	r3, [r3, #0]
 8004cdc:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004cde:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004ce0:	fa93 f3a3 	rbit	r3, r3
 8004ce4:	627b      	str	r3, [r7, #36]	; 0x24
  return result;
 8004ce6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004ce8:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (value == 0U)
 8004cea:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004cec:	2b00      	cmp	r3, #0
 8004cee:	d101      	bne.n	8004cf4 <HAL_ADC_ConfigChannel+0x3fc>
    return 32U;
 8004cf0:	2320      	movs	r3, #32
 8004cf2:	e003      	b.n	8004cfc <HAL_ADC_ConfigChannel+0x404>
  return __builtin_clz(value);
 8004cf4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004cf6:	fab3 f383 	clz	r3, r3
 8004cfa:	b2db      	uxtb	r3, r3
 8004cfc:	3301      	adds	r3, #1
 8004cfe:	069b      	lsls	r3, r3, #26
 8004d00:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8004d04:	683b      	ldr	r3, [r7, #0]
 8004d06:	681b      	ldr	r3, [r3, #0]
 8004d08:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8004d0c:	2b00      	cmp	r3, #0
 8004d0e:	d109      	bne.n	8004d24 <HAL_ADC_ConfigChannel+0x42c>
 8004d10:	683b      	ldr	r3, [r7, #0]
 8004d12:	681b      	ldr	r3, [r3, #0]
 8004d14:	0e9b      	lsrs	r3, r3, #26
 8004d16:	3301      	adds	r3, #1
 8004d18:	f003 031f 	and.w	r3, r3, #31
 8004d1c:	2101      	movs	r1, #1
 8004d1e:	fa01 f303 	lsl.w	r3, r1, r3
 8004d22:	e017      	b.n	8004d54 <HAL_ADC_ConfigChannel+0x45c>
 8004d24:	683b      	ldr	r3, [r7, #0]
 8004d26:	681b      	ldr	r3, [r3, #0]
 8004d28:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004d2a:	69fb      	ldr	r3, [r7, #28]
 8004d2c:	fa93 f3a3 	rbit	r3, r3
 8004d30:	61bb      	str	r3, [r7, #24]
  return result;
 8004d32:	69bb      	ldr	r3, [r7, #24]
 8004d34:	623b      	str	r3, [r7, #32]
  if (value == 0U)
 8004d36:	6a3b      	ldr	r3, [r7, #32]
 8004d38:	2b00      	cmp	r3, #0
 8004d3a:	d101      	bne.n	8004d40 <HAL_ADC_ConfigChannel+0x448>
    return 32U;
 8004d3c:	2320      	movs	r3, #32
 8004d3e:	e003      	b.n	8004d48 <HAL_ADC_ConfigChannel+0x450>
  return __builtin_clz(value);
 8004d40:	6a3b      	ldr	r3, [r7, #32]
 8004d42:	fab3 f383 	clz	r3, r3
 8004d46:	b2db      	uxtb	r3, r3
 8004d48:	3301      	adds	r3, #1
 8004d4a:	f003 031f 	and.w	r3, r3, #31
 8004d4e:	2101      	movs	r1, #1
 8004d50:	fa01 f303 	lsl.w	r3, r1, r3
 8004d54:	ea42 0103 	orr.w	r1, r2, r3
 8004d58:	683b      	ldr	r3, [r7, #0]
 8004d5a:	681b      	ldr	r3, [r3, #0]
 8004d5c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8004d60:	2b00      	cmp	r3, #0
 8004d62:	d10d      	bne.n	8004d80 <HAL_ADC_ConfigChannel+0x488>
 8004d64:	683b      	ldr	r3, [r7, #0]
 8004d66:	681b      	ldr	r3, [r3, #0]
 8004d68:	0e9b      	lsrs	r3, r3, #26
 8004d6a:	3301      	adds	r3, #1
 8004d6c:	f003 021f 	and.w	r2, r3, #31
 8004d70:	4613      	mov	r3, r2
 8004d72:	005b      	lsls	r3, r3, #1
 8004d74:	4413      	add	r3, r2
 8004d76:	3b1e      	subs	r3, #30
 8004d78:	051b      	lsls	r3, r3, #20
 8004d7a:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8004d7e:	e01b      	b.n	8004db8 <HAL_ADC_ConfigChannel+0x4c0>
 8004d80:	683b      	ldr	r3, [r7, #0]
 8004d82:	681b      	ldr	r3, [r3, #0]
 8004d84:	613b      	str	r3, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004d86:	693b      	ldr	r3, [r7, #16]
 8004d88:	fa93 f3a3 	rbit	r3, r3
 8004d8c:	60fb      	str	r3, [r7, #12]
  return result;
 8004d8e:	68fb      	ldr	r3, [r7, #12]
 8004d90:	617b      	str	r3, [r7, #20]
  if (value == 0U)
 8004d92:	697b      	ldr	r3, [r7, #20]
 8004d94:	2b00      	cmp	r3, #0
 8004d96:	d101      	bne.n	8004d9c <HAL_ADC_ConfigChannel+0x4a4>
    return 32U;
 8004d98:	2320      	movs	r3, #32
 8004d9a:	e003      	b.n	8004da4 <HAL_ADC_ConfigChannel+0x4ac>
  return __builtin_clz(value);
 8004d9c:	697b      	ldr	r3, [r7, #20]
 8004d9e:	fab3 f383 	clz	r3, r3
 8004da2:	b2db      	uxtb	r3, r3
 8004da4:	3301      	adds	r3, #1
 8004da6:	f003 021f 	and.w	r2, r3, #31
 8004daa:	4613      	mov	r3, r2
 8004dac:	005b      	lsls	r3, r3, #1
 8004dae:	4413      	add	r3, r2
 8004db0:	3b1e      	subs	r3, #30
 8004db2:	051b      	lsls	r3, r3, #20
 8004db4:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8004db8:	430b      	orrs	r3, r1
 8004dba:	683a      	ldr	r2, [r7, #0]
 8004dbc:	6892      	ldr	r2, [r2, #8]
 8004dbe:	4619      	mov	r1, r3
 8004dc0:	f7fe ff1c 	bl	8003bfc <LL_ADC_SetChannelSamplingTime>
      /* If internal channel selected, enable dedicated internal buffers and    */
      /* paths.                                                                 */
      /* Note: these internal measurement paths can be disabled using           */
      /* HAL_ADC_DeInit().                                                      */

      if (__LL_ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 8004dc4:	683b      	ldr	r3, [r7, #0]
 8004dc6:	681b      	ldr	r3, [r3, #0]
 8004dc8:	2b00      	cmp	r3, #0
 8004dca:	f280 80c6 	bge.w	8004f5a <HAL_ADC_ConfigChannel+0x662>
      {
        /* Configuration of common ADC parameters                                 */

        tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8004dce:	687b      	ldr	r3, [r7, #4]
 8004dd0:	681b      	ldr	r3, [r3, #0]
 8004dd2:	4a67      	ldr	r2, [pc, #412]	; (8004f70 <HAL_ADC_ConfigChannel+0x678>)
 8004dd4:	4293      	cmp	r3, r2
 8004dd6:	d004      	beq.n	8004de2 <HAL_ADC_ConfigChannel+0x4ea>
 8004dd8:	687b      	ldr	r3, [r7, #4]
 8004dda:	681b      	ldr	r3, [r3, #0]
 8004ddc:	4a65      	ldr	r2, [pc, #404]	; (8004f74 <HAL_ADC_ConfigChannel+0x67c>)
 8004dde:	4293      	cmp	r3, r2
 8004de0:	d101      	bne.n	8004de6 <HAL_ADC_ConfigChannel+0x4ee>
 8004de2:	4b65      	ldr	r3, [pc, #404]	; (8004f78 <HAL_ADC_ConfigChannel+0x680>)
 8004de4:	e000      	b.n	8004de8 <HAL_ADC_ConfigChannel+0x4f0>
 8004de6:	4b65      	ldr	r3, [pc, #404]	; (8004f7c <HAL_ADC_ConfigChannel+0x684>)
 8004de8:	4618      	mov	r0, r3
 8004dea:	f7fe fe53 	bl	8003a94 <LL_ADC_GetCommonPathInternalCh>
 8004dee:	66f8      	str	r0, [r7, #108]	; 0x6c

        /* Software is allowed to change common parameters only when all ADCs   */
        /* of the common group are disabled.                                    */
        if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8004df0:	687b      	ldr	r3, [r7, #4]
 8004df2:	681b      	ldr	r3, [r3, #0]
 8004df4:	4a5e      	ldr	r2, [pc, #376]	; (8004f70 <HAL_ADC_ConfigChannel+0x678>)
 8004df6:	4293      	cmp	r3, r2
 8004df8:	d004      	beq.n	8004e04 <HAL_ADC_ConfigChannel+0x50c>
 8004dfa:	687b      	ldr	r3, [r7, #4]
 8004dfc:	681b      	ldr	r3, [r3, #0]
 8004dfe:	4a5d      	ldr	r2, [pc, #372]	; (8004f74 <HAL_ADC_ConfigChannel+0x67c>)
 8004e00:	4293      	cmp	r3, r2
 8004e02:	d10e      	bne.n	8004e22 <HAL_ADC_ConfigChannel+0x52a>
 8004e04:	485a      	ldr	r0, [pc, #360]	; (8004f70 <HAL_ADC_ConfigChannel+0x678>)
 8004e06:	f7fe ffdb 	bl	8003dc0 <LL_ADC_IsEnabled>
 8004e0a:	4604      	mov	r4, r0
 8004e0c:	4859      	ldr	r0, [pc, #356]	; (8004f74 <HAL_ADC_ConfigChannel+0x67c>)
 8004e0e:	f7fe ffd7 	bl	8003dc0 <LL_ADC_IsEnabled>
 8004e12:	4603      	mov	r3, r0
 8004e14:	4323      	orrs	r3, r4
 8004e16:	2b00      	cmp	r3, #0
 8004e18:	bf0c      	ite	eq
 8004e1a:	2301      	moveq	r3, #1
 8004e1c:	2300      	movne	r3, #0
 8004e1e:	b2db      	uxtb	r3, r3
 8004e20:	e008      	b.n	8004e34 <HAL_ADC_ConfigChannel+0x53c>
 8004e22:	4857      	ldr	r0, [pc, #348]	; (8004f80 <HAL_ADC_ConfigChannel+0x688>)
 8004e24:	f7fe ffcc 	bl	8003dc0 <LL_ADC_IsEnabled>
 8004e28:	4603      	mov	r3, r0
 8004e2a:	2b00      	cmp	r3, #0
 8004e2c:	bf0c      	ite	eq
 8004e2e:	2301      	moveq	r3, #1
 8004e30:	2300      	movne	r3, #0
 8004e32:	b2db      	uxtb	r3, r3
 8004e34:	2b00      	cmp	r3, #0
 8004e36:	d07d      	beq.n	8004f34 <HAL_ADC_ConfigChannel+0x63c>
        {
          /* If the requested internal measurement path has already been enabled, */
          /* bypass the configuration processing.                                 */
          if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 8004e38:	683b      	ldr	r3, [r7, #0]
 8004e3a:	681b      	ldr	r3, [r3, #0]
 8004e3c:	4a51      	ldr	r2, [pc, #324]	; (8004f84 <HAL_ADC_ConfigChannel+0x68c>)
 8004e3e:	4293      	cmp	r3, r2
 8004e40:	d130      	bne.n	8004ea4 <HAL_ADC_ConfigChannel+0x5ac>
 8004e42:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004e44:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8004e48:	2b00      	cmp	r3, #0
 8004e4a:	d12b      	bne.n	8004ea4 <HAL_ADC_ConfigChannel+0x5ac>
          {
            if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8004e4c:	687b      	ldr	r3, [r7, #4]
 8004e4e:	681b      	ldr	r3, [r3, #0]
 8004e50:	4a4b      	ldr	r2, [pc, #300]	; (8004f80 <HAL_ADC_ConfigChannel+0x688>)
 8004e52:	4293      	cmp	r3, r2
 8004e54:	f040 8081 	bne.w	8004f5a <HAL_ADC_ConfigChannel+0x662>
            {
              LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance), LL_ADC_PATH_INTERNAL_TEMPSENSOR | tmp_config_internal_channel);
 8004e58:	687b      	ldr	r3, [r7, #4]
 8004e5a:	681b      	ldr	r3, [r3, #0]
 8004e5c:	4a44      	ldr	r2, [pc, #272]	; (8004f70 <HAL_ADC_ConfigChannel+0x678>)
 8004e5e:	4293      	cmp	r3, r2
 8004e60:	d004      	beq.n	8004e6c <HAL_ADC_ConfigChannel+0x574>
 8004e62:	687b      	ldr	r3, [r7, #4]
 8004e64:	681b      	ldr	r3, [r3, #0]
 8004e66:	4a43      	ldr	r2, [pc, #268]	; (8004f74 <HAL_ADC_ConfigChannel+0x67c>)
 8004e68:	4293      	cmp	r3, r2
 8004e6a:	d101      	bne.n	8004e70 <HAL_ADC_ConfigChannel+0x578>
 8004e6c:	4a42      	ldr	r2, [pc, #264]	; (8004f78 <HAL_ADC_ConfigChannel+0x680>)
 8004e6e:	e000      	b.n	8004e72 <HAL_ADC_ConfigChannel+0x57a>
 8004e70:	4a42      	ldr	r2, [pc, #264]	; (8004f7c <HAL_ADC_ConfigChannel+0x684>)
 8004e72:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004e74:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8004e78:	4619      	mov	r1, r3
 8004e7a:	4610      	mov	r0, r2
 8004e7c:	f7fe fdf7 	bl	8003a6e <LL_ADC_SetCommonPathInternalCh>
              /* Delay for temperature sensor stabilization time */
              /* Wait loop initialization and execution */
              /* Note: Variable divided by 2 to compensate partially              */
              /*       CPU processing cycles, scaling in us split to not          */
              /*       exceed 32 bits register capacity and handle low frequency. */
              wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8004e80:	4b41      	ldr	r3, [pc, #260]	; (8004f88 <HAL_ADC_ConfigChannel+0x690>)
 8004e82:	681b      	ldr	r3, [r3, #0]
 8004e84:	099b      	lsrs	r3, r3, #6
 8004e86:	4a41      	ldr	r2, [pc, #260]	; (8004f8c <HAL_ADC_ConfigChannel+0x694>)
 8004e88:	fba2 2303 	umull	r2, r3, r2, r3
 8004e8c:	099b      	lsrs	r3, r3, #6
 8004e8e:	3301      	adds	r3, #1
 8004e90:	005b      	lsls	r3, r3, #1
 8004e92:	60bb      	str	r3, [r7, #8]
              while (wait_loop_index != 0UL)
 8004e94:	e002      	b.n	8004e9c <HAL_ADC_ConfigChannel+0x5a4>
              {
                wait_loop_index--;
 8004e96:	68bb      	ldr	r3, [r7, #8]
 8004e98:	3b01      	subs	r3, #1
 8004e9a:	60bb      	str	r3, [r7, #8]
              while (wait_loop_index != 0UL)
 8004e9c:	68bb      	ldr	r3, [r7, #8]
 8004e9e:	2b00      	cmp	r3, #0
 8004ea0:	d1f9      	bne.n	8004e96 <HAL_ADC_ConfigChannel+0x59e>
            if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8004ea2:	e05a      	b.n	8004f5a <HAL_ADC_ConfigChannel+0x662>
              }
            }
          }
          else if ((sConfig->Channel == ADC_CHANNEL_VBAT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 8004ea4:	683b      	ldr	r3, [r7, #0]
 8004ea6:	681b      	ldr	r3, [r3, #0]
 8004ea8:	4a39      	ldr	r2, [pc, #228]	; (8004f90 <HAL_ADC_ConfigChannel+0x698>)
 8004eaa:	4293      	cmp	r3, r2
 8004eac:	d11e      	bne.n	8004eec <HAL_ADC_ConfigChannel+0x5f4>
 8004eae:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004eb0:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8004eb4:	2b00      	cmp	r3, #0
 8004eb6:	d119      	bne.n	8004eec <HAL_ADC_ConfigChannel+0x5f4>
          {
            if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8004eb8:	687b      	ldr	r3, [r7, #4]
 8004eba:	681b      	ldr	r3, [r3, #0]
 8004ebc:	4a30      	ldr	r2, [pc, #192]	; (8004f80 <HAL_ADC_ConfigChannel+0x688>)
 8004ebe:	4293      	cmp	r3, r2
 8004ec0:	d14b      	bne.n	8004f5a <HAL_ADC_ConfigChannel+0x662>
            {
              LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance), LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
 8004ec2:	687b      	ldr	r3, [r7, #4]
 8004ec4:	681b      	ldr	r3, [r3, #0]
 8004ec6:	4a2a      	ldr	r2, [pc, #168]	; (8004f70 <HAL_ADC_ConfigChannel+0x678>)
 8004ec8:	4293      	cmp	r3, r2
 8004eca:	d004      	beq.n	8004ed6 <HAL_ADC_ConfigChannel+0x5de>
 8004ecc:	687b      	ldr	r3, [r7, #4]
 8004ece:	681b      	ldr	r3, [r3, #0]
 8004ed0:	4a28      	ldr	r2, [pc, #160]	; (8004f74 <HAL_ADC_ConfigChannel+0x67c>)
 8004ed2:	4293      	cmp	r3, r2
 8004ed4:	d101      	bne.n	8004eda <HAL_ADC_ConfigChannel+0x5e2>
 8004ed6:	4a28      	ldr	r2, [pc, #160]	; (8004f78 <HAL_ADC_ConfigChannel+0x680>)
 8004ed8:	e000      	b.n	8004edc <HAL_ADC_ConfigChannel+0x5e4>
 8004eda:	4a28      	ldr	r2, [pc, #160]	; (8004f7c <HAL_ADC_ConfigChannel+0x684>)
 8004edc:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004ede:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8004ee2:	4619      	mov	r1, r3
 8004ee4:	4610      	mov	r0, r2
 8004ee6:	f7fe fdc2 	bl	8003a6e <LL_ADC_SetCommonPathInternalCh>
            if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8004eea:	e036      	b.n	8004f5a <HAL_ADC_ConfigChannel+0x662>
            }
          }
          else if ((sConfig->Channel == ADC_CHANNEL_VREFINT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 8004eec:	683b      	ldr	r3, [r7, #0]
 8004eee:	681b      	ldr	r3, [r3, #0]
 8004ef0:	4a28      	ldr	r2, [pc, #160]	; (8004f94 <HAL_ADC_ConfigChannel+0x69c>)
 8004ef2:	4293      	cmp	r3, r2
 8004ef4:	d131      	bne.n	8004f5a <HAL_ADC_ConfigChannel+0x662>
 8004ef6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004ef8:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004efc:	2b00      	cmp	r3, #0
 8004efe:	d12c      	bne.n	8004f5a <HAL_ADC_ConfigChannel+0x662>
          {
            if (ADC_VREFINT_INSTANCE(hadc))
 8004f00:	687b      	ldr	r3, [r7, #4]
 8004f02:	681b      	ldr	r3, [r3, #0]
 8004f04:	4a1e      	ldr	r2, [pc, #120]	; (8004f80 <HAL_ADC_ConfigChannel+0x688>)
 8004f06:	4293      	cmp	r3, r2
 8004f08:	d127      	bne.n	8004f5a <HAL_ADC_ConfigChannel+0x662>
            {
              LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance), LL_ADC_PATH_INTERNAL_VREFINT | tmp_config_internal_channel);
 8004f0a:	687b      	ldr	r3, [r7, #4]
 8004f0c:	681b      	ldr	r3, [r3, #0]
 8004f0e:	4a18      	ldr	r2, [pc, #96]	; (8004f70 <HAL_ADC_ConfigChannel+0x678>)
 8004f10:	4293      	cmp	r3, r2
 8004f12:	d004      	beq.n	8004f1e <HAL_ADC_ConfigChannel+0x626>
 8004f14:	687b      	ldr	r3, [r7, #4]
 8004f16:	681b      	ldr	r3, [r3, #0]
 8004f18:	4a16      	ldr	r2, [pc, #88]	; (8004f74 <HAL_ADC_ConfigChannel+0x67c>)
 8004f1a:	4293      	cmp	r3, r2
 8004f1c:	d101      	bne.n	8004f22 <HAL_ADC_ConfigChannel+0x62a>
 8004f1e:	4a16      	ldr	r2, [pc, #88]	; (8004f78 <HAL_ADC_ConfigChannel+0x680>)
 8004f20:	e000      	b.n	8004f24 <HAL_ADC_ConfigChannel+0x62c>
 8004f22:	4a16      	ldr	r2, [pc, #88]	; (8004f7c <HAL_ADC_ConfigChannel+0x684>)
 8004f24:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004f26:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8004f2a:	4619      	mov	r1, r3
 8004f2c:	4610      	mov	r0, r2
 8004f2e:	f7fe fd9e 	bl	8003a6e <LL_ADC_SetCommonPathInternalCh>
 8004f32:	e012      	b.n	8004f5a <HAL_ADC_ConfigChannel+0x662>
        /* enabled and other ADC of the common group are enabled, internal      */
        /* measurement paths cannot be enabled.                                 */
        else
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8004f34:	687b      	ldr	r3, [r7, #4]
 8004f36:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004f38:	f043 0220 	orr.w	r2, r3, #32
 8004f3c:	687b      	ldr	r3, [r7, #4]
 8004f3e:	655a      	str	r2, [r3, #84]	; 0x54

          tmp_hal_status = HAL_ERROR;
 8004f40:	2301      	movs	r3, #1
 8004f42:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
 8004f46:	e008      	b.n	8004f5a <HAL_ADC_ConfigChannel+0x662>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8004f48:	687b      	ldr	r3, [r7, #4]
 8004f4a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004f4c:	f043 0220 	orr.w	r2, r3, #32
 8004f50:	687b      	ldr	r3, [r7, #4]
 8004f52:	655a      	str	r2, [r3, #84]	; 0x54

    tmp_hal_status = HAL_ERROR;
 8004f54:	2301      	movs	r3, #1
 8004f56:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8004f5a:	687b      	ldr	r3, [r7, #4]
 8004f5c:	2200      	movs	r2, #0
 8004f5e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Return function status */
  return tmp_hal_status;
 8004f62:	f897 307f 	ldrb.w	r3, [r7, #127]	; 0x7f
}
 8004f66:	4618      	mov	r0, r3
 8004f68:	3784      	adds	r7, #132	; 0x84
 8004f6a:	46bd      	mov	sp, r7
 8004f6c:	bd90      	pop	{r4, r7, pc}
 8004f6e:	bf00      	nop
 8004f70:	40022000 	.word	0x40022000
 8004f74:	40022100 	.word	0x40022100
 8004f78:	40022300 	.word	0x40022300
 8004f7c:	58026300 	.word	0x58026300
 8004f80:	58026000 	.word	0x58026000
 8004f84:	cb840000 	.word	0xcb840000
 8004f88:	20000010 	.word	0x20000010
 8004f8c:	053e2d63 	.word	0x053e2d63
 8004f90:	c7520000 	.word	0xc7520000
 8004f94:	cfb80000 	.word	0xcfb80000

08004f98 <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef *hadc)
{
 8004f98:	b580      	push	{r7, lr}
 8004f9a:	b084      	sub	sp, #16
 8004f9c:	af00      	add	r7, sp, #0
 8004f9e:	6078      	str	r0, [r7, #4]

  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8004fa0:	687b      	ldr	r3, [r7, #4]
 8004fa2:	681b      	ldr	r3, [r3, #0]
 8004fa4:	4618      	mov	r0, r3
 8004fa6:	f7fe ff0b 	bl	8003dc0 <LL_ADC_IsEnabled>
 8004faa:	4603      	mov	r3, r0
 8004fac:	2b00      	cmp	r3, #0
 8004fae:	d16e      	bne.n	800508e <ADC_Enable+0xf6>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_ADCAL | ADC_CR_JADSTP | ADC_CR_ADSTP | ADC_CR_JADSTART | ADC_CR_ADSTART | ADC_CR_ADDIS | ADC_CR_ADEN)) != 0UL)
 8004fb0:	687b      	ldr	r3, [r7, #4]
 8004fb2:	681b      	ldr	r3, [r3, #0]
 8004fb4:	689a      	ldr	r2, [r3, #8]
 8004fb6:	4b38      	ldr	r3, [pc, #224]	; (8005098 <ADC_Enable+0x100>)
 8004fb8:	4013      	ands	r3, r2
 8004fba:	2b00      	cmp	r3, #0
 8004fbc:	d00d      	beq.n	8004fda <ADC_Enable+0x42>
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8004fbe:	687b      	ldr	r3, [r7, #4]
 8004fc0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004fc2:	f043 0210 	orr.w	r2, r3, #16
 8004fc6:	687b      	ldr	r3, [r7, #4]
 8004fc8:	655a      	str	r2, [r3, #84]	; 0x54

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8004fca:	687b      	ldr	r3, [r7, #4]
 8004fcc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004fce:	f043 0201 	orr.w	r2, r3, #1
 8004fd2:	687b      	ldr	r3, [r7, #4]
 8004fd4:	659a      	str	r2, [r3, #88]	; 0x58

      return HAL_ERROR;
 8004fd6:	2301      	movs	r3, #1
 8004fd8:	e05a      	b.n	8005090 <ADC_Enable+0xf8>
    }

    /* Enable the ADC peripheral */
    LL_ADC_Enable(hadc->Instance);
 8004fda:	687b      	ldr	r3, [r7, #4]
 8004fdc:	681b      	ldr	r3, [r3, #0]
 8004fde:	4618      	mov	r0, r3
 8004fe0:	f7fe fec6 	bl	8003d70 <LL_ADC_Enable>

    /* Wait for ADC effectively enabled */
    tickstart = HAL_GetTick();
 8004fe4:	f7fe fcca 	bl	800397c <HAL_GetTick>
 8004fe8:	60f8      	str	r0, [r7, #12]

    /* Poll for ADC ready flag raised except case of multimode enabled
       and ADC slave selected. */
    uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8004fea:	687b      	ldr	r3, [r7, #4]
 8004fec:	681b      	ldr	r3, [r3, #0]
 8004fee:	4a2b      	ldr	r2, [pc, #172]	; (800509c <ADC_Enable+0x104>)
 8004ff0:	4293      	cmp	r3, r2
 8004ff2:	d004      	beq.n	8004ffe <ADC_Enable+0x66>
 8004ff4:	687b      	ldr	r3, [r7, #4]
 8004ff6:	681b      	ldr	r3, [r3, #0]
 8004ff8:	4a29      	ldr	r2, [pc, #164]	; (80050a0 <ADC_Enable+0x108>)
 8004ffa:	4293      	cmp	r3, r2
 8004ffc:	d101      	bne.n	8005002 <ADC_Enable+0x6a>
 8004ffe:	4b29      	ldr	r3, [pc, #164]	; (80050a4 <ADC_Enable+0x10c>)
 8005000:	e000      	b.n	8005004 <ADC_Enable+0x6c>
 8005002:	4b29      	ldr	r3, [pc, #164]	; (80050a8 <ADC_Enable+0x110>)
 8005004:	4618      	mov	r0, r3
 8005006:	f7fe fe49 	bl	8003c9c <LL_ADC_GetMultimode>
 800500a:	60b8      	str	r0, [r7, #8]
    if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 800500c:	687b      	ldr	r3, [r7, #4]
 800500e:	681b      	ldr	r3, [r3, #0]
 8005010:	4a23      	ldr	r2, [pc, #140]	; (80050a0 <ADC_Enable+0x108>)
 8005012:	4293      	cmp	r3, r2
 8005014:	d002      	beq.n	800501c <ADC_Enable+0x84>
 8005016:	687b      	ldr	r3, [r7, #4]
 8005018:	681b      	ldr	r3, [r3, #0]
 800501a:	e000      	b.n	800501e <ADC_Enable+0x86>
 800501c:	4b1f      	ldr	r3, [pc, #124]	; (800509c <ADC_Enable+0x104>)
 800501e:	687a      	ldr	r2, [r7, #4]
 8005020:	6812      	ldr	r2, [r2, #0]
 8005022:	4293      	cmp	r3, r2
 8005024:	d02c      	beq.n	8005080 <ADC_Enable+0xe8>
        || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8005026:	68bb      	ldr	r3, [r7, #8]
 8005028:	2b00      	cmp	r3, #0
 800502a:	d130      	bne.n	800508e <ADC_Enable+0xf6>
       )
    {
      while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 800502c:	e028      	b.n	8005080 <ADC_Enable+0xe8>
            The workaround is to continue setting ADEN until ADRDY is becomes 1.
            Additionally, ADC_ENABLE_TIMEOUT is defined to encompass this
            4 ADC clock cycle duration */
        /* Note: Test of ADC enabled required due to hardware constraint to     */
        /*       not enable ADC if already enabled.                             */
        if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 800502e:	687b      	ldr	r3, [r7, #4]
 8005030:	681b      	ldr	r3, [r3, #0]
 8005032:	4618      	mov	r0, r3
 8005034:	f7fe fec4 	bl	8003dc0 <LL_ADC_IsEnabled>
 8005038:	4603      	mov	r3, r0
 800503a:	2b00      	cmp	r3, #0
 800503c:	d104      	bne.n	8005048 <ADC_Enable+0xb0>
        {
          LL_ADC_Enable(hadc->Instance);
 800503e:	687b      	ldr	r3, [r7, #4]
 8005040:	681b      	ldr	r3, [r3, #0]
 8005042:	4618      	mov	r0, r3
 8005044:	f7fe fe94 	bl	8003d70 <LL_ADC_Enable>
        }

        if ((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 8005048:	f7fe fc98 	bl	800397c <HAL_GetTick>
 800504c:	4602      	mov	r2, r0
 800504e:	68fb      	ldr	r3, [r7, #12]
 8005050:	1ad3      	subs	r3, r2, r3
 8005052:	2b02      	cmp	r3, #2
 8005054:	d914      	bls.n	8005080 <ADC_Enable+0xe8>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8005056:	687b      	ldr	r3, [r7, #4]
 8005058:	681b      	ldr	r3, [r3, #0]
 800505a:	681b      	ldr	r3, [r3, #0]
 800505c:	f003 0301 	and.w	r3, r3, #1
 8005060:	2b01      	cmp	r3, #1
 8005062:	d00d      	beq.n	8005080 <ADC_Enable+0xe8>
          {
            /* Update ADC state machine to error */
            SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8005064:	687b      	ldr	r3, [r7, #4]
 8005066:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005068:	f043 0210 	orr.w	r2, r3, #16
 800506c:	687b      	ldr	r3, [r7, #4]
 800506e:	655a      	str	r2, [r3, #84]	; 0x54

            /* Set ADC error code to ADC peripheral internal error */
            SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8005070:	687b      	ldr	r3, [r7, #4]
 8005072:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005074:	f043 0201 	orr.w	r2, r3, #1
 8005078:	687b      	ldr	r3, [r7, #4]
 800507a:	659a      	str	r2, [r3, #88]	; 0x58

            return HAL_ERROR;
 800507c:	2301      	movs	r3, #1
 800507e:	e007      	b.n	8005090 <ADC_Enable+0xf8>
      while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8005080:	687b      	ldr	r3, [r7, #4]
 8005082:	681b      	ldr	r3, [r3, #0]
 8005084:	681b      	ldr	r3, [r3, #0]
 8005086:	f003 0301 	and.w	r3, r3, #1
 800508a:	2b01      	cmp	r3, #1
 800508c:	d1cf      	bne.n	800502e <ADC_Enable+0x96>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 800508e:	2300      	movs	r3, #0
}
 8005090:	4618      	mov	r0, r3
 8005092:	3710      	adds	r7, #16
 8005094:	46bd      	mov	sp, r7
 8005096:	bd80      	pop	{r7, pc}
 8005098:	8000003f 	.word	0x8000003f
 800509c:	40022000 	.word	0x40022000
 80050a0:	40022100 	.word	0x40022100
 80050a4:	40022300 	.word	0x40022300
 80050a8:	58026300 	.word	0x58026300

080050ac <ADC_Disable>:
  *         stopped.
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Disable(ADC_HandleTypeDef *hadc)
{
 80050ac:	b580      	push	{r7, lr}
 80050ae:	b084      	sub	sp, #16
 80050b0:	af00      	add	r7, sp, #0
 80050b2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  const uint32_t tmp_adc_is_disable_on_going = LL_ADC_IsDisableOngoing(hadc->Instance);
 80050b4:	687b      	ldr	r3, [r7, #4]
 80050b6:	681b      	ldr	r3, [r3, #0]
 80050b8:	4618      	mov	r0, r3
 80050ba:	f7fe fe94 	bl	8003de6 <LL_ADC_IsDisableOngoing>
 80050be:	60f8      	str	r0, [r7, #12]

  /* Verification if ADC is not already disabled:                             */
  /* Note: forbidden to disable ADC (set bit ADC_CR_ADDIS) if ADC is already  */
  /*       disabled.                                                          */
  if ((LL_ADC_IsEnabled(hadc->Instance) != 0UL)
 80050c0:	687b      	ldr	r3, [r7, #4]
 80050c2:	681b      	ldr	r3, [r3, #0]
 80050c4:	4618      	mov	r0, r3
 80050c6:	f7fe fe7b 	bl	8003dc0 <LL_ADC_IsEnabled>
 80050ca:	4603      	mov	r3, r0
 80050cc:	2b00      	cmp	r3, #0
 80050ce:	d047      	beq.n	8005160 <ADC_Disable+0xb4>
      && (tmp_adc_is_disable_on_going == 0UL)
 80050d0:	68fb      	ldr	r3, [r7, #12]
 80050d2:	2b00      	cmp	r3, #0
 80050d4:	d144      	bne.n	8005160 <ADC_Disable+0xb4>
     )
  {
    /* Check if conditions to disable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_JADSTART | ADC_CR_ADSTART | ADC_CR_ADEN)) == ADC_CR_ADEN)
 80050d6:	687b      	ldr	r3, [r7, #4]
 80050d8:	681b      	ldr	r3, [r3, #0]
 80050da:	689b      	ldr	r3, [r3, #8]
 80050dc:	f003 030d 	and.w	r3, r3, #13
 80050e0:	2b01      	cmp	r3, #1
 80050e2:	d10c      	bne.n	80050fe <ADC_Disable+0x52>
    {
      /* Disable the ADC peripheral */
      LL_ADC_Disable(hadc->Instance);
 80050e4:	687b      	ldr	r3, [r7, #4]
 80050e6:	681b      	ldr	r3, [r3, #0]
 80050e8:	4618      	mov	r0, r3
 80050ea:	f7fe fe55 	bl	8003d98 <LL_ADC_Disable>
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOSMP | ADC_FLAG_RDY));
 80050ee:	687b      	ldr	r3, [r7, #4]
 80050f0:	681b      	ldr	r3, [r3, #0]
 80050f2:	2203      	movs	r2, #3
 80050f4:	601a      	str	r2, [r3, #0]
      return HAL_ERROR;
    }

    /* Wait for ADC effectively disabled */
    /* Get tick count */
    tickstart = HAL_GetTick();
 80050f6:	f7fe fc41 	bl	800397c <HAL_GetTick>
 80050fa:	60b8      	str	r0, [r7, #8]

    while ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 80050fc:	e029      	b.n	8005152 <ADC_Disable+0xa6>
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80050fe:	687b      	ldr	r3, [r7, #4]
 8005100:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005102:	f043 0210 	orr.w	r2, r3, #16
 8005106:	687b      	ldr	r3, [r7, #4]
 8005108:	655a      	str	r2, [r3, #84]	; 0x54
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800510a:	687b      	ldr	r3, [r7, #4]
 800510c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800510e:	f043 0201 	orr.w	r2, r3, #1
 8005112:	687b      	ldr	r3, [r7, #4]
 8005114:	659a      	str	r2, [r3, #88]	; 0x58
      return HAL_ERROR;
 8005116:	2301      	movs	r3, #1
 8005118:	e023      	b.n	8005162 <ADC_Disable+0xb6>
    {
      if ((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 800511a:	f7fe fc2f 	bl	800397c <HAL_GetTick>
 800511e:	4602      	mov	r2, r0
 8005120:	68bb      	ldr	r3, [r7, #8]
 8005122:	1ad3      	subs	r3, r2, r3
 8005124:	2b02      	cmp	r3, #2
 8005126:	d914      	bls.n	8005152 <ADC_Disable+0xa6>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 8005128:	687b      	ldr	r3, [r7, #4]
 800512a:	681b      	ldr	r3, [r3, #0]
 800512c:	689b      	ldr	r3, [r3, #8]
 800512e:	f003 0301 	and.w	r3, r3, #1
 8005132:	2b00      	cmp	r3, #0
 8005134:	d00d      	beq.n	8005152 <ADC_Disable+0xa6>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8005136:	687b      	ldr	r3, [r7, #4]
 8005138:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800513a:	f043 0210 	orr.w	r2, r3, #16
 800513e:	687b      	ldr	r3, [r7, #4]
 8005140:	655a      	str	r2, [r3, #84]	; 0x54

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8005142:	687b      	ldr	r3, [r7, #4]
 8005144:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005146:	f043 0201 	orr.w	r2, r3, #1
 800514a:	687b      	ldr	r3, [r7, #4]
 800514c:	659a      	str	r2, [r3, #88]	; 0x58

          return HAL_ERROR;
 800514e:	2301      	movs	r3, #1
 8005150:	e007      	b.n	8005162 <ADC_Disable+0xb6>
    while ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 8005152:	687b      	ldr	r3, [r7, #4]
 8005154:	681b      	ldr	r3, [r3, #0]
 8005156:	689b      	ldr	r3, [r3, #8]
 8005158:	f003 0301 	and.w	r3, r3, #1
 800515c:	2b00      	cmp	r3, #0
 800515e:	d1dc      	bne.n	800511a <ADC_Disable+0x6e>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 8005160:	2300      	movs	r3, #0
}
 8005162:	4618      	mov	r0, r3
 8005164:	3710      	adds	r7, #16
 8005166:	46bd      	mov	sp, r7
 8005168:	bd80      	pop	{r7, pc}
	...

0800516c <ADC_ConfigureBoostMode>:
  *         stopped.
  * @param  hadc ADC handle
  * @retval None.
  */
void ADC_ConfigureBoostMode(ADC_HandleTypeDef *hadc)
{
 800516c:	b580      	push	{r7, lr}
 800516e:	b084      	sub	sp, #16
 8005170:	af00      	add	r7, sp, #0
 8005172:	6078      	str	r0, [r7, #4]
  uint32_t freq;
  if (ADC_IS_SYNCHRONOUS_CLOCK_MODE(hadc))
 8005174:	687b      	ldr	r3, [r7, #4]
 8005176:	681b      	ldr	r3, [r3, #0]
 8005178:	4a7a      	ldr	r2, [pc, #488]	; (8005364 <ADC_ConfigureBoostMode+0x1f8>)
 800517a:	4293      	cmp	r3, r2
 800517c:	d004      	beq.n	8005188 <ADC_ConfigureBoostMode+0x1c>
 800517e:	687b      	ldr	r3, [r7, #4]
 8005180:	681b      	ldr	r3, [r3, #0]
 8005182:	4a79      	ldr	r2, [pc, #484]	; (8005368 <ADC_ConfigureBoostMode+0x1fc>)
 8005184:	4293      	cmp	r3, r2
 8005186:	d109      	bne.n	800519c <ADC_ConfigureBoostMode+0x30>
 8005188:	4b78      	ldr	r3, [pc, #480]	; (800536c <ADC_ConfigureBoostMode+0x200>)
 800518a:	689b      	ldr	r3, [r3, #8]
 800518c:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8005190:	2b00      	cmp	r3, #0
 8005192:	bf14      	ite	ne
 8005194:	2301      	movne	r3, #1
 8005196:	2300      	moveq	r3, #0
 8005198:	b2db      	uxtb	r3, r3
 800519a:	e008      	b.n	80051ae <ADC_ConfigureBoostMode+0x42>
 800519c:	4b74      	ldr	r3, [pc, #464]	; (8005370 <ADC_ConfigureBoostMode+0x204>)
 800519e:	689b      	ldr	r3, [r3, #8]
 80051a0:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80051a4:	2b00      	cmp	r3, #0
 80051a6:	bf14      	ite	ne
 80051a8:	2301      	movne	r3, #1
 80051aa:	2300      	moveq	r3, #0
 80051ac:	b2db      	uxtb	r3, r3
 80051ae:	2b00      	cmp	r3, #0
 80051b0:	d01c      	beq.n	80051ec <ADC_ConfigureBoostMode+0x80>
  {
    freq = HAL_RCC_GetHCLKFreq();
 80051b2:	f005 f9d9 	bl	800a568 <HAL_RCC_GetHCLKFreq>
 80051b6:	60f8      	str	r0, [r7, #12]
    switch (hadc->Init.ClockPrescaler)
 80051b8:	687b      	ldr	r3, [r7, #4]
 80051ba:	685b      	ldr	r3, [r3, #4]
 80051bc:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 80051c0:	d010      	beq.n	80051e4 <ADC_ConfigureBoostMode+0x78>
 80051c2:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 80051c6:	d873      	bhi.n	80052b0 <ADC_ConfigureBoostMode+0x144>
 80051c8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80051cc:	d002      	beq.n	80051d4 <ADC_ConfigureBoostMode+0x68>
 80051ce:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80051d2:	d16d      	bne.n	80052b0 <ADC_ConfigureBoostMode+0x144>
    {
      case ADC_CLOCK_SYNC_PCLK_DIV1:
      case ADC_CLOCK_SYNC_PCLK_DIV2:
        freq /= (hadc->Init.ClockPrescaler >> ADC_CCR_CKMODE_Pos);
 80051d4:	687b      	ldr	r3, [r7, #4]
 80051d6:	685b      	ldr	r3, [r3, #4]
 80051d8:	0c1b      	lsrs	r3, r3, #16
 80051da:	68fa      	ldr	r2, [r7, #12]
 80051dc:	fbb2 f3f3 	udiv	r3, r2, r3
 80051e0:	60fb      	str	r3, [r7, #12]
        break;
 80051e2:	e068      	b.n	80052b6 <ADC_ConfigureBoostMode+0x14a>
      case ADC_CLOCK_SYNC_PCLK_DIV4:
        freq /= 4UL;
 80051e4:	68fb      	ldr	r3, [r7, #12]
 80051e6:	089b      	lsrs	r3, r3, #2
 80051e8:	60fb      	str	r3, [r7, #12]
        break;
 80051ea:	e064      	b.n	80052b6 <ADC_ConfigureBoostMode+0x14a>
        break;
    }
  }
  else
  {
    freq = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_ADC);
 80051ec:	f44f 2000 	mov.w	r0, #524288	; 0x80000
 80051f0:	f04f 0100 	mov.w	r1, #0
 80051f4:	f006 fc3a 	bl	800ba6c <HAL_RCCEx_GetPeriphCLKFreq>
 80051f8:	60f8      	str	r0, [r7, #12]
    switch (hadc->Init.ClockPrescaler)
 80051fa:	687b      	ldr	r3, [r7, #4]
 80051fc:	685b      	ldr	r3, [r3, #4]
 80051fe:	f5b3 1f30 	cmp.w	r3, #2883584	; 0x2c0000
 8005202:	d051      	beq.n	80052a8 <ADC_ConfigureBoostMode+0x13c>
 8005204:	f5b3 1f30 	cmp.w	r3, #2883584	; 0x2c0000
 8005208:	d854      	bhi.n	80052b4 <ADC_ConfigureBoostMode+0x148>
 800520a:	f5b3 1f20 	cmp.w	r3, #2621440	; 0x280000
 800520e:	d047      	beq.n	80052a0 <ADC_ConfigureBoostMode+0x134>
 8005210:	f5b3 1f20 	cmp.w	r3, #2621440	; 0x280000
 8005214:	d84e      	bhi.n	80052b4 <ADC_ConfigureBoostMode+0x148>
 8005216:	f5b3 1f10 	cmp.w	r3, #2359296	; 0x240000
 800521a:	d03d      	beq.n	8005298 <ADC_ConfigureBoostMode+0x12c>
 800521c:	f5b3 1f10 	cmp.w	r3, #2359296	; 0x240000
 8005220:	d848      	bhi.n	80052b4 <ADC_ConfigureBoostMode+0x148>
 8005222:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8005226:	d033      	beq.n	8005290 <ADC_ConfigureBoostMode+0x124>
 8005228:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800522c:	d842      	bhi.n	80052b4 <ADC_ConfigureBoostMode+0x148>
 800522e:	f5b3 1fe0 	cmp.w	r3, #1835008	; 0x1c0000
 8005232:	d029      	beq.n	8005288 <ADC_ConfigureBoostMode+0x11c>
 8005234:	f5b3 1fe0 	cmp.w	r3, #1835008	; 0x1c0000
 8005238:	d83c      	bhi.n	80052b4 <ADC_ConfigureBoostMode+0x148>
 800523a:	f5b3 1fc0 	cmp.w	r3, #1572864	; 0x180000
 800523e:	d01a      	beq.n	8005276 <ADC_ConfigureBoostMode+0x10a>
 8005240:	f5b3 1fc0 	cmp.w	r3, #1572864	; 0x180000
 8005244:	d836      	bhi.n	80052b4 <ADC_ConfigureBoostMode+0x148>
 8005246:	f5b3 1fa0 	cmp.w	r3, #1310720	; 0x140000
 800524a:	d014      	beq.n	8005276 <ADC_ConfigureBoostMode+0x10a>
 800524c:	f5b3 1fa0 	cmp.w	r3, #1310720	; 0x140000
 8005250:	d830      	bhi.n	80052b4 <ADC_ConfigureBoostMode+0x148>
 8005252:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8005256:	d00e      	beq.n	8005276 <ADC_ConfigureBoostMode+0x10a>
 8005258:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800525c:	d82a      	bhi.n	80052b4 <ADC_ConfigureBoostMode+0x148>
 800525e:	f5b3 2f40 	cmp.w	r3, #786432	; 0xc0000
 8005262:	d008      	beq.n	8005276 <ADC_ConfigureBoostMode+0x10a>
 8005264:	f5b3 2f40 	cmp.w	r3, #786432	; 0xc0000
 8005268:	d824      	bhi.n	80052b4 <ADC_ConfigureBoostMode+0x148>
 800526a:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 800526e:	d002      	beq.n	8005276 <ADC_ConfigureBoostMode+0x10a>
 8005270:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8005274:	d11e      	bne.n	80052b4 <ADC_ConfigureBoostMode+0x148>
      case ADC_CLOCK_ASYNC_DIV4:
      case ADC_CLOCK_ASYNC_DIV6:
      case ADC_CLOCK_ASYNC_DIV8:
      case ADC_CLOCK_ASYNC_DIV10:
      case ADC_CLOCK_ASYNC_DIV12:
        freq /= ((hadc->Init.ClockPrescaler >> ADC_CCR_PRESC_Pos) << 1UL);
 8005276:	687b      	ldr	r3, [r7, #4]
 8005278:	685b      	ldr	r3, [r3, #4]
 800527a:	0c9b      	lsrs	r3, r3, #18
 800527c:	005b      	lsls	r3, r3, #1
 800527e:	68fa      	ldr	r2, [r7, #12]
 8005280:	fbb2 f3f3 	udiv	r3, r2, r3
 8005284:	60fb      	str	r3, [r7, #12]
        break;
 8005286:	e016      	b.n	80052b6 <ADC_ConfigureBoostMode+0x14a>
      case ADC_CLOCK_ASYNC_DIV16:
        freq /= 16UL;
 8005288:	68fb      	ldr	r3, [r7, #12]
 800528a:	091b      	lsrs	r3, r3, #4
 800528c:	60fb      	str	r3, [r7, #12]
        break;
 800528e:	e012      	b.n	80052b6 <ADC_ConfigureBoostMode+0x14a>
      case ADC_CLOCK_ASYNC_DIV32:
        freq /= 32UL;
 8005290:	68fb      	ldr	r3, [r7, #12]
 8005292:	095b      	lsrs	r3, r3, #5
 8005294:	60fb      	str	r3, [r7, #12]
        break;
 8005296:	e00e      	b.n	80052b6 <ADC_ConfigureBoostMode+0x14a>
      case ADC_CLOCK_ASYNC_DIV64:
        freq /= 64UL;
 8005298:	68fb      	ldr	r3, [r7, #12]
 800529a:	099b      	lsrs	r3, r3, #6
 800529c:	60fb      	str	r3, [r7, #12]
        break;
 800529e:	e00a      	b.n	80052b6 <ADC_ConfigureBoostMode+0x14a>
      case ADC_CLOCK_ASYNC_DIV128:
        freq /= 128UL;
 80052a0:	68fb      	ldr	r3, [r7, #12]
 80052a2:	09db      	lsrs	r3, r3, #7
 80052a4:	60fb      	str	r3, [r7, #12]
        break;
 80052a6:	e006      	b.n	80052b6 <ADC_ConfigureBoostMode+0x14a>
      case ADC_CLOCK_ASYNC_DIV256:
        freq /= 256UL;
 80052a8:	68fb      	ldr	r3, [r7, #12]
 80052aa:	0a1b      	lsrs	r3, r3, #8
 80052ac:	60fb      	str	r3, [r7, #12]
        break;
 80052ae:	e002      	b.n	80052b6 <ADC_ConfigureBoostMode+0x14a>
        break;
 80052b0:	bf00      	nop
 80052b2:	e000      	b.n	80052b6 <ADC_ConfigureBoostMode+0x14a>
      default:
        break;
 80052b4:	bf00      	nop
  else /* if(freq > 25000000UL) */
  {
    MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1 | ADC_CR_BOOST_0);
  }
#else
  if (HAL_GetREVID() <= REV_ID_Y) /* STM32H7 silicon Rev.Y */
 80052b6:	f7fe fb91 	bl	80039dc <HAL_GetREVID>
 80052ba:	4603      	mov	r3, r0
 80052bc:	f241 0203 	movw	r2, #4099	; 0x1003
 80052c0:	4293      	cmp	r3, r2
 80052c2:	d815      	bhi.n	80052f0 <ADC_ConfigureBoostMode+0x184>
  {
    if (freq > 20000000UL)
 80052c4:	68fb      	ldr	r3, [r7, #12]
 80052c6:	4a2b      	ldr	r2, [pc, #172]	; (8005374 <ADC_ConfigureBoostMode+0x208>)
 80052c8:	4293      	cmp	r3, r2
 80052ca:	d908      	bls.n	80052de <ADC_ConfigureBoostMode+0x172>
    {
      SET_BIT(hadc->Instance->CR, ADC_CR_BOOST_0);
 80052cc:	687b      	ldr	r3, [r7, #4]
 80052ce:	681b      	ldr	r3, [r3, #0]
 80052d0:	689a      	ldr	r2, [r3, #8]
 80052d2:	687b      	ldr	r3, [r7, #4]
 80052d4:	681b      	ldr	r3, [r3, #0]
 80052d6:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80052da:	609a      	str	r2, [r3, #8]
    {
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1 | ADC_CR_BOOST_0);
    }
  }
#endif /* ADC_VER_V5_3 */
}
 80052dc:	e03e      	b.n	800535c <ADC_ConfigureBoostMode+0x1f0>
      CLEAR_BIT(hadc->Instance->CR, ADC_CR_BOOST_0);
 80052de:	687b      	ldr	r3, [r7, #4]
 80052e0:	681b      	ldr	r3, [r3, #0]
 80052e2:	689a      	ldr	r2, [r3, #8]
 80052e4:	687b      	ldr	r3, [r7, #4]
 80052e6:	681b      	ldr	r3, [r3, #0]
 80052e8:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80052ec:	609a      	str	r2, [r3, #8]
}
 80052ee:	e035      	b.n	800535c <ADC_ConfigureBoostMode+0x1f0>
    freq /= 2U; /* divider by 2 for Rev.V */
 80052f0:	68fb      	ldr	r3, [r7, #12]
 80052f2:	085b      	lsrs	r3, r3, #1
 80052f4:	60fb      	str	r3, [r7, #12]
    if (freq <= 6250000UL)
 80052f6:	68fb      	ldr	r3, [r7, #12]
 80052f8:	4a1f      	ldr	r2, [pc, #124]	; (8005378 <ADC_ConfigureBoostMode+0x20c>)
 80052fa:	4293      	cmp	r3, r2
 80052fc:	d808      	bhi.n	8005310 <ADC_ConfigureBoostMode+0x1a4>
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, 0UL);
 80052fe:	687b      	ldr	r3, [r7, #4]
 8005300:	681b      	ldr	r3, [r3, #0]
 8005302:	689a      	ldr	r2, [r3, #8]
 8005304:	687b      	ldr	r3, [r7, #4]
 8005306:	681b      	ldr	r3, [r3, #0]
 8005308:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 800530c:	609a      	str	r2, [r3, #8]
}
 800530e:	e025      	b.n	800535c <ADC_ConfigureBoostMode+0x1f0>
    else if (freq <= 12500000UL)
 8005310:	68fb      	ldr	r3, [r7, #12]
 8005312:	4a1a      	ldr	r2, [pc, #104]	; (800537c <ADC_ConfigureBoostMode+0x210>)
 8005314:	4293      	cmp	r3, r2
 8005316:	d80a      	bhi.n	800532e <ADC_ConfigureBoostMode+0x1c2>
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_0);
 8005318:	687b      	ldr	r3, [r7, #4]
 800531a:	681b      	ldr	r3, [r3, #0]
 800531c:	689b      	ldr	r3, [r3, #8]
 800531e:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8005322:	687b      	ldr	r3, [r7, #4]
 8005324:	681b      	ldr	r3, [r3, #0]
 8005326:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800532a:	609a      	str	r2, [r3, #8]
}
 800532c:	e016      	b.n	800535c <ADC_ConfigureBoostMode+0x1f0>
    else if (freq <= 25000000UL)
 800532e:	68fb      	ldr	r3, [r7, #12]
 8005330:	4a13      	ldr	r2, [pc, #76]	; (8005380 <ADC_ConfigureBoostMode+0x214>)
 8005332:	4293      	cmp	r3, r2
 8005334:	d80a      	bhi.n	800534c <ADC_ConfigureBoostMode+0x1e0>
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1);
 8005336:	687b      	ldr	r3, [r7, #4]
 8005338:	681b      	ldr	r3, [r3, #0]
 800533a:	689b      	ldr	r3, [r3, #8]
 800533c:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8005340:	687b      	ldr	r3, [r7, #4]
 8005342:	681b      	ldr	r3, [r3, #0]
 8005344:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005348:	609a      	str	r2, [r3, #8]
}
 800534a:	e007      	b.n	800535c <ADC_ConfigureBoostMode+0x1f0>
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1 | ADC_CR_BOOST_0);
 800534c:	687b      	ldr	r3, [r7, #4]
 800534e:	681b      	ldr	r3, [r3, #0]
 8005350:	689a      	ldr	r2, [r3, #8]
 8005352:	687b      	ldr	r3, [r7, #4]
 8005354:	681b      	ldr	r3, [r3, #0]
 8005356:	f442 7240 	orr.w	r2, r2, #768	; 0x300
 800535a:	609a      	str	r2, [r3, #8]
}
 800535c:	bf00      	nop
 800535e:	3710      	adds	r7, #16
 8005360:	46bd      	mov	sp, r7
 8005362:	bd80      	pop	{r7, pc}
 8005364:	40022000 	.word	0x40022000
 8005368:	40022100 	.word	0x40022100
 800536c:	40022300 	.word	0x40022300
 8005370:	58026300 	.word	0x58026300
 8005374:	01312d00 	.word	0x01312d00
 8005378:	005f5e10 	.word	0x005f5e10
 800537c:	00bebc20 	.word	0x00bebc20
 8005380:	017d7840 	.word	0x017d7840

08005384 <LL_ADC_StartCalibration>:
{
 8005384:	b480      	push	{r7}
 8005386:	b085      	sub	sp, #20
 8005388:	af00      	add	r7, sp, #0
 800538a:	60f8      	str	r0, [r7, #12]
 800538c:	60b9      	str	r1, [r7, #8]
 800538e:	607a      	str	r2, [r7, #4]
  MODIFY_REG(ADCx->CR,
 8005390:	68fb      	ldr	r3, [r7, #12]
 8005392:	689a      	ldr	r2, [r3, #8]
 8005394:	4b09      	ldr	r3, [pc, #36]	; (80053bc <LL_ADC_StartCalibration+0x38>)
 8005396:	4013      	ands	r3, r2
 8005398:	68ba      	ldr	r2, [r7, #8]
 800539a:	f402 3180 	and.w	r1, r2, #65536	; 0x10000
 800539e:	687a      	ldr	r2, [r7, #4]
 80053a0:	f002 4280 	and.w	r2, r2, #1073741824	; 0x40000000
 80053a4:	430a      	orrs	r2, r1
 80053a6:	4313      	orrs	r3, r2
 80053a8:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 80053ac:	68fb      	ldr	r3, [r7, #12]
 80053ae:	609a      	str	r2, [r3, #8]
}
 80053b0:	bf00      	nop
 80053b2:	3714      	adds	r7, #20
 80053b4:	46bd      	mov	sp, r7
 80053b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053ba:	4770      	bx	lr
 80053bc:	3ffeffc0 	.word	0x3ffeffc0

080053c0 <LL_ADC_IsCalibrationOnGoing>:
{
 80053c0:	b480      	push	{r7}
 80053c2:	b083      	sub	sp, #12
 80053c4:	af00      	add	r7, sp, #0
 80053c6:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADCAL) == (ADC_CR_ADCAL)) ? 1UL : 0UL);
 80053c8:	687b      	ldr	r3, [r7, #4]
 80053ca:	689b      	ldr	r3, [r3, #8]
 80053cc:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80053d0:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80053d4:	d101      	bne.n	80053da <LL_ADC_IsCalibrationOnGoing+0x1a>
 80053d6:	2301      	movs	r3, #1
 80053d8:	e000      	b.n	80053dc <LL_ADC_IsCalibrationOnGoing+0x1c>
 80053da:	2300      	movs	r3, #0
}
 80053dc:	4618      	mov	r0, r3
 80053de:	370c      	adds	r7, #12
 80053e0:	46bd      	mov	sp, r7
 80053e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053e6:	4770      	bx	lr

080053e8 <HAL_ADCEx_Calibration_Start>:
  *           @arg @ref ADC_SINGLE_ENDED       Channel in mode input single ended
  *           @arg @ref ADC_DIFFERENTIAL_ENDED Channel in mode input differential ended
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_Calibration_Start(ADC_HandleTypeDef *hadc, uint32_t CalibrationMode, uint32_t SingleDiff)
{
 80053e8:	b580      	push	{r7, lr}
 80053ea:	b086      	sub	sp, #24
 80053ec:	af00      	add	r7, sp, #0
 80053ee:	60f8      	str	r0, [r7, #12]
 80053f0:	60b9      	str	r1, [r7, #8]
 80053f2:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status;
  __IO uint32_t wait_loop_index = 0UL;
 80053f4:	2300      	movs	r3, #0
 80053f6:	613b      	str	r3, [r7, #16]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_SINGLE_DIFFERENTIAL(SingleDiff));

  /* Process locked */
  __HAL_LOCK(hadc);
 80053f8:	68fb      	ldr	r3, [r7, #12]
 80053fa:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 80053fe:	2b01      	cmp	r3, #1
 8005400:	d101      	bne.n	8005406 <HAL_ADCEx_Calibration_Start+0x1e>
 8005402:	2302      	movs	r3, #2
 8005404:	e04c      	b.n	80054a0 <HAL_ADCEx_Calibration_Start+0xb8>
 8005406:	68fb      	ldr	r3, [r7, #12]
 8005408:	2201      	movs	r2, #1
 800540a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Calibration prerequisite: ADC must be disabled. */

  /* Disable the ADC (if not already disabled) */
  tmp_hal_status = ADC_Disable(hadc);
 800540e:	68f8      	ldr	r0, [r7, #12]
 8005410:	f7ff fe4c 	bl	80050ac <ADC_Disable>
 8005414:	4603      	mov	r3, r0
 8005416:	75fb      	strb	r3, [r7, #23]

  /* Check if ADC is effectively disabled */
  if (tmp_hal_status == HAL_OK)
 8005418:	7dfb      	ldrb	r3, [r7, #23]
 800541a:	2b00      	cmp	r3, #0
 800541c:	d135      	bne.n	800548a <HAL_ADCEx_Calibration_Start+0xa2>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800541e:	68fb      	ldr	r3, [r7, #12]
 8005420:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8005422:	4b21      	ldr	r3, [pc, #132]	; (80054a8 <HAL_ADCEx_Calibration_Start+0xc0>)
 8005424:	4013      	ands	r3, r2
 8005426:	f043 0202 	orr.w	r2, r3, #2
 800542a:	68fb      	ldr	r3, [r7, #12]
 800542c:	655a      	str	r2, [r3, #84]	; 0x54
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);

    /* Start ADC calibration in mode single-ended or differential */
    LL_ADC_StartCalibration(hadc->Instance, CalibrationMode, SingleDiff);
 800542e:	68fb      	ldr	r3, [r7, #12]
 8005430:	681b      	ldr	r3, [r3, #0]
 8005432:	687a      	ldr	r2, [r7, #4]
 8005434:	68b9      	ldr	r1, [r7, #8]
 8005436:	4618      	mov	r0, r3
 8005438:	f7ff ffa4 	bl	8005384 <LL_ADC_StartCalibration>

    /* Wait for calibration completion */
    while (LL_ADC_IsCalibrationOnGoing(hadc->Instance) != 0UL)
 800543c:	e014      	b.n	8005468 <HAL_ADCEx_Calibration_Start+0x80>
    {
      wait_loop_index++;
 800543e:	693b      	ldr	r3, [r7, #16]
 8005440:	3301      	adds	r3, #1
 8005442:	613b      	str	r3, [r7, #16]
      if (wait_loop_index >= ADC_CALIBRATION_TIMEOUT)
 8005444:	693b      	ldr	r3, [r7, #16]
 8005446:	4a19      	ldr	r2, [pc, #100]	; (80054ac <HAL_ADCEx_Calibration_Start+0xc4>)
 8005448:	4293      	cmp	r3, r2
 800544a:	d30d      	bcc.n	8005468 <HAL_ADCEx_Calibration_Start+0x80>
      {
        /* Update ADC state machine to error */
        ADC_STATE_CLR_SET(hadc->State,
 800544c:	68fb      	ldr	r3, [r7, #12]
 800544e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005450:	f023 0312 	bic.w	r3, r3, #18
 8005454:	f043 0210 	orr.w	r2, r3, #16
 8005458:	68fb      	ldr	r3, [r7, #12]
 800545a:	655a      	str	r2, [r3, #84]	; 0x54
                          HAL_ADC_STATE_BUSY_INTERNAL,
                          HAL_ADC_STATE_ERROR_INTERNAL);

        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 800545c:	68fb      	ldr	r3, [r7, #12]
 800545e:	2200      	movs	r2, #0
 8005460:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_ERROR;
 8005464:	2301      	movs	r3, #1
 8005466:	e01b      	b.n	80054a0 <HAL_ADCEx_Calibration_Start+0xb8>
    while (LL_ADC_IsCalibrationOnGoing(hadc->Instance) != 0UL)
 8005468:	68fb      	ldr	r3, [r7, #12]
 800546a:	681b      	ldr	r3, [r3, #0]
 800546c:	4618      	mov	r0, r3
 800546e:	f7ff ffa7 	bl	80053c0 <LL_ADC_IsCalibrationOnGoing>
 8005472:	4603      	mov	r3, r0
 8005474:	2b00      	cmp	r3, #0
 8005476:	d1e2      	bne.n	800543e <HAL_ADCEx_Calibration_Start+0x56>
      }
    }

    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8005478:	68fb      	ldr	r3, [r7, #12]
 800547a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800547c:	f023 0303 	bic.w	r3, r3, #3
 8005480:	f043 0201 	orr.w	r2, r3, #1
 8005484:	68fb      	ldr	r3, [r7, #12]
 8005486:	655a      	str	r2, [r3, #84]	; 0x54
 8005488:	e005      	b.n	8005496 <HAL_ADCEx_Calibration_Start+0xae>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800548a:	68fb      	ldr	r3, [r7, #12]
 800548c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800548e:	f043 0210 	orr.w	r2, r3, #16
 8005492:	68fb      	ldr	r3, [r7, #12]
 8005494:	655a      	str	r2, [r3, #84]	; 0x54
    /* Note: No need to update variable "tmp_hal_status" here: already set    */
    /*       to state "HAL_ERROR" by function disabling the ADC.              */
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8005496:	68fb      	ldr	r3, [r7, #12]
 8005498:	2200      	movs	r2, #0
 800549a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Return function status */
  return tmp_hal_status;
 800549e:	7dfb      	ldrb	r3, [r7, #23]
}
 80054a0:	4618      	mov	r0, r3
 80054a2:	3718      	adds	r7, #24
 80054a4:	46bd      	mov	sp, r7
 80054a6:	bd80      	pop	{r7, pc}
 80054a8:	ffffeefd 	.word	0xffffeefd
 80054ac:	25c3f800 	.word	0x25c3f800

080054b0 <HAL_ADCEx_InjectedConvCpltCallback>:
  * @brief  Injected conversion complete callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_InjectedConvCpltCallback(ADC_HandleTypeDef *hadc)
{
 80054b0:	b480      	push	{r7}
 80054b2:	b083      	sub	sp, #12
 80054b4:	af00      	add	r7, sp, #0
 80054b6:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_InjectedConvCpltCallback must be implemented in the user file.
  */
}
 80054b8:	bf00      	nop
 80054ba:	370c      	adds	r7, #12
 80054bc:	46bd      	mov	sp, r7
 80054be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054c2:	4770      	bx	lr

080054c4 <HAL_ADCEx_InjectedQueueOverflowCallback>:
            contexts).
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_InjectedQueueOverflowCallback(ADC_HandleTypeDef *hadc)
{
 80054c4:	b480      	push	{r7}
 80054c6:	b083      	sub	sp, #12
 80054c8:	af00      	add	r7, sp, #0
 80054ca:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_InjectedQueueOverflowCallback must be implemented in the user file.
  */
}
 80054cc:	bf00      	nop
 80054ce:	370c      	adds	r7, #12
 80054d0:	46bd      	mov	sp, r7
 80054d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054d6:	4770      	bx	lr

080054d8 <HAL_ADCEx_LevelOutOfWindow2Callback>:
  * @brief  Analog watchdog 2 callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_LevelOutOfWindow2Callback(ADC_HandleTypeDef *hadc)
{
 80054d8:	b480      	push	{r7}
 80054da:	b083      	sub	sp, #12
 80054dc:	af00      	add	r7, sp, #0
 80054de:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_LevelOutOfWindow2Callback must be implemented in the user file.
  */
}
 80054e0:	bf00      	nop
 80054e2:	370c      	adds	r7, #12
 80054e4:	46bd      	mov	sp, r7
 80054e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054ea:	4770      	bx	lr

080054ec <HAL_ADCEx_LevelOutOfWindow3Callback>:
  * @brief  Analog watchdog 3 callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_LevelOutOfWindow3Callback(ADC_HandleTypeDef *hadc)
{
 80054ec:	b480      	push	{r7}
 80054ee:	b083      	sub	sp, #12
 80054f0:	af00      	add	r7, sp, #0
 80054f2:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_LevelOutOfWindow3Callback must be implemented in the user file.
  */
}
 80054f4:	bf00      	nop
 80054f6:	370c      	adds	r7, #12
 80054f8:	46bd      	mov	sp, r7
 80054fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054fe:	4770      	bx	lr

08005500 <HAL_ADCEx_EndOfSamplingCallback>:
  * @brief  End Of Sampling callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_EndOfSamplingCallback(ADC_HandleTypeDef *hadc)
{
 8005500:	b480      	push	{r7}
 8005502:	b083      	sub	sp, #12
 8005504:	af00      	add	r7, sp, #0
 8005506:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_EndOfSamplingCallback must be implemented in the user file.
  */
}
 8005508:	bf00      	nop
 800550a:	370c      	adds	r7, #12
 800550c:	46bd      	mov	sp, r7
 800550e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005512:	4770      	bx	lr

08005514 <__NVIC_SetPriorityGrouping>:
{
 8005514:	b480      	push	{r7}
 8005516:	b085      	sub	sp, #20
 8005518:	af00      	add	r7, sp, #0
 800551a:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800551c:	687b      	ldr	r3, [r7, #4]
 800551e:	f003 0307 	and.w	r3, r3, #7
 8005522:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8005524:	4b0b      	ldr	r3, [pc, #44]	; (8005554 <__NVIC_SetPriorityGrouping+0x40>)
 8005526:	68db      	ldr	r3, [r3, #12]
 8005528:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800552a:	68ba      	ldr	r2, [r7, #8]
 800552c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8005530:	4013      	ands	r3, r2
 8005532:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8005534:	68fb      	ldr	r3, [r7, #12]
 8005536:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8005538:	68bb      	ldr	r3, [r7, #8]
 800553a:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 800553c:	4b06      	ldr	r3, [pc, #24]	; (8005558 <__NVIC_SetPriorityGrouping+0x44>)
 800553e:	4313      	orrs	r3, r2
 8005540:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8005542:	4a04      	ldr	r2, [pc, #16]	; (8005554 <__NVIC_SetPriorityGrouping+0x40>)
 8005544:	68bb      	ldr	r3, [r7, #8]
 8005546:	60d3      	str	r3, [r2, #12]
}
 8005548:	bf00      	nop
 800554a:	3714      	adds	r7, #20
 800554c:	46bd      	mov	sp, r7
 800554e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005552:	4770      	bx	lr
 8005554:	e000ed00 	.word	0xe000ed00
 8005558:	05fa0000 	.word	0x05fa0000

0800555c <__NVIC_GetPriorityGrouping>:
{
 800555c:	b480      	push	{r7}
 800555e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8005560:	4b04      	ldr	r3, [pc, #16]	; (8005574 <__NVIC_GetPriorityGrouping+0x18>)
 8005562:	68db      	ldr	r3, [r3, #12]
 8005564:	0a1b      	lsrs	r3, r3, #8
 8005566:	f003 0307 	and.w	r3, r3, #7
}
 800556a:	4618      	mov	r0, r3
 800556c:	46bd      	mov	sp, r7
 800556e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005572:	4770      	bx	lr
 8005574:	e000ed00 	.word	0xe000ed00

08005578 <__NVIC_EnableIRQ>:
{
 8005578:	b480      	push	{r7}
 800557a:	b083      	sub	sp, #12
 800557c:	af00      	add	r7, sp, #0
 800557e:	4603      	mov	r3, r0
 8005580:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8005582:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8005586:	2b00      	cmp	r3, #0
 8005588:	db0b      	blt.n	80055a2 <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800558a:	88fb      	ldrh	r3, [r7, #6]
 800558c:	f003 021f 	and.w	r2, r3, #31
 8005590:	4907      	ldr	r1, [pc, #28]	; (80055b0 <__NVIC_EnableIRQ+0x38>)
 8005592:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8005596:	095b      	lsrs	r3, r3, #5
 8005598:	2001      	movs	r0, #1
 800559a:	fa00 f202 	lsl.w	r2, r0, r2
 800559e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 80055a2:	bf00      	nop
 80055a4:	370c      	adds	r7, #12
 80055a6:	46bd      	mov	sp, r7
 80055a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055ac:	4770      	bx	lr
 80055ae:	bf00      	nop
 80055b0:	e000e100 	.word	0xe000e100

080055b4 <__NVIC_SetPriority>:
{
 80055b4:	b480      	push	{r7}
 80055b6:	b083      	sub	sp, #12
 80055b8:	af00      	add	r7, sp, #0
 80055ba:	4603      	mov	r3, r0
 80055bc:	6039      	str	r1, [r7, #0]
 80055be:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 80055c0:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80055c4:	2b00      	cmp	r3, #0
 80055c6:	db0a      	blt.n	80055de <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80055c8:	683b      	ldr	r3, [r7, #0]
 80055ca:	b2da      	uxtb	r2, r3
 80055cc:	490c      	ldr	r1, [pc, #48]	; (8005600 <__NVIC_SetPriority+0x4c>)
 80055ce:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80055d2:	0112      	lsls	r2, r2, #4
 80055d4:	b2d2      	uxtb	r2, r2
 80055d6:	440b      	add	r3, r1
 80055d8:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 80055dc:	e00a      	b.n	80055f4 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80055de:	683b      	ldr	r3, [r7, #0]
 80055e0:	b2da      	uxtb	r2, r3
 80055e2:	4908      	ldr	r1, [pc, #32]	; (8005604 <__NVIC_SetPriority+0x50>)
 80055e4:	88fb      	ldrh	r3, [r7, #6]
 80055e6:	f003 030f 	and.w	r3, r3, #15
 80055ea:	3b04      	subs	r3, #4
 80055ec:	0112      	lsls	r2, r2, #4
 80055ee:	b2d2      	uxtb	r2, r2
 80055f0:	440b      	add	r3, r1
 80055f2:	761a      	strb	r2, [r3, #24]
}
 80055f4:	bf00      	nop
 80055f6:	370c      	adds	r7, #12
 80055f8:	46bd      	mov	sp, r7
 80055fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055fe:	4770      	bx	lr
 8005600:	e000e100 	.word	0xe000e100
 8005604:	e000ed00 	.word	0xe000ed00

08005608 <NVIC_EncodePriority>:
{
 8005608:	b480      	push	{r7}
 800560a:	b089      	sub	sp, #36	; 0x24
 800560c:	af00      	add	r7, sp, #0
 800560e:	60f8      	str	r0, [r7, #12]
 8005610:	60b9      	str	r1, [r7, #8]
 8005612:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8005614:	68fb      	ldr	r3, [r7, #12]
 8005616:	f003 0307 	and.w	r3, r3, #7
 800561a:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800561c:	69fb      	ldr	r3, [r7, #28]
 800561e:	f1c3 0307 	rsb	r3, r3, #7
 8005622:	2b04      	cmp	r3, #4
 8005624:	bf28      	it	cs
 8005626:	2304      	movcs	r3, #4
 8005628:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800562a:	69fb      	ldr	r3, [r7, #28]
 800562c:	3304      	adds	r3, #4
 800562e:	2b06      	cmp	r3, #6
 8005630:	d902      	bls.n	8005638 <NVIC_EncodePriority+0x30>
 8005632:	69fb      	ldr	r3, [r7, #28]
 8005634:	3b03      	subs	r3, #3
 8005636:	e000      	b.n	800563a <NVIC_EncodePriority+0x32>
 8005638:	2300      	movs	r3, #0
 800563a:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800563c:	f04f 32ff 	mov.w	r2, #4294967295
 8005640:	69bb      	ldr	r3, [r7, #24]
 8005642:	fa02 f303 	lsl.w	r3, r2, r3
 8005646:	43da      	mvns	r2, r3
 8005648:	68bb      	ldr	r3, [r7, #8]
 800564a:	401a      	ands	r2, r3
 800564c:	697b      	ldr	r3, [r7, #20]
 800564e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8005650:	f04f 31ff 	mov.w	r1, #4294967295
 8005654:	697b      	ldr	r3, [r7, #20]
 8005656:	fa01 f303 	lsl.w	r3, r1, r3
 800565a:	43d9      	mvns	r1, r3
 800565c:	687b      	ldr	r3, [r7, #4]
 800565e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8005660:	4313      	orrs	r3, r2
}
 8005662:	4618      	mov	r0, r3
 8005664:	3724      	adds	r7, #36	; 0x24
 8005666:	46bd      	mov	sp, r7
 8005668:	f85d 7b04 	ldr.w	r7, [sp], #4
 800566c:	4770      	bx	lr
	...

08005670 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8005670:	b580      	push	{r7, lr}
 8005672:	b082      	sub	sp, #8
 8005674:	af00      	add	r7, sp, #0
 8005676:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8005678:	687b      	ldr	r3, [r7, #4]
 800567a:	3b01      	subs	r3, #1
 800567c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8005680:	d301      	bcc.n	8005686 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8005682:	2301      	movs	r3, #1
 8005684:	e00f      	b.n	80056a6 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8005686:	4a0a      	ldr	r2, [pc, #40]	; (80056b0 <SysTick_Config+0x40>)
 8005688:	687b      	ldr	r3, [r7, #4]
 800568a:	3b01      	subs	r3, #1
 800568c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800568e:	210f      	movs	r1, #15
 8005690:	f04f 30ff 	mov.w	r0, #4294967295
 8005694:	f7ff ff8e 	bl	80055b4 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8005698:	4b05      	ldr	r3, [pc, #20]	; (80056b0 <SysTick_Config+0x40>)
 800569a:	2200      	movs	r2, #0
 800569c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800569e:	4b04      	ldr	r3, [pc, #16]	; (80056b0 <SysTick_Config+0x40>)
 80056a0:	2207      	movs	r2, #7
 80056a2:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80056a4:	2300      	movs	r3, #0
}
 80056a6:	4618      	mov	r0, r3
 80056a8:	3708      	adds	r7, #8
 80056aa:	46bd      	mov	sp, r7
 80056ac:	bd80      	pop	{r7, pc}
 80056ae:	bf00      	nop
 80056b0:	e000e010 	.word	0xe000e010

080056b4 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80056b4:	b580      	push	{r7, lr}
 80056b6:	b082      	sub	sp, #8
 80056b8:	af00      	add	r7, sp, #0
 80056ba:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80056bc:	6878      	ldr	r0, [r7, #4]
 80056be:	f7ff ff29 	bl	8005514 <__NVIC_SetPriorityGrouping>
}
 80056c2:	bf00      	nop
 80056c4:	3708      	adds	r7, #8
 80056c6:	46bd      	mov	sp, r7
 80056c8:	bd80      	pop	{r7, pc}

080056ca <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80056ca:	b580      	push	{r7, lr}
 80056cc:	b086      	sub	sp, #24
 80056ce:	af00      	add	r7, sp, #0
 80056d0:	4603      	mov	r3, r0
 80056d2:	60b9      	str	r1, [r7, #8]
 80056d4:	607a      	str	r2, [r7, #4]
 80056d6:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 80056d8:	f7ff ff40 	bl	800555c <__NVIC_GetPriorityGrouping>
 80056dc:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80056de:	687a      	ldr	r2, [r7, #4]
 80056e0:	68b9      	ldr	r1, [r7, #8]
 80056e2:	6978      	ldr	r0, [r7, #20]
 80056e4:	f7ff ff90 	bl	8005608 <NVIC_EncodePriority>
 80056e8:	4602      	mov	r2, r0
 80056ea:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 80056ee:	4611      	mov	r1, r2
 80056f0:	4618      	mov	r0, r3
 80056f2:	f7ff ff5f 	bl	80055b4 <__NVIC_SetPriority>
}
 80056f6:	bf00      	nop
 80056f8:	3718      	adds	r7, #24
 80056fa:	46bd      	mov	sp, r7
 80056fc:	bd80      	pop	{r7, pc}

080056fe <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32h7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80056fe:	b580      	push	{r7, lr}
 8005700:	b082      	sub	sp, #8
 8005702:	af00      	add	r7, sp, #0
 8005704:	4603      	mov	r3, r0
 8005706:	80fb      	strh	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8005708:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800570c:	4618      	mov	r0, r3
 800570e:	f7ff ff33 	bl	8005578 <__NVIC_EnableIRQ>
}
 8005712:	bf00      	nop
 8005714:	3708      	adds	r7, #8
 8005716:	46bd      	mov	sp, r7
 8005718:	bd80      	pop	{r7, pc}

0800571a <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status   - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800571a:	b580      	push	{r7, lr}
 800571c:	b082      	sub	sp, #8
 800571e:	af00      	add	r7, sp, #0
 8005720:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8005722:	6878      	ldr	r0, [r7, #4]
 8005724:	f7ff ffa4 	bl	8005670 <SysTick_Config>
 8005728:	4603      	mov	r3, r0
}
 800572a:	4618      	mov	r0, r3
 800572c:	3708      	adds	r7, #8
 800572e:	46bd      	mov	sp, r7
 8005730:	bd80      	pop	{r7, pc}
	...

08005734 <HAL_MPU_Disable>:
/**
  * @brief  Disables the MPU
  * @retval None
  */
void HAL_MPU_Disable(void)
{
 8005734:	b480      	push	{r7}
 8005736:	af00      	add	r7, sp, #0
  __ASM volatile ("dmb 0xF":::"memory");
 8005738:	f3bf 8f5f 	dmb	sy
}
 800573c:	bf00      	nop
  /* Make sure outstanding transfers are done */
  __DMB();

  /* Disable fault exceptions */
  SCB->SHCSR &= ~SCB_SHCSR_MEMFAULTENA_Msk;
 800573e:	4b07      	ldr	r3, [pc, #28]	; (800575c <HAL_MPU_Disable+0x28>)
 8005740:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005742:	4a06      	ldr	r2, [pc, #24]	; (800575c <HAL_MPU_Disable+0x28>)
 8005744:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8005748:	6253      	str	r3, [r2, #36]	; 0x24

  /* Disable the MPU and clear the control register*/
  MPU->CTRL = 0;
 800574a:	4b05      	ldr	r3, [pc, #20]	; (8005760 <HAL_MPU_Disable+0x2c>)
 800574c:	2200      	movs	r2, #0
 800574e:	605a      	str	r2, [r3, #4]
}
 8005750:	bf00      	nop
 8005752:	46bd      	mov	sp, r7
 8005754:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005758:	4770      	bx	lr
 800575a:	bf00      	nop
 800575c:	e000ed00 	.word	0xe000ed00
 8005760:	e000ed90 	.word	0xe000ed90

08005764 <HAL_MPU_Enable>:
  *            @arg MPU_PRIVILEGED_DEFAULT
  *            @arg MPU_HFNMI_PRIVDEF
  * @retval None
  */
void HAL_MPU_Enable(uint32_t MPU_Control)
{
 8005764:	b480      	push	{r7}
 8005766:	b083      	sub	sp, #12
 8005768:	af00      	add	r7, sp, #0
 800576a:	6078      	str	r0, [r7, #4]
  /* Enable the MPU */
  MPU->CTRL = MPU_Control | MPU_CTRL_ENABLE_Msk;
 800576c:	4a0b      	ldr	r2, [pc, #44]	; (800579c <HAL_MPU_Enable+0x38>)
 800576e:	687b      	ldr	r3, [r7, #4]
 8005770:	f043 0301 	orr.w	r3, r3, #1
 8005774:	6053      	str	r3, [r2, #4]

  /* Enable fault exceptions */
  SCB->SHCSR |= SCB_SHCSR_MEMFAULTENA_Msk;
 8005776:	4b0a      	ldr	r3, [pc, #40]	; (80057a0 <HAL_MPU_Enable+0x3c>)
 8005778:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800577a:	4a09      	ldr	r2, [pc, #36]	; (80057a0 <HAL_MPU_Enable+0x3c>)
 800577c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005780:	6253      	str	r3, [r2, #36]	; 0x24
  __ASM volatile ("dsb 0xF":::"memory");
 8005782:	f3bf 8f4f 	dsb	sy
}
 8005786:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8005788:	f3bf 8f6f 	isb	sy
}
 800578c:	bf00      	nop

  /* Ensure MPU setting take effects */
  __DSB();
  __ISB();
}
 800578e:	bf00      	nop
 8005790:	370c      	adds	r7, #12
 8005792:	46bd      	mov	sp, r7
 8005794:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005798:	4770      	bx	lr
 800579a:	bf00      	nop
 800579c:	e000ed90 	.word	0xe000ed90
 80057a0:	e000ed00 	.word	0xe000ed00

080057a4 <HAL_MPU_ConfigRegion>:
  * @param  MPU_Init Pointer to a MPU_Region_InitTypeDef structure that contains
  *                  the initialization and configuration information.
  * @retval None
  */
void HAL_MPU_ConfigRegion(MPU_Region_InitTypeDef *MPU_Init)
{
 80057a4:	b480      	push	{r7}
 80057a6:	b083      	sub	sp, #12
 80057a8:	af00      	add	r7, sp, #0
 80057aa:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_MPU_REGION_NUMBER(MPU_Init->Number));
  assert_param(IS_MPU_REGION_ENABLE(MPU_Init->Enable));

  /* Set the Region number */
  MPU->RNR = MPU_Init->Number;
 80057ac:	687b      	ldr	r3, [r7, #4]
 80057ae:	785a      	ldrb	r2, [r3, #1]
 80057b0:	4b1d      	ldr	r3, [pc, #116]	; (8005828 <HAL_MPU_ConfigRegion+0x84>)
 80057b2:	609a      	str	r2, [r3, #8]

  if ((MPU_Init->Enable) != 0UL)
 80057b4:	687b      	ldr	r3, [r7, #4]
 80057b6:	781b      	ldrb	r3, [r3, #0]
 80057b8:	2b00      	cmp	r3, #0
 80057ba:	d029      	beq.n	8005810 <HAL_MPU_ConfigRegion+0x6c>
    assert_param(IS_MPU_ACCESS_CACHEABLE(MPU_Init->IsCacheable));
    assert_param(IS_MPU_ACCESS_BUFFERABLE(MPU_Init->IsBufferable));
    assert_param(IS_MPU_SUB_REGION_DISABLE(MPU_Init->SubRegionDisable));
    assert_param(IS_MPU_REGION_SIZE(MPU_Init->Size));

    MPU->RBAR = MPU_Init->BaseAddress;
 80057bc:	4a1a      	ldr	r2, [pc, #104]	; (8005828 <HAL_MPU_ConfigRegion+0x84>)
 80057be:	687b      	ldr	r3, [r7, #4]
 80057c0:	685b      	ldr	r3, [r3, #4]
 80057c2:	60d3      	str	r3, [r2, #12]
    MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 80057c4:	687b      	ldr	r3, [r7, #4]
 80057c6:	7b1b      	ldrb	r3, [r3, #12]
 80057c8:	071a      	lsls	r2, r3, #28
                ((uint32_t)MPU_Init->AccessPermission        << MPU_RASR_AP_Pos)   |
 80057ca:	687b      	ldr	r3, [r7, #4]
 80057cc:	7adb      	ldrb	r3, [r3, #11]
 80057ce:	061b      	lsls	r3, r3, #24
    MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 80057d0:	431a      	orrs	r2, r3
                ((uint32_t)MPU_Init->TypeExtField            << MPU_RASR_TEX_Pos)  |
 80057d2:	687b      	ldr	r3, [r7, #4]
 80057d4:	7a9b      	ldrb	r3, [r3, #10]
 80057d6:	04db      	lsls	r3, r3, #19
                ((uint32_t)MPU_Init->AccessPermission        << MPU_RASR_AP_Pos)   |
 80057d8:	431a      	orrs	r2, r3
                ((uint32_t)MPU_Init->IsShareable             << MPU_RASR_S_Pos)    |
 80057da:	687b      	ldr	r3, [r7, #4]
 80057dc:	7b5b      	ldrb	r3, [r3, #13]
 80057de:	049b      	lsls	r3, r3, #18
                ((uint32_t)MPU_Init->TypeExtField            << MPU_RASR_TEX_Pos)  |
 80057e0:	431a      	orrs	r2, r3
                ((uint32_t)MPU_Init->IsCacheable             << MPU_RASR_C_Pos)    |
 80057e2:	687b      	ldr	r3, [r7, #4]
 80057e4:	7b9b      	ldrb	r3, [r3, #14]
 80057e6:	045b      	lsls	r3, r3, #17
                ((uint32_t)MPU_Init->IsShareable             << MPU_RASR_S_Pos)    |
 80057e8:	431a      	orrs	r2, r3
                ((uint32_t)MPU_Init->IsBufferable            << MPU_RASR_B_Pos)    |
 80057ea:	687b      	ldr	r3, [r7, #4]
 80057ec:	7bdb      	ldrb	r3, [r3, #15]
 80057ee:	041b      	lsls	r3, r3, #16
                ((uint32_t)MPU_Init->IsCacheable             << MPU_RASR_C_Pos)    |
 80057f0:	431a      	orrs	r2, r3
                ((uint32_t)MPU_Init->SubRegionDisable        << MPU_RASR_SRD_Pos)  |
 80057f2:	687b      	ldr	r3, [r7, #4]
 80057f4:	7a5b      	ldrb	r3, [r3, #9]
 80057f6:	021b      	lsls	r3, r3, #8
                ((uint32_t)MPU_Init->IsBufferable            << MPU_RASR_B_Pos)    |
 80057f8:	431a      	orrs	r2, r3
                ((uint32_t)MPU_Init->Size                    << MPU_RASR_SIZE_Pos) |
 80057fa:	687b      	ldr	r3, [r7, #4]
 80057fc:	7a1b      	ldrb	r3, [r3, #8]
 80057fe:	005b      	lsls	r3, r3, #1
                ((uint32_t)MPU_Init->SubRegionDisable        << MPU_RASR_SRD_Pos)  |
 8005800:	4313      	orrs	r3, r2
                ((uint32_t)MPU_Init->Enable                  << MPU_RASR_ENABLE_Pos);
 8005802:	687a      	ldr	r2, [r7, #4]
 8005804:	7812      	ldrb	r2, [r2, #0]
 8005806:	4611      	mov	r1, r2
    MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 8005808:	4a07      	ldr	r2, [pc, #28]	; (8005828 <HAL_MPU_ConfigRegion+0x84>)
                ((uint32_t)MPU_Init->Size                    << MPU_RASR_SIZE_Pos) |
 800580a:	430b      	orrs	r3, r1
    MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 800580c:	6113      	str	r3, [r2, #16]
  else
  {
    MPU->RBAR = 0x00;
    MPU->RASR = 0x00;
  }
}
 800580e:	e005      	b.n	800581c <HAL_MPU_ConfigRegion+0x78>
    MPU->RBAR = 0x00;
 8005810:	4b05      	ldr	r3, [pc, #20]	; (8005828 <HAL_MPU_ConfigRegion+0x84>)
 8005812:	2200      	movs	r2, #0
 8005814:	60da      	str	r2, [r3, #12]
    MPU->RASR = 0x00;
 8005816:	4b04      	ldr	r3, [pc, #16]	; (8005828 <HAL_MPU_ConfigRegion+0x84>)
 8005818:	2200      	movs	r2, #0
 800581a:	611a      	str	r2, [r3, #16]
}
 800581c:	bf00      	nop
 800581e:	370c      	adds	r7, #12
 8005820:	46bd      	mov	sp, r7
 8005822:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005826:	4770      	bx	lr
 8005828:	e000ed90 	.word	0xe000ed90

0800582c <HAL_DAC_Init>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Init(DAC_HandleTypeDef *hdac)
{
 800582c:	b580      	push	{r7, lr}
 800582e:	b082      	sub	sp, #8
 8005830:	af00      	add	r7, sp, #0
 8005832:	6078      	str	r0, [r7, #4]
  /* Check DAC handle */
  if (hdac == NULL)
 8005834:	687b      	ldr	r3, [r7, #4]
 8005836:	2b00      	cmp	r3, #0
 8005838:	d101      	bne.n	800583e <HAL_DAC_Init+0x12>
  {
    return HAL_ERROR;
 800583a:	2301      	movs	r3, #1
 800583c:	e014      	b.n	8005868 <HAL_DAC_Init+0x3c>
  }
  /* Check the parameters */
  assert_param(IS_DAC_ALL_INSTANCE(hdac->Instance));

  if (hdac->State == HAL_DAC_STATE_RESET)
 800583e:	687b      	ldr	r3, [r7, #4]
 8005840:	791b      	ldrb	r3, [r3, #4]
 8005842:	b2db      	uxtb	r3, r3
 8005844:	2b00      	cmp	r3, #0
 8005846:	d105      	bne.n	8005854 <HAL_DAC_Init+0x28>
      hdac->MspInitCallback             = HAL_DAC_MspInit;
    }
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

    /* Allocate lock resource and initialize it */
    hdac->Lock = HAL_UNLOCKED;
 8005848:	687b      	ldr	r3, [r7, #4]
 800584a:	2200      	movs	r2, #0
 800584c:	715a      	strb	r2, [r3, #5]
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
    /* Init the low level hardware */
    hdac->MspInitCallback(hdac);
#else
    /* Init the low level hardware */
    HAL_DAC_MspInit(hdac);
 800584e:	6878      	ldr	r0, [r7, #4]
 8005850:	f7fd fa1e 	bl	8002c90 <HAL_DAC_MspInit>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
  }

  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_BUSY;
 8005854:	687b      	ldr	r3, [r7, #4]
 8005856:	2202      	movs	r2, #2
 8005858:	711a      	strb	r2, [r3, #4]

  /* Set DAC error code to none */
  hdac->ErrorCode = HAL_DAC_ERROR_NONE;
 800585a:	687b      	ldr	r3, [r7, #4]
 800585c:	2200      	movs	r2, #0
 800585e:	611a      	str	r2, [r3, #16]

  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_READY;
 8005860:	687b      	ldr	r3, [r7, #4]
 8005862:	2201      	movs	r2, #1
 8005864:	711a      	strb	r2, [r3, #4]

  /* Return function status */
  return HAL_OK;
 8005866:	2300      	movs	r3, #0
}
 8005868:	4618      	mov	r0, r3
 800586a:	3708      	adds	r7, #8
 800586c:	46bd      	mov	sp, r7
 800586e:	bd80      	pop	{r7, pc}

08005870 <HAL_DAC_Start>:
  *            @arg DAC_CHANNEL_1: DAC Channel1 selected
  *            @arg DAC_CHANNEL_2: DAC Channel2 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Start(DAC_HandleTypeDef *hdac, uint32_t Channel)
{
 8005870:	b480      	push	{r7}
 8005872:	b083      	sub	sp, #12
 8005874:	af00      	add	r7, sp, #0
 8005876:	6078      	str	r0, [r7, #4]
 8005878:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_DAC_CHANNEL(Channel));

  /* Process locked */
  __HAL_LOCK(hdac);
 800587a:	687b      	ldr	r3, [r7, #4]
 800587c:	795b      	ldrb	r3, [r3, #5]
 800587e:	2b01      	cmp	r3, #1
 8005880:	d101      	bne.n	8005886 <HAL_DAC_Start+0x16>
 8005882:	2302      	movs	r3, #2
 8005884:	e040      	b.n	8005908 <HAL_DAC_Start+0x98>
 8005886:	687b      	ldr	r3, [r7, #4]
 8005888:	2201      	movs	r2, #1
 800588a:	715a      	strb	r2, [r3, #5]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
 800588c:	687b      	ldr	r3, [r7, #4]
 800588e:	2202      	movs	r2, #2
 8005890:	711a      	strb	r2, [r3, #4]

  /* Enable the Peripheral */
  __HAL_DAC_ENABLE(hdac, Channel);
 8005892:	687b      	ldr	r3, [r7, #4]
 8005894:	681b      	ldr	r3, [r3, #0]
 8005896:	6819      	ldr	r1, [r3, #0]
 8005898:	683b      	ldr	r3, [r7, #0]
 800589a:	f003 0310 	and.w	r3, r3, #16
 800589e:	2201      	movs	r2, #1
 80058a0:	409a      	lsls	r2, r3
 80058a2:	687b      	ldr	r3, [r7, #4]
 80058a4:	681b      	ldr	r3, [r3, #0]
 80058a6:	430a      	orrs	r2, r1
 80058a8:	601a      	str	r2, [r3, #0]

  if (Channel == DAC_CHANNEL_1)
 80058aa:	683b      	ldr	r3, [r7, #0]
 80058ac:	2b00      	cmp	r3, #0
 80058ae:	d10f      	bne.n	80058d0 <HAL_DAC_Start+0x60>
  {
    /* Check if software trigger enabled */
    if ((hdac->Instance->CR & (DAC_CR_TEN1 | DAC_CR_TSEL1)) == DAC_TRIGGER_SOFTWARE)
 80058b0:	687b      	ldr	r3, [r7, #4]
 80058b2:	681b      	ldr	r3, [r3, #0]
 80058b4:	681b      	ldr	r3, [r3, #0]
 80058b6:	f003 033e 	and.w	r3, r3, #62	; 0x3e
 80058ba:	2b02      	cmp	r3, #2
 80058bc:	d11d      	bne.n	80058fa <HAL_DAC_Start+0x8a>
    {
      /* Enable the selected DAC software conversion */
      SET_BIT(hdac->Instance->SWTRIGR, DAC_SWTRIGR_SWTRIG1);
 80058be:	687b      	ldr	r3, [r7, #4]
 80058c0:	681b      	ldr	r3, [r3, #0]
 80058c2:	685a      	ldr	r2, [r3, #4]
 80058c4:	687b      	ldr	r3, [r7, #4]
 80058c6:	681b      	ldr	r3, [r3, #0]
 80058c8:	f042 0201 	orr.w	r2, r2, #1
 80058cc:	605a      	str	r2, [r3, #4]
 80058ce:	e014      	b.n	80058fa <HAL_DAC_Start+0x8a>
  }

  else
  {
    /* Check if software trigger enabled */
    if ((hdac->Instance->CR & (DAC_CR_TEN2 | DAC_CR_TSEL2)) == (DAC_TRIGGER_SOFTWARE << (Channel & 0x10UL)))
 80058d0:	687b      	ldr	r3, [r7, #4]
 80058d2:	681b      	ldr	r3, [r3, #0]
 80058d4:	681b      	ldr	r3, [r3, #0]
 80058d6:	f403 1278 	and.w	r2, r3, #4063232	; 0x3e0000
 80058da:	683b      	ldr	r3, [r7, #0]
 80058dc:	f003 0310 	and.w	r3, r3, #16
 80058e0:	2102      	movs	r1, #2
 80058e2:	fa01 f303 	lsl.w	r3, r1, r3
 80058e6:	429a      	cmp	r2, r3
 80058e8:	d107      	bne.n	80058fa <HAL_DAC_Start+0x8a>
    {
      /* Enable the selected DAC software conversion*/
      SET_BIT(hdac->Instance->SWTRIGR, DAC_SWTRIGR_SWTRIG2);
 80058ea:	687b      	ldr	r3, [r7, #4]
 80058ec:	681b      	ldr	r3, [r3, #0]
 80058ee:	685a      	ldr	r2, [r3, #4]
 80058f0:	687b      	ldr	r3, [r7, #4]
 80058f2:	681b      	ldr	r3, [r3, #0]
 80058f4:	f042 0202 	orr.w	r2, r2, #2
 80058f8:	605a      	str	r2, [r3, #4]
    }
  }


  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_READY;
 80058fa:	687b      	ldr	r3, [r7, #4]
 80058fc:	2201      	movs	r2, #1
 80058fe:	711a      	strb	r2, [r3, #4]

  /* Process unlocked */
  __HAL_UNLOCK(hdac);
 8005900:	687b      	ldr	r3, [r7, #4]
 8005902:	2200      	movs	r2, #0
 8005904:	715a      	strb	r2, [r3, #5]

  /* Return function status */
  return HAL_OK;
 8005906:	2300      	movs	r3, #0
}
 8005908:	4618      	mov	r0, r3
 800590a:	370c      	adds	r7, #12
 800590c:	46bd      	mov	sp, r7
 800590e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005912:	4770      	bx	lr

08005914 <HAL_DAC_SetValue>:
  *            @arg DAC_ALIGN_12B_R: 12bit right data alignment selected
  * @param  Data Data to be loaded in the selected data holding register.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_SetValue(DAC_HandleTypeDef *hdac, uint32_t Channel, uint32_t Alignment, uint32_t Data)
{
 8005914:	b480      	push	{r7}
 8005916:	b087      	sub	sp, #28
 8005918:	af00      	add	r7, sp, #0
 800591a:	60f8      	str	r0, [r7, #12]
 800591c:	60b9      	str	r1, [r7, #8]
 800591e:	607a      	str	r2, [r7, #4]
 8005920:	603b      	str	r3, [r7, #0]
  __IO uint32_t tmp = 0UL;
 8005922:	2300      	movs	r3, #0
 8005924:	617b      	str	r3, [r7, #20]
  /* Check the parameters */
  assert_param(IS_DAC_CHANNEL(Channel));
  assert_param(IS_DAC_ALIGN(Alignment));
  assert_param(IS_DAC_DATA(Data));

  tmp = (uint32_t)hdac->Instance;
 8005926:	68fb      	ldr	r3, [r7, #12]
 8005928:	681b      	ldr	r3, [r3, #0]
 800592a:	617b      	str	r3, [r7, #20]
  if (Channel == DAC_CHANNEL_1)
 800592c:	68bb      	ldr	r3, [r7, #8]
 800592e:	2b00      	cmp	r3, #0
 8005930:	d105      	bne.n	800593e <HAL_DAC_SetValue+0x2a>
  {
    tmp += DAC_DHR12R1_ALIGNMENT(Alignment);
 8005932:	697a      	ldr	r2, [r7, #20]
 8005934:	687b      	ldr	r3, [r7, #4]
 8005936:	4413      	add	r3, r2
 8005938:	3308      	adds	r3, #8
 800593a:	617b      	str	r3, [r7, #20]
 800593c:	e004      	b.n	8005948 <HAL_DAC_SetValue+0x34>
  }

  else
  {
    tmp += DAC_DHR12R2_ALIGNMENT(Alignment);
 800593e:	697a      	ldr	r2, [r7, #20]
 8005940:	687b      	ldr	r3, [r7, #4]
 8005942:	4413      	add	r3, r2
 8005944:	3314      	adds	r3, #20
 8005946:	617b      	str	r3, [r7, #20]
  }


  /* Set the DAC channel selected data holding register */
  *(__IO uint32_t *) tmp = Data;
 8005948:	697b      	ldr	r3, [r7, #20]
 800594a:	461a      	mov	r2, r3
 800594c:	683b      	ldr	r3, [r7, #0]
 800594e:	6013      	str	r3, [r2, #0]

  /* Return function status */
  return HAL_OK;
 8005950:	2300      	movs	r3, #0
}
 8005952:	4618      	mov	r0, r3
 8005954:	371c      	adds	r7, #28
 8005956:	46bd      	mov	sp, r7
 8005958:	f85d 7b04 	ldr.w	r7, [sp], #4
 800595c:	4770      	bx	lr
	...

08005960 <HAL_DAC_ConfigChannel>:
  *            @arg DAC_CHANNEL_1: DAC Channel1 selected
  *            @arg DAC_CHANNEL_2: DAC Channel2 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_ConfigChannel(DAC_HandleTypeDef *hdac, DAC_ChannelConfTypeDef *sConfig, uint32_t Channel)
{
 8005960:	b580      	push	{r7, lr}
 8005962:	b088      	sub	sp, #32
 8005964:	af00      	add	r7, sp, #0
 8005966:	60f8      	str	r0, [r7, #12]
 8005968:	60b9      	str	r1, [r7, #8]
 800596a:	607a      	str	r2, [r7, #4]
    assert_param(IS_DAC_REFRESHTIME(sConfig->DAC_SampleAndHoldConfig.DAC_RefreshTime));
  }
  assert_param(IS_DAC_CHANNEL(Channel));

  /* Process locked */
  __HAL_LOCK(hdac);
 800596c:	68fb      	ldr	r3, [r7, #12]
 800596e:	795b      	ldrb	r3, [r3, #5]
 8005970:	2b01      	cmp	r3, #1
 8005972:	d101      	bne.n	8005978 <HAL_DAC_ConfigChannel+0x18>
 8005974:	2302      	movs	r3, #2
 8005976:	e12a      	b.n	8005bce <HAL_DAC_ConfigChannel+0x26e>
 8005978:	68fb      	ldr	r3, [r7, #12]
 800597a:	2201      	movs	r2, #1
 800597c:	715a      	strb	r2, [r3, #5]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
 800597e:	68fb      	ldr	r3, [r7, #12]
 8005980:	2202      	movs	r2, #2
 8005982:	711a      	strb	r2, [r3, #4]

  /* Sample and hold configuration */
  if (sConfig->DAC_SampleAndHold == DAC_SAMPLEANDHOLD_ENABLE)
 8005984:	68bb      	ldr	r3, [r7, #8]
 8005986:	681b      	ldr	r3, [r3, #0]
 8005988:	2b04      	cmp	r3, #4
 800598a:	f040 8081 	bne.w	8005a90 <HAL_DAC_ConfigChannel+0x130>
  {
    /* Get timeout */
    tickstart = HAL_GetTick();
 800598e:	f7fd fff5 	bl	800397c <HAL_GetTick>
 8005992:	61b8      	str	r0, [r7, #24]

    if (Channel == DAC_CHANNEL_1)
 8005994:	687b      	ldr	r3, [r7, #4]
 8005996:	2b00      	cmp	r3, #0
 8005998:	d140      	bne.n	8005a1c <HAL_DAC_ConfigChannel+0xbc>
    {
      /* SHSR1 can be written when BWST1 is cleared */
      while (((hdac->Instance->SR) & DAC_SR_BWST1) != 0UL)
 800599a:	e018      	b.n	80059ce <HAL_DAC_ConfigChannel+0x6e>
      {
        /* Check for the Timeout */
        if ((HAL_GetTick() - tickstart) > TIMEOUT_DAC_CALIBCONFIG)
 800599c:	f7fd ffee 	bl	800397c <HAL_GetTick>
 80059a0:	4602      	mov	r2, r0
 80059a2:	69bb      	ldr	r3, [r7, #24]
 80059a4:	1ad3      	subs	r3, r2, r3
 80059a6:	2b01      	cmp	r3, #1
 80059a8:	d911      	bls.n	80059ce <HAL_DAC_ConfigChannel+0x6e>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if(((hdac->Instance->SR) & DAC_SR_BWST1) != 0UL)
 80059aa:	68fb      	ldr	r3, [r7, #12]
 80059ac:	681b      	ldr	r3, [r3, #0]
 80059ae:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80059b0:	4b89      	ldr	r3, [pc, #548]	; (8005bd8 <HAL_DAC_ConfigChannel+0x278>)
 80059b2:	4013      	ands	r3, r2
 80059b4:	2b00      	cmp	r3, #0
 80059b6:	d00a      	beq.n	80059ce <HAL_DAC_ConfigChannel+0x6e>
          {
            /* Update error code */
            SET_BIT(hdac->ErrorCode, HAL_DAC_ERROR_TIMEOUT);
 80059b8:	68fb      	ldr	r3, [r7, #12]
 80059ba:	691b      	ldr	r3, [r3, #16]
 80059bc:	f043 0208 	orr.w	r2, r3, #8
 80059c0:	68fb      	ldr	r3, [r7, #12]
 80059c2:	611a      	str	r2, [r3, #16]

            /* Change the DMA state */
            hdac->State = HAL_DAC_STATE_TIMEOUT;
 80059c4:	68fb      	ldr	r3, [r7, #12]
 80059c6:	2203      	movs	r2, #3
 80059c8:	711a      	strb	r2, [r3, #4]

            return HAL_TIMEOUT;
 80059ca:	2303      	movs	r3, #3
 80059cc:	e0ff      	b.n	8005bce <HAL_DAC_ConfigChannel+0x26e>
      while (((hdac->Instance->SR) & DAC_SR_BWST1) != 0UL)
 80059ce:	68fb      	ldr	r3, [r7, #12]
 80059d0:	681b      	ldr	r3, [r3, #0]
 80059d2:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80059d4:	4b80      	ldr	r3, [pc, #512]	; (8005bd8 <HAL_DAC_ConfigChannel+0x278>)
 80059d6:	4013      	ands	r3, r2
 80059d8:	2b00      	cmp	r3, #0
 80059da:	d1df      	bne.n	800599c <HAL_DAC_ConfigChannel+0x3c>
          }
        }
      }
      HAL_Delay(1);
 80059dc:	2001      	movs	r0, #1
 80059de:	f7fd ffd9 	bl	8003994 <HAL_Delay>
      hdac->Instance->SHSR1 = sConfig->DAC_SampleAndHoldConfig.DAC_SampleTime;
 80059e2:	68fb      	ldr	r3, [r7, #12]
 80059e4:	681b      	ldr	r3, [r3, #0]
 80059e6:	68ba      	ldr	r2, [r7, #8]
 80059e8:	6992      	ldr	r2, [r2, #24]
 80059ea:	641a      	str	r2, [r3, #64]	; 0x40
 80059ec:	e023      	b.n	8005a36 <HAL_DAC_ConfigChannel+0xd6>
    {
      /* SHSR2 can be written when BWST2 is cleared */
      while (((hdac->Instance->SR) & DAC_SR_BWST2) != 0UL)
      {
        /* Check for the Timeout */
        if ((HAL_GetTick() - tickstart) > TIMEOUT_DAC_CALIBCONFIG)
 80059ee:	f7fd ffc5 	bl	800397c <HAL_GetTick>
 80059f2:	4602      	mov	r2, r0
 80059f4:	69bb      	ldr	r3, [r7, #24]
 80059f6:	1ad3      	subs	r3, r2, r3
 80059f8:	2b01      	cmp	r3, #1
 80059fa:	d90f      	bls.n	8005a1c <HAL_DAC_ConfigChannel+0xbc>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if(((hdac->Instance->SR) & DAC_SR_BWST2) != 0UL)
 80059fc:	68fb      	ldr	r3, [r7, #12]
 80059fe:	681b      	ldr	r3, [r3, #0]
 8005a00:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005a02:	2b00      	cmp	r3, #0
 8005a04:	da0a      	bge.n	8005a1c <HAL_DAC_ConfigChannel+0xbc>
          {
            /* Update error code */
            SET_BIT(hdac->ErrorCode, HAL_DAC_ERROR_TIMEOUT);
 8005a06:	68fb      	ldr	r3, [r7, #12]
 8005a08:	691b      	ldr	r3, [r3, #16]
 8005a0a:	f043 0208 	orr.w	r2, r3, #8
 8005a0e:	68fb      	ldr	r3, [r7, #12]
 8005a10:	611a      	str	r2, [r3, #16]

            /* Change the DMA state */
            hdac->State = HAL_DAC_STATE_TIMEOUT;
 8005a12:	68fb      	ldr	r3, [r7, #12]
 8005a14:	2203      	movs	r2, #3
 8005a16:	711a      	strb	r2, [r3, #4]

            return HAL_TIMEOUT;
 8005a18:	2303      	movs	r3, #3
 8005a1a:	e0d8      	b.n	8005bce <HAL_DAC_ConfigChannel+0x26e>
      while (((hdac->Instance->SR) & DAC_SR_BWST2) != 0UL)
 8005a1c:	68fb      	ldr	r3, [r7, #12]
 8005a1e:	681b      	ldr	r3, [r3, #0]
 8005a20:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005a22:	2b00      	cmp	r3, #0
 8005a24:	dbe3      	blt.n	80059ee <HAL_DAC_ConfigChannel+0x8e>
          }
        }
      }
      HAL_Delay(1U);
 8005a26:	2001      	movs	r0, #1
 8005a28:	f7fd ffb4 	bl	8003994 <HAL_Delay>
      hdac->Instance->SHSR2 = sConfig->DAC_SampleAndHoldConfig.DAC_SampleTime;
 8005a2c:	68fb      	ldr	r3, [r7, #12]
 8005a2e:	681b      	ldr	r3, [r3, #0]
 8005a30:	68ba      	ldr	r2, [r7, #8]
 8005a32:	6992      	ldr	r2, [r2, #24]
 8005a34:	645a      	str	r2, [r3, #68]	; 0x44
    }


    /* HoldTime */
    MODIFY_REG(hdac->Instance->SHHR, DAC_SHHR_THOLD1 << (Channel & 0x10UL),
 8005a36:	68fb      	ldr	r3, [r7, #12]
 8005a38:	681b      	ldr	r3, [r3, #0]
 8005a3a:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8005a3c:	687b      	ldr	r3, [r7, #4]
 8005a3e:	f003 0310 	and.w	r3, r3, #16
 8005a42:	f240 31ff 	movw	r1, #1023	; 0x3ff
 8005a46:	fa01 f303 	lsl.w	r3, r1, r3
 8005a4a:	43db      	mvns	r3, r3
 8005a4c:	ea02 0103 	and.w	r1, r2, r3
 8005a50:	68bb      	ldr	r3, [r7, #8]
 8005a52:	69da      	ldr	r2, [r3, #28]
 8005a54:	687b      	ldr	r3, [r7, #4]
 8005a56:	f003 0310 	and.w	r3, r3, #16
 8005a5a:	409a      	lsls	r2, r3
 8005a5c:	68fb      	ldr	r3, [r7, #12]
 8005a5e:	681b      	ldr	r3, [r3, #0]
 8005a60:	430a      	orrs	r2, r1
 8005a62:	649a      	str	r2, [r3, #72]	; 0x48
               (sConfig->DAC_SampleAndHoldConfig.DAC_HoldTime) << (Channel & 0x10UL));
    /* RefreshTime */
    MODIFY_REG(hdac->Instance->SHRR, DAC_SHRR_TREFRESH1 << (Channel & 0x10UL),
 8005a64:	68fb      	ldr	r3, [r7, #12]
 8005a66:	681b      	ldr	r3, [r3, #0]
 8005a68:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8005a6a:	687b      	ldr	r3, [r7, #4]
 8005a6c:	f003 0310 	and.w	r3, r3, #16
 8005a70:	21ff      	movs	r1, #255	; 0xff
 8005a72:	fa01 f303 	lsl.w	r3, r1, r3
 8005a76:	43db      	mvns	r3, r3
 8005a78:	ea02 0103 	and.w	r1, r2, r3
 8005a7c:	68bb      	ldr	r3, [r7, #8]
 8005a7e:	6a1a      	ldr	r2, [r3, #32]
 8005a80:	687b      	ldr	r3, [r7, #4]
 8005a82:	f003 0310 	and.w	r3, r3, #16
 8005a86:	409a      	lsls	r2, r3
 8005a88:	68fb      	ldr	r3, [r7, #12]
 8005a8a:	681b      	ldr	r3, [r3, #0]
 8005a8c:	430a      	orrs	r2, r1
 8005a8e:	64da      	str	r2, [r3, #76]	; 0x4c
               (sConfig->DAC_SampleAndHoldConfig.DAC_RefreshTime) << (Channel & 0x10UL));
  }

  if (sConfig->DAC_UserTrimming == DAC_TRIMMING_USER)
 8005a90:	68bb      	ldr	r3, [r7, #8]
 8005a92:	691b      	ldr	r3, [r3, #16]
 8005a94:	2b01      	cmp	r3, #1
 8005a96:	d11d      	bne.n	8005ad4 <HAL_DAC_ConfigChannel+0x174>
    /* USER TRIMMING */
  {
    /* Get the DAC CCR value */
    tmpreg1 = hdac->Instance->CCR;
 8005a98:	68fb      	ldr	r3, [r7, #12]
 8005a9a:	681b      	ldr	r3, [r3, #0]
 8005a9c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005a9e:	617b      	str	r3, [r7, #20]
    /* Clear trimming value */
    tmpreg1 &= ~(((uint32_t)(DAC_CCR_OTRIM1)) << (Channel & 0x10UL));
 8005aa0:	687b      	ldr	r3, [r7, #4]
 8005aa2:	f003 0310 	and.w	r3, r3, #16
 8005aa6:	221f      	movs	r2, #31
 8005aa8:	fa02 f303 	lsl.w	r3, r2, r3
 8005aac:	43db      	mvns	r3, r3
 8005aae:	697a      	ldr	r2, [r7, #20]
 8005ab0:	4013      	ands	r3, r2
 8005ab2:	617b      	str	r3, [r7, #20]
    /* Configure for the selected trimming offset */
    tmpreg2 = sConfig->DAC_TrimmingValue;
 8005ab4:	68bb      	ldr	r3, [r7, #8]
 8005ab6:	695b      	ldr	r3, [r3, #20]
 8005ab8:	613b      	str	r3, [r7, #16]
    /* Calculate CCR register value depending on DAC_Channel */
    tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 8005aba:	687b      	ldr	r3, [r7, #4]
 8005abc:	f003 0310 	and.w	r3, r3, #16
 8005ac0:	693a      	ldr	r2, [r7, #16]
 8005ac2:	fa02 f303 	lsl.w	r3, r2, r3
 8005ac6:	697a      	ldr	r2, [r7, #20]
 8005ac8:	4313      	orrs	r3, r2
 8005aca:	617b      	str	r3, [r7, #20]
    /* Write to DAC CCR */
    hdac->Instance->CCR = tmpreg1;
 8005acc:	68fb      	ldr	r3, [r7, #12]
 8005ace:	681b      	ldr	r3, [r3, #0]
 8005ad0:	697a      	ldr	r2, [r7, #20]
 8005ad2:	639a      	str	r2, [r3, #56]	; 0x38
  }
  /* else factory trimming is used (factory setting are available at reset)*/
  /* SW Nothing has nothing to do */

  /* Get the DAC MCR value */
  tmpreg1 = hdac->Instance->MCR;
 8005ad4:	68fb      	ldr	r3, [r7, #12]
 8005ad6:	681b      	ldr	r3, [r3, #0]
 8005ad8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005ada:	617b      	str	r3, [r7, #20]
  /* Clear DAC_MCR_MODEx bits */
  tmpreg1 &= ~(((uint32_t)(DAC_MCR_MODE1)) << (Channel & 0x10UL));
 8005adc:	687b      	ldr	r3, [r7, #4]
 8005ade:	f003 0310 	and.w	r3, r3, #16
 8005ae2:	2207      	movs	r2, #7
 8005ae4:	fa02 f303 	lsl.w	r3, r2, r3
 8005ae8:	43db      	mvns	r3, r3
 8005aea:	697a      	ldr	r2, [r7, #20]
 8005aec:	4013      	ands	r3, r2
 8005aee:	617b      	str	r3, [r7, #20]
  /* Configure for the selected DAC channel: mode, buffer output & on chip peripheral connect */
  if (sConfig->DAC_ConnectOnChipPeripheral == DAC_CHIPCONNECT_EXTERNAL)
 8005af0:	68bb      	ldr	r3, [r7, #8]
 8005af2:	68db      	ldr	r3, [r3, #12]
 8005af4:	2b01      	cmp	r3, #1
 8005af6:	d102      	bne.n	8005afe <HAL_DAC_ConfigChannel+0x19e>
  {
    connectOnChip = 0x00000000UL;
 8005af8:	2300      	movs	r3, #0
 8005afa:	61fb      	str	r3, [r7, #28]
 8005afc:	e00f      	b.n	8005b1e <HAL_DAC_ConfigChannel+0x1be>
  }
  else if (sConfig->DAC_ConnectOnChipPeripheral == DAC_CHIPCONNECT_INTERNAL)
 8005afe:	68bb      	ldr	r3, [r7, #8]
 8005b00:	68db      	ldr	r3, [r3, #12]
 8005b02:	2b02      	cmp	r3, #2
 8005b04:	d102      	bne.n	8005b0c <HAL_DAC_ConfigChannel+0x1ac>
  {
    connectOnChip = DAC_MCR_MODE1_0;
 8005b06:	2301      	movs	r3, #1
 8005b08:	61fb      	str	r3, [r7, #28]
 8005b0a:	e008      	b.n	8005b1e <HAL_DAC_ConfigChannel+0x1be>
  }
  else /* (sConfig->DAC_ConnectOnChipPeripheral == DAC_CHIPCONNECT_BOTH) */
  {
    if (sConfig->DAC_OutputBuffer == DAC_OUTPUTBUFFER_ENABLE)
 8005b0c:	68bb      	ldr	r3, [r7, #8]
 8005b0e:	689b      	ldr	r3, [r3, #8]
 8005b10:	2b00      	cmp	r3, #0
 8005b12:	d102      	bne.n	8005b1a <HAL_DAC_ConfigChannel+0x1ba>
    {
      connectOnChip = DAC_MCR_MODE1_0;
 8005b14:	2301      	movs	r3, #1
 8005b16:	61fb      	str	r3, [r7, #28]
 8005b18:	e001      	b.n	8005b1e <HAL_DAC_ConfigChannel+0x1be>
    }
    else
    {
      connectOnChip = 0x00000000UL;
 8005b1a:	2300      	movs	r3, #0
 8005b1c:	61fb      	str	r3, [r7, #28]
    }
  }
  tmpreg2 = (sConfig->DAC_SampleAndHold | sConfig->DAC_OutputBuffer | connectOnChip);
 8005b1e:	68bb      	ldr	r3, [r7, #8]
 8005b20:	681a      	ldr	r2, [r3, #0]
 8005b22:	68bb      	ldr	r3, [r7, #8]
 8005b24:	689b      	ldr	r3, [r3, #8]
 8005b26:	4313      	orrs	r3, r2
 8005b28:	69fa      	ldr	r2, [r7, #28]
 8005b2a:	4313      	orrs	r3, r2
 8005b2c:	613b      	str	r3, [r7, #16]
  /* Calculate MCR register value depending on DAC_Channel */
  tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 8005b2e:	687b      	ldr	r3, [r7, #4]
 8005b30:	f003 0310 	and.w	r3, r3, #16
 8005b34:	693a      	ldr	r2, [r7, #16]
 8005b36:	fa02 f303 	lsl.w	r3, r2, r3
 8005b3a:	697a      	ldr	r2, [r7, #20]
 8005b3c:	4313      	orrs	r3, r2
 8005b3e:	617b      	str	r3, [r7, #20]
  /* Write to DAC MCR */
  hdac->Instance->MCR = tmpreg1;
 8005b40:	68fb      	ldr	r3, [r7, #12]
 8005b42:	681b      	ldr	r3, [r3, #0]
 8005b44:	697a      	ldr	r2, [r7, #20]
 8005b46:	63da      	str	r2, [r3, #60]	; 0x3c

  /* DAC in normal operating mode hence clear DAC_CR_CENx bit */
  CLEAR_BIT(hdac->Instance->CR, DAC_CR_CEN1 << (Channel & 0x10UL));
 8005b48:	68fb      	ldr	r3, [r7, #12]
 8005b4a:	681b      	ldr	r3, [r3, #0]
 8005b4c:	6819      	ldr	r1, [r3, #0]
 8005b4e:	687b      	ldr	r3, [r7, #4]
 8005b50:	f003 0310 	and.w	r3, r3, #16
 8005b54:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8005b58:	fa02 f303 	lsl.w	r3, r2, r3
 8005b5c:	43da      	mvns	r2, r3
 8005b5e:	68fb      	ldr	r3, [r7, #12]
 8005b60:	681b      	ldr	r3, [r3, #0]
 8005b62:	400a      	ands	r2, r1
 8005b64:	601a      	str	r2, [r3, #0]

  /* Get the DAC CR value */
  tmpreg1 = hdac->Instance->CR;
 8005b66:	68fb      	ldr	r3, [r7, #12]
 8005b68:	681b      	ldr	r3, [r3, #0]
 8005b6a:	681b      	ldr	r3, [r3, #0]
 8005b6c:	617b      	str	r3, [r7, #20]
  /* Clear TENx, TSELx, WAVEx and MAMPx bits */
  tmpreg1 &= ~(((uint32_t)(DAC_CR_MAMP1 | DAC_CR_WAVE1 | DAC_CR_TSEL1 | DAC_CR_TEN1)) << (Channel & 0x10UL));
 8005b6e:	687b      	ldr	r3, [r7, #4]
 8005b70:	f003 0310 	and.w	r3, r3, #16
 8005b74:	f640 72fe 	movw	r2, #4094	; 0xffe
 8005b78:	fa02 f303 	lsl.w	r3, r2, r3
 8005b7c:	43db      	mvns	r3, r3
 8005b7e:	697a      	ldr	r2, [r7, #20]
 8005b80:	4013      	ands	r3, r2
 8005b82:	617b      	str	r3, [r7, #20]
  /* Configure for the selected DAC channel: trigger */
  /* Set TSELx and TENx bits according to DAC_Trigger value */
  tmpreg2 = sConfig->DAC_Trigger;
 8005b84:	68bb      	ldr	r3, [r7, #8]
 8005b86:	685b      	ldr	r3, [r3, #4]
 8005b88:	613b      	str	r3, [r7, #16]
  /* Calculate CR register value depending on DAC_Channel */
  tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 8005b8a:	687b      	ldr	r3, [r7, #4]
 8005b8c:	f003 0310 	and.w	r3, r3, #16
 8005b90:	693a      	ldr	r2, [r7, #16]
 8005b92:	fa02 f303 	lsl.w	r3, r2, r3
 8005b96:	697a      	ldr	r2, [r7, #20]
 8005b98:	4313      	orrs	r3, r2
 8005b9a:	617b      	str	r3, [r7, #20]
  /* Write to DAC CR */
  hdac->Instance->CR = tmpreg1;
 8005b9c:	68fb      	ldr	r3, [r7, #12]
 8005b9e:	681b      	ldr	r3, [r3, #0]
 8005ba0:	697a      	ldr	r2, [r7, #20]
 8005ba2:	601a      	str	r2, [r3, #0]
  /* Disable wave generation */
  CLEAR_BIT(hdac->Instance->CR, (DAC_CR_WAVE1 << (Channel & 0x10UL)));
 8005ba4:	68fb      	ldr	r3, [r7, #12]
 8005ba6:	681b      	ldr	r3, [r3, #0]
 8005ba8:	6819      	ldr	r1, [r3, #0]
 8005baa:	687b      	ldr	r3, [r7, #4]
 8005bac:	f003 0310 	and.w	r3, r3, #16
 8005bb0:	22c0      	movs	r2, #192	; 0xc0
 8005bb2:	fa02 f303 	lsl.w	r3, r2, r3
 8005bb6:	43da      	mvns	r2, r3
 8005bb8:	68fb      	ldr	r3, [r7, #12]
 8005bba:	681b      	ldr	r3, [r3, #0]
 8005bbc:	400a      	ands	r2, r1
 8005bbe:	601a      	str	r2, [r3, #0]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_READY;
 8005bc0:	68fb      	ldr	r3, [r7, #12]
 8005bc2:	2201      	movs	r2, #1
 8005bc4:	711a      	strb	r2, [r3, #4]

  /* Process unlocked */
  __HAL_UNLOCK(hdac);
 8005bc6:	68fb      	ldr	r3, [r7, #12]
 8005bc8:	2200      	movs	r2, #0
 8005bca:	715a      	strb	r2, [r3, #5]

  /* Return function status */
  return HAL_OK;
 8005bcc:	2300      	movs	r3, #0
}
 8005bce:	4618      	mov	r0, r3
 8005bd0:	3720      	adds	r7, #32
 8005bd2:	46bd      	mov	sp, r7
 8005bd4:	bd80      	pop	{r7, pc}
 8005bd6:	bf00      	nop
 8005bd8:	20008000 	.word	0x20008000

08005bdc <HAL_ETH_Init>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Init(ETH_HandleTypeDef *heth)
{
 8005bdc:	b580      	push	{r7, lr}
 8005bde:	b084      	sub	sp, #16
 8005be0:	af00      	add	r7, sp, #0
 8005be2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if (heth == NULL)
 8005be4:	687b      	ldr	r3, [r7, #4]
 8005be6:	2b00      	cmp	r3, #0
 8005be8:	d101      	bne.n	8005bee <HAL_ETH_Init+0x12>
  {
    return HAL_ERROR;
 8005bea:	2301      	movs	r3, #1
 8005bec:	e0cf      	b.n	8005d8e <HAL_ETH_Init+0x1b2>
  }
  if (heth->gState == HAL_ETH_STATE_RESET)
 8005bee:	687b      	ldr	r3, [r7, #4]
 8005bf0:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8005bf4:	2b00      	cmp	r3, #0
 8005bf6:	d106      	bne.n	8005c06 <HAL_ETH_Init+0x2a>
  {
    heth->gState = HAL_ETH_STATE_BUSY;
 8005bf8:	687b      	ldr	r3, [r7, #4]
 8005bfa:	2223      	movs	r2, #35	; 0x23
 8005bfc:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    /* Init the low level hardware */
    heth->MspInitCallback(heth);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC. */
    HAL_ETH_MspInit(heth);
 8005c00:	6878      	ldr	r0, [r7, #4]
 8005c02:	f009 f9d5 	bl	800efb0 <HAL_ETH_MspInit>

#endif /* (USE_HAL_ETH_REGISTER_CALLBACKS) */
  }

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8005c06:	4b64      	ldr	r3, [pc, #400]	; (8005d98 <HAL_ETH_Init+0x1bc>)
 8005c08:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8005c0c:	4a62      	ldr	r2, [pc, #392]	; (8005d98 <HAL_ETH_Init+0x1bc>)
 8005c0e:	f043 0302 	orr.w	r3, r3, #2
 8005c12:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 8005c16:	4b60      	ldr	r3, [pc, #384]	; (8005d98 <HAL_ETH_Init+0x1bc>)
 8005c18:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8005c1c:	f003 0302 	and.w	r3, r3, #2
 8005c20:	60bb      	str	r3, [r7, #8]
 8005c22:	68bb      	ldr	r3, [r7, #8]

  if (heth->Init.MediaInterface == HAL_ETH_MII_MODE)
 8005c24:	687b      	ldr	r3, [r7, #4]
 8005c26:	7a1b      	ldrb	r3, [r3, #8]
 8005c28:	2b00      	cmp	r3, #0
 8005c2a:	d103      	bne.n	8005c34 <HAL_ETH_Init+0x58>
  {
    HAL_SYSCFG_ETHInterfaceSelect(SYSCFG_ETH_MII);
 8005c2c:	2000      	movs	r0, #0
 8005c2e:	f7fd fee1 	bl	80039f4 <HAL_SYSCFG_ETHInterfaceSelect>
 8005c32:	e003      	b.n	8005c3c <HAL_ETH_Init+0x60>
  }
  else
  {
    HAL_SYSCFG_ETHInterfaceSelect(SYSCFG_ETH_RMII);
 8005c34:	f44f 0000 	mov.w	r0, #8388608	; 0x800000
 8005c38:	f7fd fedc 	bl	80039f4 <HAL_SYSCFG_ETHInterfaceSelect>
  }

  /* Dummy read to sync with ETH */
  (void)SYSCFG->PMCR;
 8005c3c:	4b57      	ldr	r3, [pc, #348]	; (8005d9c <HAL_ETH_Init+0x1c0>)
 8005c3e:	685b      	ldr	r3, [r3, #4]

  /* Ethernet Software reset */
  /* Set the SWR bit: resets all MAC subsystem internal registers and logic */
  /* After reset all the registers holds their respective reset values */
  SET_BIT(heth->Instance->DMAMR, ETH_DMAMR_SWR);
 8005c40:	687b      	ldr	r3, [r7, #4]
 8005c42:	681b      	ldr	r3, [r3, #0]
 8005c44:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005c48:	681b      	ldr	r3, [r3, #0]
 8005c4a:	687a      	ldr	r2, [r7, #4]
 8005c4c:	6812      	ldr	r2, [r2, #0]
 8005c4e:	f043 0301 	orr.w	r3, r3, #1
 8005c52:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8005c56:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8005c58:	f7fd fe90 	bl	800397c <HAL_GetTick>
 8005c5c:	60f8      	str	r0, [r7, #12]

  /* Wait for software reset */
  while (READ_BIT(heth->Instance->DMAMR, ETH_DMAMR_SWR) > 0U)
 8005c5e:	e011      	b.n	8005c84 <HAL_ETH_Init+0xa8>
  {
    if (((HAL_GetTick() - tickstart) > ETH_SWRESET_TIMEOUT))
 8005c60:	f7fd fe8c 	bl	800397c <HAL_GetTick>
 8005c64:	4602      	mov	r2, r0
 8005c66:	68fb      	ldr	r3, [r7, #12]
 8005c68:	1ad3      	subs	r3, r2, r3
 8005c6a:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 8005c6e:	d909      	bls.n	8005c84 <HAL_ETH_Init+0xa8>
    {
      /* Set Error Code */
      heth->ErrorCode = HAL_ETH_ERROR_TIMEOUT;
 8005c70:	687b      	ldr	r3, [r7, #4]
 8005c72:	2204      	movs	r2, #4
 8005c74:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
      /* Set State as Error */
      heth->gState = HAL_ETH_STATE_ERROR;
 8005c78:	687b      	ldr	r3, [r7, #4]
 8005c7a:	22e0      	movs	r2, #224	; 0xe0
 8005c7c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
      /* Return Error */
      return HAL_ERROR;
 8005c80:	2301      	movs	r3, #1
 8005c82:	e084      	b.n	8005d8e <HAL_ETH_Init+0x1b2>
  while (READ_BIT(heth->Instance->DMAMR, ETH_DMAMR_SWR) > 0U)
 8005c84:	687b      	ldr	r3, [r7, #4]
 8005c86:	681b      	ldr	r3, [r3, #0]
 8005c88:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005c8c:	681b      	ldr	r3, [r3, #0]
 8005c8e:	f003 0301 	and.w	r3, r3, #1
 8005c92:	2b00      	cmp	r3, #0
 8005c94:	d1e4      	bne.n	8005c60 <HAL_ETH_Init+0x84>
    }
  }

  /*------------------ MDIO CSR Clock Range Configuration --------------------*/
  HAL_ETH_SetMDIOClockRange(heth);
 8005c96:	6878      	ldr	r0, [r7, #4]
 8005c98:	f000 fd94 	bl	80067c4 <HAL_ETH_SetMDIOClockRange>

  /*------------------ MAC LPI 1US Tic Counter Configuration --------------------*/
  WRITE_REG(heth->Instance->MAC1USTCR, (((uint32_t)HAL_RCC_GetHCLKFreq() / ETH_MAC_US_TICK) - 1U));
 8005c9c:	f004 fc64 	bl	800a568 <HAL_RCC_GetHCLKFreq>
 8005ca0:	4603      	mov	r3, r0
 8005ca2:	4a3f      	ldr	r2, [pc, #252]	; (8005da0 <HAL_ETH_Init+0x1c4>)
 8005ca4:	fba2 2303 	umull	r2, r3, r2, r3
 8005ca8:	0c9a      	lsrs	r2, r3, #18
 8005caa:	687b      	ldr	r3, [r7, #4]
 8005cac:	681b      	ldr	r3, [r3, #0]
 8005cae:	3a01      	subs	r2, #1
 8005cb0:	f8c3 20dc 	str.w	r2, [r3, #220]	; 0xdc

  /*------------------ MAC, MTL and DMA default Configuration ----------------*/
  ETH_MACDMAConfig(heth);
 8005cb4:	6878      	ldr	r0, [r7, #4]
 8005cb6:	f000 ff7f 	bl	8006bb8 <ETH_MACDMAConfig>

  /* SET DSL to 64 bit */
  MODIFY_REG(heth->Instance->DMACCR, ETH_DMACCR_DSL, ETH_DMACCR_DSL_64BIT);
 8005cba:	687b      	ldr	r3, [r7, #4]
 8005cbc:	681b      	ldr	r3, [r3, #0]
 8005cbe:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005cc2:	f8d3 3100 	ldr.w	r3, [r3, #256]	; 0x100
 8005cc6:	f423 13e0 	bic.w	r3, r3, #1835008	; 0x1c0000
 8005cca:	687a      	ldr	r2, [r7, #4]
 8005ccc:	6812      	ldr	r2, [r2, #0]
 8005cce:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8005cd2:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8005cd6:	f8c2 3100 	str.w	r3, [r2, #256]	; 0x100

  /* Set Receive Buffers Length (must be a multiple of 4) */
  if ((heth->Init.RxBuffLen % 0x4U) != 0x0U)
 8005cda:	687b      	ldr	r3, [r7, #4]
 8005cdc:	695b      	ldr	r3, [r3, #20]
 8005cde:	f003 0303 	and.w	r3, r3, #3
 8005ce2:	2b00      	cmp	r3, #0
 8005ce4:	d009      	beq.n	8005cfa <HAL_ETH_Init+0x11e>
  {
    /* Set Error Code */
    heth->ErrorCode = HAL_ETH_ERROR_PARAM;
 8005ce6:	687b      	ldr	r3, [r7, #4]
 8005ce8:	2201      	movs	r2, #1
 8005cea:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
    /* Set State as Error */
    heth->gState = HAL_ETH_STATE_ERROR;
 8005cee:	687b      	ldr	r3, [r7, #4]
 8005cf0:	22e0      	movs	r2, #224	; 0xe0
 8005cf2:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    /* Return Error */
    return HAL_ERROR;
 8005cf6:	2301      	movs	r3, #1
 8005cf8:	e049      	b.n	8005d8e <HAL_ETH_Init+0x1b2>
  }
  else
  {
    MODIFY_REG(heth->Instance->DMACRCR, ETH_DMACRCR_RBSZ, ((heth->Init.RxBuffLen) << 1));
 8005cfa:	687b      	ldr	r3, [r7, #4]
 8005cfc:	681b      	ldr	r3, [r3, #0]
 8005cfe:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005d02:	f8d3 2108 	ldr.w	r2, [r3, #264]	; 0x108
 8005d06:	4b27      	ldr	r3, [pc, #156]	; (8005da4 <HAL_ETH_Init+0x1c8>)
 8005d08:	4013      	ands	r3, r2
 8005d0a:	687a      	ldr	r2, [r7, #4]
 8005d0c:	6952      	ldr	r2, [r2, #20]
 8005d0e:	0051      	lsls	r1, r2, #1
 8005d10:	687a      	ldr	r2, [r7, #4]
 8005d12:	6812      	ldr	r2, [r2, #0]
 8005d14:	430b      	orrs	r3, r1
 8005d16:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8005d1a:	f8c2 3108 	str.w	r3, [r2, #264]	; 0x108
  }

  /*------------------ DMA Tx Descriptors Configuration ----------------------*/
  ETH_DMATxDescListInit(heth);
 8005d1e:	6878      	ldr	r0, [r7, #4]
 8005d20:	f000 ffe7 	bl	8006cf2 <ETH_DMATxDescListInit>

  /*------------------ DMA Rx Descriptors Configuration ----------------------*/
  ETH_DMARxDescListInit(heth);
 8005d24:	6878      	ldr	r0, [r7, #4]
 8005d26:	f001 f82d 	bl	8006d84 <ETH_DMARxDescListInit>

  /*--------------------- ETHERNET MAC Address Configuration ------------------*/
  /* Set MAC addr bits 32 to 47 */
  heth->Instance->MACA0HR = (((uint32_t)(heth->Init.MACAddr[5]) << 8) | (uint32_t)heth->Init.MACAddr[4]);
 8005d2a:	687b      	ldr	r3, [r7, #4]
 8005d2c:	685b      	ldr	r3, [r3, #4]
 8005d2e:	3305      	adds	r3, #5
 8005d30:	781b      	ldrb	r3, [r3, #0]
 8005d32:	021a      	lsls	r2, r3, #8
 8005d34:	687b      	ldr	r3, [r7, #4]
 8005d36:	685b      	ldr	r3, [r3, #4]
 8005d38:	3304      	adds	r3, #4
 8005d3a:	781b      	ldrb	r3, [r3, #0]
 8005d3c:	4619      	mov	r1, r3
 8005d3e:	687b      	ldr	r3, [r7, #4]
 8005d40:	681b      	ldr	r3, [r3, #0]
 8005d42:	430a      	orrs	r2, r1
 8005d44:	f8c3 2300 	str.w	r2, [r3, #768]	; 0x300
  /* Set MAC addr bits 0 to 31 */
  heth->Instance->MACA0LR = (((uint32_t)(heth->Init.MACAddr[3]) << 24) | ((uint32_t)(heth->Init.MACAddr[2]) << 16) |
 8005d48:	687b      	ldr	r3, [r7, #4]
 8005d4a:	685b      	ldr	r3, [r3, #4]
 8005d4c:	3303      	adds	r3, #3
 8005d4e:	781b      	ldrb	r3, [r3, #0]
 8005d50:	061a      	lsls	r2, r3, #24
 8005d52:	687b      	ldr	r3, [r7, #4]
 8005d54:	685b      	ldr	r3, [r3, #4]
 8005d56:	3302      	adds	r3, #2
 8005d58:	781b      	ldrb	r3, [r3, #0]
 8005d5a:	041b      	lsls	r3, r3, #16
 8005d5c:	431a      	orrs	r2, r3
                             ((uint32_t)(heth->Init.MACAddr[1]) << 8) | (uint32_t)heth->Init.MACAddr[0]);
 8005d5e:	687b      	ldr	r3, [r7, #4]
 8005d60:	685b      	ldr	r3, [r3, #4]
 8005d62:	3301      	adds	r3, #1
 8005d64:	781b      	ldrb	r3, [r3, #0]
 8005d66:	021b      	lsls	r3, r3, #8
  heth->Instance->MACA0LR = (((uint32_t)(heth->Init.MACAddr[3]) << 24) | ((uint32_t)(heth->Init.MACAddr[2]) << 16) |
 8005d68:	431a      	orrs	r2, r3
                             ((uint32_t)(heth->Init.MACAddr[1]) << 8) | (uint32_t)heth->Init.MACAddr[0]);
 8005d6a:	687b      	ldr	r3, [r7, #4]
 8005d6c:	685b      	ldr	r3, [r3, #4]
 8005d6e:	781b      	ldrb	r3, [r3, #0]
 8005d70:	4619      	mov	r1, r3
  heth->Instance->MACA0LR = (((uint32_t)(heth->Init.MACAddr[3]) << 24) | ((uint32_t)(heth->Init.MACAddr[2]) << 16) |
 8005d72:	687b      	ldr	r3, [r7, #4]
 8005d74:	681b      	ldr	r3, [r3, #0]
                             ((uint32_t)(heth->Init.MACAddr[1]) << 8) | (uint32_t)heth->Init.MACAddr[0]);
 8005d76:	430a      	orrs	r2, r1
  heth->Instance->MACA0LR = (((uint32_t)(heth->Init.MACAddr[3]) << 24) | ((uint32_t)(heth->Init.MACAddr[2]) << 16) |
 8005d78:	f8c3 2304 	str.w	r2, [r3, #772]	; 0x304

  heth->ErrorCode = HAL_ETH_ERROR_NONE;
 8005d7c:	687b      	ldr	r3, [r7, #4]
 8005d7e:	2200      	movs	r2, #0
 8005d80:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  heth->gState = HAL_ETH_STATE_READY;
 8005d84:	687b      	ldr	r3, [r7, #4]
 8005d86:	2210      	movs	r2, #16
 8005d88:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 8005d8c:	2300      	movs	r3, #0
}
 8005d8e:	4618      	mov	r0, r3
 8005d90:	3710      	adds	r7, #16
 8005d92:	46bd      	mov	sp, r7
 8005d94:	bd80      	pop	{r7, pc}
 8005d96:	bf00      	nop
 8005d98:	58024400 	.word	0x58024400
 8005d9c:	58000400 	.word	0x58000400
 8005da0:	431bde83 	.word	0x431bde83
 8005da4:	ffff8001 	.word	0xffff8001

08005da8 <HAL_ETH_Start>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Start(ETH_HandleTypeDef *heth)
{
 8005da8:	b580      	push	{r7, lr}
 8005daa:	b082      	sub	sp, #8
 8005dac:	af00      	add	r7, sp, #0
 8005dae:	6078      	str	r0, [r7, #4]
  if (heth->gState == HAL_ETH_STATE_READY)
 8005db0:	687b      	ldr	r3, [r7, #4]
 8005db2:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8005db6:	2b10      	cmp	r3, #16
 8005db8:	d153      	bne.n	8005e62 <HAL_ETH_Start+0xba>
  {
    heth->gState = HAL_ETH_STATE_BUSY;
 8005dba:	687b      	ldr	r3, [r7, #4]
 8005dbc:	2223      	movs	r2, #35	; 0x23
 8005dbe:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    /* Set nombre of descriptors to build */
    heth->RxDescList.RxBuildDescCnt = ETH_RX_DESC_CNT;
 8005dc2:	687b      	ldr	r3, [r7, #4]
 8005dc4:	2204      	movs	r2, #4
 8005dc6:	66da      	str	r2, [r3, #108]	; 0x6c

    /* Build all descriptors */
    ETH_UpdateDescriptor(heth);
 8005dc8:	6878      	ldr	r0, [r7, #4]
 8005dca:	f000 f9f6 	bl	80061ba <ETH_UpdateDescriptor>

    /* Enable the MAC transmission */
    SET_BIT(heth->Instance->MACCR, ETH_MACCR_TE);
 8005dce:	687b      	ldr	r3, [r7, #4]
 8005dd0:	681b      	ldr	r3, [r3, #0]
 8005dd2:	681a      	ldr	r2, [r3, #0]
 8005dd4:	687b      	ldr	r3, [r7, #4]
 8005dd6:	681b      	ldr	r3, [r3, #0]
 8005dd8:	f042 0202 	orr.w	r2, r2, #2
 8005ddc:	601a      	str	r2, [r3, #0]

    /* Enable the MAC reception */
    SET_BIT(heth->Instance->MACCR, ETH_MACCR_RE);
 8005dde:	687b      	ldr	r3, [r7, #4]
 8005de0:	681b      	ldr	r3, [r3, #0]
 8005de2:	681a      	ldr	r2, [r3, #0]
 8005de4:	687b      	ldr	r3, [r7, #4]
 8005de6:	681b      	ldr	r3, [r3, #0]
 8005de8:	f042 0201 	orr.w	r2, r2, #1
 8005dec:	601a      	str	r2, [r3, #0]

    /* Set the Flush Transmit FIFO bit */
    SET_BIT(heth->Instance->MTLTQOMR, ETH_MTLTQOMR_FTQ);
 8005dee:	687b      	ldr	r3, [r7, #4]
 8005df0:	681b      	ldr	r3, [r3, #0]
 8005df2:	f8d3 2d00 	ldr.w	r2, [r3, #3328]	; 0xd00
 8005df6:	687b      	ldr	r3, [r7, #4]
 8005df8:	681b      	ldr	r3, [r3, #0]
 8005dfa:	f042 0201 	orr.w	r2, r2, #1
 8005dfe:	f8c3 2d00 	str.w	r2, [r3, #3328]	; 0xd00

    /* Enable the DMA transmission */
    SET_BIT(heth->Instance->DMACTCR, ETH_DMACTCR_ST);
 8005e02:	687b      	ldr	r3, [r7, #4]
 8005e04:	681b      	ldr	r3, [r3, #0]
 8005e06:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005e0a:	f8d3 3104 	ldr.w	r3, [r3, #260]	; 0x104
 8005e0e:	687a      	ldr	r2, [r7, #4]
 8005e10:	6812      	ldr	r2, [r2, #0]
 8005e12:	f043 0301 	orr.w	r3, r3, #1
 8005e16:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8005e1a:	f8c2 3104 	str.w	r3, [r2, #260]	; 0x104

    /* Enable the DMA reception */
    SET_BIT(heth->Instance->DMACRCR, ETH_DMACRCR_SR);
 8005e1e:	687b      	ldr	r3, [r7, #4]
 8005e20:	681b      	ldr	r3, [r3, #0]
 8005e22:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005e26:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 8005e2a:	687a      	ldr	r2, [r7, #4]
 8005e2c:	6812      	ldr	r2, [r2, #0]
 8005e2e:	f043 0301 	orr.w	r3, r3, #1
 8005e32:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8005e36:	f8c2 3108 	str.w	r3, [r2, #264]	; 0x108

    /* Clear Tx and Rx process stopped flags */
    heth->Instance->DMACSR |= (ETH_DMACSR_TPS | ETH_DMACSR_RPS);
 8005e3a:	687b      	ldr	r3, [r7, #4]
 8005e3c:	681b      	ldr	r3, [r3, #0]
 8005e3e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005e42:	f8d3 3160 	ldr.w	r3, [r3, #352]	; 0x160
 8005e46:	687a      	ldr	r2, [r7, #4]
 8005e48:	6812      	ldr	r2, [r2, #0]
 8005e4a:	f443 7381 	orr.w	r3, r3, #258	; 0x102
 8005e4e:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8005e52:	f8c2 3160 	str.w	r3, [r2, #352]	; 0x160

    heth->gState = HAL_ETH_STATE_STARTED;
 8005e56:	687b      	ldr	r3, [r7, #4]
 8005e58:	2223      	movs	r2, #35	; 0x23
 8005e5a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    return HAL_OK;
 8005e5e:	2300      	movs	r3, #0
 8005e60:	e000      	b.n	8005e64 <HAL_ETH_Start+0xbc>
  }
  else
  {
    return HAL_ERROR;
 8005e62:	2301      	movs	r3, #1
  }
}
 8005e64:	4618      	mov	r0, r3
 8005e66:	3708      	adds	r7, #8
 8005e68:	46bd      	mov	sp, r7
 8005e6a:	bd80      	pop	{r7, pc}

08005e6c <HAL_ETH_Stop>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Stop(ETH_HandleTypeDef *heth)
{
 8005e6c:	b480      	push	{r7}
 8005e6e:	b083      	sub	sp, #12
 8005e70:	af00      	add	r7, sp, #0
 8005e72:	6078      	str	r0, [r7, #4]
  if (heth->gState == HAL_ETH_STATE_STARTED)
 8005e74:	687b      	ldr	r3, [r7, #4]
 8005e76:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8005e7a:	2b23      	cmp	r3, #35	; 0x23
 8005e7c:	d13f      	bne.n	8005efe <HAL_ETH_Stop+0x92>
  {
    /* Set the ETH peripheral state to BUSY */
    heth->gState = HAL_ETH_STATE_BUSY;
 8005e7e:	687b      	ldr	r3, [r7, #4]
 8005e80:	2223      	movs	r2, #35	; 0x23
 8005e82:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    /* Disable the DMA transmission */
    CLEAR_BIT(heth->Instance->DMACTCR, ETH_DMACTCR_ST);
 8005e86:	687b      	ldr	r3, [r7, #4]
 8005e88:	681b      	ldr	r3, [r3, #0]
 8005e8a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005e8e:	f8d3 3104 	ldr.w	r3, [r3, #260]	; 0x104
 8005e92:	687a      	ldr	r2, [r7, #4]
 8005e94:	6812      	ldr	r2, [r2, #0]
 8005e96:	f023 0301 	bic.w	r3, r3, #1
 8005e9a:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8005e9e:	f8c2 3104 	str.w	r3, [r2, #260]	; 0x104

    /* Disable the DMA reception */
    CLEAR_BIT(heth->Instance->DMACRCR, ETH_DMACRCR_SR);
 8005ea2:	687b      	ldr	r3, [r7, #4]
 8005ea4:	681b      	ldr	r3, [r3, #0]
 8005ea6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005eaa:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 8005eae:	687a      	ldr	r2, [r7, #4]
 8005eb0:	6812      	ldr	r2, [r2, #0]
 8005eb2:	f023 0301 	bic.w	r3, r3, #1
 8005eb6:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8005eba:	f8c2 3108 	str.w	r3, [r2, #264]	; 0x108

    /* Disable the MAC reception */
    CLEAR_BIT(heth->Instance->MACCR, ETH_MACCR_RE);
 8005ebe:	687b      	ldr	r3, [r7, #4]
 8005ec0:	681b      	ldr	r3, [r3, #0]
 8005ec2:	681a      	ldr	r2, [r3, #0]
 8005ec4:	687b      	ldr	r3, [r7, #4]
 8005ec6:	681b      	ldr	r3, [r3, #0]
 8005ec8:	f022 0201 	bic.w	r2, r2, #1
 8005ecc:	601a      	str	r2, [r3, #0]

    /* Set the Flush Transmit FIFO bit */
    SET_BIT(heth->Instance->MTLTQOMR, ETH_MTLTQOMR_FTQ);
 8005ece:	687b      	ldr	r3, [r7, #4]
 8005ed0:	681b      	ldr	r3, [r3, #0]
 8005ed2:	f8d3 2d00 	ldr.w	r2, [r3, #3328]	; 0xd00
 8005ed6:	687b      	ldr	r3, [r7, #4]
 8005ed8:	681b      	ldr	r3, [r3, #0]
 8005eda:	f042 0201 	orr.w	r2, r2, #1
 8005ede:	f8c3 2d00 	str.w	r2, [r3, #3328]	; 0xd00

    /* Disable the MAC transmission */
    CLEAR_BIT(heth->Instance->MACCR, ETH_MACCR_TE);
 8005ee2:	687b      	ldr	r3, [r7, #4]
 8005ee4:	681b      	ldr	r3, [r3, #0]
 8005ee6:	681a      	ldr	r2, [r3, #0]
 8005ee8:	687b      	ldr	r3, [r7, #4]
 8005eea:	681b      	ldr	r3, [r3, #0]
 8005eec:	f022 0202 	bic.w	r2, r2, #2
 8005ef0:	601a      	str	r2, [r3, #0]

    heth->gState = HAL_ETH_STATE_READY;
 8005ef2:	687b      	ldr	r3, [r7, #4]
 8005ef4:	2210      	movs	r2, #16
 8005ef6:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    /* Return function status */
    return HAL_OK;
 8005efa:	2300      	movs	r3, #0
 8005efc:	e000      	b.n	8005f00 <HAL_ETH_Stop+0x94>
  }
  else
  {
    return HAL_ERROR;
 8005efe:	2301      	movs	r3, #1
  }
}
 8005f00:	4618      	mov	r0, r3
 8005f02:	370c      	adds	r7, #12
 8005f04:	46bd      	mov	sp, r7
 8005f06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f0a:	4770      	bx	lr

08005f0c <HAL_ETH_Transmit>:
  * @param  pTxConfig: Hold the configuration of packet to be transmitted
  * @param  Timeout: timeout value
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Transmit(ETH_HandleTypeDef *heth, ETH_TxPacketConfig *pTxConfig, uint32_t Timeout)
{
 8005f0c:	b580      	push	{r7, lr}
 8005f0e:	b086      	sub	sp, #24
 8005f10:	af00      	add	r7, sp, #0
 8005f12:	60f8      	str	r0, [r7, #12]
 8005f14:	60b9      	str	r1, [r7, #8]
 8005f16:	607a      	str	r2, [r7, #4]
  uint32_t tickstart;
  ETH_DMADescTypeDef *dmatxdesc;

  if (pTxConfig == NULL)
 8005f18:	68bb      	ldr	r3, [r7, #8]
 8005f1a:	2b00      	cmp	r3, #0
 8005f1c:	d109      	bne.n	8005f32 <HAL_ETH_Transmit+0x26>
  {
    heth->ErrorCode |= HAL_ETH_ERROR_PARAM;
 8005f1e:	68fb      	ldr	r3, [r7, #12]
 8005f20:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005f24:	f043 0201 	orr.w	r2, r3, #1
 8005f28:	68fb      	ldr	r3, [r7, #12]
 8005f2a:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
    return HAL_ERROR;
 8005f2e:	2301      	movs	r3, #1
 8005f30:	e07f      	b.n	8006032 <HAL_ETH_Transmit+0x126>
  }

  if (heth->gState == HAL_ETH_STATE_STARTED)
 8005f32:	68fb      	ldr	r3, [r7, #12]
 8005f34:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8005f38:	2b23      	cmp	r3, #35	; 0x23
 8005f3a:	d179      	bne.n	8006030 <HAL_ETH_Transmit+0x124>
  {
    /* Config DMA Tx descriptor by Tx Packet info */
    if (ETH_Prepare_Tx_Descriptors(heth, pTxConfig, 0) != HAL_ETH_ERROR_NONE)
 8005f3c:	2200      	movs	r2, #0
 8005f3e:	68b9      	ldr	r1, [r7, #8]
 8005f40:	68f8      	ldr	r0, [r7, #12]
 8005f42:	f000 ff7d 	bl	8006e40 <ETH_Prepare_Tx_Descriptors>
 8005f46:	4603      	mov	r3, r0
 8005f48:	2b00      	cmp	r3, #0
 8005f4a:	d009      	beq.n	8005f60 <HAL_ETH_Transmit+0x54>
    {
      /* Set the ETH error code */
      heth->ErrorCode |= HAL_ETH_ERROR_BUSY;
 8005f4c:	68fb      	ldr	r3, [r7, #12]
 8005f4e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005f52:	f043 0202 	orr.w	r2, r3, #2
 8005f56:	68fb      	ldr	r3, [r7, #12]
 8005f58:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
      return HAL_ERROR;
 8005f5c:	2301      	movs	r3, #1
 8005f5e:	e068      	b.n	8006032 <HAL_ETH_Transmit+0x126>
  __ASM volatile ("dsb 0xF":::"memory");
 8005f60:	f3bf 8f4f 	dsb	sy
}
 8005f64:	bf00      	nop
    }

    /* Ensure completion of descriptor preparation before transmission start */
    __DSB();

    dmatxdesc = (ETH_DMADescTypeDef *)(&heth->TxDescList)->TxDesc[heth->TxDescList.CurTxDesc];
 8005f66:	68fb      	ldr	r3, [r7, #12]
 8005f68:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8005f6a:	68fb      	ldr	r3, [r7, #12]
 8005f6c:	3206      	adds	r2, #6
 8005f6e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005f72:	617b      	str	r3, [r7, #20]

    /* Incr current tx desc index */
    INCR_TX_DESC_INDEX(heth->TxDescList.CurTxDesc, 1U);
 8005f74:	68fb      	ldr	r3, [r7, #12]
 8005f76:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005f78:	1c5a      	adds	r2, r3, #1
 8005f7a:	68fb      	ldr	r3, [r7, #12]
 8005f7c:	629a      	str	r2, [r3, #40]	; 0x28
 8005f7e:	68fb      	ldr	r3, [r7, #12]
 8005f80:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005f82:	2b03      	cmp	r3, #3
 8005f84:	d904      	bls.n	8005f90 <HAL_ETH_Transmit+0x84>
 8005f86:	68fb      	ldr	r3, [r7, #12]
 8005f88:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005f8a:	1f1a      	subs	r2, r3, #4
 8005f8c:	68fb      	ldr	r3, [r7, #12]
 8005f8e:	629a      	str	r2, [r3, #40]	; 0x28

    /* Start transmission */
    /* issue a poll command to Tx DMA by writing address of next immediate free descriptor */
    WRITE_REG(heth->Instance->DMACTDTPR, (uint32_t)(heth->TxDescList.TxDesc[heth->TxDescList.CurTxDesc]));
 8005f90:	68fb      	ldr	r3, [r7, #12]
 8005f92:	6a99      	ldr	r1, [r3, #40]	; 0x28
 8005f94:	68fb      	ldr	r3, [r7, #12]
 8005f96:	681a      	ldr	r2, [r3, #0]
 8005f98:	68fb      	ldr	r3, [r7, #12]
 8005f9a:	3106      	adds	r1, #6
 8005f9c:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8005fa0:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8005fa4:	f8c2 3120 	str.w	r3, [r2, #288]	; 0x120

    tickstart = HAL_GetTick();
 8005fa8:	f7fd fce8 	bl	800397c <HAL_GetTick>
 8005fac:	6138      	str	r0, [r7, #16]

    /* Wait for data to be transmitted or timeout occurred */
    while ((dmatxdesc->DESC3 & ETH_DMATXNDESCWBF_OWN) != (uint32_t)RESET)
 8005fae:	e039      	b.n	8006024 <HAL_ETH_Transmit+0x118>
    {
      if ((heth->Instance->DMACSR & ETH_DMACSR_FBE) != (uint32_t)RESET)
 8005fb0:	68fb      	ldr	r3, [r7, #12]
 8005fb2:	681b      	ldr	r3, [r3, #0]
 8005fb4:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005fb8:	f8d3 3160 	ldr.w	r3, [r3, #352]	; 0x160
 8005fbc:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8005fc0:	2b00      	cmp	r3, #0
 8005fc2:	d012      	beq.n	8005fea <HAL_ETH_Transmit+0xde>
      {
        heth->ErrorCode |= HAL_ETH_ERROR_DMA;
 8005fc4:	68fb      	ldr	r3, [r7, #12]
 8005fc6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005fca:	f043 0208 	orr.w	r2, r3, #8
 8005fce:	68fb      	ldr	r3, [r7, #12]
 8005fd0:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
        heth->DMAErrorCode = heth->Instance->DMACSR;
 8005fd4:	68fb      	ldr	r3, [r7, #12]
 8005fd6:	681b      	ldr	r3, [r3, #0]
 8005fd8:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005fdc:	f8d3 2160 	ldr.w	r2, [r3, #352]	; 0x160
 8005fe0:	68fb      	ldr	r3, [r7, #12]
 8005fe2:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        /* Return function status */
        return HAL_ERROR;
 8005fe6:	2301      	movs	r3, #1
 8005fe8:	e023      	b.n	8006032 <HAL_ETH_Transmit+0x126>
      }

      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 8005fea:	687b      	ldr	r3, [r7, #4]
 8005fec:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005ff0:	d018      	beq.n	8006024 <HAL_ETH_Transmit+0x118>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8005ff2:	f7fd fcc3 	bl	800397c <HAL_GetTick>
 8005ff6:	4602      	mov	r2, r0
 8005ff8:	693b      	ldr	r3, [r7, #16]
 8005ffa:	1ad3      	subs	r3, r2, r3
 8005ffc:	687a      	ldr	r2, [r7, #4]
 8005ffe:	429a      	cmp	r2, r3
 8006000:	d302      	bcc.n	8006008 <HAL_ETH_Transmit+0xfc>
 8006002:	687b      	ldr	r3, [r7, #4]
 8006004:	2b00      	cmp	r3, #0
 8006006:	d10d      	bne.n	8006024 <HAL_ETH_Transmit+0x118>
        {
          heth->ErrorCode |= HAL_ETH_ERROR_TIMEOUT;
 8006008:	68fb      	ldr	r3, [r7, #12]
 800600a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800600e:	f043 0204 	orr.w	r2, r3, #4
 8006012:	68fb      	ldr	r3, [r7, #12]
 8006014:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
          /* Clear TX descriptor so that we can proceed */
          dmatxdesc->DESC3 = (ETH_DMATXNDESCWBF_FD | ETH_DMATXNDESCWBF_LD);
 8006018:	697b      	ldr	r3, [r7, #20]
 800601a:	f04f 5240 	mov.w	r2, #805306368	; 0x30000000
 800601e:	60da      	str	r2, [r3, #12]
          return HAL_ERROR;
 8006020:	2301      	movs	r3, #1
 8006022:	e006      	b.n	8006032 <HAL_ETH_Transmit+0x126>
    while ((dmatxdesc->DESC3 & ETH_DMATXNDESCWBF_OWN) != (uint32_t)RESET)
 8006024:	697b      	ldr	r3, [r7, #20]
 8006026:	68db      	ldr	r3, [r3, #12]
 8006028:	2b00      	cmp	r3, #0
 800602a:	dbc1      	blt.n	8005fb0 <HAL_ETH_Transmit+0xa4>
        }
      }
    }

    /* Return function status */
    return HAL_OK;
 800602c:	2300      	movs	r3, #0
 800602e:	e000      	b.n	8006032 <HAL_ETH_Transmit+0x126>
  }
  else
  {
    return HAL_ERROR;
 8006030:	2301      	movs	r3, #1
  }
}
 8006032:	4618      	mov	r0, r3
 8006034:	3718      	adds	r7, #24
 8006036:	46bd      	mov	sp, r7
 8006038:	bd80      	pop	{r7, pc}

0800603a <HAL_ETH_ReadData>:
  *         the configuration information for ETHERNET module
  * @param  pAppBuff: Pointer to an application buffer to receive the packet.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_ReadData(ETH_HandleTypeDef *heth, void **pAppBuff)
{
 800603a:	b580      	push	{r7, lr}
 800603c:	b088      	sub	sp, #32
 800603e:	af00      	add	r7, sp, #0
 8006040:	6078      	str	r0, [r7, #4]
 8006042:	6039      	str	r1, [r7, #0]
  uint32_t descidx;
  ETH_DMADescTypeDef *dmarxdesc;
  uint32_t desccnt = 0U;
 8006044:	2300      	movs	r3, #0
 8006046:	617b      	str	r3, [r7, #20]
  uint32_t desccntmax;
  uint32_t bufflength;
  uint8_t rxdataready = 0U;
 8006048:	2300      	movs	r3, #0
 800604a:	73fb      	strb	r3, [r7, #15]


  if (pAppBuff == NULL)
 800604c:	683b      	ldr	r3, [r7, #0]
 800604e:	2b00      	cmp	r3, #0
 8006050:	d109      	bne.n	8006066 <HAL_ETH_ReadData+0x2c>
  {
    heth->ErrorCode |= HAL_ETH_ERROR_PARAM;
 8006052:	687b      	ldr	r3, [r7, #4]
 8006054:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006058:	f043 0201 	orr.w	r2, r3, #1
 800605c:	687b      	ldr	r3, [r7, #4]
 800605e:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
    return HAL_ERROR;
 8006062:	2301      	movs	r3, #1
 8006064:	e0a5      	b.n	80061b2 <HAL_ETH_ReadData+0x178>
  }

  if (heth->gState != HAL_ETH_STATE_STARTED)
 8006066:	687b      	ldr	r3, [r7, #4]
 8006068:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800606c:	2b23      	cmp	r3, #35	; 0x23
 800606e:	d001      	beq.n	8006074 <HAL_ETH_ReadData+0x3a>
  {
    return HAL_ERROR;
 8006070:	2301      	movs	r3, #1
 8006072:	e09e      	b.n	80061b2 <HAL_ETH_ReadData+0x178>
  }

  descidx = heth->RxDescList.RxDescIdx;
 8006074:	687b      	ldr	r3, [r7, #4]
 8006076:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006078:	61fb      	str	r3, [r7, #28]
  dmarxdesc = (ETH_DMADescTypeDef *)heth->RxDescList.RxDesc[descidx];
 800607a:	687b      	ldr	r3, [r7, #4]
 800607c:	69fa      	ldr	r2, [r7, #28]
 800607e:	3212      	adds	r2, #18
 8006080:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006084:	61bb      	str	r3, [r7, #24]
  desccntmax = ETH_RX_DESC_CNT - heth->RxDescList.RxBuildDescCnt;
 8006086:	687b      	ldr	r3, [r7, #4]
 8006088:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800608a:	f1c3 0304 	rsb	r3, r3, #4
 800608e:	60bb      	str	r3, [r7, #8]

  /* Check if descriptor is not owned by DMA */
  while ((READ_BIT(dmarxdesc->DESC3, ETH_DMARXNDESCWBF_OWN) == (uint32_t)RESET) && (desccnt < desccntmax)
 8006090:	e067      	b.n	8006162 <HAL_ETH_ReadData+0x128>
         && (rxdataready == 0U))
  {
    if (READ_BIT(dmarxdesc->DESC3,  ETH_DMARXNDESCWBF_CTXT)  != (uint32_t)RESET)
 8006092:	69bb      	ldr	r3, [r7, #24]
 8006094:	68db      	ldr	r3, [r3, #12]
 8006096:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 800609a:	2b00      	cmp	r3, #0
 800609c:	d007      	beq.n	80060ae <HAL_ETH_ReadData+0x74>
    {
      /* Get timestamp high */
      heth->RxDescList.TimeStamp.TimeStampHigh = dmarxdesc->DESC1;
 800609e:	69bb      	ldr	r3, [r7, #24]
 80060a0:	685a      	ldr	r2, [r3, #4]
 80060a2:	687b      	ldr	r3, [r7, #4]
 80060a4:	679a      	str	r2, [r3, #120]	; 0x78
      /* Get timestamp low */
      heth->RxDescList.TimeStamp.TimeStampLow  = dmarxdesc->DESC0;
 80060a6:	69bb      	ldr	r3, [r7, #24]
 80060a8:	681a      	ldr	r2, [r3, #0]
 80060aa:	687b      	ldr	r3, [r7, #4]
 80060ac:	675a      	str	r2, [r3, #116]	; 0x74
    }
    if ((READ_BIT(dmarxdesc->DESC3, ETH_DMARXNDESCWBF_FD) != (uint32_t)RESET) || (heth->RxDescList.pRxStart != NULL))
 80060ae:	69bb      	ldr	r3, [r7, #24]
 80060b0:	68db      	ldr	r3, [r3, #12]
 80060b2:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80060b6:	2b00      	cmp	r3, #0
 80060b8:	d103      	bne.n	80060c2 <HAL_ETH_ReadData+0x88>
 80060ba:	687b      	ldr	r3, [r7, #4]
 80060bc:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80060be:	2b00      	cmp	r3, #0
 80060c0:	d03d      	beq.n	800613e <HAL_ETH_ReadData+0x104>
    {
      /* Check if first descriptor */
      if (READ_BIT(dmarxdesc->DESC3, ETH_DMARXNDESCWBF_FD) != (uint32_t)RESET)
 80060c2:	69bb      	ldr	r3, [r7, #24]
 80060c4:	68db      	ldr	r3, [r3, #12]
 80060c6:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80060ca:	2b00      	cmp	r3, #0
 80060cc:	d005      	beq.n	80060da <HAL_ETH_ReadData+0xa0>
      {
        heth->RxDescList.RxDescCnt = 0;
 80060ce:	687b      	ldr	r3, [r7, #4]
 80060d0:	2200      	movs	r2, #0
 80060d2:	661a      	str	r2, [r3, #96]	; 0x60
        heth->RxDescList.RxDataLength = 0;
 80060d4:	687b      	ldr	r3, [r7, #4]
 80060d6:	2200      	movs	r2, #0
 80060d8:	665a      	str	r2, [r3, #100]	; 0x64
      }

      /* Check if last descriptor */
      bufflength = heth->Init.RxBuffLen;
 80060da:	687b      	ldr	r3, [r7, #4]
 80060dc:	695b      	ldr	r3, [r3, #20]
 80060de:	613b      	str	r3, [r7, #16]
      if (READ_BIT(dmarxdesc->DESC3, ETH_DMARXNDESCWBF_LD) != (uint32_t)RESET)
 80060e0:	69bb      	ldr	r3, [r7, #24]
 80060e2:	68db      	ldr	r3, [r3, #12]
 80060e4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80060e8:	2b00      	cmp	r3, #0
 80060ea:	d00d      	beq.n	8006108 <HAL_ETH_ReadData+0xce>
      {
        bufflength = READ_BIT(dmarxdesc->DESC3, ETH_DMARXNDESCWBF_PL) - heth->RxDescList.RxDataLength;
 80060ec:	69bb      	ldr	r3, [r7, #24]
 80060ee:	68db      	ldr	r3, [r3, #12]
 80060f0:	f3c3 020e 	ubfx	r2, r3, #0, #15
 80060f4:	687b      	ldr	r3, [r7, #4]
 80060f6:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80060f8:	1ad3      	subs	r3, r2, r3
 80060fa:	613b      	str	r3, [r7, #16]

        /* Save Last descriptor index */
        heth->RxDescList.pRxLastRxDesc = dmarxdesc->DESC3;
 80060fc:	69bb      	ldr	r3, [r7, #24]
 80060fe:	68da      	ldr	r2, [r3, #12]
 8006100:	687b      	ldr	r3, [r7, #4]
 8006102:	671a      	str	r2, [r3, #112]	; 0x70

        /* Packet ready */
        rxdataready = 1;
 8006104:	2301      	movs	r3, #1
 8006106:	73fb      	strb	r3, [r7, #15]
      /*Call registered Link callback*/
      heth->rxLinkCallback(&heth->RxDescList.pRxStart, &heth->RxDescList.pRxEnd,
                           (uint8_t *)dmarxdesc->BackupAddr0, bufflength);
#else
      /* Link callback */
      HAL_ETH_RxLinkCallback(&heth->RxDescList.pRxStart, &heth->RxDescList.pRxEnd,
 8006108:	687b      	ldr	r3, [r7, #4]
 800610a:	f103 007c 	add.w	r0, r3, #124	; 0x7c
 800610e:	687b      	ldr	r3, [r7, #4]
 8006110:	f103 0180 	add.w	r1, r3, #128	; 0x80
                             (uint8_t *)dmarxdesc->BackupAddr0, (uint16_t) bufflength);
 8006114:	69bb      	ldr	r3, [r7, #24]
 8006116:	691b      	ldr	r3, [r3, #16]
      HAL_ETH_RxLinkCallback(&heth->RxDescList.pRxStart, &heth->RxDescList.pRxEnd,
 8006118:	461a      	mov	r2, r3
 800611a:	693b      	ldr	r3, [r7, #16]
 800611c:	b29b      	uxth	r3, r3
 800611e:	f009 f91f 	bl	800f360 <HAL_ETH_RxLinkCallback>
#endif  /* USE_HAL_ETH_REGISTER_CALLBACKS */
      heth->RxDescList.RxDescCnt++;
 8006122:	687b      	ldr	r3, [r7, #4]
 8006124:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006126:	1c5a      	adds	r2, r3, #1
 8006128:	687b      	ldr	r3, [r7, #4]
 800612a:	661a      	str	r2, [r3, #96]	; 0x60
      heth->RxDescList.RxDataLength += bufflength;
 800612c:	687b      	ldr	r3, [r7, #4]
 800612e:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 8006130:	693b      	ldr	r3, [r7, #16]
 8006132:	441a      	add	r2, r3
 8006134:	687b      	ldr	r3, [r7, #4]
 8006136:	665a      	str	r2, [r3, #100]	; 0x64

      /* Clear buffer pointer */
      dmarxdesc->BackupAddr0 = 0;
 8006138:	69bb      	ldr	r3, [r7, #24]
 800613a:	2200      	movs	r2, #0
 800613c:	611a      	str	r2, [r3, #16]
    }

    /* Increment current rx descriptor index */
    INCR_RX_DESC_INDEX(descidx, 1U);
 800613e:	69fb      	ldr	r3, [r7, #28]
 8006140:	3301      	adds	r3, #1
 8006142:	61fb      	str	r3, [r7, #28]
 8006144:	69fb      	ldr	r3, [r7, #28]
 8006146:	2b03      	cmp	r3, #3
 8006148:	d902      	bls.n	8006150 <HAL_ETH_ReadData+0x116>
 800614a:	69fb      	ldr	r3, [r7, #28]
 800614c:	3b04      	subs	r3, #4
 800614e:	61fb      	str	r3, [r7, #28]
    /* Get current descriptor address */
    dmarxdesc = (ETH_DMADescTypeDef *)heth->RxDescList.RxDesc[descidx];
 8006150:	687b      	ldr	r3, [r7, #4]
 8006152:	69fa      	ldr	r2, [r7, #28]
 8006154:	3212      	adds	r2, #18
 8006156:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800615a:	61bb      	str	r3, [r7, #24]
    desccnt++;
 800615c:	697b      	ldr	r3, [r7, #20]
 800615e:	3301      	adds	r3, #1
 8006160:	617b      	str	r3, [r7, #20]
  while ((READ_BIT(dmarxdesc->DESC3, ETH_DMARXNDESCWBF_OWN) == (uint32_t)RESET) && (desccnt < desccntmax)
 8006162:	69bb      	ldr	r3, [r7, #24]
 8006164:	68db      	ldr	r3, [r3, #12]
         && (rxdataready == 0U))
 8006166:	2b00      	cmp	r3, #0
 8006168:	db06      	blt.n	8006178 <HAL_ETH_ReadData+0x13e>
  while ((READ_BIT(dmarxdesc->DESC3, ETH_DMARXNDESCWBF_OWN) == (uint32_t)RESET) && (desccnt < desccntmax)
 800616a:	697a      	ldr	r2, [r7, #20]
 800616c:	68bb      	ldr	r3, [r7, #8]
 800616e:	429a      	cmp	r2, r3
 8006170:	d202      	bcs.n	8006178 <HAL_ETH_ReadData+0x13e>
         && (rxdataready == 0U))
 8006172:	7bfb      	ldrb	r3, [r7, #15]
 8006174:	2b00      	cmp	r3, #0
 8006176:	d08c      	beq.n	8006092 <HAL_ETH_ReadData+0x58>
  }

  heth->RxDescList.RxBuildDescCnt += desccnt;
 8006178:	687b      	ldr	r3, [r7, #4]
 800617a:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 800617c:	697b      	ldr	r3, [r7, #20]
 800617e:	441a      	add	r2, r3
 8006180:	687b      	ldr	r3, [r7, #4]
 8006182:	66da      	str	r2, [r3, #108]	; 0x6c
  if ((heth->RxDescList.RxBuildDescCnt) != 0U)
 8006184:	687b      	ldr	r3, [r7, #4]
 8006186:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8006188:	2b00      	cmp	r3, #0
 800618a:	d002      	beq.n	8006192 <HAL_ETH_ReadData+0x158>
  {
    /* Update Descriptors */
    ETH_UpdateDescriptor(heth);
 800618c:	6878      	ldr	r0, [r7, #4]
 800618e:	f000 f814 	bl	80061ba <ETH_UpdateDescriptor>
  }

  heth->RxDescList.RxDescIdx = descidx;
 8006192:	687b      	ldr	r3, [r7, #4]
 8006194:	69fa      	ldr	r2, [r7, #28]
 8006196:	65da      	str	r2, [r3, #92]	; 0x5c

  if (rxdataready == 1U)
 8006198:	7bfb      	ldrb	r3, [r7, #15]
 800619a:	2b01      	cmp	r3, #1
 800619c:	d108      	bne.n	80061b0 <HAL_ETH_ReadData+0x176>
  {
    /* Return received packet */
    *pAppBuff = heth->RxDescList.pRxStart;
 800619e:	687b      	ldr	r3, [r7, #4]
 80061a0:	6fda      	ldr	r2, [r3, #124]	; 0x7c
 80061a2:	683b      	ldr	r3, [r7, #0]
 80061a4:	601a      	str	r2, [r3, #0]
    /* Reset first element */
    heth->RxDescList.pRxStart = NULL;
 80061a6:	687b      	ldr	r3, [r7, #4]
 80061a8:	2200      	movs	r2, #0
 80061aa:	67da      	str	r2, [r3, #124]	; 0x7c

    return HAL_OK;
 80061ac:	2300      	movs	r3, #0
 80061ae:	e000      	b.n	80061b2 <HAL_ETH_ReadData+0x178>
  }

  /* Packet not ready */
  return HAL_ERROR;
 80061b0:	2301      	movs	r3, #1
}
 80061b2:	4618      	mov	r0, r3
 80061b4:	3720      	adds	r7, #32
 80061b6:	46bd      	mov	sp, r7
 80061b8:	bd80      	pop	{r7, pc}

080061ba <ETH_UpdateDescriptor>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
static void ETH_UpdateDescriptor(ETH_HandleTypeDef *heth)
{
 80061ba:	b580      	push	{r7, lr}
 80061bc:	b088      	sub	sp, #32
 80061be:	af00      	add	r7, sp, #0
 80061c0:	6078      	str	r0, [r7, #4]
  uint32_t descidx;
  uint32_t desccount;
  ETH_DMADescTypeDef *dmarxdesc;
  uint8_t *buff = NULL;
 80061c2:	2300      	movs	r3, #0
 80061c4:	60fb      	str	r3, [r7, #12]
  uint8_t allocStatus = 1U;
 80061c6:	2301      	movs	r3, #1
 80061c8:	74fb      	strb	r3, [r7, #19]

  descidx = heth->RxDescList.RxBuildDescIdx;
 80061ca:	687b      	ldr	r3, [r7, #4]
 80061cc:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80061ce:	61fb      	str	r3, [r7, #28]
  dmarxdesc = (ETH_DMADescTypeDef *)heth->RxDescList.RxDesc[descidx];
 80061d0:	687b      	ldr	r3, [r7, #4]
 80061d2:	69fa      	ldr	r2, [r7, #28]
 80061d4:	3212      	adds	r2, #18
 80061d6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80061da:	617b      	str	r3, [r7, #20]
  desccount = heth->RxDescList.RxBuildDescCnt;
 80061dc:	687b      	ldr	r3, [r7, #4]
 80061de:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80061e0:	61bb      	str	r3, [r7, #24]

  while ((desccount > 0U) && (allocStatus != 0U))
 80061e2:	e03b      	b.n	800625c <ETH_UpdateDescriptor+0xa2>
  {
    /* Check if a buffer's attached the descriptor */
    if (READ_REG(dmarxdesc->BackupAddr0) == 0U)
 80061e4:	697b      	ldr	r3, [r7, #20]
 80061e6:	691b      	ldr	r3, [r3, #16]
 80061e8:	2b00      	cmp	r3, #0
 80061ea:	d112      	bne.n	8006212 <ETH_UpdateDescriptor+0x58>
#if (USE_HAL_ETH_REGISTER_CALLBACKS == 1)
      /*Call registered Allocate callback*/
      heth->rxAllocateCallback(&buff);
#else
      /* Allocate callback */
      HAL_ETH_RxAllocateCallback(&buff);
 80061ec:	f107 030c 	add.w	r3, r7, #12
 80061f0:	4618      	mov	r0, r3
 80061f2:	f009 f885 	bl	800f300 <HAL_ETH_RxAllocateCallback>
#endif  /* USE_HAL_ETH_REGISTER_CALLBACKS */
      if (buff == NULL)
 80061f6:	68fb      	ldr	r3, [r7, #12]
 80061f8:	2b00      	cmp	r3, #0
 80061fa:	d102      	bne.n	8006202 <ETH_UpdateDescriptor+0x48>
      {
        allocStatus = 0U;
 80061fc:	2300      	movs	r3, #0
 80061fe:	74fb      	strb	r3, [r7, #19]
 8006200:	e007      	b.n	8006212 <ETH_UpdateDescriptor+0x58>
      }
      else
      {
        WRITE_REG(dmarxdesc->BackupAddr0, (uint32_t)buff);
 8006202:	68fb      	ldr	r3, [r7, #12]
 8006204:	461a      	mov	r2, r3
 8006206:	697b      	ldr	r3, [r7, #20]
 8006208:	611a      	str	r2, [r3, #16]
        WRITE_REG(dmarxdesc->DESC0, (uint32_t)buff);
 800620a:	68fb      	ldr	r3, [r7, #12]
 800620c:	461a      	mov	r2, r3
 800620e:	697b      	ldr	r3, [r7, #20]
 8006210:	601a      	str	r2, [r3, #0]
      }
    }

    if (allocStatus != 0U)
 8006212:	7cfb      	ldrb	r3, [r7, #19]
 8006214:	2b00      	cmp	r3, #0
 8006216:	d021      	beq.n	800625c <ETH_UpdateDescriptor+0xa2>
  __ASM volatile ("dmb 0xF":::"memory");
 8006218:	f3bf 8f5f 	dmb	sy
}
 800621c:	bf00      	nop
    {
      /* Ensure rest of descriptor is written to RAM before the OWN bit */
      __DMB();

      if (heth->RxDescList.ItMode != 0U)
 800621e:	687b      	ldr	r3, [r7, #4]
 8006220:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006222:	2b00      	cmp	r3, #0
 8006224:	d004      	beq.n	8006230 <ETH_UpdateDescriptor+0x76>
      {
        WRITE_REG(dmarxdesc->DESC3, ETH_DMARXNDESCRF_OWN | ETH_DMARXNDESCRF_BUF1V | ETH_DMARXNDESCRF_IOC);
 8006226:	697b      	ldr	r3, [r7, #20]
 8006228:	f04f 4241 	mov.w	r2, #3238002688	; 0xc1000000
 800622c:	60da      	str	r2, [r3, #12]
 800622e:	e003      	b.n	8006238 <ETH_UpdateDescriptor+0x7e>
      }
      else
      {
        WRITE_REG(dmarxdesc->DESC3, ETH_DMARXNDESCRF_OWN | ETH_DMARXNDESCRF_BUF1V);
 8006230:	697b      	ldr	r3, [r7, #20]
 8006232:	f04f 4201 	mov.w	r2, #2164260864	; 0x81000000
 8006236:	60da      	str	r2, [r3, #12]
      }

      /* Increment current rx descriptor index */
      INCR_RX_DESC_INDEX(descidx, 1U);
 8006238:	69fb      	ldr	r3, [r7, #28]
 800623a:	3301      	adds	r3, #1
 800623c:	61fb      	str	r3, [r7, #28]
 800623e:	69fb      	ldr	r3, [r7, #28]
 8006240:	2b03      	cmp	r3, #3
 8006242:	d902      	bls.n	800624a <ETH_UpdateDescriptor+0x90>
 8006244:	69fb      	ldr	r3, [r7, #28]
 8006246:	3b04      	subs	r3, #4
 8006248:	61fb      	str	r3, [r7, #28]
      /* Get current descriptor address */
      dmarxdesc = (ETH_DMADescTypeDef *)heth->RxDescList.RxDesc[descidx];
 800624a:	687b      	ldr	r3, [r7, #4]
 800624c:	69fa      	ldr	r2, [r7, #28]
 800624e:	3212      	adds	r2, #18
 8006250:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006254:	617b      	str	r3, [r7, #20]
      desccount--;
 8006256:	69bb      	ldr	r3, [r7, #24]
 8006258:	3b01      	subs	r3, #1
 800625a:	61bb      	str	r3, [r7, #24]
  while ((desccount > 0U) && (allocStatus != 0U))
 800625c:	69bb      	ldr	r3, [r7, #24]
 800625e:	2b00      	cmp	r3, #0
 8006260:	d002      	beq.n	8006268 <ETH_UpdateDescriptor+0xae>
 8006262:	7cfb      	ldrb	r3, [r7, #19]
 8006264:	2b00      	cmp	r3, #0
 8006266:	d1bd      	bne.n	80061e4 <ETH_UpdateDescriptor+0x2a>
    }
  }

  if (heth->RxDescList.RxBuildDescCnt != desccount)
 8006268:	687b      	ldr	r3, [r7, #4]
 800626a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800626c:	69ba      	ldr	r2, [r7, #24]
 800626e:	429a      	cmp	r2, r3
 8006270:	d00d      	beq.n	800628e <ETH_UpdateDescriptor+0xd4>
  {
    /* Set the Tail pointer address */
    WRITE_REG(heth->Instance->DMACRDTPR, 0);
 8006272:	687b      	ldr	r3, [r7, #4]
 8006274:	681b      	ldr	r3, [r3, #0]
 8006276:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800627a:	461a      	mov	r2, r3
 800627c:	2300      	movs	r3, #0
 800627e:	f8c2 3128 	str.w	r3, [r2, #296]	; 0x128

    heth->RxDescList.RxBuildDescIdx = descidx;
 8006282:	687b      	ldr	r3, [r7, #4]
 8006284:	69fa      	ldr	r2, [r7, #28]
 8006286:	669a      	str	r2, [r3, #104]	; 0x68
    heth->RxDescList.RxBuildDescCnt = desccount;
 8006288:	687b      	ldr	r3, [r7, #4]
 800628a:	69ba      	ldr	r2, [r7, #24]
 800628c:	66da      	str	r2, [r3, #108]	; 0x6c
  }
}
 800628e:	bf00      	nop
 8006290:	3720      	adds	r7, #32
 8006292:	46bd      	mov	sp, r7
 8006294:	bd80      	pop	{r7, pc}

08006296 <HAL_ETH_ReadPHYRegister>:
  * @param pRegValue: parameter to hold read value
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_ReadPHYRegister(ETH_HandleTypeDef *heth, uint32_t PHYAddr, uint32_t PHYReg,
                                          uint32_t *pRegValue)
{
 8006296:	b580      	push	{r7, lr}
 8006298:	b086      	sub	sp, #24
 800629a:	af00      	add	r7, sp, #0
 800629c:	60f8      	str	r0, [r7, #12]
 800629e:	60b9      	str	r1, [r7, #8]
 80062a0:	607a      	str	r2, [r7, #4]
 80062a2:	603b      	str	r3, [r7, #0]
  uint32_t tickstart;
  uint32_t tmpreg;

  /* Check for the Busy flag */
  if (READ_BIT(heth->Instance->MACMDIOAR, ETH_MACMDIOAR_MB) != (uint32_t)RESET)
 80062a4:	68fb      	ldr	r3, [r7, #12]
 80062a6:	681b      	ldr	r3, [r3, #0]
 80062a8:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 80062ac:	f003 0301 	and.w	r3, r3, #1
 80062b0:	2b00      	cmp	r3, #0
 80062b2:	d001      	beq.n	80062b8 <HAL_ETH_ReadPHYRegister+0x22>
  {
    return HAL_ERROR;
 80062b4:	2301      	movs	r3, #1
 80062b6:	e03e      	b.n	8006336 <HAL_ETH_ReadPHYRegister+0xa0>
  }

  /* Get the  MACMDIOAR value */
  WRITE_REG(tmpreg, heth->Instance->MACMDIOAR);
 80062b8:	68fb      	ldr	r3, [r7, #12]
 80062ba:	681b      	ldr	r3, [r3, #0]
 80062bc:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 80062c0:	617b      	str	r3, [r7, #20]
     - Set the PHY device address
     - Set the PHY register address
     - Set the read mode
     - Set the MII Busy bit */

  MODIFY_REG(tmpreg, ETH_MACMDIOAR_PA, (PHYAddr << 21));
 80062c2:	697b      	ldr	r3, [r7, #20]
 80062c4:	f023 7278 	bic.w	r2, r3, #65011712	; 0x3e00000
 80062c8:	68bb      	ldr	r3, [r7, #8]
 80062ca:	055b      	lsls	r3, r3, #21
 80062cc:	4313      	orrs	r3, r2
 80062ce:	617b      	str	r3, [r7, #20]
  MODIFY_REG(tmpreg, ETH_MACMDIOAR_RDA, (PHYReg << 16));
 80062d0:	697b      	ldr	r3, [r7, #20]
 80062d2:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 80062d6:	687b      	ldr	r3, [r7, #4]
 80062d8:	041b      	lsls	r3, r3, #16
 80062da:	4313      	orrs	r3, r2
 80062dc:	617b      	str	r3, [r7, #20]
  MODIFY_REG(tmpreg, ETH_MACMDIOAR_MOC, ETH_MACMDIOAR_MOC_RD);
 80062de:	697b      	ldr	r3, [r7, #20]
 80062e0:	f043 030c 	orr.w	r3, r3, #12
 80062e4:	617b      	str	r3, [r7, #20]
  SET_BIT(tmpreg, ETH_MACMDIOAR_MB);
 80062e6:	697b      	ldr	r3, [r7, #20]
 80062e8:	f043 0301 	orr.w	r3, r3, #1
 80062ec:	617b      	str	r3, [r7, #20]

  /* Write the result value into the MDII Address register */
  WRITE_REG(heth->Instance->MACMDIOAR, tmpreg);
 80062ee:	68fb      	ldr	r3, [r7, #12]
 80062f0:	681b      	ldr	r3, [r3, #0]
 80062f2:	697a      	ldr	r2, [r7, #20]
 80062f4:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200

  tickstart = HAL_GetTick();
 80062f8:	f7fd fb40 	bl	800397c <HAL_GetTick>
 80062fc:	6138      	str	r0, [r7, #16]

  /* Wait for the Busy flag */
  while (READ_BIT(heth->Instance->MACMDIOAR, ETH_MACMDIOAR_MB) > 0U)
 80062fe:	e009      	b.n	8006314 <HAL_ETH_ReadPHYRegister+0x7e>
  {
    if (((HAL_GetTick() - tickstart) > ETH_MDIO_BUS_TIMEOUT))
 8006300:	f7fd fb3c 	bl	800397c <HAL_GetTick>
 8006304:	4602      	mov	r2, r0
 8006306:	693b      	ldr	r3, [r7, #16]
 8006308:	1ad3      	subs	r3, r2, r3
 800630a:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800630e:	d901      	bls.n	8006314 <HAL_ETH_ReadPHYRegister+0x7e>
    {
      return HAL_ERROR;
 8006310:	2301      	movs	r3, #1
 8006312:	e010      	b.n	8006336 <HAL_ETH_ReadPHYRegister+0xa0>
  while (READ_BIT(heth->Instance->MACMDIOAR, ETH_MACMDIOAR_MB) > 0U)
 8006314:	68fb      	ldr	r3, [r7, #12]
 8006316:	681b      	ldr	r3, [r3, #0]
 8006318:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 800631c:	f003 0301 	and.w	r3, r3, #1
 8006320:	2b00      	cmp	r3, #0
 8006322:	d1ed      	bne.n	8006300 <HAL_ETH_ReadPHYRegister+0x6a>
    }
  }

  /* Get MACMIIDR value */
  WRITE_REG(*pRegValue, (uint16_t)heth->Instance->MACMDIODR);
 8006324:	68fb      	ldr	r3, [r7, #12]
 8006326:	681b      	ldr	r3, [r3, #0]
 8006328:	f8d3 3204 	ldr.w	r3, [r3, #516]	; 0x204
 800632c:	b29b      	uxth	r3, r3
 800632e:	461a      	mov	r2, r3
 8006330:	683b      	ldr	r3, [r7, #0]
 8006332:	601a      	str	r2, [r3, #0]

  return HAL_OK;
 8006334:	2300      	movs	r3, #0
}
 8006336:	4618      	mov	r0, r3
 8006338:	3718      	adds	r7, #24
 800633a:	46bd      	mov	sp, r7
 800633c:	bd80      	pop	{r7, pc}
	...

08006340 <HAL_ETH_WritePHYRegister>:
  * @param  RegValue: the value to write
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_WritePHYRegister(ETH_HandleTypeDef *heth, uint32_t PHYAddr, uint32_t PHYReg,
                                           uint32_t RegValue)
{
 8006340:	b580      	push	{r7, lr}
 8006342:	b086      	sub	sp, #24
 8006344:	af00      	add	r7, sp, #0
 8006346:	60f8      	str	r0, [r7, #12]
 8006348:	60b9      	str	r1, [r7, #8]
 800634a:	607a      	str	r2, [r7, #4]
 800634c:	603b      	str	r3, [r7, #0]
  uint32_t tickstart;
  uint32_t tmpreg;

  /* Check for the Busy flag */
  if (READ_BIT(heth->Instance->MACMDIOAR, ETH_MACMDIOAR_MB) != (uint32_t)RESET)
 800634e:	68fb      	ldr	r3, [r7, #12]
 8006350:	681b      	ldr	r3, [r3, #0]
 8006352:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8006356:	f003 0301 	and.w	r3, r3, #1
 800635a:	2b00      	cmp	r3, #0
 800635c:	d001      	beq.n	8006362 <HAL_ETH_WritePHYRegister+0x22>
  {
    return HAL_ERROR;
 800635e:	2301      	movs	r3, #1
 8006360:	e03c      	b.n	80063dc <HAL_ETH_WritePHYRegister+0x9c>
  }

  /* Get the  MACMDIOAR value */
  WRITE_REG(tmpreg, heth->Instance->MACMDIOAR);
 8006362:	68fb      	ldr	r3, [r7, #12]
 8006364:	681b      	ldr	r3, [r3, #0]
 8006366:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 800636a:	617b      	str	r3, [r7, #20]
     - Set the PHY device address
     - Set the PHY register address
     - Set the write mode
     - Set the MII Busy bit */

  MODIFY_REG(tmpreg, ETH_MACMDIOAR_PA, (PHYAddr << 21));
 800636c:	697b      	ldr	r3, [r7, #20]
 800636e:	f023 7278 	bic.w	r2, r3, #65011712	; 0x3e00000
 8006372:	68bb      	ldr	r3, [r7, #8]
 8006374:	055b      	lsls	r3, r3, #21
 8006376:	4313      	orrs	r3, r2
 8006378:	617b      	str	r3, [r7, #20]
  MODIFY_REG(tmpreg, ETH_MACMDIOAR_RDA, (PHYReg << 16));
 800637a:	697b      	ldr	r3, [r7, #20]
 800637c:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 8006380:	687b      	ldr	r3, [r7, #4]
 8006382:	041b      	lsls	r3, r3, #16
 8006384:	4313      	orrs	r3, r2
 8006386:	617b      	str	r3, [r7, #20]
  MODIFY_REG(tmpreg, ETH_MACMDIOAR_MOC, ETH_MACMDIOAR_MOC_WR);
 8006388:	697b      	ldr	r3, [r7, #20]
 800638a:	f023 030c 	bic.w	r3, r3, #12
 800638e:	f043 0304 	orr.w	r3, r3, #4
 8006392:	617b      	str	r3, [r7, #20]
  SET_BIT(tmpreg, ETH_MACMDIOAR_MB);
 8006394:	697b      	ldr	r3, [r7, #20]
 8006396:	f043 0301 	orr.w	r3, r3, #1
 800639a:	617b      	str	r3, [r7, #20]


  /* Give the value to the MII data register */
  WRITE_REG(ETH->MACMDIODR, (uint16_t)RegValue);
 800639c:	683b      	ldr	r3, [r7, #0]
 800639e:	b29a      	uxth	r2, r3
 80063a0:	4b10      	ldr	r3, [pc, #64]	; (80063e4 <HAL_ETH_WritePHYRegister+0xa4>)
 80063a2:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204

  /* Write the result value into the MII Address register */
  WRITE_REG(ETH->MACMDIOAR, tmpreg);
 80063a6:	4a0f      	ldr	r2, [pc, #60]	; (80063e4 <HAL_ETH_WritePHYRegister+0xa4>)
 80063a8:	697b      	ldr	r3, [r7, #20]
 80063aa:	f8c2 3200 	str.w	r3, [r2, #512]	; 0x200

  tickstart = HAL_GetTick();
 80063ae:	f7fd fae5 	bl	800397c <HAL_GetTick>
 80063b2:	6138      	str	r0, [r7, #16]

  /* Wait for the Busy flag */
  while (READ_BIT(heth->Instance->MACMDIOAR, ETH_MACMDIOAR_MB) > 0U)
 80063b4:	e009      	b.n	80063ca <HAL_ETH_WritePHYRegister+0x8a>
  {
    if (((HAL_GetTick() - tickstart) > ETH_MDIO_BUS_TIMEOUT))
 80063b6:	f7fd fae1 	bl	800397c <HAL_GetTick>
 80063ba:	4602      	mov	r2, r0
 80063bc:	693b      	ldr	r3, [r7, #16]
 80063be:	1ad3      	subs	r3, r2, r3
 80063c0:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80063c4:	d901      	bls.n	80063ca <HAL_ETH_WritePHYRegister+0x8a>
    {
      return HAL_ERROR;
 80063c6:	2301      	movs	r3, #1
 80063c8:	e008      	b.n	80063dc <HAL_ETH_WritePHYRegister+0x9c>
  while (READ_BIT(heth->Instance->MACMDIOAR, ETH_MACMDIOAR_MB) > 0U)
 80063ca:	68fb      	ldr	r3, [r7, #12]
 80063cc:	681b      	ldr	r3, [r3, #0]
 80063ce:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 80063d2:	f003 0301 	and.w	r3, r3, #1
 80063d6:	2b00      	cmp	r3, #0
 80063d8:	d1ed      	bne.n	80063b6 <HAL_ETH_WritePHYRegister+0x76>
    }
  }

  return HAL_OK;
 80063da:	2300      	movs	r3, #0
}
 80063dc:	4618      	mov	r0, r3
 80063de:	3718      	adds	r7, #24
 80063e0:	46bd      	mov	sp, r7
 80063e2:	bd80      	pop	{r7, pc}
 80063e4:	40028000 	.word	0x40028000

080063e8 <HAL_ETH_GetMACConfig>:
  * @param  macconf: pointer to a ETH_MACConfigTypeDef structure that will hold
  *         the configuration of the MAC.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_ETH_GetMACConfig(ETH_HandleTypeDef *heth, ETH_MACConfigTypeDef *macconf)
{
 80063e8:	b480      	push	{r7}
 80063ea:	b083      	sub	sp, #12
 80063ec:	af00      	add	r7, sp, #0
 80063ee:	6078      	str	r0, [r7, #4]
 80063f0:	6039      	str	r1, [r7, #0]
  if (macconf == NULL)
 80063f2:	683b      	ldr	r3, [r7, #0]
 80063f4:	2b00      	cmp	r3, #0
 80063f6:	d101      	bne.n	80063fc <HAL_ETH_GetMACConfig+0x14>
  {
    return HAL_ERROR;
 80063f8:	2301      	movs	r3, #1
 80063fa:	e1c3      	b.n	8006784 <HAL_ETH_GetMACConfig+0x39c>
  }

  /* Get MAC parameters */
  macconf->PreambleLength = READ_BIT(heth->Instance->MACCR, ETH_MACCR_PRELEN);
 80063fc:	687b      	ldr	r3, [r7, #4]
 80063fe:	681b      	ldr	r3, [r3, #0]
 8006400:	681b      	ldr	r3, [r3, #0]
 8006402:	f003 020c 	and.w	r2, r3, #12
 8006406:	683b      	ldr	r3, [r7, #0]
 8006408:	62da      	str	r2, [r3, #44]	; 0x2c
  macconf->DeferralCheck = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_DC) >> 4) > 0U) ? ENABLE : DISABLE;
 800640a:	687b      	ldr	r3, [r7, #4]
 800640c:	681b      	ldr	r3, [r3, #0]
 800640e:	681b      	ldr	r3, [r3, #0]
 8006410:	f003 0310 	and.w	r3, r3, #16
 8006414:	2b00      	cmp	r3, #0
 8006416:	bf14      	ite	ne
 8006418:	2301      	movne	r3, #1
 800641a:	2300      	moveq	r3, #0
 800641c:	b2db      	uxtb	r3, r3
 800641e:	461a      	mov	r2, r3
 8006420:	683b      	ldr	r3, [r7, #0]
 8006422:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
  macconf->BackOffLimit = READ_BIT(heth->Instance->MACCR, ETH_MACCR_BL);
 8006426:	687b      	ldr	r3, [r7, #4]
 8006428:	681b      	ldr	r3, [r3, #0]
 800642a:	681b      	ldr	r3, [r3, #0]
 800642c:	f003 0260 	and.w	r2, r3, #96	; 0x60
 8006430:	683b      	ldr	r3, [r7, #0]
 8006432:	625a      	str	r2, [r3, #36]	; 0x24
  macconf->RetryTransmission = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_DR) >> 8) == 0U) ? ENABLE : DISABLE;
 8006434:	687b      	ldr	r3, [r7, #4]
 8006436:	681b      	ldr	r3, [r3, #0]
 8006438:	681b      	ldr	r3, [r3, #0]
 800643a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800643e:	2b00      	cmp	r3, #0
 8006440:	bf0c      	ite	eq
 8006442:	2301      	moveq	r3, #1
 8006444:	2300      	movne	r3, #0
 8006446:	b2db      	uxtb	r3, r3
 8006448:	461a      	mov	r2, r3
 800644a:	683b      	ldr	r3, [r7, #0]
 800644c:	f883 2020 	strb.w	r2, [r3, #32]
  macconf->CarrierSenseDuringTransmit = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_DCRS) >> 9) > 0U)
 8006450:	687b      	ldr	r3, [r7, #4]
 8006452:	681b      	ldr	r3, [r3, #0]
 8006454:	681b      	ldr	r3, [r3, #0]
 8006456:	f403 7300 	and.w	r3, r3, #512	; 0x200
                                        ? ENABLE : DISABLE;
 800645a:	2b00      	cmp	r3, #0
 800645c:	bf14      	ite	ne
 800645e:	2301      	movne	r3, #1
 8006460:	2300      	moveq	r3, #0
 8006462:	b2db      	uxtb	r3, r3
 8006464:	461a      	mov	r2, r3
  macconf->CarrierSenseDuringTransmit = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_DCRS) >> 9) > 0U)
 8006466:	683b      	ldr	r3, [r7, #0]
 8006468:	77da      	strb	r2, [r3, #31]
  macconf->ReceiveOwn = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_DO) >> 10) == 0U) ? ENABLE : DISABLE;
 800646a:	687b      	ldr	r3, [r7, #4]
 800646c:	681b      	ldr	r3, [r3, #0]
 800646e:	681b      	ldr	r3, [r3, #0]
 8006470:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8006474:	2b00      	cmp	r3, #0
 8006476:	bf0c      	ite	eq
 8006478:	2301      	moveq	r3, #1
 800647a:	2300      	movne	r3, #0
 800647c:	b2db      	uxtb	r3, r3
 800647e:	461a      	mov	r2, r3
 8006480:	683b      	ldr	r3, [r7, #0]
 8006482:	779a      	strb	r2, [r3, #30]
  macconf->CarrierSenseBeforeTransmit = ((READ_BIT(heth->Instance->MACCR,
 8006484:	687b      	ldr	r3, [r7, #4]
 8006486:	681b      	ldr	r3, [r3, #0]
 8006488:	681b      	ldr	r3, [r3, #0]
                                                   ETH_MACCR_ECRSFD) >> 11) > 0U) ? ENABLE : DISABLE;
 800648a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800648e:	2b00      	cmp	r3, #0
 8006490:	bf14      	ite	ne
 8006492:	2301      	movne	r3, #1
 8006494:	2300      	moveq	r3, #0
 8006496:	b2db      	uxtb	r3, r3
 8006498:	461a      	mov	r2, r3
  macconf->CarrierSenseBeforeTransmit = ((READ_BIT(heth->Instance->MACCR,
 800649a:	683b      	ldr	r3, [r7, #0]
 800649c:	775a      	strb	r2, [r3, #29]
  macconf->LoopbackMode = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_LM) >> 12) > 0U) ? ENABLE : DISABLE;
 800649e:	687b      	ldr	r3, [r7, #4]
 80064a0:	681b      	ldr	r3, [r3, #0]
 80064a2:	681b      	ldr	r3, [r3, #0]
 80064a4:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80064a8:	2b00      	cmp	r3, #0
 80064aa:	bf14      	ite	ne
 80064ac:	2301      	movne	r3, #1
 80064ae:	2300      	moveq	r3, #0
 80064b0:	b2db      	uxtb	r3, r3
 80064b2:	461a      	mov	r2, r3
 80064b4:	683b      	ldr	r3, [r7, #0]
 80064b6:	771a      	strb	r2, [r3, #28]
  macconf->DuplexMode = READ_BIT(heth->Instance->MACCR, ETH_MACCR_DM);
 80064b8:	687b      	ldr	r3, [r7, #4]
 80064ba:	681b      	ldr	r3, [r3, #0]
 80064bc:	681b      	ldr	r3, [r3, #0]
 80064be:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 80064c2:	683b      	ldr	r3, [r7, #0]
 80064c4:	619a      	str	r2, [r3, #24]
  macconf->Speed = READ_BIT(heth->Instance->MACCR, ETH_MACCR_FES);
 80064c6:	687b      	ldr	r3, [r7, #4]
 80064c8:	681b      	ldr	r3, [r3, #0]
 80064ca:	681b      	ldr	r3, [r3, #0]
 80064cc:	f403 4280 	and.w	r2, r3, #16384	; 0x4000
 80064d0:	683b      	ldr	r3, [r7, #0]
 80064d2:	615a      	str	r2, [r3, #20]
  macconf->JumboPacket = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_JE) >> 16) > 0U) ? ENABLE : DISABLE;
 80064d4:	687b      	ldr	r3, [r7, #4]
 80064d6:	681b      	ldr	r3, [r3, #0]
 80064d8:	681b      	ldr	r3, [r3, #0]
 80064da:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80064de:	2b00      	cmp	r3, #0
 80064e0:	bf14      	ite	ne
 80064e2:	2301      	movne	r3, #1
 80064e4:	2300      	moveq	r3, #0
 80064e6:	b2db      	uxtb	r3, r3
 80064e8:	461a      	mov	r2, r3
 80064ea:	683b      	ldr	r3, [r7, #0]
 80064ec:	749a      	strb	r2, [r3, #18]
  macconf->Jabber = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_JD) >> 17) == 0U) ? ENABLE : DISABLE;
 80064ee:	687b      	ldr	r3, [r7, #4]
 80064f0:	681b      	ldr	r3, [r3, #0]
 80064f2:	681b      	ldr	r3, [r3, #0]
 80064f4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80064f8:	2b00      	cmp	r3, #0
 80064fa:	bf0c      	ite	eq
 80064fc:	2301      	moveq	r3, #1
 80064fe:	2300      	movne	r3, #0
 8006500:	b2db      	uxtb	r3, r3
 8006502:	461a      	mov	r2, r3
 8006504:	683b      	ldr	r3, [r7, #0]
 8006506:	745a      	strb	r2, [r3, #17]
  macconf->Watchdog = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_WD) >> 19) == 0U) ? ENABLE : DISABLE;
 8006508:	687b      	ldr	r3, [r7, #4]
 800650a:	681b      	ldr	r3, [r3, #0]
 800650c:	681b      	ldr	r3, [r3, #0]
 800650e:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8006512:	2b00      	cmp	r3, #0
 8006514:	bf0c      	ite	eq
 8006516:	2301      	moveq	r3, #1
 8006518:	2300      	movne	r3, #0
 800651a:	b2db      	uxtb	r3, r3
 800651c:	461a      	mov	r2, r3
 800651e:	683b      	ldr	r3, [r7, #0]
 8006520:	741a      	strb	r2, [r3, #16]
  macconf->AutomaticPadCRCStrip = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_ACS) >> 20) > 0U) ? ENABLE : DISABLE;
 8006522:	687b      	ldr	r3, [r7, #4]
 8006524:	681b      	ldr	r3, [r3, #0]
 8006526:	681b      	ldr	r3, [r3, #0]
 8006528:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800652c:	2b00      	cmp	r3, #0
 800652e:	bf14      	ite	ne
 8006530:	2301      	movne	r3, #1
 8006532:	2300      	moveq	r3, #0
 8006534:	b2db      	uxtb	r3, r3
 8006536:	461a      	mov	r2, r3
 8006538:	683b      	ldr	r3, [r7, #0]
 800653a:	73da      	strb	r2, [r3, #15]
  macconf->CRCStripTypePacket = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_CST) >> 21) > 0U) ? ENABLE : DISABLE;
 800653c:	687b      	ldr	r3, [r7, #4]
 800653e:	681b      	ldr	r3, [r3, #0]
 8006540:	681b      	ldr	r3, [r3, #0]
 8006542:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8006546:	2b00      	cmp	r3, #0
 8006548:	bf14      	ite	ne
 800654a:	2301      	movne	r3, #1
 800654c:	2300      	moveq	r3, #0
 800654e:	b2db      	uxtb	r3, r3
 8006550:	461a      	mov	r2, r3
 8006552:	683b      	ldr	r3, [r7, #0]
 8006554:	739a      	strb	r2, [r3, #14]
  macconf->Support2KPacket = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_S2KP) >> 22) > 0U) ? ENABLE : DISABLE;
 8006556:	687b      	ldr	r3, [r7, #4]
 8006558:	681b      	ldr	r3, [r3, #0]
 800655a:	681b      	ldr	r3, [r3, #0]
 800655c:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8006560:	2b00      	cmp	r3, #0
 8006562:	bf14      	ite	ne
 8006564:	2301      	movne	r3, #1
 8006566:	2300      	moveq	r3, #0
 8006568:	b2db      	uxtb	r3, r3
 800656a:	461a      	mov	r2, r3
 800656c:	683b      	ldr	r3, [r7, #0]
 800656e:	735a      	strb	r2, [r3, #13]
  macconf->GiantPacketSizeLimitControl = ((READ_BIT(heth->Instance->MACCR,
 8006570:	687b      	ldr	r3, [r7, #4]
 8006572:	681b      	ldr	r3, [r3, #0]
 8006574:	681b      	ldr	r3, [r3, #0]
                                                    ETH_MACCR_GPSLCE) >> 23) > 0U) ? ENABLE : DISABLE;
 8006576:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800657a:	2b00      	cmp	r3, #0
 800657c:	bf14      	ite	ne
 800657e:	2301      	movne	r3, #1
 8006580:	2300      	moveq	r3, #0
 8006582:	b2db      	uxtb	r3, r3
 8006584:	461a      	mov	r2, r3
  macconf->GiantPacketSizeLimitControl = ((READ_BIT(heth->Instance->MACCR,
 8006586:	683b      	ldr	r3, [r7, #0]
 8006588:	731a      	strb	r2, [r3, #12]
  macconf->InterPacketGapVal = READ_BIT(heth->Instance->MACCR, ETH_MACCR_IPG);
 800658a:	687b      	ldr	r3, [r7, #4]
 800658c:	681b      	ldr	r3, [r3, #0]
 800658e:	681b      	ldr	r3, [r3, #0]
 8006590:	f003 62e0 	and.w	r2, r3, #117440512	; 0x7000000
 8006594:	683b      	ldr	r3, [r7, #0]
 8006596:	609a      	str	r2, [r3, #8]
  macconf->ChecksumOffload = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_IPC) >> 27) > 0U) ? ENABLE : DISABLE;
 8006598:	687b      	ldr	r3, [r7, #4]
 800659a:	681b      	ldr	r3, [r3, #0]
 800659c:	681b      	ldr	r3, [r3, #0]
 800659e:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80065a2:	2b00      	cmp	r3, #0
 80065a4:	bf14      	ite	ne
 80065a6:	2301      	movne	r3, #1
 80065a8:	2300      	moveq	r3, #0
 80065aa:	b2db      	uxtb	r3, r3
 80065ac:	461a      	mov	r2, r3
 80065ae:	683b      	ldr	r3, [r7, #0]
 80065b0:	711a      	strb	r2, [r3, #4]
  macconf->SourceAddrControl = READ_BIT(heth->Instance->MACCR, ETH_MACCR_SARC);
 80065b2:	687b      	ldr	r3, [r7, #4]
 80065b4:	681b      	ldr	r3, [r3, #0]
 80065b6:	681b      	ldr	r3, [r3, #0]
 80065b8:	f003 42e0 	and.w	r2, r3, #1879048192	; 0x70000000
 80065bc:	683b      	ldr	r3, [r7, #0]
 80065be:	601a      	str	r2, [r3, #0]

  macconf->GiantPacketSizeLimit = READ_BIT(heth->Instance->MACECR, ETH_MACECR_GPSL);
 80065c0:	687b      	ldr	r3, [r7, #4]
 80065c2:	681b      	ldr	r3, [r3, #0]
 80065c4:	685b      	ldr	r3, [r3, #4]
 80065c6:	f3c3 020d 	ubfx	r2, r3, #0, #14
 80065ca:	683b      	ldr	r3, [r7, #0]
 80065cc:	635a      	str	r2, [r3, #52]	; 0x34
  macconf->CRCCheckingRxPackets = ((READ_BIT(heth->Instance->MACECR, ETH_MACECR_DCRCC) >> 16) == 0U) ? ENABLE : DISABLE;
 80065ce:	687b      	ldr	r3, [r7, #4]
 80065d0:	681b      	ldr	r3, [r3, #0]
 80065d2:	685b      	ldr	r3, [r3, #4]
 80065d4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80065d8:	2b00      	cmp	r3, #0
 80065da:	bf0c      	ite	eq
 80065dc:	2301      	moveq	r3, #1
 80065de:	2300      	movne	r3, #0
 80065e0:	b2db      	uxtb	r3, r3
 80065e2:	461a      	mov	r2, r3
 80065e4:	683b      	ldr	r3, [r7, #0]
 80065e6:	f883 2032 	strb.w	r2, [r3, #50]	; 0x32
  macconf->SlowProtocolDetect = ((READ_BIT(heth->Instance->MACECR, ETH_MACECR_SPEN) >> 17) > 0U) ? ENABLE : DISABLE;
 80065ea:	687b      	ldr	r3, [r7, #4]
 80065ec:	681b      	ldr	r3, [r3, #0]
 80065ee:	685b      	ldr	r3, [r3, #4]
 80065f0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80065f4:	2b00      	cmp	r3, #0
 80065f6:	bf14      	ite	ne
 80065f8:	2301      	movne	r3, #1
 80065fa:	2300      	moveq	r3, #0
 80065fc:	b2db      	uxtb	r3, r3
 80065fe:	461a      	mov	r2, r3
 8006600:	683b      	ldr	r3, [r7, #0]
 8006602:	f883 2031 	strb.w	r2, [r3, #49]	; 0x31
  macconf->UnicastSlowProtocolPacketDetect = ((READ_BIT(heth->Instance->MACECR,
 8006606:	687b      	ldr	r3, [r7, #4]
 8006608:	681b      	ldr	r3, [r3, #0]
 800660a:	685b      	ldr	r3, [r3, #4]
                                                        ETH_MACECR_USP) >> 18) > 0U) ? ENABLE : DISABLE;
 800660c:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8006610:	2b00      	cmp	r3, #0
 8006612:	bf14      	ite	ne
 8006614:	2301      	movne	r3, #1
 8006616:	2300      	moveq	r3, #0
 8006618:	b2db      	uxtb	r3, r3
 800661a:	461a      	mov	r2, r3
  macconf->UnicastSlowProtocolPacketDetect = ((READ_BIT(heth->Instance->MACECR,
 800661c:	683b      	ldr	r3, [r7, #0]
 800661e:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  macconf->ExtendedInterPacketGap = ((READ_BIT(heth->Instance->MACECR, ETH_MACECR_EIPGEN) >> 24) > 0U)
 8006622:	687b      	ldr	r3, [r7, #4]
 8006624:	681b      	ldr	r3, [r3, #0]
 8006626:	685b      	ldr	r3, [r3, #4]
 8006628:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
                                    ? ENABLE : DISABLE;
 800662c:	2b00      	cmp	r3, #0
 800662e:	bf14      	ite	ne
 8006630:	2301      	movne	r3, #1
 8006632:	2300      	moveq	r3, #0
 8006634:	b2db      	uxtb	r3, r3
 8006636:	461a      	mov	r2, r3
  macconf->ExtendedInterPacketGap = ((READ_BIT(heth->Instance->MACECR, ETH_MACECR_EIPGEN) >> 24) > 0U)
 8006638:	683b      	ldr	r3, [r7, #0]
 800663a:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  macconf->ExtendedInterPacketGapVal = READ_BIT(heth->Instance->MACECR, ETH_MACECR_EIPG) >> 25;
 800663e:	687b      	ldr	r3, [r7, #4]
 8006640:	681b      	ldr	r3, [r3, #0]
 8006642:	685b      	ldr	r3, [r3, #4]
 8006644:	0e5b      	lsrs	r3, r3, #25
 8006646:	f003 021f 	and.w	r2, r3, #31
 800664a:	683b      	ldr	r3, [r7, #0]
 800664c:	63da      	str	r2, [r3, #60]	; 0x3c


  macconf->ProgrammableWatchdog = ((READ_BIT(heth->Instance->MACWTR, ETH_MACWTR_PWE) >> 8) > 0U) ? ENABLE : DISABLE;
 800664e:	687b      	ldr	r3, [r7, #4]
 8006650:	681b      	ldr	r3, [r3, #0]
 8006652:	68db      	ldr	r3, [r3, #12]
 8006654:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006658:	2b00      	cmp	r3, #0
 800665a:	bf14      	ite	ne
 800665c:	2301      	movne	r3, #1
 800665e:	2300      	moveq	r3, #0
 8006660:	b2db      	uxtb	r3, r3
 8006662:	461a      	mov	r2, r3
 8006664:	683b      	ldr	r3, [r7, #0]
 8006666:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
  macconf->WatchdogTimeout = READ_BIT(heth->Instance->MACWTR, ETH_MACWTR_WTO);
 800666a:	687b      	ldr	r3, [r7, #4]
 800666c:	681b      	ldr	r3, [r3, #0]
 800666e:	68db      	ldr	r3, [r3, #12]
 8006670:	f003 020f 	and.w	r2, r3, #15
 8006674:	683b      	ldr	r3, [r7, #0]
 8006676:	645a      	str	r2, [r3, #68]	; 0x44

  macconf->TransmitFlowControl = ((READ_BIT(heth->Instance->MACTFCR, ETH_MACTFCR_TFE) >> 1) > 0U) ? ENABLE : DISABLE;
 8006678:	687b      	ldr	r3, [r7, #4]
 800667a:	681b      	ldr	r3, [r3, #0]
 800667c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800667e:	f003 0302 	and.w	r3, r3, #2
 8006682:	2b00      	cmp	r3, #0
 8006684:	bf14      	ite	ne
 8006686:	2301      	movne	r3, #1
 8006688:	2300      	moveq	r3, #0
 800668a:	b2db      	uxtb	r3, r3
 800668c:	461a      	mov	r2, r3
 800668e:	683b      	ldr	r3, [r7, #0]
 8006690:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54
  macconf->ZeroQuantaPause = ((READ_BIT(heth->Instance->MACTFCR, ETH_MACTFCR_DZPQ) >> 7) == 0U) ? ENABLE : DISABLE;
 8006694:	687b      	ldr	r3, [r7, #4]
 8006696:	681b      	ldr	r3, [r3, #0]
 8006698:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800669a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800669e:	2b00      	cmp	r3, #0
 80066a0:	bf0c      	ite	eq
 80066a2:	2301      	moveq	r3, #1
 80066a4:	2300      	movne	r3, #0
 80066a6:	b2db      	uxtb	r3, r3
 80066a8:	461a      	mov	r2, r3
 80066aa:	683b      	ldr	r3, [r7, #0]
 80066ac:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
  macconf->PauseLowThreshold = READ_BIT(heth->Instance->MACTFCR, ETH_MACTFCR_PLT);
 80066b0:	687b      	ldr	r3, [r7, #4]
 80066b2:	681b      	ldr	r3, [r3, #0]
 80066b4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80066b6:	f003 0270 	and.w	r2, r3, #112	; 0x70
 80066ba:	683b      	ldr	r3, [r7, #0]
 80066bc:	651a      	str	r2, [r3, #80]	; 0x50
  macconf->PauseTime = (READ_BIT(heth->Instance->MACTFCR, ETH_MACTFCR_PT) >> 16);
 80066be:	687b      	ldr	r3, [r7, #4]
 80066c0:	681b      	ldr	r3, [r3, #0]
 80066c2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80066c4:	0c1b      	lsrs	r3, r3, #16
 80066c6:	b29a      	uxth	r2, r3
 80066c8:	683b      	ldr	r3, [r7, #0]
 80066ca:	649a      	str	r2, [r3, #72]	; 0x48


  macconf->ReceiveFlowControl = (READ_BIT(heth->Instance->MACRFCR, ETH_MACRFCR_RFE) > 0U) ? ENABLE : DISABLE;
 80066cc:	687b      	ldr	r3, [r7, #4]
 80066ce:	681b      	ldr	r3, [r3, #0]
 80066d0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80066d4:	f003 0301 	and.w	r3, r3, #1
 80066d8:	2b00      	cmp	r3, #0
 80066da:	bf14      	ite	ne
 80066dc:	2301      	movne	r3, #1
 80066de:	2300      	moveq	r3, #0
 80066e0:	b2db      	uxtb	r3, r3
 80066e2:	461a      	mov	r2, r3
 80066e4:	683b      	ldr	r3, [r7, #0]
 80066e6:	f883 2056 	strb.w	r2, [r3, #86]	; 0x56
  macconf->UnicastPausePacketDetect = ((READ_BIT(heth->Instance->MACRFCR, ETH_MACRFCR_UP) >> 1) > 0U)
 80066ea:	687b      	ldr	r3, [r7, #4]
 80066ec:	681b      	ldr	r3, [r3, #0]
 80066ee:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80066f2:	f003 0302 	and.w	r3, r3, #2
                                      ? ENABLE : DISABLE;
 80066f6:	2b00      	cmp	r3, #0
 80066f8:	bf14      	ite	ne
 80066fa:	2301      	movne	r3, #1
 80066fc:	2300      	moveq	r3, #0
 80066fe:	b2db      	uxtb	r3, r3
 8006700:	461a      	mov	r2, r3
  macconf->UnicastPausePacketDetect = ((READ_BIT(heth->Instance->MACRFCR, ETH_MACRFCR_UP) >> 1) > 0U)
 8006702:	683b      	ldr	r3, [r7, #0]
 8006704:	f883 2055 	strb.w	r2, [r3, #85]	; 0x55

  macconf->TransmitQueueMode = READ_BIT(heth->Instance->MTLTQOMR, (ETH_MTLTQOMR_TTC | ETH_MTLTQOMR_TSF));
 8006708:	687b      	ldr	r3, [r7, #4]
 800670a:	681b      	ldr	r3, [r3, #0]
 800670c:	f8d3 3d00 	ldr.w	r3, [r3, #3328]	; 0xd00
 8006710:	f003 0272 	and.w	r2, r3, #114	; 0x72
 8006714:	683b      	ldr	r3, [r7, #0]
 8006716:	659a      	str	r2, [r3, #88]	; 0x58

  macconf->ReceiveQueueMode = READ_BIT(heth->Instance->MTLRQOMR, (ETH_MTLRQOMR_RTC | ETH_MTLRQOMR_RSF));
 8006718:	687b      	ldr	r3, [r7, #4]
 800671a:	681b      	ldr	r3, [r3, #0]
 800671c:	f8d3 3d30 	ldr.w	r3, [r3, #3376]	; 0xd30
 8006720:	f003 0223 	and.w	r2, r3, #35	; 0x23
 8006724:	683b      	ldr	r3, [r7, #0]
 8006726:	65da      	str	r2, [r3, #92]	; 0x5c
  macconf->ForwardRxUndersizedGoodPacket = ((READ_BIT(heth->Instance->MTLRQOMR,
 8006728:	687b      	ldr	r3, [r7, #4]
 800672a:	681b      	ldr	r3, [r3, #0]
 800672c:	f8d3 3d30 	ldr.w	r3, [r3, #3376]	; 0xd30
                                                      ETH_MTLRQOMR_FUP) >> 3) > 0U) ? ENABLE : DISABLE;
 8006730:	f003 0308 	and.w	r3, r3, #8
 8006734:	2b00      	cmp	r3, #0
 8006736:	bf14      	ite	ne
 8006738:	2301      	movne	r3, #1
 800673a:	2300      	moveq	r3, #0
 800673c:	b2db      	uxtb	r3, r3
 800673e:	461a      	mov	r2, r3
  macconf->ForwardRxUndersizedGoodPacket = ((READ_BIT(heth->Instance->MTLRQOMR,
 8006740:	683b      	ldr	r3, [r7, #0]
 8006742:	f883 2062 	strb.w	r2, [r3, #98]	; 0x62
  macconf->ForwardRxErrorPacket = ((READ_BIT(heth->Instance->MTLRQOMR, ETH_MTLRQOMR_FEP) >> 4) > 0U) ? ENABLE : DISABLE;
 8006746:	687b      	ldr	r3, [r7, #4]
 8006748:	681b      	ldr	r3, [r3, #0]
 800674a:	f8d3 3d30 	ldr.w	r3, [r3, #3376]	; 0xd30
 800674e:	f003 0310 	and.w	r3, r3, #16
 8006752:	2b00      	cmp	r3, #0
 8006754:	bf14      	ite	ne
 8006756:	2301      	movne	r3, #1
 8006758:	2300      	moveq	r3, #0
 800675a:	b2db      	uxtb	r3, r3
 800675c:	461a      	mov	r2, r3
 800675e:	683b      	ldr	r3, [r7, #0]
 8006760:	f883 2061 	strb.w	r2, [r3, #97]	; 0x61
  macconf->DropTCPIPChecksumErrorPacket = ((READ_BIT(heth->Instance->MTLRQOMR,
 8006764:	687b      	ldr	r3, [r7, #4]
 8006766:	681b      	ldr	r3, [r3, #0]
 8006768:	f8d3 3d30 	ldr.w	r3, [r3, #3376]	; 0xd30
                                                     ETH_MTLRQOMR_DISTCPEF) >> 6) == 0U) ? ENABLE : DISABLE;
 800676c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006770:	2b00      	cmp	r3, #0
 8006772:	bf0c      	ite	eq
 8006774:	2301      	moveq	r3, #1
 8006776:	2300      	movne	r3, #0
 8006778:	b2db      	uxtb	r3, r3
 800677a:	461a      	mov	r2, r3
  macconf->DropTCPIPChecksumErrorPacket = ((READ_BIT(heth->Instance->MTLRQOMR,
 800677c:	683b      	ldr	r3, [r7, #0]
 800677e:	f883 2060 	strb.w	r2, [r3, #96]	; 0x60

  return HAL_OK;
 8006782:	2300      	movs	r3, #0
}
 8006784:	4618      	mov	r0, r3
 8006786:	370c      	adds	r7, #12
 8006788:	46bd      	mov	sp, r7
 800678a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800678e:	4770      	bx	lr

08006790 <HAL_ETH_SetMACConfig>:
  * @param  macconf: pointer to a ETH_MACConfigTypeDef structure that contains
  *         the configuration of the MAC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_SetMACConfig(ETH_HandleTypeDef *heth,  ETH_MACConfigTypeDef *macconf)
{
 8006790:	b580      	push	{r7, lr}
 8006792:	b082      	sub	sp, #8
 8006794:	af00      	add	r7, sp, #0
 8006796:	6078      	str	r0, [r7, #4]
 8006798:	6039      	str	r1, [r7, #0]
  if (macconf == NULL)
 800679a:	683b      	ldr	r3, [r7, #0]
 800679c:	2b00      	cmp	r3, #0
 800679e:	d101      	bne.n	80067a4 <HAL_ETH_SetMACConfig+0x14>
  {
    return HAL_ERROR;
 80067a0:	2301      	movs	r3, #1
 80067a2:	e00b      	b.n	80067bc <HAL_ETH_SetMACConfig+0x2c>
  }

  if (heth->gState == HAL_ETH_STATE_READY)
 80067a4:	687b      	ldr	r3, [r7, #4]
 80067a6:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80067aa:	2b10      	cmp	r3, #16
 80067ac:	d105      	bne.n	80067ba <HAL_ETH_SetMACConfig+0x2a>
  {
    ETH_SetMACConfig(heth, macconf);
 80067ae:	6839      	ldr	r1, [r7, #0]
 80067b0:	6878      	ldr	r0, [r7, #4]
 80067b2:	f000 f85f 	bl	8006874 <ETH_SetMACConfig>

    return HAL_OK;
 80067b6:	2300      	movs	r3, #0
 80067b8:	e000      	b.n	80067bc <HAL_ETH_SetMACConfig+0x2c>
  }
  else
  {
    return HAL_ERROR;
 80067ba:	2301      	movs	r3, #1
  }
}
 80067bc:	4618      	mov	r0, r3
 80067be:	3708      	adds	r7, #8
 80067c0:	46bd      	mov	sp, r7
 80067c2:	bd80      	pop	{r7, pc}

080067c4 <HAL_ETH_SetMDIOClockRange>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
void HAL_ETH_SetMDIOClockRange(ETH_HandleTypeDef *heth)
{
 80067c4:	b580      	push	{r7, lr}
 80067c6:	b084      	sub	sp, #16
 80067c8:	af00      	add	r7, sp, #0
 80067ca:	6078      	str	r0, [r7, #4]
  uint32_t hclk;
  uint32_t tmpreg;

  /* Get the ETHERNET MACMDIOAR value */
  tmpreg = (heth->Instance)->MACMDIOAR;
 80067cc:	687b      	ldr	r3, [r7, #4]
 80067ce:	681b      	ldr	r3, [r3, #0]
 80067d0:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 80067d4:	60fb      	str	r3, [r7, #12]

  /* Clear CSR Clock Range bits */
  tmpreg &= ~ETH_MACMDIOAR_CR;
 80067d6:	68fb      	ldr	r3, [r7, #12]
 80067d8:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 80067dc:	60fb      	str	r3, [r7, #12]

  /* Get hclk frequency value */
  hclk = HAL_RCC_GetHCLKFreq();
 80067de:	f003 fec3 	bl	800a568 <HAL_RCC_GetHCLKFreq>
 80067e2:	60b8      	str	r0, [r7, #8]

  /* Set CR bits depending on hclk value */
  if ((hclk >= 20000000U) && (hclk < 35000000U))
 80067e4:	68bb      	ldr	r3, [r7, #8]
 80067e6:	4a1e      	ldr	r2, [pc, #120]	; (8006860 <HAL_ETH_SetMDIOClockRange+0x9c>)
 80067e8:	4293      	cmp	r3, r2
 80067ea:	d908      	bls.n	80067fe <HAL_ETH_SetMDIOClockRange+0x3a>
 80067ec:	68bb      	ldr	r3, [r7, #8]
 80067ee:	4a1d      	ldr	r2, [pc, #116]	; (8006864 <HAL_ETH_SetMDIOClockRange+0xa0>)
 80067f0:	4293      	cmp	r3, r2
 80067f2:	d804      	bhi.n	80067fe <HAL_ETH_SetMDIOClockRange+0x3a>
  {
    /* CSR Clock Range between 20-35 MHz */
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV16;
 80067f4:	68fb      	ldr	r3, [r7, #12]
 80067f6:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80067fa:	60fb      	str	r3, [r7, #12]
 80067fc:	e027      	b.n	800684e <HAL_ETH_SetMDIOClockRange+0x8a>
  }
  else if ((hclk >= 35000000U) && (hclk < 60000000U))
 80067fe:	68bb      	ldr	r3, [r7, #8]
 8006800:	4a18      	ldr	r2, [pc, #96]	; (8006864 <HAL_ETH_SetMDIOClockRange+0xa0>)
 8006802:	4293      	cmp	r3, r2
 8006804:	d908      	bls.n	8006818 <HAL_ETH_SetMDIOClockRange+0x54>
 8006806:	68bb      	ldr	r3, [r7, #8]
 8006808:	4a17      	ldr	r2, [pc, #92]	; (8006868 <HAL_ETH_SetMDIOClockRange+0xa4>)
 800680a:	4293      	cmp	r3, r2
 800680c:	d204      	bcs.n	8006818 <HAL_ETH_SetMDIOClockRange+0x54>
  {
    /* CSR Clock Range between 35-60 MHz */
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV26;
 800680e:	68fb      	ldr	r3, [r7, #12]
 8006810:	f443 7340 	orr.w	r3, r3, #768	; 0x300
 8006814:	60fb      	str	r3, [r7, #12]
 8006816:	e01a      	b.n	800684e <HAL_ETH_SetMDIOClockRange+0x8a>
  }
  else if ((hclk >= 60000000U) && (hclk < 100000000U))
 8006818:	68bb      	ldr	r3, [r7, #8]
 800681a:	4a13      	ldr	r2, [pc, #76]	; (8006868 <HAL_ETH_SetMDIOClockRange+0xa4>)
 800681c:	4293      	cmp	r3, r2
 800681e:	d303      	bcc.n	8006828 <HAL_ETH_SetMDIOClockRange+0x64>
 8006820:	68bb      	ldr	r3, [r7, #8]
 8006822:	4a12      	ldr	r2, [pc, #72]	; (800686c <HAL_ETH_SetMDIOClockRange+0xa8>)
 8006824:	4293      	cmp	r3, r2
 8006826:	d911      	bls.n	800684c <HAL_ETH_SetMDIOClockRange+0x88>
  {
    /* CSR Clock Range between 60-100 MHz */
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV42;
  }
  else if ((hclk >= 100000000U) && (hclk < 150000000U))
 8006828:	68bb      	ldr	r3, [r7, #8]
 800682a:	4a10      	ldr	r2, [pc, #64]	; (800686c <HAL_ETH_SetMDIOClockRange+0xa8>)
 800682c:	4293      	cmp	r3, r2
 800682e:	d908      	bls.n	8006842 <HAL_ETH_SetMDIOClockRange+0x7e>
 8006830:	68bb      	ldr	r3, [r7, #8]
 8006832:	4a0f      	ldr	r2, [pc, #60]	; (8006870 <HAL_ETH_SetMDIOClockRange+0xac>)
 8006834:	4293      	cmp	r3, r2
 8006836:	d804      	bhi.n	8006842 <HAL_ETH_SetMDIOClockRange+0x7e>
  {
    /* CSR Clock Range between 100-150 MHz */
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV62;
 8006838:	68fb      	ldr	r3, [r7, #12]
 800683a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800683e:	60fb      	str	r3, [r7, #12]
 8006840:	e005      	b.n	800684e <HAL_ETH_SetMDIOClockRange+0x8a>
  }
  else /* (hclk >= 150000000)&&(hclk <= 200000000) */
  {
    /* CSR Clock Range between 150-200 MHz */
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV102;
 8006842:	68fb      	ldr	r3, [r7, #12]
 8006844:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8006848:	60fb      	str	r3, [r7, #12]
 800684a:	e000      	b.n	800684e <HAL_ETH_SetMDIOClockRange+0x8a>
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV42;
 800684c:	bf00      	nop
  }

  /* Configure the CSR Clock Range */
  (heth->Instance)->MACMDIOAR = (uint32_t)tmpreg;
 800684e:	687b      	ldr	r3, [r7, #4]
 8006850:	681b      	ldr	r3, [r3, #0]
 8006852:	68fa      	ldr	r2, [r7, #12]
 8006854:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
}
 8006858:	bf00      	nop
 800685a:	3710      	adds	r7, #16
 800685c:	46bd      	mov	sp, r7
 800685e:	bd80      	pop	{r7, pc}
 8006860:	01312cff 	.word	0x01312cff
 8006864:	02160ebf 	.word	0x02160ebf
 8006868:	03938700 	.word	0x03938700
 800686c:	05f5e0ff 	.word	0x05f5e0ff
 8006870:	08f0d17f 	.word	0x08f0d17f

08006874 <ETH_SetMACConfig>:
  * @{
  */


static void ETH_SetMACConfig(ETH_HandleTypeDef *heth,  ETH_MACConfigTypeDef *macconf)
{
 8006874:	b480      	push	{r7}
 8006876:	b085      	sub	sp, #20
 8006878:	af00      	add	r7, sp, #0
 800687a:	6078      	str	r0, [r7, #4]
 800687c:	6039      	str	r1, [r7, #0]
  uint32_t macregval;

  /*------------------------ MACCR Configuration --------------------*/
  macregval = (macconf->InterPacketGapVal |
 800687e:	683b      	ldr	r3, [r7, #0]
 8006880:	689a      	ldr	r2, [r3, #8]
               macconf->SourceAddrControl |
 8006882:	683b      	ldr	r3, [r7, #0]
 8006884:	681b      	ldr	r3, [r3, #0]
  macregval = (macconf->InterPacketGapVal |
 8006886:	431a      	orrs	r2, r3
               ((uint32_t)macconf->ChecksumOffload << 27) |
 8006888:	683b      	ldr	r3, [r7, #0]
 800688a:	791b      	ldrb	r3, [r3, #4]
 800688c:	06db      	lsls	r3, r3, #27
               macconf->SourceAddrControl |
 800688e:	431a      	orrs	r2, r3
               ((uint32_t)macconf->GiantPacketSizeLimitControl << 23) |
 8006890:	683b      	ldr	r3, [r7, #0]
 8006892:	7b1b      	ldrb	r3, [r3, #12]
 8006894:	05db      	lsls	r3, r3, #23
               ((uint32_t)macconf->ChecksumOffload << 27) |
 8006896:	431a      	orrs	r2, r3
               ((uint32_t)macconf->Support2KPacket  << 22) |
 8006898:	683b      	ldr	r3, [r7, #0]
 800689a:	7b5b      	ldrb	r3, [r3, #13]
 800689c:	059b      	lsls	r3, r3, #22
               ((uint32_t)macconf->GiantPacketSizeLimitControl << 23) |
 800689e:	431a      	orrs	r2, r3
               ((uint32_t)macconf->CRCStripTypePacket << 21) |
 80068a0:	683b      	ldr	r3, [r7, #0]
 80068a2:	7b9b      	ldrb	r3, [r3, #14]
 80068a4:	055b      	lsls	r3, r3, #21
               ((uint32_t)macconf->Support2KPacket  << 22) |
 80068a6:	431a      	orrs	r2, r3
               ((uint32_t)macconf->AutomaticPadCRCStrip << 20) |
 80068a8:	683b      	ldr	r3, [r7, #0]
 80068aa:	7bdb      	ldrb	r3, [r3, #15]
 80068ac:	051b      	lsls	r3, r3, #20
               ((uint32_t)macconf->CRCStripTypePacket << 21) |
 80068ae:	4313      	orrs	r3, r2
               ((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 19) |
 80068b0:	683a      	ldr	r2, [r7, #0]
 80068b2:	7c12      	ldrb	r2, [r2, #16]
 80068b4:	2a00      	cmp	r2, #0
 80068b6:	d102      	bne.n	80068be <ETH_SetMACConfig+0x4a>
 80068b8:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 80068bc:	e000      	b.n	80068c0 <ETH_SetMACConfig+0x4c>
 80068be:	2200      	movs	r2, #0
               ((uint32_t)macconf->AutomaticPadCRCStrip << 20) |
 80068c0:	4313      	orrs	r3, r2
               ((uint32_t)((macconf->Jabber == DISABLE) ? 1U : 0U) << 17) |
 80068c2:	683a      	ldr	r2, [r7, #0]
 80068c4:	7c52      	ldrb	r2, [r2, #17]
 80068c6:	2a00      	cmp	r2, #0
 80068c8:	d102      	bne.n	80068d0 <ETH_SetMACConfig+0x5c>
 80068ca:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 80068ce:	e000      	b.n	80068d2 <ETH_SetMACConfig+0x5e>
 80068d0:	2200      	movs	r2, #0
               ((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 19) |
 80068d2:	431a      	orrs	r2, r3
               ((uint32_t)macconf->JumboPacket << 16) |
 80068d4:	683b      	ldr	r3, [r7, #0]
 80068d6:	7c9b      	ldrb	r3, [r3, #18]
 80068d8:	041b      	lsls	r3, r3, #16
               ((uint32_t)((macconf->Jabber == DISABLE) ? 1U : 0U) << 17) |
 80068da:	431a      	orrs	r2, r3
               macconf->Speed |
 80068dc:	683b      	ldr	r3, [r7, #0]
 80068de:	695b      	ldr	r3, [r3, #20]
               ((uint32_t)macconf->JumboPacket << 16) |
 80068e0:	431a      	orrs	r2, r3
               macconf->DuplexMode |
 80068e2:	683b      	ldr	r3, [r7, #0]
 80068e4:	699b      	ldr	r3, [r3, #24]
               macconf->Speed |
 80068e6:	431a      	orrs	r2, r3
               ((uint32_t)macconf->LoopbackMode << 12) |
 80068e8:	683b      	ldr	r3, [r7, #0]
 80068ea:	7f1b      	ldrb	r3, [r3, #28]
 80068ec:	031b      	lsls	r3, r3, #12
               macconf->DuplexMode |
 80068ee:	431a      	orrs	r2, r3
               ((uint32_t)macconf->CarrierSenseBeforeTransmit << 11) |
 80068f0:	683b      	ldr	r3, [r7, #0]
 80068f2:	7f5b      	ldrb	r3, [r3, #29]
 80068f4:	02db      	lsls	r3, r3, #11
               ((uint32_t)macconf->LoopbackMode << 12) |
 80068f6:	4313      	orrs	r3, r2
               ((uint32_t)((macconf->ReceiveOwn == DISABLE) ? 1U : 0U) << 10) |
 80068f8:	683a      	ldr	r2, [r7, #0]
 80068fa:	7f92      	ldrb	r2, [r2, #30]
 80068fc:	2a00      	cmp	r2, #0
 80068fe:	d102      	bne.n	8006906 <ETH_SetMACConfig+0x92>
 8006900:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8006904:	e000      	b.n	8006908 <ETH_SetMACConfig+0x94>
 8006906:	2200      	movs	r2, #0
               ((uint32_t)macconf->CarrierSenseBeforeTransmit << 11) |
 8006908:	431a      	orrs	r2, r3
               ((uint32_t)macconf->CarrierSenseDuringTransmit << 9) |
 800690a:	683b      	ldr	r3, [r7, #0]
 800690c:	7fdb      	ldrb	r3, [r3, #31]
 800690e:	025b      	lsls	r3, r3, #9
               ((uint32_t)((macconf->ReceiveOwn == DISABLE) ? 1U : 0U) << 10) |
 8006910:	4313      	orrs	r3, r2
               ((uint32_t)((macconf->RetryTransmission == DISABLE) ? 1U : 0U) << 8) |
 8006912:	683a      	ldr	r2, [r7, #0]
 8006914:	f892 2020 	ldrb.w	r2, [r2, #32]
 8006918:	2a00      	cmp	r2, #0
 800691a:	d102      	bne.n	8006922 <ETH_SetMACConfig+0xae>
 800691c:	f44f 7280 	mov.w	r2, #256	; 0x100
 8006920:	e000      	b.n	8006924 <ETH_SetMACConfig+0xb0>
 8006922:	2200      	movs	r2, #0
               ((uint32_t)macconf->CarrierSenseDuringTransmit << 9) |
 8006924:	431a      	orrs	r2, r3
               macconf->BackOffLimit |
 8006926:	683b      	ldr	r3, [r7, #0]
 8006928:	6a5b      	ldr	r3, [r3, #36]	; 0x24
               ((uint32_t)((macconf->RetryTransmission == DISABLE) ? 1U : 0U) << 8) |
 800692a:	431a      	orrs	r2, r3
               ((uint32_t)macconf->DeferralCheck << 4) |
 800692c:	683b      	ldr	r3, [r7, #0]
 800692e:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8006932:	011b      	lsls	r3, r3, #4
               macconf->BackOffLimit |
 8006934:	431a      	orrs	r2, r3
               macconf->PreambleLength);
 8006936:	683b      	ldr	r3, [r7, #0]
 8006938:	6adb      	ldr	r3, [r3, #44]	; 0x2c
  macregval = (macconf->InterPacketGapVal |
 800693a:	4313      	orrs	r3, r2
 800693c:	60fb      	str	r3, [r7, #12]

  /* Write to MACCR */
  MODIFY_REG(heth->Instance->MACCR, ETH_MACCR_MASK, macregval);
 800693e:	687b      	ldr	r3, [r7, #4]
 8006940:	681b      	ldr	r3, [r3, #0]
 8006942:	681a      	ldr	r2, [r3, #0]
 8006944:	4b56      	ldr	r3, [pc, #344]	; (8006aa0 <ETH_SetMACConfig+0x22c>)
 8006946:	4013      	ands	r3, r2
 8006948:	687a      	ldr	r2, [r7, #4]
 800694a:	6812      	ldr	r2, [r2, #0]
 800694c:	68f9      	ldr	r1, [r7, #12]
 800694e:	430b      	orrs	r3, r1
 8006950:	6013      	str	r3, [r2, #0]

  /*------------------------ MACECR Configuration --------------------*/
  macregval = ((macconf->ExtendedInterPacketGapVal << 25) |
 8006952:	683b      	ldr	r3, [r7, #0]
 8006954:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006956:	065a      	lsls	r2, r3, #25
               ((uint32_t)macconf->ExtendedInterPacketGap << 24) |
 8006958:	683b      	ldr	r3, [r7, #0]
 800695a:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 800695e:	061b      	lsls	r3, r3, #24
  macregval = ((macconf->ExtendedInterPacketGapVal << 25) |
 8006960:	431a      	orrs	r2, r3
               ((uint32_t)macconf->UnicastSlowProtocolPacketDetect << 18) |
 8006962:	683b      	ldr	r3, [r7, #0]
 8006964:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8006968:	049b      	lsls	r3, r3, #18
               ((uint32_t)macconf->ExtendedInterPacketGap << 24) |
 800696a:	431a      	orrs	r2, r3
               ((uint32_t)macconf->SlowProtocolDetect << 17) |
 800696c:	683b      	ldr	r3, [r7, #0]
 800696e:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 8006972:	045b      	lsls	r3, r3, #17
               ((uint32_t)macconf->UnicastSlowProtocolPacketDetect << 18) |
 8006974:	4313      	orrs	r3, r2
               ((uint32_t)((macconf->CRCCheckingRxPackets == DISABLE) ? 1U : 0U) << 16) |
 8006976:	683a      	ldr	r2, [r7, #0]
 8006978:	f892 2032 	ldrb.w	r2, [r2, #50]	; 0x32
 800697c:	2a00      	cmp	r2, #0
 800697e:	d102      	bne.n	8006986 <ETH_SetMACConfig+0x112>
 8006980:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8006984:	e000      	b.n	8006988 <ETH_SetMACConfig+0x114>
 8006986:	2200      	movs	r2, #0
               ((uint32_t)macconf->SlowProtocolDetect << 17) |
 8006988:	431a      	orrs	r2, r3
               macconf->GiantPacketSizeLimit);
 800698a:	683b      	ldr	r3, [r7, #0]
 800698c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
  macregval = ((macconf->ExtendedInterPacketGapVal << 25) |
 800698e:	4313      	orrs	r3, r2
 8006990:	60fb      	str	r3, [r7, #12]

  /* Write to MACECR */
  MODIFY_REG(heth->Instance->MACECR, ETH_MACECR_MASK, macregval);
 8006992:	687b      	ldr	r3, [r7, #4]
 8006994:	681b      	ldr	r3, [r3, #0]
 8006996:	685a      	ldr	r2, [r3, #4]
 8006998:	4b42      	ldr	r3, [pc, #264]	; (8006aa4 <ETH_SetMACConfig+0x230>)
 800699a:	4013      	ands	r3, r2
 800699c:	687a      	ldr	r2, [r7, #4]
 800699e:	6812      	ldr	r2, [r2, #0]
 80069a0:	68f9      	ldr	r1, [r7, #12]
 80069a2:	430b      	orrs	r3, r1
 80069a4:	6053      	str	r3, [r2, #4]

  /*------------------------ MACWTR Configuration --------------------*/
  macregval = (((uint32_t)macconf->ProgrammableWatchdog << 8) |
 80069a6:	683b      	ldr	r3, [r7, #0]
 80069a8:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80069ac:	021a      	lsls	r2, r3, #8
               macconf->WatchdogTimeout);
 80069ae:	683b      	ldr	r3, [r7, #0]
 80069b0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
  macregval = (((uint32_t)macconf->ProgrammableWatchdog << 8) |
 80069b2:	4313      	orrs	r3, r2
 80069b4:	60fb      	str	r3, [r7, #12]

  /* Write to MACWTR */
  MODIFY_REG(heth->Instance->MACWTR, ETH_MACWTR_MASK, macregval);
 80069b6:	687b      	ldr	r3, [r7, #4]
 80069b8:	681b      	ldr	r3, [r3, #0]
 80069ba:	68da      	ldr	r2, [r3, #12]
 80069bc:	4b3a      	ldr	r3, [pc, #232]	; (8006aa8 <ETH_SetMACConfig+0x234>)
 80069be:	4013      	ands	r3, r2
 80069c0:	687a      	ldr	r2, [r7, #4]
 80069c2:	6812      	ldr	r2, [r2, #0]
 80069c4:	68f9      	ldr	r1, [r7, #12]
 80069c6:	430b      	orrs	r3, r1
 80069c8:	60d3      	str	r3, [r2, #12]

  /*------------------------ MACTFCR Configuration --------------------*/
  macregval = (((uint32_t)macconf->TransmitFlowControl << 1) |
 80069ca:	683b      	ldr	r3, [r7, #0]
 80069cc:	f893 3054 	ldrb.w	r3, [r3, #84]	; 0x54
 80069d0:	005a      	lsls	r2, r3, #1
               macconf->PauseLowThreshold |
 80069d2:	683b      	ldr	r3, [r7, #0]
 80069d4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
  macregval = (((uint32_t)macconf->TransmitFlowControl << 1) |
 80069d6:	4313      	orrs	r3, r2
               ((uint32_t)((macconf->ZeroQuantaPause == DISABLE) ? 1U : 0U) << 7) |
 80069d8:	683a      	ldr	r2, [r7, #0]
 80069da:	f892 204c 	ldrb.w	r2, [r2, #76]	; 0x4c
 80069de:	2a00      	cmp	r2, #0
 80069e0:	d101      	bne.n	80069e6 <ETH_SetMACConfig+0x172>
 80069e2:	2280      	movs	r2, #128	; 0x80
 80069e4:	e000      	b.n	80069e8 <ETH_SetMACConfig+0x174>
 80069e6:	2200      	movs	r2, #0
               macconf->PauseLowThreshold |
 80069e8:	431a      	orrs	r2, r3
               (macconf->PauseTime << 16));
 80069ea:	683b      	ldr	r3, [r7, #0]
 80069ec:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80069ee:	041b      	lsls	r3, r3, #16
  macregval = (((uint32_t)macconf->TransmitFlowControl << 1) |
 80069f0:	4313      	orrs	r3, r2
 80069f2:	60fb      	str	r3, [r7, #12]

  /* Write to MACTFCR */
  MODIFY_REG(heth->Instance->MACTFCR, ETH_MACTFCR_MASK, macregval);
 80069f4:	687b      	ldr	r3, [r7, #4]
 80069f6:	681b      	ldr	r3, [r3, #0]
 80069f8:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 80069fa:	f64f 730d 	movw	r3, #65293	; 0xff0d
 80069fe:	4013      	ands	r3, r2
 8006a00:	687a      	ldr	r2, [r7, #4]
 8006a02:	6812      	ldr	r2, [r2, #0]
 8006a04:	68f9      	ldr	r1, [r7, #12]
 8006a06:	430b      	orrs	r3, r1
 8006a08:	6713      	str	r3, [r2, #112]	; 0x70

  /*------------------------ MACRFCR Configuration --------------------*/
  macregval = ((uint32_t)macconf->ReceiveFlowControl |
 8006a0a:	683b      	ldr	r3, [r7, #0]
 8006a0c:	f893 3056 	ldrb.w	r3, [r3, #86]	; 0x56
 8006a10:	461a      	mov	r2, r3
               ((uint32_t)macconf->UnicastPausePacketDetect << 1));
 8006a12:	683b      	ldr	r3, [r7, #0]
 8006a14:	f893 3055 	ldrb.w	r3, [r3, #85]	; 0x55
 8006a18:	005b      	lsls	r3, r3, #1
  macregval = ((uint32_t)macconf->ReceiveFlowControl |
 8006a1a:	4313      	orrs	r3, r2
 8006a1c:	60fb      	str	r3, [r7, #12]

  /* Write to MACRFCR */
  MODIFY_REG(heth->Instance->MACRFCR, ETH_MACRFCR_MASK, macregval);
 8006a1e:	687b      	ldr	r3, [r7, #4]
 8006a20:	681b      	ldr	r3, [r3, #0]
 8006a22:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006a26:	f023 0103 	bic.w	r1, r3, #3
 8006a2a:	687b      	ldr	r3, [r7, #4]
 8006a2c:	681b      	ldr	r3, [r3, #0]
 8006a2e:	68fa      	ldr	r2, [r7, #12]
 8006a30:	430a      	orrs	r2, r1
 8006a32:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

  /*------------------------ MTLTQOMR Configuration --------------------*/
  /* Write to MTLTQOMR */
  MODIFY_REG(heth->Instance->MTLTQOMR, ETH_MTLTQOMR_MASK, macconf->TransmitQueueMode);
 8006a36:	687b      	ldr	r3, [r7, #4]
 8006a38:	681b      	ldr	r3, [r3, #0]
 8006a3a:	f8d3 3d00 	ldr.w	r3, [r3, #3328]	; 0xd00
 8006a3e:	f023 0172 	bic.w	r1, r3, #114	; 0x72
 8006a42:	683b      	ldr	r3, [r7, #0]
 8006a44:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8006a46:	687b      	ldr	r3, [r7, #4]
 8006a48:	681b      	ldr	r3, [r3, #0]
 8006a4a:	430a      	orrs	r2, r1
 8006a4c:	f8c3 2d00 	str.w	r2, [r3, #3328]	; 0xd00

  /*------------------------ MTLRQOMR Configuration --------------------*/
  macregval = (macconf->ReceiveQueueMode |
 8006a50:	683b      	ldr	r3, [r7, #0]
 8006a52:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
               ((uint32_t)((macconf->DropTCPIPChecksumErrorPacket == DISABLE) ? 1U : 0U) << 6) |
 8006a54:	683a      	ldr	r2, [r7, #0]
 8006a56:	f892 2060 	ldrb.w	r2, [r2, #96]	; 0x60
 8006a5a:	2a00      	cmp	r2, #0
 8006a5c:	d101      	bne.n	8006a62 <ETH_SetMACConfig+0x1ee>
 8006a5e:	2240      	movs	r2, #64	; 0x40
 8006a60:	e000      	b.n	8006a64 <ETH_SetMACConfig+0x1f0>
 8006a62:	2200      	movs	r2, #0
  macregval = (macconf->ReceiveQueueMode |
 8006a64:	431a      	orrs	r2, r3
               ((uint32_t)macconf->ForwardRxErrorPacket << 4) |
 8006a66:	683b      	ldr	r3, [r7, #0]
 8006a68:	f893 3061 	ldrb.w	r3, [r3, #97]	; 0x61
 8006a6c:	011b      	lsls	r3, r3, #4
               ((uint32_t)((macconf->DropTCPIPChecksumErrorPacket == DISABLE) ? 1U : 0U) << 6) |
 8006a6e:	431a      	orrs	r2, r3
               ((uint32_t)macconf->ForwardRxUndersizedGoodPacket << 3));
 8006a70:	683b      	ldr	r3, [r7, #0]
 8006a72:	f893 3062 	ldrb.w	r3, [r3, #98]	; 0x62
 8006a76:	00db      	lsls	r3, r3, #3
  macregval = (macconf->ReceiveQueueMode |
 8006a78:	4313      	orrs	r3, r2
 8006a7a:	60fb      	str	r3, [r7, #12]

  /* Write to MTLRQOMR */
  MODIFY_REG(heth->Instance->MTLRQOMR, ETH_MTLRQOMR_MASK, macregval);
 8006a7c:	687b      	ldr	r3, [r7, #4]
 8006a7e:	681b      	ldr	r3, [r3, #0]
 8006a80:	f8d3 3d30 	ldr.w	r3, [r3, #3376]	; 0xd30
 8006a84:	f023 017b 	bic.w	r1, r3, #123	; 0x7b
 8006a88:	687b      	ldr	r3, [r7, #4]
 8006a8a:	681b      	ldr	r3, [r3, #0]
 8006a8c:	68fa      	ldr	r2, [r7, #12]
 8006a8e:	430a      	orrs	r2, r1
 8006a90:	f8c3 2d30 	str.w	r2, [r3, #3376]	; 0xd30
}
 8006a94:	bf00      	nop
 8006a96:	3714      	adds	r7, #20
 8006a98:	46bd      	mov	sp, r7
 8006a9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a9e:	4770      	bx	lr
 8006aa0:	00048083 	.word	0x00048083
 8006aa4:	c0f88000 	.word	0xc0f88000
 8006aa8:	fffffef0 	.word	0xfffffef0

08006aac <ETH_SetDMAConfig>:

static void ETH_SetDMAConfig(ETH_HandleTypeDef *heth,  ETH_DMAConfigTypeDef *dmaconf)
{
 8006aac:	b480      	push	{r7}
 8006aae:	b085      	sub	sp, #20
 8006ab0:	af00      	add	r7, sp, #0
 8006ab2:	6078      	str	r0, [r7, #4]
 8006ab4:	6039      	str	r1, [r7, #0]
  uint32_t dmaregval;

  /*------------------------ DMAMR Configuration --------------------*/
  MODIFY_REG(heth->Instance->DMAMR, ETH_DMAMR_MASK, dmaconf->DMAArbitration);
 8006ab6:	687b      	ldr	r3, [r7, #4]
 8006ab8:	681b      	ldr	r3, [r3, #0]
 8006aba:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8006abe:	681a      	ldr	r2, [r3, #0]
 8006ac0:	4b38      	ldr	r3, [pc, #224]	; (8006ba4 <ETH_SetDMAConfig+0xf8>)
 8006ac2:	4013      	ands	r3, r2
 8006ac4:	683a      	ldr	r2, [r7, #0]
 8006ac6:	6811      	ldr	r1, [r2, #0]
 8006ac8:	687a      	ldr	r2, [r7, #4]
 8006aca:	6812      	ldr	r2, [r2, #0]
 8006acc:	430b      	orrs	r3, r1
 8006ace:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8006ad2:	6013      	str	r3, [r2, #0]

  /*------------------------ DMASBMR Configuration --------------------*/
  dmaregval = (((uint32_t)dmaconf->AddressAlignedBeats << 12) |
 8006ad4:	683b      	ldr	r3, [r7, #0]
 8006ad6:	791b      	ldrb	r3, [r3, #4]
 8006ad8:	031a      	lsls	r2, r3, #12
               dmaconf->BurstMode |
 8006ada:	683b      	ldr	r3, [r7, #0]
 8006adc:	689b      	ldr	r3, [r3, #8]
  dmaregval = (((uint32_t)dmaconf->AddressAlignedBeats << 12) |
 8006ade:	431a      	orrs	r2, r3
               ((uint32_t)dmaconf->RebuildINCRxBurst << 15));
 8006ae0:	683b      	ldr	r3, [r7, #0]
 8006ae2:	7b1b      	ldrb	r3, [r3, #12]
 8006ae4:	03db      	lsls	r3, r3, #15
  dmaregval = (((uint32_t)dmaconf->AddressAlignedBeats << 12) |
 8006ae6:	4313      	orrs	r3, r2
 8006ae8:	60fb      	str	r3, [r7, #12]

  MODIFY_REG(heth->Instance->DMASBMR, ETH_DMASBMR_MASK, dmaregval);
 8006aea:	687b      	ldr	r3, [r7, #4]
 8006aec:	681b      	ldr	r3, [r3, #0]
 8006aee:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8006af2:	685a      	ldr	r2, [r3, #4]
 8006af4:	4b2c      	ldr	r3, [pc, #176]	; (8006ba8 <ETH_SetDMAConfig+0xfc>)
 8006af6:	4013      	ands	r3, r2
 8006af8:	687a      	ldr	r2, [r7, #4]
 8006afa:	6812      	ldr	r2, [r2, #0]
 8006afc:	68f9      	ldr	r1, [r7, #12]
 8006afe:	430b      	orrs	r3, r1
 8006b00:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8006b04:	6053      	str	r3, [r2, #4]

  /*------------------------ DMACCR Configuration --------------------*/
  dmaregval = (((uint32_t)dmaconf->PBLx8Mode << 16) |
 8006b06:	683b      	ldr	r3, [r7, #0]
 8006b08:	7b5b      	ldrb	r3, [r3, #13]
 8006b0a:	041a      	lsls	r2, r3, #16
               dmaconf->MaximumSegmentSize);
 8006b0c:	683b      	ldr	r3, [r7, #0]
 8006b0e:	6a1b      	ldr	r3, [r3, #32]
  dmaregval = (((uint32_t)dmaconf->PBLx8Mode << 16) |
 8006b10:	4313      	orrs	r3, r2
 8006b12:	60fb      	str	r3, [r7, #12]

  MODIFY_REG(heth->Instance->DMACCR, ETH_DMACCR_MASK, dmaregval);
 8006b14:	687b      	ldr	r3, [r7, #4]
 8006b16:	681b      	ldr	r3, [r3, #0]
 8006b18:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8006b1c:	f8d3 2100 	ldr.w	r2, [r3, #256]	; 0x100
 8006b20:	4b22      	ldr	r3, [pc, #136]	; (8006bac <ETH_SetDMAConfig+0x100>)
 8006b22:	4013      	ands	r3, r2
 8006b24:	687a      	ldr	r2, [r7, #4]
 8006b26:	6812      	ldr	r2, [r2, #0]
 8006b28:	68f9      	ldr	r1, [r7, #12]
 8006b2a:	430b      	orrs	r3, r1
 8006b2c:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8006b30:	f8c2 3100 	str.w	r3, [r2, #256]	; 0x100

  /*------------------------ DMACTCR Configuration --------------------*/
  dmaregval = (dmaconf->TxDMABurstLength |
 8006b34:	683b      	ldr	r3, [r7, #0]
 8006b36:	691a      	ldr	r2, [r3, #16]
               ((uint32_t)dmaconf->SecondPacketOperate << 4) |
 8006b38:	683b      	ldr	r3, [r7, #0]
 8006b3a:	7d1b      	ldrb	r3, [r3, #20]
 8006b3c:	011b      	lsls	r3, r3, #4
  dmaregval = (dmaconf->TxDMABurstLength |
 8006b3e:	431a      	orrs	r2, r3
               ((uint32_t)dmaconf->TCPSegmentation << 12));
 8006b40:	683b      	ldr	r3, [r7, #0]
 8006b42:	7f5b      	ldrb	r3, [r3, #29]
 8006b44:	031b      	lsls	r3, r3, #12
  dmaregval = (dmaconf->TxDMABurstLength |
 8006b46:	4313      	orrs	r3, r2
 8006b48:	60fb      	str	r3, [r7, #12]

  MODIFY_REG(heth->Instance->DMACTCR, ETH_DMACTCR_MASK, dmaregval);
 8006b4a:	687b      	ldr	r3, [r7, #4]
 8006b4c:	681b      	ldr	r3, [r3, #0]
 8006b4e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8006b52:	f8d3 2104 	ldr.w	r2, [r3, #260]	; 0x104
 8006b56:	4b16      	ldr	r3, [pc, #88]	; (8006bb0 <ETH_SetDMAConfig+0x104>)
 8006b58:	4013      	ands	r3, r2
 8006b5a:	687a      	ldr	r2, [r7, #4]
 8006b5c:	6812      	ldr	r2, [r2, #0]
 8006b5e:	68f9      	ldr	r1, [r7, #12]
 8006b60:	430b      	orrs	r3, r1
 8006b62:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8006b66:	f8c2 3104 	str.w	r3, [r2, #260]	; 0x104

  /*------------------------ DMACRCR Configuration --------------------*/
  dmaregval = (((uint32_t)dmaconf->FlushRxPacket  << 31) |
 8006b6a:	683b      	ldr	r3, [r7, #0]
 8006b6c:	7f1b      	ldrb	r3, [r3, #28]
 8006b6e:	07da      	lsls	r2, r3, #31
               dmaconf->RxDMABurstLength);
 8006b70:	683b      	ldr	r3, [r7, #0]
 8006b72:	699b      	ldr	r3, [r3, #24]
  dmaregval = (((uint32_t)dmaconf->FlushRxPacket  << 31) |
 8006b74:	4313      	orrs	r3, r2
 8006b76:	60fb      	str	r3, [r7, #12]

  /* Write to DMACRCR */
  MODIFY_REG(heth->Instance->DMACRCR, ETH_DMACRCR_MASK, dmaregval);
 8006b78:	687b      	ldr	r3, [r7, #4]
 8006b7a:	681b      	ldr	r3, [r3, #0]
 8006b7c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8006b80:	f8d3 2108 	ldr.w	r2, [r3, #264]	; 0x108
 8006b84:	4b0b      	ldr	r3, [pc, #44]	; (8006bb4 <ETH_SetDMAConfig+0x108>)
 8006b86:	4013      	ands	r3, r2
 8006b88:	687a      	ldr	r2, [r7, #4]
 8006b8a:	6812      	ldr	r2, [r2, #0]
 8006b8c:	68f9      	ldr	r1, [r7, #12]
 8006b8e:	430b      	orrs	r3, r1
 8006b90:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8006b94:	f8c2 3108 	str.w	r3, [r2, #264]	; 0x108
}
 8006b98:	bf00      	nop
 8006b9a:	3714      	adds	r7, #20
 8006b9c:	46bd      	mov	sp, r7
 8006b9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ba2:	4770      	bx	lr
 8006ba4:	ffff87fd 	.word	0xffff87fd
 8006ba8:	ffff2ffe 	.word	0xffff2ffe
 8006bac:	fffec000 	.word	0xfffec000
 8006bb0:	ffc0efef 	.word	0xffc0efef
 8006bb4:	7fc0ffff 	.word	0x7fc0ffff

08006bb8 <ETH_MACDMAConfig>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
static void ETH_MACDMAConfig(ETH_HandleTypeDef *heth)
{
 8006bb8:	b580      	push	{r7, lr}
 8006bba:	b0a4      	sub	sp, #144	; 0x90
 8006bbc:	af00      	add	r7, sp, #0
 8006bbe:	6078      	str	r0, [r7, #4]
  ETH_MACConfigTypeDef macDefaultConf;
  ETH_DMAConfigTypeDef dmaDefaultConf;

  /*--------------- ETHERNET MAC registers default Configuration --------------*/
  macDefaultConf.AutomaticPadCRCStrip = ENABLE;
 8006bc0:	2301      	movs	r3, #1
 8006bc2:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
  macDefaultConf.BackOffLimit = ETH_BACKOFFLIMIT_10;
 8006bc6:	2300      	movs	r3, #0
 8006bc8:	653b      	str	r3, [r7, #80]	; 0x50
  macDefaultConf.CarrierSenseBeforeTransmit = DISABLE;
 8006bca:	2300      	movs	r3, #0
 8006bcc:	f887 3049 	strb.w	r3, [r7, #73]	; 0x49
  macDefaultConf.CarrierSenseDuringTransmit = DISABLE;
 8006bd0:	2300      	movs	r3, #0
 8006bd2:	f887 304b 	strb.w	r3, [r7, #75]	; 0x4b
  macDefaultConf.ChecksumOffload = ENABLE;
 8006bd6:	2301      	movs	r3, #1
 8006bd8:	f887 3030 	strb.w	r3, [r7, #48]	; 0x30
  macDefaultConf.CRCCheckingRxPackets = ENABLE;
 8006bdc:	2301      	movs	r3, #1
 8006bde:	f887 305e 	strb.w	r3, [r7, #94]	; 0x5e
  macDefaultConf.CRCStripTypePacket = ENABLE;
 8006be2:	2301      	movs	r3, #1
 8006be4:	f887 303a 	strb.w	r3, [r7, #58]	; 0x3a
  macDefaultConf.DeferralCheck = DISABLE;
 8006be8:	2300      	movs	r3, #0
 8006bea:	f887 3054 	strb.w	r3, [r7, #84]	; 0x54
  macDefaultConf.DropTCPIPChecksumErrorPacket = ENABLE;
 8006bee:	2301      	movs	r3, #1
 8006bf0:	f887 308c 	strb.w	r3, [r7, #140]	; 0x8c
  macDefaultConf.DuplexMode = ETH_FULLDUPLEX_MODE;
 8006bf4:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8006bf8:	647b      	str	r3, [r7, #68]	; 0x44
  macDefaultConf.ExtendedInterPacketGap = DISABLE;
 8006bfa:	2300      	movs	r3, #0
 8006bfc:	f887 3064 	strb.w	r3, [r7, #100]	; 0x64
  macDefaultConf.ExtendedInterPacketGapVal = 0x0;
 8006c00:	2300      	movs	r3, #0
 8006c02:	66bb      	str	r3, [r7, #104]	; 0x68
  macDefaultConf.ForwardRxErrorPacket = DISABLE;
 8006c04:	2300      	movs	r3, #0
 8006c06:	f887 308d 	strb.w	r3, [r7, #141]	; 0x8d
  macDefaultConf.ForwardRxUndersizedGoodPacket = DISABLE;
 8006c0a:	2300      	movs	r3, #0
 8006c0c:	f887 308e 	strb.w	r3, [r7, #142]	; 0x8e
  macDefaultConf.GiantPacketSizeLimit = 0x618;
 8006c10:	f44f 63c3 	mov.w	r3, #1560	; 0x618
 8006c14:	663b      	str	r3, [r7, #96]	; 0x60
  macDefaultConf.GiantPacketSizeLimitControl = DISABLE;
 8006c16:	2300      	movs	r3, #0
 8006c18:	f887 3038 	strb.w	r3, [r7, #56]	; 0x38
  macDefaultConf.InterPacketGapVal = ETH_INTERPACKETGAP_96BIT;
 8006c1c:	2300      	movs	r3, #0
 8006c1e:	637b      	str	r3, [r7, #52]	; 0x34
  macDefaultConf.Jabber = ENABLE;
 8006c20:	2301      	movs	r3, #1
 8006c22:	f887 303d 	strb.w	r3, [r7, #61]	; 0x3d
  macDefaultConf.JumboPacket = DISABLE;
 8006c26:	2300      	movs	r3, #0
 8006c28:	f887 303e 	strb.w	r3, [r7, #62]	; 0x3e
  macDefaultConf.LoopbackMode = DISABLE;
 8006c2c:	2300      	movs	r3, #0
 8006c2e:	f887 3048 	strb.w	r3, [r7, #72]	; 0x48
  macDefaultConf.PauseLowThreshold = ETH_PAUSELOWTHRESHOLD_MINUS_4;
 8006c32:	2300      	movs	r3, #0
 8006c34:	67fb      	str	r3, [r7, #124]	; 0x7c
  macDefaultConf.PauseTime = 0x0;
 8006c36:	2300      	movs	r3, #0
 8006c38:	677b      	str	r3, [r7, #116]	; 0x74
  macDefaultConf.PreambleLength = ETH_PREAMBLELENGTH_7;
 8006c3a:	2300      	movs	r3, #0
 8006c3c:	65bb      	str	r3, [r7, #88]	; 0x58
  macDefaultConf.ProgrammableWatchdog = DISABLE;
 8006c3e:	2300      	movs	r3, #0
 8006c40:	f887 306c 	strb.w	r3, [r7, #108]	; 0x6c
  macDefaultConf.ReceiveFlowControl = DISABLE;
 8006c44:	2300      	movs	r3, #0
 8006c46:	f887 3082 	strb.w	r3, [r7, #130]	; 0x82
  macDefaultConf.ReceiveOwn = ENABLE;
 8006c4a:	2301      	movs	r3, #1
 8006c4c:	f887 304a 	strb.w	r3, [r7, #74]	; 0x4a
  macDefaultConf.ReceiveQueueMode = ETH_RECEIVESTOREFORWARD;
 8006c50:	2320      	movs	r3, #32
 8006c52:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  macDefaultConf.RetryTransmission = ENABLE;
 8006c56:	2301      	movs	r3, #1
 8006c58:	f887 304c 	strb.w	r3, [r7, #76]	; 0x4c
  macDefaultConf.SlowProtocolDetect = DISABLE;
 8006c5c:	2300      	movs	r3, #0
 8006c5e:	f887 305d 	strb.w	r3, [r7, #93]	; 0x5d
  macDefaultConf.SourceAddrControl = ETH_SOURCEADDRESS_REPLACE_ADDR0;
 8006c62:	f04f 5340 	mov.w	r3, #805306368	; 0x30000000
 8006c66:	62fb      	str	r3, [r7, #44]	; 0x2c
  macDefaultConf.Speed = ETH_SPEED_100M;
 8006c68:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8006c6c:	643b      	str	r3, [r7, #64]	; 0x40
  macDefaultConf.Support2KPacket = DISABLE;
 8006c6e:	2300      	movs	r3, #0
 8006c70:	f887 3039 	strb.w	r3, [r7, #57]	; 0x39
  macDefaultConf.TransmitQueueMode = ETH_TRANSMITSTOREFORWARD;
 8006c74:	2302      	movs	r3, #2
 8006c76:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  macDefaultConf.TransmitFlowControl = DISABLE;
 8006c7a:	2300      	movs	r3, #0
 8006c7c:	f887 3080 	strb.w	r3, [r7, #128]	; 0x80
  macDefaultConf.UnicastPausePacketDetect = DISABLE;
 8006c80:	2300      	movs	r3, #0
 8006c82:	f887 3081 	strb.w	r3, [r7, #129]	; 0x81
  macDefaultConf.UnicastSlowProtocolPacketDetect = DISABLE;
 8006c86:	2300      	movs	r3, #0
 8006c88:	f887 305c 	strb.w	r3, [r7, #92]	; 0x5c
  macDefaultConf.Watchdog = ENABLE;
 8006c8c:	2301      	movs	r3, #1
 8006c8e:	f887 303c 	strb.w	r3, [r7, #60]	; 0x3c
  macDefaultConf.WatchdogTimeout =  ETH_MACWTR_WTO_2KB;
 8006c92:	2300      	movs	r3, #0
 8006c94:	673b      	str	r3, [r7, #112]	; 0x70
  macDefaultConf.ZeroQuantaPause = ENABLE;
 8006c96:	2301      	movs	r3, #1
 8006c98:	f887 3078 	strb.w	r3, [r7, #120]	; 0x78

  /* MAC default configuration */
  ETH_SetMACConfig(heth, &macDefaultConf);
 8006c9c:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8006ca0:	4619      	mov	r1, r3
 8006ca2:	6878      	ldr	r0, [r7, #4]
 8006ca4:	f7ff fde6 	bl	8006874 <ETH_SetMACConfig>

  /*--------------- ETHERNET DMA registers default Configuration --------------*/
  dmaDefaultConf.AddressAlignedBeats = ENABLE;
 8006ca8:	2301      	movs	r3, #1
 8006caa:	733b      	strb	r3, [r7, #12]
  dmaDefaultConf.BurstMode = ETH_BURSTLENGTH_FIXED;
 8006cac:	2301      	movs	r3, #1
 8006cae:	613b      	str	r3, [r7, #16]
  dmaDefaultConf.DMAArbitration = ETH_DMAARBITRATION_RX1_TX1;
 8006cb0:	2300      	movs	r3, #0
 8006cb2:	60bb      	str	r3, [r7, #8]
  dmaDefaultConf.FlushRxPacket = DISABLE;
 8006cb4:	2300      	movs	r3, #0
 8006cb6:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
  dmaDefaultConf.PBLx8Mode = DISABLE;
 8006cba:	2300      	movs	r3, #0
 8006cbc:	757b      	strb	r3, [r7, #21]
  dmaDefaultConf.RebuildINCRxBurst = DISABLE;
 8006cbe:	2300      	movs	r3, #0
 8006cc0:	753b      	strb	r3, [r7, #20]
  dmaDefaultConf.RxDMABurstLength = ETH_RXDMABURSTLENGTH_32BEAT;
 8006cc2:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8006cc6:	623b      	str	r3, [r7, #32]
  dmaDefaultConf.SecondPacketOperate = DISABLE;
 8006cc8:	2300      	movs	r3, #0
 8006cca:	773b      	strb	r3, [r7, #28]
  dmaDefaultConf.TxDMABurstLength = ETH_TXDMABURSTLENGTH_32BEAT;
 8006ccc:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8006cd0:	61bb      	str	r3, [r7, #24]
  dmaDefaultConf.TCPSegmentation = DISABLE;
 8006cd2:	2300      	movs	r3, #0
 8006cd4:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
  dmaDefaultConf.MaximumSegmentSize = ETH_SEGMENT_SIZE_DEFAULT;
 8006cd8:	f44f 7306 	mov.w	r3, #536	; 0x218
 8006cdc:	62bb      	str	r3, [r7, #40]	; 0x28

  /* DMA default configuration */
  ETH_SetDMAConfig(heth, &dmaDefaultConf);
 8006cde:	f107 0308 	add.w	r3, r7, #8
 8006ce2:	4619      	mov	r1, r3
 8006ce4:	6878      	ldr	r0, [r7, #4]
 8006ce6:	f7ff fee1 	bl	8006aac <ETH_SetDMAConfig>
}
 8006cea:	bf00      	nop
 8006cec:	3790      	adds	r7, #144	; 0x90
 8006cee:	46bd      	mov	sp, r7
 8006cf0:	bd80      	pop	{r7, pc}

08006cf2 <ETH_DMATxDescListInit>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_DMATxDescListInit(ETH_HandleTypeDef *heth)
{
 8006cf2:	b480      	push	{r7}
 8006cf4:	b085      	sub	sp, #20
 8006cf6:	af00      	add	r7, sp, #0
 8006cf8:	6078      	str	r0, [r7, #4]
  ETH_DMADescTypeDef *dmatxdesc;
  uint32_t i;

  /* Fill each DMATxDesc descriptor with the right values */
  for (i = 0; i < (uint32_t)ETH_TX_DESC_CNT; i++)
 8006cfa:	2300      	movs	r3, #0
 8006cfc:	60fb      	str	r3, [r7, #12]
 8006cfe:	e01d      	b.n	8006d3c <ETH_DMATxDescListInit+0x4a>
  {
    dmatxdesc = heth->Init.TxDesc + i;
 8006d00:	687b      	ldr	r3, [r7, #4]
 8006d02:	68d9      	ldr	r1, [r3, #12]
 8006d04:	68fa      	ldr	r2, [r7, #12]
 8006d06:	4613      	mov	r3, r2
 8006d08:	005b      	lsls	r3, r3, #1
 8006d0a:	4413      	add	r3, r2
 8006d0c:	00db      	lsls	r3, r3, #3
 8006d0e:	440b      	add	r3, r1
 8006d10:	60bb      	str	r3, [r7, #8]

    WRITE_REG(dmatxdesc->DESC0, 0x0);
 8006d12:	68bb      	ldr	r3, [r7, #8]
 8006d14:	2200      	movs	r2, #0
 8006d16:	601a      	str	r2, [r3, #0]
    WRITE_REG(dmatxdesc->DESC1, 0x0);
 8006d18:	68bb      	ldr	r3, [r7, #8]
 8006d1a:	2200      	movs	r2, #0
 8006d1c:	605a      	str	r2, [r3, #4]
    WRITE_REG(dmatxdesc->DESC2, 0x0);
 8006d1e:	68bb      	ldr	r3, [r7, #8]
 8006d20:	2200      	movs	r2, #0
 8006d22:	609a      	str	r2, [r3, #8]
    WRITE_REG(dmatxdesc->DESC3, 0x0);
 8006d24:	68bb      	ldr	r3, [r7, #8]
 8006d26:	2200      	movs	r2, #0
 8006d28:	60da      	str	r2, [r3, #12]

    WRITE_REG(heth->TxDescList.TxDesc[i], (uint32_t)dmatxdesc);
 8006d2a:	68b9      	ldr	r1, [r7, #8]
 8006d2c:	687b      	ldr	r3, [r7, #4]
 8006d2e:	68fa      	ldr	r2, [r7, #12]
 8006d30:	3206      	adds	r2, #6
 8006d32:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  for (i = 0; i < (uint32_t)ETH_TX_DESC_CNT; i++)
 8006d36:	68fb      	ldr	r3, [r7, #12]
 8006d38:	3301      	adds	r3, #1
 8006d3a:	60fb      	str	r3, [r7, #12]
 8006d3c:	68fb      	ldr	r3, [r7, #12]
 8006d3e:	2b03      	cmp	r3, #3
 8006d40:	d9de      	bls.n	8006d00 <ETH_DMATxDescListInit+0xe>

  }

  heth->TxDescList.CurTxDesc = 0;
 8006d42:	687b      	ldr	r3, [r7, #4]
 8006d44:	2200      	movs	r2, #0
 8006d46:	629a      	str	r2, [r3, #40]	; 0x28

  /* Set Transmit Descriptor Ring Length */
  WRITE_REG(heth->Instance->DMACTDRLR, (ETH_TX_DESC_CNT - 1U));
 8006d48:	687b      	ldr	r3, [r7, #4]
 8006d4a:	681b      	ldr	r3, [r3, #0]
 8006d4c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8006d50:	461a      	mov	r2, r3
 8006d52:	2303      	movs	r3, #3
 8006d54:	f8c2 312c 	str.w	r3, [r2, #300]	; 0x12c

  /* Set Transmit Descriptor List Address */
  WRITE_REG(heth->Instance->DMACTDLAR, (uint32_t) heth->Init.TxDesc);
 8006d58:	687b      	ldr	r3, [r7, #4]
 8006d5a:	68da      	ldr	r2, [r3, #12]
 8006d5c:	687b      	ldr	r3, [r7, #4]
 8006d5e:	681b      	ldr	r3, [r3, #0]
 8006d60:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8006d64:	f8c3 2114 	str.w	r2, [r3, #276]	; 0x114

  /* Set Transmit Descriptor Tail pointer */
  WRITE_REG(heth->Instance->DMACTDTPR, (uint32_t) heth->Init.TxDesc);
 8006d68:	687b      	ldr	r3, [r7, #4]
 8006d6a:	68da      	ldr	r2, [r3, #12]
 8006d6c:	687b      	ldr	r3, [r7, #4]
 8006d6e:	681b      	ldr	r3, [r3, #0]
 8006d70:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8006d74:	f8c3 2120 	str.w	r2, [r3, #288]	; 0x120
}
 8006d78:	bf00      	nop
 8006d7a:	3714      	adds	r7, #20
 8006d7c:	46bd      	mov	sp, r7
 8006d7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d82:	4770      	bx	lr

08006d84 <ETH_DMARxDescListInit>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_DMARxDescListInit(ETH_HandleTypeDef *heth)
{
 8006d84:	b480      	push	{r7}
 8006d86:	b085      	sub	sp, #20
 8006d88:	af00      	add	r7, sp, #0
 8006d8a:	6078      	str	r0, [r7, #4]
  ETH_DMADescTypeDef *dmarxdesc;
  uint32_t i;

  for (i = 0; i < (uint32_t)ETH_RX_DESC_CNT; i++)
 8006d8c:	2300      	movs	r3, #0
 8006d8e:	60fb      	str	r3, [r7, #12]
 8006d90:	e023      	b.n	8006dda <ETH_DMARxDescListInit+0x56>
  {
    dmarxdesc =  heth->Init.RxDesc + i;
 8006d92:	687b      	ldr	r3, [r7, #4]
 8006d94:	6919      	ldr	r1, [r3, #16]
 8006d96:	68fa      	ldr	r2, [r7, #12]
 8006d98:	4613      	mov	r3, r2
 8006d9a:	005b      	lsls	r3, r3, #1
 8006d9c:	4413      	add	r3, r2
 8006d9e:	00db      	lsls	r3, r3, #3
 8006da0:	440b      	add	r3, r1
 8006da2:	60bb      	str	r3, [r7, #8]

    WRITE_REG(dmarxdesc->DESC0, 0x0);
 8006da4:	68bb      	ldr	r3, [r7, #8]
 8006da6:	2200      	movs	r2, #0
 8006da8:	601a      	str	r2, [r3, #0]
    WRITE_REG(dmarxdesc->DESC1, 0x0);
 8006daa:	68bb      	ldr	r3, [r7, #8]
 8006dac:	2200      	movs	r2, #0
 8006dae:	605a      	str	r2, [r3, #4]
    WRITE_REG(dmarxdesc->DESC2, 0x0);
 8006db0:	68bb      	ldr	r3, [r7, #8]
 8006db2:	2200      	movs	r2, #0
 8006db4:	609a      	str	r2, [r3, #8]
    WRITE_REG(dmarxdesc->DESC3, 0x0);
 8006db6:	68bb      	ldr	r3, [r7, #8]
 8006db8:	2200      	movs	r2, #0
 8006dba:	60da      	str	r2, [r3, #12]
    WRITE_REG(dmarxdesc->BackupAddr0, 0x0);
 8006dbc:	68bb      	ldr	r3, [r7, #8]
 8006dbe:	2200      	movs	r2, #0
 8006dc0:	611a      	str	r2, [r3, #16]
    WRITE_REG(dmarxdesc->BackupAddr1, 0x0);
 8006dc2:	68bb      	ldr	r3, [r7, #8]
 8006dc4:	2200      	movs	r2, #0
 8006dc6:	615a      	str	r2, [r3, #20]


    /* Set Rx descritors addresses */
    WRITE_REG(heth->RxDescList.RxDesc[i], (uint32_t)dmarxdesc);
 8006dc8:	68b9      	ldr	r1, [r7, #8]
 8006dca:	687b      	ldr	r3, [r7, #4]
 8006dcc:	68fa      	ldr	r2, [r7, #12]
 8006dce:	3212      	adds	r2, #18
 8006dd0:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  for (i = 0; i < (uint32_t)ETH_RX_DESC_CNT; i++)
 8006dd4:	68fb      	ldr	r3, [r7, #12]
 8006dd6:	3301      	adds	r3, #1
 8006dd8:	60fb      	str	r3, [r7, #12]
 8006dda:	68fb      	ldr	r3, [r7, #12]
 8006ddc:	2b03      	cmp	r3, #3
 8006dde:	d9d8      	bls.n	8006d92 <ETH_DMARxDescListInit+0xe>

  }

  WRITE_REG(heth->RxDescList.RxDescIdx, 0);
 8006de0:	687b      	ldr	r3, [r7, #4]
 8006de2:	2200      	movs	r2, #0
 8006de4:	65da      	str	r2, [r3, #92]	; 0x5c
  WRITE_REG(heth->RxDescList.RxDescCnt, 0);
 8006de6:	687b      	ldr	r3, [r7, #4]
 8006de8:	2200      	movs	r2, #0
 8006dea:	661a      	str	r2, [r3, #96]	; 0x60
  WRITE_REG(heth->RxDescList.RxBuildDescIdx, 0);
 8006dec:	687b      	ldr	r3, [r7, #4]
 8006dee:	2200      	movs	r2, #0
 8006df0:	669a      	str	r2, [r3, #104]	; 0x68
  WRITE_REG(heth->RxDescList.RxBuildDescCnt, 0);
 8006df2:	687b      	ldr	r3, [r7, #4]
 8006df4:	2200      	movs	r2, #0
 8006df6:	66da      	str	r2, [r3, #108]	; 0x6c
  WRITE_REG(heth->RxDescList.ItMode, 0);
 8006df8:	687b      	ldr	r3, [r7, #4]
 8006dfa:	2200      	movs	r2, #0
 8006dfc:	659a      	str	r2, [r3, #88]	; 0x58

  /* Set Receive Descriptor Ring Length */
  WRITE_REG(heth->Instance->DMACRDRLR, ((uint32_t)(ETH_RX_DESC_CNT - 1U)));
 8006dfe:	687b      	ldr	r3, [r7, #4]
 8006e00:	681b      	ldr	r3, [r3, #0]
 8006e02:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8006e06:	461a      	mov	r2, r3
 8006e08:	2303      	movs	r3, #3
 8006e0a:	f8c2 3130 	str.w	r3, [r2, #304]	; 0x130

  /* Set Receive Descriptor List Address */
  WRITE_REG(heth->Instance->DMACRDLAR, (uint32_t) heth->Init.RxDesc);
 8006e0e:	687b      	ldr	r3, [r7, #4]
 8006e10:	691a      	ldr	r2, [r3, #16]
 8006e12:	687b      	ldr	r3, [r7, #4]
 8006e14:	681b      	ldr	r3, [r3, #0]
 8006e16:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8006e1a:	f8c3 211c 	str.w	r2, [r3, #284]	; 0x11c

  /* Set Receive Descriptor Tail pointer Address */
  WRITE_REG(heth->Instance->DMACRDTPR, ((uint32_t)(heth->Init.RxDesc + (uint32_t)(ETH_RX_DESC_CNT - 1U))));
 8006e1e:	687b      	ldr	r3, [r7, #4]
 8006e20:	691b      	ldr	r3, [r3, #16]
 8006e22:	f103 0248 	add.w	r2, r3, #72	; 0x48
 8006e26:	687b      	ldr	r3, [r7, #4]
 8006e28:	681b      	ldr	r3, [r3, #0]
 8006e2a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8006e2e:	f8c3 2128 	str.w	r2, [r3, #296]	; 0x128
}
 8006e32:	bf00      	nop
 8006e34:	3714      	adds	r7, #20
 8006e36:	46bd      	mov	sp, r7
 8006e38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e3c:	4770      	bx	lr
	...

08006e40 <ETH_Prepare_Tx_Descriptors>:
  * @param  pTxConfig: Tx packet configuration
  * @param  ItMode: Enable or disable Tx EOT interrept
  * @retval Status
  */
static uint32_t ETH_Prepare_Tx_Descriptors(ETH_HandleTypeDef *heth, ETH_TxPacketConfig *pTxConfig, uint32_t ItMode)
{
 8006e40:	b480      	push	{r7}
 8006e42:	b08d      	sub	sp, #52	; 0x34
 8006e44:	af00      	add	r7, sp, #0
 8006e46:	60f8      	str	r0, [r7, #12]
 8006e48:	60b9      	str	r1, [r7, #8]
 8006e4a:	607a      	str	r2, [r7, #4]
  ETH_TxDescListTypeDef *dmatxdesclist = &heth->TxDescList;
 8006e4c:	68fb      	ldr	r3, [r7, #12]
 8006e4e:	3318      	adds	r3, #24
 8006e50:	617b      	str	r3, [r7, #20]
  uint32_t descidx = dmatxdesclist->CurTxDesc;
 8006e52:	697b      	ldr	r3, [r7, #20]
 8006e54:	691b      	ldr	r3, [r3, #16]
 8006e56:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t firstdescidx = dmatxdesclist->CurTxDesc;
 8006e58:	697b      	ldr	r3, [r7, #20]
 8006e5a:	691b      	ldr	r3, [r3, #16]
 8006e5c:	613b      	str	r3, [r7, #16]
  uint32_t idx;
  uint32_t descnbr = 0;
 8006e5e:	2300      	movs	r3, #0
 8006e60:	627b      	str	r3, [r7, #36]	; 0x24
  ETH_DMADescTypeDef *dmatxdesc = (ETH_DMADescTypeDef *)dmatxdesclist->TxDesc[descidx];
 8006e62:	697b      	ldr	r3, [r7, #20]
 8006e64:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8006e66:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006e6a:	623b      	str	r3, [r7, #32]

  ETH_BufferTypeDef  *txbuffer = pTxConfig->TxBuffer;
 8006e6c:	68bb      	ldr	r3, [r7, #8]
 8006e6e:	689b      	ldr	r3, [r3, #8]
 8006e70:	61fb      	str	r3, [r7, #28]
  uint32_t           bd_count = 0;
 8006e72:	2300      	movs	r3, #0
 8006e74:	61bb      	str	r3, [r7, #24]

  /* Current Tx Descriptor Owned by DMA: cannot be used by the application  */
  if ((READ_BIT(dmatxdesc->DESC3, ETH_DMATXNDESCWBF_OWN) == ETH_DMATXNDESCWBF_OWN)
 8006e76:	6a3b      	ldr	r3, [r7, #32]
 8006e78:	68db      	ldr	r3, [r3, #12]
 8006e7a:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8006e7e:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8006e82:	d007      	beq.n	8006e94 <ETH_Prepare_Tx_Descriptors+0x54>
      || (dmatxdesclist->PacketAddress[descidx] != NULL))
 8006e84:	697a      	ldr	r2, [r7, #20]
 8006e86:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006e88:	3304      	adds	r3, #4
 8006e8a:	009b      	lsls	r3, r3, #2
 8006e8c:	4413      	add	r3, r2
 8006e8e:	685b      	ldr	r3, [r3, #4]
 8006e90:	2b00      	cmp	r3, #0
 8006e92:	d001      	beq.n	8006e98 <ETH_Prepare_Tx_Descriptors+0x58>
  {
    return HAL_ETH_ERROR_BUSY;
 8006e94:	2302      	movs	r3, #2
 8006e96:	e259      	b.n	800734c <ETH_Prepare_Tx_Descriptors+0x50c>

  /***************************************************************************/
  /*****************    Context descriptor configuration (Optional) **********/
  /***************************************************************************/
  /* If VLAN tag is enabled for this packet */
  if (READ_BIT(pTxConfig->Attributes, ETH_TX_PACKETS_FEATURES_VLANTAG) != (uint32_t)RESET)
 8006e98:	68bb      	ldr	r3, [r7, #8]
 8006e9a:	681b      	ldr	r3, [r3, #0]
 8006e9c:	f003 0304 	and.w	r3, r3, #4
 8006ea0:	2b00      	cmp	r3, #0
 8006ea2:	d044      	beq.n	8006f2e <ETH_Prepare_Tx_Descriptors+0xee>
  {
    /* Set vlan tag value */
    MODIFY_REG(dmatxdesc->DESC3, ETH_DMATXCDESC_VT, pTxConfig->VlanTag);
 8006ea4:	6a3b      	ldr	r3, [r7, #32]
 8006ea6:	68da      	ldr	r2, [r3, #12]
 8006ea8:	4b75      	ldr	r3, [pc, #468]	; (8007080 <ETH_Prepare_Tx_Descriptors+0x240>)
 8006eaa:	4013      	ands	r3, r2
 8006eac:	68ba      	ldr	r2, [r7, #8]
 8006eae:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8006eb0:	431a      	orrs	r2, r3
 8006eb2:	6a3b      	ldr	r3, [r7, #32]
 8006eb4:	60da      	str	r2, [r3, #12]
    /* Set vlan tag valid bit */
    SET_BIT(dmatxdesc->DESC3, ETH_DMATXCDESC_VLTV);
 8006eb6:	6a3b      	ldr	r3, [r7, #32]
 8006eb8:	68db      	ldr	r3, [r3, #12]
 8006eba:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8006ebe:	6a3b      	ldr	r3, [r7, #32]
 8006ec0:	60da      	str	r2, [r3, #12]
    /* Set the descriptor as the vlan input source */
    SET_BIT(heth->Instance->MACVIR, ETH_MACVIR_VLTI);
 8006ec2:	68fb      	ldr	r3, [r7, #12]
 8006ec4:	681b      	ldr	r3, [r3, #0]
 8006ec6:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8006ec8:	68fb      	ldr	r3, [r7, #12]
 8006eca:	681b      	ldr	r3, [r3, #0]
 8006ecc:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
 8006ed0:	661a      	str	r2, [r3, #96]	; 0x60

    /* if inner VLAN is enabled */
    if (READ_BIT(pTxConfig->Attributes, ETH_TX_PACKETS_FEATURES_INNERVLANTAG) != (uint32_t)RESET)
 8006ed2:	68bb      	ldr	r3, [r7, #8]
 8006ed4:	681b      	ldr	r3, [r3, #0]
 8006ed6:	f003 0308 	and.w	r3, r3, #8
 8006eda:	2b00      	cmp	r3, #0
 8006edc:	d027      	beq.n	8006f2e <ETH_Prepare_Tx_Descriptors+0xee>
    {
      /* Set inner vlan tag value */
      MODIFY_REG(dmatxdesc->DESC2, ETH_DMATXCDESC_IVT, (pTxConfig->InnerVlanTag << 16));
 8006ede:	6a3b      	ldr	r3, [r7, #32]
 8006ee0:	689b      	ldr	r3, [r3, #8]
 8006ee2:	b29a      	uxth	r2, r3
 8006ee4:	68bb      	ldr	r3, [r7, #8]
 8006ee6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006ee8:	041b      	lsls	r3, r3, #16
 8006eea:	431a      	orrs	r2, r3
 8006eec:	6a3b      	ldr	r3, [r7, #32]
 8006eee:	609a      	str	r2, [r3, #8]
      /* Set inner vlan tag valid bit */
      SET_BIT(dmatxdesc->DESC3, ETH_DMATXCDESC_IVLTV);
 8006ef0:	6a3b      	ldr	r3, [r7, #32]
 8006ef2:	68db      	ldr	r3, [r3, #12]
 8006ef4:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 8006ef8:	6a3b      	ldr	r3, [r7, #32]
 8006efa:	60da      	str	r2, [r3, #12]

      /* Set Vlan Tag control */
      MODIFY_REG(dmatxdesc->DESC3, ETH_DMATXCDESC_IVTIR, pTxConfig->InnerVlanCtrl);
 8006efc:	6a3b      	ldr	r3, [r7, #32]
 8006efe:	68db      	ldr	r3, [r3, #12]
 8006f00:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8006f04:	68bb      	ldr	r3, [r7, #8]
 8006f06:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006f08:	431a      	orrs	r2, r3
 8006f0a:	6a3b      	ldr	r3, [r7, #32]
 8006f0c:	60da      	str	r2, [r3, #12]

      /* Set the descriptor as the inner vlan input source */
      SET_BIT(heth->Instance->MACIVIR, ETH_MACIVIR_VLTI);
 8006f0e:	68fb      	ldr	r3, [r7, #12]
 8006f10:	681b      	ldr	r3, [r3, #0]
 8006f12:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 8006f14:	68fb      	ldr	r3, [r7, #12]
 8006f16:	681b      	ldr	r3, [r3, #0]
 8006f18:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
 8006f1c:	665a      	str	r2, [r3, #100]	; 0x64
      /* Enable double VLAN processing */
      SET_BIT(heth->Instance->MACVTR, ETH_MACVTR_EDVLP);
 8006f1e:	68fb      	ldr	r3, [r7, #12]
 8006f20:	681b      	ldr	r3, [r3, #0]
 8006f22:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8006f24:	68fb      	ldr	r3, [r7, #12]
 8006f26:	681b      	ldr	r3, [r3, #0]
 8006f28:	f042 6280 	orr.w	r2, r2, #67108864	; 0x4000000
 8006f2c:	651a      	str	r2, [r3, #80]	; 0x50
    }
  }

  /* if tcp segmentation is enabled for this packet */
  if (READ_BIT(pTxConfig->Attributes, ETH_TX_PACKETS_FEATURES_TSO) != (uint32_t)RESET)
 8006f2e:	68bb      	ldr	r3, [r7, #8]
 8006f30:	681b      	ldr	r3, [r3, #0]
 8006f32:	f003 0310 	and.w	r3, r3, #16
 8006f36:	2b00      	cmp	r3, #0
 8006f38:	d00e      	beq.n	8006f58 <ETH_Prepare_Tx_Descriptors+0x118>
  {
    /* Set MSS value */
    MODIFY_REG(dmatxdesc->DESC2, ETH_DMATXCDESC_MSS, pTxConfig->MaxSegmentSize);
 8006f3a:	6a3b      	ldr	r3, [r7, #32]
 8006f3c:	689a      	ldr	r2, [r3, #8]
 8006f3e:	4b51      	ldr	r3, [pc, #324]	; (8007084 <ETH_Prepare_Tx_Descriptors+0x244>)
 8006f40:	4013      	ands	r3, r2
 8006f42:	68ba      	ldr	r2, [r7, #8]
 8006f44:	6992      	ldr	r2, [r2, #24]
 8006f46:	431a      	orrs	r2, r3
 8006f48:	6a3b      	ldr	r3, [r7, #32]
 8006f4a:	609a      	str	r2, [r3, #8]
    /* Set MSS valid bit */
    SET_BIT(dmatxdesc->DESC3, ETH_DMATXCDESC_TCMSSV);
 8006f4c:	6a3b      	ldr	r3, [r7, #32]
 8006f4e:	68db      	ldr	r3, [r3, #12]
 8006f50:	f043 6280 	orr.w	r2, r3, #67108864	; 0x4000000
 8006f54:	6a3b      	ldr	r3, [r7, #32]
 8006f56:	60da      	str	r2, [r3, #12]
  }

  if ((READ_BIT(pTxConfig->Attributes, ETH_TX_PACKETS_FEATURES_VLANTAG) != (uint32_t)RESET)
 8006f58:	68bb      	ldr	r3, [r7, #8]
 8006f5a:	681b      	ldr	r3, [r3, #0]
 8006f5c:	f003 0304 	and.w	r3, r3, #4
 8006f60:	2b00      	cmp	r3, #0
 8006f62:	d105      	bne.n	8006f70 <ETH_Prepare_Tx_Descriptors+0x130>
      || (READ_BIT(pTxConfig->Attributes, ETH_TX_PACKETS_FEATURES_TSO) != (uint32_t)RESET))
 8006f64:	68bb      	ldr	r3, [r7, #8]
 8006f66:	681b      	ldr	r3, [r3, #0]
 8006f68:	f003 0310 	and.w	r3, r3, #16
 8006f6c:	2b00      	cmp	r3, #0
 8006f6e:	d036      	beq.n	8006fde <ETH_Prepare_Tx_Descriptors+0x19e>
  {
    /* Set as context descriptor */
    SET_BIT(dmatxdesc->DESC3, ETH_DMATXCDESC_CTXT);
 8006f70:	6a3b      	ldr	r3, [r7, #32]
 8006f72:	68db      	ldr	r3, [r3, #12]
 8006f74:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 8006f78:	6a3b      	ldr	r3, [r7, #32]
 8006f7a:	60da      	str	r2, [r3, #12]
  __ASM volatile ("dmb 0xF":::"memory");
 8006f7c:	f3bf 8f5f 	dmb	sy
}
 8006f80:	bf00      	nop
    /* Ensure rest of descriptor is written to RAM before the OWN bit */
    __DMB();
    /* Set own bit */
    SET_BIT(dmatxdesc->DESC3, ETH_DMATXCDESC_OWN);
 8006f82:	6a3b      	ldr	r3, [r7, #32]
 8006f84:	68db      	ldr	r3, [r3, #12]
 8006f86:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 8006f8a:	6a3b      	ldr	r3, [r7, #32]
 8006f8c:	60da      	str	r2, [r3, #12]
    /* Increment current tx descriptor index */
    INCR_TX_DESC_INDEX(descidx, 1U);
 8006f8e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006f90:	3301      	adds	r3, #1
 8006f92:	62fb      	str	r3, [r7, #44]	; 0x2c
 8006f94:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006f96:	2b03      	cmp	r3, #3
 8006f98:	d902      	bls.n	8006fa0 <ETH_Prepare_Tx_Descriptors+0x160>
 8006f9a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006f9c:	3b04      	subs	r3, #4
 8006f9e:	62fb      	str	r3, [r7, #44]	; 0x2c
    /* Get current descriptor address */
    dmatxdesc = (ETH_DMADescTypeDef *)dmatxdesclist->TxDesc[descidx];
 8006fa0:	697b      	ldr	r3, [r7, #20]
 8006fa2:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8006fa4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006fa8:	623b      	str	r3, [r7, #32]

    descnbr += 1U;
 8006faa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006fac:	3301      	adds	r3, #1
 8006fae:	627b      	str	r3, [r7, #36]	; 0x24

    /* Current Tx Descriptor Owned by DMA: cannot be used by the application  */
    if (READ_BIT(dmatxdesc->DESC3, ETH_DMATXNDESCWBF_OWN) == ETH_DMATXNDESCWBF_OWN)
 8006fb0:	6a3b      	ldr	r3, [r7, #32]
 8006fb2:	68db      	ldr	r3, [r3, #12]
 8006fb4:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8006fb8:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8006fbc:	d10f      	bne.n	8006fde <ETH_Prepare_Tx_Descriptors+0x19e>
    {
      dmatxdesc = (ETH_DMADescTypeDef *)dmatxdesclist->TxDesc[firstdescidx];
 8006fbe:	697b      	ldr	r3, [r7, #20]
 8006fc0:	693a      	ldr	r2, [r7, #16]
 8006fc2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006fc6:	623b      	str	r3, [r7, #32]
  __ASM volatile ("dmb 0xF":::"memory");
 8006fc8:	f3bf 8f5f 	dmb	sy
}
 8006fcc:	bf00      	nop
      /* Ensure rest of descriptor is written to RAM before the OWN bit */
      __DMB();
      /* Clear own bit */
      CLEAR_BIT(dmatxdesc->DESC3, ETH_DMATXCDESC_OWN);
 8006fce:	6a3b      	ldr	r3, [r7, #32]
 8006fd0:	68db      	ldr	r3, [r3, #12]
 8006fd2:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8006fd6:	6a3b      	ldr	r3, [r7, #32]
 8006fd8:	60da      	str	r2, [r3, #12]

      return HAL_ETH_ERROR_BUSY;
 8006fda:	2302      	movs	r3, #2
 8006fdc:	e1b6      	b.n	800734c <ETH_Prepare_Tx_Descriptors+0x50c>

  /***************************************************************************/
  /*****************    Normal descriptors configuration     *****************/
  /***************************************************************************/

  descnbr += 1U;
 8006fde:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006fe0:	3301      	adds	r3, #1
 8006fe2:	627b      	str	r3, [r7, #36]	; 0x24

  /* Set header or buffer 1 address */
  WRITE_REG(dmatxdesc->DESC0, (uint32_t)txbuffer->buffer);
 8006fe4:	69fb      	ldr	r3, [r7, #28]
 8006fe6:	681b      	ldr	r3, [r3, #0]
 8006fe8:	461a      	mov	r2, r3
 8006fea:	6a3b      	ldr	r3, [r7, #32]
 8006fec:	601a      	str	r2, [r3, #0]
  /* Set header or buffer 1 Length */
  MODIFY_REG(dmatxdesc->DESC2, ETH_DMATXNDESCRF_B1L, txbuffer->len);
 8006fee:	6a3b      	ldr	r3, [r7, #32]
 8006ff0:	689a      	ldr	r2, [r3, #8]
 8006ff2:	4b24      	ldr	r3, [pc, #144]	; (8007084 <ETH_Prepare_Tx_Descriptors+0x244>)
 8006ff4:	4013      	ands	r3, r2
 8006ff6:	69fa      	ldr	r2, [r7, #28]
 8006ff8:	6852      	ldr	r2, [r2, #4]
 8006ffa:	431a      	orrs	r2, r3
 8006ffc:	6a3b      	ldr	r3, [r7, #32]
 8006ffe:	609a      	str	r2, [r3, #8]

  if (txbuffer->next != NULL)
 8007000:	69fb      	ldr	r3, [r7, #28]
 8007002:	689b      	ldr	r3, [r3, #8]
 8007004:	2b00      	cmp	r3, #0
 8007006:	d012      	beq.n	800702e <ETH_Prepare_Tx_Descriptors+0x1ee>
  {
    txbuffer = txbuffer->next;
 8007008:	69fb      	ldr	r3, [r7, #28]
 800700a:	689b      	ldr	r3, [r3, #8]
 800700c:	61fb      	str	r3, [r7, #28]
    /* Set buffer 2 address */
    WRITE_REG(dmatxdesc->DESC1, (uint32_t)txbuffer->buffer);
 800700e:	69fb      	ldr	r3, [r7, #28]
 8007010:	681b      	ldr	r3, [r3, #0]
 8007012:	461a      	mov	r2, r3
 8007014:	6a3b      	ldr	r3, [r7, #32]
 8007016:	605a      	str	r2, [r3, #4]
    /* Set buffer 2 Length */
    MODIFY_REG(dmatxdesc->DESC2, ETH_DMATXNDESCRF_B2L, (txbuffer->len << 16));
 8007018:	6a3b      	ldr	r3, [r7, #32]
 800701a:	689a      	ldr	r2, [r3, #8]
 800701c:	4b1a      	ldr	r3, [pc, #104]	; (8007088 <ETH_Prepare_Tx_Descriptors+0x248>)
 800701e:	4013      	ands	r3, r2
 8007020:	69fa      	ldr	r2, [r7, #28]
 8007022:	6852      	ldr	r2, [r2, #4]
 8007024:	0412      	lsls	r2, r2, #16
 8007026:	431a      	orrs	r2, r3
 8007028:	6a3b      	ldr	r3, [r7, #32]
 800702a:	609a      	str	r2, [r3, #8]
 800702c:	e008      	b.n	8007040 <ETH_Prepare_Tx_Descriptors+0x200>
  }
  else
  {
    WRITE_REG(dmatxdesc->DESC1, 0x0);
 800702e:	6a3b      	ldr	r3, [r7, #32]
 8007030:	2200      	movs	r2, #0
 8007032:	605a      	str	r2, [r3, #4]
    /* Set buffer 2 Length */
    MODIFY_REG(dmatxdesc->DESC2, ETH_DMATXNDESCRF_B2L, 0x0U);
 8007034:	6a3b      	ldr	r3, [r7, #32]
 8007036:	689a      	ldr	r2, [r3, #8]
 8007038:	4b13      	ldr	r3, [pc, #76]	; (8007088 <ETH_Prepare_Tx_Descriptors+0x248>)
 800703a:	4013      	ands	r3, r2
 800703c:	6a3a      	ldr	r2, [r7, #32]
 800703e:	6093      	str	r3, [r2, #8]
  }

  if (READ_BIT(pTxConfig->Attributes, ETH_TX_PACKETS_FEATURES_TSO) != (uint32_t)RESET)
 8007040:	68bb      	ldr	r3, [r7, #8]
 8007042:	681b      	ldr	r3, [r3, #0]
 8007044:	f003 0310 	and.w	r3, r3, #16
 8007048:	2b00      	cmp	r3, #0
 800704a:	d021      	beq.n	8007090 <ETH_Prepare_Tx_Descriptors+0x250>
  {
    /* Set TCP Header length */
    MODIFY_REG(dmatxdesc->DESC3, ETH_DMATXNDESCRF_THL, (pTxConfig->TCPHeaderLen << 19));
 800704c:	6a3b      	ldr	r3, [r7, #32]
 800704e:	68db      	ldr	r3, [r3, #12]
 8007050:	f423 02f0 	bic.w	r2, r3, #7864320	; 0x780000
 8007054:	68bb      	ldr	r3, [r7, #8]
 8007056:	6a1b      	ldr	r3, [r3, #32]
 8007058:	04db      	lsls	r3, r3, #19
 800705a:	431a      	orrs	r2, r3
 800705c:	6a3b      	ldr	r3, [r7, #32]
 800705e:	60da      	str	r2, [r3, #12]
    /* Set TCP payload length */
    MODIFY_REG(dmatxdesc->DESC3, ETH_DMATXNDESCRF_TPL, pTxConfig->PayloadLen);
 8007060:	6a3b      	ldr	r3, [r7, #32]
 8007062:	68da      	ldr	r2, [r3, #12]
 8007064:	4b09      	ldr	r3, [pc, #36]	; (800708c <ETH_Prepare_Tx_Descriptors+0x24c>)
 8007066:	4013      	ands	r3, r2
 8007068:	68ba      	ldr	r2, [r7, #8]
 800706a:	69d2      	ldr	r2, [r2, #28]
 800706c:	431a      	orrs	r2, r3
 800706e:	6a3b      	ldr	r3, [r7, #32]
 8007070:	60da      	str	r2, [r3, #12]
    /* Set TCP Segmentation Enabled bit */
    SET_BIT(dmatxdesc->DESC3, ETH_DMATXNDESCRF_TSE);
 8007072:	6a3b      	ldr	r3, [r7, #32]
 8007074:	68db      	ldr	r3, [r3, #12]
 8007076:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 800707a:	6a3b      	ldr	r3, [r7, #32]
 800707c:	60da      	str	r2, [r3, #12]
 800707e:	e02e      	b.n	80070de <ETH_Prepare_Tx_Descriptors+0x29e>
 8007080:	ffff0000 	.word	0xffff0000
 8007084:	ffffc000 	.word	0xffffc000
 8007088:	c000ffff 	.word	0xc000ffff
 800708c:	fffc0000 	.word	0xfffc0000
  }
  else
  {
    MODIFY_REG(dmatxdesc->DESC3, ETH_DMATXNDESCRF_FL, pTxConfig->Length);
 8007090:	6a3b      	ldr	r3, [r7, #32]
 8007092:	68da      	ldr	r2, [r3, #12]
 8007094:	4b7b      	ldr	r3, [pc, #492]	; (8007284 <ETH_Prepare_Tx_Descriptors+0x444>)
 8007096:	4013      	ands	r3, r2
 8007098:	68ba      	ldr	r2, [r7, #8]
 800709a:	6852      	ldr	r2, [r2, #4]
 800709c:	431a      	orrs	r2, r3
 800709e:	6a3b      	ldr	r3, [r7, #32]
 80070a0:	60da      	str	r2, [r3, #12]

    if (READ_BIT(pTxConfig->Attributes, ETH_TX_PACKETS_FEATURES_CSUM) != (uint32_t)RESET)
 80070a2:	68bb      	ldr	r3, [r7, #8]
 80070a4:	681b      	ldr	r3, [r3, #0]
 80070a6:	f003 0301 	and.w	r3, r3, #1
 80070aa:	2b00      	cmp	r3, #0
 80070ac:	d008      	beq.n	80070c0 <ETH_Prepare_Tx_Descriptors+0x280>
    {
      MODIFY_REG(dmatxdesc->DESC3, ETH_DMATXNDESCRF_CIC, pTxConfig->ChecksumCtrl);
 80070ae:	6a3b      	ldr	r3, [r7, #32]
 80070b0:	68db      	ldr	r3, [r3, #12]
 80070b2:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 80070b6:	68bb      	ldr	r3, [r7, #8]
 80070b8:	695b      	ldr	r3, [r3, #20]
 80070ba:	431a      	orrs	r2, r3
 80070bc:	6a3b      	ldr	r3, [r7, #32]
 80070be:	60da      	str	r2, [r3, #12]
    }

    if (READ_BIT(pTxConfig->Attributes, ETH_TX_PACKETS_FEATURES_CRCPAD) != (uint32_t)RESET)
 80070c0:	68bb      	ldr	r3, [r7, #8]
 80070c2:	681b      	ldr	r3, [r3, #0]
 80070c4:	f003 0320 	and.w	r3, r3, #32
 80070c8:	2b00      	cmp	r3, #0
 80070ca:	d008      	beq.n	80070de <ETH_Prepare_Tx_Descriptors+0x29e>
    {
      MODIFY_REG(dmatxdesc->DESC3, ETH_DMATXNDESCRF_CPC, pTxConfig->CRCPadCtrl);
 80070cc:	6a3b      	ldr	r3, [r7, #32]
 80070ce:	68db      	ldr	r3, [r3, #12]
 80070d0:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 80070d4:	68bb      	ldr	r3, [r7, #8]
 80070d6:	691b      	ldr	r3, [r3, #16]
 80070d8:	431a      	orrs	r2, r3
 80070da:	6a3b      	ldr	r3, [r7, #32]
 80070dc:	60da      	str	r2, [r3, #12]
    }
  }

  if (READ_BIT(pTxConfig->Attributes, ETH_TX_PACKETS_FEATURES_VLANTAG) != (uint32_t)RESET)
 80070de:	68bb      	ldr	r3, [r7, #8]
 80070e0:	681b      	ldr	r3, [r3, #0]
 80070e2:	f003 0304 	and.w	r3, r3, #4
 80070e6:	2b00      	cmp	r3, #0
 80070e8:	d008      	beq.n	80070fc <ETH_Prepare_Tx_Descriptors+0x2bc>
  {
    /* Set Vlan Tag control */
    MODIFY_REG(dmatxdesc->DESC2, ETH_DMATXNDESCRF_VTIR, pTxConfig->VlanCtrl);
 80070ea:	6a3b      	ldr	r3, [r7, #32]
 80070ec:	689b      	ldr	r3, [r3, #8]
 80070ee:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 80070f2:	68bb      	ldr	r3, [r7, #8]
 80070f4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80070f6:	431a      	orrs	r2, r3
 80070f8:	6a3b      	ldr	r3, [r7, #32]
 80070fa:	609a      	str	r2, [r3, #8]
  }

  /* Mark it as First Descriptor */
  SET_BIT(dmatxdesc->DESC3, ETH_DMATXNDESCRF_FD);
 80070fc:	6a3b      	ldr	r3, [r7, #32]
 80070fe:	68db      	ldr	r3, [r3, #12]
 8007100:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 8007104:	6a3b      	ldr	r3, [r7, #32]
 8007106:	60da      	str	r2, [r3, #12]
  /* Mark it as NORMAL descriptor */
  CLEAR_BIT(dmatxdesc->DESC3, ETH_DMATXNDESCRF_CTXT);
 8007108:	6a3b      	ldr	r3, [r7, #32]
 800710a:	68db      	ldr	r3, [r3, #12]
 800710c:	f023 4280 	bic.w	r2, r3, #1073741824	; 0x40000000
 8007110:	6a3b      	ldr	r3, [r7, #32]
 8007112:	60da      	str	r2, [r3, #12]
  __ASM volatile ("dmb 0xF":::"memory");
 8007114:	f3bf 8f5f 	dmb	sy
}
 8007118:	bf00      	nop
  /* Ensure rest of descriptor is written to RAM before the OWN bit */
  __DMB();
  /* set OWN bit of FIRST descriptor */
  SET_BIT(dmatxdesc->DESC3, ETH_DMATXNDESCRF_OWN);
 800711a:	6a3b      	ldr	r3, [r7, #32]
 800711c:	68db      	ldr	r3, [r3, #12]
 800711e:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 8007122:	6a3b      	ldr	r3, [r7, #32]
 8007124:	60da      	str	r2, [r3, #12]

  /* If source address insertion/replacement is enabled for this packet */
  if (READ_BIT(pTxConfig->Attributes, ETH_TX_PACKETS_FEATURES_SAIC) != (uint32_t)RESET)
 8007126:	68bb      	ldr	r3, [r7, #8]
 8007128:	681b      	ldr	r3, [r3, #0]
 800712a:	f003 0302 	and.w	r3, r3, #2
 800712e:	2b00      	cmp	r3, #0
 8007130:	f000 80da 	beq.w	80072e8 <ETH_Prepare_Tx_Descriptors+0x4a8>
  {
    MODIFY_REG(dmatxdesc->DESC3, ETH_DMATXNDESCRF_SAIC, pTxConfig->SrcAddrCtrl);
 8007134:	6a3b      	ldr	r3, [r7, #32]
 8007136:	68db      	ldr	r3, [r3, #12]
 8007138:	f023 7260 	bic.w	r2, r3, #58720256	; 0x3800000
 800713c:	68bb      	ldr	r3, [r7, #8]
 800713e:	68db      	ldr	r3, [r3, #12]
 8007140:	431a      	orrs	r2, r3
 8007142:	6a3b      	ldr	r3, [r7, #32]
 8007144:	60da      	str	r2, [r3, #12]
  }

  /* only if the packet is split into more than one descriptors > 1 */
  while (txbuffer->next != NULL)
 8007146:	e0cf      	b.n	80072e8 <ETH_Prepare_Tx_Descriptors+0x4a8>
  {
    /* Clear the LD bit of previous descriptor */
    CLEAR_BIT(dmatxdesc->DESC3, ETH_DMATXNDESCRF_LD);
 8007148:	6a3b      	ldr	r3, [r7, #32]
 800714a:	68db      	ldr	r3, [r3, #12]
 800714c:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 8007150:	6a3b      	ldr	r3, [r7, #32]
 8007152:	60da      	str	r2, [r3, #12]
    /* Increment current tx descriptor index */
    INCR_TX_DESC_INDEX(descidx, 1U);
 8007154:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007156:	3301      	adds	r3, #1
 8007158:	62fb      	str	r3, [r7, #44]	; 0x2c
 800715a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800715c:	2b03      	cmp	r3, #3
 800715e:	d902      	bls.n	8007166 <ETH_Prepare_Tx_Descriptors+0x326>
 8007160:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007162:	3b04      	subs	r3, #4
 8007164:	62fb      	str	r3, [r7, #44]	; 0x2c
    /* Get current descriptor address */
    dmatxdesc = (ETH_DMADescTypeDef *)dmatxdesclist->TxDesc[descidx];
 8007166:	697b      	ldr	r3, [r7, #20]
 8007168:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800716a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800716e:	623b      	str	r3, [r7, #32]

    /* Clear the FD bit of new Descriptor */
    CLEAR_BIT(dmatxdesc->DESC3, ETH_DMATXNDESCRF_FD);
 8007170:	6a3b      	ldr	r3, [r7, #32]
 8007172:	68db      	ldr	r3, [r3, #12]
 8007174:	f023 5200 	bic.w	r2, r3, #536870912	; 0x20000000
 8007178:	6a3b      	ldr	r3, [r7, #32]
 800717a:	60da      	str	r2, [r3, #12]

    /* Current Tx Descriptor Owned by DMA: cannot be used by the application  */
    if ((READ_BIT(dmatxdesc->DESC3, ETH_DMATXNDESCRF_OWN) == ETH_DMATXNDESCRF_OWN)
 800717c:	6a3b      	ldr	r3, [r7, #32]
 800717e:	68db      	ldr	r3, [r3, #12]
 8007180:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8007184:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8007188:	d007      	beq.n	800719a <ETH_Prepare_Tx_Descriptors+0x35a>
        || (dmatxdesclist->PacketAddress[descidx] != NULL))
 800718a:	697a      	ldr	r2, [r7, #20]
 800718c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800718e:	3304      	adds	r3, #4
 8007190:	009b      	lsls	r3, r3, #2
 8007192:	4413      	add	r3, r2
 8007194:	685b      	ldr	r3, [r3, #4]
 8007196:	2b00      	cmp	r3, #0
 8007198:	d029      	beq.n	80071ee <ETH_Prepare_Tx_Descriptors+0x3ae>
    {
      descidx = firstdescidx;
 800719a:	693b      	ldr	r3, [r7, #16]
 800719c:	62fb      	str	r3, [r7, #44]	; 0x2c
      dmatxdesc = (ETH_DMADescTypeDef *)dmatxdesclist->TxDesc[descidx];
 800719e:	697b      	ldr	r3, [r7, #20]
 80071a0:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80071a2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80071a6:	623b      	str	r3, [r7, #32]

      /* clear previous desc own bit */
      for (idx = 0; idx < descnbr; idx ++)
 80071a8:	2300      	movs	r3, #0
 80071aa:	62bb      	str	r3, [r7, #40]	; 0x28
 80071ac:	e019      	b.n	80071e2 <ETH_Prepare_Tx_Descriptors+0x3a2>
  __ASM volatile ("dmb 0xF":::"memory");
 80071ae:	f3bf 8f5f 	dmb	sy
}
 80071b2:	bf00      	nop
      {
        /* Ensure rest of descriptor is written to RAM before the OWN bit */
        __DMB();

        CLEAR_BIT(dmatxdesc->DESC3, ETH_DMATXNDESCRF_OWN);
 80071b4:	6a3b      	ldr	r3, [r7, #32]
 80071b6:	68db      	ldr	r3, [r3, #12]
 80071b8:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 80071bc:	6a3b      	ldr	r3, [r7, #32]
 80071be:	60da      	str	r2, [r3, #12]

        /* Increment current tx descriptor index */
        INCR_TX_DESC_INDEX(descidx, 1U);
 80071c0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80071c2:	3301      	adds	r3, #1
 80071c4:	62fb      	str	r3, [r7, #44]	; 0x2c
 80071c6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80071c8:	2b03      	cmp	r3, #3
 80071ca:	d902      	bls.n	80071d2 <ETH_Prepare_Tx_Descriptors+0x392>
 80071cc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80071ce:	3b04      	subs	r3, #4
 80071d0:	62fb      	str	r3, [r7, #44]	; 0x2c
        /* Get current descriptor address */
        dmatxdesc = (ETH_DMADescTypeDef *)dmatxdesclist->TxDesc[descidx];
 80071d2:	697b      	ldr	r3, [r7, #20]
 80071d4:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80071d6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80071da:	623b      	str	r3, [r7, #32]
      for (idx = 0; idx < descnbr; idx ++)
 80071dc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80071de:	3301      	adds	r3, #1
 80071e0:	62bb      	str	r3, [r7, #40]	; 0x28
 80071e2:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80071e4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80071e6:	429a      	cmp	r2, r3
 80071e8:	d3e1      	bcc.n	80071ae <ETH_Prepare_Tx_Descriptors+0x36e>
      }

      return HAL_ETH_ERROR_BUSY;
 80071ea:	2302      	movs	r3, #2
 80071ec:	e0ae      	b.n	800734c <ETH_Prepare_Tx_Descriptors+0x50c>
    }

    descnbr += 1U;
 80071ee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80071f0:	3301      	adds	r3, #1
 80071f2:	627b      	str	r3, [r7, #36]	; 0x24

    /* Get the next Tx buffer in the list */
    txbuffer = txbuffer->next;
 80071f4:	69fb      	ldr	r3, [r7, #28]
 80071f6:	689b      	ldr	r3, [r3, #8]
 80071f8:	61fb      	str	r3, [r7, #28]

    /* Set header or buffer 1 address */
    WRITE_REG(dmatxdesc->DESC0, (uint32_t)txbuffer->buffer);
 80071fa:	69fb      	ldr	r3, [r7, #28]
 80071fc:	681b      	ldr	r3, [r3, #0]
 80071fe:	461a      	mov	r2, r3
 8007200:	6a3b      	ldr	r3, [r7, #32]
 8007202:	601a      	str	r2, [r3, #0]
    /* Set header or buffer 1 Length */
    MODIFY_REG(dmatxdesc->DESC2, ETH_DMATXNDESCRF_B1L, txbuffer->len);
 8007204:	6a3b      	ldr	r3, [r7, #32]
 8007206:	689a      	ldr	r2, [r3, #8]
 8007208:	4b1f      	ldr	r3, [pc, #124]	; (8007288 <ETH_Prepare_Tx_Descriptors+0x448>)
 800720a:	4013      	ands	r3, r2
 800720c:	69fa      	ldr	r2, [r7, #28]
 800720e:	6852      	ldr	r2, [r2, #4]
 8007210:	431a      	orrs	r2, r3
 8007212:	6a3b      	ldr	r3, [r7, #32]
 8007214:	609a      	str	r2, [r3, #8]

    if (txbuffer->next != NULL)
 8007216:	69fb      	ldr	r3, [r7, #28]
 8007218:	689b      	ldr	r3, [r3, #8]
 800721a:	2b00      	cmp	r3, #0
 800721c:	d012      	beq.n	8007244 <ETH_Prepare_Tx_Descriptors+0x404>
    {
      /* Get the next Tx buffer in the list */
      txbuffer = txbuffer->next;
 800721e:	69fb      	ldr	r3, [r7, #28]
 8007220:	689b      	ldr	r3, [r3, #8]
 8007222:	61fb      	str	r3, [r7, #28]
      /* Set buffer 2 address */
      WRITE_REG(dmatxdesc->DESC1, (uint32_t)txbuffer->buffer);
 8007224:	69fb      	ldr	r3, [r7, #28]
 8007226:	681b      	ldr	r3, [r3, #0]
 8007228:	461a      	mov	r2, r3
 800722a:	6a3b      	ldr	r3, [r7, #32]
 800722c:	605a      	str	r2, [r3, #4]
      /* Set buffer 2 Length */
      MODIFY_REG(dmatxdesc->DESC2, ETH_DMATXNDESCRF_B2L, (txbuffer->len << 16));
 800722e:	6a3b      	ldr	r3, [r7, #32]
 8007230:	689a      	ldr	r2, [r3, #8]
 8007232:	4b16      	ldr	r3, [pc, #88]	; (800728c <ETH_Prepare_Tx_Descriptors+0x44c>)
 8007234:	4013      	ands	r3, r2
 8007236:	69fa      	ldr	r2, [r7, #28]
 8007238:	6852      	ldr	r2, [r2, #4]
 800723a:	0412      	lsls	r2, r2, #16
 800723c:	431a      	orrs	r2, r3
 800723e:	6a3b      	ldr	r3, [r7, #32]
 8007240:	609a      	str	r2, [r3, #8]
 8007242:	e008      	b.n	8007256 <ETH_Prepare_Tx_Descriptors+0x416>
    }
    else
    {
      WRITE_REG(dmatxdesc->DESC1, 0x0);
 8007244:	6a3b      	ldr	r3, [r7, #32]
 8007246:	2200      	movs	r2, #0
 8007248:	605a      	str	r2, [r3, #4]
      /* Set buffer 2 Length */
      MODIFY_REG(dmatxdesc->DESC2, ETH_DMATXNDESCRF_B2L, 0x0U);
 800724a:	6a3b      	ldr	r3, [r7, #32]
 800724c:	689a      	ldr	r2, [r3, #8]
 800724e:	4b0f      	ldr	r3, [pc, #60]	; (800728c <ETH_Prepare_Tx_Descriptors+0x44c>)
 8007250:	4013      	ands	r3, r2
 8007252:	6a3a      	ldr	r2, [r7, #32]
 8007254:	6093      	str	r3, [r2, #8]
    }

    if (READ_BIT(pTxConfig->Attributes, ETH_TX_PACKETS_FEATURES_TSO) != (uint32_t)RESET)
 8007256:	68bb      	ldr	r3, [r7, #8]
 8007258:	681b      	ldr	r3, [r3, #0]
 800725a:	f003 0310 	and.w	r3, r3, #16
 800725e:	2b00      	cmp	r3, #0
 8007260:	d018      	beq.n	8007294 <ETH_Prepare_Tx_Descriptors+0x454>
    {
      /* Set TCP payload length */
      MODIFY_REG(dmatxdesc->DESC3, ETH_DMATXNDESCRF_TPL, pTxConfig->PayloadLen);
 8007262:	6a3b      	ldr	r3, [r7, #32]
 8007264:	68da      	ldr	r2, [r3, #12]
 8007266:	4b0a      	ldr	r3, [pc, #40]	; (8007290 <ETH_Prepare_Tx_Descriptors+0x450>)
 8007268:	4013      	ands	r3, r2
 800726a:	68ba      	ldr	r2, [r7, #8]
 800726c:	69d2      	ldr	r2, [r2, #28]
 800726e:	431a      	orrs	r2, r3
 8007270:	6a3b      	ldr	r3, [r7, #32]
 8007272:	60da      	str	r2, [r3, #12]
      /* Set TCP Segmentation Enabled bit */
      SET_BIT(dmatxdesc->DESC3, ETH_DMATXNDESCRF_TSE);
 8007274:	6a3b      	ldr	r3, [r7, #32]
 8007276:	68db      	ldr	r3, [r3, #12]
 8007278:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 800727c:	6a3b      	ldr	r3, [r7, #32]
 800727e:	60da      	str	r2, [r3, #12]
 8007280:	e020      	b.n	80072c4 <ETH_Prepare_Tx_Descriptors+0x484>
 8007282:	bf00      	nop
 8007284:	ffff8000 	.word	0xffff8000
 8007288:	ffffc000 	.word	0xffffc000
 800728c:	c000ffff 	.word	0xc000ffff
 8007290:	fffc0000 	.word	0xfffc0000
    }
    else
    {
      /* Set the packet length */
      MODIFY_REG(dmatxdesc->DESC3, ETH_DMATXNDESCRF_FL, pTxConfig->Length);
 8007294:	6a3b      	ldr	r3, [r7, #32]
 8007296:	68da      	ldr	r2, [r3, #12]
 8007298:	4b2f      	ldr	r3, [pc, #188]	; (8007358 <ETH_Prepare_Tx_Descriptors+0x518>)
 800729a:	4013      	ands	r3, r2
 800729c:	68ba      	ldr	r2, [r7, #8]
 800729e:	6852      	ldr	r2, [r2, #4]
 80072a0:	431a      	orrs	r2, r3
 80072a2:	6a3b      	ldr	r3, [r7, #32]
 80072a4:	60da      	str	r2, [r3, #12]

      if (READ_BIT(pTxConfig->Attributes, ETH_TX_PACKETS_FEATURES_CSUM) != (uint32_t)RESET)
 80072a6:	68bb      	ldr	r3, [r7, #8]
 80072a8:	681b      	ldr	r3, [r3, #0]
 80072aa:	f003 0301 	and.w	r3, r3, #1
 80072ae:	2b00      	cmp	r3, #0
 80072b0:	d008      	beq.n	80072c4 <ETH_Prepare_Tx_Descriptors+0x484>
      {
        /* Checksum Insertion Control */
        MODIFY_REG(dmatxdesc->DESC3, ETH_DMATXNDESCRF_CIC, pTxConfig->ChecksumCtrl);
 80072b2:	6a3b      	ldr	r3, [r7, #32]
 80072b4:	68db      	ldr	r3, [r3, #12]
 80072b6:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 80072ba:	68bb      	ldr	r3, [r7, #8]
 80072bc:	695b      	ldr	r3, [r3, #20]
 80072be:	431a      	orrs	r2, r3
 80072c0:	6a3b      	ldr	r3, [r7, #32]
 80072c2:	60da      	str	r2, [r3, #12]
      }
    }

    bd_count += 1U;
 80072c4:	69bb      	ldr	r3, [r7, #24]
 80072c6:	3301      	adds	r3, #1
 80072c8:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("dmb 0xF":::"memory");
 80072ca:	f3bf 8f5f 	dmb	sy
}
 80072ce:	bf00      	nop

    /* Ensure rest of descriptor is written to RAM before the OWN bit */
    __DMB();
    /* Set Own bit */
    SET_BIT(dmatxdesc->DESC3, ETH_DMATXNDESCRF_OWN);
 80072d0:	6a3b      	ldr	r3, [r7, #32]
 80072d2:	68db      	ldr	r3, [r3, #12]
 80072d4:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 80072d8:	6a3b      	ldr	r3, [r7, #32]
 80072da:	60da      	str	r2, [r3, #12]
    /* Mark it as NORMAL descriptor */
    CLEAR_BIT(dmatxdesc->DESC3, ETH_DMATXNDESCRF_CTXT);
 80072dc:	6a3b      	ldr	r3, [r7, #32]
 80072de:	68db      	ldr	r3, [r3, #12]
 80072e0:	f023 4280 	bic.w	r2, r3, #1073741824	; 0x40000000
 80072e4:	6a3b      	ldr	r3, [r7, #32]
 80072e6:	60da      	str	r2, [r3, #12]
  while (txbuffer->next != NULL)
 80072e8:	69fb      	ldr	r3, [r7, #28]
 80072ea:	689b      	ldr	r3, [r3, #8]
 80072ec:	2b00      	cmp	r3, #0
 80072ee:	f47f af2b 	bne.w	8007148 <ETH_Prepare_Tx_Descriptors+0x308>
  }

  if (ItMode != ((uint32_t)RESET))
 80072f2:	687b      	ldr	r3, [r7, #4]
 80072f4:	2b00      	cmp	r3, #0
 80072f6:	d006      	beq.n	8007306 <ETH_Prepare_Tx_Descriptors+0x4c6>
  {
    /* Set Interrupt on completion bit */
    SET_BIT(dmatxdesc->DESC2, ETH_DMATXNDESCRF_IOC);
 80072f8:	6a3b      	ldr	r3, [r7, #32]
 80072fa:	689b      	ldr	r3, [r3, #8]
 80072fc:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 8007300:	6a3b      	ldr	r3, [r7, #32]
 8007302:	609a      	str	r2, [r3, #8]
 8007304:	e005      	b.n	8007312 <ETH_Prepare_Tx_Descriptors+0x4d2>
  }
  else
  {
    /* Clear Interrupt on completion bit */
    CLEAR_BIT(dmatxdesc->DESC2, ETH_DMATXNDESCRF_IOC);
 8007306:	6a3b      	ldr	r3, [r7, #32]
 8007308:	689b      	ldr	r3, [r3, #8]
 800730a:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 800730e:	6a3b      	ldr	r3, [r7, #32]
 8007310:	609a      	str	r2, [r3, #8]
  }

  /* Mark it as LAST descriptor */
  SET_BIT(dmatxdesc->DESC3, ETH_DMATXNDESCRF_LD);
 8007312:	6a3b      	ldr	r3, [r7, #32]
 8007314:	68db      	ldr	r3, [r3, #12]
 8007316:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 800731a:	6a3b      	ldr	r3, [r7, #32]
 800731c:	60da      	str	r2, [r3, #12]
  /* Save the current packet address to expose it to the application */
  dmatxdesclist->PacketAddress[descidx] = dmatxdesclist->CurrentPacketAddress;
 800731e:	697b      	ldr	r3, [r7, #20]
 8007320:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8007322:	6979      	ldr	r1, [r7, #20]
 8007324:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007326:	3304      	adds	r3, #4
 8007328:	009b      	lsls	r3, r3, #2
 800732a:	440b      	add	r3, r1
 800732c:	605a      	str	r2, [r3, #4]

  dmatxdesclist->CurTxDesc = descidx;
 800732e:	697b      	ldr	r3, [r7, #20]
 8007330:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8007332:	611a      	str	r2, [r3, #16]
  __ASM volatile ("cpsid i" : : : "memory");
 8007334:	b672      	cpsid	i
}
 8007336:	bf00      	nop

  /* disable the interrupt */
  __disable_irq();

  dmatxdesclist->BuffersInUse += bd_count + 1U;
 8007338:	697b      	ldr	r3, [r7, #20]
 800733a:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800733c:	69bb      	ldr	r3, [r7, #24]
 800733e:	4413      	add	r3, r2
 8007340:	1c5a      	adds	r2, r3, #1
 8007342:	697b      	ldr	r3, [r7, #20]
 8007344:	629a      	str	r2, [r3, #40]	; 0x28
  __ASM volatile ("cpsie i" : : : "memory");
 8007346:	b662      	cpsie	i
}
 8007348:	bf00      	nop
  /* Enable interrupts back */
  __enable_irq();


  /* Return function status */
  return HAL_ETH_ERROR_NONE;
 800734a:	2300      	movs	r3, #0
}
 800734c:	4618      	mov	r0, r3
 800734e:	3734      	adds	r7, #52	; 0x34
 8007350:	46bd      	mov	sp, r7
 8007352:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007356:	4770      	bx	lr
 8007358:	ffff8000 	.word	0xffff8000

0800735c <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800735c:	b480      	push	{r7}
 800735e:	b089      	sub	sp, #36	; 0x24
 8007360:	af00      	add	r7, sp, #0
 8007362:	6078      	str	r0, [r7, #4]
 8007364:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8007366:	2300      	movs	r3, #0
 8007368:	61fb      	str	r3, [r7, #28]
  EXTI_Core_TypeDef *EXTI_CurrentCPU;

#if defined(DUAL_CORE) && defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_D2; /* EXTI for CM4 CPU */
#else
  EXTI_CurrentCPU = EXTI_D1; /* EXTI for CM7 CPU */
 800736a:	4b89      	ldr	r3, [pc, #548]	; (8007590 <HAL_GPIO_Init+0x234>)
 800736c:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 800736e:	e194      	b.n	800769a <HAL_GPIO_Init+0x33e>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8007370:	683b      	ldr	r3, [r7, #0]
 8007372:	681a      	ldr	r2, [r3, #0]
 8007374:	2101      	movs	r1, #1
 8007376:	69fb      	ldr	r3, [r7, #28]
 8007378:	fa01 f303 	lsl.w	r3, r1, r3
 800737c:	4013      	ands	r3, r2
 800737e:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00U)
 8007380:	693b      	ldr	r3, [r7, #16]
 8007382:	2b00      	cmp	r3, #0
 8007384:	f000 8186 	beq.w	8007694 <HAL_GPIO_Init+0x338>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8007388:	683b      	ldr	r3, [r7, #0]
 800738a:	685b      	ldr	r3, [r3, #4]
 800738c:	f003 0303 	and.w	r3, r3, #3
 8007390:	2b01      	cmp	r3, #1
 8007392:	d005      	beq.n	80073a0 <HAL_GPIO_Init+0x44>
 8007394:	683b      	ldr	r3, [r7, #0]
 8007396:	685b      	ldr	r3, [r3, #4]
 8007398:	f003 0303 	and.w	r3, r3, #3
 800739c:	2b02      	cmp	r3, #2
 800739e:	d130      	bne.n	8007402 <HAL_GPIO_Init+0xa6>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80073a0:	687b      	ldr	r3, [r7, #4]
 80073a2:	689b      	ldr	r3, [r3, #8]
 80073a4:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 80073a6:	69fb      	ldr	r3, [r7, #28]
 80073a8:	005b      	lsls	r3, r3, #1
 80073aa:	2203      	movs	r2, #3
 80073ac:	fa02 f303 	lsl.w	r3, r2, r3
 80073b0:	43db      	mvns	r3, r3
 80073b2:	69ba      	ldr	r2, [r7, #24]
 80073b4:	4013      	ands	r3, r2
 80073b6:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80073b8:	683b      	ldr	r3, [r7, #0]
 80073ba:	68da      	ldr	r2, [r3, #12]
 80073bc:	69fb      	ldr	r3, [r7, #28]
 80073be:	005b      	lsls	r3, r3, #1
 80073c0:	fa02 f303 	lsl.w	r3, r2, r3
 80073c4:	69ba      	ldr	r2, [r7, #24]
 80073c6:	4313      	orrs	r3, r2
 80073c8:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80073ca:	687b      	ldr	r3, [r7, #4]
 80073cc:	69ba      	ldr	r2, [r7, #24]
 80073ce:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80073d0:	687b      	ldr	r3, [r7, #4]
 80073d2:	685b      	ldr	r3, [r3, #4]
 80073d4:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 80073d6:	2201      	movs	r2, #1
 80073d8:	69fb      	ldr	r3, [r7, #28]
 80073da:	fa02 f303 	lsl.w	r3, r2, r3
 80073de:	43db      	mvns	r3, r3
 80073e0:	69ba      	ldr	r2, [r7, #24]
 80073e2:	4013      	ands	r3, r2
 80073e4:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80073e6:	683b      	ldr	r3, [r7, #0]
 80073e8:	685b      	ldr	r3, [r3, #4]
 80073ea:	091b      	lsrs	r3, r3, #4
 80073ec:	f003 0201 	and.w	r2, r3, #1
 80073f0:	69fb      	ldr	r3, [r7, #28]
 80073f2:	fa02 f303 	lsl.w	r3, r2, r3
 80073f6:	69ba      	ldr	r2, [r7, #24]
 80073f8:	4313      	orrs	r3, r2
 80073fa:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80073fc:	687b      	ldr	r3, [r7, #4]
 80073fe:	69ba      	ldr	r2, [r7, #24]
 8007400:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8007402:	683b      	ldr	r3, [r7, #0]
 8007404:	685b      	ldr	r3, [r3, #4]
 8007406:	f003 0303 	and.w	r3, r3, #3
 800740a:	2b03      	cmp	r3, #3
 800740c:	d017      	beq.n	800743e <HAL_GPIO_Init+0xe2>
      {
       /* Check the Pull parameter */
       assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 800740e:	687b      	ldr	r3, [r7, #4]
 8007410:	68db      	ldr	r3, [r3, #12]
 8007412:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8007414:	69fb      	ldr	r3, [r7, #28]
 8007416:	005b      	lsls	r3, r3, #1
 8007418:	2203      	movs	r2, #3
 800741a:	fa02 f303 	lsl.w	r3, r2, r3
 800741e:	43db      	mvns	r3, r3
 8007420:	69ba      	ldr	r2, [r7, #24]
 8007422:	4013      	ands	r3, r2
 8007424:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8007426:	683b      	ldr	r3, [r7, #0]
 8007428:	689a      	ldr	r2, [r3, #8]
 800742a:	69fb      	ldr	r3, [r7, #28]
 800742c:	005b      	lsls	r3, r3, #1
 800742e:	fa02 f303 	lsl.w	r3, r2, r3
 8007432:	69ba      	ldr	r2, [r7, #24]
 8007434:	4313      	orrs	r3, r2
 8007436:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8007438:	687b      	ldr	r3, [r7, #4]
 800743a:	69ba      	ldr	r2, [r7, #24]
 800743c:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800743e:	683b      	ldr	r3, [r7, #0]
 8007440:	685b      	ldr	r3, [r3, #4]
 8007442:	f003 0303 	and.w	r3, r3, #3
 8007446:	2b02      	cmp	r3, #2
 8007448:	d123      	bne.n	8007492 <HAL_GPIO_Init+0x136>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 800744a:	69fb      	ldr	r3, [r7, #28]
 800744c:	08da      	lsrs	r2, r3, #3
 800744e:	687b      	ldr	r3, [r7, #4]
 8007450:	3208      	adds	r2, #8
 8007452:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007456:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8007458:	69fb      	ldr	r3, [r7, #28]
 800745a:	f003 0307 	and.w	r3, r3, #7
 800745e:	009b      	lsls	r3, r3, #2
 8007460:	220f      	movs	r2, #15
 8007462:	fa02 f303 	lsl.w	r3, r2, r3
 8007466:	43db      	mvns	r3, r3
 8007468:	69ba      	ldr	r2, [r7, #24]
 800746a:	4013      	ands	r3, r2
 800746c:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 800746e:	683b      	ldr	r3, [r7, #0]
 8007470:	691a      	ldr	r2, [r3, #16]
 8007472:	69fb      	ldr	r3, [r7, #28]
 8007474:	f003 0307 	and.w	r3, r3, #7
 8007478:	009b      	lsls	r3, r3, #2
 800747a:	fa02 f303 	lsl.w	r3, r2, r3
 800747e:	69ba      	ldr	r2, [r7, #24]
 8007480:	4313      	orrs	r3, r2
 8007482:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8007484:	69fb      	ldr	r3, [r7, #28]
 8007486:	08da      	lsrs	r2, r3, #3
 8007488:	687b      	ldr	r3, [r7, #4]
 800748a:	3208      	adds	r2, #8
 800748c:	69b9      	ldr	r1, [r7, #24]
 800748e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8007492:	687b      	ldr	r3, [r7, #4]
 8007494:	681b      	ldr	r3, [r3, #0]
 8007496:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8007498:	69fb      	ldr	r3, [r7, #28]
 800749a:	005b      	lsls	r3, r3, #1
 800749c:	2203      	movs	r2, #3
 800749e:	fa02 f303 	lsl.w	r3, r2, r3
 80074a2:	43db      	mvns	r3, r3
 80074a4:	69ba      	ldr	r2, [r7, #24]
 80074a6:	4013      	ands	r3, r2
 80074a8:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80074aa:	683b      	ldr	r3, [r7, #0]
 80074ac:	685b      	ldr	r3, [r3, #4]
 80074ae:	f003 0203 	and.w	r2, r3, #3
 80074b2:	69fb      	ldr	r3, [r7, #28]
 80074b4:	005b      	lsls	r3, r3, #1
 80074b6:	fa02 f303 	lsl.w	r3, r2, r3
 80074ba:	69ba      	ldr	r2, [r7, #24]
 80074bc:	4313      	orrs	r3, r2
 80074be:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80074c0:	687b      	ldr	r3, [r7, #4]
 80074c2:	69ba      	ldr	r2, [r7, #24]
 80074c4:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 80074c6:	683b      	ldr	r3, [r7, #0]
 80074c8:	685b      	ldr	r3, [r3, #4]
 80074ca:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80074ce:	2b00      	cmp	r3, #0
 80074d0:	f000 80e0 	beq.w	8007694 <HAL_GPIO_Init+0x338>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80074d4:	4b2f      	ldr	r3, [pc, #188]	; (8007594 <HAL_GPIO_Init+0x238>)
 80074d6:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 80074da:	4a2e      	ldr	r2, [pc, #184]	; (8007594 <HAL_GPIO_Init+0x238>)
 80074dc:	f043 0302 	orr.w	r3, r3, #2
 80074e0:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 80074e4:	4b2b      	ldr	r3, [pc, #172]	; (8007594 <HAL_GPIO_Init+0x238>)
 80074e6:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 80074ea:	f003 0302 	and.w	r3, r3, #2
 80074ee:	60fb      	str	r3, [r7, #12]
 80074f0:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80074f2:	4a29      	ldr	r2, [pc, #164]	; (8007598 <HAL_GPIO_Init+0x23c>)
 80074f4:	69fb      	ldr	r3, [r7, #28]
 80074f6:	089b      	lsrs	r3, r3, #2
 80074f8:	3302      	adds	r3, #2
 80074fa:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80074fe:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8007500:	69fb      	ldr	r3, [r7, #28]
 8007502:	f003 0303 	and.w	r3, r3, #3
 8007506:	009b      	lsls	r3, r3, #2
 8007508:	220f      	movs	r2, #15
 800750a:	fa02 f303 	lsl.w	r3, r2, r3
 800750e:	43db      	mvns	r3, r3
 8007510:	69ba      	ldr	r2, [r7, #24]
 8007512:	4013      	ands	r3, r2
 8007514:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8007516:	687b      	ldr	r3, [r7, #4]
 8007518:	4a20      	ldr	r2, [pc, #128]	; (800759c <HAL_GPIO_Init+0x240>)
 800751a:	4293      	cmp	r3, r2
 800751c:	d052      	beq.n	80075c4 <HAL_GPIO_Init+0x268>
 800751e:	687b      	ldr	r3, [r7, #4]
 8007520:	4a1f      	ldr	r2, [pc, #124]	; (80075a0 <HAL_GPIO_Init+0x244>)
 8007522:	4293      	cmp	r3, r2
 8007524:	d031      	beq.n	800758a <HAL_GPIO_Init+0x22e>
 8007526:	687b      	ldr	r3, [r7, #4]
 8007528:	4a1e      	ldr	r2, [pc, #120]	; (80075a4 <HAL_GPIO_Init+0x248>)
 800752a:	4293      	cmp	r3, r2
 800752c:	d02b      	beq.n	8007586 <HAL_GPIO_Init+0x22a>
 800752e:	687b      	ldr	r3, [r7, #4]
 8007530:	4a1d      	ldr	r2, [pc, #116]	; (80075a8 <HAL_GPIO_Init+0x24c>)
 8007532:	4293      	cmp	r3, r2
 8007534:	d025      	beq.n	8007582 <HAL_GPIO_Init+0x226>
 8007536:	687b      	ldr	r3, [r7, #4]
 8007538:	4a1c      	ldr	r2, [pc, #112]	; (80075ac <HAL_GPIO_Init+0x250>)
 800753a:	4293      	cmp	r3, r2
 800753c:	d01f      	beq.n	800757e <HAL_GPIO_Init+0x222>
 800753e:	687b      	ldr	r3, [r7, #4]
 8007540:	4a1b      	ldr	r2, [pc, #108]	; (80075b0 <HAL_GPIO_Init+0x254>)
 8007542:	4293      	cmp	r3, r2
 8007544:	d019      	beq.n	800757a <HAL_GPIO_Init+0x21e>
 8007546:	687b      	ldr	r3, [r7, #4]
 8007548:	4a1a      	ldr	r2, [pc, #104]	; (80075b4 <HAL_GPIO_Init+0x258>)
 800754a:	4293      	cmp	r3, r2
 800754c:	d013      	beq.n	8007576 <HAL_GPIO_Init+0x21a>
 800754e:	687b      	ldr	r3, [r7, #4]
 8007550:	4a19      	ldr	r2, [pc, #100]	; (80075b8 <HAL_GPIO_Init+0x25c>)
 8007552:	4293      	cmp	r3, r2
 8007554:	d00d      	beq.n	8007572 <HAL_GPIO_Init+0x216>
 8007556:	687b      	ldr	r3, [r7, #4]
 8007558:	4a18      	ldr	r2, [pc, #96]	; (80075bc <HAL_GPIO_Init+0x260>)
 800755a:	4293      	cmp	r3, r2
 800755c:	d007      	beq.n	800756e <HAL_GPIO_Init+0x212>
 800755e:	687b      	ldr	r3, [r7, #4]
 8007560:	4a17      	ldr	r2, [pc, #92]	; (80075c0 <HAL_GPIO_Init+0x264>)
 8007562:	4293      	cmp	r3, r2
 8007564:	d101      	bne.n	800756a <HAL_GPIO_Init+0x20e>
 8007566:	2309      	movs	r3, #9
 8007568:	e02d      	b.n	80075c6 <HAL_GPIO_Init+0x26a>
 800756a:	230a      	movs	r3, #10
 800756c:	e02b      	b.n	80075c6 <HAL_GPIO_Init+0x26a>
 800756e:	2308      	movs	r3, #8
 8007570:	e029      	b.n	80075c6 <HAL_GPIO_Init+0x26a>
 8007572:	2307      	movs	r3, #7
 8007574:	e027      	b.n	80075c6 <HAL_GPIO_Init+0x26a>
 8007576:	2306      	movs	r3, #6
 8007578:	e025      	b.n	80075c6 <HAL_GPIO_Init+0x26a>
 800757a:	2305      	movs	r3, #5
 800757c:	e023      	b.n	80075c6 <HAL_GPIO_Init+0x26a>
 800757e:	2304      	movs	r3, #4
 8007580:	e021      	b.n	80075c6 <HAL_GPIO_Init+0x26a>
 8007582:	2303      	movs	r3, #3
 8007584:	e01f      	b.n	80075c6 <HAL_GPIO_Init+0x26a>
 8007586:	2302      	movs	r3, #2
 8007588:	e01d      	b.n	80075c6 <HAL_GPIO_Init+0x26a>
 800758a:	2301      	movs	r3, #1
 800758c:	e01b      	b.n	80075c6 <HAL_GPIO_Init+0x26a>
 800758e:	bf00      	nop
 8007590:	58000080 	.word	0x58000080
 8007594:	58024400 	.word	0x58024400
 8007598:	58000400 	.word	0x58000400
 800759c:	58020000 	.word	0x58020000
 80075a0:	58020400 	.word	0x58020400
 80075a4:	58020800 	.word	0x58020800
 80075a8:	58020c00 	.word	0x58020c00
 80075ac:	58021000 	.word	0x58021000
 80075b0:	58021400 	.word	0x58021400
 80075b4:	58021800 	.word	0x58021800
 80075b8:	58021c00 	.word	0x58021c00
 80075bc:	58022000 	.word	0x58022000
 80075c0:	58022400 	.word	0x58022400
 80075c4:	2300      	movs	r3, #0
 80075c6:	69fa      	ldr	r2, [r7, #28]
 80075c8:	f002 0203 	and.w	r2, r2, #3
 80075cc:	0092      	lsls	r2, r2, #2
 80075ce:	4093      	lsls	r3, r2
 80075d0:	69ba      	ldr	r2, [r7, #24]
 80075d2:	4313      	orrs	r3, r2
 80075d4:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80075d6:	4938      	ldr	r1, [pc, #224]	; (80076b8 <HAL_GPIO_Init+0x35c>)
 80075d8:	69fb      	ldr	r3, [r7, #28]
 80075da:	089b      	lsrs	r3, r3, #2
 80075dc:	3302      	adds	r3, #2
 80075de:	69ba      	ldr	r2, [r7, #24]
 80075e0:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 80075e4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80075e8:	681b      	ldr	r3, [r3, #0]
 80075ea:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 80075ec:	693b      	ldr	r3, [r7, #16]
 80075ee:	43db      	mvns	r3, r3
 80075f0:	69ba      	ldr	r2, [r7, #24]
 80075f2:	4013      	ands	r3, r2
 80075f4:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80075f6:	683b      	ldr	r3, [r7, #0]
 80075f8:	685b      	ldr	r3, [r3, #4]
 80075fa:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80075fe:	2b00      	cmp	r3, #0
 8007600:	d003      	beq.n	800760a <HAL_GPIO_Init+0x2ae>
        {
          temp |= iocurrent;
 8007602:	69ba      	ldr	r2, [r7, #24]
 8007604:	693b      	ldr	r3, [r7, #16]
 8007606:	4313      	orrs	r3, r2
 8007608:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR1 = temp;
 800760a:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800760e:	69bb      	ldr	r3, [r7, #24]
 8007610:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 8007612:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8007616:	685b      	ldr	r3, [r3, #4]
 8007618:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 800761a:	693b      	ldr	r3, [r7, #16]
 800761c:	43db      	mvns	r3, r3
 800761e:	69ba      	ldr	r2, [r7, #24]
 8007620:	4013      	ands	r3, r2
 8007622:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8007624:	683b      	ldr	r3, [r7, #0]
 8007626:	685b      	ldr	r3, [r3, #4]
 8007628:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800762c:	2b00      	cmp	r3, #0
 800762e:	d003      	beq.n	8007638 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 8007630:	69ba      	ldr	r2, [r7, #24]
 8007632:	693b      	ldr	r3, [r7, #16]
 8007634:	4313      	orrs	r3, r2
 8007636:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR1 = temp;
 8007638:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800763c:	69bb      	ldr	r3, [r7, #24]
 800763e:	6053      	str	r3, [r2, #4]

        temp = EXTI_CurrentCPU->EMR1;
 8007640:	697b      	ldr	r3, [r7, #20]
 8007642:	685b      	ldr	r3, [r3, #4]
 8007644:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8007646:	693b      	ldr	r3, [r7, #16]
 8007648:	43db      	mvns	r3, r3
 800764a:	69ba      	ldr	r2, [r7, #24]
 800764c:	4013      	ands	r3, r2
 800764e:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8007650:	683b      	ldr	r3, [r7, #0]
 8007652:	685b      	ldr	r3, [r3, #4]
 8007654:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8007658:	2b00      	cmp	r3, #0
 800765a:	d003      	beq.n	8007664 <HAL_GPIO_Init+0x308>
        {
          temp |= iocurrent;
 800765c:	69ba      	ldr	r2, [r7, #24]
 800765e:	693b      	ldr	r3, [r7, #16]
 8007660:	4313      	orrs	r3, r2
 8007662:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->EMR1 = temp;
 8007664:	697b      	ldr	r3, [r7, #20]
 8007666:	69ba      	ldr	r2, [r7, #24]
 8007668:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI_CurrentCPU->IMR1;
 800766a:	697b      	ldr	r3, [r7, #20]
 800766c:	681b      	ldr	r3, [r3, #0]
 800766e:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8007670:	693b      	ldr	r3, [r7, #16]
 8007672:	43db      	mvns	r3, r3
 8007674:	69ba      	ldr	r2, [r7, #24]
 8007676:	4013      	ands	r3, r2
 8007678:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 800767a:	683b      	ldr	r3, [r7, #0]
 800767c:	685b      	ldr	r3, [r3, #4]
 800767e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8007682:	2b00      	cmp	r3, #0
 8007684:	d003      	beq.n	800768e <HAL_GPIO_Init+0x332>
        {
          temp |= iocurrent;
 8007686:	69ba      	ldr	r2, [r7, #24]
 8007688:	693b      	ldr	r3, [r7, #16]
 800768a:	4313      	orrs	r3, r2
 800768c:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->IMR1 = temp;
 800768e:	697b      	ldr	r3, [r7, #20]
 8007690:	69ba      	ldr	r2, [r7, #24]
 8007692:	601a      	str	r2, [r3, #0]
      }
    }

    position++;
 8007694:	69fb      	ldr	r3, [r7, #28]
 8007696:	3301      	adds	r3, #1
 8007698:	61fb      	str	r3, [r7, #28]
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 800769a:	683b      	ldr	r3, [r7, #0]
 800769c:	681a      	ldr	r2, [r3, #0]
 800769e:	69fb      	ldr	r3, [r7, #28]
 80076a0:	fa22 f303 	lsr.w	r3, r2, r3
 80076a4:	2b00      	cmp	r3, #0
 80076a6:	f47f ae63 	bne.w	8007370 <HAL_GPIO_Init+0x14>
  }
}
 80076aa:	bf00      	nop
 80076ac:	bf00      	nop
 80076ae:	3724      	adds	r7, #36	; 0x24
 80076b0:	46bd      	mov	sp, r7
 80076b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80076b6:	4770      	bx	lr
 80076b8:	58000400 	.word	0x58000400

080076bc <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 80076bc:	b480      	push	{r7}
 80076be:	b085      	sub	sp, #20
 80076c0:	af00      	add	r7, sp, #0
 80076c2:	6078      	str	r0, [r7, #4]
 80076c4:	460b      	mov	r3, r1
 80076c6:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != 0x00U)
 80076c8:	687b      	ldr	r3, [r7, #4]
 80076ca:	691a      	ldr	r2, [r3, #16]
 80076cc:	887b      	ldrh	r3, [r7, #2]
 80076ce:	4013      	ands	r3, r2
 80076d0:	2b00      	cmp	r3, #0
 80076d2:	d002      	beq.n	80076da <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 80076d4:	2301      	movs	r3, #1
 80076d6:	73fb      	strb	r3, [r7, #15]
 80076d8:	e001      	b.n	80076de <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 80076da:	2300      	movs	r3, #0
 80076dc:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 80076de:	7bfb      	ldrb	r3, [r7, #15]
}
 80076e0:	4618      	mov	r0, r3
 80076e2:	3714      	adds	r7, #20
 80076e4:	46bd      	mov	sp, r7
 80076e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80076ea:	4770      	bx	lr

080076ec <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80076ec:	b480      	push	{r7}
 80076ee:	b083      	sub	sp, #12
 80076f0:	af00      	add	r7, sp, #0
 80076f2:	6078      	str	r0, [r7, #4]
 80076f4:	460b      	mov	r3, r1
 80076f6:	807b      	strh	r3, [r7, #2]
 80076f8:	4613      	mov	r3, r2
 80076fa:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80076fc:	787b      	ldrb	r3, [r7, #1]
 80076fe:	2b00      	cmp	r3, #0
 8007700:	d003      	beq.n	800770a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8007702:	887a      	ldrh	r2, [r7, #2]
 8007704:	687b      	ldr	r3, [r7, #4]
 8007706:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
  }
}
 8007708:	e003      	b.n	8007712 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 800770a:	887b      	ldrh	r3, [r7, #2]
 800770c:	041a      	lsls	r2, r3, #16
 800770e:	687b      	ldr	r3, [r7, #4]
 8007710:	619a      	str	r2, [r3, #24]
}
 8007712:	bf00      	nop
 8007714:	370c      	adds	r7, #12
 8007716:	46bd      	mov	sp, r7
 8007718:	f85d 7b04 	ldr.w	r7, [sp], #4
 800771c:	4770      	bx	lr

0800771e <HAL_GPIO_TogglePin>:
  * @param  GPIOx: Where x can be (A..K) to select the GPIO peripheral.
  * @param  GPIO_Pin: Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 800771e:	b480      	push	{r7}
 8007720:	b085      	sub	sp, #20
 8007722:	af00      	add	r7, sp, #0
 8007724:	6078      	str	r0, [r7, #4]
 8007726:	460b      	mov	r3, r1
 8007728:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 800772a:	687b      	ldr	r3, [r7, #4]
 800772c:	695b      	ldr	r3, [r3, #20]
 800772e:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8007730:	887a      	ldrh	r2, [r7, #2]
 8007732:	68fb      	ldr	r3, [r7, #12]
 8007734:	4013      	ands	r3, r2
 8007736:	041a      	lsls	r2, r3, #16
 8007738:	68fb      	ldr	r3, [r7, #12]
 800773a:	43d9      	mvns	r1, r3
 800773c:	887b      	ldrh	r3, [r7, #2]
 800773e:	400b      	ands	r3, r1
 8007740:	431a      	orrs	r2, r3
 8007742:	687b      	ldr	r3, [r7, #4]
 8007744:	619a      	str	r2, [r3, #24]
}
 8007746:	bf00      	nop
 8007748:	3714      	adds	r7, #20
 800774a:	46bd      	mov	sp, r7
 800774c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007750:	4770      	bx	lr

08007752 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin: Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8007752:	b580      	push	{r7, lr}
 8007754:	b082      	sub	sp, #8
 8007756:	af00      	add	r7, sp, #0
 8007758:	4603      	mov	r3, r0
 800775a:	80fb      	strh	r3, [r7, #6]
    __HAL_GPIO_EXTID2_CLEAR_IT(GPIO_Pin);
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
  }
#else
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00U)
 800775c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8007760:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 8007764:	88fb      	ldrh	r3, [r7, #6]
 8007766:	4013      	ands	r3, r2
 8007768:	2b00      	cmp	r3, #0
 800776a:	d008      	beq.n	800777e <HAL_GPIO_EXTI_IRQHandler+0x2c>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 800776c:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8007770:	88fb      	ldrh	r3, [r7, #6]
 8007772:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8007776:	88fb      	ldrh	r3, [r7, #6]
 8007778:	4618      	mov	r0, r3
 800777a:	f000 f804 	bl	8007786 <HAL_GPIO_EXTI_Callback>
  }
#endif
}
 800777e:	bf00      	nop
 8007780:	3708      	adds	r7, #8
 8007782:	46bd      	mov	sp, r7
 8007784:	bd80      	pop	{r7, pc}

08007786 <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callback.
  * @param  GPIO_Pin: Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8007786:	b480      	push	{r7}
 8007788:	b083      	sub	sp, #12
 800778a:	af00      	add	r7, sp, #0
 800778c:	4603      	mov	r3, r0
 800778e:	80fb      	strh	r3, [r7, #6]
  UNUSED(GPIO_Pin);

  /* NOTE: This function Should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 8007790:	bf00      	nop
 8007792:	370c      	adds	r7, #12
 8007794:	46bd      	mov	sp, r7
 8007796:	f85d 7b04 	ldr.w	r7, [sp], #4
 800779a:	4770      	bx	lr

0800779c <HAL_HRTIM_Init>:
  * @brief  Initialize a HRTIM instance
  * @param  hhrtim pointer to HAL HRTIM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HRTIM_Init(HRTIM_HandleTypeDef * hhrtim)
{
 800779c:	b580      	push	{r7, lr}
 800779e:	b086      	sub	sp, #24
 80077a0:	af00      	add	r7, sp, #0
 80077a2:	6078      	str	r0, [r7, #4]
  uint8_t timer_idx;
  uint32_t hrtim_mcr;

  /* Check the HRTIM handle allocation */
  if(hhrtim == NULL)
 80077a4:	687b      	ldr	r3, [r7, #4]
 80077a6:	2b00      	cmp	r3, #0
 80077a8:	d101      	bne.n	80077ae <HAL_HRTIM_Init+0x12>
  {
    return HAL_ERROR;
 80077aa:	2301      	movs	r3, #1
 80077ac:	e0bd      	b.n	800792a <HAL_HRTIM_Init+0x18e>
    }
  }
#endif /* USE_HAL_HRTIM_REGISTER_CALLBACKS */

  /* Set the HRTIM state */
  hhrtim->State = HAL_HRTIM_STATE_BUSY;
 80077ae:	687b      	ldr	r3, [r7, #4]
 80077b0:	2202      	movs	r2, #2
 80077b2:	f883 20c1 	strb.w	r2, [r3, #193]	; 0xc1

  /* Initialize the DMA handles */
  hhrtim->hdmaMaster = (DMA_HandleTypeDef *)NULL;
 80077b6:	687b      	ldr	r3, [r7, #4]
 80077b8:	2200      	movs	r2, #0
 80077ba:	f8c3 20c4 	str.w	r2, [r3, #196]	; 0xc4
  hhrtim->hdmaTimerA = (DMA_HandleTypeDef *)NULL;
 80077be:	687b      	ldr	r3, [r7, #4]
 80077c0:	2200      	movs	r2, #0
 80077c2:	f8c3 20c8 	str.w	r2, [r3, #200]	; 0xc8
  hhrtim->hdmaTimerB = (DMA_HandleTypeDef *)NULL;
 80077c6:	687b      	ldr	r3, [r7, #4]
 80077c8:	2200      	movs	r2, #0
 80077ca:	f8c3 20cc 	str.w	r2, [r3, #204]	; 0xcc
  hhrtim->hdmaTimerC = (DMA_HandleTypeDef *)NULL;
 80077ce:	687b      	ldr	r3, [r7, #4]
 80077d0:	2200      	movs	r2, #0
 80077d2:	f8c3 20d0 	str.w	r2, [r3, #208]	; 0xd0
  hhrtim->hdmaTimerD = (DMA_HandleTypeDef *)NULL;
 80077d6:	687b      	ldr	r3, [r7, #4]
 80077d8:	2200      	movs	r2, #0
 80077da:	f8c3 20d4 	str.w	r2, [r3, #212]	; 0xd4
  hhrtim->hdmaTimerE = (DMA_HandleTypeDef *)NULL;
 80077de:	687b      	ldr	r3, [r7, #4]
 80077e0:	2200      	movs	r2, #0
 80077e2:	f8c3 20d8 	str.w	r2, [r3, #216]	; 0xd8

  /* HRTIM output synchronization configuration (if required) */
  if ((hhrtim->Init.SyncOptions & HRTIM_SYNCOPTION_MASTER) != (uint32_t)RESET)
 80077e6:	687b      	ldr	r3, [r7, #4]
 80077e8:	689b      	ldr	r3, [r3, #8]
 80077ea:	f003 0301 	and.w	r3, r3, #1
 80077ee:	2b00      	cmp	r3, #0
 80077f0:	d031      	beq.n	8007856 <HAL_HRTIM_Init+0xba>
    assert_param(IS_HRTIM_SYNCOUTPUTPOLARITY(hhrtim->Init.SyncOutputPolarity));

    /* The synchronization output initialization procedure must be done prior
       to the configuration of the MCU outputs (done within HAL_HRTIM_MspInit)
    */
    if (hhrtim->Instance == HRTIM1)
 80077f2:	687b      	ldr	r3, [r7, #4]
 80077f4:	681b      	ldr	r3, [r3, #0]
 80077f6:	4a4f      	ldr	r2, [pc, #316]	; (8007934 <HAL_HRTIM_Init+0x198>)
 80077f8:	4293      	cmp	r3, r2
 80077fa:	d10e      	bne.n	800781a <HAL_HRTIM_Init+0x7e>
    {
      /* Enable the HRTIM peripheral clock */
      __HAL_RCC_HRTIM1_CLK_ENABLE();
 80077fc:	4b4e      	ldr	r3, [pc, #312]	; (8007938 <HAL_HRTIM_Init+0x19c>)
 80077fe:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8007802:	4a4d      	ldr	r2, [pc, #308]	; (8007938 <HAL_HRTIM_Init+0x19c>)
 8007804:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8007808:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 800780c:	4b4a      	ldr	r3, [pc, #296]	; (8007938 <HAL_HRTIM_Init+0x19c>)
 800780e:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8007812:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8007816:	60fb      	str	r3, [r7, #12]
 8007818:	68fb      	ldr	r3, [r7, #12]
    }

    hrtim_mcr = hhrtim->Instance->sMasterRegs.MCR;
 800781a:	687b      	ldr	r3, [r7, #4]
 800781c:	681b      	ldr	r3, [r3, #0]
 800781e:	681b      	ldr	r3, [r3, #0]
 8007820:	613b      	str	r3, [r7, #16]

    /* Set the event to be sent on the synchronization output */
    hrtim_mcr &= ~(HRTIM_MCR_SYNC_SRC);
 8007822:	693b      	ldr	r3, [r7, #16]
 8007824:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8007828:	613b      	str	r3, [r7, #16]
    hrtim_mcr |= (hhrtim->Init.SyncOutputSource & HRTIM_MCR_SYNC_SRC);
 800782a:	687b      	ldr	r3, [r7, #4]
 800782c:	691b      	ldr	r3, [r3, #16]
 800782e:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8007832:	693a      	ldr	r2, [r7, #16]
 8007834:	4313      	orrs	r3, r2
 8007836:	613b      	str	r3, [r7, #16]

    /* Set the polarity of the synchronization output */
    hrtim_mcr &= ~(HRTIM_MCR_SYNC_OUT);
 8007838:	693b      	ldr	r3, [r7, #16]
 800783a:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 800783e:	613b      	str	r3, [r7, #16]
    hrtim_mcr |= (hhrtim->Init.SyncOutputPolarity & HRTIM_MCR_SYNC_OUT);
 8007840:	687b      	ldr	r3, [r7, #4]
 8007842:	695b      	ldr	r3, [r3, #20]
 8007844:	f403 5340 	and.w	r3, r3, #12288	; 0x3000
 8007848:	693a      	ldr	r2, [r7, #16]
 800784a:	4313      	orrs	r3, r2
 800784c:	613b      	str	r3, [r7, #16]

    /* Update the HRTIM registers */
    hhrtim->Instance->sMasterRegs.MCR = hrtim_mcr;
 800784e:	687b      	ldr	r3, [r7, #4]
 8007850:	681b      	ldr	r3, [r3, #0]
 8007852:	693a      	ldr	r2, [r7, #16]
 8007854:	601a      	str	r2, [r3, #0]

  /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
#if (USE_HAL_HRTIM_REGISTER_CALLBACKS == 1)
  hhrtim->MspInitCallback(hhrtim);
#else
  HAL_HRTIM_MspInit(hhrtim);
 8007856:	6878      	ldr	r0, [r7, #4]
 8007858:	f7fb fa60 	bl	8002d1c <HAL_HRTIM_MspInit>
#endif /* USE_HAL_HRTIM_REGISTER_CALLBACKS */

  /* HRTIM input synchronization configuration (if required) */
  if ((hhrtim->Init.SyncOptions & HRTIM_SYNCOPTION_SLAVE) != (uint32_t)RESET)
 800785c:	687b      	ldr	r3, [r7, #4]
 800785e:	689b      	ldr	r3, [r3, #8]
 8007860:	f003 0302 	and.w	r3, r3, #2
 8007864:	2b00      	cmp	r3, #0
 8007866:	d012      	beq.n	800788e <HAL_HRTIM_Init+0xf2>
  {
    /* Check parameters */
    assert_param(IS_HRTIM_SYNCINPUTSOURCE(hhrtim->Init.SyncInputSource));

    hrtim_mcr = hhrtim->Instance->sMasterRegs.MCR;
 8007868:	687b      	ldr	r3, [r7, #4]
 800786a:	681b      	ldr	r3, [r3, #0]
 800786c:	681b      	ldr	r3, [r3, #0]
 800786e:	613b      	str	r3, [r7, #16]

    /* Set the synchronization input source */
    hrtim_mcr &= ~(HRTIM_MCR_SYNC_IN);
 8007870:	693b      	ldr	r3, [r7, #16]
 8007872:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8007876:	613b      	str	r3, [r7, #16]
    hrtim_mcr |= (hhrtim->Init.SyncInputSource & HRTIM_MCR_SYNC_IN);
 8007878:	687b      	ldr	r3, [r7, #4]
 800787a:	68db      	ldr	r3, [r3, #12]
 800787c:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8007880:	693a      	ldr	r2, [r7, #16]
 8007882:	4313      	orrs	r3, r2
 8007884:	613b      	str	r3, [r7, #16]

    /* Update the HRTIM registers */
    hhrtim->Instance->sMasterRegs.MCR = hrtim_mcr;
 8007886:	687b      	ldr	r3, [r7, #4]
 8007888:	681b      	ldr	r3, [r3, #0]
 800788a:	693a      	ldr	r2, [r7, #16]
 800788c:	601a      	str	r2, [r3, #0]
  }

  /* Initialize the HRTIM state*/
  hhrtim->State = HAL_HRTIM_STATE_READY;
 800788e:	687b      	ldr	r3, [r7, #4]
 8007890:	2201      	movs	r2, #1
 8007892:	f883 20c1 	strb.w	r2, [r3, #193]	; 0xc1

  /* Initialize the lock status of the HRTIM HAL API */
  __HAL_UNLOCK(hhrtim);
 8007896:	687b      	ldr	r3, [r7, #4]
 8007898:	2200      	movs	r2, #0
 800789a:	f883 20c0 	strb.w	r2, [r3, #192]	; 0xc0

  /* Initialize timer related parameters */
  for (timer_idx = HRTIM_TIMERINDEX_TIMER_A ;
 800789e:	2300      	movs	r3, #0
 80078a0:	75fb      	strb	r3, [r7, #23]
 80078a2:	e03e      	b.n	8007922 <HAL_HRTIM_Init+0x186>
       timer_idx <= HRTIM_TIMERINDEX_MASTER ;
       timer_idx++)
  {
    hhrtim->TimerParam[timer_idx].CaptureTrigger1 = HRTIM_CAPTURETRIGGER_NONE;
 80078a4:	7dfa      	ldrb	r2, [r7, #23]
 80078a6:	6879      	ldr	r1, [r7, #4]
 80078a8:	4613      	mov	r3, r2
 80078aa:	00db      	lsls	r3, r3, #3
 80078ac:	1a9b      	subs	r3, r3, r2
 80078ae:	009b      	lsls	r3, r3, #2
 80078b0:	440b      	add	r3, r1
 80078b2:	3318      	adds	r3, #24
 80078b4:	2200      	movs	r2, #0
 80078b6:	601a      	str	r2, [r3, #0]
    hhrtim->TimerParam[timer_idx].CaptureTrigger2 = HRTIM_CAPTURETRIGGER_NONE;
 80078b8:	7dfa      	ldrb	r2, [r7, #23]
 80078ba:	6879      	ldr	r1, [r7, #4]
 80078bc:	4613      	mov	r3, r2
 80078be:	00db      	lsls	r3, r3, #3
 80078c0:	1a9b      	subs	r3, r3, r2
 80078c2:	009b      	lsls	r3, r3, #2
 80078c4:	440b      	add	r3, r1
 80078c6:	331c      	adds	r3, #28
 80078c8:	2200      	movs	r2, #0
 80078ca:	601a      	str	r2, [r3, #0]
    hhrtim->TimerParam[timer_idx].InterruptRequests = HRTIM_IT_NONE;
 80078cc:	7dfa      	ldrb	r2, [r7, #23]
 80078ce:	6879      	ldr	r1, [r7, #4]
 80078d0:	4613      	mov	r3, r2
 80078d2:	00db      	lsls	r3, r3, #3
 80078d4:	1a9b      	subs	r3, r3, r2
 80078d6:	009b      	lsls	r3, r3, #2
 80078d8:	440b      	add	r3, r1
 80078da:	3320      	adds	r3, #32
 80078dc:	2200      	movs	r2, #0
 80078de:	601a      	str	r2, [r3, #0]
    hhrtim->TimerParam[timer_idx].DMARequests = HRTIM_IT_NONE;
 80078e0:	7dfa      	ldrb	r2, [r7, #23]
 80078e2:	6879      	ldr	r1, [r7, #4]
 80078e4:	4613      	mov	r3, r2
 80078e6:	00db      	lsls	r3, r3, #3
 80078e8:	1a9b      	subs	r3, r3, r2
 80078ea:	009b      	lsls	r3, r3, #2
 80078ec:	440b      	add	r3, r1
 80078ee:	3324      	adds	r3, #36	; 0x24
 80078f0:	2200      	movs	r2, #0
 80078f2:	601a      	str	r2, [r3, #0]
    hhrtim->TimerParam[timer_idx].DMASrcAddress = 0U;
 80078f4:	7dfa      	ldrb	r2, [r7, #23]
 80078f6:	6879      	ldr	r1, [r7, #4]
 80078f8:	4613      	mov	r3, r2
 80078fa:	00db      	lsls	r3, r3, #3
 80078fc:	1a9b      	subs	r3, r3, r2
 80078fe:	009b      	lsls	r3, r3, #2
 8007900:	440b      	add	r3, r1
 8007902:	3328      	adds	r3, #40	; 0x28
 8007904:	2200      	movs	r2, #0
 8007906:	601a      	str	r2, [r3, #0]
    hhrtim->TimerParam[timer_idx].DMASize = 0U;
 8007908:	7dfa      	ldrb	r2, [r7, #23]
 800790a:	6879      	ldr	r1, [r7, #4]
 800790c:	4613      	mov	r3, r2
 800790e:	00db      	lsls	r3, r3, #3
 8007910:	1a9b      	subs	r3, r3, r2
 8007912:	009b      	lsls	r3, r3, #2
 8007914:	440b      	add	r3, r1
 8007916:	3330      	adds	r3, #48	; 0x30
 8007918:	2200      	movs	r2, #0
 800791a:	601a      	str	r2, [r3, #0]
       timer_idx++)
 800791c:	7dfb      	ldrb	r3, [r7, #23]
 800791e:	3301      	adds	r3, #1
 8007920:	75fb      	strb	r3, [r7, #23]
       timer_idx <= HRTIM_TIMERINDEX_MASTER ;
 8007922:	7dfb      	ldrb	r3, [r7, #23]
 8007924:	2b05      	cmp	r3, #5
 8007926:	d9bd      	bls.n	80078a4 <HAL_HRTIM_Init+0x108>
  }

  return HAL_OK;
 8007928:	2300      	movs	r3, #0
}
 800792a:	4618      	mov	r0, r3
 800792c:	3718      	adds	r7, #24
 800792e:	46bd      	mov	sp, r7
 8007930:	bd80      	pop	{r7, pc}
 8007932:	bf00      	nop
 8007934:	40017400 	.word	0x40017400
 8007938:	58024400 	.word	0x58024400

0800793c <HAL_HRTIM_TimeBaseConfig>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HRTIM_TimeBaseConfig(HRTIM_HandleTypeDef *hhrtim,
                                           uint32_t TimerIdx,
                                           const HRTIM_TimeBaseCfgTypeDef * pTimeBaseCfg)
{
 800793c:	b580      	push	{r7, lr}
 800793e:	b084      	sub	sp, #16
 8007940:	af00      	add	r7, sp, #0
 8007942:	60f8      	str	r0, [r7, #12]
 8007944:	60b9      	str	r1, [r7, #8]
 8007946:	607a      	str	r2, [r7, #4]
  /* Check the parameters */
  assert_param(IS_HRTIM_TIMERINDEX(TimerIdx));
  assert_param(IS_HRTIM_PRESCALERRATIO(pTimeBaseCfg->PrescalerRatio));
  assert_param(IS_HRTIM_MODE(pTimeBaseCfg->Mode));

  if(hhrtim->State == HAL_HRTIM_STATE_BUSY)
 8007948:	68fb      	ldr	r3, [r7, #12]
 800794a:	f893 30c1 	ldrb.w	r3, [r3, #193]	; 0xc1
 800794e:	b2db      	uxtb	r3, r3
 8007950:	2b02      	cmp	r3, #2
 8007952:	d101      	bne.n	8007958 <HAL_HRTIM_TimeBaseConfig+0x1c>
  {
     return HAL_BUSY;
 8007954:	2302      	movs	r3, #2
 8007956:	e015      	b.n	8007984 <HAL_HRTIM_TimeBaseConfig+0x48>
  }

  /* Set the HRTIM state */
  hhrtim->State = HAL_HRTIM_STATE_BUSY;
 8007958:	68fb      	ldr	r3, [r7, #12]
 800795a:	2202      	movs	r2, #2
 800795c:	f883 20c1 	strb.w	r2, [r3, #193]	; 0xc1

  if (TimerIdx == HRTIM_TIMERINDEX_MASTER)
 8007960:	68bb      	ldr	r3, [r7, #8]
 8007962:	2b05      	cmp	r3, #5
 8007964:	d104      	bne.n	8007970 <HAL_HRTIM_TimeBaseConfig+0x34>
  {
    /* Configure master timer time base unit */
    HRTIM_MasterBase_Config(hhrtim, pTimeBaseCfg);
 8007966:	6879      	ldr	r1, [r7, #4]
 8007968:	68f8      	ldr	r0, [r7, #12]
 800796a:	f000 fc4d 	bl	8008208 <HRTIM_MasterBase_Config>
 800796e:	e004      	b.n	800797a <HAL_HRTIM_TimeBaseConfig+0x3e>
  }
  else
  {
    /* Configure timing unit time base unit */
    HRTIM_TimingUnitBase_Config(hhrtim, TimerIdx, pTimeBaseCfg);
 8007970:	687a      	ldr	r2, [r7, #4]
 8007972:	68b9      	ldr	r1, [r7, #8]
 8007974:	68f8      	ldr	r0, [r7, #12]
 8007976:	f000 fc76 	bl	8008266 <HRTIM_TimingUnitBase_Config>
  }

  /* Set HRTIM state */
  hhrtim->State = HAL_HRTIM_STATE_READY;
 800797a:	68fb      	ldr	r3, [r7, #12]
 800797c:	2201      	movs	r2, #1
 800797e:	f883 20c1 	strb.w	r2, [r3, #193]	; 0xc1

  return HAL_OK;
 8007982:	2300      	movs	r3, #0
}
 8007984:	4618      	mov	r0, r3
 8007986:	3710      	adds	r7, #16
 8007988:	46bd      	mov	sp, r7
 800798a:	bd80      	pop	{r7, pc}

0800798c <HAL_HRTIM_WaveformTimerConfig>:
  * @note This function must be called before starting the timer
  */
HAL_StatusTypeDef HAL_HRTIM_WaveformTimerConfig(HRTIM_HandleTypeDef * hhrtim,
                                                uint32_t TimerIdx,
                                                const HRTIM_TimerCfgTypeDef * pTimerCfg)
{
 800798c:	b580      	push	{r7, lr}
 800798e:	b084      	sub	sp, #16
 8007990:	af00      	add	r7, sp, #0
 8007992:	60f8      	str	r0, [r7, #12]
 8007994:	60b9      	str	r1, [r7, #8]
 8007996:	607a      	str	r2, [r7, #4]
  assert_param(IS_HRTIM_DACSYNC(pTimerCfg->DACSynchro));
  assert_param(IS_HRTIM_PRELOAD(pTimerCfg->PreloadEnable));
  assert_param(IS_HRTIM_TIMERBURSTMODE(pTimerCfg->BurstMode));
  assert_param(IS_HRTIM_UPDATEONREPETITION(pTimerCfg->RepetitionUpdate));

  if(hhrtim->State == HAL_HRTIM_STATE_BUSY)
 8007998:	68fb      	ldr	r3, [r7, #12]
 800799a:	f893 30c1 	ldrb.w	r3, [r3, #193]	; 0xc1
 800799e:	b2db      	uxtb	r3, r3
 80079a0:	2b02      	cmp	r3, #2
 80079a2:	d101      	bne.n	80079a8 <HAL_HRTIM_WaveformTimerConfig+0x1c>
  {
     return HAL_BUSY;
 80079a4:	2302      	movs	r3, #2
 80079a6:	e05f      	b.n	8007a68 <HAL_HRTIM_WaveformTimerConfig+0xdc>
  }

  /* Process Locked */
  __HAL_LOCK(hhrtim);
 80079a8:	68fb      	ldr	r3, [r7, #12]
 80079aa:	f893 30c0 	ldrb.w	r3, [r3, #192]	; 0xc0
 80079ae:	2b01      	cmp	r3, #1
 80079b0:	d101      	bne.n	80079b6 <HAL_HRTIM_WaveformTimerConfig+0x2a>
 80079b2:	2302      	movs	r3, #2
 80079b4:	e058      	b.n	8007a68 <HAL_HRTIM_WaveformTimerConfig+0xdc>
 80079b6:	68fb      	ldr	r3, [r7, #12]
 80079b8:	2201      	movs	r2, #1
 80079ba:	f883 20c0 	strb.w	r2, [r3, #192]	; 0xc0

  hhrtim->State = HAL_HRTIM_STATE_BUSY;
 80079be:	68fb      	ldr	r3, [r7, #12]
 80079c0:	2202      	movs	r2, #2
 80079c2:	f883 20c1 	strb.w	r2, [r3, #193]	; 0xc1

  if (TimerIdx == HRTIM_TIMERINDEX_MASTER)
 80079c6:	68bb      	ldr	r3, [r7, #8]
 80079c8:	2b05      	cmp	r3, #5
 80079ca:	d104      	bne.n	80079d6 <HAL_HRTIM_WaveformTimerConfig+0x4a>
    assert_param(IS_HRTIM_UPDATEGATING_MASTER(pTimerCfg->UpdateGating));
    assert_param(IS_HRTIM_MASTER_IT(pTimerCfg->InterruptRequests));
    assert_param(IS_HRTIM_MASTER_DMA(pTimerCfg->DMARequests));

    /* Configure master timer */
    HRTIM_MasterWaveform_Config(hhrtim, pTimerCfg);
 80079cc:	6879      	ldr	r1, [r7, #4]
 80079ce:	68f8      	ldr	r0, [r7, #12]
 80079d0:	f000 fc89 	bl	80082e6 <HRTIM_MasterWaveform_Config>
 80079d4:	e004      	b.n	80079e0 <HAL_HRTIM_WaveformTimerConfig+0x54>
    assert_param(IS_HRTIM_TIMUPDATETRIGGER(pTimerCfg->UpdateTrigger));
    assert_param(IS_HRTIM_TIMRESETTRIGGER(pTimerCfg->ResetTrigger));
    assert_param(IS_HRTIM_TIMUPDATEONRESET(pTimerCfg->ResetUpdate));

    /* Configure timing unit */
    HRTIM_TimingUnitWaveform_Config(hhrtim, TimerIdx, pTimerCfg);
 80079d6:	687a      	ldr	r2, [r7, #4]
 80079d8:	68b9      	ldr	r1, [r7, #8]
 80079da:	68f8      	ldr	r0, [r7, #12]
 80079dc:	f000 fcea 	bl	80083b4 <HRTIM_TimingUnitWaveform_Config>
  }

  /* Update timer parameters */
  hhrtim->TimerParam[TimerIdx].InterruptRequests = pTimerCfg->InterruptRequests;
 80079e0:	687b      	ldr	r3, [r7, #4]
 80079e2:	6819      	ldr	r1, [r3, #0]
 80079e4:	68f8      	ldr	r0, [r7, #12]
 80079e6:	68ba      	ldr	r2, [r7, #8]
 80079e8:	4613      	mov	r3, r2
 80079ea:	00db      	lsls	r3, r3, #3
 80079ec:	1a9b      	subs	r3, r3, r2
 80079ee:	009b      	lsls	r3, r3, #2
 80079f0:	4403      	add	r3, r0
 80079f2:	3320      	adds	r3, #32
 80079f4:	6019      	str	r1, [r3, #0]
  hhrtim->TimerParam[TimerIdx].DMARequests = pTimerCfg->DMARequests;
 80079f6:	687b      	ldr	r3, [r7, #4]
 80079f8:	6859      	ldr	r1, [r3, #4]
 80079fa:	68f8      	ldr	r0, [r7, #12]
 80079fc:	68ba      	ldr	r2, [r7, #8]
 80079fe:	4613      	mov	r3, r2
 8007a00:	00db      	lsls	r3, r3, #3
 8007a02:	1a9b      	subs	r3, r3, r2
 8007a04:	009b      	lsls	r3, r3, #2
 8007a06:	4403      	add	r3, r0
 8007a08:	3324      	adds	r3, #36	; 0x24
 8007a0a:	6019      	str	r1, [r3, #0]
  hhrtim->TimerParam[TimerIdx].DMASrcAddress = pTimerCfg->DMASrcAddress;
 8007a0c:	687b      	ldr	r3, [r7, #4]
 8007a0e:	6899      	ldr	r1, [r3, #8]
 8007a10:	68f8      	ldr	r0, [r7, #12]
 8007a12:	68ba      	ldr	r2, [r7, #8]
 8007a14:	4613      	mov	r3, r2
 8007a16:	00db      	lsls	r3, r3, #3
 8007a18:	1a9b      	subs	r3, r3, r2
 8007a1a:	009b      	lsls	r3, r3, #2
 8007a1c:	4403      	add	r3, r0
 8007a1e:	3328      	adds	r3, #40	; 0x28
 8007a20:	6019      	str	r1, [r3, #0]
  hhrtim->TimerParam[TimerIdx].DMADstAddress = pTimerCfg->DMADstAddress;
 8007a22:	687b      	ldr	r3, [r7, #4]
 8007a24:	68d9      	ldr	r1, [r3, #12]
 8007a26:	68f8      	ldr	r0, [r7, #12]
 8007a28:	68ba      	ldr	r2, [r7, #8]
 8007a2a:	4613      	mov	r3, r2
 8007a2c:	00db      	lsls	r3, r3, #3
 8007a2e:	1a9b      	subs	r3, r3, r2
 8007a30:	009b      	lsls	r3, r3, #2
 8007a32:	4403      	add	r3, r0
 8007a34:	332c      	adds	r3, #44	; 0x2c
 8007a36:	6019      	str	r1, [r3, #0]
  hhrtim->TimerParam[TimerIdx].DMASize = pTimerCfg->DMASize;
 8007a38:	687b      	ldr	r3, [r7, #4]
 8007a3a:	6919      	ldr	r1, [r3, #16]
 8007a3c:	68f8      	ldr	r0, [r7, #12]
 8007a3e:	68ba      	ldr	r2, [r7, #8]
 8007a40:	4613      	mov	r3, r2
 8007a42:	00db      	lsls	r3, r3, #3
 8007a44:	1a9b      	subs	r3, r3, r2
 8007a46:	009b      	lsls	r3, r3, #2
 8007a48:	4403      	add	r3, r0
 8007a4a:	3330      	adds	r3, #48	; 0x30
 8007a4c:	6019      	str	r1, [r3, #0]

  /* Force a software update */
  HRTIM_ForceRegistersUpdate(hhrtim, TimerIdx);
 8007a4e:	68b9      	ldr	r1, [r7, #8]
 8007a50:	68f8      	ldr	r0, [r7, #12]
 8007a52:	f000 fec7 	bl	80087e4 <HRTIM_ForceRegistersUpdate>

  hhrtim->State = HAL_HRTIM_STATE_READY;
 8007a56:	68fb      	ldr	r3, [r7, #12]
 8007a58:	2201      	movs	r2, #1
 8007a5a:	f883 20c1 	strb.w	r2, [r3, #193]	; 0xc1

  /* Process Unlocked */
  __HAL_UNLOCK(hhrtim);
 8007a5e:	68fb      	ldr	r3, [r7, #12]
 8007a60:	2200      	movs	r2, #0
 8007a62:	f883 20c0 	strb.w	r2, [r3, #192]	; 0xc0

  return HAL_OK;
 8007a66:	2300      	movs	r3, #0
}
 8007a68:	4618      	mov	r0, r3
 8007a6a:	3710      	adds	r7, #16
 8007a6c:	46bd      	mov	sp, r7
 8007a6e:	bd80      	pop	{r7, pc}

08007a70 <HAL_HRTIM_WaveformCompareConfig>:
  */
HAL_StatusTypeDef HAL_HRTIM_WaveformCompareConfig(HRTIM_HandleTypeDef * hhrtim,
                                                  uint32_t TimerIdx,
                                                  uint32_t CompareUnit,
                                                  const HRTIM_CompareCfgTypeDef* pCompareCfg)
{
 8007a70:	b480      	push	{r7}
 8007a72:	b085      	sub	sp, #20
 8007a74:	af00      	add	r7, sp, #0
 8007a76:	60f8      	str	r0, [r7, #12]
 8007a78:	60b9      	str	r1, [r7, #8]
 8007a7a:	607a      	str	r2, [r7, #4]
 8007a7c:	603b      	str	r3, [r7, #0]
  /* Check parameters */
  assert_param(IS_HRTIM_TIMERINDEX(TimerIdx));

  if(hhrtim->State == HAL_HRTIM_STATE_BUSY)
 8007a7e:	68fb      	ldr	r3, [r7, #12]
 8007a80:	f893 30c1 	ldrb.w	r3, [r3, #193]	; 0xc1
 8007a84:	b2db      	uxtb	r3, r3
 8007a86:	2b02      	cmp	r3, #2
 8007a88:	d101      	bne.n	8007a8e <HAL_HRTIM_WaveformCompareConfig+0x1e>
  {
     return HAL_BUSY;
 8007a8a:	2302      	movs	r3, #2
 8007a8c:	e157      	b.n	8007d3e <HAL_HRTIM_WaveformCompareConfig+0x2ce>
  }

  /* Process Locked */
  __HAL_LOCK(hhrtim);
 8007a8e:	68fb      	ldr	r3, [r7, #12]
 8007a90:	f893 30c0 	ldrb.w	r3, [r3, #192]	; 0xc0
 8007a94:	2b01      	cmp	r3, #1
 8007a96:	d101      	bne.n	8007a9c <HAL_HRTIM_WaveformCompareConfig+0x2c>
 8007a98:	2302      	movs	r3, #2
 8007a9a:	e150      	b.n	8007d3e <HAL_HRTIM_WaveformCompareConfig+0x2ce>
 8007a9c:	68fb      	ldr	r3, [r7, #12]
 8007a9e:	2201      	movs	r2, #1
 8007aa0:	f883 20c0 	strb.w	r2, [r3, #192]	; 0xc0

  hhrtim->State = HAL_HRTIM_STATE_BUSY;
 8007aa4:	68fb      	ldr	r3, [r7, #12]
 8007aa6:	2202      	movs	r2, #2
 8007aa8:	f883 20c1 	strb.w	r2, [r3, #193]	; 0xc1

  /* Configure the compare unit */
  if (TimerIdx == HRTIM_TIMERINDEX_MASTER)
 8007aac:	68bb      	ldr	r3, [r7, #8]
 8007aae:	2b05      	cmp	r3, #5
 8007ab0:	d140      	bne.n	8007b34 <HAL_HRTIM_WaveformCompareConfig+0xc4>
  {
    switch (CompareUnit)
 8007ab2:	687b      	ldr	r3, [r7, #4]
 8007ab4:	3b01      	subs	r3, #1
 8007ab6:	2b07      	cmp	r3, #7
 8007ab8:	d82a      	bhi.n	8007b10 <HAL_HRTIM_WaveformCompareConfig+0xa0>
 8007aba:	a201      	add	r2, pc, #4	; (adr r2, 8007ac0 <HAL_HRTIM_WaveformCompareConfig+0x50>)
 8007abc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007ac0:	08007ae1 	.word	0x08007ae1
 8007ac4:	08007aed 	.word	0x08007aed
 8007ac8:	08007b11 	.word	0x08007b11
 8007acc:	08007af9 	.word	0x08007af9
 8007ad0:	08007b11 	.word	0x08007b11
 8007ad4:	08007b11 	.word	0x08007b11
 8007ad8:	08007b11 	.word	0x08007b11
 8007adc:	08007b05 	.word	0x08007b05
    {
      case HRTIM_COMPAREUNIT_1:
        {
        hhrtim->Instance->sMasterRegs.MCMP1R = pCompareCfg->CompareValue;
 8007ae0:	68fb      	ldr	r3, [r7, #12]
 8007ae2:	681b      	ldr	r3, [r3, #0]
 8007ae4:	683a      	ldr	r2, [r7, #0]
 8007ae6:	6812      	ldr	r2, [r2, #0]
 8007ae8:	61da      	str	r2, [r3, #28]
        break;
 8007aea:	e01a      	b.n	8007b22 <HAL_HRTIM_WaveformCompareConfig+0xb2>
        }

      case HRTIM_COMPAREUNIT_2:
        {
        hhrtim->Instance->sMasterRegs.MCMP2R = pCompareCfg->CompareValue;
 8007aec:	68fb      	ldr	r3, [r7, #12]
 8007aee:	681b      	ldr	r3, [r3, #0]
 8007af0:	683a      	ldr	r2, [r7, #0]
 8007af2:	6812      	ldr	r2, [r2, #0]
 8007af4:	625a      	str	r2, [r3, #36]	; 0x24
        break;
 8007af6:	e014      	b.n	8007b22 <HAL_HRTIM_WaveformCompareConfig+0xb2>
        }

      case HRTIM_COMPAREUNIT_3:
        {
        hhrtim->Instance->sMasterRegs.MCMP3R = pCompareCfg->CompareValue;
 8007af8:	68fb      	ldr	r3, [r7, #12]
 8007afa:	681b      	ldr	r3, [r3, #0]
 8007afc:	683a      	ldr	r2, [r7, #0]
 8007afe:	6812      	ldr	r2, [r2, #0]
 8007b00:	629a      	str	r2, [r3, #40]	; 0x28
        break;
 8007b02:	e00e      	b.n	8007b22 <HAL_HRTIM_WaveformCompareConfig+0xb2>
        }

      case HRTIM_COMPAREUNIT_4:
        {
        hhrtim->Instance->sMasterRegs.MCMP4R = pCompareCfg->CompareValue;
 8007b04:	68fb      	ldr	r3, [r7, #12]
 8007b06:	681b      	ldr	r3, [r3, #0]
 8007b08:	683a      	ldr	r2, [r7, #0]
 8007b0a:	6812      	ldr	r2, [r2, #0]
 8007b0c:	62da      	str	r2, [r3, #44]	; 0x2c
        break;
 8007b0e:	e008      	b.n	8007b22 <HAL_HRTIM_WaveformCompareConfig+0xb2>
        }

      default:
        {
        hhrtim->State = HAL_HRTIM_STATE_ERROR;
 8007b10:	68fb      	ldr	r3, [r7, #12]
 8007b12:	2207      	movs	r2, #7
 8007b14:	f883 20c1 	strb.w	r2, [r3, #193]	; 0xc1

        /* Process Unlocked */
        __HAL_UNLOCK(hhrtim);
 8007b18:	68fb      	ldr	r3, [r7, #12]
 8007b1a:	2200      	movs	r2, #0
 8007b1c:	f883 20c0 	strb.w	r2, [r3, #192]	; 0xc0

        break;
 8007b20:	bf00      	nop
        }
    }

    if(hhrtim->State == HAL_HRTIM_STATE_ERROR)
 8007b22:	68fb      	ldr	r3, [r7, #12]
 8007b24:	f893 30c1 	ldrb.w	r3, [r3, #193]	; 0xc1
 8007b28:	b2db      	uxtb	r3, r3
 8007b2a:	2b07      	cmp	r3, #7
 8007b2c:	f040 80fe 	bne.w	8007d2c <HAL_HRTIM_WaveformCompareConfig+0x2bc>
    {
     return HAL_ERROR;
 8007b30:	2301      	movs	r3, #1
 8007b32:	e104      	b.n	8007d3e <HAL_HRTIM_WaveformCompareConfig+0x2ce>
    }

  }
  else
  {
    switch (CompareUnit)
 8007b34:	687b      	ldr	r3, [r7, #4]
 8007b36:	3b01      	subs	r3, #1
 8007b38:	2b07      	cmp	r3, #7
 8007b3a:	f200 80e3 	bhi.w	8007d04 <HAL_HRTIM_WaveformCompareConfig+0x294>
 8007b3e:	a201      	add	r2, pc, #4	; (adr r2, 8007b44 <HAL_HRTIM_WaveformCompareConfig+0xd4>)
 8007b40:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007b44:	08007b65 	.word	0x08007b65
 8007b48:	08007b79 	.word	0x08007b79
 8007b4c:	08007d05 	.word	0x08007d05
 8007b50:	08007c35 	.word	0x08007c35
 8007b54:	08007d05 	.word	0x08007d05
 8007b58:	08007d05 	.word	0x08007d05
 8007b5c:	08007d05 	.word	0x08007d05
 8007b60:	08007c49 	.word	0x08007c49
    {
    case HRTIM_COMPAREUNIT_1:
      {
        /* Set the compare value */
        hhrtim->Instance->sTimerxRegs[TimerIdx].CMP1xR = pCompareCfg->CompareValue;
 8007b64:	68fb      	ldr	r3, [r7, #12]
 8007b66:	6819      	ldr	r1, [r3, #0]
 8007b68:	683b      	ldr	r3, [r7, #0]
 8007b6a:	681a      	ldr	r2, [r3, #0]
 8007b6c:	68bb      	ldr	r3, [r7, #8]
 8007b6e:	01db      	lsls	r3, r3, #7
 8007b70:	440b      	add	r3, r1
 8007b72:	339c      	adds	r3, #156	; 0x9c
 8007b74:	601a      	str	r2, [r3, #0]
        break;
 8007b76:	e0d1      	b.n	8007d1c <HAL_HRTIM_WaveformCompareConfig+0x2ac>
      {
        /* Check parameters */
        assert_param(IS_HRTIM_COMPAREUNIT_AUTODELAYEDMODE(CompareUnit, pCompareCfg->AutoDelayedMode));

        /* Set the compare value */
        hhrtim->Instance->sTimerxRegs[TimerIdx].CMP2xR = pCompareCfg->CompareValue;
 8007b78:	68fb      	ldr	r3, [r7, #12]
 8007b7a:	6819      	ldr	r1, [r3, #0]
 8007b7c:	683b      	ldr	r3, [r7, #0]
 8007b7e:	681a      	ldr	r2, [r3, #0]
 8007b80:	68bb      	ldr	r3, [r7, #8]
 8007b82:	01db      	lsls	r3, r3, #7
 8007b84:	440b      	add	r3, r1
 8007b86:	33a4      	adds	r3, #164	; 0xa4
 8007b88:	601a      	str	r2, [r3, #0]

        if (pCompareCfg->AutoDelayedMode != HRTIM_AUTODELAYEDMODE_REGULAR)
 8007b8a:	683b      	ldr	r3, [r7, #0]
 8007b8c:	685b      	ldr	r3, [r3, #4]
 8007b8e:	2b00      	cmp	r3, #0
 8007b90:	d03f      	beq.n	8007c12 <HAL_HRTIM_WaveformCompareConfig+0x1a2>
        {
          /* Configure auto-delayed mode */
          /* DELCMP2 bitfield must be reset when reprogrammed from one value */
          /* to the other to reinitialize properly the auto-delayed mechanism */
          hhrtim->Instance->sTimerxRegs[TimerIdx].TIMxCR &= ~HRTIM_TIMCR_DELCMP2;
 8007b92:	68fb      	ldr	r3, [r7, #12]
 8007b94:	681a      	ldr	r2, [r3, #0]
 8007b96:	68bb      	ldr	r3, [r7, #8]
 8007b98:	3301      	adds	r3, #1
 8007b9a:	01db      	lsls	r3, r3, #7
 8007b9c:	4413      	add	r3, r2
 8007b9e:	681b      	ldr	r3, [r3, #0]
 8007ba0:	68fa      	ldr	r2, [r7, #12]
 8007ba2:	6811      	ldr	r1, [r2, #0]
 8007ba4:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8007ba8:	68bb      	ldr	r3, [r7, #8]
 8007baa:	3301      	adds	r3, #1
 8007bac:	01db      	lsls	r3, r3, #7
 8007bae:	440b      	add	r3, r1
 8007bb0:	601a      	str	r2, [r3, #0]
          hhrtim->Instance->sTimerxRegs[TimerIdx].TIMxCR |= pCompareCfg->AutoDelayedMode;
 8007bb2:	68fb      	ldr	r3, [r7, #12]
 8007bb4:	681a      	ldr	r2, [r3, #0]
 8007bb6:	68bb      	ldr	r3, [r7, #8]
 8007bb8:	3301      	adds	r3, #1
 8007bba:	01db      	lsls	r3, r3, #7
 8007bbc:	4413      	add	r3, r2
 8007bbe:	681a      	ldr	r2, [r3, #0]
 8007bc0:	683b      	ldr	r3, [r7, #0]
 8007bc2:	685b      	ldr	r3, [r3, #4]
 8007bc4:	68f9      	ldr	r1, [r7, #12]
 8007bc6:	6809      	ldr	r1, [r1, #0]
 8007bc8:	431a      	orrs	r2, r3
 8007bca:	68bb      	ldr	r3, [r7, #8]
 8007bcc:	3301      	adds	r3, #1
 8007bce:	01db      	lsls	r3, r3, #7
 8007bd0:	440b      	add	r3, r1
 8007bd2:	601a      	str	r2, [r3, #0]

          /* Set the compare value for timeout compare unit (if any) */
          if (pCompareCfg->AutoDelayedMode == HRTIM_AUTODELAYEDMODE_AUTODELAYED_TIMEOUTCMP1)
 8007bd4:	683b      	ldr	r3, [r7, #0]
 8007bd6:	685b      	ldr	r3, [r3, #4]
 8007bd8:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8007bdc:	d109      	bne.n	8007bf2 <HAL_HRTIM_WaveformCompareConfig+0x182>
          {
            hhrtim->Instance->sTimerxRegs[TimerIdx].CMP1xR = pCompareCfg->AutoDelayedTimeout;
 8007bde:	68fb      	ldr	r3, [r7, #12]
 8007be0:	6819      	ldr	r1, [r3, #0]
 8007be2:	683b      	ldr	r3, [r7, #0]
 8007be4:	689a      	ldr	r2, [r3, #8]
 8007be6:	68bb      	ldr	r3, [r7, #8]
 8007be8:	01db      	lsls	r3, r3, #7
 8007bea:	440b      	add	r3, r1
 8007bec:	339c      	adds	r3, #156	; 0x9c
 8007bee:	601a      	str	r2, [r3, #0]
        else
        {
          /* Clear HRTIM_TIMxCR.DELCMP2 bitfield */
          MODIFY_REG(hhrtim->Instance->sTimerxRegs[TimerIdx].TIMxCR, HRTIM_TIMCR_DELCMP2, 0U);
        }
         break;
 8007bf0:	e091      	b.n	8007d16 <HAL_HRTIM_WaveformCompareConfig+0x2a6>
          else if (pCompareCfg->AutoDelayedMode == HRTIM_AUTODELAYEDMODE_AUTODELAYED_TIMEOUTCMP3)
 8007bf2:	683b      	ldr	r3, [r7, #0]
 8007bf4:	685b      	ldr	r3, [r3, #4]
 8007bf6:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8007bfa:	f040 808c 	bne.w	8007d16 <HAL_HRTIM_WaveformCompareConfig+0x2a6>
            hhrtim->Instance->sTimerxRegs[TimerIdx].CMP3xR = pCompareCfg->AutoDelayedTimeout;
 8007bfe:	68fb      	ldr	r3, [r7, #12]
 8007c00:	6819      	ldr	r1, [r3, #0]
 8007c02:	683b      	ldr	r3, [r7, #0]
 8007c04:	689a      	ldr	r2, [r3, #8]
 8007c06:	68bb      	ldr	r3, [r7, #8]
 8007c08:	01db      	lsls	r3, r3, #7
 8007c0a:	440b      	add	r3, r1
 8007c0c:	33a8      	adds	r3, #168	; 0xa8
 8007c0e:	601a      	str	r2, [r3, #0]
         break;
 8007c10:	e081      	b.n	8007d16 <HAL_HRTIM_WaveformCompareConfig+0x2a6>
          MODIFY_REG(hhrtim->Instance->sTimerxRegs[TimerIdx].TIMxCR, HRTIM_TIMCR_DELCMP2, 0U);
 8007c12:	68fb      	ldr	r3, [r7, #12]
 8007c14:	681a      	ldr	r2, [r3, #0]
 8007c16:	68bb      	ldr	r3, [r7, #8]
 8007c18:	3301      	adds	r3, #1
 8007c1a:	01db      	lsls	r3, r3, #7
 8007c1c:	4413      	add	r3, r2
 8007c1e:	681b      	ldr	r3, [r3, #0]
 8007c20:	68fa      	ldr	r2, [r7, #12]
 8007c22:	6811      	ldr	r1, [r2, #0]
 8007c24:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8007c28:	68bb      	ldr	r3, [r7, #8]
 8007c2a:	3301      	adds	r3, #1
 8007c2c:	01db      	lsls	r3, r3, #7
 8007c2e:	440b      	add	r3, r1
 8007c30:	601a      	str	r2, [r3, #0]
         break;
 8007c32:	e070      	b.n	8007d16 <HAL_HRTIM_WaveformCompareConfig+0x2a6>
      }

    case HRTIM_COMPAREUNIT_3:
      {
        /* Set the compare value */
        hhrtim->Instance->sTimerxRegs[TimerIdx].CMP3xR = pCompareCfg->CompareValue;
 8007c34:	68fb      	ldr	r3, [r7, #12]
 8007c36:	6819      	ldr	r1, [r3, #0]
 8007c38:	683b      	ldr	r3, [r7, #0]
 8007c3a:	681a      	ldr	r2, [r3, #0]
 8007c3c:	68bb      	ldr	r3, [r7, #8]
 8007c3e:	01db      	lsls	r3, r3, #7
 8007c40:	440b      	add	r3, r1
 8007c42:	33a8      	adds	r3, #168	; 0xa8
 8007c44:	601a      	str	r2, [r3, #0]
        break;
 8007c46:	e069      	b.n	8007d1c <HAL_HRTIM_WaveformCompareConfig+0x2ac>
      {
        /* Check parameters */
        assert_param(IS_HRTIM_COMPAREUNIT_AUTODELAYEDMODE(CompareUnit, pCompareCfg->AutoDelayedMode));

        /* Set the compare value */
        hhrtim->Instance->sTimerxRegs[TimerIdx].CMP4xR = pCompareCfg->CompareValue;
 8007c48:	68fb      	ldr	r3, [r7, #12]
 8007c4a:	6819      	ldr	r1, [r3, #0]
 8007c4c:	683b      	ldr	r3, [r7, #0]
 8007c4e:	681a      	ldr	r2, [r3, #0]
 8007c50:	68bb      	ldr	r3, [r7, #8]
 8007c52:	01db      	lsls	r3, r3, #7
 8007c54:	440b      	add	r3, r1
 8007c56:	33ac      	adds	r3, #172	; 0xac
 8007c58:	601a      	str	r2, [r3, #0]

        if (pCompareCfg->AutoDelayedMode != HRTIM_AUTODELAYEDMODE_REGULAR)
 8007c5a:	683b      	ldr	r3, [r7, #0]
 8007c5c:	685b      	ldr	r3, [r3, #4]
 8007c5e:	2b00      	cmp	r3, #0
 8007c60:	d03f      	beq.n	8007ce2 <HAL_HRTIM_WaveformCompareConfig+0x272>
        {
          /* Configure auto-delayed mode */
          /* DELCMP4 bitfield must be reset when reprogrammed from one value */
          /* to the other to reinitialize properly the auto-delayed mechanism */
          hhrtim->Instance->sTimerxRegs[TimerIdx].TIMxCR &= ~HRTIM_TIMCR_DELCMP4;
 8007c62:	68fb      	ldr	r3, [r7, #12]
 8007c64:	681a      	ldr	r2, [r3, #0]
 8007c66:	68bb      	ldr	r3, [r7, #8]
 8007c68:	3301      	adds	r3, #1
 8007c6a:	01db      	lsls	r3, r3, #7
 8007c6c:	4413      	add	r3, r2
 8007c6e:	681b      	ldr	r3, [r3, #0]
 8007c70:	68fa      	ldr	r2, [r7, #12]
 8007c72:	6811      	ldr	r1, [r2, #0]
 8007c74:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8007c78:	68bb      	ldr	r3, [r7, #8]
 8007c7a:	3301      	adds	r3, #1
 8007c7c:	01db      	lsls	r3, r3, #7
 8007c7e:	440b      	add	r3, r1
 8007c80:	601a      	str	r2, [r3, #0]
          hhrtim->Instance->sTimerxRegs[TimerIdx].TIMxCR |= (pCompareCfg->AutoDelayedMode << 2U);
 8007c82:	68fb      	ldr	r3, [r7, #12]
 8007c84:	681a      	ldr	r2, [r3, #0]
 8007c86:	68bb      	ldr	r3, [r7, #8]
 8007c88:	3301      	adds	r3, #1
 8007c8a:	01db      	lsls	r3, r3, #7
 8007c8c:	4413      	add	r3, r2
 8007c8e:	681a      	ldr	r2, [r3, #0]
 8007c90:	683b      	ldr	r3, [r7, #0]
 8007c92:	685b      	ldr	r3, [r3, #4]
 8007c94:	009b      	lsls	r3, r3, #2
 8007c96:	68f9      	ldr	r1, [r7, #12]
 8007c98:	6809      	ldr	r1, [r1, #0]
 8007c9a:	431a      	orrs	r2, r3
 8007c9c:	68bb      	ldr	r3, [r7, #8]
 8007c9e:	3301      	adds	r3, #1
 8007ca0:	01db      	lsls	r3, r3, #7
 8007ca2:	440b      	add	r3, r1
 8007ca4:	601a      	str	r2, [r3, #0]

          /* Set the compare value for timeout compare unit (if any) */
          if (pCompareCfg->AutoDelayedMode == HRTIM_AUTODELAYEDMODE_AUTODELAYED_TIMEOUTCMP1)
 8007ca6:	683b      	ldr	r3, [r7, #0]
 8007ca8:	685b      	ldr	r3, [r3, #4]
 8007caa:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8007cae:	d109      	bne.n	8007cc4 <HAL_HRTIM_WaveformCompareConfig+0x254>
          {
            hhrtim->Instance->sTimerxRegs[TimerIdx].CMP1xR = pCompareCfg->AutoDelayedTimeout;
 8007cb0:	68fb      	ldr	r3, [r7, #12]
 8007cb2:	6819      	ldr	r1, [r3, #0]
 8007cb4:	683b      	ldr	r3, [r7, #0]
 8007cb6:	689a      	ldr	r2, [r3, #8]
 8007cb8:	68bb      	ldr	r3, [r7, #8]
 8007cba:	01db      	lsls	r3, r3, #7
 8007cbc:	440b      	add	r3, r1
 8007cbe:	339c      	adds	r3, #156	; 0x9c
 8007cc0:	601a      	str	r2, [r3, #0]
        else
        {
          /* Clear HRTIM_TIMxCR.DELCMP4 bitfield */
          MODIFY_REG(hhrtim->Instance->sTimerxRegs[TimerIdx].TIMxCR, HRTIM_TIMCR_DELCMP4, 0U);
        }
         break;
 8007cc2:	e02a      	b.n	8007d1a <HAL_HRTIM_WaveformCompareConfig+0x2aa>
          else if (pCompareCfg->AutoDelayedMode == HRTIM_AUTODELAYEDMODE_AUTODELAYED_TIMEOUTCMP3)
 8007cc4:	683b      	ldr	r3, [r7, #0]
 8007cc6:	685b      	ldr	r3, [r3, #4]
 8007cc8:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8007ccc:	d125      	bne.n	8007d1a <HAL_HRTIM_WaveformCompareConfig+0x2aa>
            hhrtim->Instance->sTimerxRegs[TimerIdx].CMP3xR = pCompareCfg->AutoDelayedTimeout;
 8007cce:	68fb      	ldr	r3, [r7, #12]
 8007cd0:	6819      	ldr	r1, [r3, #0]
 8007cd2:	683b      	ldr	r3, [r7, #0]
 8007cd4:	689a      	ldr	r2, [r3, #8]
 8007cd6:	68bb      	ldr	r3, [r7, #8]
 8007cd8:	01db      	lsls	r3, r3, #7
 8007cda:	440b      	add	r3, r1
 8007cdc:	33a8      	adds	r3, #168	; 0xa8
 8007cde:	601a      	str	r2, [r3, #0]
         break;
 8007ce0:	e01b      	b.n	8007d1a <HAL_HRTIM_WaveformCompareConfig+0x2aa>
          MODIFY_REG(hhrtim->Instance->sTimerxRegs[TimerIdx].TIMxCR, HRTIM_TIMCR_DELCMP4, 0U);
 8007ce2:	68fb      	ldr	r3, [r7, #12]
 8007ce4:	681a      	ldr	r2, [r3, #0]
 8007ce6:	68bb      	ldr	r3, [r7, #8]
 8007ce8:	3301      	adds	r3, #1
 8007cea:	01db      	lsls	r3, r3, #7
 8007cec:	4413      	add	r3, r2
 8007cee:	681b      	ldr	r3, [r3, #0]
 8007cf0:	68fa      	ldr	r2, [r7, #12]
 8007cf2:	6811      	ldr	r1, [r2, #0]
 8007cf4:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8007cf8:	68bb      	ldr	r3, [r7, #8]
 8007cfa:	3301      	adds	r3, #1
 8007cfc:	01db      	lsls	r3, r3, #7
 8007cfe:	440b      	add	r3, r1
 8007d00:	601a      	str	r2, [r3, #0]
         break;
 8007d02:	e00a      	b.n	8007d1a <HAL_HRTIM_WaveformCompareConfig+0x2aa>
      }

  default:
     {
      hhrtim->State = HAL_HRTIM_STATE_ERROR;
 8007d04:	68fb      	ldr	r3, [r7, #12]
 8007d06:	2207      	movs	r2, #7
 8007d08:	f883 20c1 	strb.w	r2, [r3, #193]	; 0xc1

      /* Process Unlocked */
      __HAL_UNLOCK(hhrtim);
 8007d0c:	68fb      	ldr	r3, [r7, #12]
 8007d0e:	2200      	movs	r2, #0
 8007d10:	f883 20c0 	strb.w	r2, [r3, #192]	; 0xc0

      break;
 8007d14:	e002      	b.n	8007d1c <HAL_HRTIM_WaveformCompareConfig+0x2ac>
         break;
 8007d16:	bf00      	nop
 8007d18:	e000      	b.n	8007d1c <HAL_HRTIM_WaveformCompareConfig+0x2ac>
         break;
 8007d1a:	bf00      	nop
     }
   }

   if(hhrtim->State == HAL_HRTIM_STATE_ERROR)
 8007d1c:	68fb      	ldr	r3, [r7, #12]
 8007d1e:	f893 30c1 	ldrb.w	r3, [r3, #193]	; 0xc1
 8007d22:	b2db      	uxtb	r3, r3
 8007d24:	2b07      	cmp	r3, #7
 8007d26:	d101      	bne.n	8007d2c <HAL_HRTIM_WaveformCompareConfig+0x2bc>
   {
     return HAL_ERROR;
 8007d28:	2301      	movs	r3, #1
 8007d2a:	e008      	b.n	8007d3e <HAL_HRTIM_WaveformCompareConfig+0x2ce>
   }

  }
  hhrtim->State = HAL_HRTIM_STATE_READY;
 8007d2c:	68fb      	ldr	r3, [r7, #12]
 8007d2e:	2201      	movs	r2, #1
 8007d30:	f883 20c1 	strb.w	r2, [r3, #193]	; 0xc1

  /* Process Unlocked */
  __HAL_UNLOCK(hhrtim);
 8007d34:	68fb      	ldr	r3, [r7, #12]
 8007d36:	2200      	movs	r2, #0
 8007d38:	f883 20c0 	strb.w	r2, [r3, #192]	; 0xc0

  return HAL_OK;
 8007d3c:	2300      	movs	r3, #0
}
 8007d3e:	4618      	mov	r0, r3
 8007d40:	3714      	adds	r7, #20
 8007d42:	46bd      	mov	sp, r7
 8007d44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d48:	4770      	bx	lr
 8007d4a:	bf00      	nop

08007d4c <HAL_HRTIM_WaveformOutputConfig>:
  */
HAL_StatusTypeDef HAL_HRTIM_WaveformOutputConfig(HRTIM_HandleTypeDef * hhrtim,
                                                uint32_t TimerIdx,
                                                uint32_t Output,
                                                const HRTIM_OutputCfgTypeDef * pOutputCfg)
{
 8007d4c:	b580      	push	{r7, lr}
 8007d4e:	b084      	sub	sp, #16
 8007d50:	af00      	add	r7, sp, #0
 8007d52:	60f8      	str	r0, [r7, #12]
 8007d54:	60b9      	str	r1, [r7, #8]
 8007d56:	607a      	str	r2, [r7, #4]
 8007d58:	603b      	str	r3, [r7, #0]
  assert_param(IS_HRTIM_OUTPUTIDLEMODE(pOutputCfg->IdleMode));
  assert_param(IS_HRTIM_OUTPUTFAULTLEVEL(pOutputCfg->FaultLevel));
  assert_param(IS_HRTIM_OUTPUTCHOPPERMODE(pOutputCfg->ChopperModeEnable));
  assert_param(IS_HRTIM_OUTPUTBURSTMODEENTRY(pOutputCfg->BurstModeEntryDelayed));

  if(hhrtim->State == HAL_HRTIM_STATE_BUSY)
 8007d5a:	68fb      	ldr	r3, [r7, #12]
 8007d5c:	f893 30c1 	ldrb.w	r3, [r3, #193]	; 0xc1
 8007d60:	b2db      	uxtb	r3, r3
 8007d62:	2b02      	cmp	r3, #2
 8007d64:	d101      	bne.n	8007d6a <HAL_HRTIM_WaveformOutputConfig+0x1e>
  {
     return HAL_BUSY;
 8007d66:	2302      	movs	r3, #2
 8007d68:	e01d      	b.n	8007da6 <HAL_HRTIM_WaveformOutputConfig+0x5a>
  }

  /* Process Locked */
  __HAL_LOCK(hhrtim);
 8007d6a:	68fb      	ldr	r3, [r7, #12]
 8007d6c:	f893 30c0 	ldrb.w	r3, [r3, #192]	; 0xc0
 8007d70:	2b01      	cmp	r3, #1
 8007d72:	d101      	bne.n	8007d78 <HAL_HRTIM_WaveformOutputConfig+0x2c>
 8007d74:	2302      	movs	r3, #2
 8007d76:	e016      	b.n	8007da6 <HAL_HRTIM_WaveformOutputConfig+0x5a>
 8007d78:	68fb      	ldr	r3, [r7, #12]
 8007d7a:	2201      	movs	r2, #1
 8007d7c:	f883 20c0 	strb.w	r2, [r3, #192]	; 0xc0

  hhrtim->State = HAL_HRTIM_STATE_BUSY;
 8007d80:	68fb      	ldr	r3, [r7, #12]
 8007d82:	2202      	movs	r2, #2
 8007d84:	f883 20c1 	strb.w	r2, [r3, #193]	; 0xc1

  /* Configure the timer output */
  HRTIM_OutputConfig(hhrtim,
 8007d88:	683b      	ldr	r3, [r7, #0]
 8007d8a:	687a      	ldr	r2, [r7, #4]
 8007d8c:	68b9      	ldr	r1, [r7, #8]
 8007d8e:	68f8      	ldr	r0, [r7, #12]
 8007d90:	f000 fc50 	bl	8008634 <HRTIM_OutputConfig>
                     TimerIdx,
                     Output,
                     pOutputCfg);

  hhrtim->State = HAL_HRTIM_STATE_READY;
 8007d94:	68fb      	ldr	r3, [r7, #12]
 8007d96:	2201      	movs	r2, #1
 8007d98:	f883 20c1 	strb.w	r2, [r3, #193]	; 0xc1

  /* Process Unlocked */
  __HAL_UNLOCK(hhrtim);
 8007d9c:	68fb      	ldr	r3, [r7, #12]
 8007d9e:	2200      	movs	r2, #0
 8007da0:	f883 20c0 	strb.w	r2, [r3, #192]	; 0xc0

  return HAL_OK;
 8007da4:	2300      	movs	r3, #0
}
 8007da6:	4618      	mov	r0, r3
 8007da8:	3710      	adds	r7, #16
 8007daa:	46bd      	mov	sp, r7
 8007dac:	bd80      	pop	{r7, pc}

08007dae <HAL_HRTIM_WaveformOutputStart>:
  *                    @arg HRTIM_OUTPUT_TE2: Timer E - Output 2
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HRTIM_WaveformOutputStart(HRTIM_HandleTypeDef * hhrtim,
                                                uint32_t OutputsToStart)
{
 8007dae:	b480      	push	{r7}
 8007db0:	b083      	sub	sp, #12
 8007db2:	af00      	add	r7, sp, #0
 8007db4:	6078      	str	r0, [r7, #4]
 8007db6:	6039      	str	r1, [r7, #0]
   /* Check the parameters */
  assert_param(IS_HRTIM_OUTPUT(OutputsToStart));

  /* Process Locked */
  __HAL_LOCK(hhrtim);
 8007db8:	687b      	ldr	r3, [r7, #4]
 8007dba:	f893 30c0 	ldrb.w	r3, [r3, #192]	; 0xc0
 8007dbe:	2b01      	cmp	r3, #1
 8007dc0:	d101      	bne.n	8007dc6 <HAL_HRTIM_WaveformOutputStart+0x18>
 8007dc2:	2302      	movs	r3, #2
 8007dc4:	e01a      	b.n	8007dfc <HAL_HRTIM_WaveformOutputStart+0x4e>
 8007dc6:	687b      	ldr	r3, [r7, #4]
 8007dc8:	2201      	movs	r2, #1
 8007dca:	f883 20c0 	strb.w	r2, [r3, #192]	; 0xc0

  hhrtim->State = HAL_HRTIM_STATE_BUSY;
 8007dce:	687b      	ldr	r3, [r7, #4]
 8007dd0:	2202      	movs	r2, #2
 8007dd2:	f883 20c1 	strb.w	r2, [r3, #193]	; 0xc1

  /* Enable the HRTIM outputs */
  hhrtim->Instance->sCommonRegs.OENR |= (OutputsToStart);
 8007dd6:	687b      	ldr	r3, [r7, #4]
 8007dd8:	681b      	ldr	r3, [r3, #0]
 8007dda:	f8d3 1394 	ldr.w	r1, [r3, #916]	; 0x394
 8007dde:	687b      	ldr	r3, [r7, #4]
 8007de0:	681b      	ldr	r3, [r3, #0]
 8007de2:	683a      	ldr	r2, [r7, #0]
 8007de4:	430a      	orrs	r2, r1
 8007de6:	f8c3 2394 	str.w	r2, [r3, #916]	; 0x394

  hhrtim->State = HAL_HRTIM_STATE_READY;
 8007dea:	687b      	ldr	r3, [r7, #4]
 8007dec:	2201      	movs	r2, #1
 8007dee:	f883 20c1 	strb.w	r2, [r3, #193]	; 0xc1

  /* Process Unlocked */
  __HAL_UNLOCK(hhrtim);
 8007df2:	687b      	ldr	r3, [r7, #4]
 8007df4:	2200      	movs	r2, #0
 8007df6:	f883 20c0 	strb.w	r2, [r3, #192]	; 0xc0

  return HAL_OK;
 8007dfa:	2300      	movs	r3, #0
}
 8007dfc:	4618      	mov	r0, r3
 8007dfe:	370c      	adds	r7, #12
 8007e00:	46bd      	mov	sp, r7
 8007e02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e06:	4770      	bx	lr

08007e08 <HAL_HRTIM_WaveformOutputStop>:
  *                    @arg HRTIM_OUTPUT_TE2: Timer E - Output 2
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HRTIM_WaveformOutputStop(HRTIM_HandleTypeDef * hhrtim,
                                               uint32_t OutputsToStop)
{
 8007e08:	b480      	push	{r7}
 8007e0a:	b083      	sub	sp, #12
 8007e0c:	af00      	add	r7, sp, #0
 8007e0e:	6078      	str	r0, [r7, #4]
 8007e10:	6039      	str	r1, [r7, #0]
   /* Check the parameters */
  assert_param(IS_HRTIM_OUTPUT(OutputsToStop));

  /* Process Locked */
  __HAL_LOCK(hhrtim);
 8007e12:	687b      	ldr	r3, [r7, #4]
 8007e14:	f893 30c0 	ldrb.w	r3, [r3, #192]	; 0xc0
 8007e18:	2b01      	cmp	r3, #1
 8007e1a:	d101      	bne.n	8007e20 <HAL_HRTIM_WaveformOutputStop+0x18>
 8007e1c:	2302      	movs	r3, #2
 8007e1e:	e01a      	b.n	8007e56 <HAL_HRTIM_WaveformOutputStop+0x4e>
 8007e20:	687b      	ldr	r3, [r7, #4]
 8007e22:	2201      	movs	r2, #1
 8007e24:	f883 20c0 	strb.w	r2, [r3, #192]	; 0xc0

  hhrtim->State = HAL_HRTIM_STATE_BUSY;
 8007e28:	687b      	ldr	r3, [r7, #4]
 8007e2a:	2202      	movs	r2, #2
 8007e2c:	f883 20c1 	strb.w	r2, [r3, #193]	; 0xc1

  /* Enable the HRTIM outputs */
  hhrtim->Instance->sCommonRegs.ODISR |= (OutputsToStop);
 8007e30:	687b      	ldr	r3, [r7, #4]
 8007e32:	681b      	ldr	r3, [r3, #0]
 8007e34:	f8d3 1398 	ldr.w	r1, [r3, #920]	; 0x398
 8007e38:	687b      	ldr	r3, [r7, #4]
 8007e3a:	681b      	ldr	r3, [r3, #0]
 8007e3c:	683a      	ldr	r2, [r7, #0]
 8007e3e:	430a      	orrs	r2, r1
 8007e40:	f8c3 2398 	str.w	r2, [r3, #920]	; 0x398

  hhrtim->State = HAL_HRTIM_STATE_READY;
 8007e44:	687b      	ldr	r3, [r7, #4]
 8007e46:	2201      	movs	r2, #1
 8007e48:	f883 20c1 	strb.w	r2, [r3, #193]	; 0xc1

  /* Process Unlocked */
  __HAL_UNLOCK(hhrtim);
 8007e4c:	687b      	ldr	r3, [r7, #4]
 8007e4e:	2200      	movs	r2, #0
 8007e50:	f883 20c0 	strb.w	r2, [r3, #192]	; 0xc0

  return HAL_OK;
 8007e54:	2300      	movs	r3, #0
}
 8007e56:	4618      	mov	r0, r3
 8007e58:	370c      	adds	r7, #12
 8007e5a:	46bd      	mov	sp, r7
 8007e5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e60:	4770      	bx	lr
	...

08007e64 <HAL_HRTIM_WaveformCountStart_IT>:
  *       function.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HRTIM_WaveformCountStart_IT(HRTIM_HandleTypeDef * hhrtim,
                                                    uint32_t Timers)
{
 8007e64:	b480      	push	{r7}
 8007e66:	b085      	sub	sp, #20
 8007e68:	af00      	add	r7, sp, #0
 8007e6a:	6078      	str	r0, [r7, #4]
 8007e6c:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_HRTIM_TIMERID(Timers));

  /* Process Locked */
  __HAL_LOCK(hhrtim);
 8007e6e:	687b      	ldr	r3, [r7, #4]
 8007e70:	f893 30c0 	ldrb.w	r3, [r3, #192]	; 0xc0
 8007e74:	2b01      	cmp	r3, #1
 8007e76:	d101      	bne.n	8007e7c <HAL_HRTIM_WaveformCountStart_IT+0x18>
 8007e78:	2302      	movs	r3, #2
 8007e7a:	e05b      	b.n	8007f34 <HAL_HRTIM_WaveformCountStart_IT+0xd0>
 8007e7c:	687b      	ldr	r3, [r7, #4]
 8007e7e:	2201      	movs	r2, #1
 8007e80:	f883 20c0 	strb.w	r2, [r3, #192]	; 0xc0

  hhrtim->State = HAL_HRTIM_STATE_BUSY;
 8007e84:	687b      	ldr	r3, [r7, #4]
 8007e86:	2202      	movs	r2, #2
 8007e88:	f883 20c1 	strb.w	r2, [r3, #193]	; 0xc1

  /* Enable HRTIM interrupts (if required) */
  __HAL_HRTIM_ENABLE_IT(hhrtim, hhrtim->Init.HRTIMInterruptResquests);
 8007e8c:	687b      	ldr	r3, [r7, #4]
 8007e8e:	681b      	ldr	r3, [r3, #0]
 8007e90:	f8d3 1390 	ldr.w	r1, [r3, #912]	; 0x390
 8007e94:	687b      	ldr	r3, [r7, #4]
 8007e96:	685a      	ldr	r2, [r3, #4]
 8007e98:	687b      	ldr	r3, [r7, #4]
 8007e9a:	681b      	ldr	r3, [r3, #0]
 8007e9c:	430a      	orrs	r2, r1
 8007e9e:	f8c3 2390 	str.w	r2, [r3, #912]	; 0x390

  /* Enable master timer related interrupts (if required) */
  if ((Timers & HRTIM_TIMERID_MASTER) != 0U)
 8007ea2:	683b      	ldr	r3, [r7, #0]
 8007ea4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8007ea8:	2b00      	cmp	r3, #0
 8007eaa:	d009      	beq.n	8007ec0 <HAL_HRTIM_WaveformCountStart_IT+0x5c>
  {
    __HAL_HRTIM_MASTER_ENABLE_IT(hhrtim,
 8007eac:	687b      	ldr	r3, [r7, #4]
 8007eae:	681b      	ldr	r3, [r3, #0]
 8007eb0:	68d9      	ldr	r1, [r3, #12]
 8007eb2:	687b      	ldr	r3, [r7, #4]
 8007eb4:	f8d3 20ac 	ldr.w	r2, [r3, #172]	; 0xac
 8007eb8:	687b      	ldr	r3, [r7, #4]
 8007eba:	681b      	ldr	r3, [r3, #0]
 8007ebc:	430a      	orrs	r2, r1
 8007ebe:	60da      	str	r2, [r3, #12]
                                 hhrtim->TimerParam[HRTIM_TIMERINDEX_MASTER].InterruptRequests);
  }

  /* Enable timing unit related interrupts (if required) */
  for (timer_idx = HRTIM_TIMERINDEX_TIMER_A ;
 8007ec0:	2300      	movs	r3, #0
 8007ec2:	73fb      	strb	r3, [r7, #15]
 8007ec4:	e022      	b.n	8007f0c <HAL_HRTIM_WaveformCountStart_IT+0xa8>
       timer_idx < HRTIM_TIMERINDEX_MASTER ;
       timer_idx++)
  {
    if ((Timers & TimerIdxToTimerId[timer_idx]) != 0U)
 8007ec6:	7bfb      	ldrb	r3, [r7, #15]
 8007ec8:	4a1d      	ldr	r2, [pc, #116]	; (8007f40 <HAL_HRTIM_WaveformCountStart_IT+0xdc>)
 8007eca:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8007ece:	683b      	ldr	r3, [r7, #0]
 8007ed0:	4013      	ands	r3, r2
 8007ed2:	2b00      	cmp	r3, #0
 8007ed4:	d017      	beq.n	8007f06 <HAL_HRTIM_WaveformCountStart_IT+0xa2>
    {
      __HAL_HRTIM_TIMER_ENABLE_IT(hhrtim,
 8007ed6:	687b      	ldr	r3, [r7, #4]
 8007ed8:	681a      	ldr	r2, [r3, #0]
 8007eda:	7bfb      	ldrb	r3, [r7, #15]
 8007edc:	01db      	lsls	r3, r3, #7
 8007ede:	4413      	add	r3, r2
 8007ee0:	338c      	adds	r3, #140	; 0x8c
 8007ee2:	6818      	ldr	r0, [r3, #0]
 8007ee4:	7bfa      	ldrb	r2, [r7, #15]
 8007ee6:	6879      	ldr	r1, [r7, #4]
 8007ee8:	4613      	mov	r3, r2
 8007eea:	00db      	lsls	r3, r3, #3
 8007eec:	1a9b      	subs	r3, r3, r2
 8007eee:	009b      	lsls	r3, r3, #2
 8007ef0:	440b      	add	r3, r1
 8007ef2:	3320      	adds	r3, #32
 8007ef4:	681a      	ldr	r2, [r3, #0]
 8007ef6:	687b      	ldr	r3, [r7, #4]
 8007ef8:	6819      	ldr	r1, [r3, #0]
 8007efa:	7bfb      	ldrb	r3, [r7, #15]
 8007efc:	4302      	orrs	r2, r0
 8007efe:	01db      	lsls	r3, r3, #7
 8007f00:	440b      	add	r3, r1
 8007f02:	338c      	adds	r3, #140	; 0x8c
 8007f04:	601a      	str	r2, [r3, #0]
       timer_idx++)
 8007f06:	7bfb      	ldrb	r3, [r7, #15]
 8007f08:	3301      	adds	r3, #1
 8007f0a:	73fb      	strb	r3, [r7, #15]
       timer_idx < HRTIM_TIMERINDEX_MASTER ;
 8007f0c:	7bfb      	ldrb	r3, [r7, #15]
 8007f0e:	2b04      	cmp	r3, #4
 8007f10:	d9d9      	bls.n	8007ec6 <HAL_HRTIM_WaveformCountStart_IT+0x62>
                                  hhrtim->TimerParam[timer_idx].InterruptRequests);
    }
  }

  /* Enable timer(s) counter */
  hhrtim->Instance->sMasterRegs.MCR |= (Timers);
 8007f12:	687b      	ldr	r3, [r7, #4]
 8007f14:	681b      	ldr	r3, [r3, #0]
 8007f16:	6819      	ldr	r1, [r3, #0]
 8007f18:	687b      	ldr	r3, [r7, #4]
 8007f1a:	681b      	ldr	r3, [r3, #0]
 8007f1c:	683a      	ldr	r2, [r7, #0]
 8007f1e:	430a      	orrs	r2, r1
 8007f20:	601a      	str	r2, [r3, #0]

  hhrtim->State = HAL_HRTIM_STATE_READY;
 8007f22:	687b      	ldr	r3, [r7, #4]
 8007f24:	2201      	movs	r2, #1
 8007f26:	f883 20c1 	strb.w	r2, [r3, #193]	; 0xc1

  /* Process Unlocked */
  __HAL_UNLOCK(hhrtim);
 8007f2a:	687b      	ldr	r3, [r7, #4]
 8007f2c:	2200      	movs	r2, #0
 8007f2e:	f883 20c0 	strb.w	r2, [r3, #192]	; 0xc0

  return HAL_OK;}
 8007f32:	2300      	movs	r3, #0
 8007f34:	4618      	mov	r0, r3
 8007f36:	3714      	adds	r7, #20
 8007f38:	46bd      	mov	sp, r7
 8007f3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f3e:	4770      	bx	lr
 8007f40:	2000002c 	.word	0x2000002c

08007f44 <HAL_HRTIM_WaveformCountStop_IT>:
  * @note The counter of a timer is stopped only if all timer outputs are disabled
  * @note All enabled timer related interrupts are disabled.
  */
HAL_StatusTypeDef HAL_HRTIM_WaveformCountStop_IT(HRTIM_HandleTypeDef * hhrtim,
                                                   uint32_t Timers)
{
 8007f44:	b480      	push	{r7}
 8007f46:	b085      	sub	sp, #20
 8007f48:	af00      	add	r7, sp, #0
 8007f4a:	6078      	str	r0, [r7, #4]
 8007f4c:	6039      	str	r1, [r7, #0]
  /* ++ WA */
  __IO uint32_t delai = (uint32_t)(0x17FU);
 8007f4e:	f240 137f 	movw	r3, #383	; 0x17f
 8007f52:	60bb      	str	r3, [r7, #8]

  /* Check the parameters */
  assert_param(IS_HRTIM_TIMERID(Timers));

  /* Process Locked */
  __HAL_LOCK(hhrtim);
 8007f54:	687b      	ldr	r3, [r7, #4]
 8007f56:	f893 30c0 	ldrb.w	r3, [r3, #192]	; 0xc0
 8007f5a:	2b01      	cmp	r3, #1
 8007f5c:	d101      	bne.n	8007f62 <HAL_HRTIM_WaveformCountStop_IT+0x1e>
 8007f5e:	2302      	movs	r3, #2
 8007f60:	e065      	b.n	800802e <HAL_HRTIM_WaveformCountStop_IT+0xea>
 8007f62:	687b      	ldr	r3, [r7, #4]
 8007f64:	2201      	movs	r2, #1
 8007f66:	f883 20c0 	strb.w	r2, [r3, #192]	; 0xc0

  hhrtim->State = HAL_HRTIM_STATE_BUSY;
 8007f6a:	687b      	ldr	r3, [r7, #4]
 8007f6c:	2202      	movs	r2, #2
 8007f6e:	f883 20c1 	strb.w	r2, [r3, #193]	; 0xc1

  /* Disable HRTIM interrupts (if required) */
  __HAL_HRTIM_DISABLE_IT(hhrtim, hhrtim->Init.HRTIMInterruptResquests);
 8007f72:	687b      	ldr	r3, [r7, #4]
 8007f74:	681b      	ldr	r3, [r3, #0]
 8007f76:	f8d3 1390 	ldr.w	r1, [r3, #912]	; 0x390
 8007f7a:	687b      	ldr	r3, [r7, #4]
 8007f7c:	685b      	ldr	r3, [r3, #4]
 8007f7e:	43da      	mvns	r2, r3
 8007f80:	687b      	ldr	r3, [r7, #4]
 8007f82:	681b      	ldr	r3, [r3, #0]
 8007f84:	400a      	ands	r2, r1
 8007f86:	f8c3 2390 	str.w	r2, [r3, #912]	; 0x390

  /* Disable master timer related interrupts (if required) */
  if ((Timers & HRTIM_TIMERID_MASTER) != 0U)
 8007f8a:	683b      	ldr	r3, [r7, #0]
 8007f8c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8007f90:	2b00      	cmp	r3, #0
 8007f92:	d00a      	beq.n	8007faa <HAL_HRTIM_WaveformCountStop_IT+0x66>
  {
    /* Interrupts enable flag must be cleared one by one */
    __HAL_HRTIM_MASTER_DISABLE_IT(hhrtim, hhrtim->TimerParam[HRTIM_TIMERINDEX_MASTER].InterruptRequests);
 8007f94:	687b      	ldr	r3, [r7, #4]
 8007f96:	681b      	ldr	r3, [r3, #0]
 8007f98:	68d9      	ldr	r1, [r3, #12]
 8007f9a:	687b      	ldr	r3, [r7, #4]
 8007f9c:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 8007fa0:	43da      	mvns	r2, r3
 8007fa2:	687b      	ldr	r3, [r7, #4]
 8007fa4:	681b      	ldr	r3, [r3, #0]
 8007fa6:	400a      	ands	r2, r1
 8007fa8:	60da      	str	r2, [r3, #12]
  }

  /* Disable timing unit related interrupts (if required) */
  for (timer_idx = HRTIM_TIMERINDEX_TIMER_A ;
 8007faa:	2300      	movs	r3, #0
 8007fac:	73fb      	strb	r3, [r7, #15]
 8007fae:	e023      	b.n	8007ff8 <HAL_HRTIM_WaveformCountStop_IT+0xb4>
       timer_idx < HRTIM_TIMERINDEX_MASTER ;
       timer_idx++)
  {
    if ((Timers & TimerIdxToTimerId[timer_idx]) != 0U)
 8007fb0:	7bfb      	ldrb	r3, [r7, #15]
 8007fb2:	4a22      	ldr	r2, [pc, #136]	; (800803c <HAL_HRTIM_WaveformCountStop_IT+0xf8>)
 8007fb4:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8007fb8:	683b      	ldr	r3, [r7, #0]
 8007fba:	4013      	ands	r3, r2
 8007fbc:	2b00      	cmp	r3, #0
 8007fbe:	d018      	beq.n	8007ff2 <HAL_HRTIM_WaveformCountStop_IT+0xae>
    {
      __HAL_HRTIM_TIMER_DISABLE_IT(hhrtim, timer_idx, hhrtim->TimerParam[timer_idx].InterruptRequests);
 8007fc0:	687b      	ldr	r3, [r7, #4]
 8007fc2:	681a      	ldr	r2, [r3, #0]
 8007fc4:	7bfb      	ldrb	r3, [r7, #15]
 8007fc6:	01db      	lsls	r3, r3, #7
 8007fc8:	4413      	add	r3, r2
 8007fca:	338c      	adds	r3, #140	; 0x8c
 8007fcc:	6818      	ldr	r0, [r3, #0]
 8007fce:	7bfa      	ldrb	r2, [r7, #15]
 8007fd0:	6879      	ldr	r1, [r7, #4]
 8007fd2:	4613      	mov	r3, r2
 8007fd4:	00db      	lsls	r3, r3, #3
 8007fd6:	1a9b      	subs	r3, r3, r2
 8007fd8:	009b      	lsls	r3, r3, #2
 8007fda:	440b      	add	r3, r1
 8007fdc:	3320      	adds	r3, #32
 8007fde:	681b      	ldr	r3, [r3, #0]
 8007fe0:	43da      	mvns	r2, r3
 8007fe2:	687b      	ldr	r3, [r7, #4]
 8007fe4:	6819      	ldr	r1, [r3, #0]
 8007fe6:	7bfb      	ldrb	r3, [r7, #15]
 8007fe8:	4002      	ands	r2, r0
 8007fea:	01db      	lsls	r3, r3, #7
 8007fec:	440b      	add	r3, r1
 8007fee:	338c      	adds	r3, #140	; 0x8c
 8007ff0:	601a      	str	r2, [r3, #0]
       timer_idx++)
 8007ff2:	7bfb      	ldrb	r3, [r7, #15]
 8007ff4:	3301      	adds	r3, #1
 8007ff6:	73fb      	strb	r3, [r7, #15]
       timer_idx < HRTIM_TIMERINDEX_MASTER ;
 8007ff8:	7bfb      	ldrb	r3, [r7, #15]
 8007ffa:	2b04      	cmp	r3, #4
 8007ffc:	d9d8      	bls.n	8007fb0 <HAL_HRTIM_WaveformCountStop_IT+0x6c>
    }
  }

  /* ++ WA */
  do { delai--; } while (delai != 0U);
 8007ffe:	68bb      	ldr	r3, [r7, #8]
 8008000:	3b01      	subs	r3, #1
 8008002:	60bb      	str	r3, [r7, #8]
 8008004:	68bb      	ldr	r3, [r7, #8]
 8008006:	2b00      	cmp	r3, #0
 8008008:	d1f9      	bne.n	8007ffe <HAL_HRTIM_WaveformCountStop_IT+0xba>
  /* -- WA */

  /* Disable timer(s) counter */
  hhrtim->Instance->sMasterRegs.MCR &= ~(Timers);
 800800a:	687b      	ldr	r3, [r7, #4]
 800800c:	681b      	ldr	r3, [r3, #0]
 800800e:	6819      	ldr	r1, [r3, #0]
 8008010:	683b      	ldr	r3, [r7, #0]
 8008012:	43da      	mvns	r2, r3
 8008014:	687b      	ldr	r3, [r7, #4]
 8008016:	681b      	ldr	r3, [r3, #0]
 8008018:	400a      	ands	r2, r1
 800801a:	601a      	str	r2, [r3, #0]

  hhrtim->State = HAL_HRTIM_STATE_READY;
 800801c:	687b      	ldr	r3, [r7, #4]
 800801e:	2201      	movs	r2, #1
 8008020:	f883 20c1 	strb.w	r2, [r3, #193]	; 0xc1

  /* Process Unlocked */
  __HAL_UNLOCK(hhrtim);
 8008024:	687b      	ldr	r3, [r7, #4]
 8008026:	2200      	movs	r2, #0
 8008028:	f883 20c0 	strb.w	r2, [r3, #192]	; 0xc0

  return HAL_OK;
 800802c:	2300      	movs	r3, #0
}
 800802e:	4618      	mov	r0, r3
 8008030:	3714      	adds	r7, #20
 8008032:	46bd      	mov	sp, r7
 8008034:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008038:	4770      	bx	lr
 800803a:	bf00      	nop
 800803c:	2000002c 	.word	0x2000002c

08008040 <HAL_HRTIM_IRQHandler>:
  *                   This parameter can be any value of HRTIM_Timer_Index
  * @retval None
  */
void HAL_HRTIM_IRQHandler(HRTIM_HandleTypeDef * hhrtim,
                          uint32_t TimerIdx)
{
 8008040:	b580      	push	{r7, lr}
 8008042:	b082      	sub	sp, #8
 8008044:	af00      	add	r7, sp, #0
 8008046:	6078      	str	r0, [r7, #4]
 8008048:	6039      	str	r1, [r7, #0]
  /* HRTIM interrupts handling */
  if (TimerIdx == HRTIM_TIMERINDEX_COMMON)
 800804a:	683b      	ldr	r3, [r7, #0]
 800804c:	2bff      	cmp	r3, #255	; 0xff
 800804e:	d103      	bne.n	8008058 <HAL_HRTIM_IRQHandler+0x18>
  {
    HRTIM_HRTIM_ISR(hhrtim);
 8008050:	6878      	ldr	r0, [r7, #4]
 8008052:	f000 fc29 	bl	80088a8 <HRTIM_HRTIM_ISR>
  {
    /* Timing unit related interrupts handling */
    HRTIM_Timer_ISR(hhrtim, TimerIdx);
  }

}
 8008056:	e00a      	b.n	800806e <HAL_HRTIM_IRQHandler+0x2e>
  else if (TimerIdx == HRTIM_TIMERINDEX_MASTER)
 8008058:	683b      	ldr	r3, [r7, #0]
 800805a:	2b05      	cmp	r3, #5
 800805c:	d103      	bne.n	8008066 <HAL_HRTIM_IRQHandler+0x26>
    HRTIM_Master_ISR(hhrtim);
 800805e:	6878      	ldr	r0, [r7, #4]
 8008060:	f000 fca0 	bl	80089a4 <HRTIM_Master_ISR>
}
 8008064:	e003      	b.n	800806e <HAL_HRTIM_IRQHandler+0x2e>
    HRTIM_Timer_ISR(hhrtim, TimerIdx);
 8008066:	6839      	ldr	r1, [r7, #0]
 8008068:	6878      	ldr	r0, [r7, #4]
 800806a:	f000 fd45 	bl	8008af8 <HRTIM_Timer_ISR>
}
 800806e:	bf00      	nop
 8008070:	3708      	adds	r7, #8
 8008072:	46bd      	mov	sp, r7
 8008074:	bd80      	pop	{r7, pc}

08008076 <HAL_HRTIM_Fault1Callback>:
  * @brief  Callback function invoked when a fault 1 interrupt occurred
  * @param  hhrtim pointer to HAL HRTIM handle  * @retval None
  * @retval None
  */
__weak void HAL_HRTIM_Fault1Callback(HRTIM_HandleTypeDef * hhrtim)
{
 8008076:	b480      	push	{r7}
 8008078:	b083      	sub	sp, #12
 800807a:	af00      	add	r7, sp, #0
 800807c:	6078      	str	r0, [r7, #4]
  UNUSED(hhrtim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_HRTIM_Fault1Callback could be implemented in the user file
   */
}
 800807e:	bf00      	nop
 8008080:	370c      	adds	r7, #12
 8008082:	46bd      	mov	sp, r7
 8008084:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008088:	4770      	bx	lr

0800808a <HAL_HRTIM_Fault2Callback>:
  * @brief  Callback function invoked when a fault 2 interrupt occurred
  * @param  hhrtim pointer to HAL HRTIM handle
  * @retval None
  */
__weak void HAL_HRTIM_Fault2Callback(HRTIM_HandleTypeDef * hhrtim)
{
 800808a:	b480      	push	{r7}
 800808c:	b083      	sub	sp, #12
 800808e:	af00      	add	r7, sp, #0
 8008090:	6078      	str	r0, [r7, #4]
  UNUSED(hhrtim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_HRTIM_Fault2Callback could be implemented in the user file
   */
}
 8008092:	bf00      	nop
 8008094:	370c      	adds	r7, #12
 8008096:	46bd      	mov	sp, r7
 8008098:	f85d 7b04 	ldr.w	r7, [sp], #4
 800809c:	4770      	bx	lr

0800809e <HAL_HRTIM_Fault3Callback>:
  * @brief  Callback function invoked when a fault 3 interrupt occurred
  * @param  hhrtim pointer to HAL HRTIM handle
  * @retval None
  */
__weak void HAL_HRTIM_Fault3Callback(HRTIM_HandleTypeDef * hhrtim)
{
 800809e:	b480      	push	{r7}
 80080a0:	b083      	sub	sp, #12
 80080a2:	af00      	add	r7, sp, #0
 80080a4:	6078      	str	r0, [r7, #4]
  UNUSED(hhrtim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_HRTIM_Fault3Callback could be implemented in the user file
   */
}
 80080a6:	bf00      	nop
 80080a8:	370c      	adds	r7, #12
 80080aa:	46bd      	mov	sp, r7
 80080ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80080b0:	4770      	bx	lr

080080b2 <HAL_HRTIM_Fault4Callback>:
  * @brief  Callback function invoked when a fault 4 interrupt occurred
  * @param  hhrtim pointer to HAL HRTIM handle
  * @retval None
  */
__weak void HAL_HRTIM_Fault4Callback(HRTIM_HandleTypeDef * hhrtim)
{
 80080b2:	b480      	push	{r7}
 80080b4:	b083      	sub	sp, #12
 80080b6:	af00      	add	r7, sp, #0
 80080b8:	6078      	str	r0, [r7, #4]
  UNUSED(hhrtim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_HRTIM_Fault4Callback could be implemented in the user file
   */
}
 80080ba:	bf00      	nop
 80080bc:	370c      	adds	r7, #12
 80080be:	46bd      	mov	sp, r7
 80080c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80080c4:	4770      	bx	lr

080080c6 <HAL_HRTIM_Fault5Callback>:
  * @brief  Callback function invoked when a fault 5 interrupt occurred
  * @param  hhrtim pointer to HAL HRTIM handle
  * @retval None
  */
__weak void HAL_HRTIM_Fault5Callback(HRTIM_HandleTypeDef * hhrtim)
{
 80080c6:	b480      	push	{r7}
 80080c8:	b083      	sub	sp, #12
 80080ca:	af00      	add	r7, sp, #0
 80080cc:	6078      	str	r0, [r7, #4]
  UNUSED(hhrtim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_HRTIM_Fault5Callback could be implemented in the user file
   */
}
 80080ce:	bf00      	nop
 80080d0:	370c      	adds	r7, #12
 80080d2:	46bd      	mov	sp, r7
 80080d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80080d8:	4770      	bx	lr

080080da <HAL_HRTIM_SystemFaultCallback>:
  * @brief  Callback function invoked when a system fault interrupt occurred
  * @param  hhrtim pointer to HAL HRTIM handle
  * @retval None
  */
__weak void HAL_HRTIM_SystemFaultCallback(HRTIM_HandleTypeDef * hhrtim)
{
 80080da:	b480      	push	{r7}
 80080dc:	b083      	sub	sp, #12
 80080de:	af00      	add	r7, sp, #0
 80080e0:	6078      	str	r0, [r7, #4]
  UNUSED(hhrtim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_HRTIM_SystemFaultCallback could be implemented in the user file
   */
}
 80080e2:	bf00      	nop
 80080e4:	370c      	adds	r7, #12
 80080e6:	46bd      	mov	sp, r7
 80080e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80080ec:	4770      	bx	lr

080080ee <HAL_HRTIM_BurstModePeriodCallback>:
  * @brief  Callback function invoked when the end of the burst mode period is reached
  * @param  hhrtim pointer to HAL HRTIM handle
  * @retval None
  */
__weak void HAL_HRTIM_BurstModePeriodCallback(HRTIM_HandleTypeDef * hhrtim)
{
 80080ee:	b480      	push	{r7}
 80080f0:	b083      	sub	sp, #12
 80080f2:	af00      	add	r7, sp, #0
 80080f4:	6078      	str	r0, [r7, #4]
  UNUSED(hhrtim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_HRTIM_BurstModeCallback could be implemented in the user file
   */
}
 80080f6:	bf00      	nop
 80080f8:	370c      	adds	r7, #12
 80080fa:	46bd      	mov	sp, r7
 80080fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008100:	4770      	bx	lr

08008102 <HAL_HRTIM_SynchronizationEventCallback>:
  * @brief  Callback function invoked when a synchronization input event is received
  * @param  hhrtim pointer to HAL HRTIM handle
  * @retval None
  */
__weak void HAL_HRTIM_SynchronizationEventCallback(HRTIM_HandleTypeDef * hhrtim)
{
 8008102:	b480      	push	{r7}
 8008104:	b083      	sub	sp, #12
 8008106:	af00      	add	r7, sp, #0
 8008108:	6078      	str	r0, [r7, #4]
  UNUSED(hhrtim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_HRTIM_SynchronizationEventCallback could be implemented in the user file
   */
}
 800810a:	bf00      	nop
 800810c:	370c      	adds	r7, #12
 800810e:	46bd      	mov	sp, r7
 8008110:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008114:	4770      	bx	lr

08008116 <HAL_HRTIM_RegistersUpdateCallback>:
  *                   @arg HRTIM_TIMERINDEX_TIMER_E for timer E
  * @retval None
  */
__weak void HAL_HRTIM_RegistersUpdateCallback(HRTIM_HandleTypeDef * hhrtim,
                                              uint32_t TimerIdx)
{
 8008116:	b480      	push	{r7}
 8008118:	b083      	sub	sp, #12
 800811a:	af00      	add	r7, sp, #0
 800811c:	6078      	str	r0, [r7, #4]
 800811e:	6039      	str	r1, [r7, #0]
  UNUSED(TimerIdx);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_HRTIM_Master_RegistersUpdateCallback could be implemented in the user file
   */
}
 8008120:	bf00      	nop
 8008122:	370c      	adds	r7, #12
 8008124:	46bd      	mov	sp, r7
 8008126:	f85d 7b04 	ldr.w	r7, [sp], #4
 800812a:	4770      	bx	lr

0800812c <HAL_HRTIM_Compare1EventCallback>:
  *                   @arg HRTIM_TIMERINDEX_TIMER_E for timer E
  * @retval None
  */
__weak void HAL_HRTIM_Compare1EventCallback(HRTIM_HandleTypeDef * hhrtim,
                                              uint32_t TimerIdx)
{
 800812c:	b480      	push	{r7}
 800812e:	b083      	sub	sp, #12
 8008130:	af00      	add	r7, sp, #0
 8008132:	6078      	str	r0, [r7, #4]
 8008134:	6039      	str	r1, [r7, #0]
  UNUSED(TimerIdx);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_HRTIM_Master_Compare1EventCallback could be implemented in the user file
   */
}
 8008136:	bf00      	nop
 8008138:	370c      	adds	r7, #12
 800813a:	46bd      	mov	sp, r7
 800813c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008140:	4770      	bx	lr

08008142 <HAL_HRTIM_Compare4EventCallback>:
  *                   @arg HRTIM_TIMERINDEX_TIMER_E for timer E
  * @retval None
  */
__weak void HAL_HRTIM_Compare4EventCallback(HRTIM_HandleTypeDef * hhrtim,
                                              uint32_t TimerIdx)
{
 8008142:	b480      	push	{r7}
 8008144:	b083      	sub	sp, #12
 8008146:	af00      	add	r7, sp, #0
 8008148:	6078      	str	r0, [r7, #4]
 800814a:	6039      	str	r1, [r7, #0]
  UNUSED(TimerIdx);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_HRTIM_Master_Compare4EventCallback could be implemented in the user file
   */
}
 800814c:	bf00      	nop
 800814e:	370c      	adds	r7, #12
 8008150:	46bd      	mov	sp, r7
 8008152:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008156:	4770      	bx	lr

08008158 <HAL_HRTIM_Capture1EventCallback>:
  *                   @arg HRTIM_TIMERINDEX_TIMER_E for timer E
  * @retval None
  */
__weak void HAL_HRTIM_Capture1EventCallback(HRTIM_HandleTypeDef * hhrtim,
                                              uint32_t TimerIdx)
{
 8008158:	b480      	push	{r7}
 800815a:	b083      	sub	sp, #12
 800815c:	af00      	add	r7, sp, #0
 800815e:	6078      	str	r0, [r7, #4]
 8008160:	6039      	str	r1, [r7, #0]
  UNUSED(TimerIdx);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_HRTIM_Timer_Capture1EventCallback could be implemented in the user file
   */
}
 8008162:	bf00      	nop
 8008164:	370c      	adds	r7, #12
 8008166:	46bd      	mov	sp, r7
 8008168:	f85d 7b04 	ldr.w	r7, [sp], #4
 800816c:	4770      	bx	lr

0800816e <HAL_HRTIM_Capture2EventCallback>:
  *                   @arg HRTIM_TIMERINDEX_TIMER_E for timer E
  * @retval None
  */
__weak void HAL_HRTIM_Capture2EventCallback(HRTIM_HandleTypeDef * hhrtim,
                                              uint32_t TimerIdx)
{
 800816e:	b480      	push	{r7}
 8008170:	b083      	sub	sp, #12
 8008172:	af00      	add	r7, sp, #0
 8008174:	6078      	str	r0, [r7, #4]
 8008176:	6039      	str	r1, [r7, #0]
  UNUSED(TimerIdx);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_HRTIM_Timer_Capture2EventCallback could be implemented in the user file
   */
}
 8008178:	bf00      	nop
 800817a:	370c      	adds	r7, #12
 800817c:	46bd      	mov	sp, r7
 800817e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008182:	4770      	bx	lr

08008184 <HAL_HRTIM_DelayedProtectionCallback>:
  *                   @arg HRTIM_TIMERINDEX_TIMER_E for timer E
  * @retval None
  */
__weak void HAL_HRTIM_DelayedProtectionCallback(HRTIM_HandleTypeDef * hhrtim,
                                              uint32_t TimerIdx)
{
 8008184:	b480      	push	{r7}
 8008186:	b083      	sub	sp, #12
 8008188:	af00      	add	r7, sp, #0
 800818a:	6078      	str	r0, [r7, #4]
 800818c:	6039      	str	r1, [r7, #0]
  UNUSED(TimerIdx);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_HRTIM_Timer_DelayedProtectionCallback could be implemented in the user file
   */
}
 800818e:	bf00      	nop
 8008190:	370c      	adds	r7, #12
 8008192:	46bd      	mov	sp, r7
 8008194:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008198:	4770      	bx	lr

0800819a <HAL_HRTIM_CounterResetCallback>:
  *                   @arg HRTIM_TIMERINDEX_TIMER_E for timer E
  * @retval None
  */
__weak void HAL_HRTIM_CounterResetCallback(HRTIM_HandleTypeDef * hhrtim,
                                              uint32_t TimerIdx)
{
 800819a:	b480      	push	{r7}
 800819c:	b083      	sub	sp, #12
 800819e:	af00      	add	r7, sp, #0
 80081a0:	6078      	str	r0, [r7, #4]
 80081a2:	6039      	str	r1, [r7, #0]
  UNUSED(TimerIdx);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_HRTIM_Timer_CounterResetCallback could be implemented in the user file
   */
}
 80081a4:	bf00      	nop
 80081a6:	370c      	adds	r7, #12
 80081a8:	46bd      	mov	sp, r7
 80081aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80081ae:	4770      	bx	lr

080081b0 <HAL_HRTIM_Output1SetCallback>:
  *                   @arg HRTIM_TIMERINDEX_TIMER_E for timer E
  * @retval None
  */
__weak void HAL_HRTIM_Output1SetCallback(HRTIM_HandleTypeDef * hhrtim,
                                              uint32_t TimerIdx)
{
 80081b0:	b480      	push	{r7}
 80081b2:	b083      	sub	sp, #12
 80081b4:	af00      	add	r7, sp, #0
 80081b6:	6078      	str	r0, [r7, #4]
 80081b8:	6039      	str	r1, [r7, #0]
  UNUSED(TimerIdx);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_HRTIM_Timer_Output1SetCallback could be implemented in the user file
   */
}
 80081ba:	bf00      	nop
 80081bc:	370c      	adds	r7, #12
 80081be:	46bd      	mov	sp, r7
 80081c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80081c4:	4770      	bx	lr

080081c6 <HAL_HRTIM_Output1ResetCallback>:
  *                   @arg HRTIM_TIMERINDEX_TIMER_E for timer E
  * @retval None
  */
__weak void HAL_HRTIM_Output1ResetCallback(HRTIM_HandleTypeDef * hhrtim,
                                              uint32_t TimerIdx)
{
 80081c6:	b480      	push	{r7}
 80081c8:	b083      	sub	sp, #12
 80081ca:	af00      	add	r7, sp, #0
 80081cc:	6078      	str	r0, [r7, #4]
 80081ce:	6039      	str	r1, [r7, #0]
  UNUSED(TimerIdx);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_HRTIM_Timer_Output1ResetCallback could be implemented in the user file
   */
}
 80081d0:	bf00      	nop
 80081d2:	370c      	adds	r7, #12
 80081d4:	46bd      	mov	sp, r7
 80081d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80081da:	4770      	bx	lr

080081dc <HAL_HRTIM_Output2SetCallback>:
  *                   @arg HRTIM_TIMERINDEX_TIMER_E for timer E
  * @retval None
  */
__weak void HAL_HRTIM_Output2SetCallback(HRTIM_HandleTypeDef * hhrtim,
                                              uint32_t TimerIdx)
{
 80081dc:	b480      	push	{r7}
 80081de:	b083      	sub	sp, #12
 80081e0:	af00      	add	r7, sp, #0
 80081e2:	6078      	str	r0, [r7, #4]
 80081e4:	6039      	str	r1, [r7, #0]
  UNUSED(TimerIdx);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_HRTIM_Timer_Output2SetCallback could be implemented in the user file
   */
}
 80081e6:	bf00      	nop
 80081e8:	370c      	adds	r7, #12
 80081ea:	46bd      	mov	sp, r7
 80081ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80081f0:	4770      	bx	lr

080081f2 <HAL_HRTIM_Output2ResetCallback>:
  *                   @arg HRTIM_TIMERINDEX_TIMER_E for timer E
  * @retval None
  */
__weak void HAL_HRTIM_Output2ResetCallback(HRTIM_HandleTypeDef * hhrtim,
                                              uint32_t TimerIdx)
{
 80081f2:	b480      	push	{r7}
 80081f4:	b083      	sub	sp, #12
 80081f6:	af00      	add	r7, sp, #0
 80081f8:	6078      	str	r0, [r7, #4]
 80081fa:	6039      	str	r1, [r7, #0]
  UNUSED(TimerIdx);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_HRTIM_Timer_Output2ResetCallback could be implemented in the user file
   */
}
 80081fc:	bf00      	nop
 80081fe:	370c      	adds	r7, #12
 8008200:	46bd      	mov	sp, r7
 8008202:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008206:	4770      	bx	lr

08008208 <HRTIM_MasterBase_Config>:
  * @param  pTimeBaseCfg pointer to the time base configuration structure
  * @retval None
  */
static void HRTIM_MasterBase_Config(HRTIM_HandleTypeDef * hhrtim,
                                    const HRTIM_TimeBaseCfgTypeDef * pTimeBaseCfg)
{
 8008208:	b480      	push	{r7}
 800820a:	b085      	sub	sp, #20
 800820c:	af00      	add	r7, sp, #0
 800820e:	6078      	str	r0, [r7, #4]
 8008210:	6039      	str	r1, [r7, #0]
  uint32_t hrtim_mcr;

  /* Configure master timer */
  hrtim_mcr = hhrtim->Instance->sMasterRegs.MCR;
 8008212:	687b      	ldr	r3, [r7, #4]
 8008214:	681b      	ldr	r3, [r3, #0]
 8008216:	681b      	ldr	r3, [r3, #0]
 8008218:	60fb      	str	r3, [r7, #12]

  /* Set the prescaler ratio */
  hrtim_mcr &= (uint32_t) ~(HRTIM_MCR_CK_PSC);
 800821a:	68fb      	ldr	r3, [r7, #12]
 800821c:	f023 0307 	bic.w	r3, r3, #7
 8008220:	60fb      	str	r3, [r7, #12]
  hrtim_mcr |= (uint32_t)pTimeBaseCfg->PrescalerRatio;
 8008222:	683b      	ldr	r3, [r7, #0]
 8008224:	689b      	ldr	r3, [r3, #8]
 8008226:	68fa      	ldr	r2, [r7, #12]
 8008228:	4313      	orrs	r3, r2
 800822a:	60fb      	str	r3, [r7, #12]

  /* Set the operating mode */
  hrtim_mcr &= (uint32_t) ~(HRTIM_MCR_CONT | HRTIM_MCR_RETRIG);
 800822c:	68fb      	ldr	r3, [r7, #12]
 800822e:	f023 0318 	bic.w	r3, r3, #24
 8008232:	60fb      	str	r3, [r7, #12]
  hrtim_mcr |= (uint32_t)pTimeBaseCfg->Mode;
 8008234:	683b      	ldr	r3, [r7, #0]
 8008236:	68db      	ldr	r3, [r3, #12]
 8008238:	68fa      	ldr	r2, [r7, #12]
 800823a:	4313      	orrs	r3, r2
 800823c:	60fb      	str	r3, [r7, #12]

  /* Update the HRTIM registers */
  hhrtim->Instance->sMasterRegs.MCR = hrtim_mcr;
 800823e:	687b      	ldr	r3, [r7, #4]
 8008240:	681b      	ldr	r3, [r3, #0]
 8008242:	68fa      	ldr	r2, [r7, #12]
 8008244:	601a      	str	r2, [r3, #0]
  hhrtim->Instance->sMasterRegs.MPER = pTimeBaseCfg->Period;
 8008246:	687b      	ldr	r3, [r7, #4]
 8008248:	681b      	ldr	r3, [r3, #0]
 800824a:	683a      	ldr	r2, [r7, #0]
 800824c:	6812      	ldr	r2, [r2, #0]
 800824e:	615a      	str	r2, [r3, #20]
  hhrtim->Instance->sMasterRegs.MREP = pTimeBaseCfg->RepetitionCounter;
 8008250:	687b      	ldr	r3, [r7, #4]
 8008252:	681b      	ldr	r3, [r3, #0]
 8008254:	683a      	ldr	r2, [r7, #0]
 8008256:	6852      	ldr	r2, [r2, #4]
 8008258:	619a      	str	r2, [r3, #24]
}
 800825a:	bf00      	nop
 800825c:	3714      	adds	r7, #20
 800825e:	46bd      	mov	sp, r7
 8008260:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008264:	4770      	bx	lr

08008266 <HRTIM_TimingUnitBase_Config>:
  * @retval None
  */
static void HRTIM_TimingUnitBase_Config(HRTIM_HandleTypeDef * hhrtim,
                                        uint32_t TimerIdx ,
                                        const HRTIM_TimeBaseCfgTypeDef * pTimeBaseCfg)
{
 8008266:	b480      	push	{r7}
 8008268:	b087      	sub	sp, #28
 800826a:	af00      	add	r7, sp, #0
 800826c:	60f8      	str	r0, [r7, #12]
 800826e:	60b9      	str	r1, [r7, #8]
 8008270:	607a      	str	r2, [r7, #4]
  uint32_t hrtim_timcr;

  /* Configure master timing unit */
  hrtim_timcr = hhrtim->Instance->sTimerxRegs[TimerIdx].TIMxCR;
 8008272:	68fb      	ldr	r3, [r7, #12]
 8008274:	681a      	ldr	r2, [r3, #0]
 8008276:	68bb      	ldr	r3, [r7, #8]
 8008278:	3301      	adds	r3, #1
 800827a:	01db      	lsls	r3, r3, #7
 800827c:	4413      	add	r3, r2
 800827e:	681b      	ldr	r3, [r3, #0]
 8008280:	617b      	str	r3, [r7, #20]

  /* Set the prescaler ratio */
  hrtim_timcr &= (uint32_t) ~(HRTIM_TIMCR_CK_PSC);
 8008282:	697b      	ldr	r3, [r7, #20]
 8008284:	f023 0307 	bic.w	r3, r3, #7
 8008288:	617b      	str	r3, [r7, #20]
  hrtim_timcr |= (uint32_t)pTimeBaseCfg->PrescalerRatio;
 800828a:	687b      	ldr	r3, [r7, #4]
 800828c:	689b      	ldr	r3, [r3, #8]
 800828e:	697a      	ldr	r2, [r7, #20]
 8008290:	4313      	orrs	r3, r2
 8008292:	617b      	str	r3, [r7, #20]

  /* Set the operating mode */
  hrtim_timcr &= (uint32_t) ~(HRTIM_TIMCR_CONT | HRTIM_TIMCR_RETRIG);
 8008294:	697b      	ldr	r3, [r7, #20]
 8008296:	f023 0318 	bic.w	r3, r3, #24
 800829a:	617b      	str	r3, [r7, #20]
  hrtim_timcr |= (uint32_t)pTimeBaseCfg->Mode;
 800829c:	687b      	ldr	r3, [r7, #4]
 800829e:	68db      	ldr	r3, [r3, #12]
 80082a0:	697a      	ldr	r2, [r7, #20]
 80082a2:	4313      	orrs	r3, r2
 80082a4:	617b      	str	r3, [r7, #20]

  /* Update the HRTIM registers */
  hhrtim->Instance->sTimerxRegs[TimerIdx].TIMxCR = hrtim_timcr;
 80082a6:	68fb      	ldr	r3, [r7, #12]
 80082a8:	681a      	ldr	r2, [r3, #0]
 80082aa:	68bb      	ldr	r3, [r7, #8]
 80082ac:	3301      	adds	r3, #1
 80082ae:	01db      	lsls	r3, r3, #7
 80082b0:	4413      	add	r3, r2
 80082b2:	697a      	ldr	r2, [r7, #20]
 80082b4:	601a      	str	r2, [r3, #0]
  hhrtim->Instance->sTimerxRegs[TimerIdx].PERxR = pTimeBaseCfg->Period;
 80082b6:	68fb      	ldr	r3, [r7, #12]
 80082b8:	6819      	ldr	r1, [r3, #0]
 80082ba:	687b      	ldr	r3, [r7, #4]
 80082bc:	681a      	ldr	r2, [r3, #0]
 80082be:	68bb      	ldr	r3, [r7, #8]
 80082c0:	01db      	lsls	r3, r3, #7
 80082c2:	440b      	add	r3, r1
 80082c4:	3394      	adds	r3, #148	; 0x94
 80082c6:	601a      	str	r2, [r3, #0]
  hhrtim->Instance->sTimerxRegs[TimerIdx].REPxR = pTimeBaseCfg->RepetitionCounter;
 80082c8:	68fb      	ldr	r3, [r7, #12]
 80082ca:	6819      	ldr	r1, [r3, #0]
 80082cc:	687b      	ldr	r3, [r7, #4]
 80082ce:	685a      	ldr	r2, [r3, #4]
 80082d0:	68bb      	ldr	r3, [r7, #8]
 80082d2:	01db      	lsls	r3, r3, #7
 80082d4:	440b      	add	r3, r1
 80082d6:	3398      	adds	r3, #152	; 0x98
 80082d8:	601a      	str	r2, [r3, #0]
}
 80082da:	bf00      	nop
 80082dc:	371c      	adds	r7, #28
 80082de:	46bd      	mov	sp, r7
 80082e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80082e4:	4770      	bx	lr

080082e6 <HRTIM_MasterWaveform_Config>:
  * @param  pTimerCfg pointer to the timer configuration data structure
  * @retval None
  */
static void HRTIM_MasterWaveform_Config(HRTIM_HandleTypeDef * hhrtim,
                                        const HRTIM_TimerCfgTypeDef * pTimerCfg)
{
 80082e6:	b480      	push	{r7}
 80082e8:	b085      	sub	sp, #20
 80082ea:	af00      	add	r7, sp, #0
 80082ec:	6078      	str	r0, [r7, #4]
 80082ee:	6039      	str	r1, [r7, #0]
  uint32_t hrtim_mcr;
  uint32_t hrtim_bmcr;

  /* Configure master timer */
  hrtim_mcr = hhrtim->Instance->sMasterRegs.MCR;
 80082f0:	687b      	ldr	r3, [r7, #4]
 80082f2:	681b      	ldr	r3, [r3, #0]
 80082f4:	681b      	ldr	r3, [r3, #0]
 80082f6:	60fb      	str	r3, [r7, #12]
  hrtim_bmcr = hhrtim->Instance->sCommonRegs.BMCR;
 80082f8:	687b      	ldr	r3, [r7, #4]
 80082fa:	681b      	ldr	r3, [r3, #0]
 80082fc:	f8d3 33a0 	ldr.w	r3, [r3, #928]	; 0x3a0
 8008300:	60bb      	str	r3, [r7, #8]

  /* Enable/Disable the half mode */
  hrtim_mcr &= ~(HRTIM_MCR_HALF);
 8008302:	68fb      	ldr	r3, [r7, #12]
 8008304:	f023 0320 	bic.w	r3, r3, #32
 8008308:	60fb      	str	r3, [r7, #12]
  hrtim_mcr |= pTimerCfg->HalfModeEnable;
 800830a:	683b      	ldr	r3, [r7, #0]
 800830c:	695b      	ldr	r3, [r3, #20]
 800830e:	68fa      	ldr	r2, [r7, #12]
 8008310:	4313      	orrs	r3, r2
 8008312:	60fb      	str	r3, [r7, #12]

  /* Enable/Disable the timer start upon synchronization event reception */
  hrtim_mcr &= ~(HRTIM_MCR_SYNCSTRTM);
 8008314:	68fb      	ldr	r3, [r7, #12]
 8008316:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800831a:	60fb      	str	r3, [r7, #12]
  hrtim_mcr |= pTimerCfg->StartOnSync;
 800831c:	683b      	ldr	r3, [r7, #0]
 800831e:	699b      	ldr	r3, [r3, #24]
 8008320:	68fa      	ldr	r2, [r7, #12]
 8008322:	4313      	orrs	r3, r2
 8008324:	60fb      	str	r3, [r7, #12]

  /* Enable/Disable the timer reset upon synchronization event reception */
  hrtim_mcr &= ~(HRTIM_MCR_SYNCRSTM);
 8008326:	68fb      	ldr	r3, [r7, #12]
 8008328:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800832c:	60fb      	str	r3, [r7, #12]
  hrtim_mcr |= pTimerCfg->ResetOnSync;
 800832e:	683b      	ldr	r3, [r7, #0]
 8008330:	69db      	ldr	r3, [r3, #28]
 8008332:	68fa      	ldr	r2, [r7, #12]
 8008334:	4313      	orrs	r3, r2
 8008336:	60fb      	str	r3, [r7, #12]

  /* Enable/Disable the DAC synchronization event generation */
  hrtim_mcr &= ~(HRTIM_MCR_DACSYNC);
 8008338:	68fb      	ldr	r3, [r7, #12]
 800833a:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 800833e:	60fb      	str	r3, [r7, #12]
  hrtim_mcr |= pTimerCfg->DACSynchro;
 8008340:	683b      	ldr	r3, [r7, #0]
 8008342:	6a1b      	ldr	r3, [r3, #32]
 8008344:	68fa      	ldr	r2, [r7, #12]
 8008346:	4313      	orrs	r3, r2
 8008348:	60fb      	str	r3, [r7, #12]

  /* Enable/Disable preload mechanism for timer registers */
  hrtim_mcr &= ~(HRTIM_MCR_PREEN);
 800834a:	68fb      	ldr	r3, [r7, #12]
 800834c:	f023 6300 	bic.w	r3, r3, #134217728	; 0x8000000
 8008350:	60fb      	str	r3, [r7, #12]
  hrtim_mcr |= pTimerCfg->PreloadEnable;
 8008352:	683b      	ldr	r3, [r7, #0]
 8008354:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008356:	68fa      	ldr	r2, [r7, #12]
 8008358:	4313      	orrs	r3, r2
 800835a:	60fb      	str	r3, [r7, #12]

  /* Master timer registers update handling */
  hrtim_mcr &= ~(HRTIM_MCR_BRSTDMA);
 800835c:	68fb      	ldr	r3, [r7, #12]
 800835e:	f023 4340 	bic.w	r3, r3, #3221225472	; 0xc0000000
 8008362:	60fb      	str	r3, [r7, #12]
  hrtim_mcr |= (pTimerCfg->UpdateGating << 2U);
 8008364:	683b      	ldr	r3, [r7, #0]
 8008366:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008368:	009b      	lsls	r3, r3, #2
 800836a:	68fa      	ldr	r2, [r7, #12]
 800836c:	4313      	orrs	r3, r2
 800836e:	60fb      	str	r3, [r7, #12]

  /* Enable/Disable registers update on repetition */
  hrtim_mcr &= ~(HRTIM_MCR_MREPU);
 8008370:	68fb      	ldr	r3, [r7, #12]
 8008372:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 8008376:	60fb      	str	r3, [r7, #12]
  hrtim_mcr |= pTimerCfg->RepetitionUpdate;
 8008378:	683b      	ldr	r3, [r7, #0]
 800837a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800837c:	68fa      	ldr	r2, [r7, #12]
 800837e:	4313      	orrs	r3, r2
 8008380:	60fb      	str	r3, [r7, #12]

  /* Set the timer burst mode */
  hrtim_bmcr &= ~(HRTIM_BMCR_MTBM);
 8008382:	68bb      	ldr	r3, [r7, #8]
 8008384:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8008388:	60bb      	str	r3, [r7, #8]
  hrtim_bmcr |= pTimerCfg->BurstMode;
 800838a:	683b      	ldr	r3, [r7, #0]
 800838c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800838e:	68ba      	ldr	r2, [r7, #8]
 8008390:	4313      	orrs	r3, r2
 8008392:	60bb      	str	r3, [r7, #8]

  /* Update the HRTIM registers */
  hhrtim->Instance->sMasterRegs.MCR = hrtim_mcr;
 8008394:	687b      	ldr	r3, [r7, #4]
 8008396:	681b      	ldr	r3, [r3, #0]
 8008398:	68fa      	ldr	r2, [r7, #12]
 800839a:	601a      	str	r2, [r3, #0]
  hhrtim->Instance->sCommonRegs.BMCR = hrtim_bmcr;
 800839c:	687b      	ldr	r3, [r7, #4]
 800839e:	681b      	ldr	r3, [r3, #0]
 80083a0:	68ba      	ldr	r2, [r7, #8]
 80083a2:	f8c3 23a0 	str.w	r2, [r3, #928]	; 0x3a0
}
 80083a6:	bf00      	nop
 80083a8:	3714      	adds	r7, #20
 80083aa:	46bd      	mov	sp, r7
 80083ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80083b0:	4770      	bx	lr
	...

080083b4 <HRTIM_TimingUnitWaveform_Config>:
  * @retval None
  */
static void  HRTIM_TimingUnitWaveform_Config(HRTIM_HandleTypeDef * hhrtim,
                                             uint32_t TimerIdx,
                                             const HRTIM_TimerCfgTypeDef * pTimerCfg)
{
 80083b4:	b480      	push	{r7}
 80083b6:	b08b      	sub	sp, #44	; 0x2c
 80083b8:	af00      	add	r7, sp, #0
 80083ba:	60f8      	str	r0, [r7, #12]
 80083bc:	60b9      	str	r1, [r7, #8]
 80083be:	607a      	str	r2, [r7, #4]
  uint32_t hrtim_timoutr;
  uint32_t hrtim_timrstr;
  uint32_t hrtim_bmcr;

  /* UPDGAT bitfield must be reset before programming a new value */
  hhrtim->Instance->sTimerxRegs[TimerIdx].TIMxCR &= ~(HRTIM_TIMCR_UPDGAT);
 80083c0:	68fb      	ldr	r3, [r7, #12]
 80083c2:	681a      	ldr	r2, [r3, #0]
 80083c4:	68bb      	ldr	r3, [r7, #8]
 80083c6:	3301      	adds	r3, #1
 80083c8:	01db      	lsls	r3, r3, #7
 80083ca:	4413      	add	r3, r2
 80083cc:	681b      	ldr	r3, [r3, #0]
 80083ce:	68fa      	ldr	r2, [r7, #12]
 80083d0:	6811      	ldr	r1, [r2, #0]
 80083d2:	f023 4270 	bic.w	r2, r3, #4026531840	; 0xf0000000
 80083d6:	68bb      	ldr	r3, [r7, #8]
 80083d8:	3301      	adds	r3, #1
 80083da:	01db      	lsls	r3, r3, #7
 80083dc:	440b      	add	r3, r1
 80083de:	601a      	str	r2, [r3, #0]

  /* Configure timing unit (Timer A to Timer E) */
  hrtim_timcr = hhrtim->Instance->sTimerxRegs[TimerIdx].TIMxCR;
 80083e0:	68fb      	ldr	r3, [r7, #12]
 80083e2:	681a      	ldr	r2, [r3, #0]
 80083e4:	68bb      	ldr	r3, [r7, #8]
 80083e6:	3301      	adds	r3, #1
 80083e8:	01db      	lsls	r3, r3, #7
 80083ea:	4413      	add	r3, r2
 80083ec:	681b      	ldr	r3, [r3, #0]
 80083ee:	627b      	str	r3, [r7, #36]	; 0x24
  hrtim_timfltr = hhrtim->Instance->sTimerxRegs[TimerIdx].FLTxR;
 80083f0:	68fb      	ldr	r3, [r7, #12]
 80083f2:	681a      	ldr	r2, [r3, #0]
 80083f4:	68bb      	ldr	r3, [r7, #8]
 80083f6:	01db      	lsls	r3, r3, #7
 80083f8:	4413      	add	r3, r2
 80083fa:	33e8      	adds	r3, #232	; 0xe8
 80083fc:	681b      	ldr	r3, [r3, #0]
 80083fe:	61bb      	str	r3, [r7, #24]
  hrtim_timoutr = hhrtim->Instance->sTimerxRegs[TimerIdx].OUTxR;
 8008400:	68fb      	ldr	r3, [r7, #12]
 8008402:	681a      	ldr	r2, [r3, #0]
 8008404:	68bb      	ldr	r3, [r7, #8]
 8008406:	01db      	lsls	r3, r3, #7
 8008408:	4413      	add	r3, r2
 800840a:	33e4      	adds	r3, #228	; 0xe4
 800840c:	681b      	ldr	r3, [r3, #0]
 800840e:	623b      	str	r3, [r7, #32]
  hrtim_bmcr = hhrtim->Instance->sCommonRegs.BMCR;
 8008410:	68fb      	ldr	r3, [r7, #12]
 8008412:	681b      	ldr	r3, [r3, #0]
 8008414:	f8d3 33a0 	ldr.w	r3, [r3, #928]	; 0x3a0
 8008418:	61fb      	str	r3, [r7, #28]

  /* Enable/Disable the half mode */
  hrtim_timcr &= ~(HRTIM_TIMCR_HALF);
 800841a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800841c:	f023 0320 	bic.w	r3, r3, #32
 8008420:	627b      	str	r3, [r7, #36]	; 0x24
  hrtim_timcr |= pTimerCfg->HalfModeEnable;
 8008422:	687b      	ldr	r3, [r7, #4]
 8008424:	695b      	ldr	r3, [r3, #20]
 8008426:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008428:	4313      	orrs	r3, r2
 800842a:	627b      	str	r3, [r7, #36]	; 0x24

  /* Enable/Disable the timer start upon synchronization event reception */
  hrtim_timcr &= ~(HRTIM_TIMCR_SYNCSTRT);
 800842c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800842e:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8008432:	627b      	str	r3, [r7, #36]	; 0x24
  hrtim_timcr |= pTimerCfg->StartOnSync;
 8008434:	687b      	ldr	r3, [r7, #4]
 8008436:	699b      	ldr	r3, [r3, #24]
 8008438:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800843a:	4313      	orrs	r3, r2
 800843c:	627b      	str	r3, [r7, #36]	; 0x24

  /* Enable/Disable the timer reset upon synchronization event reception */
  hrtim_timcr &= ~(HRTIM_TIMCR_SYNCRST);
 800843e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008440:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8008444:	627b      	str	r3, [r7, #36]	; 0x24
  hrtim_timcr |= pTimerCfg->ResetOnSync;
 8008446:	687b      	ldr	r3, [r7, #4]
 8008448:	69db      	ldr	r3, [r3, #28]
 800844a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800844c:	4313      	orrs	r3, r2
 800844e:	627b      	str	r3, [r7, #36]	; 0x24

  /* Enable/Disable the DAC synchronization event generation */
  hrtim_timcr &= ~(HRTIM_TIMCR_DACSYNC);
 8008450:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008452:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 8008456:	627b      	str	r3, [r7, #36]	; 0x24
  hrtim_timcr |= pTimerCfg->DACSynchro;
 8008458:	687b      	ldr	r3, [r7, #4]
 800845a:	6a1b      	ldr	r3, [r3, #32]
 800845c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800845e:	4313      	orrs	r3, r2
 8008460:	627b      	str	r3, [r7, #36]	; 0x24

  /* Enable/Disable preload mechanism for timer registers */
  hrtim_timcr &= ~(HRTIM_TIMCR_PREEN);
 8008462:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008464:	f023 6300 	bic.w	r3, r3, #134217728	; 0x8000000
 8008468:	627b      	str	r3, [r7, #36]	; 0x24
  hrtim_timcr |= pTimerCfg->PreloadEnable;
 800846a:	687b      	ldr	r3, [r7, #4]
 800846c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800846e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008470:	4313      	orrs	r3, r2
 8008472:	627b      	str	r3, [r7, #36]	; 0x24

  /* Timing unit registers update handling */
  hrtim_timcr &= ~(HRTIM_TIMCR_UPDGAT);
 8008474:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008476:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 800847a:	627b      	str	r3, [r7, #36]	; 0x24
  hrtim_timcr |= pTimerCfg->UpdateGating;
 800847c:	687b      	ldr	r3, [r7, #4]
 800847e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008480:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008482:	4313      	orrs	r3, r2
 8008484:	627b      	str	r3, [r7, #36]	; 0x24

  /* Enable/Disable registers update on repetition */
  hrtim_timcr &= ~(HRTIM_TIMCR_TREPU);
 8008486:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008488:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 800848c:	627b      	str	r3, [r7, #36]	; 0x24
  if (pTimerCfg->RepetitionUpdate == HRTIM_UPDATEONREPETITION_ENABLED)
 800848e:	687b      	ldr	r3, [r7, #4]
 8008490:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008492:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8008496:	d103      	bne.n	80084a0 <HRTIM_TimingUnitWaveform_Config+0xec>
  {
    hrtim_timcr |= HRTIM_TIMCR_TREPU;
 8008498:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800849a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800849e:	627b      	str	r3, [r7, #36]	; 0x24
  }

  /* Set the push-pull mode */
  hrtim_timcr &= ~(HRTIM_TIMCR_PSHPLL);
 80084a0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80084a2:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80084a6:	627b      	str	r3, [r7, #36]	; 0x24
  hrtim_timcr |= pTimerCfg->PushPull;
 80084a8:	687b      	ldr	r3, [r7, #4]
 80084aa:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80084ac:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80084ae:	4313      	orrs	r3, r2
 80084b0:	627b      	str	r3, [r7, #36]	; 0x24

  /* Enable/Disable registers update on timer counter reset */
  hrtim_timcr &= ~(HRTIM_TIMCR_TRSTU);
 80084b2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80084b4:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80084b8:	627b      	str	r3, [r7, #36]	; 0x24
  hrtim_timcr |= pTimerCfg->ResetUpdate;
 80084ba:	687b      	ldr	r3, [r7, #4]
 80084bc:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80084be:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80084c0:	4313      	orrs	r3, r2
 80084c2:	627b      	str	r3, [r7, #36]	; 0x24

  /* Set the timer update trigger */
  hrtim_timcr &= ~(HRTIM_TIMCR_TIMUPDATETRIGGER);
 80084c4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80084c6:	f023 73fc 	bic.w	r3, r3, #33030144	; 0x1f80000
 80084ca:	627b      	str	r3, [r7, #36]	; 0x24
  hrtim_timcr |= pTimerCfg->UpdateTrigger;
 80084cc:	687b      	ldr	r3, [r7, #4]
 80084ce:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80084d0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80084d2:	4313      	orrs	r3, r2
 80084d4:	627b      	str	r3, [r7, #36]	; 0x24

  /* Enable/Disable the fault channel at timer level */
  hrtim_timfltr &= ~(HRTIM_FLTR_FLTxEN);
 80084d6:	69bb      	ldr	r3, [r7, #24]
 80084d8:	f023 031f 	bic.w	r3, r3, #31
 80084dc:	61bb      	str	r3, [r7, #24]
  hrtim_timfltr |= (pTimerCfg->FaultEnable & HRTIM_FLTR_FLTxEN);
 80084de:	687b      	ldr	r3, [r7, #4]
 80084e0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80084e2:	f003 031f 	and.w	r3, r3, #31
 80084e6:	69ba      	ldr	r2, [r7, #24]
 80084e8:	4313      	orrs	r3, r2
 80084ea:	61bb      	str	r3, [r7, #24]

  /* Lock/Unlock fault sources at timer level */
  hrtim_timfltr &= ~(HRTIM_FLTR_FLTLCK);
 80084ec:	69bb      	ldr	r3, [r7, #24]
 80084ee:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80084f2:	61bb      	str	r3, [r7, #24]
  hrtim_timfltr |= pTimerCfg->FaultLock;
 80084f4:	687b      	ldr	r3, [r7, #4]
 80084f6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80084f8:	69ba      	ldr	r2, [r7, #24]
 80084fa:	4313      	orrs	r3, r2
 80084fc:	61bb      	str	r3, [r7, #24]

  /* The deadtime cannot be used simultaneously with the push-pull mode */
  if (pTimerCfg->PushPull == HRTIM_TIMPUSHPULLMODE_DISABLED)
 80084fe:	687b      	ldr	r3, [r7, #4]
 8008500:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008502:	2b00      	cmp	r3, #0
 8008504:	d108      	bne.n	8008518 <HRTIM_TimingUnitWaveform_Config+0x164>
  {
    /* Enable/Disable dead time insertion at timer level */
    hrtim_timoutr &= ~(HRTIM_OUTR_DTEN);
 8008506:	6a3b      	ldr	r3, [r7, #32]
 8008508:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800850c:	623b      	str	r3, [r7, #32]
    hrtim_timoutr |= pTimerCfg->DeadTimeInsertion;
 800850e:	687b      	ldr	r3, [r7, #4]
 8008510:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008512:	6a3a      	ldr	r2, [r7, #32]
 8008514:	4313      	orrs	r3, r2
 8008516:	623b      	str	r3, [r7, #32]

  /* Enable/Disable delayed protection at timer level
     Delayed Idle is available whatever the timer operating mode (regular, push-pull)
     Balanced Idle is only available in push-pull mode
  */
  if ( ((pTimerCfg->DelayedProtectionMode != HRTIM_TIMER_A_B_C_DELAYEDPROTECTION_BALANCED_EEV6)
 8008518:	687b      	ldr	r3, [r7, #4]
 800851a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800851c:	f5b3 6f60 	cmp.w	r3, #3584	; 0xe00
 8008520:	d004      	beq.n	800852c <HRTIM_TimingUnitWaveform_Config+0x178>
       && (pTimerCfg->DelayedProtectionMode != HRTIM_TIMER_A_B_C_DELAYEDPROTECTION_BALANCED_EEV7))
 8008522:	687b      	ldr	r3, [r7, #4]
 8008524:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008526:	f5b3 5ff0 	cmp.w	r3, #7680	; 0x1e00
 800852a:	d103      	bne.n	8008534 <HRTIM_TimingUnitWaveform_Config+0x180>
       || (pTimerCfg->PushPull == HRTIM_TIMPUSHPULLMODE_ENABLED))
 800852c:	687b      	ldr	r3, [r7, #4]
 800852e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008530:	2b40      	cmp	r3, #64	; 0x40
 8008532:	d108      	bne.n	8008546 <HRTIM_TimingUnitWaveform_Config+0x192>
  {
    hrtim_timoutr &= ~(HRTIM_OUTR_DLYPRT| HRTIM_OUTR_DLYPRTEN);
 8008534:	6a3b      	ldr	r3, [r7, #32]
 8008536:	f423 53f0 	bic.w	r3, r3, #7680	; 0x1e00
 800853a:	623b      	str	r3, [r7, #32]
    hrtim_timoutr |= pTimerCfg->DelayedProtectionMode;
 800853c:	687b      	ldr	r3, [r7, #4]
 800853e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008540:	6a3a      	ldr	r2, [r7, #32]
 8008542:	4313      	orrs	r3, r2
 8008544:	623b      	str	r3, [r7, #32]
  }

  /* Set the timer counter reset trigger */
  hrtim_timrstr = pTimerCfg->ResetTrigger;
 8008546:	687b      	ldr	r3, [r7, #4]
 8008548:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800854a:	617b      	str	r3, [r7, #20]

  /* Set the timer burst mode */
  switch (TimerIdx)
 800854c:	68bb      	ldr	r3, [r7, #8]
 800854e:	2b04      	cmp	r3, #4
 8008550:	d843      	bhi.n	80085da <HRTIM_TimingUnitWaveform_Config+0x226>
 8008552:	a201      	add	r2, pc, #4	; (adr r2, 8008558 <HRTIM_TimingUnitWaveform_Config+0x1a4>)
 8008554:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008558:	0800856d 	.word	0x0800856d
 800855c:	08008583 	.word	0x08008583
 8008560:	08008599 	.word	0x08008599
 8008564:	080085af 	.word	0x080085af
 8008568:	080085c5 	.word	0x080085c5
  {
  case HRTIM_TIMERINDEX_TIMER_A:
    {
      hrtim_bmcr &= ~(HRTIM_BMCR_TABM);
 800856c:	69fb      	ldr	r3, [r7, #28]
 800856e:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 8008572:	61fb      	str	r3, [r7, #28]
      hrtim_bmcr |= ( pTimerCfg->BurstMode << 1U);
 8008574:	687b      	ldr	r3, [r7, #4]
 8008576:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008578:	005b      	lsls	r3, r3, #1
 800857a:	69fa      	ldr	r2, [r7, #28]
 800857c:	4313      	orrs	r3, r2
 800857e:	61fb      	str	r3, [r7, #28]
      break;
 8008580:	e02c      	b.n	80085dc <HRTIM_TimingUnitWaveform_Config+0x228>
    }

  case HRTIM_TIMERINDEX_TIMER_B:
    {
      hrtim_bmcr &= ~(HRTIM_BMCR_TBBM);
 8008582:	69fb      	ldr	r3, [r7, #28]
 8008584:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8008588:	61fb      	str	r3, [r7, #28]
      hrtim_bmcr |= ( pTimerCfg->BurstMode << 2U);
 800858a:	687b      	ldr	r3, [r7, #4]
 800858c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800858e:	009b      	lsls	r3, r3, #2
 8008590:	69fa      	ldr	r2, [r7, #28]
 8008592:	4313      	orrs	r3, r2
 8008594:	61fb      	str	r3, [r7, #28]
      break;
 8008596:	e021      	b.n	80085dc <HRTIM_TimingUnitWaveform_Config+0x228>
    }

  case HRTIM_TIMERINDEX_TIMER_C:
    {
      hrtim_bmcr &= ~(HRTIM_BMCR_TCBM);
 8008598:	69fb      	ldr	r3, [r7, #28]
 800859a:	f423 2300 	bic.w	r3, r3, #524288	; 0x80000
 800859e:	61fb      	str	r3, [r7, #28]
      hrtim_bmcr |= ( pTimerCfg->BurstMode << 3U);
 80085a0:	687b      	ldr	r3, [r7, #4]
 80085a2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80085a4:	00db      	lsls	r3, r3, #3
 80085a6:	69fa      	ldr	r2, [r7, #28]
 80085a8:	4313      	orrs	r3, r2
 80085aa:	61fb      	str	r3, [r7, #28]
      break;
 80085ac:	e016      	b.n	80085dc <HRTIM_TimingUnitWaveform_Config+0x228>
    }

  case HRTIM_TIMERINDEX_TIMER_D:
    {
      hrtim_bmcr &= ~(HRTIM_BMCR_TDBM);
 80085ae:	69fb      	ldr	r3, [r7, #28]
 80085b0:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 80085b4:	61fb      	str	r3, [r7, #28]
      hrtim_bmcr |= ( pTimerCfg->BurstMode << 4U);
 80085b6:	687b      	ldr	r3, [r7, #4]
 80085b8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80085ba:	011b      	lsls	r3, r3, #4
 80085bc:	69fa      	ldr	r2, [r7, #28]
 80085be:	4313      	orrs	r3, r2
 80085c0:	61fb      	str	r3, [r7, #28]
      break;
 80085c2:	e00b      	b.n	80085dc <HRTIM_TimingUnitWaveform_Config+0x228>
    }

  case HRTIM_TIMERINDEX_TIMER_E:
    {
      hrtim_bmcr &= ~(HRTIM_BMCR_TEBM);
 80085c4:	69fb      	ldr	r3, [r7, #28]
 80085c6:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 80085ca:	61fb      	str	r3, [r7, #28]
      hrtim_bmcr |= ( pTimerCfg->BurstMode << 5U);
 80085cc:	687b      	ldr	r3, [r7, #4]
 80085ce:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80085d0:	015b      	lsls	r3, r3, #5
 80085d2:	69fa      	ldr	r2, [r7, #28]
 80085d4:	4313      	orrs	r3, r2
 80085d6:	61fb      	str	r3, [r7, #28]
      break;
 80085d8:	e000      	b.n	80085dc <HRTIM_TimingUnitWaveform_Config+0x228>
    }

  default:
    break;
 80085da:	bf00      	nop
  }

  /* Update the HRTIM registers */
  hhrtim->Instance->sTimerxRegs[TimerIdx].TIMxCR = hrtim_timcr;
 80085dc:	68fb      	ldr	r3, [r7, #12]
 80085de:	681a      	ldr	r2, [r3, #0]
 80085e0:	68bb      	ldr	r3, [r7, #8]
 80085e2:	3301      	adds	r3, #1
 80085e4:	01db      	lsls	r3, r3, #7
 80085e6:	4413      	add	r3, r2
 80085e8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80085ea:	601a      	str	r2, [r3, #0]
  hhrtim->Instance->sTimerxRegs[TimerIdx].FLTxR = hrtim_timfltr;
 80085ec:	68fb      	ldr	r3, [r7, #12]
 80085ee:	681a      	ldr	r2, [r3, #0]
 80085f0:	68bb      	ldr	r3, [r7, #8]
 80085f2:	01db      	lsls	r3, r3, #7
 80085f4:	4413      	add	r3, r2
 80085f6:	33e8      	adds	r3, #232	; 0xe8
 80085f8:	69ba      	ldr	r2, [r7, #24]
 80085fa:	601a      	str	r2, [r3, #0]
  hhrtim->Instance->sTimerxRegs[TimerIdx].OUTxR = hrtim_timoutr;
 80085fc:	68fb      	ldr	r3, [r7, #12]
 80085fe:	681a      	ldr	r2, [r3, #0]
 8008600:	68bb      	ldr	r3, [r7, #8]
 8008602:	01db      	lsls	r3, r3, #7
 8008604:	4413      	add	r3, r2
 8008606:	33e4      	adds	r3, #228	; 0xe4
 8008608:	6a3a      	ldr	r2, [r7, #32]
 800860a:	601a      	str	r2, [r3, #0]
  hhrtim->Instance->sTimerxRegs[TimerIdx].RSTxR = hrtim_timrstr;
 800860c:	68fb      	ldr	r3, [r7, #12]
 800860e:	681a      	ldr	r2, [r3, #0]
 8008610:	68bb      	ldr	r3, [r7, #8]
 8008612:	01db      	lsls	r3, r3, #7
 8008614:	4413      	add	r3, r2
 8008616:	33d4      	adds	r3, #212	; 0xd4
 8008618:	697a      	ldr	r2, [r7, #20]
 800861a:	601a      	str	r2, [r3, #0]
  hhrtim->Instance->sCommonRegs.BMCR = hrtim_bmcr;
 800861c:	68fb      	ldr	r3, [r7, #12]
 800861e:	681b      	ldr	r3, [r3, #0]
 8008620:	69fa      	ldr	r2, [r7, #28]
 8008622:	f8c3 23a0 	str.w	r2, [r3, #928]	; 0x3a0
}
 8008626:	bf00      	nop
 8008628:	372c      	adds	r7, #44	; 0x2c
 800862a:	46bd      	mov	sp, r7
 800862c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008630:	4770      	bx	lr
 8008632:	bf00      	nop

08008634 <HRTIM_OutputConfig>:
  */
static void  HRTIM_OutputConfig(HRTIM_HandleTypeDef * hhrtim,
                                uint32_t TimerIdx,
                                uint32_t Output,
                                const HRTIM_OutputCfgTypeDef * pOutputCfg)
{
 8008634:	b480      	push	{r7}
 8008636:	b089      	sub	sp, #36	; 0x24
 8008638:	af00      	add	r7, sp, #0
 800863a:	60f8      	str	r0, [r7, #12]
 800863c:	60b9      	str	r1, [r7, #8]
 800863e:	607a      	str	r2, [r7, #4]
 8008640:	603b      	str	r3, [r7, #0]
  uint32_t hrtim_outr;
  uint32_t hrtim_dtr;

  uint32_t shift = 0U;
 8008642:	2300      	movs	r3, #0
 8008644:	61bb      	str	r3, [r7, #24]

  hrtim_outr = hhrtim->Instance->sTimerxRegs[TimerIdx].OUTxR;
 8008646:	68fb      	ldr	r3, [r7, #12]
 8008648:	681a      	ldr	r2, [r3, #0]
 800864a:	68bb      	ldr	r3, [r7, #8]
 800864c:	01db      	lsls	r3, r3, #7
 800864e:	4413      	add	r3, r2
 8008650:	33e4      	adds	r3, #228	; 0xe4
 8008652:	681b      	ldr	r3, [r3, #0]
 8008654:	61fb      	str	r3, [r7, #28]
  hrtim_dtr = hhrtim->Instance->sTimerxRegs[TimerIdx].DTxR;
 8008656:	68fb      	ldr	r3, [r7, #12]
 8008658:	681a      	ldr	r2, [r3, #0]
 800865a:	68bb      	ldr	r3, [r7, #8]
 800865c:	01db      	lsls	r3, r3, #7
 800865e:	4413      	add	r3, r2
 8008660:	33b8      	adds	r3, #184	; 0xb8
 8008662:	681b      	ldr	r3, [r3, #0]
 8008664:	617b      	str	r3, [r7, #20]

  switch (Output)
 8008666:	687b      	ldr	r3, [r7, #4]
 8008668:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800866c:	d04d      	beq.n	800870a <HRTIM_OutputConfig+0xd6>
 800866e:	687b      	ldr	r3, [r7, #4]
 8008670:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8008674:	d85e      	bhi.n	8008734 <HRTIM_OutputConfig+0x100>
 8008676:	687b      	ldr	r3, [r7, #4]
 8008678:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800867c:	d032      	beq.n	80086e4 <HRTIM_OutputConfig+0xb0>
 800867e:	687b      	ldr	r3, [r7, #4]
 8008680:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8008684:	d856      	bhi.n	8008734 <HRTIM_OutputConfig+0x100>
 8008686:	687b      	ldr	r3, [r7, #4]
 8008688:	2b80      	cmp	r3, #128	; 0x80
 800868a:	d03e      	beq.n	800870a <HRTIM_OutputConfig+0xd6>
 800868c:	687b      	ldr	r3, [r7, #4]
 800868e:	2b80      	cmp	r3, #128	; 0x80
 8008690:	d850      	bhi.n	8008734 <HRTIM_OutputConfig+0x100>
 8008692:	687b      	ldr	r3, [r7, #4]
 8008694:	2b40      	cmp	r3, #64	; 0x40
 8008696:	d025      	beq.n	80086e4 <HRTIM_OutputConfig+0xb0>
 8008698:	687b      	ldr	r3, [r7, #4]
 800869a:	2b40      	cmp	r3, #64	; 0x40
 800869c:	d84a      	bhi.n	8008734 <HRTIM_OutputConfig+0x100>
 800869e:	687b      	ldr	r3, [r7, #4]
 80086a0:	2b01      	cmp	r3, #1
 80086a2:	d01f      	beq.n	80086e4 <HRTIM_OutputConfig+0xb0>
 80086a4:	687b      	ldr	r3, [r7, #4]
 80086a6:	2b00      	cmp	r3, #0
 80086a8:	d044      	beq.n	8008734 <HRTIM_OutputConfig+0x100>
 80086aa:	687b      	ldr	r3, [r7, #4]
 80086ac:	2b20      	cmp	r3, #32
 80086ae:	d841      	bhi.n	8008734 <HRTIM_OutputConfig+0x100>
 80086b0:	687b      	ldr	r3, [r7, #4]
 80086b2:	2b02      	cmp	r3, #2
 80086b4:	d33e      	bcc.n	8008734 <HRTIM_OutputConfig+0x100>
 80086b6:	687b      	ldr	r3, [r7, #4]
 80086b8:	3b02      	subs	r3, #2
 80086ba:	2201      	movs	r2, #1
 80086bc:	409a      	lsls	r2, r3
 80086be:	4b48      	ldr	r3, [pc, #288]	; (80087e0 <HRTIM_OutputConfig+0x1ac>)
 80086c0:	4013      	ands	r3, r2
 80086c2:	2b00      	cmp	r3, #0
 80086c4:	bf14      	ite	ne
 80086c6:	2301      	movne	r3, #1
 80086c8:	2300      	moveq	r3, #0
 80086ca:	b2db      	uxtb	r3, r3
 80086cc:	2b00      	cmp	r3, #0
 80086ce:	d11c      	bne.n	800870a <HRTIM_OutputConfig+0xd6>
 80086d0:	f244 0304 	movw	r3, #16388	; 0x4004
 80086d4:	4013      	ands	r3, r2
 80086d6:	2b00      	cmp	r3, #0
 80086d8:	bf14      	ite	ne
 80086da:	2301      	movne	r3, #1
 80086dc:	2300      	moveq	r3, #0
 80086de:	b2db      	uxtb	r3, r3
 80086e0:	2b00      	cmp	r3, #0
 80086e2:	d027      	beq.n	8008734 <HRTIM_OutputConfig+0x100>
  case HRTIM_OUTPUT_TC1:
  case HRTIM_OUTPUT_TD1:
  case HRTIM_OUTPUT_TE1:
    {
      /* Set the output set/reset crossbar */
      hhrtim->Instance->sTimerxRegs[TimerIdx].SETx1R = pOutputCfg->SetSource;
 80086e4:	68fb      	ldr	r3, [r7, #12]
 80086e6:	6819      	ldr	r1, [r3, #0]
 80086e8:	683b      	ldr	r3, [r7, #0]
 80086ea:	685a      	ldr	r2, [r3, #4]
 80086ec:	68bb      	ldr	r3, [r7, #8]
 80086ee:	01db      	lsls	r3, r3, #7
 80086f0:	440b      	add	r3, r1
 80086f2:	33bc      	adds	r3, #188	; 0xbc
 80086f4:	601a      	str	r2, [r3, #0]
      hhrtim->Instance->sTimerxRegs[TimerIdx].RSTx1R = pOutputCfg->ResetSource;
 80086f6:	68fb      	ldr	r3, [r7, #12]
 80086f8:	6819      	ldr	r1, [r3, #0]
 80086fa:	683b      	ldr	r3, [r7, #0]
 80086fc:	689a      	ldr	r2, [r3, #8]
 80086fe:	68bb      	ldr	r3, [r7, #8]
 8008700:	01db      	lsls	r3, r3, #7
 8008702:	440b      	add	r3, r1
 8008704:	33c0      	adds	r3, #192	; 0xc0
 8008706:	601a      	str	r2, [r3, #0]
      break;
 8008708:	e015      	b.n	8008736 <HRTIM_OutputConfig+0x102>
  case HRTIM_OUTPUT_TC2:
  case HRTIM_OUTPUT_TD2:
  case HRTIM_OUTPUT_TE2:
    {
      /* Set the output set/reset crossbar */
      hhrtim->Instance->sTimerxRegs[TimerIdx].SETx2R = pOutputCfg->SetSource;
 800870a:	68fb      	ldr	r3, [r7, #12]
 800870c:	6819      	ldr	r1, [r3, #0]
 800870e:	683b      	ldr	r3, [r7, #0]
 8008710:	685a      	ldr	r2, [r3, #4]
 8008712:	68bb      	ldr	r3, [r7, #8]
 8008714:	01db      	lsls	r3, r3, #7
 8008716:	440b      	add	r3, r1
 8008718:	33c4      	adds	r3, #196	; 0xc4
 800871a:	601a      	str	r2, [r3, #0]
      hhrtim->Instance->sTimerxRegs[TimerIdx].RSTx2R = pOutputCfg->ResetSource;
 800871c:	68fb      	ldr	r3, [r7, #12]
 800871e:	6819      	ldr	r1, [r3, #0]
 8008720:	683b      	ldr	r3, [r7, #0]
 8008722:	689a      	ldr	r2, [r3, #8]
 8008724:	68bb      	ldr	r3, [r7, #8]
 8008726:	01db      	lsls	r3, r3, #7
 8008728:	440b      	add	r3, r1
 800872a:	33c8      	adds	r3, #200	; 0xc8
 800872c:	601a      	str	r2, [r3, #0]
      shift = 16U;
 800872e:	2310      	movs	r3, #16
 8008730:	61bb      	str	r3, [r7, #24]
      break;
 8008732:	e000      	b.n	8008736 <HRTIM_OutputConfig+0x102>
    }

  default:
    break;
 8008734:	bf00      	nop
  hrtim_outr &= ~((HRTIM_OUTR_POL1 |
                   HRTIM_OUTR_IDLM1 |
                   HRTIM_OUTR_IDLES1|
                   HRTIM_OUTR_FAULT1|
                   HRTIM_OUTR_CHP1 |
                   HRTIM_OUTR_DIDL1) << shift);
 8008736:	22fe      	movs	r2, #254	; 0xfe
 8008738:	69bb      	ldr	r3, [r7, #24]
 800873a:	fa02 f303 	lsl.w	r3, r2, r3
  hrtim_outr &= ~((HRTIM_OUTR_POL1 |
 800873e:	43db      	mvns	r3, r3
 8008740:	69fa      	ldr	r2, [r7, #28]
 8008742:	4013      	ands	r3, r2
 8008744:	61fb      	str	r3, [r7, #28]

  /* Set the polarity */
  hrtim_outr |= (pOutputCfg->Polarity << shift);
 8008746:	683b      	ldr	r3, [r7, #0]
 8008748:	681a      	ldr	r2, [r3, #0]
 800874a:	69bb      	ldr	r3, [r7, #24]
 800874c:	fa02 f303 	lsl.w	r3, r2, r3
 8008750:	69fa      	ldr	r2, [r7, #28]
 8008752:	4313      	orrs	r3, r2
 8008754:	61fb      	str	r3, [r7, #28]

  /* Set the IDLE mode */
  hrtim_outr |= (pOutputCfg->IdleMode << shift);
 8008756:	683b      	ldr	r3, [r7, #0]
 8008758:	68da      	ldr	r2, [r3, #12]
 800875a:	69bb      	ldr	r3, [r7, #24]
 800875c:	fa02 f303 	lsl.w	r3, r2, r3
 8008760:	69fa      	ldr	r2, [r7, #28]
 8008762:	4313      	orrs	r3, r2
 8008764:	61fb      	str	r3, [r7, #28]

  /* Set the IDLE state */
  hrtim_outr |= (pOutputCfg->IdleLevel << shift);
 8008766:	683b      	ldr	r3, [r7, #0]
 8008768:	691a      	ldr	r2, [r3, #16]
 800876a:	69bb      	ldr	r3, [r7, #24]
 800876c:	fa02 f303 	lsl.w	r3, r2, r3
 8008770:	69fa      	ldr	r2, [r7, #28]
 8008772:	4313      	orrs	r3, r2
 8008774:	61fb      	str	r3, [r7, #28]

  /* Set the FAULT state */
  hrtim_outr |= (pOutputCfg->FaultLevel << shift);
 8008776:	683b      	ldr	r3, [r7, #0]
 8008778:	695a      	ldr	r2, [r3, #20]
 800877a:	69bb      	ldr	r3, [r7, #24]
 800877c:	fa02 f303 	lsl.w	r3, r2, r3
 8008780:	69fa      	ldr	r2, [r7, #28]
 8008782:	4313      	orrs	r3, r2
 8008784:	61fb      	str	r3, [r7, #28]

  /* Set the chopper mode */
  hrtim_outr |= (pOutputCfg->ChopperModeEnable << shift);
 8008786:	683b      	ldr	r3, [r7, #0]
 8008788:	699a      	ldr	r2, [r3, #24]
 800878a:	69bb      	ldr	r3, [r7, #24]
 800878c:	fa02 f303 	lsl.w	r3, r2, r3
 8008790:	69fa      	ldr	r2, [r7, #28]
 8008792:	4313      	orrs	r3, r2
 8008794:	61fb      	str	r3, [r7, #28]
     state during a burst mode operation is allowed only under the following
     conditions:
     - the outputs is active during the burst mode (IDLES=1U)
     - positive deadtimes (SDTR/SDTF set to 0U)
  */
  if ((pOutputCfg->IdleLevel == HRTIM_OUTPUTIDLELEVEL_ACTIVE) &&
 8008796:	683b      	ldr	r3, [r7, #0]
 8008798:	691b      	ldr	r3, [r3, #16]
 800879a:	2b08      	cmp	r3, #8
 800879c:	d111      	bne.n	80087c2 <HRTIM_OutputConfig+0x18e>
      ((hrtim_dtr & HRTIM_DTR_SDTR) == (uint32_t)RESET) &&
 800879e:	697b      	ldr	r3, [r7, #20]
 80087a0:	f403 7300 	and.w	r3, r3, #512	; 0x200
  if ((pOutputCfg->IdleLevel == HRTIM_OUTPUTIDLELEVEL_ACTIVE) &&
 80087a4:	2b00      	cmp	r3, #0
 80087a6:	d10c      	bne.n	80087c2 <HRTIM_OutputConfig+0x18e>
      ((hrtim_dtr & HRTIM_DTR_SDTF) == (uint32_t)RESET))
 80087a8:	697b      	ldr	r3, [r7, #20]
 80087aa:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
      ((hrtim_dtr & HRTIM_DTR_SDTR) == (uint32_t)RESET) &&
 80087ae:	2b00      	cmp	r3, #0
 80087b0:	d107      	bne.n	80087c2 <HRTIM_OutputConfig+0x18e>
  {
    hrtim_outr |= (pOutputCfg->BurstModeEntryDelayed << shift);
 80087b2:	683b      	ldr	r3, [r7, #0]
 80087b4:	69da      	ldr	r2, [r3, #28]
 80087b6:	69bb      	ldr	r3, [r7, #24]
 80087b8:	fa02 f303 	lsl.w	r3, r2, r3
 80087bc:	69fa      	ldr	r2, [r7, #28]
 80087be:	4313      	orrs	r3, r2
 80087c0:	61fb      	str	r3, [r7, #28]
  }

  /* Update HRTIM register */
  hhrtim->Instance->sTimerxRegs[TimerIdx].OUTxR = hrtim_outr;
 80087c2:	68fb      	ldr	r3, [r7, #12]
 80087c4:	681a      	ldr	r2, [r3, #0]
 80087c6:	68bb      	ldr	r3, [r7, #8]
 80087c8:	01db      	lsls	r3, r3, #7
 80087ca:	4413      	add	r3, r2
 80087cc:	33e4      	adds	r3, #228	; 0xe4
 80087ce:	69fa      	ldr	r2, [r7, #28]
 80087d0:	601a      	str	r2, [r3, #0]
}
 80087d2:	bf00      	nop
 80087d4:	3724      	adds	r7, #36	; 0x24
 80087d6:	46bd      	mov	sp, r7
 80087d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80087dc:	4770      	bx	lr
 80087de:	bf00      	nop
 80087e0:	40000041 	.word	0x40000041

080087e4 <HRTIM_ForceRegistersUpdate>:
  * @param  TimerIdx Timer index
  * @retval None
  */
static void HRTIM_ForceRegistersUpdate(HRTIM_HandleTypeDef * hhrtim,
                                       uint32_t TimerIdx)
{
 80087e4:	b480      	push	{r7}
 80087e6:	b083      	sub	sp, #12
 80087e8:	af00      	add	r7, sp, #0
 80087ea:	6078      	str	r0, [r7, #4]
 80087ec:	6039      	str	r1, [r7, #0]
  switch (TimerIdx)
 80087ee:	683b      	ldr	r3, [r7, #0]
 80087f0:	2b05      	cmp	r3, #5
 80087f2:	d851      	bhi.n	8008898 <HRTIM_ForceRegistersUpdate+0xb4>
 80087f4:	a201      	add	r2, pc, #4	; (adr r2, 80087fc <HRTIM_ForceRegistersUpdate+0x18>)
 80087f6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80087fa:	bf00      	nop
 80087fc:	0800882b 	.word	0x0800882b
 8008800:	08008841 	.word	0x08008841
 8008804:	08008857 	.word	0x08008857
 8008808:	0800886d 	.word	0x0800886d
 800880c:	08008883 	.word	0x08008883
 8008810:	08008815 	.word	0x08008815
  {
  case HRTIM_TIMERINDEX_MASTER:
    {
      hhrtim->Instance->sCommonRegs.CR2 |= HRTIM_CR2_MSWU;
 8008814:	687b      	ldr	r3, [r7, #4]
 8008816:	681b      	ldr	r3, [r3, #0]
 8008818:	f8d3 2384 	ldr.w	r2, [r3, #900]	; 0x384
 800881c:	687b      	ldr	r3, [r7, #4]
 800881e:	681b      	ldr	r3, [r3, #0]
 8008820:	f042 0201 	orr.w	r2, r2, #1
 8008824:	f8c3 2384 	str.w	r2, [r3, #900]	; 0x384
      break;
 8008828:	e037      	b.n	800889a <HRTIM_ForceRegistersUpdate+0xb6>
    }

  case HRTIM_TIMERINDEX_TIMER_A:
    {
      hhrtim->Instance->sCommonRegs.CR2 |= HRTIM_CR2_TASWU;
 800882a:	687b      	ldr	r3, [r7, #4]
 800882c:	681b      	ldr	r3, [r3, #0]
 800882e:	f8d3 2384 	ldr.w	r2, [r3, #900]	; 0x384
 8008832:	687b      	ldr	r3, [r7, #4]
 8008834:	681b      	ldr	r3, [r3, #0]
 8008836:	f042 0202 	orr.w	r2, r2, #2
 800883a:	f8c3 2384 	str.w	r2, [r3, #900]	; 0x384
      break;
 800883e:	e02c      	b.n	800889a <HRTIM_ForceRegistersUpdate+0xb6>
    }

  case HRTIM_TIMERINDEX_TIMER_B:
    {
      hhrtim->Instance->sCommonRegs.CR2 |= HRTIM_CR2_TBSWU;
 8008840:	687b      	ldr	r3, [r7, #4]
 8008842:	681b      	ldr	r3, [r3, #0]
 8008844:	f8d3 2384 	ldr.w	r2, [r3, #900]	; 0x384
 8008848:	687b      	ldr	r3, [r7, #4]
 800884a:	681b      	ldr	r3, [r3, #0]
 800884c:	f042 0204 	orr.w	r2, r2, #4
 8008850:	f8c3 2384 	str.w	r2, [r3, #900]	; 0x384
      break;
 8008854:	e021      	b.n	800889a <HRTIM_ForceRegistersUpdate+0xb6>
    }

  case HRTIM_TIMERINDEX_TIMER_C:
    {
      hhrtim->Instance->sCommonRegs.CR2 |= HRTIM_CR2_TCSWU;
 8008856:	687b      	ldr	r3, [r7, #4]
 8008858:	681b      	ldr	r3, [r3, #0]
 800885a:	f8d3 2384 	ldr.w	r2, [r3, #900]	; 0x384
 800885e:	687b      	ldr	r3, [r7, #4]
 8008860:	681b      	ldr	r3, [r3, #0]
 8008862:	f042 0208 	orr.w	r2, r2, #8
 8008866:	f8c3 2384 	str.w	r2, [r3, #900]	; 0x384
      break;
 800886a:	e016      	b.n	800889a <HRTIM_ForceRegistersUpdate+0xb6>
    }

  case HRTIM_TIMERINDEX_TIMER_D:
    {
      hhrtim->Instance->sCommonRegs.CR2 |= HRTIM_CR2_TDSWU;
 800886c:	687b      	ldr	r3, [r7, #4]
 800886e:	681b      	ldr	r3, [r3, #0]
 8008870:	f8d3 2384 	ldr.w	r2, [r3, #900]	; 0x384
 8008874:	687b      	ldr	r3, [r7, #4]
 8008876:	681b      	ldr	r3, [r3, #0]
 8008878:	f042 0210 	orr.w	r2, r2, #16
 800887c:	f8c3 2384 	str.w	r2, [r3, #900]	; 0x384
      break;
 8008880:	e00b      	b.n	800889a <HRTIM_ForceRegistersUpdate+0xb6>
    }

  case HRTIM_TIMERINDEX_TIMER_E:
    {
      hhrtim->Instance->sCommonRegs.CR2 |= HRTIM_CR2_TESWU;
 8008882:	687b      	ldr	r3, [r7, #4]
 8008884:	681b      	ldr	r3, [r3, #0]
 8008886:	f8d3 2384 	ldr.w	r2, [r3, #900]	; 0x384
 800888a:	687b      	ldr	r3, [r7, #4]
 800888c:	681b      	ldr	r3, [r3, #0]
 800888e:	f042 0220 	orr.w	r2, r2, #32
 8008892:	f8c3 2384 	str.w	r2, [r3, #900]	; 0x384
      break;
 8008896:	e000      	b.n	800889a <HRTIM_ForceRegistersUpdate+0xb6>
    }

  default:
    break;
 8008898:	bf00      	nop
  }
}
 800889a:	bf00      	nop
 800889c:	370c      	adds	r7, #12
 800889e:	46bd      	mov	sp, r7
 80088a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80088a4:	4770      	bx	lr
 80088a6:	bf00      	nop

080088a8 <HRTIM_HRTIM_ISR>:
  * @brief  HRTIM interrupts service routine
  * @param  hhrtim pointer to HAL HRTIM handle
  * @retval None
  */
static void HRTIM_HRTIM_ISR(HRTIM_HandleTypeDef * hhrtim)
{
 80088a8:	b580      	push	{r7, lr}
 80088aa:	b084      	sub	sp, #16
 80088ac:	af00      	add	r7, sp, #0
 80088ae:	6078      	str	r0, [r7, #4]
  uint32_t isrflags = READ_REG(hhrtim->Instance->sCommonRegs.ISR);
 80088b0:	687b      	ldr	r3, [r7, #4]
 80088b2:	681b      	ldr	r3, [r3, #0]
 80088b4:	f8d3 3388 	ldr.w	r3, [r3, #904]	; 0x388
 80088b8:	60fb      	str	r3, [r7, #12]
  uint32_t ierits   = READ_REG(hhrtim->Instance->sCommonRegs.IER);
 80088ba:	687b      	ldr	r3, [r7, #4]
 80088bc:	681b      	ldr	r3, [r3, #0]
 80088be:	f8d3 3390 	ldr.w	r3, [r3, #912]	; 0x390
 80088c2:	60bb      	str	r3, [r7, #8]

  /* Fault 1 event */
  if((uint32_t)(isrflags & HRTIM_FLAG_FLT1) != (uint32_t)RESET)
 80088c4:	68fb      	ldr	r3, [r7, #12]
 80088c6:	f003 0301 	and.w	r3, r3, #1
 80088ca:	2b00      	cmp	r3, #0
 80088cc:	d00c      	beq.n	80088e8 <HRTIM_HRTIM_ISR+0x40>
  {
    if((uint32_t)(ierits & HRTIM_IT_FLT1) != (uint32_t)RESET)
 80088ce:	68bb      	ldr	r3, [r7, #8]
 80088d0:	f003 0301 	and.w	r3, r3, #1
 80088d4:	2b00      	cmp	r3, #0
 80088d6:	d007      	beq.n	80088e8 <HRTIM_HRTIM_ISR+0x40>
    {
      __HAL_HRTIM_CLEAR_IT(hhrtim, HRTIM_IT_FLT1);
 80088d8:	687b      	ldr	r3, [r7, #4]
 80088da:	681b      	ldr	r3, [r3, #0]
 80088dc:	2201      	movs	r2, #1
 80088de:	f8c3 238c 	str.w	r2, [r3, #908]	; 0x38c

      /* Invoke Fault 1 event callback */
#if (USE_HAL_HRTIM_REGISTER_CALLBACKS == 1)
      hhrtim->Fault1Callback(hhrtim);
#else
      HAL_HRTIM_Fault1Callback(hhrtim);
 80088e2:	6878      	ldr	r0, [r7, #4]
 80088e4:	f7ff fbc7 	bl	8008076 <HAL_HRTIM_Fault1Callback>
#endif /* USE_HAL_HRTIM_REGISTER_CALLBACKS */
    }
  }

  /* Fault 2 event */
  if((uint32_t)(isrflags & HRTIM_FLAG_FLT2) != (uint32_t)RESET)
 80088e8:	68fb      	ldr	r3, [r7, #12]
 80088ea:	f003 0302 	and.w	r3, r3, #2
 80088ee:	2b00      	cmp	r3, #0
 80088f0:	d00c      	beq.n	800890c <HRTIM_HRTIM_ISR+0x64>
  {
    if((uint32_t)(ierits & HRTIM_IT_FLT2) != (uint32_t)RESET)
 80088f2:	68bb      	ldr	r3, [r7, #8]
 80088f4:	f003 0302 	and.w	r3, r3, #2
 80088f8:	2b00      	cmp	r3, #0
 80088fa:	d007      	beq.n	800890c <HRTIM_HRTIM_ISR+0x64>
    {
      __HAL_HRTIM_CLEAR_IT(hhrtim, HRTIM_IT_FLT2);
 80088fc:	687b      	ldr	r3, [r7, #4]
 80088fe:	681b      	ldr	r3, [r3, #0]
 8008900:	2202      	movs	r2, #2
 8008902:	f8c3 238c 	str.w	r2, [r3, #908]	; 0x38c

      /* Invoke Fault 2 event callback */
#if (USE_HAL_HRTIM_REGISTER_CALLBACKS == 1)
      hhrtim->Fault2Callback(hhrtim);
#else
      HAL_HRTIM_Fault2Callback(hhrtim);
 8008906:	6878      	ldr	r0, [r7, #4]
 8008908:	f7ff fbbf 	bl	800808a <HAL_HRTIM_Fault2Callback>
#endif /* USE_HAL_HRTIM_REGISTER_CALLBACKS */
    }
  }

  /* Fault 3 event */
  if((uint32_t)(isrflags & HRTIM_FLAG_FLT3) != (uint32_t)RESET)
 800890c:	68fb      	ldr	r3, [r7, #12]
 800890e:	f003 0304 	and.w	r3, r3, #4
 8008912:	2b00      	cmp	r3, #0
 8008914:	d00c      	beq.n	8008930 <HRTIM_HRTIM_ISR+0x88>
  {
    if((uint32_t)(ierits & HRTIM_IT_FLT3) != (uint32_t)RESET)
 8008916:	68bb      	ldr	r3, [r7, #8]
 8008918:	f003 0304 	and.w	r3, r3, #4
 800891c:	2b00      	cmp	r3, #0
 800891e:	d007      	beq.n	8008930 <HRTIM_HRTIM_ISR+0x88>
    {
      __HAL_HRTIM_CLEAR_IT(hhrtim, HRTIM_IT_FLT3);
 8008920:	687b      	ldr	r3, [r7, #4]
 8008922:	681b      	ldr	r3, [r3, #0]
 8008924:	2204      	movs	r2, #4
 8008926:	f8c3 238c 	str.w	r2, [r3, #908]	; 0x38c

      /* Invoke Fault 3 event callback */
#if (USE_HAL_HRTIM_REGISTER_CALLBACKS == 1)
      hhrtim->Fault3Callback(hhrtim);
#else
      HAL_HRTIM_Fault3Callback(hhrtim);
 800892a:	6878      	ldr	r0, [r7, #4]
 800892c:	f7ff fbb7 	bl	800809e <HAL_HRTIM_Fault3Callback>
#endif /* USE_HAL_HRTIM_REGISTER_CALLBACKS */
    }
  }

  /* Fault 4 event */
  if((uint32_t)(isrflags & HRTIM_FLAG_FLT4) != (uint32_t)RESET)
 8008930:	68fb      	ldr	r3, [r7, #12]
 8008932:	f003 0308 	and.w	r3, r3, #8
 8008936:	2b00      	cmp	r3, #0
 8008938:	d00c      	beq.n	8008954 <HRTIM_HRTIM_ISR+0xac>
  {
    if((uint32_t)(ierits & HRTIM_IT_FLT4) != (uint32_t)RESET)
 800893a:	68bb      	ldr	r3, [r7, #8]
 800893c:	f003 0308 	and.w	r3, r3, #8
 8008940:	2b00      	cmp	r3, #0
 8008942:	d007      	beq.n	8008954 <HRTIM_HRTIM_ISR+0xac>
    {
      __HAL_HRTIM_CLEAR_IT(hhrtim, HRTIM_IT_FLT4);
 8008944:	687b      	ldr	r3, [r7, #4]
 8008946:	681b      	ldr	r3, [r3, #0]
 8008948:	2208      	movs	r2, #8
 800894a:	f8c3 238c 	str.w	r2, [r3, #908]	; 0x38c

      /* Invoke Fault 4 event callback */
#if (USE_HAL_HRTIM_REGISTER_CALLBACKS == 1)
      hhrtim->Fault4Callback(hhrtim);
#else
      HAL_HRTIM_Fault4Callback(hhrtim);
 800894e:	6878      	ldr	r0, [r7, #4]
 8008950:	f7ff fbaf 	bl	80080b2 <HAL_HRTIM_Fault4Callback>
#endif /* USE_HAL_HRTIM_REGISTER_CALLBACKS */
    }
  }

  /* Fault 5 event */
  if((uint32_t)(isrflags & HRTIM_FLAG_FLT5) != (uint32_t)RESET)
 8008954:	68fb      	ldr	r3, [r7, #12]
 8008956:	f003 0310 	and.w	r3, r3, #16
 800895a:	2b00      	cmp	r3, #0
 800895c:	d00c      	beq.n	8008978 <HRTIM_HRTIM_ISR+0xd0>
  {
    if((uint32_t)(ierits & HRTIM_IT_FLT5) != (uint32_t)RESET)
 800895e:	68bb      	ldr	r3, [r7, #8]
 8008960:	f003 0310 	and.w	r3, r3, #16
 8008964:	2b00      	cmp	r3, #0
 8008966:	d007      	beq.n	8008978 <HRTIM_HRTIM_ISR+0xd0>
    {
      __HAL_HRTIM_CLEAR_IT(hhrtim, HRTIM_IT_FLT5);
 8008968:	687b      	ldr	r3, [r7, #4]
 800896a:	681b      	ldr	r3, [r3, #0]
 800896c:	2210      	movs	r2, #16
 800896e:	f8c3 238c 	str.w	r2, [r3, #908]	; 0x38c

      /* Invoke Fault 5 event callback */
#if (USE_HAL_HRTIM_REGISTER_CALLBACKS == 1)
      hhrtim->Fault5Callback(hhrtim);
#else
      HAL_HRTIM_Fault5Callback(hhrtim);
 8008972:	6878      	ldr	r0, [r7, #4]
 8008974:	f7ff fba7 	bl	80080c6 <HAL_HRTIM_Fault5Callback>
#endif /* USE_HAL_HRTIM_REGISTER_CALLBACKS */
    }
  }

  /* System fault event */
  if((uint32_t)(isrflags & HRTIM_FLAG_SYSFLT) != (uint32_t)RESET)
 8008978:	68fb      	ldr	r3, [r7, #12]
 800897a:	f003 0320 	and.w	r3, r3, #32
 800897e:	2b00      	cmp	r3, #0
 8008980:	d00c      	beq.n	800899c <HRTIM_HRTIM_ISR+0xf4>
  {
    if((uint32_t)(ierits & HRTIM_IT_SYSFLT) != (uint32_t)RESET)
 8008982:	68bb      	ldr	r3, [r7, #8]
 8008984:	f003 0320 	and.w	r3, r3, #32
 8008988:	2b00      	cmp	r3, #0
 800898a:	d007      	beq.n	800899c <HRTIM_HRTIM_ISR+0xf4>
    {
      __HAL_HRTIM_CLEAR_IT(hhrtim, HRTIM_IT_SYSFLT);
 800898c:	687b      	ldr	r3, [r7, #4]
 800898e:	681b      	ldr	r3, [r3, #0]
 8008990:	2220      	movs	r2, #32
 8008992:	f8c3 238c 	str.w	r2, [r3, #908]	; 0x38c

      /* Invoke System fault event callback */
#if (USE_HAL_HRTIM_REGISTER_CALLBACKS == 1)
      hhrtim->SystemFaultCallback(hhrtim);
#else
      HAL_HRTIM_SystemFaultCallback(hhrtim);
 8008996:	6878      	ldr	r0, [r7, #4]
 8008998:	f7ff fb9f 	bl	80080da <HAL_HRTIM_SystemFaultCallback>
#endif /* USE_HAL_HRTIM_REGISTER_CALLBACKS */
    }
  }
}
 800899c:	bf00      	nop
 800899e:	3710      	adds	r7, #16
 80089a0:	46bd      	mov	sp, r7
 80089a2:	bd80      	pop	{r7, pc}

080089a4 <HRTIM_Master_ISR>:
* @brief  Master timer interrupts service routine
* @param  hhrtim pointer to HAL HRTIM handle
* @retval None
*/
static void HRTIM_Master_ISR(HRTIM_HandleTypeDef * hhrtim)
{
 80089a4:	b580      	push	{r7, lr}
 80089a6:	b086      	sub	sp, #24
 80089a8:	af00      	add	r7, sp, #0
 80089aa:	6078      	str	r0, [r7, #4]
  uint32_t isrflags  = READ_REG(hhrtim->Instance->sCommonRegs.ISR);
 80089ac:	687b      	ldr	r3, [r7, #4]
 80089ae:	681b      	ldr	r3, [r3, #0]
 80089b0:	f8d3 3388 	ldr.w	r3, [r3, #904]	; 0x388
 80089b4:	617b      	str	r3, [r7, #20]
  uint32_t ierits    = READ_REG(hhrtim->Instance->sCommonRegs.IER);
 80089b6:	687b      	ldr	r3, [r7, #4]
 80089b8:	681b      	ldr	r3, [r3, #0]
 80089ba:	f8d3 3390 	ldr.w	r3, [r3, #912]	; 0x390
 80089be:	613b      	str	r3, [r7, #16]
  uint32_t misrflags = READ_REG(hhrtim->Instance->sMasterRegs.MISR);
 80089c0:	687b      	ldr	r3, [r7, #4]
 80089c2:	681b      	ldr	r3, [r3, #0]
 80089c4:	685b      	ldr	r3, [r3, #4]
 80089c6:	60fb      	str	r3, [r7, #12]
  uint32_t mdierits  = READ_REG(hhrtim->Instance->sMasterRegs.MDIER);
 80089c8:	687b      	ldr	r3, [r7, #4]
 80089ca:	681b      	ldr	r3, [r3, #0]
 80089cc:	68db      	ldr	r3, [r3, #12]
 80089ce:	60bb      	str	r3, [r7, #8]

  /* Burst mode period event */
  if((uint32_t)(isrflags & HRTIM_FLAG_BMPER) != (uint32_t)RESET)
 80089d0:	697b      	ldr	r3, [r7, #20]
 80089d2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80089d6:	2b00      	cmp	r3, #0
 80089d8:	d00d      	beq.n	80089f6 <HRTIM_Master_ISR+0x52>
  {
    if((uint32_t)(ierits & HRTIM_IT_BMPER) != (uint32_t)RESET)
 80089da:	693b      	ldr	r3, [r7, #16]
 80089dc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80089e0:	2b00      	cmp	r3, #0
 80089e2:	d008      	beq.n	80089f6 <HRTIM_Master_ISR+0x52>
    {
      __HAL_HRTIM_CLEAR_IT(hhrtim, HRTIM_IT_BMPER);
 80089e4:	687b      	ldr	r3, [r7, #4]
 80089e6:	681b      	ldr	r3, [r3, #0]
 80089e8:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 80089ec:	f8c3 238c 	str.w	r2, [r3, #908]	; 0x38c

      /* Invoke Burst mode period event callback */
#if (USE_HAL_HRTIM_REGISTER_CALLBACKS == 1)
      hhrtim->BurstModePeriodCallback(hhrtim);
#else
      HAL_HRTIM_BurstModePeriodCallback(hhrtim);
 80089f0:	6878      	ldr	r0, [r7, #4]
 80089f2:	f7ff fb7c 	bl	80080ee <HAL_HRTIM_BurstModePeriodCallback>
#endif /* USE_HAL_HRTIM_REGISTER_CALLBACKS */
    }
  }

  /* Master timer compare 1 event */
  if((uint32_t)(misrflags & HRTIM_MASTER_FLAG_MCMP1) != (uint32_t)RESET)
 80089f6:	68fb      	ldr	r3, [r7, #12]
 80089f8:	f003 0301 	and.w	r3, r3, #1
 80089fc:	2b00      	cmp	r3, #0
 80089fe:	d00c      	beq.n	8008a1a <HRTIM_Master_ISR+0x76>
  {
    if((uint32_t)(mdierits & HRTIM_MASTER_IT_MCMP1) != (uint32_t)RESET)
 8008a00:	68bb      	ldr	r3, [r7, #8]
 8008a02:	f003 0301 	and.w	r3, r3, #1
 8008a06:	2b00      	cmp	r3, #0
 8008a08:	d007      	beq.n	8008a1a <HRTIM_Master_ISR+0x76>
    {
      __HAL_HRTIM_MASTER_CLEAR_IT(hhrtim, HRTIM_MASTER_IT_MCMP1);
 8008a0a:	687b      	ldr	r3, [r7, #4]
 8008a0c:	681b      	ldr	r3, [r3, #0]
 8008a0e:	2201      	movs	r2, #1
 8008a10:	609a      	str	r2, [r3, #8]

      /* Invoke compare 1 event callback */
#if (USE_HAL_HRTIM_REGISTER_CALLBACKS == 1)
      hhrtim->Compare1EventCallback(hhrtim, HRTIM_TIMERINDEX_MASTER);
#else
      HAL_HRTIM_Compare1EventCallback(hhrtim, HRTIM_TIMERINDEX_MASTER);
 8008a12:	2105      	movs	r1, #5
 8008a14:	6878      	ldr	r0, [r7, #4]
 8008a16:	f7ff fb89 	bl	800812c <HAL_HRTIM_Compare1EventCallback>
#endif /* USE_HAL_HRTIM_REGISTER_CALLBACKS */
    }
  }

  /* Master timer compare 2 event */
  if((uint32_t)(misrflags & HRTIM_MASTER_FLAG_MCMP2) != (uint32_t)RESET)
 8008a1a:	68fb      	ldr	r3, [r7, #12]
 8008a1c:	f003 0302 	and.w	r3, r3, #2
 8008a20:	2b00      	cmp	r3, #0
 8008a22:	d00c      	beq.n	8008a3e <HRTIM_Master_ISR+0x9a>
  {
    if((uint32_t)(mdierits & HRTIM_MASTER_IT_MCMP2) != (uint32_t)RESET)
 8008a24:	68bb      	ldr	r3, [r7, #8]
 8008a26:	f003 0302 	and.w	r3, r3, #2
 8008a2a:	2b00      	cmp	r3, #0
 8008a2c:	d007      	beq.n	8008a3e <HRTIM_Master_ISR+0x9a>
    {
      __HAL_HRTIM_MASTER_CLEAR_IT(hhrtim, HRTIM_MASTER_IT_MCMP2);
 8008a2e:	687b      	ldr	r3, [r7, #4]
 8008a30:	681b      	ldr	r3, [r3, #0]
 8008a32:	2202      	movs	r2, #2
 8008a34:	609a      	str	r2, [r3, #8]

      /* Invoke compare 2 event callback */
#if (USE_HAL_HRTIM_REGISTER_CALLBACKS == 1)
      hhrtim->Compare2EventCallback(hhrtim, HRTIM_TIMERINDEX_MASTER);
#else
      HAL_HRTIM_Compare2EventCallback(hhrtim, HRTIM_TIMERINDEX_MASTER);
 8008a36:	2105      	movs	r1, #5
 8008a38:	6878      	ldr	r0, [r7, #4]
 8008a3a:	f7fa fd03 	bl	8003444 <HAL_HRTIM_Compare2EventCallback>
#endif /* USE_HAL_HRTIM_REGISTER_CALLBACKS */
    }
  }

  /* Master timer compare 3 event */
  if((uint32_t)(misrflags & HRTIM_MASTER_FLAG_MCMP3) != (uint32_t)RESET)
 8008a3e:	68fb      	ldr	r3, [r7, #12]
 8008a40:	f003 0304 	and.w	r3, r3, #4
 8008a44:	2b00      	cmp	r3, #0
 8008a46:	d00c      	beq.n	8008a62 <HRTIM_Master_ISR+0xbe>
  {
    if((uint32_t)(mdierits & HRTIM_MASTER_IT_MCMP3) != (uint32_t)RESET)
 8008a48:	68bb      	ldr	r3, [r7, #8]
 8008a4a:	f003 0304 	and.w	r3, r3, #4
 8008a4e:	2b00      	cmp	r3, #0
 8008a50:	d007      	beq.n	8008a62 <HRTIM_Master_ISR+0xbe>
    {
      __HAL_HRTIM_MASTER_CLEAR_IT(hhrtim, HRTIM_MASTER_IT_MCMP3);
 8008a52:	687b      	ldr	r3, [r7, #4]
 8008a54:	681b      	ldr	r3, [r3, #0]
 8008a56:	2204      	movs	r2, #4
 8008a58:	609a      	str	r2, [r3, #8]

      /* Invoke compare 3 event callback */
#if (USE_HAL_HRTIM_REGISTER_CALLBACKS == 1)
      hhrtim->Compare3EventCallback(hhrtim, HRTIM_TIMERINDEX_MASTER);
#else
      HAL_HRTIM_Compare3EventCallback(hhrtim, HRTIM_TIMERINDEX_MASTER);
 8008a5a:	2105      	movs	r1, #5
 8008a5c:	6878      	ldr	r0, [r7, #4]
 8008a5e:	f7fa fcfd 	bl	800345c <HAL_HRTIM_Compare3EventCallback>
#endif /* USE_HAL_HRTIM_REGISTER_CALLBACKS */
    }
  }

  /* Master timer compare 4 event */
  if((uint32_t)(misrflags & HRTIM_MASTER_FLAG_MCMP4) != (uint32_t)RESET)
 8008a62:	68fb      	ldr	r3, [r7, #12]
 8008a64:	f003 0308 	and.w	r3, r3, #8
 8008a68:	2b00      	cmp	r3, #0
 8008a6a:	d00c      	beq.n	8008a86 <HRTIM_Master_ISR+0xe2>
  {
    if((uint32_t)(mdierits & HRTIM_MASTER_IT_MCMP4) != (uint32_t)RESET)
 8008a6c:	68bb      	ldr	r3, [r7, #8]
 8008a6e:	f003 0308 	and.w	r3, r3, #8
 8008a72:	2b00      	cmp	r3, #0
 8008a74:	d007      	beq.n	8008a86 <HRTIM_Master_ISR+0xe2>
    {
      __HAL_HRTIM_MASTER_CLEAR_IT(hhrtim, HRTIM_MASTER_IT_MCMP4);
 8008a76:	687b      	ldr	r3, [r7, #4]
 8008a78:	681b      	ldr	r3, [r3, #0]
 8008a7a:	2208      	movs	r2, #8
 8008a7c:	609a      	str	r2, [r3, #8]

      /* Invoke compare 4 event callback */
#if (USE_HAL_HRTIM_REGISTER_CALLBACKS == 1)
      hhrtim->Compare4EventCallback(hhrtim, HRTIM_TIMERINDEX_MASTER);
#else
      HAL_HRTIM_Compare4EventCallback(hhrtim, HRTIM_TIMERINDEX_MASTER);
 8008a7e:	2105      	movs	r1, #5
 8008a80:	6878      	ldr	r0, [r7, #4]
 8008a82:	f7ff fb5e 	bl	8008142 <HAL_HRTIM_Compare4EventCallback>
#endif /* USE_HAL_HRTIM_REGISTER_CALLBACKS */
    }
  }

  /* Master timer repetition event */
  if((uint32_t)(misrflags & HRTIM_MASTER_FLAG_MREP) != (uint32_t)RESET)
 8008a86:	68fb      	ldr	r3, [r7, #12]
 8008a88:	f003 0310 	and.w	r3, r3, #16
 8008a8c:	2b00      	cmp	r3, #0
 8008a8e:	d00c      	beq.n	8008aaa <HRTIM_Master_ISR+0x106>
  {
    if((uint32_t)(mdierits & HRTIM_MASTER_IT_MREP) != (uint32_t)RESET)
 8008a90:	68bb      	ldr	r3, [r7, #8]
 8008a92:	f003 0310 	and.w	r3, r3, #16
 8008a96:	2b00      	cmp	r3, #0
 8008a98:	d007      	beq.n	8008aaa <HRTIM_Master_ISR+0x106>
    {
      __HAL_HRTIM_MASTER_CLEAR_IT(hhrtim, HRTIM_MASTER_IT_MREP);
 8008a9a:	687b      	ldr	r3, [r7, #4]
 8008a9c:	681b      	ldr	r3, [r3, #0]
 8008a9e:	2210      	movs	r2, #16
 8008aa0:	609a      	str	r2, [r3, #8]

      /* Invoke repetition event callback */
#if (USE_HAL_HRTIM_REGISTER_CALLBACKS == 1)
      hhrtim->RepetitionEventCallback(hhrtim, HRTIM_TIMERINDEX_MASTER);
#else
      HAL_HRTIM_RepetitionEventCallback(hhrtim, HRTIM_TIMERINDEX_MASTER);
 8008aa2:	2105      	movs	r1, #5
 8008aa4:	6878      	ldr	r0, [r7, #4]
 8008aa6:	f7fa fd4d 	bl	8003544 <HAL_HRTIM_RepetitionEventCallback>
#endif /* USE_HAL_HRTIM_REGISTER_CALLBACKS */
    }
  }

  /* Synchronization input event */
  if((uint32_t)(misrflags & HRTIM_MASTER_FLAG_SYNC) != (uint32_t)RESET)
 8008aaa:	68fb      	ldr	r3, [r7, #12]
 8008aac:	f003 0320 	and.w	r3, r3, #32
 8008ab0:	2b00      	cmp	r3, #0
 8008ab2:	d00b      	beq.n	8008acc <HRTIM_Master_ISR+0x128>
  {
    if((uint32_t)(mdierits & HRTIM_MASTER_IT_SYNC) != (uint32_t)RESET)
 8008ab4:	68bb      	ldr	r3, [r7, #8]
 8008ab6:	f003 0320 	and.w	r3, r3, #32
 8008aba:	2b00      	cmp	r3, #0
 8008abc:	d006      	beq.n	8008acc <HRTIM_Master_ISR+0x128>
    {
      __HAL_HRTIM_MASTER_CLEAR_IT(hhrtim, HRTIM_MASTER_IT_SYNC);
 8008abe:	687b      	ldr	r3, [r7, #4]
 8008ac0:	681b      	ldr	r3, [r3, #0]
 8008ac2:	2220      	movs	r2, #32
 8008ac4:	609a      	str	r2, [r3, #8]

      /* Invoke synchronization event callback */
#if (USE_HAL_HRTIM_REGISTER_CALLBACKS == 1)
      hhrtim->SynchronizationEventCallback(hhrtim);
#else
      HAL_HRTIM_SynchronizationEventCallback(hhrtim);
 8008ac6:	6878      	ldr	r0, [r7, #4]
 8008ac8:	f7ff fb1b 	bl	8008102 <HAL_HRTIM_SynchronizationEventCallback>
#endif /* USE_HAL_HRTIM_REGISTER_CALLBACKS */
    }
  }

  /* Master timer registers update event */
  if((uint32_t)(misrflags & HRTIM_MASTER_FLAG_MUPD) != (uint32_t)RESET)
 8008acc:	68fb      	ldr	r3, [r7, #12]
 8008ace:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008ad2:	2b00      	cmp	r3, #0
 8008ad4:	d00c      	beq.n	8008af0 <HRTIM_Master_ISR+0x14c>
  {
    if((uint32_t)(mdierits & HRTIM_MASTER_IT_MUPD) != (uint32_t)RESET)
 8008ad6:	68bb      	ldr	r3, [r7, #8]
 8008ad8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008adc:	2b00      	cmp	r3, #0
 8008ade:	d007      	beq.n	8008af0 <HRTIM_Master_ISR+0x14c>
    {
      __HAL_HRTIM_MASTER_CLEAR_IT(hhrtim, HRTIM_MASTER_IT_MUPD);
 8008ae0:	687b      	ldr	r3, [r7, #4]
 8008ae2:	681b      	ldr	r3, [r3, #0]
 8008ae4:	2240      	movs	r2, #64	; 0x40
 8008ae6:	609a      	str	r2, [r3, #8]

      /* Invoke registers update event callback */
#if (USE_HAL_HRTIM_REGISTER_CALLBACKS == 1)
      hhrtim->RegistersUpdateCallback(hhrtim, HRTIM_TIMERINDEX_MASTER);
#else
      HAL_HRTIM_RegistersUpdateCallback(hhrtim, HRTIM_TIMERINDEX_MASTER);
 8008ae8:	2105      	movs	r1, #5
 8008aea:	6878      	ldr	r0, [r7, #4]
 8008aec:	f7ff fb13 	bl	8008116 <HAL_HRTIM_RegistersUpdateCallback>
#endif /* USE_HAL_HRTIM_REGISTER_CALLBACKS */
    }
  }
}
 8008af0:	bf00      	nop
 8008af2:	3718      	adds	r7, #24
 8008af4:	46bd      	mov	sp, r7
 8008af6:	bd80      	pop	{r7, pc}

08008af8 <HRTIM_Timer_ISR>:
  *                   @arg HRTIM_TIMERINDEX_TIMER_E for timer E
  * @retval None
*/
static void HRTIM_Timer_ISR(HRTIM_HandleTypeDef * hhrtim,
                     uint32_t TimerIdx)
{
 8008af8:	b580      	push	{r7, lr}
 8008afa:	b084      	sub	sp, #16
 8008afc:	af00      	add	r7, sp, #0
 8008afe:	6078      	str	r0, [r7, #4]
 8008b00:	6039      	str	r1, [r7, #0]
  uint32_t tisrflags = READ_REG(hhrtim->Instance->sTimerxRegs[TimerIdx].TIMxISR);
 8008b02:	687b      	ldr	r3, [r7, #4]
 8008b04:	681a      	ldr	r2, [r3, #0]
 8008b06:	683b      	ldr	r3, [r7, #0]
 8008b08:	3301      	adds	r3, #1
 8008b0a:	01db      	lsls	r3, r3, #7
 8008b0c:	4413      	add	r3, r2
 8008b0e:	3304      	adds	r3, #4
 8008b10:	681b      	ldr	r3, [r3, #0]
 8008b12:	60fb      	str	r3, [r7, #12]
  uint32_t tdierits  = READ_REG(hhrtim->Instance->sTimerxRegs[TimerIdx].TIMxDIER);
 8008b14:	687b      	ldr	r3, [r7, #4]
 8008b16:	681a      	ldr	r2, [r3, #0]
 8008b18:	683b      	ldr	r3, [r7, #0]
 8008b1a:	01db      	lsls	r3, r3, #7
 8008b1c:	4413      	add	r3, r2
 8008b1e:	338c      	adds	r3, #140	; 0x8c
 8008b20:	681b      	ldr	r3, [r3, #0]
 8008b22:	60bb      	str	r3, [r7, #8]

  /* Timer compare 1 event */
  if((uint32_t)(tisrflags & HRTIM_TIM_FLAG_CMP1) != (uint32_t)RESET)
 8008b24:	68fb      	ldr	r3, [r7, #12]
 8008b26:	f003 0301 	and.w	r3, r3, #1
 8008b2a:	2b00      	cmp	r3, #0
 8008b2c:	d010      	beq.n	8008b50 <HRTIM_Timer_ISR+0x58>
  {
    if((uint32_t)(tdierits & HRTIM_TIM_IT_CMP1) != (uint32_t)RESET)
 8008b2e:	68bb      	ldr	r3, [r7, #8]
 8008b30:	f003 0301 	and.w	r3, r3, #1
 8008b34:	2b00      	cmp	r3, #0
 8008b36:	d00b      	beq.n	8008b50 <HRTIM_Timer_ISR+0x58>
    {
      __HAL_HRTIM_TIMER_CLEAR_IT(hhrtim, TimerIdx, HRTIM_TIM_IT_CMP1);
 8008b38:	687b      	ldr	r3, [r7, #4]
 8008b3a:	681a      	ldr	r2, [r3, #0]
 8008b3c:	683b      	ldr	r3, [r7, #0]
 8008b3e:	01db      	lsls	r3, r3, #7
 8008b40:	4413      	add	r3, r2
 8008b42:	3388      	adds	r3, #136	; 0x88
 8008b44:	2201      	movs	r2, #1
 8008b46:	601a      	str	r2, [r3, #0]

      /* Invoke compare 1 event callback */
#if (USE_HAL_HRTIM_REGISTER_CALLBACKS == 1)
      hhrtim->Compare1EventCallback(hhrtim, TimerIdx);
#else
      HAL_HRTIM_Compare1EventCallback(hhrtim, TimerIdx);
 8008b48:	6839      	ldr	r1, [r7, #0]
 8008b4a:	6878      	ldr	r0, [r7, #4]
 8008b4c:	f7ff faee 	bl	800812c <HAL_HRTIM_Compare1EventCallback>
#endif /* USE_HAL_HRTIM_REGISTER_CALLBACKS */
    }
  }

  /* Timer compare 2 event */
  if((uint32_t)(tisrflags & HRTIM_TIM_FLAG_CMP2) != (uint32_t)RESET)
 8008b50:	68fb      	ldr	r3, [r7, #12]
 8008b52:	f003 0302 	and.w	r3, r3, #2
 8008b56:	2b00      	cmp	r3, #0
 8008b58:	d010      	beq.n	8008b7c <HRTIM_Timer_ISR+0x84>
  {
    if((uint32_t)(tdierits & HRTIM_TIM_IT_CMP2) != (uint32_t)RESET)
 8008b5a:	68bb      	ldr	r3, [r7, #8]
 8008b5c:	f003 0302 	and.w	r3, r3, #2
 8008b60:	2b00      	cmp	r3, #0
 8008b62:	d00b      	beq.n	8008b7c <HRTIM_Timer_ISR+0x84>
    {
      __HAL_HRTIM_TIMER_CLEAR_IT(hhrtim, TimerIdx, HRTIM_TIM_IT_CMP2);
 8008b64:	687b      	ldr	r3, [r7, #4]
 8008b66:	681a      	ldr	r2, [r3, #0]
 8008b68:	683b      	ldr	r3, [r7, #0]
 8008b6a:	01db      	lsls	r3, r3, #7
 8008b6c:	4413      	add	r3, r2
 8008b6e:	3388      	adds	r3, #136	; 0x88
 8008b70:	2202      	movs	r2, #2
 8008b72:	601a      	str	r2, [r3, #0]

      /* Invoke compare 2 event callback */
#if (USE_HAL_HRTIM_REGISTER_CALLBACKS == 1)
      hhrtim->Compare2EventCallback(hhrtim, TimerIdx);
#else
      HAL_HRTIM_Compare2EventCallback(hhrtim, TimerIdx);
 8008b74:	6839      	ldr	r1, [r7, #0]
 8008b76:	6878      	ldr	r0, [r7, #4]
 8008b78:	f7fa fc64 	bl	8003444 <HAL_HRTIM_Compare2EventCallback>
#endif /* USE_HAL_HRTIM_REGISTER_CALLBACKS */
    }
  }

  /* Timer compare 3 event */
  if((uint32_t)(tisrflags & HRTIM_TIM_FLAG_CMP3) != (uint32_t)RESET)
 8008b7c:	68fb      	ldr	r3, [r7, #12]
 8008b7e:	f003 0304 	and.w	r3, r3, #4
 8008b82:	2b00      	cmp	r3, #0
 8008b84:	d010      	beq.n	8008ba8 <HRTIM_Timer_ISR+0xb0>
  {
    if((uint32_t)(tdierits & HRTIM_TIM_IT_CMP3) != (uint32_t)RESET)
 8008b86:	68bb      	ldr	r3, [r7, #8]
 8008b88:	f003 0304 	and.w	r3, r3, #4
 8008b8c:	2b00      	cmp	r3, #0
 8008b8e:	d00b      	beq.n	8008ba8 <HRTIM_Timer_ISR+0xb0>
    {
      __HAL_HRTIM_TIMER_CLEAR_IT(hhrtim, TimerIdx, HRTIM_TIM_IT_CMP3);
 8008b90:	687b      	ldr	r3, [r7, #4]
 8008b92:	681a      	ldr	r2, [r3, #0]
 8008b94:	683b      	ldr	r3, [r7, #0]
 8008b96:	01db      	lsls	r3, r3, #7
 8008b98:	4413      	add	r3, r2
 8008b9a:	3388      	adds	r3, #136	; 0x88
 8008b9c:	2204      	movs	r2, #4
 8008b9e:	601a      	str	r2, [r3, #0]

      /* Invoke compare 3 event callback */
#if (USE_HAL_HRTIM_REGISTER_CALLBACKS == 1)
      hhrtim->Compare3EventCallback(hhrtim, TimerIdx);
#else
      HAL_HRTIM_Compare3EventCallback(hhrtim, TimerIdx);
 8008ba0:	6839      	ldr	r1, [r7, #0]
 8008ba2:	6878      	ldr	r0, [r7, #4]
 8008ba4:	f7fa fc5a 	bl	800345c <HAL_HRTIM_Compare3EventCallback>
#endif /* USE_HAL_HRTIM_REGISTER_CALLBACKS */
    }
  }

  /* Timer compare 4 event */
  if((uint32_t)(tisrflags & HRTIM_TIM_FLAG_CMP4) != (uint32_t)RESET)
 8008ba8:	68fb      	ldr	r3, [r7, #12]
 8008baa:	f003 0308 	and.w	r3, r3, #8
 8008bae:	2b00      	cmp	r3, #0
 8008bb0:	d010      	beq.n	8008bd4 <HRTIM_Timer_ISR+0xdc>
  {
    if((uint32_t)(tdierits & HRTIM_TIM_IT_CMP4) != (uint32_t)RESET)
 8008bb2:	68bb      	ldr	r3, [r7, #8]
 8008bb4:	f003 0308 	and.w	r3, r3, #8
 8008bb8:	2b00      	cmp	r3, #0
 8008bba:	d00b      	beq.n	8008bd4 <HRTIM_Timer_ISR+0xdc>
    {
      __HAL_HRTIM_TIMER_CLEAR_IT(hhrtim, TimerIdx, HRTIM_TIM_IT_CMP4);
 8008bbc:	687b      	ldr	r3, [r7, #4]
 8008bbe:	681a      	ldr	r2, [r3, #0]
 8008bc0:	683b      	ldr	r3, [r7, #0]
 8008bc2:	01db      	lsls	r3, r3, #7
 8008bc4:	4413      	add	r3, r2
 8008bc6:	3388      	adds	r3, #136	; 0x88
 8008bc8:	2208      	movs	r2, #8
 8008bca:	601a      	str	r2, [r3, #0]

      /* Invoke compare 4 event callback */
#if (USE_HAL_HRTIM_REGISTER_CALLBACKS == 1)
      hhrtim->Compare4EventCallback(hhrtim, TimerIdx);
#else
      HAL_HRTIM_Compare4EventCallback(hhrtim, TimerIdx);
 8008bcc:	6839      	ldr	r1, [r7, #0]
 8008bce:	6878      	ldr	r0, [r7, #4]
 8008bd0:	f7ff fab7 	bl	8008142 <HAL_HRTIM_Compare4EventCallback>
#endif /* USE_HAL_HRTIM_REGISTER_CALLBACKS */
    }
  }

  /* Timer repetition event */
  if((uint32_t)(tisrflags & HRTIM_TIM_FLAG_REP) != (uint32_t)RESET)
 8008bd4:	68fb      	ldr	r3, [r7, #12]
 8008bd6:	f003 0310 	and.w	r3, r3, #16
 8008bda:	2b00      	cmp	r3, #0
 8008bdc:	d010      	beq.n	8008c00 <HRTIM_Timer_ISR+0x108>
  {
    if((uint32_t)(tdierits & HRTIM_TIM_IT_REP) != (uint32_t)RESET)
 8008bde:	68bb      	ldr	r3, [r7, #8]
 8008be0:	f003 0310 	and.w	r3, r3, #16
 8008be4:	2b00      	cmp	r3, #0
 8008be6:	d00b      	beq.n	8008c00 <HRTIM_Timer_ISR+0x108>
    {
      __HAL_HRTIM_TIMER_CLEAR_IT(hhrtim, TimerIdx, HRTIM_TIM_IT_REP);
 8008be8:	687b      	ldr	r3, [r7, #4]
 8008bea:	681a      	ldr	r2, [r3, #0]
 8008bec:	683b      	ldr	r3, [r7, #0]
 8008bee:	01db      	lsls	r3, r3, #7
 8008bf0:	4413      	add	r3, r2
 8008bf2:	3388      	adds	r3, #136	; 0x88
 8008bf4:	2210      	movs	r2, #16
 8008bf6:	601a      	str	r2, [r3, #0]

      /* Invoke repetition event callback */
#if (USE_HAL_HRTIM_REGISTER_CALLBACKS == 1)
      hhrtim->RepetitionEventCallback(hhrtim, TimerIdx);
#else
      HAL_HRTIM_RepetitionEventCallback(hhrtim, TimerIdx);
 8008bf8:	6839      	ldr	r1, [r7, #0]
 8008bfa:	6878      	ldr	r0, [r7, #4]
 8008bfc:	f7fa fca2 	bl	8003544 <HAL_HRTIM_RepetitionEventCallback>
#endif /* USE_HAL_HRTIM_REGISTER_CALLBACKS */
    }
  }

  /* Timer registers update event */
  if((uint32_t)(tisrflags & HRTIM_TIM_FLAG_UPD) != (uint32_t)RESET)
 8008c00:	68fb      	ldr	r3, [r7, #12]
 8008c02:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008c06:	2b00      	cmp	r3, #0
 8008c08:	d010      	beq.n	8008c2c <HRTIM_Timer_ISR+0x134>
  {
    if((uint32_t)(tdierits & HRTIM_TIM_IT_UPD) != (uint32_t)RESET)
 8008c0a:	68bb      	ldr	r3, [r7, #8]
 8008c0c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008c10:	2b00      	cmp	r3, #0
 8008c12:	d00b      	beq.n	8008c2c <HRTIM_Timer_ISR+0x134>
    {
      __HAL_HRTIM_TIMER_CLEAR_IT(hhrtim, TimerIdx, HRTIM_TIM_IT_UPD);
 8008c14:	687b      	ldr	r3, [r7, #4]
 8008c16:	681a      	ldr	r2, [r3, #0]
 8008c18:	683b      	ldr	r3, [r7, #0]
 8008c1a:	01db      	lsls	r3, r3, #7
 8008c1c:	4413      	add	r3, r2
 8008c1e:	3388      	adds	r3, #136	; 0x88
 8008c20:	2240      	movs	r2, #64	; 0x40
 8008c22:	601a      	str	r2, [r3, #0]

      /* Invoke registers update event callback */
#if (USE_HAL_HRTIM_REGISTER_CALLBACKS == 1)
      hhrtim->RegistersUpdateCallback(hhrtim, TimerIdx);
#else
      HAL_HRTIM_RegistersUpdateCallback(hhrtim, TimerIdx);
 8008c24:	6839      	ldr	r1, [r7, #0]
 8008c26:	6878      	ldr	r0, [r7, #4]
 8008c28:	f7ff fa75 	bl	8008116 <HAL_HRTIM_RegistersUpdateCallback>
#endif /* USE_HAL_HRTIM_REGISTER_CALLBACKS */
    }
  }

  /* Timer capture 1 event */
  if((uint32_t)(tisrflags & HRTIM_TIM_FLAG_CPT1) != (uint32_t)RESET)
 8008c2c:	68fb      	ldr	r3, [r7, #12]
 8008c2e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008c32:	2b00      	cmp	r3, #0
 8008c34:	d010      	beq.n	8008c58 <HRTIM_Timer_ISR+0x160>
  {
    if((uint32_t)(tdierits & HRTIM_TIM_IT_CPT1) != (uint32_t)RESET)
 8008c36:	68bb      	ldr	r3, [r7, #8]
 8008c38:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008c3c:	2b00      	cmp	r3, #0
 8008c3e:	d00b      	beq.n	8008c58 <HRTIM_Timer_ISR+0x160>
    {
      __HAL_HRTIM_TIMER_CLEAR_IT(hhrtim, TimerIdx, HRTIM_TIM_IT_CPT1);
 8008c40:	687b      	ldr	r3, [r7, #4]
 8008c42:	681a      	ldr	r2, [r3, #0]
 8008c44:	683b      	ldr	r3, [r7, #0]
 8008c46:	01db      	lsls	r3, r3, #7
 8008c48:	4413      	add	r3, r2
 8008c4a:	3388      	adds	r3, #136	; 0x88
 8008c4c:	2280      	movs	r2, #128	; 0x80
 8008c4e:	601a      	str	r2, [r3, #0]

      /* Invoke capture 1 event callback */
#if (USE_HAL_HRTIM_REGISTER_CALLBACKS == 1)
      hhrtim->Capture1EventCallback(hhrtim, TimerIdx);
#else
      HAL_HRTIM_Capture1EventCallback(hhrtim, TimerIdx);
 8008c50:	6839      	ldr	r1, [r7, #0]
 8008c52:	6878      	ldr	r0, [r7, #4]
 8008c54:	f7ff fa80 	bl	8008158 <HAL_HRTIM_Capture1EventCallback>
#endif /* USE_HAL_HRTIM_REGISTER_CALLBACKS */
    }
  }

  /* Timer capture 2 event */
  if((uint32_t)(tisrflags & HRTIM_TIM_FLAG_CPT2) != (uint32_t)RESET)
 8008c58:	68fb      	ldr	r3, [r7, #12]
 8008c5a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008c5e:	2b00      	cmp	r3, #0
 8008c60:	d011      	beq.n	8008c86 <HRTIM_Timer_ISR+0x18e>
  {
    if((uint32_t)(tdierits & HRTIM_TIM_IT_CPT2) != (uint32_t)RESET)
 8008c62:	68bb      	ldr	r3, [r7, #8]
 8008c64:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008c68:	2b00      	cmp	r3, #0
 8008c6a:	d00c      	beq.n	8008c86 <HRTIM_Timer_ISR+0x18e>
    {
      __HAL_HRTIM_TIMER_CLEAR_IT(hhrtim, TimerIdx, HRTIM_TIM_IT_CPT2);
 8008c6c:	687b      	ldr	r3, [r7, #4]
 8008c6e:	681a      	ldr	r2, [r3, #0]
 8008c70:	683b      	ldr	r3, [r7, #0]
 8008c72:	01db      	lsls	r3, r3, #7
 8008c74:	4413      	add	r3, r2
 8008c76:	3388      	adds	r3, #136	; 0x88
 8008c78:	f44f 7280 	mov.w	r2, #256	; 0x100
 8008c7c:	601a      	str	r2, [r3, #0]

      /* Invoke capture 2 event callback */
#if (USE_HAL_HRTIM_REGISTER_CALLBACKS == 1)
      hhrtim->Capture2EventCallback(hhrtim, TimerIdx);
#else
      HAL_HRTIM_Capture2EventCallback(hhrtim, TimerIdx);
 8008c7e:	6839      	ldr	r1, [r7, #0]
 8008c80:	6878      	ldr	r0, [r7, #4]
 8008c82:	f7ff fa74 	bl	800816e <HAL_HRTIM_Capture2EventCallback>
#endif /* USE_HAL_HRTIM_REGISTER_CALLBACKS */
    }
  }

  /* Timer output 1 set event */
  if((uint32_t)(tisrflags & HRTIM_TIM_FLAG_SET1) != (uint32_t)RESET)
 8008c86:	68fb      	ldr	r3, [r7, #12]
 8008c88:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8008c8c:	2b00      	cmp	r3, #0
 8008c8e:	d011      	beq.n	8008cb4 <HRTIM_Timer_ISR+0x1bc>
  {
    if((uint32_t)(tdierits & HRTIM_TIM_IT_SET1) != (uint32_t)RESET)
 8008c90:	68bb      	ldr	r3, [r7, #8]
 8008c92:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8008c96:	2b00      	cmp	r3, #0
 8008c98:	d00c      	beq.n	8008cb4 <HRTIM_Timer_ISR+0x1bc>
    {
      __HAL_HRTIM_TIMER_CLEAR_IT(hhrtim, TimerIdx, HRTIM_TIM_IT_SET1);
 8008c9a:	687b      	ldr	r3, [r7, #4]
 8008c9c:	681a      	ldr	r2, [r3, #0]
 8008c9e:	683b      	ldr	r3, [r7, #0]
 8008ca0:	01db      	lsls	r3, r3, #7
 8008ca2:	4413      	add	r3, r2
 8008ca4:	3388      	adds	r3, #136	; 0x88
 8008ca6:	f44f 7200 	mov.w	r2, #512	; 0x200
 8008caa:	601a      	str	r2, [r3, #0]

      /* Invoke output 1 set event callback */
#if (USE_HAL_HRTIM_REGISTER_CALLBACKS == 1)
      hhrtim->Output1SetCallback(hhrtim, TimerIdx);
#else
      HAL_HRTIM_Output1SetCallback(hhrtim, TimerIdx);
 8008cac:	6839      	ldr	r1, [r7, #0]
 8008cae:	6878      	ldr	r0, [r7, #4]
 8008cb0:	f7ff fa7e 	bl	80081b0 <HAL_HRTIM_Output1SetCallback>
#endif /* USE_HAL_HRTIM_REGISTER_CALLBACKS */
    }
  }

  /* Timer output 1 reset event */
  if((uint32_t)(tisrflags & HRTIM_TIM_FLAG_RST1) != (uint32_t)RESET)
 8008cb4:	68fb      	ldr	r3, [r7, #12]
 8008cb6:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8008cba:	2b00      	cmp	r3, #0
 8008cbc:	d011      	beq.n	8008ce2 <HRTIM_Timer_ISR+0x1ea>
  {
    if((uint32_t)(tdierits & HRTIM_TIM_IT_RST1) != (uint32_t)RESET)
 8008cbe:	68bb      	ldr	r3, [r7, #8]
 8008cc0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8008cc4:	2b00      	cmp	r3, #0
 8008cc6:	d00c      	beq.n	8008ce2 <HRTIM_Timer_ISR+0x1ea>
    {
      __HAL_HRTIM_TIMER_CLEAR_IT(hhrtim, TimerIdx, HRTIM_TIM_IT_RST1);
 8008cc8:	687b      	ldr	r3, [r7, #4]
 8008cca:	681a      	ldr	r2, [r3, #0]
 8008ccc:	683b      	ldr	r3, [r7, #0]
 8008cce:	01db      	lsls	r3, r3, #7
 8008cd0:	4413      	add	r3, r2
 8008cd2:	3388      	adds	r3, #136	; 0x88
 8008cd4:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8008cd8:	601a      	str	r2, [r3, #0]

      /* Invoke output 1 reset event callback */
#if (USE_HAL_HRTIM_REGISTER_CALLBACKS == 1)
      hhrtim->Output1ResetCallback(hhrtim, TimerIdx);
#else
      HAL_HRTIM_Output1ResetCallback(hhrtim, TimerIdx);
 8008cda:	6839      	ldr	r1, [r7, #0]
 8008cdc:	6878      	ldr	r0, [r7, #4]
 8008cde:	f7ff fa72 	bl	80081c6 <HAL_HRTIM_Output1ResetCallback>
#endif /* USE_HAL_HRTIM_REGISTER_CALLBACKS */
    }
  }

  /* Timer output 2 set event */
  if((uint32_t)(tisrflags & HRTIM_TIM_FLAG_SET2) != (uint32_t)RESET)
 8008ce2:	68fb      	ldr	r3, [r7, #12]
 8008ce4:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8008ce8:	2b00      	cmp	r3, #0
 8008cea:	d011      	beq.n	8008d10 <HRTIM_Timer_ISR+0x218>
  {
    if((uint32_t)(tdierits & HRTIM_TIM_IT_SET2) != (uint32_t)RESET)
 8008cec:	68bb      	ldr	r3, [r7, #8]
 8008cee:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8008cf2:	2b00      	cmp	r3, #0
 8008cf4:	d00c      	beq.n	8008d10 <HRTIM_Timer_ISR+0x218>
    {
      __HAL_HRTIM_TIMER_CLEAR_IT(hhrtim, TimerIdx, HRTIM_TIM_IT_SET2);
 8008cf6:	687b      	ldr	r3, [r7, #4]
 8008cf8:	681a      	ldr	r2, [r3, #0]
 8008cfa:	683b      	ldr	r3, [r7, #0]
 8008cfc:	01db      	lsls	r3, r3, #7
 8008cfe:	4413      	add	r3, r2
 8008d00:	3388      	adds	r3, #136	; 0x88
 8008d02:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8008d06:	601a      	str	r2, [r3, #0]

      /* Invoke output 2 set event callback */
#if (USE_HAL_HRTIM_REGISTER_CALLBACKS == 1)
      hhrtim->Output2SetCallback(hhrtim, TimerIdx);
#else
      HAL_HRTIM_Output2SetCallback(hhrtim, TimerIdx);
 8008d08:	6839      	ldr	r1, [r7, #0]
 8008d0a:	6878      	ldr	r0, [r7, #4]
 8008d0c:	f7ff fa66 	bl	80081dc <HAL_HRTIM_Output2SetCallback>
#endif /* USE_HAL_HRTIM_REGISTER_CALLBACKS */
    }
  }

  /* Timer output 2 reset event */
  if((uint32_t)(tisrflags & HRTIM_TIM_FLAG_RST2) != (uint32_t)RESET)
 8008d10:	68fb      	ldr	r3, [r7, #12]
 8008d12:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8008d16:	2b00      	cmp	r3, #0
 8008d18:	d011      	beq.n	8008d3e <HRTIM_Timer_ISR+0x246>
  {
    if((uint32_t)(tdierits & HRTIM_TIM_IT_RST2) != (uint32_t)RESET)
 8008d1a:	68bb      	ldr	r3, [r7, #8]
 8008d1c:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8008d20:	2b00      	cmp	r3, #0
 8008d22:	d00c      	beq.n	8008d3e <HRTIM_Timer_ISR+0x246>
    {
      __HAL_HRTIM_TIMER_CLEAR_IT(hhrtim, TimerIdx, HRTIM_TIM_IT_RST2);
 8008d24:	687b      	ldr	r3, [r7, #4]
 8008d26:	681a      	ldr	r2, [r3, #0]
 8008d28:	683b      	ldr	r3, [r7, #0]
 8008d2a:	01db      	lsls	r3, r3, #7
 8008d2c:	4413      	add	r3, r2
 8008d2e:	3388      	adds	r3, #136	; 0x88
 8008d30:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8008d34:	601a      	str	r2, [r3, #0]

      /* Invoke output 2 reset event callback */
#if (USE_HAL_HRTIM_REGISTER_CALLBACKS == 1)
      hhrtim->Output2ResetCallback(hhrtim, TimerIdx);
#else
      HAL_HRTIM_Output2ResetCallback(hhrtim, TimerIdx);
 8008d36:	6839      	ldr	r1, [r7, #0]
 8008d38:	6878      	ldr	r0, [r7, #4]
 8008d3a:	f7ff fa5a 	bl	80081f2 <HAL_HRTIM_Output2ResetCallback>
#endif /* USE_HAL_HRTIM_REGISTER_CALLBACKS */
    }
  }

  /* Timer reset event */
  if((uint32_t)(tisrflags & HRTIM_TIM_FLAG_RST) != (uint32_t)RESET)
 8008d3e:	68fb      	ldr	r3, [r7, #12]
 8008d40:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8008d44:	2b00      	cmp	r3, #0
 8008d46:	d011      	beq.n	8008d6c <HRTIM_Timer_ISR+0x274>
  {
    if((uint32_t)(tdierits & HRTIM_TIM_IT_RST) != (uint32_t)RESET)
 8008d48:	68bb      	ldr	r3, [r7, #8]
 8008d4a:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8008d4e:	2b00      	cmp	r3, #0
 8008d50:	d00c      	beq.n	8008d6c <HRTIM_Timer_ISR+0x274>
    {
      __HAL_HRTIM_TIMER_CLEAR_IT(hhrtim, TimerIdx, HRTIM_TIM_IT_RST);
 8008d52:	687b      	ldr	r3, [r7, #4]
 8008d54:	681a      	ldr	r2, [r3, #0]
 8008d56:	683b      	ldr	r3, [r7, #0]
 8008d58:	01db      	lsls	r3, r3, #7
 8008d5a:	4413      	add	r3, r2
 8008d5c:	3388      	adds	r3, #136	; 0x88
 8008d5e:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8008d62:	601a      	str	r2, [r3, #0]

      /* Invoke timer reset callback */
#if (USE_HAL_HRTIM_REGISTER_CALLBACKS == 1)
      hhrtim->CounterResetCallback(hhrtim, TimerIdx);
#else
      HAL_HRTIM_CounterResetCallback(hhrtim, TimerIdx);
 8008d64:	6839      	ldr	r1, [r7, #0]
 8008d66:	6878      	ldr	r0, [r7, #4]
 8008d68:	f7ff fa17 	bl	800819a <HAL_HRTIM_CounterResetCallback>
#endif /* USE_HAL_HRTIM_REGISTER_CALLBACKS */
    }
  }

  /* Delayed protection event */
  if((uint32_t)(tisrflags & HRTIM_TIM_FLAG_DLYPRT) != (uint32_t)RESET)
 8008d6c:	68fb      	ldr	r3, [r7, #12]
 8008d6e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8008d72:	2b00      	cmp	r3, #0
 8008d74:	d011      	beq.n	8008d9a <HRTIM_Timer_ISR+0x2a2>
  {
    if((uint32_t)(tdierits & HRTIM_TIM_IT_DLYPRT) != (uint32_t)RESET)
 8008d76:	68bb      	ldr	r3, [r7, #8]
 8008d78:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8008d7c:	2b00      	cmp	r3, #0
 8008d7e:	d00c      	beq.n	8008d9a <HRTIM_Timer_ISR+0x2a2>
    {
      __HAL_HRTIM_TIMER_CLEAR_IT(hhrtim, TimerIdx, HRTIM_TIM_IT_DLYPRT);
 8008d80:	687b      	ldr	r3, [r7, #4]
 8008d82:	681a      	ldr	r2, [r3, #0]
 8008d84:	683b      	ldr	r3, [r7, #0]
 8008d86:	01db      	lsls	r3, r3, #7
 8008d88:	4413      	add	r3, r2
 8008d8a:	3388      	adds	r3, #136	; 0x88
 8008d8c:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8008d90:	601a      	str	r2, [r3, #0]

      /* Invoke delayed protection callback */
#if (USE_HAL_HRTIM_REGISTER_CALLBACKS == 1)
      hhrtim->DelayedProtectionCallback(hhrtim, TimerIdx);
#else
      HAL_HRTIM_DelayedProtectionCallback(hhrtim, TimerIdx);
 8008d92:	6839      	ldr	r1, [r7, #0]
 8008d94:	6878      	ldr	r0, [r7, #4]
 8008d96:	f7ff f9f5 	bl	8008184 <HAL_HRTIM_DelayedProtectionCallback>
#endif /* USE_HAL_HRTIM_REGISTER_CALLBACKS */
    }
  }
}
 8008d9a:	bf00      	nop
 8008d9c:	3710      	adds	r7, #16
 8008d9e:	46bd      	mov	sp, r7
 8008da0:	bd80      	pop	{r7, pc}
	...

08008da4 <HAL_LPTIM_Init>:
  *         LPTIM_InitTypeDef and initialize the associated handle.
  * @param  hlptim LPTIM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_LPTIM_Init(LPTIM_HandleTypeDef *hlptim)
{
 8008da4:	b580      	push	{r7, lr}
 8008da6:	b084      	sub	sp, #16
 8008da8:	af00      	add	r7, sp, #0
 8008daa:	6078      	str	r0, [r7, #4]
  uint32_t tmpcfgr;

  /* Check the LPTIM handle allocation */
  if (hlptim == NULL)
 8008dac:	687b      	ldr	r3, [r7, #4]
 8008dae:	2b00      	cmp	r3, #0
 8008db0:	d101      	bne.n	8008db6 <HAL_LPTIM_Init+0x12>
  {
    return HAL_ERROR;
 8008db2:	2301      	movs	r3, #1
 8008db4:	e097      	b.n	8008ee6 <HAL_LPTIM_Init+0x142>
  /* Check the parameters */
  assert_param(IS_LPTIM_INSTANCE(hlptim->Instance));

  assert_param(IS_LPTIM_CLOCK_SOURCE(hlptim->Init.Clock.Source));
  assert_param(IS_LPTIM_CLOCK_PRESCALER(hlptim->Init.Clock.Prescaler));
  if ((hlptim->Init.Clock.Source == LPTIM_CLOCKSOURCE_ULPTIM)
 8008db6:	687b      	ldr	r3, [r7, #4]
 8008db8:	685b      	ldr	r3, [r3, #4]
 8008dba:	2b01      	cmp	r3, #1
  }
  assert_param(IS_LPTIM_OUTPUT_POLARITY(hlptim->Init.OutputPolarity));
  assert_param(IS_LPTIM_UPDATE_MODE(hlptim->Init.UpdateMode));
  assert_param(IS_LPTIM_COUNTER_SOURCE(hlptim->Init.CounterSource));

  if (hlptim->State == HAL_LPTIM_STATE_RESET)
 8008dbc:	687b      	ldr	r3, [r7, #4]
 8008dbe:	f893 3036 	ldrb.w	r3, [r3, #54]	; 0x36
 8008dc2:	b2db      	uxtb	r3, r3
 8008dc4:	2b00      	cmp	r3, #0
 8008dc6:	d106      	bne.n	8008dd6 <HAL_LPTIM_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hlptim->Lock = HAL_UNLOCKED;
 8008dc8:	687b      	ldr	r3, [r7, #4]
 8008dca:	2200      	movs	r2, #0
 8008dcc:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hlptim->MspInitCallback(hlptim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_LPTIM_MspInit(hlptim);
 8008dd0:	6878      	ldr	r0, [r7, #4]
 8008dd2:	f7fa f849 	bl	8002e68 <HAL_LPTIM_MspInit>
#endif /* USE_HAL_LPTIM_REGISTER_CALLBACKS */
  }

  /* Change the LPTIM state */
  hlptim->State = HAL_LPTIM_STATE_BUSY;
 8008dd6:	687b      	ldr	r3, [r7, #4]
 8008dd8:	2202      	movs	r2, #2
 8008dda:	f883 2036 	strb.w	r2, [r3, #54]	; 0x36

  /* Get the LPTIMx CFGR value */
  tmpcfgr = hlptim->Instance->CFGR;
 8008dde:	687b      	ldr	r3, [r7, #4]
 8008de0:	681b      	ldr	r3, [r3, #0]
 8008de2:	68db      	ldr	r3, [r3, #12]
 8008de4:	60fb      	str	r3, [r7, #12]

  if ((hlptim->Init.Clock.Source == LPTIM_CLOCKSOURCE_ULPTIM)
 8008de6:	687b      	ldr	r3, [r7, #4]
 8008de8:	685b      	ldr	r3, [r3, #4]
 8008dea:	2b01      	cmp	r3, #1
 8008dec:	d004      	beq.n	8008df8 <HAL_LPTIM_Init+0x54>
      || (hlptim->Init.CounterSource == LPTIM_COUNTERSOURCE_EXTERNAL))
 8008dee:	687b      	ldr	r3, [r7, #4]
 8008df0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008df2:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8008df6:	d103      	bne.n	8008e00 <HAL_LPTIM_Init+0x5c>
  {
    tmpcfgr &= (uint32_t)(~(LPTIM_CFGR_CKPOL | LPTIM_CFGR_CKFLT));
 8008df8:	68fb      	ldr	r3, [r7, #12]
 8008dfa:	f023 031e 	bic.w	r3, r3, #30
 8008dfe:	60fb      	str	r3, [r7, #12]
  }
  if (hlptim->Init.Trigger.Source != LPTIM_TRIGSOURCE_SOFTWARE)
 8008e00:	687b      	ldr	r3, [r7, #4]
 8008e02:	695b      	ldr	r3, [r3, #20]
 8008e04:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8008e08:	4293      	cmp	r3, r2
 8008e0a:	d003      	beq.n	8008e14 <HAL_LPTIM_Init+0x70>
  {
    tmpcfgr &= (uint32_t)(~(LPTIM_CFGR_TRGFLT | LPTIM_CFGR_TRIGSEL));
 8008e0c:	68fa      	ldr	r2, [r7, #12]
 8008e0e:	4b38      	ldr	r3, [pc, #224]	; (8008ef0 <HAL_LPTIM_Init+0x14c>)
 8008e10:	4013      	ands	r3, r2
 8008e12:	60fb      	str	r3, [r7, #12]
  }

  /* Clear CKSEL, PRESC, TRIGEN, TRGFLT, WAVPOL, PRELOAD & COUNTMODE bits */
  tmpcfgr &= (uint32_t)(~(LPTIM_CFGR_CKSEL | LPTIM_CFGR_TRIGEN | LPTIM_CFGR_PRELOAD |
 8008e14:	68fa      	ldr	r2, [r7, #12]
 8008e16:	4b37      	ldr	r3, [pc, #220]	; (8008ef4 <HAL_LPTIM_Init+0x150>)
 8008e18:	4013      	ands	r3, r2
 8008e1a:	60fb      	str	r3, [r7, #12]
                          LPTIM_CFGR_WAVPOL | LPTIM_CFGR_PRESC | LPTIM_CFGR_COUNTMODE));

  /* Set initialization parameters */
  tmpcfgr |= (hlptim->Init.Clock.Source    |
 8008e1c:	687b      	ldr	r3, [r7, #4]
 8008e1e:	685a      	ldr	r2, [r3, #4]
              hlptim->Init.Clock.Prescaler |
 8008e20:	687b      	ldr	r3, [r7, #4]
 8008e22:	689b      	ldr	r3, [r3, #8]
  tmpcfgr |= (hlptim->Init.Clock.Source    |
 8008e24:	431a      	orrs	r2, r3
              hlptim->Init.OutputPolarity  |
 8008e26:	687b      	ldr	r3, [r7, #4]
 8008e28:	6a1b      	ldr	r3, [r3, #32]
              hlptim->Init.Clock.Prescaler |
 8008e2a:	431a      	orrs	r2, r3
              hlptim->Init.UpdateMode      |
 8008e2c:	687b      	ldr	r3, [r7, #4]
 8008e2e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
              hlptim->Init.OutputPolarity  |
 8008e30:	431a      	orrs	r2, r3
              hlptim->Init.CounterSource);
 8008e32:	687b      	ldr	r3, [r7, #4]
 8008e34:	6a9b      	ldr	r3, [r3, #40]	; 0x28
              hlptim->Init.UpdateMode      |
 8008e36:	4313      	orrs	r3, r2
  tmpcfgr |= (hlptim->Init.Clock.Source    |
 8008e38:	68fa      	ldr	r2, [r7, #12]
 8008e3a:	4313      	orrs	r3, r2
 8008e3c:	60fb      	str	r3, [r7, #12]

  /* Glitch filters for internal triggers and  external inputs are configured
   * only if an internal clock source is provided to the LPTIM
   */
  if (hlptim->Init.Clock.Source == LPTIM_CLOCKSOURCE_APBCLOCK_LPOSC)
 8008e3e:	687b      	ldr	r3, [r7, #4]
 8008e40:	685b      	ldr	r3, [r3, #4]
 8008e42:	2b00      	cmp	r3, #0
 8008e44:	d107      	bne.n	8008e56 <HAL_LPTIM_Init+0xb2>
  {
    tmpcfgr |= (hlptim->Init.Trigger.SampleTime |
 8008e46:	687b      	ldr	r3, [r7, #4]
 8008e48:	69da      	ldr	r2, [r3, #28]
                hlptim->Init.UltraLowPowerClock.SampleTime);
 8008e4a:	687b      	ldr	r3, [r7, #4]
 8008e4c:	691b      	ldr	r3, [r3, #16]
    tmpcfgr |= (hlptim->Init.Trigger.SampleTime |
 8008e4e:	4313      	orrs	r3, r2
 8008e50:	68fa      	ldr	r2, [r7, #12]
 8008e52:	4313      	orrs	r3, r2
 8008e54:	60fb      	str	r3, [r7, #12]
  }

  /* Configure LPTIM external clock polarity and digital filter */
  if ((hlptim->Init.Clock.Source == LPTIM_CLOCKSOURCE_ULPTIM)
 8008e56:	687b      	ldr	r3, [r7, #4]
 8008e58:	685b      	ldr	r3, [r3, #4]
 8008e5a:	2b01      	cmp	r3, #1
 8008e5c:	d004      	beq.n	8008e68 <HAL_LPTIM_Init+0xc4>
      || (hlptim->Init.CounterSource == LPTIM_COUNTERSOURCE_EXTERNAL))
 8008e5e:	687b      	ldr	r3, [r7, #4]
 8008e60:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008e62:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8008e66:	d107      	bne.n	8008e78 <HAL_LPTIM_Init+0xd4>
  {
    tmpcfgr |= (hlptim->Init.UltraLowPowerClock.Polarity |
 8008e68:	687b      	ldr	r3, [r7, #4]
 8008e6a:	68da      	ldr	r2, [r3, #12]
                hlptim->Init.UltraLowPowerClock.SampleTime);
 8008e6c:	687b      	ldr	r3, [r7, #4]
 8008e6e:	691b      	ldr	r3, [r3, #16]
    tmpcfgr |= (hlptim->Init.UltraLowPowerClock.Polarity |
 8008e70:	4313      	orrs	r3, r2
 8008e72:	68fa      	ldr	r2, [r7, #12]
 8008e74:	4313      	orrs	r3, r2
 8008e76:	60fb      	str	r3, [r7, #12]
  }

  /* Configure LPTIM external trigger */
  if (hlptim->Init.Trigger.Source != LPTIM_TRIGSOURCE_SOFTWARE)
 8008e78:	687b      	ldr	r3, [r7, #4]
 8008e7a:	695b      	ldr	r3, [r3, #20]
 8008e7c:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8008e80:	4293      	cmp	r3, r2
 8008e82:	d00a      	beq.n	8008e9a <HAL_LPTIM_Init+0xf6>
  {
    /* Enable External trigger and set the trigger source */
    tmpcfgr |= (hlptim->Init.Trigger.Source     |
 8008e84:	687b      	ldr	r3, [r7, #4]
 8008e86:	695a      	ldr	r2, [r3, #20]
                hlptim->Init.Trigger.ActiveEdge |
 8008e88:	687b      	ldr	r3, [r7, #4]
 8008e8a:	699b      	ldr	r3, [r3, #24]
    tmpcfgr |= (hlptim->Init.Trigger.Source     |
 8008e8c:	431a      	orrs	r2, r3
                hlptim->Init.Trigger.SampleTime);
 8008e8e:	687b      	ldr	r3, [r7, #4]
 8008e90:	69db      	ldr	r3, [r3, #28]
                hlptim->Init.Trigger.ActiveEdge |
 8008e92:	4313      	orrs	r3, r2
    tmpcfgr |= (hlptim->Init.Trigger.Source     |
 8008e94:	68fa      	ldr	r2, [r7, #12]
 8008e96:	4313      	orrs	r3, r2
 8008e98:	60fb      	str	r3, [r7, #12]
  }

  /* Write to LPTIMx CFGR */
  hlptim->Instance->CFGR = tmpcfgr;
 8008e9a:	687b      	ldr	r3, [r7, #4]
 8008e9c:	681b      	ldr	r3, [r3, #0]
 8008e9e:	68fa      	ldr	r2, [r7, #12]
 8008ea0:	60da      	str	r2, [r3, #12]

  /* Configure LPTIM input sources */
  if ((hlptim->Instance == LPTIM1) || (hlptim->Instance == LPTIM2))
 8008ea2:	687b      	ldr	r3, [r7, #4]
 8008ea4:	681b      	ldr	r3, [r3, #0]
 8008ea6:	4a14      	ldr	r2, [pc, #80]	; (8008ef8 <HAL_LPTIM_Init+0x154>)
 8008ea8:	4293      	cmp	r3, r2
 8008eaa:	d004      	beq.n	8008eb6 <HAL_LPTIM_Init+0x112>
 8008eac:	687b      	ldr	r3, [r7, #4]
 8008eae:	681b      	ldr	r3, [r3, #0]
 8008eb0:	4a12      	ldr	r2, [pc, #72]	; (8008efc <HAL_LPTIM_Init+0x158>)
 8008eb2:	4293      	cmp	r3, r2
 8008eb4:	d108      	bne.n	8008ec8 <HAL_LPTIM_Init+0x124>
    /* Check LPTIM Input1 and Input2 sources */
    assert_param(IS_LPTIM_INPUT1_SOURCE(hlptim->Instance, hlptim->Init.Input1Source));
    assert_param(IS_LPTIM_INPUT2_SOURCE(hlptim->Instance, hlptim->Init.Input2Source));

    /* Configure LPTIM Input1 and Input2 sources */
    hlptim->Instance->CFGR2 = (hlptim->Init.Input1Source | hlptim->Init.Input2Source);
 8008eb6:	687b      	ldr	r3, [r7, #4]
 8008eb8:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8008eba:	687b      	ldr	r3, [r7, #4]
 8008ebc:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8008ebe:	687b      	ldr	r3, [r7, #4]
 8008ec0:	681b      	ldr	r3, [r3, #0]
 8008ec2:	430a      	orrs	r2, r1
 8008ec4:	625a      	str	r2, [r3, #36]	; 0x24
 8008ec6:	e009      	b.n	8008edc <HAL_LPTIM_Init+0x138>
  }
  else
  {
    if (hlptim->Instance == LPTIM3)
 8008ec8:	687b      	ldr	r3, [r7, #4]
 8008eca:	681b      	ldr	r3, [r3, #0]
 8008ecc:	4a0c      	ldr	r2, [pc, #48]	; (8008f00 <HAL_LPTIM_Init+0x15c>)
 8008ece:	4293      	cmp	r3, r2
 8008ed0:	d104      	bne.n	8008edc <HAL_LPTIM_Init+0x138>
    {
      /* Check LPTIM3 Input1 source */
      assert_param(IS_LPTIM_INPUT1_SOURCE(hlptim->Instance, hlptim->Init.Input1Source));

      /* Configure LPTIM3 Input1 source */
      hlptim->Instance->CFGR2 = hlptim->Init.Input1Source;
 8008ed2:	687b      	ldr	r3, [r7, #4]
 8008ed4:	681b      	ldr	r3, [r3, #0]
 8008ed6:	687a      	ldr	r2, [r7, #4]
 8008ed8:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 8008eda:	625a      	str	r2, [r3, #36]	; 0x24
    }
  }

  /* Change the LPTIM state */
  hlptim->State = HAL_LPTIM_STATE_READY;
 8008edc:	687b      	ldr	r3, [r7, #4]
 8008ede:	2201      	movs	r2, #1
 8008ee0:	f883 2036 	strb.w	r2, [r3, #54]	; 0x36

  /* Return function status */
  return HAL_OK;
 8008ee4:	2300      	movs	r3, #0
}
 8008ee6:	4618      	mov	r0, r3
 8008ee8:	3710      	adds	r7, #16
 8008eea:	46bd      	mov	sp, r7
 8008eec:	bd80      	pop	{r7, pc}
 8008eee:	bf00      	nop
 8008ef0:	ffff1f3f 	.word	0xffff1f3f
 8008ef4:	ff19f1fe 	.word	0xff19f1fe
 8008ef8:	40002400 	.word	0x40002400
 8008efc:	58002400 	.word	0x58002400
 8008f00:	58002800 	.word	0x58002800

08008f04 <HAL_LPTIM_Counter_Start_IT>:
  * @param  Period Specifies the Autoreload value.
  *         This parameter must be a value between 0x0001 and 0xFFFF.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_LPTIM_Counter_Start_IT(LPTIM_HandleTypeDef *hlptim, uint32_t Period)
{
 8008f04:	b580      	push	{r7, lr}
 8008f06:	b082      	sub	sp, #8
 8008f08:	af00      	add	r7, sp, #0
 8008f0a:	6078      	str	r0, [r7, #4]
 8008f0c:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_LPTIM_INSTANCE(hlptim->Instance));
  assert_param(IS_LPTIM_PERIOD(Period));

  /* Set the LPTIM state */
  hlptim->State = HAL_LPTIM_STATE_BUSY;
 8008f0e:	687b      	ldr	r3, [r7, #4]
 8008f10:	2202      	movs	r2, #2
 8008f12:	f883 2036 	strb.w	r2, [r3, #54]	; 0x36

  /* If clock source is not ULPTIM clock and counter source is external, then it must not be prescaled */
  if ((hlptim->Init.Clock.Source != LPTIM_CLOCKSOURCE_ULPTIM)
 8008f16:	687b      	ldr	r3, [r7, #4]
 8008f18:	685b      	ldr	r3, [r3, #4]
 8008f1a:	2b01      	cmp	r3, #1
 8008f1c:	d00c      	beq.n	8008f38 <HAL_LPTIM_Counter_Start_IT+0x34>
      && (hlptim->Init.CounterSource == LPTIM_COUNTERSOURCE_EXTERNAL))
 8008f1e:	687b      	ldr	r3, [r7, #4]
 8008f20:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008f22:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8008f26:	d107      	bne.n	8008f38 <HAL_LPTIM_Counter_Start_IT+0x34>
  {
    /* Check if clock is prescaled */
    assert_param(IS_LPTIM_CLOCK_PRESCALERDIV1(hlptim->Init.Clock.Prescaler));
    /* Set clock prescaler to 0 */
    hlptim->Instance->CFGR &= ~LPTIM_CFGR_PRESC;
 8008f28:	687b      	ldr	r3, [r7, #4]
 8008f2a:	681b      	ldr	r3, [r3, #0]
 8008f2c:	68da      	ldr	r2, [r3, #12]
 8008f2e:	687b      	ldr	r3, [r7, #4]
 8008f30:	681b      	ldr	r3, [r3, #0]
 8008f32:	f422 6260 	bic.w	r2, r2, #3584	; 0xe00
 8008f36:	60da      	str	r2, [r3, #12]
  }

  /* Enable the Peripheral */
  __HAL_LPTIM_ENABLE(hlptim);
 8008f38:	687b      	ldr	r3, [r7, #4]
 8008f3a:	681b      	ldr	r3, [r3, #0]
 8008f3c:	691a      	ldr	r2, [r3, #16]
 8008f3e:	687b      	ldr	r3, [r7, #4]
 8008f40:	681b      	ldr	r3, [r3, #0]
 8008f42:	f042 0201 	orr.w	r2, r2, #1
 8008f46:	611a      	str	r2, [r3, #16]

  /* Clear flag */
  __HAL_LPTIM_CLEAR_FLAG(hlptim, LPTIM_FLAG_ARROK);
 8008f48:	687b      	ldr	r3, [r7, #4]
 8008f4a:	681b      	ldr	r3, [r3, #0]
 8008f4c:	2210      	movs	r2, #16
 8008f4e:	605a      	str	r2, [r3, #4]

  /* Load the period value in the autoreload register */
  __HAL_LPTIM_AUTORELOAD_SET(hlptim, Period);
 8008f50:	687b      	ldr	r3, [r7, #4]
 8008f52:	681b      	ldr	r3, [r3, #0]
 8008f54:	683a      	ldr	r2, [r7, #0]
 8008f56:	619a      	str	r2, [r3, #24]

  /* Wait for the completion of the write operation to the LPTIM_ARR register */
  if (LPTIM_WaitForFlag(hlptim, LPTIM_FLAG_ARROK) == HAL_TIMEOUT)
 8008f58:	2110      	movs	r1, #16
 8008f5a:	6878      	ldr	r0, [r7, #4]
 8008f5c:	f000 f91e 	bl	800919c <LPTIM_WaitForFlag>
 8008f60:	4603      	mov	r3, r0
 8008f62:	2b03      	cmp	r3, #3
 8008f64:	d101      	bne.n	8008f6a <HAL_LPTIM_Counter_Start_IT+0x66>
  {
    return HAL_TIMEOUT;
 8008f66:	2303      	movs	r3, #3
 8008f68:	e02f      	b.n	8008fca <HAL_LPTIM_Counter_Start_IT+0xc6>
  }

  /* Disable the Peripheral */
  __HAL_LPTIM_DISABLE(hlptim);
 8008f6a:	6878      	ldr	r0, [r7, #4]
 8008f6c:	f000 f946 	bl	80091fc <LPTIM_Disable>

  if (HAL_LPTIM_GetState(hlptim) == HAL_LPTIM_STATE_TIMEOUT)
 8008f70:	6878      	ldr	r0, [r7, #4]
 8008f72:	f000 f905 	bl	8009180 <HAL_LPTIM_GetState>
 8008f76:	4603      	mov	r3, r0
 8008f78:	2b03      	cmp	r3, #3
 8008f7a:	d101      	bne.n	8008f80 <HAL_LPTIM_Counter_Start_IT+0x7c>
  {
    return HAL_TIMEOUT;
 8008f7c:	2303      	movs	r3, #3
 8008f7e:	e024      	b.n	8008fca <HAL_LPTIM_Counter_Start_IT+0xc6>
  }

  /* Enable Autoreload write complete interrupt */
  __HAL_LPTIM_ENABLE_IT(hlptim, LPTIM_IT_ARROK);
 8008f80:	687b      	ldr	r3, [r7, #4]
 8008f82:	681b      	ldr	r3, [r3, #0]
 8008f84:	689a      	ldr	r2, [r3, #8]
 8008f86:	687b      	ldr	r3, [r7, #4]
 8008f88:	681b      	ldr	r3, [r3, #0]
 8008f8a:	f042 0210 	orr.w	r2, r2, #16
 8008f8e:	609a      	str	r2, [r3, #8]

  /* Enable Autoreload match interrupt */
  __HAL_LPTIM_ENABLE_IT(hlptim, LPTIM_IT_ARRM);
 8008f90:	687b      	ldr	r3, [r7, #4]
 8008f92:	681b      	ldr	r3, [r3, #0]
 8008f94:	689a      	ldr	r2, [r3, #8]
 8008f96:	687b      	ldr	r3, [r7, #4]
 8008f98:	681b      	ldr	r3, [r3, #0]
 8008f9a:	f042 0202 	orr.w	r2, r2, #2
 8008f9e:	609a      	str	r2, [r3, #8]

  /* Enable the Peripheral */
  __HAL_LPTIM_ENABLE(hlptim);
 8008fa0:	687b      	ldr	r3, [r7, #4]
 8008fa2:	681b      	ldr	r3, [r3, #0]
 8008fa4:	691a      	ldr	r2, [r3, #16]
 8008fa6:	687b      	ldr	r3, [r7, #4]
 8008fa8:	681b      	ldr	r3, [r3, #0]
 8008faa:	f042 0201 	orr.w	r2, r2, #1
 8008fae:	611a      	str	r2, [r3, #16]

  /* Start timer in continuous mode */
  __HAL_LPTIM_START_CONTINUOUS(hlptim);
 8008fb0:	687b      	ldr	r3, [r7, #4]
 8008fb2:	681b      	ldr	r3, [r3, #0]
 8008fb4:	691a      	ldr	r2, [r3, #16]
 8008fb6:	687b      	ldr	r3, [r7, #4]
 8008fb8:	681b      	ldr	r3, [r3, #0]
 8008fba:	f042 0204 	orr.w	r2, r2, #4
 8008fbe:	611a      	str	r2, [r3, #16]

  /* Change the LPTIM state */
  hlptim->State = HAL_LPTIM_STATE_READY;
 8008fc0:	687b      	ldr	r3, [r7, #4]
 8008fc2:	2201      	movs	r2, #1
 8008fc4:	f883 2036 	strb.w	r2, [r3, #54]	; 0x36

  /* Return function status */
  return HAL_OK;
 8008fc8:	2300      	movs	r3, #0
}
 8008fca:	4618      	mov	r0, r3
 8008fcc:	3708      	adds	r7, #8
 8008fce:	46bd      	mov	sp, r7
 8008fd0:	bd80      	pop	{r7, pc}

08008fd2 <HAL_LPTIM_IRQHandler>:
  * @brief  Handle LPTIM interrupt request.
  * @param  hlptim LPTIM handle
  * @retval None
  */
void HAL_LPTIM_IRQHandler(LPTIM_HandleTypeDef *hlptim)
{
 8008fd2:	b580      	push	{r7, lr}
 8008fd4:	b082      	sub	sp, #8
 8008fd6:	af00      	add	r7, sp, #0
 8008fd8:	6078      	str	r0, [r7, #4]
  /* Compare match interrupt */
  if (__HAL_LPTIM_GET_FLAG(hlptim, LPTIM_FLAG_CMPM) != RESET)
 8008fda:	687b      	ldr	r3, [r7, #4]
 8008fdc:	681b      	ldr	r3, [r3, #0]
 8008fde:	681b      	ldr	r3, [r3, #0]
 8008fe0:	f003 0301 	and.w	r3, r3, #1
 8008fe4:	2b01      	cmp	r3, #1
 8008fe6:	d10d      	bne.n	8009004 <HAL_LPTIM_IRQHandler+0x32>
  {
    if (__HAL_LPTIM_GET_IT_SOURCE(hlptim, LPTIM_IT_CMPM) != RESET)
 8008fe8:	687b      	ldr	r3, [r7, #4]
 8008fea:	681b      	ldr	r3, [r3, #0]
 8008fec:	689b      	ldr	r3, [r3, #8]
 8008fee:	f003 0301 	and.w	r3, r3, #1
 8008ff2:	2b01      	cmp	r3, #1
 8008ff4:	d106      	bne.n	8009004 <HAL_LPTIM_IRQHandler+0x32>
    {
      /* Clear Compare match flag */
      __HAL_LPTIM_CLEAR_FLAG(hlptim, LPTIM_FLAG_CMPM);
 8008ff6:	687b      	ldr	r3, [r7, #4]
 8008ff8:	681b      	ldr	r3, [r3, #0]
 8008ffa:	2201      	movs	r2, #1
 8008ffc:	605a      	str	r2, [r3, #4]

      /* Compare match Callback */
#if (USE_HAL_LPTIM_REGISTER_CALLBACKS == 1)
      hlptim->CompareMatchCallback(hlptim);
#else
      HAL_LPTIM_CompareMatchCallback(hlptim);
 8008ffe:	6878      	ldr	r0, [r7, #4]
 8009000:	f000 f882 	bl	8009108 <HAL_LPTIM_CompareMatchCallback>
#endif /* USE_HAL_LPTIM_REGISTER_CALLBACKS */
    }
  }

  /* Autoreload match interrupt */
  if (__HAL_LPTIM_GET_FLAG(hlptim, LPTIM_FLAG_ARRM) != RESET)
 8009004:	687b      	ldr	r3, [r7, #4]
 8009006:	681b      	ldr	r3, [r3, #0]
 8009008:	681b      	ldr	r3, [r3, #0]
 800900a:	f003 0302 	and.w	r3, r3, #2
 800900e:	2b02      	cmp	r3, #2
 8009010:	d10d      	bne.n	800902e <HAL_LPTIM_IRQHandler+0x5c>
  {
    if (__HAL_LPTIM_GET_IT_SOURCE(hlptim, LPTIM_IT_ARRM) != RESET)
 8009012:	687b      	ldr	r3, [r7, #4]
 8009014:	681b      	ldr	r3, [r3, #0]
 8009016:	689b      	ldr	r3, [r3, #8]
 8009018:	f003 0302 	and.w	r3, r3, #2
 800901c:	2b02      	cmp	r3, #2
 800901e:	d106      	bne.n	800902e <HAL_LPTIM_IRQHandler+0x5c>
    {
      /* Clear Autoreload match flag */
      __HAL_LPTIM_CLEAR_FLAG(hlptim, LPTIM_FLAG_ARRM);
 8009020:	687b      	ldr	r3, [r7, #4]
 8009022:	681b      	ldr	r3, [r3, #0]
 8009024:	2202      	movs	r2, #2
 8009026:	605a      	str	r2, [r3, #4]

      /* Autoreload match Callback */
#if (USE_HAL_LPTIM_REGISTER_CALLBACKS == 1)
      hlptim->AutoReloadMatchCallback(hlptim);
#else
      HAL_LPTIM_AutoReloadMatchCallback(hlptim);
 8009028:	6878      	ldr	r0, [r7, #4]
 800902a:	f7fa f9fd 	bl	8003428 <HAL_LPTIM_AutoReloadMatchCallback>
#endif /* USE_HAL_LPTIM_REGISTER_CALLBACKS */
    }
  }

  /* Trigger detected interrupt */
  if (__HAL_LPTIM_GET_FLAG(hlptim, LPTIM_FLAG_EXTTRIG) != RESET)
 800902e:	687b      	ldr	r3, [r7, #4]
 8009030:	681b      	ldr	r3, [r3, #0]
 8009032:	681b      	ldr	r3, [r3, #0]
 8009034:	f003 0304 	and.w	r3, r3, #4
 8009038:	2b04      	cmp	r3, #4
 800903a:	d10d      	bne.n	8009058 <HAL_LPTIM_IRQHandler+0x86>
  {
    if (__HAL_LPTIM_GET_IT_SOURCE(hlptim, LPTIM_IT_EXTTRIG) != RESET)
 800903c:	687b      	ldr	r3, [r7, #4]
 800903e:	681b      	ldr	r3, [r3, #0]
 8009040:	689b      	ldr	r3, [r3, #8]
 8009042:	f003 0304 	and.w	r3, r3, #4
 8009046:	2b04      	cmp	r3, #4
 8009048:	d106      	bne.n	8009058 <HAL_LPTIM_IRQHandler+0x86>
    {
      /* Clear Trigger detected flag */
      __HAL_LPTIM_CLEAR_FLAG(hlptim, LPTIM_FLAG_EXTTRIG);
 800904a:	687b      	ldr	r3, [r7, #4]
 800904c:	681b      	ldr	r3, [r3, #0]
 800904e:	2204      	movs	r2, #4
 8009050:	605a      	str	r2, [r3, #4]

      /* Trigger detected callback */
#if (USE_HAL_LPTIM_REGISTER_CALLBACKS == 1)
      hlptim->TriggerCallback(hlptim);
#else
      HAL_LPTIM_TriggerCallback(hlptim);
 8009052:	6878      	ldr	r0, [r7, #4]
 8009054:	f000 f862 	bl	800911c <HAL_LPTIM_TriggerCallback>
#endif /* USE_HAL_LPTIM_REGISTER_CALLBACKS */
    }
  }

  /* Compare write interrupt */
  if (__HAL_LPTIM_GET_FLAG(hlptim, LPTIM_FLAG_CMPOK) != RESET)
 8009058:	687b      	ldr	r3, [r7, #4]
 800905a:	681b      	ldr	r3, [r3, #0]
 800905c:	681b      	ldr	r3, [r3, #0]
 800905e:	f003 0308 	and.w	r3, r3, #8
 8009062:	2b08      	cmp	r3, #8
 8009064:	d10d      	bne.n	8009082 <HAL_LPTIM_IRQHandler+0xb0>
  {
    if (__HAL_LPTIM_GET_IT_SOURCE(hlptim, LPTIM_IT_CMPOK) != RESET)
 8009066:	687b      	ldr	r3, [r7, #4]
 8009068:	681b      	ldr	r3, [r3, #0]
 800906a:	689b      	ldr	r3, [r3, #8]
 800906c:	f003 0308 	and.w	r3, r3, #8
 8009070:	2b08      	cmp	r3, #8
 8009072:	d106      	bne.n	8009082 <HAL_LPTIM_IRQHandler+0xb0>
    {
      /* Clear Compare write flag */
      __HAL_LPTIM_CLEAR_FLAG(hlptim, LPTIM_FLAG_CMPOK);
 8009074:	687b      	ldr	r3, [r7, #4]
 8009076:	681b      	ldr	r3, [r3, #0]
 8009078:	2208      	movs	r2, #8
 800907a:	605a      	str	r2, [r3, #4]

      /* Compare write Callback */
#if (USE_HAL_LPTIM_REGISTER_CALLBACKS == 1)
      hlptim->CompareWriteCallback(hlptim);
#else
      HAL_LPTIM_CompareWriteCallback(hlptim);
 800907c:	6878      	ldr	r0, [r7, #4]
 800907e:	f000 f857 	bl	8009130 <HAL_LPTIM_CompareWriteCallback>
#endif /* USE_HAL_LPTIM_REGISTER_CALLBACKS */
    }
  }

  /* Autoreload write interrupt */
  if (__HAL_LPTIM_GET_FLAG(hlptim, LPTIM_FLAG_ARROK) != RESET)
 8009082:	687b      	ldr	r3, [r7, #4]
 8009084:	681b      	ldr	r3, [r3, #0]
 8009086:	681b      	ldr	r3, [r3, #0]
 8009088:	f003 0310 	and.w	r3, r3, #16
 800908c:	2b10      	cmp	r3, #16
 800908e:	d10d      	bne.n	80090ac <HAL_LPTIM_IRQHandler+0xda>
  {
    if (__HAL_LPTIM_GET_IT_SOURCE(hlptim, LPTIM_IT_ARROK) != RESET)
 8009090:	687b      	ldr	r3, [r7, #4]
 8009092:	681b      	ldr	r3, [r3, #0]
 8009094:	689b      	ldr	r3, [r3, #8]
 8009096:	f003 0310 	and.w	r3, r3, #16
 800909a:	2b10      	cmp	r3, #16
 800909c:	d106      	bne.n	80090ac <HAL_LPTIM_IRQHandler+0xda>
    {
      /* Clear Autoreload write flag */
      __HAL_LPTIM_CLEAR_FLAG(hlptim, LPTIM_FLAG_ARROK);
 800909e:	687b      	ldr	r3, [r7, #4]
 80090a0:	681b      	ldr	r3, [r3, #0]
 80090a2:	2210      	movs	r2, #16
 80090a4:	605a      	str	r2, [r3, #4]

      /* Autoreload write Callback */
#if (USE_HAL_LPTIM_REGISTER_CALLBACKS == 1)
      hlptim->AutoReloadWriteCallback(hlptim);
#else
      HAL_LPTIM_AutoReloadWriteCallback(hlptim);
 80090a6:	6878      	ldr	r0, [r7, #4]
 80090a8:	f000 f84c 	bl	8009144 <HAL_LPTIM_AutoReloadWriteCallback>
#endif /* USE_HAL_LPTIM_REGISTER_CALLBACKS */
    }
  }

  /* Direction counter changed from Down to Up interrupt */
  if (__HAL_LPTIM_GET_FLAG(hlptim, LPTIM_FLAG_UP) != RESET)
 80090ac:	687b      	ldr	r3, [r7, #4]
 80090ae:	681b      	ldr	r3, [r3, #0]
 80090b0:	681b      	ldr	r3, [r3, #0]
 80090b2:	f003 0320 	and.w	r3, r3, #32
 80090b6:	2b20      	cmp	r3, #32
 80090b8:	d10d      	bne.n	80090d6 <HAL_LPTIM_IRQHandler+0x104>
  {
    if (__HAL_LPTIM_GET_IT_SOURCE(hlptim, LPTIM_IT_UP) != RESET)
 80090ba:	687b      	ldr	r3, [r7, #4]
 80090bc:	681b      	ldr	r3, [r3, #0]
 80090be:	689b      	ldr	r3, [r3, #8]
 80090c0:	f003 0320 	and.w	r3, r3, #32
 80090c4:	2b20      	cmp	r3, #32
 80090c6:	d106      	bne.n	80090d6 <HAL_LPTIM_IRQHandler+0x104>
    {
      /* Clear Direction counter changed from Down to Up flag */
      __HAL_LPTIM_CLEAR_FLAG(hlptim, LPTIM_FLAG_UP);
 80090c8:	687b      	ldr	r3, [r7, #4]
 80090ca:	681b      	ldr	r3, [r3, #0]
 80090cc:	2220      	movs	r2, #32
 80090ce:	605a      	str	r2, [r3, #4]

      /* Direction counter changed from Down to Up Callback */
#if (USE_HAL_LPTIM_REGISTER_CALLBACKS == 1)
      hlptim->DirectionUpCallback(hlptim);
#else
      HAL_LPTIM_DirectionUpCallback(hlptim);
 80090d0:	6878      	ldr	r0, [r7, #4]
 80090d2:	f000 f841 	bl	8009158 <HAL_LPTIM_DirectionUpCallback>
#endif /* USE_HAL_LPTIM_REGISTER_CALLBACKS */
    }
  }

  /* Direction counter changed from Up to Down interrupt */
  if (__HAL_LPTIM_GET_FLAG(hlptim, LPTIM_FLAG_DOWN) != RESET)
 80090d6:	687b      	ldr	r3, [r7, #4]
 80090d8:	681b      	ldr	r3, [r3, #0]
 80090da:	681b      	ldr	r3, [r3, #0]
 80090dc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80090e0:	2b40      	cmp	r3, #64	; 0x40
 80090e2:	d10d      	bne.n	8009100 <HAL_LPTIM_IRQHandler+0x12e>
  {
    if (__HAL_LPTIM_GET_IT_SOURCE(hlptim, LPTIM_IT_DOWN) != RESET)
 80090e4:	687b      	ldr	r3, [r7, #4]
 80090e6:	681b      	ldr	r3, [r3, #0]
 80090e8:	689b      	ldr	r3, [r3, #8]
 80090ea:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80090ee:	2b40      	cmp	r3, #64	; 0x40
 80090f0:	d106      	bne.n	8009100 <HAL_LPTIM_IRQHandler+0x12e>
    {
      /* Clear Direction counter changed from Up to Down flag */
      __HAL_LPTIM_CLEAR_FLAG(hlptim, LPTIM_FLAG_DOWN);
 80090f2:	687b      	ldr	r3, [r7, #4]
 80090f4:	681b      	ldr	r3, [r3, #0]
 80090f6:	2240      	movs	r2, #64	; 0x40
 80090f8:	605a      	str	r2, [r3, #4]

      /* Direction counter changed from Up to Down Callback */
#if (USE_HAL_LPTIM_REGISTER_CALLBACKS == 1)
      hlptim->DirectionDownCallback(hlptim);
#else
      HAL_LPTIM_DirectionDownCallback(hlptim);
 80090fa:	6878      	ldr	r0, [r7, #4]
 80090fc:	f000 f836 	bl	800916c <HAL_LPTIM_DirectionDownCallback>
#endif /* USE_HAL_LPTIM_REGISTER_CALLBACKS */
    }
  }
}
 8009100:	bf00      	nop
 8009102:	3708      	adds	r7, #8
 8009104:	46bd      	mov	sp, r7
 8009106:	bd80      	pop	{r7, pc}

08009108 <HAL_LPTIM_CompareMatchCallback>:
  * @brief  Compare match callback in non-blocking mode.
  * @param  hlptim LPTIM handle
  * @retval None
  */
__weak void HAL_LPTIM_CompareMatchCallback(LPTIM_HandleTypeDef *hlptim)
{
 8009108:	b480      	push	{r7}
 800910a:	b083      	sub	sp, #12
 800910c:	af00      	add	r7, sp, #0
 800910e:	6078      	str	r0, [r7, #4]
  UNUSED(hlptim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_LPTIM_CompareMatchCallback could be implemented in the user file
   */
}
 8009110:	bf00      	nop
 8009112:	370c      	adds	r7, #12
 8009114:	46bd      	mov	sp, r7
 8009116:	f85d 7b04 	ldr.w	r7, [sp], #4
 800911a:	4770      	bx	lr

0800911c <HAL_LPTIM_TriggerCallback>:
  * @brief  Trigger detected callback in non-blocking mode.
  * @param  hlptim LPTIM handle
  * @retval None
  */
__weak void HAL_LPTIM_TriggerCallback(LPTIM_HandleTypeDef *hlptim)
{
 800911c:	b480      	push	{r7}
 800911e:	b083      	sub	sp, #12
 8009120:	af00      	add	r7, sp, #0
 8009122:	6078      	str	r0, [r7, #4]
  UNUSED(hlptim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_LPTIM_TriggerCallback could be implemented in the user file
   */
}
 8009124:	bf00      	nop
 8009126:	370c      	adds	r7, #12
 8009128:	46bd      	mov	sp, r7
 800912a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800912e:	4770      	bx	lr

08009130 <HAL_LPTIM_CompareWriteCallback>:
  * @brief  Compare write callback in non-blocking mode.
  * @param  hlptim LPTIM handle
  * @retval None
  */
__weak void HAL_LPTIM_CompareWriteCallback(LPTIM_HandleTypeDef *hlptim)
{
 8009130:	b480      	push	{r7}
 8009132:	b083      	sub	sp, #12
 8009134:	af00      	add	r7, sp, #0
 8009136:	6078      	str	r0, [r7, #4]
  UNUSED(hlptim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_LPTIM_CompareWriteCallback could be implemented in the user file
   */
}
 8009138:	bf00      	nop
 800913a:	370c      	adds	r7, #12
 800913c:	46bd      	mov	sp, r7
 800913e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009142:	4770      	bx	lr

08009144 <HAL_LPTIM_AutoReloadWriteCallback>:
  * @brief  Autoreload write callback in non-blocking mode.
  * @param  hlptim LPTIM handle
  * @retval None
  */
__weak void HAL_LPTIM_AutoReloadWriteCallback(LPTIM_HandleTypeDef *hlptim)
{
 8009144:	b480      	push	{r7}
 8009146:	b083      	sub	sp, #12
 8009148:	af00      	add	r7, sp, #0
 800914a:	6078      	str	r0, [r7, #4]
  UNUSED(hlptim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_LPTIM_AutoReloadWriteCallback could be implemented in the user file
   */
}
 800914c:	bf00      	nop
 800914e:	370c      	adds	r7, #12
 8009150:	46bd      	mov	sp, r7
 8009152:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009156:	4770      	bx	lr

08009158 <HAL_LPTIM_DirectionUpCallback>:
  * @brief  Direction counter changed from Down to Up callback in non-blocking mode.
  * @param  hlptim LPTIM handle
  * @retval None
  */
__weak void HAL_LPTIM_DirectionUpCallback(LPTIM_HandleTypeDef *hlptim)
{
 8009158:	b480      	push	{r7}
 800915a:	b083      	sub	sp, #12
 800915c:	af00      	add	r7, sp, #0
 800915e:	6078      	str	r0, [r7, #4]
  UNUSED(hlptim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_LPTIM_DirectionUpCallback could be implemented in the user file
   */
}
 8009160:	bf00      	nop
 8009162:	370c      	adds	r7, #12
 8009164:	46bd      	mov	sp, r7
 8009166:	f85d 7b04 	ldr.w	r7, [sp], #4
 800916a:	4770      	bx	lr

0800916c <HAL_LPTIM_DirectionDownCallback>:
  * @brief  Direction counter changed from Up to Down callback in non-blocking mode.
  * @param  hlptim LPTIM handle
  * @retval None
  */
__weak void HAL_LPTIM_DirectionDownCallback(LPTIM_HandleTypeDef *hlptim)
{
 800916c:	b480      	push	{r7}
 800916e:	b083      	sub	sp, #12
 8009170:	af00      	add	r7, sp, #0
 8009172:	6078      	str	r0, [r7, #4]
  UNUSED(hlptim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_LPTIM_DirectionDownCallback could be implemented in the user file
   */
}
 8009174:	bf00      	nop
 8009176:	370c      	adds	r7, #12
 8009178:	46bd      	mov	sp, r7
 800917a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800917e:	4770      	bx	lr

08009180 <HAL_LPTIM_GetState>:
  * @brief  Return the LPTIM handle state.
  * @param  hlptim LPTIM handle
  * @retval HAL state
  */
HAL_LPTIM_StateTypeDef HAL_LPTIM_GetState(LPTIM_HandleTypeDef *hlptim)
{
 8009180:	b480      	push	{r7}
 8009182:	b083      	sub	sp, #12
 8009184:	af00      	add	r7, sp, #0
 8009186:	6078      	str	r0, [r7, #4]
  /* Return LPTIM handle state */
  return hlptim->State;
 8009188:	687b      	ldr	r3, [r7, #4]
 800918a:	f893 3036 	ldrb.w	r3, [r3, #54]	; 0x36
 800918e:	b2db      	uxtb	r3, r3
}
 8009190:	4618      	mov	r0, r3
 8009192:	370c      	adds	r7, #12
 8009194:	46bd      	mov	sp, r7
 8009196:	f85d 7b04 	ldr.w	r7, [sp], #4
 800919a:	4770      	bx	lr

0800919c <LPTIM_WaitForFlag>:
  *                the configuration information for LPTIM module.
  * @param  flag   The lptim flag
  * @retval HAL status
  */
static HAL_StatusTypeDef LPTIM_WaitForFlag(LPTIM_HandleTypeDef *hlptim, uint32_t flag)
{
 800919c:	b480      	push	{r7}
 800919e:	b085      	sub	sp, #20
 80091a0:	af00      	add	r7, sp, #0
 80091a2:	6078      	str	r0, [r7, #4]
 80091a4:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef result = HAL_OK;
 80091a6:	2300      	movs	r3, #0
 80091a8:	73fb      	strb	r3, [r7, #15]
  uint32_t count = TIMEOUT * (SystemCoreClock / 20UL / 1000UL);
 80091aa:	4b12      	ldr	r3, [pc, #72]	; (80091f4 <LPTIM_WaitForFlag+0x58>)
 80091ac:	681b      	ldr	r3, [r3, #0]
 80091ae:	4a12      	ldr	r2, [pc, #72]	; (80091f8 <LPTIM_WaitForFlag+0x5c>)
 80091b0:	fba2 2303 	umull	r2, r3, r2, r3
 80091b4:	0b9b      	lsrs	r3, r3, #14
 80091b6:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80091ba:	fb02 f303 	mul.w	r3, r2, r3
 80091be:	60bb      	str	r3, [r7, #8]
  do
  {
    count--;
 80091c0:	68bb      	ldr	r3, [r7, #8]
 80091c2:	3b01      	subs	r3, #1
 80091c4:	60bb      	str	r3, [r7, #8]
    if (count == 0UL)
 80091c6:	68bb      	ldr	r3, [r7, #8]
 80091c8:	2b00      	cmp	r3, #0
 80091ca:	d101      	bne.n	80091d0 <LPTIM_WaitForFlag+0x34>
    {
      result = HAL_TIMEOUT;
 80091cc:	2303      	movs	r3, #3
 80091ce:	73fb      	strb	r3, [r7, #15]
    }
  } while ((!(__HAL_LPTIM_GET_FLAG((hlptim), (flag)))) && (count != 0UL));
 80091d0:	687b      	ldr	r3, [r7, #4]
 80091d2:	681b      	ldr	r3, [r3, #0]
 80091d4:	681a      	ldr	r2, [r3, #0]
 80091d6:	683b      	ldr	r3, [r7, #0]
 80091d8:	4013      	ands	r3, r2
 80091da:	683a      	ldr	r2, [r7, #0]
 80091dc:	429a      	cmp	r2, r3
 80091de:	d002      	beq.n	80091e6 <LPTIM_WaitForFlag+0x4a>
 80091e0:	68bb      	ldr	r3, [r7, #8]
 80091e2:	2b00      	cmp	r3, #0
 80091e4:	d1ec      	bne.n	80091c0 <LPTIM_WaitForFlag+0x24>

  return result;
 80091e6:	7bfb      	ldrb	r3, [r7, #15]
}
 80091e8:	4618      	mov	r0, r3
 80091ea:	3714      	adds	r7, #20
 80091ec:	46bd      	mov	sp, r7
 80091ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80091f2:	4770      	bx	lr
 80091f4:	20000010 	.word	0x20000010
 80091f8:	d1b71759 	.word	0xd1b71759

080091fc <LPTIM_Disable>:
  *         Please check Errata Sheet ES0335 for more details under "MCU may remain
  *         stuck in LPTIM interrupt when entering Stop mode" section.
  * @retval None
  */
void LPTIM_Disable(LPTIM_HandleTypeDef *hlptim)
{
 80091fc:	b580      	push	{r7, lr}
 80091fe:	b08c      	sub	sp, #48	; 0x30
 8009200:	af00      	add	r7, sp, #0
 8009202:	6078      	str	r0, [r7, #4]
  uint32_t tmpclksource = 0;
 8009204:	2300      	movs	r3, #0
 8009206:	62fb      	str	r3, [r7, #44]	; 0x2c
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8009208:	f3ef 8310 	mrs	r3, PRIMASK
 800920c:	60fb      	str	r3, [r7, #12]
  return(result);
 800920e:	68fb      	ldr	r3, [r7, #12]
  uint32_t tmpARR;
  uint32_t primask_bit;
  uint32_t tmpCFGR2;

  /* Enter critical section */
  primask_bit = __get_PRIMASK();
 8009210:	62bb      	str	r3, [r7, #40]	; 0x28
 8009212:	2301      	movs	r3, #1
 8009214:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8009216:	693b      	ldr	r3, [r7, #16]
 8009218:	f383 8810 	msr	PRIMASK, r3
}
 800921c:	bf00      	nop
  __set_PRIMASK(1) ;

  /*********** Save LPTIM Config ***********/
  /* Save LPTIM source clock */
  switch ((uint32_t)hlptim->Instance)
 800921e:	687b      	ldr	r3, [r7, #4]
 8009220:	681b      	ldr	r3, [r3, #0]
 8009222:	4a81      	ldr	r2, [pc, #516]	; (8009428 <LPTIM_Disable+0x22c>)
 8009224:	4293      	cmp	r3, r2
 8009226:	d02d      	beq.n	8009284 <LPTIM_Disable+0x88>
 8009228:	4a7f      	ldr	r2, [pc, #508]	; (8009428 <LPTIM_Disable+0x22c>)
 800922a:	4293      	cmp	r3, r2
 800922c:	d830      	bhi.n	8009290 <LPTIM_Disable+0x94>
 800922e:	4a7f      	ldr	r2, [pc, #508]	; (800942c <LPTIM_Disable+0x230>)
 8009230:	4293      	cmp	r3, r2
 8009232:	d021      	beq.n	8009278 <LPTIM_Disable+0x7c>
 8009234:	4a7d      	ldr	r2, [pc, #500]	; (800942c <LPTIM_Disable+0x230>)
 8009236:	4293      	cmp	r3, r2
 8009238:	d82a      	bhi.n	8009290 <LPTIM_Disable+0x94>
 800923a:	4a7d      	ldr	r2, [pc, #500]	; (8009430 <LPTIM_Disable+0x234>)
 800923c:	4293      	cmp	r3, r2
 800923e:	d015      	beq.n	800926c <LPTIM_Disable+0x70>
 8009240:	4a7b      	ldr	r2, [pc, #492]	; (8009430 <LPTIM_Disable+0x234>)
 8009242:	4293      	cmp	r3, r2
 8009244:	d824      	bhi.n	8009290 <LPTIM_Disable+0x94>
 8009246:	4a7b      	ldr	r2, [pc, #492]	; (8009434 <LPTIM_Disable+0x238>)
 8009248:	4293      	cmp	r3, r2
 800924a:	d003      	beq.n	8009254 <LPTIM_Disable+0x58>
 800924c:	4a7a      	ldr	r2, [pc, #488]	; (8009438 <LPTIM_Disable+0x23c>)
 800924e:	4293      	cmp	r3, r2
 8009250:	d006      	beq.n	8009260 <LPTIM_Disable+0x64>
    case LPTIM5_BASE:
      tmpclksource = __HAL_RCC_GET_LPTIM5_SOURCE();
      break;
#endif /* LPTIM5 */
    default:
      break;
 8009252:	e01d      	b.n	8009290 <LPTIM_Disable+0x94>
      tmpclksource = __HAL_RCC_GET_LPTIM1_SOURCE();
 8009254:	4b79      	ldr	r3, [pc, #484]	; (800943c <LPTIM_Disable+0x240>)
 8009256:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8009258:	f003 43e0 	and.w	r3, r3, #1879048192	; 0x70000000
 800925c:	62fb      	str	r3, [r7, #44]	; 0x2c
      break;
 800925e:	e018      	b.n	8009292 <LPTIM_Disable+0x96>
      tmpclksource = __HAL_RCC_GET_LPTIM2_SOURCE();
 8009260:	4b76      	ldr	r3, [pc, #472]	; (800943c <LPTIM_Disable+0x240>)
 8009262:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8009264:	f403 53e0 	and.w	r3, r3, #7168	; 0x1c00
 8009268:	62fb      	str	r3, [r7, #44]	; 0x2c
      break;
 800926a:	e012      	b.n	8009292 <LPTIM_Disable+0x96>
      tmpclksource = __HAL_RCC_GET_LPTIM3_SOURCE();
 800926c:	4b73      	ldr	r3, [pc, #460]	; (800943c <LPTIM_Disable+0x240>)
 800926e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8009270:	f403 4360 	and.w	r3, r3, #57344	; 0xe000
 8009274:	62fb      	str	r3, [r7, #44]	; 0x2c
      break;
 8009276:	e00c      	b.n	8009292 <LPTIM_Disable+0x96>
      tmpclksource = __HAL_RCC_GET_LPTIM4_SOURCE();
 8009278:	4b70      	ldr	r3, [pc, #448]	; (800943c <LPTIM_Disable+0x240>)
 800927a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800927c:	f403 4360 	and.w	r3, r3, #57344	; 0xe000
 8009280:	62fb      	str	r3, [r7, #44]	; 0x2c
      break;
 8009282:	e006      	b.n	8009292 <LPTIM_Disable+0x96>
      tmpclksource = __HAL_RCC_GET_LPTIM5_SOURCE();
 8009284:	4b6d      	ldr	r3, [pc, #436]	; (800943c <LPTIM_Disable+0x240>)
 8009286:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8009288:	f403 4360 	and.w	r3, r3, #57344	; 0xe000
 800928c:	62fb      	str	r3, [r7, #44]	; 0x2c
      break;
 800928e:	e000      	b.n	8009292 <LPTIM_Disable+0x96>
      break;
 8009290:	bf00      	nop
  }

  /* Save LPTIM configuration registers */
  tmpIER = hlptim->Instance->IER;
 8009292:	687b      	ldr	r3, [r7, #4]
 8009294:	681b      	ldr	r3, [r3, #0]
 8009296:	689b      	ldr	r3, [r3, #8]
 8009298:	627b      	str	r3, [r7, #36]	; 0x24
  tmpCFGR = hlptim->Instance->CFGR;
 800929a:	687b      	ldr	r3, [r7, #4]
 800929c:	681b      	ldr	r3, [r3, #0]
 800929e:	68db      	ldr	r3, [r3, #12]
 80092a0:	623b      	str	r3, [r7, #32]
  tmpCMP = hlptim->Instance->CMP;
 80092a2:	687b      	ldr	r3, [r7, #4]
 80092a4:	681b      	ldr	r3, [r3, #0]
 80092a6:	695b      	ldr	r3, [r3, #20]
 80092a8:	61fb      	str	r3, [r7, #28]
  tmpARR = hlptim->Instance->ARR;
 80092aa:	687b      	ldr	r3, [r7, #4]
 80092ac:	681b      	ldr	r3, [r3, #0]
 80092ae:	699b      	ldr	r3, [r3, #24]
 80092b0:	61bb      	str	r3, [r7, #24]
  tmpCFGR2 = hlptim->Instance->CFGR2;
 80092b2:	687b      	ldr	r3, [r7, #4]
 80092b4:	681b      	ldr	r3, [r3, #0]
 80092b6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80092b8:	617b      	str	r3, [r7, #20]

  /*********** Reset LPTIM ***********/
  switch ((uint32_t)hlptim->Instance)
 80092ba:	687b      	ldr	r3, [r7, #4]
 80092bc:	681b      	ldr	r3, [r3, #0]
 80092be:	4a5a      	ldr	r2, [pc, #360]	; (8009428 <LPTIM_Disable+0x22c>)
 80092c0:	4293      	cmp	r3, r2
 80092c2:	d059      	beq.n	8009378 <LPTIM_Disable+0x17c>
 80092c4:	4a58      	ldr	r2, [pc, #352]	; (8009428 <LPTIM_Disable+0x22c>)
 80092c6:	4293      	cmp	r3, r2
 80092c8:	d867      	bhi.n	800939a <LPTIM_Disable+0x19e>
 80092ca:	4a58      	ldr	r2, [pc, #352]	; (800942c <LPTIM_Disable+0x230>)
 80092cc:	4293      	cmp	r3, r2
 80092ce:	d042      	beq.n	8009356 <LPTIM_Disable+0x15a>
 80092d0:	4a56      	ldr	r2, [pc, #344]	; (800942c <LPTIM_Disable+0x230>)
 80092d2:	4293      	cmp	r3, r2
 80092d4:	d861      	bhi.n	800939a <LPTIM_Disable+0x19e>
 80092d6:	4a56      	ldr	r2, [pc, #344]	; (8009430 <LPTIM_Disable+0x234>)
 80092d8:	4293      	cmp	r3, r2
 80092da:	d02b      	beq.n	8009334 <LPTIM_Disable+0x138>
 80092dc:	4a54      	ldr	r2, [pc, #336]	; (8009430 <LPTIM_Disable+0x234>)
 80092de:	4293      	cmp	r3, r2
 80092e0:	d85b      	bhi.n	800939a <LPTIM_Disable+0x19e>
 80092e2:	4a54      	ldr	r2, [pc, #336]	; (8009434 <LPTIM_Disable+0x238>)
 80092e4:	4293      	cmp	r3, r2
 80092e6:	d003      	beq.n	80092f0 <LPTIM_Disable+0xf4>
 80092e8:	4a53      	ldr	r2, [pc, #332]	; (8009438 <LPTIM_Disable+0x23c>)
 80092ea:	4293      	cmp	r3, r2
 80092ec:	d011      	beq.n	8009312 <LPTIM_Disable+0x116>
      __HAL_RCC_LPTIM5_FORCE_RESET();
      __HAL_RCC_LPTIM5_RELEASE_RESET();
      break;
#endif /* LPTIM5 */
    default:
      break;
 80092ee:	e054      	b.n	800939a <LPTIM_Disable+0x19e>
      __HAL_RCC_LPTIM1_FORCE_RESET();
 80092f0:	4b52      	ldr	r3, [pc, #328]	; (800943c <LPTIM_Disable+0x240>)
 80092f2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80092f6:	4a51      	ldr	r2, [pc, #324]	; (800943c <LPTIM_Disable+0x240>)
 80092f8:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80092fc:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      __HAL_RCC_LPTIM1_RELEASE_RESET();
 8009300:	4b4e      	ldr	r3, [pc, #312]	; (800943c <LPTIM_Disable+0x240>)
 8009302:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8009306:	4a4d      	ldr	r2, [pc, #308]	; (800943c <LPTIM_Disable+0x240>)
 8009308:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800930c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      break;
 8009310:	e044      	b.n	800939c <LPTIM_Disable+0x1a0>
      __HAL_RCC_LPTIM2_FORCE_RESET();
 8009312:	4b4a      	ldr	r3, [pc, #296]	; (800943c <LPTIM_Disable+0x240>)
 8009314:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8009318:	4a48      	ldr	r2, [pc, #288]	; (800943c <LPTIM_Disable+0x240>)
 800931a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800931e:	f8c2 309c 	str.w	r3, [r2, #156]	; 0x9c
      __HAL_RCC_LPTIM2_RELEASE_RESET();
 8009322:	4b46      	ldr	r3, [pc, #280]	; (800943c <LPTIM_Disable+0x240>)
 8009324:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8009328:	4a44      	ldr	r2, [pc, #272]	; (800943c <LPTIM_Disable+0x240>)
 800932a:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800932e:	f8c2 309c 	str.w	r3, [r2, #156]	; 0x9c
      break;
 8009332:	e033      	b.n	800939c <LPTIM_Disable+0x1a0>
      __HAL_RCC_LPTIM3_FORCE_RESET();
 8009334:	4b41      	ldr	r3, [pc, #260]	; (800943c <LPTIM_Disable+0x240>)
 8009336:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800933a:	4a40      	ldr	r2, [pc, #256]	; (800943c <LPTIM_Disable+0x240>)
 800933c:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8009340:	f8c2 309c 	str.w	r3, [r2, #156]	; 0x9c
      __HAL_RCC_LPTIM3_RELEASE_RESET();
 8009344:	4b3d      	ldr	r3, [pc, #244]	; (800943c <LPTIM_Disable+0x240>)
 8009346:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800934a:	4a3c      	ldr	r2, [pc, #240]	; (800943c <LPTIM_Disable+0x240>)
 800934c:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8009350:	f8c2 309c 	str.w	r3, [r2, #156]	; 0x9c
      break;
 8009354:	e022      	b.n	800939c <LPTIM_Disable+0x1a0>
      __HAL_RCC_LPTIM4_FORCE_RESET();
 8009356:	4b39      	ldr	r3, [pc, #228]	; (800943c <LPTIM_Disable+0x240>)
 8009358:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800935c:	4a37      	ldr	r2, [pc, #220]	; (800943c <LPTIM_Disable+0x240>)
 800935e:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8009362:	f8c2 309c 	str.w	r3, [r2, #156]	; 0x9c
      __HAL_RCC_LPTIM4_RELEASE_RESET();
 8009366:	4b35      	ldr	r3, [pc, #212]	; (800943c <LPTIM_Disable+0x240>)
 8009368:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800936c:	4a33      	ldr	r2, [pc, #204]	; (800943c <LPTIM_Disable+0x240>)
 800936e:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8009372:	f8c2 309c 	str.w	r3, [r2, #156]	; 0x9c
      break;
 8009376:	e011      	b.n	800939c <LPTIM_Disable+0x1a0>
      __HAL_RCC_LPTIM5_FORCE_RESET();
 8009378:	4b30      	ldr	r3, [pc, #192]	; (800943c <LPTIM_Disable+0x240>)
 800937a:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800937e:	4a2f      	ldr	r2, [pc, #188]	; (800943c <LPTIM_Disable+0x240>)
 8009380:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8009384:	f8c2 309c 	str.w	r3, [r2, #156]	; 0x9c
      __HAL_RCC_LPTIM5_RELEASE_RESET();
 8009388:	4b2c      	ldr	r3, [pc, #176]	; (800943c <LPTIM_Disable+0x240>)
 800938a:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800938e:	4a2b      	ldr	r2, [pc, #172]	; (800943c <LPTIM_Disable+0x240>)
 8009390:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8009394:	f8c2 309c 	str.w	r3, [r2, #156]	; 0x9c
      break;
 8009398:	e000      	b.n	800939c <LPTIM_Disable+0x1a0>
      break;
 800939a:	bf00      	nop
  }

  /*********** Restore LPTIM Config ***********/
  if ((tmpCMP != 0UL) || (tmpARR != 0UL))
 800939c:	69fb      	ldr	r3, [r7, #28]
 800939e:	2b00      	cmp	r3, #0
 80093a0:	d103      	bne.n	80093aa <LPTIM_Disable+0x1ae>
 80093a2:	69bb      	ldr	r3, [r7, #24]
 80093a4:	2b00      	cmp	r3, #0
 80093a6:	f000 80d1 	beq.w	800954c <LPTIM_Disable+0x350>
  {
    /* Force LPTIM source kernel clock from APB */
    switch ((uint32_t)hlptim->Instance)
 80093aa:	687b      	ldr	r3, [r7, #4]
 80093ac:	681b      	ldr	r3, [r3, #0]
 80093ae:	4a1e      	ldr	r2, [pc, #120]	; (8009428 <LPTIM_Disable+0x22c>)
 80093b0:	4293      	cmp	r3, r2
 80093b2:	d031      	beq.n	8009418 <LPTIM_Disable+0x21c>
 80093b4:	4a1c      	ldr	r2, [pc, #112]	; (8009428 <LPTIM_Disable+0x22c>)
 80093b6:	4293      	cmp	r3, r2
 80093b8:	d842      	bhi.n	8009440 <LPTIM_Disable+0x244>
 80093ba:	4a1c      	ldr	r2, [pc, #112]	; (800942c <LPTIM_Disable+0x230>)
 80093bc:	4293      	cmp	r3, r2
 80093be:	d024      	beq.n	800940a <LPTIM_Disable+0x20e>
 80093c0:	4a1a      	ldr	r2, [pc, #104]	; (800942c <LPTIM_Disable+0x230>)
 80093c2:	4293      	cmp	r3, r2
 80093c4:	d83c      	bhi.n	8009440 <LPTIM_Disable+0x244>
 80093c6:	4a1a      	ldr	r2, [pc, #104]	; (8009430 <LPTIM_Disable+0x234>)
 80093c8:	4293      	cmp	r3, r2
 80093ca:	d017      	beq.n	80093fc <LPTIM_Disable+0x200>
 80093cc:	4a18      	ldr	r2, [pc, #96]	; (8009430 <LPTIM_Disable+0x234>)
 80093ce:	4293      	cmp	r3, r2
 80093d0:	d836      	bhi.n	8009440 <LPTIM_Disable+0x244>
 80093d2:	4a18      	ldr	r2, [pc, #96]	; (8009434 <LPTIM_Disable+0x238>)
 80093d4:	4293      	cmp	r3, r2
 80093d6:	d003      	beq.n	80093e0 <LPTIM_Disable+0x1e4>
 80093d8:	4a17      	ldr	r2, [pc, #92]	; (8009438 <LPTIM_Disable+0x23c>)
 80093da:	4293      	cmp	r3, r2
 80093dc:	d007      	beq.n	80093ee <LPTIM_Disable+0x1f2>
      case LPTIM5_BASE:
        __HAL_RCC_LPTIM5_CONFIG(RCC_LPTIM5CLKSOURCE_D3PCLK1);
        break;
#endif /* LPTIM5 */
      default:
        break;
 80093de:	e02f      	b.n	8009440 <LPTIM_Disable+0x244>
        __HAL_RCC_LPTIM1_CONFIG(RCC_LPTIM1CLKSOURCE_D2PCLK1);
 80093e0:	4b16      	ldr	r3, [pc, #88]	; (800943c <LPTIM_Disable+0x240>)
 80093e2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80093e4:	4a15      	ldr	r2, [pc, #84]	; (800943c <LPTIM_Disable+0x240>)
 80093e6:	f023 43e0 	bic.w	r3, r3, #1879048192	; 0x70000000
 80093ea:	6553      	str	r3, [r2, #84]	; 0x54
        break;
 80093ec:	e029      	b.n	8009442 <LPTIM_Disable+0x246>
        __HAL_RCC_LPTIM2_CONFIG(RCC_LPTIM2CLKSOURCE_D3PCLK1);
 80093ee:	4b13      	ldr	r3, [pc, #76]	; (800943c <LPTIM_Disable+0x240>)
 80093f0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80093f2:	4a12      	ldr	r2, [pc, #72]	; (800943c <LPTIM_Disable+0x240>)
 80093f4:	f423 53e0 	bic.w	r3, r3, #7168	; 0x1c00
 80093f8:	6593      	str	r3, [r2, #88]	; 0x58
        break;
 80093fa:	e022      	b.n	8009442 <LPTIM_Disable+0x246>
        __HAL_RCC_LPTIM3_CONFIG(RCC_LPTIM3CLKSOURCE_D3PCLK1);
 80093fc:	4b0f      	ldr	r3, [pc, #60]	; (800943c <LPTIM_Disable+0x240>)
 80093fe:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8009400:	4a0e      	ldr	r2, [pc, #56]	; (800943c <LPTIM_Disable+0x240>)
 8009402:	f423 4360 	bic.w	r3, r3, #57344	; 0xe000
 8009406:	6593      	str	r3, [r2, #88]	; 0x58
        break;
 8009408:	e01b      	b.n	8009442 <LPTIM_Disable+0x246>
        __HAL_RCC_LPTIM4_CONFIG(RCC_LPTIM4CLKSOURCE_D3PCLK1);
 800940a:	4b0c      	ldr	r3, [pc, #48]	; (800943c <LPTIM_Disable+0x240>)
 800940c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800940e:	4a0b      	ldr	r2, [pc, #44]	; (800943c <LPTIM_Disable+0x240>)
 8009410:	f423 4360 	bic.w	r3, r3, #57344	; 0xe000
 8009414:	6593      	str	r3, [r2, #88]	; 0x58
        break;
 8009416:	e014      	b.n	8009442 <LPTIM_Disable+0x246>
        __HAL_RCC_LPTIM5_CONFIG(RCC_LPTIM5CLKSOURCE_D3PCLK1);
 8009418:	4b08      	ldr	r3, [pc, #32]	; (800943c <LPTIM_Disable+0x240>)
 800941a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800941c:	4a07      	ldr	r2, [pc, #28]	; (800943c <LPTIM_Disable+0x240>)
 800941e:	f423 4360 	bic.w	r3, r3, #57344	; 0xe000
 8009422:	6593      	str	r3, [r2, #88]	; 0x58
        break;
 8009424:	e00d      	b.n	8009442 <LPTIM_Disable+0x246>
 8009426:	bf00      	nop
 8009428:	58003000 	.word	0x58003000
 800942c:	58002c00 	.word	0x58002c00
 8009430:	58002800 	.word	0x58002800
 8009434:	40002400 	.word	0x40002400
 8009438:	58002400 	.word	0x58002400
 800943c:	58024400 	.word	0x58024400
        break;
 8009440:	bf00      	nop
    }

    if (tmpCMP != 0UL)
 8009442:	69fb      	ldr	r3, [r7, #28]
 8009444:	2b00      	cmp	r3, #0
 8009446:	d01a      	beq.n	800947e <LPTIM_Disable+0x282>
    {
      /* Restore CMP register (LPTIM should be enabled first) */
      hlptim->Instance->CR |= LPTIM_CR_ENABLE;
 8009448:	687b      	ldr	r3, [r7, #4]
 800944a:	681b      	ldr	r3, [r3, #0]
 800944c:	691a      	ldr	r2, [r3, #16]
 800944e:	687b      	ldr	r3, [r7, #4]
 8009450:	681b      	ldr	r3, [r3, #0]
 8009452:	f042 0201 	orr.w	r2, r2, #1
 8009456:	611a      	str	r2, [r3, #16]
      hlptim->Instance->CMP = tmpCMP;
 8009458:	687b      	ldr	r3, [r7, #4]
 800945a:	681b      	ldr	r3, [r3, #0]
 800945c:	69fa      	ldr	r2, [r7, #28]
 800945e:	615a      	str	r2, [r3, #20]

      /* Wait for the completion of the write operation to the LPTIM_CMP register */
      if (LPTIM_WaitForFlag(hlptim, LPTIM_FLAG_CMPOK) == HAL_TIMEOUT)
 8009460:	2108      	movs	r1, #8
 8009462:	6878      	ldr	r0, [r7, #4]
 8009464:	f7ff fe9a 	bl	800919c <LPTIM_WaitForFlag>
 8009468:	4603      	mov	r3, r0
 800946a:	2b03      	cmp	r3, #3
 800946c:	d103      	bne.n	8009476 <LPTIM_Disable+0x27a>
      {
        hlptim->State = HAL_LPTIM_STATE_TIMEOUT;
 800946e:	687b      	ldr	r3, [r7, #4]
 8009470:	2203      	movs	r2, #3
 8009472:	f883 2036 	strb.w	r2, [r3, #54]	; 0x36
      }
      __HAL_LPTIM_CLEAR_FLAG(hlptim, LPTIM_FLAG_CMPOK);
 8009476:	687b      	ldr	r3, [r7, #4]
 8009478:	681b      	ldr	r3, [r3, #0]
 800947a:	2208      	movs	r2, #8
 800947c:	605a      	str	r2, [r3, #4]
    }

    if (tmpARR != 0UL)
 800947e:	69bb      	ldr	r3, [r7, #24]
 8009480:	2b00      	cmp	r3, #0
 8009482:	d01a      	beq.n	80094ba <LPTIM_Disable+0x2be>
    {
      /* Restore ARR register (LPTIM should be enabled first) */
      hlptim->Instance->CR |= LPTIM_CR_ENABLE;
 8009484:	687b      	ldr	r3, [r7, #4]
 8009486:	681b      	ldr	r3, [r3, #0]
 8009488:	691a      	ldr	r2, [r3, #16]
 800948a:	687b      	ldr	r3, [r7, #4]
 800948c:	681b      	ldr	r3, [r3, #0]
 800948e:	f042 0201 	orr.w	r2, r2, #1
 8009492:	611a      	str	r2, [r3, #16]
      hlptim->Instance->ARR = tmpARR;
 8009494:	687b      	ldr	r3, [r7, #4]
 8009496:	681b      	ldr	r3, [r3, #0]
 8009498:	69ba      	ldr	r2, [r7, #24]
 800949a:	619a      	str	r2, [r3, #24]

      /* Wait for the completion of the write operation to the LPTIM_ARR register */
      if (LPTIM_WaitForFlag(hlptim, LPTIM_FLAG_ARROK) == HAL_TIMEOUT)
 800949c:	2110      	movs	r1, #16
 800949e:	6878      	ldr	r0, [r7, #4]
 80094a0:	f7ff fe7c 	bl	800919c <LPTIM_WaitForFlag>
 80094a4:	4603      	mov	r3, r0
 80094a6:	2b03      	cmp	r3, #3
 80094a8:	d103      	bne.n	80094b2 <LPTIM_Disable+0x2b6>
      {
        hlptim->State = HAL_LPTIM_STATE_TIMEOUT;
 80094aa:	687b      	ldr	r3, [r7, #4]
 80094ac:	2203      	movs	r2, #3
 80094ae:	f883 2036 	strb.w	r2, [r3, #54]	; 0x36
      }

      __HAL_LPTIM_CLEAR_FLAG(hlptim, LPTIM_FLAG_ARROK);
 80094b2:	687b      	ldr	r3, [r7, #4]
 80094b4:	681b      	ldr	r3, [r3, #0]
 80094b6:	2210      	movs	r2, #16
 80094b8:	605a      	str	r2, [r3, #4]
    }

    /* Restore LPTIM source kernel clock */
    switch ((uint32_t)hlptim->Instance)
 80094ba:	687b      	ldr	r3, [r7, #4]
 80094bc:	681b      	ldr	r3, [r3, #0]
 80094be:	4a32      	ldr	r2, [pc, #200]	; (8009588 <LPTIM_Disable+0x38c>)
 80094c0:	4293      	cmp	r3, r2
 80094c2:	d039      	beq.n	8009538 <LPTIM_Disable+0x33c>
 80094c4:	4a30      	ldr	r2, [pc, #192]	; (8009588 <LPTIM_Disable+0x38c>)
 80094c6:	4293      	cmp	r3, r2
 80094c8:	d83f      	bhi.n	800954a <LPTIM_Disable+0x34e>
 80094ca:	4a30      	ldr	r2, [pc, #192]	; (800958c <LPTIM_Disable+0x390>)
 80094cc:	4293      	cmp	r3, r2
 80094ce:	d02a      	beq.n	8009526 <LPTIM_Disable+0x32a>
 80094d0:	4a2e      	ldr	r2, [pc, #184]	; (800958c <LPTIM_Disable+0x390>)
 80094d2:	4293      	cmp	r3, r2
 80094d4:	d839      	bhi.n	800954a <LPTIM_Disable+0x34e>
 80094d6:	4a2e      	ldr	r2, [pc, #184]	; (8009590 <LPTIM_Disable+0x394>)
 80094d8:	4293      	cmp	r3, r2
 80094da:	d01b      	beq.n	8009514 <LPTIM_Disable+0x318>
 80094dc:	4a2c      	ldr	r2, [pc, #176]	; (8009590 <LPTIM_Disable+0x394>)
 80094de:	4293      	cmp	r3, r2
 80094e0:	d833      	bhi.n	800954a <LPTIM_Disable+0x34e>
 80094e2:	4a2c      	ldr	r2, [pc, #176]	; (8009594 <LPTIM_Disable+0x398>)
 80094e4:	4293      	cmp	r3, r2
 80094e6:	d003      	beq.n	80094f0 <LPTIM_Disable+0x2f4>
 80094e8:	4a2b      	ldr	r2, [pc, #172]	; (8009598 <LPTIM_Disable+0x39c>)
 80094ea:	4293      	cmp	r3, r2
 80094ec:	d009      	beq.n	8009502 <LPTIM_Disable+0x306>
      case LPTIM5_BASE:
        __HAL_RCC_LPTIM5_CONFIG(tmpclksource);
        break;
#endif /* LPTIM5 */
      default:
        break;
 80094ee:	e02c      	b.n	800954a <LPTIM_Disable+0x34e>
        __HAL_RCC_LPTIM1_CONFIG(tmpclksource);
 80094f0:	4b2a      	ldr	r3, [pc, #168]	; (800959c <LPTIM_Disable+0x3a0>)
 80094f2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80094f4:	f023 42e0 	bic.w	r2, r3, #1879048192	; 0x70000000
 80094f8:	4928      	ldr	r1, [pc, #160]	; (800959c <LPTIM_Disable+0x3a0>)
 80094fa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80094fc:	4313      	orrs	r3, r2
 80094fe:	654b      	str	r3, [r1, #84]	; 0x54
        break;
 8009500:	e024      	b.n	800954c <LPTIM_Disable+0x350>
        __HAL_RCC_LPTIM2_CONFIG(tmpclksource);
 8009502:	4b26      	ldr	r3, [pc, #152]	; (800959c <LPTIM_Disable+0x3a0>)
 8009504:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8009506:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 800950a:	4924      	ldr	r1, [pc, #144]	; (800959c <LPTIM_Disable+0x3a0>)
 800950c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800950e:	4313      	orrs	r3, r2
 8009510:	658b      	str	r3, [r1, #88]	; 0x58
        break;
 8009512:	e01b      	b.n	800954c <LPTIM_Disable+0x350>
        __HAL_RCC_LPTIM3_CONFIG(tmpclksource);
 8009514:	4b21      	ldr	r3, [pc, #132]	; (800959c <LPTIM_Disable+0x3a0>)
 8009516:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8009518:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 800951c:	491f      	ldr	r1, [pc, #124]	; (800959c <LPTIM_Disable+0x3a0>)
 800951e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009520:	4313      	orrs	r3, r2
 8009522:	658b      	str	r3, [r1, #88]	; 0x58
        break;
 8009524:	e012      	b.n	800954c <LPTIM_Disable+0x350>
        __HAL_RCC_LPTIM4_CONFIG(tmpclksource);
 8009526:	4b1d      	ldr	r3, [pc, #116]	; (800959c <LPTIM_Disable+0x3a0>)
 8009528:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800952a:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 800952e:	491b      	ldr	r1, [pc, #108]	; (800959c <LPTIM_Disable+0x3a0>)
 8009530:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009532:	4313      	orrs	r3, r2
 8009534:	658b      	str	r3, [r1, #88]	; 0x58
        break;
 8009536:	e009      	b.n	800954c <LPTIM_Disable+0x350>
        __HAL_RCC_LPTIM5_CONFIG(tmpclksource);
 8009538:	4b18      	ldr	r3, [pc, #96]	; (800959c <LPTIM_Disable+0x3a0>)
 800953a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800953c:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8009540:	4916      	ldr	r1, [pc, #88]	; (800959c <LPTIM_Disable+0x3a0>)
 8009542:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009544:	4313      	orrs	r3, r2
 8009546:	658b      	str	r3, [r1, #88]	; 0x58
        break;
 8009548:	e000      	b.n	800954c <LPTIM_Disable+0x350>
        break;
 800954a:	bf00      	nop
    }
  }

  /* Restore configuration registers (LPTIM should be disabled first) */
  hlptim->Instance->CR &= ~(LPTIM_CR_ENABLE);
 800954c:	687b      	ldr	r3, [r7, #4]
 800954e:	681b      	ldr	r3, [r3, #0]
 8009550:	691a      	ldr	r2, [r3, #16]
 8009552:	687b      	ldr	r3, [r7, #4]
 8009554:	681b      	ldr	r3, [r3, #0]
 8009556:	f022 0201 	bic.w	r2, r2, #1
 800955a:	611a      	str	r2, [r3, #16]
  hlptim->Instance->IER = tmpIER;
 800955c:	687b      	ldr	r3, [r7, #4]
 800955e:	681b      	ldr	r3, [r3, #0]
 8009560:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8009562:	609a      	str	r2, [r3, #8]
  hlptim->Instance->CFGR = tmpCFGR;
 8009564:	687b      	ldr	r3, [r7, #4]
 8009566:	681b      	ldr	r3, [r3, #0]
 8009568:	6a3a      	ldr	r2, [r7, #32]
 800956a:	60da      	str	r2, [r3, #12]
  hlptim->Instance->CFGR2 = tmpCFGR2;
 800956c:	687b      	ldr	r3, [r7, #4]
 800956e:	681b      	ldr	r3, [r3, #0]
 8009570:	697a      	ldr	r2, [r7, #20]
 8009572:	625a      	str	r2, [r3, #36]	; 0x24
 8009574:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009576:	60bb      	str	r3, [r7, #8]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8009578:	68bb      	ldr	r3, [r7, #8]
 800957a:	f383 8810 	msr	PRIMASK, r3
}
 800957e:	bf00      	nop

  /* Exit critical section: restore previous priority mask */
  __set_PRIMASK(primask_bit);
}
 8009580:	bf00      	nop
 8009582:	3730      	adds	r7, #48	; 0x30
 8009584:	46bd      	mov	sp, r7
 8009586:	bd80      	pop	{r7, pc}
 8009588:	58003000 	.word	0x58003000
 800958c:	58002c00 	.word	0x58002c00
 8009590:	58002800 	.word	0x58002800
 8009594:	40002400 	.word	0x40002400
 8009598:	58002400 	.word	0x58002400
 800959c:	58024400 	.word	0x58024400

080095a0 <HAL_PWR_EnableBkUpAccess>:
  * @note   If the HSE divided by 2, 3, ..31 is used as the RTC clock, the
  *         Backup Domain Access should be kept enabled.
  * @retval None.
  */
void HAL_PWR_EnableBkUpAccess (void)
{
 80095a0:	b480      	push	{r7}
 80095a2:	af00      	add	r7, sp, #0
  /* Enable access to RTC and backup registers */
  SET_BIT (PWR->CR1, PWR_CR1_DBP);
 80095a4:	4b05      	ldr	r3, [pc, #20]	; (80095bc <HAL_PWR_EnableBkUpAccess+0x1c>)
 80095a6:	681b      	ldr	r3, [r3, #0]
 80095a8:	4a04      	ldr	r2, [pc, #16]	; (80095bc <HAL_PWR_EnableBkUpAccess+0x1c>)
 80095aa:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80095ae:	6013      	str	r3, [r2, #0]
}
 80095b0:	bf00      	nop
 80095b2:	46bd      	mov	sp, r7
 80095b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80095b8:	4770      	bx	lr
 80095ba:	bf00      	nop
 80095bc:	58024800 	.word	0x58024800

080095c0 <HAL_PWREx_ConfigSupply>:
  *         PWR_SMPS_2V5_SUPPLIES_EXT are used only for lines that supports SMPS
  *         regulator.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply (uint32_t SupplySource)
{
 80095c0:	b580      	push	{r7, lr}
 80095c2:	b084      	sub	sp, #16
 80095c4:	af00      	add	r7, sp, #0
 80095c6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param (IS_PWR_SUPPLY (SupplySource));

  /* Check if supply source was configured */
#if defined (PWR_FLAG_SCUEN)
  if (__HAL_PWR_GET_FLAG (PWR_FLAG_SCUEN) == 0U)
 80095c8:	4b19      	ldr	r3, [pc, #100]	; (8009630 <HAL_PWREx_ConfigSupply+0x70>)
 80095ca:	68db      	ldr	r3, [r3, #12]
 80095cc:	f003 0304 	and.w	r3, r3, #4
 80095d0:	2b04      	cmp	r3, #4
 80095d2:	d00a      	beq.n	80095ea <HAL_PWREx_ConfigSupply+0x2a>
#else
  if ((PWR->CR3 & (PWR_CR3_SMPSEN | PWR_CR3_LDOEN | PWR_CR3_BYPASS)) != (PWR_CR3_SMPSEN | PWR_CR3_LDOEN))
#endif /* defined (PWR_FLAG_SCUEN) */
  {
    /* Check supply configuration */
    if ((PWR->CR3 & PWR_SUPPLY_CONFIG_MASK) != SupplySource)
 80095d4:	4b16      	ldr	r3, [pc, #88]	; (8009630 <HAL_PWREx_ConfigSupply+0x70>)
 80095d6:	68db      	ldr	r3, [r3, #12]
 80095d8:	f003 0307 	and.w	r3, r3, #7
 80095dc:	687a      	ldr	r2, [r7, #4]
 80095de:	429a      	cmp	r2, r3
 80095e0:	d001      	beq.n	80095e6 <HAL_PWREx_ConfigSupply+0x26>
    {
      /* Supply configuration update locked, can't apply a new supply config */
      return HAL_ERROR;
 80095e2:	2301      	movs	r3, #1
 80095e4:	e01f      	b.n	8009626 <HAL_PWREx_ConfigSupply+0x66>
    else
    {
      /* Supply configuration update locked, but new supply configuration
         matches with old supply configuration : nothing to do
      */
      return HAL_OK;
 80095e6:	2300      	movs	r3, #0
 80095e8:	e01d      	b.n	8009626 <HAL_PWREx_ConfigSupply+0x66>
    }
  }

  /* Set the power supply configuration */
  MODIFY_REG (PWR->CR3, PWR_SUPPLY_CONFIG_MASK, SupplySource);
 80095ea:	4b11      	ldr	r3, [pc, #68]	; (8009630 <HAL_PWREx_ConfigSupply+0x70>)
 80095ec:	68db      	ldr	r3, [r3, #12]
 80095ee:	f023 0207 	bic.w	r2, r3, #7
 80095f2:	490f      	ldr	r1, [pc, #60]	; (8009630 <HAL_PWREx_ConfigSupply+0x70>)
 80095f4:	687b      	ldr	r3, [r7, #4]
 80095f6:	4313      	orrs	r3, r2
 80095f8:	60cb      	str	r3, [r1, #12]

  /* Get tick */
  tickstart = HAL_GetTick ();
 80095fa:	f7fa f9bf 	bl	800397c <HAL_GetTick>
 80095fe:	60f8      	str	r0, [r7, #12]

  /* Wait till voltage level flag is set */
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8009600:	e009      	b.n	8009616 <HAL_PWREx_ConfigSupply+0x56>
  {
    if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 8009602:	f7fa f9bb 	bl	800397c <HAL_GetTick>
 8009606:	4602      	mov	r2, r0
 8009608:	68fb      	ldr	r3, [r7, #12]
 800960a:	1ad3      	subs	r3, r2, r3
 800960c:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8009610:	d901      	bls.n	8009616 <HAL_PWREx_ConfigSupply+0x56>
    {
      return HAL_ERROR;
 8009612:	2301      	movs	r3, #1
 8009614:	e007      	b.n	8009626 <HAL_PWREx_ConfigSupply+0x66>
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8009616:	4b06      	ldr	r3, [pc, #24]	; (8009630 <HAL_PWREx_ConfigSupply+0x70>)
 8009618:	685b      	ldr	r3, [r3, #4]
 800961a:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800961e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8009622:	d1ee      	bne.n	8009602 <HAL_PWREx_ConfigSupply+0x42>
      }
    }
  }
#endif /* defined (SMPS) */

  return HAL_OK;
 8009624:	2300      	movs	r3, #0
}
 8009626:	4618      	mov	r0, r3
 8009628:	3710      	adds	r7, #16
 800962a:	46bd      	mov	sp, r7
 800962c:	bd80      	pop	{r7, pc}
 800962e:	bf00      	nop
 8009630:	58024800 	.word	0x58024800

08009634 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8009634:	b580      	push	{r7, lr}
 8009636:	b08c      	sub	sp, #48	; 0x30
 8009638:	af00      	add	r7, sp, #0
 800963a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp1_pllckcfg, temp2_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 800963c:	687b      	ldr	r3, [r7, #4]
 800963e:	2b00      	cmp	r3, #0
 8009640:	d102      	bne.n	8009648 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 8009642:	2301      	movs	r3, #1
 8009644:	f000 bc48 	b.w	8009ed8 <HAL_RCC_OscConfig+0x8a4>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8009648:	687b      	ldr	r3, [r7, #4]
 800964a:	681b      	ldr	r3, [r3, #0]
 800964c:	f003 0301 	and.w	r3, r3, #1
 8009650:	2b00      	cmp	r3, #0
 8009652:	f000 8088 	beq.w	8009766 <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8009656:	4b99      	ldr	r3, [pc, #612]	; (80098bc <HAL_RCC_OscConfig+0x288>)
 8009658:	691b      	ldr	r3, [r3, #16]
 800965a:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800965e:	62fb      	str	r3, [r7, #44]	; 0x2c
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8009660:	4b96      	ldr	r3, [pc, #600]	; (80098bc <HAL_RCC_OscConfig+0x288>)
 8009662:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009664:	62bb      	str	r3, [r7, #40]	; 0x28
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
 8009666:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009668:	2b10      	cmp	r3, #16
 800966a:	d007      	beq.n	800967c <HAL_RCC_OscConfig+0x48>
 800966c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800966e:	2b18      	cmp	r3, #24
 8009670:	d111      	bne.n	8009696 <HAL_RCC_OscConfig+0x62>
 8009672:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009674:	f003 0303 	and.w	r3, r3, #3
 8009678:	2b02      	cmp	r3, #2
 800967a:	d10c      	bne.n	8009696 <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800967c:	4b8f      	ldr	r3, [pc, #572]	; (80098bc <HAL_RCC_OscConfig+0x288>)
 800967e:	681b      	ldr	r3, [r3, #0]
 8009680:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8009684:	2b00      	cmp	r3, #0
 8009686:	d06d      	beq.n	8009764 <HAL_RCC_OscConfig+0x130>
 8009688:	687b      	ldr	r3, [r7, #4]
 800968a:	685b      	ldr	r3, [r3, #4]
 800968c:	2b00      	cmp	r3, #0
 800968e:	d169      	bne.n	8009764 <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 8009690:	2301      	movs	r3, #1
 8009692:	f000 bc21 	b.w	8009ed8 <HAL_RCC_OscConfig+0x8a4>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8009696:	687b      	ldr	r3, [r7, #4]
 8009698:	685b      	ldr	r3, [r3, #4]
 800969a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800969e:	d106      	bne.n	80096ae <HAL_RCC_OscConfig+0x7a>
 80096a0:	4b86      	ldr	r3, [pc, #536]	; (80098bc <HAL_RCC_OscConfig+0x288>)
 80096a2:	681b      	ldr	r3, [r3, #0]
 80096a4:	4a85      	ldr	r2, [pc, #532]	; (80098bc <HAL_RCC_OscConfig+0x288>)
 80096a6:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80096aa:	6013      	str	r3, [r2, #0]
 80096ac:	e02e      	b.n	800970c <HAL_RCC_OscConfig+0xd8>
 80096ae:	687b      	ldr	r3, [r7, #4]
 80096b0:	685b      	ldr	r3, [r3, #4]
 80096b2:	2b00      	cmp	r3, #0
 80096b4:	d10c      	bne.n	80096d0 <HAL_RCC_OscConfig+0x9c>
 80096b6:	4b81      	ldr	r3, [pc, #516]	; (80098bc <HAL_RCC_OscConfig+0x288>)
 80096b8:	681b      	ldr	r3, [r3, #0]
 80096ba:	4a80      	ldr	r2, [pc, #512]	; (80098bc <HAL_RCC_OscConfig+0x288>)
 80096bc:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80096c0:	6013      	str	r3, [r2, #0]
 80096c2:	4b7e      	ldr	r3, [pc, #504]	; (80098bc <HAL_RCC_OscConfig+0x288>)
 80096c4:	681b      	ldr	r3, [r3, #0]
 80096c6:	4a7d      	ldr	r2, [pc, #500]	; (80098bc <HAL_RCC_OscConfig+0x288>)
 80096c8:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80096cc:	6013      	str	r3, [r2, #0]
 80096ce:	e01d      	b.n	800970c <HAL_RCC_OscConfig+0xd8>
 80096d0:	687b      	ldr	r3, [r7, #4]
 80096d2:	685b      	ldr	r3, [r3, #4]
 80096d4:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80096d8:	d10c      	bne.n	80096f4 <HAL_RCC_OscConfig+0xc0>
 80096da:	4b78      	ldr	r3, [pc, #480]	; (80098bc <HAL_RCC_OscConfig+0x288>)
 80096dc:	681b      	ldr	r3, [r3, #0]
 80096de:	4a77      	ldr	r2, [pc, #476]	; (80098bc <HAL_RCC_OscConfig+0x288>)
 80096e0:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80096e4:	6013      	str	r3, [r2, #0]
 80096e6:	4b75      	ldr	r3, [pc, #468]	; (80098bc <HAL_RCC_OscConfig+0x288>)
 80096e8:	681b      	ldr	r3, [r3, #0]
 80096ea:	4a74      	ldr	r2, [pc, #464]	; (80098bc <HAL_RCC_OscConfig+0x288>)
 80096ec:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80096f0:	6013      	str	r3, [r2, #0]
 80096f2:	e00b      	b.n	800970c <HAL_RCC_OscConfig+0xd8>
 80096f4:	4b71      	ldr	r3, [pc, #452]	; (80098bc <HAL_RCC_OscConfig+0x288>)
 80096f6:	681b      	ldr	r3, [r3, #0]
 80096f8:	4a70      	ldr	r2, [pc, #448]	; (80098bc <HAL_RCC_OscConfig+0x288>)
 80096fa:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80096fe:	6013      	str	r3, [r2, #0]
 8009700:	4b6e      	ldr	r3, [pc, #440]	; (80098bc <HAL_RCC_OscConfig+0x288>)
 8009702:	681b      	ldr	r3, [r3, #0]
 8009704:	4a6d      	ldr	r2, [pc, #436]	; (80098bc <HAL_RCC_OscConfig+0x288>)
 8009706:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800970a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800970c:	687b      	ldr	r3, [r7, #4]
 800970e:	685b      	ldr	r3, [r3, #4]
 8009710:	2b00      	cmp	r3, #0
 8009712:	d013      	beq.n	800973c <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8009714:	f7fa f932 	bl	800397c <HAL_GetTick>
 8009718:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 800971a:	e008      	b.n	800972e <HAL_RCC_OscConfig+0xfa>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800971c:	f7fa f92e 	bl	800397c <HAL_GetTick>
 8009720:	4602      	mov	r2, r0
 8009722:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009724:	1ad3      	subs	r3, r2, r3
 8009726:	2b64      	cmp	r3, #100	; 0x64
 8009728:	d901      	bls.n	800972e <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800972a:	2303      	movs	r3, #3
 800972c:	e3d4      	b.n	8009ed8 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 800972e:	4b63      	ldr	r3, [pc, #396]	; (80098bc <HAL_RCC_OscConfig+0x288>)
 8009730:	681b      	ldr	r3, [r3, #0]
 8009732:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8009736:	2b00      	cmp	r3, #0
 8009738:	d0f0      	beq.n	800971c <HAL_RCC_OscConfig+0xe8>
 800973a:	e014      	b.n	8009766 <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800973c:	f7fa f91e 	bl	800397c <HAL_GetTick>
 8009740:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8009742:	e008      	b.n	8009756 <HAL_RCC_OscConfig+0x122>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8009744:	f7fa f91a 	bl	800397c <HAL_GetTick>
 8009748:	4602      	mov	r2, r0
 800974a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800974c:	1ad3      	subs	r3, r2, r3
 800974e:	2b64      	cmp	r3, #100	; 0x64
 8009750:	d901      	bls.n	8009756 <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 8009752:	2303      	movs	r3, #3
 8009754:	e3c0      	b.n	8009ed8 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8009756:	4b59      	ldr	r3, [pc, #356]	; (80098bc <HAL_RCC_OscConfig+0x288>)
 8009758:	681b      	ldr	r3, [r3, #0]
 800975a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800975e:	2b00      	cmp	r3, #0
 8009760:	d1f0      	bne.n	8009744 <HAL_RCC_OscConfig+0x110>
 8009762:	e000      	b.n	8009766 <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8009764:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8009766:	687b      	ldr	r3, [r7, #4]
 8009768:	681b      	ldr	r3, [r3, #0]
 800976a:	f003 0302 	and.w	r3, r3, #2
 800976e:	2b00      	cmp	r3, #0
 8009770:	f000 80ca 	beq.w	8009908 <HAL_RCC_OscConfig+0x2d4>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSICALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* When the HSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8009774:	4b51      	ldr	r3, [pc, #324]	; (80098bc <HAL_RCC_OscConfig+0x288>)
 8009776:	691b      	ldr	r3, [r3, #16]
 8009778:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800977c:	623b      	str	r3, [r7, #32]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 800977e:	4b4f      	ldr	r3, [pc, #316]	; (80098bc <HAL_RCC_OscConfig+0x288>)
 8009780:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009782:	61fb      	str	r3, [r7, #28]
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 8009784:	6a3b      	ldr	r3, [r7, #32]
 8009786:	2b00      	cmp	r3, #0
 8009788:	d007      	beq.n	800979a <HAL_RCC_OscConfig+0x166>
 800978a:	6a3b      	ldr	r3, [r7, #32]
 800978c:	2b18      	cmp	r3, #24
 800978e:	d156      	bne.n	800983e <HAL_RCC_OscConfig+0x20a>
 8009790:	69fb      	ldr	r3, [r7, #28]
 8009792:	f003 0303 	and.w	r3, r3, #3
 8009796:	2b00      	cmp	r3, #0
 8009798:	d151      	bne.n	800983e <HAL_RCC_OscConfig+0x20a>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800979a:	4b48      	ldr	r3, [pc, #288]	; (80098bc <HAL_RCC_OscConfig+0x288>)
 800979c:	681b      	ldr	r3, [r3, #0]
 800979e:	f003 0304 	and.w	r3, r3, #4
 80097a2:	2b00      	cmp	r3, #0
 80097a4:	d005      	beq.n	80097b2 <HAL_RCC_OscConfig+0x17e>
 80097a6:	687b      	ldr	r3, [r7, #4]
 80097a8:	68db      	ldr	r3, [r3, #12]
 80097aa:	2b00      	cmp	r3, #0
 80097ac:	d101      	bne.n	80097b2 <HAL_RCC_OscConfig+0x17e>
      {
        return HAL_ERROR;
 80097ae:	2301      	movs	r3, #1
 80097b0:	e392      	b.n	8009ed8 <HAL_RCC_OscConfig+0x8a4>
      }
      /* Otherwise, only HSI division and calibration are allowed */
      else
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2, HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 80097b2:	4b42      	ldr	r3, [pc, #264]	; (80098bc <HAL_RCC_OscConfig+0x288>)
 80097b4:	681b      	ldr	r3, [r3, #0]
 80097b6:	f023 0219 	bic.w	r2, r3, #25
 80097ba:	687b      	ldr	r3, [r7, #4]
 80097bc:	68db      	ldr	r3, [r3, #12]
 80097be:	493f      	ldr	r1, [pc, #252]	; (80098bc <HAL_RCC_OscConfig+0x288>)
 80097c0:	4313      	orrs	r3, r2
 80097c2:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80097c4:	f7fa f8da 	bl	800397c <HAL_GetTick>
 80097c8:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80097ca:	e008      	b.n	80097de <HAL_RCC_OscConfig+0x1aa>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80097cc:	f7fa f8d6 	bl	800397c <HAL_GetTick>
 80097d0:	4602      	mov	r2, r0
 80097d2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80097d4:	1ad3      	subs	r3, r2, r3
 80097d6:	2b02      	cmp	r3, #2
 80097d8:	d901      	bls.n	80097de <HAL_RCC_OscConfig+0x1aa>
          {
            return HAL_TIMEOUT;
 80097da:	2303      	movs	r3, #3
 80097dc:	e37c      	b.n	8009ed8 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80097de:	4b37      	ldr	r3, [pc, #220]	; (80098bc <HAL_RCC_OscConfig+0x288>)
 80097e0:	681b      	ldr	r3, [r3, #0]
 80097e2:	f003 0304 	and.w	r3, r3, #4
 80097e6:	2b00      	cmp	r3, #0
 80097e8:	d0f0      	beq.n	80097cc <HAL_RCC_OscConfig+0x198>
          }
        }
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80097ea:	f7fa f8f7 	bl	80039dc <HAL_GetREVID>
 80097ee:	4603      	mov	r3, r0
 80097f0:	f241 0203 	movw	r2, #4099	; 0x1003
 80097f4:	4293      	cmp	r3, r2
 80097f6:	d817      	bhi.n	8009828 <HAL_RCC_OscConfig+0x1f4>
 80097f8:	687b      	ldr	r3, [r7, #4]
 80097fa:	691b      	ldr	r3, [r3, #16]
 80097fc:	2b40      	cmp	r3, #64	; 0x40
 80097fe:	d108      	bne.n	8009812 <HAL_RCC_OscConfig+0x1de>
 8009800:	4b2e      	ldr	r3, [pc, #184]	; (80098bc <HAL_RCC_OscConfig+0x288>)
 8009802:	685b      	ldr	r3, [r3, #4]
 8009804:	f423 337c 	bic.w	r3, r3, #258048	; 0x3f000
 8009808:	4a2c      	ldr	r2, [pc, #176]	; (80098bc <HAL_RCC_OscConfig+0x288>)
 800980a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800980e:	6053      	str	r3, [r2, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8009810:	e07a      	b.n	8009908 <HAL_RCC_OscConfig+0x2d4>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8009812:	4b2a      	ldr	r3, [pc, #168]	; (80098bc <HAL_RCC_OscConfig+0x288>)
 8009814:	685b      	ldr	r3, [r3, #4]
 8009816:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 800981a:	687b      	ldr	r3, [r7, #4]
 800981c:	691b      	ldr	r3, [r3, #16]
 800981e:	031b      	lsls	r3, r3, #12
 8009820:	4926      	ldr	r1, [pc, #152]	; (80098bc <HAL_RCC_OscConfig+0x288>)
 8009822:	4313      	orrs	r3, r2
 8009824:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8009826:	e06f      	b.n	8009908 <HAL_RCC_OscConfig+0x2d4>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8009828:	4b24      	ldr	r3, [pc, #144]	; (80098bc <HAL_RCC_OscConfig+0x288>)
 800982a:	685b      	ldr	r3, [r3, #4]
 800982c:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8009830:	687b      	ldr	r3, [r7, #4]
 8009832:	691b      	ldr	r3, [r3, #16]
 8009834:	061b      	lsls	r3, r3, #24
 8009836:	4921      	ldr	r1, [pc, #132]	; (80098bc <HAL_RCC_OscConfig+0x288>)
 8009838:	4313      	orrs	r3, r2
 800983a:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800983c:	e064      	b.n	8009908 <HAL_RCC_OscConfig+0x2d4>
    }

    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 800983e:	687b      	ldr	r3, [r7, #4]
 8009840:	68db      	ldr	r3, [r3, #12]
 8009842:	2b00      	cmp	r3, #0
 8009844:	d047      	beq.n	80098d6 <HAL_RCC_OscConfig+0x2a2>
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2,HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 8009846:	4b1d      	ldr	r3, [pc, #116]	; (80098bc <HAL_RCC_OscConfig+0x288>)
 8009848:	681b      	ldr	r3, [r3, #0]
 800984a:	f023 0219 	bic.w	r2, r3, #25
 800984e:	687b      	ldr	r3, [r7, #4]
 8009850:	68db      	ldr	r3, [r3, #12]
 8009852:	491a      	ldr	r1, [pc, #104]	; (80098bc <HAL_RCC_OscConfig+0x288>)
 8009854:	4313      	orrs	r3, r2
 8009856:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8009858:	f7fa f890 	bl	800397c <HAL_GetTick>
 800985c:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800985e:	e008      	b.n	8009872 <HAL_RCC_OscConfig+0x23e>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8009860:	f7fa f88c 	bl	800397c <HAL_GetTick>
 8009864:	4602      	mov	r2, r0
 8009866:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009868:	1ad3      	subs	r3, r2, r3
 800986a:	2b02      	cmp	r3, #2
 800986c:	d901      	bls.n	8009872 <HAL_RCC_OscConfig+0x23e>
          {
            return HAL_TIMEOUT;
 800986e:	2303      	movs	r3, #3
 8009870:	e332      	b.n	8009ed8 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8009872:	4b12      	ldr	r3, [pc, #72]	; (80098bc <HAL_RCC_OscConfig+0x288>)
 8009874:	681b      	ldr	r3, [r3, #0]
 8009876:	f003 0304 	and.w	r3, r3, #4
 800987a:	2b00      	cmp	r3, #0
 800987c:	d0f0      	beq.n	8009860 <HAL_RCC_OscConfig+0x22c>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800987e:	f7fa f8ad 	bl	80039dc <HAL_GetREVID>
 8009882:	4603      	mov	r3, r0
 8009884:	f241 0203 	movw	r2, #4099	; 0x1003
 8009888:	4293      	cmp	r3, r2
 800988a:	d819      	bhi.n	80098c0 <HAL_RCC_OscConfig+0x28c>
 800988c:	687b      	ldr	r3, [r7, #4]
 800988e:	691b      	ldr	r3, [r3, #16]
 8009890:	2b40      	cmp	r3, #64	; 0x40
 8009892:	d108      	bne.n	80098a6 <HAL_RCC_OscConfig+0x272>
 8009894:	4b09      	ldr	r3, [pc, #36]	; (80098bc <HAL_RCC_OscConfig+0x288>)
 8009896:	685b      	ldr	r3, [r3, #4]
 8009898:	f423 337c 	bic.w	r3, r3, #258048	; 0x3f000
 800989c:	4a07      	ldr	r2, [pc, #28]	; (80098bc <HAL_RCC_OscConfig+0x288>)
 800989e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80098a2:	6053      	str	r3, [r2, #4]
 80098a4:	e030      	b.n	8009908 <HAL_RCC_OscConfig+0x2d4>
 80098a6:	4b05      	ldr	r3, [pc, #20]	; (80098bc <HAL_RCC_OscConfig+0x288>)
 80098a8:	685b      	ldr	r3, [r3, #4]
 80098aa:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 80098ae:	687b      	ldr	r3, [r7, #4]
 80098b0:	691b      	ldr	r3, [r3, #16]
 80098b2:	031b      	lsls	r3, r3, #12
 80098b4:	4901      	ldr	r1, [pc, #4]	; (80098bc <HAL_RCC_OscConfig+0x288>)
 80098b6:	4313      	orrs	r3, r2
 80098b8:	604b      	str	r3, [r1, #4]
 80098ba:	e025      	b.n	8009908 <HAL_RCC_OscConfig+0x2d4>
 80098bc:	58024400 	.word	0x58024400
 80098c0:	4b9a      	ldr	r3, [pc, #616]	; (8009b2c <HAL_RCC_OscConfig+0x4f8>)
 80098c2:	685b      	ldr	r3, [r3, #4]
 80098c4:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 80098c8:	687b      	ldr	r3, [r7, #4]
 80098ca:	691b      	ldr	r3, [r3, #16]
 80098cc:	061b      	lsls	r3, r3, #24
 80098ce:	4997      	ldr	r1, [pc, #604]	; (8009b2c <HAL_RCC_OscConfig+0x4f8>)
 80098d0:	4313      	orrs	r3, r2
 80098d2:	604b      	str	r3, [r1, #4]
 80098d4:	e018      	b.n	8009908 <HAL_RCC_OscConfig+0x2d4>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80098d6:	4b95      	ldr	r3, [pc, #596]	; (8009b2c <HAL_RCC_OscConfig+0x4f8>)
 80098d8:	681b      	ldr	r3, [r3, #0]
 80098da:	4a94      	ldr	r2, [pc, #592]	; (8009b2c <HAL_RCC_OscConfig+0x4f8>)
 80098dc:	f023 0301 	bic.w	r3, r3, #1
 80098e0:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80098e2:	f7fa f84b 	bl	800397c <HAL_GetTick>
 80098e6:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 80098e8:	e008      	b.n	80098fc <HAL_RCC_OscConfig+0x2c8>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80098ea:	f7fa f847 	bl	800397c <HAL_GetTick>
 80098ee:	4602      	mov	r2, r0
 80098f0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80098f2:	1ad3      	subs	r3, r2, r3
 80098f4:	2b02      	cmp	r3, #2
 80098f6:	d901      	bls.n	80098fc <HAL_RCC_OscConfig+0x2c8>
          {
            return HAL_TIMEOUT;
 80098f8:	2303      	movs	r3, #3
 80098fa:	e2ed      	b.n	8009ed8 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 80098fc:	4b8b      	ldr	r3, [pc, #556]	; (8009b2c <HAL_RCC_OscConfig+0x4f8>)
 80098fe:	681b      	ldr	r3, [r3, #0]
 8009900:	f003 0304 	and.w	r3, r3, #4
 8009904:	2b00      	cmp	r3, #0
 8009906:	d1f0      	bne.n	80098ea <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }
  }
  /*----------------------------- CSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 8009908:	687b      	ldr	r3, [r7, #4]
 800990a:	681b      	ldr	r3, [r3, #0]
 800990c:	f003 0310 	and.w	r3, r3, #16
 8009910:	2b00      	cmp	r3, #0
 8009912:	f000 80a9 	beq.w	8009a68 <HAL_RCC_OscConfig+0x434>
    /* Check the parameters */
    assert_param(IS_RCC_CSI(RCC_OscInitStruct->CSIState));
    assert_param(IS_RCC_CSICALIBRATION_VALUE(RCC_OscInitStruct->CSICalibrationValue));

    /* When the CSI is used as system clock it will not disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8009916:	4b85      	ldr	r3, [pc, #532]	; (8009b2c <HAL_RCC_OscConfig+0x4f8>)
 8009918:	691b      	ldr	r3, [r3, #16]
 800991a:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800991e:	61bb      	str	r3, [r7, #24]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8009920:	4b82      	ldr	r3, [pc, #520]	; (8009b2c <HAL_RCC_OscConfig+0x4f8>)
 8009922:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009924:	617b      	str	r3, [r7, #20]
    if ((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
 8009926:	69bb      	ldr	r3, [r7, #24]
 8009928:	2b08      	cmp	r3, #8
 800992a:	d007      	beq.n	800993c <HAL_RCC_OscConfig+0x308>
 800992c:	69bb      	ldr	r3, [r7, #24]
 800992e:	2b18      	cmp	r3, #24
 8009930:	d13a      	bne.n	80099a8 <HAL_RCC_OscConfig+0x374>
 8009932:	697b      	ldr	r3, [r7, #20]
 8009934:	f003 0303 	and.w	r3, r3, #3
 8009938:	2b01      	cmp	r3, #1
 800993a:	d135      	bne.n	80099a8 <HAL_RCC_OscConfig+0x374>
    {
      /* When CSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 800993c:	4b7b      	ldr	r3, [pc, #492]	; (8009b2c <HAL_RCC_OscConfig+0x4f8>)
 800993e:	681b      	ldr	r3, [r3, #0]
 8009940:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8009944:	2b00      	cmp	r3, #0
 8009946:	d005      	beq.n	8009954 <HAL_RCC_OscConfig+0x320>
 8009948:	687b      	ldr	r3, [r7, #4]
 800994a:	69db      	ldr	r3, [r3, #28]
 800994c:	2b80      	cmp	r3, #128	; 0x80
 800994e:	d001      	beq.n	8009954 <HAL_RCC_OscConfig+0x320>
      {
        return HAL_ERROR;
 8009950:	2301      	movs	r3, #1
 8009952:	e2c1      	b.n	8009ed8 <HAL_RCC_OscConfig+0x8a4>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8009954:	f7fa f842 	bl	80039dc <HAL_GetREVID>
 8009958:	4603      	mov	r3, r0
 800995a:	f241 0203 	movw	r2, #4099	; 0x1003
 800995e:	4293      	cmp	r3, r2
 8009960:	d817      	bhi.n	8009992 <HAL_RCC_OscConfig+0x35e>
 8009962:	687b      	ldr	r3, [r7, #4]
 8009964:	6a1b      	ldr	r3, [r3, #32]
 8009966:	2b20      	cmp	r3, #32
 8009968:	d108      	bne.n	800997c <HAL_RCC_OscConfig+0x348>
 800996a:	4b70      	ldr	r3, [pc, #448]	; (8009b2c <HAL_RCC_OscConfig+0x4f8>)
 800996c:	685b      	ldr	r3, [r3, #4]
 800996e:	f023 43f8 	bic.w	r3, r3, #2080374784	; 0x7c000000
 8009972:	4a6e      	ldr	r2, [pc, #440]	; (8009b2c <HAL_RCC_OscConfig+0x4f8>)
 8009974:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8009978:	6053      	str	r3, [r2, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 800997a:	e075      	b.n	8009a68 <HAL_RCC_OscConfig+0x434>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 800997c:	4b6b      	ldr	r3, [pc, #428]	; (8009b2c <HAL_RCC_OscConfig+0x4f8>)
 800997e:	685b      	ldr	r3, [r3, #4]
 8009980:	f023 42f8 	bic.w	r2, r3, #2080374784	; 0x7c000000
 8009984:	687b      	ldr	r3, [r7, #4]
 8009986:	6a1b      	ldr	r3, [r3, #32]
 8009988:	069b      	lsls	r3, r3, #26
 800998a:	4968      	ldr	r1, [pc, #416]	; (8009b2c <HAL_RCC_OscConfig+0x4f8>)
 800998c:	4313      	orrs	r3, r2
 800998e:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8009990:	e06a      	b.n	8009a68 <HAL_RCC_OscConfig+0x434>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8009992:	4b66      	ldr	r3, [pc, #408]	; (8009b2c <HAL_RCC_OscConfig+0x4f8>)
 8009994:	68db      	ldr	r3, [r3, #12]
 8009996:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 800999a:	687b      	ldr	r3, [r7, #4]
 800999c:	6a1b      	ldr	r3, [r3, #32]
 800999e:	061b      	lsls	r3, r3, #24
 80099a0:	4962      	ldr	r1, [pc, #392]	; (8009b2c <HAL_RCC_OscConfig+0x4f8>)
 80099a2:	4313      	orrs	r3, r2
 80099a4:	60cb      	str	r3, [r1, #12]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 80099a6:	e05f      	b.n	8009a68 <HAL_RCC_OscConfig+0x434>
      }
    }
    else
    {
      /* Check the CSI State */
      if ((RCC_OscInitStruct->CSIState) != RCC_CSI_OFF)
 80099a8:	687b      	ldr	r3, [r7, #4]
 80099aa:	69db      	ldr	r3, [r3, #28]
 80099ac:	2b00      	cmp	r3, #0
 80099ae:	d042      	beq.n	8009a36 <HAL_RCC_OscConfig+0x402>
      {
        /* Enable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_ENABLE();
 80099b0:	4b5e      	ldr	r3, [pc, #376]	; (8009b2c <HAL_RCC_OscConfig+0x4f8>)
 80099b2:	681b      	ldr	r3, [r3, #0]
 80099b4:	4a5d      	ldr	r2, [pc, #372]	; (8009b2c <HAL_RCC_OscConfig+0x4f8>)
 80099b6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80099ba:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80099bc:	f7f9 ffde 	bl	800397c <HAL_GetTick>
 80099c0:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 80099c2:	e008      	b.n	80099d6 <HAL_RCC_OscConfig+0x3a2>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 80099c4:	f7f9 ffda 	bl	800397c <HAL_GetTick>
 80099c8:	4602      	mov	r2, r0
 80099ca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80099cc:	1ad3      	subs	r3, r2, r3
 80099ce:	2b02      	cmp	r3, #2
 80099d0:	d901      	bls.n	80099d6 <HAL_RCC_OscConfig+0x3a2>
          {
            return HAL_TIMEOUT;
 80099d2:	2303      	movs	r3, #3
 80099d4:	e280      	b.n	8009ed8 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 80099d6:	4b55      	ldr	r3, [pc, #340]	; (8009b2c <HAL_RCC_OscConfig+0x4f8>)
 80099d8:	681b      	ldr	r3, [r3, #0]
 80099da:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80099de:	2b00      	cmp	r3, #0
 80099e0:	d0f0      	beq.n	80099c4 <HAL_RCC_OscConfig+0x390>
          }
        }

        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 80099e2:	f7f9 fffb 	bl	80039dc <HAL_GetREVID>
 80099e6:	4603      	mov	r3, r0
 80099e8:	f241 0203 	movw	r2, #4099	; 0x1003
 80099ec:	4293      	cmp	r3, r2
 80099ee:	d817      	bhi.n	8009a20 <HAL_RCC_OscConfig+0x3ec>
 80099f0:	687b      	ldr	r3, [r7, #4]
 80099f2:	6a1b      	ldr	r3, [r3, #32]
 80099f4:	2b20      	cmp	r3, #32
 80099f6:	d108      	bne.n	8009a0a <HAL_RCC_OscConfig+0x3d6>
 80099f8:	4b4c      	ldr	r3, [pc, #304]	; (8009b2c <HAL_RCC_OscConfig+0x4f8>)
 80099fa:	685b      	ldr	r3, [r3, #4]
 80099fc:	f023 43f8 	bic.w	r3, r3, #2080374784	; 0x7c000000
 8009a00:	4a4a      	ldr	r2, [pc, #296]	; (8009b2c <HAL_RCC_OscConfig+0x4f8>)
 8009a02:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8009a06:	6053      	str	r3, [r2, #4]
 8009a08:	e02e      	b.n	8009a68 <HAL_RCC_OscConfig+0x434>
 8009a0a:	4b48      	ldr	r3, [pc, #288]	; (8009b2c <HAL_RCC_OscConfig+0x4f8>)
 8009a0c:	685b      	ldr	r3, [r3, #4]
 8009a0e:	f023 42f8 	bic.w	r2, r3, #2080374784	; 0x7c000000
 8009a12:	687b      	ldr	r3, [r7, #4]
 8009a14:	6a1b      	ldr	r3, [r3, #32]
 8009a16:	069b      	lsls	r3, r3, #26
 8009a18:	4944      	ldr	r1, [pc, #272]	; (8009b2c <HAL_RCC_OscConfig+0x4f8>)
 8009a1a:	4313      	orrs	r3, r2
 8009a1c:	604b      	str	r3, [r1, #4]
 8009a1e:	e023      	b.n	8009a68 <HAL_RCC_OscConfig+0x434>
 8009a20:	4b42      	ldr	r3, [pc, #264]	; (8009b2c <HAL_RCC_OscConfig+0x4f8>)
 8009a22:	68db      	ldr	r3, [r3, #12]
 8009a24:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 8009a28:	687b      	ldr	r3, [r7, #4]
 8009a2a:	6a1b      	ldr	r3, [r3, #32]
 8009a2c:	061b      	lsls	r3, r3, #24
 8009a2e:	493f      	ldr	r1, [pc, #252]	; (8009b2c <HAL_RCC_OscConfig+0x4f8>)
 8009a30:	4313      	orrs	r3, r2
 8009a32:	60cb      	str	r3, [r1, #12]
 8009a34:	e018      	b.n	8009a68 <HAL_RCC_OscConfig+0x434>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_DISABLE();
 8009a36:	4b3d      	ldr	r3, [pc, #244]	; (8009b2c <HAL_RCC_OscConfig+0x4f8>)
 8009a38:	681b      	ldr	r3, [r3, #0]
 8009a3a:	4a3c      	ldr	r2, [pc, #240]	; (8009b2c <HAL_RCC_OscConfig+0x4f8>)
 8009a3c:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8009a40:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8009a42:	f7f9 ff9b 	bl	800397c <HAL_GetTick>
 8009a46:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8009a48:	e008      	b.n	8009a5c <HAL_RCC_OscConfig+0x428>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 8009a4a:	f7f9 ff97 	bl	800397c <HAL_GetTick>
 8009a4e:	4602      	mov	r2, r0
 8009a50:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009a52:	1ad3      	subs	r3, r2, r3
 8009a54:	2b02      	cmp	r3, #2
 8009a56:	d901      	bls.n	8009a5c <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8009a58:	2303      	movs	r3, #3
 8009a5a:	e23d      	b.n	8009ed8 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8009a5c:	4b33      	ldr	r3, [pc, #204]	; (8009b2c <HAL_RCC_OscConfig+0x4f8>)
 8009a5e:	681b      	ldr	r3, [r3, #0]
 8009a60:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8009a64:	2b00      	cmp	r3, #0
 8009a66:	d1f0      	bne.n	8009a4a <HAL_RCC_OscConfig+0x416>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8009a68:	687b      	ldr	r3, [r7, #4]
 8009a6a:	681b      	ldr	r3, [r3, #0]
 8009a6c:	f003 0308 	and.w	r3, r3, #8
 8009a70:	2b00      	cmp	r3, #0
 8009a72:	d036      	beq.n	8009ae2 <HAL_RCC_OscConfig+0x4ae>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8009a74:	687b      	ldr	r3, [r7, #4]
 8009a76:	695b      	ldr	r3, [r3, #20]
 8009a78:	2b00      	cmp	r3, #0
 8009a7a:	d019      	beq.n	8009ab0 <HAL_RCC_OscConfig+0x47c>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8009a7c:	4b2b      	ldr	r3, [pc, #172]	; (8009b2c <HAL_RCC_OscConfig+0x4f8>)
 8009a7e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8009a80:	4a2a      	ldr	r2, [pc, #168]	; (8009b2c <HAL_RCC_OscConfig+0x4f8>)
 8009a82:	f043 0301 	orr.w	r3, r3, #1
 8009a86:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8009a88:	f7f9 ff78 	bl	800397c <HAL_GetTick>
 8009a8c:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8009a8e:	e008      	b.n	8009aa2 <HAL_RCC_OscConfig+0x46e>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8009a90:	f7f9 ff74 	bl	800397c <HAL_GetTick>
 8009a94:	4602      	mov	r2, r0
 8009a96:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009a98:	1ad3      	subs	r3, r2, r3
 8009a9a:	2b02      	cmp	r3, #2
 8009a9c:	d901      	bls.n	8009aa2 <HAL_RCC_OscConfig+0x46e>
        {
          return HAL_TIMEOUT;
 8009a9e:	2303      	movs	r3, #3
 8009aa0:	e21a      	b.n	8009ed8 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8009aa2:	4b22      	ldr	r3, [pc, #136]	; (8009b2c <HAL_RCC_OscConfig+0x4f8>)
 8009aa4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8009aa6:	f003 0302 	and.w	r3, r3, #2
 8009aaa:	2b00      	cmp	r3, #0
 8009aac:	d0f0      	beq.n	8009a90 <HAL_RCC_OscConfig+0x45c>
 8009aae:	e018      	b.n	8009ae2 <HAL_RCC_OscConfig+0x4ae>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8009ab0:	4b1e      	ldr	r3, [pc, #120]	; (8009b2c <HAL_RCC_OscConfig+0x4f8>)
 8009ab2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8009ab4:	4a1d      	ldr	r2, [pc, #116]	; (8009b2c <HAL_RCC_OscConfig+0x4f8>)
 8009ab6:	f023 0301 	bic.w	r3, r3, #1
 8009aba:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8009abc:	f7f9 ff5e 	bl	800397c <HAL_GetTick>
 8009ac0:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8009ac2:	e008      	b.n	8009ad6 <HAL_RCC_OscConfig+0x4a2>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8009ac4:	f7f9 ff5a 	bl	800397c <HAL_GetTick>
 8009ac8:	4602      	mov	r2, r0
 8009aca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009acc:	1ad3      	subs	r3, r2, r3
 8009ace:	2b02      	cmp	r3, #2
 8009ad0:	d901      	bls.n	8009ad6 <HAL_RCC_OscConfig+0x4a2>
        {
          return HAL_TIMEOUT;
 8009ad2:	2303      	movs	r3, #3
 8009ad4:	e200      	b.n	8009ed8 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8009ad6:	4b15      	ldr	r3, [pc, #84]	; (8009b2c <HAL_RCC_OscConfig+0x4f8>)
 8009ad8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8009ada:	f003 0302 	and.w	r3, r3, #2
 8009ade:	2b00      	cmp	r3, #0
 8009ae0:	d1f0      	bne.n	8009ac4 <HAL_RCC_OscConfig+0x490>
      }
    }
  }

  /*------------------------------ HSI48 Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8009ae2:	687b      	ldr	r3, [r7, #4]
 8009ae4:	681b      	ldr	r3, [r3, #0]
 8009ae6:	f003 0320 	and.w	r3, r3, #32
 8009aea:	2b00      	cmp	r3, #0
 8009aec:	d039      	beq.n	8009b62 <HAL_RCC_OscConfig+0x52e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if ((RCC_OscInitStruct->HSI48State) != RCC_HSI48_OFF)
 8009aee:	687b      	ldr	r3, [r7, #4]
 8009af0:	699b      	ldr	r3, [r3, #24]
 8009af2:	2b00      	cmp	r3, #0
 8009af4:	d01c      	beq.n	8009b30 <HAL_RCC_OscConfig+0x4fc>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8009af6:	4b0d      	ldr	r3, [pc, #52]	; (8009b2c <HAL_RCC_OscConfig+0x4f8>)
 8009af8:	681b      	ldr	r3, [r3, #0]
 8009afa:	4a0c      	ldr	r2, [pc, #48]	; (8009b2c <HAL_RCC_OscConfig+0x4f8>)
 8009afc:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8009b00:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8009b02:	f7f9 ff3b 	bl	800397c <HAL_GetTick>
 8009b06:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8009b08:	e008      	b.n	8009b1c <HAL_RCC_OscConfig+0x4e8>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8009b0a:	f7f9 ff37 	bl	800397c <HAL_GetTick>
 8009b0e:	4602      	mov	r2, r0
 8009b10:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009b12:	1ad3      	subs	r3, r2, r3
 8009b14:	2b02      	cmp	r3, #2
 8009b16:	d901      	bls.n	8009b1c <HAL_RCC_OscConfig+0x4e8>
        {
          return HAL_TIMEOUT;
 8009b18:	2303      	movs	r3, #3
 8009b1a:	e1dd      	b.n	8009ed8 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8009b1c:	4b03      	ldr	r3, [pc, #12]	; (8009b2c <HAL_RCC_OscConfig+0x4f8>)
 8009b1e:	681b      	ldr	r3, [r3, #0]
 8009b20:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8009b24:	2b00      	cmp	r3, #0
 8009b26:	d0f0      	beq.n	8009b0a <HAL_RCC_OscConfig+0x4d6>
 8009b28:	e01b      	b.n	8009b62 <HAL_RCC_OscConfig+0x52e>
 8009b2a:	bf00      	nop
 8009b2c:	58024400 	.word	0x58024400
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8009b30:	4b9b      	ldr	r3, [pc, #620]	; (8009da0 <HAL_RCC_OscConfig+0x76c>)
 8009b32:	681b      	ldr	r3, [r3, #0]
 8009b34:	4a9a      	ldr	r2, [pc, #616]	; (8009da0 <HAL_RCC_OscConfig+0x76c>)
 8009b36:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8009b3a:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8009b3c:	f7f9 ff1e 	bl	800397c <HAL_GetTick>
 8009b40:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8009b42:	e008      	b.n	8009b56 <HAL_RCC_OscConfig+0x522>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8009b44:	f7f9 ff1a 	bl	800397c <HAL_GetTick>
 8009b48:	4602      	mov	r2, r0
 8009b4a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009b4c:	1ad3      	subs	r3, r2, r3
 8009b4e:	2b02      	cmp	r3, #2
 8009b50:	d901      	bls.n	8009b56 <HAL_RCC_OscConfig+0x522>
        {
          return HAL_TIMEOUT;
 8009b52:	2303      	movs	r3, #3
 8009b54:	e1c0      	b.n	8009ed8 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8009b56:	4b92      	ldr	r3, [pc, #584]	; (8009da0 <HAL_RCC_OscConfig+0x76c>)
 8009b58:	681b      	ldr	r3, [r3, #0]
 8009b5a:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8009b5e:	2b00      	cmp	r3, #0
 8009b60:	d1f0      	bne.n	8009b44 <HAL_RCC_OscConfig+0x510>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8009b62:	687b      	ldr	r3, [r7, #4]
 8009b64:	681b      	ldr	r3, [r3, #0]
 8009b66:	f003 0304 	and.w	r3, r3, #4
 8009b6a:	2b00      	cmp	r3, #0
 8009b6c:	f000 8081 	beq.w	8009c72 <HAL_RCC_OscConfig+0x63e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 8009b70:	4b8c      	ldr	r3, [pc, #560]	; (8009da4 <HAL_RCC_OscConfig+0x770>)
 8009b72:	681b      	ldr	r3, [r3, #0]
 8009b74:	4a8b      	ldr	r2, [pc, #556]	; (8009da4 <HAL_RCC_OscConfig+0x770>)
 8009b76:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8009b7a:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8009b7c:	f7f9 fefe 	bl	800397c <HAL_GetTick>
 8009b80:	6278      	str	r0, [r7, #36]	; 0x24

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8009b82:	e008      	b.n	8009b96 <HAL_RCC_OscConfig+0x562>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8009b84:	f7f9 fefa 	bl	800397c <HAL_GetTick>
 8009b88:	4602      	mov	r2, r0
 8009b8a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009b8c:	1ad3      	subs	r3, r2, r3
 8009b8e:	2b64      	cmp	r3, #100	; 0x64
 8009b90:	d901      	bls.n	8009b96 <HAL_RCC_OscConfig+0x562>
      {
        return HAL_TIMEOUT;
 8009b92:	2303      	movs	r3, #3
 8009b94:	e1a0      	b.n	8009ed8 <HAL_RCC_OscConfig+0x8a4>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8009b96:	4b83      	ldr	r3, [pc, #524]	; (8009da4 <HAL_RCC_OscConfig+0x770>)
 8009b98:	681b      	ldr	r3, [r3, #0]
 8009b9a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8009b9e:	2b00      	cmp	r3, #0
 8009ba0:	d0f0      	beq.n	8009b84 <HAL_RCC_OscConfig+0x550>
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8009ba2:	687b      	ldr	r3, [r7, #4]
 8009ba4:	689b      	ldr	r3, [r3, #8]
 8009ba6:	2b01      	cmp	r3, #1
 8009ba8:	d106      	bne.n	8009bb8 <HAL_RCC_OscConfig+0x584>
 8009baa:	4b7d      	ldr	r3, [pc, #500]	; (8009da0 <HAL_RCC_OscConfig+0x76c>)
 8009bac:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009bae:	4a7c      	ldr	r2, [pc, #496]	; (8009da0 <HAL_RCC_OscConfig+0x76c>)
 8009bb0:	f043 0301 	orr.w	r3, r3, #1
 8009bb4:	6713      	str	r3, [r2, #112]	; 0x70
 8009bb6:	e02d      	b.n	8009c14 <HAL_RCC_OscConfig+0x5e0>
 8009bb8:	687b      	ldr	r3, [r7, #4]
 8009bba:	689b      	ldr	r3, [r3, #8]
 8009bbc:	2b00      	cmp	r3, #0
 8009bbe:	d10c      	bne.n	8009bda <HAL_RCC_OscConfig+0x5a6>
 8009bc0:	4b77      	ldr	r3, [pc, #476]	; (8009da0 <HAL_RCC_OscConfig+0x76c>)
 8009bc2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009bc4:	4a76      	ldr	r2, [pc, #472]	; (8009da0 <HAL_RCC_OscConfig+0x76c>)
 8009bc6:	f023 0301 	bic.w	r3, r3, #1
 8009bca:	6713      	str	r3, [r2, #112]	; 0x70
 8009bcc:	4b74      	ldr	r3, [pc, #464]	; (8009da0 <HAL_RCC_OscConfig+0x76c>)
 8009bce:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009bd0:	4a73      	ldr	r2, [pc, #460]	; (8009da0 <HAL_RCC_OscConfig+0x76c>)
 8009bd2:	f023 0304 	bic.w	r3, r3, #4
 8009bd6:	6713      	str	r3, [r2, #112]	; 0x70
 8009bd8:	e01c      	b.n	8009c14 <HAL_RCC_OscConfig+0x5e0>
 8009bda:	687b      	ldr	r3, [r7, #4]
 8009bdc:	689b      	ldr	r3, [r3, #8]
 8009bde:	2b05      	cmp	r3, #5
 8009be0:	d10c      	bne.n	8009bfc <HAL_RCC_OscConfig+0x5c8>
 8009be2:	4b6f      	ldr	r3, [pc, #444]	; (8009da0 <HAL_RCC_OscConfig+0x76c>)
 8009be4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009be6:	4a6e      	ldr	r2, [pc, #440]	; (8009da0 <HAL_RCC_OscConfig+0x76c>)
 8009be8:	f043 0304 	orr.w	r3, r3, #4
 8009bec:	6713      	str	r3, [r2, #112]	; 0x70
 8009bee:	4b6c      	ldr	r3, [pc, #432]	; (8009da0 <HAL_RCC_OscConfig+0x76c>)
 8009bf0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009bf2:	4a6b      	ldr	r2, [pc, #428]	; (8009da0 <HAL_RCC_OscConfig+0x76c>)
 8009bf4:	f043 0301 	orr.w	r3, r3, #1
 8009bf8:	6713      	str	r3, [r2, #112]	; 0x70
 8009bfa:	e00b      	b.n	8009c14 <HAL_RCC_OscConfig+0x5e0>
 8009bfc:	4b68      	ldr	r3, [pc, #416]	; (8009da0 <HAL_RCC_OscConfig+0x76c>)
 8009bfe:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009c00:	4a67      	ldr	r2, [pc, #412]	; (8009da0 <HAL_RCC_OscConfig+0x76c>)
 8009c02:	f023 0301 	bic.w	r3, r3, #1
 8009c06:	6713      	str	r3, [r2, #112]	; 0x70
 8009c08:	4b65      	ldr	r3, [pc, #404]	; (8009da0 <HAL_RCC_OscConfig+0x76c>)
 8009c0a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009c0c:	4a64      	ldr	r2, [pc, #400]	; (8009da0 <HAL_RCC_OscConfig+0x76c>)
 8009c0e:	f023 0304 	bic.w	r3, r3, #4
 8009c12:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8009c14:	687b      	ldr	r3, [r7, #4]
 8009c16:	689b      	ldr	r3, [r3, #8]
 8009c18:	2b00      	cmp	r3, #0
 8009c1a:	d015      	beq.n	8009c48 <HAL_RCC_OscConfig+0x614>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8009c1c:	f7f9 feae 	bl	800397c <HAL_GetTick>
 8009c20:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8009c22:	e00a      	b.n	8009c3a <HAL_RCC_OscConfig+0x606>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8009c24:	f7f9 feaa 	bl	800397c <HAL_GetTick>
 8009c28:	4602      	mov	r2, r0
 8009c2a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009c2c:	1ad3      	subs	r3, r2, r3
 8009c2e:	f241 3288 	movw	r2, #5000	; 0x1388
 8009c32:	4293      	cmp	r3, r2
 8009c34:	d901      	bls.n	8009c3a <HAL_RCC_OscConfig+0x606>
        {
          return HAL_TIMEOUT;
 8009c36:	2303      	movs	r3, #3
 8009c38:	e14e      	b.n	8009ed8 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8009c3a:	4b59      	ldr	r3, [pc, #356]	; (8009da0 <HAL_RCC_OscConfig+0x76c>)
 8009c3c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009c3e:	f003 0302 	and.w	r3, r3, #2
 8009c42:	2b00      	cmp	r3, #0
 8009c44:	d0ee      	beq.n	8009c24 <HAL_RCC_OscConfig+0x5f0>
 8009c46:	e014      	b.n	8009c72 <HAL_RCC_OscConfig+0x63e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8009c48:	f7f9 fe98 	bl	800397c <HAL_GetTick>
 8009c4c:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8009c4e:	e00a      	b.n	8009c66 <HAL_RCC_OscConfig+0x632>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8009c50:	f7f9 fe94 	bl	800397c <HAL_GetTick>
 8009c54:	4602      	mov	r2, r0
 8009c56:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009c58:	1ad3      	subs	r3, r2, r3
 8009c5a:	f241 3288 	movw	r2, #5000	; 0x1388
 8009c5e:	4293      	cmp	r3, r2
 8009c60:	d901      	bls.n	8009c66 <HAL_RCC_OscConfig+0x632>
        {
          return HAL_TIMEOUT;
 8009c62:	2303      	movs	r3, #3
 8009c64:	e138      	b.n	8009ed8 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8009c66:	4b4e      	ldr	r3, [pc, #312]	; (8009da0 <HAL_RCC_OscConfig+0x76c>)
 8009c68:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009c6a:	f003 0302 	and.w	r3, r3, #2
 8009c6e:	2b00      	cmp	r3, #0
 8009c70:	d1ee      	bne.n	8009c50 <HAL_RCC_OscConfig+0x61c>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8009c72:	687b      	ldr	r3, [r7, #4]
 8009c74:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009c76:	2b00      	cmp	r3, #0
 8009c78:	f000 812d 	beq.w	8009ed6 <HAL_RCC_OscConfig+0x8a2>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL1)
 8009c7c:	4b48      	ldr	r3, [pc, #288]	; (8009da0 <HAL_RCC_OscConfig+0x76c>)
 8009c7e:	691b      	ldr	r3, [r3, #16]
 8009c80:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8009c84:	2b18      	cmp	r3, #24
 8009c86:	f000 80bd 	beq.w	8009e04 <HAL_RCC_OscConfig+0x7d0>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8009c8a:	687b      	ldr	r3, [r7, #4]
 8009c8c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009c8e:	2b02      	cmp	r3, #2
 8009c90:	f040 809e 	bne.w	8009dd0 <HAL_RCC_OscConfig+0x79c>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
        assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8009c94:	4b42      	ldr	r3, [pc, #264]	; (8009da0 <HAL_RCC_OscConfig+0x76c>)
 8009c96:	681b      	ldr	r3, [r3, #0]
 8009c98:	4a41      	ldr	r2, [pc, #260]	; (8009da0 <HAL_RCC_OscConfig+0x76c>)
 8009c9a:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8009c9e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8009ca0:	f7f9 fe6c 	bl	800397c <HAL_GetTick>
 8009ca4:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8009ca6:	e008      	b.n	8009cba <HAL_RCC_OscConfig+0x686>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8009ca8:	f7f9 fe68 	bl	800397c <HAL_GetTick>
 8009cac:	4602      	mov	r2, r0
 8009cae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009cb0:	1ad3      	subs	r3, r2, r3
 8009cb2:	2b02      	cmp	r3, #2
 8009cb4:	d901      	bls.n	8009cba <HAL_RCC_OscConfig+0x686>
          {
            return HAL_TIMEOUT;
 8009cb6:	2303      	movs	r3, #3
 8009cb8:	e10e      	b.n	8009ed8 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8009cba:	4b39      	ldr	r3, [pc, #228]	; (8009da0 <HAL_RCC_OscConfig+0x76c>)
 8009cbc:	681b      	ldr	r3, [r3, #0]
 8009cbe:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8009cc2:	2b00      	cmp	r3, #0
 8009cc4:	d1f0      	bne.n	8009ca8 <HAL_RCC_OscConfig+0x674>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8009cc6:	4b36      	ldr	r3, [pc, #216]	; (8009da0 <HAL_RCC_OscConfig+0x76c>)
 8009cc8:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8009cca:	4b37      	ldr	r3, [pc, #220]	; (8009da8 <HAL_RCC_OscConfig+0x774>)
 8009ccc:	4013      	ands	r3, r2
 8009cce:	687a      	ldr	r2, [r7, #4]
 8009cd0:	6a91      	ldr	r1, [r2, #40]	; 0x28
 8009cd2:	687a      	ldr	r2, [r7, #4]
 8009cd4:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 8009cd6:	0112      	lsls	r2, r2, #4
 8009cd8:	430a      	orrs	r2, r1
 8009cda:	4931      	ldr	r1, [pc, #196]	; (8009da0 <HAL_RCC_OscConfig+0x76c>)
 8009cdc:	4313      	orrs	r3, r2
 8009cde:	628b      	str	r3, [r1, #40]	; 0x28
 8009ce0:	687b      	ldr	r3, [r7, #4]
 8009ce2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009ce4:	3b01      	subs	r3, #1
 8009ce6:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8009cea:	687b      	ldr	r3, [r7, #4]
 8009cec:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009cee:	3b01      	subs	r3, #1
 8009cf0:	025b      	lsls	r3, r3, #9
 8009cf2:	b29b      	uxth	r3, r3
 8009cf4:	431a      	orrs	r2, r3
 8009cf6:	687b      	ldr	r3, [r7, #4]
 8009cf8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009cfa:	3b01      	subs	r3, #1
 8009cfc:	041b      	lsls	r3, r3, #16
 8009cfe:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 8009d02:	431a      	orrs	r2, r3
 8009d04:	687b      	ldr	r3, [r7, #4]
 8009d06:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8009d08:	3b01      	subs	r3, #1
 8009d0a:	061b      	lsls	r3, r3, #24
 8009d0c:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 8009d10:	4923      	ldr	r1, [pc, #140]	; (8009da0 <HAL_RCC_OscConfig+0x76c>)
 8009d12:	4313      	orrs	r3, r2
 8009d14:	630b      	str	r3, [r1, #48]	; 0x30
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Disable PLLFRACN . */
        __HAL_RCC_PLLFRACN_DISABLE();
 8009d16:	4b22      	ldr	r3, [pc, #136]	; (8009da0 <HAL_RCC_OscConfig+0x76c>)
 8009d18:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009d1a:	4a21      	ldr	r2, [pc, #132]	; (8009da0 <HAL_RCC_OscConfig+0x76c>)
 8009d1c:	f023 0301 	bic.w	r3, r3, #1
 8009d20:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Configure PLL PLL1FRACN */
        __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 8009d22:	4b1f      	ldr	r3, [pc, #124]	; (8009da0 <HAL_RCC_OscConfig+0x76c>)
 8009d24:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8009d26:	4b21      	ldr	r3, [pc, #132]	; (8009dac <HAL_RCC_OscConfig+0x778>)
 8009d28:	4013      	ands	r3, r2
 8009d2a:	687a      	ldr	r2, [r7, #4]
 8009d2c:	6c92      	ldr	r2, [r2, #72]	; 0x48
 8009d2e:	00d2      	lsls	r2, r2, #3
 8009d30:	491b      	ldr	r1, [pc, #108]	; (8009da0 <HAL_RCC_OscConfig+0x76c>)
 8009d32:	4313      	orrs	r3, r2
 8009d34:	634b      	str	r3, [r1, #52]	; 0x34

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL_VCIRANGE(RCC_OscInitStruct->PLL.PLLRGE) ;
 8009d36:	4b1a      	ldr	r3, [pc, #104]	; (8009da0 <HAL_RCC_OscConfig+0x76c>)
 8009d38:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009d3a:	f023 020c 	bic.w	r2, r3, #12
 8009d3e:	687b      	ldr	r3, [r7, #4]
 8009d40:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009d42:	4917      	ldr	r1, [pc, #92]	; (8009da0 <HAL_RCC_OscConfig+0x76c>)
 8009d44:	4313      	orrs	r3, r2
 8009d46:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Select PLL1 output frequency range : VCO */
        __HAL_RCC_PLL_VCORANGE(RCC_OscInitStruct->PLL.PLLVCOSEL) ;
 8009d48:	4b15      	ldr	r3, [pc, #84]	; (8009da0 <HAL_RCC_OscConfig+0x76c>)
 8009d4a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009d4c:	f023 0202 	bic.w	r2, r3, #2
 8009d50:	687b      	ldr	r3, [r7, #4]
 8009d52:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8009d54:	4912      	ldr	r1, [pc, #72]	; (8009da0 <HAL_RCC_OscConfig+0x76c>)
 8009d56:	4313      	orrs	r3, r2
 8009d58:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Enable PLL System Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 8009d5a:	4b11      	ldr	r3, [pc, #68]	; (8009da0 <HAL_RCC_OscConfig+0x76c>)
 8009d5c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009d5e:	4a10      	ldr	r2, [pc, #64]	; (8009da0 <HAL_RCC_OscConfig+0x76c>)
 8009d60:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8009d64:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1Q Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8009d66:	4b0e      	ldr	r3, [pc, #56]	; (8009da0 <HAL_RCC_OscConfig+0x76c>)
 8009d68:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009d6a:	4a0d      	ldr	r2, [pc, #52]	; (8009da0 <HAL_RCC_OscConfig+0x76c>)
 8009d6c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8009d70:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1R  Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 8009d72:	4b0b      	ldr	r3, [pc, #44]	; (8009da0 <HAL_RCC_OscConfig+0x76c>)
 8009d74:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009d76:	4a0a      	ldr	r2, [pc, #40]	; (8009da0 <HAL_RCC_OscConfig+0x76c>)
 8009d78:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8009d7c:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1FRACN . */
        __HAL_RCC_PLLFRACN_ENABLE();
 8009d7e:	4b08      	ldr	r3, [pc, #32]	; (8009da0 <HAL_RCC_OscConfig+0x76c>)
 8009d80:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009d82:	4a07      	ldr	r2, [pc, #28]	; (8009da0 <HAL_RCC_OscConfig+0x76c>)
 8009d84:	f043 0301 	orr.w	r3, r3, #1
 8009d88:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8009d8a:	4b05      	ldr	r3, [pc, #20]	; (8009da0 <HAL_RCC_OscConfig+0x76c>)
 8009d8c:	681b      	ldr	r3, [r3, #0]
 8009d8e:	4a04      	ldr	r2, [pc, #16]	; (8009da0 <HAL_RCC_OscConfig+0x76c>)
 8009d90:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8009d94:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8009d96:	f7f9 fdf1 	bl	800397c <HAL_GetTick>
 8009d9a:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8009d9c:	e011      	b.n	8009dc2 <HAL_RCC_OscConfig+0x78e>
 8009d9e:	bf00      	nop
 8009da0:	58024400 	.word	0x58024400
 8009da4:	58024800 	.word	0x58024800
 8009da8:	fffffc0c 	.word	0xfffffc0c
 8009dac:	ffff0007 	.word	0xffff0007
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8009db0:	f7f9 fde4 	bl	800397c <HAL_GetTick>
 8009db4:	4602      	mov	r2, r0
 8009db6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009db8:	1ad3      	subs	r3, r2, r3
 8009dba:	2b02      	cmp	r3, #2
 8009dbc:	d901      	bls.n	8009dc2 <HAL_RCC_OscConfig+0x78e>
          {
            return HAL_TIMEOUT;
 8009dbe:	2303      	movs	r3, #3
 8009dc0:	e08a      	b.n	8009ed8 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8009dc2:	4b47      	ldr	r3, [pc, #284]	; (8009ee0 <HAL_RCC_OscConfig+0x8ac>)
 8009dc4:	681b      	ldr	r3, [r3, #0]
 8009dc6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8009dca:	2b00      	cmp	r3, #0
 8009dcc:	d0f0      	beq.n	8009db0 <HAL_RCC_OscConfig+0x77c>
 8009dce:	e082      	b.n	8009ed6 <HAL_RCC_OscConfig+0x8a2>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8009dd0:	4b43      	ldr	r3, [pc, #268]	; (8009ee0 <HAL_RCC_OscConfig+0x8ac>)
 8009dd2:	681b      	ldr	r3, [r3, #0]
 8009dd4:	4a42      	ldr	r2, [pc, #264]	; (8009ee0 <HAL_RCC_OscConfig+0x8ac>)
 8009dd6:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8009dda:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8009ddc:	f7f9 fdce 	bl	800397c <HAL_GetTick>
 8009de0:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8009de2:	e008      	b.n	8009df6 <HAL_RCC_OscConfig+0x7c2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8009de4:	f7f9 fdca 	bl	800397c <HAL_GetTick>
 8009de8:	4602      	mov	r2, r0
 8009dea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009dec:	1ad3      	subs	r3, r2, r3
 8009dee:	2b02      	cmp	r3, #2
 8009df0:	d901      	bls.n	8009df6 <HAL_RCC_OscConfig+0x7c2>
          {
            return HAL_TIMEOUT;
 8009df2:	2303      	movs	r3, #3
 8009df4:	e070      	b.n	8009ed8 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8009df6:	4b3a      	ldr	r3, [pc, #232]	; (8009ee0 <HAL_RCC_OscConfig+0x8ac>)
 8009df8:	681b      	ldr	r3, [r3, #0]
 8009dfa:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8009dfe:	2b00      	cmp	r3, #0
 8009e00:	d1f0      	bne.n	8009de4 <HAL_RCC_OscConfig+0x7b0>
 8009e02:	e068      	b.n	8009ed6 <HAL_RCC_OscConfig+0x8a2>
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLLCKSELR;
 8009e04:	4b36      	ldr	r3, [pc, #216]	; (8009ee0 <HAL_RCC_OscConfig+0x8ac>)
 8009e06:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009e08:	613b      	str	r3, [r7, #16]
      temp2_pllckcfg = RCC->PLL1DIVR;
 8009e0a:	4b35      	ldr	r3, [pc, #212]	; (8009ee0 <HAL_RCC_OscConfig+0x8ac>)
 8009e0c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009e0e:	60fb      	str	r3, [r7, #12]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8009e10:	687b      	ldr	r3, [r7, #4]
 8009e12:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009e14:	2b01      	cmp	r3, #1
 8009e16:	d031      	beq.n	8009e7c <HAL_RCC_OscConfig+0x848>
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8009e18:	693b      	ldr	r3, [r7, #16]
 8009e1a:	f003 0203 	and.w	r2, r3, #3
 8009e1e:	687b      	ldr	r3, [r7, #4]
 8009e20:	6a9b      	ldr	r3, [r3, #40]	; 0x28
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8009e22:	429a      	cmp	r2, r3
 8009e24:	d12a      	bne.n	8009e7c <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 8009e26:	693b      	ldr	r3, [r7, #16]
 8009e28:	091b      	lsrs	r3, r3, #4
 8009e2a:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8009e2e:	687b      	ldr	r3, [r7, #4]
 8009e30:	6adb      	ldr	r3, [r3, #44]	; 0x2c
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8009e32:	429a      	cmp	r2, r3
 8009e34:	d122      	bne.n	8009e7c <HAL_RCC_OscConfig+0x848>
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8009e36:	68fb      	ldr	r3, [r7, #12]
 8009e38:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8009e3c:	687b      	ldr	r3, [r7, #4]
 8009e3e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009e40:	3b01      	subs	r3, #1
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 8009e42:	429a      	cmp	r2, r3
 8009e44:	d11a      	bne.n	8009e7c <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8009e46:	68fb      	ldr	r3, [r7, #12]
 8009e48:	0a5b      	lsrs	r3, r3, #9
 8009e4a:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8009e4e:	687b      	ldr	r3, [r7, #4]
 8009e50:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009e52:	3b01      	subs	r3, #1
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8009e54:	429a      	cmp	r2, r3
 8009e56:	d111      	bne.n	8009e7c <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8009e58:	68fb      	ldr	r3, [r7, #12]
 8009e5a:	0c1b      	lsrs	r3, r3, #16
 8009e5c:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8009e60:	687b      	ldr	r3, [r7, #4]
 8009e62:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009e64:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8009e66:	429a      	cmp	r2, r3
 8009e68:	d108      	bne.n	8009e7c <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_R1) >> RCC_PLL1DIVR_R1_Pos) != (RCC_OscInitStruct->PLL.PLLR - 1U)))
 8009e6a:	68fb      	ldr	r3, [r7, #12]
 8009e6c:	0e1b      	lsrs	r3, r3, #24
 8009e6e:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8009e72:	687b      	ldr	r3, [r7, #4]
 8009e74:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8009e76:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8009e78:	429a      	cmp	r2, r3
 8009e7a:	d001      	beq.n	8009e80 <HAL_RCC_OscConfig+0x84c>
      {
        return HAL_ERROR;
 8009e7c:	2301      	movs	r3, #1
 8009e7e:	e02b      	b.n	8009ed8 <HAL_RCC_OscConfig+0x8a4>
      }
      else
      {
        /* Check if only fractional part needs to be updated  */
        temp1_pllckcfg = ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> RCC_PLL1FRACR_FRACN1_Pos);
 8009e80:	4b17      	ldr	r3, [pc, #92]	; (8009ee0 <HAL_RCC_OscConfig+0x8ac>)
 8009e82:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009e84:	08db      	lsrs	r3, r3, #3
 8009e86:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8009e8a:	613b      	str	r3, [r7, #16]
        if (RCC_OscInitStruct->PLL.PLLFRACN != temp1_pllckcfg)
 8009e8c:	687b      	ldr	r3, [r7, #4]
 8009e8e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8009e90:	693a      	ldr	r2, [r7, #16]
 8009e92:	429a      	cmp	r2, r3
 8009e94:	d01f      	beq.n	8009ed6 <HAL_RCC_OscConfig+0x8a2>
        {
          assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));
          /* Disable PLL1FRACEN */
          __HAL_RCC_PLLFRACN_DISABLE();
 8009e96:	4b12      	ldr	r3, [pc, #72]	; (8009ee0 <HAL_RCC_OscConfig+0x8ac>)
 8009e98:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009e9a:	4a11      	ldr	r2, [pc, #68]	; (8009ee0 <HAL_RCC_OscConfig+0x8ac>)
 8009e9c:	f023 0301 	bic.w	r3, r3, #1
 8009ea0:	62d3      	str	r3, [r2, #44]	; 0x2c
          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8009ea2:	f7f9 fd6b 	bl	800397c <HAL_GetTick>
 8009ea6:	6278      	str	r0, [r7, #36]	; 0x24
          /* Wait at least 2 CK_REF (PLL input source divided by M) period to make sure next latched value will be taken into account. */
          while ((HAL_GetTick() - tickstart) < PLL_FRAC_TIMEOUT_VALUE)
 8009ea8:	bf00      	nop
 8009eaa:	f7f9 fd67 	bl	800397c <HAL_GetTick>
 8009eae:	4602      	mov	r2, r0
 8009eb0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009eb2:	4293      	cmp	r3, r2
 8009eb4:	d0f9      	beq.n	8009eaa <HAL_RCC_OscConfig+0x876>
          {
          }
          /* Configure PLL1 PLL1FRACN */
          __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 8009eb6:	4b0a      	ldr	r3, [pc, #40]	; (8009ee0 <HAL_RCC_OscConfig+0x8ac>)
 8009eb8:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8009eba:	4b0a      	ldr	r3, [pc, #40]	; (8009ee4 <HAL_RCC_OscConfig+0x8b0>)
 8009ebc:	4013      	ands	r3, r2
 8009ebe:	687a      	ldr	r2, [r7, #4]
 8009ec0:	6c92      	ldr	r2, [r2, #72]	; 0x48
 8009ec2:	00d2      	lsls	r2, r2, #3
 8009ec4:	4906      	ldr	r1, [pc, #24]	; (8009ee0 <HAL_RCC_OscConfig+0x8ac>)
 8009ec6:	4313      	orrs	r3, r2
 8009ec8:	634b      	str	r3, [r1, #52]	; 0x34
          /* Enable PLL1FRACEN to latch new value. */
          __HAL_RCC_PLLFRACN_ENABLE();
 8009eca:	4b05      	ldr	r3, [pc, #20]	; (8009ee0 <HAL_RCC_OscConfig+0x8ac>)
 8009ecc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009ece:	4a04      	ldr	r2, [pc, #16]	; (8009ee0 <HAL_RCC_OscConfig+0x8ac>)
 8009ed0:	f043 0301 	orr.w	r3, r3, #1
 8009ed4:	62d3      	str	r3, [r2, #44]	; 0x2c
        }
      }
    }
  }
  return HAL_OK;
 8009ed6:	2300      	movs	r3, #0
}
 8009ed8:	4618      	mov	r0, r3
 8009eda:	3730      	adds	r7, #48	; 0x30
 8009edc:	46bd      	mov	sp, r7
 8009ede:	bd80      	pop	{r7, pc}
 8009ee0:	58024400 	.word	0x58024400
 8009ee4:	ffff0007 	.word	0xffff0007

08009ee8 <HAL_RCC_ClockConfig>:
  *         D1CPRE[3:0] bits to ensure that  Domain1 core clock not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8009ee8:	b580      	push	{r7, lr}
 8009eea:	b086      	sub	sp, #24
 8009eec:	af00      	add	r7, sp, #0
 8009eee:	6078      	str	r0, [r7, #4]
 8009ef0:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef halstatus;
  uint32_t tickstart;
  uint32_t common_system_clock;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8009ef2:	687b      	ldr	r3, [r7, #4]
 8009ef4:	2b00      	cmp	r3, #0
 8009ef6:	d101      	bne.n	8009efc <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8009ef8:	2301      	movs	r3, #1
 8009efa:	e19c      	b.n	800a236 <HAL_RCC_ClockConfig+0x34e>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8009efc:	4b8a      	ldr	r3, [pc, #552]	; (800a128 <HAL_RCC_ClockConfig+0x240>)
 8009efe:	681b      	ldr	r3, [r3, #0]
 8009f00:	f003 030f 	and.w	r3, r3, #15
 8009f04:	683a      	ldr	r2, [r7, #0]
 8009f06:	429a      	cmp	r2, r3
 8009f08:	d910      	bls.n	8009f2c <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8009f0a:	4b87      	ldr	r3, [pc, #540]	; (800a128 <HAL_RCC_ClockConfig+0x240>)
 8009f0c:	681b      	ldr	r3, [r3, #0]
 8009f0e:	f023 020f 	bic.w	r2, r3, #15
 8009f12:	4985      	ldr	r1, [pc, #532]	; (800a128 <HAL_RCC_ClockConfig+0x240>)
 8009f14:	683b      	ldr	r3, [r7, #0]
 8009f16:	4313      	orrs	r3, r2
 8009f18:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8009f1a:	4b83      	ldr	r3, [pc, #524]	; (800a128 <HAL_RCC_ClockConfig+0x240>)
 8009f1c:	681b      	ldr	r3, [r3, #0]
 8009f1e:	f003 030f 	and.w	r3, r3, #15
 8009f22:	683a      	ldr	r2, [r7, #0]
 8009f24:	429a      	cmp	r2, r3
 8009f26:	d001      	beq.n	8009f2c <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8009f28:	2301      	movs	r3, #1
 8009f2a:	e184      	b.n	800a236 <HAL_RCC_ClockConfig+0x34e>

  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- D1PCLK1/CDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8009f2c:	687b      	ldr	r3, [r7, #4]
 8009f2e:	681b      	ldr	r3, [r3, #0]
 8009f30:	f003 0304 	and.w	r3, r3, #4
 8009f34:	2b00      	cmp	r3, #0
 8009f36:	d010      	beq.n	8009f5a <HAL_RCC_ClockConfig+0x72>
  {
#if defined (RCC_D1CFGR_D1PPRE)
    if ((RCC_ClkInitStruct->APB3CLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 8009f38:	687b      	ldr	r3, [r7, #4]
 8009f3a:	691a      	ldr	r2, [r3, #16]
 8009f3c:	4b7b      	ldr	r3, [pc, #492]	; (800a12c <HAL_RCC_ClockConfig+0x244>)
 8009f3e:	699b      	ldr	r3, [r3, #24]
 8009f40:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8009f44:	429a      	cmp	r2, r3
 8009f46:	d908      	bls.n	8009f5a <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8009f48:	4b78      	ldr	r3, [pc, #480]	; (800a12c <HAL_RCC_ClockConfig+0x244>)
 8009f4a:	699b      	ldr	r3, [r3, #24]
 8009f4c:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8009f50:	687b      	ldr	r3, [r7, #4]
 8009f52:	691b      	ldr	r3, [r3, #16]
 8009f54:	4975      	ldr	r1, [pc, #468]	; (800a12c <HAL_RCC_ClockConfig+0x244>)
 8009f56:	4313      	orrs	r3, r2
 8009f58:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8009f5a:	687b      	ldr	r3, [r7, #4]
 8009f5c:	681b      	ldr	r3, [r3, #0]
 8009f5e:	f003 0308 	and.w	r3, r3, #8
 8009f62:	2b00      	cmp	r3, #0
 8009f64:	d010      	beq.n	8009f88 <HAL_RCC_ClockConfig+0xa0>
  {
#if defined (RCC_D2CFGR_D2PPRE1)
    if ((RCC_ClkInitStruct->APB1CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 8009f66:	687b      	ldr	r3, [r7, #4]
 8009f68:	695a      	ldr	r2, [r3, #20]
 8009f6a:	4b70      	ldr	r3, [pc, #448]	; (800a12c <HAL_RCC_ClockConfig+0x244>)
 8009f6c:	69db      	ldr	r3, [r3, #28]
 8009f6e:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8009f72:	429a      	cmp	r2, r3
 8009f74:	d908      	bls.n	8009f88 <HAL_RCC_ClockConfig+0xa0>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 8009f76:	4b6d      	ldr	r3, [pc, #436]	; (800a12c <HAL_RCC_ClockConfig+0x244>)
 8009f78:	69db      	ldr	r3, [r3, #28]
 8009f7a:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8009f7e:	687b      	ldr	r3, [r7, #4]
 8009f80:	695b      	ldr	r3, [r3, #20]
 8009f82:	496a      	ldr	r1, [pc, #424]	; (800a12c <HAL_RCC_ClockConfig+0x244>)
 8009f84:	4313      	orrs	r3, r2
 8009f86:	61cb      	str	r3, [r1, #28]
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
    }
#endif
  }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8009f88:	687b      	ldr	r3, [r7, #4]
 8009f8a:	681b      	ldr	r3, [r3, #0]
 8009f8c:	f003 0310 	and.w	r3, r3, #16
 8009f90:	2b00      	cmp	r3, #0
 8009f92:	d010      	beq.n	8009fb6 <HAL_RCC_ClockConfig+0xce>
  {
#if defined(RCC_D2CFGR_D2PPRE2)
    if ((RCC_ClkInitStruct->APB2CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 8009f94:	687b      	ldr	r3, [r7, #4]
 8009f96:	699a      	ldr	r2, [r3, #24]
 8009f98:	4b64      	ldr	r3, [pc, #400]	; (800a12c <HAL_RCC_ClockConfig+0x244>)
 8009f9a:	69db      	ldr	r3, [r3, #28]
 8009f9c:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8009fa0:	429a      	cmp	r2, r3
 8009fa2:	d908      	bls.n	8009fb6 <HAL_RCC_ClockConfig+0xce>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8009fa4:	4b61      	ldr	r3, [pc, #388]	; (800a12c <HAL_RCC_ClockConfig+0x244>)
 8009fa6:	69db      	ldr	r3, [r3, #28]
 8009fa8:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8009fac:	687b      	ldr	r3, [r7, #4]
 8009fae:	699b      	ldr	r3, [r3, #24]
 8009fb0:	495e      	ldr	r1, [pc, #376]	; (800a12c <HAL_RCC_ClockConfig+0x244>)
 8009fb2:	4313      	orrs	r3, r2
 8009fb4:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 8009fb6:	687b      	ldr	r3, [r7, #4]
 8009fb8:	681b      	ldr	r3, [r3, #0]
 8009fba:	f003 0320 	and.w	r3, r3, #32
 8009fbe:	2b00      	cmp	r3, #0
 8009fc0:	d010      	beq.n	8009fe4 <HAL_RCC_ClockConfig+0xfc>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if ((RCC_ClkInitStruct->APB4CLKDivider) > (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 8009fc2:	687b      	ldr	r3, [r7, #4]
 8009fc4:	69da      	ldr	r2, [r3, #28]
 8009fc6:	4b59      	ldr	r3, [pc, #356]	; (800a12c <HAL_RCC_ClockConfig+0x244>)
 8009fc8:	6a1b      	ldr	r3, [r3, #32]
 8009fca:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8009fce:	429a      	cmp	r2, r3
 8009fd0:	d908      	bls.n	8009fe4 <HAL_RCC_ClockConfig+0xfc>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 8009fd2:	4b56      	ldr	r3, [pc, #344]	; (800a12c <HAL_RCC_ClockConfig+0x244>)
 8009fd4:	6a1b      	ldr	r3, [r3, #32]
 8009fd6:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8009fda:	687b      	ldr	r3, [r7, #4]
 8009fdc:	69db      	ldr	r3, [r3, #28]
 8009fde:	4953      	ldr	r1, [pc, #332]	; (800a12c <HAL_RCC_ClockConfig+0x244>)
 8009fe0:	4313      	orrs	r3, r2
 8009fe2:	620b      	str	r3, [r1, #32]
    }
#endif
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8009fe4:	687b      	ldr	r3, [r7, #4]
 8009fe6:	681b      	ldr	r3, [r3, #0]
 8009fe8:	f003 0302 	and.w	r3, r3, #2
 8009fec:	2b00      	cmp	r3, #0
 8009fee:	d010      	beq.n	800a012 <HAL_RCC_ClockConfig+0x12a>
  {
#if defined (RCC_D1CFGR_HPRE)
    if ((RCC_ClkInitStruct->AHBCLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 8009ff0:	687b      	ldr	r3, [r7, #4]
 8009ff2:	68da      	ldr	r2, [r3, #12]
 8009ff4:	4b4d      	ldr	r3, [pc, #308]	; (800a12c <HAL_RCC_ClockConfig+0x244>)
 8009ff6:	699b      	ldr	r3, [r3, #24]
 8009ff8:	f003 030f 	and.w	r3, r3, #15
 8009ffc:	429a      	cmp	r2, r3
 8009ffe:	d908      	bls.n	800a012 <HAL_RCC_ClockConfig+0x12a>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800a000:	4b4a      	ldr	r3, [pc, #296]	; (800a12c <HAL_RCC_ClockConfig+0x244>)
 800a002:	699b      	ldr	r3, [r3, #24]
 800a004:	f023 020f 	bic.w	r2, r3, #15
 800a008:	687b      	ldr	r3, [r7, #4]
 800a00a:	68db      	ldr	r3, [r3, #12]
 800a00c:	4947      	ldr	r1, [pc, #284]	; (800a12c <HAL_RCC_ClockConfig+0x244>)
 800a00e:	4313      	orrs	r3, r2
 800a010:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*------------------------- SYSCLK Configuration -------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800a012:	687b      	ldr	r3, [r7, #4]
 800a014:	681b      	ldr	r3, [r3, #0]
 800a016:	f003 0301 	and.w	r3, r3, #1
 800a01a:	2b00      	cmp	r3, #0
 800a01c:	d055      	beq.n	800a0ca <HAL_RCC_ClockConfig+0x1e2>
  {
    assert_param(IS_RCC_SYSCLK(RCC_ClkInitStruct->SYSCLKDivider));
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
#if defined(RCC_D1CFGR_D1CPRE)
    MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1CPRE, RCC_ClkInitStruct->SYSCLKDivider);
 800a01e:	4b43      	ldr	r3, [pc, #268]	; (800a12c <HAL_RCC_ClockConfig+0x244>)
 800a020:	699b      	ldr	r3, [r3, #24]
 800a022:	f423 6270 	bic.w	r2, r3, #3840	; 0xf00
 800a026:	687b      	ldr	r3, [r7, #4]
 800a028:	689b      	ldr	r3, [r3, #8]
 800a02a:	4940      	ldr	r1, [pc, #256]	; (800a12c <HAL_RCC_ClockConfig+0x244>)
 800a02c:	4313      	orrs	r3, r2
 800a02e:	618b      	str	r3, [r1, #24]
#else
    MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDCPRE, RCC_ClkInitStruct->SYSCLKDivider);
#endif
    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800a030:	687b      	ldr	r3, [r7, #4]
 800a032:	685b      	ldr	r3, [r3, #4]
 800a034:	2b02      	cmp	r3, #2
 800a036:	d107      	bne.n	800a048 <HAL_RCC_ClockConfig+0x160>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 800a038:	4b3c      	ldr	r3, [pc, #240]	; (800a12c <HAL_RCC_ClockConfig+0x244>)
 800a03a:	681b      	ldr	r3, [r3, #0]
 800a03c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800a040:	2b00      	cmp	r3, #0
 800a042:	d121      	bne.n	800a088 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 800a044:	2301      	movs	r3, #1
 800a046:	e0f6      	b.n	800a236 <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800a048:	687b      	ldr	r3, [r7, #4]
 800a04a:	685b      	ldr	r3, [r3, #4]
 800a04c:	2b03      	cmp	r3, #3
 800a04e:	d107      	bne.n	800a060 <HAL_RCC_ClockConfig+0x178>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 800a050:	4b36      	ldr	r3, [pc, #216]	; (800a12c <HAL_RCC_ClockConfig+0x244>)
 800a052:	681b      	ldr	r3, [r3, #0]
 800a054:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800a058:	2b00      	cmp	r3, #0
 800a05a:	d115      	bne.n	800a088 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 800a05c:	2301      	movs	r3, #1
 800a05e:	e0ea      	b.n	800a236 <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* CSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 800a060:	687b      	ldr	r3, [r7, #4]
 800a062:	685b      	ldr	r3, [r3, #4]
 800a064:	2b01      	cmp	r3, #1
 800a066:	d107      	bne.n	800a078 <HAL_RCC_ClockConfig+0x190>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 800a068:	4b30      	ldr	r3, [pc, #192]	; (800a12c <HAL_RCC_ClockConfig+0x244>)
 800a06a:	681b      	ldr	r3, [r3, #0]
 800a06c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800a070:	2b00      	cmp	r3, #0
 800a072:	d109      	bne.n	800a088 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 800a074:	2301      	movs	r3, #1
 800a076:	e0de      	b.n	800a236 <HAL_RCC_ClockConfig+0x34e>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800a078:	4b2c      	ldr	r3, [pc, #176]	; (800a12c <HAL_RCC_ClockConfig+0x244>)
 800a07a:	681b      	ldr	r3, [r3, #0]
 800a07c:	f003 0304 	and.w	r3, r3, #4
 800a080:	2b00      	cmp	r3, #0
 800a082:	d101      	bne.n	800a088 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 800a084:	2301      	movs	r3, #1
 800a086:	e0d6      	b.n	800a236 <HAL_RCC_ClockConfig+0x34e>
      }
    }
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 800a088:	4b28      	ldr	r3, [pc, #160]	; (800a12c <HAL_RCC_ClockConfig+0x244>)
 800a08a:	691b      	ldr	r3, [r3, #16]
 800a08c:	f023 0207 	bic.w	r2, r3, #7
 800a090:	687b      	ldr	r3, [r7, #4]
 800a092:	685b      	ldr	r3, [r3, #4]
 800a094:	4925      	ldr	r1, [pc, #148]	; (800a12c <HAL_RCC_ClockConfig+0x244>)
 800a096:	4313      	orrs	r3, r2
 800a098:	610b      	str	r3, [r1, #16]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800a09a:	f7f9 fc6f 	bl	800397c <HAL_GetTick>
 800a09e:	6178      	str	r0, [r7, #20]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800a0a0:	e00a      	b.n	800a0b8 <HAL_RCC_ClockConfig+0x1d0>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800a0a2:	f7f9 fc6b 	bl	800397c <HAL_GetTick>
 800a0a6:	4602      	mov	r2, r0
 800a0a8:	697b      	ldr	r3, [r7, #20]
 800a0aa:	1ad3      	subs	r3, r2, r3
 800a0ac:	f241 3288 	movw	r2, #5000	; 0x1388
 800a0b0:	4293      	cmp	r3, r2
 800a0b2:	d901      	bls.n	800a0b8 <HAL_RCC_ClockConfig+0x1d0>
      {
        return HAL_TIMEOUT;
 800a0b4:	2303      	movs	r3, #3
 800a0b6:	e0be      	b.n	800a236 <HAL_RCC_ClockConfig+0x34e>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800a0b8:	4b1c      	ldr	r3, [pc, #112]	; (800a12c <HAL_RCC_ClockConfig+0x244>)
 800a0ba:	691b      	ldr	r3, [r3, #16]
 800a0bc:	f003 0238 	and.w	r2, r3, #56	; 0x38
 800a0c0:	687b      	ldr	r3, [r7, #4]
 800a0c2:	685b      	ldr	r3, [r3, #4]
 800a0c4:	00db      	lsls	r3, r3, #3
 800a0c6:	429a      	cmp	r2, r3
 800a0c8:	d1eb      	bne.n	800a0a2 <HAL_RCC_ClockConfig+0x1ba>

  }

  /* Decreasing the BUS frequency divider */
  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800a0ca:	687b      	ldr	r3, [r7, #4]
 800a0cc:	681b      	ldr	r3, [r3, #0]
 800a0ce:	f003 0302 	and.w	r3, r3, #2
 800a0d2:	2b00      	cmp	r3, #0
 800a0d4:	d010      	beq.n	800a0f8 <HAL_RCC_ClockConfig+0x210>
  {
#if defined(RCC_D1CFGR_HPRE)
    if ((RCC_ClkInitStruct->AHBCLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 800a0d6:	687b      	ldr	r3, [r7, #4]
 800a0d8:	68da      	ldr	r2, [r3, #12]
 800a0da:	4b14      	ldr	r3, [pc, #80]	; (800a12c <HAL_RCC_ClockConfig+0x244>)
 800a0dc:	699b      	ldr	r3, [r3, #24]
 800a0de:	f003 030f 	and.w	r3, r3, #15
 800a0e2:	429a      	cmp	r2, r3
 800a0e4:	d208      	bcs.n	800a0f8 <HAL_RCC_ClockConfig+0x210>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800a0e6:	4b11      	ldr	r3, [pc, #68]	; (800a12c <HAL_RCC_ClockConfig+0x244>)
 800a0e8:	699b      	ldr	r3, [r3, #24]
 800a0ea:	f023 020f 	bic.w	r2, r3, #15
 800a0ee:	687b      	ldr	r3, [r7, #4]
 800a0f0:	68db      	ldr	r3, [r3, #12]
 800a0f2:	490e      	ldr	r1, [pc, #56]	; (800a12c <HAL_RCC_ClockConfig+0x244>)
 800a0f4:	4313      	orrs	r3, r2
 800a0f6:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 800a0f8:	4b0b      	ldr	r3, [pc, #44]	; (800a128 <HAL_RCC_ClockConfig+0x240>)
 800a0fa:	681b      	ldr	r3, [r3, #0]
 800a0fc:	f003 030f 	and.w	r3, r3, #15
 800a100:	683a      	ldr	r2, [r7, #0]
 800a102:	429a      	cmp	r2, r3
 800a104:	d214      	bcs.n	800a130 <HAL_RCC_ClockConfig+0x248>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800a106:	4b08      	ldr	r3, [pc, #32]	; (800a128 <HAL_RCC_ClockConfig+0x240>)
 800a108:	681b      	ldr	r3, [r3, #0]
 800a10a:	f023 020f 	bic.w	r2, r3, #15
 800a10e:	4906      	ldr	r1, [pc, #24]	; (800a128 <HAL_RCC_ClockConfig+0x240>)
 800a110:	683b      	ldr	r3, [r7, #0]
 800a112:	4313      	orrs	r3, r2
 800a114:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800a116:	4b04      	ldr	r3, [pc, #16]	; (800a128 <HAL_RCC_ClockConfig+0x240>)
 800a118:	681b      	ldr	r3, [r3, #0]
 800a11a:	f003 030f 	and.w	r3, r3, #15
 800a11e:	683a      	ldr	r2, [r7, #0]
 800a120:	429a      	cmp	r2, r3
 800a122:	d005      	beq.n	800a130 <HAL_RCC_ClockConfig+0x248>
    {
      return HAL_ERROR;
 800a124:	2301      	movs	r3, #1
 800a126:	e086      	b.n	800a236 <HAL_RCC_ClockConfig+0x34e>
 800a128:	52002000 	.word	0x52002000
 800a12c:	58024400 	.word	0x58024400
    }
  }

  /*-------------------------- D1PCLK1/CDPCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 800a130:	687b      	ldr	r3, [r7, #4]
 800a132:	681b      	ldr	r3, [r3, #0]
 800a134:	f003 0304 	and.w	r3, r3, #4
 800a138:	2b00      	cmp	r3, #0
 800a13a:	d010      	beq.n	800a15e <HAL_RCC_ClockConfig+0x276>
  {
#if defined(RCC_D1CFGR_D1PPRE)
    if ((RCC_ClkInitStruct->APB3CLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 800a13c:	687b      	ldr	r3, [r7, #4]
 800a13e:	691a      	ldr	r2, [r3, #16]
 800a140:	4b3f      	ldr	r3, [pc, #252]	; (800a240 <HAL_RCC_ClockConfig+0x358>)
 800a142:	699b      	ldr	r3, [r3, #24]
 800a144:	f003 0370 	and.w	r3, r3, #112	; 0x70
 800a148:	429a      	cmp	r2, r3
 800a14a:	d208      	bcs.n	800a15e <HAL_RCC_ClockConfig+0x276>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 800a14c:	4b3c      	ldr	r3, [pc, #240]	; (800a240 <HAL_RCC_ClockConfig+0x358>)
 800a14e:	699b      	ldr	r3, [r3, #24]
 800a150:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 800a154:	687b      	ldr	r3, [r7, #4]
 800a156:	691b      	ldr	r3, [r3, #16]
 800a158:	4939      	ldr	r1, [pc, #228]	; (800a240 <HAL_RCC_ClockConfig+0x358>)
 800a15a:	4313      	orrs	r3, r2
 800a15c:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800a15e:	687b      	ldr	r3, [r7, #4]
 800a160:	681b      	ldr	r3, [r3, #0]
 800a162:	f003 0308 	and.w	r3, r3, #8
 800a166:	2b00      	cmp	r3, #0
 800a168:	d010      	beq.n	800a18c <HAL_RCC_ClockConfig+0x2a4>
  {
#if defined(RCC_D2CFGR_D2PPRE1)
    if ((RCC_ClkInitStruct->APB1CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 800a16a:	687b      	ldr	r3, [r7, #4]
 800a16c:	695a      	ldr	r2, [r3, #20]
 800a16e:	4b34      	ldr	r3, [pc, #208]	; (800a240 <HAL_RCC_ClockConfig+0x358>)
 800a170:	69db      	ldr	r3, [r3, #28]
 800a172:	f003 0370 	and.w	r3, r3, #112	; 0x70
 800a176:	429a      	cmp	r2, r3
 800a178:	d208      	bcs.n	800a18c <HAL_RCC_ClockConfig+0x2a4>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 800a17a:	4b31      	ldr	r3, [pc, #196]	; (800a240 <HAL_RCC_ClockConfig+0x358>)
 800a17c:	69db      	ldr	r3, [r3, #28]
 800a17e:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 800a182:	687b      	ldr	r3, [r7, #4]
 800a184:	695b      	ldr	r3, [r3, #20]
 800a186:	492e      	ldr	r1, [pc, #184]	; (800a240 <HAL_RCC_ClockConfig+0x358>)
 800a188:	4313      	orrs	r3, r2
 800a18a:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800a18c:	687b      	ldr	r3, [r7, #4]
 800a18e:	681b      	ldr	r3, [r3, #0]
 800a190:	f003 0310 	and.w	r3, r3, #16
 800a194:	2b00      	cmp	r3, #0
 800a196:	d010      	beq.n	800a1ba <HAL_RCC_ClockConfig+0x2d2>
  {
#if defined (RCC_D2CFGR_D2PPRE2)
    if ((RCC_ClkInitStruct->APB2CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 800a198:	687b      	ldr	r3, [r7, #4]
 800a19a:	699a      	ldr	r2, [r3, #24]
 800a19c:	4b28      	ldr	r3, [pc, #160]	; (800a240 <HAL_RCC_ClockConfig+0x358>)
 800a19e:	69db      	ldr	r3, [r3, #28]
 800a1a0:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800a1a4:	429a      	cmp	r2, r3
 800a1a6:	d208      	bcs.n	800a1ba <HAL_RCC_ClockConfig+0x2d2>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 800a1a8:	4b25      	ldr	r3, [pc, #148]	; (800a240 <HAL_RCC_ClockConfig+0x358>)
 800a1aa:	69db      	ldr	r3, [r3, #28]
 800a1ac:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 800a1b0:	687b      	ldr	r3, [r7, #4]
 800a1b2:	699b      	ldr	r3, [r3, #24]
 800a1b4:	4922      	ldr	r1, [pc, #136]	; (800a240 <HAL_RCC_ClockConfig+0x358>)
 800a1b6:	4313      	orrs	r3, r2
 800a1b8:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1/SRDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 800a1ba:	687b      	ldr	r3, [r7, #4]
 800a1bc:	681b      	ldr	r3, [r3, #0]
 800a1be:	f003 0320 	and.w	r3, r3, #32
 800a1c2:	2b00      	cmp	r3, #0
 800a1c4:	d010      	beq.n	800a1e8 <HAL_RCC_ClockConfig+0x300>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if ((RCC_ClkInitStruct->APB4CLKDivider) < (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 800a1c6:	687b      	ldr	r3, [r7, #4]
 800a1c8:	69da      	ldr	r2, [r3, #28]
 800a1ca:	4b1d      	ldr	r3, [pc, #116]	; (800a240 <HAL_RCC_ClockConfig+0x358>)
 800a1cc:	6a1b      	ldr	r3, [r3, #32]
 800a1ce:	f003 0370 	and.w	r3, r3, #112	; 0x70
 800a1d2:	429a      	cmp	r2, r3
 800a1d4:	d208      	bcs.n	800a1e8 <HAL_RCC_ClockConfig+0x300>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 800a1d6:	4b1a      	ldr	r3, [pc, #104]	; (800a240 <HAL_RCC_ClockConfig+0x358>)
 800a1d8:	6a1b      	ldr	r3, [r3, #32]
 800a1da:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 800a1de:	687b      	ldr	r3, [r7, #4]
 800a1e0:	69db      	ldr	r3, [r3, #28]
 800a1e2:	4917      	ldr	r1, [pc, #92]	; (800a240 <HAL_RCC_ClockConfig+0x358>)
 800a1e4:	4313      	orrs	r3, r2
 800a1e6:	620b      	str	r3, [r1, #32]
#endif
  }

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 800a1e8:	f000 f844 	bl	800a274 <HAL_RCC_GetSysClockFreq>
 800a1ec:	4602      	mov	r2, r0
 800a1ee:	4b14      	ldr	r3, [pc, #80]	; (800a240 <HAL_RCC_ClockConfig+0x358>)
 800a1f0:	699b      	ldr	r3, [r3, #24]
 800a1f2:	0a1b      	lsrs	r3, r3, #8
 800a1f4:	f003 030f 	and.w	r3, r3, #15
 800a1f8:	4912      	ldr	r1, [pc, #72]	; (800a244 <HAL_RCC_ClockConfig+0x35c>)
 800a1fa:	5ccb      	ldrb	r3, [r1, r3]
 800a1fc:	f003 031f 	and.w	r3, r3, #31
 800a200:	fa22 f303 	lsr.w	r3, r2, r3
 800a204:	613b      	str	r3, [r7, #16]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 800a206:	4b0e      	ldr	r3, [pc, #56]	; (800a240 <HAL_RCC_ClockConfig+0x358>)
 800a208:	699b      	ldr	r3, [r3, #24]
 800a20a:	f003 030f 	and.w	r3, r3, #15
 800a20e:	4a0d      	ldr	r2, [pc, #52]	; (800a244 <HAL_RCC_ClockConfig+0x35c>)
 800a210:	5cd3      	ldrb	r3, [r2, r3]
 800a212:	f003 031f 	and.w	r3, r3, #31
 800a216:	693a      	ldr	r2, [r7, #16]
 800a218:	fa22 f303 	lsr.w	r3, r2, r3
 800a21c:	4a0a      	ldr	r2, [pc, #40]	; (800a248 <HAL_RCC_ClockConfig+0x360>)
 800a21e:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 800a220:	4a0a      	ldr	r2, [pc, #40]	; (800a24c <HAL_RCC_ClockConfig+0x364>)
 800a222:	693b      	ldr	r3, [r7, #16]
 800a224:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Configure the source of time base considering new system clocks settings*/
  halstatus = HAL_InitTick(uwTickPrio);
 800a226:	4b0a      	ldr	r3, [pc, #40]	; (800a250 <HAL_RCC_ClockConfig+0x368>)
 800a228:	681b      	ldr	r3, [r3, #0]
 800a22a:	4618      	mov	r0, r3
 800a22c:	f7f9 fb5c 	bl	80038e8 <HAL_InitTick>
 800a230:	4603      	mov	r3, r0
 800a232:	73fb      	strb	r3, [r7, #15]

  return halstatus;
 800a234:	7bfb      	ldrb	r3, [r7, #15]
}
 800a236:	4618      	mov	r0, r3
 800a238:	3718      	adds	r7, #24
 800a23a:	46bd      	mov	sp, r7
 800a23c:	bd80      	pop	{r7, pc}
 800a23e:	bf00      	nop
 800a240:	58024400 	.word	0x58024400
 800a244:	0801ebe0 	.word	0x0801ebe0
 800a248:	20000014 	.word	0x20000014
 800a24c:	20000010 	.word	0x20000010
 800a250:	20000024 	.word	0x20000024

0800a254 <HAL_RCC_EnableCSS>:
  *         allowing the MCU to perform rescue operations. The CSSI is linked to
  *         the Cortex-M NMI (Non-Mask-able Interrupt) exception vector.
  * @retval None
  */
void HAL_RCC_EnableCSS(void)
{
 800a254:	b480      	push	{r7}
 800a256:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_CSSHSEON) ;
 800a258:	4b05      	ldr	r3, [pc, #20]	; (800a270 <HAL_RCC_EnableCSS+0x1c>)
 800a25a:	681b      	ldr	r3, [r3, #0]
 800a25c:	4a04      	ldr	r2, [pc, #16]	; (800a270 <HAL_RCC_EnableCSS+0x1c>)
 800a25e:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800a262:	6013      	str	r3, [r2, #0]
}
 800a264:	bf00      	nop
 800a266:	46bd      	mov	sp, r7
 800a268:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a26c:	4770      	bx	lr
 800a26e:	bf00      	nop
 800a270:	58024400 	.word	0x58024400

0800a274 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800a274:	b480      	push	{r7}
 800a276:	b089      	sub	sp, #36	; 0x24
 800a278:	af00      	add	r7, sp, #0
  float_t fracn1, pllvco;
  uint32_t sysclockfreq;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
 800a27a:	4bb3      	ldr	r3, [pc, #716]	; (800a548 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800a27c:	691b      	ldr	r3, [r3, #16]
 800a27e:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800a282:	2b18      	cmp	r3, #24
 800a284:	f200 8155 	bhi.w	800a532 <HAL_RCC_GetSysClockFreq+0x2be>
 800a288:	a201      	add	r2, pc, #4	; (adr r2, 800a290 <HAL_RCC_GetSysClockFreq+0x1c>)
 800a28a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a28e:	bf00      	nop
 800a290:	0800a2f5 	.word	0x0800a2f5
 800a294:	0800a533 	.word	0x0800a533
 800a298:	0800a533 	.word	0x0800a533
 800a29c:	0800a533 	.word	0x0800a533
 800a2a0:	0800a533 	.word	0x0800a533
 800a2a4:	0800a533 	.word	0x0800a533
 800a2a8:	0800a533 	.word	0x0800a533
 800a2ac:	0800a533 	.word	0x0800a533
 800a2b0:	0800a31b 	.word	0x0800a31b
 800a2b4:	0800a533 	.word	0x0800a533
 800a2b8:	0800a533 	.word	0x0800a533
 800a2bc:	0800a533 	.word	0x0800a533
 800a2c0:	0800a533 	.word	0x0800a533
 800a2c4:	0800a533 	.word	0x0800a533
 800a2c8:	0800a533 	.word	0x0800a533
 800a2cc:	0800a533 	.word	0x0800a533
 800a2d0:	0800a321 	.word	0x0800a321
 800a2d4:	0800a533 	.word	0x0800a533
 800a2d8:	0800a533 	.word	0x0800a533
 800a2dc:	0800a533 	.word	0x0800a533
 800a2e0:	0800a533 	.word	0x0800a533
 800a2e4:	0800a533 	.word	0x0800a533
 800a2e8:	0800a533 	.word	0x0800a533
 800a2ec:	0800a533 	.word	0x0800a533
 800a2f0:	0800a327 	.word	0x0800a327
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800a2f4:	4b94      	ldr	r3, [pc, #592]	; (800a548 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800a2f6:	681b      	ldr	r3, [r3, #0]
 800a2f8:	f003 0320 	and.w	r3, r3, #32
 800a2fc:	2b00      	cmp	r3, #0
 800a2fe:	d009      	beq.n	800a314 <HAL_RCC_GetSysClockFreq+0xa0>
      {
        sysclockfreq = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800a300:	4b91      	ldr	r3, [pc, #580]	; (800a548 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800a302:	681b      	ldr	r3, [r3, #0]
 800a304:	08db      	lsrs	r3, r3, #3
 800a306:	f003 0303 	and.w	r3, r3, #3
 800a30a:	4a90      	ldr	r2, [pc, #576]	; (800a54c <HAL_RCC_GetSysClockFreq+0x2d8>)
 800a30c:	fa22 f303 	lsr.w	r3, r2, r3
 800a310:	61bb      	str	r3, [r7, #24]
      else
      {
        sysclockfreq = (uint32_t) HSI_VALUE;
      }

      break;
 800a312:	e111      	b.n	800a538 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = (uint32_t) HSI_VALUE;
 800a314:	4b8d      	ldr	r3, [pc, #564]	; (800a54c <HAL_RCC_GetSysClockFreq+0x2d8>)
 800a316:	61bb      	str	r3, [r7, #24]
      break;
 800a318:	e10e      	b.n	800a538 <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_CSI:  /* CSI used as system clock  source */
      sysclockfreq = CSI_VALUE;
 800a31a:	4b8d      	ldr	r3, [pc, #564]	; (800a550 <HAL_RCC_GetSysClockFreq+0x2dc>)
 800a31c:	61bb      	str	r3, [r7, #24]
      break;
 800a31e:	e10b      	b.n	800a538 <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
      sysclockfreq = HSE_VALUE;
 800a320:	4b8c      	ldr	r3, [pc, #560]	; (800a554 <HAL_RCC_GetSysClockFreq+0x2e0>)
 800a322:	61bb      	str	r3, [r7, #24]
      break;
 800a324:	e108      	b.n	800a538 <HAL_RCC_GetSysClockFreq+0x2c4>
    case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

      /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR
      */
      pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 800a326:	4b88      	ldr	r3, [pc, #544]	; (800a548 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800a328:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a32a:	f003 0303 	and.w	r3, r3, #3
 800a32e:	617b      	str	r3, [r7, #20]
      pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1) >> 4)  ;
 800a330:	4b85      	ldr	r3, [pc, #532]	; (800a548 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800a332:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a334:	091b      	lsrs	r3, r3, #4
 800a336:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800a33a:	613b      	str	r3, [r7, #16]
      pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN) >> RCC_PLLCFGR_PLL1FRACEN_Pos);
 800a33c:	4b82      	ldr	r3, [pc, #520]	; (800a548 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800a33e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a340:	f003 0301 	and.w	r3, r3, #1
 800a344:	60fb      	str	r3, [r7, #12]
      fracn1 = (float_t)(uint32_t)(pllfracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
 800a346:	4b80      	ldr	r3, [pc, #512]	; (800a548 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800a348:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a34a:	08db      	lsrs	r3, r3, #3
 800a34c:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800a350:	68fa      	ldr	r2, [r7, #12]
 800a352:	fb02 f303 	mul.w	r3, r2, r3
 800a356:	ee07 3a90 	vmov	s15, r3
 800a35a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800a35e:	edc7 7a02 	vstr	s15, [r7, #8]

      if (pllm != 0U)
 800a362:	693b      	ldr	r3, [r7, #16]
 800a364:	2b00      	cmp	r3, #0
 800a366:	f000 80e1 	beq.w	800a52c <HAL_RCC_GetSysClockFreq+0x2b8>
 800a36a:	697b      	ldr	r3, [r7, #20]
 800a36c:	2b02      	cmp	r3, #2
 800a36e:	f000 8083 	beq.w	800a478 <HAL_RCC_GetSysClockFreq+0x204>
 800a372:	697b      	ldr	r3, [r7, #20]
 800a374:	2b02      	cmp	r3, #2
 800a376:	f200 80a1 	bhi.w	800a4bc <HAL_RCC_GetSysClockFreq+0x248>
 800a37a:	697b      	ldr	r3, [r7, #20]
 800a37c:	2b00      	cmp	r3, #0
 800a37e:	d003      	beq.n	800a388 <HAL_RCC_GetSysClockFreq+0x114>
 800a380:	697b      	ldr	r3, [r7, #20]
 800a382:	2b01      	cmp	r3, #1
 800a384:	d056      	beq.n	800a434 <HAL_RCC_GetSysClockFreq+0x1c0>
 800a386:	e099      	b.n	800a4bc <HAL_RCC_GetSysClockFreq+0x248>
      {
        switch (pllsource)
        {
          case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

            if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800a388:	4b6f      	ldr	r3, [pc, #444]	; (800a548 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800a38a:	681b      	ldr	r3, [r3, #0]
 800a38c:	f003 0320 	and.w	r3, r3, #32
 800a390:	2b00      	cmp	r3, #0
 800a392:	d02d      	beq.n	800a3f0 <HAL_RCC_GetSysClockFreq+0x17c>
            {
              hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800a394:	4b6c      	ldr	r3, [pc, #432]	; (800a548 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800a396:	681b      	ldr	r3, [r3, #0]
 800a398:	08db      	lsrs	r3, r3, #3
 800a39a:	f003 0303 	and.w	r3, r3, #3
 800a39e:	4a6b      	ldr	r2, [pc, #428]	; (800a54c <HAL_RCC_GetSysClockFreq+0x2d8>)
 800a3a0:	fa22 f303 	lsr.w	r3, r2, r3
 800a3a4:	607b      	str	r3, [r7, #4]
              pllvco = ((float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800a3a6:	687b      	ldr	r3, [r7, #4]
 800a3a8:	ee07 3a90 	vmov	s15, r3
 800a3ac:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800a3b0:	693b      	ldr	r3, [r7, #16]
 800a3b2:	ee07 3a90 	vmov	s15, r3
 800a3b6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800a3ba:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800a3be:	4b62      	ldr	r3, [pc, #392]	; (800a548 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800a3c0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a3c2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800a3c6:	ee07 3a90 	vmov	s15, r3
 800a3ca:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800a3ce:	ed97 6a02 	vldr	s12, [r7, #8]
 800a3d2:	eddf 5a61 	vldr	s11, [pc, #388]	; 800a558 <HAL_RCC_GetSysClockFreq+0x2e4>
 800a3d6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800a3da:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800a3de:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800a3e2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800a3e6:	ee67 7a27 	vmul.f32	s15, s14, s15
 800a3ea:	edc7 7a07 	vstr	s15, [r7, #28]
            }
            else
            {
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
            }
            break;
 800a3ee:	e087      	b.n	800a500 <HAL_RCC_GetSysClockFreq+0x28c>
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800a3f0:	693b      	ldr	r3, [r7, #16]
 800a3f2:	ee07 3a90 	vmov	s15, r3
 800a3f6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800a3fa:	eddf 6a58 	vldr	s13, [pc, #352]	; 800a55c <HAL_RCC_GetSysClockFreq+0x2e8>
 800a3fe:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800a402:	4b51      	ldr	r3, [pc, #324]	; (800a548 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800a404:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a406:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800a40a:	ee07 3a90 	vmov	s15, r3
 800a40e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800a412:	ed97 6a02 	vldr	s12, [r7, #8]
 800a416:	eddf 5a50 	vldr	s11, [pc, #320]	; 800a558 <HAL_RCC_GetSysClockFreq+0x2e4>
 800a41a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800a41e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800a422:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800a426:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800a42a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800a42e:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 800a432:	e065      	b.n	800a500 <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800a434:	693b      	ldr	r3, [r7, #16]
 800a436:	ee07 3a90 	vmov	s15, r3
 800a43a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800a43e:	eddf 6a48 	vldr	s13, [pc, #288]	; 800a560 <HAL_RCC_GetSysClockFreq+0x2ec>
 800a442:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800a446:	4b40      	ldr	r3, [pc, #256]	; (800a548 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800a448:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a44a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800a44e:	ee07 3a90 	vmov	s15, r3
 800a452:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800a456:	ed97 6a02 	vldr	s12, [r7, #8]
 800a45a:	eddf 5a3f 	vldr	s11, [pc, #252]	; 800a558 <HAL_RCC_GetSysClockFreq+0x2e4>
 800a45e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800a462:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800a466:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800a46a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800a46e:	ee67 7a27 	vmul.f32	s15, s14, s15
 800a472:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 800a476:	e043      	b.n	800a500 <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
            pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800a478:	693b      	ldr	r3, [r7, #16]
 800a47a:	ee07 3a90 	vmov	s15, r3
 800a47e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800a482:	eddf 6a38 	vldr	s13, [pc, #224]	; 800a564 <HAL_RCC_GetSysClockFreq+0x2f0>
 800a486:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800a48a:	4b2f      	ldr	r3, [pc, #188]	; (800a548 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800a48c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a48e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800a492:	ee07 3a90 	vmov	s15, r3
 800a496:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800a49a:	ed97 6a02 	vldr	s12, [r7, #8]
 800a49e:	eddf 5a2e 	vldr	s11, [pc, #184]	; 800a558 <HAL_RCC_GetSysClockFreq+0x2e4>
 800a4a2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800a4a6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800a4aa:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800a4ae:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800a4b2:	ee67 7a27 	vmul.f32	s15, s14, s15
 800a4b6:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 800a4ba:	e021      	b.n	800a500 <HAL_RCC_GetSysClockFreq+0x28c>

          default:
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800a4bc:	693b      	ldr	r3, [r7, #16]
 800a4be:	ee07 3a90 	vmov	s15, r3
 800a4c2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800a4c6:	eddf 6a26 	vldr	s13, [pc, #152]	; 800a560 <HAL_RCC_GetSysClockFreq+0x2ec>
 800a4ca:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800a4ce:	4b1e      	ldr	r3, [pc, #120]	; (800a548 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800a4d0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a4d2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800a4d6:	ee07 3a90 	vmov	s15, r3
 800a4da:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800a4de:	ed97 6a02 	vldr	s12, [r7, #8]
 800a4e2:	eddf 5a1d 	vldr	s11, [pc, #116]	; 800a558 <HAL_RCC_GetSysClockFreq+0x2e4>
 800a4e6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800a4ea:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800a4ee:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800a4f2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800a4f6:	ee67 7a27 	vmul.f32	s15, s14, s15
 800a4fa:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 800a4fe:	bf00      	nop
        }
        pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >> 9) + 1U) ;
 800a500:	4b11      	ldr	r3, [pc, #68]	; (800a548 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800a502:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a504:	0a5b      	lsrs	r3, r3, #9
 800a506:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800a50a:	3301      	adds	r3, #1
 800a50c:	603b      	str	r3, [r7, #0]
        sysclockfreq = (uint32_t)(float_t)(pllvco / (float_t)pllp);
 800a50e:	683b      	ldr	r3, [r7, #0]
 800a510:	ee07 3a90 	vmov	s15, r3
 800a514:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 800a518:	edd7 6a07 	vldr	s13, [r7, #28]
 800a51c:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800a520:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800a524:	ee17 3a90 	vmov	r3, s15
 800a528:	61bb      	str	r3, [r7, #24]
      }
      else
      {
        sysclockfreq = 0U;
      }
      break;
 800a52a:	e005      	b.n	800a538 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = 0U;
 800a52c:	2300      	movs	r3, #0
 800a52e:	61bb      	str	r3, [r7, #24]
      break;
 800a530:	e002      	b.n	800a538 <HAL_RCC_GetSysClockFreq+0x2c4>

    default:
      sysclockfreq = CSI_VALUE;
 800a532:	4b07      	ldr	r3, [pc, #28]	; (800a550 <HAL_RCC_GetSysClockFreq+0x2dc>)
 800a534:	61bb      	str	r3, [r7, #24]
      break;
 800a536:	bf00      	nop
  }

  return sysclockfreq;
 800a538:	69bb      	ldr	r3, [r7, #24]
}
 800a53a:	4618      	mov	r0, r3
 800a53c:	3724      	adds	r7, #36	; 0x24
 800a53e:	46bd      	mov	sp, r7
 800a540:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a544:	4770      	bx	lr
 800a546:	bf00      	nop
 800a548:	58024400 	.word	0x58024400
 800a54c:	03d09000 	.word	0x03d09000
 800a550:	003d0900 	.word	0x003d0900
 800a554:	007f1b10 	.word	0x007f1b10
 800a558:	46000000 	.word	0x46000000
 800a55c:	4c742400 	.word	0x4c742400
 800a560:	4a742400 	.word	0x4a742400
 800a564:	4afe3620 	.word	0x4afe3620

0800a568 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemD2Clock CMSIS variable is used to store System domain2 Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800a568:	b580      	push	{r7, lr}
 800a56a:	b082      	sub	sp, #8
 800a56c:	af00      	add	r7, sp, #0
  uint32_t common_system_clock;

#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 800a56e:	f7ff fe81 	bl	800a274 <HAL_RCC_GetSysClockFreq>
 800a572:	4602      	mov	r2, r0
 800a574:	4b10      	ldr	r3, [pc, #64]	; (800a5b8 <HAL_RCC_GetHCLKFreq+0x50>)
 800a576:	699b      	ldr	r3, [r3, #24]
 800a578:	0a1b      	lsrs	r3, r3, #8
 800a57a:	f003 030f 	and.w	r3, r3, #15
 800a57e:	490f      	ldr	r1, [pc, #60]	; (800a5bc <HAL_RCC_GetHCLKFreq+0x54>)
 800a580:	5ccb      	ldrb	r3, [r1, r3]
 800a582:	f003 031f 	and.w	r3, r3, #31
 800a586:	fa22 f303 	lsr.w	r3, r2, r3
 800a58a:	607b      	str	r3, [r7, #4]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos] & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 800a58c:	4b0a      	ldr	r3, [pc, #40]	; (800a5b8 <HAL_RCC_GetHCLKFreq+0x50>)
 800a58e:	699b      	ldr	r3, [r3, #24]
 800a590:	f003 030f 	and.w	r3, r3, #15
 800a594:	4a09      	ldr	r2, [pc, #36]	; (800a5bc <HAL_RCC_GetHCLKFreq+0x54>)
 800a596:	5cd3      	ldrb	r3, [r2, r3]
 800a598:	f003 031f 	and.w	r3, r3, #31
 800a59c:	687a      	ldr	r2, [r7, #4]
 800a59e:	fa22 f303 	lsr.w	r3, r2, r3
 800a5a2:	4a07      	ldr	r2, [pc, #28]	; (800a5c0 <HAL_RCC_GetHCLKFreq+0x58>)
 800a5a4:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 800a5a6:	4a07      	ldr	r2, [pc, #28]	; (800a5c4 <HAL_RCC_GetHCLKFreq+0x5c>)
 800a5a8:	687b      	ldr	r3, [r7, #4]
 800a5aa:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  return SystemD2Clock;
 800a5ac:	4b04      	ldr	r3, [pc, #16]	; (800a5c0 <HAL_RCC_GetHCLKFreq+0x58>)
 800a5ae:	681b      	ldr	r3, [r3, #0]
}
 800a5b0:	4618      	mov	r0, r3
 800a5b2:	3708      	adds	r7, #8
 800a5b4:	46bd      	mov	sp, r7
 800a5b6:	bd80      	pop	{r7, pc}
 800a5b8:	58024400 	.word	0x58024400
 800a5bc:	0801ebe0 	.word	0x0801ebe0
 800a5c0:	20000014 	.word	0x20000014
 800a5c4:	20000010 	.word	0x20000010

0800a5c8 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800a5c8:	b580      	push	{r7, lr}
 800a5ca:	af00      	add	r7, sp, #0
#if defined (RCC_D2CFGR_D2PPRE1)
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1) >> RCC_D2CFGR_D2PPRE1_Pos]) & 0x1FU));
 800a5cc:	f7ff ffcc 	bl	800a568 <HAL_RCC_GetHCLKFreq>
 800a5d0:	4602      	mov	r2, r0
 800a5d2:	4b06      	ldr	r3, [pc, #24]	; (800a5ec <HAL_RCC_GetPCLK1Freq+0x24>)
 800a5d4:	69db      	ldr	r3, [r3, #28]
 800a5d6:	091b      	lsrs	r3, r3, #4
 800a5d8:	f003 0307 	and.w	r3, r3, #7
 800a5dc:	4904      	ldr	r1, [pc, #16]	; (800a5f0 <HAL_RCC_GetPCLK1Freq+0x28>)
 800a5de:	5ccb      	ldrb	r3, [r1, r3]
 800a5e0:	f003 031f 	and.w	r3, r3, #31
 800a5e4:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1) >> RCC_CDCFGR2_CDPPRE1_Pos]) & 0x1FU));
#endif
}
 800a5e8:	4618      	mov	r0, r3
 800a5ea:	bd80      	pop	{r7, pc}
 800a5ec:	58024400 	.word	0x58024400
 800a5f0:	0801ebe0 	.word	0x0801ebe0

0800a5f4 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800a5f4:	b580      	push	{r7, lr}
 800a5f6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
#if defined(RCC_D2CFGR_D2PPRE2)
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2) >> RCC_D2CFGR_D2PPRE2_Pos]) & 0x1FU));
 800a5f8:	f7ff ffb6 	bl	800a568 <HAL_RCC_GetHCLKFreq>
 800a5fc:	4602      	mov	r2, r0
 800a5fe:	4b06      	ldr	r3, [pc, #24]	; (800a618 <HAL_RCC_GetPCLK2Freq+0x24>)
 800a600:	69db      	ldr	r3, [r3, #28]
 800a602:	0a1b      	lsrs	r3, r3, #8
 800a604:	f003 0307 	and.w	r3, r3, #7
 800a608:	4904      	ldr	r1, [pc, #16]	; (800a61c <HAL_RCC_GetPCLK2Freq+0x28>)
 800a60a:	5ccb      	ldrb	r3, [r1, r3]
 800a60c:	f003 031f 	and.w	r3, r3, #31
 800a610:	fa22 f303 	lsr.w	r3, r2, r3
#else
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2) >> RCC_CDCFGR2_CDPPRE2_Pos]) & 0x1FU));
#endif
}
 800a614:	4618      	mov	r0, r3
 800a616:	bd80      	pop	{r7, pc}
 800a618:	58024400 	.word	0x58024400
 800a61c:	0801ebe0 	.word	0x0801ebe0

0800a620 <HAL_RCC_NMI_IRQHandler>:
  * @brief This function handles the RCC CSS interrupt request.
  * @note This API should be called under the NMI_Handler().
  * @retval None
  */
void HAL_RCC_NMI_IRQHandler(void)
{
 800a620:	b580      	push	{r7, lr}
 800a622:	af00      	add	r7, sp, #0
  /* Check RCC CSSF flag  */
  if (__HAL_RCC_GET_IT(RCC_IT_CSS))
 800a624:	4b07      	ldr	r3, [pc, #28]	; (800a644 <HAL_RCC_NMI_IRQHandler+0x24>)
 800a626:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800a628:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800a62c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800a630:	d105      	bne.n	800a63e <HAL_RCC_NMI_IRQHandler+0x1e>
  {
    /* RCC Clock Security System interrupt user callback */
    HAL_RCC_CSSCallback();
 800a632:	f000 f809 	bl	800a648 <HAL_RCC_CSSCallback>

    /* Clear RCC CSS pending bit */
    __HAL_RCC_CLEAR_IT(RCC_IT_CSS);
 800a636:	4b03      	ldr	r3, [pc, #12]	; (800a644 <HAL_RCC_NMI_IRQHandler+0x24>)
 800a638:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800a63c:	669a      	str	r2, [r3, #104]	; 0x68
  }
}
 800a63e:	bf00      	nop
 800a640:	bd80      	pop	{r7, pc}
 800a642:	bf00      	nop
 800a644:	58024400 	.word	0x58024400

0800a648 <HAL_RCC_CSSCallback>:
/**
  * @brief  RCC Clock Security System interrupt callback
  * @retval none
  */
__weak void HAL_RCC_CSSCallback(void)
{
 800a648:	b480      	push	{r7}
 800a64a:	af00      	add	r7, sp, #0
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_RCC_CSSCallback could be implemented in the user file
   */
}
 800a64c:	bf00      	nop
 800a64e:	46bd      	mov	sp, r7
 800a650:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a654:	4770      	bx	lr
	...

0800a658 <HAL_RCCEx_PeriphCLKConfig>:
  * (*) : Available on some STM32H7 lines only.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 800a658:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800a65c:	b0ca      	sub	sp, #296	; 0x128
 800a65e:	af00      	add	r7, sp, #0
 800a660:	f8c7 0114 	str.w	r0, [r7, #276]	; 0x114
  uint32_t tmpreg;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 800a664:	2300      	movs	r3, #0
 800a666:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 800a66a:	2300      	movs	r3, #0
 800a66c:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126

  /*---------------------------- SPDIFRX configuration -------------------------------*/

  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 800a670:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800a674:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a678:	f002 6400 	and.w	r4, r2, #134217728	; 0x8000000
 800a67c:	2500      	movs	r5, #0
 800a67e:	ea54 0305 	orrs.w	r3, r4, r5
 800a682:	d049      	beq.n	800a718 <HAL_RCCEx_PeriphCLKConfig+0xc0>
  {

    switch (PeriphClkInit->SpdifrxClockSelection)
 800a684:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800a688:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800a68a:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 800a68e:	d02f      	beq.n	800a6f0 <HAL_RCCEx_PeriphCLKConfig+0x98>
 800a690:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 800a694:	d828      	bhi.n	800a6e8 <HAL_RCCEx_PeriphCLKConfig+0x90>
 800a696:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800a69a:	d01a      	beq.n	800a6d2 <HAL_RCCEx_PeriphCLKConfig+0x7a>
 800a69c:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800a6a0:	d822      	bhi.n	800a6e8 <HAL_RCCEx_PeriphCLKConfig+0x90>
 800a6a2:	2b00      	cmp	r3, #0
 800a6a4:	d003      	beq.n	800a6ae <HAL_RCCEx_PeriphCLKConfig+0x56>
 800a6a6:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800a6aa:	d007      	beq.n	800a6bc <HAL_RCCEx_PeriphCLKConfig+0x64>
 800a6ac:	e01c      	b.n	800a6e8 <HAL_RCCEx_PeriphCLKConfig+0x90>
    {
      case RCC_SPDIFRXCLKSOURCE_PLL:      /* PLL is used as clock source for SPDIFRX*/
        /* Enable PLL1Q Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800a6ae:	4bb8      	ldr	r3, [pc, #736]	; (800a990 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800a6b0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a6b2:	4ab7      	ldr	r2, [pc, #732]	; (800a990 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800a6b4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800a6b8:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 800a6ba:	e01a      	b.n	800a6f2 <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL2: /* PLL2 is used as clock source for SPDIFRX*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 800a6bc:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800a6c0:	3308      	adds	r3, #8
 800a6c2:	2102      	movs	r1, #2
 800a6c4:	4618      	mov	r0, r3
 800a6c6:	f002 fbb7 	bl	800ce38 <RCCEx_PLL2_Config>
 800a6ca:	4603      	mov	r3, r0
 800a6cc:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 800a6d0:	e00f      	b.n	800a6f2 <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPDIFRX*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800a6d2:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800a6d6:	3328      	adds	r3, #40	; 0x28
 800a6d8:	2102      	movs	r1, #2
 800a6da:	4618      	mov	r0, r3
 800a6dc:	f002 fc5e 	bl	800cf9c <RCCEx_PLL3_Config>
 800a6e0:	4603      	mov	r3, r0
 800a6e2:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 800a6e6:	e004      	b.n	800a6f2 <HAL_RCCEx_PeriphCLKConfig+0x9a>
        /* Internal OSC clock is used as source of SPDIFRX clock*/
        /* SPDIFRX clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800a6e8:	2301      	movs	r3, #1
 800a6ea:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 800a6ee:	e000      	b.n	800a6f2 <HAL_RCCEx_PeriphCLKConfig+0x9a>
        break;
 800a6f0:	bf00      	nop
    }

    if (ret == HAL_OK)
 800a6f2:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800a6f6:	2b00      	cmp	r3, #0
 800a6f8:	d10a      	bne.n	800a710 <HAL_RCCEx_PeriphCLKConfig+0xb8>
    {
      /* Set the source of SPDIFRX clock*/
      __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifrxClockSelection);
 800a6fa:	4ba5      	ldr	r3, [pc, #660]	; (800a990 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800a6fc:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800a6fe:	f423 1140 	bic.w	r1, r3, #3145728	; 0x300000
 800a702:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800a706:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800a708:	4aa1      	ldr	r2, [pc, #644]	; (800a990 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800a70a:	430b      	orrs	r3, r1
 800a70c:	6513      	str	r3, [r2, #80]	; 0x50
 800a70e:	e003      	b.n	800a718 <HAL_RCCEx_PeriphCLKConfig+0xc0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800a710:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800a714:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*---------------------------- SAI1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 800a718:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800a71c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a720:	f402 7880 	and.w	r8, r2, #256	; 0x100
 800a724:	f04f 0900 	mov.w	r9, #0
 800a728:	ea58 0309 	orrs.w	r3, r8, r9
 800a72c:	d047      	beq.n	800a7be <HAL_RCCEx_PeriphCLKConfig+0x166>
  {
    switch (PeriphClkInit->Sai1ClockSelection)
 800a72e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800a732:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800a734:	2b04      	cmp	r3, #4
 800a736:	d82a      	bhi.n	800a78e <HAL_RCCEx_PeriphCLKConfig+0x136>
 800a738:	a201      	add	r2, pc, #4	; (adr r2, 800a740 <HAL_RCCEx_PeriphCLKConfig+0xe8>)
 800a73a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a73e:	bf00      	nop
 800a740:	0800a755 	.word	0x0800a755
 800a744:	0800a763 	.word	0x0800a763
 800a748:	0800a779 	.word	0x0800a779
 800a74c:	0800a797 	.word	0x0800a797
 800a750:	0800a797 	.word	0x0800a797
    {
      case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800a754:	4b8e      	ldr	r3, [pc, #568]	; (800a990 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800a756:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a758:	4a8d      	ldr	r2, [pc, #564]	; (800a990 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800a75a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800a75e:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 800a760:	e01a      	b.n	800a798 <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800a762:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800a766:	3308      	adds	r3, #8
 800a768:	2100      	movs	r1, #0
 800a76a:	4618      	mov	r0, r3
 800a76c:	f002 fb64 	bl	800ce38 <RCCEx_PLL2_Config>
 800a770:	4603      	mov	r3, r0
 800a772:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 800a776:	e00f      	b.n	800a798 <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 800a778:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800a77c:	3328      	adds	r3, #40	; 0x28
 800a77e:	2100      	movs	r1, #0
 800a780:	4618      	mov	r0, r3
 800a782:	f002 fc0b 	bl	800cf9c <RCCEx_PLL3_Config>
 800a786:	4603      	mov	r3, r0
 800a788:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 800a78c:	e004      	b.n	800a798 <HAL_RCCEx_PeriphCLKConfig+0x140>
        /* HSI, HSE, or CSI oscillator is used as source of SAI1 clock */
        /* SAI1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800a78e:	2301      	movs	r3, #1
 800a790:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 800a794:	e000      	b.n	800a798 <HAL_RCCEx_PeriphCLKConfig+0x140>
        break;
 800a796:	bf00      	nop
    }

    if (ret == HAL_OK)
 800a798:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800a79c:	2b00      	cmp	r3, #0
 800a79e:	d10a      	bne.n	800a7b6 <HAL_RCCEx_PeriphCLKConfig+0x15e>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 800a7a0:	4b7b      	ldr	r3, [pc, #492]	; (800a990 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800a7a2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800a7a4:	f023 0107 	bic.w	r1, r3, #7
 800a7a8:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800a7ac:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800a7ae:	4a78      	ldr	r2, [pc, #480]	; (800a990 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800a7b0:	430b      	orrs	r3, r1
 800a7b2:	6513      	str	r3, [r2, #80]	; 0x50
 800a7b4:	e003      	b.n	800a7be <HAL_RCCEx_PeriphCLKConfig+0x166>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800a7b6:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800a7ba:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

#if defined(SAI3)
  /*---------------------------- SAI2/3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI23) == RCC_PERIPHCLK_SAI23)
 800a7be:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800a7c2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a7c6:	f402 7a00 	and.w	sl, r2, #512	; 0x200
 800a7ca:	f04f 0b00 	mov.w	fp, #0
 800a7ce:	ea5a 030b 	orrs.w	r3, sl, fp
 800a7d2:	d04c      	beq.n	800a86e <HAL_RCCEx_PeriphCLKConfig+0x216>
  {
    switch (PeriphClkInit->Sai23ClockSelection)
 800a7d4:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800a7d8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800a7da:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800a7de:	d030      	beq.n	800a842 <HAL_RCCEx_PeriphCLKConfig+0x1ea>
 800a7e0:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800a7e4:	d829      	bhi.n	800a83a <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 800a7e6:	2bc0      	cmp	r3, #192	; 0xc0
 800a7e8:	d02d      	beq.n	800a846 <HAL_RCCEx_PeriphCLKConfig+0x1ee>
 800a7ea:	2bc0      	cmp	r3, #192	; 0xc0
 800a7ec:	d825      	bhi.n	800a83a <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 800a7ee:	2b80      	cmp	r3, #128	; 0x80
 800a7f0:	d018      	beq.n	800a824 <HAL_RCCEx_PeriphCLKConfig+0x1cc>
 800a7f2:	2b80      	cmp	r3, #128	; 0x80
 800a7f4:	d821      	bhi.n	800a83a <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 800a7f6:	2b00      	cmp	r3, #0
 800a7f8:	d002      	beq.n	800a800 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
 800a7fa:	2b40      	cmp	r3, #64	; 0x40
 800a7fc:	d007      	beq.n	800a80e <HAL_RCCEx_PeriphCLKConfig+0x1b6>
 800a7fe:	e01c      	b.n	800a83a <HAL_RCCEx_PeriphCLKConfig+0x1e2>
    {
      case RCC_SAI23CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2/3 */
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800a800:	4b63      	ldr	r3, [pc, #396]	; (800a990 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800a802:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a804:	4a62      	ldr	r2, [pc, #392]	; (800a990 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800a806:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800a80a:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SAI2/3 clock source configuration done later after clock selection check */
        break;
 800a80c:	e01c      	b.n	800a848 <HAL_RCCEx_PeriphCLKConfig+0x1f0>

      case RCC_SAI23CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2/3 */

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800a80e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800a812:	3308      	adds	r3, #8
 800a814:	2100      	movs	r1, #0
 800a816:	4618      	mov	r0, r3
 800a818:	f002 fb0e 	bl	800ce38 <RCCEx_PLL2_Config>
 800a81c:	4603      	mov	r3, r0
 800a81e:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SAI2/3 clock source configuration done later after clock selection check */
        break;
 800a822:	e011      	b.n	800a848 <HAL_RCCEx_PeriphCLKConfig+0x1f0>

      case RCC_SAI23CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2/3 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 800a824:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800a828:	3328      	adds	r3, #40	; 0x28
 800a82a:	2100      	movs	r1, #0
 800a82c:	4618      	mov	r0, r3
 800a82e:	f002 fbb5 	bl	800cf9c <RCCEx_PLL3_Config>
 800a832:	4603      	mov	r3, r0
 800a834:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SAI2/3 clock source configuration done later after clock selection check */
        break;
 800a838:	e006      	b.n	800a848 <HAL_RCCEx_PeriphCLKConfig+0x1f0>
        /* HSI, HSE, or CSI oscillator is used as source of SAI2/3 clock */
        /* SAI2/3 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800a83a:	2301      	movs	r3, #1
 800a83c:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 800a840:	e002      	b.n	800a848 <HAL_RCCEx_PeriphCLKConfig+0x1f0>
        break;
 800a842:	bf00      	nop
 800a844:	e000      	b.n	800a848 <HAL_RCCEx_PeriphCLKConfig+0x1f0>
        break;
 800a846:	bf00      	nop
    }

    if (ret == HAL_OK)
 800a848:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800a84c:	2b00      	cmp	r3, #0
 800a84e:	d10a      	bne.n	800a866 <HAL_RCCEx_PeriphCLKConfig+0x20e>
    {
      /* Set the source of SAI2/3 clock*/
      __HAL_RCC_SAI23_CONFIG(PeriphClkInit->Sai23ClockSelection);
 800a850:	4b4f      	ldr	r3, [pc, #316]	; (800a990 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800a852:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800a854:	f423 71e0 	bic.w	r1, r3, #448	; 0x1c0
 800a858:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800a85c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800a85e:	4a4c      	ldr	r2, [pc, #304]	; (800a990 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800a860:	430b      	orrs	r3, r1
 800a862:	6513      	str	r3, [r2, #80]	; 0x50
 800a864:	e003      	b.n	800a86e <HAL_RCCEx_PeriphCLKConfig+0x216>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800a866:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800a86a:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
  }
#endif  /*SAI2B*/

#if defined(SAI4)
  /*---------------------------- SAI4A configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4A) == RCC_PERIPHCLK_SAI4A)
 800a86e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800a872:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a876:	f402 6380 	and.w	r3, r2, #1024	; 0x400
 800a87a:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
 800a87e:	2300      	movs	r3, #0
 800a880:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
 800a884:	e9d7 1242 	ldrd	r1, r2, [r7, #264]	; 0x108
 800a888:	460b      	mov	r3, r1
 800a88a:	4313      	orrs	r3, r2
 800a88c:	d053      	beq.n	800a936 <HAL_RCCEx_PeriphCLKConfig+0x2de>
  {
    switch (PeriphClkInit->Sai4AClockSelection)
 800a88e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800a892:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 800a896:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 800a89a:	d035      	beq.n	800a908 <HAL_RCCEx_PeriphCLKConfig+0x2b0>
 800a89c:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 800a8a0:	d82e      	bhi.n	800a900 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 800a8a2:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 800a8a6:	d031      	beq.n	800a90c <HAL_RCCEx_PeriphCLKConfig+0x2b4>
 800a8a8:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 800a8ac:	d828      	bhi.n	800a900 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 800a8ae:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800a8b2:	d01a      	beq.n	800a8ea <HAL_RCCEx_PeriphCLKConfig+0x292>
 800a8b4:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800a8b8:	d822      	bhi.n	800a900 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 800a8ba:	2b00      	cmp	r3, #0
 800a8bc:	d003      	beq.n	800a8c6 <HAL_RCCEx_PeriphCLKConfig+0x26e>
 800a8be:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800a8c2:	d007      	beq.n	800a8d4 <HAL_RCCEx_PeriphCLKConfig+0x27c>
 800a8c4:	e01c      	b.n	800a900 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
    {
      case RCC_SAI4ACLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800a8c6:	4b32      	ldr	r3, [pc, #200]	; (800a990 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800a8c8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a8ca:	4a31      	ldr	r2, [pc, #196]	; (800a990 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800a8cc:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800a8d0:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 800a8d2:	e01c      	b.n	800a90e <HAL_RCCEx_PeriphCLKConfig+0x2b6>

      case RCC_SAI4ACLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800a8d4:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800a8d8:	3308      	adds	r3, #8
 800a8da:	2100      	movs	r1, #0
 800a8dc:	4618      	mov	r0, r3
 800a8de:	f002 faab 	bl	800ce38 <RCCEx_PLL2_Config>
 800a8e2:	4603      	mov	r3, r0
 800a8e4:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SAI2 clock source configuration done later after clock selection check */
        break;
 800a8e8:	e011      	b.n	800a90e <HAL_RCCEx_PeriphCLKConfig+0x2b6>

      case RCC_SAI4ACLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 800a8ea:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800a8ee:	3328      	adds	r3, #40	; 0x28
 800a8f0:	2100      	movs	r1, #0
 800a8f2:	4618      	mov	r0, r3
 800a8f4:	f002 fb52 	bl	800cf9c <RCCEx_PLL3_Config>
 800a8f8:	4603      	mov	r3, r0
 800a8fa:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 800a8fe:	e006      	b.n	800a90e <HAL_RCCEx_PeriphCLKConfig+0x2b6>
        /* SAI4A clock source configuration done later after clock selection check */
        break;
#endif /* RCC_VER_3_0 */

      default:
        ret = HAL_ERROR;
 800a900:	2301      	movs	r3, #1
 800a902:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 800a906:	e002      	b.n	800a90e <HAL_RCCEx_PeriphCLKConfig+0x2b6>
        break;
 800a908:	bf00      	nop
 800a90a:	e000      	b.n	800a90e <HAL_RCCEx_PeriphCLKConfig+0x2b6>
        break;
 800a90c:	bf00      	nop
    }

    if (ret == HAL_OK)
 800a90e:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800a912:	2b00      	cmp	r3, #0
 800a914:	d10b      	bne.n	800a92e <HAL_RCCEx_PeriphCLKConfig+0x2d6>
    {
      /* Set the source of SAI4A clock*/
      __HAL_RCC_SAI4A_CONFIG(PeriphClkInit->Sai4AClockSelection);
 800a916:	4b1e      	ldr	r3, [pc, #120]	; (800a990 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800a918:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800a91a:	f423 0160 	bic.w	r1, r3, #14680064	; 0xe00000
 800a91e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800a922:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 800a926:	4a1a      	ldr	r2, [pc, #104]	; (800a990 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800a928:	430b      	orrs	r3, r1
 800a92a:	6593      	str	r3, [r2, #88]	; 0x58
 800a92c:	e003      	b.n	800a936 <HAL_RCCEx_PeriphCLKConfig+0x2de>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800a92e:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800a932:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }
  /*---------------------------- SAI4B configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4B) == RCC_PERIPHCLK_SAI4B)
 800a936:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800a93a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a93e:	f402 6300 	and.w	r3, r2, #2048	; 0x800
 800a942:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 800a946:	2300      	movs	r3, #0
 800a948:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 800a94c:	e9d7 1240 	ldrd	r1, r2, [r7, #256]	; 0x100
 800a950:	460b      	mov	r3, r1
 800a952:	4313      	orrs	r3, r2
 800a954:	d056      	beq.n	800aa04 <HAL_RCCEx_PeriphCLKConfig+0x3ac>
  {
    switch (PeriphClkInit->Sai4BClockSelection)
 800a956:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800a95a:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 800a95e:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800a962:	d038      	beq.n	800a9d6 <HAL_RCCEx_PeriphCLKConfig+0x37e>
 800a964:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800a968:	d831      	bhi.n	800a9ce <HAL_RCCEx_PeriphCLKConfig+0x376>
 800a96a:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 800a96e:	d034      	beq.n	800a9da <HAL_RCCEx_PeriphCLKConfig+0x382>
 800a970:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 800a974:	d82b      	bhi.n	800a9ce <HAL_RCCEx_PeriphCLKConfig+0x376>
 800a976:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800a97a:	d01d      	beq.n	800a9b8 <HAL_RCCEx_PeriphCLKConfig+0x360>
 800a97c:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800a980:	d825      	bhi.n	800a9ce <HAL_RCCEx_PeriphCLKConfig+0x376>
 800a982:	2b00      	cmp	r3, #0
 800a984:	d006      	beq.n	800a994 <HAL_RCCEx_PeriphCLKConfig+0x33c>
 800a986:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800a98a:	d00a      	beq.n	800a9a2 <HAL_RCCEx_PeriphCLKConfig+0x34a>
 800a98c:	e01f      	b.n	800a9ce <HAL_RCCEx_PeriphCLKConfig+0x376>
 800a98e:	bf00      	nop
 800a990:	58024400 	.word	0x58024400
    {
      case RCC_SAI4BCLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800a994:	4ba2      	ldr	r3, [pc, #648]	; (800ac20 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800a996:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a998:	4aa1      	ldr	r2, [pc, #644]	; (800ac20 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800a99a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800a99e:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 800a9a0:	e01c      	b.n	800a9dc <HAL_RCCEx_PeriphCLKConfig+0x384>

      case RCC_SAI4BCLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800a9a2:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800a9a6:	3308      	adds	r3, #8
 800a9a8:	2100      	movs	r1, #0
 800a9aa:	4618      	mov	r0, r3
 800a9ac:	f002 fa44 	bl	800ce38 <RCCEx_PLL2_Config>
 800a9b0:	4603      	mov	r3, r0
 800a9b2:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SAI2 clock source configuration done later after clock selection check */
        break;
 800a9b6:	e011      	b.n	800a9dc <HAL_RCCEx_PeriphCLKConfig+0x384>

      case RCC_SAI4BCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 800a9b8:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800a9bc:	3328      	adds	r3, #40	; 0x28
 800a9be:	2100      	movs	r1, #0
 800a9c0:	4618      	mov	r0, r3
 800a9c2:	f002 faeb 	bl	800cf9c <RCCEx_PLL3_Config>
 800a9c6:	4603      	mov	r3, r0
 800a9c8:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 800a9cc:	e006      	b.n	800a9dc <HAL_RCCEx_PeriphCLKConfig+0x384>
        /* SAI4B clock source configuration done later after clock selection check */
        break;
#endif /* RCC_VER_3_0 */

      default:
        ret = HAL_ERROR;
 800a9ce:	2301      	movs	r3, #1
 800a9d0:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 800a9d4:	e002      	b.n	800a9dc <HAL_RCCEx_PeriphCLKConfig+0x384>
        break;
 800a9d6:	bf00      	nop
 800a9d8:	e000      	b.n	800a9dc <HAL_RCCEx_PeriphCLKConfig+0x384>
        break;
 800a9da:	bf00      	nop
    }

    if (ret == HAL_OK)
 800a9dc:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800a9e0:	2b00      	cmp	r3, #0
 800a9e2:	d10b      	bne.n	800a9fc <HAL_RCCEx_PeriphCLKConfig+0x3a4>
    {
      /* Set the source of SAI4B clock*/
      __HAL_RCC_SAI4B_CONFIG(PeriphClkInit->Sai4BClockSelection);
 800a9e4:	4b8e      	ldr	r3, [pc, #568]	; (800ac20 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800a9e6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800a9e8:	f023 61e0 	bic.w	r1, r3, #117440512	; 0x7000000
 800a9ec:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800a9f0:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 800a9f4:	4a8a      	ldr	r2, [pc, #552]	; (800ac20 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800a9f6:	430b      	orrs	r3, r1
 800a9f8:	6593      	str	r3, [r2, #88]	; 0x58
 800a9fa:	e003      	b.n	800aa04 <HAL_RCCEx_PeriphCLKConfig+0x3ac>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800a9fc:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800aa00:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
  }
#endif  /*SAI4*/

#if defined(QUADSPI)
  /*---------------------------- QSPI configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 800aa04:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800aa08:	e9d3 2300 	ldrd	r2, r3, [r3]
 800aa0c:	f002 7300 	and.w	r3, r2, #33554432	; 0x2000000
 800aa10:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 800aa14:	2300      	movs	r3, #0
 800aa16:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 800aa1a:	e9d7 123e 	ldrd	r1, r2, [r7, #248]	; 0xf8
 800aa1e:	460b      	mov	r3, r1
 800aa20:	4313      	orrs	r3, r2
 800aa22:	d03a      	beq.n	800aa9a <HAL_RCCEx_PeriphCLKConfig+0x442>
  {
    switch (PeriphClkInit->QspiClockSelection)
 800aa24:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800aa28:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800aa2a:	2b30      	cmp	r3, #48	; 0x30
 800aa2c:	d01f      	beq.n	800aa6e <HAL_RCCEx_PeriphCLKConfig+0x416>
 800aa2e:	2b30      	cmp	r3, #48	; 0x30
 800aa30:	d819      	bhi.n	800aa66 <HAL_RCCEx_PeriphCLKConfig+0x40e>
 800aa32:	2b20      	cmp	r3, #32
 800aa34:	d00c      	beq.n	800aa50 <HAL_RCCEx_PeriphCLKConfig+0x3f8>
 800aa36:	2b20      	cmp	r3, #32
 800aa38:	d815      	bhi.n	800aa66 <HAL_RCCEx_PeriphCLKConfig+0x40e>
 800aa3a:	2b00      	cmp	r3, #0
 800aa3c:	d019      	beq.n	800aa72 <HAL_RCCEx_PeriphCLKConfig+0x41a>
 800aa3e:	2b10      	cmp	r3, #16
 800aa40:	d111      	bne.n	800aa66 <HAL_RCCEx_PeriphCLKConfig+0x40e>
    {
      case RCC_QSPICLKSOURCE_PLL:      /* PLL is used as clock source for QSPI*/
        /* Enable QSPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800aa42:	4b77      	ldr	r3, [pc, #476]	; (800ac20 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800aa44:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800aa46:	4a76      	ldr	r2, [pc, #472]	; (800ac20 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800aa48:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800aa4c:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* QSPI clock source configuration done later after clock selection check */
        break;
 800aa4e:	e011      	b.n	800aa74 <HAL_RCCEx_PeriphCLKConfig+0x41c>

      case RCC_QSPICLKSOURCE_PLL2: /* PLL2 is used as clock source for QSPI*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 800aa50:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800aa54:	3308      	adds	r3, #8
 800aa56:	2102      	movs	r1, #2
 800aa58:	4618      	mov	r0, r3
 800aa5a:	f002 f9ed 	bl	800ce38 <RCCEx_PLL2_Config>
 800aa5e:	4603      	mov	r3, r0
 800aa60:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* QSPI clock source configuration done later after clock selection check */
        break;
 800aa64:	e006      	b.n	800aa74 <HAL_RCCEx_PeriphCLKConfig+0x41c>
      case RCC_QSPICLKSOURCE_D1HCLK:
        /* Domain1 HCLK  clock selected as QSPI kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 800aa66:	2301      	movs	r3, #1
 800aa68:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 800aa6c:	e002      	b.n	800aa74 <HAL_RCCEx_PeriphCLKConfig+0x41c>
        break;
 800aa6e:	bf00      	nop
 800aa70:	e000      	b.n	800aa74 <HAL_RCCEx_PeriphCLKConfig+0x41c>
        break;
 800aa72:	bf00      	nop
    }

    if (ret == HAL_OK)
 800aa74:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800aa78:	2b00      	cmp	r3, #0
 800aa7a:	d10a      	bne.n	800aa92 <HAL_RCCEx_PeriphCLKConfig+0x43a>
    {
      /* Set the source of QSPI clock*/
      __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 800aa7c:	4b68      	ldr	r3, [pc, #416]	; (800ac20 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800aa7e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800aa80:	f023 0130 	bic.w	r1, r3, #48	; 0x30
 800aa84:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800aa88:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800aa8a:	4a65      	ldr	r2, [pc, #404]	; (800ac20 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800aa8c:	430b      	orrs	r3, r1
 800aa8e:	64d3      	str	r3, [r2, #76]	; 0x4c
 800aa90:	e003      	b.n	800aa9a <HAL_RCCEx_PeriphCLKConfig+0x442>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800aa92:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800aa96:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }
#endif  /*OCTOSPI*/

  /*---------------------------- SPI1/2/3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI123) == RCC_PERIPHCLK_SPI123)
 800aa9a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800aa9e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800aaa2:	f402 5380 	and.w	r3, r2, #4096	; 0x1000
 800aaa6:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 800aaaa:	2300      	movs	r3, #0
 800aaac:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 800aab0:	e9d7 123c 	ldrd	r1, r2, [r7, #240]	; 0xf0
 800aab4:	460b      	mov	r3, r1
 800aab6:	4313      	orrs	r3, r2
 800aab8:	d051      	beq.n	800ab5e <HAL_RCCEx_PeriphCLKConfig+0x506>
  {
    switch (PeriphClkInit->Spi123ClockSelection)
 800aaba:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800aabe:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800aac0:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800aac4:	d035      	beq.n	800ab32 <HAL_RCCEx_PeriphCLKConfig+0x4da>
 800aac6:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800aaca:	d82e      	bhi.n	800ab2a <HAL_RCCEx_PeriphCLKConfig+0x4d2>
 800aacc:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 800aad0:	d031      	beq.n	800ab36 <HAL_RCCEx_PeriphCLKConfig+0x4de>
 800aad2:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 800aad6:	d828      	bhi.n	800ab2a <HAL_RCCEx_PeriphCLKConfig+0x4d2>
 800aad8:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800aadc:	d01a      	beq.n	800ab14 <HAL_RCCEx_PeriphCLKConfig+0x4bc>
 800aade:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800aae2:	d822      	bhi.n	800ab2a <HAL_RCCEx_PeriphCLKConfig+0x4d2>
 800aae4:	2b00      	cmp	r3, #0
 800aae6:	d003      	beq.n	800aaf0 <HAL_RCCEx_PeriphCLKConfig+0x498>
 800aae8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800aaec:	d007      	beq.n	800aafe <HAL_RCCEx_PeriphCLKConfig+0x4a6>
 800aaee:	e01c      	b.n	800ab2a <HAL_RCCEx_PeriphCLKConfig+0x4d2>
    {
      case RCC_SPI123CLKSOURCE_PLL:      /* PLL is used as clock source for SPI1/2/3 */
        /* Enable SPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800aaf0:	4b4b      	ldr	r3, [pc, #300]	; (800ac20 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800aaf2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800aaf4:	4a4a      	ldr	r2, [pc, #296]	; (800ac20 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800aaf6:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800aafa:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 800aafc:	e01c      	b.n	800ab38 <HAL_RCCEx_PeriphCLKConfig+0x4e0>

      case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800aafe:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800ab02:	3308      	adds	r3, #8
 800ab04:	2100      	movs	r1, #0
 800ab06:	4618      	mov	r0, r3
 800ab08:	f002 f996 	bl	800ce38 <RCCEx_PLL2_Config>
 800ab0c:	4603      	mov	r3, r0
 800ab0e:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 800ab12:	e011      	b.n	800ab38 <HAL_RCCEx_PeriphCLKConfig+0x4e0>

      case RCC_SPI123CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 800ab14:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800ab18:	3328      	adds	r3, #40	; 0x28
 800ab1a:	2100      	movs	r1, #0
 800ab1c:	4618      	mov	r0, r3
 800ab1e:	f002 fa3d 	bl	800cf9c <RCCEx_PLL3_Config>
 800ab22:	4603      	mov	r3, r0
 800ab24:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 800ab28:	e006      	b.n	800ab38 <HAL_RCCEx_PeriphCLKConfig+0x4e0>
        /* HSI, HSE, or CSI oscillator is used as source of SPI1/2/3 clock */
        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800ab2a:	2301      	movs	r3, #1
 800ab2c:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 800ab30:	e002      	b.n	800ab38 <HAL_RCCEx_PeriphCLKConfig+0x4e0>
        break;
 800ab32:	bf00      	nop
 800ab34:	e000      	b.n	800ab38 <HAL_RCCEx_PeriphCLKConfig+0x4e0>
        break;
 800ab36:	bf00      	nop
    }

    if (ret == HAL_OK)
 800ab38:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800ab3c:	2b00      	cmp	r3, #0
 800ab3e:	d10a      	bne.n	800ab56 <HAL_RCCEx_PeriphCLKConfig+0x4fe>
    {
      /* Set the source of SPI1/2/3 clock*/
      __HAL_RCC_SPI123_CONFIG(PeriphClkInit->Spi123ClockSelection);
 800ab40:	4b37      	ldr	r3, [pc, #220]	; (800ac20 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800ab42:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800ab44:	f423 41e0 	bic.w	r1, r3, #28672	; 0x7000
 800ab48:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800ab4c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800ab4e:	4a34      	ldr	r2, [pc, #208]	; (800ac20 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800ab50:	430b      	orrs	r3, r1
 800ab52:	6513      	str	r3, [r2, #80]	; 0x50
 800ab54:	e003      	b.n	800ab5e <HAL_RCCEx_PeriphCLKConfig+0x506>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800ab56:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800ab5a:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*---------------------------- SPI4/5 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI45) == RCC_PERIPHCLK_SPI45)
 800ab5e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800ab62:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ab66:	f402 5300 	and.w	r3, r2, #8192	; 0x2000
 800ab6a:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 800ab6e:	2300      	movs	r3, #0
 800ab70:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 800ab74:	e9d7 123a 	ldrd	r1, r2, [r7, #232]	; 0xe8
 800ab78:	460b      	mov	r3, r1
 800ab7a:	4313      	orrs	r3, r2
 800ab7c:	d056      	beq.n	800ac2c <HAL_RCCEx_PeriphCLKConfig+0x5d4>
  {
    switch (PeriphClkInit->Spi45ClockSelection)
 800ab7e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800ab82:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800ab84:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800ab88:	d033      	beq.n	800abf2 <HAL_RCCEx_PeriphCLKConfig+0x59a>
 800ab8a:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800ab8e:	d82c      	bhi.n	800abea <HAL_RCCEx_PeriphCLKConfig+0x592>
 800ab90:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 800ab94:	d02f      	beq.n	800abf6 <HAL_RCCEx_PeriphCLKConfig+0x59e>
 800ab96:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 800ab9a:	d826      	bhi.n	800abea <HAL_RCCEx_PeriphCLKConfig+0x592>
 800ab9c:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 800aba0:	d02b      	beq.n	800abfa <HAL_RCCEx_PeriphCLKConfig+0x5a2>
 800aba2:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 800aba6:	d820      	bhi.n	800abea <HAL_RCCEx_PeriphCLKConfig+0x592>
 800aba8:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800abac:	d012      	beq.n	800abd4 <HAL_RCCEx_PeriphCLKConfig+0x57c>
 800abae:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800abb2:	d81a      	bhi.n	800abea <HAL_RCCEx_PeriphCLKConfig+0x592>
 800abb4:	2b00      	cmp	r3, #0
 800abb6:	d022      	beq.n	800abfe <HAL_RCCEx_PeriphCLKConfig+0x5a6>
 800abb8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800abbc:	d115      	bne.n	800abea <HAL_RCCEx_PeriphCLKConfig+0x592>
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI4/5 */

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800abbe:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800abc2:	3308      	adds	r3, #8
 800abc4:	2101      	movs	r1, #1
 800abc6:	4618      	mov	r0, r3
 800abc8:	f002 f936 	bl	800ce38 <RCCEx_PLL2_Config>
 800abcc:	4603      	mov	r3, r0
 800abce:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 800abd2:	e015      	b.n	800ac00 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
      case RCC_SPI45CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800abd4:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800abd8:	3328      	adds	r3, #40	; 0x28
 800abda:	2101      	movs	r1, #1
 800abdc:	4618      	mov	r0, r3
 800abde:	f002 f9dd 	bl	800cf9c <RCCEx_PLL3_Config>
 800abe2:	4603      	mov	r3, r0
 800abe4:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 800abe8:	e00a      	b.n	800ac00 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        /* HSE,  oscillator is used as source of SPI4/5 clock */
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800abea:	2301      	movs	r3, #1
 800abec:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 800abf0:	e006      	b.n	800ac00 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 800abf2:	bf00      	nop
 800abf4:	e004      	b.n	800ac00 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 800abf6:	bf00      	nop
 800abf8:	e002      	b.n	800ac00 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 800abfa:	bf00      	nop
 800abfc:	e000      	b.n	800ac00 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 800abfe:	bf00      	nop
    }

    if (ret == HAL_OK)
 800ac00:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800ac04:	2b00      	cmp	r3, #0
 800ac06:	d10d      	bne.n	800ac24 <HAL_RCCEx_PeriphCLKConfig+0x5cc>
    {
      /* Set the source of SPI4/5 clock*/
      __HAL_RCC_SPI45_CONFIG(PeriphClkInit->Spi45ClockSelection);
 800ac08:	4b05      	ldr	r3, [pc, #20]	; (800ac20 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800ac0a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800ac0c:	f423 21e0 	bic.w	r1, r3, #458752	; 0x70000
 800ac10:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800ac14:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800ac16:	4a02      	ldr	r2, [pc, #8]	; (800ac20 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800ac18:	430b      	orrs	r3, r1
 800ac1a:	6513      	str	r3, [r2, #80]	; 0x50
 800ac1c:	e006      	b.n	800ac2c <HAL_RCCEx_PeriphCLKConfig+0x5d4>
 800ac1e:	bf00      	nop
 800ac20:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 800ac24:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800ac28:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*---------------------------- SPI6 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 800ac2c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800ac30:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ac34:	f402 4380 	and.w	r3, r2, #16384	; 0x4000
 800ac38:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 800ac3c:	2300      	movs	r3, #0
 800ac3e:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 800ac42:	e9d7 1238 	ldrd	r1, r2, [r7, #224]	; 0xe0
 800ac46:	460b      	mov	r3, r1
 800ac48:	4313      	orrs	r3, r2
 800ac4a:	d055      	beq.n	800acf8 <HAL_RCCEx_PeriphCLKConfig+0x6a0>
  {
    switch (PeriphClkInit->Spi6ClockSelection)
 800ac4c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800ac50:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 800ac54:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800ac58:	d033      	beq.n	800acc2 <HAL_RCCEx_PeriphCLKConfig+0x66a>
 800ac5a:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800ac5e:	d82c      	bhi.n	800acba <HAL_RCCEx_PeriphCLKConfig+0x662>
 800ac60:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800ac64:	d02f      	beq.n	800acc6 <HAL_RCCEx_PeriphCLKConfig+0x66e>
 800ac66:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800ac6a:	d826      	bhi.n	800acba <HAL_RCCEx_PeriphCLKConfig+0x662>
 800ac6c:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 800ac70:	d02b      	beq.n	800acca <HAL_RCCEx_PeriphCLKConfig+0x672>
 800ac72:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 800ac76:	d820      	bhi.n	800acba <HAL_RCCEx_PeriphCLKConfig+0x662>
 800ac78:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800ac7c:	d012      	beq.n	800aca4 <HAL_RCCEx_PeriphCLKConfig+0x64c>
 800ac7e:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800ac82:	d81a      	bhi.n	800acba <HAL_RCCEx_PeriphCLKConfig+0x662>
 800ac84:	2b00      	cmp	r3, #0
 800ac86:	d022      	beq.n	800acce <HAL_RCCEx_PeriphCLKConfig+0x676>
 800ac88:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800ac8c:	d115      	bne.n	800acba <HAL_RCCEx_PeriphCLKConfig+0x662>
        /* SPI6 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI6*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800ac8e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800ac92:	3308      	adds	r3, #8
 800ac94:	2101      	movs	r1, #1
 800ac96:	4618      	mov	r0, r3
 800ac98:	f002 f8ce 	bl	800ce38 <RCCEx_PLL2_Config>
 800ac9c:	4603      	mov	r3, r0
 800ac9e:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SPI6 clock source configuration done later after clock selection check */
        break;
 800aca2:	e015      	b.n	800acd0 <HAL_RCCEx_PeriphCLKConfig+0x678>
      case RCC_SPI6CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI6*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800aca4:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800aca8:	3328      	adds	r3, #40	; 0x28
 800acaa:	2101      	movs	r1, #1
 800acac:	4618      	mov	r0, r3
 800acae:	f002 f975 	bl	800cf9c <RCCEx_PLL3_Config>
 800acb2:	4603      	mov	r3, r0
 800acb4:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        /* SPI6 clock source configuration done later after clock selection check */
        break;
 800acb8:	e00a      	b.n	800acd0 <HAL_RCCEx_PeriphCLKConfig+0x678>
        /* SPI6 clock source configuration done later after clock selection check */
        break;
#endif

      default:
        ret = HAL_ERROR;
 800acba:	2301      	movs	r3, #1
 800acbc:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 800acc0:	e006      	b.n	800acd0 <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 800acc2:	bf00      	nop
 800acc4:	e004      	b.n	800acd0 <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 800acc6:	bf00      	nop
 800acc8:	e002      	b.n	800acd0 <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 800acca:	bf00      	nop
 800accc:	e000      	b.n	800acd0 <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 800acce:	bf00      	nop
    }

    if (ret == HAL_OK)
 800acd0:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800acd4:	2b00      	cmp	r3, #0
 800acd6:	d10b      	bne.n	800acf0 <HAL_RCCEx_PeriphCLKConfig+0x698>
    {
      /* Set the source of SPI6 clock*/
      __HAL_RCC_SPI6_CONFIG(PeriphClkInit->Spi6ClockSelection);
 800acd8:	4ba3      	ldr	r3, [pc, #652]	; (800af68 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800acda:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800acdc:	f023 41e0 	bic.w	r1, r3, #1879048192	; 0x70000000
 800ace0:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800ace4:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 800ace8:	4a9f      	ldr	r2, [pc, #636]	; (800af68 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800acea:	430b      	orrs	r3, r1
 800acec:	6593      	str	r3, [r2, #88]	; 0x58
 800acee:	e003      	b.n	800acf8 <HAL_RCCEx_PeriphCLKConfig+0x6a0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800acf0:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800acf4:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
  }
#endif /*DSI*/

#if defined(FDCAN1) || defined(FDCAN2)
  /*---------------------------- FDCAN configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 800acf8:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800acfc:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ad00:	f402 4300 	and.w	r3, r2, #32768	; 0x8000
 800ad04:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 800ad08:	2300      	movs	r3, #0
 800ad0a:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 800ad0e:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 800ad12:	460b      	mov	r3, r1
 800ad14:	4313      	orrs	r3, r2
 800ad16:	d037      	beq.n	800ad88 <HAL_RCCEx_PeriphCLKConfig+0x730>
  {
    switch (PeriphClkInit->FdcanClockSelection)
 800ad18:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800ad1c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800ad1e:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800ad22:	d00e      	beq.n	800ad42 <HAL_RCCEx_PeriphCLKConfig+0x6ea>
 800ad24:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800ad28:	d816      	bhi.n	800ad58 <HAL_RCCEx_PeriphCLKConfig+0x700>
 800ad2a:	2b00      	cmp	r3, #0
 800ad2c:	d018      	beq.n	800ad60 <HAL_RCCEx_PeriphCLKConfig+0x708>
 800ad2e:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800ad32:	d111      	bne.n	800ad58 <HAL_RCCEx_PeriphCLKConfig+0x700>
    {
      case RCC_FDCANCLKSOURCE_PLL:      /* PLL is used as clock source for FDCAN*/
        /* Enable FDCAN Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800ad34:	4b8c      	ldr	r3, [pc, #560]	; (800af68 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800ad36:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ad38:	4a8b      	ldr	r2, [pc, #556]	; (800af68 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800ad3a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800ad3e:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 800ad40:	e00f      	b.n	800ad62 <HAL_RCCEx_PeriphCLKConfig+0x70a>

      case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is used as clock source for FDCAN*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800ad42:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800ad46:	3308      	adds	r3, #8
 800ad48:	2101      	movs	r1, #1
 800ad4a:	4618      	mov	r0, r3
 800ad4c:	f002 f874 	bl	800ce38 <RCCEx_PLL2_Config>
 800ad50:	4603      	mov	r3, r0
 800ad52:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 800ad56:	e004      	b.n	800ad62 <HAL_RCCEx_PeriphCLKConfig+0x70a>
        /* HSE is used as clock source for FDCAN*/
        /* FDCAN clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800ad58:	2301      	movs	r3, #1
 800ad5a:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 800ad5e:	e000      	b.n	800ad62 <HAL_RCCEx_PeriphCLKConfig+0x70a>
        break;
 800ad60:	bf00      	nop
    }

    if (ret == HAL_OK)
 800ad62:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800ad66:	2b00      	cmp	r3, #0
 800ad68:	d10a      	bne.n	800ad80 <HAL_RCCEx_PeriphCLKConfig+0x728>
    {
      /* Set the source of FDCAN clock*/
      __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 800ad6a:	4b7f      	ldr	r3, [pc, #508]	; (800af68 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800ad6c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800ad6e:	f023 5140 	bic.w	r1, r3, #805306368	; 0x30000000
 800ad72:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800ad76:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800ad78:	4a7b      	ldr	r2, [pc, #492]	; (800af68 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800ad7a:	430b      	orrs	r3, r1
 800ad7c:	6513      	str	r3, [r2, #80]	; 0x50
 800ad7e:	e003      	b.n	800ad88 <HAL_RCCEx_PeriphCLKConfig+0x730>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800ad80:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800ad84:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }
#endif /*FDCAN1 || FDCAN2*/

  /*---------------------------- FMC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMC) == RCC_PERIPHCLK_FMC)
 800ad88:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800ad8c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ad90:	f002 7380 	and.w	r3, r2, #16777216	; 0x1000000
 800ad94:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 800ad98:	2300      	movs	r3, #0
 800ad9a:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
 800ad9e:	e9d7 1234 	ldrd	r1, r2, [r7, #208]	; 0xd0
 800ada2:	460b      	mov	r3, r1
 800ada4:	4313      	orrs	r3, r2
 800ada6:	d039      	beq.n	800ae1c <HAL_RCCEx_PeriphCLKConfig+0x7c4>
  {
    switch (PeriphClkInit->FmcClockSelection)
 800ada8:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800adac:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800adae:	2b03      	cmp	r3, #3
 800adb0:	d81c      	bhi.n	800adec <HAL_RCCEx_PeriphCLKConfig+0x794>
 800adb2:	a201      	add	r2, pc, #4	; (adr r2, 800adb8 <HAL_RCCEx_PeriphCLKConfig+0x760>)
 800adb4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800adb8:	0800adf5 	.word	0x0800adf5
 800adbc:	0800adc9 	.word	0x0800adc9
 800adc0:	0800add7 	.word	0x0800add7
 800adc4:	0800adf5 	.word	0x0800adf5
    {
      case RCC_FMCCLKSOURCE_PLL:      /* PLL is used as clock source for FMC*/
        /* Enable FMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800adc8:	4b67      	ldr	r3, [pc, #412]	; (800af68 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800adca:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800adcc:	4a66      	ldr	r2, [pc, #408]	; (800af68 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800adce:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800add2:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* FMC clock source configuration done later after clock selection check */
        break;
 800add4:	e00f      	b.n	800adf6 <HAL_RCCEx_PeriphCLKConfig+0x79e>

      case RCC_FMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for FMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 800add6:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800adda:	3308      	adds	r3, #8
 800addc:	2102      	movs	r1, #2
 800adde:	4618      	mov	r0, r3
 800ade0:	f002 f82a 	bl	800ce38 <RCCEx_PLL2_Config>
 800ade4:	4603      	mov	r3, r0
 800ade6:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* FMC clock source configuration done later after clock selection check */
        break;
 800adea:	e004      	b.n	800adf6 <HAL_RCCEx_PeriphCLKConfig+0x79e>
      case RCC_FMCCLKSOURCE_HCLK:
        /* D1/CD HCLK  clock selected as FMC kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 800adec:	2301      	movs	r3, #1
 800adee:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 800adf2:	e000      	b.n	800adf6 <HAL_RCCEx_PeriphCLKConfig+0x79e>
        break;
 800adf4:	bf00      	nop
    }

    if (ret == HAL_OK)
 800adf6:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800adfa:	2b00      	cmp	r3, #0
 800adfc:	d10a      	bne.n	800ae14 <HAL_RCCEx_PeriphCLKConfig+0x7bc>
    {
      /* Set the source of FMC clock*/
      __HAL_RCC_FMC_CONFIG(PeriphClkInit->FmcClockSelection);
 800adfe:	4b5a      	ldr	r3, [pc, #360]	; (800af68 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800ae00:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800ae02:	f023 0103 	bic.w	r1, r3, #3
 800ae06:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800ae0a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800ae0c:	4a56      	ldr	r2, [pc, #344]	; (800af68 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800ae0e:	430b      	orrs	r3, r1
 800ae10:	64d3      	str	r3, [r2, #76]	; 0x4c
 800ae12:	e003      	b.n	800ae1c <HAL_RCCEx_PeriphCLKConfig+0x7c4>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800ae14:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800ae18:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*---------------------------- RTC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 800ae1c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800ae20:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ae24:	f402 0380 	and.w	r3, r2, #4194304	; 0x400000
 800ae28:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 800ae2c:	2300      	movs	r3, #0
 800ae2e:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 800ae32:	e9d7 1232 	ldrd	r1, r2, [r7, #200]	; 0xc8
 800ae36:	460b      	mov	r3, r1
 800ae38:	4313      	orrs	r3, r2
 800ae3a:	f000 809f 	beq.w	800af7c <HAL_RCCEx_PeriphCLKConfig+0x924>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800ae3e:	4b4b      	ldr	r3, [pc, #300]	; (800af6c <HAL_RCCEx_PeriphCLKConfig+0x914>)
 800ae40:	681b      	ldr	r3, [r3, #0]
 800ae42:	4a4a      	ldr	r2, [pc, #296]	; (800af6c <HAL_RCCEx_PeriphCLKConfig+0x914>)
 800ae44:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800ae48:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 800ae4a:	f7f8 fd97 	bl	800397c <HAL_GetTick>
 800ae4e:	f8c7 0120 	str.w	r0, [r7, #288]	; 0x120

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800ae52:	e00b      	b.n	800ae6c <HAL_RCCEx_PeriphCLKConfig+0x814>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800ae54:	f7f8 fd92 	bl	800397c <HAL_GetTick>
 800ae58:	4602      	mov	r2, r0
 800ae5a:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 800ae5e:	1ad3      	subs	r3, r2, r3
 800ae60:	2b64      	cmp	r3, #100	; 0x64
 800ae62:	d903      	bls.n	800ae6c <HAL_RCCEx_PeriphCLKConfig+0x814>
      {
        ret = HAL_TIMEOUT;
 800ae64:	2303      	movs	r3, #3
 800ae66:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 800ae6a:	e005      	b.n	800ae78 <HAL_RCCEx_PeriphCLKConfig+0x820>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800ae6c:	4b3f      	ldr	r3, [pc, #252]	; (800af6c <HAL_RCCEx_PeriphCLKConfig+0x914>)
 800ae6e:	681b      	ldr	r3, [r3, #0]
 800ae70:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800ae74:	2b00      	cmp	r3, #0
 800ae76:	d0ed      	beq.n	800ae54 <HAL_RCCEx_PeriphCLKConfig+0x7fc>
      }
    }

    if (ret == HAL_OK)
 800ae78:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800ae7c:	2b00      	cmp	r3, #0
 800ae7e:	d179      	bne.n	800af74 <HAL_RCCEx_PeriphCLKConfig+0x91c>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if ((RCC->BDCR & RCC_BDCR_RTCSEL) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL))
 800ae80:	4b39      	ldr	r3, [pc, #228]	; (800af68 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800ae82:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 800ae84:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800ae88:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 800ae8c:	4053      	eors	r3, r2
 800ae8e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800ae92:	2b00      	cmp	r3, #0
 800ae94:	d015      	beq.n	800aec2 <HAL_RCCEx_PeriphCLKConfig+0x86a>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 800ae96:	4b34      	ldr	r3, [pc, #208]	; (800af68 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800ae98:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800ae9a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800ae9e:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 800aea2:	4b31      	ldr	r3, [pc, #196]	; (800af68 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800aea4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800aea6:	4a30      	ldr	r2, [pc, #192]	; (800af68 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800aea8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800aeac:	6713      	str	r3, [r2, #112]	; 0x70
        __HAL_RCC_BACKUPRESET_RELEASE();
 800aeae:	4b2e      	ldr	r3, [pc, #184]	; (800af68 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800aeb0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800aeb2:	4a2d      	ldr	r2, [pc, #180]	; (800af68 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800aeb4:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800aeb8:	6713      	str	r3, [r2, #112]	; 0x70
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpreg;
 800aeba:	4a2b      	ldr	r2, [pc, #172]	; (800af68 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800aebc:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 800aec0:	6713      	str	r3, [r2, #112]	; 0x70
      }

      /* If LSE is selected as RTC clock source (and enabled prior to Backup Domain reset), wait for LSE reactivation */
      if (PeriphClkInit->RTCClockSelection == RCC_RTCCLKSOURCE_LSE)
 800aec2:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800aec6:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 800aeca:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800aece:	d118      	bne.n	800af02 <HAL_RCCEx_PeriphCLKConfig+0x8aa>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800aed0:	f7f8 fd54 	bl	800397c <HAL_GetTick>
 800aed4:	f8c7 0120 	str.w	r0, [r7, #288]	; 0x120

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800aed8:	e00d      	b.n	800aef6 <HAL_RCCEx_PeriphCLKConfig+0x89e>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800aeda:	f7f8 fd4f 	bl	800397c <HAL_GetTick>
 800aede:	4602      	mov	r2, r0
 800aee0:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 800aee4:	1ad2      	subs	r2, r2, r3
 800aee6:	f241 3388 	movw	r3, #5000	; 0x1388
 800aeea:	429a      	cmp	r2, r3
 800aeec:	d903      	bls.n	800aef6 <HAL_RCCEx_PeriphCLKConfig+0x89e>
          {
            ret = HAL_TIMEOUT;
 800aeee:	2303      	movs	r3, #3
 800aef0:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
            break;
 800aef4:	e005      	b.n	800af02 <HAL_RCCEx_PeriphCLKConfig+0x8aa>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800aef6:	4b1c      	ldr	r3, [pc, #112]	; (800af68 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800aef8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800aefa:	f003 0302 	and.w	r3, r3, #2
 800aefe:	2b00      	cmp	r3, #0
 800af00:	d0eb      	beq.n	800aeda <HAL_RCCEx_PeriphCLKConfig+0x882>
          }
        }
      }

      if (ret == HAL_OK)
 800af02:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800af06:	2b00      	cmp	r3, #0
 800af08:	d129      	bne.n	800af5e <HAL_RCCEx_PeriphCLKConfig+0x906>
      {
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800af0a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800af0e:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 800af12:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800af16:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800af1a:	d10e      	bne.n	800af3a <HAL_RCCEx_PeriphCLKConfig+0x8e2>
 800af1c:	4b12      	ldr	r3, [pc, #72]	; (800af68 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800af1e:	691b      	ldr	r3, [r3, #16]
 800af20:	f423 517c 	bic.w	r1, r3, #16128	; 0x3f00
 800af24:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800af28:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 800af2c:	091a      	lsrs	r2, r3, #4
 800af2e:	4b10      	ldr	r3, [pc, #64]	; (800af70 <HAL_RCCEx_PeriphCLKConfig+0x918>)
 800af30:	4013      	ands	r3, r2
 800af32:	4a0d      	ldr	r2, [pc, #52]	; (800af68 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800af34:	430b      	orrs	r3, r1
 800af36:	6113      	str	r3, [r2, #16]
 800af38:	e005      	b.n	800af46 <HAL_RCCEx_PeriphCLKConfig+0x8ee>
 800af3a:	4b0b      	ldr	r3, [pc, #44]	; (800af68 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800af3c:	691b      	ldr	r3, [r3, #16]
 800af3e:	4a0a      	ldr	r2, [pc, #40]	; (800af68 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800af40:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 800af44:	6113      	str	r3, [r2, #16]
 800af46:	4b08      	ldr	r3, [pc, #32]	; (800af68 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800af48:	6f19      	ldr	r1, [r3, #112]	; 0x70
 800af4a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800af4e:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 800af52:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800af56:	4a04      	ldr	r2, [pc, #16]	; (800af68 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800af58:	430b      	orrs	r3, r1
 800af5a:	6713      	str	r3, [r2, #112]	; 0x70
 800af5c:	e00e      	b.n	800af7c <HAL_RCCEx_PeriphCLKConfig+0x924>
      }
      else
      {
        /* set overall return value */
        status = ret;
 800af5e:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800af62:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
 800af66:	e009      	b.n	800af7c <HAL_RCCEx_PeriphCLKConfig+0x924>
 800af68:	58024400 	.word	0x58024400
 800af6c:	58024800 	.word	0x58024800
 800af70:	00ffffcf 	.word	0x00ffffcf
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 800af74:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800af78:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }


  /*-------------------------- USART1/6 configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
 800af7c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800af80:	e9d3 2300 	ldrd	r2, r3, [r3]
 800af84:	f002 0301 	and.w	r3, r2, #1
 800af88:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 800af8c:	2300      	movs	r3, #0
 800af8e:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 800af92:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 800af96:	460b      	mov	r3, r1
 800af98:	4313      	orrs	r3, r2
 800af9a:	f000 8089 	beq.w	800b0b0 <HAL_RCCEx_PeriphCLKConfig+0xa58>
  {
    switch (PeriphClkInit->Usart16ClockSelection)
 800af9e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800afa2:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800afa4:	2b28      	cmp	r3, #40	; 0x28
 800afa6:	d86b      	bhi.n	800b080 <HAL_RCCEx_PeriphCLKConfig+0xa28>
 800afa8:	a201      	add	r2, pc, #4	; (adr r2, 800afb0 <HAL_RCCEx_PeriphCLKConfig+0x958>)
 800afaa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800afae:	bf00      	nop
 800afb0:	0800b089 	.word	0x0800b089
 800afb4:	0800b081 	.word	0x0800b081
 800afb8:	0800b081 	.word	0x0800b081
 800afbc:	0800b081 	.word	0x0800b081
 800afc0:	0800b081 	.word	0x0800b081
 800afc4:	0800b081 	.word	0x0800b081
 800afc8:	0800b081 	.word	0x0800b081
 800afcc:	0800b081 	.word	0x0800b081
 800afd0:	0800b055 	.word	0x0800b055
 800afd4:	0800b081 	.word	0x0800b081
 800afd8:	0800b081 	.word	0x0800b081
 800afdc:	0800b081 	.word	0x0800b081
 800afe0:	0800b081 	.word	0x0800b081
 800afe4:	0800b081 	.word	0x0800b081
 800afe8:	0800b081 	.word	0x0800b081
 800afec:	0800b081 	.word	0x0800b081
 800aff0:	0800b06b 	.word	0x0800b06b
 800aff4:	0800b081 	.word	0x0800b081
 800aff8:	0800b081 	.word	0x0800b081
 800affc:	0800b081 	.word	0x0800b081
 800b000:	0800b081 	.word	0x0800b081
 800b004:	0800b081 	.word	0x0800b081
 800b008:	0800b081 	.word	0x0800b081
 800b00c:	0800b081 	.word	0x0800b081
 800b010:	0800b089 	.word	0x0800b089
 800b014:	0800b081 	.word	0x0800b081
 800b018:	0800b081 	.word	0x0800b081
 800b01c:	0800b081 	.word	0x0800b081
 800b020:	0800b081 	.word	0x0800b081
 800b024:	0800b081 	.word	0x0800b081
 800b028:	0800b081 	.word	0x0800b081
 800b02c:	0800b081 	.word	0x0800b081
 800b030:	0800b089 	.word	0x0800b089
 800b034:	0800b081 	.word	0x0800b081
 800b038:	0800b081 	.word	0x0800b081
 800b03c:	0800b081 	.word	0x0800b081
 800b040:	0800b081 	.word	0x0800b081
 800b044:	0800b081 	.word	0x0800b081
 800b048:	0800b081 	.word	0x0800b081
 800b04c:	0800b081 	.word	0x0800b081
 800b050:	0800b089 	.word	0x0800b089
      case RCC_USART16CLKSOURCE_PCLK2: /* CD/D2 PCLK2 as clock source for USART1/6 */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      case RCC_USART16CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART1/6 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800b054:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800b058:	3308      	adds	r3, #8
 800b05a:	2101      	movs	r1, #1
 800b05c:	4618      	mov	r0, r3
 800b05e:	f001 feeb 	bl	800ce38 <RCCEx_PLL2_Config>
 800b062:	4603      	mov	r3, r0
 800b064:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 800b068:	e00f      	b.n	800b08a <HAL_RCCEx_PeriphCLKConfig+0xa32>

      case RCC_USART16CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART1/6 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800b06a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800b06e:	3328      	adds	r3, #40	; 0x28
 800b070:	2101      	movs	r1, #1
 800b072:	4618      	mov	r0, r3
 800b074:	f001 ff92 	bl	800cf9c <RCCEx_PLL3_Config>
 800b078:	4603      	mov	r3, r0
 800b07a:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 800b07e:	e004      	b.n	800b08a <HAL_RCCEx_PeriphCLKConfig+0xa32>
        /* LSE,  oscillator is used as source of USART1/6 clock */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800b080:	2301      	movs	r3, #1
 800b082:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 800b086:	e000      	b.n	800b08a <HAL_RCCEx_PeriphCLKConfig+0xa32>
        break;
 800b088:	bf00      	nop
    }

    if (ret == HAL_OK)
 800b08a:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800b08e:	2b00      	cmp	r3, #0
 800b090:	d10a      	bne.n	800b0a8 <HAL_RCCEx_PeriphCLKConfig+0xa50>
    {
      /* Set the source of USART1/6 clock */
      __HAL_RCC_USART16_CONFIG(PeriphClkInit->Usart16ClockSelection);
 800b092:	4bbf      	ldr	r3, [pc, #764]	; (800b390 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 800b094:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800b096:	f023 0138 	bic.w	r1, r3, #56	; 0x38
 800b09a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800b09e:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800b0a0:	4abb      	ldr	r2, [pc, #748]	; (800b390 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 800b0a2:	430b      	orrs	r3, r1
 800b0a4:	6553      	str	r3, [r2, #84]	; 0x54
 800b0a6:	e003      	b.n	800b0b0 <HAL_RCCEx_PeriphCLKConfig+0xa58>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800b0a8:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800b0ac:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*-------------------------- USART2/3/4/5/7/8 Configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
 800b0b0:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800b0b4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b0b8:	f002 0302 	and.w	r3, r2, #2
 800b0bc:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 800b0c0:	2300      	movs	r3, #0
 800b0c2:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
 800b0c6:	e9d7 122e 	ldrd	r1, r2, [r7, #184]	; 0xb8
 800b0ca:	460b      	mov	r3, r1
 800b0cc:	4313      	orrs	r3, r2
 800b0ce:	d041      	beq.n	800b154 <HAL_RCCEx_PeriphCLKConfig+0xafc>
  {
    switch (PeriphClkInit->Usart234578ClockSelection)
 800b0d0:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800b0d4:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800b0d6:	2b05      	cmp	r3, #5
 800b0d8:	d824      	bhi.n	800b124 <HAL_RCCEx_PeriphCLKConfig+0xacc>
 800b0da:	a201      	add	r2, pc, #4	; (adr r2, 800b0e0 <HAL_RCCEx_PeriphCLKConfig+0xa88>)
 800b0dc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b0e0:	0800b12d 	.word	0x0800b12d
 800b0e4:	0800b0f9 	.word	0x0800b0f9
 800b0e8:	0800b10f 	.word	0x0800b10f
 800b0ec:	0800b12d 	.word	0x0800b12d
 800b0f0:	0800b12d 	.word	0x0800b12d
 800b0f4:	0800b12d 	.word	0x0800b12d
      case RCC_USART234578CLKSOURCE_PCLK1: /* CD/D2 PCLK1 as clock source for USART2/3/4/5/7/8 */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      case RCC_USART234578CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800b0f8:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800b0fc:	3308      	adds	r3, #8
 800b0fe:	2101      	movs	r1, #1
 800b100:	4618      	mov	r0, r3
 800b102:	f001 fe99 	bl	800ce38 <RCCEx_PLL2_Config>
 800b106:	4603      	mov	r3, r0
 800b108:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 800b10c:	e00f      	b.n	800b12e <HAL_RCCEx_PeriphCLKConfig+0xad6>

      case RCC_USART234578CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800b10e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800b112:	3328      	adds	r3, #40	; 0x28
 800b114:	2101      	movs	r1, #1
 800b116:	4618      	mov	r0, r3
 800b118:	f001 ff40 	bl	800cf9c <RCCEx_PLL3_Config>
 800b11c:	4603      	mov	r3, r0
 800b11e:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 800b122:	e004      	b.n	800b12e <HAL_RCCEx_PeriphCLKConfig+0xad6>
        /* LSE,  oscillator is used as source of USART2/3/4/5/7/8 clock */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800b124:	2301      	movs	r3, #1
 800b126:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 800b12a:	e000      	b.n	800b12e <HAL_RCCEx_PeriphCLKConfig+0xad6>
        break;
 800b12c:	bf00      	nop
    }

    if (ret == HAL_OK)
 800b12e:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800b132:	2b00      	cmp	r3, #0
 800b134:	d10a      	bne.n	800b14c <HAL_RCCEx_PeriphCLKConfig+0xaf4>
    {
      /* Set the source of USART2/3/4/5/7/8 clock */
      __HAL_RCC_USART234578_CONFIG(PeriphClkInit->Usart234578ClockSelection);
 800b136:	4b96      	ldr	r3, [pc, #600]	; (800b390 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 800b138:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800b13a:	f023 0107 	bic.w	r1, r3, #7
 800b13e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800b142:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800b144:	4a92      	ldr	r2, [pc, #584]	; (800b390 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 800b146:	430b      	orrs	r3, r1
 800b148:	6553      	str	r3, [r2, #84]	; 0x54
 800b14a:	e003      	b.n	800b154 <HAL_RCCEx_PeriphCLKConfig+0xafc>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800b14c:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800b150:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*-------------------------- LPUART1 Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 800b154:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800b158:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b15c:	f002 0304 	and.w	r3, r2, #4
 800b160:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 800b164:	2300      	movs	r3, #0
 800b166:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 800b16a:	e9d7 122c 	ldrd	r1, r2, [r7, #176]	; 0xb0
 800b16e:	460b      	mov	r3, r1
 800b170:	4313      	orrs	r3, r2
 800b172:	d044      	beq.n	800b1fe <HAL_RCCEx_PeriphCLKConfig+0xba6>
  {
    switch (PeriphClkInit->Lpuart1ClockSelection)
 800b174:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800b178:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800b17c:	2b05      	cmp	r3, #5
 800b17e:	d825      	bhi.n	800b1cc <HAL_RCCEx_PeriphCLKConfig+0xb74>
 800b180:	a201      	add	r2, pc, #4	; (adr r2, 800b188 <HAL_RCCEx_PeriphCLKConfig+0xb30>)
 800b182:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b186:	bf00      	nop
 800b188:	0800b1d5 	.word	0x0800b1d5
 800b18c:	0800b1a1 	.word	0x0800b1a1
 800b190:	0800b1b7 	.word	0x0800b1b7
 800b194:	0800b1d5 	.word	0x0800b1d5
 800b198:	0800b1d5 	.word	0x0800b1d5
 800b19c:	0800b1d5 	.word	0x0800b1d5
      case RCC_LPUART1CLKSOURCE_PCLK4: /* SRD/D3 PCLK1 (PCLK4) as clock source for LPUART1 */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPUART1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPUART1 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800b1a0:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800b1a4:	3308      	adds	r3, #8
 800b1a6:	2101      	movs	r1, #1
 800b1a8:	4618      	mov	r0, r3
 800b1aa:	f001 fe45 	bl	800ce38 <RCCEx_PLL2_Config>
 800b1ae:	4603      	mov	r3, r0
 800b1b0:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 800b1b4:	e00f      	b.n	800b1d6 <HAL_RCCEx_PeriphCLKConfig+0xb7e>

      case RCC_LPUART1CLKSOURCE_PLL3: /* PLL3 is used as clock source for LPUART1 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800b1b6:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800b1ba:	3328      	adds	r3, #40	; 0x28
 800b1bc:	2101      	movs	r1, #1
 800b1be:	4618      	mov	r0, r3
 800b1c0:	f001 feec 	bl	800cf9c <RCCEx_PLL3_Config>
 800b1c4:	4603      	mov	r3, r0
 800b1c6:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 800b1ca:	e004      	b.n	800b1d6 <HAL_RCCEx_PeriphCLKConfig+0xb7e>
        /* LSE,  oscillator is used as source of LPUART1 clock */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800b1cc:	2301      	movs	r3, #1
 800b1ce:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 800b1d2:	e000      	b.n	800b1d6 <HAL_RCCEx_PeriphCLKConfig+0xb7e>
        break;
 800b1d4:	bf00      	nop
    }

    if (ret == HAL_OK)
 800b1d6:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800b1da:	2b00      	cmp	r3, #0
 800b1dc:	d10b      	bne.n	800b1f6 <HAL_RCCEx_PeriphCLKConfig+0xb9e>
    {
      /* Set the source of LPUART1 clock */
      __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 800b1de:	4b6c      	ldr	r3, [pc, #432]	; (800b390 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 800b1e0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800b1e2:	f023 0107 	bic.w	r1, r3, #7
 800b1e6:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800b1ea:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800b1ee:	4a68      	ldr	r2, [pc, #416]	; (800b390 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 800b1f0:	430b      	orrs	r3, r1
 800b1f2:	6593      	str	r3, [r2, #88]	; 0x58
 800b1f4:	e003      	b.n	800b1fe <HAL_RCCEx_PeriphCLKConfig+0xba6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800b1f6:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800b1fa:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*---------------------------- LPTIM1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 800b1fe:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800b202:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b206:	f002 0320 	and.w	r3, r2, #32
 800b20a:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 800b20e:	2300      	movs	r3, #0
 800b210:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 800b214:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 800b218:	460b      	mov	r3, r1
 800b21a:	4313      	orrs	r3, r2
 800b21c:	d055      	beq.n	800b2ca <HAL_RCCEx_PeriphCLKConfig+0xc72>
  {
    switch (PeriphClkInit->Lptim1ClockSelection)
 800b21e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800b222:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800b226:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800b22a:	d033      	beq.n	800b294 <HAL_RCCEx_PeriphCLKConfig+0xc3c>
 800b22c:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800b230:	d82c      	bhi.n	800b28c <HAL_RCCEx_PeriphCLKConfig+0xc34>
 800b232:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800b236:	d02f      	beq.n	800b298 <HAL_RCCEx_PeriphCLKConfig+0xc40>
 800b238:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800b23c:	d826      	bhi.n	800b28c <HAL_RCCEx_PeriphCLKConfig+0xc34>
 800b23e:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 800b242:	d02b      	beq.n	800b29c <HAL_RCCEx_PeriphCLKConfig+0xc44>
 800b244:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 800b248:	d820      	bhi.n	800b28c <HAL_RCCEx_PeriphCLKConfig+0xc34>
 800b24a:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800b24e:	d012      	beq.n	800b276 <HAL_RCCEx_PeriphCLKConfig+0xc1e>
 800b250:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800b254:	d81a      	bhi.n	800b28c <HAL_RCCEx_PeriphCLKConfig+0xc34>
 800b256:	2b00      	cmp	r3, #0
 800b258:	d022      	beq.n	800b2a0 <HAL_RCCEx_PeriphCLKConfig+0xc48>
 800b25a:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800b25e:	d115      	bne.n	800b28c <HAL_RCCEx_PeriphCLKConfig+0xc34>
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800b260:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800b264:	3308      	adds	r3, #8
 800b266:	2100      	movs	r1, #0
 800b268:	4618      	mov	r0, r3
 800b26a:	f001 fde5 	bl	800ce38 <RCCEx_PLL2_Config>
 800b26e:	4603      	mov	r3, r0
 800b270:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 800b274:	e015      	b.n	800b2a2 <HAL_RCCEx_PeriphCLKConfig+0xc4a>

      case RCC_LPTIM1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800b276:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800b27a:	3328      	adds	r3, #40	; 0x28
 800b27c:	2102      	movs	r1, #2
 800b27e:	4618      	mov	r0, r3
 800b280:	f001 fe8c 	bl	800cf9c <RCCEx_PLL3_Config>
 800b284:	4603      	mov	r3, r0
 800b286:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 800b28a:	e00a      	b.n	800b2a2 <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM1 clock */
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800b28c:	2301      	movs	r3, #1
 800b28e:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 800b292:	e006      	b.n	800b2a2 <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 800b294:	bf00      	nop
 800b296:	e004      	b.n	800b2a2 <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 800b298:	bf00      	nop
 800b29a:	e002      	b.n	800b2a2 <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 800b29c:	bf00      	nop
 800b29e:	e000      	b.n	800b2a2 <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 800b2a0:	bf00      	nop
    }

    if (ret == HAL_OK)
 800b2a2:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800b2a6:	2b00      	cmp	r3, #0
 800b2a8:	d10b      	bne.n	800b2c2 <HAL_RCCEx_PeriphCLKConfig+0xc6a>
    {
      /* Set the source of LPTIM1 clock*/
      __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 800b2aa:	4b39      	ldr	r3, [pc, #228]	; (800b390 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 800b2ac:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800b2ae:	f023 41e0 	bic.w	r1, r3, #1879048192	; 0x70000000
 800b2b2:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800b2b6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800b2ba:	4a35      	ldr	r2, [pc, #212]	; (800b390 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 800b2bc:	430b      	orrs	r3, r1
 800b2be:	6553      	str	r3, [r2, #84]	; 0x54
 800b2c0:	e003      	b.n	800b2ca <HAL_RCCEx_PeriphCLKConfig+0xc72>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800b2c2:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800b2c6:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*---------------------------- LPTIM2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 800b2ca:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800b2ce:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b2d2:	f002 0340 	and.w	r3, r2, #64	; 0x40
 800b2d6:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 800b2da:	2300      	movs	r3, #0
 800b2dc:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 800b2e0:	e9d7 1228 	ldrd	r1, r2, [r7, #160]	; 0xa0
 800b2e4:	460b      	mov	r3, r1
 800b2e6:	4313      	orrs	r3, r2
 800b2e8:	d058      	beq.n	800b39c <HAL_RCCEx_PeriphCLKConfig+0xd44>
  {
    switch (PeriphClkInit->Lptim2ClockSelection)
 800b2ea:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800b2ee:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800b2f2:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 800b2f6:	d033      	beq.n	800b360 <HAL_RCCEx_PeriphCLKConfig+0xd08>
 800b2f8:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 800b2fc:	d82c      	bhi.n	800b358 <HAL_RCCEx_PeriphCLKConfig+0xd00>
 800b2fe:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800b302:	d02f      	beq.n	800b364 <HAL_RCCEx_PeriphCLKConfig+0xd0c>
 800b304:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800b308:	d826      	bhi.n	800b358 <HAL_RCCEx_PeriphCLKConfig+0xd00>
 800b30a:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800b30e:	d02b      	beq.n	800b368 <HAL_RCCEx_PeriphCLKConfig+0xd10>
 800b310:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800b314:	d820      	bhi.n	800b358 <HAL_RCCEx_PeriphCLKConfig+0xd00>
 800b316:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800b31a:	d012      	beq.n	800b342 <HAL_RCCEx_PeriphCLKConfig+0xcea>
 800b31c:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800b320:	d81a      	bhi.n	800b358 <HAL_RCCEx_PeriphCLKConfig+0xd00>
 800b322:	2b00      	cmp	r3, #0
 800b324:	d022      	beq.n	800b36c <HAL_RCCEx_PeriphCLKConfig+0xd14>
 800b326:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800b32a:	d115      	bne.n	800b358 <HAL_RCCEx_PeriphCLKConfig+0xd00>
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM2CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800b32c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800b330:	3308      	adds	r3, #8
 800b332:	2100      	movs	r1, #0
 800b334:	4618      	mov	r0, r3
 800b336:	f001 fd7f 	bl	800ce38 <RCCEx_PLL2_Config>
 800b33a:	4603      	mov	r3, r0
 800b33c:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 800b340:	e015      	b.n	800b36e <HAL_RCCEx_PeriphCLKConfig+0xd16>

      case RCC_LPTIM2CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800b342:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800b346:	3328      	adds	r3, #40	; 0x28
 800b348:	2102      	movs	r1, #2
 800b34a:	4618      	mov	r0, r3
 800b34c:	f001 fe26 	bl	800cf9c <RCCEx_PLL3_Config>
 800b350:	4603      	mov	r3, r0
 800b352:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 800b356:	e00a      	b.n	800b36e <HAL_RCCEx_PeriphCLKConfig+0xd16>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM2 clock */
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800b358:	2301      	movs	r3, #1
 800b35a:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 800b35e:	e006      	b.n	800b36e <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 800b360:	bf00      	nop
 800b362:	e004      	b.n	800b36e <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 800b364:	bf00      	nop
 800b366:	e002      	b.n	800b36e <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 800b368:	bf00      	nop
 800b36a:	e000      	b.n	800b36e <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 800b36c:	bf00      	nop
    }

    if (ret == HAL_OK)
 800b36e:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800b372:	2b00      	cmp	r3, #0
 800b374:	d10e      	bne.n	800b394 <HAL_RCCEx_PeriphCLKConfig+0xd3c>
    {
      /* Set the source of LPTIM2 clock*/
      __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 800b376:	4b06      	ldr	r3, [pc, #24]	; (800b390 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 800b378:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800b37a:	f423 51e0 	bic.w	r1, r3, #7168	; 0x1c00
 800b37e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800b382:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800b386:	4a02      	ldr	r2, [pc, #8]	; (800b390 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 800b388:	430b      	orrs	r3, r1
 800b38a:	6593      	str	r3, [r2, #88]	; 0x58
 800b38c:	e006      	b.n	800b39c <HAL_RCCEx_PeriphCLKConfig+0xd44>
 800b38e:	bf00      	nop
 800b390:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 800b394:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800b398:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*---------------------------- LPTIM345 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM345) == RCC_PERIPHCLK_LPTIM345)
 800b39c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800b3a0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b3a4:	f002 0380 	and.w	r3, r2, #128	; 0x80
 800b3a8:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 800b3ac:	2300      	movs	r3, #0
 800b3ae:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 800b3b2:	e9d7 1226 	ldrd	r1, r2, [r7, #152]	; 0x98
 800b3b6:	460b      	mov	r3, r1
 800b3b8:	4313      	orrs	r3, r2
 800b3ba:	d055      	beq.n	800b468 <HAL_RCCEx_PeriphCLKConfig+0xe10>
  {
    switch (PeriphClkInit->Lptim345ClockSelection)
 800b3bc:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800b3c0:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 800b3c4:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 800b3c8:	d033      	beq.n	800b432 <HAL_RCCEx_PeriphCLKConfig+0xdda>
 800b3ca:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 800b3ce:	d82c      	bhi.n	800b42a <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 800b3d0:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800b3d4:	d02f      	beq.n	800b436 <HAL_RCCEx_PeriphCLKConfig+0xdde>
 800b3d6:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800b3da:	d826      	bhi.n	800b42a <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 800b3dc:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 800b3e0:	d02b      	beq.n	800b43a <HAL_RCCEx_PeriphCLKConfig+0xde2>
 800b3e2:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 800b3e6:	d820      	bhi.n	800b42a <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 800b3e8:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800b3ec:	d012      	beq.n	800b414 <HAL_RCCEx_PeriphCLKConfig+0xdbc>
 800b3ee:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800b3f2:	d81a      	bhi.n	800b42a <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 800b3f4:	2b00      	cmp	r3, #0
 800b3f6:	d022      	beq.n	800b43e <HAL_RCCEx_PeriphCLKConfig+0xde6>
 800b3f8:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800b3fc:	d115      	bne.n	800b42a <HAL_RCCEx_PeriphCLKConfig+0xdd2>
      case RCC_LPTIM345CLKSOURCE_PCLK4:      /* SRD/D3 PCLK1 (PCLK4) as clock source for LPTIM3/4/5 */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM345CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800b3fe:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800b402:	3308      	adds	r3, #8
 800b404:	2100      	movs	r1, #0
 800b406:	4618      	mov	r0, r3
 800b408:	f001 fd16 	bl	800ce38 <RCCEx_PLL2_Config>
 800b40c:	4603      	mov	r3, r0
 800b40e:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 800b412:	e015      	b.n	800b440 <HAL_RCCEx_PeriphCLKConfig+0xde8>

      case RCC_LPTIM345CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800b414:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800b418:	3328      	adds	r3, #40	; 0x28
 800b41a:	2102      	movs	r1, #2
 800b41c:	4618      	mov	r0, r3
 800b41e:	f001 fdbd 	bl	800cf9c <RCCEx_PLL3_Config>
 800b422:	4603      	mov	r3, r0
 800b424:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 800b428:	e00a      	b.n	800b440 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM3/4/5 clock */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800b42a:	2301      	movs	r3, #1
 800b42c:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 800b430:	e006      	b.n	800b440 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 800b432:	bf00      	nop
 800b434:	e004      	b.n	800b440 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 800b436:	bf00      	nop
 800b438:	e002      	b.n	800b440 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 800b43a:	bf00      	nop
 800b43c:	e000      	b.n	800b440 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 800b43e:	bf00      	nop
    }

    if (ret == HAL_OK)
 800b440:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800b444:	2b00      	cmp	r3, #0
 800b446:	d10b      	bne.n	800b460 <HAL_RCCEx_PeriphCLKConfig+0xe08>
    {
      /* Set the source of LPTIM3/4/5 clock */
      __HAL_RCC_LPTIM345_CONFIG(PeriphClkInit->Lptim345ClockSelection);
 800b448:	4ba1      	ldr	r3, [pc, #644]	; (800b6d0 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800b44a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800b44c:	f423 4160 	bic.w	r1, r3, #57344	; 0xe000
 800b450:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800b454:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 800b458:	4a9d      	ldr	r2, [pc, #628]	; (800b6d0 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800b45a:	430b      	orrs	r3, r1
 800b45c:	6593      	str	r3, [r2, #88]	; 0x58
 800b45e:	e003      	b.n	800b468 <HAL_RCCEx_PeriphCLKConfig+0xe10>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800b460:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800b464:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126

    __HAL_RCC_I2C1235_CONFIG(PeriphClkInit->I2c1235ClockSelection);

  }
#else
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C123) == RCC_PERIPHCLK_I2C123)
 800b468:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800b46c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b470:	f002 0308 	and.w	r3, r2, #8
 800b474:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 800b478:	2300      	movs	r3, #0
 800b47a:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 800b47e:	e9d7 1224 	ldrd	r1, r2, [r7, #144]	; 0x90
 800b482:	460b      	mov	r3, r1
 800b484:	4313      	orrs	r3, r2
 800b486:	d01e      	beq.n	800b4c6 <HAL_RCCEx_PeriphCLKConfig+0xe6e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C123CLKSOURCE(PeriphClkInit->I2c123ClockSelection));

    if ((PeriphClkInit->I2c123ClockSelection) == RCC_I2C123CLKSOURCE_PLL3)
 800b488:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800b48c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800b490:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800b494:	d10c      	bne.n	800b4b0 <HAL_RCCEx_PeriphCLKConfig+0xe58>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 800b496:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800b49a:	3328      	adds	r3, #40	; 0x28
 800b49c:	2102      	movs	r1, #2
 800b49e:	4618      	mov	r0, r3
 800b4a0:	f001 fd7c 	bl	800cf9c <RCCEx_PLL3_Config>
 800b4a4:	4603      	mov	r3, r0
 800b4a6:	2b00      	cmp	r3, #0
 800b4a8:	d002      	beq.n	800b4b0 <HAL_RCCEx_PeriphCLKConfig+0xe58>
      {
        status = HAL_ERROR;
 800b4aa:	2301      	movs	r3, #1
 800b4ac:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
      }
    }

    __HAL_RCC_I2C123_CONFIG(PeriphClkInit->I2c123ClockSelection);
 800b4b0:	4b87      	ldr	r3, [pc, #540]	; (800b6d0 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800b4b2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800b4b4:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800b4b8:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800b4bc:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800b4c0:	4a83      	ldr	r2, [pc, #524]	; (800b6d0 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800b4c2:	430b      	orrs	r3, r1
 800b4c4:	6553      	str	r3, [r2, #84]	; 0x54

  }
#endif /* I2C5 */

  /*------------------------------ I2C4 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 800b4c6:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800b4ca:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b4ce:	f002 0310 	and.w	r3, r2, #16
 800b4d2:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 800b4d6:	2300      	movs	r3, #0
 800b4d8:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 800b4dc:	e9d7 1222 	ldrd	r1, r2, [r7, #136]	; 0x88
 800b4e0:	460b      	mov	r3, r1
 800b4e2:	4313      	orrs	r3, r2
 800b4e4:	d01e      	beq.n	800b524 <HAL_RCCEx_PeriphCLKConfig+0xecc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    if ((PeriphClkInit->I2c4ClockSelection) == RCC_I2C4CLKSOURCE_PLL3)
 800b4e6:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800b4ea:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800b4ee:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800b4f2:	d10c      	bne.n	800b50e <HAL_RCCEx_PeriphCLKConfig+0xeb6>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 800b4f4:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800b4f8:	3328      	adds	r3, #40	; 0x28
 800b4fa:	2102      	movs	r1, #2
 800b4fc:	4618      	mov	r0, r3
 800b4fe:	f001 fd4d 	bl	800cf9c <RCCEx_PLL3_Config>
 800b502:	4603      	mov	r3, r0
 800b504:	2b00      	cmp	r3, #0
 800b506:	d002      	beq.n	800b50e <HAL_RCCEx_PeriphCLKConfig+0xeb6>
      {
        status = HAL_ERROR;
 800b508:	2301      	movs	r3, #1
 800b50a:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
      }
    }

    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 800b50e:	4b70      	ldr	r3, [pc, #448]	; (800b6d0 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800b510:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800b512:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 800b516:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800b51a:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800b51e:	4a6c      	ldr	r2, [pc, #432]	; (800b6d0 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800b520:	430b      	orrs	r3, r1
 800b522:	6593      	str	r3, [r2, #88]	; 0x58

  }

  /*---------------------------- ADC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 800b524:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800b528:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b52c:	f402 2300 	and.w	r3, r2, #524288	; 0x80000
 800b530:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 800b534:	2300      	movs	r3, #0
 800b536:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 800b53a:	e9d7 1220 	ldrd	r1, r2, [r7, #128]	; 0x80
 800b53e:	460b      	mov	r3, r1
 800b540:	4313      	orrs	r3, r2
 800b542:	d03e      	beq.n	800b5c2 <HAL_RCCEx_PeriphCLKConfig+0xf6a>
  {
    switch (PeriphClkInit->AdcClockSelection)
 800b544:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800b548:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 800b54c:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800b550:	d022      	beq.n	800b598 <HAL_RCCEx_PeriphCLKConfig+0xf40>
 800b552:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800b556:	d81b      	bhi.n	800b590 <HAL_RCCEx_PeriphCLKConfig+0xf38>
 800b558:	2b00      	cmp	r3, #0
 800b55a:	d003      	beq.n	800b564 <HAL_RCCEx_PeriphCLKConfig+0xf0c>
 800b55c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800b560:	d00b      	beq.n	800b57a <HAL_RCCEx_PeriphCLKConfig+0xf22>
 800b562:	e015      	b.n	800b590 <HAL_RCCEx_PeriphCLKConfig+0xf38>
    {

      case RCC_ADCCLKSOURCE_PLL2: /* PLL2 is used as clock source for ADC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800b564:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800b568:	3308      	adds	r3, #8
 800b56a:	2100      	movs	r1, #0
 800b56c:	4618      	mov	r0, r3
 800b56e:	f001 fc63 	bl	800ce38 <RCCEx_PLL2_Config>
 800b572:	4603      	mov	r3, r0
 800b574:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* ADC clock source configuration done later after clock selection check */
        break;
 800b578:	e00f      	b.n	800b59a <HAL_RCCEx_PeriphCLKConfig+0xf42>

      case RCC_ADCCLKSOURCE_PLL3:  /* PLL3 is used as clock source for ADC*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800b57a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800b57e:	3328      	adds	r3, #40	; 0x28
 800b580:	2102      	movs	r1, #2
 800b582:	4618      	mov	r0, r3
 800b584:	f001 fd0a 	bl	800cf9c <RCCEx_PLL3_Config>
 800b588:	4603      	mov	r3, r0
 800b58a:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* ADC clock source configuration done later after clock selection check */
        break;
 800b58e:	e004      	b.n	800b59a <HAL_RCCEx_PeriphCLKConfig+0xf42>
        /* HSI, HSE, or CSI oscillator is used as source of ADC clock */
        /* ADC clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800b590:	2301      	movs	r3, #1
 800b592:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 800b596:	e000      	b.n	800b59a <HAL_RCCEx_PeriphCLKConfig+0xf42>
        break;
 800b598:	bf00      	nop
    }

    if (ret == HAL_OK)
 800b59a:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800b59e:	2b00      	cmp	r3, #0
 800b5a0:	d10b      	bne.n	800b5ba <HAL_RCCEx_PeriphCLKConfig+0xf62>
    {
      /* Set the source of ADC clock*/
      __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 800b5a2:	4b4b      	ldr	r3, [pc, #300]	; (800b6d0 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800b5a4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800b5a6:	f423 3140 	bic.w	r1, r3, #196608	; 0x30000
 800b5aa:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800b5ae:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 800b5b2:	4a47      	ldr	r2, [pc, #284]	; (800b6d0 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800b5b4:	430b      	orrs	r3, r1
 800b5b6:	6593      	str	r3, [r2, #88]	; 0x58
 800b5b8:	e003      	b.n	800b5c2 <HAL_RCCEx_PeriphCLKConfig+0xf6a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800b5ba:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800b5be:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*------------------------------ USB Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 800b5c2:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800b5c6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b5ca:	f402 2380 	and.w	r3, r2, #262144	; 0x40000
 800b5ce:	67bb      	str	r3, [r7, #120]	; 0x78
 800b5d0:	2300      	movs	r3, #0
 800b5d2:	67fb      	str	r3, [r7, #124]	; 0x7c
 800b5d4:	e9d7 121e 	ldrd	r1, r2, [r7, #120]	; 0x78
 800b5d8:	460b      	mov	r3, r1
 800b5da:	4313      	orrs	r3, r2
 800b5dc:	d03b      	beq.n	800b656 <HAL_RCCEx_PeriphCLKConfig+0xffe>
  {

    switch (PeriphClkInit->UsbClockSelection)
 800b5de:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800b5e2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800b5e6:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 800b5ea:	d01f      	beq.n	800b62c <HAL_RCCEx_PeriphCLKConfig+0xfd4>
 800b5ec:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 800b5f0:	d818      	bhi.n	800b624 <HAL_RCCEx_PeriphCLKConfig+0xfcc>
 800b5f2:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800b5f6:	d003      	beq.n	800b600 <HAL_RCCEx_PeriphCLKConfig+0xfa8>
 800b5f8:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800b5fc:	d007      	beq.n	800b60e <HAL_RCCEx_PeriphCLKConfig+0xfb6>
 800b5fe:	e011      	b.n	800b624 <HAL_RCCEx_PeriphCLKConfig+0xfcc>
    {
      case RCC_USBCLKSOURCE_PLL:      /* PLL is used as clock source for USB*/
        /* Enable USB Clock output generated form System USB . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800b600:	4b33      	ldr	r3, [pc, #204]	; (800b6d0 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800b602:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b604:	4a32      	ldr	r2, [pc, #200]	; (800b6d0 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800b606:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800b60a:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* USB clock source configuration done later after clock selection check */
        break;
 800b60c:	e00f      	b.n	800b62e <HAL_RCCEx_PeriphCLKConfig+0xfd6>

      case RCC_USBCLKSOURCE_PLL3: /* PLL3 is used as clock source for USB*/

        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800b60e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800b612:	3328      	adds	r3, #40	; 0x28
 800b614:	2101      	movs	r1, #1
 800b616:	4618      	mov	r0, r3
 800b618:	f001 fcc0 	bl	800cf9c <RCCEx_PLL3_Config>
 800b61c:	4603      	mov	r3, r0
 800b61e:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* USB clock source configuration done later after clock selection check */
        break;
 800b622:	e004      	b.n	800b62e <HAL_RCCEx_PeriphCLKConfig+0xfd6>
        /* HSI48 oscillator is used as source of USB clock */
        /* USB clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800b624:	2301      	movs	r3, #1
 800b626:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 800b62a:	e000      	b.n	800b62e <HAL_RCCEx_PeriphCLKConfig+0xfd6>
        break;
 800b62c:	bf00      	nop
    }

    if (ret == HAL_OK)
 800b62e:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800b632:	2b00      	cmp	r3, #0
 800b634:	d10b      	bne.n	800b64e <HAL_RCCEx_PeriphCLKConfig+0xff6>
    {
      /* Set the source of USB clock*/
      __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 800b636:	4b26      	ldr	r3, [pc, #152]	; (800b6d0 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800b638:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800b63a:	f423 1140 	bic.w	r1, r3, #3145728	; 0x300000
 800b63e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800b642:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800b646:	4a22      	ldr	r2, [pc, #136]	; (800b6d0 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800b648:	430b      	orrs	r3, r1
 800b64a:	6553      	str	r3, [r2, #84]	; 0x54
 800b64c:	e003      	b.n	800b656 <HAL_RCCEx_PeriphCLKConfig+0xffe>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800b64e:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800b652:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }

  }

  /*------------------------------------- SDMMC Configuration ------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == RCC_PERIPHCLK_SDMMC)
 800b656:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800b65a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b65e:	f402 3380 	and.w	r3, r2, #65536	; 0x10000
 800b662:	673b      	str	r3, [r7, #112]	; 0x70
 800b664:	2300      	movs	r3, #0
 800b666:	677b      	str	r3, [r7, #116]	; 0x74
 800b668:	e9d7 121c 	ldrd	r1, r2, [r7, #112]	; 0x70
 800b66c:	460b      	mov	r3, r1
 800b66e:	4313      	orrs	r3, r2
 800b670:	d034      	beq.n	800b6dc <HAL_RCCEx_PeriphCLKConfig+0x1084>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC(PeriphClkInit->SdmmcClockSelection));

    switch (PeriphClkInit->SdmmcClockSelection)
 800b672:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800b676:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800b678:	2b00      	cmp	r3, #0
 800b67a:	d003      	beq.n	800b684 <HAL_RCCEx_PeriphCLKConfig+0x102c>
 800b67c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800b680:	d007      	beq.n	800b692 <HAL_RCCEx_PeriphCLKConfig+0x103a>
 800b682:	e011      	b.n	800b6a8 <HAL_RCCEx_PeriphCLKConfig+0x1050>
    {
      case RCC_SDMMCCLKSOURCE_PLL:      /* PLL is used as clock source for SDMMC*/
        /* Enable SDMMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800b684:	4b12      	ldr	r3, [pc, #72]	; (800b6d0 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800b686:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b688:	4a11      	ldr	r2, [pc, #68]	; (800b6d0 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800b68a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800b68e:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 800b690:	e00e      	b.n	800b6b0 <HAL_RCCEx_PeriphCLKConfig+0x1058>

      case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for SDMMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 800b692:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800b696:	3308      	adds	r3, #8
 800b698:	2102      	movs	r1, #2
 800b69a:	4618      	mov	r0, r3
 800b69c:	f001 fbcc 	bl	800ce38 <RCCEx_PLL2_Config>
 800b6a0:	4603      	mov	r3, r0
 800b6a2:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 800b6a6:	e003      	b.n	800b6b0 <HAL_RCCEx_PeriphCLKConfig+0x1058>

      default:
        ret = HAL_ERROR;
 800b6a8:	2301      	movs	r3, #1
 800b6aa:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 800b6ae:	bf00      	nop
    }

    if (ret == HAL_OK)
 800b6b0:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800b6b4:	2b00      	cmp	r3, #0
 800b6b6:	d10d      	bne.n	800b6d4 <HAL_RCCEx_PeriphCLKConfig+0x107c>
    {
      /* Set the source of SDMMC clock*/
      __HAL_RCC_SDMMC_CONFIG(PeriphClkInit->SdmmcClockSelection);
 800b6b8:	4b05      	ldr	r3, [pc, #20]	; (800b6d0 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800b6ba:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800b6bc:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 800b6c0:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800b6c4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800b6c6:	4a02      	ldr	r2, [pc, #8]	; (800b6d0 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800b6c8:	430b      	orrs	r3, r1
 800b6ca:	64d3      	str	r3, [r2, #76]	; 0x4c
 800b6cc:	e006      	b.n	800b6dc <HAL_RCCEx_PeriphCLKConfig+0x1084>
 800b6ce:	bf00      	nop
 800b6d0:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 800b6d4:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800b6d8:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

#if defined(LTDC)
  /*-------------------------------------- LTDC Configuration -----------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 800b6dc:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800b6e0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b6e4:	f002 5300 	and.w	r3, r2, #536870912	; 0x20000000
 800b6e8:	66bb      	str	r3, [r7, #104]	; 0x68
 800b6ea:	2300      	movs	r3, #0
 800b6ec:	66fb      	str	r3, [r7, #108]	; 0x6c
 800b6ee:	e9d7 121a 	ldrd	r1, r2, [r7, #104]	; 0x68
 800b6f2:	460b      	mov	r3, r1
 800b6f4:	4313      	orrs	r3, r2
 800b6f6:	d00c      	beq.n	800b712 <HAL_RCCEx_PeriphCLKConfig+0x10ba>
  {
    if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 800b6f8:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800b6fc:	3328      	adds	r3, #40	; 0x28
 800b6fe:	2102      	movs	r1, #2
 800b700:	4618      	mov	r0, r3
 800b702:	f001 fc4b 	bl	800cf9c <RCCEx_PLL3_Config>
 800b706:	4603      	mov	r3, r0
 800b708:	2b00      	cmp	r3, #0
 800b70a:	d002      	beq.n	800b712 <HAL_RCCEx_PeriphCLKConfig+0x10ba>
    {
      status = HAL_ERROR;
 800b70c:	2301      	movs	r3, #1
 800b70e:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }
#endif /* LTDC */

  /*------------------------------ RNG Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 800b712:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800b716:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b71a:	f402 3300 	and.w	r3, r2, #131072	; 0x20000
 800b71e:	663b      	str	r3, [r7, #96]	; 0x60
 800b720:	2300      	movs	r3, #0
 800b722:	667b      	str	r3, [r7, #100]	; 0x64
 800b724:	e9d7 1218 	ldrd	r1, r2, [r7, #96]	; 0x60
 800b728:	460b      	mov	r3, r1
 800b72a:	4313      	orrs	r3, r2
 800b72c:	d038      	beq.n	800b7a0 <HAL_RCCEx_PeriphCLKConfig+0x1148>
  {

    switch (PeriphClkInit->RngClockSelection)
 800b72e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800b732:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800b736:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800b73a:	d018      	beq.n	800b76e <HAL_RCCEx_PeriphCLKConfig+0x1116>
 800b73c:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800b740:	d811      	bhi.n	800b766 <HAL_RCCEx_PeriphCLKConfig+0x110e>
 800b742:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800b746:	d014      	beq.n	800b772 <HAL_RCCEx_PeriphCLKConfig+0x111a>
 800b748:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800b74c:	d80b      	bhi.n	800b766 <HAL_RCCEx_PeriphCLKConfig+0x110e>
 800b74e:	2b00      	cmp	r3, #0
 800b750:	d011      	beq.n	800b776 <HAL_RCCEx_PeriphCLKConfig+0x111e>
 800b752:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800b756:	d106      	bne.n	800b766 <HAL_RCCEx_PeriphCLKConfig+0x110e>
    {
      case RCC_RNGCLKSOURCE_PLL:     /* PLL is used as clock source for RNG*/
        /* Enable RNG Clock output generated form System RNG . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800b758:	4bc3      	ldr	r3, [pc, #780]	; (800ba68 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800b75a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b75c:	4ac2      	ldr	r2, [pc, #776]	; (800ba68 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800b75e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800b762:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* RNG clock source configuration done later after clock selection check */
        break;
 800b764:	e008      	b.n	800b778 <HAL_RCCEx_PeriphCLKConfig+0x1120>
        /* HSI48 oscillator is used as source of RNG clock */
        /* RNG clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800b766:	2301      	movs	r3, #1
 800b768:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 800b76c:	e004      	b.n	800b778 <HAL_RCCEx_PeriphCLKConfig+0x1120>
        break;
 800b76e:	bf00      	nop
 800b770:	e002      	b.n	800b778 <HAL_RCCEx_PeriphCLKConfig+0x1120>
        break;
 800b772:	bf00      	nop
 800b774:	e000      	b.n	800b778 <HAL_RCCEx_PeriphCLKConfig+0x1120>
        break;
 800b776:	bf00      	nop
    }

    if (ret == HAL_OK)
 800b778:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800b77c:	2b00      	cmp	r3, #0
 800b77e:	d10b      	bne.n	800b798 <HAL_RCCEx_PeriphCLKConfig+0x1140>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 800b780:	4bb9      	ldr	r3, [pc, #740]	; (800ba68 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800b782:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800b784:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 800b788:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800b78c:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800b790:	4ab5      	ldr	r2, [pc, #724]	; (800ba68 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800b792:	430b      	orrs	r3, r1
 800b794:	6553      	str	r3, [r2, #84]	; 0x54
 800b796:	e003      	b.n	800b7a0 <HAL_RCCEx_PeriphCLKConfig+0x1148>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800b798:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800b79c:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }

  }

  /*------------------------------ SWPMI1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 800b7a0:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800b7a4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b7a8:	f402 1380 	and.w	r3, r2, #1048576	; 0x100000
 800b7ac:	65bb      	str	r3, [r7, #88]	; 0x58
 800b7ae:	2300      	movs	r3, #0
 800b7b0:	65fb      	str	r3, [r7, #92]	; 0x5c
 800b7b2:	e9d7 1216 	ldrd	r1, r2, [r7, #88]	; 0x58
 800b7b6:	460b      	mov	r3, r1
 800b7b8:	4313      	orrs	r3, r2
 800b7ba:	d009      	beq.n	800b7d0 <HAL_RCCEx_PeriphCLKConfig+0x1178>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 interface clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 800b7bc:	4baa      	ldr	r3, [pc, #680]	; (800ba68 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800b7be:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800b7c0:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
 800b7c4:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800b7c8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800b7ca:	4aa7      	ldr	r2, [pc, #668]	; (800ba68 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800b7cc:	430b      	orrs	r3, r1
 800b7ce:	6513      	str	r3, [r2, #80]	; 0x50
  }
#if defined(HRTIM1)
  /*------------------------------ HRTIM1 clock Configuration ----------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_HRTIM1) == RCC_PERIPHCLK_HRTIM1)
 800b7d0:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800b7d4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b7d8:	f002 5380 	and.w	r3, r2, #268435456	; 0x10000000
 800b7dc:	653b      	str	r3, [r7, #80]	; 0x50
 800b7de:	2300      	movs	r3, #0
 800b7e0:	657b      	str	r3, [r7, #84]	; 0x54
 800b7e2:	e9d7 1214 	ldrd	r1, r2, [r7, #80]	; 0x50
 800b7e6:	460b      	mov	r3, r1
 800b7e8:	4313      	orrs	r3, r2
 800b7ea:	d00a      	beq.n	800b802 <HAL_RCCEx_PeriphCLKConfig+0x11aa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HRTIM1CLKSOURCE(PeriphClkInit->Hrtim1ClockSelection));

    /* Configure the HRTIM1 clock source */
    __HAL_RCC_HRTIM1_CONFIG(PeriphClkInit->Hrtim1ClockSelection);
 800b7ec:	4b9e      	ldr	r3, [pc, #632]	; (800ba68 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800b7ee:	691b      	ldr	r3, [r3, #16]
 800b7f0:	f423 4180 	bic.w	r1, r3, #16384	; 0x4000
 800b7f4:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800b7f8:	f8d3 30b8 	ldr.w	r3, [r3, #184]	; 0xb8
 800b7fc:	4a9a      	ldr	r2, [pc, #616]	; (800ba68 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800b7fe:	430b      	orrs	r3, r1
 800b800:	6113      	str	r3, [r2, #16]
  }
#endif  /*HRTIM1*/
  /*------------------------------ DFSDM1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 800b802:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800b806:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b80a:	f402 1300 	and.w	r3, r2, #2097152	; 0x200000
 800b80e:	64bb      	str	r3, [r7, #72]	; 0x48
 800b810:	2300      	movs	r3, #0
 800b812:	64fb      	str	r3, [r7, #76]	; 0x4c
 800b814:	e9d7 1212 	ldrd	r1, r2, [r7, #72]	; 0x48
 800b818:	460b      	mov	r3, r1
 800b81a:	4313      	orrs	r3, r2
 800b81c:	d009      	beq.n	800b832 <HAL_RCCEx_PeriphCLKConfig+0x11da>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 800b81e:	4b92      	ldr	r3, [pc, #584]	; (800ba68 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800b820:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800b822:	f023 7180 	bic.w	r1, r3, #16777216	; 0x1000000
 800b826:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800b82a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800b82c:	4a8e      	ldr	r2, [pc, #568]	; (800ba68 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800b82e:	430b      	orrs	r3, r1
 800b830:	6513      	str	r3, [r2, #80]	; 0x50
    __HAL_RCC_DFSDM2_CONFIG(PeriphClkInit->Dfsdm2ClockSelection);
  }
#endif  /* DFSDM2 */

  /*------------------------------------ TIM configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
 800b832:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800b836:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b83a:	f002 4380 	and.w	r3, r2, #1073741824	; 0x40000000
 800b83e:	643b      	str	r3, [r7, #64]	; 0x40
 800b840:	2300      	movs	r3, #0
 800b842:	647b      	str	r3, [r7, #68]	; 0x44
 800b844:	e9d7 1210 	ldrd	r1, r2, [r7, #64]	; 0x40
 800b848:	460b      	mov	r3, r1
 800b84a:	4313      	orrs	r3, r2
 800b84c:	d00e      	beq.n	800b86c <HAL_RCCEx_PeriphCLKConfig+0x1214>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 800b84e:	4b86      	ldr	r3, [pc, #536]	; (800ba68 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800b850:	691b      	ldr	r3, [r3, #16]
 800b852:	4a85      	ldr	r2, [pc, #532]	; (800ba68 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800b854:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 800b858:	6113      	str	r3, [r2, #16]
 800b85a:	4b83      	ldr	r3, [pc, #524]	; (800ba68 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800b85c:	6919      	ldr	r1, [r3, #16]
 800b85e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800b862:	f8d3 30bc 	ldr.w	r3, [r3, #188]	; 0xbc
 800b866:	4a80      	ldr	r2, [pc, #512]	; (800ba68 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800b868:	430b      	orrs	r3, r1
 800b86a:	6113      	str	r3, [r2, #16]
  }

  /*------------------------------------ CKPER configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
 800b86c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800b870:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b874:	f002 4300 	and.w	r3, r2, #2147483648	; 0x80000000
 800b878:	63bb      	str	r3, [r7, #56]	; 0x38
 800b87a:	2300      	movs	r3, #0
 800b87c:	63fb      	str	r3, [r7, #60]	; 0x3c
 800b87e:	e9d7 120e 	ldrd	r1, r2, [r7, #56]	; 0x38
 800b882:	460b      	mov	r3, r1
 800b884:	4313      	orrs	r3, r2
 800b886:	d009      	beq.n	800b89c <HAL_RCCEx_PeriphCLKConfig+0x1244>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLKPSOURCE(PeriphClkInit->CkperClockSelection));

    /* Configure the CKPER clock source */
    __HAL_RCC_CLKP_CONFIG(PeriphClkInit->CkperClockSelection);
 800b888:	4b77      	ldr	r3, [pc, #476]	; (800ba68 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800b88a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800b88c:	f023 5140 	bic.w	r1, r3, #805306368	; 0x30000000
 800b890:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800b894:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800b896:	4a74      	ldr	r2, [pc, #464]	; (800ba68 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800b898:	430b      	orrs	r3, r1
 800b89a:	64d3      	str	r3, [r2, #76]	; 0x4c
  }

  /*------------------------------ CEC Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 800b89c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800b8a0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b8a4:	f402 0300 	and.w	r3, r2, #8388608	; 0x800000
 800b8a8:	633b      	str	r3, [r7, #48]	; 0x30
 800b8aa:	2300      	movs	r3, #0
 800b8ac:	637b      	str	r3, [r7, #52]	; 0x34
 800b8ae:	e9d7 120c 	ldrd	r1, r2, [r7, #48]	; 0x30
 800b8b2:	460b      	mov	r3, r1
 800b8b4:	4313      	orrs	r3, r2
 800b8b6:	d00a      	beq.n	800b8ce <HAL_RCCEx_PeriphCLKConfig+0x1276>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC interface clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 800b8b8:	4b6b      	ldr	r3, [pc, #428]	; (800ba68 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800b8ba:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800b8bc:	f423 0140 	bic.w	r1, r3, #12582912	; 0xc00000
 800b8c0:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800b8c4:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800b8c8:	4a67      	ldr	r2, [pc, #412]	; (800ba68 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800b8ca:	430b      	orrs	r3, r1
 800b8cc:	6553      	str	r3, [r2, #84]	; 0x54
  }

  /*---------------------------- PLL2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVP) == RCC_PERIPHCLK_PLL2_DIVP)
 800b8ce:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800b8d2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b8d6:	2100      	movs	r1, #0
 800b8d8:	62b9      	str	r1, [r7, #40]	; 0x28
 800b8da:	f003 0301 	and.w	r3, r3, #1
 800b8de:	62fb      	str	r3, [r7, #44]	; 0x2c
 800b8e0:	e9d7 120a 	ldrd	r1, r2, [r7, #40]	; 0x28
 800b8e4:	460b      	mov	r3, r1
 800b8e6:	4313      	orrs	r3, r2
 800b8e8:	d011      	beq.n	800b90e <HAL_RCCEx_PeriphCLKConfig+0x12b6>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800b8ea:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800b8ee:	3308      	adds	r3, #8
 800b8f0:	2100      	movs	r1, #0
 800b8f2:	4618      	mov	r0, r3
 800b8f4:	f001 faa0 	bl	800ce38 <RCCEx_PLL2_Config>
 800b8f8:	4603      	mov	r3, r0
 800b8fa:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
    
    if (ret == HAL_OK)
 800b8fe:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800b902:	2b00      	cmp	r3, #0
 800b904:	d003      	beq.n	800b90e <HAL_RCCEx_PeriphCLKConfig+0x12b6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 800b906:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800b90a:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    } 
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVQ) == RCC_PERIPHCLK_PLL2_DIVQ)
 800b90e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800b912:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b916:	2100      	movs	r1, #0
 800b918:	6239      	str	r1, [r7, #32]
 800b91a:	f003 0302 	and.w	r3, r3, #2
 800b91e:	627b      	str	r3, [r7, #36]	; 0x24
 800b920:	e9d7 1208 	ldrd	r1, r2, [r7, #32]
 800b924:	460b      	mov	r3, r1
 800b926:	4313      	orrs	r3, r2
 800b928:	d011      	beq.n	800b94e <HAL_RCCEx_PeriphCLKConfig+0x12f6>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800b92a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800b92e:	3308      	adds	r3, #8
 800b930:	2101      	movs	r1, #1
 800b932:	4618      	mov	r0, r3
 800b934:	f001 fa80 	bl	800ce38 <RCCEx_PLL2_Config>
 800b938:	4603      	mov	r3, r0
 800b93a:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
    
    if (ret == HAL_OK)
 800b93e:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800b942:	2b00      	cmp	r3, #0
 800b944:	d003      	beq.n	800b94e <HAL_RCCEx_PeriphCLKConfig+0x12f6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 800b946:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800b94a:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVR) == RCC_PERIPHCLK_PLL2_DIVR)
 800b94e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800b952:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b956:	2100      	movs	r1, #0
 800b958:	61b9      	str	r1, [r7, #24]
 800b95a:	f003 0304 	and.w	r3, r3, #4
 800b95e:	61fb      	str	r3, [r7, #28]
 800b960:	e9d7 1206 	ldrd	r1, r2, [r7, #24]
 800b964:	460b      	mov	r3, r1
 800b966:	4313      	orrs	r3, r2
 800b968:	d011      	beq.n	800b98e <HAL_RCCEx_PeriphCLKConfig+0x1336>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 800b96a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800b96e:	3308      	adds	r3, #8
 800b970:	2102      	movs	r1, #2
 800b972:	4618      	mov	r0, r3
 800b974:	f001 fa60 	bl	800ce38 <RCCEx_PLL2_Config>
 800b978:	4603      	mov	r3, r0
 800b97a:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
    
    if (ret == HAL_OK)
 800b97e:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800b982:	2b00      	cmp	r3, #0
 800b984:	d003      	beq.n	800b98e <HAL_RCCEx_PeriphCLKConfig+0x1336>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 800b986:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800b98a:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }
  

  /*---------------------------- PLL3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVP) == RCC_PERIPHCLK_PLL3_DIVP)
 800b98e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800b992:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b996:	2100      	movs	r1, #0
 800b998:	6139      	str	r1, [r7, #16]
 800b99a:	f003 0308 	and.w	r3, r3, #8
 800b99e:	617b      	str	r3, [r7, #20]
 800b9a0:	e9d7 1204 	ldrd	r1, r2, [r7, #16]
 800b9a4:	460b      	mov	r3, r1
 800b9a6:	4313      	orrs	r3, r2
 800b9a8:	d011      	beq.n	800b9ce <HAL_RCCEx_PeriphCLKConfig+0x1376>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 800b9aa:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800b9ae:	3328      	adds	r3, #40	; 0x28
 800b9b0:	2100      	movs	r1, #0
 800b9b2:	4618      	mov	r0, r3
 800b9b4:	f001 faf2 	bl	800cf9c <RCCEx_PLL3_Config>
 800b9b8:	4603      	mov	r3, r0
 800b9ba:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
  
    if (ret == HAL_OK)
 800b9be:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800b9c2:	2b00      	cmp	r3, #0
 800b9c4:	d003      	beq.n	800b9ce <HAL_RCCEx_PeriphCLKConfig+0x1376>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 800b9c6:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800b9ca:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVQ) == RCC_PERIPHCLK_PLL3_DIVQ)
 800b9ce:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800b9d2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b9d6:	2100      	movs	r1, #0
 800b9d8:	60b9      	str	r1, [r7, #8]
 800b9da:	f003 0310 	and.w	r3, r3, #16
 800b9de:	60fb      	str	r3, [r7, #12]
 800b9e0:	e9d7 1202 	ldrd	r1, r2, [r7, #8]
 800b9e4:	460b      	mov	r3, r1
 800b9e6:	4313      	orrs	r3, r2
 800b9e8:	d011      	beq.n	800ba0e <HAL_RCCEx_PeriphCLKConfig+0x13b6>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800b9ea:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800b9ee:	3328      	adds	r3, #40	; 0x28
 800b9f0:	2101      	movs	r1, #1
 800b9f2:	4618      	mov	r0, r3
 800b9f4:	f001 fad2 	bl	800cf9c <RCCEx_PLL3_Config>
 800b9f8:	4603      	mov	r3, r0
 800b9fa:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
    
    if (ret == HAL_OK)
 800b9fe:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800ba02:	2b00      	cmp	r3, #0
 800ba04:	d003      	beq.n	800ba0e <HAL_RCCEx_PeriphCLKConfig+0x13b6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 800ba06:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800ba0a:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVR) == RCC_PERIPHCLK_PLL3_DIVR)
 800ba0e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800ba12:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ba16:	2100      	movs	r1, #0
 800ba18:	6039      	str	r1, [r7, #0]
 800ba1a:	f003 0320 	and.w	r3, r3, #32
 800ba1e:	607b      	str	r3, [r7, #4]
 800ba20:	e9d7 1200 	ldrd	r1, r2, [r7]
 800ba24:	460b      	mov	r3, r1
 800ba26:	4313      	orrs	r3, r2
 800ba28:	d011      	beq.n	800ba4e <HAL_RCCEx_PeriphCLKConfig+0x13f6>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800ba2a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800ba2e:	3328      	adds	r3, #40	; 0x28
 800ba30:	2102      	movs	r1, #2
 800ba32:	4618      	mov	r0, r3
 800ba34:	f001 fab2 	bl	800cf9c <RCCEx_PLL3_Config>
 800ba38:	4603      	mov	r3, r0
 800ba3a:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
    
    if (ret == HAL_OK)
 800ba3e:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800ba42:	2b00      	cmp	r3, #0
 800ba44:	d003      	beq.n	800ba4e <HAL_RCCEx_PeriphCLKConfig+0x13f6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 800ba46:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800ba4a:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    } 
  }

  if (status == HAL_OK)
 800ba4e:	f897 3126 	ldrb.w	r3, [r7, #294]	; 0x126
 800ba52:	2b00      	cmp	r3, #0
 800ba54:	d101      	bne.n	800ba5a <HAL_RCCEx_PeriphCLKConfig+0x1402>
  {
    return HAL_OK;
 800ba56:	2300      	movs	r3, #0
 800ba58:	e000      	b.n	800ba5c <HAL_RCCEx_PeriphCLKConfig+0x1404>
  }
  return HAL_ERROR;
 800ba5a:	2301      	movs	r3, #1
}
 800ba5c:	4618      	mov	r0, r3
 800ba5e:	f507 7794 	add.w	r7, r7, #296	; 0x128
 800ba62:	46bd      	mov	sp, r7
 800ba64:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800ba68:	58024400 	.word	0x58024400

0800ba6c <HAL_RCCEx_GetPeriphCLKFreq>:
  * @retval Frequency in KHz
  *
  *  (*) : Available on some STM32H7 lines only.
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint64_t PeriphClk)
{
 800ba6c:	b580      	push	{r7, lr}
 800ba6e:	b090      	sub	sp, #64	; 0x40
 800ba70:	af00      	add	r7, sp, #0
 800ba72:	e9c7 0100 	strd	r0, r1, [r7]
  /* This variable is used to store the SAI and CKP clock source */
  uint32_t saiclocksource;
  uint32_t ckpclocksource;
  uint32_t srcclk;

  if (PeriphClk == RCC_PERIPHCLK_SAI1)
 800ba76:	e9d7 2300 	ldrd	r2, r3, [r7]
 800ba7a:	f5a2 7180 	sub.w	r1, r2, #256	; 0x100
 800ba7e:	430b      	orrs	r3, r1
 800ba80:	f040 8094 	bne.w	800bbac <HAL_RCCEx_GetPeriphCLKFreq+0x140>
  {

    saiclocksource = __HAL_RCC_GET_SAI1_SOURCE();
 800ba84:	4b9e      	ldr	r3, [pc, #632]	; (800bd00 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800ba86:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800ba88:	f003 0307 	and.w	r3, r3, #7
 800ba8c:	633b      	str	r3, [r7, #48]	; 0x30

    switch (saiclocksource)
 800ba8e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ba90:	2b04      	cmp	r3, #4
 800ba92:	f200 8087 	bhi.w	800bba4 <HAL_RCCEx_GetPeriphCLKFreq+0x138>
 800ba96:	a201      	add	r2, pc, #4	; (adr r2, 800ba9c <HAL_RCCEx_GetPeriphCLKFreq+0x30>)
 800ba98:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ba9c:	0800bab1 	.word	0x0800bab1
 800baa0:	0800bad9 	.word	0x0800bad9
 800baa4:	0800bb01 	.word	0x0800bb01
 800baa8:	0800bb9d 	.word	0x0800bb9d
 800baac:	0800bb29 	.word	0x0800bb29
    {
      case RCC_SAI1CLKSOURCE_PLL: /* PLL1 is the clock source for SAI1 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 800bab0:	4b93      	ldr	r3, [pc, #588]	; (800bd00 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800bab2:	681b      	ldr	r3, [r3, #0]
 800bab4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800bab8:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800babc:	d108      	bne.n	800bad0 <HAL_RCCEx_GetPeriphCLKFreq+0x64>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800babe:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800bac2:	4618      	mov	r0, r3
 800bac4:	f001 f810 	bl	800cae8 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 800bac8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800baca:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800bacc:	f000 bd45 	b.w	800c55a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800bad0:	2300      	movs	r3, #0
 800bad2:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800bad4:	f000 bd41 	b.w	800c55a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is the clock source for SAI1 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800bad8:	4b89      	ldr	r3, [pc, #548]	; (800bd00 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800bada:	681b      	ldr	r3, [r3, #0]
 800badc:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800bae0:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800bae4:	d108      	bne.n	800baf8 <HAL_RCCEx_GetPeriphCLKFreq+0x8c>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800bae6:	f107 0318 	add.w	r3, r7, #24
 800baea:	4618      	mov	r0, r3
 800baec:	f000 fd54 	bl	800c598 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 800baf0:	69bb      	ldr	r3, [r7, #24]
 800baf2:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800baf4:	f000 bd31 	b.w	800c55a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800baf8:	2300      	movs	r3, #0
 800bafa:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800bafc:	f000 bd2d 	b.w	800c55a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI1CLKSOURCE_PLL3: /* PLL3 is the clock source for SAI1 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800bb00:	4b7f      	ldr	r3, [pc, #508]	; (800bd00 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800bb02:	681b      	ldr	r3, [r3, #0]
 800bb04:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800bb08:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800bb0c:	d108      	bne.n	800bb20 <HAL_RCCEx_GetPeriphCLKFreq+0xb4>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800bb0e:	f107 030c 	add.w	r3, r7, #12
 800bb12:	4618      	mov	r0, r3
 800bb14:	f000 fe94 	bl	800c840 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 800bb18:	68fb      	ldr	r3, [r7, #12]
 800bb1a:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800bb1c:	f000 bd1d 	b.w	800c55a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800bb20:	2300      	movs	r3, #0
 800bb22:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800bb24:	f000 bd19 	b.w	800c55a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI1CLKSOURCE_CLKP: /* CKPER is the clock source for SAI1*/
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 800bb28:	4b75      	ldr	r3, [pc, #468]	; (800bd00 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800bb2a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800bb2c:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800bb30:	637b      	str	r3, [r7, #52]	; 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 800bb32:	4b73      	ldr	r3, [pc, #460]	; (800bd00 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800bb34:	681b      	ldr	r3, [r3, #0]
 800bb36:	f003 0304 	and.w	r3, r3, #4
 800bb3a:	2b04      	cmp	r3, #4
 800bb3c:	d10c      	bne.n	800bb58 <HAL_RCCEx_GetPeriphCLKFreq+0xec>
 800bb3e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800bb40:	2b00      	cmp	r3, #0
 800bb42:	d109      	bne.n	800bb58 <HAL_RCCEx_GetPeriphCLKFreq+0xec>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800bb44:	4b6e      	ldr	r3, [pc, #440]	; (800bd00 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800bb46:	681b      	ldr	r3, [r3, #0]
 800bb48:	08db      	lsrs	r3, r3, #3
 800bb4a:	f003 0303 	and.w	r3, r3, #3
 800bb4e:	4a6d      	ldr	r2, [pc, #436]	; (800bd04 <HAL_RCCEx_GetPeriphCLKFreq+0x298>)
 800bb50:	fa22 f303 	lsr.w	r3, r2, r3
 800bb54:	63fb      	str	r3, [r7, #60]	; 0x3c
 800bb56:	e01f      	b.n	800bb98 <HAL_RCCEx_GetPeriphCLKFreq+0x12c>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 800bb58:	4b69      	ldr	r3, [pc, #420]	; (800bd00 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800bb5a:	681b      	ldr	r3, [r3, #0]
 800bb5c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800bb60:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800bb64:	d106      	bne.n	800bb74 <HAL_RCCEx_GetPeriphCLKFreq+0x108>
 800bb66:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800bb68:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800bb6c:	d102      	bne.n	800bb74 <HAL_RCCEx_GetPeriphCLKFreq+0x108>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 800bb6e:	4b66      	ldr	r3, [pc, #408]	; (800bd08 <HAL_RCCEx_GetPeriphCLKFreq+0x29c>)
 800bb70:	63fb      	str	r3, [r7, #60]	; 0x3c
 800bb72:	e011      	b.n	800bb98 <HAL_RCCEx_GetPeriphCLKFreq+0x12c>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 800bb74:	4b62      	ldr	r3, [pc, #392]	; (800bd00 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800bb76:	681b      	ldr	r3, [r3, #0]
 800bb78:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800bb7c:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800bb80:	d106      	bne.n	800bb90 <HAL_RCCEx_GetPeriphCLKFreq+0x124>
 800bb82:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800bb84:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800bb88:	d102      	bne.n	800bb90 <HAL_RCCEx_GetPeriphCLKFreq+0x124>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 800bb8a:	4b60      	ldr	r3, [pc, #384]	; (800bd0c <HAL_RCCEx_GetPeriphCLKFreq+0x2a0>)
 800bb8c:	63fb      	str	r3, [r7, #60]	; 0x3c
 800bb8e:	e003      	b.n	800bb98 <HAL_RCCEx_GetPeriphCLKFreq+0x12c>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 800bb90:	2300      	movs	r3, #0
 800bb92:	63fb      	str	r3, [r7, #60]	; 0x3c
        }

        break;
 800bb94:	f000 bce1 	b.w	800c55a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 800bb98:	f000 bcdf 	b.w	800c55a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case (RCC_SAI1CLKSOURCE_PIN): /* External clock is the clock source for SAI1 */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 800bb9c:	4b5c      	ldr	r3, [pc, #368]	; (800bd10 <HAL_RCCEx_GetPeriphCLKFreq+0x2a4>)
 800bb9e:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800bba0:	f000 bcdb 	b.w	800c55a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      default :
      {
        frequency = 0;
 800bba4:	2300      	movs	r3, #0
 800bba6:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800bba8:	f000 bcd7 	b.w	800c55a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }

#if defined(SAI3)
  else if (PeriphClk == RCC_PERIPHCLK_SAI23)
 800bbac:	e9d7 2300 	ldrd	r2, r3, [r7]
 800bbb0:	f5a2 7100 	sub.w	r1, r2, #512	; 0x200
 800bbb4:	430b      	orrs	r3, r1
 800bbb6:	f040 80ad 	bne.w	800bd14 <HAL_RCCEx_GetPeriphCLKFreq+0x2a8>
  {

    saiclocksource = __HAL_RCC_GET_SAI23_SOURCE();
 800bbba:	4b51      	ldr	r3, [pc, #324]	; (800bd00 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800bbbc:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800bbbe:	f403 73e0 	and.w	r3, r3, #448	; 0x1c0
 800bbc2:	633b      	str	r3, [r7, #48]	; 0x30

    switch (saiclocksource)
 800bbc4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bbc6:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800bbca:	d056      	beq.n	800bc7a <HAL_RCCEx_GetPeriphCLKFreq+0x20e>
 800bbcc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bbce:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800bbd2:	f200 8090 	bhi.w	800bcf6 <HAL_RCCEx_GetPeriphCLKFreq+0x28a>
 800bbd6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bbd8:	2bc0      	cmp	r3, #192	; 0xc0
 800bbda:	f000 8088 	beq.w	800bcee <HAL_RCCEx_GetPeriphCLKFreq+0x282>
 800bbde:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bbe0:	2bc0      	cmp	r3, #192	; 0xc0
 800bbe2:	f200 8088 	bhi.w	800bcf6 <HAL_RCCEx_GetPeriphCLKFreq+0x28a>
 800bbe6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bbe8:	2b80      	cmp	r3, #128	; 0x80
 800bbea:	d032      	beq.n	800bc52 <HAL_RCCEx_GetPeriphCLKFreq+0x1e6>
 800bbec:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bbee:	2b80      	cmp	r3, #128	; 0x80
 800bbf0:	f200 8081 	bhi.w	800bcf6 <HAL_RCCEx_GetPeriphCLKFreq+0x28a>
 800bbf4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bbf6:	2b00      	cmp	r3, #0
 800bbf8:	d003      	beq.n	800bc02 <HAL_RCCEx_GetPeriphCLKFreq+0x196>
 800bbfa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bbfc:	2b40      	cmp	r3, #64	; 0x40
 800bbfe:	d014      	beq.n	800bc2a <HAL_RCCEx_GetPeriphCLKFreq+0x1be>
 800bc00:	e079      	b.n	800bcf6 <HAL_RCCEx_GetPeriphCLKFreq+0x28a>
    {
      case RCC_SAI23CLKSOURCE_PLL: /* PLL1 is the clock source for SAI2/3 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 800bc02:	4b3f      	ldr	r3, [pc, #252]	; (800bd00 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800bc04:	681b      	ldr	r3, [r3, #0]
 800bc06:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800bc0a:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800bc0e:	d108      	bne.n	800bc22 <HAL_RCCEx_GetPeriphCLKFreq+0x1b6>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800bc10:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800bc14:	4618      	mov	r0, r3
 800bc16:	f000 ff67 	bl	800cae8 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 800bc1a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bc1c:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800bc1e:	f000 bc9c 	b.w	800c55a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800bc22:	2300      	movs	r3, #0
 800bc24:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800bc26:	f000 bc98 	b.w	800c55a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SAI23CLKSOURCE_PLL2: /* PLL2 is the clock source for SAI2/3 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800bc2a:	4b35      	ldr	r3, [pc, #212]	; (800bd00 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800bc2c:	681b      	ldr	r3, [r3, #0]
 800bc2e:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800bc32:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800bc36:	d108      	bne.n	800bc4a <HAL_RCCEx_GetPeriphCLKFreq+0x1de>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800bc38:	f107 0318 	add.w	r3, r7, #24
 800bc3c:	4618      	mov	r0, r3
 800bc3e:	f000 fcab 	bl	800c598 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 800bc42:	69bb      	ldr	r3, [r7, #24]
 800bc44:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800bc46:	f000 bc88 	b.w	800c55a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800bc4a:	2300      	movs	r3, #0
 800bc4c:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800bc4e:	f000 bc84 	b.w	800c55a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI23CLKSOURCE_PLL3: /* PLL3 is the clock source for SAI2/3 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800bc52:	4b2b      	ldr	r3, [pc, #172]	; (800bd00 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800bc54:	681b      	ldr	r3, [r3, #0]
 800bc56:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800bc5a:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800bc5e:	d108      	bne.n	800bc72 <HAL_RCCEx_GetPeriphCLKFreq+0x206>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800bc60:	f107 030c 	add.w	r3, r7, #12
 800bc64:	4618      	mov	r0, r3
 800bc66:	f000 fdeb 	bl	800c840 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 800bc6a:	68fb      	ldr	r3, [r7, #12]
 800bc6c:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800bc6e:	f000 bc74 	b.w	800c55a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800bc72:	2300      	movs	r3, #0
 800bc74:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800bc76:	f000 bc70 	b.w	800c55a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI23CLKSOURCE_CLKP: /* CKPER is the clock source for SAI2/3 */
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 800bc7a:	4b21      	ldr	r3, [pc, #132]	; (800bd00 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800bc7c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800bc7e:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800bc82:	637b      	str	r3, [r7, #52]	; 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 800bc84:	4b1e      	ldr	r3, [pc, #120]	; (800bd00 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800bc86:	681b      	ldr	r3, [r3, #0]
 800bc88:	f003 0304 	and.w	r3, r3, #4
 800bc8c:	2b04      	cmp	r3, #4
 800bc8e:	d10c      	bne.n	800bcaa <HAL_RCCEx_GetPeriphCLKFreq+0x23e>
 800bc90:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800bc92:	2b00      	cmp	r3, #0
 800bc94:	d109      	bne.n	800bcaa <HAL_RCCEx_GetPeriphCLKFreq+0x23e>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800bc96:	4b1a      	ldr	r3, [pc, #104]	; (800bd00 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800bc98:	681b      	ldr	r3, [r3, #0]
 800bc9a:	08db      	lsrs	r3, r3, #3
 800bc9c:	f003 0303 	and.w	r3, r3, #3
 800bca0:	4a18      	ldr	r2, [pc, #96]	; (800bd04 <HAL_RCCEx_GetPeriphCLKFreq+0x298>)
 800bca2:	fa22 f303 	lsr.w	r3, r2, r3
 800bca6:	63fb      	str	r3, [r7, #60]	; 0x3c
 800bca8:	e01f      	b.n	800bcea <HAL_RCCEx_GetPeriphCLKFreq+0x27e>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 800bcaa:	4b15      	ldr	r3, [pc, #84]	; (800bd00 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800bcac:	681b      	ldr	r3, [r3, #0]
 800bcae:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800bcb2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800bcb6:	d106      	bne.n	800bcc6 <HAL_RCCEx_GetPeriphCLKFreq+0x25a>
 800bcb8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800bcba:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800bcbe:	d102      	bne.n	800bcc6 <HAL_RCCEx_GetPeriphCLKFreq+0x25a>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 800bcc0:	4b11      	ldr	r3, [pc, #68]	; (800bd08 <HAL_RCCEx_GetPeriphCLKFreq+0x29c>)
 800bcc2:	63fb      	str	r3, [r7, #60]	; 0x3c
 800bcc4:	e011      	b.n	800bcea <HAL_RCCEx_GetPeriphCLKFreq+0x27e>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 800bcc6:	4b0e      	ldr	r3, [pc, #56]	; (800bd00 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800bcc8:	681b      	ldr	r3, [r3, #0]
 800bcca:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800bcce:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800bcd2:	d106      	bne.n	800bce2 <HAL_RCCEx_GetPeriphCLKFreq+0x276>
 800bcd4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800bcd6:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800bcda:	d102      	bne.n	800bce2 <HAL_RCCEx_GetPeriphCLKFreq+0x276>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 800bcdc:	4b0b      	ldr	r3, [pc, #44]	; (800bd0c <HAL_RCCEx_GetPeriphCLKFreq+0x2a0>)
 800bcde:	63fb      	str	r3, [r7, #60]	; 0x3c
 800bce0:	e003      	b.n	800bcea <HAL_RCCEx_GetPeriphCLKFreq+0x27e>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 800bce2:	2300      	movs	r3, #0
 800bce4:	63fb      	str	r3, [r7, #60]	; 0x3c
        }

        break;
 800bce6:	f000 bc38 	b.w	800c55a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 800bcea:	f000 bc36 	b.w	800c55a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case (RCC_SAI23CLKSOURCE_PIN): /* External clock is the clock source for SAI2/3 */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 800bcee:	4b08      	ldr	r3, [pc, #32]	; (800bd10 <HAL_RCCEx_GetPeriphCLKFreq+0x2a4>)
 800bcf0:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800bcf2:	f000 bc32 	b.w	800c55a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      default :
      {
        frequency = 0;
 800bcf6:	2300      	movs	r3, #0
 800bcf8:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800bcfa:	f000 bc2e 	b.w	800c55a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 800bcfe:	bf00      	nop
 800bd00:	58024400 	.word	0x58024400
 800bd04:	03d09000 	.word	0x03d09000
 800bd08:	003d0900 	.word	0x003d0900
 800bd0c:	007f1b10 	.word	0x007f1b10
 800bd10:	00bb8000 	.word	0x00bb8000
    }
  }
#endif

#if defined(SAI4)
  else if (PeriphClk == RCC_PERIPHCLK_SAI4A)
 800bd14:	e9d7 2300 	ldrd	r2, r3, [r7]
 800bd18:	f5a2 6180 	sub.w	r1, r2, #1024	; 0x400
 800bd1c:	430b      	orrs	r3, r1
 800bd1e:	f040 809c 	bne.w	800be5a <HAL_RCCEx_GetPeriphCLKFreq+0x3ee>
  {

    saiclocksource = __HAL_RCC_GET_SAI4A_SOURCE();
 800bd22:	4b9e      	ldr	r3, [pc, #632]	; (800bf9c <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800bd24:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800bd26:	f403 0360 	and.w	r3, r3, #14680064	; 0xe00000
 800bd2a:	633b      	str	r3, [r7, #48]	; 0x30

    switch (saiclocksource)
 800bd2c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bd2e:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 800bd32:	d054      	beq.n	800bdde <HAL_RCCEx_GetPeriphCLKFreq+0x372>
 800bd34:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bd36:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 800bd3a:	f200 808b 	bhi.w	800be54 <HAL_RCCEx_GetPeriphCLKFreq+0x3e8>
 800bd3e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bd40:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 800bd44:	f000 8083 	beq.w	800be4e <HAL_RCCEx_GetPeriphCLKFreq+0x3e2>
 800bd48:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bd4a:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 800bd4e:	f200 8081 	bhi.w	800be54 <HAL_RCCEx_GetPeriphCLKFreq+0x3e8>
 800bd52:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bd54:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800bd58:	d02f      	beq.n	800bdba <HAL_RCCEx_GetPeriphCLKFreq+0x34e>
 800bd5a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bd5c:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800bd60:	d878      	bhi.n	800be54 <HAL_RCCEx_GetPeriphCLKFreq+0x3e8>
 800bd62:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bd64:	2b00      	cmp	r3, #0
 800bd66:	d004      	beq.n	800bd72 <HAL_RCCEx_GetPeriphCLKFreq+0x306>
 800bd68:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bd6a:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800bd6e:	d012      	beq.n	800bd96 <HAL_RCCEx_GetPeriphCLKFreq+0x32a>
 800bd70:	e070      	b.n	800be54 <HAL_RCCEx_GetPeriphCLKFreq+0x3e8>
    {
      case RCC_SAI4ACLKSOURCE_PLL: /* PLL1 is the clock source for SAI4A */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 800bd72:	4b8a      	ldr	r3, [pc, #552]	; (800bf9c <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800bd74:	681b      	ldr	r3, [r3, #0]
 800bd76:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800bd7a:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800bd7e:	d107      	bne.n	800bd90 <HAL_RCCEx_GetPeriphCLKFreq+0x324>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800bd80:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800bd84:	4618      	mov	r0, r3
 800bd86:	f000 feaf 	bl	800cae8 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 800bd8a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bd8c:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800bd8e:	e3e4      	b.n	800c55a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800bd90:	2300      	movs	r3, #0
 800bd92:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800bd94:	e3e1      	b.n	800c55a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SAI4ACLKSOURCE_PLL2: /* PLLI2 is the clock source for SAI4A */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800bd96:	4b81      	ldr	r3, [pc, #516]	; (800bf9c <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800bd98:	681b      	ldr	r3, [r3, #0]
 800bd9a:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800bd9e:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800bda2:	d107      	bne.n	800bdb4 <HAL_RCCEx_GetPeriphCLKFreq+0x348>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800bda4:	f107 0318 	add.w	r3, r7, #24
 800bda8:	4618      	mov	r0, r3
 800bdaa:	f000 fbf5 	bl	800c598 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 800bdae:	69bb      	ldr	r3, [r7, #24]
 800bdb0:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800bdb2:	e3d2      	b.n	800c55a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800bdb4:	2300      	movs	r3, #0
 800bdb6:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800bdb8:	e3cf      	b.n	800c55a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI4ACLKSOURCE_PLL3: /* PLLI3 is the clock source for SAI4A */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800bdba:	4b78      	ldr	r3, [pc, #480]	; (800bf9c <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800bdbc:	681b      	ldr	r3, [r3, #0]
 800bdbe:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800bdc2:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800bdc6:	d107      	bne.n	800bdd8 <HAL_RCCEx_GetPeriphCLKFreq+0x36c>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800bdc8:	f107 030c 	add.w	r3, r7, #12
 800bdcc:	4618      	mov	r0, r3
 800bdce:	f000 fd37 	bl	800c840 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 800bdd2:	68fb      	ldr	r3, [r7, #12]
 800bdd4:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800bdd6:	e3c0      	b.n	800c55a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800bdd8:	2300      	movs	r3, #0
 800bdda:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800bddc:	e3bd      	b.n	800c55a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI4ACLKSOURCE_CLKP: /* CKPER is the clock source for SAI4A*/
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 800bdde:	4b6f      	ldr	r3, [pc, #444]	; (800bf9c <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800bde0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800bde2:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800bde6:	637b      	str	r3, [r7, #52]	; 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 800bde8:	4b6c      	ldr	r3, [pc, #432]	; (800bf9c <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800bdea:	681b      	ldr	r3, [r3, #0]
 800bdec:	f003 0304 	and.w	r3, r3, #4
 800bdf0:	2b04      	cmp	r3, #4
 800bdf2:	d10c      	bne.n	800be0e <HAL_RCCEx_GetPeriphCLKFreq+0x3a2>
 800bdf4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800bdf6:	2b00      	cmp	r3, #0
 800bdf8:	d109      	bne.n	800be0e <HAL_RCCEx_GetPeriphCLKFreq+0x3a2>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800bdfa:	4b68      	ldr	r3, [pc, #416]	; (800bf9c <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800bdfc:	681b      	ldr	r3, [r3, #0]
 800bdfe:	08db      	lsrs	r3, r3, #3
 800be00:	f003 0303 	and.w	r3, r3, #3
 800be04:	4a66      	ldr	r2, [pc, #408]	; (800bfa0 <HAL_RCCEx_GetPeriphCLKFreq+0x534>)
 800be06:	fa22 f303 	lsr.w	r3, r2, r3
 800be0a:	63fb      	str	r3, [r7, #60]	; 0x3c
 800be0c:	e01e      	b.n	800be4c <HAL_RCCEx_GetPeriphCLKFreq+0x3e0>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 800be0e:	4b63      	ldr	r3, [pc, #396]	; (800bf9c <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800be10:	681b      	ldr	r3, [r3, #0]
 800be12:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800be16:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800be1a:	d106      	bne.n	800be2a <HAL_RCCEx_GetPeriphCLKFreq+0x3be>
 800be1c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800be1e:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800be22:	d102      	bne.n	800be2a <HAL_RCCEx_GetPeriphCLKFreq+0x3be>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 800be24:	4b5f      	ldr	r3, [pc, #380]	; (800bfa4 <HAL_RCCEx_GetPeriphCLKFreq+0x538>)
 800be26:	63fb      	str	r3, [r7, #60]	; 0x3c
 800be28:	e010      	b.n	800be4c <HAL_RCCEx_GetPeriphCLKFreq+0x3e0>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 800be2a:	4b5c      	ldr	r3, [pc, #368]	; (800bf9c <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800be2c:	681b      	ldr	r3, [r3, #0]
 800be2e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800be32:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800be36:	d106      	bne.n	800be46 <HAL_RCCEx_GetPeriphCLKFreq+0x3da>
 800be38:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800be3a:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800be3e:	d102      	bne.n	800be46 <HAL_RCCEx_GetPeriphCLKFreq+0x3da>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 800be40:	4b59      	ldr	r3, [pc, #356]	; (800bfa8 <HAL_RCCEx_GetPeriphCLKFreq+0x53c>)
 800be42:	63fb      	str	r3, [r7, #60]	; 0x3c
 800be44:	e002      	b.n	800be4c <HAL_RCCEx_GetPeriphCLKFreq+0x3e0>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 800be46:	2300      	movs	r3, #0
 800be48:	63fb      	str	r3, [r7, #60]	; 0x3c
        }

        break;
 800be4a:	e386      	b.n	800c55a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 800be4c:	e385      	b.n	800c55a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI4ACLKSOURCE_PIN: /* External clock is the clock source for SAI4A */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 800be4e:	4b57      	ldr	r3, [pc, #348]	; (800bfac <HAL_RCCEx_GetPeriphCLKFreq+0x540>)
 800be50:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800be52:	e382      	b.n	800c55a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      default :
      {
        frequency = 0;
 800be54:	2300      	movs	r3, #0
 800be56:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800be58:	e37f      	b.n	800c55a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }

  else if (PeriphClk == RCC_PERIPHCLK_SAI4B)
 800be5a:	e9d7 2300 	ldrd	r2, r3, [r7]
 800be5e:	f5a2 6100 	sub.w	r1, r2, #2048	; 0x800
 800be62:	430b      	orrs	r3, r1
 800be64:	f040 80a7 	bne.w	800bfb6 <HAL_RCCEx_GetPeriphCLKFreq+0x54a>
  {

    saiclocksource = __HAL_RCC_GET_SAI4B_SOURCE();
 800be68:	4b4c      	ldr	r3, [pc, #304]	; (800bf9c <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800be6a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800be6c:	f003 63e0 	and.w	r3, r3, #117440512	; 0x7000000
 800be70:	633b      	str	r3, [r7, #48]	; 0x30

    switch (saiclocksource)
 800be72:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800be74:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800be78:	d055      	beq.n	800bf26 <HAL_RCCEx_GetPeriphCLKFreq+0x4ba>
 800be7a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800be7c:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800be80:	f200 8096 	bhi.w	800bfb0 <HAL_RCCEx_GetPeriphCLKFreq+0x544>
 800be84:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800be86:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 800be8a:	f000 8084 	beq.w	800bf96 <HAL_RCCEx_GetPeriphCLKFreq+0x52a>
 800be8e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800be90:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 800be94:	f200 808c 	bhi.w	800bfb0 <HAL_RCCEx_GetPeriphCLKFreq+0x544>
 800be98:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800be9a:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800be9e:	d030      	beq.n	800bf02 <HAL_RCCEx_GetPeriphCLKFreq+0x496>
 800bea0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bea2:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800bea6:	f200 8083 	bhi.w	800bfb0 <HAL_RCCEx_GetPeriphCLKFreq+0x544>
 800beaa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800beac:	2b00      	cmp	r3, #0
 800beae:	d004      	beq.n	800beba <HAL_RCCEx_GetPeriphCLKFreq+0x44e>
 800beb0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800beb2:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800beb6:	d012      	beq.n	800bede <HAL_RCCEx_GetPeriphCLKFreq+0x472>
 800beb8:	e07a      	b.n	800bfb0 <HAL_RCCEx_GetPeriphCLKFreq+0x544>
    {
      case RCC_SAI4BCLKSOURCE_PLL: /* PLL1 is the clock source for SAI4B */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 800beba:	4b38      	ldr	r3, [pc, #224]	; (800bf9c <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800bebc:	681b      	ldr	r3, [r3, #0]
 800bebe:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800bec2:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800bec6:	d107      	bne.n	800bed8 <HAL_RCCEx_GetPeriphCLKFreq+0x46c>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800bec8:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800becc:	4618      	mov	r0, r3
 800bece:	f000 fe0b 	bl	800cae8 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 800bed2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bed4:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800bed6:	e340      	b.n	800c55a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800bed8:	2300      	movs	r3, #0
 800beda:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800bedc:	e33d      	b.n	800c55a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SAI4BCLKSOURCE_PLL2: /* PLLI2 is the clock source for SAI4B */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800bede:	4b2f      	ldr	r3, [pc, #188]	; (800bf9c <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800bee0:	681b      	ldr	r3, [r3, #0]
 800bee2:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800bee6:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800beea:	d107      	bne.n	800befc <HAL_RCCEx_GetPeriphCLKFreq+0x490>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800beec:	f107 0318 	add.w	r3, r7, #24
 800bef0:	4618      	mov	r0, r3
 800bef2:	f000 fb51 	bl	800c598 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 800bef6:	69bb      	ldr	r3, [r7, #24]
 800bef8:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800befa:	e32e      	b.n	800c55a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800befc:	2300      	movs	r3, #0
 800befe:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800bf00:	e32b      	b.n	800c55a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI4BCLKSOURCE_PLL3: /* PLLI3 is the clock source for SAI4B */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800bf02:	4b26      	ldr	r3, [pc, #152]	; (800bf9c <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800bf04:	681b      	ldr	r3, [r3, #0]
 800bf06:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800bf0a:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800bf0e:	d107      	bne.n	800bf20 <HAL_RCCEx_GetPeriphCLKFreq+0x4b4>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800bf10:	f107 030c 	add.w	r3, r7, #12
 800bf14:	4618      	mov	r0, r3
 800bf16:	f000 fc93 	bl	800c840 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 800bf1a:	68fb      	ldr	r3, [r7, #12]
 800bf1c:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800bf1e:	e31c      	b.n	800c55a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800bf20:	2300      	movs	r3, #0
 800bf22:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800bf24:	e319      	b.n	800c55a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI4BCLKSOURCE_CLKP: /* CKPER is the clock source for SAI4B*/
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 800bf26:	4b1d      	ldr	r3, [pc, #116]	; (800bf9c <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800bf28:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800bf2a:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800bf2e:	637b      	str	r3, [r7, #52]	; 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 800bf30:	4b1a      	ldr	r3, [pc, #104]	; (800bf9c <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800bf32:	681b      	ldr	r3, [r3, #0]
 800bf34:	f003 0304 	and.w	r3, r3, #4
 800bf38:	2b04      	cmp	r3, #4
 800bf3a:	d10c      	bne.n	800bf56 <HAL_RCCEx_GetPeriphCLKFreq+0x4ea>
 800bf3c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800bf3e:	2b00      	cmp	r3, #0
 800bf40:	d109      	bne.n	800bf56 <HAL_RCCEx_GetPeriphCLKFreq+0x4ea>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800bf42:	4b16      	ldr	r3, [pc, #88]	; (800bf9c <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800bf44:	681b      	ldr	r3, [r3, #0]
 800bf46:	08db      	lsrs	r3, r3, #3
 800bf48:	f003 0303 	and.w	r3, r3, #3
 800bf4c:	4a14      	ldr	r2, [pc, #80]	; (800bfa0 <HAL_RCCEx_GetPeriphCLKFreq+0x534>)
 800bf4e:	fa22 f303 	lsr.w	r3, r2, r3
 800bf52:	63fb      	str	r3, [r7, #60]	; 0x3c
 800bf54:	e01e      	b.n	800bf94 <HAL_RCCEx_GetPeriphCLKFreq+0x528>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 800bf56:	4b11      	ldr	r3, [pc, #68]	; (800bf9c <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800bf58:	681b      	ldr	r3, [r3, #0]
 800bf5a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800bf5e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800bf62:	d106      	bne.n	800bf72 <HAL_RCCEx_GetPeriphCLKFreq+0x506>
 800bf64:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800bf66:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800bf6a:	d102      	bne.n	800bf72 <HAL_RCCEx_GetPeriphCLKFreq+0x506>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 800bf6c:	4b0d      	ldr	r3, [pc, #52]	; (800bfa4 <HAL_RCCEx_GetPeriphCLKFreq+0x538>)
 800bf6e:	63fb      	str	r3, [r7, #60]	; 0x3c
 800bf70:	e010      	b.n	800bf94 <HAL_RCCEx_GetPeriphCLKFreq+0x528>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 800bf72:	4b0a      	ldr	r3, [pc, #40]	; (800bf9c <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800bf74:	681b      	ldr	r3, [r3, #0]
 800bf76:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800bf7a:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800bf7e:	d106      	bne.n	800bf8e <HAL_RCCEx_GetPeriphCLKFreq+0x522>
 800bf80:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800bf82:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800bf86:	d102      	bne.n	800bf8e <HAL_RCCEx_GetPeriphCLKFreq+0x522>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 800bf88:	4b07      	ldr	r3, [pc, #28]	; (800bfa8 <HAL_RCCEx_GetPeriphCLKFreq+0x53c>)
 800bf8a:	63fb      	str	r3, [r7, #60]	; 0x3c
 800bf8c:	e002      	b.n	800bf94 <HAL_RCCEx_GetPeriphCLKFreq+0x528>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 800bf8e:	2300      	movs	r3, #0
 800bf90:	63fb      	str	r3, [r7, #60]	; 0x3c
        }

        break;
 800bf92:	e2e2      	b.n	800c55a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 800bf94:	e2e1      	b.n	800c55a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI4BCLKSOURCE_PIN: /* External clock is the clock source for SAI4B */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 800bf96:	4b05      	ldr	r3, [pc, #20]	; (800bfac <HAL_RCCEx_GetPeriphCLKFreq+0x540>)
 800bf98:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800bf9a:	e2de      	b.n	800c55a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 800bf9c:	58024400 	.word	0x58024400
 800bfa0:	03d09000 	.word	0x03d09000
 800bfa4:	003d0900 	.word	0x003d0900
 800bfa8:	007f1b10 	.word	0x007f1b10
 800bfac:	00bb8000 	.word	0x00bb8000
      }

      default :
      {
        frequency = 0;
 800bfb0:	2300      	movs	r3, #0
 800bfb2:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800bfb4:	e2d1      	b.n	800c55a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }
#endif /*SAI4*/
  else if (PeriphClk == RCC_PERIPHCLK_SPI123)
 800bfb6:	e9d7 2300 	ldrd	r2, r3, [r7]
 800bfba:	f5a2 5180 	sub.w	r1, r2, #4096	; 0x1000
 800bfbe:	430b      	orrs	r3, r1
 800bfc0:	f040 809c 	bne.w	800c0fc <HAL_RCCEx_GetPeriphCLKFreq+0x690>
  {
    /* Get SPI1/2/3 clock source */
    srcclk = __HAL_RCC_GET_SPI123_SOURCE();
 800bfc4:	4b93      	ldr	r3, [pc, #588]	; (800c214 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 800bfc6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800bfc8:	f403 43e0 	and.w	r3, r3, #28672	; 0x7000
 800bfcc:	63bb      	str	r3, [r7, #56]	; 0x38

    switch (srcclk)
 800bfce:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800bfd0:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800bfd4:	d054      	beq.n	800c080 <HAL_RCCEx_GetPeriphCLKFreq+0x614>
 800bfd6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800bfd8:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800bfdc:	f200 808b 	bhi.w	800c0f6 <HAL_RCCEx_GetPeriphCLKFreq+0x68a>
 800bfe0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800bfe2:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 800bfe6:	f000 8083 	beq.w	800c0f0 <HAL_RCCEx_GetPeriphCLKFreq+0x684>
 800bfea:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800bfec:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 800bff0:	f200 8081 	bhi.w	800c0f6 <HAL_RCCEx_GetPeriphCLKFreq+0x68a>
 800bff4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800bff6:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800bffa:	d02f      	beq.n	800c05c <HAL_RCCEx_GetPeriphCLKFreq+0x5f0>
 800bffc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800bffe:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800c002:	d878      	bhi.n	800c0f6 <HAL_RCCEx_GetPeriphCLKFreq+0x68a>
 800c004:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c006:	2b00      	cmp	r3, #0
 800c008:	d004      	beq.n	800c014 <HAL_RCCEx_GetPeriphCLKFreq+0x5a8>
 800c00a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c00c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800c010:	d012      	beq.n	800c038 <HAL_RCCEx_GetPeriphCLKFreq+0x5cc>
 800c012:	e070      	b.n	800c0f6 <HAL_RCCEx_GetPeriphCLKFreq+0x68a>
    {
      case RCC_SPI123CLKSOURCE_PLL: /* PLL1 is the clock source for SPI123 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 800c014:	4b7f      	ldr	r3, [pc, #508]	; (800c214 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 800c016:	681b      	ldr	r3, [r3, #0]
 800c018:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800c01c:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800c020:	d107      	bne.n	800c032 <HAL_RCCEx_GetPeriphCLKFreq+0x5c6>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800c022:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800c026:	4618      	mov	r0, r3
 800c028:	f000 fd5e 	bl	800cae8 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 800c02c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c02e:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800c030:	e293      	b.n	800c55a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800c032:	2300      	movs	r3, #0
 800c034:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800c036:	e290      	b.n	800c55a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is the clock source for SPI123 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800c038:	4b76      	ldr	r3, [pc, #472]	; (800c214 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 800c03a:	681b      	ldr	r3, [r3, #0]
 800c03c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800c040:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800c044:	d107      	bne.n	800c056 <HAL_RCCEx_GetPeriphCLKFreq+0x5ea>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800c046:	f107 0318 	add.w	r3, r7, #24
 800c04a:	4618      	mov	r0, r3
 800c04c:	f000 faa4 	bl	800c598 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 800c050:	69bb      	ldr	r3, [r7, #24]
 800c052:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800c054:	e281      	b.n	800c55a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800c056:	2300      	movs	r3, #0
 800c058:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800c05a:	e27e      	b.n	800c55a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SPI123CLKSOURCE_PLL3: /* PLL3 is the clock source for SPI123 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800c05c:	4b6d      	ldr	r3, [pc, #436]	; (800c214 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 800c05e:	681b      	ldr	r3, [r3, #0]
 800c060:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800c064:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800c068:	d107      	bne.n	800c07a <HAL_RCCEx_GetPeriphCLKFreq+0x60e>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800c06a:	f107 030c 	add.w	r3, r7, #12
 800c06e:	4618      	mov	r0, r3
 800c070:	f000 fbe6 	bl	800c840 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 800c074:	68fb      	ldr	r3, [r7, #12]
 800c076:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800c078:	e26f      	b.n	800c55a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800c07a:	2300      	movs	r3, #0
 800c07c:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800c07e:	e26c      	b.n	800c55a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SPI123CLKSOURCE_CLKP: /* CKPER is the clock source for SPI123 */
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 800c080:	4b64      	ldr	r3, [pc, #400]	; (800c214 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 800c082:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800c084:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800c088:	637b      	str	r3, [r7, #52]	; 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 800c08a:	4b62      	ldr	r3, [pc, #392]	; (800c214 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 800c08c:	681b      	ldr	r3, [r3, #0]
 800c08e:	f003 0304 	and.w	r3, r3, #4
 800c092:	2b04      	cmp	r3, #4
 800c094:	d10c      	bne.n	800c0b0 <HAL_RCCEx_GetPeriphCLKFreq+0x644>
 800c096:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800c098:	2b00      	cmp	r3, #0
 800c09a:	d109      	bne.n	800c0b0 <HAL_RCCEx_GetPeriphCLKFreq+0x644>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800c09c:	4b5d      	ldr	r3, [pc, #372]	; (800c214 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 800c09e:	681b      	ldr	r3, [r3, #0]
 800c0a0:	08db      	lsrs	r3, r3, #3
 800c0a2:	f003 0303 	and.w	r3, r3, #3
 800c0a6:	4a5c      	ldr	r2, [pc, #368]	; (800c218 <HAL_RCCEx_GetPeriphCLKFreq+0x7ac>)
 800c0a8:	fa22 f303 	lsr.w	r3, r2, r3
 800c0ac:	63fb      	str	r3, [r7, #60]	; 0x3c
 800c0ae:	e01e      	b.n	800c0ee <HAL_RCCEx_GetPeriphCLKFreq+0x682>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 800c0b0:	4b58      	ldr	r3, [pc, #352]	; (800c214 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 800c0b2:	681b      	ldr	r3, [r3, #0]
 800c0b4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800c0b8:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800c0bc:	d106      	bne.n	800c0cc <HAL_RCCEx_GetPeriphCLKFreq+0x660>
 800c0be:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800c0c0:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800c0c4:	d102      	bne.n	800c0cc <HAL_RCCEx_GetPeriphCLKFreq+0x660>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 800c0c6:	4b55      	ldr	r3, [pc, #340]	; (800c21c <HAL_RCCEx_GetPeriphCLKFreq+0x7b0>)
 800c0c8:	63fb      	str	r3, [r7, #60]	; 0x3c
 800c0ca:	e010      	b.n	800c0ee <HAL_RCCEx_GetPeriphCLKFreq+0x682>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 800c0cc:	4b51      	ldr	r3, [pc, #324]	; (800c214 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 800c0ce:	681b      	ldr	r3, [r3, #0]
 800c0d0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800c0d4:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800c0d8:	d106      	bne.n	800c0e8 <HAL_RCCEx_GetPeriphCLKFreq+0x67c>
 800c0da:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800c0dc:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800c0e0:	d102      	bne.n	800c0e8 <HAL_RCCEx_GetPeriphCLKFreq+0x67c>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 800c0e2:	4b4f      	ldr	r3, [pc, #316]	; (800c220 <HAL_RCCEx_GetPeriphCLKFreq+0x7b4>)
 800c0e4:	63fb      	str	r3, [r7, #60]	; 0x3c
 800c0e6:	e002      	b.n	800c0ee <HAL_RCCEx_GetPeriphCLKFreq+0x682>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 800c0e8:	2300      	movs	r3, #0
 800c0ea:	63fb      	str	r3, [r7, #60]	; 0x3c
        }

        break;
 800c0ec:	e235      	b.n	800c55a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 800c0ee:	e234      	b.n	800c55a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case (RCC_SPI123CLKSOURCE_PIN): /* External clock is the clock source for I2S */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 800c0f0:	4b4c      	ldr	r3, [pc, #304]	; (800c224 <HAL_RCCEx_GetPeriphCLKFreq+0x7b8>)
 800c0f2:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800c0f4:	e231      	b.n	800c55a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      default :
      {
        frequency = 0;
 800c0f6:	2300      	movs	r3, #0
 800c0f8:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800c0fa:	e22e      	b.n	800c55a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SPI45)
 800c0fc:	e9d7 2300 	ldrd	r2, r3, [r7]
 800c100:	f5a2 5100 	sub.w	r1, r2, #8192	; 0x2000
 800c104:	430b      	orrs	r3, r1
 800c106:	f040 808f 	bne.w	800c228 <HAL_RCCEx_GetPeriphCLKFreq+0x7bc>
  {
    /* Get SPI45 clock source */
    srcclk = __HAL_RCC_GET_SPI45_SOURCE();
 800c10a:	4b42      	ldr	r3, [pc, #264]	; (800c214 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 800c10c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800c10e:	f403 23e0 	and.w	r3, r3, #458752	; 0x70000
 800c112:	63bb      	str	r3, [r7, #56]	; 0x38
    switch (srcclk)
 800c114:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c116:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800c11a:	d06b      	beq.n	800c1f4 <HAL_RCCEx_GetPeriphCLKFreq+0x788>
 800c11c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c11e:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800c122:	d874      	bhi.n	800c20e <HAL_RCCEx_GetPeriphCLKFreq+0x7a2>
 800c124:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c126:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 800c12a:	d056      	beq.n	800c1da <HAL_RCCEx_GetPeriphCLKFreq+0x76e>
 800c12c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c12e:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 800c132:	d86c      	bhi.n	800c20e <HAL_RCCEx_GetPeriphCLKFreq+0x7a2>
 800c134:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c136:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 800c13a:	d03b      	beq.n	800c1b4 <HAL_RCCEx_GetPeriphCLKFreq+0x748>
 800c13c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c13e:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 800c142:	d864      	bhi.n	800c20e <HAL_RCCEx_GetPeriphCLKFreq+0x7a2>
 800c144:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c146:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800c14a:	d021      	beq.n	800c190 <HAL_RCCEx_GetPeriphCLKFreq+0x724>
 800c14c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c14e:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800c152:	d85c      	bhi.n	800c20e <HAL_RCCEx_GetPeriphCLKFreq+0x7a2>
 800c154:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c156:	2b00      	cmp	r3, #0
 800c158:	d004      	beq.n	800c164 <HAL_RCCEx_GetPeriphCLKFreq+0x6f8>
 800c15a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c15c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800c160:	d004      	beq.n	800c16c <HAL_RCCEx_GetPeriphCLKFreq+0x700>
 800c162:	e054      	b.n	800c20e <HAL_RCCEx_GetPeriphCLKFreq+0x7a2>
    {
      case RCC_SPI45CLKSOURCE_PCLK2: /* CD/D2 PCLK2 is the clock source for SPI4/5 */
      {
        frequency = HAL_RCC_GetPCLK1Freq();
 800c164:	f7fe fa30 	bl	800a5c8 <HAL_RCC_GetPCLK1Freq>
 800c168:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 800c16a:	e1f6      	b.n	800c55a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800c16c:	4b29      	ldr	r3, [pc, #164]	; (800c214 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 800c16e:	681b      	ldr	r3, [r3, #0]
 800c170:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800c174:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800c178:	d107      	bne.n	800c18a <HAL_RCCEx_GetPeriphCLKFreq+0x71e>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800c17a:	f107 0318 	add.w	r3, r7, #24
 800c17e:	4618      	mov	r0, r3
 800c180:	f000 fa0a 	bl	800c598 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 800c184:	69fb      	ldr	r3, [r7, #28]
 800c186:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800c188:	e1e7      	b.n	800c55a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800c18a:	2300      	movs	r3, #0
 800c18c:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800c18e:	e1e4      	b.n	800c55a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI45CLKSOURCE_PLL3: /* PLL3 is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800c190:	4b20      	ldr	r3, [pc, #128]	; (800c214 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 800c192:	681b      	ldr	r3, [r3, #0]
 800c194:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800c198:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800c19c:	d107      	bne.n	800c1ae <HAL_RCCEx_GetPeriphCLKFreq+0x742>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800c19e:	f107 030c 	add.w	r3, r7, #12
 800c1a2:	4618      	mov	r0, r3
 800c1a4:	f000 fb4c 	bl	800c840 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 800c1a8:	693b      	ldr	r3, [r7, #16]
 800c1aa:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800c1ac:	e1d5      	b.n	800c55a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800c1ae:	2300      	movs	r3, #0
 800c1b0:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800c1b2:	e1d2      	b.n	800c55a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI45CLKSOURCE_HSI: /* HSI is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 800c1b4:	4b17      	ldr	r3, [pc, #92]	; (800c214 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 800c1b6:	681b      	ldr	r3, [r3, #0]
 800c1b8:	f003 0304 	and.w	r3, r3, #4
 800c1bc:	2b04      	cmp	r3, #4
 800c1be:	d109      	bne.n	800c1d4 <HAL_RCCEx_GetPeriphCLKFreq+0x768>
        {
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800c1c0:	4b14      	ldr	r3, [pc, #80]	; (800c214 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 800c1c2:	681b      	ldr	r3, [r3, #0]
 800c1c4:	08db      	lsrs	r3, r3, #3
 800c1c6:	f003 0303 	and.w	r3, r3, #3
 800c1ca:	4a13      	ldr	r2, [pc, #76]	; (800c218 <HAL_RCCEx_GetPeriphCLKFreq+0x7ac>)
 800c1cc:	fa22 f303 	lsr.w	r3, r2, r3
 800c1d0:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800c1d2:	e1c2      	b.n	800c55a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800c1d4:	2300      	movs	r3, #0
 800c1d6:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800c1d8:	e1bf      	b.n	800c55a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI45CLKSOURCE_CSI: /* CSI is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY))
 800c1da:	4b0e      	ldr	r3, [pc, #56]	; (800c214 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 800c1dc:	681b      	ldr	r3, [r3, #0]
 800c1de:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800c1e2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800c1e6:	d102      	bne.n	800c1ee <HAL_RCCEx_GetPeriphCLKFreq+0x782>
        {
          frequency = CSI_VALUE;
 800c1e8:	4b0c      	ldr	r3, [pc, #48]	; (800c21c <HAL_RCCEx_GetPeriphCLKFreq+0x7b0>)
 800c1ea:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800c1ec:	e1b5      	b.n	800c55a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800c1ee:	2300      	movs	r3, #0
 800c1f0:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800c1f2:	e1b2      	b.n	800c55a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI45CLKSOURCE_HSE: /* HSE is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 800c1f4:	4b07      	ldr	r3, [pc, #28]	; (800c214 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 800c1f6:	681b      	ldr	r3, [r3, #0]
 800c1f8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800c1fc:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800c200:	d102      	bne.n	800c208 <HAL_RCCEx_GetPeriphCLKFreq+0x79c>
        {
          frequency = HSE_VALUE;
 800c202:	4b07      	ldr	r3, [pc, #28]	; (800c220 <HAL_RCCEx_GetPeriphCLKFreq+0x7b4>)
 800c204:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800c206:	e1a8      	b.n	800c55a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800c208:	2300      	movs	r3, #0
 800c20a:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800c20c:	e1a5      	b.n	800c55a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      default :
      {
        frequency = 0;
 800c20e:	2300      	movs	r3, #0
 800c210:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800c212:	e1a2      	b.n	800c55a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 800c214:	58024400 	.word	0x58024400
 800c218:	03d09000 	.word	0x03d09000
 800c21c:	003d0900 	.word	0x003d0900
 800c220:	007f1b10 	.word	0x007f1b10
 800c224:	00bb8000 	.word	0x00bb8000
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_ADC)
 800c228:	e9d7 2300 	ldrd	r2, r3, [r7]
 800c22c:	f5a2 2100 	sub.w	r1, r2, #524288	; 0x80000
 800c230:	430b      	orrs	r3, r1
 800c232:	d173      	bne.n	800c31c <HAL_RCCEx_GetPeriphCLKFreq+0x8b0>
  {
    /* Get ADC clock source */
    srcclk = __HAL_RCC_GET_ADC_SOURCE();
 800c234:	4b9c      	ldr	r3, [pc, #624]	; (800c4a8 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800c236:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800c238:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 800c23c:	63bb      	str	r3, [r7, #56]	; 0x38

    switch (srcclk)
 800c23e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c240:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800c244:	d02f      	beq.n	800c2a6 <HAL_RCCEx_GetPeriphCLKFreq+0x83a>
 800c246:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c248:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800c24c:	d863      	bhi.n	800c316 <HAL_RCCEx_GetPeriphCLKFreq+0x8aa>
 800c24e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c250:	2b00      	cmp	r3, #0
 800c252:	d004      	beq.n	800c25e <HAL_RCCEx_GetPeriphCLKFreq+0x7f2>
 800c254:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c256:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800c25a:	d012      	beq.n	800c282 <HAL_RCCEx_GetPeriphCLKFreq+0x816>
 800c25c:	e05b      	b.n	800c316 <HAL_RCCEx_GetPeriphCLKFreq+0x8aa>
    {
      case RCC_ADCCLKSOURCE_PLL2:
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800c25e:	4b92      	ldr	r3, [pc, #584]	; (800c4a8 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800c260:	681b      	ldr	r3, [r3, #0]
 800c262:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800c266:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800c26a:	d107      	bne.n	800c27c <HAL_RCCEx_GetPeriphCLKFreq+0x810>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800c26c:	f107 0318 	add.w	r3, r7, #24
 800c270:	4618      	mov	r0, r3
 800c272:	f000 f991 	bl	800c598 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 800c276:	69bb      	ldr	r3, [r7, #24]
 800c278:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800c27a:	e16e      	b.n	800c55a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800c27c:	2300      	movs	r3, #0
 800c27e:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800c280:	e16b      	b.n	800c55a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_ADCCLKSOURCE_PLL3:
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800c282:	4b89      	ldr	r3, [pc, #548]	; (800c4a8 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800c284:	681b      	ldr	r3, [r3, #0]
 800c286:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800c28a:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800c28e:	d107      	bne.n	800c2a0 <HAL_RCCEx_GetPeriphCLKFreq+0x834>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800c290:	f107 030c 	add.w	r3, r7, #12
 800c294:	4618      	mov	r0, r3
 800c296:	f000 fad3 	bl	800c840 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_R_Frequency;
 800c29a:	697b      	ldr	r3, [r7, #20]
 800c29c:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800c29e:	e15c      	b.n	800c55a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800c2a0:	2300      	movs	r3, #0
 800c2a2:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800c2a4:	e159      	b.n	800c55a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_ADCCLKSOURCE_CLKP:
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 800c2a6:	4b80      	ldr	r3, [pc, #512]	; (800c4a8 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800c2a8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800c2aa:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800c2ae:	637b      	str	r3, [r7, #52]	; 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 800c2b0:	4b7d      	ldr	r3, [pc, #500]	; (800c4a8 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800c2b2:	681b      	ldr	r3, [r3, #0]
 800c2b4:	f003 0304 	and.w	r3, r3, #4
 800c2b8:	2b04      	cmp	r3, #4
 800c2ba:	d10c      	bne.n	800c2d6 <HAL_RCCEx_GetPeriphCLKFreq+0x86a>
 800c2bc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800c2be:	2b00      	cmp	r3, #0
 800c2c0:	d109      	bne.n	800c2d6 <HAL_RCCEx_GetPeriphCLKFreq+0x86a>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800c2c2:	4b79      	ldr	r3, [pc, #484]	; (800c4a8 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800c2c4:	681b      	ldr	r3, [r3, #0]
 800c2c6:	08db      	lsrs	r3, r3, #3
 800c2c8:	f003 0303 	and.w	r3, r3, #3
 800c2cc:	4a77      	ldr	r2, [pc, #476]	; (800c4ac <HAL_RCCEx_GetPeriphCLKFreq+0xa40>)
 800c2ce:	fa22 f303 	lsr.w	r3, r2, r3
 800c2d2:	63fb      	str	r3, [r7, #60]	; 0x3c
 800c2d4:	e01e      	b.n	800c314 <HAL_RCCEx_GetPeriphCLKFreq+0x8a8>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 800c2d6:	4b74      	ldr	r3, [pc, #464]	; (800c4a8 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800c2d8:	681b      	ldr	r3, [r3, #0]
 800c2da:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800c2de:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800c2e2:	d106      	bne.n	800c2f2 <HAL_RCCEx_GetPeriphCLKFreq+0x886>
 800c2e4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800c2e6:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800c2ea:	d102      	bne.n	800c2f2 <HAL_RCCEx_GetPeriphCLKFreq+0x886>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 800c2ec:	4b70      	ldr	r3, [pc, #448]	; (800c4b0 <HAL_RCCEx_GetPeriphCLKFreq+0xa44>)
 800c2ee:	63fb      	str	r3, [r7, #60]	; 0x3c
 800c2f0:	e010      	b.n	800c314 <HAL_RCCEx_GetPeriphCLKFreq+0x8a8>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 800c2f2:	4b6d      	ldr	r3, [pc, #436]	; (800c4a8 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800c2f4:	681b      	ldr	r3, [r3, #0]
 800c2f6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800c2fa:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800c2fe:	d106      	bne.n	800c30e <HAL_RCCEx_GetPeriphCLKFreq+0x8a2>
 800c300:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800c302:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800c306:	d102      	bne.n	800c30e <HAL_RCCEx_GetPeriphCLKFreq+0x8a2>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 800c308:	4b6a      	ldr	r3, [pc, #424]	; (800c4b4 <HAL_RCCEx_GetPeriphCLKFreq+0xa48>)
 800c30a:	63fb      	str	r3, [r7, #60]	; 0x3c
 800c30c:	e002      	b.n	800c314 <HAL_RCCEx_GetPeriphCLKFreq+0x8a8>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 800c30e:	2300      	movs	r3, #0
 800c310:	63fb      	str	r3, [r7, #60]	; 0x3c
        }

        break;
 800c312:	e122      	b.n	800c55a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 800c314:	e121      	b.n	800c55a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      default :
      {
        frequency = 0;
 800c316:	2300      	movs	r3, #0
 800c318:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800c31a:	e11e      	b.n	800c55a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SDMMC)
 800c31c:	e9d7 2300 	ldrd	r2, r3, [r7]
 800c320:	f5a2 3180 	sub.w	r1, r2, #65536	; 0x10000
 800c324:	430b      	orrs	r3, r1
 800c326:	d133      	bne.n	800c390 <HAL_RCCEx_GetPeriphCLKFreq+0x924>
  {
    /* Get SDMMC clock source */
    srcclk = __HAL_RCC_GET_SDMMC_SOURCE();
 800c328:	4b5f      	ldr	r3, [pc, #380]	; (800c4a8 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800c32a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800c32c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800c330:	63bb      	str	r3, [r7, #56]	; 0x38

    switch (srcclk)
 800c332:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c334:	2b00      	cmp	r3, #0
 800c336:	d004      	beq.n	800c342 <HAL_RCCEx_GetPeriphCLKFreq+0x8d6>
 800c338:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c33a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800c33e:	d012      	beq.n	800c366 <HAL_RCCEx_GetPeriphCLKFreq+0x8fa>
 800c340:	e023      	b.n	800c38a <HAL_RCCEx_GetPeriphCLKFreq+0x91e>
    {
      case RCC_SDMMCCLKSOURCE_PLL: /* PLL1 is the clock source for SDMMC */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 800c342:	4b59      	ldr	r3, [pc, #356]	; (800c4a8 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800c344:	681b      	ldr	r3, [r3, #0]
 800c346:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800c34a:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800c34e:	d107      	bne.n	800c360 <HAL_RCCEx_GetPeriphCLKFreq+0x8f4>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800c350:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800c354:	4618      	mov	r0, r3
 800c356:	f000 fbc7 	bl	800cae8 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 800c35a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c35c:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800c35e:	e0fc      	b.n	800c55a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800c360:	2300      	movs	r3, #0
 800c362:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800c364:	e0f9      	b.n	800c55a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is the clock source for SDMMC */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800c366:	4b50      	ldr	r3, [pc, #320]	; (800c4a8 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800c368:	681b      	ldr	r3, [r3, #0]
 800c36a:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800c36e:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800c372:	d107      	bne.n	800c384 <HAL_RCCEx_GetPeriphCLKFreq+0x918>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800c374:	f107 0318 	add.w	r3, r7, #24
 800c378:	4618      	mov	r0, r3
 800c37a:	f000 f90d 	bl	800c598 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_R_Frequency;
 800c37e:	6a3b      	ldr	r3, [r7, #32]
 800c380:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800c382:	e0ea      	b.n	800c55a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800c384:	2300      	movs	r3, #0
 800c386:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800c388:	e0e7      	b.n	800c55a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      default :
      {
        frequency = 0;
 800c38a:	2300      	movs	r3, #0
 800c38c:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800c38e:	e0e4      	b.n	800c55a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SPI6)
 800c390:	e9d7 2300 	ldrd	r2, r3, [r7]
 800c394:	f5a2 4180 	sub.w	r1, r2, #16384	; 0x4000
 800c398:	430b      	orrs	r3, r1
 800c39a:	f040 808d 	bne.w	800c4b8 <HAL_RCCEx_GetPeriphCLKFreq+0xa4c>
  {
    /* Get SPI6 clock source */
    srcclk = __HAL_RCC_GET_SPI6_SOURCE();
 800c39e:	4b42      	ldr	r3, [pc, #264]	; (800c4a8 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800c3a0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800c3a2:	f003 43e0 	and.w	r3, r3, #1879048192	; 0x70000000
 800c3a6:	63bb      	str	r3, [r7, #56]	; 0x38

    switch (srcclk)
 800c3a8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c3aa:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800c3ae:	d06b      	beq.n	800c488 <HAL_RCCEx_GetPeriphCLKFreq+0xa1c>
 800c3b0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c3b2:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800c3b6:	d874      	bhi.n	800c4a2 <HAL_RCCEx_GetPeriphCLKFreq+0xa36>
 800c3b8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c3ba:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800c3be:	d056      	beq.n	800c46e <HAL_RCCEx_GetPeriphCLKFreq+0xa02>
 800c3c0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c3c2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800c3c6:	d86c      	bhi.n	800c4a2 <HAL_RCCEx_GetPeriphCLKFreq+0xa36>
 800c3c8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c3ca:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 800c3ce:	d03b      	beq.n	800c448 <HAL_RCCEx_GetPeriphCLKFreq+0x9dc>
 800c3d0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c3d2:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 800c3d6:	d864      	bhi.n	800c4a2 <HAL_RCCEx_GetPeriphCLKFreq+0xa36>
 800c3d8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c3da:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800c3de:	d021      	beq.n	800c424 <HAL_RCCEx_GetPeriphCLKFreq+0x9b8>
 800c3e0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c3e2:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800c3e6:	d85c      	bhi.n	800c4a2 <HAL_RCCEx_GetPeriphCLKFreq+0xa36>
 800c3e8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c3ea:	2b00      	cmp	r3, #0
 800c3ec:	d004      	beq.n	800c3f8 <HAL_RCCEx_GetPeriphCLKFreq+0x98c>
 800c3ee:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c3f0:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800c3f4:	d004      	beq.n	800c400 <HAL_RCCEx_GetPeriphCLKFreq+0x994>
 800c3f6:	e054      	b.n	800c4a2 <HAL_RCCEx_GetPeriphCLKFreq+0xa36>
    {
      case RCC_SPI6CLKSOURCE_D3PCLK1: /* D3PCLK1 (PCLK4) is the clock source for SPI6 */
      {
        frequency = HAL_RCCEx_GetD3PCLK1Freq();
 800c3f8:	f000 f8b8 	bl	800c56c <HAL_RCCEx_GetD3PCLK1Freq>
 800c3fc:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 800c3fe:	e0ac      	b.n	800c55a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800c400:	4b29      	ldr	r3, [pc, #164]	; (800c4a8 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800c402:	681b      	ldr	r3, [r3, #0]
 800c404:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800c408:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800c40c:	d107      	bne.n	800c41e <HAL_RCCEx_GetPeriphCLKFreq+0x9b2>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800c40e:	f107 0318 	add.w	r3, r7, #24
 800c412:	4618      	mov	r0, r3
 800c414:	f000 f8c0 	bl	800c598 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 800c418:	69fb      	ldr	r3, [r7, #28]
 800c41a:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800c41c:	e09d      	b.n	800c55a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800c41e:	2300      	movs	r3, #0
 800c420:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800c422:	e09a      	b.n	800c55a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI6CLKSOURCE_PLL3: /* PLL3 is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800c424:	4b20      	ldr	r3, [pc, #128]	; (800c4a8 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800c426:	681b      	ldr	r3, [r3, #0]
 800c428:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800c42c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800c430:	d107      	bne.n	800c442 <HAL_RCCEx_GetPeriphCLKFreq+0x9d6>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800c432:	f107 030c 	add.w	r3, r7, #12
 800c436:	4618      	mov	r0, r3
 800c438:	f000 fa02 	bl	800c840 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 800c43c:	693b      	ldr	r3, [r7, #16]
 800c43e:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800c440:	e08b      	b.n	800c55a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800c442:	2300      	movs	r3, #0
 800c444:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800c446:	e088      	b.n	800c55a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI6CLKSOURCE_HSI: /* HSI is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 800c448:	4b17      	ldr	r3, [pc, #92]	; (800c4a8 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800c44a:	681b      	ldr	r3, [r3, #0]
 800c44c:	f003 0304 	and.w	r3, r3, #4
 800c450:	2b04      	cmp	r3, #4
 800c452:	d109      	bne.n	800c468 <HAL_RCCEx_GetPeriphCLKFreq+0x9fc>
        {
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800c454:	4b14      	ldr	r3, [pc, #80]	; (800c4a8 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800c456:	681b      	ldr	r3, [r3, #0]
 800c458:	08db      	lsrs	r3, r3, #3
 800c45a:	f003 0303 	and.w	r3, r3, #3
 800c45e:	4a13      	ldr	r2, [pc, #76]	; (800c4ac <HAL_RCCEx_GetPeriphCLKFreq+0xa40>)
 800c460:	fa22 f303 	lsr.w	r3, r2, r3
 800c464:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800c466:	e078      	b.n	800c55a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800c468:	2300      	movs	r3, #0
 800c46a:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800c46c:	e075      	b.n	800c55a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI6CLKSOURCE_CSI: /* CSI is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY))
 800c46e:	4b0e      	ldr	r3, [pc, #56]	; (800c4a8 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800c470:	681b      	ldr	r3, [r3, #0]
 800c472:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800c476:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800c47a:	d102      	bne.n	800c482 <HAL_RCCEx_GetPeriphCLKFreq+0xa16>
        {
          frequency = CSI_VALUE;
 800c47c:	4b0c      	ldr	r3, [pc, #48]	; (800c4b0 <HAL_RCCEx_GetPeriphCLKFreq+0xa44>)
 800c47e:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800c480:	e06b      	b.n	800c55a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800c482:	2300      	movs	r3, #0
 800c484:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800c486:	e068      	b.n	800c55a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI6CLKSOURCE_HSE: /* HSE is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 800c488:	4b07      	ldr	r3, [pc, #28]	; (800c4a8 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800c48a:	681b      	ldr	r3, [r3, #0]
 800c48c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800c490:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800c494:	d102      	bne.n	800c49c <HAL_RCCEx_GetPeriphCLKFreq+0xa30>
        {
          frequency = HSE_VALUE;
 800c496:	4b07      	ldr	r3, [pc, #28]	; (800c4b4 <HAL_RCCEx_GetPeriphCLKFreq+0xa48>)
 800c498:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800c49a:	e05e      	b.n	800c55a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800c49c:	2300      	movs	r3, #0
 800c49e:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800c4a0:	e05b      	b.n	800c55a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
        break;
      }
#endif /* RCC_SPI6CLKSOURCE_PIN */
      default :
      {
        frequency = 0;
 800c4a2:	2300      	movs	r3, #0
 800c4a4:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800c4a6:	e058      	b.n	800c55a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 800c4a8:	58024400 	.word	0x58024400
 800c4ac:	03d09000 	.word	0x03d09000
 800c4b0:	003d0900 	.word	0x003d0900
 800c4b4:	007f1b10 	.word	0x007f1b10
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_FDCAN)
 800c4b8:	e9d7 2300 	ldrd	r2, r3, [r7]
 800c4bc:	f5a2 4100 	sub.w	r1, r2, #32768	; 0x8000
 800c4c0:	430b      	orrs	r3, r1
 800c4c2:	d148      	bne.n	800c556 <HAL_RCCEx_GetPeriphCLKFreq+0xaea>
  {
    /* Get FDCAN clock source */
    srcclk = __HAL_RCC_GET_FDCAN_SOURCE();
 800c4c4:	4b27      	ldr	r3, [pc, #156]	; (800c564 <HAL_RCCEx_GetPeriphCLKFreq+0xaf8>)
 800c4c6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800c4c8:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800c4cc:	63bb      	str	r3, [r7, #56]	; 0x38

    switch (srcclk)
 800c4ce:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c4d0:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800c4d4:	d02a      	beq.n	800c52c <HAL_RCCEx_GetPeriphCLKFreq+0xac0>
 800c4d6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c4d8:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800c4dc:	d838      	bhi.n	800c550 <HAL_RCCEx_GetPeriphCLKFreq+0xae4>
 800c4de:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c4e0:	2b00      	cmp	r3, #0
 800c4e2:	d004      	beq.n	800c4ee <HAL_RCCEx_GetPeriphCLKFreq+0xa82>
 800c4e4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c4e6:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800c4ea:	d00d      	beq.n	800c508 <HAL_RCCEx_GetPeriphCLKFreq+0xa9c>
 800c4ec:	e030      	b.n	800c550 <HAL_RCCEx_GetPeriphCLKFreq+0xae4>
    {
      case RCC_FDCANCLKSOURCE_HSE: /* HSE is the clock source for FDCAN */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 800c4ee:	4b1d      	ldr	r3, [pc, #116]	; (800c564 <HAL_RCCEx_GetPeriphCLKFreq+0xaf8>)
 800c4f0:	681b      	ldr	r3, [r3, #0]
 800c4f2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800c4f6:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800c4fa:	d102      	bne.n	800c502 <HAL_RCCEx_GetPeriphCLKFreq+0xa96>
        {
          frequency = HSE_VALUE;
 800c4fc:	4b1a      	ldr	r3, [pc, #104]	; (800c568 <HAL_RCCEx_GetPeriphCLKFreq+0xafc>)
 800c4fe:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800c500:	e02b      	b.n	800c55a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800c502:	2300      	movs	r3, #0
 800c504:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800c506:	e028      	b.n	800c55a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_FDCANCLKSOURCE_PLL: /* PLL is the clock source for FDCAN */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 800c508:	4b16      	ldr	r3, [pc, #88]	; (800c564 <HAL_RCCEx_GetPeriphCLKFreq+0xaf8>)
 800c50a:	681b      	ldr	r3, [r3, #0]
 800c50c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800c510:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800c514:	d107      	bne.n	800c526 <HAL_RCCEx_GetPeriphCLKFreq+0xaba>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800c516:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800c51a:	4618      	mov	r0, r3
 800c51c:	f000 fae4 	bl	800cae8 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 800c520:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c522:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800c524:	e019      	b.n	800c55a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800c526:	2300      	movs	r3, #0
 800c528:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800c52a:	e016      	b.n	800c55a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is the clock source for FDCAN */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800c52c:	4b0d      	ldr	r3, [pc, #52]	; (800c564 <HAL_RCCEx_GetPeriphCLKFreq+0xaf8>)
 800c52e:	681b      	ldr	r3, [r3, #0]
 800c530:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800c534:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800c538:	d107      	bne.n	800c54a <HAL_RCCEx_GetPeriphCLKFreq+0xade>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800c53a:	f107 0318 	add.w	r3, r7, #24
 800c53e:	4618      	mov	r0, r3
 800c540:	f000 f82a 	bl	800c598 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 800c544:	69fb      	ldr	r3, [r7, #28]
 800c546:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800c548:	e007      	b.n	800c55a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800c54a:	2300      	movs	r3, #0
 800c54c:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800c54e:	e004      	b.n	800c55a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      default :
      {
        frequency = 0;
 800c550:	2300      	movs	r3, #0
 800c552:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800c554:	e001      	b.n	800c55a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }
  else
  {
    frequency = 0;
 800c556:	2300      	movs	r3, #0
 800c558:	63fb      	str	r3, [r7, #60]	; 0x3c
  }

  return frequency;
 800c55a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 800c55c:	4618      	mov	r0, r3
 800c55e:	3740      	adds	r7, #64	; 0x40
 800c560:	46bd      	mov	sp, r7
 800c562:	bd80      	pop	{r7, pc}
 800c564:	58024400 	.word	0x58024400
 800c568:	007f1b10 	.word	0x007f1b10

0800c56c <HAL_RCCEx_GetD3PCLK1Freq>:
  * @note   Each time D3PCLK1 changes, this function must be called to update the
  *         right D3PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval D3PCLK1 frequency
  */
uint32_t HAL_RCCEx_GetD3PCLK1Freq(void)
{
 800c56c:	b580      	push	{r7, lr}
 800c56e:	af00      	add	r7, sp, #0
#if defined(RCC_D3CFGR_D3PPRE)
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->D3CFGR & RCC_D3CFGR_D3PPRE) >> RCC_D3CFGR_D3PPRE_Pos] & 0x1FU));
 800c570:	f7fd fffa 	bl	800a568 <HAL_RCC_GetHCLKFreq>
 800c574:	4602      	mov	r2, r0
 800c576:	4b06      	ldr	r3, [pc, #24]	; (800c590 <HAL_RCCEx_GetD3PCLK1Freq+0x24>)
 800c578:	6a1b      	ldr	r3, [r3, #32]
 800c57a:	091b      	lsrs	r3, r3, #4
 800c57c:	f003 0307 	and.w	r3, r3, #7
 800c580:	4904      	ldr	r1, [pc, #16]	; (800c594 <HAL_RCCEx_GetD3PCLK1Freq+0x28>)
 800c582:	5ccb      	ldrb	r3, [r1, r3]
 800c584:	f003 031f 	and.w	r3, r3, #31
 800c588:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE) >> RCC_SRDCFGR_SRDPPRE_Pos] & 0x1FU));
#endif
}
 800c58c:	4618      	mov	r0, r3
 800c58e:	bd80      	pop	{r7, pc}
 800c590:	58024400 	.word	0x58024400
 800c594:	0801ebe0 	.word	0x0801ebe0

0800c598 <HAL_RCCEx_GetPLL2ClockFreq>:
  *         right PLL2CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL2_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL2ClockFreq(PLL2_ClocksTypeDef *PLL2_Clocks)
{
 800c598:	b480      	push	{r7}
 800c59a:	b089      	sub	sp, #36	; 0x24
 800c59c:	af00      	add	r7, sp, #0
 800c59e:	6078      	str	r0, [r7, #4]
  float_t fracn2, pll2vco;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL2M) * PLL2N
     PLL2xCLK = PLL2_VCO / PLL2x
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 800c5a0:	4ba1      	ldr	r3, [pc, #644]	; (800c828 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800c5a2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800c5a4:	f003 0303 	and.w	r3, r3, #3
 800c5a8:	61bb      	str	r3, [r7, #24]
  pll2m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM2) >> 12);
 800c5aa:	4b9f      	ldr	r3, [pc, #636]	; (800c828 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800c5ac:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800c5ae:	0b1b      	lsrs	r3, r3, #12
 800c5b0:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800c5b4:	617b      	str	r3, [r7, #20]
  pll2fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL2FRACEN) >> RCC_PLLCFGR_PLL2FRACEN_Pos;
 800c5b6:	4b9c      	ldr	r3, [pc, #624]	; (800c828 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800c5b8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c5ba:	091b      	lsrs	r3, r3, #4
 800c5bc:	f003 0301 	and.w	r3, r3, #1
 800c5c0:	613b      	str	r3, [r7, #16]
  fracn2 = (float_t)(uint32_t)(pll2fracen * ((RCC->PLL2FRACR & RCC_PLL2FRACR_FRACN2) >> 3));
 800c5c2:	4b99      	ldr	r3, [pc, #612]	; (800c828 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800c5c4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800c5c6:	08db      	lsrs	r3, r3, #3
 800c5c8:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800c5cc:	693a      	ldr	r2, [r7, #16]
 800c5ce:	fb02 f303 	mul.w	r3, r2, r3
 800c5d2:	ee07 3a90 	vmov	s15, r3
 800c5d6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800c5da:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll2m != 0U)
 800c5de:	697b      	ldr	r3, [r7, #20]
 800c5e0:	2b00      	cmp	r3, #0
 800c5e2:	f000 8111 	beq.w	800c808 <HAL_RCCEx_GetPLL2ClockFreq+0x270>
  {
    switch (pllsource)
 800c5e6:	69bb      	ldr	r3, [r7, #24]
 800c5e8:	2b02      	cmp	r3, #2
 800c5ea:	f000 8083 	beq.w	800c6f4 <HAL_RCCEx_GetPLL2ClockFreq+0x15c>
 800c5ee:	69bb      	ldr	r3, [r7, #24]
 800c5f0:	2b02      	cmp	r3, #2
 800c5f2:	f200 80a1 	bhi.w	800c738 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
 800c5f6:	69bb      	ldr	r3, [r7, #24]
 800c5f8:	2b00      	cmp	r3, #0
 800c5fa:	d003      	beq.n	800c604 <HAL_RCCEx_GetPLL2ClockFreq+0x6c>
 800c5fc:	69bb      	ldr	r3, [r7, #24]
 800c5fe:	2b01      	cmp	r3, #1
 800c600:	d056      	beq.n	800c6b0 <HAL_RCCEx_GetPLL2ClockFreq+0x118>
 800c602:	e099      	b.n	800c738 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
    {

      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800c604:	4b88      	ldr	r3, [pc, #544]	; (800c828 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800c606:	681b      	ldr	r3, [r3, #0]
 800c608:	f003 0320 	and.w	r3, r3, #32
 800c60c:	2b00      	cmp	r3, #0
 800c60e:	d02d      	beq.n	800c66c <HAL_RCCEx_GetPLL2ClockFreq+0xd4>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800c610:	4b85      	ldr	r3, [pc, #532]	; (800c828 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800c612:	681b      	ldr	r3, [r3, #0]
 800c614:	08db      	lsrs	r3, r3, #3
 800c616:	f003 0303 	and.w	r3, r3, #3
 800c61a:	4a84      	ldr	r2, [pc, #528]	; (800c82c <HAL_RCCEx_GetPLL2ClockFreq+0x294>)
 800c61c:	fa22 f303 	lsr.w	r3, r2, r3
 800c620:	60bb      	str	r3, [r7, #8]
          pll2vco = ((float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 800c622:	68bb      	ldr	r3, [r7, #8]
 800c624:	ee07 3a90 	vmov	s15, r3
 800c628:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800c62c:	697b      	ldr	r3, [r7, #20]
 800c62e:	ee07 3a90 	vmov	s15, r3
 800c632:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800c636:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800c63a:	4b7b      	ldr	r3, [pc, #492]	; (800c828 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800c63c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c63e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800c642:	ee07 3a90 	vmov	s15, r3
 800c646:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800c64a:	ed97 6a03 	vldr	s12, [r7, #12]
 800c64e:	eddf 5a78 	vldr	s11, [pc, #480]	; 800c830 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800c652:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800c656:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800c65a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800c65e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800c662:	ee67 7a27 	vmul.f32	s15, s14, s15
 800c666:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
        }
        break;
 800c66a:	e087      	b.n	800c77c <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>
          pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 800c66c:	697b      	ldr	r3, [r7, #20]
 800c66e:	ee07 3a90 	vmov	s15, r3
 800c672:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800c676:	eddf 6a6f 	vldr	s13, [pc, #444]	; 800c834 <HAL_RCCEx_GetPLL2ClockFreq+0x29c>
 800c67a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800c67e:	4b6a      	ldr	r3, [pc, #424]	; (800c828 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800c680:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c682:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800c686:	ee07 3a90 	vmov	s15, r3
 800c68a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800c68e:	ed97 6a03 	vldr	s12, [r7, #12]
 800c692:	eddf 5a67 	vldr	s11, [pc, #412]	; 800c830 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800c696:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800c69a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800c69e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800c6a2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800c6a6:	ee67 7a27 	vmul.f32	s15, s14, s15
 800c6aa:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800c6ae:	e065      	b.n	800c77c <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 800c6b0:	697b      	ldr	r3, [r7, #20]
 800c6b2:	ee07 3a90 	vmov	s15, r3
 800c6b6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800c6ba:	eddf 6a5f 	vldr	s13, [pc, #380]	; 800c838 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 800c6be:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800c6c2:	4b59      	ldr	r3, [pc, #356]	; (800c828 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800c6c4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c6c6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800c6ca:	ee07 3a90 	vmov	s15, r3
 800c6ce:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800c6d2:	ed97 6a03 	vldr	s12, [r7, #12]
 800c6d6:	eddf 5a56 	vldr	s11, [pc, #344]	; 800c830 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800c6da:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800c6de:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800c6e2:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800c6e6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800c6ea:	ee67 7a27 	vmul.f32	s15, s14, s15
 800c6ee:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800c6f2:	e043      	b.n	800c77c <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 800c6f4:	697b      	ldr	r3, [r7, #20]
 800c6f6:	ee07 3a90 	vmov	s15, r3
 800c6fa:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800c6fe:	eddf 6a4f 	vldr	s13, [pc, #316]	; 800c83c <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>
 800c702:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800c706:	4b48      	ldr	r3, [pc, #288]	; (800c828 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800c708:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c70a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800c70e:	ee07 3a90 	vmov	s15, r3
 800c712:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800c716:	ed97 6a03 	vldr	s12, [r7, #12]
 800c71a:	eddf 5a45 	vldr	s11, [pc, #276]	; 800c830 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800c71e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800c722:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800c726:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800c72a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800c72e:	ee67 7a27 	vmul.f32	s15, s14, s15
 800c732:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800c736:	e021      	b.n	800c77c <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      default:
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 800c738:	697b      	ldr	r3, [r7, #20]
 800c73a:	ee07 3a90 	vmov	s15, r3
 800c73e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800c742:	eddf 6a3d 	vldr	s13, [pc, #244]	; 800c838 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 800c746:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800c74a:	4b37      	ldr	r3, [pc, #220]	; (800c828 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800c74c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c74e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800c752:	ee07 3a90 	vmov	s15, r3
 800c756:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800c75a:	ed97 6a03 	vldr	s12, [r7, #12]
 800c75e:	eddf 5a34 	vldr	s11, [pc, #208]	; 800c830 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800c762:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800c766:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800c76a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800c76e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800c772:	ee67 7a27 	vmul.f32	s15, s14, s15
 800c776:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800c77a:	bf00      	nop
    }
    PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_P2) >> 9)  + (float_t)1)) ;
 800c77c:	4b2a      	ldr	r3, [pc, #168]	; (800c828 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800c77e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c780:	0a5b      	lsrs	r3, r3, #9
 800c782:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800c786:	ee07 3a90 	vmov	s15, r3
 800c78a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800c78e:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800c792:	ee37 7a87 	vadd.f32	s14, s15, s14
 800c796:	edd7 6a07 	vldr	s13, [r7, #28]
 800c79a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800c79e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800c7a2:	ee17 2a90 	vmov	r2, s15
 800c7a6:	687b      	ldr	r3, [r7, #4]
 800c7a8:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_Q2) >> 16) + (float_t)1)) ;
 800c7aa:	4b1f      	ldr	r3, [pc, #124]	; (800c828 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800c7ac:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c7ae:	0c1b      	lsrs	r3, r3, #16
 800c7b0:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800c7b4:	ee07 3a90 	vmov	s15, r3
 800c7b8:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800c7bc:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800c7c0:	ee37 7a87 	vadd.f32	s14, s15, s14
 800c7c4:	edd7 6a07 	vldr	s13, [r7, #28]
 800c7c8:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800c7cc:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800c7d0:	ee17 2a90 	vmov	r2, s15
 800c7d4:	687b      	ldr	r3, [r7, #4]
 800c7d6:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_R2) >> 24) + (float_t)1)) ;
 800c7d8:	4b13      	ldr	r3, [pc, #76]	; (800c828 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800c7da:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c7dc:	0e1b      	lsrs	r3, r3, #24
 800c7de:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800c7e2:	ee07 3a90 	vmov	s15, r3
 800c7e6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800c7ea:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800c7ee:	ee37 7a87 	vadd.f32	s14, s15, s14
 800c7f2:	edd7 6a07 	vldr	s13, [r7, #28]
 800c7f6:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800c7fa:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800c7fe:	ee17 2a90 	vmov	r2, s15
 800c802:	687b      	ldr	r3, [r7, #4]
 800c804:	609a      	str	r2, [r3, #8]
  {
    PLL2_Clocks->PLL2_P_Frequency = 0U;
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
    PLL2_Clocks->PLL2_R_Frequency = 0U;
  }
}
 800c806:	e008      	b.n	800c81a <HAL_RCCEx_GetPLL2ClockFreq+0x282>
    PLL2_Clocks->PLL2_P_Frequency = 0U;
 800c808:	687b      	ldr	r3, [r7, #4]
 800c80a:	2200      	movs	r2, #0
 800c80c:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
 800c80e:	687b      	ldr	r3, [r7, #4]
 800c810:	2200      	movs	r2, #0
 800c812:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = 0U;
 800c814:	687b      	ldr	r3, [r7, #4]
 800c816:	2200      	movs	r2, #0
 800c818:	609a      	str	r2, [r3, #8]
}
 800c81a:	bf00      	nop
 800c81c:	3724      	adds	r7, #36	; 0x24
 800c81e:	46bd      	mov	sp, r7
 800c820:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c824:	4770      	bx	lr
 800c826:	bf00      	nop
 800c828:	58024400 	.word	0x58024400
 800c82c:	03d09000 	.word	0x03d09000
 800c830:	46000000 	.word	0x46000000
 800c834:	4c742400 	.word	0x4c742400
 800c838:	4a742400 	.word	0x4a742400
 800c83c:	4afe3620 	.word	0x4afe3620

0800c840 <HAL_RCCEx_GetPLL3ClockFreq>:
  *         right PLL3CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL3_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL3ClockFreq(PLL3_ClocksTypeDef *PLL3_Clocks)
{
 800c840:	b480      	push	{r7}
 800c842:	b089      	sub	sp, #36	; 0x24
 800c844:	af00      	add	r7, sp, #0
 800c846:	6078      	str	r0, [r7, #4]
  float_t fracn3, pll3vco;

  /* PLL3_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL3M) * PLL3N
     PLL3xCLK = PLL3_VCO / PLLxR
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 800c848:	4ba1      	ldr	r3, [pc, #644]	; (800cad0 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800c84a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800c84c:	f003 0303 	and.w	r3, r3, #3
 800c850:	61bb      	str	r3, [r7, #24]
  pll3m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM3) >> 20)  ;
 800c852:	4b9f      	ldr	r3, [pc, #636]	; (800cad0 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800c854:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800c856:	0d1b      	lsrs	r3, r3, #20
 800c858:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800c85c:	617b      	str	r3, [r7, #20]
  pll3fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL3FRACEN) >> RCC_PLLCFGR_PLL3FRACEN_Pos;
 800c85e:	4b9c      	ldr	r3, [pc, #624]	; (800cad0 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800c860:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c862:	0a1b      	lsrs	r3, r3, #8
 800c864:	f003 0301 	and.w	r3, r3, #1
 800c868:	613b      	str	r3, [r7, #16]
  fracn3 = (float_t)(uint32_t)(pll3fracen * ((RCC->PLL3FRACR & RCC_PLL3FRACR_FRACN3) >> 3));
 800c86a:	4b99      	ldr	r3, [pc, #612]	; (800cad0 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800c86c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800c86e:	08db      	lsrs	r3, r3, #3
 800c870:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800c874:	693a      	ldr	r2, [r7, #16]
 800c876:	fb02 f303 	mul.w	r3, r2, r3
 800c87a:	ee07 3a90 	vmov	s15, r3
 800c87e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800c882:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll3m != 0U)
 800c886:	697b      	ldr	r3, [r7, #20]
 800c888:	2b00      	cmp	r3, #0
 800c88a:	f000 8111 	beq.w	800cab0 <HAL_RCCEx_GetPLL3ClockFreq+0x270>
  {
    switch (pllsource)
 800c88e:	69bb      	ldr	r3, [r7, #24]
 800c890:	2b02      	cmp	r3, #2
 800c892:	f000 8083 	beq.w	800c99c <HAL_RCCEx_GetPLL3ClockFreq+0x15c>
 800c896:	69bb      	ldr	r3, [r7, #24]
 800c898:	2b02      	cmp	r3, #2
 800c89a:	f200 80a1 	bhi.w	800c9e0 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
 800c89e:	69bb      	ldr	r3, [r7, #24]
 800c8a0:	2b00      	cmp	r3, #0
 800c8a2:	d003      	beq.n	800c8ac <HAL_RCCEx_GetPLL3ClockFreq+0x6c>
 800c8a4:	69bb      	ldr	r3, [r7, #24]
 800c8a6:	2b01      	cmp	r3, #1
 800c8a8:	d056      	beq.n	800c958 <HAL_RCCEx_GetPLL3ClockFreq+0x118>
 800c8aa:	e099      	b.n	800c9e0 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
    {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800c8ac:	4b88      	ldr	r3, [pc, #544]	; (800cad0 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800c8ae:	681b      	ldr	r3, [r3, #0]
 800c8b0:	f003 0320 	and.w	r3, r3, #32
 800c8b4:	2b00      	cmp	r3, #0
 800c8b6:	d02d      	beq.n	800c914 <HAL_RCCEx_GetPLL3ClockFreq+0xd4>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800c8b8:	4b85      	ldr	r3, [pc, #532]	; (800cad0 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800c8ba:	681b      	ldr	r3, [r3, #0]
 800c8bc:	08db      	lsrs	r3, r3, #3
 800c8be:	f003 0303 	and.w	r3, r3, #3
 800c8c2:	4a84      	ldr	r2, [pc, #528]	; (800cad4 <HAL_RCCEx_GetPLL3ClockFreq+0x294>)
 800c8c4:	fa22 f303 	lsr.w	r3, r2, r3
 800c8c8:	60bb      	str	r3, [r7, #8]
          pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 800c8ca:	68bb      	ldr	r3, [r7, #8]
 800c8cc:	ee07 3a90 	vmov	s15, r3
 800c8d0:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800c8d4:	697b      	ldr	r3, [r7, #20]
 800c8d6:	ee07 3a90 	vmov	s15, r3
 800c8da:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800c8de:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800c8e2:	4b7b      	ldr	r3, [pc, #492]	; (800cad0 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800c8e4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c8e6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800c8ea:	ee07 3a90 	vmov	s15, r3
 800c8ee:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800c8f2:	ed97 6a03 	vldr	s12, [r7, #12]
 800c8f6:	eddf 5a78 	vldr	s11, [pc, #480]	; 800cad8 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800c8fa:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800c8fe:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800c902:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800c906:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800c90a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800c90e:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
        }
        break;
 800c912:	e087      	b.n	800ca24 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
          pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 800c914:	697b      	ldr	r3, [r7, #20]
 800c916:	ee07 3a90 	vmov	s15, r3
 800c91a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800c91e:	eddf 6a6f 	vldr	s13, [pc, #444]	; 800cadc <HAL_RCCEx_GetPLL3ClockFreq+0x29c>
 800c922:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800c926:	4b6a      	ldr	r3, [pc, #424]	; (800cad0 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800c928:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c92a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800c92e:	ee07 3a90 	vmov	s15, r3
 800c932:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800c936:	ed97 6a03 	vldr	s12, [r7, #12]
 800c93a:	eddf 5a67 	vldr	s11, [pc, #412]	; 800cad8 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800c93e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800c942:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800c946:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800c94a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800c94e:	ee67 7a27 	vmul.f32	s15, s14, s15
 800c952:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800c956:	e065      	b.n	800ca24 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 800c958:	697b      	ldr	r3, [r7, #20]
 800c95a:	ee07 3a90 	vmov	s15, r3
 800c95e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800c962:	eddf 6a5f 	vldr	s13, [pc, #380]	; 800cae0 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 800c966:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800c96a:	4b59      	ldr	r3, [pc, #356]	; (800cad0 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800c96c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c96e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800c972:	ee07 3a90 	vmov	s15, r3
 800c976:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800c97a:	ed97 6a03 	vldr	s12, [r7, #12]
 800c97e:	eddf 5a56 	vldr	s11, [pc, #344]	; 800cad8 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800c982:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800c986:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800c98a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800c98e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800c992:	ee67 7a27 	vmul.f32	s15, s14, s15
 800c996:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800c99a:	e043      	b.n	800ca24 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 800c99c:	697b      	ldr	r3, [r7, #20]
 800c99e:	ee07 3a90 	vmov	s15, r3
 800c9a2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800c9a6:	eddf 6a4f 	vldr	s13, [pc, #316]	; 800cae4 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>
 800c9aa:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800c9ae:	4b48      	ldr	r3, [pc, #288]	; (800cad0 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800c9b0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c9b2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800c9b6:	ee07 3a90 	vmov	s15, r3
 800c9ba:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800c9be:	ed97 6a03 	vldr	s12, [r7, #12]
 800c9c2:	eddf 5a45 	vldr	s11, [pc, #276]	; 800cad8 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800c9c6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800c9ca:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800c9ce:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800c9d2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800c9d6:	ee67 7a27 	vmul.f32	s15, s14, s15
 800c9da:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800c9de:	e021      	b.n	800ca24 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

      default:
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 800c9e0:	697b      	ldr	r3, [r7, #20]
 800c9e2:	ee07 3a90 	vmov	s15, r3
 800c9e6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800c9ea:	eddf 6a3d 	vldr	s13, [pc, #244]	; 800cae0 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 800c9ee:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800c9f2:	4b37      	ldr	r3, [pc, #220]	; (800cad0 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800c9f4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c9f6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800c9fa:	ee07 3a90 	vmov	s15, r3
 800c9fe:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800ca02:	ed97 6a03 	vldr	s12, [r7, #12]
 800ca06:	eddf 5a34 	vldr	s11, [pc, #208]	; 800cad8 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800ca0a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800ca0e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800ca12:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800ca16:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800ca1a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800ca1e:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800ca22:	bf00      	nop
    }
    PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_P3) >> 9)  + (float_t)1)) ;
 800ca24:	4b2a      	ldr	r3, [pc, #168]	; (800cad0 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800ca26:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800ca28:	0a5b      	lsrs	r3, r3, #9
 800ca2a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800ca2e:	ee07 3a90 	vmov	s15, r3
 800ca32:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800ca36:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800ca3a:	ee37 7a87 	vadd.f32	s14, s15, s14
 800ca3e:	edd7 6a07 	vldr	s13, [r7, #28]
 800ca42:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800ca46:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800ca4a:	ee17 2a90 	vmov	r2, s15
 800ca4e:	687b      	ldr	r3, [r7, #4]
 800ca50:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_Q3) >> 16) + (float_t)1)) ;
 800ca52:	4b1f      	ldr	r3, [pc, #124]	; (800cad0 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800ca54:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800ca56:	0c1b      	lsrs	r3, r3, #16
 800ca58:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800ca5c:	ee07 3a90 	vmov	s15, r3
 800ca60:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800ca64:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800ca68:	ee37 7a87 	vadd.f32	s14, s15, s14
 800ca6c:	edd7 6a07 	vldr	s13, [r7, #28]
 800ca70:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800ca74:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800ca78:	ee17 2a90 	vmov	r2, s15
 800ca7c:	687b      	ldr	r3, [r7, #4]
 800ca7e:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_R3) >> 24) + (float_t)1)) ;
 800ca80:	4b13      	ldr	r3, [pc, #76]	; (800cad0 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800ca82:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800ca84:	0e1b      	lsrs	r3, r3, #24
 800ca86:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800ca8a:	ee07 3a90 	vmov	s15, r3
 800ca8e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800ca92:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800ca96:	ee37 7a87 	vadd.f32	s14, s15, s14
 800ca9a:	edd7 6a07 	vldr	s13, [r7, #28]
 800ca9e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800caa2:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800caa6:	ee17 2a90 	vmov	r2, s15
 800caaa:	687b      	ldr	r3, [r7, #4]
 800caac:	609a      	str	r2, [r3, #8]
    PLL3_Clocks->PLL3_P_Frequency = 0U;
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
    PLL3_Clocks->PLL3_R_Frequency = 0U;
  }

}
 800caae:	e008      	b.n	800cac2 <HAL_RCCEx_GetPLL3ClockFreq+0x282>
    PLL3_Clocks->PLL3_P_Frequency = 0U;
 800cab0:	687b      	ldr	r3, [r7, #4]
 800cab2:	2200      	movs	r2, #0
 800cab4:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
 800cab6:	687b      	ldr	r3, [r7, #4]
 800cab8:	2200      	movs	r2, #0
 800caba:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = 0U;
 800cabc:	687b      	ldr	r3, [r7, #4]
 800cabe:	2200      	movs	r2, #0
 800cac0:	609a      	str	r2, [r3, #8]
}
 800cac2:	bf00      	nop
 800cac4:	3724      	adds	r7, #36	; 0x24
 800cac6:	46bd      	mov	sp, r7
 800cac8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cacc:	4770      	bx	lr
 800cace:	bf00      	nop
 800cad0:	58024400 	.word	0x58024400
 800cad4:	03d09000 	.word	0x03d09000
 800cad8:	46000000 	.word	0x46000000
 800cadc:	4c742400 	.word	0x4c742400
 800cae0:	4a742400 	.word	0x4a742400
 800cae4:	4afe3620 	.word	0x4afe3620

0800cae8 <HAL_RCCEx_GetPLL1ClockFreq>:
  *         right PLL1CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL1_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL1ClockFreq(PLL1_ClocksTypeDef *PLL1_Clocks)
{
 800cae8:	b480      	push	{r7}
 800caea:	b089      	sub	sp, #36	; 0x24
 800caec:	af00      	add	r7, sp, #0
 800caee:	6078      	str	r0, [r7, #4]
  uint32_t pllsource, pll1m, pll1fracen, hsivalue;
  float_t fracn1, pll1vco;

  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 800caf0:	4ba0      	ldr	r3, [pc, #640]	; (800cd74 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800caf2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800caf4:	f003 0303 	and.w	r3, r3, #3
 800caf8:	61bb      	str	r3, [r7, #24]
  pll1m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1) >> 4);
 800cafa:	4b9e      	ldr	r3, [pc, #632]	; (800cd74 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800cafc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800cafe:	091b      	lsrs	r3, r3, #4
 800cb00:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800cb04:	617b      	str	r3, [r7, #20]
  pll1fracen = RCC->PLLCFGR & RCC_PLLCFGR_PLL1FRACEN;
 800cb06:	4b9b      	ldr	r3, [pc, #620]	; (800cd74 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800cb08:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800cb0a:	f003 0301 	and.w	r3, r3, #1
 800cb0e:	613b      	str	r3, [r7, #16]
  fracn1 = (float_t)(uint32_t)(pll1fracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
 800cb10:	4b98      	ldr	r3, [pc, #608]	; (800cd74 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800cb12:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800cb14:	08db      	lsrs	r3, r3, #3
 800cb16:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800cb1a:	693a      	ldr	r2, [r7, #16]
 800cb1c:	fb02 f303 	mul.w	r3, r2, r3
 800cb20:	ee07 3a90 	vmov	s15, r3
 800cb24:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800cb28:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll1m != 0U)
 800cb2c:	697b      	ldr	r3, [r7, #20]
 800cb2e:	2b00      	cmp	r3, #0
 800cb30:	f000 8111 	beq.w	800cd56 <HAL_RCCEx_GetPLL1ClockFreq+0x26e>
  {
    switch (pllsource)
 800cb34:	69bb      	ldr	r3, [r7, #24]
 800cb36:	2b02      	cmp	r3, #2
 800cb38:	f000 8083 	beq.w	800cc42 <HAL_RCCEx_GetPLL1ClockFreq+0x15a>
 800cb3c:	69bb      	ldr	r3, [r7, #24]
 800cb3e:	2b02      	cmp	r3, #2
 800cb40:	f200 80a1 	bhi.w	800cc86 <HAL_RCCEx_GetPLL1ClockFreq+0x19e>
 800cb44:	69bb      	ldr	r3, [r7, #24]
 800cb46:	2b00      	cmp	r3, #0
 800cb48:	d003      	beq.n	800cb52 <HAL_RCCEx_GetPLL1ClockFreq+0x6a>
 800cb4a:	69bb      	ldr	r3, [r7, #24]
 800cb4c:	2b01      	cmp	r3, #1
 800cb4e:	d056      	beq.n	800cbfe <HAL_RCCEx_GetPLL1ClockFreq+0x116>
 800cb50:	e099      	b.n	800cc86 <HAL_RCCEx_GetPLL1ClockFreq+0x19e>
    {

      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800cb52:	4b88      	ldr	r3, [pc, #544]	; (800cd74 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800cb54:	681b      	ldr	r3, [r3, #0]
 800cb56:	f003 0320 	and.w	r3, r3, #32
 800cb5a:	2b00      	cmp	r3, #0
 800cb5c:	d02d      	beq.n	800cbba <HAL_RCCEx_GetPLL1ClockFreq+0xd2>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800cb5e:	4b85      	ldr	r3, [pc, #532]	; (800cd74 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800cb60:	681b      	ldr	r3, [r3, #0]
 800cb62:	08db      	lsrs	r3, r3, #3
 800cb64:	f003 0303 	and.w	r3, r3, #3
 800cb68:	4a83      	ldr	r2, [pc, #524]	; (800cd78 <HAL_RCCEx_GetPLL1ClockFreq+0x290>)
 800cb6a:	fa22 f303 	lsr.w	r3, r2, r3
 800cb6e:	60bb      	str	r3, [r7, #8]
          pll1vco = ((float_t)hsivalue / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800cb70:	68bb      	ldr	r3, [r7, #8]
 800cb72:	ee07 3a90 	vmov	s15, r3
 800cb76:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800cb7a:	697b      	ldr	r3, [r7, #20]
 800cb7c:	ee07 3a90 	vmov	s15, r3
 800cb80:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800cb84:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800cb88:	4b7a      	ldr	r3, [pc, #488]	; (800cd74 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800cb8a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800cb8c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800cb90:	ee07 3a90 	vmov	s15, r3
 800cb94:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800cb98:	ed97 6a03 	vldr	s12, [r7, #12]
 800cb9c:	eddf 5a77 	vldr	s11, [pc, #476]	; 800cd7c <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 800cba0:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800cba4:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800cba8:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800cbac:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800cbb0:	ee67 7a27 	vmul.f32	s15, s14, s15
 800cbb4:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
        }
        break;
 800cbb8:	e087      	b.n	800ccca <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>
          pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800cbba:	697b      	ldr	r3, [r7, #20]
 800cbbc:	ee07 3a90 	vmov	s15, r3
 800cbc0:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800cbc4:	eddf 6a6e 	vldr	s13, [pc, #440]	; 800cd80 <HAL_RCCEx_GetPLL1ClockFreq+0x298>
 800cbc8:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800cbcc:	4b69      	ldr	r3, [pc, #420]	; (800cd74 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800cbce:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800cbd0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800cbd4:	ee07 3a90 	vmov	s15, r3
 800cbd8:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800cbdc:	ed97 6a03 	vldr	s12, [r7, #12]
 800cbe0:	eddf 5a66 	vldr	s11, [pc, #408]	; 800cd7c <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 800cbe4:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800cbe8:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800cbec:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800cbf0:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800cbf4:	ee67 7a27 	vmul.f32	s15, s14, s15
 800cbf8:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800cbfc:	e065      	b.n	800ccca <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>
      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll1vco = ((float_t)CSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800cbfe:	697b      	ldr	r3, [r7, #20]
 800cc00:	ee07 3a90 	vmov	s15, r3
 800cc04:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800cc08:	eddf 6a5e 	vldr	s13, [pc, #376]	; 800cd84 <HAL_RCCEx_GetPLL1ClockFreq+0x29c>
 800cc0c:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800cc10:	4b58      	ldr	r3, [pc, #352]	; (800cd74 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800cc12:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800cc14:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800cc18:	ee07 3a90 	vmov	s15, r3
 800cc1c:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800cc20:	ed97 6a03 	vldr	s12, [r7, #12]
 800cc24:	eddf 5a55 	vldr	s11, [pc, #340]	; 800cd7c <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 800cc28:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800cc2c:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800cc30:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800cc34:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800cc38:	ee67 7a27 	vmul.f32	s15, s14, s15
 800cc3c:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800cc40:	e043      	b.n	800ccca <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll1vco = ((float_t)HSE_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800cc42:	697b      	ldr	r3, [r7, #20]
 800cc44:	ee07 3a90 	vmov	s15, r3
 800cc48:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800cc4c:	eddf 6a4e 	vldr	s13, [pc, #312]	; 800cd88 <HAL_RCCEx_GetPLL1ClockFreq+0x2a0>
 800cc50:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800cc54:	4b47      	ldr	r3, [pc, #284]	; (800cd74 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800cc56:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800cc58:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800cc5c:	ee07 3a90 	vmov	s15, r3
 800cc60:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800cc64:	ed97 6a03 	vldr	s12, [r7, #12]
 800cc68:	eddf 5a44 	vldr	s11, [pc, #272]	; 800cd7c <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 800cc6c:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800cc70:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800cc74:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800cc78:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800cc7c:	ee67 7a27 	vmul.f32	s15, s14, s15
 800cc80:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800cc84:	e021      	b.n	800ccca <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>

      default:
        pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800cc86:	697b      	ldr	r3, [r7, #20]
 800cc88:	ee07 3a90 	vmov	s15, r3
 800cc8c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800cc90:	eddf 6a3b 	vldr	s13, [pc, #236]	; 800cd80 <HAL_RCCEx_GetPLL1ClockFreq+0x298>
 800cc94:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800cc98:	4b36      	ldr	r3, [pc, #216]	; (800cd74 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800cc9a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800cc9c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800cca0:	ee07 3a90 	vmov	s15, r3
 800cca4:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800cca8:	ed97 6a03 	vldr	s12, [r7, #12]
 800ccac:	eddf 5a33 	vldr	s11, [pc, #204]	; 800cd7c <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 800ccb0:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800ccb4:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800ccb8:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800ccbc:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800ccc0:	ee67 7a27 	vmul.f32	s15, s14, s15
 800ccc4:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800ccc8:	bf00      	nop
    }

    PLL1_Clocks->PLL1_P_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >> 9)  + (float_t)1)) ;
 800ccca:	4b2a      	ldr	r3, [pc, #168]	; (800cd74 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800cccc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800ccce:	0a5b      	lsrs	r3, r3, #9
 800ccd0:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800ccd4:	ee07 3a90 	vmov	s15, r3
 800ccd8:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800ccdc:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800cce0:	ee37 7a87 	vadd.f32	s14, s15, s14
 800cce4:	edd7 6a07 	vldr	s13, [r7, #28]
 800cce8:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800ccec:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800ccf0:	ee17 2a90 	vmov	r2, s15
 800ccf4:	687b      	ldr	r3, [r7, #4]
 800ccf6:	601a      	str	r2, [r3, #0]
    PLL1_Clocks->PLL1_Q_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_Q1) >> 16) + (float_t)1)) ;
 800ccf8:	4b1e      	ldr	r3, [pc, #120]	; (800cd74 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800ccfa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800ccfc:	0c1b      	lsrs	r3, r3, #16
 800ccfe:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800cd02:	ee07 3a90 	vmov	s15, r3
 800cd06:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800cd0a:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800cd0e:	ee37 7a87 	vadd.f32	s14, s15, s14
 800cd12:	edd7 6a07 	vldr	s13, [r7, #28]
 800cd16:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800cd1a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800cd1e:	ee17 2a90 	vmov	r2, s15
 800cd22:	687b      	ldr	r3, [r7, #4]
 800cd24:	605a      	str	r2, [r3, #4]
    PLL1_Clocks->PLL1_R_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_R1) >> 24) + (float_t)1)) ;
 800cd26:	4b13      	ldr	r3, [pc, #76]	; (800cd74 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800cd28:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800cd2a:	0e1b      	lsrs	r3, r3, #24
 800cd2c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800cd30:	ee07 3a90 	vmov	s15, r3
 800cd34:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800cd38:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800cd3c:	ee37 7a87 	vadd.f32	s14, s15, s14
 800cd40:	edd7 6a07 	vldr	s13, [r7, #28]
 800cd44:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800cd48:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800cd4c:	ee17 2a90 	vmov	r2, s15
 800cd50:	687b      	ldr	r3, [r7, #4]
 800cd52:	609a      	str	r2, [r3, #8]
    PLL1_Clocks->PLL1_P_Frequency = 0U;
    PLL1_Clocks->PLL1_Q_Frequency = 0U;
    PLL1_Clocks->PLL1_R_Frequency = 0U;
  }

}
 800cd54:	e008      	b.n	800cd68 <HAL_RCCEx_GetPLL1ClockFreq+0x280>
    PLL1_Clocks->PLL1_P_Frequency = 0U;
 800cd56:	687b      	ldr	r3, [r7, #4]
 800cd58:	2200      	movs	r2, #0
 800cd5a:	601a      	str	r2, [r3, #0]
    PLL1_Clocks->PLL1_Q_Frequency = 0U;
 800cd5c:	687b      	ldr	r3, [r7, #4]
 800cd5e:	2200      	movs	r2, #0
 800cd60:	605a      	str	r2, [r3, #4]
    PLL1_Clocks->PLL1_R_Frequency = 0U;
 800cd62:	687b      	ldr	r3, [r7, #4]
 800cd64:	2200      	movs	r2, #0
 800cd66:	609a      	str	r2, [r3, #8]
}
 800cd68:	bf00      	nop
 800cd6a:	3724      	adds	r7, #36	; 0x24
 800cd6c:	46bd      	mov	sp, r7
 800cd6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cd72:	4770      	bx	lr
 800cd74:	58024400 	.word	0x58024400
 800cd78:	03d09000 	.word	0x03d09000
 800cd7c:	46000000 	.word	0x46000000
 800cd80:	4c742400 	.word	0x4c742400
 800cd84:	4a742400 	.word	0x4a742400
 800cd88:	4afe3620 	.word	0x4afe3620

0800cd8c <HAL_RCCEx_CRSConfig>:
  * @brief  Start automatic synchronization for polling mode
  * @param  pInit Pointer on RCC_CRSInitTypeDef structure
  * @retval None
  */
void HAL_RCCEx_CRSConfig(RCC_CRSInitTypeDef *pInit)
{
 800cd8c:	b580      	push	{r7, lr}
 800cd8e:	b084      	sub	sp, #16
 800cd90:	af00      	add	r7, sp, #0
 800cd92:	6078      	str	r0, [r7, #4]
  assert_param(IS_RCC_CRS_HSI48CALIBRATION(pInit->HSI48CalibrationValue));

  /* CONFIGURATION */

  /* Before configuration, reset CRS registers to their default values*/
  __HAL_RCC_CRS_FORCE_RESET();
 800cd94:	4b26      	ldr	r3, [pc, #152]	; (800ce30 <HAL_RCCEx_CRSConfig+0xa4>)
 800cd96:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800cd9a:	4a25      	ldr	r2, [pc, #148]	; (800ce30 <HAL_RCCEx_CRSConfig+0xa4>)
 800cd9c:	f043 0302 	orr.w	r3, r3, #2
 800cda0:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
  __HAL_RCC_CRS_RELEASE_RESET();
 800cda4:	4b22      	ldr	r3, [pc, #136]	; (800ce30 <HAL_RCCEx_CRSConfig+0xa4>)
 800cda6:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800cdaa:	4a21      	ldr	r2, [pc, #132]	; (800ce30 <HAL_RCCEx_CRSConfig+0xa4>)
 800cdac:	f023 0302 	bic.w	r3, r3, #2
 800cdb0:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

  /* Set the SYNCDIV[2:0] bits according to Pre-scaler value */
  /* Set the SYNCSRC[1:0] bits according to Source value */
  /* Set the SYNCSPOL bit according to Polarity value */
  if ((HAL_GetREVID() <= REV_ID_Y) && (pInit->Source == RCC_CRS_SYNC_SOURCE_USB2))
 800cdb4:	f7f6 fe12 	bl	80039dc <HAL_GetREVID>
 800cdb8:	4603      	mov	r3, r0
 800cdba:	f241 0203 	movw	r2, #4099	; 0x1003
 800cdbe:	4293      	cmp	r3, r2
 800cdc0:	d80b      	bhi.n	800cdda <HAL_RCCEx_CRSConfig+0x4e>
 800cdc2:	687b      	ldr	r3, [r7, #4]
 800cdc4:	685b      	ldr	r3, [r3, #4]
 800cdc6:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 800cdca:	d106      	bne.n	800cdda <HAL_RCCEx_CRSConfig+0x4e>
  {
    /* Use Rev.Y value of USB2 */
    value = (pInit->Prescaler | RCC_CRS_SYNC_SOURCE_PIN | pInit->Polarity);
 800cdcc:	687b      	ldr	r3, [r7, #4]
 800cdce:	681a      	ldr	r2, [r3, #0]
 800cdd0:	687b      	ldr	r3, [r7, #4]
 800cdd2:	689b      	ldr	r3, [r3, #8]
 800cdd4:	4313      	orrs	r3, r2
 800cdd6:	60fb      	str	r3, [r7, #12]
 800cdd8:	e008      	b.n	800cdec <HAL_RCCEx_CRSConfig+0x60>
  }
  else
  {
    value = (pInit->Prescaler | pInit->Source | pInit->Polarity);
 800cdda:	687b      	ldr	r3, [r7, #4]
 800cddc:	681a      	ldr	r2, [r3, #0]
 800cdde:	687b      	ldr	r3, [r7, #4]
 800cde0:	685b      	ldr	r3, [r3, #4]
 800cde2:	431a      	orrs	r2, r3
 800cde4:	687b      	ldr	r3, [r7, #4]
 800cde6:	689b      	ldr	r3, [r3, #8]
 800cde8:	4313      	orrs	r3, r2
 800cdea:	60fb      	str	r3, [r7, #12]
  }
  /* Set the RELOAD[15:0] bits according to ReloadValue value */
  value |= pInit->ReloadValue;
 800cdec:	687b      	ldr	r3, [r7, #4]
 800cdee:	68db      	ldr	r3, [r3, #12]
 800cdf0:	68fa      	ldr	r2, [r7, #12]
 800cdf2:	4313      	orrs	r3, r2
 800cdf4:	60fb      	str	r3, [r7, #12]
  /* Set the FELIM[7:0] bits according to ErrorLimitValue value */
  value |= (pInit->ErrorLimitValue << CRS_CFGR_FELIM_Pos);
 800cdf6:	687b      	ldr	r3, [r7, #4]
 800cdf8:	691b      	ldr	r3, [r3, #16]
 800cdfa:	041b      	lsls	r3, r3, #16
 800cdfc:	68fa      	ldr	r2, [r7, #12]
 800cdfe:	4313      	orrs	r3, r2
 800ce00:	60fb      	str	r3, [r7, #12]
  WRITE_REG(CRS->CFGR, value);
 800ce02:	4a0c      	ldr	r2, [pc, #48]	; (800ce34 <HAL_RCCEx_CRSConfig+0xa8>)
 800ce04:	68fb      	ldr	r3, [r7, #12]
 800ce06:	6053      	str	r3, [r2, #4]

  /* Adjust HSI48 oscillator smooth trimming */
  /* Set the TRIM[5:0] bits according to RCC_CRS_HSI48CalibrationValue value */
  MODIFY_REG(CRS->CR, CRS_CR_TRIM, (pInit->HSI48CalibrationValue << CRS_CR_TRIM_Pos));
 800ce08:	4b0a      	ldr	r3, [pc, #40]	; (800ce34 <HAL_RCCEx_CRSConfig+0xa8>)
 800ce0a:	681b      	ldr	r3, [r3, #0]
 800ce0c:	f423 527c 	bic.w	r2, r3, #16128	; 0x3f00
 800ce10:	687b      	ldr	r3, [r7, #4]
 800ce12:	695b      	ldr	r3, [r3, #20]
 800ce14:	021b      	lsls	r3, r3, #8
 800ce16:	4907      	ldr	r1, [pc, #28]	; (800ce34 <HAL_RCCEx_CRSConfig+0xa8>)
 800ce18:	4313      	orrs	r3, r2
 800ce1a:	600b      	str	r3, [r1, #0]

  /* START AUTOMATIC SYNCHRONIZATION*/

  /* Enable Automatic trimming & Frequency error counter */
  SET_BIT(CRS->CR, CRS_CR_AUTOTRIMEN | CRS_CR_CEN);
 800ce1c:	4b05      	ldr	r3, [pc, #20]	; (800ce34 <HAL_RCCEx_CRSConfig+0xa8>)
 800ce1e:	681b      	ldr	r3, [r3, #0]
 800ce20:	4a04      	ldr	r2, [pc, #16]	; (800ce34 <HAL_RCCEx_CRSConfig+0xa8>)
 800ce22:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 800ce26:	6013      	str	r3, [r2, #0]
}
 800ce28:	bf00      	nop
 800ce2a:	3710      	adds	r7, #16
 800ce2c:	46bd      	mov	sp, r7
 800ce2e:	bd80      	pop	{r7, pc}
 800ce30:	58024400 	.word	0x58024400
 800ce34:	40008400 	.word	0x40008400

0800ce38 <RCCEx_PLL2_Config>:
  * @note   PLL2 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(RCC_PLL2InitTypeDef *pll2, uint32_t Divider)
{
 800ce38:	b580      	push	{r7, lr}
 800ce3a:	b084      	sub	sp, #16
 800ce3c:	af00      	add	r7, sp, #0
 800ce3e:	6078      	str	r0, [r7, #4]
 800ce40:	6039      	str	r1, [r7, #0]

  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800ce42:	2300      	movs	r3, #0
 800ce44:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL2RGE_VALUE(pll2->PLL2RGE));
  assert_param(IS_RCC_PLL2VCO_VALUE(pll2->PLL2VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll2->PLL2FRACN));

  /* Check that PLL2 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 800ce46:	4b53      	ldr	r3, [pc, #332]	; (800cf94 <RCCEx_PLL2_Config+0x15c>)
 800ce48:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800ce4a:	f003 0303 	and.w	r3, r3, #3
 800ce4e:	2b03      	cmp	r3, #3
 800ce50:	d101      	bne.n	800ce56 <RCCEx_PLL2_Config+0x1e>
  {
    return HAL_ERROR;
 800ce52:	2301      	movs	r3, #1
 800ce54:	e099      	b.n	800cf8a <RCCEx_PLL2_Config+0x152>


  else
  {
    /* Disable  PLL2. */
    __HAL_RCC_PLL2_DISABLE();
 800ce56:	4b4f      	ldr	r3, [pc, #316]	; (800cf94 <RCCEx_PLL2_Config+0x15c>)
 800ce58:	681b      	ldr	r3, [r3, #0]
 800ce5a:	4a4e      	ldr	r2, [pc, #312]	; (800cf94 <RCCEx_PLL2_Config+0x15c>)
 800ce5c:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 800ce60:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800ce62:	f7f6 fd8b 	bl	800397c <HAL_GetTick>
 800ce66:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL is disabled */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 800ce68:	e008      	b.n	800ce7c <RCCEx_PLL2_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 800ce6a:	f7f6 fd87 	bl	800397c <HAL_GetTick>
 800ce6e:	4602      	mov	r2, r0
 800ce70:	68bb      	ldr	r3, [r7, #8]
 800ce72:	1ad3      	subs	r3, r2, r3
 800ce74:	2b02      	cmp	r3, #2
 800ce76:	d901      	bls.n	800ce7c <RCCEx_PLL2_Config+0x44>
      {
        return HAL_TIMEOUT;
 800ce78:	2303      	movs	r3, #3
 800ce7a:	e086      	b.n	800cf8a <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 800ce7c:	4b45      	ldr	r3, [pc, #276]	; (800cf94 <RCCEx_PLL2_Config+0x15c>)
 800ce7e:	681b      	ldr	r3, [r3, #0]
 800ce80:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800ce84:	2b00      	cmp	r3, #0
 800ce86:	d1f0      	bne.n	800ce6a <RCCEx_PLL2_Config+0x32>
      }
    }

    /* Configure PLL2 multiplication and division factors. */
    __HAL_RCC_PLL2_CONFIG(pll2->PLL2M,
 800ce88:	4b42      	ldr	r3, [pc, #264]	; (800cf94 <RCCEx_PLL2_Config+0x15c>)
 800ce8a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800ce8c:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 800ce90:	687b      	ldr	r3, [r7, #4]
 800ce92:	681b      	ldr	r3, [r3, #0]
 800ce94:	031b      	lsls	r3, r3, #12
 800ce96:	493f      	ldr	r1, [pc, #252]	; (800cf94 <RCCEx_PLL2_Config+0x15c>)
 800ce98:	4313      	orrs	r3, r2
 800ce9a:	628b      	str	r3, [r1, #40]	; 0x28
 800ce9c:	687b      	ldr	r3, [r7, #4]
 800ce9e:	685b      	ldr	r3, [r3, #4]
 800cea0:	3b01      	subs	r3, #1
 800cea2:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800cea6:	687b      	ldr	r3, [r7, #4]
 800cea8:	689b      	ldr	r3, [r3, #8]
 800ceaa:	3b01      	subs	r3, #1
 800ceac:	025b      	lsls	r3, r3, #9
 800ceae:	b29b      	uxth	r3, r3
 800ceb0:	431a      	orrs	r2, r3
 800ceb2:	687b      	ldr	r3, [r7, #4]
 800ceb4:	68db      	ldr	r3, [r3, #12]
 800ceb6:	3b01      	subs	r3, #1
 800ceb8:	041b      	lsls	r3, r3, #16
 800ceba:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 800cebe:	431a      	orrs	r2, r3
 800cec0:	687b      	ldr	r3, [r7, #4]
 800cec2:	691b      	ldr	r3, [r3, #16]
 800cec4:	3b01      	subs	r3, #1
 800cec6:	061b      	lsls	r3, r3, #24
 800cec8:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 800cecc:	4931      	ldr	r1, [pc, #196]	; (800cf94 <RCCEx_PLL2_Config+0x15c>)
 800cece:	4313      	orrs	r3, r2
 800ced0:	638b      	str	r3, [r1, #56]	; 0x38
                          pll2->PLL2P,
                          pll2->PLL2Q,
                          pll2->PLL2R);

    /* Select PLL2 input reference frequency range: VCI */
    __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE) ;
 800ced2:	4b30      	ldr	r3, [pc, #192]	; (800cf94 <RCCEx_PLL2_Config+0x15c>)
 800ced4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ced6:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 800ceda:	687b      	ldr	r3, [r7, #4]
 800cedc:	695b      	ldr	r3, [r3, #20]
 800cede:	492d      	ldr	r1, [pc, #180]	; (800cf94 <RCCEx_PLL2_Config+0x15c>)
 800cee0:	4313      	orrs	r3, r2
 800cee2:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL2 output frequency range : VCO */
    __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL) ;
 800cee4:	4b2b      	ldr	r3, [pc, #172]	; (800cf94 <RCCEx_PLL2_Config+0x15c>)
 800cee6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800cee8:	f023 0220 	bic.w	r2, r3, #32
 800ceec:	687b      	ldr	r3, [r7, #4]
 800ceee:	699b      	ldr	r3, [r3, #24]
 800cef0:	4928      	ldr	r1, [pc, #160]	; (800cf94 <RCCEx_PLL2_Config+0x15c>)
 800cef2:	4313      	orrs	r3, r2
 800cef4:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_DISABLE();
 800cef6:	4b27      	ldr	r3, [pc, #156]	; (800cf94 <RCCEx_PLL2_Config+0x15c>)
 800cef8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800cefa:	4a26      	ldr	r2, [pc, #152]	; (800cf94 <RCCEx_PLL2_Config+0x15c>)
 800cefc:	f023 0310 	bic.w	r3, r3, #16
 800cf00:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 800cf02:	4b24      	ldr	r3, [pc, #144]	; (800cf94 <RCCEx_PLL2_Config+0x15c>)
 800cf04:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800cf06:	4b24      	ldr	r3, [pc, #144]	; (800cf98 <RCCEx_PLL2_Config+0x160>)
 800cf08:	4013      	ands	r3, r2
 800cf0a:	687a      	ldr	r2, [r7, #4]
 800cf0c:	69d2      	ldr	r2, [r2, #28]
 800cf0e:	00d2      	lsls	r2, r2, #3
 800cf10:	4920      	ldr	r1, [pc, #128]	; (800cf94 <RCCEx_PLL2_Config+0x15c>)
 800cf12:	4313      	orrs	r3, r2
 800cf14:	63cb      	str	r3, [r1, #60]	; 0x3c

    /* Enable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_ENABLE();
 800cf16:	4b1f      	ldr	r3, [pc, #124]	; (800cf94 <RCCEx_PLL2_Config+0x15c>)
 800cf18:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800cf1a:	4a1e      	ldr	r2, [pc, #120]	; (800cf94 <RCCEx_PLL2_Config+0x15c>)
 800cf1c:	f043 0310 	orr.w	r3, r3, #16
 800cf20:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL2 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 800cf22:	683b      	ldr	r3, [r7, #0]
 800cf24:	2b00      	cmp	r3, #0
 800cf26:	d106      	bne.n	800cf36 <RCCEx_PLL2_Config+0xfe>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 800cf28:	4b1a      	ldr	r3, [pc, #104]	; (800cf94 <RCCEx_PLL2_Config+0x15c>)
 800cf2a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800cf2c:	4a19      	ldr	r2, [pc, #100]	; (800cf94 <RCCEx_PLL2_Config+0x15c>)
 800cf2e:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800cf32:	62d3      	str	r3, [r2, #44]	; 0x2c
 800cf34:	e00f      	b.n	800cf56 <RCCEx_PLL2_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 800cf36:	683b      	ldr	r3, [r7, #0]
 800cf38:	2b01      	cmp	r3, #1
 800cf3a:	d106      	bne.n	800cf4a <RCCEx_PLL2_Config+0x112>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVQ);
 800cf3c:	4b15      	ldr	r3, [pc, #84]	; (800cf94 <RCCEx_PLL2_Config+0x15c>)
 800cf3e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800cf40:	4a14      	ldr	r2, [pc, #80]	; (800cf94 <RCCEx_PLL2_Config+0x15c>)
 800cf42:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800cf46:	62d3      	str	r3, [r2, #44]	; 0x2c
 800cf48:	e005      	b.n	800cf56 <RCCEx_PLL2_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVR);
 800cf4a:	4b12      	ldr	r3, [pc, #72]	; (800cf94 <RCCEx_PLL2_Config+0x15c>)
 800cf4c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800cf4e:	4a11      	ldr	r2, [pc, #68]	; (800cf94 <RCCEx_PLL2_Config+0x15c>)
 800cf50:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800cf54:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL2. */
    __HAL_RCC_PLL2_ENABLE();
 800cf56:	4b0f      	ldr	r3, [pc, #60]	; (800cf94 <RCCEx_PLL2_Config+0x15c>)
 800cf58:	681b      	ldr	r3, [r3, #0]
 800cf5a:	4a0e      	ldr	r2, [pc, #56]	; (800cf94 <RCCEx_PLL2_Config+0x15c>)
 800cf5c:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 800cf60:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800cf62:	f7f6 fd0b 	bl	800397c <HAL_GetTick>
 800cf66:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL2 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 800cf68:	e008      	b.n	800cf7c <RCCEx_PLL2_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 800cf6a:	f7f6 fd07 	bl	800397c <HAL_GetTick>
 800cf6e:	4602      	mov	r2, r0
 800cf70:	68bb      	ldr	r3, [r7, #8]
 800cf72:	1ad3      	subs	r3, r2, r3
 800cf74:	2b02      	cmp	r3, #2
 800cf76:	d901      	bls.n	800cf7c <RCCEx_PLL2_Config+0x144>
      {
        return HAL_TIMEOUT;
 800cf78:	2303      	movs	r3, #3
 800cf7a:	e006      	b.n	800cf8a <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 800cf7c:	4b05      	ldr	r3, [pc, #20]	; (800cf94 <RCCEx_PLL2_Config+0x15c>)
 800cf7e:	681b      	ldr	r3, [r3, #0]
 800cf80:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800cf84:	2b00      	cmp	r3, #0
 800cf86:	d0f0      	beq.n	800cf6a <RCCEx_PLL2_Config+0x132>
    }

  }


  return status;
 800cf88:	7bfb      	ldrb	r3, [r7, #15]
}
 800cf8a:	4618      	mov	r0, r3
 800cf8c:	3710      	adds	r7, #16
 800cf8e:	46bd      	mov	sp, r7
 800cf90:	bd80      	pop	{r7, pc}
 800cf92:	bf00      	nop
 800cf94:	58024400 	.word	0x58024400
 800cf98:	ffff0007 	.word	0xffff0007

0800cf9c <RCCEx_PLL3_Config>:
  * @note   PLL3 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(RCC_PLL3InitTypeDef *pll3, uint32_t Divider)
{
 800cf9c:	b580      	push	{r7, lr}
 800cf9e:	b084      	sub	sp, #16
 800cfa0:	af00      	add	r7, sp, #0
 800cfa2:	6078      	str	r0, [r7, #4]
 800cfa4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800cfa6:	2300      	movs	r3, #0
 800cfa8:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL3RGE_VALUE(pll3->PLL3RGE));
  assert_param(IS_RCC_PLL3VCO_VALUE(pll3->PLL3VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll3->PLL3FRACN));

  /* Check that PLL3 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 800cfaa:	4b53      	ldr	r3, [pc, #332]	; (800d0f8 <RCCEx_PLL3_Config+0x15c>)
 800cfac:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800cfae:	f003 0303 	and.w	r3, r3, #3
 800cfb2:	2b03      	cmp	r3, #3
 800cfb4:	d101      	bne.n	800cfba <RCCEx_PLL3_Config+0x1e>
  {
    return HAL_ERROR;
 800cfb6:	2301      	movs	r3, #1
 800cfb8:	e099      	b.n	800d0ee <RCCEx_PLL3_Config+0x152>


  else
  {
    /* Disable  PLL3. */
    __HAL_RCC_PLL3_DISABLE();
 800cfba:	4b4f      	ldr	r3, [pc, #316]	; (800d0f8 <RCCEx_PLL3_Config+0x15c>)
 800cfbc:	681b      	ldr	r3, [r3, #0]
 800cfbe:	4a4e      	ldr	r2, [pc, #312]	; (800d0f8 <RCCEx_PLL3_Config+0x15c>)
 800cfc0:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800cfc4:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800cfc6:	f7f6 fcd9 	bl	800397c <HAL_GetTick>
 800cfca:	60b8      	str	r0, [r7, #8]
    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 800cfcc:	e008      	b.n	800cfe0 <RCCEx_PLL3_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 800cfce:	f7f6 fcd5 	bl	800397c <HAL_GetTick>
 800cfd2:	4602      	mov	r2, r0
 800cfd4:	68bb      	ldr	r3, [r7, #8]
 800cfd6:	1ad3      	subs	r3, r2, r3
 800cfd8:	2b02      	cmp	r3, #2
 800cfda:	d901      	bls.n	800cfe0 <RCCEx_PLL3_Config+0x44>
      {
        return HAL_TIMEOUT;
 800cfdc:	2303      	movs	r3, #3
 800cfde:	e086      	b.n	800d0ee <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 800cfe0:	4b45      	ldr	r3, [pc, #276]	; (800d0f8 <RCCEx_PLL3_Config+0x15c>)
 800cfe2:	681b      	ldr	r3, [r3, #0]
 800cfe4:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800cfe8:	2b00      	cmp	r3, #0
 800cfea:	d1f0      	bne.n	800cfce <RCCEx_PLL3_Config+0x32>
      }
    }

    /* Configure the PLL3  multiplication and division factors. */
    __HAL_RCC_PLL3_CONFIG(pll3->PLL3M,
 800cfec:	4b42      	ldr	r3, [pc, #264]	; (800d0f8 <RCCEx_PLL3_Config+0x15c>)
 800cfee:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800cff0:	f023 727c 	bic.w	r2, r3, #66060288	; 0x3f00000
 800cff4:	687b      	ldr	r3, [r7, #4]
 800cff6:	681b      	ldr	r3, [r3, #0]
 800cff8:	051b      	lsls	r3, r3, #20
 800cffa:	493f      	ldr	r1, [pc, #252]	; (800d0f8 <RCCEx_PLL3_Config+0x15c>)
 800cffc:	4313      	orrs	r3, r2
 800cffe:	628b      	str	r3, [r1, #40]	; 0x28
 800d000:	687b      	ldr	r3, [r7, #4]
 800d002:	685b      	ldr	r3, [r3, #4]
 800d004:	3b01      	subs	r3, #1
 800d006:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800d00a:	687b      	ldr	r3, [r7, #4]
 800d00c:	689b      	ldr	r3, [r3, #8]
 800d00e:	3b01      	subs	r3, #1
 800d010:	025b      	lsls	r3, r3, #9
 800d012:	b29b      	uxth	r3, r3
 800d014:	431a      	orrs	r2, r3
 800d016:	687b      	ldr	r3, [r7, #4]
 800d018:	68db      	ldr	r3, [r3, #12]
 800d01a:	3b01      	subs	r3, #1
 800d01c:	041b      	lsls	r3, r3, #16
 800d01e:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 800d022:	431a      	orrs	r2, r3
 800d024:	687b      	ldr	r3, [r7, #4]
 800d026:	691b      	ldr	r3, [r3, #16]
 800d028:	3b01      	subs	r3, #1
 800d02a:	061b      	lsls	r3, r3, #24
 800d02c:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 800d030:	4931      	ldr	r1, [pc, #196]	; (800d0f8 <RCCEx_PLL3_Config+0x15c>)
 800d032:	4313      	orrs	r3, r2
 800d034:	640b      	str	r3, [r1, #64]	; 0x40
                          pll3->PLL3P,
                          pll3->PLL3Q,
                          pll3->PLL3R);

    /* Select PLL3 input reference frequency range: VCI */
    __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE) ;
 800d036:	4b30      	ldr	r3, [pc, #192]	; (800d0f8 <RCCEx_PLL3_Config+0x15c>)
 800d038:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d03a:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 800d03e:	687b      	ldr	r3, [r7, #4]
 800d040:	695b      	ldr	r3, [r3, #20]
 800d042:	492d      	ldr	r1, [pc, #180]	; (800d0f8 <RCCEx_PLL3_Config+0x15c>)
 800d044:	4313      	orrs	r3, r2
 800d046:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL3 output frequency range : VCO */
    __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL) ;
 800d048:	4b2b      	ldr	r3, [pc, #172]	; (800d0f8 <RCCEx_PLL3_Config+0x15c>)
 800d04a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d04c:	f423 7200 	bic.w	r2, r3, #512	; 0x200
 800d050:	687b      	ldr	r3, [r7, #4]
 800d052:	699b      	ldr	r3, [r3, #24]
 800d054:	4928      	ldr	r1, [pc, #160]	; (800d0f8 <RCCEx_PLL3_Config+0x15c>)
 800d056:	4313      	orrs	r3, r2
 800d058:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_DISABLE();
 800d05a:	4b27      	ldr	r3, [pc, #156]	; (800d0f8 <RCCEx_PLL3_Config+0x15c>)
 800d05c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d05e:	4a26      	ldr	r2, [pc, #152]	; (800d0f8 <RCCEx_PLL3_Config+0x15c>)
 800d060:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800d064:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 800d066:	4b24      	ldr	r3, [pc, #144]	; (800d0f8 <RCCEx_PLL3_Config+0x15c>)
 800d068:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800d06a:	4b24      	ldr	r3, [pc, #144]	; (800d0fc <RCCEx_PLL3_Config+0x160>)
 800d06c:	4013      	ands	r3, r2
 800d06e:	687a      	ldr	r2, [r7, #4]
 800d070:	69d2      	ldr	r2, [r2, #28]
 800d072:	00d2      	lsls	r2, r2, #3
 800d074:	4920      	ldr	r1, [pc, #128]	; (800d0f8 <RCCEx_PLL3_Config+0x15c>)
 800d076:	4313      	orrs	r3, r2
 800d078:	644b      	str	r3, [r1, #68]	; 0x44

    /* Enable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_ENABLE();
 800d07a:	4b1f      	ldr	r3, [pc, #124]	; (800d0f8 <RCCEx_PLL3_Config+0x15c>)
 800d07c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d07e:	4a1e      	ldr	r2, [pc, #120]	; (800d0f8 <RCCEx_PLL3_Config+0x15c>)
 800d080:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800d084:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL3 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 800d086:	683b      	ldr	r3, [r7, #0]
 800d088:	2b00      	cmp	r3, #0
 800d08a:	d106      	bne.n	800d09a <RCCEx_PLL3_Config+0xfe>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
 800d08c:	4b1a      	ldr	r3, [pc, #104]	; (800d0f8 <RCCEx_PLL3_Config+0x15c>)
 800d08e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d090:	4a19      	ldr	r2, [pc, #100]	; (800d0f8 <RCCEx_PLL3_Config+0x15c>)
 800d092:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 800d096:	62d3      	str	r3, [r2, #44]	; 0x2c
 800d098:	e00f      	b.n	800d0ba <RCCEx_PLL3_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 800d09a:	683b      	ldr	r3, [r7, #0]
 800d09c:	2b01      	cmp	r3, #1
 800d09e:	d106      	bne.n	800d0ae <RCCEx_PLL3_Config+0x112>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
 800d0a0:	4b15      	ldr	r3, [pc, #84]	; (800d0f8 <RCCEx_PLL3_Config+0x15c>)
 800d0a2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d0a4:	4a14      	ldr	r2, [pc, #80]	; (800d0f8 <RCCEx_PLL3_Config+0x15c>)
 800d0a6:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 800d0aa:	62d3      	str	r3, [r2, #44]	; 0x2c
 800d0ac:	e005      	b.n	800d0ba <RCCEx_PLL3_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
 800d0ae:	4b12      	ldr	r3, [pc, #72]	; (800d0f8 <RCCEx_PLL3_Config+0x15c>)
 800d0b0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d0b2:	4a11      	ldr	r2, [pc, #68]	; (800d0f8 <RCCEx_PLL3_Config+0x15c>)
 800d0b4:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800d0b8:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL3. */
    __HAL_RCC_PLL3_ENABLE();
 800d0ba:	4b0f      	ldr	r3, [pc, #60]	; (800d0f8 <RCCEx_PLL3_Config+0x15c>)
 800d0bc:	681b      	ldr	r3, [r3, #0]
 800d0be:	4a0e      	ldr	r2, [pc, #56]	; (800d0f8 <RCCEx_PLL3_Config+0x15c>)
 800d0c0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800d0c4:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800d0c6:	f7f6 fc59 	bl	800397c <HAL_GetTick>
 800d0ca:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 800d0cc:	e008      	b.n	800d0e0 <RCCEx_PLL3_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 800d0ce:	f7f6 fc55 	bl	800397c <HAL_GetTick>
 800d0d2:	4602      	mov	r2, r0
 800d0d4:	68bb      	ldr	r3, [r7, #8]
 800d0d6:	1ad3      	subs	r3, r2, r3
 800d0d8:	2b02      	cmp	r3, #2
 800d0da:	d901      	bls.n	800d0e0 <RCCEx_PLL3_Config+0x144>
      {
        return HAL_TIMEOUT;
 800d0dc:	2303      	movs	r3, #3
 800d0de:	e006      	b.n	800d0ee <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 800d0e0:	4b05      	ldr	r3, [pc, #20]	; (800d0f8 <RCCEx_PLL3_Config+0x15c>)
 800d0e2:	681b      	ldr	r3, [r3, #0]
 800d0e4:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800d0e8:	2b00      	cmp	r3, #0
 800d0ea:	d0f0      	beq.n	800d0ce <RCCEx_PLL3_Config+0x132>
    }

  }


  return status;
 800d0ec:	7bfb      	ldrb	r3, [r7, #15]
}
 800d0ee:	4618      	mov	r0, r3
 800d0f0:	3710      	adds	r7, #16
 800d0f2:	46bd      	mov	sp, r7
 800d0f4:	bd80      	pop	{r7, pc}
 800d0f6:	bf00      	nop
 800d0f8:	58024400 	.word	0x58024400
 800d0fc:	ffff0007 	.word	0xffff0007

0800d100 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800d100:	b580      	push	{r7, lr}
 800d102:	b082      	sub	sp, #8
 800d104:	af00      	add	r7, sp, #0
 800d106:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800d108:	687b      	ldr	r3, [r7, #4]
 800d10a:	2b00      	cmp	r3, #0
 800d10c:	d101      	bne.n	800d112 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800d10e:	2301      	movs	r3, #1
 800d110:	e049      	b.n	800d1a6 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800d112:	687b      	ldr	r3, [r7, #4]
 800d114:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800d118:	b2db      	uxtb	r3, r3
 800d11a:	2b00      	cmp	r3, #0
 800d11c:	d106      	bne.n	800d12c <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800d11e:	687b      	ldr	r3, [r7, #4]
 800d120:	2200      	movs	r2, #0
 800d122:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800d126:	6878      	ldr	r0, [r7, #4]
 800d128:	f7f5 fee2 	bl	8002ef0 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800d12c:	687b      	ldr	r3, [r7, #4]
 800d12e:	2202      	movs	r2, #2
 800d130:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800d134:	687b      	ldr	r3, [r7, #4]
 800d136:	681a      	ldr	r2, [r3, #0]
 800d138:	687b      	ldr	r3, [r7, #4]
 800d13a:	3304      	adds	r3, #4
 800d13c:	4619      	mov	r1, r3
 800d13e:	4610      	mov	r0, r2
 800d140:	f000 f92e 	bl	800d3a0 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800d144:	687b      	ldr	r3, [r7, #4]
 800d146:	2201      	movs	r2, #1
 800d148:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800d14c:	687b      	ldr	r3, [r7, #4]
 800d14e:	2201      	movs	r2, #1
 800d150:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800d154:	687b      	ldr	r3, [r7, #4]
 800d156:	2201      	movs	r2, #1
 800d158:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800d15c:	687b      	ldr	r3, [r7, #4]
 800d15e:	2201      	movs	r2, #1
 800d160:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800d164:	687b      	ldr	r3, [r7, #4]
 800d166:	2201      	movs	r2, #1
 800d168:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800d16c:	687b      	ldr	r3, [r7, #4]
 800d16e:	2201      	movs	r2, #1
 800d170:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800d174:	687b      	ldr	r3, [r7, #4]
 800d176:	2201      	movs	r2, #1
 800d178:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800d17c:	687b      	ldr	r3, [r7, #4]
 800d17e:	2201      	movs	r2, #1
 800d180:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800d184:	687b      	ldr	r3, [r7, #4]
 800d186:	2201      	movs	r2, #1
 800d188:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800d18c:	687b      	ldr	r3, [r7, #4]
 800d18e:	2201      	movs	r2, #1
 800d190:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 800d194:	687b      	ldr	r3, [r7, #4]
 800d196:	2201      	movs	r2, #1
 800d198:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800d19c:	687b      	ldr	r3, [r7, #4]
 800d19e:	2201      	movs	r2, #1
 800d1a0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800d1a4:	2300      	movs	r3, #0
}
 800d1a6:	4618      	mov	r0, r3
 800d1a8:	3708      	adds	r7, #8
 800d1aa:	46bd      	mov	sp, r7
 800d1ac:	bd80      	pop	{r7, pc}
	...

0800d1b0 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 800d1b0:	b580      	push	{r7, lr}
 800d1b2:	b084      	sub	sp, #16
 800d1b4:	af00      	add	r7, sp, #0
 800d1b6:	6078      	str	r0, [r7, #4]
 800d1b8:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800d1ba:	2300      	movs	r3, #0
 800d1bc:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800d1be:	687b      	ldr	r3, [r7, #4]
 800d1c0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800d1c4:	2b01      	cmp	r3, #1
 800d1c6:	d101      	bne.n	800d1cc <HAL_TIM_ConfigClockSource+0x1c>
 800d1c8:	2302      	movs	r3, #2
 800d1ca:	e0dc      	b.n	800d386 <HAL_TIM_ConfigClockSource+0x1d6>
 800d1cc:	687b      	ldr	r3, [r7, #4]
 800d1ce:	2201      	movs	r2, #1
 800d1d0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800d1d4:	687b      	ldr	r3, [r7, #4]
 800d1d6:	2202      	movs	r2, #2
 800d1d8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 800d1dc:	687b      	ldr	r3, [r7, #4]
 800d1de:	681b      	ldr	r3, [r3, #0]
 800d1e0:	689b      	ldr	r3, [r3, #8]
 800d1e2:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 800d1e4:	68ba      	ldr	r2, [r7, #8]
 800d1e6:	4b6a      	ldr	r3, [pc, #424]	; (800d390 <HAL_TIM_ConfigClockSource+0x1e0>)
 800d1e8:	4013      	ands	r3, r2
 800d1ea:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800d1ec:	68bb      	ldr	r3, [r7, #8]
 800d1ee:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800d1f2:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 800d1f4:	687b      	ldr	r3, [r7, #4]
 800d1f6:	681b      	ldr	r3, [r3, #0]
 800d1f8:	68ba      	ldr	r2, [r7, #8]
 800d1fa:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 800d1fc:	683b      	ldr	r3, [r7, #0]
 800d1fe:	681b      	ldr	r3, [r3, #0]
 800d200:	4a64      	ldr	r2, [pc, #400]	; (800d394 <HAL_TIM_ConfigClockSource+0x1e4>)
 800d202:	4293      	cmp	r3, r2
 800d204:	f000 80a9 	beq.w	800d35a <HAL_TIM_ConfigClockSource+0x1aa>
 800d208:	4a62      	ldr	r2, [pc, #392]	; (800d394 <HAL_TIM_ConfigClockSource+0x1e4>)
 800d20a:	4293      	cmp	r3, r2
 800d20c:	f200 80ae 	bhi.w	800d36c <HAL_TIM_ConfigClockSource+0x1bc>
 800d210:	4a61      	ldr	r2, [pc, #388]	; (800d398 <HAL_TIM_ConfigClockSource+0x1e8>)
 800d212:	4293      	cmp	r3, r2
 800d214:	f000 80a1 	beq.w	800d35a <HAL_TIM_ConfigClockSource+0x1aa>
 800d218:	4a5f      	ldr	r2, [pc, #380]	; (800d398 <HAL_TIM_ConfigClockSource+0x1e8>)
 800d21a:	4293      	cmp	r3, r2
 800d21c:	f200 80a6 	bhi.w	800d36c <HAL_TIM_ConfigClockSource+0x1bc>
 800d220:	4a5e      	ldr	r2, [pc, #376]	; (800d39c <HAL_TIM_ConfigClockSource+0x1ec>)
 800d222:	4293      	cmp	r3, r2
 800d224:	f000 8099 	beq.w	800d35a <HAL_TIM_ConfigClockSource+0x1aa>
 800d228:	4a5c      	ldr	r2, [pc, #368]	; (800d39c <HAL_TIM_ConfigClockSource+0x1ec>)
 800d22a:	4293      	cmp	r3, r2
 800d22c:	f200 809e 	bhi.w	800d36c <HAL_TIM_ConfigClockSource+0x1bc>
 800d230:	f1b3 1f10 	cmp.w	r3, #1048592	; 0x100010
 800d234:	f000 8091 	beq.w	800d35a <HAL_TIM_ConfigClockSource+0x1aa>
 800d238:	f1b3 1f10 	cmp.w	r3, #1048592	; 0x100010
 800d23c:	f200 8096 	bhi.w	800d36c <HAL_TIM_ConfigClockSource+0x1bc>
 800d240:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800d244:	f000 8089 	beq.w	800d35a <HAL_TIM_ConfigClockSource+0x1aa>
 800d248:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800d24c:	f200 808e 	bhi.w	800d36c <HAL_TIM_ConfigClockSource+0x1bc>
 800d250:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800d254:	d03e      	beq.n	800d2d4 <HAL_TIM_ConfigClockSource+0x124>
 800d256:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800d25a:	f200 8087 	bhi.w	800d36c <HAL_TIM_ConfigClockSource+0x1bc>
 800d25e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800d262:	f000 8086 	beq.w	800d372 <HAL_TIM_ConfigClockSource+0x1c2>
 800d266:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800d26a:	d87f      	bhi.n	800d36c <HAL_TIM_ConfigClockSource+0x1bc>
 800d26c:	2b70      	cmp	r3, #112	; 0x70
 800d26e:	d01a      	beq.n	800d2a6 <HAL_TIM_ConfigClockSource+0xf6>
 800d270:	2b70      	cmp	r3, #112	; 0x70
 800d272:	d87b      	bhi.n	800d36c <HAL_TIM_ConfigClockSource+0x1bc>
 800d274:	2b60      	cmp	r3, #96	; 0x60
 800d276:	d050      	beq.n	800d31a <HAL_TIM_ConfigClockSource+0x16a>
 800d278:	2b60      	cmp	r3, #96	; 0x60
 800d27a:	d877      	bhi.n	800d36c <HAL_TIM_ConfigClockSource+0x1bc>
 800d27c:	2b50      	cmp	r3, #80	; 0x50
 800d27e:	d03c      	beq.n	800d2fa <HAL_TIM_ConfigClockSource+0x14a>
 800d280:	2b50      	cmp	r3, #80	; 0x50
 800d282:	d873      	bhi.n	800d36c <HAL_TIM_ConfigClockSource+0x1bc>
 800d284:	2b40      	cmp	r3, #64	; 0x40
 800d286:	d058      	beq.n	800d33a <HAL_TIM_ConfigClockSource+0x18a>
 800d288:	2b40      	cmp	r3, #64	; 0x40
 800d28a:	d86f      	bhi.n	800d36c <HAL_TIM_ConfigClockSource+0x1bc>
 800d28c:	2b30      	cmp	r3, #48	; 0x30
 800d28e:	d064      	beq.n	800d35a <HAL_TIM_ConfigClockSource+0x1aa>
 800d290:	2b30      	cmp	r3, #48	; 0x30
 800d292:	d86b      	bhi.n	800d36c <HAL_TIM_ConfigClockSource+0x1bc>
 800d294:	2b20      	cmp	r3, #32
 800d296:	d060      	beq.n	800d35a <HAL_TIM_ConfigClockSource+0x1aa>
 800d298:	2b20      	cmp	r3, #32
 800d29a:	d867      	bhi.n	800d36c <HAL_TIM_ConfigClockSource+0x1bc>
 800d29c:	2b00      	cmp	r3, #0
 800d29e:	d05c      	beq.n	800d35a <HAL_TIM_ConfigClockSource+0x1aa>
 800d2a0:	2b10      	cmp	r3, #16
 800d2a2:	d05a      	beq.n	800d35a <HAL_TIM_ConfigClockSource+0x1aa>
 800d2a4:	e062      	b.n	800d36c <HAL_TIM_ConfigClockSource+0x1bc>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800d2a6:	687b      	ldr	r3, [r7, #4]
 800d2a8:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 800d2aa:	683b      	ldr	r3, [r7, #0]
 800d2ac:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 800d2ae:	683b      	ldr	r3, [r7, #0]
 800d2b0:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 800d2b2:	683b      	ldr	r3, [r7, #0]
 800d2b4:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 800d2b6:	f000 f98b 	bl	800d5d0 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 800d2ba:	687b      	ldr	r3, [r7, #4]
 800d2bc:	681b      	ldr	r3, [r3, #0]
 800d2be:	689b      	ldr	r3, [r3, #8]
 800d2c0:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800d2c2:	68bb      	ldr	r3, [r7, #8]
 800d2c4:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 800d2c8:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 800d2ca:	687b      	ldr	r3, [r7, #4]
 800d2cc:	681b      	ldr	r3, [r3, #0]
 800d2ce:	68ba      	ldr	r2, [r7, #8]
 800d2d0:	609a      	str	r2, [r3, #8]
      break;
 800d2d2:	e04f      	b.n	800d374 <HAL_TIM_ConfigClockSource+0x1c4>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800d2d4:	687b      	ldr	r3, [r7, #4]
 800d2d6:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 800d2d8:	683b      	ldr	r3, [r7, #0]
 800d2da:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 800d2dc:	683b      	ldr	r3, [r7, #0]
 800d2de:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 800d2e0:	683b      	ldr	r3, [r7, #0]
 800d2e2:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 800d2e4:	f000 f974 	bl	800d5d0 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800d2e8:	687b      	ldr	r3, [r7, #4]
 800d2ea:	681b      	ldr	r3, [r3, #0]
 800d2ec:	689a      	ldr	r2, [r3, #8]
 800d2ee:	687b      	ldr	r3, [r7, #4]
 800d2f0:	681b      	ldr	r3, [r3, #0]
 800d2f2:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800d2f6:	609a      	str	r2, [r3, #8]
      break;
 800d2f8:	e03c      	b.n	800d374 <HAL_TIM_ConfigClockSource+0x1c4>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800d2fa:	687b      	ldr	r3, [r7, #4]
 800d2fc:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800d2fe:	683b      	ldr	r3, [r7, #0]
 800d300:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800d302:	683b      	ldr	r3, [r7, #0]
 800d304:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800d306:	461a      	mov	r2, r3
 800d308:	f000 f8e4 	bl	800d4d4 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 800d30c:	687b      	ldr	r3, [r7, #4]
 800d30e:	681b      	ldr	r3, [r3, #0]
 800d310:	2150      	movs	r1, #80	; 0x50
 800d312:	4618      	mov	r0, r3
 800d314:	f000 f93e 	bl	800d594 <TIM_ITRx_SetConfig>
      break;
 800d318:	e02c      	b.n	800d374 <HAL_TIM_ConfigClockSource+0x1c4>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 800d31a:	687b      	ldr	r3, [r7, #4]
 800d31c:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800d31e:	683b      	ldr	r3, [r7, #0]
 800d320:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800d322:	683b      	ldr	r3, [r7, #0]
 800d324:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 800d326:	461a      	mov	r2, r3
 800d328:	f000 f903 	bl	800d532 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 800d32c:	687b      	ldr	r3, [r7, #4]
 800d32e:	681b      	ldr	r3, [r3, #0]
 800d330:	2160      	movs	r1, #96	; 0x60
 800d332:	4618      	mov	r0, r3
 800d334:	f000 f92e 	bl	800d594 <TIM_ITRx_SetConfig>
      break;
 800d338:	e01c      	b.n	800d374 <HAL_TIM_ConfigClockSource+0x1c4>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800d33a:	687b      	ldr	r3, [r7, #4]
 800d33c:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800d33e:	683b      	ldr	r3, [r7, #0]
 800d340:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800d342:	683b      	ldr	r3, [r7, #0]
 800d344:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800d346:	461a      	mov	r2, r3
 800d348:	f000 f8c4 	bl	800d4d4 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 800d34c:	687b      	ldr	r3, [r7, #4]
 800d34e:	681b      	ldr	r3, [r3, #0]
 800d350:	2140      	movs	r1, #64	; 0x40
 800d352:	4618      	mov	r0, r3
 800d354:	f000 f91e 	bl	800d594 <TIM_ITRx_SetConfig>
      break;
 800d358:	e00c      	b.n	800d374 <HAL_TIM_ConfigClockSource+0x1c4>
    case TIM_CLOCKSOURCE_ITR8:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800d35a:	687b      	ldr	r3, [r7, #4]
 800d35c:	681a      	ldr	r2, [r3, #0]
 800d35e:	683b      	ldr	r3, [r7, #0]
 800d360:	681b      	ldr	r3, [r3, #0]
 800d362:	4619      	mov	r1, r3
 800d364:	4610      	mov	r0, r2
 800d366:	f000 f915 	bl	800d594 <TIM_ITRx_SetConfig>
      break;
 800d36a:	e003      	b.n	800d374 <HAL_TIM_ConfigClockSource+0x1c4>
    }

    default:
      status = HAL_ERROR;
 800d36c:	2301      	movs	r3, #1
 800d36e:	73fb      	strb	r3, [r7, #15]
      break;
 800d370:	e000      	b.n	800d374 <HAL_TIM_ConfigClockSource+0x1c4>
      break;
 800d372:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 800d374:	687b      	ldr	r3, [r7, #4]
 800d376:	2201      	movs	r2, #1
 800d378:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800d37c:	687b      	ldr	r3, [r7, #4]
 800d37e:	2200      	movs	r2, #0
 800d380:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 800d384:	7bfb      	ldrb	r3, [r7, #15]
}
 800d386:	4618      	mov	r0, r3
 800d388:	3710      	adds	r7, #16
 800d38a:	46bd      	mov	sp, r7
 800d38c:	bd80      	pop	{r7, pc}
 800d38e:	bf00      	nop
 800d390:	ffceff88 	.word	0xffceff88
 800d394:	00100040 	.word	0x00100040
 800d398:	00100030 	.word	0x00100030
 800d39c:	00100020 	.word	0x00100020

0800d3a0 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 800d3a0:	b480      	push	{r7}
 800d3a2:	b085      	sub	sp, #20
 800d3a4:	af00      	add	r7, sp, #0
 800d3a6:	6078      	str	r0, [r7, #4]
 800d3a8:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800d3aa:	687b      	ldr	r3, [r7, #4]
 800d3ac:	681b      	ldr	r3, [r3, #0]
 800d3ae:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800d3b0:	687b      	ldr	r3, [r7, #4]
 800d3b2:	4a40      	ldr	r2, [pc, #256]	; (800d4b4 <TIM_Base_SetConfig+0x114>)
 800d3b4:	4293      	cmp	r3, r2
 800d3b6:	d013      	beq.n	800d3e0 <TIM_Base_SetConfig+0x40>
 800d3b8:	687b      	ldr	r3, [r7, #4]
 800d3ba:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800d3be:	d00f      	beq.n	800d3e0 <TIM_Base_SetConfig+0x40>
 800d3c0:	687b      	ldr	r3, [r7, #4]
 800d3c2:	4a3d      	ldr	r2, [pc, #244]	; (800d4b8 <TIM_Base_SetConfig+0x118>)
 800d3c4:	4293      	cmp	r3, r2
 800d3c6:	d00b      	beq.n	800d3e0 <TIM_Base_SetConfig+0x40>
 800d3c8:	687b      	ldr	r3, [r7, #4]
 800d3ca:	4a3c      	ldr	r2, [pc, #240]	; (800d4bc <TIM_Base_SetConfig+0x11c>)
 800d3cc:	4293      	cmp	r3, r2
 800d3ce:	d007      	beq.n	800d3e0 <TIM_Base_SetConfig+0x40>
 800d3d0:	687b      	ldr	r3, [r7, #4]
 800d3d2:	4a3b      	ldr	r2, [pc, #236]	; (800d4c0 <TIM_Base_SetConfig+0x120>)
 800d3d4:	4293      	cmp	r3, r2
 800d3d6:	d003      	beq.n	800d3e0 <TIM_Base_SetConfig+0x40>
 800d3d8:	687b      	ldr	r3, [r7, #4]
 800d3da:	4a3a      	ldr	r2, [pc, #232]	; (800d4c4 <TIM_Base_SetConfig+0x124>)
 800d3dc:	4293      	cmp	r3, r2
 800d3de:	d108      	bne.n	800d3f2 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800d3e0:	68fb      	ldr	r3, [r7, #12]
 800d3e2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800d3e6:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800d3e8:	683b      	ldr	r3, [r7, #0]
 800d3ea:	685b      	ldr	r3, [r3, #4]
 800d3ec:	68fa      	ldr	r2, [r7, #12]
 800d3ee:	4313      	orrs	r3, r2
 800d3f0:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800d3f2:	687b      	ldr	r3, [r7, #4]
 800d3f4:	4a2f      	ldr	r2, [pc, #188]	; (800d4b4 <TIM_Base_SetConfig+0x114>)
 800d3f6:	4293      	cmp	r3, r2
 800d3f8:	d01f      	beq.n	800d43a <TIM_Base_SetConfig+0x9a>
 800d3fa:	687b      	ldr	r3, [r7, #4]
 800d3fc:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800d400:	d01b      	beq.n	800d43a <TIM_Base_SetConfig+0x9a>
 800d402:	687b      	ldr	r3, [r7, #4]
 800d404:	4a2c      	ldr	r2, [pc, #176]	; (800d4b8 <TIM_Base_SetConfig+0x118>)
 800d406:	4293      	cmp	r3, r2
 800d408:	d017      	beq.n	800d43a <TIM_Base_SetConfig+0x9a>
 800d40a:	687b      	ldr	r3, [r7, #4]
 800d40c:	4a2b      	ldr	r2, [pc, #172]	; (800d4bc <TIM_Base_SetConfig+0x11c>)
 800d40e:	4293      	cmp	r3, r2
 800d410:	d013      	beq.n	800d43a <TIM_Base_SetConfig+0x9a>
 800d412:	687b      	ldr	r3, [r7, #4]
 800d414:	4a2a      	ldr	r2, [pc, #168]	; (800d4c0 <TIM_Base_SetConfig+0x120>)
 800d416:	4293      	cmp	r3, r2
 800d418:	d00f      	beq.n	800d43a <TIM_Base_SetConfig+0x9a>
 800d41a:	687b      	ldr	r3, [r7, #4]
 800d41c:	4a29      	ldr	r2, [pc, #164]	; (800d4c4 <TIM_Base_SetConfig+0x124>)
 800d41e:	4293      	cmp	r3, r2
 800d420:	d00b      	beq.n	800d43a <TIM_Base_SetConfig+0x9a>
 800d422:	687b      	ldr	r3, [r7, #4]
 800d424:	4a28      	ldr	r2, [pc, #160]	; (800d4c8 <TIM_Base_SetConfig+0x128>)
 800d426:	4293      	cmp	r3, r2
 800d428:	d007      	beq.n	800d43a <TIM_Base_SetConfig+0x9a>
 800d42a:	687b      	ldr	r3, [r7, #4]
 800d42c:	4a27      	ldr	r2, [pc, #156]	; (800d4cc <TIM_Base_SetConfig+0x12c>)
 800d42e:	4293      	cmp	r3, r2
 800d430:	d003      	beq.n	800d43a <TIM_Base_SetConfig+0x9a>
 800d432:	687b      	ldr	r3, [r7, #4]
 800d434:	4a26      	ldr	r2, [pc, #152]	; (800d4d0 <TIM_Base_SetConfig+0x130>)
 800d436:	4293      	cmp	r3, r2
 800d438:	d108      	bne.n	800d44c <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800d43a:	68fb      	ldr	r3, [r7, #12]
 800d43c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800d440:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800d442:	683b      	ldr	r3, [r7, #0]
 800d444:	68db      	ldr	r3, [r3, #12]
 800d446:	68fa      	ldr	r2, [r7, #12]
 800d448:	4313      	orrs	r3, r2
 800d44a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800d44c:	68fb      	ldr	r3, [r7, #12]
 800d44e:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800d452:	683b      	ldr	r3, [r7, #0]
 800d454:	695b      	ldr	r3, [r3, #20]
 800d456:	4313      	orrs	r3, r2
 800d458:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800d45a:	687b      	ldr	r3, [r7, #4]
 800d45c:	68fa      	ldr	r2, [r7, #12]
 800d45e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800d460:	683b      	ldr	r3, [r7, #0]
 800d462:	689a      	ldr	r2, [r3, #8]
 800d464:	687b      	ldr	r3, [r7, #4]
 800d466:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800d468:	683b      	ldr	r3, [r7, #0]
 800d46a:	681a      	ldr	r2, [r3, #0]
 800d46c:	687b      	ldr	r3, [r7, #4]
 800d46e:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800d470:	687b      	ldr	r3, [r7, #4]
 800d472:	4a10      	ldr	r2, [pc, #64]	; (800d4b4 <TIM_Base_SetConfig+0x114>)
 800d474:	4293      	cmp	r3, r2
 800d476:	d00f      	beq.n	800d498 <TIM_Base_SetConfig+0xf8>
 800d478:	687b      	ldr	r3, [r7, #4]
 800d47a:	4a12      	ldr	r2, [pc, #72]	; (800d4c4 <TIM_Base_SetConfig+0x124>)
 800d47c:	4293      	cmp	r3, r2
 800d47e:	d00b      	beq.n	800d498 <TIM_Base_SetConfig+0xf8>
 800d480:	687b      	ldr	r3, [r7, #4]
 800d482:	4a11      	ldr	r2, [pc, #68]	; (800d4c8 <TIM_Base_SetConfig+0x128>)
 800d484:	4293      	cmp	r3, r2
 800d486:	d007      	beq.n	800d498 <TIM_Base_SetConfig+0xf8>
 800d488:	687b      	ldr	r3, [r7, #4]
 800d48a:	4a10      	ldr	r2, [pc, #64]	; (800d4cc <TIM_Base_SetConfig+0x12c>)
 800d48c:	4293      	cmp	r3, r2
 800d48e:	d003      	beq.n	800d498 <TIM_Base_SetConfig+0xf8>
 800d490:	687b      	ldr	r3, [r7, #4]
 800d492:	4a0f      	ldr	r2, [pc, #60]	; (800d4d0 <TIM_Base_SetConfig+0x130>)
 800d494:	4293      	cmp	r3, r2
 800d496:	d103      	bne.n	800d4a0 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800d498:	683b      	ldr	r3, [r7, #0]
 800d49a:	691a      	ldr	r2, [r3, #16]
 800d49c:	687b      	ldr	r3, [r7, #4]
 800d49e:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800d4a0:	687b      	ldr	r3, [r7, #4]
 800d4a2:	2201      	movs	r2, #1
 800d4a4:	615a      	str	r2, [r3, #20]
}
 800d4a6:	bf00      	nop
 800d4a8:	3714      	adds	r7, #20
 800d4aa:	46bd      	mov	sp, r7
 800d4ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d4b0:	4770      	bx	lr
 800d4b2:	bf00      	nop
 800d4b4:	40010000 	.word	0x40010000
 800d4b8:	40000400 	.word	0x40000400
 800d4bc:	40000800 	.word	0x40000800
 800d4c0:	40000c00 	.word	0x40000c00
 800d4c4:	40010400 	.word	0x40010400
 800d4c8:	40014000 	.word	0x40014000
 800d4cc:	40014400 	.word	0x40014400
 800d4d0:	40014800 	.word	0x40014800

0800d4d4 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800d4d4:	b480      	push	{r7}
 800d4d6:	b087      	sub	sp, #28
 800d4d8:	af00      	add	r7, sp, #0
 800d4da:	60f8      	str	r0, [r7, #12]
 800d4dc:	60b9      	str	r1, [r7, #8]
 800d4de:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 800d4e0:	68fb      	ldr	r3, [r7, #12]
 800d4e2:	6a1b      	ldr	r3, [r3, #32]
 800d4e4:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800d4e6:	68fb      	ldr	r3, [r7, #12]
 800d4e8:	6a1b      	ldr	r3, [r3, #32]
 800d4ea:	f023 0201 	bic.w	r2, r3, #1
 800d4ee:	68fb      	ldr	r3, [r7, #12]
 800d4f0:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800d4f2:	68fb      	ldr	r3, [r7, #12]
 800d4f4:	699b      	ldr	r3, [r3, #24]
 800d4f6:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800d4f8:	693b      	ldr	r3, [r7, #16]
 800d4fa:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800d4fe:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800d500:	687b      	ldr	r3, [r7, #4]
 800d502:	011b      	lsls	r3, r3, #4
 800d504:	693a      	ldr	r2, [r7, #16]
 800d506:	4313      	orrs	r3, r2
 800d508:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800d50a:	697b      	ldr	r3, [r7, #20]
 800d50c:	f023 030a 	bic.w	r3, r3, #10
 800d510:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800d512:	697a      	ldr	r2, [r7, #20]
 800d514:	68bb      	ldr	r3, [r7, #8]
 800d516:	4313      	orrs	r3, r2
 800d518:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800d51a:	68fb      	ldr	r3, [r7, #12]
 800d51c:	693a      	ldr	r2, [r7, #16]
 800d51e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800d520:	68fb      	ldr	r3, [r7, #12]
 800d522:	697a      	ldr	r2, [r7, #20]
 800d524:	621a      	str	r2, [r3, #32]
}
 800d526:	bf00      	nop
 800d528:	371c      	adds	r7, #28
 800d52a:	46bd      	mov	sp, r7
 800d52c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d530:	4770      	bx	lr

0800d532 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800d532:	b480      	push	{r7}
 800d534:	b087      	sub	sp, #28
 800d536:	af00      	add	r7, sp, #0
 800d538:	60f8      	str	r0, [r7, #12]
 800d53a:	60b9      	str	r1, [r7, #8]
 800d53c:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800d53e:	68fb      	ldr	r3, [r7, #12]
 800d540:	6a1b      	ldr	r3, [r3, #32]
 800d542:	f023 0210 	bic.w	r2, r3, #16
 800d546:	68fb      	ldr	r3, [r7, #12]
 800d548:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800d54a:	68fb      	ldr	r3, [r7, #12]
 800d54c:	699b      	ldr	r3, [r3, #24]
 800d54e:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 800d550:	68fb      	ldr	r3, [r7, #12]
 800d552:	6a1b      	ldr	r3, [r3, #32]
 800d554:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800d556:	697b      	ldr	r3, [r7, #20]
 800d558:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800d55c:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800d55e:	687b      	ldr	r3, [r7, #4]
 800d560:	031b      	lsls	r3, r3, #12
 800d562:	697a      	ldr	r2, [r7, #20]
 800d564:	4313      	orrs	r3, r2
 800d566:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800d568:	693b      	ldr	r3, [r7, #16]
 800d56a:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 800d56e:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 800d570:	68bb      	ldr	r3, [r7, #8]
 800d572:	011b      	lsls	r3, r3, #4
 800d574:	693a      	ldr	r2, [r7, #16]
 800d576:	4313      	orrs	r3, r2
 800d578:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800d57a:	68fb      	ldr	r3, [r7, #12]
 800d57c:	697a      	ldr	r2, [r7, #20]
 800d57e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800d580:	68fb      	ldr	r3, [r7, #12]
 800d582:	693a      	ldr	r2, [r7, #16]
 800d584:	621a      	str	r2, [r3, #32]
}
 800d586:	bf00      	nop
 800d588:	371c      	adds	r7, #28
 800d58a:	46bd      	mov	sp, r7
 800d58c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d590:	4770      	bx	lr
	...

0800d594 <TIM_ITRx_SetConfig>:
  *       (*)  Value not defined in all devices.
  *
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800d594:	b480      	push	{r7}
 800d596:	b085      	sub	sp, #20
 800d598:	af00      	add	r7, sp, #0
 800d59a:	6078      	str	r0, [r7, #4]
 800d59c:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 800d59e:	687b      	ldr	r3, [r7, #4]
 800d5a0:	689b      	ldr	r3, [r3, #8]
 800d5a2:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800d5a4:	68fa      	ldr	r2, [r7, #12]
 800d5a6:	4b09      	ldr	r3, [pc, #36]	; (800d5cc <TIM_ITRx_SetConfig+0x38>)
 800d5a8:	4013      	ands	r3, r2
 800d5aa:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800d5ac:	683a      	ldr	r2, [r7, #0]
 800d5ae:	68fb      	ldr	r3, [r7, #12]
 800d5b0:	4313      	orrs	r3, r2
 800d5b2:	f043 0307 	orr.w	r3, r3, #7
 800d5b6:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800d5b8:	687b      	ldr	r3, [r7, #4]
 800d5ba:	68fa      	ldr	r2, [r7, #12]
 800d5bc:	609a      	str	r2, [r3, #8]
}
 800d5be:	bf00      	nop
 800d5c0:	3714      	adds	r7, #20
 800d5c2:	46bd      	mov	sp, r7
 800d5c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d5c8:	4770      	bx	lr
 800d5ca:	bf00      	nop
 800d5cc:	ffcfff8f 	.word	0xffcfff8f

0800d5d0 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800d5d0:	b480      	push	{r7}
 800d5d2:	b087      	sub	sp, #28
 800d5d4:	af00      	add	r7, sp, #0
 800d5d6:	60f8      	str	r0, [r7, #12]
 800d5d8:	60b9      	str	r1, [r7, #8]
 800d5da:	607a      	str	r2, [r7, #4]
 800d5dc:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800d5de:	68fb      	ldr	r3, [r7, #12]
 800d5e0:	689b      	ldr	r3, [r3, #8]
 800d5e2:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800d5e4:	697b      	ldr	r3, [r7, #20]
 800d5e6:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800d5ea:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800d5ec:	683b      	ldr	r3, [r7, #0]
 800d5ee:	021a      	lsls	r2, r3, #8
 800d5f0:	687b      	ldr	r3, [r7, #4]
 800d5f2:	431a      	orrs	r2, r3
 800d5f4:	68bb      	ldr	r3, [r7, #8]
 800d5f6:	4313      	orrs	r3, r2
 800d5f8:	697a      	ldr	r2, [r7, #20]
 800d5fa:	4313      	orrs	r3, r2
 800d5fc:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800d5fe:	68fb      	ldr	r3, [r7, #12]
 800d600:	697a      	ldr	r2, [r7, #20]
 800d602:	609a      	str	r2, [r3, #8]
}
 800d604:	bf00      	nop
 800d606:	371c      	adds	r7, #28
 800d608:	46bd      	mov	sp, r7
 800d60a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d60e:	4770      	bx	lr

0800d610 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 800d610:	b480      	push	{r7}
 800d612:	b085      	sub	sp, #20
 800d614:	af00      	add	r7, sp, #0
 800d616:	6078      	str	r0, [r7, #4]
 800d618:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800d61a:	687b      	ldr	r3, [r7, #4]
 800d61c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800d620:	2b01      	cmp	r3, #1
 800d622:	d101      	bne.n	800d628 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800d624:	2302      	movs	r3, #2
 800d626:	e06d      	b.n	800d704 <HAL_TIMEx_MasterConfigSynchronization+0xf4>
 800d628:	687b      	ldr	r3, [r7, #4]
 800d62a:	2201      	movs	r2, #1
 800d62c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800d630:	687b      	ldr	r3, [r7, #4]
 800d632:	2202      	movs	r2, #2
 800d634:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800d638:	687b      	ldr	r3, [r7, #4]
 800d63a:	681b      	ldr	r3, [r3, #0]
 800d63c:	685b      	ldr	r3, [r3, #4]
 800d63e:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800d640:	687b      	ldr	r3, [r7, #4]
 800d642:	681b      	ldr	r3, [r3, #0]
 800d644:	689b      	ldr	r3, [r3, #8]
 800d646:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 800d648:	687b      	ldr	r3, [r7, #4]
 800d64a:	681b      	ldr	r3, [r3, #0]
 800d64c:	4a30      	ldr	r2, [pc, #192]	; (800d710 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 800d64e:	4293      	cmp	r3, r2
 800d650:	d004      	beq.n	800d65c <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 800d652:	687b      	ldr	r3, [r7, #4]
 800d654:	681b      	ldr	r3, [r3, #0]
 800d656:	4a2f      	ldr	r2, [pc, #188]	; (800d714 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 800d658:	4293      	cmp	r3, r2
 800d65a:	d108      	bne.n	800d66e <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 800d65c:	68fb      	ldr	r3, [r7, #12]
 800d65e:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 800d662:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 800d664:	683b      	ldr	r3, [r7, #0]
 800d666:	685b      	ldr	r3, [r3, #4]
 800d668:	68fa      	ldr	r2, [r7, #12]
 800d66a:	4313      	orrs	r3, r2
 800d66c:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800d66e:	68fb      	ldr	r3, [r7, #12]
 800d670:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800d674:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800d676:	683b      	ldr	r3, [r7, #0]
 800d678:	681b      	ldr	r3, [r3, #0]
 800d67a:	68fa      	ldr	r2, [r7, #12]
 800d67c:	4313      	orrs	r3, r2
 800d67e:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800d680:	687b      	ldr	r3, [r7, #4]
 800d682:	681b      	ldr	r3, [r3, #0]
 800d684:	68fa      	ldr	r2, [r7, #12]
 800d686:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800d688:	687b      	ldr	r3, [r7, #4]
 800d68a:	681b      	ldr	r3, [r3, #0]
 800d68c:	4a20      	ldr	r2, [pc, #128]	; (800d710 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 800d68e:	4293      	cmp	r3, r2
 800d690:	d022      	beq.n	800d6d8 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800d692:	687b      	ldr	r3, [r7, #4]
 800d694:	681b      	ldr	r3, [r3, #0]
 800d696:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800d69a:	d01d      	beq.n	800d6d8 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800d69c:	687b      	ldr	r3, [r7, #4]
 800d69e:	681b      	ldr	r3, [r3, #0]
 800d6a0:	4a1d      	ldr	r2, [pc, #116]	; (800d718 <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 800d6a2:	4293      	cmp	r3, r2
 800d6a4:	d018      	beq.n	800d6d8 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800d6a6:	687b      	ldr	r3, [r7, #4]
 800d6a8:	681b      	ldr	r3, [r3, #0]
 800d6aa:	4a1c      	ldr	r2, [pc, #112]	; (800d71c <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 800d6ac:	4293      	cmp	r3, r2
 800d6ae:	d013      	beq.n	800d6d8 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800d6b0:	687b      	ldr	r3, [r7, #4]
 800d6b2:	681b      	ldr	r3, [r3, #0]
 800d6b4:	4a1a      	ldr	r2, [pc, #104]	; (800d720 <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 800d6b6:	4293      	cmp	r3, r2
 800d6b8:	d00e      	beq.n	800d6d8 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800d6ba:	687b      	ldr	r3, [r7, #4]
 800d6bc:	681b      	ldr	r3, [r3, #0]
 800d6be:	4a15      	ldr	r2, [pc, #84]	; (800d714 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 800d6c0:	4293      	cmp	r3, r2
 800d6c2:	d009      	beq.n	800d6d8 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800d6c4:	687b      	ldr	r3, [r7, #4]
 800d6c6:	681b      	ldr	r3, [r3, #0]
 800d6c8:	4a16      	ldr	r2, [pc, #88]	; (800d724 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 800d6ca:	4293      	cmp	r3, r2
 800d6cc:	d004      	beq.n	800d6d8 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800d6ce:	687b      	ldr	r3, [r7, #4]
 800d6d0:	681b      	ldr	r3, [r3, #0]
 800d6d2:	4a15      	ldr	r2, [pc, #84]	; (800d728 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 800d6d4:	4293      	cmp	r3, r2
 800d6d6:	d10c      	bne.n	800d6f2 <HAL_TIMEx_MasterConfigSynchronization+0xe2>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800d6d8:	68bb      	ldr	r3, [r7, #8]
 800d6da:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800d6de:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800d6e0:	683b      	ldr	r3, [r7, #0]
 800d6e2:	689b      	ldr	r3, [r3, #8]
 800d6e4:	68ba      	ldr	r2, [r7, #8]
 800d6e6:	4313      	orrs	r3, r2
 800d6e8:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800d6ea:	687b      	ldr	r3, [r7, #4]
 800d6ec:	681b      	ldr	r3, [r3, #0]
 800d6ee:	68ba      	ldr	r2, [r7, #8]
 800d6f0:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800d6f2:	687b      	ldr	r3, [r7, #4]
 800d6f4:	2201      	movs	r2, #1
 800d6f6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800d6fa:	687b      	ldr	r3, [r7, #4]
 800d6fc:	2200      	movs	r2, #0
 800d6fe:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800d702:	2300      	movs	r3, #0
}
 800d704:	4618      	mov	r0, r3
 800d706:	3714      	adds	r7, #20
 800d708:	46bd      	mov	sp, r7
 800d70a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d70e:	4770      	bx	lr
 800d710:	40010000 	.word	0x40010000
 800d714:	40010400 	.word	0x40010400
 800d718:	40000400 	.word	0x40000400
 800d71c:	40000800 	.word	0x40000800
 800d720:	40000c00 	.word	0x40000c00
 800d724:	40001800 	.word	0x40001800
 800d728:	40014000 	.word	0x40014000

0800d72c <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800d72c:	b580      	push	{r7, lr}
 800d72e:	b082      	sub	sp, #8
 800d730:	af00      	add	r7, sp, #0
 800d732:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800d734:	687b      	ldr	r3, [r7, #4]
 800d736:	2b00      	cmp	r3, #0
 800d738:	d101      	bne.n	800d73e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800d73a:	2301      	movs	r3, #1
 800d73c:	e042      	b.n	800d7c4 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800d73e:	687b      	ldr	r3, [r7, #4]
 800d740:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800d744:	2b00      	cmp	r3, #0
 800d746:	d106      	bne.n	800d756 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800d748:	687b      	ldr	r3, [r7, #4]
 800d74a:	2200      	movs	r2, #0
 800d74c:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800d750:	6878      	ldr	r0, [r7, #4]
 800d752:	f7f5 fc33 	bl	8002fbc <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800d756:	687b      	ldr	r3, [r7, #4]
 800d758:	2224      	movs	r2, #36	; 0x24
 800d75a:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  __HAL_UART_DISABLE(huart);
 800d75e:	687b      	ldr	r3, [r7, #4]
 800d760:	681b      	ldr	r3, [r3, #0]
 800d762:	681a      	ldr	r2, [r3, #0]
 800d764:	687b      	ldr	r3, [r7, #4]
 800d766:	681b      	ldr	r3, [r3, #0]
 800d768:	f022 0201 	bic.w	r2, r2, #1
 800d76c:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800d76e:	6878      	ldr	r0, [r7, #4]
 800d770:	f000 f8ba 	bl	800d8e8 <UART_SetConfig>
 800d774:	4603      	mov	r3, r0
 800d776:	2b01      	cmp	r3, #1
 800d778:	d101      	bne.n	800d77e <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 800d77a:	2301      	movs	r3, #1
 800d77c:	e022      	b.n	800d7c4 <HAL_UART_Init+0x98>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800d77e:	687b      	ldr	r3, [r7, #4]
 800d780:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800d782:	2b00      	cmp	r3, #0
 800d784:	d002      	beq.n	800d78c <HAL_UART_Init+0x60>
  {
    UART_AdvFeatureConfig(huart);
 800d786:	6878      	ldr	r0, [r7, #4]
 800d788:	f000 fe16 	bl	800e3b8 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800d78c:	687b      	ldr	r3, [r7, #4]
 800d78e:	681b      	ldr	r3, [r3, #0]
 800d790:	685a      	ldr	r2, [r3, #4]
 800d792:	687b      	ldr	r3, [r7, #4]
 800d794:	681b      	ldr	r3, [r3, #0]
 800d796:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800d79a:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800d79c:	687b      	ldr	r3, [r7, #4]
 800d79e:	681b      	ldr	r3, [r3, #0]
 800d7a0:	689a      	ldr	r2, [r3, #8]
 800d7a2:	687b      	ldr	r3, [r7, #4]
 800d7a4:	681b      	ldr	r3, [r3, #0]
 800d7a6:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800d7aa:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 800d7ac:	687b      	ldr	r3, [r7, #4]
 800d7ae:	681b      	ldr	r3, [r3, #0]
 800d7b0:	681a      	ldr	r2, [r3, #0]
 800d7b2:	687b      	ldr	r3, [r7, #4]
 800d7b4:	681b      	ldr	r3, [r3, #0]
 800d7b6:	f042 0201 	orr.w	r2, r2, #1
 800d7ba:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 800d7bc:	6878      	ldr	r0, [r7, #4]
 800d7be:	f000 fe9d 	bl	800e4fc <UART_CheckIdleState>
 800d7c2:	4603      	mov	r3, r0
}
 800d7c4:	4618      	mov	r0, r3
 800d7c6:	3708      	adds	r7, #8
 800d7c8:	46bd      	mov	sp, r7
 800d7ca:	bd80      	pop	{r7, pc}

0800d7cc <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800d7cc:	b580      	push	{r7, lr}
 800d7ce:	b08a      	sub	sp, #40	; 0x28
 800d7d0:	af02      	add	r7, sp, #8
 800d7d2:	60f8      	str	r0, [r7, #12]
 800d7d4:	60b9      	str	r1, [r7, #8]
 800d7d6:	603b      	str	r3, [r7, #0]
 800d7d8:	4613      	mov	r3, r2
 800d7da:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800d7dc:	68fb      	ldr	r3, [r7, #12]
 800d7de:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800d7e2:	2b20      	cmp	r3, #32
 800d7e4:	d17b      	bne.n	800d8de <HAL_UART_Transmit+0x112>
  {
    if ((pData == NULL) || (Size == 0U))
 800d7e6:	68bb      	ldr	r3, [r7, #8]
 800d7e8:	2b00      	cmp	r3, #0
 800d7ea:	d002      	beq.n	800d7f2 <HAL_UART_Transmit+0x26>
 800d7ec:	88fb      	ldrh	r3, [r7, #6]
 800d7ee:	2b00      	cmp	r3, #0
 800d7f0:	d101      	bne.n	800d7f6 <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 800d7f2:	2301      	movs	r3, #1
 800d7f4:	e074      	b.n	800d8e0 <HAL_UART_Transmit+0x114>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800d7f6:	68fb      	ldr	r3, [r7, #12]
 800d7f8:	2200      	movs	r2, #0
 800d7fa:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800d7fe:	68fb      	ldr	r3, [r7, #12]
 800d800:	2221      	movs	r2, #33	; 0x21
 800d802:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800d806:	f7f6 f8b9 	bl	800397c <HAL_GetTick>
 800d80a:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 800d80c:	68fb      	ldr	r3, [r7, #12]
 800d80e:	88fa      	ldrh	r2, [r7, #6]
 800d810:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
    huart->TxXferCount = Size;
 800d814:	68fb      	ldr	r3, [r7, #12]
 800d816:	88fa      	ldrh	r2, [r7, #6]
 800d818:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800d81c:	68fb      	ldr	r3, [r7, #12]
 800d81e:	689b      	ldr	r3, [r3, #8]
 800d820:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800d824:	d108      	bne.n	800d838 <HAL_UART_Transmit+0x6c>
 800d826:	68fb      	ldr	r3, [r7, #12]
 800d828:	691b      	ldr	r3, [r3, #16]
 800d82a:	2b00      	cmp	r3, #0
 800d82c:	d104      	bne.n	800d838 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 800d82e:	2300      	movs	r3, #0
 800d830:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 800d832:	68bb      	ldr	r3, [r7, #8]
 800d834:	61bb      	str	r3, [r7, #24]
 800d836:	e003      	b.n	800d840 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 800d838:	68bb      	ldr	r3, [r7, #8]
 800d83a:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800d83c:	2300      	movs	r3, #0
 800d83e:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 800d840:	e030      	b.n	800d8a4 <HAL_UART_Transmit+0xd8>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800d842:	683b      	ldr	r3, [r7, #0]
 800d844:	9300      	str	r3, [sp, #0]
 800d846:	697b      	ldr	r3, [r7, #20]
 800d848:	2200      	movs	r2, #0
 800d84a:	2180      	movs	r1, #128	; 0x80
 800d84c:	68f8      	ldr	r0, [r7, #12]
 800d84e:	f000 feff 	bl	800e650 <UART_WaitOnFlagUntilTimeout>
 800d852:	4603      	mov	r3, r0
 800d854:	2b00      	cmp	r3, #0
 800d856:	d005      	beq.n	800d864 <HAL_UART_Transmit+0x98>
      {

        huart->gState = HAL_UART_STATE_READY;
 800d858:	68fb      	ldr	r3, [r7, #12]
 800d85a:	2220      	movs	r2, #32
 800d85c:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

        return HAL_TIMEOUT;
 800d860:	2303      	movs	r3, #3
 800d862:	e03d      	b.n	800d8e0 <HAL_UART_Transmit+0x114>
      }
      if (pdata8bits == NULL)
 800d864:	69fb      	ldr	r3, [r7, #28]
 800d866:	2b00      	cmp	r3, #0
 800d868:	d10b      	bne.n	800d882 <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 800d86a:	69bb      	ldr	r3, [r7, #24]
 800d86c:	881b      	ldrh	r3, [r3, #0]
 800d86e:	461a      	mov	r2, r3
 800d870:	68fb      	ldr	r3, [r7, #12]
 800d872:	681b      	ldr	r3, [r3, #0]
 800d874:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800d878:	629a      	str	r2, [r3, #40]	; 0x28
        pdata16bits++;
 800d87a:	69bb      	ldr	r3, [r7, #24]
 800d87c:	3302      	adds	r3, #2
 800d87e:	61bb      	str	r3, [r7, #24]
 800d880:	e007      	b.n	800d892 <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 800d882:	69fb      	ldr	r3, [r7, #28]
 800d884:	781a      	ldrb	r2, [r3, #0]
 800d886:	68fb      	ldr	r3, [r7, #12]
 800d888:	681b      	ldr	r3, [r3, #0]
 800d88a:	629a      	str	r2, [r3, #40]	; 0x28
        pdata8bits++;
 800d88c:	69fb      	ldr	r3, [r7, #28]
 800d88e:	3301      	adds	r3, #1
 800d890:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800d892:	68fb      	ldr	r3, [r7, #12]
 800d894:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 800d898:	b29b      	uxth	r3, r3
 800d89a:	3b01      	subs	r3, #1
 800d89c:	b29a      	uxth	r2, r3
 800d89e:	68fb      	ldr	r3, [r7, #12]
 800d8a0:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
    while (huart->TxXferCount > 0U)
 800d8a4:	68fb      	ldr	r3, [r7, #12]
 800d8a6:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 800d8aa:	b29b      	uxth	r3, r3
 800d8ac:	2b00      	cmp	r3, #0
 800d8ae:	d1c8      	bne.n	800d842 <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800d8b0:	683b      	ldr	r3, [r7, #0]
 800d8b2:	9300      	str	r3, [sp, #0]
 800d8b4:	697b      	ldr	r3, [r7, #20]
 800d8b6:	2200      	movs	r2, #0
 800d8b8:	2140      	movs	r1, #64	; 0x40
 800d8ba:	68f8      	ldr	r0, [r7, #12]
 800d8bc:	f000 fec8 	bl	800e650 <UART_WaitOnFlagUntilTimeout>
 800d8c0:	4603      	mov	r3, r0
 800d8c2:	2b00      	cmp	r3, #0
 800d8c4:	d005      	beq.n	800d8d2 <HAL_UART_Transmit+0x106>
    {
      huart->gState = HAL_UART_STATE_READY;
 800d8c6:	68fb      	ldr	r3, [r7, #12]
 800d8c8:	2220      	movs	r2, #32
 800d8ca:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

      return HAL_TIMEOUT;
 800d8ce:	2303      	movs	r3, #3
 800d8d0:	e006      	b.n	800d8e0 <HAL_UART_Transmit+0x114>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800d8d2:	68fb      	ldr	r3, [r7, #12]
 800d8d4:	2220      	movs	r2, #32
 800d8d6:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

    return HAL_OK;
 800d8da:	2300      	movs	r3, #0
 800d8dc:	e000      	b.n	800d8e0 <HAL_UART_Transmit+0x114>
  }
  else
  {
    return HAL_BUSY;
 800d8de:	2302      	movs	r3, #2
  }
}
 800d8e0:	4618      	mov	r0, r3
 800d8e2:	3720      	adds	r7, #32
 800d8e4:	46bd      	mov	sp, r7
 800d8e6:	bd80      	pop	{r7, pc}

0800d8e8 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 800d8e8:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800d8ec:	b092      	sub	sp, #72	; 0x48
 800d8ee:	af00      	add	r7, sp, #0
 800d8f0:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 800d8f2:	2300      	movs	r3, #0
 800d8f4:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800d8f8:	697b      	ldr	r3, [r7, #20]
 800d8fa:	689a      	ldr	r2, [r3, #8]
 800d8fc:	697b      	ldr	r3, [r7, #20]
 800d8fe:	691b      	ldr	r3, [r3, #16]
 800d900:	431a      	orrs	r2, r3
 800d902:	697b      	ldr	r3, [r7, #20]
 800d904:	695b      	ldr	r3, [r3, #20]
 800d906:	431a      	orrs	r2, r3
 800d908:	697b      	ldr	r3, [r7, #20]
 800d90a:	69db      	ldr	r3, [r3, #28]
 800d90c:	4313      	orrs	r3, r2
 800d90e:	647b      	str	r3, [r7, #68]	; 0x44
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800d910:	697b      	ldr	r3, [r7, #20]
 800d912:	681b      	ldr	r3, [r3, #0]
 800d914:	681a      	ldr	r2, [r3, #0]
 800d916:	4bbe      	ldr	r3, [pc, #760]	; (800dc10 <UART_SetConfig+0x328>)
 800d918:	4013      	ands	r3, r2
 800d91a:	697a      	ldr	r2, [r7, #20]
 800d91c:	6812      	ldr	r2, [r2, #0]
 800d91e:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800d920:	430b      	orrs	r3, r1
 800d922:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800d924:	697b      	ldr	r3, [r7, #20]
 800d926:	681b      	ldr	r3, [r3, #0]
 800d928:	685b      	ldr	r3, [r3, #4]
 800d92a:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800d92e:	697b      	ldr	r3, [r7, #20]
 800d930:	68da      	ldr	r2, [r3, #12]
 800d932:	697b      	ldr	r3, [r7, #20]
 800d934:	681b      	ldr	r3, [r3, #0]
 800d936:	430a      	orrs	r2, r1
 800d938:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800d93a:	697b      	ldr	r3, [r7, #20]
 800d93c:	699b      	ldr	r3, [r3, #24]
 800d93e:	647b      	str	r3, [r7, #68]	; 0x44

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 800d940:	697b      	ldr	r3, [r7, #20]
 800d942:	681b      	ldr	r3, [r3, #0]
 800d944:	4ab3      	ldr	r2, [pc, #716]	; (800dc14 <UART_SetConfig+0x32c>)
 800d946:	4293      	cmp	r3, r2
 800d948:	d004      	beq.n	800d954 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 800d94a:	697b      	ldr	r3, [r7, #20]
 800d94c:	6a1b      	ldr	r3, [r3, #32]
 800d94e:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800d950:	4313      	orrs	r3, r2
 800d952:	647b      	str	r3, [r7, #68]	; 0x44
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800d954:	697b      	ldr	r3, [r7, #20]
 800d956:	681b      	ldr	r3, [r3, #0]
 800d958:	689a      	ldr	r2, [r3, #8]
 800d95a:	4baf      	ldr	r3, [pc, #700]	; (800dc18 <UART_SetConfig+0x330>)
 800d95c:	4013      	ands	r3, r2
 800d95e:	697a      	ldr	r2, [r7, #20]
 800d960:	6812      	ldr	r2, [r2, #0]
 800d962:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800d964:	430b      	orrs	r3, r1
 800d966:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 800d968:	697b      	ldr	r3, [r7, #20]
 800d96a:	681b      	ldr	r3, [r3, #0]
 800d96c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d96e:	f023 010f 	bic.w	r1, r3, #15
 800d972:	697b      	ldr	r3, [r7, #20]
 800d974:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800d976:	697b      	ldr	r3, [r7, #20]
 800d978:	681b      	ldr	r3, [r3, #0]
 800d97a:	430a      	orrs	r2, r1
 800d97c:	62da      	str	r2, [r3, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800d97e:	697b      	ldr	r3, [r7, #20]
 800d980:	681b      	ldr	r3, [r3, #0]
 800d982:	4aa6      	ldr	r2, [pc, #664]	; (800dc1c <UART_SetConfig+0x334>)
 800d984:	4293      	cmp	r3, r2
 800d986:	d177      	bne.n	800da78 <UART_SetConfig+0x190>
 800d988:	4ba5      	ldr	r3, [pc, #660]	; (800dc20 <UART_SetConfig+0x338>)
 800d98a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800d98c:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800d990:	2b28      	cmp	r3, #40	; 0x28
 800d992:	d86d      	bhi.n	800da70 <UART_SetConfig+0x188>
 800d994:	a201      	add	r2, pc, #4	; (adr r2, 800d99c <UART_SetConfig+0xb4>)
 800d996:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800d99a:	bf00      	nop
 800d99c:	0800da41 	.word	0x0800da41
 800d9a0:	0800da71 	.word	0x0800da71
 800d9a4:	0800da71 	.word	0x0800da71
 800d9a8:	0800da71 	.word	0x0800da71
 800d9ac:	0800da71 	.word	0x0800da71
 800d9b0:	0800da71 	.word	0x0800da71
 800d9b4:	0800da71 	.word	0x0800da71
 800d9b8:	0800da71 	.word	0x0800da71
 800d9bc:	0800da49 	.word	0x0800da49
 800d9c0:	0800da71 	.word	0x0800da71
 800d9c4:	0800da71 	.word	0x0800da71
 800d9c8:	0800da71 	.word	0x0800da71
 800d9cc:	0800da71 	.word	0x0800da71
 800d9d0:	0800da71 	.word	0x0800da71
 800d9d4:	0800da71 	.word	0x0800da71
 800d9d8:	0800da71 	.word	0x0800da71
 800d9dc:	0800da51 	.word	0x0800da51
 800d9e0:	0800da71 	.word	0x0800da71
 800d9e4:	0800da71 	.word	0x0800da71
 800d9e8:	0800da71 	.word	0x0800da71
 800d9ec:	0800da71 	.word	0x0800da71
 800d9f0:	0800da71 	.word	0x0800da71
 800d9f4:	0800da71 	.word	0x0800da71
 800d9f8:	0800da71 	.word	0x0800da71
 800d9fc:	0800da59 	.word	0x0800da59
 800da00:	0800da71 	.word	0x0800da71
 800da04:	0800da71 	.word	0x0800da71
 800da08:	0800da71 	.word	0x0800da71
 800da0c:	0800da71 	.word	0x0800da71
 800da10:	0800da71 	.word	0x0800da71
 800da14:	0800da71 	.word	0x0800da71
 800da18:	0800da71 	.word	0x0800da71
 800da1c:	0800da61 	.word	0x0800da61
 800da20:	0800da71 	.word	0x0800da71
 800da24:	0800da71 	.word	0x0800da71
 800da28:	0800da71 	.word	0x0800da71
 800da2c:	0800da71 	.word	0x0800da71
 800da30:	0800da71 	.word	0x0800da71
 800da34:	0800da71 	.word	0x0800da71
 800da38:	0800da71 	.word	0x0800da71
 800da3c:	0800da69 	.word	0x0800da69
 800da40:	2301      	movs	r3, #1
 800da42:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800da46:	e222      	b.n	800de8e <UART_SetConfig+0x5a6>
 800da48:	2304      	movs	r3, #4
 800da4a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800da4e:	e21e      	b.n	800de8e <UART_SetConfig+0x5a6>
 800da50:	2308      	movs	r3, #8
 800da52:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800da56:	e21a      	b.n	800de8e <UART_SetConfig+0x5a6>
 800da58:	2310      	movs	r3, #16
 800da5a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800da5e:	e216      	b.n	800de8e <UART_SetConfig+0x5a6>
 800da60:	2320      	movs	r3, #32
 800da62:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800da66:	e212      	b.n	800de8e <UART_SetConfig+0x5a6>
 800da68:	2340      	movs	r3, #64	; 0x40
 800da6a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800da6e:	e20e      	b.n	800de8e <UART_SetConfig+0x5a6>
 800da70:	2380      	movs	r3, #128	; 0x80
 800da72:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800da76:	e20a      	b.n	800de8e <UART_SetConfig+0x5a6>
 800da78:	697b      	ldr	r3, [r7, #20]
 800da7a:	681b      	ldr	r3, [r3, #0]
 800da7c:	4a69      	ldr	r2, [pc, #420]	; (800dc24 <UART_SetConfig+0x33c>)
 800da7e:	4293      	cmp	r3, r2
 800da80:	d130      	bne.n	800dae4 <UART_SetConfig+0x1fc>
 800da82:	4b67      	ldr	r3, [pc, #412]	; (800dc20 <UART_SetConfig+0x338>)
 800da84:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800da86:	f003 0307 	and.w	r3, r3, #7
 800da8a:	2b05      	cmp	r3, #5
 800da8c:	d826      	bhi.n	800dadc <UART_SetConfig+0x1f4>
 800da8e:	a201      	add	r2, pc, #4	; (adr r2, 800da94 <UART_SetConfig+0x1ac>)
 800da90:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800da94:	0800daad 	.word	0x0800daad
 800da98:	0800dab5 	.word	0x0800dab5
 800da9c:	0800dabd 	.word	0x0800dabd
 800daa0:	0800dac5 	.word	0x0800dac5
 800daa4:	0800dacd 	.word	0x0800dacd
 800daa8:	0800dad5 	.word	0x0800dad5
 800daac:	2300      	movs	r3, #0
 800daae:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800dab2:	e1ec      	b.n	800de8e <UART_SetConfig+0x5a6>
 800dab4:	2304      	movs	r3, #4
 800dab6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800daba:	e1e8      	b.n	800de8e <UART_SetConfig+0x5a6>
 800dabc:	2308      	movs	r3, #8
 800dabe:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800dac2:	e1e4      	b.n	800de8e <UART_SetConfig+0x5a6>
 800dac4:	2310      	movs	r3, #16
 800dac6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800daca:	e1e0      	b.n	800de8e <UART_SetConfig+0x5a6>
 800dacc:	2320      	movs	r3, #32
 800dace:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800dad2:	e1dc      	b.n	800de8e <UART_SetConfig+0x5a6>
 800dad4:	2340      	movs	r3, #64	; 0x40
 800dad6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800dada:	e1d8      	b.n	800de8e <UART_SetConfig+0x5a6>
 800dadc:	2380      	movs	r3, #128	; 0x80
 800dade:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800dae2:	e1d4      	b.n	800de8e <UART_SetConfig+0x5a6>
 800dae4:	697b      	ldr	r3, [r7, #20]
 800dae6:	681b      	ldr	r3, [r3, #0]
 800dae8:	4a4f      	ldr	r2, [pc, #316]	; (800dc28 <UART_SetConfig+0x340>)
 800daea:	4293      	cmp	r3, r2
 800daec:	d130      	bne.n	800db50 <UART_SetConfig+0x268>
 800daee:	4b4c      	ldr	r3, [pc, #304]	; (800dc20 <UART_SetConfig+0x338>)
 800daf0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800daf2:	f003 0307 	and.w	r3, r3, #7
 800daf6:	2b05      	cmp	r3, #5
 800daf8:	d826      	bhi.n	800db48 <UART_SetConfig+0x260>
 800dafa:	a201      	add	r2, pc, #4	; (adr r2, 800db00 <UART_SetConfig+0x218>)
 800dafc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800db00:	0800db19 	.word	0x0800db19
 800db04:	0800db21 	.word	0x0800db21
 800db08:	0800db29 	.word	0x0800db29
 800db0c:	0800db31 	.word	0x0800db31
 800db10:	0800db39 	.word	0x0800db39
 800db14:	0800db41 	.word	0x0800db41
 800db18:	2300      	movs	r3, #0
 800db1a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800db1e:	e1b6      	b.n	800de8e <UART_SetConfig+0x5a6>
 800db20:	2304      	movs	r3, #4
 800db22:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800db26:	e1b2      	b.n	800de8e <UART_SetConfig+0x5a6>
 800db28:	2308      	movs	r3, #8
 800db2a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800db2e:	e1ae      	b.n	800de8e <UART_SetConfig+0x5a6>
 800db30:	2310      	movs	r3, #16
 800db32:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800db36:	e1aa      	b.n	800de8e <UART_SetConfig+0x5a6>
 800db38:	2320      	movs	r3, #32
 800db3a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800db3e:	e1a6      	b.n	800de8e <UART_SetConfig+0x5a6>
 800db40:	2340      	movs	r3, #64	; 0x40
 800db42:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800db46:	e1a2      	b.n	800de8e <UART_SetConfig+0x5a6>
 800db48:	2380      	movs	r3, #128	; 0x80
 800db4a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800db4e:	e19e      	b.n	800de8e <UART_SetConfig+0x5a6>
 800db50:	697b      	ldr	r3, [r7, #20]
 800db52:	681b      	ldr	r3, [r3, #0]
 800db54:	4a35      	ldr	r2, [pc, #212]	; (800dc2c <UART_SetConfig+0x344>)
 800db56:	4293      	cmp	r3, r2
 800db58:	d130      	bne.n	800dbbc <UART_SetConfig+0x2d4>
 800db5a:	4b31      	ldr	r3, [pc, #196]	; (800dc20 <UART_SetConfig+0x338>)
 800db5c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800db5e:	f003 0307 	and.w	r3, r3, #7
 800db62:	2b05      	cmp	r3, #5
 800db64:	d826      	bhi.n	800dbb4 <UART_SetConfig+0x2cc>
 800db66:	a201      	add	r2, pc, #4	; (adr r2, 800db6c <UART_SetConfig+0x284>)
 800db68:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800db6c:	0800db85 	.word	0x0800db85
 800db70:	0800db8d 	.word	0x0800db8d
 800db74:	0800db95 	.word	0x0800db95
 800db78:	0800db9d 	.word	0x0800db9d
 800db7c:	0800dba5 	.word	0x0800dba5
 800db80:	0800dbad 	.word	0x0800dbad
 800db84:	2300      	movs	r3, #0
 800db86:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800db8a:	e180      	b.n	800de8e <UART_SetConfig+0x5a6>
 800db8c:	2304      	movs	r3, #4
 800db8e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800db92:	e17c      	b.n	800de8e <UART_SetConfig+0x5a6>
 800db94:	2308      	movs	r3, #8
 800db96:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800db9a:	e178      	b.n	800de8e <UART_SetConfig+0x5a6>
 800db9c:	2310      	movs	r3, #16
 800db9e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800dba2:	e174      	b.n	800de8e <UART_SetConfig+0x5a6>
 800dba4:	2320      	movs	r3, #32
 800dba6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800dbaa:	e170      	b.n	800de8e <UART_SetConfig+0x5a6>
 800dbac:	2340      	movs	r3, #64	; 0x40
 800dbae:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800dbb2:	e16c      	b.n	800de8e <UART_SetConfig+0x5a6>
 800dbb4:	2380      	movs	r3, #128	; 0x80
 800dbb6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800dbba:	e168      	b.n	800de8e <UART_SetConfig+0x5a6>
 800dbbc:	697b      	ldr	r3, [r7, #20]
 800dbbe:	681b      	ldr	r3, [r3, #0]
 800dbc0:	4a1b      	ldr	r2, [pc, #108]	; (800dc30 <UART_SetConfig+0x348>)
 800dbc2:	4293      	cmp	r3, r2
 800dbc4:	d142      	bne.n	800dc4c <UART_SetConfig+0x364>
 800dbc6:	4b16      	ldr	r3, [pc, #88]	; (800dc20 <UART_SetConfig+0x338>)
 800dbc8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800dbca:	f003 0307 	and.w	r3, r3, #7
 800dbce:	2b05      	cmp	r3, #5
 800dbd0:	d838      	bhi.n	800dc44 <UART_SetConfig+0x35c>
 800dbd2:	a201      	add	r2, pc, #4	; (adr r2, 800dbd8 <UART_SetConfig+0x2f0>)
 800dbd4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800dbd8:	0800dbf1 	.word	0x0800dbf1
 800dbdc:	0800dbf9 	.word	0x0800dbf9
 800dbe0:	0800dc01 	.word	0x0800dc01
 800dbe4:	0800dc09 	.word	0x0800dc09
 800dbe8:	0800dc35 	.word	0x0800dc35
 800dbec:	0800dc3d 	.word	0x0800dc3d
 800dbf0:	2300      	movs	r3, #0
 800dbf2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800dbf6:	e14a      	b.n	800de8e <UART_SetConfig+0x5a6>
 800dbf8:	2304      	movs	r3, #4
 800dbfa:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800dbfe:	e146      	b.n	800de8e <UART_SetConfig+0x5a6>
 800dc00:	2308      	movs	r3, #8
 800dc02:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800dc06:	e142      	b.n	800de8e <UART_SetConfig+0x5a6>
 800dc08:	2310      	movs	r3, #16
 800dc0a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800dc0e:	e13e      	b.n	800de8e <UART_SetConfig+0x5a6>
 800dc10:	cfff69f3 	.word	0xcfff69f3
 800dc14:	58000c00 	.word	0x58000c00
 800dc18:	11fff4ff 	.word	0x11fff4ff
 800dc1c:	40011000 	.word	0x40011000
 800dc20:	58024400 	.word	0x58024400
 800dc24:	40004400 	.word	0x40004400
 800dc28:	40004800 	.word	0x40004800
 800dc2c:	40004c00 	.word	0x40004c00
 800dc30:	40005000 	.word	0x40005000
 800dc34:	2320      	movs	r3, #32
 800dc36:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800dc3a:	e128      	b.n	800de8e <UART_SetConfig+0x5a6>
 800dc3c:	2340      	movs	r3, #64	; 0x40
 800dc3e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800dc42:	e124      	b.n	800de8e <UART_SetConfig+0x5a6>
 800dc44:	2380      	movs	r3, #128	; 0x80
 800dc46:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800dc4a:	e120      	b.n	800de8e <UART_SetConfig+0x5a6>
 800dc4c:	697b      	ldr	r3, [r7, #20]
 800dc4e:	681b      	ldr	r3, [r3, #0]
 800dc50:	4acb      	ldr	r2, [pc, #812]	; (800df80 <UART_SetConfig+0x698>)
 800dc52:	4293      	cmp	r3, r2
 800dc54:	d176      	bne.n	800dd44 <UART_SetConfig+0x45c>
 800dc56:	4bcb      	ldr	r3, [pc, #812]	; (800df84 <UART_SetConfig+0x69c>)
 800dc58:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800dc5a:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800dc5e:	2b28      	cmp	r3, #40	; 0x28
 800dc60:	d86c      	bhi.n	800dd3c <UART_SetConfig+0x454>
 800dc62:	a201      	add	r2, pc, #4	; (adr r2, 800dc68 <UART_SetConfig+0x380>)
 800dc64:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800dc68:	0800dd0d 	.word	0x0800dd0d
 800dc6c:	0800dd3d 	.word	0x0800dd3d
 800dc70:	0800dd3d 	.word	0x0800dd3d
 800dc74:	0800dd3d 	.word	0x0800dd3d
 800dc78:	0800dd3d 	.word	0x0800dd3d
 800dc7c:	0800dd3d 	.word	0x0800dd3d
 800dc80:	0800dd3d 	.word	0x0800dd3d
 800dc84:	0800dd3d 	.word	0x0800dd3d
 800dc88:	0800dd15 	.word	0x0800dd15
 800dc8c:	0800dd3d 	.word	0x0800dd3d
 800dc90:	0800dd3d 	.word	0x0800dd3d
 800dc94:	0800dd3d 	.word	0x0800dd3d
 800dc98:	0800dd3d 	.word	0x0800dd3d
 800dc9c:	0800dd3d 	.word	0x0800dd3d
 800dca0:	0800dd3d 	.word	0x0800dd3d
 800dca4:	0800dd3d 	.word	0x0800dd3d
 800dca8:	0800dd1d 	.word	0x0800dd1d
 800dcac:	0800dd3d 	.word	0x0800dd3d
 800dcb0:	0800dd3d 	.word	0x0800dd3d
 800dcb4:	0800dd3d 	.word	0x0800dd3d
 800dcb8:	0800dd3d 	.word	0x0800dd3d
 800dcbc:	0800dd3d 	.word	0x0800dd3d
 800dcc0:	0800dd3d 	.word	0x0800dd3d
 800dcc4:	0800dd3d 	.word	0x0800dd3d
 800dcc8:	0800dd25 	.word	0x0800dd25
 800dccc:	0800dd3d 	.word	0x0800dd3d
 800dcd0:	0800dd3d 	.word	0x0800dd3d
 800dcd4:	0800dd3d 	.word	0x0800dd3d
 800dcd8:	0800dd3d 	.word	0x0800dd3d
 800dcdc:	0800dd3d 	.word	0x0800dd3d
 800dce0:	0800dd3d 	.word	0x0800dd3d
 800dce4:	0800dd3d 	.word	0x0800dd3d
 800dce8:	0800dd2d 	.word	0x0800dd2d
 800dcec:	0800dd3d 	.word	0x0800dd3d
 800dcf0:	0800dd3d 	.word	0x0800dd3d
 800dcf4:	0800dd3d 	.word	0x0800dd3d
 800dcf8:	0800dd3d 	.word	0x0800dd3d
 800dcfc:	0800dd3d 	.word	0x0800dd3d
 800dd00:	0800dd3d 	.word	0x0800dd3d
 800dd04:	0800dd3d 	.word	0x0800dd3d
 800dd08:	0800dd35 	.word	0x0800dd35
 800dd0c:	2301      	movs	r3, #1
 800dd0e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800dd12:	e0bc      	b.n	800de8e <UART_SetConfig+0x5a6>
 800dd14:	2304      	movs	r3, #4
 800dd16:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800dd1a:	e0b8      	b.n	800de8e <UART_SetConfig+0x5a6>
 800dd1c:	2308      	movs	r3, #8
 800dd1e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800dd22:	e0b4      	b.n	800de8e <UART_SetConfig+0x5a6>
 800dd24:	2310      	movs	r3, #16
 800dd26:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800dd2a:	e0b0      	b.n	800de8e <UART_SetConfig+0x5a6>
 800dd2c:	2320      	movs	r3, #32
 800dd2e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800dd32:	e0ac      	b.n	800de8e <UART_SetConfig+0x5a6>
 800dd34:	2340      	movs	r3, #64	; 0x40
 800dd36:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800dd3a:	e0a8      	b.n	800de8e <UART_SetConfig+0x5a6>
 800dd3c:	2380      	movs	r3, #128	; 0x80
 800dd3e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800dd42:	e0a4      	b.n	800de8e <UART_SetConfig+0x5a6>
 800dd44:	697b      	ldr	r3, [r7, #20]
 800dd46:	681b      	ldr	r3, [r3, #0]
 800dd48:	4a8f      	ldr	r2, [pc, #572]	; (800df88 <UART_SetConfig+0x6a0>)
 800dd4a:	4293      	cmp	r3, r2
 800dd4c:	d130      	bne.n	800ddb0 <UART_SetConfig+0x4c8>
 800dd4e:	4b8d      	ldr	r3, [pc, #564]	; (800df84 <UART_SetConfig+0x69c>)
 800dd50:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800dd52:	f003 0307 	and.w	r3, r3, #7
 800dd56:	2b05      	cmp	r3, #5
 800dd58:	d826      	bhi.n	800dda8 <UART_SetConfig+0x4c0>
 800dd5a:	a201      	add	r2, pc, #4	; (adr r2, 800dd60 <UART_SetConfig+0x478>)
 800dd5c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800dd60:	0800dd79 	.word	0x0800dd79
 800dd64:	0800dd81 	.word	0x0800dd81
 800dd68:	0800dd89 	.word	0x0800dd89
 800dd6c:	0800dd91 	.word	0x0800dd91
 800dd70:	0800dd99 	.word	0x0800dd99
 800dd74:	0800dda1 	.word	0x0800dda1
 800dd78:	2300      	movs	r3, #0
 800dd7a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800dd7e:	e086      	b.n	800de8e <UART_SetConfig+0x5a6>
 800dd80:	2304      	movs	r3, #4
 800dd82:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800dd86:	e082      	b.n	800de8e <UART_SetConfig+0x5a6>
 800dd88:	2308      	movs	r3, #8
 800dd8a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800dd8e:	e07e      	b.n	800de8e <UART_SetConfig+0x5a6>
 800dd90:	2310      	movs	r3, #16
 800dd92:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800dd96:	e07a      	b.n	800de8e <UART_SetConfig+0x5a6>
 800dd98:	2320      	movs	r3, #32
 800dd9a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800dd9e:	e076      	b.n	800de8e <UART_SetConfig+0x5a6>
 800dda0:	2340      	movs	r3, #64	; 0x40
 800dda2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800dda6:	e072      	b.n	800de8e <UART_SetConfig+0x5a6>
 800dda8:	2380      	movs	r3, #128	; 0x80
 800ddaa:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800ddae:	e06e      	b.n	800de8e <UART_SetConfig+0x5a6>
 800ddb0:	697b      	ldr	r3, [r7, #20]
 800ddb2:	681b      	ldr	r3, [r3, #0]
 800ddb4:	4a75      	ldr	r2, [pc, #468]	; (800df8c <UART_SetConfig+0x6a4>)
 800ddb6:	4293      	cmp	r3, r2
 800ddb8:	d130      	bne.n	800de1c <UART_SetConfig+0x534>
 800ddba:	4b72      	ldr	r3, [pc, #456]	; (800df84 <UART_SetConfig+0x69c>)
 800ddbc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800ddbe:	f003 0307 	and.w	r3, r3, #7
 800ddc2:	2b05      	cmp	r3, #5
 800ddc4:	d826      	bhi.n	800de14 <UART_SetConfig+0x52c>
 800ddc6:	a201      	add	r2, pc, #4	; (adr r2, 800ddcc <UART_SetConfig+0x4e4>)
 800ddc8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ddcc:	0800dde5 	.word	0x0800dde5
 800ddd0:	0800dded 	.word	0x0800dded
 800ddd4:	0800ddf5 	.word	0x0800ddf5
 800ddd8:	0800ddfd 	.word	0x0800ddfd
 800dddc:	0800de05 	.word	0x0800de05
 800dde0:	0800de0d 	.word	0x0800de0d
 800dde4:	2300      	movs	r3, #0
 800dde6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800ddea:	e050      	b.n	800de8e <UART_SetConfig+0x5a6>
 800ddec:	2304      	movs	r3, #4
 800ddee:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800ddf2:	e04c      	b.n	800de8e <UART_SetConfig+0x5a6>
 800ddf4:	2308      	movs	r3, #8
 800ddf6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800ddfa:	e048      	b.n	800de8e <UART_SetConfig+0x5a6>
 800ddfc:	2310      	movs	r3, #16
 800ddfe:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800de02:	e044      	b.n	800de8e <UART_SetConfig+0x5a6>
 800de04:	2320      	movs	r3, #32
 800de06:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800de0a:	e040      	b.n	800de8e <UART_SetConfig+0x5a6>
 800de0c:	2340      	movs	r3, #64	; 0x40
 800de0e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800de12:	e03c      	b.n	800de8e <UART_SetConfig+0x5a6>
 800de14:	2380      	movs	r3, #128	; 0x80
 800de16:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800de1a:	e038      	b.n	800de8e <UART_SetConfig+0x5a6>
 800de1c:	697b      	ldr	r3, [r7, #20]
 800de1e:	681b      	ldr	r3, [r3, #0]
 800de20:	4a5b      	ldr	r2, [pc, #364]	; (800df90 <UART_SetConfig+0x6a8>)
 800de22:	4293      	cmp	r3, r2
 800de24:	d130      	bne.n	800de88 <UART_SetConfig+0x5a0>
 800de26:	4b57      	ldr	r3, [pc, #348]	; (800df84 <UART_SetConfig+0x69c>)
 800de28:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800de2a:	f003 0307 	and.w	r3, r3, #7
 800de2e:	2b05      	cmp	r3, #5
 800de30:	d826      	bhi.n	800de80 <UART_SetConfig+0x598>
 800de32:	a201      	add	r2, pc, #4	; (adr r2, 800de38 <UART_SetConfig+0x550>)
 800de34:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800de38:	0800de51 	.word	0x0800de51
 800de3c:	0800de59 	.word	0x0800de59
 800de40:	0800de61 	.word	0x0800de61
 800de44:	0800de69 	.word	0x0800de69
 800de48:	0800de71 	.word	0x0800de71
 800de4c:	0800de79 	.word	0x0800de79
 800de50:	2302      	movs	r3, #2
 800de52:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800de56:	e01a      	b.n	800de8e <UART_SetConfig+0x5a6>
 800de58:	2304      	movs	r3, #4
 800de5a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800de5e:	e016      	b.n	800de8e <UART_SetConfig+0x5a6>
 800de60:	2308      	movs	r3, #8
 800de62:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800de66:	e012      	b.n	800de8e <UART_SetConfig+0x5a6>
 800de68:	2310      	movs	r3, #16
 800de6a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800de6e:	e00e      	b.n	800de8e <UART_SetConfig+0x5a6>
 800de70:	2320      	movs	r3, #32
 800de72:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800de76:	e00a      	b.n	800de8e <UART_SetConfig+0x5a6>
 800de78:	2340      	movs	r3, #64	; 0x40
 800de7a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800de7e:	e006      	b.n	800de8e <UART_SetConfig+0x5a6>
 800de80:	2380      	movs	r3, #128	; 0x80
 800de82:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800de86:	e002      	b.n	800de8e <UART_SetConfig+0x5a6>
 800de88:	2380      	movs	r3, #128	; 0x80
 800de8a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 800de8e:	697b      	ldr	r3, [r7, #20]
 800de90:	681b      	ldr	r3, [r3, #0]
 800de92:	4a3f      	ldr	r2, [pc, #252]	; (800df90 <UART_SetConfig+0x6a8>)
 800de94:	4293      	cmp	r3, r2
 800de96:	f040 80f8 	bne.w	800e08a <UART_SetConfig+0x7a2>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 800de9a:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 800de9e:	2b20      	cmp	r3, #32
 800dea0:	dc46      	bgt.n	800df30 <UART_SetConfig+0x648>
 800dea2:	2b02      	cmp	r3, #2
 800dea4:	f2c0 8082 	blt.w	800dfac <UART_SetConfig+0x6c4>
 800dea8:	3b02      	subs	r3, #2
 800deaa:	2b1e      	cmp	r3, #30
 800deac:	d87e      	bhi.n	800dfac <UART_SetConfig+0x6c4>
 800deae:	a201      	add	r2, pc, #4	; (adr r2, 800deb4 <UART_SetConfig+0x5cc>)
 800deb0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800deb4:	0800df37 	.word	0x0800df37
 800deb8:	0800dfad 	.word	0x0800dfad
 800debc:	0800df3f 	.word	0x0800df3f
 800dec0:	0800dfad 	.word	0x0800dfad
 800dec4:	0800dfad 	.word	0x0800dfad
 800dec8:	0800dfad 	.word	0x0800dfad
 800decc:	0800df4f 	.word	0x0800df4f
 800ded0:	0800dfad 	.word	0x0800dfad
 800ded4:	0800dfad 	.word	0x0800dfad
 800ded8:	0800dfad 	.word	0x0800dfad
 800dedc:	0800dfad 	.word	0x0800dfad
 800dee0:	0800dfad 	.word	0x0800dfad
 800dee4:	0800dfad 	.word	0x0800dfad
 800dee8:	0800dfad 	.word	0x0800dfad
 800deec:	0800df5f 	.word	0x0800df5f
 800def0:	0800dfad 	.word	0x0800dfad
 800def4:	0800dfad 	.word	0x0800dfad
 800def8:	0800dfad 	.word	0x0800dfad
 800defc:	0800dfad 	.word	0x0800dfad
 800df00:	0800dfad 	.word	0x0800dfad
 800df04:	0800dfad 	.word	0x0800dfad
 800df08:	0800dfad 	.word	0x0800dfad
 800df0c:	0800dfad 	.word	0x0800dfad
 800df10:	0800dfad 	.word	0x0800dfad
 800df14:	0800dfad 	.word	0x0800dfad
 800df18:	0800dfad 	.word	0x0800dfad
 800df1c:	0800dfad 	.word	0x0800dfad
 800df20:	0800dfad 	.word	0x0800dfad
 800df24:	0800dfad 	.word	0x0800dfad
 800df28:	0800dfad 	.word	0x0800dfad
 800df2c:	0800df9f 	.word	0x0800df9f
 800df30:	2b40      	cmp	r3, #64	; 0x40
 800df32:	d037      	beq.n	800dfa4 <UART_SetConfig+0x6bc>
 800df34:	e03a      	b.n	800dfac <UART_SetConfig+0x6c4>
    {
      case UART_CLOCKSOURCE_D3PCLK1:
        pclk = HAL_RCCEx_GetD3PCLK1Freq();
 800df36:	f7fe fb19 	bl	800c56c <HAL_RCCEx_GetD3PCLK1Freq>
 800df3a:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 800df3c:	e03c      	b.n	800dfb8 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800df3e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800df42:	4618      	mov	r0, r3
 800df44:	f7fe fb28 	bl	800c598 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 800df48:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800df4a:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800df4c:	e034      	b.n	800dfb8 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800df4e:	f107 0318 	add.w	r3, r7, #24
 800df52:	4618      	mov	r0, r3
 800df54:	f7fe fc74 	bl	800c840 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 800df58:	69fb      	ldr	r3, [r7, #28]
 800df5a:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800df5c:	e02c      	b.n	800dfb8 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800df5e:	4b09      	ldr	r3, [pc, #36]	; (800df84 <UART_SetConfig+0x69c>)
 800df60:	681b      	ldr	r3, [r3, #0]
 800df62:	f003 0320 	and.w	r3, r3, #32
 800df66:	2b00      	cmp	r3, #0
 800df68:	d016      	beq.n	800df98 <UART_SetConfig+0x6b0>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 800df6a:	4b06      	ldr	r3, [pc, #24]	; (800df84 <UART_SetConfig+0x69c>)
 800df6c:	681b      	ldr	r3, [r3, #0]
 800df6e:	08db      	lsrs	r3, r3, #3
 800df70:	f003 0303 	and.w	r3, r3, #3
 800df74:	4a07      	ldr	r2, [pc, #28]	; (800df94 <UART_SetConfig+0x6ac>)
 800df76:	fa22 f303 	lsr.w	r3, r2, r3
 800df7a:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 800df7c:	e01c      	b.n	800dfb8 <UART_SetConfig+0x6d0>
 800df7e:	bf00      	nop
 800df80:	40011400 	.word	0x40011400
 800df84:	58024400 	.word	0x58024400
 800df88:	40007800 	.word	0x40007800
 800df8c:	40007c00 	.word	0x40007c00
 800df90:	58000c00 	.word	0x58000c00
 800df94:	03d09000 	.word	0x03d09000
          pclk = (uint32_t) HSI_VALUE;
 800df98:	4b9d      	ldr	r3, [pc, #628]	; (800e210 <UART_SetConfig+0x928>)
 800df9a:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800df9c:	e00c      	b.n	800dfb8 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 800df9e:	4b9d      	ldr	r3, [pc, #628]	; (800e214 <UART_SetConfig+0x92c>)
 800dfa0:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800dfa2:	e009      	b.n	800dfb8 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800dfa4:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800dfa8:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800dfaa:	e005      	b.n	800dfb8 <UART_SetConfig+0x6d0>
      default:
        pclk = 0U;
 800dfac:	2300      	movs	r3, #0
 800dfae:	63fb      	str	r3, [r7, #60]	; 0x3c
        ret = HAL_ERROR;
 800dfb0:	2301      	movs	r3, #1
 800dfb2:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
        break;
 800dfb6:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 800dfb8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800dfba:	2b00      	cmp	r3, #0
 800dfbc:	f000 81de 	beq.w	800e37c <UART_SetConfig+0xa94>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 800dfc0:	697b      	ldr	r3, [r7, #20]
 800dfc2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800dfc4:	4a94      	ldr	r2, [pc, #592]	; (800e218 <UART_SetConfig+0x930>)
 800dfc6:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800dfca:	461a      	mov	r2, r3
 800dfcc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800dfce:	fbb3 f3f2 	udiv	r3, r3, r2
 800dfd2:	633b      	str	r3, [r7, #48]	; 0x30

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800dfd4:	697b      	ldr	r3, [r7, #20]
 800dfd6:	685a      	ldr	r2, [r3, #4]
 800dfd8:	4613      	mov	r3, r2
 800dfda:	005b      	lsls	r3, r3, #1
 800dfdc:	4413      	add	r3, r2
 800dfde:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800dfe0:	429a      	cmp	r2, r3
 800dfe2:	d305      	bcc.n	800dff0 <UART_SetConfig+0x708>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 800dfe4:	697b      	ldr	r3, [r7, #20]
 800dfe6:	685b      	ldr	r3, [r3, #4]
 800dfe8:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800dfea:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800dfec:	429a      	cmp	r2, r3
 800dfee:	d903      	bls.n	800dff8 <UART_SetConfig+0x710>
      {
        ret = HAL_ERROR;
 800dff0:	2301      	movs	r3, #1
 800dff2:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
 800dff6:	e1c1      	b.n	800e37c <UART_SetConfig+0xa94>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800dff8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800dffa:	2200      	movs	r2, #0
 800dffc:	60bb      	str	r3, [r7, #8]
 800dffe:	60fa      	str	r2, [r7, #12]
 800e000:	697b      	ldr	r3, [r7, #20]
 800e002:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e004:	4a84      	ldr	r2, [pc, #528]	; (800e218 <UART_SetConfig+0x930>)
 800e006:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800e00a:	b29b      	uxth	r3, r3
 800e00c:	2200      	movs	r2, #0
 800e00e:	603b      	str	r3, [r7, #0]
 800e010:	607a      	str	r2, [r7, #4]
 800e012:	e9d7 2300 	ldrd	r2, r3, [r7]
 800e016:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 800e01a:	f7f3 fc29 	bl	8001870 <__aeabi_uldivmod>
 800e01e:	4602      	mov	r2, r0
 800e020:	460b      	mov	r3, r1
 800e022:	4610      	mov	r0, r2
 800e024:	4619      	mov	r1, r3
 800e026:	f04f 0200 	mov.w	r2, #0
 800e02a:	f04f 0300 	mov.w	r3, #0
 800e02e:	020b      	lsls	r3, r1, #8
 800e030:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 800e034:	0202      	lsls	r2, r0, #8
 800e036:	6979      	ldr	r1, [r7, #20]
 800e038:	6849      	ldr	r1, [r1, #4]
 800e03a:	0849      	lsrs	r1, r1, #1
 800e03c:	2000      	movs	r0, #0
 800e03e:	460c      	mov	r4, r1
 800e040:	4605      	mov	r5, r0
 800e042:	eb12 0804 	adds.w	r8, r2, r4
 800e046:	eb43 0905 	adc.w	r9, r3, r5
 800e04a:	697b      	ldr	r3, [r7, #20]
 800e04c:	685b      	ldr	r3, [r3, #4]
 800e04e:	2200      	movs	r2, #0
 800e050:	469a      	mov	sl, r3
 800e052:	4693      	mov	fp, r2
 800e054:	4652      	mov	r2, sl
 800e056:	465b      	mov	r3, fp
 800e058:	4640      	mov	r0, r8
 800e05a:	4649      	mov	r1, r9
 800e05c:	f7f3 fc08 	bl	8001870 <__aeabi_uldivmod>
 800e060:	4602      	mov	r2, r0
 800e062:	460b      	mov	r3, r1
 800e064:	4613      	mov	r3, r2
 800e066:	63bb      	str	r3, [r7, #56]	; 0x38
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 800e068:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e06a:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800e06e:	d308      	bcc.n	800e082 <UART_SetConfig+0x79a>
 800e070:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e072:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800e076:	d204      	bcs.n	800e082 <UART_SetConfig+0x79a>
        {
          huart->Instance->BRR = usartdiv;
 800e078:	697b      	ldr	r3, [r7, #20]
 800e07a:	681b      	ldr	r3, [r3, #0]
 800e07c:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800e07e:	60da      	str	r2, [r3, #12]
 800e080:	e17c      	b.n	800e37c <UART_SetConfig+0xa94>
        }
        else
        {
          ret = HAL_ERROR;
 800e082:	2301      	movs	r3, #1
 800e084:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
 800e088:	e178      	b.n	800e37c <UART_SetConfig+0xa94>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800e08a:	697b      	ldr	r3, [r7, #20]
 800e08c:	69db      	ldr	r3, [r3, #28]
 800e08e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800e092:	f040 80c5 	bne.w	800e220 <UART_SetConfig+0x938>
  {
    switch (clocksource)
 800e096:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 800e09a:	2b20      	cmp	r3, #32
 800e09c:	dc48      	bgt.n	800e130 <UART_SetConfig+0x848>
 800e09e:	2b00      	cmp	r3, #0
 800e0a0:	db7b      	blt.n	800e19a <UART_SetConfig+0x8b2>
 800e0a2:	2b20      	cmp	r3, #32
 800e0a4:	d879      	bhi.n	800e19a <UART_SetConfig+0x8b2>
 800e0a6:	a201      	add	r2, pc, #4	; (adr r2, 800e0ac <UART_SetConfig+0x7c4>)
 800e0a8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800e0ac:	0800e137 	.word	0x0800e137
 800e0b0:	0800e13f 	.word	0x0800e13f
 800e0b4:	0800e19b 	.word	0x0800e19b
 800e0b8:	0800e19b 	.word	0x0800e19b
 800e0bc:	0800e147 	.word	0x0800e147
 800e0c0:	0800e19b 	.word	0x0800e19b
 800e0c4:	0800e19b 	.word	0x0800e19b
 800e0c8:	0800e19b 	.word	0x0800e19b
 800e0cc:	0800e157 	.word	0x0800e157
 800e0d0:	0800e19b 	.word	0x0800e19b
 800e0d4:	0800e19b 	.word	0x0800e19b
 800e0d8:	0800e19b 	.word	0x0800e19b
 800e0dc:	0800e19b 	.word	0x0800e19b
 800e0e0:	0800e19b 	.word	0x0800e19b
 800e0e4:	0800e19b 	.word	0x0800e19b
 800e0e8:	0800e19b 	.word	0x0800e19b
 800e0ec:	0800e167 	.word	0x0800e167
 800e0f0:	0800e19b 	.word	0x0800e19b
 800e0f4:	0800e19b 	.word	0x0800e19b
 800e0f8:	0800e19b 	.word	0x0800e19b
 800e0fc:	0800e19b 	.word	0x0800e19b
 800e100:	0800e19b 	.word	0x0800e19b
 800e104:	0800e19b 	.word	0x0800e19b
 800e108:	0800e19b 	.word	0x0800e19b
 800e10c:	0800e19b 	.word	0x0800e19b
 800e110:	0800e19b 	.word	0x0800e19b
 800e114:	0800e19b 	.word	0x0800e19b
 800e118:	0800e19b 	.word	0x0800e19b
 800e11c:	0800e19b 	.word	0x0800e19b
 800e120:	0800e19b 	.word	0x0800e19b
 800e124:	0800e19b 	.word	0x0800e19b
 800e128:	0800e19b 	.word	0x0800e19b
 800e12c:	0800e18d 	.word	0x0800e18d
 800e130:	2b40      	cmp	r3, #64	; 0x40
 800e132:	d02e      	beq.n	800e192 <UART_SetConfig+0x8aa>
 800e134:	e031      	b.n	800e19a <UART_SetConfig+0x8b2>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800e136:	f7fc fa47 	bl	800a5c8 <HAL_RCC_GetPCLK1Freq>
 800e13a:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 800e13c:	e033      	b.n	800e1a6 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800e13e:	f7fc fa59 	bl	800a5f4 <HAL_RCC_GetPCLK2Freq>
 800e142:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 800e144:	e02f      	b.n	800e1a6 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800e146:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800e14a:	4618      	mov	r0, r3
 800e14c:	f7fe fa24 	bl	800c598 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 800e150:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e152:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800e154:	e027      	b.n	800e1a6 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800e156:	f107 0318 	add.w	r3, r7, #24
 800e15a:	4618      	mov	r0, r3
 800e15c:	f7fe fb70 	bl	800c840 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 800e160:	69fb      	ldr	r3, [r7, #28]
 800e162:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800e164:	e01f      	b.n	800e1a6 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800e166:	4b2d      	ldr	r3, [pc, #180]	; (800e21c <UART_SetConfig+0x934>)
 800e168:	681b      	ldr	r3, [r3, #0]
 800e16a:	f003 0320 	and.w	r3, r3, #32
 800e16e:	2b00      	cmp	r3, #0
 800e170:	d009      	beq.n	800e186 <UART_SetConfig+0x89e>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 800e172:	4b2a      	ldr	r3, [pc, #168]	; (800e21c <UART_SetConfig+0x934>)
 800e174:	681b      	ldr	r3, [r3, #0]
 800e176:	08db      	lsrs	r3, r3, #3
 800e178:	f003 0303 	and.w	r3, r3, #3
 800e17c:	4a24      	ldr	r2, [pc, #144]	; (800e210 <UART_SetConfig+0x928>)
 800e17e:	fa22 f303 	lsr.w	r3, r2, r3
 800e182:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 800e184:	e00f      	b.n	800e1a6 <UART_SetConfig+0x8be>
          pclk = (uint32_t) HSI_VALUE;
 800e186:	4b22      	ldr	r3, [pc, #136]	; (800e210 <UART_SetConfig+0x928>)
 800e188:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800e18a:	e00c      	b.n	800e1a6 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 800e18c:	4b21      	ldr	r3, [pc, #132]	; (800e214 <UART_SetConfig+0x92c>)
 800e18e:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800e190:	e009      	b.n	800e1a6 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800e192:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800e196:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800e198:	e005      	b.n	800e1a6 <UART_SetConfig+0x8be>
      default:
        pclk = 0U;
 800e19a:	2300      	movs	r3, #0
 800e19c:	63fb      	str	r3, [r7, #60]	; 0x3c
        ret = HAL_ERROR;
 800e19e:	2301      	movs	r3, #1
 800e1a0:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
        break;
 800e1a4:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800e1a6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800e1a8:	2b00      	cmp	r3, #0
 800e1aa:	f000 80e7 	beq.w	800e37c <UART_SetConfig+0xa94>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800e1ae:	697b      	ldr	r3, [r7, #20]
 800e1b0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e1b2:	4a19      	ldr	r2, [pc, #100]	; (800e218 <UART_SetConfig+0x930>)
 800e1b4:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800e1b8:	461a      	mov	r2, r3
 800e1ba:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800e1bc:	fbb3 f3f2 	udiv	r3, r3, r2
 800e1c0:	005a      	lsls	r2, r3, #1
 800e1c2:	697b      	ldr	r3, [r7, #20]
 800e1c4:	685b      	ldr	r3, [r3, #4]
 800e1c6:	085b      	lsrs	r3, r3, #1
 800e1c8:	441a      	add	r2, r3
 800e1ca:	697b      	ldr	r3, [r7, #20]
 800e1cc:	685b      	ldr	r3, [r3, #4]
 800e1ce:	fbb2 f3f3 	udiv	r3, r2, r3
 800e1d2:	63bb      	str	r3, [r7, #56]	; 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800e1d4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e1d6:	2b0f      	cmp	r3, #15
 800e1d8:	d916      	bls.n	800e208 <UART_SetConfig+0x920>
 800e1da:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e1dc:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800e1e0:	d212      	bcs.n	800e208 <UART_SetConfig+0x920>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800e1e2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e1e4:	b29b      	uxth	r3, r3
 800e1e6:	f023 030f 	bic.w	r3, r3, #15
 800e1ea:	86fb      	strh	r3, [r7, #54]	; 0x36
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800e1ec:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e1ee:	085b      	lsrs	r3, r3, #1
 800e1f0:	b29b      	uxth	r3, r3
 800e1f2:	f003 0307 	and.w	r3, r3, #7
 800e1f6:	b29a      	uxth	r2, r3
 800e1f8:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 800e1fa:	4313      	orrs	r3, r2
 800e1fc:	86fb      	strh	r3, [r7, #54]	; 0x36
        huart->Instance->BRR = brrtemp;
 800e1fe:	697b      	ldr	r3, [r7, #20]
 800e200:	681b      	ldr	r3, [r3, #0]
 800e202:	8efa      	ldrh	r2, [r7, #54]	; 0x36
 800e204:	60da      	str	r2, [r3, #12]
 800e206:	e0b9      	b.n	800e37c <UART_SetConfig+0xa94>
      }
      else
      {
        ret = HAL_ERROR;
 800e208:	2301      	movs	r3, #1
 800e20a:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
 800e20e:	e0b5      	b.n	800e37c <UART_SetConfig+0xa94>
 800e210:	03d09000 	.word	0x03d09000
 800e214:	003d0900 	.word	0x003d0900
 800e218:	0801ebf0 	.word	0x0801ebf0
 800e21c:	58024400 	.word	0x58024400
      }
    }
  }
  else
  {
    switch (clocksource)
 800e220:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 800e224:	2b20      	cmp	r3, #32
 800e226:	dc49      	bgt.n	800e2bc <UART_SetConfig+0x9d4>
 800e228:	2b00      	cmp	r3, #0
 800e22a:	db7c      	blt.n	800e326 <UART_SetConfig+0xa3e>
 800e22c:	2b20      	cmp	r3, #32
 800e22e:	d87a      	bhi.n	800e326 <UART_SetConfig+0xa3e>
 800e230:	a201      	add	r2, pc, #4	; (adr r2, 800e238 <UART_SetConfig+0x950>)
 800e232:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800e236:	bf00      	nop
 800e238:	0800e2c3 	.word	0x0800e2c3
 800e23c:	0800e2cb 	.word	0x0800e2cb
 800e240:	0800e327 	.word	0x0800e327
 800e244:	0800e327 	.word	0x0800e327
 800e248:	0800e2d3 	.word	0x0800e2d3
 800e24c:	0800e327 	.word	0x0800e327
 800e250:	0800e327 	.word	0x0800e327
 800e254:	0800e327 	.word	0x0800e327
 800e258:	0800e2e3 	.word	0x0800e2e3
 800e25c:	0800e327 	.word	0x0800e327
 800e260:	0800e327 	.word	0x0800e327
 800e264:	0800e327 	.word	0x0800e327
 800e268:	0800e327 	.word	0x0800e327
 800e26c:	0800e327 	.word	0x0800e327
 800e270:	0800e327 	.word	0x0800e327
 800e274:	0800e327 	.word	0x0800e327
 800e278:	0800e2f3 	.word	0x0800e2f3
 800e27c:	0800e327 	.word	0x0800e327
 800e280:	0800e327 	.word	0x0800e327
 800e284:	0800e327 	.word	0x0800e327
 800e288:	0800e327 	.word	0x0800e327
 800e28c:	0800e327 	.word	0x0800e327
 800e290:	0800e327 	.word	0x0800e327
 800e294:	0800e327 	.word	0x0800e327
 800e298:	0800e327 	.word	0x0800e327
 800e29c:	0800e327 	.word	0x0800e327
 800e2a0:	0800e327 	.word	0x0800e327
 800e2a4:	0800e327 	.word	0x0800e327
 800e2a8:	0800e327 	.word	0x0800e327
 800e2ac:	0800e327 	.word	0x0800e327
 800e2b0:	0800e327 	.word	0x0800e327
 800e2b4:	0800e327 	.word	0x0800e327
 800e2b8:	0800e319 	.word	0x0800e319
 800e2bc:	2b40      	cmp	r3, #64	; 0x40
 800e2be:	d02e      	beq.n	800e31e <UART_SetConfig+0xa36>
 800e2c0:	e031      	b.n	800e326 <UART_SetConfig+0xa3e>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800e2c2:	f7fc f981 	bl	800a5c8 <HAL_RCC_GetPCLK1Freq>
 800e2c6:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 800e2c8:	e033      	b.n	800e332 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800e2ca:	f7fc f993 	bl	800a5f4 <HAL_RCC_GetPCLK2Freq>
 800e2ce:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 800e2d0:	e02f      	b.n	800e332 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800e2d2:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800e2d6:	4618      	mov	r0, r3
 800e2d8:	f7fe f95e 	bl	800c598 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 800e2dc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e2de:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800e2e0:	e027      	b.n	800e332 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800e2e2:	f107 0318 	add.w	r3, r7, #24
 800e2e6:	4618      	mov	r0, r3
 800e2e8:	f7fe faaa 	bl	800c840 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 800e2ec:	69fb      	ldr	r3, [r7, #28]
 800e2ee:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800e2f0:	e01f      	b.n	800e332 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800e2f2:	4b2d      	ldr	r3, [pc, #180]	; (800e3a8 <UART_SetConfig+0xac0>)
 800e2f4:	681b      	ldr	r3, [r3, #0]
 800e2f6:	f003 0320 	and.w	r3, r3, #32
 800e2fa:	2b00      	cmp	r3, #0
 800e2fc:	d009      	beq.n	800e312 <UART_SetConfig+0xa2a>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 800e2fe:	4b2a      	ldr	r3, [pc, #168]	; (800e3a8 <UART_SetConfig+0xac0>)
 800e300:	681b      	ldr	r3, [r3, #0]
 800e302:	08db      	lsrs	r3, r3, #3
 800e304:	f003 0303 	and.w	r3, r3, #3
 800e308:	4a28      	ldr	r2, [pc, #160]	; (800e3ac <UART_SetConfig+0xac4>)
 800e30a:	fa22 f303 	lsr.w	r3, r2, r3
 800e30e:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 800e310:	e00f      	b.n	800e332 <UART_SetConfig+0xa4a>
          pclk = (uint32_t) HSI_VALUE;
 800e312:	4b26      	ldr	r3, [pc, #152]	; (800e3ac <UART_SetConfig+0xac4>)
 800e314:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800e316:	e00c      	b.n	800e332 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 800e318:	4b25      	ldr	r3, [pc, #148]	; (800e3b0 <UART_SetConfig+0xac8>)
 800e31a:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800e31c:	e009      	b.n	800e332 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800e31e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800e322:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800e324:	e005      	b.n	800e332 <UART_SetConfig+0xa4a>
      default:
        pclk = 0U;
 800e326:	2300      	movs	r3, #0
 800e328:	63fb      	str	r3, [r7, #60]	; 0x3c
        ret = HAL_ERROR;
 800e32a:	2301      	movs	r3, #1
 800e32c:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
        break;
 800e330:	bf00      	nop
    }

    if (pclk != 0U)
 800e332:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800e334:	2b00      	cmp	r3, #0
 800e336:	d021      	beq.n	800e37c <UART_SetConfig+0xa94>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800e338:	697b      	ldr	r3, [r7, #20]
 800e33a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e33c:	4a1d      	ldr	r2, [pc, #116]	; (800e3b4 <UART_SetConfig+0xacc>)
 800e33e:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800e342:	461a      	mov	r2, r3
 800e344:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800e346:	fbb3 f2f2 	udiv	r2, r3, r2
 800e34a:	697b      	ldr	r3, [r7, #20]
 800e34c:	685b      	ldr	r3, [r3, #4]
 800e34e:	085b      	lsrs	r3, r3, #1
 800e350:	441a      	add	r2, r3
 800e352:	697b      	ldr	r3, [r7, #20]
 800e354:	685b      	ldr	r3, [r3, #4]
 800e356:	fbb2 f3f3 	udiv	r3, r2, r3
 800e35a:	63bb      	str	r3, [r7, #56]	; 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800e35c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e35e:	2b0f      	cmp	r3, #15
 800e360:	d909      	bls.n	800e376 <UART_SetConfig+0xa8e>
 800e362:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e364:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800e368:	d205      	bcs.n	800e376 <UART_SetConfig+0xa8e>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 800e36a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e36c:	b29a      	uxth	r2, r3
 800e36e:	697b      	ldr	r3, [r7, #20]
 800e370:	681b      	ldr	r3, [r3, #0]
 800e372:	60da      	str	r2, [r3, #12]
 800e374:	e002      	b.n	800e37c <UART_SetConfig+0xa94>
      }
      else
      {
        ret = HAL_ERROR;
 800e376:	2301      	movs	r3, #1
 800e378:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 800e37c:	697b      	ldr	r3, [r7, #20]
 800e37e:	2201      	movs	r2, #1
 800e380:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
 800e384:	697b      	ldr	r3, [r7, #20]
 800e386:	2201      	movs	r2, #1
 800e388:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800e38c:	697b      	ldr	r3, [r7, #20]
 800e38e:	2200      	movs	r2, #0
 800e390:	675a      	str	r2, [r3, #116]	; 0x74
  huart->TxISR = NULL;
 800e392:	697b      	ldr	r3, [r7, #20]
 800e394:	2200      	movs	r2, #0
 800e396:	679a      	str	r2, [r3, #120]	; 0x78

  return ret;
 800e398:	f897 3042 	ldrb.w	r3, [r7, #66]	; 0x42
}
 800e39c:	4618      	mov	r0, r3
 800e39e:	3748      	adds	r7, #72	; 0x48
 800e3a0:	46bd      	mov	sp, r7
 800e3a2:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800e3a6:	bf00      	nop
 800e3a8:	58024400 	.word	0x58024400
 800e3ac:	03d09000 	.word	0x03d09000
 800e3b0:	003d0900 	.word	0x003d0900
 800e3b4:	0801ebf0 	.word	0x0801ebf0

0800e3b8 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 800e3b8:	b480      	push	{r7}
 800e3ba:	b083      	sub	sp, #12
 800e3bc:	af00      	add	r7, sp, #0
 800e3be:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800e3c0:	687b      	ldr	r3, [r7, #4]
 800e3c2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800e3c4:	f003 0301 	and.w	r3, r3, #1
 800e3c8:	2b00      	cmp	r3, #0
 800e3ca:	d00a      	beq.n	800e3e2 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800e3cc:	687b      	ldr	r3, [r7, #4]
 800e3ce:	681b      	ldr	r3, [r3, #0]
 800e3d0:	685b      	ldr	r3, [r3, #4]
 800e3d2:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 800e3d6:	687b      	ldr	r3, [r7, #4]
 800e3d8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800e3da:	687b      	ldr	r3, [r7, #4]
 800e3dc:	681b      	ldr	r3, [r3, #0]
 800e3de:	430a      	orrs	r2, r1
 800e3e0:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800e3e2:	687b      	ldr	r3, [r7, #4]
 800e3e4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800e3e6:	f003 0302 	and.w	r3, r3, #2
 800e3ea:	2b00      	cmp	r3, #0
 800e3ec:	d00a      	beq.n	800e404 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800e3ee:	687b      	ldr	r3, [r7, #4]
 800e3f0:	681b      	ldr	r3, [r3, #0]
 800e3f2:	685b      	ldr	r3, [r3, #4]
 800e3f4:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 800e3f8:	687b      	ldr	r3, [r7, #4]
 800e3fa:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800e3fc:	687b      	ldr	r3, [r7, #4]
 800e3fe:	681b      	ldr	r3, [r3, #0]
 800e400:	430a      	orrs	r2, r1
 800e402:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800e404:	687b      	ldr	r3, [r7, #4]
 800e406:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800e408:	f003 0304 	and.w	r3, r3, #4
 800e40c:	2b00      	cmp	r3, #0
 800e40e:	d00a      	beq.n	800e426 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800e410:	687b      	ldr	r3, [r7, #4]
 800e412:	681b      	ldr	r3, [r3, #0]
 800e414:	685b      	ldr	r3, [r3, #4]
 800e416:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 800e41a:	687b      	ldr	r3, [r7, #4]
 800e41c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800e41e:	687b      	ldr	r3, [r7, #4]
 800e420:	681b      	ldr	r3, [r3, #0]
 800e422:	430a      	orrs	r2, r1
 800e424:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800e426:	687b      	ldr	r3, [r7, #4]
 800e428:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800e42a:	f003 0308 	and.w	r3, r3, #8
 800e42e:	2b00      	cmp	r3, #0
 800e430:	d00a      	beq.n	800e448 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800e432:	687b      	ldr	r3, [r7, #4]
 800e434:	681b      	ldr	r3, [r3, #0]
 800e436:	685b      	ldr	r3, [r3, #4]
 800e438:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 800e43c:	687b      	ldr	r3, [r7, #4]
 800e43e:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800e440:	687b      	ldr	r3, [r7, #4]
 800e442:	681b      	ldr	r3, [r3, #0]
 800e444:	430a      	orrs	r2, r1
 800e446:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 800e448:	687b      	ldr	r3, [r7, #4]
 800e44a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800e44c:	f003 0310 	and.w	r3, r3, #16
 800e450:	2b00      	cmp	r3, #0
 800e452:	d00a      	beq.n	800e46a <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800e454:	687b      	ldr	r3, [r7, #4]
 800e456:	681b      	ldr	r3, [r3, #0]
 800e458:	689b      	ldr	r3, [r3, #8]
 800e45a:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 800e45e:	687b      	ldr	r3, [r7, #4]
 800e460:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800e462:	687b      	ldr	r3, [r7, #4]
 800e464:	681b      	ldr	r3, [r3, #0]
 800e466:	430a      	orrs	r2, r1
 800e468:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800e46a:	687b      	ldr	r3, [r7, #4]
 800e46c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800e46e:	f003 0320 	and.w	r3, r3, #32
 800e472:	2b00      	cmp	r3, #0
 800e474:	d00a      	beq.n	800e48c <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800e476:	687b      	ldr	r3, [r7, #4]
 800e478:	681b      	ldr	r3, [r3, #0]
 800e47a:	689b      	ldr	r3, [r3, #8]
 800e47c:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 800e480:	687b      	ldr	r3, [r7, #4]
 800e482:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800e484:	687b      	ldr	r3, [r7, #4]
 800e486:	681b      	ldr	r3, [r3, #0]
 800e488:	430a      	orrs	r2, r1
 800e48a:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 800e48c:	687b      	ldr	r3, [r7, #4]
 800e48e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800e490:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800e494:	2b00      	cmp	r3, #0
 800e496:	d01a      	beq.n	800e4ce <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800e498:	687b      	ldr	r3, [r7, #4]
 800e49a:	681b      	ldr	r3, [r3, #0]
 800e49c:	685b      	ldr	r3, [r3, #4]
 800e49e:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 800e4a2:	687b      	ldr	r3, [r7, #4]
 800e4a4:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800e4a6:	687b      	ldr	r3, [r7, #4]
 800e4a8:	681b      	ldr	r3, [r3, #0]
 800e4aa:	430a      	orrs	r2, r1
 800e4ac:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800e4ae:	687b      	ldr	r3, [r7, #4]
 800e4b0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800e4b2:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800e4b6:	d10a      	bne.n	800e4ce <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800e4b8:	687b      	ldr	r3, [r7, #4]
 800e4ba:	681b      	ldr	r3, [r3, #0]
 800e4bc:	685b      	ldr	r3, [r3, #4]
 800e4be:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 800e4c2:	687b      	ldr	r3, [r7, #4]
 800e4c4:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800e4c6:	687b      	ldr	r3, [r7, #4]
 800e4c8:	681b      	ldr	r3, [r3, #0]
 800e4ca:	430a      	orrs	r2, r1
 800e4cc:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800e4ce:	687b      	ldr	r3, [r7, #4]
 800e4d0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800e4d2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800e4d6:	2b00      	cmp	r3, #0
 800e4d8:	d00a      	beq.n	800e4f0 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800e4da:	687b      	ldr	r3, [r7, #4]
 800e4dc:	681b      	ldr	r3, [r3, #0]
 800e4de:	685b      	ldr	r3, [r3, #4]
 800e4e0:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 800e4e4:	687b      	ldr	r3, [r7, #4]
 800e4e6:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800e4e8:	687b      	ldr	r3, [r7, #4]
 800e4ea:	681b      	ldr	r3, [r3, #0]
 800e4ec:	430a      	orrs	r2, r1
 800e4ee:	605a      	str	r2, [r3, #4]
  }
}
 800e4f0:	bf00      	nop
 800e4f2:	370c      	adds	r7, #12
 800e4f4:	46bd      	mov	sp, r7
 800e4f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e4fa:	4770      	bx	lr

0800e4fc <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 800e4fc:	b580      	push	{r7, lr}
 800e4fe:	b098      	sub	sp, #96	; 0x60
 800e500:	af02      	add	r7, sp, #8
 800e502:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800e504:	687b      	ldr	r3, [r7, #4]
 800e506:	2200      	movs	r2, #0
 800e508:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 800e50c:	f7f5 fa36 	bl	800397c <HAL_GetTick>
 800e510:	6578      	str	r0, [r7, #84]	; 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800e512:	687b      	ldr	r3, [r7, #4]
 800e514:	681b      	ldr	r3, [r3, #0]
 800e516:	681b      	ldr	r3, [r3, #0]
 800e518:	f003 0308 	and.w	r3, r3, #8
 800e51c:	2b08      	cmp	r3, #8
 800e51e:	d12f      	bne.n	800e580 <UART_CheckIdleState+0x84>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800e520:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800e524:	9300      	str	r3, [sp, #0]
 800e526:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800e528:	2200      	movs	r2, #0
 800e52a:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 800e52e:	6878      	ldr	r0, [r7, #4]
 800e530:	f000 f88e 	bl	800e650 <UART_WaitOnFlagUntilTimeout>
 800e534:	4603      	mov	r3, r0
 800e536:	2b00      	cmp	r3, #0
 800e538:	d022      	beq.n	800e580 <UART_CheckIdleState+0x84>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 800e53a:	687b      	ldr	r3, [r7, #4]
 800e53c:	681b      	ldr	r3, [r3, #0]
 800e53e:	63bb      	str	r3, [r7, #56]	; 0x38
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800e540:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e542:	e853 3f00 	ldrex	r3, [r3]
 800e546:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 800e548:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800e54a:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800e54e:	653b      	str	r3, [r7, #80]	; 0x50
 800e550:	687b      	ldr	r3, [r7, #4]
 800e552:	681b      	ldr	r3, [r3, #0]
 800e554:	461a      	mov	r2, r3
 800e556:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800e558:	647b      	str	r3, [r7, #68]	; 0x44
 800e55a:	643a      	str	r2, [r7, #64]	; 0x40
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800e55c:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800e55e:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800e560:	e841 2300 	strex	r3, r2, [r1]
 800e564:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 800e566:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800e568:	2b00      	cmp	r3, #0
 800e56a:	d1e6      	bne.n	800e53a <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 800e56c:	687b      	ldr	r3, [r7, #4]
 800e56e:	2220      	movs	r2, #32
 800e570:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

      __HAL_UNLOCK(huart);
 800e574:	687b      	ldr	r3, [r7, #4]
 800e576:	2200      	movs	r2, #0
 800e578:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800e57c:	2303      	movs	r3, #3
 800e57e:	e063      	b.n	800e648 <UART_CheckIdleState+0x14c>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800e580:	687b      	ldr	r3, [r7, #4]
 800e582:	681b      	ldr	r3, [r3, #0]
 800e584:	681b      	ldr	r3, [r3, #0]
 800e586:	f003 0304 	and.w	r3, r3, #4
 800e58a:	2b04      	cmp	r3, #4
 800e58c:	d149      	bne.n	800e622 <UART_CheckIdleState+0x126>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800e58e:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800e592:	9300      	str	r3, [sp, #0]
 800e594:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800e596:	2200      	movs	r2, #0
 800e598:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 800e59c:	6878      	ldr	r0, [r7, #4]
 800e59e:	f000 f857 	bl	800e650 <UART_WaitOnFlagUntilTimeout>
 800e5a2:	4603      	mov	r3, r0
 800e5a4:	2b00      	cmp	r3, #0
 800e5a6:	d03c      	beq.n	800e622 <UART_CheckIdleState+0x126>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800e5a8:	687b      	ldr	r3, [r7, #4]
 800e5aa:	681b      	ldr	r3, [r3, #0]
 800e5ac:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800e5ae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e5b0:	e853 3f00 	ldrex	r3, [r3]
 800e5b4:	623b      	str	r3, [r7, #32]
   return(result);
 800e5b6:	6a3b      	ldr	r3, [r7, #32]
 800e5b8:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800e5bc:	64fb      	str	r3, [r7, #76]	; 0x4c
 800e5be:	687b      	ldr	r3, [r7, #4]
 800e5c0:	681b      	ldr	r3, [r3, #0]
 800e5c2:	461a      	mov	r2, r3
 800e5c4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800e5c6:	633b      	str	r3, [r7, #48]	; 0x30
 800e5c8:	62fa      	str	r2, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800e5ca:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800e5cc:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800e5ce:	e841 2300 	strex	r3, r2, [r1]
 800e5d2:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800e5d4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e5d6:	2b00      	cmp	r3, #0
 800e5d8:	d1e6      	bne.n	800e5a8 <UART_CheckIdleState+0xac>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800e5da:	687b      	ldr	r3, [r7, #4]
 800e5dc:	681b      	ldr	r3, [r3, #0]
 800e5de:	3308      	adds	r3, #8
 800e5e0:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800e5e2:	693b      	ldr	r3, [r7, #16]
 800e5e4:	e853 3f00 	ldrex	r3, [r3]
 800e5e8:	60fb      	str	r3, [r7, #12]
   return(result);
 800e5ea:	68fb      	ldr	r3, [r7, #12]
 800e5ec:	f023 0301 	bic.w	r3, r3, #1
 800e5f0:	64bb      	str	r3, [r7, #72]	; 0x48
 800e5f2:	687b      	ldr	r3, [r7, #4]
 800e5f4:	681b      	ldr	r3, [r3, #0]
 800e5f6:	3308      	adds	r3, #8
 800e5f8:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800e5fa:	61fa      	str	r2, [r7, #28]
 800e5fc:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800e5fe:	69b9      	ldr	r1, [r7, #24]
 800e600:	69fa      	ldr	r2, [r7, #28]
 800e602:	e841 2300 	strex	r3, r2, [r1]
 800e606:	617b      	str	r3, [r7, #20]
   return(result);
 800e608:	697b      	ldr	r3, [r7, #20]
 800e60a:	2b00      	cmp	r3, #0
 800e60c:	d1e5      	bne.n	800e5da <UART_CheckIdleState+0xde>

      huart->RxState = HAL_UART_STATE_READY;
 800e60e:	687b      	ldr	r3, [r7, #4]
 800e610:	2220      	movs	r2, #32
 800e612:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

      __HAL_UNLOCK(huart);
 800e616:	687b      	ldr	r3, [r7, #4]
 800e618:	2200      	movs	r2, #0
 800e61a:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800e61e:	2303      	movs	r3, #3
 800e620:	e012      	b.n	800e648 <UART_CheckIdleState+0x14c>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800e622:	687b      	ldr	r3, [r7, #4]
 800e624:	2220      	movs	r2, #32
 800e626:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->RxState = HAL_UART_STATE_READY;
 800e62a:	687b      	ldr	r3, [r7, #4]
 800e62c:	2220      	movs	r2, #32
 800e62e:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800e632:	687b      	ldr	r3, [r7, #4]
 800e634:	2200      	movs	r2, #0
 800e636:	66da      	str	r2, [r3, #108]	; 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800e638:	687b      	ldr	r3, [r7, #4]
 800e63a:	2200      	movs	r2, #0
 800e63c:	671a      	str	r2, [r3, #112]	; 0x70

  __HAL_UNLOCK(huart);
 800e63e:	687b      	ldr	r3, [r7, #4]
 800e640:	2200      	movs	r2, #0
 800e642:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 800e646:	2300      	movs	r3, #0
}
 800e648:	4618      	mov	r0, r3
 800e64a:	3758      	adds	r7, #88	; 0x58
 800e64c:	46bd      	mov	sp, r7
 800e64e:	bd80      	pop	{r7, pc}

0800e650 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800e650:	b580      	push	{r7, lr}
 800e652:	b084      	sub	sp, #16
 800e654:	af00      	add	r7, sp, #0
 800e656:	60f8      	str	r0, [r7, #12]
 800e658:	60b9      	str	r1, [r7, #8]
 800e65a:	603b      	str	r3, [r7, #0]
 800e65c:	4613      	mov	r3, r2
 800e65e:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800e660:	e049      	b.n	800e6f6 <UART_WaitOnFlagUntilTimeout+0xa6>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800e662:	69bb      	ldr	r3, [r7, #24]
 800e664:	f1b3 3fff 	cmp.w	r3, #4294967295
 800e668:	d045      	beq.n	800e6f6 <UART_WaitOnFlagUntilTimeout+0xa6>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800e66a:	f7f5 f987 	bl	800397c <HAL_GetTick>
 800e66e:	4602      	mov	r2, r0
 800e670:	683b      	ldr	r3, [r7, #0]
 800e672:	1ad3      	subs	r3, r2, r3
 800e674:	69ba      	ldr	r2, [r7, #24]
 800e676:	429a      	cmp	r2, r3
 800e678:	d302      	bcc.n	800e680 <UART_WaitOnFlagUntilTimeout+0x30>
 800e67a:	69bb      	ldr	r3, [r7, #24]
 800e67c:	2b00      	cmp	r3, #0
 800e67e:	d101      	bne.n	800e684 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 800e680:	2303      	movs	r3, #3
 800e682:	e048      	b.n	800e716 <UART_WaitOnFlagUntilTimeout+0xc6>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 800e684:	68fb      	ldr	r3, [r7, #12]
 800e686:	681b      	ldr	r3, [r3, #0]
 800e688:	681b      	ldr	r3, [r3, #0]
 800e68a:	f003 0304 	and.w	r3, r3, #4
 800e68e:	2b00      	cmp	r3, #0
 800e690:	d031      	beq.n	800e6f6 <UART_WaitOnFlagUntilTimeout+0xa6>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 800e692:	68fb      	ldr	r3, [r7, #12]
 800e694:	681b      	ldr	r3, [r3, #0]
 800e696:	69db      	ldr	r3, [r3, #28]
 800e698:	f003 0308 	and.w	r3, r3, #8
 800e69c:	2b08      	cmp	r3, #8
 800e69e:	d110      	bne.n	800e6c2 <UART_WaitOnFlagUntilTimeout+0x72>
        {
           /* Clear Overrun Error flag*/
           __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 800e6a0:	68fb      	ldr	r3, [r7, #12]
 800e6a2:	681b      	ldr	r3, [r3, #0]
 800e6a4:	2208      	movs	r2, #8
 800e6a6:	621a      	str	r2, [r3, #32]

           /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts if ongoing */
           UART_EndRxTransfer(huart);
 800e6a8:	68f8      	ldr	r0, [r7, #12]
 800e6aa:	f000 f839 	bl	800e720 <UART_EndRxTransfer>

           huart->ErrorCode = HAL_UART_ERROR_ORE;
 800e6ae:	68fb      	ldr	r3, [r7, #12]
 800e6b0:	2208      	movs	r2, #8
 800e6b2:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

           /* Process Unlocked */
           __HAL_UNLOCK(huart);
 800e6b6:	68fb      	ldr	r3, [r7, #12]
 800e6b8:	2200      	movs	r2, #0
 800e6ba:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

           return HAL_ERROR;
 800e6be:	2301      	movs	r3, #1
 800e6c0:	e029      	b.n	800e716 <UART_WaitOnFlagUntilTimeout+0xc6>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800e6c2:	68fb      	ldr	r3, [r7, #12]
 800e6c4:	681b      	ldr	r3, [r3, #0]
 800e6c6:	69db      	ldr	r3, [r3, #28]
 800e6c8:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800e6cc:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800e6d0:	d111      	bne.n	800e6f6 <UART_WaitOnFlagUntilTimeout+0xa6>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800e6d2:	68fb      	ldr	r3, [r7, #12]
 800e6d4:	681b      	ldr	r3, [r3, #0]
 800e6d6:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800e6da:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800e6dc:	68f8      	ldr	r0, [r7, #12]
 800e6de:	f000 f81f 	bl	800e720 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800e6e2:	68fb      	ldr	r3, [r7, #12]
 800e6e4:	2220      	movs	r2, #32
 800e6e6:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800e6ea:	68fb      	ldr	r3, [r7, #12]
 800e6ec:	2200      	movs	r2, #0
 800e6ee:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

          return HAL_TIMEOUT;
 800e6f2:	2303      	movs	r3, #3
 800e6f4:	e00f      	b.n	800e716 <UART_WaitOnFlagUntilTimeout+0xc6>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800e6f6:	68fb      	ldr	r3, [r7, #12]
 800e6f8:	681b      	ldr	r3, [r3, #0]
 800e6fa:	69da      	ldr	r2, [r3, #28]
 800e6fc:	68bb      	ldr	r3, [r7, #8]
 800e6fe:	4013      	ands	r3, r2
 800e700:	68ba      	ldr	r2, [r7, #8]
 800e702:	429a      	cmp	r2, r3
 800e704:	bf0c      	ite	eq
 800e706:	2301      	moveq	r3, #1
 800e708:	2300      	movne	r3, #0
 800e70a:	b2db      	uxtb	r3, r3
 800e70c:	461a      	mov	r2, r3
 800e70e:	79fb      	ldrb	r3, [r7, #7]
 800e710:	429a      	cmp	r2, r3
 800e712:	d0a6      	beq.n	800e662 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800e714:	2300      	movs	r3, #0
}
 800e716:	4618      	mov	r0, r3
 800e718:	3710      	adds	r7, #16
 800e71a:	46bd      	mov	sp, r7
 800e71c:	bd80      	pop	{r7, pc}
	...

0800e720 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800e720:	b480      	push	{r7}
 800e722:	b095      	sub	sp, #84	; 0x54
 800e724:	af00      	add	r7, sp, #0
 800e726:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800e728:	687b      	ldr	r3, [r7, #4]
 800e72a:	681b      	ldr	r3, [r3, #0]
 800e72c:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800e72e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800e730:	e853 3f00 	ldrex	r3, [r3]
 800e734:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 800e736:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e738:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800e73c:	64fb      	str	r3, [r7, #76]	; 0x4c
 800e73e:	687b      	ldr	r3, [r7, #4]
 800e740:	681b      	ldr	r3, [r3, #0]
 800e742:	461a      	mov	r2, r3
 800e744:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800e746:	643b      	str	r3, [r7, #64]	; 0x40
 800e748:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800e74a:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800e74c:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800e74e:	e841 2300 	strex	r3, r2, [r1]
 800e752:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800e754:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e756:	2b00      	cmp	r3, #0
 800e758:	d1e6      	bne.n	800e728 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800e75a:	687b      	ldr	r3, [r7, #4]
 800e75c:	681b      	ldr	r3, [r3, #0]
 800e75e:	3308      	adds	r3, #8
 800e760:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800e762:	6a3b      	ldr	r3, [r7, #32]
 800e764:	e853 3f00 	ldrex	r3, [r3]
 800e768:	61fb      	str	r3, [r7, #28]
   return(result);
 800e76a:	69fa      	ldr	r2, [r7, #28]
 800e76c:	4b1e      	ldr	r3, [pc, #120]	; (800e7e8 <UART_EndRxTransfer+0xc8>)
 800e76e:	4013      	ands	r3, r2
 800e770:	64bb      	str	r3, [r7, #72]	; 0x48
 800e772:	687b      	ldr	r3, [r7, #4]
 800e774:	681b      	ldr	r3, [r3, #0]
 800e776:	3308      	adds	r3, #8
 800e778:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800e77a:	62fa      	str	r2, [r7, #44]	; 0x2c
 800e77c:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800e77e:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800e780:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800e782:	e841 2300 	strex	r3, r2, [r1]
 800e786:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800e788:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e78a:	2b00      	cmp	r3, #0
 800e78c:	d1e5      	bne.n	800e75a <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800e78e:	687b      	ldr	r3, [r7, #4]
 800e790:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800e792:	2b01      	cmp	r3, #1
 800e794:	d118      	bne.n	800e7c8 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800e796:	687b      	ldr	r3, [r7, #4]
 800e798:	681b      	ldr	r3, [r3, #0]
 800e79a:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800e79c:	68fb      	ldr	r3, [r7, #12]
 800e79e:	e853 3f00 	ldrex	r3, [r3]
 800e7a2:	60bb      	str	r3, [r7, #8]
   return(result);
 800e7a4:	68bb      	ldr	r3, [r7, #8]
 800e7a6:	f023 0310 	bic.w	r3, r3, #16
 800e7aa:	647b      	str	r3, [r7, #68]	; 0x44
 800e7ac:	687b      	ldr	r3, [r7, #4]
 800e7ae:	681b      	ldr	r3, [r3, #0]
 800e7b0:	461a      	mov	r2, r3
 800e7b2:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800e7b4:	61bb      	str	r3, [r7, #24]
 800e7b6:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800e7b8:	6979      	ldr	r1, [r7, #20]
 800e7ba:	69ba      	ldr	r2, [r7, #24]
 800e7bc:	e841 2300 	strex	r3, r2, [r1]
 800e7c0:	613b      	str	r3, [r7, #16]
   return(result);
 800e7c2:	693b      	ldr	r3, [r7, #16]
 800e7c4:	2b00      	cmp	r3, #0
 800e7c6:	d1e6      	bne.n	800e796 <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800e7c8:	687b      	ldr	r3, [r7, #4]
 800e7ca:	2220      	movs	r2, #32
 800e7cc:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800e7d0:	687b      	ldr	r3, [r7, #4]
 800e7d2:	2200      	movs	r2, #0
 800e7d4:	66da      	str	r2, [r3, #108]	; 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 800e7d6:	687b      	ldr	r3, [r7, #4]
 800e7d8:	2200      	movs	r2, #0
 800e7da:	675a      	str	r2, [r3, #116]	; 0x74
}
 800e7dc:	bf00      	nop
 800e7de:	3754      	adds	r7, #84	; 0x54
 800e7e0:	46bd      	mov	sp, r7
 800e7e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e7e6:	4770      	bx	lr
 800e7e8:	effffffe 	.word	0xeffffffe

0800e7ec <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 800e7ec:	b480      	push	{r7}
 800e7ee:	b085      	sub	sp, #20
 800e7f0:	af00      	add	r7, sp, #0
 800e7f2:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 800e7f4:	687b      	ldr	r3, [r7, #4]
 800e7f6:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 800e7fa:	2b01      	cmp	r3, #1
 800e7fc:	d101      	bne.n	800e802 <HAL_UARTEx_DisableFifoMode+0x16>
 800e7fe:	2302      	movs	r3, #2
 800e800:	e027      	b.n	800e852 <HAL_UARTEx_DisableFifoMode+0x66>
 800e802:	687b      	ldr	r3, [r7, #4]
 800e804:	2201      	movs	r2, #1
 800e806:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800e80a:	687b      	ldr	r3, [r7, #4]
 800e80c:	2224      	movs	r2, #36	; 0x24
 800e80e:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800e812:	687b      	ldr	r3, [r7, #4]
 800e814:	681b      	ldr	r3, [r3, #0]
 800e816:	681b      	ldr	r3, [r3, #0]
 800e818:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800e81a:	687b      	ldr	r3, [r7, #4]
 800e81c:	681b      	ldr	r3, [r3, #0]
 800e81e:	681a      	ldr	r2, [r3, #0]
 800e820:	687b      	ldr	r3, [r7, #4]
 800e822:	681b      	ldr	r3, [r3, #0]
 800e824:	f022 0201 	bic.w	r2, r2, #1
 800e828:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 800e82a:	68fb      	ldr	r3, [r7, #12]
 800e82c:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 800e830:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 800e832:	687b      	ldr	r3, [r7, #4]
 800e834:	2200      	movs	r2, #0
 800e836:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800e838:	687b      	ldr	r3, [r7, #4]
 800e83a:	681b      	ldr	r3, [r3, #0]
 800e83c:	68fa      	ldr	r2, [r7, #12]
 800e83e:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800e840:	687b      	ldr	r3, [r7, #4]
 800e842:	2220      	movs	r2, #32
 800e844:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800e848:	687b      	ldr	r3, [r7, #4]
 800e84a:	2200      	movs	r2, #0
 800e84c:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 800e850:	2300      	movs	r3, #0
}
 800e852:	4618      	mov	r0, r3
 800e854:	3714      	adds	r7, #20
 800e856:	46bd      	mov	sp, r7
 800e858:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e85c:	4770      	bx	lr

0800e85e <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800e85e:	b580      	push	{r7, lr}
 800e860:	b084      	sub	sp, #16
 800e862:	af00      	add	r7, sp, #0
 800e864:	6078      	str	r0, [r7, #4]
 800e866:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800e868:	687b      	ldr	r3, [r7, #4]
 800e86a:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 800e86e:	2b01      	cmp	r3, #1
 800e870:	d101      	bne.n	800e876 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 800e872:	2302      	movs	r3, #2
 800e874:	e02d      	b.n	800e8d2 <HAL_UARTEx_SetTxFifoThreshold+0x74>
 800e876:	687b      	ldr	r3, [r7, #4]
 800e878:	2201      	movs	r2, #1
 800e87a:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800e87e:	687b      	ldr	r3, [r7, #4]
 800e880:	2224      	movs	r2, #36	; 0x24
 800e882:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800e886:	687b      	ldr	r3, [r7, #4]
 800e888:	681b      	ldr	r3, [r3, #0]
 800e88a:	681b      	ldr	r3, [r3, #0]
 800e88c:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800e88e:	687b      	ldr	r3, [r7, #4]
 800e890:	681b      	ldr	r3, [r3, #0]
 800e892:	681a      	ldr	r2, [r3, #0]
 800e894:	687b      	ldr	r3, [r7, #4]
 800e896:	681b      	ldr	r3, [r3, #0]
 800e898:	f022 0201 	bic.w	r2, r2, #1
 800e89c:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 800e89e:	687b      	ldr	r3, [r7, #4]
 800e8a0:	681b      	ldr	r3, [r3, #0]
 800e8a2:	689b      	ldr	r3, [r3, #8]
 800e8a4:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 800e8a8:	687b      	ldr	r3, [r7, #4]
 800e8aa:	681b      	ldr	r3, [r3, #0]
 800e8ac:	683a      	ldr	r2, [r7, #0]
 800e8ae:	430a      	orrs	r2, r1
 800e8b0:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800e8b2:	6878      	ldr	r0, [r7, #4]
 800e8b4:	f000 f850 	bl	800e958 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800e8b8:	687b      	ldr	r3, [r7, #4]
 800e8ba:	681b      	ldr	r3, [r3, #0]
 800e8bc:	68fa      	ldr	r2, [r7, #12]
 800e8be:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800e8c0:	687b      	ldr	r3, [r7, #4]
 800e8c2:	2220      	movs	r2, #32
 800e8c4:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800e8c8:	687b      	ldr	r3, [r7, #4]
 800e8ca:	2200      	movs	r2, #0
 800e8cc:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 800e8d0:	2300      	movs	r3, #0
}
 800e8d2:	4618      	mov	r0, r3
 800e8d4:	3710      	adds	r7, #16
 800e8d6:	46bd      	mov	sp, r7
 800e8d8:	bd80      	pop	{r7, pc}

0800e8da <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800e8da:	b580      	push	{r7, lr}
 800e8dc:	b084      	sub	sp, #16
 800e8de:	af00      	add	r7, sp, #0
 800e8e0:	6078      	str	r0, [r7, #4]
 800e8e2:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800e8e4:	687b      	ldr	r3, [r7, #4]
 800e8e6:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 800e8ea:	2b01      	cmp	r3, #1
 800e8ec:	d101      	bne.n	800e8f2 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 800e8ee:	2302      	movs	r3, #2
 800e8f0:	e02d      	b.n	800e94e <HAL_UARTEx_SetRxFifoThreshold+0x74>
 800e8f2:	687b      	ldr	r3, [r7, #4]
 800e8f4:	2201      	movs	r2, #1
 800e8f6:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800e8fa:	687b      	ldr	r3, [r7, #4]
 800e8fc:	2224      	movs	r2, #36	; 0x24
 800e8fe:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800e902:	687b      	ldr	r3, [r7, #4]
 800e904:	681b      	ldr	r3, [r3, #0]
 800e906:	681b      	ldr	r3, [r3, #0]
 800e908:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800e90a:	687b      	ldr	r3, [r7, #4]
 800e90c:	681b      	ldr	r3, [r3, #0]
 800e90e:	681a      	ldr	r2, [r3, #0]
 800e910:	687b      	ldr	r3, [r7, #4]
 800e912:	681b      	ldr	r3, [r3, #0]
 800e914:	f022 0201 	bic.w	r2, r2, #1
 800e918:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 800e91a:	687b      	ldr	r3, [r7, #4]
 800e91c:	681b      	ldr	r3, [r3, #0]
 800e91e:	689b      	ldr	r3, [r3, #8]
 800e920:	f023 6160 	bic.w	r1, r3, #234881024	; 0xe000000
 800e924:	687b      	ldr	r3, [r7, #4]
 800e926:	681b      	ldr	r3, [r3, #0]
 800e928:	683a      	ldr	r2, [r7, #0]
 800e92a:	430a      	orrs	r2, r1
 800e92c:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800e92e:	6878      	ldr	r0, [r7, #4]
 800e930:	f000 f812 	bl	800e958 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800e934:	687b      	ldr	r3, [r7, #4]
 800e936:	681b      	ldr	r3, [r3, #0]
 800e938:	68fa      	ldr	r2, [r7, #12]
 800e93a:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800e93c:	687b      	ldr	r3, [r7, #4]
 800e93e:	2220      	movs	r2, #32
 800e940:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800e944:	687b      	ldr	r3, [r7, #4]
 800e946:	2200      	movs	r2, #0
 800e948:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 800e94c:	2300      	movs	r3, #0
}
 800e94e:	4618      	mov	r0, r3
 800e950:	3710      	adds	r7, #16
 800e952:	46bd      	mov	sp, r7
 800e954:	bd80      	pop	{r7, pc}
	...

0800e958 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 800e958:	b480      	push	{r7}
 800e95a:	b085      	sub	sp, #20
 800e95c:	af00      	add	r7, sp, #0
 800e95e:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 800e960:	687b      	ldr	r3, [r7, #4]
 800e962:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800e964:	2b00      	cmp	r3, #0
 800e966:	d108      	bne.n	800e97a <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 800e968:	687b      	ldr	r3, [r7, #4]
 800e96a:	2201      	movs	r2, #1
 800e96c:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = 1U;
 800e970:	687b      	ldr	r3, [r7, #4]
 800e972:	2201      	movs	r2, #1
 800e974:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 800e978:	e031      	b.n	800e9de <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 800e97a:	2310      	movs	r3, #16
 800e97c:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 800e97e:	2310      	movs	r3, #16
 800e980:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 800e982:	687b      	ldr	r3, [r7, #4]
 800e984:	681b      	ldr	r3, [r3, #0]
 800e986:	689b      	ldr	r3, [r3, #8]
 800e988:	0e5b      	lsrs	r3, r3, #25
 800e98a:	b2db      	uxtb	r3, r3
 800e98c:	f003 0307 	and.w	r3, r3, #7
 800e990:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 800e992:	687b      	ldr	r3, [r7, #4]
 800e994:	681b      	ldr	r3, [r3, #0]
 800e996:	689b      	ldr	r3, [r3, #8]
 800e998:	0f5b      	lsrs	r3, r3, #29
 800e99a:	b2db      	uxtb	r3, r3
 800e99c:	f003 0307 	and.w	r3, r3, #7
 800e9a0:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800e9a2:	7bbb      	ldrb	r3, [r7, #14]
 800e9a4:	7b3a      	ldrb	r2, [r7, #12]
 800e9a6:	4911      	ldr	r1, [pc, #68]	; (800e9ec <UARTEx_SetNbDataToProcess+0x94>)
 800e9a8:	5c8a      	ldrb	r2, [r1, r2]
 800e9aa:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 800e9ae:	7b3a      	ldrb	r2, [r7, #12]
 800e9b0:	490f      	ldr	r1, [pc, #60]	; (800e9f0 <UARTEx_SetNbDataToProcess+0x98>)
 800e9b2:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800e9b4:	fb93 f3f2 	sdiv	r3, r3, r2
 800e9b8:	b29a      	uxth	r2, r3
 800e9ba:	687b      	ldr	r3, [r7, #4]
 800e9bc:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800e9c0:	7bfb      	ldrb	r3, [r7, #15]
 800e9c2:	7b7a      	ldrb	r2, [r7, #13]
 800e9c4:	4909      	ldr	r1, [pc, #36]	; (800e9ec <UARTEx_SetNbDataToProcess+0x94>)
 800e9c6:	5c8a      	ldrb	r2, [r1, r2]
 800e9c8:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 800e9cc:	7b7a      	ldrb	r2, [r7, #13]
 800e9ce:	4908      	ldr	r1, [pc, #32]	; (800e9f0 <UARTEx_SetNbDataToProcess+0x98>)
 800e9d0:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800e9d2:	fb93 f3f2 	sdiv	r3, r3, r2
 800e9d6:	b29a      	uxth	r2, r3
 800e9d8:	687b      	ldr	r3, [r7, #4]
 800e9da:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
}
 800e9de:	bf00      	nop
 800e9e0:	3714      	adds	r7, #20
 800e9e2:	46bd      	mov	sp, r7
 800e9e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e9e8:	4770      	bx	lr
 800e9ea:	bf00      	nop
 800e9ec:	0801ec08 	.word	0x0801ec08
 800e9f0:	0801ec10 	.word	0x0801ec10

0800e9f4 <MX_LWIP_Init>:

/**
  * LwIP initialization function
  */
void MX_LWIP_Init(void)
{
 800e9f4:	b580      	push	{r7, lr}
 800e9f6:	b084      	sub	sp, #16
 800e9f8:	af04      	add	r7, sp, #16
  /* IP addresses initialization */
  IP_ADDRESS[0] = 192;
 800e9fa:	4b8d      	ldr	r3, [pc, #564]	; (800ec30 <MX_LWIP_Init+0x23c>)
 800e9fc:	22c0      	movs	r2, #192	; 0xc0
 800e9fe:	701a      	strb	r2, [r3, #0]
  IP_ADDRESS[1] = 168;
 800ea00:	4b8b      	ldr	r3, [pc, #556]	; (800ec30 <MX_LWIP_Init+0x23c>)
 800ea02:	22a8      	movs	r2, #168	; 0xa8
 800ea04:	705a      	strb	r2, [r3, #1]
  IP_ADDRESS[2] = 1;
 800ea06:	4b8a      	ldr	r3, [pc, #552]	; (800ec30 <MX_LWIP_Init+0x23c>)
 800ea08:	2201      	movs	r2, #1
 800ea0a:	709a      	strb	r2, [r3, #2]
  IP_ADDRESS[3] = 10;
 800ea0c:	4b88      	ldr	r3, [pc, #544]	; (800ec30 <MX_LWIP_Init+0x23c>)
 800ea0e:	220a      	movs	r2, #10
 800ea10:	70da      	strb	r2, [r3, #3]
  NETMASK_ADDRESS[0] = 255;
 800ea12:	4b88      	ldr	r3, [pc, #544]	; (800ec34 <MX_LWIP_Init+0x240>)
 800ea14:	22ff      	movs	r2, #255	; 0xff
 800ea16:	701a      	strb	r2, [r3, #0]
  NETMASK_ADDRESS[1] = 255;
 800ea18:	4b86      	ldr	r3, [pc, #536]	; (800ec34 <MX_LWIP_Init+0x240>)
 800ea1a:	22ff      	movs	r2, #255	; 0xff
 800ea1c:	705a      	strb	r2, [r3, #1]
  NETMASK_ADDRESS[2] = 0;
 800ea1e:	4b85      	ldr	r3, [pc, #532]	; (800ec34 <MX_LWIP_Init+0x240>)
 800ea20:	2200      	movs	r2, #0
 800ea22:	709a      	strb	r2, [r3, #2]
  NETMASK_ADDRESS[3] = 0;
 800ea24:	4b83      	ldr	r3, [pc, #524]	; (800ec34 <MX_LWIP_Init+0x240>)
 800ea26:	2200      	movs	r2, #0
 800ea28:	70da      	strb	r2, [r3, #3]
  GATEWAY_ADDRESS[0] = 192;
 800ea2a:	4b83      	ldr	r3, [pc, #524]	; (800ec38 <MX_LWIP_Init+0x244>)
 800ea2c:	22c0      	movs	r2, #192	; 0xc0
 800ea2e:	701a      	strb	r2, [r3, #0]
  GATEWAY_ADDRESS[1] = 168;
 800ea30:	4b81      	ldr	r3, [pc, #516]	; (800ec38 <MX_LWIP_Init+0x244>)
 800ea32:	22a8      	movs	r2, #168	; 0xa8
 800ea34:	705a      	strb	r2, [r3, #1]
  GATEWAY_ADDRESS[2] = 1;
 800ea36:	4b80      	ldr	r3, [pc, #512]	; (800ec38 <MX_LWIP_Init+0x244>)
 800ea38:	2201      	movs	r2, #1
 800ea3a:	709a      	strb	r2, [r3, #2]
  GATEWAY_ADDRESS[3] = 1;
 800ea3c:	4b7e      	ldr	r3, [pc, #504]	; (800ec38 <MX_LWIP_Init+0x244>)
 800ea3e:	2201      	movs	r2, #1
 800ea40:	70da      	strb	r2, [r3, #3]

/* USER CODE BEGIN IP_ADDRESSES */
/* USER CODE END IP_ADDRESSES */

  /* Initilialize the LwIP stack without RTOS */
  lwip_init();
 800ea42:	f000 fddf 	bl	800f604 <lwip_init>

  /* IP addresses initialization without DHCP (IPv4) */
  IP4_ADDR(&ipaddr, IP_ADDRESS[0], IP_ADDRESS[1], IP_ADDRESS[2], IP_ADDRESS[3]);
 800ea46:	4b7a      	ldr	r3, [pc, #488]	; (800ec30 <MX_LWIP_Init+0x23c>)
 800ea48:	781b      	ldrb	r3, [r3, #0]
 800ea4a:	061a      	lsls	r2, r3, #24
 800ea4c:	4b78      	ldr	r3, [pc, #480]	; (800ec30 <MX_LWIP_Init+0x23c>)
 800ea4e:	785b      	ldrb	r3, [r3, #1]
 800ea50:	041b      	lsls	r3, r3, #16
 800ea52:	431a      	orrs	r2, r3
 800ea54:	4b76      	ldr	r3, [pc, #472]	; (800ec30 <MX_LWIP_Init+0x23c>)
 800ea56:	789b      	ldrb	r3, [r3, #2]
 800ea58:	021b      	lsls	r3, r3, #8
 800ea5a:	4313      	orrs	r3, r2
 800ea5c:	4a74      	ldr	r2, [pc, #464]	; (800ec30 <MX_LWIP_Init+0x23c>)
 800ea5e:	78d2      	ldrb	r2, [r2, #3]
 800ea60:	4313      	orrs	r3, r2
 800ea62:	061a      	lsls	r2, r3, #24
 800ea64:	4b72      	ldr	r3, [pc, #456]	; (800ec30 <MX_LWIP_Init+0x23c>)
 800ea66:	781b      	ldrb	r3, [r3, #0]
 800ea68:	0619      	lsls	r1, r3, #24
 800ea6a:	4b71      	ldr	r3, [pc, #452]	; (800ec30 <MX_LWIP_Init+0x23c>)
 800ea6c:	785b      	ldrb	r3, [r3, #1]
 800ea6e:	041b      	lsls	r3, r3, #16
 800ea70:	4319      	orrs	r1, r3
 800ea72:	4b6f      	ldr	r3, [pc, #444]	; (800ec30 <MX_LWIP_Init+0x23c>)
 800ea74:	789b      	ldrb	r3, [r3, #2]
 800ea76:	021b      	lsls	r3, r3, #8
 800ea78:	430b      	orrs	r3, r1
 800ea7a:	496d      	ldr	r1, [pc, #436]	; (800ec30 <MX_LWIP_Init+0x23c>)
 800ea7c:	78c9      	ldrb	r1, [r1, #3]
 800ea7e:	430b      	orrs	r3, r1
 800ea80:	021b      	lsls	r3, r3, #8
 800ea82:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 800ea86:	431a      	orrs	r2, r3
 800ea88:	4b69      	ldr	r3, [pc, #420]	; (800ec30 <MX_LWIP_Init+0x23c>)
 800ea8a:	781b      	ldrb	r3, [r3, #0]
 800ea8c:	0619      	lsls	r1, r3, #24
 800ea8e:	4b68      	ldr	r3, [pc, #416]	; (800ec30 <MX_LWIP_Init+0x23c>)
 800ea90:	785b      	ldrb	r3, [r3, #1]
 800ea92:	041b      	lsls	r3, r3, #16
 800ea94:	4319      	orrs	r1, r3
 800ea96:	4b66      	ldr	r3, [pc, #408]	; (800ec30 <MX_LWIP_Init+0x23c>)
 800ea98:	789b      	ldrb	r3, [r3, #2]
 800ea9a:	021b      	lsls	r3, r3, #8
 800ea9c:	430b      	orrs	r3, r1
 800ea9e:	4964      	ldr	r1, [pc, #400]	; (800ec30 <MX_LWIP_Init+0x23c>)
 800eaa0:	78c9      	ldrb	r1, [r1, #3]
 800eaa2:	430b      	orrs	r3, r1
 800eaa4:	0a1b      	lsrs	r3, r3, #8
 800eaa6:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 800eaaa:	431a      	orrs	r2, r3
 800eaac:	4b60      	ldr	r3, [pc, #384]	; (800ec30 <MX_LWIP_Init+0x23c>)
 800eaae:	781b      	ldrb	r3, [r3, #0]
 800eab0:	0619      	lsls	r1, r3, #24
 800eab2:	4b5f      	ldr	r3, [pc, #380]	; (800ec30 <MX_LWIP_Init+0x23c>)
 800eab4:	785b      	ldrb	r3, [r3, #1]
 800eab6:	041b      	lsls	r3, r3, #16
 800eab8:	4319      	orrs	r1, r3
 800eaba:	4b5d      	ldr	r3, [pc, #372]	; (800ec30 <MX_LWIP_Init+0x23c>)
 800eabc:	789b      	ldrb	r3, [r3, #2]
 800eabe:	021b      	lsls	r3, r3, #8
 800eac0:	430b      	orrs	r3, r1
 800eac2:	495b      	ldr	r1, [pc, #364]	; (800ec30 <MX_LWIP_Init+0x23c>)
 800eac4:	78c9      	ldrb	r1, [r1, #3]
 800eac6:	430b      	orrs	r3, r1
 800eac8:	0e1b      	lsrs	r3, r3, #24
 800eaca:	4313      	orrs	r3, r2
 800eacc:	4a5b      	ldr	r2, [pc, #364]	; (800ec3c <MX_LWIP_Init+0x248>)
 800eace:	6013      	str	r3, [r2, #0]
  IP4_ADDR(&netmask, NETMASK_ADDRESS[0], NETMASK_ADDRESS[1] , NETMASK_ADDRESS[2], NETMASK_ADDRESS[3]);
 800ead0:	4b58      	ldr	r3, [pc, #352]	; (800ec34 <MX_LWIP_Init+0x240>)
 800ead2:	781b      	ldrb	r3, [r3, #0]
 800ead4:	061a      	lsls	r2, r3, #24
 800ead6:	4b57      	ldr	r3, [pc, #348]	; (800ec34 <MX_LWIP_Init+0x240>)
 800ead8:	785b      	ldrb	r3, [r3, #1]
 800eada:	041b      	lsls	r3, r3, #16
 800eadc:	431a      	orrs	r2, r3
 800eade:	4b55      	ldr	r3, [pc, #340]	; (800ec34 <MX_LWIP_Init+0x240>)
 800eae0:	789b      	ldrb	r3, [r3, #2]
 800eae2:	021b      	lsls	r3, r3, #8
 800eae4:	4313      	orrs	r3, r2
 800eae6:	4a53      	ldr	r2, [pc, #332]	; (800ec34 <MX_LWIP_Init+0x240>)
 800eae8:	78d2      	ldrb	r2, [r2, #3]
 800eaea:	4313      	orrs	r3, r2
 800eaec:	061a      	lsls	r2, r3, #24
 800eaee:	4b51      	ldr	r3, [pc, #324]	; (800ec34 <MX_LWIP_Init+0x240>)
 800eaf0:	781b      	ldrb	r3, [r3, #0]
 800eaf2:	0619      	lsls	r1, r3, #24
 800eaf4:	4b4f      	ldr	r3, [pc, #316]	; (800ec34 <MX_LWIP_Init+0x240>)
 800eaf6:	785b      	ldrb	r3, [r3, #1]
 800eaf8:	041b      	lsls	r3, r3, #16
 800eafa:	4319      	orrs	r1, r3
 800eafc:	4b4d      	ldr	r3, [pc, #308]	; (800ec34 <MX_LWIP_Init+0x240>)
 800eafe:	789b      	ldrb	r3, [r3, #2]
 800eb00:	021b      	lsls	r3, r3, #8
 800eb02:	430b      	orrs	r3, r1
 800eb04:	494b      	ldr	r1, [pc, #300]	; (800ec34 <MX_LWIP_Init+0x240>)
 800eb06:	78c9      	ldrb	r1, [r1, #3]
 800eb08:	430b      	orrs	r3, r1
 800eb0a:	021b      	lsls	r3, r3, #8
 800eb0c:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 800eb10:	431a      	orrs	r2, r3
 800eb12:	4b48      	ldr	r3, [pc, #288]	; (800ec34 <MX_LWIP_Init+0x240>)
 800eb14:	781b      	ldrb	r3, [r3, #0]
 800eb16:	0619      	lsls	r1, r3, #24
 800eb18:	4b46      	ldr	r3, [pc, #280]	; (800ec34 <MX_LWIP_Init+0x240>)
 800eb1a:	785b      	ldrb	r3, [r3, #1]
 800eb1c:	041b      	lsls	r3, r3, #16
 800eb1e:	4319      	orrs	r1, r3
 800eb20:	4b44      	ldr	r3, [pc, #272]	; (800ec34 <MX_LWIP_Init+0x240>)
 800eb22:	789b      	ldrb	r3, [r3, #2]
 800eb24:	021b      	lsls	r3, r3, #8
 800eb26:	430b      	orrs	r3, r1
 800eb28:	4942      	ldr	r1, [pc, #264]	; (800ec34 <MX_LWIP_Init+0x240>)
 800eb2a:	78c9      	ldrb	r1, [r1, #3]
 800eb2c:	430b      	orrs	r3, r1
 800eb2e:	0a1b      	lsrs	r3, r3, #8
 800eb30:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 800eb34:	431a      	orrs	r2, r3
 800eb36:	4b3f      	ldr	r3, [pc, #252]	; (800ec34 <MX_LWIP_Init+0x240>)
 800eb38:	781b      	ldrb	r3, [r3, #0]
 800eb3a:	0619      	lsls	r1, r3, #24
 800eb3c:	4b3d      	ldr	r3, [pc, #244]	; (800ec34 <MX_LWIP_Init+0x240>)
 800eb3e:	785b      	ldrb	r3, [r3, #1]
 800eb40:	041b      	lsls	r3, r3, #16
 800eb42:	4319      	orrs	r1, r3
 800eb44:	4b3b      	ldr	r3, [pc, #236]	; (800ec34 <MX_LWIP_Init+0x240>)
 800eb46:	789b      	ldrb	r3, [r3, #2]
 800eb48:	021b      	lsls	r3, r3, #8
 800eb4a:	430b      	orrs	r3, r1
 800eb4c:	4939      	ldr	r1, [pc, #228]	; (800ec34 <MX_LWIP_Init+0x240>)
 800eb4e:	78c9      	ldrb	r1, [r1, #3]
 800eb50:	430b      	orrs	r3, r1
 800eb52:	0e1b      	lsrs	r3, r3, #24
 800eb54:	4313      	orrs	r3, r2
 800eb56:	4a3a      	ldr	r2, [pc, #232]	; (800ec40 <MX_LWIP_Init+0x24c>)
 800eb58:	6013      	str	r3, [r2, #0]
  IP4_ADDR(&gw, GATEWAY_ADDRESS[0], GATEWAY_ADDRESS[1], GATEWAY_ADDRESS[2], GATEWAY_ADDRESS[3]);
 800eb5a:	4b37      	ldr	r3, [pc, #220]	; (800ec38 <MX_LWIP_Init+0x244>)
 800eb5c:	781b      	ldrb	r3, [r3, #0]
 800eb5e:	061a      	lsls	r2, r3, #24
 800eb60:	4b35      	ldr	r3, [pc, #212]	; (800ec38 <MX_LWIP_Init+0x244>)
 800eb62:	785b      	ldrb	r3, [r3, #1]
 800eb64:	041b      	lsls	r3, r3, #16
 800eb66:	431a      	orrs	r2, r3
 800eb68:	4b33      	ldr	r3, [pc, #204]	; (800ec38 <MX_LWIP_Init+0x244>)
 800eb6a:	789b      	ldrb	r3, [r3, #2]
 800eb6c:	021b      	lsls	r3, r3, #8
 800eb6e:	4313      	orrs	r3, r2
 800eb70:	4a31      	ldr	r2, [pc, #196]	; (800ec38 <MX_LWIP_Init+0x244>)
 800eb72:	78d2      	ldrb	r2, [r2, #3]
 800eb74:	4313      	orrs	r3, r2
 800eb76:	061a      	lsls	r2, r3, #24
 800eb78:	4b2f      	ldr	r3, [pc, #188]	; (800ec38 <MX_LWIP_Init+0x244>)
 800eb7a:	781b      	ldrb	r3, [r3, #0]
 800eb7c:	0619      	lsls	r1, r3, #24
 800eb7e:	4b2e      	ldr	r3, [pc, #184]	; (800ec38 <MX_LWIP_Init+0x244>)
 800eb80:	785b      	ldrb	r3, [r3, #1]
 800eb82:	041b      	lsls	r3, r3, #16
 800eb84:	4319      	orrs	r1, r3
 800eb86:	4b2c      	ldr	r3, [pc, #176]	; (800ec38 <MX_LWIP_Init+0x244>)
 800eb88:	789b      	ldrb	r3, [r3, #2]
 800eb8a:	021b      	lsls	r3, r3, #8
 800eb8c:	430b      	orrs	r3, r1
 800eb8e:	492a      	ldr	r1, [pc, #168]	; (800ec38 <MX_LWIP_Init+0x244>)
 800eb90:	78c9      	ldrb	r1, [r1, #3]
 800eb92:	430b      	orrs	r3, r1
 800eb94:	021b      	lsls	r3, r3, #8
 800eb96:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 800eb9a:	431a      	orrs	r2, r3
 800eb9c:	4b26      	ldr	r3, [pc, #152]	; (800ec38 <MX_LWIP_Init+0x244>)
 800eb9e:	781b      	ldrb	r3, [r3, #0]
 800eba0:	0619      	lsls	r1, r3, #24
 800eba2:	4b25      	ldr	r3, [pc, #148]	; (800ec38 <MX_LWIP_Init+0x244>)
 800eba4:	785b      	ldrb	r3, [r3, #1]
 800eba6:	041b      	lsls	r3, r3, #16
 800eba8:	4319      	orrs	r1, r3
 800ebaa:	4b23      	ldr	r3, [pc, #140]	; (800ec38 <MX_LWIP_Init+0x244>)
 800ebac:	789b      	ldrb	r3, [r3, #2]
 800ebae:	021b      	lsls	r3, r3, #8
 800ebb0:	430b      	orrs	r3, r1
 800ebb2:	4921      	ldr	r1, [pc, #132]	; (800ec38 <MX_LWIP_Init+0x244>)
 800ebb4:	78c9      	ldrb	r1, [r1, #3]
 800ebb6:	430b      	orrs	r3, r1
 800ebb8:	0a1b      	lsrs	r3, r3, #8
 800ebba:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 800ebbe:	431a      	orrs	r2, r3
 800ebc0:	4b1d      	ldr	r3, [pc, #116]	; (800ec38 <MX_LWIP_Init+0x244>)
 800ebc2:	781b      	ldrb	r3, [r3, #0]
 800ebc4:	0619      	lsls	r1, r3, #24
 800ebc6:	4b1c      	ldr	r3, [pc, #112]	; (800ec38 <MX_LWIP_Init+0x244>)
 800ebc8:	785b      	ldrb	r3, [r3, #1]
 800ebca:	041b      	lsls	r3, r3, #16
 800ebcc:	4319      	orrs	r1, r3
 800ebce:	4b1a      	ldr	r3, [pc, #104]	; (800ec38 <MX_LWIP_Init+0x244>)
 800ebd0:	789b      	ldrb	r3, [r3, #2]
 800ebd2:	021b      	lsls	r3, r3, #8
 800ebd4:	430b      	orrs	r3, r1
 800ebd6:	4918      	ldr	r1, [pc, #96]	; (800ec38 <MX_LWIP_Init+0x244>)
 800ebd8:	78c9      	ldrb	r1, [r1, #3]
 800ebda:	430b      	orrs	r3, r1
 800ebdc:	0e1b      	lsrs	r3, r3, #24
 800ebde:	4313      	orrs	r3, r2
 800ebe0:	4a18      	ldr	r2, [pc, #96]	; (800ec44 <MX_LWIP_Init+0x250>)
 800ebe2:	6013      	str	r3, [r2, #0]

  /* add the network interface (IPv4/IPv6) without RTOS */
  netif_add(&gnetif, &ipaddr, &netmask, &gw, NULL, &ethernetif_init, &ethernet_input);
 800ebe4:	4b18      	ldr	r3, [pc, #96]	; (800ec48 <MX_LWIP_Init+0x254>)
 800ebe6:	9302      	str	r3, [sp, #8]
 800ebe8:	4b18      	ldr	r3, [pc, #96]	; (800ec4c <MX_LWIP_Init+0x258>)
 800ebea:	9301      	str	r3, [sp, #4]
 800ebec:	2300      	movs	r3, #0
 800ebee:	9300      	str	r3, [sp, #0]
 800ebf0:	4b14      	ldr	r3, [pc, #80]	; (800ec44 <MX_LWIP_Init+0x250>)
 800ebf2:	4a13      	ldr	r2, [pc, #76]	; (800ec40 <MX_LWIP_Init+0x24c>)
 800ebf4:	4911      	ldr	r1, [pc, #68]	; (800ec3c <MX_LWIP_Init+0x248>)
 800ebf6:	4816      	ldr	r0, [pc, #88]	; (800ec50 <MX_LWIP_Init+0x25c>)
 800ebf8:	f001 f9da 	bl	800ffb0 <netif_add>

  /* Registers the default network interface */
  netif_set_default(&gnetif);
 800ebfc:	4814      	ldr	r0, [pc, #80]	; (800ec50 <MX_LWIP_Init+0x25c>)
 800ebfe:	f001 fb89 	bl	8010314 <netif_set_default>

  if (netif_is_link_up(&gnetif))
 800ec02:	4b13      	ldr	r3, [pc, #76]	; (800ec50 <MX_LWIP_Init+0x25c>)
 800ec04:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 800ec08:	089b      	lsrs	r3, r3, #2
 800ec0a:	f003 0301 	and.w	r3, r3, #1
 800ec0e:	b2db      	uxtb	r3, r3
 800ec10:	2b00      	cmp	r3, #0
 800ec12:	d003      	beq.n	800ec1c <MX_LWIP_Init+0x228>
  {
    /* When the netif is fully configured this function must be called */
    netif_set_up(&gnetif);
 800ec14:	480e      	ldr	r0, [pc, #56]	; (800ec50 <MX_LWIP_Init+0x25c>)
 800ec16:	f001 fb8d 	bl	8010334 <netif_set_up>
 800ec1a:	e002      	b.n	800ec22 <MX_LWIP_Init+0x22e>
  }
  else
  {
    /* When the netif link is down this function must be called */
    netif_set_down(&gnetif);
 800ec1c:	480c      	ldr	r0, [pc, #48]	; (800ec50 <MX_LWIP_Init+0x25c>)
 800ec1e:	f001 fbf5 	bl	801040c <netif_set_down>
  }

  /* Set the link callback function, this function is called on change of link status*/
  netif_set_link_callback(&gnetif, ethernet_link_status_updated);
 800ec22:	490c      	ldr	r1, [pc, #48]	; (800ec54 <MX_LWIP_Init+0x260>)
 800ec24:	480a      	ldr	r0, [pc, #40]	; (800ec50 <MX_LWIP_Init+0x25c>)
 800ec26:	f001 fc87 	bl	8010538 <netif_set_link_callback>
  /* Create the Ethernet link handler thread */

/* USER CODE BEGIN 3 */

/* USER CODE END 3 */
}
 800ec2a:	bf00      	nop
 800ec2c:	46bd      	mov	sp, r7
 800ec2e:	bd80      	pop	{r7, pc}
 800ec30:	2000064c 	.word	0x2000064c
 800ec34:	20000650 	.word	0x20000650
 800ec38:	20000654 	.word	0x20000654
 800ec3c:	20000640 	.word	0x20000640
 800ec40:	20000644 	.word	0x20000644
 800ec44:	20000648 	.word	0x20000648
 800ec48:	08018e49 	.word	0x08018e49
 800ec4c:	0800ef11 	.word	0x0800ef11
 800ec50:	2000060c 	.word	0x2000060c
 800ec54:	0800ec59 	.word	0x0800ec59

0800ec58 <ethernet_link_status_updated>:
  * @brief  Notify the User about the network interface config status
  * @param  netif: the network interface
  * @retval None
  */
static void ethernet_link_status_updated(struct netif *netif)
{
 800ec58:	b480      	push	{r7}
 800ec5a:	b083      	sub	sp, #12
 800ec5c:	af00      	add	r7, sp, #0
 800ec5e:	6078      	str	r0, [r7, #4]
  else /* netif is down */
  {
/* USER CODE BEGIN 6 */
/* USER CODE END 6 */
  }
}
 800ec60:	bf00      	nop
 800ec62:	370c      	adds	r7, #12
 800ec64:	46bd      	mov	sp, r7
 800ec66:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ec6a:	4770      	bx	lr

0800ec6c <low_level_init>:
 *
 * @param netif the already initialized lwip network interface structure
 *        for this ethernetif
 */
static void low_level_init(struct netif *netif)
{
 800ec6c:	b580      	push	{r7, lr}
 800ec6e:	b084      	sub	sp, #16
 800ec70:	af00      	add	r7, sp, #0
 800ec72:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_eth_init_status = HAL_OK;
 800ec74:	2300      	movs	r3, #0
 800ec76:	73fb      	strb	r3, [r7, #15]
  /* Start ETH HAL Init */

   uint8_t MACAddr[6] ;
  heth.Instance = ETH;
 800ec78:	4b3f      	ldr	r3, [pc, #252]	; (800ed78 <low_level_init+0x10c>)
 800ec7a:	4a40      	ldr	r2, [pc, #256]	; (800ed7c <low_level_init+0x110>)
 800ec7c:	601a      	str	r2, [r3, #0]
  MACAddr[0] = 0x00;
 800ec7e:	2300      	movs	r3, #0
 800ec80:	723b      	strb	r3, [r7, #8]
  MACAddr[1] = 0x80;
 800ec82:	2380      	movs	r3, #128	; 0x80
 800ec84:	727b      	strb	r3, [r7, #9]
  MACAddr[2] = 0xE1;
 800ec86:	23e1      	movs	r3, #225	; 0xe1
 800ec88:	72bb      	strb	r3, [r7, #10]
  MACAddr[3] = 0x00;
 800ec8a:	2300      	movs	r3, #0
 800ec8c:	72fb      	strb	r3, [r7, #11]
  MACAddr[4] = 0x00;
 800ec8e:	2300      	movs	r3, #0
 800ec90:	733b      	strb	r3, [r7, #12]
  MACAddr[5] = 0x00;
 800ec92:	2300      	movs	r3, #0
 800ec94:	737b      	strb	r3, [r7, #13]
  heth.Init.MACAddr = &MACAddr[0];
 800ec96:	4a38      	ldr	r2, [pc, #224]	; (800ed78 <low_level_init+0x10c>)
 800ec98:	f107 0308 	add.w	r3, r7, #8
 800ec9c:	6053      	str	r3, [r2, #4]
  heth.Init.MediaInterface = HAL_ETH_RMII_MODE;
 800ec9e:	4b36      	ldr	r3, [pc, #216]	; (800ed78 <low_level_init+0x10c>)
 800eca0:	2201      	movs	r2, #1
 800eca2:	721a      	strb	r2, [r3, #8]
  heth.Init.TxDesc = DMATxDscrTab;
 800eca4:	4b34      	ldr	r3, [pc, #208]	; (800ed78 <low_level_init+0x10c>)
 800eca6:	4a36      	ldr	r2, [pc, #216]	; (800ed80 <low_level_init+0x114>)
 800eca8:	60da      	str	r2, [r3, #12]
  heth.Init.RxDesc = DMARxDscrTab;
 800ecaa:	4b33      	ldr	r3, [pc, #204]	; (800ed78 <low_level_init+0x10c>)
 800ecac:	4a35      	ldr	r2, [pc, #212]	; (800ed84 <low_level_init+0x118>)
 800ecae:	611a      	str	r2, [r3, #16]
  heth.Init.RxBuffLen = 1536;
 800ecb0:	4b31      	ldr	r3, [pc, #196]	; (800ed78 <low_level_init+0x10c>)
 800ecb2:	f44f 62c0 	mov.w	r2, #1536	; 0x600
 800ecb6:	615a      	str	r2, [r3, #20]

  /* USER CODE BEGIN MACADDRESS */

  /* USER CODE END MACADDRESS */

  hal_eth_init_status = HAL_ETH_Init(&heth);
 800ecb8:	482f      	ldr	r0, [pc, #188]	; (800ed78 <low_level_init+0x10c>)
 800ecba:	f7f6 ff8f 	bl	8005bdc <HAL_ETH_Init>
 800ecbe:	4603      	mov	r3, r0
 800ecc0:	73fb      	strb	r3, [r7, #15]

  memset(&TxConfig, 0 , sizeof(ETH_TxPacketConfig));
 800ecc2:	2238      	movs	r2, #56	; 0x38
 800ecc4:	2100      	movs	r1, #0
 800ecc6:	4830      	ldr	r0, [pc, #192]	; (800ed88 <low_level_init+0x11c>)
 800ecc8:	f00b f824 	bl	8019d14 <memset>
  TxConfig.Attributes = ETH_TX_PACKETS_FEATURES_CSUM | ETH_TX_PACKETS_FEATURES_CRCPAD;
 800eccc:	4b2e      	ldr	r3, [pc, #184]	; (800ed88 <low_level_init+0x11c>)
 800ecce:	2221      	movs	r2, #33	; 0x21
 800ecd0:	601a      	str	r2, [r3, #0]
  TxConfig.ChecksumCtrl = ETH_CHECKSUM_IPHDR_PAYLOAD_INSERT_PHDR_CALC;
 800ecd2:	4b2d      	ldr	r3, [pc, #180]	; (800ed88 <low_level_init+0x11c>)
 800ecd4:	f44f 3240 	mov.w	r2, #196608	; 0x30000
 800ecd8:	615a      	str	r2, [r3, #20]
  TxConfig.CRCPadCtrl = ETH_CRC_PAD_INSERT;
 800ecda:	4b2b      	ldr	r3, [pc, #172]	; (800ed88 <low_level_init+0x11c>)
 800ecdc:	2200      	movs	r2, #0
 800ecde:	611a      	str	r2, [r3, #16]

  /* End ETH HAL Init */

  /* Initialize the RX POOL */
  LWIP_MEMPOOL_INIT(RX_POOL);
 800ece0:	482a      	ldr	r0, [pc, #168]	; (800ed8c <low_level_init+0x120>)
 800ece2:	f001 f82d 	bl	800fd40 <memp_init_pool>

#if LWIP_ARP || LWIP_ETHERNET

  /* set MAC hardware address length */
  netif->hwaddr_len = ETH_HWADDR_LEN;
 800ece6:	687b      	ldr	r3, [r7, #4]
 800ece8:	2206      	movs	r2, #6
 800ecea:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c

  /* set MAC hardware address */
  netif->hwaddr[0] =  heth.Init.MACAddr[0];
 800ecee:	4b22      	ldr	r3, [pc, #136]	; (800ed78 <low_level_init+0x10c>)
 800ecf0:	685b      	ldr	r3, [r3, #4]
 800ecf2:	781a      	ldrb	r2, [r3, #0]
 800ecf4:	687b      	ldr	r3, [r7, #4]
 800ecf6:	f883 2026 	strb.w	r2, [r3, #38]	; 0x26
  netif->hwaddr[1] =  heth.Init.MACAddr[1];
 800ecfa:	4b1f      	ldr	r3, [pc, #124]	; (800ed78 <low_level_init+0x10c>)
 800ecfc:	685b      	ldr	r3, [r3, #4]
 800ecfe:	785a      	ldrb	r2, [r3, #1]
 800ed00:	687b      	ldr	r3, [r7, #4]
 800ed02:	f883 2027 	strb.w	r2, [r3, #39]	; 0x27
  netif->hwaddr[2] =  heth.Init.MACAddr[2];
 800ed06:	4b1c      	ldr	r3, [pc, #112]	; (800ed78 <low_level_init+0x10c>)
 800ed08:	685b      	ldr	r3, [r3, #4]
 800ed0a:	789a      	ldrb	r2, [r3, #2]
 800ed0c:	687b      	ldr	r3, [r7, #4]
 800ed0e:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
  netif->hwaddr[3] =  heth.Init.MACAddr[3];
 800ed12:	4b19      	ldr	r3, [pc, #100]	; (800ed78 <low_level_init+0x10c>)
 800ed14:	685b      	ldr	r3, [r3, #4]
 800ed16:	78da      	ldrb	r2, [r3, #3]
 800ed18:	687b      	ldr	r3, [r7, #4]
 800ed1a:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29
  netif->hwaddr[4] =  heth.Init.MACAddr[4];
 800ed1e:	4b16      	ldr	r3, [pc, #88]	; (800ed78 <low_level_init+0x10c>)
 800ed20:	685b      	ldr	r3, [r3, #4]
 800ed22:	791a      	ldrb	r2, [r3, #4]
 800ed24:	687b      	ldr	r3, [r7, #4]
 800ed26:	f883 202a 	strb.w	r2, [r3, #42]	; 0x2a
  netif->hwaddr[5] =  heth.Init.MACAddr[5];
 800ed2a:	4b13      	ldr	r3, [pc, #76]	; (800ed78 <low_level_init+0x10c>)
 800ed2c:	685b      	ldr	r3, [r3, #4]
 800ed2e:	795a      	ldrb	r2, [r3, #5]
 800ed30:	687b      	ldr	r3, [r7, #4]
 800ed32:	f883 202b 	strb.w	r2, [r3, #43]	; 0x2b

  /* maximum transfer unit */
  netif->mtu = ETH_MAX_PAYLOAD;
 800ed36:	687b      	ldr	r3, [r7, #4]
 800ed38:	f240 52dc 	movw	r2, #1500	; 0x5dc
 800ed3c:	849a      	strh	r2, [r3, #36]	; 0x24

  /* Accept broadcast address and ARP traffic */
  /* don't set NETIF_FLAG_ETHARP if this device is not an ethernet one */
  #if LWIP_ARP
    netif->flags |= NETIF_FLAG_BROADCAST | NETIF_FLAG_ETHARP;
 800ed3e:	687b      	ldr	r3, [r7, #4]
 800ed40:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 800ed44:	f043 030a 	orr.w	r3, r3, #10
 800ed48:	b2da      	uxtb	r2, r3
 800ed4a:	687b      	ldr	r3, [r7, #4]
 800ed4c:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d

/* USER CODE BEGIN PHY_PRE_CONFIG */

/* USER CODE END PHY_PRE_CONFIG */
  /* Set PHY IO functions */
  LAN8742_RegisterBusIO(&LAN8742, &LAN8742_IOCtx);
 800ed50:	490f      	ldr	r1, [pc, #60]	; (800ed90 <low_level_init+0x124>)
 800ed52:	4810      	ldr	r0, [pc, #64]	; (800ed94 <low_level_init+0x128>)
 800ed54:	f7f4 fc2b 	bl	80035ae <LAN8742_RegisterBusIO>

  /* Initialize the LAN8742 ETH PHY */
  LAN8742_Init(&LAN8742);
 800ed58:	480e      	ldr	r0, [pc, #56]	; (800ed94 <low_level_init+0x128>)
 800ed5a:	f7f4 fc5a 	bl	8003612 <LAN8742_Init>

  if (hal_eth_init_status == HAL_OK)
 800ed5e:	7bfb      	ldrb	r3, [r7, #15]
 800ed60:	2b00      	cmp	r3, #0
 800ed62:	d103      	bne.n	800ed6c <low_level_init+0x100>
  {
  /* Get link state */
  ethernet_link_check_state(netif);
 800ed64:	6878      	ldr	r0, [r7, #4]
 800ed66:	f000 fa3f 	bl	800f1e8 <ethernet_link_check_state>
#endif /* LWIP_ARP || LWIP_ETHERNET */

/* USER CODE BEGIN LOW_LEVEL_INIT */

/* USER CODE END LOW_LEVEL_INIT */
}
 800ed6a:	e001      	b.n	800ed70 <low_level_init+0x104>
    Error_Handler();
 800ed6c:	f7f3 fede 	bl	8002b2c <Error_Handler>
}
 800ed70:	bf00      	nop
 800ed72:	3710      	adds	r7, #16
 800ed74:	46bd      	mov	sp, r7
 800ed76:	bd80      	pop	{r7, pc}
 800ed78:	20000660 	.word	0x20000660
 800ed7c:	40028000 	.word	0x40028000
 800ed80:	30040060 	.word	0x30040060
 800ed84:	30040000 	.word	0x30040000
 800ed88:	20000710 	.word	0x20000710
 800ed8c:	0801ec18 	.word	0x0801ec18
 800ed90:	20000044 	.word	0x20000044
 800ed94:	20000748 	.word	0x20000748

0800ed98 <low_level_output>:
 *       to become available since the stack doesn't retry to send a packet
 *       dropped because of memory failure (except for the TCP timers).
 */

static err_t low_level_output(struct netif *netif, struct pbuf *p)
{
 800ed98:	b580      	push	{r7, lr}
 800ed9a:	b092      	sub	sp, #72	; 0x48
 800ed9c:	af00      	add	r7, sp, #0
 800ed9e:	6078      	str	r0, [r7, #4]
 800eda0:	6039      	str	r1, [r7, #0]
  uint32_t i = 0U;
 800eda2:	2300      	movs	r3, #0
 800eda4:	647b      	str	r3, [r7, #68]	; 0x44
  struct pbuf *q = NULL;
 800eda6:	2300      	movs	r3, #0
 800eda8:	643b      	str	r3, [r7, #64]	; 0x40
  err_t errval = ERR_OK;
 800edaa:	2300      	movs	r3, #0
 800edac:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
  ETH_BufferTypeDef Txbuffer[ETH_TX_DESC_CNT] = {0};
 800edb0:	f107 030c 	add.w	r3, r7, #12
 800edb4:	2230      	movs	r2, #48	; 0x30
 800edb6:	2100      	movs	r1, #0
 800edb8:	4618      	mov	r0, r3
 800edba:	f00a ffab 	bl	8019d14 <memset>

  memset(Txbuffer, 0 , ETH_TX_DESC_CNT*sizeof(ETH_BufferTypeDef));
 800edbe:	f107 030c 	add.w	r3, r7, #12
 800edc2:	2230      	movs	r2, #48	; 0x30
 800edc4:	2100      	movs	r1, #0
 800edc6:	4618      	mov	r0, r3
 800edc8:	f00a ffa4 	bl	8019d14 <memset>

  for(q = p; q != NULL; q = q->next)
 800edcc:	683b      	ldr	r3, [r7, #0]
 800edce:	643b      	str	r3, [r7, #64]	; 0x40
 800edd0:	e045      	b.n	800ee5e <low_level_output+0xc6>
  {
    if(i >= ETH_TX_DESC_CNT)
 800edd2:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800edd4:	2b03      	cmp	r3, #3
 800edd6:	d902      	bls.n	800edde <low_level_output+0x46>
      return ERR_IF;
 800edd8:	f06f 030b 	mvn.w	r3, #11
 800eddc:	e055      	b.n	800ee8a <low_level_output+0xf2>

    Txbuffer[i].buffer = q->payload;
 800edde:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800ede0:	6859      	ldr	r1, [r3, #4]
 800ede2:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800ede4:	4613      	mov	r3, r2
 800ede6:	005b      	lsls	r3, r3, #1
 800ede8:	4413      	add	r3, r2
 800edea:	009b      	lsls	r3, r3, #2
 800edec:	3348      	adds	r3, #72	; 0x48
 800edee:	443b      	add	r3, r7
 800edf0:	3b3c      	subs	r3, #60	; 0x3c
 800edf2:	6019      	str	r1, [r3, #0]
    Txbuffer[i].len = q->len;
 800edf4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800edf6:	895b      	ldrh	r3, [r3, #10]
 800edf8:	4619      	mov	r1, r3
 800edfa:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800edfc:	4613      	mov	r3, r2
 800edfe:	005b      	lsls	r3, r3, #1
 800ee00:	4413      	add	r3, r2
 800ee02:	009b      	lsls	r3, r3, #2
 800ee04:	3348      	adds	r3, #72	; 0x48
 800ee06:	443b      	add	r3, r7
 800ee08:	3b38      	subs	r3, #56	; 0x38
 800ee0a:	6019      	str	r1, [r3, #0]

    if(i>0)
 800ee0c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800ee0e:	2b00      	cmp	r3, #0
 800ee10:	d011      	beq.n	800ee36 <low_level_output+0x9e>
    {
      Txbuffer[i-1].next = &Txbuffer[i];
 800ee12:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800ee14:	1e5a      	subs	r2, r3, #1
 800ee16:	f107 000c 	add.w	r0, r7, #12
 800ee1a:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800ee1c:	460b      	mov	r3, r1
 800ee1e:	005b      	lsls	r3, r3, #1
 800ee20:	440b      	add	r3, r1
 800ee22:	009b      	lsls	r3, r3, #2
 800ee24:	18c1      	adds	r1, r0, r3
 800ee26:	4613      	mov	r3, r2
 800ee28:	005b      	lsls	r3, r3, #1
 800ee2a:	4413      	add	r3, r2
 800ee2c:	009b      	lsls	r3, r3, #2
 800ee2e:	3348      	adds	r3, #72	; 0x48
 800ee30:	443b      	add	r3, r7
 800ee32:	3b34      	subs	r3, #52	; 0x34
 800ee34:	6019      	str	r1, [r3, #0]
    }

    if(q->next == NULL)
 800ee36:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800ee38:	681b      	ldr	r3, [r3, #0]
 800ee3a:	2b00      	cmp	r3, #0
 800ee3c:	d109      	bne.n	800ee52 <low_level_output+0xba>
    {
      Txbuffer[i].next = NULL;
 800ee3e:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800ee40:	4613      	mov	r3, r2
 800ee42:	005b      	lsls	r3, r3, #1
 800ee44:	4413      	add	r3, r2
 800ee46:	009b      	lsls	r3, r3, #2
 800ee48:	3348      	adds	r3, #72	; 0x48
 800ee4a:	443b      	add	r3, r7
 800ee4c:	3b34      	subs	r3, #52	; 0x34
 800ee4e:	2200      	movs	r2, #0
 800ee50:	601a      	str	r2, [r3, #0]
    }

    i++;
 800ee52:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800ee54:	3301      	adds	r3, #1
 800ee56:	647b      	str	r3, [r7, #68]	; 0x44
  for(q = p; q != NULL; q = q->next)
 800ee58:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800ee5a:	681b      	ldr	r3, [r3, #0]
 800ee5c:	643b      	str	r3, [r7, #64]	; 0x40
 800ee5e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800ee60:	2b00      	cmp	r3, #0
 800ee62:	d1b6      	bne.n	800edd2 <low_level_output+0x3a>
  }

  TxConfig.Length = p->tot_len;
 800ee64:	683b      	ldr	r3, [r7, #0]
 800ee66:	891b      	ldrh	r3, [r3, #8]
 800ee68:	461a      	mov	r2, r3
 800ee6a:	4b0a      	ldr	r3, [pc, #40]	; (800ee94 <low_level_output+0xfc>)
 800ee6c:	605a      	str	r2, [r3, #4]
  TxConfig.TxBuffer = Txbuffer;
 800ee6e:	4a09      	ldr	r2, [pc, #36]	; (800ee94 <low_level_output+0xfc>)
 800ee70:	f107 030c 	add.w	r3, r7, #12
 800ee74:	6093      	str	r3, [r2, #8]
  TxConfig.pData = p;
 800ee76:	4a07      	ldr	r2, [pc, #28]	; (800ee94 <low_level_output+0xfc>)
 800ee78:	683b      	ldr	r3, [r7, #0]
 800ee7a:	6353      	str	r3, [r2, #52]	; 0x34

  HAL_ETH_Transmit(&heth, &TxConfig, ETH_DMA_TRANSMIT_TIMEOUT);
 800ee7c:	2214      	movs	r2, #20
 800ee7e:	4905      	ldr	r1, [pc, #20]	; (800ee94 <low_level_output+0xfc>)
 800ee80:	4805      	ldr	r0, [pc, #20]	; (800ee98 <low_level_output+0x100>)
 800ee82:	f7f7 f843 	bl	8005f0c <HAL_ETH_Transmit>

  return errval;
 800ee86:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
}
 800ee8a:	4618      	mov	r0, r3
 800ee8c:	3748      	adds	r7, #72	; 0x48
 800ee8e:	46bd      	mov	sp, r7
 800ee90:	bd80      	pop	{r7, pc}
 800ee92:	bf00      	nop
 800ee94:	20000710 	.word	0x20000710
 800ee98:	20000660 	.word	0x20000660

0800ee9c <low_level_input>:
 * @param netif the lwip network interface structure for this ethernetif
 * @return a pbuf filled with the received packet (including MAC header)
 *         NULL on memory error
   */
static struct pbuf * low_level_input(struct netif *netif)
{
 800ee9c:	b580      	push	{r7, lr}
 800ee9e:	b084      	sub	sp, #16
 800eea0:	af00      	add	r7, sp, #0
 800eea2:	6078      	str	r0, [r7, #4]
  struct pbuf *p = NULL;
 800eea4:	2300      	movs	r3, #0
 800eea6:	60fb      	str	r3, [r7, #12]

  if(RxAllocStatus == RX_ALLOC_OK)
 800eea8:	4b07      	ldr	r3, [pc, #28]	; (800eec8 <low_level_input+0x2c>)
 800eeaa:	781b      	ldrb	r3, [r3, #0]
 800eeac:	2b00      	cmp	r3, #0
 800eeae:	d105      	bne.n	800eebc <low_level_input+0x20>
  {
    HAL_ETH_ReadData(&heth, (void **)&p);
 800eeb0:	f107 030c 	add.w	r3, r7, #12
 800eeb4:	4619      	mov	r1, r3
 800eeb6:	4805      	ldr	r0, [pc, #20]	; (800eecc <low_level_input+0x30>)
 800eeb8:	f7f7 f8bf 	bl	800603a <HAL_ETH_ReadData>
  }

  return p;
 800eebc:	68fb      	ldr	r3, [r7, #12]
}
 800eebe:	4618      	mov	r0, r3
 800eec0:	3710      	adds	r7, #16
 800eec2:	46bd      	mov	sp, r7
 800eec4:	bd80      	pop	{r7, pc}
 800eec6:	bf00      	nop
 800eec8:	2000065c 	.word	0x2000065c
 800eecc:	20000660 	.word	0x20000660

0800eed0 <ethernetif_input>:
 * the appropriate input function is called.
 *
 * @param netif the lwip network interface structure for this ethernetif
 */
void ethernetif_input(struct netif *netif)
{
 800eed0:	b580      	push	{r7, lr}
 800eed2:	b084      	sub	sp, #16
 800eed4:	af00      	add	r7, sp, #0
 800eed6:	6078      	str	r0, [r7, #4]
  struct pbuf *p = NULL;
 800eed8:	2300      	movs	r3, #0
 800eeda:	60fb      	str	r3, [r7, #12]

  do
  {
    p = low_level_input( netif );
 800eedc:	6878      	ldr	r0, [r7, #4]
 800eede:	f7ff ffdd 	bl	800ee9c <low_level_input>
 800eee2:	60f8      	str	r0, [r7, #12]
    if (p != NULL)
 800eee4:	68fb      	ldr	r3, [r7, #12]
 800eee6:	2b00      	cmp	r3, #0
 800eee8:	d00a      	beq.n	800ef00 <ethernetif_input+0x30>
    {
      if (netif->input( p, netif) != ERR_OK )
 800eeea:	687b      	ldr	r3, [r7, #4]
 800eeec:	691b      	ldr	r3, [r3, #16]
 800eeee:	6879      	ldr	r1, [r7, #4]
 800eef0:	68f8      	ldr	r0, [r7, #12]
 800eef2:	4798      	blx	r3
 800eef4:	4603      	mov	r3, r0
 800eef6:	2b00      	cmp	r3, #0
 800eef8:	d002      	beq.n	800ef00 <ethernetif_input+0x30>
      {
        pbuf_free(p);
 800eefa:	68f8      	ldr	r0, [r7, #12]
 800eefc:	f001 fe9c 	bl	8010c38 <pbuf_free>
      }
    }
  } while(p!=NULL);
 800ef00:	68fb      	ldr	r3, [r7, #12]
 800ef02:	2b00      	cmp	r3, #0
 800ef04:	d1ea      	bne.n	800eedc <ethernetif_input+0xc>
}
 800ef06:	bf00      	nop
 800ef08:	bf00      	nop
 800ef0a:	3710      	adds	r7, #16
 800ef0c:	46bd      	mov	sp, r7
 800ef0e:	bd80      	pop	{r7, pc}

0800ef10 <ethernetif_init>:
 * @return ERR_OK if the loopif is initialized
 *         ERR_MEM if private data couldn't be allocated
 *         any other err_t on error
 */
err_t ethernetif_init(struct netif *netif)
{
 800ef10:	b580      	push	{r7, lr}
 800ef12:	b082      	sub	sp, #8
 800ef14:	af00      	add	r7, sp, #0
 800ef16:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("netif != NULL", (netif != NULL));
 800ef18:	687b      	ldr	r3, [r7, #4]
 800ef1a:	2b00      	cmp	r3, #0
 800ef1c:	d106      	bne.n	800ef2c <ethernetif_init+0x1c>
 800ef1e:	4b0e      	ldr	r3, [pc, #56]	; (800ef58 <ethernetif_init+0x48>)
 800ef20:	f240 1285 	movw	r2, #389	; 0x185
 800ef24:	490d      	ldr	r1, [pc, #52]	; (800ef5c <ethernetif_init+0x4c>)
 800ef26:	480e      	ldr	r0, [pc, #56]	; (800ef60 <ethernetif_init+0x50>)
 800ef28:	f00a fd9e 	bl	8019a68 <iprintf>
   * The last argument should be replaced with your link speed, in units
   * of bits per second.
   */
  // MIB2_INIT_NETIF(netif, snmp_ifType_ethernet_csmacd, LINK_SPEED_OF_YOUR_NETIF_IN_BPS);

  netif->name[0] = IFNAME0;
 800ef2c:	687b      	ldr	r3, [r7, #4]
 800ef2e:	2273      	movs	r2, #115	; 0x73
 800ef30:	f883 202e 	strb.w	r2, [r3, #46]	; 0x2e
  netif->name[1] = IFNAME1;
 800ef34:	687b      	ldr	r3, [r7, #4]
 800ef36:	2274      	movs	r2, #116	; 0x74
 800ef38:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f
   * is available...) */

#if LWIP_IPV4
#if LWIP_ARP || LWIP_ETHERNET
#if LWIP_ARP
  netif->output = etharp_output;
 800ef3c:	687b      	ldr	r3, [r7, #4]
 800ef3e:	4a09      	ldr	r2, [pc, #36]	; (800ef64 <ethernetif_init+0x54>)
 800ef40:	615a      	str	r2, [r3, #20]

#if LWIP_IPV6
  netif->output_ip6 = ethip6_output;
#endif /* LWIP_IPV6 */

  netif->linkoutput = low_level_output;
 800ef42:	687b      	ldr	r3, [r7, #4]
 800ef44:	4a08      	ldr	r2, [pc, #32]	; (800ef68 <ethernetif_init+0x58>)
 800ef46:	619a      	str	r2, [r3, #24]

  /* initialize the hardware */
  low_level_init(netif);
 800ef48:	6878      	ldr	r0, [r7, #4]
 800ef4a:	f7ff fe8f 	bl	800ec6c <low_level_init>

  return ERR_OK;
 800ef4e:	2300      	movs	r3, #0
}
 800ef50:	4618      	mov	r0, r3
 800ef52:	3708      	adds	r7, #8
 800ef54:	46bd      	mov	sp, r7
 800ef56:	bd80      	pop	{r7, pc}
 800ef58:	0801c1e8 	.word	0x0801c1e8
 800ef5c:	0801c204 	.word	0x0801c204
 800ef60:	0801c214 	.word	0x0801c214
 800ef64:	080172b5 	.word	0x080172b5
 800ef68:	0800ed99 	.word	0x0800ed99

0800ef6c <pbuf_free_custom>:
  * @brief  Custom Rx pbuf free callback
  * @param  pbuf: pbuf to be freed
  * @retval None
  */
void pbuf_free_custom(struct pbuf *p)
{
 800ef6c:	b580      	push	{r7, lr}
 800ef6e:	b084      	sub	sp, #16
 800ef70:	af00      	add	r7, sp, #0
 800ef72:	6078      	str	r0, [r7, #4]
  struct pbuf_custom* custom_pbuf = (struct pbuf_custom*)p;
 800ef74:	687b      	ldr	r3, [r7, #4]
 800ef76:	60fb      	str	r3, [r7, #12]
  LWIP_MEMPOOL_FREE(RX_POOL, custom_pbuf);
 800ef78:	68f9      	ldr	r1, [r7, #12]
 800ef7a:	4807      	ldr	r0, [pc, #28]	; (800ef98 <pbuf_free_custom+0x2c>)
 800ef7c:	f000 ffc2 	bl	800ff04 <memp_free_pool>

  /* If the Rx Buffer Pool was exhausted, signal the ethernetif_input task to
   * call HAL_ETH_GetRxDataBuffer to rebuild the Rx descriptors. */

  if (RxAllocStatus == RX_ALLOC_ERROR)
 800ef80:	4b06      	ldr	r3, [pc, #24]	; (800ef9c <pbuf_free_custom+0x30>)
 800ef82:	781b      	ldrb	r3, [r3, #0]
 800ef84:	2b01      	cmp	r3, #1
 800ef86:	d102      	bne.n	800ef8e <pbuf_free_custom+0x22>
  {
    RxAllocStatus = RX_ALLOC_OK;
 800ef88:	4b04      	ldr	r3, [pc, #16]	; (800ef9c <pbuf_free_custom+0x30>)
 800ef8a:	2200      	movs	r2, #0
 800ef8c:	701a      	strb	r2, [r3, #0]
  }
}
 800ef8e:	bf00      	nop
 800ef90:	3710      	adds	r7, #16
 800ef92:	46bd      	mov	sp, r7
 800ef94:	bd80      	pop	{r7, pc}
 800ef96:	bf00      	nop
 800ef98:	0801ec18 	.word	0x0801ec18
 800ef9c:	2000065c 	.word	0x2000065c

0800efa0 <sys_now>:
*         when LWIP_TIMERS == 1 and NO_SYS == 1
* @param  None
* @retval Current Time value
*/
u32_t sys_now(void)
{
 800efa0:	b580      	push	{r7, lr}
 800efa2:	af00      	add	r7, sp, #0
  return HAL_GetTick();
 800efa4:	f7f4 fcea 	bl	800397c <HAL_GetTick>
 800efa8:	4603      	mov	r3, r0
}
 800efaa:	4618      	mov	r0, r3
 800efac:	bd80      	pop	{r7, pc}
	...

0800efb0 <HAL_ETH_MspInit>:
  * @param  ethHandle: ETH handle
  * @retval None
  */

void HAL_ETH_MspInit(ETH_HandleTypeDef* ethHandle)
{
 800efb0:	b580      	push	{r7, lr}
 800efb2:	b08e      	sub	sp, #56	; 0x38
 800efb4:	af00      	add	r7, sp, #0
 800efb6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800efb8:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800efbc:	2200      	movs	r2, #0
 800efbe:	601a      	str	r2, [r3, #0]
 800efc0:	605a      	str	r2, [r3, #4]
 800efc2:	609a      	str	r2, [r3, #8]
 800efc4:	60da      	str	r2, [r3, #12]
 800efc6:	611a      	str	r2, [r3, #16]
  if(ethHandle->Instance==ETH)
 800efc8:	687b      	ldr	r3, [r7, #4]
 800efca:	681b      	ldr	r3, [r3, #0]
 800efcc:	4a59      	ldr	r2, [pc, #356]	; (800f134 <HAL_ETH_MspInit+0x184>)
 800efce:	4293      	cmp	r3, r2
 800efd0:	f040 80ab 	bne.w	800f12a <HAL_ETH_MspInit+0x17a>
  {
  /* USER CODE BEGIN ETH_MspInit 0 */

  /* USER CODE END ETH_MspInit 0 */
    /* Enable Peripheral clock */
    __HAL_RCC_ETH1MAC_CLK_ENABLE();
 800efd4:	4b58      	ldr	r3, [pc, #352]	; (800f138 <HAL_ETH_MspInit+0x188>)
 800efd6:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 800efda:	4a57      	ldr	r2, [pc, #348]	; (800f138 <HAL_ETH_MspInit+0x188>)
 800efdc:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800efe0:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 800efe4:	4b54      	ldr	r3, [pc, #336]	; (800f138 <HAL_ETH_MspInit+0x188>)
 800efe6:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 800efea:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800efee:	623b      	str	r3, [r7, #32]
 800eff0:	6a3b      	ldr	r3, [r7, #32]
    __HAL_RCC_ETH1TX_CLK_ENABLE();
 800eff2:	4b51      	ldr	r3, [pc, #324]	; (800f138 <HAL_ETH_MspInit+0x188>)
 800eff4:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 800eff8:	4a4f      	ldr	r2, [pc, #316]	; (800f138 <HAL_ETH_MspInit+0x188>)
 800effa:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800effe:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 800f002:	4b4d      	ldr	r3, [pc, #308]	; (800f138 <HAL_ETH_MspInit+0x188>)
 800f004:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 800f008:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800f00c:	61fb      	str	r3, [r7, #28]
 800f00e:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_ETH1RX_CLK_ENABLE();
 800f010:	4b49      	ldr	r3, [pc, #292]	; (800f138 <HAL_ETH_MspInit+0x188>)
 800f012:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 800f016:	4a48      	ldr	r2, [pc, #288]	; (800f138 <HAL_ETH_MspInit+0x188>)
 800f018:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800f01c:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 800f020:	4b45      	ldr	r3, [pc, #276]	; (800f138 <HAL_ETH_MspInit+0x188>)
 800f022:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 800f026:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800f02a:	61bb      	str	r3, [r7, #24]
 800f02c:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 800f02e:	4b42      	ldr	r3, [pc, #264]	; (800f138 <HAL_ETH_MspInit+0x188>)
 800f030:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800f034:	4a40      	ldr	r2, [pc, #256]	; (800f138 <HAL_ETH_MspInit+0x188>)
 800f036:	f043 0304 	orr.w	r3, r3, #4
 800f03a:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800f03e:	4b3e      	ldr	r3, [pc, #248]	; (800f138 <HAL_ETH_MspInit+0x188>)
 800f040:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800f044:	f003 0304 	and.w	r3, r3, #4
 800f048:	617b      	str	r3, [r7, #20]
 800f04a:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800f04c:	4b3a      	ldr	r3, [pc, #232]	; (800f138 <HAL_ETH_MspInit+0x188>)
 800f04e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800f052:	4a39      	ldr	r2, [pc, #228]	; (800f138 <HAL_ETH_MspInit+0x188>)
 800f054:	f043 0301 	orr.w	r3, r3, #1
 800f058:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800f05c:	4b36      	ldr	r3, [pc, #216]	; (800f138 <HAL_ETH_MspInit+0x188>)
 800f05e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800f062:	f003 0301 	and.w	r3, r3, #1
 800f066:	613b      	str	r3, [r7, #16]
 800f068:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800f06a:	4b33      	ldr	r3, [pc, #204]	; (800f138 <HAL_ETH_MspInit+0x188>)
 800f06c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800f070:	4a31      	ldr	r2, [pc, #196]	; (800f138 <HAL_ETH_MspInit+0x188>)
 800f072:	f043 0302 	orr.w	r3, r3, #2
 800f076:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800f07a:	4b2f      	ldr	r3, [pc, #188]	; (800f138 <HAL_ETH_MspInit+0x188>)
 800f07c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800f080:	f003 0302 	and.w	r3, r3, #2
 800f084:	60fb      	str	r3, [r7, #12]
 800f086:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOG_CLK_ENABLE();
 800f088:	4b2b      	ldr	r3, [pc, #172]	; (800f138 <HAL_ETH_MspInit+0x188>)
 800f08a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800f08e:	4a2a      	ldr	r2, [pc, #168]	; (800f138 <HAL_ETH_MspInit+0x188>)
 800f090:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800f094:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800f098:	4b27      	ldr	r3, [pc, #156]	; (800f138 <HAL_ETH_MspInit+0x188>)
 800f09a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800f09e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800f0a2:	60bb      	str	r3, [r7, #8]
 800f0a4:	68bb      	ldr	r3, [r7, #8]
    PC5     ------> ETH_RXD1
    PB13     ------> ETH_TXD1
    PG11     ------> ETH_TX_EN
    PG13     ------> ETH_TXD0
    */
    GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_4|GPIO_PIN_5;
 800f0a6:	2332      	movs	r3, #50	; 0x32
 800f0a8:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800f0aa:	2302      	movs	r3, #2
 800f0ac:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800f0ae:	2300      	movs	r3, #0
 800f0b0:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800f0b2:	2300      	movs	r3, #0
 800f0b4:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 800f0b6:	230b      	movs	r3, #11
 800f0b8:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800f0ba:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800f0be:	4619      	mov	r1, r3
 800f0c0:	481e      	ldr	r0, [pc, #120]	; (800f13c <HAL_ETH_MspInit+0x18c>)
 800f0c2:	f7f8 f94b 	bl	800735c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_7;
 800f0c6:	2386      	movs	r3, #134	; 0x86
 800f0c8:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800f0ca:	2302      	movs	r3, #2
 800f0cc:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800f0ce:	2300      	movs	r3, #0
 800f0d0:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800f0d2:	2300      	movs	r3, #0
 800f0d4:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 800f0d6:	230b      	movs	r3, #11
 800f0d8:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800f0da:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800f0de:	4619      	mov	r1, r3
 800f0e0:	4817      	ldr	r0, [pc, #92]	; (800f140 <HAL_ETH_MspInit+0x190>)
 800f0e2:	f7f8 f93b 	bl	800735c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_13;
 800f0e6:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800f0ea:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800f0ec:	2302      	movs	r3, #2
 800f0ee:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800f0f0:	2300      	movs	r3, #0
 800f0f2:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800f0f4:	2300      	movs	r3, #0
 800f0f6:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 800f0f8:	230b      	movs	r3, #11
 800f0fa:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800f0fc:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800f100:	4619      	mov	r1, r3
 800f102:	4810      	ldr	r0, [pc, #64]	; (800f144 <HAL_ETH_MspInit+0x194>)
 800f104:	f7f8 f92a 	bl	800735c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_13;
 800f108:	f44f 5320 	mov.w	r3, #10240	; 0x2800
 800f10c:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800f10e:	2302      	movs	r3, #2
 800f110:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800f112:	2300      	movs	r3, #0
 800f114:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800f116:	2300      	movs	r3, #0
 800f118:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 800f11a:	230b      	movs	r3, #11
 800f11c:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 800f11e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800f122:	4619      	mov	r1, r3
 800f124:	4808      	ldr	r0, [pc, #32]	; (800f148 <HAL_ETH_MspInit+0x198>)
 800f126:	f7f8 f919 	bl	800735c <HAL_GPIO_Init>

  /* USER CODE BEGIN ETH_MspInit 1 */

  /* USER CODE END ETH_MspInit 1 */
  }
}
 800f12a:	bf00      	nop
 800f12c:	3738      	adds	r7, #56	; 0x38
 800f12e:	46bd      	mov	sp, r7
 800f130:	bd80      	pop	{r7, pc}
 800f132:	bf00      	nop
 800f134:	40028000 	.word	0x40028000
 800f138:	58024400 	.word	0x58024400
 800f13c:	58020800 	.word	0x58020800
 800f140:	58020000 	.word	0x58020000
 800f144:	58020400 	.word	0x58020400
 800f148:	58021800 	.word	0x58021800

0800f14c <ETH_PHY_IO_Init>:
  * @brief  Initializes the MDIO interface GPIO and clocks.
  * @param  None
  * @retval 0 if OK, -1 if ERROR
  */
int32_t ETH_PHY_IO_Init(void)
{
 800f14c:	b580      	push	{r7, lr}
 800f14e:	af00      	add	r7, sp, #0
  /* We assume that MDIO GPIO configuration is already done
     in the ETH_MspInit() else it should be done here
  */

  /* Configure the MDIO Clock */
  HAL_ETH_SetMDIOClockRange(&heth);
 800f150:	4802      	ldr	r0, [pc, #8]	; (800f15c <ETH_PHY_IO_Init+0x10>)
 800f152:	f7f7 fb37 	bl	80067c4 <HAL_ETH_SetMDIOClockRange>

  return 0;
 800f156:	2300      	movs	r3, #0
}
 800f158:	4618      	mov	r0, r3
 800f15a:	bd80      	pop	{r7, pc}
 800f15c:	20000660 	.word	0x20000660

0800f160 <ETH_PHY_IO_DeInit>:
  * @brief  De-Initializes the MDIO interface .
  * @param  None
  * @retval 0 if OK, -1 if ERROR
  */
int32_t ETH_PHY_IO_DeInit (void)
{
 800f160:	b480      	push	{r7}
 800f162:	af00      	add	r7, sp, #0
  return 0;
 800f164:	2300      	movs	r3, #0
}
 800f166:	4618      	mov	r0, r3
 800f168:	46bd      	mov	sp, r7
 800f16a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f16e:	4770      	bx	lr

0800f170 <ETH_PHY_IO_ReadReg>:
  * @param  RegAddr: PHY register address
  * @param  pRegVal: pointer to hold the register value
  * @retval 0 if OK -1 if Error
  */
int32_t ETH_PHY_IO_ReadReg(uint32_t DevAddr, uint32_t RegAddr, uint32_t *pRegVal)
{
 800f170:	b580      	push	{r7, lr}
 800f172:	b084      	sub	sp, #16
 800f174:	af00      	add	r7, sp, #0
 800f176:	60f8      	str	r0, [r7, #12]
 800f178:	60b9      	str	r1, [r7, #8]
 800f17a:	607a      	str	r2, [r7, #4]
  if(HAL_ETH_ReadPHYRegister(&heth, DevAddr, RegAddr, pRegVal) != HAL_OK)
 800f17c:	687b      	ldr	r3, [r7, #4]
 800f17e:	68ba      	ldr	r2, [r7, #8]
 800f180:	68f9      	ldr	r1, [r7, #12]
 800f182:	4807      	ldr	r0, [pc, #28]	; (800f1a0 <ETH_PHY_IO_ReadReg+0x30>)
 800f184:	f7f7 f887 	bl	8006296 <HAL_ETH_ReadPHYRegister>
 800f188:	4603      	mov	r3, r0
 800f18a:	2b00      	cmp	r3, #0
 800f18c:	d002      	beq.n	800f194 <ETH_PHY_IO_ReadReg+0x24>
  {
    return -1;
 800f18e:	f04f 33ff 	mov.w	r3, #4294967295
 800f192:	e000      	b.n	800f196 <ETH_PHY_IO_ReadReg+0x26>
  }

  return 0;
 800f194:	2300      	movs	r3, #0
}
 800f196:	4618      	mov	r0, r3
 800f198:	3710      	adds	r7, #16
 800f19a:	46bd      	mov	sp, r7
 800f19c:	bd80      	pop	{r7, pc}
 800f19e:	bf00      	nop
 800f1a0:	20000660 	.word	0x20000660

0800f1a4 <ETH_PHY_IO_WriteReg>:
  * @param  RegAddr: PHY register address
  * @param  RegVal: Value to be written
  * @retval 0 if OK -1 if Error
  */
int32_t ETH_PHY_IO_WriteReg(uint32_t DevAddr, uint32_t RegAddr, uint32_t RegVal)
{
 800f1a4:	b580      	push	{r7, lr}
 800f1a6:	b084      	sub	sp, #16
 800f1a8:	af00      	add	r7, sp, #0
 800f1aa:	60f8      	str	r0, [r7, #12]
 800f1ac:	60b9      	str	r1, [r7, #8]
 800f1ae:	607a      	str	r2, [r7, #4]
  if(HAL_ETH_WritePHYRegister(&heth, DevAddr, RegAddr, RegVal) != HAL_OK)
 800f1b0:	687b      	ldr	r3, [r7, #4]
 800f1b2:	68ba      	ldr	r2, [r7, #8]
 800f1b4:	68f9      	ldr	r1, [r7, #12]
 800f1b6:	4807      	ldr	r0, [pc, #28]	; (800f1d4 <ETH_PHY_IO_WriteReg+0x30>)
 800f1b8:	f7f7 f8c2 	bl	8006340 <HAL_ETH_WritePHYRegister>
 800f1bc:	4603      	mov	r3, r0
 800f1be:	2b00      	cmp	r3, #0
 800f1c0:	d002      	beq.n	800f1c8 <ETH_PHY_IO_WriteReg+0x24>
  {
    return -1;
 800f1c2:	f04f 33ff 	mov.w	r3, #4294967295
 800f1c6:	e000      	b.n	800f1ca <ETH_PHY_IO_WriteReg+0x26>
  }

  return 0;
 800f1c8:	2300      	movs	r3, #0
}
 800f1ca:	4618      	mov	r0, r3
 800f1cc:	3710      	adds	r7, #16
 800f1ce:	46bd      	mov	sp, r7
 800f1d0:	bd80      	pop	{r7, pc}
 800f1d2:	bf00      	nop
 800f1d4:	20000660 	.word	0x20000660

0800f1d8 <ETH_PHY_IO_GetTick>:
/**
  * @brief  Get the time in millisecons used for internal PHY driver process.
  * @retval Time value
  */
int32_t ETH_PHY_IO_GetTick(void)
{
 800f1d8:	b580      	push	{r7, lr}
 800f1da:	af00      	add	r7, sp, #0
  return HAL_GetTick();
 800f1dc:	f7f4 fbce 	bl	800397c <HAL_GetTick>
 800f1e0:	4603      	mov	r3, r0
}
 800f1e2:	4618      	mov	r0, r3
 800f1e4:	bd80      	pop	{r7, pc}
	...

0800f1e8 <ethernet_link_check_state>:
/**
  * @brief  Check the ETH link state then update ETH driver and netif link accordingly.
  * @retval None
  */
void ethernet_link_check_state(struct netif *netif)
{
 800f1e8:	b580      	push	{r7, lr}
 800f1ea:	b0a0      	sub	sp, #128	; 0x80
 800f1ec:	af00      	add	r7, sp, #0
 800f1ee:	6078      	str	r0, [r7, #4]
  ETH_MACConfigTypeDef MACConf = {0};
 800f1f0:	f107 030c 	add.w	r3, r7, #12
 800f1f4:	2264      	movs	r2, #100	; 0x64
 800f1f6:	2100      	movs	r1, #0
 800f1f8:	4618      	mov	r0, r3
 800f1fa:	f00a fd8b 	bl	8019d14 <memset>
  int32_t PHYLinkState = 0;
 800f1fe:	2300      	movs	r3, #0
 800f200:	673b      	str	r3, [r7, #112]	; 0x70
  uint32_t linkchanged = 0U, speed = 0U, duplex = 0U;
 800f202:	2300      	movs	r3, #0
 800f204:	67fb      	str	r3, [r7, #124]	; 0x7c
 800f206:	2300      	movs	r3, #0
 800f208:	67bb      	str	r3, [r7, #120]	; 0x78
 800f20a:	2300      	movs	r3, #0
 800f20c:	677b      	str	r3, [r7, #116]	; 0x74

  PHYLinkState = LAN8742_GetLinkState(&LAN8742);
 800f20e:	483a      	ldr	r0, [pc, #232]	; (800f2f8 <ethernet_link_check_state+0x110>)
 800f210:	f7f4 faa7 	bl	8003762 <LAN8742_GetLinkState>
 800f214:	6738      	str	r0, [r7, #112]	; 0x70

  if(netif_is_link_up(netif) && (PHYLinkState <= LAN8742_STATUS_LINK_DOWN))
 800f216:	687b      	ldr	r3, [r7, #4]
 800f218:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 800f21c:	089b      	lsrs	r3, r3, #2
 800f21e:	f003 0301 	and.w	r3, r3, #1
 800f222:	b2db      	uxtb	r3, r3
 800f224:	2b00      	cmp	r3, #0
 800f226:	d00c      	beq.n	800f242 <ethernet_link_check_state+0x5a>
 800f228:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800f22a:	2b01      	cmp	r3, #1
 800f22c:	dc09      	bgt.n	800f242 <ethernet_link_check_state+0x5a>
  {
    HAL_ETH_Stop(&heth);
 800f22e:	4833      	ldr	r0, [pc, #204]	; (800f2fc <ethernet_link_check_state+0x114>)
 800f230:	f7f6 fe1c 	bl	8005e6c <HAL_ETH_Stop>
    netif_set_down(netif);
 800f234:	6878      	ldr	r0, [r7, #4]
 800f236:	f001 f8e9 	bl	801040c <netif_set_down>
    netif_set_link_down(netif);
 800f23a:	6878      	ldr	r0, [r7, #4]
 800f23c:	f001 f94c 	bl	80104d8 <netif_set_link_down>
      netif_set_up(netif);
      netif_set_link_up(netif);
    }
  }

}
 800f240:	e055      	b.n	800f2ee <ethernet_link_check_state+0x106>
  else if(!netif_is_link_up(netif) && (PHYLinkState > LAN8742_STATUS_LINK_DOWN))
 800f242:	687b      	ldr	r3, [r7, #4]
 800f244:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 800f248:	f003 0304 	and.w	r3, r3, #4
 800f24c:	2b00      	cmp	r3, #0
 800f24e:	d14e      	bne.n	800f2ee <ethernet_link_check_state+0x106>
 800f250:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800f252:	2b01      	cmp	r3, #1
 800f254:	dd4b      	ble.n	800f2ee <ethernet_link_check_state+0x106>
    switch (PHYLinkState)
 800f256:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800f258:	3b02      	subs	r3, #2
 800f25a:	2b03      	cmp	r3, #3
 800f25c:	d82a      	bhi.n	800f2b4 <ethernet_link_check_state+0xcc>
 800f25e:	a201      	add	r2, pc, #4	; (adr r2, 800f264 <ethernet_link_check_state+0x7c>)
 800f260:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800f264:	0800f275 	.word	0x0800f275
 800f268:	0800f287 	.word	0x0800f287
 800f26c:	0800f297 	.word	0x0800f297
 800f270:	0800f2a7 	.word	0x0800f2a7
      duplex = ETH_FULLDUPLEX_MODE;
 800f274:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800f278:	677b      	str	r3, [r7, #116]	; 0x74
      speed = ETH_SPEED_100M;
 800f27a:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 800f27e:	67bb      	str	r3, [r7, #120]	; 0x78
      linkchanged = 1;
 800f280:	2301      	movs	r3, #1
 800f282:	67fb      	str	r3, [r7, #124]	; 0x7c
      break;
 800f284:	e017      	b.n	800f2b6 <ethernet_link_check_state+0xce>
      duplex = ETH_HALFDUPLEX_MODE;
 800f286:	2300      	movs	r3, #0
 800f288:	677b      	str	r3, [r7, #116]	; 0x74
      speed = ETH_SPEED_100M;
 800f28a:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 800f28e:	67bb      	str	r3, [r7, #120]	; 0x78
      linkchanged = 1;
 800f290:	2301      	movs	r3, #1
 800f292:	67fb      	str	r3, [r7, #124]	; 0x7c
      break;
 800f294:	e00f      	b.n	800f2b6 <ethernet_link_check_state+0xce>
      duplex = ETH_FULLDUPLEX_MODE;
 800f296:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800f29a:	677b      	str	r3, [r7, #116]	; 0x74
      speed = ETH_SPEED_10M;
 800f29c:	2300      	movs	r3, #0
 800f29e:	67bb      	str	r3, [r7, #120]	; 0x78
      linkchanged = 1;
 800f2a0:	2301      	movs	r3, #1
 800f2a2:	67fb      	str	r3, [r7, #124]	; 0x7c
      break;
 800f2a4:	e007      	b.n	800f2b6 <ethernet_link_check_state+0xce>
      duplex = ETH_HALFDUPLEX_MODE;
 800f2a6:	2300      	movs	r3, #0
 800f2a8:	677b      	str	r3, [r7, #116]	; 0x74
      speed = ETH_SPEED_10M;
 800f2aa:	2300      	movs	r3, #0
 800f2ac:	67bb      	str	r3, [r7, #120]	; 0x78
      linkchanged = 1;
 800f2ae:	2301      	movs	r3, #1
 800f2b0:	67fb      	str	r3, [r7, #124]	; 0x7c
      break;
 800f2b2:	e000      	b.n	800f2b6 <ethernet_link_check_state+0xce>
      break;
 800f2b4:	bf00      	nop
    if(linkchanged)
 800f2b6:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800f2b8:	2b00      	cmp	r3, #0
 800f2ba:	d018      	beq.n	800f2ee <ethernet_link_check_state+0x106>
      HAL_ETH_GetMACConfig(&heth, &MACConf);
 800f2bc:	f107 030c 	add.w	r3, r7, #12
 800f2c0:	4619      	mov	r1, r3
 800f2c2:	480e      	ldr	r0, [pc, #56]	; (800f2fc <ethernet_link_check_state+0x114>)
 800f2c4:	f7f7 f890 	bl	80063e8 <HAL_ETH_GetMACConfig>
      MACConf.DuplexMode = duplex;
 800f2c8:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800f2ca:	627b      	str	r3, [r7, #36]	; 0x24
      MACConf.Speed = speed;
 800f2cc:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800f2ce:	623b      	str	r3, [r7, #32]
      HAL_ETH_SetMACConfig(&heth, &MACConf);
 800f2d0:	f107 030c 	add.w	r3, r7, #12
 800f2d4:	4619      	mov	r1, r3
 800f2d6:	4809      	ldr	r0, [pc, #36]	; (800f2fc <ethernet_link_check_state+0x114>)
 800f2d8:	f7f7 fa5a 	bl	8006790 <HAL_ETH_SetMACConfig>
      HAL_ETH_Start(&heth);
 800f2dc:	4807      	ldr	r0, [pc, #28]	; (800f2fc <ethernet_link_check_state+0x114>)
 800f2de:	f7f6 fd63 	bl	8005da8 <HAL_ETH_Start>
      netif_set_up(netif);
 800f2e2:	6878      	ldr	r0, [r7, #4]
 800f2e4:	f001 f826 	bl	8010334 <netif_set_up>
      netif_set_link_up(netif);
 800f2e8:	6878      	ldr	r0, [r7, #4]
 800f2ea:	f001 f8c1 	bl	8010470 <netif_set_link_up>
}
 800f2ee:	bf00      	nop
 800f2f0:	3780      	adds	r7, #128	; 0x80
 800f2f2:	46bd      	mov	sp, r7
 800f2f4:	bd80      	pop	{r7, pc}
 800f2f6:	bf00      	nop
 800f2f8:	20000748 	.word	0x20000748
 800f2fc:	20000660 	.word	0x20000660

0800f300 <HAL_ETH_RxAllocateCallback>:

void HAL_ETH_RxAllocateCallback(uint8_t **buff)
{
 800f300:	b580      	push	{r7, lr}
 800f302:	b086      	sub	sp, #24
 800f304:	af02      	add	r7, sp, #8
 800f306:	6078      	str	r0, [r7, #4]
/* USER CODE BEGIN HAL ETH RxAllocateCallback */
  struct pbuf_custom *p = LWIP_MEMPOOL_ALLOC(RX_POOL);
 800f308:	4812      	ldr	r0, [pc, #72]	; (800f354 <HAL_ETH_RxAllocateCallback+0x54>)
 800f30a:	f000 fd8d 	bl	800fe28 <memp_malloc_pool>
 800f30e:	60f8      	str	r0, [r7, #12]
  if (p)
 800f310:	68fb      	ldr	r3, [r7, #12]
 800f312:	2b00      	cmp	r3, #0
 800f314:	d014      	beq.n	800f340 <HAL_ETH_RxAllocateCallback+0x40>
  {
    /* Get the buff from the struct pbuf address. */
    *buff = (uint8_t *)p + offsetof(RxBuff_t, buff);
 800f316:	68fb      	ldr	r3, [r7, #12]
 800f318:	f103 0220 	add.w	r2, r3, #32
 800f31c:	687b      	ldr	r3, [r7, #4]
 800f31e:	601a      	str	r2, [r3, #0]
    p->custom_free_function = pbuf_free_custom;
 800f320:	68fb      	ldr	r3, [r7, #12]
 800f322:	4a0d      	ldr	r2, [pc, #52]	; (800f358 <HAL_ETH_RxAllocateCallback+0x58>)
 800f324:	611a      	str	r2, [r3, #16]
    /* Initialize the struct pbuf.
    * This must be performed whenever a buffer's allocated because it may be
    * changed by lwIP or the app, e.g., pbuf_free decrements ref. */
    pbuf_alloced_custom(PBUF_RAW, 0, PBUF_REF, p, *buff, ETH_RX_BUFFER_SIZE);
 800f326:	687b      	ldr	r3, [r7, #4]
 800f328:	681b      	ldr	r3, [r3, #0]
 800f32a:	f44f 62c0 	mov.w	r2, #1536	; 0x600
 800f32e:	9201      	str	r2, [sp, #4]
 800f330:	9300      	str	r3, [sp, #0]
 800f332:	68fb      	ldr	r3, [r7, #12]
 800f334:	2241      	movs	r2, #65	; 0x41
 800f336:	2100      	movs	r1, #0
 800f338:	2000      	movs	r0, #0
 800f33a:	f001 fac5 	bl	80108c8 <pbuf_alloced_custom>
  {
    RxAllocStatus = RX_ALLOC_ERROR;
    *buff = NULL;
  }
/* USER CODE END HAL ETH RxAllocateCallback */
}
 800f33e:	e005      	b.n	800f34c <HAL_ETH_RxAllocateCallback+0x4c>
    RxAllocStatus = RX_ALLOC_ERROR;
 800f340:	4b06      	ldr	r3, [pc, #24]	; (800f35c <HAL_ETH_RxAllocateCallback+0x5c>)
 800f342:	2201      	movs	r2, #1
 800f344:	701a      	strb	r2, [r3, #0]
    *buff = NULL;
 800f346:	687b      	ldr	r3, [r7, #4]
 800f348:	2200      	movs	r2, #0
 800f34a:	601a      	str	r2, [r3, #0]
}
 800f34c:	bf00      	nop
 800f34e:	3710      	adds	r7, #16
 800f350:	46bd      	mov	sp, r7
 800f352:	bd80      	pop	{r7, pc}
 800f354:	0801ec18 	.word	0x0801ec18
 800f358:	0800ef6d 	.word	0x0800ef6d
 800f35c:	2000065c 	.word	0x2000065c

0800f360 <HAL_ETH_RxLinkCallback>:

void HAL_ETH_RxLinkCallback(void **pStart, void **pEnd, uint8_t *buff, uint16_t Length)
{
 800f360:	b480      	push	{r7}
 800f362:	b08d      	sub	sp, #52	; 0x34
 800f364:	af00      	add	r7, sp, #0
 800f366:	60f8      	str	r0, [r7, #12]
 800f368:	60b9      	str	r1, [r7, #8]
 800f36a:	607a      	str	r2, [r7, #4]
 800f36c:	807b      	strh	r3, [r7, #2]
/* USER CODE BEGIN HAL ETH RxLinkCallback */

  struct pbuf **ppStart = (struct pbuf **)pStart;
 800f36e:	68fb      	ldr	r3, [r7, #12]
 800f370:	62bb      	str	r3, [r7, #40]	; 0x28
  struct pbuf **ppEnd = (struct pbuf **)pEnd;
 800f372:	68bb      	ldr	r3, [r7, #8]
 800f374:	627b      	str	r3, [r7, #36]	; 0x24
  struct pbuf *p = NULL;
 800f376:	2300      	movs	r3, #0
 800f378:	62fb      	str	r3, [r7, #44]	; 0x2c

  /* Get the struct pbuf from the buff address. */
  p = (struct pbuf *)(buff - offsetof(RxBuff_t, buff));
 800f37a:	687b      	ldr	r3, [r7, #4]
 800f37c:	3b20      	subs	r3, #32
 800f37e:	62fb      	str	r3, [r7, #44]	; 0x2c
  p->next = NULL;
 800f380:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f382:	2200      	movs	r2, #0
 800f384:	601a      	str	r2, [r3, #0]
  p->tot_len = 0;
 800f386:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f388:	2200      	movs	r2, #0
 800f38a:	811a      	strh	r2, [r3, #8]
  p->len = Length;
 800f38c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f38e:	887a      	ldrh	r2, [r7, #2]
 800f390:	815a      	strh	r2, [r3, #10]

  /* Chain the buffer. */
  if (!*ppStart)
 800f392:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f394:	681b      	ldr	r3, [r3, #0]
 800f396:	2b00      	cmp	r3, #0
 800f398:	d103      	bne.n	800f3a2 <HAL_ETH_RxLinkCallback+0x42>
  {
    /* The first buffer of the packet. */
    *ppStart = p;
 800f39a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f39c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800f39e:	601a      	str	r2, [r3, #0]
 800f3a0:	e003      	b.n	800f3aa <HAL_ETH_RxLinkCallback+0x4a>
  }
  else
  {
    /* Chain the buffer to the end of the packet. */
    (*ppEnd)->next = p;
 800f3a2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f3a4:	681b      	ldr	r3, [r3, #0]
 800f3a6:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800f3a8:	601a      	str	r2, [r3, #0]
  }
  *ppEnd  = p;
 800f3aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f3ac:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800f3ae:	601a      	str	r2, [r3, #0]

  /* Update the total length of all the buffers of the chain. Each pbuf in the chain should have its tot_len
   * set to its own length, plus the length of all the following pbufs in the chain. */
  for (p = *ppStart; p != NULL; p = p->next)
 800f3b0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f3b2:	681b      	ldr	r3, [r3, #0]
 800f3b4:	62fb      	str	r3, [r7, #44]	; 0x2c
 800f3b6:	e009      	b.n	800f3cc <HAL_ETH_RxLinkCallback+0x6c>
  {
    p->tot_len += Length;
 800f3b8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f3ba:	891a      	ldrh	r2, [r3, #8]
 800f3bc:	887b      	ldrh	r3, [r7, #2]
 800f3be:	4413      	add	r3, r2
 800f3c0:	b29a      	uxth	r2, r3
 800f3c2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f3c4:	811a      	strh	r2, [r3, #8]
  for (p = *ppStart; p != NULL; p = p->next)
 800f3c6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f3c8:	681b      	ldr	r3, [r3, #0]
 800f3ca:	62fb      	str	r3, [r7, #44]	; 0x2c
 800f3cc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f3ce:	2b00      	cmp	r3, #0
 800f3d0:	d1f2      	bne.n	800f3b8 <HAL_ETH_RxLinkCallback+0x58>
  }

  /* Invalidate data cache because Rx DMA's writing to physical memory makes it stale. */
  SCB_InvalidateDCache_by_Addr((uint32_t *)buff, Length);
 800f3d2:	887b      	ldrh	r3, [r7, #2]
 800f3d4:	687a      	ldr	r2, [r7, #4]
 800f3d6:	623a      	str	r2, [r7, #32]
 800f3d8:	61fb      	str	r3, [r7, #28]
    if ( dsize > 0 ) { 
 800f3da:	69fb      	ldr	r3, [r7, #28]
 800f3dc:	2b00      	cmp	r3, #0
 800f3de:	dd1d      	ble.n	800f41c <HAL_ETH_RxLinkCallback+0xbc>
       int32_t op_size = dsize + (((uint32_t)addr) & (__SCB_DCACHE_LINE_SIZE - 1U));
 800f3e0:	6a3b      	ldr	r3, [r7, #32]
 800f3e2:	f003 021f 	and.w	r2, r3, #31
 800f3e6:	69fb      	ldr	r3, [r7, #28]
 800f3e8:	4413      	add	r3, r2
 800f3ea:	61bb      	str	r3, [r7, #24]
      uint32_t op_addr = (uint32_t)addr /* & ~(__SCB_DCACHE_LINE_SIZE - 1U) */;
 800f3ec:	6a3b      	ldr	r3, [r7, #32]
 800f3ee:	617b      	str	r3, [r7, #20]
  __ASM volatile ("dsb 0xF":::"memory");
 800f3f0:	f3bf 8f4f 	dsb	sy
}
 800f3f4:	bf00      	nop
        SCB->DCIMVAC = op_addr;             /* register accepts only 32byte aligned values, only bits 31..5 are valid */
 800f3f6:	4a0d      	ldr	r2, [pc, #52]	; (800f42c <HAL_ETH_RxLinkCallback+0xcc>)
 800f3f8:	697b      	ldr	r3, [r7, #20]
 800f3fa:	f8c2 325c 	str.w	r3, [r2, #604]	; 0x25c
        op_addr += __SCB_DCACHE_LINE_SIZE;
 800f3fe:	697b      	ldr	r3, [r7, #20]
 800f400:	3320      	adds	r3, #32
 800f402:	617b      	str	r3, [r7, #20]
        op_size -= __SCB_DCACHE_LINE_SIZE;
 800f404:	69bb      	ldr	r3, [r7, #24]
 800f406:	3b20      	subs	r3, #32
 800f408:	61bb      	str	r3, [r7, #24]
      } while ( op_size > 0 );
 800f40a:	69bb      	ldr	r3, [r7, #24]
 800f40c:	2b00      	cmp	r3, #0
 800f40e:	dcf2      	bgt.n	800f3f6 <HAL_ETH_RxLinkCallback+0x96>
  __ASM volatile ("dsb 0xF":::"memory");
 800f410:	f3bf 8f4f 	dsb	sy
}
 800f414:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 800f416:	f3bf 8f6f 	isb	sy
}
 800f41a:	bf00      	nop
}
 800f41c:	bf00      	nop

/* USER CODE END HAL ETH RxLinkCallback */
}
 800f41e:	bf00      	nop
 800f420:	3734      	adds	r7, #52	; 0x34
 800f422:	46bd      	mov	sp, r7
 800f424:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f428:	4770      	bx	lr
 800f42a:	bf00      	nop
 800f42c:	e000ed00 	.word	0xe000ed00

0800f430 <lwip_htons>:
 * @param n u16_t in host byte order
 * @return n in network byte order
 */
u16_t
lwip_htons(u16_t n)
{
 800f430:	b480      	push	{r7}
 800f432:	b083      	sub	sp, #12
 800f434:	af00      	add	r7, sp, #0
 800f436:	4603      	mov	r3, r0
 800f438:	80fb      	strh	r3, [r7, #6]
  return PP_HTONS(n);
 800f43a:	88fb      	ldrh	r3, [r7, #6]
 800f43c:	021b      	lsls	r3, r3, #8
 800f43e:	b21a      	sxth	r2, r3
 800f440:	88fb      	ldrh	r3, [r7, #6]
 800f442:	0a1b      	lsrs	r3, r3, #8
 800f444:	b29b      	uxth	r3, r3
 800f446:	b21b      	sxth	r3, r3
 800f448:	4313      	orrs	r3, r2
 800f44a:	b21b      	sxth	r3, r3
 800f44c:	b29b      	uxth	r3, r3
}
 800f44e:	4618      	mov	r0, r3
 800f450:	370c      	adds	r7, #12
 800f452:	46bd      	mov	sp, r7
 800f454:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f458:	4770      	bx	lr

0800f45a <lwip_htonl>:
 * @param n u32_t in host byte order
 * @return n in network byte order
 */
u32_t
lwip_htonl(u32_t n)
{
 800f45a:	b480      	push	{r7}
 800f45c:	b083      	sub	sp, #12
 800f45e:	af00      	add	r7, sp, #0
 800f460:	6078      	str	r0, [r7, #4]
  return PP_HTONL(n);
 800f462:	687b      	ldr	r3, [r7, #4]
 800f464:	061a      	lsls	r2, r3, #24
 800f466:	687b      	ldr	r3, [r7, #4]
 800f468:	021b      	lsls	r3, r3, #8
 800f46a:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 800f46e:	431a      	orrs	r2, r3
 800f470:	687b      	ldr	r3, [r7, #4]
 800f472:	0a1b      	lsrs	r3, r3, #8
 800f474:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 800f478:	431a      	orrs	r2, r3
 800f47a:	687b      	ldr	r3, [r7, #4]
 800f47c:	0e1b      	lsrs	r3, r3, #24
 800f47e:	4313      	orrs	r3, r2
}
 800f480:	4618      	mov	r0, r3
 800f482:	370c      	adds	r7, #12
 800f484:	46bd      	mov	sp, r7
 800f486:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f48a:	4770      	bx	lr

0800f48c <lwip_standard_chksum>:
 * @param len length of data to be summed
 * @return host order (!) lwip checksum (non-inverted Internet sum)
 */
u16_t
lwip_standard_chksum(const void *dataptr, int len)
{
 800f48c:	b480      	push	{r7}
 800f48e:	b089      	sub	sp, #36	; 0x24
 800f490:	af00      	add	r7, sp, #0
 800f492:	6078      	str	r0, [r7, #4]
 800f494:	6039      	str	r1, [r7, #0]
  const u8_t *pb = (const u8_t *)dataptr;
 800f496:	687b      	ldr	r3, [r7, #4]
 800f498:	61fb      	str	r3, [r7, #28]
  const u16_t *ps;
  u16_t t = 0;
 800f49a:	2300      	movs	r3, #0
 800f49c:	81fb      	strh	r3, [r7, #14]
  u32_t sum = 0;
 800f49e:	2300      	movs	r3, #0
 800f4a0:	617b      	str	r3, [r7, #20]
  int odd = ((mem_ptr_t)pb & 1);
 800f4a2:	69fb      	ldr	r3, [r7, #28]
 800f4a4:	f003 0301 	and.w	r3, r3, #1
 800f4a8:	613b      	str	r3, [r7, #16]

  /* Get aligned to u16_t */
  if (odd && len > 0) {
 800f4aa:	693b      	ldr	r3, [r7, #16]
 800f4ac:	2b00      	cmp	r3, #0
 800f4ae:	d00d      	beq.n	800f4cc <lwip_standard_chksum+0x40>
 800f4b0:	683b      	ldr	r3, [r7, #0]
 800f4b2:	2b00      	cmp	r3, #0
 800f4b4:	dd0a      	ble.n	800f4cc <lwip_standard_chksum+0x40>
    ((u8_t *)&t)[1] = *pb++;
 800f4b6:	69fa      	ldr	r2, [r7, #28]
 800f4b8:	1c53      	adds	r3, r2, #1
 800f4ba:	61fb      	str	r3, [r7, #28]
 800f4bc:	f107 030e 	add.w	r3, r7, #14
 800f4c0:	3301      	adds	r3, #1
 800f4c2:	7812      	ldrb	r2, [r2, #0]
 800f4c4:	701a      	strb	r2, [r3, #0]
    len--;
 800f4c6:	683b      	ldr	r3, [r7, #0]
 800f4c8:	3b01      	subs	r3, #1
 800f4ca:	603b      	str	r3, [r7, #0]
  }

  /* Add the bulk of the data */
  ps = (const u16_t *)(const void *)pb;
 800f4cc:	69fb      	ldr	r3, [r7, #28]
 800f4ce:	61bb      	str	r3, [r7, #24]
  while (len > 1) {
 800f4d0:	e00a      	b.n	800f4e8 <lwip_standard_chksum+0x5c>
    sum += *ps++;
 800f4d2:	69bb      	ldr	r3, [r7, #24]
 800f4d4:	1c9a      	adds	r2, r3, #2
 800f4d6:	61ba      	str	r2, [r7, #24]
 800f4d8:	881b      	ldrh	r3, [r3, #0]
 800f4da:	461a      	mov	r2, r3
 800f4dc:	697b      	ldr	r3, [r7, #20]
 800f4de:	4413      	add	r3, r2
 800f4e0:	617b      	str	r3, [r7, #20]
    len -= 2;
 800f4e2:	683b      	ldr	r3, [r7, #0]
 800f4e4:	3b02      	subs	r3, #2
 800f4e6:	603b      	str	r3, [r7, #0]
  while (len > 1) {
 800f4e8:	683b      	ldr	r3, [r7, #0]
 800f4ea:	2b01      	cmp	r3, #1
 800f4ec:	dcf1      	bgt.n	800f4d2 <lwip_standard_chksum+0x46>
  }

  /* Consume left-over byte, if any */
  if (len > 0) {
 800f4ee:	683b      	ldr	r3, [r7, #0]
 800f4f0:	2b00      	cmp	r3, #0
 800f4f2:	dd04      	ble.n	800f4fe <lwip_standard_chksum+0x72>
    ((u8_t *)&t)[0] = *(const u8_t *)ps;
 800f4f4:	f107 030e 	add.w	r3, r7, #14
 800f4f8:	69ba      	ldr	r2, [r7, #24]
 800f4fa:	7812      	ldrb	r2, [r2, #0]
 800f4fc:	701a      	strb	r2, [r3, #0]
  }

  /* Add end bytes */
  sum += t;
 800f4fe:	89fb      	ldrh	r3, [r7, #14]
 800f500:	461a      	mov	r2, r3
 800f502:	697b      	ldr	r3, [r7, #20]
 800f504:	4413      	add	r3, r2
 800f506:	617b      	str	r3, [r7, #20]

  /* Fold 32-bit sum to 16 bits
     calling this twice is probably faster than if statements... */
  sum = FOLD_U32T(sum);
 800f508:	697b      	ldr	r3, [r7, #20]
 800f50a:	0c1a      	lsrs	r2, r3, #16
 800f50c:	697b      	ldr	r3, [r7, #20]
 800f50e:	b29b      	uxth	r3, r3
 800f510:	4413      	add	r3, r2
 800f512:	617b      	str	r3, [r7, #20]
  sum = FOLD_U32T(sum);
 800f514:	697b      	ldr	r3, [r7, #20]
 800f516:	0c1a      	lsrs	r2, r3, #16
 800f518:	697b      	ldr	r3, [r7, #20]
 800f51a:	b29b      	uxth	r3, r3
 800f51c:	4413      	add	r3, r2
 800f51e:	617b      	str	r3, [r7, #20]

  /* Swap if alignment was odd */
  if (odd) {
 800f520:	693b      	ldr	r3, [r7, #16]
 800f522:	2b00      	cmp	r3, #0
 800f524:	d007      	beq.n	800f536 <lwip_standard_chksum+0xaa>
    sum = SWAP_BYTES_IN_WORD(sum);
 800f526:	697b      	ldr	r3, [r7, #20]
 800f528:	021b      	lsls	r3, r3, #8
 800f52a:	b29a      	uxth	r2, r3
 800f52c:	697b      	ldr	r3, [r7, #20]
 800f52e:	0a1b      	lsrs	r3, r3, #8
 800f530:	b2db      	uxtb	r3, r3
 800f532:	4313      	orrs	r3, r2
 800f534:	617b      	str	r3, [r7, #20]
  }

  return (u16_t)sum;
 800f536:	697b      	ldr	r3, [r7, #20]
 800f538:	b29b      	uxth	r3, r3
}
 800f53a:	4618      	mov	r0, r3
 800f53c:	3724      	adds	r7, #36	; 0x24
 800f53e:	46bd      	mov	sp, r7
 800f540:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f544:	4770      	bx	lr

0800f546 <inet_chksum>:
 * @return checksum (as u16_t) to be saved directly in the protocol header
 */

u16_t
inet_chksum(const void *dataptr, u16_t len)
{
 800f546:	b580      	push	{r7, lr}
 800f548:	b082      	sub	sp, #8
 800f54a:	af00      	add	r7, sp, #0
 800f54c:	6078      	str	r0, [r7, #4]
 800f54e:	460b      	mov	r3, r1
 800f550:	807b      	strh	r3, [r7, #2]
  return (u16_t)~(unsigned int)LWIP_CHKSUM(dataptr, len);
 800f552:	887b      	ldrh	r3, [r7, #2]
 800f554:	4619      	mov	r1, r3
 800f556:	6878      	ldr	r0, [r7, #4]
 800f558:	f7ff ff98 	bl	800f48c <lwip_standard_chksum>
 800f55c:	4603      	mov	r3, r0
 800f55e:	43db      	mvns	r3, r3
 800f560:	b29b      	uxth	r3, r3
}
 800f562:	4618      	mov	r0, r3
 800f564:	3708      	adds	r7, #8
 800f566:	46bd      	mov	sp, r7
 800f568:	bd80      	pop	{r7, pc}

0800f56a <inet_chksum_pbuf>:
 * @param p pbuf chain over that the checksum should be calculated
 * @return checksum (as u16_t) to be saved directly in the protocol header
 */
u16_t
inet_chksum_pbuf(struct pbuf *p)
{
 800f56a:	b580      	push	{r7, lr}
 800f56c:	b086      	sub	sp, #24
 800f56e:	af00      	add	r7, sp, #0
 800f570:	6078      	str	r0, [r7, #4]
  u32_t acc;
  struct pbuf *q;
  int swapped = 0;
 800f572:	2300      	movs	r3, #0
 800f574:	60fb      	str	r3, [r7, #12]

  acc = 0;
 800f576:	2300      	movs	r3, #0
 800f578:	617b      	str	r3, [r7, #20]
  for (q = p; q != NULL; q = q->next) {
 800f57a:	687b      	ldr	r3, [r7, #4]
 800f57c:	613b      	str	r3, [r7, #16]
 800f57e:	e02b      	b.n	800f5d8 <inet_chksum_pbuf+0x6e>
    acc += LWIP_CHKSUM(q->payload, q->len);
 800f580:	693b      	ldr	r3, [r7, #16]
 800f582:	685a      	ldr	r2, [r3, #4]
 800f584:	693b      	ldr	r3, [r7, #16]
 800f586:	895b      	ldrh	r3, [r3, #10]
 800f588:	4619      	mov	r1, r3
 800f58a:	4610      	mov	r0, r2
 800f58c:	f7ff ff7e 	bl	800f48c <lwip_standard_chksum>
 800f590:	4603      	mov	r3, r0
 800f592:	461a      	mov	r2, r3
 800f594:	697b      	ldr	r3, [r7, #20]
 800f596:	4413      	add	r3, r2
 800f598:	617b      	str	r3, [r7, #20]
    acc = FOLD_U32T(acc);
 800f59a:	697b      	ldr	r3, [r7, #20]
 800f59c:	0c1a      	lsrs	r2, r3, #16
 800f59e:	697b      	ldr	r3, [r7, #20]
 800f5a0:	b29b      	uxth	r3, r3
 800f5a2:	4413      	add	r3, r2
 800f5a4:	617b      	str	r3, [r7, #20]
    if (q->len % 2 != 0) {
 800f5a6:	693b      	ldr	r3, [r7, #16]
 800f5a8:	895b      	ldrh	r3, [r3, #10]
 800f5aa:	f003 0301 	and.w	r3, r3, #1
 800f5ae:	b29b      	uxth	r3, r3
 800f5b0:	2b00      	cmp	r3, #0
 800f5b2:	d00e      	beq.n	800f5d2 <inet_chksum_pbuf+0x68>
      swapped = !swapped;
 800f5b4:	68fb      	ldr	r3, [r7, #12]
 800f5b6:	2b00      	cmp	r3, #0
 800f5b8:	bf0c      	ite	eq
 800f5ba:	2301      	moveq	r3, #1
 800f5bc:	2300      	movne	r3, #0
 800f5be:	b2db      	uxtb	r3, r3
 800f5c0:	60fb      	str	r3, [r7, #12]
      acc = SWAP_BYTES_IN_WORD(acc);
 800f5c2:	697b      	ldr	r3, [r7, #20]
 800f5c4:	021b      	lsls	r3, r3, #8
 800f5c6:	b29a      	uxth	r2, r3
 800f5c8:	697b      	ldr	r3, [r7, #20]
 800f5ca:	0a1b      	lsrs	r3, r3, #8
 800f5cc:	b2db      	uxtb	r3, r3
 800f5ce:	4313      	orrs	r3, r2
 800f5d0:	617b      	str	r3, [r7, #20]
  for (q = p; q != NULL; q = q->next) {
 800f5d2:	693b      	ldr	r3, [r7, #16]
 800f5d4:	681b      	ldr	r3, [r3, #0]
 800f5d6:	613b      	str	r3, [r7, #16]
 800f5d8:	693b      	ldr	r3, [r7, #16]
 800f5da:	2b00      	cmp	r3, #0
 800f5dc:	d1d0      	bne.n	800f580 <inet_chksum_pbuf+0x16>
    }
  }

  if (swapped) {
 800f5de:	68fb      	ldr	r3, [r7, #12]
 800f5e0:	2b00      	cmp	r3, #0
 800f5e2:	d007      	beq.n	800f5f4 <inet_chksum_pbuf+0x8a>
    acc = SWAP_BYTES_IN_WORD(acc);
 800f5e4:	697b      	ldr	r3, [r7, #20]
 800f5e6:	021b      	lsls	r3, r3, #8
 800f5e8:	b29a      	uxth	r2, r3
 800f5ea:	697b      	ldr	r3, [r7, #20]
 800f5ec:	0a1b      	lsrs	r3, r3, #8
 800f5ee:	b2db      	uxtb	r3, r3
 800f5f0:	4313      	orrs	r3, r2
 800f5f2:	617b      	str	r3, [r7, #20]
  }
  return (u16_t)~(acc & 0xffffUL);
 800f5f4:	697b      	ldr	r3, [r7, #20]
 800f5f6:	b29b      	uxth	r3, r3
 800f5f8:	43db      	mvns	r3, r3
 800f5fa:	b29b      	uxth	r3, r3
}
 800f5fc:	4618      	mov	r0, r3
 800f5fe:	3718      	adds	r7, #24
 800f600:	46bd      	mov	sp, r7
 800f602:	bd80      	pop	{r7, pc}

0800f604 <lwip_init>:
 * Initialize all modules.
 * Use this in NO_SYS mode. Use tcpip_init() otherwise.
 */
void
lwip_init(void)
{
 800f604:	b580      	push	{r7, lr}
 800f606:	b082      	sub	sp, #8
 800f608:	af00      	add	r7, sp, #0
#ifndef LWIP_SKIP_CONST_CHECK
  int a = 0;
 800f60a:	2300      	movs	r3, #0
 800f60c:	607b      	str	r3, [r7, #4]
  /* Modules initialization */
  stats_init();
#if !NO_SYS
  sys_init();
#endif /* !NO_SYS */
  mem_init();
 800f60e:	f000 f8d3 	bl	800f7b8 <mem_init>
  memp_init();
 800f612:	f000 fbc5 	bl	800fda0 <memp_init>
  pbuf_init();
  netif_init();
 800f616:	f000 fcc3 	bl	800ffa0 <netif_init>
#endif /* LWIP_IPV4 */
#if LWIP_RAW
  raw_init();
#endif /* LWIP_RAW */
#if LWIP_UDP
  udp_init();
 800f61a:	f007 f845 	bl	80166a8 <udp_init>
#endif /* LWIP_UDP */
#if LWIP_TCP
  tcp_init();
 800f61e:	f001 fd99 	bl	8011154 <tcp_init>
#if PPP_SUPPORT
  ppp_init();
#endif

#if LWIP_TIMERS
  sys_timeouts_init();
 800f622:	f006 ffb7 	bl	8016594 <sys_timeouts_init>
#endif /* LWIP_TIMERS */
}
 800f626:	bf00      	nop
 800f628:	3708      	adds	r7, #8
 800f62a:	46bd      	mov	sp, r7
 800f62c:	bd80      	pop	{r7, pc}
	...

0800f630 <ptr_to_mem>:
#define mem_overflow_check_element(mem)
#endif /* MEM_OVERFLOW_CHECK */

static struct mem *
ptr_to_mem(mem_size_t ptr)
{
 800f630:	b480      	push	{r7}
 800f632:	b083      	sub	sp, #12
 800f634:	af00      	add	r7, sp, #0
 800f636:	6078      	str	r0, [r7, #4]
  return (struct mem *)(void *)&ram[ptr];
 800f638:	4b04      	ldr	r3, [pc, #16]	; (800f64c <ptr_to_mem+0x1c>)
 800f63a:	681a      	ldr	r2, [r3, #0]
 800f63c:	687b      	ldr	r3, [r7, #4]
 800f63e:	4413      	add	r3, r2
}
 800f640:	4618      	mov	r0, r3
 800f642:	370c      	adds	r7, #12
 800f644:	46bd      	mov	sp, r7
 800f646:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f64a:	4770      	bx	lr
 800f64c:	20000780 	.word	0x20000780

0800f650 <mem_to_ptr>:

static mem_size_t
mem_to_ptr(void *mem)
{
 800f650:	b480      	push	{r7}
 800f652:	b083      	sub	sp, #12
 800f654:	af00      	add	r7, sp, #0
 800f656:	6078      	str	r0, [r7, #4]
  return (mem_size_t)((u8_t *)mem - ram);
 800f658:	4b04      	ldr	r3, [pc, #16]	; (800f66c <mem_to_ptr+0x1c>)
 800f65a:	681b      	ldr	r3, [r3, #0]
 800f65c:	687a      	ldr	r2, [r7, #4]
 800f65e:	1ad3      	subs	r3, r2, r3
}
 800f660:	4618      	mov	r0, r3
 800f662:	370c      	adds	r7, #12
 800f664:	46bd      	mov	sp, r7
 800f666:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f66a:	4770      	bx	lr
 800f66c:	20000780 	.word	0x20000780

0800f670 <plug_holes>:
 * This assumes access to the heap is protected by the calling function
 * already.
 */
static void
plug_holes(struct mem *mem)
{
 800f670:	b590      	push	{r4, r7, lr}
 800f672:	b085      	sub	sp, #20
 800f674:	af00      	add	r7, sp, #0
 800f676:	6078      	str	r0, [r7, #4]
  struct mem *nmem;
  struct mem *pmem;

  LWIP_ASSERT("plug_holes: mem >= ram", (u8_t *)mem >= ram);
 800f678:	4b45      	ldr	r3, [pc, #276]	; (800f790 <plug_holes+0x120>)
 800f67a:	681b      	ldr	r3, [r3, #0]
 800f67c:	687a      	ldr	r2, [r7, #4]
 800f67e:	429a      	cmp	r2, r3
 800f680:	d206      	bcs.n	800f690 <plug_holes+0x20>
 800f682:	4b44      	ldr	r3, [pc, #272]	; (800f794 <plug_holes+0x124>)
 800f684:	f240 12df 	movw	r2, #479	; 0x1df
 800f688:	4943      	ldr	r1, [pc, #268]	; (800f798 <plug_holes+0x128>)
 800f68a:	4844      	ldr	r0, [pc, #272]	; (800f79c <plug_holes+0x12c>)
 800f68c:	f00a f9ec 	bl	8019a68 <iprintf>
  LWIP_ASSERT("plug_holes: mem < ram_end", (u8_t *)mem < (u8_t *)ram_end);
 800f690:	4b43      	ldr	r3, [pc, #268]	; (800f7a0 <plug_holes+0x130>)
 800f692:	681b      	ldr	r3, [r3, #0]
 800f694:	687a      	ldr	r2, [r7, #4]
 800f696:	429a      	cmp	r2, r3
 800f698:	d306      	bcc.n	800f6a8 <plug_holes+0x38>
 800f69a:	4b3e      	ldr	r3, [pc, #248]	; (800f794 <plug_holes+0x124>)
 800f69c:	f44f 72f0 	mov.w	r2, #480	; 0x1e0
 800f6a0:	4940      	ldr	r1, [pc, #256]	; (800f7a4 <plug_holes+0x134>)
 800f6a2:	483e      	ldr	r0, [pc, #248]	; (800f79c <plug_holes+0x12c>)
 800f6a4:	f00a f9e0 	bl	8019a68 <iprintf>
  LWIP_ASSERT("plug_holes: mem->used == 0", mem->used == 0);
 800f6a8:	687b      	ldr	r3, [r7, #4]
 800f6aa:	7a1b      	ldrb	r3, [r3, #8]
 800f6ac:	2b00      	cmp	r3, #0
 800f6ae:	d006      	beq.n	800f6be <plug_holes+0x4e>
 800f6b0:	4b38      	ldr	r3, [pc, #224]	; (800f794 <plug_holes+0x124>)
 800f6b2:	f240 12e1 	movw	r2, #481	; 0x1e1
 800f6b6:	493c      	ldr	r1, [pc, #240]	; (800f7a8 <plug_holes+0x138>)
 800f6b8:	4838      	ldr	r0, [pc, #224]	; (800f79c <plug_holes+0x12c>)
 800f6ba:	f00a f9d5 	bl	8019a68 <iprintf>

  /* plug hole forward */
  LWIP_ASSERT("plug_holes: mem->next <= MEM_SIZE_ALIGNED", mem->next <= MEM_SIZE_ALIGNED);
 800f6be:	687b      	ldr	r3, [r7, #4]
 800f6c0:	681b      	ldr	r3, [r3, #0]
 800f6c2:	4a3a      	ldr	r2, [pc, #232]	; (800f7ac <plug_holes+0x13c>)
 800f6c4:	4293      	cmp	r3, r2
 800f6c6:	d906      	bls.n	800f6d6 <plug_holes+0x66>
 800f6c8:	4b32      	ldr	r3, [pc, #200]	; (800f794 <plug_holes+0x124>)
 800f6ca:	f44f 72f2 	mov.w	r2, #484	; 0x1e4
 800f6ce:	4938      	ldr	r1, [pc, #224]	; (800f7b0 <plug_holes+0x140>)
 800f6d0:	4832      	ldr	r0, [pc, #200]	; (800f79c <plug_holes+0x12c>)
 800f6d2:	f00a f9c9 	bl	8019a68 <iprintf>

  nmem = ptr_to_mem(mem->next);
 800f6d6:	687b      	ldr	r3, [r7, #4]
 800f6d8:	681b      	ldr	r3, [r3, #0]
 800f6da:	4618      	mov	r0, r3
 800f6dc:	f7ff ffa8 	bl	800f630 <ptr_to_mem>
 800f6e0:	60f8      	str	r0, [r7, #12]
  if (mem != nmem && nmem->used == 0 && (u8_t *)nmem != (u8_t *)ram_end) {
 800f6e2:	687a      	ldr	r2, [r7, #4]
 800f6e4:	68fb      	ldr	r3, [r7, #12]
 800f6e6:	429a      	cmp	r2, r3
 800f6e8:	d024      	beq.n	800f734 <plug_holes+0xc4>
 800f6ea:	68fb      	ldr	r3, [r7, #12]
 800f6ec:	7a1b      	ldrb	r3, [r3, #8]
 800f6ee:	2b00      	cmp	r3, #0
 800f6f0:	d120      	bne.n	800f734 <plug_holes+0xc4>
 800f6f2:	4b2b      	ldr	r3, [pc, #172]	; (800f7a0 <plug_holes+0x130>)
 800f6f4:	681b      	ldr	r3, [r3, #0]
 800f6f6:	68fa      	ldr	r2, [r7, #12]
 800f6f8:	429a      	cmp	r2, r3
 800f6fa:	d01b      	beq.n	800f734 <plug_holes+0xc4>
    /* if mem->next is unused and not end of ram, combine mem and mem->next */
    if (lfree == nmem) {
 800f6fc:	4b2d      	ldr	r3, [pc, #180]	; (800f7b4 <plug_holes+0x144>)
 800f6fe:	681b      	ldr	r3, [r3, #0]
 800f700:	68fa      	ldr	r2, [r7, #12]
 800f702:	429a      	cmp	r2, r3
 800f704:	d102      	bne.n	800f70c <plug_holes+0x9c>
      lfree = mem;
 800f706:	4a2b      	ldr	r2, [pc, #172]	; (800f7b4 <plug_holes+0x144>)
 800f708:	687b      	ldr	r3, [r7, #4]
 800f70a:	6013      	str	r3, [r2, #0]
    }
    mem->next = nmem->next;
 800f70c:	68fb      	ldr	r3, [r7, #12]
 800f70e:	681a      	ldr	r2, [r3, #0]
 800f710:	687b      	ldr	r3, [r7, #4]
 800f712:	601a      	str	r2, [r3, #0]
    if (nmem->next != MEM_SIZE_ALIGNED) {
 800f714:	68fb      	ldr	r3, [r7, #12]
 800f716:	681b      	ldr	r3, [r3, #0]
 800f718:	4a24      	ldr	r2, [pc, #144]	; (800f7ac <plug_holes+0x13c>)
 800f71a:	4293      	cmp	r3, r2
 800f71c:	d00a      	beq.n	800f734 <plug_holes+0xc4>
      ptr_to_mem(nmem->next)->prev = mem_to_ptr(mem);
 800f71e:	68fb      	ldr	r3, [r7, #12]
 800f720:	681b      	ldr	r3, [r3, #0]
 800f722:	4618      	mov	r0, r3
 800f724:	f7ff ff84 	bl	800f630 <ptr_to_mem>
 800f728:	4604      	mov	r4, r0
 800f72a:	6878      	ldr	r0, [r7, #4]
 800f72c:	f7ff ff90 	bl	800f650 <mem_to_ptr>
 800f730:	4603      	mov	r3, r0
 800f732:	6063      	str	r3, [r4, #4]
    }
  }

  /* plug hole backward */
  pmem = ptr_to_mem(mem->prev);
 800f734:	687b      	ldr	r3, [r7, #4]
 800f736:	685b      	ldr	r3, [r3, #4]
 800f738:	4618      	mov	r0, r3
 800f73a:	f7ff ff79 	bl	800f630 <ptr_to_mem>
 800f73e:	60b8      	str	r0, [r7, #8]
  if (pmem != mem && pmem->used == 0) {
 800f740:	68ba      	ldr	r2, [r7, #8]
 800f742:	687b      	ldr	r3, [r7, #4]
 800f744:	429a      	cmp	r2, r3
 800f746:	d01f      	beq.n	800f788 <plug_holes+0x118>
 800f748:	68bb      	ldr	r3, [r7, #8]
 800f74a:	7a1b      	ldrb	r3, [r3, #8]
 800f74c:	2b00      	cmp	r3, #0
 800f74e:	d11b      	bne.n	800f788 <plug_holes+0x118>
    /* if mem->prev is unused, combine mem and mem->prev */
    if (lfree == mem) {
 800f750:	4b18      	ldr	r3, [pc, #96]	; (800f7b4 <plug_holes+0x144>)
 800f752:	681b      	ldr	r3, [r3, #0]
 800f754:	687a      	ldr	r2, [r7, #4]
 800f756:	429a      	cmp	r2, r3
 800f758:	d102      	bne.n	800f760 <plug_holes+0xf0>
      lfree = pmem;
 800f75a:	4a16      	ldr	r2, [pc, #88]	; (800f7b4 <plug_holes+0x144>)
 800f75c:	68bb      	ldr	r3, [r7, #8]
 800f75e:	6013      	str	r3, [r2, #0]
    }
    pmem->next = mem->next;
 800f760:	687b      	ldr	r3, [r7, #4]
 800f762:	681a      	ldr	r2, [r3, #0]
 800f764:	68bb      	ldr	r3, [r7, #8]
 800f766:	601a      	str	r2, [r3, #0]
    if (mem->next != MEM_SIZE_ALIGNED) {
 800f768:	687b      	ldr	r3, [r7, #4]
 800f76a:	681b      	ldr	r3, [r3, #0]
 800f76c:	4a0f      	ldr	r2, [pc, #60]	; (800f7ac <plug_holes+0x13c>)
 800f76e:	4293      	cmp	r3, r2
 800f770:	d00a      	beq.n	800f788 <plug_holes+0x118>
      ptr_to_mem(mem->next)->prev = mem_to_ptr(pmem);
 800f772:	687b      	ldr	r3, [r7, #4]
 800f774:	681b      	ldr	r3, [r3, #0]
 800f776:	4618      	mov	r0, r3
 800f778:	f7ff ff5a 	bl	800f630 <ptr_to_mem>
 800f77c:	4604      	mov	r4, r0
 800f77e:	68b8      	ldr	r0, [r7, #8]
 800f780:	f7ff ff66 	bl	800f650 <mem_to_ptr>
 800f784:	4603      	mov	r3, r0
 800f786:	6063      	str	r3, [r4, #4]
    }
  }
}
 800f788:	bf00      	nop
 800f78a:	3714      	adds	r7, #20
 800f78c:	46bd      	mov	sp, r7
 800f78e:	bd90      	pop	{r4, r7, pc}
 800f790:	20000780 	.word	0x20000780
 800f794:	0801c23c 	.word	0x0801c23c
 800f798:	0801c26c 	.word	0x0801c26c
 800f79c:	0801c284 	.word	0x0801c284
 800f7a0:	20000784 	.word	0x20000784
 800f7a4:	0801c2ac 	.word	0x0801c2ac
 800f7a8:	0801c2c8 	.word	0x0801c2c8
 800f7ac:	0001ffe8 	.word	0x0001ffe8
 800f7b0:	0801c2e4 	.word	0x0801c2e4
 800f7b4:	20000788 	.word	0x20000788

0800f7b8 <mem_init>:
/**
 * Zero the heap and initialize start, end and lowest-free
 */
void
mem_init(void)
{
 800f7b8:	b580      	push	{r7, lr}
 800f7ba:	b082      	sub	sp, #8
 800f7bc:	af00      	add	r7, sp, #0

  LWIP_ASSERT("Sanity check alignment",
              (SIZEOF_STRUCT_MEM & (MEM_ALIGNMENT - 1)) == 0);

  /* align the heap */
  ram = (u8_t *)LWIP_MEM_ALIGN(LWIP_RAM_HEAP_POINTER);
 800f7be:	4b14      	ldr	r3, [pc, #80]	; (800f810 <mem_init+0x58>)
 800f7c0:	4a14      	ldr	r2, [pc, #80]	; (800f814 <mem_init+0x5c>)
 800f7c2:	601a      	str	r2, [r3, #0]
  /* initialize the start of the heap */
  mem = (struct mem *)(void *)ram;
 800f7c4:	4b12      	ldr	r3, [pc, #72]	; (800f810 <mem_init+0x58>)
 800f7c6:	681b      	ldr	r3, [r3, #0]
 800f7c8:	607b      	str	r3, [r7, #4]
  mem->next = MEM_SIZE_ALIGNED;
 800f7ca:	687b      	ldr	r3, [r7, #4]
 800f7cc:	4a12      	ldr	r2, [pc, #72]	; (800f818 <mem_init+0x60>)
 800f7ce:	601a      	str	r2, [r3, #0]
  mem->prev = 0;
 800f7d0:	687b      	ldr	r3, [r7, #4]
 800f7d2:	2200      	movs	r2, #0
 800f7d4:	605a      	str	r2, [r3, #4]
  mem->used = 0;
 800f7d6:	687b      	ldr	r3, [r7, #4]
 800f7d8:	2200      	movs	r2, #0
 800f7da:	721a      	strb	r2, [r3, #8]
  /* initialize the end of the heap */
  ram_end = ptr_to_mem(MEM_SIZE_ALIGNED);
 800f7dc:	480e      	ldr	r0, [pc, #56]	; (800f818 <mem_init+0x60>)
 800f7de:	f7ff ff27 	bl	800f630 <ptr_to_mem>
 800f7e2:	4603      	mov	r3, r0
 800f7e4:	4a0d      	ldr	r2, [pc, #52]	; (800f81c <mem_init+0x64>)
 800f7e6:	6013      	str	r3, [r2, #0]
  ram_end->used = 1;
 800f7e8:	4b0c      	ldr	r3, [pc, #48]	; (800f81c <mem_init+0x64>)
 800f7ea:	681b      	ldr	r3, [r3, #0]
 800f7ec:	2201      	movs	r2, #1
 800f7ee:	721a      	strb	r2, [r3, #8]
  ram_end->next = MEM_SIZE_ALIGNED;
 800f7f0:	4b0a      	ldr	r3, [pc, #40]	; (800f81c <mem_init+0x64>)
 800f7f2:	681b      	ldr	r3, [r3, #0]
 800f7f4:	4a08      	ldr	r2, [pc, #32]	; (800f818 <mem_init+0x60>)
 800f7f6:	601a      	str	r2, [r3, #0]
  ram_end->prev = MEM_SIZE_ALIGNED;
 800f7f8:	4b08      	ldr	r3, [pc, #32]	; (800f81c <mem_init+0x64>)
 800f7fa:	681b      	ldr	r3, [r3, #0]
 800f7fc:	4a06      	ldr	r2, [pc, #24]	; (800f818 <mem_init+0x60>)
 800f7fe:	605a      	str	r2, [r3, #4]
  MEM_SANITY();

  /* initialize the lowest-free pointer to the start of the heap */
  lfree = (struct mem *)(void *)ram;
 800f800:	4b03      	ldr	r3, [pc, #12]	; (800f810 <mem_init+0x58>)
 800f802:	681b      	ldr	r3, [r3, #0]
 800f804:	4a06      	ldr	r2, [pc, #24]	; (800f820 <mem_init+0x68>)
 800f806:	6013      	str	r3, [r2, #0]
  MEM_STATS_AVAIL(avail, MEM_SIZE_ALIGNED);

  if (sys_mutex_new(&mem_mutex) != ERR_OK) {
    LWIP_ASSERT("failed to create mem_mutex", 0);
  }
}
 800f808:	bf00      	nop
 800f80a:	3708      	adds	r7, #8
 800f80c:	46bd      	mov	sp, r7
 800f80e:	bd80      	pop	{r7, pc}
 800f810:	20000780 	.word	0x20000780
 800f814:	30020000 	.word	0x30020000
 800f818:	0001ffe8 	.word	0x0001ffe8
 800f81c:	20000784 	.word	0x20000784
 800f820:	20000788 	.word	0x20000788

0800f824 <mem_link_valid>:
/* Check if a struct mem is correctly linked.
 * If not, double-free is a possible reason.
 */
static int
mem_link_valid(struct mem *mem)
{
 800f824:	b580      	push	{r7, lr}
 800f826:	b086      	sub	sp, #24
 800f828:	af00      	add	r7, sp, #0
 800f82a:	6078      	str	r0, [r7, #4]
  struct mem *nmem, *pmem;
  mem_size_t rmem_idx;
  rmem_idx = mem_to_ptr(mem);
 800f82c:	6878      	ldr	r0, [r7, #4]
 800f82e:	f7ff ff0f 	bl	800f650 <mem_to_ptr>
 800f832:	6178      	str	r0, [r7, #20]
  nmem = ptr_to_mem(mem->next);
 800f834:	687b      	ldr	r3, [r7, #4]
 800f836:	681b      	ldr	r3, [r3, #0]
 800f838:	4618      	mov	r0, r3
 800f83a:	f7ff fef9 	bl	800f630 <ptr_to_mem>
 800f83e:	6138      	str	r0, [r7, #16]
  pmem = ptr_to_mem(mem->prev);
 800f840:	687b      	ldr	r3, [r7, #4]
 800f842:	685b      	ldr	r3, [r3, #4]
 800f844:	4618      	mov	r0, r3
 800f846:	f7ff fef3 	bl	800f630 <ptr_to_mem>
 800f84a:	60f8      	str	r0, [r7, #12]
  if ((mem->next > MEM_SIZE_ALIGNED) || (mem->prev > MEM_SIZE_ALIGNED) ||
 800f84c:	687b      	ldr	r3, [r7, #4]
 800f84e:	681b      	ldr	r3, [r3, #0]
 800f850:	4a11      	ldr	r2, [pc, #68]	; (800f898 <mem_link_valid+0x74>)
 800f852:	4293      	cmp	r3, r2
 800f854:	d818      	bhi.n	800f888 <mem_link_valid+0x64>
 800f856:	687b      	ldr	r3, [r7, #4]
 800f858:	685b      	ldr	r3, [r3, #4]
 800f85a:	4a0f      	ldr	r2, [pc, #60]	; (800f898 <mem_link_valid+0x74>)
 800f85c:	4293      	cmp	r3, r2
 800f85e:	d813      	bhi.n	800f888 <mem_link_valid+0x64>
      ((mem->prev != rmem_idx) && (pmem->next != rmem_idx)) ||
 800f860:	687b      	ldr	r3, [r7, #4]
 800f862:	685b      	ldr	r3, [r3, #4]
  if ((mem->next > MEM_SIZE_ALIGNED) || (mem->prev > MEM_SIZE_ALIGNED) ||
 800f864:	697a      	ldr	r2, [r7, #20]
 800f866:	429a      	cmp	r2, r3
 800f868:	d004      	beq.n	800f874 <mem_link_valid+0x50>
      ((mem->prev != rmem_idx) && (pmem->next != rmem_idx)) ||
 800f86a:	68fb      	ldr	r3, [r7, #12]
 800f86c:	681b      	ldr	r3, [r3, #0]
 800f86e:	697a      	ldr	r2, [r7, #20]
 800f870:	429a      	cmp	r2, r3
 800f872:	d109      	bne.n	800f888 <mem_link_valid+0x64>
      ((nmem != ram_end) && (nmem->prev != rmem_idx))) {
 800f874:	4b09      	ldr	r3, [pc, #36]	; (800f89c <mem_link_valid+0x78>)
 800f876:	681b      	ldr	r3, [r3, #0]
      ((mem->prev != rmem_idx) && (pmem->next != rmem_idx)) ||
 800f878:	693a      	ldr	r2, [r7, #16]
 800f87a:	429a      	cmp	r2, r3
 800f87c:	d006      	beq.n	800f88c <mem_link_valid+0x68>
      ((nmem != ram_end) && (nmem->prev != rmem_idx))) {
 800f87e:	693b      	ldr	r3, [r7, #16]
 800f880:	685b      	ldr	r3, [r3, #4]
 800f882:	697a      	ldr	r2, [r7, #20]
 800f884:	429a      	cmp	r2, r3
 800f886:	d001      	beq.n	800f88c <mem_link_valid+0x68>
    return 0;
 800f888:	2300      	movs	r3, #0
 800f88a:	e000      	b.n	800f88e <mem_link_valid+0x6a>
  }
  return 1;
 800f88c:	2301      	movs	r3, #1
}
 800f88e:	4618      	mov	r0, r3
 800f890:	3718      	adds	r7, #24
 800f892:	46bd      	mov	sp, r7
 800f894:	bd80      	pop	{r7, pc}
 800f896:	bf00      	nop
 800f898:	0001ffe8 	.word	0x0001ffe8
 800f89c:	20000784 	.word	0x20000784

0800f8a0 <mem_free>:
 * @param rmem is the data portion of a struct mem as returned by a previous
 *             call to mem_malloc()
 */
void
mem_free(void *rmem)
{
 800f8a0:	b580      	push	{r7, lr}
 800f8a2:	b084      	sub	sp, #16
 800f8a4:	af00      	add	r7, sp, #0
 800f8a6:	6078      	str	r0, [r7, #4]
  struct mem *mem;
  LWIP_MEM_FREE_DECL_PROTECT();

  if (rmem == NULL) {
 800f8a8:	687b      	ldr	r3, [r7, #4]
 800f8aa:	2b00      	cmp	r3, #0
 800f8ac:	d04c      	beq.n	800f948 <mem_free+0xa8>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS, ("mem_free(p == NULL) was called.\n"));
    return;
  }
  if ((((mem_ptr_t)rmem) & (MEM_ALIGNMENT - 1)) != 0) {
 800f8ae:	687b      	ldr	r3, [r7, #4]
 800f8b0:	f003 0303 	and.w	r3, r3, #3
 800f8b4:	2b00      	cmp	r3, #0
 800f8b6:	d007      	beq.n	800f8c8 <mem_free+0x28>
    LWIP_MEM_ILLEGAL_FREE("mem_free: sanity check alignment");
 800f8b8:	4b25      	ldr	r3, [pc, #148]	; (800f950 <mem_free+0xb0>)
 800f8ba:	f240 2273 	movw	r2, #627	; 0x273
 800f8be:	4925      	ldr	r1, [pc, #148]	; (800f954 <mem_free+0xb4>)
 800f8c0:	4825      	ldr	r0, [pc, #148]	; (800f958 <mem_free+0xb8>)
 800f8c2:	f00a f8d1 	bl	8019a68 <iprintf>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_free: sanity check alignment\n"));
    /* protect mem stats from concurrent access */
    MEM_STATS_INC_LOCKED(illegal);
    return;
 800f8c6:	e040      	b.n	800f94a <mem_free+0xaa>
  }

  /* Get the corresponding struct mem: */
  /* cast through void* to get rid of alignment warnings */
  mem = (struct mem *)(void *)((u8_t *)rmem - (SIZEOF_STRUCT_MEM + MEM_SANITY_OFFSET));
 800f8c8:	687b      	ldr	r3, [r7, #4]
 800f8ca:	3b0c      	subs	r3, #12
 800f8cc:	60fb      	str	r3, [r7, #12]

  if ((u8_t *)mem < ram || (u8_t *)rmem + MIN_SIZE_ALIGNED > (u8_t *)ram_end) {
 800f8ce:	4b23      	ldr	r3, [pc, #140]	; (800f95c <mem_free+0xbc>)
 800f8d0:	681b      	ldr	r3, [r3, #0]
 800f8d2:	68fa      	ldr	r2, [r7, #12]
 800f8d4:	429a      	cmp	r2, r3
 800f8d6:	d306      	bcc.n	800f8e6 <mem_free+0x46>
 800f8d8:	687b      	ldr	r3, [r7, #4]
 800f8da:	f103 020c 	add.w	r2, r3, #12
 800f8de:	4b20      	ldr	r3, [pc, #128]	; (800f960 <mem_free+0xc0>)
 800f8e0:	681b      	ldr	r3, [r3, #0]
 800f8e2:	429a      	cmp	r2, r3
 800f8e4:	d907      	bls.n	800f8f6 <mem_free+0x56>
    LWIP_MEM_ILLEGAL_FREE("mem_free: illegal memory");
 800f8e6:	4b1a      	ldr	r3, [pc, #104]	; (800f950 <mem_free+0xb0>)
 800f8e8:	f240 227f 	movw	r2, #639	; 0x27f
 800f8ec:	491d      	ldr	r1, [pc, #116]	; (800f964 <mem_free+0xc4>)
 800f8ee:	481a      	ldr	r0, [pc, #104]	; (800f958 <mem_free+0xb8>)
 800f8f0:	f00a f8ba 	bl	8019a68 <iprintf>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_free: illegal memory\n"));
    /* protect mem stats from concurrent access */
    MEM_STATS_INC_LOCKED(illegal);
    return;
 800f8f4:	e029      	b.n	800f94a <mem_free+0xaa>
  mem_overflow_check_element(mem);
#endif
  /* protect the heap from concurrent access */
  LWIP_MEM_FREE_PROTECT();
  /* mem has to be in a used state */
  if (!mem->used) {
 800f8f6:	68fb      	ldr	r3, [r7, #12]
 800f8f8:	7a1b      	ldrb	r3, [r3, #8]
 800f8fa:	2b00      	cmp	r3, #0
 800f8fc:	d107      	bne.n	800f90e <mem_free+0x6e>
    LWIP_MEM_ILLEGAL_FREE("mem_free: illegal memory: double free");
 800f8fe:	4b14      	ldr	r3, [pc, #80]	; (800f950 <mem_free+0xb0>)
 800f900:	f44f 7223 	mov.w	r2, #652	; 0x28c
 800f904:	4918      	ldr	r1, [pc, #96]	; (800f968 <mem_free+0xc8>)
 800f906:	4814      	ldr	r0, [pc, #80]	; (800f958 <mem_free+0xb8>)
 800f908:	f00a f8ae 	bl	8019a68 <iprintf>
    LWIP_MEM_FREE_UNPROTECT();
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_free: illegal memory: double free?\n"));
    /* protect mem stats from concurrent access */
    MEM_STATS_INC_LOCKED(illegal);
    return;
 800f90c:	e01d      	b.n	800f94a <mem_free+0xaa>
  }

  if (!mem_link_valid(mem)) {
 800f90e:	68f8      	ldr	r0, [r7, #12]
 800f910:	f7ff ff88 	bl	800f824 <mem_link_valid>
 800f914:	4603      	mov	r3, r0
 800f916:	2b00      	cmp	r3, #0
 800f918:	d107      	bne.n	800f92a <mem_free+0x8a>
    LWIP_MEM_ILLEGAL_FREE("mem_free: illegal memory: non-linked: double free");
 800f91a:	4b0d      	ldr	r3, [pc, #52]	; (800f950 <mem_free+0xb0>)
 800f91c:	f240 2295 	movw	r2, #661	; 0x295
 800f920:	4912      	ldr	r1, [pc, #72]	; (800f96c <mem_free+0xcc>)
 800f922:	480d      	ldr	r0, [pc, #52]	; (800f958 <mem_free+0xb8>)
 800f924:	f00a f8a0 	bl	8019a68 <iprintf>
    LWIP_MEM_FREE_UNPROTECT();
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_free: illegal memory: non-linked: double free?\n"));
    /* protect mem stats from concurrent access */
    MEM_STATS_INC_LOCKED(illegal);
    return;
 800f928:	e00f      	b.n	800f94a <mem_free+0xaa>
  }

  /* mem is now unused. */
  mem->used = 0;
 800f92a:	68fb      	ldr	r3, [r7, #12]
 800f92c:	2200      	movs	r2, #0
 800f92e:	721a      	strb	r2, [r3, #8]

  if (mem < lfree) {
 800f930:	4b0f      	ldr	r3, [pc, #60]	; (800f970 <mem_free+0xd0>)
 800f932:	681b      	ldr	r3, [r3, #0]
 800f934:	68fa      	ldr	r2, [r7, #12]
 800f936:	429a      	cmp	r2, r3
 800f938:	d202      	bcs.n	800f940 <mem_free+0xa0>
    /* the newly freed struct is now the lowest */
    lfree = mem;
 800f93a:	4a0d      	ldr	r2, [pc, #52]	; (800f970 <mem_free+0xd0>)
 800f93c:	68fb      	ldr	r3, [r7, #12]
 800f93e:	6013      	str	r3, [r2, #0]
  }

  MEM_STATS_DEC_USED(used, mem->next - (mem_size_t)(((u8_t *)mem - ram)));

  /* finally, see if prev or next are free also */
  plug_holes(mem);
 800f940:	68f8      	ldr	r0, [r7, #12]
 800f942:	f7ff fe95 	bl	800f670 <plug_holes>
 800f946:	e000      	b.n	800f94a <mem_free+0xaa>
    return;
 800f948:	bf00      	nop
  MEM_SANITY();
#if LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
  mem_free_count = 1;
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
  LWIP_MEM_FREE_UNPROTECT();
}
 800f94a:	3710      	adds	r7, #16
 800f94c:	46bd      	mov	sp, r7
 800f94e:	bd80      	pop	{r7, pc}
 800f950:	0801c23c 	.word	0x0801c23c
 800f954:	0801c310 	.word	0x0801c310
 800f958:	0801c284 	.word	0x0801c284
 800f95c:	20000780 	.word	0x20000780
 800f960:	20000784 	.word	0x20000784
 800f964:	0801c334 	.word	0x0801c334
 800f968:	0801c350 	.word	0x0801c350
 800f96c:	0801c378 	.word	0x0801c378
 800f970:	20000788 	.word	0x20000788

0800f974 <mem_trim>:
 *         or NULL if newsize is > old size, in which case rmem is NOT touched
 *         or freed!
 */
void *
mem_trim(void *rmem, mem_size_t new_size)
{
 800f974:	b580      	push	{r7, lr}
 800f976:	b08a      	sub	sp, #40	; 0x28
 800f978:	af00      	add	r7, sp, #0
 800f97a:	6078      	str	r0, [r7, #4]
 800f97c:	6039      	str	r1, [r7, #0]
  /* use the FREE_PROTECT here: it protects with sem OR SYS_ARCH_PROTECT */
  LWIP_MEM_FREE_DECL_PROTECT();

  /* Expand the size of the allocated memory region so that we can
     adjust for alignment. */
  newsize = (mem_size_t)LWIP_MEM_ALIGN_SIZE(new_size);
 800f97e:	683b      	ldr	r3, [r7, #0]
 800f980:	3303      	adds	r3, #3
 800f982:	f023 0303 	bic.w	r3, r3, #3
 800f986:	627b      	str	r3, [r7, #36]	; 0x24
  if (newsize < MIN_SIZE_ALIGNED) {
 800f988:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f98a:	2b0b      	cmp	r3, #11
 800f98c:	d801      	bhi.n	800f992 <mem_trim+0x1e>
    /* every data block must be at least MIN_SIZE_ALIGNED long */
    newsize = MIN_SIZE_ALIGNED;
 800f98e:	230c      	movs	r3, #12
 800f990:	627b      	str	r3, [r7, #36]	; 0x24
  }
#if MEM_OVERFLOW_CHECK
  newsize += MEM_SANITY_REGION_BEFORE_ALIGNED + MEM_SANITY_REGION_AFTER_ALIGNED;
#endif
  if ((newsize > MEM_SIZE_ALIGNED) || (newsize < new_size)) {
 800f992:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f994:	4a68      	ldr	r2, [pc, #416]	; (800fb38 <mem_trim+0x1c4>)
 800f996:	4293      	cmp	r3, r2
 800f998:	d803      	bhi.n	800f9a2 <mem_trim+0x2e>
 800f99a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800f99c:	683b      	ldr	r3, [r7, #0]
 800f99e:	429a      	cmp	r2, r3
 800f9a0:	d201      	bcs.n	800f9a6 <mem_trim+0x32>
    return NULL;
 800f9a2:	2300      	movs	r3, #0
 800f9a4:	e0c4      	b.n	800fb30 <mem_trim+0x1bc>
  }

  LWIP_ASSERT("mem_trim: legal memory", (u8_t *)rmem >= (u8_t *)ram &&
 800f9a6:	4b65      	ldr	r3, [pc, #404]	; (800fb3c <mem_trim+0x1c8>)
 800f9a8:	681b      	ldr	r3, [r3, #0]
 800f9aa:	687a      	ldr	r2, [r7, #4]
 800f9ac:	429a      	cmp	r2, r3
 800f9ae:	d304      	bcc.n	800f9ba <mem_trim+0x46>
 800f9b0:	4b63      	ldr	r3, [pc, #396]	; (800fb40 <mem_trim+0x1cc>)
 800f9b2:	681b      	ldr	r3, [r3, #0]
 800f9b4:	687a      	ldr	r2, [r7, #4]
 800f9b6:	429a      	cmp	r2, r3
 800f9b8:	d306      	bcc.n	800f9c8 <mem_trim+0x54>
 800f9ba:	4b62      	ldr	r3, [pc, #392]	; (800fb44 <mem_trim+0x1d0>)
 800f9bc:	f240 22d1 	movw	r2, #721	; 0x2d1
 800f9c0:	4961      	ldr	r1, [pc, #388]	; (800fb48 <mem_trim+0x1d4>)
 800f9c2:	4862      	ldr	r0, [pc, #392]	; (800fb4c <mem_trim+0x1d8>)
 800f9c4:	f00a f850 	bl	8019a68 <iprintf>
              (u8_t *)rmem < (u8_t *)ram_end);

  if ((u8_t *)rmem < (u8_t *)ram || (u8_t *)rmem >= (u8_t *)ram_end) {
 800f9c8:	4b5c      	ldr	r3, [pc, #368]	; (800fb3c <mem_trim+0x1c8>)
 800f9ca:	681b      	ldr	r3, [r3, #0]
 800f9cc:	687a      	ldr	r2, [r7, #4]
 800f9ce:	429a      	cmp	r2, r3
 800f9d0:	d304      	bcc.n	800f9dc <mem_trim+0x68>
 800f9d2:	4b5b      	ldr	r3, [pc, #364]	; (800fb40 <mem_trim+0x1cc>)
 800f9d4:	681b      	ldr	r3, [r3, #0]
 800f9d6:	687a      	ldr	r2, [r7, #4]
 800f9d8:	429a      	cmp	r2, r3
 800f9da:	d301      	bcc.n	800f9e0 <mem_trim+0x6c>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_trim: illegal memory\n"));
    /* protect mem stats from concurrent access */
    MEM_STATS_INC_LOCKED(illegal);
    return rmem;
 800f9dc:	687b      	ldr	r3, [r7, #4]
 800f9de:	e0a7      	b.n	800fb30 <mem_trim+0x1bc>
  }
  /* Get the corresponding struct mem ... */
  /* cast through void* to get rid of alignment warnings */
  mem = (struct mem *)(void *)((u8_t *)rmem - (SIZEOF_STRUCT_MEM + MEM_SANITY_OFFSET));
 800f9e0:	687b      	ldr	r3, [r7, #4]
 800f9e2:	3b0c      	subs	r3, #12
 800f9e4:	623b      	str	r3, [r7, #32]
#if MEM_OVERFLOW_CHECK
  mem_overflow_check_element(mem);
#endif
  /* ... and its offset pointer */
  ptr = mem_to_ptr(mem);
 800f9e6:	6a38      	ldr	r0, [r7, #32]
 800f9e8:	f7ff fe32 	bl	800f650 <mem_to_ptr>
 800f9ec:	61f8      	str	r0, [r7, #28]

  size = (mem_size_t)((mem_size_t)(mem->next - ptr) - (SIZEOF_STRUCT_MEM + MEM_SANITY_OVERHEAD));
 800f9ee:	6a3b      	ldr	r3, [r7, #32]
 800f9f0:	681a      	ldr	r2, [r3, #0]
 800f9f2:	69fb      	ldr	r3, [r7, #28]
 800f9f4:	1ad3      	subs	r3, r2, r3
 800f9f6:	3b0c      	subs	r3, #12
 800f9f8:	61bb      	str	r3, [r7, #24]
  LWIP_ASSERT("mem_trim can only shrink memory", newsize <= size);
 800f9fa:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800f9fc:	69bb      	ldr	r3, [r7, #24]
 800f9fe:	429a      	cmp	r2, r3
 800fa00:	d906      	bls.n	800fa10 <mem_trim+0x9c>
 800fa02:	4b50      	ldr	r3, [pc, #320]	; (800fb44 <mem_trim+0x1d0>)
 800fa04:	f44f 7239 	mov.w	r2, #740	; 0x2e4
 800fa08:	4951      	ldr	r1, [pc, #324]	; (800fb50 <mem_trim+0x1dc>)
 800fa0a:	4850      	ldr	r0, [pc, #320]	; (800fb4c <mem_trim+0x1d8>)
 800fa0c:	f00a f82c 	bl	8019a68 <iprintf>
  if (newsize > size) {
 800fa10:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800fa12:	69bb      	ldr	r3, [r7, #24]
 800fa14:	429a      	cmp	r2, r3
 800fa16:	d901      	bls.n	800fa1c <mem_trim+0xa8>
    /* not supported */
    return NULL;
 800fa18:	2300      	movs	r3, #0
 800fa1a:	e089      	b.n	800fb30 <mem_trim+0x1bc>
  }
  if (newsize == size) {
 800fa1c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800fa1e:	69bb      	ldr	r3, [r7, #24]
 800fa20:	429a      	cmp	r2, r3
 800fa22:	d101      	bne.n	800fa28 <mem_trim+0xb4>
    /* No change in size, simply return */
    return rmem;
 800fa24:	687b      	ldr	r3, [r7, #4]
 800fa26:	e083      	b.n	800fb30 <mem_trim+0x1bc>
  }

  /* protect the heap from concurrent access */
  LWIP_MEM_FREE_PROTECT();

  mem2 = ptr_to_mem(mem->next);
 800fa28:	6a3b      	ldr	r3, [r7, #32]
 800fa2a:	681b      	ldr	r3, [r3, #0]
 800fa2c:	4618      	mov	r0, r3
 800fa2e:	f7ff fdff 	bl	800f630 <ptr_to_mem>
 800fa32:	6178      	str	r0, [r7, #20]
  if (mem2->used == 0) {
 800fa34:	697b      	ldr	r3, [r7, #20]
 800fa36:	7a1b      	ldrb	r3, [r3, #8]
 800fa38:	2b00      	cmp	r3, #0
 800fa3a:	d13c      	bne.n	800fab6 <mem_trim+0x142>
    /* The next struct is unused, we can simply move it at little */
    mem_size_t next;
    LWIP_ASSERT("invalid next ptr", mem->next != MEM_SIZE_ALIGNED);
 800fa3c:	6a3b      	ldr	r3, [r7, #32]
 800fa3e:	681b      	ldr	r3, [r3, #0]
 800fa40:	4a3d      	ldr	r2, [pc, #244]	; (800fb38 <mem_trim+0x1c4>)
 800fa42:	4293      	cmp	r3, r2
 800fa44:	d106      	bne.n	800fa54 <mem_trim+0xe0>
 800fa46:	4b3f      	ldr	r3, [pc, #252]	; (800fb44 <mem_trim+0x1d0>)
 800fa48:	f240 22f5 	movw	r2, #757	; 0x2f5
 800fa4c:	4941      	ldr	r1, [pc, #260]	; (800fb54 <mem_trim+0x1e0>)
 800fa4e:	483f      	ldr	r0, [pc, #252]	; (800fb4c <mem_trim+0x1d8>)
 800fa50:	f00a f80a 	bl	8019a68 <iprintf>
    /* remember the old next pointer */
    next = mem2->next;
 800fa54:	697b      	ldr	r3, [r7, #20]
 800fa56:	681b      	ldr	r3, [r3, #0]
 800fa58:	60fb      	str	r3, [r7, #12]
    /* create new struct mem which is moved directly after the shrinked mem */
    ptr2 = (mem_size_t)(ptr + SIZEOF_STRUCT_MEM + newsize);
 800fa5a:	69fa      	ldr	r2, [r7, #28]
 800fa5c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800fa5e:	4413      	add	r3, r2
 800fa60:	330c      	adds	r3, #12
 800fa62:	613b      	str	r3, [r7, #16]
    if (lfree == mem2) {
 800fa64:	4b3c      	ldr	r3, [pc, #240]	; (800fb58 <mem_trim+0x1e4>)
 800fa66:	681b      	ldr	r3, [r3, #0]
 800fa68:	697a      	ldr	r2, [r7, #20]
 800fa6a:	429a      	cmp	r2, r3
 800fa6c:	d105      	bne.n	800fa7a <mem_trim+0x106>
      lfree = ptr_to_mem(ptr2);
 800fa6e:	6938      	ldr	r0, [r7, #16]
 800fa70:	f7ff fdde 	bl	800f630 <ptr_to_mem>
 800fa74:	4603      	mov	r3, r0
 800fa76:	4a38      	ldr	r2, [pc, #224]	; (800fb58 <mem_trim+0x1e4>)
 800fa78:	6013      	str	r3, [r2, #0]
    }
    mem2 = ptr_to_mem(ptr2);
 800fa7a:	6938      	ldr	r0, [r7, #16]
 800fa7c:	f7ff fdd8 	bl	800f630 <ptr_to_mem>
 800fa80:	6178      	str	r0, [r7, #20]
    mem2->used = 0;
 800fa82:	697b      	ldr	r3, [r7, #20]
 800fa84:	2200      	movs	r2, #0
 800fa86:	721a      	strb	r2, [r3, #8]
    /* restore the next pointer */
    mem2->next = next;
 800fa88:	697b      	ldr	r3, [r7, #20]
 800fa8a:	68fa      	ldr	r2, [r7, #12]
 800fa8c:	601a      	str	r2, [r3, #0]
    /* link it back to mem */
    mem2->prev = ptr;
 800fa8e:	697b      	ldr	r3, [r7, #20]
 800fa90:	69fa      	ldr	r2, [r7, #28]
 800fa92:	605a      	str	r2, [r3, #4]
    /* link mem to it */
    mem->next = ptr2;
 800fa94:	6a3b      	ldr	r3, [r7, #32]
 800fa96:	693a      	ldr	r2, [r7, #16]
 800fa98:	601a      	str	r2, [r3, #0]
    /* last thing to restore linked list: as we have moved mem2,
     * let 'mem2->next->prev' point to mem2 again. but only if mem2->next is not
     * the end of the heap */
    if (mem2->next != MEM_SIZE_ALIGNED) {
 800fa9a:	697b      	ldr	r3, [r7, #20]
 800fa9c:	681b      	ldr	r3, [r3, #0]
 800fa9e:	4a26      	ldr	r2, [pc, #152]	; (800fb38 <mem_trim+0x1c4>)
 800faa0:	4293      	cmp	r3, r2
 800faa2:	d044      	beq.n	800fb2e <mem_trim+0x1ba>
      ptr_to_mem(mem2->next)->prev = ptr2;
 800faa4:	697b      	ldr	r3, [r7, #20]
 800faa6:	681b      	ldr	r3, [r3, #0]
 800faa8:	4618      	mov	r0, r3
 800faaa:	f7ff fdc1 	bl	800f630 <ptr_to_mem>
 800faae:	4602      	mov	r2, r0
 800fab0:	693b      	ldr	r3, [r7, #16]
 800fab2:	6053      	str	r3, [r2, #4]
 800fab4:	e03b      	b.n	800fb2e <mem_trim+0x1ba>
    }
    MEM_STATS_DEC_USED(used, (size - newsize));
    /* no need to plug holes, we've already done that */
  } else if (newsize + SIZEOF_STRUCT_MEM + MIN_SIZE_ALIGNED <= size) {
 800fab6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800fab8:	3318      	adds	r3, #24
 800faba:	69ba      	ldr	r2, [r7, #24]
 800fabc:	429a      	cmp	r2, r3
 800fabe:	d336      	bcc.n	800fb2e <mem_trim+0x1ba>
     * Old size ('size') must be big enough to contain at least 'newsize' plus a struct mem
     * ('SIZEOF_STRUCT_MEM') with some data ('MIN_SIZE_ALIGNED').
     * @todo we could leave out MIN_SIZE_ALIGNED. We would create an empty
     *       region that couldn't hold data, but when mem->next gets freed,
     *       the 2 regions would be combined, resulting in more free memory */
    ptr2 = (mem_size_t)(ptr + SIZEOF_STRUCT_MEM + newsize);
 800fac0:	69fa      	ldr	r2, [r7, #28]
 800fac2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800fac4:	4413      	add	r3, r2
 800fac6:	330c      	adds	r3, #12
 800fac8:	613b      	str	r3, [r7, #16]
    LWIP_ASSERT("invalid next ptr", mem->next != MEM_SIZE_ALIGNED);
 800faca:	6a3b      	ldr	r3, [r7, #32]
 800facc:	681b      	ldr	r3, [r3, #0]
 800face:	4a1a      	ldr	r2, [pc, #104]	; (800fb38 <mem_trim+0x1c4>)
 800fad0:	4293      	cmp	r3, r2
 800fad2:	d106      	bne.n	800fae2 <mem_trim+0x16e>
 800fad4:	4b1b      	ldr	r3, [pc, #108]	; (800fb44 <mem_trim+0x1d0>)
 800fad6:	f240 3216 	movw	r2, #790	; 0x316
 800fada:	491e      	ldr	r1, [pc, #120]	; (800fb54 <mem_trim+0x1e0>)
 800fadc:	481b      	ldr	r0, [pc, #108]	; (800fb4c <mem_trim+0x1d8>)
 800fade:	f009 ffc3 	bl	8019a68 <iprintf>
    mem2 = ptr_to_mem(ptr2);
 800fae2:	6938      	ldr	r0, [r7, #16]
 800fae4:	f7ff fda4 	bl	800f630 <ptr_to_mem>
 800fae8:	6178      	str	r0, [r7, #20]
    if (mem2 < lfree) {
 800faea:	4b1b      	ldr	r3, [pc, #108]	; (800fb58 <mem_trim+0x1e4>)
 800faec:	681b      	ldr	r3, [r3, #0]
 800faee:	697a      	ldr	r2, [r7, #20]
 800faf0:	429a      	cmp	r2, r3
 800faf2:	d202      	bcs.n	800fafa <mem_trim+0x186>
      lfree = mem2;
 800faf4:	4a18      	ldr	r2, [pc, #96]	; (800fb58 <mem_trim+0x1e4>)
 800faf6:	697b      	ldr	r3, [r7, #20]
 800faf8:	6013      	str	r3, [r2, #0]
    }
    mem2->used = 0;
 800fafa:	697b      	ldr	r3, [r7, #20]
 800fafc:	2200      	movs	r2, #0
 800fafe:	721a      	strb	r2, [r3, #8]
    mem2->next = mem->next;
 800fb00:	6a3b      	ldr	r3, [r7, #32]
 800fb02:	681a      	ldr	r2, [r3, #0]
 800fb04:	697b      	ldr	r3, [r7, #20]
 800fb06:	601a      	str	r2, [r3, #0]
    mem2->prev = ptr;
 800fb08:	697b      	ldr	r3, [r7, #20]
 800fb0a:	69fa      	ldr	r2, [r7, #28]
 800fb0c:	605a      	str	r2, [r3, #4]
    mem->next = ptr2;
 800fb0e:	6a3b      	ldr	r3, [r7, #32]
 800fb10:	693a      	ldr	r2, [r7, #16]
 800fb12:	601a      	str	r2, [r3, #0]
    if (mem2->next != MEM_SIZE_ALIGNED) {
 800fb14:	697b      	ldr	r3, [r7, #20]
 800fb16:	681b      	ldr	r3, [r3, #0]
 800fb18:	4a07      	ldr	r2, [pc, #28]	; (800fb38 <mem_trim+0x1c4>)
 800fb1a:	4293      	cmp	r3, r2
 800fb1c:	d007      	beq.n	800fb2e <mem_trim+0x1ba>
      ptr_to_mem(mem2->next)->prev = ptr2;
 800fb1e:	697b      	ldr	r3, [r7, #20]
 800fb20:	681b      	ldr	r3, [r3, #0]
 800fb22:	4618      	mov	r0, r3
 800fb24:	f7ff fd84 	bl	800f630 <ptr_to_mem>
 800fb28:	4602      	mov	r2, r0
 800fb2a:	693b      	ldr	r3, [r7, #16]
 800fb2c:	6053      	str	r3, [r2, #4]
  MEM_SANITY();
#if LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
  mem_free_count = 1;
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
  LWIP_MEM_FREE_UNPROTECT();
  return rmem;
 800fb2e:	687b      	ldr	r3, [r7, #4]
}
 800fb30:	4618      	mov	r0, r3
 800fb32:	3728      	adds	r7, #40	; 0x28
 800fb34:	46bd      	mov	sp, r7
 800fb36:	bd80      	pop	{r7, pc}
 800fb38:	0001ffe8 	.word	0x0001ffe8
 800fb3c:	20000780 	.word	0x20000780
 800fb40:	20000784 	.word	0x20000784
 800fb44:	0801c23c 	.word	0x0801c23c
 800fb48:	0801c3ac 	.word	0x0801c3ac
 800fb4c:	0801c284 	.word	0x0801c284
 800fb50:	0801c3c4 	.word	0x0801c3c4
 800fb54:	0801c3e4 	.word	0x0801c3e4
 800fb58:	20000788 	.word	0x20000788

0800fb5c <mem_malloc>:
 *
 * Note that the returned value will always be aligned (as defined by MEM_ALIGNMENT).
 */
void *
mem_malloc(mem_size_t size_in)
{
 800fb5c:	b580      	push	{r7, lr}
 800fb5e:	b088      	sub	sp, #32
 800fb60:	af00      	add	r7, sp, #0
 800fb62:	6078      	str	r0, [r7, #4]
#if LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
  u8_t local_mem_free_count = 0;
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
  LWIP_MEM_ALLOC_DECL_PROTECT();

  if (size_in == 0) {
 800fb64:	687b      	ldr	r3, [r7, #4]
 800fb66:	2b00      	cmp	r3, #0
 800fb68:	d101      	bne.n	800fb6e <mem_malloc+0x12>
    return NULL;
 800fb6a:	2300      	movs	r3, #0
 800fb6c:	e0d0      	b.n	800fd10 <mem_malloc+0x1b4>
  }

  /* Expand the size of the allocated memory region so that we can
     adjust for alignment. */
  size = (mem_size_t)LWIP_MEM_ALIGN_SIZE(size_in);
 800fb6e:	687b      	ldr	r3, [r7, #4]
 800fb70:	3303      	adds	r3, #3
 800fb72:	f023 0303 	bic.w	r3, r3, #3
 800fb76:	61bb      	str	r3, [r7, #24]
  if (size < MIN_SIZE_ALIGNED) {
 800fb78:	69bb      	ldr	r3, [r7, #24]
 800fb7a:	2b0b      	cmp	r3, #11
 800fb7c:	d801      	bhi.n	800fb82 <mem_malloc+0x26>
    /* every data block must be at least MIN_SIZE_ALIGNED long */
    size = MIN_SIZE_ALIGNED;
 800fb7e:	230c      	movs	r3, #12
 800fb80:	61bb      	str	r3, [r7, #24]
  }
#if MEM_OVERFLOW_CHECK
  size += MEM_SANITY_REGION_BEFORE_ALIGNED + MEM_SANITY_REGION_AFTER_ALIGNED;
#endif
  if ((size > MEM_SIZE_ALIGNED) || (size < size_in)) {
 800fb82:	69bb      	ldr	r3, [r7, #24]
 800fb84:	4a64      	ldr	r2, [pc, #400]	; (800fd18 <mem_malloc+0x1bc>)
 800fb86:	4293      	cmp	r3, r2
 800fb88:	d803      	bhi.n	800fb92 <mem_malloc+0x36>
 800fb8a:	69ba      	ldr	r2, [r7, #24]
 800fb8c:	687b      	ldr	r3, [r7, #4]
 800fb8e:	429a      	cmp	r2, r3
 800fb90:	d201      	bcs.n	800fb96 <mem_malloc+0x3a>
    return NULL;
 800fb92:	2300      	movs	r3, #0
 800fb94:	e0bc      	b.n	800fd10 <mem_malloc+0x1b4>
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */

    /* Scan through the heap searching for a free block that is big enough,
     * beginning with the lowest free block.
     */
    for (ptr = mem_to_ptr(lfree); ptr < MEM_SIZE_ALIGNED - size;
 800fb96:	4b61      	ldr	r3, [pc, #388]	; (800fd1c <mem_malloc+0x1c0>)
 800fb98:	681b      	ldr	r3, [r3, #0]
 800fb9a:	4618      	mov	r0, r3
 800fb9c:	f7ff fd58 	bl	800f650 <mem_to_ptr>
 800fba0:	61f8      	str	r0, [r7, #28]
 800fba2:	e0ad      	b.n	800fd00 <mem_malloc+0x1a4>
         ptr = ptr_to_mem(ptr)->next) {
      mem = ptr_to_mem(ptr);
 800fba4:	69f8      	ldr	r0, [r7, #28]
 800fba6:	f7ff fd43 	bl	800f630 <ptr_to_mem>
 800fbaa:	6138      	str	r0, [r7, #16]
        local_mem_free_count = 1;
        break;
      }
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */

      if ((!mem->used) &&
 800fbac:	693b      	ldr	r3, [r7, #16]
 800fbae:	7a1b      	ldrb	r3, [r3, #8]
 800fbb0:	2b00      	cmp	r3, #0
 800fbb2:	f040 809f 	bne.w	800fcf4 <mem_malloc+0x198>
          (mem->next - (ptr + SIZEOF_STRUCT_MEM)) >= size) {
 800fbb6:	693b      	ldr	r3, [r7, #16]
 800fbb8:	681a      	ldr	r2, [r3, #0]
 800fbba:	69fb      	ldr	r3, [r7, #28]
 800fbbc:	1ad3      	subs	r3, r2, r3
 800fbbe:	3b0c      	subs	r3, #12
      if ((!mem->used) &&
 800fbc0:	69ba      	ldr	r2, [r7, #24]
 800fbc2:	429a      	cmp	r2, r3
 800fbc4:	f200 8096 	bhi.w	800fcf4 <mem_malloc+0x198>
        /* mem is not used and at least perfect fit is possible:
         * mem->next - (ptr + SIZEOF_STRUCT_MEM) gives us the 'user data size' of mem */

        if (mem->next - (ptr + SIZEOF_STRUCT_MEM) >= (size + SIZEOF_STRUCT_MEM + MIN_SIZE_ALIGNED)) {
 800fbc8:	693b      	ldr	r3, [r7, #16]
 800fbca:	681a      	ldr	r2, [r3, #0]
 800fbcc:	69fb      	ldr	r3, [r7, #28]
 800fbce:	1ad3      	subs	r3, r2, r3
 800fbd0:	f1a3 020c 	sub.w	r2, r3, #12
 800fbd4:	69bb      	ldr	r3, [r7, #24]
 800fbd6:	3318      	adds	r3, #24
 800fbd8:	429a      	cmp	r2, r3
 800fbda:	d331      	bcc.n	800fc40 <mem_malloc+0xe4>
           * struct mem would fit in but no data between mem2 and mem2->next
           * @todo we could leave out MIN_SIZE_ALIGNED. We would create an empty
           *       region that couldn't hold data, but when mem->next gets freed,
           *       the 2 regions would be combined, resulting in more free memory
           */
          ptr2 = (mem_size_t)(ptr + SIZEOF_STRUCT_MEM + size);
 800fbdc:	69fa      	ldr	r2, [r7, #28]
 800fbde:	69bb      	ldr	r3, [r7, #24]
 800fbe0:	4413      	add	r3, r2
 800fbe2:	330c      	adds	r3, #12
 800fbe4:	60fb      	str	r3, [r7, #12]
          LWIP_ASSERT("invalid next ptr",ptr2 != MEM_SIZE_ALIGNED);
 800fbe6:	68fb      	ldr	r3, [r7, #12]
 800fbe8:	4a4b      	ldr	r2, [pc, #300]	; (800fd18 <mem_malloc+0x1bc>)
 800fbea:	4293      	cmp	r3, r2
 800fbec:	d106      	bne.n	800fbfc <mem_malloc+0xa0>
 800fbee:	4b4c      	ldr	r3, [pc, #304]	; (800fd20 <mem_malloc+0x1c4>)
 800fbf0:	f240 3287 	movw	r2, #903	; 0x387
 800fbf4:	494b      	ldr	r1, [pc, #300]	; (800fd24 <mem_malloc+0x1c8>)
 800fbf6:	484c      	ldr	r0, [pc, #304]	; (800fd28 <mem_malloc+0x1cc>)
 800fbf8:	f009 ff36 	bl	8019a68 <iprintf>
          /* create mem2 struct */
          mem2 = ptr_to_mem(ptr2);
 800fbfc:	68f8      	ldr	r0, [r7, #12]
 800fbfe:	f7ff fd17 	bl	800f630 <ptr_to_mem>
 800fc02:	60b8      	str	r0, [r7, #8]
          mem2->used = 0;
 800fc04:	68bb      	ldr	r3, [r7, #8]
 800fc06:	2200      	movs	r2, #0
 800fc08:	721a      	strb	r2, [r3, #8]
          mem2->next = mem->next;
 800fc0a:	693b      	ldr	r3, [r7, #16]
 800fc0c:	681a      	ldr	r2, [r3, #0]
 800fc0e:	68bb      	ldr	r3, [r7, #8]
 800fc10:	601a      	str	r2, [r3, #0]
          mem2->prev = ptr;
 800fc12:	68bb      	ldr	r3, [r7, #8]
 800fc14:	69fa      	ldr	r2, [r7, #28]
 800fc16:	605a      	str	r2, [r3, #4]
          /* and insert it between mem and mem->next */
          mem->next = ptr2;
 800fc18:	693b      	ldr	r3, [r7, #16]
 800fc1a:	68fa      	ldr	r2, [r7, #12]
 800fc1c:	601a      	str	r2, [r3, #0]
          mem->used = 1;
 800fc1e:	693b      	ldr	r3, [r7, #16]
 800fc20:	2201      	movs	r2, #1
 800fc22:	721a      	strb	r2, [r3, #8]

          if (mem2->next != MEM_SIZE_ALIGNED) {
 800fc24:	68bb      	ldr	r3, [r7, #8]
 800fc26:	681b      	ldr	r3, [r3, #0]
 800fc28:	4a3b      	ldr	r2, [pc, #236]	; (800fd18 <mem_malloc+0x1bc>)
 800fc2a:	4293      	cmp	r3, r2
 800fc2c:	d00b      	beq.n	800fc46 <mem_malloc+0xea>
            ptr_to_mem(mem2->next)->prev = ptr2;
 800fc2e:	68bb      	ldr	r3, [r7, #8]
 800fc30:	681b      	ldr	r3, [r3, #0]
 800fc32:	4618      	mov	r0, r3
 800fc34:	f7ff fcfc 	bl	800f630 <ptr_to_mem>
 800fc38:	4602      	mov	r2, r0
 800fc3a:	68fb      	ldr	r3, [r7, #12]
 800fc3c:	6053      	str	r3, [r2, #4]
 800fc3e:	e002      	b.n	800fc46 <mem_malloc+0xea>
           * take care of this).
           * -> near fit or exact fit: do not split, no mem2 creation
           * also can't move mem->next directly behind mem, since mem->next
           * will always be used at this point!
           */
          mem->used = 1;
 800fc40:	693b      	ldr	r3, [r7, #16]
 800fc42:	2201      	movs	r2, #1
 800fc44:	721a      	strb	r2, [r3, #8]
          MEM_STATS_INC_USED(used, mem->next - mem_to_ptr(mem));
        }
#if LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
mem_malloc_adjust_lfree:
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
        if (mem == lfree) {
 800fc46:	4b35      	ldr	r3, [pc, #212]	; (800fd1c <mem_malloc+0x1c0>)
 800fc48:	681b      	ldr	r3, [r3, #0]
 800fc4a:	693a      	ldr	r2, [r7, #16]
 800fc4c:	429a      	cmp	r2, r3
 800fc4e:	d127      	bne.n	800fca0 <mem_malloc+0x144>
          struct mem *cur = lfree;
 800fc50:	4b32      	ldr	r3, [pc, #200]	; (800fd1c <mem_malloc+0x1c0>)
 800fc52:	681b      	ldr	r3, [r3, #0]
 800fc54:	617b      	str	r3, [r7, #20]
          /* Find next free block after mem and update lowest free pointer */
          while (cur->used && cur != ram_end) {
 800fc56:	e005      	b.n	800fc64 <mem_malloc+0x108>
              /* If mem_free or mem_trim have run, we have to restart since they
                 could have altered our current struct mem or lfree. */
              goto mem_malloc_adjust_lfree;
            }
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
            cur = ptr_to_mem(cur->next);
 800fc58:	697b      	ldr	r3, [r7, #20]
 800fc5a:	681b      	ldr	r3, [r3, #0]
 800fc5c:	4618      	mov	r0, r3
 800fc5e:	f7ff fce7 	bl	800f630 <ptr_to_mem>
 800fc62:	6178      	str	r0, [r7, #20]
          while (cur->used && cur != ram_end) {
 800fc64:	697b      	ldr	r3, [r7, #20]
 800fc66:	7a1b      	ldrb	r3, [r3, #8]
 800fc68:	2b00      	cmp	r3, #0
 800fc6a:	d004      	beq.n	800fc76 <mem_malloc+0x11a>
 800fc6c:	4b2f      	ldr	r3, [pc, #188]	; (800fd2c <mem_malloc+0x1d0>)
 800fc6e:	681b      	ldr	r3, [r3, #0]
 800fc70:	697a      	ldr	r2, [r7, #20]
 800fc72:	429a      	cmp	r2, r3
 800fc74:	d1f0      	bne.n	800fc58 <mem_malloc+0xfc>
          }
          lfree = cur;
 800fc76:	4a29      	ldr	r2, [pc, #164]	; (800fd1c <mem_malloc+0x1c0>)
 800fc78:	697b      	ldr	r3, [r7, #20]
 800fc7a:	6013      	str	r3, [r2, #0]
          LWIP_ASSERT("mem_malloc: !lfree->used", ((lfree == ram_end) || (!lfree->used)));
 800fc7c:	4b27      	ldr	r3, [pc, #156]	; (800fd1c <mem_malloc+0x1c0>)
 800fc7e:	681a      	ldr	r2, [r3, #0]
 800fc80:	4b2a      	ldr	r3, [pc, #168]	; (800fd2c <mem_malloc+0x1d0>)
 800fc82:	681b      	ldr	r3, [r3, #0]
 800fc84:	429a      	cmp	r2, r3
 800fc86:	d00b      	beq.n	800fca0 <mem_malloc+0x144>
 800fc88:	4b24      	ldr	r3, [pc, #144]	; (800fd1c <mem_malloc+0x1c0>)
 800fc8a:	681b      	ldr	r3, [r3, #0]
 800fc8c:	7a1b      	ldrb	r3, [r3, #8]
 800fc8e:	2b00      	cmp	r3, #0
 800fc90:	d006      	beq.n	800fca0 <mem_malloc+0x144>
 800fc92:	4b23      	ldr	r3, [pc, #140]	; (800fd20 <mem_malloc+0x1c4>)
 800fc94:	f240 32b5 	movw	r2, #949	; 0x3b5
 800fc98:	4925      	ldr	r1, [pc, #148]	; (800fd30 <mem_malloc+0x1d4>)
 800fc9a:	4823      	ldr	r0, [pc, #140]	; (800fd28 <mem_malloc+0x1cc>)
 800fc9c:	f009 fee4 	bl	8019a68 <iprintf>
        }
        LWIP_MEM_ALLOC_UNPROTECT();
        sys_mutex_unlock(&mem_mutex);
        LWIP_ASSERT("mem_malloc: allocated memory not above ram_end.",
 800fca0:	693a      	ldr	r2, [r7, #16]
 800fca2:	69bb      	ldr	r3, [r7, #24]
 800fca4:	4413      	add	r3, r2
 800fca6:	330c      	adds	r3, #12
 800fca8:	4a20      	ldr	r2, [pc, #128]	; (800fd2c <mem_malloc+0x1d0>)
 800fcaa:	6812      	ldr	r2, [r2, #0]
 800fcac:	4293      	cmp	r3, r2
 800fcae:	d906      	bls.n	800fcbe <mem_malloc+0x162>
 800fcb0:	4b1b      	ldr	r3, [pc, #108]	; (800fd20 <mem_malloc+0x1c4>)
 800fcb2:	f240 32b9 	movw	r2, #953	; 0x3b9
 800fcb6:	491f      	ldr	r1, [pc, #124]	; (800fd34 <mem_malloc+0x1d8>)
 800fcb8:	481b      	ldr	r0, [pc, #108]	; (800fd28 <mem_malloc+0x1cc>)
 800fcba:	f009 fed5 	bl	8019a68 <iprintf>
                    (mem_ptr_t)mem + SIZEOF_STRUCT_MEM + size <= (mem_ptr_t)ram_end);
        LWIP_ASSERT("mem_malloc: allocated memory properly aligned.",
 800fcbe:	693b      	ldr	r3, [r7, #16]
 800fcc0:	f003 0303 	and.w	r3, r3, #3
 800fcc4:	2b00      	cmp	r3, #0
 800fcc6:	d006      	beq.n	800fcd6 <mem_malloc+0x17a>
 800fcc8:	4b15      	ldr	r3, [pc, #84]	; (800fd20 <mem_malloc+0x1c4>)
 800fcca:	f240 32bb 	movw	r2, #955	; 0x3bb
 800fcce:	491a      	ldr	r1, [pc, #104]	; (800fd38 <mem_malloc+0x1dc>)
 800fcd0:	4815      	ldr	r0, [pc, #84]	; (800fd28 <mem_malloc+0x1cc>)
 800fcd2:	f009 fec9 	bl	8019a68 <iprintf>
                    ((mem_ptr_t)mem + SIZEOF_STRUCT_MEM) % MEM_ALIGNMENT == 0);
        LWIP_ASSERT("mem_malloc: sanity check alignment",
 800fcd6:	693b      	ldr	r3, [r7, #16]
 800fcd8:	f003 0303 	and.w	r3, r3, #3
 800fcdc:	2b00      	cmp	r3, #0
 800fcde:	d006      	beq.n	800fcee <mem_malloc+0x192>
 800fce0:	4b0f      	ldr	r3, [pc, #60]	; (800fd20 <mem_malloc+0x1c4>)
 800fce2:	f240 32bd 	movw	r2, #957	; 0x3bd
 800fce6:	4915      	ldr	r1, [pc, #84]	; (800fd3c <mem_malloc+0x1e0>)
 800fce8:	480f      	ldr	r0, [pc, #60]	; (800fd28 <mem_malloc+0x1cc>)
 800fcea:	f009 febd 	bl	8019a68 <iprintf>

#if MEM_OVERFLOW_CHECK
        mem_overflow_init_element(mem, size_in);
#endif
        MEM_SANITY();
        return (u8_t *)mem + SIZEOF_STRUCT_MEM + MEM_SANITY_OFFSET;
 800fcee:	693b      	ldr	r3, [r7, #16]
 800fcf0:	330c      	adds	r3, #12
 800fcf2:	e00d      	b.n	800fd10 <mem_malloc+0x1b4>
         ptr = ptr_to_mem(ptr)->next) {
 800fcf4:	69f8      	ldr	r0, [r7, #28]
 800fcf6:	f7ff fc9b 	bl	800f630 <ptr_to_mem>
 800fcfa:	4603      	mov	r3, r0
 800fcfc:	681b      	ldr	r3, [r3, #0]
 800fcfe:	61fb      	str	r3, [r7, #28]
    for (ptr = mem_to_ptr(lfree); ptr < MEM_SIZE_ALIGNED - size;
 800fd00:	69ba      	ldr	r2, [r7, #24]
 800fd02:	4b05      	ldr	r3, [pc, #20]	; (800fd18 <mem_malloc+0x1bc>)
 800fd04:	1a9b      	subs	r3, r3, r2
 800fd06:	69fa      	ldr	r2, [r7, #28]
 800fd08:	429a      	cmp	r2, r3
 800fd0a:	f4ff af4b 	bcc.w	800fba4 <mem_malloc+0x48>
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
  MEM_STATS_INC(err);
  LWIP_MEM_ALLOC_UNPROTECT();
  sys_mutex_unlock(&mem_mutex);
  LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("mem_malloc: could not allocate %"S16_F" bytes\n", (s16_t)size));
  return NULL;
 800fd0e:	2300      	movs	r3, #0
}
 800fd10:	4618      	mov	r0, r3
 800fd12:	3720      	adds	r7, #32
 800fd14:	46bd      	mov	sp, r7
 800fd16:	bd80      	pop	{r7, pc}
 800fd18:	0001ffe8 	.word	0x0001ffe8
 800fd1c:	20000788 	.word	0x20000788
 800fd20:	0801c23c 	.word	0x0801c23c
 800fd24:	0801c3e4 	.word	0x0801c3e4
 800fd28:	0801c284 	.word	0x0801c284
 800fd2c:	20000784 	.word	0x20000784
 800fd30:	0801c3f8 	.word	0x0801c3f8
 800fd34:	0801c414 	.word	0x0801c414
 800fd38:	0801c444 	.word	0x0801c444
 800fd3c:	0801c474 	.word	0x0801c474

0800fd40 <memp_init_pool>:
 *
 * @param desc pool to initialize
 */
void
memp_init_pool(const struct memp_desc *desc)
{
 800fd40:	b480      	push	{r7}
 800fd42:	b085      	sub	sp, #20
 800fd44:	af00      	add	r7, sp, #0
 800fd46:	6078      	str	r0, [r7, #4]
  LWIP_UNUSED_ARG(desc);
#else
  int i;
  struct memp *memp;

  *desc->tab = NULL;
 800fd48:	687b      	ldr	r3, [r7, #4]
 800fd4a:	689b      	ldr	r3, [r3, #8]
 800fd4c:	2200      	movs	r2, #0
 800fd4e:	601a      	str	r2, [r3, #0]
  memp = (struct memp *)LWIP_MEM_ALIGN(desc->base);
 800fd50:	687b      	ldr	r3, [r7, #4]
 800fd52:	685b      	ldr	r3, [r3, #4]
 800fd54:	3303      	adds	r3, #3
 800fd56:	f023 0303 	bic.w	r3, r3, #3
 800fd5a:	60bb      	str	r3, [r7, #8]
                                       + MEM_SANITY_REGION_AFTER_ALIGNED
#endif
                                      ));
#endif
  /* create a linked list of memp elements */
  for (i = 0; i < desc->num; ++i) {
 800fd5c:	2300      	movs	r3, #0
 800fd5e:	60fb      	str	r3, [r7, #12]
 800fd60:	e011      	b.n	800fd86 <memp_init_pool+0x46>
    memp->next = *desc->tab;
 800fd62:	687b      	ldr	r3, [r7, #4]
 800fd64:	689b      	ldr	r3, [r3, #8]
 800fd66:	681a      	ldr	r2, [r3, #0]
 800fd68:	68bb      	ldr	r3, [r7, #8]
 800fd6a:	601a      	str	r2, [r3, #0]
    *desc->tab = memp;
 800fd6c:	687b      	ldr	r3, [r7, #4]
 800fd6e:	689b      	ldr	r3, [r3, #8]
 800fd70:	68ba      	ldr	r2, [r7, #8]
 800fd72:	601a      	str	r2, [r3, #0]
#if MEMP_OVERFLOW_CHECK
    memp_overflow_init_element(memp, desc);
#endif /* MEMP_OVERFLOW_CHECK */
    /* cast through void* to get rid of alignment warnings */
    memp = (struct memp *)(void *)((u8_t *)memp + MEMP_SIZE + desc->size
 800fd74:	687b      	ldr	r3, [r7, #4]
 800fd76:	881b      	ldrh	r3, [r3, #0]
 800fd78:	461a      	mov	r2, r3
 800fd7a:	68bb      	ldr	r3, [r7, #8]
 800fd7c:	4413      	add	r3, r2
 800fd7e:	60bb      	str	r3, [r7, #8]
  for (i = 0; i < desc->num; ++i) {
 800fd80:	68fb      	ldr	r3, [r7, #12]
 800fd82:	3301      	adds	r3, #1
 800fd84:	60fb      	str	r3, [r7, #12]
 800fd86:	687b      	ldr	r3, [r7, #4]
 800fd88:	885b      	ldrh	r3, [r3, #2]
 800fd8a:	461a      	mov	r2, r3
 800fd8c:	68fb      	ldr	r3, [r7, #12]
 800fd8e:	4293      	cmp	r3, r2
 800fd90:	dbe7      	blt.n	800fd62 <memp_init_pool+0x22>
#endif /* !MEMP_MEM_MALLOC */

#if MEMP_STATS && (defined(LWIP_DEBUG) || LWIP_STATS_DISPLAY)
  desc->stats->name  = desc->desc;
#endif /* MEMP_STATS && (defined(LWIP_DEBUG) || LWIP_STATS_DISPLAY) */
}
 800fd92:	bf00      	nop
 800fd94:	bf00      	nop
 800fd96:	3714      	adds	r7, #20
 800fd98:	46bd      	mov	sp, r7
 800fd9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fd9e:	4770      	bx	lr

0800fda0 <memp_init>:
 *
 * Carves out memp_memory into linked lists for each pool-type.
 */
void
memp_init(void)
{
 800fda0:	b580      	push	{r7, lr}
 800fda2:	b082      	sub	sp, #8
 800fda4:	af00      	add	r7, sp, #0
  u16_t i;

  /* for every pool: */
  for (i = 0; i < LWIP_ARRAYSIZE(memp_pools); i++) {
 800fda6:	2300      	movs	r3, #0
 800fda8:	80fb      	strh	r3, [r7, #6]
 800fdaa:	e009      	b.n	800fdc0 <memp_init+0x20>
    memp_init_pool(memp_pools[i]);
 800fdac:	88fb      	ldrh	r3, [r7, #6]
 800fdae:	4a08      	ldr	r2, [pc, #32]	; (800fdd0 <memp_init+0x30>)
 800fdb0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800fdb4:	4618      	mov	r0, r3
 800fdb6:	f7ff ffc3 	bl	800fd40 <memp_init_pool>
  for (i = 0; i < LWIP_ARRAYSIZE(memp_pools); i++) {
 800fdba:	88fb      	ldrh	r3, [r7, #6]
 800fdbc:	3301      	adds	r3, #1
 800fdbe:	80fb      	strh	r3, [r7, #6]
 800fdc0:	88fb      	ldrh	r3, [r7, #6]
 800fdc2:	2b08      	cmp	r3, #8
 800fdc4:	d9f2      	bls.n	800fdac <memp_init+0xc>

#if MEMP_OVERFLOW_CHECK >= 2
  /* check everything a first time to see if it worked */
  memp_overflow_check_all();
#endif /* MEMP_OVERFLOW_CHECK >= 2 */
}
 800fdc6:	bf00      	nop
 800fdc8:	bf00      	nop
 800fdca:	3708      	adds	r7, #8
 800fdcc:	46bd      	mov	sp, r7
 800fdce:	bd80      	pop	{r7, pc}
 800fdd0:	0801ec90 	.word	0x0801ec90

0800fdd4 <do_memp_malloc_pool>:
#if !MEMP_OVERFLOW_CHECK
do_memp_malloc_pool(const struct memp_desc *desc)
#else
do_memp_malloc_pool_fn(const struct memp_desc *desc, const char *file, const int line)
#endif
{
 800fdd4:	b580      	push	{r7, lr}
 800fdd6:	b084      	sub	sp, #16
 800fdd8:	af00      	add	r7, sp, #0
 800fdda:	6078      	str	r0, [r7, #4]
  memp = (struct memp *)mem_malloc(MEMP_SIZE + MEMP_ALIGN_SIZE(desc->size));
  SYS_ARCH_PROTECT(old_level);
#else /* MEMP_MEM_MALLOC */
  SYS_ARCH_PROTECT(old_level);

  memp = *desc->tab;
 800fddc:	687b      	ldr	r3, [r7, #4]
 800fdde:	689b      	ldr	r3, [r3, #8]
 800fde0:	681b      	ldr	r3, [r3, #0]
 800fde2:	60fb      	str	r3, [r7, #12]
#endif /* MEMP_MEM_MALLOC */

  if (memp != NULL) {
 800fde4:	68fb      	ldr	r3, [r7, #12]
 800fde6:	2b00      	cmp	r3, #0
 800fde8:	d012      	beq.n	800fe10 <do_memp_malloc_pool+0x3c>
#if !MEMP_MEM_MALLOC
#if MEMP_OVERFLOW_CHECK == 1
    memp_overflow_check_element(memp, desc);
#endif /* MEMP_OVERFLOW_CHECK */

    *desc->tab = memp->next;
 800fdea:	687b      	ldr	r3, [r7, #4]
 800fdec:	689b      	ldr	r3, [r3, #8]
 800fdee:	68fa      	ldr	r2, [r7, #12]
 800fdf0:	6812      	ldr	r2, [r2, #0]
 800fdf2:	601a      	str	r2, [r3, #0]
    memp->line = line;
#if MEMP_MEM_MALLOC
    memp_overflow_init_element(memp, desc);
#endif /* MEMP_MEM_MALLOC */
#endif /* MEMP_OVERFLOW_CHECK */
    LWIP_ASSERT("memp_malloc: memp properly aligned",
 800fdf4:	68fb      	ldr	r3, [r7, #12]
 800fdf6:	f003 0303 	and.w	r3, r3, #3
 800fdfa:	2b00      	cmp	r3, #0
 800fdfc:	d006      	beq.n	800fe0c <do_memp_malloc_pool+0x38>
 800fdfe:	4b07      	ldr	r3, [pc, #28]	; (800fe1c <do_memp_malloc_pool+0x48>)
 800fe00:	f44f 728c 	mov.w	r2, #280	; 0x118
 800fe04:	4906      	ldr	r1, [pc, #24]	; (800fe20 <do_memp_malloc_pool+0x4c>)
 800fe06:	4807      	ldr	r0, [pc, #28]	; (800fe24 <do_memp_malloc_pool+0x50>)
 800fe08:	f009 fe2e 	bl	8019a68 <iprintf>
      desc->stats->max = desc->stats->used;
    }
#endif
    SYS_ARCH_UNPROTECT(old_level);
    /* cast through u8_t* to get rid of alignment warnings */
    return ((u8_t *)memp + MEMP_SIZE);
 800fe0c:	68fb      	ldr	r3, [r7, #12]
 800fe0e:	e000      	b.n	800fe12 <do_memp_malloc_pool+0x3e>
#endif
    SYS_ARCH_UNPROTECT(old_level);
    LWIP_DEBUGF(MEMP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("memp_malloc: out of memory in pool %s\n", desc->desc));
  }

  return NULL;
 800fe10:	2300      	movs	r3, #0
}
 800fe12:	4618      	mov	r0, r3
 800fe14:	3710      	adds	r7, #16
 800fe16:	46bd      	mov	sp, r7
 800fe18:	bd80      	pop	{r7, pc}
 800fe1a:	bf00      	nop
 800fe1c:	0801c498 	.word	0x0801c498
 800fe20:	0801c4c8 	.word	0x0801c4c8
 800fe24:	0801c4ec 	.word	0x0801c4ec

0800fe28 <memp_malloc_pool>:
#if !MEMP_OVERFLOW_CHECK
memp_malloc_pool(const struct memp_desc *desc)
#else
memp_malloc_pool_fn(const struct memp_desc *desc, const char *file, const int line)
#endif
{
 800fe28:	b580      	push	{r7, lr}
 800fe2a:	b082      	sub	sp, #8
 800fe2c:	af00      	add	r7, sp, #0
 800fe2e:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("invalid pool desc", desc != NULL);
 800fe30:	687b      	ldr	r3, [r7, #4]
 800fe32:	2b00      	cmp	r3, #0
 800fe34:	d106      	bne.n	800fe44 <memp_malloc_pool+0x1c>
 800fe36:	4b0a      	ldr	r3, [pc, #40]	; (800fe60 <memp_malloc_pool+0x38>)
 800fe38:	f44f 729e 	mov.w	r2, #316	; 0x13c
 800fe3c:	4909      	ldr	r1, [pc, #36]	; (800fe64 <memp_malloc_pool+0x3c>)
 800fe3e:	480a      	ldr	r0, [pc, #40]	; (800fe68 <memp_malloc_pool+0x40>)
 800fe40:	f009 fe12 	bl	8019a68 <iprintf>
  if (desc == NULL) {
 800fe44:	687b      	ldr	r3, [r7, #4]
 800fe46:	2b00      	cmp	r3, #0
 800fe48:	d101      	bne.n	800fe4e <memp_malloc_pool+0x26>
    return NULL;
 800fe4a:	2300      	movs	r3, #0
 800fe4c:	e003      	b.n	800fe56 <memp_malloc_pool+0x2e>
  }

#if !MEMP_OVERFLOW_CHECK
  return do_memp_malloc_pool(desc);
 800fe4e:	6878      	ldr	r0, [r7, #4]
 800fe50:	f7ff ffc0 	bl	800fdd4 <do_memp_malloc_pool>
 800fe54:	4603      	mov	r3, r0
#else
  return do_memp_malloc_pool_fn(desc, file, line);
#endif
}
 800fe56:	4618      	mov	r0, r3
 800fe58:	3708      	adds	r7, #8
 800fe5a:	46bd      	mov	sp, r7
 800fe5c:	bd80      	pop	{r7, pc}
 800fe5e:	bf00      	nop
 800fe60:	0801c498 	.word	0x0801c498
 800fe64:	0801c514 	.word	0x0801c514
 800fe68:	0801c4ec 	.word	0x0801c4ec

0800fe6c <memp_malloc>:
#if !MEMP_OVERFLOW_CHECK
memp_malloc(memp_t type)
#else
memp_malloc_fn(memp_t type, const char *file, const int line)
#endif
{
 800fe6c:	b580      	push	{r7, lr}
 800fe6e:	b084      	sub	sp, #16
 800fe70:	af00      	add	r7, sp, #0
 800fe72:	4603      	mov	r3, r0
 800fe74:	71fb      	strb	r3, [r7, #7]
  void *memp;
  LWIP_ERROR("memp_malloc: type < MEMP_MAX", (type < MEMP_MAX), return NULL;);
 800fe76:	79fb      	ldrb	r3, [r7, #7]
 800fe78:	2b08      	cmp	r3, #8
 800fe7a:	d908      	bls.n	800fe8e <memp_malloc+0x22>
 800fe7c:	4b0a      	ldr	r3, [pc, #40]	; (800fea8 <memp_malloc+0x3c>)
 800fe7e:	f240 1257 	movw	r2, #343	; 0x157
 800fe82:	490a      	ldr	r1, [pc, #40]	; (800feac <memp_malloc+0x40>)
 800fe84:	480a      	ldr	r0, [pc, #40]	; (800feb0 <memp_malloc+0x44>)
 800fe86:	f009 fdef 	bl	8019a68 <iprintf>
 800fe8a:	2300      	movs	r3, #0
 800fe8c:	e008      	b.n	800fea0 <memp_malloc+0x34>
#if MEMP_OVERFLOW_CHECK >= 2
  memp_overflow_check_all();
#endif /* MEMP_OVERFLOW_CHECK >= 2 */

#if !MEMP_OVERFLOW_CHECK
  memp = do_memp_malloc_pool(memp_pools[type]);
 800fe8e:	79fb      	ldrb	r3, [r7, #7]
 800fe90:	4a08      	ldr	r2, [pc, #32]	; (800feb4 <memp_malloc+0x48>)
 800fe92:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800fe96:	4618      	mov	r0, r3
 800fe98:	f7ff ff9c 	bl	800fdd4 <do_memp_malloc_pool>
 800fe9c:	60f8      	str	r0, [r7, #12]
#else
  memp = do_memp_malloc_pool_fn(memp_pools[type], file, line);
#endif

  return memp;
 800fe9e:	68fb      	ldr	r3, [r7, #12]
}
 800fea0:	4618      	mov	r0, r3
 800fea2:	3710      	adds	r7, #16
 800fea4:	46bd      	mov	sp, r7
 800fea6:	bd80      	pop	{r7, pc}
 800fea8:	0801c498 	.word	0x0801c498
 800feac:	0801c528 	.word	0x0801c528
 800feb0:	0801c4ec 	.word	0x0801c4ec
 800feb4:	0801ec90 	.word	0x0801ec90

0800feb8 <do_memp_free_pool>:

static void
do_memp_free_pool(const struct memp_desc *desc, void *mem)
{
 800feb8:	b580      	push	{r7, lr}
 800feba:	b084      	sub	sp, #16
 800febc:	af00      	add	r7, sp, #0
 800febe:	6078      	str	r0, [r7, #4]
 800fec0:	6039      	str	r1, [r7, #0]
  struct memp *memp;
  SYS_ARCH_DECL_PROTECT(old_level);

  LWIP_ASSERT("memp_free: mem properly aligned",
 800fec2:	683b      	ldr	r3, [r7, #0]
 800fec4:	f003 0303 	and.w	r3, r3, #3
 800fec8:	2b00      	cmp	r3, #0
 800feca:	d006      	beq.n	800feda <do_memp_free_pool+0x22>
 800fecc:	4b0a      	ldr	r3, [pc, #40]	; (800fef8 <do_memp_free_pool+0x40>)
 800fece:	f44f 72b6 	mov.w	r2, #364	; 0x16c
 800fed2:	490a      	ldr	r1, [pc, #40]	; (800fefc <do_memp_free_pool+0x44>)
 800fed4:	480a      	ldr	r0, [pc, #40]	; (800ff00 <do_memp_free_pool+0x48>)
 800fed6:	f009 fdc7 	bl	8019a68 <iprintf>
              ((mem_ptr_t)mem % MEM_ALIGNMENT) == 0);

  /* cast through void* to get rid of alignment warnings */
  memp = (struct memp *)(void *)((u8_t *)mem - MEMP_SIZE);
 800feda:	683b      	ldr	r3, [r7, #0]
 800fedc:	60fb      	str	r3, [r7, #12]
#if MEMP_MEM_MALLOC
  LWIP_UNUSED_ARG(desc);
  SYS_ARCH_UNPROTECT(old_level);
  mem_free(memp);
#else /* MEMP_MEM_MALLOC */
  memp->next = *desc->tab;
 800fede:	687b      	ldr	r3, [r7, #4]
 800fee0:	689b      	ldr	r3, [r3, #8]
 800fee2:	681a      	ldr	r2, [r3, #0]
 800fee4:	68fb      	ldr	r3, [r7, #12]
 800fee6:	601a      	str	r2, [r3, #0]
  *desc->tab = memp;
 800fee8:	687b      	ldr	r3, [r7, #4]
 800feea:	689b      	ldr	r3, [r3, #8]
 800feec:	68fa      	ldr	r2, [r7, #12]
 800feee:	601a      	str	r2, [r3, #0]
  LWIP_ASSERT("memp sanity", memp_sanity(desc));
#endif /* MEMP_SANITY_CHECK */

  SYS_ARCH_UNPROTECT(old_level);
#endif /* !MEMP_MEM_MALLOC */
}
 800fef0:	bf00      	nop
 800fef2:	3710      	adds	r7, #16
 800fef4:	46bd      	mov	sp, r7
 800fef6:	bd80      	pop	{r7, pc}
 800fef8:	0801c498 	.word	0x0801c498
 800fefc:	0801c548 	.word	0x0801c548
 800ff00:	0801c4ec 	.word	0x0801c4ec

0800ff04 <memp_free_pool>:
 * @param desc the pool where to put mem
 * @param mem the memp element to free
 */
void
memp_free_pool(const struct memp_desc *desc, void *mem)
{
 800ff04:	b580      	push	{r7, lr}
 800ff06:	b082      	sub	sp, #8
 800ff08:	af00      	add	r7, sp, #0
 800ff0a:	6078      	str	r0, [r7, #4]
 800ff0c:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT("invalid pool desc", desc != NULL);
 800ff0e:	687b      	ldr	r3, [r7, #4]
 800ff10:	2b00      	cmp	r3, #0
 800ff12:	d106      	bne.n	800ff22 <memp_free_pool+0x1e>
 800ff14:	4b0a      	ldr	r3, [pc, #40]	; (800ff40 <memp_free_pool+0x3c>)
 800ff16:	f240 1295 	movw	r2, #405	; 0x195
 800ff1a:	490a      	ldr	r1, [pc, #40]	; (800ff44 <memp_free_pool+0x40>)
 800ff1c:	480a      	ldr	r0, [pc, #40]	; (800ff48 <memp_free_pool+0x44>)
 800ff1e:	f009 fda3 	bl	8019a68 <iprintf>
  if ((desc == NULL) || (mem == NULL)) {
 800ff22:	687b      	ldr	r3, [r7, #4]
 800ff24:	2b00      	cmp	r3, #0
 800ff26:	d007      	beq.n	800ff38 <memp_free_pool+0x34>
 800ff28:	683b      	ldr	r3, [r7, #0]
 800ff2a:	2b00      	cmp	r3, #0
 800ff2c:	d004      	beq.n	800ff38 <memp_free_pool+0x34>
    return;
  }

  do_memp_free_pool(desc, mem);
 800ff2e:	6839      	ldr	r1, [r7, #0]
 800ff30:	6878      	ldr	r0, [r7, #4]
 800ff32:	f7ff ffc1 	bl	800feb8 <do_memp_free_pool>
 800ff36:	e000      	b.n	800ff3a <memp_free_pool+0x36>
    return;
 800ff38:	bf00      	nop
}
 800ff3a:	3708      	adds	r7, #8
 800ff3c:	46bd      	mov	sp, r7
 800ff3e:	bd80      	pop	{r7, pc}
 800ff40:	0801c498 	.word	0x0801c498
 800ff44:	0801c514 	.word	0x0801c514
 800ff48:	0801c4ec 	.word	0x0801c4ec

0800ff4c <memp_free>:
 * @param type the pool where to put mem
 * @param mem the memp element to free
 */
void
memp_free(memp_t type, void *mem)
{
 800ff4c:	b580      	push	{r7, lr}
 800ff4e:	b082      	sub	sp, #8
 800ff50:	af00      	add	r7, sp, #0
 800ff52:	4603      	mov	r3, r0
 800ff54:	6039      	str	r1, [r7, #0]
 800ff56:	71fb      	strb	r3, [r7, #7]
#ifdef LWIP_HOOK_MEMP_AVAILABLE
  struct memp *old_first;
#endif

  LWIP_ERROR("memp_free: type < MEMP_MAX", (type < MEMP_MAX), return;);
 800ff58:	79fb      	ldrb	r3, [r7, #7]
 800ff5a:	2b08      	cmp	r3, #8
 800ff5c:	d907      	bls.n	800ff6e <memp_free+0x22>
 800ff5e:	4b0c      	ldr	r3, [pc, #48]	; (800ff90 <memp_free+0x44>)
 800ff60:	f44f 72d5 	mov.w	r2, #426	; 0x1aa
 800ff64:	490b      	ldr	r1, [pc, #44]	; (800ff94 <memp_free+0x48>)
 800ff66:	480c      	ldr	r0, [pc, #48]	; (800ff98 <memp_free+0x4c>)
 800ff68:	f009 fd7e 	bl	8019a68 <iprintf>
 800ff6c:	e00c      	b.n	800ff88 <memp_free+0x3c>

  if (mem == NULL) {
 800ff6e:	683b      	ldr	r3, [r7, #0]
 800ff70:	2b00      	cmp	r3, #0
 800ff72:	d008      	beq.n	800ff86 <memp_free+0x3a>

#ifdef LWIP_HOOK_MEMP_AVAILABLE
  old_first = *memp_pools[type]->tab;
#endif

  do_memp_free_pool(memp_pools[type], mem);
 800ff74:	79fb      	ldrb	r3, [r7, #7]
 800ff76:	4a09      	ldr	r2, [pc, #36]	; (800ff9c <memp_free+0x50>)
 800ff78:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800ff7c:	6839      	ldr	r1, [r7, #0]
 800ff7e:	4618      	mov	r0, r3
 800ff80:	f7ff ff9a 	bl	800feb8 <do_memp_free_pool>
 800ff84:	e000      	b.n	800ff88 <memp_free+0x3c>
    return;
 800ff86:	bf00      	nop
#ifdef LWIP_HOOK_MEMP_AVAILABLE
  if (old_first == NULL) {
    LWIP_HOOK_MEMP_AVAILABLE(type);
  }
#endif
}
 800ff88:	3708      	adds	r7, #8
 800ff8a:	46bd      	mov	sp, r7
 800ff8c:	bd80      	pop	{r7, pc}
 800ff8e:	bf00      	nop
 800ff90:	0801c498 	.word	0x0801c498
 800ff94:	0801c568 	.word	0x0801c568
 800ff98:	0801c4ec 	.word	0x0801c4ec
 800ff9c:	0801ec90 	.word	0x0801ec90

0800ffa0 <netif_init>:
}
#endif /* LWIP_HAVE_LOOPIF */

void
netif_init(void)
{
 800ffa0:	b480      	push	{r7}
 800ffa2:	af00      	add	r7, sp, #0

  netif_set_link_up(&loop_netif);
  netif_set_up(&loop_netif);

#endif /* LWIP_HAVE_LOOPIF */
}
 800ffa4:	bf00      	nop
 800ffa6:	46bd      	mov	sp, r7
 800ffa8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ffac:	4770      	bx	lr
	...

0800ffb0 <netif_add>:
netif_add(struct netif *netif,
#if LWIP_IPV4
          const ip4_addr_t *ipaddr, const ip4_addr_t *netmask, const ip4_addr_t *gw,
#endif /* LWIP_IPV4 */
          void *state, netif_init_fn init, netif_input_fn input)
{
 800ffb0:	b580      	push	{r7, lr}
 800ffb2:	b086      	sub	sp, #24
 800ffb4:	af00      	add	r7, sp, #0
 800ffb6:	60f8      	str	r0, [r7, #12]
 800ffb8:	60b9      	str	r1, [r7, #8]
 800ffba:	607a      	str	r2, [r7, #4]
 800ffbc:	603b      	str	r3, [r7, #0]
    LWIP_ASSERT("single netif already set", 0);
    return NULL;
  }
#endif

  LWIP_ERROR("netif_add: invalid netif", netif != NULL, return NULL);
 800ffbe:	68fb      	ldr	r3, [r7, #12]
 800ffc0:	2b00      	cmp	r3, #0
 800ffc2:	d108      	bne.n	800ffd6 <netif_add+0x26>
 800ffc4:	4b57      	ldr	r3, [pc, #348]	; (8010124 <netif_add+0x174>)
 800ffc6:	f240 1227 	movw	r2, #295	; 0x127
 800ffca:	4957      	ldr	r1, [pc, #348]	; (8010128 <netif_add+0x178>)
 800ffcc:	4857      	ldr	r0, [pc, #348]	; (801012c <netif_add+0x17c>)
 800ffce:	f009 fd4b 	bl	8019a68 <iprintf>
 800ffd2:	2300      	movs	r3, #0
 800ffd4:	e0a2      	b.n	801011c <netif_add+0x16c>
  LWIP_ERROR("netif_add: No init function given", init != NULL, return NULL);
 800ffd6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ffd8:	2b00      	cmp	r3, #0
 800ffda:	d108      	bne.n	800ffee <netif_add+0x3e>
 800ffdc:	4b51      	ldr	r3, [pc, #324]	; (8010124 <netif_add+0x174>)
 800ffde:	f44f 7294 	mov.w	r2, #296	; 0x128
 800ffe2:	4953      	ldr	r1, [pc, #332]	; (8010130 <netif_add+0x180>)
 800ffe4:	4851      	ldr	r0, [pc, #324]	; (801012c <netif_add+0x17c>)
 800ffe6:	f009 fd3f 	bl	8019a68 <iprintf>
 800ffea:	2300      	movs	r3, #0
 800ffec:	e096      	b.n	801011c <netif_add+0x16c>

#if LWIP_IPV4
  if (ipaddr == NULL) {
 800ffee:	68bb      	ldr	r3, [r7, #8]
 800fff0:	2b00      	cmp	r3, #0
 800fff2:	d101      	bne.n	800fff8 <netif_add+0x48>
    ipaddr = ip_2_ip4(IP4_ADDR_ANY);
 800fff4:	4b4f      	ldr	r3, [pc, #316]	; (8010134 <netif_add+0x184>)
 800fff6:	60bb      	str	r3, [r7, #8]
  }
  if (netmask == NULL) {
 800fff8:	687b      	ldr	r3, [r7, #4]
 800fffa:	2b00      	cmp	r3, #0
 800fffc:	d101      	bne.n	8010002 <netif_add+0x52>
    netmask = ip_2_ip4(IP4_ADDR_ANY);
 800fffe:	4b4d      	ldr	r3, [pc, #308]	; (8010134 <netif_add+0x184>)
 8010000:	607b      	str	r3, [r7, #4]
  }
  if (gw == NULL) {
 8010002:	683b      	ldr	r3, [r7, #0]
 8010004:	2b00      	cmp	r3, #0
 8010006:	d101      	bne.n	801000c <netif_add+0x5c>
    gw = ip_2_ip4(IP4_ADDR_ANY);
 8010008:	4b4a      	ldr	r3, [pc, #296]	; (8010134 <netif_add+0x184>)
 801000a:	603b      	str	r3, [r7, #0]
  }

  /* reset new interface configuration state */
  ip_addr_set_zero_ip4(&netif->ip_addr);
 801000c:	68fb      	ldr	r3, [r7, #12]
 801000e:	2200      	movs	r2, #0
 8010010:	605a      	str	r2, [r3, #4]
  ip_addr_set_zero_ip4(&netif->netmask);
 8010012:	68fb      	ldr	r3, [r7, #12]
 8010014:	2200      	movs	r2, #0
 8010016:	609a      	str	r2, [r3, #8]
  ip_addr_set_zero_ip4(&netif->gw);
 8010018:	68fb      	ldr	r3, [r7, #12]
 801001a:	2200      	movs	r2, #0
 801001c:	60da      	str	r2, [r3, #12]
  netif->output = netif_null_output_ip4;
 801001e:	68fb      	ldr	r3, [r7, #12]
 8010020:	4a45      	ldr	r2, [pc, #276]	; (8010138 <netif_add+0x188>)
 8010022:	615a      	str	r2, [r3, #20]
#endif /* LWIP_IPV6_ADDRESS_LIFETIMES */
  }
  netif->output_ip6 = netif_null_output_ip6;
#endif /* LWIP_IPV6 */
  NETIF_SET_CHECKSUM_CTRL(netif, NETIF_CHECKSUM_ENABLE_ALL);
  netif->mtu = 0;
 8010024:	68fb      	ldr	r3, [r7, #12]
 8010026:	2200      	movs	r2, #0
 8010028:	849a      	strh	r2, [r3, #36]	; 0x24
  netif->flags = 0;
 801002a:	68fb      	ldr	r3, [r7, #12]
 801002c:	2200      	movs	r2, #0
 801002e:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
#endif /* LWIP_IPV6 */
#if LWIP_NETIF_STATUS_CALLBACK
  netif->status_callback = NULL;
#endif /* LWIP_NETIF_STATUS_CALLBACK */
#if LWIP_NETIF_LINK_CALLBACK
  netif->link_callback = NULL;
 8010032:	68fb      	ldr	r3, [r7, #12]
 8010034:	2200      	movs	r2, #0
 8010036:	61da      	str	r2, [r3, #28]
  netif->loop_first = NULL;
  netif->loop_last = NULL;
#endif /* ENABLE_LOOPBACK */

  /* remember netif specific state information data */
  netif->state = state;
 8010038:	68fb      	ldr	r3, [r7, #12]
 801003a:	6a3a      	ldr	r2, [r7, #32]
 801003c:	621a      	str	r2, [r3, #32]
  netif->num = netif_num;
 801003e:	4b3f      	ldr	r3, [pc, #252]	; (801013c <netif_add+0x18c>)
 8010040:	781a      	ldrb	r2, [r3, #0]
 8010042:	68fb      	ldr	r3, [r7, #12]
 8010044:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  netif->input = input;
 8010048:	68fb      	ldr	r3, [r7, #12]
 801004a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 801004c:	611a      	str	r2, [r3, #16]
#if ENABLE_LOOPBACK && LWIP_LOOPBACK_MAX_PBUFS
  netif->loop_cnt_current = 0;
#endif /* ENABLE_LOOPBACK && LWIP_LOOPBACK_MAX_PBUFS */

#if LWIP_IPV4
  netif_set_addr(netif, ipaddr, netmask, gw);
 801004e:	683b      	ldr	r3, [r7, #0]
 8010050:	687a      	ldr	r2, [r7, #4]
 8010052:	68b9      	ldr	r1, [r7, #8]
 8010054:	68f8      	ldr	r0, [r7, #12]
 8010056:	f000 f913 	bl	8010280 <netif_set_addr>
#endif /* LWIP_IPV4 */

  /* call user specified initialization function for netif */
  if (init(netif) != ERR_OK) {
 801005a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801005c:	68f8      	ldr	r0, [r7, #12]
 801005e:	4798      	blx	r3
 8010060:	4603      	mov	r3, r0
 8010062:	2b00      	cmp	r3, #0
 8010064:	d001      	beq.n	801006a <netif_add+0xba>
    return NULL;
 8010066:	2300      	movs	r3, #0
 8010068:	e058      	b.n	801011c <netif_add+0x16c>
     */
  {
    struct netif *netif2;
    int num_netifs;
    do {
      if (netif->num == 255) {
 801006a:	68fb      	ldr	r3, [r7, #12]
 801006c:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8010070:	2bff      	cmp	r3, #255	; 0xff
 8010072:	d103      	bne.n	801007c <netif_add+0xcc>
        netif->num = 0;
 8010074:	68fb      	ldr	r3, [r7, #12]
 8010076:	2200      	movs	r2, #0
 8010078:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
      }
      num_netifs = 0;
 801007c:	2300      	movs	r3, #0
 801007e:	613b      	str	r3, [r7, #16]
      for (netif2 = netif_list; netif2 != NULL; netif2 = netif2->next) {
 8010080:	4b2f      	ldr	r3, [pc, #188]	; (8010140 <netif_add+0x190>)
 8010082:	681b      	ldr	r3, [r3, #0]
 8010084:	617b      	str	r3, [r7, #20]
 8010086:	e02b      	b.n	80100e0 <netif_add+0x130>
        LWIP_ASSERT("netif already added", netif2 != netif);
 8010088:	697a      	ldr	r2, [r7, #20]
 801008a:	68fb      	ldr	r3, [r7, #12]
 801008c:	429a      	cmp	r2, r3
 801008e:	d106      	bne.n	801009e <netif_add+0xee>
 8010090:	4b24      	ldr	r3, [pc, #144]	; (8010124 <netif_add+0x174>)
 8010092:	f240 128b 	movw	r2, #395	; 0x18b
 8010096:	492b      	ldr	r1, [pc, #172]	; (8010144 <netif_add+0x194>)
 8010098:	4824      	ldr	r0, [pc, #144]	; (801012c <netif_add+0x17c>)
 801009a:	f009 fce5 	bl	8019a68 <iprintf>
        num_netifs++;
 801009e:	693b      	ldr	r3, [r7, #16]
 80100a0:	3301      	adds	r3, #1
 80100a2:	613b      	str	r3, [r7, #16]
        LWIP_ASSERT("too many netifs, max. supported number is 255", num_netifs <= 255);
 80100a4:	693b      	ldr	r3, [r7, #16]
 80100a6:	2bff      	cmp	r3, #255	; 0xff
 80100a8:	dd06      	ble.n	80100b8 <netif_add+0x108>
 80100aa:	4b1e      	ldr	r3, [pc, #120]	; (8010124 <netif_add+0x174>)
 80100ac:	f240 128d 	movw	r2, #397	; 0x18d
 80100b0:	4925      	ldr	r1, [pc, #148]	; (8010148 <netif_add+0x198>)
 80100b2:	481e      	ldr	r0, [pc, #120]	; (801012c <netif_add+0x17c>)
 80100b4:	f009 fcd8 	bl	8019a68 <iprintf>
        if (netif2->num == netif->num) {
 80100b8:	697b      	ldr	r3, [r7, #20]
 80100ba:	f893 2030 	ldrb.w	r2, [r3, #48]	; 0x30
 80100be:	68fb      	ldr	r3, [r7, #12]
 80100c0:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 80100c4:	429a      	cmp	r2, r3
 80100c6:	d108      	bne.n	80100da <netif_add+0x12a>
          netif->num++;
 80100c8:	68fb      	ldr	r3, [r7, #12]
 80100ca:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 80100ce:	3301      	adds	r3, #1
 80100d0:	b2da      	uxtb	r2, r3
 80100d2:	68fb      	ldr	r3, [r7, #12]
 80100d4:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
          break;
 80100d8:	e005      	b.n	80100e6 <netif_add+0x136>
      for (netif2 = netif_list; netif2 != NULL; netif2 = netif2->next) {
 80100da:	697b      	ldr	r3, [r7, #20]
 80100dc:	681b      	ldr	r3, [r3, #0]
 80100de:	617b      	str	r3, [r7, #20]
 80100e0:	697b      	ldr	r3, [r7, #20]
 80100e2:	2b00      	cmp	r3, #0
 80100e4:	d1d0      	bne.n	8010088 <netif_add+0xd8>
        }
      }
    } while (netif2 != NULL);
 80100e6:	697b      	ldr	r3, [r7, #20]
 80100e8:	2b00      	cmp	r3, #0
 80100ea:	d1be      	bne.n	801006a <netif_add+0xba>
  }
  if (netif->num == 254) {
 80100ec:	68fb      	ldr	r3, [r7, #12]
 80100ee:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 80100f2:	2bfe      	cmp	r3, #254	; 0xfe
 80100f4:	d103      	bne.n	80100fe <netif_add+0x14e>
    netif_num = 0;
 80100f6:	4b11      	ldr	r3, [pc, #68]	; (801013c <netif_add+0x18c>)
 80100f8:	2200      	movs	r2, #0
 80100fa:	701a      	strb	r2, [r3, #0]
 80100fc:	e006      	b.n	801010c <netif_add+0x15c>
  } else {
    netif_num = (u8_t)(netif->num + 1);
 80100fe:	68fb      	ldr	r3, [r7, #12]
 8010100:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8010104:	3301      	adds	r3, #1
 8010106:	b2da      	uxtb	r2, r3
 8010108:	4b0c      	ldr	r3, [pc, #48]	; (801013c <netif_add+0x18c>)
 801010a:	701a      	strb	r2, [r3, #0]
  }

  /* add this netif to the list */
  netif->next = netif_list;
 801010c:	4b0c      	ldr	r3, [pc, #48]	; (8010140 <netif_add+0x190>)
 801010e:	681a      	ldr	r2, [r3, #0]
 8010110:	68fb      	ldr	r3, [r7, #12]
 8010112:	601a      	str	r2, [r3, #0]
  netif_list = netif;
 8010114:	4a0a      	ldr	r2, [pc, #40]	; (8010140 <netif_add+0x190>)
 8010116:	68fb      	ldr	r3, [r7, #12]
 8010118:	6013      	str	r3, [r2, #0]
#endif /* LWIP_IPV4 */
  LWIP_DEBUGF(NETIF_DEBUG, ("\n"));

  netif_invoke_ext_callback(netif, LWIP_NSC_NETIF_ADDED, NULL);

  return netif;
 801011a:	68fb      	ldr	r3, [r7, #12]
}
 801011c:	4618      	mov	r0, r3
 801011e:	3718      	adds	r7, #24
 8010120:	46bd      	mov	sp, r7
 8010122:	bd80      	pop	{r7, pc}
 8010124:	0801c584 	.word	0x0801c584
 8010128:	0801c618 	.word	0x0801c618
 801012c:	0801c5d4 	.word	0x0801c5d4
 8010130:	0801c634 	.word	0x0801c634
 8010134:	0801ecf4 	.word	0x0801ecf4
 8010138:	0801055b 	.word	0x0801055b
 801013c:	20007040 	.word	0x20007040
 8010140:	20007038 	.word	0x20007038
 8010144:	0801c658 	.word	0x0801c658
 8010148:	0801c66c 	.word	0x0801c66c

0801014c <netif_do_ip_addr_changed>:

static void
netif_do_ip_addr_changed(const ip_addr_t *old_addr, const ip_addr_t *new_addr)
{
 801014c:	b580      	push	{r7, lr}
 801014e:	b082      	sub	sp, #8
 8010150:	af00      	add	r7, sp, #0
 8010152:	6078      	str	r0, [r7, #4]
 8010154:	6039      	str	r1, [r7, #0]
#if LWIP_TCP
  tcp_netif_ip_addr_changed(old_addr, new_addr);
 8010156:	6839      	ldr	r1, [r7, #0]
 8010158:	6878      	ldr	r0, [r7, #4]
 801015a:	f002 fb47 	bl	80127ec <tcp_netif_ip_addr_changed>
#endif /* LWIP_TCP */
#if LWIP_UDP
  udp_netif_ip_addr_changed(old_addr, new_addr);
 801015e:	6839      	ldr	r1, [r7, #0]
 8010160:	6878      	ldr	r0, [r7, #4]
 8010162:	f006 fc2b 	bl	80169bc <udp_netif_ip_addr_changed>
#endif /* LWIP_UDP */
#if LWIP_RAW
  raw_netif_ip_addr_changed(old_addr, new_addr);
#endif /* LWIP_RAW */
}
 8010166:	bf00      	nop
 8010168:	3708      	adds	r7, #8
 801016a:	46bd      	mov	sp, r7
 801016c:	bd80      	pop	{r7, pc}
	...

08010170 <netif_do_set_ipaddr>:

#if LWIP_IPV4
static int
netif_do_set_ipaddr(struct netif *netif, const ip4_addr_t *ipaddr, ip_addr_t *old_addr)
{
 8010170:	b580      	push	{r7, lr}
 8010172:	b086      	sub	sp, #24
 8010174:	af00      	add	r7, sp, #0
 8010176:	60f8      	str	r0, [r7, #12]
 8010178:	60b9      	str	r1, [r7, #8]
 801017a:	607a      	str	r2, [r7, #4]
  LWIP_ASSERT("invalid pointer", ipaddr != NULL);
 801017c:	68bb      	ldr	r3, [r7, #8]
 801017e:	2b00      	cmp	r3, #0
 8010180:	d106      	bne.n	8010190 <netif_do_set_ipaddr+0x20>
 8010182:	4b1d      	ldr	r3, [pc, #116]	; (80101f8 <netif_do_set_ipaddr+0x88>)
 8010184:	f240 12cb 	movw	r2, #459	; 0x1cb
 8010188:	491c      	ldr	r1, [pc, #112]	; (80101fc <netif_do_set_ipaddr+0x8c>)
 801018a:	481d      	ldr	r0, [pc, #116]	; (8010200 <netif_do_set_ipaddr+0x90>)
 801018c:	f009 fc6c 	bl	8019a68 <iprintf>
  LWIP_ASSERT("invalid pointer", old_addr != NULL);
 8010190:	687b      	ldr	r3, [r7, #4]
 8010192:	2b00      	cmp	r3, #0
 8010194:	d106      	bne.n	80101a4 <netif_do_set_ipaddr+0x34>
 8010196:	4b18      	ldr	r3, [pc, #96]	; (80101f8 <netif_do_set_ipaddr+0x88>)
 8010198:	f44f 72e6 	mov.w	r2, #460	; 0x1cc
 801019c:	4917      	ldr	r1, [pc, #92]	; (80101fc <netif_do_set_ipaddr+0x8c>)
 801019e:	4818      	ldr	r0, [pc, #96]	; (8010200 <netif_do_set_ipaddr+0x90>)
 80101a0:	f009 fc62 	bl	8019a68 <iprintf>

  /* address is actually being changed? */
  if (ip4_addr_cmp(ipaddr, netif_ip4_addr(netif)) == 0) {
 80101a4:	68bb      	ldr	r3, [r7, #8]
 80101a6:	681a      	ldr	r2, [r3, #0]
 80101a8:	68fb      	ldr	r3, [r7, #12]
 80101aa:	3304      	adds	r3, #4
 80101ac:	681b      	ldr	r3, [r3, #0]
 80101ae:	429a      	cmp	r2, r3
 80101b0:	d01c      	beq.n	80101ec <netif_do_set_ipaddr+0x7c>
    ip_addr_t new_addr;
    *ip_2_ip4(&new_addr) = *ipaddr;
 80101b2:	68bb      	ldr	r3, [r7, #8]
 80101b4:	681b      	ldr	r3, [r3, #0]
 80101b6:	617b      	str	r3, [r7, #20]
    IP_SET_TYPE_VAL(new_addr, IPADDR_TYPE_V4);

    ip_addr_copy(*old_addr, *netif_ip_addr4(netif));
 80101b8:	68fb      	ldr	r3, [r7, #12]
 80101ba:	3304      	adds	r3, #4
 80101bc:	681a      	ldr	r2, [r3, #0]
 80101be:	687b      	ldr	r3, [r7, #4]
 80101c0:	601a      	str	r2, [r3, #0]

    LWIP_DEBUGF(NETIF_DEBUG | LWIP_DBG_STATE, ("netif_set_ipaddr: netif address being changed\n"));
    netif_do_ip_addr_changed(old_addr, &new_addr);
 80101c2:	f107 0314 	add.w	r3, r7, #20
 80101c6:	4619      	mov	r1, r3
 80101c8:	6878      	ldr	r0, [r7, #4]
 80101ca:	f7ff ffbf 	bl	801014c <netif_do_ip_addr_changed>

    mib2_remove_ip4(netif);
    mib2_remove_route_ip4(0, netif);
    /* set new IP address to netif */
    ip4_addr_set(ip_2_ip4(&netif->ip_addr), ipaddr);
 80101ce:	68bb      	ldr	r3, [r7, #8]
 80101d0:	2b00      	cmp	r3, #0
 80101d2:	d002      	beq.n	80101da <netif_do_set_ipaddr+0x6a>
 80101d4:	68bb      	ldr	r3, [r7, #8]
 80101d6:	681b      	ldr	r3, [r3, #0]
 80101d8:	e000      	b.n	80101dc <netif_do_set_ipaddr+0x6c>
 80101da:	2300      	movs	r3, #0
 80101dc:	68fa      	ldr	r2, [r7, #12]
 80101de:	6053      	str	r3, [r2, #4]
    IP_SET_TYPE_VAL(netif->ip_addr, IPADDR_TYPE_V4);
    mib2_add_ip4(netif);
    mib2_add_route_ip4(0, netif);

    netif_issue_reports(netif, NETIF_REPORT_TYPE_IPV4);
 80101e0:	2101      	movs	r1, #1
 80101e2:	68f8      	ldr	r0, [r7, #12]
 80101e4:	f000 f8d2 	bl	801038c <netif_issue_reports>

    NETIF_STATUS_CALLBACK(netif);
    return 1; /* address changed */
 80101e8:	2301      	movs	r3, #1
 80101ea:	e000      	b.n	80101ee <netif_do_set_ipaddr+0x7e>
  }
  return 0; /* address unchanged */
 80101ec:	2300      	movs	r3, #0
}
 80101ee:	4618      	mov	r0, r3
 80101f0:	3718      	adds	r7, #24
 80101f2:	46bd      	mov	sp, r7
 80101f4:	bd80      	pop	{r7, pc}
 80101f6:	bf00      	nop
 80101f8:	0801c584 	.word	0x0801c584
 80101fc:	0801c69c 	.word	0x0801c69c
 8010200:	0801c5d4 	.word	0x0801c5d4

08010204 <netif_do_set_netmask>:
  }
}

static int
netif_do_set_netmask(struct netif *netif, const ip4_addr_t *netmask, ip_addr_t *old_nm)
{
 8010204:	b480      	push	{r7}
 8010206:	b085      	sub	sp, #20
 8010208:	af00      	add	r7, sp, #0
 801020a:	60f8      	str	r0, [r7, #12]
 801020c:	60b9      	str	r1, [r7, #8]
 801020e:	607a      	str	r2, [r7, #4]
  /* address is actually being changed? */
  if (ip4_addr_cmp(netmask, netif_ip4_netmask(netif)) == 0) {
 8010210:	68bb      	ldr	r3, [r7, #8]
 8010212:	681a      	ldr	r2, [r3, #0]
 8010214:	68fb      	ldr	r3, [r7, #12]
 8010216:	3308      	adds	r3, #8
 8010218:	681b      	ldr	r3, [r3, #0]
 801021a:	429a      	cmp	r2, r3
 801021c:	d00a      	beq.n	8010234 <netif_do_set_netmask+0x30>
#else
    LWIP_UNUSED_ARG(old_nm);
#endif
    mib2_remove_route_ip4(0, netif);
    /* set new netmask to netif */
    ip4_addr_set(ip_2_ip4(&netif->netmask), netmask);
 801021e:	68bb      	ldr	r3, [r7, #8]
 8010220:	2b00      	cmp	r3, #0
 8010222:	d002      	beq.n	801022a <netif_do_set_netmask+0x26>
 8010224:	68bb      	ldr	r3, [r7, #8]
 8010226:	681b      	ldr	r3, [r3, #0]
 8010228:	e000      	b.n	801022c <netif_do_set_netmask+0x28>
 801022a:	2300      	movs	r3, #0
 801022c:	68fa      	ldr	r2, [r7, #12]
 801022e:	6093      	str	r3, [r2, #8]
                netif->name[0], netif->name[1],
                ip4_addr1_16(netif_ip4_netmask(netif)),
                ip4_addr2_16(netif_ip4_netmask(netif)),
                ip4_addr3_16(netif_ip4_netmask(netif)),
                ip4_addr4_16(netif_ip4_netmask(netif))));
    return 1; /* netmask changed */
 8010230:	2301      	movs	r3, #1
 8010232:	e000      	b.n	8010236 <netif_do_set_netmask+0x32>
  }
  return 0; /* netmask unchanged */
 8010234:	2300      	movs	r3, #0
}
 8010236:	4618      	mov	r0, r3
 8010238:	3714      	adds	r7, #20
 801023a:	46bd      	mov	sp, r7
 801023c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010240:	4770      	bx	lr

08010242 <netif_do_set_gw>:
  }
}

static int
netif_do_set_gw(struct netif *netif, const ip4_addr_t *gw, ip_addr_t *old_gw)
{
 8010242:	b480      	push	{r7}
 8010244:	b085      	sub	sp, #20
 8010246:	af00      	add	r7, sp, #0
 8010248:	60f8      	str	r0, [r7, #12]
 801024a:	60b9      	str	r1, [r7, #8]
 801024c:	607a      	str	r2, [r7, #4]
  /* address is actually being changed? */
  if (ip4_addr_cmp(gw, netif_ip4_gw(netif)) == 0) {
 801024e:	68bb      	ldr	r3, [r7, #8]
 8010250:	681a      	ldr	r2, [r3, #0]
 8010252:	68fb      	ldr	r3, [r7, #12]
 8010254:	330c      	adds	r3, #12
 8010256:	681b      	ldr	r3, [r3, #0]
 8010258:	429a      	cmp	r2, r3
 801025a:	d00a      	beq.n	8010272 <netif_do_set_gw+0x30>
    ip_addr_copy(*old_gw, *netif_ip_gw4(netif));
#else
    LWIP_UNUSED_ARG(old_gw);
#endif

    ip4_addr_set(ip_2_ip4(&netif->gw), gw);
 801025c:	68bb      	ldr	r3, [r7, #8]
 801025e:	2b00      	cmp	r3, #0
 8010260:	d002      	beq.n	8010268 <netif_do_set_gw+0x26>
 8010262:	68bb      	ldr	r3, [r7, #8]
 8010264:	681b      	ldr	r3, [r3, #0]
 8010266:	e000      	b.n	801026a <netif_do_set_gw+0x28>
 8010268:	2300      	movs	r3, #0
 801026a:	68fa      	ldr	r2, [r7, #12]
 801026c:	60d3      	str	r3, [r2, #12]
                netif->name[0], netif->name[1],
                ip4_addr1_16(netif_ip4_gw(netif)),
                ip4_addr2_16(netif_ip4_gw(netif)),
                ip4_addr3_16(netif_ip4_gw(netif)),
                ip4_addr4_16(netif_ip4_gw(netif))));
    return 1; /* gateway changed */
 801026e:	2301      	movs	r3, #1
 8010270:	e000      	b.n	8010274 <netif_do_set_gw+0x32>
  }
  return 0; /* gateway unchanged */
 8010272:	2300      	movs	r3, #0
}
 8010274:	4618      	mov	r0, r3
 8010276:	3714      	adds	r7, #20
 8010278:	46bd      	mov	sp, r7
 801027a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801027e:	4770      	bx	lr

08010280 <netif_set_addr>:
 * @param gw the new default gateway
 */
void
netif_set_addr(struct netif *netif, const ip4_addr_t *ipaddr, const ip4_addr_t *netmask,
               const ip4_addr_t *gw)
{
 8010280:	b580      	push	{r7, lr}
 8010282:	b088      	sub	sp, #32
 8010284:	af00      	add	r7, sp, #0
 8010286:	60f8      	str	r0, [r7, #12]
 8010288:	60b9      	str	r1, [r7, #8]
 801028a:	607a      	str	r2, [r7, #4]
 801028c:	603b      	str	r3, [r7, #0]
  ip_addr_t old_nm_val;
  ip_addr_t old_gw_val;
  ip_addr_t *old_nm = &old_nm_val;
  ip_addr_t *old_gw = &old_gw_val;
#else
  ip_addr_t *old_nm = NULL;
 801028e:	2300      	movs	r3, #0
 8010290:	61fb      	str	r3, [r7, #28]
  ip_addr_t *old_gw = NULL;
 8010292:	2300      	movs	r3, #0
 8010294:	61bb      	str	r3, [r7, #24]
  int remove;

  LWIP_ASSERT_CORE_LOCKED();

  /* Don't propagate NULL pointer (IPv4 ANY) to subsequent functions */
  if (ipaddr == NULL) {
 8010296:	68bb      	ldr	r3, [r7, #8]
 8010298:	2b00      	cmp	r3, #0
 801029a:	d101      	bne.n	80102a0 <netif_set_addr+0x20>
    ipaddr = IP4_ADDR_ANY4;
 801029c:	4b1c      	ldr	r3, [pc, #112]	; (8010310 <netif_set_addr+0x90>)
 801029e:	60bb      	str	r3, [r7, #8]
  }
  if (netmask == NULL) {
 80102a0:	687b      	ldr	r3, [r7, #4]
 80102a2:	2b00      	cmp	r3, #0
 80102a4:	d101      	bne.n	80102aa <netif_set_addr+0x2a>
    netmask = IP4_ADDR_ANY4;
 80102a6:	4b1a      	ldr	r3, [pc, #104]	; (8010310 <netif_set_addr+0x90>)
 80102a8:	607b      	str	r3, [r7, #4]
  }
  if (gw == NULL) {
 80102aa:	683b      	ldr	r3, [r7, #0]
 80102ac:	2b00      	cmp	r3, #0
 80102ae:	d101      	bne.n	80102b4 <netif_set_addr+0x34>
    gw = IP4_ADDR_ANY4;
 80102b0:	4b17      	ldr	r3, [pc, #92]	; (8010310 <netif_set_addr+0x90>)
 80102b2:	603b      	str	r3, [r7, #0]
  }

  remove = ip4_addr_isany(ipaddr);
 80102b4:	68bb      	ldr	r3, [r7, #8]
 80102b6:	2b00      	cmp	r3, #0
 80102b8:	d003      	beq.n	80102c2 <netif_set_addr+0x42>
 80102ba:	68bb      	ldr	r3, [r7, #8]
 80102bc:	681b      	ldr	r3, [r3, #0]
 80102be:	2b00      	cmp	r3, #0
 80102c0:	d101      	bne.n	80102c6 <netif_set_addr+0x46>
 80102c2:	2301      	movs	r3, #1
 80102c4:	e000      	b.n	80102c8 <netif_set_addr+0x48>
 80102c6:	2300      	movs	r3, #0
 80102c8:	617b      	str	r3, [r7, #20]
  if (remove) {
 80102ca:	697b      	ldr	r3, [r7, #20]
 80102cc:	2b00      	cmp	r3, #0
 80102ce:	d006      	beq.n	80102de <netif_set_addr+0x5e>
    /* when removing an address, we have to remove it *before* changing netmask/gw
       to ensure that tcp RST segment can be sent correctly */
    if (netif_do_set_ipaddr(netif, ipaddr, &old_addr)) {
 80102d0:	f107 0310 	add.w	r3, r7, #16
 80102d4:	461a      	mov	r2, r3
 80102d6:	68b9      	ldr	r1, [r7, #8]
 80102d8:	68f8      	ldr	r0, [r7, #12]
 80102da:	f7ff ff49 	bl	8010170 <netif_do_set_ipaddr>
      change_reason |= LWIP_NSC_IPV4_ADDRESS_CHANGED;
      cb_args.ipv4_changed.old_address = &old_addr;
#endif
    }
  }
  if (netif_do_set_netmask(netif, netmask, old_nm)) {
 80102de:	69fa      	ldr	r2, [r7, #28]
 80102e0:	6879      	ldr	r1, [r7, #4]
 80102e2:	68f8      	ldr	r0, [r7, #12]
 80102e4:	f7ff ff8e 	bl	8010204 <netif_do_set_netmask>
#if LWIP_NETIF_EXT_STATUS_CALLBACK
    change_reason |= LWIP_NSC_IPV4_NETMASK_CHANGED;
    cb_args.ipv4_changed.old_netmask = old_nm;
#endif
  }
  if (netif_do_set_gw(netif, gw, old_gw)) {
 80102e8:	69ba      	ldr	r2, [r7, #24]
 80102ea:	6839      	ldr	r1, [r7, #0]
 80102ec:	68f8      	ldr	r0, [r7, #12]
 80102ee:	f7ff ffa8 	bl	8010242 <netif_do_set_gw>
#if LWIP_NETIF_EXT_STATUS_CALLBACK
    change_reason |= LWIP_NSC_IPV4_GATEWAY_CHANGED;
    cb_args.ipv4_changed.old_gw = old_gw;
#endif
  }
  if (!remove) {
 80102f2:	697b      	ldr	r3, [r7, #20]
 80102f4:	2b00      	cmp	r3, #0
 80102f6:	d106      	bne.n	8010306 <netif_set_addr+0x86>
    /* set ipaddr last to ensure netmask/gw have been set when status callback is called */
    if (netif_do_set_ipaddr(netif, ipaddr, &old_addr)) {
 80102f8:	f107 0310 	add.w	r3, r7, #16
 80102fc:	461a      	mov	r2, r3
 80102fe:	68b9      	ldr	r1, [r7, #8]
 8010300:	68f8      	ldr	r0, [r7, #12]
 8010302:	f7ff ff35 	bl	8010170 <netif_do_set_ipaddr>
  if (change_reason != LWIP_NSC_NONE) {
    change_reason |= LWIP_NSC_IPV4_SETTINGS_CHANGED;
    netif_invoke_ext_callback(netif, change_reason, &cb_args);
  }
#endif
}
 8010306:	bf00      	nop
 8010308:	3720      	adds	r7, #32
 801030a:	46bd      	mov	sp, r7
 801030c:	bd80      	pop	{r7, pc}
 801030e:	bf00      	nop
 8010310:	0801ecf4 	.word	0x0801ecf4

08010314 <netif_set_default>:
 *
 * @param netif the default network interface
 */
void
netif_set_default(struct netif *netif)
{
 8010314:	b480      	push	{r7}
 8010316:	b083      	sub	sp, #12
 8010318:	af00      	add	r7, sp, #0
 801031a:	6078      	str	r0, [r7, #4]
    mib2_remove_route_ip4(1, netif);
  } else {
    /* install default route */
    mib2_add_route_ip4(1, netif);
  }
  netif_default = netif;
 801031c:	4a04      	ldr	r2, [pc, #16]	; (8010330 <netif_set_default+0x1c>)
 801031e:	687b      	ldr	r3, [r7, #4]
 8010320:	6013      	str	r3, [r2, #0]
  LWIP_DEBUGF(NETIF_DEBUG, ("netif: setting default interface %c%c\n",
                            netif ? netif->name[0] : '\'', netif ? netif->name[1] : '\''));
}
 8010322:	bf00      	nop
 8010324:	370c      	adds	r7, #12
 8010326:	46bd      	mov	sp, r7
 8010328:	f85d 7b04 	ldr.w	r7, [sp], #4
 801032c:	4770      	bx	lr
 801032e:	bf00      	nop
 8010330:	2000703c 	.word	0x2000703c

08010334 <netif_set_up>:
 * Bring an interface up, available for processing
 * traffic.
 */
void
netif_set_up(struct netif *netif)
{
 8010334:	b580      	push	{r7, lr}
 8010336:	b082      	sub	sp, #8
 8010338:	af00      	add	r7, sp, #0
 801033a:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("netif_set_up: invalid netif", netif != NULL, return);
 801033c:	687b      	ldr	r3, [r7, #4]
 801033e:	2b00      	cmp	r3, #0
 8010340:	d107      	bne.n	8010352 <netif_set_up+0x1e>
 8010342:	4b0f      	ldr	r3, [pc, #60]	; (8010380 <netif_set_up+0x4c>)
 8010344:	f44f 7254 	mov.w	r2, #848	; 0x350
 8010348:	490e      	ldr	r1, [pc, #56]	; (8010384 <netif_set_up+0x50>)
 801034a:	480f      	ldr	r0, [pc, #60]	; (8010388 <netif_set_up+0x54>)
 801034c:	f009 fb8c 	bl	8019a68 <iprintf>
 8010350:	e013      	b.n	801037a <netif_set_up+0x46>

  if (!(netif->flags & NETIF_FLAG_UP)) {
 8010352:	687b      	ldr	r3, [r7, #4]
 8010354:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8010358:	f003 0301 	and.w	r3, r3, #1
 801035c:	2b00      	cmp	r3, #0
 801035e:	d10c      	bne.n	801037a <netif_set_up+0x46>
    netif_set_flags(netif, NETIF_FLAG_UP);
 8010360:	687b      	ldr	r3, [r7, #4]
 8010362:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8010366:	f043 0301 	orr.w	r3, r3, #1
 801036a:	b2da      	uxtb	r2, r3
 801036c:	687b      	ldr	r3, [r7, #4]
 801036e:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
      args.status_changed.state = 1;
      netif_invoke_ext_callback(netif, LWIP_NSC_STATUS_CHANGED, &args);
    }
#endif

    netif_issue_reports(netif, NETIF_REPORT_TYPE_IPV4 | NETIF_REPORT_TYPE_IPV6);
 8010372:	2103      	movs	r1, #3
 8010374:	6878      	ldr	r0, [r7, #4]
 8010376:	f000 f809 	bl	801038c <netif_issue_reports>
#if LWIP_IPV6
    nd6_restart_netif(netif);
#endif /* LWIP_IPV6 */
  }
}
 801037a:	3708      	adds	r7, #8
 801037c:	46bd      	mov	sp, r7
 801037e:	bd80      	pop	{r7, pc}
 8010380:	0801c584 	.word	0x0801c584
 8010384:	0801c70c 	.word	0x0801c70c
 8010388:	0801c5d4 	.word	0x0801c5d4

0801038c <netif_issue_reports>:

/** Send ARP/IGMP/MLD/RS events, e.g. on link-up/netif-up or addr-change
 */
static void
netif_issue_reports(struct netif *netif, u8_t report_type)
{
 801038c:	b580      	push	{r7, lr}
 801038e:	b082      	sub	sp, #8
 8010390:	af00      	add	r7, sp, #0
 8010392:	6078      	str	r0, [r7, #4]
 8010394:	460b      	mov	r3, r1
 8010396:	70fb      	strb	r3, [r7, #3]
  LWIP_ASSERT("netif_issue_reports: invalid netif", netif != NULL);
 8010398:	687b      	ldr	r3, [r7, #4]
 801039a:	2b00      	cmp	r3, #0
 801039c:	d106      	bne.n	80103ac <netif_issue_reports+0x20>
 801039e:	4b18      	ldr	r3, [pc, #96]	; (8010400 <netif_issue_reports+0x74>)
 80103a0:	f240 326d 	movw	r2, #877	; 0x36d
 80103a4:	4917      	ldr	r1, [pc, #92]	; (8010404 <netif_issue_reports+0x78>)
 80103a6:	4818      	ldr	r0, [pc, #96]	; (8010408 <netif_issue_reports+0x7c>)
 80103a8:	f009 fb5e 	bl	8019a68 <iprintf>

  /* Only send reports when both link and admin states are up */
  if (!(netif->flags & NETIF_FLAG_LINK_UP) ||
 80103ac:	687b      	ldr	r3, [r7, #4]
 80103ae:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 80103b2:	f003 0304 	and.w	r3, r3, #4
 80103b6:	2b00      	cmp	r3, #0
 80103b8:	d01e      	beq.n	80103f8 <netif_issue_reports+0x6c>
      !(netif->flags & NETIF_FLAG_UP)) {
 80103ba:	687b      	ldr	r3, [r7, #4]
 80103bc:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 80103c0:	f003 0301 	and.w	r3, r3, #1
  if (!(netif->flags & NETIF_FLAG_LINK_UP) ||
 80103c4:	2b00      	cmp	r3, #0
 80103c6:	d017      	beq.n	80103f8 <netif_issue_reports+0x6c>
    return;
  }

#if LWIP_IPV4
  if ((report_type & NETIF_REPORT_TYPE_IPV4) &&
 80103c8:	78fb      	ldrb	r3, [r7, #3]
 80103ca:	f003 0301 	and.w	r3, r3, #1
 80103ce:	2b00      	cmp	r3, #0
 80103d0:	d013      	beq.n	80103fa <netif_issue_reports+0x6e>
      !ip4_addr_isany_val(*netif_ip4_addr(netif))) {
 80103d2:	687b      	ldr	r3, [r7, #4]
 80103d4:	3304      	adds	r3, #4
 80103d6:	681b      	ldr	r3, [r3, #0]
  if ((report_type & NETIF_REPORT_TYPE_IPV4) &&
 80103d8:	2b00      	cmp	r3, #0
 80103da:	d00e      	beq.n	80103fa <netif_issue_reports+0x6e>
#if LWIP_ARP
    /* For Ethernet network interfaces, we would like to send a "gratuitous ARP" */
    if (netif->flags & (NETIF_FLAG_ETHARP)) {
 80103dc:	687b      	ldr	r3, [r7, #4]
 80103de:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 80103e2:	f003 0308 	and.w	r3, r3, #8
 80103e6:	2b00      	cmp	r3, #0
 80103e8:	d007      	beq.n	80103fa <netif_issue_reports+0x6e>
      etharp_gratuitous(netif);
 80103ea:	687b      	ldr	r3, [r7, #4]
 80103ec:	3304      	adds	r3, #4
 80103ee:	4619      	mov	r1, r3
 80103f0:	6878      	ldr	r0, [r7, #4]
 80103f2:	f007 fa4d 	bl	8017890 <etharp_request>
 80103f6:	e000      	b.n	80103fa <netif_issue_reports+0x6e>
    return;
 80103f8:	bf00      	nop
    /* send mld memberships */
    mld6_report_groups(netif);
#endif /* LWIP_IPV6_MLD */
  }
#endif /* LWIP_IPV6 */
}
 80103fa:	3708      	adds	r7, #8
 80103fc:	46bd      	mov	sp, r7
 80103fe:	bd80      	pop	{r7, pc}
 8010400:	0801c584 	.word	0x0801c584
 8010404:	0801c728 	.word	0x0801c728
 8010408:	0801c5d4 	.word	0x0801c5d4

0801040c <netif_set_down>:
 * @ingroup netif
 * Bring an interface down, disabling any traffic processing.
 */
void
netif_set_down(struct netif *netif)
{
 801040c:	b580      	push	{r7, lr}
 801040e:	b082      	sub	sp, #8
 8010410:	af00      	add	r7, sp, #0
 8010412:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("netif_set_down: invalid netif", netif != NULL, return);
 8010414:	687b      	ldr	r3, [r7, #4]
 8010416:	2b00      	cmp	r3, #0
 8010418:	d107      	bne.n	801042a <netif_set_down+0x1e>
 801041a:	4b12      	ldr	r3, [pc, #72]	; (8010464 <netif_set_down+0x58>)
 801041c:	f240 329b 	movw	r2, #923	; 0x39b
 8010420:	4911      	ldr	r1, [pc, #68]	; (8010468 <netif_set_down+0x5c>)
 8010422:	4812      	ldr	r0, [pc, #72]	; (801046c <netif_set_down+0x60>)
 8010424:	f009 fb20 	bl	8019a68 <iprintf>
 8010428:	e019      	b.n	801045e <netif_set_down+0x52>

  if (netif->flags & NETIF_FLAG_UP) {
 801042a:	687b      	ldr	r3, [r7, #4]
 801042c:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8010430:	f003 0301 	and.w	r3, r3, #1
 8010434:	2b00      	cmp	r3, #0
 8010436:	d012      	beq.n	801045e <netif_set_down+0x52>
      args.status_changed.state = 0;
      netif_invoke_ext_callback(netif, LWIP_NSC_STATUS_CHANGED, &args);
    }
#endif

    netif_clear_flags(netif, NETIF_FLAG_UP);
 8010438:	687b      	ldr	r3, [r7, #4]
 801043a:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 801043e:	f023 0301 	bic.w	r3, r3, #1
 8010442:	b2da      	uxtb	r2, r3
 8010444:	687b      	ldr	r3, [r7, #4]
 8010446:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
    MIB2_COPY_SYSUPTIME_TO(&netif->ts);

#if LWIP_IPV4 && LWIP_ARP
    if (netif->flags & NETIF_FLAG_ETHARP) {
 801044a:	687b      	ldr	r3, [r7, #4]
 801044c:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8010450:	f003 0308 	and.w	r3, r3, #8
 8010454:	2b00      	cmp	r3, #0
 8010456:	d002      	beq.n	801045e <netif_set_down+0x52>
      etharp_cleanup_netif(netif);
 8010458:	6878      	ldr	r0, [r7, #4]
 801045a:	f006 fdd7 	bl	801700c <etharp_cleanup_netif>
    nd6_cleanup_netif(netif);
#endif /* LWIP_IPV6 */

    NETIF_STATUS_CALLBACK(netif);
  }
}
 801045e:	3708      	adds	r7, #8
 8010460:	46bd      	mov	sp, r7
 8010462:	bd80      	pop	{r7, pc}
 8010464:	0801c584 	.word	0x0801c584
 8010468:	0801c74c 	.word	0x0801c74c
 801046c:	0801c5d4 	.word	0x0801c5d4

08010470 <netif_set_link_up>:
 * @ingroup netif
 * Called by a driver when its link goes up
 */
void
netif_set_link_up(struct netif *netif)
{
 8010470:	b580      	push	{r7, lr}
 8010472:	b082      	sub	sp, #8
 8010474:	af00      	add	r7, sp, #0
 8010476:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("netif_set_link_up: invalid netif", netif != NULL, return);
 8010478:	687b      	ldr	r3, [r7, #4]
 801047a:	2b00      	cmp	r3, #0
 801047c:	d107      	bne.n	801048e <netif_set_link_up+0x1e>
 801047e:	4b13      	ldr	r3, [pc, #76]	; (80104cc <netif_set_link_up+0x5c>)
 8010480:	f44f 7278 	mov.w	r2, #992	; 0x3e0
 8010484:	4912      	ldr	r1, [pc, #72]	; (80104d0 <netif_set_link_up+0x60>)
 8010486:	4813      	ldr	r0, [pc, #76]	; (80104d4 <netif_set_link_up+0x64>)
 8010488:	f009 faee 	bl	8019a68 <iprintf>
 801048c:	e01b      	b.n	80104c6 <netif_set_link_up+0x56>

  if (!(netif->flags & NETIF_FLAG_LINK_UP)) {
 801048e:	687b      	ldr	r3, [r7, #4]
 8010490:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8010494:	f003 0304 	and.w	r3, r3, #4
 8010498:	2b00      	cmp	r3, #0
 801049a:	d114      	bne.n	80104c6 <netif_set_link_up+0x56>
    netif_set_flags(netif, NETIF_FLAG_LINK_UP);
 801049c:	687b      	ldr	r3, [r7, #4]
 801049e:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 80104a2:	f043 0304 	orr.w	r3, r3, #4
 80104a6:	b2da      	uxtb	r2, r3
 80104a8:	687b      	ldr	r3, [r7, #4]
 80104aa:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d

#if LWIP_AUTOIP
    autoip_network_changed(netif);
#endif /* LWIP_AUTOIP */

    netif_issue_reports(netif, NETIF_REPORT_TYPE_IPV4 | NETIF_REPORT_TYPE_IPV6);
 80104ae:	2103      	movs	r1, #3
 80104b0:	6878      	ldr	r0, [r7, #4]
 80104b2:	f7ff ff6b 	bl	801038c <netif_issue_reports>
#if LWIP_IPV6
    nd6_restart_netif(netif);
#endif /* LWIP_IPV6 */

    NETIF_LINK_CALLBACK(netif);
 80104b6:	687b      	ldr	r3, [r7, #4]
 80104b8:	69db      	ldr	r3, [r3, #28]
 80104ba:	2b00      	cmp	r3, #0
 80104bc:	d003      	beq.n	80104c6 <netif_set_link_up+0x56>
 80104be:	687b      	ldr	r3, [r7, #4]
 80104c0:	69db      	ldr	r3, [r3, #28]
 80104c2:	6878      	ldr	r0, [r7, #4]
 80104c4:	4798      	blx	r3
      args.link_changed.state = 1;
      netif_invoke_ext_callback(netif, LWIP_NSC_LINK_CHANGED, &args);
    }
#endif
  }
}
 80104c6:	3708      	adds	r7, #8
 80104c8:	46bd      	mov	sp, r7
 80104ca:	bd80      	pop	{r7, pc}
 80104cc:	0801c584 	.word	0x0801c584
 80104d0:	0801c76c 	.word	0x0801c76c
 80104d4:	0801c5d4 	.word	0x0801c5d4

080104d8 <netif_set_link_down>:
 * @ingroup netif
 * Called by a driver when its link goes down
 */
void
netif_set_link_down(struct netif *netif)
{
 80104d8:	b580      	push	{r7, lr}
 80104da:	b082      	sub	sp, #8
 80104dc:	af00      	add	r7, sp, #0
 80104de:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("netif_set_link_down: invalid netif", netif != NULL, return);
 80104e0:	687b      	ldr	r3, [r7, #4]
 80104e2:	2b00      	cmp	r3, #0
 80104e4:	d107      	bne.n	80104f6 <netif_set_link_down+0x1e>
 80104e6:	4b11      	ldr	r3, [pc, #68]	; (801052c <netif_set_link_down+0x54>)
 80104e8:	f240 4206 	movw	r2, #1030	; 0x406
 80104ec:	4910      	ldr	r1, [pc, #64]	; (8010530 <netif_set_link_down+0x58>)
 80104ee:	4811      	ldr	r0, [pc, #68]	; (8010534 <netif_set_link_down+0x5c>)
 80104f0:	f009 faba 	bl	8019a68 <iprintf>
 80104f4:	e017      	b.n	8010526 <netif_set_link_down+0x4e>

  if (netif->flags & NETIF_FLAG_LINK_UP) {
 80104f6:	687b      	ldr	r3, [r7, #4]
 80104f8:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 80104fc:	f003 0304 	and.w	r3, r3, #4
 8010500:	2b00      	cmp	r3, #0
 8010502:	d010      	beq.n	8010526 <netif_set_link_down+0x4e>
    netif_clear_flags(netif, NETIF_FLAG_LINK_UP);
 8010504:	687b      	ldr	r3, [r7, #4]
 8010506:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 801050a:	f023 0304 	bic.w	r3, r3, #4
 801050e:	b2da      	uxtb	r2, r3
 8010510:	687b      	ldr	r3, [r7, #4]
 8010512:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
    NETIF_LINK_CALLBACK(netif);
 8010516:	687b      	ldr	r3, [r7, #4]
 8010518:	69db      	ldr	r3, [r3, #28]
 801051a:	2b00      	cmp	r3, #0
 801051c:	d003      	beq.n	8010526 <netif_set_link_down+0x4e>
 801051e:	687b      	ldr	r3, [r7, #4]
 8010520:	69db      	ldr	r3, [r3, #28]
 8010522:	6878      	ldr	r0, [r7, #4]
 8010524:	4798      	blx	r3
      args.link_changed.state = 0;
      netif_invoke_ext_callback(netif, LWIP_NSC_LINK_CHANGED, &args);
    }
#endif
  }
}
 8010526:	3708      	adds	r7, #8
 8010528:	46bd      	mov	sp, r7
 801052a:	bd80      	pop	{r7, pc}
 801052c:	0801c584 	.word	0x0801c584
 8010530:	0801c790 	.word	0x0801c790
 8010534:	0801c5d4 	.word	0x0801c5d4

08010538 <netif_set_link_callback>:
 * @ingroup netif
 * Set callback to be called when link is brought up/down
 */
void
netif_set_link_callback(struct netif *netif, netif_status_callback_fn link_callback)
{
 8010538:	b480      	push	{r7}
 801053a:	b083      	sub	sp, #12
 801053c:	af00      	add	r7, sp, #0
 801053e:	6078      	str	r0, [r7, #4]
 8010540:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT_CORE_LOCKED();

  if (netif) {
 8010542:	687b      	ldr	r3, [r7, #4]
 8010544:	2b00      	cmp	r3, #0
 8010546:	d002      	beq.n	801054e <netif_set_link_callback+0x16>
    netif->link_callback = link_callback;
 8010548:	687b      	ldr	r3, [r7, #4]
 801054a:	683a      	ldr	r2, [r7, #0]
 801054c:	61da      	str	r2, [r3, #28]
  }
}
 801054e:	bf00      	nop
 8010550:	370c      	adds	r7, #12
 8010552:	46bd      	mov	sp, r7
 8010554:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010558:	4770      	bx	lr

0801055a <netif_null_output_ip4>:
#if LWIP_IPV4
/** Dummy IPv4 output function for netifs not supporting IPv4
 */
static err_t
netif_null_output_ip4(struct netif *netif, struct pbuf *p, const ip4_addr_t *ipaddr)
{
 801055a:	b480      	push	{r7}
 801055c:	b085      	sub	sp, #20
 801055e:	af00      	add	r7, sp, #0
 8010560:	60f8      	str	r0, [r7, #12]
 8010562:	60b9      	str	r1, [r7, #8]
 8010564:	607a      	str	r2, [r7, #4]
  LWIP_UNUSED_ARG(netif);
  LWIP_UNUSED_ARG(p);
  LWIP_UNUSED_ARG(ipaddr);

  return ERR_IF;
 8010566:	f06f 030b 	mvn.w	r3, #11
}
 801056a:	4618      	mov	r0, r3
 801056c:	3714      	adds	r7, #20
 801056e:	46bd      	mov	sp, r7
 8010570:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010574:	4770      	bx	lr
	...

08010578 <netif_get_by_index>:
*
* @param idx index of netif to find
*/
struct netif *
netif_get_by_index(u8_t idx)
{
 8010578:	b480      	push	{r7}
 801057a:	b085      	sub	sp, #20
 801057c:	af00      	add	r7, sp, #0
 801057e:	4603      	mov	r3, r0
 8010580:	71fb      	strb	r3, [r7, #7]
  struct netif *netif;

  LWIP_ASSERT_CORE_LOCKED();

  if (idx != NETIF_NO_INDEX) {
 8010582:	79fb      	ldrb	r3, [r7, #7]
 8010584:	2b00      	cmp	r3, #0
 8010586:	d013      	beq.n	80105b0 <netif_get_by_index+0x38>
    NETIF_FOREACH(netif) {
 8010588:	4b0d      	ldr	r3, [pc, #52]	; (80105c0 <netif_get_by_index+0x48>)
 801058a:	681b      	ldr	r3, [r3, #0]
 801058c:	60fb      	str	r3, [r7, #12]
 801058e:	e00c      	b.n	80105aa <netif_get_by_index+0x32>
      if (idx == netif_get_index(netif)) {
 8010590:	68fb      	ldr	r3, [r7, #12]
 8010592:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8010596:	3301      	adds	r3, #1
 8010598:	b2db      	uxtb	r3, r3
 801059a:	79fa      	ldrb	r2, [r7, #7]
 801059c:	429a      	cmp	r2, r3
 801059e:	d101      	bne.n	80105a4 <netif_get_by_index+0x2c>
        return netif; /* found! */
 80105a0:	68fb      	ldr	r3, [r7, #12]
 80105a2:	e006      	b.n	80105b2 <netif_get_by_index+0x3a>
    NETIF_FOREACH(netif) {
 80105a4:	68fb      	ldr	r3, [r7, #12]
 80105a6:	681b      	ldr	r3, [r3, #0]
 80105a8:	60fb      	str	r3, [r7, #12]
 80105aa:	68fb      	ldr	r3, [r7, #12]
 80105ac:	2b00      	cmp	r3, #0
 80105ae:	d1ef      	bne.n	8010590 <netif_get_by_index+0x18>
      }
    }
  }

  return NULL;
 80105b0:	2300      	movs	r3, #0
}
 80105b2:	4618      	mov	r0, r3
 80105b4:	3714      	adds	r7, #20
 80105b6:	46bd      	mov	sp, r7
 80105b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80105bc:	4770      	bx	lr
 80105be:	bf00      	nop
 80105c0:	20007038 	.word	0x20007038

080105c4 <pbuf_free_ooseq>:
#if !NO_SYS
static
#endif /* !NO_SYS */
void
pbuf_free_ooseq(void)
{
 80105c4:	b580      	push	{r7, lr}
 80105c6:	b082      	sub	sp, #8
 80105c8:	af00      	add	r7, sp, #0
  struct tcp_pcb *pcb;
  SYS_ARCH_SET(pbuf_free_ooseq_pending, 0);
 80105ca:	4b0c      	ldr	r3, [pc, #48]	; (80105fc <pbuf_free_ooseq+0x38>)
 80105cc:	2200      	movs	r2, #0
 80105ce:	701a      	strb	r2, [r3, #0]

  for (pcb = tcp_active_pcbs; NULL != pcb; pcb = pcb->next) {
 80105d0:	4b0b      	ldr	r3, [pc, #44]	; (8010600 <pbuf_free_ooseq+0x3c>)
 80105d2:	681b      	ldr	r3, [r3, #0]
 80105d4:	607b      	str	r3, [r7, #4]
 80105d6:	e00a      	b.n	80105ee <pbuf_free_ooseq+0x2a>
    if (pcb->ooseq != NULL) {
 80105d8:	687b      	ldr	r3, [r7, #4]
 80105da:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80105dc:	2b00      	cmp	r3, #0
 80105de:	d003      	beq.n	80105e8 <pbuf_free_ooseq+0x24>
      /** Free the ooseq pbufs of one PCB only */
      LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_free_ooseq: freeing out-of-sequence pbufs\n"));
      tcp_free_ooseq(pcb);
 80105e0:	6878      	ldr	r0, [r7, #4]
 80105e2:	f002 f941 	bl	8012868 <tcp_free_ooseq>
      return;
 80105e6:	e005      	b.n	80105f4 <pbuf_free_ooseq+0x30>
  for (pcb = tcp_active_pcbs; NULL != pcb; pcb = pcb->next) {
 80105e8:	687b      	ldr	r3, [r7, #4]
 80105ea:	68db      	ldr	r3, [r3, #12]
 80105ec:	607b      	str	r3, [r7, #4]
 80105ee:	687b      	ldr	r3, [r7, #4]
 80105f0:	2b00      	cmp	r3, #0
 80105f2:	d1f1      	bne.n	80105d8 <pbuf_free_ooseq+0x14>
    }
  }
}
 80105f4:	3708      	adds	r7, #8
 80105f6:	46bd      	mov	sp, r7
 80105f8:	bd80      	pop	{r7, pc}
 80105fa:	bf00      	nop
 80105fc:	20007041 	.word	0x20007041
 8010600:	20007050 	.word	0x20007050

08010604 <pbuf_pool_is_empty>:
#endif /* !NO_SYS */

/** Queue a call to pbuf_free_ooseq if not already queued. */
static void
pbuf_pool_is_empty(void)
{
 8010604:	b480      	push	{r7}
 8010606:	af00      	add	r7, sp, #0
#ifndef PBUF_POOL_FREE_OOSEQ_QUEUE_CALL
  SYS_ARCH_SET(pbuf_free_ooseq_pending, 1);
 8010608:	4b03      	ldr	r3, [pc, #12]	; (8010618 <pbuf_pool_is_empty+0x14>)
 801060a:	2201      	movs	r2, #1
 801060c:	701a      	strb	r2, [r3, #0]
  if (!queued) {
    /* queue a call to pbuf_free_ooseq if not already queued */
    PBUF_POOL_FREE_OOSEQ_QUEUE_CALL();
  }
#endif /* PBUF_POOL_FREE_OOSEQ_QUEUE_CALL */
}
 801060e:	bf00      	nop
 8010610:	46bd      	mov	sp, r7
 8010612:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010616:	4770      	bx	lr
 8010618:	20007041 	.word	0x20007041

0801061c <pbuf_init_alloced_pbuf>:
#endif /* !LWIP_TCP || !TCP_QUEUE_OOSEQ || !PBUF_POOL_FREE_OOSEQ */

/* Initialize members of struct pbuf after allocation */
static void
pbuf_init_alloced_pbuf(struct pbuf *p, void *payload, u16_t tot_len, u16_t len, pbuf_type type, u8_t flags)
{
 801061c:	b480      	push	{r7}
 801061e:	b085      	sub	sp, #20
 8010620:	af00      	add	r7, sp, #0
 8010622:	60f8      	str	r0, [r7, #12]
 8010624:	60b9      	str	r1, [r7, #8]
 8010626:	4611      	mov	r1, r2
 8010628:	461a      	mov	r2, r3
 801062a:	460b      	mov	r3, r1
 801062c:	80fb      	strh	r3, [r7, #6]
 801062e:	4613      	mov	r3, r2
 8010630:	80bb      	strh	r3, [r7, #4]
  p->next = NULL;
 8010632:	68fb      	ldr	r3, [r7, #12]
 8010634:	2200      	movs	r2, #0
 8010636:	601a      	str	r2, [r3, #0]
  p->payload = payload;
 8010638:	68fb      	ldr	r3, [r7, #12]
 801063a:	68ba      	ldr	r2, [r7, #8]
 801063c:	605a      	str	r2, [r3, #4]
  p->tot_len = tot_len;
 801063e:	68fb      	ldr	r3, [r7, #12]
 8010640:	88fa      	ldrh	r2, [r7, #6]
 8010642:	811a      	strh	r2, [r3, #8]
  p->len = len;
 8010644:	68fb      	ldr	r3, [r7, #12]
 8010646:	88ba      	ldrh	r2, [r7, #4]
 8010648:	815a      	strh	r2, [r3, #10]
  p->type_internal = (u8_t)type;
 801064a:	8b3b      	ldrh	r3, [r7, #24]
 801064c:	b2da      	uxtb	r2, r3
 801064e:	68fb      	ldr	r3, [r7, #12]
 8010650:	731a      	strb	r2, [r3, #12]
  p->flags = flags;
 8010652:	68fb      	ldr	r3, [r7, #12]
 8010654:	7f3a      	ldrb	r2, [r7, #28]
 8010656:	735a      	strb	r2, [r3, #13]
  p->ref = 1;
 8010658:	68fb      	ldr	r3, [r7, #12]
 801065a:	2201      	movs	r2, #1
 801065c:	739a      	strb	r2, [r3, #14]
  p->if_idx = NETIF_NO_INDEX;
 801065e:	68fb      	ldr	r3, [r7, #12]
 8010660:	2200      	movs	r2, #0
 8010662:	73da      	strb	r2, [r3, #15]
}
 8010664:	bf00      	nop
 8010666:	3714      	adds	r7, #20
 8010668:	46bd      	mov	sp, r7
 801066a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801066e:	4770      	bx	lr

08010670 <pbuf_alloc>:
 * @return the allocated pbuf. If multiple pbufs where allocated, this
 * is the first pbuf of a pbuf chain.
 */
struct pbuf *
pbuf_alloc(pbuf_layer layer, u16_t length, pbuf_type type)
{
 8010670:	b580      	push	{r7, lr}
 8010672:	b08c      	sub	sp, #48	; 0x30
 8010674:	af02      	add	r7, sp, #8
 8010676:	4603      	mov	r3, r0
 8010678:	71fb      	strb	r3, [r7, #7]
 801067a:	460b      	mov	r3, r1
 801067c:	80bb      	strh	r3, [r7, #4]
 801067e:	4613      	mov	r3, r2
 8010680:	807b      	strh	r3, [r7, #2]
  struct pbuf *p;
  u16_t offset = (u16_t)layer;
 8010682:	79fb      	ldrb	r3, [r7, #7]
 8010684:	847b      	strh	r3, [r7, #34]	; 0x22
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_alloc(length=%"U16_F")\n", length));

  switch (type) {
 8010686:	887b      	ldrh	r3, [r7, #2]
 8010688:	f5b3 7f20 	cmp.w	r3, #640	; 0x280
 801068c:	f000 8082 	beq.w	8010794 <pbuf_alloc+0x124>
 8010690:	f5b3 7f20 	cmp.w	r3, #640	; 0x280
 8010694:	f300 80c9 	bgt.w	801082a <pbuf_alloc+0x1ba>
 8010698:	f5b3 7fc1 	cmp.w	r3, #386	; 0x182
 801069c:	d010      	beq.n	80106c0 <pbuf_alloc+0x50>
 801069e:	f5b3 7fc1 	cmp.w	r3, #386	; 0x182
 80106a2:	f300 80c2 	bgt.w	801082a <pbuf_alloc+0x1ba>
 80106a6:	2b01      	cmp	r3, #1
 80106a8:	d002      	beq.n	80106b0 <pbuf_alloc+0x40>
 80106aa:	2b41      	cmp	r3, #65	; 0x41
 80106ac:	f040 80bd 	bne.w	801082a <pbuf_alloc+0x1ba>
    case PBUF_REF: /* fall through */
    case PBUF_ROM:
      p = pbuf_alloc_reference(NULL, length, type);
 80106b0:	887a      	ldrh	r2, [r7, #2]
 80106b2:	88bb      	ldrh	r3, [r7, #4]
 80106b4:	4619      	mov	r1, r3
 80106b6:	2000      	movs	r0, #0
 80106b8:	f000 f8d2 	bl	8010860 <pbuf_alloc_reference>
 80106bc:	6278      	str	r0, [r7, #36]	; 0x24
      break;
 80106be:	e0be      	b.n	801083e <pbuf_alloc+0x1ce>
    case PBUF_POOL: {
      struct pbuf *q, *last;
      u16_t rem_len; /* remaining length */
      p = NULL;
 80106c0:	2300      	movs	r3, #0
 80106c2:	627b      	str	r3, [r7, #36]	; 0x24
      last = NULL;
 80106c4:	2300      	movs	r3, #0
 80106c6:	61fb      	str	r3, [r7, #28]
      rem_len = length;
 80106c8:	88bb      	ldrh	r3, [r7, #4]
 80106ca:	837b      	strh	r3, [r7, #26]
      do {
        u16_t qlen;
        q = (struct pbuf *)memp_malloc(MEMP_PBUF_POOL);
 80106cc:	2008      	movs	r0, #8
 80106ce:	f7ff fbcd 	bl	800fe6c <memp_malloc>
 80106d2:	6138      	str	r0, [r7, #16]
        if (q == NULL) {
 80106d4:	693b      	ldr	r3, [r7, #16]
 80106d6:	2b00      	cmp	r3, #0
 80106d8:	d109      	bne.n	80106ee <pbuf_alloc+0x7e>
          PBUF_POOL_IS_EMPTY();
 80106da:	f7ff ff93 	bl	8010604 <pbuf_pool_is_empty>
          /* free chain so far allocated */
          if (p) {
 80106de:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80106e0:	2b00      	cmp	r3, #0
 80106e2:	d002      	beq.n	80106ea <pbuf_alloc+0x7a>
            pbuf_free(p);
 80106e4:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80106e6:	f000 faa7 	bl	8010c38 <pbuf_free>
          }
          /* bail out unsuccessfully */
          return NULL;
 80106ea:	2300      	movs	r3, #0
 80106ec:	e0a8      	b.n	8010840 <pbuf_alloc+0x1d0>
        }
        qlen = LWIP_MIN(rem_len, (u16_t)(PBUF_POOL_BUFSIZE_ALIGNED - LWIP_MEM_ALIGN_SIZE(offset)));
 80106ee:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 80106f0:	3303      	adds	r3, #3
 80106f2:	b29b      	uxth	r3, r3
 80106f4:	f023 0303 	bic.w	r3, r3, #3
 80106f8:	b29a      	uxth	r2, r3
 80106fa:	f240 53ec 	movw	r3, #1516	; 0x5ec
 80106fe:	1a9b      	subs	r3, r3, r2
 8010700:	b29b      	uxth	r3, r3
 8010702:	8b7a      	ldrh	r2, [r7, #26]
 8010704:	4293      	cmp	r3, r2
 8010706:	bf28      	it	cs
 8010708:	4613      	movcs	r3, r2
 801070a:	81fb      	strh	r3, [r7, #14]
        pbuf_init_alloced_pbuf(q, LWIP_MEM_ALIGN((void *)((u8_t *)q + SIZEOF_STRUCT_PBUF + offset)),
 801070c:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 801070e:	3310      	adds	r3, #16
 8010710:	693a      	ldr	r2, [r7, #16]
 8010712:	4413      	add	r3, r2
 8010714:	3303      	adds	r3, #3
 8010716:	f023 0303 	bic.w	r3, r3, #3
 801071a:	4618      	mov	r0, r3
 801071c:	89f9      	ldrh	r1, [r7, #14]
 801071e:	8b7a      	ldrh	r2, [r7, #26]
 8010720:	2300      	movs	r3, #0
 8010722:	9301      	str	r3, [sp, #4]
 8010724:	887b      	ldrh	r3, [r7, #2]
 8010726:	9300      	str	r3, [sp, #0]
 8010728:	460b      	mov	r3, r1
 801072a:	4601      	mov	r1, r0
 801072c:	6938      	ldr	r0, [r7, #16]
 801072e:	f7ff ff75 	bl	801061c <pbuf_init_alloced_pbuf>
                               rem_len, qlen, type, 0);
        LWIP_ASSERT("pbuf_alloc: pbuf q->payload properly aligned",
 8010732:	693b      	ldr	r3, [r7, #16]
 8010734:	685b      	ldr	r3, [r3, #4]
 8010736:	f003 0303 	and.w	r3, r3, #3
 801073a:	2b00      	cmp	r3, #0
 801073c:	d006      	beq.n	801074c <pbuf_alloc+0xdc>
 801073e:	4b42      	ldr	r3, [pc, #264]	; (8010848 <pbuf_alloc+0x1d8>)
 8010740:	f44f 7280 	mov.w	r2, #256	; 0x100
 8010744:	4941      	ldr	r1, [pc, #260]	; (801084c <pbuf_alloc+0x1dc>)
 8010746:	4842      	ldr	r0, [pc, #264]	; (8010850 <pbuf_alloc+0x1e0>)
 8010748:	f009 f98e 	bl	8019a68 <iprintf>
                    ((mem_ptr_t)q->payload % MEM_ALIGNMENT) == 0);
        LWIP_ASSERT("PBUF_POOL_BUFSIZE must be bigger than MEM_ALIGNMENT",
 801074c:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 801074e:	3303      	adds	r3, #3
 8010750:	f023 0303 	bic.w	r3, r3, #3
 8010754:	f240 52ec 	movw	r2, #1516	; 0x5ec
 8010758:	4293      	cmp	r3, r2
 801075a:	d106      	bne.n	801076a <pbuf_alloc+0xfa>
 801075c:	4b3a      	ldr	r3, [pc, #232]	; (8010848 <pbuf_alloc+0x1d8>)
 801075e:	f44f 7281 	mov.w	r2, #258	; 0x102
 8010762:	493c      	ldr	r1, [pc, #240]	; (8010854 <pbuf_alloc+0x1e4>)
 8010764:	483a      	ldr	r0, [pc, #232]	; (8010850 <pbuf_alloc+0x1e0>)
 8010766:	f009 f97f 	bl	8019a68 <iprintf>
                    (PBUF_POOL_BUFSIZE_ALIGNED - LWIP_MEM_ALIGN_SIZE(offset)) > 0 );
        if (p == NULL) {
 801076a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801076c:	2b00      	cmp	r3, #0
 801076e:	d102      	bne.n	8010776 <pbuf_alloc+0x106>
          /* allocated head of pbuf chain (into p) */
          p = q;
 8010770:	693b      	ldr	r3, [r7, #16]
 8010772:	627b      	str	r3, [r7, #36]	; 0x24
 8010774:	e002      	b.n	801077c <pbuf_alloc+0x10c>
        } else {
          /* make previous pbuf point to this pbuf */
          last->next = q;
 8010776:	69fb      	ldr	r3, [r7, #28]
 8010778:	693a      	ldr	r2, [r7, #16]
 801077a:	601a      	str	r2, [r3, #0]
        }
        last = q;
 801077c:	693b      	ldr	r3, [r7, #16]
 801077e:	61fb      	str	r3, [r7, #28]
        rem_len = (u16_t)(rem_len - qlen);
 8010780:	8b7a      	ldrh	r2, [r7, #26]
 8010782:	89fb      	ldrh	r3, [r7, #14]
 8010784:	1ad3      	subs	r3, r2, r3
 8010786:	837b      	strh	r3, [r7, #26]
        offset = 0;
 8010788:	2300      	movs	r3, #0
 801078a:	847b      	strh	r3, [r7, #34]	; 0x22
      } while (rem_len > 0);
 801078c:	8b7b      	ldrh	r3, [r7, #26]
 801078e:	2b00      	cmp	r3, #0
 8010790:	d19c      	bne.n	80106cc <pbuf_alloc+0x5c>
      break;
 8010792:	e054      	b.n	801083e <pbuf_alloc+0x1ce>
    }
    case PBUF_RAM: {
      u16_t payload_len = (u16_t)(LWIP_MEM_ALIGN_SIZE(offset) + LWIP_MEM_ALIGN_SIZE(length));
 8010794:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8010796:	3303      	adds	r3, #3
 8010798:	b29b      	uxth	r3, r3
 801079a:	f023 0303 	bic.w	r3, r3, #3
 801079e:	b29a      	uxth	r2, r3
 80107a0:	88bb      	ldrh	r3, [r7, #4]
 80107a2:	3303      	adds	r3, #3
 80107a4:	b29b      	uxth	r3, r3
 80107a6:	f023 0303 	bic.w	r3, r3, #3
 80107aa:	b29b      	uxth	r3, r3
 80107ac:	4413      	add	r3, r2
 80107ae:	833b      	strh	r3, [r7, #24]
      mem_size_t alloc_len = (mem_size_t)(LWIP_MEM_ALIGN_SIZE(SIZEOF_STRUCT_PBUF) + payload_len);
 80107b0:	8b3b      	ldrh	r3, [r7, #24]
 80107b2:	3310      	adds	r3, #16
 80107b4:	617b      	str	r3, [r7, #20]

      /* bug #50040: Check for integer overflow when calculating alloc_len */
      if ((payload_len < LWIP_MEM_ALIGN_SIZE(length)) ||
 80107b6:	8b3a      	ldrh	r2, [r7, #24]
 80107b8:	88bb      	ldrh	r3, [r7, #4]
 80107ba:	3303      	adds	r3, #3
 80107bc:	f023 0303 	bic.w	r3, r3, #3
 80107c0:	429a      	cmp	r2, r3
 80107c2:	d306      	bcc.n	80107d2 <pbuf_alloc+0x162>
          (alloc_len < LWIP_MEM_ALIGN_SIZE(length))) {
 80107c4:	88bb      	ldrh	r3, [r7, #4]
 80107c6:	3303      	adds	r3, #3
 80107c8:	f023 0303 	bic.w	r3, r3, #3
      if ((payload_len < LWIP_MEM_ALIGN_SIZE(length)) ||
 80107cc:	697a      	ldr	r2, [r7, #20]
 80107ce:	429a      	cmp	r2, r3
 80107d0:	d201      	bcs.n	80107d6 <pbuf_alloc+0x166>
        return NULL;
 80107d2:	2300      	movs	r3, #0
 80107d4:	e034      	b.n	8010840 <pbuf_alloc+0x1d0>
      }

      /* If pbuf is to be allocated in RAM, allocate memory for it. */
      p = (struct pbuf *)mem_malloc(alloc_len);
 80107d6:	6978      	ldr	r0, [r7, #20]
 80107d8:	f7ff f9c0 	bl	800fb5c <mem_malloc>
 80107dc:	6278      	str	r0, [r7, #36]	; 0x24
      if (p == NULL) {
 80107de:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80107e0:	2b00      	cmp	r3, #0
 80107e2:	d101      	bne.n	80107e8 <pbuf_alloc+0x178>
        return NULL;
 80107e4:	2300      	movs	r3, #0
 80107e6:	e02b      	b.n	8010840 <pbuf_alloc+0x1d0>
      }
      pbuf_init_alloced_pbuf(p, LWIP_MEM_ALIGN((void *)((u8_t *)p + SIZEOF_STRUCT_PBUF + offset)),
 80107e8:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 80107ea:	3310      	adds	r3, #16
 80107ec:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80107ee:	4413      	add	r3, r2
 80107f0:	3303      	adds	r3, #3
 80107f2:	f023 0303 	bic.w	r3, r3, #3
 80107f6:	4618      	mov	r0, r3
 80107f8:	88b9      	ldrh	r1, [r7, #4]
 80107fa:	88ba      	ldrh	r2, [r7, #4]
 80107fc:	2300      	movs	r3, #0
 80107fe:	9301      	str	r3, [sp, #4]
 8010800:	887b      	ldrh	r3, [r7, #2]
 8010802:	9300      	str	r3, [sp, #0]
 8010804:	460b      	mov	r3, r1
 8010806:	4601      	mov	r1, r0
 8010808:	6a78      	ldr	r0, [r7, #36]	; 0x24
 801080a:	f7ff ff07 	bl	801061c <pbuf_init_alloced_pbuf>
                             length, length, type, 0);
      LWIP_ASSERT("pbuf_alloc: pbuf->payload properly aligned",
 801080e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010810:	685b      	ldr	r3, [r3, #4]
 8010812:	f003 0303 	and.w	r3, r3, #3
 8010816:	2b00      	cmp	r3, #0
 8010818:	d010      	beq.n	801083c <pbuf_alloc+0x1cc>
 801081a:	4b0b      	ldr	r3, [pc, #44]	; (8010848 <pbuf_alloc+0x1d8>)
 801081c:	f44f 7291 	mov.w	r2, #290	; 0x122
 8010820:	490d      	ldr	r1, [pc, #52]	; (8010858 <pbuf_alloc+0x1e8>)
 8010822:	480b      	ldr	r0, [pc, #44]	; (8010850 <pbuf_alloc+0x1e0>)
 8010824:	f009 f920 	bl	8019a68 <iprintf>
                  ((mem_ptr_t)p->payload % MEM_ALIGNMENT) == 0);
      break;
 8010828:	e008      	b.n	801083c <pbuf_alloc+0x1cc>
    }
    default:
      LWIP_ASSERT("pbuf_alloc: erroneous type", 0);
 801082a:	4b07      	ldr	r3, [pc, #28]	; (8010848 <pbuf_alloc+0x1d8>)
 801082c:	f240 1227 	movw	r2, #295	; 0x127
 8010830:	490a      	ldr	r1, [pc, #40]	; (801085c <pbuf_alloc+0x1ec>)
 8010832:	4807      	ldr	r0, [pc, #28]	; (8010850 <pbuf_alloc+0x1e0>)
 8010834:	f009 f918 	bl	8019a68 <iprintf>
      return NULL;
 8010838:	2300      	movs	r3, #0
 801083a:	e001      	b.n	8010840 <pbuf_alloc+0x1d0>
      break;
 801083c:	bf00      	nop
  }
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_alloc(length=%"U16_F") == %p\n", length, (void *)p));
  return p;
 801083e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8010840:	4618      	mov	r0, r3
 8010842:	3728      	adds	r7, #40	; 0x28
 8010844:	46bd      	mov	sp, r7
 8010846:	bd80      	pop	{r7, pc}
 8010848:	0801c7b4 	.word	0x0801c7b4
 801084c:	0801c7e4 	.word	0x0801c7e4
 8010850:	0801c814 	.word	0x0801c814
 8010854:	0801c83c 	.word	0x0801c83c
 8010858:	0801c870 	.word	0x0801c870
 801085c:	0801c89c 	.word	0x0801c89c

08010860 <pbuf_alloc_reference>:
 *
 * @return the allocated pbuf.
 */
struct pbuf *
pbuf_alloc_reference(void *payload, u16_t length, pbuf_type type)
{
 8010860:	b580      	push	{r7, lr}
 8010862:	b086      	sub	sp, #24
 8010864:	af02      	add	r7, sp, #8
 8010866:	6078      	str	r0, [r7, #4]
 8010868:	460b      	mov	r3, r1
 801086a:	807b      	strh	r3, [r7, #2]
 801086c:	4613      	mov	r3, r2
 801086e:	803b      	strh	r3, [r7, #0]
  struct pbuf *p;
  LWIP_ASSERT("invalid pbuf_type", (type == PBUF_REF) || (type == PBUF_ROM));
 8010870:	883b      	ldrh	r3, [r7, #0]
 8010872:	2b41      	cmp	r3, #65	; 0x41
 8010874:	d009      	beq.n	801088a <pbuf_alloc_reference+0x2a>
 8010876:	883b      	ldrh	r3, [r7, #0]
 8010878:	2b01      	cmp	r3, #1
 801087a:	d006      	beq.n	801088a <pbuf_alloc_reference+0x2a>
 801087c:	4b0f      	ldr	r3, [pc, #60]	; (80108bc <pbuf_alloc_reference+0x5c>)
 801087e:	f44f 72a5 	mov.w	r2, #330	; 0x14a
 8010882:	490f      	ldr	r1, [pc, #60]	; (80108c0 <pbuf_alloc_reference+0x60>)
 8010884:	480f      	ldr	r0, [pc, #60]	; (80108c4 <pbuf_alloc_reference+0x64>)
 8010886:	f009 f8ef 	bl	8019a68 <iprintf>
  /* only allocate memory for the pbuf structure */
  p = (struct pbuf *)memp_malloc(MEMP_PBUF);
 801088a:	2007      	movs	r0, #7
 801088c:	f7ff faee 	bl	800fe6c <memp_malloc>
 8010890:	60f8      	str	r0, [r7, #12]
  if (p == NULL) {
 8010892:	68fb      	ldr	r3, [r7, #12]
 8010894:	2b00      	cmp	r3, #0
 8010896:	d101      	bne.n	801089c <pbuf_alloc_reference+0x3c>
    LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_LEVEL_SERIOUS,
                ("pbuf_alloc_reference: Could not allocate MEMP_PBUF for PBUF_%s.\n",
                 (type == PBUF_ROM) ? "ROM" : "REF"));
    return NULL;
 8010898:	2300      	movs	r3, #0
 801089a:	e00b      	b.n	80108b4 <pbuf_alloc_reference+0x54>
  }
  pbuf_init_alloced_pbuf(p, payload, length, length, type, 0);
 801089c:	8879      	ldrh	r1, [r7, #2]
 801089e:	887a      	ldrh	r2, [r7, #2]
 80108a0:	2300      	movs	r3, #0
 80108a2:	9301      	str	r3, [sp, #4]
 80108a4:	883b      	ldrh	r3, [r7, #0]
 80108a6:	9300      	str	r3, [sp, #0]
 80108a8:	460b      	mov	r3, r1
 80108aa:	6879      	ldr	r1, [r7, #4]
 80108ac:	68f8      	ldr	r0, [r7, #12]
 80108ae:	f7ff feb5 	bl	801061c <pbuf_init_alloced_pbuf>
  return p;
 80108b2:	68fb      	ldr	r3, [r7, #12]
}
 80108b4:	4618      	mov	r0, r3
 80108b6:	3710      	adds	r7, #16
 80108b8:	46bd      	mov	sp, r7
 80108ba:	bd80      	pop	{r7, pc}
 80108bc:	0801c7b4 	.word	0x0801c7b4
 80108c0:	0801c8b8 	.word	0x0801c8b8
 80108c4:	0801c814 	.word	0x0801c814

080108c8 <pbuf_alloced_custom>:
 *        big enough to hold 'length' plus the header size
 */
struct pbuf *
pbuf_alloced_custom(pbuf_layer l, u16_t length, pbuf_type type, struct pbuf_custom *p,
                    void *payload_mem, u16_t payload_mem_len)
{
 80108c8:	b580      	push	{r7, lr}
 80108ca:	b088      	sub	sp, #32
 80108cc:	af02      	add	r7, sp, #8
 80108ce:	607b      	str	r3, [r7, #4]
 80108d0:	4603      	mov	r3, r0
 80108d2:	73fb      	strb	r3, [r7, #15]
 80108d4:	460b      	mov	r3, r1
 80108d6:	81bb      	strh	r3, [r7, #12]
 80108d8:	4613      	mov	r3, r2
 80108da:	817b      	strh	r3, [r7, #10]
  u16_t offset = (u16_t)l;
 80108dc:	7bfb      	ldrb	r3, [r7, #15]
 80108de:	827b      	strh	r3, [r7, #18]
  void *payload;
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_alloced_custom(length=%"U16_F")\n", length));

  if (LWIP_MEM_ALIGN_SIZE(offset) + length > payload_mem_len) {
 80108e0:	8a7b      	ldrh	r3, [r7, #18]
 80108e2:	3303      	adds	r3, #3
 80108e4:	f023 0203 	bic.w	r2, r3, #3
 80108e8:	89bb      	ldrh	r3, [r7, #12]
 80108ea:	441a      	add	r2, r3
 80108ec:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80108ee:	429a      	cmp	r2, r3
 80108f0:	d901      	bls.n	80108f6 <pbuf_alloced_custom+0x2e>
    LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_LEVEL_WARNING, ("pbuf_alloced_custom(length=%"U16_F") buffer too short\n", length));
    return NULL;
 80108f2:	2300      	movs	r3, #0
 80108f4:	e018      	b.n	8010928 <pbuf_alloced_custom+0x60>
  }

  if (payload_mem != NULL) {
 80108f6:	6a3b      	ldr	r3, [r7, #32]
 80108f8:	2b00      	cmp	r3, #0
 80108fa:	d007      	beq.n	801090c <pbuf_alloced_custom+0x44>
    payload = (u8_t *)payload_mem + LWIP_MEM_ALIGN_SIZE(offset);
 80108fc:	8a7b      	ldrh	r3, [r7, #18]
 80108fe:	3303      	adds	r3, #3
 8010900:	f023 0303 	bic.w	r3, r3, #3
 8010904:	6a3a      	ldr	r2, [r7, #32]
 8010906:	4413      	add	r3, r2
 8010908:	617b      	str	r3, [r7, #20]
 801090a:	e001      	b.n	8010910 <pbuf_alloced_custom+0x48>
  } else {
    payload = NULL;
 801090c:	2300      	movs	r3, #0
 801090e:	617b      	str	r3, [r7, #20]
  }
  pbuf_init_alloced_pbuf(&p->pbuf, payload, length, length, type, PBUF_FLAG_IS_CUSTOM);
 8010910:	6878      	ldr	r0, [r7, #4]
 8010912:	89b9      	ldrh	r1, [r7, #12]
 8010914:	89ba      	ldrh	r2, [r7, #12]
 8010916:	2302      	movs	r3, #2
 8010918:	9301      	str	r3, [sp, #4]
 801091a:	897b      	ldrh	r3, [r7, #10]
 801091c:	9300      	str	r3, [sp, #0]
 801091e:	460b      	mov	r3, r1
 8010920:	6979      	ldr	r1, [r7, #20]
 8010922:	f7ff fe7b 	bl	801061c <pbuf_init_alloced_pbuf>
  return &p->pbuf;
 8010926:	687b      	ldr	r3, [r7, #4]
}
 8010928:	4618      	mov	r0, r3
 801092a:	3718      	adds	r7, #24
 801092c:	46bd      	mov	sp, r7
 801092e:	bd80      	pop	{r7, pc}

08010930 <pbuf_realloc>:
 *
 * @note Despite its name, pbuf_realloc cannot grow the size of a pbuf (chain).
 */
void
pbuf_realloc(struct pbuf *p, u16_t new_len)
{
 8010930:	b580      	push	{r7, lr}
 8010932:	b084      	sub	sp, #16
 8010934:	af00      	add	r7, sp, #0
 8010936:	6078      	str	r0, [r7, #4]
 8010938:	460b      	mov	r3, r1
 801093a:	807b      	strh	r3, [r7, #2]
  struct pbuf *q;
  u16_t rem_len; /* remaining length */
  u16_t shrink;

  LWIP_ASSERT("pbuf_realloc: p != NULL", p != NULL);
 801093c:	687b      	ldr	r3, [r7, #4]
 801093e:	2b00      	cmp	r3, #0
 8010940:	d106      	bne.n	8010950 <pbuf_realloc+0x20>
 8010942:	4b39      	ldr	r3, [pc, #228]	; (8010a28 <pbuf_realloc+0xf8>)
 8010944:	f44f 72cc 	mov.w	r2, #408	; 0x198
 8010948:	4938      	ldr	r1, [pc, #224]	; (8010a2c <pbuf_realloc+0xfc>)
 801094a:	4839      	ldr	r0, [pc, #228]	; (8010a30 <pbuf_realloc+0x100>)
 801094c:	f009 f88c 	bl	8019a68 <iprintf>

  /* desired length larger than current length? */
  if (new_len >= p->tot_len) {
 8010950:	687b      	ldr	r3, [r7, #4]
 8010952:	891b      	ldrh	r3, [r3, #8]
 8010954:	887a      	ldrh	r2, [r7, #2]
 8010956:	429a      	cmp	r2, r3
 8010958:	d261      	bcs.n	8010a1e <pbuf_realloc+0xee>
    return;
  }

  /* the pbuf chain grows by (new_len - p->tot_len) bytes
   * (which may be negative in case of shrinking) */
  shrink = (u16_t)(p->tot_len - new_len);
 801095a:	687b      	ldr	r3, [r7, #4]
 801095c:	891a      	ldrh	r2, [r3, #8]
 801095e:	887b      	ldrh	r3, [r7, #2]
 8010960:	1ad3      	subs	r3, r2, r3
 8010962:	813b      	strh	r3, [r7, #8]

  /* first, step over any pbufs that should remain in the chain */
  rem_len = new_len;
 8010964:	887b      	ldrh	r3, [r7, #2]
 8010966:	817b      	strh	r3, [r7, #10]
  q = p;
 8010968:	687b      	ldr	r3, [r7, #4]
 801096a:	60fb      	str	r3, [r7, #12]
  /* should this pbuf be kept? */
  while (rem_len > q->len) {
 801096c:	e018      	b.n	80109a0 <pbuf_realloc+0x70>
    /* decrease remaining length by pbuf length */
    rem_len = (u16_t)(rem_len - q->len);
 801096e:	68fb      	ldr	r3, [r7, #12]
 8010970:	895b      	ldrh	r3, [r3, #10]
 8010972:	897a      	ldrh	r2, [r7, #10]
 8010974:	1ad3      	subs	r3, r2, r3
 8010976:	817b      	strh	r3, [r7, #10]
    /* decrease total length indicator */
    q->tot_len = (u16_t)(q->tot_len - shrink);
 8010978:	68fb      	ldr	r3, [r7, #12]
 801097a:	891a      	ldrh	r2, [r3, #8]
 801097c:	893b      	ldrh	r3, [r7, #8]
 801097e:	1ad3      	subs	r3, r2, r3
 8010980:	b29a      	uxth	r2, r3
 8010982:	68fb      	ldr	r3, [r7, #12]
 8010984:	811a      	strh	r2, [r3, #8]
    /* proceed to next pbuf in chain */
    q = q->next;
 8010986:	68fb      	ldr	r3, [r7, #12]
 8010988:	681b      	ldr	r3, [r3, #0]
 801098a:	60fb      	str	r3, [r7, #12]
    LWIP_ASSERT("pbuf_realloc: q != NULL", q != NULL);
 801098c:	68fb      	ldr	r3, [r7, #12]
 801098e:	2b00      	cmp	r3, #0
 8010990:	d106      	bne.n	80109a0 <pbuf_realloc+0x70>
 8010992:	4b25      	ldr	r3, [pc, #148]	; (8010a28 <pbuf_realloc+0xf8>)
 8010994:	f240 12af 	movw	r2, #431	; 0x1af
 8010998:	4926      	ldr	r1, [pc, #152]	; (8010a34 <pbuf_realloc+0x104>)
 801099a:	4825      	ldr	r0, [pc, #148]	; (8010a30 <pbuf_realloc+0x100>)
 801099c:	f009 f864 	bl	8019a68 <iprintf>
  while (rem_len > q->len) {
 80109a0:	68fb      	ldr	r3, [r7, #12]
 80109a2:	895b      	ldrh	r3, [r3, #10]
 80109a4:	897a      	ldrh	r2, [r7, #10]
 80109a6:	429a      	cmp	r2, r3
 80109a8:	d8e1      	bhi.n	801096e <pbuf_realloc+0x3e>
  /* we have now reached the new last pbuf (in q) */
  /* rem_len == desired length for pbuf q */

  /* shrink allocated memory for PBUF_RAM */
  /* (other types merely adjust their length fields */
  if (pbuf_match_allocsrc(q, PBUF_TYPE_ALLOC_SRC_MASK_STD_HEAP) && (rem_len != q->len)
 80109aa:	68fb      	ldr	r3, [r7, #12]
 80109ac:	7b1b      	ldrb	r3, [r3, #12]
 80109ae:	f003 030f 	and.w	r3, r3, #15
 80109b2:	2b00      	cmp	r3, #0
 80109b4:	d11f      	bne.n	80109f6 <pbuf_realloc+0xc6>
 80109b6:	68fb      	ldr	r3, [r7, #12]
 80109b8:	895b      	ldrh	r3, [r3, #10]
 80109ba:	897a      	ldrh	r2, [r7, #10]
 80109bc:	429a      	cmp	r2, r3
 80109be:	d01a      	beq.n	80109f6 <pbuf_realloc+0xc6>
#if LWIP_SUPPORT_CUSTOM_PBUF
      && ((q->flags & PBUF_FLAG_IS_CUSTOM) == 0)
 80109c0:	68fb      	ldr	r3, [r7, #12]
 80109c2:	7b5b      	ldrb	r3, [r3, #13]
 80109c4:	f003 0302 	and.w	r3, r3, #2
 80109c8:	2b00      	cmp	r3, #0
 80109ca:	d114      	bne.n	80109f6 <pbuf_realloc+0xc6>
#endif /* LWIP_SUPPORT_CUSTOM_PBUF */
     ) {
    /* reallocate and adjust the length of the pbuf that will be split */
    q = (struct pbuf *)mem_trim(q, (mem_size_t)(((u8_t *)q->payload - (u8_t *)q) + rem_len));
 80109cc:	68fb      	ldr	r3, [r7, #12]
 80109ce:	685a      	ldr	r2, [r3, #4]
 80109d0:	68fb      	ldr	r3, [r7, #12]
 80109d2:	1ad2      	subs	r2, r2, r3
 80109d4:	897b      	ldrh	r3, [r7, #10]
 80109d6:	4413      	add	r3, r2
 80109d8:	4619      	mov	r1, r3
 80109da:	68f8      	ldr	r0, [r7, #12]
 80109dc:	f7fe ffca 	bl	800f974 <mem_trim>
 80109e0:	60f8      	str	r0, [r7, #12]
    LWIP_ASSERT("mem_trim returned q == NULL", q != NULL);
 80109e2:	68fb      	ldr	r3, [r7, #12]
 80109e4:	2b00      	cmp	r3, #0
 80109e6:	d106      	bne.n	80109f6 <pbuf_realloc+0xc6>
 80109e8:	4b0f      	ldr	r3, [pc, #60]	; (8010a28 <pbuf_realloc+0xf8>)
 80109ea:	f240 12bd 	movw	r2, #445	; 0x1bd
 80109ee:	4912      	ldr	r1, [pc, #72]	; (8010a38 <pbuf_realloc+0x108>)
 80109f0:	480f      	ldr	r0, [pc, #60]	; (8010a30 <pbuf_realloc+0x100>)
 80109f2:	f009 f839 	bl	8019a68 <iprintf>
  }
  /* adjust length fields for new last pbuf */
  q->len = rem_len;
 80109f6:	68fb      	ldr	r3, [r7, #12]
 80109f8:	897a      	ldrh	r2, [r7, #10]
 80109fa:	815a      	strh	r2, [r3, #10]
  q->tot_len = q->len;
 80109fc:	68fb      	ldr	r3, [r7, #12]
 80109fe:	895a      	ldrh	r2, [r3, #10]
 8010a00:	68fb      	ldr	r3, [r7, #12]
 8010a02:	811a      	strh	r2, [r3, #8]

  /* any remaining pbufs in chain? */
  if (q->next != NULL) {
 8010a04:	68fb      	ldr	r3, [r7, #12]
 8010a06:	681b      	ldr	r3, [r3, #0]
 8010a08:	2b00      	cmp	r3, #0
 8010a0a:	d004      	beq.n	8010a16 <pbuf_realloc+0xe6>
    /* free remaining pbufs in chain */
    pbuf_free(q->next);
 8010a0c:	68fb      	ldr	r3, [r7, #12]
 8010a0e:	681b      	ldr	r3, [r3, #0]
 8010a10:	4618      	mov	r0, r3
 8010a12:	f000 f911 	bl	8010c38 <pbuf_free>
  }
  /* q is last packet in chain */
  q->next = NULL;
 8010a16:	68fb      	ldr	r3, [r7, #12]
 8010a18:	2200      	movs	r2, #0
 8010a1a:	601a      	str	r2, [r3, #0]
 8010a1c:	e000      	b.n	8010a20 <pbuf_realloc+0xf0>
    return;
 8010a1e:	bf00      	nop

}
 8010a20:	3710      	adds	r7, #16
 8010a22:	46bd      	mov	sp, r7
 8010a24:	bd80      	pop	{r7, pc}
 8010a26:	bf00      	nop
 8010a28:	0801c7b4 	.word	0x0801c7b4
 8010a2c:	0801c8cc 	.word	0x0801c8cc
 8010a30:	0801c814 	.word	0x0801c814
 8010a34:	0801c8e4 	.word	0x0801c8e4
 8010a38:	0801c8fc 	.word	0x0801c8fc

08010a3c <pbuf_add_header_impl>:
 * @return non-zero on failure, zero on success.
 *
 */
static u8_t
pbuf_add_header_impl(struct pbuf *p, size_t header_size_increment, u8_t force)
{
 8010a3c:	b580      	push	{r7, lr}
 8010a3e:	b086      	sub	sp, #24
 8010a40:	af00      	add	r7, sp, #0
 8010a42:	60f8      	str	r0, [r7, #12]
 8010a44:	60b9      	str	r1, [r7, #8]
 8010a46:	4613      	mov	r3, r2
 8010a48:	71fb      	strb	r3, [r7, #7]
  u16_t type_internal;
  void *payload;
  u16_t increment_magnitude;

  LWIP_ASSERT("p != NULL", p != NULL);
 8010a4a:	68fb      	ldr	r3, [r7, #12]
 8010a4c:	2b00      	cmp	r3, #0
 8010a4e:	d106      	bne.n	8010a5e <pbuf_add_header_impl+0x22>
 8010a50:	4b2b      	ldr	r3, [pc, #172]	; (8010b00 <pbuf_add_header_impl+0xc4>)
 8010a52:	f240 12df 	movw	r2, #479	; 0x1df
 8010a56:	492b      	ldr	r1, [pc, #172]	; (8010b04 <pbuf_add_header_impl+0xc8>)
 8010a58:	482b      	ldr	r0, [pc, #172]	; (8010b08 <pbuf_add_header_impl+0xcc>)
 8010a5a:	f009 f805 	bl	8019a68 <iprintf>
  if ((p == NULL) || (header_size_increment > 0xFFFF)) {
 8010a5e:	68fb      	ldr	r3, [r7, #12]
 8010a60:	2b00      	cmp	r3, #0
 8010a62:	d003      	beq.n	8010a6c <pbuf_add_header_impl+0x30>
 8010a64:	68bb      	ldr	r3, [r7, #8]
 8010a66:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8010a6a:	d301      	bcc.n	8010a70 <pbuf_add_header_impl+0x34>
    return 1;
 8010a6c:	2301      	movs	r3, #1
 8010a6e:	e043      	b.n	8010af8 <pbuf_add_header_impl+0xbc>
  }
  if (header_size_increment == 0) {
 8010a70:	68bb      	ldr	r3, [r7, #8]
 8010a72:	2b00      	cmp	r3, #0
 8010a74:	d101      	bne.n	8010a7a <pbuf_add_header_impl+0x3e>
    return 0;
 8010a76:	2300      	movs	r3, #0
 8010a78:	e03e      	b.n	8010af8 <pbuf_add_header_impl+0xbc>
  }

  increment_magnitude = (u16_t)header_size_increment;
 8010a7a:	68bb      	ldr	r3, [r7, #8]
 8010a7c:	827b      	strh	r3, [r7, #18]
  /* Do not allow tot_len to wrap as a result. */
  if ((u16_t)(increment_magnitude + p->tot_len) < increment_magnitude) {
 8010a7e:	68fb      	ldr	r3, [r7, #12]
 8010a80:	891a      	ldrh	r2, [r3, #8]
 8010a82:	8a7b      	ldrh	r3, [r7, #18]
 8010a84:	4413      	add	r3, r2
 8010a86:	b29b      	uxth	r3, r3
 8010a88:	8a7a      	ldrh	r2, [r7, #18]
 8010a8a:	429a      	cmp	r2, r3
 8010a8c:	d901      	bls.n	8010a92 <pbuf_add_header_impl+0x56>
    return 1;
 8010a8e:	2301      	movs	r3, #1
 8010a90:	e032      	b.n	8010af8 <pbuf_add_header_impl+0xbc>
  }

  type_internal = p->type_internal;
 8010a92:	68fb      	ldr	r3, [r7, #12]
 8010a94:	7b1b      	ldrb	r3, [r3, #12]
 8010a96:	823b      	strh	r3, [r7, #16]

  /* pbuf types containing payloads? */
  if (type_internal & PBUF_TYPE_FLAG_STRUCT_DATA_CONTIGUOUS) {
 8010a98:	8a3b      	ldrh	r3, [r7, #16]
 8010a9a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8010a9e:	2b00      	cmp	r3, #0
 8010aa0:	d00c      	beq.n	8010abc <pbuf_add_header_impl+0x80>
    /* set new payload pointer */
    payload = (u8_t *)p->payload - header_size_increment;
 8010aa2:	68fb      	ldr	r3, [r7, #12]
 8010aa4:	685a      	ldr	r2, [r3, #4]
 8010aa6:	68bb      	ldr	r3, [r7, #8]
 8010aa8:	425b      	negs	r3, r3
 8010aaa:	4413      	add	r3, r2
 8010aac:	617b      	str	r3, [r7, #20]
    /* boundary check fails? */
    if ((u8_t *)payload < (u8_t *)p + SIZEOF_STRUCT_PBUF) {
 8010aae:	68fb      	ldr	r3, [r7, #12]
 8010ab0:	3310      	adds	r3, #16
 8010ab2:	697a      	ldr	r2, [r7, #20]
 8010ab4:	429a      	cmp	r2, r3
 8010ab6:	d20d      	bcs.n	8010ad4 <pbuf_add_header_impl+0x98>
      LWIP_DEBUGF( PBUF_DEBUG | LWIP_DBG_TRACE,
                   ("pbuf_add_header: failed as %p < %p (not enough space for new header size)\n",
                    (void *)payload, (void *)((u8_t *)p + SIZEOF_STRUCT_PBUF)));
      /* bail out unsuccessfully */
      return 1;
 8010ab8:	2301      	movs	r3, #1
 8010aba:	e01d      	b.n	8010af8 <pbuf_add_header_impl+0xbc>
    }
    /* pbuf types referring to external payloads? */
  } else {
    /* hide a header in the payload? */
    if (force) {
 8010abc:	79fb      	ldrb	r3, [r7, #7]
 8010abe:	2b00      	cmp	r3, #0
 8010ac0:	d006      	beq.n	8010ad0 <pbuf_add_header_impl+0x94>
      payload = (u8_t *)p->payload - header_size_increment;
 8010ac2:	68fb      	ldr	r3, [r7, #12]
 8010ac4:	685a      	ldr	r2, [r3, #4]
 8010ac6:	68bb      	ldr	r3, [r7, #8]
 8010ac8:	425b      	negs	r3, r3
 8010aca:	4413      	add	r3, r2
 8010acc:	617b      	str	r3, [r7, #20]
 8010ace:	e001      	b.n	8010ad4 <pbuf_add_header_impl+0x98>
    } else {
      /* cannot expand payload to front (yet!)
       * bail out unsuccessfully */
      return 1;
 8010ad0:	2301      	movs	r3, #1
 8010ad2:	e011      	b.n	8010af8 <pbuf_add_header_impl+0xbc>
  }
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_add_header: old %p new %p (%"U16_F")\n",
              (void *)p->payload, (void *)payload, increment_magnitude));

  /* modify pbuf fields */
  p->payload = payload;
 8010ad4:	68fb      	ldr	r3, [r7, #12]
 8010ad6:	697a      	ldr	r2, [r7, #20]
 8010ad8:	605a      	str	r2, [r3, #4]
  p->len = (u16_t)(p->len + increment_magnitude);
 8010ada:	68fb      	ldr	r3, [r7, #12]
 8010adc:	895a      	ldrh	r2, [r3, #10]
 8010ade:	8a7b      	ldrh	r3, [r7, #18]
 8010ae0:	4413      	add	r3, r2
 8010ae2:	b29a      	uxth	r2, r3
 8010ae4:	68fb      	ldr	r3, [r7, #12]
 8010ae6:	815a      	strh	r2, [r3, #10]
  p->tot_len = (u16_t)(p->tot_len + increment_magnitude);
 8010ae8:	68fb      	ldr	r3, [r7, #12]
 8010aea:	891a      	ldrh	r2, [r3, #8]
 8010aec:	8a7b      	ldrh	r3, [r7, #18]
 8010aee:	4413      	add	r3, r2
 8010af0:	b29a      	uxth	r2, r3
 8010af2:	68fb      	ldr	r3, [r7, #12]
 8010af4:	811a      	strh	r2, [r3, #8]


  return 0;
 8010af6:	2300      	movs	r3, #0
}
 8010af8:	4618      	mov	r0, r3
 8010afa:	3718      	adds	r7, #24
 8010afc:	46bd      	mov	sp, r7
 8010afe:	bd80      	pop	{r7, pc}
 8010b00:	0801c7b4 	.word	0x0801c7b4
 8010b04:	0801c918 	.word	0x0801c918
 8010b08:	0801c814 	.word	0x0801c814

08010b0c <pbuf_add_header>:
 * @return non-zero on failure, zero on success.
 *
 */
u8_t
pbuf_add_header(struct pbuf *p, size_t header_size_increment)
{
 8010b0c:	b580      	push	{r7, lr}
 8010b0e:	b082      	sub	sp, #8
 8010b10:	af00      	add	r7, sp, #0
 8010b12:	6078      	str	r0, [r7, #4]
 8010b14:	6039      	str	r1, [r7, #0]
  return pbuf_add_header_impl(p, header_size_increment, 0);
 8010b16:	2200      	movs	r2, #0
 8010b18:	6839      	ldr	r1, [r7, #0]
 8010b1a:	6878      	ldr	r0, [r7, #4]
 8010b1c:	f7ff ff8e 	bl	8010a3c <pbuf_add_header_impl>
 8010b20:	4603      	mov	r3, r0
}
 8010b22:	4618      	mov	r0, r3
 8010b24:	3708      	adds	r7, #8
 8010b26:	46bd      	mov	sp, r7
 8010b28:	bd80      	pop	{r7, pc}
	...

08010b2c <pbuf_remove_header>:
 * @return non-zero on failure, zero on success.
 *
 */
u8_t
pbuf_remove_header(struct pbuf *p, size_t header_size_decrement)
{
 8010b2c:	b580      	push	{r7, lr}
 8010b2e:	b084      	sub	sp, #16
 8010b30:	af00      	add	r7, sp, #0
 8010b32:	6078      	str	r0, [r7, #4]
 8010b34:	6039      	str	r1, [r7, #0]
  void *payload;
  u16_t increment_magnitude;

  LWIP_ASSERT("p != NULL", p != NULL);
 8010b36:	687b      	ldr	r3, [r7, #4]
 8010b38:	2b00      	cmp	r3, #0
 8010b3a:	d106      	bne.n	8010b4a <pbuf_remove_header+0x1e>
 8010b3c:	4b20      	ldr	r3, [pc, #128]	; (8010bc0 <pbuf_remove_header+0x94>)
 8010b3e:	f240 224b 	movw	r2, #587	; 0x24b
 8010b42:	4920      	ldr	r1, [pc, #128]	; (8010bc4 <pbuf_remove_header+0x98>)
 8010b44:	4820      	ldr	r0, [pc, #128]	; (8010bc8 <pbuf_remove_header+0x9c>)
 8010b46:	f008 ff8f 	bl	8019a68 <iprintf>
  if ((p == NULL) || (header_size_decrement > 0xFFFF)) {
 8010b4a:	687b      	ldr	r3, [r7, #4]
 8010b4c:	2b00      	cmp	r3, #0
 8010b4e:	d003      	beq.n	8010b58 <pbuf_remove_header+0x2c>
 8010b50:	683b      	ldr	r3, [r7, #0]
 8010b52:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8010b56:	d301      	bcc.n	8010b5c <pbuf_remove_header+0x30>
    return 1;
 8010b58:	2301      	movs	r3, #1
 8010b5a:	e02c      	b.n	8010bb6 <pbuf_remove_header+0x8a>
  }
  if (header_size_decrement == 0) {
 8010b5c:	683b      	ldr	r3, [r7, #0]
 8010b5e:	2b00      	cmp	r3, #0
 8010b60:	d101      	bne.n	8010b66 <pbuf_remove_header+0x3a>
    return 0;
 8010b62:	2300      	movs	r3, #0
 8010b64:	e027      	b.n	8010bb6 <pbuf_remove_header+0x8a>
  }

  increment_magnitude = (u16_t)header_size_decrement;
 8010b66:	683b      	ldr	r3, [r7, #0]
 8010b68:	81fb      	strh	r3, [r7, #14]
  /* Check that we aren't going to move off the end of the pbuf */
  LWIP_ERROR("increment_magnitude <= p->len", (increment_magnitude <= p->len), return 1;);
 8010b6a:	687b      	ldr	r3, [r7, #4]
 8010b6c:	895b      	ldrh	r3, [r3, #10]
 8010b6e:	89fa      	ldrh	r2, [r7, #14]
 8010b70:	429a      	cmp	r2, r3
 8010b72:	d908      	bls.n	8010b86 <pbuf_remove_header+0x5a>
 8010b74:	4b12      	ldr	r3, [pc, #72]	; (8010bc0 <pbuf_remove_header+0x94>)
 8010b76:	f240 2255 	movw	r2, #597	; 0x255
 8010b7a:	4914      	ldr	r1, [pc, #80]	; (8010bcc <pbuf_remove_header+0xa0>)
 8010b7c:	4812      	ldr	r0, [pc, #72]	; (8010bc8 <pbuf_remove_header+0x9c>)
 8010b7e:	f008 ff73 	bl	8019a68 <iprintf>
 8010b82:	2301      	movs	r3, #1
 8010b84:	e017      	b.n	8010bb6 <pbuf_remove_header+0x8a>

  /* remember current payload pointer */
  payload = p->payload;
 8010b86:	687b      	ldr	r3, [r7, #4]
 8010b88:	685b      	ldr	r3, [r3, #4]
 8010b8a:	60bb      	str	r3, [r7, #8]
  LWIP_UNUSED_ARG(payload); /* only used in LWIP_DEBUGF below */

  /* increase payload pointer (guarded by length check above) */
  p->payload = (u8_t *)p->payload + header_size_decrement;
 8010b8c:	687b      	ldr	r3, [r7, #4]
 8010b8e:	685a      	ldr	r2, [r3, #4]
 8010b90:	683b      	ldr	r3, [r7, #0]
 8010b92:	441a      	add	r2, r3
 8010b94:	687b      	ldr	r3, [r7, #4]
 8010b96:	605a      	str	r2, [r3, #4]
  /* modify pbuf length fields */
  p->len = (u16_t)(p->len - increment_magnitude);
 8010b98:	687b      	ldr	r3, [r7, #4]
 8010b9a:	895a      	ldrh	r2, [r3, #10]
 8010b9c:	89fb      	ldrh	r3, [r7, #14]
 8010b9e:	1ad3      	subs	r3, r2, r3
 8010ba0:	b29a      	uxth	r2, r3
 8010ba2:	687b      	ldr	r3, [r7, #4]
 8010ba4:	815a      	strh	r2, [r3, #10]
  p->tot_len = (u16_t)(p->tot_len - increment_magnitude);
 8010ba6:	687b      	ldr	r3, [r7, #4]
 8010ba8:	891a      	ldrh	r2, [r3, #8]
 8010baa:	89fb      	ldrh	r3, [r7, #14]
 8010bac:	1ad3      	subs	r3, r2, r3
 8010bae:	b29a      	uxth	r2, r3
 8010bb0:	687b      	ldr	r3, [r7, #4]
 8010bb2:	811a      	strh	r2, [r3, #8]

  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_remove_header: old %p new %p (%"U16_F")\n",
              (void *)payload, (void *)p->payload, increment_magnitude));

  return 0;
 8010bb4:	2300      	movs	r3, #0
}
 8010bb6:	4618      	mov	r0, r3
 8010bb8:	3710      	adds	r7, #16
 8010bba:	46bd      	mov	sp, r7
 8010bbc:	bd80      	pop	{r7, pc}
 8010bbe:	bf00      	nop
 8010bc0:	0801c7b4 	.word	0x0801c7b4
 8010bc4:	0801c918 	.word	0x0801c918
 8010bc8:	0801c814 	.word	0x0801c814
 8010bcc:	0801c924 	.word	0x0801c924

08010bd0 <pbuf_header_impl>:

static u8_t
pbuf_header_impl(struct pbuf *p, s16_t header_size_increment, u8_t force)
{
 8010bd0:	b580      	push	{r7, lr}
 8010bd2:	b082      	sub	sp, #8
 8010bd4:	af00      	add	r7, sp, #0
 8010bd6:	6078      	str	r0, [r7, #4]
 8010bd8:	460b      	mov	r3, r1
 8010bda:	807b      	strh	r3, [r7, #2]
 8010bdc:	4613      	mov	r3, r2
 8010bde:	707b      	strb	r3, [r7, #1]
  if (header_size_increment < 0) {
 8010be0:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8010be4:	2b00      	cmp	r3, #0
 8010be6:	da08      	bge.n	8010bfa <pbuf_header_impl+0x2a>
    return pbuf_remove_header(p, (size_t) - header_size_increment);
 8010be8:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8010bec:	425b      	negs	r3, r3
 8010bee:	4619      	mov	r1, r3
 8010bf0:	6878      	ldr	r0, [r7, #4]
 8010bf2:	f7ff ff9b 	bl	8010b2c <pbuf_remove_header>
 8010bf6:	4603      	mov	r3, r0
 8010bf8:	e007      	b.n	8010c0a <pbuf_header_impl+0x3a>
  } else {
    return pbuf_add_header_impl(p, (size_t)header_size_increment, force);
 8010bfa:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8010bfe:	787a      	ldrb	r2, [r7, #1]
 8010c00:	4619      	mov	r1, r3
 8010c02:	6878      	ldr	r0, [r7, #4]
 8010c04:	f7ff ff1a 	bl	8010a3c <pbuf_add_header_impl>
 8010c08:	4603      	mov	r3, r0
  }
}
 8010c0a:	4618      	mov	r0, r3
 8010c0c:	3708      	adds	r7, #8
 8010c0e:	46bd      	mov	sp, r7
 8010c10:	bd80      	pop	{r7, pc}

08010c12 <pbuf_header_force>:
 * Same as pbuf_header but does not check if 'header_size > 0' is allowed.
 * This is used internally only, to allow PBUF_REF for RX.
 */
u8_t
pbuf_header_force(struct pbuf *p, s16_t header_size_increment)
{
 8010c12:	b580      	push	{r7, lr}
 8010c14:	b082      	sub	sp, #8
 8010c16:	af00      	add	r7, sp, #0
 8010c18:	6078      	str	r0, [r7, #4]
 8010c1a:	460b      	mov	r3, r1
 8010c1c:	807b      	strh	r3, [r7, #2]
  return pbuf_header_impl(p, header_size_increment, 1);
 8010c1e:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8010c22:	2201      	movs	r2, #1
 8010c24:	4619      	mov	r1, r3
 8010c26:	6878      	ldr	r0, [r7, #4]
 8010c28:	f7ff ffd2 	bl	8010bd0 <pbuf_header_impl>
 8010c2c:	4603      	mov	r3, r0
}
 8010c2e:	4618      	mov	r0, r3
 8010c30:	3708      	adds	r7, #8
 8010c32:	46bd      	mov	sp, r7
 8010c34:	bd80      	pop	{r7, pc}
	...

08010c38 <pbuf_free>:
 * 1->1->1 becomes .......
 *
 */
u8_t
pbuf_free(struct pbuf *p)
{
 8010c38:	b580      	push	{r7, lr}
 8010c3a:	b086      	sub	sp, #24
 8010c3c:	af00      	add	r7, sp, #0
 8010c3e:	6078      	str	r0, [r7, #4]
  u8_t alloc_src;
  struct pbuf *q;
  u8_t count;

  if (p == NULL) {
 8010c40:	687b      	ldr	r3, [r7, #4]
 8010c42:	2b00      	cmp	r3, #0
 8010c44:	d10b      	bne.n	8010c5e <pbuf_free+0x26>
    LWIP_ASSERT("p != NULL", p != NULL);
 8010c46:	687b      	ldr	r3, [r7, #4]
 8010c48:	2b00      	cmp	r3, #0
 8010c4a:	d106      	bne.n	8010c5a <pbuf_free+0x22>
 8010c4c:	4b38      	ldr	r3, [pc, #224]	; (8010d30 <pbuf_free+0xf8>)
 8010c4e:	f44f 7237 	mov.w	r2, #732	; 0x2dc
 8010c52:	4938      	ldr	r1, [pc, #224]	; (8010d34 <pbuf_free+0xfc>)
 8010c54:	4838      	ldr	r0, [pc, #224]	; (8010d38 <pbuf_free+0x100>)
 8010c56:	f008 ff07 	bl	8019a68 <iprintf>
    /* if assertions are disabled, proceed with debug output */
    LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_LEVEL_SERIOUS,
                ("pbuf_free(p == NULL) was called.\n"));
    return 0;
 8010c5a:	2300      	movs	r3, #0
 8010c5c:	e063      	b.n	8010d26 <pbuf_free+0xee>
  }
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_free(%p)\n", (void *)p));

  PERF_START;

  count = 0;
 8010c5e:	2300      	movs	r3, #0
 8010c60:	75fb      	strb	r3, [r7, #23]
  /* de-allocate all consecutive pbufs from the head of the chain that
   * obtain a zero reference count after decrementing*/
  while (p != NULL) {
 8010c62:	e05c      	b.n	8010d1e <pbuf_free+0xe6>
    /* Since decrementing ref cannot be guaranteed to be a single machine operation
     * we must protect it. We put the new ref into a local variable to prevent
     * further protection. */
    SYS_ARCH_PROTECT(old_level);
    /* all pbufs in a chain are referenced at least once */
    LWIP_ASSERT("pbuf_free: p->ref > 0", p->ref > 0);
 8010c64:	687b      	ldr	r3, [r7, #4]
 8010c66:	7b9b      	ldrb	r3, [r3, #14]
 8010c68:	2b00      	cmp	r3, #0
 8010c6a:	d106      	bne.n	8010c7a <pbuf_free+0x42>
 8010c6c:	4b30      	ldr	r3, [pc, #192]	; (8010d30 <pbuf_free+0xf8>)
 8010c6e:	f240 22f1 	movw	r2, #753	; 0x2f1
 8010c72:	4932      	ldr	r1, [pc, #200]	; (8010d3c <pbuf_free+0x104>)
 8010c74:	4830      	ldr	r0, [pc, #192]	; (8010d38 <pbuf_free+0x100>)
 8010c76:	f008 fef7 	bl	8019a68 <iprintf>
    /* decrease reference count (number of pointers to pbuf) */
    ref = --(p->ref);
 8010c7a:	687b      	ldr	r3, [r7, #4]
 8010c7c:	7b9b      	ldrb	r3, [r3, #14]
 8010c7e:	3b01      	subs	r3, #1
 8010c80:	b2da      	uxtb	r2, r3
 8010c82:	687b      	ldr	r3, [r7, #4]
 8010c84:	739a      	strb	r2, [r3, #14]
 8010c86:	687b      	ldr	r3, [r7, #4]
 8010c88:	7b9b      	ldrb	r3, [r3, #14]
 8010c8a:	75bb      	strb	r3, [r7, #22]
    SYS_ARCH_UNPROTECT(old_level);
    /* this pbuf is no longer referenced to? */
    if (ref == 0) {
 8010c8c:	7dbb      	ldrb	r3, [r7, #22]
 8010c8e:	2b00      	cmp	r3, #0
 8010c90:	d143      	bne.n	8010d1a <pbuf_free+0xe2>
      /* remember next pbuf in chain for next iteration */
      q = p->next;
 8010c92:	687b      	ldr	r3, [r7, #4]
 8010c94:	681b      	ldr	r3, [r3, #0]
 8010c96:	613b      	str	r3, [r7, #16]
      LWIP_DEBUGF( PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_free: deallocating %p\n", (void *)p));
      alloc_src = pbuf_get_allocsrc(p);
 8010c98:	687b      	ldr	r3, [r7, #4]
 8010c9a:	7b1b      	ldrb	r3, [r3, #12]
 8010c9c:	f003 030f 	and.w	r3, r3, #15
 8010ca0:	73fb      	strb	r3, [r7, #15]
#if LWIP_SUPPORT_CUSTOM_PBUF
      /* is this a custom pbuf? */
      if ((p->flags & PBUF_FLAG_IS_CUSTOM) != 0) {
 8010ca2:	687b      	ldr	r3, [r7, #4]
 8010ca4:	7b5b      	ldrb	r3, [r3, #13]
 8010ca6:	f003 0302 	and.w	r3, r3, #2
 8010caa:	2b00      	cmp	r3, #0
 8010cac:	d011      	beq.n	8010cd2 <pbuf_free+0x9a>
        struct pbuf_custom *pc = (struct pbuf_custom *)p;
 8010cae:	687b      	ldr	r3, [r7, #4]
 8010cb0:	60bb      	str	r3, [r7, #8]
        LWIP_ASSERT("pc->custom_free_function != NULL", pc->custom_free_function != NULL);
 8010cb2:	68bb      	ldr	r3, [r7, #8]
 8010cb4:	691b      	ldr	r3, [r3, #16]
 8010cb6:	2b00      	cmp	r3, #0
 8010cb8:	d106      	bne.n	8010cc8 <pbuf_free+0x90>
 8010cba:	4b1d      	ldr	r3, [pc, #116]	; (8010d30 <pbuf_free+0xf8>)
 8010cbc:	f240 22ff 	movw	r2, #767	; 0x2ff
 8010cc0:	491f      	ldr	r1, [pc, #124]	; (8010d40 <pbuf_free+0x108>)
 8010cc2:	481d      	ldr	r0, [pc, #116]	; (8010d38 <pbuf_free+0x100>)
 8010cc4:	f008 fed0 	bl	8019a68 <iprintf>
        pc->custom_free_function(p);
 8010cc8:	68bb      	ldr	r3, [r7, #8]
 8010cca:	691b      	ldr	r3, [r3, #16]
 8010ccc:	6878      	ldr	r0, [r7, #4]
 8010cce:	4798      	blx	r3
 8010cd0:	e01d      	b.n	8010d0e <pbuf_free+0xd6>
      } else
#endif /* LWIP_SUPPORT_CUSTOM_PBUF */
      {
        /* is this a pbuf from the pool? */
        if (alloc_src == PBUF_TYPE_ALLOC_SRC_MASK_STD_MEMP_PBUF_POOL) {
 8010cd2:	7bfb      	ldrb	r3, [r7, #15]
 8010cd4:	2b02      	cmp	r3, #2
 8010cd6:	d104      	bne.n	8010ce2 <pbuf_free+0xaa>
          memp_free(MEMP_PBUF_POOL, p);
 8010cd8:	6879      	ldr	r1, [r7, #4]
 8010cda:	2008      	movs	r0, #8
 8010cdc:	f7ff f936 	bl	800ff4c <memp_free>
 8010ce0:	e015      	b.n	8010d0e <pbuf_free+0xd6>
          /* is this a ROM or RAM referencing pbuf? */
        } else if (alloc_src == PBUF_TYPE_ALLOC_SRC_MASK_STD_MEMP_PBUF) {
 8010ce2:	7bfb      	ldrb	r3, [r7, #15]
 8010ce4:	2b01      	cmp	r3, #1
 8010ce6:	d104      	bne.n	8010cf2 <pbuf_free+0xba>
          memp_free(MEMP_PBUF, p);
 8010ce8:	6879      	ldr	r1, [r7, #4]
 8010cea:	2007      	movs	r0, #7
 8010cec:	f7ff f92e 	bl	800ff4c <memp_free>
 8010cf0:	e00d      	b.n	8010d0e <pbuf_free+0xd6>
          /* type == PBUF_RAM */
        } else if (alloc_src == PBUF_TYPE_ALLOC_SRC_MASK_STD_HEAP) {
 8010cf2:	7bfb      	ldrb	r3, [r7, #15]
 8010cf4:	2b00      	cmp	r3, #0
 8010cf6:	d103      	bne.n	8010d00 <pbuf_free+0xc8>
          mem_free(p);
 8010cf8:	6878      	ldr	r0, [r7, #4]
 8010cfa:	f7fe fdd1 	bl	800f8a0 <mem_free>
 8010cfe:	e006      	b.n	8010d0e <pbuf_free+0xd6>
        } else {
          /* @todo: support freeing other types */
          LWIP_ASSERT("invalid pbuf type", 0);
 8010d00:	4b0b      	ldr	r3, [pc, #44]	; (8010d30 <pbuf_free+0xf8>)
 8010d02:	f240 320f 	movw	r2, #783	; 0x30f
 8010d06:	490f      	ldr	r1, [pc, #60]	; (8010d44 <pbuf_free+0x10c>)
 8010d08:	480b      	ldr	r0, [pc, #44]	; (8010d38 <pbuf_free+0x100>)
 8010d0a:	f008 fead 	bl	8019a68 <iprintf>
        }
      }
      count++;
 8010d0e:	7dfb      	ldrb	r3, [r7, #23]
 8010d10:	3301      	adds	r3, #1
 8010d12:	75fb      	strb	r3, [r7, #23]
      /* proceed to next pbuf */
      p = q;
 8010d14:	693b      	ldr	r3, [r7, #16]
 8010d16:	607b      	str	r3, [r7, #4]
 8010d18:	e001      	b.n	8010d1e <pbuf_free+0xe6>
      /* p->ref > 0, this pbuf is still referenced to */
      /* (and so the remaining pbufs in chain as well) */
    } else {
      LWIP_DEBUGF( PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_free: %p has ref %"U16_F", ending here.\n", (void *)p, (u16_t)ref));
      /* stop walking through the chain */
      p = NULL;
 8010d1a:	2300      	movs	r3, #0
 8010d1c:	607b      	str	r3, [r7, #4]
  while (p != NULL) {
 8010d1e:	687b      	ldr	r3, [r7, #4]
 8010d20:	2b00      	cmp	r3, #0
 8010d22:	d19f      	bne.n	8010c64 <pbuf_free+0x2c>
    }
  }
  PERF_STOP("pbuf_free");
  /* return number of de-allocated pbufs */
  return count;
 8010d24:	7dfb      	ldrb	r3, [r7, #23]
}
 8010d26:	4618      	mov	r0, r3
 8010d28:	3718      	adds	r7, #24
 8010d2a:	46bd      	mov	sp, r7
 8010d2c:	bd80      	pop	{r7, pc}
 8010d2e:	bf00      	nop
 8010d30:	0801c7b4 	.word	0x0801c7b4
 8010d34:	0801c918 	.word	0x0801c918
 8010d38:	0801c814 	.word	0x0801c814
 8010d3c:	0801c944 	.word	0x0801c944
 8010d40:	0801c95c 	.word	0x0801c95c
 8010d44:	0801c980 	.word	0x0801c980

08010d48 <pbuf_clen>:
 * @param p first pbuf of chain
 * @return the number of pbufs in a chain
 */
u16_t
pbuf_clen(const struct pbuf *p)
{
 8010d48:	b480      	push	{r7}
 8010d4a:	b085      	sub	sp, #20
 8010d4c:	af00      	add	r7, sp, #0
 8010d4e:	6078      	str	r0, [r7, #4]
  u16_t len;

  len = 0;
 8010d50:	2300      	movs	r3, #0
 8010d52:	81fb      	strh	r3, [r7, #14]
  while (p != NULL) {
 8010d54:	e005      	b.n	8010d62 <pbuf_clen+0x1a>
    ++len;
 8010d56:	89fb      	ldrh	r3, [r7, #14]
 8010d58:	3301      	adds	r3, #1
 8010d5a:	81fb      	strh	r3, [r7, #14]
    p = p->next;
 8010d5c:	687b      	ldr	r3, [r7, #4]
 8010d5e:	681b      	ldr	r3, [r3, #0]
 8010d60:	607b      	str	r3, [r7, #4]
  while (p != NULL) {
 8010d62:	687b      	ldr	r3, [r7, #4]
 8010d64:	2b00      	cmp	r3, #0
 8010d66:	d1f6      	bne.n	8010d56 <pbuf_clen+0xe>
  }
  return len;
 8010d68:	89fb      	ldrh	r3, [r7, #14]
}
 8010d6a:	4618      	mov	r0, r3
 8010d6c:	3714      	adds	r7, #20
 8010d6e:	46bd      	mov	sp, r7
 8010d70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010d74:	4770      	bx	lr
	...

08010d78 <pbuf_ref>:
 * @param p pbuf to increase reference counter of
 *
 */
void
pbuf_ref(struct pbuf *p)
{
 8010d78:	b580      	push	{r7, lr}
 8010d7a:	b082      	sub	sp, #8
 8010d7c:	af00      	add	r7, sp, #0
 8010d7e:	6078      	str	r0, [r7, #4]
  /* pbuf given? */
  if (p != NULL) {
 8010d80:	687b      	ldr	r3, [r7, #4]
 8010d82:	2b00      	cmp	r3, #0
 8010d84:	d010      	beq.n	8010da8 <pbuf_ref+0x30>
    SYS_ARCH_SET(p->ref, (LWIP_PBUF_REF_T)(p->ref + 1));
 8010d86:	687b      	ldr	r3, [r7, #4]
 8010d88:	7b9b      	ldrb	r3, [r3, #14]
 8010d8a:	3301      	adds	r3, #1
 8010d8c:	b2da      	uxtb	r2, r3
 8010d8e:	687b      	ldr	r3, [r7, #4]
 8010d90:	739a      	strb	r2, [r3, #14]
    LWIP_ASSERT("pbuf ref overflow", p->ref > 0);
 8010d92:	687b      	ldr	r3, [r7, #4]
 8010d94:	7b9b      	ldrb	r3, [r3, #14]
 8010d96:	2b00      	cmp	r3, #0
 8010d98:	d106      	bne.n	8010da8 <pbuf_ref+0x30>
 8010d9a:	4b05      	ldr	r3, [pc, #20]	; (8010db0 <pbuf_ref+0x38>)
 8010d9c:	f240 3242 	movw	r2, #834	; 0x342
 8010da0:	4904      	ldr	r1, [pc, #16]	; (8010db4 <pbuf_ref+0x3c>)
 8010da2:	4805      	ldr	r0, [pc, #20]	; (8010db8 <pbuf_ref+0x40>)
 8010da4:	f008 fe60 	bl	8019a68 <iprintf>
  }
}
 8010da8:	bf00      	nop
 8010daa:	3708      	adds	r7, #8
 8010dac:	46bd      	mov	sp, r7
 8010dae:	bd80      	pop	{r7, pc}
 8010db0:	0801c7b4 	.word	0x0801c7b4
 8010db4:	0801c994 	.word	0x0801c994
 8010db8:	0801c814 	.word	0x0801c814

08010dbc <pbuf_cat>:
 *
 * @see pbuf_chain()
 */
void
pbuf_cat(struct pbuf *h, struct pbuf *t)
{
 8010dbc:	b580      	push	{r7, lr}
 8010dbe:	b084      	sub	sp, #16
 8010dc0:	af00      	add	r7, sp, #0
 8010dc2:	6078      	str	r0, [r7, #4]
 8010dc4:	6039      	str	r1, [r7, #0]
  struct pbuf *p;

  LWIP_ERROR("(h != NULL) && (t != NULL) (programmer violates API)",
 8010dc6:	687b      	ldr	r3, [r7, #4]
 8010dc8:	2b00      	cmp	r3, #0
 8010dca:	d002      	beq.n	8010dd2 <pbuf_cat+0x16>
 8010dcc:	683b      	ldr	r3, [r7, #0]
 8010dce:	2b00      	cmp	r3, #0
 8010dd0:	d107      	bne.n	8010de2 <pbuf_cat+0x26>
 8010dd2:	4b20      	ldr	r3, [pc, #128]	; (8010e54 <pbuf_cat+0x98>)
 8010dd4:	f240 3259 	movw	r2, #857	; 0x359
 8010dd8:	491f      	ldr	r1, [pc, #124]	; (8010e58 <pbuf_cat+0x9c>)
 8010dda:	4820      	ldr	r0, [pc, #128]	; (8010e5c <pbuf_cat+0xa0>)
 8010ddc:	f008 fe44 	bl	8019a68 <iprintf>
 8010de0:	e034      	b.n	8010e4c <pbuf_cat+0x90>
             ((h != NULL) && (t != NULL)), return;);

  /* proceed to last pbuf of chain */
  for (p = h; p->next != NULL; p = p->next) {
 8010de2:	687b      	ldr	r3, [r7, #4]
 8010de4:	60fb      	str	r3, [r7, #12]
 8010de6:	e00a      	b.n	8010dfe <pbuf_cat+0x42>
    /* add total length of second chain to all totals of first chain */
    p->tot_len = (u16_t)(p->tot_len + t->tot_len);
 8010de8:	68fb      	ldr	r3, [r7, #12]
 8010dea:	891a      	ldrh	r2, [r3, #8]
 8010dec:	683b      	ldr	r3, [r7, #0]
 8010dee:	891b      	ldrh	r3, [r3, #8]
 8010df0:	4413      	add	r3, r2
 8010df2:	b29a      	uxth	r2, r3
 8010df4:	68fb      	ldr	r3, [r7, #12]
 8010df6:	811a      	strh	r2, [r3, #8]
  for (p = h; p->next != NULL; p = p->next) {
 8010df8:	68fb      	ldr	r3, [r7, #12]
 8010dfa:	681b      	ldr	r3, [r3, #0]
 8010dfc:	60fb      	str	r3, [r7, #12]
 8010dfe:	68fb      	ldr	r3, [r7, #12]
 8010e00:	681b      	ldr	r3, [r3, #0]
 8010e02:	2b00      	cmp	r3, #0
 8010e04:	d1f0      	bne.n	8010de8 <pbuf_cat+0x2c>
  }
  /* { p is last pbuf of first h chain, p->next == NULL } */
  LWIP_ASSERT("p->tot_len == p->len (of last pbuf in chain)", p->tot_len == p->len);
 8010e06:	68fb      	ldr	r3, [r7, #12]
 8010e08:	891a      	ldrh	r2, [r3, #8]
 8010e0a:	68fb      	ldr	r3, [r7, #12]
 8010e0c:	895b      	ldrh	r3, [r3, #10]
 8010e0e:	429a      	cmp	r2, r3
 8010e10:	d006      	beq.n	8010e20 <pbuf_cat+0x64>
 8010e12:	4b10      	ldr	r3, [pc, #64]	; (8010e54 <pbuf_cat+0x98>)
 8010e14:	f240 3262 	movw	r2, #866	; 0x362
 8010e18:	4911      	ldr	r1, [pc, #68]	; (8010e60 <pbuf_cat+0xa4>)
 8010e1a:	4810      	ldr	r0, [pc, #64]	; (8010e5c <pbuf_cat+0xa0>)
 8010e1c:	f008 fe24 	bl	8019a68 <iprintf>
  LWIP_ASSERT("p->next == NULL", p->next == NULL);
 8010e20:	68fb      	ldr	r3, [r7, #12]
 8010e22:	681b      	ldr	r3, [r3, #0]
 8010e24:	2b00      	cmp	r3, #0
 8010e26:	d006      	beq.n	8010e36 <pbuf_cat+0x7a>
 8010e28:	4b0a      	ldr	r3, [pc, #40]	; (8010e54 <pbuf_cat+0x98>)
 8010e2a:	f240 3263 	movw	r2, #867	; 0x363
 8010e2e:	490d      	ldr	r1, [pc, #52]	; (8010e64 <pbuf_cat+0xa8>)
 8010e30:	480a      	ldr	r0, [pc, #40]	; (8010e5c <pbuf_cat+0xa0>)
 8010e32:	f008 fe19 	bl	8019a68 <iprintf>
  /* add total length of second chain to last pbuf total of first chain */
  p->tot_len = (u16_t)(p->tot_len + t->tot_len);
 8010e36:	68fb      	ldr	r3, [r7, #12]
 8010e38:	891a      	ldrh	r2, [r3, #8]
 8010e3a:	683b      	ldr	r3, [r7, #0]
 8010e3c:	891b      	ldrh	r3, [r3, #8]
 8010e3e:	4413      	add	r3, r2
 8010e40:	b29a      	uxth	r2, r3
 8010e42:	68fb      	ldr	r3, [r7, #12]
 8010e44:	811a      	strh	r2, [r3, #8]
  /* chain last pbuf of head (p) with first of tail (t) */
  p->next = t;
 8010e46:	68fb      	ldr	r3, [r7, #12]
 8010e48:	683a      	ldr	r2, [r7, #0]
 8010e4a:	601a      	str	r2, [r3, #0]
  /* p->next now references t, but the caller will drop its reference to t,
   * so netto there is no change to the reference count of t.
   */
}
 8010e4c:	3710      	adds	r7, #16
 8010e4e:	46bd      	mov	sp, r7
 8010e50:	bd80      	pop	{r7, pc}
 8010e52:	bf00      	nop
 8010e54:	0801c7b4 	.word	0x0801c7b4
 8010e58:	0801c9a8 	.word	0x0801c9a8
 8010e5c:	0801c814 	.word	0x0801c814
 8010e60:	0801c9e0 	.word	0x0801c9e0
 8010e64:	0801ca10 	.word	0x0801ca10

08010e68 <pbuf_copy>:
 *         ERR_ARG if one of the pbufs is NULL or p_to is not big
 *                 enough to hold p_from
 */
err_t
pbuf_copy(struct pbuf *p_to, const struct pbuf *p_from)
{
 8010e68:	b580      	push	{r7, lr}
 8010e6a:	b086      	sub	sp, #24
 8010e6c:	af00      	add	r7, sp, #0
 8010e6e:	6078      	str	r0, [r7, #4]
 8010e70:	6039      	str	r1, [r7, #0]
  size_t offset_to = 0, offset_from = 0, len;
 8010e72:	2300      	movs	r3, #0
 8010e74:	617b      	str	r3, [r7, #20]
 8010e76:	2300      	movs	r3, #0
 8010e78:	613b      	str	r3, [r7, #16]

  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_copy(%p, %p)\n",
              (const void *)p_to, (const void *)p_from));

  /* is the target big enough to hold the source? */
  LWIP_ERROR("pbuf_copy: target not big enough to hold source", ((p_to != NULL) &&
 8010e7a:	687b      	ldr	r3, [r7, #4]
 8010e7c:	2b00      	cmp	r3, #0
 8010e7e:	d008      	beq.n	8010e92 <pbuf_copy+0x2a>
 8010e80:	683b      	ldr	r3, [r7, #0]
 8010e82:	2b00      	cmp	r3, #0
 8010e84:	d005      	beq.n	8010e92 <pbuf_copy+0x2a>
 8010e86:	687b      	ldr	r3, [r7, #4]
 8010e88:	891a      	ldrh	r2, [r3, #8]
 8010e8a:	683b      	ldr	r3, [r7, #0]
 8010e8c:	891b      	ldrh	r3, [r3, #8]
 8010e8e:	429a      	cmp	r2, r3
 8010e90:	d209      	bcs.n	8010ea6 <pbuf_copy+0x3e>
 8010e92:	4b57      	ldr	r3, [pc, #348]	; (8010ff0 <pbuf_copy+0x188>)
 8010e94:	f240 32c9 	movw	r2, #969	; 0x3c9
 8010e98:	4956      	ldr	r1, [pc, #344]	; (8010ff4 <pbuf_copy+0x18c>)
 8010e9a:	4857      	ldr	r0, [pc, #348]	; (8010ff8 <pbuf_copy+0x190>)
 8010e9c:	f008 fde4 	bl	8019a68 <iprintf>
 8010ea0:	f06f 030f 	mvn.w	r3, #15
 8010ea4:	e09f      	b.n	8010fe6 <pbuf_copy+0x17e>
             (p_from != NULL) && (p_to->tot_len >= p_from->tot_len)), return ERR_ARG;);

  /* iterate through pbuf chain */
  do {
    /* copy one part of the original chain */
    if ((p_to->len - offset_to) >= (p_from->len - offset_from)) {
 8010ea6:	687b      	ldr	r3, [r7, #4]
 8010ea8:	895b      	ldrh	r3, [r3, #10]
 8010eaa:	461a      	mov	r2, r3
 8010eac:	697b      	ldr	r3, [r7, #20]
 8010eae:	1ad2      	subs	r2, r2, r3
 8010eb0:	683b      	ldr	r3, [r7, #0]
 8010eb2:	895b      	ldrh	r3, [r3, #10]
 8010eb4:	4619      	mov	r1, r3
 8010eb6:	693b      	ldr	r3, [r7, #16]
 8010eb8:	1acb      	subs	r3, r1, r3
 8010eba:	429a      	cmp	r2, r3
 8010ebc:	d306      	bcc.n	8010ecc <pbuf_copy+0x64>
      /* complete current p_from fits into current p_to */
      len = p_from->len - offset_from;
 8010ebe:	683b      	ldr	r3, [r7, #0]
 8010ec0:	895b      	ldrh	r3, [r3, #10]
 8010ec2:	461a      	mov	r2, r3
 8010ec4:	693b      	ldr	r3, [r7, #16]
 8010ec6:	1ad3      	subs	r3, r2, r3
 8010ec8:	60fb      	str	r3, [r7, #12]
 8010eca:	e005      	b.n	8010ed8 <pbuf_copy+0x70>
    } else {
      /* current p_from does not fit into current p_to */
      len = p_to->len - offset_to;
 8010ecc:	687b      	ldr	r3, [r7, #4]
 8010ece:	895b      	ldrh	r3, [r3, #10]
 8010ed0:	461a      	mov	r2, r3
 8010ed2:	697b      	ldr	r3, [r7, #20]
 8010ed4:	1ad3      	subs	r3, r2, r3
 8010ed6:	60fb      	str	r3, [r7, #12]
    }
    MEMCPY((u8_t *)p_to->payload + offset_to, (u8_t *)p_from->payload + offset_from, len);
 8010ed8:	687b      	ldr	r3, [r7, #4]
 8010eda:	685a      	ldr	r2, [r3, #4]
 8010edc:	697b      	ldr	r3, [r7, #20]
 8010ede:	18d0      	adds	r0, r2, r3
 8010ee0:	683b      	ldr	r3, [r7, #0]
 8010ee2:	685a      	ldr	r2, [r3, #4]
 8010ee4:	693b      	ldr	r3, [r7, #16]
 8010ee6:	4413      	add	r3, r2
 8010ee8:	68fa      	ldr	r2, [r7, #12]
 8010eea:	4619      	mov	r1, r3
 8010eec:	f008 ff8b 	bl	8019e06 <memcpy>
    offset_to += len;
 8010ef0:	697a      	ldr	r2, [r7, #20]
 8010ef2:	68fb      	ldr	r3, [r7, #12]
 8010ef4:	4413      	add	r3, r2
 8010ef6:	617b      	str	r3, [r7, #20]
    offset_from += len;
 8010ef8:	693a      	ldr	r2, [r7, #16]
 8010efa:	68fb      	ldr	r3, [r7, #12]
 8010efc:	4413      	add	r3, r2
 8010efe:	613b      	str	r3, [r7, #16]
    LWIP_ASSERT("offset_to <= p_to->len", offset_to <= p_to->len);
 8010f00:	687b      	ldr	r3, [r7, #4]
 8010f02:	895b      	ldrh	r3, [r3, #10]
 8010f04:	461a      	mov	r2, r3
 8010f06:	697b      	ldr	r3, [r7, #20]
 8010f08:	4293      	cmp	r3, r2
 8010f0a:	d906      	bls.n	8010f1a <pbuf_copy+0xb2>
 8010f0c:	4b38      	ldr	r3, [pc, #224]	; (8010ff0 <pbuf_copy+0x188>)
 8010f0e:	f240 32d9 	movw	r2, #985	; 0x3d9
 8010f12:	493a      	ldr	r1, [pc, #232]	; (8010ffc <pbuf_copy+0x194>)
 8010f14:	4838      	ldr	r0, [pc, #224]	; (8010ff8 <pbuf_copy+0x190>)
 8010f16:	f008 fda7 	bl	8019a68 <iprintf>
    LWIP_ASSERT("offset_from <= p_from->len", offset_from <= p_from->len);
 8010f1a:	683b      	ldr	r3, [r7, #0]
 8010f1c:	895b      	ldrh	r3, [r3, #10]
 8010f1e:	461a      	mov	r2, r3
 8010f20:	693b      	ldr	r3, [r7, #16]
 8010f22:	4293      	cmp	r3, r2
 8010f24:	d906      	bls.n	8010f34 <pbuf_copy+0xcc>
 8010f26:	4b32      	ldr	r3, [pc, #200]	; (8010ff0 <pbuf_copy+0x188>)
 8010f28:	f240 32da 	movw	r2, #986	; 0x3da
 8010f2c:	4934      	ldr	r1, [pc, #208]	; (8011000 <pbuf_copy+0x198>)
 8010f2e:	4832      	ldr	r0, [pc, #200]	; (8010ff8 <pbuf_copy+0x190>)
 8010f30:	f008 fd9a 	bl	8019a68 <iprintf>
    if (offset_from >= p_from->len) {
 8010f34:	683b      	ldr	r3, [r7, #0]
 8010f36:	895b      	ldrh	r3, [r3, #10]
 8010f38:	461a      	mov	r2, r3
 8010f3a:	693b      	ldr	r3, [r7, #16]
 8010f3c:	4293      	cmp	r3, r2
 8010f3e:	d304      	bcc.n	8010f4a <pbuf_copy+0xe2>
      /* on to next p_from (if any) */
      offset_from = 0;
 8010f40:	2300      	movs	r3, #0
 8010f42:	613b      	str	r3, [r7, #16]
      p_from = p_from->next;
 8010f44:	683b      	ldr	r3, [r7, #0]
 8010f46:	681b      	ldr	r3, [r3, #0]
 8010f48:	603b      	str	r3, [r7, #0]
    }
    if (offset_to == p_to->len) {
 8010f4a:	687b      	ldr	r3, [r7, #4]
 8010f4c:	895b      	ldrh	r3, [r3, #10]
 8010f4e:	461a      	mov	r2, r3
 8010f50:	697b      	ldr	r3, [r7, #20]
 8010f52:	4293      	cmp	r3, r2
 8010f54:	d114      	bne.n	8010f80 <pbuf_copy+0x118>
      /* on to next p_to (if any) */
      offset_to = 0;
 8010f56:	2300      	movs	r3, #0
 8010f58:	617b      	str	r3, [r7, #20]
      p_to = p_to->next;
 8010f5a:	687b      	ldr	r3, [r7, #4]
 8010f5c:	681b      	ldr	r3, [r3, #0]
 8010f5e:	607b      	str	r3, [r7, #4]
      LWIP_ERROR("p_to != NULL", (p_to != NULL) || (p_from == NULL), return ERR_ARG;);
 8010f60:	687b      	ldr	r3, [r7, #4]
 8010f62:	2b00      	cmp	r3, #0
 8010f64:	d10c      	bne.n	8010f80 <pbuf_copy+0x118>
 8010f66:	683b      	ldr	r3, [r7, #0]
 8010f68:	2b00      	cmp	r3, #0
 8010f6a:	d009      	beq.n	8010f80 <pbuf_copy+0x118>
 8010f6c:	4b20      	ldr	r3, [pc, #128]	; (8010ff0 <pbuf_copy+0x188>)
 8010f6e:	f44f 7279 	mov.w	r2, #996	; 0x3e4
 8010f72:	4924      	ldr	r1, [pc, #144]	; (8011004 <pbuf_copy+0x19c>)
 8010f74:	4820      	ldr	r0, [pc, #128]	; (8010ff8 <pbuf_copy+0x190>)
 8010f76:	f008 fd77 	bl	8019a68 <iprintf>
 8010f7a:	f06f 030f 	mvn.w	r3, #15
 8010f7e:	e032      	b.n	8010fe6 <pbuf_copy+0x17e>
    }

    if ((p_from != NULL) && (p_from->len == p_from->tot_len)) {
 8010f80:	683b      	ldr	r3, [r7, #0]
 8010f82:	2b00      	cmp	r3, #0
 8010f84:	d013      	beq.n	8010fae <pbuf_copy+0x146>
 8010f86:	683b      	ldr	r3, [r7, #0]
 8010f88:	895a      	ldrh	r2, [r3, #10]
 8010f8a:	683b      	ldr	r3, [r7, #0]
 8010f8c:	891b      	ldrh	r3, [r3, #8]
 8010f8e:	429a      	cmp	r2, r3
 8010f90:	d10d      	bne.n	8010fae <pbuf_copy+0x146>
      /* don't copy more than one packet! */
      LWIP_ERROR("pbuf_copy() does not allow packet queues!",
 8010f92:	683b      	ldr	r3, [r7, #0]
 8010f94:	681b      	ldr	r3, [r3, #0]
 8010f96:	2b00      	cmp	r3, #0
 8010f98:	d009      	beq.n	8010fae <pbuf_copy+0x146>
 8010f9a:	4b15      	ldr	r3, [pc, #84]	; (8010ff0 <pbuf_copy+0x188>)
 8010f9c:	f240 32e9 	movw	r2, #1001	; 0x3e9
 8010fa0:	4919      	ldr	r1, [pc, #100]	; (8011008 <pbuf_copy+0x1a0>)
 8010fa2:	4815      	ldr	r0, [pc, #84]	; (8010ff8 <pbuf_copy+0x190>)
 8010fa4:	f008 fd60 	bl	8019a68 <iprintf>
 8010fa8:	f06f 0305 	mvn.w	r3, #5
 8010fac:	e01b      	b.n	8010fe6 <pbuf_copy+0x17e>
                 (p_from->next == NULL), return ERR_VAL;);
    }
    if ((p_to != NULL) && (p_to->len == p_to->tot_len)) {
 8010fae:	687b      	ldr	r3, [r7, #4]
 8010fb0:	2b00      	cmp	r3, #0
 8010fb2:	d013      	beq.n	8010fdc <pbuf_copy+0x174>
 8010fb4:	687b      	ldr	r3, [r7, #4]
 8010fb6:	895a      	ldrh	r2, [r3, #10]
 8010fb8:	687b      	ldr	r3, [r7, #4]
 8010fba:	891b      	ldrh	r3, [r3, #8]
 8010fbc:	429a      	cmp	r2, r3
 8010fbe:	d10d      	bne.n	8010fdc <pbuf_copy+0x174>
      /* don't copy more than one packet! */
      LWIP_ERROR("pbuf_copy() does not allow packet queues!",
 8010fc0:	687b      	ldr	r3, [r7, #4]
 8010fc2:	681b      	ldr	r3, [r3, #0]
 8010fc4:	2b00      	cmp	r3, #0
 8010fc6:	d009      	beq.n	8010fdc <pbuf_copy+0x174>
 8010fc8:	4b09      	ldr	r3, [pc, #36]	; (8010ff0 <pbuf_copy+0x188>)
 8010fca:	f240 32ee 	movw	r2, #1006	; 0x3ee
 8010fce:	490e      	ldr	r1, [pc, #56]	; (8011008 <pbuf_copy+0x1a0>)
 8010fd0:	4809      	ldr	r0, [pc, #36]	; (8010ff8 <pbuf_copy+0x190>)
 8010fd2:	f008 fd49 	bl	8019a68 <iprintf>
 8010fd6:	f06f 0305 	mvn.w	r3, #5
 8010fda:	e004      	b.n	8010fe6 <pbuf_copy+0x17e>
                 (p_to->next == NULL), return ERR_VAL;);
    }
  } while (p_from);
 8010fdc:	683b      	ldr	r3, [r7, #0]
 8010fde:	2b00      	cmp	r3, #0
 8010fe0:	f47f af61 	bne.w	8010ea6 <pbuf_copy+0x3e>
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_copy: end of chain reached.\n"));
  return ERR_OK;
 8010fe4:	2300      	movs	r3, #0
}
 8010fe6:	4618      	mov	r0, r3
 8010fe8:	3718      	adds	r7, #24
 8010fea:	46bd      	mov	sp, r7
 8010fec:	bd80      	pop	{r7, pc}
 8010fee:	bf00      	nop
 8010ff0:	0801c7b4 	.word	0x0801c7b4
 8010ff4:	0801ca5c 	.word	0x0801ca5c
 8010ff8:	0801c814 	.word	0x0801c814
 8010ffc:	0801ca8c 	.word	0x0801ca8c
 8011000:	0801caa4 	.word	0x0801caa4
 8011004:	0801cac0 	.word	0x0801cac0
 8011008:	0801cad0 	.word	0x0801cad0

0801100c <pbuf_copy_partial>:
 * @param offset offset into the packet buffer from where to begin copying len bytes
 * @return the number of bytes copied, or 0 on failure
 */
u16_t
pbuf_copy_partial(const struct pbuf *buf, void *dataptr, u16_t len, u16_t offset)
{
 801100c:	b580      	push	{r7, lr}
 801100e:	b088      	sub	sp, #32
 8011010:	af00      	add	r7, sp, #0
 8011012:	60f8      	str	r0, [r7, #12]
 8011014:	60b9      	str	r1, [r7, #8]
 8011016:	4611      	mov	r1, r2
 8011018:	461a      	mov	r2, r3
 801101a:	460b      	mov	r3, r1
 801101c:	80fb      	strh	r3, [r7, #6]
 801101e:	4613      	mov	r3, r2
 8011020:	80bb      	strh	r3, [r7, #4]
  const struct pbuf *p;
  u16_t left = 0;
 8011022:	2300      	movs	r3, #0
 8011024:	837b      	strh	r3, [r7, #26]
  u16_t buf_copy_len;
  u16_t copied_total = 0;
 8011026:	2300      	movs	r3, #0
 8011028:	82fb      	strh	r3, [r7, #22]

  LWIP_ERROR("pbuf_copy_partial: invalid buf", (buf != NULL), return 0;);
 801102a:	68fb      	ldr	r3, [r7, #12]
 801102c:	2b00      	cmp	r3, #0
 801102e:	d108      	bne.n	8011042 <pbuf_copy_partial+0x36>
 8011030:	4b2b      	ldr	r3, [pc, #172]	; (80110e0 <pbuf_copy_partial+0xd4>)
 8011032:	f240 420a 	movw	r2, #1034	; 0x40a
 8011036:	492b      	ldr	r1, [pc, #172]	; (80110e4 <pbuf_copy_partial+0xd8>)
 8011038:	482b      	ldr	r0, [pc, #172]	; (80110e8 <pbuf_copy_partial+0xdc>)
 801103a:	f008 fd15 	bl	8019a68 <iprintf>
 801103e:	2300      	movs	r3, #0
 8011040:	e04a      	b.n	80110d8 <pbuf_copy_partial+0xcc>
  LWIP_ERROR("pbuf_copy_partial: invalid dataptr", (dataptr != NULL), return 0;);
 8011042:	68bb      	ldr	r3, [r7, #8]
 8011044:	2b00      	cmp	r3, #0
 8011046:	d108      	bne.n	801105a <pbuf_copy_partial+0x4e>
 8011048:	4b25      	ldr	r3, [pc, #148]	; (80110e0 <pbuf_copy_partial+0xd4>)
 801104a:	f240 420b 	movw	r2, #1035	; 0x40b
 801104e:	4927      	ldr	r1, [pc, #156]	; (80110ec <pbuf_copy_partial+0xe0>)
 8011050:	4825      	ldr	r0, [pc, #148]	; (80110e8 <pbuf_copy_partial+0xdc>)
 8011052:	f008 fd09 	bl	8019a68 <iprintf>
 8011056:	2300      	movs	r3, #0
 8011058:	e03e      	b.n	80110d8 <pbuf_copy_partial+0xcc>

  /* Note some systems use byte copy if dataptr or one of the pbuf payload pointers are unaligned. */
  for (p = buf; len != 0 && p != NULL; p = p->next) {
 801105a:	68fb      	ldr	r3, [r7, #12]
 801105c:	61fb      	str	r3, [r7, #28]
 801105e:	e034      	b.n	80110ca <pbuf_copy_partial+0xbe>
    if ((offset != 0) && (offset >= p->len)) {
 8011060:	88bb      	ldrh	r3, [r7, #4]
 8011062:	2b00      	cmp	r3, #0
 8011064:	d00a      	beq.n	801107c <pbuf_copy_partial+0x70>
 8011066:	69fb      	ldr	r3, [r7, #28]
 8011068:	895b      	ldrh	r3, [r3, #10]
 801106a:	88ba      	ldrh	r2, [r7, #4]
 801106c:	429a      	cmp	r2, r3
 801106e:	d305      	bcc.n	801107c <pbuf_copy_partial+0x70>
      /* don't copy from this buffer -> on to the next */
      offset = (u16_t)(offset - p->len);
 8011070:	69fb      	ldr	r3, [r7, #28]
 8011072:	895b      	ldrh	r3, [r3, #10]
 8011074:	88ba      	ldrh	r2, [r7, #4]
 8011076:	1ad3      	subs	r3, r2, r3
 8011078:	80bb      	strh	r3, [r7, #4]
 801107a:	e023      	b.n	80110c4 <pbuf_copy_partial+0xb8>
    } else {
      /* copy from this buffer. maybe only partially. */
      buf_copy_len = (u16_t)(p->len - offset);
 801107c:	69fb      	ldr	r3, [r7, #28]
 801107e:	895a      	ldrh	r2, [r3, #10]
 8011080:	88bb      	ldrh	r3, [r7, #4]
 8011082:	1ad3      	subs	r3, r2, r3
 8011084:	833b      	strh	r3, [r7, #24]
      if (buf_copy_len > len) {
 8011086:	8b3a      	ldrh	r2, [r7, #24]
 8011088:	88fb      	ldrh	r3, [r7, #6]
 801108a:	429a      	cmp	r2, r3
 801108c:	d901      	bls.n	8011092 <pbuf_copy_partial+0x86>
        buf_copy_len = len;
 801108e:	88fb      	ldrh	r3, [r7, #6]
 8011090:	833b      	strh	r3, [r7, #24]
      }
      /* copy the necessary parts of the buffer */
      MEMCPY(&((char *)dataptr)[left], &((char *)p->payload)[offset], buf_copy_len);
 8011092:	8b7b      	ldrh	r3, [r7, #26]
 8011094:	68ba      	ldr	r2, [r7, #8]
 8011096:	18d0      	adds	r0, r2, r3
 8011098:	69fb      	ldr	r3, [r7, #28]
 801109a:	685a      	ldr	r2, [r3, #4]
 801109c:	88bb      	ldrh	r3, [r7, #4]
 801109e:	4413      	add	r3, r2
 80110a0:	8b3a      	ldrh	r2, [r7, #24]
 80110a2:	4619      	mov	r1, r3
 80110a4:	f008 feaf 	bl	8019e06 <memcpy>
      copied_total = (u16_t)(copied_total + buf_copy_len);
 80110a8:	8afa      	ldrh	r2, [r7, #22]
 80110aa:	8b3b      	ldrh	r3, [r7, #24]
 80110ac:	4413      	add	r3, r2
 80110ae:	82fb      	strh	r3, [r7, #22]
      left = (u16_t)(left + buf_copy_len);
 80110b0:	8b7a      	ldrh	r2, [r7, #26]
 80110b2:	8b3b      	ldrh	r3, [r7, #24]
 80110b4:	4413      	add	r3, r2
 80110b6:	837b      	strh	r3, [r7, #26]
      len = (u16_t)(len - buf_copy_len);
 80110b8:	88fa      	ldrh	r2, [r7, #6]
 80110ba:	8b3b      	ldrh	r3, [r7, #24]
 80110bc:	1ad3      	subs	r3, r2, r3
 80110be:	80fb      	strh	r3, [r7, #6]
      offset = 0;
 80110c0:	2300      	movs	r3, #0
 80110c2:	80bb      	strh	r3, [r7, #4]
  for (p = buf; len != 0 && p != NULL; p = p->next) {
 80110c4:	69fb      	ldr	r3, [r7, #28]
 80110c6:	681b      	ldr	r3, [r3, #0]
 80110c8:	61fb      	str	r3, [r7, #28]
 80110ca:	88fb      	ldrh	r3, [r7, #6]
 80110cc:	2b00      	cmp	r3, #0
 80110ce:	d002      	beq.n	80110d6 <pbuf_copy_partial+0xca>
 80110d0:	69fb      	ldr	r3, [r7, #28]
 80110d2:	2b00      	cmp	r3, #0
 80110d4:	d1c4      	bne.n	8011060 <pbuf_copy_partial+0x54>
    }
  }
  return copied_total;
 80110d6:	8afb      	ldrh	r3, [r7, #22]
}
 80110d8:	4618      	mov	r0, r3
 80110da:	3720      	adds	r7, #32
 80110dc:	46bd      	mov	sp, r7
 80110de:	bd80      	pop	{r7, pc}
 80110e0:	0801c7b4 	.word	0x0801c7b4
 80110e4:	0801cafc 	.word	0x0801cafc
 80110e8:	0801c814 	.word	0x0801c814
 80110ec:	0801cb1c 	.word	0x0801cb1c

080110f0 <pbuf_clone>:
 *
 * @return a new pbuf or NULL if allocation fails
 */
struct pbuf *
pbuf_clone(pbuf_layer layer, pbuf_type type, struct pbuf *p)
{
 80110f0:	b580      	push	{r7, lr}
 80110f2:	b084      	sub	sp, #16
 80110f4:	af00      	add	r7, sp, #0
 80110f6:	4603      	mov	r3, r0
 80110f8:	603a      	str	r2, [r7, #0]
 80110fa:	71fb      	strb	r3, [r7, #7]
 80110fc:	460b      	mov	r3, r1
 80110fe:	80bb      	strh	r3, [r7, #4]
  struct pbuf *q;
  err_t err;
  q = pbuf_alloc(layer, p->tot_len, type);
 8011100:	683b      	ldr	r3, [r7, #0]
 8011102:	8919      	ldrh	r1, [r3, #8]
 8011104:	88ba      	ldrh	r2, [r7, #4]
 8011106:	79fb      	ldrb	r3, [r7, #7]
 8011108:	4618      	mov	r0, r3
 801110a:	f7ff fab1 	bl	8010670 <pbuf_alloc>
 801110e:	60f8      	str	r0, [r7, #12]
  if (q == NULL) {
 8011110:	68fb      	ldr	r3, [r7, #12]
 8011112:	2b00      	cmp	r3, #0
 8011114:	d101      	bne.n	801111a <pbuf_clone+0x2a>
    return NULL;
 8011116:	2300      	movs	r3, #0
 8011118:	e011      	b.n	801113e <pbuf_clone+0x4e>
  }
  err = pbuf_copy(q, p);
 801111a:	6839      	ldr	r1, [r7, #0]
 801111c:	68f8      	ldr	r0, [r7, #12]
 801111e:	f7ff fea3 	bl	8010e68 <pbuf_copy>
 8011122:	4603      	mov	r3, r0
 8011124:	72fb      	strb	r3, [r7, #11]
  LWIP_UNUSED_ARG(err); /* in case of LWIP_NOASSERT */
  LWIP_ASSERT("pbuf_copy failed", err == ERR_OK);
 8011126:	f997 300b 	ldrsb.w	r3, [r7, #11]
 801112a:	2b00      	cmp	r3, #0
 801112c:	d006      	beq.n	801113c <pbuf_clone+0x4c>
 801112e:	4b06      	ldr	r3, [pc, #24]	; (8011148 <pbuf_clone+0x58>)
 8011130:	f240 5224 	movw	r2, #1316	; 0x524
 8011134:	4905      	ldr	r1, [pc, #20]	; (801114c <pbuf_clone+0x5c>)
 8011136:	4806      	ldr	r0, [pc, #24]	; (8011150 <pbuf_clone+0x60>)
 8011138:	f008 fc96 	bl	8019a68 <iprintf>
  return q;
 801113c:	68fb      	ldr	r3, [r7, #12]
}
 801113e:	4618      	mov	r0, r3
 8011140:	3710      	adds	r7, #16
 8011142:	46bd      	mov	sp, r7
 8011144:	bd80      	pop	{r7, pc}
 8011146:	bf00      	nop
 8011148:	0801c7b4 	.word	0x0801c7b4
 801114c:	0801cc28 	.word	0x0801cc28
 8011150:	0801c814 	.word	0x0801c814

08011154 <tcp_init>:
/**
 * Initialize this module.
 */
void
tcp_init(void)
{
 8011154:	b580      	push	{r7, lr}
 8011156:	af00      	add	r7, sp, #0
#ifdef LWIP_RAND
  tcp_port = TCP_ENSURE_LOCAL_PORT_RANGE(LWIP_RAND());
 8011158:	f007 ff4c 	bl	8018ff4 <rand>
 801115c:	4603      	mov	r3, r0
 801115e:	b29b      	uxth	r3, r3
 8011160:	f3c3 030d 	ubfx	r3, r3, #0, #14
 8011164:	b29b      	uxth	r3, r3
 8011166:	f5a3 4380 	sub.w	r3, r3, #16384	; 0x4000
 801116a:	b29a      	uxth	r2, r3
 801116c:	4b01      	ldr	r3, [pc, #4]	; (8011174 <tcp_init+0x20>)
 801116e:	801a      	strh	r2, [r3, #0]
#endif /* LWIP_RAND */
}
 8011170:	bf00      	nop
 8011172:	bd80      	pop	{r7, pc}
 8011174:	20000058 	.word	0x20000058

08011178 <tcp_free>:

/** Free a tcp pcb */
void
tcp_free(struct tcp_pcb *pcb)
{
 8011178:	b580      	push	{r7, lr}
 801117a:	b082      	sub	sp, #8
 801117c:	af00      	add	r7, sp, #0
 801117e:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_free: LISTEN", pcb->state != LISTEN);
 8011180:	687b      	ldr	r3, [r7, #4]
 8011182:	7d1b      	ldrb	r3, [r3, #20]
 8011184:	2b01      	cmp	r3, #1
 8011186:	d105      	bne.n	8011194 <tcp_free+0x1c>
 8011188:	4b06      	ldr	r3, [pc, #24]	; (80111a4 <tcp_free+0x2c>)
 801118a:	22d4      	movs	r2, #212	; 0xd4
 801118c:	4906      	ldr	r1, [pc, #24]	; (80111a8 <tcp_free+0x30>)
 801118e:	4807      	ldr	r0, [pc, #28]	; (80111ac <tcp_free+0x34>)
 8011190:	f008 fc6a 	bl	8019a68 <iprintf>
#if LWIP_TCP_PCB_NUM_EXT_ARGS
  tcp_ext_arg_invoke_callbacks_destroyed(pcb->ext_args);
#endif
  memp_free(MEMP_TCP_PCB, pcb);
 8011194:	6879      	ldr	r1, [r7, #4]
 8011196:	2001      	movs	r0, #1
 8011198:	f7fe fed8 	bl	800ff4c <memp_free>
}
 801119c:	bf00      	nop
 801119e:	3708      	adds	r7, #8
 80111a0:	46bd      	mov	sp, r7
 80111a2:	bd80      	pop	{r7, pc}
 80111a4:	0801ccb4 	.word	0x0801ccb4
 80111a8:	0801cce4 	.word	0x0801cce4
 80111ac:	0801ccf8 	.word	0x0801ccf8

080111b0 <tcp_free_listen>:

/** Free a tcp listen pcb */
static void
tcp_free_listen(struct tcp_pcb *pcb)
{
 80111b0:	b580      	push	{r7, lr}
 80111b2:	b082      	sub	sp, #8
 80111b4:	af00      	add	r7, sp, #0
 80111b6:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_free_listen: !LISTEN", pcb->state != LISTEN);
 80111b8:	687b      	ldr	r3, [r7, #4]
 80111ba:	7d1b      	ldrb	r3, [r3, #20]
 80111bc:	2b01      	cmp	r3, #1
 80111be:	d105      	bne.n	80111cc <tcp_free_listen+0x1c>
 80111c0:	4b06      	ldr	r3, [pc, #24]	; (80111dc <tcp_free_listen+0x2c>)
 80111c2:	22df      	movs	r2, #223	; 0xdf
 80111c4:	4906      	ldr	r1, [pc, #24]	; (80111e0 <tcp_free_listen+0x30>)
 80111c6:	4807      	ldr	r0, [pc, #28]	; (80111e4 <tcp_free_listen+0x34>)
 80111c8:	f008 fc4e 	bl	8019a68 <iprintf>
#if LWIP_TCP_PCB_NUM_EXT_ARGS
  tcp_ext_arg_invoke_callbacks_destroyed(pcb->ext_args);
#endif
  memp_free(MEMP_TCP_PCB_LISTEN, pcb);
 80111cc:	6879      	ldr	r1, [r7, #4]
 80111ce:	2002      	movs	r0, #2
 80111d0:	f7fe febc 	bl	800ff4c <memp_free>
}
 80111d4:	bf00      	nop
 80111d6:	3708      	adds	r7, #8
 80111d8:	46bd      	mov	sp, r7
 80111da:	bd80      	pop	{r7, pc}
 80111dc:	0801ccb4 	.word	0x0801ccb4
 80111e0:	0801cd20 	.word	0x0801cd20
 80111e4:	0801ccf8 	.word	0x0801ccf8

080111e8 <tcp_tmr>:
/**
 * Called periodically to dispatch TCP timers.
 */
void
tcp_tmr(void)
{
 80111e8:	b580      	push	{r7, lr}
 80111ea:	af00      	add	r7, sp, #0
  /* Call tcp_fasttmr() every 250 ms */
  tcp_fasttmr();
 80111ec:	f000 fea4 	bl	8011f38 <tcp_fasttmr>

  if (++tcp_timer & 1) {
 80111f0:	4b07      	ldr	r3, [pc, #28]	; (8011210 <tcp_tmr+0x28>)
 80111f2:	781b      	ldrb	r3, [r3, #0]
 80111f4:	3301      	adds	r3, #1
 80111f6:	b2da      	uxtb	r2, r3
 80111f8:	4b05      	ldr	r3, [pc, #20]	; (8011210 <tcp_tmr+0x28>)
 80111fa:	701a      	strb	r2, [r3, #0]
 80111fc:	4b04      	ldr	r3, [pc, #16]	; (8011210 <tcp_tmr+0x28>)
 80111fe:	781b      	ldrb	r3, [r3, #0]
 8011200:	f003 0301 	and.w	r3, r3, #1
 8011204:	2b00      	cmp	r3, #0
 8011206:	d001      	beq.n	801120c <tcp_tmr+0x24>
    /* Call tcp_slowtmr() every 500 ms, i.e., every other timer
       tcp_tmr() is called. */
    tcp_slowtmr();
 8011208:	f000 fb56 	bl	80118b8 <tcp_slowtmr>
  }
}
 801120c:	bf00      	nop
 801120e:	bd80      	pop	{r7, pc}
 8011210:	20007059 	.word	0x20007059

08011214 <tcp_remove_listener>:
/** Called when a listen pcb is closed. Iterates one pcb list and removes the
 * closed listener pcb from pcb->listener if matching.
 */
static void
tcp_remove_listener(struct tcp_pcb *list, struct tcp_pcb_listen *lpcb)
{
 8011214:	b580      	push	{r7, lr}
 8011216:	b084      	sub	sp, #16
 8011218:	af00      	add	r7, sp, #0
 801121a:	6078      	str	r0, [r7, #4]
 801121c:	6039      	str	r1, [r7, #0]
  struct tcp_pcb *pcb;

  LWIP_ASSERT("tcp_remove_listener: invalid listener", lpcb != NULL);
 801121e:	683b      	ldr	r3, [r7, #0]
 8011220:	2b00      	cmp	r3, #0
 8011222:	d105      	bne.n	8011230 <tcp_remove_listener+0x1c>
 8011224:	4b0d      	ldr	r3, [pc, #52]	; (801125c <tcp_remove_listener+0x48>)
 8011226:	22ff      	movs	r2, #255	; 0xff
 8011228:	490d      	ldr	r1, [pc, #52]	; (8011260 <tcp_remove_listener+0x4c>)
 801122a:	480e      	ldr	r0, [pc, #56]	; (8011264 <tcp_remove_listener+0x50>)
 801122c:	f008 fc1c 	bl	8019a68 <iprintf>

  for (pcb = list; pcb != NULL; pcb = pcb->next) {
 8011230:	687b      	ldr	r3, [r7, #4]
 8011232:	60fb      	str	r3, [r7, #12]
 8011234:	e00a      	b.n	801124c <tcp_remove_listener+0x38>
    if (pcb->listener == lpcb) {
 8011236:	68fb      	ldr	r3, [r7, #12]
 8011238:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 801123a:	683a      	ldr	r2, [r7, #0]
 801123c:	429a      	cmp	r2, r3
 801123e:	d102      	bne.n	8011246 <tcp_remove_listener+0x32>
      pcb->listener = NULL;
 8011240:	68fb      	ldr	r3, [r7, #12]
 8011242:	2200      	movs	r2, #0
 8011244:	67da      	str	r2, [r3, #124]	; 0x7c
  for (pcb = list; pcb != NULL; pcb = pcb->next) {
 8011246:	68fb      	ldr	r3, [r7, #12]
 8011248:	68db      	ldr	r3, [r3, #12]
 801124a:	60fb      	str	r3, [r7, #12]
 801124c:	68fb      	ldr	r3, [r7, #12]
 801124e:	2b00      	cmp	r3, #0
 8011250:	d1f1      	bne.n	8011236 <tcp_remove_listener+0x22>
    }
  }
}
 8011252:	bf00      	nop
 8011254:	bf00      	nop
 8011256:	3710      	adds	r7, #16
 8011258:	46bd      	mov	sp, r7
 801125a:	bd80      	pop	{r7, pc}
 801125c:	0801ccb4 	.word	0x0801ccb4
 8011260:	0801cd3c 	.word	0x0801cd3c
 8011264:	0801ccf8 	.word	0x0801ccf8

08011268 <tcp_listen_closed>:
/** Called when a listen pcb is closed. Iterates all pcb lists and removes the
 * closed listener pcb from pcb->listener if matching.
 */
static void
tcp_listen_closed(struct tcp_pcb *pcb)
{
 8011268:	b580      	push	{r7, lr}
 801126a:	b084      	sub	sp, #16
 801126c:	af00      	add	r7, sp, #0
 801126e:	6078      	str	r0, [r7, #4]
#if LWIP_CALLBACK_API || TCP_LISTEN_BACKLOG
  size_t i;
  LWIP_ASSERT("pcb != NULL", pcb != NULL);
 8011270:	687b      	ldr	r3, [r7, #4]
 8011272:	2b00      	cmp	r3, #0
 8011274:	d106      	bne.n	8011284 <tcp_listen_closed+0x1c>
 8011276:	4b14      	ldr	r3, [pc, #80]	; (80112c8 <tcp_listen_closed+0x60>)
 8011278:	f240 1211 	movw	r2, #273	; 0x111
 801127c:	4913      	ldr	r1, [pc, #76]	; (80112cc <tcp_listen_closed+0x64>)
 801127e:	4814      	ldr	r0, [pc, #80]	; (80112d0 <tcp_listen_closed+0x68>)
 8011280:	f008 fbf2 	bl	8019a68 <iprintf>
  LWIP_ASSERT("pcb->state == LISTEN", pcb->state == LISTEN);
 8011284:	687b      	ldr	r3, [r7, #4]
 8011286:	7d1b      	ldrb	r3, [r3, #20]
 8011288:	2b01      	cmp	r3, #1
 801128a:	d006      	beq.n	801129a <tcp_listen_closed+0x32>
 801128c:	4b0e      	ldr	r3, [pc, #56]	; (80112c8 <tcp_listen_closed+0x60>)
 801128e:	f44f 7289 	mov.w	r2, #274	; 0x112
 8011292:	4910      	ldr	r1, [pc, #64]	; (80112d4 <tcp_listen_closed+0x6c>)
 8011294:	480e      	ldr	r0, [pc, #56]	; (80112d0 <tcp_listen_closed+0x68>)
 8011296:	f008 fbe7 	bl	8019a68 <iprintf>
  for (i = 1; i < LWIP_ARRAYSIZE(tcp_pcb_lists); i++) {
 801129a:	2301      	movs	r3, #1
 801129c:	60fb      	str	r3, [r7, #12]
 801129e:	e00b      	b.n	80112b8 <tcp_listen_closed+0x50>
    tcp_remove_listener(*tcp_pcb_lists[i], (struct tcp_pcb_listen *)pcb);
 80112a0:	4a0d      	ldr	r2, [pc, #52]	; (80112d8 <tcp_listen_closed+0x70>)
 80112a2:	68fb      	ldr	r3, [r7, #12]
 80112a4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80112a8:	681b      	ldr	r3, [r3, #0]
 80112aa:	6879      	ldr	r1, [r7, #4]
 80112ac:	4618      	mov	r0, r3
 80112ae:	f7ff ffb1 	bl	8011214 <tcp_remove_listener>
  for (i = 1; i < LWIP_ARRAYSIZE(tcp_pcb_lists); i++) {
 80112b2:	68fb      	ldr	r3, [r7, #12]
 80112b4:	3301      	adds	r3, #1
 80112b6:	60fb      	str	r3, [r7, #12]
 80112b8:	68fb      	ldr	r3, [r7, #12]
 80112ba:	2b03      	cmp	r3, #3
 80112bc:	d9f0      	bls.n	80112a0 <tcp_listen_closed+0x38>
  }
#endif
  LWIP_UNUSED_ARG(pcb);
}
 80112be:	bf00      	nop
 80112c0:	bf00      	nop
 80112c2:	3710      	adds	r7, #16
 80112c4:	46bd      	mov	sp, r7
 80112c6:	bd80      	pop	{r7, pc}
 80112c8:	0801ccb4 	.word	0x0801ccb4
 80112cc:	0801cd64 	.word	0x0801cd64
 80112d0:	0801ccf8 	.word	0x0801ccf8
 80112d4:	0801cd70 	.word	0x0801cd70
 80112d8:	0801eccc 	.word	0x0801eccc

080112dc <tcp_close_shutdown>:
 * @return ERR_OK if connection has been closed
 *         another err_t if closing failed and pcb is not freed
 */
static err_t
tcp_close_shutdown(struct tcp_pcb *pcb, u8_t rst_on_unacked_data)
{
 80112dc:	b5b0      	push	{r4, r5, r7, lr}
 80112de:	b088      	sub	sp, #32
 80112e0:	af04      	add	r7, sp, #16
 80112e2:	6078      	str	r0, [r7, #4]
 80112e4:	460b      	mov	r3, r1
 80112e6:	70fb      	strb	r3, [r7, #3]
  LWIP_ASSERT("tcp_close_shutdown: invalid pcb", pcb != NULL);
 80112e8:	687b      	ldr	r3, [r7, #4]
 80112ea:	2b00      	cmp	r3, #0
 80112ec:	d106      	bne.n	80112fc <tcp_close_shutdown+0x20>
 80112ee:	4b63      	ldr	r3, [pc, #396]	; (801147c <tcp_close_shutdown+0x1a0>)
 80112f0:	f44f 72af 	mov.w	r2, #350	; 0x15e
 80112f4:	4962      	ldr	r1, [pc, #392]	; (8011480 <tcp_close_shutdown+0x1a4>)
 80112f6:	4863      	ldr	r0, [pc, #396]	; (8011484 <tcp_close_shutdown+0x1a8>)
 80112f8:	f008 fbb6 	bl	8019a68 <iprintf>

  if (rst_on_unacked_data && ((pcb->state == ESTABLISHED) || (pcb->state == CLOSE_WAIT))) {
 80112fc:	78fb      	ldrb	r3, [r7, #3]
 80112fe:	2b00      	cmp	r3, #0
 8011300:	d067      	beq.n	80113d2 <tcp_close_shutdown+0xf6>
 8011302:	687b      	ldr	r3, [r7, #4]
 8011304:	7d1b      	ldrb	r3, [r3, #20]
 8011306:	2b04      	cmp	r3, #4
 8011308:	d003      	beq.n	8011312 <tcp_close_shutdown+0x36>
 801130a:	687b      	ldr	r3, [r7, #4]
 801130c:	7d1b      	ldrb	r3, [r3, #20]
 801130e:	2b07      	cmp	r3, #7
 8011310:	d15f      	bne.n	80113d2 <tcp_close_shutdown+0xf6>
    if ((pcb->refused_data != NULL) || (pcb->rcv_wnd != TCP_WND_MAX(pcb))) {
 8011312:	687b      	ldr	r3, [r7, #4]
 8011314:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8011316:	2b00      	cmp	r3, #0
 8011318:	d105      	bne.n	8011326 <tcp_close_shutdown+0x4a>
 801131a:	687b      	ldr	r3, [r7, #4]
 801131c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 801131e:	f241 62d0 	movw	r2, #5840	; 0x16d0
 8011322:	4293      	cmp	r3, r2
 8011324:	d055      	beq.n	80113d2 <tcp_close_shutdown+0xf6>
      /* Not all data received by application, send RST to tell the remote
         side about this. */
      LWIP_ASSERT("pcb->flags & TF_RXCLOSED", pcb->flags & TF_RXCLOSED);
 8011326:	687b      	ldr	r3, [r7, #4]
 8011328:	8b5b      	ldrh	r3, [r3, #26]
 801132a:	f003 0310 	and.w	r3, r3, #16
 801132e:	2b00      	cmp	r3, #0
 8011330:	d106      	bne.n	8011340 <tcp_close_shutdown+0x64>
 8011332:	4b52      	ldr	r3, [pc, #328]	; (801147c <tcp_close_shutdown+0x1a0>)
 8011334:	f44f 72b2 	mov.w	r2, #356	; 0x164
 8011338:	4953      	ldr	r1, [pc, #332]	; (8011488 <tcp_close_shutdown+0x1ac>)
 801133a:	4852      	ldr	r0, [pc, #328]	; (8011484 <tcp_close_shutdown+0x1a8>)
 801133c:	f008 fb94 	bl	8019a68 <iprintf>

      /* don't call tcp_abort here: we must not deallocate the pcb since
         that might not be expected when calling tcp_close */
      tcp_rst(pcb, pcb->snd_nxt, pcb->rcv_nxt, &pcb->local_ip, &pcb->remote_ip,
 8011340:	687b      	ldr	r3, [r7, #4]
 8011342:	6d18      	ldr	r0, [r3, #80]	; 0x50
 8011344:	687b      	ldr	r3, [r7, #4]
 8011346:	6a5c      	ldr	r4, [r3, #36]	; 0x24
 8011348:	687d      	ldr	r5, [r7, #4]
 801134a:	687b      	ldr	r3, [r7, #4]
 801134c:	3304      	adds	r3, #4
 801134e:	687a      	ldr	r2, [r7, #4]
 8011350:	8ad2      	ldrh	r2, [r2, #22]
 8011352:	6879      	ldr	r1, [r7, #4]
 8011354:	8b09      	ldrh	r1, [r1, #24]
 8011356:	9102      	str	r1, [sp, #8]
 8011358:	9201      	str	r2, [sp, #4]
 801135a:	9300      	str	r3, [sp, #0]
 801135c:	462b      	mov	r3, r5
 801135e:	4622      	mov	r2, r4
 8011360:	4601      	mov	r1, r0
 8011362:	6878      	ldr	r0, [r7, #4]
 8011364:	f004 fe94 	bl	8016090 <tcp_rst>
              pcb->local_port, pcb->remote_port);

      tcp_pcb_purge(pcb);
 8011368:	6878      	ldr	r0, [r7, #4]
 801136a:	f001 f8c9 	bl	8012500 <tcp_pcb_purge>
      TCP_RMV_ACTIVE(pcb);
 801136e:	4b47      	ldr	r3, [pc, #284]	; (801148c <tcp_close_shutdown+0x1b0>)
 8011370:	681b      	ldr	r3, [r3, #0]
 8011372:	687a      	ldr	r2, [r7, #4]
 8011374:	429a      	cmp	r2, r3
 8011376:	d105      	bne.n	8011384 <tcp_close_shutdown+0xa8>
 8011378:	4b44      	ldr	r3, [pc, #272]	; (801148c <tcp_close_shutdown+0x1b0>)
 801137a:	681b      	ldr	r3, [r3, #0]
 801137c:	68db      	ldr	r3, [r3, #12]
 801137e:	4a43      	ldr	r2, [pc, #268]	; (801148c <tcp_close_shutdown+0x1b0>)
 8011380:	6013      	str	r3, [r2, #0]
 8011382:	e013      	b.n	80113ac <tcp_close_shutdown+0xd0>
 8011384:	4b41      	ldr	r3, [pc, #260]	; (801148c <tcp_close_shutdown+0x1b0>)
 8011386:	681b      	ldr	r3, [r3, #0]
 8011388:	60fb      	str	r3, [r7, #12]
 801138a:	e00c      	b.n	80113a6 <tcp_close_shutdown+0xca>
 801138c:	68fb      	ldr	r3, [r7, #12]
 801138e:	68db      	ldr	r3, [r3, #12]
 8011390:	687a      	ldr	r2, [r7, #4]
 8011392:	429a      	cmp	r2, r3
 8011394:	d104      	bne.n	80113a0 <tcp_close_shutdown+0xc4>
 8011396:	687b      	ldr	r3, [r7, #4]
 8011398:	68da      	ldr	r2, [r3, #12]
 801139a:	68fb      	ldr	r3, [r7, #12]
 801139c:	60da      	str	r2, [r3, #12]
 801139e:	e005      	b.n	80113ac <tcp_close_shutdown+0xd0>
 80113a0:	68fb      	ldr	r3, [r7, #12]
 80113a2:	68db      	ldr	r3, [r3, #12]
 80113a4:	60fb      	str	r3, [r7, #12]
 80113a6:	68fb      	ldr	r3, [r7, #12]
 80113a8:	2b00      	cmp	r3, #0
 80113aa:	d1ef      	bne.n	801138c <tcp_close_shutdown+0xb0>
 80113ac:	687b      	ldr	r3, [r7, #4]
 80113ae:	2200      	movs	r2, #0
 80113b0:	60da      	str	r2, [r3, #12]
 80113b2:	4b37      	ldr	r3, [pc, #220]	; (8011490 <tcp_close_shutdown+0x1b4>)
 80113b4:	2201      	movs	r2, #1
 80113b6:	701a      	strb	r2, [r3, #0]
      /* Deallocate the pcb since we already sent a RST for it */
      if (tcp_input_pcb == pcb) {
 80113b8:	4b36      	ldr	r3, [pc, #216]	; (8011494 <tcp_close_shutdown+0x1b8>)
 80113ba:	681b      	ldr	r3, [r3, #0]
 80113bc:	687a      	ldr	r2, [r7, #4]
 80113be:	429a      	cmp	r2, r3
 80113c0:	d102      	bne.n	80113c8 <tcp_close_shutdown+0xec>
        /* prevent using a deallocated pcb: free it from tcp_input later */
        tcp_trigger_input_pcb_close();
 80113c2:	f003 fd61 	bl	8014e88 <tcp_trigger_input_pcb_close>
 80113c6:	e002      	b.n	80113ce <tcp_close_shutdown+0xf2>
      } else {
        tcp_free(pcb);
 80113c8:	6878      	ldr	r0, [r7, #4]
 80113ca:	f7ff fed5 	bl	8011178 <tcp_free>
      }
      return ERR_OK;
 80113ce:	2300      	movs	r3, #0
 80113d0:	e050      	b.n	8011474 <tcp_close_shutdown+0x198>
    }
  }

  /* - states which free the pcb are handled here,
     - states which send FIN and change state are handled in tcp_close_shutdown_fin() */
  switch (pcb->state) {
 80113d2:	687b      	ldr	r3, [r7, #4]
 80113d4:	7d1b      	ldrb	r3, [r3, #20]
 80113d6:	2b02      	cmp	r3, #2
 80113d8:	d03b      	beq.n	8011452 <tcp_close_shutdown+0x176>
 80113da:	2b02      	cmp	r3, #2
 80113dc:	dc44      	bgt.n	8011468 <tcp_close_shutdown+0x18c>
 80113de:	2b00      	cmp	r3, #0
 80113e0:	d002      	beq.n	80113e8 <tcp_close_shutdown+0x10c>
 80113e2:	2b01      	cmp	r3, #1
 80113e4:	d02a      	beq.n	801143c <tcp_close_shutdown+0x160>
 80113e6:	e03f      	b.n	8011468 <tcp_close_shutdown+0x18c>
       * and the user needs some way to free it should the need arise.
       * Calling tcp_close() with a pcb that has already been closed, (i.e. twice)
       * or for a pcb that has been used and then entered the CLOSED state
       * is erroneous, but this should never happen as the pcb has in those cases
       * been freed, and so any remaining handles are bogus. */
      if (pcb->local_port != 0) {
 80113e8:	687b      	ldr	r3, [r7, #4]
 80113ea:	8adb      	ldrh	r3, [r3, #22]
 80113ec:	2b00      	cmp	r3, #0
 80113ee:	d021      	beq.n	8011434 <tcp_close_shutdown+0x158>
        TCP_RMV(&tcp_bound_pcbs, pcb);
 80113f0:	4b29      	ldr	r3, [pc, #164]	; (8011498 <tcp_close_shutdown+0x1bc>)
 80113f2:	681b      	ldr	r3, [r3, #0]
 80113f4:	687a      	ldr	r2, [r7, #4]
 80113f6:	429a      	cmp	r2, r3
 80113f8:	d105      	bne.n	8011406 <tcp_close_shutdown+0x12a>
 80113fa:	4b27      	ldr	r3, [pc, #156]	; (8011498 <tcp_close_shutdown+0x1bc>)
 80113fc:	681b      	ldr	r3, [r3, #0]
 80113fe:	68db      	ldr	r3, [r3, #12]
 8011400:	4a25      	ldr	r2, [pc, #148]	; (8011498 <tcp_close_shutdown+0x1bc>)
 8011402:	6013      	str	r3, [r2, #0]
 8011404:	e013      	b.n	801142e <tcp_close_shutdown+0x152>
 8011406:	4b24      	ldr	r3, [pc, #144]	; (8011498 <tcp_close_shutdown+0x1bc>)
 8011408:	681b      	ldr	r3, [r3, #0]
 801140a:	60bb      	str	r3, [r7, #8]
 801140c:	e00c      	b.n	8011428 <tcp_close_shutdown+0x14c>
 801140e:	68bb      	ldr	r3, [r7, #8]
 8011410:	68db      	ldr	r3, [r3, #12]
 8011412:	687a      	ldr	r2, [r7, #4]
 8011414:	429a      	cmp	r2, r3
 8011416:	d104      	bne.n	8011422 <tcp_close_shutdown+0x146>
 8011418:	687b      	ldr	r3, [r7, #4]
 801141a:	68da      	ldr	r2, [r3, #12]
 801141c:	68bb      	ldr	r3, [r7, #8]
 801141e:	60da      	str	r2, [r3, #12]
 8011420:	e005      	b.n	801142e <tcp_close_shutdown+0x152>
 8011422:	68bb      	ldr	r3, [r7, #8]
 8011424:	68db      	ldr	r3, [r3, #12]
 8011426:	60bb      	str	r3, [r7, #8]
 8011428:	68bb      	ldr	r3, [r7, #8]
 801142a:	2b00      	cmp	r3, #0
 801142c:	d1ef      	bne.n	801140e <tcp_close_shutdown+0x132>
 801142e:	687b      	ldr	r3, [r7, #4]
 8011430:	2200      	movs	r2, #0
 8011432:	60da      	str	r2, [r3, #12]
      }
      tcp_free(pcb);
 8011434:	6878      	ldr	r0, [r7, #4]
 8011436:	f7ff fe9f 	bl	8011178 <tcp_free>
      break;
 801143a:	e01a      	b.n	8011472 <tcp_close_shutdown+0x196>
    case LISTEN:
      tcp_listen_closed(pcb);
 801143c:	6878      	ldr	r0, [r7, #4]
 801143e:	f7ff ff13 	bl	8011268 <tcp_listen_closed>
      tcp_pcb_remove(&tcp_listen_pcbs.pcbs, pcb);
 8011442:	6879      	ldr	r1, [r7, #4]
 8011444:	4815      	ldr	r0, [pc, #84]	; (801149c <tcp_close_shutdown+0x1c0>)
 8011446:	f001 f8ab 	bl	80125a0 <tcp_pcb_remove>
      tcp_free_listen(pcb);
 801144a:	6878      	ldr	r0, [r7, #4]
 801144c:	f7ff feb0 	bl	80111b0 <tcp_free_listen>
      break;
 8011450:	e00f      	b.n	8011472 <tcp_close_shutdown+0x196>
    case SYN_SENT:
      TCP_PCB_REMOVE_ACTIVE(pcb);
 8011452:	6879      	ldr	r1, [r7, #4]
 8011454:	480d      	ldr	r0, [pc, #52]	; (801148c <tcp_close_shutdown+0x1b0>)
 8011456:	f001 f8a3 	bl	80125a0 <tcp_pcb_remove>
 801145a:	4b0d      	ldr	r3, [pc, #52]	; (8011490 <tcp_close_shutdown+0x1b4>)
 801145c:	2201      	movs	r2, #1
 801145e:	701a      	strb	r2, [r3, #0]
      tcp_free(pcb);
 8011460:	6878      	ldr	r0, [r7, #4]
 8011462:	f7ff fe89 	bl	8011178 <tcp_free>
      MIB2_STATS_INC(mib2.tcpattemptfails);
      break;
 8011466:	e004      	b.n	8011472 <tcp_close_shutdown+0x196>
    default:
      return tcp_close_shutdown_fin(pcb);
 8011468:	6878      	ldr	r0, [r7, #4]
 801146a:	f000 f819 	bl	80114a0 <tcp_close_shutdown_fin>
 801146e:	4603      	mov	r3, r0
 8011470:	e000      	b.n	8011474 <tcp_close_shutdown+0x198>
  }
  return ERR_OK;
 8011472:	2300      	movs	r3, #0
}
 8011474:	4618      	mov	r0, r3
 8011476:	3710      	adds	r7, #16
 8011478:	46bd      	mov	sp, r7
 801147a:	bdb0      	pop	{r4, r5, r7, pc}
 801147c:	0801ccb4 	.word	0x0801ccb4
 8011480:	0801cd88 	.word	0x0801cd88
 8011484:	0801ccf8 	.word	0x0801ccf8
 8011488:	0801cda8 	.word	0x0801cda8
 801148c:	20007050 	.word	0x20007050
 8011490:	20007058 	.word	0x20007058
 8011494:	20007090 	.word	0x20007090
 8011498:	20007048 	.word	0x20007048
 801149c:	2000704c 	.word	0x2000704c

080114a0 <tcp_close_shutdown_fin>:

static err_t
tcp_close_shutdown_fin(struct tcp_pcb *pcb)
{
 80114a0:	b580      	push	{r7, lr}
 80114a2:	b084      	sub	sp, #16
 80114a4:	af00      	add	r7, sp, #0
 80114a6:	6078      	str	r0, [r7, #4]
  err_t err;
  LWIP_ASSERT("pcb != NULL", pcb != NULL);
 80114a8:	687b      	ldr	r3, [r7, #4]
 80114aa:	2b00      	cmp	r3, #0
 80114ac:	d106      	bne.n	80114bc <tcp_close_shutdown_fin+0x1c>
 80114ae:	4b2e      	ldr	r3, [pc, #184]	; (8011568 <tcp_close_shutdown_fin+0xc8>)
 80114b0:	f44f 72ce 	mov.w	r2, #412	; 0x19c
 80114b4:	492d      	ldr	r1, [pc, #180]	; (801156c <tcp_close_shutdown_fin+0xcc>)
 80114b6:	482e      	ldr	r0, [pc, #184]	; (8011570 <tcp_close_shutdown_fin+0xd0>)
 80114b8:	f008 fad6 	bl	8019a68 <iprintf>

  switch (pcb->state) {
 80114bc:	687b      	ldr	r3, [r7, #4]
 80114be:	7d1b      	ldrb	r3, [r3, #20]
 80114c0:	2b07      	cmp	r3, #7
 80114c2:	d020      	beq.n	8011506 <tcp_close_shutdown_fin+0x66>
 80114c4:	2b07      	cmp	r3, #7
 80114c6:	dc2b      	bgt.n	8011520 <tcp_close_shutdown_fin+0x80>
 80114c8:	2b03      	cmp	r3, #3
 80114ca:	d002      	beq.n	80114d2 <tcp_close_shutdown_fin+0x32>
 80114cc:	2b04      	cmp	r3, #4
 80114ce:	d00d      	beq.n	80114ec <tcp_close_shutdown_fin+0x4c>
 80114d0:	e026      	b.n	8011520 <tcp_close_shutdown_fin+0x80>
    case SYN_RCVD:
      err = tcp_send_fin(pcb);
 80114d2:	6878      	ldr	r0, [r7, #4]
 80114d4:	f003 feea 	bl	80152ac <tcp_send_fin>
 80114d8:	4603      	mov	r3, r0
 80114da:	73fb      	strb	r3, [r7, #15]
      if (err == ERR_OK) {
 80114dc:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80114e0:	2b00      	cmp	r3, #0
 80114e2:	d11f      	bne.n	8011524 <tcp_close_shutdown_fin+0x84>
        tcp_backlog_accepted(pcb);
        MIB2_STATS_INC(mib2.tcpattemptfails);
        pcb->state = FIN_WAIT_1;
 80114e4:	687b      	ldr	r3, [r7, #4]
 80114e6:	2205      	movs	r2, #5
 80114e8:	751a      	strb	r2, [r3, #20]
      }
      break;
 80114ea:	e01b      	b.n	8011524 <tcp_close_shutdown_fin+0x84>
    case ESTABLISHED:
      err = tcp_send_fin(pcb);
 80114ec:	6878      	ldr	r0, [r7, #4]
 80114ee:	f003 fedd 	bl	80152ac <tcp_send_fin>
 80114f2:	4603      	mov	r3, r0
 80114f4:	73fb      	strb	r3, [r7, #15]
      if (err == ERR_OK) {
 80114f6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80114fa:	2b00      	cmp	r3, #0
 80114fc:	d114      	bne.n	8011528 <tcp_close_shutdown_fin+0x88>
        MIB2_STATS_INC(mib2.tcpestabresets);
        pcb->state = FIN_WAIT_1;
 80114fe:	687b      	ldr	r3, [r7, #4]
 8011500:	2205      	movs	r2, #5
 8011502:	751a      	strb	r2, [r3, #20]
      }
      break;
 8011504:	e010      	b.n	8011528 <tcp_close_shutdown_fin+0x88>
    case CLOSE_WAIT:
      err = tcp_send_fin(pcb);
 8011506:	6878      	ldr	r0, [r7, #4]
 8011508:	f003 fed0 	bl	80152ac <tcp_send_fin>
 801150c:	4603      	mov	r3, r0
 801150e:	73fb      	strb	r3, [r7, #15]
      if (err == ERR_OK) {
 8011510:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8011514:	2b00      	cmp	r3, #0
 8011516:	d109      	bne.n	801152c <tcp_close_shutdown_fin+0x8c>
        MIB2_STATS_INC(mib2.tcpestabresets);
        pcb->state = LAST_ACK;
 8011518:	687b      	ldr	r3, [r7, #4]
 801151a:	2209      	movs	r2, #9
 801151c:	751a      	strb	r2, [r3, #20]
      }
      break;
 801151e:	e005      	b.n	801152c <tcp_close_shutdown_fin+0x8c>
    default:
      /* Has already been closed, do nothing. */
      return ERR_OK;
 8011520:	2300      	movs	r3, #0
 8011522:	e01c      	b.n	801155e <tcp_close_shutdown_fin+0xbe>
      break;
 8011524:	bf00      	nop
 8011526:	e002      	b.n	801152e <tcp_close_shutdown_fin+0x8e>
      break;
 8011528:	bf00      	nop
 801152a:	e000      	b.n	801152e <tcp_close_shutdown_fin+0x8e>
      break;
 801152c:	bf00      	nop
  }

  if (err == ERR_OK) {
 801152e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8011532:	2b00      	cmp	r3, #0
 8011534:	d103      	bne.n	801153e <tcp_close_shutdown_fin+0x9e>
    /* To ensure all data has been sent when tcp_close returns, we have
       to make sure tcp_output doesn't fail.
       Since we don't really have to ensure all data has been sent when tcp_close
       returns (unsent data is sent from tcp timer functions, also), we don't care
       for the return value of tcp_output for now. */
    tcp_output(pcb);
 8011536:	6878      	ldr	r0, [r7, #4]
 8011538:	f003 fff6 	bl	8015528 <tcp_output>
 801153c:	e00d      	b.n	801155a <tcp_close_shutdown_fin+0xba>
  } else if (err == ERR_MEM) {
 801153e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8011542:	f1b3 3fff 	cmp.w	r3, #4294967295
 8011546:	d108      	bne.n	801155a <tcp_close_shutdown_fin+0xba>
    /* Mark this pcb for closing. Closing is retried from tcp_tmr. */
    tcp_set_flags(pcb, TF_CLOSEPEND);
 8011548:	687b      	ldr	r3, [r7, #4]
 801154a:	8b5b      	ldrh	r3, [r3, #26]
 801154c:	f043 0308 	orr.w	r3, r3, #8
 8011550:	b29a      	uxth	r2, r3
 8011552:	687b      	ldr	r3, [r7, #4]
 8011554:	835a      	strh	r2, [r3, #26]
    /* We have to return ERR_OK from here to indicate to the callers that this
       pcb should not be used any more as it will be freed soon via tcp_tmr.
       This is OK here since sending FIN does not guarantee a time frime for
       actually freeing the pcb, either (it is left in closure states for
       remote ACK or timeout) */
    return ERR_OK;
 8011556:	2300      	movs	r3, #0
 8011558:	e001      	b.n	801155e <tcp_close_shutdown_fin+0xbe>
  }
  return err;
 801155a:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 801155e:	4618      	mov	r0, r3
 8011560:	3710      	adds	r7, #16
 8011562:	46bd      	mov	sp, r7
 8011564:	bd80      	pop	{r7, pc}
 8011566:	bf00      	nop
 8011568:	0801ccb4 	.word	0x0801ccb4
 801156c:	0801cd64 	.word	0x0801cd64
 8011570:	0801ccf8 	.word	0x0801ccf8

08011574 <tcp_close>:
 * @return ERR_OK if connection has been closed
 *         another err_t if closing failed and pcb is not freed
 */
err_t
tcp_close(struct tcp_pcb *pcb)
{
 8011574:	b580      	push	{r7, lr}
 8011576:	b082      	sub	sp, #8
 8011578:	af00      	add	r7, sp, #0
 801157a:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("tcp_close: invalid pcb", pcb != NULL, return ERR_ARG);
 801157c:	687b      	ldr	r3, [r7, #4]
 801157e:	2b00      	cmp	r3, #0
 8011580:	d109      	bne.n	8011596 <tcp_close+0x22>
 8011582:	4b0f      	ldr	r3, [pc, #60]	; (80115c0 <tcp_close+0x4c>)
 8011584:	f44f 72f4 	mov.w	r2, #488	; 0x1e8
 8011588:	490e      	ldr	r1, [pc, #56]	; (80115c4 <tcp_close+0x50>)
 801158a:	480f      	ldr	r0, [pc, #60]	; (80115c8 <tcp_close+0x54>)
 801158c:	f008 fa6c 	bl	8019a68 <iprintf>
 8011590:	f06f 030f 	mvn.w	r3, #15
 8011594:	e00f      	b.n	80115b6 <tcp_close+0x42>
  LWIP_DEBUGF(TCP_DEBUG, ("tcp_close: closing in "));

  tcp_debug_print_state(pcb->state);

  if (pcb->state != LISTEN) {
 8011596:	687b      	ldr	r3, [r7, #4]
 8011598:	7d1b      	ldrb	r3, [r3, #20]
 801159a:	2b01      	cmp	r3, #1
 801159c:	d006      	beq.n	80115ac <tcp_close+0x38>
    /* Set a flag not to receive any more data... */
    tcp_set_flags(pcb, TF_RXCLOSED);
 801159e:	687b      	ldr	r3, [r7, #4]
 80115a0:	8b5b      	ldrh	r3, [r3, #26]
 80115a2:	f043 0310 	orr.w	r3, r3, #16
 80115a6:	b29a      	uxth	r2, r3
 80115a8:	687b      	ldr	r3, [r7, #4]
 80115aa:	835a      	strh	r2, [r3, #26]
  }
  /* ... and close */
  return tcp_close_shutdown(pcb, 1);
 80115ac:	2101      	movs	r1, #1
 80115ae:	6878      	ldr	r0, [r7, #4]
 80115b0:	f7ff fe94 	bl	80112dc <tcp_close_shutdown>
 80115b4:	4603      	mov	r3, r0
}
 80115b6:	4618      	mov	r0, r3
 80115b8:	3708      	adds	r7, #8
 80115ba:	46bd      	mov	sp, r7
 80115bc:	bd80      	pop	{r7, pc}
 80115be:	bf00      	nop
 80115c0:	0801ccb4 	.word	0x0801ccb4
 80115c4:	0801cdc4 	.word	0x0801cdc4
 80115c8:	0801ccf8 	.word	0x0801ccf8

080115cc <tcp_abandon>:
 * @param pcb the tcp_pcb to abort
 * @param reset boolean to indicate whether a reset should be sent
 */
void
tcp_abandon(struct tcp_pcb *pcb, int reset)
{
 80115cc:	b580      	push	{r7, lr}
 80115ce:	b08e      	sub	sp, #56	; 0x38
 80115d0:	af04      	add	r7, sp, #16
 80115d2:	6078      	str	r0, [r7, #4]
 80115d4:	6039      	str	r1, [r7, #0]
#endif /* LWIP_CALLBACK_API */
  void *errf_arg;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("tcp_abandon: invalid pcb", pcb != NULL, return);
 80115d6:	687b      	ldr	r3, [r7, #4]
 80115d8:	2b00      	cmp	r3, #0
 80115da:	d107      	bne.n	80115ec <tcp_abandon+0x20>
 80115dc:	4b52      	ldr	r3, [pc, #328]	; (8011728 <tcp_abandon+0x15c>)
 80115de:	f240 223d 	movw	r2, #573	; 0x23d
 80115e2:	4952      	ldr	r1, [pc, #328]	; (801172c <tcp_abandon+0x160>)
 80115e4:	4852      	ldr	r0, [pc, #328]	; (8011730 <tcp_abandon+0x164>)
 80115e6:	f008 fa3f 	bl	8019a68 <iprintf>
 80115ea:	e099      	b.n	8011720 <tcp_abandon+0x154>

  /* pcb->state LISTEN not allowed here */
  LWIP_ASSERT("don't call tcp_abort/tcp_abandon for listen-pcbs",
 80115ec:	687b      	ldr	r3, [r7, #4]
 80115ee:	7d1b      	ldrb	r3, [r3, #20]
 80115f0:	2b01      	cmp	r3, #1
 80115f2:	d106      	bne.n	8011602 <tcp_abandon+0x36>
 80115f4:	4b4c      	ldr	r3, [pc, #304]	; (8011728 <tcp_abandon+0x15c>)
 80115f6:	f44f 7210 	mov.w	r2, #576	; 0x240
 80115fa:	494e      	ldr	r1, [pc, #312]	; (8011734 <tcp_abandon+0x168>)
 80115fc:	484c      	ldr	r0, [pc, #304]	; (8011730 <tcp_abandon+0x164>)
 80115fe:	f008 fa33 	bl	8019a68 <iprintf>
              pcb->state != LISTEN);
  /* Figure out on which TCP PCB list we are, and remove us. If we
     are in an active state, call the receive function associated with
     the PCB with a NULL argument, and send an RST to the remote end. */
  if (pcb->state == TIME_WAIT) {
 8011602:	687b      	ldr	r3, [r7, #4]
 8011604:	7d1b      	ldrb	r3, [r3, #20]
 8011606:	2b0a      	cmp	r3, #10
 8011608:	d107      	bne.n	801161a <tcp_abandon+0x4e>
    tcp_pcb_remove(&tcp_tw_pcbs, pcb);
 801160a:	6879      	ldr	r1, [r7, #4]
 801160c:	484a      	ldr	r0, [pc, #296]	; (8011738 <tcp_abandon+0x16c>)
 801160e:	f000 ffc7 	bl	80125a0 <tcp_pcb_remove>
    tcp_free(pcb);
 8011612:	6878      	ldr	r0, [r7, #4]
 8011614:	f7ff fdb0 	bl	8011178 <tcp_free>
 8011618:	e082      	b.n	8011720 <tcp_abandon+0x154>
  } else {
    int send_rst = 0;
 801161a:	2300      	movs	r3, #0
 801161c:	627b      	str	r3, [r7, #36]	; 0x24
    u16_t local_port = 0;
 801161e:	2300      	movs	r3, #0
 8011620:	847b      	strh	r3, [r7, #34]	; 0x22
    enum tcp_state last_state;
    seqno = pcb->snd_nxt;
 8011622:	687b      	ldr	r3, [r7, #4]
 8011624:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8011626:	61bb      	str	r3, [r7, #24]
    ackno = pcb->rcv_nxt;
 8011628:	687b      	ldr	r3, [r7, #4]
 801162a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801162c:	617b      	str	r3, [r7, #20]
#if LWIP_CALLBACK_API
    errf = pcb->errf;
 801162e:	687b      	ldr	r3, [r7, #4]
 8011630:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8011634:	613b      	str	r3, [r7, #16]
#endif /* LWIP_CALLBACK_API */
    errf_arg = pcb->callback_arg;
 8011636:	687b      	ldr	r3, [r7, #4]
 8011638:	691b      	ldr	r3, [r3, #16]
 801163a:	60fb      	str	r3, [r7, #12]
    if (pcb->state == CLOSED) {
 801163c:	687b      	ldr	r3, [r7, #4]
 801163e:	7d1b      	ldrb	r3, [r3, #20]
 8011640:	2b00      	cmp	r3, #0
 8011642:	d126      	bne.n	8011692 <tcp_abandon+0xc6>
      if (pcb->local_port != 0) {
 8011644:	687b      	ldr	r3, [r7, #4]
 8011646:	8adb      	ldrh	r3, [r3, #22]
 8011648:	2b00      	cmp	r3, #0
 801164a:	d02e      	beq.n	80116aa <tcp_abandon+0xde>
        /* bound, not yet opened */
        TCP_RMV(&tcp_bound_pcbs, pcb);
 801164c:	4b3b      	ldr	r3, [pc, #236]	; (801173c <tcp_abandon+0x170>)
 801164e:	681b      	ldr	r3, [r3, #0]
 8011650:	687a      	ldr	r2, [r7, #4]
 8011652:	429a      	cmp	r2, r3
 8011654:	d105      	bne.n	8011662 <tcp_abandon+0x96>
 8011656:	4b39      	ldr	r3, [pc, #228]	; (801173c <tcp_abandon+0x170>)
 8011658:	681b      	ldr	r3, [r3, #0]
 801165a:	68db      	ldr	r3, [r3, #12]
 801165c:	4a37      	ldr	r2, [pc, #220]	; (801173c <tcp_abandon+0x170>)
 801165e:	6013      	str	r3, [r2, #0]
 8011660:	e013      	b.n	801168a <tcp_abandon+0xbe>
 8011662:	4b36      	ldr	r3, [pc, #216]	; (801173c <tcp_abandon+0x170>)
 8011664:	681b      	ldr	r3, [r3, #0]
 8011666:	61fb      	str	r3, [r7, #28]
 8011668:	e00c      	b.n	8011684 <tcp_abandon+0xb8>
 801166a:	69fb      	ldr	r3, [r7, #28]
 801166c:	68db      	ldr	r3, [r3, #12]
 801166e:	687a      	ldr	r2, [r7, #4]
 8011670:	429a      	cmp	r2, r3
 8011672:	d104      	bne.n	801167e <tcp_abandon+0xb2>
 8011674:	687b      	ldr	r3, [r7, #4]
 8011676:	68da      	ldr	r2, [r3, #12]
 8011678:	69fb      	ldr	r3, [r7, #28]
 801167a:	60da      	str	r2, [r3, #12]
 801167c:	e005      	b.n	801168a <tcp_abandon+0xbe>
 801167e:	69fb      	ldr	r3, [r7, #28]
 8011680:	68db      	ldr	r3, [r3, #12]
 8011682:	61fb      	str	r3, [r7, #28]
 8011684:	69fb      	ldr	r3, [r7, #28]
 8011686:	2b00      	cmp	r3, #0
 8011688:	d1ef      	bne.n	801166a <tcp_abandon+0x9e>
 801168a:	687b      	ldr	r3, [r7, #4]
 801168c:	2200      	movs	r2, #0
 801168e:	60da      	str	r2, [r3, #12]
 8011690:	e00b      	b.n	80116aa <tcp_abandon+0xde>
      }
    } else {
      send_rst = reset;
 8011692:	683b      	ldr	r3, [r7, #0]
 8011694:	627b      	str	r3, [r7, #36]	; 0x24
      local_port = pcb->local_port;
 8011696:	687b      	ldr	r3, [r7, #4]
 8011698:	8adb      	ldrh	r3, [r3, #22]
 801169a:	847b      	strh	r3, [r7, #34]	; 0x22
      TCP_PCB_REMOVE_ACTIVE(pcb);
 801169c:	6879      	ldr	r1, [r7, #4]
 801169e:	4828      	ldr	r0, [pc, #160]	; (8011740 <tcp_abandon+0x174>)
 80116a0:	f000 ff7e 	bl	80125a0 <tcp_pcb_remove>
 80116a4:	4b27      	ldr	r3, [pc, #156]	; (8011744 <tcp_abandon+0x178>)
 80116a6:	2201      	movs	r2, #1
 80116a8:	701a      	strb	r2, [r3, #0]
    }
    if (pcb->unacked != NULL) {
 80116aa:	687b      	ldr	r3, [r7, #4]
 80116ac:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80116ae:	2b00      	cmp	r3, #0
 80116b0:	d004      	beq.n	80116bc <tcp_abandon+0xf0>
      tcp_segs_free(pcb->unacked);
 80116b2:	687b      	ldr	r3, [r7, #4]
 80116b4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80116b6:	4618      	mov	r0, r3
 80116b8:	f000 fd20 	bl	80120fc <tcp_segs_free>
    }
    if (pcb->unsent != NULL) {
 80116bc:	687b      	ldr	r3, [r7, #4]
 80116be:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80116c0:	2b00      	cmp	r3, #0
 80116c2:	d004      	beq.n	80116ce <tcp_abandon+0x102>
      tcp_segs_free(pcb->unsent);
 80116c4:	687b      	ldr	r3, [r7, #4]
 80116c6:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80116c8:	4618      	mov	r0, r3
 80116ca:	f000 fd17 	bl	80120fc <tcp_segs_free>
    }
#if TCP_QUEUE_OOSEQ
    if (pcb->ooseq != NULL) {
 80116ce:	687b      	ldr	r3, [r7, #4]
 80116d0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80116d2:	2b00      	cmp	r3, #0
 80116d4:	d004      	beq.n	80116e0 <tcp_abandon+0x114>
      tcp_segs_free(pcb->ooseq);
 80116d6:	687b      	ldr	r3, [r7, #4]
 80116d8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80116da:	4618      	mov	r0, r3
 80116dc:	f000 fd0e 	bl	80120fc <tcp_segs_free>
    }
#endif /* TCP_QUEUE_OOSEQ */
    tcp_backlog_accepted(pcb);
    if (send_rst) {
 80116e0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80116e2:	2b00      	cmp	r3, #0
 80116e4:	d00e      	beq.n	8011704 <tcp_abandon+0x138>
      LWIP_DEBUGF(TCP_RST_DEBUG, ("tcp_abandon: sending RST\n"));
      tcp_rst(pcb, seqno, ackno, &pcb->local_ip, &pcb->remote_ip, local_port, pcb->remote_port);
 80116e6:	6879      	ldr	r1, [r7, #4]
 80116e8:	687b      	ldr	r3, [r7, #4]
 80116ea:	3304      	adds	r3, #4
 80116ec:	687a      	ldr	r2, [r7, #4]
 80116ee:	8b12      	ldrh	r2, [r2, #24]
 80116f0:	9202      	str	r2, [sp, #8]
 80116f2:	8c7a      	ldrh	r2, [r7, #34]	; 0x22
 80116f4:	9201      	str	r2, [sp, #4]
 80116f6:	9300      	str	r3, [sp, #0]
 80116f8:	460b      	mov	r3, r1
 80116fa:	697a      	ldr	r2, [r7, #20]
 80116fc:	69b9      	ldr	r1, [r7, #24]
 80116fe:	6878      	ldr	r0, [r7, #4]
 8011700:	f004 fcc6 	bl	8016090 <tcp_rst>
    }
    last_state = pcb->state;
 8011704:	687b      	ldr	r3, [r7, #4]
 8011706:	7d1b      	ldrb	r3, [r3, #20]
 8011708:	72fb      	strb	r3, [r7, #11]
    tcp_free(pcb);
 801170a:	6878      	ldr	r0, [r7, #4]
 801170c:	f7ff fd34 	bl	8011178 <tcp_free>
    TCP_EVENT_ERR(last_state, errf, errf_arg, ERR_ABRT);
 8011710:	693b      	ldr	r3, [r7, #16]
 8011712:	2b00      	cmp	r3, #0
 8011714:	d004      	beq.n	8011720 <tcp_abandon+0x154>
 8011716:	693b      	ldr	r3, [r7, #16]
 8011718:	f06f 010c 	mvn.w	r1, #12
 801171c:	68f8      	ldr	r0, [r7, #12]
 801171e:	4798      	blx	r3
  }
}
 8011720:	3728      	adds	r7, #40	; 0x28
 8011722:	46bd      	mov	sp, r7
 8011724:	bd80      	pop	{r7, pc}
 8011726:	bf00      	nop
 8011728:	0801ccb4 	.word	0x0801ccb4
 801172c:	0801cdf8 	.word	0x0801cdf8
 8011730:	0801ccf8 	.word	0x0801ccf8
 8011734:	0801ce14 	.word	0x0801ce14
 8011738:	20007054 	.word	0x20007054
 801173c:	20007048 	.word	0x20007048
 8011740:	20007050 	.word	0x20007050
 8011744:	20007058 	.word	0x20007058

08011748 <tcp_abort>:
 *
 * @param pcb the tcp pcb to abort
 */
void
tcp_abort(struct tcp_pcb *pcb)
{
 8011748:	b580      	push	{r7, lr}
 801174a:	b082      	sub	sp, #8
 801174c:	af00      	add	r7, sp, #0
 801174e:	6078      	str	r0, [r7, #4]
  tcp_abandon(pcb, 1);
 8011750:	2101      	movs	r1, #1
 8011752:	6878      	ldr	r0, [r7, #4]
 8011754:	f7ff ff3a 	bl	80115cc <tcp_abandon>
}
 8011758:	bf00      	nop
 801175a:	3708      	adds	r7, #8
 801175c:	46bd      	mov	sp, r7
 801175e:	bd80      	pop	{r7, pc}

08011760 <tcp_update_rcv_ann_wnd>:
 * Returns how much extra window would be advertised if we sent an
 * update now.
 */
u32_t
tcp_update_rcv_ann_wnd(struct tcp_pcb *pcb)
{
 8011760:	b580      	push	{r7, lr}
 8011762:	b084      	sub	sp, #16
 8011764:	af00      	add	r7, sp, #0
 8011766:	6078      	str	r0, [r7, #4]
  u32_t new_right_edge;

  LWIP_ASSERT("tcp_update_rcv_ann_wnd: invalid pcb", pcb != NULL);
 8011768:	687b      	ldr	r3, [r7, #4]
 801176a:	2b00      	cmp	r3, #0
 801176c:	d106      	bne.n	801177c <tcp_update_rcv_ann_wnd+0x1c>
 801176e:	4b25      	ldr	r3, [pc, #148]	; (8011804 <tcp_update_rcv_ann_wnd+0xa4>)
 8011770:	f240 32a6 	movw	r2, #934	; 0x3a6
 8011774:	4924      	ldr	r1, [pc, #144]	; (8011808 <tcp_update_rcv_ann_wnd+0xa8>)
 8011776:	4825      	ldr	r0, [pc, #148]	; (801180c <tcp_update_rcv_ann_wnd+0xac>)
 8011778:	f008 f976 	bl	8019a68 <iprintf>
  new_right_edge = pcb->rcv_nxt + pcb->rcv_wnd;
 801177c:	687b      	ldr	r3, [r7, #4]
 801177e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8011780:	687a      	ldr	r2, [r7, #4]
 8011782:	8d12      	ldrh	r2, [r2, #40]	; 0x28
 8011784:	4413      	add	r3, r2
 8011786:	60fb      	str	r3, [r7, #12]

  if (TCP_SEQ_GEQ(new_right_edge, pcb->rcv_ann_right_edge + LWIP_MIN((TCP_WND / 2), pcb->mss))) {
 8011788:	687b      	ldr	r3, [r7, #4]
 801178a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801178c:	687a      	ldr	r2, [r7, #4]
 801178e:	8e52      	ldrh	r2, [r2, #50]	; 0x32
 8011790:	f640 3168 	movw	r1, #2920	; 0xb68
 8011794:	428a      	cmp	r2, r1
 8011796:	bf28      	it	cs
 8011798:	460a      	movcs	r2, r1
 801179a:	b292      	uxth	r2, r2
 801179c:	4413      	add	r3, r2
 801179e:	68fa      	ldr	r2, [r7, #12]
 80117a0:	1ad3      	subs	r3, r2, r3
 80117a2:	2b00      	cmp	r3, #0
 80117a4:	db08      	blt.n	80117b8 <tcp_update_rcv_ann_wnd+0x58>
    /* we can advertise more window */
    pcb->rcv_ann_wnd = pcb->rcv_wnd;
 80117a6:	687b      	ldr	r3, [r7, #4]
 80117a8:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 80117aa:	687b      	ldr	r3, [r7, #4]
 80117ac:	855a      	strh	r2, [r3, #42]	; 0x2a
    return new_right_edge - pcb->rcv_ann_right_edge;
 80117ae:	687b      	ldr	r3, [r7, #4]
 80117b0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80117b2:	68fa      	ldr	r2, [r7, #12]
 80117b4:	1ad3      	subs	r3, r2, r3
 80117b6:	e020      	b.n	80117fa <tcp_update_rcv_ann_wnd+0x9a>
  } else {
    if (TCP_SEQ_GT(pcb->rcv_nxt, pcb->rcv_ann_right_edge)) {
 80117b8:	687b      	ldr	r3, [r7, #4]
 80117ba:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80117bc:	687b      	ldr	r3, [r7, #4]
 80117be:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80117c0:	1ad3      	subs	r3, r2, r3
 80117c2:	2b00      	cmp	r3, #0
 80117c4:	dd03      	ble.n	80117ce <tcp_update_rcv_ann_wnd+0x6e>
      /* Can happen due to other end sending out of advertised window,
       * but within actual available (but not yet advertised) window */
      pcb->rcv_ann_wnd = 0;
 80117c6:	687b      	ldr	r3, [r7, #4]
 80117c8:	2200      	movs	r2, #0
 80117ca:	855a      	strh	r2, [r3, #42]	; 0x2a
 80117cc:	e014      	b.n	80117f8 <tcp_update_rcv_ann_wnd+0x98>
    } else {
      /* keep the right edge of window constant */
      u32_t new_rcv_ann_wnd = pcb->rcv_ann_right_edge - pcb->rcv_nxt;
 80117ce:	687b      	ldr	r3, [r7, #4]
 80117d0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80117d2:	687b      	ldr	r3, [r7, #4]
 80117d4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80117d6:	1ad3      	subs	r3, r2, r3
 80117d8:	60bb      	str	r3, [r7, #8]
#if !LWIP_WND_SCALE
      LWIP_ASSERT("new_rcv_ann_wnd <= 0xffff", new_rcv_ann_wnd <= 0xffff);
 80117da:	68bb      	ldr	r3, [r7, #8]
 80117dc:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80117e0:	d306      	bcc.n	80117f0 <tcp_update_rcv_ann_wnd+0x90>
 80117e2:	4b08      	ldr	r3, [pc, #32]	; (8011804 <tcp_update_rcv_ann_wnd+0xa4>)
 80117e4:	f240 32b6 	movw	r2, #950	; 0x3b6
 80117e8:	4909      	ldr	r1, [pc, #36]	; (8011810 <tcp_update_rcv_ann_wnd+0xb0>)
 80117ea:	4808      	ldr	r0, [pc, #32]	; (801180c <tcp_update_rcv_ann_wnd+0xac>)
 80117ec:	f008 f93c 	bl	8019a68 <iprintf>
#endif
      pcb->rcv_ann_wnd = (tcpwnd_size_t)new_rcv_ann_wnd;
 80117f0:	68bb      	ldr	r3, [r7, #8]
 80117f2:	b29a      	uxth	r2, r3
 80117f4:	687b      	ldr	r3, [r7, #4]
 80117f6:	855a      	strh	r2, [r3, #42]	; 0x2a
    }
    return 0;
 80117f8:	2300      	movs	r3, #0
  }
}
 80117fa:	4618      	mov	r0, r3
 80117fc:	3710      	adds	r7, #16
 80117fe:	46bd      	mov	sp, r7
 8011800:	bd80      	pop	{r7, pc}
 8011802:	bf00      	nop
 8011804:	0801ccb4 	.word	0x0801ccb4
 8011808:	0801cf10 	.word	0x0801cf10
 801180c:	0801ccf8 	.word	0x0801ccf8
 8011810:	0801cf34 	.word	0x0801cf34

08011814 <tcp_recved>:
 * @param pcb the tcp_pcb for which data is read
 * @param len the amount of bytes that have been read by the application
 */
void
tcp_recved(struct tcp_pcb *pcb, u16_t len)
{
 8011814:	b580      	push	{r7, lr}
 8011816:	b084      	sub	sp, #16
 8011818:	af00      	add	r7, sp, #0
 801181a:	6078      	str	r0, [r7, #4]
 801181c:	460b      	mov	r3, r1
 801181e:	807b      	strh	r3, [r7, #2]
  u32_t wnd_inflation;
  tcpwnd_size_t rcv_wnd;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("tcp_recved: invalid pcb", pcb != NULL, return);
 8011820:	687b      	ldr	r3, [r7, #4]
 8011822:	2b00      	cmp	r3, #0
 8011824:	d107      	bne.n	8011836 <tcp_recved+0x22>
 8011826:	4b20      	ldr	r3, [pc, #128]	; (80118a8 <tcp_recved+0x94>)
 8011828:	f240 32cf 	movw	r2, #975	; 0x3cf
 801182c:	491f      	ldr	r1, [pc, #124]	; (80118ac <tcp_recved+0x98>)
 801182e:	4820      	ldr	r0, [pc, #128]	; (80118b0 <tcp_recved+0x9c>)
 8011830:	f008 f91a 	bl	8019a68 <iprintf>
 8011834:	e034      	b.n	80118a0 <tcp_recved+0x8c>

  /* pcb->state LISTEN not allowed here */
  LWIP_ASSERT("don't call tcp_recved for listen-pcbs",
 8011836:	687b      	ldr	r3, [r7, #4]
 8011838:	7d1b      	ldrb	r3, [r3, #20]
 801183a:	2b01      	cmp	r3, #1
 801183c:	d106      	bne.n	801184c <tcp_recved+0x38>
 801183e:	4b1a      	ldr	r3, [pc, #104]	; (80118a8 <tcp_recved+0x94>)
 8011840:	f240 32d2 	movw	r2, #978	; 0x3d2
 8011844:	491b      	ldr	r1, [pc, #108]	; (80118b4 <tcp_recved+0xa0>)
 8011846:	481a      	ldr	r0, [pc, #104]	; (80118b0 <tcp_recved+0x9c>)
 8011848:	f008 f90e 	bl	8019a68 <iprintf>
              pcb->state != LISTEN);

  rcv_wnd = (tcpwnd_size_t)(pcb->rcv_wnd + len);
 801184c:	687b      	ldr	r3, [r7, #4]
 801184e:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 8011850:	887b      	ldrh	r3, [r7, #2]
 8011852:	4413      	add	r3, r2
 8011854:	81fb      	strh	r3, [r7, #14]
  if ((rcv_wnd > TCP_WND_MAX(pcb)) || (rcv_wnd < pcb->rcv_wnd)) {
 8011856:	89fb      	ldrh	r3, [r7, #14]
 8011858:	f241 62d0 	movw	r2, #5840	; 0x16d0
 801185c:	4293      	cmp	r3, r2
 801185e:	d804      	bhi.n	801186a <tcp_recved+0x56>
 8011860:	687b      	ldr	r3, [r7, #4]
 8011862:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8011864:	89fa      	ldrh	r2, [r7, #14]
 8011866:	429a      	cmp	r2, r3
 8011868:	d204      	bcs.n	8011874 <tcp_recved+0x60>
    /* window got too big or tcpwnd_size_t overflow */
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_recved: window got too big or tcpwnd_size_t overflow\n"));
    pcb->rcv_wnd = TCP_WND_MAX(pcb);
 801186a:	687b      	ldr	r3, [r7, #4]
 801186c:	f241 62d0 	movw	r2, #5840	; 0x16d0
 8011870:	851a      	strh	r2, [r3, #40]	; 0x28
 8011872:	e002      	b.n	801187a <tcp_recved+0x66>
  } else  {
    pcb->rcv_wnd = rcv_wnd;
 8011874:	687b      	ldr	r3, [r7, #4]
 8011876:	89fa      	ldrh	r2, [r7, #14]
 8011878:	851a      	strh	r2, [r3, #40]	; 0x28
  }

  wnd_inflation = tcp_update_rcv_ann_wnd(pcb);
 801187a:	6878      	ldr	r0, [r7, #4]
 801187c:	f7ff ff70 	bl	8011760 <tcp_update_rcv_ann_wnd>
 8011880:	60b8      	str	r0, [r7, #8]

  /* If the change in the right edge of window is significant (default
   * watermark is TCP_WND/4), then send an explicit update now.
   * Otherwise wait for a packet to be sent in the normal course of
   * events (or more window to be available later) */
  if (wnd_inflation >= TCP_WND_UPDATE_THRESHOLD) {
 8011882:	68bb      	ldr	r3, [r7, #8]
 8011884:	f240 52b3 	movw	r2, #1459	; 0x5b3
 8011888:	4293      	cmp	r3, r2
 801188a:	d909      	bls.n	80118a0 <tcp_recved+0x8c>
    tcp_ack_now(pcb);
 801188c:	687b      	ldr	r3, [r7, #4]
 801188e:	8b5b      	ldrh	r3, [r3, #26]
 8011890:	f043 0302 	orr.w	r3, r3, #2
 8011894:	b29a      	uxth	r2, r3
 8011896:	687b      	ldr	r3, [r7, #4]
 8011898:	835a      	strh	r2, [r3, #26]
    tcp_output(pcb);
 801189a:	6878      	ldr	r0, [r7, #4]
 801189c:	f003 fe44 	bl	8015528 <tcp_output>
  }

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_recved: received %"U16_F" bytes, wnd %"TCPWNDSIZE_F" (%"TCPWNDSIZE_F").\n",
                          len, pcb->rcv_wnd, (u16_t)(TCP_WND_MAX(pcb) - pcb->rcv_wnd)));
}
 80118a0:	3710      	adds	r7, #16
 80118a2:	46bd      	mov	sp, r7
 80118a4:	bd80      	pop	{r7, pc}
 80118a6:	bf00      	nop
 80118a8:	0801ccb4 	.word	0x0801ccb4
 80118ac:	0801cf50 	.word	0x0801cf50
 80118b0:	0801ccf8 	.word	0x0801ccf8
 80118b4:	0801cf68 	.word	0x0801cf68

080118b8 <tcp_slowtmr>:
 *
 * Automatically called from tcp_tmr().
 */
void
tcp_slowtmr(void)
{
 80118b8:	b5b0      	push	{r4, r5, r7, lr}
 80118ba:	b090      	sub	sp, #64	; 0x40
 80118bc:	af04      	add	r7, sp, #16
  tcpwnd_size_t eff_wnd;
  u8_t pcb_remove;      /* flag if a PCB should be removed */
  u8_t pcb_reset;       /* flag if a RST should be sent when removing */
  err_t err;

  err = ERR_OK;
 80118be:	2300      	movs	r3, #0
 80118c0:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25

  ++tcp_ticks;
 80118c4:	4b94      	ldr	r3, [pc, #592]	; (8011b18 <tcp_slowtmr+0x260>)
 80118c6:	681b      	ldr	r3, [r3, #0]
 80118c8:	3301      	adds	r3, #1
 80118ca:	4a93      	ldr	r2, [pc, #588]	; (8011b18 <tcp_slowtmr+0x260>)
 80118cc:	6013      	str	r3, [r2, #0]
  ++tcp_timer_ctr;
 80118ce:	4b93      	ldr	r3, [pc, #588]	; (8011b1c <tcp_slowtmr+0x264>)
 80118d0:	781b      	ldrb	r3, [r3, #0]
 80118d2:	3301      	adds	r3, #1
 80118d4:	b2da      	uxtb	r2, r3
 80118d6:	4b91      	ldr	r3, [pc, #580]	; (8011b1c <tcp_slowtmr+0x264>)
 80118d8:	701a      	strb	r2, [r3, #0]

tcp_slowtmr_start:
  /* Steps through all of the active PCBs. */
  prev = NULL;
 80118da:	2300      	movs	r3, #0
 80118dc:	62bb      	str	r3, [r7, #40]	; 0x28
  pcb = tcp_active_pcbs;
 80118de:	4b90      	ldr	r3, [pc, #576]	; (8011b20 <tcp_slowtmr+0x268>)
 80118e0:	681b      	ldr	r3, [r3, #0]
 80118e2:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (pcb == NULL) {
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: no active pcbs\n"));
  }
  while (pcb != NULL) {
 80118e4:	e29d      	b.n	8011e22 <tcp_slowtmr+0x56a>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: processing active pcb\n"));
    LWIP_ASSERT("tcp_slowtmr: active pcb->state != CLOSED\n", pcb->state != CLOSED);
 80118e6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80118e8:	7d1b      	ldrb	r3, [r3, #20]
 80118ea:	2b00      	cmp	r3, #0
 80118ec:	d106      	bne.n	80118fc <tcp_slowtmr+0x44>
 80118ee:	4b8d      	ldr	r3, [pc, #564]	; (8011b24 <tcp_slowtmr+0x26c>)
 80118f0:	f240 42be 	movw	r2, #1214	; 0x4be
 80118f4:	498c      	ldr	r1, [pc, #560]	; (8011b28 <tcp_slowtmr+0x270>)
 80118f6:	488d      	ldr	r0, [pc, #564]	; (8011b2c <tcp_slowtmr+0x274>)
 80118f8:	f008 f8b6 	bl	8019a68 <iprintf>
    LWIP_ASSERT("tcp_slowtmr: active pcb->state != LISTEN\n", pcb->state != LISTEN);
 80118fc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80118fe:	7d1b      	ldrb	r3, [r3, #20]
 8011900:	2b01      	cmp	r3, #1
 8011902:	d106      	bne.n	8011912 <tcp_slowtmr+0x5a>
 8011904:	4b87      	ldr	r3, [pc, #540]	; (8011b24 <tcp_slowtmr+0x26c>)
 8011906:	f240 42bf 	movw	r2, #1215	; 0x4bf
 801190a:	4989      	ldr	r1, [pc, #548]	; (8011b30 <tcp_slowtmr+0x278>)
 801190c:	4887      	ldr	r0, [pc, #540]	; (8011b2c <tcp_slowtmr+0x274>)
 801190e:	f008 f8ab 	bl	8019a68 <iprintf>
    LWIP_ASSERT("tcp_slowtmr: active pcb->state != TIME-WAIT\n", pcb->state != TIME_WAIT);
 8011912:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011914:	7d1b      	ldrb	r3, [r3, #20]
 8011916:	2b0a      	cmp	r3, #10
 8011918:	d106      	bne.n	8011928 <tcp_slowtmr+0x70>
 801191a:	4b82      	ldr	r3, [pc, #520]	; (8011b24 <tcp_slowtmr+0x26c>)
 801191c:	f44f 6298 	mov.w	r2, #1216	; 0x4c0
 8011920:	4984      	ldr	r1, [pc, #528]	; (8011b34 <tcp_slowtmr+0x27c>)
 8011922:	4882      	ldr	r0, [pc, #520]	; (8011b2c <tcp_slowtmr+0x274>)
 8011924:	f008 f8a0 	bl	8019a68 <iprintf>
    if (pcb->last_timer == tcp_timer_ctr) {
 8011928:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801192a:	7f9a      	ldrb	r2, [r3, #30]
 801192c:	4b7b      	ldr	r3, [pc, #492]	; (8011b1c <tcp_slowtmr+0x264>)
 801192e:	781b      	ldrb	r3, [r3, #0]
 8011930:	429a      	cmp	r2, r3
 8011932:	d105      	bne.n	8011940 <tcp_slowtmr+0x88>
      /* skip this pcb, we have already processed it */
      prev = pcb;
 8011934:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011936:	62bb      	str	r3, [r7, #40]	; 0x28
      pcb = pcb->next;
 8011938:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801193a:	68db      	ldr	r3, [r3, #12]
 801193c:	62fb      	str	r3, [r7, #44]	; 0x2c
      continue;
 801193e:	e270      	b.n	8011e22 <tcp_slowtmr+0x56a>
    }
    pcb->last_timer = tcp_timer_ctr;
 8011940:	4b76      	ldr	r3, [pc, #472]	; (8011b1c <tcp_slowtmr+0x264>)
 8011942:	781a      	ldrb	r2, [r3, #0]
 8011944:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011946:	779a      	strb	r2, [r3, #30]

    pcb_remove = 0;
 8011948:	2300      	movs	r3, #0
 801194a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    pcb_reset = 0;
 801194e:	2300      	movs	r3, #0
 8011950:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26

    if (pcb->state == SYN_SENT && pcb->nrtx >= TCP_SYNMAXRTX) {
 8011954:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011956:	7d1b      	ldrb	r3, [r3, #20]
 8011958:	2b02      	cmp	r3, #2
 801195a:	d10a      	bne.n	8011972 <tcp_slowtmr+0xba>
 801195c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801195e:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8011962:	2b05      	cmp	r3, #5
 8011964:	d905      	bls.n	8011972 <tcp_slowtmr+0xba>
      ++pcb_remove;
 8011966:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 801196a:	3301      	adds	r3, #1
 801196c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8011970:	e11e      	b.n	8011bb0 <tcp_slowtmr+0x2f8>
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: max SYN retries reached\n"));
    } else if (pcb->nrtx >= TCP_MAXRTX) {
 8011972:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011974:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8011978:	2b0b      	cmp	r3, #11
 801197a:	d905      	bls.n	8011988 <tcp_slowtmr+0xd0>
      ++pcb_remove;
 801197c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8011980:	3301      	adds	r3, #1
 8011982:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8011986:	e113      	b.n	8011bb0 <tcp_slowtmr+0x2f8>
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: max DATA retries reached\n"));
    } else {
      if (pcb->persist_backoff > 0) {
 8011988:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801198a:	f893 3099 	ldrb.w	r3, [r3, #153]	; 0x99
 801198e:	2b00      	cmp	r3, #0
 8011990:	d075      	beq.n	8011a7e <tcp_slowtmr+0x1c6>
        LWIP_ASSERT("tcp_slowtimr: persist ticking with in-flight data", pcb->unacked == NULL);
 8011992:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011994:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8011996:	2b00      	cmp	r3, #0
 8011998:	d006      	beq.n	80119a8 <tcp_slowtmr+0xf0>
 801199a:	4b62      	ldr	r3, [pc, #392]	; (8011b24 <tcp_slowtmr+0x26c>)
 801199c:	f240 42d4 	movw	r2, #1236	; 0x4d4
 80119a0:	4965      	ldr	r1, [pc, #404]	; (8011b38 <tcp_slowtmr+0x280>)
 80119a2:	4862      	ldr	r0, [pc, #392]	; (8011b2c <tcp_slowtmr+0x274>)
 80119a4:	f008 f860 	bl	8019a68 <iprintf>
        LWIP_ASSERT("tcp_slowtimr: persist ticking with empty send buffer", pcb->unsent != NULL);
 80119a8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80119aa:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80119ac:	2b00      	cmp	r3, #0
 80119ae:	d106      	bne.n	80119be <tcp_slowtmr+0x106>
 80119b0:	4b5c      	ldr	r3, [pc, #368]	; (8011b24 <tcp_slowtmr+0x26c>)
 80119b2:	f240 42d5 	movw	r2, #1237	; 0x4d5
 80119b6:	4961      	ldr	r1, [pc, #388]	; (8011b3c <tcp_slowtmr+0x284>)
 80119b8:	485c      	ldr	r0, [pc, #368]	; (8011b2c <tcp_slowtmr+0x274>)
 80119ba:	f008 f855 	bl	8019a68 <iprintf>
        if (pcb->persist_probe >= TCP_MAXRTX) {
 80119be:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80119c0:	f893 309a 	ldrb.w	r3, [r3, #154]	; 0x9a
 80119c4:	2b0b      	cmp	r3, #11
 80119c6:	d905      	bls.n	80119d4 <tcp_slowtmr+0x11c>
          ++pcb_remove; /* max probes reached */
 80119c8:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80119cc:	3301      	adds	r3, #1
 80119ce:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 80119d2:	e0ed      	b.n	8011bb0 <tcp_slowtmr+0x2f8>
        } else {
          u8_t backoff_cnt = tcp_persist_backoff[pcb->persist_backoff - 1];
 80119d4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80119d6:	f893 3099 	ldrb.w	r3, [r3, #153]	; 0x99
 80119da:	3b01      	subs	r3, #1
 80119dc:	4a58      	ldr	r2, [pc, #352]	; (8011b40 <tcp_slowtmr+0x288>)
 80119de:	5cd3      	ldrb	r3, [r2, r3]
 80119e0:	747b      	strb	r3, [r7, #17]
          if (pcb->persist_cnt < backoff_cnt) {
 80119e2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80119e4:	f893 3098 	ldrb.w	r3, [r3, #152]	; 0x98
 80119e8:	7c7a      	ldrb	r2, [r7, #17]
 80119ea:	429a      	cmp	r2, r3
 80119ec:	d907      	bls.n	80119fe <tcp_slowtmr+0x146>
            pcb->persist_cnt++;
 80119ee:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80119f0:	f893 3098 	ldrb.w	r3, [r3, #152]	; 0x98
 80119f4:	3301      	adds	r3, #1
 80119f6:	b2da      	uxtb	r2, r3
 80119f8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80119fa:	f883 2098 	strb.w	r2, [r3, #152]	; 0x98
          }
          if (pcb->persist_cnt >= backoff_cnt) {
 80119fe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011a00:	f893 3098 	ldrb.w	r3, [r3, #152]	; 0x98
 8011a04:	7c7a      	ldrb	r2, [r7, #17]
 8011a06:	429a      	cmp	r2, r3
 8011a08:	f200 80d2 	bhi.w	8011bb0 <tcp_slowtmr+0x2f8>
            int next_slot = 1; /* increment timer to next slot */
 8011a0c:	2301      	movs	r3, #1
 8011a0e:	623b      	str	r3, [r7, #32]
            /* If snd_wnd is zero, send 1 byte probes */
            if (pcb->snd_wnd == 0) {
 8011a10:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011a12:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 8011a16:	2b00      	cmp	r3, #0
 8011a18:	d108      	bne.n	8011a2c <tcp_slowtmr+0x174>
              if (tcp_zero_window_probe(pcb) != ERR_OK) {
 8011a1a:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8011a1c:	f004 fc2c 	bl	8016278 <tcp_zero_window_probe>
 8011a20:	4603      	mov	r3, r0
 8011a22:	2b00      	cmp	r3, #0
 8011a24:	d014      	beq.n	8011a50 <tcp_slowtmr+0x198>
                next_slot = 0; /* try probe again with current slot */
 8011a26:	2300      	movs	r3, #0
 8011a28:	623b      	str	r3, [r7, #32]
 8011a2a:	e011      	b.n	8011a50 <tcp_slowtmr+0x198>
              }
              /* snd_wnd not fully closed, split unsent head and fill window */
            } else {
              if (tcp_split_unsent_seg(pcb, (u16_t)pcb->snd_wnd) == ERR_OK) {
 8011a2c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011a2e:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 8011a32:	4619      	mov	r1, r3
 8011a34:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8011a36:	f003 faf1 	bl	801501c <tcp_split_unsent_seg>
 8011a3a:	4603      	mov	r3, r0
 8011a3c:	2b00      	cmp	r3, #0
 8011a3e:	d107      	bne.n	8011a50 <tcp_slowtmr+0x198>
                if (tcp_output(pcb) == ERR_OK) {
 8011a40:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8011a42:	f003 fd71 	bl	8015528 <tcp_output>
 8011a46:	4603      	mov	r3, r0
 8011a48:	2b00      	cmp	r3, #0
 8011a4a:	d101      	bne.n	8011a50 <tcp_slowtmr+0x198>
                  /* sending will cancel persist timer, else retry with current slot */
                  next_slot = 0;
 8011a4c:	2300      	movs	r3, #0
 8011a4e:	623b      	str	r3, [r7, #32]
                }
              }
            }
            if (next_slot) {
 8011a50:	6a3b      	ldr	r3, [r7, #32]
 8011a52:	2b00      	cmp	r3, #0
 8011a54:	f000 80ac 	beq.w	8011bb0 <tcp_slowtmr+0x2f8>
              pcb->persist_cnt = 0;
 8011a58:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011a5a:	2200      	movs	r2, #0
 8011a5c:	f883 2098 	strb.w	r2, [r3, #152]	; 0x98
              if (pcb->persist_backoff < sizeof(tcp_persist_backoff)) {
 8011a60:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011a62:	f893 3099 	ldrb.w	r3, [r3, #153]	; 0x99
 8011a66:	2b06      	cmp	r3, #6
 8011a68:	f200 80a2 	bhi.w	8011bb0 <tcp_slowtmr+0x2f8>
                pcb->persist_backoff++;
 8011a6c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011a6e:	f893 3099 	ldrb.w	r3, [r3, #153]	; 0x99
 8011a72:	3301      	adds	r3, #1
 8011a74:	b2da      	uxtb	r2, r3
 8011a76:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011a78:	f883 2099 	strb.w	r2, [r3, #153]	; 0x99
 8011a7c:	e098      	b.n	8011bb0 <tcp_slowtmr+0x2f8>
            }
          }
        }
      } else {
        /* Increase the retransmission timer if it is running */
        if ((pcb->rtime >= 0) && (pcb->rtime < 0x7FFF)) {
 8011a7e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011a80:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	; 0x30
 8011a84:	2b00      	cmp	r3, #0
 8011a86:	db0f      	blt.n	8011aa8 <tcp_slowtmr+0x1f0>
 8011a88:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011a8a:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	; 0x30
 8011a8e:	f647 72ff 	movw	r2, #32767	; 0x7fff
 8011a92:	4293      	cmp	r3, r2
 8011a94:	d008      	beq.n	8011aa8 <tcp_slowtmr+0x1f0>
          ++pcb->rtime;
 8011a96:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011a98:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	; 0x30
 8011a9c:	b29b      	uxth	r3, r3
 8011a9e:	3301      	adds	r3, #1
 8011aa0:	b29b      	uxth	r3, r3
 8011aa2:	b21a      	sxth	r2, r3
 8011aa4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011aa6:	861a      	strh	r2, [r3, #48]	; 0x30
        }

        if (pcb->rtime >= pcb->rto) {
 8011aa8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011aaa:	f9b3 2030 	ldrsh.w	r2, [r3, #48]	; 0x30
 8011aae:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011ab0:	f9b3 3040 	ldrsh.w	r3, [r3, #64]	; 0x40
 8011ab4:	429a      	cmp	r2, r3
 8011ab6:	db7b      	blt.n	8011bb0 <tcp_slowtmr+0x2f8>
                                      " pcb->rto %"S16_F"\n",
                                      pcb->rtime, pcb->rto));
          /* If prepare phase fails but we have unsent data but no unacked data,
             still execute the backoff calculations below, as this means we somehow
             failed to send segment. */
          if ((tcp_rexmit_rto_prepare(pcb) == ERR_OK) || ((pcb->unacked == NULL) && (pcb->unsent != NULL))) {
 8011ab8:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8011aba:	f004 f829 	bl	8015b10 <tcp_rexmit_rto_prepare>
 8011abe:	4603      	mov	r3, r0
 8011ac0:	2b00      	cmp	r3, #0
 8011ac2:	d007      	beq.n	8011ad4 <tcp_slowtmr+0x21c>
 8011ac4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011ac6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8011ac8:	2b00      	cmp	r3, #0
 8011aca:	d171      	bne.n	8011bb0 <tcp_slowtmr+0x2f8>
 8011acc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011ace:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8011ad0:	2b00      	cmp	r3, #0
 8011ad2:	d06d      	beq.n	8011bb0 <tcp_slowtmr+0x2f8>
            /* Double retransmission time-out unless we are trying to
             * connect to somebody (i.e., we are in SYN_SENT). */
            if (pcb->state != SYN_SENT) {
 8011ad4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011ad6:	7d1b      	ldrb	r3, [r3, #20]
 8011ad8:	2b02      	cmp	r3, #2
 8011ada:	d03a      	beq.n	8011b52 <tcp_slowtmr+0x29a>
              u8_t backoff_idx = LWIP_MIN(pcb->nrtx, sizeof(tcp_backoff) - 1);
 8011adc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011ade:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8011ae2:	2b0c      	cmp	r3, #12
 8011ae4:	bf28      	it	cs
 8011ae6:	230c      	movcs	r3, #12
 8011ae8:	76fb      	strb	r3, [r7, #27]
              int calc_rto = ((pcb->sa >> 3) + pcb->sv) << tcp_backoff[backoff_idx];
 8011aea:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011aec:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	; 0x3c
 8011af0:	10db      	asrs	r3, r3, #3
 8011af2:	b21b      	sxth	r3, r3
 8011af4:	461a      	mov	r2, r3
 8011af6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011af8:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	; 0x3e
 8011afc:	4413      	add	r3, r2
 8011afe:	7efa      	ldrb	r2, [r7, #27]
 8011b00:	4910      	ldr	r1, [pc, #64]	; (8011b44 <tcp_slowtmr+0x28c>)
 8011b02:	5c8a      	ldrb	r2, [r1, r2]
 8011b04:	4093      	lsls	r3, r2
 8011b06:	617b      	str	r3, [r7, #20]
              pcb->rto = (s16_t)LWIP_MIN(calc_rto, 0x7FFF);
 8011b08:	697b      	ldr	r3, [r7, #20]
 8011b0a:	f647 72fe 	movw	r2, #32766	; 0x7ffe
 8011b0e:	4293      	cmp	r3, r2
 8011b10:	dc1a      	bgt.n	8011b48 <tcp_slowtmr+0x290>
 8011b12:	697b      	ldr	r3, [r7, #20]
 8011b14:	b21a      	sxth	r2, r3
 8011b16:	e019      	b.n	8011b4c <tcp_slowtmr+0x294>
 8011b18:	20007044 	.word	0x20007044
 8011b1c:	2000705a 	.word	0x2000705a
 8011b20:	20007050 	.word	0x20007050
 8011b24:	0801ccb4 	.word	0x0801ccb4
 8011b28:	0801cff8 	.word	0x0801cff8
 8011b2c:	0801ccf8 	.word	0x0801ccf8
 8011b30:	0801d024 	.word	0x0801d024
 8011b34:	0801d050 	.word	0x0801d050
 8011b38:	0801d080 	.word	0x0801d080
 8011b3c:	0801d0b4 	.word	0x0801d0b4
 8011b40:	0801ecc4 	.word	0x0801ecc4
 8011b44:	0801ecb4 	.word	0x0801ecb4
 8011b48:	f647 72ff 	movw	r2, #32767	; 0x7fff
 8011b4c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011b4e:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
            }

            /* Reset the retransmission timer. */
            pcb->rtime = 0;
 8011b52:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011b54:	2200      	movs	r2, #0
 8011b56:	861a      	strh	r2, [r3, #48]	; 0x30

            /* Reduce congestion window and ssthresh. */
            eff_wnd = LWIP_MIN(pcb->cwnd, pcb->snd_wnd);
 8011b58:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011b5a:	f8b3 2060 	ldrh.w	r2, [r3, #96]	; 0x60
 8011b5e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011b60:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 8011b64:	4293      	cmp	r3, r2
 8011b66:	bf28      	it	cs
 8011b68:	4613      	movcs	r3, r2
 8011b6a:	827b      	strh	r3, [r7, #18]
            pcb->ssthresh = eff_wnd >> 1;
 8011b6c:	8a7b      	ldrh	r3, [r7, #18]
 8011b6e:	085b      	lsrs	r3, r3, #1
 8011b70:	b29a      	uxth	r2, r3
 8011b72:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011b74:	f8a3 204a 	strh.w	r2, [r3, #74]	; 0x4a
            if (pcb->ssthresh < (tcpwnd_size_t)(pcb->mss << 1)) {
 8011b78:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011b7a:	f8b3 204a 	ldrh.w	r2, [r3, #74]	; 0x4a
 8011b7e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011b80:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8011b82:	005b      	lsls	r3, r3, #1
 8011b84:	b29b      	uxth	r3, r3
 8011b86:	429a      	cmp	r2, r3
 8011b88:	d206      	bcs.n	8011b98 <tcp_slowtmr+0x2e0>
              pcb->ssthresh = (tcpwnd_size_t)(pcb->mss << 1);
 8011b8a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011b8c:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8011b8e:	005b      	lsls	r3, r3, #1
 8011b90:	b29a      	uxth	r2, r3
 8011b92:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011b94:	f8a3 204a 	strh.w	r2, [r3, #74]	; 0x4a
            }
            pcb->cwnd = pcb->mss;
 8011b98:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011b9a:	8e5a      	ldrh	r2, [r3, #50]	; 0x32
 8011b9c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011b9e:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
            LWIP_DEBUGF(TCP_CWND_DEBUG, ("tcp_slowtmr: cwnd %"TCPWNDSIZE_F
                                         " ssthresh %"TCPWNDSIZE_F"\n",
                                         pcb->cwnd, pcb->ssthresh));
            pcb->bytes_acked = 0;
 8011ba2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011ba4:	2200      	movs	r2, #0
 8011ba6:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a

            /* The following needs to be called AFTER cwnd is set to one
               mss - STJ */
            tcp_rexmit_rto_commit(pcb);
 8011baa:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8011bac:	f004 f820 	bl	8015bf0 <tcp_rexmit_rto_commit>
          }
        }
      }
    }
    /* Check if this PCB has stayed too long in FIN-WAIT-2 */
    if (pcb->state == FIN_WAIT_2) {
 8011bb0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011bb2:	7d1b      	ldrb	r3, [r3, #20]
 8011bb4:	2b06      	cmp	r3, #6
 8011bb6:	d111      	bne.n	8011bdc <tcp_slowtmr+0x324>
      /* If this PCB is in FIN_WAIT_2 because of SHUT_WR don't let it time out. */
      if (pcb->flags & TF_RXCLOSED) {
 8011bb8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011bba:	8b5b      	ldrh	r3, [r3, #26]
 8011bbc:	f003 0310 	and.w	r3, r3, #16
 8011bc0:	2b00      	cmp	r3, #0
 8011bc2:	d00b      	beq.n	8011bdc <tcp_slowtmr+0x324>
        /* PCB was fully closed (either through close() or SHUT_RDWR):
           normal FIN-WAIT timeout handling. */
        if ((u32_t)(tcp_ticks - pcb->tmr) >
 8011bc4:	4b9c      	ldr	r3, [pc, #624]	; (8011e38 <tcp_slowtmr+0x580>)
 8011bc6:	681a      	ldr	r2, [r3, #0]
 8011bc8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011bca:	6a1b      	ldr	r3, [r3, #32]
 8011bcc:	1ad3      	subs	r3, r2, r3
 8011bce:	2b28      	cmp	r3, #40	; 0x28
 8011bd0:	d904      	bls.n	8011bdc <tcp_slowtmr+0x324>
            TCP_FIN_WAIT_TIMEOUT / TCP_SLOW_INTERVAL) {
          ++pcb_remove;
 8011bd2:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8011bd6:	3301      	adds	r3, #1
 8011bd8:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
        }
      }
    }

    /* Check if KEEPALIVE should be sent */
    if (ip_get_option(pcb, SOF_KEEPALIVE) &&
 8011bdc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011bde:	7a5b      	ldrb	r3, [r3, #9]
 8011be0:	f003 0308 	and.w	r3, r3, #8
 8011be4:	2b00      	cmp	r3, #0
 8011be6:	d04a      	beq.n	8011c7e <tcp_slowtmr+0x3c6>
        ((pcb->state == ESTABLISHED) ||
 8011be8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011bea:	7d1b      	ldrb	r3, [r3, #20]
    if (ip_get_option(pcb, SOF_KEEPALIVE) &&
 8011bec:	2b04      	cmp	r3, #4
 8011bee:	d003      	beq.n	8011bf8 <tcp_slowtmr+0x340>
         (pcb->state == CLOSE_WAIT))) {
 8011bf0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011bf2:	7d1b      	ldrb	r3, [r3, #20]
        ((pcb->state == ESTABLISHED) ||
 8011bf4:	2b07      	cmp	r3, #7
 8011bf6:	d142      	bne.n	8011c7e <tcp_slowtmr+0x3c6>
      if ((u32_t)(tcp_ticks - pcb->tmr) >
 8011bf8:	4b8f      	ldr	r3, [pc, #572]	; (8011e38 <tcp_slowtmr+0x580>)
 8011bfa:	681a      	ldr	r2, [r3, #0]
 8011bfc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011bfe:	6a1b      	ldr	r3, [r3, #32]
 8011c00:	1ad2      	subs	r2, r2, r3
          (pcb->keep_idle + TCP_KEEP_DUR(pcb)) / TCP_SLOW_INTERVAL) {
 8011c02:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011c04:	f8d3 1094 	ldr.w	r1, [r3, #148]	; 0x94
 8011c08:	4b8c      	ldr	r3, [pc, #560]	; (8011e3c <tcp_slowtmr+0x584>)
 8011c0a:	440b      	add	r3, r1
 8011c0c:	498c      	ldr	r1, [pc, #560]	; (8011e40 <tcp_slowtmr+0x588>)
 8011c0e:	fba1 1303 	umull	r1, r3, r1, r3
 8011c12:	095b      	lsrs	r3, r3, #5
      if ((u32_t)(tcp_ticks - pcb->tmr) >
 8011c14:	429a      	cmp	r2, r3
 8011c16:	d90a      	bls.n	8011c2e <tcp_slowtmr+0x376>
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: KEEPALIVE timeout. Aborting connection to "));
        ip_addr_debug_print_val(TCP_DEBUG, pcb->remote_ip);
        LWIP_DEBUGF(TCP_DEBUG, ("\n"));

        ++pcb_remove;
 8011c18:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8011c1c:	3301      	adds	r3, #1
 8011c1e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
        ++pcb_reset;
 8011c22:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8011c26:	3301      	adds	r3, #1
 8011c28:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 8011c2c:	e027      	b.n	8011c7e <tcp_slowtmr+0x3c6>
      } else if ((u32_t)(tcp_ticks - pcb->tmr) >
 8011c2e:	4b82      	ldr	r3, [pc, #520]	; (8011e38 <tcp_slowtmr+0x580>)
 8011c30:	681a      	ldr	r2, [r3, #0]
 8011c32:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011c34:	6a1b      	ldr	r3, [r3, #32]
 8011c36:	1ad2      	subs	r2, r2, r3
                 (pcb->keep_idle + pcb->keep_cnt_sent * TCP_KEEP_INTVL(pcb))
 8011c38:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011c3a:	f8d3 1094 	ldr.w	r1, [r3, #148]	; 0x94
 8011c3e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011c40:	f893 309b 	ldrb.w	r3, [r3, #155]	; 0x9b
 8011c44:	4618      	mov	r0, r3
 8011c46:	4b7f      	ldr	r3, [pc, #508]	; (8011e44 <tcp_slowtmr+0x58c>)
 8011c48:	fb00 f303 	mul.w	r3, r0, r3
 8011c4c:	440b      	add	r3, r1
                 / TCP_SLOW_INTERVAL) {
 8011c4e:	497c      	ldr	r1, [pc, #496]	; (8011e40 <tcp_slowtmr+0x588>)
 8011c50:	fba1 1303 	umull	r1, r3, r1, r3
 8011c54:	095b      	lsrs	r3, r3, #5
      } else if ((u32_t)(tcp_ticks - pcb->tmr) >
 8011c56:	429a      	cmp	r2, r3
 8011c58:	d911      	bls.n	8011c7e <tcp_slowtmr+0x3c6>
        err = tcp_keepalive(pcb);
 8011c5a:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8011c5c:	f004 facc 	bl	80161f8 <tcp_keepalive>
 8011c60:	4603      	mov	r3, r0
 8011c62:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
        if (err == ERR_OK) {
 8011c66:	f997 3025 	ldrsb.w	r3, [r7, #37]	; 0x25
 8011c6a:	2b00      	cmp	r3, #0
 8011c6c:	d107      	bne.n	8011c7e <tcp_slowtmr+0x3c6>
          pcb->keep_cnt_sent++;
 8011c6e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011c70:	f893 309b 	ldrb.w	r3, [r3, #155]	; 0x9b
 8011c74:	3301      	adds	r3, #1
 8011c76:	b2da      	uxtb	r2, r3
 8011c78:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011c7a:	f883 209b 	strb.w	r2, [r3, #155]	; 0x9b

    /* If this PCB has queued out of sequence data, but has been
       inactive for too long, will drop the data (it will eventually
       be retransmitted). */
#if TCP_QUEUE_OOSEQ
    if (pcb->ooseq != NULL &&
 8011c7e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011c80:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8011c82:	2b00      	cmp	r3, #0
 8011c84:	d011      	beq.n	8011caa <tcp_slowtmr+0x3f2>
        (tcp_ticks - pcb->tmr >= (u32_t)pcb->rto * TCP_OOSEQ_TIMEOUT)) {
 8011c86:	4b6c      	ldr	r3, [pc, #432]	; (8011e38 <tcp_slowtmr+0x580>)
 8011c88:	681a      	ldr	r2, [r3, #0]
 8011c8a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011c8c:	6a1b      	ldr	r3, [r3, #32]
 8011c8e:	1ad2      	subs	r2, r2, r3
 8011c90:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011c92:	f9b3 3040 	ldrsh.w	r3, [r3, #64]	; 0x40
 8011c96:	4619      	mov	r1, r3
 8011c98:	460b      	mov	r3, r1
 8011c9a:	005b      	lsls	r3, r3, #1
 8011c9c:	440b      	add	r3, r1
 8011c9e:	005b      	lsls	r3, r3, #1
    if (pcb->ooseq != NULL &&
 8011ca0:	429a      	cmp	r2, r3
 8011ca2:	d302      	bcc.n	8011caa <tcp_slowtmr+0x3f2>
      LWIP_DEBUGF(TCP_CWND_DEBUG, ("tcp_slowtmr: dropping OOSEQ queued data\n"));
      tcp_free_ooseq(pcb);
 8011ca4:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8011ca6:	f000 fddf 	bl	8012868 <tcp_free_ooseq>
    }
#endif /* TCP_QUEUE_OOSEQ */

    /* Check if this PCB has stayed too long in SYN-RCVD */
    if (pcb->state == SYN_RCVD) {
 8011caa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011cac:	7d1b      	ldrb	r3, [r3, #20]
 8011cae:	2b03      	cmp	r3, #3
 8011cb0:	d10b      	bne.n	8011cca <tcp_slowtmr+0x412>
      if ((u32_t)(tcp_ticks - pcb->tmr) >
 8011cb2:	4b61      	ldr	r3, [pc, #388]	; (8011e38 <tcp_slowtmr+0x580>)
 8011cb4:	681a      	ldr	r2, [r3, #0]
 8011cb6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011cb8:	6a1b      	ldr	r3, [r3, #32]
 8011cba:	1ad3      	subs	r3, r2, r3
 8011cbc:	2b28      	cmp	r3, #40	; 0x28
 8011cbe:	d904      	bls.n	8011cca <tcp_slowtmr+0x412>
          TCP_SYN_RCVD_TIMEOUT / TCP_SLOW_INTERVAL) {
        ++pcb_remove;
 8011cc0:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8011cc4:	3301      	adds	r3, #1
 8011cc6:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: removing pcb stuck in SYN-RCVD\n"));
      }
    }

    /* Check if this PCB has stayed too long in LAST-ACK */
    if (pcb->state == LAST_ACK) {
 8011cca:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011ccc:	7d1b      	ldrb	r3, [r3, #20]
 8011cce:	2b09      	cmp	r3, #9
 8011cd0:	d10b      	bne.n	8011cea <tcp_slowtmr+0x432>
      if ((u32_t)(tcp_ticks - pcb->tmr) > 2 * TCP_MSL / TCP_SLOW_INTERVAL) {
 8011cd2:	4b59      	ldr	r3, [pc, #356]	; (8011e38 <tcp_slowtmr+0x580>)
 8011cd4:	681a      	ldr	r2, [r3, #0]
 8011cd6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011cd8:	6a1b      	ldr	r3, [r3, #32]
 8011cda:	1ad3      	subs	r3, r2, r3
 8011cdc:	2bf0      	cmp	r3, #240	; 0xf0
 8011cde:	d904      	bls.n	8011cea <tcp_slowtmr+0x432>
        ++pcb_remove;
 8011ce0:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8011ce4:	3301      	adds	r3, #1
 8011ce6:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: removing pcb stuck in LAST-ACK\n"));
      }
    }

    /* If the PCB should be removed, do it. */
    if (pcb_remove) {
 8011cea:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8011cee:	2b00      	cmp	r3, #0
 8011cf0:	d060      	beq.n	8011db4 <tcp_slowtmr+0x4fc>
      struct tcp_pcb *pcb2;
#if LWIP_CALLBACK_API
      tcp_err_fn err_fn = pcb->errf;
 8011cf2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011cf4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8011cf8:	60fb      	str	r3, [r7, #12]
#endif /* LWIP_CALLBACK_API */
      void *err_arg;
      enum tcp_state last_state;
      tcp_pcb_purge(pcb);
 8011cfa:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8011cfc:	f000 fc00 	bl	8012500 <tcp_pcb_purge>
      /* Remove PCB from tcp_active_pcbs list. */
      if (prev != NULL) {
 8011d00:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8011d02:	2b00      	cmp	r3, #0
 8011d04:	d010      	beq.n	8011d28 <tcp_slowtmr+0x470>
        LWIP_ASSERT("tcp_slowtmr: middle tcp != tcp_active_pcbs", pcb != tcp_active_pcbs);
 8011d06:	4b50      	ldr	r3, [pc, #320]	; (8011e48 <tcp_slowtmr+0x590>)
 8011d08:	681b      	ldr	r3, [r3, #0]
 8011d0a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8011d0c:	429a      	cmp	r2, r3
 8011d0e:	d106      	bne.n	8011d1e <tcp_slowtmr+0x466>
 8011d10:	4b4e      	ldr	r3, [pc, #312]	; (8011e4c <tcp_slowtmr+0x594>)
 8011d12:	f240 526d 	movw	r2, #1389	; 0x56d
 8011d16:	494e      	ldr	r1, [pc, #312]	; (8011e50 <tcp_slowtmr+0x598>)
 8011d18:	484e      	ldr	r0, [pc, #312]	; (8011e54 <tcp_slowtmr+0x59c>)
 8011d1a:	f007 fea5 	bl	8019a68 <iprintf>
        prev->next = pcb->next;
 8011d1e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011d20:	68da      	ldr	r2, [r3, #12]
 8011d22:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8011d24:	60da      	str	r2, [r3, #12]
 8011d26:	e00f      	b.n	8011d48 <tcp_slowtmr+0x490>
      } else {
        /* This PCB was the first. */
        LWIP_ASSERT("tcp_slowtmr: first pcb == tcp_active_pcbs", tcp_active_pcbs == pcb);
 8011d28:	4b47      	ldr	r3, [pc, #284]	; (8011e48 <tcp_slowtmr+0x590>)
 8011d2a:	681b      	ldr	r3, [r3, #0]
 8011d2c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8011d2e:	429a      	cmp	r2, r3
 8011d30:	d006      	beq.n	8011d40 <tcp_slowtmr+0x488>
 8011d32:	4b46      	ldr	r3, [pc, #280]	; (8011e4c <tcp_slowtmr+0x594>)
 8011d34:	f240 5271 	movw	r2, #1393	; 0x571
 8011d38:	4947      	ldr	r1, [pc, #284]	; (8011e58 <tcp_slowtmr+0x5a0>)
 8011d3a:	4846      	ldr	r0, [pc, #280]	; (8011e54 <tcp_slowtmr+0x59c>)
 8011d3c:	f007 fe94 	bl	8019a68 <iprintf>
        tcp_active_pcbs = pcb->next;
 8011d40:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011d42:	68db      	ldr	r3, [r3, #12]
 8011d44:	4a40      	ldr	r2, [pc, #256]	; (8011e48 <tcp_slowtmr+0x590>)
 8011d46:	6013      	str	r3, [r2, #0]
      }

      if (pcb_reset) {
 8011d48:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8011d4c:	2b00      	cmp	r3, #0
 8011d4e:	d013      	beq.n	8011d78 <tcp_slowtmr+0x4c0>
        tcp_rst(pcb, pcb->snd_nxt, pcb->rcv_nxt, &pcb->local_ip, &pcb->remote_ip,
 8011d50:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011d52:	6d18      	ldr	r0, [r3, #80]	; 0x50
 8011d54:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011d56:	6a5c      	ldr	r4, [r3, #36]	; 0x24
 8011d58:	6afd      	ldr	r5, [r7, #44]	; 0x2c
 8011d5a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011d5c:	3304      	adds	r3, #4
 8011d5e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8011d60:	8ad2      	ldrh	r2, [r2, #22]
 8011d62:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8011d64:	8b09      	ldrh	r1, [r1, #24]
 8011d66:	9102      	str	r1, [sp, #8]
 8011d68:	9201      	str	r2, [sp, #4]
 8011d6a:	9300      	str	r3, [sp, #0]
 8011d6c:	462b      	mov	r3, r5
 8011d6e:	4622      	mov	r2, r4
 8011d70:	4601      	mov	r1, r0
 8011d72:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8011d74:	f004 f98c 	bl	8016090 <tcp_rst>
                pcb->local_port, pcb->remote_port);
      }

      err_arg = pcb->callback_arg;
 8011d78:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011d7a:	691b      	ldr	r3, [r3, #16]
 8011d7c:	60bb      	str	r3, [r7, #8]
      last_state = pcb->state;
 8011d7e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011d80:	7d1b      	ldrb	r3, [r3, #20]
 8011d82:	71fb      	strb	r3, [r7, #7]
      pcb2 = pcb;
 8011d84:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011d86:	603b      	str	r3, [r7, #0]
      pcb = pcb->next;
 8011d88:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011d8a:	68db      	ldr	r3, [r3, #12]
 8011d8c:	62fb      	str	r3, [r7, #44]	; 0x2c
      tcp_free(pcb2);
 8011d8e:	6838      	ldr	r0, [r7, #0]
 8011d90:	f7ff f9f2 	bl	8011178 <tcp_free>

      tcp_active_pcbs_changed = 0;
 8011d94:	4b31      	ldr	r3, [pc, #196]	; (8011e5c <tcp_slowtmr+0x5a4>)
 8011d96:	2200      	movs	r2, #0
 8011d98:	701a      	strb	r2, [r3, #0]
      TCP_EVENT_ERR(last_state, err_fn, err_arg, ERR_ABRT);
 8011d9a:	68fb      	ldr	r3, [r7, #12]
 8011d9c:	2b00      	cmp	r3, #0
 8011d9e:	d004      	beq.n	8011daa <tcp_slowtmr+0x4f2>
 8011da0:	68fb      	ldr	r3, [r7, #12]
 8011da2:	f06f 010c 	mvn.w	r1, #12
 8011da6:	68b8      	ldr	r0, [r7, #8]
 8011da8:	4798      	blx	r3
      if (tcp_active_pcbs_changed) {
 8011daa:	4b2c      	ldr	r3, [pc, #176]	; (8011e5c <tcp_slowtmr+0x5a4>)
 8011dac:	781b      	ldrb	r3, [r3, #0]
 8011dae:	2b00      	cmp	r3, #0
 8011db0:	d037      	beq.n	8011e22 <tcp_slowtmr+0x56a>
        goto tcp_slowtmr_start;
 8011db2:	e592      	b.n	80118da <tcp_slowtmr+0x22>
      }
    } else {
      /* get the 'next' element now and work with 'prev' below (in case of abort) */
      prev = pcb;
 8011db4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011db6:	62bb      	str	r3, [r7, #40]	; 0x28
      pcb = pcb->next;
 8011db8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011dba:	68db      	ldr	r3, [r3, #12]
 8011dbc:	62fb      	str	r3, [r7, #44]	; 0x2c

      /* We check if we should poll the connection. */
      ++prev->polltmr;
 8011dbe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8011dc0:	7f1b      	ldrb	r3, [r3, #28]
 8011dc2:	3301      	adds	r3, #1
 8011dc4:	b2da      	uxtb	r2, r3
 8011dc6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8011dc8:	771a      	strb	r2, [r3, #28]
      if (prev->polltmr >= prev->pollinterval) {
 8011dca:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8011dcc:	7f1a      	ldrb	r2, [r3, #28]
 8011dce:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8011dd0:	7f5b      	ldrb	r3, [r3, #29]
 8011dd2:	429a      	cmp	r2, r3
 8011dd4:	d325      	bcc.n	8011e22 <tcp_slowtmr+0x56a>
        prev->polltmr = 0;
 8011dd6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8011dd8:	2200      	movs	r2, #0
 8011dda:	771a      	strb	r2, [r3, #28]
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: polling application\n"));
        tcp_active_pcbs_changed = 0;
 8011ddc:	4b1f      	ldr	r3, [pc, #124]	; (8011e5c <tcp_slowtmr+0x5a4>)
 8011dde:	2200      	movs	r2, #0
 8011de0:	701a      	strb	r2, [r3, #0]
        TCP_EVENT_POLL(prev, err);
 8011de2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8011de4:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8011de8:	2b00      	cmp	r3, #0
 8011dea:	d00b      	beq.n	8011e04 <tcp_slowtmr+0x54c>
 8011dec:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8011dee:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8011df2:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8011df4:	6912      	ldr	r2, [r2, #16]
 8011df6:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8011df8:	4610      	mov	r0, r2
 8011dfa:	4798      	blx	r3
 8011dfc:	4603      	mov	r3, r0
 8011dfe:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
 8011e02:	e002      	b.n	8011e0a <tcp_slowtmr+0x552>
 8011e04:	2300      	movs	r3, #0
 8011e06:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
        if (tcp_active_pcbs_changed) {
 8011e0a:	4b14      	ldr	r3, [pc, #80]	; (8011e5c <tcp_slowtmr+0x5a4>)
 8011e0c:	781b      	ldrb	r3, [r3, #0]
 8011e0e:	2b00      	cmp	r3, #0
 8011e10:	d000      	beq.n	8011e14 <tcp_slowtmr+0x55c>
          goto tcp_slowtmr_start;
 8011e12:	e562      	b.n	80118da <tcp_slowtmr+0x22>
        }
        /* if err == ERR_ABRT, 'prev' is already deallocated */
        if (err == ERR_OK) {
 8011e14:	f997 3025 	ldrsb.w	r3, [r7, #37]	; 0x25
 8011e18:	2b00      	cmp	r3, #0
 8011e1a:	d102      	bne.n	8011e22 <tcp_slowtmr+0x56a>
          tcp_output(prev);
 8011e1c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8011e1e:	f003 fb83 	bl	8015528 <tcp_output>
  while (pcb != NULL) {
 8011e22:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011e24:	2b00      	cmp	r3, #0
 8011e26:	f47f ad5e 	bne.w	80118e6 <tcp_slowtmr+0x2e>
    }
  }


  /* Steps through all of the TIME-WAIT PCBs. */
  prev = NULL;
 8011e2a:	2300      	movs	r3, #0
 8011e2c:	62bb      	str	r3, [r7, #40]	; 0x28
  pcb = tcp_tw_pcbs;
 8011e2e:	4b0c      	ldr	r3, [pc, #48]	; (8011e60 <tcp_slowtmr+0x5a8>)
 8011e30:	681b      	ldr	r3, [r3, #0]
 8011e32:	62fb      	str	r3, [r7, #44]	; 0x2c
  while (pcb != NULL) {
 8011e34:	e069      	b.n	8011f0a <tcp_slowtmr+0x652>
 8011e36:	bf00      	nop
 8011e38:	20007044 	.word	0x20007044
 8011e3c:	000a4cb8 	.word	0x000a4cb8
 8011e40:	10624dd3 	.word	0x10624dd3
 8011e44:	000124f8 	.word	0x000124f8
 8011e48:	20007050 	.word	0x20007050
 8011e4c:	0801ccb4 	.word	0x0801ccb4
 8011e50:	0801d0ec 	.word	0x0801d0ec
 8011e54:	0801ccf8 	.word	0x0801ccf8
 8011e58:	0801d118 	.word	0x0801d118
 8011e5c:	20007058 	.word	0x20007058
 8011e60:	20007054 	.word	0x20007054
    LWIP_ASSERT("tcp_slowtmr: TIME-WAIT pcb->state == TIME-WAIT", pcb->state == TIME_WAIT);
 8011e64:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011e66:	7d1b      	ldrb	r3, [r3, #20]
 8011e68:	2b0a      	cmp	r3, #10
 8011e6a:	d006      	beq.n	8011e7a <tcp_slowtmr+0x5c2>
 8011e6c:	4b2b      	ldr	r3, [pc, #172]	; (8011f1c <tcp_slowtmr+0x664>)
 8011e6e:	f240 52a1 	movw	r2, #1441	; 0x5a1
 8011e72:	492b      	ldr	r1, [pc, #172]	; (8011f20 <tcp_slowtmr+0x668>)
 8011e74:	482b      	ldr	r0, [pc, #172]	; (8011f24 <tcp_slowtmr+0x66c>)
 8011e76:	f007 fdf7 	bl	8019a68 <iprintf>
    pcb_remove = 0;
 8011e7a:	2300      	movs	r3, #0
 8011e7c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

    /* Check if this PCB has stayed long enough in TIME-WAIT */
    if ((u32_t)(tcp_ticks - pcb->tmr) > 2 * TCP_MSL / TCP_SLOW_INTERVAL) {
 8011e80:	4b29      	ldr	r3, [pc, #164]	; (8011f28 <tcp_slowtmr+0x670>)
 8011e82:	681a      	ldr	r2, [r3, #0]
 8011e84:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011e86:	6a1b      	ldr	r3, [r3, #32]
 8011e88:	1ad3      	subs	r3, r2, r3
 8011e8a:	2bf0      	cmp	r3, #240	; 0xf0
 8011e8c:	d904      	bls.n	8011e98 <tcp_slowtmr+0x5e0>
      ++pcb_remove;
 8011e8e:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8011e92:	3301      	adds	r3, #1
 8011e94:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    }

    /* If the PCB should be removed, do it. */
    if (pcb_remove) {
 8011e98:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8011e9c:	2b00      	cmp	r3, #0
 8011e9e:	d02f      	beq.n	8011f00 <tcp_slowtmr+0x648>
      struct tcp_pcb *pcb2;
      tcp_pcb_purge(pcb);
 8011ea0:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8011ea2:	f000 fb2d 	bl	8012500 <tcp_pcb_purge>
      /* Remove PCB from tcp_tw_pcbs list. */
      if (prev != NULL) {
 8011ea6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8011ea8:	2b00      	cmp	r3, #0
 8011eaa:	d010      	beq.n	8011ece <tcp_slowtmr+0x616>
        LWIP_ASSERT("tcp_slowtmr: middle tcp != tcp_tw_pcbs", pcb != tcp_tw_pcbs);
 8011eac:	4b1f      	ldr	r3, [pc, #124]	; (8011f2c <tcp_slowtmr+0x674>)
 8011eae:	681b      	ldr	r3, [r3, #0]
 8011eb0:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8011eb2:	429a      	cmp	r2, r3
 8011eb4:	d106      	bne.n	8011ec4 <tcp_slowtmr+0x60c>
 8011eb6:	4b19      	ldr	r3, [pc, #100]	; (8011f1c <tcp_slowtmr+0x664>)
 8011eb8:	f240 52af 	movw	r2, #1455	; 0x5af
 8011ebc:	491c      	ldr	r1, [pc, #112]	; (8011f30 <tcp_slowtmr+0x678>)
 8011ebe:	4819      	ldr	r0, [pc, #100]	; (8011f24 <tcp_slowtmr+0x66c>)
 8011ec0:	f007 fdd2 	bl	8019a68 <iprintf>
        prev->next = pcb->next;
 8011ec4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011ec6:	68da      	ldr	r2, [r3, #12]
 8011ec8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8011eca:	60da      	str	r2, [r3, #12]
 8011ecc:	e00f      	b.n	8011eee <tcp_slowtmr+0x636>
      } else {
        /* This PCB was the first. */
        LWIP_ASSERT("tcp_slowtmr: first pcb == tcp_tw_pcbs", tcp_tw_pcbs == pcb);
 8011ece:	4b17      	ldr	r3, [pc, #92]	; (8011f2c <tcp_slowtmr+0x674>)
 8011ed0:	681b      	ldr	r3, [r3, #0]
 8011ed2:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8011ed4:	429a      	cmp	r2, r3
 8011ed6:	d006      	beq.n	8011ee6 <tcp_slowtmr+0x62e>
 8011ed8:	4b10      	ldr	r3, [pc, #64]	; (8011f1c <tcp_slowtmr+0x664>)
 8011eda:	f240 52b3 	movw	r2, #1459	; 0x5b3
 8011ede:	4915      	ldr	r1, [pc, #84]	; (8011f34 <tcp_slowtmr+0x67c>)
 8011ee0:	4810      	ldr	r0, [pc, #64]	; (8011f24 <tcp_slowtmr+0x66c>)
 8011ee2:	f007 fdc1 	bl	8019a68 <iprintf>
        tcp_tw_pcbs = pcb->next;
 8011ee6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011ee8:	68db      	ldr	r3, [r3, #12]
 8011eea:	4a10      	ldr	r2, [pc, #64]	; (8011f2c <tcp_slowtmr+0x674>)
 8011eec:	6013      	str	r3, [r2, #0]
      }
      pcb2 = pcb;
 8011eee:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011ef0:	61fb      	str	r3, [r7, #28]
      pcb = pcb->next;
 8011ef2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011ef4:	68db      	ldr	r3, [r3, #12]
 8011ef6:	62fb      	str	r3, [r7, #44]	; 0x2c
      tcp_free(pcb2);
 8011ef8:	69f8      	ldr	r0, [r7, #28]
 8011efa:	f7ff f93d 	bl	8011178 <tcp_free>
 8011efe:	e004      	b.n	8011f0a <tcp_slowtmr+0x652>
    } else {
      prev = pcb;
 8011f00:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011f02:	62bb      	str	r3, [r7, #40]	; 0x28
      pcb = pcb->next;
 8011f04:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011f06:	68db      	ldr	r3, [r3, #12]
 8011f08:	62fb      	str	r3, [r7, #44]	; 0x2c
  while (pcb != NULL) {
 8011f0a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011f0c:	2b00      	cmp	r3, #0
 8011f0e:	d1a9      	bne.n	8011e64 <tcp_slowtmr+0x5ac>
    }
  }
}
 8011f10:	bf00      	nop
 8011f12:	bf00      	nop
 8011f14:	3730      	adds	r7, #48	; 0x30
 8011f16:	46bd      	mov	sp, r7
 8011f18:	bdb0      	pop	{r4, r5, r7, pc}
 8011f1a:	bf00      	nop
 8011f1c:	0801ccb4 	.word	0x0801ccb4
 8011f20:	0801d144 	.word	0x0801d144
 8011f24:	0801ccf8 	.word	0x0801ccf8
 8011f28:	20007044 	.word	0x20007044
 8011f2c:	20007054 	.word	0x20007054
 8011f30:	0801d174 	.word	0x0801d174
 8011f34:	0801d19c 	.word	0x0801d19c

08011f38 <tcp_fasttmr>:
 *
 * Automatically called from tcp_tmr().
 */
void
tcp_fasttmr(void)
{
 8011f38:	b580      	push	{r7, lr}
 8011f3a:	b082      	sub	sp, #8
 8011f3c:	af00      	add	r7, sp, #0
  struct tcp_pcb *pcb;

  ++tcp_timer_ctr;
 8011f3e:	4b2d      	ldr	r3, [pc, #180]	; (8011ff4 <tcp_fasttmr+0xbc>)
 8011f40:	781b      	ldrb	r3, [r3, #0]
 8011f42:	3301      	adds	r3, #1
 8011f44:	b2da      	uxtb	r2, r3
 8011f46:	4b2b      	ldr	r3, [pc, #172]	; (8011ff4 <tcp_fasttmr+0xbc>)
 8011f48:	701a      	strb	r2, [r3, #0]

tcp_fasttmr_start:
  pcb = tcp_active_pcbs;
 8011f4a:	4b2b      	ldr	r3, [pc, #172]	; (8011ff8 <tcp_fasttmr+0xc0>)
 8011f4c:	681b      	ldr	r3, [r3, #0]
 8011f4e:	607b      	str	r3, [r7, #4]

  while (pcb != NULL) {
 8011f50:	e048      	b.n	8011fe4 <tcp_fasttmr+0xac>
    if (pcb->last_timer != tcp_timer_ctr) {
 8011f52:	687b      	ldr	r3, [r7, #4]
 8011f54:	7f9a      	ldrb	r2, [r3, #30]
 8011f56:	4b27      	ldr	r3, [pc, #156]	; (8011ff4 <tcp_fasttmr+0xbc>)
 8011f58:	781b      	ldrb	r3, [r3, #0]
 8011f5a:	429a      	cmp	r2, r3
 8011f5c:	d03f      	beq.n	8011fde <tcp_fasttmr+0xa6>
      struct tcp_pcb *next;
      pcb->last_timer = tcp_timer_ctr;
 8011f5e:	4b25      	ldr	r3, [pc, #148]	; (8011ff4 <tcp_fasttmr+0xbc>)
 8011f60:	781a      	ldrb	r2, [r3, #0]
 8011f62:	687b      	ldr	r3, [r7, #4]
 8011f64:	779a      	strb	r2, [r3, #30]
      /* send delayed ACKs */
      if (pcb->flags & TF_ACK_DELAY) {
 8011f66:	687b      	ldr	r3, [r7, #4]
 8011f68:	8b5b      	ldrh	r3, [r3, #26]
 8011f6a:	f003 0301 	and.w	r3, r3, #1
 8011f6e:	2b00      	cmp	r3, #0
 8011f70:	d010      	beq.n	8011f94 <tcp_fasttmr+0x5c>
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_fasttmr: delayed ACK\n"));
        tcp_ack_now(pcb);
 8011f72:	687b      	ldr	r3, [r7, #4]
 8011f74:	8b5b      	ldrh	r3, [r3, #26]
 8011f76:	f043 0302 	orr.w	r3, r3, #2
 8011f7a:	b29a      	uxth	r2, r3
 8011f7c:	687b      	ldr	r3, [r7, #4]
 8011f7e:	835a      	strh	r2, [r3, #26]
        tcp_output(pcb);
 8011f80:	6878      	ldr	r0, [r7, #4]
 8011f82:	f003 fad1 	bl	8015528 <tcp_output>
        tcp_clear_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 8011f86:	687b      	ldr	r3, [r7, #4]
 8011f88:	8b5b      	ldrh	r3, [r3, #26]
 8011f8a:	f023 0303 	bic.w	r3, r3, #3
 8011f8e:	b29a      	uxth	r2, r3
 8011f90:	687b      	ldr	r3, [r7, #4]
 8011f92:	835a      	strh	r2, [r3, #26]
      }
      /* send pending FIN */
      if (pcb->flags & TF_CLOSEPEND) {
 8011f94:	687b      	ldr	r3, [r7, #4]
 8011f96:	8b5b      	ldrh	r3, [r3, #26]
 8011f98:	f003 0308 	and.w	r3, r3, #8
 8011f9c:	2b00      	cmp	r3, #0
 8011f9e:	d009      	beq.n	8011fb4 <tcp_fasttmr+0x7c>
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_fasttmr: pending FIN\n"));
        tcp_clear_flags(pcb, TF_CLOSEPEND);
 8011fa0:	687b      	ldr	r3, [r7, #4]
 8011fa2:	8b5b      	ldrh	r3, [r3, #26]
 8011fa4:	f023 0308 	bic.w	r3, r3, #8
 8011fa8:	b29a      	uxth	r2, r3
 8011faa:	687b      	ldr	r3, [r7, #4]
 8011fac:	835a      	strh	r2, [r3, #26]
        tcp_close_shutdown_fin(pcb);
 8011fae:	6878      	ldr	r0, [r7, #4]
 8011fb0:	f7ff fa76 	bl	80114a0 <tcp_close_shutdown_fin>
      }

      next = pcb->next;
 8011fb4:	687b      	ldr	r3, [r7, #4]
 8011fb6:	68db      	ldr	r3, [r3, #12]
 8011fb8:	603b      	str	r3, [r7, #0]

      /* If there is data which was previously "refused" by upper layer */
      if (pcb->refused_data != NULL) {
 8011fba:	687b      	ldr	r3, [r7, #4]
 8011fbc:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8011fbe:	2b00      	cmp	r3, #0
 8011fc0:	d00a      	beq.n	8011fd8 <tcp_fasttmr+0xa0>
        tcp_active_pcbs_changed = 0;
 8011fc2:	4b0e      	ldr	r3, [pc, #56]	; (8011ffc <tcp_fasttmr+0xc4>)
 8011fc4:	2200      	movs	r2, #0
 8011fc6:	701a      	strb	r2, [r3, #0]
        tcp_process_refused_data(pcb);
 8011fc8:	6878      	ldr	r0, [r7, #4]
 8011fca:	f000 f819 	bl	8012000 <tcp_process_refused_data>
        if (tcp_active_pcbs_changed) {
 8011fce:	4b0b      	ldr	r3, [pc, #44]	; (8011ffc <tcp_fasttmr+0xc4>)
 8011fd0:	781b      	ldrb	r3, [r3, #0]
 8011fd2:	2b00      	cmp	r3, #0
 8011fd4:	d000      	beq.n	8011fd8 <tcp_fasttmr+0xa0>
          /* application callback has changed the pcb list: restart the loop */
          goto tcp_fasttmr_start;
 8011fd6:	e7b8      	b.n	8011f4a <tcp_fasttmr+0x12>
        }
      }
      pcb = next;
 8011fd8:	683b      	ldr	r3, [r7, #0]
 8011fda:	607b      	str	r3, [r7, #4]
 8011fdc:	e002      	b.n	8011fe4 <tcp_fasttmr+0xac>
    } else {
      pcb = pcb->next;
 8011fde:	687b      	ldr	r3, [r7, #4]
 8011fe0:	68db      	ldr	r3, [r3, #12]
 8011fe2:	607b      	str	r3, [r7, #4]
  while (pcb != NULL) {
 8011fe4:	687b      	ldr	r3, [r7, #4]
 8011fe6:	2b00      	cmp	r3, #0
 8011fe8:	d1b3      	bne.n	8011f52 <tcp_fasttmr+0x1a>
    }
  }
}
 8011fea:	bf00      	nop
 8011fec:	bf00      	nop
 8011fee:	3708      	adds	r7, #8
 8011ff0:	46bd      	mov	sp, r7
 8011ff2:	bd80      	pop	{r7, pc}
 8011ff4:	2000705a 	.word	0x2000705a
 8011ff8:	20007050 	.word	0x20007050
 8011ffc:	20007058 	.word	0x20007058

08012000 <tcp_process_refused_data>:
}

/** Pass pcb->refused_data to the recv callback */
err_t
tcp_process_refused_data(struct tcp_pcb *pcb)
{
 8012000:	b590      	push	{r4, r7, lr}
 8012002:	b085      	sub	sp, #20
 8012004:	af00      	add	r7, sp, #0
 8012006:	6078      	str	r0, [r7, #4]
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
  struct pbuf *rest;
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */

  LWIP_ERROR("tcp_process_refused_data: invalid pcb", pcb != NULL, return ERR_ARG);
 8012008:	687b      	ldr	r3, [r7, #4]
 801200a:	2b00      	cmp	r3, #0
 801200c:	d109      	bne.n	8012022 <tcp_process_refused_data+0x22>
 801200e:	4b38      	ldr	r3, [pc, #224]	; (80120f0 <tcp_process_refused_data+0xf0>)
 8012010:	f240 6209 	movw	r2, #1545	; 0x609
 8012014:	4937      	ldr	r1, [pc, #220]	; (80120f4 <tcp_process_refused_data+0xf4>)
 8012016:	4838      	ldr	r0, [pc, #224]	; (80120f8 <tcp_process_refused_data+0xf8>)
 8012018:	f007 fd26 	bl	8019a68 <iprintf>
 801201c:	f06f 030f 	mvn.w	r3, #15
 8012020:	e061      	b.n	80120e6 <tcp_process_refused_data+0xe6>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
  while (pcb->refused_data != NULL)
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
  {
    err_t err;
    u8_t refused_flags = pcb->refused_data->flags;
 8012022:	687b      	ldr	r3, [r7, #4]
 8012024:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8012026:	7b5b      	ldrb	r3, [r3, #13]
 8012028:	73bb      	strb	r3, [r7, #14]
    /* set pcb->refused_data to NULL in case the callback frees it and then
       closes the pcb */
    struct pbuf *refused_data = pcb->refused_data;
 801202a:	687b      	ldr	r3, [r7, #4]
 801202c:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 801202e:	60bb      	str	r3, [r7, #8]
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
    pbuf_split_64k(refused_data, &rest);
    pcb->refused_data = rest;
#else /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
    pcb->refused_data = NULL;
 8012030:	687b      	ldr	r3, [r7, #4]
 8012032:	2200      	movs	r2, #0
 8012034:	679a      	str	r2, [r3, #120]	; 0x78
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
    /* Notify again application with data previously received. */
    LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_input: notify kept packet\n"));
    TCP_EVENT_RECV(pcb, refused_data, ERR_OK, err);
 8012036:	687b      	ldr	r3, [r7, #4]
 8012038:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 801203c:	2b00      	cmp	r3, #0
 801203e:	d00b      	beq.n	8012058 <tcp_process_refused_data+0x58>
 8012040:	687b      	ldr	r3, [r7, #4]
 8012042:	f8d3 4084 	ldr.w	r4, [r3, #132]	; 0x84
 8012046:	687b      	ldr	r3, [r7, #4]
 8012048:	6918      	ldr	r0, [r3, #16]
 801204a:	2300      	movs	r3, #0
 801204c:	68ba      	ldr	r2, [r7, #8]
 801204e:	6879      	ldr	r1, [r7, #4]
 8012050:	47a0      	blx	r4
 8012052:	4603      	mov	r3, r0
 8012054:	73fb      	strb	r3, [r7, #15]
 8012056:	e007      	b.n	8012068 <tcp_process_refused_data+0x68>
 8012058:	2300      	movs	r3, #0
 801205a:	68ba      	ldr	r2, [r7, #8]
 801205c:	6879      	ldr	r1, [r7, #4]
 801205e:	2000      	movs	r0, #0
 8012060:	f000 f8a6 	bl	80121b0 <tcp_recv_null>
 8012064:	4603      	mov	r3, r0
 8012066:	73fb      	strb	r3, [r7, #15]
    if (err == ERR_OK) {
 8012068:	f997 300f 	ldrsb.w	r3, [r7, #15]
 801206c:	2b00      	cmp	r3, #0
 801206e:	d12b      	bne.n	80120c8 <tcp_process_refused_data+0xc8>
      /* did refused_data include a FIN? */
      if ((refused_flags & PBUF_FLAG_TCP_FIN)
 8012070:	7bbb      	ldrb	r3, [r7, #14]
 8012072:	f003 0320 	and.w	r3, r3, #32
 8012076:	2b00      	cmp	r3, #0
 8012078:	d034      	beq.n	80120e4 <tcp_process_refused_data+0xe4>
          && (rest == NULL)
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
         ) {
        /* correct rcv_wnd as the application won't call tcp_recved()
           for the FIN's seqno */
        if (pcb->rcv_wnd != TCP_WND_MAX(pcb)) {
 801207a:	687b      	ldr	r3, [r7, #4]
 801207c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 801207e:	f241 62d0 	movw	r2, #5840	; 0x16d0
 8012082:	4293      	cmp	r3, r2
 8012084:	d005      	beq.n	8012092 <tcp_process_refused_data+0x92>
          pcb->rcv_wnd++;
 8012086:	687b      	ldr	r3, [r7, #4]
 8012088:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 801208a:	3301      	adds	r3, #1
 801208c:	b29a      	uxth	r2, r3
 801208e:	687b      	ldr	r3, [r7, #4]
 8012090:	851a      	strh	r2, [r3, #40]	; 0x28
        }
        TCP_EVENT_CLOSED(pcb, err);
 8012092:	687b      	ldr	r3, [r7, #4]
 8012094:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8012098:	2b00      	cmp	r3, #0
 801209a:	d00b      	beq.n	80120b4 <tcp_process_refused_data+0xb4>
 801209c:	687b      	ldr	r3, [r7, #4]
 801209e:	f8d3 4084 	ldr.w	r4, [r3, #132]	; 0x84
 80120a2:	687b      	ldr	r3, [r7, #4]
 80120a4:	6918      	ldr	r0, [r3, #16]
 80120a6:	2300      	movs	r3, #0
 80120a8:	2200      	movs	r2, #0
 80120aa:	6879      	ldr	r1, [r7, #4]
 80120ac:	47a0      	blx	r4
 80120ae:	4603      	mov	r3, r0
 80120b0:	73fb      	strb	r3, [r7, #15]
 80120b2:	e001      	b.n	80120b8 <tcp_process_refused_data+0xb8>
 80120b4:	2300      	movs	r3, #0
 80120b6:	73fb      	strb	r3, [r7, #15]
        if (err == ERR_ABRT) {
 80120b8:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80120bc:	f113 0f0d 	cmn.w	r3, #13
 80120c0:	d110      	bne.n	80120e4 <tcp_process_refused_data+0xe4>
          return ERR_ABRT;
 80120c2:	f06f 030c 	mvn.w	r3, #12
 80120c6:	e00e      	b.n	80120e6 <tcp_process_refused_data+0xe6>
        }
      }
    } else if (err == ERR_ABRT) {
 80120c8:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80120cc:	f113 0f0d 	cmn.w	r3, #13
 80120d0:	d102      	bne.n	80120d8 <tcp_process_refused_data+0xd8>
      /* if err == ERR_ABRT, 'pcb' is already deallocated */
      /* Drop incoming packets because pcb is "full" (only if the incoming
         segment contains data). */
      LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_input: drop incoming packets, because pcb is \"full\"\n"));
      return ERR_ABRT;
 80120d2:	f06f 030c 	mvn.w	r3, #12
 80120d6:	e006      	b.n	80120e6 <tcp_process_refused_data+0xe6>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
      if (rest != NULL) {
        pbuf_cat(refused_data, rest);
      }
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
      pcb->refused_data = refused_data;
 80120d8:	687b      	ldr	r3, [r7, #4]
 80120da:	68ba      	ldr	r2, [r7, #8]
 80120dc:	679a      	str	r2, [r3, #120]	; 0x78
      return ERR_INPROGRESS;
 80120de:	f06f 0304 	mvn.w	r3, #4
 80120e2:	e000      	b.n	80120e6 <tcp_process_refused_data+0xe6>
    }
  }
  return ERR_OK;
 80120e4:	2300      	movs	r3, #0
}
 80120e6:	4618      	mov	r0, r3
 80120e8:	3714      	adds	r7, #20
 80120ea:	46bd      	mov	sp, r7
 80120ec:	bd90      	pop	{r4, r7, pc}
 80120ee:	bf00      	nop
 80120f0:	0801ccb4 	.word	0x0801ccb4
 80120f4:	0801d1c4 	.word	0x0801d1c4
 80120f8:	0801ccf8 	.word	0x0801ccf8

080120fc <tcp_segs_free>:
 *
 * @param seg tcp_seg list of TCP segments to free
 */
void
tcp_segs_free(struct tcp_seg *seg)
{
 80120fc:	b580      	push	{r7, lr}
 80120fe:	b084      	sub	sp, #16
 8012100:	af00      	add	r7, sp, #0
 8012102:	6078      	str	r0, [r7, #4]
  while (seg != NULL) {
 8012104:	e007      	b.n	8012116 <tcp_segs_free+0x1a>
    struct tcp_seg *next = seg->next;
 8012106:	687b      	ldr	r3, [r7, #4]
 8012108:	681b      	ldr	r3, [r3, #0]
 801210a:	60fb      	str	r3, [r7, #12]
    tcp_seg_free(seg);
 801210c:	6878      	ldr	r0, [r7, #4]
 801210e:	f000 f80a 	bl	8012126 <tcp_seg_free>
    seg = next;
 8012112:	68fb      	ldr	r3, [r7, #12]
 8012114:	607b      	str	r3, [r7, #4]
  while (seg != NULL) {
 8012116:	687b      	ldr	r3, [r7, #4]
 8012118:	2b00      	cmp	r3, #0
 801211a:	d1f4      	bne.n	8012106 <tcp_segs_free+0xa>
  }
}
 801211c:	bf00      	nop
 801211e:	bf00      	nop
 8012120:	3710      	adds	r7, #16
 8012122:	46bd      	mov	sp, r7
 8012124:	bd80      	pop	{r7, pc}

08012126 <tcp_seg_free>:
 *
 * @param seg single tcp_seg to free
 */
void
tcp_seg_free(struct tcp_seg *seg)
{
 8012126:	b580      	push	{r7, lr}
 8012128:	b082      	sub	sp, #8
 801212a:	af00      	add	r7, sp, #0
 801212c:	6078      	str	r0, [r7, #4]
  if (seg != NULL) {
 801212e:	687b      	ldr	r3, [r7, #4]
 8012130:	2b00      	cmp	r3, #0
 8012132:	d00c      	beq.n	801214e <tcp_seg_free+0x28>
    if (seg->p != NULL) {
 8012134:	687b      	ldr	r3, [r7, #4]
 8012136:	685b      	ldr	r3, [r3, #4]
 8012138:	2b00      	cmp	r3, #0
 801213a:	d004      	beq.n	8012146 <tcp_seg_free+0x20>
      pbuf_free(seg->p);
 801213c:	687b      	ldr	r3, [r7, #4]
 801213e:	685b      	ldr	r3, [r3, #4]
 8012140:	4618      	mov	r0, r3
 8012142:	f7fe fd79 	bl	8010c38 <pbuf_free>
#if TCP_DEBUG
      seg->p = NULL;
#endif /* TCP_DEBUG */
    }
    memp_free(MEMP_TCP_SEG, seg);
 8012146:	6879      	ldr	r1, [r7, #4]
 8012148:	2003      	movs	r0, #3
 801214a:	f7fd feff 	bl	800ff4c <memp_free>
  }
}
 801214e:	bf00      	nop
 8012150:	3708      	adds	r7, #8
 8012152:	46bd      	mov	sp, r7
 8012154:	bd80      	pop	{r7, pc}
	...

08012158 <tcp_seg_copy>:
 * @param seg the old tcp_seg
 * @return a copy of seg
 */
struct tcp_seg *
tcp_seg_copy(struct tcp_seg *seg)
{
 8012158:	b580      	push	{r7, lr}
 801215a:	b084      	sub	sp, #16
 801215c:	af00      	add	r7, sp, #0
 801215e:	6078      	str	r0, [r7, #4]
  struct tcp_seg *cseg;

  LWIP_ASSERT("tcp_seg_copy: invalid seg", seg != NULL);
 8012160:	687b      	ldr	r3, [r7, #4]
 8012162:	2b00      	cmp	r3, #0
 8012164:	d106      	bne.n	8012174 <tcp_seg_copy+0x1c>
 8012166:	4b0f      	ldr	r3, [pc, #60]	; (80121a4 <tcp_seg_copy+0x4c>)
 8012168:	f240 6282 	movw	r2, #1666	; 0x682
 801216c:	490e      	ldr	r1, [pc, #56]	; (80121a8 <tcp_seg_copy+0x50>)
 801216e:	480f      	ldr	r0, [pc, #60]	; (80121ac <tcp_seg_copy+0x54>)
 8012170:	f007 fc7a 	bl	8019a68 <iprintf>

  cseg = (struct tcp_seg *)memp_malloc(MEMP_TCP_SEG);
 8012174:	2003      	movs	r0, #3
 8012176:	f7fd fe79 	bl	800fe6c <memp_malloc>
 801217a:	60f8      	str	r0, [r7, #12]
  if (cseg == NULL) {
 801217c:	68fb      	ldr	r3, [r7, #12]
 801217e:	2b00      	cmp	r3, #0
 8012180:	d101      	bne.n	8012186 <tcp_seg_copy+0x2e>
    return NULL;
 8012182:	2300      	movs	r3, #0
 8012184:	e00a      	b.n	801219c <tcp_seg_copy+0x44>
  }
  SMEMCPY((u8_t *)cseg, (const u8_t *)seg, sizeof(struct tcp_seg));
 8012186:	2210      	movs	r2, #16
 8012188:	6879      	ldr	r1, [r7, #4]
 801218a:	68f8      	ldr	r0, [r7, #12]
 801218c:	f007 fe3b 	bl	8019e06 <memcpy>
  pbuf_ref(cseg->p);
 8012190:	68fb      	ldr	r3, [r7, #12]
 8012192:	685b      	ldr	r3, [r3, #4]
 8012194:	4618      	mov	r0, r3
 8012196:	f7fe fdef 	bl	8010d78 <pbuf_ref>
  return cseg;
 801219a:	68fb      	ldr	r3, [r7, #12]
}
 801219c:	4618      	mov	r0, r3
 801219e:	3710      	adds	r7, #16
 80121a0:	46bd      	mov	sp, r7
 80121a2:	bd80      	pop	{r7, pc}
 80121a4:	0801ccb4 	.word	0x0801ccb4
 80121a8:	0801d208 	.word	0x0801d208
 80121ac:	0801ccf8 	.word	0x0801ccf8

080121b0 <tcp_recv_null>:
 * Default receive callback that is called if the user didn't register
 * a recv callback for the pcb.
 */
err_t
tcp_recv_null(void *arg, struct tcp_pcb *pcb, struct pbuf *p, err_t err)
{
 80121b0:	b580      	push	{r7, lr}
 80121b2:	b084      	sub	sp, #16
 80121b4:	af00      	add	r7, sp, #0
 80121b6:	60f8      	str	r0, [r7, #12]
 80121b8:	60b9      	str	r1, [r7, #8]
 80121ba:	607a      	str	r2, [r7, #4]
 80121bc:	70fb      	strb	r3, [r7, #3]
  LWIP_UNUSED_ARG(arg);

  LWIP_ERROR("tcp_recv_null: invalid pcb", pcb != NULL, return ERR_ARG);
 80121be:	68bb      	ldr	r3, [r7, #8]
 80121c0:	2b00      	cmp	r3, #0
 80121c2:	d109      	bne.n	80121d8 <tcp_recv_null+0x28>
 80121c4:	4b12      	ldr	r3, [pc, #72]	; (8012210 <tcp_recv_null+0x60>)
 80121c6:	f44f 62d3 	mov.w	r2, #1688	; 0x698
 80121ca:	4912      	ldr	r1, [pc, #72]	; (8012214 <tcp_recv_null+0x64>)
 80121cc:	4812      	ldr	r0, [pc, #72]	; (8012218 <tcp_recv_null+0x68>)
 80121ce:	f007 fc4b 	bl	8019a68 <iprintf>
 80121d2:	f06f 030f 	mvn.w	r3, #15
 80121d6:	e016      	b.n	8012206 <tcp_recv_null+0x56>

  if (p != NULL) {
 80121d8:	687b      	ldr	r3, [r7, #4]
 80121da:	2b00      	cmp	r3, #0
 80121dc:	d009      	beq.n	80121f2 <tcp_recv_null+0x42>
    tcp_recved(pcb, p->tot_len);
 80121de:	687b      	ldr	r3, [r7, #4]
 80121e0:	891b      	ldrh	r3, [r3, #8]
 80121e2:	4619      	mov	r1, r3
 80121e4:	68b8      	ldr	r0, [r7, #8]
 80121e6:	f7ff fb15 	bl	8011814 <tcp_recved>
    pbuf_free(p);
 80121ea:	6878      	ldr	r0, [r7, #4]
 80121ec:	f7fe fd24 	bl	8010c38 <pbuf_free>
 80121f0:	e008      	b.n	8012204 <tcp_recv_null+0x54>
  } else if (err == ERR_OK) {
 80121f2:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80121f6:	2b00      	cmp	r3, #0
 80121f8:	d104      	bne.n	8012204 <tcp_recv_null+0x54>
    return tcp_close(pcb);
 80121fa:	68b8      	ldr	r0, [r7, #8]
 80121fc:	f7ff f9ba 	bl	8011574 <tcp_close>
 8012200:	4603      	mov	r3, r0
 8012202:	e000      	b.n	8012206 <tcp_recv_null+0x56>
  }
  return ERR_OK;
 8012204:	2300      	movs	r3, #0
}
 8012206:	4618      	mov	r0, r3
 8012208:	3710      	adds	r7, #16
 801220a:	46bd      	mov	sp, r7
 801220c:	bd80      	pop	{r7, pc}
 801220e:	bf00      	nop
 8012210:	0801ccb4 	.word	0x0801ccb4
 8012214:	0801d224 	.word	0x0801d224
 8012218:	0801ccf8 	.word	0x0801ccf8

0801221c <tcp_kill_prio>:
 *
 * @param prio minimum priority
 */
static void
tcp_kill_prio(u8_t prio)
{
 801221c:	b580      	push	{r7, lr}
 801221e:	b086      	sub	sp, #24
 8012220:	af00      	add	r7, sp, #0
 8012222:	4603      	mov	r3, r0
 8012224:	71fb      	strb	r3, [r7, #7]
  struct tcp_pcb *pcb, *inactive;
  u32_t inactivity;
  u8_t mprio;

  mprio = LWIP_MIN(TCP_PRIO_MAX, prio);
 8012226:	f997 3007 	ldrsb.w	r3, [r7, #7]
 801222a:	2b00      	cmp	r3, #0
 801222c:	db01      	blt.n	8012232 <tcp_kill_prio+0x16>
 801222e:	79fb      	ldrb	r3, [r7, #7]
 8012230:	e000      	b.n	8012234 <tcp_kill_prio+0x18>
 8012232:	237f      	movs	r3, #127	; 0x7f
 8012234:	72fb      	strb	r3, [r7, #11]

  /* We want to kill connections with a lower prio, so bail out if 
   * supplied prio is 0 - there can never be a lower prio
   */
  if (mprio == 0) {
 8012236:	7afb      	ldrb	r3, [r7, #11]
 8012238:	2b00      	cmp	r3, #0
 801223a:	d034      	beq.n	80122a6 <tcp_kill_prio+0x8a>
  /* We only want kill connections with a lower prio, so decrement prio by one 
   * and start searching for oldest connection with same or lower priority than mprio.
   * We want to find the connections with the lowest possible prio, and among
   * these the one with the longest inactivity time.
   */
  mprio--;
 801223c:	7afb      	ldrb	r3, [r7, #11]
 801223e:	3b01      	subs	r3, #1
 8012240:	72fb      	strb	r3, [r7, #11]

  inactivity = 0;
 8012242:	2300      	movs	r3, #0
 8012244:	60fb      	str	r3, [r7, #12]
  inactive = NULL;
 8012246:	2300      	movs	r3, #0
 8012248:	613b      	str	r3, [r7, #16]
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 801224a:	4b19      	ldr	r3, [pc, #100]	; (80122b0 <tcp_kill_prio+0x94>)
 801224c:	681b      	ldr	r3, [r3, #0]
 801224e:	617b      	str	r3, [r7, #20]
 8012250:	e01f      	b.n	8012292 <tcp_kill_prio+0x76>
        /* lower prio is always a kill candidate */
    if ((pcb->prio < mprio) ||
 8012252:	697b      	ldr	r3, [r7, #20]
 8012254:	7d5b      	ldrb	r3, [r3, #21]
 8012256:	7afa      	ldrb	r2, [r7, #11]
 8012258:	429a      	cmp	r2, r3
 801225a:	d80c      	bhi.n	8012276 <tcp_kill_prio+0x5a>
        /* longer inactivity is also a kill candidate */
        ((pcb->prio == mprio) && ((u32_t)(tcp_ticks - pcb->tmr) >= inactivity))) {
 801225c:	697b      	ldr	r3, [r7, #20]
 801225e:	7d5b      	ldrb	r3, [r3, #21]
    if ((pcb->prio < mprio) ||
 8012260:	7afa      	ldrb	r2, [r7, #11]
 8012262:	429a      	cmp	r2, r3
 8012264:	d112      	bne.n	801228c <tcp_kill_prio+0x70>
        ((pcb->prio == mprio) && ((u32_t)(tcp_ticks - pcb->tmr) >= inactivity))) {
 8012266:	4b13      	ldr	r3, [pc, #76]	; (80122b4 <tcp_kill_prio+0x98>)
 8012268:	681a      	ldr	r2, [r3, #0]
 801226a:	697b      	ldr	r3, [r7, #20]
 801226c:	6a1b      	ldr	r3, [r3, #32]
 801226e:	1ad3      	subs	r3, r2, r3
 8012270:	68fa      	ldr	r2, [r7, #12]
 8012272:	429a      	cmp	r2, r3
 8012274:	d80a      	bhi.n	801228c <tcp_kill_prio+0x70>
      inactivity = tcp_ticks - pcb->tmr;
 8012276:	4b0f      	ldr	r3, [pc, #60]	; (80122b4 <tcp_kill_prio+0x98>)
 8012278:	681a      	ldr	r2, [r3, #0]
 801227a:	697b      	ldr	r3, [r7, #20]
 801227c:	6a1b      	ldr	r3, [r3, #32]
 801227e:	1ad3      	subs	r3, r2, r3
 8012280:	60fb      	str	r3, [r7, #12]
      inactive   = pcb;
 8012282:	697b      	ldr	r3, [r7, #20]
 8012284:	613b      	str	r3, [r7, #16]
      mprio      = pcb->prio;
 8012286:	697b      	ldr	r3, [r7, #20]
 8012288:	7d5b      	ldrb	r3, [r3, #21]
 801228a:	72fb      	strb	r3, [r7, #11]
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 801228c:	697b      	ldr	r3, [r7, #20]
 801228e:	68db      	ldr	r3, [r3, #12]
 8012290:	617b      	str	r3, [r7, #20]
 8012292:	697b      	ldr	r3, [r7, #20]
 8012294:	2b00      	cmp	r3, #0
 8012296:	d1dc      	bne.n	8012252 <tcp_kill_prio+0x36>
    }
  }
  if (inactive != NULL) {
 8012298:	693b      	ldr	r3, [r7, #16]
 801229a:	2b00      	cmp	r3, #0
 801229c:	d004      	beq.n	80122a8 <tcp_kill_prio+0x8c>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_kill_prio: killing oldest PCB %p (%"S32_F")\n",
                            (void *)inactive, inactivity));
    tcp_abort(inactive);
 801229e:	6938      	ldr	r0, [r7, #16]
 80122a0:	f7ff fa52 	bl	8011748 <tcp_abort>
 80122a4:	e000      	b.n	80122a8 <tcp_kill_prio+0x8c>
    return;
 80122a6:	bf00      	nop
  }
}
 80122a8:	3718      	adds	r7, #24
 80122aa:	46bd      	mov	sp, r7
 80122ac:	bd80      	pop	{r7, pc}
 80122ae:	bf00      	nop
 80122b0:	20007050 	.word	0x20007050
 80122b4:	20007044 	.word	0x20007044

080122b8 <tcp_kill_state>:
 * Kills the oldest connection that is in specific state.
 * Called from tcp_alloc() for LAST_ACK and CLOSING if no more connections are available.
 */
static void
tcp_kill_state(enum tcp_state state)
{
 80122b8:	b580      	push	{r7, lr}
 80122ba:	b086      	sub	sp, #24
 80122bc:	af00      	add	r7, sp, #0
 80122be:	4603      	mov	r3, r0
 80122c0:	71fb      	strb	r3, [r7, #7]
  struct tcp_pcb *pcb, *inactive;
  u32_t inactivity;

  LWIP_ASSERT("invalid state", (state == CLOSING) || (state == LAST_ACK));
 80122c2:	79fb      	ldrb	r3, [r7, #7]
 80122c4:	2b08      	cmp	r3, #8
 80122c6:	d009      	beq.n	80122dc <tcp_kill_state+0x24>
 80122c8:	79fb      	ldrb	r3, [r7, #7]
 80122ca:	2b09      	cmp	r3, #9
 80122cc:	d006      	beq.n	80122dc <tcp_kill_state+0x24>
 80122ce:	4b1a      	ldr	r3, [pc, #104]	; (8012338 <tcp_kill_state+0x80>)
 80122d0:	f240 62dd 	movw	r2, #1757	; 0x6dd
 80122d4:	4919      	ldr	r1, [pc, #100]	; (801233c <tcp_kill_state+0x84>)
 80122d6:	481a      	ldr	r0, [pc, #104]	; (8012340 <tcp_kill_state+0x88>)
 80122d8:	f007 fbc6 	bl	8019a68 <iprintf>

  inactivity = 0;
 80122dc:	2300      	movs	r3, #0
 80122de:	60fb      	str	r3, [r7, #12]
  inactive = NULL;
 80122e0:	2300      	movs	r3, #0
 80122e2:	613b      	str	r3, [r7, #16]
  /* Go through the list of active pcbs and get the oldest pcb that is in state
     CLOSING/LAST_ACK. */
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 80122e4:	4b17      	ldr	r3, [pc, #92]	; (8012344 <tcp_kill_state+0x8c>)
 80122e6:	681b      	ldr	r3, [r3, #0]
 80122e8:	617b      	str	r3, [r7, #20]
 80122ea:	e017      	b.n	801231c <tcp_kill_state+0x64>
    if (pcb->state == state) {
 80122ec:	697b      	ldr	r3, [r7, #20]
 80122ee:	7d1b      	ldrb	r3, [r3, #20]
 80122f0:	79fa      	ldrb	r2, [r7, #7]
 80122f2:	429a      	cmp	r2, r3
 80122f4:	d10f      	bne.n	8012316 <tcp_kill_state+0x5e>
      if ((u32_t)(tcp_ticks - pcb->tmr) >= inactivity) {
 80122f6:	4b14      	ldr	r3, [pc, #80]	; (8012348 <tcp_kill_state+0x90>)
 80122f8:	681a      	ldr	r2, [r3, #0]
 80122fa:	697b      	ldr	r3, [r7, #20]
 80122fc:	6a1b      	ldr	r3, [r3, #32]
 80122fe:	1ad3      	subs	r3, r2, r3
 8012300:	68fa      	ldr	r2, [r7, #12]
 8012302:	429a      	cmp	r2, r3
 8012304:	d807      	bhi.n	8012316 <tcp_kill_state+0x5e>
        inactivity = tcp_ticks - pcb->tmr;
 8012306:	4b10      	ldr	r3, [pc, #64]	; (8012348 <tcp_kill_state+0x90>)
 8012308:	681a      	ldr	r2, [r3, #0]
 801230a:	697b      	ldr	r3, [r7, #20]
 801230c:	6a1b      	ldr	r3, [r3, #32]
 801230e:	1ad3      	subs	r3, r2, r3
 8012310:	60fb      	str	r3, [r7, #12]
        inactive = pcb;
 8012312:	697b      	ldr	r3, [r7, #20]
 8012314:	613b      	str	r3, [r7, #16]
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 8012316:	697b      	ldr	r3, [r7, #20]
 8012318:	68db      	ldr	r3, [r3, #12]
 801231a:	617b      	str	r3, [r7, #20]
 801231c:	697b      	ldr	r3, [r7, #20]
 801231e:	2b00      	cmp	r3, #0
 8012320:	d1e4      	bne.n	80122ec <tcp_kill_state+0x34>
      }
    }
  }
  if (inactive != NULL) {
 8012322:	693b      	ldr	r3, [r7, #16]
 8012324:	2b00      	cmp	r3, #0
 8012326:	d003      	beq.n	8012330 <tcp_kill_state+0x78>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_kill_closing: killing oldest %s PCB %p (%"S32_F")\n",
                            tcp_state_str[state], (void *)inactive, inactivity));
    /* Don't send a RST, since no data is lost. */
    tcp_abandon(inactive, 0);
 8012328:	2100      	movs	r1, #0
 801232a:	6938      	ldr	r0, [r7, #16]
 801232c:	f7ff f94e 	bl	80115cc <tcp_abandon>
  }
}
 8012330:	bf00      	nop
 8012332:	3718      	adds	r7, #24
 8012334:	46bd      	mov	sp, r7
 8012336:	bd80      	pop	{r7, pc}
 8012338:	0801ccb4 	.word	0x0801ccb4
 801233c:	0801d240 	.word	0x0801d240
 8012340:	0801ccf8 	.word	0x0801ccf8
 8012344:	20007050 	.word	0x20007050
 8012348:	20007044 	.word	0x20007044

0801234c <tcp_kill_timewait>:
 * Kills the oldest connection that is in TIME_WAIT state.
 * Called from tcp_alloc() if no more connections are available.
 */
static void
tcp_kill_timewait(void)
{
 801234c:	b580      	push	{r7, lr}
 801234e:	b084      	sub	sp, #16
 8012350:	af00      	add	r7, sp, #0
  struct tcp_pcb *pcb, *inactive;
  u32_t inactivity;

  inactivity = 0;
 8012352:	2300      	movs	r3, #0
 8012354:	607b      	str	r3, [r7, #4]
  inactive = NULL;
 8012356:	2300      	movs	r3, #0
 8012358:	60bb      	str	r3, [r7, #8]
  /* Go through the list of TIME_WAIT pcbs and get the oldest pcb. */
  for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 801235a:	4b12      	ldr	r3, [pc, #72]	; (80123a4 <tcp_kill_timewait+0x58>)
 801235c:	681b      	ldr	r3, [r3, #0]
 801235e:	60fb      	str	r3, [r7, #12]
 8012360:	e012      	b.n	8012388 <tcp_kill_timewait+0x3c>
    if ((u32_t)(tcp_ticks - pcb->tmr) >= inactivity) {
 8012362:	4b11      	ldr	r3, [pc, #68]	; (80123a8 <tcp_kill_timewait+0x5c>)
 8012364:	681a      	ldr	r2, [r3, #0]
 8012366:	68fb      	ldr	r3, [r7, #12]
 8012368:	6a1b      	ldr	r3, [r3, #32]
 801236a:	1ad3      	subs	r3, r2, r3
 801236c:	687a      	ldr	r2, [r7, #4]
 801236e:	429a      	cmp	r2, r3
 8012370:	d807      	bhi.n	8012382 <tcp_kill_timewait+0x36>
      inactivity = tcp_ticks - pcb->tmr;
 8012372:	4b0d      	ldr	r3, [pc, #52]	; (80123a8 <tcp_kill_timewait+0x5c>)
 8012374:	681a      	ldr	r2, [r3, #0]
 8012376:	68fb      	ldr	r3, [r7, #12]
 8012378:	6a1b      	ldr	r3, [r3, #32]
 801237a:	1ad3      	subs	r3, r2, r3
 801237c:	607b      	str	r3, [r7, #4]
      inactive = pcb;
 801237e:	68fb      	ldr	r3, [r7, #12]
 8012380:	60bb      	str	r3, [r7, #8]
  for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 8012382:	68fb      	ldr	r3, [r7, #12]
 8012384:	68db      	ldr	r3, [r3, #12]
 8012386:	60fb      	str	r3, [r7, #12]
 8012388:	68fb      	ldr	r3, [r7, #12]
 801238a:	2b00      	cmp	r3, #0
 801238c:	d1e9      	bne.n	8012362 <tcp_kill_timewait+0x16>
    }
  }
  if (inactive != NULL) {
 801238e:	68bb      	ldr	r3, [r7, #8]
 8012390:	2b00      	cmp	r3, #0
 8012392:	d002      	beq.n	801239a <tcp_kill_timewait+0x4e>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_kill_timewait: killing oldest TIME-WAIT PCB %p (%"S32_F")\n",
                            (void *)inactive, inactivity));
    tcp_abort(inactive);
 8012394:	68b8      	ldr	r0, [r7, #8]
 8012396:	f7ff f9d7 	bl	8011748 <tcp_abort>
  }
}
 801239a:	bf00      	nop
 801239c:	3710      	adds	r7, #16
 801239e:	46bd      	mov	sp, r7
 80123a0:	bd80      	pop	{r7, pc}
 80123a2:	bf00      	nop
 80123a4:	20007054 	.word	0x20007054
 80123a8:	20007044 	.word	0x20007044

080123ac <tcp_handle_closepend>:
 * now send the FIN (which failed before), the pcb might be in a state that is
 * OK for us to now free it.
 */
static void
tcp_handle_closepend(void)
{
 80123ac:	b580      	push	{r7, lr}
 80123ae:	b082      	sub	sp, #8
 80123b0:	af00      	add	r7, sp, #0
  struct tcp_pcb *pcb = tcp_active_pcbs;
 80123b2:	4b10      	ldr	r3, [pc, #64]	; (80123f4 <tcp_handle_closepend+0x48>)
 80123b4:	681b      	ldr	r3, [r3, #0]
 80123b6:	607b      	str	r3, [r7, #4]

  while (pcb != NULL) {
 80123b8:	e014      	b.n	80123e4 <tcp_handle_closepend+0x38>
    struct tcp_pcb *next = pcb->next;
 80123ba:	687b      	ldr	r3, [r7, #4]
 80123bc:	68db      	ldr	r3, [r3, #12]
 80123be:	603b      	str	r3, [r7, #0]
    /* send pending FIN */
    if (pcb->flags & TF_CLOSEPEND) {
 80123c0:	687b      	ldr	r3, [r7, #4]
 80123c2:	8b5b      	ldrh	r3, [r3, #26]
 80123c4:	f003 0308 	and.w	r3, r3, #8
 80123c8:	2b00      	cmp	r3, #0
 80123ca:	d009      	beq.n	80123e0 <tcp_handle_closepend+0x34>
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_handle_closepend: pending FIN\n"));
      tcp_clear_flags(pcb, TF_CLOSEPEND);
 80123cc:	687b      	ldr	r3, [r7, #4]
 80123ce:	8b5b      	ldrh	r3, [r3, #26]
 80123d0:	f023 0308 	bic.w	r3, r3, #8
 80123d4:	b29a      	uxth	r2, r3
 80123d6:	687b      	ldr	r3, [r7, #4]
 80123d8:	835a      	strh	r2, [r3, #26]
      tcp_close_shutdown_fin(pcb);
 80123da:	6878      	ldr	r0, [r7, #4]
 80123dc:	f7ff f860 	bl	80114a0 <tcp_close_shutdown_fin>
    }
    pcb = next;
 80123e0:	683b      	ldr	r3, [r7, #0]
 80123e2:	607b      	str	r3, [r7, #4]
  while (pcb != NULL) {
 80123e4:	687b      	ldr	r3, [r7, #4]
 80123e6:	2b00      	cmp	r3, #0
 80123e8:	d1e7      	bne.n	80123ba <tcp_handle_closepend+0xe>
  }
}
 80123ea:	bf00      	nop
 80123ec:	bf00      	nop
 80123ee:	3708      	adds	r7, #8
 80123f0:	46bd      	mov	sp, r7
 80123f2:	bd80      	pop	{r7, pc}
 80123f4:	20007050 	.word	0x20007050

080123f8 <tcp_alloc>:
 * @param prio priority for the new pcb
 * @return a new tcp_pcb that initially is in state CLOSED
 */
struct tcp_pcb *
tcp_alloc(u8_t prio)
{
 80123f8:	b580      	push	{r7, lr}
 80123fa:	b084      	sub	sp, #16
 80123fc:	af00      	add	r7, sp, #0
 80123fe:	4603      	mov	r3, r0
 8012400:	71fb      	strb	r3, [r7, #7]
  struct tcp_pcb *pcb;

  LWIP_ASSERT_CORE_LOCKED();

  pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 8012402:	2001      	movs	r0, #1
 8012404:	f7fd fd32 	bl	800fe6c <memp_malloc>
 8012408:	60f8      	str	r0, [r7, #12]
  if (pcb == NULL) {
 801240a:	68fb      	ldr	r3, [r7, #12]
 801240c:	2b00      	cmp	r3, #0
 801240e:	d126      	bne.n	801245e <tcp_alloc+0x66>
    /* Try to send FIN for all pcbs stuck in TF_CLOSEPEND first */
    tcp_handle_closepend();
 8012410:	f7ff ffcc 	bl	80123ac <tcp_handle_closepend>

    /* Try killing oldest connection in TIME-WAIT. */
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_alloc: killing off oldest TIME-WAIT connection\n"));
    tcp_kill_timewait();
 8012414:	f7ff ff9a 	bl	801234c <tcp_kill_timewait>
    /* Try to allocate a tcp_pcb again. */
    pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 8012418:	2001      	movs	r0, #1
 801241a:	f7fd fd27 	bl	800fe6c <memp_malloc>
 801241e:	60f8      	str	r0, [r7, #12]
    if (pcb == NULL) {
 8012420:	68fb      	ldr	r3, [r7, #12]
 8012422:	2b00      	cmp	r3, #0
 8012424:	d11b      	bne.n	801245e <tcp_alloc+0x66>
      /* Try killing oldest connection in LAST-ACK (these wouldn't go to TIME-WAIT). */
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_alloc: killing off oldest LAST-ACK connection\n"));
      tcp_kill_state(LAST_ACK);
 8012426:	2009      	movs	r0, #9
 8012428:	f7ff ff46 	bl	80122b8 <tcp_kill_state>
      /* Try to allocate a tcp_pcb again. */
      pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 801242c:	2001      	movs	r0, #1
 801242e:	f7fd fd1d 	bl	800fe6c <memp_malloc>
 8012432:	60f8      	str	r0, [r7, #12]
      if (pcb == NULL) {
 8012434:	68fb      	ldr	r3, [r7, #12]
 8012436:	2b00      	cmp	r3, #0
 8012438:	d111      	bne.n	801245e <tcp_alloc+0x66>
        /* Try killing oldest connection in CLOSING. */
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_alloc: killing off oldest CLOSING connection\n"));
        tcp_kill_state(CLOSING);
 801243a:	2008      	movs	r0, #8
 801243c:	f7ff ff3c 	bl	80122b8 <tcp_kill_state>
        /* Try to allocate a tcp_pcb again. */
        pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 8012440:	2001      	movs	r0, #1
 8012442:	f7fd fd13 	bl	800fe6c <memp_malloc>
 8012446:	60f8      	str	r0, [r7, #12]
        if (pcb == NULL) {
 8012448:	68fb      	ldr	r3, [r7, #12]
 801244a:	2b00      	cmp	r3, #0
 801244c:	d107      	bne.n	801245e <tcp_alloc+0x66>
          /* Try killing oldest active connection with lower priority than the new one. */
          LWIP_DEBUGF(TCP_DEBUG, ("tcp_alloc: killing oldest connection with prio lower than %d\n", prio));
          tcp_kill_prio(prio);
 801244e:	79fb      	ldrb	r3, [r7, #7]
 8012450:	4618      	mov	r0, r3
 8012452:	f7ff fee3 	bl	801221c <tcp_kill_prio>
          /* Try to allocate a tcp_pcb again. */
          pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 8012456:	2001      	movs	r0, #1
 8012458:	f7fd fd08 	bl	800fe6c <memp_malloc>
 801245c:	60f8      	str	r0, [r7, #12]
    if (pcb != NULL) {
      /* adjust err stats: memp_malloc failed above */
      MEMP_STATS_DEC(err, MEMP_TCP_PCB);
    }
  }
  if (pcb != NULL) {
 801245e:	68fb      	ldr	r3, [r7, #12]
 8012460:	2b00      	cmp	r3, #0
 8012462:	d03f      	beq.n	80124e4 <tcp_alloc+0xec>
    /* zero out the whole pcb, so there is no need to initialize members to zero */
    memset(pcb, 0, sizeof(struct tcp_pcb));
 8012464:	229c      	movs	r2, #156	; 0x9c
 8012466:	2100      	movs	r1, #0
 8012468:	68f8      	ldr	r0, [r7, #12]
 801246a:	f007 fc53 	bl	8019d14 <memset>
    pcb->prio = prio;
 801246e:	68fb      	ldr	r3, [r7, #12]
 8012470:	79fa      	ldrb	r2, [r7, #7]
 8012472:	755a      	strb	r2, [r3, #21]
    pcb->snd_buf = TCP_SND_BUF;
 8012474:	68fb      	ldr	r3, [r7, #12]
 8012476:	f241 62d0 	movw	r2, #5840	; 0x16d0
 801247a:	f8a3 2064 	strh.w	r2, [r3, #100]	; 0x64
    /* Start with a window that does not need scaling. When window scaling is
       enabled and used, the window is enlarged when both sides agree on scaling. */
    pcb->rcv_wnd = pcb->rcv_ann_wnd = TCPWND_MIN16(TCP_WND);
 801247e:	68fb      	ldr	r3, [r7, #12]
 8012480:	f241 62d0 	movw	r2, #5840	; 0x16d0
 8012484:	855a      	strh	r2, [r3, #42]	; 0x2a
 8012486:	68fb      	ldr	r3, [r7, #12]
 8012488:	8d5a      	ldrh	r2, [r3, #42]	; 0x2a
 801248a:	68fb      	ldr	r3, [r7, #12]
 801248c:	851a      	strh	r2, [r3, #40]	; 0x28
    pcb->ttl = TCP_TTL;
 801248e:	68fb      	ldr	r3, [r7, #12]
 8012490:	22ff      	movs	r2, #255	; 0xff
 8012492:	72da      	strb	r2, [r3, #11]
    /* As initial send MSS, we use TCP_MSS but limit it to 536.
       The send MSS is updated when an MSS option is received. */
    pcb->mss = INITIAL_MSS;
 8012494:	68fb      	ldr	r3, [r7, #12]
 8012496:	f44f 7206 	mov.w	r2, #536	; 0x218
 801249a:	865a      	strh	r2, [r3, #50]	; 0x32
    pcb->rto = 3000 / TCP_SLOW_INTERVAL;
 801249c:	68fb      	ldr	r3, [r7, #12]
 801249e:	2206      	movs	r2, #6
 80124a0:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
    pcb->sv = 3000 / TCP_SLOW_INTERVAL;
 80124a4:	68fb      	ldr	r3, [r7, #12]
 80124a6:	2206      	movs	r2, #6
 80124a8:	87da      	strh	r2, [r3, #62]	; 0x3e
    pcb->rtime = -1;
 80124aa:	68fb      	ldr	r3, [r7, #12]
 80124ac:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80124b0:	861a      	strh	r2, [r3, #48]	; 0x30
    pcb->cwnd = 1;
 80124b2:	68fb      	ldr	r3, [r7, #12]
 80124b4:	2201      	movs	r2, #1
 80124b6:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
    pcb->tmr = tcp_ticks;
 80124ba:	4b0d      	ldr	r3, [pc, #52]	; (80124f0 <tcp_alloc+0xf8>)
 80124bc:	681a      	ldr	r2, [r3, #0]
 80124be:	68fb      	ldr	r3, [r7, #12]
 80124c0:	621a      	str	r2, [r3, #32]
    pcb->last_timer = tcp_timer_ctr;
 80124c2:	4b0c      	ldr	r3, [pc, #48]	; (80124f4 <tcp_alloc+0xfc>)
 80124c4:	781a      	ldrb	r2, [r3, #0]
 80124c6:	68fb      	ldr	r3, [r7, #12]
 80124c8:	779a      	strb	r2, [r3, #30]
    of using the largest advertised receive window.  We've seen complications with
    receiving TCPs that use window scaling and/or window auto-tuning where the
    initial advertised window is very small and then grows rapidly once the
    connection is established. To avoid these complications, we set ssthresh to the
    largest effective cwnd (amount of in-flight data) that the sender can have. */
    pcb->ssthresh = TCP_SND_BUF;
 80124ca:	68fb      	ldr	r3, [r7, #12]
 80124cc:	f241 62d0 	movw	r2, #5840	; 0x16d0
 80124d0:	f8a3 204a 	strh.w	r2, [r3, #74]	; 0x4a

#if LWIP_CALLBACK_API
    pcb->recv = tcp_recv_null;
 80124d4:	68fb      	ldr	r3, [r7, #12]
 80124d6:	4a08      	ldr	r2, [pc, #32]	; (80124f8 <tcp_alloc+0x100>)
 80124d8:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
#endif /* LWIP_CALLBACK_API */

    /* Init KEEPALIVE timer */
    pcb->keep_idle  = TCP_KEEPIDLE_DEFAULT;
 80124dc:	68fb      	ldr	r3, [r7, #12]
 80124de:	4a07      	ldr	r2, [pc, #28]	; (80124fc <tcp_alloc+0x104>)
 80124e0:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
#if LWIP_TCP_KEEPALIVE
    pcb->keep_intvl = TCP_KEEPINTVL_DEFAULT;
    pcb->keep_cnt   = TCP_KEEPCNT_DEFAULT;
#endif /* LWIP_TCP_KEEPALIVE */
  }
  return pcb;
 80124e4:	68fb      	ldr	r3, [r7, #12]
}
 80124e6:	4618      	mov	r0, r3
 80124e8:	3710      	adds	r7, #16
 80124ea:	46bd      	mov	sp, r7
 80124ec:	bd80      	pop	{r7, pc}
 80124ee:	bf00      	nop
 80124f0:	20007044 	.word	0x20007044
 80124f4:	2000705a 	.word	0x2000705a
 80124f8:	080121b1 	.word	0x080121b1
 80124fc:	006ddd00 	.word	0x006ddd00

08012500 <tcp_pcb_purge>:
 *
 * @param pcb tcp_pcb to purge. The pcb itself is not deallocated!
 */
void
tcp_pcb_purge(struct tcp_pcb *pcb)
{
 8012500:	b580      	push	{r7, lr}
 8012502:	b082      	sub	sp, #8
 8012504:	af00      	add	r7, sp, #0
 8012506:	6078      	str	r0, [r7, #4]
  LWIP_ERROR("tcp_pcb_purge: invalid pcb", pcb != NULL, return);
 8012508:	687b      	ldr	r3, [r7, #4]
 801250a:	2b00      	cmp	r3, #0
 801250c:	d107      	bne.n	801251e <tcp_pcb_purge+0x1e>
 801250e:	4b21      	ldr	r3, [pc, #132]	; (8012594 <tcp_pcb_purge+0x94>)
 8012510:	f640 0251 	movw	r2, #2129	; 0x851
 8012514:	4920      	ldr	r1, [pc, #128]	; (8012598 <tcp_pcb_purge+0x98>)
 8012516:	4821      	ldr	r0, [pc, #132]	; (801259c <tcp_pcb_purge+0x9c>)
 8012518:	f007 faa6 	bl	8019a68 <iprintf>
 801251c:	e037      	b.n	801258e <tcp_pcb_purge+0x8e>

  if (pcb->state != CLOSED &&
 801251e:	687b      	ldr	r3, [r7, #4]
 8012520:	7d1b      	ldrb	r3, [r3, #20]
 8012522:	2b00      	cmp	r3, #0
 8012524:	d033      	beq.n	801258e <tcp_pcb_purge+0x8e>
      pcb->state != TIME_WAIT &&
 8012526:	687b      	ldr	r3, [r7, #4]
 8012528:	7d1b      	ldrb	r3, [r3, #20]
  if (pcb->state != CLOSED &&
 801252a:	2b0a      	cmp	r3, #10
 801252c:	d02f      	beq.n	801258e <tcp_pcb_purge+0x8e>
      pcb->state != LISTEN) {
 801252e:	687b      	ldr	r3, [r7, #4]
 8012530:	7d1b      	ldrb	r3, [r3, #20]
      pcb->state != TIME_WAIT &&
 8012532:	2b01      	cmp	r3, #1
 8012534:	d02b      	beq.n	801258e <tcp_pcb_purge+0x8e>

    LWIP_DEBUGF(TCP_DEBUG, ("tcp_pcb_purge\n"));

    tcp_backlog_accepted(pcb);

    if (pcb->refused_data != NULL) {
 8012536:	687b      	ldr	r3, [r7, #4]
 8012538:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 801253a:	2b00      	cmp	r3, #0
 801253c:	d007      	beq.n	801254e <tcp_pcb_purge+0x4e>
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_pcb_purge: data left on ->refused_data\n"));
      pbuf_free(pcb->refused_data);
 801253e:	687b      	ldr	r3, [r7, #4]
 8012540:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8012542:	4618      	mov	r0, r3
 8012544:	f7fe fb78 	bl	8010c38 <pbuf_free>
      pcb->refused_data = NULL;
 8012548:	687b      	ldr	r3, [r7, #4]
 801254a:	2200      	movs	r2, #0
 801254c:	679a      	str	r2, [r3, #120]	; 0x78
    }
    if (pcb->unacked != NULL) {
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_pcb_purge: data left on ->unacked\n"));
    }
#if TCP_QUEUE_OOSEQ
    if (pcb->ooseq != NULL) {
 801254e:	687b      	ldr	r3, [r7, #4]
 8012550:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8012552:	2b00      	cmp	r3, #0
 8012554:	d002      	beq.n	801255c <tcp_pcb_purge+0x5c>
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_pcb_purge: data left on ->ooseq\n"));
      tcp_free_ooseq(pcb);
 8012556:	6878      	ldr	r0, [r7, #4]
 8012558:	f000 f986 	bl	8012868 <tcp_free_ooseq>
    }
#endif /* TCP_QUEUE_OOSEQ */

    /* Stop the retransmission timer as it will expect data on unacked
       queue if it fires */
    pcb->rtime = -1;
 801255c:	687b      	ldr	r3, [r7, #4]
 801255e:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8012562:	861a      	strh	r2, [r3, #48]	; 0x30

    tcp_segs_free(pcb->unsent);
 8012564:	687b      	ldr	r3, [r7, #4]
 8012566:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8012568:	4618      	mov	r0, r3
 801256a:	f7ff fdc7 	bl	80120fc <tcp_segs_free>
    tcp_segs_free(pcb->unacked);
 801256e:	687b      	ldr	r3, [r7, #4]
 8012570:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8012572:	4618      	mov	r0, r3
 8012574:	f7ff fdc2 	bl	80120fc <tcp_segs_free>
    pcb->unacked = pcb->unsent = NULL;
 8012578:	687b      	ldr	r3, [r7, #4]
 801257a:	2200      	movs	r2, #0
 801257c:	66da      	str	r2, [r3, #108]	; 0x6c
 801257e:	687b      	ldr	r3, [r7, #4]
 8012580:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 8012582:	687b      	ldr	r3, [r7, #4]
 8012584:	671a      	str	r2, [r3, #112]	; 0x70
#if TCP_OVERSIZE
    pcb->unsent_oversize = 0;
 8012586:	687b      	ldr	r3, [r7, #4]
 8012588:	2200      	movs	r2, #0
 801258a:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
#endif /* TCP_OVERSIZE */
  }
}
 801258e:	3708      	adds	r7, #8
 8012590:	46bd      	mov	sp, r7
 8012592:	bd80      	pop	{r7, pc}
 8012594:	0801ccb4 	.word	0x0801ccb4
 8012598:	0801d300 	.word	0x0801d300
 801259c:	0801ccf8 	.word	0x0801ccf8

080125a0 <tcp_pcb_remove>:
 * @param pcblist PCB list to purge.
 * @param pcb tcp_pcb to purge. The pcb itself is NOT deallocated!
 */
void
tcp_pcb_remove(struct tcp_pcb **pcblist, struct tcp_pcb *pcb)
{
 80125a0:	b580      	push	{r7, lr}
 80125a2:	b084      	sub	sp, #16
 80125a4:	af00      	add	r7, sp, #0
 80125a6:	6078      	str	r0, [r7, #4]
 80125a8:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT("tcp_pcb_remove: invalid pcb", pcb != NULL);
 80125aa:	683b      	ldr	r3, [r7, #0]
 80125ac:	2b00      	cmp	r3, #0
 80125ae:	d106      	bne.n	80125be <tcp_pcb_remove+0x1e>
 80125b0:	4b3e      	ldr	r3, [pc, #248]	; (80126ac <tcp_pcb_remove+0x10c>)
 80125b2:	f640 0283 	movw	r2, #2179	; 0x883
 80125b6:	493e      	ldr	r1, [pc, #248]	; (80126b0 <tcp_pcb_remove+0x110>)
 80125b8:	483e      	ldr	r0, [pc, #248]	; (80126b4 <tcp_pcb_remove+0x114>)
 80125ba:	f007 fa55 	bl	8019a68 <iprintf>
  LWIP_ASSERT("tcp_pcb_remove: invalid pcblist", pcblist != NULL);
 80125be:	687b      	ldr	r3, [r7, #4]
 80125c0:	2b00      	cmp	r3, #0
 80125c2:	d106      	bne.n	80125d2 <tcp_pcb_remove+0x32>
 80125c4:	4b39      	ldr	r3, [pc, #228]	; (80126ac <tcp_pcb_remove+0x10c>)
 80125c6:	f640 0284 	movw	r2, #2180	; 0x884
 80125ca:	493b      	ldr	r1, [pc, #236]	; (80126b8 <tcp_pcb_remove+0x118>)
 80125cc:	4839      	ldr	r0, [pc, #228]	; (80126b4 <tcp_pcb_remove+0x114>)
 80125ce:	f007 fa4b 	bl	8019a68 <iprintf>

  TCP_RMV(pcblist, pcb);
 80125d2:	687b      	ldr	r3, [r7, #4]
 80125d4:	681b      	ldr	r3, [r3, #0]
 80125d6:	683a      	ldr	r2, [r7, #0]
 80125d8:	429a      	cmp	r2, r3
 80125da:	d105      	bne.n	80125e8 <tcp_pcb_remove+0x48>
 80125dc:	687b      	ldr	r3, [r7, #4]
 80125de:	681b      	ldr	r3, [r3, #0]
 80125e0:	68da      	ldr	r2, [r3, #12]
 80125e2:	687b      	ldr	r3, [r7, #4]
 80125e4:	601a      	str	r2, [r3, #0]
 80125e6:	e013      	b.n	8012610 <tcp_pcb_remove+0x70>
 80125e8:	687b      	ldr	r3, [r7, #4]
 80125ea:	681b      	ldr	r3, [r3, #0]
 80125ec:	60fb      	str	r3, [r7, #12]
 80125ee:	e00c      	b.n	801260a <tcp_pcb_remove+0x6a>
 80125f0:	68fb      	ldr	r3, [r7, #12]
 80125f2:	68db      	ldr	r3, [r3, #12]
 80125f4:	683a      	ldr	r2, [r7, #0]
 80125f6:	429a      	cmp	r2, r3
 80125f8:	d104      	bne.n	8012604 <tcp_pcb_remove+0x64>
 80125fa:	683b      	ldr	r3, [r7, #0]
 80125fc:	68da      	ldr	r2, [r3, #12]
 80125fe:	68fb      	ldr	r3, [r7, #12]
 8012600:	60da      	str	r2, [r3, #12]
 8012602:	e005      	b.n	8012610 <tcp_pcb_remove+0x70>
 8012604:	68fb      	ldr	r3, [r7, #12]
 8012606:	68db      	ldr	r3, [r3, #12]
 8012608:	60fb      	str	r3, [r7, #12]
 801260a:	68fb      	ldr	r3, [r7, #12]
 801260c:	2b00      	cmp	r3, #0
 801260e:	d1ef      	bne.n	80125f0 <tcp_pcb_remove+0x50>
 8012610:	683b      	ldr	r3, [r7, #0]
 8012612:	2200      	movs	r2, #0
 8012614:	60da      	str	r2, [r3, #12]

  tcp_pcb_purge(pcb);
 8012616:	6838      	ldr	r0, [r7, #0]
 8012618:	f7ff ff72 	bl	8012500 <tcp_pcb_purge>

  /* if there is an outstanding delayed ACKs, send it */
  if ((pcb->state != TIME_WAIT) &&
 801261c:	683b      	ldr	r3, [r7, #0]
 801261e:	7d1b      	ldrb	r3, [r3, #20]
 8012620:	2b0a      	cmp	r3, #10
 8012622:	d013      	beq.n	801264c <tcp_pcb_remove+0xac>
      (pcb->state != LISTEN) &&
 8012624:	683b      	ldr	r3, [r7, #0]
 8012626:	7d1b      	ldrb	r3, [r3, #20]
  if ((pcb->state != TIME_WAIT) &&
 8012628:	2b01      	cmp	r3, #1
 801262a:	d00f      	beq.n	801264c <tcp_pcb_remove+0xac>
      (pcb->flags & TF_ACK_DELAY)) {
 801262c:	683b      	ldr	r3, [r7, #0]
 801262e:	8b5b      	ldrh	r3, [r3, #26]
 8012630:	f003 0301 	and.w	r3, r3, #1
      (pcb->state != LISTEN) &&
 8012634:	2b00      	cmp	r3, #0
 8012636:	d009      	beq.n	801264c <tcp_pcb_remove+0xac>
    tcp_ack_now(pcb);
 8012638:	683b      	ldr	r3, [r7, #0]
 801263a:	8b5b      	ldrh	r3, [r3, #26]
 801263c:	f043 0302 	orr.w	r3, r3, #2
 8012640:	b29a      	uxth	r2, r3
 8012642:	683b      	ldr	r3, [r7, #0]
 8012644:	835a      	strh	r2, [r3, #26]
    tcp_output(pcb);
 8012646:	6838      	ldr	r0, [r7, #0]
 8012648:	f002 ff6e 	bl	8015528 <tcp_output>
  }

  if (pcb->state != LISTEN) {
 801264c:	683b      	ldr	r3, [r7, #0]
 801264e:	7d1b      	ldrb	r3, [r3, #20]
 8012650:	2b01      	cmp	r3, #1
 8012652:	d020      	beq.n	8012696 <tcp_pcb_remove+0xf6>
    LWIP_ASSERT("unsent segments leaking", pcb->unsent == NULL);
 8012654:	683b      	ldr	r3, [r7, #0]
 8012656:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8012658:	2b00      	cmp	r3, #0
 801265a:	d006      	beq.n	801266a <tcp_pcb_remove+0xca>
 801265c:	4b13      	ldr	r3, [pc, #76]	; (80126ac <tcp_pcb_remove+0x10c>)
 801265e:	f640 0293 	movw	r2, #2195	; 0x893
 8012662:	4916      	ldr	r1, [pc, #88]	; (80126bc <tcp_pcb_remove+0x11c>)
 8012664:	4813      	ldr	r0, [pc, #76]	; (80126b4 <tcp_pcb_remove+0x114>)
 8012666:	f007 f9ff 	bl	8019a68 <iprintf>
    LWIP_ASSERT("unacked segments leaking", pcb->unacked == NULL);
 801266a:	683b      	ldr	r3, [r7, #0]
 801266c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 801266e:	2b00      	cmp	r3, #0
 8012670:	d006      	beq.n	8012680 <tcp_pcb_remove+0xe0>
 8012672:	4b0e      	ldr	r3, [pc, #56]	; (80126ac <tcp_pcb_remove+0x10c>)
 8012674:	f640 0294 	movw	r2, #2196	; 0x894
 8012678:	4911      	ldr	r1, [pc, #68]	; (80126c0 <tcp_pcb_remove+0x120>)
 801267a:	480e      	ldr	r0, [pc, #56]	; (80126b4 <tcp_pcb_remove+0x114>)
 801267c:	f007 f9f4 	bl	8019a68 <iprintf>
#if TCP_QUEUE_OOSEQ
    LWIP_ASSERT("ooseq segments leaking", pcb->ooseq == NULL);
 8012680:	683b      	ldr	r3, [r7, #0]
 8012682:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8012684:	2b00      	cmp	r3, #0
 8012686:	d006      	beq.n	8012696 <tcp_pcb_remove+0xf6>
 8012688:	4b08      	ldr	r3, [pc, #32]	; (80126ac <tcp_pcb_remove+0x10c>)
 801268a:	f640 0296 	movw	r2, #2198	; 0x896
 801268e:	490d      	ldr	r1, [pc, #52]	; (80126c4 <tcp_pcb_remove+0x124>)
 8012690:	4808      	ldr	r0, [pc, #32]	; (80126b4 <tcp_pcb_remove+0x114>)
 8012692:	f007 f9e9 	bl	8019a68 <iprintf>
#endif /* TCP_QUEUE_OOSEQ */
  }

  pcb->state = CLOSED;
 8012696:	683b      	ldr	r3, [r7, #0]
 8012698:	2200      	movs	r2, #0
 801269a:	751a      	strb	r2, [r3, #20]
  /* reset the local port to prevent the pcb from being 'bound' */
  pcb->local_port = 0;
 801269c:	683b      	ldr	r3, [r7, #0]
 801269e:	2200      	movs	r2, #0
 80126a0:	82da      	strh	r2, [r3, #22]

  LWIP_ASSERT("tcp_pcb_remove: tcp_pcbs_sane()", tcp_pcbs_sane());
}
 80126a2:	bf00      	nop
 80126a4:	3710      	adds	r7, #16
 80126a6:	46bd      	mov	sp, r7
 80126a8:	bd80      	pop	{r7, pc}
 80126aa:	bf00      	nop
 80126ac:	0801ccb4 	.word	0x0801ccb4
 80126b0:	0801d31c 	.word	0x0801d31c
 80126b4:	0801ccf8 	.word	0x0801ccf8
 80126b8:	0801d338 	.word	0x0801d338
 80126bc:	0801d358 	.word	0x0801d358
 80126c0:	0801d370 	.word	0x0801d370
 80126c4:	0801d38c 	.word	0x0801d38c

080126c8 <tcp_next_iss>:
 *
 * @return u32_t pseudo random sequence number
 */
u32_t
tcp_next_iss(struct tcp_pcb *pcb)
{
 80126c8:	b580      	push	{r7, lr}
 80126ca:	b082      	sub	sp, #8
 80126cc:	af00      	add	r7, sp, #0
 80126ce:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_next_iss: invalid pcb", pcb != NULL);
  return LWIP_HOOK_TCP_ISN(&pcb->local_ip, pcb->local_port, &pcb->remote_ip, pcb->remote_port);
#else /* LWIP_HOOK_TCP_ISN */
  static u32_t iss = 6510;

  LWIP_ASSERT("tcp_next_iss: invalid pcb", pcb != NULL);
 80126d0:	687b      	ldr	r3, [r7, #4]
 80126d2:	2b00      	cmp	r3, #0
 80126d4:	d106      	bne.n	80126e4 <tcp_next_iss+0x1c>
 80126d6:	4b0a      	ldr	r3, [pc, #40]	; (8012700 <tcp_next_iss+0x38>)
 80126d8:	f640 02af 	movw	r2, #2223	; 0x8af
 80126dc:	4909      	ldr	r1, [pc, #36]	; (8012704 <tcp_next_iss+0x3c>)
 80126de:	480a      	ldr	r0, [pc, #40]	; (8012708 <tcp_next_iss+0x40>)
 80126e0:	f007 f9c2 	bl	8019a68 <iprintf>
  LWIP_UNUSED_ARG(pcb);

  iss += tcp_ticks;       /* XXX */
 80126e4:	4b09      	ldr	r3, [pc, #36]	; (801270c <tcp_next_iss+0x44>)
 80126e6:	681a      	ldr	r2, [r3, #0]
 80126e8:	4b09      	ldr	r3, [pc, #36]	; (8012710 <tcp_next_iss+0x48>)
 80126ea:	681b      	ldr	r3, [r3, #0]
 80126ec:	4413      	add	r3, r2
 80126ee:	4a07      	ldr	r2, [pc, #28]	; (801270c <tcp_next_iss+0x44>)
 80126f0:	6013      	str	r3, [r2, #0]
  return iss;
 80126f2:	4b06      	ldr	r3, [pc, #24]	; (801270c <tcp_next_iss+0x44>)
 80126f4:	681b      	ldr	r3, [r3, #0]
#endif /* LWIP_HOOK_TCP_ISN */
}
 80126f6:	4618      	mov	r0, r3
 80126f8:	3708      	adds	r7, #8
 80126fa:	46bd      	mov	sp, r7
 80126fc:	bd80      	pop	{r7, pc}
 80126fe:	bf00      	nop
 8012700:	0801ccb4 	.word	0x0801ccb4
 8012704:	0801d3a4 	.word	0x0801d3a4
 8012708:	0801ccf8 	.word	0x0801ccf8
 801270c:	2000005c 	.word	0x2000005c
 8012710:	20007044 	.word	0x20007044

08012714 <tcp_eff_send_mss_netif>:
 * by calculating the minimum of TCP_MSS and the mtu (if set) of the target
 * netif (if not NULL).
 */
u16_t
tcp_eff_send_mss_netif(u16_t sendmss, struct netif *outif, const ip_addr_t *dest)
{
 8012714:	b580      	push	{r7, lr}
 8012716:	b086      	sub	sp, #24
 8012718:	af00      	add	r7, sp, #0
 801271a:	4603      	mov	r3, r0
 801271c:	60b9      	str	r1, [r7, #8]
 801271e:	607a      	str	r2, [r7, #4]
 8012720:	81fb      	strh	r3, [r7, #14]
  u16_t mss_s;
  u16_t mtu;

  LWIP_UNUSED_ARG(dest); /* in case IPv6 is disabled */

  LWIP_ASSERT("tcp_eff_send_mss_netif: invalid dst_ip", dest != NULL);
 8012722:	687b      	ldr	r3, [r7, #4]
 8012724:	2b00      	cmp	r3, #0
 8012726:	d106      	bne.n	8012736 <tcp_eff_send_mss_netif+0x22>
 8012728:	4b14      	ldr	r3, [pc, #80]	; (801277c <tcp_eff_send_mss_netif+0x68>)
 801272a:	f640 02c5 	movw	r2, #2245	; 0x8c5
 801272e:	4914      	ldr	r1, [pc, #80]	; (8012780 <tcp_eff_send_mss_netif+0x6c>)
 8012730:	4814      	ldr	r0, [pc, #80]	; (8012784 <tcp_eff_send_mss_netif+0x70>)
 8012732:	f007 f999 	bl	8019a68 <iprintf>
  else
#endif /* LWIP_IPV4 */
#endif /* LWIP_IPV6 */
#if LWIP_IPV4
  {
    if (outif == NULL) {
 8012736:	68bb      	ldr	r3, [r7, #8]
 8012738:	2b00      	cmp	r3, #0
 801273a:	d101      	bne.n	8012740 <tcp_eff_send_mss_netif+0x2c>
      return sendmss;
 801273c:	89fb      	ldrh	r3, [r7, #14]
 801273e:	e019      	b.n	8012774 <tcp_eff_send_mss_netif+0x60>
    }
    mtu = outif->mtu;
 8012740:	68bb      	ldr	r3, [r7, #8]
 8012742:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 8012744:	82fb      	strh	r3, [r7, #22]
  }
#endif /* LWIP_IPV4 */

  if (mtu != 0) {
 8012746:	8afb      	ldrh	r3, [r7, #22]
 8012748:	2b00      	cmp	r3, #0
 801274a:	d012      	beq.n	8012772 <tcp_eff_send_mss_netif+0x5e>
    else
#endif /* LWIP_IPV4 */
#endif /* LWIP_IPV6 */
#if LWIP_IPV4
    {
      offset = IP_HLEN + TCP_HLEN;
 801274c:	2328      	movs	r3, #40	; 0x28
 801274e:	82bb      	strh	r3, [r7, #20]
    }
#endif /* LWIP_IPV4 */
    mss_s = (mtu > offset) ? (u16_t)(mtu - offset) : 0;
 8012750:	8afa      	ldrh	r2, [r7, #22]
 8012752:	8abb      	ldrh	r3, [r7, #20]
 8012754:	429a      	cmp	r2, r3
 8012756:	d904      	bls.n	8012762 <tcp_eff_send_mss_netif+0x4e>
 8012758:	8afa      	ldrh	r2, [r7, #22]
 801275a:	8abb      	ldrh	r3, [r7, #20]
 801275c:	1ad3      	subs	r3, r2, r3
 801275e:	b29b      	uxth	r3, r3
 8012760:	e000      	b.n	8012764 <tcp_eff_send_mss_netif+0x50>
 8012762:	2300      	movs	r3, #0
 8012764:	827b      	strh	r3, [r7, #18]
    /* RFC 1122, chap 4.2.2.6:
     * Eff.snd.MSS = min(SendMSS+20, MMS_S) - TCPhdrsize - IPoptionsize
     * We correct for TCP options in tcp_write(), and don't support IP options.
     */
    sendmss = LWIP_MIN(sendmss, mss_s);
 8012766:	8a7a      	ldrh	r2, [r7, #18]
 8012768:	89fb      	ldrh	r3, [r7, #14]
 801276a:	4293      	cmp	r3, r2
 801276c:	bf28      	it	cs
 801276e:	4613      	movcs	r3, r2
 8012770:	81fb      	strh	r3, [r7, #14]
  }
  return sendmss;
 8012772:	89fb      	ldrh	r3, [r7, #14]
}
 8012774:	4618      	mov	r0, r3
 8012776:	3718      	adds	r7, #24
 8012778:	46bd      	mov	sp, r7
 801277a:	bd80      	pop	{r7, pc}
 801277c:	0801ccb4 	.word	0x0801ccb4
 8012780:	0801d3c0 	.word	0x0801d3c0
 8012784:	0801ccf8 	.word	0x0801ccf8

08012788 <tcp_netif_ip_addr_changed_pcblist>:
#endif /* TCP_CALCULATE_EFF_SEND_MSS */

/** Helper function for tcp_netif_ip_addr_changed() that iterates a pcb list */
static void
tcp_netif_ip_addr_changed_pcblist(const ip_addr_t *old_addr, struct tcp_pcb *pcb_list)
{
 8012788:	b580      	push	{r7, lr}
 801278a:	b084      	sub	sp, #16
 801278c:	af00      	add	r7, sp, #0
 801278e:	6078      	str	r0, [r7, #4]
 8012790:	6039      	str	r1, [r7, #0]
  struct tcp_pcb *pcb;
  pcb = pcb_list;
 8012792:	683b      	ldr	r3, [r7, #0]
 8012794:	60fb      	str	r3, [r7, #12]

  LWIP_ASSERT("tcp_netif_ip_addr_changed_pcblist: invalid old_addr", old_addr != NULL);
 8012796:	687b      	ldr	r3, [r7, #4]
 8012798:	2b00      	cmp	r3, #0
 801279a:	d119      	bne.n	80127d0 <tcp_netif_ip_addr_changed_pcblist+0x48>
 801279c:	4b10      	ldr	r3, [pc, #64]	; (80127e0 <tcp_netif_ip_addr_changed_pcblist+0x58>)
 801279e:	f44f 6210 	mov.w	r2, #2304	; 0x900
 80127a2:	4910      	ldr	r1, [pc, #64]	; (80127e4 <tcp_netif_ip_addr_changed_pcblist+0x5c>)
 80127a4:	4810      	ldr	r0, [pc, #64]	; (80127e8 <tcp_netif_ip_addr_changed_pcblist+0x60>)
 80127a6:	f007 f95f 	bl	8019a68 <iprintf>

  while (pcb != NULL) {
 80127aa:	e011      	b.n	80127d0 <tcp_netif_ip_addr_changed_pcblist+0x48>
    /* PCB bound to current local interface address? */
    if (ip_addr_cmp(&pcb->local_ip, old_addr)
 80127ac:	68fb      	ldr	r3, [r7, #12]
 80127ae:	681a      	ldr	r2, [r3, #0]
 80127b0:	687b      	ldr	r3, [r7, #4]
 80127b2:	681b      	ldr	r3, [r3, #0]
 80127b4:	429a      	cmp	r2, r3
 80127b6:	d108      	bne.n	80127ca <tcp_netif_ip_addr_changed_pcblist+0x42>
        /* connections to link-local addresses must persist (RFC3927 ch. 1.9) */
        && (!IP_IS_V4_VAL(pcb->local_ip) || !ip4_addr_islinklocal(ip_2_ip4(&pcb->local_ip)))
#endif /* LWIP_AUTOIP */
       ) {
      /* this connection must be aborted */
      struct tcp_pcb *next = pcb->next;
 80127b8:	68fb      	ldr	r3, [r7, #12]
 80127ba:	68db      	ldr	r3, [r3, #12]
 80127bc:	60bb      	str	r3, [r7, #8]
      LWIP_DEBUGF(NETIF_DEBUG | LWIP_DBG_STATE, ("netif_set_ipaddr: aborting TCP pcb %p\n", (void *)pcb));
      tcp_abort(pcb);
 80127be:	68f8      	ldr	r0, [r7, #12]
 80127c0:	f7fe ffc2 	bl	8011748 <tcp_abort>
      pcb = next;
 80127c4:	68bb      	ldr	r3, [r7, #8]
 80127c6:	60fb      	str	r3, [r7, #12]
 80127c8:	e002      	b.n	80127d0 <tcp_netif_ip_addr_changed_pcblist+0x48>
    } else {
      pcb = pcb->next;
 80127ca:	68fb      	ldr	r3, [r7, #12]
 80127cc:	68db      	ldr	r3, [r3, #12]
 80127ce:	60fb      	str	r3, [r7, #12]
  while (pcb != NULL) {
 80127d0:	68fb      	ldr	r3, [r7, #12]
 80127d2:	2b00      	cmp	r3, #0
 80127d4:	d1ea      	bne.n	80127ac <tcp_netif_ip_addr_changed_pcblist+0x24>
    }
  }
}
 80127d6:	bf00      	nop
 80127d8:	bf00      	nop
 80127da:	3710      	adds	r7, #16
 80127dc:	46bd      	mov	sp, r7
 80127de:	bd80      	pop	{r7, pc}
 80127e0:	0801ccb4 	.word	0x0801ccb4
 80127e4:	0801d3e8 	.word	0x0801d3e8
 80127e8:	0801ccf8 	.word	0x0801ccf8

080127ec <tcp_netif_ip_addr_changed>:
 * @param old_addr IP address of the netif before change
 * @param new_addr IP address of the netif after change or NULL if netif has been removed
 */
void
tcp_netif_ip_addr_changed(const ip_addr_t *old_addr, const ip_addr_t *new_addr)
{
 80127ec:	b580      	push	{r7, lr}
 80127ee:	b084      	sub	sp, #16
 80127f0:	af00      	add	r7, sp, #0
 80127f2:	6078      	str	r0, [r7, #4]
 80127f4:	6039      	str	r1, [r7, #0]
  struct tcp_pcb_listen *lpcb;

  if (!ip_addr_isany(old_addr)) {
 80127f6:	687b      	ldr	r3, [r7, #4]
 80127f8:	2b00      	cmp	r3, #0
 80127fa:	d02a      	beq.n	8012852 <tcp_netif_ip_addr_changed+0x66>
 80127fc:	687b      	ldr	r3, [r7, #4]
 80127fe:	681b      	ldr	r3, [r3, #0]
 8012800:	2b00      	cmp	r3, #0
 8012802:	d026      	beq.n	8012852 <tcp_netif_ip_addr_changed+0x66>
    tcp_netif_ip_addr_changed_pcblist(old_addr, tcp_active_pcbs);
 8012804:	4b15      	ldr	r3, [pc, #84]	; (801285c <tcp_netif_ip_addr_changed+0x70>)
 8012806:	681b      	ldr	r3, [r3, #0]
 8012808:	4619      	mov	r1, r3
 801280a:	6878      	ldr	r0, [r7, #4]
 801280c:	f7ff ffbc 	bl	8012788 <tcp_netif_ip_addr_changed_pcblist>
    tcp_netif_ip_addr_changed_pcblist(old_addr, tcp_bound_pcbs);
 8012810:	4b13      	ldr	r3, [pc, #76]	; (8012860 <tcp_netif_ip_addr_changed+0x74>)
 8012812:	681b      	ldr	r3, [r3, #0]
 8012814:	4619      	mov	r1, r3
 8012816:	6878      	ldr	r0, [r7, #4]
 8012818:	f7ff ffb6 	bl	8012788 <tcp_netif_ip_addr_changed_pcblist>

    if (!ip_addr_isany(new_addr)) {
 801281c:	683b      	ldr	r3, [r7, #0]
 801281e:	2b00      	cmp	r3, #0
 8012820:	d017      	beq.n	8012852 <tcp_netif_ip_addr_changed+0x66>
 8012822:	683b      	ldr	r3, [r7, #0]
 8012824:	681b      	ldr	r3, [r3, #0]
 8012826:	2b00      	cmp	r3, #0
 8012828:	d013      	beq.n	8012852 <tcp_netif_ip_addr_changed+0x66>
      /* PCB bound to current local interface address? */
      for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = lpcb->next) {
 801282a:	4b0e      	ldr	r3, [pc, #56]	; (8012864 <tcp_netif_ip_addr_changed+0x78>)
 801282c:	681b      	ldr	r3, [r3, #0]
 801282e:	60fb      	str	r3, [r7, #12]
 8012830:	e00c      	b.n	801284c <tcp_netif_ip_addr_changed+0x60>
        /* PCB bound to current local interface address? */
        if (ip_addr_cmp(&lpcb->local_ip, old_addr)) {
 8012832:	68fb      	ldr	r3, [r7, #12]
 8012834:	681a      	ldr	r2, [r3, #0]
 8012836:	687b      	ldr	r3, [r7, #4]
 8012838:	681b      	ldr	r3, [r3, #0]
 801283a:	429a      	cmp	r2, r3
 801283c:	d103      	bne.n	8012846 <tcp_netif_ip_addr_changed+0x5a>
          /* The PCB is listening to the old ipaddr and
            * is set to listen to the new one instead */
          ip_addr_copy(lpcb->local_ip, *new_addr);
 801283e:	683b      	ldr	r3, [r7, #0]
 8012840:	681a      	ldr	r2, [r3, #0]
 8012842:	68fb      	ldr	r3, [r7, #12]
 8012844:	601a      	str	r2, [r3, #0]
      for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = lpcb->next) {
 8012846:	68fb      	ldr	r3, [r7, #12]
 8012848:	68db      	ldr	r3, [r3, #12]
 801284a:	60fb      	str	r3, [r7, #12]
 801284c:	68fb      	ldr	r3, [r7, #12]
 801284e:	2b00      	cmp	r3, #0
 8012850:	d1ef      	bne.n	8012832 <tcp_netif_ip_addr_changed+0x46>
        }
      }
    }
  }
}
 8012852:	bf00      	nop
 8012854:	3710      	adds	r7, #16
 8012856:	46bd      	mov	sp, r7
 8012858:	bd80      	pop	{r7, pc}
 801285a:	bf00      	nop
 801285c:	20007050 	.word	0x20007050
 8012860:	20007048 	.word	0x20007048
 8012864:	2000704c 	.word	0x2000704c

08012868 <tcp_free_ooseq>:

#if TCP_QUEUE_OOSEQ
/* Free all ooseq pbufs (and possibly reset SACK state) */
void
tcp_free_ooseq(struct tcp_pcb *pcb)
{
 8012868:	b580      	push	{r7, lr}
 801286a:	b082      	sub	sp, #8
 801286c:	af00      	add	r7, sp, #0
 801286e:	6078      	str	r0, [r7, #4]
  if (pcb->ooseq) {
 8012870:	687b      	ldr	r3, [r7, #4]
 8012872:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8012874:	2b00      	cmp	r3, #0
 8012876:	d007      	beq.n	8012888 <tcp_free_ooseq+0x20>
    tcp_segs_free(pcb->ooseq);
 8012878:	687b      	ldr	r3, [r7, #4]
 801287a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 801287c:	4618      	mov	r0, r3
 801287e:	f7ff fc3d 	bl	80120fc <tcp_segs_free>
    pcb->ooseq = NULL;
 8012882:	687b      	ldr	r3, [r7, #4]
 8012884:	2200      	movs	r2, #0
 8012886:	675a      	str	r2, [r3, #116]	; 0x74
#if LWIP_TCP_SACK_OUT
    memset(pcb->rcv_sacks, 0, sizeof(pcb->rcv_sacks));
#endif /* LWIP_TCP_SACK_OUT */
  }
}
 8012888:	bf00      	nop
 801288a:	3708      	adds	r7, #8
 801288c:	46bd      	mov	sp, r7
 801288e:	bd80      	pop	{r7, pc}

08012890 <tcp_input>:
 * @param p received TCP segment to process (p->payload pointing to the TCP header)
 * @param inp network interface on which this segment was received
 */
void
tcp_input(struct pbuf *p, struct netif *inp)
{
 8012890:	b590      	push	{r4, r7, lr}
 8012892:	b08d      	sub	sp, #52	; 0x34
 8012894:	af04      	add	r7, sp, #16
 8012896:	6078      	str	r0, [r7, #4]
 8012898:	6039      	str	r1, [r7, #0]
  u8_t hdrlen_bytes;
  err_t err;

  LWIP_UNUSED_ARG(inp);
  LWIP_ASSERT_CORE_LOCKED();
  LWIP_ASSERT("tcp_input: invalid pbuf", p != NULL);
 801289a:	687b      	ldr	r3, [r7, #4]
 801289c:	2b00      	cmp	r3, #0
 801289e:	d105      	bne.n	80128ac <tcp_input+0x1c>
 80128a0:	4b9b      	ldr	r3, [pc, #620]	; (8012b10 <tcp_input+0x280>)
 80128a2:	2283      	movs	r2, #131	; 0x83
 80128a4:	499b      	ldr	r1, [pc, #620]	; (8012b14 <tcp_input+0x284>)
 80128a6:	489c      	ldr	r0, [pc, #624]	; (8012b18 <tcp_input+0x288>)
 80128a8:	f007 f8de 	bl	8019a68 <iprintf>
  PERF_START;

  TCP_STATS_INC(tcp.recv);
  MIB2_STATS_INC(mib2.tcpinsegs);

  tcphdr = (struct tcp_hdr *)p->payload;
 80128ac:	687b      	ldr	r3, [r7, #4]
 80128ae:	685b      	ldr	r3, [r3, #4]
 80128b0:	4a9a      	ldr	r2, [pc, #616]	; (8012b1c <tcp_input+0x28c>)
 80128b2:	6013      	str	r3, [r2, #0]
#if TCP_INPUT_DEBUG
  tcp_debug_print(tcphdr);
#endif

  /* Check that TCP header fits in payload */
  if (p->len < TCP_HLEN) {
 80128b4:	687b      	ldr	r3, [r7, #4]
 80128b6:	895b      	ldrh	r3, [r3, #10]
 80128b8:	2b13      	cmp	r3, #19
 80128ba:	f240 83d1 	bls.w	8013060 <tcp_input+0x7d0>
    TCP_STATS_INC(tcp.lenerr);
    goto dropped;
  }

  /* Don't even process incoming broadcasts/multicasts. */
  if (ip_addr_isbroadcast(ip_current_dest_addr(), ip_current_netif()) ||
 80128be:	4b98      	ldr	r3, [pc, #608]	; (8012b20 <tcp_input+0x290>)
 80128c0:	695b      	ldr	r3, [r3, #20]
 80128c2:	4a97      	ldr	r2, [pc, #604]	; (8012b20 <tcp_input+0x290>)
 80128c4:	6812      	ldr	r2, [r2, #0]
 80128c6:	4611      	mov	r1, r2
 80128c8:	4618      	mov	r0, r3
 80128ca:	f005 fc3d 	bl	8018148 <ip4_addr_isbroadcast_u32>
 80128ce:	4603      	mov	r3, r0
 80128d0:	2b00      	cmp	r3, #0
 80128d2:	f040 83c7 	bne.w	8013064 <tcp_input+0x7d4>
      ip_addr_ismulticast(ip_current_dest_addr())) {
 80128d6:	4b92      	ldr	r3, [pc, #584]	; (8012b20 <tcp_input+0x290>)
 80128d8:	695b      	ldr	r3, [r3, #20]
 80128da:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
  if (ip_addr_isbroadcast(ip_current_dest_addr(), ip_current_netif()) ||
 80128de:	2be0      	cmp	r3, #224	; 0xe0
 80128e0:	f000 83c0 	beq.w	8013064 <tcp_input+0x7d4>
    }
  }
#endif /* CHECKSUM_CHECK_TCP */

  /* sanity-check header length */
  hdrlen_bytes = TCPH_HDRLEN_BYTES(tcphdr);
 80128e4:	4b8d      	ldr	r3, [pc, #564]	; (8012b1c <tcp_input+0x28c>)
 80128e6:	681b      	ldr	r3, [r3, #0]
 80128e8:	899b      	ldrh	r3, [r3, #12]
 80128ea:	b29b      	uxth	r3, r3
 80128ec:	4618      	mov	r0, r3
 80128ee:	f7fc fd9f 	bl	800f430 <lwip_htons>
 80128f2:	4603      	mov	r3, r0
 80128f4:	0b1b      	lsrs	r3, r3, #12
 80128f6:	b29b      	uxth	r3, r3
 80128f8:	b2db      	uxtb	r3, r3
 80128fa:	009b      	lsls	r3, r3, #2
 80128fc:	74bb      	strb	r3, [r7, #18]
  if ((hdrlen_bytes < TCP_HLEN) || (hdrlen_bytes > p->tot_len)) {
 80128fe:	7cbb      	ldrb	r3, [r7, #18]
 8012900:	2b13      	cmp	r3, #19
 8012902:	f240 83b1 	bls.w	8013068 <tcp_input+0x7d8>
 8012906:	7cbb      	ldrb	r3, [r7, #18]
 8012908:	b29a      	uxth	r2, r3
 801290a:	687b      	ldr	r3, [r7, #4]
 801290c:	891b      	ldrh	r3, [r3, #8]
 801290e:	429a      	cmp	r2, r3
 8012910:	f200 83aa 	bhi.w	8013068 <tcp_input+0x7d8>
    goto dropped;
  }

  /* Move the payload pointer in the pbuf so that it points to the
     TCP data instead of the TCP header. */
  tcphdr_optlen = (u16_t)(hdrlen_bytes - TCP_HLEN);
 8012914:	7cbb      	ldrb	r3, [r7, #18]
 8012916:	b29b      	uxth	r3, r3
 8012918:	3b14      	subs	r3, #20
 801291a:	b29a      	uxth	r2, r3
 801291c:	4b81      	ldr	r3, [pc, #516]	; (8012b24 <tcp_input+0x294>)
 801291e:	801a      	strh	r2, [r3, #0]
  tcphdr_opt2 = NULL;
 8012920:	4b81      	ldr	r3, [pc, #516]	; (8012b28 <tcp_input+0x298>)
 8012922:	2200      	movs	r2, #0
 8012924:	601a      	str	r2, [r3, #0]
  if (p->len >= hdrlen_bytes) {
 8012926:	687b      	ldr	r3, [r7, #4]
 8012928:	895a      	ldrh	r2, [r3, #10]
 801292a:	7cbb      	ldrb	r3, [r7, #18]
 801292c:	b29b      	uxth	r3, r3
 801292e:	429a      	cmp	r2, r3
 8012930:	d309      	bcc.n	8012946 <tcp_input+0xb6>
    /* all options are in the first pbuf */
    tcphdr_opt1len = tcphdr_optlen;
 8012932:	4b7c      	ldr	r3, [pc, #496]	; (8012b24 <tcp_input+0x294>)
 8012934:	881a      	ldrh	r2, [r3, #0]
 8012936:	4b7d      	ldr	r3, [pc, #500]	; (8012b2c <tcp_input+0x29c>)
 8012938:	801a      	strh	r2, [r3, #0]
    pbuf_remove_header(p, hdrlen_bytes); /* cannot fail */
 801293a:	7cbb      	ldrb	r3, [r7, #18]
 801293c:	4619      	mov	r1, r3
 801293e:	6878      	ldr	r0, [r7, #4]
 8012940:	f7fe f8f4 	bl	8010b2c <pbuf_remove_header>
 8012944:	e04e      	b.n	80129e4 <tcp_input+0x154>
  } else {
    u16_t opt2len;
    /* TCP header fits into first pbuf, options don't - data is in the next pbuf */
    /* there must be a next pbuf, due to hdrlen_bytes sanity check above */
    LWIP_ASSERT("p->next != NULL", p->next != NULL);
 8012946:	687b      	ldr	r3, [r7, #4]
 8012948:	681b      	ldr	r3, [r3, #0]
 801294a:	2b00      	cmp	r3, #0
 801294c:	d105      	bne.n	801295a <tcp_input+0xca>
 801294e:	4b70      	ldr	r3, [pc, #448]	; (8012b10 <tcp_input+0x280>)
 8012950:	22c2      	movs	r2, #194	; 0xc2
 8012952:	4977      	ldr	r1, [pc, #476]	; (8012b30 <tcp_input+0x2a0>)
 8012954:	4870      	ldr	r0, [pc, #448]	; (8012b18 <tcp_input+0x288>)
 8012956:	f007 f887 	bl	8019a68 <iprintf>

    /* advance over the TCP header (cannot fail) */
    pbuf_remove_header(p, TCP_HLEN);
 801295a:	2114      	movs	r1, #20
 801295c:	6878      	ldr	r0, [r7, #4]
 801295e:	f7fe f8e5 	bl	8010b2c <pbuf_remove_header>

    /* determine how long the first and second parts of the options are */
    tcphdr_opt1len = p->len;
 8012962:	687b      	ldr	r3, [r7, #4]
 8012964:	895a      	ldrh	r2, [r3, #10]
 8012966:	4b71      	ldr	r3, [pc, #452]	; (8012b2c <tcp_input+0x29c>)
 8012968:	801a      	strh	r2, [r3, #0]
    opt2len = (u16_t)(tcphdr_optlen - tcphdr_opt1len);
 801296a:	4b6e      	ldr	r3, [pc, #440]	; (8012b24 <tcp_input+0x294>)
 801296c:	881a      	ldrh	r2, [r3, #0]
 801296e:	4b6f      	ldr	r3, [pc, #444]	; (8012b2c <tcp_input+0x29c>)
 8012970:	881b      	ldrh	r3, [r3, #0]
 8012972:	1ad3      	subs	r3, r2, r3
 8012974:	823b      	strh	r3, [r7, #16]

    /* options continue in the next pbuf: set p to zero length and hide the
        options in the next pbuf (adjusting p->tot_len) */
    pbuf_remove_header(p, tcphdr_opt1len);
 8012976:	4b6d      	ldr	r3, [pc, #436]	; (8012b2c <tcp_input+0x29c>)
 8012978:	881b      	ldrh	r3, [r3, #0]
 801297a:	4619      	mov	r1, r3
 801297c:	6878      	ldr	r0, [r7, #4]
 801297e:	f7fe f8d5 	bl	8010b2c <pbuf_remove_header>

    /* check that the options fit in the second pbuf */
    if (opt2len > p->next->len) {
 8012982:	687b      	ldr	r3, [r7, #4]
 8012984:	681b      	ldr	r3, [r3, #0]
 8012986:	895b      	ldrh	r3, [r3, #10]
 8012988:	8a3a      	ldrh	r2, [r7, #16]
 801298a:	429a      	cmp	r2, r3
 801298c:	f200 836e 	bhi.w	801306c <tcp_input+0x7dc>
      TCP_STATS_INC(tcp.lenerr);
      goto dropped;
    }

    /* remember the pointer to the second part of the options */
    tcphdr_opt2 = (u8_t *)p->next->payload;
 8012990:	687b      	ldr	r3, [r7, #4]
 8012992:	681b      	ldr	r3, [r3, #0]
 8012994:	685b      	ldr	r3, [r3, #4]
 8012996:	4a64      	ldr	r2, [pc, #400]	; (8012b28 <tcp_input+0x298>)
 8012998:	6013      	str	r3, [r2, #0]

    /* advance p->next to point after the options, and manually
        adjust p->tot_len to keep it consistent with the changed p->next */
    pbuf_remove_header(p->next, opt2len);
 801299a:	687b      	ldr	r3, [r7, #4]
 801299c:	681b      	ldr	r3, [r3, #0]
 801299e:	8a3a      	ldrh	r2, [r7, #16]
 80129a0:	4611      	mov	r1, r2
 80129a2:	4618      	mov	r0, r3
 80129a4:	f7fe f8c2 	bl	8010b2c <pbuf_remove_header>
    p->tot_len = (u16_t)(p->tot_len - opt2len);
 80129a8:	687b      	ldr	r3, [r7, #4]
 80129aa:	891a      	ldrh	r2, [r3, #8]
 80129ac:	8a3b      	ldrh	r3, [r7, #16]
 80129ae:	1ad3      	subs	r3, r2, r3
 80129b0:	b29a      	uxth	r2, r3
 80129b2:	687b      	ldr	r3, [r7, #4]
 80129b4:	811a      	strh	r2, [r3, #8]

    LWIP_ASSERT("p->len == 0", p->len == 0);
 80129b6:	687b      	ldr	r3, [r7, #4]
 80129b8:	895b      	ldrh	r3, [r3, #10]
 80129ba:	2b00      	cmp	r3, #0
 80129bc:	d005      	beq.n	80129ca <tcp_input+0x13a>
 80129be:	4b54      	ldr	r3, [pc, #336]	; (8012b10 <tcp_input+0x280>)
 80129c0:	22df      	movs	r2, #223	; 0xdf
 80129c2:	495c      	ldr	r1, [pc, #368]	; (8012b34 <tcp_input+0x2a4>)
 80129c4:	4854      	ldr	r0, [pc, #336]	; (8012b18 <tcp_input+0x288>)
 80129c6:	f007 f84f 	bl	8019a68 <iprintf>
    LWIP_ASSERT("p->tot_len == p->next->tot_len", p->tot_len == p->next->tot_len);
 80129ca:	687b      	ldr	r3, [r7, #4]
 80129cc:	891a      	ldrh	r2, [r3, #8]
 80129ce:	687b      	ldr	r3, [r7, #4]
 80129d0:	681b      	ldr	r3, [r3, #0]
 80129d2:	891b      	ldrh	r3, [r3, #8]
 80129d4:	429a      	cmp	r2, r3
 80129d6:	d005      	beq.n	80129e4 <tcp_input+0x154>
 80129d8:	4b4d      	ldr	r3, [pc, #308]	; (8012b10 <tcp_input+0x280>)
 80129da:	22e0      	movs	r2, #224	; 0xe0
 80129dc:	4956      	ldr	r1, [pc, #344]	; (8012b38 <tcp_input+0x2a8>)
 80129de:	484e      	ldr	r0, [pc, #312]	; (8012b18 <tcp_input+0x288>)
 80129e0:	f007 f842 	bl	8019a68 <iprintf>
  }

  /* Convert fields in TCP header to host byte order. */
  tcphdr->src = lwip_ntohs(tcphdr->src);
 80129e4:	4b4d      	ldr	r3, [pc, #308]	; (8012b1c <tcp_input+0x28c>)
 80129e6:	681b      	ldr	r3, [r3, #0]
 80129e8:	881b      	ldrh	r3, [r3, #0]
 80129ea:	b29b      	uxth	r3, r3
 80129ec:	4a4b      	ldr	r2, [pc, #300]	; (8012b1c <tcp_input+0x28c>)
 80129ee:	6814      	ldr	r4, [r2, #0]
 80129f0:	4618      	mov	r0, r3
 80129f2:	f7fc fd1d 	bl	800f430 <lwip_htons>
 80129f6:	4603      	mov	r3, r0
 80129f8:	8023      	strh	r3, [r4, #0]
  tcphdr->dest = lwip_ntohs(tcphdr->dest);
 80129fa:	4b48      	ldr	r3, [pc, #288]	; (8012b1c <tcp_input+0x28c>)
 80129fc:	681b      	ldr	r3, [r3, #0]
 80129fe:	885b      	ldrh	r3, [r3, #2]
 8012a00:	b29b      	uxth	r3, r3
 8012a02:	4a46      	ldr	r2, [pc, #280]	; (8012b1c <tcp_input+0x28c>)
 8012a04:	6814      	ldr	r4, [r2, #0]
 8012a06:	4618      	mov	r0, r3
 8012a08:	f7fc fd12 	bl	800f430 <lwip_htons>
 8012a0c:	4603      	mov	r3, r0
 8012a0e:	8063      	strh	r3, [r4, #2]
  seqno = tcphdr->seqno = lwip_ntohl(tcphdr->seqno);
 8012a10:	4b42      	ldr	r3, [pc, #264]	; (8012b1c <tcp_input+0x28c>)
 8012a12:	681b      	ldr	r3, [r3, #0]
 8012a14:	685b      	ldr	r3, [r3, #4]
 8012a16:	4a41      	ldr	r2, [pc, #260]	; (8012b1c <tcp_input+0x28c>)
 8012a18:	6814      	ldr	r4, [r2, #0]
 8012a1a:	4618      	mov	r0, r3
 8012a1c:	f7fc fd1d 	bl	800f45a <lwip_htonl>
 8012a20:	4603      	mov	r3, r0
 8012a22:	6063      	str	r3, [r4, #4]
 8012a24:	6863      	ldr	r3, [r4, #4]
 8012a26:	4a45      	ldr	r2, [pc, #276]	; (8012b3c <tcp_input+0x2ac>)
 8012a28:	6013      	str	r3, [r2, #0]
  ackno = tcphdr->ackno = lwip_ntohl(tcphdr->ackno);
 8012a2a:	4b3c      	ldr	r3, [pc, #240]	; (8012b1c <tcp_input+0x28c>)
 8012a2c:	681b      	ldr	r3, [r3, #0]
 8012a2e:	689b      	ldr	r3, [r3, #8]
 8012a30:	4a3a      	ldr	r2, [pc, #232]	; (8012b1c <tcp_input+0x28c>)
 8012a32:	6814      	ldr	r4, [r2, #0]
 8012a34:	4618      	mov	r0, r3
 8012a36:	f7fc fd10 	bl	800f45a <lwip_htonl>
 8012a3a:	4603      	mov	r3, r0
 8012a3c:	60a3      	str	r3, [r4, #8]
 8012a3e:	68a3      	ldr	r3, [r4, #8]
 8012a40:	4a3f      	ldr	r2, [pc, #252]	; (8012b40 <tcp_input+0x2b0>)
 8012a42:	6013      	str	r3, [r2, #0]
  tcphdr->wnd = lwip_ntohs(tcphdr->wnd);
 8012a44:	4b35      	ldr	r3, [pc, #212]	; (8012b1c <tcp_input+0x28c>)
 8012a46:	681b      	ldr	r3, [r3, #0]
 8012a48:	89db      	ldrh	r3, [r3, #14]
 8012a4a:	b29b      	uxth	r3, r3
 8012a4c:	4a33      	ldr	r2, [pc, #204]	; (8012b1c <tcp_input+0x28c>)
 8012a4e:	6814      	ldr	r4, [r2, #0]
 8012a50:	4618      	mov	r0, r3
 8012a52:	f7fc fced 	bl	800f430 <lwip_htons>
 8012a56:	4603      	mov	r3, r0
 8012a58:	81e3      	strh	r3, [r4, #14]

  flags = TCPH_FLAGS(tcphdr);
 8012a5a:	4b30      	ldr	r3, [pc, #192]	; (8012b1c <tcp_input+0x28c>)
 8012a5c:	681b      	ldr	r3, [r3, #0]
 8012a5e:	899b      	ldrh	r3, [r3, #12]
 8012a60:	b29b      	uxth	r3, r3
 8012a62:	4618      	mov	r0, r3
 8012a64:	f7fc fce4 	bl	800f430 <lwip_htons>
 8012a68:	4603      	mov	r3, r0
 8012a6a:	b2db      	uxtb	r3, r3
 8012a6c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8012a70:	b2da      	uxtb	r2, r3
 8012a72:	4b34      	ldr	r3, [pc, #208]	; (8012b44 <tcp_input+0x2b4>)
 8012a74:	701a      	strb	r2, [r3, #0]
  tcplen = p->tot_len;
 8012a76:	687b      	ldr	r3, [r7, #4]
 8012a78:	891a      	ldrh	r2, [r3, #8]
 8012a7a:	4b33      	ldr	r3, [pc, #204]	; (8012b48 <tcp_input+0x2b8>)
 8012a7c:	801a      	strh	r2, [r3, #0]
  if (flags & (TCP_FIN | TCP_SYN)) {
 8012a7e:	4b31      	ldr	r3, [pc, #196]	; (8012b44 <tcp_input+0x2b4>)
 8012a80:	781b      	ldrb	r3, [r3, #0]
 8012a82:	f003 0303 	and.w	r3, r3, #3
 8012a86:	2b00      	cmp	r3, #0
 8012a88:	d00c      	beq.n	8012aa4 <tcp_input+0x214>
    tcplen++;
 8012a8a:	4b2f      	ldr	r3, [pc, #188]	; (8012b48 <tcp_input+0x2b8>)
 8012a8c:	881b      	ldrh	r3, [r3, #0]
 8012a8e:	3301      	adds	r3, #1
 8012a90:	b29a      	uxth	r2, r3
 8012a92:	4b2d      	ldr	r3, [pc, #180]	; (8012b48 <tcp_input+0x2b8>)
 8012a94:	801a      	strh	r2, [r3, #0]
    if (tcplen < p->tot_len) {
 8012a96:	687b      	ldr	r3, [r7, #4]
 8012a98:	891a      	ldrh	r2, [r3, #8]
 8012a9a:	4b2b      	ldr	r3, [pc, #172]	; (8012b48 <tcp_input+0x2b8>)
 8012a9c:	881b      	ldrh	r3, [r3, #0]
 8012a9e:	429a      	cmp	r2, r3
 8012aa0:	f200 82e6 	bhi.w	8013070 <tcp_input+0x7e0>
    }
  }

  /* Demultiplex an incoming segment. First, we check if it is destined
     for an active connection. */
  prev = NULL;
 8012aa4:	2300      	movs	r3, #0
 8012aa6:	61bb      	str	r3, [r7, #24]

  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 8012aa8:	4b28      	ldr	r3, [pc, #160]	; (8012b4c <tcp_input+0x2bc>)
 8012aaa:	681b      	ldr	r3, [r3, #0]
 8012aac:	61fb      	str	r3, [r7, #28]
 8012aae:	e09d      	b.n	8012bec <tcp_input+0x35c>
    LWIP_ASSERT("tcp_input: active pcb->state != CLOSED", pcb->state != CLOSED);
 8012ab0:	69fb      	ldr	r3, [r7, #28]
 8012ab2:	7d1b      	ldrb	r3, [r3, #20]
 8012ab4:	2b00      	cmp	r3, #0
 8012ab6:	d105      	bne.n	8012ac4 <tcp_input+0x234>
 8012ab8:	4b15      	ldr	r3, [pc, #84]	; (8012b10 <tcp_input+0x280>)
 8012aba:	22fb      	movs	r2, #251	; 0xfb
 8012abc:	4924      	ldr	r1, [pc, #144]	; (8012b50 <tcp_input+0x2c0>)
 8012abe:	4816      	ldr	r0, [pc, #88]	; (8012b18 <tcp_input+0x288>)
 8012ac0:	f006 ffd2 	bl	8019a68 <iprintf>
    LWIP_ASSERT("tcp_input: active pcb->state != TIME-WAIT", pcb->state != TIME_WAIT);
 8012ac4:	69fb      	ldr	r3, [r7, #28]
 8012ac6:	7d1b      	ldrb	r3, [r3, #20]
 8012ac8:	2b0a      	cmp	r3, #10
 8012aca:	d105      	bne.n	8012ad8 <tcp_input+0x248>
 8012acc:	4b10      	ldr	r3, [pc, #64]	; (8012b10 <tcp_input+0x280>)
 8012ace:	22fc      	movs	r2, #252	; 0xfc
 8012ad0:	4920      	ldr	r1, [pc, #128]	; (8012b54 <tcp_input+0x2c4>)
 8012ad2:	4811      	ldr	r0, [pc, #68]	; (8012b18 <tcp_input+0x288>)
 8012ad4:	f006 ffc8 	bl	8019a68 <iprintf>
    LWIP_ASSERT("tcp_input: active pcb->state != LISTEN", pcb->state != LISTEN);
 8012ad8:	69fb      	ldr	r3, [r7, #28]
 8012ada:	7d1b      	ldrb	r3, [r3, #20]
 8012adc:	2b01      	cmp	r3, #1
 8012ade:	d105      	bne.n	8012aec <tcp_input+0x25c>
 8012ae0:	4b0b      	ldr	r3, [pc, #44]	; (8012b10 <tcp_input+0x280>)
 8012ae2:	22fd      	movs	r2, #253	; 0xfd
 8012ae4:	491c      	ldr	r1, [pc, #112]	; (8012b58 <tcp_input+0x2c8>)
 8012ae6:	480c      	ldr	r0, [pc, #48]	; (8012b18 <tcp_input+0x288>)
 8012ae8:	f006 ffbe 	bl	8019a68 <iprintf>

    /* check if PCB is bound to specific netif */
    if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 8012aec:	69fb      	ldr	r3, [r7, #28]
 8012aee:	7a1b      	ldrb	r3, [r3, #8]
 8012af0:	2b00      	cmp	r3, #0
 8012af2:	d033      	beq.n	8012b5c <tcp_input+0x2cc>
        (pcb->netif_idx != netif_get_index(ip_data.current_input_netif))) {
 8012af4:	69fb      	ldr	r3, [r7, #28]
 8012af6:	7a1a      	ldrb	r2, [r3, #8]
 8012af8:	4b09      	ldr	r3, [pc, #36]	; (8012b20 <tcp_input+0x290>)
 8012afa:	685b      	ldr	r3, [r3, #4]
 8012afc:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8012b00:	3301      	adds	r3, #1
 8012b02:	b2db      	uxtb	r3, r3
    if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 8012b04:	429a      	cmp	r2, r3
 8012b06:	d029      	beq.n	8012b5c <tcp_input+0x2cc>
      prev = pcb;
 8012b08:	69fb      	ldr	r3, [r7, #28]
 8012b0a:	61bb      	str	r3, [r7, #24]
      continue;
 8012b0c:	e06b      	b.n	8012be6 <tcp_input+0x356>
 8012b0e:	bf00      	nop
 8012b10:	0801d41c 	.word	0x0801d41c
 8012b14:	0801d450 	.word	0x0801d450
 8012b18:	0801d468 	.word	0x0801d468
 8012b1c:	2000706c 	.word	0x2000706c
 8012b20:	20000768 	.word	0x20000768
 8012b24:	20007070 	.word	0x20007070
 8012b28:	20007074 	.word	0x20007074
 8012b2c:	20007072 	.word	0x20007072
 8012b30:	0801d490 	.word	0x0801d490
 8012b34:	0801d4a0 	.word	0x0801d4a0
 8012b38:	0801d4ac 	.word	0x0801d4ac
 8012b3c:	2000707c 	.word	0x2000707c
 8012b40:	20007080 	.word	0x20007080
 8012b44:	20007088 	.word	0x20007088
 8012b48:	20007086 	.word	0x20007086
 8012b4c:	20007050 	.word	0x20007050
 8012b50:	0801d4cc 	.word	0x0801d4cc
 8012b54:	0801d4f4 	.word	0x0801d4f4
 8012b58:	0801d520 	.word	0x0801d520
    }

    if (pcb->remote_port == tcphdr->src &&
 8012b5c:	69fb      	ldr	r3, [r7, #28]
 8012b5e:	8b1a      	ldrh	r2, [r3, #24]
 8012b60:	4b72      	ldr	r3, [pc, #456]	; (8012d2c <tcp_input+0x49c>)
 8012b62:	681b      	ldr	r3, [r3, #0]
 8012b64:	881b      	ldrh	r3, [r3, #0]
 8012b66:	b29b      	uxth	r3, r3
 8012b68:	429a      	cmp	r2, r3
 8012b6a:	d13a      	bne.n	8012be2 <tcp_input+0x352>
        pcb->local_port == tcphdr->dest &&
 8012b6c:	69fb      	ldr	r3, [r7, #28]
 8012b6e:	8ada      	ldrh	r2, [r3, #22]
 8012b70:	4b6e      	ldr	r3, [pc, #440]	; (8012d2c <tcp_input+0x49c>)
 8012b72:	681b      	ldr	r3, [r3, #0]
 8012b74:	885b      	ldrh	r3, [r3, #2]
 8012b76:	b29b      	uxth	r3, r3
    if (pcb->remote_port == tcphdr->src &&
 8012b78:	429a      	cmp	r2, r3
 8012b7a:	d132      	bne.n	8012be2 <tcp_input+0x352>
        ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()) &&
 8012b7c:	69fb      	ldr	r3, [r7, #28]
 8012b7e:	685a      	ldr	r2, [r3, #4]
 8012b80:	4b6b      	ldr	r3, [pc, #428]	; (8012d30 <tcp_input+0x4a0>)
 8012b82:	691b      	ldr	r3, [r3, #16]
        pcb->local_port == tcphdr->dest &&
 8012b84:	429a      	cmp	r2, r3
 8012b86:	d12c      	bne.n	8012be2 <tcp_input+0x352>
        ip_addr_cmp(&pcb->local_ip, ip_current_dest_addr())) {
 8012b88:	69fb      	ldr	r3, [r7, #28]
 8012b8a:	681a      	ldr	r2, [r3, #0]
 8012b8c:	4b68      	ldr	r3, [pc, #416]	; (8012d30 <tcp_input+0x4a0>)
 8012b8e:	695b      	ldr	r3, [r3, #20]
        ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()) &&
 8012b90:	429a      	cmp	r2, r3
 8012b92:	d126      	bne.n	8012be2 <tcp_input+0x352>
      /* Move this PCB to the front of the list so that subsequent
         lookups will be faster (we exploit locality in TCP segment
         arrivals). */
      LWIP_ASSERT("tcp_input: pcb->next != pcb (before cache)", pcb->next != pcb);
 8012b94:	69fb      	ldr	r3, [r7, #28]
 8012b96:	68db      	ldr	r3, [r3, #12]
 8012b98:	69fa      	ldr	r2, [r7, #28]
 8012b9a:	429a      	cmp	r2, r3
 8012b9c:	d106      	bne.n	8012bac <tcp_input+0x31c>
 8012b9e:	4b65      	ldr	r3, [pc, #404]	; (8012d34 <tcp_input+0x4a4>)
 8012ba0:	f240 120d 	movw	r2, #269	; 0x10d
 8012ba4:	4964      	ldr	r1, [pc, #400]	; (8012d38 <tcp_input+0x4a8>)
 8012ba6:	4865      	ldr	r0, [pc, #404]	; (8012d3c <tcp_input+0x4ac>)
 8012ba8:	f006 ff5e 	bl	8019a68 <iprintf>
      if (prev != NULL) {
 8012bac:	69bb      	ldr	r3, [r7, #24]
 8012bae:	2b00      	cmp	r3, #0
 8012bb0:	d00a      	beq.n	8012bc8 <tcp_input+0x338>
        prev->next = pcb->next;
 8012bb2:	69fb      	ldr	r3, [r7, #28]
 8012bb4:	68da      	ldr	r2, [r3, #12]
 8012bb6:	69bb      	ldr	r3, [r7, #24]
 8012bb8:	60da      	str	r2, [r3, #12]
        pcb->next = tcp_active_pcbs;
 8012bba:	4b61      	ldr	r3, [pc, #388]	; (8012d40 <tcp_input+0x4b0>)
 8012bbc:	681a      	ldr	r2, [r3, #0]
 8012bbe:	69fb      	ldr	r3, [r7, #28]
 8012bc0:	60da      	str	r2, [r3, #12]
        tcp_active_pcbs = pcb;
 8012bc2:	4a5f      	ldr	r2, [pc, #380]	; (8012d40 <tcp_input+0x4b0>)
 8012bc4:	69fb      	ldr	r3, [r7, #28]
 8012bc6:	6013      	str	r3, [r2, #0]
      } else {
        TCP_STATS_INC(tcp.cachehit);
      }
      LWIP_ASSERT("tcp_input: pcb->next != pcb (after cache)", pcb->next != pcb);
 8012bc8:	69fb      	ldr	r3, [r7, #28]
 8012bca:	68db      	ldr	r3, [r3, #12]
 8012bcc:	69fa      	ldr	r2, [r7, #28]
 8012bce:	429a      	cmp	r2, r3
 8012bd0:	d111      	bne.n	8012bf6 <tcp_input+0x366>
 8012bd2:	4b58      	ldr	r3, [pc, #352]	; (8012d34 <tcp_input+0x4a4>)
 8012bd4:	f240 1215 	movw	r2, #277	; 0x115
 8012bd8:	495a      	ldr	r1, [pc, #360]	; (8012d44 <tcp_input+0x4b4>)
 8012bda:	4858      	ldr	r0, [pc, #352]	; (8012d3c <tcp_input+0x4ac>)
 8012bdc:	f006 ff44 	bl	8019a68 <iprintf>
      break;
 8012be0:	e009      	b.n	8012bf6 <tcp_input+0x366>
    }
    prev = pcb;
 8012be2:	69fb      	ldr	r3, [r7, #28]
 8012be4:	61bb      	str	r3, [r7, #24]
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 8012be6:	69fb      	ldr	r3, [r7, #28]
 8012be8:	68db      	ldr	r3, [r3, #12]
 8012bea:	61fb      	str	r3, [r7, #28]
 8012bec:	69fb      	ldr	r3, [r7, #28]
 8012bee:	2b00      	cmp	r3, #0
 8012bf0:	f47f af5e 	bne.w	8012ab0 <tcp_input+0x220>
 8012bf4:	e000      	b.n	8012bf8 <tcp_input+0x368>
      break;
 8012bf6:	bf00      	nop
  }

  if (pcb == NULL) {
 8012bf8:	69fb      	ldr	r3, [r7, #28]
 8012bfa:	2b00      	cmp	r3, #0
 8012bfc:	f040 80aa 	bne.w	8012d54 <tcp_input+0x4c4>
    /* If it did not go to an active connection, we check the connections
       in the TIME-WAIT state. */
    for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 8012c00:	4b51      	ldr	r3, [pc, #324]	; (8012d48 <tcp_input+0x4b8>)
 8012c02:	681b      	ldr	r3, [r3, #0]
 8012c04:	61fb      	str	r3, [r7, #28]
 8012c06:	e03f      	b.n	8012c88 <tcp_input+0x3f8>
      LWIP_ASSERT("tcp_input: TIME-WAIT pcb->state == TIME-WAIT", pcb->state == TIME_WAIT);
 8012c08:	69fb      	ldr	r3, [r7, #28]
 8012c0a:	7d1b      	ldrb	r3, [r3, #20]
 8012c0c:	2b0a      	cmp	r3, #10
 8012c0e:	d006      	beq.n	8012c1e <tcp_input+0x38e>
 8012c10:	4b48      	ldr	r3, [pc, #288]	; (8012d34 <tcp_input+0x4a4>)
 8012c12:	f240 121f 	movw	r2, #287	; 0x11f
 8012c16:	494d      	ldr	r1, [pc, #308]	; (8012d4c <tcp_input+0x4bc>)
 8012c18:	4848      	ldr	r0, [pc, #288]	; (8012d3c <tcp_input+0x4ac>)
 8012c1a:	f006 ff25 	bl	8019a68 <iprintf>

      /* check if PCB is bound to specific netif */
      if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 8012c1e:	69fb      	ldr	r3, [r7, #28]
 8012c20:	7a1b      	ldrb	r3, [r3, #8]
 8012c22:	2b00      	cmp	r3, #0
 8012c24:	d009      	beq.n	8012c3a <tcp_input+0x3aa>
          (pcb->netif_idx != netif_get_index(ip_data.current_input_netif))) {
 8012c26:	69fb      	ldr	r3, [r7, #28]
 8012c28:	7a1a      	ldrb	r2, [r3, #8]
 8012c2a:	4b41      	ldr	r3, [pc, #260]	; (8012d30 <tcp_input+0x4a0>)
 8012c2c:	685b      	ldr	r3, [r3, #4]
 8012c2e:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8012c32:	3301      	adds	r3, #1
 8012c34:	b2db      	uxtb	r3, r3
      if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 8012c36:	429a      	cmp	r2, r3
 8012c38:	d122      	bne.n	8012c80 <tcp_input+0x3f0>
        continue;
      }

      if (pcb->remote_port == tcphdr->src &&
 8012c3a:	69fb      	ldr	r3, [r7, #28]
 8012c3c:	8b1a      	ldrh	r2, [r3, #24]
 8012c3e:	4b3b      	ldr	r3, [pc, #236]	; (8012d2c <tcp_input+0x49c>)
 8012c40:	681b      	ldr	r3, [r3, #0]
 8012c42:	881b      	ldrh	r3, [r3, #0]
 8012c44:	b29b      	uxth	r3, r3
 8012c46:	429a      	cmp	r2, r3
 8012c48:	d11b      	bne.n	8012c82 <tcp_input+0x3f2>
          pcb->local_port == tcphdr->dest &&
 8012c4a:	69fb      	ldr	r3, [r7, #28]
 8012c4c:	8ada      	ldrh	r2, [r3, #22]
 8012c4e:	4b37      	ldr	r3, [pc, #220]	; (8012d2c <tcp_input+0x49c>)
 8012c50:	681b      	ldr	r3, [r3, #0]
 8012c52:	885b      	ldrh	r3, [r3, #2]
 8012c54:	b29b      	uxth	r3, r3
      if (pcb->remote_port == tcphdr->src &&
 8012c56:	429a      	cmp	r2, r3
 8012c58:	d113      	bne.n	8012c82 <tcp_input+0x3f2>
          ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()) &&
 8012c5a:	69fb      	ldr	r3, [r7, #28]
 8012c5c:	685a      	ldr	r2, [r3, #4]
 8012c5e:	4b34      	ldr	r3, [pc, #208]	; (8012d30 <tcp_input+0x4a0>)
 8012c60:	691b      	ldr	r3, [r3, #16]
          pcb->local_port == tcphdr->dest &&
 8012c62:	429a      	cmp	r2, r3
 8012c64:	d10d      	bne.n	8012c82 <tcp_input+0x3f2>
          ip_addr_cmp(&pcb->local_ip, ip_current_dest_addr())) {
 8012c66:	69fb      	ldr	r3, [r7, #28]
 8012c68:	681a      	ldr	r2, [r3, #0]
 8012c6a:	4b31      	ldr	r3, [pc, #196]	; (8012d30 <tcp_input+0x4a0>)
 8012c6c:	695b      	ldr	r3, [r3, #20]
          ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()) &&
 8012c6e:	429a      	cmp	r2, r3
 8012c70:	d107      	bne.n	8012c82 <tcp_input+0x3f2>
#ifdef LWIP_HOOK_TCP_INPACKET_PCB
        if (LWIP_HOOK_TCP_INPACKET_PCB(pcb, tcphdr, tcphdr_optlen, tcphdr_opt1len,
                                       tcphdr_opt2, p) == ERR_OK)
#endif
        {
          tcp_timewait_input(pcb);
 8012c72:	69f8      	ldr	r0, [r7, #28]
 8012c74:	f000 fb56 	bl	8013324 <tcp_timewait_input>
        }
        pbuf_free(p);
 8012c78:	6878      	ldr	r0, [r7, #4]
 8012c7a:	f7fd ffdd 	bl	8010c38 <pbuf_free>
        return;
 8012c7e:	e1fd      	b.n	801307c <tcp_input+0x7ec>
        continue;
 8012c80:	bf00      	nop
    for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 8012c82:	69fb      	ldr	r3, [r7, #28]
 8012c84:	68db      	ldr	r3, [r3, #12]
 8012c86:	61fb      	str	r3, [r7, #28]
 8012c88:	69fb      	ldr	r3, [r7, #28]
 8012c8a:	2b00      	cmp	r3, #0
 8012c8c:	d1bc      	bne.n	8012c08 <tcp_input+0x378>
      }
    }

    /* Finally, if we still did not get a match, we check all PCBs that
       are LISTENing for incoming connections. */
    prev = NULL;
 8012c8e:	2300      	movs	r3, #0
 8012c90:	61bb      	str	r3, [r7, #24]
    for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = lpcb->next) {
 8012c92:	4b2f      	ldr	r3, [pc, #188]	; (8012d50 <tcp_input+0x4c0>)
 8012c94:	681b      	ldr	r3, [r3, #0]
 8012c96:	617b      	str	r3, [r7, #20]
 8012c98:	e02a      	b.n	8012cf0 <tcp_input+0x460>
      /* check if PCB is bound to specific netif */
      if ((lpcb->netif_idx != NETIF_NO_INDEX) &&
 8012c9a:	697b      	ldr	r3, [r7, #20]
 8012c9c:	7a1b      	ldrb	r3, [r3, #8]
 8012c9e:	2b00      	cmp	r3, #0
 8012ca0:	d00c      	beq.n	8012cbc <tcp_input+0x42c>
          (lpcb->netif_idx != netif_get_index(ip_data.current_input_netif))) {
 8012ca2:	697b      	ldr	r3, [r7, #20]
 8012ca4:	7a1a      	ldrb	r2, [r3, #8]
 8012ca6:	4b22      	ldr	r3, [pc, #136]	; (8012d30 <tcp_input+0x4a0>)
 8012ca8:	685b      	ldr	r3, [r3, #4]
 8012caa:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8012cae:	3301      	adds	r3, #1
 8012cb0:	b2db      	uxtb	r3, r3
      if ((lpcb->netif_idx != NETIF_NO_INDEX) &&
 8012cb2:	429a      	cmp	r2, r3
 8012cb4:	d002      	beq.n	8012cbc <tcp_input+0x42c>
        prev = (struct tcp_pcb *)lpcb;
 8012cb6:	697b      	ldr	r3, [r7, #20]
 8012cb8:	61bb      	str	r3, [r7, #24]
        continue;
 8012cba:	e016      	b.n	8012cea <tcp_input+0x45a>
      }

      if (lpcb->local_port == tcphdr->dest) {
 8012cbc:	697b      	ldr	r3, [r7, #20]
 8012cbe:	8ada      	ldrh	r2, [r3, #22]
 8012cc0:	4b1a      	ldr	r3, [pc, #104]	; (8012d2c <tcp_input+0x49c>)
 8012cc2:	681b      	ldr	r3, [r3, #0]
 8012cc4:	885b      	ldrh	r3, [r3, #2]
 8012cc6:	b29b      	uxth	r3, r3
 8012cc8:	429a      	cmp	r2, r3
 8012cca:	d10c      	bne.n	8012ce6 <tcp_input+0x456>
          lpcb_prev = prev;
#else /* SO_REUSE */
          break;
#endif /* SO_REUSE */
        } else if (IP_ADDR_PCB_VERSION_MATCH_EXACT(lpcb, ip_current_dest_addr())) {
          if (ip_addr_cmp(&lpcb->local_ip, ip_current_dest_addr())) {
 8012ccc:	697b      	ldr	r3, [r7, #20]
 8012cce:	681a      	ldr	r2, [r3, #0]
 8012cd0:	4b17      	ldr	r3, [pc, #92]	; (8012d30 <tcp_input+0x4a0>)
 8012cd2:	695b      	ldr	r3, [r3, #20]
 8012cd4:	429a      	cmp	r2, r3
 8012cd6:	d00f      	beq.n	8012cf8 <tcp_input+0x468>
            /* found an exact match */
            break;
          } else if (ip_addr_isany(&lpcb->local_ip)) {
 8012cd8:	697b      	ldr	r3, [r7, #20]
 8012cda:	2b00      	cmp	r3, #0
 8012cdc:	d00d      	beq.n	8012cfa <tcp_input+0x46a>
 8012cde:	697b      	ldr	r3, [r7, #20]
 8012ce0:	681b      	ldr	r3, [r3, #0]
 8012ce2:	2b00      	cmp	r3, #0
 8012ce4:	d009      	beq.n	8012cfa <tcp_input+0x46a>
            break;
#endif /* SO_REUSE */
          }
        }
      }
      prev = (struct tcp_pcb *)lpcb;
 8012ce6:	697b      	ldr	r3, [r7, #20]
 8012ce8:	61bb      	str	r3, [r7, #24]
    for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = lpcb->next) {
 8012cea:	697b      	ldr	r3, [r7, #20]
 8012cec:	68db      	ldr	r3, [r3, #12]
 8012cee:	617b      	str	r3, [r7, #20]
 8012cf0:	697b      	ldr	r3, [r7, #20]
 8012cf2:	2b00      	cmp	r3, #0
 8012cf4:	d1d1      	bne.n	8012c9a <tcp_input+0x40a>
 8012cf6:	e000      	b.n	8012cfa <tcp_input+0x46a>
            break;
 8012cf8:	bf00      	nop
      /* only pass to ANY if no specific local IP has been found */
      lpcb = lpcb_any;
      prev = lpcb_prev;
    }
#endif /* SO_REUSE */
    if (lpcb != NULL) {
 8012cfa:	697b      	ldr	r3, [r7, #20]
 8012cfc:	2b00      	cmp	r3, #0
 8012cfe:	d029      	beq.n	8012d54 <tcp_input+0x4c4>
      /* Move this PCB to the front of the list so that subsequent
         lookups will be faster (we exploit locality in TCP segment
         arrivals). */
      if (prev != NULL) {
 8012d00:	69bb      	ldr	r3, [r7, #24]
 8012d02:	2b00      	cmp	r3, #0
 8012d04:	d00a      	beq.n	8012d1c <tcp_input+0x48c>
        ((struct tcp_pcb_listen *)prev)->next = lpcb->next;
 8012d06:	697b      	ldr	r3, [r7, #20]
 8012d08:	68da      	ldr	r2, [r3, #12]
 8012d0a:	69bb      	ldr	r3, [r7, #24]
 8012d0c:	60da      	str	r2, [r3, #12]
        /* our successor is the remainder of the listening list */
        lpcb->next = tcp_listen_pcbs.listen_pcbs;
 8012d0e:	4b10      	ldr	r3, [pc, #64]	; (8012d50 <tcp_input+0x4c0>)
 8012d10:	681a      	ldr	r2, [r3, #0]
 8012d12:	697b      	ldr	r3, [r7, #20]
 8012d14:	60da      	str	r2, [r3, #12]
        /* put this listening pcb at the head of the listening list */
        tcp_listen_pcbs.listen_pcbs = lpcb;
 8012d16:	4a0e      	ldr	r2, [pc, #56]	; (8012d50 <tcp_input+0x4c0>)
 8012d18:	697b      	ldr	r3, [r7, #20]
 8012d1a:	6013      	str	r3, [r2, #0]
#ifdef LWIP_HOOK_TCP_INPACKET_PCB
      if (LWIP_HOOK_TCP_INPACKET_PCB((struct tcp_pcb *)lpcb, tcphdr, tcphdr_optlen,
                                     tcphdr_opt1len, tcphdr_opt2, p) == ERR_OK)
#endif
      {
        tcp_listen_input(lpcb);
 8012d1c:	6978      	ldr	r0, [r7, #20]
 8012d1e:	f000 fa03 	bl	8013128 <tcp_listen_input>
      }
      pbuf_free(p);
 8012d22:	6878      	ldr	r0, [r7, #4]
 8012d24:	f7fd ff88 	bl	8010c38 <pbuf_free>
      return;
 8012d28:	e1a8      	b.n	801307c <tcp_input+0x7ec>
 8012d2a:	bf00      	nop
 8012d2c:	2000706c 	.word	0x2000706c
 8012d30:	20000768 	.word	0x20000768
 8012d34:	0801d41c 	.word	0x0801d41c
 8012d38:	0801d548 	.word	0x0801d548
 8012d3c:	0801d468 	.word	0x0801d468
 8012d40:	20007050 	.word	0x20007050
 8012d44:	0801d574 	.word	0x0801d574
 8012d48:	20007054 	.word	0x20007054
 8012d4c:	0801d5a0 	.word	0x0801d5a0
 8012d50:	2000704c 	.word	0x2000704c
      tcphdr_opt1len, tcphdr_opt2, p) != ERR_OK) {
    pbuf_free(p);
    return;
  }
#endif
  if (pcb != NULL) {
 8012d54:	69fb      	ldr	r3, [r7, #28]
 8012d56:	2b00      	cmp	r3, #0
 8012d58:	f000 8158 	beq.w	801300c <tcp_input+0x77c>
#if TCP_INPUT_DEBUG
    tcp_debug_print_state(pcb->state);
#endif /* TCP_INPUT_DEBUG */

    /* Set up a tcp_seg structure. */
    inseg.next = NULL;
 8012d5c:	4b95      	ldr	r3, [pc, #596]	; (8012fb4 <tcp_input+0x724>)
 8012d5e:	2200      	movs	r2, #0
 8012d60:	601a      	str	r2, [r3, #0]
    inseg.len = p->tot_len;
 8012d62:	687b      	ldr	r3, [r7, #4]
 8012d64:	891a      	ldrh	r2, [r3, #8]
 8012d66:	4b93      	ldr	r3, [pc, #588]	; (8012fb4 <tcp_input+0x724>)
 8012d68:	811a      	strh	r2, [r3, #8]
    inseg.p = p;
 8012d6a:	4a92      	ldr	r2, [pc, #584]	; (8012fb4 <tcp_input+0x724>)
 8012d6c:	687b      	ldr	r3, [r7, #4]
 8012d6e:	6053      	str	r3, [r2, #4]
    inseg.tcphdr = tcphdr;
 8012d70:	4b91      	ldr	r3, [pc, #580]	; (8012fb8 <tcp_input+0x728>)
 8012d72:	681b      	ldr	r3, [r3, #0]
 8012d74:	4a8f      	ldr	r2, [pc, #572]	; (8012fb4 <tcp_input+0x724>)
 8012d76:	60d3      	str	r3, [r2, #12]

    recv_data = NULL;
 8012d78:	4b90      	ldr	r3, [pc, #576]	; (8012fbc <tcp_input+0x72c>)
 8012d7a:	2200      	movs	r2, #0
 8012d7c:	601a      	str	r2, [r3, #0]
    recv_flags = 0;
 8012d7e:	4b90      	ldr	r3, [pc, #576]	; (8012fc0 <tcp_input+0x730>)
 8012d80:	2200      	movs	r2, #0
 8012d82:	701a      	strb	r2, [r3, #0]
    recv_acked = 0;
 8012d84:	4b8f      	ldr	r3, [pc, #572]	; (8012fc4 <tcp_input+0x734>)
 8012d86:	2200      	movs	r2, #0
 8012d88:	801a      	strh	r2, [r3, #0]

    if (flags & TCP_PSH) {
 8012d8a:	4b8f      	ldr	r3, [pc, #572]	; (8012fc8 <tcp_input+0x738>)
 8012d8c:	781b      	ldrb	r3, [r3, #0]
 8012d8e:	f003 0308 	and.w	r3, r3, #8
 8012d92:	2b00      	cmp	r3, #0
 8012d94:	d006      	beq.n	8012da4 <tcp_input+0x514>
      p->flags |= PBUF_FLAG_PUSH;
 8012d96:	687b      	ldr	r3, [r7, #4]
 8012d98:	7b5b      	ldrb	r3, [r3, #13]
 8012d9a:	f043 0301 	orr.w	r3, r3, #1
 8012d9e:	b2da      	uxtb	r2, r3
 8012da0:	687b      	ldr	r3, [r7, #4]
 8012da2:	735a      	strb	r2, [r3, #13]
    }

    /* If there is data which was previously "refused" by upper layer */
    if (pcb->refused_data != NULL) {
 8012da4:	69fb      	ldr	r3, [r7, #28]
 8012da6:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8012da8:	2b00      	cmp	r3, #0
 8012daa:	d017      	beq.n	8012ddc <tcp_input+0x54c>
      if ((tcp_process_refused_data(pcb) == ERR_ABRT) ||
 8012dac:	69f8      	ldr	r0, [r7, #28]
 8012dae:	f7ff f927 	bl	8012000 <tcp_process_refused_data>
 8012db2:	4603      	mov	r3, r0
 8012db4:	f113 0f0d 	cmn.w	r3, #13
 8012db8:	d007      	beq.n	8012dca <tcp_input+0x53a>
          ((pcb->refused_data != NULL) && (tcplen > 0))) {
 8012dba:	69fb      	ldr	r3, [r7, #28]
 8012dbc:	6f9b      	ldr	r3, [r3, #120]	; 0x78
      if ((tcp_process_refused_data(pcb) == ERR_ABRT) ||
 8012dbe:	2b00      	cmp	r3, #0
 8012dc0:	d00c      	beq.n	8012ddc <tcp_input+0x54c>
          ((pcb->refused_data != NULL) && (tcplen > 0))) {
 8012dc2:	4b82      	ldr	r3, [pc, #520]	; (8012fcc <tcp_input+0x73c>)
 8012dc4:	881b      	ldrh	r3, [r3, #0]
 8012dc6:	2b00      	cmp	r3, #0
 8012dc8:	d008      	beq.n	8012ddc <tcp_input+0x54c>
        /* pcb has been aborted or refused data is still refused and the new
           segment contains data */
        if (pcb->rcv_ann_wnd == 0) {
 8012dca:	69fb      	ldr	r3, [r7, #28]
 8012dcc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8012dce:	2b00      	cmp	r3, #0
 8012dd0:	f040 80e4 	bne.w	8012f9c <tcp_input+0x70c>
          /* this is a zero-window probe, we respond to it with current RCV.NXT
          and drop the data segment */
          tcp_send_empty_ack(pcb);
 8012dd4:	69f8      	ldr	r0, [r7, #28]
 8012dd6:	f003 f9ad 	bl	8016134 <tcp_send_empty_ack>
        }
        TCP_STATS_INC(tcp.drop);
        MIB2_STATS_INC(mib2.tcpinerrs);
        goto aborted;
 8012dda:	e0df      	b.n	8012f9c <tcp_input+0x70c>
      }
    }
    tcp_input_pcb = pcb;
 8012ddc:	4a7c      	ldr	r2, [pc, #496]	; (8012fd0 <tcp_input+0x740>)
 8012dde:	69fb      	ldr	r3, [r7, #28]
 8012de0:	6013      	str	r3, [r2, #0]
    err = tcp_process(pcb);
 8012de2:	69f8      	ldr	r0, [r7, #28]
 8012de4:	f000 fb18 	bl	8013418 <tcp_process>
 8012de8:	4603      	mov	r3, r0
 8012dea:	74fb      	strb	r3, [r7, #19]
    /* A return value of ERR_ABRT means that tcp_abort() was called
       and that the pcb has been freed. If so, we don't do anything. */
    if (err != ERR_ABRT) {
 8012dec:	f997 3013 	ldrsb.w	r3, [r7, #19]
 8012df0:	f113 0f0d 	cmn.w	r3, #13
 8012df4:	f000 80d4 	beq.w	8012fa0 <tcp_input+0x710>
      if (recv_flags & TF_RESET) {
 8012df8:	4b71      	ldr	r3, [pc, #452]	; (8012fc0 <tcp_input+0x730>)
 8012dfa:	781b      	ldrb	r3, [r3, #0]
 8012dfc:	f003 0308 	and.w	r3, r3, #8
 8012e00:	2b00      	cmp	r3, #0
 8012e02:	d015      	beq.n	8012e30 <tcp_input+0x5a0>
        /* TF_RESET means that the connection was reset by the other
           end. We then call the error callback to inform the
           application that the connection is dead before we
           deallocate the PCB. */
        TCP_EVENT_ERR(pcb->state, pcb->errf, pcb->callback_arg, ERR_RST);
 8012e04:	69fb      	ldr	r3, [r7, #28]
 8012e06:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8012e0a:	2b00      	cmp	r3, #0
 8012e0c:	d008      	beq.n	8012e20 <tcp_input+0x590>
 8012e0e:	69fb      	ldr	r3, [r7, #28]
 8012e10:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8012e14:	69fa      	ldr	r2, [r7, #28]
 8012e16:	6912      	ldr	r2, [r2, #16]
 8012e18:	f06f 010d 	mvn.w	r1, #13
 8012e1c:	4610      	mov	r0, r2
 8012e1e:	4798      	blx	r3
        tcp_pcb_remove(&tcp_active_pcbs, pcb);
 8012e20:	69f9      	ldr	r1, [r7, #28]
 8012e22:	486c      	ldr	r0, [pc, #432]	; (8012fd4 <tcp_input+0x744>)
 8012e24:	f7ff fbbc 	bl	80125a0 <tcp_pcb_remove>
        tcp_free(pcb);
 8012e28:	69f8      	ldr	r0, [r7, #28]
 8012e2a:	f7fe f9a5 	bl	8011178 <tcp_free>
 8012e2e:	e0da      	b.n	8012fe6 <tcp_input+0x756>
      } else {
        err = ERR_OK;
 8012e30:	2300      	movs	r3, #0
 8012e32:	74fb      	strb	r3, [r7, #19]
        /* If the application has registered a "sent" function to be
           called when new send buffer space is available, we call it
           now. */
        if (recv_acked > 0) {
 8012e34:	4b63      	ldr	r3, [pc, #396]	; (8012fc4 <tcp_input+0x734>)
 8012e36:	881b      	ldrh	r3, [r3, #0]
 8012e38:	2b00      	cmp	r3, #0
 8012e3a:	d01d      	beq.n	8012e78 <tcp_input+0x5e8>
          while (acked > 0) {
            acked16 = (u16_t)LWIP_MIN(acked, 0xffffu);
            acked -= acked16;
#else
          {
            acked16 = recv_acked;
 8012e3c:	4b61      	ldr	r3, [pc, #388]	; (8012fc4 <tcp_input+0x734>)
 8012e3e:	881b      	ldrh	r3, [r3, #0]
 8012e40:	81fb      	strh	r3, [r7, #14]
#endif
            TCP_EVENT_SENT(pcb, (u16_t)acked16, err);
 8012e42:	69fb      	ldr	r3, [r7, #28]
 8012e44:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8012e48:	2b00      	cmp	r3, #0
 8012e4a:	d00a      	beq.n	8012e62 <tcp_input+0x5d2>
 8012e4c:	69fb      	ldr	r3, [r7, #28]
 8012e4e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8012e52:	69fa      	ldr	r2, [r7, #28]
 8012e54:	6910      	ldr	r0, [r2, #16]
 8012e56:	89fa      	ldrh	r2, [r7, #14]
 8012e58:	69f9      	ldr	r1, [r7, #28]
 8012e5a:	4798      	blx	r3
 8012e5c:	4603      	mov	r3, r0
 8012e5e:	74fb      	strb	r3, [r7, #19]
 8012e60:	e001      	b.n	8012e66 <tcp_input+0x5d6>
 8012e62:	2300      	movs	r3, #0
 8012e64:	74fb      	strb	r3, [r7, #19]
            if (err == ERR_ABRT) {
 8012e66:	f997 3013 	ldrsb.w	r3, [r7, #19]
 8012e6a:	f113 0f0d 	cmn.w	r3, #13
 8012e6e:	f000 8099 	beq.w	8012fa4 <tcp_input+0x714>
              goto aborted;
            }
          }
          recv_acked = 0;
 8012e72:	4b54      	ldr	r3, [pc, #336]	; (8012fc4 <tcp_input+0x734>)
 8012e74:	2200      	movs	r2, #0
 8012e76:	801a      	strh	r2, [r3, #0]
        }
        if (tcp_input_delayed_close(pcb)) {
 8012e78:	69f8      	ldr	r0, [r7, #28]
 8012e7a:	f000 f915 	bl	80130a8 <tcp_input_delayed_close>
 8012e7e:	4603      	mov	r3, r0
 8012e80:	2b00      	cmp	r3, #0
 8012e82:	f040 8091 	bne.w	8012fa8 <tcp_input+0x718>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
        while (recv_data != NULL) {
          struct pbuf *rest = NULL;
          pbuf_split_64k(recv_data, &rest);
#else /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
        if (recv_data != NULL) {
 8012e86:	4b4d      	ldr	r3, [pc, #308]	; (8012fbc <tcp_input+0x72c>)
 8012e88:	681b      	ldr	r3, [r3, #0]
 8012e8a:	2b00      	cmp	r3, #0
 8012e8c:	d041      	beq.n	8012f12 <tcp_input+0x682>
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */

          LWIP_ASSERT("pcb->refused_data == NULL", pcb->refused_data == NULL);
 8012e8e:	69fb      	ldr	r3, [r7, #28]
 8012e90:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8012e92:	2b00      	cmp	r3, #0
 8012e94:	d006      	beq.n	8012ea4 <tcp_input+0x614>
 8012e96:	4b50      	ldr	r3, [pc, #320]	; (8012fd8 <tcp_input+0x748>)
 8012e98:	f44f 72f3 	mov.w	r2, #486	; 0x1e6
 8012e9c:	494f      	ldr	r1, [pc, #316]	; (8012fdc <tcp_input+0x74c>)
 8012e9e:	4850      	ldr	r0, [pc, #320]	; (8012fe0 <tcp_input+0x750>)
 8012ea0:	f006 fde2 	bl	8019a68 <iprintf>
          if (pcb->flags & TF_RXCLOSED) {
 8012ea4:	69fb      	ldr	r3, [r7, #28]
 8012ea6:	8b5b      	ldrh	r3, [r3, #26]
 8012ea8:	f003 0310 	and.w	r3, r3, #16
 8012eac:	2b00      	cmp	r3, #0
 8012eae:	d008      	beq.n	8012ec2 <tcp_input+0x632>
            /* received data although already closed -> abort (send RST) to
               notify the remote host that not all data has been processed */
            pbuf_free(recv_data);
 8012eb0:	4b42      	ldr	r3, [pc, #264]	; (8012fbc <tcp_input+0x72c>)
 8012eb2:	681b      	ldr	r3, [r3, #0]
 8012eb4:	4618      	mov	r0, r3
 8012eb6:	f7fd febf 	bl	8010c38 <pbuf_free>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
            if (rest != NULL) {
              pbuf_free(rest);
            }
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
            tcp_abort(pcb);
 8012eba:	69f8      	ldr	r0, [r7, #28]
 8012ebc:	f7fe fc44 	bl	8011748 <tcp_abort>
            goto aborted;
 8012ec0:	e091      	b.n	8012fe6 <tcp_input+0x756>
          }

          /* Notify application that data has been received. */
          TCP_EVENT_RECV(pcb, recv_data, ERR_OK, err);
 8012ec2:	69fb      	ldr	r3, [r7, #28]
 8012ec4:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8012ec8:	2b00      	cmp	r3, #0
 8012eca:	d00c      	beq.n	8012ee6 <tcp_input+0x656>
 8012ecc:	69fb      	ldr	r3, [r7, #28]
 8012ece:	f8d3 4084 	ldr.w	r4, [r3, #132]	; 0x84
 8012ed2:	69fb      	ldr	r3, [r7, #28]
 8012ed4:	6918      	ldr	r0, [r3, #16]
 8012ed6:	4b39      	ldr	r3, [pc, #228]	; (8012fbc <tcp_input+0x72c>)
 8012ed8:	681a      	ldr	r2, [r3, #0]
 8012eda:	2300      	movs	r3, #0
 8012edc:	69f9      	ldr	r1, [r7, #28]
 8012ede:	47a0      	blx	r4
 8012ee0:	4603      	mov	r3, r0
 8012ee2:	74fb      	strb	r3, [r7, #19]
 8012ee4:	e008      	b.n	8012ef8 <tcp_input+0x668>
 8012ee6:	4b35      	ldr	r3, [pc, #212]	; (8012fbc <tcp_input+0x72c>)
 8012ee8:	681a      	ldr	r2, [r3, #0]
 8012eea:	2300      	movs	r3, #0
 8012eec:	69f9      	ldr	r1, [r7, #28]
 8012eee:	2000      	movs	r0, #0
 8012ef0:	f7ff f95e 	bl	80121b0 <tcp_recv_null>
 8012ef4:	4603      	mov	r3, r0
 8012ef6:	74fb      	strb	r3, [r7, #19]
          if (err == ERR_ABRT) {
 8012ef8:	f997 3013 	ldrsb.w	r3, [r7, #19]
 8012efc:	f113 0f0d 	cmn.w	r3, #13
 8012f00:	d054      	beq.n	8012fac <tcp_input+0x71c>
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
            goto aborted;
          }

          /* If the upper layer can't receive this data, store it */
          if (err != ERR_OK) {
 8012f02:	f997 3013 	ldrsb.w	r3, [r7, #19]
 8012f06:	2b00      	cmp	r3, #0
 8012f08:	d003      	beq.n	8012f12 <tcp_input+0x682>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
            if (rest != NULL) {
              pbuf_cat(recv_data, rest);
            }
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
            pcb->refused_data = recv_data;
 8012f0a:	4b2c      	ldr	r3, [pc, #176]	; (8012fbc <tcp_input+0x72c>)
 8012f0c:	681a      	ldr	r2, [r3, #0]
 8012f0e:	69fb      	ldr	r3, [r7, #28]
 8012f10:	679a      	str	r2, [r3, #120]	; 0x78
          }
        }

        /* If a FIN segment was received, we call the callback
           function with a NULL buffer to indicate EOF. */
        if (recv_flags & TF_GOT_FIN) {
 8012f12:	4b2b      	ldr	r3, [pc, #172]	; (8012fc0 <tcp_input+0x730>)
 8012f14:	781b      	ldrb	r3, [r3, #0]
 8012f16:	f003 0320 	and.w	r3, r3, #32
 8012f1a:	2b00      	cmp	r3, #0
 8012f1c:	d031      	beq.n	8012f82 <tcp_input+0x6f2>
          if (pcb->refused_data != NULL) {
 8012f1e:	69fb      	ldr	r3, [r7, #28]
 8012f20:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8012f22:	2b00      	cmp	r3, #0
 8012f24:	d009      	beq.n	8012f3a <tcp_input+0x6aa>
            /* Delay this if we have refused data. */
            pcb->refused_data->flags |= PBUF_FLAG_TCP_FIN;
 8012f26:	69fb      	ldr	r3, [r7, #28]
 8012f28:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8012f2a:	7b5a      	ldrb	r2, [r3, #13]
 8012f2c:	69fb      	ldr	r3, [r7, #28]
 8012f2e:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8012f30:	f042 0220 	orr.w	r2, r2, #32
 8012f34:	b2d2      	uxtb	r2, r2
 8012f36:	735a      	strb	r2, [r3, #13]
 8012f38:	e023      	b.n	8012f82 <tcp_input+0x6f2>
          } else {
            /* correct rcv_wnd as the application won't call tcp_recved()
               for the FIN's seqno */
            if (pcb->rcv_wnd != TCP_WND_MAX(pcb)) {
 8012f3a:	69fb      	ldr	r3, [r7, #28]
 8012f3c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8012f3e:	f241 62d0 	movw	r2, #5840	; 0x16d0
 8012f42:	4293      	cmp	r3, r2
 8012f44:	d005      	beq.n	8012f52 <tcp_input+0x6c2>
              pcb->rcv_wnd++;
 8012f46:	69fb      	ldr	r3, [r7, #28]
 8012f48:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8012f4a:	3301      	adds	r3, #1
 8012f4c:	b29a      	uxth	r2, r3
 8012f4e:	69fb      	ldr	r3, [r7, #28]
 8012f50:	851a      	strh	r2, [r3, #40]	; 0x28
            }
            TCP_EVENT_CLOSED(pcb, err);
 8012f52:	69fb      	ldr	r3, [r7, #28]
 8012f54:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8012f58:	2b00      	cmp	r3, #0
 8012f5a:	d00b      	beq.n	8012f74 <tcp_input+0x6e4>
 8012f5c:	69fb      	ldr	r3, [r7, #28]
 8012f5e:	f8d3 4084 	ldr.w	r4, [r3, #132]	; 0x84
 8012f62:	69fb      	ldr	r3, [r7, #28]
 8012f64:	6918      	ldr	r0, [r3, #16]
 8012f66:	2300      	movs	r3, #0
 8012f68:	2200      	movs	r2, #0
 8012f6a:	69f9      	ldr	r1, [r7, #28]
 8012f6c:	47a0      	blx	r4
 8012f6e:	4603      	mov	r3, r0
 8012f70:	74fb      	strb	r3, [r7, #19]
 8012f72:	e001      	b.n	8012f78 <tcp_input+0x6e8>
 8012f74:	2300      	movs	r3, #0
 8012f76:	74fb      	strb	r3, [r7, #19]
            if (err == ERR_ABRT) {
 8012f78:	f997 3013 	ldrsb.w	r3, [r7, #19]
 8012f7c:	f113 0f0d 	cmn.w	r3, #13
 8012f80:	d016      	beq.n	8012fb0 <tcp_input+0x720>
              goto aborted;
            }
          }
        }

        tcp_input_pcb = NULL;
 8012f82:	4b13      	ldr	r3, [pc, #76]	; (8012fd0 <tcp_input+0x740>)
 8012f84:	2200      	movs	r2, #0
 8012f86:	601a      	str	r2, [r3, #0]
        if (tcp_input_delayed_close(pcb)) {
 8012f88:	69f8      	ldr	r0, [r7, #28]
 8012f8a:	f000 f88d 	bl	80130a8 <tcp_input_delayed_close>
 8012f8e:	4603      	mov	r3, r0
 8012f90:	2b00      	cmp	r3, #0
 8012f92:	d127      	bne.n	8012fe4 <tcp_input+0x754>
          goto aborted;
        }
        /* Try to send something out. */
        tcp_output(pcb);
 8012f94:	69f8      	ldr	r0, [r7, #28]
 8012f96:	f002 fac7 	bl	8015528 <tcp_output>
 8012f9a:	e024      	b.n	8012fe6 <tcp_input+0x756>
        goto aborted;
 8012f9c:	bf00      	nop
 8012f9e:	e022      	b.n	8012fe6 <tcp_input+0x756>
#endif /* TCP_INPUT_DEBUG */
      }
    }
    /* Jump target if pcb has been aborted in a callback (by calling tcp_abort()).
       Below this line, 'pcb' may not be dereferenced! */
aborted:
 8012fa0:	bf00      	nop
 8012fa2:	e020      	b.n	8012fe6 <tcp_input+0x756>
              goto aborted;
 8012fa4:	bf00      	nop
 8012fa6:	e01e      	b.n	8012fe6 <tcp_input+0x756>
          goto aborted;
 8012fa8:	bf00      	nop
 8012faa:	e01c      	b.n	8012fe6 <tcp_input+0x756>
            goto aborted;
 8012fac:	bf00      	nop
 8012fae:	e01a      	b.n	8012fe6 <tcp_input+0x756>
              goto aborted;
 8012fb0:	bf00      	nop
 8012fb2:	e018      	b.n	8012fe6 <tcp_input+0x756>
 8012fb4:	2000705c 	.word	0x2000705c
 8012fb8:	2000706c 	.word	0x2000706c
 8012fbc:	2000708c 	.word	0x2000708c
 8012fc0:	20007089 	.word	0x20007089
 8012fc4:	20007084 	.word	0x20007084
 8012fc8:	20007088 	.word	0x20007088
 8012fcc:	20007086 	.word	0x20007086
 8012fd0:	20007090 	.word	0x20007090
 8012fd4:	20007050 	.word	0x20007050
 8012fd8:	0801d41c 	.word	0x0801d41c
 8012fdc:	0801d5d0 	.word	0x0801d5d0
 8012fe0:	0801d468 	.word	0x0801d468
          goto aborted;
 8012fe4:	bf00      	nop
    tcp_input_pcb = NULL;
 8012fe6:	4b27      	ldr	r3, [pc, #156]	; (8013084 <tcp_input+0x7f4>)
 8012fe8:	2200      	movs	r2, #0
 8012fea:	601a      	str	r2, [r3, #0]
    recv_data = NULL;
 8012fec:	4b26      	ldr	r3, [pc, #152]	; (8013088 <tcp_input+0x7f8>)
 8012fee:	2200      	movs	r2, #0
 8012ff0:	601a      	str	r2, [r3, #0]

    /* give up our reference to inseg.p */
    if (inseg.p != NULL) {
 8012ff2:	4b26      	ldr	r3, [pc, #152]	; (801308c <tcp_input+0x7fc>)
 8012ff4:	685b      	ldr	r3, [r3, #4]
 8012ff6:	2b00      	cmp	r3, #0
 8012ff8:	d03f      	beq.n	801307a <tcp_input+0x7ea>
      pbuf_free(inseg.p);
 8012ffa:	4b24      	ldr	r3, [pc, #144]	; (801308c <tcp_input+0x7fc>)
 8012ffc:	685b      	ldr	r3, [r3, #4]
 8012ffe:	4618      	mov	r0, r3
 8013000:	f7fd fe1a 	bl	8010c38 <pbuf_free>
      inseg.p = NULL;
 8013004:	4b21      	ldr	r3, [pc, #132]	; (801308c <tcp_input+0x7fc>)
 8013006:	2200      	movs	r2, #0
 8013008:	605a      	str	r2, [r3, #4]
    pbuf_free(p);
  }

  LWIP_ASSERT("tcp_input: tcp_pcbs_sane()", tcp_pcbs_sane());
  PERF_STOP("tcp_input");
  return;
 801300a:	e036      	b.n	801307a <tcp_input+0x7ea>
    if (!(TCPH_FLAGS(tcphdr) & TCP_RST)) {
 801300c:	4b20      	ldr	r3, [pc, #128]	; (8013090 <tcp_input+0x800>)
 801300e:	681b      	ldr	r3, [r3, #0]
 8013010:	899b      	ldrh	r3, [r3, #12]
 8013012:	b29b      	uxth	r3, r3
 8013014:	4618      	mov	r0, r3
 8013016:	f7fc fa0b 	bl	800f430 <lwip_htons>
 801301a:	4603      	mov	r3, r0
 801301c:	b2db      	uxtb	r3, r3
 801301e:	f003 0304 	and.w	r3, r3, #4
 8013022:	2b00      	cmp	r3, #0
 8013024:	d118      	bne.n	8013058 <tcp_input+0x7c8>
      tcp_rst(NULL, ackno, seqno + tcplen, ip_current_dest_addr(),
 8013026:	4b1b      	ldr	r3, [pc, #108]	; (8013094 <tcp_input+0x804>)
 8013028:	6819      	ldr	r1, [r3, #0]
 801302a:	4b1b      	ldr	r3, [pc, #108]	; (8013098 <tcp_input+0x808>)
 801302c:	881b      	ldrh	r3, [r3, #0]
 801302e:	461a      	mov	r2, r3
 8013030:	4b1a      	ldr	r3, [pc, #104]	; (801309c <tcp_input+0x80c>)
 8013032:	681b      	ldr	r3, [r3, #0]
 8013034:	18d0      	adds	r0, r2, r3
              ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 8013036:	4b16      	ldr	r3, [pc, #88]	; (8013090 <tcp_input+0x800>)
 8013038:	681b      	ldr	r3, [r3, #0]
      tcp_rst(NULL, ackno, seqno + tcplen, ip_current_dest_addr(),
 801303a:	885b      	ldrh	r3, [r3, #2]
 801303c:	b29b      	uxth	r3, r3
              ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 801303e:	4a14      	ldr	r2, [pc, #80]	; (8013090 <tcp_input+0x800>)
 8013040:	6812      	ldr	r2, [r2, #0]
      tcp_rst(NULL, ackno, seqno + tcplen, ip_current_dest_addr(),
 8013042:	8812      	ldrh	r2, [r2, #0]
 8013044:	b292      	uxth	r2, r2
 8013046:	9202      	str	r2, [sp, #8]
 8013048:	9301      	str	r3, [sp, #4]
 801304a:	4b15      	ldr	r3, [pc, #84]	; (80130a0 <tcp_input+0x810>)
 801304c:	9300      	str	r3, [sp, #0]
 801304e:	4b15      	ldr	r3, [pc, #84]	; (80130a4 <tcp_input+0x814>)
 8013050:	4602      	mov	r2, r0
 8013052:	2000      	movs	r0, #0
 8013054:	f003 f81c 	bl	8016090 <tcp_rst>
    pbuf_free(p);
 8013058:	6878      	ldr	r0, [r7, #4]
 801305a:	f7fd fded 	bl	8010c38 <pbuf_free>
  return;
 801305e:	e00c      	b.n	801307a <tcp_input+0x7ea>
    goto dropped;
 8013060:	bf00      	nop
 8013062:	e006      	b.n	8013072 <tcp_input+0x7e2>
    goto dropped;
 8013064:	bf00      	nop
 8013066:	e004      	b.n	8013072 <tcp_input+0x7e2>
    goto dropped;
 8013068:	bf00      	nop
 801306a:	e002      	b.n	8013072 <tcp_input+0x7e2>
      goto dropped;
 801306c:	bf00      	nop
 801306e:	e000      	b.n	8013072 <tcp_input+0x7e2>
      goto dropped;
 8013070:	bf00      	nop
dropped:
  TCP_STATS_INC(tcp.drop);
  MIB2_STATS_INC(mib2.tcpinerrs);
  pbuf_free(p);
 8013072:	6878      	ldr	r0, [r7, #4]
 8013074:	f7fd fde0 	bl	8010c38 <pbuf_free>
 8013078:	e000      	b.n	801307c <tcp_input+0x7ec>
  return;
 801307a:	bf00      	nop
}
 801307c:	3724      	adds	r7, #36	; 0x24
 801307e:	46bd      	mov	sp, r7
 8013080:	bd90      	pop	{r4, r7, pc}
 8013082:	bf00      	nop
 8013084:	20007090 	.word	0x20007090
 8013088:	2000708c 	.word	0x2000708c
 801308c:	2000705c 	.word	0x2000705c
 8013090:	2000706c 	.word	0x2000706c
 8013094:	20007080 	.word	0x20007080
 8013098:	20007086 	.word	0x20007086
 801309c:	2000707c 	.word	0x2000707c
 80130a0:	20000778 	.word	0x20000778
 80130a4:	2000077c 	.word	0x2000077c

080130a8 <tcp_input_delayed_close>:
 * any more.
 * @returns 1 if the pcb has been closed and deallocated, 0 otherwise
 */
static int
tcp_input_delayed_close(struct tcp_pcb *pcb)
{
 80130a8:	b580      	push	{r7, lr}
 80130aa:	b082      	sub	sp, #8
 80130ac:	af00      	add	r7, sp, #0
 80130ae:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_input_delayed_close: invalid pcb", pcb != NULL);
 80130b0:	687b      	ldr	r3, [r7, #4]
 80130b2:	2b00      	cmp	r3, #0
 80130b4:	d106      	bne.n	80130c4 <tcp_input_delayed_close+0x1c>
 80130b6:	4b17      	ldr	r3, [pc, #92]	; (8013114 <tcp_input_delayed_close+0x6c>)
 80130b8:	f240 225a 	movw	r2, #602	; 0x25a
 80130bc:	4916      	ldr	r1, [pc, #88]	; (8013118 <tcp_input_delayed_close+0x70>)
 80130be:	4817      	ldr	r0, [pc, #92]	; (801311c <tcp_input_delayed_close+0x74>)
 80130c0:	f006 fcd2 	bl	8019a68 <iprintf>

  if (recv_flags & TF_CLOSED) {
 80130c4:	4b16      	ldr	r3, [pc, #88]	; (8013120 <tcp_input_delayed_close+0x78>)
 80130c6:	781b      	ldrb	r3, [r3, #0]
 80130c8:	f003 0310 	and.w	r3, r3, #16
 80130cc:	2b00      	cmp	r3, #0
 80130ce:	d01c      	beq.n	801310a <tcp_input_delayed_close+0x62>
    /* The connection has been closed and we will deallocate the
        PCB. */
    if (!(pcb->flags & TF_RXCLOSED)) {
 80130d0:	687b      	ldr	r3, [r7, #4]
 80130d2:	8b5b      	ldrh	r3, [r3, #26]
 80130d4:	f003 0310 	and.w	r3, r3, #16
 80130d8:	2b00      	cmp	r3, #0
 80130da:	d10d      	bne.n	80130f8 <tcp_input_delayed_close+0x50>
      /* Connection closed although the application has only shut down the
          tx side: call the PCB's err callback and indicate the closure to
          ensure the application doesn't continue using the PCB. */
      TCP_EVENT_ERR(pcb->state, pcb->errf, pcb->callback_arg, ERR_CLSD);
 80130dc:	687b      	ldr	r3, [r7, #4]
 80130de:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80130e2:	2b00      	cmp	r3, #0
 80130e4:	d008      	beq.n	80130f8 <tcp_input_delayed_close+0x50>
 80130e6:	687b      	ldr	r3, [r7, #4]
 80130e8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80130ec:	687a      	ldr	r2, [r7, #4]
 80130ee:	6912      	ldr	r2, [r2, #16]
 80130f0:	f06f 010e 	mvn.w	r1, #14
 80130f4:	4610      	mov	r0, r2
 80130f6:	4798      	blx	r3
    }
    tcp_pcb_remove(&tcp_active_pcbs, pcb);
 80130f8:	6879      	ldr	r1, [r7, #4]
 80130fa:	480a      	ldr	r0, [pc, #40]	; (8013124 <tcp_input_delayed_close+0x7c>)
 80130fc:	f7ff fa50 	bl	80125a0 <tcp_pcb_remove>
    tcp_free(pcb);
 8013100:	6878      	ldr	r0, [r7, #4]
 8013102:	f7fe f839 	bl	8011178 <tcp_free>
    return 1;
 8013106:	2301      	movs	r3, #1
 8013108:	e000      	b.n	801310c <tcp_input_delayed_close+0x64>
  }
  return 0;
 801310a:	2300      	movs	r3, #0
}
 801310c:	4618      	mov	r0, r3
 801310e:	3708      	adds	r7, #8
 8013110:	46bd      	mov	sp, r7
 8013112:	bd80      	pop	{r7, pc}
 8013114:	0801d41c 	.word	0x0801d41c
 8013118:	0801d5ec 	.word	0x0801d5ec
 801311c:	0801d468 	.word	0x0801d468
 8013120:	20007089 	.word	0x20007089
 8013124:	20007050 	.word	0x20007050

08013128 <tcp_listen_input>:
 * @note the segment which arrived is saved in global variables, therefore only the pcb
 *       involved is passed as a parameter to this function
 */
static void
tcp_listen_input(struct tcp_pcb_listen *pcb)
{
 8013128:	b590      	push	{r4, r7, lr}
 801312a:	b08b      	sub	sp, #44	; 0x2c
 801312c:	af04      	add	r7, sp, #16
 801312e:	6078      	str	r0, [r7, #4]
  struct tcp_pcb *npcb;
  u32_t iss;
  err_t rc;

  if (flags & TCP_RST) {
 8013130:	4b6f      	ldr	r3, [pc, #444]	; (80132f0 <tcp_listen_input+0x1c8>)
 8013132:	781b      	ldrb	r3, [r3, #0]
 8013134:	f003 0304 	and.w	r3, r3, #4
 8013138:	2b00      	cmp	r3, #0
 801313a:	f040 80d2 	bne.w	80132e2 <tcp_listen_input+0x1ba>
    /* An incoming RST should be ignored. Return. */
    return;
  }

  LWIP_ASSERT("tcp_listen_input: invalid pcb", pcb != NULL);
 801313e:	687b      	ldr	r3, [r7, #4]
 8013140:	2b00      	cmp	r3, #0
 8013142:	d106      	bne.n	8013152 <tcp_listen_input+0x2a>
 8013144:	4b6b      	ldr	r3, [pc, #428]	; (80132f4 <tcp_listen_input+0x1cc>)
 8013146:	f240 2281 	movw	r2, #641	; 0x281
 801314a:	496b      	ldr	r1, [pc, #428]	; (80132f8 <tcp_listen_input+0x1d0>)
 801314c:	486b      	ldr	r0, [pc, #428]	; (80132fc <tcp_listen_input+0x1d4>)
 801314e:	f006 fc8b 	bl	8019a68 <iprintf>

  /* In the LISTEN state, we check for incoming SYN segments,
     creates a new PCB, and responds with a SYN|ACK. */
  if (flags & TCP_ACK) {
 8013152:	4b67      	ldr	r3, [pc, #412]	; (80132f0 <tcp_listen_input+0x1c8>)
 8013154:	781b      	ldrb	r3, [r3, #0]
 8013156:	f003 0310 	and.w	r3, r3, #16
 801315a:	2b00      	cmp	r3, #0
 801315c:	d019      	beq.n	8013192 <tcp_listen_input+0x6a>
    /* For incoming segments with the ACK flag set, respond with a
       RST. */
    LWIP_DEBUGF(TCP_RST_DEBUG, ("tcp_listen_input: ACK in LISTEN, sending reset\n"));
    tcp_rst((const struct tcp_pcb *)pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 801315e:	4b68      	ldr	r3, [pc, #416]	; (8013300 <tcp_listen_input+0x1d8>)
 8013160:	6819      	ldr	r1, [r3, #0]
 8013162:	4b68      	ldr	r3, [pc, #416]	; (8013304 <tcp_listen_input+0x1dc>)
 8013164:	881b      	ldrh	r3, [r3, #0]
 8013166:	461a      	mov	r2, r3
 8013168:	4b67      	ldr	r3, [pc, #412]	; (8013308 <tcp_listen_input+0x1e0>)
 801316a:	681b      	ldr	r3, [r3, #0]
 801316c:	18d0      	adds	r0, r2, r3
            ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 801316e:	4b67      	ldr	r3, [pc, #412]	; (801330c <tcp_listen_input+0x1e4>)
 8013170:	681b      	ldr	r3, [r3, #0]
    tcp_rst((const struct tcp_pcb *)pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 8013172:	885b      	ldrh	r3, [r3, #2]
 8013174:	b29b      	uxth	r3, r3
            ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 8013176:	4a65      	ldr	r2, [pc, #404]	; (801330c <tcp_listen_input+0x1e4>)
 8013178:	6812      	ldr	r2, [r2, #0]
    tcp_rst((const struct tcp_pcb *)pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 801317a:	8812      	ldrh	r2, [r2, #0]
 801317c:	b292      	uxth	r2, r2
 801317e:	9202      	str	r2, [sp, #8]
 8013180:	9301      	str	r3, [sp, #4]
 8013182:	4b63      	ldr	r3, [pc, #396]	; (8013310 <tcp_listen_input+0x1e8>)
 8013184:	9300      	str	r3, [sp, #0]
 8013186:	4b63      	ldr	r3, [pc, #396]	; (8013314 <tcp_listen_input+0x1ec>)
 8013188:	4602      	mov	r2, r0
 801318a:	6878      	ldr	r0, [r7, #4]
 801318c:	f002 ff80 	bl	8016090 <tcp_rst>
      tcp_abandon(npcb, 0);
      return;
    }
    tcp_output(npcb);
  }
  return;
 8013190:	e0a9      	b.n	80132e6 <tcp_listen_input+0x1be>
  } else if (flags & TCP_SYN) {
 8013192:	4b57      	ldr	r3, [pc, #348]	; (80132f0 <tcp_listen_input+0x1c8>)
 8013194:	781b      	ldrb	r3, [r3, #0]
 8013196:	f003 0302 	and.w	r3, r3, #2
 801319a:	2b00      	cmp	r3, #0
 801319c:	f000 80a3 	beq.w	80132e6 <tcp_listen_input+0x1be>
    npcb = tcp_alloc(pcb->prio);
 80131a0:	687b      	ldr	r3, [r7, #4]
 80131a2:	7d5b      	ldrb	r3, [r3, #21]
 80131a4:	4618      	mov	r0, r3
 80131a6:	f7ff f927 	bl	80123f8 <tcp_alloc>
 80131aa:	6178      	str	r0, [r7, #20]
    if (npcb == NULL) {
 80131ac:	697b      	ldr	r3, [r7, #20]
 80131ae:	2b00      	cmp	r3, #0
 80131b0:	d111      	bne.n	80131d6 <tcp_listen_input+0xae>
      TCP_EVENT_ACCEPT(pcb, NULL, pcb->callback_arg, ERR_MEM, err);
 80131b2:	687b      	ldr	r3, [r7, #4]
 80131b4:	699b      	ldr	r3, [r3, #24]
 80131b6:	2b00      	cmp	r3, #0
 80131b8:	d00a      	beq.n	80131d0 <tcp_listen_input+0xa8>
 80131ba:	687b      	ldr	r3, [r7, #4]
 80131bc:	699b      	ldr	r3, [r3, #24]
 80131be:	687a      	ldr	r2, [r7, #4]
 80131c0:	6910      	ldr	r0, [r2, #16]
 80131c2:	f04f 32ff 	mov.w	r2, #4294967295
 80131c6:	2100      	movs	r1, #0
 80131c8:	4798      	blx	r3
 80131ca:	4603      	mov	r3, r0
 80131cc:	73bb      	strb	r3, [r7, #14]
      return;
 80131ce:	e08b      	b.n	80132e8 <tcp_listen_input+0x1c0>
      TCP_EVENT_ACCEPT(pcb, NULL, pcb->callback_arg, ERR_MEM, err);
 80131d0:	23f0      	movs	r3, #240	; 0xf0
 80131d2:	73bb      	strb	r3, [r7, #14]
      return;
 80131d4:	e088      	b.n	80132e8 <tcp_listen_input+0x1c0>
    ip_addr_copy(npcb->local_ip, *ip_current_dest_addr());
 80131d6:	4b50      	ldr	r3, [pc, #320]	; (8013318 <tcp_listen_input+0x1f0>)
 80131d8:	695a      	ldr	r2, [r3, #20]
 80131da:	697b      	ldr	r3, [r7, #20]
 80131dc:	601a      	str	r2, [r3, #0]
    ip_addr_copy(npcb->remote_ip, *ip_current_src_addr());
 80131de:	4b4e      	ldr	r3, [pc, #312]	; (8013318 <tcp_listen_input+0x1f0>)
 80131e0:	691a      	ldr	r2, [r3, #16]
 80131e2:	697b      	ldr	r3, [r7, #20]
 80131e4:	605a      	str	r2, [r3, #4]
    npcb->local_port = pcb->local_port;
 80131e6:	687b      	ldr	r3, [r7, #4]
 80131e8:	8ada      	ldrh	r2, [r3, #22]
 80131ea:	697b      	ldr	r3, [r7, #20]
 80131ec:	82da      	strh	r2, [r3, #22]
    npcb->remote_port = tcphdr->src;
 80131ee:	4b47      	ldr	r3, [pc, #284]	; (801330c <tcp_listen_input+0x1e4>)
 80131f0:	681b      	ldr	r3, [r3, #0]
 80131f2:	881b      	ldrh	r3, [r3, #0]
 80131f4:	b29a      	uxth	r2, r3
 80131f6:	697b      	ldr	r3, [r7, #20]
 80131f8:	831a      	strh	r2, [r3, #24]
    npcb->state = SYN_RCVD;
 80131fa:	697b      	ldr	r3, [r7, #20]
 80131fc:	2203      	movs	r2, #3
 80131fe:	751a      	strb	r2, [r3, #20]
    npcb->rcv_nxt = seqno + 1;
 8013200:	4b41      	ldr	r3, [pc, #260]	; (8013308 <tcp_listen_input+0x1e0>)
 8013202:	681b      	ldr	r3, [r3, #0]
 8013204:	1c5a      	adds	r2, r3, #1
 8013206:	697b      	ldr	r3, [r7, #20]
 8013208:	625a      	str	r2, [r3, #36]	; 0x24
    npcb->rcv_ann_right_edge = npcb->rcv_nxt;
 801320a:	697b      	ldr	r3, [r7, #20]
 801320c:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 801320e:	697b      	ldr	r3, [r7, #20]
 8013210:	62da      	str	r2, [r3, #44]	; 0x2c
    iss = tcp_next_iss(npcb);
 8013212:	6978      	ldr	r0, [r7, #20]
 8013214:	f7ff fa58 	bl	80126c8 <tcp_next_iss>
 8013218:	6138      	str	r0, [r7, #16]
    npcb->snd_wl2 = iss;
 801321a:	697b      	ldr	r3, [r7, #20]
 801321c:	693a      	ldr	r2, [r7, #16]
 801321e:	659a      	str	r2, [r3, #88]	; 0x58
    npcb->snd_nxt = iss;
 8013220:	697b      	ldr	r3, [r7, #20]
 8013222:	693a      	ldr	r2, [r7, #16]
 8013224:	651a      	str	r2, [r3, #80]	; 0x50
    npcb->lastack = iss;
 8013226:	697b      	ldr	r3, [r7, #20]
 8013228:	693a      	ldr	r2, [r7, #16]
 801322a:	645a      	str	r2, [r3, #68]	; 0x44
    npcb->snd_lbb = iss;
 801322c:	697b      	ldr	r3, [r7, #20]
 801322e:	693a      	ldr	r2, [r7, #16]
 8013230:	65da      	str	r2, [r3, #92]	; 0x5c
    npcb->snd_wl1 = seqno - 1;/* initialise to seqno-1 to force window update */
 8013232:	4b35      	ldr	r3, [pc, #212]	; (8013308 <tcp_listen_input+0x1e0>)
 8013234:	681b      	ldr	r3, [r3, #0]
 8013236:	1e5a      	subs	r2, r3, #1
 8013238:	697b      	ldr	r3, [r7, #20]
 801323a:	655a      	str	r2, [r3, #84]	; 0x54
    npcb->callback_arg = pcb->callback_arg;
 801323c:	687b      	ldr	r3, [r7, #4]
 801323e:	691a      	ldr	r2, [r3, #16]
 8013240:	697b      	ldr	r3, [r7, #20]
 8013242:	611a      	str	r2, [r3, #16]
    npcb->listener = pcb;
 8013244:	697b      	ldr	r3, [r7, #20]
 8013246:	687a      	ldr	r2, [r7, #4]
 8013248:	67da      	str	r2, [r3, #124]	; 0x7c
    npcb->so_options = pcb->so_options & SOF_INHERITED;
 801324a:	687b      	ldr	r3, [r7, #4]
 801324c:	7a5b      	ldrb	r3, [r3, #9]
 801324e:	f003 030c 	and.w	r3, r3, #12
 8013252:	b2da      	uxtb	r2, r3
 8013254:	697b      	ldr	r3, [r7, #20]
 8013256:	725a      	strb	r2, [r3, #9]
    npcb->netif_idx = pcb->netif_idx;
 8013258:	687b      	ldr	r3, [r7, #4]
 801325a:	7a1a      	ldrb	r2, [r3, #8]
 801325c:	697b      	ldr	r3, [r7, #20]
 801325e:	721a      	strb	r2, [r3, #8]
    TCP_REG_ACTIVE(npcb);
 8013260:	4b2e      	ldr	r3, [pc, #184]	; (801331c <tcp_listen_input+0x1f4>)
 8013262:	681a      	ldr	r2, [r3, #0]
 8013264:	697b      	ldr	r3, [r7, #20]
 8013266:	60da      	str	r2, [r3, #12]
 8013268:	4a2c      	ldr	r2, [pc, #176]	; (801331c <tcp_listen_input+0x1f4>)
 801326a:	697b      	ldr	r3, [r7, #20]
 801326c:	6013      	str	r3, [r2, #0]
 801326e:	f003 f8d1 	bl	8016414 <tcp_timer_needed>
 8013272:	4b2b      	ldr	r3, [pc, #172]	; (8013320 <tcp_listen_input+0x1f8>)
 8013274:	2201      	movs	r2, #1
 8013276:	701a      	strb	r2, [r3, #0]
    tcp_parseopt(npcb);
 8013278:	6978      	ldr	r0, [r7, #20]
 801327a:	f001 fd8f 	bl	8014d9c <tcp_parseopt>
    npcb->snd_wnd = tcphdr->wnd;
 801327e:	4b23      	ldr	r3, [pc, #140]	; (801330c <tcp_listen_input+0x1e4>)
 8013280:	681b      	ldr	r3, [r3, #0]
 8013282:	89db      	ldrh	r3, [r3, #14]
 8013284:	b29a      	uxth	r2, r3
 8013286:	697b      	ldr	r3, [r7, #20]
 8013288:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
    npcb->snd_wnd_max = npcb->snd_wnd;
 801328c:	697b      	ldr	r3, [r7, #20]
 801328e:	f8b3 2060 	ldrh.w	r2, [r3, #96]	; 0x60
 8013292:	697b      	ldr	r3, [r7, #20]
 8013294:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
    npcb->mss = tcp_eff_send_mss(npcb->mss, &npcb->local_ip, &npcb->remote_ip);
 8013298:	697b      	ldr	r3, [r7, #20]
 801329a:	8e5c      	ldrh	r4, [r3, #50]	; 0x32
 801329c:	697b      	ldr	r3, [r7, #20]
 801329e:	3304      	adds	r3, #4
 80132a0:	4618      	mov	r0, r3
 80132a2:	f004 fcbb 	bl	8017c1c <ip4_route>
 80132a6:	4601      	mov	r1, r0
 80132a8:	697b      	ldr	r3, [r7, #20]
 80132aa:	3304      	adds	r3, #4
 80132ac:	461a      	mov	r2, r3
 80132ae:	4620      	mov	r0, r4
 80132b0:	f7ff fa30 	bl	8012714 <tcp_eff_send_mss_netif>
 80132b4:	4603      	mov	r3, r0
 80132b6:	461a      	mov	r2, r3
 80132b8:	697b      	ldr	r3, [r7, #20]
 80132ba:	865a      	strh	r2, [r3, #50]	; 0x32
    rc = tcp_enqueue_flags(npcb, TCP_SYN | TCP_ACK);
 80132bc:	2112      	movs	r1, #18
 80132be:	6978      	ldr	r0, [r7, #20]
 80132c0:	f002 f844 	bl	801534c <tcp_enqueue_flags>
 80132c4:	4603      	mov	r3, r0
 80132c6:	73fb      	strb	r3, [r7, #15]
    if (rc != ERR_OK) {
 80132c8:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80132cc:	2b00      	cmp	r3, #0
 80132ce:	d004      	beq.n	80132da <tcp_listen_input+0x1b2>
      tcp_abandon(npcb, 0);
 80132d0:	2100      	movs	r1, #0
 80132d2:	6978      	ldr	r0, [r7, #20]
 80132d4:	f7fe f97a 	bl	80115cc <tcp_abandon>
      return;
 80132d8:	e006      	b.n	80132e8 <tcp_listen_input+0x1c0>
    tcp_output(npcb);
 80132da:	6978      	ldr	r0, [r7, #20]
 80132dc:	f002 f924 	bl	8015528 <tcp_output>
  return;
 80132e0:	e001      	b.n	80132e6 <tcp_listen_input+0x1be>
    return;
 80132e2:	bf00      	nop
 80132e4:	e000      	b.n	80132e8 <tcp_listen_input+0x1c0>
  return;
 80132e6:	bf00      	nop
}
 80132e8:	371c      	adds	r7, #28
 80132ea:	46bd      	mov	sp, r7
 80132ec:	bd90      	pop	{r4, r7, pc}
 80132ee:	bf00      	nop
 80132f0:	20007088 	.word	0x20007088
 80132f4:	0801d41c 	.word	0x0801d41c
 80132f8:	0801d614 	.word	0x0801d614
 80132fc:	0801d468 	.word	0x0801d468
 8013300:	20007080 	.word	0x20007080
 8013304:	20007086 	.word	0x20007086
 8013308:	2000707c 	.word	0x2000707c
 801330c:	2000706c 	.word	0x2000706c
 8013310:	20000778 	.word	0x20000778
 8013314:	2000077c 	.word	0x2000077c
 8013318:	20000768 	.word	0x20000768
 801331c:	20007050 	.word	0x20007050
 8013320:	20007058 	.word	0x20007058

08013324 <tcp_timewait_input>:
 * @note the segment which arrived is saved in global variables, therefore only the pcb
 *       involved is passed as a parameter to this function
 */
static void
tcp_timewait_input(struct tcp_pcb *pcb)
{
 8013324:	b580      	push	{r7, lr}
 8013326:	b086      	sub	sp, #24
 8013328:	af04      	add	r7, sp, #16
 801332a:	6078      	str	r0, [r7, #4]
  /* RFC 1337: in TIME_WAIT, ignore RST and ACK FINs + any 'acceptable' segments */
  /* RFC 793 3.9 Event Processing - Segment Arrives:
   * - first check sequence number - we skip that one in TIME_WAIT (always
   *   acceptable since we only send ACKs)
   * - second check the RST bit (... return) */
  if (flags & TCP_RST) {
 801332c:	4b2f      	ldr	r3, [pc, #188]	; (80133ec <tcp_timewait_input+0xc8>)
 801332e:	781b      	ldrb	r3, [r3, #0]
 8013330:	f003 0304 	and.w	r3, r3, #4
 8013334:	2b00      	cmp	r3, #0
 8013336:	d153      	bne.n	80133e0 <tcp_timewait_input+0xbc>
    return;
  }

  LWIP_ASSERT("tcp_timewait_input: invalid pcb", pcb != NULL);
 8013338:	687b      	ldr	r3, [r7, #4]
 801333a:	2b00      	cmp	r3, #0
 801333c:	d106      	bne.n	801334c <tcp_timewait_input+0x28>
 801333e:	4b2c      	ldr	r3, [pc, #176]	; (80133f0 <tcp_timewait_input+0xcc>)
 8013340:	f240 22ee 	movw	r2, #750	; 0x2ee
 8013344:	492b      	ldr	r1, [pc, #172]	; (80133f4 <tcp_timewait_input+0xd0>)
 8013346:	482c      	ldr	r0, [pc, #176]	; (80133f8 <tcp_timewait_input+0xd4>)
 8013348:	f006 fb8e 	bl	8019a68 <iprintf>

  /* - fourth, check the SYN bit, */
  if (flags & TCP_SYN) {
 801334c:	4b27      	ldr	r3, [pc, #156]	; (80133ec <tcp_timewait_input+0xc8>)
 801334e:	781b      	ldrb	r3, [r3, #0]
 8013350:	f003 0302 	and.w	r3, r3, #2
 8013354:	2b00      	cmp	r3, #0
 8013356:	d02a      	beq.n	80133ae <tcp_timewait_input+0x8a>
    /* If an incoming segment is not acceptable, an acknowledgment
       should be sent in reply */
    if (TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt, pcb->rcv_nxt + pcb->rcv_wnd)) {
 8013358:	4b28      	ldr	r3, [pc, #160]	; (80133fc <tcp_timewait_input+0xd8>)
 801335a:	681a      	ldr	r2, [r3, #0]
 801335c:	687b      	ldr	r3, [r7, #4]
 801335e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8013360:	1ad3      	subs	r3, r2, r3
 8013362:	2b00      	cmp	r3, #0
 8013364:	db2d      	blt.n	80133c2 <tcp_timewait_input+0x9e>
 8013366:	4b25      	ldr	r3, [pc, #148]	; (80133fc <tcp_timewait_input+0xd8>)
 8013368:	681a      	ldr	r2, [r3, #0]
 801336a:	687b      	ldr	r3, [r7, #4]
 801336c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801336e:	6879      	ldr	r1, [r7, #4]
 8013370:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 8013372:	440b      	add	r3, r1
 8013374:	1ad3      	subs	r3, r2, r3
 8013376:	2b00      	cmp	r3, #0
 8013378:	dc23      	bgt.n	80133c2 <tcp_timewait_input+0x9e>
      /* If the SYN is in the window it is an error, send a reset */
      tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 801337a:	4b21      	ldr	r3, [pc, #132]	; (8013400 <tcp_timewait_input+0xdc>)
 801337c:	6819      	ldr	r1, [r3, #0]
 801337e:	4b21      	ldr	r3, [pc, #132]	; (8013404 <tcp_timewait_input+0xe0>)
 8013380:	881b      	ldrh	r3, [r3, #0]
 8013382:	461a      	mov	r2, r3
 8013384:	4b1d      	ldr	r3, [pc, #116]	; (80133fc <tcp_timewait_input+0xd8>)
 8013386:	681b      	ldr	r3, [r3, #0]
 8013388:	18d0      	adds	r0, r2, r3
              ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 801338a:	4b1f      	ldr	r3, [pc, #124]	; (8013408 <tcp_timewait_input+0xe4>)
 801338c:	681b      	ldr	r3, [r3, #0]
      tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 801338e:	885b      	ldrh	r3, [r3, #2]
 8013390:	b29b      	uxth	r3, r3
              ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 8013392:	4a1d      	ldr	r2, [pc, #116]	; (8013408 <tcp_timewait_input+0xe4>)
 8013394:	6812      	ldr	r2, [r2, #0]
      tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 8013396:	8812      	ldrh	r2, [r2, #0]
 8013398:	b292      	uxth	r2, r2
 801339a:	9202      	str	r2, [sp, #8]
 801339c:	9301      	str	r3, [sp, #4]
 801339e:	4b1b      	ldr	r3, [pc, #108]	; (801340c <tcp_timewait_input+0xe8>)
 80133a0:	9300      	str	r3, [sp, #0]
 80133a2:	4b1b      	ldr	r3, [pc, #108]	; (8013410 <tcp_timewait_input+0xec>)
 80133a4:	4602      	mov	r2, r0
 80133a6:	6878      	ldr	r0, [r7, #4]
 80133a8:	f002 fe72 	bl	8016090 <tcp_rst>
      return;
 80133ac:	e01b      	b.n	80133e6 <tcp_timewait_input+0xc2>
    }
  } else if (flags & TCP_FIN) {
 80133ae:	4b0f      	ldr	r3, [pc, #60]	; (80133ec <tcp_timewait_input+0xc8>)
 80133b0:	781b      	ldrb	r3, [r3, #0]
 80133b2:	f003 0301 	and.w	r3, r3, #1
 80133b6:	2b00      	cmp	r3, #0
 80133b8:	d003      	beq.n	80133c2 <tcp_timewait_input+0x9e>
    /* - eighth, check the FIN bit: Remain in the TIME-WAIT state.
         Restart the 2 MSL time-wait timeout.*/
    pcb->tmr = tcp_ticks;
 80133ba:	4b16      	ldr	r3, [pc, #88]	; (8013414 <tcp_timewait_input+0xf0>)
 80133bc:	681a      	ldr	r2, [r3, #0]
 80133be:	687b      	ldr	r3, [r7, #4]
 80133c0:	621a      	str	r2, [r3, #32]
  }

  if ((tcplen > 0)) {
 80133c2:	4b10      	ldr	r3, [pc, #64]	; (8013404 <tcp_timewait_input+0xe0>)
 80133c4:	881b      	ldrh	r3, [r3, #0]
 80133c6:	2b00      	cmp	r3, #0
 80133c8:	d00c      	beq.n	80133e4 <tcp_timewait_input+0xc0>
    /* Acknowledge data, FIN or out-of-window SYN */
    tcp_ack_now(pcb);
 80133ca:	687b      	ldr	r3, [r7, #4]
 80133cc:	8b5b      	ldrh	r3, [r3, #26]
 80133ce:	f043 0302 	orr.w	r3, r3, #2
 80133d2:	b29a      	uxth	r2, r3
 80133d4:	687b      	ldr	r3, [r7, #4]
 80133d6:	835a      	strh	r2, [r3, #26]
    tcp_output(pcb);
 80133d8:	6878      	ldr	r0, [r7, #4]
 80133da:	f002 f8a5 	bl	8015528 <tcp_output>
  }
  return;
 80133de:	e001      	b.n	80133e4 <tcp_timewait_input+0xc0>
    return;
 80133e0:	bf00      	nop
 80133e2:	e000      	b.n	80133e6 <tcp_timewait_input+0xc2>
  return;
 80133e4:	bf00      	nop
}
 80133e6:	3708      	adds	r7, #8
 80133e8:	46bd      	mov	sp, r7
 80133ea:	bd80      	pop	{r7, pc}
 80133ec:	20007088 	.word	0x20007088
 80133f0:	0801d41c 	.word	0x0801d41c
 80133f4:	0801d634 	.word	0x0801d634
 80133f8:	0801d468 	.word	0x0801d468
 80133fc:	2000707c 	.word	0x2000707c
 8013400:	20007080 	.word	0x20007080
 8013404:	20007086 	.word	0x20007086
 8013408:	2000706c 	.word	0x2000706c
 801340c:	20000778 	.word	0x20000778
 8013410:	2000077c 	.word	0x2000077c
 8013414:	20007044 	.word	0x20007044

08013418 <tcp_process>:
 * @note the segment which arrived is saved in global variables, therefore only the pcb
 *       involved is passed as a parameter to this function
 */
static err_t
tcp_process(struct tcp_pcb *pcb)
{
 8013418:	b590      	push	{r4, r7, lr}
 801341a:	b08d      	sub	sp, #52	; 0x34
 801341c:	af04      	add	r7, sp, #16
 801341e:	6078      	str	r0, [r7, #4]
  struct tcp_seg *rseg;
  u8_t acceptable = 0;
 8013420:	2300      	movs	r3, #0
 8013422:	76fb      	strb	r3, [r7, #27]
  err_t err;

  err = ERR_OK;
 8013424:	2300      	movs	r3, #0
 8013426:	76bb      	strb	r3, [r7, #26]

  LWIP_ASSERT("tcp_process: invalid pcb", pcb != NULL);
 8013428:	687b      	ldr	r3, [r7, #4]
 801342a:	2b00      	cmp	r3, #0
 801342c:	d106      	bne.n	801343c <tcp_process+0x24>
 801342e:	4b9d      	ldr	r3, [pc, #628]	; (80136a4 <tcp_process+0x28c>)
 8013430:	f44f 7247 	mov.w	r2, #796	; 0x31c
 8013434:	499c      	ldr	r1, [pc, #624]	; (80136a8 <tcp_process+0x290>)
 8013436:	489d      	ldr	r0, [pc, #628]	; (80136ac <tcp_process+0x294>)
 8013438:	f006 fb16 	bl	8019a68 <iprintf>

  /* Process incoming RST segments. */
  if (flags & TCP_RST) {
 801343c:	4b9c      	ldr	r3, [pc, #624]	; (80136b0 <tcp_process+0x298>)
 801343e:	781b      	ldrb	r3, [r3, #0]
 8013440:	f003 0304 	and.w	r3, r3, #4
 8013444:	2b00      	cmp	r3, #0
 8013446:	d04e      	beq.n	80134e6 <tcp_process+0xce>
    /* First, determine if the reset is acceptable. */
    if (pcb->state == SYN_SENT) {
 8013448:	687b      	ldr	r3, [r7, #4]
 801344a:	7d1b      	ldrb	r3, [r3, #20]
 801344c:	2b02      	cmp	r3, #2
 801344e:	d108      	bne.n	8013462 <tcp_process+0x4a>
      /* "In the SYN-SENT state (a RST received in response to an initial SYN),
          the RST is acceptable if the ACK field acknowledges the SYN." */
      if (ackno == pcb->snd_nxt) {
 8013450:	687b      	ldr	r3, [r7, #4]
 8013452:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8013454:	4b97      	ldr	r3, [pc, #604]	; (80136b4 <tcp_process+0x29c>)
 8013456:	681b      	ldr	r3, [r3, #0]
 8013458:	429a      	cmp	r2, r3
 801345a:	d123      	bne.n	80134a4 <tcp_process+0x8c>
        acceptable = 1;
 801345c:	2301      	movs	r3, #1
 801345e:	76fb      	strb	r3, [r7, #27]
 8013460:	e020      	b.n	80134a4 <tcp_process+0x8c>
      }
    } else {
      /* "In all states except SYN-SENT, all reset (RST) segments are validated
          by checking their SEQ-fields." */
      if (seqno == pcb->rcv_nxt) {
 8013462:	687b      	ldr	r3, [r7, #4]
 8013464:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8013466:	4b94      	ldr	r3, [pc, #592]	; (80136b8 <tcp_process+0x2a0>)
 8013468:	681b      	ldr	r3, [r3, #0]
 801346a:	429a      	cmp	r2, r3
 801346c:	d102      	bne.n	8013474 <tcp_process+0x5c>
        acceptable = 1;
 801346e:	2301      	movs	r3, #1
 8013470:	76fb      	strb	r3, [r7, #27]
 8013472:	e017      	b.n	80134a4 <tcp_process+0x8c>
      } else  if (TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt,
 8013474:	4b90      	ldr	r3, [pc, #576]	; (80136b8 <tcp_process+0x2a0>)
 8013476:	681a      	ldr	r2, [r3, #0]
 8013478:	687b      	ldr	r3, [r7, #4]
 801347a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801347c:	1ad3      	subs	r3, r2, r3
 801347e:	2b00      	cmp	r3, #0
 8013480:	db10      	blt.n	80134a4 <tcp_process+0x8c>
 8013482:	4b8d      	ldr	r3, [pc, #564]	; (80136b8 <tcp_process+0x2a0>)
 8013484:	681a      	ldr	r2, [r3, #0]
 8013486:	687b      	ldr	r3, [r7, #4]
 8013488:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801348a:	6879      	ldr	r1, [r7, #4]
 801348c:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 801348e:	440b      	add	r3, r1
 8013490:	1ad3      	subs	r3, r2, r3
 8013492:	2b00      	cmp	r3, #0
 8013494:	dc06      	bgt.n	80134a4 <tcp_process+0x8c>
                                  pcb->rcv_nxt + pcb->rcv_wnd)) {
        /* If the sequence number is inside the window, we send a challenge ACK
           and wait for a re-send with matching sequence number.
           This follows RFC 5961 section 3.2 and addresses CVE-2004-0230
           (RST spoofing attack), which is present in RFC 793 RST handling. */
        tcp_ack_now(pcb);
 8013496:	687b      	ldr	r3, [r7, #4]
 8013498:	8b5b      	ldrh	r3, [r3, #26]
 801349a:	f043 0302 	orr.w	r3, r3, #2
 801349e:	b29a      	uxth	r2, r3
 80134a0:	687b      	ldr	r3, [r7, #4]
 80134a2:	835a      	strh	r2, [r3, #26]
      }
    }

    if (acceptable) {
 80134a4:	7efb      	ldrb	r3, [r7, #27]
 80134a6:	2b00      	cmp	r3, #0
 80134a8:	d01b      	beq.n	80134e2 <tcp_process+0xca>
      LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_process: Connection RESET\n"));
      LWIP_ASSERT("tcp_input: pcb->state != CLOSED", pcb->state != CLOSED);
 80134aa:	687b      	ldr	r3, [r7, #4]
 80134ac:	7d1b      	ldrb	r3, [r3, #20]
 80134ae:	2b00      	cmp	r3, #0
 80134b0:	d106      	bne.n	80134c0 <tcp_process+0xa8>
 80134b2:	4b7c      	ldr	r3, [pc, #496]	; (80136a4 <tcp_process+0x28c>)
 80134b4:	f44f 724e 	mov.w	r2, #824	; 0x338
 80134b8:	4980      	ldr	r1, [pc, #512]	; (80136bc <tcp_process+0x2a4>)
 80134ba:	487c      	ldr	r0, [pc, #496]	; (80136ac <tcp_process+0x294>)
 80134bc:	f006 fad4 	bl	8019a68 <iprintf>
      recv_flags |= TF_RESET;
 80134c0:	4b7f      	ldr	r3, [pc, #508]	; (80136c0 <tcp_process+0x2a8>)
 80134c2:	781b      	ldrb	r3, [r3, #0]
 80134c4:	f043 0308 	orr.w	r3, r3, #8
 80134c8:	b2da      	uxtb	r2, r3
 80134ca:	4b7d      	ldr	r3, [pc, #500]	; (80136c0 <tcp_process+0x2a8>)
 80134cc:	701a      	strb	r2, [r3, #0]
      tcp_clear_flags(pcb, TF_ACK_DELAY);
 80134ce:	687b      	ldr	r3, [r7, #4]
 80134d0:	8b5b      	ldrh	r3, [r3, #26]
 80134d2:	f023 0301 	bic.w	r3, r3, #1
 80134d6:	b29a      	uxth	r2, r3
 80134d8:	687b      	ldr	r3, [r7, #4]
 80134da:	835a      	strh	r2, [r3, #26]
      return ERR_RST;
 80134dc:	f06f 030d 	mvn.w	r3, #13
 80134e0:	e37a      	b.n	8013bd8 <tcp_process+0x7c0>
    } else {
      LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_process: unacceptable reset seqno %"U32_F" rcv_nxt %"U32_F"\n",
                                    seqno, pcb->rcv_nxt));
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_process: unacceptable reset seqno %"U32_F" rcv_nxt %"U32_F"\n",
                              seqno, pcb->rcv_nxt));
      return ERR_OK;
 80134e2:	2300      	movs	r3, #0
 80134e4:	e378      	b.n	8013bd8 <tcp_process+0x7c0>
    }
  }

  if ((flags & TCP_SYN) && (pcb->state != SYN_SENT && pcb->state != SYN_RCVD)) {
 80134e6:	4b72      	ldr	r3, [pc, #456]	; (80136b0 <tcp_process+0x298>)
 80134e8:	781b      	ldrb	r3, [r3, #0]
 80134ea:	f003 0302 	and.w	r3, r3, #2
 80134ee:	2b00      	cmp	r3, #0
 80134f0:	d010      	beq.n	8013514 <tcp_process+0xfc>
 80134f2:	687b      	ldr	r3, [r7, #4]
 80134f4:	7d1b      	ldrb	r3, [r3, #20]
 80134f6:	2b02      	cmp	r3, #2
 80134f8:	d00c      	beq.n	8013514 <tcp_process+0xfc>
 80134fa:	687b      	ldr	r3, [r7, #4]
 80134fc:	7d1b      	ldrb	r3, [r3, #20]
 80134fe:	2b03      	cmp	r3, #3
 8013500:	d008      	beq.n	8013514 <tcp_process+0xfc>
    /* Cope with new connection attempt after remote end crashed */
    tcp_ack_now(pcb);
 8013502:	687b      	ldr	r3, [r7, #4]
 8013504:	8b5b      	ldrh	r3, [r3, #26]
 8013506:	f043 0302 	orr.w	r3, r3, #2
 801350a:	b29a      	uxth	r2, r3
 801350c:	687b      	ldr	r3, [r7, #4]
 801350e:	835a      	strh	r2, [r3, #26]
    return ERR_OK;
 8013510:	2300      	movs	r3, #0
 8013512:	e361      	b.n	8013bd8 <tcp_process+0x7c0>
  }

  if ((pcb->flags & TF_RXCLOSED) == 0) {
 8013514:	687b      	ldr	r3, [r7, #4]
 8013516:	8b5b      	ldrh	r3, [r3, #26]
 8013518:	f003 0310 	and.w	r3, r3, #16
 801351c:	2b00      	cmp	r3, #0
 801351e:	d103      	bne.n	8013528 <tcp_process+0x110>
    /* Update the PCB (in)activity timer unless rx is closed (see tcp_shutdown) */
    pcb->tmr = tcp_ticks;
 8013520:	4b68      	ldr	r3, [pc, #416]	; (80136c4 <tcp_process+0x2ac>)
 8013522:	681a      	ldr	r2, [r3, #0]
 8013524:	687b      	ldr	r3, [r7, #4]
 8013526:	621a      	str	r2, [r3, #32]
  }
  pcb->keep_cnt_sent = 0;
 8013528:	687b      	ldr	r3, [r7, #4]
 801352a:	2200      	movs	r2, #0
 801352c:	f883 209b 	strb.w	r2, [r3, #155]	; 0x9b
  pcb->persist_probe = 0;
 8013530:	687b      	ldr	r3, [r7, #4]
 8013532:	2200      	movs	r2, #0
 8013534:	f883 209a 	strb.w	r2, [r3, #154]	; 0x9a

  tcp_parseopt(pcb);
 8013538:	6878      	ldr	r0, [r7, #4]
 801353a:	f001 fc2f 	bl	8014d9c <tcp_parseopt>

  /* Do different things depending on the TCP state. */
  switch (pcb->state) {
 801353e:	687b      	ldr	r3, [r7, #4]
 8013540:	7d1b      	ldrb	r3, [r3, #20]
 8013542:	3b02      	subs	r3, #2
 8013544:	2b07      	cmp	r3, #7
 8013546:	f200 8337 	bhi.w	8013bb8 <tcp_process+0x7a0>
 801354a:	a201      	add	r2, pc, #4	; (adr r2, 8013550 <tcp_process+0x138>)
 801354c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8013550:	08013571 	.word	0x08013571
 8013554:	080137a1 	.word	0x080137a1
 8013558:	08013919 	.word	0x08013919
 801355c:	08013943 	.word	0x08013943
 8013560:	08013a67 	.word	0x08013a67
 8013564:	08013919 	.word	0x08013919
 8013568:	08013af3 	.word	0x08013af3
 801356c:	08013b83 	.word	0x08013b83
    case SYN_SENT:
      LWIP_DEBUGF(TCP_INPUT_DEBUG, ("SYN-SENT: ackno %"U32_F" pcb->snd_nxt %"U32_F" unacked %"U32_F"\n", ackno,
                                    pcb->snd_nxt, lwip_ntohl(pcb->unacked->tcphdr->seqno)));
      /* received SYN ACK with expected sequence number? */
      if ((flags & TCP_ACK) && (flags & TCP_SYN)
 8013570:	4b4f      	ldr	r3, [pc, #316]	; (80136b0 <tcp_process+0x298>)
 8013572:	781b      	ldrb	r3, [r3, #0]
 8013574:	f003 0310 	and.w	r3, r3, #16
 8013578:	2b00      	cmp	r3, #0
 801357a:	f000 80e4 	beq.w	8013746 <tcp_process+0x32e>
 801357e:	4b4c      	ldr	r3, [pc, #304]	; (80136b0 <tcp_process+0x298>)
 8013580:	781b      	ldrb	r3, [r3, #0]
 8013582:	f003 0302 	and.w	r3, r3, #2
 8013586:	2b00      	cmp	r3, #0
 8013588:	f000 80dd 	beq.w	8013746 <tcp_process+0x32e>
          && (ackno == pcb->lastack + 1)) {
 801358c:	687b      	ldr	r3, [r7, #4]
 801358e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8013590:	1c5a      	adds	r2, r3, #1
 8013592:	4b48      	ldr	r3, [pc, #288]	; (80136b4 <tcp_process+0x29c>)
 8013594:	681b      	ldr	r3, [r3, #0]
 8013596:	429a      	cmp	r2, r3
 8013598:	f040 80d5 	bne.w	8013746 <tcp_process+0x32e>
        pcb->rcv_nxt = seqno + 1;
 801359c:	4b46      	ldr	r3, [pc, #280]	; (80136b8 <tcp_process+0x2a0>)
 801359e:	681b      	ldr	r3, [r3, #0]
 80135a0:	1c5a      	adds	r2, r3, #1
 80135a2:	687b      	ldr	r3, [r7, #4]
 80135a4:	625a      	str	r2, [r3, #36]	; 0x24
        pcb->rcv_ann_right_edge = pcb->rcv_nxt;
 80135a6:	687b      	ldr	r3, [r7, #4]
 80135a8:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80135aa:	687b      	ldr	r3, [r7, #4]
 80135ac:	62da      	str	r2, [r3, #44]	; 0x2c
        pcb->lastack = ackno;
 80135ae:	4b41      	ldr	r3, [pc, #260]	; (80136b4 <tcp_process+0x29c>)
 80135b0:	681a      	ldr	r2, [r3, #0]
 80135b2:	687b      	ldr	r3, [r7, #4]
 80135b4:	645a      	str	r2, [r3, #68]	; 0x44
        pcb->snd_wnd = tcphdr->wnd;
 80135b6:	4b44      	ldr	r3, [pc, #272]	; (80136c8 <tcp_process+0x2b0>)
 80135b8:	681b      	ldr	r3, [r3, #0]
 80135ba:	89db      	ldrh	r3, [r3, #14]
 80135bc:	b29a      	uxth	r2, r3
 80135be:	687b      	ldr	r3, [r7, #4]
 80135c0:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
        pcb->snd_wnd_max = pcb->snd_wnd;
 80135c4:	687b      	ldr	r3, [r7, #4]
 80135c6:	f8b3 2060 	ldrh.w	r2, [r3, #96]	; 0x60
 80135ca:	687b      	ldr	r3, [r7, #4]
 80135cc:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
        pcb->snd_wl1 = seqno - 1; /* initialise to seqno - 1 to force window update */
 80135d0:	4b39      	ldr	r3, [pc, #228]	; (80136b8 <tcp_process+0x2a0>)
 80135d2:	681b      	ldr	r3, [r3, #0]
 80135d4:	1e5a      	subs	r2, r3, #1
 80135d6:	687b      	ldr	r3, [r7, #4]
 80135d8:	655a      	str	r2, [r3, #84]	; 0x54
        pcb->state = ESTABLISHED;
 80135da:	687b      	ldr	r3, [r7, #4]
 80135dc:	2204      	movs	r2, #4
 80135de:	751a      	strb	r2, [r3, #20]

#if TCP_CALCULATE_EFF_SEND_MSS
        pcb->mss = tcp_eff_send_mss(pcb->mss, &pcb->local_ip, &pcb->remote_ip);
 80135e0:	687b      	ldr	r3, [r7, #4]
 80135e2:	8e5c      	ldrh	r4, [r3, #50]	; 0x32
 80135e4:	687b      	ldr	r3, [r7, #4]
 80135e6:	3304      	adds	r3, #4
 80135e8:	4618      	mov	r0, r3
 80135ea:	f004 fb17 	bl	8017c1c <ip4_route>
 80135ee:	4601      	mov	r1, r0
 80135f0:	687b      	ldr	r3, [r7, #4]
 80135f2:	3304      	adds	r3, #4
 80135f4:	461a      	mov	r2, r3
 80135f6:	4620      	mov	r0, r4
 80135f8:	f7ff f88c 	bl	8012714 <tcp_eff_send_mss_netif>
 80135fc:	4603      	mov	r3, r0
 80135fe:	461a      	mov	r2, r3
 8013600:	687b      	ldr	r3, [r7, #4]
 8013602:	865a      	strh	r2, [r3, #50]	; 0x32
#endif /* TCP_CALCULATE_EFF_SEND_MSS */

        pcb->cwnd = LWIP_TCP_CALC_INITIAL_CWND(pcb->mss);
 8013604:	687b      	ldr	r3, [r7, #4]
 8013606:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8013608:	009a      	lsls	r2, r3, #2
 801360a:	687b      	ldr	r3, [r7, #4]
 801360c:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 801360e:	005b      	lsls	r3, r3, #1
 8013610:	f241 111c 	movw	r1, #4380	; 0x111c
 8013614:	428b      	cmp	r3, r1
 8013616:	bf38      	it	cc
 8013618:	460b      	movcc	r3, r1
 801361a:	429a      	cmp	r2, r3
 801361c:	d204      	bcs.n	8013628 <tcp_process+0x210>
 801361e:	687b      	ldr	r3, [r7, #4]
 8013620:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8013622:	009b      	lsls	r3, r3, #2
 8013624:	b29b      	uxth	r3, r3
 8013626:	e00d      	b.n	8013644 <tcp_process+0x22c>
 8013628:	687b      	ldr	r3, [r7, #4]
 801362a:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 801362c:	005b      	lsls	r3, r3, #1
 801362e:	f241 121c 	movw	r2, #4380	; 0x111c
 8013632:	4293      	cmp	r3, r2
 8013634:	d904      	bls.n	8013640 <tcp_process+0x228>
 8013636:	687b      	ldr	r3, [r7, #4]
 8013638:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 801363a:	005b      	lsls	r3, r3, #1
 801363c:	b29b      	uxth	r3, r3
 801363e:	e001      	b.n	8013644 <tcp_process+0x22c>
 8013640:	f241 131c 	movw	r3, #4380	; 0x111c
 8013644:	687a      	ldr	r2, [r7, #4]
 8013646:	f8a2 3048 	strh.w	r3, [r2, #72]	; 0x48
        LWIP_DEBUGF(TCP_CWND_DEBUG, ("tcp_process (SENT): cwnd %"TCPWNDSIZE_F
                                     " ssthresh %"TCPWNDSIZE_F"\n",
                                     pcb->cwnd, pcb->ssthresh));
        LWIP_ASSERT("pcb->snd_queuelen > 0", (pcb->snd_queuelen > 0));
 801364a:	687b      	ldr	r3, [r7, #4]
 801364c:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 8013650:	2b00      	cmp	r3, #0
 8013652:	d106      	bne.n	8013662 <tcp_process+0x24a>
 8013654:	4b13      	ldr	r3, [pc, #76]	; (80136a4 <tcp_process+0x28c>)
 8013656:	f44f 725b 	mov.w	r2, #876	; 0x36c
 801365a:	491c      	ldr	r1, [pc, #112]	; (80136cc <tcp_process+0x2b4>)
 801365c:	4813      	ldr	r0, [pc, #76]	; (80136ac <tcp_process+0x294>)
 801365e:	f006 fa03 	bl	8019a68 <iprintf>
        --pcb->snd_queuelen;
 8013662:	687b      	ldr	r3, [r7, #4]
 8013664:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 8013668:	3b01      	subs	r3, #1
 801366a:	b29a      	uxth	r2, r3
 801366c:	687b      	ldr	r3, [r7, #4]
 801366e:	f8a3 2066 	strh.w	r2, [r3, #102]	; 0x66
        LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_process: SYN-SENT --queuelen %"TCPWNDSIZE_F"\n", (tcpwnd_size_t)pcb->snd_queuelen));
        rseg = pcb->unacked;
 8013672:	687b      	ldr	r3, [r7, #4]
 8013674:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8013676:	61fb      	str	r3, [r7, #28]
        if (rseg == NULL) {
 8013678:	69fb      	ldr	r3, [r7, #28]
 801367a:	2b00      	cmp	r3, #0
 801367c:	d12a      	bne.n	80136d4 <tcp_process+0x2bc>
          /* might happen if tcp_output fails in tcp_rexmit_rto()
             in which case the segment is on the unsent list */
          rseg = pcb->unsent;
 801367e:	687b      	ldr	r3, [r7, #4]
 8013680:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8013682:	61fb      	str	r3, [r7, #28]
          LWIP_ASSERT("no segment to free", rseg != NULL);
 8013684:	69fb      	ldr	r3, [r7, #28]
 8013686:	2b00      	cmp	r3, #0
 8013688:	d106      	bne.n	8013698 <tcp_process+0x280>
 801368a:	4b06      	ldr	r3, [pc, #24]	; (80136a4 <tcp_process+0x28c>)
 801368c:	f44f 725d 	mov.w	r2, #884	; 0x374
 8013690:	490f      	ldr	r1, [pc, #60]	; (80136d0 <tcp_process+0x2b8>)
 8013692:	4806      	ldr	r0, [pc, #24]	; (80136ac <tcp_process+0x294>)
 8013694:	f006 f9e8 	bl	8019a68 <iprintf>
          pcb->unsent = rseg->next;
 8013698:	69fb      	ldr	r3, [r7, #28]
 801369a:	681a      	ldr	r2, [r3, #0]
 801369c:	687b      	ldr	r3, [r7, #4]
 801369e:	66da      	str	r2, [r3, #108]	; 0x6c
 80136a0:	e01c      	b.n	80136dc <tcp_process+0x2c4>
 80136a2:	bf00      	nop
 80136a4:	0801d41c 	.word	0x0801d41c
 80136a8:	0801d654 	.word	0x0801d654
 80136ac:	0801d468 	.word	0x0801d468
 80136b0:	20007088 	.word	0x20007088
 80136b4:	20007080 	.word	0x20007080
 80136b8:	2000707c 	.word	0x2000707c
 80136bc:	0801d670 	.word	0x0801d670
 80136c0:	20007089 	.word	0x20007089
 80136c4:	20007044 	.word	0x20007044
 80136c8:	2000706c 	.word	0x2000706c
 80136cc:	0801d690 	.word	0x0801d690
 80136d0:	0801d6a8 	.word	0x0801d6a8
        } else {
          pcb->unacked = rseg->next;
 80136d4:	69fb      	ldr	r3, [r7, #28]
 80136d6:	681a      	ldr	r2, [r3, #0]
 80136d8:	687b      	ldr	r3, [r7, #4]
 80136da:	671a      	str	r2, [r3, #112]	; 0x70
        }
        tcp_seg_free(rseg);
 80136dc:	69f8      	ldr	r0, [r7, #28]
 80136de:	f7fe fd22 	bl	8012126 <tcp_seg_free>

        /* If there's nothing left to acknowledge, stop the retransmit
           timer, otherwise reset it to start again */
        if (pcb->unacked == NULL) {
 80136e2:	687b      	ldr	r3, [r7, #4]
 80136e4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80136e6:	2b00      	cmp	r3, #0
 80136e8:	d104      	bne.n	80136f4 <tcp_process+0x2dc>
          pcb->rtime = -1;
 80136ea:	687b      	ldr	r3, [r7, #4]
 80136ec:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80136f0:	861a      	strh	r2, [r3, #48]	; 0x30
 80136f2:	e006      	b.n	8013702 <tcp_process+0x2ea>
        } else {
          pcb->rtime = 0;
 80136f4:	687b      	ldr	r3, [r7, #4]
 80136f6:	2200      	movs	r2, #0
 80136f8:	861a      	strh	r2, [r3, #48]	; 0x30
          pcb->nrtx = 0;
 80136fa:	687b      	ldr	r3, [r7, #4]
 80136fc:	2200      	movs	r2, #0
 80136fe:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
        }

        /* Call the user specified function to call when successfully
         * connected. */
        TCP_EVENT_CONNECTED(pcb, ERR_OK, err);
 8013702:	687b      	ldr	r3, [r7, #4]
 8013704:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8013708:	2b00      	cmp	r3, #0
 801370a:	d00a      	beq.n	8013722 <tcp_process+0x30a>
 801370c:	687b      	ldr	r3, [r7, #4]
 801370e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8013712:	687a      	ldr	r2, [r7, #4]
 8013714:	6910      	ldr	r0, [r2, #16]
 8013716:	2200      	movs	r2, #0
 8013718:	6879      	ldr	r1, [r7, #4]
 801371a:	4798      	blx	r3
 801371c:	4603      	mov	r3, r0
 801371e:	76bb      	strb	r3, [r7, #26]
 8013720:	e001      	b.n	8013726 <tcp_process+0x30e>
 8013722:	2300      	movs	r3, #0
 8013724:	76bb      	strb	r3, [r7, #26]
        if (err == ERR_ABRT) {
 8013726:	f997 301a 	ldrsb.w	r3, [r7, #26]
 801372a:	f113 0f0d 	cmn.w	r3, #13
 801372e:	d102      	bne.n	8013736 <tcp_process+0x31e>
          return ERR_ABRT;
 8013730:	f06f 030c 	mvn.w	r3, #12
 8013734:	e250      	b.n	8013bd8 <tcp_process+0x7c0>
        }
        tcp_ack_now(pcb);
 8013736:	687b      	ldr	r3, [r7, #4]
 8013738:	8b5b      	ldrh	r3, [r3, #26]
 801373a:	f043 0302 	orr.w	r3, r3, #2
 801373e:	b29a      	uxth	r2, r3
 8013740:	687b      	ldr	r3, [r7, #4]
 8013742:	835a      	strh	r2, [r3, #26]
        if (pcb->nrtx < TCP_SYNMAXRTX) {
          pcb->rtime = 0;
          tcp_rexmit_rto(pcb);
        }
      }
      break;
 8013744:	e23a      	b.n	8013bbc <tcp_process+0x7a4>
      else if (flags & TCP_ACK) {
 8013746:	4b98      	ldr	r3, [pc, #608]	; (80139a8 <tcp_process+0x590>)
 8013748:	781b      	ldrb	r3, [r3, #0]
 801374a:	f003 0310 	and.w	r3, r3, #16
 801374e:	2b00      	cmp	r3, #0
 8013750:	f000 8234 	beq.w	8013bbc <tcp_process+0x7a4>
        tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 8013754:	4b95      	ldr	r3, [pc, #596]	; (80139ac <tcp_process+0x594>)
 8013756:	6819      	ldr	r1, [r3, #0]
 8013758:	4b95      	ldr	r3, [pc, #596]	; (80139b0 <tcp_process+0x598>)
 801375a:	881b      	ldrh	r3, [r3, #0]
 801375c:	461a      	mov	r2, r3
 801375e:	4b95      	ldr	r3, [pc, #596]	; (80139b4 <tcp_process+0x59c>)
 8013760:	681b      	ldr	r3, [r3, #0]
 8013762:	18d0      	adds	r0, r2, r3
                ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 8013764:	4b94      	ldr	r3, [pc, #592]	; (80139b8 <tcp_process+0x5a0>)
 8013766:	681b      	ldr	r3, [r3, #0]
        tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 8013768:	885b      	ldrh	r3, [r3, #2]
 801376a:	b29b      	uxth	r3, r3
                ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 801376c:	4a92      	ldr	r2, [pc, #584]	; (80139b8 <tcp_process+0x5a0>)
 801376e:	6812      	ldr	r2, [r2, #0]
        tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 8013770:	8812      	ldrh	r2, [r2, #0]
 8013772:	b292      	uxth	r2, r2
 8013774:	9202      	str	r2, [sp, #8]
 8013776:	9301      	str	r3, [sp, #4]
 8013778:	4b90      	ldr	r3, [pc, #576]	; (80139bc <tcp_process+0x5a4>)
 801377a:	9300      	str	r3, [sp, #0]
 801377c:	4b90      	ldr	r3, [pc, #576]	; (80139c0 <tcp_process+0x5a8>)
 801377e:	4602      	mov	r2, r0
 8013780:	6878      	ldr	r0, [r7, #4]
 8013782:	f002 fc85 	bl	8016090 <tcp_rst>
        if (pcb->nrtx < TCP_SYNMAXRTX) {
 8013786:	687b      	ldr	r3, [r7, #4]
 8013788:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 801378c:	2b05      	cmp	r3, #5
 801378e:	f200 8215 	bhi.w	8013bbc <tcp_process+0x7a4>
          pcb->rtime = 0;
 8013792:	687b      	ldr	r3, [r7, #4]
 8013794:	2200      	movs	r2, #0
 8013796:	861a      	strh	r2, [r3, #48]	; 0x30
          tcp_rexmit_rto(pcb);
 8013798:	6878      	ldr	r0, [r7, #4]
 801379a:	f002 fa51 	bl	8015c40 <tcp_rexmit_rto>
      break;
 801379e:	e20d      	b.n	8013bbc <tcp_process+0x7a4>
    case SYN_RCVD:
      if (flags & TCP_ACK) {
 80137a0:	4b81      	ldr	r3, [pc, #516]	; (80139a8 <tcp_process+0x590>)
 80137a2:	781b      	ldrb	r3, [r3, #0]
 80137a4:	f003 0310 	and.w	r3, r3, #16
 80137a8:	2b00      	cmp	r3, #0
 80137aa:	f000 80a1 	beq.w	80138f0 <tcp_process+0x4d8>
        /* expected ACK number? */
        if (TCP_SEQ_BETWEEN(ackno, pcb->lastack + 1, pcb->snd_nxt)) {
 80137ae:	4b7f      	ldr	r3, [pc, #508]	; (80139ac <tcp_process+0x594>)
 80137b0:	681a      	ldr	r2, [r3, #0]
 80137b2:	687b      	ldr	r3, [r7, #4]
 80137b4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80137b6:	1ad3      	subs	r3, r2, r3
 80137b8:	3b01      	subs	r3, #1
 80137ba:	2b00      	cmp	r3, #0
 80137bc:	db7e      	blt.n	80138bc <tcp_process+0x4a4>
 80137be:	4b7b      	ldr	r3, [pc, #492]	; (80139ac <tcp_process+0x594>)
 80137c0:	681a      	ldr	r2, [r3, #0]
 80137c2:	687b      	ldr	r3, [r7, #4]
 80137c4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80137c6:	1ad3      	subs	r3, r2, r3
 80137c8:	2b00      	cmp	r3, #0
 80137ca:	dc77      	bgt.n	80138bc <tcp_process+0x4a4>
          pcb->state = ESTABLISHED;
 80137cc:	687b      	ldr	r3, [r7, #4]
 80137ce:	2204      	movs	r2, #4
 80137d0:	751a      	strb	r2, [r3, #20]
          LWIP_DEBUGF(TCP_DEBUG, ("TCP connection established %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
#if LWIP_CALLBACK_API || TCP_LISTEN_BACKLOG
          if (pcb->listener == NULL) {
 80137d2:	687b      	ldr	r3, [r7, #4]
 80137d4:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80137d6:	2b00      	cmp	r3, #0
 80137d8:	d102      	bne.n	80137e0 <tcp_process+0x3c8>
            /* listen pcb might be closed by now */
            err = ERR_VAL;
 80137da:	23fa      	movs	r3, #250	; 0xfa
 80137dc:	76bb      	strb	r3, [r7, #26]
 80137de:	e01d      	b.n	801381c <tcp_process+0x404>
          } else
#endif /* LWIP_CALLBACK_API || TCP_LISTEN_BACKLOG */
          {
#if LWIP_CALLBACK_API
            LWIP_ASSERT("pcb->listener->accept != NULL", pcb->listener->accept != NULL);
 80137e0:	687b      	ldr	r3, [r7, #4]
 80137e2:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80137e4:	699b      	ldr	r3, [r3, #24]
 80137e6:	2b00      	cmp	r3, #0
 80137e8:	d106      	bne.n	80137f8 <tcp_process+0x3e0>
 80137ea:	4b76      	ldr	r3, [pc, #472]	; (80139c4 <tcp_process+0x5ac>)
 80137ec:	f44f 726a 	mov.w	r2, #936	; 0x3a8
 80137f0:	4975      	ldr	r1, [pc, #468]	; (80139c8 <tcp_process+0x5b0>)
 80137f2:	4876      	ldr	r0, [pc, #472]	; (80139cc <tcp_process+0x5b4>)
 80137f4:	f006 f938 	bl	8019a68 <iprintf>
#endif
            tcp_backlog_accepted(pcb);
            /* Call the accept function. */
            TCP_EVENT_ACCEPT(pcb->listener, pcb, pcb->callback_arg, ERR_OK, err);
 80137f8:	687b      	ldr	r3, [r7, #4]
 80137fa:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80137fc:	699b      	ldr	r3, [r3, #24]
 80137fe:	2b00      	cmp	r3, #0
 8013800:	d00a      	beq.n	8013818 <tcp_process+0x400>
 8013802:	687b      	ldr	r3, [r7, #4]
 8013804:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8013806:	699b      	ldr	r3, [r3, #24]
 8013808:	687a      	ldr	r2, [r7, #4]
 801380a:	6910      	ldr	r0, [r2, #16]
 801380c:	2200      	movs	r2, #0
 801380e:	6879      	ldr	r1, [r7, #4]
 8013810:	4798      	blx	r3
 8013812:	4603      	mov	r3, r0
 8013814:	76bb      	strb	r3, [r7, #26]
 8013816:	e001      	b.n	801381c <tcp_process+0x404>
 8013818:	23f0      	movs	r3, #240	; 0xf0
 801381a:	76bb      	strb	r3, [r7, #26]
          }
          if (err != ERR_OK) {
 801381c:	f997 301a 	ldrsb.w	r3, [r7, #26]
 8013820:	2b00      	cmp	r3, #0
 8013822:	d00a      	beq.n	801383a <tcp_process+0x422>
            /* If the accept function returns with an error, we abort
             * the connection. */
            /* Already aborted? */
            if (err != ERR_ABRT) {
 8013824:	f997 301a 	ldrsb.w	r3, [r7, #26]
 8013828:	f113 0f0d 	cmn.w	r3, #13
 801382c:	d002      	beq.n	8013834 <tcp_process+0x41c>
              tcp_abort(pcb);
 801382e:	6878      	ldr	r0, [r7, #4]
 8013830:	f7fd ff8a 	bl	8011748 <tcp_abort>
            }
            return ERR_ABRT;
 8013834:	f06f 030c 	mvn.w	r3, #12
 8013838:	e1ce      	b.n	8013bd8 <tcp_process+0x7c0>
          }
          /* If there was any data contained within this ACK,
           * we'd better pass it on to the application as well. */
          tcp_receive(pcb);
 801383a:	6878      	ldr	r0, [r7, #4]
 801383c:	f000 fae0 	bl	8013e00 <tcp_receive>

          /* Prevent ACK for SYN to generate a sent event */
          if (recv_acked != 0) {
 8013840:	4b63      	ldr	r3, [pc, #396]	; (80139d0 <tcp_process+0x5b8>)
 8013842:	881b      	ldrh	r3, [r3, #0]
 8013844:	2b00      	cmp	r3, #0
 8013846:	d005      	beq.n	8013854 <tcp_process+0x43c>
            recv_acked--;
 8013848:	4b61      	ldr	r3, [pc, #388]	; (80139d0 <tcp_process+0x5b8>)
 801384a:	881b      	ldrh	r3, [r3, #0]
 801384c:	3b01      	subs	r3, #1
 801384e:	b29a      	uxth	r2, r3
 8013850:	4b5f      	ldr	r3, [pc, #380]	; (80139d0 <tcp_process+0x5b8>)
 8013852:	801a      	strh	r2, [r3, #0]
          }

          pcb->cwnd = LWIP_TCP_CALC_INITIAL_CWND(pcb->mss);
 8013854:	687b      	ldr	r3, [r7, #4]
 8013856:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8013858:	009a      	lsls	r2, r3, #2
 801385a:	687b      	ldr	r3, [r7, #4]
 801385c:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 801385e:	005b      	lsls	r3, r3, #1
 8013860:	f241 111c 	movw	r1, #4380	; 0x111c
 8013864:	428b      	cmp	r3, r1
 8013866:	bf38      	it	cc
 8013868:	460b      	movcc	r3, r1
 801386a:	429a      	cmp	r2, r3
 801386c:	d204      	bcs.n	8013878 <tcp_process+0x460>
 801386e:	687b      	ldr	r3, [r7, #4]
 8013870:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8013872:	009b      	lsls	r3, r3, #2
 8013874:	b29b      	uxth	r3, r3
 8013876:	e00d      	b.n	8013894 <tcp_process+0x47c>
 8013878:	687b      	ldr	r3, [r7, #4]
 801387a:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 801387c:	005b      	lsls	r3, r3, #1
 801387e:	f241 121c 	movw	r2, #4380	; 0x111c
 8013882:	4293      	cmp	r3, r2
 8013884:	d904      	bls.n	8013890 <tcp_process+0x478>
 8013886:	687b      	ldr	r3, [r7, #4]
 8013888:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 801388a:	005b      	lsls	r3, r3, #1
 801388c:	b29b      	uxth	r3, r3
 801388e:	e001      	b.n	8013894 <tcp_process+0x47c>
 8013890:	f241 131c 	movw	r3, #4380	; 0x111c
 8013894:	687a      	ldr	r2, [r7, #4]
 8013896:	f8a2 3048 	strh.w	r3, [r2, #72]	; 0x48
          LWIP_DEBUGF(TCP_CWND_DEBUG, ("tcp_process (SYN_RCVD): cwnd %"TCPWNDSIZE_F
                                       " ssthresh %"TCPWNDSIZE_F"\n",
                                       pcb->cwnd, pcb->ssthresh));

          if (recv_flags & TF_GOT_FIN) {
 801389a:	4b4e      	ldr	r3, [pc, #312]	; (80139d4 <tcp_process+0x5bc>)
 801389c:	781b      	ldrb	r3, [r3, #0]
 801389e:	f003 0320 	and.w	r3, r3, #32
 80138a2:	2b00      	cmp	r3, #0
 80138a4:	d037      	beq.n	8013916 <tcp_process+0x4fe>
            tcp_ack_now(pcb);
 80138a6:	687b      	ldr	r3, [r7, #4]
 80138a8:	8b5b      	ldrh	r3, [r3, #26]
 80138aa:	f043 0302 	orr.w	r3, r3, #2
 80138ae:	b29a      	uxth	r2, r3
 80138b0:	687b      	ldr	r3, [r7, #4]
 80138b2:	835a      	strh	r2, [r3, #26]
            pcb->state = CLOSE_WAIT;
 80138b4:	687b      	ldr	r3, [r7, #4]
 80138b6:	2207      	movs	r2, #7
 80138b8:	751a      	strb	r2, [r3, #20]
          if (recv_flags & TF_GOT_FIN) {
 80138ba:	e02c      	b.n	8013916 <tcp_process+0x4fe>
          }
        } else {
          /* incorrect ACK number, send RST */
          tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 80138bc:	4b3b      	ldr	r3, [pc, #236]	; (80139ac <tcp_process+0x594>)
 80138be:	6819      	ldr	r1, [r3, #0]
 80138c0:	4b3b      	ldr	r3, [pc, #236]	; (80139b0 <tcp_process+0x598>)
 80138c2:	881b      	ldrh	r3, [r3, #0]
 80138c4:	461a      	mov	r2, r3
 80138c6:	4b3b      	ldr	r3, [pc, #236]	; (80139b4 <tcp_process+0x59c>)
 80138c8:	681b      	ldr	r3, [r3, #0]
 80138ca:	18d0      	adds	r0, r2, r3
                  ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 80138cc:	4b3a      	ldr	r3, [pc, #232]	; (80139b8 <tcp_process+0x5a0>)
 80138ce:	681b      	ldr	r3, [r3, #0]
          tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 80138d0:	885b      	ldrh	r3, [r3, #2]
 80138d2:	b29b      	uxth	r3, r3
                  ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 80138d4:	4a38      	ldr	r2, [pc, #224]	; (80139b8 <tcp_process+0x5a0>)
 80138d6:	6812      	ldr	r2, [r2, #0]
          tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 80138d8:	8812      	ldrh	r2, [r2, #0]
 80138da:	b292      	uxth	r2, r2
 80138dc:	9202      	str	r2, [sp, #8]
 80138de:	9301      	str	r3, [sp, #4]
 80138e0:	4b36      	ldr	r3, [pc, #216]	; (80139bc <tcp_process+0x5a4>)
 80138e2:	9300      	str	r3, [sp, #0]
 80138e4:	4b36      	ldr	r3, [pc, #216]	; (80139c0 <tcp_process+0x5a8>)
 80138e6:	4602      	mov	r2, r0
 80138e8:	6878      	ldr	r0, [r7, #4]
 80138ea:	f002 fbd1 	bl	8016090 <tcp_rst>
        }
      } else if ((flags & TCP_SYN) && (seqno == pcb->rcv_nxt - 1)) {
        /* Looks like another copy of the SYN - retransmit our SYN-ACK */
        tcp_rexmit(pcb);
      }
      break;
 80138ee:	e167      	b.n	8013bc0 <tcp_process+0x7a8>
      } else if ((flags & TCP_SYN) && (seqno == pcb->rcv_nxt - 1)) {
 80138f0:	4b2d      	ldr	r3, [pc, #180]	; (80139a8 <tcp_process+0x590>)
 80138f2:	781b      	ldrb	r3, [r3, #0]
 80138f4:	f003 0302 	and.w	r3, r3, #2
 80138f8:	2b00      	cmp	r3, #0
 80138fa:	f000 8161 	beq.w	8013bc0 <tcp_process+0x7a8>
 80138fe:	687b      	ldr	r3, [r7, #4]
 8013900:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8013902:	1e5a      	subs	r2, r3, #1
 8013904:	4b2b      	ldr	r3, [pc, #172]	; (80139b4 <tcp_process+0x59c>)
 8013906:	681b      	ldr	r3, [r3, #0]
 8013908:	429a      	cmp	r2, r3
 801390a:	f040 8159 	bne.w	8013bc0 <tcp_process+0x7a8>
        tcp_rexmit(pcb);
 801390e:	6878      	ldr	r0, [r7, #4]
 8013910:	f002 f9b8 	bl	8015c84 <tcp_rexmit>
      break;
 8013914:	e154      	b.n	8013bc0 <tcp_process+0x7a8>
 8013916:	e153      	b.n	8013bc0 <tcp_process+0x7a8>
    case CLOSE_WAIT:
    /* FALLTHROUGH */
    case ESTABLISHED:
      tcp_receive(pcb);
 8013918:	6878      	ldr	r0, [r7, #4]
 801391a:	f000 fa71 	bl	8013e00 <tcp_receive>
      if (recv_flags & TF_GOT_FIN) { /* passive close */
 801391e:	4b2d      	ldr	r3, [pc, #180]	; (80139d4 <tcp_process+0x5bc>)
 8013920:	781b      	ldrb	r3, [r3, #0]
 8013922:	f003 0320 	and.w	r3, r3, #32
 8013926:	2b00      	cmp	r3, #0
 8013928:	f000 814c 	beq.w	8013bc4 <tcp_process+0x7ac>
        tcp_ack_now(pcb);
 801392c:	687b      	ldr	r3, [r7, #4]
 801392e:	8b5b      	ldrh	r3, [r3, #26]
 8013930:	f043 0302 	orr.w	r3, r3, #2
 8013934:	b29a      	uxth	r2, r3
 8013936:	687b      	ldr	r3, [r7, #4]
 8013938:	835a      	strh	r2, [r3, #26]
        pcb->state = CLOSE_WAIT;
 801393a:	687b      	ldr	r3, [r7, #4]
 801393c:	2207      	movs	r2, #7
 801393e:	751a      	strb	r2, [r3, #20]
      }
      break;
 8013940:	e140      	b.n	8013bc4 <tcp_process+0x7ac>
    case FIN_WAIT_1:
      tcp_receive(pcb);
 8013942:	6878      	ldr	r0, [r7, #4]
 8013944:	f000 fa5c 	bl	8013e00 <tcp_receive>
      if (recv_flags & TF_GOT_FIN) {
 8013948:	4b22      	ldr	r3, [pc, #136]	; (80139d4 <tcp_process+0x5bc>)
 801394a:	781b      	ldrb	r3, [r3, #0]
 801394c:	f003 0320 	and.w	r3, r3, #32
 8013950:	2b00      	cmp	r3, #0
 8013952:	d071      	beq.n	8013a38 <tcp_process+0x620>
        if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
 8013954:	4b14      	ldr	r3, [pc, #80]	; (80139a8 <tcp_process+0x590>)
 8013956:	781b      	ldrb	r3, [r3, #0]
 8013958:	f003 0310 	and.w	r3, r3, #16
 801395c:	2b00      	cmp	r3, #0
 801395e:	d060      	beq.n	8013a22 <tcp_process+0x60a>
 8013960:	687b      	ldr	r3, [r7, #4]
 8013962:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8013964:	4b11      	ldr	r3, [pc, #68]	; (80139ac <tcp_process+0x594>)
 8013966:	681b      	ldr	r3, [r3, #0]
 8013968:	429a      	cmp	r2, r3
 801396a:	d15a      	bne.n	8013a22 <tcp_process+0x60a>
            pcb->unsent == NULL) {
 801396c:	687b      	ldr	r3, [r7, #4]
 801396e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
        if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
 8013970:	2b00      	cmp	r3, #0
 8013972:	d156      	bne.n	8013a22 <tcp_process+0x60a>
          LWIP_DEBUGF(TCP_DEBUG,
                      ("TCP connection closed: FIN_WAIT_1 %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
          tcp_ack_now(pcb);
 8013974:	687b      	ldr	r3, [r7, #4]
 8013976:	8b5b      	ldrh	r3, [r3, #26]
 8013978:	f043 0302 	orr.w	r3, r3, #2
 801397c:	b29a      	uxth	r2, r3
 801397e:	687b      	ldr	r3, [r7, #4]
 8013980:	835a      	strh	r2, [r3, #26]
          tcp_pcb_purge(pcb);
 8013982:	6878      	ldr	r0, [r7, #4]
 8013984:	f7fe fdbc 	bl	8012500 <tcp_pcb_purge>
          TCP_RMV_ACTIVE(pcb);
 8013988:	4b13      	ldr	r3, [pc, #76]	; (80139d8 <tcp_process+0x5c0>)
 801398a:	681b      	ldr	r3, [r3, #0]
 801398c:	687a      	ldr	r2, [r7, #4]
 801398e:	429a      	cmp	r2, r3
 8013990:	d105      	bne.n	801399e <tcp_process+0x586>
 8013992:	4b11      	ldr	r3, [pc, #68]	; (80139d8 <tcp_process+0x5c0>)
 8013994:	681b      	ldr	r3, [r3, #0]
 8013996:	68db      	ldr	r3, [r3, #12]
 8013998:	4a0f      	ldr	r2, [pc, #60]	; (80139d8 <tcp_process+0x5c0>)
 801399a:	6013      	str	r3, [r2, #0]
 801399c:	e02e      	b.n	80139fc <tcp_process+0x5e4>
 801399e:	4b0e      	ldr	r3, [pc, #56]	; (80139d8 <tcp_process+0x5c0>)
 80139a0:	681b      	ldr	r3, [r3, #0]
 80139a2:	617b      	str	r3, [r7, #20]
 80139a4:	e027      	b.n	80139f6 <tcp_process+0x5de>
 80139a6:	bf00      	nop
 80139a8:	20007088 	.word	0x20007088
 80139ac:	20007080 	.word	0x20007080
 80139b0:	20007086 	.word	0x20007086
 80139b4:	2000707c 	.word	0x2000707c
 80139b8:	2000706c 	.word	0x2000706c
 80139bc:	20000778 	.word	0x20000778
 80139c0:	2000077c 	.word	0x2000077c
 80139c4:	0801d41c 	.word	0x0801d41c
 80139c8:	0801d6bc 	.word	0x0801d6bc
 80139cc:	0801d468 	.word	0x0801d468
 80139d0:	20007084 	.word	0x20007084
 80139d4:	20007089 	.word	0x20007089
 80139d8:	20007050 	.word	0x20007050
 80139dc:	697b      	ldr	r3, [r7, #20]
 80139de:	68db      	ldr	r3, [r3, #12]
 80139e0:	687a      	ldr	r2, [r7, #4]
 80139e2:	429a      	cmp	r2, r3
 80139e4:	d104      	bne.n	80139f0 <tcp_process+0x5d8>
 80139e6:	687b      	ldr	r3, [r7, #4]
 80139e8:	68da      	ldr	r2, [r3, #12]
 80139ea:	697b      	ldr	r3, [r7, #20]
 80139ec:	60da      	str	r2, [r3, #12]
 80139ee:	e005      	b.n	80139fc <tcp_process+0x5e4>
 80139f0:	697b      	ldr	r3, [r7, #20]
 80139f2:	68db      	ldr	r3, [r3, #12]
 80139f4:	617b      	str	r3, [r7, #20]
 80139f6:	697b      	ldr	r3, [r7, #20]
 80139f8:	2b00      	cmp	r3, #0
 80139fa:	d1ef      	bne.n	80139dc <tcp_process+0x5c4>
 80139fc:	687b      	ldr	r3, [r7, #4]
 80139fe:	2200      	movs	r2, #0
 8013a00:	60da      	str	r2, [r3, #12]
 8013a02:	4b77      	ldr	r3, [pc, #476]	; (8013be0 <tcp_process+0x7c8>)
 8013a04:	2201      	movs	r2, #1
 8013a06:	701a      	strb	r2, [r3, #0]
          pcb->state = TIME_WAIT;
 8013a08:	687b      	ldr	r3, [r7, #4]
 8013a0a:	220a      	movs	r2, #10
 8013a0c:	751a      	strb	r2, [r3, #20]
          TCP_REG(&tcp_tw_pcbs, pcb);
 8013a0e:	4b75      	ldr	r3, [pc, #468]	; (8013be4 <tcp_process+0x7cc>)
 8013a10:	681a      	ldr	r2, [r3, #0]
 8013a12:	687b      	ldr	r3, [r7, #4]
 8013a14:	60da      	str	r2, [r3, #12]
 8013a16:	4a73      	ldr	r2, [pc, #460]	; (8013be4 <tcp_process+0x7cc>)
 8013a18:	687b      	ldr	r3, [r7, #4]
 8013a1a:	6013      	str	r3, [r2, #0]
 8013a1c:	f002 fcfa 	bl	8016414 <tcp_timer_needed>
        }
      } else if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
                 pcb->unsent == NULL) {
        pcb->state = FIN_WAIT_2;
      }
      break;
 8013a20:	e0d2      	b.n	8013bc8 <tcp_process+0x7b0>
          tcp_ack_now(pcb);
 8013a22:	687b      	ldr	r3, [r7, #4]
 8013a24:	8b5b      	ldrh	r3, [r3, #26]
 8013a26:	f043 0302 	orr.w	r3, r3, #2
 8013a2a:	b29a      	uxth	r2, r3
 8013a2c:	687b      	ldr	r3, [r7, #4]
 8013a2e:	835a      	strh	r2, [r3, #26]
          pcb->state = CLOSING;
 8013a30:	687b      	ldr	r3, [r7, #4]
 8013a32:	2208      	movs	r2, #8
 8013a34:	751a      	strb	r2, [r3, #20]
      break;
 8013a36:	e0c7      	b.n	8013bc8 <tcp_process+0x7b0>
      } else if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
 8013a38:	4b6b      	ldr	r3, [pc, #428]	; (8013be8 <tcp_process+0x7d0>)
 8013a3a:	781b      	ldrb	r3, [r3, #0]
 8013a3c:	f003 0310 	and.w	r3, r3, #16
 8013a40:	2b00      	cmp	r3, #0
 8013a42:	f000 80c1 	beq.w	8013bc8 <tcp_process+0x7b0>
 8013a46:	687b      	ldr	r3, [r7, #4]
 8013a48:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8013a4a:	4b68      	ldr	r3, [pc, #416]	; (8013bec <tcp_process+0x7d4>)
 8013a4c:	681b      	ldr	r3, [r3, #0]
 8013a4e:	429a      	cmp	r2, r3
 8013a50:	f040 80ba 	bne.w	8013bc8 <tcp_process+0x7b0>
                 pcb->unsent == NULL) {
 8013a54:	687b      	ldr	r3, [r7, #4]
 8013a56:	6edb      	ldr	r3, [r3, #108]	; 0x6c
      } else if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
 8013a58:	2b00      	cmp	r3, #0
 8013a5a:	f040 80b5 	bne.w	8013bc8 <tcp_process+0x7b0>
        pcb->state = FIN_WAIT_2;
 8013a5e:	687b      	ldr	r3, [r7, #4]
 8013a60:	2206      	movs	r2, #6
 8013a62:	751a      	strb	r2, [r3, #20]
      break;
 8013a64:	e0b0      	b.n	8013bc8 <tcp_process+0x7b0>
    case FIN_WAIT_2:
      tcp_receive(pcb);
 8013a66:	6878      	ldr	r0, [r7, #4]
 8013a68:	f000 f9ca 	bl	8013e00 <tcp_receive>
      if (recv_flags & TF_GOT_FIN) {
 8013a6c:	4b60      	ldr	r3, [pc, #384]	; (8013bf0 <tcp_process+0x7d8>)
 8013a6e:	781b      	ldrb	r3, [r3, #0]
 8013a70:	f003 0320 	and.w	r3, r3, #32
 8013a74:	2b00      	cmp	r3, #0
 8013a76:	f000 80a9 	beq.w	8013bcc <tcp_process+0x7b4>
        LWIP_DEBUGF(TCP_DEBUG, ("TCP connection closed: FIN_WAIT_2 %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
        tcp_ack_now(pcb);
 8013a7a:	687b      	ldr	r3, [r7, #4]
 8013a7c:	8b5b      	ldrh	r3, [r3, #26]
 8013a7e:	f043 0302 	orr.w	r3, r3, #2
 8013a82:	b29a      	uxth	r2, r3
 8013a84:	687b      	ldr	r3, [r7, #4]
 8013a86:	835a      	strh	r2, [r3, #26]
        tcp_pcb_purge(pcb);
 8013a88:	6878      	ldr	r0, [r7, #4]
 8013a8a:	f7fe fd39 	bl	8012500 <tcp_pcb_purge>
        TCP_RMV_ACTIVE(pcb);
 8013a8e:	4b59      	ldr	r3, [pc, #356]	; (8013bf4 <tcp_process+0x7dc>)
 8013a90:	681b      	ldr	r3, [r3, #0]
 8013a92:	687a      	ldr	r2, [r7, #4]
 8013a94:	429a      	cmp	r2, r3
 8013a96:	d105      	bne.n	8013aa4 <tcp_process+0x68c>
 8013a98:	4b56      	ldr	r3, [pc, #344]	; (8013bf4 <tcp_process+0x7dc>)
 8013a9a:	681b      	ldr	r3, [r3, #0]
 8013a9c:	68db      	ldr	r3, [r3, #12]
 8013a9e:	4a55      	ldr	r2, [pc, #340]	; (8013bf4 <tcp_process+0x7dc>)
 8013aa0:	6013      	str	r3, [r2, #0]
 8013aa2:	e013      	b.n	8013acc <tcp_process+0x6b4>
 8013aa4:	4b53      	ldr	r3, [pc, #332]	; (8013bf4 <tcp_process+0x7dc>)
 8013aa6:	681b      	ldr	r3, [r3, #0]
 8013aa8:	613b      	str	r3, [r7, #16]
 8013aaa:	e00c      	b.n	8013ac6 <tcp_process+0x6ae>
 8013aac:	693b      	ldr	r3, [r7, #16]
 8013aae:	68db      	ldr	r3, [r3, #12]
 8013ab0:	687a      	ldr	r2, [r7, #4]
 8013ab2:	429a      	cmp	r2, r3
 8013ab4:	d104      	bne.n	8013ac0 <tcp_process+0x6a8>
 8013ab6:	687b      	ldr	r3, [r7, #4]
 8013ab8:	68da      	ldr	r2, [r3, #12]
 8013aba:	693b      	ldr	r3, [r7, #16]
 8013abc:	60da      	str	r2, [r3, #12]
 8013abe:	e005      	b.n	8013acc <tcp_process+0x6b4>
 8013ac0:	693b      	ldr	r3, [r7, #16]
 8013ac2:	68db      	ldr	r3, [r3, #12]
 8013ac4:	613b      	str	r3, [r7, #16]
 8013ac6:	693b      	ldr	r3, [r7, #16]
 8013ac8:	2b00      	cmp	r3, #0
 8013aca:	d1ef      	bne.n	8013aac <tcp_process+0x694>
 8013acc:	687b      	ldr	r3, [r7, #4]
 8013ace:	2200      	movs	r2, #0
 8013ad0:	60da      	str	r2, [r3, #12]
 8013ad2:	4b43      	ldr	r3, [pc, #268]	; (8013be0 <tcp_process+0x7c8>)
 8013ad4:	2201      	movs	r2, #1
 8013ad6:	701a      	strb	r2, [r3, #0]
        pcb->state = TIME_WAIT;
 8013ad8:	687b      	ldr	r3, [r7, #4]
 8013ada:	220a      	movs	r2, #10
 8013adc:	751a      	strb	r2, [r3, #20]
        TCP_REG(&tcp_tw_pcbs, pcb);
 8013ade:	4b41      	ldr	r3, [pc, #260]	; (8013be4 <tcp_process+0x7cc>)
 8013ae0:	681a      	ldr	r2, [r3, #0]
 8013ae2:	687b      	ldr	r3, [r7, #4]
 8013ae4:	60da      	str	r2, [r3, #12]
 8013ae6:	4a3f      	ldr	r2, [pc, #252]	; (8013be4 <tcp_process+0x7cc>)
 8013ae8:	687b      	ldr	r3, [r7, #4]
 8013aea:	6013      	str	r3, [r2, #0]
 8013aec:	f002 fc92 	bl	8016414 <tcp_timer_needed>
      }
      break;
 8013af0:	e06c      	b.n	8013bcc <tcp_process+0x7b4>
    case CLOSING:
      tcp_receive(pcb);
 8013af2:	6878      	ldr	r0, [r7, #4]
 8013af4:	f000 f984 	bl	8013e00 <tcp_receive>
      if ((flags & TCP_ACK) && ackno == pcb->snd_nxt && pcb->unsent == NULL) {
 8013af8:	4b3b      	ldr	r3, [pc, #236]	; (8013be8 <tcp_process+0x7d0>)
 8013afa:	781b      	ldrb	r3, [r3, #0]
 8013afc:	f003 0310 	and.w	r3, r3, #16
 8013b00:	2b00      	cmp	r3, #0
 8013b02:	d065      	beq.n	8013bd0 <tcp_process+0x7b8>
 8013b04:	687b      	ldr	r3, [r7, #4]
 8013b06:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8013b08:	4b38      	ldr	r3, [pc, #224]	; (8013bec <tcp_process+0x7d4>)
 8013b0a:	681b      	ldr	r3, [r3, #0]
 8013b0c:	429a      	cmp	r2, r3
 8013b0e:	d15f      	bne.n	8013bd0 <tcp_process+0x7b8>
 8013b10:	687b      	ldr	r3, [r7, #4]
 8013b12:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8013b14:	2b00      	cmp	r3, #0
 8013b16:	d15b      	bne.n	8013bd0 <tcp_process+0x7b8>
        LWIP_DEBUGF(TCP_DEBUG, ("TCP connection closed: CLOSING %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
        tcp_pcb_purge(pcb);
 8013b18:	6878      	ldr	r0, [r7, #4]
 8013b1a:	f7fe fcf1 	bl	8012500 <tcp_pcb_purge>
        TCP_RMV_ACTIVE(pcb);
 8013b1e:	4b35      	ldr	r3, [pc, #212]	; (8013bf4 <tcp_process+0x7dc>)
 8013b20:	681b      	ldr	r3, [r3, #0]
 8013b22:	687a      	ldr	r2, [r7, #4]
 8013b24:	429a      	cmp	r2, r3
 8013b26:	d105      	bne.n	8013b34 <tcp_process+0x71c>
 8013b28:	4b32      	ldr	r3, [pc, #200]	; (8013bf4 <tcp_process+0x7dc>)
 8013b2a:	681b      	ldr	r3, [r3, #0]
 8013b2c:	68db      	ldr	r3, [r3, #12]
 8013b2e:	4a31      	ldr	r2, [pc, #196]	; (8013bf4 <tcp_process+0x7dc>)
 8013b30:	6013      	str	r3, [r2, #0]
 8013b32:	e013      	b.n	8013b5c <tcp_process+0x744>
 8013b34:	4b2f      	ldr	r3, [pc, #188]	; (8013bf4 <tcp_process+0x7dc>)
 8013b36:	681b      	ldr	r3, [r3, #0]
 8013b38:	60fb      	str	r3, [r7, #12]
 8013b3a:	e00c      	b.n	8013b56 <tcp_process+0x73e>
 8013b3c:	68fb      	ldr	r3, [r7, #12]
 8013b3e:	68db      	ldr	r3, [r3, #12]
 8013b40:	687a      	ldr	r2, [r7, #4]
 8013b42:	429a      	cmp	r2, r3
 8013b44:	d104      	bne.n	8013b50 <tcp_process+0x738>
 8013b46:	687b      	ldr	r3, [r7, #4]
 8013b48:	68da      	ldr	r2, [r3, #12]
 8013b4a:	68fb      	ldr	r3, [r7, #12]
 8013b4c:	60da      	str	r2, [r3, #12]
 8013b4e:	e005      	b.n	8013b5c <tcp_process+0x744>
 8013b50:	68fb      	ldr	r3, [r7, #12]
 8013b52:	68db      	ldr	r3, [r3, #12]
 8013b54:	60fb      	str	r3, [r7, #12]
 8013b56:	68fb      	ldr	r3, [r7, #12]
 8013b58:	2b00      	cmp	r3, #0
 8013b5a:	d1ef      	bne.n	8013b3c <tcp_process+0x724>
 8013b5c:	687b      	ldr	r3, [r7, #4]
 8013b5e:	2200      	movs	r2, #0
 8013b60:	60da      	str	r2, [r3, #12]
 8013b62:	4b1f      	ldr	r3, [pc, #124]	; (8013be0 <tcp_process+0x7c8>)
 8013b64:	2201      	movs	r2, #1
 8013b66:	701a      	strb	r2, [r3, #0]
        pcb->state = TIME_WAIT;
 8013b68:	687b      	ldr	r3, [r7, #4]
 8013b6a:	220a      	movs	r2, #10
 8013b6c:	751a      	strb	r2, [r3, #20]
        TCP_REG(&tcp_tw_pcbs, pcb);
 8013b6e:	4b1d      	ldr	r3, [pc, #116]	; (8013be4 <tcp_process+0x7cc>)
 8013b70:	681a      	ldr	r2, [r3, #0]
 8013b72:	687b      	ldr	r3, [r7, #4]
 8013b74:	60da      	str	r2, [r3, #12]
 8013b76:	4a1b      	ldr	r2, [pc, #108]	; (8013be4 <tcp_process+0x7cc>)
 8013b78:	687b      	ldr	r3, [r7, #4]
 8013b7a:	6013      	str	r3, [r2, #0]
 8013b7c:	f002 fc4a 	bl	8016414 <tcp_timer_needed>
      }
      break;
 8013b80:	e026      	b.n	8013bd0 <tcp_process+0x7b8>
    case LAST_ACK:
      tcp_receive(pcb);
 8013b82:	6878      	ldr	r0, [r7, #4]
 8013b84:	f000 f93c 	bl	8013e00 <tcp_receive>
      if ((flags & TCP_ACK) && ackno == pcb->snd_nxt && pcb->unsent == NULL) {
 8013b88:	4b17      	ldr	r3, [pc, #92]	; (8013be8 <tcp_process+0x7d0>)
 8013b8a:	781b      	ldrb	r3, [r3, #0]
 8013b8c:	f003 0310 	and.w	r3, r3, #16
 8013b90:	2b00      	cmp	r3, #0
 8013b92:	d01f      	beq.n	8013bd4 <tcp_process+0x7bc>
 8013b94:	687b      	ldr	r3, [r7, #4]
 8013b96:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8013b98:	4b14      	ldr	r3, [pc, #80]	; (8013bec <tcp_process+0x7d4>)
 8013b9a:	681b      	ldr	r3, [r3, #0]
 8013b9c:	429a      	cmp	r2, r3
 8013b9e:	d119      	bne.n	8013bd4 <tcp_process+0x7bc>
 8013ba0:	687b      	ldr	r3, [r7, #4]
 8013ba2:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8013ba4:	2b00      	cmp	r3, #0
 8013ba6:	d115      	bne.n	8013bd4 <tcp_process+0x7bc>
        LWIP_DEBUGF(TCP_DEBUG, ("TCP connection closed: LAST_ACK %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
        /* bugfix #21699: don't set pcb->state to CLOSED here or we risk leaking segments */
        recv_flags |= TF_CLOSED;
 8013ba8:	4b11      	ldr	r3, [pc, #68]	; (8013bf0 <tcp_process+0x7d8>)
 8013baa:	781b      	ldrb	r3, [r3, #0]
 8013bac:	f043 0310 	orr.w	r3, r3, #16
 8013bb0:	b2da      	uxtb	r2, r3
 8013bb2:	4b0f      	ldr	r3, [pc, #60]	; (8013bf0 <tcp_process+0x7d8>)
 8013bb4:	701a      	strb	r2, [r3, #0]
      }
      break;
 8013bb6:	e00d      	b.n	8013bd4 <tcp_process+0x7bc>
    default:
      break;
 8013bb8:	bf00      	nop
 8013bba:	e00c      	b.n	8013bd6 <tcp_process+0x7be>
      break;
 8013bbc:	bf00      	nop
 8013bbe:	e00a      	b.n	8013bd6 <tcp_process+0x7be>
      break;
 8013bc0:	bf00      	nop
 8013bc2:	e008      	b.n	8013bd6 <tcp_process+0x7be>
      break;
 8013bc4:	bf00      	nop
 8013bc6:	e006      	b.n	8013bd6 <tcp_process+0x7be>
      break;
 8013bc8:	bf00      	nop
 8013bca:	e004      	b.n	8013bd6 <tcp_process+0x7be>
      break;
 8013bcc:	bf00      	nop
 8013bce:	e002      	b.n	8013bd6 <tcp_process+0x7be>
      break;
 8013bd0:	bf00      	nop
 8013bd2:	e000      	b.n	8013bd6 <tcp_process+0x7be>
      break;
 8013bd4:	bf00      	nop
  }
  return ERR_OK;
 8013bd6:	2300      	movs	r3, #0
}
 8013bd8:	4618      	mov	r0, r3
 8013bda:	3724      	adds	r7, #36	; 0x24
 8013bdc:	46bd      	mov	sp, r7
 8013bde:	bd90      	pop	{r4, r7, pc}
 8013be0:	20007058 	.word	0x20007058
 8013be4:	20007054 	.word	0x20007054
 8013be8:	20007088 	.word	0x20007088
 8013bec:	20007080 	.word	0x20007080
 8013bf0:	20007089 	.word	0x20007089
 8013bf4:	20007050 	.word	0x20007050

08013bf8 <tcp_oos_insert_segment>:
 *
 * Called from tcp_receive()
 */
static void
tcp_oos_insert_segment(struct tcp_seg *cseg, struct tcp_seg *next)
{
 8013bf8:	b590      	push	{r4, r7, lr}
 8013bfa:	b085      	sub	sp, #20
 8013bfc:	af00      	add	r7, sp, #0
 8013bfe:	6078      	str	r0, [r7, #4]
 8013c00:	6039      	str	r1, [r7, #0]
  struct tcp_seg *old_seg;

  LWIP_ASSERT("tcp_oos_insert_segment: invalid cseg", cseg != NULL);
 8013c02:	687b      	ldr	r3, [r7, #4]
 8013c04:	2b00      	cmp	r3, #0
 8013c06:	d106      	bne.n	8013c16 <tcp_oos_insert_segment+0x1e>
 8013c08:	4b3b      	ldr	r3, [pc, #236]	; (8013cf8 <tcp_oos_insert_segment+0x100>)
 8013c0a:	f240 421f 	movw	r2, #1055	; 0x41f
 8013c0e:	493b      	ldr	r1, [pc, #236]	; (8013cfc <tcp_oos_insert_segment+0x104>)
 8013c10:	483b      	ldr	r0, [pc, #236]	; (8013d00 <tcp_oos_insert_segment+0x108>)
 8013c12:	f005 ff29 	bl	8019a68 <iprintf>

  if (TCPH_FLAGS(cseg->tcphdr) & TCP_FIN) {
 8013c16:	687b      	ldr	r3, [r7, #4]
 8013c18:	68db      	ldr	r3, [r3, #12]
 8013c1a:	899b      	ldrh	r3, [r3, #12]
 8013c1c:	b29b      	uxth	r3, r3
 8013c1e:	4618      	mov	r0, r3
 8013c20:	f7fb fc06 	bl	800f430 <lwip_htons>
 8013c24:	4603      	mov	r3, r0
 8013c26:	b2db      	uxtb	r3, r3
 8013c28:	f003 0301 	and.w	r3, r3, #1
 8013c2c:	2b00      	cmp	r3, #0
 8013c2e:	d028      	beq.n	8013c82 <tcp_oos_insert_segment+0x8a>
    /* received segment overlaps all following segments */
    tcp_segs_free(next);
 8013c30:	6838      	ldr	r0, [r7, #0]
 8013c32:	f7fe fa63 	bl	80120fc <tcp_segs_free>
    next = NULL;
 8013c36:	2300      	movs	r3, #0
 8013c38:	603b      	str	r3, [r7, #0]
 8013c3a:	e056      	b.n	8013cea <tcp_oos_insert_segment+0xf2>
       oos queue may have segments with FIN flag */
    while (next &&
           TCP_SEQ_GEQ((seqno + cseg->len),
                       (next->tcphdr->seqno + next->len))) {
      /* cseg with FIN already processed */
      if (TCPH_FLAGS(next->tcphdr) & TCP_FIN) {
 8013c3c:	683b      	ldr	r3, [r7, #0]
 8013c3e:	68db      	ldr	r3, [r3, #12]
 8013c40:	899b      	ldrh	r3, [r3, #12]
 8013c42:	b29b      	uxth	r3, r3
 8013c44:	4618      	mov	r0, r3
 8013c46:	f7fb fbf3 	bl	800f430 <lwip_htons>
 8013c4a:	4603      	mov	r3, r0
 8013c4c:	b2db      	uxtb	r3, r3
 8013c4e:	f003 0301 	and.w	r3, r3, #1
 8013c52:	2b00      	cmp	r3, #0
 8013c54:	d00d      	beq.n	8013c72 <tcp_oos_insert_segment+0x7a>
        TCPH_SET_FLAG(cseg->tcphdr, TCP_FIN);
 8013c56:	687b      	ldr	r3, [r7, #4]
 8013c58:	68db      	ldr	r3, [r3, #12]
 8013c5a:	899b      	ldrh	r3, [r3, #12]
 8013c5c:	b29c      	uxth	r4, r3
 8013c5e:	2001      	movs	r0, #1
 8013c60:	f7fb fbe6 	bl	800f430 <lwip_htons>
 8013c64:	4603      	mov	r3, r0
 8013c66:	461a      	mov	r2, r3
 8013c68:	687b      	ldr	r3, [r7, #4]
 8013c6a:	68db      	ldr	r3, [r3, #12]
 8013c6c:	4322      	orrs	r2, r4
 8013c6e:	b292      	uxth	r2, r2
 8013c70:	819a      	strh	r2, [r3, #12]
      }
      old_seg = next;
 8013c72:	683b      	ldr	r3, [r7, #0]
 8013c74:	60fb      	str	r3, [r7, #12]
      next = next->next;
 8013c76:	683b      	ldr	r3, [r7, #0]
 8013c78:	681b      	ldr	r3, [r3, #0]
 8013c7a:	603b      	str	r3, [r7, #0]
      tcp_seg_free(old_seg);
 8013c7c:	68f8      	ldr	r0, [r7, #12]
 8013c7e:	f7fe fa52 	bl	8012126 <tcp_seg_free>
    while (next &&
 8013c82:	683b      	ldr	r3, [r7, #0]
 8013c84:	2b00      	cmp	r3, #0
 8013c86:	d00e      	beq.n	8013ca6 <tcp_oos_insert_segment+0xae>
           TCP_SEQ_GEQ((seqno + cseg->len),
 8013c88:	687b      	ldr	r3, [r7, #4]
 8013c8a:	891b      	ldrh	r3, [r3, #8]
 8013c8c:	461a      	mov	r2, r3
 8013c8e:	4b1d      	ldr	r3, [pc, #116]	; (8013d04 <tcp_oos_insert_segment+0x10c>)
 8013c90:	681b      	ldr	r3, [r3, #0]
 8013c92:	441a      	add	r2, r3
 8013c94:	683b      	ldr	r3, [r7, #0]
 8013c96:	68db      	ldr	r3, [r3, #12]
 8013c98:	685b      	ldr	r3, [r3, #4]
 8013c9a:	6839      	ldr	r1, [r7, #0]
 8013c9c:	8909      	ldrh	r1, [r1, #8]
 8013c9e:	440b      	add	r3, r1
 8013ca0:	1ad3      	subs	r3, r2, r3
    while (next &&
 8013ca2:	2b00      	cmp	r3, #0
 8013ca4:	daca      	bge.n	8013c3c <tcp_oos_insert_segment+0x44>
    }
    if (next &&
 8013ca6:	683b      	ldr	r3, [r7, #0]
 8013ca8:	2b00      	cmp	r3, #0
 8013caa:	d01e      	beq.n	8013cea <tcp_oos_insert_segment+0xf2>
        TCP_SEQ_GT(seqno + cseg->len, next->tcphdr->seqno)) {
 8013cac:	687b      	ldr	r3, [r7, #4]
 8013cae:	891b      	ldrh	r3, [r3, #8]
 8013cb0:	461a      	mov	r2, r3
 8013cb2:	4b14      	ldr	r3, [pc, #80]	; (8013d04 <tcp_oos_insert_segment+0x10c>)
 8013cb4:	681b      	ldr	r3, [r3, #0]
 8013cb6:	441a      	add	r2, r3
 8013cb8:	683b      	ldr	r3, [r7, #0]
 8013cba:	68db      	ldr	r3, [r3, #12]
 8013cbc:	685b      	ldr	r3, [r3, #4]
 8013cbe:	1ad3      	subs	r3, r2, r3
    if (next &&
 8013cc0:	2b00      	cmp	r3, #0
 8013cc2:	dd12      	ble.n	8013cea <tcp_oos_insert_segment+0xf2>
      /* We need to trim the incoming segment. */
      cseg->len = (u16_t)(next->tcphdr->seqno - seqno);
 8013cc4:	683b      	ldr	r3, [r7, #0]
 8013cc6:	68db      	ldr	r3, [r3, #12]
 8013cc8:	685b      	ldr	r3, [r3, #4]
 8013cca:	b29a      	uxth	r2, r3
 8013ccc:	4b0d      	ldr	r3, [pc, #52]	; (8013d04 <tcp_oos_insert_segment+0x10c>)
 8013cce:	681b      	ldr	r3, [r3, #0]
 8013cd0:	b29b      	uxth	r3, r3
 8013cd2:	1ad3      	subs	r3, r2, r3
 8013cd4:	b29a      	uxth	r2, r3
 8013cd6:	687b      	ldr	r3, [r7, #4]
 8013cd8:	811a      	strh	r2, [r3, #8]
      pbuf_realloc(cseg->p, cseg->len);
 8013cda:	687b      	ldr	r3, [r7, #4]
 8013cdc:	685a      	ldr	r2, [r3, #4]
 8013cde:	687b      	ldr	r3, [r7, #4]
 8013ce0:	891b      	ldrh	r3, [r3, #8]
 8013ce2:	4619      	mov	r1, r3
 8013ce4:	4610      	mov	r0, r2
 8013ce6:	f7fc fe23 	bl	8010930 <pbuf_realloc>
    }
  }
  cseg->next = next;
 8013cea:	687b      	ldr	r3, [r7, #4]
 8013cec:	683a      	ldr	r2, [r7, #0]
 8013cee:	601a      	str	r2, [r3, #0]
}
 8013cf0:	bf00      	nop
 8013cf2:	3714      	adds	r7, #20
 8013cf4:	46bd      	mov	sp, r7
 8013cf6:	bd90      	pop	{r4, r7, pc}
 8013cf8:	0801d41c 	.word	0x0801d41c
 8013cfc:	0801d6dc 	.word	0x0801d6dc
 8013d00:	0801d468 	.word	0x0801d468
 8013d04:	2000707c 	.word	0x2000707c

08013d08 <tcp_free_acked_segments>:

/** Remove segments from a list if the incoming ACK acknowledges them */
static struct tcp_seg *
tcp_free_acked_segments(struct tcp_pcb *pcb, struct tcp_seg *seg_list, const char *dbg_list_name,
                        struct tcp_seg *dbg_other_seg_list)
{
 8013d08:	b5b0      	push	{r4, r5, r7, lr}
 8013d0a:	b086      	sub	sp, #24
 8013d0c:	af00      	add	r7, sp, #0
 8013d0e:	60f8      	str	r0, [r7, #12]
 8013d10:	60b9      	str	r1, [r7, #8]
 8013d12:	607a      	str	r2, [r7, #4]
 8013d14:	603b      	str	r3, [r7, #0]
  u16_t clen;

  LWIP_UNUSED_ARG(dbg_list_name);
  LWIP_UNUSED_ARG(dbg_other_seg_list);

  while (seg_list != NULL &&
 8013d16:	e03e      	b.n	8013d96 <tcp_free_acked_segments+0x8e>
    LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_receive: removing %"U32_F":%"U32_F" from pcb->%s\n",
                                  lwip_ntohl(seg_list->tcphdr->seqno),
                                  lwip_ntohl(seg_list->tcphdr->seqno) + TCP_TCPLEN(seg_list),
                                  dbg_list_name));

    next = seg_list;
 8013d18:	68bb      	ldr	r3, [r7, #8]
 8013d1a:	617b      	str	r3, [r7, #20]
    seg_list = seg_list->next;
 8013d1c:	68bb      	ldr	r3, [r7, #8]
 8013d1e:	681b      	ldr	r3, [r3, #0]
 8013d20:	60bb      	str	r3, [r7, #8]

    clen = pbuf_clen(next->p);
 8013d22:	697b      	ldr	r3, [r7, #20]
 8013d24:	685b      	ldr	r3, [r3, #4]
 8013d26:	4618      	mov	r0, r3
 8013d28:	f7fd f80e 	bl	8010d48 <pbuf_clen>
 8013d2c:	4603      	mov	r3, r0
 8013d2e:	827b      	strh	r3, [r7, #18]
    LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_receive: queuelen %"TCPWNDSIZE_F" ... ",
                                 (tcpwnd_size_t)pcb->snd_queuelen));
    LWIP_ASSERT("pcb->snd_queuelen >= pbuf_clen(next->p)", (pcb->snd_queuelen >= clen));
 8013d30:	68fb      	ldr	r3, [r7, #12]
 8013d32:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 8013d36:	8a7a      	ldrh	r2, [r7, #18]
 8013d38:	429a      	cmp	r2, r3
 8013d3a:	d906      	bls.n	8013d4a <tcp_free_acked_segments+0x42>
 8013d3c:	4b2a      	ldr	r3, [pc, #168]	; (8013de8 <tcp_free_acked_segments+0xe0>)
 8013d3e:	f240 4257 	movw	r2, #1111	; 0x457
 8013d42:	492a      	ldr	r1, [pc, #168]	; (8013dec <tcp_free_acked_segments+0xe4>)
 8013d44:	482a      	ldr	r0, [pc, #168]	; (8013df0 <tcp_free_acked_segments+0xe8>)
 8013d46:	f005 fe8f 	bl	8019a68 <iprintf>

    pcb->snd_queuelen = (u16_t)(pcb->snd_queuelen - clen);
 8013d4a:	68fb      	ldr	r3, [r7, #12]
 8013d4c:	f8b3 2066 	ldrh.w	r2, [r3, #102]	; 0x66
 8013d50:	8a7b      	ldrh	r3, [r7, #18]
 8013d52:	1ad3      	subs	r3, r2, r3
 8013d54:	b29a      	uxth	r2, r3
 8013d56:	68fb      	ldr	r3, [r7, #12]
 8013d58:	f8a3 2066 	strh.w	r2, [r3, #102]	; 0x66
    recv_acked = (tcpwnd_size_t)(recv_acked + next->len);
 8013d5c:	697b      	ldr	r3, [r7, #20]
 8013d5e:	891a      	ldrh	r2, [r3, #8]
 8013d60:	4b24      	ldr	r3, [pc, #144]	; (8013df4 <tcp_free_acked_segments+0xec>)
 8013d62:	881b      	ldrh	r3, [r3, #0]
 8013d64:	4413      	add	r3, r2
 8013d66:	b29a      	uxth	r2, r3
 8013d68:	4b22      	ldr	r3, [pc, #136]	; (8013df4 <tcp_free_acked_segments+0xec>)
 8013d6a:	801a      	strh	r2, [r3, #0]
    tcp_seg_free(next);
 8013d6c:	6978      	ldr	r0, [r7, #20]
 8013d6e:	f7fe f9da 	bl	8012126 <tcp_seg_free>

    LWIP_DEBUGF(TCP_QLEN_DEBUG, ("%"TCPWNDSIZE_F" (after freeing %s)\n",
                                 (tcpwnd_size_t)pcb->snd_queuelen,
                                 dbg_list_name));
    if (pcb->snd_queuelen != 0) {
 8013d72:	68fb      	ldr	r3, [r7, #12]
 8013d74:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 8013d78:	2b00      	cmp	r3, #0
 8013d7a:	d00c      	beq.n	8013d96 <tcp_free_acked_segments+0x8e>
      LWIP_ASSERT("tcp_receive: valid queue length",
 8013d7c:	68bb      	ldr	r3, [r7, #8]
 8013d7e:	2b00      	cmp	r3, #0
 8013d80:	d109      	bne.n	8013d96 <tcp_free_acked_segments+0x8e>
 8013d82:	683b      	ldr	r3, [r7, #0]
 8013d84:	2b00      	cmp	r3, #0
 8013d86:	d106      	bne.n	8013d96 <tcp_free_acked_segments+0x8e>
 8013d88:	4b17      	ldr	r3, [pc, #92]	; (8013de8 <tcp_free_acked_segments+0xe0>)
 8013d8a:	f240 4261 	movw	r2, #1121	; 0x461
 8013d8e:	491a      	ldr	r1, [pc, #104]	; (8013df8 <tcp_free_acked_segments+0xf0>)
 8013d90:	4817      	ldr	r0, [pc, #92]	; (8013df0 <tcp_free_acked_segments+0xe8>)
 8013d92:	f005 fe69 	bl	8019a68 <iprintf>
  while (seg_list != NULL &&
 8013d96:	68bb      	ldr	r3, [r7, #8]
 8013d98:	2b00      	cmp	r3, #0
 8013d9a:	d020      	beq.n	8013dde <tcp_free_acked_segments+0xd6>
         TCP_SEQ_LEQ(lwip_ntohl(seg_list->tcphdr->seqno) +
 8013d9c:	68bb      	ldr	r3, [r7, #8]
 8013d9e:	68db      	ldr	r3, [r3, #12]
 8013da0:	685b      	ldr	r3, [r3, #4]
 8013da2:	4618      	mov	r0, r3
 8013da4:	f7fb fb59 	bl	800f45a <lwip_htonl>
 8013da8:	4604      	mov	r4, r0
 8013daa:	68bb      	ldr	r3, [r7, #8]
 8013dac:	891b      	ldrh	r3, [r3, #8]
 8013dae:	461d      	mov	r5, r3
 8013db0:	68bb      	ldr	r3, [r7, #8]
 8013db2:	68db      	ldr	r3, [r3, #12]
 8013db4:	899b      	ldrh	r3, [r3, #12]
 8013db6:	b29b      	uxth	r3, r3
 8013db8:	4618      	mov	r0, r3
 8013dba:	f7fb fb39 	bl	800f430 <lwip_htons>
 8013dbe:	4603      	mov	r3, r0
 8013dc0:	b2db      	uxtb	r3, r3
 8013dc2:	f003 0303 	and.w	r3, r3, #3
 8013dc6:	2b00      	cmp	r3, #0
 8013dc8:	d001      	beq.n	8013dce <tcp_free_acked_segments+0xc6>
 8013dca:	2301      	movs	r3, #1
 8013dcc:	e000      	b.n	8013dd0 <tcp_free_acked_segments+0xc8>
 8013dce:	2300      	movs	r3, #0
 8013dd0:	442b      	add	r3, r5
 8013dd2:	18e2      	adds	r2, r4, r3
 8013dd4:	4b09      	ldr	r3, [pc, #36]	; (8013dfc <tcp_free_acked_segments+0xf4>)
 8013dd6:	681b      	ldr	r3, [r3, #0]
 8013dd8:	1ad3      	subs	r3, r2, r3
  while (seg_list != NULL &&
 8013dda:	2b00      	cmp	r3, #0
 8013ddc:	dd9c      	ble.n	8013d18 <tcp_free_acked_segments+0x10>
                  seg_list != NULL || dbg_other_seg_list != NULL);
    }
  }
  return seg_list;
 8013dde:	68bb      	ldr	r3, [r7, #8]
}
 8013de0:	4618      	mov	r0, r3
 8013de2:	3718      	adds	r7, #24
 8013de4:	46bd      	mov	sp, r7
 8013de6:	bdb0      	pop	{r4, r5, r7, pc}
 8013de8:	0801d41c 	.word	0x0801d41c
 8013dec:	0801d704 	.word	0x0801d704
 8013df0:	0801d468 	.word	0x0801d468
 8013df4:	20007084 	.word	0x20007084
 8013df8:	0801d72c 	.word	0x0801d72c
 8013dfc:	20007080 	.word	0x20007080

08013e00 <tcp_receive>:
 *
 * Called from tcp_process().
 */
static void
tcp_receive(struct tcp_pcb *pcb)
{
 8013e00:	b5b0      	push	{r4, r5, r7, lr}
 8013e02:	b094      	sub	sp, #80	; 0x50
 8013e04:	af00      	add	r7, sp, #0
 8013e06:	6078      	str	r0, [r7, #4]
  s16_t m;
  u32_t right_wnd_edge;
  int found_dupack = 0;
 8013e08:	2300      	movs	r3, #0
 8013e0a:	64bb      	str	r3, [r7, #72]	; 0x48

  LWIP_ASSERT("tcp_receive: invalid pcb", pcb != NULL);
 8013e0c:	687b      	ldr	r3, [r7, #4]
 8013e0e:	2b00      	cmp	r3, #0
 8013e10:	d106      	bne.n	8013e20 <tcp_receive+0x20>
 8013e12:	4b91      	ldr	r3, [pc, #580]	; (8014058 <tcp_receive+0x258>)
 8013e14:	f240 427b 	movw	r2, #1147	; 0x47b
 8013e18:	4990      	ldr	r1, [pc, #576]	; (801405c <tcp_receive+0x25c>)
 8013e1a:	4891      	ldr	r0, [pc, #580]	; (8014060 <tcp_receive+0x260>)
 8013e1c:	f005 fe24 	bl	8019a68 <iprintf>
  LWIP_ASSERT("tcp_receive: wrong state", pcb->state >= ESTABLISHED);
 8013e20:	687b      	ldr	r3, [r7, #4]
 8013e22:	7d1b      	ldrb	r3, [r3, #20]
 8013e24:	2b03      	cmp	r3, #3
 8013e26:	d806      	bhi.n	8013e36 <tcp_receive+0x36>
 8013e28:	4b8b      	ldr	r3, [pc, #556]	; (8014058 <tcp_receive+0x258>)
 8013e2a:	f240 427c 	movw	r2, #1148	; 0x47c
 8013e2e:	498d      	ldr	r1, [pc, #564]	; (8014064 <tcp_receive+0x264>)
 8013e30:	488b      	ldr	r0, [pc, #556]	; (8014060 <tcp_receive+0x260>)
 8013e32:	f005 fe19 	bl	8019a68 <iprintf>

  if (flags & TCP_ACK) {
 8013e36:	4b8c      	ldr	r3, [pc, #560]	; (8014068 <tcp_receive+0x268>)
 8013e38:	781b      	ldrb	r3, [r3, #0]
 8013e3a:	f003 0310 	and.w	r3, r3, #16
 8013e3e:	2b00      	cmp	r3, #0
 8013e40:	f000 8264 	beq.w	801430c <tcp_receive+0x50c>
    right_wnd_edge = pcb->snd_wnd + pcb->snd_wl2;
 8013e44:	687b      	ldr	r3, [r7, #4]
 8013e46:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 8013e4a:	461a      	mov	r2, r3
 8013e4c:	687b      	ldr	r3, [r7, #4]
 8013e4e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8013e50:	4413      	add	r3, r2
 8013e52:	633b      	str	r3, [r7, #48]	; 0x30

    /* Update window. */
    if (TCP_SEQ_LT(pcb->snd_wl1, seqno) ||
 8013e54:	687b      	ldr	r3, [r7, #4]
 8013e56:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8013e58:	4b84      	ldr	r3, [pc, #528]	; (801406c <tcp_receive+0x26c>)
 8013e5a:	681b      	ldr	r3, [r3, #0]
 8013e5c:	1ad3      	subs	r3, r2, r3
 8013e5e:	2b00      	cmp	r3, #0
 8013e60:	db1b      	blt.n	8013e9a <tcp_receive+0x9a>
        (pcb->snd_wl1 == seqno && TCP_SEQ_LT(pcb->snd_wl2, ackno)) ||
 8013e62:	687b      	ldr	r3, [r7, #4]
 8013e64:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8013e66:	4b81      	ldr	r3, [pc, #516]	; (801406c <tcp_receive+0x26c>)
 8013e68:	681b      	ldr	r3, [r3, #0]
    if (TCP_SEQ_LT(pcb->snd_wl1, seqno) ||
 8013e6a:	429a      	cmp	r2, r3
 8013e6c:	d106      	bne.n	8013e7c <tcp_receive+0x7c>
        (pcb->snd_wl1 == seqno && TCP_SEQ_LT(pcb->snd_wl2, ackno)) ||
 8013e6e:	687b      	ldr	r3, [r7, #4]
 8013e70:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8013e72:	4b7f      	ldr	r3, [pc, #508]	; (8014070 <tcp_receive+0x270>)
 8013e74:	681b      	ldr	r3, [r3, #0]
 8013e76:	1ad3      	subs	r3, r2, r3
 8013e78:	2b00      	cmp	r3, #0
 8013e7a:	db0e      	blt.n	8013e9a <tcp_receive+0x9a>
        (pcb->snd_wl2 == ackno && (u32_t)SND_WND_SCALE(pcb, tcphdr->wnd) > pcb->snd_wnd)) {
 8013e7c:	687b      	ldr	r3, [r7, #4]
 8013e7e:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8013e80:	4b7b      	ldr	r3, [pc, #492]	; (8014070 <tcp_receive+0x270>)
 8013e82:	681b      	ldr	r3, [r3, #0]
        (pcb->snd_wl1 == seqno && TCP_SEQ_LT(pcb->snd_wl2, ackno)) ||
 8013e84:	429a      	cmp	r2, r3
 8013e86:	d125      	bne.n	8013ed4 <tcp_receive+0xd4>
        (pcb->snd_wl2 == ackno && (u32_t)SND_WND_SCALE(pcb, tcphdr->wnd) > pcb->snd_wnd)) {
 8013e88:	4b7a      	ldr	r3, [pc, #488]	; (8014074 <tcp_receive+0x274>)
 8013e8a:	681b      	ldr	r3, [r3, #0]
 8013e8c:	89db      	ldrh	r3, [r3, #14]
 8013e8e:	b29a      	uxth	r2, r3
 8013e90:	687b      	ldr	r3, [r7, #4]
 8013e92:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 8013e96:	429a      	cmp	r2, r3
 8013e98:	d91c      	bls.n	8013ed4 <tcp_receive+0xd4>
      pcb->snd_wnd = SND_WND_SCALE(pcb, tcphdr->wnd);
 8013e9a:	4b76      	ldr	r3, [pc, #472]	; (8014074 <tcp_receive+0x274>)
 8013e9c:	681b      	ldr	r3, [r3, #0]
 8013e9e:	89db      	ldrh	r3, [r3, #14]
 8013ea0:	b29a      	uxth	r2, r3
 8013ea2:	687b      	ldr	r3, [r7, #4]
 8013ea4:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
      /* keep track of the biggest window announced by the remote host to calculate
         the maximum segment size */
      if (pcb->snd_wnd_max < pcb->snd_wnd) {
 8013ea8:	687b      	ldr	r3, [r7, #4]
 8013eaa:	f8b3 2062 	ldrh.w	r2, [r3, #98]	; 0x62
 8013eae:	687b      	ldr	r3, [r7, #4]
 8013eb0:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 8013eb4:	429a      	cmp	r2, r3
 8013eb6:	d205      	bcs.n	8013ec4 <tcp_receive+0xc4>
        pcb->snd_wnd_max = pcb->snd_wnd;
 8013eb8:	687b      	ldr	r3, [r7, #4]
 8013eba:	f8b3 2060 	ldrh.w	r2, [r3, #96]	; 0x60
 8013ebe:	687b      	ldr	r3, [r7, #4]
 8013ec0:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
      }
      pcb->snd_wl1 = seqno;
 8013ec4:	4b69      	ldr	r3, [pc, #420]	; (801406c <tcp_receive+0x26c>)
 8013ec6:	681a      	ldr	r2, [r3, #0]
 8013ec8:	687b      	ldr	r3, [r7, #4]
 8013eca:	655a      	str	r2, [r3, #84]	; 0x54
      pcb->snd_wl2 = ackno;
 8013ecc:	4b68      	ldr	r3, [pc, #416]	; (8014070 <tcp_receive+0x270>)
 8013ece:	681a      	ldr	r2, [r3, #0]
 8013ed0:	687b      	ldr	r3, [r7, #4]
 8013ed2:	659a      	str	r2, [r3, #88]	; 0x58
     * If it only passes 1, should reset dupack counter
     *
     */

    /* Clause 1 */
    if (TCP_SEQ_LEQ(ackno, pcb->lastack)) {
 8013ed4:	4b66      	ldr	r3, [pc, #408]	; (8014070 <tcp_receive+0x270>)
 8013ed6:	681a      	ldr	r2, [r3, #0]
 8013ed8:	687b      	ldr	r3, [r7, #4]
 8013eda:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8013edc:	1ad3      	subs	r3, r2, r3
 8013ede:	2b00      	cmp	r3, #0
 8013ee0:	dc58      	bgt.n	8013f94 <tcp_receive+0x194>
      /* Clause 2 */
      if (tcplen == 0) {
 8013ee2:	4b65      	ldr	r3, [pc, #404]	; (8014078 <tcp_receive+0x278>)
 8013ee4:	881b      	ldrh	r3, [r3, #0]
 8013ee6:	2b00      	cmp	r3, #0
 8013ee8:	d14b      	bne.n	8013f82 <tcp_receive+0x182>
        /* Clause 3 */
        if (pcb->snd_wl2 + pcb->snd_wnd == right_wnd_edge) {
 8013eea:	687b      	ldr	r3, [r7, #4]
 8013eec:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8013eee:	687a      	ldr	r2, [r7, #4]
 8013ef0:	f8b2 2060 	ldrh.w	r2, [r2, #96]	; 0x60
 8013ef4:	4413      	add	r3, r2
 8013ef6:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8013ef8:	429a      	cmp	r2, r3
 8013efa:	d142      	bne.n	8013f82 <tcp_receive+0x182>
          /* Clause 4 */
          if (pcb->rtime >= 0) {
 8013efc:	687b      	ldr	r3, [r7, #4]
 8013efe:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	; 0x30
 8013f02:	2b00      	cmp	r3, #0
 8013f04:	db3d      	blt.n	8013f82 <tcp_receive+0x182>
            /* Clause 5 */
            if (pcb->lastack == ackno) {
 8013f06:	687b      	ldr	r3, [r7, #4]
 8013f08:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8013f0a:	4b59      	ldr	r3, [pc, #356]	; (8014070 <tcp_receive+0x270>)
 8013f0c:	681b      	ldr	r3, [r3, #0]
 8013f0e:	429a      	cmp	r2, r3
 8013f10:	d137      	bne.n	8013f82 <tcp_receive+0x182>
              found_dupack = 1;
 8013f12:	2301      	movs	r3, #1
 8013f14:	64bb      	str	r3, [r7, #72]	; 0x48
              if ((u8_t)(pcb->dupacks + 1) > pcb->dupacks) {
 8013f16:	687b      	ldr	r3, [r7, #4]
 8013f18:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 8013f1c:	2bff      	cmp	r3, #255	; 0xff
 8013f1e:	d007      	beq.n	8013f30 <tcp_receive+0x130>
                ++pcb->dupacks;
 8013f20:	687b      	ldr	r3, [r7, #4]
 8013f22:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 8013f26:	3301      	adds	r3, #1
 8013f28:	b2da      	uxtb	r2, r3
 8013f2a:	687b      	ldr	r3, [r7, #4]
 8013f2c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
              }
              if (pcb->dupacks > 3) {
 8013f30:	687b      	ldr	r3, [r7, #4]
 8013f32:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 8013f36:	2b03      	cmp	r3, #3
 8013f38:	d91b      	bls.n	8013f72 <tcp_receive+0x172>
                /* Inflate the congestion window */
                TCP_WND_INC(pcb->cwnd, pcb->mss);
 8013f3a:	687b      	ldr	r3, [r7, #4]
 8013f3c:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 8013f40:	687b      	ldr	r3, [r7, #4]
 8013f42:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8013f44:	4413      	add	r3, r2
 8013f46:	b29a      	uxth	r2, r3
 8013f48:	687b      	ldr	r3, [r7, #4]
 8013f4a:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 8013f4e:	429a      	cmp	r2, r3
 8013f50:	d30a      	bcc.n	8013f68 <tcp_receive+0x168>
 8013f52:	687b      	ldr	r3, [r7, #4]
 8013f54:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 8013f58:	687b      	ldr	r3, [r7, #4]
 8013f5a:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8013f5c:	4413      	add	r3, r2
 8013f5e:	b29a      	uxth	r2, r3
 8013f60:	687b      	ldr	r3, [r7, #4]
 8013f62:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
 8013f66:	e004      	b.n	8013f72 <tcp_receive+0x172>
 8013f68:	687b      	ldr	r3, [r7, #4]
 8013f6a:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8013f6e:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
              }
              if (pcb->dupacks >= 3) {
 8013f72:	687b      	ldr	r3, [r7, #4]
 8013f74:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 8013f78:	2b02      	cmp	r3, #2
 8013f7a:	d902      	bls.n	8013f82 <tcp_receive+0x182>
                /* Do fast retransmit (checked via TF_INFR, not via dupacks count) */
                tcp_rexmit_fast(pcb);
 8013f7c:	6878      	ldr	r0, [r7, #4]
 8013f7e:	f001 feed 	bl	8015d5c <tcp_rexmit_fast>
          }
        }
      }
      /* If Clause (1) or more is true, but not a duplicate ack, reset
       * count of consecutive duplicate acks */
      if (!found_dupack) {
 8013f82:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8013f84:	2b00      	cmp	r3, #0
 8013f86:	f040 8161 	bne.w	801424c <tcp_receive+0x44c>
        pcb->dupacks = 0;
 8013f8a:	687b      	ldr	r3, [r7, #4]
 8013f8c:	2200      	movs	r2, #0
 8013f8e:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8013f92:	e15b      	b.n	801424c <tcp_receive+0x44c>
      }
    } else if (TCP_SEQ_BETWEEN(ackno, pcb->lastack + 1, pcb->snd_nxt)) {
 8013f94:	4b36      	ldr	r3, [pc, #216]	; (8014070 <tcp_receive+0x270>)
 8013f96:	681a      	ldr	r2, [r3, #0]
 8013f98:	687b      	ldr	r3, [r7, #4]
 8013f9a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8013f9c:	1ad3      	subs	r3, r2, r3
 8013f9e:	3b01      	subs	r3, #1
 8013fa0:	2b00      	cmp	r3, #0
 8013fa2:	f2c0 814e 	blt.w	8014242 <tcp_receive+0x442>
 8013fa6:	4b32      	ldr	r3, [pc, #200]	; (8014070 <tcp_receive+0x270>)
 8013fa8:	681a      	ldr	r2, [r3, #0]
 8013faa:	687b      	ldr	r3, [r7, #4]
 8013fac:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8013fae:	1ad3      	subs	r3, r2, r3
 8013fb0:	2b00      	cmp	r3, #0
 8013fb2:	f300 8146 	bgt.w	8014242 <tcp_receive+0x442>
      tcpwnd_size_t acked;

      /* Reset the "IN Fast Retransmit" flag, since we are no longer
         in fast retransmit. Also reset the congestion window to the
         slow start threshold. */
      if (pcb->flags & TF_INFR) {
 8013fb6:	687b      	ldr	r3, [r7, #4]
 8013fb8:	8b5b      	ldrh	r3, [r3, #26]
 8013fba:	f003 0304 	and.w	r3, r3, #4
 8013fbe:	2b00      	cmp	r3, #0
 8013fc0:	d010      	beq.n	8013fe4 <tcp_receive+0x1e4>
        tcp_clear_flags(pcb, TF_INFR);
 8013fc2:	687b      	ldr	r3, [r7, #4]
 8013fc4:	8b5b      	ldrh	r3, [r3, #26]
 8013fc6:	f023 0304 	bic.w	r3, r3, #4
 8013fca:	b29a      	uxth	r2, r3
 8013fcc:	687b      	ldr	r3, [r7, #4]
 8013fce:	835a      	strh	r2, [r3, #26]
        pcb->cwnd = pcb->ssthresh;
 8013fd0:	687b      	ldr	r3, [r7, #4]
 8013fd2:	f8b3 204a 	ldrh.w	r2, [r3, #74]	; 0x4a
 8013fd6:	687b      	ldr	r3, [r7, #4]
 8013fd8:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
        pcb->bytes_acked = 0;
 8013fdc:	687b      	ldr	r3, [r7, #4]
 8013fde:	2200      	movs	r2, #0
 8013fe0:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
      }

      /* Reset the number of retransmissions. */
      pcb->nrtx = 0;
 8013fe4:	687b      	ldr	r3, [r7, #4]
 8013fe6:	2200      	movs	r2, #0
 8013fe8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

      /* Reset the retransmission time-out. */
      pcb->rto = (s16_t)((pcb->sa >> 3) + pcb->sv);
 8013fec:	687b      	ldr	r3, [r7, #4]
 8013fee:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	; 0x3c
 8013ff2:	10db      	asrs	r3, r3, #3
 8013ff4:	b21b      	sxth	r3, r3
 8013ff6:	b29a      	uxth	r2, r3
 8013ff8:	687b      	ldr	r3, [r7, #4]
 8013ffa:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	; 0x3e
 8013ffe:	b29b      	uxth	r3, r3
 8014000:	4413      	add	r3, r2
 8014002:	b29b      	uxth	r3, r3
 8014004:	b21a      	sxth	r2, r3
 8014006:	687b      	ldr	r3, [r7, #4]
 8014008:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

      /* Record how much data this ACK acks */
      acked = (tcpwnd_size_t)(ackno - pcb->lastack);
 801400c:	4b18      	ldr	r3, [pc, #96]	; (8014070 <tcp_receive+0x270>)
 801400e:	681b      	ldr	r3, [r3, #0]
 8014010:	b29a      	uxth	r2, r3
 8014012:	687b      	ldr	r3, [r7, #4]
 8014014:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8014016:	b29b      	uxth	r3, r3
 8014018:	1ad3      	subs	r3, r2, r3
 801401a:	85fb      	strh	r3, [r7, #46]	; 0x2e

      /* Reset the fast retransmit variables. */
      pcb->dupacks = 0;
 801401c:	687b      	ldr	r3, [r7, #4]
 801401e:	2200      	movs	r2, #0
 8014020:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
      pcb->lastack = ackno;
 8014024:	4b12      	ldr	r3, [pc, #72]	; (8014070 <tcp_receive+0x270>)
 8014026:	681a      	ldr	r2, [r3, #0]
 8014028:	687b      	ldr	r3, [r7, #4]
 801402a:	645a      	str	r2, [r3, #68]	; 0x44

      /* Update the congestion control variables (cwnd and
         ssthresh). */
      if (pcb->state >= ESTABLISHED) {
 801402c:	687b      	ldr	r3, [r7, #4]
 801402e:	7d1b      	ldrb	r3, [r3, #20]
 8014030:	2b03      	cmp	r3, #3
 8014032:	f240 8097 	bls.w	8014164 <tcp_receive+0x364>
        if (pcb->cwnd < pcb->ssthresh) {
 8014036:	687b      	ldr	r3, [r7, #4]
 8014038:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 801403c:	687b      	ldr	r3, [r7, #4]
 801403e:	f8b3 304a 	ldrh.w	r3, [r3, #74]	; 0x4a
 8014042:	429a      	cmp	r2, r3
 8014044:	d245      	bcs.n	80140d2 <tcp_receive+0x2d2>
          tcpwnd_size_t increase;
          /* limit to 1 SMSS segment during period following RTO */
          u8_t num_seg = (pcb->flags & TF_RTO) ? 1 : 2;
 8014046:	687b      	ldr	r3, [r7, #4]
 8014048:	8b5b      	ldrh	r3, [r3, #26]
 801404a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 801404e:	2b00      	cmp	r3, #0
 8014050:	d014      	beq.n	801407c <tcp_receive+0x27c>
 8014052:	2301      	movs	r3, #1
 8014054:	e013      	b.n	801407e <tcp_receive+0x27e>
 8014056:	bf00      	nop
 8014058:	0801d41c 	.word	0x0801d41c
 801405c:	0801d74c 	.word	0x0801d74c
 8014060:	0801d468 	.word	0x0801d468
 8014064:	0801d768 	.word	0x0801d768
 8014068:	20007088 	.word	0x20007088
 801406c:	2000707c 	.word	0x2000707c
 8014070:	20007080 	.word	0x20007080
 8014074:	2000706c 	.word	0x2000706c
 8014078:	20007086 	.word	0x20007086
 801407c:	2302      	movs	r3, #2
 801407e:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d
          /* RFC 3465, section 2.2 Slow Start */
          increase = LWIP_MIN(acked, (tcpwnd_size_t)(num_seg * pcb->mss));
 8014082:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 8014086:	b29a      	uxth	r2, r3
 8014088:	687b      	ldr	r3, [r7, #4]
 801408a:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 801408c:	fb12 f303 	smulbb	r3, r2, r3
 8014090:	b29b      	uxth	r3, r3
 8014092:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 8014094:	4293      	cmp	r3, r2
 8014096:	bf28      	it	cs
 8014098:	4613      	movcs	r3, r2
 801409a:	857b      	strh	r3, [r7, #42]	; 0x2a
          TCP_WND_INC(pcb->cwnd, increase);
 801409c:	687b      	ldr	r3, [r7, #4]
 801409e:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 80140a2:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 80140a4:	4413      	add	r3, r2
 80140a6:	b29a      	uxth	r2, r3
 80140a8:	687b      	ldr	r3, [r7, #4]
 80140aa:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 80140ae:	429a      	cmp	r2, r3
 80140b0:	d309      	bcc.n	80140c6 <tcp_receive+0x2c6>
 80140b2:	687b      	ldr	r3, [r7, #4]
 80140b4:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 80140b8:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 80140ba:	4413      	add	r3, r2
 80140bc:	b29a      	uxth	r2, r3
 80140be:	687b      	ldr	r3, [r7, #4]
 80140c0:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
 80140c4:	e04e      	b.n	8014164 <tcp_receive+0x364>
 80140c6:	687b      	ldr	r3, [r7, #4]
 80140c8:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80140cc:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
 80140d0:	e048      	b.n	8014164 <tcp_receive+0x364>
          LWIP_DEBUGF(TCP_CWND_DEBUG, ("tcp_receive: slow start cwnd %"TCPWNDSIZE_F"\n", pcb->cwnd));
        } else {
          /* RFC 3465, section 2.1 Congestion Avoidance */
          TCP_WND_INC(pcb->bytes_acked, acked);
 80140d2:	687b      	ldr	r3, [r7, #4]
 80140d4:	f8b3 206a 	ldrh.w	r2, [r3, #106]	; 0x6a
 80140d8:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 80140da:	4413      	add	r3, r2
 80140dc:	b29a      	uxth	r2, r3
 80140de:	687b      	ldr	r3, [r7, #4]
 80140e0:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 80140e4:	429a      	cmp	r2, r3
 80140e6:	d309      	bcc.n	80140fc <tcp_receive+0x2fc>
 80140e8:	687b      	ldr	r3, [r7, #4]
 80140ea:	f8b3 206a 	ldrh.w	r2, [r3, #106]	; 0x6a
 80140ee:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 80140f0:	4413      	add	r3, r2
 80140f2:	b29a      	uxth	r2, r3
 80140f4:	687b      	ldr	r3, [r7, #4]
 80140f6:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
 80140fa:	e004      	b.n	8014106 <tcp_receive+0x306>
 80140fc:	687b      	ldr	r3, [r7, #4]
 80140fe:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8014102:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
          if (pcb->bytes_acked >= pcb->cwnd) {
 8014106:	687b      	ldr	r3, [r7, #4]
 8014108:	f8b3 206a 	ldrh.w	r2, [r3, #106]	; 0x6a
 801410c:	687b      	ldr	r3, [r7, #4]
 801410e:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 8014112:	429a      	cmp	r2, r3
 8014114:	d326      	bcc.n	8014164 <tcp_receive+0x364>
            pcb->bytes_acked = (tcpwnd_size_t)(pcb->bytes_acked - pcb->cwnd);
 8014116:	687b      	ldr	r3, [r7, #4]
 8014118:	f8b3 206a 	ldrh.w	r2, [r3, #106]	; 0x6a
 801411c:	687b      	ldr	r3, [r7, #4]
 801411e:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 8014122:	1ad3      	subs	r3, r2, r3
 8014124:	b29a      	uxth	r2, r3
 8014126:	687b      	ldr	r3, [r7, #4]
 8014128:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
            TCP_WND_INC(pcb->cwnd, pcb->mss);
 801412c:	687b      	ldr	r3, [r7, #4]
 801412e:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 8014132:	687b      	ldr	r3, [r7, #4]
 8014134:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8014136:	4413      	add	r3, r2
 8014138:	b29a      	uxth	r2, r3
 801413a:	687b      	ldr	r3, [r7, #4]
 801413c:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 8014140:	429a      	cmp	r2, r3
 8014142:	d30a      	bcc.n	801415a <tcp_receive+0x35a>
 8014144:	687b      	ldr	r3, [r7, #4]
 8014146:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 801414a:	687b      	ldr	r3, [r7, #4]
 801414c:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 801414e:	4413      	add	r3, r2
 8014150:	b29a      	uxth	r2, r3
 8014152:	687b      	ldr	r3, [r7, #4]
 8014154:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
 8014158:	e004      	b.n	8014164 <tcp_receive+0x364>
 801415a:	687b      	ldr	r3, [r7, #4]
 801415c:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8014160:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
                                    pcb->unacked != NULL ?
                                    lwip_ntohl(pcb->unacked->tcphdr->seqno) + TCP_TCPLEN(pcb->unacked) : 0));

      /* Remove segment from the unacknowledged list if the incoming
         ACK acknowledges them. */
      pcb->unacked = tcp_free_acked_segments(pcb, pcb->unacked, "unacked", pcb->unsent);
 8014164:	687b      	ldr	r3, [r7, #4]
 8014166:	6f19      	ldr	r1, [r3, #112]	; 0x70
 8014168:	687b      	ldr	r3, [r7, #4]
 801416a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 801416c:	4a98      	ldr	r2, [pc, #608]	; (80143d0 <tcp_receive+0x5d0>)
 801416e:	6878      	ldr	r0, [r7, #4]
 8014170:	f7ff fdca 	bl	8013d08 <tcp_free_acked_segments>
 8014174:	4602      	mov	r2, r0
 8014176:	687b      	ldr	r3, [r7, #4]
 8014178:	671a      	str	r2, [r3, #112]	; 0x70
         on the list are acknowledged by the ACK. This may seem
         strange since an "unsent" segment shouldn't be acked. The
         rationale is that lwIP puts all outstanding segments on the
         ->unsent list after a retransmission, so these segments may
         in fact have been sent once. */
      pcb->unsent = tcp_free_acked_segments(pcb, pcb->unsent, "unsent", pcb->unacked);
 801417a:	687b      	ldr	r3, [r7, #4]
 801417c:	6ed9      	ldr	r1, [r3, #108]	; 0x6c
 801417e:	687b      	ldr	r3, [r7, #4]
 8014180:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8014182:	4a94      	ldr	r2, [pc, #592]	; (80143d4 <tcp_receive+0x5d4>)
 8014184:	6878      	ldr	r0, [r7, #4]
 8014186:	f7ff fdbf 	bl	8013d08 <tcp_free_acked_segments>
 801418a:	4602      	mov	r2, r0
 801418c:	687b      	ldr	r3, [r7, #4]
 801418e:	66da      	str	r2, [r3, #108]	; 0x6c

      /* If there's nothing left to acknowledge, stop the retransmit
         timer, otherwise reset it to start again */
      if (pcb->unacked == NULL) {
 8014190:	687b      	ldr	r3, [r7, #4]
 8014192:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8014194:	2b00      	cmp	r3, #0
 8014196:	d104      	bne.n	80141a2 <tcp_receive+0x3a2>
        pcb->rtime = -1;
 8014198:	687b      	ldr	r3, [r7, #4]
 801419a:	f64f 72ff 	movw	r2, #65535	; 0xffff
 801419e:	861a      	strh	r2, [r3, #48]	; 0x30
 80141a0:	e002      	b.n	80141a8 <tcp_receive+0x3a8>
      } else {
        pcb->rtime = 0;
 80141a2:	687b      	ldr	r3, [r7, #4]
 80141a4:	2200      	movs	r2, #0
 80141a6:	861a      	strh	r2, [r3, #48]	; 0x30
      }

      pcb->polltmr = 0;
 80141a8:	687b      	ldr	r3, [r7, #4]
 80141aa:	2200      	movs	r2, #0
 80141ac:	771a      	strb	r2, [r3, #28]

#if TCP_OVERSIZE
      if (pcb->unsent == NULL) {
 80141ae:	687b      	ldr	r3, [r7, #4]
 80141b0:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80141b2:	2b00      	cmp	r3, #0
 80141b4:	d103      	bne.n	80141be <tcp_receive+0x3be>
        pcb->unsent_oversize = 0;
 80141b6:	687b      	ldr	r3, [r7, #4]
 80141b8:	2200      	movs	r2, #0
 80141ba:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
        /* Inform neighbor reachability of forward progress. */
        nd6_reachability_hint(ip6_current_src_addr());
      }
#endif /* LWIP_IPV6 && LWIP_ND6_TCP_REACHABILITY_HINTS*/

      pcb->snd_buf = (tcpwnd_size_t)(pcb->snd_buf + recv_acked);
 80141be:	687b      	ldr	r3, [r7, #4]
 80141c0:	f8b3 2064 	ldrh.w	r2, [r3, #100]	; 0x64
 80141c4:	4b84      	ldr	r3, [pc, #528]	; (80143d8 <tcp_receive+0x5d8>)
 80141c6:	881b      	ldrh	r3, [r3, #0]
 80141c8:	4413      	add	r3, r2
 80141ca:	b29a      	uxth	r2, r3
 80141cc:	687b      	ldr	r3, [r7, #4]
 80141ce:	f8a3 2064 	strh.w	r2, [r3, #100]	; 0x64
      /* check if this ACK ends our retransmission of in-flight data */
      if (pcb->flags & TF_RTO) {
 80141d2:	687b      	ldr	r3, [r7, #4]
 80141d4:	8b5b      	ldrh	r3, [r3, #26]
 80141d6:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80141da:	2b00      	cmp	r3, #0
 80141dc:	d035      	beq.n	801424a <tcp_receive+0x44a>
        /* RTO is done if
            1) both queues are empty or
            2) unacked is empty and unsent head contains data not part of RTO or
            3) unacked head contains data not part of RTO */
        if (pcb->unacked == NULL) {
 80141de:	687b      	ldr	r3, [r7, #4]
 80141e0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80141e2:	2b00      	cmp	r3, #0
 80141e4:	d118      	bne.n	8014218 <tcp_receive+0x418>
          if ((pcb->unsent == NULL) ||
 80141e6:	687b      	ldr	r3, [r7, #4]
 80141e8:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80141ea:	2b00      	cmp	r3, #0
 80141ec:	d00c      	beq.n	8014208 <tcp_receive+0x408>
              (TCP_SEQ_LEQ(pcb->rto_end, lwip_ntohl(pcb->unsent->tcphdr->seqno)))) {
 80141ee:	687b      	ldr	r3, [r7, #4]
 80141f0:	6cdc      	ldr	r4, [r3, #76]	; 0x4c
 80141f2:	687b      	ldr	r3, [r7, #4]
 80141f4:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80141f6:	68db      	ldr	r3, [r3, #12]
 80141f8:	685b      	ldr	r3, [r3, #4]
 80141fa:	4618      	mov	r0, r3
 80141fc:	f7fb f92d 	bl	800f45a <lwip_htonl>
 8014200:	4603      	mov	r3, r0
 8014202:	1ae3      	subs	r3, r4, r3
          if ((pcb->unsent == NULL) ||
 8014204:	2b00      	cmp	r3, #0
 8014206:	dc20      	bgt.n	801424a <tcp_receive+0x44a>
            tcp_clear_flags(pcb, TF_RTO);
 8014208:	687b      	ldr	r3, [r7, #4]
 801420a:	8b5b      	ldrh	r3, [r3, #26]
 801420c:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8014210:	b29a      	uxth	r2, r3
 8014212:	687b      	ldr	r3, [r7, #4]
 8014214:	835a      	strh	r2, [r3, #26]
    } else if (TCP_SEQ_BETWEEN(ackno, pcb->lastack + 1, pcb->snd_nxt)) {
 8014216:	e018      	b.n	801424a <tcp_receive+0x44a>
          }
        } else if (TCP_SEQ_LEQ(pcb->rto_end, lwip_ntohl(pcb->unacked->tcphdr->seqno))) {
 8014218:	687b      	ldr	r3, [r7, #4]
 801421a:	6cdc      	ldr	r4, [r3, #76]	; 0x4c
 801421c:	687b      	ldr	r3, [r7, #4]
 801421e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8014220:	68db      	ldr	r3, [r3, #12]
 8014222:	685b      	ldr	r3, [r3, #4]
 8014224:	4618      	mov	r0, r3
 8014226:	f7fb f918 	bl	800f45a <lwip_htonl>
 801422a:	4603      	mov	r3, r0
 801422c:	1ae3      	subs	r3, r4, r3
 801422e:	2b00      	cmp	r3, #0
 8014230:	dc0b      	bgt.n	801424a <tcp_receive+0x44a>
          tcp_clear_flags(pcb, TF_RTO);
 8014232:	687b      	ldr	r3, [r7, #4]
 8014234:	8b5b      	ldrh	r3, [r3, #26]
 8014236:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 801423a:	b29a      	uxth	r2, r3
 801423c:	687b      	ldr	r3, [r7, #4]
 801423e:	835a      	strh	r2, [r3, #26]
    } else if (TCP_SEQ_BETWEEN(ackno, pcb->lastack + 1, pcb->snd_nxt)) {
 8014240:	e003      	b.n	801424a <tcp_receive+0x44a>
        }
      }
      /* End of ACK for new data processing. */
    } else {
      /* Out of sequence ACK, didn't really ack anything */
      tcp_send_empty_ack(pcb);
 8014242:	6878      	ldr	r0, [r7, #4]
 8014244:	f001 ff76 	bl	8016134 <tcp_send_empty_ack>
 8014248:	e000      	b.n	801424c <tcp_receive+0x44c>
    } else if (TCP_SEQ_BETWEEN(ackno, pcb->lastack + 1, pcb->snd_nxt)) {
 801424a:	bf00      	nop
                                pcb->rttest, pcb->rtseq, ackno));

    /* RTT estimation calculations. This is done by checking if the
       incoming segment acknowledges the segment we use to take a
       round-trip time measurement. */
    if (pcb->rttest && TCP_SEQ_LT(pcb->rtseq, ackno)) {
 801424c:	687b      	ldr	r3, [r7, #4]
 801424e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8014250:	2b00      	cmp	r3, #0
 8014252:	d05b      	beq.n	801430c <tcp_receive+0x50c>
 8014254:	687b      	ldr	r3, [r7, #4]
 8014256:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8014258:	4b60      	ldr	r3, [pc, #384]	; (80143dc <tcp_receive+0x5dc>)
 801425a:	681b      	ldr	r3, [r3, #0]
 801425c:	1ad3      	subs	r3, r2, r3
 801425e:	2b00      	cmp	r3, #0
 8014260:	da54      	bge.n	801430c <tcp_receive+0x50c>
      /* diff between this shouldn't exceed 32K since this are tcp timer ticks
         and a round-trip shouldn't be that long... */
      m = (s16_t)(tcp_ticks - pcb->rttest);
 8014262:	4b5f      	ldr	r3, [pc, #380]	; (80143e0 <tcp_receive+0x5e0>)
 8014264:	681b      	ldr	r3, [r3, #0]
 8014266:	b29a      	uxth	r2, r3
 8014268:	687b      	ldr	r3, [r7, #4]
 801426a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 801426c:	b29b      	uxth	r3, r3
 801426e:	1ad3      	subs	r3, r2, r3
 8014270:	b29b      	uxth	r3, r3
 8014272:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e

      LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_receive: experienced rtt %"U16_F" ticks (%"U16_F" msec).\n",
                                  m, (u16_t)(m * TCP_SLOW_INTERVAL)));

      /* This is taken directly from VJs original code in his paper */
      m = (s16_t)(m - (pcb->sa >> 3));
 8014276:	f8b7 204e 	ldrh.w	r2, [r7, #78]	; 0x4e
 801427a:	687b      	ldr	r3, [r7, #4]
 801427c:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	; 0x3c
 8014280:	10db      	asrs	r3, r3, #3
 8014282:	b21b      	sxth	r3, r3
 8014284:	b29b      	uxth	r3, r3
 8014286:	1ad3      	subs	r3, r2, r3
 8014288:	b29b      	uxth	r3, r3
 801428a:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
      pcb->sa = (s16_t)(pcb->sa + m);
 801428e:	687b      	ldr	r3, [r7, #4]
 8014290:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	; 0x3c
 8014294:	b29a      	uxth	r2, r3
 8014296:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 801429a:	4413      	add	r3, r2
 801429c:	b29b      	uxth	r3, r3
 801429e:	b21a      	sxth	r2, r3
 80142a0:	687b      	ldr	r3, [r7, #4]
 80142a2:	879a      	strh	r2, [r3, #60]	; 0x3c
      if (m < 0) {
 80142a4:	f9b7 304e 	ldrsh.w	r3, [r7, #78]	; 0x4e
 80142a8:	2b00      	cmp	r3, #0
 80142aa:	da05      	bge.n	80142b8 <tcp_receive+0x4b8>
        m = (s16_t) - m;
 80142ac:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 80142b0:	425b      	negs	r3, r3
 80142b2:	b29b      	uxth	r3, r3
 80142b4:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
      }
      m = (s16_t)(m - (pcb->sv >> 2));
 80142b8:	f8b7 204e 	ldrh.w	r2, [r7, #78]	; 0x4e
 80142bc:	687b      	ldr	r3, [r7, #4]
 80142be:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	; 0x3e
 80142c2:	109b      	asrs	r3, r3, #2
 80142c4:	b21b      	sxth	r3, r3
 80142c6:	b29b      	uxth	r3, r3
 80142c8:	1ad3      	subs	r3, r2, r3
 80142ca:	b29b      	uxth	r3, r3
 80142cc:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
      pcb->sv = (s16_t)(pcb->sv + m);
 80142d0:	687b      	ldr	r3, [r7, #4]
 80142d2:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	; 0x3e
 80142d6:	b29a      	uxth	r2, r3
 80142d8:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 80142dc:	4413      	add	r3, r2
 80142de:	b29b      	uxth	r3, r3
 80142e0:	b21a      	sxth	r2, r3
 80142e2:	687b      	ldr	r3, [r7, #4]
 80142e4:	87da      	strh	r2, [r3, #62]	; 0x3e
      pcb->rto = (s16_t)((pcb->sa >> 3) + pcb->sv);
 80142e6:	687b      	ldr	r3, [r7, #4]
 80142e8:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	; 0x3c
 80142ec:	10db      	asrs	r3, r3, #3
 80142ee:	b21b      	sxth	r3, r3
 80142f0:	b29a      	uxth	r2, r3
 80142f2:	687b      	ldr	r3, [r7, #4]
 80142f4:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	; 0x3e
 80142f8:	b29b      	uxth	r3, r3
 80142fa:	4413      	add	r3, r2
 80142fc:	b29b      	uxth	r3, r3
 80142fe:	b21a      	sxth	r2, r3
 8014300:	687b      	ldr	r3, [r7, #4]
 8014302:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

      LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_receive: RTO %"U16_F" (%"U16_F" milliseconds)\n",
                                  pcb->rto, (u16_t)(pcb->rto * TCP_SLOW_INTERVAL)));

      pcb->rttest = 0;
 8014306:	687b      	ldr	r3, [r7, #4]
 8014308:	2200      	movs	r2, #0
 801430a:	635a      	str	r2, [r3, #52]	; 0x34

  /* If the incoming segment contains data, we must process it
     further unless the pcb already received a FIN.
     (RFC 793, chapter 3.9, "SEGMENT ARRIVES" in states CLOSE-WAIT, CLOSING,
     LAST-ACK and TIME-WAIT: "Ignore the segment text.") */
  if ((tcplen > 0) && (pcb->state < CLOSE_WAIT)) {
 801430c:	4b35      	ldr	r3, [pc, #212]	; (80143e4 <tcp_receive+0x5e4>)
 801430e:	881b      	ldrh	r3, [r3, #0]
 8014310:	2b00      	cmp	r3, #0
 8014312:	f000 84e2 	beq.w	8014cda <tcp_receive+0xeda>
 8014316:	687b      	ldr	r3, [r7, #4]
 8014318:	7d1b      	ldrb	r3, [r3, #20]
 801431a:	2b06      	cmp	r3, #6
 801431c:	f200 84dd 	bhi.w	8014cda <tcp_receive+0xeda>
       this if the sequence number of the incoming segment is less
       than rcv_nxt, and the sequence number plus the length of the
       segment is larger than rcv_nxt. */
    /*    if (TCP_SEQ_LT(seqno, pcb->rcv_nxt)) {
          if (TCP_SEQ_LT(pcb->rcv_nxt, seqno + tcplen)) {*/
    if (TCP_SEQ_BETWEEN(pcb->rcv_nxt, seqno + 1, seqno + tcplen - 1)) {
 8014320:	687b      	ldr	r3, [r7, #4]
 8014322:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8014324:	4b30      	ldr	r3, [pc, #192]	; (80143e8 <tcp_receive+0x5e8>)
 8014326:	681b      	ldr	r3, [r3, #0]
 8014328:	1ad3      	subs	r3, r2, r3
 801432a:	3b01      	subs	r3, #1
 801432c:	2b00      	cmp	r3, #0
 801432e:	f2c0 808f 	blt.w	8014450 <tcp_receive+0x650>
 8014332:	687b      	ldr	r3, [r7, #4]
 8014334:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8014336:	4b2b      	ldr	r3, [pc, #172]	; (80143e4 <tcp_receive+0x5e4>)
 8014338:	881b      	ldrh	r3, [r3, #0]
 801433a:	4619      	mov	r1, r3
 801433c:	4b2a      	ldr	r3, [pc, #168]	; (80143e8 <tcp_receive+0x5e8>)
 801433e:	681b      	ldr	r3, [r3, #0]
 8014340:	440b      	add	r3, r1
 8014342:	1ad3      	subs	r3, r2, r3
 8014344:	3301      	adds	r3, #1
 8014346:	2b00      	cmp	r3, #0
 8014348:	f300 8082 	bgt.w	8014450 <tcp_receive+0x650>

         After we are done with adjusting the pbuf pointers we must
         adjust the ->data pointer in the seg and the segment
         length.*/

      struct pbuf *p = inseg.p;
 801434c:	4b27      	ldr	r3, [pc, #156]	; (80143ec <tcp_receive+0x5ec>)
 801434e:	685b      	ldr	r3, [r3, #4]
 8014350:	647b      	str	r3, [r7, #68]	; 0x44
      u32_t off32 = pcb->rcv_nxt - seqno;
 8014352:	687b      	ldr	r3, [r7, #4]
 8014354:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8014356:	4b24      	ldr	r3, [pc, #144]	; (80143e8 <tcp_receive+0x5e8>)
 8014358:	681b      	ldr	r3, [r3, #0]
 801435a:	1ad3      	subs	r3, r2, r3
 801435c:	627b      	str	r3, [r7, #36]	; 0x24
      u16_t new_tot_len, off;
      LWIP_ASSERT("inseg.p != NULL", inseg.p);
 801435e:	4b23      	ldr	r3, [pc, #140]	; (80143ec <tcp_receive+0x5ec>)
 8014360:	685b      	ldr	r3, [r3, #4]
 8014362:	2b00      	cmp	r3, #0
 8014364:	d106      	bne.n	8014374 <tcp_receive+0x574>
 8014366:	4b22      	ldr	r3, [pc, #136]	; (80143f0 <tcp_receive+0x5f0>)
 8014368:	f240 5294 	movw	r2, #1428	; 0x594
 801436c:	4921      	ldr	r1, [pc, #132]	; (80143f4 <tcp_receive+0x5f4>)
 801436e:	4822      	ldr	r0, [pc, #136]	; (80143f8 <tcp_receive+0x5f8>)
 8014370:	f005 fb7a 	bl	8019a68 <iprintf>
      LWIP_ASSERT("insane offset!", (off32 < 0xffff));
 8014374:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8014376:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 801437a:	4293      	cmp	r3, r2
 801437c:	d906      	bls.n	801438c <tcp_receive+0x58c>
 801437e:	4b1c      	ldr	r3, [pc, #112]	; (80143f0 <tcp_receive+0x5f0>)
 8014380:	f240 5295 	movw	r2, #1429	; 0x595
 8014384:	491d      	ldr	r1, [pc, #116]	; (80143fc <tcp_receive+0x5fc>)
 8014386:	481c      	ldr	r0, [pc, #112]	; (80143f8 <tcp_receive+0x5f8>)
 8014388:	f005 fb6e 	bl	8019a68 <iprintf>
      off = (u16_t)off32;
 801438c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801438e:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
      LWIP_ASSERT("pbuf too short!", (((s32_t)inseg.p->tot_len) >= off));
 8014392:	4b16      	ldr	r3, [pc, #88]	; (80143ec <tcp_receive+0x5ec>)
 8014394:	685b      	ldr	r3, [r3, #4]
 8014396:	891b      	ldrh	r3, [r3, #8]
 8014398:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 801439c:	429a      	cmp	r2, r3
 801439e:	d906      	bls.n	80143ae <tcp_receive+0x5ae>
 80143a0:	4b13      	ldr	r3, [pc, #76]	; (80143f0 <tcp_receive+0x5f0>)
 80143a2:	f240 5297 	movw	r2, #1431	; 0x597
 80143a6:	4916      	ldr	r1, [pc, #88]	; (8014400 <tcp_receive+0x600>)
 80143a8:	4813      	ldr	r0, [pc, #76]	; (80143f8 <tcp_receive+0x5f8>)
 80143aa:	f005 fb5d 	bl	8019a68 <iprintf>
      inseg.len -= off;
 80143ae:	4b0f      	ldr	r3, [pc, #60]	; (80143ec <tcp_receive+0x5ec>)
 80143b0:	891a      	ldrh	r2, [r3, #8]
 80143b2:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 80143b6:	1ad3      	subs	r3, r2, r3
 80143b8:	b29a      	uxth	r2, r3
 80143ba:	4b0c      	ldr	r3, [pc, #48]	; (80143ec <tcp_receive+0x5ec>)
 80143bc:	811a      	strh	r2, [r3, #8]
      new_tot_len = (u16_t)(inseg.p->tot_len - off);
 80143be:	4b0b      	ldr	r3, [pc, #44]	; (80143ec <tcp_receive+0x5ec>)
 80143c0:	685b      	ldr	r3, [r3, #4]
 80143c2:	891a      	ldrh	r2, [r3, #8]
 80143c4:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 80143c8:	1ad3      	subs	r3, r2, r3
 80143ca:	847b      	strh	r3, [r7, #34]	; 0x22
      while (p->len < off) {
 80143cc:	e02a      	b.n	8014424 <tcp_receive+0x624>
 80143ce:	bf00      	nop
 80143d0:	0801d784 	.word	0x0801d784
 80143d4:	0801d78c 	.word	0x0801d78c
 80143d8:	20007084 	.word	0x20007084
 80143dc:	20007080 	.word	0x20007080
 80143e0:	20007044 	.word	0x20007044
 80143e4:	20007086 	.word	0x20007086
 80143e8:	2000707c 	.word	0x2000707c
 80143ec:	2000705c 	.word	0x2000705c
 80143f0:	0801d41c 	.word	0x0801d41c
 80143f4:	0801d794 	.word	0x0801d794
 80143f8:	0801d468 	.word	0x0801d468
 80143fc:	0801d7a4 	.word	0x0801d7a4
 8014400:	0801d7b4 	.word	0x0801d7b4
        off -= p->len;
 8014404:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8014406:	895b      	ldrh	r3, [r3, #10]
 8014408:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 801440c:	1ad3      	subs	r3, r2, r3
 801440e:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
        /* all pbufs up to and including this one have len==0, so tot_len is equal */
        p->tot_len = new_tot_len;
 8014412:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8014414:	8c7a      	ldrh	r2, [r7, #34]	; 0x22
 8014416:	811a      	strh	r2, [r3, #8]
        p->len = 0;
 8014418:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 801441a:	2200      	movs	r2, #0
 801441c:	815a      	strh	r2, [r3, #10]
        p = p->next;
 801441e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8014420:	681b      	ldr	r3, [r3, #0]
 8014422:	647b      	str	r3, [r7, #68]	; 0x44
      while (p->len < off) {
 8014424:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8014426:	895b      	ldrh	r3, [r3, #10]
 8014428:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 801442c:	429a      	cmp	r2, r3
 801442e:	d8e9      	bhi.n	8014404 <tcp_receive+0x604>
      }
      /* cannot fail... */
      pbuf_remove_header(p, off);
 8014430:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 8014434:	4619      	mov	r1, r3
 8014436:	6c78      	ldr	r0, [r7, #68]	; 0x44
 8014438:	f7fc fb78 	bl	8010b2c <pbuf_remove_header>
      inseg.tcphdr->seqno = seqno = pcb->rcv_nxt;
 801443c:	687b      	ldr	r3, [r7, #4]
 801443e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8014440:	4a91      	ldr	r2, [pc, #580]	; (8014688 <tcp_receive+0x888>)
 8014442:	6013      	str	r3, [r2, #0]
 8014444:	4b91      	ldr	r3, [pc, #580]	; (801468c <tcp_receive+0x88c>)
 8014446:	68db      	ldr	r3, [r3, #12]
 8014448:	4a8f      	ldr	r2, [pc, #572]	; (8014688 <tcp_receive+0x888>)
 801444a:	6812      	ldr	r2, [r2, #0]
 801444c:	605a      	str	r2, [r3, #4]
    if (TCP_SEQ_BETWEEN(pcb->rcv_nxt, seqno + 1, seqno + tcplen - 1)) {
 801444e:	e00d      	b.n	801446c <tcp_receive+0x66c>
    } else {
      if (TCP_SEQ_LT(seqno, pcb->rcv_nxt)) {
 8014450:	4b8d      	ldr	r3, [pc, #564]	; (8014688 <tcp_receive+0x888>)
 8014452:	681a      	ldr	r2, [r3, #0]
 8014454:	687b      	ldr	r3, [r7, #4]
 8014456:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8014458:	1ad3      	subs	r3, r2, r3
 801445a:	2b00      	cmp	r3, #0
 801445c:	da06      	bge.n	801446c <tcp_receive+0x66c>
        /* the whole segment is < rcv_nxt */
        /* must be a duplicate of a packet that has already been correctly handled */

        LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_receive: duplicate seqno %"U32_F"\n", seqno));
        tcp_ack_now(pcb);
 801445e:	687b      	ldr	r3, [r7, #4]
 8014460:	8b5b      	ldrh	r3, [r3, #26]
 8014462:	f043 0302 	orr.w	r3, r3, #2
 8014466:	b29a      	uxth	r2, r3
 8014468:	687b      	ldr	r3, [r7, #4]
 801446a:	835a      	strh	r2, [r3, #26]
    }

    /* The sequence number must be within the window (above rcv_nxt
       and below rcv_nxt + rcv_wnd) in order to be further
       processed. */
    if (TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt,
 801446c:	4b86      	ldr	r3, [pc, #536]	; (8014688 <tcp_receive+0x888>)
 801446e:	681a      	ldr	r2, [r3, #0]
 8014470:	687b      	ldr	r3, [r7, #4]
 8014472:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8014474:	1ad3      	subs	r3, r2, r3
 8014476:	2b00      	cmp	r3, #0
 8014478:	f2c0 842a 	blt.w	8014cd0 <tcp_receive+0xed0>
 801447c:	4b82      	ldr	r3, [pc, #520]	; (8014688 <tcp_receive+0x888>)
 801447e:	681a      	ldr	r2, [r3, #0]
 8014480:	687b      	ldr	r3, [r7, #4]
 8014482:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8014484:	6879      	ldr	r1, [r7, #4]
 8014486:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 8014488:	440b      	add	r3, r1
 801448a:	1ad3      	subs	r3, r2, r3
 801448c:	3301      	adds	r3, #1
 801448e:	2b00      	cmp	r3, #0
 8014490:	f300 841e 	bgt.w	8014cd0 <tcp_receive+0xed0>
                        pcb->rcv_nxt + pcb->rcv_wnd - 1)) {
      if (pcb->rcv_nxt == seqno) {
 8014494:	687b      	ldr	r3, [r7, #4]
 8014496:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8014498:	4b7b      	ldr	r3, [pc, #492]	; (8014688 <tcp_receive+0x888>)
 801449a:	681b      	ldr	r3, [r3, #0]
 801449c:	429a      	cmp	r2, r3
 801449e:	f040 829a 	bne.w	80149d6 <tcp_receive+0xbd6>
        /* The incoming segment is the next in sequence. We check if
           we have to trim the end of the segment and update rcv_nxt
           and pass the data to the application. */
        tcplen = TCP_TCPLEN(&inseg);
 80144a2:	4b7a      	ldr	r3, [pc, #488]	; (801468c <tcp_receive+0x88c>)
 80144a4:	891c      	ldrh	r4, [r3, #8]
 80144a6:	4b79      	ldr	r3, [pc, #484]	; (801468c <tcp_receive+0x88c>)
 80144a8:	68db      	ldr	r3, [r3, #12]
 80144aa:	899b      	ldrh	r3, [r3, #12]
 80144ac:	b29b      	uxth	r3, r3
 80144ae:	4618      	mov	r0, r3
 80144b0:	f7fa ffbe 	bl	800f430 <lwip_htons>
 80144b4:	4603      	mov	r3, r0
 80144b6:	b2db      	uxtb	r3, r3
 80144b8:	f003 0303 	and.w	r3, r3, #3
 80144bc:	2b00      	cmp	r3, #0
 80144be:	d001      	beq.n	80144c4 <tcp_receive+0x6c4>
 80144c0:	2301      	movs	r3, #1
 80144c2:	e000      	b.n	80144c6 <tcp_receive+0x6c6>
 80144c4:	2300      	movs	r3, #0
 80144c6:	4423      	add	r3, r4
 80144c8:	b29a      	uxth	r2, r3
 80144ca:	4b71      	ldr	r3, [pc, #452]	; (8014690 <tcp_receive+0x890>)
 80144cc:	801a      	strh	r2, [r3, #0]

        if (tcplen > pcb->rcv_wnd) {
 80144ce:	687b      	ldr	r3, [r7, #4]
 80144d0:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 80144d2:	4b6f      	ldr	r3, [pc, #444]	; (8014690 <tcp_receive+0x890>)
 80144d4:	881b      	ldrh	r3, [r3, #0]
 80144d6:	429a      	cmp	r2, r3
 80144d8:	d275      	bcs.n	80145c6 <tcp_receive+0x7c6>
          LWIP_DEBUGF(TCP_INPUT_DEBUG,
                      ("tcp_receive: other end overran receive window"
                       "seqno %"U32_F" len %"U16_F" right edge %"U32_F"\n",
                       seqno, tcplen, pcb->rcv_nxt + pcb->rcv_wnd));
          if (TCPH_FLAGS(inseg.tcphdr) & TCP_FIN) {
 80144da:	4b6c      	ldr	r3, [pc, #432]	; (801468c <tcp_receive+0x88c>)
 80144dc:	68db      	ldr	r3, [r3, #12]
 80144de:	899b      	ldrh	r3, [r3, #12]
 80144e0:	b29b      	uxth	r3, r3
 80144e2:	4618      	mov	r0, r3
 80144e4:	f7fa ffa4 	bl	800f430 <lwip_htons>
 80144e8:	4603      	mov	r3, r0
 80144ea:	b2db      	uxtb	r3, r3
 80144ec:	f003 0301 	and.w	r3, r3, #1
 80144f0:	2b00      	cmp	r3, #0
 80144f2:	d01f      	beq.n	8014534 <tcp_receive+0x734>
            /* Must remove the FIN from the header as we're trimming
             * that byte of sequence-space from the packet */
            TCPH_FLAGS_SET(inseg.tcphdr, TCPH_FLAGS(inseg.tcphdr) & ~(unsigned int)TCP_FIN);
 80144f4:	4b65      	ldr	r3, [pc, #404]	; (801468c <tcp_receive+0x88c>)
 80144f6:	68db      	ldr	r3, [r3, #12]
 80144f8:	899b      	ldrh	r3, [r3, #12]
 80144fa:	b29b      	uxth	r3, r3
 80144fc:	b21b      	sxth	r3, r3
 80144fe:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 8014502:	b21c      	sxth	r4, r3
 8014504:	4b61      	ldr	r3, [pc, #388]	; (801468c <tcp_receive+0x88c>)
 8014506:	68db      	ldr	r3, [r3, #12]
 8014508:	899b      	ldrh	r3, [r3, #12]
 801450a:	b29b      	uxth	r3, r3
 801450c:	4618      	mov	r0, r3
 801450e:	f7fa ff8f 	bl	800f430 <lwip_htons>
 8014512:	4603      	mov	r3, r0
 8014514:	b2db      	uxtb	r3, r3
 8014516:	b29b      	uxth	r3, r3
 8014518:	f003 033e 	and.w	r3, r3, #62	; 0x3e
 801451c:	b29b      	uxth	r3, r3
 801451e:	4618      	mov	r0, r3
 8014520:	f7fa ff86 	bl	800f430 <lwip_htons>
 8014524:	4603      	mov	r3, r0
 8014526:	b21b      	sxth	r3, r3
 8014528:	4323      	orrs	r3, r4
 801452a:	b21a      	sxth	r2, r3
 801452c:	4b57      	ldr	r3, [pc, #348]	; (801468c <tcp_receive+0x88c>)
 801452e:	68db      	ldr	r3, [r3, #12]
 8014530:	b292      	uxth	r2, r2
 8014532:	819a      	strh	r2, [r3, #12]
          }
          /* Adjust length of segment to fit in the window. */
          TCPWND_CHECK16(pcb->rcv_wnd);
          inseg.len = (u16_t)pcb->rcv_wnd;
 8014534:	687b      	ldr	r3, [r7, #4]
 8014536:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 8014538:	4b54      	ldr	r3, [pc, #336]	; (801468c <tcp_receive+0x88c>)
 801453a:	811a      	strh	r2, [r3, #8]
          if (TCPH_FLAGS(inseg.tcphdr) & TCP_SYN) {
 801453c:	4b53      	ldr	r3, [pc, #332]	; (801468c <tcp_receive+0x88c>)
 801453e:	68db      	ldr	r3, [r3, #12]
 8014540:	899b      	ldrh	r3, [r3, #12]
 8014542:	b29b      	uxth	r3, r3
 8014544:	4618      	mov	r0, r3
 8014546:	f7fa ff73 	bl	800f430 <lwip_htons>
 801454a:	4603      	mov	r3, r0
 801454c:	b2db      	uxtb	r3, r3
 801454e:	f003 0302 	and.w	r3, r3, #2
 8014552:	2b00      	cmp	r3, #0
 8014554:	d005      	beq.n	8014562 <tcp_receive+0x762>
            inseg.len -= 1;
 8014556:	4b4d      	ldr	r3, [pc, #308]	; (801468c <tcp_receive+0x88c>)
 8014558:	891b      	ldrh	r3, [r3, #8]
 801455a:	3b01      	subs	r3, #1
 801455c:	b29a      	uxth	r2, r3
 801455e:	4b4b      	ldr	r3, [pc, #300]	; (801468c <tcp_receive+0x88c>)
 8014560:	811a      	strh	r2, [r3, #8]
          }
          pbuf_realloc(inseg.p, inseg.len);
 8014562:	4b4a      	ldr	r3, [pc, #296]	; (801468c <tcp_receive+0x88c>)
 8014564:	685b      	ldr	r3, [r3, #4]
 8014566:	4a49      	ldr	r2, [pc, #292]	; (801468c <tcp_receive+0x88c>)
 8014568:	8912      	ldrh	r2, [r2, #8]
 801456a:	4611      	mov	r1, r2
 801456c:	4618      	mov	r0, r3
 801456e:	f7fc f9df 	bl	8010930 <pbuf_realloc>
          tcplen = TCP_TCPLEN(&inseg);
 8014572:	4b46      	ldr	r3, [pc, #280]	; (801468c <tcp_receive+0x88c>)
 8014574:	891c      	ldrh	r4, [r3, #8]
 8014576:	4b45      	ldr	r3, [pc, #276]	; (801468c <tcp_receive+0x88c>)
 8014578:	68db      	ldr	r3, [r3, #12]
 801457a:	899b      	ldrh	r3, [r3, #12]
 801457c:	b29b      	uxth	r3, r3
 801457e:	4618      	mov	r0, r3
 8014580:	f7fa ff56 	bl	800f430 <lwip_htons>
 8014584:	4603      	mov	r3, r0
 8014586:	b2db      	uxtb	r3, r3
 8014588:	f003 0303 	and.w	r3, r3, #3
 801458c:	2b00      	cmp	r3, #0
 801458e:	d001      	beq.n	8014594 <tcp_receive+0x794>
 8014590:	2301      	movs	r3, #1
 8014592:	e000      	b.n	8014596 <tcp_receive+0x796>
 8014594:	2300      	movs	r3, #0
 8014596:	4423      	add	r3, r4
 8014598:	b29a      	uxth	r2, r3
 801459a:	4b3d      	ldr	r3, [pc, #244]	; (8014690 <tcp_receive+0x890>)
 801459c:	801a      	strh	r2, [r3, #0]
          LWIP_ASSERT("tcp_receive: segment not trimmed correctly to rcv_wnd\n",
 801459e:	4b3c      	ldr	r3, [pc, #240]	; (8014690 <tcp_receive+0x890>)
 80145a0:	881b      	ldrh	r3, [r3, #0]
 80145a2:	461a      	mov	r2, r3
 80145a4:	4b38      	ldr	r3, [pc, #224]	; (8014688 <tcp_receive+0x888>)
 80145a6:	681b      	ldr	r3, [r3, #0]
 80145a8:	441a      	add	r2, r3
 80145aa:	687b      	ldr	r3, [r7, #4]
 80145ac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80145ae:	6879      	ldr	r1, [r7, #4]
 80145b0:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 80145b2:	440b      	add	r3, r1
 80145b4:	429a      	cmp	r2, r3
 80145b6:	d006      	beq.n	80145c6 <tcp_receive+0x7c6>
 80145b8:	4b36      	ldr	r3, [pc, #216]	; (8014694 <tcp_receive+0x894>)
 80145ba:	f240 52cb 	movw	r2, #1483	; 0x5cb
 80145be:	4936      	ldr	r1, [pc, #216]	; (8014698 <tcp_receive+0x898>)
 80145c0:	4836      	ldr	r0, [pc, #216]	; (801469c <tcp_receive+0x89c>)
 80145c2:	f005 fa51 	bl	8019a68 <iprintf>
        }
#if TCP_QUEUE_OOSEQ
        /* Received in-sequence data, adjust ooseq data if:
           - FIN has been received or
           - inseq overlaps with ooseq */
        if (pcb->ooseq != NULL) {
 80145c6:	687b      	ldr	r3, [r7, #4]
 80145c8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80145ca:	2b00      	cmp	r3, #0
 80145cc:	f000 80e7 	beq.w	801479e <tcp_receive+0x99e>
          if (TCPH_FLAGS(inseg.tcphdr) & TCP_FIN) {
 80145d0:	4b2e      	ldr	r3, [pc, #184]	; (801468c <tcp_receive+0x88c>)
 80145d2:	68db      	ldr	r3, [r3, #12]
 80145d4:	899b      	ldrh	r3, [r3, #12]
 80145d6:	b29b      	uxth	r3, r3
 80145d8:	4618      	mov	r0, r3
 80145da:	f7fa ff29 	bl	800f430 <lwip_htons>
 80145de:	4603      	mov	r3, r0
 80145e0:	b2db      	uxtb	r3, r3
 80145e2:	f003 0301 	and.w	r3, r3, #1
 80145e6:	2b00      	cmp	r3, #0
 80145e8:	d010      	beq.n	801460c <tcp_receive+0x80c>
            LWIP_DEBUGF(TCP_INPUT_DEBUG,
                        ("tcp_receive: received in-order FIN, binning ooseq queue\n"));
            /* Received in-order FIN means anything that was received
             * out of order must now have been received in-order, so
             * bin the ooseq queue */
            while (pcb->ooseq != NULL) {
 80145ea:	e00a      	b.n	8014602 <tcp_receive+0x802>
              struct tcp_seg *old_ooseq = pcb->ooseq;
 80145ec:	687b      	ldr	r3, [r7, #4]
 80145ee:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80145f0:	60fb      	str	r3, [r7, #12]
              pcb->ooseq = pcb->ooseq->next;
 80145f2:	687b      	ldr	r3, [r7, #4]
 80145f4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80145f6:	681a      	ldr	r2, [r3, #0]
 80145f8:	687b      	ldr	r3, [r7, #4]
 80145fa:	675a      	str	r2, [r3, #116]	; 0x74
              tcp_seg_free(old_ooseq);
 80145fc:	68f8      	ldr	r0, [r7, #12]
 80145fe:	f7fd fd92 	bl	8012126 <tcp_seg_free>
            while (pcb->ooseq != NULL) {
 8014602:	687b      	ldr	r3, [r7, #4]
 8014604:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8014606:	2b00      	cmp	r3, #0
 8014608:	d1f0      	bne.n	80145ec <tcp_receive+0x7ec>
 801460a:	e0c8      	b.n	801479e <tcp_receive+0x99e>
            }
          } else {
            struct tcp_seg *next = pcb->ooseq;
 801460c:	687b      	ldr	r3, [r7, #4]
 801460e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8014610:	63fb      	str	r3, [r7, #60]	; 0x3c
            /* Remove all segments on ooseq that are covered by inseg already.
             * FIN is copied from ooseq to inseg if present. */
            while (next &&
 8014612:	e052      	b.n	80146ba <tcp_receive+0x8ba>
                   TCP_SEQ_GEQ(seqno + tcplen,
                               next->tcphdr->seqno + next->len)) {
              struct tcp_seg *tmp;
              /* inseg cannot have FIN here (already processed above) */
              if ((TCPH_FLAGS(next->tcphdr) & TCP_FIN) != 0 &&
 8014614:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8014616:	68db      	ldr	r3, [r3, #12]
 8014618:	899b      	ldrh	r3, [r3, #12]
 801461a:	b29b      	uxth	r3, r3
 801461c:	4618      	mov	r0, r3
 801461e:	f7fa ff07 	bl	800f430 <lwip_htons>
 8014622:	4603      	mov	r3, r0
 8014624:	b2db      	uxtb	r3, r3
 8014626:	f003 0301 	and.w	r3, r3, #1
 801462a:	2b00      	cmp	r3, #0
 801462c:	d03d      	beq.n	80146aa <tcp_receive+0x8aa>
                  (TCPH_FLAGS(inseg.tcphdr) & TCP_SYN) == 0) {
 801462e:	4b17      	ldr	r3, [pc, #92]	; (801468c <tcp_receive+0x88c>)
 8014630:	68db      	ldr	r3, [r3, #12]
 8014632:	899b      	ldrh	r3, [r3, #12]
 8014634:	b29b      	uxth	r3, r3
 8014636:	4618      	mov	r0, r3
 8014638:	f7fa fefa 	bl	800f430 <lwip_htons>
 801463c:	4603      	mov	r3, r0
 801463e:	b2db      	uxtb	r3, r3
 8014640:	f003 0302 	and.w	r3, r3, #2
              if ((TCPH_FLAGS(next->tcphdr) & TCP_FIN) != 0 &&
 8014644:	2b00      	cmp	r3, #0
 8014646:	d130      	bne.n	80146aa <tcp_receive+0x8aa>
                TCPH_SET_FLAG(inseg.tcphdr, TCP_FIN);
 8014648:	4b10      	ldr	r3, [pc, #64]	; (801468c <tcp_receive+0x88c>)
 801464a:	68db      	ldr	r3, [r3, #12]
 801464c:	899b      	ldrh	r3, [r3, #12]
 801464e:	b29c      	uxth	r4, r3
 8014650:	2001      	movs	r0, #1
 8014652:	f7fa feed 	bl	800f430 <lwip_htons>
 8014656:	4603      	mov	r3, r0
 8014658:	461a      	mov	r2, r3
 801465a:	4b0c      	ldr	r3, [pc, #48]	; (801468c <tcp_receive+0x88c>)
 801465c:	68db      	ldr	r3, [r3, #12]
 801465e:	4322      	orrs	r2, r4
 8014660:	b292      	uxth	r2, r2
 8014662:	819a      	strh	r2, [r3, #12]
                tcplen = TCP_TCPLEN(&inseg);
 8014664:	4b09      	ldr	r3, [pc, #36]	; (801468c <tcp_receive+0x88c>)
 8014666:	891c      	ldrh	r4, [r3, #8]
 8014668:	4b08      	ldr	r3, [pc, #32]	; (801468c <tcp_receive+0x88c>)
 801466a:	68db      	ldr	r3, [r3, #12]
 801466c:	899b      	ldrh	r3, [r3, #12]
 801466e:	b29b      	uxth	r3, r3
 8014670:	4618      	mov	r0, r3
 8014672:	f7fa fedd 	bl	800f430 <lwip_htons>
 8014676:	4603      	mov	r3, r0
 8014678:	b2db      	uxtb	r3, r3
 801467a:	f003 0303 	and.w	r3, r3, #3
 801467e:	2b00      	cmp	r3, #0
 8014680:	d00e      	beq.n	80146a0 <tcp_receive+0x8a0>
 8014682:	2301      	movs	r3, #1
 8014684:	e00d      	b.n	80146a2 <tcp_receive+0x8a2>
 8014686:	bf00      	nop
 8014688:	2000707c 	.word	0x2000707c
 801468c:	2000705c 	.word	0x2000705c
 8014690:	20007086 	.word	0x20007086
 8014694:	0801d41c 	.word	0x0801d41c
 8014698:	0801d7c4 	.word	0x0801d7c4
 801469c:	0801d468 	.word	0x0801d468
 80146a0:	2300      	movs	r3, #0
 80146a2:	4423      	add	r3, r4
 80146a4:	b29a      	uxth	r2, r3
 80146a6:	4b98      	ldr	r3, [pc, #608]	; (8014908 <tcp_receive+0xb08>)
 80146a8:	801a      	strh	r2, [r3, #0]
              }
              tmp = next;
 80146aa:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80146ac:	613b      	str	r3, [r7, #16]
              next = next->next;
 80146ae:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80146b0:	681b      	ldr	r3, [r3, #0]
 80146b2:	63fb      	str	r3, [r7, #60]	; 0x3c
              tcp_seg_free(tmp);
 80146b4:	6938      	ldr	r0, [r7, #16]
 80146b6:	f7fd fd36 	bl	8012126 <tcp_seg_free>
            while (next &&
 80146ba:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80146bc:	2b00      	cmp	r3, #0
 80146be:	d00e      	beq.n	80146de <tcp_receive+0x8de>
                   TCP_SEQ_GEQ(seqno + tcplen,
 80146c0:	4b91      	ldr	r3, [pc, #580]	; (8014908 <tcp_receive+0xb08>)
 80146c2:	881b      	ldrh	r3, [r3, #0]
 80146c4:	461a      	mov	r2, r3
 80146c6:	4b91      	ldr	r3, [pc, #580]	; (801490c <tcp_receive+0xb0c>)
 80146c8:	681b      	ldr	r3, [r3, #0]
 80146ca:	441a      	add	r2, r3
 80146cc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80146ce:	68db      	ldr	r3, [r3, #12]
 80146d0:	685b      	ldr	r3, [r3, #4]
 80146d2:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 80146d4:	8909      	ldrh	r1, [r1, #8]
 80146d6:	440b      	add	r3, r1
 80146d8:	1ad3      	subs	r3, r2, r3
            while (next &&
 80146da:	2b00      	cmp	r3, #0
 80146dc:	da9a      	bge.n	8014614 <tcp_receive+0x814>
            }
            /* Now trim right side of inseg if it overlaps with the first
             * segment on ooseq */
            if (next &&
 80146de:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80146e0:	2b00      	cmp	r3, #0
 80146e2:	d059      	beq.n	8014798 <tcp_receive+0x998>
                TCP_SEQ_GT(seqno + tcplen,
 80146e4:	4b88      	ldr	r3, [pc, #544]	; (8014908 <tcp_receive+0xb08>)
 80146e6:	881b      	ldrh	r3, [r3, #0]
 80146e8:	461a      	mov	r2, r3
 80146ea:	4b88      	ldr	r3, [pc, #544]	; (801490c <tcp_receive+0xb0c>)
 80146ec:	681b      	ldr	r3, [r3, #0]
 80146ee:	441a      	add	r2, r3
 80146f0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80146f2:	68db      	ldr	r3, [r3, #12]
 80146f4:	685b      	ldr	r3, [r3, #4]
 80146f6:	1ad3      	subs	r3, r2, r3
            if (next &&
 80146f8:	2b00      	cmp	r3, #0
 80146fa:	dd4d      	ble.n	8014798 <tcp_receive+0x998>
                           next->tcphdr->seqno)) {
              /* inseg cannot have FIN here (already processed above) */
              inseg.len = (u16_t)(next->tcphdr->seqno - seqno);
 80146fc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80146fe:	68db      	ldr	r3, [r3, #12]
 8014700:	685b      	ldr	r3, [r3, #4]
 8014702:	b29a      	uxth	r2, r3
 8014704:	4b81      	ldr	r3, [pc, #516]	; (801490c <tcp_receive+0xb0c>)
 8014706:	681b      	ldr	r3, [r3, #0]
 8014708:	b29b      	uxth	r3, r3
 801470a:	1ad3      	subs	r3, r2, r3
 801470c:	b29a      	uxth	r2, r3
 801470e:	4b80      	ldr	r3, [pc, #512]	; (8014910 <tcp_receive+0xb10>)
 8014710:	811a      	strh	r2, [r3, #8]
              if (TCPH_FLAGS(inseg.tcphdr) & TCP_SYN) {
 8014712:	4b7f      	ldr	r3, [pc, #508]	; (8014910 <tcp_receive+0xb10>)
 8014714:	68db      	ldr	r3, [r3, #12]
 8014716:	899b      	ldrh	r3, [r3, #12]
 8014718:	b29b      	uxth	r3, r3
 801471a:	4618      	mov	r0, r3
 801471c:	f7fa fe88 	bl	800f430 <lwip_htons>
 8014720:	4603      	mov	r3, r0
 8014722:	b2db      	uxtb	r3, r3
 8014724:	f003 0302 	and.w	r3, r3, #2
 8014728:	2b00      	cmp	r3, #0
 801472a:	d005      	beq.n	8014738 <tcp_receive+0x938>
                inseg.len -= 1;
 801472c:	4b78      	ldr	r3, [pc, #480]	; (8014910 <tcp_receive+0xb10>)
 801472e:	891b      	ldrh	r3, [r3, #8]
 8014730:	3b01      	subs	r3, #1
 8014732:	b29a      	uxth	r2, r3
 8014734:	4b76      	ldr	r3, [pc, #472]	; (8014910 <tcp_receive+0xb10>)
 8014736:	811a      	strh	r2, [r3, #8]
              }
              pbuf_realloc(inseg.p, inseg.len);
 8014738:	4b75      	ldr	r3, [pc, #468]	; (8014910 <tcp_receive+0xb10>)
 801473a:	685b      	ldr	r3, [r3, #4]
 801473c:	4a74      	ldr	r2, [pc, #464]	; (8014910 <tcp_receive+0xb10>)
 801473e:	8912      	ldrh	r2, [r2, #8]
 8014740:	4611      	mov	r1, r2
 8014742:	4618      	mov	r0, r3
 8014744:	f7fc f8f4 	bl	8010930 <pbuf_realloc>
              tcplen = TCP_TCPLEN(&inseg);
 8014748:	4b71      	ldr	r3, [pc, #452]	; (8014910 <tcp_receive+0xb10>)
 801474a:	891c      	ldrh	r4, [r3, #8]
 801474c:	4b70      	ldr	r3, [pc, #448]	; (8014910 <tcp_receive+0xb10>)
 801474e:	68db      	ldr	r3, [r3, #12]
 8014750:	899b      	ldrh	r3, [r3, #12]
 8014752:	b29b      	uxth	r3, r3
 8014754:	4618      	mov	r0, r3
 8014756:	f7fa fe6b 	bl	800f430 <lwip_htons>
 801475a:	4603      	mov	r3, r0
 801475c:	b2db      	uxtb	r3, r3
 801475e:	f003 0303 	and.w	r3, r3, #3
 8014762:	2b00      	cmp	r3, #0
 8014764:	d001      	beq.n	801476a <tcp_receive+0x96a>
 8014766:	2301      	movs	r3, #1
 8014768:	e000      	b.n	801476c <tcp_receive+0x96c>
 801476a:	2300      	movs	r3, #0
 801476c:	4423      	add	r3, r4
 801476e:	b29a      	uxth	r2, r3
 8014770:	4b65      	ldr	r3, [pc, #404]	; (8014908 <tcp_receive+0xb08>)
 8014772:	801a      	strh	r2, [r3, #0]
              LWIP_ASSERT("tcp_receive: segment not trimmed correctly to ooseq queue\n",
 8014774:	4b64      	ldr	r3, [pc, #400]	; (8014908 <tcp_receive+0xb08>)
 8014776:	881b      	ldrh	r3, [r3, #0]
 8014778:	461a      	mov	r2, r3
 801477a:	4b64      	ldr	r3, [pc, #400]	; (801490c <tcp_receive+0xb0c>)
 801477c:	681b      	ldr	r3, [r3, #0]
 801477e:	441a      	add	r2, r3
 8014780:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8014782:	68db      	ldr	r3, [r3, #12]
 8014784:	685b      	ldr	r3, [r3, #4]
 8014786:	429a      	cmp	r2, r3
 8014788:	d006      	beq.n	8014798 <tcp_receive+0x998>
 801478a:	4b62      	ldr	r3, [pc, #392]	; (8014914 <tcp_receive+0xb14>)
 801478c:	f240 52fc 	movw	r2, #1532	; 0x5fc
 8014790:	4961      	ldr	r1, [pc, #388]	; (8014918 <tcp_receive+0xb18>)
 8014792:	4862      	ldr	r0, [pc, #392]	; (801491c <tcp_receive+0xb1c>)
 8014794:	f005 f968 	bl	8019a68 <iprintf>
                          (seqno + tcplen) == next->tcphdr->seqno);
            }
            pcb->ooseq = next;
 8014798:	687b      	ldr	r3, [r7, #4]
 801479a:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 801479c:	675a      	str	r2, [r3, #116]	; 0x74
          }
        }
#endif /* TCP_QUEUE_OOSEQ */

        pcb->rcv_nxt = seqno + tcplen;
 801479e:	4b5a      	ldr	r3, [pc, #360]	; (8014908 <tcp_receive+0xb08>)
 80147a0:	881b      	ldrh	r3, [r3, #0]
 80147a2:	461a      	mov	r2, r3
 80147a4:	4b59      	ldr	r3, [pc, #356]	; (801490c <tcp_receive+0xb0c>)
 80147a6:	681b      	ldr	r3, [r3, #0]
 80147a8:	441a      	add	r2, r3
 80147aa:	687b      	ldr	r3, [r7, #4]
 80147ac:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update the receiver's (our) window. */
        LWIP_ASSERT("tcp_receive: tcplen > rcv_wnd\n", pcb->rcv_wnd >= tcplen);
 80147ae:	687b      	ldr	r3, [r7, #4]
 80147b0:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 80147b2:	4b55      	ldr	r3, [pc, #340]	; (8014908 <tcp_receive+0xb08>)
 80147b4:	881b      	ldrh	r3, [r3, #0]
 80147b6:	429a      	cmp	r2, r3
 80147b8:	d206      	bcs.n	80147c8 <tcp_receive+0x9c8>
 80147ba:	4b56      	ldr	r3, [pc, #344]	; (8014914 <tcp_receive+0xb14>)
 80147bc:	f240 6207 	movw	r2, #1543	; 0x607
 80147c0:	4957      	ldr	r1, [pc, #348]	; (8014920 <tcp_receive+0xb20>)
 80147c2:	4856      	ldr	r0, [pc, #344]	; (801491c <tcp_receive+0xb1c>)
 80147c4:	f005 f950 	bl	8019a68 <iprintf>
        pcb->rcv_wnd -= tcplen;
 80147c8:	687b      	ldr	r3, [r7, #4]
 80147ca:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 80147cc:	4b4e      	ldr	r3, [pc, #312]	; (8014908 <tcp_receive+0xb08>)
 80147ce:	881b      	ldrh	r3, [r3, #0]
 80147d0:	1ad3      	subs	r3, r2, r3
 80147d2:	b29a      	uxth	r2, r3
 80147d4:	687b      	ldr	r3, [r7, #4]
 80147d6:	851a      	strh	r2, [r3, #40]	; 0x28

        tcp_update_rcv_ann_wnd(pcb);
 80147d8:	6878      	ldr	r0, [r7, #4]
 80147da:	f7fc ffc1 	bl	8011760 <tcp_update_rcv_ann_wnd>
           chains its data on this pbuf as well.

           If the segment was a FIN, we set the TF_GOT_FIN flag that will
           be used to indicate to the application that the remote side has
           closed its end of the connection. */
        if (inseg.p->tot_len > 0) {
 80147de:	4b4c      	ldr	r3, [pc, #304]	; (8014910 <tcp_receive+0xb10>)
 80147e0:	685b      	ldr	r3, [r3, #4]
 80147e2:	891b      	ldrh	r3, [r3, #8]
 80147e4:	2b00      	cmp	r3, #0
 80147e6:	d006      	beq.n	80147f6 <tcp_receive+0x9f6>
          recv_data = inseg.p;
 80147e8:	4b49      	ldr	r3, [pc, #292]	; (8014910 <tcp_receive+0xb10>)
 80147ea:	685b      	ldr	r3, [r3, #4]
 80147ec:	4a4d      	ldr	r2, [pc, #308]	; (8014924 <tcp_receive+0xb24>)
 80147ee:	6013      	str	r3, [r2, #0]
          /* Since this pbuf now is the responsibility of the
             application, we delete our reference to it so that we won't
             (mistakingly) deallocate it. */
          inseg.p = NULL;
 80147f0:	4b47      	ldr	r3, [pc, #284]	; (8014910 <tcp_receive+0xb10>)
 80147f2:	2200      	movs	r2, #0
 80147f4:	605a      	str	r2, [r3, #4]
        }
        if (TCPH_FLAGS(inseg.tcphdr) & TCP_FIN) {
 80147f6:	4b46      	ldr	r3, [pc, #280]	; (8014910 <tcp_receive+0xb10>)
 80147f8:	68db      	ldr	r3, [r3, #12]
 80147fa:	899b      	ldrh	r3, [r3, #12]
 80147fc:	b29b      	uxth	r3, r3
 80147fe:	4618      	mov	r0, r3
 8014800:	f7fa fe16 	bl	800f430 <lwip_htons>
 8014804:	4603      	mov	r3, r0
 8014806:	b2db      	uxtb	r3, r3
 8014808:	f003 0301 	and.w	r3, r3, #1
 801480c:	2b00      	cmp	r3, #0
 801480e:	f000 80b8 	beq.w	8014982 <tcp_receive+0xb82>
          LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_receive: received FIN.\n"));
          recv_flags |= TF_GOT_FIN;
 8014812:	4b45      	ldr	r3, [pc, #276]	; (8014928 <tcp_receive+0xb28>)
 8014814:	781b      	ldrb	r3, [r3, #0]
 8014816:	f043 0320 	orr.w	r3, r3, #32
 801481a:	b2da      	uxtb	r2, r3
 801481c:	4b42      	ldr	r3, [pc, #264]	; (8014928 <tcp_receive+0xb28>)
 801481e:	701a      	strb	r2, [r3, #0]
        }

#if TCP_QUEUE_OOSEQ
        /* We now check if we have segments on the ->ooseq queue that
           are now in sequence. */
        while (pcb->ooseq != NULL &&
 8014820:	e0af      	b.n	8014982 <tcp_receive+0xb82>
               pcb->ooseq->tcphdr->seqno == pcb->rcv_nxt) {

          struct tcp_seg *cseg = pcb->ooseq;
 8014822:	687b      	ldr	r3, [r7, #4]
 8014824:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8014826:	60bb      	str	r3, [r7, #8]
          seqno = pcb->ooseq->tcphdr->seqno;
 8014828:	687b      	ldr	r3, [r7, #4]
 801482a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 801482c:	68db      	ldr	r3, [r3, #12]
 801482e:	685b      	ldr	r3, [r3, #4]
 8014830:	4a36      	ldr	r2, [pc, #216]	; (801490c <tcp_receive+0xb0c>)
 8014832:	6013      	str	r3, [r2, #0]

          pcb->rcv_nxt += TCP_TCPLEN(cseg);
 8014834:	68bb      	ldr	r3, [r7, #8]
 8014836:	891b      	ldrh	r3, [r3, #8]
 8014838:	461c      	mov	r4, r3
 801483a:	68bb      	ldr	r3, [r7, #8]
 801483c:	68db      	ldr	r3, [r3, #12]
 801483e:	899b      	ldrh	r3, [r3, #12]
 8014840:	b29b      	uxth	r3, r3
 8014842:	4618      	mov	r0, r3
 8014844:	f7fa fdf4 	bl	800f430 <lwip_htons>
 8014848:	4603      	mov	r3, r0
 801484a:	b2db      	uxtb	r3, r3
 801484c:	f003 0303 	and.w	r3, r3, #3
 8014850:	2b00      	cmp	r3, #0
 8014852:	d001      	beq.n	8014858 <tcp_receive+0xa58>
 8014854:	2301      	movs	r3, #1
 8014856:	e000      	b.n	801485a <tcp_receive+0xa5a>
 8014858:	2300      	movs	r3, #0
 801485a:	191a      	adds	r2, r3, r4
 801485c:	687b      	ldr	r3, [r7, #4]
 801485e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8014860:	441a      	add	r2, r3
 8014862:	687b      	ldr	r3, [r7, #4]
 8014864:	625a      	str	r2, [r3, #36]	; 0x24
          LWIP_ASSERT("tcp_receive: ooseq tcplen > rcv_wnd\n",
 8014866:	687b      	ldr	r3, [r7, #4]
 8014868:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 801486a:	461c      	mov	r4, r3
 801486c:	68bb      	ldr	r3, [r7, #8]
 801486e:	891b      	ldrh	r3, [r3, #8]
 8014870:	461d      	mov	r5, r3
 8014872:	68bb      	ldr	r3, [r7, #8]
 8014874:	68db      	ldr	r3, [r3, #12]
 8014876:	899b      	ldrh	r3, [r3, #12]
 8014878:	b29b      	uxth	r3, r3
 801487a:	4618      	mov	r0, r3
 801487c:	f7fa fdd8 	bl	800f430 <lwip_htons>
 8014880:	4603      	mov	r3, r0
 8014882:	b2db      	uxtb	r3, r3
 8014884:	f003 0303 	and.w	r3, r3, #3
 8014888:	2b00      	cmp	r3, #0
 801488a:	d001      	beq.n	8014890 <tcp_receive+0xa90>
 801488c:	2301      	movs	r3, #1
 801488e:	e000      	b.n	8014892 <tcp_receive+0xa92>
 8014890:	2300      	movs	r3, #0
 8014892:	442b      	add	r3, r5
 8014894:	429c      	cmp	r4, r3
 8014896:	d206      	bcs.n	80148a6 <tcp_receive+0xaa6>
 8014898:	4b1e      	ldr	r3, [pc, #120]	; (8014914 <tcp_receive+0xb14>)
 801489a:	f240 622b 	movw	r2, #1579	; 0x62b
 801489e:	4923      	ldr	r1, [pc, #140]	; (801492c <tcp_receive+0xb2c>)
 80148a0:	481e      	ldr	r0, [pc, #120]	; (801491c <tcp_receive+0xb1c>)
 80148a2:	f005 f8e1 	bl	8019a68 <iprintf>
                      pcb->rcv_wnd >= TCP_TCPLEN(cseg));
          pcb->rcv_wnd -= TCP_TCPLEN(cseg);
 80148a6:	68bb      	ldr	r3, [r7, #8]
 80148a8:	891b      	ldrh	r3, [r3, #8]
 80148aa:	461c      	mov	r4, r3
 80148ac:	68bb      	ldr	r3, [r7, #8]
 80148ae:	68db      	ldr	r3, [r3, #12]
 80148b0:	899b      	ldrh	r3, [r3, #12]
 80148b2:	b29b      	uxth	r3, r3
 80148b4:	4618      	mov	r0, r3
 80148b6:	f7fa fdbb 	bl	800f430 <lwip_htons>
 80148ba:	4603      	mov	r3, r0
 80148bc:	b2db      	uxtb	r3, r3
 80148be:	f003 0303 	and.w	r3, r3, #3
 80148c2:	2b00      	cmp	r3, #0
 80148c4:	d001      	beq.n	80148ca <tcp_receive+0xaca>
 80148c6:	2301      	movs	r3, #1
 80148c8:	e000      	b.n	80148cc <tcp_receive+0xacc>
 80148ca:	2300      	movs	r3, #0
 80148cc:	1919      	adds	r1, r3, r4
 80148ce:	687b      	ldr	r3, [r7, #4]
 80148d0:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 80148d2:	b28b      	uxth	r3, r1
 80148d4:	1ad3      	subs	r3, r2, r3
 80148d6:	b29a      	uxth	r2, r3
 80148d8:	687b      	ldr	r3, [r7, #4]
 80148da:	851a      	strh	r2, [r3, #40]	; 0x28

          tcp_update_rcv_ann_wnd(pcb);
 80148dc:	6878      	ldr	r0, [r7, #4]
 80148de:	f7fc ff3f 	bl	8011760 <tcp_update_rcv_ann_wnd>

          if (cseg->p->tot_len > 0) {
 80148e2:	68bb      	ldr	r3, [r7, #8]
 80148e4:	685b      	ldr	r3, [r3, #4]
 80148e6:	891b      	ldrh	r3, [r3, #8]
 80148e8:	2b00      	cmp	r3, #0
 80148ea:	d028      	beq.n	801493e <tcp_receive+0xb3e>
            /* Chain this pbuf onto the pbuf that we will pass to
               the application. */
            /* With window scaling, this can overflow recv_data->tot_len, but
               that's not a problem since we explicitly fix that before passing
               recv_data to the application. */
            if (recv_data) {
 80148ec:	4b0d      	ldr	r3, [pc, #52]	; (8014924 <tcp_receive+0xb24>)
 80148ee:	681b      	ldr	r3, [r3, #0]
 80148f0:	2b00      	cmp	r3, #0
 80148f2:	d01d      	beq.n	8014930 <tcp_receive+0xb30>
              pbuf_cat(recv_data, cseg->p);
 80148f4:	4b0b      	ldr	r3, [pc, #44]	; (8014924 <tcp_receive+0xb24>)
 80148f6:	681a      	ldr	r2, [r3, #0]
 80148f8:	68bb      	ldr	r3, [r7, #8]
 80148fa:	685b      	ldr	r3, [r3, #4]
 80148fc:	4619      	mov	r1, r3
 80148fe:	4610      	mov	r0, r2
 8014900:	f7fc fa5c 	bl	8010dbc <pbuf_cat>
 8014904:	e018      	b.n	8014938 <tcp_receive+0xb38>
 8014906:	bf00      	nop
 8014908:	20007086 	.word	0x20007086
 801490c:	2000707c 	.word	0x2000707c
 8014910:	2000705c 	.word	0x2000705c
 8014914:	0801d41c 	.word	0x0801d41c
 8014918:	0801d7fc 	.word	0x0801d7fc
 801491c:	0801d468 	.word	0x0801d468
 8014920:	0801d838 	.word	0x0801d838
 8014924:	2000708c 	.word	0x2000708c
 8014928:	20007089 	.word	0x20007089
 801492c:	0801d858 	.word	0x0801d858
            } else {
              recv_data = cseg->p;
 8014930:	68bb      	ldr	r3, [r7, #8]
 8014932:	685b      	ldr	r3, [r3, #4]
 8014934:	4a70      	ldr	r2, [pc, #448]	; (8014af8 <tcp_receive+0xcf8>)
 8014936:	6013      	str	r3, [r2, #0]
            }
            cseg->p = NULL;
 8014938:	68bb      	ldr	r3, [r7, #8]
 801493a:	2200      	movs	r2, #0
 801493c:	605a      	str	r2, [r3, #4]
          }
          if (TCPH_FLAGS(cseg->tcphdr) & TCP_FIN) {
 801493e:	68bb      	ldr	r3, [r7, #8]
 8014940:	68db      	ldr	r3, [r3, #12]
 8014942:	899b      	ldrh	r3, [r3, #12]
 8014944:	b29b      	uxth	r3, r3
 8014946:	4618      	mov	r0, r3
 8014948:	f7fa fd72 	bl	800f430 <lwip_htons>
 801494c:	4603      	mov	r3, r0
 801494e:	b2db      	uxtb	r3, r3
 8014950:	f003 0301 	and.w	r3, r3, #1
 8014954:	2b00      	cmp	r3, #0
 8014956:	d00d      	beq.n	8014974 <tcp_receive+0xb74>
            LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_receive: dequeued FIN.\n"));
            recv_flags |= TF_GOT_FIN;
 8014958:	4b68      	ldr	r3, [pc, #416]	; (8014afc <tcp_receive+0xcfc>)
 801495a:	781b      	ldrb	r3, [r3, #0]
 801495c:	f043 0320 	orr.w	r3, r3, #32
 8014960:	b2da      	uxtb	r2, r3
 8014962:	4b66      	ldr	r3, [pc, #408]	; (8014afc <tcp_receive+0xcfc>)
 8014964:	701a      	strb	r2, [r3, #0]
            if (pcb->state == ESTABLISHED) { /* force passive close or we can move to active close */
 8014966:	687b      	ldr	r3, [r7, #4]
 8014968:	7d1b      	ldrb	r3, [r3, #20]
 801496a:	2b04      	cmp	r3, #4
 801496c:	d102      	bne.n	8014974 <tcp_receive+0xb74>
              pcb->state = CLOSE_WAIT;
 801496e:	687b      	ldr	r3, [r7, #4]
 8014970:	2207      	movs	r2, #7
 8014972:	751a      	strb	r2, [r3, #20]
            }
          }

          pcb->ooseq = cseg->next;
 8014974:	68bb      	ldr	r3, [r7, #8]
 8014976:	681a      	ldr	r2, [r3, #0]
 8014978:	687b      	ldr	r3, [r7, #4]
 801497a:	675a      	str	r2, [r3, #116]	; 0x74
          tcp_seg_free(cseg);
 801497c:	68b8      	ldr	r0, [r7, #8]
 801497e:	f7fd fbd2 	bl	8012126 <tcp_seg_free>
        while (pcb->ooseq != NULL &&
 8014982:	687b      	ldr	r3, [r7, #4]
 8014984:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8014986:	2b00      	cmp	r3, #0
 8014988:	d008      	beq.n	801499c <tcp_receive+0xb9c>
               pcb->ooseq->tcphdr->seqno == pcb->rcv_nxt) {
 801498a:	687b      	ldr	r3, [r7, #4]
 801498c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 801498e:	68db      	ldr	r3, [r3, #12]
 8014990:	685a      	ldr	r2, [r3, #4]
 8014992:	687b      	ldr	r3, [r7, #4]
 8014994:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        while (pcb->ooseq != NULL &&
 8014996:	429a      	cmp	r2, r3
 8014998:	f43f af43 	beq.w	8014822 <tcp_receive+0xa22>
#endif /* LWIP_TCP_SACK_OUT */
#endif /* TCP_QUEUE_OOSEQ */


        /* Acknowledge the segment(s). */
        tcp_ack(pcb);
 801499c:	687b      	ldr	r3, [r7, #4]
 801499e:	8b5b      	ldrh	r3, [r3, #26]
 80149a0:	f003 0301 	and.w	r3, r3, #1
 80149a4:	2b00      	cmp	r3, #0
 80149a6:	d00e      	beq.n	80149c6 <tcp_receive+0xbc6>
 80149a8:	687b      	ldr	r3, [r7, #4]
 80149aa:	8b5b      	ldrh	r3, [r3, #26]
 80149ac:	f023 0301 	bic.w	r3, r3, #1
 80149b0:	b29a      	uxth	r2, r3
 80149b2:	687b      	ldr	r3, [r7, #4]
 80149b4:	835a      	strh	r2, [r3, #26]
 80149b6:	687b      	ldr	r3, [r7, #4]
 80149b8:	8b5b      	ldrh	r3, [r3, #26]
 80149ba:	f043 0302 	orr.w	r3, r3, #2
 80149be:	b29a      	uxth	r2, r3
 80149c0:	687b      	ldr	r3, [r7, #4]
 80149c2:	835a      	strh	r2, [r3, #26]
      if (pcb->rcv_nxt == seqno) {
 80149c4:	e188      	b.n	8014cd8 <tcp_receive+0xed8>
        tcp_ack(pcb);
 80149c6:	687b      	ldr	r3, [r7, #4]
 80149c8:	8b5b      	ldrh	r3, [r3, #26]
 80149ca:	f043 0301 	orr.w	r3, r3, #1
 80149ce:	b29a      	uxth	r2, r3
 80149d0:	687b      	ldr	r3, [r7, #4]
 80149d2:	835a      	strh	r2, [r3, #26]
      if (pcb->rcv_nxt == seqno) {
 80149d4:	e180      	b.n	8014cd8 <tcp_receive+0xed8>
      } else {
        /* We get here if the incoming segment is out-of-sequence. */

#if TCP_QUEUE_OOSEQ
        /* We queue the segment on the ->ooseq queue. */
        if (pcb->ooseq == NULL) {
 80149d6:	687b      	ldr	r3, [r7, #4]
 80149d8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80149da:	2b00      	cmp	r3, #0
 80149dc:	d106      	bne.n	80149ec <tcp_receive+0xbec>
          pcb->ooseq = tcp_seg_copy(&inseg);
 80149de:	4848      	ldr	r0, [pc, #288]	; (8014b00 <tcp_receive+0xd00>)
 80149e0:	f7fd fbba 	bl	8012158 <tcp_seg_copy>
 80149e4:	4602      	mov	r2, r0
 80149e6:	687b      	ldr	r3, [r7, #4]
 80149e8:	675a      	str	r2, [r3, #116]	; 0x74
 80149ea:	e16d      	b.n	8014cc8 <tcp_receive+0xec8>
#if LWIP_TCP_SACK_OUT
          /* This is the left edge of the lowest possible SACK range.
             It may start before the newly received segment (possibly adjusted below). */
          u32_t sackbeg = TCP_SEQ_LT(seqno, pcb->ooseq->tcphdr->seqno) ? seqno : pcb->ooseq->tcphdr->seqno;
#endif /* LWIP_TCP_SACK_OUT */
          struct tcp_seg *next, *prev = NULL;
 80149ec:	2300      	movs	r3, #0
 80149ee:	637b      	str	r3, [r7, #52]	; 0x34
          for (next = pcb->ooseq; next != NULL; next = next->next) {
 80149f0:	687b      	ldr	r3, [r7, #4]
 80149f2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80149f4:	63bb      	str	r3, [r7, #56]	; 0x38
 80149f6:	e157      	b.n	8014ca8 <tcp_receive+0xea8>
            if (seqno == next->tcphdr->seqno) {
 80149f8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80149fa:	68db      	ldr	r3, [r3, #12]
 80149fc:	685a      	ldr	r2, [r3, #4]
 80149fe:	4b41      	ldr	r3, [pc, #260]	; (8014b04 <tcp_receive+0xd04>)
 8014a00:	681b      	ldr	r3, [r3, #0]
 8014a02:	429a      	cmp	r2, r3
 8014a04:	d11d      	bne.n	8014a42 <tcp_receive+0xc42>
              /* The sequence number of the incoming segment is the
                 same as the sequence number of the segment on
                 ->ooseq. We check the lengths to see which one to
                 discard. */
              if (inseg.len > next->len) {
 8014a06:	4b3e      	ldr	r3, [pc, #248]	; (8014b00 <tcp_receive+0xd00>)
 8014a08:	891a      	ldrh	r2, [r3, #8]
 8014a0a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8014a0c:	891b      	ldrh	r3, [r3, #8]
 8014a0e:	429a      	cmp	r2, r3
 8014a10:	f240 814f 	bls.w	8014cb2 <tcp_receive+0xeb2>
                /* The incoming segment is larger than the old
                   segment. We replace some segments with the new
                   one. */
                struct tcp_seg *cseg = tcp_seg_copy(&inseg);
 8014a14:	483a      	ldr	r0, [pc, #232]	; (8014b00 <tcp_receive+0xd00>)
 8014a16:	f7fd fb9f 	bl	8012158 <tcp_seg_copy>
 8014a1a:	6178      	str	r0, [r7, #20]
                if (cseg != NULL) {
 8014a1c:	697b      	ldr	r3, [r7, #20]
 8014a1e:	2b00      	cmp	r3, #0
 8014a20:	f000 8149 	beq.w	8014cb6 <tcp_receive+0xeb6>
                  if (prev != NULL) {
 8014a24:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8014a26:	2b00      	cmp	r3, #0
 8014a28:	d003      	beq.n	8014a32 <tcp_receive+0xc32>
                    prev->next = cseg;
 8014a2a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8014a2c:	697a      	ldr	r2, [r7, #20]
 8014a2e:	601a      	str	r2, [r3, #0]
 8014a30:	e002      	b.n	8014a38 <tcp_receive+0xc38>
                  } else {
                    pcb->ooseq = cseg;
 8014a32:	687b      	ldr	r3, [r7, #4]
 8014a34:	697a      	ldr	r2, [r7, #20]
 8014a36:	675a      	str	r2, [r3, #116]	; 0x74
                  }
                  tcp_oos_insert_segment(cseg, next);
 8014a38:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8014a3a:	6978      	ldr	r0, [r7, #20]
 8014a3c:	f7ff f8dc 	bl	8013bf8 <tcp_oos_insert_segment>
                }
                break;
 8014a40:	e139      	b.n	8014cb6 <tcp_receive+0xeb6>
                   segment was smaller than the old one; in either
                   case, we ditch the incoming segment. */
                break;
              }
            } else {
              if (prev == NULL) {
 8014a42:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8014a44:	2b00      	cmp	r3, #0
 8014a46:	d117      	bne.n	8014a78 <tcp_receive+0xc78>
                if (TCP_SEQ_LT(seqno, next->tcphdr->seqno)) {
 8014a48:	4b2e      	ldr	r3, [pc, #184]	; (8014b04 <tcp_receive+0xd04>)
 8014a4a:	681a      	ldr	r2, [r3, #0]
 8014a4c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8014a4e:	68db      	ldr	r3, [r3, #12]
 8014a50:	685b      	ldr	r3, [r3, #4]
 8014a52:	1ad3      	subs	r3, r2, r3
 8014a54:	2b00      	cmp	r3, #0
 8014a56:	da57      	bge.n	8014b08 <tcp_receive+0xd08>
                  /* The sequence number of the incoming segment is lower
                     than the sequence number of the first segment on the
                     queue. We put the incoming segment first on the
                     queue. */
                  struct tcp_seg *cseg = tcp_seg_copy(&inseg);
 8014a58:	4829      	ldr	r0, [pc, #164]	; (8014b00 <tcp_receive+0xd00>)
 8014a5a:	f7fd fb7d 	bl	8012158 <tcp_seg_copy>
 8014a5e:	61b8      	str	r0, [r7, #24]
                  if (cseg != NULL) {
 8014a60:	69bb      	ldr	r3, [r7, #24]
 8014a62:	2b00      	cmp	r3, #0
 8014a64:	f000 8129 	beq.w	8014cba <tcp_receive+0xeba>
                    pcb->ooseq = cseg;
 8014a68:	687b      	ldr	r3, [r7, #4]
 8014a6a:	69ba      	ldr	r2, [r7, #24]
 8014a6c:	675a      	str	r2, [r3, #116]	; 0x74
                    tcp_oos_insert_segment(cseg, next);
 8014a6e:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8014a70:	69b8      	ldr	r0, [r7, #24]
 8014a72:	f7ff f8c1 	bl	8013bf8 <tcp_oos_insert_segment>
                  }
                  break;
 8014a76:	e120      	b.n	8014cba <tcp_receive+0xeba>
                }
              } else {
                /*if (TCP_SEQ_LT(prev->tcphdr->seqno, seqno) &&
                  TCP_SEQ_LT(seqno, next->tcphdr->seqno)) {*/
                if (TCP_SEQ_BETWEEN(seqno, prev->tcphdr->seqno + 1, next->tcphdr->seqno - 1)) {
 8014a78:	4b22      	ldr	r3, [pc, #136]	; (8014b04 <tcp_receive+0xd04>)
 8014a7a:	681a      	ldr	r2, [r3, #0]
 8014a7c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8014a7e:	68db      	ldr	r3, [r3, #12]
 8014a80:	685b      	ldr	r3, [r3, #4]
 8014a82:	1ad3      	subs	r3, r2, r3
 8014a84:	3b01      	subs	r3, #1
 8014a86:	2b00      	cmp	r3, #0
 8014a88:	db3e      	blt.n	8014b08 <tcp_receive+0xd08>
 8014a8a:	4b1e      	ldr	r3, [pc, #120]	; (8014b04 <tcp_receive+0xd04>)
 8014a8c:	681a      	ldr	r2, [r3, #0]
 8014a8e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8014a90:	68db      	ldr	r3, [r3, #12]
 8014a92:	685b      	ldr	r3, [r3, #4]
 8014a94:	1ad3      	subs	r3, r2, r3
 8014a96:	3301      	adds	r3, #1
 8014a98:	2b00      	cmp	r3, #0
 8014a9a:	dc35      	bgt.n	8014b08 <tcp_receive+0xd08>
                  /* The sequence number of the incoming segment is in
                     between the sequence numbers of the previous and
                     the next segment on ->ooseq. We trim trim the previous
                     segment, delete next segments that included in received segment
                     and trim received, if needed. */
                  struct tcp_seg *cseg = tcp_seg_copy(&inseg);
 8014a9c:	4818      	ldr	r0, [pc, #96]	; (8014b00 <tcp_receive+0xd00>)
 8014a9e:	f7fd fb5b 	bl	8012158 <tcp_seg_copy>
 8014aa2:	61f8      	str	r0, [r7, #28]
                  if (cseg != NULL) {
 8014aa4:	69fb      	ldr	r3, [r7, #28]
 8014aa6:	2b00      	cmp	r3, #0
 8014aa8:	f000 8109 	beq.w	8014cbe <tcp_receive+0xebe>
                    if (TCP_SEQ_GT(prev->tcphdr->seqno + prev->len, seqno)) {
 8014aac:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8014aae:	68db      	ldr	r3, [r3, #12]
 8014ab0:	685b      	ldr	r3, [r3, #4]
 8014ab2:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8014ab4:	8912      	ldrh	r2, [r2, #8]
 8014ab6:	441a      	add	r2, r3
 8014ab8:	4b12      	ldr	r3, [pc, #72]	; (8014b04 <tcp_receive+0xd04>)
 8014aba:	681b      	ldr	r3, [r3, #0]
 8014abc:	1ad3      	subs	r3, r2, r3
 8014abe:	2b00      	cmp	r3, #0
 8014ac0:	dd12      	ble.n	8014ae8 <tcp_receive+0xce8>
                      /* We need to trim the prev segment. */
                      prev->len = (u16_t)(seqno - prev->tcphdr->seqno);
 8014ac2:	4b10      	ldr	r3, [pc, #64]	; (8014b04 <tcp_receive+0xd04>)
 8014ac4:	681b      	ldr	r3, [r3, #0]
 8014ac6:	b29a      	uxth	r2, r3
 8014ac8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8014aca:	68db      	ldr	r3, [r3, #12]
 8014acc:	685b      	ldr	r3, [r3, #4]
 8014ace:	b29b      	uxth	r3, r3
 8014ad0:	1ad3      	subs	r3, r2, r3
 8014ad2:	b29a      	uxth	r2, r3
 8014ad4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8014ad6:	811a      	strh	r2, [r3, #8]
                      pbuf_realloc(prev->p, prev->len);
 8014ad8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8014ada:	685a      	ldr	r2, [r3, #4]
 8014adc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8014ade:	891b      	ldrh	r3, [r3, #8]
 8014ae0:	4619      	mov	r1, r3
 8014ae2:	4610      	mov	r0, r2
 8014ae4:	f7fb ff24 	bl	8010930 <pbuf_realloc>
                    }
                    prev->next = cseg;
 8014ae8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8014aea:	69fa      	ldr	r2, [r7, #28]
 8014aec:	601a      	str	r2, [r3, #0]
                    tcp_oos_insert_segment(cseg, next);
 8014aee:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8014af0:	69f8      	ldr	r0, [r7, #28]
 8014af2:	f7ff f881 	bl	8013bf8 <tcp_oos_insert_segment>
                  }
                  break;
 8014af6:	e0e2      	b.n	8014cbe <tcp_receive+0xebe>
 8014af8:	2000708c 	.word	0x2000708c
 8014afc:	20007089 	.word	0x20007089
 8014b00:	2000705c 	.word	0x2000705c
 8014b04:	2000707c 	.word	0x2000707c
#endif /* LWIP_TCP_SACK_OUT */

              /* We don't use 'prev' below, so let's set it to current 'next'.
                 This way even if we break the loop below, 'prev' will be pointing
                 at the segment right in front of the newly added one. */
              prev = next;
 8014b08:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8014b0a:	637b      	str	r3, [r7, #52]	; 0x34

              /* If the "next" segment is the last segment on the
                 ooseq queue, we add the incoming segment to the end
                 of the list. */
              if (next->next == NULL &&
 8014b0c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8014b0e:	681b      	ldr	r3, [r3, #0]
 8014b10:	2b00      	cmp	r3, #0
 8014b12:	f040 80c6 	bne.w	8014ca2 <tcp_receive+0xea2>
                  TCP_SEQ_GT(seqno, next->tcphdr->seqno)) {
 8014b16:	4b80      	ldr	r3, [pc, #512]	; (8014d18 <tcp_receive+0xf18>)
 8014b18:	681a      	ldr	r2, [r3, #0]
 8014b1a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8014b1c:	68db      	ldr	r3, [r3, #12]
 8014b1e:	685b      	ldr	r3, [r3, #4]
 8014b20:	1ad3      	subs	r3, r2, r3
              if (next->next == NULL &&
 8014b22:	2b00      	cmp	r3, #0
 8014b24:	f340 80bd 	ble.w	8014ca2 <tcp_receive+0xea2>
                if (TCPH_FLAGS(next->tcphdr) & TCP_FIN) {
 8014b28:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8014b2a:	68db      	ldr	r3, [r3, #12]
 8014b2c:	899b      	ldrh	r3, [r3, #12]
 8014b2e:	b29b      	uxth	r3, r3
 8014b30:	4618      	mov	r0, r3
 8014b32:	f7fa fc7d 	bl	800f430 <lwip_htons>
 8014b36:	4603      	mov	r3, r0
 8014b38:	b2db      	uxtb	r3, r3
 8014b3a:	f003 0301 	and.w	r3, r3, #1
 8014b3e:	2b00      	cmp	r3, #0
 8014b40:	f040 80bf 	bne.w	8014cc2 <tcp_receive+0xec2>
                  /* segment "next" already contains all data */
                  break;
                }
                next->next = tcp_seg_copy(&inseg);
 8014b44:	4875      	ldr	r0, [pc, #468]	; (8014d1c <tcp_receive+0xf1c>)
 8014b46:	f7fd fb07 	bl	8012158 <tcp_seg_copy>
 8014b4a:	4602      	mov	r2, r0
 8014b4c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8014b4e:	601a      	str	r2, [r3, #0]
                if (next->next != NULL) {
 8014b50:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8014b52:	681b      	ldr	r3, [r3, #0]
 8014b54:	2b00      	cmp	r3, #0
 8014b56:	f000 80b6 	beq.w	8014cc6 <tcp_receive+0xec6>
                  if (TCP_SEQ_GT(next->tcphdr->seqno + next->len, seqno)) {
 8014b5a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8014b5c:	68db      	ldr	r3, [r3, #12]
 8014b5e:	685b      	ldr	r3, [r3, #4]
 8014b60:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8014b62:	8912      	ldrh	r2, [r2, #8]
 8014b64:	441a      	add	r2, r3
 8014b66:	4b6c      	ldr	r3, [pc, #432]	; (8014d18 <tcp_receive+0xf18>)
 8014b68:	681b      	ldr	r3, [r3, #0]
 8014b6a:	1ad3      	subs	r3, r2, r3
 8014b6c:	2b00      	cmp	r3, #0
 8014b6e:	dd12      	ble.n	8014b96 <tcp_receive+0xd96>
                    /* We need to trim the last segment. */
                    next->len = (u16_t)(seqno - next->tcphdr->seqno);
 8014b70:	4b69      	ldr	r3, [pc, #420]	; (8014d18 <tcp_receive+0xf18>)
 8014b72:	681b      	ldr	r3, [r3, #0]
 8014b74:	b29a      	uxth	r2, r3
 8014b76:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8014b78:	68db      	ldr	r3, [r3, #12]
 8014b7a:	685b      	ldr	r3, [r3, #4]
 8014b7c:	b29b      	uxth	r3, r3
 8014b7e:	1ad3      	subs	r3, r2, r3
 8014b80:	b29a      	uxth	r2, r3
 8014b82:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8014b84:	811a      	strh	r2, [r3, #8]
                    pbuf_realloc(next->p, next->len);
 8014b86:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8014b88:	685a      	ldr	r2, [r3, #4]
 8014b8a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8014b8c:	891b      	ldrh	r3, [r3, #8]
 8014b8e:	4619      	mov	r1, r3
 8014b90:	4610      	mov	r0, r2
 8014b92:	f7fb fecd 	bl	8010930 <pbuf_realloc>
                  }
                  /* check if the remote side overruns our receive window */
                  if (TCP_SEQ_GT((u32_t)tcplen + seqno, pcb->rcv_nxt + (u32_t)pcb->rcv_wnd)) {
 8014b96:	4b62      	ldr	r3, [pc, #392]	; (8014d20 <tcp_receive+0xf20>)
 8014b98:	881b      	ldrh	r3, [r3, #0]
 8014b9a:	461a      	mov	r2, r3
 8014b9c:	4b5e      	ldr	r3, [pc, #376]	; (8014d18 <tcp_receive+0xf18>)
 8014b9e:	681b      	ldr	r3, [r3, #0]
 8014ba0:	441a      	add	r2, r3
 8014ba2:	687b      	ldr	r3, [r7, #4]
 8014ba4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8014ba6:	6879      	ldr	r1, [r7, #4]
 8014ba8:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 8014baa:	440b      	add	r3, r1
 8014bac:	1ad3      	subs	r3, r2, r3
 8014bae:	2b00      	cmp	r3, #0
 8014bb0:	f340 8089 	ble.w	8014cc6 <tcp_receive+0xec6>
                    LWIP_DEBUGF(TCP_INPUT_DEBUG,
                                ("tcp_receive: other end overran receive window"
                                 "seqno %"U32_F" len %"U16_F" right edge %"U32_F"\n",
                                 seqno, tcplen, pcb->rcv_nxt + pcb->rcv_wnd));
                    if (TCPH_FLAGS(next->next->tcphdr) & TCP_FIN) {
 8014bb4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8014bb6:	681b      	ldr	r3, [r3, #0]
 8014bb8:	68db      	ldr	r3, [r3, #12]
 8014bba:	899b      	ldrh	r3, [r3, #12]
 8014bbc:	b29b      	uxth	r3, r3
 8014bbe:	4618      	mov	r0, r3
 8014bc0:	f7fa fc36 	bl	800f430 <lwip_htons>
 8014bc4:	4603      	mov	r3, r0
 8014bc6:	b2db      	uxtb	r3, r3
 8014bc8:	f003 0301 	and.w	r3, r3, #1
 8014bcc:	2b00      	cmp	r3, #0
 8014bce:	d022      	beq.n	8014c16 <tcp_receive+0xe16>
                      /* Must remove the FIN from the header as we're trimming
                       * that byte of sequence-space from the packet */
                      TCPH_FLAGS_SET(next->next->tcphdr, TCPH_FLAGS(next->next->tcphdr) & ~TCP_FIN);
 8014bd0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8014bd2:	681b      	ldr	r3, [r3, #0]
 8014bd4:	68db      	ldr	r3, [r3, #12]
 8014bd6:	899b      	ldrh	r3, [r3, #12]
 8014bd8:	b29b      	uxth	r3, r3
 8014bda:	b21b      	sxth	r3, r3
 8014bdc:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 8014be0:	b21c      	sxth	r4, r3
 8014be2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8014be4:	681b      	ldr	r3, [r3, #0]
 8014be6:	68db      	ldr	r3, [r3, #12]
 8014be8:	899b      	ldrh	r3, [r3, #12]
 8014bea:	b29b      	uxth	r3, r3
 8014bec:	4618      	mov	r0, r3
 8014bee:	f7fa fc1f 	bl	800f430 <lwip_htons>
 8014bf2:	4603      	mov	r3, r0
 8014bf4:	b2db      	uxtb	r3, r3
 8014bf6:	b29b      	uxth	r3, r3
 8014bf8:	f003 033e 	and.w	r3, r3, #62	; 0x3e
 8014bfc:	b29b      	uxth	r3, r3
 8014bfe:	4618      	mov	r0, r3
 8014c00:	f7fa fc16 	bl	800f430 <lwip_htons>
 8014c04:	4603      	mov	r3, r0
 8014c06:	b21b      	sxth	r3, r3
 8014c08:	4323      	orrs	r3, r4
 8014c0a:	b21a      	sxth	r2, r3
 8014c0c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8014c0e:	681b      	ldr	r3, [r3, #0]
 8014c10:	68db      	ldr	r3, [r3, #12]
 8014c12:	b292      	uxth	r2, r2
 8014c14:	819a      	strh	r2, [r3, #12]
                    }
                    /* Adjust length of segment to fit in the window. */
                    next->next->len = (u16_t)(pcb->rcv_nxt + pcb->rcv_wnd - seqno);
 8014c16:	687b      	ldr	r3, [r7, #4]
 8014c18:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8014c1a:	b29a      	uxth	r2, r3
 8014c1c:	687b      	ldr	r3, [r7, #4]
 8014c1e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8014c20:	4413      	add	r3, r2
 8014c22:	b299      	uxth	r1, r3
 8014c24:	4b3c      	ldr	r3, [pc, #240]	; (8014d18 <tcp_receive+0xf18>)
 8014c26:	681b      	ldr	r3, [r3, #0]
 8014c28:	b29a      	uxth	r2, r3
 8014c2a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8014c2c:	681b      	ldr	r3, [r3, #0]
 8014c2e:	1a8a      	subs	r2, r1, r2
 8014c30:	b292      	uxth	r2, r2
 8014c32:	811a      	strh	r2, [r3, #8]
                    pbuf_realloc(next->next->p, next->next->len);
 8014c34:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8014c36:	681b      	ldr	r3, [r3, #0]
 8014c38:	685a      	ldr	r2, [r3, #4]
 8014c3a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8014c3c:	681b      	ldr	r3, [r3, #0]
 8014c3e:	891b      	ldrh	r3, [r3, #8]
 8014c40:	4619      	mov	r1, r3
 8014c42:	4610      	mov	r0, r2
 8014c44:	f7fb fe74 	bl	8010930 <pbuf_realloc>
                    tcplen = TCP_TCPLEN(next->next);
 8014c48:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8014c4a:	681b      	ldr	r3, [r3, #0]
 8014c4c:	891c      	ldrh	r4, [r3, #8]
 8014c4e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8014c50:	681b      	ldr	r3, [r3, #0]
 8014c52:	68db      	ldr	r3, [r3, #12]
 8014c54:	899b      	ldrh	r3, [r3, #12]
 8014c56:	b29b      	uxth	r3, r3
 8014c58:	4618      	mov	r0, r3
 8014c5a:	f7fa fbe9 	bl	800f430 <lwip_htons>
 8014c5e:	4603      	mov	r3, r0
 8014c60:	b2db      	uxtb	r3, r3
 8014c62:	f003 0303 	and.w	r3, r3, #3
 8014c66:	2b00      	cmp	r3, #0
 8014c68:	d001      	beq.n	8014c6e <tcp_receive+0xe6e>
 8014c6a:	2301      	movs	r3, #1
 8014c6c:	e000      	b.n	8014c70 <tcp_receive+0xe70>
 8014c6e:	2300      	movs	r3, #0
 8014c70:	4423      	add	r3, r4
 8014c72:	b29a      	uxth	r2, r3
 8014c74:	4b2a      	ldr	r3, [pc, #168]	; (8014d20 <tcp_receive+0xf20>)
 8014c76:	801a      	strh	r2, [r3, #0]
                    LWIP_ASSERT("tcp_receive: segment not trimmed correctly to rcv_wnd\n",
 8014c78:	4b29      	ldr	r3, [pc, #164]	; (8014d20 <tcp_receive+0xf20>)
 8014c7a:	881b      	ldrh	r3, [r3, #0]
 8014c7c:	461a      	mov	r2, r3
 8014c7e:	4b26      	ldr	r3, [pc, #152]	; (8014d18 <tcp_receive+0xf18>)
 8014c80:	681b      	ldr	r3, [r3, #0]
 8014c82:	441a      	add	r2, r3
 8014c84:	687b      	ldr	r3, [r7, #4]
 8014c86:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8014c88:	6879      	ldr	r1, [r7, #4]
 8014c8a:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 8014c8c:	440b      	add	r3, r1
 8014c8e:	429a      	cmp	r2, r3
 8014c90:	d019      	beq.n	8014cc6 <tcp_receive+0xec6>
 8014c92:	4b24      	ldr	r3, [pc, #144]	; (8014d24 <tcp_receive+0xf24>)
 8014c94:	f44f 62df 	mov.w	r2, #1784	; 0x6f8
 8014c98:	4923      	ldr	r1, [pc, #140]	; (8014d28 <tcp_receive+0xf28>)
 8014c9a:	4824      	ldr	r0, [pc, #144]	; (8014d2c <tcp_receive+0xf2c>)
 8014c9c:	f004 fee4 	bl	8019a68 <iprintf>
                                (seqno + tcplen) == (pcb->rcv_nxt + pcb->rcv_wnd));
                  }
                }
                break;
 8014ca0:	e011      	b.n	8014cc6 <tcp_receive+0xec6>
          for (next = pcb->ooseq; next != NULL; next = next->next) {
 8014ca2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8014ca4:	681b      	ldr	r3, [r3, #0]
 8014ca6:	63bb      	str	r3, [r7, #56]	; 0x38
 8014ca8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8014caa:	2b00      	cmp	r3, #0
 8014cac:	f47f aea4 	bne.w	80149f8 <tcp_receive+0xbf8>
 8014cb0:	e00a      	b.n	8014cc8 <tcp_receive+0xec8>
                break;
 8014cb2:	bf00      	nop
 8014cb4:	e008      	b.n	8014cc8 <tcp_receive+0xec8>
                break;
 8014cb6:	bf00      	nop
 8014cb8:	e006      	b.n	8014cc8 <tcp_receive+0xec8>
                  break;
 8014cba:	bf00      	nop
 8014cbc:	e004      	b.n	8014cc8 <tcp_receive+0xec8>
                  break;
 8014cbe:	bf00      	nop
 8014cc0:	e002      	b.n	8014cc8 <tcp_receive+0xec8>
                  break;
 8014cc2:	bf00      	nop
 8014cc4:	e000      	b.n	8014cc8 <tcp_receive+0xec8>
                break;
 8014cc6:	bf00      	nop
#endif /* TCP_OOSEQ_BYTES_LIMIT || TCP_OOSEQ_PBUFS_LIMIT */
#endif /* TCP_QUEUE_OOSEQ */

        /* We send the ACK packet after we've (potentially) dealt with SACKs,
           so they can be included in the acknowledgment. */
        tcp_send_empty_ack(pcb);
 8014cc8:	6878      	ldr	r0, [r7, #4]
 8014cca:	f001 fa33 	bl	8016134 <tcp_send_empty_ack>
      if (pcb->rcv_nxt == seqno) {
 8014cce:	e003      	b.n	8014cd8 <tcp_receive+0xed8>
      }
    } else {
      /* The incoming segment is not within the window. */
      tcp_send_empty_ack(pcb);
 8014cd0:	6878      	ldr	r0, [r7, #4]
 8014cd2:	f001 fa2f 	bl	8016134 <tcp_send_empty_ack>
    if (TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt,
 8014cd6:	e01a      	b.n	8014d0e <tcp_receive+0xf0e>
 8014cd8:	e019      	b.n	8014d0e <tcp_receive+0xf0e>
    }
  } else {
    /* Segments with length 0 is taken care of here. Segments that
       fall out of the window are ACKed. */
    if (!TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt, pcb->rcv_nxt + pcb->rcv_wnd - 1)) {
 8014cda:	4b0f      	ldr	r3, [pc, #60]	; (8014d18 <tcp_receive+0xf18>)
 8014cdc:	681a      	ldr	r2, [r3, #0]
 8014cde:	687b      	ldr	r3, [r7, #4]
 8014ce0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8014ce2:	1ad3      	subs	r3, r2, r3
 8014ce4:	2b00      	cmp	r3, #0
 8014ce6:	db0a      	blt.n	8014cfe <tcp_receive+0xefe>
 8014ce8:	4b0b      	ldr	r3, [pc, #44]	; (8014d18 <tcp_receive+0xf18>)
 8014cea:	681a      	ldr	r2, [r3, #0]
 8014cec:	687b      	ldr	r3, [r7, #4]
 8014cee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8014cf0:	6879      	ldr	r1, [r7, #4]
 8014cf2:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 8014cf4:	440b      	add	r3, r1
 8014cf6:	1ad3      	subs	r3, r2, r3
 8014cf8:	3301      	adds	r3, #1
 8014cfa:	2b00      	cmp	r3, #0
 8014cfc:	dd07      	ble.n	8014d0e <tcp_receive+0xf0e>
      tcp_ack_now(pcb);
 8014cfe:	687b      	ldr	r3, [r7, #4]
 8014d00:	8b5b      	ldrh	r3, [r3, #26]
 8014d02:	f043 0302 	orr.w	r3, r3, #2
 8014d06:	b29a      	uxth	r2, r3
 8014d08:	687b      	ldr	r3, [r7, #4]
 8014d0a:	835a      	strh	r2, [r3, #26]
    }
  }
}
 8014d0c:	e7ff      	b.n	8014d0e <tcp_receive+0xf0e>
 8014d0e:	bf00      	nop
 8014d10:	3750      	adds	r7, #80	; 0x50
 8014d12:	46bd      	mov	sp, r7
 8014d14:	bdb0      	pop	{r4, r5, r7, pc}
 8014d16:	bf00      	nop
 8014d18:	2000707c 	.word	0x2000707c
 8014d1c:	2000705c 	.word	0x2000705c
 8014d20:	20007086 	.word	0x20007086
 8014d24:	0801d41c 	.word	0x0801d41c
 8014d28:	0801d7c4 	.word	0x0801d7c4
 8014d2c:	0801d468 	.word	0x0801d468

08014d30 <tcp_get_next_optbyte>:

static u8_t
tcp_get_next_optbyte(void)
{
 8014d30:	b480      	push	{r7}
 8014d32:	b083      	sub	sp, #12
 8014d34:	af00      	add	r7, sp, #0
  u16_t optidx = tcp_optidx++;
 8014d36:	4b15      	ldr	r3, [pc, #84]	; (8014d8c <tcp_get_next_optbyte+0x5c>)
 8014d38:	881b      	ldrh	r3, [r3, #0]
 8014d3a:	1c5a      	adds	r2, r3, #1
 8014d3c:	b291      	uxth	r1, r2
 8014d3e:	4a13      	ldr	r2, [pc, #76]	; (8014d8c <tcp_get_next_optbyte+0x5c>)
 8014d40:	8011      	strh	r1, [r2, #0]
 8014d42:	80fb      	strh	r3, [r7, #6]
  if ((tcphdr_opt2 == NULL) || (optidx < tcphdr_opt1len)) {
 8014d44:	4b12      	ldr	r3, [pc, #72]	; (8014d90 <tcp_get_next_optbyte+0x60>)
 8014d46:	681b      	ldr	r3, [r3, #0]
 8014d48:	2b00      	cmp	r3, #0
 8014d4a:	d004      	beq.n	8014d56 <tcp_get_next_optbyte+0x26>
 8014d4c:	4b11      	ldr	r3, [pc, #68]	; (8014d94 <tcp_get_next_optbyte+0x64>)
 8014d4e:	881b      	ldrh	r3, [r3, #0]
 8014d50:	88fa      	ldrh	r2, [r7, #6]
 8014d52:	429a      	cmp	r2, r3
 8014d54:	d208      	bcs.n	8014d68 <tcp_get_next_optbyte+0x38>
    u8_t *opts = (u8_t *)tcphdr + TCP_HLEN;
 8014d56:	4b10      	ldr	r3, [pc, #64]	; (8014d98 <tcp_get_next_optbyte+0x68>)
 8014d58:	681b      	ldr	r3, [r3, #0]
 8014d5a:	3314      	adds	r3, #20
 8014d5c:	603b      	str	r3, [r7, #0]
    return opts[optidx];
 8014d5e:	88fb      	ldrh	r3, [r7, #6]
 8014d60:	683a      	ldr	r2, [r7, #0]
 8014d62:	4413      	add	r3, r2
 8014d64:	781b      	ldrb	r3, [r3, #0]
 8014d66:	e00b      	b.n	8014d80 <tcp_get_next_optbyte+0x50>
  } else {
    u8_t idx = (u8_t)(optidx - tcphdr_opt1len);
 8014d68:	88fb      	ldrh	r3, [r7, #6]
 8014d6a:	b2da      	uxtb	r2, r3
 8014d6c:	4b09      	ldr	r3, [pc, #36]	; (8014d94 <tcp_get_next_optbyte+0x64>)
 8014d6e:	881b      	ldrh	r3, [r3, #0]
 8014d70:	b2db      	uxtb	r3, r3
 8014d72:	1ad3      	subs	r3, r2, r3
 8014d74:	717b      	strb	r3, [r7, #5]
    return tcphdr_opt2[idx];
 8014d76:	4b06      	ldr	r3, [pc, #24]	; (8014d90 <tcp_get_next_optbyte+0x60>)
 8014d78:	681a      	ldr	r2, [r3, #0]
 8014d7a:	797b      	ldrb	r3, [r7, #5]
 8014d7c:	4413      	add	r3, r2
 8014d7e:	781b      	ldrb	r3, [r3, #0]
  }
}
 8014d80:	4618      	mov	r0, r3
 8014d82:	370c      	adds	r7, #12
 8014d84:	46bd      	mov	sp, r7
 8014d86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014d8a:	4770      	bx	lr
 8014d8c:	20007078 	.word	0x20007078
 8014d90:	20007074 	.word	0x20007074
 8014d94:	20007072 	.word	0x20007072
 8014d98:	2000706c 	.word	0x2000706c

08014d9c <tcp_parseopt>:
 *
 * @param pcb the tcp_pcb for which a segment arrived
 */
static void
tcp_parseopt(struct tcp_pcb *pcb)
{
 8014d9c:	b580      	push	{r7, lr}
 8014d9e:	b084      	sub	sp, #16
 8014da0:	af00      	add	r7, sp, #0
 8014da2:	6078      	str	r0, [r7, #4]
  u16_t mss;
#if LWIP_TCP_TIMESTAMPS
  u32_t tsval;
#endif

  LWIP_ASSERT("tcp_parseopt: invalid pcb", pcb != NULL);
 8014da4:	687b      	ldr	r3, [r7, #4]
 8014da6:	2b00      	cmp	r3, #0
 8014da8:	d106      	bne.n	8014db8 <tcp_parseopt+0x1c>
 8014daa:	4b32      	ldr	r3, [pc, #200]	; (8014e74 <tcp_parseopt+0xd8>)
 8014dac:	f240 727d 	movw	r2, #1917	; 0x77d
 8014db0:	4931      	ldr	r1, [pc, #196]	; (8014e78 <tcp_parseopt+0xdc>)
 8014db2:	4832      	ldr	r0, [pc, #200]	; (8014e7c <tcp_parseopt+0xe0>)
 8014db4:	f004 fe58 	bl	8019a68 <iprintf>

  /* Parse the TCP MSS option, if present. */
  if (tcphdr_optlen != 0) {
 8014db8:	4b31      	ldr	r3, [pc, #196]	; (8014e80 <tcp_parseopt+0xe4>)
 8014dba:	881b      	ldrh	r3, [r3, #0]
 8014dbc:	2b00      	cmp	r3, #0
 8014dbe:	d056      	beq.n	8014e6e <tcp_parseopt+0xd2>
    for (tcp_optidx = 0; tcp_optidx < tcphdr_optlen; ) {
 8014dc0:	4b30      	ldr	r3, [pc, #192]	; (8014e84 <tcp_parseopt+0xe8>)
 8014dc2:	2200      	movs	r2, #0
 8014dc4:	801a      	strh	r2, [r3, #0]
 8014dc6:	e046      	b.n	8014e56 <tcp_parseopt+0xba>
      u8_t opt = tcp_get_next_optbyte();
 8014dc8:	f7ff ffb2 	bl	8014d30 <tcp_get_next_optbyte>
 8014dcc:	4603      	mov	r3, r0
 8014dce:	73fb      	strb	r3, [r7, #15]
      switch (opt) {
 8014dd0:	7bfb      	ldrb	r3, [r7, #15]
 8014dd2:	2b02      	cmp	r3, #2
 8014dd4:	d006      	beq.n	8014de4 <tcp_parseopt+0x48>
 8014dd6:	2b02      	cmp	r3, #2
 8014dd8:	dc2c      	bgt.n	8014e34 <tcp_parseopt+0x98>
 8014dda:	2b00      	cmp	r3, #0
 8014ddc:	d042      	beq.n	8014e64 <tcp_parseopt+0xc8>
 8014dde:	2b01      	cmp	r3, #1
 8014de0:	d128      	bne.n	8014e34 <tcp_parseopt+0x98>
          LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: EOL\n"));
          return;
        case LWIP_TCP_OPT_NOP:
          /* NOP option. */
          LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: NOP\n"));
          break;
 8014de2:	e038      	b.n	8014e56 <tcp_parseopt+0xba>
        case LWIP_TCP_OPT_MSS:
          LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: MSS\n"));
          if (tcp_get_next_optbyte() != LWIP_TCP_OPT_LEN_MSS || (tcp_optidx - 2 + LWIP_TCP_OPT_LEN_MSS) > tcphdr_optlen) {
 8014de4:	f7ff ffa4 	bl	8014d30 <tcp_get_next_optbyte>
 8014de8:	4603      	mov	r3, r0
 8014dea:	2b04      	cmp	r3, #4
 8014dec:	d13c      	bne.n	8014e68 <tcp_parseopt+0xcc>
 8014dee:	4b25      	ldr	r3, [pc, #148]	; (8014e84 <tcp_parseopt+0xe8>)
 8014df0:	881b      	ldrh	r3, [r3, #0]
 8014df2:	3301      	adds	r3, #1
 8014df4:	4a22      	ldr	r2, [pc, #136]	; (8014e80 <tcp_parseopt+0xe4>)
 8014df6:	8812      	ldrh	r2, [r2, #0]
 8014df8:	4293      	cmp	r3, r2
 8014dfa:	da35      	bge.n	8014e68 <tcp_parseopt+0xcc>
            /* Bad length */
            LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: bad length\n"));
            return;
          }
          /* An MSS option with the right option length. */
          mss = (u16_t)(tcp_get_next_optbyte() << 8);
 8014dfc:	f7ff ff98 	bl	8014d30 <tcp_get_next_optbyte>
 8014e00:	4603      	mov	r3, r0
 8014e02:	b29b      	uxth	r3, r3
 8014e04:	021b      	lsls	r3, r3, #8
 8014e06:	81bb      	strh	r3, [r7, #12]
          mss |= tcp_get_next_optbyte();
 8014e08:	f7ff ff92 	bl	8014d30 <tcp_get_next_optbyte>
 8014e0c:	4603      	mov	r3, r0
 8014e0e:	b29a      	uxth	r2, r3
 8014e10:	89bb      	ldrh	r3, [r7, #12]
 8014e12:	4313      	orrs	r3, r2
 8014e14:	81bb      	strh	r3, [r7, #12]
          /* Limit the mss to the configured TCP_MSS and prevent division by zero */
          pcb->mss = ((mss > TCP_MSS) || (mss == 0)) ? TCP_MSS : mss;
 8014e16:	89bb      	ldrh	r3, [r7, #12]
 8014e18:	f240 52b4 	movw	r2, #1460	; 0x5b4
 8014e1c:	4293      	cmp	r3, r2
 8014e1e:	d804      	bhi.n	8014e2a <tcp_parseopt+0x8e>
 8014e20:	89bb      	ldrh	r3, [r7, #12]
 8014e22:	2b00      	cmp	r3, #0
 8014e24:	d001      	beq.n	8014e2a <tcp_parseopt+0x8e>
 8014e26:	89ba      	ldrh	r2, [r7, #12]
 8014e28:	e001      	b.n	8014e2e <tcp_parseopt+0x92>
 8014e2a:	f240 52b4 	movw	r2, #1460	; 0x5b4
 8014e2e:	687b      	ldr	r3, [r7, #4]
 8014e30:	865a      	strh	r2, [r3, #50]	; 0x32
          break;
 8014e32:	e010      	b.n	8014e56 <tcp_parseopt+0xba>
          }
          break;
#endif /* LWIP_TCP_SACK_OUT */
        default:
          LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: other\n"));
          data = tcp_get_next_optbyte();
 8014e34:	f7ff ff7c 	bl	8014d30 <tcp_get_next_optbyte>
 8014e38:	4603      	mov	r3, r0
 8014e3a:	72fb      	strb	r3, [r7, #11]
          if (data < 2) {
 8014e3c:	7afb      	ldrb	r3, [r7, #11]
 8014e3e:	2b01      	cmp	r3, #1
 8014e40:	d914      	bls.n	8014e6c <tcp_parseopt+0xd0>
               and we don't process them further. */
            return;
          }
          /* All other options have a length field, so that we easily
             can skip past them. */
          tcp_optidx += data - 2;
 8014e42:	7afb      	ldrb	r3, [r7, #11]
 8014e44:	b29a      	uxth	r2, r3
 8014e46:	4b0f      	ldr	r3, [pc, #60]	; (8014e84 <tcp_parseopt+0xe8>)
 8014e48:	881b      	ldrh	r3, [r3, #0]
 8014e4a:	4413      	add	r3, r2
 8014e4c:	b29b      	uxth	r3, r3
 8014e4e:	3b02      	subs	r3, #2
 8014e50:	b29a      	uxth	r2, r3
 8014e52:	4b0c      	ldr	r3, [pc, #48]	; (8014e84 <tcp_parseopt+0xe8>)
 8014e54:	801a      	strh	r2, [r3, #0]
    for (tcp_optidx = 0; tcp_optidx < tcphdr_optlen; ) {
 8014e56:	4b0b      	ldr	r3, [pc, #44]	; (8014e84 <tcp_parseopt+0xe8>)
 8014e58:	881a      	ldrh	r2, [r3, #0]
 8014e5a:	4b09      	ldr	r3, [pc, #36]	; (8014e80 <tcp_parseopt+0xe4>)
 8014e5c:	881b      	ldrh	r3, [r3, #0]
 8014e5e:	429a      	cmp	r2, r3
 8014e60:	d3b2      	bcc.n	8014dc8 <tcp_parseopt+0x2c>
 8014e62:	e004      	b.n	8014e6e <tcp_parseopt+0xd2>
          return;
 8014e64:	bf00      	nop
 8014e66:	e002      	b.n	8014e6e <tcp_parseopt+0xd2>
            return;
 8014e68:	bf00      	nop
 8014e6a:	e000      	b.n	8014e6e <tcp_parseopt+0xd2>
            return;
 8014e6c:	bf00      	nop
      }
    }
  }
}
 8014e6e:	3710      	adds	r7, #16
 8014e70:	46bd      	mov	sp, r7
 8014e72:	bd80      	pop	{r7, pc}
 8014e74:	0801d41c 	.word	0x0801d41c
 8014e78:	0801d880 	.word	0x0801d880
 8014e7c:	0801d468 	.word	0x0801d468
 8014e80:	20007070 	.word	0x20007070
 8014e84:	20007078 	.word	0x20007078

08014e88 <tcp_trigger_input_pcb_close>:

void
tcp_trigger_input_pcb_close(void)
{
 8014e88:	b480      	push	{r7}
 8014e8a:	af00      	add	r7, sp, #0
  recv_flags |= TF_CLOSED;
 8014e8c:	4b05      	ldr	r3, [pc, #20]	; (8014ea4 <tcp_trigger_input_pcb_close+0x1c>)
 8014e8e:	781b      	ldrb	r3, [r3, #0]
 8014e90:	f043 0310 	orr.w	r3, r3, #16
 8014e94:	b2da      	uxtb	r2, r3
 8014e96:	4b03      	ldr	r3, [pc, #12]	; (8014ea4 <tcp_trigger_input_pcb_close+0x1c>)
 8014e98:	701a      	strb	r2, [r3, #0]
}
 8014e9a:	bf00      	nop
 8014e9c:	46bd      	mov	sp, r7
 8014e9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014ea2:	4770      	bx	lr
 8014ea4:	20007089 	.word	0x20007089

08014ea8 <tcp_route>:
static err_t tcp_output_segment(struct tcp_seg *seg, struct tcp_pcb *pcb, struct netif *netif);

/* tcp_route: common code that returns a fixed bound netif or calls ip_route */
static struct netif *
tcp_route(const struct tcp_pcb *pcb, const ip_addr_t *src, const ip_addr_t *dst)
{
 8014ea8:	b580      	push	{r7, lr}
 8014eaa:	b084      	sub	sp, #16
 8014eac:	af00      	add	r7, sp, #0
 8014eae:	60f8      	str	r0, [r7, #12]
 8014eb0:	60b9      	str	r1, [r7, #8]
 8014eb2:	607a      	str	r2, [r7, #4]
  LWIP_UNUSED_ARG(src); /* in case IPv4-only and source-based routing is disabled */

  if ((pcb != NULL) && (pcb->netif_idx != NETIF_NO_INDEX)) {
 8014eb4:	68fb      	ldr	r3, [r7, #12]
 8014eb6:	2b00      	cmp	r3, #0
 8014eb8:	d00a      	beq.n	8014ed0 <tcp_route+0x28>
 8014eba:	68fb      	ldr	r3, [r7, #12]
 8014ebc:	7a1b      	ldrb	r3, [r3, #8]
 8014ebe:	2b00      	cmp	r3, #0
 8014ec0:	d006      	beq.n	8014ed0 <tcp_route+0x28>
    return netif_get_by_index(pcb->netif_idx);
 8014ec2:	68fb      	ldr	r3, [r7, #12]
 8014ec4:	7a1b      	ldrb	r3, [r3, #8]
 8014ec6:	4618      	mov	r0, r3
 8014ec8:	f7fb fb56 	bl	8010578 <netif_get_by_index>
 8014ecc:	4603      	mov	r3, r0
 8014ece:	e003      	b.n	8014ed8 <tcp_route+0x30>
  } else {
    return ip_route(src, dst);
 8014ed0:	6878      	ldr	r0, [r7, #4]
 8014ed2:	f002 fea3 	bl	8017c1c <ip4_route>
 8014ed6:	4603      	mov	r3, r0
  }
}
 8014ed8:	4618      	mov	r0, r3
 8014eda:	3710      	adds	r7, #16
 8014edc:	46bd      	mov	sp, r7
 8014ede:	bd80      	pop	{r7, pc}

08014ee0 <tcp_create_segment>:
 * The TCP header is filled in except ackno and wnd.
 * p is freed on failure.
 */
static struct tcp_seg *
tcp_create_segment(const struct tcp_pcb *pcb, struct pbuf *p, u8_t hdrflags, u32_t seqno, u8_t optflags)
{
 8014ee0:	b590      	push	{r4, r7, lr}
 8014ee2:	b087      	sub	sp, #28
 8014ee4:	af00      	add	r7, sp, #0
 8014ee6:	60f8      	str	r0, [r7, #12]
 8014ee8:	60b9      	str	r1, [r7, #8]
 8014eea:	603b      	str	r3, [r7, #0]
 8014eec:	4613      	mov	r3, r2
 8014eee:	71fb      	strb	r3, [r7, #7]
  struct tcp_seg *seg;
  u8_t optlen;

  LWIP_ASSERT("tcp_create_segment: invalid pcb", pcb != NULL);
 8014ef0:	68fb      	ldr	r3, [r7, #12]
 8014ef2:	2b00      	cmp	r3, #0
 8014ef4:	d105      	bne.n	8014f02 <tcp_create_segment+0x22>
 8014ef6:	4b44      	ldr	r3, [pc, #272]	; (8015008 <tcp_create_segment+0x128>)
 8014ef8:	22a3      	movs	r2, #163	; 0xa3
 8014efa:	4944      	ldr	r1, [pc, #272]	; (801500c <tcp_create_segment+0x12c>)
 8014efc:	4844      	ldr	r0, [pc, #272]	; (8015010 <tcp_create_segment+0x130>)
 8014efe:	f004 fdb3 	bl	8019a68 <iprintf>
  LWIP_ASSERT("tcp_create_segment: invalid pbuf", p != NULL);
 8014f02:	68bb      	ldr	r3, [r7, #8]
 8014f04:	2b00      	cmp	r3, #0
 8014f06:	d105      	bne.n	8014f14 <tcp_create_segment+0x34>
 8014f08:	4b3f      	ldr	r3, [pc, #252]	; (8015008 <tcp_create_segment+0x128>)
 8014f0a:	22a4      	movs	r2, #164	; 0xa4
 8014f0c:	4941      	ldr	r1, [pc, #260]	; (8015014 <tcp_create_segment+0x134>)
 8014f0e:	4840      	ldr	r0, [pc, #256]	; (8015010 <tcp_create_segment+0x130>)
 8014f10:	f004 fdaa 	bl	8019a68 <iprintf>

  optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(optflags, pcb);
 8014f14:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8014f18:	009b      	lsls	r3, r3, #2
 8014f1a:	b2db      	uxtb	r3, r3
 8014f1c:	f003 0304 	and.w	r3, r3, #4
 8014f20:	75fb      	strb	r3, [r7, #23]

  if ((seg = (struct tcp_seg *)memp_malloc(MEMP_TCP_SEG)) == NULL) {
 8014f22:	2003      	movs	r0, #3
 8014f24:	f7fa ffa2 	bl	800fe6c <memp_malloc>
 8014f28:	6138      	str	r0, [r7, #16]
 8014f2a:	693b      	ldr	r3, [r7, #16]
 8014f2c:	2b00      	cmp	r3, #0
 8014f2e:	d104      	bne.n	8014f3a <tcp_create_segment+0x5a>
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("tcp_create_segment: no memory.\n"));
    pbuf_free(p);
 8014f30:	68b8      	ldr	r0, [r7, #8]
 8014f32:	f7fb fe81 	bl	8010c38 <pbuf_free>
    return NULL;
 8014f36:	2300      	movs	r3, #0
 8014f38:	e061      	b.n	8014ffe <tcp_create_segment+0x11e>
  }
  seg->flags = optflags;
 8014f3a:	693b      	ldr	r3, [r7, #16]
 8014f3c:	f897 2028 	ldrb.w	r2, [r7, #40]	; 0x28
 8014f40:	729a      	strb	r2, [r3, #10]
  seg->next = NULL;
 8014f42:	693b      	ldr	r3, [r7, #16]
 8014f44:	2200      	movs	r2, #0
 8014f46:	601a      	str	r2, [r3, #0]
  seg->p = p;
 8014f48:	693b      	ldr	r3, [r7, #16]
 8014f4a:	68ba      	ldr	r2, [r7, #8]
 8014f4c:	605a      	str	r2, [r3, #4]
  LWIP_ASSERT("p->tot_len >= optlen", p->tot_len >= optlen);
 8014f4e:	68bb      	ldr	r3, [r7, #8]
 8014f50:	891a      	ldrh	r2, [r3, #8]
 8014f52:	7dfb      	ldrb	r3, [r7, #23]
 8014f54:	b29b      	uxth	r3, r3
 8014f56:	429a      	cmp	r2, r3
 8014f58:	d205      	bcs.n	8014f66 <tcp_create_segment+0x86>
 8014f5a:	4b2b      	ldr	r3, [pc, #172]	; (8015008 <tcp_create_segment+0x128>)
 8014f5c:	22b0      	movs	r2, #176	; 0xb0
 8014f5e:	492e      	ldr	r1, [pc, #184]	; (8015018 <tcp_create_segment+0x138>)
 8014f60:	482b      	ldr	r0, [pc, #172]	; (8015010 <tcp_create_segment+0x130>)
 8014f62:	f004 fd81 	bl	8019a68 <iprintf>
  seg->len = p->tot_len - optlen;
 8014f66:	68bb      	ldr	r3, [r7, #8]
 8014f68:	891a      	ldrh	r2, [r3, #8]
 8014f6a:	7dfb      	ldrb	r3, [r7, #23]
 8014f6c:	b29b      	uxth	r3, r3
 8014f6e:	1ad3      	subs	r3, r2, r3
 8014f70:	b29a      	uxth	r2, r3
 8014f72:	693b      	ldr	r3, [r7, #16]
 8014f74:	811a      	strh	r2, [r3, #8]
  LWIP_ASSERT("invalid optflags passed: TF_SEG_DATA_CHECKSUMMED",
              (optflags & TF_SEG_DATA_CHECKSUMMED) == 0);
#endif /* TCP_CHECKSUM_ON_COPY */

  /* build TCP header */
  if (pbuf_add_header(p, TCP_HLEN)) {
 8014f76:	2114      	movs	r1, #20
 8014f78:	68b8      	ldr	r0, [r7, #8]
 8014f7a:	f7fb fdc7 	bl	8010b0c <pbuf_add_header>
 8014f7e:	4603      	mov	r3, r0
 8014f80:	2b00      	cmp	r3, #0
 8014f82:	d004      	beq.n	8014f8e <tcp_create_segment+0xae>
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("tcp_create_segment: no room for TCP header in pbuf.\n"));
    TCP_STATS_INC(tcp.err);
    tcp_seg_free(seg);
 8014f84:	6938      	ldr	r0, [r7, #16]
 8014f86:	f7fd f8ce 	bl	8012126 <tcp_seg_free>
    return NULL;
 8014f8a:	2300      	movs	r3, #0
 8014f8c:	e037      	b.n	8014ffe <tcp_create_segment+0x11e>
  }
  seg->tcphdr = (struct tcp_hdr *)seg->p->payload;
 8014f8e:	693b      	ldr	r3, [r7, #16]
 8014f90:	685b      	ldr	r3, [r3, #4]
 8014f92:	685a      	ldr	r2, [r3, #4]
 8014f94:	693b      	ldr	r3, [r7, #16]
 8014f96:	60da      	str	r2, [r3, #12]
  seg->tcphdr->src = lwip_htons(pcb->local_port);
 8014f98:	68fb      	ldr	r3, [r7, #12]
 8014f9a:	8ada      	ldrh	r2, [r3, #22]
 8014f9c:	693b      	ldr	r3, [r7, #16]
 8014f9e:	68dc      	ldr	r4, [r3, #12]
 8014fa0:	4610      	mov	r0, r2
 8014fa2:	f7fa fa45 	bl	800f430 <lwip_htons>
 8014fa6:	4603      	mov	r3, r0
 8014fa8:	8023      	strh	r3, [r4, #0]
  seg->tcphdr->dest = lwip_htons(pcb->remote_port);
 8014faa:	68fb      	ldr	r3, [r7, #12]
 8014fac:	8b1a      	ldrh	r2, [r3, #24]
 8014fae:	693b      	ldr	r3, [r7, #16]
 8014fb0:	68dc      	ldr	r4, [r3, #12]
 8014fb2:	4610      	mov	r0, r2
 8014fb4:	f7fa fa3c 	bl	800f430 <lwip_htons>
 8014fb8:	4603      	mov	r3, r0
 8014fba:	8063      	strh	r3, [r4, #2]
  seg->tcphdr->seqno = lwip_htonl(seqno);
 8014fbc:	693b      	ldr	r3, [r7, #16]
 8014fbe:	68dc      	ldr	r4, [r3, #12]
 8014fc0:	6838      	ldr	r0, [r7, #0]
 8014fc2:	f7fa fa4a 	bl	800f45a <lwip_htonl>
 8014fc6:	4603      	mov	r3, r0
 8014fc8:	6063      	str	r3, [r4, #4]
  /* ackno is set in tcp_output */
  TCPH_HDRLEN_FLAGS_SET(seg->tcphdr, (5 + optlen / 4), hdrflags);
 8014fca:	7dfb      	ldrb	r3, [r7, #23]
 8014fcc:	089b      	lsrs	r3, r3, #2
 8014fce:	b2db      	uxtb	r3, r3
 8014fd0:	b29b      	uxth	r3, r3
 8014fd2:	3305      	adds	r3, #5
 8014fd4:	b29b      	uxth	r3, r3
 8014fd6:	031b      	lsls	r3, r3, #12
 8014fd8:	b29a      	uxth	r2, r3
 8014fda:	79fb      	ldrb	r3, [r7, #7]
 8014fdc:	b29b      	uxth	r3, r3
 8014fde:	4313      	orrs	r3, r2
 8014fe0:	b29a      	uxth	r2, r3
 8014fe2:	693b      	ldr	r3, [r7, #16]
 8014fe4:	68dc      	ldr	r4, [r3, #12]
 8014fe6:	4610      	mov	r0, r2
 8014fe8:	f7fa fa22 	bl	800f430 <lwip_htons>
 8014fec:	4603      	mov	r3, r0
 8014fee:	81a3      	strh	r3, [r4, #12]
  /* wnd and chksum are set in tcp_output */
  seg->tcphdr->urgp = 0;
 8014ff0:	693b      	ldr	r3, [r7, #16]
 8014ff2:	68db      	ldr	r3, [r3, #12]
 8014ff4:	2200      	movs	r2, #0
 8014ff6:	749a      	strb	r2, [r3, #18]
 8014ff8:	2200      	movs	r2, #0
 8014ffa:	74da      	strb	r2, [r3, #19]
  return seg;
 8014ffc:	693b      	ldr	r3, [r7, #16]
}
 8014ffe:	4618      	mov	r0, r3
 8015000:	371c      	adds	r7, #28
 8015002:	46bd      	mov	sp, r7
 8015004:	bd90      	pop	{r4, r7, pc}
 8015006:	bf00      	nop
 8015008:	0801d89c 	.word	0x0801d89c
 801500c:	0801d8d0 	.word	0x0801d8d0
 8015010:	0801d8f0 	.word	0x0801d8f0
 8015014:	0801d918 	.word	0x0801d918
 8015018:	0801d93c 	.word	0x0801d93c

0801501c <tcp_split_unsent_seg>:
 * @param pcb the tcp_pcb for which to split the unsent head
 * @param split the amount of payload to remain in the head
 */
err_t
tcp_split_unsent_seg(struct tcp_pcb *pcb, u16_t split)
{
 801501c:	b590      	push	{r4, r7, lr}
 801501e:	b08b      	sub	sp, #44	; 0x2c
 8015020:	af02      	add	r7, sp, #8
 8015022:	6078      	str	r0, [r7, #4]
 8015024:	460b      	mov	r3, r1
 8015026:	807b      	strh	r3, [r7, #2]
  struct tcp_seg *seg = NULL, *useg = NULL;
 8015028:	2300      	movs	r3, #0
 801502a:	61fb      	str	r3, [r7, #28]
 801502c:	2300      	movs	r3, #0
 801502e:	617b      	str	r3, [r7, #20]
  struct pbuf *p = NULL;
 8015030:	2300      	movs	r3, #0
 8015032:	613b      	str	r3, [r7, #16]
  u16_t chksum = 0;
  u8_t chksum_swapped = 0;
  struct pbuf *q;
#endif /* TCP_CHECKSUM_ON_COPY */

  LWIP_ASSERT("tcp_split_unsent_seg: invalid pcb", pcb != NULL);
 8015034:	687b      	ldr	r3, [r7, #4]
 8015036:	2b00      	cmp	r3, #0
 8015038:	d106      	bne.n	8015048 <tcp_split_unsent_seg+0x2c>
 801503a:	4b95      	ldr	r3, [pc, #596]	; (8015290 <tcp_split_unsent_seg+0x274>)
 801503c:	f240 324b 	movw	r2, #843	; 0x34b
 8015040:	4994      	ldr	r1, [pc, #592]	; (8015294 <tcp_split_unsent_seg+0x278>)
 8015042:	4895      	ldr	r0, [pc, #596]	; (8015298 <tcp_split_unsent_seg+0x27c>)
 8015044:	f004 fd10 	bl	8019a68 <iprintf>

  useg = pcb->unsent;
 8015048:	687b      	ldr	r3, [r7, #4]
 801504a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 801504c:	617b      	str	r3, [r7, #20]
  if (useg == NULL) {
 801504e:	697b      	ldr	r3, [r7, #20]
 8015050:	2b00      	cmp	r3, #0
 8015052:	d102      	bne.n	801505a <tcp_split_unsent_seg+0x3e>
    return ERR_MEM;
 8015054:	f04f 33ff 	mov.w	r3, #4294967295
 8015058:	e116      	b.n	8015288 <tcp_split_unsent_seg+0x26c>
  }

  if (split == 0) {
 801505a:	887b      	ldrh	r3, [r7, #2]
 801505c:	2b00      	cmp	r3, #0
 801505e:	d109      	bne.n	8015074 <tcp_split_unsent_seg+0x58>
    LWIP_ASSERT("Can't split segment into length 0", 0);
 8015060:	4b8b      	ldr	r3, [pc, #556]	; (8015290 <tcp_split_unsent_seg+0x274>)
 8015062:	f240 3253 	movw	r2, #851	; 0x353
 8015066:	498d      	ldr	r1, [pc, #564]	; (801529c <tcp_split_unsent_seg+0x280>)
 8015068:	488b      	ldr	r0, [pc, #556]	; (8015298 <tcp_split_unsent_seg+0x27c>)
 801506a:	f004 fcfd 	bl	8019a68 <iprintf>
    return ERR_VAL;
 801506e:	f06f 0305 	mvn.w	r3, #5
 8015072:	e109      	b.n	8015288 <tcp_split_unsent_seg+0x26c>
  }

  if (useg->len <= split) {
 8015074:	697b      	ldr	r3, [r7, #20]
 8015076:	891b      	ldrh	r3, [r3, #8]
 8015078:	887a      	ldrh	r2, [r7, #2]
 801507a:	429a      	cmp	r2, r3
 801507c:	d301      	bcc.n	8015082 <tcp_split_unsent_seg+0x66>
    return ERR_OK;
 801507e:	2300      	movs	r3, #0
 8015080:	e102      	b.n	8015288 <tcp_split_unsent_seg+0x26c>
  }

  LWIP_ASSERT("split <= mss", split <= pcb->mss);
 8015082:	687b      	ldr	r3, [r7, #4]
 8015084:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8015086:	887a      	ldrh	r2, [r7, #2]
 8015088:	429a      	cmp	r2, r3
 801508a:	d906      	bls.n	801509a <tcp_split_unsent_seg+0x7e>
 801508c:	4b80      	ldr	r3, [pc, #512]	; (8015290 <tcp_split_unsent_seg+0x274>)
 801508e:	f240 325b 	movw	r2, #859	; 0x35b
 8015092:	4983      	ldr	r1, [pc, #524]	; (80152a0 <tcp_split_unsent_seg+0x284>)
 8015094:	4880      	ldr	r0, [pc, #512]	; (8015298 <tcp_split_unsent_seg+0x27c>)
 8015096:	f004 fce7 	bl	8019a68 <iprintf>
  LWIP_ASSERT("useg->len > 0", useg->len > 0);
 801509a:	697b      	ldr	r3, [r7, #20]
 801509c:	891b      	ldrh	r3, [r3, #8]
 801509e:	2b00      	cmp	r3, #0
 80150a0:	d106      	bne.n	80150b0 <tcp_split_unsent_seg+0x94>
 80150a2:	4b7b      	ldr	r3, [pc, #492]	; (8015290 <tcp_split_unsent_seg+0x274>)
 80150a4:	f44f 7257 	mov.w	r2, #860	; 0x35c
 80150a8:	497e      	ldr	r1, [pc, #504]	; (80152a4 <tcp_split_unsent_seg+0x288>)
 80150aa:	487b      	ldr	r0, [pc, #492]	; (8015298 <tcp_split_unsent_seg+0x27c>)
 80150ac:	f004 fcdc 	bl	8019a68 <iprintf>
   * to split this packet so we may actually exceed the max value by
   * one!
   */
  LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_enqueue: split_unsent_seg: %u\n", (unsigned int)pcb->snd_queuelen));

  optflags = useg->flags;
 80150b0:	697b      	ldr	r3, [r7, #20]
 80150b2:	7a9b      	ldrb	r3, [r3, #10]
 80150b4:	73fb      	strb	r3, [r7, #15]
#if TCP_CHECKSUM_ON_COPY
  /* Remove since checksum is not stored until after tcp_create_segment() */
  optflags &= ~TF_SEG_DATA_CHECKSUMMED;
#endif /* TCP_CHECKSUM_ON_COPY */
  optlen = LWIP_TCP_OPT_LENGTH(optflags);
 80150b6:	7bfb      	ldrb	r3, [r7, #15]
 80150b8:	009b      	lsls	r3, r3, #2
 80150ba:	b2db      	uxtb	r3, r3
 80150bc:	f003 0304 	and.w	r3, r3, #4
 80150c0:	73bb      	strb	r3, [r7, #14]
  remainder = useg->len - split;
 80150c2:	697b      	ldr	r3, [r7, #20]
 80150c4:	891a      	ldrh	r2, [r3, #8]
 80150c6:	887b      	ldrh	r3, [r7, #2]
 80150c8:	1ad3      	subs	r3, r2, r3
 80150ca:	81bb      	strh	r3, [r7, #12]

  /* Create new pbuf for the remainder of the split */
  p = pbuf_alloc(PBUF_TRANSPORT, remainder + optlen, PBUF_RAM);
 80150cc:	7bbb      	ldrb	r3, [r7, #14]
 80150ce:	b29a      	uxth	r2, r3
 80150d0:	89bb      	ldrh	r3, [r7, #12]
 80150d2:	4413      	add	r3, r2
 80150d4:	b29b      	uxth	r3, r3
 80150d6:	f44f 7220 	mov.w	r2, #640	; 0x280
 80150da:	4619      	mov	r1, r3
 80150dc:	2036      	movs	r0, #54	; 0x36
 80150de:	f7fb fac7 	bl	8010670 <pbuf_alloc>
 80150e2:	6138      	str	r0, [r7, #16]
  if (p == NULL) {
 80150e4:	693b      	ldr	r3, [r7, #16]
 80150e6:	2b00      	cmp	r3, #0
 80150e8:	f000 80b7 	beq.w	801525a <tcp_split_unsent_seg+0x23e>
                ("tcp_split_unsent_seg: could not allocate memory for pbuf remainder %u\n", remainder));
    goto memerr;
  }

  /* Offset into the original pbuf is past TCP/IP headers, options, and split amount */
  offset = useg->p->tot_len - useg->len + split;
 80150ec:	697b      	ldr	r3, [r7, #20]
 80150ee:	685b      	ldr	r3, [r3, #4]
 80150f0:	891a      	ldrh	r2, [r3, #8]
 80150f2:	697b      	ldr	r3, [r7, #20]
 80150f4:	891b      	ldrh	r3, [r3, #8]
 80150f6:	1ad3      	subs	r3, r2, r3
 80150f8:	b29a      	uxth	r2, r3
 80150fa:	887b      	ldrh	r3, [r7, #2]
 80150fc:	4413      	add	r3, r2
 80150fe:	817b      	strh	r3, [r7, #10]
  /* Copy remainder into new pbuf, headers and options will not be filled out */
  if (pbuf_copy_partial(useg->p, (u8_t *)p->payload + optlen, remainder, offset ) != remainder) {
 8015100:	697b      	ldr	r3, [r7, #20]
 8015102:	6858      	ldr	r0, [r3, #4]
 8015104:	693b      	ldr	r3, [r7, #16]
 8015106:	685a      	ldr	r2, [r3, #4]
 8015108:	7bbb      	ldrb	r3, [r7, #14]
 801510a:	18d1      	adds	r1, r2, r3
 801510c:	897b      	ldrh	r3, [r7, #10]
 801510e:	89ba      	ldrh	r2, [r7, #12]
 8015110:	f7fb ff7c 	bl	801100c <pbuf_copy_partial>
 8015114:	4603      	mov	r3, r0
 8015116:	461a      	mov	r2, r3
 8015118:	89bb      	ldrh	r3, [r7, #12]
 801511a:	4293      	cmp	r3, r2
 801511c:	f040 809f 	bne.w	801525e <tcp_split_unsent_seg+0x242>
#endif /* TCP_CHECKSUM_ON_COPY */

  /* Options are created when calling tcp_output() */

  /* Migrate flags from original segment */
  split_flags = TCPH_FLAGS(useg->tcphdr);
 8015120:	697b      	ldr	r3, [r7, #20]
 8015122:	68db      	ldr	r3, [r3, #12]
 8015124:	899b      	ldrh	r3, [r3, #12]
 8015126:	b29b      	uxth	r3, r3
 8015128:	4618      	mov	r0, r3
 801512a:	f7fa f981 	bl	800f430 <lwip_htons>
 801512e:	4603      	mov	r3, r0
 8015130:	b2db      	uxtb	r3, r3
 8015132:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8015136:	76fb      	strb	r3, [r7, #27]
  remainder_flags = 0; /* ACK added in tcp_output() */
 8015138:	2300      	movs	r3, #0
 801513a:	76bb      	strb	r3, [r7, #26]

  if (split_flags & TCP_PSH) {
 801513c:	7efb      	ldrb	r3, [r7, #27]
 801513e:	f003 0308 	and.w	r3, r3, #8
 8015142:	2b00      	cmp	r3, #0
 8015144:	d007      	beq.n	8015156 <tcp_split_unsent_seg+0x13a>
    split_flags &= ~TCP_PSH;
 8015146:	7efb      	ldrb	r3, [r7, #27]
 8015148:	f023 0308 	bic.w	r3, r3, #8
 801514c:	76fb      	strb	r3, [r7, #27]
    remainder_flags |= TCP_PSH;
 801514e:	7ebb      	ldrb	r3, [r7, #26]
 8015150:	f043 0308 	orr.w	r3, r3, #8
 8015154:	76bb      	strb	r3, [r7, #26]
  }
  if (split_flags & TCP_FIN) {
 8015156:	7efb      	ldrb	r3, [r7, #27]
 8015158:	f003 0301 	and.w	r3, r3, #1
 801515c:	2b00      	cmp	r3, #0
 801515e:	d007      	beq.n	8015170 <tcp_split_unsent_seg+0x154>
    split_flags &= ~TCP_FIN;
 8015160:	7efb      	ldrb	r3, [r7, #27]
 8015162:	f023 0301 	bic.w	r3, r3, #1
 8015166:	76fb      	strb	r3, [r7, #27]
    remainder_flags |= TCP_FIN;
 8015168:	7ebb      	ldrb	r3, [r7, #26]
 801516a:	f043 0301 	orr.w	r3, r3, #1
 801516e:	76bb      	strb	r3, [r7, #26]
  }
  /* SYN should be left on split, RST should not be present with data */

  seg = tcp_create_segment(pcb, p, remainder_flags, lwip_ntohl(useg->tcphdr->seqno) + split, optflags);
 8015170:	697b      	ldr	r3, [r7, #20]
 8015172:	68db      	ldr	r3, [r3, #12]
 8015174:	685b      	ldr	r3, [r3, #4]
 8015176:	4618      	mov	r0, r3
 8015178:	f7fa f96f 	bl	800f45a <lwip_htonl>
 801517c:	4602      	mov	r2, r0
 801517e:	887b      	ldrh	r3, [r7, #2]
 8015180:	18d1      	adds	r1, r2, r3
 8015182:	7eba      	ldrb	r2, [r7, #26]
 8015184:	7bfb      	ldrb	r3, [r7, #15]
 8015186:	9300      	str	r3, [sp, #0]
 8015188:	460b      	mov	r3, r1
 801518a:	6939      	ldr	r1, [r7, #16]
 801518c:	6878      	ldr	r0, [r7, #4]
 801518e:	f7ff fea7 	bl	8014ee0 <tcp_create_segment>
 8015192:	61f8      	str	r0, [r7, #28]
  if (seg == NULL) {
 8015194:	69fb      	ldr	r3, [r7, #28]
 8015196:	2b00      	cmp	r3, #0
 8015198:	d063      	beq.n	8015262 <tcp_split_unsent_seg+0x246>
  seg->chksum_swapped = chksum_swapped;
  seg->flags |= TF_SEG_DATA_CHECKSUMMED;
#endif /* TCP_CHECKSUM_ON_COPY */

  /* Remove this segment from the queue since trimming it may free pbufs */
  pcb->snd_queuelen -= pbuf_clen(useg->p);
 801519a:	697b      	ldr	r3, [r7, #20]
 801519c:	685b      	ldr	r3, [r3, #4]
 801519e:	4618      	mov	r0, r3
 80151a0:	f7fb fdd2 	bl	8010d48 <pbuf_clen>
 80151a4:	4603      	mov	r3, r0
 80151a6:	461a      	mov	r2, r3
 80151a8:	687b      	ldr	r3, [r7, #4]
 80151aa:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 80151ae:	1a9b      	subs	r3, r3, r2
 80151b0:	b29a      	uxth	r2, r3
 80151b2:	687b      	ldr	r3, [r7, #4]
 80151b4:	f8a3 2066 	strh.w	r2, [r3, #102]	; 0x66

  /* Trim the original pbuf into our split size.  At this point our remainder segment must be setup
  successfully because we are modifying the original segment */
  pbuf_realloc(useg->p, useg->p->tot_len - remainder);
 80151b8:	697b      	ldr	r3, [r7, #20]
 80151ba:	6858      	ldr	r0, [r3, #4]
 80151bc:	697b      	ldr	r3, [r7, #20]
 80151be:	685b      	ldr	r3, [r3, #4]
 80151c0:	891a      	ldrh	r2, [r3, #8]
 80151c2:	89bb      	ldrh	r3, [r7, #12]
 80151c4:	1ad3      	subs	r3, r2, r3
 80151c6:	b29b      	uxth	r3, r3
 80151c8:	4619      	mov	r1, r3
 80151ca:	f7fb fbb1 	bl	8010930 <pbuf_realloc>
  useg->len -= remainder;
 80151ce:	697b      	ldr	r3, [r7, #20]
 80151d0:	891a      	ldrh	r2, [r3, #8]
 80151d2:	89bb      	ldrh	r3, [r7, #12]
 80151d4:	1ad3      	subs	r3, r2, r3
 80151d6:	b29a      	uxth	r2, r3
 80151d8:	697b      	ldr	r3, [r7, #20]
 80151da:	811a      	strh	r2, [r3, #8]
  TCPH_SET_FLAG(useg->tcphdr, split_flags);
 80151dc:	697b      	ldr	r3, [r7, #20]
 80151de:	68db      	ldr	r3, [r3, #12]
 80151e0:	899b      	ldrh	r3, [r3, #12]
 80151e2:	b29c      	uxth	r4, r3
 80151e4:	7efb      	ldrb	r3, [r7, #27]
 80151e6:	b29b      	uxth	r3, r3
 80151e8:	4618      	mov	r0, r3
 80151ea:	f7fa f921 	bl	800f430 <lwip_htons>
 80151ee:	4603      	mov	r3, r0
 80151f0:	461a      	mov	r2, r3
 80151f2:	697b      	ldr	r3, [r7, #20]
 80151f4:	68db      	ldr	r3, [r3, #12]
 80151f6:	4322      	orrs	r2, r4
 80151f8:	b292      	uxth	r2, r2
 80151fa:	819a      	strh	r2, [r3, #12]
  /* By trimming, realloc may have actually shrunk the pbuf, so clear oversize_left */
  useg->oversize_left = 0;
#endif /* TCP_OVERSIZE_DBGCHECK */

  /* Add back to the queue with new trimmed pbuf */
  pcb->snd_queuelen += pbuf_clen(useg->p);
 80151fc:	697b      	ldr	r3, [r7, #20]
 80151fe:	685b      	ldr	r3, [r3, #4]
 8015200:	4618      	mov	r0, r3
 8015202:	f7fb fda1 	bl	8010d48 <pbuf_clen>
 8015206:	4603      	mov	r3, r0
 8015208:	461a      	mov	r2, r3
 801520a:	687b      	ldr	r3, [r7, #4]
 801520c:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 8015210:	4413      	add	r3, r2
 8015212:	b29a      	uxth	r2, r3
 8015214:	687b      	ldr	r3, [r7, #4]
 8015216:	f8a3 2066 	strh.w	r2, [r3, #102]	; 0x66
#endif /* TCP_CHECKSUM_ON_COPY */

  /* Update number of segments on the queues. Note that length now may
   * exceed TCP_SND_QUEUELEN! We don't have to touch pcb->snd_buf
   * because the total amount of data is constant when packet is split */
  pcb->snd_queuelen += pbuf_clen(seg->p);
 801521a:	69fb      	ldr	r3, [r7, #28]
 801521c:	685b      	ldr	r3, [r3, #4]
 801521e:	4618      	mov	r0, r3
 8015220:	f7fb fd92 	bl	8010d48 <pbuf_clen>
 8015224:	4603      	mov	r3, r0
 8015226:	461a      	mov	r2, r3
 8015228:	687b      	ldr	r3, [r7, #4]
 801522a:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 801522e:	4413      	add	r3, r2
 8015230:	b29a      	uxth	r2, r3
 8015232:	687b      	ldr	r3, [r7, #4]
 8015234:	f8a3 2066 	strh.w	r2, [r3, #102]	; 0x66

  /* Finally insert remainder into queue after split (which stays head) */
  seg->next = useg->next;
 8015238:	697b      	ldr	r3, [r7, #20]
 801523a:	681a      	ldr	r2, [r3, #0]
 801523c:	69fb      	ldr	r3, [r7, #28]
 801523e:	601a      	str	r2, [r3, #0]
  useg->next = seg;
 8015240:	697b      	ldr	r3, [r7, #20]
 8015242:	69fa      	ldr	r2, [r7, #28]
 8015244:	601a      	str	r2, [r3, #0]

#if TCP_OVERSIZE
  /* If remainder is last segment on the unsent, ensure we clear the oversize amount
   * because the remainder is always sized to the exact remaining amount */
  if (seg->next == NULL) {
 8015246:	69fb      	ldr	r3, [r7, #28]
 8015248:	681b      	ldr	r3, [r3, #0]
 801524a:	2b00      	cmp	r3, #0
 801524c:	d103      	bne.n	8015256 <tcp_split_unsent_seg+0x23a>
    pcb->unsent_oversize = 0;
 801524e:	687b      	ldr	r3, [r7, #4]
 8015250:	2200      	movs	r2, #0
 8015252:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
  }
#endif /* TCP_OVERSIZE */

  return ERR_OK;
 8015256:	2300      	movs	r3, #0
 8015258:	e016      	b.n	8015288 <tcp_split_unsent_seg+0x26c>
    goto memerr;
 801525a:	bf00      	nop
 801525c:	e002      	b.n	8015264 <tcp_split_unsent_seg+0x248>
    goto memerr;
 801525e:	bf00      	nop
 8015260:	e000      	b.n	8015264 <tcp_split_unsent_seg+0x248>
    goto memerr;
 8015262:	bf00      	nop
memerr:
  TCP_STATS_INC(tcp.memerr);

  LWIP_ASSERT("seg == NULL", seg == NULL);
 8015264:	69fb      	ldr	r3, [r7, #28]
 8015266:	2b00      	cmp	r3, #0
 8015268:	d006      	beq.n	8015278 <tcp_split_unsent_seg+0x25c>
 801526a:	4b09      	ldr	r3, [pc, #36]	; (8015290 <tcp_split_unsent_seg+0x274>)
 801526c:	f44f 7276 	mov.w	r2, #984	; 0x3d8
 8015270:	490d      	ldr	r1, [pc, #52]	; (80152a8 <tcp_split_unsent_seg+0x28c>)
 8015272:	4809      	ldr	r0, [pc, #36]	; (8015298 <tcp_split_unsent_seg+0x27c>)
 8015274:	f004 fbf8 	bl	8019a68 <iprintf>
  if (p != NULL) {
 8015278:	693b      	ldr	r3, [r7, #16]
 801527a:	2b00      	cmp	r3, #0
 801527c:	d002      	beq.n	8015284 <tcp_split_unsent_seg+0x268>
    pbuf_free(p);
 801527e:	6938      	ldr	r0, [r7, #16]
 8015280:	f7fb fcda 	bl	8010c38 <pbuf_free>
  }

  return ERR_MEM;
 8015284:	f04f 33ff 	mov.w	r3, #4294967295
}
 8015288:	4618      	mov	r0, r3
 801528a:	3724      	adds	r7, #36	; 0x24
 801528c:	46bd      	mov	sp, r7
 801528e:	bd90      	pop	{r4, r7, pc}
 8015290:	0801d89c 	.word	0x0801d89c
 8015294:	0801dc30 	.word	0x0801dc30
 8015298:	0801d8f0 	.word	0x0801d8f0
 801529c:	0801dc54 	.word	0x0801dc54
 80152a0:	0801dc78 	.word	0x0801dc78
 80152a4:	0801dc88 	.word	0x0801dc88
 80152a8:	0801dc98 	.word	0x0801dc98

080152ac <tcp_send_fin>:
 * @param pcb the tcp_pcb over which to send a segment
 * @return ERR_OK if sent, another err_t otherwise
 */
err_t
tcp_send_fin(struct tcp_pcb *pcb)
{
 80152ac:	b590      	push	{r4, r7, lr}
 80152ae:	b085      	sub	sp, #20
 80152b0:	af00      	add	r7, sp, #0
 80152b2:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_send_fin: invalid pcb", pcb != NULL);
 80152b4:	687b      	ldr	r3, [r7, #4]
 80152b6:	2b00      	cmp	r3, #0
 80152b8:	d106      	bne.n	80152c8 <tcp_send_fin+0x1c>
 80152ba:	4b21      	ldr	r3, [pc, #132]	; (8015340 <tcp_send_fin+0x94>)
 80152bc:	f240 32eb 	movw	r2, #1003	; 0x3eb
 80152c0:	4920      	ldr	r1, [pc, #128]	; (8015344 <tcp_send_fin+0x98>)
 80152c2:	4821      	ldr	r0, [pc, #132]	; (8015348 <tcp_send_fin+0x9c>)
 80152c4:	f004 fbd0 	bl	8019a68 <iprintf>

  /* first, try to add the fin to the last unsent segment */
  if (pcb->unsent != NULL) {
 80152c8:	687b      	ldr	r3, [r7, #4]
 80152ca:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80152cc:	2b00      	cmp	r3, #0
 80152ce:	d02e      	beq.n	801532e <tcp_send_fin+0x82>
    struct tcp_seg *last_unsent;
    for (last_unsent = pcb->unsent; last_unsent->next != NULL;
 80152d0:	687b      	ldr	r3, [r7, #4]
 80152d2:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80152d4:	60fb      	str	r3, [r7, #12]
 80152d6:	e002      	b.n	80152de <tcp_send_fin+0x32>
         last_unsent = last_unsent->next);
 80152d8:	68fb      	ldr	r3, [r7, #12]
 80152da:	681b      	ldr	r3, [r3, #0]
 80152dc:	60fb      	str	r3, [r7, #12]
    for (last_unsent = pcb->unsent; last_unsent->next != NULL;
 80152de:	68fb      	ldr	r3, [r7, #12]
 80152e0:	681b      	ldr	r3, [r3, #0]
 80152e2:	2b00      	cmp	r3, #0
 80152e4:	d1f8      	bne.n	80152d8 <tcp_send_fin+0x2c>

    if ((TCPH_FLAGS(last_unsent->tcphdr) & (TCP_SYN | TCP_FIN | TCP_RST)) == 0) {
 80152e6:	68fb      	ldr	r3, [r7, #12]
 80152e8:	68db      	ldr	r3, [r3, #12]
 80152ea:	899b      	ldrh	r3, [r3, #12]
 80152ec:	b29b      	uxth	r3, r3
 80152ee:	4618      	mov	r0, r3
 80152f0:	f7fa f89e 	bl	800f430 <lwip_htons>
 80152f4:	4603      	mov	r3, r0
 80152f6:	b2db      	uxtb	r3, r3
 80152f8:	f003 0307 	and.w	r3, r3, #7
 80152fc:	2b00      	cmp	r3, #0
 80152fe:	d116      	bne.n	801532e <tcp_send_fin+0x82>
      /* no SYN/FIN/RST flag in the header, we can add the FIN flag */
      TCPH_SET_FLAG(last_unsent->tcphdr, TCP_FIN);
 8015300:	68fb      	ldr	r3, [r7, #12]
 8015302:	68db      	ldr	r3, [r3, #12]
 8015304:	899b      	ldrh	r3, [r3, #12]
 8015306:	b29c      	uxth	r4, r3
 8015308:	2001      	movs	r0, #1
 801530a:	f7fa f891 	bl	800f430 <lwip_htons>
 801530e:	4603      	mov	r3, r0
 8015310:	461a      	mov	r2, r3
 8015312:	68fb      	ldr	r3, [r7, #12]
 8015314:	68db      	ldr	r3, [r3, #12]
 8015316:	4322      	orrs	r2, r4
 8015318:	b292      	uxth	r2, r2
 801531a:	819a      	strh	r2, [r3, #12]
      tcp_set_flags(pcb, TF_FIN);
 801531c:	687b      	ldr	r3, [r7, #4]
 801531e:	8b5b      	ldrh	r3, [r3, #26]
 8015320:	f043 0320 	orr.w	r3, r3, #32
 8015324:	b29a      	uxth	r2, r3
 8015326:	687b      	ldr	r3, [r7, #4]
 8015328:	835a      	strh	r2, [r3, #26]
      return ERR_OK;
 801532a:	2300      	movs	r3, #0
 801532c:	e004      	b.n	8015338 <tcp_send_fin+0x8c>
    }
  }
  /* no data, no length, flags, copy=1, no optdata */
  return tcp_enqueue_flags(pcb, TCP_FIN);
 801532e:	2101      	movs	r1, #1
 8015330:	6878      	ldr	r0, [r7, #4]
 8015332:	f000 f80b 	bl	801534c <tcp_enqueue_flags>
 8015336:	4603      	mov	r3, r0
}
 8015338:	4618      	mov	r0, r3
 801533a:	3714      	adds	r7, #20
 801533c:	46bd      	mov	sp, r7
 801533e:	bd90      	pop	{r4, r7, pc}
 8015340:	0801d89c 	.word	0x0801d89c
 8015344:	0801dca4 	.word	0x0801dca4
 8015348:	0801d8f0 	.word	0x0801d8f0

0801534c <tcp_enqueue_flags>:
 * @param pcb Protocol control block for the TCP connection.
 * @param flags TCP header flags to set in the outgoing segment.
 */
err_t
tcp_enqueue_flags(struct tcp_pcb *pcb, u8_t flags)
{
 801534c:	b580      	push	{r7, lr}
 801534e:	b08a      	sub	sp, #40	; 0x28
 8015350:	af02      	add	r7, sp, #8
 8015352:	6078      	str	r0, [r7, #4]
 8015354:	460b      	mov	r3, r1
 8015356:	70fb      	strb	r3, [r7, #3]
  struct pbuf *p;
  struct tcp_seg *seg;
  u8_t optflags = 0;
 8015358:	2300      	movs	r3, #0
 801535a:	77fb      	strb	r3, [r7, #31]
  u8_t optlen = 0;
 801535c:	2300      	movs	r3, #0
 801535e:	75fb      	strb	r3, [r7, #23]

  LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_enqueue_flags: queuelen: %"U16_F"\n", (u16_t)pcb->snd_queuelen));

  LWIP_ASSERT("tcp_enqueue_flags: need either TCP_SYN or TCP_FIN in flags (programmer violates API)",
 8015360:	78fb      	ldrb	r3, [r7, #3]
 8015362:	f003 0303 	and.w	r3, r3, #3
 8015366:	2b00      	cmp	r3, #0
 8015368:	d106      	bne.n	8015378 <tcp_enqueue_flags+0x2c>
 801536a:	4b67      	ldr	r3, [pc, #412]	; (8015508 <tcp_enqueue_flags+0x1bc>)
 801536c:	f240 4211 	movw	r2, #1041	; 0x411
 8015370:	4966      	ldr	r1, [pc, #408]	; (801550c <tcp_enqueue_flags+0x1c0>)
 8015372:	4867      	ldr	r0, [pc, #412]	; (8015510 <tcp_enqueue_flags+0x1c4>)
 8015374:	f004 fb78 	bl	8019a68 <iprintf>
              (flags & (TCP_SYN | TCP_FIN)) != 0);
  LWIP_ASSERT("tcp_enqueue_flags: invalid pcb", pcb != NULL);
 8015378:	687b      	ldr	r3, [r7, #4]
 801537a:	2b00      	cmp	r3, #0
 801537c:	d106      	bne.n	801538c <tcp_enqueue_flags+0x40>
 801537e:	4b62      	ldr	r3, [pc, #392]	; (8015508 <tcp_enqueue_flags+0x1bc>)
 8015380:	f240 4213 	movw	r2, #1043	; 0x413
 8015384:	4963      	ldr	r1, [pc, #396]	; (8015514 <tcp_enqueue_flags+0x1c8>)
 8015386:	4862      	ldr	r0, [pc, #392]	; (8015510 <tcp_enqueue_flags+0x1c4>)
 8015388:	f004 fb6e 	bl	8019a68 <iprintf>

  /* No need to check pcb->snd_queuelen if only SYN or FIN are allowed! */

  /* Get options for this segment. This is a special case since this is the
     only place where a SYN can be sent. */
  if (flags & TCP_SYN) {
 801538c:	78fb      	ldrb	r3, [r7, #3]
 801538e:	f003 0302 	and.w	r3, r3, #2
 8015392:	2b00      	cmp	r3, #0
 8015394:	d001      	beq.n	801539a <tcp_enqueue_flags+0x4e>
    optflags = TF_SEG_OPTS_MSS;
 8015396:	2301      	movs	r3, #1
 8015398:	77fb      	strb	r3, [r7, #31]
    /* Make sure the timestamp option is only included in data segments if we
       agreed about it with the remote host (and in active open SYN segments). */
    optflags |= TF_SEG_OPTS_TS;
  }
#endif /* LWIP_TCP_TIMESTAMPS */
  optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(optflags, pcb);
 801539a:	7ffb      	ldrb	r3, [r7, #31]
 801539c:	009b      	lsls	r3, r3, #2
 801539e:	b2db      	uxtb	r3, r3
 80153a0:	f003 0304 	and.w	r3, r3, #4
 80153a4:	75fb      	strb	r3, [r7, #23]

  /* Allocate pbuf with room for TCP header + options */
  if ((p = pbuf_alloc(PBUF_TRANSPORT, optlen, PBUF_RAM)) == NULL) {
 80153a6:	7dfb      	ldrb	r3, [r7, #23]
 80153a8:	b29b      	uxth	r3, r3
 80153aa:	f44f 7220 	mov.w	r2, #640	; 0x280
 80153ae:	4619      	mov	r1, r3
 80153b0:	2036      	movs	r0, #54	; 0x36
 80153b2:	f7fb f95d 	bl	8010670 <pbuf_alloc>
 80153b6:	6138      	str	r0, [r7, #16]
 80153b8:	693b      	ldr	r3, [r7, #16]
 80153ba:	2b00      	cmp	r3, #0
 80153bc:	d109      	bne.n	80153d2 <tcp_enqueue_flags+0x86>
    tcp_set_flags(pcb, TF_NAGLEMEMERR);
 80153be:	687b      	ldr	r3, [r7, #4]
 80153c0:	8b5b      	ldrh	r3, [r3, #26]
 80153c2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80153c6:	b29a      	uxth	r2, r3
 80153c8:	687b      	ldr	r3, [r7, #4]
 80153ca:	835a      	strh	r2, [r3, #26]
    TCP_STATS_INC(tcp.memerr);
    return ERR_MEM;
 80153cc:	f04f 33ff 	mov.w	r3, #4294967295
 80153d0:	e095      	b.n	80154fe <tcp_enqueue_flags+0x1b2>
  }
  LWIP_ASSERT("tcp_enqueue_flags: check that first pbuf can hold optlen",
 80153d2:	693b      	ldr	r3, [r7, #16]
 80153d4:	895a      	ldrh	r2, [r3, #10]
 80153d6:	7dfb      	ldrb	r3, [r7, #23]
 80153d8:	b29b      	uxth	r3, r3
 80153da:	429a      	cmp	r2, r3
 80153dc:	d206      	bcs.n	80153ec <tcp_enqueue_flags+0xa0>
 80153de:	4b4a      	ldr	r3, [pc, #296]	; (8015508 <tcp_enqueue_flags+0x1bc>)
 80153e0:	f240 4239 	movw	r2, #1081	; 0x439
 80153e4:	494c      	ldr	r1, [pc, #304]	; (8015518 <tcp_enqueue_flags+0x1cc>)
 80153e6:	484a      	ldr	r0, [pc, #296]	; (8015510 <tcp_enqueue_flags+0x1c4>)
 80153e8:	f004 fb3e 	bl	8019a68 <iprintf>
              (p->len >= optlen));

  /* Allocate memory for tcp_seg, and fill in fields. */
  if ((seg = tcp_create_segment(pcb, p, flags, pcb->snd_lbb, optflags)) == NULL) {
 80153ec:	687b      	ldr	r3, [r7, #4]
 80153ee:	6dd9      	ldr	r1, [r3, #92]	; 0x5c
 80153f0:	78fa      	ldrb	r2, [r7, #3]
 80153f2:	7ffb      	ldrb	r3, [r7, #31]
 80153f4:	9300      	str	r3, [sp, #0]
 80153f6:	460b      	mov	r3, r1
 80153f8:	6939      	ldr	r1, [r7, #16]
 80153fa:	6878      	ldr	r0, [r7, #4]
 80153fc:	f7ff fd70 	bl	8014ee0 <tcp_create_segment>
 8015400:	60f8      	str	r0, [r7, #12]
 8015402:	68fb      	ldr	r3, [r7, #12]
 8015404:	2b00      	cmp	r3, #0
 8015406:	d109      	bne.n	801541c <tcp_enqueue_flags+0xd0>
    tcp_set_flags(pcb, TF_NAGLEMEMERR);
 8015408:	687b      	ldr	r3, [r7, #4]
 801540a:	8b5b      	ldrh	r3, [r3, #26]
 801540c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8015410:	b29a      	uxth	r2, r3
 8015412:	687b      	ldr	r3, [r7, #4]
 8015414:	835a      	strh	r2, [r3, #26]
    TCP_STATS_INC(tcp.memerr);
    return ERR_MEM;
 8015416:	f04f 33ff 	mov.w	r3, #4294967295
 801541a:	e070      	b.n	80154fe <tcp_enqueue_flags+0x1b2>
  }
  LWIP_ASSERT("seg->tcphdr not aligned", ((mem_ptr_t)seg->tcphdr % LWIP_MIN(MEM_ALIGNMENT, 4)) == 0);
 801541c:	68fb      	ldr	r3, [r7, #12]
 801541e:	68db      	ldr	r3, [r3, #12]
 8015420:	f003 0303 	and.w	r3, r3, #3
 8015424:	2b00      	cmp	r3, #0
 8015426:	d006      	beq.n	8015436 <tcp_enqueue_flags+0xea>
 8015428:	4b37      	ldr	r3, [pc, #220]	; (8015508 <tcp_enqueue_flags+0x1bc>)
 801542a:	f240 4242 	movw	r2, #1090	; 0x442
 801542e:	493b      	ldr	r1, [pc, #236]	; (801551c <tcp_enqueue_flags+0x1d0>)
 8015430:	4837      	ldr	r0, [pc, #220]	; (8015510 <tcp_enqueue_flags+0x1c4>)
 8015432:	f004 fb19 	bl	8019a68 <iprintf>
  LWIP_ASSERT("tcp_enqueue_flags: invalid segment length", seg->len == 0);
 8015436:	68fb      	ldr	r3, [r7, #12]
 8015438:	891b      	ldrh	r3, [r3, #8]
 801543a:	2b00      	cmp	r3, #0
 801543c:	d006      	beq.n	801544c <tcp_enqueue_flags+0x100>
 801543e:	4b32      	ldr	r3, [pc, #200]	; (8015508 <tcp_enqueue_flags+0x1bc>)
 8015440:	f240 4243 	movw	r2, #1091	; 0x443
 8015444:	4936      	ldr	r1, [pc, #216]	; (8015520 <tcp_enqueue_flags+0x1d4>)
 8015446:	4832      	ldr	r0, [pc, #200]	; (8015510 <tcp_enqueue_flags+0x1c4>)
 8015448:	f004 fb0e 	bl	8019a68 <iprintf>
               lwip_ntohl(seg->tcphdr->seqno),
               lwip_ntohl(seg->tcphdr->seqno) + TCP_TCPLEN(seg),
               (u16_t)flags));

  /* Now append seg to pcb->unsent queue */
  if (pcb->unsent == NULL) {
 801544c:	687b      	ldr	r3, [r7, #4]
 801544e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8015450:	2b00      	cmp	r3, #0
 8015452:	d103      	bne.n	801545c <tcp_enqueue_flags+0x110>
    pcb->unsent = seg;
 8015454:	687b      	ldr	r3, [r7, #4]
 8015456:	68fa      	ldr	r2, [r7, #12]
 8015458:	66da      	str	r2, [r3, #108]	; 0x6c
 801545a:	e00d      	b.n	8015478 <tcp_enqueue_flags+0x12c>
  } else {
    struct tcp_seg *useg;
    for (useg = pcb->unsent; useg->next != NULL; useg = useg->next);
 801545c:	687b      	ldr	r3, [r7, #4]
 801545e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8015460:	61bb      	str	r3, [r7, #24]
 8015462:	e002      	b.n	801546a <tcp_enqueue_flags+0x11e>
 8015464:	69bb      	ldr	r3, [r7, #24]
 8015466:	681b      	ldr	r3, [r3, #0]
 8015468:	61bb      	str	r3, [r7, #24]
 801546a:	69bb      	ldr	r3, [r7, #24]
 801546c:	681b      	ldr	r3, [r3, #0]
 801546e:	2b00      	cmp	r3, #0
 8015470:	d1f8      	bne.n	8015464 <tcp_enqueue_flags+0x118>
    useg->next = seg;
 8015472:	69bb      	ldr	r3, [r7, #24]
 8015474:	68fa      	ldr	r2, [r7, #12]
 8015476:	601a      	str	r2, [r3, #0]
  }
#if TCP_OVERSIZE
  /* The new unsent tail has no space */
  pcb->unsent_oversize = 0;
 8015478:	687b      	ldr	r3, [r7, #4]
 801547a:	2200      	movs	r2, #0
 801547c:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
#endif /* TCP_OVERSIZE */

  /* SYN and FIN bump the sequence number */
  if ((flags & TCP_SYN) || (flags & TCP_FIN)) {
 8015480:	78fb      	ldrb	r3, [r7, #3]
 8015482:	f003 0302 	and.w	r3, r3, #2
 8015486:	2b00      	cmp	r3, #0
 8015488:	d104      	bne.n	8015494 <tcp_enqueue_flags+0x148>
 801548a:	78fb      	ldrb	r3, [r7, #3]
 801548c:	f003 0301 	and.w	r3, r3, #1
 8015490:	2b00      	cmp	r3, #0
 8015492:	d004      	beq.n	801549e <tcp_enqueue_flags+0x152>
    pcb->snd_lbb++;
 8015494:	687b      	ldr	r3, [r7, #4]
 8015496:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8015498:	1c5a      	adds	r2, r3, #1
 801549a:	687b      	ldr	r3, [r7, #4]
 801549c:	65da      	str	r2, [r3, #92]	; 0x5c
    /* optlen does not influence snd_buf */
  }
  if (flags & TCP_FIN) {
 801549e:	78fb      	ldrb	r3, [r7, #3]
 80154a0:	f003 0301 	and.w	r3, r3, #1
 80154a4:	2b00      	cmp	r3, #0
 80154a6:	d006      	beq.n	80154b6 <tcp_enqueue_flags+0x16a>
    tcp_set_flags(pcb, TF_FIN);
 80154a8:	687b      	ldr	r3, [r7, #4]
 80154aa:	8b5b      	ldrh	r3, [r3, #26]
 80154ac:	f043 0320 	orr.w	r3, r3, #32
 80154b0:	b29a      	uxth	r2, r3
 80154b2:	687b      	ldr	r3, [r7, #4]
 80154b4:	835a      	strh	r2, [r3, #26]
  }

  /* update number of segments on the queues */
  pcb->snd_queuelen += pbuf_clen(seg->p);
 80154b6:	68fb      	ldr	r3, [r7, #12]
 80154b8:	685b      	ldr	r3, [r3, #4]
 80154ba:	4618      	mov	r0, r3
 80154bc:	f7fb fc44 	bl	8010d48 <pbuf_clen>
 80154c0:	4603      	mov	r3, r0
 80154c2:	461a      	mov	r2, r3
 80154c4:	687b      	ldr	r3, [r7, #4]
 80154c6:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 80154ca:	4413      	add	r3, r2
 80154cc:	b29a      	uxth	r2, r3
 80154ce:	687b      	ldr	r3, [r7, #4]
 80154d0:	f8a3 2066 	strh.w	r2, [r3, #102]	; 0x66
  LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_enqueue_flags: %"S16_F" (after enqueued)\n", pcb->snd_queuelen));
  if (pcb->snd_queuelen != 0) {
 80154d4:	687b      	ldr	r3, [r7, #4]
 80154d6:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 80154da:	2b00      	cmp	r3, #0
 80154dc:	d00e      	beq.n	80154fc <tcp_enqueue_flags+0x1b0>
    LWIP_ASSERT("tcp_enqueue_flags: invalid queue length",
 80154de:	687b      	ldr	r3, [r7, #4]
 80154e0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80154e2:	2b00      	cmp	r3, #0
 80154e4:	d10a      	bne.n	80154fc <tcp_enqueue_flags+0x1b0>
 80154e6:	687b      	ldr	r3, [r7, #4]
 80154e8:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80154ea:	2b00      	cmp	r3, #0
 80154ec:	d106      	bne.n	80154fc <tcp_enqueue_flags+0x1b0>
 80154ee:	4b06      	ldr	r3, [pc, #24]	; (8015508 <tcp_enqueue_flags+0x1bc>)
 80154f0:	f240 4265 	movw	r2, #1125	; 0x465
 80154f4:	490b      	ldr	r1, [pc, #44]	; (8015524 <tcp_enqueue_flags+0x1d8>)
 80154f6:	4806      	ldr	r0, [pc, #24]	; (8015510 <tcp_enqueue_flags+0x1c4>)
 80154f8:	f004 fab6 	bl	8019a68 <iprintf>
                pcb->unacked != NULL || pcb->unsent != NULL);
  }

  return ERR_OK;
 80154fc:	2300      	movs	r3, #0
}
 80154fe:	4618      	mov	r0, r3
 8015500:	3720      	adds	r7, #32
 8015502:	46bd      	mov	sp, r7
 8015504:	bd80      	pop	{r7, pc}
 8015506:	bf00      	nop
 8015508:	0801d89c 	.word	0x0801d89c
 801550c:	0801dcc0 	.word	0x0801dcc0
 8015510:	0801d8f0 	.word	0x0801d8f0
 8015514:	0801dd18 	.word	0x0801dd18
 8015518:	0801dd38 	.word	0x0801dd38
 801551c:	0801dd74 	.word	0x0801dd74
 8015520:	0801dd8c 	.word	0x0801dd8c
 8015524:	0801ddb8 	.word	0x0801ddb8

08015528 <tcp_output>:
 * @return ERR_OK if data has been sent or nothing to send
 *         another err_t on error
 */
err_t
tcp_output(struct tcp_pcb *pcb)
{
 8015528:	b5b0      	push	{r4, r5, r7, lr}
 801552a:	b08a      	sub	sp, #40	; 0x28
 801552c:	af00      	add	r7, sp, #0
 801552e:	6078      	str	r0, [r7, #4]
  s16_t i = 0;
#endif /* TCP_CWND_DEBUG */

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ASSERT("tcp_output: invalid pcb", pcb != NULL);
 8015530:	687b      	ldr	r3, [r7, #4]
 8015532:	2b00      	cmp	r3, #0
 8015534:	d106      	bne.n	8015544 <tcp_output+0x1c>
 8015536:	4b8a      	ldr	r3, [pc, #552]	; (8015760 <tcp_output+0x238>)
 8015538:	f240 42e1 	movw	r2, #1249	; 0x4e1
 801553c:	4989      	ldr	r1, [pc, #548]	; (8015764 <tcp_output+0x23c>)
 801553e:	488a      	ldr	r0, [pc, #552]	; (8015768 <tcp_output+0x240>)
 8015540:	f004 fa92 	bl	8019a68 <iprintf>
  /* pcb->state LISTEN not allowed here */
  LWIP_ASSERT("don't call tcp_output for listen-pcbs",
 8015544:	687b      	ldr	r3, [r7, #4]
 8015546:	7d1b      	ldrb	r3, [r3, #20]
 8015548:	2b01      	cmp	r3, #1
 801554a:	d106      	bne.n	801555a <tcp_output+0x32>
 801554c:	4b84      	ldr	r3, [pc, #528]	; (8015760 <tcp_output+0x238>)
 801554e:	f240 42e3 	movw	r2, #1251	; 0x4e3
 8015552:	4986      	ldr	r1, [pc, #536]	; (801576c <tcp_output+0x244>)
 8015554:	4884      	ldr	r0, [pc, #528]	; (8015768 <tcp_output+0x240>)
 8015556:	f004 fa87 	bl	8019a68 <iprintf>

  /* First, check if we are invoked by the TCP input processing
     code. If so, we do not output anything. Instead, we rely on the
     input processing code to call us when input processing is done
     with. */
  if (tcp_input_pcb == pcb) {
 801555a:	4b85      	ldr	r3, [pc, #532]	; (8015770 <tcp_output+0x248>)
 801555c:	681b      	ldr	r3, [r3, #0]
 801555e:	687a      	ldr	r2, [r7, #4]
 8015560:	429a      	cmp	r2, r3
 8015562:	d101      	bne.n	8015568 <tcp_output+0x40>
    return ERR_OK;
 8015564:	2300      	movs	r3, #0
 8015566:	e1ce      	b.n	8015906 <tcp_output+0x3de>
  }

  wnd = LWIP_MIN(pcb->snd_wnd, pcb->cwnd);
 8015568:	687b      	ldr	r3, [r7, #4]
 801556a:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 801556e:	687b      	ldr	r3, [r7, #4]
 8015570:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 8015574:	4293      	cmp	r3, r2
 8015576:	bf28      	it	cs
 8015578:	4613      	movcs	r3, r2
 801557a:	b29b      	uxth	r3, r3
 801557c:	61bb      	str	r3, [r7, #24]

  seg = pcb->unsent;
 801557e:	687b      	ldr	r3, [r7, #4]
 8015580:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8015582:	627b      	str	r3, [r7, #36]	; 0x24

  if (seg == NULL) {
 8015584:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8015586:	2b00      	cmp	r3, #0
 8015588:	d10b      	bne.n	80155a2 <tcp_output+0x7a>
                                 ", seg == NULL, ack %"U32_F"\n",
                                 pcb->snd_wnd, pcb->cwnd, wnd, pcb->lastack));

    /* If the TF_ACK_NOW flag is set and the ->unsent queue is empty, construct
     * an empty ACK segment and send it. */
    if (pcb->flags & TF_ACK_NOW) {
 801558a:	687b      	ldr	r3, [r7, #4]
 801558c:	8b5b      	ldrh	r3, [r3, #26]
 801558e:	f003 0302 	and.w	r3, r3, #2
 8015592:	2b00      	cmp	r3, #0
 8015594:	f000 81aa 	beq.w	80158ec <tcp_output+0x3c4>
      return tcp_send_empty_ack(pcb);
 8015598:	6878      	ldr	r0, [r7, #4]
 801559a:	f000 fdcb 	bl	8016134 <tcp_send_empty_ack>
 801559e:	4603      	mov	r3, r0
 80155a0:	e1b1      	b.n	8015906 <tcp_output+0x3de>
                 pcb->snd_wnd, pcb->cwnd, wnd,
                 lwip_ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len,
                 lwip_ntohl(seg->tcphdr->seqno), pcb->lastack));
  }

  netif = tcp_route(pcb, &pcb->local_ip, &pcb->remote_ip);
 80155a2:	6879      	ldr	r1, [r7, #4]
 80155a4:	687b      	ldr	r3, [r7, #4]
 80155a6:	3304      	adds	r3, #4
 80155a8:	461a      	mov	r2, r3
 80155aa:	6878      	ldr	r0, [r7, #4]
 80155ac:	f7ff fc7c 	bl	8014ea8 <tcp_route>
 80155b0:	6178      	str	r0, [r7, #20]
  if (netif == NULL) {
 80155b2:	697b      	ldr	r3, [r7, #20]
 80155b4:	2b00      	cmp	r3, #0
 80155b6:	d102      	bne.n	80155be <tcp_output+0x96>
    return ERR_RTE;
 80155b8:	f06f 0303 	mvn.w	r3, #3
 80155bc:	e1a3      	b.n	8015906 <tcp_output+0x3de>
  }

  /* If we don't have a local IP address, we get one from netif */
  if (ip_addr_isany(&pcb->local_ip)) {
 80155be:	687b      	ldr	r3, [r7, #4]
 80155c0:	2b00      	cmp	r3, #0
 80155c2:	d003      	beq.n	80155cc <tcp_output+0xa4>
 80155c4:	687b      	ldr	r3, [r7, #4]
 80155c6:	681b      	ldr	r3, [r3, #0]
 80155c8:	2b00      	cmp	r3, #0
 80155ca:	d111      	bne.n	80155f0 <tcp_output+0xc8>
    const ip_addr_t *local_ip = ip_netif_get_local_ip(netif, &pcb->remote_ip);
 80155cc:	697b      	ldr	r3, [r7, #20]
 80155ce:	2b00      	cmp	r3, #0
 80155d0:	d002      	beq.n	80155d8 <tcp_output+0xb0>
 80155d2:	697b      	ldr	r3, [r7, #20]
 80155d4:	3304      	adds	r3, #4
 80155d6:	e000      	b.n	80155da <tcp_output+0xb2>
 80155d8:	2300      	movs	r3, #0
 80155da:	613b      	str	r3, [r7, #16]
    if (local_ip == NULL) {
 80155dc:	693b      	ldr	r3, [r7, #16]
 80155de:	2b00      	cmp	r3, #0
 80155e0:	d102      	bne.n	80155e8 <tcp_output+0xc0>
      return ERR_RTE;
 80155e2:	f06f 0303 	mvn.w	r3, #3
 80155e6:	e18e      	b.n	8015906 <tcp_output+0x3de>
    }
    ip_addr_copy(pcb->local_ip, *local_ip);
 80155e8:	693b      	ldr	r3, [r7, #16]
 80155ea:	681a      	ldr	r2, [r3, #0]
 80155ec:	687b      	ldr	r3, [r7, #4]
 80155ee:	601a      	str	r2, [r3, #0]
  }

  /* Handle the current segment not fitting within the window */
  if (lwip_ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len > wnd) {
 80155f0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80155f2:	68db      	ldr	r3, [r3, #12]
 80155f4:	685b      	ldr	r3, [r3, #4]
 80155f6:	4618      	mov	r0, r3
 80155f8:	f7f9 ff2f 	bl	800f45a <lwip_htonl>
 80155fc:	4602      	mov	r2, r0
 80155fe:	687b      	ldr	r3, [r7, #4]
 8015600:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8015602:	1ad3      	subs	r3, r2, r3
 8015604:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8015606:	8912      	ldrh	r2, [r2, #8]
 8015608:	4413      	add	r3, r2
 801560a:	69ba      	ldr	r2, [r7, #24]
 801560c:	429a      	cmp	r2, r3
 801560e:	d227      	bcs.n	8015660 <tcp_output+0x138>
     * within the remaining (could be 0) send window and RTO timer is not running (we
     * have no in-flight data). If window is still too small after persist timer fires,
     * then we split the segment. We don't consider the congestion window since a cwnd
     * smaller than 1 SMSS implies in-flight data
     */
    if (wnd == pcb->snd_wnd && pcb->unacked == NULL && pcb->persist_backoff == 0) {
 8015610:	687b      	ldr	r3, [r7, #4]
 8015612:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 8015616:	461a      	mov	r2, r3
 8015618:	69bb      	ldr	r3, [r7, #24]
 801561a:	4293      	cmp	r3, r2
 801561c:	d114      	bne.n	8015648 <tcp_output+0x120>
 801561e:	687b      	ldr	r3, [r7, #4]
 8015620:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8015622:	2b00      	cmp	r3, #0
 8015624:	d110      	bne.n	8015648 <tcp_output+0x120>
 8015626:	687b      	ldr	r3, [r7, #4]
 8015628:	f893 3099 	ldrb.w	r3, [r3, #153]	; 0x99
 801562c:	2b00      	cmp	r3, #0
 801562e:	d10b      	bne.n	8015648 <tcp_output+0x120>
      pcb->persist_cnt = 0;
 8015630:	687b      	ldr	r3, [r7, #4]
 8015632:	2200      	movs	r2, #0
 8015634:	f883 2098 	strb.w	r2, [r3, #152]	; 0x98
      pcb->persist_backoff = 1;
 8015638:	687b      	ldr	r3, [r7, #4]
 801563a:	2201      	movs	r2, #1
 801563c:	f883 2099 	strb.w	r2, [r3, #153]	; 0x99
      pcb->persist_probe = 0;
 8015640:	687b      	ldr	r3, [r7, #4]
 8015642:	2200      	movs	r2, #0
 8015644:	f883 209a 	strb.w	r2, [r3, #154]	; 0x9a
    }
    /* We need an ACK, but can't send data now, so send an empty ACK */
    if (pcb->flags & TF_ACK_NOW) {
 8015648:	687b      	ldr	r3, [r7, #4]
 801564a:	8b5b      	ldrh	r3, [r3, #26]
 801564c:	f003 0302 	and.w	r3, r3, #2
 8015650:	2b00      	cmp	r3, #0
 8015652:	f000 814d 	beq.w	80158f0 <tcp_output+0x3c8>
      return tcp_send_empty_ack(pcb);
 8015656:	6878      	ldr	r0, [r7, #4]
 8015658:	f000 fd6c 	bl	8016134 <tcp_send_empty_ack>
 801565c:	4603      	mov	r3, r0
 801565e:	e152      	b.n	8015906 <tcp_output+0x3de>
    }
    goto output_done;
  }
  /* Stop persist timer, above conditions are not active */
  pcb->persist_backoff = 0;
 8015660:	687b      	ldr	r3, [r7, #4]
 8015662:	2200      	movs	r2, #0
 8015664:	f883 2099 	strb.w	r2, [r3, #153]	; 0x99

  /* useg should point to last segment on unacked queue */
  useg = pcb->unacked;
 8015668:	687b      	ldr	r3, [r7, #4]
 801566a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 801566c:	623b      	str	r3, [r7, #32]
  if (useg != NULL) {
 801566e:	6a3b      	ldr	r3, [r7, #32]
 8015670:	2b00      	cmp	r3, #0
 8015672:	f000 811c 	beq.w	80158ae <tcp_output+0x386>
    for (; useg->next != NULL; useg = useg->next);
 8015676:	e002      	b.n	801567e <tcp_output+0x156>
 8015678:	6a3b      	ldr	r3, [r7, #32]
 801567a:	681b      	ldr	r3, [r3, #0]
 801567c:	623b      	str	r3, [r7, #32]
 801567e:	6a3b      	ldr	r3, [r7, #32]
 8015680:	681b      	ldr	r3, [r3, #0]
 8015682:	2b00      	cmp	r3, #0
 8015684:	d1f8      	bne.n	8015678 <tcp_output+0x150>
  }
  /* data available and window allows it to be sent? */
  while (seg != NULL &&
 8015686:	e112      	b.n	80158ae <tcp_output+0x386>
         lwip_ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len <= wnd) {
    LWIP_ASSERT("RST not expected here!",
 8015688:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801568a:	68db      	ldr	r3, [r3, #12]
 801568c:	899b      	ldrh	r3, [r3, #12]
 801568e:	b29b      	uxth	r3, r3
 8015690:	4618      	mov	r0, r3
 8015692:	f7f9 fecd 	bl	800f430 <lwip_htons>
 8015696:	4603      	mov	r3, r0
 8015698:	b2db      	uxtb	r3, r3
 801569a:	f003 0304 	and.w	r3, r3, #4
 801569e:	2b00      	cmp	r3, #0
 80156a0:	d006      	beq.n	80156b0 <tcp_output+0x188>
 80156a2:	4b2f      	ldr	r3, [pc, #188]	; (8015760 <tcp_output+0x238>)
 80156a4:	f240 5236 	movw	r2, #1334	; 0x536
 80156a8:	4932      	ldr	r1, [pc, #200]	; (8015774 <tcp_output+0x24c>)
 80156aa:	482f      	ldr	r0, [pc, #188]	; (8015768 <tcp_output+0x240>)
 80156ac:	f004 f9dc 	bl	8019a68 <iprintf>
     * - if tcp_write had a memory error before (prevent delayed ACK timeout) or
     * - if FIN was already enqueued for this PCB (SYN is always alone in a segment -
     *   either seg->next != NULL or pcb->unacked == NULL;
     *   RST is no sent using tcp_write/tcp_output.
     */
    if ((tcp_do_output_nagle(pcb) == 0) &&
 80156b0:	687b      	ldr	r3, [r7, #4]
 80156b2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80156b4:	2b00      	cmp	r3, #0
 80156b6:	d01f      	beq.n	80156f8 <tcp_output+0x1d0>
 80156b8:	687b      	ldr	r3, [r7, #4]
 80156ba:	8b5b      	ldrh	r3, [r3, #26]
 80156bc:	f003 0344 	and.w	r3, r3, #68	; 0x44
 80156c0:	2b00      	cmp	r3, #0
 80156c2:	d119      	bne.n	80156f8 <tcp_output+0x1d0>
 80156c4:	687b      	ldr	r3, [r7, #4]
 80156c6:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80156c8:	2b00      	cmp	r3, #0
 80156ca:	d00b      	beq.n	80156e4 <tcp_output+0x1bc>
 80156cc:	687b      	ldr	r3, [r7, #4]
 80156ce:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80156d0:	681b      	ldr	r3, [r3, #0]
 80156d2:	2b00      	cmp	r3, #0
 80156d4:	d110      	bne.n	80156f8 <tcp_output+0x1d0>
 80156d6:	687b      	ldr	r3, [r7, #4]
 80156d8:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80156da:	891a      	ldrh	r2, [r3, #8]
 80156dc:	687b      	ldr	r3, [r7, #4]
 80156de:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 80156e0:	429a      	cmp	r2, r3
 80156e2:	d209      	bcs.n	80156f8 <tcp_output+0x1d0>
 80156e4:	687b      	ldr	r3, [r7, #4]
 80156e6:	f8b3 3064 	ldrh.w	r3, [r3, #100]	; 0x64
 80156ea:	2b00      	cmp	r3, #0
 80156ec:	d004      	beq.n	80156f8 <tcp_output+0x1d0>
 80156ee:	687b      	ldr	r3, [r7, #4]
 80156f0:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 80156f4:	2b0f      	cmp	r3, #15
 80156f6:	d901      	bls.n	80156fc <tcp_output+0x1d4>
 80156f8:	2301      	movs	r3, #1
 80156fa:	e000      	b.n	80156fe <tcp_output+0x1d6>
 80156fc:	2300      	movs	r3, #0
 80156fe:	2b00      	cmp	r3, #0
 8015700:	d106      	bne.n	8015710 <tcp_output+0x1e8>
        ((pcb->flags & (TF_NAGLEMEMERR | TF_FIN)) == 0)) {
 8015702:	687b      	ldr	r3, [r7, #4]
 8015704:	8b5b      	ldrh	r3, [r3, #26]
 8015706:	f003 03a0 	and.w	r3, r3, #160	; 0xa0
    if ((tcp_do_output_nagle(pcb) == 0) &&
 801570a:	2b00      	cmp	r3, #0
 801570c:	f000 80e4 	beq.w	80158d8 <tcp_output+0x3b0>
                                 pcb->lastack,
                                 lwip_ntohl(seg->tcphdr->seqno), pcb->lastack, i));
    ++i;
#endif /* TCP_CWND_DEBUG */

    if (pcb->state != SYN_SENT) {
 8015710:	687b      	ldr	r3, [r7, #4]
 8015712:	7d1b      	ldrb	r3, [r3, #20]
 8015714:	2b02      	cmp	r3, #2
 8015716:	d00d      	beq.n	8015734 <tcp_output+0x20c>
      TCPH_SET_FLAG(seg->tcphdr, TCP_ACK);
 8015718:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801571a:	68db      	ldr	r3, [r3, #12]
 801571c:	899b      	ldrh	r3, [r3, #12]
 801571e:	b29c      	uxth	r4, r3
 8015720:	2010      	movs	r0, #16
 8015722:	f7f9 fe85 	bl	800f430 <lwip_htons>
 8015726:	4603      	mov	r3, r0
 8015728:	461a      	mov	r2, r3
 801572a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801572c:	68db      	ldr	r3, [r3, #12]
 801572e:	4322      	orrs	r2, r4
 8015730:	b292      	uxth	r2, r2
 8015732:	819a      	strh	r2, [r3, #12]
    }

    err = tcp_output_segment(seg, pcb, netif);
 8015734:	697a      	ldr	r2, [r7, #20]
 8015736:	6879      	ldr	r1, [r7, #4]
 8015738:	6a78      	ldr	r0, [r7, #36]	; 0x24
 801573a:	f000 f909 	bl	8015950 <tcp_output_segment>
 801573e:	4603      	mov	r3, r0
 8015740:	73fb      	strb	r3, [r7, #15]
    if (err != ERR_OK) {
 8015742:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8015746:	2b00      	cmp	r3, #0
 8015748:	d016      	beq.n	8015778 <tcp_output+0x250>
      /* segment could not be sent, for whatever reason */
      tcp_set_flags(pcb, TF_NAGLEMEMERR);
 801574a:	687b      	ldr	r3, [r7, #4]
 801574c:	8b5b      	ldrh	r3, [r3, #26]
 801574e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8015752:	b29a      	uxth	r2, r3
 8015754:	687b      	ldr	r3, [r7, #4]
 8015756:	835a      	strh	r2, [r3, #26]
      return err;
 8015758:	f997 300f 	ldrsb.w	r3, [r7, #15]
 801575c:	e0d3      	b.n	8015906 <tcp_output+0x3de>
 801575e:	bf00      	nop
 8015760:	0801d89c 	.word	0x0801d89c
 8015764:	0801dde0 	.word	0x0801dde0
 8015768:	0801d8f0 	.word	0x0801d8f0
 801576c:	0801ddf8 	.word	0x0801ddf8
 8015770:	20007090 	.word	0x20007090
 8015774:	0801de20 	.word	0x0801de20
    }
#if TCP_OVERSIZE_DBGCHECK
    seg->oversize_left = 0;
#endif /* TCP_OVERSIZE_DBGCHECK */
    pcb->unsent = seg->next;
 8015778:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801577a:	681a      	ldr	r2, [r3, #0]
 801577c:	687b      	ldr	r3, [r7, #4]
 801577e:	66da      	str	r2, [r3, #108]	; 0x6c
    if (pcb->state != SYN_SENT) {
 8015780:	687b      	ldr	r3, [r7, #4]
 8015782:	7d1b      	ldrb	r3, [r3, #20]
 8015784:	2b02      	cmp	r3, #2
 8015786:	d006      	beq.n	8015796 <tcp_output+0x26e>
      tcp_clear_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 8015788:	687b      	ldr	r3, [r7, #4]
 801578a:	8b5b      	ldrh	r3, [r3, #26]
 801578c:	f023 0303 	bic.w	r3, r3, #3
 8015790:	b29a      	uxth	r2, r3
 8015792:	687b      	ldr	r3, [r7, #4]
 8015794:	835a      	strh	r2, [r3, #26]
    }
    snd_nxt = lwip_ntohl(seg->tcphdr->seqno) + TCP_TCPLEN(seg);
 8015796:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8015798:	68db      	ldr	r3, [r3, #12]
 801579a:	685b      	ldr	r3, [r3, #4]
 801579c:	4618      	mov	r0, r3
 801579e:	f7f9 fe5c 	bl	800f45a <lwip_htonl>
 80157a2:	4604      	mov	r4, r0
 80157a4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80157a6:	891b      	ldrh	r3, [r3, #8]
 80157a8:	461d      	mov	r5, r3
 80157aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80157ac:	68db      	ldr	r3, [r3, #12]
 80157ae:	899b      	ldrh	r3, [r3, #12]
 80157b0:	b29b      	uxth	r3, r3
 80157b2:	4618      	mov	r0, r3
 80157b4:	f7f9 fe3c 	bl	800f430 <lwip_htons>
 80157b8:	4603      	mov	r3, r0
 80157ba:	b2db      	uxtb	r3, r3
 80157bc:	f003 0303 	and.w	r3, r3, #3
 80157c0:	2b00      	cmp	r3, #0
 80157c2:	d001      	beq.n	80157c8 <tcp_output+0x2a0>
 80157c4:	2301      	movs	r3, #1
 80157c6:	e000      	b.n	80157ca <tcp_output+0x2a2>
 80157c8:	2300      	movs	r3, #0
 80157ca:	442b      	add	r3, r5
 80157cc:	4423      	add	r3, r4
 80157ce:	60bb      	str	r3, [r7, #8]
    if (TCP_SEQ_LT(pcb->snd_nxt, snd_nxt)) {
 80157d0:	687b      	ldr	r3, [r7, #4]
 80157d2:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80157d4:	68bb      	ldr	r3, [r7, #8]
 80157d6:	1ad3      	subs	r3, r2, r3
 80157d8:	2b00      	cmp	r3, #0
 80157da:	da02      	bge.n	80157e2 <tcp_output+0x2ba>
      pcb->snd_nxt = snd_nxt;
 80157dc:	687b      	ldr	r3, [r7, #4]
 80157de:	68ba      	ldr	r2, [r7, #8]
 80157e0:	651a      	str	r2, [r3, #80]	; 0x50
    }
    /* put segment on unacknowledged list if length > 0 */
    if (TCP_TCPLEN(seg) > 0) {
 80157e2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80157e4:	891b      	ldrh	r3, [r3, #8]
 80157e6:	461c      	mov	r4, r3
 80157e8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80157ea:	68db      	ldr	r3, [r3, #12]
 80157ec:	899b      	ldrh	r3, [r3, #12]
 80157ee:	b29b      	uxth	r3, r3
 80157f0:	4618      	mov	r0, r3
 80157f2:	f7f9 fe1d 	bl	800f430 <lwip_htons>
 80157f6:	4603      	mov	r3, r0
 80157f8:	b2db      	uxtb	r3, r3
 80157fa:	f003 0303 	and.w	r3, r3, #3
 80157fe:	2b00      	cmp	r3, #0
 8015800:	d001      	beq.n	8015806 <tcp_output+0x2de>
 8015802:	2301      	movs	r3, #1
 8015804:	e000      	b.n	8015808 <tcp_output+0x2e0>
 8015806:	2300      	movs	r3, #0
 8015808:	4423      	add	r3, r4
 801580a:	2b00      	cmp	r3, #0
 801580c:	d049      	beq.n	80158a2 <tcp_output+0x37a>
      seg->next = NULL;
 801580e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8015810:	2200      	movs	r2, #0
 8015812:	601a      	str	r2, [r3, #0]
      /* unacked list is empty? */
      if (pcb->unacked == NULL) {
 8015814:	687b      	ldr	r3, [r7, #4]
 8015816:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8015818:	2b00      	cmp	r3, #0
 801581a:	d105      	bne.n	8015828 <tcp_output+0x300>
        pcb->unacked = seg;
 801581c:	687b      	ldr	r3, [r7, #4]
 801581e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8015820:	671a      	str	r2, [r3, #112]	; 0x70
        useg = seg;
 8015822:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8015824:	623b      	str	r3, [r7, #32]
 8015826:	e03f      	b.n	80158a8 <tcp_output+0x380>
        /* unacked list is not empty? */
      } else {
        /* In the case of fast retransmit, the packet should not go to the tail
         * of the unacked queue, but rather somewhere before it. We need to check for
         * this case. -STJ Jul 27, 2004 */
        if (TCP_SEQ_LT(lwip_ntohl(seg->tcphdr->seqno), lwip_ntohl(useg->tcphdr->seqno))) {
 8015828:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801582a:	68db      	ldr	r3, [r3, #12]
 801582c:	685b      	ldr	r3, [r3, #4]
 801582e:	4618      	mov	r0, r3
 8015830:	f7f9 fe13 	bl	800f45a <lwip_htonl>
 8015834:	4604      	mov	r4, r0
 8015836:	6a3b      	ldr	r3, [r7, #32]
 8015838:	68db      	ldr	r3, [r3, #12]
 801583a:	685b      	ldr	r3, [r3, #4]
 801583c:	4618      	mov	r0, r3
 801583e:	f7f9 fe0c 	bl	800f45a <lwip_htonl>
 8015842:	4603      	mov	r3, r0
 8015844:	1ae3      	subs	r3, r4, r3
 8015846:	2b00      	cmp	r3, #0
 8015848:	da24      	bge.n	8015894 <tcp_output+0x36c>
          /* add segment to before tail of unacked list, keeping the list sorted */
          struct tcp_seg **cur_seg = &(pcb->unacked);
 801584a:	687b      	ldr	r3, [r7, #4]
 801584c:	3370      	adds	r3, #112	; 0x70
 801584e:	61fb      	str	r3, [r7, #28]
          while (*cur_seg &&
 8015850:	e002      	b.n	8015858 <tcp_output+0x330>
                 TCP_SEQ_LT(lwip_ntohl((*cur_seg)->tcphdr->seqno), lwip_ntohl(seg->tcphdr->seqno))) {
            cur_seg = &((*cur_seg)->next );
 8015852:	69fb      	ldr	r3, [r7, #28]
 8015854:	681b      	ldr	r3, [r3, #0]
 8015856:	61fb      	str	r3, [r7, #28]
          while (*cur_seg &&
 8015858:	69fb      	ldr	r3, [r7, #28]
 801585a:	681b      	ldr	r3, [r3, #0]
 801585c:	2b00      	cmp	r3, #0
 801585e:	d011      	beq.n	8015884 <tcp_output+0x35c>
                 TCP_SEQ_LT(lwip_ntohl((*cur_seg)->tcphdr->seqno), lwip_ntohl(seg->tcphdr->seqno))) {
 8015860:	69fb      	ldr	r3, [r7, #28]
 8015862:	681b      	ldr	r3, [r3, #0]
 8015864:	68db      	ldr	r3, [r3, #12]
 8015866:	685b      	ldr	r3, [r3, #4]
 8015868:	4618      	mov	r0, r3
 801586a:	f7f9 fdf6 	bl	800f45a <lwip_htonl>
 801586e:	4604      	mov	r4, r0
 8015870:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8015872:	68db      	ldr	r3, [r3, #12]
 8015874:	685b      	ldr	r3, [r3, #4]
 8015876:	4618      	mov	r0, r3
 8015878:	f7f9 fdef 	bl	800f45a <lwip_htonl>
 801587c:	4603      	mov	r3, r0
 801587e:	1ae3      	subs	r3, r4, r3
          while (*cur_seg &&
 8015880:	2b00      	cmp	r3, #0
 8015882:	dbe6      	blt.n	8015852 <tcp_output+0x32a>
          }
          seg->next = (*cur_seg);
 8015884:	69fb      	ldr	r3, [r7, #28]
 8015886:	681a      	ldr	r2, [r3, #0]
 8015888:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801588a:	601a      	str	r2, [r3, #0]
          (*cur_seg) = seg;
 801588c:	69fb      	ldr	r3, [r7, #28]
 801588e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8015890:	601a      	str	r2, [r3, #0]
 8015892:	e009      	b.n	80158a8 <tcp_output+0x380>
        } else {
          /* add segment to tail of unacked list */
          useg->next = seg;
 8015894:	6a3b      	ldr	r3, [r7, #32]
 8015896:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8015898:	601a      	str	r2, [r3, #0]
          useg = useg->next;
 801589a:	6a3b      	ldr	r3, [r7, #32]
 801589c:	681b      	ldr	r3, [r3, #0]
 801589e:	623b      	str	r3, [r7, #32]
 80158a0:	e002      	b.n	80158a8 <tcp_output+0x380>
        }
      }
      /* do not queue empty segments on the unacked list */
    } else {
      tcp_seg_free(seg);
 80158a2:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80158a4:	f7fc fc3f 	bl	8012126 <tcp_seg_free>
    }
    seg = pcb->unsent;
 80158a8:	687b      	ldr	r3, [r7, #4]
 80158aa:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80158ac:	627b      	str	r3, [r7, #36]	; 0x24
  while (seg != NULL &&
 80158ae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80158b0:	2b00      	cmp	r3, #0
 80158b2:	d012      	beq.n	80158da <tcp_output+0x3b2>
         lwip_ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len <= wnd) {
 80158b4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80158b6:	68db      	ldr	r3, [r3, #12]
 80158b8:	685b      	ldr	r3, [r3, #4]
 80158ba:	4618      	mov	r0, r3
 80158bc:	f7f9 fdcd 	bl	800f45a <lwip_htonl>
 80158c0:	4602      	mov	r2, r0
 80158c2:	687b      	ldr	r3, [r7, #4]
 80158c4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80158c6:	1ad3      	subs	r3, r2, r3
 80158c8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80158ca:	8912      	ldrh	r2, [r2, #8]
 80158cc:	4413      	add	r3, r2
  while (seg != NULL &&
 80158ce:	69ba      	ldr	r2, [r7, #24]
 80158d0:	429a      	cmp	r2, r3
 80158d2:	f4bf aed9 	bcs.w	8015688 <tcp_output+0x160>
 80158d6:	e000      	b.n	80158da <tcp_output+0x3b2>
      break;
 80158d8:	bf00      	nop
  }
#if TCP_OVERSIZE
  if (pcb->unsent == NULL) {
 80158da:	687b      	ldr	r3, [r7, #4]
 80158dc:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80158de:	2b00      	cmp	r3, #0
 80158e0:	d108      	bne.n	80158f4 <tcp_output+0x3cc>
    /* last unsent has been removed, reset unsent_oversize */
    pcb->unsent_oversize = 0;
 80158e2:	687b      	ldr	r3, [r7, #4]
 80158e4:	2200      	movs	r2, #0
 80158e6:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
 80158ea:	e004      	b.n	80158f6 <tcp_output+0x3ce>
    goto output_done;
 80158ec:	bf00      	nop
 80158ee:	e002      	b.n	80158f6 <tcp_output+0x3ce>
    goto output_done;
 80158f0:	bf00      	nop
 80158f2:	e000      	b.n	80158f6 <tcp_output+0x3ce>
  }
#endif /* TCP_OVERSIZE */

output_done:
 80158f4:	bf00      	nop
  tcp_clear_flags(pcb, TF_NAGLEMEMERR);
 80158f6:	687b      	ldr	r3, [r7, #4]
 80158f8:	8b5b      	ldrh	r3, [r3, #26]
 80158fa:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80158fe:	b29a      	uxth	r2, r3
 8015900:	687b      	ldr	r3, [r7, #4]
 8015902:	835a      	strh	r2, [r3, #26]
  return ERR_OK;
 8015904:	2300      	movs	r3, #0
}
 8015906:	4618      	mov	r0, r3
 8015908:	3728      	adds	r7, #40	; 0x28
 801590a:	46bd      	mov	sp, r7
 801590c:	bdb0      	pop	{r4, r5, r7, pc}
 801590e:	bf00      	nop

08015910 <tcp_output_segment_busy>:
 * @arg seg the tcp segment to check
 * @return 1 if ref != 1, 0 if ref == 1
 */
static int
tcp_output_segment_busy(const struct tcp_seg *seg)
{
 8015910:	b580      	push	{r7, lr}
 8015912:	b082      	sub	sp, #8
 8015914:	af00      	add	r7, sp, #0
 8015916:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_output_segment_busy: invalid seg", seg != NULL);
 8015918:	687b      	ldr	r3, [r7, #4]
 801591a:	2b00      	cmp	r3, #0
 801591c:	d106      	bne.n	801592c <tcp_output_segment_busy+0x1c>
 801591e:	4b09      	ldr	r3, [pc, #36]	; (8015944 <tcp_output_segment_busy+0x34>)
 8015920:	f240 529a 	movw	r2, #1434	; 0x59a
 8015924:	4908      	ldr	r1, [pc, #32]	; (8015948 <tcp_output_segment_busy+0x38>)
 8015926:	4809      	ldr	r0, [pc, #36]	; (801594c <tcp_output_segment_busy+0x3c>)
 8015928:	f004 f89e 	bl	8019a68 <iprintf>

  /* We only need to check the first pbuf here:
     If a pbuf is queued for transmission, a driver calls pbuf_ref(),
     which only changes the ref count of the first pbuf */
  if (seg->p->ref != 1) {
 801592c:	687b      	ldr	r3, [r7, #4]
 801592e:	685b      	ldr	r3, [r3, #4]
 8015930:	7b9b      	ldrb	r3, [r3, #14]
 8015932:	2b01      	cmp	r3, #1
 8015934:	d001      	beq.n	801593a <tcp_output_segment_busy+0x2a>
    /* other reference found */
    return 1;
 8015936:	2301      	movs	r3, #1
 8015938:	e000      	b.n	801593c <tcp_output_segment_busy+0x2c>
  }
  /* no other references found */
  return 0;
 801593a:	2300      	movs	r3, #0
}
 801593c:	4618      	mov	r0, r3
 801593e:	3708      	adds	r7, #8
 8015940:	46bd      	mov	sp, r7
 8015942:	bd80      	pop	{r7, pc}
 8015944:	0801d89c 	.word	0x0801d89c
 8015948:	0801de38 	.word	0x0801de38
 801594c:	0801d8f0 	.word	0x0801d8f0

08015950 <tcp_output_segment>:
 * @param pcb the tcp_pcb for the TCP connection used to send the segment
 * @param netif the netif used to send the segment
 */
static err_t
tcp_output_segment(struct tcp_seg *seg, struct tcp_pcb *pcb, struct netif *netif)
{
 8015950:	b5b0      	push	{r4, r5, r7, lr}
 8015952:	b08c      	sub	sp, #48	; 0x30
 8015954:	af04      	add	r7, sp, #16
 8015956:	60f8      	str	r0, [r7, #12]
 8015958:	60b9      	str	r1, [r7, #8]
 801595a:	607a      	str	r2, [r7, #4]
  u32_t *opts;
#if TCP_CHECKSUM_ON_COPY
  int seg_chksum_was_swapped = 0;
#endif

  LWIP_ASSERT("tcp_output_segment: invalid seg", seg != NULL);
 801595c:	68fb      	ldr	r3, [r7, #12]
 801595e:	2b00      	cmp	r3, #0
 8015960:	d106      	bne.n	8015970 <tcp_output_segment+0x20>
 8015962:	4b64      	ldr	r3, [pc, #400]	; (8015af4 <tcp_output_segment+0x1a4>)
 8015964:	f44f 62b7 	mov.w	r2, #1464	; 0x5b8
 8015968:	4963      	ldr	r1, [pc, #396]	; (8015af8 <tcp_output_segment+0x1a8>)
 801596a:	4864      	ldr	r0, [pc, #400]	; (8015afc <tcp_output_segment+0x1ac>)
 801596c:	f004 f87c 	bl	8019a68 <iprintf>
  LWIP_ASSERT("tcp_output_segment: invalid pcb", pcb != NULL);
 8015970:	68bb      	ldr	r3, [r7, #8]
 8015972:	2b00      	cmp	r3, #0
 8015974:	d106      	bne.n	8015984 <tcp_output_segment+0x34>
 8015976:	4b5f      	ldr	r3, [pc, #380]	; (8015af4 <tcp_output_segment+0x1a4>)
 8015978:	f240 52b9 	movw	r2, #1465	; 0x5b9
 801597c:	4960      	ldr	r1, [pc, #384]	; (8015b00 <tcp_output_segment+0x1b0>)
 801597e:	485f      	ldr	r0, [pc, #380]	; (8015afc <tcp_output_segment+0x1ac>)
 8015980:	f004 f872 	bl	8019a68 <iprintf>
  LWIP_ASSERT("tcp_output_segment: invalid netif", netif != NULL);
 8015984:	687b      	ldr	r3, [r7, #4]
 8015986:	2b00      	cmp	r3, #0
 8015988:	d106      	bne.n	8015998 <tcp_output_segment+0x48>
 801598a:	4b5a      	ldr	r3, [pc, #360]	; (8015af4 <tcp_output_segment+0x1a4>)
 801598c:	f240 52ba 	movw	r2, #1466	; 0x5ba
 8015990:	495c      	ldr	r1, [pc, #368]	; (8015b04 <tcp_output_segment+0x1b4>)
 8015992:	485a      	ldr	r0, [pc, #360]	; (8015afc <tcp_output_segment+0x1ac>)
 8015994:	f004 f868 	bl	8019a68 <iprintf>

  if (tcp_output_segment_busy(seg)) {
 8015998:	68f8      	ldr	r0, [r7, #12]
 801599a:	f7ff ffb9 	bl	8015910 <tcp_output_segment_busy>
 801599e:	4603      	mov	r3, r0
 80159a0:	2b00      	cmp	r3, #0
 80159a2:	d001      	beq.n	80159a8 <tcp_output_segment+0x58>
    /* This should not happen: rexmit functions should have checked this.
       However, since this function modifies p->len, we must not continue in this case. */
    LWIP_DEBUGF(TCP_RTO_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("tcp_output_segment: segment busy\n"));
    return ERR_OK;
 80159a4:	2300      	movs	r3, #0
 80159a6:	e0a1      	b.n	8015aec <tcp_output_segment+0x19c>
  }

  /* The TCP header has already been constructed, but the ackno and
   wnd fields remain. */
  seg->tcphdr->ackno = lwip_htonl(pcb->rcv_nxt);
 80159a8:	68bb      	ldr	r3, [r7, #8]
 80159aa:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80159ac:	68fb      	ldr	r3, [r7, #12]
 80159ae:	68dc      	ldr	r4, [r3, #12]
 80159b0:	4610      	mov	r0, r2
 80159b2:	f7f9 fd52 	bl	800f45a <lwip_htonl>
 80159b6:	4603      	mov	r3, r0
 80159b8:	60a3      	str	r3, [r4, #8]
       the window scale option) is never scaled. */
    seg->tcphdr->wnd = lwip_htons(TCPWND_MIN16(pcb->rcv_ann_wnd));
  } else
#endif /* LWIP_WND_SCALE */
  {
    seg->tcphdr->wnd = lwip_htons(TCPWND_MIN16(RCV_WND_SCALE(pcb, pcb->rcv_ann_wnd)));
 80159ba:	68bb      	ldr	r3, [r7, #8]
 80159bc:	8d5a      	ldrh	r2, [r3, #42]	; 0x2a
 80159be:	68fb      	ldr	r3, [r7, #12]
 80159c0:	68dc      	ldr	r4, [r3, #12]
 80159c2:	4610      	mov	r0, r2
 80159c4:	f7f9 fd34 	bl	800f430 <lwip_htons>
 80159c8:	4603      	mov	r3, r0
 80159ca:	81e3      	strh	r3, [r4, #14]
  }

  pcb->rcv_ann_right_edge = pcb->rcv_nxt + pcb->rcv_ann_wnd;
 80159cc:	68bb      	ldr	r3, [r7, #8]
 80159ce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80159d0:	68ba      	ldr	r2, [r7, #8]
 80159d2:	8d52      	ldrh	r2, [r2, #42]	; 0x2a
 80159d4:	441a      	add	r2, r3
 80159d6:	68bb      	ldr	r3, [r7, #8]
 80159d8:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Add any requested options.  NB MSS option is only set on SYN
     packets, so ignore it here */
  /* cast through void* to get rid of alignment warnings */
  opts = (u32_t *)(void *)(seg->tcphdr + 1);
 80159da:	68fb      	ldr	r3, [r7, #12]
 80159dc:	68db      	ldr	r3, [r3, #12]
 80159de:	3314      	adds	r3, #20
 80159e0:	61fb      	str	r3, [r7, #28]
  if (seg->flags & TF_SEG_OPTS_MSS) {
 80159e2:	68fb      	ldr	r3, [r7, #12]
 80159e4:	7a9b      	ldrb	r3, [r3, #10]
 80159e6:	f003 0301 	and.w	r3, r3, #1
 80159ea:	2b00      	cmp	r3, #0
 80159ec:	d015      	beq.n	8015a1a <tcp_output_segment+0xca>
    u16_t mss;
#if TCP_CALCULATE_EFF_SEND_MSS
    mss = tcp_eff_send_mss_netif(TCP_MSS, netif, &pcb->remote_ip);
 80159ee:	68bb      	ldr	r3, [r7, #8]
 80159f0:	3304      	adds	r3, #4
 80159f2:	461a      	mov	r2, r3
 80159f4:	6879      	ldr	r1, [r7, #4]
 80159f6:	f240 50b4 	movw	r0, #1460	; 0x5b4
 80159fa:	f7fc fe8b 	bl	8012714 <tcp_eff_send_mss_netif>
 80159fe:	4603      	mov	r3, r0
 8015a00:	837b      	strh	r3, [r7, #26]
#else /* TCP_CALCULATE_EFF_SEND_MSS */
    mss = TCP_MSS;
#endif /* TCP_CALCULATE_EFF_SEND_MSS */
    *opts = TCP_BUILD_MSS_OPTION(mss);
 8015a02:	8b7b      	ldrh	r3, [r7, #26]
 8015a04:	f043 7301 	orr.w	r3, r3, #33816576	; 0x2040000
 8015a08:	4618      	mov	r0, r3
 8015a0a:	f7f9 fd26 	bl	800f45a <lwip_htonl>
 8015a0e:	4602      	mov	r2, r0
 8015a10:	69fb      	ldr	r3, [r7, #28]
 8015a12:	601a      	str	r2, [r3, #0]
    opts += 1;
 8015a14:	69fb      	ldr	r3, [r7, #28]
 8015a16:	3304      	adds	r3, #4
 8015a18:	61fb      	str	r3, [r7, #28]
  }
#endif

  /* Set retransmission timer running if it is not currently enabled
     This must be set before checking the route. */
  if (pcb->rtime < 0) {
 8015a1a:	68bb      	ldr	r3, [r7, #8]
 8015a1c:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	; 0x30
 8015a20:	2b00      	cmp	r3, #0
 8015a22:	da02      	bge.n	8015a2a <tcp_output_segment+0xda>
    pcb->rtime = 0;
 8015a24:	68bb      	ldr	r3, [r7, #8]
 8015a26:	2200      	movs	r2, #0
 8015a28:	861a      	strh	r2, [r3, #48]	; 0x30
  }

  if (pcb->rttest == 0) {
 8015a2a:	68bb      	ldr	r3, [r7, #8]
 8015a2c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8015a2e:	2b00      	cmp	r3, #0
 8015a30:	d10c      	bne.n	8015a4c <tcp_output_segment+0xfc>
    pcb->rttest = tcp_ticks;
 8015a32:	4b35      	ldr	r3, [pc, #212]	; (8015b08 <tcp_output_segment+0x1b8>)
 8015a34:	681a      	ldr	r2, [r3, #0]
 8015a36:	68bb      	ldr	r3, [r7, #8]
 8015a38:	635a      	str	r2, [r3, #52]	; 0x34
    pcb->rtseq = lwip_ntohl(seg->tcphdr->seqno);
 8015a3a:	68fb      	ldr	r3, [r7, #12]
 8015a3c:	68db      	ldr	r3, [r3, #12]
 8015a3e:	685b      	ldr	r3, [r3, #4]
 8015a40:	4618      	mov	r0, r3
 8015a42:	f7f9 fd0a 	bl	800f45a <lwip_htonl>
 8015a46:	4602      	mov	r2, r0
 8015a48:	68bb      	ldr	r3, [r7, #8]
 8015a4a:	639a      	str	r2, [r3, #56]	; 0x38
  }
  LWIP_DEBUGF(TCP_OUTPUT_DEBUG, ("tcp_output_segment: %"U32_F":%"U32_F"\n",
                                 lwip_htonl(seg->tcphdr->seqno), lwip_htonl(seg->tcphdr->seqno) +
                                 seg->len));

  len = (u16_t)((u8_t *)seg->tcphdr - (u8_t *)seg->p->payload);
 8015a4c:	68fb      	ldr	r3, [r7, #12]
 8015a4e:	68da      	ldr	r2, [r3, #12]
 8015a50:	68fb      	ldr	r3, [r7, #12]
 8015a52:	685b      	ldr	r3, [r3, #4]
 8015a54:	685b      	ldr	r3, [r3, #4]
 8015a56:	1ad3      	subs	r3, r2, r3
 8015a58:	833b      	strh	r3, [r7, #24]
  if (len == 0) {
    /** Exclude retransmitted segments from this count. */
    MIB2_STATS_INC(mib2.tcpoutsegs);
  }

  seg->p->len -= len;
 8015a5a:	68fb      	ldr	r3, [r7, #12]
 8015a5c:	685b      	ldr	r3, [r3, #4]
 8015a5e:	8959      	ldrh	r1, [r3, #10]
 8015a60:	68fb      	ldr	r3, [r7, #12]
 8015a62:	685b      	ldr	r3, [r3, #4]
 8015a64:	8b3a      	ldrh	r2, [r7, #24]
 8015a66:	1a8a      	subs	r2, r1, r2
 8015a68:	b292      	uxth	r2, r2
 8015a6a:	815a      	strh	r2, [r3, #10]
  seg->p->tot_len -= len;
 8015a6c:	68fb      	ldr	r3, [r7, #12]
 8015a6e:	685b      	ldr	r3, [r3, #4]
 8015a70:	8919      	ldrh	r1, [r3, #8]
 8015a72:	68fb      	ldr	r3, [r7, #12]
 8015a74:	685b      	ldr	r3, [r3, #4]
 8015a76:	8b3a      	ldrh	r2, [r7, #24]
 8015a78:	1a8a      	subs	r2, r1, r2
 8015a7a:	b292      	uxth	r2, r2
 8015a7c:	811a      	strh	r2, [r3, #8]

  seg->p->payload = seg->tcphdr;
 8015a7e:	68fb      	ldr	r3, [r7, #12]
 8015a80:	685b      	ldr	r3, [r3, #4]
 8015a82:	68fa      	ldr	r2, [r7, #12]
 8015a84:	68d2      	ldr	r2, [r2, #12]
 8015a86:	605a      	str	r2, [r3, #4]

  seg->tcphdr->chksum = 0;
 8015a88:	68fb      	ldr	r3, [r7, #12]
 8015a8a:	68db      	ldr	r3, [r3, #12]
 8015a8c:	2200      	movs	r2, #0
 8015a8e:	741a      	strb	r2, [r3, #16]
 8015a90:	2200      	movs	r2, #0
 8015a92:	745a      	strb	r2, [r3, #17]

#ifdef LWIP_HOOK_TCP_OUT_ADD_TCPOPTS
  opts = LWIP_HOOK_TCP_OUT_ADD_TCPOPTS(seg->p, seg->tcphdr, pcb, opts);
#endif
  LWIP_ASSERT("options not filled", (u8_t *)opts == ((u8_t *)(seg->tcphdr + 1)) + LWIP_TCP_OPT_LENGTH_SEGMENT(seg->flags, pcb));
 8015a94:	68fb      	ldr	r3, [r7, #12]
 8015a96:	68da      	ldr	r2, [r3, #12]
 8015a98:	68fb      	ldr	r3, [r7, #12]
 8015a9a:	7a9b      	ldrb	r3, [r3, #10]
 8015a9c:	f003 0301 	and.w	r3, r3, #1
 8015aa0:	2b00      	cmp	r3, #0
 8015aa2:	d001      	beq.n	8015aa8 <tcp_output_segment+0x158>
 8015aa4:	2318      	movs	r3, #24
 8015aa6:	e000      	b.n	8015aaa <tcp_output_segment+0x15a>
 8015aa8:	2314      	movs	r3, #20
 8015aaa:	4413      	add	r3, r2
 8015aac:	69fa      	ldr	r2, [r7, #28]
 8015aae:	429a      	cmp	r2, r3
 8015ab0:	d006      	beq.n	8015ac0 <tcp_output_segment+0x170>
 8015ab2:	4b10      	ldr	r3, [pc, #64]	; (8015af4 <tcp_output_segment+0x1a4>)
 8015ab4:	f240 621c 	movw	r2, #1564	; 0x61c
 8015ab8:	4914      	ldr	r1, [pc, #80]	; (8015b0c <tcp_output_segment+0x1bc>)
 8015aba:	4810      	ldr	r0, [pc, #64]	; (8015afc <tcp_output_segment+0x1ac>)
 8015abc:	f003 ffd4 	bl	8019a68 <iprintf>
  }
#endif /* CHECKSUM_GEN_TCP */
  TCP_STATS_INC(tcp.xmit);

  NETIF_SET_HINTS(netif, &(pcb->netif_hints));
  err = ip_output_if(seg->p, &pcb->local_ip, &pcb->remote_ip, pcb->ttl,
 8015ac0:	68fb      	ldr	r3, [r7, #12]
 8015ac2:	6858      	ldr	r0, [r3, #4]
 8015ac4:	68b9      	ldr	r1, [r7, #8]
 8015ac6:	68bb      	ldr	r3, [r7, #8]
 8015ac8:	1d1c      	adds	r4, r3, #4
 8015aca:	68bb      	ldr	r3, [r7, #8]
 8015acc:	7add      	ldrb	r5, [r3, #11]
 8015ace:	68bb      	ldr	r3, [r7, #8]
 8015ad0:	7a9b      	ldrb	r3, [r3, #10]
 8015ad2:	687a      	ldr	r2, [r7, #4]
 8015ad4:	9202      	str	r2, [sp, #8]
 8015ad6:	2206      	movs	r2, #6
 8015ad8:	9201      	str	r2, [sp, #4]
 8015ada:	9300      	str	r3, [sp, #0]
 8015adc:	462b      	mov	r3, r5
 8015ade:	4622      	mov	r2, r4
 8015ae0:	f002 fa5a 	bl	8017f98 <ip4_output_if>
 8015ae4:	4603      	mov	r3, r0
 8015ae6:	75fb      	strb	r3, [r7, #23]
    seg->chksum = SWAP_BYTES_IN_WORD(seg->chksum);
    seg->chksum_swapped = 1;
  }
#endif

  return err;
 8015ae8:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8015aec:	4618      	mov	r0, r3
 8015aee:	3720      	adds	r7, #32
 8015af0:	46bd      	mov	sp, r7
 8015af2:	bdb0      	pop	{r4, r5, r7, pc}
 8015af4:	0801d89c 	.word	0x0801d89c
 8015af8:	0801de60 	.word	0x0801de60
 8015afc:	0801d8f0 	.word	0x0801d8f0
 8015b00:	0801de80 	.word	0x0801de80
 8015b04:	0801dea0 	.word	0x0801dea0
 8015b08:	20007044 	.word	0x20007044
 8015b0c:	0801dec4 	.word	0x0801dec4

08015b10 <tcp_rexmit_rto_prepare>:
 *
 * @param pcb the tcp_pcb for which to re-enqueue all unacked segments
 */
err_t
tcp_rexmit_rto_prepare(struct tcp_pcb *pcb)
{
 8015b10:	b5b0      	push	{r4, r5, r7, lr}
 8015b12:	b084      	sub	sp, #16
 8015b14:	af00      	add	r7, sp, #0
 8015b16:	6078      	str	r0, [r7, #4]
  struct tcp_seg *seg;

  LWIP_ASSERT("tcp_rexmit_rto_prepare: invalid pcb", pcb != NULL);
 8015b18:	687b      	ldr	r3, [r7, #4]
 8015b1a:	2b00      	cmp	r3, #0
 8015b1c:	d106      	bne.n	8015b2c <tcp_rexmit_rto_prepare+0x1c>
 8015b1e:	4b31      	ldr	r3, [pc, #196]	; (8015be4 <tcp_rexmit_rto_prepare+0xd4>)
 8015b20:	f240 6263 	movw	r2, #1635	; 0x663
 8015b24:	4930      	ldr	r1, [pc, #192]	; (8015be8 <tcp_rexmit_rto_prepare+0xd8>)
 8015b26:	4831      	ldr	r0, [pc, #196]	; (8015bec <tcp_rexmit_rto_prepare+0xdc>)
 8015b28:	f003 ff9e 	bl	8019a68 <iprintf>

  if (pcb->unacked == NULL) {
 8015b2c:	687b      	ldr	r3, [r7, #4]
 8015b2e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8015b30:	2b00      	cmp	r3, #0
 8015b32:	d102      	bne.n	8015b3a <tcp_rexmit_rto_prepare+0x2a>
    return ERR_VAL;
 8015b34:	f06f 0305 	mvn.w	r3, #5
 8015b38:	e050      	b.n	8015bdc <tcp_rexmit_rto_prepare+0xcc>

  /* Move all unacked segments to the head of the unsent queue.
     However, give up if any of the unsent pbufs are still referenced by the
     netif driver due to deferred transmission. No point loading the link further
     if it is struggling to flush its buffered writes. */
  for (seg = pcb->unacked; seg->next != NULL; seg = seg->next) {
 8015b3a:	687b      	ldr	r3, [r7, #4]
 8015b3c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8015b3e:	60fb      	str	r3, [r7, #12]
 8015b40:	e00b      	b.n	8015b5a <tcp_rexmit_rto_prepare+0x4a>
    if (tcp_output_segment_busy(seg)) {
 8015b42:	68f8      	ldr	r0, [r7, #12]
 8015b44:	f7ff fee4 	bl	8015910 <tcp_output_segment_busy>
 8015b48:	4603      	mov	r3, r0
 8015b4a:	2b00      	cmp	r3, #0
 8015b4c:	d002      	beq.n	8015b54 <tcp_rexmit_rto_prepare+0x44>
      LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_rexmit_rto: segment busy\n"));
      return ERR_VAL;
 8015b4e:	f06f 0305 	mvn.w	r3, #5
 8015b52:	e043      	b.n	8015bdc <tcp_rexmit_rto_prepare+0xcc>
  for (seg = pcb->unacked; seg->next != NULL; seg = seg->next) {
 8015b54:	68fb      	ldr	r3, [r7, #12]
 8015b56:	681b      	ldr	r3, [r3, #0]
 8015b58:	60fb      	str	r3, [r7, #12]
 8015b5a:	68fb      	ldr	r3, [r7, #12]
 8015b5c:	681b      	ldr	r3, [r3, #0]
 8015b5e:	2b00      	cmp	r3, #0
 8015b60:	d1ef      	bne.n	8015b42 <tcp_rexmit_rto_prepare+0x32>
    }
  }
  if (tcp_output_segment_busy(seg)) {
 8015b62:	68f8      	ldr	r0, [r7, #12]
 8015b64:	f7ff fed4 	bl	8015910 <tcp_output_segment_busy>
 8015b68:	4603      	mov	r3, r0
 8015b6a:	2b00      	cmp	r3, #0
 8015b6c:	d002      	beq.n	8015b74 <tcp_rexmit_rto_prepare+0x64>
    LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_rexmit_rto: segment busy\n"));
    return ERR_VAL;
 8015b6e:	f06f 0305 	mvn.w	r3, #5
 8015b72:	e033      	b.n	8015bdc <tcp_rexmit_rto_prepare+0xcc>
  }
  /* concatenate unsent queue after unacked queue */
  seg->next = pcb->unsent;
 8015b74:	687b      	ldr	r3, [r7, #4]
 8015b76:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 8015b78:	68fb      	ldr	r3, [r7, #12]
 8015b7a:	601a      	str	r2, [r3, #0]
  if (pcb->unsent == NULL) {
    pcb->unsent_oversize = seg->oversize_left;
  }
#endif /* TCP_OVERSIZE_DBGCHECK */
  /* unsent queue is the concatenated queue (of unacked, unsent) */
  pcb->unsent = pcb->unacked;
 8015b7c:	687b      	ldr	r3, [r7, #4]
 8015b7e:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8015b80:	687b      	ldr	r3, [r7, #4]
 8015b82:	66da      	str	r2, [r3, #108]	; 0x6c
  /* unacked queue is now empty */
  pcb->unacked = NULL;
 8015b84:	687b      	ldr	r3, [r7, #4]
 8015b86:	2200      	movs	r2, #0
 8015b88:	671a      	str	r2, [r3, #112]	; 0x70

  /* Mark RTO in-progress */
  tcp_set_flags(pcb, TF_RTO);
 8015b8a:	687b      	ldr	r3, [r7, #4]
 8015b8c:	8b5b      	ldrh	r3, [r3, #26]
 8015b8e:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8015b92:	b29a      	uxth	r2, r3
 8015b94:	687b      	ldr	r3, [r7, #4]
 8015b96:	835a      	strh	r2, [r3, #26]
  /* Record the next byte following retransmit */
  pcb->rto_end = lwip_ntohl(seg->tcphdr->seqno) + TCP_TCPLEN(seg);
 8015b98:	68fb      	ldr	r3, [r7, #12]
 8015b9a:	68db      	ldr	r3, [r3, #12]
 8015b9c:	685b      	ldr	r3, [r3, #4]
 8015b9e:	4618      	mov	r0, r3
 8015ba0:	f7f9 fc5b 	bl	800f45a <lwip_htonl>
 8015ba4:	4604      	mov	r4, r0
 8015ba6:	68fb      	ldr	r3, [r7, #12]
 8015ba8:	891b      	ldrh	r3, [r3, #8]
 8015baa:	461d      	mov	r5, r3
 8015bac:	68fb      	ldr	r3, [r7, #12]
 8015bae:	68db      	ldr	r3, [r3, #12]
 8015bb0:	899b      	ldrh	r3, [r3, #12]
 8015bb2:	b29b      	uxth	r3, r3
 8015bb4:	4618      	mov	r0, r3
 8015bb6:	f7f9 fc3b 	bl	800f430 <lwip_htons>
 8015bba:	4603      	mov	r3, r0
 8015bbc:	b2db      	uxtb	r3, r3
 8015bbe:	f003 0303 	and.w	r3, r3, #3
 8015bc2:	2b00      	cmp	r3, #0
 8015bc4:	d001      	beq.n	8015bca <tcp_rexmit_rto_prepare+0xba>
 8015bc6:	2301      	movs	r3, #1
 8015bc8:	e000      	b.n	8015bcc <tcp_rexmit_rto_prepare+0xbc>
 8015bca:	2300      	movs	r3, #0
 8015bcc:	442b      	add	r3, r5
 8015bce:	18e2      	adds	r2, r4, r3
 8015bd0:	687b      	ldr	r3, [r7, #4]
 8015bd2:	64da      	str	r2, [r3, #76]	; 0x4c
  /* Don't take any RTT measurements after retransmitting. */
  pcb->rttest = 0;
 8015bd4:	687b      	ldr	r3, [r7, #4]
 8015bd6:	2200      	movs	r2, #0
 8015bd8:	635a      	str	r2, [r3, #52]	; 0x34

  return ERR_OK;
 8015bda:	2300      	movs	r3, #0
}
 8015bdc:	4618      	mov	r0, r3
 8015bde:	3710      	adds	r7, #16
 8015be0:	46bd      	mov	sp, r7
 8015be2:	bdb0      	pop	{r4, r5, r7, pc}
 8015be4:	0801d89c 	.word	0x0801d89c
 8015be8:	0801ded8 	.word	0x0801ded8
 8015bec:	0801d8f0 	.word	0x0801d8f0

08015bf0 <tcp_rexmit_rto_commit>:
 *
 * @param pcb the tcp_pcb for which to re-enqueue all unacked segments
 */
void
tcp_rexmit_rto_commit(struct tcp_pcb *pcb)
{
 8015bf0:	b580      	push	{r7, lr}
 8015bf2:	b082      	sub	sp, #8
 8015bf4:	af00      	add	r7, sp, #0
 8015bf6:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_rexmit_rto_commit: invalid pcb", pcb != NULL);
 8015bf8:	687b      	ldr	r3, [r7, #4]
 8015bfa:	2b00      	cmp	r3, #0
 8015bfc:	d106      	bne.n	8015c0c <tcp_rexmit_rto_commit+0x1c>
 8015bfe:	4b0d      	ldr	r3, [pc, #52]	; (8015c34 <tcp_rexmit_rto_commit+0x44>)
 8015c00:	f44f 62d3 	mov.w	r2, #1688	; 0x698
 8015c04:	490c      	ldr	r1, [pc, #48]	; (8015c38 <tcp_rexmit_rto_commit+0x48>)
 8015c06:	480d      	ldr	r0, [pc, #52]	; (8015c3c <tcp_rexmit_rto_commit+0x4c>)
 8015c08:	f003 ff2e 	bl	8019a68 <iprintf>

  /* increment number of retransmissions */
  if (pcb->nrtx < 0xFF) {
 8015c0c:	687b      	ldr	r3, [r7, #4]
 8015c0e:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8015c12:	2bff      	cmp	r3, #255	; 0xff
 8015c14:	d007      	beq.n	8015c26 <tcp_rexmit_rto_commit+0x36>
    ++pcb->nrtx;
 8015c16:	687b      	ldr	r3, [r7, #4]
 8015c18:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8015c1c:	3301      	adds	r3, #1
 8015c1e:	b2da      	uxtb	r2, r3
 8015c20:	687b      	ldr	r3, [r7, #4]
 8015c22:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  }
  /* Do the actual retransmission */
  tcp_output(pcb);
 8015c26:	6878      	ldr	r0, [r7, #4]
 8015c28:	f7ff fc7e 	bl	8015528 <tcp_output>
}
 8015c2c:	bf00      	nop
 8015c2e:	3708      	adds	r7, #8
 8015c30:	46bd      	mov	sp, r7
 8015c32:	bd80      	pop	{r7, pc}
 8015c34:	0801d89c 	.word	0x0801d89c
 8015c38:	0801defc 	.word	0x0801defc
 8015c3c:	0801d8f0 	.word	0x0801d8f0

08015c40 <tcp_rexmit_rto>:
 *
 * @param pcb the tcp_pcb for which to re-enqueue all unacked segments
 */
void
tcp_rexmit_rto(struct tcp_pcb *pcb)
{
 8015c40:	b580      	push	{r7, lr}
 8015c42:	b082      	sub	sp, #8
 8015c44:	af00      	add	r7, sp, #0
 8015c46:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_rexmit_rto: invalid pcb", pcb != NULL);
 8015c48:	687b      	ldr	r3, [r7, #4]
 8015c4a:	2b00      	cmp	r3, #0
 8015c4c:	d106      	bne.n	8015c5c <tcp_rexmit_rto+0x1c>
 8015c4e:	4b0a      	ldr	r3, [pc, #40]	; (8015c78 <tcp_rexmit_rto+0x38>)
 8015c50:	f240 62ad 	movw	r2, #1709	; 0x6ad
 8015c54:	4909      	ldr	r1, [pc, #36]	; (8015c7c <tcp_rexmit_rto+0x3c>)
 8015c56:	480a      	ldr	r0, [pc, #40]	; (8015c80 <tcp_rexmit_rto+0x40>)
 8015c58:	f003 ff06 	bl	8019a68 <iprintf>

  if (tcp_rexmit_rto_prepare(pcb) == ERR_OK) {
 8015c5c:	6878      	ldr	r0, [r7, #4]
 8015c5e:	f7ff ff57 	bl	8015b10 <tcp_rexmit_rto_prepare>
 8015c62:	4603      	mov	r3, r0
 8015c64:	2b00      	cmp	r3, #0
 8015c66:	d102      	bne.n	8015c6e <tcp_rexmit_rto+0x2e>
    tcp_rexmit_rto_commit(pcb);
 8015c68:	6878      	ldr	r0, [r7, #4]
 8015c6a:	f7ff ffc1 	bl	8015bf0 <tcp_rexmit_rto_commit>
  }
}
 8015c6e:	bf00      	nop
 8015c70:	3708      	adds	r7, #8
 8015c72:	46bd      	mov	sp, r7
 8015c74:	bd80      	pop	{r7, pc}
 8015c76:	bf00      	nop
 8015c78:	0801d89c 	.word	0x0801d89c
 8015c7c:	0801df20 	.word	0x0801df20
 8015c80:	0801d8f0 	.word	0x0801d8f0

08015c84 <tcp_rexmit>:
 *
 * @param pcb the tcp_pcb for which to retransmit the first unacked segment
 */
err_t
tcp_rexmit(struct tcp_pcb *pcb)
{
 8015c84:	b590      	push	{r4, r7, lr}
 8015c86:	b085      	sub	sp, #20
 8015c88:	af00      	add	r7, sp, #0
 8015c8a:	6078      	str	r0, [r7, #4]
  struct tcp_seg *seg;
  struct tcp_seg **cur_seg;

  LWIP_ASSERT("tcp_rexmit: invalid pcb", pcb != NULL);
 8015c8c:	687b      	ldr	r3, [r7, #4]
 8015c8e:	2b00      	cmp	r3, #0
 8015c90:	d106      	bne.n	8015ca0 <tcp_rexmit+0x1c>
 8015c92:	4b2f      	ldr	r3, [pc, #188]	; (8015d50 <tcp_rexmit+0xcc>)
 8015c94:	f240 62c1 	movw	r2, #1729	; 0x6c1
 8015c98:	492e      	ldr	r1, [pc, #184]	; (8015d54 <tcp_rexmit+0xd0>)
 8015c9a:	482f      	ldr	r0, [pc, #188]	; (8015d58 <tcp_rexmit+0xd4>)
 8015c9c:	f003 fee4 	bl	8019a68 <iprintf>

  if (pcb->unacked == NULL) {
 8015ca0:	687b      	ldr	r3, [r7, #4]
 8015ca2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8015ca4:	2b00      	cmp	r3, #0
 8015ca6:	d102      	bne.n	8015cae <tcp_rexmit+0x2a>
    return ERR_VAL;
 8015ca8:	f06f 0305 	mvn.w	r3, #5
 8015cac:	e04c      	b.n	8015d48 <tcp_rexmit+0xc4>
  }

  seg = pcb->unacked;
 8015cae:	687b      	ldr	r3, [r7, #4]
 8015cb0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8015cb2:	60bb      	str	r3, [r7, #8]

  /* Give up if the segment is still referenced by the netif driver
     due to deferred transmission. */
  if (tcp_output_segment_busy(seg)) {
 8015cb4:	68b8      	ldr	r0, [r7, #8]
 8015cb6:	f7ff fe2b 	bl	8015910 <tcp_output_segment_busy>
 8015cba:	4603      	mov	r3, r0
 8015cbc:	2b00      	cmp	r3, #0
 8015cbe:	d002      	beq.n	8015cc6 <tcp_rexmit+0x42>
    LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_rexmit busy\n"));
    return ERR_VAL;
 8015cc0:	f06f 0305 	mvn.w	r3, #5
 8015cc4:	e040      	b.n	8015d48 <tcp_rexmit+0xc4>
  }

  /* Move the first unacked segment to the unsent queue */
  /* Keep the unsent queue sorted. */
  pcb->unacked = seg->next;
 8015cc6:	68bb      	ldr	r3, [r7, #8]
 8015cc8:	681a      	ldr	r2, [r3, #0]
 8015cca:	687b      	ldr	r3, [r7, #4]
 8015ccc:	671a      	str	r2, [r3, #112]	; 0x70

  cur_seg = &(pcb->unsent);
 8015cce:	687b      	ldr	r3, [r7, #4]
 8015cd0:	336c      	adds	r3, #108	; 0x6c
 8015cd2:	60fb      	str	r3, [r7, #12]
  while (*cur_seg &&
 8015cd4:	e002      	b.n	8015cdc <tcp_rexmit+0x58>
         TCP_SEQ_LT(lwip_ntohl((*cur_seg)->tcphdr->seqno), lwip_ntohl(seg->tcphdr->seqno))) {
    cur_seg = &((*cur_seg)->next );
 8015cd6:	68fb      	ldr	r3, [r7, #12]
 8015cd8:	681b      	ldr	r3, [r3, #0]
 8015cda:	60fb      	str	r3, [r7, #12]
  while (*cur_seg &&
 8015cdc:	68fb      	ldr	r3, [r7, #12]
 8015cde:	681b      	ldr	r3, [r3, #0]
 8015ce0:	2b00      	cmp	r3, #0
 8015ce2:	d011      	beq.n	8015d08 <tcp_rexmit+0x84>
         TCP_SEQ_LT(lwip_ntohl((*cur_seg)->tcphdr->seqno), lwip_ntohl(seg->tcphdr->seqno))) {
 8015ce4:	68fb      	ldr	r3, [r7, #12]
 8015ce6:	681b      	ldr	r3, [r3, #0]
 8015ce8:	68db      	ldr	r3, [r3, #12]
 8015cea:	685b      	ldr	r3, [r3, #4]
 8015cec:	4618      	mov	r0, r3
 8015cee:	f7f9 fbb4 	bl	800f45a <lwip_htonl>
 8015cf2:	4604      	mov	r4, r0
 8015cf4:	68bb      	ldr	r3, [r7, #8]
 8015cf6:	68db      	ldr	r3, [r3, #12]
 8015cf8:	685b      	ldr	r3, [r3, #4]
 8015cfa:	4618      	mov	r0, r3
 8015cfc:	f7f9 fbad 	bl	800f45a <lwip_htonl>
 8015d00:	4603      	mov	r3, r0
 8015d02:	1ae3      	subs	r3, r4, r3
  while (*cur_seg &&
 8015d04:	2b00      	cmp	r3, #0
 8015d06:	dbe6      	blt.n	8015cd6 <tcp_rexmit+0x52>
  }
  seg->next = *cur_seg;
 8015d08:	68fb      	ldr	r3, [r7, #12]
 8015d0a:	681a      	ldr	r2, [r3, #0]
 8015d0c:	68bb      	ldr	r3, [r7, #8]
 8015d0e:	601a      	str	r2, [r3, #0]
  *cur_seg = seg;
 8015d10:	68fb      	ldr	r3, [r7, #12]
 8015d12:	68ba      	ldr	r2, [r7, #8]
 8015d14:	601a      	str	r2, [r3, #0]
#if TCP_OVERSIZE
  if (seg->next == NULL) {
 8015d16:	68bb      	ldr	r3, [r7, #8]
 8015d18:	681b      	ldr	r3, [r3, #0]
 8015d1a:	2b00      	cmp	r3, #0
 8015d1c:	d103      	bne.n	8015d26 <tcp_rexmit+0xa2>
    /* the retransmitted segment is last in unsent, so reset unsent_oversize */
    pcb->unsent_oversize = 0;
 8015d1e:	687b      	ldr	r3, [r7, #4]
 8015d20:	2200      	movs	r2, #0
 8015d22:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
  }
#endif /* TCP_OVERSIZE */

  if (pcb->nrtx < 0xFF) {
 8015d26:	687b      	ldr	r3, [r7, #4]
 8015d28:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8015d2c:	2bff      	cmp	r3, #255	; 0xff
 8015d2e:	d007      	beq.n	8015d40 <tcp_rexmit+0xbc>
    ++pcb->nrtx;
 8015d30:	687b      	ldr	r3, [r7, #4]
 8015d32:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8015d36:	3301      	adds	r3, #1
 8015d38:	b2da      	uxtb	r2, r3
 8015d3a:	687b      	ldr	r3, [r7, #4]
 8015d3c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  }

  /* Don't take any rtt measurements after retransmitting. */
  pcb->rttest = 0;
 8015d40:	687b      	ldr	r3, [r7, #4]
 8015d42:	2200      	movs	r2, #0
 8015d44:	635a      	str	r2, [r3, #52]	; 0x34

  /* Do the actual retransmission. */
  MIB2_STATS_INC(mib2.tcpretranssegs);
  /* No need to call tcp_output: we are always called from tcp_input()
     and thus tcp_output directly returns. */
  return ERR_OK;
 8015d46:	2300      	movs	r3, #0
}
 8015d48:	4618      	mov	r0, r3
 8015d4a:	3714      	adds	r7, #20
 8015d4c:	46bd      	mov	sp, r7
 8015d4e:	bd90      	pop	{r4, r7, pc}
 8015d50:	0801d89c 	.word	0x0801d89c
 8015d54:	0801df3c 	.word	0x0801df3c
 8015d58:	0801d8f0 	.word	0x0801d8f0

08015d5c <tcp_rexmit_fast>:
 *
 * @param pcb the tcp_pcb for which to retransmit the first unacked segment
 */
void
tcp_rexmit_fast(struct tcp_pcb *pcb)
{
 8015d5c:	b580      	push	{r7, lr}
 8015d5e:	b082      	sub	sp, #8
 8015d60:	af00      	add	r7, sp, #0
 8015d62:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_rexmit_fast: invalid pcb", pcb != NULL);
 8015d64:	687b      	ldr	r3, [r7, #4]
 8015d66:	2b00      	cmp	r3, #0
 8015d68:	d106      	bne.n	8015d78 <tcp_rexmit_fast+0x1c>
 8015d6a:	4b2a      	ldr	r3, [pc, #168]	; (8015e14 <tcp_rexmit_fast+0xb8>)
 8015d6c:	f240 62f9 	movw	r2, #1785	; 0x6f9
 8015d70:	4929      	ldr	r1, [pc, #164]	; (8015e18 <tcp_rexmit_fast+0xbc>)
 8015d72:	482a      	ldr	r0, [pc, #168]	; (8015e1c <tcp_rexmit_fast+0xc0>)
 8015d74:	f003 fe78 	bl	8019a68 <iprintf>

  if (pcb->unacked != NULL && !(pcb->flags & TF_INFR)) {
 8015d78:	687b      	ldr	r3, [r7, #4]
 8015d7a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8015d7c:	2b00      	cmp	r3, #0
 8015d7e:	d045      	beq.n	8015e0c <tcp_rexmit_fast+0xb0>
 8015d80:	687b      	ldr	r3, [r7, #4]
 8015d82:	8b5b      	ldrh	r3, [r3, #26]
 8015d84:	f003 0304 	and.w	r3, r3, #4
 8015d88:	2b00      	cmp	r3, #0
 8015d8a:	d13f      	bne.n	8015e0c <tcp_rexmit_fast+0xb0>
    LWIP_DEBUGF(TCP_FR_DEBUG,
                ("tcp_receive: dupacks %"U16_F" (%"U32_F
                 "), fast retransmit %"U32_F"\n",
                 (u16_t)pcb->dupacks, pcb->lastack,
                 lwip_ntohl(pcb->unacked->tcphdr->seqno)));
    if (tcp_rexmit(pcb) == ERR_OK) {
 8015d8c:	6878      	ldr	r0, [r7, #4]
 8015d8e:	f7ff ff79 	bl	8015c84 <tcp_rexmit>
 8015d92:	4603      	mov	r3, r0
 8015d94:	2b00      	cmp	r3, #0
 8015d96:	d139      	bne.n	8015e0c <tcp_rexmit_fast+0xb0>
      /* Set ssthresh to half of the minimum of the current
       * cwnd and the advertised window */
      pcb->ssthresh = LWIP_MIN(pcb->cwnd, pcb->snd_wnd) / 2;
 8015d98:	687b      	ldr	r3, [r7, #4]
 8015d9a:	f8b3 2060 	ldrh.w	r2, [r3, #96]	; 0x60
 8015d9e:	687b      	ldr	r3, [r7, #4]
 8015da0:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 8015da4:	4293      	cmp	r3, r2
 8015da6:	bf28      	it	cs
 8015da8:	4613      	movcs	r3, r2
 8015daa:	b29b      	uxth	r3, r3
 8015dac:	2b00      	cmp	r3, #0
 8015dae:	da00      	bge.n	8015db2 <tcp_rexmit_fast+0x56>
 8015db0:	3301      	adds	r3, #1
 8015db2:	105b      	asrs	r3, r3, #1
 8015db4:	b29a      	uxth	r2, r3
 8015db6:	687b      	ldr	r3, [r7, #4]
 8015db8:	f8a3 204a 	strh.w	r2, [r3, #74]	; 0x4a

      /* The minimum value for ssthresh should be 2 MSS */
      if (pcb->ssthresh < (2U * pcb->mss)) {
 8015dbc:	687b      	ldr	r3, [r7, #4]
 8015dbe:	f8b3 304a 	ldrh.w	r3, [r3, #74]	; 0x4a
 8015dc2:	461a      	mov	r2, r3
 8015dc4:	687b      	ldr	r3, [r7, #4]
 8015dc6:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8015dc8:	005b      	lsls	r3, r3, #1
 8015dca:	429a      	cmp	r2, r3
 8015dcc:	d206      	bcs.n	8015ddc <tcp_rexmit_fast+0x80>
        LWIP_DEBUGF(TCP_FR_DEBUG,
                    ("tcp_receive: The minimum value for ssthresh %"TCPWNDSIZE_F
                     " should be min 2 mss %"U16_F"...\n",
                     pcb->ssthresh, (u16_t)(2 * pcb->mss)));
        pcb->ssthresh = 2 * pcb->mss;
 8015dce:	687b      	ldr	r3, [r7, #4]
 8015dd0:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8015dd2:	005b      	lsls	r3, r3, #1
 8015dd4:	b29a      	uxth	r2, r3
 8015dd6:	687b      	ldr	r3, [r7, #4]
 8015dd8:	f8a3 204a 	strh.w	r2, [r3, #74]	; 0x4a
      }

      pcb->cwnd = pcb->ssthresh + 3 * pcb->mss;
 8015ddc:	687b      	ldr	r3, [r7, #4]
 8015dde:	f8b3 204a 	ldrh.w	r2, [r3, #74]	; 0x4a
 8015de2:	687b      	ldr	r3, [r7, #4]
 8015de4:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8015de6:	4619      	mov	r1, r3
 8015de8:	0049      	lsls	r1, r1, #1
 8015dea:	440b      	add	r3, r1
 8015dec:	b29b      	uxth	r3, r3
 8015dee:	4413      	add	r3, r2
 8015df0:	b29a      	uxth	r2, r3
 8015df2:	687b      	ldr	r3, [r7, #4]
 8015df4:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
      tcp_set_flags(pcb, TF_INFR);
 8015df8:	687b      	ldr	r3, [r7, #4]
 8015dfa:	8b5b      	ldrh	r3, [r3, #26]
 8015dfc:	f043 0304 	orr.w	r3, r3, #4
 8015e00:	b29a      	uxth	r2, r3
 8015e02:	687b      	ldr	r3, [r7, #4]
 8015e04:	835a      	strh	r2, [r3, #26]

      /* Reset the retransmission timer to prevent immediate rto retransmissions */
      pcb->rtime = 0;
 8015e06:	687b      	ldr	r3, [r7, #4]
 8015e08:	2200      	movs	r2, #0
 8015e0a:	861a      	strh	r2, [r3, #48]	; 0x30
    }
  }
}
 8015e0c:	bf00      	nop
 8015e0e:	3708      	adds	r7, #8
 8015e10:	46bd      	mov	sp, r7
 8015e12:	bd80      	pop	{r7, pc}
 8015e14:	0801d89c 	.word	0x0801d89c
 8015e18:	0801df54 	.word	0x0801df54
 8015e1c:	0801d8f0 	.word	0x0801d8f0

08015e20 <tcp_output_alloc_header_common>:

static struct pbuf *
tcp_output_alloc_header_common(u32_t ackno, u16_t optlen, u16_t datalen,
                        u32_t seqno_be /* already in network byte order */,
                        u16_t src_port, u16_t dst_port, u8_t flags, u16_t wnd)
{
 8015e20:	b580      	push	{r7, lr}
 8015e22:	b086      	sub	sp, #24
 8015e24:	af00      	add	r7, sp, #0
 8015e26:	60f8      	str	r0, [r7, #12]
 8015e28:	607b      	str	r3, [r7, #4]
 8015e2a:	460b      	mov	r3, r1
 8015e2c:	817b      	strh	r3, [r7, #10]
 8015e2e:	4613      	mov	r3, r2
 8015e30:	813b      	strh	r3, [r7, #8]
  struct tcp_hdr *tcphdr;
  struct pbuf *p;

  p = pbuf_alloc(PBUF_IP, TCP_HLEN + optlen + datalen, PBUF_RAM);
 8015e32:	897a      	ldrh	r2, [r7, #10]
 8015e34:	893b      	ldrh	r3, [r7, #8]
 8015e36:	4413      	add	r3, r2
 8015e38:	b29b      	uxth	r3, r3
 8015e3a:	3314      	adds	r3, #20
 8015e3c:	b29b      	uxth	r3, r3
 8015e3e:	f44f 7220 	mov.w	r2, #640	; 0x280
 8015e42:	4619      	mov	r1, r3
 8015e44:	2022      	movs	r0, #34	; 0x22
 8015e46:	f7fa fc13 	bl	8010670 <pbuf_alloc>
 8015e4a:	6178      	str	r0, [r7, #20]
  if (p != NULL) {
 8015e4c:	697b      	ldr	r3, [r7, #20]
 8015e4e:	2b00      	cmp	r3, #0
 8015e50:	d04d      	beq.n	8015eee <tcp_output_alloc_header_common+0xce>
    LWIP_ASSERT("check that first pbuf can hold struct tcp_hdr",
 8015e52:	897b      	ldrh	r3, [r7, #10]
 8015e54:	3313      	adds	r3, #19
 8015e56:	697a      	ldr	r2, [r7, #20]
 8015e58:	8952      	ldrh	r2, [r2, #10]
 8015e5a:	4293      	cmp	r3, r2
 8015e5c:	db06      	blt.n	8015e6c <tcp_output_alloc_header_common+0x4c>
 8015e5e:	4b26      	ldr	r3, [pc, #152]	; (8015ef8 <tcp_output_alloc_header_common+0xd8>)
 8015e60:	f240 7223 	movw	r2, #1827	; 0x723
 8015e64:	4925      	ldr	r1, [pc, #148]	; (8015efc <tcp_output_alloc_header_common+0xdc>)
 8015e66:	4826      	ldr	r0, [pc, #152]	; (8015f00 <tcp_output_alloc_header_common+0xe0>)
 8015e68:	f003 fdfe 	bl	8019a68 <iprintf>
                (p->len >= TCP_HLEN + optlen));
    tcphdr = (struct tcp_hdr *)p->payload;
 8015e6c:	697b      	ldr	r3, [r7, #20]
 8015e6e:	685b      	ldr	r3, [r3, #4]
 8015e70:	613b      	str	r3, [r7, #16]
    tcphdr->src = lwip_htons(src_port);
 8015e72:	8c3b      	ldrh	r3, [r7, #32]
 8015e74:	4618      	mov	r0, r3
 8015e76:	f7f9 fadb 	bl	800f430 <lwip_htons>
 8015e7a:	4603      	mov	r3, r0
 8015e7c:	461a      	mov	r2, r3
 8015e7e:	693b      	ldr	r3, [r7, #16]
 8015e80:	801a      	strh	r2, [r3, #0]
    tcphdr->dest = lwip_htons(dst_port);
 8015e82:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8015e84:	4618      	mov	r0, r3
 8015e86:	f7f9 fad3 	bl	800f430 <lwip_htons>
 8015e8a:	4603      	mov	r3, r0
 8015e8c:	461a      	mov	r2, r3
 8015e8e:	693b      	ldr	r3, [r7, #16]
 8015e90:	805a      	strh	r2, [r3, #2]
    tcphdr->seqno = seqno_be;
 8015e92:	693b      	ldr	r3, [r7, #16]
 8015e94:	687a      	ldr	r2, [r7, #4]
 8015e96:	605a      	str	r2, [r3, #4]
    tcphdr->ackno = lwip_htonl(ackno);
 8015e98:	68f8      	ldr	r0, [r7, #12]
 8015e9a:	f7f9 fade 	bl	800f45a <lwip_htonl>
 8015e9e:	4602      	mov	r2, r0
 8015ea0:	693b      	ldr	r3, [r7, #16]
 8015ea2:	609a      	str	r2, [r3, #8]
    TCPH_HDRLEN_FLAGS_SET(tcphdr, (5 + optlen / 4), flags);
 8015ea4:	897b      	ldrh	r3, [r7, #10]
 8015ea6:	089b      	lsrs	r3, r3, #2
 8015ea8:	b29b      	uxth	r3, r3
 8015eaa:	3305      	adds	r3, #5
 8015eac:	b29b      	uxth	r3, r3
 8015eae:	031b      	lsls	r3, r3, #12
 8015eb0:	b29a      	uxth	r2, r3
 8015eb2:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8015eb6:	b29b      	uxth	r3, r3
 8015eb8:	4313      	orrs	r3, r2
 8015eba:	b29b      	uxth	r3, r3
 8015ebc:	4618      	mov	r0, r3
 8015ebe:	f7f9 fab7 	bl	800f430 <lwip_htons>
 8015ec2:	4603      	mov	r3, r0
 8015ec4:	461a      	mov	r2, r3
 8015ec6:	693b      	ldr	r3, [r7, #16]
 8015ec8:	819a      	strh	r2, [r3, #12]
    tcphdr->wnd = lwip_htons(wnd);
 8015eca:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 8015ecc:	4618      	mov	r0, r3
 8015ece:	f7f9 faaf 	bl	800f430 <lwip_htons>
 8015ed2:	4603      	mov	r3, r0
 8015ed4:	461a      	mov	r2, r3
 8015ed6:	693b      	ldr	r3, [r7, #16]
 8015ed8:	81da      	strh	r2, [r3, #14]
    tcphdr->chksum = 0;
 8015eda:	693b      	ldr	r3, [r7, #16]
 8015edc:	2200      	movs	r2, #0
 8015ede:	741a      	strb	r2, [r3, #16]
 8015ee0:	2200      	movs	r2, #0
 8015ee2:	745a      	strb	r2, [r3, #17]
    tcphdr->urgp = 0;
 8015ee4:	693b      	ldr	r3, [r7, #16]
 8015ee6:	2200      	movs	r2, #0
 8015ee8:	749a      	strb	r2, [r3, #18]
 8015eea:	2200      	movs	r2, #0
 8015eec:	74da      	strb	r2, [r3, #19]
  }
  return p;
 8015eee:	697b      	ldr	r3, [r7, #20]
}
 8015ef0:	4618      	mov	r0, r3
 8015ef2:	3718      	adds	r7, #24
 8015ef4:	46bd      	mov	sp, r7
 8015ef6:	bd80      	pop	{r7, pc}
 8015ef8:	0801d89c 	.word	0x0801d89c
 8015efc:	0801df74 	.word	0x0801df74
 8015f00:	0801d8f0 	.word	0x0801d8f0

08015f04 <tcp_output_alloc_header>:
 * @return pbuf with p->payload being the tcp_hdr
 */
static struct pbuf *
tcp_output_alloc_header(struct tcp_pcb *pcb, u16_t optlen, u16_t datalen,
                        u32_t seqno_be /* already in network byte order */)
{
 8015f04:	b5b0      	push	{r4, r5, r7, lr}
 8015f06:	b08a      	sub	sp, #40	; 0x28
 8015f08:	af04      	add	r7, sp, #16
 8015f0a:	60f8      	str	r0, [r7, #12]
 8015f0c:	607b      	str	r3, [r7, #4]
 8015f0e:	460b      	mov	r3, r1
 8015f10:	817b      	strh	r3, [r7, #10]
 8015f12:	4613      	mov	r3, r2
 8015f14:	813b      	strh	r3, [r7, #8]
  struct pbuf *p;

  LWIP_ASSERT("tcp_output_alloc_header: invalid pcb", pcb != NULL);
 8015f16:	68fb      	ldr	r3, [r7, #12]
 8015f18:	2b00      	cmp	r3, #0
 8015f1a:	d106      	bne.n	8015f2a <tcp_output_alloc_header+0x26>
 8015f1c:	4b15      	ldr	r3, [pc, #84]	; (8015f74 <tcp_output_alloc_header+0x70>)
 8015f1e:	f240 7242 	movw	r2, #1858	; 0x742
 8015f22:	4915      	ldr	r1, [pc, #84]	; (8015f78 <tcp_output_alloc_header+0x74>)
 8015f24:	4815      	ldr	r0, [pc, #84]	; (8015f7c <tcp_output_alloc_header+0x78>)
 8015f26:	f003 fd9f 	bl	8019a68 <iprintf>

  p = tcp_output_alloc_header_common(pcb->rcv_nxt, optlen, datalen,
 8015f2a:	68fb      	ldr	r3, [r7, #12]
 8015f2c:	6a58      	ldr	r0, [r3, #36]	; 0x24
 8015f2e:	68fb      	ldr	r3, [r7, #12]
 8015f30:	8adb      	ldrh	r3, [r3, #22]
 8015f32:	68fa      	ldr	r2, [r7, #12]
 8015f34:	8b12      	ldrh	r2, [r2, #24]
 8015f36:	68f9      	ldr	r1, [r7, #12]
 8015f38:	8d49      	ldrh	r1, [r1, #42]	; 0x2a
 8015f3a:	893d      	ldrh	r5, [r7, #8]
 8015f3c:	897c      	ldrh	r4, [r7, #10]
 8015f3e:	9103      	str	r1, [sp, #12]
 8015f40:	2110      	movs	r1, #16
 8015f42:	9102      	str	r1, [sp, #8]
 8015f44:	9201      	str	r2, [sp, #4]
 8015f46:	9300      	str	r3, [sp, #0]
 8015f48:	687b      	ldr	r3, [r7, #4]
 8015f4a:	462a      	mov	r2, r5
 8015f4c:	4621      	mov	r1, r4
 8015f4e:	f7ff ff67 	bl	8015e20 <tcp_output_alloc_header_common>
 8015f52:	6178      	str	r0, [r7, #20]
    seqno_be, pcb->local_port, pcb->remote_port, TCP_ACK,
    TCPWND_MIN16(RCV_WND_SCALE(pcb, pcb->rcv_ann_wnd)));
  if (p != NULL) {
 8015f54:	697b      	ldr	r3, [r7, #20]
 8015f56:	2b00      	cmp	r3, #0
 8015f58:	d006      	beq.n	8015f68 <tcp_output_alloc_header+0x64>
    /* If we're sending a packet, update the announced right window edge */
    pcb->rcv_ann_right_edge = pcb->rcv_nxt + pcb->rcv_ann_wnd;
 8015f5a:	68fb      	ldr	r3, [r7, #12]
 8015f5c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8015f5e:	68fa      	ldr	r2, [r7, #12]
 8015f60:	8d52      	ldrh	r2, [r2, #42]	; 0x2a
 8015f62:	441a      	add	r2, r3
 8015f64:	68fb      	ldr	r3, [r7, #12]
 8015f66:	62da      	str	r2, [r3, #44]	; 0x2c
  }
  return p;
 8015f68:	697b      	ldr	r3, [r7, #20]
}
 8015f6a:	4618      	mov	r0, r3
 8015f6c:	3718      	adds	r7, #24
 8015f6e:	46bd      	mov	sp, r7
 8015f70:	bdb0      	pop	{r4, r5, r7, pc}
 8015f72:	bf00      	nop
 8015f74:	0801d89c 	.word	0x0801d89c
 8015f78:	0801dfa4 	.word	0x0801dfa4
 8015f7c:	0801d8f0 	.word	0x0801d8f0

08015f80 <tcp_output_fill_options>:

/* Fill in options for control segments */
static void
tcp_output_fill_options(const struct tcp_pcb *pcb, struct pbuf *p, u8_t optflags, u8_t num_sacks)
{
 8015f80:	b580      	push	{r7, lr}
 8015f82:	b088      	sub	sp, #32
 8015f84:	af00      	add	r7, sp, #0
 8015f86:	60f8      	str	r0, [r7, #12]
 8015f88:	60b9      	str	r1, [r7, #8]
 8015f8a:	4611      	mov	r1, r2
 8015f8c:	461a      	mov	r2, r3
 8015f8e:	460b      	mov	r3, r1
 8015f90:	71fb      	strb	r3, [r7, #7]
 8015f92:	4613      	mov	r3, r2
 8015f94:	71bb      	strb	r3, [r7, #6]
  struct tcp_hdr *tcphdr;
  u32_t *opts;
  u16_t sacks_len = 0;
 8015f96:	2300      	movs	r3, #0
 8015f98:	83fb      	strh	r3, [r7, #30]

  LWIP_ASSERT("tcp_output_fill_options: invalid pbuf", p != NULL);
 8015f9a:	68bb      	ldr	r3, [r7, #8]
 8015f9c:	2b00      	cmp	r3, #0
 8015f9e:	d106      	bne.n	8015fae <tcp_output_fill_options+0x2e>
 8015fa0:	4b12      	ldr	r3, [pc, #72]	; (8015fec <tcp_output_fill_options+0x6c>)
 8015fa2:	f240 7256 	movw	r2, #1878	; 0x756
 8015fa6:	4912      	ldr	r1, [pc, #72]	; (8015ff0 <tcp_output_fill_options+0x70>)
 8015fa8:	4812      	ldr	r0, [pc, #72]	; (8015ff4 <tcp_output_fill_options+0x74>)
 8015faa:	f003 fd5d 	bl	8019a68 <iprintf>

  tcphdr = (struct tcp_hdr *)p->payload;
 8015fae:	68bb      	ldr	r3, [r7, #8]
 8015fb0:	685b      	ldr	r3, [r3, #4]
 8015fb2:	61bb      	str	r3, [r7, #24]
  opts = (u32_t *)(void *)(tcphdr + 1);
 8015fb4:	69bb      	ldr	r3, [r7, #24]
 8015fb6:	3314      	adds	r3, #20
 8015fb8:	617b      	str	r3, [r7, #20]
  opts = LWIP_HOOK_TCP_OUT_ADD_TCPOPTS(p, tcphdr, pcb, opts);
#endif

  LWIP_UNUSED_ARG(pcb);
  LWIP_UNUSED_ARG(sacks_len);
  LWIP_ASSERT("options not filled", (u8_t *)opts == ((u8_t *)(tcphdr + 1)) + sacks_len * 4 + LWIP_TCP_OPT_LENGTH_SEGMENT(optflags, pcb));
 8015fba:	8bfb      	ldrh	r3, [r7, #30]
 8015fbc:	009b      	lsls	r3, r3, #2
 8015fbe:	461a      	mov	r2, r3
 8015fc0:	79fb      	ldrb	r3, [r7, #7]
 8015fc2:	009b      	lsls	r3, r3, #2
 8015fc4:	f003 0304 	and.w	r3, r3, #4
 8015fc8:	4413      	add	r3, r2
 8015fca:	3314      	adds	r3, #20
 8015fcc:	69ba      	ldr	r2, [r7, #24]
 8015fce:	4413      	add	r3, r2
 8015fd0:	697a      	ldr	r2, [r7, #20]
 8015fd2:	429a      	cmp	r2, r3
 8015fd4:	d006      	beq.n	8015fe4 <tcp_output_fill_options+0x64>
 8015fd6:	4b05      	ldr	r3, [pc, #20]	; (8015fec <tcp_output_fill_options+0x6c>)
 8015fd8:	f240 7275 	movw	r2, #1909	; 0x775
 8015fdc:	4906      	ldr	r1, [pc, #24]	; (8015ff8 <tcp_output_fill_options+0x78>)
 8015fde:	4805      	ldr	r0, [pc, #20]	; (8015ff4 <tcp_output_fill_options+0x74>)
 8015fe0:	f003 fd42 	bl	8019a68 <iprintf>
  LWIP_UNUSED_ARG(optflags); /* for LWIP_NOASSERT */
  LWIP_UNUSED_ARG(opts); /* for LWIP_NOASSERT */
}
 8015fe4:	bf00      	nop
 8015fe6:	3720      	adds	r7, #32
 8015fe8:	46bd      	mov	sp, r7
 8015fea:	bd80      	pop	{r7, pc}
 8015fec:	0801d89c 	.word	0x0801d89c
 8015ff0:	0801dfcc 	.word	0x0801dfcc
 8015ff4:	0801d8f0 	.word	0x0801d8f0
 8015ff8:	0801dec4 	.word	0x0801dec4

08015ffc <tcp_output_control_segment>:
 * header checksum and calling ip_output_if while handling netif hints and stats.
 */
static err_t
tcp_output_control_segment(const struct tcp_pcb *pcb, struct pbuf *p,
                           const ip_addr_t *src, const ip_addr_t *dst)
{
 8015ffc:	b580      	push	{r7, lr}
 8015ffe:	b08a      	sub	sp, #40	; 0x28
 8016000:	af04      	add	r7, sp, #16
 8016002:	60f8      	str	r0, [r7, #12]
 8016004:	60b9      	str	r1, [r7, #8]
 8016006:	607a      	str	r2, [r7, #4]
 8016008:	603b      	str	r3, [r7, #0]
  err_t err;
  struct netif *netif;

  LWIP_ASSERT("tcp_output_control_segment: invalid pbuf", p != NULL);
 801600a:	68bb      	ldr	r3, [r7, #8]
 801600c:	2b00      	cmp	r3, #0
 801600e:	d106      	bne.n	801601e <tcp_output_control_segment+0x22>
 8016010:	4b1c      	ldr	r3, [pc, #112]	; (8016084 <tcp_output_control_segment+0x88>)
 8016012:	f240 7287 	movw	r2, #1927	; 0x787
 8016016:	491c      	ldr	r1, [pc, #112]	; (8016088 <tcp_output_control_segment+0x8c>)
 8016018:	481c      	ldr	r0, [pc, #112]	; (801608c <tcp_output_control_segment+0x90>)
 801601a:	f003 fd25 	bl	8019a68 <iprintf>

  netif = tcp_route(pcb, src, dst);
 801601e:	683a      	ldr	r2, [r7, #0]
 8016020:	6879      	ldr	r1, [r7, #4]
 8016022:	68f8      	ldr	r0, [r7, #12]
 8016024:	f7fe ff40 	bl	8014ea8 <tcp_route>
 8016028:	6138      	str	r0, [r7, #16]
  if (netif == NULL) {
 801602a:	693b      	ldr	r3, [r7, #16]
 801602c:	2b00      	cmp	r3, #0
 801602e:	d102      	bne.n	8016036 <tcp_output_control_segment+0x3a>
    err = ERR_RTE;
 8016030:	23fc      	movs	r3, #252	; 0xfc
 8016032:	75fb      	strb	r3, [r7, #23]
 8016034:	e01c      	b.n	8016070 <tcp_output_control_segment+0x74>
      struct tcp_hdr *tcphdr = (struct tcp_hdr *)p->payload;
      tcphdr->chksum = ip_chksum_pseudo(p, IP_PROTO_TCP, p->tot_len,
                                        src, dst);
    }
#endif
    if (pcb != NULL) {
 8016036:	68fb      	ldr	r3, [r7, #12]
 8016038:	2b00      	cmp	r3, #0
 801603a:	d006      	beq.n	801604a <tcp_output_control_segment+0x4e>
      NETIF_SET_HINTS(netif, LWIP_CONST_CAST(struct netif_hint*, &(pcb->netif_hints)));
      ttl = pcb->ttl;
 801603c:	68fb      	ldr	r3, [r7, #12]
 801603e:	7adb      	ldrb	r3, [r3, #11]
 8016040:	75bb      	strb	r3, [r7, #22]
      tos = pcb->tos;
 8016042:	68fb      	ldr	r3, [r7, #12]
 8016044:	7a9b      	ldrb	r3, [r3, #10]
 8016046:	757b      	strb	r3, [r7, #21]
 8016048:	e003      	b.n	8016052 <tcp_output_control_segment+0x56>
    } else {
      /* Send output with hardcoded TTL/HL since we have no access to the pcb */
      ttl = TCP_TTL;
 801604a:	23ff      	movs	r3, #255	; 0xff
 801604c:	75bb      	strb	r3, [r7, #22]
      tos = 0;
 801604e:	2300      	movs	r3, #0
 8016050:	757b      	strb	r3, [r7, #21]
    }
    TCP_STATS_INC(tcp.xmit);
    err = ip_output_if(p, src, dst, ttl, tos, IP_PROTO_TCP, netif);
 8016052:	7dba      	ldrb	r2, [r7, #22]
 8016054:	693b      	ldr	r3, [r7, #16]
 8016056:	9302      	str	r3, [sp, #8]
 8016058:	2306      	movs	r3, #6
 801605a:	9301      	str	r3, [sp, #4]
 801605c:	7d7b      	ldrb	r3, [r7, #21]
 801605e:	9300      	str	r3, [sp, #0]
 8016060:	4613      	mov	r3, r2
 8016062:	683a      	ldr	r2, [r7, #0]
 8016064:	6879      	ldr	r1, [r7, #4]
 8016066:	68b8      	ldr	r0, [r7, #8]
 8016068:	f001 ff96 	bl	8017f98 <ip4_output_if>
 801606c:	4603      	mov	r3, r0
 801606e:	75fb      	strb	r3, [r7, #23]
    NETIF_RESET_HINTS(netif);
  }
  pbuf_free(p);
 8016070:	68b8      	ldr	r0, [r7, #8]
 8016072:	f7fa fde1 	bl	8010c38 <pbuf_free>
  return err;
 8016076:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 801607a:	4618      	mov	r0, r3
 801607c:	3718      	adds	r7, #24
 801607e:	46bd      	mov	sp, r7
 8016080:	bd80      	pop	{r7, pc}
 8016082:	bf00      	nop
 8016084:	0801d89c 	.word	0x0801d89c
 8016088:	0801dff4 	.word	0x0801dff4
 801608c:	0801d8f0 	.word	0x0801d8f0

08016090 <tcp_rst>:
 */
void
tcp_rst(const struct tcp_pcb *pcb, u32_t seqno, u32_t ackno,
        const ip_addr_t *local_ip, const ip_addr_t *remote_ip,
        u16_t local_port, u16_t remote_port)
{
 8016090:	b590      	push	{r4, r7, lr}
 8016092:	b08b      	sub	sp, #44	; 0x2c
 8016094:	af04      	add	r7, sp, #16
 8016096:	60f8      	str	r0, [r7, #12]
 8016098:	60b9      	str	r1, [r7, #8]
 801609a:	607a      	str	r2, [r7, #4]
 801609c:	603b      	str	r3, [r7, #0]
  struct pbuf *p;
  u16_t wnd;
  u8_t optlen;

  LWIP_ASSERT("tcp_rst: invalid local_ip", local_ip != NULL);
 801609e:	683b      	ldr	r3, [r7, #0]
 80160a0:	2b00      	cmp	r3, #0
 80160a2:	d106      	bne.n	80160b2 <tcp_rst+0x22>
 80160a4:	4b1f      	ldr	r3, [pc, #124]	; (8016124 <tcp_rst+0x94>)
 80160a6:	f240 72c4 	movw	r2, #1988	; 0x7c4
 80160aa:	491f      	ldr	r1, [pc, #124]	; (8016128 <tcp_rst+0x98>)
 80160ac:	481f      	ldr	r0, [pc, #124]	; (801612c <tcp_rst+0x9c>)
 80160ae:	f003 fcdb 	bl	8019a68 <iprintf>
  LWIP_ASSERT("tcp_rst: invalid remote_ip", remote_ip != NULL);
 80160b2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80160b4:	2b00      	cmp	r3, #0
 80160b6:	d106      	bne.n	80160c6 <tcp_rst+0x36>
 80160b8:	4b1a      	ldr	r3, [pc, #104]	; (8016124 <tcp_rst+0x94>)
 80160ba:	f240 72c5 	movw	r2, #1989	; 0x7c5
 80160be:	491c      	ldr	r1, [pc, #112]	; (8016130 <tcp_rst+0xa0>)
 80160c0:	481a      	ldr	r0, [pc, #104]	; (801612c <tcp_rst+0x9c>)
 80160c2:	f003 fcd1 	bl	8019a68 <iprintf>

  optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(0, pcb);
 80160c6:	2300      	movs	r3, #0
 80160c8:	75fb      	strb	r3, [r7, #23]

#if LWIP_WND_SCALE
  wnd = PP_HTONS(((TCP_WND >> TCP_RCV_SCALE) & 0xFFFF));
#else
  wnd = PP_HTONS(TCP_WND);
 80160ca:	f24d 0316 	movw	r3, #53270	; 0xd016
 80160ce:	82bb      	strh	r3, [r7, #20]
#endif

  p = tcp_output_alloc_header_common(ackno, optlen, 0, lwip_htonl(seqno), local_port,
 80160d0:	7dfb      	ldrb	r3, [r7, #23]
 80160d2:	b29c      	uxth	r4, r3
 80160d4:	68b8      	ldr	r0, [r7, #8]
 80160d6:	f7f9 f9c0 	bl	800f45a <lwip_htonl>
 80160da:	4602      	mov	r2, r0
 80160dc:	8abb      	ldrh	r3, [r7, #20]
 80160de:	9303      	str	r3, [sp, #12]
 80160e0:	2314      	movs	r3, #20
 80160e2:	9302      	str	r3, [sp, #8]
 80160e4:	8e3b      	ldrh	r3, [r7, #48]	; 0x30
 80160e6:	9301      	str	r3, [sp, #4]
 80160e8:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 80160ea:	9300      	str	r3, [sp, #0]
 80160ec:	4613      	mov	r3, r2
 80160ee:	2200      	movs	r2, #0
 80160f0:	4621      	mov	r1, r4
 80160f2:	6878      	ldr	r0, [r7, #4]
 80160f4:	f7ff fe94 	bl	8015e20 <tcp_output_alloc_header_common>
 80160f8:	6138      	str	r0, [r7, #16]
    remote_port, TCP_RST | TCP_ACK, wnd);
  if (p == NULL) {
 80160fa:	693b      	ldr	r3, [r7, #16]
 80160fc:	2b00      	cmp	r3, #0
 80160fe:	d00c      	beq.n	801611a <tcp_rst+0x8a>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_rst: could not allocate memory for pbuf\n"));
    return;
  }
  tcp_output_fill_options(pcb, p, 0, optlen);
 8016100:	7dfb      	ldrb	r3, [r7, #23]
 8016102:	2200      	movs	r2, #0
 8016104:	6939      	ldr	r1, [r7, #16]
 8016106:	68f8      	ldr	r0, [r7, #12]
 8016108:	f7ff ff3a 	bl	8015f80 <tcp_output_fill_options>

  MIB2_STATS_INC(mib2.tcpoutrsts);

  tcp_output_control_segment(pcb, p, local_ip, remote_ip);
 801610c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801610e:	683a      	ldr	r2, [r7, #0]
 8016110:	6939      	ldr	r1, [r7, #16]
 8016112:	68f8      	ldr	r0, [r7, #12]
 8016114:	f7ff ff72 	bl	8015ffc <tcp_output_control_segment>
 8016118:	e000      	b.n	801611c <tcp_rst+0x8c>
    return;
 801611a:	bf00      	nop
  LWIP_DEBUGF(TCP_RST_DEBUG, ("tcp_rst: seqno %"U32_F" ackno %"U32_F".\n", seqno, ackno));
}
 801611c:	371c      	adds	r7, #28
 801611e:	46bd      	mov	sp, r7
 8016120:	bd90      	pop	{r4, r7, pc}
 8016122:	bf00      	nop
 8016124:	0801d89c 	.word	0x0801d89c
 8016128:	0801e020 	.word	0x0801e020
 801612c:	0801d8f0 	.word	0x0801d8f0
 8016130:	0801e03c 	.word	0x0801e03c

08016134 <tcp_send_empty_ack>:
 *
 * @param pcb Protocol control block for the TCP connection to send the ACK
 */
err_t
tcp_send_empty_ack(struct tcp_pcb *pcb)
{
 8016134:	b590      	push	{r4, r7, lr}
 8016136:	b087      	sub	sp, #28
 8016138:	af00      	add	r7, sp, #0
 801613a:	6078      	str	r0, [r7, #4]
  err_t err;
  struct pbuf *p;
  u8_t optlen, optflags = 0;
 801613c:	2300      	movs	r3, #0
 801613e:	75fb      	strb	r3, [r7, #23]
  u8_t num_sacks = 0;
 8016140:	2300      	movs	r3, #0
 8016142:	75bb      	strb	r3, [r7, #22]

  LWIP_ASSERT("tcp_send_empty_ack: invalid pcb", pcb != NULL);
 8016144:	687b      	ldr	r3, [r7, #4]
 8016146:	2b00      	cmp	r3, #0
 8016148:	d106      	bne.n	8016158 <tcp_send_empty_ack+0x24>
 801614a:	4b28      	ldr	r3, [pc, #160]	; (80161ec <tcp_send_empty_ack+0xb8>)
 801614c:	f240 72ea 	movw	r2, #2026	; 0x7ea
 8016150:	4927      	ldr	r1, [pc, #156]	; (80161f0 <tcp_send_empty_ack+0xbc>)
 8016152:	4828      	ldr	r0, [pc, #160]	; (80161f4 <tcp_send_empty_ack+0xc0>)
 8016154:	f003 fc88 	bl	8019a68 <iprintf>
#if LWIP_TCP_TIMESTAMPS
  if (pcb->flags & TF_TIMESTAMP) {
    optflags = TF_SEG_OPTS_TS;
  }
#endif
  optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(optflags, pcb);
 8016158:	7dfb      	ldrb	r3, [r7, #23]
 801615a:	009b      	lsls	r3, r3, #2
 801615c:	b2db      	uxtb	r3, r3
 801615e:	f003 0304 	and.w	r3, r3, #4
 8016162:	757b      	strb	r3, [r7, #21]
  if ((num_sacks = tcp_get_num_sacks(pcb, optlen)) > 0) {
    optlen += 4 + num_sacks * 8; /* 4 bytes for header (including 2*NOP), plus 8B for each SACK */
  }
#endif

  p = tcp_output_alloc_header(pcb, optlen, 0, lwip_htonl(pcb->snd_nxt));
 8016164:	7d7b      	ldrb	r3, [r7, #21]
 8016166:	b29c      	uxth	r4, r3
 8016168:	687b      	ldr	r3, [r7, #4]
 801616a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 801616c:	4618      	mov	r0, r3
 801616e:	f7f9 f974 	bl	800f45a <lwip_htonl>
 8016172:	4603      	mov	r3, r0
 8016174:	2200      	movs	r2, #0
 8016176:	4621      	mov	r1, r4
 8016178:	6878      	ldr	r0, [r7, #4]
 801617a:	f7ff fec3 	bl	8015f04 <tcp_output_alloc_header>
 801617e:	6138      	str	r0, [r7, #16]
  if (p == NULL) {
 8016180:	693b      	ldr	r3, [r7, #16]
 8016182:	2b00      	cmp	r3, #0
 8016184:	d109      	bne.n	801619a <tcp_send_empty_ack+0x66>
    /* let tcp_fasttmr retry sending this ACK */
    tcp_set_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 8016186:	687b      	ldr	r3, [r7, #4]
 8016188:	8b5b      	ldrh	r3, [r3, #26]
 801618a:	f043 0303 	orr.w	r3, r3, #3
 801618e:	b29a      	uxth	r2, r3
 8016190:	687b      	ldr	r3, [r7, #4]
 8016192:	835a      	strh	r2, [r3, #26]
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG, ("tcp_output: (ACK) could not allocate pbuf\n"));
    return ERR_BUF;
 8016194:	f06f 0301 	mvn.w	r3, #1
 8016198:	e023      	b.n	80161e2 <tcp_send_empty_ack+0xae>
  }
  tcp_output_fill_options(pcb, p, optflags, num_sacks);
 801619a:	7dbb      	ldrb	r3, [r7, #22]
 801619c:	7dfa      	ldrb	r2, [r7, #23]
 801619e:	6939      	ldr	r1, [r7, #16]
 80161a0:	6878      	ldr	r0, [r7, #4]
 80161a2:	f7ff feed 	bl	8015f80 <tcp_output_fill_options>
  pcb->ts_lastacksent = pcb->rcv_nxt;
#endif

  LWIP_DEBUGF(TCP_OUTPUT_DEBUG,
              ("tcp_output: sending ACK for %"U32_F"\n", pcb->rcv_nxt));
  err = tcp_output_control_segment(pcb, p, &pcb->local_ip, &pcb->remote_ip);
 80161a6:	687a      	ldr	r2, [r7, #4]
 80161a8:	687b      	ldr	r3, [r7, #4]
 80161aa:	3304      	adds	r3, #4
 80161ac:	6939      	ldr	r1, [r7, #16]
 80161ae:	6878      	ldr	r0, [r7, #4]
 80161b0:	f7ff ff24 	bl	8015ffc <tcp_output_control_segment>
 80161b4:	4603      	mov	r3, r0
 80161b6:	73fb      	strb	r3, [r7, #15]
  if (err != ERR_OK) {
 80161b8:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80161bc:	2b00      	cmp	r3, #0
 80161be:	d007      	beq.n	80161d0 <tcp_send_empty_ack+0x9c>
    /* let tcp_fasttmr retry sending this ACK */
    tcp_set_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 80161c0:	687b      	ldr	r3, [r7, #4]
 80161c2:	8b5b      	ldrh	r3, [r3, #26]
 80161c4:	f043 0303 	orr.w	r3, r3, #3
 80161c8:	b29a      	uxth	r2, r3
 80161ca:	687b      	ldr	r3, [r7, #4]
 80161cc:	835a      	strh	r2, [r3, #26]
 80161ce:	e006      	b.n	80161de <tcp_send_empty_ack+0xaa>
  } else {
    /* remove ACK flags from the PCB, as we sent an empty ACK now */
    tcp_clear_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 80161d0:	687b      	ldr	r3, [r7, #4]
 80161d2:	8b5b      	ldrh	r3, [r3, #26]
 80161d4:	f023 0303 	bic.w	r3, r3, #3
 80161d8:	b29a      	uxth	r2, r3
 80161da:	687b      	ldr	r3, [r7, #4]
 80161dc:	835a      	strh	r2, [r3, #26]
  }

  return err;
 80161de:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 80161e2:	4618      	mov	r0, r3
 80161e4:	371c      	adds	r7, #28
 80161e6:	46bd      	mov	sp, r7
 80161e8:	bd90      	pop	{r4, r7, pc}
 80161ea:	bf00      	nop
 80161ec:	0801d89c 	.word	0x0801d89c
 80161f0:	0801e058 	.word	0x0801e058
 80161f4:	0801d8f0 	.word	0x0801d8f0

080161f8 <tcp_keepalive>:
 *
 * @param pcb the tcp_pcb for which to send a keepalive packet
 */
err_t
tcp_keepalive(struct tcp_pcb *pcb)
{
 80161f8:	b590      	push	{r4, r7, lr}
 80161fa:	b087      	sub	sp, #28
 80161fc:	af00      	add	r7, sp, #0
 80161fe:	6078      	str	r0, [r7, #4]
  err_t err;
  struct pbuf *p;
  u8_t optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(0, pcb);
 8016200:	2300      	movs	r3, #0
 8016202:	75fb      	strb	r3, [r7, #23]

  LWIP_ASSERT("tcp_keepalive: invalid pcb", pcb != NULL);
 8016204:	687b      	ldr	r3, [r7, #4]
 8016206:	2b00      	cmp	r3, #0
 8016208:	d106      	bne.n	8016218 <tcp_keepalive+0x20>
 801620a:	4b18      	ldr	r3, [pc, #96]	; (801626c <tcp_keepalive+0x74>)
 801620c:	f640 0224 	movw	r2, #2084	; 0x824
 8016210:	4917      	ldr	r1, [pc, #92]	; (8016270 <tcp_keepalive+0x78>)
 8016212:	4818      	ldr	r0, [pc, #96]	; (8016274 <tcp_keepalive+0x7c>)
 8016214:	f003 fc28 	bl	8019a68 <iprintf>
  LWIP_DEBUGF(TCP_DEBUG, ("\n"));

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_keepalive: tcp_ticks %"U32_F"   pcb->tmr %"U32_F" pcb->keep_cnt_sent %"U16_F"\n",
                          tcp_ticks, pcb->tmr, (u16_t)pcb->keep_cnt_sent));

  p = tcp_output_alloc_header(pcb, optlen, 0, lwip_htonl(pcb->snd_nxt - 1));
 8016218:	7dfb      	ldrb	r3, [r7, #23]
 801621a:	b29c      	uxth	r4, r3
 801621c:	687b      	ldr	r3, [r7, #4]
 801621e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8016220:	3b01      	subs	r3, #1
 8016222:	4618      	mov	r0, r3
 8016224:	f7f9 f919 	bl	800f45a <lwip_htonl>
 8016228:	4603      	mov	r3, r0
 801622a:	2200      	movs	r2, #0
 801622c:	4621      	mov	r1, r4
 801622e:	6878      	ldr	r0, [r7, #4]
 8016230:	f7ff fe68 	bl	8015f04 <tcp_output_alloc_header>
 8016234:	6138      	str	r0, [r7, #16]
  if (p == NULL) {
 8016236:	693b      	ldr	r3, [r7, #16]
 8016238:	2b00      	cmp	r3, #0
 801623a:	d102      	bne.n	8016242 <tcp_keepalive+0x4a>
    LWIP_DEBUGF(TCP_DEBUG,
                ("tcp_keepalive: could not allocate memory for pbuf\n"));
    return ERR_MEM;
 801623c:	f04f 33ff 	mov.w	r3, #4294967295
 8016240:	e010      	b.n	8016264 <tcp_keepalive+0x6c>
  }
  tcp_output_fill_options(pcb, p, 0, optlen);
 8016242:	7dfb      	ldrb	r3, [r7, #23]
 8016244:	2200      	movs	r2, #0
 8016246:	6939      	ldr	r1, [r7, #16]
 8016248:	6878      	ldr	r0, [r7, #4]
 801624a:	f7ff fe99 	bl	8015f80 <tcp_output_fill_options>
  err = tcp_output_control_segment(pcb, p, &pcb->local_ip, &pcb->remote_ip);
 801624e:	687a      	ldr	r2, [r7, #4]
 8016250:	687b      	ldr	r3, [r7, #4]
 8016252:	3304      	adds	r3, #4
 8016254:	6939      	ldr	r1, [r7, #16]
 8016256:	6878      	ldr	r0, [r7, #4]
 8016258:	f7ff fed0 	bl	8015ffc <tcp_output_control_segment>
 801625c:	4603      	mov	r3, r0
 801625e:	73fb      	strb	r3, [r7, #15]

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_keepalive: seqno %"U32_F" ackno %"U32_F" err %d.\n",
                          pcb->snd_nxt - 1, pcb->rcv_nxt, (int)err));
  return err;
 8016260:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8016264:	4618      	mov	r0, r3
 8016266:	371c      	adds	r7, #28
 8016268:	46bd      	mov	sp, r7
 801626a:	bd90      	pop	{r4, r7, pc}
 801626c:	0801d89c 	.word	0x0801d89c
 8016270:	0801e078 	.word	0x0801e078
 8016274:	0801d8f0 	.word	0x0801d8f0

08016278 <tcp_zero_window_probe>:
 *
 * @param pcb the tcp_pcb for which to send a zero-window probe packet
 */
err_t
tcp_zero_window_probe(struct tcp_pcb *pcb)
{
 8016278:	b590      	push	{r4, r7, lr}
 801627a:	b08b      	sub	sp, #44	; 0x2c
 801627c:	af00      	add	r7, sp, #0
 801627e:	6078      	str	r0, [r7, #4]
  struct tcp_hdr *tcphdr;
  struct tcp_seg *seg;
  u16_t len;
  u8_t is_fin;
  u32_t snd_nxt;
  u8_t optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(0, pcb);
 8016280:	2300      	movs	r3, #0
 8016282:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

  LWIP_ASSERT("tcp_zero_window_probe: invalid pcb", pcb != NULL);
 8016286:	687b      	ldr	r3, [r7, #4]
 8016288:	2b00      	cmp	r3, #0
 801628a:	d106      	bne.n	801629a <tcp_zero_window_probe+0x22>
 801628c:	4b4c      	ldr	r3, [pc, #304]	; (80163c0 <tcp_zero_window_probe+0x148>)
 801628e:	f640 024f 	movw	r2, #2127	; 0x84f
 8016292:	494c      	ldr	r1, [pc, #304]	; (80163c4 <tcp_zero_window_probe+0x14c>)
 8016294:	484c      	ldr	r0, [pc, #304]	; (80163c8 <tcp_zero_window_probe+0x150>)
 8016296:	f003 fbe7 	bl	8019a68 <iprintf>
              ("tcp_zero_window_probe: tcp_ticks %"U32_F
               "   pcb->tmr %"U32_F" pcb->keep_cnt_sent %"U16_F"\n",
               tcp_ticks, pcb->tmr, (u16_t)pcb->keep_cnt_sent));

  /* Only consider unsent, persist timer should be off when there is data in-flight */
  seg = pcb->unsent;
 801629a:	687b      	ldr	r3, [r7, #4]
 801629c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 801629e:	623b      	str	r3, [r7, #32]
  if (seg == NULL) {
 80162a0:	6a3b      	ldr	r3, [r7, #32]
 80162a2:	2b00      	cmp	r3, #0
 80162a4:	d101      	bne.n	80162aa <tcp_zero_window_probe+0x32>
    /* Not expected, persist timer should be off when the send buffer is empty */
    return ERR_OK;
 80162a6:	2300      	movs	r3, #0
 80162a8:	e086      	b.n	80163b8 <tcp_zero_window_probe+0x140>

  /* increment probe count. NOTE: we record probe even if it fails
     to actually transmit due to an error. This ensures memory exhaustion/
     routing problem doesn't leave a zero-window pcb as an indefinite zombie.
     RTO mechanism has similar behavior, see pcb->nrtx */
  if (pcb->persist_probe < 0xFF) {
 80162aa:	687b      	ldr	r3, [r7, #4]
 80162ac:	f893 309a 	ldrb.w	r3, [r3, #154]	; 0x9a
 80162b0:	2bff      	cmp	r3, #255	; 0xff
 80162b2:	d007      	beq.n	80162c4 <tcp_zero_window_probe+0x4c>
    ++pcb->persist_probe;
 80162b4:	687b      	ldr	r3, [r7, #4]
 80162b6:	f893 309a 	ldrb.w	r3, [r3, #154]	; 0x9a
 80162ba:	3301      	adds	r3, #1
 80162bc:	b2da      	uxtb	r2, r3
 80162be:	687b      	ldr	r3, [r7, #4]
 80162c0:	f883 209a 	strb.w	r2, [r3, #154]	; 0x9a
  }

  is_fin = ((TCPH_FLAGS(seg->tcphdr) & TCP_FIN) != 0) && (seg->len == 0);
 80162c4:	6a3b      	ldr	r3, [r7, #32]
 80162c6:	68db      	ldr	r3, [r3, #12]
 80162c8:	899b      	ldrh	r3, [r3, #12]
 80162ca:	b29b      	uxth	r3, r3
 80162cc:	4618      	mov	r0, r3
 80162ce:	f7f9 f8af 	bl	800f430 <lwip_htons>
 80162d2:	4603      	mov	r3, r0
 80162d4:	b2db      	uxtb	r3, r3
 80162d6:	f003 0301 	and.w	r3, r3, #1
 80162da:	2b00      	cmp	r3, #0
 80162dc:	d005      	beq.n	80162ea <tcp_zero_window_probe+0x72>
 80162de:	6a3b      	ldr	r3, [r7, #32]
 80162e0:	891b      	ldrh	r3, [r3, #8]
 80162e2:	2b00      	cmp	r3, #0
 80162e4:	d101      	bne.n	80162ea <tcp_zero_window_probe+0x72>
 80162e6:	2301      	movs	r3, #1
 80162e8:	e000      	b.n	80162ec <tcp_zero_window_probe+0x74>
 80162ea:	2300      	movs	r3, #0
 80162ec:	77fb      	strb	r3, [r7, #31]
  /* we want to send one seqno: either FIN or data (no options) */
  len = is_fin ? 0 : 1;
 80162ee:	7ffb      	ldrb	r3, [r7, #31]
 80162f0:	2b00      	cmp	r3, #0
 80162f2:	bf0c      	ite	eq
 80162f4:	2301      	moveq	r3, #1
 80162f6:	2300      	movne	r3, #0
 80162f8:	b2db      	uxtb	r3, r3
 80162fa:	83bb      	strh	r3, [r7, #28]

  p = tcp_output_alloc_header(pcb, optlen, len, seg->tcphdr->seqno);
 80162fc:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8016300:	b299      	uxth	r1, r3
 8016302:	6a3b      	ldr	r3, [r7, #32]
 8016304:	68db      	ldr	r3, [r3, #12]
 8016306:	685b      	ldr	r3, [r3, #4]
 8016308:	8bba      	ldrh	r2, [r7, #28]
 801630a:	6878      	ldr	r0, [r7, #4]
 801630c:	f7ff fdfa 	bl	8015f04 <tcp_output_alloc_header>
 8016310:	61b8      	str	r0, [r7, #24]
  if (p == NULL) {
 8016312:	69bb      	ldr	r3, [r7, #24]
 8016314:	2b00      	cmp	r3, #0
 8016316:	d102      	bne.n	801631e <tcp_zero_window_probe+0xa6>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_zero_window_probe: no memory for pbuf\n"));
    return ERR_MEM;
 8016318:	f04f 33ff 	mov.w	r3, #4294967295
 801631c:	e04c      	b.n	80163b8 <tcp_zero_window_probe+0x140>
  }
  tcphdr = (struct tcp_hdr *)p->payload;
 801631e:	69bb      	ldr	r3, [r7, #24]
 8016320:	685b      	ldr	r3, [r3, #4]
 8016322:	617b      	str	r3, [r7, #20]

  if (is_fin) {
 8016324:	7ffb      	ldrb	r3, [r7, #31]
 8016326:	2b00      	cmp	r3, #0
 8016328:	d011      	beq.n	801634e <tcp_zero_window_probe+0xd6>
    /* FIN segment, no data */
    TCPH_FLAGS_SET(tcphdr, TCP_ACK | TCP_FIN);
 801632a:	697b      	ldr	r3, [r7, #20]
 801632c:	899b      	ldrh	r3, [r3, #12]
 801632e:	b29b      	uxth	r3, r3
 8016330:	b21b      	sxth	r3, r3
 8016332:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 8016336:	b21c      	sxth	r4, r3
 8016338:	2011      	movs	r0, #17
 801633a:	f7f9 f879 	bl	800f430 <lwip_htons>
 801633e:	4603      	mov	r3, r0
 8016340:	b21b      	sxth	r3, r3
 8016342:	4323      	orrs	r3, r4
 8016344:	b21b      	sxth	r3, r3
 8016346:	b29a      	uxth	r2, r3
 8016348:	697b      	ldr	r3, [r7, #20]
 801634a:	819a      	strh	r2, [r3, #12]
 801634c:	e010      	b.n	8016370 <tcp_zero_window_probe+0xf8>
  } else {
    /* Data segment, copy in one byte from the head of the unacked queue */
    char *d = ((char *)p->payload + TCP_HLEN);
 801634e:	69bb      	ldr	r3, [r7, #24]
 8016350:	685b      	ldr	r3, [r3, #4]
 8016352:	3314      	adds	r3, #20
 8016354:	613b      	str	r3, [r7, #16]
    /* Depending on whether the segment has already been sent (unacked) or not
       (unsent), seg->p->payload points to the IP header or TCP header.
       Ensure we copy the first TCP data byte: */
    pbuf_copy_partial(seg->p, d, 1, seg->p->tot_len - seg->len);
 8016356:	6a3b      	ldr	r3, [r7, #32]
 8016358:	6858      	ldr	r0, [r3, #4]
 801635a:	6a3b      	ldr	r3, [r7, #32]
 801635c:	685b      	ldr	r3, [r3, #4]
 801635e:	891a      	ldrh	r2, [r3, #8]
 8016360:	6a3b      	ldr	r3, [r7, #32]
 8016362:	891b      	ldrh	r3, [r3, #8]
 8016364:	1ad3      	subs	r3, r2, r3
 8016366:	b29b      	uxth	r3, r3
 8016368:	2201      	movs	r2, #1
 801636a:	6939      	ldr	r1, [r7, #16]
 801636c:	f7fa fe4e 	bl	801100c <pbuf_copy_partial>
  }

  /* The byte may be acknowledged without the window being opened. */
  snd_nxt = lwip_ntohl(seg->tcphdr->seqno) + 1;
 8016370:	6a3b      	ldr	r3, [r7, #32]
 8016372:	68db      	ldr	r3, [r3, #12]
 8016374:	685b      	ldr	r3, [r3, #4]
 8016376:	4618      	mov	r0, r3
 8016378:	f7f9 f86f 	bl	800f45a <lwip_htonl>
 801637c:	4603      	mov	r3, r0
 801637e:	3301      	adds	r3, #1
 8016380:	60fb      	str	r3, [r7, #12]
  if (TCP_SEQ_LT(pcb->snd_nxt, snd_nxt)) {
 8016382:	687b      	ldr	r3, [r7, #4]
 8016384:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8016386:	68fb      	ldr	r3, [r7, #12]
 8016388:	1ad3      	subs	r3, r2, r3
 801638a:	2b00      	cmp	r3, #0
 801638c:	da02      	bge.n	8016394 <tcp_zero_window_probe+0x11c>
    pcb->snd_nxt = snd_nxt;
 801638e:	687b      	ldr	r3, [r7, #4]
 8016390:	68fa      	ldr	r2, [r7, #12]
 8016392:	651a      	str	r2, [r3, #80]	; 0x50
  }
  tcp_output_fill_options(pcb, p, 0, optlen);
 8016394:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8016398:	2200      	movs	r2, #0
 801639a:	69b9      	ldr	r1, [r7, #24]
 801639c:	6878      	ldr	r0, [r7, #4]
 801639e:	f7ff fdef 	bl	8015f80 <tcp_output_fill_options>

  err = tcp_output_control_segment(pcb, p, &pcb->local_ip, &pcb->remote_ip);
 80163a2:	687a      	ldr	r2, [r7, #4]
 80163a4:	687b      	ldr	r3, [r7, #4]
 80163a6:	3304      	adds	r3, #4
 80163a8:	69b9      	ldr	r1, [r7, #24]
 80163aa:	6878      	ldr	r0, [r7, #4]
 80163ac:	f7ff fe26 	bl	8015ffc <tcp_output_control_segment>
 80163b0:	4603      	mov	r3, r0
 80163b2:	72fb      	strb	r3, [r7, #11]

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_zero_window_probe: seqno %"U32_F
                          " ackno %"U32_F" err %d.\n",
                          pcb->snd_nxt - 1, pcb->rcv_nxt, (int)err));
  return err;
 80163b4:	f997 300b 	ldrsb.w	r3, [r7, #11]
}
 80163b8:	4618      	mov	r0, r3
 80163ba:	372c      	adds	r7, #44	; 0x2c
 80163bc:	46bd      	mov	sp, r7
 80163be:	bd90      	pop	{r4, r7, pc}
 80163c0:	0801d89c 	.word	0x0801d89c
 80163c4:	0801e094 	.word	0x0801e094
 80163c8:	0801d8f0 	.word	0x0801d8f0

080163cc <tcpip_tcp_timer>:
 *
 * @param arg unused argument
 */
static void
tcpip_tcp_timer(void *arg)
{
 80163cc:	b580      	push	{r7, lr}
 80163ce:	b082      	sub	sp, #8
 80163d0:	af00      	add	r7, sp, #0
 80163d2:	6078      	str	r0, [r7, #4]
  LWIP_UNUSED_ARG(arg);

  /* call TCP timer handler */
  tcp_tmr();
 80163d4:	f7fa ff08 	bl	80111e8 <tcp_tmr>
  /* timer still needed? */
  if (tcp_active_pcbs || tcp_tw_pcbs) {
 80163d8:	4b0a      	ldr	r3, [pc, #40]	; (8016404 <tcpip_tcp_timer+0x38>)
 80163da:	681b      	ldr	r3, [r3, #0]
 80163dc:	2b00      	cmp	r3, #0
 80163de:	d103      	bne.n	80163e8 <tcpip_tcp_timer+0x1c>
 80163e0:	4b09      	ldr	r3, [pc, #36]	; (8016408 <tcpip_tcp_timer+0x3c>)
 80163e2:	681b      	ldr	r3, [r3, #0]
 80163e4:	2b00      	cmp	r3, #0
 80163e6:	d005      	beq.n	80163f4 <tcpip_tcp_timer+0x28>
    /* restart timer */
    sys_timeout(TCP_TMR_INTERVAL, tcpip_tcp_timer, NULL);
 80163e8:	2200      	movs	r2, #0
 80163ea:	4908      	ldr	r1, [pc, #32]	; (801640c <tcpip_tcp_timer+0x40>)
 80163ec:	20fa      	movs	r0, #250	; 0xfa
 80163ee:	f000 f8f3 	bl	80165d8 <sys_timeout>
 80163f2:	e003      	b.n	80163fc <tcpip_tcp_timer+0x30>
  } else {
    /* disable timer */
    tcpip_tcp_timer_active = 0;
 80163f4:	4b06      	ldr	r3, [pc, #24]	; (8016410 <tcpip_tcp_timer+0x44>)
 80163f6:	2200      	movs	r2, #0
 80163f8:	601a      	str	r2, [r3, #0]
  }
}
 80163fa:	bf00      	nop
 80163fc:	bf00      	nop
 80163fe:	3708      	adds	r7, #8
 8016400:	46bd      	mov	sp, r7
 8016402:	bd80      	pop	{r7, pc}
 8016404:	20007050 	.word	0x20007050
 8016408:	20007054 	.word	0x20007054
 801640c:	080163cd 	.word	0x080163cd
 8016410:	2000709c 	.word	0x2000709c

08016414 <tcp_timer_needed>:
 * the reason is to have the TCP timer only running when
 * there are active (or time-wait) PCBs.
 */
void
tcp_timer_needed(void)
{
 8016414:	b580      	push	{r7, lr}
 8016416:	af00      	add	r7, sp, #0
  LWIP_ASSERT_CORE_LOCKED();

  /* timer is off but needed again? */
  if (!tcpip_tcp_timer_active && (tcp_active_pcbs || tcp_tw_pcbs)) {
 8016418:	4b0a      	ldr	r3, [pc, #40]	; (8016444 <tcp_timer_needed+0x30>)
 801641a:	681b      	ldr	r3, [r3, #0]
 801641c:	2b00      	cmp	r3, #0
 801641e:	d10f      	bne.n	8016440 <tcp_timer_needed+0x2c>
 8016420:	4b09      	ldr	r3, [pc, #36]	; (8016448 <tcp_timer_needed+0x34>)
 8016422:	681b      	ldr	r3, [r3, #0]
 8016424:	2b00      	cmp	r3, #0
 8016426:	d103      	bne.n	8016430 <tcp_timer_needed+0x1c>
 8016428:	4b08      	ldr	r3, [pc, #32]	; (801644c <tcp_timer_needed+0x38>)
 801642a:	681b      	ldr	r3, [r3, #0]
 801642c:	2b00      	cmp	r3, #0
 801642e:	d007      	beq.n	8016440 <tcp_timer_needed+0x2c>
    /* enable and start timer */
    tcpip_tcp_timer_active = 1;
 8016430:	4b04      	ldr	r3, [pc, #16]	; (8016444 <tcp_timer_needed+0x30>)
 8016432:	2201      	movs	r2, #1
 8016434:	601a      	str	r2, [r3, #0]
    sys_timeout(TCP_TMR_INTERVAL, tcpip_tcp_timer, NULL);
 8016436:	2200      	movs	r2, #0
 8016438:	4905      	ldr	r1, [pc, #20]	; (8016450 <tcp_timer_needed+0x3c>)
 801643a:	20fa      	movs	r0, #250	; 0xfa
 801643c:	f000 f8cc 	bl	80165d8 <sys_timeout>
  }
}
 8016440:	bf00      	nop
 8016442:	bd80      	pop	{r7, pc}
 8016444:	2000709c 	.word	0x2000709c
 8016448:	20007050 	.word	0x20007050
 801644c:	20007054 	.word	0x20007054
 8016450:	080163cd 	.word	0x080163cd

08016454 <sys_timeout_abs>:
#if LWIP_DEBUG_TIMERNAMES
sys_timeout_abs(u32_t abs_time, sys_timeout_handler handler, void *arg, const char *handler_name)
#else /* LWIP_DEBUG_TIMERNAMES */
sys_timeout_abs(u32_t abs_time, sys_timeout_handler handler, void *arg)
#endif
{
 8016454:	b580      	push	{r7, lr}
 8016456:	b086      	sub	sp, #24
 8016458:	af00      	add	r7, sp, #0
 801645a:	60f8      	str	r0, [r7, #12]
 801645c:	60b9      	str	r1, [r7, #8]
 801645e:	607a      	str	r2, [r7, #4]
  struct sys_timeo *timeout, *t;

  timeout = (struct sys_timeo *)memp_malloc(MEMP_SYS_TIMEOUT);
 8016460:	2006      	movs	r0, #6
 8016462:	f7f9 fd03 	bl	800fe6c <memp_malloc>
 8016466:	6138      	str	r0, [r7, #16]
  if (timeout == NULL) {
 8016468:	693b      	ldr	r3, [r7, #16]
 801646a:	2b00      	cmp	r3, #0
 801646c:	d109      	bne.n	8016482 <sys_timeout_abs+0x2e>
    LWIP_ASSERT("sys_timeout: timeout != NULL, pool MEMP_SYS_TIMEOUT is empty", timeout != NULL);
 801646e:	693b      	ldr	r3, [r7, #16]
 8016470:	2b00      	cmp	r3, #0
 8016472:	d151      	bne.n	8016518 <sys_timeout_abs+0xc4>
 8016474:	4b2a      	ldr	r3, [pc, #168]	; (8016520 <sys_timeout_abs+0xcc>)
 8016476:	22be      	movs	r2, #190	; 0xbe
 8016478:	492a      	ldr	r1, [pc, #168]	; (8016524 <sys_timeout_abs+0xd0>)
 801647a:	482b      	ldr	r0, [pc, #172]	; (8016528 <sys_timeout_abs+0xd4>)
 801647c:	f003 faf4 	bl	8019a68 <iprintf>
    return;
 8016480:	e04a      	b.n	8016518 <sys_timeout_abs+0xc4>
  }

  timeout->next = NULL;
 8016482:	693b      	ldr	r3, [r7, #16]
 8016484:	2200      	movs	r2, #0
 8016486:	601a      	str	r2, [r3, #0]
  timeout->h = handler;
 8016488:	693b      	ldr	r3, [r7, #16]
 801648a:	68ba      	ldr	r2, [r7, #8]
 801648c:	609a      	str	r2, [r3, #8]
  timeout->arg = arg;
 801648e:	693b      	ldr	r3, [r7, #16]
 8016490:	687a      	ldr	r2, [r7, #4]
 8016492:	60da      	str	r2, [r3, #12]
  timeout->time = abs_time;
 8016494:	693b      	ldr	r3, [r7, #16]
 8016496:	68fa      	ldr	r2, [r7, #12]
 8016498:	605a      	str	r2, [r3, #4]
  timeout->handler_name = handler_name;
  LWIP_DEBUGF(TIMERS_DEBUG, ("sys_timeout: %p abs_time=%"U32_F" handler=%s arg=%p\n",
                             (void *)timeout, abs_time, handler_name, (void *)arg));
#endif /* LWIP_DEBUG_TIMERNAMES */

  if (next_timeout == NULL) {
 801649a:	4b24      	ldr	r3, [pc, #144]	; (801652c <sys_timeout_abs+0xd8>)
 801649c:	681b      	ldr	r3, [r3, #0]
 801649e:	2b00      	cmp	r3, #0
 80164a0:	d103      	bne.n	80164aa <sys_timeout_abs+0x56>
    next_timeout = timeout;
 80164a2:	4a22      	ldr	r2, [pc, #136]	; (801652c <sys_timeout_abs+0xd8>)
 80164a4:	693b      	ldr	r3, [r7, #16]
 80164a6:	6013      	str	r3, [r2, #0]
    return;
 80164a8:	e037      	b.n	801651a <sys_timeout_abs+0xc6>
  }
  if (TIME_LESS_THAN(timeout->time, next_timeout->time)) {
 80164aa:	693b      	ldr	r3, [r7, #16]
 80164ac:	685a      	ldr	r2, [r3, #4]
 80164ae:	4b1f      	ldr	r3, [pc, #124]	; (801652c <sys_timeout_abs+0xd8>)
 80164b0:	681b      	ldr	r3, [r3, #0]
 80164b2:	685b      	ldr	r3, [r3, #4]
 80164b4:	1ad3      	subs	r3, r2, r3
 80164b6:	0fdb      	lsrs	r3, r3, #31
 80164b8:	f003 0301 	and.w	r3, r3, #1
 80164bc:	b2db      	uxtb	r3, r3
 80164be:	2b00      	cmp	r3, #0
 80164c0:	d007      	beq.n	80164d2 <sys_timeout_abs+0x7e>
    timeout->next = next_timeout;
 80164c2:	4b1a      	ldr	r3, [pc, #104]	; (801652c <sys_timeout_abs+0xd8>)
 80164c4:	681a      	ldr	r2, [r3, #0]
 80164c6:	693b      	ldr	r3, [r7, #16]
 80164c8:	601a      	str	r2, [r3, #0]
    next_timeout = timeout;
 80164ca:	4a18      	ldr	r2, [pc, #96]	; (801652c <sys_timeout_abs+0xd8>)
 80164cc:	693b      	ldr	r3, [r7, #16]
 80164ce:	6013      	str	r3, [r2, #0]
 80164d0:	e023      	b.n	801651a <sys_timeout_abs+0xc6>
  } else {
    for (t = next_timeout; t != NULL; t = t->next) {
 80164d2:	4b16      	ldr	r3, [pc, #88]	; (801652c <sys_timeout_abs+0xd8>)
 80164d4:	681b      	ldr	r3, [r3, #0]
 80164d6:	617b      	str	r3, [r7, #20]
 80164d8:	e01a      	b.n	8016510 <sys_timeout_abs+0xbc>
      if ((t->next == NULL) || TIME_LESS_THAN(timeout->time, t->next->time)) {
 80164da:	697b      	ldr	r3, [r7, #20]
 80164dc:	681b      	ldr	r3, [r3, #0]
 80164de:	2b00      	cmp	r3, #0
 80164e0:	d00b      	beq.n	80164fa <sys_timeout_abs+0xa6>
 80164e2:	693b      	ldr	r3, [r7, #16]
 80164e4:	685a      	ldr	r2, [r3, #4]
 80164e6:	697b      	ldr	r3, [r7, #20]
 80164e8:	681b      	ldr	r3, [r3, #0]
 80164ea:	685b      	ldr	r3, [r3, #4]
 80164ec:	1ad3      	subs	r3, r2, r3
 80164ee:	0fdb      	lsrs	r3, r3, #31
 80164f0:	f003 0301 	and.w	r3, r3, #1
 80164f4:	b2db      	uxtb	r3, r3
 80164f6:	2b00      	cmp	r3, #0
 80164f8:	d007      	beq.n	801650a <sys_timeout_abs+0xb6>
        timeout->next = t->next;
 80164fa:	697b      	ldr	r3, [r7, #20]
 80164fc:	681a      	ldr	r2, [r3, #0]
 80164fe:	693b      	ldr	r3, [r7, #16]
 8016500:	601a      	str	r2, [r3, #0]
        t->next = timeout;
 8016502:	697b      	ldr	r3, [r7, #20]
 8016504:	693a      	ldr	r2, [r7, #16]
 8016506:	601a      	str	r2, [r3, #0]
        break;
 8016508:	e007      	b.n	801651a <sys_timeout_abs+0xc6>
    for (t = next_timeout; t != NULL; t = t->next) {
 801650a:	697b      	ldr	r3, [r7, #20]
 801650c:	681b      	ldr	r3, [r3, #0]
 801650e:	617b      	str	r3, [r7, #20]
 8016510:	697b      	ldr	r3, [r7, #20]
 8016512:	2b00      	cmp	r3, #0
 8016514:	d1e1      	bne.n	80164da <sys_timeout_abs+0x86>
 8016516:	e000      	b.n	801651a <sys_timeout_abs+0xc6>
    return;
 8016518:	bf00      	nop
      }
    }
  }
}
 801651a:	3718      	adds	r7, #24
 801651c:	46bd      	mov	sp, r7
 801651e:	bd80      	pop	{r7, pc}
 8016520:	0801e0b8 	.word	0x0801e0b8
 8016524:	0801e0ec 	.word	0x0801e0ec
 8016528:	0801e12c 	.word	0x0801e12c
 801652c:	20007094 	.word	0x20007094

08016530 <lwip_cyclic_timer>:
#if !LWIP_TESTMODE
static
#endif
void
lwip_cyclic_timer(void *arg)
{
 8016530:	b580      	push	{r7, lr}
 8016532:	b086      	sub	sp, #24
 8016534:	af00      	add	r7, sp, #0
 8016536:	6078      	str	r0, [r7, #4]
  u32_t now;
  u32_t next_timeout_time;
  const struct lwip_cyclic_timer *cyclic = (const struct lwip_cyclic_timer *)arg;
 8016538:	687b      	ldr	r3, [r7, #4]
 801653a:	617b      	str	r3, [r7, #20]

#if LWIP_DEBUG_TIMERNAMES
  LWIP_DEBUGF(TIMERS_DEBUG, ("tcpip: %s()\n", cyclic->handler_name));
#endif
  cyclic->handler();
 801653c:	697b      	ldr	r3, [r7, #20]
 801653e:	685b      	ldr	r3, [r3, #4]
 8016540:	4798      	blx	r3

  now = sys_now();
 8016542:	f7f8 fd2d 	bl	800efa0 <sys_now>
 8016546:	6138      	str	r0, [r7, #16]
  next_timeout_time = (u32_t)(current_timeout_due_time + cyclic->interval_ms);  /* overflow handled by TIME_LESS_THAN macro */ 
 8016548:	697b      	ldr	r3, [r7, #20]
 801654a:	681a      	ldr	r2, [r3, #0]
 801654c:	4b0f      	ldr	r3, [pc, #60]	; (801658c <lwip_cyclic_timer+0x5c>)
 801654e:	681b      	ldr	r3, [r3, #0]
 8016550:	4413      	add	r3, r2
 8016552:	60fb      	str	r3, [r7, #12]
  if (TIME_LESS_THAN(next_timeout_time, now)) {
 8016554:	68fa      	ldr	r2, [r7, #12]
 8016556:	693b      	ldr	r3, [r7, #16]
 8016558:	1ad3      	subs	r3, r2, r3
 801655a:	0fdb      	lsrs	r3, r3, #31
 801655c:	f003 0301 	and.w	r3, r3, #1
 8016560:	b2db      	uxtb	r3, r3
 8016562:	2b00      	cmp	r3, #0
 8016564:	d009      	beq.n	801657a <lwip_cyclic_timer+0x4a>
    /* timer would immediately expire again -> "overload" -> restart without any correction */
#if LWIP_DEBUG_TIMERNAMES
    sys_timeout_abs((u32_t)(now + cyclic->interval_ms), lwip_cyclic_timer, arg, cyclic->handler_name);
#else
    sys_timeout_abs((u32_t)(now + cyclic->interval_ms), lwip_cyclic_timer, arg);
 8016566:	697b      	ldr	r3, [r7, #20]
 8016568:	681a      	ldr	r2, [r3, #0]
 801656a:	693b      	ldr	r3, [r7, #16]
 801656c:	4413      	add	r3, r2
 801656e:	687a      	ldr	r2, [r7, #4]
 8016570:	4907      	ldr	r1, [pc, #28]	; (8016590 <lwip_cyclic_timer+0x60>)
 8016572:	4618      	mov	r0, r3
 8016574:	f7ff ff6e 	bl	8016454 <sys_timeout_abs>
    sys_timeout_abs(next_timeout_time, lwip_cyclic_timer, arg, cyclic->handler_name);
#else
    sys_timeout_abs(next_timeout_time, lwip_cyclic_timer, arg);
#endif
  }
}
 8016578:	e004      	b.n	8016584 <lwip_cyclic_timer+0x54>
    sys_timeout_abs(next_timeout_time, lwip_cyclic_timer, arg);
 801657a:	687a      	ldr	r2, [r7, #4]
 801657c:	4904      	ldr	r1, [pc, #16]	; (8016590 <lwip_cyclic_timer+0x60>)
 801657e:	68f8      	ldr	r0, [r7, #12]
 8016580:	f7ff ff68 	bl	8016454 <sys_timeout_abs>
}
 8016584:	bf00      	nop
 8016586:	3718      	adds	r7, #24
 8016588:	46bd      	mov	sp, r7
 801658a:	bd80      	pop	{r7, pc}
 801658c:	20007098 	.word	0x20007098
 8016590:	08016531 	.word	0x08016531

08016594 <sys_timeouts_init>:

/** Initialize this module */
void sys_timeouts_init(void)
{
 8016594:	b580      	push	{r7, lr}
 8016596:	b082      	sub	sp, #8
 8016598:	af00      	add	r7, sp, #0
  size_t i;
  /* tcp_tmr() at index 0 is started on demand */
  for (i = (LWIP_TCP ? 1 : 0); i < LWIP_ARRAYSIZE(lwip_cyclic_timers); i++) {
 801659a:	2301      	movs	r3, #1
 801659c:	607b      	str	r3, [r7, #4]
 801659e:	e00e      	b.n	80165be <sys_timeouts_init+0x2a>
    /* we have to cast via size_t to get rid of const warning
      (this is OK as cyclic_timer() casts back to const* */
    sys_timeout(lwip_cyclic_timers[i].interval_ms, lwip_cyclic_timer, LWIP_CONST_CAST(void *, &lwip_cyclic_timers[i]));
 80165a0:	4a0b      	ldr	r2, [pc, #44]	; (80165d0 <sys_timeouts_init+0x3c>)
 80165a2:	687b      	ldr	r3, [r7, #4]
 80165a4:	f852 0033 	ldr.w	r0, [r2, r3, lsl #3]
 80165a8:	687b      	ldr	r3, [r7, #4]
 80165aa:	00db      	lsls	r3, r3, #3
 80165ac:	4a08      	ldr	r2, [pc, #32]	; (80165d0 <sys_timeouts_init+0x3c>)
 80165ae:	4413      	add	r3, r2
 80165b0:	461a      	mov	r2, r3
 80165b2:	4908      	ldr	r1, [pc, #32]	; (80165d4 <sys_timeouts_init+0x40>)
 80165b4:	f000 f810 	bl	80165d8 <sys_timeout>
  for (i = (LWIP_TCP ? 1 : 0); i < LWIP_ARRAYSIZE(lwip_cyclic_timers); i++) {
 80165b8:	687b      	ldr	r3, [r7, #4]
 80165ba:	3301      	adds	r3, #1
 80165bc:	607b      	str	r3, [r7, #4]
 80165be:	687b      	ldr	r3, [r7, #4]
 80165c0:	2b02      	cmp	r3, #2
 80165c2:	d9ed      	bls.n	80165a0 <sys_timeouts_init+0xc>
  }
}
 80165c4:	bf00      	nop
 80165c6:	bf00      	nop
 80165c8:	3708      	adds	r7, #8
 80165ca:	46bd      	mov	sp, r7
 80165cc:	bd80      	pop	{r7, pc}
 80165ce:	bf00      	nop
 80165d0:	0801ecdc 	.word	0x0801ecdc
 80165d4:	08016531 	.word	0x08016531

080165d8 <sys_timeout>:
sys_timeout_debug(u32_t msecs, sys_timeout_handler handler, void *arg, const char *handler_name)
#else /* LWIP_DEBUG_TIMERNAMES */
void
sys_timeout(u32_t msecs, sys_timeout_handler handler, void *arg)
#endif /* LWIP_DEBUG_TIMERNAMES */
{
 80165d8:	b580      	push	{r7, lr}
 80165da:	b086      	sub	sp, #24
 80165dc:	af00      	add	r7, sp, #0
 80165de:	60f8      	str	r0, [r7, #12]
 80165e0:	60b9      	str	r1, [r7, #8]
 80165e2:	607a      	str	r2, [r7, #4]
  u32_t next_timeout_time;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ASSERT("Timeout time too long, max is LWIP_UINT32_MAX/4 msecs", msecs <= (LWIP_UINT32_MAX / 4));
 80165e4:	68fb      	ldr	r3, [r7, #12]
 80165e6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80165ea:	d306      	bcc.n	80165fa <sys_timeout+0x22>
 80165ec:	4b0a      	ldr	r3, [pc, #40]	; (8016618 <sys_timeout+0x40>)
 80165ee:	f240 1229 	movw	r2, #297	; 0x129
 80165f2:	490a      	ldr	r1, [pc, #40]	; (801661c <sys_timeout+0x44>)
 80165f4:	480a      	ldr	r0, [pc, #40]	; (8016620 <sys_timeout+0x48>)
 80165f6:	f003 fa37 	bl	8019a68 <iprintf>

  next_timeout_time = (u32_t)(sys_now() + msecs); /* overflow handled by TIME_LESS_THAN macro */ 
 80165fa:	f7f8 fcd1 	bl	800efa0 <sys_now>
 80165fe:	4602      	mov	r2, r0
 8016600:	68fb      	ldr	r3, [r7, #12]
 8016602:	4413      	add	r3, r2
 8016604:	617b      	str	r3, [r7, #20]

#if LWIP_DEBUG_TIMERNAMES
  sys_timeout_abs(next_timeout_time, handler, arg, handler_name);
#else
  sys_timeout_abs(next_timeout_time, handler, arg);
 8016606:	687a      	ldr	r2, [r7, #4]
 8016608:	68b9      	ldr	r1, [r7, #8]
 801660a:	6978      	ldr	r0, [r7, #20]
 801660c:	f7ff ff22 	bl	8016454 <sys_timeout_abs>
#endif
}
 8016610:	bf00      	nop
 8016612:	3718      	adds	r7, #24
 8016614:	46bd      	mov	sp, r7
 8016616:	bd80      	pop	{r7, pc}
 8016618:	0801e0b8 	.word	0x0801e0b8
 801661c:	0801e154 	.word	0x0801e154
 8016620:	0801e12c 	.word	0x0801e12c

08016624 <sys_check_timeouts>:
 *
 * Must be called periodically from your main loop.
 */
void
sys_check_timeouts(void)
{
 8016624:	b580      	push	{r7, lr}
 8016626:	b084      	sub	sp, #16
 8016628:	af00      	add	r7, sp, #0
  u32_t now;

  LWIP_ASSERT_CORE_LOCKED();

  /* Process only timers expired at the start of the function. */
  now = sys_now();
 801662a:	f7f8 fcb9 	bl	800efa0 <sys_now>
 801662e:	60f8      	str	r0, [r7, #12]
  do {
    struct sys_timeo *tmptimeout;
    sys_timeout_handler handler;
    void *arg;

    PBUF_CHECK_FREE_OOSEQ();
 8016630:	4b1a      	ldr	r3, [pc, #104]	; (801669c <sys_check_timeouts+0x78>)
 8016632:	781b      	ldrb	r3, [r3, #0]
 8016634:	b2db      	uxtb	r3, r3
 8016636:	2b00      	cmp	r3, #0
 8016638:	d001      	beq.n	801663e <sys_check_timeouts+0x1a>
 801663a:	f7f9 ffc3 	bl	80105c4 <pbuf_free_ooseq>

    tmptimeout = next_timeout;
 801663e:	4b18      	ldr	r3, [pc, #96]	; (80166a0 <sys_check_timeouts+0x7c>)
 8016640:	681b      	ldr	r3, [r3, #0]
 8016642:	60bb      	str	r3, [r7, #8]
    if (tmptimeout == NULL) {
 8016644:	68bb      	ldr	r3, [r7, #8]
 8016646:	2b00      	cmp	r3, #0
 8016648:	d022      	beq.n	8016690 <sys_check_timeouts+0x6c>
      return;
    }

    if (TIME_LESS_THAN(now, tmptimeout->time)) {
 801664a:	68bb      	ldr	r3, [r7, #8]
 801664c:	685b      	ldr	r3, [r3, #4]
 801664e:	68fa      	ldr	r2, [r7, #12]
 8016650:	1ad3      	subs	r3, r2, r3
 8016652:	0fdb      	lsrs	r3, r3, #31
 8016654:	f003 0301 	and.w	r3, r3, #1
 8016658:	b2db      	uxtb	r3, r3
 801665a:	2b00      	cmp	r3, #0
 801665c:	d11a      	bne.n	8016694 <sys_check_timeouts+0x70>
      return;
    }

    /* Timeout has expired */
    next_timeout = tmptimeout->next;
 801665e:	68bb      	ldr	r3, [r7, #8]
 8016660:	681b      	ldr	r3, [r3, #0]
 8016662:	4a0f      	ldr	r2, [pc, #60]	; (80166a0 <sys_check_timeouts+0x7c>)
 8016664:	6013      	str	r3, [r2, #0]
    handler = tmptimeout->h;
 8016666:	68bb      	ldr	r3, [r7, #8]
 8016668:	689b      	ldr	r3, [r3, #8]
 801666a:	607b      	str	r3, [r7, #4]
    arg = tmptimeout->arg;
 801666c:	68bb      	ldr	r3, [r7, #8]
 801666e:	68db      	ldr	r3, [r3, #12]
 8016670:	603b      	str	r3, [r7, #0]
    current_timeout_due_time = tmptimeout->time;
 8016672:	68bb      	ldr	r3, [r7, #8]
 8016674:	685b      	ldr	r3, [r3, #4]
 8016676:	4a0b      	ldr	r2, [pc, #44]	; (80166a4 <sys_check_timeouts+0x80>)
 8016678:	6013      	str	r3, [r2, #0]
    if (handler != NULL) {
      LWIP_DEBUGF(TIMERS_DEBUG, ("sct calling h=%s t=%"U32_F" arg=%p\n",
                                 tmptimeout->handler_name, sys_now() - tmptimeout->time, arg));
    }
#endif /* LWIP_DEBUG_TIMERNAMES */
    memp_free(MEMP_SYS_TIMEOUT, tmptimeout);
 801667a:	68b9      	ldr	r1, [r7, #8]
 801667c:	2006      	movs	r0, #6
 801667e:	f7f9 fc65 	bl	800ff4c <memp_free>
    if (handler != NULL) {
 8016682:	687b      	ldr	r3, [r7, #4]
 8016684:	2b00      	cmp	r3, #0
 8016686:	d0d3      	beq.n	8016630 <sys_check_timeouts+0xc>
      handler(arg);
 8016688:	687b      	ldr	r3, [r7, #4]
 801668a:	6838      	ldr	r0, [r7, #0]
 801668c:	4798      	blx	r3
  do {
 801668e:	e7cf      	b.n	8016630 <sys_check_timeouts+0xc>
      return;
 8016690:	bf00      	nop
 8016692:	e000      	b.n	8016696 <sys_check_timeouts+0x72>
      return;
 8016694:	bf00      	nop
    }
    LWIP_TCPIP_THREAD_ALIVE();

    /* Repeat until all expired timers have been called */
  } while (1);
}
 8016696:	3710      	adds	r7, #16
 8016698:	46bd      	mov	sp, r7
 801669a:	bd80      	pop	{r7, pc}
 801669c:	20007041 	.word	0x20007041
 80166a0:	20007094 	.word	0x20007094
 80166a4:	20007098 	.word	0x20007098

080166a8 <udp_init>:
/**
 * Initialize this module.
 */
void
udp_init(void)
{
 80166a8:	b580      	push	{r7, lr}
 80166aa:	af00      	add	r7, sp, #0
#ifdef LWIP_RAND
  udp_port = UDP_ENSURE_LOCAL_PORT_RANGE(LWIP_RAND());
 80166ac:	f002 fca2 	bl	8018ff4 <rand>
 80166b0:	4603      	mov	r3, r0
 80166b2:	b29b      	uxth	r3, r3
 80166b4:	f3c3 030d 	ubfx	r3, r3, #0, #14
 80166b8:	b29b      	uxth	r3, r3
 80166ba:	f5a3 4380 	sub.w	r3, r3, #16384	; 0x4000
 80166be:	b29a      	uxth	r2, r3
 80166c0:	4b01      	ldr	r3, [pc, #4]	; (80166c8 <udp_init+0x20>)
 80166c2:	801a      	strh	r2, [r3, #0]
#endif /* LWIP_RAND */
}
 80166c4:	bf00      	nop
 80166c6:	bd80      	pop	{r7, pc}
 80166c8:	20000060 	.word	0x20000060

080166cc <udp_input_local_match>:
 * @param broadcast 1 if his is an IPv4 broadcast (global or subnet-only), 0 otherwise (only used for IPv4)
 * @return 1 on match, 0 otherwise
 */
static u8_t
udp_input_local_match(struct udp_pcb *pcb, struct netif *inp, u8_t broadcast)
{
 80166cc:	b580      	push	{r7, lr}
 80166ce:	b084      	sub	sp, #16
 80166d0:	af00      	add	r7, sp, #0
 80166d2:	60f8      	str	r0, [r7, #12]
 80166d4:	60b9      	str	r1, [r7, #8]
 80166d6:	4613      	mov	r3, r2
 80166d8:	71fb      	strb	r3, [r7, #7]
  LWIP_UNUSED_ARG(inp);       /* in IPv6 only case */
  LWIP_UNUSED_ARG(broadcast); /* in IPv6 only case */

  LWIP_ASSERT("udp_input_local_match: invalid pcb", pcb != NULL);
 80166da:	68fb      	ldr	r3, [r7, #12]
 80166dc:	2b00      	cmp	r3, #0
 80166de:	d105      	bne.n	80166ec <udp_input_local_match+0x20>
 80166e0:	4b27      	ldr	r3, [pc, #156]	; (8016780 <udp_input_local_match+0xb4>)
 80166e2:	2287      	movs	r2, #135	; 0x87
 80166e4:	4927      	ldr	r1, [pc, #156]	; (8016784 <udp_input_local_match+0xb8>)
 80166e6:	4828      	ldr	r0, [pc, #160]	; (8016788 <udp_input_local_match+0xbc>)
 80166e8:	f003 f9be 	bl	8019a68 <iprintf>
  LWIP_ASSERT("udp_input_local_match: invalid netif", inp != NULL);
 80166ec:	68bb      	ldr	r3, [r7, #8]
 80166ee:	2b00      	cmp	r3, #0
 80166f0:	d105      	bne.n	80166fe <udp_input_local_match+0x32>
 80166f2:	4b23      	ldr	r3, [pc, #140]	; (8016780 <udp_input_local_match+0xb4>)
 80166f4:	2288      	movs	r2, #136	; 0x88
 80166f6:	4925      	ldr	r1, [pc, #148]	; (801678c <udp_input_local_match+0xc0>)
 80166f8:	4823      	ldr	r0, [pc, #140]	; (8016788 <udp_input_local_match+0xbc>)
 80166fa:	f003 f9b5 	bl	8019a68 <iprintf>

  /* check if PCB is bound to specific netif */
  if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 80166fe:	68fb      	ldr	r3, [r7, #12]
 8016700:	7a1b      	ldrb	r3, [r3, #8]
 8016702:	2b00      	cmp	r3, #0
 8016704:	d00b      	beq.n	801671e <udp_input_local_match+0x52>
      (pcb->netif_idx != netif_get_index(ip_data.current_input_netif))) {
 8016706:	68fb      	ldr	r3, [r7, #12]
 8016708:	7a1a      	ldrb	r2, [r3, #8]
 801670a:	4b21      	ldr	r3, [pc, #132]	; (8016790 <udp_input_local_match+0xc4>)
 801670c:	685b      	ldr	r3, [r3, #4]
 801670e:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8016712:	3301      	adds	r3, #1
 8016714:	b2db      	uxtb	r3, r3
  if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 8016716:	429a      	cmp	r2, r3
 8016718:	d001      	beq.n	801671e <udp_input_local_match+0x52>
    return 0;
 801671a:	2300      	movs	r3, #0
 801671c:	e02b      	b.n	8016776 <udp_input_local_match+0xaa>
  /* Only need to check PCB if incoming IP version matches PCB IP version */
  if (IP_ADDR_PCB_VERSION_MATCH_EXACT(pcb, ip_current_dest_addr())) {
#if LWIP_IPV4
    /* Special case: IPv4 broadcast: all or broadcasts in my subnet
     * Note: broadcast variable can only be 1 if it is an IPv4 broadcast */
    if (broadcast != 0) {
 801671e:	79fb      	ldrb	r3, [r7, #7]
 8016720:	2b00      	cmp	r3, #0
 8016722:	d018      	beq.n	8016756 <udp_input_local_match+0x8a>
#if IP_SOF_BROADCAST_RECV
      if (ip_get_option(pcb, SOF_BROADCAST))
#endif /* IP_SOF_BROADCAST_RECV */
      {
        if (ip4_addr_isany(ip_2_ip4(&pcb->local_ip)) ||
 8016724:	68fb      	ldr	r3, [r7, #12]
 8016726:	2b00      	cmp	r3, #0
 8016728:	d013      	beq.n	8016752 <udp_input_local_match+0x86>
 801672a:	68fb      	ldr	r3, [r7, #12]
 801672c:	681b      	ldr	r3, [r3, #0]
 801672e:	2b00      	cmp	r3, #0
 8016730:	d00f      	beq.n	8016752 <udp_input_local_match+0x86>
            ((ip4_current_dest_addr()->addr == IPADDR_BROADCAST)) ||
 8016732:	4b17      	ldr	r3, [pc, #92]	; (8016790 <udp_input_local_match+0xc4>)
 8016734:	695b      	ldr	r3, [r3, #20]
        if (ip4_addr_isany(ip_2_ip4(&pcb->local_ip)) ||
 8016736:	f1b3 3fff 	cmp.w	r3, #4294967295
 801673a:	d00a      	beq.n	8016752 <udp_input_local_match+0x86>
            ip4_addr_netcmp(ip_2_ip4(&pcb->local_ip), ip4_current_dest_addr(), netif_ip4_netmask(inp))) {
 801673c:	68fb      	ldr	r3, [r7, #12]
 801673e:	681a      	ldr	r2, [r3, #0]
 8016740:	4b13      	ldr	r3, [pc, #76]	; (8016790 <udp_input_local_match+0xc4>)
 8016742:	695b      	ldr	r3, [r3, #20]
 8016744:	405a      	eors	r2, r3
 8016746:	68bb      	ldr	r3, [r7, #8]
 8016748:	3308      	adds	r3, #8
 801674a:	681b      	ldr	r3, [r3, #0]
 801674c:	4013      	ands	r3, r2
            ((ip4_current_dest_addr()->addr == IPADDR_BROADCAST)) ||
 801674e:	2b00      	cmp	r3, #0
 8016750:	d110      	bne.n	8016774 <udp_input_local_match+0xa8>
          return 1;
 8016752:	2301      	movs	r3, #1
 8016754:	e00f      	b.n	8016776 <udp_input_local_match+0xaa>
        }
      }
    } else
#endif /* LWIP_IPV4 */
      /* Handle IPv4 and IPv6: all or exact match */
      if (ip_addr_isany(&pcb->local_ip) || ip_addr_cmp(&pcb->local_ip, ip_current_dest_addr())) {
 8016756:	68fb      	ldr	r3, [r7, #12]
 8016758:	2b00      	cmp	r3, #0
 801675a:	d009      	beq.n	8016770 <udp_input_local_match+0xa4>
 801675c:	68fb      	ldr	r3, [r7, #12]
 801675e:	681b      	ldr	r3, [r3, #0]
 8016760:	2b00      	cmp	r3, #0
 8016762:	d005      	beq.n	8016770 <udp_input_local_match+0xa4>
 8016764:	68fb      	ldr	r3, [r7, #12]
 8016766:	681a      	ldr	r2, [r3, #0]
 8016768:	4b09      	ldr	r3, [pc, #36]	; (8016790 <udp_input_local_match+0xc4>)
 801676a:	695b      	ldr	r3, [r3, #20]
 801676c:	429a      	cmp	r2, r3
 801676e:	d101      	bne.n	8016774 <udp_input_local_match+0xa8>
        return 1;
 8016770:	2301      	movs	r3, #1
 8016772:	e000      	b.n	8016776 <udp_input_local_match+0xaa>
      }
  }

  return 0;
 8016774:	2300      	movs	r3, #0
}
 8016776:	4618      	mov	r0, r3
 8016778:	3710      	adds	r7, #16
 801677a:	46bd      	mov	sp, r7
 801677c:	bd80      	pop	{r7, pc}
 801677e:	bf00      	nop
 8016780:	0801e1a0 	.word	0x0801e1a0
 8016784:	0801e1d0 	.word	0x0801e1d0
 8016788:	0801e1f4 	.word	0x0801e1f4
 801678c:	0801e21c 	.word	0x0801e21c
 8016790:	20000768 	.word	0x20000768

08016794 <udp_input>:
 * @param inp network interface on which the datagram was received.
 *
 */
void
udp_input(struct pbuf *p, struct netif *inp)
{
 8016794:	b590      	push	{r4, r7, lr}
 8016796:	b08d      	sub	sp, #52	; 0x34
 8016798:	af02      	add	r7, sp, #8
 801679a:	6078      	str	r0, [r7, #4]
 801679c:	6039      	str	r1, [r7, #0]
  struct udp_hdr *udphdr;
  struct udp_pcb *pcb, *prev;
  struct udp_pcb *uncon_pcb;
  u16_t src, dest;
  u8_t broadcast;
  u8_t for_us = 0;
 801679e:	2300      	movs	r3, #0
 80167a0:	76fb      	strb	r3, [r7, #27]

  LWIP_UNUSED_ARG(inp);

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ASSERT("udp_input: invalid pbuf", p != NULL);
 80167a2:	687b      	ldr	r3, [r7, #4]
 80167a4:	2b00      	cmp	r3, #0
 80167a6:	d105      	bne.n	80167b4 <udp_input+0x20>
 80167a8:	4b7c      	ldr	r3, [pc, #496]	; (801699c <udp_input+0x208>)
 80167aa:	22cf      	movs	r2, #207	; 0xcf
 80167ac:	497c      	ldr	r1, [pc, #496]	; (80169a0 <udp_input+0x20c>)
 80167ae:	487d      	ldr	r0, [pc, #500]	; (80169a4 <udp_input+0x210>)
 80167b0:	f003 f95a 	bl	8019a68 <iprintf>
  LWIP_ASSERT("udp_input: invalid netif", inp != NULL);
 80167b4:	683b      	ldr	r3, [r7, #0]
 80167b6:	2b00      	cmp	r3, #0
 80167b8:	d105      	bne.n	80167c6 <udp_input+0x32>
 80167ba:	4b78      	ldr	r3, [pc, #480]	; (801699c <udp_input+0x208>)
 80167bc:	22d0      	movs	r2, #208	; 0xd0
 80167be:	497a      	ldr	r1, [pc, #488]	; (80169a8 <udp_input+0x214>)
 80167c0:	4878      	ldr	r0, [pc, #480]	; (80169a4 <udp_input+0x210>)
 80167c2:	f003 f951 	bl	8019a68 <iprintf>
  PERF_START;

  UDP_STATS_INC(udp.recv);

  /* Check minimum length (UDP header) */
  if (p->len < UDP_HLEN) {
 80167c6:	687b      	ldr	r3, [r7, #4]
 80167c8:	895b      	ldrh	r3, [r3, #10]
 80167ca:	2b07      	cmp	r3, #7
 80167cc:	d803      	bhi.n	80167d6 <udp_input+0x42>
    LWIP_DEBUGF(UDP_DEBUG,
                ("udp_input: short UDP datagram (%"U16_F" bytes) discarded\n", p->tot_len));
    UDP_STATS_INC(udp.lenerr);
    UDP_STATS_INC(udp.drop);
    MIB2_STATS_INC(mib2.udpinerrors);
    pbuf_free(p);
 80167ce:	6878      	ldr	r0, [r7, #4]
 80167d0:	f7fa fa32 	bl	8010c38 <pbuf_free>
    goto end;
 80167d4:	e0de      	b.n	8016994 <udp_input+0x200>
  }

  udphdr = (struct udp_hdr *)p->payload;
 80167d6:	687b      	ldr	r3, [r7, #4]
 80167d8:	685b      	ldr	r3, [r3, #4]
 80167da:	617b      	str	r3, [r7, #20]

  /* is broadcast packet ? */
  broadcast = ip_addr_isbroadcast(ip_current_dest_addr(), ip_current_netif());
 80167dc:	4b73      	ldr	r3, [pc, #460]	; (80169ac <udp_input+0x218>)
 80167de:	695b      	ldr	r3, [r3, #20]
 80167e0:	4a72      	ldr	r2, [pc, #456]	; (80169ac <udp_input+0x218>)
 80167e2:	6812      	ldr	r2, [r2, #0]
 80167e4:	4611      	mov	r1, r2
 80167e6:	4618      	mov	r0, r3
 80167e8:	f001 fcae 	bl	8018148 <ip4_addr_isbroadcast_u32>
 80167ec:	4603      	mov	r3, r0
 80167ee:	74fb      	strb	r3, [r7, #19]

  LWIP_DEBUGF(UDP_DEBUG, ("udp_input: received datagram of length %"U16_F"\n", p->tot_len));

  /* convert src and dest ports to host byte order */
  src = lwip_ntohs(udphdr->src);
 80167f0:	697b      	ldr	r3, [r7, #20]
 80167f2:	881b      	ldrh	r3, [r3, #0]
 80167f4:	b29b      	uxth	r3, r3
 80167f6:	4618      	mov	r0, r3
 80167f8:	f7f8 fe1a 	bl	800f430 <lwip_htons>
 80167fc:	4603      	mov	r3, r0
 80167fe:	823b      	strh	r3, [r7, #16]
  dest = lwip_ntohs(udphdr->dest);
 8016800:	697b      	ldr	r3, [r7, #20]
 8016802:	885b      	ldrh	r3, [r3, #2]
 8016804:	b29b      	uxth	r3, r3
 8016806:	4618      	mov	r0, r3
 8016808:	f7f8 fe12 	bl	800f430 <lwip_htons>
 801680c:	4603      	mov	r3, r0
 801680e:	81fb      	strh	r3, [r7, #14]
  ip_addr_debug_print_val(UDP_DEBUG, *ip_current_dest_addr());
  LWIP_DEBUGF(UDP_DEBUG, (", %"U16_F") <-- (", lwip_ntohs(udphdr->dest)));
  ip_addr_debug_print_val(UDP_DEBUG, *ip_current_src_addr());
  LWIP_DEBUGF(UDP_DEBUG, (", %"U16_F")\n", lwip_ntohs(udphdr->src)));

  pcb = NULL;
 8016810:	2300      	movs	r3, #0
 8016812:	627b      	str	r3, [r7, #36]	; 0x24
  prev = NULL;
 8016814:	2300      	movs	r3, #0
 8016816:	623b      	str	r3, [r7, #32]
  uncon_pcb = NULL;
 8016818:	2300      	movs	r3, #0
 801681a:	61fb      	str	r3, [r7, #28]
  /* Iterate through the UDP pcb list for a matching pcb.
   * 'Perfect match' pcbs (connected to the remote port & ip address) are
   * preferred. If no perfect match is found, the first unconnected pcb that
   * matches the local port and ip address gets the datagram. */
  for (pcb = udp_pcbs; pcb != NULL; pcb = pcb->next) {
 801681c:	4b64      	ldr	r3, [pc, #400]	; (80169b0 <udp_input+0x21c>)
 801681e:	681b      	ldr	r3, [r3, #0]
 8016820:	627b      	str	r3, [r7, #36]	; 0x24
 8016822:	e054      	b.n	80168ce <udp_input+0x13a>
    LWIP_DEBUGF(UDP_DEBUG, (", %"U16_F") <-- (", pcb->local_port));
    ip_addr_debug_print_val(UDP_DEBUG, pcb->remote_ip);
    LWIP_DEBUGF(UDP_DEBUG, (", %"U16_F")\n", pcb->remote_port));

    /* compare PCB local addr+port to UDP destination addr+port */
    if ((pcb->local_port == dest) &&
 8016824:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8016826:	8a5b      	ldrh	r3, [r3, #18]
 8016828:	89fa      	ldrh	r2, [r7, #14]
 801682a:	429a      	cmp	r2, r3
 801682c:	d14a      	bne.n	80168c4 <udp_input+0x130>
        (udp_input_local_match(pcb, inp, broadcast) != 0)) {
 801682e:	7cfb      	ldrb	r3, [r7, #19]
 8016830:	461a      	mov	r2, r3
 8016832:	6839      	ldr	r1, [r7, #0]
 8016834:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8016836:	f7ff ff49 	bl	80166cc <udp_input_local_match>
 801683a:	4603      	mov	r3, r0
    if ((pcb->local_port == dest) &&
 801683c:	2b00      	cmp	r3, #0
 801683e:	d041      	beq.n	80168c4 <udp_input+0x130>
      if ((pcb->flags & UDP_FLAGS_CONNECTED) == 0) {
 8016840:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8016842:	7c1b      	ldrb	r3, [r3, #16]
 8016844:	f003 0304 	and.w	r3, r3, #4
 8016848:	2b00      	cmp	r3, #0
 801684a:	d11d      	bne.n	8016888 <udp_input+0xf4>
        if (uncon_pcb == NULL) {
 801684c:	69fb      	ldr	r3, [r7, #28]
 801684e:	2b00      	cmp	r3, #0
 8016850:	d102      	bne.n	8016858 <udp_input+0xc4>
          /* the first unconnected matching PCB */
          uncon_pcb = pcb;
 8016852:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8016854:	61fb      	str	r3, [r7, #28]
 8016856:	e017      	b.n	8016888 <udp_input+0xf4>
#if LWIP_IPV4
        } else if (broadcast && ip4_current_dest_addr()->addr == IPADDR_BROADCAST) {
 8016858:	7cfb      	ldrb	r3, [r7, #19]
 801685a:	2b00      	cmp	r3, #0
 801685c:	d014      	beq.n	8016888 <udp_input+0xf4>
 801685e:	4b53      	ldr	r3, [pc, #332]	; (80169ac <udp_input+0x218>)
 8016860:	695b      	ldr	r3, [r3, #20]
 8016862:	f1b3 3fff 	cmp.w	r3, #4294967295
 8016866:	d10f      	bne.n	8016888 <udp_input+0xf4>
          /* global broadcast address (only valid for IPv4; match was checked before) */
          if (!IP_IS_V4_VAL(uncon_pcb->local_ip) || !ip4_addr_cmp(ip_2_ip4(&uncon_pcb->local_ip), netif_ip4_addr(inp))) {
 8016868:	69fb      	ldr	r3, [r7, #28]
 801686a:	681a      	ldr	r2, [r3, #0]
 801686c:	683b      	ldr	r3, [r7, #0]
 801686e:	3304      	adds	r3, #4
 8016870:	681b      	ldr	r3, [r3, #0]
 8016872:	429a      	cmp	r2, r3
 8016874:	d008      	beq.n	8016888 <udp_input+0xf4>
            /* uncon_pcb does not match the input netif, check this pcb */
            if (IP_IS_V4_VAL(pcb->local_ip) && ip4_addr_cmp(ip_2_ip4(&pcb->local_ip), netif_ip4_addr(inp))) {
 8016876:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8016878:	681a      	ldr	r2, [r3, #0]
 801687a:	683b      	ldr	r3, [r7, #0]
 801687c:	3304      	adds	r3, #4
 801687e:	681b      	ldr	r3, [r3, #0]
 8016880:	429a      	cmp	r2, r3
 8016882:	d101      	bne.n	8016888 <udp_input+0xf4>
              /* better match */
              uncon_pcb = pcb;
 8016884:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8016886:	61fb      	str	r3, [r7, #28]
        }
#endif /* SO_REUSE */
      }

      /* compare PCB remote addr+port to UDP source addr+port */
      if ((pcb->remote_port == src) &&
 8016888:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801688a:	8a9b      	ldrh	r3, [r3, #20]
 801688c:	8a3a      	ldrh	r2, [r7, #16]
 801688e:	429a      	cmp	r2, r3
 8016890:	d118      	bne.n	80168c4 <udp_input+0x130>
          (ip_addr_isany_val(pcb->remote_ip) ||
 8016892:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8016894:	685b      	ldr	r3, [r3, #4]
      if ((pcb->remote_port == src) &&
 8016896:	2b00      	cmp	r3, #0
 8016898:	d005      	beq.n	80168a6 <udp_input+0x112>
           ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()))) {
 801689a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801689c:	685a      	ldr	r2, [r3, #4]
 801689e:	4b43      	ldr	r3, [pc, #268]	; (80169ac <udp_input+0x218>)
 80168a0:	691b      	ldr	r3, [r3, #16]
          (ip_addr_isany_val(pcb->remote_ip) ||
 80168a2:	429a      	cmp	r2, r3
 80168a4:	d10e      	bne.n	80168c4 <udp_input+0x130>
        /* the first fully matching PCB */
        if (prev != NULL) {
 80168a6:	6a3b      	ldr	r3, [r7, #32]
 80168a8:	2b00      	cmp	r3, #0
 80168aa:	d014      	beq.n	80168d6 <udp_input+0x142>
          /* move the pcb to the front of udp_pcbs so that is
             found faster next time */
          prev->next = pcb->next;
 80168ac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80168ae:	68da      	ldr	r2, [r3, #12]
 80168b0:	6a3b      	ldr	r3, [r7, #32]
 80168b2:	60da      	str	r2, [r3, #12]
          pcb->next = udp_pcbs;
 80168b4:	4b3e      	ldr	r3, [pc, #248]	; (80169b0 <udp_input+0x21c>)
 80168b6:	681a      	ldr	r2, [r3, #0]
 80168b8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80168ba:	60da      	str	r2, [r3, #12]
          udp_pcbs = pcb;
 80168bc:	4a3c      	ldr	r2, [pc, #240]	; (80169b0 <udp_input+0x21c>)
 80168be:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80168c0:	6013      	str	r3, [r2, #0]
        } else {
          UDP_STATS_INC(udp.cachehit);
        }
        break;
 80168c2:	e008      	b.n	80168d6 <udp_input+0x142>
      }
    }

    prev = pcb;
 80168c4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80168c6:	623b      	str	r3, [r7, #32]
  for (pcb = udp_pcbs; pcb != NULL; pcb = pcb->next) {
 80168c8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80168ca:	68db      	ldr	r3, [r3, #12]
 80168cc:	627b      	str	r3, [r7, #36]	; 0x24
 80168ce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80168d0:	2b00      	cmp	r3, #0
 80168d2:	d1a7      	bne.n	8016824 <udp_input+0x90>
 80168d4:	e000      	b.n	80168d8 <udp_input+0x144>
        break;
 80168d6:	bf00      	nop
  }
  /* no fully matching pcb found? then look for an unconnected pcb */
  if (pcb == NULL) {
 80168d8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80168da:	2b00      	cmp	r3, #0
 80168dc:	d101      	bne.n	80168e2 <udp_input+0x14e>
    pcb = uncon_pcb;
 80168de:	69fb      	ldr	r3, [r7, #28]
 80168e0:	627b      	str	r3, [r7, #36]	; 0x24
  }

  /* Check checksum if this is a match or if it was directed at us. */
  if (pcb != NULL) {
 80168e2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80168e4:	2b00      	cmp	r3, #0
 80168e6:	d002      	beq.n	80168ee <udp_input+0x15a>
    for_us = 1;
 80168e8:	2301      	movs	r3, #1
 80168ea:	76fb      	strb	r3, [r7, #27]
 80168ec:	e00a      	b.n	8016904 <udp_input+0x170>
      for_us = netif_get_ip6_addr_match(inp, ip6_current_dest_addr()) >= 0;
    }
#endif /* LWIP_IPV6 */
#if LWIP_IPV4
    if (!ip_current_is_v6()) {
      for_us = ip4_addr_cmp(netif_ip4_addr(inp), ip4_current_dest_addr());
 80168ee:	683b      	ldr	r3, [r7, #0]
 80168f0:	3304      	adds	r3, #4
 80168f2:	681a      	ldr	r2, [r3, #0]
 80168f4:	4b2d      	ldr	r3, [pc, #180]	; (80169ac <udp_input+0x218>)
 80168f6:	695b      	ldr	r3, [r3, #20]
 80168f8:	429a      	cmp	r2, r3
 80168fa:	bf0c      	ite	eq
 80168fc:	2301      	moveq	r3, #1
 80168fe:	2300      	movne	r3, #0
 8016900:	b2db      	uxtb	r3, r3
 8016902:	76fb      	strb	r3, [r7, #27]
    }
#endif /* LWIP_IPV4 */
  }

  if (for_us) {
 8016904:	7efb      	ldrb	r3, [r7, #27]
 8016906:	2b00      	cmp	r3, #0
 8016908:	d041      	beq.n	801698e <udp_input+0x1fa>
          }
        }
      }
    }
#endif /* CHECKSUM_CHECK_UDP */
    if (pbuf_remove_header(p, UDP_HLEN)) {
 801690a:	2108      	movs	r1, #8
 801690c:	6878      	ldr	r0, [r7, #4]
 801690e:	f7fa f90d 	bl	8010b2c <pbuf_remove_header>
 8016912:	4603      	mov	r3, r0
 8016914:	2b00      	cmp	r3, #0
 8016916:	d00a      	beq.n	801692e <udp_input+0x19a>
      /* Can we cope with this failing? Just assert for now */
      LWIP_ASSERT("pbuf_remove_header failed\n", 0);
 8016918:	4b20      	ldr	r3, [pc, #128]	; (801699c <udp_input+0x208>)
 801691a:	f44f 72b8 	mov.w	r2, #368	; 0x170
 801691e:	4925      	ldr	r1, [pc, #148]	; (80169b4 <udp_input+0x220>)
 8016920:	4820      	ldr	r0, [pc, #128]	; (80169a4 <udp_input+0x210>)
 8016922:	f003 f8a1 	bl	8019a68 <iprintf>
      UDP_STATS_INC(udp.drop);
      MIB2_STATS_INC(mib2.udpinerrors);
      pbuf_free(p);
 8016926:	6878      	ldr	r0, [r7, #4]
 8016928:	f7fa f986 	bl	8010c38 <pbuf_free>
      goto end;
 801692c:	e032      	b.n	8016994 <udp_input+0x200>
    }

    if (pcb != NULL) {
 801692e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8016930:	2b00      	cmp	r3, #0
 8016932:	d012      	beq.n	801695a <udp_input+0x1c6>
          }
        }
      }
#endif /* SO_REUSE && SO_REUSE_RXTOALL */
      /* callback */
      if (pcb->recv != NULL) {
 8016934:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8016936:	699b      	ldr	r3, [r3, #24]
 8016938:	2b00      	cmp	r3, #0
 801693a:	d00a      	beq.n	8016952 <udp_input+0x1be>
        /* now the recv function is responsible for freeing p */
        pcb->recv(pcb->recv_arg, pcb, p, ip_current_src_addr(), src);
 801693c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801693e:	699c      	ldr	r4, [r3, #24]
 8016940:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8016942:	69d8      	ldr	r0, [r3, #28]
 8016944:	8a3b      	ldrh	r3, [r7, #16]
 8016946:	9300      	str	r3, [sp, #0]
 8016948:	4b1b      	ldr	r3, [pc, #108]	; (80169b8 <udp_input+0x224>)
 801694a:	687a      	ldr	r2, [r7, #4]
 801694c:	6a79      	ldr	r1, [r7, #36]	; 0x24
 801694e:	47a0      	blx	r4
  } else {
    pbuf_free(p);
  }
end:
  PERF_STOP("udp_input");
  return;
 8016950:	e021      	b.n	8016996 <udp_input+0x202>
        pbuf_free(p);
 8016952:	6878      	ldr	r0, [r7, #4]
 8016954:	f7fa f970 	bl	8010c38 <pbuf_free>
        goto end;
 8016958:	e01c      	b.n	8016994 <udp_input+0x200>
      if (!broadcast && !ip_addr_ismulticast(ip_current_dest_addr())) {
 801695a:	7cfb      	ldrb	r3, [r7, #19]
 801695c:	2b00      	cmp	r3, #0
 801695e:	d112      	bne.n	8016986 <udp_input+0x1f2>
 8016960:	4b12      	ldr	r3, [pc, #72]	; (80169ac <udp_input+0x218>)
 8016962:	695b      	ldr	r3, [r3, #20]
 8016964:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8016968:	2be0      	cmp	r3, #224	; 0xe0
 801696a:	d00c      	beq.n	8016986 <udp_input+0x1f2>
        pbuf_header_force(p, (s16_t)(ip_current_header_tot_len() + UDP_HLEN));
 801696c:	4b0f      	ldr	r3, [pc, #60]	; (80169ac <udp_input+0x218>)
 801696e:	899b      	ldrh	r3, [r3, #12]
 8016970:	3308      	adds	r3, #8
 8016972:	b29b      	uxth	r3, r3
 8016974:	b21b      	sxth	r3, r3
 8016976:	4619      	mov	r1, r3
 8016978:	6878      	ldr	r0, [r7, #4]
 801697a:	f7fa f94a 	bl	8010c12 <pbuf_header_force>
        icmp_port_unreach(ip_current_is_v6(), p);
 801697e:	2103      	movs	r1, #3
 8016980:	6878      	ldr	r0, [r7, #4]
 8016982:	f001 f8b7 	bl	8017af4 <icmp_dest_unreach>
      pbuf_free(p);
 8016986:	6878      	ldr	r0, [r7, #4]
 8016988:	f7fa f956 	bl	8010c38 <pbuf_free>
  return;
 801698c:	e003      	b.n	8016996 <udp_input+0x202>
    pbuf_free(p);
 801698e:	6878      	ldr	r0, [r7, #4]
 8016990:	f7fa f952 	bl	8010c38 <pbuf_free>
  return;
 8016994:	bf00      	nop
  UDP_STATS_INC(udp.drop);
  MIB2_STATS_INC(mib2.udpinerrors);
  pbuf_free(p);
  PERF_STOP("udp_input");
#endif /* CHECKSUM_CHECK_UDP */
}
 8016996:	372c      	adds	r7, #44	; 0x2c
 8016998:	46bd      	mov	sp, r7
 801699a:	bd90      	pop	{r4, r7, pc}
 801699c:	0801e1a0 	.word	0x0801e1a0
 80169a0:	0801e244 	.word	0x0801e244
 80169a4:	0801e1f4 	.word	0x0801e1f4
 80169a8:	0801e25c 	.word	0x0801e25c
 80169ac:	20000768 	.word	0x20000768
 80169b0:	200070a0 	.word	0x200070a0
 80169b4:	0801e278 	.word	0x0801e278
 80169b8:	20000778 	.word	0x20000778

080169bc <udp_netif_ip_addr_changed>:
 *
 * @param old_addr IP address of the netif before change
 * @param new_addr IP address of the netif after change
 */
void udp_netif_ip_addr_changed(const ip_addr_t *old_addr, const ip_addr_t *new_addr)
{
 80169bc:	b480      	push	{r7}
 80169be:	b085      	sub	sp, #20
 80169c0:	af00      	add	r7, sp, #0
 80169c2:	6078      	str	r0, [r7, #4]
 80169c4:	6039      	str	r1, [r7, #0]
  struct udp_pcb *upcb;

  if (!ip_addr_isany(old_addr) && !ip_addr_isany(new_addr)) {
 80169c6:	687b      	ldr	r3, [r7, #4]
 80169c8:	2b00      	cmp	r3, #0
 80169ca:	d01e      	beq.n	8016a0a <udp_netif_ip_addr_changed+0x4e>
 80169cc:	687b      	ldr	r3, [r7, #4]
 80169ce:	681b      	ldr	r3, [r3, #0]
 80169d0:	2b00      	cmp	r3, #0
 80169d2:	d01a      	beq.n	8016a0a <udp_netif_ip_addr_changed+0x4e>
 80169d4:	683b      	ldr	r3, [r7, #0]
 80169d6:	2b00      	cmp	r3, #0
 80169d8:	d017      	beq.n	8016a0a <udp_netif_ip_addr_changed+0x4e>
 80169da:	683b      	ldr	r3, [r7, #0]
 80169dc:	681b      	ldr	r3, [r3, #0]
 80169de:	2b00      	cmp	r3, #0
 80169e0:	d013      	beq.n	8016a0a <udp_netif_ip_addr_changed+0x4e>
    for (upcb = udp_pcbs; upcb != NULL; upcb = upcb->next) {
 80169e2:	4b0d      	ldr	r3, [pc, #52]	; (8016a18 <udp_netif_ip_addr_changed+0x5c>)
 80169e4:	681b      	ldr	r3, [r3, #0]
 80169e6:	60fb      	str	r3, [r7, #12]
 80169e8:	e00c      	b.n	8016a04 <udp_netif_ip_addr_changed+0x48>
      /* PCB bound to current local interface address? */
      if (ip_addr_cmp(&upcb->local_ip, old_addr)) {
 80169ea:	68fb      	ldr	r3, [r7, #12]
 80169ec:	681a      	ldr	r2, [r3, #0]
 80169ee:	687b      	ldr	r3, [r7, #4]
 80169f0:	681b      	ldr	r3, [r3, #0]
 80169f2:	429a      	cmp	r2, r3
 80169f4:	d103      	bne.n	80169fe <udp_netif_ip_addr_changed+0x42>
        /* The PCB is bound to the old ipaddr and
         * is set to bound to the new one instead */
        ip_addr_copy(upcb->local_ip, *new_addr);
 80169f6:	683b      	ldr	r3, [r7, #0]
 80169f8:	681a      	ldr	r2, [r3, #0]
 80169fa:	68fb      	ldr	r3, [r7, #12]
 80169fc:	601a      	str	r2, [r3, #0]
    for (upcb = udp_pcbs; upcb != NULL; upcb = upcb->next) {
 80169fe:	68fb      	ldr	r3, [r7, #12]
 8016a00:	68db      	ldr	r3, [r3, #12]
 8016a02:	60fb      	str	r3, [r7, #12]
 8016a04:	68fb      	ldr	r3, [r7, #12]
 8016a06:	2b00      	cmp	r3, #0
 8016a08:	d1ef      	bne.n	80169ea <udp_netif_ip_addr_changed+0x2e>
      }
    }
  }
}
 8016a0a:	bf00      	nop
 8016a0c:	3714      	adds	r7, #20
 8016a0e:	46bd      	mov	sp, r7
 8016a10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016a14:	4770      	bx	lr
 8016a16:	bf00      	nop
 8016a18:	200070a0 	.word	0x200070a0

08016a1c <etharp_free_entry>:
#endif /* ARP_QUEUEING */

/** Clean up ARP table entries */
static void
etharp_free_entry(int i)
{
 8016a1c:	b580      	push	{r7, lr}
 8016a1e:	b082      	sub	sp, #8
 8016a20:	af00      	add	r7, sp, #0
 8016a22:	6078      	str	r0, [r7, #4]
  /* remove from SNMP ARP index tree */
  mib2_remove_arp_entry(arp_table[i].netif, &arp_table[i].ipaddr);
  /* and empty packet queue */
  if (arp_table[i].q != NULL) {
 8016a24:	4915      	ldr	r1, [pc, #84]	; (8016a7c <etharp_free_entry+0x60>)
 8016a26:	687a      	ldr	r2, [r7, #4]
 8016a28:	4613      	mov	r3, r2
 8016a2a:	005b      	lsls	r3, r3, #1
 8016a2c:	4413      	add	r3, r2
 8016a2e:	00db      	lsls	r3, r3, #3
 8016a30:	440b      	add	r3, r1
 8016a32:	681b      	ldr	r3, [r3, #0]
 8016a34:	2b00      	cmp	r3, #0
 8016a36:	d013      	beq.n	8016a60 <etharp_free_entry+0x44>
    /* remove all queued packets */
    LWIP_DEBUGF(ETHARP_DEBUG, ("etharp_free_entry: freeing entry %"U16_F", packet queue %p.\n", (u16_t)i, (void *)(arp_table[i].q)));
    free_etharp_q(arp_table[i].q);
 8016a38:	4910      	ldr	r1, [pc, #64]	; (8016a7c <etharp_free_entry+0x60>)
 8016a3a:	687a      	ldr	r2, [r7, #4]
 8016a3c:	4613      	mov	r3, r2
 8016a3e:	005b      	lsls	r3, r3, #1
 8016a40:	4413      	add	r3, r2
 8016a42:	00db      	lsls	r3, r3, #3
 8016a44:	440b      	add	r3, r1
 8016a46:	681b      	ldr	r3, [r3, #0]
 8016a48:	4618      	mov	r0, r3
 8016a4a:	f7fa f8f5 	bl	8010c38 <pbuf_free>
    arp_table[i].q = NULL;
 8016a4e:	490b      	ldr	r1, [pc, #44]	; (8016a7c <etharp_free_entry+0x60>)
 8016a50:	687a      	ldr	r2, [r7, #4]
 8016a52:	4613      	mov	r3, r2
 8016a54:	005b      	lsls	r3, r3, #1
 8016a56:	4413      	add	r3, r2
 8016a58:	00db      	lsls	r3, r3, #3
 8016a5a:	440b      	add	r3, r1
 8016a5c:	2200      	movs	r2, #0
 8016a5e:	601a      	str	r2, [r3, #0]
  }
  /* recycle entry for re-use */
  arp_table[i].state = ETHARP_STATE_EMPTY;
 8016a60:	4906      	ldr	r1, [pc, #24]	; (8016a7c <etharp_free_entry+0x60>)
 8016a62:	687a      	ldr	r2, [r7, #4]
 8016a64:	4613      	mov	r3, r2
 8016a66:	005b      	lsls	r3, r3, #1
 8016a68:	4413      	add	r3, r2
 8016a6a:	00db      	lsls	r3, r3, #3
 8016a6c:	440b      	add	r3, r1
 8016a6e:	3314      	adds	r3, #20
 8016a70:	2200      	movs	r2, #0
 8016a72:	701a      	strb	r2, [r3, #0]
  arp_table[i].ctime = 0;
  arp_table[i].netif = NULL;
  ip4_addr_set_zero(&arp_table[i].ipaddr);
  arp_table[i].ethaddr = ethzero;
#endif /* LWIP_DEBUG */
}
 8016a74:	bf00      	nop
 8016a76:	3708      	adds	r7, #8
 8016a78:	46bd      	mov	sp, r7
 8016a7a:	bd80      	pop	{r7, pc}
 8016a7c:	200070a4 	.word	0x200070a4

08016a80 <etharp_tmr>:
 * This function should be called every ARP_TMR_INTERVAL milliseconds (1 second),
 * in order to expire entries in the ARP table.
 */
void
etharp_tmr(void)
{
 8016a80:	b580      	push	{r7, lr}
 8016a82:	b082      	sub	sp, #8
 8016a84:	af00      	add	r7, sp, #0
  int i;

  LWIP_DEBUGF(ETHARP_DEBUG, ("etharp_timer\n"));
  /* remove expired entries from the ARP table */
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 8016a86:	2300      	movs	r3, #0
 8016a88:	607b      	str	r3, [r7, #4]
 8016a8a:	e096      	b.n	8016bba <etharp_tmr+0x13a>
    u8_t state = arp_table[i].state;
 8016a8c:	494f      	ldr	r1, [pc, #316]	; (8016bcc <etharp_tmr+0x14c>)
 8016a8e:	687a      	ldr	r2, [r7, #4]
 8016a90:	4613      	mov	r3, r2
 8016a92:	005b      	lsls	r3, r3, #1
 8016a94:	4413      	add	r3, r2
 8016a96:	00db      	lsls	r3, r3, #3
 8016a98:	440b      	add	r3, r1
 8016a9a:	3314      	adds	r3, #20
 8016a9c:	781b      	ldrb	r3, [r3, #0]
 8016a9e:	70fb      	strb	r3, [r7, #3]
    if (state != ETHARP_STATE_EMPTY
 8016aa0:	78fb      	ldrb	r3, [r7, #3]
 8016aa2:	2b00      	cmp	r3, #0
 8016aa4:	f000 8086 	beq.w	8016bb4 <etharp_tmr+0x134>
#if ETHARP_SUPPORT_STATIC_ENTRIES
        && (state != ETHARP_STATE_STATIC)
#endif /* ETHARP_SUPPORT_STATIC_ENTRIES */
       ) {
      arp_table[i].ctime++;
 8016aa8:	4948      	ldr	r1, [pc, #288]	; (8016bcc <etharp_tmr+0x14c>)
 8016aaa:	687a      	ldr	r2, [r7, #4]
 8016aac:	4613      	mov	r3, r2
 8016aae:	005b      	lsls	r3, r3, #1
 8016ab0:	4413      	add	r3, r2
 8016ab2:	00db      	lsls	r3, r3, #3
 8016ab4:	440b      	add	r3, r1
 8016ab6:	3312      	adds	r3, #18
 8016ab8:	881b      	ldrh	r3, [r3, #0]
 8016aba:	3301      	adds	r3, #1
 8016abc:	b298      	uxth	r0, r3
 8016abe:	4943      	ldr	r1, [pc, #268]	; (8016bcc <etharp_tmr+0x14c>)
 8016ac0:	687a      	ldr	r2, [r7, #4]
 8016ac2:	4613      	mov	r3, r2
 8016ac4:	005b      	lsls	r3, r3, #1
 8016ac6:	4413      	add	r3, r2
 8016ac8:	00db      	lsls	r3, r3, #3
 8016aca:	440b      	add	r3, r1
 8016acc:	3312      	adds	r3, #18
 8016ace:	4602      	mov	r2, r0
 8016ad0:	801a      	strh	r2, [r3, #0]
      if ((arp_table[i].ctime >= ARP_MAXAGE) ||
 8016ad2:	493e      	ldr	r1, [pc, #248]	; (8016bcc <etharp_tmr+0x14c>)
 8016ad4:	687a      	ldr	r2, [r7, #4]
 8016ad6:	4613      	mov	r3, r2
 8016ad8:	005b      	lsls	r3, r3, #1
 8016ada:	4413      	add	r3, r2
 8016adc:	00db      	lsls	r3, r3, #3
 8016ade:	440b      	add	r3, r1
 8016ae0:	3312      	adds	r3, #18
 8016ae2:	881b      	ldrh	r3, [r3, #0]
 8016ae4:	f5b3 7f96 	cmp.w	r3, #300	; 0x12c
 8016ae8:	d215      	bcs.n	8016b16 <etharp_tmr+0x96>
          ((arp_table[i].state == ETHARP_STATE_PENDING)  &&
 8016aea:	4938      	ldr	r1, [pc, #224]	; (8016bcc <etharp_tmr+0x14c>)
 8016aec:	687a      	ldr	r2, [r7, #4]
 8016aee:	4613      	mov	r3, r2
 8016af0:	005b      	lsls	r3, r3, #1
 8016af2:	4413      	add	r3, r2
 8016af4:	00db      	lsls	r3, r3, #3
 8016af6:	440b      	add	r3, r1
 8016af8:	3314      	adds	r3, #20
 8016afa:	781b      	ldrb	r3, [r3, #0]
      if ((arp_table[i].ctime >= ARP_MAXAGE) ||
 8016afc:	2b01      	cmp	r3, #1
 8016afe:	d10e      	bne.n	8016b1e <etharp_tmr+0x9e>
           (arp_table[i].ctime >= ARP_MAXPENDING))) {
 8016b00:	4932      	ldr	r1, [pc, #200]	; (8016bcc <etharp_tmr+0x14c>)
 8016b02:	687a      	ldr	r2, [r7, #4]
 8016b04:	4613      	mov	r3, r2
 8016b06:	005b      	lsls	r3, r3, #1
 8016b08:	4413      	add	r3, r2
 8016b0a:	00db      	lsls	r3, r3, #3
 8016b0c:	440b      	add	r3, r1
 8016b0e:	3312      	adds	r3, #18
 8016b10:	881b      	ldrh	r3, [r3, #0]
          ((arp_table[i].state == ETHARP_STATE_PENDING)  &&
 8016b12:	2b04      	cmp	r3, #4
 8016b14:	d903      	bls.n	8016b1e <etharp_tmr+0x9e>
        /* pending or stable entry has become old! */
        LWIP_DEBUGF(ETHARP_DEBUG, ("etharp_timer: expired %s entry %d.\n",
                                   arp_table[i].state >= ETHARP_STATE_STABLE ? "stable" : "pending", i));
        /* clean up entries that have just been expired */
        etharp_free_entry(i);
 8016b16:	6878      	ldr	r0, [r7, #4]
 8016b18:	f7ff ff80 	bl	8016a1c <etharp_free_entry>
 8016b1c:	e04a      	b.n	8016bb4 <etharp_tmr+0x134>
      } else if (arp_table[i].state == ETHARP_STATE_STABLE_REREQUESTING_1) {
 8016b1e:	492b      	ldr	r1, [pc, #172]	; (8016bcc <etharp_tmr+0x14c>)
 8016b20:	687a      	ldr	r2, [r7, #4]
 8016b22:	4613      	mov	r3, r2
 8016b24:	005b      	lsls	r3, r3, #1
 8016b26:	4413      	add	r3, r2
 8016b28:	00db      	lsls	r3, r3, #3
 8016b2a:	440b      	add	r3, r1
 8016b2c:	3314      	adds	r3, #20
 8016b2e:	781b      	ldrb	r3, [r3, #0]
 8016b30:	2b03      	cmp	r3, #3
 8016b32:	d10a      	bne.n	8016b4a <etharp_tmr+0xca>
        /* Don't send more than one request every 2 seconds. */
        arp_table[i].state = ETHARP_STATE_STABLE_REREQUESTING_2;
 8016b34:	4925      	ldr	r1, [pc, #148]	; (8016bcc <etharp_tmr+0x14c>)
 8016b36:	687a      	ldr	r2, [r7, #4]
 8016b38:	4613      	mov	r3, r2
 8016b3a:	005b      	lsls	r3, r3, #1
 8016b3c:	4413      	add	r3, r2
 8016b3e:	00db      	lsls	r3, r3, #3
 8016b40:	440b      	add	r3, r1
 8016b42:	3314      	adds	r3, #20
 8016b44:	2204      	movs	r2, #4
 8016b46:	701a      	strb	r2, [r3, #0]
 8016b48:	e034      	b.n	8016bb4 <etharp_tmr+0x134>
      } else if (arp_table[i].state == ETHARP_STATE_STABLE_REREQUESTING_2) {
 8016b4a:	4920      	ldr	r1, [pc, #128]	; (8016bcc <etharp_tmr+0x14c>)
 8016b4c:	687a      	ldr	r2, [r7, #4]
 8016b4e:	4613      	mov	r3, r2
 8016b50:	005b      	lsls	r3, r3, #1
 8016b52:	4413      	add	r3, r2
 8016b54:	00db      	lsls	r3, r3, #3
 8016b56:	440b      	add	r3, r1
 8016b58:	3314      	adds	r3, #20
 8016b5a:	781b      	ldrb	r3, [r3, #0]
 8016b5c:	2b04      	cmp	r3, #4
 8016b5e:	d10a      	bne.n	8016b76 <etharp_tmr+0xf6>
        /* Reset state to stable, so that the next transmitted packet will
           re-send an ARP request. */
        arp_table[i].state = ETHARP_STATE_STABLE;
 8016b60:	491a      	ldr	r1, [pc, #104]	; (8016bcc <etharp_tmr+0x14c>)
 8016b62:	687a      	ldr	r2, [r7, #4]
 8016b64:	4613      	mov	r3, r2
 8016b66:	005b      	lsls	r3, r3, #1
 8016b68:	4413      	add	r3, r2
 8016b6a:	00db      	lsls	r3, r3, #3
 8016b6c:	440b      	add	r3, r1
 8016b6e:	3314      	adds	r3, #20
 8016b70:	2202      	movs	r2, #2
 8016b72:	701a      	strb	r2, [r3, #0]
 8016b74:	e01e      	b.n	8016bb4 <etharp_tmr+0x134>
      } else if (arp_table[i].state == ETHARP_STATE_PENDING) {
 8016b76:	4915      	ldr	r1, [pc, #84]	; (8016bcc <etharp_tmr+0x14c>)
 8016b78:	687a      	ldr	r2, [r7, #4]
 8016b7a:	4613      	mov	r3, r2
 8016b7c:	005b      	lsls	r3, r3, #1
 8016b7e:	4413      	add	r3, r2
 8016b80:	00db      	lsls	r3, r3, #3
 8016b82:	440b      	add	r3, r1
 8016b84:	3314      	adds	r3, #20
 8016b86:	781b      	ldrb	r3, [r3, #0]
 8016b88:	2b01      	cmp	r3, #1
 8016b8a:	d113      	bne.n	8016bb4 <etharp_tmr+0x134>
        /* still pending, resend an ARP query */
        etharp_request(arp_table[i].netif, &arp_table[i].ipaddr);
 8016b8c:	490f      	ldr	r1, [pc, #60]	; (8016bcc <etharp_tmr+0x14c>)
 8016b8e:	687a      	ldr	r2, [r7, #4]
 8016b90:	4613      	mov	r3, r2
 8016b92:	005b      	lsls	r3, r3, #1
 8016b94:	4413      	add	r3, r2
 8016b96:	00db      	lsls	r3, r3, #3
 8016b98:	440b      	add	r3, r1
 8016b9a:	3308      	adds	r3, #8
 8016b9c:	6818      	ldr	r0, [r3, #0]
 8016b9e:	687a      	ldr	r2, [r7, #4]
 8016ba0:	4613      	mov	r3, r2
 8016ba2:	005b      	lsls	r3, r3, #1
 8016ba4:	4413      	add	r3, r2
 8016ba6:	00db      	lsls	r3, r3, #3
 8016ba8:	4a08      	ldr	r2, [pc, #32]	; (8016bcc <etharp_tmr+0x14c>)
 8016baa:	4413      	add	r3, r2
 8016bac:	3304      	adds	r3, #4
 8016bae:	4619      	mov	r1, r3
 8016bb0:	f000 fe6e 	bl	8017890 <etharp_request>
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 8016bb4:	687b      	ldr	r3, [r7, #4]
 8016bb6:	3301      	adds	r3, #1
 8016bb8:	607b      	str	r3, [r7, #4]
 8016bba:	687b      	ldr	r3, [r7, #4]
 8016bbc:	2b09      	cmp	r3, #9
 8016bbe:	f77f af65 	ble.w	8016a8c <etharp_tmr+0xc>
      }
    }
  }
}
 8016bc2:	bf00      	nop
 8016bc4:	bf00      	nop
 8016bc6:	3708      	adds	r7, #8
 8016bc8:	46bd      	mov	sp, r7
 8016bca:	bd80      	pop	{r7, pc}
 8016bcc:	200070a4 	.word	0x200070a4

08016bd0 <etharp_find_entry>:
 * @return The ARP entry index that matched or is created, ERR_MEM if no
 * entry is found or could be recycled.
 */
static s16_t
etharp_find_entry(const ip4_addr_t *ipaddr, u8_t flags, struct netif *netif)
{
 8016bd0:	b580      	push	{r7, lr}
 8016bd2:	b08a      	sub	sp, #40	; 0x28
 8016bd4:	af00      	add	r7, sp, #0
 8016bd6:	60f8      	str	r0, [r7, #12]
 8016bd8:	460b      	mov	r3, r1
 8016bda:	607a      	str	r2, [r7, #4]
 8016bdc:	72fb      	strb	r3, [r7, #11]
  s16_t old_pending = ARP_TABLE_SIZE, old_stable = ARP_TABLE_SIZE;
 8016bde:	230a      	movs	r3, #10
 8016be0:	84fb      	strh	r3, [r7, #38]	; 0x26
 8016be2:	230a      	movs	r3, #10
 8016be4:	84bb      	strh	r3, [r7, #36]	; 0x24
  s16_t empty = ARP_TABLE_SIZE;
 8016be6:	230a      	movs	r3, #10
 8016be8:	847b      	strh	r3, [r7, #34]	; 0x22
  s16_t i = 0;
 8016bea:	2300      	movs	r3, #0
 8016bec:	843b      	strh	r3, [r7, #32]
  /* oldest entry with packets on queue */
  s16_t old_queue = ARP_TABLE_SIZE;
 8016bee:	230a      	movs	r3, #10
 8016bf0:	83fb      	strh	r3, [r7, #30]
  /* its age */
  u16_t age_queue = 0, age_pending = 0, age_stable = 0;
 8016bf2:	2300      	movs	r3, #0
 8016bf4:	83bb      	strh	r3, [r7, #28]
 8016bf6:	2300      	movs	r3, #0
 8016bf8:	837b      	strh	r3, [r7, #26]
 8016bfa:	2300      	movs	r3, #0
 8016bfc:	833b      	strh	r3, [r7, #24]
   * 4) remember the oldest pending entry with queued packets (if any)
   * 5) search for a matching IP entry, either pending or stable
   *    until 5 matches, or all entries are searched for.
   */

  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 8016bfe:	2300      	movs	r3, #0
 8016c00:	843b      	strh	r3, [r7, #32]
 8016c02:	e0ae      	b.n	8016d62 <etharp_find_entry+0x192>
    u8_t state = arp_table[i].state;
 8016c04:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8016c08:	49a6      	ldr	r1, [pc, #664]	; (8016ea4 <etharp_find_entry+0x2d4>)
 8016c0a:	4613      	mov	r3, r2
 8016c0c:	005b      	lsls	r3, r3, #1
 8016c0e:	4413      	add	r3, r2
 8016c10:	00db      	lsls	r3, r3, #3
 8016c12:	440b      	add	r3, r1
 8016c14:	3314      	adds	r3, #20
 8016c16:	781b      	ldrb	r3, [r3, #0]
 8016c18:	75fb      	strb	r3, [r7, #23]
    /* no empty entry found yet and now we do find one? */
    if ((empty == ARP_TABLE_SIZE) && (state == ETHARP_STATE_EMPTY)) {
 8016c1a:	f9b7 3022 	ldrsh.w	r3, [r7, #34]	; 0x22
 8016c1e:	2b0a      	cmp	r3, #10
 8016c20:	d105      	bne.n	8016c2e <etharp_find_entry+0x5e>
 8016c22:	7dfb      	ldrb	r3, [r7, #23]
 8016c24:	2b00      	cmp	r3, #0
 8016c26:	d102      	bne.n	8016c2e <etharp_find_entry+0x5e>
      LWIP_DEBUGF(ETHARP_DEBUG, ("etharp_find_entry: found empty entry %d\n", (int)i));
      /* remember first empty entry */
      empty = i;
 8016c28:	8c3b      	ldrh	r3, [r7, #32]
 8016c2a:	847b      	strh	r3, [r7, #34]	; 0x22
 8016c2c:	e095      	b.n	8016d5a <etharp_find_entry+0x18a>
    } else if (state != ETHARP_STATE_EMPTY) {
 8016c2e:	7dfb      	ldrb	r3, [r7, #23]
 8016c30:	2b00      	cmp	r3, #0
 8016c32:	f000 8092 	beq.w	8016d5a <etharp_find_entry+0x18a>
      LWIP_ASSERT("state == ETHARP_STATE_PENDING || state >= ETHARP_STATE_STABLE",
 8016c36:	7dfb      	ldrb	r3, [r7, #23]
 8016c38:	2b01      	cmp	r3, #1
 8016c3a:	d009      	beq.n	8016c50 <etharp_find_entry+0x80>
 8016c3c:	7dfb      	ldrb	r3, [r7, #23]
 8016c3e:	2b01      	cmp	r3, #1
 8016c40:	d806      	bhi.n	8016c50 <etharp_find_entry+0x80>
 8016c42:	4b99      	ldr	r3, [pc, #612]	; (8016ea8 <etharp_find_entry+0x2d8>)
 8016c44:	f240 1223 	movw	r2, #291	; 0x123
 8016c48:	4998      	ldr	r1, [pc, #608]	; (8016eac <etharp_find_entry+0x2dc>)
 8016c4a:	4899      	ldr	r0, [pc, #612]	; (8016eb0 <etharp_find_entry+0x2e0>)
 8016c4c:	f002 ff0c 	bl	8019a68 <iprintf>
                  state == ETHARP_STATE_PENDING || state >= ETHARP_STATE_STABLE);
      /* if given, does IP address match IP address in ARP entry? */
      if (ipaddr && ip4_addr_cmp(ipaddr, &arp_table[i].ipaddr)
 8016c50:	68fb      	ldr	r3, [r7, #12]
 8016c52:	2b00      	cmp	r3, #0
 8016c54:	d020      	beq.n	8016c98 <etharp_find_entry+0xc8>
 8016c56:	68fb      	ldr	r3, [r7, #12]
 8016c58:	6819      	ldr	r1, [r3, #0]
 8016c5a:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8016c5e:	4891      	ldr	r0, [pc, #580]	; (8016ea4 <etharp_find_entry+0x2d4>)
 8016c60:	4613      	mov	r3, r2
 8016c62:	005b      	lsls	r3, r3, #1
 8016c64:	4413      	add	r3, r2
 8016c66:	00db      	lsls	r3, r3, #3
 8016c68:	4403      	add	r3, r0
 8016c6a:	3304      	adds	r3, #4
 8016c6c:	681b      	ldr	r3, [r3, #0]
 8016c6e:	4299      	cmp	r1, r3
 8016c70:	d112      	bne.n	8016c98 <etharp_find_entry+0xc8>
#if ETHARP_TABLE_MATCH_NETIF
          && ((netif == NULL) || (netif == arp_table[i].netif))
 8016c72:	687b      	ldr	r3, [r7, #4]
 8016c74:	2b00      	cmp	r3, #0
 8016c76:	d00c      	beq.n	8016c92 <etharp_find_entry+0xc2>
 8016c78:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8016c7c:	4989      	ldr	r1, [pc, #548]	; (8016ea4 <etharp_find_entry+0x2d4>)
 8016c7e:	4613      	mov	r3, r2
 8016c80:	005b      	lsls	r3, r3, #1
 8016c82:	4413      	add	r3, r2
 8016c84:	00db      	lsls	r3, r3, #3
 8016c86:	440b      	add	r3, r1
 8016c88:	3308      	adds	r3, #8
 8016c8a:	681b      	ldr	r3, [r3, #0]
 8016c8c:	687a      	ldr	r2, [r7, #4]
 8016c8e:	429a      	cmp	r2, r3
 8016c90:	d102      	bne.n	8016c98 <etharp_find_entry+0xc8>
#endif /* ETHARP_TABLE_MATCH_NETIF */
         ) {
        LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: found matching entry %d\n", (int)i));
        /* found exact IP address match, simply bail out */
        return i;
 8016c92:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 8016c96:	e100      	b.n	8016e9a <etharp_find_entry+0x2ca>
      }
      /* pending entry? */
      if (state == ETHARP_STATE_PENDING) {
 8016c98:	7dfb      	ldrb	r3, [r7, #23]
 8016c9a:	2b01      	cmp	r3, #1
 8016c9c:	d140      	bne.n	8016d20 <etharp_find_entry+0x150>
        /* pending with queued packets? */
        if (arp_table[i].q != NULL) {
 8016c9e:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8016ca2:	4980      	ldr	r1, [pc, #512]	; (8016ea4 <etharp_find_entry+0x2d4>)
 8016ca4:	4613      	mov	r3, r2
 8016ca6:	005b      	lsls	r3, r3, #1
 8016ca8:	4413      	add	r3, r2
 8016caa:	00db      	lsls	r3, r3, #3
 8016cac:	440b      	add	r3, r1
 8016cae:	681b      	ldr	r3, [r3, #0]
 8016cb0:	2b00      	cmp	r3, #0
 8016cb2:	d01a      	beq.n	8016cea <etharp_find_entry+0x11a>
          if (arp_table[i].ctime >= age_queue) {
 8016cb4:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8016cb8:	497a      	ldr	r1, [pc, #488]	; (8016ea4 <etharp_find_entry+0x2d4>)
 8016cba:	4613      	mov	r3, r2
 8016cbc:	005b      	lsls	r3, r3, #1
 8016cbe:	4413      	add	r3, r2
 8016cc0:	00db      	lsls	r3, r3, #3
 8016cc2:	440b      	add	r3, r1
 8016cc4:	3312      	adds	r3, #18
 8016cc6:	881b      	ldrh	r3, [r3, #0]
 8016cc8:	8bba      	ldrh	r2, [r7, #28]
 8016cca:	429a      	cmp	r2, r3
 8016ccc:	d845      	bhi.n	8016d5a <etharp_find_entry+0x18a>
            old_queue = i;
 8016cce:	8c3b      	ldrh	r3, [r7, #32]
 8016cd0:	83fb      	strh	r3, [r7, #30]
            age_queue = arp_table[i].ctime;
 8016cd2:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8016cd6:	4973      	ldr	r1, [pc, #460]	; (8016ea4 <etharp_find_entry+0x2d4>)
 8016cd8:	4613      	mov	r3, r2
 8016cda:	005b      	lsls	r3, r3, #1
 8016cdc:	4413      	add	r3, r2
 8016cde:	00db      	lsls	r3, r3, #3
 8016ce0:	440b      	add	r3, r1
 8016ce2:	3312      	adds	r3, #18
 8016ce4:	881b      	ldrh	r3, [r3, #0]
 8016ce6:	83bb      	strh	r3, [r7, #28]
 8016ce8:	e037      	b.n	8016d5a <etharp_find_entry+0x18a>
          }
        } else
          /* pending without queued packets? */
        {
          if (arp_table[i].ctime >= age_pending) {
 8016cea:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8016cee:	496d      	ldr	r1, [pc, #436]	; (8016ea4 <etharp_find_entry+0x2d4>)
 8016cf0:	4613      	mov	r3, r2
 8016cf2:	005b      	lsls	r3, r3, #1
 8016cf4:	4413      	add	r3, r2
 8016cf6:	00db      	lsls	r3, r3, #3
 8016cf8:	440b      	add	r3, r1
 8016cfa:	3312      	adds	r3, #18
 8016cfc:	881b      	ldrh	r3, [r3, #0]
 8016cfe:	8b7a      	ldrh	r2, [r7, #26]
 8016d00:	429a      	cmp	r2, r3
 8016d02:	d82a      	bhi.n	8016d5a <etharp_find_entry+0x18a>
            old_pending = i;
 8016d04:	8c3b      	ldrh	r3, [r7, #32]
 8016d06:	84fb      	strh	r3, [r7, #38]	; 0x26
            age_pending = arp_table[i].ctime;
 8016d08:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8016d0c:	4965      	ldr	r1, [pc, #404]	; (8016ea4 <etharp_find_entry+0x2d4>)
 8016d0e:	4613      	mov	r3, r2
 8016d10:	005b      	lsls	r3, r3, #1
 8016d12:	4413      	add	r3, r2
 8016d14:	00db      	lsls	r3, r3, #3
 8016d16:	440b      	add	r3, r1
 8016d18:	3312      	adds	r3, #18
 8016d1a:	881b      	ldrh	r3, [r3, #0]
 8016d1c:	837b      	strh	r3, [r7, #26]
 8016d1e:	e01c      	b.n	8016d5a <etharp_find_entry+0x18a>
          }
        }
        /* stable entry? */
      } else if (state >= ETHARP_STATE_STABLE) {
 8016d20:	7dfb      	ldrb	r3, [r7, #23]
 8016d22:	2b01      	cmp	r3, #1
 8016d24:	d919      	bls.n	8016d5a <etharp_find_entry+0x18a>
        /* don't record old_stable for static entries since they never expire */
        if (state < ETHARP_STATE_STATIC)
#endif /* ETHARP_SUPPORT_STATIC_ENTRIES */
        {
          /* remember entry with oldest stable entry in oldest, its age in maxtime */
          if (arp_table[i].ctime >= age_stable) {
 8016d26:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8016d2a:	495e      	ldr	r1, [pc, #376]	; (8016ea4 <etharp_find_entry+0x2d4>)
 8016d2c:	4613      	mov	r3, r2
 8016d2e:	005b      	lsls	r3, r3, #1
 8016d30:	4413      	add	r3, r2
 8016d32:	00db      	lsls	r3, r3, #3
 8016d34:	440b      	add	r3, r1
 8016d36:	3312      	adds	r3, #18
 8016d38:	881b      	ldrh	r3, [r3, #0]
 8016d3a:	8b3a      	ldrh	r2, [r7, #24]
 8016d3c:	429a      	cmp	r2, r3
 8016d3e:	d80c      	bhi.n	8016d5a <etharp_find_entry+0x18a>
            old_stable = i;
 8016d40:	8c3b      	ldrh	r3, [r7, #32]
 8016d42:	84bb      	strh	r3, [r7, #36]	; 0x24
            age_stable = arp_table[i].ctime;
 8016d44:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8016d48:	4956      	ldr	r1, [pc, #344]	; (8016ea4 <etharp_find_entry+0x2d4>)
 8016d4a:	4613      	mov	r3, r2
 8016d4c:	005b      	lsls	r3, r3, #1
 8016d4e:	4413      	add	r3, r2
 8016d50:	00db      	lsls	r3, r3, #3
 8016d52:	440b      	add	r3, r1
 8016d54:	3312      	adds	r3, #18
 8016d56:	881b      	ldrh	r3, [r3, #0]
 8016d58:	833b      	strh	r3, [r7, #24]
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 8016d5a:	8c3b      	ldrh	r3, [r7, #32]
 8016d5c:	3301      	adds	r3, #1
 8016d5e:	b29b      	uxth	r3, r3
 8016d60:	843b      	strh	r3, [r7, #32]
 8016d62:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 8016d66:	2b09      	cmp	r3, #9
 8016d68:	f77f af4c 	ble.w	8016c04 <etharp_find_entry+0x34>
    }
  }
  /* { we have no match } => try to create a new entry */

  /* don't create new entry, only search? */
  if (((flags & ETHARP_FLAG_FIND_ONLY) != 0) ||
 8016d6c:	7afb      	ldrb	r3, [r7, #11]
 8016d6e:	f003 0302 	and.w	r3, r3, #2
 8016d72:	2b00      	cmp	r3, #0
 8016d74:	d108      	bne.n	8016d88 <etharp_find_entry+0x1b8>
 8016d76:	f9b7 3022 	ldrsh.w	r3, [r7, #34]	; 0x22
 8016d7a:	2b0a      	cmp	r3, #10
 8016d7c:	d107      	bne.n	8016d8e <etharp_find_entry+0x1be>
      /* or no empty entry found and not allowed to recycle? */
      ((empty == ARP_TABLE_SIZE) && ((flags & ETHARP_FLAG_TRY_HARD) == 0))) {
 8016d7e:	7afb      	ldrb	r3, [r7, #11]
 8016d80:	f003 0301 	and.w	r3, r3, #1
 8016d84:	2b00      	cmp	r3, #0
 8016d86:	d102      	bne.n	8016d8e <etharp_find_entry+0x1be>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: no empty entry found and not allowed to recycle\n"));
    return (s16_t)ERR_MEM;
 8016d88:	f04f 33ff 	mov.w	r3, #4294967295
 8016d8c:	e085      	b.n	8016e9a <etharp_find_entry+0x2ca>
   *
   * { ETHARP_FLAG_TRY_HARD is set at this point }
   */

  /* 1) empty entry available? */
  if (empty < ARP_TABLE_SIZE) {
 8016d8e:	f9b7 3022 	ldrsh.w	r3, [r7, #34]	; 0x22
 8016d92:	2b09      	cmp	r3, #9
 8016d94:	dc02      	bgt.n	8016d9c <etharp_find_entry+0x1cc>
    i = empty;
 8016d96:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8016d98:	843b      	strh	r3, [r7, #32]
 8016d9a:	e039      	b.n	8016e10 <etharp_find_entry+0x240>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: selecting empty entry %d\n", (int)i));
  } else {
    /* 2) found recyclable stable entry? */
    if (old_stable < ARP_TABLE_SIZE) {
 8016d9c:	f9b7 3024 	ldrsh.w	r3, [r7, #36]	; 0x24
 8016da0:	2b09      	cmp	r3, #9
 8016da2:	dc14      	bgt.n	8016dce <etharp_find_entry+0x1fe>
      /* recycle oldest stable*/
      i = old_stable;
 8016da4:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8016da6:	843b      	strh	r3, [r7, #32]
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: selecting oldest stable entry %d\n", (int)i));
      /* no queued packets should exist on stable entries */
      LWIP_ASSERT("arp_table[i].q == NULL", arp_table[i].q == NULL);
 8016da8:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8016dac:	493d      	ldr	r1, [pc, #244]	; (8016ea4 <etharp_find_entry+0x2d4>)
 8016dae:	4613      	mov	r3, r2
 8016db0:	005b      	lsls	r3, r3, #1
 8016db2:	4413      	add	r3, r2
 8016db4:	00db      	lsls	r3, r3, #3
 8016db6:	440b      	add	r3, r1
 8016db8:	681b      	ldr	r3, [r3, #0]
 8016dba:	2b00      	cmp	r3, #0
 8016dbc:	d018      	beq.n	8016df0 <etharp_find_entry+0x220>
 8016dbe:	4b3a      	ldr	r3, [pc, #232]	; (8016ea8 <etharp_find_entry+0x2d8>)
 8016dc0:	f240 126d 	movw	r2, #365	; 0x16d
 8016dc4:	493b      	ldr	r1, [pc, #236]	; (8016eb4 <etharp_find_entry+0x2e4>)
 8016dc6:	483a      	ldr	r0, [pc, #232]	; (8016eb0 <etharp_find_entry+0x2e0>)
 8016dc8:	f002 fe4e 	bl	8019a68 <iprintf>
 8016dcc:	e010      	b.n	8016df0 <etharp_find_entry+0x220>
      /* 3) found recyclable pending entry without queued packets? */
    } else if (old_pending < ARP_TABLE_SIZE) {
 8016dce:	f9b7 3026 	ldrsh.w	r3, [r7, #38]	; 0x26
 8016dd2:	2b09      	cmp	r3, #9
 8016dd4:	dc02      	bgt.n	8016ddc <etharp_find_entry+0x20c>
      /* recycle oldest pending */
      i = old_pending;
 8016dd6:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8016dd8:	843b      	strh	r3, [r7, #32]
 8016dda:	e009      	b.n	8016df0 <etharp_find_entry+0x220>
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: selecting oldest pending entry %d (without queue)\n", (int)i));
      /* 4) found recyclable pending entry with queued packets? */
    } else if (old_queue < ARP_TABLE_SIZE) {
 8016ddc:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
 8016de0:	2b09      	cmp	r3, #9
 8016de2:	dc02      	bgt.n	8016dea <etharp_find_entry+0x21a>
      /* recycle oldest pending (queued packets are free in etharp_free_entry) */
      i = old_queue;
 8016de4:	8bfb      	ldrh	r3, [r7, #30]
 8016de6:	843b      	strh	r3, [r7, #32]
 8016de8:	e002      	b.n	8016df0 <etharp_find_entry+0x220>
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: selecting oldest pending entry %d, freeing packet queue %p\n", (int)i, (void *)(arp_table[i].q)));
      /* no empty or recyclable entries found */
    } else {
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: no empty or recyclable entries found\n"));
      return (s16_t)ERR_MEM;
 8016dea:	f04f 33ff 	mov.w	r3, #4294967295
 8016dee:	e054      	b.n	8016e9a <etharp_find_entry+0x2ca>
    }

    /* { empty or recyclable entry found } */
    LWIP_ASSERT("i < ARP_TABLE_SIZE", i < ARP_TABLE_SIZE);
 8016df0:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 8016df4:	2b09      	cmp	r3, #9
 8016df6:	dd06      	ble.n	8016e06 <etharp_find_entry+0x236>
 8016df8:	4b2b      	ldr	r3, [pc, #172]	; (8016ea8 <etharp_find_entry+0x2d8>)
 8016dfa:	f240 127f 	movw	r2, #383	; 0x17f
 8016dfe:	492e      	ldr	r1, [pc, #184]	; (8016eb8 <etharp_find_entry+0x2e8>)
 8016e00:	482b      	ldr	r0, [pc, #172]	; (8016eb0 <etharp_find_entry+0x2e0>)
 8016e02:	f002 fe31 	bl	8019a68 <iprintf>
    etharp_free_entry(i);
 8016e06:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 8016e0a:	4618      	mov	r0, r3
 8016e0c:	f7ff fe06 	bl	8016a1c <etharp_free_entry>
  }

  LWIP_ASSERT("i < ARP_TABLE_SIZE", i < ARP_TABLE_SIZE);
 8016e10:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 8016e14:	2b09      	cmp	r3, #9
 8016e16:	dd06      	ble.n	8016e26 <etharp_find_entry+0x256>
 8016e18:	4b23      	ldr	r3, [pc, #140]	; (8016ea8 <etharp_find_entry+0x2d8>)
 8016e1a:	f240 1283 	movw	r2, #387	; 0x183
 8016e1e:	4926      	ldr	r1, [pc, #152]	; (8016eb8 <etharp_find_entry+0x2e8>)
 8016e20:	4823      	ldr	r0, [pc, #140]	; (8016eb0 <etharp_find_entry+0x2e0>)
 8016e22:	f002 fe21 	bl	8019a68 <iprintf>
  LWIP_ASSERT("arp_table[i].state == ETHARP_STATE_EMPTY",
 8016e26:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8016e2a:	491e      	ldr	r1, [pc, #120]	; (8016ea4 <etharp_find_entry+0x2d4>)
 8016e2c:	4613      	mov	r3, r2
 8016e2e:	005b      	lsls	r3, r3, #1
 8016e30:	4413      	add	r3, r2
 8016e32:	00db      	lsls	r3, r3, #3
 8016e34:	440b      	add	r3, r1
 8016e36:	3314      	adds	r3, #20
 8016e38:	781b      	ldrb	r3, [r3, #0]
 8016e3a:	2b00      	cmp	r3, #0
 8016e3c:	d006      	beq.n	8016e4c <etharp_find_entry+0x27c>
 8016e3e:	4b1a      	ldr	r3, [pc, #104]	; (8016ea8 <etharp_find_entry+0x2d8>)
 8016e40:	f44f 72c2 	mov.w	r2, #388	; 0x184
 8016e44:	491d      	ldr	r1, [pc, #116]	; (8016ebc <etharp_find_entry+0x2ec>)
 8016e46:	481a      	ldr	r0, [pc, #104]	; (8016eb0 <etharp_find_entry+0x2e0>)
 8016e48:	f002 fe0e 	bl	8019a68 <iprintf>
              arp_table[i].state == ETHARP_STATE_EMPTY);

  /* IP address given? */
  if (ipaddr != NULL) {
 8016e4c:	68fb      	ldr	r3, [r7, #12]
 8016e4e:	2b00      	cmp	r3, #0
 8016e50:	d00b      	beq.n	8016e6a <etharp_find_entry+0x29a>
    /* set IP address */
    ip4_addr_copy(arp_table[i].ipaddr, *ipaddr);
 8016e52:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8016e56:	68fb      	ldr	r3, [r7, #12]
 8016e58:	6819      	ldr	r1, [r3, #0]
 8016e5a:	4812      	ldr	r0, [pc, #72]	; (8016ea4 <etharp_find_entry+0x2d4>)
 8016e5c:	4613      	mov	r3, r2
 8016e5e:	005b      	lsls	r3, r3, #1
 8016e60:	4413      	add	r3, r2
 8016e62:	00db      	lsls	r3, r3, #3
 8016e64:	4403      	add	r3, r0
 8016e66:	3304      	adds	r3, #4
 8016e68:	6019      	str	r1, [r3, #0]
  }
  arp_table[i].ctime = 0;
 8016e6a:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8016e6e:	490d      	ldr	r1, [pc, #52]	; (8016ea4 <etharp_find_entry+0x2d4>)
 8016e70:	4613      	mov	r3, r2
 8016e72:	005b      	lsls	r3, r3, #1
 8016e74:	4413      	add	r3, r2
 8016e76:	00db      	lsls	r3, r3, #3
 8016e78:	440b      	add	r3, r1
 8016e7a:	3312      	adds	r3, #18
 8016e7c:	2200      	movs	r2, #0
 8016e7e:	801a      	strh	r2, [r3, #0]
#if ETHARP_TABLE_MATCH_NETIF
  arp_table[i].netif = netif;
 8016e80:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8016e84:	4907      	ldr	r1, [pc, #28]	; (8016ea4 <etharp_find_entry+0x2d4>)
 8016e86:	4613      	mov	r3, r2
 8016e88:	005b      	lsls	r3, r3, #1
 8016e8a:	4413      	add	r3, r2
 8016e8c:	00db      	lsls	r3, r3, #3
 8016e8e:	440b      	add	r3, r1
 8016e90:	3308      	adds	r3, #8
 8016e92:	687a      	ldr	r2, [r7, #4]
 8016e94:	601a      	str	r2, [r3, #0]
#endif /* ETHARP_TABLE_MATCH_NETIF */
  return (s16_t)i;
 8016e96:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
}
 8016e9a:	4618      	mov	r0, r3
 8016e9c:	3728      	adds	r7, #40	; 0x28
 8016e9e:	46bd      	mov	sp, r7
 8016ea0:	bd80      	pop	{r7, pc}
 8016ea2:	bf00      	nop
 8016ea4:	200070a4 	.word	0x200070a4
 8016ea8:	0801e504 	.word	0x0801e504
 8016eac:	0801e53c 	.word	0x0801e53c
 8016eb0:	0801e57c 	.word	0x0801e57c
 8016eb4:	0801e5a4 	.word	0x0801e5a4
 8016eb8:	0801e5bc 	.word	0x0801e5bc
 8016ebc:	0801e5d0 	.word	0x0801e5d0

08016ec0 <etharp_update_arp_entry>:
 *
 * @see pbuf_free()
 */
static err_t
etharp_update_arp_entry(struct netif *netif, const ip4_addr_t *ipaddr, struct eth_addr *ethaddr, u8_t flags)
{
 8016ec0:	b580      	push	{r7, lr}
 8016ec2:	b088      	sub	sp, #32
 8016ec4:	af02      	add	r7, sp, #8
 8016ec6:	60f8      	str	r0, [r7, #12]
 8016ec8:	60b9      	str	r1, [r7, #8]
 8016eca:	607a      	str	r2, [r7, #4]
 8016ecc:	70fb      	strb	r3, [r7, #3]
  s16_t i;
  LWIP_ASSERT("netif->hwaddr_len == ETH_HWADDR_LEN", netif->hwaddr_len == ETH_HWADDR_LEN);
 8016ece:	68fb      	ldr	r3, [r7, #12]
 8016ed0:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 8016ed4:	2b06      	cmp	r3, #6
 8016ed6:	d006      	beq.n	8016ee6 <etharp_update_arp_entry+0x26>
 8016ed8:	4b48      	ldr	r3, [pc, #288]	; (8016ffc <etharp_update_arp_entry+0x13c>)
 8016eda:	f240 12a9 	movw	r2, #425	; 0x1a9
 8016ede:	4948      	ldr	r1, [pc, #288]	; (8017000 <etharp_update_arp_entry+0x140>)
 8016ee0:	4848      	ldr	r0, [pc, #288]	; (8017004 <etharp_update_arp_entry+0x144>)
 8016ee2:	f002 fdc1 	bl	8019a68 <iprintf>
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_update_arp_entry: %"U16_F".%"U16_F".%"U16_F".%"U16_F" - %02"X16_F":%02"X16_F":%02"X16_F":%02"X16_F":%02"X16_F":%02"X16_F"\n",
              ip4_addr1_16(ipaddr), ip4_addr2_16(ipaddr), ip4_addr3_16(ipaddr), ip4_addr4_16(ipaddr),
              (u16_t)ethaddr->addr[0], (u16_t)ethaddr->addr[1], (u16_t)ethaddr->addr[2],
              (u16_t)ethaddr->addr[3], (u16_t)ethaddr->addr[4], (u16_t)ethaddr->addr[5]));
  /* non-unicast address? */
  if (ip4_addr_isany(ipaddr) ||
 8016ee6:	68bb      	ldr	r3, [r7, #8]
 8016ee8:	2b00      	cmp	r3, #0
 8016eea:	d012      	beq.n	8016f12 <etharp_update_arp_entry+0x52>
 8016eec:	68bb      	ldr	r3, [r7, #8]
 8016eee:	681b      	ldr	r3, [r3, #0]
 8016ef0:	2b00      	cmp	r3, #0
 8016ef2:	d00e      	beq.n	8016f12 <etharp_update_arp_entry+0x52>
      ip4_addr_isbroadcast(ipaddr, netif) ||
 8016ef4:	68bb      	ldr	r3, [r7, #8]
 8016ef6:	681b      	ldr	r3, [r3, #0]
 8016ef8:	68f9      	ldr	r1, [r7, #12]
 8016efa:	4618      	mov	r0, r3
 8016efc:	f001 f924 	bl	8018148 <ip4_addr_isbroadcast_u32>
 8016f00:	4603      	mov	r3, r0
  if (ip4_addr_isany(ipaddr) ||
 8016f02:	2b00      	cmp	r3, #0
 8016f04:	d105      	bne.n	8016f12 <etharp_update_arp_entry+0x52>
      ip4_addr_ismulticast(ipaddr)) {
 8016f06:	68bb      	ldr	r3, [r7, #8]
 8016f08:	681b      	ldr	r3, [r3, #0]
 8016f0a:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
      ip4_addr_isbroadcast(ipaddr, netif) ||
 8016f0e:	2be0      	cmp	r3, #224	; 0xe0
 8016f10:	d102      	bne.n	8016f18 <etharp_update_arp_entry+0x58>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_update_arp_entry: will not add non-unicast IP address to ARP cache\n"));
    return ERR_ARG;
 8016f12:	f06f 030f 	mvn.w	r3, #15
 8016f16:	e06c      	b.n	8016ff2 <etharp_update_arp_entry+0x132>
  }
  /* find or create ARP entry */
  i = etharp_find_entry(ipaddr, flags, netif);
 8016f18:	78fb      	ldrb	r3, [r7, #3]
 8016f1a:	68fa      	ldr	r2, [r7, #12]
 8016f1c:	4619      	mov	r1, r3
 8016f1e:	68b8      	ldr	r0, [r7, #8]
 8016f20:	f7ff fe56 	bl	8016bd0 <etharp_find_entry>
 8016f24:	4603      	mov	r3, r0
 8016f26:	82fb      	strh	r3, [r7, #22]
  /* bail out if no entry could be found */
  if (i < 0) {
 8016f28:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 8016f2c:	2b00      	cmp	r3, #0
 8016f2e:	da02      	bge.n	8016f36 <etharp_update_arp_entry+0x76>
    return (err_t)i;
 8016f30:	8afb      	ldrh	r3, [r7, #22]
 8016f32:	b25b      	sxtb	r3, r3
 8016f34:	e05d      	b.n	8016ff2 <etharp_update_arp_entry+0x132>
    return ERR_VAL;
  } else
#endif /* ETHARP_SUPPORT_STATIC_ENTRIES */
  {
    /* mark it stable */
    arp_table[i].state = ETHARP_STATE_STABLE;
 8016f36:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 8016f3a:	4933      	ldr	r1, [pc, #204]	; (8017008 <etharp_update_arp_entry+0x148>)
 8016f3c:	4613      	mov	r3, r2
 8016f3e:	005b      	lsls	r3, r3, #1
 8016f40:	4413      	add	r3, r2
 8016f42:	00db      	lsls	r3, r3, #3
 8016f44:	440b      	add	r3, r1
 8016f46:	3314      	adds	r3, #20
 8016f48:	2202      	movs	r2, #2
 8016f4a:	701a      	strb	r2, [r3, #0]
  }

  /* record network interface */
  arp_table[i].netif = netif;
 8016f4c:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 8016f50:	492d      	ldr	r1, [pc, #180]	; (8017008 <etharp_update_arp_entry+0x148>)
 8016f52:	4613      	mov	r3, r2
 8016f54:	005b      	lsls	r3, r3, #1
 8016f56:	4413      	add	r3, r2
 8016f58:	00db      	lsls	r3, r3, #3
 8016f5a:	440b      	add	r3, r1
 8016f5c:	3308      	adds	r3, #8
 8016f5e:	68fa      	ldr	r2, [r7, #12]
 8016f60:	601a      	str	r2, [r3, #0]
  /* insert in SNMP ARP index tree */
  mib2_add_arp_entry(netif, &arp_table[i].ipaddr);

  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_update_arp_entry: updating stable entry %"S16_F"\n", i));
  /* update address */
  SMEMCPY(&arp_table[i].ethaddr, ethaddr, ETH_HWADDR_LEN);
 8016f62:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 8016f66:	4613      	mov	r3, r2
 8016f68:	005b      	lsls	r3, r3, #1
 8016f6a:	4413      	add	r3, r2
 8016f6c:	00db      	lsls	r3, r3, #3
 8016f6e:	3308      	adds	r3, #8
 8016f70:	4a25      	ldr	r2, [pc, #148]	; (8017008 <etharp_update_arp_entry+0x148>)
 8016f72:	4413      	add	r3, r2
 8016f74:	3304      	adds	r3, #4
 8016f76:	2206      	movs	r2, #6
 8016f78:	6879      	ldr	r1, [r7, #4]
 8016f7a:	4618      	mov	r0, r3
 8016f7c:	f002 ff43 	bl	8019e06 <memcpy>
  /* reset time stamp */
  arp_table[i].ctime = 0;
 8016f80:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 8016f84:	4920      	ldr	r1, [pc, #128]	; (8017008 <etharp_update_arp_entry+0x148>)
 8016f86:	4613      	mov	r3, r2
 8016f88:	005b      	lsls	r3, r3, #1
 8016f8a:	4413      	add	r3, r2
 8016f8c:	00db      	lsls	r3, r3, #3
 8016f8e:	440b      	add	r3, r1
 8016f90:	3312      	adds	r3, #18
 8016f92:	2200      	movs	r2, #0
 8016f94:	801a      	strh	r2, [r3, #0]
    /* get the packet pointer */
    p = q->p;
    /* now queue entry can be freed */
    memp_free(MEMP_ARP_QUEUE, q);
#else /* ARP_QUEUEING */
  if (arp_table[i].q != NULL) {
 8016f96:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 8016f9a:	491b      	ldr	r1, [pc, #108]	; (8017008 <etharp_update_arp_entry+0x148>)
 8016f9c:	4613      	mov	r3, r2
 8016f9e:	005b      	lsls	r3, r3, #1
 8016fa0:	4413      	add	r3, r2
 8016fa2:	00db      	lsls	r3, r3, #3
 8016fa4:	440b      	add	r3, r1
 8016fa6:	681b      	ldr	r3, [r3, #0]
 8016fa8:	2b00      	cmp	r3, #0
 8016faa:	d021      	beq.n	8016ff0 <etharp_update_arp_entry+0x130>
    struct pbuf *p = arp_table[i].q;
 8016fac:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 8016fb0:	4915      	ldr	r1, [pc, #84]	; (8017008 <etharp_update_arp_entry+0x148>)
 8016fb2:	4613      	mov	r3, r2
 8016fb4:	005b      	lsls	r3, r3, #1
 8016fb6:	4413      	add	r3, r2
 8016fb8:	00db      	lsls	r3, r3, #3
 8016fba:	440b      	add	r3, r1
 8016fbc:	681b      	ldr	r3, [r3, #0]
 8016fbe:	613b      	str	r3, [r7, #16]
    arp_table[i].q = NULL;
 8016fc0:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 8016fc4:	4910      	ldr	r1, [pc, #64]	; (8017008 <etharp_update_arp_entry+0x148>)
 8016fc6:	4613      	mov	r3, r2
 8016fc8:	005b      	lsls	r3, r3, #1
 8016fca:	4413      	add	r3, r2
 8016fcc:	00db      	lsls	r3, r3, #3
 8016fce:	440b      	add	r3, r1
 8016fd0:	2200      	movs	r2, #0
 8016fd2:	601a      	str	r2, [r3, #0]
#endif /* ARP_QUEUEING */
    /* send the queued IP packet */
    ethernet_output(netif, p, (struct eth_addr *)(netif->hwaddr), ethaddr, ETHTYPE_IP);
 8016fd4:	68fb      	ldr	r3, [r7, #12]
 8016fd6:	f103 0226 	add.w	r2, r3, #38	; 0x26
 8016fda:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8016fde:	9300      	str	r3, [sp, #0]
 8016fe0:	687b      	ldr	r3, [r7, #4]
 8016fe2:	6939      	ldr	r1, [r7, #16]
 8016fe4:	68f8      	ldr	r0, [r7, #12]
 8016fe6:	f001 ffbd 	bl	8018f64 <ethernet_output>
    /* free the queued IP packet */
    pbuf_free(p);
 8016fea:	6938      	ldr	r0, [r7, #16]
 8016fec:	f7f9 fe24 	bl	8010c38 <pbuf_free>
  }
  return ERR_OK;
 8016ff0:	2300      	movs	r3, #0
}
 8016ff2:	4618      	mov	r0, r3
 8016ff4:	3718      	adds	r7, #24
 8016ff6:	46bd      	mov	sp, r7
 8016ff8:	bd80      	pop	{r7, pc}
 8016ffa:	bf00      	nop
 8016ffc:	0801e504 	.word	0x0801e504
 8017000:	0801e5fc 	.word	0x0801e5fc
 8017004:	0801e57c 	.word	0x0801e57c
 8017008:	200070a4 	.word	0x200070a4

0801700c <etharp_cleanup_netif>:
 *
 * @param netif points to a network interface
 */
void
etharp_cleanup_netif(struct netif *netif)
{
 801700c:	b580      	push	{r7, lr}
 801700e:	b084      	sub	sp, #16
 8017010:	af00      	add	r7, sp, #0
 8017012:	6078      	str	r0, [r7, #4]
  int i;

  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 8017014:	2300      	movs	r3, #0
 8017016:	60fb      	str	r3, [r7, #12]
 8017018:	e01e      	b.n	8017058 <etharp_cleanup_netif+0x4c>
    u8_t state = arp_table[i].state;
 801701a:	4913      	ldr	r1, [pc, #76]	; (8017068 <etharp_cleanup_netif+0x5c>)
 801701c:	68fa      	ldr	r2, [r7, #12]
 801701e:	4613      	mov	r3, r2
 8017020:	005b      	lsls	r3, r3, #1
 8017022:	4413      	add	r3, r2
 8017024:	00db      	lsls	r3, r3, #3
 8017026:	440b      	add	r3, r1
 8017028:	3314      	adds	r3, #20
 801702a:	781b      	ldrb	r3, [r3, #0]
 801702c:	72fb      	strb	r3, [r7, #11]
    if ((state != ETHARP_STATE_EMPTY) && (arp_table[i].netif == netif)) {
 801702e:	7afb      	ldrb	r3, [r7, #11]
 8017030:	2b00      	cmp	r3, #0
 8017032:	d00e      	beq.n	8017052 <etharp_cleanup_netif+0x46>
 8017034:	490c      	ldr	r1, [pc, #48]	; (8017068 <etharp_cleanup_netif+0x5c>)
 8017036:	68fa      	ldr	r2, [r7, #12]
 8017038:	4613      	mov	r3, r2
 801703a:	005b      	lsls	r3, r3, #1
 801703c:	4413      	add	r3, r2
 801703e:	00db      	lsls	r3, r3, #3
 8017040:	440b      	add	r3, r1
 8017042:	3308      	adds	r3, #8
 8017044:	681b      	ldr	r3, [r3, #0]
 8017046:	687a      	ldr	r2, [r7, #4]
 8017048:	429a      	cmp	r2, r3
 801704a:	d102      	bne.n	8017052 <etharp_cleanup_netif+0x46>
      etharp_free_entry(i);
 801704c:	68f8      	ldr	r0, [r7, #12]
 801704e:	f7ff fce5 	bl	8016a1c <etharp_free_entry>
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 8017052:	68fb      	ldr	r3, [r7, #12]
 8017054:	3301      	adds	r3, #1
 8017056:	60fb      	str	r3, [r7, #12]
 8017058:	68fb      	ldr	r3, [r7, #12]
 801705a:	2b09      	cmp	r3, #9
 801705c:	dddd      	ble.n	801701a <etharp_cleanup_netif+0xe>
    }
  }
}
 801705e:	bf00      	nop
 8017060:	bf00      	nop
 8017062:	3710      	adds	r7, #16
 8017064:	46bd      	mov	sp, r7
 8017066:	bd80      	pop	{r7, pc}
 8017068:	200070a4 	.word	0x200070a4

0801706c <etharp_input>:
 *
 * @see pbuf_free()
 */
void
etharp_input(struct pbuf *p, struct netif *netif)
{
 801706c:	b5b0      	push	{r4, r5, r7, lr}
 801706e:	b08a      	sub	sp, #40	; 0x28
 8017070:	af04      	add	r7, sp, #16
 8017072:	6078      	str	r0, [r7, #4]
 8017074:	6039      	str	r1, [r7, #0]
  ip4_addr_t sipaddr, dipaddr;
  u8_t for_us;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("netif != NULL", (netif != NULL), return;);
 8017076:	683b      	ldr	r3, [r7, #0]
 8017078:	2b00      	cmp	r3, #0
 801707a:	d107      	bne.n	801708c <etharp_input+0x20>
 801707c:	4b3d      	ldr	r3, [pc, #244]	; (8017174 <etharp_input+0x108>)
 801707e:	f240 228a 	movw	r2, #650	; 0x28a
 8017082:	493d      	ldr	r1, [pc, #244]	; (8017178 <etharp_input+0x10c>)
 8017084:	483d      	ldr	r0, [pc, #244]	; (801717c <etharp_input+0x110>)
 8017086:	f002 fcef 	bl	8019a68 <iprintf>
 801708a:	e06f      	b.n	801716c <etharp_input+0x100>

  hdr = (struct etharp_hdr *)p->payload;
 801708c:	687b      	ldr	r3, [r7, #4]
 801708e:	685b      	ldr	r3, [r3, #4]
 8017090:	613b      	str	r3, [r7, #16]

  /* RFC 826 "Packet Reception": */
  if ((hdr->hwtype != PP_HTONS(LWIP_IANA_HWTYPE_ETHERNET)) ||
 8017092:	693b      	ldr	r3, [r7, #16]
 8017094:	881b      	ldrh	r3, [r3, #0]
 8017096:	b29b      	uxth	r3, r3
 8017098:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 801709c:	d10c      	bne.n	80170b8 <etharp_input+0x4c>
      (hdr->hwlen != ETH_HWADDR_LEN) ||
 801709e:	693b      	ldr	r3, [r7, #16]
 80170a0:	791b      	ldrb	r3, [r3, #4]
  if ((hdr->hwtype != PP_HTONS(LWIP_IANA_HWTYPE_ETHERNET)) ||
 80170a2:	2b06      	cmp	r3, #6
 80170a4:	d108      	bne.n	80170b8 <etharp_input+0x4c>
      (hdr->protolen != sizeof(ip4_addr_t)) ||
 80170a6:	693b      	ldr	r3, [r7, #16]
 80170a8:	795b      	ldrb	r3, [r3, #5]
      (hdr->hwlen != ETH_HWADDR_LEN) ||
 80170aa:	2b04      	cmp	r3, #4
 80170ac:	d104      	bne.n	80170b8 <etharp_input+0x4c>
      (hdr->proto != PP_HTONS(ETHTYPE_IP)))  {
 80170ae:	693b      	ldr	r3, [r7, #16]
 80170b0:	885b      	ldrh	r3, [r3, #2]
 80170b2:	b29b      	uxth	r3, r3
      (hdr->protolen != sizeof(ip4_addr_t)) ||
 80170b4:	2b08      	cmp	r3, #8
 80170b6:	d003      	beq.n	80170c0 <etharp_input+0x54>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_WARNING,
                ("etharp_input: packet dropped, wrong hw type, hwlen, proto, protolen or ethernet type (%"U16_F"/%"U16_F"/%"U16_F"/%"U16_F")\n",
                 hdr->hwtype, (u16_t)hdr->hwlen, hdr->proto, (u16_t)hdr->protolen));
    ETHARP_STATS_INC(etharp.proterr);
    ETHARP_STATS_INC(etharp.drop);
    pbuf_free(p);
 80170b8:	6878      	ldr	r0, [r7, #4]
 80170ba:	f7f9 fdbd 	bl	8010c38 <pbuf_free>
    return;
 80170be:	e055      	b.n	801716c <etharp_input+0x100>
  autoip_arp_reply(netif, hdr);
#endif /* LWIP_AUTOIP */

  /* Copy struct ip4_addr_wordaligned to aligned ip4_addr, to support compilers without
   * structure packing (not using structure copy which breaks strict-aliasing rules). */
  IPADDR_WORDALIGNED_COPY_TO_IP4_ADDR_T(&sipaddr, &hdr->sipaddr);
 80170c0:	693b      	ldr	r3, [r7, #16]
 80170c2:	330e      	adds	r3, #14
 80170c4:	681b      	ldr	r3, [r3, #0]
 80170c6:	60fb      	str	r3, [r7, #12]
  IPADDR_WORDALIGNED_COPY_TO_IP4_ADDR_T(&dipaddr, &hdr->dipaddr);
 80170c8:	693b      	ldr	r3, [r7, #16]
 80170ca:	3318      	adds	r3, #24
 80170cc:	681b      	ldr	r3, [r3, #0]
 80170ce:	60bb      	str	r3, [r7, #8]

  /* this interface is not configured? */
  if (ip4_addr_isany_val(*netif_ip4_addr(netif))) {
 80170d0:	683b      	ldr	r3, [r7, #0]
 80170d2:	3304      	adds	r3, #4
 80170d4:	681b      	ldr	r3, [r3, #0]
 80170d6:	2b00      	cmp	r3, #0
 80170d8:	d102      	bne.n	80170e0 <etharp_input+0x74>
    for_us = 0;
 80170da:	2300      	movs	r3, #0
 80170dc:	75fb      	strb	r3, [r7, #23]
 80170de:	e009      	b.n	80170f4 <etharp_input+0x88>
  } else {
    /* ARP packet directed to us? */
    for_us = (u8_t)ip4_addr_cmp(&dipaddr, netif_ip4_addr(netif));
 80170e0:	68ba      	ldr	r2, [r7, #8]
 80170e2:	683b      	ldr	r3, [r7, #0]
 80170e4:	3304      	adds	r3, #4
 80170e6:	681b      	ldr	r3, [r3, #0]
 80170e8:	429a      	cmp	r2, r3
 80170ea:	bf0c      	ite	eq
 80170ec:	2301      	moveq	r3, #1
 80170ee:	2300      	movne	r3, #0
 80170f0:	b2db      	uxtb	r3, r3
 80170f2:	75fb      	strb	r3, [r7, #23]
  /* ARP message directed to us?
      -> add IP address in ARP cache; assume requester wants to talk to us,
         can result in directly sending the queued packets for this host.
     ARP message not directed to us?
      ->  update the source IP address in the cache, if present */
  etharp_update_arp_entry(netif, &sipaddr, &(hdr->shwaddr),
 80170f4:	693b      	ldr	r3, [r7, #16]
 80170f6:	f103 0208 	add.w	r2, r3, #8
 80170fa:	7dfb      	ldrb	r3, [r7, #23]
 80170fc:	2b00      	cmp	r3, #0
 80170fe:	d001      	beq.n	8017104 <etharp_input+0x98>
 8017100:	2301      	movs	r3, #1
 8017102:	e000      	b.n	8017106 <etharp_input+0x9a>
 8017104:	2302      	movs	r3, #2
 8017106:	f107 010c 	add.w	r1, r7, #12
 801710a:	6838      	ldr	r0, [r7, #0]
 801710c:	f7ff fed8 	bl	8016ec0 <etharp_update_arp_entry>
                          for_us ? ETHARP_FLAG_TRY_HARD : ETHARP_FLAG_FIND_ONLY);

  /* now act on the message itself */
  switch (hdr->opcode) {
 8017110:	693b      	ldr	r3, [r7, #16]
 8017112:	88db      	ldrh	r3, [r3, #6]
 8017114:	b29b      	uxth	r3, r3
 8017116:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 801711a:	d003      	beq.n	8017124 <etharp_input+0xb8>
 801711c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8017120:	d01e      	beq.n	8017160 <etharp_input+0xf4>
#endif /* (LWIP_DHCP && DHCP_DOES_ARP_CHECK) */
      break;
    default:
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_input: ARP unknown opcode type %"S16_F"\n", lwip_htons(hdr->opcode)));
      ETHARP_STATS_INC(etharp.err);
      break;
 8017122:	e020      	b.n	8017166 <etharp_input+0xfa>
      if (for_us) {
 8017124:	7dfb      	ldrb	r3, [r7, #23]
 8017126:	2b00      	cmp	r3, #0
 8017128:	d01c      	beq.n	8017164 <etharp_input+0xf8>
                   (struct eth_addr *)netif->hwaddr, &hdr->shwaddr,
 801712a:	683b      	ldr	r3, [r7, #0]
 801712c:	f103 0026 	add.w	r0, r3, #38	; 0x26
 8017130:	693b      	ldr	r3, [r7, #16]
 8017132:	f103 0408 	add.w	r4, r3, #8
                   (struct eth_addr *)netif->hwaddr, netif_ip4_addr(netif),
 8017136:	683b      	ldr	r3, [r7, #0]
 8017138:	f103 0526 	add.w	r5, r3, #38	; 0x26
 801713c:	683b      	ldr	r3, [r7, #0]
 801713e:	3304      	adds	r3, #4
                   &hdr->shwaddr, &sipaddr,
 8017140:	693a      	ldr	r2, [r7, #16]
 8017142:	3208      	adds	r2, #8
        etharp_raw(netif,
 8017144:	2102      	movs	r1, #2
 8017146:	9103      	str	r1, [sp, #12]
 8017148:	f107 010c 	add.w	r1, r7, #12
 801714c:	9102      	str	r1, [sp, #8]
 801714e:	9201      	str	r2, [sp, #4]
 8017150:	9300      	str	r3, [sp, #0]
 8017152:	462b      	mov	r3, r5
 8017154:	4622      	mov	r2, r4
 8017156:	4601      	mov	r1, r0
 8017158:	6838      	ldr	r0, [r7, #0]
 801715a:	f000 faeb 	bl	8017734 <etharp_raw>
      break;
 801715e:	e001      	b.n	8017164 <etharp_input+0xf8>
      break;
 8017160:	bf00      	nop
 8017162:	e000      	b.n	8017166 <etharp_input+0xfa>
      break;
 8017164:	bf00      	nop
  }
  /* free ARP packet */
  pbuf_free(p);
 8017166:	6878      	ldr	r0, [r7, #4]
 8017168:	f7f9 fd66 	bl	8010c38 <pbuf_free>
}
 801716c:	3718      	adds	r7, #24
 801716e:	46bd      	mov	sp, r7
 8017170:	bdb0      	pop	{r4, r5, r7, pc}
 8017172:	bf00      	nop
 8017174:	0801e504 	.word	0x0801e504
 8017178:	0801e654 	.word	0x0801e654
 801717c:	0801e57c 	.word	0x0801e57c

08017180 <etharp_output_to_arp_index>:
/** Just a small helper function that sends a pbuf to an ethernet address
 * in the arp_table specified by the index 'arp_idx'.
 */
static err_t
etharp_output_to_arp_index(struct netif *netif, struct pbuf *q, netif_addr_idx_t arp_idx)
{
 8017180:	b580      	push	{r7, lr}
 8017182:	b086      	sub	sp, #24
 8017184:	af02      	add	r7, sp, #8
 8017186:	60f8      	str	r0, [r7, #12]
 8017188:	60b9      	str	r1, [r7, #8]
 801718a:	4613      	mov	r3, r2
 801718c:	71fb      	strb	r3, [r7, #7]
  LWIP_ASSERT("arp_table[arp_idx].state >= ETHARP_STATE_STABLE",
 801718e:	79fa      	ldrb	r2, [r7, #7]
 8017190:	4944      	ldr	r1, [pc, #272]	; (80172a4 <etharp_output_to_arp_index+0x124>)
 8017192:	4613      	mov	r3, r2
 8017194:	005b      	lsls	r3, r3, #1
 8017196:	4413      	add	r3, r2
 8017198:	00db      	lsls	r3, r3, #3
 801719a:	440b      	add	r3, r1
 801719c:	3314      	adds	r3, #20
 801719e:	781b      	ldrb	r3, [r3, #0]
 80171a0:	2b01      	cmp	r3, #1
 80171a2:	d806      	bhi.n	80171b2 <etharp_output_to_arp_index+0x32>
 80171a4:	4b40      	ldr	r3, [pc, #256]	; (80172a8 <etharp_output_to_arp_index+0x128>)
 80171a6:	f240 22ee 	movw	r2, #750	; 0x2ee
 80171aa:	4940      	ldr	r1, [pc, #256]	; (80172ac <etharp_output_to_arp_index+0x12c>)
 80171ac:	4840      	ldr	r0, [pc, #256]	; (80172b0 <etharp_output_to_arp_index+0x130>)
 80171ae:	f002 fc5b 	bl	8019a68 <iprintf>
              arp_table[arp_idx].state >= ETHARP_STATE_STABLE);
  /* if arp table entry is about to expire: re-request it,
     but only if its state is ETHARP_STATE_STABLE to prevent flooding the
     network with ARP requests if this address is used frequently. */
  if (arp_table[arp_idx].state == ETHARP_STATE_STABLE) {
 80171b2:	79fa      	ldrb	r2, [r7, #7]
 80171b4:	493b      	ldr	r1, [pc, #236]	; (80172a4 <etharp_output_to_arp_index+0x124>)
 80171b6:	4613      	mov	r3, r2
 80171b8:	005b      	lsls	r3, r3, #1
 80171ba:	4413      	add	r3, r2
 80171bc:	00db      	lsls	r3, r3, #3
 80171be:	440b      	add	r3, r1
 80171c0:	3314      	adds	r3, #20
 80171c2:	781b      	ldrb	r3, [r3, #0]
 80171c4:	2b02      	cmp	r3, #2
 80171c6:	d153      	bne.n	8017270 <etharp_output_to_arp_index+0xf0>
    if (arp_table[arp_idx].ctime >= ARP_AGE_REREQUEST_USED_BROADCAST) {
 80171c8:	79fa      	ldrb	r2, [r7, #7]
 80171ca:	4936      	ldr	r1, [pc, #216]	; (80172a4 <etharp_output_to_arp_index+0x124>)
 80171cc:	4613      	mov	r3, r2
 80171ce:	005b      	lsls	r3, r3, #1
 80171d0:	4413      	add	r3, r2
 80171d2:	00db      	lsls	r3, r3, #3
 80171d4:	440b      	add	r3, r1
 80171d6:	3312      	adds	r3, #18
 80171d8:	881b      	ldrh	r3, [r3, #0]
 80171da:	f5b3 7f8e 	cmp.w	r3, #284	; 0x11c
 80171de:	d919      	bls.n	8017214 <etharp_output_to_arp_index+0x94>
      /* issue a standard request using broadcast */
      if (etharp_request(netif, &arp_table[arp_idx].ipaddr) == ERR_OK) {
 80171e0:	79fa      	ldrb	r2, [r7, #7]
 80171e2:	4613      	mov	r3, r2
 80171e4:	005b      	lsls	r3, r3, #1
 80171e6:	4413      	add	r3, r2
 80171e8:	00db      	lsls	r3, r3, #3
 80171ea:	4a2e      	ldr	r2, [pc, #184]	; (80172a4 <etharp_output_to_arp_index+0x124>)
 80171ec:	4413      	add	r3, r2
 80171ee:	3304      	adds	r3, #4
 80171f0:	4619      	mov	r1, r3
 80171f2:	68f8      	ldr	r0, [r7, #12]
 80171f4:	f000 fb4c 	bl	8017890 <etharp_request>
 80171f8:	4603      	mov	r3, r0
 80171fa:	2b00      	cmp	r3, #0
 80171fc:	d138      	bne.n	8017270 <etharp_output_to_arp_index+0xf0>
        arp_table[arp_idx].state = ETHARP_STATE_STABLE_REREQUESTING_1;
 80171fe:	79fa      	ldrb	r2, [r7, #7]
 8017200:	4928      	ldr	r1, [pc, #160]	; (80172a4 <etharp_output_to_arp_index+0x124>)
 8017202:	4613      	mov	r3, r2
 8017204:	005b      	lsls	r3, r3, #1
 8017206:	4413      	add	r3, r2
 8017208:	00db      	lsls	r3, r3, #3
 801720a:	440b      	add	r3, r1
 801720c:	3314      	adds	r3, #20
 801720e:	2203      	movs	r2, #3
 8017210:	701a      	strb	r2, [r3, #0]
 8017212:	e02d      	b.n	8017270 <etharp_output_to_arp_index+0xf0>
      }
    } else if (arp_table[arp_idx].ctime >= ARP_AGE_REREQUEST_USED_UNICAST) {
 8017214:	79fa      	ldrb	r2, [r7, #7]
 8017216:	4923      	ldr	r1, [pc, #140]	; (80172a4 <etharp_output_to_arp_index+0x124>)
 8017218:	4613      	mov	r3, r2
 801721a:	005b      	lsls	r3, r3, #1
 801721c:	4413      	add	r3, r2
 801721e:	00db      	lsls	r3, r3, #3
 8017220:	440b      	add	r3, r1
 8017222:	3312      	adds	r3, #18
 8017224:	881b      	ldrh	r3, [r3, #0]
 8017226:	f5b3 7f87 	cmp.w	r3, #270	; 0x10e
 801722a:	d321      	bcc.n	8017270 <etharp_output_to_arp_index+0xf0>
      /* issue a unicast request (for 15 seconds) to prevent unnecessary broadcast */
      if (etharp_request_dst(netif, &arp_table[arp_idx].ipaddr, &arp_table[arp_idx].ethaddr) == ERR_OK) {
 801722c:	79fa      	ldrb	r2, [r7, #7]
 801722e:	4613      	mov	r3, r2
 8017230:	005b      	lsls	r3, r3, #1
 8017232:	4413      	add	r3, r2
 8017234:	00db      	lsls	r3, r3, #3
 8017236:	4a1b      	ldr	r2, [pc, #108]	; (80172a4 <etharp_output_to_arp_index+0x124>)
 8017238:	4413      	add	r3, r2
 801723a:	1d19      	adds	r1, r3, #4
 801723c:	79fa      	ldrb	r2, [r7, #7]
 801723e:	4613      	mov	r3, r2
 8017240:	005b      	lsls	r3, r3, #1
 8017242:	4413      	add	r3, r2
 8017244:	00db      	lsls	r3, r3, #3
 8017246:	3308      	adds	r3, #8
 8017248:	4a16      	ldr	r2, [pc, #88]	; (80172a4 <etharp_output_to_arp_index+0x124>)
 801724a:	4413      	add	r3, r2
 801724c:	3304      	adds	r3, #4
 801724e:	461a      	mov	r2, r3
 8017250:	68f8      	ldr	r0, [r7, #12]
 8017252:	f000 fafb 	bl	801784c <etharp_request_dst>
 8017256:	4603      	mov	r3, r0
 8017258:	2b00      	cmp	r3, #0
 801725a:	d109      	bne.n	8017270 <etharp_output_to_arp_index+0xf0>
        arp_table[arp_idx].state = ETHARP_STATE_STABLE_REREQUESTING_1;
 801725c:	79fa      	ldrb	r2, [r7, #7]
 801725e:	4911      	ldr	r1, [pc, #68]	; (80172a4 <etharp_output_to_arp_index+0x124>)
 8017260:	4613      	mov	r3, r2
 8017262:	005b      	lsls	r3, r3, #1
 8017264:	4413      	add	r3, r2
 8017266:	00db      	lsls	r3, r3, #3
 8017268:	440b      	add	r3, r1
 801726a:	3314      	adds	r3, #20
 801726c:	2203      	movs	r2, #3
 801726e:	701a      	strb	r2, [r3, #0]
      }
    }
  }

  return ethernet_output(netif, q, (struct eth_addr *)(netif->hwaddr), &arp_table[arp_idx].ethaddr, ETHTYPE_IP);
 8017270:	68fb      	ldr	r3, [r7, #12]
 8017272:	f103 0126 	add.w	r1, r3, #38	; 0x26
 8017276:	79fa      	ldrb	r2, [r7, #7]
 8017278:	4613      	mov	r3, r2
 801727a:	005b      	lsls	r3, r3, #1
 801727c:	4413      	add	r3, r2
 801727e:	00db      	lsls	r3, r3, #3
 8017280:	3308      	adds	r3, #8
 8017282:	4a08      	ldr	r2, [pc, #32]	; (80172a4 <etharp_output_to_arp_index+0x124>)
 8017284:	4413      	add	r3, r2
 8017286:	3304      	adds	r3, #4
 8017288:	f44f 6200 	mov.w	r2, #2048	; 0x800
 801728c:	9200      	str	r2, [sp, #0]
 801728e:	460a      	mov	r2, r1
 8017290:	68b9      	ldr	r1, [r7, #8]
 8017292:	68f8      	ldr	r0, [r7, #12]
 8017294:	f001 fe66 	bl	8018f64 <ethernet_output>
 8017298:	4603      	mov	r3, r0
}
 801729a:	4618      	mov	r0, r3
 801729c:	3710      	adds	r7, #16
 801729e:	46bd      	mov	sp, r7
 80172a0:	bd80      	pop	{r7, pc}
 80172a2:	bf00      	nop
 80172a4:	200070a4 	.word	0x200070a4
 80172a8:	0801e504 	.word	0x0801e504
 80172ac:	0801e674 	.word	0x0801e674
 80172b0:	0801e57c 	.word	0x0801e57c

080172b4 <etharp_output>:
 * - ERR_RTE No route to destination (no gateway to external networks),
 * or the return type of either etharp_query() or ethernet_output().
 */
err_t
etharp_output(struct netif *netif, struct pbuf *q, const ip4_addr_t *ipaddr)
{
 80172b4:	b580      	push	{r7, lr}
 80172b6:	b08a      	sub	sp, #40	; 0x28
 80172b8:	af02      	add	r7, sp, #8
 80172ba:	60f8      	str	r0, [r7, #12]
 80172bc:	60b9      	str	r1, [r7, #8]
 80172be:	607a      	str	r2, [r7, #4]
  const struct eth_addr *dest;
  struct eth_addr mcastaddr;
  const ip4_addr_t *dst_addr = ipaddr;
 80172c0:	687b      	ldr	r3, [r7, #4]
 80172c2:	61bb      	str	r3, [r7, #24]

  LWIP_ASSERT_CORE_LOCKED();
  LWIP_ASSERT("netif != NULL", netif != NULL);
 80172c4:	68fb      	ldr	r3, [r7, #12]
 80172c6:	2b00      	cmp	r3, #0
 80172c8:	d106      	bne.n	80172d8 <etharp_output+0x24>
 80172ca:	4b73      	ldr	r3, [pc, #460]	; (8017498 <etharp_output+0x1e4>)
 80172cc:	f240 321e 	movw	r2, #798	; 0x31e
 80172d0:	4972      	ldr	r1, [pc, #456]	; (801749c <etharp_output+0x1e8>)
 80172d2:	4873      	ldr	r0, [pc, #460]	; (80174a0 <etharp_output+0x1ec>)
 80172d4:	f002 fbc8 	bl	8019a68 <iprintf>
  LWIP_ASSERT("q != NULL", q != NULL);
 80172d8:	68bb      	ldr	r3, [r7, #8]
 80172da:	2b00      	cmp	r3, #0
 80172dc:	d106      	bne.n	80172ec <etharp_output+0x38>
 80172de:	4b6e      	ldr	r3, [pc, #440]	; (8017498 <etharp_output+0x1e4>)
 80172e0:	f240 321f 	movw	r2, #799	; 0x31f
 80172e4:	496f      	ldr	r1, [pc, #444]	; (80174a4 <etharp_output+0x1f0>)
 80172e6:	486e      	ldr	r0, [pc, #440]	; (80174a0 <etharp_output+0x1ec>)
 80172e8:	f002 fbbe 	bl	8019a68 <iprintf>
  LWIP_ASSERT("ipaddr != NULL", ipaddr != NULL);
 80172ec:	687b      	ldr	r3, [r7, #4]
 80172ee:	2b00      	cmp	r3, #0
 80172f0:	d106      	bne.n	8017300 <etharp_output+0x4c>
 80172f2:	4b69      	ldr	r3, [pc, #420]	; (8017498 <etharp_output+0x1e4>)
 80172f4:	f44f 7248 	mov.w	r2, #800	; 0x320
 80172f8:	496b      	ldr	r1, [pc, #428]	; (80174a8 <etharp_output+0x1f4>)
 80172fa:	4869      	ldr	r0, [pc, #420]	; (80174a0 <etharp_output+0x1ec>)
 80172fc:	f002 fbb4 	bl	8019a68 <iprintf>

  /* Determine on destination hardware address. Broadcasts and multicasts
   * are special, other IP addresses are looked up in the ARP table. */

  /* broadcast destination IP address? */
  if (ip4_addr_isbroadcast(ipaddr, netif)) {
 8017300:	687b      	ldr	r3, [r7, #4]
 8017302:	681b      	ldr	r3, [r3, #0]
 8017304:	68f9      	ldr	r1, [r7, #12]
 8017306:	4618      	mov	r0, r3
 8017308:	f000 ff1e 	bl	8018148 <ip4_addr_isbroadcast_u32>
 801730c:	4603      	mov	r3, r0
 801730e:	2b00      	cmp	r3, #0
 8017310:	d002      	beq.n	8017318 <etharp_output+0x64>
    /* broadcast on Ethernet also */
    dest = (const struct eth_addr *)&ethbroadcast;
 8017312:	4b66      	ldr	r3, [pc, #408]	; (80174ac <etharp_output+0x1f8>)
 8017314:	61fb      	str	r3, [r7, #28]
 8017316:	e0af      	b.n	8017478 <etharp_output+0x1c4>
    /* multicast destination IP address? */
  } else if (ip4_addr_ismulticast(ipaddr)) {
 8017318:	687b      	ldr	r3, [r7, #4]
 801731a:	681b      	ldr	r3, [r3, #0]
 801731c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8017320:	2be0      	cmp	r3, #224	; 0xe0
 8017322:	d118      	bne.n	8017356 <etharp_output+0xa2>
    /* Hash IP multicast address to MAC address.*/
    mcastaddr.addr[0] = LL_IP4_MULTICAST_ADDR_0;
 8017324:	2301      	movs	r3, #1
 8017326:	743b      	strb	r3, [r7, #16]
    mcastaddr.addr[1] = LL_IP4_MULTICAST_ADDR_1;
 8017328:	2300      	movs	r3, #0
 801732a:	747b      	strb	r3, [r7, #17]
    mcastaddr.addr[2] = LL_IP4_MULTICAST_ADDR_2;
 801732c:	235e      	movs	r3, #94	; 0x5e
 801732e:	74bb      	strb	r3, [r7, #18]
    mcastaddr.addr[3] = ip4_addr2(ipaddr) & 0x7f;
 8017330:	687b      	ldr	r3, [r7, #4]
 8017332:	3301      	adds	r3, #1
 8017334:	781b      	ldrb	r3, [r3, #0]
 8017336:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 801733a:	b2db      	uxtb	r3, r3
 801733c:	74fb      	strb	r3, [r7, #19]
    mcastaddr.addr[4] = ip4_addr3(ipaddr);
 801733e:	687b      	ldr	r3, [r7, #4]
 8017340:	3302      	adds	r3, #2
 8017342:	781b      	ldrb	r3, [r3, #0]
 8017344:	753b      	strb	r3, [r7, #20]
    mcastaddr.addr[5] = ip4_addr4(ipaddr);
 8017346:	687b      	ldr	r3, [r7, #4]
 8017348:	3303      	adds	r3, #3
 801734a:	781b      	ldrb	r3, [r3, #0]
 801734c:	757b      	strb	r3, [r7, #21]
    /* destination Ethernet address is multicast */
    dest = &mcastaddr;
 801734e:	f107 0310 	add.w	r3, r7, #16
 8017352:	61fb      	str	r3, [r7, #28]
 8017354:	e090      	b.n	8017478 <etharp_output+0x1c4>
    /* unicast destination IP address? */
  } else {
    netif_addr_idx_t i;
    /* outside local network? if so, this can neither be a global broadcast nor
       a subnet broadcast. */
    if (!ip4_addr_netcmp(ipaddr, netif_ip4_addr(netif), netif_ip4_netmask(netif)) &&
 8017356:	687b      	ldr	r3, [r7, #4]
 8017358:	681a      	ldr	r2, [r3, #0]
 801735a:	68fb      	ldr	r3, [r7, #12]
 801735c:	3304      	adds	r3, #4
 801735e:	681b      	ldr	r3, [r3, #0]
 8017360:	405a      	eors	r2, r3
 8017362:	68fb      	ldr	r3, [r7, #12]
 8017364:	3308      	adds	r3, #8
 8017366:	681b      	ldr	r3, [r3, #0]
 8017368:	4013      	ands	r3, r2
 801736a:	2b00      	cmp	r3, #0
 801736c:	d012      	beq.n	8017394 <etharp_output+0xe0>
        !ip4_addr_islinklocal(ipaddr)) {
 801736e:	687b      	ldr	r3, [r7, #4]
 8017370:	681b      	ldr	r3, [r3, #0]
 8017372:	b29b      	uxth	r3, r3
    if (!ip4_addr_netcmp(ipaddr, netif_ip4_addr(netif), netif_ip4_netmask(netif)) &&
 8017374:	f64f 62a9 	movw	r2, #65193	; 0xfea9
 8017378:	4293      	cmp	r3, r2
 801737a:	d00b      	beq.n	8017394 <etharp_output+0xe0>
        dst_addr = LWIP_HOOK_ETHARP_GET_GW(netif, ipaddr);
        if (dst_addr == NULL)
#endif /* LWIP_HOOK_ETHARP_GET_GW */
        {
          /* interface has default gateway? */
          if (!ip4_addr_isany_val(*netif_ip4_gw(netif))) {
 801737c:	68fb      	ldr	r3, [r7, #12]
 801737e:	330c      	adds	r3, #12
 8017380:	681b      	ldr	r3, [r3, #0]
 8017382:	2b00      	cmp	r3, #0
 8017384:	d003      	beq.n	801738e <etharp_output+0xda>
            /* send to hardware address of default gateway IP address */
            dst_addr = netif_ip4_gw(netif);
 8017386:	68fb      	ldr	r3, [r7, #12]
 8017388:	330c      	adds	r3, #12
 801738a:	61bb      	str	r3, [r7, #24]
 801738c:	e002      	b.n	8017394 <etharp_output+0xe0>
            /* no default gateway available */
          } else {
            /* no route to destination error (default gateway missing) */
            return ERR_RTE;
 801738e:	f06f 0303 	mvn.w	r3, #3
 8017392:	e07d      	b.n	8017490 <etharp_output+0x1dc>
    if (netif->hints != NULL) {
      /* per-pcb cached entry was given */
      netif_addr_idx_t etharp_cached_entry = netif->hints->addr_hint;
      if (etharp_cached_entry < ARP_TABLE_SIZE) {
#endif /* LWIP_NETIF_HWADDRHINT */
        if ((arp_table[etharp_cached_entry].state >= ETHARP_STATE_STABLE) &&
 8017394:	4b46      	ldr	r3, [pc, #280]	; (80174b0 <etharp_output+0x1fc>)
 8017396:	781b      	ldrb	r3, [r3, #0]
 8017398:	4619      	mov	r1, r3
 801739a:	4a46      	ldr	r2, [pc, #280]	; (80174b4 <etharp_output+0x200>)
 801739c:	460b      	mov	r3, r1
 801739e:	005b      	lsls	r3, r3, #1
 80173a0:	440b      	add	r3, r1
 80173a2:	00db      	lsls	r3, r3, #3
 80173a4:	4413      	add	r3, r2
 80173a6:	3314      	adds	r3, #20
 80173a8:	781b      	ldrb	r3, [r3, #0]
 80173aa:	2b01      	cmp	r3, #1
 80173ac:	d925      	bls.n	80173fa <etharp_output+0x146>
#if ETHARP_TABLE_MATCH_NETIF
            (arp_table[etharp_cached_entry].netif == netif) &&
 80173ae:	4b40      	ldr	r3, [pc, #256]	; (80174b0 <etharp_output+0x1fc>)
 80173b0:	781b      	ldrb	r3, [r3, #0]
 80173b2:	4619      	mov	r1, r3
 80173b4:	4a3f      	ldr	r2, [pc, #252]	; (80174b4 <etharp_output+0x200>)
 80173b6:	460b      	mov	r3, r1
 80173b8:	005b      	lsls	r3, r3, #1
 80173ba:	440b      	add	r3, r1
 80173bc:	00db      	lsls	r3, r3, #3
 80173be:	4413      	add	r3, r2
 80173c0:	3308      	adds	r3, #8
 80173c2:	681b      	ldr	r3, [r3, #0]
        if ((arp_table[etharp_cached_entry].state >= ETHARP_STATE_STABLE) &&
 80173c4:	68fa      	ldr	r2, [r7, #12]
 80173c6:	429a      	cmp	r2, r3
 80173c8:	d117      	bne.n	80173fa <etharp_output+0x146>
#endif
            (ip4_addr_cmp(dst_addr, &arp_table[etharp_cached_entry].ipaddr))) {
 80173ca:	69bb      	ldr	r3, [r7, #24]
 80173cc:	681a      	ldr	r2, [r3, #0]
 80173ce:	4b38      	ldr	r3, [pc, #224]	; (80174b0 <etharp_output+0x1fc>)
 80173d0:	781b      	ldrb	r3, [r3, #0]
 80173d2:	4618      	mov	r0, r3
 80173d4:	4937      	ldr	r1, [pc, #220]	; (80174b4 <etharp_output+0x200>)
 80173d6:	4603      	mov	r3, r0
 80173d8:	005b      	lsls	r3, r3, #1
 80173da:	4403      	add	r3, r0
 80173dc:	00db      	lsls	r3, r3, #3
 80173de:	440b      	add	r3, r1
 80173e0:	3304      	adds	r3, #4
 80173e2:	681b      	ldr	r3, [r3, #0]
            (arp_table[etharp_cached_entry].netif == netif) &&
 80173e4:	429a      	cmp	r2, r3
 80173e6:	d108      	bne.n	80173fa <etharp_output+0x146>
          /* the per-pcb-cached entry is stable and the right one! */
          ETHARP_STATS_INC(etharp.cachehit);
          return etharp_output_to_arp_index(netif, q, etharp_cached_entry);
 80173e8:	4b31      	ldr	r3, [pc, #196]	; (80174b0 <etharp_output+0x1fc>)
 80173ea:	781b      	ldrb	r3, [r3, #0]
 80173ec:	461a      	mov	r2, r3
 80173ee:	68b9      	ldr	r1, [r7, #8]
 80173f0:	68f8      	ldr	r0, [r7, #12]
 80173f2:	f7ff fec5 	bl	8017180 <etharp_output_to_arp_index>
 80173f6:	4603      	mov	r3, r0
 80173f8:	e04a      	b.n	8017490 <etharp_output+0x1dc>
    }
#endif /* LWIP_NETIF_HWADDRHINT */

    /* find stable entry: do this here since this is a critical path for
       throughput and etharp_find_entry() is kind of slow */
    for (i = 0; i < ARP_TABLE_SIZE; i++) {
 80173fa:	2300      	movs	r3, #0
 80173fc:	75fb      	strb	r3, [r7, #23]
 80173fe:	e031      	b.n	8017464 <etharp_output+0x1b0>
      if ((arp_table[i].state >= ETHARP_STATE_STABLE) &&
 8017400:	7dfa      	ldrb	r2, [r7, #23]
 8017402:	492c      	ldr	r1, [pc, #176]	; (80174b4 <etharp_output+0x200>)
 8017404:	4613      	mov	r3, r2
 8017406:	005b      	lsls	r3, r3, #1
 8017408:	4413      	add	r3, r2
 801740a:	00db      	lsls	r3, r3, #3
 801740c:	440b      	add	r3, r1
 801740e:	3314      	adds	r3, #20
 8017410:	781b      	ldrb	r3, [r3, #0]
 8017412:	2b01      	cmp	r3, #1
 8017414:	d923      	bls.n	801745e <etharp_output+0x1aa>
#if ETHARP_TABLE_MATCH_NETIF
          (arp_table[i].netif == netif) &&
 8017416:	7dfa      	ldrb	r2, [r7, #23]
 8017418:	4926      	ldr	r1, [pc, #152]	; (80174b4 <etharp_output+0x200>)
 801741a:	4613      	mov	r3, r2
 801741c:	005b      	lsls	r3, r3, #1
 801741e:	4413      	add	r3, r2
 8017420:	00db      	lsls	r3, r3, #3
 8017422:	440b      	add	r3, r1
 8017424:	3308      	adds	r3, #8
 8017426:	681b      	ldr	r3, [r3, #0]
      if ((arp_table[i].state >= ETHARP_STATE_STABLE) &&
 8017428:	68fa      	ldr	r2, [r7, #12]
 801742a:	429a      	cmp	r2, r3
 801742c:	d117      	bne.n	801745e <etharp_output+0x1aa>
#endif
          (ip4_addr_cmp(dst_addr, &arp_table[i].ipaddr))) {
 801742e:	69bb      	ldr	r3, [r7, #24]
 8017430:	6819      	ldr	r1, [r3, #0]
 8017432:	7dfa      	ldrb	r2, [r7, #23]
 8017434:	481f      	ldr	r0, [pc, #124]	; (80174b4 <etharp_output+0x200>)
 8017436:	4613      	mov	r3, r2
 8017438:	005b      	lsls	r3, r3, #1
 801743a:	4413      	add	r3, r2
 801743c:	00db      	lsls	r3, r3, #3
 801743e:	4403      	add	r3, r0
 8017440:	3304      	adds	r3, #4
 8017442:	681b      	ldr	r3, [r3, #0]
          (arp_table[i].netif == netif) &&
 8017444:	4299      	cmp	r1, r3
 8017446:	d10a      	bne.n	801745e <etharp_output+0x1aa>
        /* found an existing, stable entry */
        ETHARP_SET_ADDRHINT(netif, i);
 8017448:	4a19      	ldr	r2, [pc, #100]	; (80174b0 <etharp_output+0x1fc>)
 801744a:	7dfb      	ldrb	r3, [r7, #23]
 801744c:	7013      	strb	r3, [r2, #0]
        return etharp_output_to_arp_index(netif, q, i);
 801744e:	7dfb      	ldrb	r3, [r7, #23]
 8017450:	461a      	mov	r2, r3
 8017452:	68b9      	ldr	r1, [r7, #8]
 8017454:	68f8      	ldr	r0, [r7, #12]
 8017456:	f7ff fe93 	bl	8017180 <etharp_output_to_arp_index>
 801745a:	4603      	mov	r3, r0
 801745c:	e018      	b.n	8017490 <etharp_output+0x1dc>
    for (i = 0; i < ARP_TABLE_SIZE; i++) {
 801745e:	7dfb      	ldrb	r3, [r7, #23]
 8017460:	3301      	adds	r3, #1
 8017462:	75fb      	strb	r3, [r7, #23]
 8017464:	7dfb      	ldrb	r3, [r7, #23]
 8017466:	2b09      	cmp	r3, #9
 8017468:	d9ca      	bls.n	8017400 <etharp_output+0x14c>
      }
    }
    /* no stable entry found, use the (slower) query function:
       queue on destination Ethernet address belonging to ipaddr */
    return etharp_query(netif, dst_addr, q);
 801746a:	68ba      	ldr	r2, [r7, #8]
 801746c:	69b9      	ldr	r1, [r7, #24]
 801746e:	68f8      	ldr	r0, [r7, #12]
 8017470:	f000 f822 	bl	80174b8 <etharp_query>
 8017474:	4603      	mov	r3, r0
 8017476:	e00b      	b.n	8017490 <etharp_output+0x1dc>
  }

  /* continuation for multicast/broadcast destinations */
  /* obtain source Ethernet address of the given interface */
  /* send packet directly on the link */
  return ethernet_output(netif, q, (struct eth_addr *)(netif->hwaddr), dest, ETHTYPE_IP);
 8017478:	68fb      	ldr	r3, [r7, #12]
 801747a:	f103 0226 	add.w	r2, r3, #38	; 0x26
 801747e:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8017482:	9300      	str	r3, [sp, #0]
 8017484:	69fb      	ldr	r3, [r7, #28]
 8017486:	68b9      	ldr	r1, [r7, #8]
 8017488:	68f8      	ldr	r0, [r7, #12]
 801748a:	f001 fd6b 	bl	8018f64 <ethernet_output>
 801748e:	4603      	mov	r3, r0
}
 8017490:	4618      	mov	r0, r3
 8017492:	3720      	adds	r7, #32
 8017494:	46bd      	mov	sp, r7
 8017496:	bd80      	pop	{r7, pc}
 8017498:	0801e504 	.word	0x0801e504
 801749c:	0801e654 	.word	0x0801e654
 80174a0:	0801e57c 	.word	0x0801e57c
 80174a4:	0801e6a4 	.word	0x0801e6a4
 80174a8:	0801e644 	.word	0x0801e644
 80174ac:	0801ecf8 	.word	0x0801ecf8
 80174b0:	20007194 	.word	0x20007194
 80174b4:	200070a4 	.word	0x200070a4

080174b8 <etharp_query>:
 * - ERR_ARG Non-unicast address given, those will not appear in ARP cache.
 *
 */
err_t
etharp_query(struct netif *netif, const ip4_addr_t *ipaddr, struct pbuf *q)
{
 80174b8:	b580      	push	{r7, lr}
 80174ba:	b08c      	sub	sp, #48	; 0x30
 80174bc:	af02      	add	r7, sp, #8
 80174be:	60f8      	str	r0, [r7, #12]
 80174c0:	60b9      	str	r1, [r7, #8]
 80174c2:	607a      	str	r2, [r7, #4]
  struct eth_addr *srcaddr = (struct eth_addr *)netif->hwaddr;
 80174c4:	68fb      	ldr	r3, [r7, #12]
 80174c6:	3326      	adds	r3, #38	; 0x26
 80174c8:	617b      	str	r3, [r7, #20]
  err_t result = ERR_MEM;
 80174ca:	23ff      	movs	r3, #255	; 0xff
 80174cc:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  int is_new_entry = 0;
 80174d0:	2300      	movs	r3, #0
 80174d2:	623b      	str	r3, [r7, #32]
  s16_t i_err;
  netif_addr_idx_t i;

  /* non-unicast address? */
  if (ip4_addr_isbroadcast(ipaddr, netif) ||
 80174d4:	68bb      	ldr	r3, [r7, #8]
 80174d6:	681b      	ldr	r3, [r3, #0]
 80174d8:	68f9      	ldr	r1, [r7, #12]
 80174da:	4618      	mov	r0, r3
 80174dc:	f000 fe34 	bl	8018148 <ip4_addr_isbroadcast_u32>
 80174e0:	4603      	mov	r3, r0
 80174e2:	2b00      	cmp	r3, #0
 80174e4:	d10c      	bne.n	8017500 <etharp_query+0x48>
      ip4_addr_ismulticast(ipaddr) ||
 80174e6:	68bb      	ldr	r3, [r7, #8]
 80174e8:	681b      	ldr	r3, [r3, #0]
 80174ea:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
  if (ip4_addr_isbroadcast(ipaddr, netif) ||
 80174ee:	2be0      	cmp	r3, #224	; 0xe0
 80174f0:	d006      	beq.n	8017500 <etharp_query+0x48>
      ip4_addr_ismulticast(ipaddr) ||
 80174f2:	68bb      	ldr	r3, [r7, #8]
 80174f4:	2b00      	cmp	r3, #0
 80174f6:	d003      	beq.n	8017500 <etharp_query+0x48>
      ip4_addr_isany(ipaddr)) {
 80174f8:	68bb      	ldr	r3, [r7, #8]
 80174fa:	681b      	ldr	r3, [r3, #0]
 80174fc:	2b00      	cmp	r3, #0
 80174fe:	d102      	bne.n	8017506 <etharp_query+0x4e>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: will not add non-unicast IP address to ARP cache\n"));
    return ERR_ARG;
 8017500:	f06f 030f 	mvn.w	r3, #15
 8017504:	e101      	b.n	801770a <etharp_query+0x252>
  }

  /* find entry in ARP cache, ask to create entry if queueing packet */
  i_err = etharp_find_entry(ipaddr, ETHARP_FLAG_TRY_HARD, netif);
 8017506:	68fa      	ldr	r2, [r7, #12]
 8017508:	2101      	movs	r1, #1
 801750a:	68b8      	ldr	r0, [r7, #8]
 801750c:	f7ff fb60 	bl	8016bd0 <etharp_find_entry>
 8017510:	4603      	mov	r3, r0
 8017512:	827b      	strh	r3, [r7, #18]

  /* could not find or create entry? */
  if (i_err < 0) {
 8017514:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8017518:	2b00      	cmp	r3, #0
 801751a:	da02      	bge.n	8017522 <etharp_query+0x6a>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: could not create ARP entry\n"));
    if (q) {
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: packet dropped\n"));
      ETHARP_STATS_INC(etharp.memerr);
    }
    return (err_t)i_err;
 801751c:	8a7b      	ldrh	r3, [r7, #18]
 801751e:	b25b      	sxtb	r3, r3
 8017520:	e0f3      	b.n	801770a <etharp_query+0x252>
  }
  LWIP_ASSERT("type overflow", (size_t)i_err < NETIF_ADDR_IDX_MAX);
 8017522:	8a7b      	ldrh	r3, [r7, #18]
 8017524:	2b7e      	cmp	r3, #126	; 0x7e
 8017526:	d906      	bls.n	8017536 <etharp_query+0x7e>
 8017528:	4b7a      	ldr	r3, [pc, #488]	; (8017714 <etharp_query+0x25c>)
 801752a:	f240 32c1 	movw	r2, #961	; 0x3c1
 801752e:	497a      	ldr	r1, [pc, #488]	; (8017718 <etharp_query+0x260>)
 8017530:	487a      	ldr	r0, [pc, #488]	; (801771c <etharp_query+0x264>)
 8017532:	f002 fa99 	bl	8019a68 <iprintf>
  i = (netif_addr_idx_t)i_err;
 8017536:	8a7b      	ldrh	r3, [r7, #18]
 8017538:	747b      	strb	r3, [r7, #17]

  /* mark a fresh entry as pending (we just sent a request) */
  if (arp_table[i].state == ETHARP_STATE_EMPTY) {
 801753a:	7c7a      	ldrb	r2, [r7, #17]
 801753c:	4978      	ldr	r1, [pc, #480]	; (8017720 <etharp_query+0x268>)
 801753e:	4613      	mov	r3, r2
 8017540:	005b      	lsls	r3, r3, #1
 8017542:	4413      	add	r3, r2
 8017544:	00db      	lsls	r3, r3, #3
 8017546:	440b      	add	r3, r1
 8017548:	3314      	adds	r3, #20
 801754a:	781b      	ldrb	r3, [r3, #0]
 801754c:	2b00      	cmp	r3, #0
 801754e:	d115      	bne.n	801757c <etharp_query+0xc4>
    is_new_entry = 1;
 8017550:	2301      	movs	r3, #1
 8017552:	623b      	str	r3, [r7, #32]
    arp_table[i].state = ETHARP_STATE_PENDING;
 8017554:	7c7a      	ldrb	r2, [r7, #17]
 8017556:	4972      	ldr	r1, [pc, #456]	; (8017720 <etharp_query+0x268>)
 8017558:	4613      	mov	r3, r2
 801755a:	005b      	lsls	r3, r3, #1
 801755c:	4413      	add	r3, r2
 801755e:	00db      	lsls	r3, r3, #3
 8017560:	440b      	add	r3, r1
 8017562:	3314      	adds	r3, #20
 8017564:	2201      	movs	r2, #1
 8017566:	701a      	strb	r2, [r3, #0]
    /* record network interface for re-sending arp request in etharp_tmr */
    arp_table[i].netif = netif;
 8017568:	7c7a      	ldrb	r2, [r7, #17]
 801756a:	496d      	ldr	r1, [pc, #436]	; (8017720 <etharp_query+0x268>)
 801756c:	4613      	mov	r3, r2
 801756e:	005b      	lsls	r3, r3, #1
 8017570:	4413      	add	r3, r2
 8017572:	00db      	lsls	r3, r3, #3
 8017574:	440b      	add	r3, r1
 8017576:	3308      	adds	r3, #8
 8017578:	68fa      	ldr	r2, [r7, #12]
 801757a:	601a      	str	r2, [r3, #0]
  }

  /* { i is either a STABLE or (new or existing) PENDING entry } */
  LWIP_ASSERT("arp_table[i].state == PENDING or STABLE",
 801757c:	7c7a      	ldrb	r2, [r7, #17]
 801757e:	4968      	ldr	r1, [pc, #416]	; (8017720 <etharp_query+0x268>)
 8017580:	4613      	mov	r3, r2
 8017582:	005b      	lsls	r3, r3, #1
 8017584:	4413      	add	r3, r2
 8017586:	00db      	lsls	r3, r3, #3
 8017588:	440b      	add	r3, r1
 801758a:	3314      	adds	r3, #20
 801758c:	781b      	ldrb	r3, [r3, #0]
 801758e:	2b01      	cmp	r3, #1
 8017590:	d011      	beq.n	80175b6 <etharp_query+0xfe>
 8017592:	7c7a      	ldrb	r2, [r7, #17]
 8017594:	4962      	ldr	r1, [pc, #392]	; (8017720 <etharp_query+0x268>)
 8017596:	4613      	mov	r3, r2
 8017598:	005b      	lsls	r3, r3, #1
 801759a:	4413      	add	r3, r2
 801759c:	00db      	lsls	r3, r3, #3
 801759e:	440b      	add	r3, r1
 80175a0:	3314      	adds	r3, #20
 80175a2:	781b      	ldrb	r3, [r3, #0]
 80175a4:	2b01      	cmp	r3, #1
 80175a6:	d806      	bhi.n	80175b6 <etharp_query+0xfe>
 80175a8:	4b5a      	ldr	r3, [pc, #360]	; (8017714 <etharp_query+0x25c>)
 80175aa:	f240 32cd 	movw	r2, #973	; 0x3cd
 80175ae:	495d      	ldr	r1, [pc, #372]	; (8017724 <etharp_query+0x26c>)
 80175b0:	485a      	ldr	r0, [pc, #360]	; (801771c <etharp_query+0x264>)
 80175b2:	f002 fa59 	bl	8019a68 <iprintf>
              ((arp_table[i].state == ETHARP_STATE_PENDING) ||
               (arp_table[i].state >= ETHARP_STATE_STABLE)));

  /* do we have a new entry? or an implicit query request? */
  if (is_new_entry || (q == NULL)) {
 80175b6:	6a3b      	ldr	r3, [r7, #32]
 80175b8:	2b00      	cmp	r3, #0
 80175ba:	d102      	bne.n	80175c2 <etharp_query+0x10a>
 80175bc:	687b      	ldr	r3, [r7, #4]
 80175be:	2b00      	cmp	r3, #0
 80175c0:	d10c      	bne.n	80175dc <etharp_query+0x124>
    /* try to resolve it; send out ARP request */
    result = etharp_request(netif, ipaddr);
 80175c2:	68b9      	ldr	r1, [r7, #8]
 80175c4:	68f8      	ldr	r0, [r7, #12]
 80175c6:	f000 f963 	bl	8017890 <etharp_request>
 80175ca:	4603      	mov	r3, r0
 80175cc:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
      /* ARP request couldn't be sent */
      /* We don't re-send arp request in etharp_tmr, but we still queue packets,
         since this failure could be temporary, and the next packet calling
         etharp_query again could lead to sending the queued packets. */
    }
    if (q == NULL) {
 80175d0:	687b      	ldr	r3, [r7, #4]
 80175d2:	2b00      	cmp	r3, #0
 80175d4:	d102      	bne.n	80175dc <etharp_query+0x124>
      return result;
 80175d6:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 80175da:	e096      	b.n	801770a <etharp_query+0x252>
    }
  }

  /* packet given? */
  LWIP_ASSERT("q != NULL", q != NULL);
 80175dc:	687b      	ldr	r3, [r7, #4]
 80175de:	2b00      	cmp	r3, #0
 80175e0:	d106      	bne.n	80175f0 <etharp_query+0x138>
 80175e2:	4b4c      	ldr	r3, [pc, #304]	; (8017714 <etharp_query+0x25c>)
 80175e4:	f240 32e1 	movw	r2, #993	; 0x3e1
 80175e8:	494f      	ldr	r1, [pc, #316]	; (8017728 <etharp_query+0x270>)
 80175ea:	484c      	ldr	r0, [pc, #304]	; (801771c <etharp_query+0x264>)
 80175ec:	f002 fa3c 	bl	8019a68 <iprintf>
  /* stable entry? */
  if (arp_table[i].state >= ETHARP_STATE_STABLE) {
 80175f0:	7c7a      	ldrb	r2, [r7, #17]
 80175f2:	494b      	ldr	r1, [pc, #300]	; (8017720 <etharp_query+0x268>)
 80175f4:	4613      	mov	r3, r2
 80175f6:	005b      	lsls	r3, r3, #1
 80175f8:	4413      	add	r3, r2
 80175fa:	00db      	lsls	r3, r3, #3
 80175fc:	440b      	add	r3, r1
 80175fe:	3314      	adds	r3, #20
 8017600:	781b      	ldrb	r3, [r3, #0]
 8017602:	2b01      	cmp	r3, #1
 8017604:	d917      	bls.n	8017636 <etharp_query+0x17e>
    /* we have a valid IP->Ethernet address mapping */
    ETHARP_SET_ADDRHINT(netif, i);
 8017606:	4a49      	ldr	r2, [pc, #292]	; (801772c <etharp_query+0x274>)
 8017608:	7c7b      	ldrb	r3, [r7, #17]
 801760a:	7013      	strb	r3, [r2, #0]
    /* send the packet */
    result = ethernet_output(netif, q, srcaddr, &(arp_table[i].ethaddr), ETHTYPE_IP);
 801760c:	7c7a      	ldrb	r2, [r7, #17]
 801760e:	4613      	mov	r3, r2
 8017610:	005b      	lsls	r3, r3, #1
 8017612:	4413      	add	r3, r2
 8017614:	00db      	lsls	r3, r3, #3
 8017616:	3308      	adds	r3, #8
 8017618:	4a41      	ldr	r2, [pc, #260]	; (8017720 <etharp_query+0x268>)
 801761a:	4413      	add	r3, r2
 801761c:	3304      	adds	r3, #4
 801761e:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8017622:	9200      	str	r2, [sp, #0]
 8017624:	697a      	ldr	r2, [r7, #20]
 8017626:	6879      	ldr	r1, [r7, #4]
 8017628:	68f8      	ldr	r0, [r7, #12]
 801762a:	f001 fc9b 	bl	8018f64 <ethernet_output>
 801762e:	4603      	mov	r3, r0
 8017630:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8017634:	e067      	b.n	8017706 <etharp_query+0x24e>
    /* pending entry? (either just created or already pending */
  } else if (arp_table[i].state == ETHARP_STATE_PENDING) {
 8017636:	7c7a      	ldrb	r2, [r7, #17]
 8017638:	4939      	ldr	r1, [pc, #228]	; (8017720 <etharp_query+0x268>)
 801763a:	4613      	mov	r3, r2
 801763c:	005b      	lsls	r3, r3, #1
 801763e:	4413      	add	r3, r2
 8017640:	00db      	lsls	r3, r3, #3
 8017642:	440b      	add	r3, r1
 8017644:	3314      	adds	r3, #20
 8017646:	781b      	ldrb	r3, [r3, #0]
 8017648:	2b01      	cmp	r3, #1
 801764a:	d15c      	bne.n	8017706 <etharp_query+0x24e>
    /* entry is still pending, queue the given packet 'q' */
    struct pbuf *p;
    int copy_needed = 0;
 801764c:	2300      	movs	r3, #0
 801764e:	61bb      	str	r3, [r7, #24]
    /* IF q includes a pbuf that must be copied, copy the whole chain into a
     * new PBUF_RAM. See the definition of PBUF_NEEDS_COPY for details. */
    p = q;
 8017650:	687b      	ldr	r3, [r7, #4]
 8017652:	61fb      	str	r3, [r7, #28]
    while (p) {
 8017654:	e01c      	b.n	8017690 <etharp_query+0x1d8>
      LWIP_ASSERT("no packet queues allowed!", (p->len != p->tot_len) || (p->next == 0));
 8017656:	69fb      	ldr	r3, [r7, #28]
 8017658:	895a      	ldrh	r2, [r3, #10]
 801765a:	69fb      	ldr	r3, [r7, #28]
 801765c:	891b      	ldrh	r3, [r3, #8]
 801765e:	429a      	cmp	r2, r3
 8017660:	d10a      	bne.n	8017678 <etharp_query+0x1c0>
 8017662:	69fb      	ldr	r3, [r7, #28]
 8017664:	681b      	ldr	r3, [r3, #0]
 8017666:	2b00      	cmp	r3, #0
 8017668:	d006      	beq.n	8017678 <etharp_query+0x1c0>
 801766a:	4b2a      	ldr	r3, [pc, #168]	; (8017714 <etharp_query+0x25c>)
 801766c:	f240 32f1 	movw	r2, #1009	; 0x3f1
 8017670:	492f      	ldr	r1, [pc, #188]	; (8017730 <etharp_query+0x278>)
 8017672:	482a      	ldr	r0, [pc, #168]	; (801771c <etharp_query+0x264>)
 8017674:	f002 f9f8 	bl	8019a68 <iprintf>
      if (PBUF_NEEDS_COPY(p)) {
 8017678:	69fb      	ldr	r3, [r7, #28]
 801767a:	7b1b      	ldrb	r3, [r3, #12]
 801767c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8017680:	2b00      	cmp	r3, #0
 8017682:	d002      	beq.n	801768a <etharp_query+0x1d2>
        copy_needed = 1;
 8017684:	2301      	movs	r3, #1
 8017686:	61bb      	str	r3, [r7, #24]
        break;
 8017688:	e005      	b.n	8017696 <etharp_query+0x1de>
      }
      p = p->next;
 801768a:	69fb      	ldr	r3, [r7, #28]
 801768c:	681b      	ldr	r3, [r3, #0]
 801768e:	61fb      	str	r3, [r7, #28]
    while (p) {
 8017690:	69fb      	ldr	r3, [r7, #28]
 8017692:	2b00      	cmp	r3, #0
 8017694:	d1df      	bne.n	8017656 <etharp_query+0x19e>
    }
    if (copy_needed) {
 8017696:	69bb      	ldr	r3, [r7, #24]
 8017698:	2b00      	cmp	r3, #0
 801769a:	d007      	beq.n	80176ac <etharp_query+0x1f4>
      /* copy the whole packet into new pbufs */
      p = pbuf_clone(PBUF_LINK, PBUF_RAM, q);
 801769c:	687a      	ldr	r2, [r7, #4]
 801769e:	f44f 7120 	mov.w	r1, #640	; 0x280
 80176a2:	200e      	movs	r0, #14
 80176a4:	f7f9 fd24 	bl	80110f0 <pbuf_clone>
 80176a8:	61f8      	str	r0, [r7, #28]
 80176aa:	e004      	b.n	80176b6 <etharp_query+0x1fe>
    } else {
      /* referencing the old pbuf is enough */
      p = q;
 80176ac:	687b      	ldr	r3, [r7, #4]
 80176ae:	61fb      	str	r3, [r7, #28]
      pbuf_ref(p);
 80176b0:	69f8      	ldr	r0, [r7, #28]
 80176b2:	f7f9 fb61 	bl	8010d78 <pbuf_ref>
    }
    /* packet could be taken over? */
    if (p != NULL) {
 80176b6:	69fb      	ldr	r3, [r7, #28]
 80176b8:	2b00      	cmp	r3, #0
 80176ba:	d021      	beq.n	8017700 <etharp_query+0x248>
        LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: could not queue a copy of PBUF_REF packet %p (out of memory)\n", (void *)q));
        result = ERR_MEM;
      }
#else /* ARP_QUEUEING */
      /* always queue one packet per ARP request only, freeing a previously queued packet */
      if (arp_table[i].q != NULL) {
 80176bc:	7c7a      	ldrb	r2, [r7, #17]
 80176be:	4918      	ldr	r1, [pc, #96]	; (8017720 <etharp_query+0x268>)
 80176c0:	4613      	mov	r3, r2
 80176c2:	005b      	lsls	r3, r3, #1
 80176c4:	4413      	add	r3, r2
 80176c6:	00db      	lsls	r3, r3, #3
 80176c8:	440b      	add	r3, r1
 80176ca:	681b      	ldr	r3, [r3, #0]
 80176cc:	2b00      	cmp	r3, #0
 80176ce:	d00a      	beq.n	80176e6 <etharp_query+0x22e>
        LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: dropped previously queued packet %p for ARP entry %"U16_F"\n", (void *)q, (u16_t)i));
        pbuf_free(arp_table[i].q);
 80176d0:	7c7a      	ldrb	r2, [r7, #17]
 80176d2:	4913      	ldr	r1, [pc, #76]	; (8017720 <etharp_query+0x268>)
 80176d4:	4613      	mov	r3, r2
 80176d6:	005b      	lsls	r3, r3, #1
 80176d8:	4413      	add	r3, r2
 80176da:	00db      	lsls	r3, r3, #3
 80176dc:	440b      	add	r3, r1
 80176de:	681b      	ldr	r3, [r3, #0]
 80176e0:	4618      	mov	r0, r3
 80176e2:	f7f9 faa9 	bl	8010c38 <pbuf_free>
      }
      arp_table[i].q = p;
 80176e6:	7c7a      	ldrb	r2, [r7, #17]
 80176e8:	490d      	ldr	r1, [pc, #52]	; (8017720 <etharp_query+0x268>)
 80176ea:	4613      	mov	r3, r2
 80176ec:	005b      	lsls	r3, r3, #1
 80176ee:	4413      	add	r3, r2
 80176f0:	00db      	lsls	r3, r3, #3
 80176f2:	440b      	add	r3, r1
 80176f4:	69fa      	ldr	r2, [r7, #28]
 80176f6:	601a      	str	r2, [r3, #0]
      result = ERR_OK;
 80176f8:	2300      	movs	r3, #0
 80176fa:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 80176fe:	e002      	b.n	8017706 <etharp_query+0x24e>
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: queued packet %p on ARP entry %"U16_F"\n", (void *)q, (u16_t)i));
#endif /* ARP_QUEUEING */
    } else {
      ETHARP_STATS_INC(etharp.memerr);
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: could not queue a copy of PBUF_REF packet %p (out of memory)\n", (void *)q));
      result = ERR_MEM;
 8017700:	23ff      	movs	r3, #255	; 0xff
 8017702:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    }
  }
  return result;
 8017706:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
}
 801770a:	4618      	mov	r0, r3
 801770c:	3728      	adds	r7, #40	; 0x28
 801770e:	46bd      	mov	sp, r7
 8017710:	bd80      	pop	{r7, pc}
 8017712:	bf00      	nop
 8017714:	0801e504 	.word	0x0801e504
 8017718:	0801e6b0 	.word	0x0801e6b0
 801771c:	0801e57c 	.word	0x0801e57c
 8017720:	200070a4 	.word	0x200070a4
 8017724:	0801e6c0 	.word	0x0801e6c0
 8017728:	0801e6a4 	.word	0x0801e6a4
 801772c:	20007194 	.word	0x20007194
 8017730:	0801e6e8 	.word	0x0801e6e8

08017734 <etharp_raw>:
etharp_raw(struct netif *netif, const struct eth_addr *ethsrc_addr,
           const struct eth_addr *ethdst_addr,
           const struct eth_addr *hwsrc_addr, const ip4_addr_t *ipsrc_addr,
           const struct eth_addr *hwdst_addr, const ip4_addr_t *ipdst_addr,
           const u16_t opcode)
{
 8017734:	b580      	push	{r7, lr}
 8017736:	b08a      	sub	sp, #40	; 0x28
 8017738:	af02      	add	r7, sp, #8
 801773a:	60f8      	str	r0, [r7, #12]
 801773c:	60b9      	str	r1, [r7, #8]
 801773e:	607a      	str	r2, [r7, #4]
 8017740:	603b      	str	r3, [r7, #0]
  struct pbuf *p;
  err_t result = ERR_OK;
 8017742:	2300      	movs	r3, #0
 8017744:	77fb      	strb	r3, [r7, #31]
  struct etharp_hdr *hdr;

  LWIP_ASSERT("netif != NULL", netif != NULL);
 8017746:	68fb      	ldr	r3, [r7, #12]
 8017748:	2b00      	cmp	r3, #0
 801774a:	d106      	bne.n	801775a <etharp_raw+0x26>
 801774c:	4b3a      	ldr	r3, [pc, #232]	; (8017838 <etharp_raw+0x104>)
 801774e:	f240 4257 	movw	r2, #1111	; 0x457
 8017752:	493a      	ldr	r1, [pc, #232]	; (801783c <etharp_raw+0x108>)
 8017754:	483a      	ldr	r0, [pc, #232]	; (8017840 <etharp_raw+0x10c>)
 8017756:	f002 f987 	bl	8019a68 <iprintf>

  /* allocate a pbuf for the outgoing ARP request packet */
  p = pbuf_alloc(PBUF_LINK, SIZEOF_ETHARP_HDR, PBUF_RAM);
 801775a:	f44f 7220 	mov.w	r2, #640	; 0x280
 801775e:	211c      	movs	r1, #28
 8017760:	200e      	movs	r0, #14
 8017762:	f7f8 ff85 	bl	8010670 <pbuf_alloc>
 8017766:	61b8      	str	r0, [r7, #24]
  /* could allocate a pbuf for an ARP request? */
  if (p == NULL) {
 8017768:	69bb      	ldr	r3, [r7, #24]
 801776a:	2b00      	cmp	r3, #0
 801776c:	d102      	bne.n	8017774 <etharp_raw+0x40>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS,
                ("etharp_raw: could not allocate pbuf for ARP request.\n"));
    ETHARP_STATS_INC(etharp.memerr);
    return ERR_MEM;
 801776e:	f04f 33ff 	mov.w	r3, #4294967295
 8017772:	e05d      	b.n	8017830 <etharp_raw+0xfc>
  }
  LWIP_ASSERT("check that first pbuf can hold struct etharp_hdr",
 8017774:	69bb      	ldr	r3, [r7, #24]
 8017776:	895b      	ldrh	r3, [r3, #10]
 8017778:	2b1b      	cmp	r3, #27
 801777a:	d806      	bhi.n	801778a <etharp_raw+0x56>
 801777c:	4b2e      	ldr	r3, [pc, #184]	; (8017838 <etharp_raw+0x104>)
 801777e:	f240 4262 	movw	r2, #1122	; 0x462
 8017782:	4930      	ldr	r1, [pc, #192]	; (8017844 <etharp_raw+0x110>)
 8017784:	482e      	ldr	r0, [pc, #184]	; (8017840 <etharp_raw+0x10c>)
 8017786:	f002 f96f 	bl	8019a68 <iprintf>
              (p->len >= SIZEOF_ETHARP_HDR));

  hdr = (struct etharp_hdr *)p->payload;
 801778a:	69bb      	ldr	r3, [r7, #24]
 801778c:	685b      	ldr	r3, [r3, #4]
 801778e:	617b      	str	r3, [r7, #20]
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_raw: sending raw ARP packet.\n"));
  hdr->opcode = lwip_htons(opcode);
 8017790:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 8017792:	4618      	mov	r0, r3
 8017794:	f7f7 fe4c 	bl	800f430 <lwip_htons>
 8017798:	4603      	mov	r3, r0
 801779a:	461a      	mov	r2, r3
 801779c:	697b      	ldr	r3, [r7, #20]
 801779e:	80da      	strh	r2, [r3, #6]

  LWIP_ASSERT("netif->hwaddr_len must be the same as ETH_HWADDR_LEN for etharp!",
 80177a0:	68fb      	ldr	r3, [r7, #12]
 80177a2:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 80177a6:	2b06      	cmp	r3, #6
 80177a8:	d006      	beq.n	80177b8 <etharp_raw+0x84>
 80177aa:	4b23      	ldr	r3, [pc, #140]	; (8017838 <etharp_raw+0x104>)
 80177ac:	f240 4269 	movw	r2, #1129	; 0x469
 80177b0:	4925      	ldr	r1, [pc, #148]	; (8017848 <etharp_raw+0x114>)
 80177b2:	4823      	ldr	r0, [pc, #140]	; (8017840 <etharp_raw+0x10c>)
 80177b4:	f002 f958 	bl	8019a68 <iprintf>
              (netif->hwaddr_len == ETH_HWADDR_LEN));

  /* Write the ARP MAC-Addresses */
  SMEMCPY(&hdr->shwaddr, hwsrc_addr, ETH_HWADDR_LEN);
 80177b8:	697b      	ldr	r3, [r7, #20]
 80177ba:	3308      	adds	r3, #8
 80177bc:	2206      	movs	r2, #6
 80177be:	6839      	ldr	r1, [r7, #0]
 80177c0:	4618      	mov	r0, r3
 80177c2:	f002 fb20 	bl	8019e06 <memcpy>
  SMEMCPY(&hdr->dhwaddr, hwdst_addr, ETH_HWADDR_LEN);
 80177c6:	697b      	ldr	r3, [r7, #20]
 80177c8:	3312      	adds	r3, #18
 80177ca:	2206      	movs	r2, #6
 80177cc:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80177ce:	4618      	mov	r0, r3
 80177d0:	f002 fb19 	bl	8019e06 <memcpy>
  /* Copy struct ip4_addr_wordaligned to aligned ip4_addr, to support compilers without
   * structure packing. */
  IPADDR_WORDALIGNED_COPY_FROM_IP4_ADDR_T(&hdr->sipaddr, ipsrc_addr);
 80177d4:	697b      	ldr	r3, [r7, #20]
 80177d6:	330e      	adds	r3, #14
 80177d8:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80177da:	6812      	ldr	r2, [r2, #0]
 80177dc:	601a      	str	r2, [r3, #0]
  IPADDR_WORDALIGNED_COPY_FROM_IP4_ADDR_T(&hdr->dipaddr, ipdst_addr);
 80177de:	697b      	ldr	r3, [r7, #20]
 80177e0:	3318      	adds	r3, #24
 80177e2:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80177e4:	6812      	ldr	r2, [r2, #0]
 80177e6:	601a      	str	r2, [r3, #0]

  hdr->hwtype = PP_HTONS(LWIP_IANA_HWTYPE_ETHERNET);
 80177e8:	697b      	ldr	r3, [r7, #20]
 80177ea:	2200      	movs	r2, #0
 80177ec:	701a      	strb	r2, [r3, #0]
 80177ee:	2200      	movs	r2, #0
 80177f0:	f042 0201 	orr.w	r2, r2, #1
 80177f4:	705a      	strb	r2, [r3, #1]
  hdr->proto = PP_HTONS(ETHTYPE_IP);
 80177f6:	697b      	ldr	r3, [r7, #20]
 80177f8:	2200      	movs	r2, #0
 80177fa:	f042 0208 	orr.w	r2, r2, #8
 80177fe:	709a      	strb	r2, [r3, #2]
 8017800:	2200      	movs	r2, #0
 8017802:	70da      	strb	r2, [r3, #3]
  /* set hwlen and protolen */
  hdr->hwlen = ETH_HWADDR_LEN;
 8017804:	697b      	ldr	r3, [r7, #20]
 8017806:	2206      	movs	r2, #6
 8017808:	711a      	strb	r2, [r3, #4]
  hdr->protolen = sizeof(ip4_addr_t);
 801780a:	697b      	ldr	r3, [r7, #20]
 801780c:	2204      	movs	r2, #4
 801780e:	715a      	strb	r2, [r3, #5]
  if (ip4_addr_islinklocal(ipsrc_addr)) {
    ethernet_output(netif, p, ethsrc_addr, &ethbroadcast, ETHTYPE_ARP);
  } else
#endif /* LWIP_AUTOIP */
  {
    ethernet_output(netif, p, ethsrc_addr, ethdst_addr, ETHTYPE_ARP);
 8017810:	f640 0306 	movw	r3, #2054	; 0x806
 8017814:	9300      	str	r3, [sp, #0]
 8017816:	687b      	ldr	r3, [r7, #4]
 8017818:	68ba      	ldr	r2, [r7, #8]
 801781a:	69b9      	ldr	r1, [r7, #24]
 801781c:	68f8      	ldr	r0, [r7, #12]
 801781e:	f001 fba1 	bl	8018f64 <ethernet_output>
  }

  ETHARP_STATS_INC(etharp.xmit);
  /* free ARP query packet */
  pbuf_free(p);
 8017822:	69b8      	ldr	r0, [r7, #24]
 8017824:	f7f9 fa08 	bl	8010c38 <pbuf_free>
  p = NULL;
 8017828:	2300      	movs	r3, #0
 801782a:	61bb      	str	r3, [r7, #24]
  /* could not allocate pbuf for ARP request */

  return result;
 801782c:	f997 301f 	ldrsb.w	r3, [r7, #31]
}
 8017830:	4618      	mov	r0, r3
 8017832:	3720      	adds	r7, #32
 8017834:	46bd      	mov	sp, r7
 8017836:	bd80      	pop	{r7, pc}
 8017838:	0801e504 	.word	0x0801e504
 801783c:	0801e654 	.word	0x0801e654
 8017840:	0801e57c 	.word	0x0801e57c
 8017844:	0801e704 	.word	0x0801e704
 8017848:	0801e738 	.word	0x0801e738

0801784c <etharp_request_dst>:
 *         ERR_MEM if the ARP packet couldn't be allocated
 *         any other err_t on failure
 */
static err_t
etharp_request_dst(struct netif *netif, const ip4_addr_t *ipaddr, const struct eth_addr *hw_dst_addr)
{
 801784c:	b580      	push	{r7, lr}
 801784e:	b088      	sub	sp, #32
 8017850:	af04      	add	r7, sp, #16
 8017852:	60f8      	str	r0, [r7, #12]
 8017854:	60b9      	str	r1, [r7, #8]
 8017856:	607a      	str	r2, [r7, #4]
  return etharp_raw(netif, (struct eth_addr *)netif->hwaddr, hw_dst_addr,
 8017858:	68fb      	ldr	r3, [r7, #12]
 801785a:	f103 0126 	add.w	r1, r3, #38	; 0x26
                    (struct eth_addr *)netif->hwaddr, netif_ip4_addr(netif), &ethzero,
 801785e:	68fb      	ldr	r3, [r7, #12]
 8017860:	f103 0026 	add.w	r0, r3, #38	; 0x26
 8017864:	68fb      	ldr	r3, [r7, #12]
 8017866:	3304      	adds	r3, #4
  return etharp_raw(netif, (struct eth_addr *)netif->hwaddr, hw_dst_addr,
 8017868:	2201      	movs	r2, #1
 801786a:	9203      	str	r2, [sp, #12]
 801786c:	68ba      	ldr	r2, [r7, #8]
 801786e:	9202      	str	r2, [sp, #8]
 8017870:	4a06      	ldr	r2, [pc, #24]	; (801788c <etharp_request_dst+0x40>)
 8017872:	9201      	str	r2, [sp, #4]
 8017874:	9300      	str	r3, [sp, #0]
 8017876:	4603      	mov	r3, r0
 8017878:	687a      	ldr	r2, [r7, #4]
 801787a:	68f8      	ldr	r0, [r7, #12]
 801787c:	f7ff ff5a 	bl	8017734 <etharp_raw>
 8017880:	4603      	mov	r3, r0
                    ipaddr, ARP_REQUEST);
}
 8017882:	4618      	mov	r0, r3
 8017884:	3710      	adds	r7, #16
 8017886:	46bd      	mov	sp, r7
 8017888:	bd80      	pop	{r7, pc}
 801788a:	bf00      	nop
 801788c:	0801ed00 	.word	0x0801ed00

08017890 <etharp_request>:
 *         ERR_MEM if the ARP packet couldn't be allocated
 *         any other err_t on failure
 */
err_t
etharp_request(struct netif *netif, const ip4_addr_t *ipaddr)
{
 8017890:	b580      	push	{r7, lr}
 8017892:	b082      	sub	sp, #8
 8017894:	af00      	add	r7, sp, #0
 8017896:	6078      	str	r0, [r7, #4]
 8017898:	6039      	str	r1, [r7, #0]
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_request: sending ARP request.\n"));
  return etharp_request_dst(netif, ipaddr, &ethbroadcast);
 801789a:	4a05      	ldr	r2, [pc, #20]	; (80178b0 <etharp_request+0x20>)
 801789c:	6839      	ldr	r1, [r7, #0]
 801789e:	6878      	ldr	r0, [r7, #4]
 80178a0:	f7ff ffd4 	bl	801784c <etharp_request_dst>
 80178a4:	4603      	mov	r3, r0
}
 80178a6:	4618      	mov	r0, r3
 80178a8:	3708      	adds	r7, #8
 80178aa:	46bd      	mov	sp, r7
 80178ac:	bd80      	pop	{r7, pc}
 80178ae:	bf00      	nop
 80178b0:	0801ecf8 	.word	0x0801ecf8

080178b4 <icmp_input>:
 * @param p the icmp echo request packet, p->payload pointing to the icmp header
 * @param inp the netif on which this packet was received
 */
void
icmp_input(struct pbuf *p, struct netif *inp)
{
 80178b4:	b580      	push	{r7, lr}
 80178b6:	b08e      	sub	sp, #56	; 0x38
 80178b8:	af04      	add	r7, sp, #16
 80178ba:	6078      	str	r0, [r7, #4]
 80178bc:	6039      	str	r1, [r7, #0]
  const ip4_addr_t *src;

  ICMP_STATS_INC(icmp.recv);
  MIB2_STATS_INC(mib2.icmpinmsgs);

  iphdr_in = ip4_current_header();
 80178be:	4b87      	ldr	r3, [pc, #540]	; (8017adc <icmp_input+0x228>)
 80178c0:	689b      	ldr	r3, [r3, #8]
 80178c2:	627b      	str	r3, [r7, #36]	; 0x24
  hlen = IPH_HL_BYTES(iphdr_in);
 80178c4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80178c6:	781b      	ldrb	r3, [r3, #0]
 80178c8:	f003 030f 	and.w	r3, r3, #15
 80178cc:	b2db      	uxtb	r3, r3
 80178ce:	009b      	lsls	r3, r3, #2
 80178d0:	b2db      	uxtb	r3, r3
 80178d2:	847b      	strh	r3, [r7, #34]	; 0x22
  if (hlen < IP_HLEN) {
 80178d4:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 80178d6:	2b13      	cmp	r3, #19
 80178d8:	f240 80e8 	bls.w	8017aac <icmp_input+0x1f8>
    LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: short IP header (%"S16_F" bytes) received\n", hlen));
    goto lenerr;
  }
  if (p->len < sizeof(u16_t) * 2) {
 80178dc:	687b      	ldr	r3, [r7, #4]
 80178de:	895b      	ldrh	r3, [r3, #10]
 80178e0:	2b03      	cmp	r3, #3
 80178e2:	f240 80e5 	bls.w	8017ab0 <icmp_input+0x1fc>
    LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: short ICMP (%"U16_F" bytes) received\n", p->tot_len));
    goto lenerr;
  }

  type = *((u8_t *)p->payload);
 80178e6:	687b      	ldr	r3, [r7, #4]
 80178e8:	685b      	ldr	r3, [r3, #4]
 80178ea:	781b      	ldrb	r3, [r3, #0]
 80178ec:	f887 3021 	strb.w	r3, [r7, #33]	; 0x21
#ifdef LWIP_DEBUG
  code = *(((u8_t *)p->payload) + 1);
  /* if debug is enabled but debug statement below is somehow disabled: */
  LWIP_UNUSED_ARG(code);
#endif /* LWIP_DEBUG */
  switch (type) {
 80178f0:	f897 3021 	ldrb.w	r3, [r7, #33]	; 0x21
 80178f4:	2b00      	cmp	r3, #0
 80178f6:	f000 80d2 	beq.w	8017a9e <icmp_input+0x1ea>
 80178fa:	2b08      	cmp	r3, #8
 80178fc:	f040 80d2 	bne.w	8017aa4 <icmp_input+0x1f0>
         (as obviously, an echo request has been sent, too). */
      MIB2_STATS_INC(mib2.icmpinechoreps);
      break;
    case ICMP_ECHO:
      MIB2_STATS_INC(mib2.icmpinechos);
      src = ip4_current_dest_addr();
 8017900:	4b77      	ldr	r3, [pc, #476]	; (8017ae0 <icmp_input+0x22c>)
 8017902:	61fb      	str	r3, [r7, #28]
      /* multicast destination address? */
      if (ip4_addr_ismulticast(ip4_current_dest_addr())) {
 8017904:	4b75      	ldr	r3, [pc, #468]	; (8017adc <icmp_input+0x228>)
 8017906:	695b      	ldr	r3, [r3, #20]
 8017908:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 801790c:	2be0      	cmp	r3, #224	; 0xe0
 801790e:	f000 80d6 	beq.w	8017abe <icmp_input+0x20a>
        LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: Not echoing to multicast pings\n"));
        goto icmperr;
#endif /* LWIP_MULTICAST_PING */
      }
      /* broadcast destination address? */
      if (ip4_addr_isbroadcast(ip4_current_dest_addr(), ip_current_netif())) {
 8017912:	4b72      	ldr	r3, [pc, #456]	; (8017adc <icmp_input+0x228>)
 8017914:	695b      	ldr	r3, [r3, #20]
 8017916:	4a71      	ldr	r2, [pc, #452]	; (8017adc <icmp_input+0x228>)
 8017918:	6812      	ldr	r2, [r2, #0]
 801791a:	4611      	mov	r1, r2
 801791c:	4618      	mov	r0, r3
 801791e:	f000 fc13 	bl	8018148 <ip4_addr_isbroadcast_u32>
 8017922:	4603      	mov	r3, r0
 8017924:	2b00      	cmp	r3, #0
 8017926:	f040 80cc 	bne.w	8017ac2 <icmp_input+0x20e>
        LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: Not echoing to broadcast pings\n"));
        goto icmperr;
#endif /* LWIP_BROADCAST_PING */
      }
      LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: ping\n"));
      if (p->tot_len < sizeof(struct icmp_echo_hdr)) {
 801792a:	687b      	ldr	r3, [r7, #4]
 801792c:	891b      	ldrh	r3, [r3, #8]
 801792e:	2b07      	cmp	r3, #7
 8017930:	f240 80c0 	bls.w	8017ab4 <icmp_input+0x200>
        LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: bad ICMP echo received\n"));
        goto lenerr;
      }
#if CHECKSUM_CHECK_ICMP
      IF__NETIF_CHECKSUM_ENABLED(inp, NETIF_CHECKSUM_CHECK_ICMP) {
        if (inet_chksum_pbuf(p) != 0) {
 8017934:	6878      	ldr	r0, [r7, #4]
 8017936:	f7f7 fe18 	bl	800f56a <inet_chksum_pbuf>
 801793a:	4603      	mov	r3, r0
 801793c:	2b00      	cmp	r3, #0
 801793e:	d003      	beq.n	8017948 <icmp_input+0x94>
          LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: checksum failed for received ICMP echo\n"));
          pbuf_free(p);
 8017940:	6878      	ldr	r0, [r7, #4]
 8017942:	f7f9 f979 	bl	8010c38 <pbuf_free>
          ICMP_STATS_INC(icmp.chkerr);
          MIB2_STATS_INC(mib2.icmpinerrors);
          return;
 8017946:	e0c5      	b.n	8017ad4 <icmp_input+0x220>
        }
      }
#endif
#if LWIP_ICMP_ECHO_CHECK_INPUT_PBUF_LEN
      if (pbuf_add_header(p, hlen + PBUF_LINK_HLEN + PBUF_LINK_ENCAPSULATION_HLEN)) {
 8017948:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 801794a:	330e      	adds	r3, #14
 801794c:	4619      	mov	r1, r3
 801794e:	6878      	ldr	r0, [r7, #4]
 8017950:	f7f9 f8dc 	bl	8010b0c <pbuf_add_header>
 8017954:	4603      	mov	r3, r0
 8017956:	2b00      	cmp	r3, #0
 8017958:	d04b      	beq.n	80179f2 <icmp_input+0x13e>
        /* p is not big enough to contain link headers
         * allocate a new one and copy p into it
         */
        struct pbuf *r;
        u16_t alloc_len = (u16_t)(p->tot_len + hlen);
 801795a:	687b      	ldr	r3, [r7, #4]
 801795c:	891a      	ldrh	r2, [r3, #8]
 801795e:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8017960:	4413      	add	r3, r2
 8017962:	837b      	strh	r3, [r7, #26]
        if (alloc_len < p->tot_len) {
 8017964:	687b      	ldr	r3, [r7, #4]
 8017966:	891b      	ldrh	r3, [r3, #8]
 8017968:	8b7a      	ldrh	r2, [r7, #26]
 801796a:	429a      	cmp	r2, r3
 801796c:	f0c0 80ab 	bcc.w	8017ac6 <icmp_input+0x212>
          LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: allocating new pbuf failed (tot_len overflow)\n"));
          goto icmperr;
        }
        /* allocate new packet buffer with space for link headers */
        r = pbuf_alloc(PBUF_LINK, alloc_len, PBUF_RAM);
 8017970:	8b7b      	ldrh	r3, [r7, #26]
 8017972:	f44f 7220 	mov.w	r2, #640	; 0x280
 8017976:	4619      	mov	r1, r3
 8017978:	200e      	movs	r0, #14
 801797a:	f7f8 fe79 	bl	8010670 <pbuf_alloc>
 801797e:	6178      	str	r0, [r7, #20]
        if (r == NULL) {
 8017980:	697b      	ldr	r3, [r7, #20]
 8017982:	2b00      	cmp	r3, #0
 8017984:	f000 80a1 	beq.w	8017aca <icmp_input+0x216>
          LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: allocating new pbuf failed\n"));
          goto icmperr;
        }
        if (r->len < hlen + sizeof(struct icmp_echo_hdr)) {
 8017988:	697b      	ldr	r3, [r7, #20]
 801798a:	895b      	ldrh	r3, [r3, #10]
 801798c:	461a      	mov	r2, r3
 801798e:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8017990:	3308      	adds	r3, #8
 8017992:	429a      	cmp	r2, r3
 8017994:	d203      	bcs.n	801799e <icmp_input+0xea>
          LWIP_DEBUGF(ICMP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("first pbuf cannot hold the ICMP header"));
          pbuf_free(r);
 8017996:	6978      	ldr	r0, [r7, #20]
 8017998:	f7f9 f94e 	bl	8010c38 <pbuf_free>
          goto icmperr;
 801799c:	e096      	b.n	8017acc <icmp_input+0x218>
        }
        /* copy the ip header */
        MEMCPY(r->payload, iphdr_in, hlen);
 801799e:	697b      	ldr	r3, [r7, #20]
 80179a0:	685b      	ldr	r3, [r3, #4]
 80179a2:	8c7a      	ldrh	r2, [r7, #34]	; 0x22
 80179a4:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80179a6:	4618      	mov	r0, r3
 80179a8:	f002 fa2d 	bl	8019e06 <memcpy>
        /* switch r->payload back to icmp header (cannot fail) */
        if (pbuf_remove_header(r, hlen)) {
 80179ac:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 80179ae:	4619      	mov	r1, r3
 80179b0:	6978      	ldr	r0, [r7, #20]
 80179b2:	f7f9 f8bb 	bl	8010b2c <pbuf_remove_header>
 80179b6:	4603      	mov	r3, r0
 80179b8:	2b00      	cmp	r3, #0
 80179ba:	d009      	beq.n	80179d0 <icmp_input+0x11c>
          LWIP_ASSERT("icmp_input: moving r->payload to icmp header failed\n", 0);
 80179bc:	4b49      	ldr	r3, [pc, #292]	; (8017ae4 <icmp_input+0x230>)
 80179be:	22b6      	movs	r2, #182	; 0xb6
 80179c0:	4949      	ldr	r1, [pc, #292]	; (8017ae8 <icmp_input+0x234>)
 80179c2:	484a      	ldr	r0, [pc, #296]	; (8017aec <icmp_input+0x238>)
 80179c4:	f002 f850 	bl	8019a68 <iprintf>
          pbuf_free(r);
 80179c8:	6978      	ldr	r0, [r7, #20]
 80179ca:	f7f9 f935 	bl	8010c38 <pbuf_free>
          goto icmperr;
 80179ce:	e07d      	b.n	8017acc <icmp_input+0x218>
        }
        /* copy the rest of the packet without ip header */
        if (pbuf_copy(r, p) != ERR_OK) {
 80179d0:	6879      	ldr	r1, [r7, #4]
 80179d2:	6978      	ldr	r0, [r7, #20]
 80179d4:	f7f9 fa48 	bl	8010e68 <pbuf_copy>
 80179d8:	4603      	mov	r3, r0
 80179da:	2b00      	cmp	r3, #0
 80179dc:	d003      	beq.n	80179e6 <icmp_input+0x132>
          LWIP_DEBUGF(ICMP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("icmp_input: copying to new pbuf failed"));
          pbuf_free(r);
 80179de:	6978      	ldr	r0, [r7, #20]
 80179e0:	f7f9 f92a 	bl	8010c38 <pbuf_free>
          goto icmperr;
 80179e4:	e072      	b.n	8017acc <icmp_input+0x218>
        }
        /* free the original p */
        pbuf_free(p);
 80179e6:	6878      	ldr	r0, [r7, #4]
 80179e8:	f7f9 f926 	bl	8010c38 <pbuf_free>
        /* we now have an identical copy of p that has room for link headers */
        p = r;
 80179ec:	697b      	ldr	r3, [r7, #20]
 80179ee:	607b      	str	r3, [r7, #4]
 80179f0:	e00f      	b.n	8017a12 <icmp_input+0x15e>
      } else {
        /* restore p->payload to point to icmp header (cannot fail) */
        if (pbuf_remove_header(p, hlen + PBUF_LINK_HLEN + PBUF_LINK_ENCAPSULATION_HLEN)) {
 80179f2:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 80179f4:	330e      	adds	r3, #14
 80179f6:	4619      	mov	r1, r3
 80179f8:	6878      	ldr	r0, [r7, #4]
 80179fa:	f7f9 f897 	bl	8010b2c <pbuf_remove_header>
 80179fe:	4603      	mov	r3, r0
 8017a00:	2b00      	cmp	r3, #0
 8017a02:	d006      	beq.n	8017a12 <icmp_input+0x15e>
          LWIP_ASSERT("icmp_input: restoring original p->payload failed\n", 0);
 8017a04:	4b37      	ldr	r3, [pc, #220]	; (8017ae4 <icmp_input+0x230>)
 8017a06:	22c7      	movs	r2, #199	; 0xc7
 8017a08:	4939      	ldr	r1, [pc, #228]	; (8017af0 <icmp_input+0x23c>)
 8017a0a:	4838      	ldr	r0, [pc, #224]	; (8017aec <icmp_input+0x238>)
 8017a0c:	f002 f82c 	bl	8019a68 <iprintf>
          goto icmperr;
 8017a10:	e05c      	b.n	8017acc <icmp_input+0x218>
      }
#endif /* LWIP_ICMP_ECHO_CHECK_INPUT_PBUF_LEN */
      /* At this point, all checks are OK. */
      /* We generate an answer by switching the dest and src ip addresses,
       * setting the icmp type to ECHO_RESPONSE and updating the checksum. */
      iecho = (struct icmp_echo_hdr *)p->payload;
 8017a12:	687b      	ldr	r3, [r7, #4]
 8017a14:	685b      	ldr	r3, [r3, #4]
 8017a16:	613b      	str	r3, [r7, #16]
      if (pbuf_add_header(p, hlen)) {
 8017a18:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8017a1a:	4619      	mov	r1, r3
 8017a1c:	6878      	ldr	r0, [r7, #4]
 8017a1e:	f7f9 f875 	bl	8010b0c <pbuf_add_header>
 8017a22:	4603      	mov	r3, r0
 8017a24:	2b00      	cmp	r3, #0
 8017a26:	d13c      	bne.n	8017aa2 <icmp_input+0x1ee>
        LWIP_DEBUGF(ICMP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("Can't move over header in packet"));
      } else {
        err_t ret;
        struct ip_hdr *iphdr = (struct ip_hdr *)p->payload;
 8017a28:	687b      	ldr	r3, [r7, #4]
 8017a2a:	685b      	ldr	r3, [r3, #4]
 8017a2c:	60fb      	str	r3, [r7, #12]
        ip4_addr_copy(iphdr->src, *src);
 8017a2e:	69fb      	ldr	r3, [r7, #28]
 8017a30:	681a      	ldr	r2, [r3, #0]
 8017a32:	68fb      	ldr	r3, [r7, #12]
 8017a34:	60da      	str	r2, [r3, #12]
        ip4_addr_copy(iphdr->dest, *ip4_current_src_addr());
 8017a36:	4b29      	ldr	r3, [pc, #164]	; (8017adc <icmp_input+0x228>)
 8017a38:	691a      	ldr	r2, [r3, #16]
 8017a3a:	68fb      	ldr	r3, [r7, #12]
 8017a3c:	611a      	str	r2, [r3, #16]
        ICMPH_TYPE_SET(iecho, ICMP_ER);
 8017a3e:	693b      	ldr	r3, [r7, #16]
 8017a40:	2200      	movs	r2, #0
 8017a42:	701a      	strb	r2, [r3, #0]
#if CHECKSUM_GEN_ICMP
        IF__NETIF_CHECKSUM_ENABLED(inp, NETIF_CHECKSUM_GEN_ICMP) {
          /* adjust the checksum */
          if (iecho->chksum > PP_HTONS(0xffffU - (ICMP_ECHO << 8))) {
 8017a44:	693b      	ldr	r3, [r7, #16]
 8017a46:	885b      	ldrh	r3, [r3, #2]
 8017a48:	b29b      	uxth	r3, r3
 8017a4a:	f64f 72f7 	movw	r2, #65527	; 0xfff7
 8017a4e:	4293      	cmp	r3, r2
 8017a50:	d907      	bls.n	8017a62 <icmp_input+0x1ae>
            iecho->chksum = (u16_t)(iecho->chksum + PP_HTONS((u16_t)(ICMP_ECHO << 8)) + 1);
 8017a52:	693b      	ldr	r3, [r7, #16]
 8017a54:	885b      	ldrh	r3, [r3, #2]
 8017a56:	b29b      	uxth	r3, r3
 8017a58:	3309      	adds	r3, #9
 8017a5a:	b29a      	uxth	r2, r3
 8017a5c:	693b      	ldr	r3, [r7, #16]
 8017a5e:	805a      	strh	r2, [r3, #2]
 8017a60:	e006      	b.n	8017a70 <icmp_input+0x1bc>
          } else {
            iecho->chksum = (u16_t)(iecho->chksum + PP_HTONS(ICMP_ECHO << 8));
 8017a62:	693b      	ldr	r3, [r7, #16]
 8017a64:	885b      	ldrh	r3, [r3, #2]
 8017a66:	b29b      	uxth	r3, r3
 8017a68:	3308      	adds	r3, #8
 8017a6a:	b29a      	uxth	r2, r3
 8017a6c:	693b      	ldr	r3, [r7, #16]
 8017a6e:	805a      	strh	r2, [r3, #2]
#else /* CHECKSUM_GEN_ICMP */
        iecho->chksum = 0;
#endif /* CHECKSUM_GEN_ICMP */

        /* Set the correct TTL and recalculate the header checksum. */
        IPH_TTL_SET(iphdr, ICMP_TTL);
 8017a70:	68fb      	ldr	r3, [r7, #12]
 8017a72:	22ff      	movs	r2, #255	; 0xff
 8017a74:	721a      	strb	r2, [r3, #8]
        IPH_CHKSUM_SET(iphdr, 0);
 8017a76:	68fb      	ldr	r3, [r7, #12]
 8017a78:	2200      	movs	r2, #0
 8017a7a:	729a      	strb	r2, [r3, #10]
 8017a7c:	2200      	movs	r2, #0
 8017a7e:	72da      	strb	r2, [r3, #11]
        MIB2_STATS_INC(mib2.icmpoutmsgs);
        /* increase number of echo replies attempted to send */
        MIB2_STATS_INC(mib2.icmpoutechoreps);

        /* send an ICMP packet */
        ret = ip4_output_if(p, src, LWIP_IP_HDRINCL,
 8017a80:	683b      	ldr	r3, [r7, #0]
 8017a82:	9302      	str	r3, [sp, #8]
 8017a84:	2301      	movs	r3, #1
 8017a86:	9301      	str	r3, [sp, #4]
 8017a88:	2300      	movs	r3, #0
 8017a8a:	9300      	str	r3, [sp, #0]
 8017a8c:	23ff      	movs	r3, #255	; 0xff
 8017a8e:	2200      	movs	r2, #0
 8017a90:	69f9      	ldr	r1, [r7, #28]
 8017a92:	6878      	ldr	r0, [r7, #4]
 8017a94:	f000 fa80 	bl	8017f98 <ip4_output_if>
 8017a98:	4603      	mov	r3, r0
 8017a9a:	72fb      	strb	r3, [r7, #11]
                            ICMP_TTL, 0, IP_PROTO_ICMP, inp);
        if (ret != ERR_OK) {
          LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: ip_output_if returned an error: %s\n", lwip_strerr(ret)));
        }
      }
      break;
 8017a9c:	e001      	b.n	8017aa2 <icmp_input+0x1ee>
      break;
 8017a9e:	bf00      	nop
 8017aa0:	e000      	b.n	8017aa4 <icmp_input+0x1f0>
      break;
 8017aa2:	bf00      	nop
      LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: ICMP type %"S16_F" code %"S16_F" not supported.\n",
                               (s16_t)type, (s16_t)code));
      ICMP_STATS_INC(icmp.proterr);
      ICMP_STATS_INC(icmp.drop);
  }
  pbuf_free(p);
 8017aa4:	6878      	ldr	r0, [r7, #4]
 8017aa6:	f7f9 f8c7 	bl	8010c38 <pbuf_free>
  return;
 8017aaa:	e013      	b.n	8017ad4 <icmp_input+0x220>
    goto lenerr;
 8017aac:	bf00      	nop
 8017aae:	e002      	b.n	8017ab6 <icmp_input+0x202>
    goto lenerr;
 8017ab0:	bf00      	nop
 8017ab2:	e000      	b.n	8017ab6 <icmp_input+0x202>
        goto lenerr;
 8017ab4:	bf00      	nop
lenerr:
  pbuf_free(p);
 8017ab6:	6878      	ldr	r0, [r7, #4]
 8017ab8:	f7f9 f8be 	bl	8010c38 <pbuf_free>
  ICMP_STATS_INC(icmp.lenerr);
  MIB2_STATS_INC(mib2.icmpinerrors);
  return;
 8017abc:	e00a      	b.n	8017ad4 <icmp_input+0x220>
        goto icmperr;
 8017abe:	bf00      	nop
 8017ac0:	e004      	b.n	8017acc <icmp_input+0x218>
        goto icmperr;
 8017ac2:	bf00      	nop
 8017ac4:	e002      	b.n	8017acc <icmp_input+0x218>
          goto icmperr;
 8017ac6:	bf00      	nop
 8017ac8:	e000      	b.n	8017acc <icmp_input+0x218>
          goto icmperr;
 8017aca:	bf00      	nop
#if LWIP_ICMP_ECHO_CHECK_INPUT_PBUF_LEN || !LWIP_MULTICAST_PING || !LWIP_BROADCAST_PING
icmperr:
  pbuf_free(p);
 8017acc:	6878      	ldr	r0, [r7, #4]
 8017ace:	f7f9 f8b3 	bl	8010c38 <pbuf_free>
  ICMP_STATS_INC(icmp.err);
  MIB2_STATS_INC(mib2.icmpinerrors);
  return;
 8017ad2:	bf00      	nop
#endif /* LWIP_ICMP_ECHO_CHECK_INPUT_PBUF_LEN || !LWIP_MULTICAST_PING || !LWIP_BROADCAST_PING */
}
 8017ad4:	3728      	adds	r7, #40	; 0x28
 8017ad6:	46bd      	mov	sp, r7
 8017ad8:	bd80      	pop	{r7, pc}
 8017ada:	bf00      	nop
 8017adc:	20000768 	.word	0x20000768
 8017ae0:	2000077c 	.word	0x2000077c
 8017ae4:	0801e77c 	.word	0x0801e77c
 8017ae8:	0801e7b4 	.word	0x0801e7b4
 8017aec:	0801e7ec 	.word	0x0801e7ec
 8017af0:	0801e814 	.word	0x0801e814

08017af4 <icmp_dest_unreach>:
 *          p->payload pointing to the IP header
 * @param t type of the 'unreachable' packet
 */
void
icmp_dest_unreach(struct pbuf *p, enum icmp_dur_type t)
{
 8017af4:	b580      	push	{r7, lr}
 8017af6:	b082      	sub	sp, #8
 8017af8:	af00      	add	r7, sp, #0
 8017afa:	6078      	str	r0, [r7, #4]
 8017afc:	460b      	mov	r3, r1
 8017afe:	70fb      	strb	r3, [r7, #3]
  MIB2_STATS_INC(mib2.icmpoutdestunreachs);
  icmp_send_response(p, ICMP_DUR, t);
 8017b00:	78fb      	ldrb	r3, [r7, #3]
 8017b02:	461a      	mov	r2, r3
 8017b04:	2103      	movs	r1, #3
 8017b06:	6878      	ldr	r0, [r7, #4]
 8017b08:	f000 f814 	bl	8017b34 <icmp_send_response>
}
 8017b0c:	bf00      	nop
 8017b0e:	3708      	adds	r7, #8
 8017b10:	46bd      	mov	sp, r7
 8017b12:	bd80      	pop	{r7, pc}

08017b14 <icmp_time_exceeded>:
 *          p->payload pointing to the IP header
 * @param t type of the 'time exceeded' packet
 */
void
icmp_time_exceeded(struct pbuf *p, enum icmp_te_type t)
{
 8017b14:	b580      	push	{r7, lr}
 8017b16:	b082      	sub	sp, #8
 8017b18:	af00      	add	r7, sp, #0
 8017b1a:	6078      	str	r0, [r7, #4]
 8017b1c:	460b      	mov	r3, r1
 8017b1e:	70fb      	strb	r3, [r7, #3]
  MIB2_STATS_INC(mib2.icmpouttimeexcds);
  icmp_send_response(p, ICMP_TE, t);
 8017b20:	78fb      	ldrb	r3, [r7, #3]
 8017b22:	461a      	mov	r2, r3
 8017b24:	210b      	movs	r1, #11
 8017b26:	6878      	ldr	r0, [r7, #4]
 8017b28:	f000 f804 	bl	8017b34 <icmp_send_response>
}
 8017b2c:	bf00      	nop
 8017b2e:	3708      	adds	r7, #8
 8017b30:	46bd      	mov	sp, r7
 8017b32:	bd80      	pop	{r7, pc}

08017b34 <icmp_send_response>:
 * @param type Type of the ICMP header
 * @param code Code of the ICMP header
 */
static void
icmp_send_response(struct pbuf *p, u8_t type, u8_t code)
{
 8017b34:	b580      	push	{r7, lr}
 8017b36:	b08c      	sub	sp, #48	; 0x30
 8017b38:	af04      	add	r7, sp, #16
 8017b3a:	6078      	str	r0, [r7, #4]
 8017b3c:	460b      	mov	r3, r1
 8017b3e:	70fb      	strb	r3, [r7, #3]
 8017b40:	4613      	mov	r3, r2
 8017b42:	70bb      	strb	r3, [r7, #2]

  /* increase number of messages attempted to send */
  MIB2_STATS_INC(mib2.icmpoutmsgs);

  /* ICMP header + IP header + 8 bytes of data */
  q = pbuf_alloc(PBUF_IP, sizeof(struct icmp_echo_hdr) + IP_HLEN + ICMP_DEST_UNREACH_DATASIZE,
 8017b44:	f44f 7220 	mov.w	r2, #640	; 0x280
 8017b48:	2124      	movs	r1, #36	; 0x24
 8017b4a:	2022      	movs	r0, #34	; 0x22
 8017b4c:	f7f8 fd90 	bl	8010670 <pbuf_alloc>
 8017b50:	61f8      	str	r0, [r7, #28]
                 PBUF_RAM);
  if (q == NULL) {
 8017b52:	69fb      	ldr	r3, [r7, #28]
 8017b54:	2b00      	cmp	r3, #0
 8017b56:	d056      	beq.n	8017c06 <icmp_send_response+0xd2>
    LWIP_DEBUGF(ICMP_DEBUG, ("icmp_time_exceeded: failed to allocate pbuf for ICMP packet.\n"));
    MIB2_STATS_INC(mib2.icmpouterrors);
    return;
  }
  LWIP_ASSERT("check that first pbuf can hold icmp message",
 8017b58:	69fb      	ldr	r3, [r7, #28]
 8017b5a:	895b      	ldrh	r3, [r3, #10]
 8017b5c:	2b23      	cmp	r3, #35	; 0x23
 8017b5e:	d806      	bhi.n	8017b6e <icmp_send_response+0x3a>
 8017b60:	4b2b      	ldr	r3, [pc, #172]	; (8017c10 <icmp_send_response+0xdc>)
 8017b62:	f44f 72b4 	mov.w	r2, #360	; 0x168
 8017b66:	492b      	ldr	r1, [pc, #172]	; (8017c14 <icmp_send_response+0xe0>)
 8017b68:	482b      	ldr	r0, [pc, #172]	; (8017c18 <icmp_send_response+0xe4>)
 8017b6a:	f001 ff7d 	bl	8019a68 <iprintf>
              (q->len >= (sizeof(struct icmp_echo_hdr) + IP_HLEN + ICMP_DEST_UNREACH_DATASIZE)));

  iphdr = (struct ip_hdr *)p->payload;
 8017b6e:	687b      	ldr	r3, [r7, #4]
 8017b70:	685b      	ldr	r3, [r3, #4]
 8017b72:	61bb      	str	r3, [r7, #24]
  ip4_addr_debug_print_val(ICMP_DEBUG, iphdr->src);
  LWIP_DEBUGF(ICMP_DEBUG, (" to "));
  ip4_addr_debug_print_val(ICMP_DEBUG, iphdr->dest);
  LWIP_DEBUGF(ICMP_DEBUG, ("\n"));

  icmphdr = (struct icmp_echo_hdr *)q->payload;
 8017b74:	69fb      	ldr	r3, [r7, #28]
 8017b76:	685b      	ldr	r3, [r3, #4]
 8017b78:	617b      	str	r3, [r7, #20]
  icmphdr->type = type;
 8017b7a:	697b      	ldr	r3, [r7, #20]
 8017b7c:	78fa      	ldrb	r2, [r7, #3]
 8017b7e:	701a      	strb	r2, [r3, #0]
  icmphdr->code = code;
 8017b80:	697b      	ldr	r3, [r7, #20]
 8017b82:	78ba      	ldrb	r2, [r7, #2]
 8017b84:	705a      	strb	r2, [r3, #1]
  icmphdr->id = 0;
 8017b86:	697b      	ldr	r3, [r7, #20]
 8017b88:	2200      	movs	r2, #0
 8017b8a:	711a      	strb	r2, [r3, #4]
 8017b8c:	2200      	movs	r2, #0
 8017b8e:	715a      	strb	r2, [r3, #5]
  icmphdr->seqno = 0;
 8017b90:	697b      	ldr	r3, [r7, #20]
 8017b92:	2200      	movs	r2, #0
 8017b94:	719a      	strb	r2, [r3, #6]
 8017b96:	2200      	movs	r2, #0
 8017b98:	71da      	strb	r2, [r3, #7]

  /* copy fields from original packet */
  SMEMCPY((u8_t *)q->payload + sizeof(struct icmp_echo_hdr), (u8_t *)p->payload,
 8017b9a:	69fb      	ldr	r3, [r7, #28]
 8017b9c:	685b      	ldr	r3, [r3, #4]
 8017b9e:	f103 0008 	add.w	r0, r3, #8
 8017ba2:	687b      	ldr	r3, [r7, #4]
 8017ba4:	685b      	ldr	r3, [r3, #4]
 8017ba6:	221c      	movs	r2, #28
 8017ba8:	4619      	mov	r1, r3
 8017baa:	f002 f92c 	bl	8019e06 <memcpy>
          IP_HLEN + ICMP_DEST_UNREACH_DATASIZE);

  ip4_addr_copy(iphdr_src, iphdr->src);
 8017bae:	69bb      	ldr	r3, [r7, #24]
 8017bb0:	68db      	ldr	r3, [r3, #12]
 8017bb2:	60fb      	str	r3, [r7, #12]
    ip4_addr_t iphdr_dst;
    ip4_addr_copy(iphdr_dst, iphdr->dest);
    netif = ip4_route_src(&iphdr_dst, &iphdr_src);
  }
#else
  netif = ip4_route(&iphdr_src);
 8017bb4:	f107 030c 	add.w	r3, r7, #12
 8017bb8:	4618      	mov	r0, r3
 8017bba:	f000 f82f 	bl	8017c1c <ip4_route>
 8017bbe:	6138      	str	r0, [r7, #16]
#endif
  if (netif != NULL) {
 8017bc0:	693b      	ldr	r3, [r7, #16]
 8017bc2:	2b00      	cmp	r3, #0
 8017bc4:	d01b      	beq.n	8017bfe <icmp_send_response+0xca>
    /* calculate checksum */
    icmphdr->chksum = 0;
 8017bc6:	697b      	ldr	r3, [r7, #20]
 8017bc8:	2200      	movs	r2, #0
 8017bca:	709a      	strb	r2, [r3, #2]
 8017bcc:	2200      	movs	r2, #0
 8017bce:	70da      	strb	r2, [r3, #3]
#if CHECKSUM_GEN_ICMP
    IF__NETIF_CHECKSUM_ENABLED(netif, NETIF_CHECKSUM_GEN_ICMP) {
      icmphdr->chksum = inet_chksum(icmphdr, q->len);
 8017bd0:	69fb      	ldr	r3, [r7, #28]
 8017bd2:	895b      	ldrh	r3, [r3, #10]
 8017bd4:	4619      	mov	r1, r3
 8017bd6:	6978      	ldr	r0, [r7, #20]
 8017bd8:	f7f7 fcb5 	bl	800f546 <inet_chksum>
 8017bdc:	4603      	mov	r3, r0
 8017bde:	461a      	mov	r2, r3
 8017be0:	697b      	ldr	r3, [r7, #20]
 8017be2:	805a      	strh	r2, [r3, #2]
    }
#endif
    ICMP_STATS_INC(icmp.xmit);
    ip4_output_if(q, NULL, &iphdr_src, ICMP_TTL, 0, IP_PROTO_ICMP, netif);
 8017be4:	f107 020c 	add.w	r2, r7, #12
 8017be8:	693b      	ldr	r3, [r7, #16]
 8017bea:	9302      	str	r3, [sp, #8]
 8017bec:	2301      	movs	r3, #1
 8017bee:	9301      	str	r3, [sp, #4]
 8017bf0:	2300      	movs	r3, #0
 8017bf2:	9300      	str	r3, [sp, #0]
 8017bf4:	23ff      	movs	r3, #255	; 0xff
 8017bf6:	2100      	movs	r1, #0
 8017bf8:	69f8      	ldr	r0, [r7, #28]
 8017bfa:	f000 f9cd 	bl	8017f98 <ip4_output_if>
  }
  pbuf_free(q);
 8017bfe:	69f8      	ldr	r0, [r7, #28]
 8017c00:	f7f9 f81a 	bl	8010c38 <pbuf_free>
 8017c04:	e000      	b.n	8017c08 <icmp_send_response+0xd4>
    return;
 8017c06:	bf00      	nop
}
 8017c08:	3720      	adds	r7, #32
 8017c0a:	46bd      	mov	sp, r7
 8017c0c:	bd80      	pop	{r7, pc}
 8017c0e:	bf00      	nop
 8017c10:	0801e77c 	.word	0x0801e77c
 8017c14:	0801e848 	.word	0x0801e848
 8017c18:	0801e7ec 	.word	0x0801e7ec

08017c1c <ip4_route>:
 * @param dest the destination IP address for which to find the route
 * @return the netif on which to send to reach dest
 */
struct netif *
ip4_route(const ip4_addr_t *dest)
{
 8017c1c:	b480      	push	{r7}
 8017c1e:	b085      	sub	sp, #20
 8017c20:	af00      	add	r7, sp, #0
 8017c22:	6078      	str	r0, [r7, #4]

  /* bug #54569: in case LWIP_SINGLE_NETIF=1 and LWIP_DEBUGF() disabled, the following loop is optimized away */
  LWIP_UNUSED_ARG(dest);

  /* iterate through netifs */
  NETIF_FOREACH(netif) {
 8017c24:	4b33      	ldr	r3, [pc, #204]	; (8017cf4 <ip4_route+0xd8>)
 8017c26:	681b      	ldr	r3, [r3, #0]
 8017c28:	60fb      	str	r3, [r7, #12]
 8017c2a:	e036      	b.n	8017c9a <ip4_route+0x7e>
    /* is the netif up, does it have a link and a valid address? */
    if (netif_is_up(netif) && netif_is_link_up(netif) && !ip4_addr_isany_val(*netif_ip4_addr(netif))) {
 8017c2c:	68fb      	ldr	r3, [r7, #12]
 8017c2e:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8017c32:	f003 0301 	and.w	r3, r3, #1
 8017c36:	b2db      	uxtb	r3, r3
 8017c38:	2b00      	cmp	r3, #0
 8017c3a:	d02b      	beq.n	8017c94 <ip4_route+0x78>
 8017c3c:	68fb      	ldr	r3, [r7, #12]
 8017c3e:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8017c42:	089b      	lsrs	r3, r3, #2
 8017c44:	f003 0301 	and.w	r3, r3, #1
 8017c48:	b2db      	uxtb	r3, r3
 8017c4a:	2b00      	cmp	r3, #0
 8017c4c:	d022      	beq.n	8017c94 <ip4_route+0x78>
 8017c4e:	68fb      	ldr	r3, [r7, #12]
 8017c50:	3304      	adds	r3, #4
 8017c52:	681b      	ldr	r3, [r3, #0]
 8017c54:	2b00      	cmp	r3, #0
 8017c56:	d01d      	beq.n	8017c94 <ip4_route+0x78>
      /* network mask matches? */
      if (ip4_addr_netcmp(dest, netif_ip4_addr(netif), netif_ip4_netmask(netif))) {
 8017c58:	687b      	ldr	r3, [r7, #4]
 8017c5a:	681a      	ldr	r2, [r3, #0]
 8017c5c:	68fb      	ldr	r3, [r7, #12]
 8017c5e:	3304      	adds	r3, #4
 8017c60:	681b      	ldr	r3, [r3, #0]
 8017c62:	405a      	eors	r2, r3
 8017c64:	68fb      	ldr	r3, [r7, #12]
 8017c66:	3308      	adds	r3, #8
 8017c68:	681b      	ldr	r3, [r3, #0]
 8017c6a:	4013      	ands	r3, r2
 8017c6c:	2b00      	cmp	r3, #0
 8017c6e:	d101      	bne.n	8017c74 <ip4_route+0x58>
        /* return netif on which to forward IP packet */
        return netif;
 8017c70:	68fb      	ldr	r3, [r7, #12]
 8017c72:	e038      	b.n	8017ce6 <ip4_route+0xca>
      }
      /* gateway matches on a non broadcast interface? (i.e. peer in a point to point interface) */
      if (((netif->flags & NETIF_FLAG_BROADCAST) == 0) && ip4_addr_cmp(dest, netif_ip4_gw(netif))) {
 8017c74:	68fb      	ldr	r3, [r7, #12]
 8017c76:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8017c7a:	f003 0302 	and.w	r3, r3, #2
 8017c7e:	2b00      	cmp	r3, #0
 8017c80:	d108      	bne.n	8017c94 <ip4_route+0x78>
 8017c82:	687b      	ldr	r3, [r7, #4]
 8017c84:	681a      	ldr	r2, [r3, #0]
 8017c86:	68fb      	ldr	r3, [r7, #12]
 8017c88:	330c      	adds	r3, #12
 8017c8a:	681b      	ldr	r3, [r3, #0]
 8017c8c:	429a      	cmp	r2, r3
 8017c8e:	d101      	bne.n	8017c94 <ip4_route+0x78>
        /* return netif on which to forward IP packet */
        return netif;
 8017c90:	68fb      	ldr	r3, [r7, #12]
 8017c92:	e028      	b.n	8017ce6 <ip4_route+0xca>
  NETIF_FOREACH(netif) {
 8017c94:	68fb      	ldr	r3, [r7, #12]
 8017c96:	681b      	ldr	r3, [r3, #0]
 8017c98:	60fb      	str	r3, [r7, #12]
 8017c9a:	68fb      	ldr	r3, [r7, #12]
 8017c9c:	2b00      	cmp	r3, #0
 8017c9e:	d1c5      	bne.n	8017c2c <ip4_route+0x10>
    return netif;
  }
#endif
#endif /* !LWIP_SINGLE_NETIF */

  if ((netif_default == NULL) || !netif_is_up(netif_default) || !netif_is_link_up(netif_default) ||
 8017ca0:	4b15      	ldr	r3, [pc, #84]	; (8017cf8 <ip4_route+0xdc>)
 8017ca2:	681b      	ldr	r3, [r3, #0]
 8017ca4:	2b00      	cmp	r3, #0
 8017ca6:	d01a      	beq.n	8017cde <ip4_route+0xc2>
 8017ca8:	4b13      	ldr	r3, [pc, #76]	; (8017cf8 <ip4_route+0xdc>)
 8017caa:	681b      	ldr	r3, [r3, #0]
 8017cac:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8017cb0:	f003 0301 	and.w	r3, r3, #1
 8017cb4:	2b00      	cmp	r3, #0
 8017cb6:	d012      	beq.n	8017cde <ip4_route+0xc2>
 8017cb8:	4b0f      	ldr	r3, [pc, #60]	; (8017cf8 <ip4_route+0xdc>)
 8017cba:	681b      	ldr	r3, [r3, #0]
 8017cbc:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8017cc0:	f003 0304 	and.w	r3, r3, #4
 8017cc4:	2b00      	cmp	r3, #0
 8017cc6:	d00a      	beq.n	8017cde <ip4_route+0xc2>
      ip4_addr_isany_val(*netif_ip4_addr(netif_default)) || ip4_addr_isloopback(dest)) {
 8017cc8:	4b0b      	ldr	r3, [pc, #44]	; (8017cf8 <ip4_route+0xdc>)
 8017cca:	681b      	ldr	r3, [r3, #0]
 8017ccc:	3304      	adds	r3, #4
 8017cce:	681b      	ldr	r3, [r3, #0]
  if ((netif_default == NULL) || !netif_is_up(netif_default) || !netif_is_link_up(netif_default) ||
 8017cd0:	2b00      	cmp	r3, #0
 8017cd2:	d004      	beq.n	8017cde <ip4_route+0xc2>
      ip4_addr_isany_val(*netif_ip4_addr(netif_default)) || ip4_addr_isloopback(dest)) {
 8017cd4:	687b      	ldr	r3, [r7, #4]
 8017cd6:	681b      	ldr	r3, [r3, #0]
 8017cd8:	b2db      	uxtb	r3, r3
 8017cda:	2b7f      	cmp	r3, #127	; 0x7f
 8017cdc:	d101      	bne.n	8017ce2 <ip4_route+0xc6>
       If this is not good enough for you, use LWIP_HOOK_IP4_ROUTE() */
    LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("ip4_route: No route to %"U16_F".%"U16_F".%"U16_F".%"U16_F"\n",
                ip4_addr1_16(dest), ip4_addr2_16(dest), ip4_addr3_16(dest), ip4_addr4_16(dest)));
    IP_STATS_INC(ip.rterr);
    MIB2_STATS_INC(mib2.ipoutnoroutes);
    return NULL;
 8017cde:	2300      	movs	r3, #0
 8017ce0:	e001      	b.n	8017ce6 <ip4_route+0xca>
  }

  return netif_default;
 8017ce2:	4b05      	ldr	r3, [pc, #20]	; (8017cf8 <ip4_route+0xdc>)
 8017ce4:	681b      	ldr	r3, [r3, #0]
}
 8017ce6:	4618      	mov	r0, r3
 8017ce8:	3714      	adds	r7, #20
 8017cea:	46bd      	mov	sp, r7
 8017cec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017cf0:	4770      	bx	lr
 8017cf2:	bf00      	nop
 8017cf4:	20007038 	.word	0x20007038
 8017cf8:	2000703c 	.word	0x2000703c

08017cfc <ip4_input_accept>:
#endif /* IP_FORWARD */

/** Return true if the current input packet should be accepted on this netif */
static int
ip4_input_accept(struct netif *netif)
{
 8017cfc:	b580      	push	{r7, lr}
 8017cfe:	b082      	sub	sp, #8
 8017d00:	af00      	add	r7, sp, #0
 8017d02:	6078      	str	r0, [r7, #4]
                         ip4_addr_get_u32(ip4_current_dest_addr()) & ip4_addr_get_u32(netif_ip4_netmask(netif)),
                         ip4_addr_get_u32(netif_ip4_addr(netif)) & ip4_addr_get_u32(netif_ip4_netmask(netif)),
                         ip4_addr_get_u32(ip4_current_dest_addr()) & ~ip4_addr_get_u32(netif_ip4_netmask(netif))));

  /* interface is up and configured? */
  if ((netif_is_up(netif)) && (!ip4_addr_isany_val(*netif_ip4_addr(netif)))) {
 8017d04:	687b      	ldr	r3, [r7, #4]
 8017d06:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8017d0a:	f003 0301 	and.w	r3, r3, #1
 8017d0e:	b2db      	uxtb	r3, r3
 8017d10:	2b00      	cmp	r3, #0
 8017d12:	d016      	beq.n	8017d42 <ip4_input_accept+0x46>
 8017d14:	687b      	ldr	r3, [r7, #4]
 8017d16:	3304      	adds	r3, #4
 8017d18:	681b      	ldr	r3, [r3, #0]
 8017d1a:	2b00      	cmp	r3, #0
 8017d1c:	d011      	beq.n	8017d42 <ip4_input_accept+0x46>
    /* unicast to this interface address? */
    if (ip4_addr_cmp(ip4_current_dest_addr(), netif_ip4_addr(netif)) ||
 8017d1e:	4b0b      	ldr	r3, [pc, #44]	; (8017d4c <ip4_input_accept+0x50>)
 8017d20:	695a      	ldr	r2, [r3, #20]
 8017d22:	687b      	ldr	r3, [r7, #4]
 8017d24:	3304      	adds	r3, #4
 8017d26:	681b      	ldr	r3, [r3, #0]
 8017d28:	429a      	cmp	r2, r3
 8017d2a:	d008      	beq.n	8017d3e <ip4_input_accept+0x42>
        /* or broadcast on this interface network address? */
        ip4_addr_isbroadcast(ip4_current_dest_addr(), netif)
 8017d2c:	4b07      	ldr	r3, [pc, #28]	; (8017d4c <ip4_input_accept+0x50>)
 8017d2e:	695b      	ldr	r3, [r3, #20]
 8017d30:	6879      	ldr	r1, [r7, #4]
 8017d32:	4618      	mov	r0, r3
 8017d34:	f000 fa08 	bl	8018148 <ip4_addr_isbroadcast_u32>
 8017d38:	4603      	mov	r3, r0
    if (ip4_addr_cmp(ip4_current_dest_addr(), netif_ip4_addr(netif)) ||
 8017d3a:	2b00      	cmp	r3, #0
 8017d3c:	d001      	beq.n	8017d42 <ip4_input_accept+0x46>
#endif /* LWIP_NETIF_LOOPBACK && !LWIP_HAVE_LOOPIF */
       ) {
      LWIP_DEBUGF(IP_DEBUG, ("ip4_input: packet accepted on interface %c%c\n",
                             netif->name[0], netif->name[1]));
      /* accept on this netif */
      return 1;
 8017d3e:	2301      	movs	r3, #1
 8017d40:	e000      	b.n	8017d44 <ip4_input_accept+0x48>
      /* accept on this netif */
      return 1;
    }
#endif /* LWIP_AUTOIP */
  }
  return 0;
 8017d42:	2300      	movs	r3, #0
}
 8017d44:	4618      	mov	r0, r3
 8017d46:	3708      	adds	r7, #8
 8017d48:	46bd      	mov	sp, r7
 8017d4a:	bd80      	pop	{r7, pc}
 8017d4c:	20000768 	.word	0x20000768

08017d50 <ip4_input>:
 * @return ERR_OK if the packet was processed (could return ERR_* if it wasn't
 *         processed, but currently always returns ERR_OK)
 */
err_t
ip4_input(struct pbuf *p, struct netif *inp)
{
 8017d50:	b580      	push	{r7, lr}
 8017d52:	b086      	sub	sp, #24
 8017d54:	af00      	add	r7, sp, #0
 8017d56:	6078      	str	r0, [r7, #4]
 8017d58:	6039      	str	r1, [r7, #0]

  IP_STATS_INC(ip.recv);
  MIB2_STATS_INC(mib2.ipinreceives);

  /* identify the IP header */
  iphdr = (struct ip_hdr *)p->payload;
 8017d5a:	687b      	ldr	r3, [r7, #4]
 8017d5c:	685b      	ldr	r3, [r3, #4]
 8017d5e:	617b      	str	r3, [r7, #20]
  if (IPH_V(iphdr) != 4) {
 8017d60:	697b      	ldr	r3, [r7, #20]
 8017d62:	781b      	ldrb	r3, [r3, #0]
 8017d64:	091b      	lsrs	r3, r3, #4
 8017d66:	b2db      	uxtb	r3, r3
 8017d68:	2b04      	cmp	r3, #4
 8017d6a:	d004      	beq.n	8017d76 <ip4_input+0x26>
    LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_WARNING, ("IP packet dropped due to bad version number %"U16_F"\n", (u16_t)IPH_V(iphdr)));
    ip4_debug_print(p);
    pbuf_free(p);
 8017d6c:	6878      	ldr	r0, [r7, #4]
 8017d6e:	f7f8 ff63 	bl	8010c38 <pbuf_free>
    IP_STATS_INC(ip.err);
    IP_STATS_INC(ip.drop);
    MIB2_STATS_INC(mib2.ipinhdrerrors);
    return ERR_OK;
 8017d72:	2300      	movs	r3, #0
 8017d74:	e107      	b.n	8017f86 <ip4_input+0x236>
    return ERR_OK;
  }
#endif

  /* obtain IP header length in bytes */
  iphdr_hlen = IPH_HL_BYTES(iphdr);
 8017d76:	697b      	ldr	r3, [r7, #20]
 8017d78:	781b      	ldrb	r3, [r3, #0]
 8017d7a:	f003 030f 	and.w	r3, r3, #15
 8017d7e:	b2db      	uxtb	r3, r3
 8017d80:	009b      	lsls	r3, r3, #2
 8017d82:	b2db      	uxtb	r3, r3
 8017d84:	81fb      	strh	r3, [r7, #14]
  /* obtain ip length in bytes */
  iphdr_len = lwip_ntohs(IPH_LEN(iphdr));
 8017d86:	697b      	ldr	r3, [r7, #20]
 8017d88:	885b      	ldrh	r3, [r3, #2]
 8017d8a:	b29b      	uxth	r3, r3
 8017d8c:	4618      	mov	r0, r3
 8017d8e:	f7f7 fb4f 	bl	800f430 <lwip_htons>
 8017d92:	4603      	mov	r3, r0
 8017d94:	81bb      	strh	r3, [r7, #12]

  /* Trim pbuf. This is especially required for packets < 60 bytes. */
  if (iphdr_len < p->tot_len) {
 8017d96:	687b      	ldr	r3, [r7, #4]
 8017d98:	891b      	ldrh	r3, [r3, #8]
 8017d9a:	89ba      	ldrh	r2, [r7, #12]
 8017d9c:	429a      	cmp	r2, r3
 8017d9e:	d204      	bcs.n	8017daa <ip4_input+0x5a>
    pbuf_realloc(p, iphdr_len);
 8017da0:	89bb      	ldrh	r3, [r7, #12]
 8017da2:	4619      	mov	r1, r3
 8017da4:	6878      	ldr	r0, [r7, #4]
 8017da6:	f7f8 fdc3 	bl	8010930 <pbuf_realloc>
  }

  /* header length exceeds first pbuf length, or ip length exceeds total pbuf length? */
  if ((iphdr_hlen > p->len) || (iphdr_len > p->tot_len) || (iphdr_hlen < IP_HLEN)) {
 8017daa:	687b      	ldr	r3, [r7, #4]
 8017dac:	895b      	ldrh	r3, [r3, #10]
 8017dae:	89fa      	ldrh	r2, [r7, #14]
 8017db0:	429a      	cmp	r2, r3
 8017db2:	d807      	bhi.n	8017dc4 <ip4_input+0x74>
 8017db4:	687b      	ldr	r3, [r7, #4]
 8017db6:	891b      	ldrh	r3, [r3, #8]
 8017db8:	89ba      	ldrh	r2, [r7, #12]
 8017dba:	429a      	cmp	r2, r3
 8017dbc:	d802      	bhi.n	8017dc4 <ip4_input+0x74>
 8017dbe:	89fb      	ldrh	r3, [r7, #14]
 8017dc0:	2b13      	cmp	r3, #19
 8017dc2:	d804      	bhi.n	8017dce <ip4_input+0x7e>
      LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_SERIOUS,
                  ("IP (len %"U16_F") is longer than pbuf (len %"U16_F"), IP packet dropped.\n",
                   iphdr_len, p->tot_len));
    }
    /* free (drop) packet pbufs */
    pbuf_free(p);
 8017dc4:	6878      	ldr	r0, [r7, #4]
 8017dc6:	f7f8 ff37 	bl	8010c38 <pbuf_free>
    IP_STATS_INC(ip.lenerr);
    IP_STATS_INC(ip.drop);
    MIB2_STATS_INC(mib2.ipindiscards);
    return ERR_OK;
 8017dca:	2300      	movs	r3, #0
 8017dcc:	e0db      	b.n	8017f86 <ip4_input+0x236>
    }
  }
#endif

  /* copy IP addresses to aligned ip_addr_t */
  ip_addr_copy_from_ip4(ip_data.current_iphdr_dest, iphdr->dest);
 8017dce:	697b      	ldr	r3, [r7, #20]
 8017dd0:	691b      	ldr	r3, [r3, #16]
 8017dd2:	4a6f      	ldr	r2, [pc, #444]	; (8017f90 <ip4_input+0x240>)
 8017dd4:	6153      	str	r3, [r2, #20]
  ip_addr_copy_from_ip4(ip_data.current_iphdr_src, iphdr->src);
 8017dd6:	697b      	ldr	r3, [r7, #20]
 8017dd8:	68db      	ldr	r3, [r3, #12]
 8017dda:	4a6d      	ldr	r2, [pc, #436]	; (8017f90 <ip4_input+0x240>)
 8017ddc:	6113      	str	r3, [r2, #16]

  /* match packet against an interface, i.e. is this packet for us? */
  if (ip4_addr_ismulticast(ip4_current_dest_addr())) {
 8017dde:	4b6c      	ldr	r3, [pc, #432]	; (8017f90 <ip4_input+0x240>)
 8017de0:	695b      	ldr	r3, [r3, #20]
 8017de2:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8017de6:	2be0      	cmp	r3, #224	; 0xe0
 8017de8:	d112      	bne.n	8017e10 <ip4_input+0xc0>
      netif = inp;
    } else {
      netif = NULL;
    }
#else /* LWIP_IGMP */
    if ((netif_is_up(inp)) && (!ip4_addr_isany_val(*netif_ip4_addr(inp)))) {
 8017dea:	683b      	ldr	r3, [r7, #0]
 8017dec:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8017df0:	f003 0301 	and.w	r3, r3, #1
 8017df4:	b2db      	uxtb	r3, r3
 8017df6:	2b00      	cmp	r3, #0
 8017df8:	d007      	beq.n	8017e0a <ip4_input+0xba>
 8017dfa:	683b      	ldr	r3, [r7, #0]
 8017dfc:	3304      	adds	r3, #4
 8017dfe:	681b      	ldr	r3, [r3, #0]
 8017e00:	2b00      	cmp	r3, #0
 8017e02:	d002      	beq.n	8017e0a <ip4_input+0xba>
      netif = inp;
 8017e04:	683b      	ldr	r3, [r7, #0]
 8017e06:	613b      	str	r3, [r7, #16]
 8017e08:	e02a      	b.n	8017e60 <ip4_input+0x110>
    } else {
      netif = NULL;
 8017e0a:	2300      	movs	r3, #0
 8017e0c:	613b      	str	r3, [r7, #16]
 8017e0e:	e027      	b.n	8017e60 <ip4_input+0x110>
    }
#endif /* LWIP_IGMP */
  } else {
    /* start trying with inp. if that's not acceptable, start walking the
       list of configured netifs. */
    if (ip4_input_accept(inp)) {
 8017e10:	6838      	ldr	r0, [r7, #0]
 8017e12:	f7ff ff73 	bl	8017cfc <ip4_input_accept>
 8017e16:	4603      	mov	r3, r0
 8017e18:	2b00      	cmp	r3, #0
 8017e1a:	d002      	beq.n	8017e22 <ip4_input+0xd2>
      netif = inp;
 8017e1c:	683b      	ldr	r3, [r7, #0]
 8017e1e:	613b      	str	r3, [r7, #16]
 8017e20:	e01e      	b.n	8017e60 <ip4_input+0x110>
    } else {
      netif = NULL;
 8017e22:	2300      	movs	r3, #0
 8017e24:	613b      	str	r3, [r7, #16]
#if !LWIP_NETIF_LOOPBACK || LWIP_HAVE_LOOPIF
      /* Packets sent to the loopback address must not be accepted on an
       * interface that does not have the loopback address assigned to it,
       * unless a non-loopback interface is used for loopback traffic. */
      if (!ip4_addr_isloopback(ip4_current_dest_addr()))
 8017e26:	4b5a      	ldr	r3, [pc, #360]	; (8017f90 <ip4_input+0x240>)
 8017e28:	695b      	ldr	r3, [r3, #20]
 8017e2a:	b2db      	uxtb	r3, r3
 8017e2c:	2b7f      	cmp	r3, #127	; 0x7f
 8017e2e:	d017      	beq.n	8017e60 <ip4_input+0x110>
#endif /* !LWIP_NETIF_LOOPBACK || LWIP_HAVE_LOOPIF */
      {
#if !LWIP_SINGLE_NETIF
        NETIF_FOREACH(netif) {
 8017e30:	4b58      	ldr	r3, [pc, #352]	; (8017f94 <ip4_input+0x244>)
 8017e32:	681b      	ldr	r3, [r3, #0]
 8017e34:	613b      	str	r3, [r7, #16]
 8017e36:	e00e      	b.n	8017e56 <ip4_input+0x106>
          if (netif == inp) {
 8017e38:	693a      	ldr	r2, [r7, #16]
 8017e3a:	683b      	ldr	r3, [r7, #0]
 8017e3c:	429a      	cmp	r2, r3
 8017e3e:	d006      	beq.n	8017e4e <ip4_input+0xfe>
            /* we checked that before already */
            continue;
          }
          if (ip4_input_accept(netif)) {
 8017e40:	6938      	ldr	r0, [r7, #16]
 8017e42:	f7ff ff5b 	bl	8017cfc <ip4_input_accept>
 8017e46:	4603      	mov	r3, r0
 8017e48:	2b00      	cmp	r3, #0
 8017e4a:	d108      	bne.n	8017e5e <ip4_input+0x10e>
 8017e4c:	e000      	b.n	8017e50 <ip4_input+0x100>
            continue;
 8017e4e:	bf00      	nop
        NETIF_FOREACH(netif) {
 8017e50:	693b      	ldr	r3, [r7, #16]
 8017e52:	681b      	ldr	r3, [r3, #0]
 8017e54:	613b      	str	r3, [r7, #16]
 8017e56:	693b      	ldr	r3, [r7, #16]
 8017e58:	2b00      	cmp	r3, #0
 8017e5a:	d1ed      	bne.n	8017e38 <ip4_input+0xe8>
 8017e5c:	e000      	b.n	8017e60 <ip4_input+0x110>
            break;
 8017e5e:	bf00      	nop
      && !ip4_addr_isany_val(*ip4_current_src_addr())
#endif /* IP_ACCEPT_LINK_LAYER_ADDRESSING */
     )
#endif /* LWIP_IGMP || IP_ACCEPT_LINK_LAYER_ADDRESSING */
  {
    if ((ip4_addr_isbroadcast(ip4_current_src_addr(), inp)) ||
 8017e60:	4b4b      	ldr	r3, [pc, #300]	; (8017f90 <ip4_input+0x240>)
 8017e62:	691b      	ldr	r3, [r3, #16]
 8017e64:	6839      	ldr	r1, [r7, #0]
 8017e66:	4618      	mov	r0, r3
 8017e68:	f000 f96e 	bl	8018148 <ip4_addr_isbroadcast_u32>
 8017e6c:	4603      	mov	r3, r0
 8017e6e:	2b00      	cmp	r3, #0
 8017e70:	d105      	bne.n	8017e7e <ip4_input+0x12e>
        (ip4_addr_ismulticast(ip4_current_src_addr()))) {
 8017e72:	4b47      	ldr	r3, [pc, #284]	; (8017f90 <ip4_input+0x240>)
 8017e74:	691b      	ldr	r3, [r3, #16]
 8017e76:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
    if ((ip4_addr_isbroadcast(ip4_current_src_addr(), inp)) ||
 8017e7a:	2be0      	cmp	r3, #224	; 0xe0
 8017e7c:	d104      	bne.n	8017e88 <ip4_input+0x138>
      /* packet source is not valid */
      LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_WARNING, ("ip4_input: packet source is not valid.\n"));
      /* free (drop) packet pbufs */
      pbuf_free(p);
 8017e7e:	6878      	ldr	r0, [r7, #4]
 8017e80:	f7f8 feda 	bl	8010c38 <pbuf_free>
      IP_STATS_INC(ip.drop);
      MIB2_STATS_INC(mib2.ipinaddrerrors);
      MIB2_STATS_INC(mib2.ipindiscards);
      return ERR_OK;
 8017e84:	2300      	movs	r3, #0
 8017e86:	e07e      	b.n	8017f86 <ip4_input+0x236>
    }
  }

  /* packet not for us? */
  if (netif == NULL) {
 8017e88:	693b      	ldr	r3, [r7, #16]
 8017e8a:	2b00      	cmp	r3, #0
 8017e8c:	d104      	bne.n	8017e98 <ip4_input+0x148>
    {
      IP_STATS_INC(ip.drop);
      MIB2_STATS_INC(mib2.ipinaddrerrors);
      MIB2_STATS_INC(mib2.ipindiscards);
    }
    pbuf_free(p);
 8017e8e:	6878      	ldr	r0, [r7, #4]
 8017e90:	f7f8 fed2 	bl	8010c38 <pbuf_free>
    return ERR_OK;
 8017e94:	2300      	movs	r3, #0
 8017e96:	e076      	b.n	8017f86 <ip4_input+0x236>
  }
  /* packet consists of multiple fragments? */
  if ((IPH_OFFSET(iphdr) & PP_HTONS(IP_OFFMASK | IP_MF)) != 0) {
 8017e98:	697b      	ldr	r3, [r7, #20]
 8017e9a:	88db      	ldrh	r3, [r3, #6]
 8017e9c:	b29b      	uxth	r3, r3
 8017e9e:	461a      	mov	r2, r3
 8017ea0:	f64f 733f 	movw	r3, #65343	; 0xff3f
 8017ea4:	4013      	ands	r3, r2
 8017ea6:	2b00      	cmp	r3, #0
 8017ea8:	d00b      	beq.n	8017ec2 <ip4_input+0x172>
#if IP_REASSEMBLY /* packet fragment reassembly code present? */
    LWIP_DEBUGF(IP_DEBUG, ("IP packet is a fragment (id=0x%04"X16_F" tot_len=%"U16_F" len=%"U16_F" MF=%"U16_F" offset=%"U16_F"), calling ip4_reass()\n",
                           lwip_ntohs(IPH_ID(iphdr)), p->tot_len, lwip_ntohs(IPH_LEN(iphdr)), (u16_t)!!(IPH_OFFSET(iphdr) & PP_HTONS(IP_MF)), (u16_t)((lwip_ntohs(IPH_OFFSET(iphdr)) & IP_OFFMASK) * 8)));
    /* reassemble the packet*/
    p = ip4_reass(p);
 8017eaa:	6878      	ldr	r0, [r7, #4]
 8017eac:	f000 fc92 	bl	80187d4 <ip4_reass>
 8017eb0:	6078      	str	r0, [r7, #4]
    /* packet not fully reassembled yet? */
    if (p == NULL) {
 8017eb2:	687b      	ldr	r3, [r7, #4]
 8017eb4:	2b00      	cmp	r3, #0
 8017eb6:	d101      	bne.n	8017ebc <ip4_input+0x16c>
      return ERR_OK;
 8017eb8:	2300      	movs	r3, #0
 8017eba:	e064      	b.n	8017f86 <ip4_input+0x236>
    }
    iphdr = (const struct ip_hdr *)p->payload;
 8017ebc:	687b      	ldr	r3, [r7, #4]
 8017ebe:	685b      	ldr	r3, [r3, #4]
 8017ec0:	617b      	str	r3, [r7, #20]
  /* send to upper layers */
  LWIP_DEBUGF(IP_DEBUG, ("ip4_input: \n"));
  ip4_debug_print(p);
  LWIP_DEBUGF(IP_DEBUG, ("ip4_input: p->len %"U16_F" p->tot_len %"U16_F"\n", p->len, p->tot_len));

  ip_data.current_netif = netif;
 8017ec2:	4a33      	ldr	r2, [pc, #204]	; (8017f90 <ip4_input+0x240>)
 8017ec4:	693b      	ldr	r3, [r7, #16]
 8017ec6:	6013      	str	r3, [r2, #0]
  ip_data.current_input_netif = inp;
 8017ec8:	4a31      	ldr	r2, [pc, #196]	; (8017f90 <ip4_input+0x240>)
 8017eca:	683b      	ldr	r3, [r7, #0]
 8017ecc:	6053      	str	r3, [r2, #4]
  ip_data.current_ip4_header = iphdr;
 8017ece:	4a30      	ldr	r2, [pc, #192]	; (8017f90 <ip4_input+0x240>)
 8017ed0:	697b      	ldr	r3, [r7, #20]
 8017ed2:	6093      	str	r3, [r2, #8]
  ip_data.current_ip_header_tot_len = IPH_HL_BYTES(iphdr);
 8017ed4:	697b      	ldr	r3, [r7, #20]
 8017ed6:	781b      	ldrb	r3, [r3, #0]
 8017ed8:	f003 030f 	and.w	r3, r3, #15
 8017edc:	b2db      	uxtb	r3, r3
 8017ede:	009b      	lsls	r3, r3, #2
 8017ee0:	b2db      	uxtb	r3, r3
 8017ee2:	b29a      	uxth	r2, r3
 8017ee4:	4b2a      	ldr	r3, [pc, #168]	; (8017f90 <ip4_input+0x240>)
 8017ee6:	819a      	strh	r2, [r3, #12]
  /* raw input did not eat the packet? */
  raw_status = raw_input(p, inp);
  if (raw_status != RAW_INPUT_EATEN)
#endif /* LWIP_RAW */
  {
    pbuf_remove_header(p, iphdr_hlen); /* Move to payload, no check necessary. */
 8017ee8:	89fb      	ldrh	r3, [r7, #14]
 8017eea:	4619      	mov	r1, r3
 8017eec:	6878      	ldr	r0, [r7, #4]
 8017eee:	f7f8 fe1d 	bl	8010b2c <pbuf_remove_header>

    switch (IPH_PROTO(iphdr)) {
 8017ef2:	697b      	ldr	r3, [r7, #20]
 8017ef4:	7a5b      	ldrb	r3, [r3, #9]
 8017ef6:	2b11      	cmp	r3, #17
 8017ef8:	d006      	beq.n	8017f08 <ip4_input+0x1b8>
 8017efa:	2b11      	cmp	r3, #17
 8017efc:	dc13      	bgt.n	8017f26 <ip4_input+0x1d6>
 8017efe:	2b01      	cmp	r3, #1
 8017f00:	d00c      	beq.n	8017f1c <ip4_input+0x1cc>
 8017f02:	2b06      	cmp	r3, #6
 8017f04:	d005      	beq.n	8017f12 <ip4_input+0x1c2>
 8017f06:	e00e      	b.n	8017f26 <ip4_input+0x1d6>
      case IP_PROTO_UDP:
#if LWIP_UDPLITE
      case IP_PROTO_UDPLITE:
#endif /* LWIP_UDPLITE */
        MIB2_STATS_INC(mib2.ipindelivers);
        udp_input(p, inp);
 8017f08:	6839      	ldr	r1, [r7, #0]
 8017f0a:	6878      	ldr	r0, [r7, #4]
 8017f0c:	f7fe fc42 	bl	8016794 <udp_input>
        break;
 8017f10:	e026      	b.n	8017f60 <ip4_input+0x210>
#endif /* LWIP_UDP */
#if LWIP_TCP
      case IP_PROTO_TCP:
        MIB2_STATS_INC(mib2.ipindelivers);
        tcp_input(p, inp);
 8017f12:	6839      	ldr	r1, [r7, #0]
 8017f14:	6878      	ldr	r0, [r7, #4]
 8017f16:	f7fa fcbb 	bl	8012890 <tcp_input>
        break;
 8017f1a:	e021      	b.n	8017f60 <ip4_input+0x210>
#endif /* LWIP_TCP */
#if LWIP_ICMP
      case IP_PROTO_ICMP:
        MIB2_STATS_INC(mib2.ipindelivers);
        icmp_input(p, inp);
 8017f1c:	6839      	ldr	r1, [r7, #0]
 8017f1e:	6878      	ldr	r0, [r7, #4]
 8017f20:	f7ff fcc8 	bl	80178b4 <icmp_input>
        break;
 8017f24:	e01c      	b.n	8017f60 <ip4_input+0x210>
        } else
#endif /* LWIP_RAW */
        {
#if LWIP_ICMP
          /* send ICMP destination protocol unreachable unless is was a broadcast */
          if (!ip4_addr_isbroadcast(ip4_current_dest_addr(), netif) &&
 8017f26:	4b1a      	ldr	r3, [pc, #104]	; (8017f90 <ip4_input+0x240>)
 8017f28:	695b      	ldr	r3, [r3, #20]
 8017f2a:	6939      	ldr	r1, [r7, #16]
 8017f2c:	4618      	mov	r0, r3
 8017f2e:	f000 f90b 	bl	8018148 <ip4_addr_isbroadcast_u32>
 8017f32:	4603      	mov	r3, r0
 8017f34:	2b00      	cmp	r3, #0
 8017f36:	d10f      	bne.n	8017f58 <ip4_input+0x208>
              !ip4_addr_ismulticast(ip4_current_dest_addr())) {
 8017f38:	4b15      	ldr	r3, [pc, #84]	; (8017f90 <ip4_input+0x240>)
 8017f3a:	695b      	ldr	r3, [r3, #20]
 8017f3c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
          if (!ip4_addr_isbroadcast(ip4_current_dest_addr(), netif) &&
 8017f40:	2be0      	cmp	r3, #224	; 0xe0
 8017f42:	d009      	beq.n	8017f58 <ip4_input+0x208>
            pbuf_header_force(p, (s16_t)iphdr_hlen); /* Move to ip header, no check necessary. */
 8017f44:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8017f48:	4619      	mov	r1, r3
 8017f4a:	6878      	ldr	r0, [r7, #4]
 8017f4c:	f7f8 fe61 	bl	8010c12 <pbuf_header_force>
            icmp_dest_unreach(p, ICMP_DUR_PROTO);
 8017f50:	2102      	movs	r1, #2
 8017f52:	6878      	ldr	r0, [r7, #4]
 8017f54:	f7ff fdce 	bl	8017af4 <icmp_dest_unreach>

          IP_STATS_INC(ip.proterr);
          IP_STATS_INC(ip.drop);
          MIB2_STATS_INC(mib2.ipinunknownprotos);
        }
        pbuf_free(p);
 8017f58:	6878      	ldr	r0, [r7, #4]
 8017f5a:	f7f8 fe6d 	bl	8010c38 <pbuf_free>
        break;
 8017f5e:	bf00      	nop
    }
  }

  /* @todo: this is not really necessary... */
  ip_data.current_netif = NULL;
 8017f60:	4b0b      	ldr	r3, [pc, #44]	; (8017f90 <ip4_input+0x240>)
 8017f62:	2200      	movs	r2, #0
 8017f64:	601a      	str	r2, [r3, #0]
  ip_data.current_input_netif = NULL;
 8017f66:	4b0a      	ldr	r3, [pc, #40]	; (8017f90 <ip4_input+0x240>)
 8017f68:	2200      	movs	r2, #0
 8017f6a:	605a      	str	r2, [r3, #4]
  ip_data.current_ip4_header = NULL;
 8017f6c:	4b08      	ldr	r3, [pc, #32]	; (8017f90 <ip4_input+0x240>)
 8017f6e:	2200      	movs	r2, #0
 8017f70:	609a      	str	r2, [r3, #8]
  ip_data.current_ip_header_tot_len = 0;
 8017f72:	4b07      	ldr	r3, [pc, #28]	; (8017f90 <ip4_input+0x240>)
 8017f74:	2200      	movs	r2, #0
 8017f76:	819a      	strh	r2, [r3, #12]
  ip4_addr_set_any(ip4_current_src_addr());
 8017f78:	4b05      	ldr	r3, [pc, #20]	; (8017f90 <ip4_input+0x240>)
 8017f7a:	2200      	movs	r2, #0
 8017f7c:	611a      	str	r2, [r3, #16]
  ip4_addr_set_any(ip4_current_dest_addr());
 8017f7e:	4b04      	ldr	r3, [pc, #16]	; (8017f90 <ip4_input+0x240>)
 8017f80:	2200      	movs	r2, #0
 8017f82:	615a      	str	r2, [r3, #20]

  return ERR_OK;
 8017f84:	2300      	movs	r3, #0
}
 8017f86:	4618      	mov	r0, r3
 8017f88:	3718      	adds	r7, #24
 8017f8a:	46bd      	mov	sp, r7
 8017f8c:	bd80      	pop	{r7, pc}
 8017f8e:	bf00      	nop
 8017f90:	20000768 	.word	0x20000768
 8017f94:	20007038 	.word	0x20007038

08017f98 <ip4_output_if>:
 */
err_t
ip4_output_if(struct pbuf *p, const ip4_addr_t *src, const ip4_addr_t *dest,
              u8_t ttl, u8_t tos,
              u8_t proto, struct netif *netif)
{
 8017f98:	b580      	push	{r7, lr}
 8017f9a:	b08a      	sub	sp, #40	; 0x28
 8017f9c:	af04      	add	r7, sp, #16
 8017f9e:	60f8      	str	r0, [r7, #12]
 8017fa0:	60b9      	str	r1, [r7, #8]
 8017fa2:	607a      	str	r2, [r7, #4]
 8017fa4:	70fb      	strb	r3, [r7, #3]
ip4_output_if_opt(struct pbuf *p, const ip4_addr_t *src, const ip4_addr_t *dest,
                  u8_t ttl, u8_t tos, u8_t proto, struct netif *netif, void *ip_options,
                  u16_t optlen)
{
#endif /* IP_OPTIONS_SEND */
  const ip4_addr_t *src_used = src;
 8017fa6:	68bb      	ldr	r3, [r7, #8]
 8017fa8:	617b      	str	r3, [r7, #20]
  if (dest != LWIP_IP_HDRINCL) {
 8017faa:	687b      	ldr	r3, [r7, #4]
 8017fac:	2b00      	cmp	r3, #0
 8017fae:	d009      	beq.n	8017fc4 <ip4_output_if+0x2c>
    if (ip4_addr_isany(src)) {
 8017fb0:	68bb      	ldr	r3, [r7, #8]
 8017fb2:	2b00      	cmp	r3, #0
 8017fb4:	d003      	beq.n	8017fbe <ip4_output_if+0x26>
 8017fb6:	68bb      	ldr	r3, [r7, #8]
 8017fb8:	681b      	ldr	r3, [r3, #0]
 8017fba:	2b00      	cmp	r3, #0
 8017fbc:	d102      	bne.n	8017fc4 <ip4_output_if+0x2c>
      src_used = netif_ip4_addr(netif);
 8017fbe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8017fc0:	3304      	adds	r3, #4
 8017fc2:	617b      	str	r3, [r7, #20]

#if IP_OPTIONS_SEND
  return ip4_output_if_opt_src(p, src_used, dest, ttl, tos, proto, netif,
                               ip_options, optlen);
#else /* IP_OPTIONS_SEND */
  return ip4_output_if_src(p, src_used, dest, ttl, tos, proto, netif);
 8017fc4:	78fa      	ldrb	r2, [r7, #3]
 8017fc6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8017fc8:	9302      	str	r3, [sp, #8]
 8017fca:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8017fce:	9301      	str	r3, [sp, #4]
 8017fd0:	f897 3020 	ldrb.w	r3, [r7, #32]
 8017fd4:	9300      	str	r3, [sp, #0]
 8017fd6:	4613      	mov	r3, r2
 8017fd8:	687a      	ldr	r2, [r7, #4]
 8017fda:	6979      	ldr	r1, [r7, #20]
 8017fdc:	68f8      	ldr	r0, [r7, #12]
 8017fde:	f000 f805 	bl	8017fec <ip4_output_if_src>
 8017fe2:	4603      	mov	r3, r0
#endif /* IP_OPTIONS_SEND */
}
 8017fe4:	4618      	mov	r0, r3
 8017fe6:	3718      	adds	r7, #24
 8017fe8:	46bd      	mov	sp, r7
 8017fea:	bd80      	pop	{r7, pc}

08017fec <ip4_output_if_src>:
 */
err_t
ip4_output_if_src(struct pbuf *p, const ip4_addr_t *src, const ip4_addr_t *dest,
                  u8_t ttl, u8_t tos,
                  u8_t proto, struct netif *netif)
{
 8017fec:	b580      	push	{r7, lr}
 8017fee:	b088      	sub	sp, #32
 8017ff0:	af00      	add	r7, sp, #0
 8017ff2:	60f8      	str	r0, [r7, #12]
 8017ff4:	60b9      	str	r1, [r7, #8]
 8017ff6:	607a      	str	r2, [r7, #4]
 8017ff8:	70fb      	strb	r3, [r7, #3]
#if CHECKSUM_GEN_IP_INLINE
  u32_t chk_sum = 0;
#endif /* CHECKSUM_GEN_IP_INLINE */

  LWIP_ASSERT_CORE_LOCKED();
  LWIP_IP_CHECK_PBUF_REF_COUNT_FOR_TX(p);
 8017ffa:	68fb      	ldr	r3, [r7, #12]
 8017ffc:	7b9b      	ldrb	r3, [r3, #14]
 8017ffe:	2b01      	cmp	r3, #1
 8018000:	d006      	beq.n	8018010 <ip4_output_if_src+0x24>
 8018002:	4b4b      	ldr	r3, [pc, #300]	; (8018130 <ip4_output_if_src+0x144>)
 8018004:	f44f 7255 	mov.w	r2, #852	; 0x354
 8018008:	494a      	ldr	r1, [pc, #296]	; (8018134 <ip4_output_if_src+0x148>)
 801800a:	484b      	ldr	r0, [pc, #300]	; (8018138 <ip4_output_if_src+0x14c>)
 801800c:	f001 fd2c 	bl	8019a68 <iprintf>

  MIB2_STATS_INC(mib2.ipoutrequests);

  /* Should the IP header be generated or is it already included in p? */
  if (dest != LWIP_IP_HDRINCL) {
 8018010:	687b      	ldr	r3, [r7, #4]
 8018012:	2b00      	cmp	r3, #0
 8018014:	d060      	beq.n	80180d8 <ip4_output_if_src+0xec>
    u16_t ip_hlen = IP_HLEN;
 8018016:	2314      	movs	r3, #20
 8018018:	837b      	strh	r3, [r7, #26]
      }
#endif /* CHECKSUM_GEN_IP_INLINE */
    }
#endif /* IP_OPTIONS_SEND */
    /* generate IP header */
    if (pbuf_add_header(p, IP_HLEN)) {
 801801a:	2114      	movs	r1, #20
 801801c:	68f8      	ldr	r0, [r7, #12]
 801801e:	f7f8 fd75 	bl	8010b0c <pbuf_add_header>
 8018022:	4603      	mov	r3, r0
 8018024:	2b00      	cmp	r3, #0
 8018026:	d002      	beq.n	801802e <ip4_output_if_src+0x42>
      LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("ip4_output: not enough room for IP header in pbuf\n"));

      IP_STATS_INC(ip.err);
      MIB2_STATS_INC(mib2.ipoutdiscards);
      return ERR_BUF;
 8018028:	f06f 0301 	mvn.w	r3, #1
 801802c:	e07c      	b.n	8018128 <ip4_output_if_src+0x13c>
    }

    iphdr = (struct ip_hdr *)p->payload;
 801802e:	68fb      	ldr	r3, [r7, #12]
 8018030:	685b      	ldr	r3, [r3, #4]
 8018032:	61fb      	str	r3, [r7, #28]
    LWIP_ASSERT("check that first pbuf can hold struct ip_hdr",
 8018034:	68fb      	ldr	r3, [r7, #12]
 8018036:	895b      	ldrh	r3, [r3, #10]
 8018038:	2b13      	cmp	r3, #19
 801803a:	d806      	bhi.n	801804a <ip4_output_if_src+0x5e>
 801803c:	4b3c      	ldr	r3, [pc, #240]	; (8018130 <ip4_output_if_src+0x144>)
 801803e:	f44f 7262 	mov.w	r2, #904	; 0x388
 8018042:	493e      	ldr	r1, [pc, #248]	; (801813c <ip4_output_if_src+0x150>)
 8018044:	483c      	ldr	r0, [pc, #240]	; (8018138 <ip4_output_if_src+0x14c>)
 8018046:	f001 fd0f 	bl	8019a68 <iprintf>
                (p->len >= sizeof(struct ip_hdr)));

    IPH_TTL_SET(iphdr, ttl);
 801804a:	69fb      	ldr	r3, [r7, #28]
 801804c:	78fa      	ldrb	r2, [r7, #3]
 801804e:	721a      	strb	r2, [r3, #8]
    IPH_PROTO_SET(iphdr, proto);
 8018050:	69fb      	ldr	r3, [r7, #28]
 8018052:	f897 202c 	ldrb.w	r2, [r7, #44]	; 0x2c
 8018056:	725a      	strb	r2, [r3, #9]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += PP_NTOHS(proto | (ttl << 8));
#endif /* CHECKSUM_GEN_IP_INLINE */

    /* dest cannot be NULL here */
    ip4_addr_copy(iphdr->dest, *dest);
 8018058:	687b      	ldr	r3, [r7, #4]
 801805a:	681a      	ldr	r2, [r3, #0]
 801805c:	69fb      	ldr	r3, [r7, #28]
 801805e:	611a      	str	r2, [r3, #16]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += ip4_addr_get_u32(&iphdr->dest) & 0xFFFF;
    chk_sum += ip4_addr_get_u32(&iphdr->dest) >> 16;
#endif /* CHECKSUM_GEN_IP_INLINE */

    IPH_VHL_SET(iphdr, 4, ip_hlen / 4);
 8018060:	8b7b      	ldrh	r3, [r7, #26]
 8018062:	089b      	lsrs	r3, r3, #2
 8018064:	b29b      	uxth	r3, r3
 8018066:	b2db      	uxtb	r3, r3
 8018068:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 801806c:	b2da      	uxtb	r2, r3
 801806e:	69fb      	ldr	r3, [r7, #28]
 8018070:	701a      	strb	r2, [r3, #0]
    IPH_TOS_SET(iphdr, tos);
 8018072:	69fb      	ldr	r3, [r7, #28]
 8018074:	f897 2028 	ldrb.w	r2, [r7, #40]	; 0x28
 8018078:	705a      	strb	r2, [r3, #1]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += PP_NTOHS(tos | (iphdr->_v_hl << 8));
#endif /* CHECKSUM_GEN_IP_INLINE */
    IPH_LEN_SET(iphdr, lwip_htons(p->tot_len));
 801807a:	68fb      	ldr	r3, [r7, #12]
 801807c:	891b      	ldrh	r3, [r3, #8]
 801807e:	4618      	mov	r0, r3
 8018080:	f7f7 f9d6 	bl	800f430 <lwip_htons>
 8018084:	4603      	mov	r3, r0
 8018086:	461a      	mov	r2, r3
 8018088:	69fb      	ldr	r3, [r7, #28]
 801808a:	805a      	strh	r2, [r3, #2]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += iphdr->_len;
#endif /* CHECKSUM_GEN_IP_INLINE */
    IPH_OFFSET_SET(iphdr, 0);
 801808c:	69fb      	ldr	r3, [r7, #28]
 801808e:	2200      	movs	r2, #0
 8018090:	719a      	strb	r2, [r3, #6]
 8018092:	2200      	movs	r2, #0
 8018094:	71da      	strb	r2, [r3, #7]
    IPH_ID_SET(iphdr, lwip_htons(ip_id));
 8018096:	4b2a      	ldr	r3, [pc, #168]	; (8018140 <ip4_output_if_src+0x154>)
 8018098:	881b      	ldrh	r3, [r3, #0]
 801809a:	4618      	mov	r0, r3
 801809c:	f7f7 f9c8 	bl	800f430 <lwip_htons>
 80180a0:	4603      	mov	r3, r0
 80180a2:	461a      	mov	r2, r3
 80180a4:	69fb      	ldr	r3, [r7, #28]
 80180a6:	809a      	strh	r2, [r3, #4]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += iphdr->_id;
#endif /* CHECKSUM_GEN_IP_INLINE */
    ++ip_id;
 80180a8:	4b25      	ldr	r3, [pc, #148]	; (8018140 <ip4_output_if_src+0x154>)
 80180aa:	881b      	ldrh	r3, [r3, #0]
 80180ac:	3301      	adds	r3, #1
 80180ae:	b29a      	uxth	r2, r3
 80180b0:	4b23      	ldr	r3, [pc, #140]	; (8018140 <ip4_output_if_src+0x154>)
 80180b2:	801a      	strh	r2, [r3, #0]

    if (src == NULL) {
 80180b4:	68bb      	ldr	r3, [r7, #8]
 80180b6:	2b00      	cmp	r3, #0
 80180b8:	d104      	bne.n	80180c4 <ip4_output_if_src+0xd8>
      ip4_addr_copy(iphdr->src, *IP4_ADDR_ANY4);
 80180ba:	4b22      	ldr	r3, [pc, #136]	; (8018144 <ip4_output_if_src+0x158>)
 80180bc:	681a      	ldr	r2, [r3, #0]
 80180be:	69fb      	ldr	r3, [r7, #28]
 80180c0:	60da      	str	r2, [r3, #12]
 80180c2:	e003      	b.n	80180cc <ip4_output_if_src+0xe0>
    } else {
      /* src cannot be NULL here */
      ip4_addr_copy(iphdr->src, *src);
 80180c4:	68bb      	ldr	r3, [r7, #8]
 80180c6:	681a      	ldr	r2, [r3, #0]
 80180c8:	69fb      	ldr	r3, [r7, #28]
 80180ca:	60da      	str	r2, [r3, #12]
    else {
      IPH_CHKSUM_SET(iphdr, 0);
    }
#endif /* LWIP_CHECKSUM_CTRL_PER_NETIF*/
#else /* CHECKSUM_GEN_IP_INLINE */
    IPH_CHKSUM_SET(iphdr, 0);
 80180cc:	69fb      	ldr	r3, [r7, #28]
 80180ce:	2200      	movs	r2, #0
 80180d0:	729a      	strb	r2, [r3, #10]
 80180d2:	2200      	movs	r2, #0
 80180d4:	72da      	strb	r2, [r3, #11]
 80180d6:	e00f      	b.n	80180f8 <ip4_output_if_src+0x10c>
    }
#endif /* CHECKSUM_GEN_IP */
#endif /* CHECKSUM_GEN_IP_INLINE */
  } else {
    /* IP header already included in p */
    if (p->len < IP_HLEN) {
 80180d8:	68fb      	ldr	r3, [r7, #12]
 80180da:	895b      	ldrh	r3, [r3, #10]
 80180dc:	2b13      	cmp	r3, #19
 80180de:	d802      	bhi.n	80180e6 <ip4_output_if_src+0xfa>
      LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("ip4_output: LWIP_IP_HDRINCL but pbuf is too short\n"));
      IP_STATS_INC(ip.err);
      MIB2_STATS_INC(mib2.ipoutdiscards);
      return ERR_BUF;
 80180e0:	f06f 0301 	mvn.w	r3, #1
 80180e4:	e020      	b.n	8018128 <ip4_output_if_src+0x13c>
    }
    iphdr = (struct ip_hdr *)p->payload;
 80180e6:	68fb      	ldr	r3, [r7, #12]
 80180e8:	685b      	ldr	r3, [r3, #4]
 80180ea:	61fb      	str	r3, [r7, #28]
    ip4_addr_copy(dest_addr, iphdr->dest);
 80180ec:	69fb      	ldr	r3, [r7, #28]
 80180ee:	691b      	ldr	r3, [r3, #16]
 80180f0:	617b      	str	r3, [r7, #20]
    dest = &dest_addr;
 80180f2:	f107 0314 	add.w	r3, r7, #20
 80180f6:	607b      	str	r3, [r7, #4]
  }
#endif /* LWIP_MULTICAST_TX_OPTIONS */
#endif /* ENABLE_LOOPBACK */
#if IP_FRAG
  /* don't fragment if interface has mtu set to 0 [loopif] */
  if (netif->mtu && (p->tot_len > netif->mtu)) {
 80180f8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80180fa:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 80180fc:	2b00      	cmp	r3, #0
 80180fe:	d00c      	beq.n	801811a <ip4_output_if_src+0x12e>
 8018100:	68fb      	ldr	r3, [r7, #12]
 8018102:	891a      	ldrh	r2, [r3, #8]
 8018104:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8018106:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 8018108:	429a      	cmp	r2, r3
 801810a:	d906      	bls.n	801811a <ip4_output_if_src+0x12e>
    return ip4_frag(p, netif, dest);
 801810c:	687a      	ldr	r2, [r7, #4]
 801810e:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8018110:	68f8      	ldr	r0, [r7, #12]
 8018112:	f000 fd53 	bl	8018bbc <ip4_frag>
 8018116:	4603      	mov	r3, r0
 8018118:	e006      	b.n	8018128 <ip4_output_if_src+0x13c>
  }
#endif /* IP_FRAG */

  LWIP_DEBUGF(IP_DEBUG, ("ip4_output_if: call netif->output()\n"));
  return netif->output(netif, p, dest);
 801811a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801811c:	695b      	ldr	r3, [r3, #20]
 801811e:	687a      	ldr	r2, [r7, #4]
 8018120:	68f9      	ldr	r1, [r7, #12]
 8018122:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8018124:	4798      	blx	r3
 8018126:	4603      	mov	r3, r0
}
 8018128:	4618      	mov	r0, r3
 801812a:	3720      	adds	r7, #32
 801812c:	46bd      	mov	sp, r7
 801812e:	bd80      	pop	{r7, pc}
 8018130:	0801e874 	.word	0x0801e874
 8018134:	0801e8a8 	.word	0x0801e8a8
 8018138:	0801e8b4 	.word	0x0801e8b4
 801813c:	0801e8dc 	.word	0x0801e8dc
 8018140:	20007196 	.word	0x20007196
 8018144:	0801ecf4 	.word	0x0801ecf4

08018148 <ip4_addr_isbroadcast_u32>:
 * @param netif the network interface against which the address is checked
 * @return returns non-zero if the address is a broadcast address
 */
u8_t
ip4_addr_isbroadcast_u32(u32_t addr, const struct netif *netif)
{
 8018148:	b480      	push	{r7}
 801814a:	b085      	sub	sp, #20
 801814c:	af00      	add	r7, sp, #0
 801814e:	6078      	str	r0, [r7, #4]
 8018150:	6039      	str	r1, [r7, #0]
  ip4_addr_t ipaddr;
  ip4_addr_set_u32(&ipaddr, addr);
 8018152:	687b      	ldr	r3, [r7, #4]
 8018154:	60fb      	str	r3, [r7, #12]

  /* all ones (broadcast) or all zeroes (old skool broadcast) */
  if ((~addr == IPADDR_ANY) ||
 8018156:	687b      	ldr	r3, [r7, #4]
 8018158:	f1b3 3fff 	cmp.w	r3, #4294967295
 801815c:	d002      	beq.n	8018164 <ip4_addr_isbroadcast_u32+0x1c>
 801815e:	687b      	ldr	r3, [r7, #4]
 8018160:	2b00      	cmp	r3, #0
 8018162:	d101      	bne.n	8018168 <ip4_addr_isbroadcast_u32+0x20>
      (addr == IPADDR_ANY)) {
    return 1;
 8018164:	2301      	movs	r3, #1
 8018166:	e02a      	b.n	80181be <ip4_addr_isbroadcast_u32+0x76>
    /* no broadcast support on this network interface? */
  } else if ((netif->flags & NETIF_FLAG_BROADCAST) == 0) {
 8018168:	683b      	ldr	r3, [r7, #0]
 801816a:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 801816e:	f003 0302 	and.w	r3, r3, #2
 8018172:	2b00      	cmp	r3, #0
 8018174:	d101      	bne.n	801817a <ip4_addr_isbroadcast_u32+0x32>
    /* the given address cannot be a broadcast address
     * nor can we check against any broadcast addresses */
    return 0;
 8018176:	2300      	movs	r3, #0
 8018178:	e021      	b.n	80181be <ip4_addr_isbroadcast_u32+0x76>
    /* address matches network interface address exactly? => no broadcast */
  } else if (addr == ip4_addr_get_u32(netif_ip4_addr(netif))) {
 801817a:	683b      	ldr	r3, [r7, #0]
 801817c:	3304      	adds	r3, #4
 801817e:	681b      	ldr	r3, [r3, #0]
 8018180:	687a      	ldr	r2, [r7, #4]
 8018182:	429a      	cmp	r2, r3
 8018184:	d101      	bne.n	801818a <ip4_addr_isbroadcast_u32+0x42>
    return 0;
 8018186:	2300      	movs	r3, #0
 8018188:	e019      	b.n	80181be <ip4_addr_isbroadcast_u32+0x76>
    /*  on the same (sub) network... */
  } else if (ip4_addr_netcmp(&ipaddr, netif_ip4_addr(netif), netif_ip4_netmask(netif))
 801818a:	68fa      	ldr	r2, [r7, #12]
 801818c:	683b      	ldr	r3, [r7, #0]
 801818e:	3304      	adds	r3, #4
 8018190:	681b      	ldr	r3, [r3, #0]
 8018192:	405a      	eors	r2, r3
 8018194:	683b      	ldr	r3, [r7, #0]
 8018196:	3308      	adds	r3, #8
 8018198:	681b      	ldr	r3, [r3, #0]
 801819a:	4013      	ands	r3, r2
 801819c:	2b00      	cmp	r3, #0
 801819e:	d10d      	bne.n	80181bc <ip4_addr_isbroadcast_u32+0x74>
             /* ...and host identifier bits are all ones? =>... */
             && ((addr & ~ip4_addr_get_u32(netif_ip4_netmask(netif))) ==
 80181a0:	683b      	ldr	r3, [r7, #0]
 80181a2:	3308      	adds	r3, #8
 80181a4:	681b      	ldr	r3, [r3, #0]
 80181a6:	43da      	mvns	r2, r3
 80181a8:	687b      	ldr	r3, [r7, #4]
 80181aa:	401a      	ands	r2, r3
                 (IPADDR_BROADCAST & ~ip4_addr_get_u32(netif_ip4_netmask(netif))))) {
 80181ac:	683b      	ldr	r3, [r7, #0]
 80181ae:	3308      	adds	r3, #8
 80181b0:	681b      	ldr	r3, [r3, #0]
 80181b2:	43db      	mvns	r3, r3
             && ((addr & ~ip4_addr_get_u32(netif_ip4_netmask(netif))) ==
 80181b4:	429a      	cmp	r2, r3
 80181b6:	d101      	bne.n	80181bc <ip4_addr_isbroadcast_u32+0x74>
    /* => network broadcast address */
    return 1;
 80181b8:	2301      	movs	r3, #1
 80181ba:	e000      	b.n	80181be <ip4_addr_isbroadcast_u32+0x76>
  } else {
    return 0;
 80181bc:	2300      	movs	r3, #0
  }
}
 80181be:	4618      	mov	r0, r3
 80181c0:	3714      	adds	r7, #20
 80181c2:	46bd      	mov	sp, r7
 80181c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80181c8:	4770      	bx	lr
	...

080181cc <ip_reass_tmr>:
 *
 * Should be called every 1000 msec (defined by IP_TMR_INTERVAL).
 */
void
ip_reass_tmr(void)
{
 80181cc:	b580      	push	{r7, lr}
 80181ce:	b084      	sub	sp, #16
 80181d0:	af00      	add	r7, sp, #0
  struct ip_reassdata *r, *prev = NULL;
 80181d2:	2300      	movs	r3, #0
 80181d4:	60bb      	str	r3, [r7, #8]

  r = reassdatagrams;
 80181d6:	4b12      	ldr	r3, [pc, #72]	; (8018220 <ip_reass_tmr+0x54>)
 80181d8:	681b      	ldr	r3, [r3, #0]
 80181da:	60fb      	str	r3, [r7, #12]
  while (r != NULL) {
 80181dc:	e018      	b.n	8018210 <ip_reass_tmr+0x44>
    /* Decrement the timer. Once it reaches 0,
     * clean up the incomplete fragment assembly */
    if (r->timer > 0) {
 80181de:	68fb      	ldr	r3, [r7, #12]
 80181e0:	7fdb      	ldrb	r3, [r3, #31]
 80181e2:	2b00      	cmp	r3, #0
 80181e4:	d00b      	beq.n	80181fe <ip_reass_tmr+0x32>
      r->timer--;
 80181e6:	68fb      	ldr	r3, [r7, #12]
 80181e8:	7fdb      	ldrb	r3, [r3, #31]
 80181ea:	3b01      	subs	r3, #1
 80181ec:	b2da      	uxtb	r2, r3
 80181ee:	68fb      	ldr	r3, [r7, #12]
 80181f0:	77da      	strb	r2, [r3, #31]
      LWIP_DEBUGF(IP_REASS_DEBUG, ("ip_reass_tmr: timer dec %"U16_F"\n", (u16_t)r->timer));
      prev = r;
 80181f2:	68fb      	ldr	r3, [r7, #12]
 80181f4:	60bb      	str	r3, [r7, #8]
      r = r->next;
 80181f6:	68fb      	ldr	r3, [r7, #12]
 80181f8:	681b      	ldr	r3, [r3, #0]
 80181fa:	60fb      	str	r3, [r7, #12]
 80181fc:	e008      	b.n	8018210 <ip_reass_tmr+0x44>
    } else {
      /* reassembly timed out */
      struct ip_reassdata *tmp;
      LWIP_DEBUGF(IP_REASS_DEBUG, ("ip_reass_tmr: timer timed out\n"));
      tmp = r;
 80181fe:	68fb      	ldr	r3, [r7, #12]
 8018200:	607b      	str	r3, [r7, #4]
      /* get the next pointer before freeing */
      r = r->next;
 8018202:	68fb      	ldr	r3, [r7, #12]
 8018204:	681b      	ldr	r3, [r3, #0]
 8018206:	60fb      	str	r3, [r7, #12]
      /* free the helper struct and all enqueued pbufs */
      ip_reass_free_complete_datagram(tmp, prev);
 8018208:	68b9      	ldr	r1, [r7, #8]
 801820a:	6878      	ldr	r0, [r7, #4]
 801820c:	f000 f80a 	bl	8018224 <ip_reass_free_complete_datagram>
  while (r != NULL) {
 8018210:	68fb      	ldr	r3, [r7, #12]
 8018212:	2b00      	cmp	r3, #0
 8018214:	d1e3      	bne.n	80181de <ip_reass_tmr+0x12>
    }
  }
}
 8018216:	bf00      	nop
 8018218:	bf00      	nop
 801821a:	3710      	adds	r7, #16
 801821c:	46bd      	mov	sp, r7
 801821e:	bd80      	pop	{r7, pc}
 8018220:	20007198 	.word	0x20007198

08018224 <ip_reass_free_complete_datagram>:
 * @param prev the previous datagram in the linked list
 * @return the number of pbufs freed
 */
static int
ip_reass_free_complete_datagram(struct ip_reassdata *ipr, struct ip_reassdata *prev)
{
 8018224:	b580      	push	{r7, lr}
 8018226:	b088      	sub	sp, #32
 8018228:	af00      	add	r7, sp, #0
 801822a:	6078      	str	r0, [r7, #4]
 801822c:	6039      	str	r1, [r7, #0]
  u16_t pbufs_freed = 0;
 801822e:	2300      	movs	r3, #0
 8018230:	83fb      	strh	r3, [r7, #30]
  u16_t clen;
  struct pbuf *p;
  struct ip_reass_helper *iprh;

  LWIP_ASSERT("prev != ipr", prev != ipr);
 8018232:	683a      	ldr	r2, [r7, #0]
 8018234:	687b      	ldr	r3, [r7, #4]
 8018236:	429a      	cmp	r2, r3
 8018238:	d105      	bne.n	8018246 <ip_reass_free_complete_datagram+0x22>
 801823a:	4b45      	ldr	r3, [pc, #276]	; (8018350 <ip_reass_free_complete_datagram+0x12c>)
 801823c:	22ab      	movs	r2, #171	; 0xab
 801823e:	4945      	ldr	r1, [pc, #276]	; (8018354 <ip_reass_free_complete_datagram+0x130>)
 8018240:	4845      	ldr	r0, [pc, #276]	; (8018358 <ip_reass_free_complete_datagram+0x134>)
 8018242:	f001 fc11 	bl	8019a68 <iprintf>
  if (prev != NULL) {
 8018246:	683b      	ldr	r3, [r7, #0]
 8018248:	2b00      	cmp	r3, #0
 801824a:	d00a      	beq.n	8018262 <ip_reass_free_complete_datagram+0x3e>
    LWIP_ASSERT("prev->next == ipr", prev->next == ipr);
 801824c:	683b      	ldr	r3, [r7, #0]
 801824e:	681b      	ldr	r3, [r3, #0]
 8018250:	687a      	ldr	r2, [r7, #4]
 8018252:	429a      	cmp	r2, r3
 8018254:	d005      	beq.n	8018262 <ip_reass_free_complete_datagram+0x3e>
 8018256:	4b3e      	ldr	r3, [pc, #248]	; (8018350 <ip_reass_free_complete_datagram+0x12c>)
 8018258:	22ad      	movs	r2, #173	; 0xad
 801825a:	4940      	ldr	r1, [pc, #256]	; (801835c <ip_reass_free_complete_datagram+0x138>)
 801825c:	483e      	ldr	r0, [pc, #248]	; (8018358 <ip_reass_free_complete_datagram+0x134>)
 801825e:	f001 fc03 	bl	8019a68 <iprintf>
  }

  MIB2_STATS_INC(mib2.ipreasmfails);
#if LWIP_ICMP
  iprh = (struct ip_reass_helper *)ipr->p->payload;
 8018262:	687b      	ldr	r3, [r7, #4]
 8018264:	685b      	ldr	r3, [r3, #4]
 8018266:	685b      	ldr	r3, [r3, #4]
 8018268:	617b      	str	r3, [r7, #20]
  if (iprh->start == 0) {
 801826a:	697b      	ldr	r3, [r7, #20]
 801826c:	889b      	ldrh	r3, [r3, #4]
 801826e:	b29b      	uxth	r3, r3
 8018270:	2b00      	cmp	r3, #0
 8018272:	d12a      	bne.n	80182ca <ip_reass_free_complete_datagram+0xa6>
    /* The first fragment was received, send ICMP time exceeded. */
    /* First, de-queue the first pbuf from r->p. */
    p = ipr->p;
 8018274:	687b      	ldr	r3, [r7, #4]
 8018276:	685b      	ldr	r3, [r3, #4]
 8018278:	61bb      	str	r3, [r7, #24]
    ipr->p = iprh->next_pbuf;
 801827a:	697b      	ldr	r3, [r7, #20]
 801827c:	681a      	ldr	r2, [r3, #0]
 801827e:	687b      	ldr	r3, [r7, #4]
 8018280:	605a      	str	r2, [r3, #4]
    /* Then, copy the original header into it. */
    SMEMCPY(p->payload, &ipr->iphdr, IP_HLEN);
 8018282:	69bb      	ldr	r3, [r7, #24]
 8018284:	6858      	ldr	r0, [r3, #4]
 8018286:	687b      	ldr	r3, [r7, #4]
 8018288:	3308      	adds	r3, #8
 801828a:	2214      	movs	r2, #20
 801828c:	4619      	mov	r1, r3
 801828e:	f001 fdba 	bl	8019e06 <memcpy>
    icmp_time_exceeded(p, ICMP_TE_FRAG);
 8018292:	2101      	movs	r1, #1
 8018294:	69b8      	ldr	r0, [r7, #24]
 8018296:	f7ff fc3d 	bl	8017b14 <icmp_time_exceeded>
    clen = pbuf_clen(p);
 801829a:	69b8      	ldr	r0, [r7, #24]
 801829c:	f7f8 fd54 	bl	8010d48 <pbuf_clen>
 80182a0:	4603      	mov	r3, r0
 80182a2:	827b      	strh	r3, [r7, #18]
    LWIP_ASSERT("pbufs_freed + clen <= 0xffff", pbufs_freed + clen <= 0xffff);
 80182a4:	8bfa      	ldrh	r2, [r7, #30]
 80182a6:	8a7b      	ldrh	r3, [r7, #18]
 80182a8:	4413      	add	r3, r2
 80182aa:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80182ae:	db05      	blt.n	80182bc <ip_reass_free_complete_datagram+0x98>
 80182b0:	4b27      	ldr	r3, [pc, #156]	; (8018350 <ip_reass_free_complete_datagram+0x12c>)
 80182b2:	22bc      	movs	r2, #188	; 0xbc
 80182b4:	492a      	ldr	r1, [pc, #168]	; (8018360 <ip_reass_free_complete_datagram+0x13c>)
 80182b6:	4828      	ldr	r0, [pc, #160]	; (8018358 <ip_reass_free_complete_datagram+0x134>)
 80182b8:	f001 fbd6 	bl	8019a68 <iprintf>
    pbufs_freed = (u16_t)(pbufs_freed + clen);
 80182bc:	8bfa      	ldrh	r2, [r7, #30]
 80182be:	8a7b      	ldrh	r3, [r7, #18]
 80182c0:	4413      	add	r3, r2
 80182c2:	83fb      	strh	r3, [r7, #30]
    pbuf_free(p);
 80182c4:	69b8      	ldr	r0, [r7, #24]
 80182c6:	f7f8 fcb7 	bl	8010c38 <pbuf_free>
  }
#endif /* LWIP_ICMP */

  /* First, free all received pbufs.  The individual pbufs need to be released
     separately as they have not yet been chained */
  p = ipr->p;
 80182ca:	687b      	ldr	r3, [r7, #4]
 80182cc:	685b      	ldr	r3, [r3, #4]
 80182ce:	61bb      	str	r3, [r7, #24]
  while (p != NULL) {
 80182d0:	e01f      	b.n	8018312 <ip_reass_free_complete_datagram+0xee>
    struct pbuf *pcur;
    iprh = (struct ip_reass_helper *)p->payload;
 80182d2:	69bb      	ldr	r3, [r7, #24]
 80182d4:	685b      	ldr	r3, [r3, #4]
 80182d6:	617b      	str	r3, [r7, #20]
    pcur = p;
 80182d8:	69bb      	ldr	r3, [r7, #24]
 80182da:	60fb      	str	r3, [r7, #12]
    /* get the next pointer before freeing */
    p = iprh->next_pbuf;
 80182dc:	697b      	ldr	r3, [r7, #20]
 80182de:	681b      	ldr	r3, [r3, #0]
 80182e0:	61bb      	str	r3, [r7, #24]
    clen = pbuf_clen(pcur);
 80182e2:	68f8      	ldr	r0, [r7, #12]
 80182e4:	f7f8 fd30 	bl	8010d48 <pbuf_clen>
 80182e8:	4603      	mov	r3, r0
 80182ea:	827b      	strh	r3, [r7, #18]
    LWIP_ASSERT("pbufs_freed + clen <= 0xffff", pbufs_freed + clen <= 0xffff);
 80182ec:	8bfa      	ldrh	r2, [r7, #30]
 80182ee:	8a7b      	ldrh	r3, [r7, #18]
 80182f0:	4413      	add	r3, r2
 80182f2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80182f6:	db05      	blt.n	8018304 <ip_reass_free_complete_datagram+0xe0>
 80182f8:	4b15      	ldr	r3, [pc, #84]	; (8018350 <ip_reass_free_complete_datagram+0x12c>)
 80182fa:	22cc      	movs	r2, #204	; 0xcc
 80182fc:	4918      	ldr	r1, [pc, #96]	; (8018360 <ip_reass_free_complete_datagram+0x13c>)
 80182fe:	4816      	ldr	r0, [pc, #88]	; (8018358 <ip_reass_free_complete_datagram+0x134>)
 8018300:	f001 fbb2 	bl	8019a68 <iprintf>
    pbufs_freed = (u16_t)(pbufs_freed + clen);
 8018304:	8bfa      	ldrh	r2, [r7, #30]
 8018306:	8a7b      	ldrh	r3, [r7, #18]
 8018308:	4413      	add	r3, r2
 801830a:	83fb      	strh	r3, [r7, #30]
    pbuf_free(pcur);
 801830c:	68f8      	ldr	r0, [r7, #12]
 801830e:	f7f8 fc93 	bl	8010c38 <pbuf_free>
  while (p != NULL) {
 8018312:	69bb      	ldr	r3, [r7, #24]
 8018314:	2b00      	cmp	r3, #0
 8018316:	d1dc      	bne.n	80182d2 <ip_reass_free_complete_datagram+0xae>
  }
  /* Then, unchain the struct ip_reassdata from the list and free it. */
  ip_reass_dequeue_datagram(ipr, prev);
 8018318:	6839      	ldr	r1, [r7, #0]
 801831a:	6878      	ldr	r0, [r7, #4]
 801831c:	f000 f8c2 	bl	80184a4 <ip_reass_dequeue_datagram>
  LWIP_ASSERT("ip_reass_pbufcount >= pbufs_freed", ip_reass_pbufcount >= pbufs_freed);
 8018320:	4b10      	ldr	r3, [pc, #64]	; (8018364 <ip_reass_free_complete_datagram+0x140>)
 8018322:	881b      	ldrh	r3, [r3, #0]
 8018324:	8bfa      	ldrh	r2, [r7, #30]
 8018326:	429a      	cmp	r2, r3
 8018328:	d905      	bls.n	8018336 <ip_reass_free_complete_datagram+0x112>
 801832a:	4b09      	ldr	r3, [pc, #36]	; (8018350 <ip_reass_free_complete_datagram+0x12c>)
 801832c:	22d2      	movs	r2, #210	; 0xd2
 801832e:	490e      	ldr	r1, [pc, #56]	; (8018368 <ip_reass_free_complete_datagram+0x144>)
 8018330:	4809      	ldr	r0, [pc, #36]	; (8018358 <ip_reass_free_complete_datagram+0x134>)
 8018332:	f001 fb99 	bl	8019a68 <iprintf>
  ip_reass_pbufcount = (u16_t)(ip_reass_pbufcount - pbufs_freed);
 8018336:	4b0b      	ldr	r3, [pc, #44]	; (8018364 <ip_reass_free_complete_datagram+0x140>)
 8018338:	881a      	ldrh	r2, [r3, #0]
 801833a:	8bfb      	ldrh	r3, [r7, #30]
 801833c:	1ad3      	subs	r3, r2, r3
 801833e:	b29a      	uxth	r2, r3
 8018340:	4b08      	ldr	r3, [pc, #32]	; (8018364 <ip_reass_free_complete_datagram+0x140>)
 8018342:	801a      	strh	r2, [r3, #0]

  return pbufs_freed;
 8018344:	8bfb      	ldrh	r3, [r7, #30]
}
 8018346:	4618      	mov	r0, r3
 8018348:	3720      	adds	r7, #32
 801834a:	46bd      	mov	sp, r7
 801834c:	bd80      	pop	{r7, pc}
 801834e:	bf00      	nop
 8018350:	0801e90c 	.word	0x0801e90c
 8018354:	0801e948 	.word	0x0801e948
 8018358:	0801e954 	.word	0x0801e954
 801835c:	0801e97c 	.word	0x0801e97c
 8018360:	0801e990 	.word	0x0801e990
 8018364:	2000719c 	.word	0x2000719c
 8018368:	0801e9b0 	.word	0x0801e9b0

0801836c <ip_reass_remove_oldest_datagram>:
 *        (used for freeing other datagrams if not enough space)
 * @return the number of pbufs freed
 */
static int
ip_reass_remove_oldest_datagram(struct ip_hdr *fraghdr, int pbufs_needed)
{
 801836c:	b580      	push	{r7, lr}
 801836e:	b08a      	sub	sp, #40	; 0x28
 8018370:	af00      	add	r7, sp, #0
 8018372:	6078      	str	r0, [r7, #4]
 8018374:	6039      	str	r1, [r7, #0]
  /* @todo Can't we simply remove the last datagram in the
   *       linked list behind reassdatagrams?
   */
  struct ip_reassdata *r, *oldest, *prev, *oldest_prev;
  int pbufs_freed = 0, pbufs_freed_current;
 8018376:	2300      	movs	r3, #0
 8018378:	617b      	str	r3, [r7, #20]
  int other_datagrams;

  /* Free datagrams until being allowed to enqueue 'pbufs_needed' pbufs,
   * but don't free the datagram that 'fraghdr' belongs to! */
  do {
    oldest = NULL;
 801837a:	2300      	movs	r3, #0
 801837c:	623b      	str	r3, [r7, #32]
    prev = NULL;
 801837e:	2300      	movs	r3, #0
 8018380:	61fb      	str	r3, [r7, #28]
    oldest_prev = NULL;
 8018382:	2300      	movs	r3, #0
 8018384:	61bb      	str	r3, [r7, #24]
    other_datagrams = 0;
 8018386:	2300      	movs	r3, #0
 8018388:	613b      	str	r3, [r7, #16]
    r = reassdatagrams;
 801838a:	4b28      	ldr	r3, [pc, #160]	; (801842c <ip_reass_remove_oldest_datagram+0xc0>)
 801838c:	681b      	ldr	r3, [r3, #0]
 801838e:	627b      	str	r3, [r7, #36]	; 0x24
    while (r != NULL) {
 8018390:	e030      	b.n	80183f4 <ip_reass_remove_oldest_datagram+0x88>
      if (!IP_ADDRESSES_AND_ID_MATCH(&r->iphdr, fraghdr)) {
 8018392:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8018394:	695a      	ldr	r2, [r3, #20]
 8018396:	687b      	ldr	r3, [r7, #4]
 8018398:	68db      	ldr	r3, [r3, #12]
 801839a:	429a      	cmp	r2, r3
 801839c:	d10c      	bne.n	80183b8 <ip_reass_remove_oldest_datagram+0x4c>
 801839e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80183a0:	699a      	ldr	r2, [r3, #24]
 80183a2:	687b      	ldr	r3, [r7, #4]
 80183a4:	691b      	ldr	r3, [r3, #16]
 80183a6:	429a      	cmp	r2, r3
 80183a8:	d106      	bne.n	80183b8 <ip_reass_remove_oldest_datagram+0x4c>
 80183aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80183ac:	899a      	ldrh	r2, [r3, #12]
 80183ae:	687b      	ldr	r3, [r7, #4]
 80183b0:	889b      	ldrh	r3, [r3, #4]
 80183b2:	b29b      	uxth	r3, r3
 80183b4:	429a      	cmp	r2, r3
 80183b6:	d014      	beq.n	80183e2 <ip_reass_remove_oldest_datagram+0x76>
        /* Not the same datagram as fraghdr */
        other_datagrams++;
 80183b8:	693b      	ldr	r3, [r7, #16]
 80183ba:	3301      	adds	r3, #1
 80183bc:	613b      	str	r3, [r7, #16]
        if (oldest == NULL) {
 80183be:	6a3b      	ldr	r3, [r7, #32]
 80183c0:	2b00      	cmp	r3, #0
 80183c2:	d104      	bne.n	80183ce <ip_reass_remove_oldest_datagram+0x62>
          oldest = r;
 80183c4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80183c6:	623b      	str	r3, [r7, #32]
          oldest_prev = prev;
 80183c8:	69fb      	ldr	r3, [r7, #28]
 80183ca:	61bb      	str	r3, [r7, #24]
 80183cc:	e009      	b.n	80183e2 <ip_reass_remove_oldest_datagram+0x76>
        } else if (r->timer <= oldest->timer) {
 80183ce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80183d0:	7fda      	ldrb	r2, [r3, #31]
 80183d2:	6a3b      	ldr	r3, [r7, #32]
 80183d4:	7fdb      	ldrb	r3, [r3, #31]
 80183d6:	429a      	cmp	r2, r3
 80183d8:	d803      	bhi.n	80183e2 <ip_reass_remove_oldest_datagram+0x76>
          /* older than the previous oldest */
          oldest = r;
 80183da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80183dc:	623b      	str	r3, [r7, #32]
          oldest_prev = prev;
 80183de:	69fb      	ldr	r3, [r7, #28]
 80183e0:	61bb      	str	r3, [r7, #24]
        }
      }
      if (r->next != NULL) {
 80183e2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80183e4:	681b      	ldr	r3, [r3, #0]
 80183e6:	2b00      	cmp	r3, #0
 80183e8:	d001      	beq.n	80183ee <ip_reass_remove_oldest_datagram+0x82>
        prev = r;
 80183ea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80183ec:	61fb      	str	r3, [r7, #28]
      }
      r = r->next;
 80183ee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80183f0:	681b      	ldr	r3, [r3, #0]
 80183f2:	627b      	str	r3, [r7, #36]	; 0x24
    while (r != NULL) {
 80183f4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80183f6:	2b00      	cmp	r3, #0
 80183f8:	d1cb      	bne.n	8018392 <ip_reass_remove_oldest_datagram+0x26>
    }
    if (oldest != NULL) {
 80183fa:	6a3b      	ldr	r3, [r7, #32]
 80183fc:	2b00      	cmp	r3, #0
 80183fe:	d008      	beq.n	8018412 <ip_reass_remove_oldest_datagram+0xa6>
      pbufs_freed_current = ip_reass_free_complete_datagram(oldest, oldest_prev);
 8018400:	69b9      	ldr	r1, [r7, #24]
 8018402:	6a38      	ldr	r0, [r7, #32]
 8018404:	f7ff ff0e 	bl	8018224 <ip_reass_free_complete_datagram>
 8018408:	60f8      	str	r0, [r7, #12]
      pbufs_freed += pbufs_freed_current;
 801840a:	697a      	ldr	r2, [r7, #20]
 801840c:	68fb      	ldr	r3, [r7, #12]
 801840e:	4413      	add	r3, r2
 8018410:	617b      	str	r3, [r7, #20]
    }
  } while ((pbufs_freed < pbufs_needed) && (other_datagrams > 1));
 8018412:	697a      	ldr	r2, [r7, #20]
 8018414:	683b      	ldr	r3, [r7, #0]
 8018416:	429a      	cmp	r2, r3
 8018418:	da02      	bge.n	8018420 <ip_reass_remove_oldest_datagram+0xb4>
 801841a:	693b      	ldr	r3, [r7, #16]
 801841c:	2b01      	cmp	r3, #1
 801841e:	dcac      	bgt.n	801837a <ip_reass_remove_oldest_datagram+0xe>
  return pbufs_freed;
 8018420:	697b      	ldr	r3, [r7, #20]
}
 8018422:	4618      	mov	r0, r3
 8018424:	3728      	adds	r7, #40	; 0x28
 8018426:	46bd      	mov	sp, r7
 8018428:	bd80      	pop	{r7, pc}
 801842a:	bf00      	nop
 801842c:	20007198 	.word	0x20007198

08018430 <ip_reass_enqueue_new_datagram>:
 * @param clen number of pbufs needed to enqueue (used for freeing other datagrams if not enough space)
 * @return A pointer to the queue location into which the fragment was enqueued
 */
static struct ip_reassdata *
ip_reass_enqueue_new_datagram(struct ip_hdr *fraghdr, int clen)
{
 8018430:	b580      	push	{r7, lr}
 8018432:	b084      	sub	sp, #16
 8018434:	af00      	add	r7, sp, #0
 8018436:	6078      	str	r0, [r7, #4]
 8018438:	6039      	str	r1, [r7, #0]
#if ! IP_REASS_FREE_OLDEST
  LWIP_UNUSED_ARG(clen);
#endif

  /* No matching previous fragment found, allocate a new reassdata struct */
  ipr = (struct ip_reassdata *)memp_malloc(MEMP_REASSDATA);
 801843a:	2004      	movs	r0, #4
 801843c:	f7f7 fd16 	bl	800fe6c <memp_malloc>
 8018440:	60f8      	str	r0, [r7, #12]
  if (ipr == NULL) {
 8018442:	68fb      	ldr	r3, [r7, #12]
 8018444:	2b00      	cmp	r3, #0
 8018446:	d110      	bne.n	801846a <ip_reass_enqueue_new_datagram+0x3a>
#if IP_REASS_FREE_OLDEST
    if (ip_reass_remove_oldest_datagram(fraghdr, clen) >= clen) {
 8018448:	6839      	ldr	r1, [r7, #0]
 801844a:	6878      	ldr	r0, [r7, #4]
 801844c:	f7ff ff8e 	bl	801836c <ip_reass_remove_oldest_datagram>
 8018450:	4602      	mov	r2, r0
 8018452:	683b      	ldr	r3, [r7, #0]
 8018454:	4293      	cmp	r3, r2
 8018456:	dc03      	bgt.n	8018460 <ip_reass_enqueue_new_datagram+0x30>
      ipr = (struct ip_reassdata *)memp_malloc(MEMP_REASSDATA);
 8018458:	2004      	movs	r0, #4
 801845a:	f7f7 fd07 	bl	800fe6c <memp_malloc>
 801845e:	60f8      	str	r0, [r7, #12]
    }
    if (ipr == NULL)
 8018460:	68fb      	ldr	r3, [r7, #12]
 8018462:	2b00      	cmp	r3, #0
 8018464:	d101      	bne.n	801846a <ip_reass_enqueue_new_datagram+0x3a>
#endif /* IP_REASS_FREE_OLDEST */
    {
      IPFRAG_STATS_INC(ip_frag.memerr);
      LWIP_DEBUGF(IP_REASS_DEBUG, ("Failed to alloc reassdata struct\n"));
      return NULL;
 8018466:	2300      	movs	r3, #0
 8018468:	e016      	b.n	8018498 <ip_reass_enqueue_new_datagram+0x68>
    }
  }
  memset(ipr, 0, sizeof(struct ip_reassdata));
 801846a:	2220      	movs	r2, #32
 801846c:	2100      	movs	r1, #0
 801846e:	68f8      	ldr	r0, [r7, #12]
 8018470:	f001 fc50 	bl	8019d14 <memset>
  ipr->timer = IP_REASS_MAXAGE;
 8018474:	68fb      	ldr	r3, [r7, #12]
 8018476:	220f      	movs	r2, #15
 8018478:	77da      	strb	r2, [r3, #31]

  /* enqueue the new structure to the front of the list */
  ipr->next = reassdatagrams;
 801847a:	4b09      	ldr	r3, [pc, #36]	; (80184a0 <ip_reass_enqueue_new_datagram+0x70>)
 801847c:	681a      	ldr	r2, [r3, #0]
 801847e:	68fb      	ldr	r3, [r7, #12]
 8018480:	601a      	str	r2, [r3, #0]
  reassdatagrams = ipr;
 8018482:	4a07      	ldr	r2, [pc, #28]	; (80184a0 <ip_reass_enqueue_new_datagram+0x70>)
 8018484:	68fb      	ldr	r3, [r7, #12]
 8018486:	6013      	str	r3, [r2, #0]
  /* copy the ip header for later tests and input */
  /* @todo: no ip options supported? */
  SMEMCPY(&(ipr->iphdr), fraghdr, IP_HLEN);
 8018488:	68fb      	ldr	r3, [r7, #12]
 801848a:	3308      	adds	r3, #8
 801848c:	2214      	movs	r2, #20
 801848e:	6879      	ldr	r1, [r7, #4]
 8018490:	4618      	mov	r0, r3
 8018492:	f001 fcb8 	bl	8019e06 <memcpy>
  return ipr;
 8018496:	68fb      	ldr	r3, [r7, #12]
}
 8018498:	4618      	mov	r0, r3
 801849a:	3710      	adds	r7, #16
 801849c:	46bd      	mov	sp, r7
 801849e:	bd80      	pop	{r7, pc}
 80184a0:	20007198 	.word	0x20007198

080184a4 <ip_reass_dequeue_datagram>:
 * Dequeues a datagram from the datagram queue. Doesn't deallocate the pbufs.
 * @param ipr points to the queue entry to dequeue
 */
static void
ip_reass_dequeue_datagram(struct ip_reassdata *ipr, struct ip_reassdata *prev)
{
 80184a4:	b580      	push	{r7, lr}
 80184a6:	b082      	sub	sp, #8
 80184a8:	af00      	add	r7, sp, #0
 80184aa:	6078      	str	r0, [r7, #4]
 80184ac:	6039      	str	r1, [r7, #0]
  /* dequeue the reass struct  */
  if (reassdatagrams == ipr) {
 80184ae:	4b10      	ldr	r3, [pc, #64]	; (80184f0 <ip_reass_dequeue_datagram+0x4c>)
 80184b0:	681b      	ldr	r3, [r3, #0]
 80184b2:	687a      	ldr	r2, [r7, #4]
 80184b4:	429a      	cmp	r2, r3
 80184b6:	d104      	bne.n	80184c2 <ip_reass_dequeue_datagram+0x1e>
    /* it was the first in the list */
    reassdatagrams = ipr->next;
 80184b8:	687b      	ldr	r3, [r7, #4]
 80184ba:	681b      	ldr	r3, [r3, #0]
 80184bc:	4a0c      	ldr	r2, [pc, #48]	; (80184f0 <ip_reass_dequeue_datagram+0x4c>)
 80184be:	6013      	str	r3, [r2, #0]
 80184c0:	e00d      	b.n	80184de <ip_reass_dequeue_datagram+0x3a>
  } else {
    /* it wasn't the first, so it must have a valid 'prev' */
    LWIP_ASSERT("sanity check linked list", prev != NULL);
 80184c2:	683b      	ldr	r3, [r7, #0]
 80184c4:	2b00      	cmp	r3, #0
 80184c6:	d106      	bne.n	80184d6 <ip_reass_dequeue_datagram+0x32>
 80184c8:	4b0a      	ldr	r3, [pc, #40]	; (80184f4 <ip_reass_dequeue_datagram+0x50>)
 80184ca:	f240 1245 	movw	r2, #325	; 0x145
 80184ce:	490a      	ldr	r1, [pc, #40]	; (80184f8 <ip_reass_dequeue_datagram+0x54>)
 80184d0:	480a      	ldr	r0, [pc, #40]	; (80184fc <ip_reass_dequeue_datagram+0x58>)
 80184d2:	f001 fac9 	bl	8019a68 <iprintf>
    prev->next = ipr->next;
 80184d6:	687b      	ldr	r3, [r7, #4]
 80184d8:	681a      	ldr	r2, [r3, #0]
 80184da:	683b      	ldr	r3, [r7, #0]
 80184dc:	601a      	str	r2, [r3, #0]
  }

  /* now we can free the ip_reassdata struct */
  memp_free(MEMP_REASSDATA, ipr);
 80184de:	6879      	ldr	r1, [r7, #4]
 80184e0:	2004      	movs	r0, #4
 80184e2:	f7f7 fd33 	bl	800ff4c <memp_free>
}
 80184e6:	bf00      	nop
 80184e8:	3708      	adds	r7, #8
 80184ea:	46bd      	mov	sp, r7
 80184ec:	bd80      	pop	{r7, pc}
 80184ee:	bf00      	nop
 80184f0:	20007198 	.word	0x20007198
 80184f4:	0801e90c 	.word	0x0801e90c
 80184f8:	0801e9d4 	.word	0x0801e9d4
 80184fc:	0801e954 	.word	0x0801e954

08018500 <ip_reass_chain_frag_into_datagram_and_validate>:
 * @param is_last is 1 if this pbuf has MF==0 (ipr->flags not updated yet)
 * @return see IP_REASS_VALIDATE_* defines
 */
static int
ip_reass_chain_frag_into_datagram_and_validate(struct ip_reassdata *ipr, struct pbuf *new_p, int is_last)
{
 8018500:	b580      	push	{r7, lr}
 8018502:	b08c      	sub	sp, #48	; 0x30
 8018504:	af00      	add	r7, sp, #0
 8018506:	60f8      	str	r0, [r7, #12]
 8018508:	60b9      	str	r1, [r7, #8]
 801850a:	607a      	str	r2, [r7, #4]
  struct ip_reass_helper *iprh, *iprh_tmp, *iprh_prev = NULL;
 801850c:	2300      	movs	r3, #0
 801850e:	62bb      	str	r3, [r7, #40]	; 0x28
  struct pbuf *q;
  u16_t offset, len;
  u8_t hlen;
  struct ip_hdr *fraghdr;
  int valid = 1;
 8018510:	2301      	movs	r3, #1
 8018512:	623b      	str	r3, [r7, #32]

  /* Extract length and fragment offset from current fragment */
  fraghdr = (struct ip_hdr *)new_p->payload;
 8018514:	68bb      	ldr	r3, [r7, #8]
 8018516:	685b      	ldr	r3, [r3, #4]
 8018518:	61fb      	str	r3, [r7, #28]
  len = lwip_ntohs(IPH_LEN(fraghdr));
 801851a:	69fb      	ldr	r3, [r7, #28]
 801851c:	885b      	ldrh	r3, [r3, #2]
 801851e:	b29b      	uxth	r3, r3
 8018520:	4618      	mov	r0, r3
 8018522:	f7f6 ff85 	bl	800f430 <lwip_htons>
 8018526:	4603      	mov	r3, r0
 8018528:	837b      	strh	r3, [r7, #26]
  hlen = IPH_HL_BYTES(fraghdr);
 801852a:	69fb      	ldr	r3, [r7, #28]
 801852c:	781b      	ldrb	r3, [r3, #0]
 801852e:	f003 030f 	and.w	r3, r3, #15
 8018532:	b2db      	uxtb	r3, r3
 8018534:	009b      	lsls	r3, r3, #2
 8018536:	767b      	strb	r3, [r7, #25]
  if (hlen > len) {
 8018538:	7e7b      	ldrb	r3, [r7, #25]
 801853a:	b29b      	uxth	r3, r3
 801853c:	8b7a      	ldrh	r2, [r7, #26]
 801853e:	429a      	cmp	r2, r3
 8018540:	d202      	bcs.n	8018548 <ip_reass_chain_frag_into_datagram_and_validate+0x48>
    /* invalid datagram */
    return IP_REASS_VALIDATE_PBUF_DROPPED;
 8018542:	f04f 33ff 	mov.w	r3, #4294967295
 8018546:	e135      	b.n	80187b4 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
  }
  len = (u16_t)(len - hlen);
 8018548:	7e7b      	ldrb	r3, [r7, #25]
 801854a:	b29b      	uxth	r3, r3
 801854c:	8b7a      	ldrh	r2, [r7, #26]
 801854e:	1ad3      	subs	r3, r2, r3
 8018550:	837b      	strh	r3, [r7, #26]
  offset = IPH_OFFSET_BYTES(fraghdr);
 8018552:	69fb      	ldr	r3, [r7, #28]
 8018554:	88db      	ldrh	r3, [r3, #6]
 8018556:	b29b      	uxth	r3, r3
 8018558:	4618      	mov	r0, r3
 801855a:	f7f6 ff69 	bl	800f430 <lwip_htons>
 801855e:	4603      	mov	r3, r0
 8018560:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8018564:	b29b      	uxth	r3, r3
 8018566:	00db      	lsls	r3, r3, #3
 8018568:	82fb      	strh	r3, [r7, #22]
  /* overwrite the fragment's ip header from the pbuf with our helper struct,
   * and setup the embedded helper structure. */
  /* make sure the struct ip_reass_helper fits into the IP header */
  LWIP_ASSERT("sizeof(struct ip_reass_helper) <= IP_HLEN",
              sizeof(struct ip_reass_helper) <= IP_HLEN);
  iprh = (struct ip_reass_helper *)new_p->payload;
 801856a:	68bb      	ldr	r3, [r7, #8]
 801856c:	685b      	ldr	r3, [r3, #4]
 801856e:	62fb      	str	r3, [r7, #44]	; 0x2c
  iprh->next_pbuf = NULL;
 8018570:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8018572:	2200      	movs	r2, #0
 8018574:	701a      	strb	r2, [r3, #0]
 8018576:	2200      	movs	r2, #0
 8018578:	705a      	strb	r2, [r3, #1]
 801857a:	2200      	movs	r2, #0
 801857c:	709a      	strb	r2, [r3, #2]
 801857e:	2200      	movs	r2, #0
 8018580:	70da      	strb	r2, [r3, #3]
  iprh->start = offset;
 8018582:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8018584:	8afa      	ldrh	r2, [r7, #22]
 8018586:	809a      	strh	r2, [r3, #4]
  iprh->end = (u16_t)(offset + len);
 8018588:	8afa      	ldrh	r2, [r7, #22]
 801858a:	8b7b      	ldrh	r3, [r7, #26]
 801858c:	4413      	add	r3, r2
 801858e:	b29a      	uxth	r2, r3
 8018590:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8018592:	80da      	strh	r2, [r3, #6]
  if (iprh->end < offset) {
 8018594:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8018596:	88db      	ldrh	r3, [r3, #6]
 8018598:	b29b      	uxth	r3, r3
 801859a:	8afa      	ldrh	r2, [r7, #22]
 801859c:	429a      	cmp	r2, r3
 801859e:	d902      	bls.n	80185a6 <ip_reass_chain_frag_into_datagram_and_validate+0xa6>
    /* u16_t overflow, cannot handle this */
    return IP_REASS_VALIDATE_PBUF_DROPPED;
 80185a0:	f04f 33ff 	mov.w	r3, #4294967295
 80185a4:	e106      	b.n	80187b4 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
  }

  /* Iterate through until we either get to the end of the list (append),
   * or we find one with a larger offset (insert). */
  for (q = ipr->p; q != NULL;) {
 80185a6:	68fb      	ldr	r3, [r7, #12]
 80185a8:	685b      	ldr	r3, [r3, #4]
 80185aa:	627b      	str	r3, [r7, #36]	; 0x24
 80185ac:	e068      	b.n	8018680 <ip_reass_chain_frag_into_datagram_and_validate+0x180>
    iprh_tmp = (struct ip_reass_helper *)q->payload;
 80185ae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80185b0:	685b      	ldr	r3, [r3, #4]
 80185b2:	613b      	str	r3, [r7, #16]
    if (iprh->start < iprh_tmp->start) {
 80185b4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80185b6:	889b      	ldrh	r3, [r3, #4]
 80185b8:	b29a      	uxth	r2, r3
 80185ba:	693b      	ldr	r3, [r7, #16]
 80185bc:	889b      	ldrh	r3, [r3, #4]
 80185be:	b29b      	uxth	r3, r3
 80185c0:	429a      	cmp	r2, r3
 80185c2:	d235      	bcs.n	8018630 <ip_reass_chain_frag_into_datagram_and_validate+0x130>
      /* the new pbuf should be inserted before this */
      iprh->next_pbuf = q;
 80185c4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80185c6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80185c8:	601a      	str	r2, [r3, #0]
      if (iprh_prev != NULL) {
 80185ca:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80185cc:	2b00      	cmp	r3, #0
 80185ce:	d020      	beq.n	8018612 <ip_reass_chain_frag_into_datagram_and_validate+0x112>
        /* not the fragment with the lowest offset */
#if IP_REASS_CHECK_OVERLAP
        if ((iprh->start < iprh_prev->end) || (iprh->end > iprh_tmp->start)) {
 80185d0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80185d2:	889b      	ldrh	r3, [r3, #4]
 80185d4:	b29a      	uxth	r2, r3
 80185d6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80185d8:	88db      	ldrh	r3, [r3, #6]
 80185da:	b29b      	uxth	r3, r3
 80185dc:	429a      	cmp	r2, r3
 80185de:	d307      	bcc.n	80185f0 <ip_reass_chain_frag_into_datagram_and_validate+0xf0>
 80185e0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80185e2:	88db      	ldrh	r3, [r3, #6]
 80185e4:	b29a      	uxth	r2, r3
 80185e6:	693b      	ldr	r3, [r7, #16]
 80185e8:	889b      	ldrh	r3, [r3, #4]
 80185ea:	b29b      	uxth	r3, r3
 80185ec:	429a      	cmp	r2, r3
 80185ee:	d902      	bls.n	80185f6 <ip_reass_chain_frag_into_datagram_and_validate+0xf6>
          /* fragment overlaps with previous or following, throw away */
          return IP_REASS_VALIDATE_PBUF_DROPPED;
 80185f0:	f04f 33ff 	mov.w	r3, #4294967295
 80185f4:	e0de      	b.n	80187b4 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
        }
#endif /* IP_REASS_CHECK_OVERLAP */
        iprh_prev->next_pbuf = new_p;
 80185f6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80185f8:	68ba      	ldr	r2, [r7, #8]
 80185fa:	601a      	str	r2, [r3, #0]
        if (iprh_prev->end != iprh->start) {
 80185fc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80185fe:	88db      	ldrh	r3, [r3, #6]
 8018600:	b29a      	uxth	r2, r3
 8018602:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8018604:	889b      	ldrh	r3, [r3, #4]
 8018606:	b29b      	uxth	r3, r3
 8018608:	429a      	cmp	r2, r3
 801860a:	d03d      	beq.n	8018688 <ip_reass_chain_frag_into_datagram_and_validate+0x188>
          /* There is a fragment missing between the current
           * and the previous fragment */
          valid = 0;
 801860c:	2300      	movs	r3, #0
 801860e:	623b      	str	r3, [r7, #32]
        }
#endif /* IP_REASS_CHECK_OVERLAP */
        /* fragment with the lowest offset */
        ipr->p = new_p;
      }
      break;
 8018610:	e03a      	b.n	8018688 <ip_reass_chain_frag_into_datagram_and_validate+0x188>
        if (iprh->end > iprh_tmp->start) {
 8018612:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8018614:	88db      	ldrh	r3, [r3, #6]
 8018616:	b29a      	uxth	r2, r3
 8018618:	693b      	ldr	r3, [r7, #16]
 801861a:	889b      	ldrh	r3, [r3, #4]
 801861c:	b29b      	uxth	r3, r3
 801861e:	429a      	cmp	r2, r3
 8018620:	d902      	bls.n	8018628 <ip_reass_chain_frag_into_datagram_and_validate+0x128>
          return IP_REASS_VALIDATE_PBUF_DROPPED;
 8018622:	f04f 33ff 	mov.w	r3, #4294967295
 8018626:	e0c5      	b.n	80187b4 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
        ipr->p = new_p;
 8018628:	68fb      	ldr	r3, [r7, #12]
 801862a:	68ba      	ldr	r2, [r7, #8]
 801862c:	605a      	str	r2, [r3, #4]
      break;
 801862e:	e02b      	b.n	8018688 <ip_reass_chain_frag_into_datagram_and_validate+0x188>
    } else if (iprh->start == iprh_tmp->start) {
 8018630:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8018632:	889b      	ldrh	r3, [r3, #4]
 8018634:	b29a      	uxth	r2, r3
 8018636:	693b      	ldr	r3, [r7, #16]
 8018638:	889b      	ldrh	r3, [r3, #4]
 801863a:	b29b      	uxth	r3, r3
 801863c:	429a      	cmp	r2, r3
 801863e:	d102      	bne.n	8018646 <ip_reass_chain_frag_into_datagram_and_validate+0x146>
      /* received the same datagram twice: no need to keep the datagram */
      return IP_REASS_VALIDATE_PBUF_DROPPED;
 8018640:	f04f 33ff 	mov.w	r3, #4294967295
 8018644:	e0b6      	b.n	80187b4 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
#if IP_REASS_CHECK_OVERLAP
    } else if (iprh->start < iprh_tmp->end) {
 8018646:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8018648:	889b      	ldrh	r3, [r3, #4]
 801864a:	b29a      	uxth	r2, r3
 801864c:	693b      	ldr	r3, [r7, #16]
 801864e:	88db      	ldrh	r3, [r3, #6]
 8018650:	b29b      	uxth	r3, r3
 8018652:	429a      	cmp	r2, r3
 8018654:	d202      	bcs.n	801865c <ip_reass_chain_frag_into_datagram_and_validate+0x15c>
      /* overlap: no need to keep the new datagram */
      return IP_REASS_VALIDATE_PBUF_DROPPED;
 8018656:	f04f 33ff 	mov.w	r3, #4294967295
 801865a:	e0ab      	b.n	80187b4 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
#endif /* IP_REASS_CHECK_OVERLAP */
    } else {
      /* Check if the fragments received so far have no holes. */
      if (iprh_prev != NULL) {
 801865c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801865e:	2b00      	cmp	r3, #0
 8018660:	d009      	beq.n	8018676 <ip_reass_chain_frag_into_datagram_and_validate+0x176>
        if (iprh_prev->end != iprh_tmp->start) {
 8018662:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8018664:	88db      	ldrh	r3, [r3, #6]
 8018666:	b29a      	uxth	r2, r3
 8018668:	693b      	ldr	r3, [r7, #16]
 801866a:	889b      	ldrh	r3, [r3, #4]
 801866c:	b29b      	uxth	r3, r3
 801866e:	429a      	cmp	r2, r3
 8018670:	d001      	beq.n	8018676 <ip_reass_chain_frag_into_datagram_and_validate+0x176>
          /* There is a fragment missing between the current
           * and the previous fragment */
          valid = 0;
 8018672:	2300      	movs	r3, #0
 8018674:	623b      	str	r3, [r7, #32]
        }
      }
    }
    q = iprh_tmp->next_pbuf;
 8018676:	693b      	ldr	r3, [r7, #16]
 8018678:	681b      	ldr	r3, [r3, #0]
 801867a:	627b      	str	r3, [r7, #36]	; 0x24
    iprh_prev = iprh_tmp;
 801867c:	693b      	ldr	r3, [r7, #16]
 801867e:	62bb      	str	r3, [r7, #40]	; 0x28
  for (q = ipr->p; q != NULL;) {
 8018680:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8018682:	2b00      	cmp	r3, #0
 8018684:	d193      	bne.n	80185ae <ip_reass_chain_frag_into_datagram_and_validate+0xae>
 8018686:	e000      	b.n	801868a <ip_reass_chain_frag_into_datagram_and_validate+0x18a>
      break;
 8018688:	bf00      	nop
  }

  /* If q is NULL, then we made it to the end of the list. Determine what to do now */
  if (q == NULL) {
 801868a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801868c:	2b00      	cmp	r3, #0
 801868e:	d12d      	bne.n	80186ec <ip_reass_chain_frag_into_datagram_and_validate+0x1ec>
    if (iprh_prev != NULL) {
 8018690:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8018692:	2b00      	cmp	r3, #0
 8018694:	d01c      	beq.n	80186d0 <ip_reass_chain_frag_into_datagram_and_validate+0x1d0>
      /* this is (for now), the fragment with the highest offset:
       * chain it to the last fragment */
#if IP_REASS_CHECK_OVERLAP
      LWIP_ASSERT("check fragments don't overlap", iprh_prev->end <= iprh->start);
 8018696:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8018698:	88db      	ldrh	r3, [r3, #6]
 801869a:	b29a      	uxth	r2, r3
 801869c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801869e:	889b      	ldrh	r3, [r3, #4]
 80186a0:	b29b      	uxth	r3, r3
 80186a2:	429a      	cmp	r2, r3
 80186a4:	d906      	bls.n	80186b4 <ip_reass_chain_frag_into_datagram_and_validate+0x1b4>
 80186a6:	4b45      	ldr	r3, [pc, #276]	; (80187bc <ip_reass_chain_frag_into_datagram_and_validate+0x2bc>)
 80186a8:	f44f 72db 	mov.w	r2, #438	; 0x1b6
 80186ac:	4944      	ldr	r1, [pc, #272]	; (80187c0 <ip_reass_chain_frag_into_datagram_and_validate+0x2c0>)
 80186ae:	4845      	ldr	r0, [pc, #276]	; (80187c4 <ip_reass_chain_frag_into_datagram_and_validate+0x2c4>)
 80186b0:	f001 f9da 	bl	8019a68 <iprintf>
#endif /* IP_REASS_CHECK_OVERLAP */
      iprh_prev->next_pbuf = new_p;
 80186b4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80186b6:	68ba      	ldr	r2, [r7, #8]
 80186b8:	601a      	str	r2, [r3, #0]
      if (iprh_prev->end != iprh->start) {
 80186ba:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80186bc:	88db      	ldrh	r3, [r3, #6]
 80186be:	b29a      	uxth	r2, r3
 80186c0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80186c2:	889b      	ldrh	r3, [r3, #4]
 80186c4:	b29b      	uxth	r3, r3
 80186c6:	429a      	cmp	r2, r3
 80186c8:	d010      	beq.n	80186ec <ip_reass_chain_frag_into_datagram_and_validate+0x1ec>
        valid = 0;
 80186ca:	2300      	movs	r3, #0
 80186cc:	623b      	str	r3, [r7, #32]
 80186ce:	e00d      	b.n	80186ec <ip_reass_chain_frag_into_datagram_and_validate+0x1ec>
      }
    } else {
#if IP_REASS_CHECK_OVERLAP
      LWIP_ASSERT("no previous fragment, this must be the first fragment!",
 80186d0:	68fb      	ldr	r3, [r7, #12]
 80186d2:	685b      	ldr	r3, [r3, #4]
 80186d4:	2b00      	cmp	r3, #0
 80186d6:	d006      	beq.n	80186e6 <ip_reass_chain_frag_into_datagram_and_validate+0x1e6>
 80186d8:	4b38      	ldr	r3, [pc, #224]	; (80187bc <ip_reass_chain_frag_into_datagram_and_validate+0x2bc>)
 80186da:	f44f 72df 	mov.w	r2, #446	; 0x1be
 80186de:	493a      	ldr	r1, [pc, #232]	; (80187c8 <ip_reass_chain_frag_into_datagram_and_validate+0x2c8>)
 80186e0:	4838      	ldr	r0, [pc, #224]	; (80187c4 <ip_reass_chain_frag_into_datagram_and_validate+0x2c4>)
 80186e2:	f001 f9c1 	bl	8019a68 <iprintf>
                  ipr->p == NULL);
#endif /* IP_REASS_CHECK_OVERLAP */
      /* this is the first fragment we ever received for this ip datagram */
      ipr->p = new_p;
 80186e6:	68fb      	ldr	r3, [r7, #12]
 80186e8:	68ba      	ldr	r2, [r7, #8]
 80186ea:	605a      	str	r2, [r3, #4]
    }
  }

  /* At this point, the validation part begins: */
  /* If we already received the last fragment */
  if (is_last || ((ipr->flags & IP_REASS_FLAG_LASTFRAG) != 0)) {
 80186ec:	687b      	ldr	r3, [r7, #4]
 80186ee:	2b00      	cmp	r3, #0
 80186f0:	d105      	bne.n	80186fe <ip_reass_chain_frag_into_datagram_and_validate+0x1fe>
 80186f2:	68fb      	ldr	r3, [r7, #12]
 80186f4:	7f9b      	ldrb	r3, [r3, #30]
 80186f6:	f003 0301 	and.w	r3, r3, #1
 80186fa:	2b00      	cmp	r3, #0
 80186fc:	d059      	beq.n	80187b2 <ip_reass_chain_frag_into_datagram_and_validate+0x2b2>
    /* and had no holes so far */
    if (valid) {
 80186fe:	6a3b      	ldr	r3, [r7, #32]
 8018700:	2b00      	cmp	r3, #0
 8018702:	d04f      	beq.n	80187a4 <ip_reass_chain_frag_into_datagram_and_validate+0x2a4>
      /* then check if the rest of the fragments is here */
      /* Check if the queue starts with the first datagram */
      if ((ipr->p == NULL) || (((struct ip_reass_helper *)ipr->p->payload)->start != 0)) {
 8018704:	68fb      	ldr	r3, [r7, #12]
 8018706:	685b      	ldr	r3, [r3, #4]
 8018708:	2b00      	cmp	r3, #0
 801870a:	d006      	beq.n	801871a <ip_reass_chain_frag_into_datagram_and_validate+0x21a>
 801870c:	68fb      	ldr	r3, [r7, #12]
 801870e:	685b      	ldr	r3, [r3, #4]
 8018710:	685b      	ldr	r3, [r3, #4]
 8018712:	889b      	ldrh	r3, [r3, #4]
 8018714:	b29b      	uxth	r3, r3
 8018716:	2b00      	cmp	r3, #0
 8018718:	d002      	beq.n	8018720 <ip_reass_chain_frag_into_datagram_and_validate+0x220>
        valid = 0;
 801871a:	2300      	movs	r3, #0
 801871c:	623b      	str	r3, [r7, #32]
 801871e:	e041      	b.n	80187a4 <ip_reass_chain_frag_into_datagram_and_validate+0x2a4>
      } else {
        /* and check that there are no holes after this datagram */
        iprh_prev = iprh;
 8018720:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8018722:	62bb      	str	r3, [r7, #40]	; 0x28
        q = iprh->next_pbuf;
 8018724:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8018726:	681b      	ldr	r3, [r3, #0]
 8018728:	627b      	str	r3, [r7, #36]	; 0x24
        while (q != NULL) {
 801872a:	e012      	b.n	8018752 <ip_reass_chain_frag_into_datagram_and_validate+0x252>
          iprh = (struct ip_reass_helper *)q->payload;
 801872c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801872e:	685b      	ldr	r3, [r3, #4]
 8018730:	62fb      	str	r3, [r7, #44]	; 0x2c
          if (iprh_prev->end != iprh->start) {
 8018732:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8018734:	88db      	ldrh	r3, [r3, #6]
 8018736:	b29a      	uxth	r2, r3
 8018738:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801873a:	889b      	ldrh	r3, [r3, #4]
 801873c:	b29b      	uxth	r3, r3
 801873e:	429a      	cmp	r2, r3
 8018740:	d002      	beq.n	8018748 <ip_reass_chain_frag_into_datagram_and_validate+0x248>
            valid = 0;
 8018742:	2300      	movs	r3, #0
 8018744:	623b      	str	r3, [r7, #32]
            break;
 8018746:	e007      	b.n	8018758 <ip_reass_chain_frag_into_datagram_and_validate+0x258>
          }
          iprh_prev = iprh;
 8018748:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801874a:	62bb      	str	r3, [r7, #40]	; 0x28
          q = iprh->next_pbuf;
 801874c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801874e:	681b      	ldr	r3, [r3, #0]
 8018750:	627b      	str	r3, [r7, #36]	; 0x24
        while (q != NULL) {
 8018752:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8018754:	2b00      	cmp	r3, #0
 8018756:	d1e9      	bne.n	801872c <ip_reass_chain_frag_into_datagram_and_validate+0x22c>
        }
        /* if still valid, all fragments are received
         * (because to the MF==0 already arrived */
        if (valid) {
 8018758:	6a3b      	ldr	r3, [r7, #32]
 801875a:	2b00      	cmp	r3, #0
 801875c:	d022      	beq.n	80187a4 <ip_reass_chain_frag_into_datagram_and_validate+0x2a4>
          LWIP_ASSERT("sanity check", ipr->p != NULL);
 801875e:	68fb      	ldr	r3, [r7, #12]
 8018760:	685b      	ldr	r3, [r3, #4]
 8018762:	2b00      	cmp	r3, #0
 8018764:	d106      	bne.n	8018774 <ip_reass_chain_frag_into_datagram_and_validate+0x274>
 8018766:	4b15      	ldr	r3, [pc, #84]	; (80187bc <ip_reass_chain_frag_into_datagram_and_validate+0x2bc>)
 8018768:	f240 12df 	movw	r2, #479	; 0x1df
 801876c:	4917      	ldr	r1, [pc, #92]	; (80187cc <ip_reass_chain_frag_into_datagram_and_validate+0x2cc>)
 801876e:	4815      	ldr	r0, [pc, #84]	; (80187c4 <ip_reass_chain_frag_into_datagram_and_validate+0x2c4>)
 8018770:	f001 f97a 	bl	8019a68 <iprintf>
          LWIP_ASSERT("sanity check",
 8018774:	68fb      	ldr	r3, [r7, #12]
 8018776:	685b      	ldr	r3, [r3, #4]
 8018778:	685b      	ldr	r3, [r3, #4]
 801877a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 801877c:	429a      	cmp	r2, r3
 801877e:	d106      	bne.n	801878e <ip_reass_chain_frag_into_datagram_and_validate+0x28e>
 8018780:	4b0e      	ldr	r3, [pc, #56]	; (80187bc <ip_reass_chain_frag_into_datagram_and_validate+0x2bc>)
 8018782:	f44f 72f0 	mov.w	r2, #480	; 0x1e0
 8018786:	4911      	ldr	r1, [pc, #68]	; (80187cc <ip_reass_chain_frag_into_datagram_and_validate+0x2cc>)
 8018788:	480e      	ldr	r0, [pc, #56]	; (80187c4 <ip_reass_chain_frag_into_datagram_and_validate+0x2c4>)
 801878a:	f001 f96d 	bl	8019a68 <iprintf>
                      ((struct ip_reass_helper *)ipr->p->payload) != iprh);
          LWIP_ASSERT("validate_datagram:next_pbuf!=NULL",
 801878e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8018790:	681b      	ldr	r3, [r3, #0]
 8018792:	2b00      	cmp	r3, #0
 8018794:	d006      	beq.n	80187a4 <ip_reass_chain_frag_into_datagram_and_validate+0x2a4>
 8018796:	4b09      	ldr	r3, [pc, #36]	; (80187bc <ip_reass_chain_frag_into_datagram_and_validate+0x2bc>)
 8018798:	f44f 72f1 	mov.w	r2, #482	; 0x1e2
 801879c:	490c      	ldr	r1, [pc, #48]	; (80187d0 <ip_reass_chain_frag_into_datagram_and_validate+0x2d0>)
 801879e:	4809      	ldr	r0, [pc, #36]	; (80187c4 <ip_reass_chain_frag_into_datagram_and_validate+0x2c4>)
 80187a0:	f001 f962 	bl	8019a68 <iprintf>
      }
    }
    /* If valid is 0 here, there are some fragments missing in the middle
     * (since MF == 0 has already arrived). Such datagrams simply time out if
     * no more fragments are received... */
    return valid ? IP_REASS_VALIDATE_TELEGRAM_FINISHED : IP_REASS_VALIDATE_PBUF_QUEUED;
 80187a4:	6a3b      	ldr	r3, [r7, #32]
 80187a6:	2b00      	cmp	r3, #0
 80187a8:	bf14      	ite	ne
 80187aa:	2301      	movne	r3, #1
 80187ac:	2300      	moveq	r3, #0
 80187ae:	b2db      	uxtb	r3, r3
 80187b0:	e000      	b.n	80187b4 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
  }
  /* If we come here, not all fragments were received, yet! */
  return IP_REASS_VALIDATE_PBUF_QUEUED; /* not yet valid! */
 80187b2:	2300      	movs	r3, #0
}
 80187b4:	4618      	mov	r0, r3
 80187b6:	3730      	adds	r7, #48	; 0x30
 80187b8:	46bd      	mov	sp, r7
 80187ba:	bd80      	pop	{r7, pc}
 80187bc:	0801e90c 	.word	0x0801e90c
 80187c0:	0801e9f0 	.word	0x0801e9f0
 80187c4:	0801e954 	.word	0x0801e954
 80187c8:	0801ea10 	.word	0x0801ea10
 80187cc:	0801ea48 	.word	0x0801ea48
 80187d0:	0801ea58 	.word	0x0801ea58

080187d4 <ip4_reass>:
 * @param p points to a pbuf chain of the fragment
 * @return NULL if reassembly is incomplete, ? otherwise
 */
struct pbuf *
ip4_reass(struct pbuf *p)
{
 80187d4:	b580      	push	{r7, lr}
 80187d6:	b08e      	sub	sp, #56	; 0x38
 80187d8:	af00      	add	r7, sp, #0
 80187da:	6078      	str	r0, [r7, #4]
  int is_last;

  IPFRAG_STATS_INC(ip_frag.recv);
  MIB2_STATS_INC(mib2.ipreasmreqds);

  fraghdr = (struct ip_hdr *)p->payload;
 80187dc:	687b      	ldr	r3, [r7, #4]
 80187de:	685b      	ldr	r3, [r3, #4]
 80187e0:	62bb      	str	r3, [r7, #40]	; 0x28

  if (IPH_HL_BYTES(fraghdr) != IP_HLEN) {
 80187e2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80187e4:	781b      	ldrb	r3, [r3, #0]
 80187e6:	f003 030f 	and.w	r3, r3, #15
 80187ea:	b2db      	uxtb	r3, r3
 80187ec:	009b      	lsls	r3, r3, #2
 80187ee:	b2db      	uxtb	r3, r3
 80187f0:	2b14      	cmp	r3, #20
 80187f2:	f040 8171 	bne.w	8018ad8 <ip4_reass+0x304>
    LWIP_DEBUGF(IP_REASS_DEBUG, ("ip4_reass: IP options currently not supported!\n"));
    IPFRAG_STATS_INC(ip_frag.err);
    goto nullreturn;
  }

  offset = IPH_OFFSET_BYTES(fraghdr);
 80187f6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80187f8:	88db      	ldrh	r3, [r3, #6]
 80187fa:	b29b      	uxth	r3, r3
 80187fc:	4618      	mov	r0, r3
 80187fe:	f7f6 fe17 	bl	800f430 <lwip_htons>
 8018802:	4603      	mov	r3, r0
 8018804:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8018808:	b29b      	uxth	r3, r3
 801880a:	00db      	lsls	r3, r3, #3
 801880c:	84fb      	strh	r3, [r7, #38]	; 0x26
  len = lwip_ntohs(IPH_LEN(fraghdr));
 801880e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8018810:	885b      	ldrh	r3, [r3, #2]
 8018812:	b29b      	uxth	r3, r3
 8018814:	4618      	mov	r0, r3
 8018816:	f7f6 fe0b 	bl	800f430 <lwip_htons>
 801881a:	4603      	mov	r3, r0
 801881c:	84bb      	strh	r3, [r7, #36]	; 0x24
  hlen = IPH_HL_BYTES(fraghdr);
 801881e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8018820:	781b      	ldrb	r3, [r3, #0]
 8018822:	f003 030f 	and.w	r3, r3, #15
 8018826:	b2db      	uxtb	r3, r3
 8018828:	009b      	lsls	r3, r3, #2
 801882a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  if (hlen > len) {
 801882e:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8018832:	b29b      	uxth	r3, r3
 8018834:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8018836:	429a      	cmp	r2, r3
 8018838:	f0c0 8150 	bcc.w	8018adc <ip4_reass+0x308>
    /* invalid datagram */
    goto nullreturn;
  }
  len = (u16_t)(len - hlen);
 801883c:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8018840:	b29b      	uxth	r3, r3
 8018842:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8018844:	1ad3      	subs	r3, r2, r3
 8018846:	84bb      	strh	r3, [r7, #36]	; 0x24

  /* Check if we are allowed to enqueue more datagrams. */
  clen = pbuf_clen(p);
 8018848:	6878      	ldr	r0, [r7, #4]
 801884a:	f7f8 fa7d 	bl	8010d48 <pbuf_clen>
 801884e:	4603      	mov	r3, r0
 8018850:	843b      	strh	r3, [r7, #32]
  if ((ip_reass_pbufcount + clen) > IP_REASS_MAX_PBUFS) {
 8018852:	4b8c      	ldr	r3, [pc, #560]	; (8018a84 <ip4_reass+0x2b0>)
 8018854:	881b      	ldrh	r3, [r3, #0]
 8018856:	461a      	mov	r2, r3
 8018858:	8c3b      	ldrh	r3, [r7, #32]
 801885a:	4413      	add	r3, r2
 801885c:	2b0a      	cmp	r3, #10
 801885e:	dd10      	ble.n	8018882 <ip4_reass+0xae>
#if IP_REASS_FREE_OLDEST
    if (!ip_reass_remove_oldest_datagram(fraghdr, clen) ||
 8018860:	8c3b      	ldrh	r3, [r7, #32]
 8018862:	4619      	mov	r1, r3
 8018864:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8018866:	f7ff fd81 	bl	801836c <ip_reass_remove_oldest_datagram>
 801886a:	4603      	mov	r3, r0
 801886c:	2b00      	cmp	r3, #0
 801886e:	f000 8137 	beq.w	8018ae0 <ip4_reass+0x30c>
        ((ip_reass_pbufcount + clen) > IP_REASS_MAX_PBUFS))
 8018872:	4b84      	ldr	r3, [pc, #528]	; (8018a84 <ip4_reass+0x2b0>)
 8018874:	881b      	ldrh	r3, [r3, #0]
 8018876:	461a      	mov	r2, r3
 8018878:	8c3b      	ldrh	r3, [r7, #32]
 801887a:	4413      	add	r3, r2
    if (!ip_reass_remove_oldest_datagram(fraghdr, clen) ||
 801887c:	2b0a      	cmp	r3, #10
 801887e:	f300 812f 	bgt.w	8018ae0 <ip4_reass+0x30c>
    }
  }

  /* Look for the datagram the fragment belongs to in the current datagram queue,
   * remembering the previous in the queue for later dequeueing. */
  for (ipr = reassdatagrams; ipr != NULL; ipr = ipr->next) {
 8018882:	4b81      	ldr	r3, [pc, #516]	; (8018a88 <ip4_reass+0x2b4>)
 8018884:	681b      	ldr	r3, [r3, #0]
 8018886:	633b      	str	r3, [r7, #48]	; 0x30
 8018888:	e015      	b.n	80188b6 <ip4_reass+0xe2>
    /* Check if the incoming fragment matches the one currently present
       in the reassembly buffer. If so, we proceed with copying the
       fragment into the buffer. */
    if (IP_ADDRESSES_AND_ID_MATCH(&ipr->iphdr, fraghdr)) {
 801888a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801888c:	695a      	ldr	r2, [r3, #20]
 801888e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8018890:	68db      	ldr	r3, [r3, #12]
 8018892:	429a      	cmp	r2, r3
 8018894:	d10c      	bne.n	80188b0 <ip4_reass+0xdc>
 8018896:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8018898:	699a      	ldr	r2, [r3, #24]
 801889a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801889c:	691b      	ldr	r3, [r3, #16]
 801889e:	429a      	cmp	r2, r3
 80188a0:	d106      	bne.n	80188b0 <ip4_reass+0xdc>
 80188a2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80188a4:	899a      	ldrh	r2, [r3, #12]
 80188a6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80188a8:	889b      	ldrh	r3, [r3, #4]
 80188aa:	b29b      	uxth	r3, r3
 80188ac:	429a      	cmp	r2, r3
 80188ae:	d006      	beq.n	80188be <ip4_reass+0xea>
  for (ipr = reassdatagrams; ipr != NULL; ipr = ipr->next) {
 80188b0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80188b2:	681b      	ldr	r3, [r3, #0]
 80188b4:	633b      	str	r3, [r7, #48]	; 0x30
 80188b6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80188b8:	2b00      	cmp	r3, #0
 80188ba:	d1e6      	bne.n	801888a <ip4_reass+0xb6>
 80188bc:	e000      	b.n	80188c0 <ip4_reass+0xec>
      LWIP_DEBUGF(IP_REASS_DEBUG, ("ip4_reass: matching previous fragment ID=%"X16_F"\n",
                                   lwip_ntohs(IPH_ID(fraghdr))));
      IPFRAG_STATS_INC(ip_frag.cachehit);
      break;
 80188be:	bf00      	nop
    }
  }

  if (ipr == NULL) {
 80188c0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80188c2:	2b00      	cmp	r3, #0
 80188c4:	d109      	bne.n	80188da <ip4_reass+0x106>
    /* Enqueue a new datagram into the datagram queue */
    ipr = ip_reass_enqueue_new_datagram(fraghdr, clen);
 80188c6:	8c3b      	ldrh	r3, [r7, #32]
 80188c8:	4619      	mov	r1, r3
 80188ca:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80188cc:	f7ff fdb0 	bl	8018430 <ip_reass_enqueue_new_datagram>
 80188d0:	6338      	str	r0, [r7, #48]	; 0x30
    /* Bail if unable to enqueue */
    if (ipr == NULL) {
 80188d2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80188d4:	2b00      	cmp	r3, #0
 80188d6:	d11c      	bne.n	8018912 <ip4_reass+0x13e>
      goto nullreturn;
 80188d8:	e105      	b.n	8018ae6 <ip4_reass+0x312>
    }
  } else {
    if (((lwip_ntohs(IPH_OFFSET(fraghdr)) & IP_OFFMASK) == 0) &&
 80188da:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80188dc:	88db      	ldrh	r3, [r3, #6]
 80188de:	b29b      	uxth	r3, r3
 80188e0:	4618      	mov	r0, r3
 80188e2:	f7f6 fda5 	bl	800f430 <lwip_htons>
 80188e6:	4603      	mov	r3, r0
 80188e8:	f3c3 030c 	ubfx	r3, r3, #0, #13
 80188ec:	2b00      	cmp	r3, #0
 80188ee:	d110      	bne.n	8018912 <ip4_reass+0x13e>
        ((lwip_ntohs(IPH_OFFSET(&ipr->iphdr)) & IP_OFFMASK) != 0)) {
 80188f0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80188f2:	89db      	ldrh	r3, [r3, #14]
 80188f4:	4618      	mov	r0, r3
 80188f6:	f7f6 fd9b 	bl	800f430 <lwip_htons>
 80188fa:	4603      	mov	r3, r0
 80188fc:	f3c3 030c 	ubfx	r3, r3, #0, #13
    if (((lwip_ntohs(IPH_OFFSET(fraghdr)) & IP_OFFMASK) == 0) &&
 8018900:	2b00      	cmp	r3, #0
 8018902:	d006      	beq.n	8018912 <ip4_reass+0x13e>
      /* ipr->iphdr is not the header from the first fragment, but fraghdr is
       * -> copy fraghdr into ipr->iphdr since we want to have the header
       * of the first fragment (for ICMP time exceeded and later, for copying
       * all options, if supported)*/
      SMEMCPY(&ipr->iphdr, fraghdr, IP_HLEN);
 8018904:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8018906:	3308      	adds	r3, #8
 8018908:	2214      	movs	r2, #20
 801890a:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 801890c:	4618      	mov	r0, r3
 801890e:	f001 fa7a 	bl	8019e06 <memcpy>

  /* At this point, we have either created a new entry or pointing
   * to an existing one */

  /* check for 'no more fragments', and update queue entry*/
  is_last = (IPH_OFFSET(fraghdr) & PP_NTOHS(IP_MF)) == 0;
 8018912:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8018914:	88db      	ldrh	r3, [r3, #6]
 8018916:	b29b      	uxth	r3, r3
 8018918:	f003 0320 	and.w	r3, r3, #32
 801891c:	2b00      	cmp	r3, #0
 801891e:	bf0c      	ite	eq
 8018920:	2301      	moveq	r3, #1
 8018922:	2300      	movne	r3, #0
 8018924:	b2db      	uxtb	r3, r3
 8018926:	61fb      	str	r3, [r7, #28]
  if (is_last) {
 8018928:	69fb      	ldr	r3, [r7, #28]
 801892a:	2b00      	cmp	r3, #0
 801892c:	d00e      	beq.n	801894c <ip4_reass+0x178>
    u16_t datagram_len = (u16_t)(offset + len);
 801892e:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 8018930:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8018932:	4413      	add	r3, r2
 8018934:	837b      	strh	r3, [r7, #26]
    if ((datagram_len < offset) || (datagram_len > (0xFFFF - IP_HLEN))) {
 8018936:	8b7a      	ldrh	r2, [r7, #26]
 8018938:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 801893a:	429a      	cmp	r2, r3
 801893c:	f0c0 80a0 	bcc.w	8018a80 <ip4_reass+0x2ac>
 8018940:	8b7b      	ldrh	r3, [r7, #26]
 8018942:	f64f 72eb 	movw	r2, #65515	; 0xffeb
 8018946:	4293      	cmp	r3, r2
 8018948:	f200 809a 	bhi.w	8018a80 <ip4_reass+0x2ac>
      goto nullreturn_ipr;
    }
  }
  /* find the right place to insert this pbuf */
  /* @todo: trim pbufs if fragments are overlapping */
  valid = ip_reass_chain_frag_into_datagram_and_validate(ipr, p, is_last);
 801894c:	69fa      	ldr	r2, [r7, #28]
 801894e:	6879      	ldr	r1, [r7, #4]
 8018950:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8018952:	f7ff fdd5 	bl	8018500 <ip_reass_chain_frag_into_datagram_and_validate>
 8018956:	6178      	str	r0, [r7, #20]
  if (valid == IP_REASS_VALIDATE_PBUF_DROPPED) {
 8018958:	697b      	ldr	r3, [r7, #20]
 801895a:	f1b3 3fff 	cmp.w	r3, #4294967295
 801895e:	f000 809b 	beq.w	8018a98 <ip4_reass+0x2c4>
  /* if we come here, the pbuf has been enqueued */

  /* Track the current number of pbufs current 'in-flight', in order to limit
     the number of fragments that may be enqueued at any one time
     (overflow checked by testing against IP_REASS_MAX_PBUFS) */
  ip_reass_pbufcount = (u16_t)(ip_reass_pbufcount + clen);
 8018962:	4b48      	ldr	r3, [pc, #288]	; (8018a84 <ip4_reass+0x2b0>)
 8018964:	881a      	ldrh	r2, [r3, #0]
 8018966:	8c3b      	ldrh	r3, [r7, #32]
 8018968:	4413      	add	r3, r2
 801896a:	b29a      	uxth	r2, r3
 801896c:	4b45      	ldr	r3, [pc, #276]	; (8018a84 <ip4_reass+0x2b0>)
 801896e:	801a      	strh	r2, [r3, #0]
  if (is_last) {
 8018970:	69fb      	ldr	r3, [r7, #28]
 8018972:	2b00      	cmp	r3, #0
 8018974:	d00d      	beq.n	8018992 <ip4_reass+0x1be>
    u16_t datagram_len = (u16_t)(offset + len);
 8018976:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 8018978:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 801897a:	4413      	add	r3, r2
 801897c:	827b      	strh	r3, [r7, #18]
    ipr->datagram_len = datagram_len;
 801897e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8018980:	8a7a      	ldrh	r2, [r7, #18]
 8018982:	839a      	strh	r2, [r3, #28]
    ipr->flags |= IP_REASS_FLAG_LASTFRAG;
 8018984:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8018986:	7f9b      	ldrb	r3, [r3, #30]
 8018988:	f043 0301 	orr.w	r3, r3, #1
 801898c:	b2da      	uxtb	r2, r3
 801898e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8018990:	779a      	strb	r2, [r3, #30]
    LWIP_DEBUGF(IP_REASS_DEBUG,
                ("ip4_reass: last fragment seen, total len %"S16_F"\n",
                 ipr->datagram_len));
  }

  if (valid == IP_REASS_VALIDATE_TELEGRAM_FINISHED) {
 8018992:	697b      	ldr	r3, [r7, #20]
 8018994:	2b01      	cmp	r3, #1
 8018996:	d171      	bne.n	8018a7c <ip4_reass+0x2a8>
    struct ip_reassdata *ipr_prev;
    /* the totally last fragment (flag more fragments = 0) was received at least
     * once AND all fragments are received */
    u16_t datagram_len = (u16_t)(ipr->datagram_len + IP_HLEN);
 8018998:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801899a:	8b9b      	ldrh	r3, [r3, #28]
 801899c:	3314      	adds	r3, #20
 801899e:	823b      	strh	r3, [r7, #16]

    /* save the second pbuf before copying the header over the pointer */
    r = ((struct ip_reass_helper *)ipr->p->payload)->next_pbuf;
 80189a0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80189a2:	685b      	ldr	r3, [r3, #4]
 80189a4:	685b      	ldr	r3, [r3, #4]
 80189a6:	681b      	ldr	r3, [r3, #0]
 80189a8:	637b      	str	r3, [r7, #52]	; 0x34

    /* copy the original ip header back to the first pbuf */
    fraghdr = (struct ip_hdr *)(ipr->p->payload);
 80189aa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80189ac:	685b      	ldr	r3, [r3, #4]
 80189ae:	685b      	ldr	r3, [r3, #4]
 80189b0:	62bb      	str	r3, [r7, #40]	; 0x28
    SMEMCPY(fraghdr, &ipr->iphdr, IP_HLEN);
 80189b2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80189b4:	3308      	adds	r3, #8
 80189b6:	2214      	movs	r2, #20
 80189b8:	4619      	mov	r1, r3
 80189ba:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80189bc:	f001 fa23 	bl	8019e06 <memcpy>
    IPH_LEN_SET(fraghdr, lwip_htons(datagram_len));
 80189c0:	8a3b      	ldrh	r3, [r7, #16]
 80189c2:	4618      	mov	r0, r3
 80189c4:	f7f6 fd34 	bl	800f430 <lwip_htons>
 80189c8:	4603      	mov	r3, r0
 80189ca:	461a      	mov	r2, r3
 80189cc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80189ce:	805a      	strh	r2, [r3, #2]
    IPH_OFFSET_SET(fraghdr, 0);
 80189d0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80189d2:	2200      	movs	r2, #0
 80189d4:	719a      	strb	r2, [r3, #6]
 80189d6:	2200      	movs	r2, #0
 80189d8:	71da      	strb	r2, [r3, #7]
    IPH_CHKSUM_SET(fraghdr, 0);
 80189da:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80189dc:	2200      	movs	r2, #0
 80189de:	729a      	strb	r2, [r3, #10]
 80189e0:	2200      	movs	r2, #0
 80189e2:	72da      	strb	r2, [r3, #11]
    IF__NETIF_CHECKSUM_ENABLED(ip_current_input_netif(), NETIF_CHECKSUM_GEN_IP) {
      IPH_CHKSUM_SET(fraghdr, inet_chksum(fraghdr, IP_HLEN));
    }
#endif /* CHECKSUM_GEN_IP */

    p = ipr->p;
 80189e4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80189e6:	685b      	ldr	r3, [r3, #4]
 80189e8:	607b      	str	r3, [r7, #4]

    /* chain together the pbufs contained within the reass_data list. */
    while (r != NULL) {
 80189ea:	e00d      	b.n	8018a08 <ip4_reass+0x234>
      iprh = (struct ip_reass_helper *)r->payload;
 80189ec:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80189ee:	685b      	ldr	r3, [r3, #4]
 80189f0:	60fb      	str	r3, [r7, #12]

      /* hide the ip header for every succeeding fragment */
      pbuf_remove_header(r, IP_HLEN);
 80189f2:	2114      	movs	r1, #20
 80189f4:	6b78      	ldr	r0, [r7, #52]	; 0x34
 80189f6:	f7f8 f899 	bl	8010b2c <pbuf_remove_header>
      pbuf_cat(p, r);
 80189fa:	6b79      	ldr	r1, [r7, #52]	; 0x34
 80189fc:	6878      	ldr	r0, [r7, #4]
 80189fe:	f7f8 f9dd 	bl	8010dbc <pbuf_cat>
      r = iprh->next_pbuf;
 8018a02:	68fb      	ldr	r3, [r7, #12]
 8018a04:	681b      	ldr	r3, [r3, #0]
 8018a06:	637b      	str	r3, [r7, #52]	; 0x34
    while (r != NULL) {
 8018a08:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8018a0a:	2b00      	cmp	r3, #0
 8018a0c:	d1ee      	bne.n	80189ec <ip4_reass+0x218>
    }

    /* find the previous entry in the linked list */
    if (ipr == reassdatagrams) {
 8018a0e:	4b1e      	ldr	r3, [pc, #120]	; (8018a88 <ip4_reass+0x2b4>)
 8018a10:	681b      	ldr	r3, [r3, #0]
 8018a12:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8018a14:	429a      	cmp	r2, r3
 8018a16:	d102      	bne.n	8018a1e <ip4_reass+0x24a>
      ipr_prev = NULL;
 8018a18:	2300      	movs	r3, #0
 8018a1a:	62fb      	str	r3, [r7, #44]	; 0x2c
 8018a1c:	e010      	b.n	8018a40 <ip4_reass+0x26c>
    } else {
      for (ipr_prev = reassdatagrams; ipr_prev != NULL; ipr_prev = ipr_prev->next) {
 8018a1e:	4b1a      	ldr	r3, [pc, #104]	; (8018a88 <ip4_reass+0x2b4>)
 8018a20:	681b      	ldr	r3, [r3, #0]
 8018a22:	62fb      	str	r3, [r7, #44]	; 0x2c
 8018a24:	e007      	b.n	8018a36 <ip4_reass+0x262>
        if (ipr_prev->next == ipr) {
 8018a26:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8018a28:	681b      	ldr	r3, [r3, #0]
 8018a2a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8018a2c:	429a      	cmp	r2, r3
 8018a2e:	d006      	beq.n	8018a3e <ip4_reass+0x26a>
      for (ipr_prev = reassdatagrams; ipr_prev != NULL; ipr_prev = ipr_prev->next) {
 8018a30:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8018a32:	681b      	ldr	r3, [r3, #0]
 8018a34:	62fb      	str	r3, [r7, #44]	; 0x2c
 8018a36:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8018a38:	2b00      	cmp	r3, #0
 8018a3a:	d1f4      	bne.n	8018a26 <ip4_reass+0x252>
 8018a3c:	e000      	b.n	8018a40 <ip4_reass+0x26c>
          break;
 8018a3e:	bf00      	nop
        }
      }
    }

    /* release the sources allocate for the fragment queue entry */
    ip_reass_dequeue_datagram(ipr, ipr_prev);
 8018a40:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8018a42:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8018a44:	f7ff fd2e 	bl	80184a4 <ip_reass_dequeue_datagram>

    /* and adjust the number of pbufs currently queued for reassembly. */
    clen = pbuf_clen(p);
 8018a48:	6878      	ldr	r0, [r7, #4]
 8018a4a:	f7f8 f97d 	bl	8010d48 <pbuf_clen>
 8018a4e:	4603      	mov	r3, r0
 8018a50:	843b      	strh	r3, [r7, #32]
    LWIP_ASSERT("ip_reass_pbufcount >= clen", ip_reass_pbufcount >= clen);
 8018a52:	4b0c      	ldr	r3, [pc, #48]	; (8018a84 <ip4_reass+0x2b0>)
 8018a54:	881b      	ldrh	r3, [r3, #0]
 8018a56:	8c3a      	ldrh	r2, [r7, #32]
 8018a58:	429a      	cmp	r2, r3
 8018a5a:	d906      	bls.n	8018a6a <ip4_reass+0x296>
 8018a5c:	4b0b      	ldr	r3, [pc, #44]	; (8018a8c <ip4_reass+0x2b8>)
 8018a5e:	f240 229b 	movw	r2, #667	; 0x29b
 8018a62:	490b      	ldr	r1, [pc, #44]	; (8018a90 <ip4_reass+0x2bc>)
 8018a64:	480b      	ldr	r0, [pc, #44]	; (8018a94 <ip4_reass+0x2c0>)
 8018a66:	f000 ffff 	bl	8019a68 <iprintf>
    ip_reass_pbufcount = (u16_t)(ip_reass_pbufcount - clen);
 8018a6a:	4b06      	ldr	r3, [pc, #24]	; (8018a84 <ip4_reass+0x2b0>)
 8018a6c:	881a      	ldrh	r2, [r3, #0]
 8018a6e:	8c3b      	ldrh	r3, [r7, #32]
 8018a70:	1ad3      	subs	r3, r2, r3
 8018a72:	b29a      	uxth	r2, r3
 8018a74:	4b03      	ldr	r3, [pc, #12]	; (8018a84 <ip4_reass+0x2b0>)
 8018a76:	801a      	strh	r2, [r3, #0]

    MIB2_STATS_INC(mib2.ipreasmoks);

    /* Return the pbuf chain */
    return p;
 8018a78:	687b      	ldr	r3, [r7, #4]
 8018a7a:	e038      	b.n	8018aee <ip4_reass+0x31a>
  }
  /* the datagram is not (yet?) reassembled completely */
  LWIP_DEBUGF(IP_REASS_DEBUG, ("ip_reass_pbufcount: %d out\n", ip_reass_pbufcount));
  return NULL;
 8018a7c:	2300      	movs	r3, #0
 8018a7e:	e036      	b.n	8018aee <ip4_reass+0x31a>
      goto nullreturn_ipr;
 8018a80:	bf00      	nop
 8018a82:	e00a      	b.n	8018a9a <ip4_reass+0x2c6>
 8018a84:	2000719c 	.word	0x2000719c
 8018a88:	20007198 	.word	0x20007198
 8018a8c:	0801e90c 	.word	0x0801e90c
 8018a90:	0801ea7c 	.word	0x0801ea7c
 8018a94:	0801e954 	.word	0x0801e954
    goto nullreturn_ipr;
 8018a98:	bf00      	nop

nullreturn_ipr:
  LWIP_ASSERT("ipr != NULL", ipr != NULL);
 8018a9a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8018a9c:	2b00      	cmp	r3, #0
 8018a9e:	d106      	bne.n	8018aae <ip4_reass+0x2da>
 8018aa0:	4b15      	ldr	r3, [pc, #84]	; (8018af8 <ip4_reass+0x324>)
 8018aa2:	f44f 722a 	mov.w	r2, #680	; 0x2a8
 8018aa6:	4915      	ldr	r1, [pc, #84]	; (8018afc <ip4_reass+0x328>)
 8018aa8:	4815      	ldr	r0, [pc, #84]	; (8018b00 <ip4_reass+0x32c>)
 8018aaa:	f000 ffdd 	bl	8019a68 <iprintf>
  if (ipr->p == NULL) {
 8018aae:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8018ab0:	685b      	ldr	r3, [r3, #4]
 8018ab2:	2b00      	cmp	r3, #0
 8018ab4:	d116      	bne.n	8018ae4 <ip4_reass+0x310>
    /* dropped pbuf after creating a new datagram entry: remove the entry, too */
    LWIP_ASSERT("not firstalthough just enqueued", ipr == reassdatagrams);
 8018ab6:	4b13      	ldr	r3, [pc, #76]	; (8018b04 <ip4_reass+0x330>)
 8018ab8:	681b      	ldr	r3, [r3, #0]
 8018aba:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8018abc:	429a      	cmp	r2, r3
 8018abe:	d006      	beq.n	8018ace <ip4_reass+0x2fa>
 8018ac0:	4b0d      	ldr	r3, [pc, #52]	; (8018af8 <ip4_reass+0x324>)
 8018ac2:	f240 22ab 	movw	r2, #683	; 0x2ab
 8018ac6:	4910      	ldr	r1, [pc, #64]	; (8018b08 <ip4_reass+0x334>)
 8018ac8:	480d      	ldr	r0, [pc, #52]	; (8018b00 <ip4_reass+0x32c>)
 8018aca:	f000 ffcd 	bl	8019a68 <iprintf>
    ip_reass_dequeue_datagram(ipr, NULL);
 8018ace:	2100      	movs	r1, #0
 8018ad0:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8018ad2:	f7ff fce7 	bl	80184a4 <ip_reass_dequeue_datagram>
 8018ad6:	e006      	b.n	8018ae6 <ip4_reass+0x312>
    goto nullreturn;
 8018ad8:	bf00      	nop
 8018ada:	e004      	b.n	8018ae6 <ip4_reass+0x312>
    goto nullreturn;
 8018adc:	bf00      	nop
 8018ade:	e002      	b.n	8018ae6 <ip4_reass+0x312>
      goto nullreturn;
 8018ae0:	bf00      	nop
 8018ae2:	e000      	b.n	8018ae6 <ip4_reass+0x312>
  }

nullreturn:
 8018ae4:	bf00      	nop
  LWIP_DEBUGF(IP_REASS_DEBUG, ("ip4_reass: nullreturn\n"));
  IPFRAG_STATS_INC(ip_frag.drop);
  pbuf_free(p);
 8018ae6:	6878      	ldr	r0, [r7, #4]
 8018ae8:	f7f8 f8a6 	bl	8010c38 <pbuf_free>
  return NULL;
 8018aec:	2300      	movs	r3, #0
}
 8018aee:	4618      	mov	r0, r3
 8018af0:	3738      	adds	r7, #56	; 0x38
 8018af2:	46bd      	mov	sp, r7
 8018af4:	bd80      	pop	{r7, pc}
 8018af6:	bf00      	nop
 8018af8:	0801e90c 	.word	0x0801e90c
 8018afc:	0801ea98 	.word	0x0801ea98
 8018b00:	0801e954 	.word	0x0801e954
 8018b04:	20007198 	.word	0x20007198
 8018b08:	0801eaa4 	.word	0x0801eaa4

08018b0c <ip_frag_alloc_pbuf_custom_ref>:
#if IP_FRAG
#if !LWIP_NETIF_TX_SINGLE_PBUF
/** Allocate a new struct pbuf_custom_ref */
static struct pbuf_custom_ref *
ip_frag_alloc_pbuf_custom_ref(void)
{
 8018b0c:	b580      	push	{r7, lr}
 8018b0e:	af00      	add	r7, sp, #0
  return (struct pbuf_custom_ref *)memp_malloc(MEMP_FRAG_PBUF);
 8018b10:	2005      	movs	r0, #5
 8018b12:	f7f7 f9ab 	bl	800fe6c <memp_malloc>
 8018b16:	4603      	mov	r3, r0
}
 8018b18:	4618      	mov	r0, r3
 8018b1a:	bd80      	pop	{r7, pc}

08018b1c <ip_frag_free_pbuf_custom_ref>:

/** Free a struct pbuf_custom_ref */
static void
ip_frag_free_pbuf_custom_ref(struct pbuf_custom_ref *p)
{
 8018b1c:	b580      	push	{r7, lr}
 8018b1e:	b082      	sub	sp, #8
 8018b20:	af00      	add	r7, sp, #0
 8018b22:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("p != NULL", p != NULL);
 8018b24:	687b      	ldr	r3, [r7, #4]
 8018b26:	2b00      	cmp	r3, #0
 8018b28:	d106      	bne.n	8018b38 <ip_frag_free_pbuf_custom_ref+0x1c>
 8018b2a:	4b07      	ldr	r3, [pc, #28]	; (8018b48 <ip_frag_free_pbuf_custom_ref+0x2c>)
 8018b2c:	f44f 7231 	mov.w	r2, #708	; 0x2c4
 8018b30:	4906      	ldr	r1, [pc, #24]	; (8018b4c <ip_frag_free_pbuf_custom_ref+0x30>)
 8018b32:	4807      	ldr	r0, [pc, #28]	; (8018b50 <ip_frag_free_pbuf_custom_ref+0x34>)
 8018b34:	f000 ff98 	bl	8019a68 <iprintf>
  memp_free(MEMP_FRAG_PBUF, p);
 8018b38:	6879      	ldr	r1, [r7, #4]
 8018b3a:	2005      	movs	r0, #5
 8018b3c:	f7f7 fa06 	bl	800ff4c <memp_free>
}
 8018b40:	bf00      	nop
 8018b42:	3708      	adds	r7, #8
 8018b44:	46bd      	mov	sp, r7
 8018b46:	bd80      	pop	{r7, pc}
 8018b48:	0801e90c 	.word	0x0801e90c
 8018b4c:	0801eac4 	.word	0x0801eac4
 8018b50:	0801e954 	.word	0x0801e954

08018b54 <ipfrag_free_pbuf_custom>:

/** Free-callback function to free a 'struct pbuf_custom_ref', called by
 * pbuf_free. */
static void
ipfrag_free_pbuf_custom(struct pbuf *p)
{
 8018b54:	b580      	push	{r7, lr}
 8018b56:	b084      	sub	sp, #16
 8018b58:	af00      	add	r7, sp, #0
 8018b5a:	6078      	str	r0, [r7, #4]
  struct pbuf_custom_ref *pcr = (struct pbuf_custom_ref *)p;
 8018b5c:	687b      	ldr	r3, [r7, #4]
 8018b5e:	60fb      	str	r3, [r7, #12]
  LWIP_ASSERT("pcr != NULL", pcr != NULL);
 8018b60:	68fb      	ldr	r3, [r7, #12]
 8018b62:	2b00      	cmp	r3, #0
 8018b64:	d106      	bne.n	8018b74 <ipfrag_free_pbuf_custom+0x20>
 8018b66:	4b11      	ldr	r3, [pc, #68]	; (8018bac <ipfrag_free_pbuf_custom+0x58>)
 8018b68:	f240 22ce 	movw	r2, #718	; 0x2ce
 8018b6c:	4910      	ldr	r1, [pc, #64]	; (8018bb0 <ipfrag_free_pbuf_custom+0x5c>)
 8018b6e:	4811      	ldr	r0, [pc, #68]	; (8018bb4 <ipfrag_free_pbuf_custom+0x60>)
 8018b70:	f000 ff7a 	bl	8019a68 <iprintf>
  LWIP_ASSERT("pcr == p", (void *)pcr == (void *)p);
 8018b74:	68fa      	ldr	r2, [r7, #12]
 8018b76:	687b      	ldr	r3, [r7, #4]
 8018b78:	429a      	cmp	r2, r3
 8018b7a:	d006      	beq.n	8018b8a <ipfrag_free_pbuf_custom+0x36>
 8018b7c:	4b0b      	ldr	r3, [pc, #44]	; (8018bac <ipfrag_free_pbuf_custom+0x58>)
 8018b7e:	f240 22cf 	movw	r2, #719	; 0x2cf
 8018b82:	490d      	ldr	r1, [pc, #52]	; (8018bb8 <ipfrag_free_pbuf_custom+0x64>)
 8018b84:	480b      	ldr	r0, [pc, #44]	; (8018bb4 <ipfrag_free_pbuf_custom+0x60>)
 8018b86:	f000 ff6f 	bl	8019a68 <iprintf>
  if (pcr->original != NULL) {
 8018b8a:	68fb      	ldr	r3, [r7, #12]
 8018b8c:	695b      	ldr	r3, [r3, #20]
 8018b8e:	2b00      	cmp	r3, #0
 8018b90:	d004      	beq.n	8018b9c <ipfrag_free_pbuf_custom+0x48>
    pbuf_free(pcr->original);
 8018b92:	68fb      	ldr	r3, [r7, #12]
 8018b94:	695b      	ldr	r3, [r3, #20]
 8018b96:	4618      	mov	r0, r3
 8018b98:	f7f8 f84e 	bl	8010c38 <pbuf_free>
  }
  ip_frag_free_pbuf_custom_ref(pcr);
 8018b9c:	68f8      	ldr	r0, [r7, #12]
 8018b9e:	f7ff ffbd 	bl	8018b1c <ip_frag_free_pbuf_custom_ref>
}
 8018ba2:	bf00      	nop
 8018ba4:	3710      	adds	r7, #16
 8018ba6:	46bd      	mov	sp, r7
 8018ba8:	bd80      	pop	{r7, pc}
 8018baa:	bf00      	nop
 8018bac:	0801e90c 	.word	0x0801e90c
 8018bb0:	0801ead0 	.word	0x0801ead0
 8018bb4:	0801e954 	.word	0x0801e954
 8018bb8:	0801eadc 	.word	0x0801eadc

08018bbc <ip4_frag>:
 *
 * @return ERR_OK if sent successfully, err_t otherwise
 */
err_t
ip4_frag(struct pbuf *p, struct netif *netif, const ip4_addr_t *dest)
{
 8018bbc:	b580      	push	{r7, lr}
 8018bbe:	b094      	sub	sp, #80	; 0x50
 8018bc0:	af02      	add	r7, sp, #8
 8018bc2:	60f8      	str	r0, [r7, #12]
 8018bc4:	60b9      	str	r1, [r7, #8]
 8018bc6:	607a      	str	r2, [r7, #4]
  struct pbuf *rambuf;
#if !LWIP_NETIF_TX_SINGLE_PBUF
  struct pbuf *newpbuf;
  u16_t newpbuflen = 0;
 8018bc8:	2300      	movs	r3, #0
 8018bca:	f8a7 3046 	strh.w	r3, [r7, #70]	; 0x46
  u16_t left_to_copy;
#endif
  struct ip_hdr *original_iphdr;
  struct ip_hdr *iphdr;
  const u16_t nfb = (u16_t)((netif->mtu - IP_HLEN) / 8);
 8018bce:	68bb      	ldr	r3, [r7, #8]
 8018bd0:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 8018bd2:	3b14      	subs	r3, #20
 8018bd4:	2b00      	cmp	r3, #0
 8018bd6:	da00      	bge.n	8018bda <ip4_frag+0x1e>
 8018bd8:	3307      	adds	r3, #7
 8018bda:	10db      	asrs	r3, r3, #3
 8018bdc:	877b      	strh	r3, [r7, #58]	; 0x3a
  u16_t left, fragsize;
  u16_t ofo;
  int last;
  u16_t poff = IP_HLEN;
 8018bde:	2314      	movs	r3, #20
 8018be0:	87fb      	strh	r3, [r7, #62]	; 0x3e
  u16_t tmp;
  int mf_set;

  original_iphdr = (struct ip_hdr *)p->payload;
 8018be2:	68fb      	ldr	r3, [r7, #12]
 8018be4:	685b      	ldr	r3, [r3, #4]
 8018be6:	637b      	str	r3, [r7, #52]	; 0x34
  iphdr = original_iphdr;
 8018be8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8018bea:	633b      	str	r3, [r7, #48]	; 0x30
  if (IPH_HL_BYTES(iphdr) != IP_HLEN) {
 8018bec:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8018bee:	781b      	ldrb	r3, [r3, #0]
 8018bf0:	f003 030f 	and.w	r3, r3, #15
 8018bf4:	b2db      	uxtb	r3, r3
 8018bf6:	009b      	lsls	r3, r3, #2
 8018bf8:	b2db      	uxtb	r3, r3
 8018bfa:	2b14      	cmp	r3, #20
 8018bfc:	d002      	beq.n	8018c04 <ip4_frag+0x48>
    /* ip4_frag() does not support IP options */
    return ERR_VAL;
 8018bfe:	f06f 0305 	mvn.w	r3, #5
 8018c02:	e110      	b.n	8018e26 <ip4_frag+0x26a>
  }
  LWIP_ERROR("ip4_frag(): pbuf too short", p->len >= IP_HLEN, return ERR_VAL);
 8018c04:	68fb      	ldr	r3, [r7, #12]
 8018c06:	895b      	ldrh	r3, [r3, #10]
 8018c08:	2b13      	cmp	r3, #19
 8018c0a:	d809      	bhi.n	8018c20 <ip4_frag+0x64>
 8018c0c:	4b88      	ldr	r3, [pc, #544]	; (8018e30 <ip4_frag+0x274>)
 8018c0e:	f44f 723f 	mov.w	r2, #764	; 0x2fc
 8018c12:	4988      	ldr	r1, [pc, #544]	; (8018e34 <ip4_frag+0x278>)
 8018c14:	4888      	ldr	r0, [pc, #544]	; (8018e38 <ip4_frag+0x27c>)
 8018c16:	f000 ff27 	bl	8019a68 <iprintf>
 8018c1a:	f06f 0305 	mvn.w	r3, #5
 8018c1e:	e102      	b.n	8018e26 <ip4_frag+0x26a>

  /* Save original offset */
  tmp = lwip_ntohs(IPH_OFFSET(iphdr));
 8018c20:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8018c22:	88db      	ldrh	r3, [r3, #6]
 8018c24:	b29b      	uxth	r3, r3
 8018c26:	4618      	mov	r0, r3
 8018c28:	f7f6 fc02 	bl	800f430 <lwip_htons>
 8018c2c:	4603      	mov	r3, r0
 8018c2e:	87bb      	strh	r3, [r7, #60]	; 0x3c
  ofo = tmp & IP_OFFMASK;
 8018c30:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 8018c32:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8018c36:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
  /* already fragmented? if so, the last fragment we create must have MF, too */
  mf_set = tmp & IP_MF;
 8018c3a:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 8018c3c:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8018c40:	62fb      	str	r3, [r7, #44]	; 0x2c

  left = (u16_t)(p->tot_len - IP_HLEN);
 8018c42:	68fb      	ldr	r3, [r7, #12]
 8018c44:	891b      	ldrh	r3, [r3, #8]
 8018c46:	3b14      	subs	r3, #20
 8018c48:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42

  while (left) {
 8018c4c:	e0e1      	b.n	8018e12 <ip4_frag+0x256>
    /* Fill this fragment */
    fragsize = LWIP_MIN(left, (u16_t)(nfb * 8));
 8018c4e:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 8018c50:	00db      	lsls	r3, r3, #3
 8018c52:	b29b      	uxth	r3, r3
 8018c54:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 8018c58:	4293      	cmp	r3, r2
 8018c5a:	bf28      	it	cs
 8018c5c:	4613      	movcs	r3, r2
 8018c5e:	857b      	strh	r3, [r7, #42]	; 0x2a
    /* When not using a static buffer, create a chain of pbufs.
     * The first will be a PBUF_RAM holding the link and IP header.
     * The rest will be PBUF_REFs mirroring the pbuf chain to be fragged,
     * but limited to the size of an mtu.
     */
    rambuf = pbuf_alloc(PBUF_LINK, IP_HLEN, PBUF_RAM);
 8018c60:	f44f 7220 	mov.w	r2, #640	; 0x280
 8018c64:	2114      	movs	r1, #20
 8018c66:	200e      	movs	r0, #14
 8018c68:	f7f7 fd02 	bl	8010670 <pbuf_alloc>
 8018c6c:	6278      	str	r0, [r7, #36]	; 0x24
    if (rambuf == NULL) {
 8018c6e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8018c70:	2b00      	cmp	r3, #0
 8018c72:	f000 80d5 	beq.w	8018e20 <ip4_frag+0x264>
      goto memerr;
    }
    LWIP_ASSERT("this needs a pbuf in one piece!",
 8018c76:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8018c78:	895b      	ldrh	r3, [r3, #10]
 8018c7a:	2b13      	cmp	r3, #19
 8018c7c:	d806      	bhi.n	8018c8c <ip4_frag+0xd0>
 8018c7e:	4b6c      	ldr	r3, [pc, #432]	; (8018e30 <ip4_frag+0x274>)
 8018c80:	f44f 7249 	mov.w	r2, #804	; 0x324
 8018c84:	496d      	ldr	r1, [pc, #436]	; (8018e3c <ip4_frag+0x280>)
 8018c86:	486c      	ldr	r0, [pc, #432]	; (8018e38 <ip4_frag+0x27c>)
 8018c88:	f000 feee 	bl	8019a68 <iprintf>
                (rambuf->len >= (IP_HLEN)));
    SMEMCPY(rambuf->payload, original_iphdr, IP_HLEN);
 8018c8c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8018c8e:	685b      	ldr	r3, [r3, #4]
 8018c90:	2214      	movs	r2, #20
 8018c92:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8018c94:	4618      	mov	r0, r3
 8018c96:	f001 f8b6 	bl	8019e06 <memcpy>
    iphdr = (struct ip_hdr *)rambuf->payload;
 8018c9a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8018c9c:	685b      	ldr	r3, [r3, #4]
 8018c9e:	633b      	str	r3, [r7, #48]	; 0x30

    left_to_copy = fragsize;
 8018ca0:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8018ca2:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
    while (left_to_copy) {
 8018ca6:	e064      	b.n	8018d72 <ip4_frag+0x1b6>
      struct pbuf_custom_ref *pcr;
      u16_t plen = (u16_t)(p->len - poff);
 8018ca8:	68fb      	ldr	r3, [r7, #12]
 8018caa:	895a      	ldrh	r2, [r3, #10]
 8018cac:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 8018cae:	1ad3      	subs	r3, r2, r3
 8018cb0:	83fb      	strh	r3, [r7, #30]
      LWIP_ASSERT("p->len >= poff", p->len >= poff);
 8018cb2:	68fb      	ldr	r3, [r7, #12]
 8018cb4:	895b      	ldrh	r3, [r3, #10]
 8018cb6:	8ffa      	ldrh	r2, [r7, #62]	; 0x3e
 8018cb8:	429a      	cmp	r2, r3
 8018cba:	d906      	bls.n	8018cca <ip4_frag+0x10e>
 8018cbc:	4b5c      	ldr	r3, [pc, #368]	; (8018e30 <ip4_frag+0x274>)
 8018cbe:	f240 322d 	movw	r2, #813	; 0x32d
 8018cc2:	495f      	ldr	r1, [pc, #380]	; (8018e40 <ip4_frag+0x284>)
 8018cc4:	485c      	ldr	r0, [pc, #368]	; (8018e38 <ip4_frag+0x27c>)
 8018cc6:	f000 fecf 	bl	8019a68 <iprintf>
      newpbuflen = LWIP_MIN(left_to_copy, plen);
 8018cca:	8bfa      	ldrh	r2, [r7, #30]
 8018ccc:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 8018cd0:	4293      	cmp	r3, r2
 8018cd2:	bf28      	it	cs
 8018cd4:	4613      	movcs	r3, r2
 8018cd6:	f8a7 3046 	strh.w	r3, [r7, #70]	; 0x46
      /* Is this pbuf already empty? */
      if (!newpbuflen) {
 8018cda:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 8018cde:	2b00      	cmp	r3, #0
 8018ce0:	d105      	bne.n	8018cee <ip4_frag+0x132>
        poff = 0;
 8018ce2:	2300      	movs	r3, #0
 8018ce4:	87fb      	strh	r3, [r7, #62]	; 0x3e
        p = p->next;
 8018ce6:	68fb      	ldr	r3, [r7, #12]
 8018ce8:	681b      	ldr	r3, [r3, #0]
 8018cea:	60fb      	str	r3, [r7, #12]
        continue;
 8018cec:	e041      	b.n	8018d72 <ip4_frag+0x1b6>
      }
      pcr = ip_frag_alloc_pbuf_custom_ref();
 8018cee:	f7ff ff0d 	bl	8018b0c <ip_frag_alloc_pbuf_custom_ref>
 8018cf2:	61b8      	str	r0, [r7, #24]
      if (pcr == NULL) {
 8018cf4:	69bb      	ldr	r3, [r7, #24]
 8018cf6:	2b00      	cmp	r3, #0
 8018cf8:	d103      	bne.n	8018d02 <ip4_frag+0x146>
        pbuf_free(rambuf);
 8018cfa:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8018cfc:	f7f7 ff9c 	bl	8010c38 <pbuf_free>
        goto memerr;
 8018d00:	e08f      	b.n	8018e22 <ip4_frag+0x266>
      }
      /* Mirror this pbuf, although we might not need all of it. */
      newpbuf = pbuf_alloced_custom(PBUF_RAW, newpbuflen, PBUF_REF, &pcr->pc,
 8018d02:	69b8      	ldr	r0, [r7, #24]
                                    (u8_t *)p->payload + poff, newpbuflen);
 8018d04:	68fb      	ldr	r3, [r7, #12]
 8018d06:	685a      	ldr	r2, [r3, #4]
      newpbuf = pbuf_alloced_custom(PBUF_RAW, newpbuflen, PBUF_REF, &pcr->pc,
 8018d08:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 8018d0a:	4413      	add	r3, r2
 8018d0c:	f8b7 1046 	ldrh.w	r1, [r7, #70]	; 0x46
 8018d10:	f8b7 2046 	ldrh.w	r2, [r7, #70]	; 0x46
 8018d14:	9201      	str	r2, [sp, #4]
 8018d16:	9300      	str	r3, [sp, #0]
 8018d18:	4603      	mov	r3, r0
 8018d1a:	2241      	movs	r2, #65	; 0x41
 8018d1c:	2000      	movs	r0, #0
 8018d1e:	f7f7 fdd3 	bl	80108c8 <pbuf_alloced_custom>
 8018d22:	6178      	str	r0, [r7, #20]
      if (newpbuf == NULL) {
 8018d24:	697b      	ldr	r3, [r7, #20]
 8018d26:	2b00      	cmp	r3, #0
 8018d28:	d106      	bne.n	8018d38 <ip4_frag+0x17c>
        ip_frag_free_pbuf_custom_ref(pcr);
 8018d2a:	69b8      	ldr	r0, [r7, #24]
 8018d2c:	f7ff fef6 	bl	8018b1c <ip_frag_free_pbuf_custom_ref>
        pbuf_free(rambuf);
 8018d30:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8018d32:	f7f7 ff81 	bl	8010c38 <pbuf_free>
        goto memerr;
 8018d36:	e074      	b.n	8018e22 <ip4_frag+0x266>
      }
      pbuf_ref(p);
 8018d38:	68f8      	ldr	r0, [r7, #12]
 8018d3a:	f7f8 f81d 	bl	8010d78 <pbuf_ref>
      pcr->original = p;
 8018d3e:	69bb      	ldr	r3, [r7, #24]
 8018d40:	68fa      	ldr	r2, [r7, #12]
 8018d42:	615a      	str	r2, [r3, #20]
      pcr->pc.custom_free_function = ipfrag_free_pbuf_custom;
 8018d44:	69bb      	ldr	r3, [r7, #24]
 8018d46:	4a3f      	ldr	r2, [pc, #252]	; (8018e44 <ip4_frag+0x288>)
 8018d48:	611a      	str	r2, [r3, #16]

      /* Add it to end of rambuf's chain, but using pbuf_cat, not pbuf_chain
       * so that it is removed when pbuf_dechain is later called on rambuf.
       */
      pbuf_cat(rambuf, newpbuf);
 8018d4a:	6979      	ldr	r1, [r7, #20]
 8018d4c:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8018d4e:	f7f8 f835 	bl	8010dbc <pbuf_cat>
      left_to_copy = (u16_t)(left_to_copy - newpbuflen);
 8018d52:	f8b7 2044 	ldrh.w	r2, [r7, #68]	; 0x44
 8018d56:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 8018d5a:	1ad3      	subs	r3, r2, r3
 8018d5c:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
      if (left_to_copy) {
 8018d60:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 8018d64:	2b00      	cmp	r3, #0
 8018d66:	d004      	beq.n	8018d72 <ip4_frag+0x1b6>
        poff = 0;
 8018d68:	2300      	movs	r3, #0
 8018d6a:	87fb      	strh	r3, [r7, #62]	; 0x3e
        p = p->next;
 8018d6c:	68fb      	ldr	r3, [r7, #12]
 8018d6e:	681b      	ldr	r3, [r3, #0]
 8018d70:	60fb      	str	r3, [r7, #12]
    while (left_to_copy) {
 8018d72:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 8018d76:	2b00      	cmp	r3, #0
 8018d78:	d196      	bne.n	8018ca8 <ip4_frag+0xec>
      }
    }
    poff = (u16_t)(poff + newpbuflen);
 8018d7a:	8ffa      	ldrh	r2, [r7, #62]	; 0x3e
 8018d7c:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 8018d80:	4413      	add	r3, r2
 8018d82:	87fb      	strh	r3, [r7, #62]	; 0x3e
#endif /* LWIP_NETIF_TX_SINGLE_PBUF */

    /* Correct header */
    last = (left <= netif->mtu - IP_HLEN);
 8018d84:	68bb      	ldr	r3, [r7, #8]
 8018d86:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 8018d88:	f1a3 0213 	sub.w	r2, r3, #19
 8018d8c:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 8018d90:	429a      	cmp	r2, r3
 8018d92:	bfcc      	ite	gt
 8018d94:	2301      	movgt	r3, #1
 8018d96:	2300      	movle	r3, #0
 8018d98:	b2db      	uxtb	r3, r3
 8018d9a:	623b      	str	r3, [r7, #32]

    /* Set new offset and MF flag */
    tmp = (IP_OFFMASK & (ofo));
 8018d9c:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 8018da0:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8018da4:	87bb      	strh	r3, [r7, #60]	; 0x3c
    if (!last || mf_set) {
 8018da6:	6a3b      	ldr	r3, [r7, #32]
 8018da8:	2b00      	cmp	r3, #0
 8018daa:	d002      	beq.n	8018db2 <ip4_frag+0x1f6>
 8018dac:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8018dae:	2b00      	cmp	r3, #0
 8018db0:	d003      	beq.n	8018dba <ip4_frag+0x1fe>
      /* the last fragment has MF set if the input frame had it */
      tmp = tmp | IP_MF;
 8018db2:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 8018db4:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8018db8:	87bb      	strh	r3, [r7, #60]	; 0x3c
    }
    IPH_OFFSET_SET(iphdr, lwip_htons(tmp));
 8018dba:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 8018dbc:	4618      	mov	r0, r3
 8018dbe:	f7f6 fb37 	bl	800f430 <lwip_htons>
 8018dc2:	4603      	mov	r3, r0
 8018dc4:	461a      	mov	r2, r3
 8018dc6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8018dc8:	80da      	strh	r2, [r3, #6]
    IPH_LEN_SET(iphdr, lwip_htons((u16_t)(fragsize + IP_HLEN)));
 8018dca:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8018dcc:	3314      	adds	r3, #20
 8018dce:	b29b      	uxth	r3, r3
 8018dd0:	4618      	mov	r0, r3
 8018dd2:	f7f6 fb2d 	bl	800f430 <lwip_htons>
 8018dd6:	4603      	mov	r3, r0
 8018dd8:	461a      	mov	r2, r3
 8018dda:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8018ddc:	805a      	strh	r2, [r3, #2]
    IPH_CHKSUM_SET(iphdr, 0);
 8018dde:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8018de0:	2200      	movs	r2, #0
 8018de2:	729a      	strb	r2, [r3, #10]
 8018de4:	2200      	movs	r2, #0
 8018de6:	72da      	strb	r2, [r3, #11]
#endif /* CHECKSUM_GEN_IP */

    /* No need for separate header pbuf - we allowed room for it in rambuf
     * when allocated.
     */
    netif->output(netif, rambuf, dest);
 8018de8:	68bb      	ldr	r3, [r7, #8]
 8018dea:	695b      	ldr	r3, [r3, #20]
 8018dec:	687a      	ldr	r2, [r7, #4]
 8018dee:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8018df0:	68b8      	ldr	r0, [r7, #8]
 8018df2:	4798      	blx	r3
     * recreate it next time round the loop. If we're lucky the hardware
     * will have already sent the packet, the free will really free, and
     * there will be zero memory penalty.
     */

    pbuf_free(rambuf);
 8018df4:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8018df6:	f7f7 ff1f 	bl	8010c38 <pbuf_free>
    left = (u16_t)(left - fragsize);
 8018dfa:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 8018dfe:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8018e00:	1ad3      	subs	r3, r2, r3
 8018e02:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
    ofo = (u16_t)(ofo + nfb);
 8018e06:	f8b7 2040 	ldrh.w	r2, [r7, #64]	; 0x40
 8018e0a:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 8018e0c:	4413      	add	r3, r2
 8018e0e:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
  while (left) {
 8018e12:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 8018e16:	2b00      	cmp	r3, #0
 8018e18:	f47f af19 	bne.w	8018c4e <ip4_frag+0x92>
  }
  MIB2_STATS_INC(mib2.ipfragoks);
  return ERR_OK;
 8018e1c:	2300      	movs	r3, #0
 8018e1e:	e002      	b.n	8018e26 <ip4_frag+0x26a>
      goto memerr;
 8018e20:	bf00      	nop
memerr:
  MIB2_STATS_INC(mib2.ipfragfails);
  return ERR_MEM;
 8018e22:	f04f 33ff 	mov.w	r3, #4294967295
}
 8018e26:	4618      	mov	r0, r3
 8018e28:	3748      	adds	r7, #72	; 0x48
 8018e2a:	46bd      	mov	sp, r7
 8018e2c:	bd80      	pop	{r7, pc}
 8018e2e:	bf00      	nop
 8018e30:	0801e90c 	.word	0x0801e90c
 8018e34:	0801eae8 	.word	0x0801eae8
 8018e38:	0801e954 	.word	0x0801e954
 8018e3c:	0801eb04 	.word	0x0801eb04
 8018e40:	0801eb24 	.word	0x0801eb24
 8018e44:	08018b55 	.word	0x08018b55

08018e48 <ethernet_input>:
 * @see ETHARP_SUPPORT_VLAN
 * @see LWIP_HOOK_VLAN_CHECK
 */
err_t
ethernet_input(struct pbuf *p, struct netif *netif)
{
 8018e48:	b580      	push	{r7, lr}
 8018e4a:	b086      	sub	sp, #24
 8018e4c:	af00      	add	r7, sp, #0
 8018e4e:	6078      	str	r0, [r7, #4]
 8018e50:	6039      	str	r1, [r7, #0]
  struct eth_hdr *ethhdr;
  u16_t type;
#if LWIP_ARP || ETHARP_SUPPORT_VLAN || LWIP_IPV6
  u16_t next_hdr_offset = SIZEOF_ETH_HDR;
 8018e52:	230e      	movs	r3, #14
 8018e54:	82fb      	strh	r3, [r7, #22]
#endif /* LWIP_ARP || ETHARP_SUPPORT_VLAN */

  LWIP_ASSERT_CORE_LOCKED();

  if (p->len <= SIZEOF_ETH_HDR) {
 8018e56:	687b      	ldr	r3, [r7, #4]
 8018e58:	895b      	ldrh	r3, [r3, #10]
 8018e5a:	2b0e      	cmp	r3, #14
 8018e5c:	d96e      	bls.n	8018f3c <ethernet_input+0xf4>
    ETHARP_STATS_INC(etharp.drop);
    MIB2_STATS_NETIF_INC(netif, ifinerrors);
    goto free_and_return;
  }

  if (p->if_idx == NETIF_NO_INDEX) {
 8018e5e:	687b      	ldr	r3, [r7, #4]
 8018e60:	7bdb      	ldrb	r3, [r3, #15]
 8018e62:	2b00      	cmp	r3, #0
 8018e64:	d106      	bne.n	8018e74 <ethernet_input+0x2c>
    p->if_idx = netif_get_index(netif);
 8018e66:	683b      	ldr	r3, [r7, #0]
 8018e68:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8018e6c:	3301      	adds	r3, #1
 8018e6e:	b2da      	uxtb	r2, r3
 8018e70:	687b      	ldr	r3, [r7, #4]
 8018e72:	73da      	strb	r2, [r3, #15]
  }

  /* points to packet payload, which starts with an Ethernet header */
  ethhdr = (struct eth_hdr *)p->payload;
 8018e74:	687b      	ldr	r3, [r7, #4]
 8018e76:	685b      	ldr	r3, [r3, #4]
 8018e78:	613b      	str	r3, [r7, #16]
               (unsigned char)ethhdr->dest.addr[3], (unsigned char)ethhdr->dest.addr[4], (unsigned char)ethhdr->dest.addr[5],
               (unsigned char)ethhdr->src.addr[0],  (unsigned char)ethhdr->src.addr[1],  (unsigned char)ethhdr->src.addr[2],
               (unsigned char)ethhdr->src.addr[3],  (unsigned char)ethhdr->src.addr[4],  (unsigned char)ethhdr->src.addr[5],
               lwip_htons(ethhdr->type)));

  type = ethhdr->type;
 8018e7a:	693b      	ldr	r3, [r7, #16]
 8018e7c:	7b1a      	ldrb	r2, [r3, #12]
 8018e7e:	7b5b      	ldrb	r3, [r3, #13]
 8018e80:	021b      	lsls	r3, r3, #8
 8018e82:	4313      	orrs	r3, r2
 8018e84:	81fb      	strh	r3, [r7, #14]

#if LWIP_ARP_FILTER_NETIF
  netif = LWIP_ARP_FILTER_NETIF_FN(p, netif, lwip_htons(type));
#endif /* LWIP_ARP_FILTER_NETIF*/

  if (ethhdr->dest.addr[0] & 1) {
 8018e86:	693b      	ldr	r3, [r7, #16]
 8018e88:	781b      	ldrb	r3, [r3, #0]
 8018e8a:	f003 0301 	and.w	r3, r3, #1
 8018e8e:	2b00      	cmp	r3, #0
 8018e90:	d023      	beq.n	8018eda <ethernet_input+0x92>
    /* this might be a multicast or broadcast packet */
    if (ethhdr->dest.addr[0] == LL_IP4_MULTICAST_ADDR_0) {
 8018e92:	693b      	ldr	r3, [r7, #16]
 8018e94:	781b      	ldrb	r3, [r3, #0]
 8018e96:	2b01      	cmp	r3, #1
 8018e98:	d10f      	bne.n	8018eba <ethernet_input+0x72>
#if LWIP_IPV4
      if ((ethhdr->dest.addr[1] == LL_IP4_MULTICAST_ADDR_1) &&
 8018e9a:	693b      	ldr	r3, [r7, #16]
 8018e9c:	785b      	ldrb	r3, [r3, #1]
 8018e9e:	2b00      	cmp	r3, #0
 8018ea0:	d11b      	bne.n	8018eda <ethernet_input+0x92>
          (ethhdr->dest.addr[2] == LL_IP4_MULTICAST_ADDR_2)) {
 8018ea2:	693b      	ldr	r3, [r7, #16]
 8018ea4:	789b      	ldrb	r3, [r3, #2]
      if ((ethhdr->dest.addr[1] == LL_IP4_MULTICAST_ADDR_1) &&
 8018ea6:	2b5e      	cmp	r3, #94	; 0x5e
 8018ea8:	d117      	bne.n	8018eda <ethernet_input+0x92>
        /* mark the pbuf as link-layer multicast */
        p->flags |= PBUF_FLAG_LLMCAST;
 8018eaa:	687b      	ldr	r3, [r7, #4]
 8018eac:	7b5b      	ldrb	r3, [r3, #13]
 8018eae:	f043 0310 	orr.w	r3, r3, #16
 8018eb2:	b2da      	uxtb	r2, r3
 8018eb4:	687b      	ldr	r3, [r7, #4]
 8018eb6:	735a      	strb	r2, [r3, #13]
 8018eb8:	e00f      	b.n	8018eda <ethernet_input+0x92>
             (ethhdr->dest.addr[1] == LL_IP6_MULTICAST_ADDR_1)) {
      /* mark the pbuf as link-layer multicast */
      p->flags |= PBUF_FLAG_LLMCAST;
    }
#endif /* LWIP_IPV6 */
    else if (eth_addr_cmp(&ethhdr->dest, &ethbroadcast)) {
 8018eba:	693b      	ldr	r3, [r7, #16]
 8018ebc:	2206      	movs	r2, #6
 8018ebe:	4928      	ldr	r1, [pc, #160]	; (8018f60 <ethernet_input+0x118>)
 8018ec0:	4618      	mov	r0, r3
 8018ec2:	f000 ff17 	bl	8019cf4 <memcmp>
 8018ec6:	4603      	mov	r3, r0
 8018ec8:	2b00      	cmp	r3, #0
 8018eca:	d106      	bne.n	8018eda <ethernet_input+0x92>
      /* mark the pbuf as link-layer broadcast */
      p->flags |= PBUF_FLAG_LLBCAST;
 8018ecc:	687b      	ldr	r3, [r7, #4]
 8018ece:	7b5b      	ldrb	r3, [r3, #13]
 8018ed0:	f043 0308 	orr.w	r3, r3, #8
 8018ed4:	b2da      	uxtb	r2, r3
 8018ed6:	687b      	ldr	r3, [r7, #4]
 8018ed8:	735a      	strb	r2, [r3, #13]
    }
  }

  switch (type) {
 8018eda:	89fb      	ldrh	r3, [r7, #14]
 8018edc:	2b08      	cmp	r3, #8
 8018ede:	d003      	beq.n	8018ee8 <ethernet_input+0xa0>
 8018ee0:	f5b3 6fc1 	cmp.w	r3, #1544	; 0x608
 8018ee4:	d014      	beq.n	8018f10 <ethernet_input+0xc8>
      }
#endif
      ETHARP_STATS_INC(etharp.proterr);
      ETHARP_STATS_INC(etharp.drop);
      MIB2_STATS_NETIF_INC(netif, ifinunknownprotos);
      goto free_and_return;
 8018ee6:	e032      	b.n	8018f4e <ethernet_input+0x106>
      if (!(netif->flags & NETIF_FLAG_ETHARP)) {
 8018ee8:	683b      	ldr	r3, [r7, #0]
 8018eea:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8018eee:	f003 0308 	and.w	r3, r3, #8
 8018ef2:	2b00      	cmp	r3, #0
 8018ef4:	d024      	beq.n	8018f40 <ethernet_input+0xf8>
      if (pbuf_remove_header(p, next_hdr_offset)) {
 8018ef6:	8afb      	ldrh	r3, [r7, #22]
 8018ef8:	4619      	mov	r1, r3
 8018efa:	6878      	ldr	r0, [r7, #4]
 8018efc:	f7f7 fe16 	bl	8010b2c <pbuf_remove_header>
 8018f00:	4603      	mov	r3, r0
 8018f02:	2b00      	cmp	r3, #0
 8018f04:	d11e      	bne.n	8018f44 <ethernet_input+0xfc>
        ip4_input(p, netif);
 8018f06:	6839      	ldr	r1, [r7, #0]
 8018f08:	6878      	ldr	r0, [r7, #4]
 8018f0a:	f7fe ff21 	bl	8017d50 <ip4_input>
      break;
 8018f0e:	e013      	b.n	8018f38 <ethernet_input+0xf0>
      if (!(netif->flags & NETIF_FLAG_ETHARP)) {
 8018f10:	683b      	ldr	r3, [r7, #0]
 8018f12:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8018f16:	f003 0308 	and.w	r3, r3, #8
 8018f1a:	2b00      	cmp	r3, #0
 8018f1c:	d014      	beq.n	8018f48 <ethernet_input+0x100>
      if (pbuf_remove_header(p, next_hdr_offset)) {
 8018f1e:	8afb      	ldrh	r3, [r7, #22]
 8018f20:	4619      	mov	r1, r3
 8018f22:	6878      	ldr	r0, [r7, #4]
 8018f24:	f7f7 fe02 	bl	8010b2c <pbuf_remove_header>
 8018f28:	4603      	mov	r3, r0
 8018f2a:	2b00      	cmp	r3, #0
 8018f2c:	d10e      	bne.n	8018f4c <ethernet_input+0x104>
        etharp_input(p, netif);
 8018f2e:	6839      	ldr	r1, [r7, #0]
 8018f30:	6878      	ldr	r0, [r7, #4]
 8018f32:	f7fe f89b 	bl	801706c <etharp_input>
      break;
 8018f36:	bf00      	nop
  }

  /* This means the pbuf is freed or consumed,
     so the caller doesn't have to free it again */
  return ERR_OK;
 8018f38:	2300      	movs	r3, #0
 8018f3a:	e00c      	b.n	8018f56 <ethernet_input+0x10e>
    goto free_and_return;
 8018f3c:	bf00      	nop
 8018f3e:	e006      	b.n	8018f4e <ethernet_input+0x106>
        goto free_and_return;
 8018f40:	bf00      	nop
 8018f42:	e004      	b.n	8018f4e <ethernet_input+0x106>
        goto free_and_return;
 8018f44:	bf00      	nop
 8018f46:	e002      	b.n	8018f4e <ethernet_input+0x106>
        goto free_and_return;
 8018f48:	bf00      	nop
 8018f4a:	e000      	b.n	8018f4e <ethernet_input+0x106>
        goto free_and_return;
 8018f4c:	bf00      	nop

free_and_return:
  pbuf_free(p);
 8018f4e:	6878      	ldr	r0, [r7, #4]
 8018f50:	f7f7 fe72 	bl	8010c38 <pbuf_free>
  return ERR_OK;
 8018f54:	2300      	movs	r3, #0
}
 8018f56:	4618      	mov	r0, r3
 8018f58:	3718      	adds	r7, #24
 8018f5a:	46bd      	mov	sp, r7
 8018f5c:	bd80      	pop	{r7, pc}
 8018f5e:	bf00      	nop
 8018f60:	0801ecf8 	.word	0x0801ecf8

08018f64 <ethernet_output>:
 * @return ERR_OK if the packet was sent, any other err_t on failure
 */
err_t
ethernet_output(struct netif * netif, struct pbuf * p,
                const struct eth_addr * src, const struct eth_addr * dst,
                u16_t eth_type) {
 8018f64:	b580      	push	{r7, lr}
 8018f66:	b086      	sub	sp, #24
 8018f68:	af00      	add	r7, sp, #0
 8018f6a:	60f8      	str	r0, [r7, #12]
 8018f6c:	60b9      	str	r1, [r7, #8]
 8018f6e:	607a      	str	r2, [r7, #4]
 8018f70:	603b      	str	r3, [r7, #0]
  struct eth_hdr *ethhdr;
  u16_t eth_type_be = lwip_htons(eth_type);
 8018f72:	8c3b      	ldrh	r3, [r7, #32]
 8018f74:	4618      	mov	r0, r3
 8018f76:	f7f6 fa5b 	bl	800f430 <lwip_htons>
 8018f7a:	4603      	mov	r3, r0
 8018f7c:	82fb      	strh	r3, [r7, #22]

    eth_type_be = PP_HTONS(ETHTYPE_VLAN);
  } else
#endif /* ETHARP_SUPPORT_VLAN && defined(LWIP_HOOK_VLAN_SET) */
  {
    if (pbuf_add_header(p, SIZEOF_ETH_HDR) != 0) {
 8018f7e:	210e      	movs	r1, #14
 8018f80:	68b8      	ldr	r0, [r7, #8]
 8018f82:	f7f7 fdc3 	bl	8010b0c <pbuf_add_header>
 8018f86:	4603      	mov	r3, r0
 8018f88:	2b00      	cmp	r3, #0
 8018f8a:	d125      	bne.n	8018fd8 <ethernet_output+0x74>
    }
  }

  LWIP_ASSERT_CORE_LOCKED();

  ethhdr = (struct eth_hdr *)p->payload;
 8018f8c:	68bb      	ldr	r3, [r7, #8]
 8018f8e:	685b      	ldr	r3, [r3, #4]
 8018f90:	613b      	str	r3, [r7, #16]
  ethhdr->type = eth_type_be;
 8018f92:	693b      	ldr	r3, [r7, #16]
 8018f94:	8afa      	ldrh	r2, [r7, #22]
 8018f96:	819a      	strh	r2, [r3, #12]
  SMEMCPY(&ethhdr->dest, dst, ETH_HWADDR_LEN);
 8018f98:	693b      	ldr	r3, [r7, #16]
 8018f9a:	2206      	movs	r2, #6
 8018f9c:	6839      	ldr	r1, [r7, #0]
 8018f9e:	4618      	mov	r0, r3
 8018fa0:	f000 ff31 	bl	8019e06 <memcpy>
  SMEMCPY(&ethhdr->src,  src, ETH_HWADDR_LEN);
 8018fa4:	693b      	ldr	r3, [r7, #16]
 8018fa6:	3306      	adds	r3, #6
 8018fa8:	2206      	movs	r2, #6
 8018faa:	6879      	ldr	r1, [r7, #4]
 8018fac:	4618      	mov	r0, r3
 8018fae:	f000 ff2a 	bl	8019e06 <memcpy>

  LWIP_ASSERT("netif->hwaddr_len must be 6 for ethernet_output!",
 8018fb2:	68fb      	ldr	r3, [r7, #12]
 8018fb4:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 8018fb8:	2b06      	cmp	r3, #6
 8018fba:	d006      	beq.n	8018fca <ethernet_output+0x66>
 8018fbc:	4b0a      	ldr	r3, [pc, #40]	; (8018fe8 <ethernet_output+0x84>)
 8018fbe:	f44f 7299 	mov.w	r2, #306	; 0x132
 8018fc2:	490a      	ldr	r1, [pc, #40]	; (8018fec <ethernet_output+0x88>)
 8018fc4:	480a      	ldr	r0, [pc, #40]	; (8018ff0 <ethernet_output+0x8c>)
 8018fc6:	f000 fd4f 	bl	8019a68 <iprintf>
              (netif->hwaddr_len == ETH_HWADDR_LEN));
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE,
              ("ethernet_output: sending packet %p\n", (void *)p));

  /* send the packet */
  return netif->linkoutput(netif, p);
 8018fca:	68fb      	ldr	r3, [r7, #12]
 8018fcc:	699b      	ldr	r3, [r3, #24]
 8018fce:	68b9      	ldr	r1, [r7, #8]
 8018fd0:	68f8      	ldr	r0, [r7, #12]
 8018fd2:	4798      	blx	r3
 8018fd4:	4603      	mov	r3, r0
 8018fd6:	e002      	b.n	8018fde <ethernet_output+0x7a>
      goto pbuf_header_failed;
 8018fd8:	bf00      	nop

pbuf_header_failed:
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS,
              ("ethernet_output: could not allocate room for header.\n"));
  LINK_STATS_INC(link.lenerr);
  return ERR_BUF;
 8018fda:	f06f 0301 	mvn.w	r3, #1
}
 8018fde:	4618      	mov	r0, r3
 8018fe0:	3718      	adds	r7, #24
 8018fe2:	46bd      	mov	sp, r7
 8018fe4:	bd80      	pop	{r7, pc}
 8018fe6:	bf00      	nop
 8018fe8:	0801eb34 	.word	0x0801eb34
 8018fec:	0801eb6c 	.word	0x0801eb6c
 8018ff0:	0801eba0 	.word	0x0801eba0

08018ff4 <rand>:
 8018ff4:	4b16      	ldr	r3, [pc, #88]	; (8019050 <rand+0x5c>)
 8018ff6:	b510      	push	{r4, lr}
 8018ff8:	681c      	ldr	r4, [r3, #0]
 8018ffa:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8018ffc:	b9b3      	cbnz	r3, 801902c <rand+0x38>
 8018ffe:	2018      	movs	r0, #24
 8019000:	f001 fd6e 	bl	801aae0 <malloc>
 8019004:	4602      	mov	r2, r0
 8019006:	6320      	str	r0, [r4, #48]	; 0x30
 8019008:	b920      	cbnz	r0, 8019014 <rand+0x20>
 801900a:	4b12      	ldr	r3, [pc, #72]	; (8019054 <rand+0x60>)
 801900c:	4812      	ldr	r0, [pc, #72]	; (8019058 <rand+0x64>)
 801900e:	2152      	movs	r1, #82	; 0x52
 8019010:	f000 ff08 	bl	8019e24 <__assert_func>
 8019014:	4911      	ldr	r1, [pc, #68]	; (801905c <rand+0x68>)
 8019016:	4b12      	ldr	r3, [pc, #72]	; (8019060 <rand+0x6c>)
 8019018:	e9c0 1300 	strd	r1, r3, [r0]
 801901c:	4b11      	ldr	r3, [pc, #68]	; (8019064 <rand+0x70>)
 801901e:	6083      	str	r3, [r0, #8]
 8019020:	230b      	movs	r3, #11
 8019022:	8183      	strh	r3, [r0, #12]
 8019024:	2100      	movs	r1, #0
 8019026:	2001      	movs	r0, #1
 8019028:	e9c2 0104 	strd	r0, r1, [r2, #16]
 801902c:	6b21      	ldr	r1, [r4, #48]	; 0x30
 801902e:	480e      	ldr	r0, [pc, #56]	; (8019068 <rand+0x74>)
 8019030:	690b      	ldr	r3, [r1, #16]
 8019032:	694c      	ldr	r4, [r1, #20]
 8019034:	4a0d      	ldr	r2, [pc, #52]	; (801906c <rand+0x78>)
 8019036:	4358      	muls	r0, r3
 8019038:	fb02 0004 	mla	r0, r2, r4, r0
 801903c:	fba3 3202 	umull	r3, r2, r3, r2
 8019040:	3301      	adds	r3, #1
 8019042:	eb40 0002 	adc.w	r0, r0, r2
 8019046:	e9c1 3004 	strd	r3, r0, [r1, #16]
 801904a:	f020 4000 	bic.w	r0, r0, #2147483648	; 0x80000000
 801904e:	bd10      	pop	{r4, pc}
 8019050:	200000bc 	.word	0x200000bc
 8019054:	0801ed06 	.word	0x0801ed06
 8019058:	0801ed1d 	.word	0x0801ed1d
 801905c:	abcd330e 	.word	0xabcd330e
 8019060:	e66d1234 	.word	0xe66d1234
 8019064:	0005deec 	.word	0x0005deec
 8019068:	5851f42d 	.word	0x5851f42d
 801906c:	4c957f2d 	.word	0x4c957f2d

08019070 <__cvt>:
 8019070:	b5f0      	push	{r4, r5, r6, r7, lr}
 8019072:	ed2d 8b02 	vpush	{d8}
 8019076:	eeb0 8b40 	vmov.f64	d8, d0
 801907a:	b085      	sub	sp, #20
 801907c:	4617      	mov	r7, r2
 801907e:	9d0d      	ldr	r5, [sp, #52]	; 0x34
 8019080:	9e0c      	ldr	r6, [sp, #48]	; 0x30
 8019082:	ee18 2a90 	vmov	r2, s17
 8019086:	f025 0520 	bic.w	r5, r5, #32
 801908a:	2a00      	cmp	r2, #0
 801908c:	bfb6      	itet	lt
 801908e:	222d      	movlt	r2, #45	; 0x2d
 8019090:	2200      	movge	r2, #0
 8019092:	eeb1 8b40 	vneglt.f64	d8, d0
 8019096:	2d46      	cmp	r5, #70	; 0x46
 8019098:	460c      	mov	r4, r1
 801909a:	701a      	strb	r2, [r3, #0]
 801909c:	d004      	beq.n	80190a8 <__cvt+0x38>
 801909e:	2d45      	cmp	r5, #69	; 0x45
 80190a0:	d100      	bne.n	80190a4 <__cvt+0x34>
 80190a2:	3401      	adds	r4, #1
 80190a4:	2102      	movs	r1, #2
 80190a6:	e000      	b.n	80190aa <__cvt+0x3a>
 80190a8:	2103      	movs	r1, #3
 80190aa:	ab03      	add	r3, sp, #12
 80190ac:	9301      	str	r3, [sp, #4]
 80190ae:	ab02      	add	r3, sp, #8
 80190b0:	9300      	str	r3, [sp, #0]
 80190b2:	4622      	mov	r2, r4
 80190b4:	4633      	mov	r3, r6
 80190b6:	eeb0 0b48 	vmov.f64	d0, d8
 80190ba:	f000 ff59 	bl	8019f70 <_dtoa_r>
 80190be:	2d47      	cmp	r5, #71	; 0x47
 80190c0:	d101      	bne.n	80190c6 <__cvt+0x56>
 80190c2:	07fb      	lsls	r3, r7, #31
 80190c4:	d51a      	bpl.n	80190fc <__cvt+0x8c>
 80190c6:	2d46      	cmp	r5, #70	; 0x46
 80190c8:	eb00 0204 	add.w	r2, r0, r4
 80190cc:	d10c      	bne.n	80190e8 <__cvt+0x78>
 80190ce:	7803      	ldrb	r3, [r0, #0]
 80190d0:	2b30      	cmp	r3, #48	; 0x30
 80190d2:	d107      	bne.n	80190e4 <__cvt+0x74>
 80190d4:	eeb5 8b40 	vcmp.f64	d8, #0.0
 80190d8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80190dc:	bf1c      	itt	ne
 80190de:	f1c4 0401 	rsbne	r4, r4, #1
 80190e2:	6034      	strne	r4, [r6, #0]
 80190e4:	6833      	ldr	r3, [r6, #0]
 80190e6:	441a      	add	r2, r3
 80190e8:	eeb5 8b40 	vcmp.f64	d8, #0.0
 80190ec:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80190f0:	bf08      	it	eq
 80190f2:	9203      	streq	r2, [sp, #12]
 80190f4:	2130      	movs	r1, #48	; 0x30
 80190f6:	9b03      	ldr	r3, [sp, #12]
 80190f8:	4293      	cmp	r3, r2
 80190fa:	d307      	bcc.n	801910c <__cvt+0x9c>
 80190fc:	9b03      	ldr	r3, [sp, #12]
 80190fe:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8019100:	1a1b      	subs	r3, r3, r0
 8019102:	6013      	str	r3, [r2, #0]
 8019104:	b005      	add	sp, #20
 8019106:	ecbd 8b02 	vpop	{d8}
 801910a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801910c:	1c5c      	adds	r4, r3, #1
 801910e:	9403      	str	r4, [sp, #12]
 8019110:	7019      	strb	r1, [r3, #0]
 8019112:	e7f0      	b.n	80190f6 <__cvt+0x86>

08019114 <__exponent>:
 8019114:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8019116:	4603      	mov	r3, r0
 8019118:	2900      	cmp	r1, #0
 801911a:	bfb8      	it	lt
 801911c:	4249      	neglt	r1, r1
 801911e:	f803 2b02 	strb.w	r2, [r3], #2
 8019122:	bfb4      	ite	lt
 8019124:	222d      	movlt	r2, #45	; 0x2d
 8019126:	222b      	movge	r2, #43	; 0x2b
 8019128:	2909      	cmp	r1, #9
 801912a:	7042      	strb	r2, [r0, #1]
 801912c:	dd2a      	ble.n	8019184 <__exponent+0x70>
 801912e:	f10d 0207 	add.w	r2, sp, #7
 8019132:	4617      	mov	r7, r2
 8019134:	260a      	movs	r6, #10
 8019136:	4694      	mov	ip, r2
 8019138:	fb91 f5f6 	sdiv	r5, r1, r6
 801913c:	fb06 1415 	mls	r4, r6, r5, r1
 8019140:	3430      	adds	r4, #48	; 0x30
 8019142:	f80c 4c01 	strb.w	r4, [ip, #-1]
 8019146:	460c      	mov	r4, r1
 8019148:	2c63      	cmp	r4, #99	; 0x63
 801914a:	f102 32ff 	add.w	r2, r2, #4294967295
 801914e:	4629      	mov	r1, r5
 8019150:	dcf1      	bgt.n	8019136 <__exponent+0x22>
 8019152:	3130      	adds	r1, #48	; 0x30
 8019154:	f1ac 0402 	sub.w	r4, ip, #2
 8019158:	f802 1c01 	strb.w	r1, [r2, #-1]
 801915c:	1c41      	adds	r1, r0, #1
 801915e:	4622      	mov	r2, r4
 8019160:	42ba      	cmp	r2, r7
 8019162:	d30a      	bcc.n	801917a <__exponent+0x66>
 8019164:	f10d 0209 	add.w	r2, sp, #9
 8019168:	eba2 020c 	sub.w	r2, r2, ip
 801916c:	42bc      	cmp	r4, r7
 801916e:	bf88      	it	hi
 8019170:	2200      	movhi	r2, #0
 8019172:	4413      	add	r3, r2
 8019174:	1a18      	subs	r0, r3, r0
 8019176:	b003      	add	sp, #12
 8019178:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801917a:	f812 5b01 	ldrb.w	r5, [r2], #1
 801917e:	f801 5f01 	strb.w	r5, [r1, #1]!
 8019182:	e7ed      	b.n	8019160 <__exponent+0x4c>
 8019184:	2330      	movs	r3, #48	; 0x30
 8019186:	3130      	adds	r1, #48	; 0x30
 8019188:	7083      	strb	r3, [r0, #2]
 801918a:	70c1      	strb	r1, [r0, #3]
 801918c:	1d03      	adds	r3, r0, #4
 801918e:	e7f1      	b.n	8019174 <__exponent+0x60>

08019190 <_printf_float>:
 8019190:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8019194:	b08b      	sub	sp, #44	; 0x2c
 8019196:	460c      	mov	r4, r1
 8019198:	f8dd 8050 	ldr.w	r8, [sp, #80]	; 0x50
 801919c:	4616      	mov	r6, r2
 801919e:	461f      	mov	r7, r3
 80191a0:	4605      	mov	r5, r0
 80191a2:	f000 fdbf 	bl	8019d24 <_localeconv_r>
 80191a6:	f8d0 b000 	ldr.w	fp, [r0]
 80191aa:	4658      	mov	r0, fp
 80191ac:	f7e8 fb58 	bl	8001860 <strlen>
 80191b0:	2300      	movs	r3, #0
 80191b2:	9308      	str	r3, [sp, #32]
 80191b4:	f8d8 3000 	ldr.w	r3, [r8]
 80191b8:	f894 9018 	ldrb.w	r9, [r4, #24]
 80191bc:	6822      	ldr	r2, [r4, #0]
 80191be:	3307      	adds	r3, #7
 80191c0:	f023 0307 	bic.w	r3, r3, #7
 80191c4:	f103 0108 	add.w	r1, r3, #8
 80191c8:	f8c8 1000 	str.w	r1, [r8]
 80191cc:	ed93 0b00 	vldr	d0, [r3]
 80191d0:	ed9f 6b97 	vldr	d6, [pc, #604]	; 8019430 <_printf_float+0x2a0>
 80191d4:	eeb0 7bc0 	vabs.f64	d7, d0
 80191d8:	eeb4 7b46 	vcmp.f64	d7, d6
 80191dc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80191e0:	ed84 0b12 	vstr	d0, [r4, #72]	; 0x48
 80191e4:	4682      	mov	sl, r0
 80191e6:	dd24      	ble.n	8019232 <_printf_float+0xa2>
 80191e8:	eeb5 0bc0 	vcmpe.f64	d0, #0.0
 80191ec:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80191f0:	d502      	bpl.n	80191f8 <_printf_float+0x68>
 80191f2:	232d      	movs	r3, #45	; 0x2d
 80191f4:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80191f8:	498f      	ldr	r1, [pc, #572]	; (8019438 <_printf_float+0x2a8>)
 80191fa:	4b90      	ldr	r3, [pc, #576]	; (801943c <_printf_float+0x2ac>)
 80191fc:	f1b9 0f47 	cmp.w	r9, #71	; 0x47
 8019200:	bf94      	ite	ls
 8019202:	4688      	movls	r8, r1
 8019204:	4698      	movhi	r8, r3
 8019206:	2303      	movs	r3, #3
 8019208:	6123      	str	r3, [r4, #16]
 801920a:	f022 0204 	bic.w	r2, r2, #4
 801920e:	2300      	movs	r3, #0
 8019210:	6022      	str	r2, [r4, #0]
 8019212:	9304      	str	r3, [sp, #16]
 8019214:	9700      	str	r7, [sp, #0]
 8019216:	4633      	mov	r3, r6
 8019218:	aa09      	add	r2, sp, #36	; 0x24
 801921a:	4621      	mov	r1, r4
 801921c:	4628      	mov	r0, r5
 801921e:	f000 f9d1 	bl	80195c4 <_printf_common>
 8019222:	3001      	adds	r0, #1
 8019224:	f040 808a 	bne.w	801933c <_printf_float+0x1ac>
 8019228:	f04f 30ff 	mov.w	r0, #4294967295
 801922c:	b00b      	add	sp, #44	; 0x2c
 801922e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8019232:	eeb4 0b40 	vcmp.f64	d0, d0
 8019236:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801923a:	d709      	bvc.n	8019250 <_printf_float+0xc0>
 801923c:	ee10 3a90 	vmov	r3, s1
 8019240:	2b00      	cmp	r3, #0
 8019242:	bfbc      	itt	lt
 8019244:	232d      	movlt	r3, #45	; 0x2d
 8019246:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 801924a:	497d      	ldr	r1, [pc, #500]	; (8019440 <_printf_float+0x2b0>)
 801924c:	4b7d      	ldr	r3, [pc, #500]	; (8019444 <_printf_float+0x2b4>)
 801924e:	e7d5      	b.n	80191fc <_printf_float+0x6c>
 8019250:	6863      	ldr	r3, [r4, #4]
 8019252:	f009 01df 	and.w	r1, r9, #223	; 0xdf
 8019256:	9104      	str	r1, [sp, #16]
 8019258:	1c59      	adds	r1, r3, #1
 801925a:	d13c      	bne.n	80192d6 <_printf_float+0x146>
 801925c:	2306      	movs	r3, #6
 801925e:	6063      	str	r3, [r4, #4]
 8019260:	2300      	movs	r3, #0
 8019262:	9303      	str	r3, [sp, #12]
 8019264:	ab08      	add	r3, sp, #32
 8019266:	e9cd 9301 	strd	r9, r3, [sp, #4]
 801926a:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 801926e:	ab07      	add	r3, sp, #28
 8019270:	6861      	ldr	r1, [r4, #4]
 8019272:	9300      	str	r3, [sp, #0]
 8019274:	6022      	str	r2, [r4, #0]
 8019276:	f10d 031b 	add.w	r3, sp, #27
 801927a:	4628      	mov	r0, r5
 801927c:	f7ff fef8 	bl	8019070 <__cvt>
 8019280:	9b04      	ldr	r3, [sp, #16]
 8019282:	9907      	ldr	r1, [sp, #28]
 8019284:	2b47      	cmp	r3, #71	; 0x47
 8019286:	4680      	mov	r8, r0
 8019288:	d108      	bne.n	801929c <_printf_float+0x10c>
 801928a:	1cc8      	adds	r0, r1, #3
 801928c:	db02      	blt.n	8019294 <_printf_float+0x104>
 801928e:	6863      	ldr	r3, [r4, #4]
 8019290:	4299      	cmp	r1, r3
 8019292:	dd41      	ble.n	8019318 <_printf_float+0x188>
 8019294:	f1a9 0902 	sub.w	r9, r9, #2
 8019298:	fa5f f989 	uxtb.w	r9, r9
 801929c:	f1b9 0f65 	cmp.w	r9, #101	; 0x65
 80192a0:	d820      	bhi.n	80192e4 <_printf_float+0x154>
 80192a2:	3901      	subs	r1, #1
 80192a4:	464a      	mov	r2, r9
 80192a6:	f104 0050 	add.w	r0, r4, #80	; 0x50
 80192aa:	9107      	str	r1, [sp, #28]
 80192ac:	f7ff ff32 	bl	8019114 <__exponent>
 80192b0:	9a08      	ldr	r2, [sp, #32]
 80192b2:	9004      	str	r0, [sp, #16]
 80192b4:	1813      	adds	r3, r2, r0
 80192b6:	2a01      	cmp	r2, #1
 80192b8:	6123      	str	r3, [r4, #16]
 80192ba:	dc02      	bgt.n	80192c2 <_printf_float+0x132>
 80192bc:	6822      	ldr	r2, [r4, #0]
 80192be:	07d2      	lsls	r2, r2, #31
 80192c0:	d501      	bpl.n	80192c6 <_printf_float+0x136>
 80192c2:	3301      	adds	r3, #1
 80192c4:	6123      	str	r3, [r4, #16]
 80192c6:	f89d 301b 	ldrb.w	r3, [sp, #27]
 80192ca:	2b00      	cmp	r3, #0
 80192cc:	d0a2      	beq.n	8019214 <_printf_float+0x84>
 80192ce:	232d      	movs	r3, #45	; 0x2d
 80192d0:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80192d4:	e79e      	b.n	8019214 <_printf_float+0x84>
 80192d6:	9904      	ldr	r1, [sp, #16]
 80192d8:	2947      	cmp	r1, #71	; 0x47
 80192da:	d1c1      	bne.n	8019260 <_printf_float+0xd0>
 80192dc:	2b00      	cmp	r3, #0
 80192de:	d1bf      	bne.n	8019260 <_printf_float+0xd0>
 80192e0:	2301      	movs	r3, #1
 80192e2:	e7bc      	b.n	801925e <_printf_float+0xce>
 80192e4:	f1b9 0f66 	cmp.w	r9, #102	; 0x66
 80192e8:	d118      	bne.n	801931c <_printf_float+0x18c>
 80192ea:	2900      	cmp	r1, #0
 80192ec:	6863      	ldr	r3, [r4, #4]
 80192ee:	dd0b      	ble.n	8019308 <_printf_float+0x178>
 80192f0:	6121      	str	r1, [r4, #16]
 80192f2:	b913      	cbnz	r3, 80192fa <_printf_float+0x16a>
 80192f4:	6822      	ldr	r2, [r4, #0]
 80192f6:	07d0      	lsls	r0, r2, #31
 80192f8:	d502      	bpl.n	8019300 <_printf_float+0x170>
 80192fa:	3301      	adds	r3, #1
 80192fc:	440b      	add	r3, r1
 80192fe:	6123      	str	r3, [r4, #16]
 8019300:	2300      	movs	r3, #0
 8019302:	65a1      	str	r1, [r4, #88]	; 0x58
 8019304:	9304      	str	r3, [sp, #16]
 8019306:	e7de      	b.n	80192c6 <_printf_float+0x136>
 8019308:	b913      	cbnz	r3, 8019310 <_printf_float+0x180>
 801930a:	6822      	ldr	r2, [r4, #0]
 801930c:	07d2      	lsls	r2, r2, #31
 801930e:	d501      	bpl.n	8019314 <_printf_float+0x184>
 8019310:	3302      	adds	r3, #2
 8019312:	e7f4      	b.n	80192fe <_printf_float+0x16e>
 8019314:	2301      	movs	r3, #1
 8019316:	e7f2      	b.n	80192fe <_printf_float+0x16e>
 8019318:	f04f 0967 	mov.w	r9, #103	; 0x67
 801931c:	9b08      	ldr	r3, [sp, #32]
 801931e:	4299      	cmp	r1, r3
 8019320:	db05      	blt.n	801932e <_printf_float+0x19e>
 8019322:	6823      	ldr	r3, [r4, #0]
 8019324:	6121      	str	r1, [r4, #16]
 8019326:	07d8      	lsls	r0, r3, #31
 8019328:	d5ea      	bpl.n	8019300 <_printf_float+0x170>
 801932a:	1c4b      	adds	r3, r1, #1
 801932c:	e7e7      	b.n	80192fe <_printf_float+0x16e>
 801932e:	2900      	cmp	r1, #0
 8019330:	bfd4      	ite	le
 8019332:	f1c1 0202 	rsble	r2, r1, #2
 8019336:	2201      	movgt	r2, #1
 8019338:	4413      	add	r3, r2
 801933a:	e7e0      	b.n	80192fe <_printf_float+0x16e>
 801933c:	6823      	ldr	r3, [r4, #0]
 801933e:	055a      	lsls	r2, r3, #21
 8019340:	d407      	bmi.n	8019352 <_printf_float+0x1c2>
 8019342:	6923      	ldr	r3, [r4, #16]
 8019344:	4642      	mov	r2, r8
 8019346:	4631      	mov	r1, r6
 8019348:	4628      	mov	r0, r5
 801934a:	47b8      	blx	r7
 801934c:	3001      	adds	r0, #1
 801934e:	d12a      	bne.n	80193a6 <_printf_float+0x216>
 8019350:	e76a      	b.n	8019228 <_printf_float+0x98>
 8019352:	f1b9 0f65 	cmp.w	r9, #101	; 0x65
 8019356:	f240 80e0 	bls.w	801951a <_printf_float+0x38a>
 801935a:	ed94 7b12 	vldr	d7, [r4, #72]	; 0x48
 801935e:	eeb5 7b40 	vcmp.f64	d7, #0.0
 8019362:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8019366:	d133      	bne.n	80193d0 <_printf_float+0x240>
 8019368:	4a37      	ldr	r2, [pc, #220]	; (8019448 <_printf_float+0x2b8>)
 801936a:	2301      	movs	r3, #1
 801936c:	4631      	mov	r1, r6
 801936e:	4628      	mov	r0, r5
 8019370:	47b8      	blx	r7
 8019372:	3001      	adds	r0, #1
 8019374:	f43f af58 	beq.w	8019228 <_printf_float+0x98>
 8019378:	e9dd 2307 	ldrd	r2, r3, [sp, #28]
 801937c:	429a      	cmp	r2, r3
 801937e:	db02      	blt.n	8019386 <_printf_float+0x1f6>
 8019380:	6823      	ldr	r3, [r4, #0]
 8019382:	07d8      	lsls	r0, r3, #31
 8019384:	d50f      	bpl.n	80193a6 <_printf_float+0x216>
 8019386:	4653      	mov	r3, sl
 8019388:	465a      	mov	r2, fp
 801938a:	4631      	mov	r1, r6
 801938c:	4628      	mov	r0, r5
 801938e:	47b8      	blx	r7
 8019390:	3001      	adds	r0, #1
 8019392:	f43f af49 	beq.w	8019228 <_printf_float+0x98>
 8019396:	f04f 0800 	mov.w	r8, #0
 801939a:	f104 091a 	add.w	r9, r4, #26
 801939e:	9b08      	ldr	r3, [sp, #32]
 80193a0:	3b01      	subs	r3, #1
 80193a2:	4543      	cmp	r3, r8
 80193a4:	dc09      	bgt.n	80193ba <_printf_float+0x22a>
 80193a6:	6823      	ldr	r3, [r4, #0]
 80193a8:	079b      	lsls	r3, r3, #30
 80193aa:	f100 8106 	bmi.w	80195ba <_printf_float+0x42a>
 80193ae:	68e0      	ldr	r0, [r4, #12]
 80193b0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80193b2:	4298      	cmp	r0, r3
 80193b4:	bfb8      	it	lt
 80193b6:	4618      	movlt	r0, r3
 80193b8:	e738      	b.n	801922c <_printf_float+0x9c>
 80193ba:	2301      	movs	r3, #1
 80193bc:	464a      	mov	r2, r9
 80193be:	4631      	mov	r1, r6
 80193c0:	4628      	mov	r0, r5
 80193c2:	47b8      	blx	r7
 80193c4:	3001      	adds	r0, #1
 80193c6:	f43f af2f 	beq.w	8019228 <_printf_float+0x98>
 80193ca:	f108 0801 	add.w	r8, r8, #1
 80193ce:	e7e6      	b.n	801939e <_printf_float+0x20e>
 80193d0:	9b07      	ldr	r3, [sp, #28]
 80193d2:	2b00      	cmp	r3, #0
 80193d4:	dc3a      	bgt.n	801944c <_printf_float+0x2bc>
 80193d6:	4a1c      	ldr	r2, [pc, #112]	; (8019448 <_printf_float+0x2b8>)
 80193d8:	2301      	movs	r3, #1
 80193da:	4631      	mov	r1, r6
 80193dc:	4628      	mov	r0, r5
 80193de:	47b8      	blx	r7
 80193e0:	3001      	adds	r0, #1
 80193e2:	f43f af21 	beq.w	8019228 <_printf_float+0x98>
 80193e6:	e9dd 3207 	ldrd	r3, r2, [sp, #28]
 80193ea:	4313      	orrs	r3, r2
 80193ec:	d102      	bne.n	80193f4 <_printf_float+0x264>
 80193ee:	6823      	ldr	r3, [r4, #0]
 80193f0:	07d9      	lsls	r1, r3, #31
 80193f2:	d5d8      	bpl.n	80193a6 <_printf_float+0x216>
 80193f4:	4653      	mov	r3, sl
 80193f6:	465a      	mov	r2, fp
 80193f8:	4631      	mov	r1, r6
 80193fa:	4628      	mov	r0, r5
 80193fc:	47b8      	blx	r7
 80193fe:	3001      	adds	r0, #1
 8019400:	f43f af12 	beq.w	8019228 <_printf_float+0x98>
 8019404:	f04f 0900 	mov.w	r9, #0
 8019408:	f104 0a1a 	add.w	sl, r4, #26
 801940c:	9b07      	ldr	r3, [sp, #28]
 801940e:	425b      	negs	r3, r3
 8019410:	454b      	cmp	r3, r9
 8019412:	dc01      	bgt.n	8019418 <_printf_float+0x288>
 8019414:	9b08      	ldr	r3, [sp, #32]
 8019416:	e795      	b.n	8019344 <_printf_float+0x1b4>
 8019418:	2301      	movs	r3, #1
 801941a:	4652      	mov	r2, sl
 801941c:	4631      	mov	r1, r6
 801941e:	4628      	mov	r0, r5
 8019420:	47b8      	blx	r7
 8019422:	3001      	adds	r0, #1
 8019424:	f43f af00 	beq.w	8019228 <_printf_float+0x98>
 8019428:	f109 0901 	add.w	r9, r9, #1
 801942c:	e7ee      	b.n	801940c <_printf_float+0x27c>
 801942e:	bf00      	nop
 8019430:	ffffffff 	.word	0xffffffff
 8019434:	7fefffff 	.word	0x7fefffff
 8019438:	0801ee76 	.word	0x0801ee76
 801943c:	0801ee7a 	.word	0x0801ee7a
 8019440:	0801ee7e 	.word	0x0801ee7e
 8019444:	0801ee82 	.word	0x0801ee82
 8019448:	0801ee86 	.word	0x0801ee86
 801944c:	9a08      	ldr	r2, [sp, #32]
 801944e:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8019450:	429a      	cmp	r2, r3
 8019452:	bfa8      	it	ge
 8019454:	461a      	movge	r2, r3
 8019456:	2a00      	cmp	r2, #0
 8019458:	4691      	mov	r9, r2
 801945a:	dc38      	bgt.n	80194ce <_printf_float+0x33e>
 801945c:	2300      	movs	r3, #0
 801945e:	9305      	str	r3, [sp, #20]
 8019460:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8019464:	f104 021a 	add.w	r2, r4, #26
 8019468:	6da3      	ldr	r3, [r4, #88]	; 0x58
 801946a:	9905      	ldr	r1, [sp, #20]
 801946c:	9304      	str	r3, [sp, #16]
 801946e:	eba3 0309 	sub.w	r3, r3, r9
 8019472:	428b      	cmp	r3, r1
 8019474:	dc33      	bgt.n	80194de <_printf_float+0x34e>
 8019476:	e9dd 2307 	ldrd	r2, r3, [sp, #28]
 801947a:	429a      	cmp	r2, r3
 801947c:	db3c      	blt.n	80194f8 <_printf_float+0x368>
 801947e:	6823      	ldr	r3, [r4, #0]
 8019480:	07da      	lsls	r2, r3, #31
 8019482:	d439      	bmi.n	80194f8 <_printf_float+0x368>
 8019484:	e9dd 3207 	ldrd	r3, r2, [sp, #28]
 8019488:	eba2 0903 	sub.w	r9, r2, r3
 801948c:	9b04      	ldr	r3, [sp, #16]
 801948e:	1ad2      	subs	r2, r2, r3
 8019490:	4591      	cmp	r9, r2
 8019492:	bfa8      	it	ge
 8019494:	4691      	movge	r9, r2
 8019496:	f1b9 0f00 	cmp.w	r9, #0
 801949a:	dc35      	bgt.n	8019508 <_printf_float+0x378>
 801949c:	f04f 0800 	mov.w	r8, #0
 80194a0:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 80194a4:	f104 0a1a 	add.w	sl, r4, #26
 80194a8:	e9dd 2307 	ldrd	r2, r3, [sp, #28]
 80194ac:	1a9b      	subs	r3, r3, r2
 80194ae:	eba3 0309 	sub.w	r3, r3, r9
 80194b2:	4543      	cmp	r3, r8
 80194b4:	f77f af77 	ble.w	80193a6 <_printf_float+0x216>
 80194b8:	2301      	movs	r3, #1
 80194ba:	4652      	mov	r2, sl
 80194bc:	4631      	mov	r1, r6
 80194be:	4628      	mov	r0, r5
 80194c0:	47b8      	blx	r7
 80194c2:	3001      	adds	r0, #1
 80194c4:	f43f aeb0 	beq.w	8019228 <_printf_float+0x98>
 80194c8:	f108 0801 	add.w	r8, r8, #1
 80194cc:	e7ec      	b.n	80194a8 <_printf_float+0x318>
 80194ce:	4613      	mov	r3, r2
 80194d0:	4631      	mov	r1, r6
 80194d2:	4642      	mov	r2, r8
 80194d4:	4628      	mov	r0, r5
 80194d6:	47b8      	blx	r7
 80194d8:	3001      	adds	r0, #1
 80194da:	d1bf      	bne.n	801945c <_printf_float+0x2cc>
 80194dc:	e6a4      	b.n	8019228 <_printf_float+0x98>
 80194de:	2301      	movs	r3, #1
 80194e0:	4631      	mov	r1, r6
 80194e2:	4628      	mov	r0, r5
 80194e4:	9204      	str	r2, [sp, #16]
 80194e6:	47b8      	blx	r7
 80194e8:	3001      	adds	r0, #1
 80194ea:	f43f ae9d 	beq.w	8019228 <_printf_float+0x98>
 80194ee:	9b05      	ldr	r3, [sp, #20]
 80194f0:	9a04      	ldr	r2, [sp, #16]
 80194f2:	3301      	adds	r3, #1
 80194f4:	9305      	str	r3, [sp, #20]
 80194f6:	e7b7      	b.n	8019468 <_printf_float+0x2d8>
 80194f8:	4653      	mov	r3, sl
 80194fa:	465a      	mov	r2, fp
 80194fc:	4631      	mov	r1, r6
 80194fe:	4628      	mov	r0, r5
 8019500:	47b8      	blx	r7
 8019502:	3001      	adds	r0, #1
 8019504:	d1be      	bne.n	8019484 <_printf_float+0x2f4>
 8019506:	e68f      	b.n	8019228 <_printf_float+0x98>
 8019508:	9a04      	ldr	r2, [sp, #16]
 801950a:	464b      	mov	r3, r9
 801950c:	4442      	add	r2, r8
 801950e:	4631      	mov	r1, r6
 8019510:	4628      	mov	r0, r5
 8019512:	47b8      	blx	r7
 8019514:	3001      	adds	r0, #1
 8019516:	d1c1      	bne.n	801949c <_printf_float+0x30c>
 8019518:	e686      	b.n	8019228 <_printf_float+0x98>
 801951a:	9a08      	ldr	r2, [sp, #32]
 801951c:	2a01      	cmp	r2, #1
 801951e:	dc01      	bgt.n	8019524 <_printf_float+0x394>
 8019520:	07db      	lsls	r3, r3, #31
 8019522:	d537      	bpl.n	8019594 <_printf_float+0x404>
 8019524:	2301      	movs	r3, #1
 8019526:	4642      	mov	r2, r8
 8019528:	4631      	mov	r1, r6
 801952a:	4628      	mov	r0, r5
 801952c:	47b8      	blx	r7
 801952e:	3001      	adds	r0, #1
 8019530:	f43f ae7a 	beq.w	8019228 <_printf_float+0x98>
 8019534:	4653      	mov	r3, sl
 8019536:	465a      	mov	r2, fp
 8019538:	4631      	mov	r1, r6
 801953a:	4628      	mov	r0, r5
 801953c:	47b8      	blx	r7
 801953e:	3001      	adds	r0, #1
 8019540:	f43f ae72 	beq.w	8019228 <_printf_float+0x98>
 8019544:	ed94 7b12 	vldr	d7, [r4, #72]	; 0x48
 8019548:	eeb5 7b40 	vcmp.f64	d7, #0.0
 801954c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8019550:	9b08      	ldr	r3, [sp, #32]
 8019552:	d01a      	beq.n	801958a <_printf_float+0x3fa>
 8019554:	3b01      	subs	r3, #1
 8019556:	f108 0201 	add.w	r2, r8, #1
 801955a:	4631      	mov	r1, r6
 801955c:	4628      	mov	r0, r5
 801955e:	47b8      	blx	r7
 8019560:	3001      	adds	r0, #1
 8019562:	d10e      	bne.n	8019582 <_printf_float+0x3f2>
 8019564:	e660      	b.n	8019228 <_printf_float+0x98>
 8019566:	2301      	movs	r3, #1
 8019568:	464a      	mov	r2, r9
 801956a:	4631      	mov	r1, r6
 801956c:	4628      	mov	r0, r5
 801956e:	47b8      	blx	r7
 8019570:	3001      	adds	r0, #1
 8019572:	f43f ae59 	beq.w	8019228 <_printf_float+0x98>
 8019576:	f108 0801 	add.w	r8, r8, #1
 801957a:	9b08      	ldr	r3, [sp, #32]
 801957c:	3b01      	subs	r3, #1
 801957e:	4543      	cmp	r3, r8
 8019580:	dcf1      	bgt.n	8019566 <_printf_float+0x3d6>
 8019582:	9b04      	ldr	r3, [sp, #16]
 8019584:	f104 0250 	add.w	r2, r4, #80	; 0x50
 8019588:	e6dd      	b.n	8019346 <_printf_float+0x1b6>
 801958a:	f04f 0800 	mov.w	r8, #0
 801958e:	f104 091a 	add.w	r9, r4, #26
 8019592:	e7f2      	b.n	801957a <_printf_float+0x3ea>
 8019594:	2301      	movs	r3, #1
 8019596:	4642      	mov	r2, r8
 8019598:	e7df      	b.n	801955a <_printf_float+0x3ca>
 801959a:	2301      	movs	r3, #1
 801959c:	464a      	mov	r2, r9
 801959e:	4631      	mov	r1, r6
 80195a0:	4628      	mov	r0, r5
 80195a2:	47b8      	blx	r7
 80195a4:	3001      	adds	r0, #1
 80195a6:	f43f ae3f 	beq.w	8019228 <_printf_float+0x98>
 80195aa:	f108 0801 	add.w	r8, r8, #1
 80195ae:	68e3      	ldr	r3, [r4, #12]
 80195b0:	9909      	ldr	r1, [sp, #36]	; 0x24
 80195b2:	1a5b      	subs	r3, r3, r1
 80195b4:	4543      	cmp	r3, r8
 80195b6:	dcf0      	bgt.n	801959a <_printf_float+0x40a>
 80195b8:	e6f9      	b.n	80193ae <_printf_float+0x21e>
 80195ba:	f04f 0800 	mov.w	r8, #0
 80195be:	f104 0919 	add.w	r9, r4, #25
 80195c2:	e7f4      	b.n	80195ae <_printf_float+0x41e>

080195c4 <_printf_common>:
 80195c4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80195c8:	4616      	mov	r6, r2
 80195ca:	4699      	mov	r9, r3
 80195cc:	688a      	ldr	r2, [r1, #8]
 80195ce:	690b      	ldr	r3, [r1, #16]
 80195d0:	f8dd 8020 	ldr.w	r8, [sp, #32]
 80195d4:	4293      	cmp	r3, r2
 80195d6:	bfb8      	it	lt
 80195d8:	4613      	movlt	r3, r2
 80195da:	6033      	str	r3, [r6, #0]
 80195dc:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 80195e0:	4607      	mov	r7, r0
 80195e2:	460c      	mov	r4, r1
 80195e4:	b10a      	cbz	r2, 80195ea <_printf_common+0x26>
 80195e6:	3301      	adds	r3, #1
 80195e8:	6033      	str	r3, [r6, #0]
 80195ea:	6823      	ldr	r3, [r4, #0]
 80195ec:	0699      	lsls	r1, r3, #26
 80195ee:	bf42      	ittt	mi
 80195f0:	6833      	ldrmi	r3, [r6, #0]
 80195f2:	3302      	addmi	r3, #2
 80195f4:	6033      	strmi	r3, [r6, #0]
 80195f6:	6825      	ldr	r5, [r4, #0]
 80195f8:	f015 0506 	ands.w	r5, r5, #6
 80195fc:	d106      	bne.n	801960c <_printf_common+0x48>
 80195fe:	f104 0a19 	add.w	sl, r4, #25
 8019602:	68e3      	ldr	r3, [r4, #12]
 8019604:	6832      	ldr	r2, [r6, #0]
 8019606:	1a9b      	subs	r3, r3, r2
 8019608:	42ab      	cmp	r3, r5
 801960a:	dc26      	bgt.n	801965a <_printf_common+0x96>
 801960c:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8019610:	1e13      	subs	r3, r2, #0
 8019612:	6822      	ldr	r2, [r4, #0]
 8019614:	bf18      	it	ne
 8019616:	2301      	movne	r3, #1
 8019618:	0692      	lsls	r2, r2, #26
 801961a:	d42b      	bmi.n	8019674 <_printf_common+0xb0>
 801961c:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8019620:	4649      	mov	r1, r9
 8019622:	4638      	mov	r0, r7
 8019624:	47c0      	blx	r8
 8019626:	3001      	adds	r0, #1
 8019628:	d01e      	beq.n	8019668 <_printf_common+0xa4>
 801962a:	6823      	ldr	r3, [r4, #0]
 801962c:	6922      	ldr	r2, [r4, #16]
 801962e:	f003 0306 	and.w	r3, r3, #6
 8019632:	2b04      	cmp	r3, #4
 8019634:	bf02      	ittt	eq
 8019636:	68e5      	ldreq	r5, [r4, #12]
 8019638:	6833      	ldreq	r3, [r6, #0]
 801963a:	1aed      	subeq	r5, r5, r3
 801963c:	68a3      	ldr	r3, [r4, #8]
 801963e:	bf0c      	ite	eq
 8019640:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8019644:	2500      	movne	r5, #0
 8019646:	4293      	cmp	r3, r2
 8019648:	bfc4      	itt	gt
 801964a:	1a9b      	subgt	r3, r3, r2
 801964c:	18ed      	addgt	r5, r5, r3
 801964e:	2600      	movs	r6, #0
 8019650:	341a      	adds	r4, #26
 8019652:	42b5      	cmp	r5, r6
 8019654:	d11a      	bne.n	801968c <_printf_common+0xc8>
 8019656:	2000      	movs	r0, #0
 8019658:	e008      	b.n	801966c <_printf_common+0xa8>
 801965a:	2301      	movs	r3, #1
 801965c:	4652      	mov	r2, sl
 801965e:	4649      	mov	r1, r9
 8019660:	4638      	mov	r0, r7
 8019662:	47c0      	blx	r8
 8019664:	3001      	adds	r0, #1
 8019666:	d103      	bne.n	8019670 <_printf_common+0xac>
 8019668:	f04f 30ff 	mov.w	r0, #4294967295
 801966c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8019670:	3501      	adds	r5, #1
 8019672:	e7c6      	b.n	8019602 <_printf_common+0x3e>
 8019674:	18e1      	adds	r1, r4, r3
 8019676:	1c5a      	adds	r2, r3, #1
 8019678:	2030      	movs	r0, #48	; 0x30
 801967a:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 801967e:	4422      	add	r2, r4
 8019680:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8019684:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8019688:	3302      	adds	r3, #2
 801968a:	e7c7      	b.n	801961c <_printf_common+0x58>
 801968c:	2301      	movs	r3, #1
 801968e:	4622      	mov	r2, r4
 8019690:	4649      	mov	r1, r9
 8019692:	4638      	mov	r0, r7
 8019694:	47c0      	blx	r8
 8019696:	3001      	adds	r0, #1
 8019698:	d0e6      	beq.n	8019668 <_printf_common+0xa4>
 801969a:	3601      	adds	r6, #1
 801969c:	e7d9      	b.n	8019652 <_printf_common+0x8e>
	...

080196a0 <_printf_i>:
 80196a0:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80196a4:	7e0f      	ldrb	r7, [r1, #24]
 80196a6:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 80196a8:	2f78      	cmp	r7, #120	; 0x78
 80196aa:	4691      	mov	r9, r2
 80196ac:	4680      	mov	r8, r0
 80196ae:	460c      	mov	r4, r1
 80196b0:	469a      	mov	sl, r3
 80196b2:	f101 0243 	add.w	r2, r1, #67	; 0x43
 80196b6:	d807      	bhi.n	80196c8 <_printf_i+0x28>
 80196b8:	2f62      	cmp	r7, #98	; 0x62
 80196ba:	d80a      	bhi.n	80196d2 <_printf_i+0x32>
 80196bc:	2f00      	cmp	r7, #0
 80196be:	f000 80d4 	beq.w	801986a <_printf_i+0x1ca>
 80196c2:	2f58      	cmp	r7, #88	; 0x58
 80196c4:	f000 80c0 	beq.w	8019848 <_printf_i+0x1a8>
 80196c8:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80196cc:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 80196d0:	e03a      	b.n	8019748 <_printf_i+0xa8>
 80196d2:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 80196d6:	2b15      	cmp	r3, #21
 80196d8:	d8f6      	bhi.n	80196c8 <_printf_i+0x28>
 80196da:	a101      	add	r1, pc, #4	; (adr r1, 80196e0 <_printf_i+0x40>)
 80196dc:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 80196e0:	08019739 	.word	0x08019739
 80196e4:	0801974d 	.word	0x0801974d
 80196e8:	080196c9 	.word	0x080196c9
 80196ec:	080196c9 	.word	0x080196c9
 80196f0:	080196c9 	.word	0x080196c9
 80196f4:	080196c9 	.word	0x080196c9
 80196f8:	0801974d 	.word	0x0801974d
 80196fc:	080196c9 	.word	0x080196c9
 8019700:	080196c9 	.word	0x080196c9
 8019704:	080196c9 	.word	0x080196c9
 8019708:	080196c9 	.word	0x080196c9
 801970c:	08019851 	.word	0x08019851
 8019710:	08019779 	.word	0x08019779
 8019714:	0801980b 	.word	0x0801980b
 8019718:	080196c9 	.word	0x080196c9
 801971c:	080196c9 	.word	0x080196c9
 8019720:	08019873 	.word	0x08019873
 8019724:	080196c9 	.word	0x080196c9
 8019728:	08019779 	.word	0x08019779
 801972c:	080196c9 	.word	0x080196c9
 8019730:	080196c9 	.word	0x080196c9
 8019734:	08019813 	.word	0x08019813
 8019738:	682b      	ldr	r3, [r5, #0]
 801973a:	1d1a      	adds	r2, r3, #4
 801973c:	681b      	ldr	r3, [r3, #0]
 801973e:	602a      	str	r2, [r5, #0]
 8019740:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8019744:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8019748:	2301      	movs	r3, #1
 801974a:	e09f      	b.n	801988c <_printf_i+0x1ec>
 801974c:	6820      	ldr	r0, [r4, #0]
 801974e:	682b      	ldr	r3, [r5, #0]
 8019750:	0607      	lsls	r7, r0, #24
 8019752:	f103 0104 	add.w	r1, r3, #4
 8019756:	6029      	str	r1, [r5, #0]
 8019758:	d501      	bpl.n	801975e <_printf_i+0xbe>
 801975a:	681e      	ldr	r6, [r3, #0]
 801975c:	e003      	b.n	8019766 <_printf_i+0xc6>
 801975e:	0646      	lsls	r6, r0, #25
 8019760:	d5fb      	bpl.n	801975a <_printf_i+0xba>
 8019762:	f9b3 6000 	ldrsh.w	r6, [r3]
 8019766:	2e00      	cmp	r6, #0
 8019768:	da03      	bge.n	8019772 <_printf_i+0xd2>
 801976a:	232d      	movs	r3, #45	; 0x2d
 801976c:	4276      	negs	r6, r6
 801976e:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8019772:	485a      	ldr	r0, [pc, #360]	; (80198dc <_printf_i+0x23c>)
 8019774:	230a      	movs	r3, #10
 8019776:	e012      	b.n	801979e <_printf_i+0xfe>
 8019778:	682b      	ldr	r3, [r5, #0]
 801977a:	6820      	ldr	r0, [r4, #0]
 801977c:	1d19      	adds	r1, r3, #4
 801977e:	6029      	str	r1, [r5, #0]
 8019780:	0605      	lsls	r5, r0, #24
 8019782:	d501      	bpl.n	8019788 <_printf_i+0xe8>
 8019784:	681e      	ldr	r6, [r3, #0]
 8019786:	e002      	b.n	801978e <_printf_i+0xee>
 8019788:	0641      	lsls	r1, r0, #25
 801978a:	d5fb      	bpl.n	8019784 <_printf_i+0xe4>
 801978c:	881e      	ldrh	r6, [r3, #0]
 801978e:	4853      	ldr	r0, [pc, #332]	; (80198dc <_printf_i+0x23c>)
 8019790:	2f6f      	cmp	r7, #111	; 0x6f
 8019792:	bf0c      	ite	eq
 8019794:	2308      	moveq	r3, #8
 8019796:	230a      	movne	r3, #10
 8019798:	2100      	movs	r1, #0
 801979a:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 801979e:	6865      	ldr	r5, [r4, #4]
 80197a0:	60a5      	str	r5, [r4, #8]
 80197a2:	2d00      	cmp	r5, #0
 80197a4:	bfa2      	ittt	ge
 80197a6:	6821      	ldrge	r1, [r4, #0]
 80197a8:	f021 0104 	bicge.w	r1, r1, #4
 80197ac:	6021      	strge	r1, [r4, #0]
 80197ae:	b90e      	cbnz	r6, 80197b4 <_printf_i+0x114>
 80197b0:	2d00      	cmp	r5, #0
 80197b2:	d04b      	beq.n	801984c <_printf_i+0x1ac>
 80197b4:	4615      	mov	r5, r2
 80197b6:	fbb6 f1f3 	udiv	r1, r6, r3
 80197ba:	fb03 6711 	mls	r7, r3, r1, r6
 80197be:	5dc7      	ldrb	r7, [r0, r7]
 80197c0:	f805 7d01 	strb.w	r7, [r5, #-1]!
 80197c4:	4637      	mov	r7, r6
 80197c6:	42bb      	cmp	r3, r7
 80197c8:	460e      	mov	r6, r1
 80197ca:	d9f4      	bls.n	80197b6 <_printf_i+0x116>
 80197cc:	2b08      	cmp	r3, #8
 80197ce:	d10b      	bne.n	80197e8 <_printf_i+0x148>
 80197d0:	6823      	ldr	r3, [r4, #0]
 80197d2:	07de      	lsls	r6, r3, #31
 80197d4:	d508      	bpl.n	80197e8 <_printf_i+0x148>
 80197d6:	6923      	ldr	r3, [r4, #16]
 80197d8:	6861      	ldr	r1, [r4, #4]
 80197da:	4299      	cmp	r1, r3
 80197dc:	bfde      	ittt	le
 80197de:	2330      	movle	r3, #48	; 0x30
 80197e0:	f805 3c01 	strble.w	r3, [r5, #-1]
 80197e4:	f105 35ff 	addle.w	r5, r5, #4294967295
 80197e8:	1b52      	subs	r2, r2, r5
 80197ea:	6122      	str	r2, [r4, #16]
 80197ec:	f8cd a000 	str.w	sl, [sp]
 80197f0:	464b      	mov	r3, r9
 80197f2:	aa03      	add	r2, sp, #12
 80197f4:	4621      	mov	r1, r4
 80197f6:	4640      	mov	r0, r8
 80197f8:	f7ff fee4 	bl	80195c4 <_printf_common>
 80197fc:	3001      	adds	r0, #1
 80197fe:	d14a      	bne.n	8019896 <_printf_i+0x1f6>
 8019800:	f04f 30ff 	mov.w	r0, #4294967295
 8019804:	b004      	add	sp, #16
 8019806:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801980a:	6823      	ldr	r3, [r4, #0]
 801980c:	f043 0320 	orr.w	r3, r3, #32
 8019810:	6023      	str	r3, [r4, #0]
 8019812:	4833      	ldr	r0, [pc, #204]	; (80198e0 <_printf_i+0x240>)
 8019814:	2778      	movs	r7, #120	; 0x78
 8019816:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 801981a:	6823      	ldr	r3, [r4, #0]
 801981c:	6829      	ldr	r1, [r5, #0]
 801981e:	061f      	lsls	r7, r3, #24
 8019820:	f851 6b04 	ldr.w	r6, [r1], #4
 8019824:	d402      	bmi.n	801982c <_printf_i+0x18c>
 8019826:	065f      	lsls	r7, r3, #25
 8019828:	bf48      	it	mi
 801982a:	b2b6      	uxthmi	r6, r6
 801982c:	07df      	lsls	r7, r3, #31
 801982e:	bf48      	it	mi
 8019830:	f043 0320 	orrmi.w	r3, r3, #32
 8019834:	6029      	str	r1, [r5, #0]
 8019836:	bf48      	it	mi
 8019838:	6023      	strmi	r3, [r4, #0]
 801983a:	b91e      	cbnz	r6, 8019844 <_printf_i+0x1a4>
 801983c:	6823      	ldr	r3, [r4, #0]
 801983e:	f023 0320 	bic.w	r3, r3, #32
 8019842:	6023      	str	r3, [r4, #0]
 8019844:	2310      	movs	r3, #16
 8019846:	e7a7      	b.n	8019798 <_printf_i+0xf8>
 8019848:	4824      	ldr	r0, [pc, #144]	; (80198dc <_printf_i+0x23c>)
 801984a:	e7e4      	b.n	8019816 <_printf_i+0x176>
 801984c:	4615      	mov	r5, r2
 801984e:	e7bd      	b.n	80197cc <_printf_i+0x12c>
 8019850:	682b      	ldr	r3, [r5, #0]
 8019852:	6826      	ldr	r6, [r4, #0]
 8019854:	6961      	ldr	r1, [r4, #20]
 8019856:	1d18      	adds	r0, r3, #4
 8019858:	6028      	str	r0, [r5, #0]
 801985a:	0635      	lsls	r5, r6, #24
 801985c:	681b      	ldr	r3, [r3, #0]
 801985e:	d501      	bpl.n	8019864 <_printf_i+0x1c4>
 8019860:	6019      	str	r1, [r3, #0]
 8019862:	e002      	b.n	801986a <_printf_i+0x1ca>
 8019864:	0670      	lsls	r0, r6, #25
 8019866:	d5fb      	bpl.n	8019860 <_printf_i+0x1c0>
 8019868:	8019      	strh	r1, [r3, #0]
 801986a:	2300      	movs	r3, #0
 801986c:	6123      	str	r3, [r4, #16]
 801986e:	4615      	mov	r5, r2
 8019870:	e7bc      	b.n	80197ec <_printf_i+0x14c>
 8019872:	682b      	ldr	r3, [r5, #0]
 8019874:	1d1a      	adds	r2, r3, #4
 8019876:	602a      	str	r2, [r5, #0]
 8019878:	681d      	ldr	r5, [r3, #0]
 801987a:	6862      	ldr	r2, [r4, #4]
 801987c:	2100      	movs	r1, #0
 801987e:	4628      	mov	r0, r5
 8019880:	f7e7 ff9e 	bl	80017c0 <memchr>
 8019884:	b108      	cbz	r0, 801988a <_printf_i+0x1ea>
 8019886:	1b40      	subs	r0, r0, r5
 8019888:	6060      	str	r0, [r4, #4]
 801988a:	6863      	ldr	r3, [r4, #4]
 801988c:	6123      	str	r3, [r4, #16]
 801988e:	2300      	movs	r3, #0
 8019890:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8019894:	e7aa      	b.n	80197ec <_printf_i+0x14c>
 8019896:	6923      	ldr	r3, [r4, #16]
 8019898:	462a      	mov	r2, r5
 801989a:	4649      	mov	r1, r9
 801989c:	4640      	mov	r0, r8
 801989e:	47d0      	blx	sl
 80198a0:	3001      	adds	r0, #1
 80198a2:	d0ad      	beq.n	8019800 <_printf_i+0x160>
 80198a4:	6823      	ldr	r3, [r4, #0]
 80198a6:	079b      	lsls	r3, r3, #30
 80198a8:	d413      	bmi.n	80198d2 <_printf_i+0x232>
 80198aa:	68e0      	ldr	r0, [r4, #12]
 80198ac:	9b03      	ldr	r3, [sp, #12]
 80198ae:	4298      	cmp	r0, r3
 80198b0:	bfb8      	it	lt
 80198b2:	4618      	movlt	r0, r3
 80198b4:	e7a6      	b.n	8019804 <_printf_i+0x164>
 80198b6:	2301      	movs	r3, #1
 80198b8:	4632      	mov	r2, r6
 80198ba:	4649      	mov	r1, r9
 80198bc:	4640      	mov	r0, r8
 80198be:	47d0      	blx	sl
 80198c0:	3001      	adds	r0, #1
 80198c2:	d09d      	beq.n	8019800 <_printf_i+0x160>
 80198c4:	3501      	adds	r5, #1
 80198c6:	68e3      	ldr	r3, [r4, #12]
 80198c8:	9903      	ldr	r1, [sp, #12]
 80198ca:	1a5b      	subs	r3, r3, r1
 80198cc:	42ab      	cmp	r3, r5
 80198ce:	dcf2      	bgt.n	80198b6 <_printf_i+0x216>
 80198d0:	e7eb      	b.n	80198aa <_printf_i+0x20a>
 80198d2:	2500      	movs	r5, #0
 80198d4:	f104 0619 	add.w	r6, r4, #25
 80198d8:	e7f5      	b.n	80198c6 <_printf_i+0x226>
 80198da:	bf00      	nop
 80198dc:	0801ee88 	.word	0x0801ee88
 80198e0:	0801ee99 	.word	0x0801ee99

080198e4 <std>:
 80198e4:	2300      	movs	r3, #0
 80198e6:	b510      	push	{r4, lr}
 80198e8:	4604      	mov	r4, r0
 80198ea:	e9c0 3300 	strd	r3, r3, [r0]
 80198ee:	e9c0 3304 	strd	r3, r3, [r0, #16]
 80198f2:	6083      	str	r3, [r0, #8]
 80198f4:	8181      	strh	r1, [r0, #12]
 80198f6:	6643      	str	r3, [r0, #100]	; 0x64
 80198f8:	81c2      	strh	r2, [r0, #14]
 80198fa:	6183      	str	r3, [r0, #24]
 80198fc:	4619      	mov	r1, r3
 80198fe:	2208      	movs	r2, #8
 8019900:	305c      	adds	r0, #92	; 0x5c
 8019902:	f000 fa07 	bl	8019d14 <memset>
 8019906:	4b0d      	ldr	r3, [pc, #52]	; (801993c <std+0x58>)
 8019908:	6263      	str	r3, [r4, #36]	; 0x24
 801990a:	4b0d      	ldr	r3, [pc, #52]	; (8019940 <std+0x5c>)
 801990c:	62a3      	str	r3, [r4, #40]	; 0x28
 801990e:	4b0d      	ldr	r3, [pc, #52]	; (8019944 <std+0x60>)
 8019910:	62e3      	str	r3, [r4, #44]	; 0x2c
 8019912:	4b0d      	ldr	r3, [pc, #52]	; (8019948 <std+0x64>)
 8019914:	6323      	str	r3, [r4, #48]	; 0x30
 8019916:	4b0d      	ldr	r3, [pc, #52]	; (801994c <std+0x68>)
 8019918:	6224      	str	r4, [r4, #32]
 801991a:	429c      	cmp	r4, r3
 801991c:	d006      	beq.n	801992c <std+0x48>
 801991e:	f103 0268 	add.w	r2, r3, #104	; 0x68
 8019922:	4294      	cmp	r4, r2
 8019924:	d002      	beq.n	801992c <std+0x48>
 8019926:	33d0      	adds	r3, #208	; 0xd0
 8019928:	429c      	cmp	r4, r3
 801992a:	d105      	bne.n	8019938 <std+0x54>
 801992c:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8019930:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8019934:	f000 ba64 	b.w	8019e00 <__retarget_lock_init_recursive>
 8019938:	bd10      	pop	{r4, pc}
 801993a:	bf00      	nop
 801993c:	08019b45 	.word	0x08019b45
 8019940:	08019b67 	.word	0x08019b67
 8019944:	08019b9f 	.word	0x08019b9f
 8019948:	08019bc3 	.word	0x08019bc3
 801994c:	200071a0 	.word	0x200071a0

08019950 <stdio_exit_handler>:
 8019950:	4a02      	ldr	r2, [pc, #8]	; (801995c <stdio_exit_handler+0xc>)
 8019952:	4903      	ldr	r1, [pc, #12]	; (8019960 <stdio_exit_handler+0x10>)
 8019954:	4803      	ldr	r0, [pc, #12]	; (8019964 <stdio_exit_handler+0x14>)
 8019956:	f000 b869 	b.w	8019a2c <_fwalk_sglue>
 801995a:	bf00      	nop
 801995c:	20000064 	.word	0x20000064
 8019960:	0801b6d5 	.word	0x0801b6d5
 8019964:	20000070 	.word	0x20000070

08019968 <cleanup_stdio>:
 8019968:	6841      	ldr	r1, [r0, #4]
 801996a:	4b0c      	ldr	r3, [pc, #48]	; (801999c <cleanup_stdio+0x34>)
 801996c:	4299      	cmp	r1, r3
 801996e:	b510      	push	{r4, lr}
 8019970:	4604      	mov	r4, r0
 8019972:	d001      	beq.n	8019978 <cleanup_stdio+0x10>
 8019974:	f001 feae 	bl	801b6d4 <_fflush_r>
 8019978:	68a1      	ldr	r1, [r4, #8]
 801997a:	4b09      	ldr	r3, [pc, #36]	; (80199a0 <cleanup_stdio+0x38>)
 801997c:	4299      	cmp	r1, r3
 801997e:	d002      	beq.n	8019986 <cleanup_stdio+0x1e>
 8019980:	4620      	mov	r0, r4
 8019982:	f001 fea7 	bl	801b6d4 <_fflush_r>
 8019986:	68e1      	ldr	r1, [r4, #12]
 8019988:	4b06      	ldr	r3, [pc, #24]	; (80199a4 <cleanup_stdio+0x3c>)
 801998a:	4299      	cmp	r1, r3
 801998c:	d004      	beq.n	8019998 <cleanup_stdio+0x30>
 801998e:	4620      	mov	r0, r4
 8019990:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8019994:	f001 be9e 	b.w	801b6d4 <_fflush_r>
 8019998:	bd10      	pop	{r4, pc}
 801999a:	bf00      	nop
 801999c:	200071a0 	.word	0x200071a0
 80199a0:	20007208 	.word	0x20007208
 80199a4:	20007270 	.word	0x20007270

080199a8 <global_stdio_init.part.0>:
 80199a8:	b510      	push	{r4, lr}
 80199aa:	4b0b      	ldr	r3, [pc, #44]	; (80199d8 <global_stdio_init.part.0+0x30>)
 80199ac:	4c0b      	ldr	r4, [pc, #44]	; (80199dc <global_stdio_init.part.0+0x34>)
 80199ae:	4a0c      	ldr	r2, [pc, #48]	; (80199e0 <global_stdio_init.part.0+0x38>)
 80199b0:	601a      	str	r2, [r3, #0]
 80199b2:	4620      	mov	r0, r4
 80199b4:	2200      	movs	r2, #0
 80199b6:	2104      	movs	r1, #4
 80199b8:	f7ff ff94 	bl	80198e4 <std>
 80199bc:	f104 0068 	add.w	r0, r4, #104	; 0x68
 80199c0:	2201      	movs	r2, #1
 80199c2:	2109      	movs	r1, #9
 80199c4:	f7ff ff8e 	bl	80198e4 <std>
 80199c8:	f104 00d0 	add.w	r0, r4, #208	; 0xd0
 80199cc:	2202      	movs	r2, #2
 80199ce:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80199d2:	2112      	movs	r1, #18
 80199d4:	f7ff bf86 	b.w	80198e4 <std>
 80199d8:	200072d8 	.word	0x200072d8
 80199dc:	200071a0 	.word	0x200071a0
 80199e0:	08019951 	.word	0x08019951

080199e4 <__sfp_lock_acquire>:
 80199e4:	4801      	ldr	r0, [pc, #4]	; (80199ec <__sfp_lock_acquire+0x8>)
 80199e6:	f000 ba0c 	b.w	8019e02 <__retarget_lock_acquire_recursive>
 80199ea:	bf00      	nop
 80199ec:	200072e1 	.word	0x200072e1

080199f0 <__sfp_lock_release>:
 80199f0:	4801      	ldr	r0, [pc, #4]	; (80199f8 <__sfp_lock_release+0x8>)
 80199f2:	f000 ba07 	b.w	8019e04 <__retarget_lock_release_recursive>
 80199f6:	bf00      	nop
 80199f8:	200072e1 	.word	0x200072e1

080199fc <__sinit>:
 80199fc:	b510      	push	{r4, lr}
 80199fe:	4604      	mov	r4, r0
 8019a00:	f7ff fff0 	bl	80199e4 <__sfp_lock_acquire>
 8019a04:	6a23      	ldr	r3, [r4, #32]
 8019a06:	b11b      	cbz	r3, 8019a10 <__sinit+0x14>
 8019a08:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8019a0c:	f7ff bff0 	b.w	80199f0 <__sfp_lock_release>
 8019a10:	4b04      	ldr	r3, [pc, #16]	; (8019a24 <__sinit+0x28>)
 8019a12:	6223      	str	r3, [r4, #32]
 8019a14:	4b04      	ldr	r3, [pc, #16]	; (8019a28 <__sinit+0x2c>)
 8019a16:	681b      	ldr	r3, [r3, #0]
 8019a18:	2b00      	cmp	r3, #0
 8019a1a:	d1f5      	bne.n	8019a08 <__sinit+0xc>
 8019a1c:	f7ff ffc4 	bl	80199a8 <global_stdio_init.part.0>
 8019a20:	e7f2      	b.n	8019a08 <__sinit+0xc>
 8019a22:	bf00      	nop
 8019a24:	08019969 	.word	0x08019969
 8019a28:	200072d8 	.word	0x200072d8

08019a2c <_fwalk_sglue>:
 8019a2c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8019a30:	4607      	mov	r7, r0
 8019a32:	4688      	mov	r8, r1
 8019a34:	4614      	mov	r4, r2
 8019a36:	2600      	movs	r6, #0
 8019a38:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8019a3c:	f1b9 0901 	subs.w	r9, r9, #1
 8019a40:	d505      	bpl.n	8019a4e <_fwalk_sglue+0x22>
 8019a42:	6824      	ldr	r4, [r4, #0]
 8019a44:	2c00      	cmp	r4, #0
 8019a46:	d1f7      	bne.n	8019a38 <_fwalk_sglue+0xc>
 8019a48:	4630      	mov	r0, r6
 8019a4a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8019a4e:	89ab      	ldrh	r3, [r5, #12]
 8019a50:	2b01      	cmp	r3, #1
 8019a52:	d907      	bls.n	8019a64 <_fwalk_sglue+0x38>
 8019a54:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8019a58:	3301      	adds	r3, #1
 8019a5a:	d003      	beq.n	8019a64 <_fwalk_sglue+0x38>
 8019a5c:	4629      	mov	r1, r5
 8019a5e:	4638      	mov	r0, r7
 8019a60:	47c0      	blx	r8
 8019a62:	4306      	orrs	r6, r0
 8019a64:	3568      	adds	r5, #104	; 0x68
 8019a66:	e7e9      	b.n	8019a3c <_fwalk_sglue+0x10>

08019a68 <iprintf>:
 8019a68:	b40f      	push	{r0, r1, r2, r3}
 8019a6a:	b507      	push	{r0, r1, r2, lr}
 8019a6c:	4906      	ldr	r1, [pc, #24]	; (8019a88 <iprintf+0x20>)
 8019a6e:	ab04      	add	r3, sp, #16
 8019a70:	6808      	ldr	r0, [r1, #0]
 8019a72:	f853 2b04 	ldr.w	r2, [r3], #4
 8019a76:	6881      	ldr	r1, [r0, #8]
 8019a78:	9301      	str	r3, [sp, #4]
 8019a7a:	f001 fc8b 	bl	801b394 <_vfiprintf_r>
 8019a7e:	b003      	add	sp, #12
 8019a80:	f85d eb04 	ldr.w	lr, [sp], #4
 8019a84:	b004      	add	sp, #16
 8019a86:	4770      	bx	lr
 8019a88:	200000bc 	.word	0x200000bc

08019a8c <_puts_r>:
 8019a8c:	6a03      	ldr	r3, [r0, #32]
 8019a8e:	b570      	push	{r4, r5, r6, lr}
 8019a90:	6884      	ldr	r4, [r0, #8]
 8019a92:	4605      	mov	r5, r0
 8019a94:	460e      	mov	r6, r1
 8019a96:	b90b      	cbnz	r3, 8019a9c <_puts_r+0x10>
 8019a98:	f7ff ffb0 	bl	80199fc <__sinit>
 8019a9c:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8019a9e:	07db      	lsls	r3, r3, #31
 8019aa0:	d405      	bmi.n	8019aae <_puts_r+0x22>
 8019aa2:	89a3      	ldrh	r3, [r4, #12]
 8019aa4:	0598      	lsls	r0, r3, #22
 8019aa6:	d402      	bmi.n	8019aae <_puts_r+0x22>
 8019aa8:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8019aaa:	f000 f9aa 	bl	8019e02 <__retarget_lock_acquire_recursive>
 8019aae:	89a3      	ldrh	r3, [r4, #12]
 8019ab0:	0719      	lsls	r1, r3, #28
 8019ab2:	d513      	bpl.n	8019adc <_puts_r+0x50>
 8019ab4:	6923      	ldr	r3, [r4, #16]
 8019ab6:	b18b      	cbz	r3, 8019adc <_puts_r+0x50>
 8019ab8:	3e01      	subs	r6, #1
 8019aba:	68a3      	ldr	r3, [r4, #8]
 8019abc:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 8019ac0:	3b01      	subs	r3, #1
 8019ac2:	60a3      	str	r3, [r4, #8]
 8019ac4:	b9e9      	cbnz	r1, 8019b02 <_puts_r+0x76>
 8019ac6:	2b00      	cmp	r3, #0
 8019ac8:	da2e      	bge.n	8019b28 <_puts_r+0x9c>
 8019aca:	4622      	mov	r2, r4
 8019acc:	210a      	movs	r1, #10
 8019ace:	4628      	mov	r0, r5
 8019ad0:	f000 f87b 	bl	8019bca <__swbuf_r>
 8019ad4:	3001      	adds	r0, #1
 8019ad6:	d007      	beq.n	8019ae8 <_puts_r+0x5c>
 8019ad8:	250a      	movs	r5, #10
 8019ada:	e007      	b.n	8019aec <_puts_r+0x60>
 8019adc:	4621      	mov	r1, r4
 8019ade:	4628      	mov	r0, r5
 8019ae0:	f000 f8b0 	bl	8019c44 <__swsetup_r>
 8019ae4:	2800      	cmp	r0, #0
 8019ae6:	d0e7      	beq.n	8019ab8 <_puts_r+0x2c>
 8019ae8:	f04f 35ff 	mov.w	r5, #4294967295
 8019aec:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8019aee:	07da      	lsls	r2, r3, #31
 8019af0:	d405      	bmi.n	8019afe <_puts_r+0x72>
 8019af2:	89a3      	ldrh	r3, [r4, #12]
 8019af4:	059b      	lsls	r3, r3, #22
 8019af6:	d402      	bmi.n	8019afe <_puts_r+0x72>
 8019af8:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8019afa:	f000 f983 	bl	8019e04 <__retarget_lock_release_recursive>
 8019afe:	4628      	mov	r0, r5
 8019b00:	bd70      	pop	{r4, r5, r6, pc}
 8019b02:	2b00      	cmp	r3, #0
 8019b04:	da04      	bge.n	8019b10 <_puts_r+0x84>
 8019b06:	69a2      	ldr	r2, [r4, #24]
 8019b08:	429a      	cmp	r2, r3
 8019b0a:	dc06      	bgt.n	8019b1a <_puts_r+0x8e>
 8019b0c:	290a      	cmp	r1, #10
 8019b0e:	d004      	beq.n	8019b1a <_puts_r+0x8e>
 8019b10:	6823      	ldr	r3, [r4, #0]
 8019b12:	1c5a      	adds	r2, r3, #1
 8019b14:	6022      	str	r2, [r4, #0]
 8019b16:	7019      	strb	r1, [r3, #0]
 8019b18:	e7cf      	b.n	8019aba <_puts_r+0x2e>
 8019b1a:	4622      	mov	r2, r4
 8019b1c:	4628      	mov	r0, r5
 8019b1e:	f000 f854 	bl	8019bca <__swbuf_r>
 8019b22:	3001      	adds	r0, #1
 8019b24:	d1c9      	bne.n	8019aba <_puts_r+0x2e>
 8019b26:	e7df      	b.n	8019ae8 <_puts_r+0x5c>
 8019b28:	6823      	ldr	r3, [r4, #0]
 8019b2a:	250a      	movs	r5, #10
 8019b2c:	1c5a      	adds	r2, r3, #1
 8019b2e:	6022      	str	r2, [r4, #0]
 8019b30:	701d      	strb	r5, [r3, #0]
 8019b32:	e7db      	b.n	8019aec <_puts_r+0x60>

08019b34 <puts>:
 8019b34:	4b02      	ldr	r3, [pc, #8]	; (8019b40 <puts+0xc>)
 8019b36:	4601      	mov	r1, r0
 8019b38:	6818      	ldr	r0, [r3, #0]
 8019b3a:	f7ff bfa7 	b.w	8019a8c <_puts_r>
 8019b3e:	bf00      	nop
 8019b40:	200000bc 	.word	0x200000bc

08019b44 <__sread>:
 8019b44:	b510      	push	{r4, lr}
 8019b46:	460c      	mov	r4, r1
 8019b48:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8019b4c:	f000 f910 	bl	8019d70 <_read_r>
 8019b50:	2800      	cmp	r0, #0
 8019b52:	bfab      	itete	ge
 8019b54:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8019b56:	89a3      	ldrhlt	r3, [r4, #12]
 8019b58:	181b      	addge	r3, r3, r0
 8019b5a:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8019b5e:	bfac      	ite	ge
 8019b60:	6563      	strge	r3, [r4, #84]	; 0x54
 8019b62:	81a3      	strhlt	r3, [r4, #12]
 8019b64:	bd10      	pop	{r4, pc}

08019b66 <__swrite>:
 8019b66:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8019b6a:	461f      	mov	r7, r3
 8019b6c:	898b      	ldrh	r3, [r1, #12]
 8019b6e:	05db      	lsls	r3, r3, #23
 8019b70:	4605      	mov	r5, r0
 8019b72:	460c      	mov	r4, r1
 8019b74:	4616      	mov	r6, r2
 8019b76:	d505      	bpl.n	8019b84 <__swrite+0x1e>
 8019b78:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8019b7c:	2302      	movs	r3, #2
 8019b7e:	2200      	movs	r2, #0
 8019b80:	f000 f8e4 	bl	8019d4c <_lseek_r>
 8019b84:	89a3      	ldrh	r3, [r4, #12]
 8019b86:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8019b8a:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8019b8e:	81a3      	strh	r3, [r4, #12]
 8019b90:	4632      	mov	r2, r6
 8019b92:	463b      	mov	r3, r7
 8019b94:	4628      	mov	r0, r5
 8019b96:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8019b9a:	f000 b8fb 	b.w	8019d94 <_write_r>

08019b9e <__sseek>:
 8019b9e:	b510      	push	{r4, lr}
 8019ba0:	460c      	mov	r4, r1
 8019ba2:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8019ba6:	f000 f8d1 	bl	8019d4c <_lseek_r>
 8019baa:	1c43      	adds	r3, r0, #1
 8019bac:	89a3      	ldrh	r3, [r4, #12]
 8019bae:	bf15      	itete	ne
 8019bb0:	6560      	strne	r0, [r4, #84]	; 0x54
 8019bb2:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8019bb6:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8019bba:	81a3      	strheq	r3, [r4, #12]
 8019bbc:	bf18      	it	ne
 8019bbe:	81a3      	strhne	r3, [r4, #12]
 8019bc0:	bd10      	pop	{r4, pc}

08019bc2 <__sclose>:
 8019bc2:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8019bc6:	f000 b8b1 	b.w	8019d2c <_close_r>

08019bca <__swbuf_r>:
 8019bca:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8019bcc:	460e      	mov	r6, r1
 8019bce:	4614      	mov	r4, r2
 8019bd0:	4605      	mov	r5, r0
 8019bd2:	b118      	cbz	r0, 8019bdc <__swbuf_r+0x12>
 8019bd4:	6a03      	ldr	r3, [r0, #32]
 8019bd6:	b90b      	cbnz	r3, 8019bdc <__swbuf_r+0x12>
 8019bd8:	f7ff ff10 	bl	80199fc <__sinit>
 8019bdc:	69a3      	ldr	r3, [r4, #24]
 8019bde:	60a3      	str	r3, [r4, #8]
 8019be0:	89a3      	ldrh	r3, [r4, #12]
 8019be2:	071a      	lsls	r2, r3, #28
 8019be4:	d525      	bpl.n	8019c32 <__swbuf_r+0x68>
 8019be6:	6923      	ldr	r3, [r4, #16]
 8019be8:	b31b      	cbz	r3, 8019c32 <__swbuf_r+0x68>
 8019bea:	6823      	ldr	r3, [r4, #0]
 8019bec:	6922      	ldr	r2, [r4, #16]
 8019bee:	1a98      	subs	r0, r3, r2
 8019bf0:	6963      	ldr	r3, [r4, #20]
 8019bf2:	b2f6      	uxtb	r6, r6
 8019bf4:	4283      	cmp	r3, r0
 8019bf6:	4637      	mov	r7, r6
 8019bf8:	dc04      	bgt.n	8019c04 <__swbuf_r+0x3a>
 8019bfa:	4621      	mov	r1, r4
 8019bfc:	4628      	mov	r0, r5
 8019bfe:	f001 fd69 	bl	801b6d4 <_fflush_r>
 8019c02:	b9e0      	cbnz	r0, 8019c3e <__swbuf_r+0x74>
 8019c04:	68a3      	ldr	r3, [r4, #8]
 8019c06:	3b01      	subs	r3, #1
 8019c08:	60a3      	str	r3, [r4, #8]
 8019c0a:	6823      	ldr	r3, [r4, #0]
 8019c0c:	1c5a      	adds	r2, r3, #1
 8019c0e:	6022      	str	r2, [r4, #0]
 8019c10:	701e      	strb	r6, [r3, #0]
 8019c12:	6962      	ldr	r2, [r4, #20]
 8019c14:	1c43      	adds	r3, r0, #1
 8019c16:	429a      	cmp	r2, r3
 8019c18:	d004      	beq.n	8019c24 <__swbuf_r+0x5a>
 8019c1a:	89a3      	ldrh	r3, [r4, #12]
 8019c1c:	07db      	lsls	r3, r3, #31
 8019c1e:	d506      	bpl.n	8019c2e <__swbuf_r+0x64>
 8019c20:	2e0a      	cmp	r6, #10
 8019c22:	d104      	bne.n	8019c2e <__swbuf_r+0x64>
 8019c24:	4621      	mov	r1, r4
 8019c26:	4628      	mov	r0, r5
 8019c28:	f001 fd54 	bl	801b6d4 <_fflush_r>
 8019c2c:	b938      	cbnz	r0, 8019c3e <__swbuf_r+0x74>
 8019c2e:	4638      	mov	r0, r7
 8019c30:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8019c32:	4621      	mov	r1, r4
 8019c34:	4628      	mov	r0, r5
 8019c36:	f000 f805 	bl	8019c44 <__swsetup_r>
 8019c3a:	2800      	cmp	r0, #0
 8019c3c:	d0d5      	beq.n	8019bea <__swbuf_r+0x20>
 8019c3e:	f04f 37ff 	mov.w	r7, #4294967295
 8019c42:	e7f4      	b.n	8019c2e <__swbuf_r+0x64>

08019c44 <__swsetup_r>:
 8019c44:	b538      	push	{r3, r4, r5, lr}
 8019c46:	4b2a      	ldr	r3, [pc, #168]	; (8019cf0 <__swsetup_r+0xac>)
 8019c48:	4605      	mov	r5, r0
 8019c4a:	6818      	ldr	r0, [r3, #0]
 8019c4c:	460c      	mov	r4, r1
 8019c4e:	b118      	cbz	r0, 8019c58 <__swsetup_r+0x14>
 8019c50:	6a03      	ldr	r3, [r0, #32]
 8019c52:	b90b      	cbnz	r3, 8019c58 <__swsetup_r+0x14>
 8019c54:	f7ff fed2 	bl	80199fc <__sinit>
 8019c58:	89a3      	ldrh	r3, [r4, #12]
 8019c5a:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8019c5e:	0718      	lsls	r0, r3, #28
 8019c60:	d422      	bmi.n	8019ca8 <__swsetup_r+0x64>
 8019c62:	06d9      	lsls	r1, r3, #27
 8019c64:	d407      	bmi.n	8019c76 <__swsetup_r+0x32>
 8019c66:	2309      	movs	r3, #9
 8019c68:	602b      	str	r3, [r5, #0]
 8019c6a:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8019c6e:	81a3      	strh	r3, [r4, #12]
 8019c70:	f04f 30ff 	mov.w	r0, #4294967295
 8019c74:	e034      	b.n	8019ce0 <__swsetup_r+0x9c>
 8019c76:	0758      	lsls	r0, r3, #29
 8019c78:	d512      	bpl.n	8019ca0 <__swsetup_r+0x5c>
 8019c7a:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8019c7c:	b141      	cbz	r1, 8019c90 <__swsetup_r+0x4c>
 8019c7e:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8019c82:	4299      	cmp	r1, r3
 8019c84:	d002      	beq.n	8019c8c <__swsetup_r+0x48>
 8019c86:	4628      	mov	r0, r5
 8019c88:	f000 fede 	bl	801aa48 <_free_r>
 8019c8c:	2300      	movs	r3, #0
 8019c8e:	6363      	str	r3, [r4, #52]	; 0x34
 8019c90:	89a3      	ldrh	r3, [r4, #12]
 8019c92:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8019c96:	81a3      	strh	r3, [r4, #12]
 8019c98:	2300      	movs	r3, #0
 8019c9a:	6063      	str	r3, [r4, #4]
 8019c9c:	6923      	ldr	r3, [r4, #16]
 8019c9e:	6023      	str	r3, [r4, #0]
 8019ca0:	89a3      	ldrh	r3, [r4, #12]
 8019ca2:	f043 0308 	orr.w	r3, r3, #8
 8019ca6:	81a3      	strh	r3, [r4, #12]
 8019ca8:	6923      	ldr	r3, [r4, #16]
 8019caa:	b94b      	cbnz	r3, 8019cc0 <__swsetup_r+0x7c>
 8019cac:	89a3      	ldrh	r3, [r4, #12]
 8019cae:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8019cb2:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8019cb6:	d003      	beq.n	8019cc0 <__swsetup_r+0x7c>
 8019cb8:	4621      	mov	r1, r4
 8019cba:	4628      	mov	r0, r5
 8019cbc:	f001 fd6a 	bl	801b794 <__smakebuf_r>
 8019cc0:	89a0      	ldrh	r0, [r4, #12]
 8019cc2:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8019cc6:	f010 0301 	ands.w	r3, r0, #1
 8019cca:	d00a      	beq.n	8019ce2 <__swsetup_r+0x9e>
 8019ccc:	2300      	movs	r3, #0
 8019cce:	60a3      	str	r3, [r4, #8]
 8019cd0:	6963      	ldr	r3, [r4, #20]
 8019cd2:	425b      	negs	r3, r3
 8019cd4:	61a3      	str	r3, [r4, #24]
 8019cd6:	6923      	ldr	r3, [r4, #16]
 8019cd8:	b943      	cbnz	r3, 8019cec <__swsetup_r+0xa8>
 8019cda:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8019cde:	d1c4      	bne.n	8019c6a <__swsetup_r+0x26>
 8019ce0:	bd38      	pop	{r3, r4, r5, pc}
 8019ce2:	0781      	lsls	r1, r0, #30
 8019ce4:	bf58      	it	pl
 8019ce6:	6963      	ldrpl	r3, [r4, #20]
 8019ce8:	60a3      	str	r3, [r4, #8]
 8019cea:	e7f4      	b.n	8019cd6 <__swsetup_r+0x92>
 8019cec:	2000      	movs	r0, #0
 8019cee:	e7f7      	b.n	8019ce0 <__swsetup_r+0x9c>
 8019cf0:	200000bc 	.word	0x200000bc

08019cf4 <memcmp>:
 8019cf4:	b510      	push	{r4, lr}
 8019cf6:	3901      	subs	r1, #1
 8019cf8:	4402      	add	r2, r0
 8019cfa:	4290      	cmp	r0, r2
 8019cfc:	d101      	bne.n	8019d02 <memcmp+0xe>
 8019cfe:	2000      	movs	r0, #0
 8019d00:	e005      	b.n	8019d0e <memcmp+0x1a>
 8019d02:	7803      	ldrb	r3, [r0, #0]
 8019d04:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 8019d08:	42a3      	cmp	r3, r4
 8019d0a:	d001      	beq.n	8019d10 <memcmp+0x1c>
 8019d0c:	1b18      	subs	r0, r3, r4
 8019d0e:	bd10      	pop	{r4, pc}
 8019d10:	3001      	adds	r0, #1
 8019d12:	e7f2      	b.n	8019cfa <memcmp+0x6>

08019d14 <memset>:
 8019d14:	4402      	add	r2, r0
 8019d16:	4603      	mov	r3, r0
 8019d18:	4293      	cmp	r3, r2
 8019d1a:	d100      	bne.n	8019d1e <memset+0xa>
 8019d1c:	4770      	bx	lr
 8019d1e:	f803 1b01 	strb.w	r1, [r3], #1
 8019d22:	e7f9      	b.n	8019d18 <memset+0x4>

08019d24 <_localeconv_r>:
 8019d24:	4800      	ldr	r0, [pc, #0]	; (8019d28 <_localeconv_r+0x4>)
 8019d26:	4770      	bx	lr
 8019d28:	200001b0 	.word	0x200001b0

08019d2c <_close_r>:
 8019d2c:	b538      	push	{r3, r4, r5, lr}
 8019d2e:	4d06      	ldr	r5, [pc, #24]	; (8019d48 <_close_r+0x1c>)
 8019d30:	2300      	movs	r3, #0
 8019d32:	4604      	mov	r4, r0
 8019d34:	4608      	mov	r0, r1
 8019d36:	602b      	str	r3, [r5, #0]
 8019d38:	f7e9 fa71 	bl	800321e <_close>
 8019d3c:	1c43      	adds	r3, r0, #1
 8019d3e:	d102      	bne.n	8019d46 <_close_r+0x1a>
 8019d40:	682b      	ldr	r3, [r5, #0]
 8019d42:	b103      	cbz	r3, 8019d46 <_close_r+0x1a>
 8019d44:	6023      	str	r3, [r4, #0]
 8019d46:	bd38      	pop	{r3, r4, r5, pc}
 8019d48:	200072dc 	.word	0x200072dc

08019d4c <_lseek_r>:
 8019d4c:	b538      	push	{r3, r4, r5, lr}
 8019d4e:	4d07      	ldr	r5, [pc, #28]	; (8019d6c <_lseek_r+0x20>)
 8019d50:	4604      	mov	r4, r0
 8019d52:	4608      	mov	r0, r1
 8019d54:	4611      	mov	r1, r2
 8019d56:	2200      	movs	r2, #0
 8019d58:	602a      	str	r2, [r5, #0]
 8019d5a:	461a      	mov	r2, r3
 8019d5c:	f7e9 fa86 	bl	800326c <_lseek>
 8019d60:	1c43      	adds	r3, r0, #1
 8019d62:	d102      	bne.n	8019d6a <_lseek_r+0x1e>
 8019d64:	682b      	ldr	r3, [r5, #0]
 8019d66:	b103      	cbz	r3, 8019d6a <_lseek_r+0x1e>
 8019d68:	6023      	str	r3, [r4, #0]
 8019d6a:	bd38      	pop	{r3, r4, r5, pc}
 8019d6c:	200072dc 	.word	0x200072dc

08019d70 <_read_r>:
 8019d70:	b538      	push	{r3, r4, r5, lr}
 8019d72:	4d07      	ldr	r5, [pc, #28]	; (8019d90 <_read_r+0x20>)
 8019d74:	4604      	mov	r4, r0
 8019d76:	4608      	mov	r0, r1
 8019d78:	4611      	mov	r1, r2
 8019d7a:	2200      	movs	r2, #0
 8019d7c:	602a      	str	r2, [r5, #0]
 8019d7e:	461a      	mov	r2, r3
 8019d80:	f7e9 fa14 	bl	80031ac <_read>
 8019d84:	1c43      	adds	r3, r0, #1
 8019d86:	d102      	bne.n	8019d8e <_read_r+0x1e>
 8019d88:	682b      	ldr	r3, [r5, #0]
 8019d8a:	b103      	cbz	r3, 8019d8e <_read_r+0x1e>
 8019d8c:	6023      	str	r3, [r4, #0]
 8019d8e:	bd38      	pop	{r3, r4, r5, pc}
 8019d90:	200072dc 	.word	0x200072dc

08019d94 <_write_r>:
 8019d94:	b538      	push	{r3, r4, r5, lr}
 8019d96:	4d07      	ldr	r5, [pc, #28]	; (8019db4 <_write_r+0x20>)
 8019d98:	4604      	mov	r4, r0
 8019d9a:	4608      	mov	r0, r1
 8019d9c:	4611      	mov	r1, r2
 8019d9e:	2200      	movs	r2, #0
 8019da0:	602a      	str	r2, [r5, #0]
 8019da2:	461a      	mov	r2, r3
 8019da4:	f7e9 fa1f 	bl	80031e6 <_write>
 8019da8:	1c43      	adds	r3, r0, #1
 8019daa:	d102      	bne.n	8019db2 <_write_r+0x1e>
 8019dac:	682b      	ldr	r3, [r5, #0]
 8019dae:	b103      	cbz	r3, 8019db2 <_write_r+0x1e>
 8019db0:	6023      	str	r3, [r4, #0]
 8019db2:	bd38      	pop	{r3, r4, r5, pc}
 8019db4:	200072dc 	.word	0x200072dc

08019db8 <__libc_init_array>:
 8019db8:	b570      	push	{r4, r5, r6, lr}
 8019dba:	4d0d      	ldr	r5, [pc, #52]	; (8019df0 <__libc_init_array+0x38>)
 8019dbc:	4c0d      	ldr	r4, [pc, #52]	; (8019df4 <__libc_init_array+0x3c>)
 8019dbe:	1b64      	subs	r4, r4, r5
 8019dc0:	10a4      	asrs	r4, r4, #2
 8019dc2:	2600      	movs	r6, #0
 8019dc4:	42a6      	cmp	r6, r4
 8019dc6:	d109      	bne.n	8019ddc <__libc_init_array+0x24>
 8019dc8:	4d0b      	ldr	r5, [pc, #44]	; (8019df8 <__libc_init_array+0x40>)
 8019dca:	4c0c      	ldr	r4, [pc, #48]	; (8019dfc <__libc_init_array+0x44>)
 8019dcc:	f001 fdd0 	bl	801b970 <_init>
 8019dd0:	1b64      	subs	r4, r4, r5
 8019dd2:	10a4      	asrs	r4, r4, #2
 8019dd4:	2600      	movs	r6, #0
 8019dd6:	42a6      	cmp	r6, r4
 8019dd8:	d105      	bne.n	8019de6 <__libc_init_array+0x2e>
 8019dda:	bd70      	pop	{r4, r5, r6, pc}
 8019ddc:	f855 3b04 	ldr.w	r3, [r5], #4
 8019de0:	4798      	blx	r3
 8019de2:	3601      	adds	r6, #1
 8019de4:	e7ee      	b.n	8019dc4 <__libc_init_array+0xc>
 8019de6:	f855 3b04 	ldr.w	r3, [r5], #4
 8019dea:	4798      	blx	r3
 8019dec:	3601      	adds	r6, #1
 8019dee:	e7f2      	b.n	8019dd6 <__libc_init_array+0x1e>
 8019df0:	0801f0d8 	.word	0x0801f0d8
 8019df4:	0801f0d8 	.word	0x0801f0d8
 8019df8:	0801f0d8 	.word	0x0801f0d8
 8019dfc:	0801f0dc 	.word	0x0801f0dc

08019e00 <__retarget_lock_init_recursive>:
 8019e00:	4770      	bx	lr

08019e02 <__retarget_lock_acquire_recursive>:
 8019e02:	4770      	bx	lr

08019e04 <__retarget_lock_release_recursive>:
 8019e04:	4770      	bx	lr

08019e06 <memcpy>:
 8019e06:	440a      	add	r2, r1
 8019e08:	4291      	cmp	r1, r2
 8019e0a:	f100 33ff 	add.w	r3, r0, #4294967295
 8019e0e:	d100      	bne.n	8019e12 <memcpy+0xc>
 8019e10:	4770      	bx	lr
 8019e12:	b510      	push	{r4, lr}
 8019e14:	f811 4b01 	ldrb.w	r4, [r1], #1
 8019e18:	f803 4f01 	strb.w	r4, [r3, #1]!
 8019e1c:	4291      	cmp	r1, r2
 8019e1e:	d1f9      	bne.n	8019e14 <memcpy+0xe>
 8019e20:	bd10      	pop	{r4, pc}
	...

08019e24 <__assert_func>:
 8019e24:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8019e26:	4614      	mov	r4, r2
 8019e28:	461a      	mov	r2, r3
 8019e2a:	4b09      	ldr	r3, [pc, #36]	; (8019e50 <__assert_func+0x2c>)
 8019e2c:	681b      	ldr	r3, [r3, #0]
 8019e2e:	4605      	mov	r5, r0
 8019e30:	68d8      	ldr	r0, [r3, #12]
 8019e32:	b14c      	cbz	r4, 8019e48 <__assert_func+0x24>
 8019e34:	4b07      	ldr	r3, [pc, #28]	; (8019e54 <__assert_func+0x30>)
 8019e36:	9100      	str	r1, [sp, #0]
 8019e38:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8019e3c:	4906      	ldr	r1, [pc, #24]	; (8019e58 <__assert_func+0x34>)
 8019e3e:	462b      	mov	r3, r5
 8019e40:	f001 fc70 	bl	801b724 <fiprintf>
 8019e44:	f001 fd14 	bl	801b870 <abort>
 8019e48:	4b04      	ldr	r3, [pc, #16]	; (8019e5c <__assert_func+0x38>)
 8019e4a:	461c      	mov	r4, r3
 8019e4c:	e7f3      	b.n	8019e36 <__assert_func+0x12>
 8019e4e:	bf00      	nop
 8019e50:	200000bc 	.word	0x200000bc
 8019e54:	0801eeaa 	.word	0x0801eeaa
 8019e58:	0801eeb7 	.word	0x0801eeb7
 8019e5c:	0801eee5 	.word	0x0801eee5

08019e60 <quorem>:
 8019e60:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8019e64:	6903      	ldr	r3, [r0, #16]
 8019e66:	690c      	ldr	r4, [r1, #16]
 8019e68:	42a3      	cmp	r3, r4
 8019e6a:	4607      	mov	r7, r0
 8019e6c:	db7e      	blt.n	8019f6c <quorem+0x10c>
 8019e6e:	3c01      	subs	r4, #1
 8019e70:	f101 0814 	add.w	r8, r1, #20
 8019e74:	f100 0514 	add.w	r5, r0, #20
 8019e78:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8019e7c:	9301      	str	r3, [sp, #4]
 8019e7e:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 8019e82:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8019e86:	3301      	adds	r3, #1
 8019e88:	429a      	cmp	r2, r3
 8019e8a:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 8019e8e:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 8019e92:	fbb2 f6f3 	udiv	r6, r2, r3
 8019e96:	d331      	bcc.n	8019efc <quorem+0x9c>
 8019e98:	f04f 0e00 	mov.w	lr, #0
 8019e9c:	4640      	mov	r0, r8
 8019e9e:	46ac      	mov	ip, r5
 8019ea0:	46f2      	mov	sl, lr
 8019ea2:	f850 2b04 	ldr.w	r2, [r0], #4
 8019ea6:	b293      	uxth	r3, r2
 8019ea8:	fb06 e303 	mla	r3, r6, r3, lr
 8019eac:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 8019eb0:	0c1a      	lsrs	r2, r3, #16
 8019eb2:	b29b      	uxth	r3, r3
 8019eb4:	ebaa 0303 	sub.w	r3, sl, r3
 8019eb8:	f8dc a000 	ldr.w	sl, [ip]
 8019ebc:	fa13 f38a 	uxtah	r3, r3, sl
 8019ec0:	fb06 220e 	mla	r2, r6, lr, r2
 8019ec4:	9300      	str	r3, [sp, #0]
 8019ec6:	9b00      	ldr	r3, [sp, #0]
 8019ec8:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 8019ecc:	b292      	uxth	r2, r2
 8019ece:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 8019ed2:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8019ed6:	f8bd 3000 	ldrh.w	r3, [sp]
 8019eda:	4581      	cmp	r9, r0
 8019edc:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8019ee0:	f84c 3b04 	str.w	r3, [ip], #4
 8019ee4:	ea4f 4a22 	mov.w	sl, r2, asr #16
 8019ee8:	d2db      	bcs.n	8019ea2 <quorem+0x42>
 8019eea:	f855 300b 	ldr.w	r3, [r5, fp]
 8019eee:	b92b      	cbnz	r3, 8019efc <quorem+0x9c>
 8019ef0:	9b01      	ldr	r3, [sp, #4]
 8019ef2:	3b04      	subs	r3, #4
 8019ef4:	429d      	cmp	r5, r3
 8019ef6:	461a      	mov	r2, r3
 8019ef8:	d32c      	bcc.n	8019f54 <quorem+0xf4>
 8019efa:	613c      	str	r4, [r7, #16]
 8019efc:	4638      	mov	r0, r7
 8019efe:	f001 f91f 	bl	801b140 <__mcmp>
 8019f02:	2800      	cmp	r0, #0
 8019f04:	db22      	blt.n	8019f4c <quorem+0xec>
 8019f06:	3601      	adds	r6, #1
 8019f08:	4629      	mov	r1, r5
 8019f0a:	2000      	movs	r0, #0
 8019f0c:	f858 2b04 	ldr.w	r2, [r8], #4
 8019f10:	f8d1 c000 	ldr.w	ip, [r1]
 8019f14:	b293      	uxth	r3, r2
 8019f16:	1ac3      	subs	r3, r0, r3
 8019f18:	0c12      	lsrs	r2, r2, #16
 8019f1a:	fa13 f38c 	uxtah	r3, r3, ip
 8019f1e:	ebc2 421c 	rsb	r2, r2, ip, lsr #16
 8019f22:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8019f26:	b29b      	uxth	r3, r3
 8019f28:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8019f2c:	45c1      	cmp	r9, r8
 8019f2e:	f841 3b04 	str.w	r3, [r1], #4
 8019f32:	ea4f 4022 	mov.w	r0, r2, asr #16
 8019f36:	d2e9      	bcs.n	8019f0c <quorem+0xac>
 8019f38:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8019f3c:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8019f40:	b922      	cbnz	r2, 8019f4c <quorem+0xec>
 8019f42:	3b04      	subs	r3, #4
 8019f44:	429d      	cmp	r5, r3
 8019f46:	461a      	mov	r2, r3
 8019f48:	d30a      	bcc.n	8019f60 <quorem+0x100>
 8019f4a:	613c      	str	r4, [r7, #16]
 8019f4c:	4630      	mov	r0, r6
 8019f4e:	b003      	add	sp, #12
 8019f50:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8019f54:	6812      	ldr	r2, [r2, #0]
 8019f56:	3b04      	subs	r3, #4
 8019f58:	2a00      	cmp	r2, #0
 8019f5a:	d1ce      	bne.n	8019efa <quorem+0x9a>
 8019f5c:	3c01      	subs	r4, #1
 8019f5e:	e7c9      	b.n	8019ef4 <quorem+0x94>
 8019f60:	6812      	ldr	r2, [r2, #0]
 8019f62:	3b04      	subs	r3, #4
 8019f64:	2a00      	cmp	r2, #0
 8019f66:	d1f0      	bne.n	8019f4a <quorem+0xea>
 8019f68:	3c01      	subs	r4, #1
 8019f6a:	e7eb      	b.n	8019f44 <quorem+0xe4>
 8019f6c:	2000      	movs	r0, #0
 8019f6e:	e7ee      	b.n	8019f4e <quorem+0xee>

08019f70 <_dtoa_r>:
 8019f70:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8019f74:	ed2d 8b02 	vpush	{d8}
 8019f78:	69c5      	ldr	r5, [r0, #28]
 8019f7a:	b091      	sub	sp, #68	; 0x44
 8019f7c:	ed8d 0b02 	vstr	d0, [sp, #8]
 8019f80:	ec59 8b10 	vmov	r8, r9, d0
 8019f84:	9c1c      	ldr	r4, [sp, #112]	; 0x70
 8019f86:	9106      	str	r1, [sp, #24]
 8019f88:	4606      	mov	r6, r0
 8019f8a:	9208      	str	r2, [sp, #32]
 8019f8c:	930c      	str	r3, [sp, #48]	; 0x30
 8019f8e:	b975      	cbnz	r5, 8019fae <_dtoa_r+0x3e>
 8019f90:	2010      	movs	r0, #16
 8019f92:	f000 fda5 	bl	801aae0 <malloc>
 8019f96:	4602      	mov	r2, r0
 8019f98:	61f0      	str	r0, [r6, #28]
 8019f9a:	b920      	cbnz	r0, 8019fa6 <_dtoa_r+0x36>
 8019f9c:	4ba6      	ldr	r3, [pc, #664]	; (801a238 <_dtoa_r+0x2c8>)
 8019f9e:	21ef      	movs	r1, #239	; 0xef
 8019fa0:	48a6      	ldr	r0, [pc, #664]	; (801a23c <_dtoa_r+0x2cc>)
 8019fa2:	f7ff ff3f 	bl	8019e24 <__assert_func>
 8019fa6:	e9c0 5501 	strd	r5, r5, [r0, #4]
 8019faa:	6005      	str	r5, [r0, #0]
 8019fac:	60c5      	str	r5, [r0, #12]
 8019fae:	69f3      	ldr	r3, [r6, #28]
 8019fb0:	6819      	ldr	r1, [r3, #0]
 8019fb2:	b151      	cbz	r1, 8019fca <_dtoa_r+0x5a>
 8019fb4:	685a      	ldr	r2, [r3, #4]
 8019fb6:	604a      	str	r2, [r1, #4]
 8019fb8:	2301      	movs	r3, #1
 8019fba:	4093      	lsls	r3, r2
 8019fbc:	608b      	str	r3, [r1, #8]
 8019fbe:	4630      	mov	r0, r6
 8019fc0:	f000 fe82 	bl	801acc8 <_Bfree>
 8019fc4:	69f3      	ldr	r3, [r6, #28]
 8019fc6:	2200      	movs	r2, #0
 8019fc8:	601a      	str	r2, [r3, #0]
 8019fca:	f1b9 0300 	subs.w	r3, r9, #0
 8019fce:	bfbb      	ittet	lt
 8019fd0:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 8019fd4:	9303      	strlt	r3, [sp, #12]
 8019fd6:	2300      	movge	r3, #0
 8019fd8:	2201      	movlt	r2, #1
 8019fda:	bfac      	ite	ge
 8019fdc:	6023      	strge	r3, [r4, #0]
 8019fde:	6022      	strlt	r2, [r4, #0]
 8019fe0:	4b97      	ldr	r3, [pc, #604]	; (801a240 <_dtoa_r+0x2d0>)
 8019fe2:	9c03      	ldr	r4, [sp, #12]
 8019fe4:	43a3      	bics	r3, r4
 8019fe6:	d11c      	bne.n	801a022 <_dtoa_r+0xb2>
 8019fe8:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8019fea:	f242 730f 	movw	r3, #9999	; 0x270f
 8019fee:	6013      	str	r3, [r2, #0]
 8019ff0:	f3c4 0313 	ubfx	r3, r4, #0, #20
 8019ff4:	ea53 0308 	orrs.w	r3, r3, r8
 8019ff8:	f000 84fb 	beq.w	801a9f2 <_dtoa_r+0xa82>
 8019ffc:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8019ffe:	b963      	cbnz	r3, 801a01a <_dtoa_r+0xaa>
 801a000:	4b90      	ldr	r3, [pc, #576]	; (801a244 <_dtoa_r+0x2d4>)
 801a002:	e020      	b.n	801a046 <_dtoa_r+0xd6>
 801a004:	4b90      	ldr	r3, [pc, #576]	; (801a248 <_dtoa_r+0x2d8>)
 801a006:	9301      	str	r3, [sp, #4]
 801a008:	3308      	adds	r3, #8
 801a00a:	9a1d      	ldr	r2, [sp, #116]	; 0x74
 801a00c:	6013      	str	r3, [r2, #0]
 801a00e:	9801      	ldr	r0, [sp, #4]
 801a010:	b011      	add	sp, #68	; 0x44
 801a012:	ecbd 8b02 	vpop	{d8}
 801a016:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801a01a:	4b8a      	ldr	r3, [pc, #552]	; (801a244 <_dtoa_r+0x2d4>)
 801a01c:	9301      	str	r3, [sp, #4]
 801a01e:	3303      	adds	r3, #3
 801a020:	e7f3      	b.n	801a00a <_dtoa_r+0x9a>
 801a022:	ed9d 8b02 	vldr	d8, [sp, #8]
 801a026:	eeb5 8b40 	vcmp.f64	d8, #0.0
 801a02a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801a02e:	d10c      	bne.n	801a04a <_dtoa_r+0xda>
 801a030:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 801a032:	2301      	movs	r3, #1
 801a034:	6013      	str	r3, [r2, #0]
 801a036:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 801a038:	2b00      	cmp	r3, #0
 801a03a:	f000 84d7 	beq.w	801a9ec <_dtoa_r+0xa7c>
 801a03e:	4b83      	ldr	r3, [pc, #524]	; (801a24c <_dtoa_r+0x2dc>)
 801a040:	9a1d      	ldr	r2, [sp, #116]	; 0x74
 801a042:	6013      	str	r3, [r2, #0]
 801a044:	3b01      	subs	r3, #1
 801a046:	9301      	str	r3, [sp, #4]
 801a048:	e7e1      	b.n	801a00e <_dtoa_r+0x9e>
 801a04a:	aa0e      	add	r2, sp, #56	; 0x38
 801a04c:	a90f      	add	r1, sp, #60	; 0x3c
 801a04e:	4630      	mov	r0, r6
 801a050:	eeb0 0b48 	vmov.f64	d0, d8
 801a054:	f001 f91a 	bl	801b28c <__d2b>
 801a058:	f3c4 530a 	ubfx	r3, r4, #20, #11
 801a05c:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 801a05e:	4605      	mov	r5, r0
 801a060:	2b00      	cmp	r3, #0
 801a062:	d046      	beq.n	801a0f2 <_dtoa_r+0x182>
 801a064:	eeb0 7b48 	vmov.f64	d7, d8
 801a068:	ee18 1a90 	vmov	r1, s17
 801a06c:	f3c1 0113 	ubfx	r1, r1, #0, #20
 801a070:	f041 517f 	orr.w	r1, r1, #1069547520	; 0x3fc00000
 801a074:	f441 1140 	orr.w	r1, r1, #3145728	; 0x300000
 801a078:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
 801a07c:	2000      	movs	r0, #0
 801a07e:	ee07 1a90 	vmov	s15, r1
 801a082:	eeb7 6b08 	vmov.f64	d6, #120	; 0x3fc00000  1.5
 801a086:	ed9f 5b66 	vldr	d5, [pc, #408]	; 801a220 <_dtoa_r+0x2b0>
 801a08a:	ee37 7b46 	vsub.f64	d7, d7, d6
 801a08e:	ed9f 6b66 	vldr	d6, [pc, #408]	; 801a228 <_dtoa_r+0x2b8>
 801a092:	eea7 6b05 	vfma.f64	d6, d7, d5
 801a096:	ed9f 5b66 	vldr	d5, [pc, #408]	; 801a230 <_dtoa_r+0x2c0>
 801a09a:	ee07 3a90 	vmov	s15, r3
 801a09e:	eeb8 4be7 	vcvt.f64.s32	d4, s15
 801a0a2:	eeb0 7b46 	vmov.f64	d7, d6
 801a0a6:	eea4 7b05 	vfma.f64	d7, d4, d5
 801a0aa:	eefd 6bc7 	vcvt.s32.f64	s13, d7
 801a0ae:	eeb5 7bc0 	vcmpe.f64	d7, #0.0
 801a0b2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801a0b6:	ee16 ba90 	vmov	fp, s13
 801a0ba:	9009      	str	r0, [sp, #36]	; 0x24
 801a0bc:	d508      	bpl.n	801a0d0 <_dtoa_r+0x160>
 801a0be:	eeb8 6be6 	vcvt.f64.s32	d6, s13
 801a0c2:	eeb4 6b47 	vcmp.f64	d6, d7
 801a0c6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801a0ca:	bf18      	it	ne
 801a0cc:	f10b 3bff 	addne.w	fp, fp, #4294967295
 801a0d0:	f1bb 0f16 	cmp.w	fp, #22
 801a0d4:	d82b      	bhi.n	801a12e <_dtoa_r+0x1be>
 801a0d6:	495e      	ldr	r1, [pc, #376]	; (801a250 <_dtoa_r+0x2e0>)
 801a0d8:	eb01 01cb 	add.w	r1, r1, fp, lsl #3
 801a0dc:	ed91 7b00 	vldr	d7, [r1]
 801a0e0:	eeb4 8bc7 	vcmpe.f64	d8, d7
 801a0e4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801a0e8:	d501      	bpl.n	801a0ee <_dtoa_r+0x17e>
 801a0ea:	f10b 3bff 	add.w	fp, fp, #4294967295
 801a0ee:	2100      	movs	r1, #0
 801a0f0:	e01e      	b.n	801a130 <_dtoa_r+0x1c0>
 801a0f2:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 801a0f4:	4413      	add	r3, r2
 801a0f6:	f203 4132 	addw	r1, r3, #1074	; 0x432
 801a0fa:	2920      	cmp	r1, #32
 801a0fc:	bfc1      	itttt	gt
 801a0fe:	f1c1 0140 	rsbgt	r1, r1, #64	; 0x40
 801a102:	408c      	lslgt	r4, r1
 801a104:	f203 4112 	addwgt	r1, r3, #1042	; 0x412
 801a108:	fa28 f101 	lsrgt.w	r1, r8, r1
 801a10c:	bfd6      	itet	le
 801a10e:	f1c1 0120 	rsble	r1, r1, #32
 801a112:	4321      	orrgt	r1, r4
 801a114:	fa08 f101 	lslle.w	r1, r8, r1
 801a118:	ee07 1a90 	vmov	s15, r1
 801a11c:	eeb8 7b67 	vcvt.f64.u32	d7, s15
 801a120:	3b01      	subs	r3, #1
 801a122:	ee17 1a90 	vmov	r1, s15
 801a126:	2001      	movs	r0, #1
 801a128:	f1a1 71f8 	sub.w	r1, r1, #32505856	; 0x1f00000
 801a12c:	e7a7      	b.n	801a07e <_dtoa_r+0x10e>
 801a12e:	2101      	movs	r1, #1
 801a130:	1ad2      	subs	r2, r2, r3
 801a132:	1e53      	subs	r3, r2, #1
 801a134:	9305      	str	r3, [sp, #20]
 801a136:	bf45      	ittet	mi
 801a138:	f1c2 0301 	rsbmi	r3, r2, #1
 801a13c:	9304      	strmi	r3, [sp, #16]
 801a13e:	2300      	movpl	r3, #0
 801a140:	2300      	movmi	r3, #0
 801a142:	bf4c      	ite	mi
 801a144:	9305      	strmi	r3, [sp, #20]
 801a146:	9304      	strpl	r3, [sp, #16]
 801a148:	f1bb 0f00 	cmp.w	fp, #0
 801a14c:	910b      	str	r1, [sp, #44]	; 0x2c
 801a14e:	db18      	blt.n	801a182 <_dtoa_r+0x212>
 801a150:	9b05      	ldr	r3, [sp, #20]
 801a152:	f8cd b028 	str.w	fp, [sp, #40]	; 0x28
 801a156:	445b      	add	r3, fp
 801a158:	9305      	str	r3, [sp, #20]
 801a15a:	2300      	movs	r3, #0
 801a15c:	9a06      	ldr	r2, [sp, #24]
 801a15e:	2a09      	cmp	r2, #9
 801a160:	d848      	bhi.n	801a1f4 <_dtoa_r+0x284>
 801a162:	2a05      	cmp	r2, #5
 801a164:	bfc4      	itt	gt
 801a166:	3a04      	subgt	r2, #4
 801a168:	9206      	strgt	r2, [sp, #24]
 801a16a:	9a06      	ldr	r2, [sp, #24]
 801a16c:	f1a2 0202 	sub.w	r2, r2, #2
 801a170:	bfcc      	ite	gt
 801a172:	2400      	movgt	r4, #0
 801a174:	2401      	movle	r4, #1
 801a176:	2a03      	cmp	r2, #3
 801a178:	d847      	bhi.n	801a20a <_dtoa_r+0x29a>
 801a17a:	e8df f002 	tbb	[pc, r2]
 801a17e:	2d0b      	.short	0x2d0b
 801a180:	392b      	.short	0x392b
 801a182:	9b04      	ldr	r3, [sp, #16]
 801a184:	2200      	movs	r2, #0
 801a186:	eba3 030b 	sub.w	r3, r3, fp
 801a18a:	9304      	str	r3, [sp, #16]
 801a18c:	920a      	str	r2, [sp, #40]	; 0x28
 801a18e:	f1cb 0300 	rsb	r3, fp, #0
 801a192:	e7e3      	b.n	801a15c <_dtoa_r+0x1ec>
 801a194:	2200      	movs	r2, #0
 801a196:	9207      	str	r2, [sp, #28]
 801a198:	9a08      	ldr	r2, [sp, #32]
 801a19a:	2a00      	cmp	r2, #0
 801a19c:	dc38      	bgt.n	801a210 <_dtoa_r+0x2a0>
 801a19e:	f04f 0a01 	mov.w	sl, #1
 801a1a2:	46d1      	mov	r9, sl
 801a1a4:	4652      	mov	r2, sl
 801a1a6:	f8cd a020 	str.w	sl, [sp, #32]
 801a1aa:	69f7      	ldr	r7, [r6, #28]
 801a1ac:	2100      	movs	r1, #0
 801a1ae:	2004      	movs	r0, #4
 801a1b0:	f100 0c14 	add.w	ip, r0, #20
 801a1b4:	4594      	cmp	ip, r2
 801a1b6:	d930      	bls.n	801a21a <_dtoa_r+0x2aa>
 801a1b8:	6079      	str	r1, [r7, #4]
 801a1ba:	4630      	mov	r0, r6
 801a1bc:	930d      	str	r3, [sp, #52]	; 0x34
 801a1be:	f000 fd43 	bl	801ac48 <_Balloc>
 801a1c2:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 801a1c4:	9001      	str	r0, [sp, #4]
 801a1c6:	4602      	mov	r2, r0
 801a1c8:	2800      	cmp	r0, #0
 801a1ca:	d145      	bne.n	801a258 <_dtoa_r+0x2e8>
 801a1cc:	4b21      	ldr	r3, [pc, #132]	; (801a254 <_dtoa_r+0x2e4>)
 801a1ce:	f240 11af 	movw	r1, #431	; 0x1af
 801a1d2:	e6e5      	b.n	8019fa0 <_dtoa_r+0x30>
 801a1d4:	2201      	movs	r2, #1
 801a1d6:	e7de      	b.n	801a196 <_dtoa_r+0x226>
 801a1d8:	2200      	movs	r2, #0
 801a1da:	9207      	str	r2, [sp, #28]
 801a1dc:	9a08      	ldr	r2, [sp, #32]
 801a1de:	eb0b 0a02 	add.w	sl, fp, r2
 801a1e2:	f10a 0901 	add.w	r9, sl, #1
 801a1e6:	464a      	mov	r2, r9
 801a1e8:	2a01      	cmp	r2, #1
 801a1ea:	bfb8      	it	lt
 801a1ec:	2201      	movlt	r2, #1
 801a1ee:	e7dc      	b.n	801a1aa <_dtoa_r+0x23a>
 801a1f0:	2201      	movs	r2, #1
 801a1f2:	e7f2      	b.n	801a1da <_dtoa_r+0x26a>
 801a1f4:	2401      	movs	r4, #1
 801a1f6:	2200      	movs	r2, #0
 801a1f8:	e9cd 2406 	strd	r2, r4, [sp, #24]
 801a1fc:	f04f 3aff 	mov.w	sl, #4294967295
 801a200:	2100      	movs	r1, #0
 801a202:	46d1      	mov	r9, sl
 801a204:	2212      	movs	r2, #18
 801a206:	9108      	str	r1, [sp, #32]
 801a208:	e7cf      	b.n	801a1aa <_dtoa_r+0x23a>
 801a20a:	2201      	movs	r2, #1
 801a20c:	9207      	str	r2, [sp, #28]
 801a20e:	e7f5      	b.n	801a1fc <_dtoa_r+0x28c>
 801a210:	f8dd a020 	ldr.w	sl, [sp, #32]
 801a214:	46d1      	mov	r9, sl
 801a216:	4652      	mov	r2, sl
 801a218:	e7c7      	b.n	801a1aa <_dtoa_r+0x23a>
 801a21a:	3101      	adds	r1, #1
 801a21c:	0040      	lsls	r0, r0, #1
 801a21e:	e7c7      	b.n	801a1b0 <_dtoa_r+0x240>
 801a220:	636f4361 	.word	0x636f4361
 801a224:	3fd287a7 	.word	0x3fd287a7
 801a228:	8b60c8b3 	.word	0x8b60c8b3
 801a22c:	3fc68a28 	.word	0x3fc68a28
 801a230:	509f79fb 	.word	0x509f79fb
 801a234:	3fd34413 	.word	0x3fd34413
 801a238:	0801ed06 	.word	0x0801ed06
 801a23c:	0801eef3 	.word	0x0801eef3
 801a240:	7ff00000 	.word	0x7ff00000
 801a244:	0801eeef 	.word	0x0801eeef
 801a248:	0801eee6 	.word	0x0801eee6
 801a24c:	0801ee87 	.word	0x0801ee87
 801a250:	0801efe0 	.word	0x0801efe0
 801a254:	0801ef4b 	.word	0x0801ef4b
 801a258:	69f2      	ldr	r2, [r6, #28]
 801a25a:	9901      	ldr	r1, [sp, #4]
 801a25c:	6011      	str	r1, [r2, #0]
 801a25e:	f1b9 0f0e 	cmp.w	r9, #14
 801a262:	d86c      	bhi.n	801a33e <_dtoa_r+0x3ce>
 801a264:	2c00      	cmp	r4, #0
 801a266:	d06a      	beq.n	801a33e <_dtoa_r+0x3ce>
 801a268:	f1bb 0f00 	cmp.w	fp, #0
 801a26c:	f340 80a0 	ble.w	801a3b0 <_dtoa_r+0x440>
 801a270:	4ac1      	ldr	r2, [pc, #772]	; (801a578 <_dtoa_r+0x608>)
 801a272:	f00b 010f 	and.w	r1, fp, #15
 801a276:	eb02 02c1 	add.w	r2, r2, r1, lsl #3
 801a27a:	f41b 7f80 	tst.w	fp, #256	; 0x100
 801a27e:	ed92 7b00 	vldr	d7, [r2]
 801a282:	ea4f 122b 	mov.w	r2, fp, asr #4
 801a286:	f000 8087 	beq.w	801a398 <_dtoa_r+0x428>
 801a28a:	49bc      	ldr	r1, [pc, #752]	; (801a57c <_dtoa_r+0x60c>)
 801a28c:	ed91 6b08 	vldr	d6, [r1, #32]
 801a290:	ee88 6b06 	vdiv.f64	d6, d8, d6
 801a294:	ed8d 6b02 	vstr	d6, [sp, #8]
 801a298:	f002 020f 	and.w	r2, r2, #15
 801a29c:	2103      	movs	r1, #3
 801a29e:	48b7      	ldr	r0, [pc, #732]	; (801a57c <_dtoa_r+0x60c>)
 801a2a0:	2a00      	cmp	r2, #0
 801a2a2:	d17b      	bne.n	801a39c <_dtoa_r+0x42c>
 801a2a4:	ed9d 6b02 	vldr	d6, [sp, #8]
 801a2a8:	ee86 7b07 	vdiv.f64	d7, d6, d7
 801a2ac:	ed8d 7b02 	vstr	d7, [sp, #8]
 801a2b0:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 801a2b2:	ed9d 7b02 	vldr	d7, [sp, #8]
 801a2b6:	2a00      	cmp	r2, #0
 801a2b8:	f000 80a0 	beq.w	801a3fc <_dtoa_r+0x48c>
 801a2bc:	eeb7 6b00 	vmov.f64	d6, #112	; 0x3f800000  1.0
 801a2c0:	eeb4 7bc6 	vcmpe.f64	d7, d6
 801a2c4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801a2c8:	f140 8098 	bpl.w	801a3fc <_dtoa_r+0x48c>
 801a2cc:	f1b9 0f00 	cmp.w	r9, #0
 801a2d0:	f000 8094 	beq.w	801a3fc <_dtoa_r+0x48c>
 801a2d4:	f1ba 0f00 	cmp.w	sl, #0
 801a2d8:	dd2f      	ble.n	801a33a <_dtoa_r+0x3ca>
 801a2da:	eeb2 6b04 	vmov.f64	d6, #36	; 0x41200000  10.0
 801a2de:	ee27 7b06 	vmul.f64	d7, d7, d6
 801a2e2:	ed8d 7b02 	vstr	d7, [sp, #8]
 801a2e6:	f10b 32ff 	add.w	r2, fp, #4294967295
 801a2ea:	3101      	adds	r1, #1
 801a2ec:	4654      	mov	r4, sl
 801a2ee:	ed9d 6b02 	vldr	d6, [sp, #8]
 801a2f2:	eeb1 5b0c 	vmov.f64	d5, #28	; 0x40e00000  7.0
 801a2f6:	ee07 1a90 	vmov	s15, r1
 801a2fa:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 801a2fe:	eea7 5b06 	vfma.f64	d5, d7, d6
 801a302:	ee15 7a90 	vmov	r7, s11
 801a306:	ec51 0b15 	vmov	r0, r1, d5
 801a30a:	f1a7 7150 	sub.w	r1, r7, #54525952	; 0x3400000
 801a30e:	2c00      	cmp	r4, #0
 801a310:	d177      	bne.n	801a402 <_dtoa_r+0x492>
 801a312:	eeb1 7b04 	vmov.f64	d7, #20	; 0x40a00000  5.0
 801a316:	ee36 6b47 	vsub.f64	d6, d6, d7
 801a31a:	ec41 0b17 	vmov	d7, r0, r1
 801a31e:	eeb4 6bc7 	vcmpe.f64	d6, d7
 801a322:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801a326:	f300 826a 	bgt.w	801a7fe <_dtoa_r+0x88e>
 801a32a:	eeb1 7b47 	vneg.f64	d7, d7
 801a32e:	eeb4 6bc7 	vcmpe.f64	d6, d7
 801a332:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801a336:	f100 8260 	bmi.w	801a7fa <_dtoa_r+0x88a>
 801a33a:	ed8d 8b02 	vstr	d8, [sp, #8]
 801a33e:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 801a340:	2a00      	cmp	r2, #0
 801a342:	f2c0 811d 	blt.w	801a580 <_dtoa_r+0x610>
 801a346:	f1bb 0f0e 	cmp.w	fp, #14
 801a34a:	f300 8119 	bgt.w	801a580 <_dtoa_r+0x610>
 801a34e:	4b8a      	ldr	r3, [pc, #552]	; (801a578 <_dtoa_r+0x608>)
 801a350:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 801a354:	ed93 6b00 	vldr	d6, [r3]
 801a358:	9b08      	ldr	r3, [sp, #32]
 801a35a:	2b00      	cmp	r3, #0
 801a35c:	f280 80b7 	bge.w	801a4ce <_dtoa_r+0x55e>
 801a360:	f1b9 0f00 	cmp.w	r9, #0
 801a364:	f300 80b3 	bgt.w	801a4ce <_dtoa_r+0x55e>
 801a368:	f040 8246 	bne.w	801a7f8 <_dtoa_r+0x888>
 801a36c:	eeb1 7b04 	vmov.f64	d7, #20	; 0x40a00000  5.0
 801a370:	ee26 6b07 	vmul.f64	d6, d6, d7
 801a374:	ed9d 7b02 	vldr	d7, [sp, #8]
 801a378:	eeb4 6bc7 	vcmpe.f64	d6, d7
 801a37c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801a380:	464c      	mov	r4, r9
 801a382:	464f      	mov	r7, r9
 801a384:	f280 821c 	bge.w	801a7c0 <_dtoa_r+0x850>
 801a388:	f8dd 8004 	ldr.w	r8, [sp, #4]
 801a38c:	2331      	movs	r3, #49	; 0x31
 801a38e:	f808 3b01 	strb.w	r3, [r8], #1
 801a392:	f10b 0b01 	add.w	fp, fp, #1
 801a396:	e218      	b.n	801a7ca <_dtoa_r+0x85a>
 801a398:	2102      	movs	r1, #2
 801a39a:	e780      	b.n	801a29e <_dtoa_r+0x32e>
 801a39c:	07d4      	lsls	r4, r2, #31
 801a39e:	d504      	bpl.n	801a3aa <_dtoa_r+0x43a>
 801a3a0:	ed90 6b00 	vldr	d6, [r0]
 801a3a4:	3101      	adds	r1, #1
 801a3a6:	ee27 7b06 	vmul.f64	d7, d7, d6
 801a3aa:	1052      	asrs	r2, r2, #1
 801a3ac:	3008      	adds	r0, #8
 801a3ae:	e777      	b.n	801a2a0 <_dtoa_r+0x330>
 801a3b0:	d022      	beq.n	801a3f8 <_dtoa_r+0x488>
 801a3b2:	f1cb 0200 	rsb	r2, fp, #0
 801a3b6:	4970      	ldr	r1, [pc, #448]	; (801a578 <_dtoa_r+0x608>)
 801a3b8:	f002 000f 	and.w	r0, r2, #15
 801a3bc:	eb01 01c0 	add.w	r1, r1, r0, lsl #3
 801a3c0:	ed91 7b00 	vldr	d7, [r1]
 801a3c4:	ee28 7b07 	vmul.f64	d7, d8, d7
 801a3c8:	ed8d 7b02 	vstr	d7, [sp, #8]
 801a3cc:	486b      	ldr	r0, [pc, #428]	; (801a57c <_dtoa_r+0x60c>)
 801a3ce:	1112      	asrs	r2, r2, #4
 801a3d0:	2400      	movs	r4, #0
 801a3d2:	2102      	movs	r1, #2
 801a3d4:	b92a      	cbnz	r2, 801a3e2 <_dtoa_r+0x472>
 801a3d6:	2c00      	cmp	r4, #0
 801a3d8:	f43f af6a 	beq.w	801a2b0 <_dtoa_r+0x340>
 801a3dc:	ed8d 7b02 	vstr	d7, [sp, #8]
 801a3e0:	e766      	b.n	801a2b0 <_dtoa_r+0x340>
 801a3e2:	07d7      	lsls	r7, r2, #31
 801a3e4:	d505      	bpl.n	801a3f2 <_dtoa_r+0x482>
 801a3e6:	ed90 6b00 	vldr	d6, [r0]
 801a3ea:	3101      	adds	r1, #1
 801a3ec:	2401      	movs	r4, #1
 801a3ee:	ee27 7b06 	vmul.f64	d7, d7, d6
 801a3f2:	1052      	asrs	r2, r2, #1
 801a3f4:	3008      	adds	r0, #8
 801a3f6:	e7ed      	b.n	801a3d4 <_dtoa_r+0x464>
 801a3f8:	2102      	movs	r1, #2
 801a3fa:	e759      	b.n	801a2b0 <_dtoa_r+0x340>
 801a3fc:	465a      	mov	r2, fp
 801a3fe:	464c      	mov	r4, r9
 801a400:	e775      	b.n	801a2ee <_dtoa_r+0x37e>
 801a402:	ec41 0b17 	vmov	d7, r0, r1
 801a406:	495c      	ldr	r1, [pc, #368]	; (801a578 <_dtoa_r+0x608>)
 801a408:	eb01 01c4 	add.w	r1, r1, r4, lsl #3
 801a40c:	ed11 4b02 	vldr	d4, [r1, #-8]
 801a410:	9901      	ldr	r1, [sp, #4]
 801a412:	440c      	add	r4, r1
 801a414:	9907      	ldr	r1, [sp, #28]
 801a416:	b351      	cbz	r1, 801a46e <_dtoa_r+0x4fe>
 801a418:	eeb6 3b00 	vmov.f64	d3, #96	; 0x3f000000  0.5
 801a41c:	eeb7 2b00 	vmov.f64	d2, #112	; 0x3f800000  1.0
 801a420:	f8dd 8004 	ldr.w	r8, [sp, #4]
 801a424:	ee83 5b04 	vdiv.f64	d5, d3, d4
 801a428:	eeb2 3b04 	vmov.f64	d3, #36	; 0x41200000  10.0
 801a42c:	ee35 7b47 	vsub.f64	d7, d5, d7
 801a430:	eefd 4bc6 	vcvt.s32.f64	s9, d6
 801a434:	ee14 1a90 	vmov	r1, s9
 801a438:	eeb8 5be4 	vcvt.f64.s32	d5, s9
 801a43c:	3130      	adds	r1, #48	; 0x30
 801a43e:	ee36 6b45 	vsub.f64	d6, d6, d5
 801a442:	eeb4 6bc7 	vcmpe.f64	d6, d7
 801a446:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801a44a:	f808 1b01 	strb.w	r1, [r8], #1
 801a44e:	d439      	bmi.n	801a4c4 <_dtoa_r+0x554>
 801a450:	ee32 5b46 	vsub.f64	d5, d2, d6
 801a454:	eeb4 5bc7 	vcmpe.f64	d5, d7
 801a458:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801a45c:	d472      	bmi.n	801a544 <_dtoa_r+0x5d4>
 801a45e:	45a0      	cmp	r8, r4
 801a460:	f43f af6b 	beq.w	801a33a <_dtoa_r+0x3ca>
 801a464:	ee27 7b03 	vmul.f64	d7, d7, d3
 801a468:	ee26 6b03 	vmul.f64	d6, d6, d3
 801a46c:	e7e0      	b.n	801a430 <_dtoa_r+0x4c0>
 801a46e:	f8dd 8004 	ldr.w	r8, [sp, #4]
 801a472:	ee27 7b04 	vmul.f64	d7, d7, d4
 801a476:	4620      	mov	r0, r4
 801a478:	eeb2 3b04 	vmov.f64	d3, #36	; 0x41200000  10.0
 801a47c:	eefd 4bc6 	vcvt.s32.f64	s9, d6
 801a480:	ee14 1a90 	vmov	r1, s9
 801a484:	3130      	adds	r1, #48	; 0x30
 801a486:	f808 1b01 	strb.w	r1, [r8], #1
 801a48a:	45a0      	cmp	r8, r4
 801a48c:	eeb8 5be4 	vcvt.f64.s32	d5, s9
 801a490:	ee36 6b45 	vsub.f64	d6, d6, d5
 801a494:	d118      	bne.n	801a4c8 <_dtoa_r+0x558>
 801a496:	eeb6 5b00 	vmov.f64	d5, #96	; 0x3f000000  0.5
 801a49a:	ee37 4b05 	vadd.f64	d4, d7, d5
 801a49e:	eeb4 6bc4 	vcmpe.f64	d6, d4
 801a4a2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801a4a6:	dc4d      	bgt.n	801a544 <_dtoa_r+0x5d4>
 801a4a8:	ee35 5b47 	vsub.f64	d5, d5, d7
 801a4ac:	eeb4 6bc5 	vcmpe.f64	d6, d5
 801a4b0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801a4b4:	f57f af41 	bpl.w	801a33a <_dtoa_r+0x3ca>
 801a4b8:	4680      	mov	r8, r0
 801a4ba:	3801      	subs	r0, #1
 801a4bc:	f818 3c01 	ldrb.w	r3, [r8, #-1]
 801a4c0:	2b30      	cmp	r3, #48	; 0x30
 801a4c2:	d0f9      	beq.n	801a4b8 <_dtoa_r+0x548>
 801a4c4:	4693      	mov	fp, r2
 801a4c6:	e02a      	b.n	801a51e <_dtoa_r+0x5ae>
 801a4c8:	ee26 6b03 	vmul.f64	d6, d6, d3
 801a4cc:	e7d6      	b.n	801a47c <_dtoa_r+0x50c>
 801a4ce:	ed9d 7b02 	vldr	d7, [sp, #8]
 801a4d2:	eeb2 4b04 	vmov.f64	d4, #36	; 0x41200000  10.0
 801a4d6:	f8dd 8004 	ldr.w	r8, [sp, #4]
 801a4da:	ee87 5b06 	vdiv.f64	d5, d7, d6
 801a4de:	eebd 5bc5 	vcvt.s32.f64	s10, d5
 801a4e2:	ee15 3a10 	vmov	r3, s10
 801a4e6:	3330      	adds	r3, #48	; 0x30
 801a4e8:	f808 3b01 	strb.w	r3, [r8], #1
 801a4ec:	9b01      	ldr	r3, [sp, #4]
 801a4ee:	eba8 0303 	sub.w	r3, r8, r3
 801a4f2:	4599      	cmp	r9, r3
 801a4f4:	eeb8 3bc5 	vcvt.f64.s32	d3, s10
 801a4f8:	eea3 7b46 	vfms.f64	d7, d3, d6
 801a4fc:	d133      	bne.n	801a566 <_dtoa_r+0x5f6>
 801a4fe:	ee37 7b07 	vadd.f64	d7, d7, d7
 801a502:	eeb4 7bc6 	vcmpe.f64	d7, d6
 801a506:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801a50a:	dc1a      	bgt.n	801a542 <_dtoa_r+0x5d2>
 801a50c:	eeb4 7b46 	vcmp.f64	d7, d6
 801a510:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801a514:	d103      	bne.n	801a51e <_dtoa_r+0x5ae>
 801a516:	ee15 3a10 	vmov	r3, s10
 801a51a:	07d9      	lsls	r1, r3, #31
 801a51c:	d411      	bmi.n	801a542 <_dtoa_r+0x5d2>
 801a51e:	4629      	mov	r1, r5
 801a520:	4630      	mov	r0, r6
 801a522:	f000 fbd1 	bl	801acc8 <_Bfree>
 801a526:	2300      	movs	r3, #0
 801a528:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 801a52a:	f888 3000 	strb.w	r3, [r8]
 801a52e:	f10b 0301 	add.w	r3, fp, #1
 801a532:	6013      	str	r3, [r2, #0]
 801a534:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 801a536:	2b00      	cmp	r3, #0
 801a538:	f43f ad69 	beq.w	801a00e <_dtoa_r+0x9e>
 801a53c:	f8c3 8000 	str.w	r8, [r3]
 801a540:	e565      	b.n	801a00e <_dtoa_r+0x9e>
 801a542:	465a      	mov	r2, fp
 801a544:	4643      	mov	r3, r8
 801a546:	4698      	mov	r8, r3
 801a548:	f813 1d01 	ldrb.w	r1, [r3, #-1]!
 801a54c:	2939      	cmp	r1, #57	; 0x39
 801a54e:	d106      	bne.n	801a55e <_dtoa_r+0x5ee>
 801a550:	9901      	ldr	r1, [sp, #4]
 801a552:	4299      	cmp	r1, r3
 801a554:	d1f7      	bne.n	801a546 <_dtoa_r+0x5d6>
 801a556:	9801      	ldr	r0, [sp, #4]
 801a558:	2130      	movs	r1, #48	; 0x30
 801a55a:	3201      	adds	r2, #1
 801a55c:	7001      	strb	r1, [r0, #0]
 801a55e:	7819      	ldrb	r1, [r3, #0]
 801a560:	3101      	adds	r1, #1
 801a562:	7019      	strb	r1, [r3, #0]
 801a564:	e7ae      	b.n	801a4c4 <_dtoa_r+0x554>
 801a566:	ee27 7b04 	vmul.f64	d7, d7, d4
 801a56a:	eeb5 7b40 	vcmp.f64	d7, #0.0
 801a56e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801a572:	d1b2      	bne.n	801a4da <_dtoa_r+0x56a>
 801a574:	e7d3      	b.n	801a51e <_dtoa_r+0x5ae>
 801a576:	bf00      	nop
 801a578:	0801efe0 	.word	0x0801efe0
 801a57c:	0801efb8 	.word	0x0801efb8
 801a580:	9907      	ldr	r1, [sp, #28]
 801a582:	2900      	cmp	r1, #0
 801a584:	f000 80d0 	beq.w	801a728 <_dtoa_r+0x7b8>
 801a588:	9906      	ldr	r1, [sp, #24]
 801a58a:	2901      	cmp	r1, #1
 801a58c:	f300 80b4 	bgt.w	801a6f8 <_dtoa_r+0x788>
 801a590:	9909      	ldr	r1, [sp, #36]	; 0x24
 801a592:	2900      	cmp	r1, #0
 801a594:	f000 80ac 	beq.w	801a6f0 <_dtoa_r+0x780>
 801a598:	f202 4233 	addw	r2, r2, #1075	; 0x433
 801a59c:	f8dd 8010 	ldr.w	r8, [sp, #16]
 801a5a0:	461c      	mov	r4, r3
 801a5a2:	9309      	str	r3, [sp, #36]	; 0x24
 801a5a4:	9b04      	ldr	r3, [sp, #16]
 801a5a6:	4413      	add	r3, r2
 801a5a8:	9304      	str	r3, [sp, #16]
 801a5aa:	9b05      	ldr	r3, [sp, #20]
 801a5ac:	2101      	movs	r1, #1
 801a5ae:	4413      	add	r3, r2
 801a5b0:	4630      	mov	r0, r6
 801a5b2:	9305      	str	r3, [sp, #20]
 801a5b4:	f000 fc3e 	bl	801ae34 <__i2b>
 801a5b8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801a5ba:	4607      	mov	r7, r0
 801a5bc:	f1b8 0f00 	cmp.w	r8, #0
 801a5c0:	d00d      	beq.n	801a5de <_dtoa_r+0x66e>
 801a5c2:	9a05      	ldr	r2, [sp, #20]
 801a5c4:	2a00      	cmp	r2, #0
 801a5c6:	dd0a      	ble.n	801a5de <_dtoa_r+0x66e>
 801a5c8:	4542      	cmp	r2, r8
 801a5ca:	9904      	ldr	r1, [sp, #16]
 801a5cc:	bfa8      	it	ge
 801a5ce:	4642      	movge	r2, r8
 801a5d0:	1a89      	subs	r1, r1, r2
 801a5d2:	9104      	str	r1, [sp, #16]
 801a5d4:	9905      	ldr	r1, [sp, #20]
 801a5d6:	eba8 0802 	sub.w	r8, r8, r2
 801a5da:	1a8a      	subs	r2, r1, r2
 801a5dc:	9205      	str	r2, [sp, #20]
 801a5de:	b303      	cbz	r3, 801a622 <_dtoa_r+0x6b2>
 801a5e0:	9a07      	ldr	r2, [sp, #28]
 801a5e2:	2a00      	cmp	r2, #0
 801a5e4:	f000 80a5 	beq.w	801a732 <_dtoa_r+0x7c2>
 801a5e8:	2c00      	cmp	r4, #0
 801a5ea:	dd13      	ble.n	801a614 <_dtoa_r+0x6a4>
 801a5ec:	4639      	mov	r1, r7
 801a5ee:	4622      	mov	r2, r4
 801a5f0:	4630      	mov	r0, r6
 801a5f2:	930d      	str	r3, [sp, #52]	; 0x34
 801a5f4:	f000 fcde 	bl	801afb4 <__pow5mult>
 801a5f8:	462a      	mov	r2, r5
 801a5fa:	4601      	mov	r1, r0
 801a5fc:	4607      	mov	r7, r0
 801a5fe:	4630      	mov	r0, r6
 801a600:	f000 fc2e 	bl	801ae60 <__multiply>
 801a604:	4629      	mov	r1, r5
 801a606:	9009      	str	r0, [sp, #36]	; 0x24
 801a608:	4630      	mov	r0, r6
 801a60a:	f000 fb5d 	bl	801acc8 <_Bfree>
 801a60e:	9a09      	ldr	r2, [sp, #36]	; 0x24
 801a610:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 801a612:	4615      	mov	r5, r2
 801a614:	1b1a      	subs	r2, r3, r4
 801a616:	d004      	beq.n	801a622 <_dtoa_r+0x6b2>
 801a618:	4629      	mov	r1, r5
 801a61a:	4630      	mov	r0, r6
 801a61c:	f000 fcca 	bl	801afb4 <__pow5mult>
 801a620:	4605      	mov	r5, r0
 801a622:	2101      	movs	r1, #1
 801a624:	4630      	mov	r0, r6
 801a626:	f000 fc05 	bl	801ae34 <__i2b>
 801a62a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801a62c:	2b00      	cmp	r3, #0
 801a62e:	4604      	mov	r4, r0
 801a630:	f340 8081 	ble.w	801a736 <_dtoa_r+0x7c6>
 801a634:	461a      	mov	r2, r3
 801a636:	4601      	mov	r1, r0
 801a638:	4630      	mov	r0, r6
 801a63a:	f000 fcbb 	bl	801afb4 <__pow5mult>
 801a63e:	9b06      	ldr	r3, [sp, #24]
 801a640:	2b01      	cmp	r3, #1
 801a642:	4604      	mov	r4, r0
 801a644:	dd7a      	ble.n	801a73c <_dtoa_r+0x7cc>
 801a646:	2300      	movs	r3, #0
 801a648:	9309      	str	r3, [sp, #36]	; 0x24
 801a64a:	6922      	ldr	r2, [r4, #16]
 801a64c:	eb04 0282 	add.w	r2, r4, r2, lsl #2
 801a650:	6910      	ldr	r0, [r2, #16]
 801a652:	f000 fba1 	bl	801ad98 <__hi0bits>
 801a656:	f1c0 0020 	rsb	r0, r0, #32
 801a65a:	9b05      	ldr	r3, [sp, #20]
 801a65c:	4418      	add	r0, r3
 801a65e:	f010 001f 	ands.w	r0, r0, #31
 801a662:	f000 8093 	beq.w	801a78c <_dtoa_r+0x81c>
 801a666:	f1c0 0220 	rsb	r2, r0, #32
 801a66a:	2a04      	cmp	r2, #4
 801a66c:	f340 8085 	ble.w	801a77a <_dtoa_r+0x80a>
 801a670:	9b04      	ldr	r3, [sp, #16]
 801a672:	f1c0 001c 	rsb	r0, r0, #28
 801a676:	4403      	add	r3, r0
 801a678:	9304      	str	r3, [sp, #16]
 801a67a:	9b05      	ldr	r3, [sp, #20]
 801a67c:	4480      	add	r8, r0
 801a67e:	4403      	add	r3, r0
 801a680:	9305      	str	r3, [sp, #20]
 801a682:	9b04      	ldr	r3, [sp, #16]
 801a684:	2b00      	cmp	r3, #0
 801a686:	dd05      	ble.n	801a694 <_dtoa_r+0x724>
 801a688:	4629      	mov	r1, r5
 801a68a:	461a      	mov	r2, r3
 801a68c:	4630      	mov	r0, r6
 801a68e:	f000 fceb 	bl	801b068 <__lshift>
 801a692:	4605      	mov	r5, r0
 801a694:	9b05      	ldr	r3, [sp, #20]
 801a696:	2b00      	cmp	r3, #0
 801a698:	dd05      	ble.n	801a6a6 <_dtoa_r+0x736>
 801a69a:	4621      	mov	r1, r4
 801a69c:	461a      	mov	r2, r3
 801a69e:	4630      	mov	r0, r6
 801a6a0:	f000 fce2 	bl	801b068 <__lshift>
 801a6a4:	4604      	mov	r4, r0
 801a6a6:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 801a6a8:	2b00      	cmp	r3, #0
 801a6aa:	d071      	beq.n	801a790 <_dtoa_r+0x820>
 801a6ac:	4621      	mov	r1, r4
 801a6ae:	4628      	mov	r0, r5
 801a6b0:	f000 fd46 	bl	801b140 <__mcmp>
 801a6b4:	2800      	cmp	r0, #0
 801a6b6:	da6b      	bge.n	801a790 <_dtoa_r+0x820>
 801a6b8:	2300      	movs	r3, #0
 801a6ba:	4629      	mov	r1, r5
 801a6bc:	220a      	movs	r2, #10
 801a6be:	4630      	mov	r0, r6
 801a6c0:	f000 fb24 	bl	801ad0c <__multadd>
 801a6c4:	9b07      	ldr	r3, [sp, #28]
 801a6c6:	f10b 3bff 	add.w	fp, fp, #4294967295
 801a6ca:	4605      	mov	r5, r0
 801a6cc:	2b00      	cmp	r3, #0
 801a6ce:	f000 8197 	beq.w	801aa00 <_dtoa_r+0xa90>
 801a6d2:	4639      	mov	r1, r7
 801a6d4:	2300      	movs	r3, #0
 801a6d6:	220a      	movs	r2, #10
 801a6d8:	4630      	mov	r0, r6
 801a6da:	f000 fb17 	bl	801ad0c <__multadd>
 801a6de:	f1ba 0f00 	cmp.w	sl, #0
 801a6e2:	4607      	mov	r7, r0
 801a6e4:	f300 8093 	bgt.w	801a80e <_dtoa_r+0x89e>
 801a6e8:	9b06      	ldr	r3, [sp, #24]
 801a6ea:	2b02      	cmp	r3, #2
 801a6ec:	dc57      	bgt.n	801a79e <_dtoa_r+0x82e>
 801a6ee:	e08e      	b.n	801a80e <_dtoa_r+0x89e>
 801a6f0:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 801a6f2:	f1c2 0236 	rsb	r2, r2, #54	; 0x36
 801a6f6:	e751      	b.n	801a59c <_dtoa_r+0x62c>
 801a6f8:	f109 34ff 	add.w	r4, r9, #4294967295
 801a6fc:	42a3      	cmp	r3, r4
 801a6fe:	bfbf      	itttt	lt
 801a700:	1ae2      	sublt	r2, r4, r3
 801a702:	9b0a      	ldrlt	r3, [sp, #40]	; 0x28
 801a704:	189b      	addlt	r3, r3, r2
 801a706:	930a      	strlt	r3, [sp, #40]	; 0x28
 801a708:	bfae      	itee	ge
 801a70a:	1b1c      	subge	r4, r3, r4
 801a70c:	4623      	movlt	r3, r4
 801a70e:	2400      	movlt	r4, #0
 801a710:	f1b9 0f00 	cmp.w	r9, #0
 801a714:	bfb5      	itete	lt
 801a716:	9a04      	ldrlt	r2, [sp, #16]
 801a718:	f8dd 8010 	ldrge.w	r8, [sp, #16]
 801a71c:	eba2 0809 	sublt.w	r8, r2, r9
 801a720:	464a      	movge	r2, r9
 801a722:	bfb8      	it	lt
 801a724:	2200      	movlt	r2, #0
 801a726:	e73c      	b.n	801a5a2 <_dtoa_r+0x632>
 801a728:	f8dd 8010 	ldr.w	r8, [sp, #16]
 801a72c:	9f07      	ldr	r7, [sp, #28]
 801a72e:	461c      	mov	r4, r3
 801a730:	e744      	b.n	801a5bc <_dtoa_r+0x64c>
 801a732:	461a      	mov	r2, r3
 801a734:	e770      	b.n	801a618 <_dtoa_r+0x6a8>
 801a736:	9b06      	ldr	r3, [sp, #24]
 801a738:	2b01      	cmp	r3, #1
 801a73a:	dc18      	bgt.n	801a76e <_dtoa_r+0x7fe>
 801a73c:	9b02      	ldr	r3, [sp, #8]
 801a73e:	b9b3      	cbnz	r3, 801a76e <_dtoa_r+0x7fe>
 801a740:	9b03      	ldr	r3, [sp, #12]
 801a742:	f3c3 0213 	ubfx	r2, r3, #0, #20
 801a746:	b9a2      	cbnz	r2, 801a772 <_dtoa_r+0x802>
 801a748:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 801a74c:	0d12      	lsrs	r2, r2, #20
 801a74e:	0512      	lsls	r2, r2, #20
 801a750:	b18a      	cbz	r2, 801a776 <_dtoa_r+0x806>
 801a752:	9b04      	ldr	r3, [sp, #16]
 801a754:	3301      	adds	r3, #1
 801a756:	9304      	str	r3, [sp, #16]
 801a758:	9b05      	ldr	r3, [sp, #20]
 801a75a:	3301      	adds	r3, #1
 801a75c:	9305      	str	r3, [sp, #20]
 801a75e:	2301      	movs	r3, #1
 801a760:	9309      	str	r3, [sp, #36]	; 0x24
 801a762:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801a764:	2b00      	cmp	r3, #0
 801a766:	f47f af70 	bne.w	801a64a <_dtoa_r+0x6da>
 801a76a:	2001      	movs	r0, #1
 801a76c:	e775      	b.n	801a65a <_dtoa_r+0x6ea>
 801a76e:	2300      	movs	r3, #0
 801a770:	e7f6      	b.n	801a760 <_dtoa_r+0x7f0>
 801a772:	9b02      	ldr	r3, [sp, #8]
 801a774:	e7f4      	b.n	801a760 <_dtoa_r+0x7f0>
 801a776:	9209      	str	r2, [sp, #36]	; 0x24
 801a778:	e7f3      	b.n	801a762 <_dtoa_r+0x7f2>
 801a77a:	d082      	beq.n	801a682 <_dtoa_r+0x712>
 801a77c:	9b04      	ldr	r3, [sp, #16]
 801a77e:	321c      	adds	r2, #28
 801a780:	4413      	add	r3, r2
 801a782:	9304      	str	r3, [sp, #16]
 801a784:	9b05      	ldr	r3, [sp, #20]
 801a786:	4490      	add	r8, r2
 801a788:	4413      	add	r3, r2
 801a78a:	e779      	b.n	801a680 <_dtoa_r+0x710>
 801a78c:	4602      	mov	r2, r0
 801a78e:	e7f5      	b.n	801a77c <_dtoa_r+0x80c>
 801a790:	f1b9 0f00 	cmp.w	r9, #0
 801a794:	dc36      	bgt.n	801a804 <_dtoa_r+0x894>
 801a796:	9b06      	ldr	r3, [sp, #24]
 801a798:	2b02      	cmp	r3, #2
 801a79a:	dd33      	ble.n	801a804 <_dtoa_r+0x894>
 801a79c:	46ca      	mov	sl, r9
 801a79e:	f1ba 0f00 	cmp.w	sl, #0
 801a7a2:	d10d      	bne.n	801a7c0 <_dtoa_r+0x850>
 801a7a4:	4621      	mov	r1, r4
 801a7a6:	4653      	mov	r3, sl
 801a7a8:	2205      	movs	r2, #5
 801a7aa:	4630      	mov	r0, r6
 801a7ac:	f000 faae 	bl	801ad0c <__multadd>
 801a7b0:	4601      	mov	r1, r0
 801a7b2:	4604      	mov	r4, r0
 801a7b4:	4628      	mov	r0, r5
 801a7b6:	f000 fcc3 	bl	801b140 <__mcmp>
 801a7ba:	2800      	cmp	r0, #0
 801a7bc:	f73f ade4 	bgt.w	801a388 <_dtoa_r+0x418>
 801a7c0:	9b08      	ldr	r3, [sp, #32]
 801a7c2:	f8dd 8004 	ldr.w	r8, [sp, #4]
 801a7c6:	ea6f 0b03 	mvn.w	fp, r3
 801a7ca:	f04f 0900 	mov.w	r9, #0
 801a7ce:	4621      	mov	r1, r4
 801a7d0:	4630      	mov	r0, r6
 801a7d2:	f000 fa79 	bl	801acc8 <_Bfree>
 801a7d6:	2f00      	cmp	r7, #0
 801a7d8:	f43f aea1 	beq.w	801a51e <_dtoa_r+0x5ae>
 801a7dc:	f1b9 0f00 	cmp.w	r9, #0
 801a7e0:	d005      	beq.n	801a7ee <_dtoa_r+0x87e>
 801a7e2:	45b9      	cmp	r9, r7
 801a7e4:	d003      	beq.n	801a7ee <_dtoa_r+0x87e>
 801a7e6:	4649      	mov	r1, r9
 801a7e8:	4630      	mov	r0, r6
 801a7ea:	f000 fa6d 	bl	801acc8 <_Bfree>
 801a7ee:	4639      	mov	r1, r7
 801a7f0:	4630      	mov	r0, r6
 801a7f2:	f000 fa69 	bl	801acc8 <_Bfree>
 801a7f6:	e692      	b.n	801a51e <_dtoa_r+0x5ae>
 801a7f8:	2400      	movs	r4, #0
 801a7fa:	4627      	mov	r7, r4
 801a7fc:	e7e0      	b.n	801a7c0 <_dtoa_r+0x850>
 801a7fe:	4693      	mov	fp, r2
 801a800:	4627      	mov	r7, r4
 801a802:	e5c1      	b.n	801a388 <_dtoa_r+0x418>
 801a804:	9b07      	ldr	r3, [sp, #28]
 801a806:	46ca      	mov	sl, r9
 801a808:	2b00      	cmp	r3, #0
 801a80a:	f000 8100 	beq.w	801aa0e <_dtoa_r+0xa9e>
 801a80e:	f1b8 0f00 	cmp.w	r8, #0
 801a812:	dd05      	ble.n	801a820 <_dtoa_r+0x8b0>
 801a814:	4639      	mov	r1, r7
 801a816:	4642      	mov	r2, r8
 801a818:	4630      	mov	r0, r6
 801a81a:	f000 fc25 	bl	801b068 <__lshift>
 801a81e:	4607      	mov	r7, r0
 801a820:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801a822:	2b00      	cmp	r3, #0
 801a824:	d05d      	beq.n	801a8e2 <_dtoa_r+0x972>
 801a826:	6879      	ldr	r1, [r7, #4]
 801a828:	4630      	mov	r0, r6
 801a82a:	f000 fa0d 	bl	801ac48 <_Balloc>
 801a82e:	4680      	mov	r8, r0
 801a830:	b928      	cbnz	r0, 801a83e <_dtoa_r+0x8ce>
 801a832:	4b82      	ldr	r3, [pc, #520]	; (801aa3c <_dtoa_r+0xacc>)
 801a834:	4602      	mov	r2, r0
 801a836:	f240 21ef 	movw	r1, #751	; 0x2ef
 801a83a:	f7ff bbb1 	b.w	8019fa0 <_dtoa_r+0x30>
 801a83e:	693a      	ldr	r2, [r7, #16]
 801a840:	3202      	adds	r2, #2
 801a842:	0092      	lsls	r2, r2, #2
 801a844:	f107 010c 	add.w	r1, r7, #12
 801a848:	300c      	adds	r0, #12
 801a84a:	f7ff fadc 	bl	8019e06 <memcpy>
 801a84e:	2201      	movs	r2, #1
 801a850:	4641      	mov	r1, r8
 801a852:	4630      	mov	r0, r6
 801a854:	f000 fc08 	bl	801b068 <__lshift>
 801a858:	9b01      	ldr	r3, [sp, #4]
 801a85a:	3301      	adds	r3, #1
 801a85c:	9304      	str	r3, [sp, #16]
 801a85e:	9b01      	ldr	r3, [sp, #4]
 801a860:	4453      	add	r3, sl
 801a862:	9308      	str	r3, [sp, #32]
 801a864:	9b02      	ldr	r3, [sp, #8]
 801a866:	f003 0301 	and.w	r3, r3, #1
 801a86a:	46b9      	mov	r9, r7
 801a86c:	9307      	str	r3, [sp, #28]
 801a86e:	4607      	mov	r7, r0
 801a870:	9b04      	ldr	r3, [sp, #16]
 801a872:	4621      	mov	r1, r4
 801a874:	3b01      	subs	r3, #1
 801a876:	4628      	mov	r0, r5
 801a878:	9302      	str	r3, [sp, #8]
 801a87a:	f7ff faf1 	bl	8019e60 <quorem>
 801a87e:	4603      	mov	r3, r0
 801a880:	3330      	adds	r3, #48	; 0x30
 801a882:	9005      	str	r0, [sp, #20]
 801a884:	4649      	mov	r1, r9
 801a886:	4628      	mov	r0, r5
 801a888:	9309      	str	r3, [sp, #36]	; 0x24
 801a88a:	f000 fc59 	bl	801b140 <__mcmp>
 801a88e:	463a      	mov	r2, r7
 801a890:	4682      	mov	sl, r0
 801a892:	4621      	mov	r1, r4
 801a894:	4630      	mov	r0, r6
 801a896:	f000 fc6f 	bl	801b178 <__mdiff>
 801a89a:	68c2      	ldr	r2, [r0, #12]
 801a89c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801a89e:	4680      	mov	r8, r0
 801a8a0:	bb0a      	cbnz	r2, 801a8e6 <_dtoa_r+0x976>
 801a8a2:	4601      	mov	r1, r0
 801a8a4:	4628      	mov	r0, r5
 801a8a6:	f000 fc4b 	bl	801b140 <__mcmp>
 801a8aa:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801a8ac:	4602      	mov	r2, r0
 801a8ae:	4641      	mov	r1, r8
 801a8b0:	4630      	mov	r0, r6
 801a8b2:	e9cd 3209 	strd	r3, r2, [sp, #36]	; 0x24
 801a8b6:	f000 fa07 	bl	801acc8 <_Bfree>
 801a8ba:	9b06      	ldr	r3, [sp, #24]
 801a8bc:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 801a8be:	f8dd 8010 	ldr.w	r8, [sp, #16]
 801a8c2:	ea43 0102 	orr.w	r1, r3, r2
 801a8c6:	9b07      	ldr	r3, [sp, #28]
 801a8c8:	4319      	orrs	r1, r3
 801a8ca:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801a8cc:	d10d      	bne.n	801a8ea <_dtoa_r+0x97a>
 801a8ce:	2b39      	cmp	r3, #57	; 0x39
 801a8d0:	d029      	beq.n	801a926 <_dtoa_r+0x9b6>
 801a8d2:	f1ba 0f00 	cmp.w	sl, #0
 801a8d6:	dd01      	ble.n	801a8dc <_dtoa_r+0x96c>
 801a8d8:	9b05      	ldr	r3, [sp, #20]
 801a8da:	3331      	adds	r3, #49	; 0x31
 801a8dc:	9a02      	ldr	r2, [sp, #8]
 801a8de:	7013      	strb	r3, [r2, #0]
 801a8e0:	e775      	b.n	801a7ce <_dtoa_r+0x85e>
 801a8e2:	4638      	mov	r0, r7
 801a8e4:	e7b8      	b.n	801a858 <_dtoa_r+0x8e8>
 801a8e6:	2201      	movs	r2, #1
 801a8e8:	e7e1      	b.n	801a8ae <_dtoa_r+0x93e>
 801a8ea:	f1ba 0f00 	cmp.w	sl, #0
 801a8ee:	db06      	blt.n	801a8fe <_dtoa_r+0x98e>
 801a8f0:	9906      	ldr	r1, [sp, #24]
 801a8f2:	ea41 0a0a 	orr.w	sl, r1, sl
 801a8f6:	9907      	ldr	r1, [sp, #28]
 801a8f8:	ea5a 0a01 	orrs.w	sl, sl, r1
 801a8fc:	d120      	bne.n	801a940 <_dtoa_r+0x9d0>
 801a8fe:	2a00      	cmp	r2, #0
 801a900:	ddec      	ble.n	801a8dc <_dtoa_r+0x96c>
 801a902:	4629      	mov	r1, r5
 801a904:	2201      	movs	r2, #1
 801a906:	4630      	mov	r0, r6
 801a908:	9304      	str	r3, [sp, #16]
 801a90a:	f000 fbad 	bl	801b068 <__lshift>
 801a90e:	4621      	mov	r1, r4
 801a910:	4605      	mov	r5, r0
 801a912:	f000 fc15 	bl	801b140 <__mcmp>
 801a916:	2800      	cmp	r0, #0
 801a918:	9b04      	ldr	r3, [sp, #16]
 801a91a:	dc02      	bgt.n	801a922 <_dtoa_r+0x9b2>
 801a91c:	d1de      	bne.n	801a8dc <_dtoa_r+0x96c>
 801a91e:	07da      	lsls	r2, r3, #31
 801a920:	d5dc      	bpl.n	801a8dc <_dtoa_r+0x96c>
 801a922:	2b39      	cmp	r3, #57	; 0x39
 801a924:	d1d8      	bne.n	801a8d8 <_dtoa_r+0x968>
 801a926:	9a02      	ldr	r2, [sp, #8]
 801a928:	2339      	movs	r3, #57	; 0x39
 801a92a:	7013      	strb	r3, [r2, #0]
 801a92c:	4643      	mov	r3, r8
 801a92e:	4698      	mov	r8, r3
 801a930:	3b01      	subs	r3, #1
 801a932:	f818 2c01 	ldrb.w	r2, [r8, #-1]
 801a936:	2a39      	cmp	r2, #57	; 0x39
 801a938:	d051      	beq.n	801a9de <_dtoa_r+0xa6e>
 801a93a:	3201      	adds	r2, #1
 801a93c:	701a      	strb	r2, [r3, #0]
 801a93e:	e746      	b.n	801a7ce <_dtoa_r+0x85e>
 801a940:	2a00      	cmp	r2, #0
 801a942:	dd03      	ble.n	801a94c <_dtoa_r+0x9dc>
 801a944:	2b39      	cmp	r3, #57	; 0x39
 801a946:	d0ee      	beq.n	801a926 <_dtoa_r+0x9b6>
 801a948:	3301      	adds	r3, #1
 801a94a:	e7c7      	b.n	801a8dc <_dtoa_r+0x96c>
 801a94c:	9a04      	ldr	r2, [sp, #16]
 801a94e:	9908      	ldr	r1, [sp, #32]
 801a950:	f802 3c01 	strb.w	r3, [r2, #-1]
 801a954:	428a      	cmp	r2, r1
 801a956:	d02b      	beq.n	801a9b0 <_dtoa_r+0xa40>
 801a958:	4629      	mov	r1, r5
 801a95a:	2300      	movs	r3, #0
 801a95c:	220a      	movs	r2, #10
 801a95e:	4630      	mov	r0, r6
 801a960:	f000 f9d4 	bl	801ad0c <__multadd>
 801a964:	45b9      	cmp	r9, r7
 801a966:	4605      	mov	r5, r0
 801a968:	f04f 0300 	mov.w	r3, #0
 801a96c:	f04f 020a 	mov.w	r2, #10
 801a970:	4649      	mov	r1, r9
 801a972:	4630      	mov	r0, r6
 801a974:	d107      	bne.n	801a986 <_dtoa_r+0xa16>
 801a976:	f000 f9c9 	bl	801ad0c <__multadd>
 801a97a:	4681      	mov	r9, r0
 801a97c:	4607      	mov	r7, r0
 801a97e:	9b04      	ldr	r3, [sp, #16]
 801a980:	3301      	adds	r3, #1
 801a982:	9304      	str	r3, [sp, #16]
 801a984:	e774      	b.n	801a870 <_dtoa_r+0x900>
 801a986:	f000 f9c1 	bl	801ad0c <__multadd>
 801a98a:	4639      	mov	r1, r7
 801a98c:	4681      	mov	r9, r0
 801a98e:	2300      	movs	r3, #0
 801a990:	220a      	movs	r2, #10
 801a992:	4630      	mov	r0, r6
 801a994:	f000 f9ba 	bl	801ad0c <__multadd>
 801a998:	4607      	mov	r7, r0
 801a99a:	e7f0      	b.n	801a97e <_dtoa_r+0xa0e>
 801a99c:	f1ba 0f00 	cmp.w	sl, #0
 801a9a0:	9a01      	ldr	r2, [sp, #4]
 801a9a2:	bfcc      	ite	gt
 801a9a4:	46d0      	movgt	r8, sl
 801a9a6:	f04f 0801 	movle.w	r8, #1
 801a9aa:	4490      	add	r8, r2
 801a9ac:	f04f 0900 	mov.w	r9, #0
 801a9b0:	4629      	mov	r1, r5
 801a9b2:	2201      	movs	r2, #1
 801a9b4:	4630      	mov	r0, r6
 801a9b6:	9302      	str	r3, [sp, #8]
 801a9b8:	f000 fb56 	bl	801b068 <__lshift>
 801a9bc:	4621      	mov	r1, r4
 801a9be:	4605      	mov	r5, r0
 801a9c0:	f000 fbbe 	bl	801b140 <__mcmp>
 801a9c4:	2800      	cmp	r0, #0
 801a9c6:	dcb1      	bgt.n	801a92c <_dtoa_r+0x9bc>
 801a9c8:	d102      	bne.n	801a9d0 <_dtoa_r+0xa60>
 801a9ca:	9b02      	ldr	r3, [sp, #8]
 801a9cc:	07db      	lsls	r3, r3, #31
 801a9ce:	d4ad      	bmi.n	801a92c <_dtoa_r+0x9bc>
 801a9d0:	4643      	mov	r3, r8
 801a9d2:	4698      	mov	r8, r3
 801a9d4:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 801a9d8:	2a30      	cmp	r2, #48	; 0x30
 801a9da:	d0fa      	beq.n	801a9d2 <_dtoa_r+0xa62>
 801a9dc:	e6f7      	b.n	801a7ce <_dtoa_r+0x85e>
 801a9de:	9a01      	ldr	r2, [sp, #4]
 801a9e0:	429a      	cmp	r2, r3
 801a9e2:	d1a4      	bne.n	801a92e <_dtoa_r+0x9be>
 801a9e4:	f10b 0b01 	add.w	fp, fp, #1
 801a9e8:	2331      	movs	r3, #49	; 0x31
 801a9ea:	e778      	b.n	801a8de <_dtoa_r+0x96e>
 801a9ec:	4b14      	ldr	r3, [pc, #80]	; (801aa40 <_dtoa_r+0xad0>)
 801a9ee:	f7ff bb2a 	b.w	801a046 <_dtoa_r+0xd6>
 801a9f2:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 801a9f4:	2b00      	cmp	r3, #0
 801a9f6:	f47f ab05 	bne.w	801a004 <_dtoa_r+0x94>
 801a9fa:	4b12      	ldr	r3, [pc, #72]	; (801aa44 <_dtoa_r+0xad4>)
 801a9fc:	f7ff bb23 	b.w	801a046 <_dtoa_r+0xd6>
 801aa00:	f1ba 0f00 	cmp.w	sl, #0
 801aa04:	dc03      	bgt.n	801aa0e <_dtoa_r+0xa9e>
 801aa06:	9b06      	ldr	r3, [sp, #24]
 801aa08:	2b02      	cmp	r3, #2
 801aa0a:	f73f aec8 	bgt.w	801a79e <_dtoa_r+0x82e>
 801aa0e:	f8dd 8004 	ldr.w	r8, [sp, #4]
 801aa12:	4621      	mov	r1, r4
 801aa14:	4628      	mov	r0, r5
 801aa16:	f7ff fa23 	bl	8019e60 <quorem>
 801aa1a:	f100 0330 	add.w	r3, r0, #48	; 0x30
 801aa1e:	f808 3b01 	strb.w	r3, [r8], #1
 801aa22:	9a01      	ldr	r2, [sp, #4]
 801aa24:	eba8 0202 	sub.w	r2, r8, r2
 801aa28:	4592      	cmp	sl, r2
 801aa2a:	ddb7      	ble.n	801a99c <_dtoa_r+0xa2c>
 801aa2c:	4629      	mov	r1, r5
 801aa2e:	2300      	movs	r3, #0
 801aa30:	220a      	movs	r2, #10
 801aa32:	4630      	mov	r0, r6
 801aa34:	f000 f96a 	bl	801ad0c <__multadd>
 801aa38:	4605      	mov	r5, r0
 801aa3a:	e7ea      	b.n	801aa12 <_dtoa_r+0xaa2>
 801aa3c:	0801ef4b 	.word	0x0801ef4b
 801aa40:	0801ee86 	.word	0x0801ee86
 801aa44:	0801eee6 	.word	0x0801eee6

0801aa48 <_free_r>:
 801aa48:	b537      	push	{r0, r1, r2, r4, r5, lr}
 801aa4a:	2900      	cmp	r1, #0
 801aa4c:	d044      	beq.n	801aad8 <_free_r+0x90>
 801aa4e:	f851 3c04 	ldr.w	r3, [r1, #-4]
 801aa52:	9001      	str	r0, [sp, #4]
 801aa54:	2b00      	cmp	r3, #0
 801aa56:	f1a1 0404 	sub.w	r4, r1, #4
 801aa5a:	bfb8      	it	lt
 801aa5c:	18e4      	addlt	r4, r4, r3
 801aa5e:	f000 f8e7 	bl	801ac30 <__malloc_lock>
 801aa62:	4a1e      	ldr	r2, [pc, #120]	; (801aadc <_free_r+0x94>)
 801aa64:	9801      	ldr	r0, [sp, #4]
 801aa66:	6813      	ldr	r3, [r2, #0]
 801aa68:	b933      	cbnz	r3, 801aa78 <_free_r+0x30>
 801aa6a:	6063      	str	r3, [r4, #4]
 801aa6c:	6014      	str	r4, [r2, #0]
 801aa6e:	b003      	add	sp, #12
 801aa70:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 801aa74:	f000 b8e2 	b.w	801ac3c <__malloc_unlock>
 801aa78:	42a3      	cmp	r3, r4
 801aa7a:	d908      	bls.n	801aa8e <_free_r+0x46>
 801aa7c:	6825      	ldr	r5, [r4, #0]
 801aa7e:	1961      	adds	r1, r4, r5
 801aa80:	428b      	cmp	r3, r1
 801aa82:	bf01      	itttt	eq
 801aa84:	6819      	ldreq	r1, [r3, #0]
 801aa86:	685b      	ldreq	r3, [r3, #4]
 801aa88:	1949      	addeq	r1, r1, r5
 801aa8a:	6021      	streq	r1, [r4, #0]
 801aa8c:	e7ed      	b.n	801aa6a <_free_r+0x22>
 801aa8e:	461a      	mov	r2, r3
 801aa90:	685b      	ldr	r3, [r3, #4]
 801aa92:	b10b      	cbz	r3, 801aa98 <_free_r+0x50>
 801aa94:	42a3      	cmp	r3, r4
 801aa96:	d9fa      	bls.n	801aa8e <_free_r+0x46>
 801aa98:	6811      	ldr	r1, [r2, #0]
 801aa9a:	1855      	adds	r5, r2, r1
 801aa9c:	42a5      	cmp	r5, r4
 801aa9e:	d10b      	bne.n	801aab8 <_free_r+0x70>
 801aaa0:	6824      	ldr	r4, [r4, #0]
 801aaa2:	4421      	add	r1, r4
 801aaa4:	1854      	adds	r4, r2, r1
 801aaa6:	42a3      	cmp	r3, r4
 801aaa8:	6011      	str	r1, [r2, #0]
 801aaaa:	d1e0      	bne.n	801aa6e <_free_r+0x26>
 801aaac:	681c      	ldr	r4, [r3, #0]
 801aaae:	685b      	ldr	r3, [r3, #4]
 801aab0:	6053      	str	r3, [r2, #4]
 801aab2:	440c      	add	r4, r1
 801aab4:	6014      	str	r4, [r2, #0]
 801aab6:	e7da      	b.n	801aa6e <_free_r+0x26>
 801aab8:	d902      	bls.n	801aac0 <_free_r+0x78>
 801aaba:	230c      	movs	r3, #12
 801aabc:	6003      	str	r3, [r0, #0]
 801aabe:	e7d6      	b.n	801aa6e <_free_r+0x26>
 801aac0:	6825      	ldr	r5, [r4, #0]
 801aac2:	1961      	adds	r1, r4, r5
 801aac4:	428b      	cmp	r3, r1
 801aac6:	bf04      	itt	eq
 801aac8:	6819      	ldreq	r1, [r3, #0]
 801aaca:	685b      	ldreq	r3, [r3, #4]
 801aacc:	6063      	str	r3, [r4, #4]
 801aace:	bf04      	itt	eq
 801aad0:	1949      	addeq	r1, r1, r5
 801aad2:	6021      	streq	r1, [r4, #0]
 801aad4:	6054      	str	r4, [r2, #4]
 801aad6:	e7ca      	b.n	801aa6e <_free_r+0x26>
 801aad8:	b003      	add	sp, #12
 801aada:	bd30      	pop	{r4, r5, pc}
 801aadc:	200072e4 	.word	0x200072e4

0801aae0 <malloc>:
 801aae0:	4b02      	ldr	r3, [pc, #8]	; (801aaec <malloc+0xc>)
 801aae2:	4601      	mov	r1, r0
 801aae4:	6818      	ldr	r0, [r3, #0]
 801aae6:	f000 b823 	b.w	801ab30 <_malloc_r>
 801aaea:	bf00      	nop
 801aaec:	200000bc 	.word	0x200000bc

0801aaf0 <sbrk_aligned>:
 801aaf0:	b570      	push	{r4, r5, r6, lr}
 801aaf2:	4e0e      	ldr	r6, [pc, #56]	; (801ab2c <sbrk_aligned+0x3c>)
 801aaf4:	460c      	mov	r4, r1
 801aaf6:	6831      	ldr	r1, [r6, #0]
 801aaf8:	4605      	mov	r5, r0
 801aafa:	b911      	cbnz	r1, 801ab02 <sbrk_aligned+0x12>
 801aafc:	f000 fea8 	bl	801b850 <_sbrk_r>
 801ab00:	6030      	str	r0, [r6, #0]
 801ab02:	4621      	mov	r1, r4
 801ab04:	4628      	mov	r0, r5
 801ab06:	f000 fea3 	bl	801b850 <_sbrk_r>
 801ab0a:	1c43      	adds	r3, r0, #1
 801ab0c:	d00a      	beq.n	801ab24 <sbrk_aligned+0x34>
 801ab0e:	1cc4      	adds	r4, r0, #3
 801ab10:	f024 0403 	bic.w	r4, r4, #3
 801ab14:	42a0      	cmp	r0, r4
 801ab16:	d007      	beq.n	801ab28 <sbrk_aligned+0x38>
 801ab18:	1a21      	subs	r1, r4, r0
 801ab1a:	4628      	mov	r0, r5
 801ab1c:	f000 fe98 	bl	801b850 <_sbrk_r>
 801ab20:	3001      	adds	r0, #1
 801ab22:	d101      	bne.n	801ab28 <sbrk_aligned+0x38>
 801ab24:	f04f 34ff 	mov.w	r4, #4294967295
 801ab28:	4620      	mov	r0, r4
 801ab2a:	bd70      	pop	{r4, r5, r6, pc}
 801ab2c:	200072e8 	.word	0x200072e8

0801ab30 <_malloc_r>:
 801ab30:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 801ab34:	1ccd      	adds	r5, r1, #3
 801ab36:	f025 0503 	bic.w	r5, r5, #3
 801ab3a:	3508      	adds	r5, #8
 801ab3c:	2d0c      	cmp	r5, #12
 801ab3e:	bf38      	it	cc
 801ab40:	250c      	movcc	r5, #12
 801ab42:	2d00      	cmp	r5, #0
 801ab44:	4607      	mov	r7, r0
 801ab46:	db01      	blt.n	801ab4c <_malloc_r+0x1c>
 801ab48:	42a9      	cmp	r1, r5
 801ab4a:	d905      	bls.n	801ab58 <_malloc_r+0x28>
 801ab4c:	230c      	movs	r3, #12
 801ab4e:	603b      	str	r3, [r7, #0]
 801ab50:	2600      	movs	r6, #0
 801ab52:	4630      	mov	r0, r6
 801ab54:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801ab58:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 801ac2c <_malloc_r+0xfc>
 801ab5c:	f000 f868 	bl	801ac30 <__malloc_lock>
 801ab60:	f8d8 3000 	ldr.w	r3, [r8]
 801ab64:	461c      	mov	r4, r3
 801ab66:	bb5c      	cbnz	r4, 801abc0 <_malloc_r+0x90>
 801ab68:	4629      	mov	r1, r5
 801ab6a:	4638      	mov	r0, r7
 801ab6c:	f7ff ffc0 	bl	801aaf0 <sbrk_aligned>
 801ab70:	1c43      	adds	r3, r0, #1
 801ab72:	4604      	mov	r4, r0
 801ab74:	d155      	bne.n	801ac22 <_malloc_r+0xf2>
 801ab76:	f8d8 4000 	ldr.w	r4, [r8]
 801ab7a:	4626      	mov	r6, r4
 801ab7c:	2e00      	cmp	r6, #0
 801ab7e:	d145      	bne.n	801ac0c <_malloc_r+0xdc>
 801ab80:	2c00      	cmp	r4, #0
 801ab82:	d048      	beq.n	801ac16 <_malloc_r+0xe6>
 801ab84:	6823      	ldr	r3, [r4, #0]
 801ab86:	4631      	mov	r1, r6
 801ab88:	4638      	mov	r0, r7
 801ab8a:	eb04 0903 	add.w	r9, r4, r3
 801ab8e:	f000 fe5f 	bl	801b850 <_sbrk_r>
 801ab92:	4581      	cmp	r9, r0
 801ab94:	d13f      	bne.n	801ac16 <_malloc_r+0xe6>
 801ab96:	6821      	ldr	r1, [r4, #0]
 801ab98:	1a6d      	subs	r5, r5, r1
 801ab9a:	4629      	mov	r1, r5
 801ab9c:	4638      	mov	r0, r7
 801ab9e:	f7ff ffa7 	bl	801aaf0 <sbrk_aligned>
 801aba2:	3001      	adds	r0, #1
 801aba4:	d037      	beq.n	801ac16 <_malloc_r+0xe6>
 801aba6:	6823      	ldr	r3, [r4, #0]
 801aba8:	442b      	add	r3, r5
 801abaa:	6023      	str	r3, [r4, #0]
 801abac:	f8d8 3000 	ldr.w	r3, [r8]
 801abb0:	2b00      	cmp	r3, #0
 801abb2:	d038      	beq.n	801ac26 <_malloc_r+0xf6>
 801abb4:	685a      	ldr	r2, [r3, #4]
 801abb6:	42a2      	cmp	r2, r4
 801abb8:	d12b      	bne.n	801ac12 <_malloc_r+0xe2>
 801abba:	2200      	movs	r2, #0
 801abbc:	605a      	str	r2, [r3, #4]
 801abbe:	e00f      	b.n	801abe0 <_malloc_r+0xb0>
 801abc0:	6822      	ldr	r2, [r4, #0]
 801abc2:	1b52      	subs	r2, r2, r5
 801abc4:	d41f      	bmi.n	801ac06 <_malloc_r+0xd6>
 801abc6:	2a0b      	cmp	r2, #11
 801abc8:	d917      	bls.n	801abfa <_malloc_r+0xca>
 801abca:	1961      	adds	r1, r4, r5
 801abcc:	42a3      	cmp	r3, r4
 801abce:	6025      	str	r5, [r4, #0]
 801abd0:	bf18      	it	ne
 801abd2:	6059      	strne	r1, [r3, #4]
 801abd4:	6863      	ldr	r3, [r4, #4]
 801abd6:	bf08      	it	eq
 801abd8:	f8c8 1000 	streq.w	r1, [r8]
 801abdc:	5162      	str	r2, [r4, r5]
 801abde:	604b      	str	r3, [r1, #4]
 801abe0:	4638      	mov	r0, r7
 801abe2:	f104 060b 	add.w	r6, r4, #11
 801abe6:	f000 f829 	bl	801ac3c <__malloc_unlock>
 801abea:	f026 0607 	bic.w	r6, r6, #7
 801abee:	1d23      	adds	r3, r4, #4
 801abf0:	1af2      	subs	r2, r6, r3
 801abf2:	d0ae      	beq.n	801ab52 <_malloc_r+0x22>
 801abf4:	1b9b      	subs	r3, r3, r6
 801abf6:	50a3      	str	r3, [r4, r2]
 801abf8:	e7ab      	b.n	801ab52 <_malloc_r+0x22>
 801abfa:	42a3      	cmp	r3, r4
 801abfc:	6862      	ldr	r2, [r4, #4]
 801abfe:	d1dd      	bne.n	801abbc <_malloc_r+0x8c>
 801ac00:	f8c8 2000 	str.w	r2, [r8]
 801ac04:	e7ec      	b.n	801abe0 <_malloc_r+0xb0>
 801ac06:	4623      	mov	r3, r4
 801ac08:	6864      	ldr	r4, [r4, #4]
 801ac0a:	e7ac      	b.n	801ab66 <_malloc_r+0x36>
 801ac0c:	4634      	mov	r4, r6
 801ac0e:	6876      	ldr	r6, [r6, #4]
 801ac10:	e7b4      	b.n	801ab7c <_malloc_r+0x4c>
 801ac12:	4613      	mov	r3, r2
 801ac14:	e7cc      	b.n	801abb0 <_malloc_r+0x80>
 801ac16:	230c      	movs	r3, #12
 801ac18:	603b      	str	r3, [r7, #0]
 801ac1a:	4638      	mov	r0, r7
 801ac1c:	f000 f80e 	bl	801ac3c <__malloc_unlock>
 801ac20:	e797      	b.n	801ab52 <_malloc_r+0x22>
 801ac22:	6025      	str	r5, [r4, #0]
 801ac24:	e7dc      	b.n	801abe0 <_malloc_r+0xb0>
 801ac26:	605b      	str	r3, [r3, #4]
 801ac28:	deff      	udf	#255	; 0xff
 801ac2a:	bf00      	nop
 801ac2c:	200072e4 	.word	0x200072e4

0801ac30 <__malloc_lock>:
 801ac30:	4801      	ldr	r0, [pc, #4]	; (801ac38 <__malloc_lock+0x8>)
 801ac32:	f7ff b8e6 	b.w	8019e02 <__retarget_lock_acquire_recursive>
 801ac36:	bf00      	nop
 801ac38:	200072e0 	.word	0x200072e0

0801ac3c <__malloc_unlock>:
 801ac3c:	4801      	ldr	r0, [pc, #4]	; (801ac44 <__malloc_unlock+0x8>)
 801ac3e:	f7ff b8e1 	b.w	8019e04 <__retarget_lock_release_recursive>
 801ac42:	bf00      	nop
 801ac44:	200072e0 	.word	0x200072e0

0801ac48 <_Balloc>:
 801ac48:	b570      	push	{r4, r5, r6, lr}
 801ac4a:	69c6      	ldr	r6, [r0, #28]
 801ac4c:	4604      	mov	r4, r0
 801ac4e:	460d      	mov	r5, r1
 801ac50:	b976      	cbnz	r6, 801ac70 <_Balloc+0x28>
 801ac52:	2010      	movs	r0, #16
 801ac54:	f7ff ff44 	bl	801aae0 <malloc>
 801ac58:	4602      	mov	r2, r0
 801ac5a:	61e0      	str	r0, [r4, #28]
 801ac5c:	b920      	cbnz	r0, 801ac68 <_Balloc+0x20>
 801ac5e:	4b18      	ldr	r3, [pc, #96]	; (801acc0 <_Balloc+0x78>)
 801ac60:	4818      	ldr	r0, [pc, #96]	; (801acc4 <_Balloc+0x7c>)
 801ac62:	216b      	movs	r1, #107	; 0x6b
 801ac64:	f7ff f8de 	bl	8019e24 <__assert_func>
 801ac68:	e9c0 6601 	strd	r6, r6, [r0, #4]
 801ac6c:	6006      	str	r6, [r0, #0]
 801ac6e:	60c6      	str	r6, [r0, #12]
 801ac70:	69e6      	ldr	r6, [r4, #28]
 801ac72:	68f3      	ldr	r3, [r6, #12]
 801ac74:	b183      	cbz	r3, 801ac98 <_Balloc+0x50>
 801ac76:	69e3      	ldr	r3, [r4, #28]
 801ac78:	68db      	ldr	r3, [r3, #12]
 801ac7a:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 801ac7e:	b9b8      	cbnz	r0, 801acb0 <_Balloc+0x68>
 801ac80:	2101      	movs	r1, #1
 801ac82:	fa01 f605 	lsl.w	r6, r1, r5
 801ac86:	1d72      	adds	r2, r6, #5
 801ac88:	0092      	lsls	r2, r2, #2
 801ac8a:	4620      	mov	r0, r4
 801ac8c:	f000 fdf7 	bl	801b87e <_calloc_r>
 801ac90:	b160      	cbz	r0, 801acac <_Balloc+0x64>
 801ac92:	e9c0 5601 	strd	r5, r6, [r0, #4]
 801ac96:	e00e      	b.n	801acb6 <_Balloc+0x6e>
 801ac98:	2221      	movs	r2, #33	; 0x21
 801ac9a:	2104      	movs	r1, #4
 801ac9c:	4620      	mov	r0, r4
 801ac9e:	f000 fdee 	bl	801b87e <_calloc_r>
 801aca2:	69e3      	ldr	r3, [r4, #28]
 801aca4:	60f0      	str	r0, [r6, #12]
 801aca6:	68db      	ldr	r3, [r3, #12]
 801aca8:	2b00      	cmp	r3, #0
 801acaa:	d1e4      	bne.n	801ac76 <_Balloc+0x2e>
 801acac:	2000      	movs	r0, #0
 801acae:	bd70      	pop	{r4, r5, r6, pc}
 801acb0:	6802      	ldr	r2, [r0, #0]
 801acb2:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 801acb6:	2300      	movs	r3, #0
 801acb8:	e9c0 3303 	strd	r3, r3, [r0, #12]
 801acbc:	e7f7      	b.n	801acae <_Balloc+0x66>
 801acbe:	bf00      	nop
 801acc0:	0801ed06 	.word	0x0801ed06
 801acc4:	0801ef5c 	.word	0x0801ef5c

0801acc8 <_Bfree>:
 801acc8:	b570      	push	{r4, r5, r6, lr}
 801acca:	69c6      	ldr	r6, [r0, #28]
 801accc:	4605      	mov	r5, r0
 801acce:	460c      	mov	r4, r1
 801acd0:	b976      	cbnz	r6, 801acf0 <_Bfree+0x28>
 801acd2:	2010      	movs	r0, #16
 801acd4:	f7ff ff04 	bl	801aae0 <malloc>
 801acd8:	4602      	mov	r2, r0
 801acda:	61e8      	str	r0, [r5, #28]
 801acdc:	b920      	cbnz	r0, 801ace8 <_Bfree+0x20>
 801acde:	4b09      	ldr	r3, [pc, #36]	; (801ad04 <_Bfree+0x3c>)
 801ace0:	4809      	ldr	r0, [pc, #36]	; (801ad08 <_Bfree+0x40>)
 801ace2:	218f      	movs	r1, #143	; 0x8f
 801ace4:	f7ff f89e 	bl	8019e24 <__assert_func>
 801ace8:	e9c0 6601 	strd	r6, r6, [r0, #4]
 801acec:	6006      	str	r6, [r0, #0]
 801acee:	60c6      	str	r6, [r0, #12]
 801acf0:	b13c      	cbz	r4, 801ad02 <_Bfree+0x3a>
 801acf2:	69eb      	ldr	r3, [r5, #28]
 801acf4:	6862      	ldr	r2, [r4, #4]
 801acf6:	68db      	ldr	r3, [r3, #12]
 801acf8:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 801acfc:	6021      	str	r1, [r4, #0]
 801acfe:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 801ad02:	bd70      	pop	{r4, r5, r6, pc}
 801ad04:	0801ed06 	.word	0x0801ed06
 801ad08:	0801ef5c 	.word	0x0801ef5c

0801ad0c <__multadd>:
 801ad0c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801ad10:	690d      	ldr	r5, [r1, #16]
 801ad12:	4607      	mov	r7, r0
 801ad14:	460c      	mov	r4, r1
 801ad16:	461e      	mov	r6, r3
 801ad18:	f101 0c14 	add.w	ip, r1, #20
 801ad1c:	2000      	movs	r0, #0
 801ad1e:	f8dc 3000 	ldr.w	r3, [ip]
 801ad22:	b299      	uxth	r1, r3
 801ad24:	fb02 6101 	mla	r1, r2, r1, r6
 801ad28:	0c1e      	lsrs	r6, r3, #16
 801ad2a:	0c0b      	lsrs	r3, r1, #16
 801ad2c:	fb02 3306 	mla	r3, r2, r6, r3
 801ad30:	b289      	uxth	r1, r1
 801ad32:	3001      	adds	r0, #1
 801ad34:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 801ad38:	4285      	cmp	r5, r0
 801ad3a:	f84c 1b04 	str.w	r1, [ip], #4
 801ad3e:	ea4f 4613 	mov.w	r6, r3, lsr #16
 801ad42:	dcec      	bgt.n	801ad1e <__multadd+0x12>
 801ad44:	b30e      	cbz	r6, 801ad8a <__multadd+0x7e>
 801ad46:	68a3      	ldr	r3, [r4, #8]
 801ad48:	42ab      	cmp	r3, r5
 801ad4a:	dc19      	bgt.n	801ad80 <__multadd+0x74>
 801ad4c:	6861      	ldr	r1, [r4, #4]
 801ad4e:	4638      	mov	r0, r7
 801ad50:	3101      	adds	r1, #1
 801ad52:	f7ff ff79 	bl	801ac48 <_Balloc>
 801ad56:	4680      	mov	r8, r0
 801ad58:	b928      	cbnz	r0, 801ad66 <__multadd+0x5a>
 801ad5a:	4602      	mov	r2, r0
 801ad5c:	4b0c      	ldr	r3, [pc, #48]	; (801ad90 <__multadd+0x84>)
 801ad5e:	480d      	ldr	r0, [pc, #52]	; (801ad94 <__multadd+0x88>)
 801ad60:	21ba      	movs	r1, #186	; 0xba
 801ad62:	f7ff f85f 	bl	8019e24 <__assert_func>
 801ad66:	6922      	ldr	r2, [r4, #16]
 801ad68:	3202      	adds	r2, #2
 801ad6a:	f104 010c 	add.w	r1, r4, #12
 801ad6e:	0092      	lsls	r2, r2, #2
 801ad70:	300c      	adds	r0, #12
 801ad72:	f7ff f848 	bl	8019e06 <memcpy>
 801ad76:	4621      	mov	r1, r4
 801ad78:	4638      	mov	r0, r7
 801ad7a:	f7ff ffa5 	bl	801acc8 <_Bfree>
 801ad7e:	4644      	mov	r4, r8
 801ad80:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 801ad84:	3501      	adds	r5, #1
 801ad86:	615e      	str	r6, [r3, #20]
 801ad88:	6125      	str	r5, [r4, #16]
 801ad8a:	4620      	mov	r0, r4
 801ad8c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801ad90:	0801ef4b 	.word	0x0801ef4b
 801ad94:	0801ef5c 	.word	0x0801ef5c

0801ad98 <__hi0bits>:
 801ad98:	0c03      	lsrs	r3, r0, #16
 801ad9a:	041b      	lsls	r3, r3, #16
 801ad9c:	b9d3      	cbnz	r3, 801add4 <__hi0bits+0x3c>
 801ad9e:	0400      	lsls	r0, r0, #16
 801ada0:	2310      	movs	r3, #16
 801ada2:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 801ada6:	bf04      	itt	eq
 801ada8:	0200      	lsleq	r0, r0, #8
 801adaa:	3308      	addeq	r3, #8
 801adac:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 801adb0:	bf04      	itt	eq
 801adb2:	0100      	lsleq	r0, r0, #4
 801adb4:	3304      	addeq	r3, #4
 801adb6:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 801adba:	bf04      	itt	eq
 801adbc:	0080      	lsleq	r0, r0, #2
 801adbe:	3302      	addeq	r3, #2
 801adc0:	2800      	cmp	r0, #0
 801adc2:	db05      	blt.n	801add0 <__hi0bits+0x38>
 801adc4:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 801adc8:	f103 0301 	add.w	r3, r3, #1
 801adcc:	bf08      	it	eq
 801adce:	2320      	moveq	r3, #32
 801add0:	4618      	mov	r0, r3
 801add2:	4770      	bx	lr
 801add4:	2300      	movs	r3, #0
 801add6:	e7e4      	b.n	801ada2 <__hi0bits+0xa>

0801add8 <__lo0bits>:
 801add8:	6803      	ldr	r3, [r0, #0]
 801adda:	f013 0207 	ands.w	r2, r3, #7
 801adde:	d00c      	beq.n	801adfa <__lo0bits+0x22>
 801ade0:	07d9      	lsls	r1, r3, #31
 801ade2:	d422      	bmi.n	801ae2a <__lo0bits+0x52>
 801ade4:	079a      	lsls	r2, r3, #30
 801ade6:	bf49      	itett	mi
 801ade8:	085b      	lsrmi	r3, r3, #1
 801adea:	089b      	lsrpl	r3, r3, #2
 801adec:	6003      	strmi	r3, [r0, #0]
 801adee:	2201      	movmi	r2, #1
 801adf0:	bf5c      	itt	pl
 801adf2:	6003      	strpl	r3, [r0, #0]
 801adf4:	2202      	movpl	r2, #2
 801adf6:	4610      	mov	r0, r2
 801adf8:	4770      	bx	lr
 801adfa:	b299      	uxth	r1, r3
 801adfc:	b909      	cbnz	r1, 801ae02 <__lo0bits+0x2a>
 801adfe:	0c1b      	lsrs	r3, r3, #16
 801ae00:	2210      	movs	r2, #16
 801ae02:	b2d9      	uxtb	r1, r3
 801ae04:	b909      	cbnz	r1, 801ae0a <__lo0bits+0x32>
 801ae06:	3208      	adds	r2, #8
 801ae08:	0a1b      	lsrs	r3, r3, #8
 801ae0a:	0719      	lsls	r1, r3, #28
 801ae0c:	bf04      	itt	eq
 801ae0e:	091b      	lsreq	r3, r3, #4
 801ae10:	3204      	addeq	r2, #4
 801ae12:	0799      	lsls	r1, r3, #30
 801ae14:	bf04      	itt	eq
 801ae16:	089b      	lsreq	r3, r3, #2
 801ae18:	3202      	addeq	r2, #2
 801ae1a:	07d9      	lsls	r1, r3, #31
 801ae1c:	d403      	bmi.n	801ae26 <__lo0bits+0x4e>
 801ae1e:	085b      	lsrs	r3, r3, #1
 801ae20:	f102 0201 	add.w	r2, r2, #1
 801ae24:	d003      	beq.n	801ae2e <__lo0bits+0x56>
 801ae26:	6003      	str	r3, [r0, #0]
 801ae28:	e7e5      	b.n	801adf6 <__lo0bits+0x1e>
 801ae2a:	2200      	movs	r2, #0
 801ae2c:	e7e3      	b.n	801adf6 <__lo0bits+0x1e>
 801ae2e:	2220      	movs	r2, #32
 801ae30:	e7e1      	b.n	801adf6 <__lo0bits+0x1e>
	...

0801ae34 <__i2b>:
 801ae34:	b510      	push	{r4, lr}
 801ae36:	460c      	mov	r4, r1
 801ae38:	2101      	movs	r1, #1
 801ae3a:	f7ff ff05 	bl	801ac48 <_Balloc>
 801ae3e:	4602      	mov	r2, r0
 801ae40:	b928      	cbnz	r0, 801ae4e <__i2b+0x1a>
 801ae42:	4b05      	ldr	r3, [pc, #20]	; (801ae58 <__i2b+0x24>)
 801ae44:	4805      	ldr	r0, [pc, #20]	; (801ae5c <__i2b+0x28>)
 801ae46:	f240 1145 	movw	r1, #325	; 0x145
 801ae4a:	f7fe ffeb 	bl	8019e24 <__assert_func>
 801ae4e:	2301      	movs	r3, #1
 801ae50:	6144      	str	r4, [r0, #20]
 801ae52:	6103      	str	r3, [r0, #16]
 801ae54:	bd10      	pop	{r4, pc}
 801ae56:	bf00      	nop
 801ae58:	0801ef4b 	.word	0x0801ef4b
 801ae5c:	0801ef5c 	.word	0x0801ef5c

0801ae60 <__multiply>:
 801ae60:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801ae64:	4691      	mov	r9, r2
 801ae66:	690a      	ldr	r2, [r1, #16]
 801ae68:	f8d9 3010 	ldr.w	r3, [r9, #16]
 801ae6c:	429a      	cmp	r2, r3
 801ae6e:	bfb8      	it	lt
 801ae70:	460b      	movlt	r3, r1
 801ae72:	460c      	mov	r4, r1
 801ae74:	bfbc      	itt	lt
 801ae76:	464c      	movlt	r4, r9
 801ae78:	4699      	movlt	r9, r3
 801ae7a:	6927      	ldr	r7, [r4, #16]
 801ae7c:	f8d9 a010 	ldr.w	sl, [r9, #16]
 801ae80:	68a3      	ldr	r3, [r4, #8]
 801ae82:	6861      	ldr	r1, [r4, #4]
 801ae84:	eb07 060a 	add.w	r6, r7, sl
 801ae88:	42b3      	cmp	r3, r6
 801ae8a:	b085      	sub	sp, #20
 801ae8c:	bfb8      	it	lt
 801ae8e:	3101      	addlt	r1, #1
 801ae90:	f7ff feda 	bl	801ac48 <_Balloc>
 801ae94:	b930      	cbnz	r0, 801aea4 <__multiply+0x44>
 801ae96:	4602      	mov	r2, r0
 801ae98:	4b44      	ldr	r3, [pc, #272]	; (801afac <__multiply+0x14c>)
 801ae9a:	4845      	ldr	r0, [pc, #276]	; (801afb0 <__multiply+0x150>)
 801ae9c:	f44f 71b1 	mov.w	r1, #354	; 0x162
 801aea0:	f7fe ffc0 	bl	8019e24 <__assert_func>
 801aea4:	f100 0514 	add.w	r5, r0, #20
 801aea8:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 801aeac:	462b      	mov	r3, r5
 801aeae:	2200      	movs	r2, #0
 801aeb0:	4543      	cmp	r3, r8
 801aeb2:	d321      	bcc.n	801aef8 <__multiply+0x98>
 801aeb4:	f104 0314 	add.w	r3, r4, #20
 801aeb8:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 801aebc:	f109 0314 	add.w	r3, r9, #20
 801aec0:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 801aec4:	9202      	str	r2, [sp, #8]
 801aec6:	1b3a      	subs	r2, r7, r4
 801aec8:	3a15      	subs	r2, #21
 801aeca:	f022 0203 	bic.w	r2, r2, #3
 801aece:	3204      	adds	r2, #4
 801aed0:	f104 0115 	add.w	r1, r4, #21
 801aed4:	428f      	cmp	r7, r1
 801aed6:	bf38      	it	cc
 801aed8:	2204      	movcc	r2, #4
 801aeda:	9201      	str	r2, [sp, #4]
 801aedc:	9a02      	ldr	r2, [sp, #8]
 801aede:	9303      	str	r3, [sp, #12]
 801aee0:	429a      	cmp	r2, r3
 801aee2:	d80c      	bhi.n	801aefe <__multiply+0x9e>
 801aee4:	2e00      	cmp	r6, #0
 801aee6:	dd03      	ble.n	801aef0 <__multiply+0x90>
 801aee8:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 801aeec:	2b00      	cmp	r3, #0
 801aeee:	d05b      	beq.n	801afa8 <__multiply+0x148>
 801aef0:	6106      	str	r6, [r0, #16]
 801aef2:	b005      	add	sp, #20
 801aef4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801aef8:	f843 2b04 	str.w	r2, [r3], #4
 801aefc:	e7d8      	b.n	801aeb0 <__multiply+0x50>
 801aefe:	f8b3 a000 	ldrh.w	sl, [r3]
 801af02:	f1ba 0f00 	cmp.w	sl, #0
 801af06:	d024      	beq.n	801af52 <__multiply+0xf2>
 801af08:	f104 0e14 	add.w	lr, r4, #20
 801af0c:	46a9      	mov	r9, r5
 801af0e:	f04f 0c00 	mov.w	ip, #0
 801af12:	f85e 2b04 	ldr.w	r2, [lr], #4
 801af16:	f8d9 1000 	ldr.w	r1, [r9]
 801af1a:	fa1f fb82 	uxth.w	fp, r2
 801af1e:	b289      	uxth	r1, r1
 801af20:	fb0a 110b 	mla	r1, sl, fp, r1
 801af24:	ea4f 4b12 	mov.w	fp, r2, lsr #16
 801af28:	f8d9 2000 	ldr.w	r2, [r9]
 801af2c:	4461      	add	r1, ip
 801af2e:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 801af32:	fb0a c20b 	mla	r2, sl, fp, ip
 801af36:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 801af3a:	b289      	uxth	r1, r1
 801af3c:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 801af40:	4577      	cmp	r7, lr
 801af42:	f849 1b04 	str.w	r1, [r9], #4
 801af46:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 801af4a:	d8e2      	bhi.n	801af12 <__multiply+0xb2>
 801af4c:	9a01      	ldr	r2, [sp, #4]
 801af4e:	f845 c002 	str.w	ip, [r5, r2]
 801af52:	9a03      	ldr	r2, [sp, #12]
 801af54:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 801af58:	3304      	adds	r3, #4
 801af5a:	f1b9 0f00 	cmp.w	r9, #0
 801af5e:	d021      	beq.n	801afa4 <__multiply+0x144>
 801af60:	6829      	ldr	r1, [r5, #0]
 801af62:	f104 0c14 	add.w	ip, r4, #20
 801af66:	46ae      	mov	lr, r5
 801af68:	f04f 0a00 	mov.w	sl, #0
 801af6c:	f8bc b000 	ldrh.w	fp, [ip]
 801af70:	f8be 2002 	ldrh.w	r2, [lr, #2]
 801af74:	fb09 220b 	mla	r2, r9, fp, r2
 801af78:	4452      	add	r2, sl
 801af7a:	b289      	uxth	r1, r1
 801af7c:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 801af80:	f84e 1b04 	str.w	r1, [lr], #4
 801af84:	f85c 1b04 	ldr.w	r1, [ip], #4
 801af88:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 801af8c:	f8be 1000 	ldrh.w	r1, [lr]
 801af90:	fb09 110a 	mla	r1, r9, sl, r1
 801af94:	eb01 4112 	add.w	r1, r1, r2, lsr #16
 801af98:	4567      	cmp	r7, ip
 801af9a:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 801af9e:	d8e5      	bhi.n	801af6c <__multiply+0x10c>
 801afa0:	9a01      	ldr	r2, [sp, #4]
 801afa2:	50a9      	str	r1, [r5, r2]
 801afa4:	3504      	adds	r5, #4
 801afa6:	e799      	b.n	801aedc <__multiply+0x7c>
 801afa8:	3e01      	subs	r6, #1
 801afaa:	e79b      	b.n	801aee4 <__multiply+0x84>
 801afac:	0801ef4b 	.word	0x0801ef4b
 801afb0:	0801ef5c 	.word	0x0801ef5c

0801afb4 <__pow5mult>:
 801afb4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 801afb8:	4615      	mov	r5, r2
 801afba:	f012 0203 	ands.w	r2, r2, #3
 801afbe:	4606      	mov	r6, r0
 801afc0:	460f      	mov	r7, r1
 801afc2:	d007      	beq.n	801afd4 <__pow5mult+0x20>
 801afc4:	4c25      	ldr	r4, [pc, #148]	; (801b05c <__pow5mult+0xa8>)
 801afc6:	3a01      	subs	r2, #1
 801afc8:	2300      	movs	r3, #0
 801afca:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 801afce:	f7ff fe9d 	bl	801ad0c <__multadd>
 801afd2:	4607      	mov	r7, r0
 801afd4:	10ad      	asrs	r5, r5, #2
 801afd6:	d03d      	beq.n	801b054 <__pow5mult+0xa0>
 801afd8:	69f4      	ldr	r4, [r6, #28]
 801afda:	b97c      	cbnz	r4, 801affc <__pow5mult+0x48>
 801afdc:	2010      	movs	r0, #16
 801afde:	f7ff fd7f 	bl	801aae0 <malloc>
 801afe2:	4602      	mov	r2, r0
 801afe4:	61f0      	str	r0, [r6, #28]
 801afe6:	b928      	cbnz	r0, 801aff4 <__pow5mult+0x40>
 801afe8:	4b1d      	ldr	r3, [pc, #116]	; (801b060 <__pow5mult+0xac>)
 801afea:	481e      	ldr	r0, [pc, #120]	; (801b064 <__pow5mult+0xb0>)
 801afec:	f240 11b3 	movw	r1, #435	; 0x1b3
 801aff0:	f7fe ff18 	bl	8019e24 <__assert_func>
 801aff4:	e9c0 4401 	strd	r4, r4, [r0, #4]
 801aff8:	6004      	str	r4, [r0, #0]
 801affa:	60c4      	str	r4, [r0, #12]
 801affc:	f8d6 801c 	ldr.w	r8, [r6, #28]
 801b000:	f8d8 4008 	ldr.w	r4, [r8, #8]
 801b004:	b94c      	cbnz	r4, 801b01a <__pow5mult+0x66>
 801b006:	f240 2171 	movw	r1, #625	; 0x271
 801b00a:	4630      	mov	r0, r6
 801b00c:	f7ff ff12 	bl	801ae34 <__i2b>
 801b010:	2300      	movs	r3, #0
 801b012:	f8c8 0008 	str.w	r0, [r8, #8]
 801b016:	4604      	mov	r4, r0
 801b018:	6003      	str	r3, [r0, #0]
 801b01a:	f04f 0900 	mov.w	r9, #0
 801b01e:	07eb      	lsls	r3, r5, #31
 801b020:	d50a      	bpl.n	801b038 <__pow5mult+0x84>
 801b022:	4639      	mov	r1, r7
 801b024:	4622      	mov	r2, r4
 801b026:	4630      	mov	r0, r6
 801b028:	f7ff ff1a 	bl	801ae60 <__multiply>
 801b02c:	4639      	mov	r1, r7
 801b02e:	4680      	mov	r8, r0
 801b030:	4630      	mov	r0, r6
 801b032:	f7ff fe49 	bl	801acc8 <_Bfree>
 801b036:	4647      	mov	r7, r8
 801b038:	106d      	asrs	r5, r5, #1
 801b03a:	d00b      	beq.n	801b054 <__pow5mult+0xa0>
 801b03c:	6820      	ldr	r0, [r4, #0]
 801b03e:	b938      	cbnz	r0, 801b050 <__pow5mult+0x9c>
 801b040:	4622      	mov	r2, r4
 801b042:	4621      	mov	r1, r4
 801b044:	4630      	mov	r0, r6
 801b046:	f7ff ff0b 	bl	801ae60 <__multiply>
 801b04a:	6020      	str	r0, [r4, #0]
 801b04c:	f8c0 9000 	str.w	r9, [r0]
 801b050:	4604      	mov	r4, r0
 801b052:	e7e4      	b.n	801b01e <__pow5mult+0x6a>
 801b054:	4638      	mov	r0, r7
 801b056:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801b05a:	bf00      	nop
 801b05c:	0801f0a8 	.word	0x0801f0a8
 801b060:	0801ed06 	.word	0x0801ed06
 801b064:	0801ef5c 	.word	0x0801ef5c

0801b068 <__lshift>:
 801b068:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801b06c:	460c      	mov	r4, r1
 801b06e:	6849      	ldr	r1, [r1, #4]
 801b070:	6923      	ldr	r3, [r4, #16]
 801b072:	eb03 1862 	add.w	r8, r3, r2, asr #5
 801b076:	68a3      	ldr	r3, [r4, #8]
 801b078:	4607      	mov	r7, r0
 801b07a:	4691      	mov	r9, r2
 801b07c:	ea4f 1a62 	mov.w	sl, r2, asr #5
 801b080:	f108 0601 	add.w	r6, r8, #1
 801b084:	42b3      	cmp	r3, r6
 801b086:	db0b      	blt.n	801b0a0 <__lshift+0x38>
 801b088:	4638      	mov	r0, r7
 801b08a:	f7ff fddd 	bl	801ac48 <_Balloc>
 801b08e:	4605      	mov	r5, r0
 801b090:	b948      	cbnz	r0, 801b0a6 <__lshift+0x3e>
 801b092:	4602      	mov	r2, r0
 801b094:	4b28      	ldr	r3, [pc, #160]	; (801b138 <__lshift+0xd0>)
 801b096:	4829      	ldr	r0, [pc, #164]	; (801b13c <__lshift+0xd4>)
 801b098:	f44f 71ef 	mov.w	r1, #478	; 0x1de
 801b09c:	f7fe fec2 	bl	8019e24 <__assert_func>
 801b0a0:	3101      	adds	r1, #1
 801b0a2:	005b      	lsls	r3, r3, #1
 801b0a4:	e7ee      	b.n	801b084 <__lshift+0x1c>
 801b0a6:	2300      	movs	r3, #0
 801b0a8:	f100 0114 	add.w	r1, r0, #20
 801b0ac:	f100 0210 	add.w	r2, r0, #16
 801b0b0:	4618      	mov	r0, r3
 801b0b2:	4553      	cmp	r3, sl
 801b0b4:	db33      	blt.n	801b11e <__lshift+0xb6>
 801b0b6:	6920      	ldr	r0, [r4, #16]
 801b0b8:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 801b0bc:	f104 0314 	add.w	r3, r4, #20
 801b0c0:	f019 091f 	ands.w	r9, r9, #31
 801b0c4:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 801b0c8:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 801b0cc:	d02b      	beq.n	801b126 <__lshift+0xbe>
 801b0ce:	f1c9 0e20 	rsb	lr, r9, #32
 801b0d2:	468a      	mov	sl, r1
 801b0d4:	2200      	movs	r2, #0
 801b0d6:	6818      	ldr	r0, [r3, #0]
 801b0d8:	fa00 f009 	lsl.w	r0, r0, r9
 801b0dc:	4310      	orrs	r0, r2
 801b0de:	f84a 0b04 	str.w	r0, [sl], #4
 801b0e2:	f853 2b04 	ldr.w	r2, [r3], #4
 801b0e6:	459c      	cmp	ip, r3
 801b0e8:	fa22 f20e 	lsr.w	r2, r2, lr
 801b0ec:	d8f3      	bhi.n	801b0d6 <__lshift+0x6e>
 801b0ee:	ebac 0304 	sub.w	r3, ip, r4
 801b0f2:	3b15      	subs	r3, #21
 801b0f4:	f023 0303 	bic.w	r3, r3, #3
 801b0f8:	3304      	adds	r3, #4
 801b0fa:	f104 0015 	add.w	r0, r4, #21
 801b0fe:	4584      	cmp	ip, r0
 801b100:	bf38      	it	cc
 801b102:	2304      	movcc	r3, #4
 801b104:	50ca      	str	r2, [r1, r3]
 801b106:	b10a      	cbz	r2, 801b10c <__lshift+0xa4>
 801b108:	f108 0602 	add.w	r6, r8, #2
 801b10c:	3e01      	subs	r6, #1
 801b10e:	4638      	mov	r0, r7
 801b110:	612e      	str	r6, [r5, #16]
 801b112:	4621      	mov	r1, r4
 801b114:	f7ff fdd8 	bl	801acc8 <_Bfree>
 801b118:	4628      	mov	r0, r5
 801b11a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801b11e:	f842 0f04 	str.w	r0, [r2, #4]!
 801b122:	3301      	adds	r3, #1
 801b124:	e7c5      	b.n	801b0b2 <__lshift+0x4a>
 801b126:	3904      	subs	r1, #4
 801b128:	f853 2b04 	ldr.w	r2, [r3], #4
 801b12c:	f841 2f04 	str.w	r2, [r1, #4]!
 801b130:	459c      	cmp	ip, r3
 801b132:	d8f9      	bhi.n	801b128 <__lshift+0xc0>
 801b134:	e7ea      	b.n	801b10c <__lshift+0xa4>
 801b136:	bf00      	nop
 801b138:	0801ef4b 	.word	0x0801ef4b
 801b13c:	0801ef5c 	.word	0x0801ef5c

0801b140 <__mcmp>:
 801b140:	b530      	push	{r4, r5, lr}
 801b142:	6902      	ldr	r2, [r0, #16]
 801b144:	690c      	ldr	r4, [r1, #16]
 801b146:	1b12      	subs	r2, r2, r4
 801b148:	d10e      	bne.n	801b168 <__mcmp+0x28>
 801b14a:	f100 0314 	add.w	r3, r0, #20
 801b14e:	3114      	adds	r1, #20
 801b150:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 801b154:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 801b158:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 801b15c:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 801b160:	42a5      	cmp	r5, r4
 801b162:	d003      	beq.n	801b16c <__mcmp+0x2c>
 801b164:	d305      	bcc.n	801b172 <__mcmp+0x32>
 801b166:	2201      	movs	r2, #1
 801b168:	4610      	mov	r0, r2
 801b16a:	bd30      	pop	{r4, r5, pc}
 801b16c:	4283      	cmp	r3, r0
 801b16e:	d3f3      	bcc.n	801b158 <__mcmp+0x18>
 801b170:	e7fa      	b.n	801b168 <__mcmp+0x28>
 801b172:	f04f 32ff 	mov.w	r2, #4294967295
 801b176:	e7f7      	b.n	801b168 <__mcmp+0x28>

0801b178 <__mdiff>:
 801b178:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801b17c:	460c      	mov	r4, r1
 801b17e:	4606      	mov	r6, r0
 801b180:	4611      	mov	r1, r2
 801b182:	4620      	mov	r0, r4
 801b184:	4690      	mov	r8, r2
 801b186:	f7ff ffdb 	bl	801b140 <__mcmp>
 801b18a:	1e05      	subs	r5, r0, #0
 801b18c:	d110      	bne.n	801b1b0 <__mdiff+0x38>
 801b18e:	4629      	mov	r1, r5
 801b190:	4630      	mov	r0, r6
 801b192:	f7ff fd59 	bl	801ac48 <_Balloc>
 801b196:	b930      	cbnz	r0, 801b1a6 <__mdiff+0x2e>
 801b198:	4b3a      	ldr	r3, [pc, #232]	; (801b284 <__mdiff+0x10c>)
 801b19a:	4602      	mov	r2, r0
 801b19c:	f240 2137 	movw	r1, #567	; 0x237
 801b1a0:	4839      	ldr	r0, [pc, #228]	; (801b288 <__mdiff+0x110>)
 801b1a2:	f7fe fe3f 	bl	8019e24 <__assert_func>
 801b1a6:	2301      	movs	r3, #1
 801b1a8:	e9c0 3504 	strd	r3, r5, [r0, #16]
 801b1ac:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801b1b0:	bfa4      	itt	ge
 801b1b2:	4643      	movge	r3, r8
 801b1b4:	46a0      	movge	r8, r4
 801b1b6:	4630      	mov	r0, r6
 801b1b8:	f8d8 1004 	ldr.w	r1, [r8, #4]
 801b1bc:	bfa6      	itte	ge
 801b1be:	461c      	movge	r4, r3
 801b1c0:	2500      	movge	r5, #0
 801b1c2:	2501      	movlt	r5, #1
 801b1c4:	f7ff fd40 	bl	801ac48 <_Balloc>
 801b1c8:	b920      	cbnz	r0, 801b1d4 <__mdiff+0x5c>
 801b1ca:	4b2e      	ldr	r3, [pc, #184]	; (801b284 <__mdiff+0x10c>)
 801b1cc:	4602      	mov	r2, r0
 801b1ce:	f240 2145 	movw	r1, #581	; 0x245
 801b1d2:	e7e5      	b.n	801b1a0 <__mdiff+0x28>
 801b1d4:	f8d8 7010 	ldr.w	r7, [r8, #16]
 801b1d8:	6926      	ldr	r6, [r4, #16]
 801b1da:	60c5      	str	r5, [r0, #12]
 801b1dc:	f104 0914 	add.w	r9, r4, #20
 801b1e0:	f108 0514 	add.w	r5, r8, #20
 801b1e4:	f100 0e14 	add.w	lr, r0, #20
 801b1e8:	eb05 0c87 	add.w	ip, r5, r7, lsl #2
 801b1ec:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 801b1f0:	f108 0210 	add.w	r2, r8, #16
 801b1f4:	46f2      	mov	sl, lr
 801b1f6:	2100      	movs	r1, #0
 801b1f8:	f859 3b04 	ldr.w	r3, [r9], #4
 801b1fc:	f852 bf04 	ldr.w	fp, [r2, #4]!
 801b200:	fa11 f88b 	uxtah	r8, r1, fp
 801b204:	b299      	uxth	r1, r3
 801b206:	0c1b      	lsrs	r3, r3, #16
 801b208:	eba8 0801 	sub.w	r8, r8, r1
 801b20c:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 801b210:	eb03 4328 	add.w	r3, r3, r8, asr #16
 801b214:	fa1f f888 	uxth.w	r8, r8
 801b218:	1419      	asrs	r1, r3, #16
 801b21a:	454e      	cmp	r6, r9
 801b21c:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 801b220:	f84a 3b04 	str.w	r3, [sl], #4
 801b224:	d8e8      	bhi.n	801b1f8 <__mdiff+0x80>
 801b226:	1b33      	subs	r3, r6, r4
 801b228:	3b15      	subs	r3, #21
 801b22a:	f023 0303 	bic.w	r3, r3, #3
 801b22e:	3304      	adds	r3, #4
 801b230:	3415      	adds	r4, #21
 801b232:	42a6      	cmp	r6, r4
 801b234:	bf38      	it	cc
 801b236:	2304      	movcc	r3, #4
 801b238:	441d      	add	r5, r3
 801b23a:	4473      	add	r3, lr
 801b23c:	469e      	mov	lr, r3
 801b23e:	462e      	mov	r6, r5
 801b240:	4566      	cmp	r6, ip
 801b242:	d30e      	bcc.n	801b262 <__mdiff+0xea>
 801b244:	f10c 0203 	add.w	r2, ip, #3
 801b248:	1b52      	subs	r2, r2, r5
 801b24a:	f022 0203 	bic.w	r2, r2, #3
 801b24e:	3d03      	subs	r5, #3
 801b250:	45ac      	cmp	ip, r5
 801b252:	bf38      	it	cc
 801b254:	2200      	movcc	r2, #0
 801b256:	4413      	add	r3, r2
 801b258:	f853 2d04 	ldr.w	r2, [r3, #-4]!
 801b25c:	b17a      	cbz	r2, 801b27e <__mdiff+0x106>
 801b25e:	6107      	str	r7, [r0, #16]
 801b260:	e7a4      	b.n	801b1ac <__mdiff+0x34>
 801b262:	f856 8b04 	ldr.w	r8, [r6], #4
 801b266:	fa11 f288 	uxtah	r2, r1, r8
 801b26a:	1414      	asrs	r4, r2, #16
 801b26c:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 801b270:	b292      	uxth	r2, r2
 801b272:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
 801b276:	f84e 2b04 	str.w	r2, [lr], #4
 801b27a:	1421      	asrs	r1, r4, #16
 801b27c:	e7e0      	b.n	801b240 <__mdiff+0xc8>
 801b27e:	3f01      	subs	r7, #1
 801b280:	e7ea      	b.n	801b258 <__mdiff+0xe0>
 801b282:	bf00      	nop
 801b284:	0801ef4b 	.word	0x0801ef4b
 801b288:	0801ef5c 	.word	0x0801ef5c

0801b28c <__d2b>:
 801b28c:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 801b290:	460f      	mov	r7, r1
 801b292:	2101      	movs	r1, #1
 801b294:	ec59 8b10 	vmov	r8, r9, d0
 801b298:	4616      	mov	r6, r2
 801b29a:	f7ff fcd5 	bl	801ac48 <_Balloc>
 801b29e:	4604      	mov	r4, r0
 801b2a0:	b930      	cbnz	r0, 801b2b0 <__d2b+0x24>
 801b2a2:	4602      	mov	r2, r0
 801b2a4:	4b24      	ldr	r3, [pc, #144]	; (801b338 <__d2b+0xac>)
 801b2a6:	4825      	ldr	r0, [pc, #148]	; (801b33c <__d2b+0xb0>)
 801b2a8:	f240 310f 	movw	r1, #783	; 0x30f
 801b2ac:	f7fe fdba 	bl	8019e24 <__assert_func>
 801b2b0:	f3c9 550a 	ubfx	r5, r9, #20, #11
 801b2b4:	f3c9 0313 	ubfx	r3, r9, #0, #20
 801b2b8:	bb2d      	cbnz	r5, 801b306 <__d2b+0x7a>
 801b2ba:	9301      	str	r3, [sp, #4]
 801b2bc:	f1b8 0300 	subs.w	r3, r8, #0
 801b2c0:	d026      	beq.n	801b310 <__d2b+0x84>
 801b2c2:	4668      	mov	r0, sp
 801b2c4:	9300      	str	r3, [sp, #0]
 801b2c6:	f7ff fd87 	bl	801add8 <__lo0bits>
 801b2ca:	e9dd 1200 	ldrd	r1, r2, [sp]
 801b2ce:	b1e8      	cbz	r0, 801b30c <__d2b+0x80>
 801b2d0:	f1c0 0320 	rsb	r3, r0, #32
 801b2d4:	fa02 f303 	lsl.w	r3, r2, r3
 801b2d8:	430b      	orrs	r3, r1
 801b2da:	40c2      	lsrs	r2, r0
 801b2dc:	6163      	str	r3, [r4, #20]
 801b2de:	9201      	str	r2, [sp, #4]
 801b2e0:	9b01      	ldr	r3, [sp, #4]
 801b2e2:	61a3      	str	r3, [r4, #24]
 801b2e4:	2b00      	cmp	r3, #0
 801b2e6:	bf14      	ite	ne
 801b2e8:	2202      	movne	r2, #2
 801b2ea:	2201      	moveq	r2, #1
 801b2ec:	6122      	str	r2, [r4, #16]
 801b2ee:	b1bd      	cbz	r5, 801b320 <__d2b+0x94>
 801b2f0:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 801b2f4:	4405      	add	r5, r0
 801b2f6:	603d      	str	r5, [r7, #0]
 801b2f8:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 801b2fc:	6030      	str	r0, [r6, #0]
 801b2fe:	4620      	mov	r0, r4
 801b300:	b003      	add	sp, #12
 801b302:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 801b306:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 801b30a:	e7d6      	b.n	801b2ba <__d2b+0x2e>
 801b30c:	6161      	str	r1, [r4, #20]
 801b30e:	e7e7      	b.n	801b2e0 <__d2b+0x54>
 801b310:	a801      	add	r0, sp, #4
 801b312:	f7ff fd61 	bl	801add8 <__lo0bits>
 801b316:	9b01      	ldr	r3, [sp, #4]
 801b318:	6163      	str	r3, [r4, #20]
 801b31a:	3020      	adds	r0, #32
 801b31c:	2201      	movs	r2, #1
 801b31e:	e7e5      	b.n	801b2ec <__d2b+0x60>
 801b320:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 801b324:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 801b328:	6038      	str	r0, [r7, #0]
 801b32a:	6918      	ldr	r0, [r3, #16]
 801b32c:	f7ff fd34 	bl	801ad98 <__hi0bits>
 801b330:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 801b334:	e7e2      	b.n	801b2fc <__d2b+0x70>
 801b336:	bf00      	nop
 801b338:	0801ef4b 	.word	0x0801ef4b
 801b33c:	0801ef5c 	.word	0x0801ef5c

0801b340 <__sfputc_r>:
 801b340:	6893      	ldr	r3, [r2, #8]
 801b342:	3b01      	subs	r3, #1
 801b344:	2b00      	cmp	r3, #0
 801b346:	b410      	push	{r4}
 801b348:	6093      	str	r3, [r2, #8]
 801b34a:	da08      	bge.n	801b35e <__sfputc_r+0x1e>
 801b34c:	6994      	ldr	r4, [r2, #24]
 801b34e:	42a3      	cmp	r3, r4
 801b350:	db01      	blt.n	801b356 <__sfputc_r+0x16>
 801b352:	290a      	cmp	r1, #10
 801b354:	d103      	bne.n	801b35e <__sfputc_r+0x1e>
 801b356:	f85d 4b04 	ldr.w	r4, [sp], #4
 801b35a:	f7fe bc36 	b.w	8019bca <__swbuf_r>
 801b35e:	6813      	ldr	r3, [r2, #0]
 801b360:	1c58      	adds	r0, r3, #1
 801b362:	6010      	str	r0, [r2, #0]
 801b364:	7019      	strb	r1, [r3, #0]
 801b366:	4608      	mov	r0, r1
 801b368:	f85d 4b04 	ldr.w	r4, [sp], #4
 801b36c:	4770      	bx	lr

0801b36e <__sfputs_r>:
 801b36e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801b370:	4606      	mov	r6, r0
 801b372:	460f      	mov	r7, r1
 801b374:	4614      	mov	r4, r2
 801b376:	18d5      	adds	r5, r2, r3
 801b378:	42ac      	cmp	r4, r5
 801b37a:	d101      	bne.n	801b380 <__sfputs_r+0x12>
 801b37c:	2000      	movs	r0, #0
 801b37e:	e007      	b.n	801b390 <__sfputs_r+0x22>
 801b380:	f814 1b01 	ldrb.w	r1, [r4], #1
 801b384:	463a      	mov	r2, r7
 801b386:	4630      	mov	r0, r6
 801b388:	f7ff ffda 	bl	801b340 <__sfputc_r>
 801b38c:	1c43      	adds	r3, r0, #1
 801b38e:	d1f3      	bne.n	801b378 <__sfputs_r+0xa>
 801b390:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0801b394 <_vfiprintf_r>:
 801b394:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801b398:	460d      	mov	r5, r1
 801b39a:	b09d      	sub	sp, #116	; 0x74
 801b39c:	4614      	mov	r4, r2
 801b39e:	4698      	mov	r8, r3
 801b3a0:	4606      	mov	r6, r0
 801b3a2:	b118      	cbz	r0, 801b3ac <_vfiprintf_r+0x18>
 801b3a4:	6a03      	ldr	r3, [r0, #32]
 801b3a6:	b90b      	cbnz	r3, 801b3ac <_vfiprintf_r+0x18>
 801b3a8:	f7fe fb28 	bl	80199fc <__sinit>
 801b3ac:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 801b3ae:	07d9      	lsls	r1, r3, #31
 801b3b0:	d405      	bmi.n	801b3be <_vfiprintf_r+0x2a>
 801b3b2:	89ab      	ldrh	r3, [r5, #12]
 801b3b4:	059a      	lsls	r2, r3, #22
 801b3b6:	d402      	bmi.n	801b3be <_vfiprintf_r+0x2a>
 801b3b8:	6da8      	ldr	r0, [r5, #88]	; 0x58
 801b3ba:	f7fe fd22 	bl	8019e02 <__retarget_lock_acquire_recursive>
 801b3be:	89ab      	ldrh	r3, [r5, #12]
 801b3c0:	071b      	lsls	r3, r3, #28
 801b3c2:	d501      	bpl.n	801b3c8 <_vfiprintf_r+0x34>
 801b3c4:	692b      	ldr	r3, [r5, #16]
 801b3c6:	b99b      	cbnz	r3, 801b3f0 <_vfiprintf_r+0x5c>
 801b3c8:	4629      	mov	r1, r5
 801b3ca:	4630      	mov	r0, r6
 801b3cc:	f7fe fc3a 	bl	8019c44 <__swsetup_r>
 801b3d0:	b170      	cbz	r0, 801b3f0 <_vfiprintf_r+0x5c>
 801b3d2:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 801b3d4:	07dc      	lsls	r4, r3, #31
 801b3d6:	d504      	bpl.n	801b3e2 <_vfiprintf_r+0x4e>
 801b3d8:	f04f 30ff 	mov.w	r0, #4294967295
 801b3dc:	b01d      	add	sp, #116	; 0x74
 801b3de:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801b3e2:	89ab      	ldrh	r3, [r5, #12]
 801b3e4:	0598      	lsls	r0, r3, #22
 801b3e6:	d4f7      	bmi.n	801b3d8 <_vfiprintf_r+0x44>
 801b3e8:	6da8      	ldr	r0, [r5, #88]	; 0x58
 801b3ea:	f7fe fd0b 	bl	8019e04 <__retarget_lock_release_recursive>
 801b3ee:	e7f3      	b.n	801b3d8 <_vfiprintf_r+0x44>
 801b3f0:	2300      	movs	r3, #0
 801b3f2:	9309      	str	r3, [sp, #36]	; 0x24
 801b3f4:	2320      	movs	r3, #32
 801b3f6:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 801b3fa:	f8cd 800c 	str.w	r8, [sp, #12]
 801b3fe:	2330      	movs	r3, #48	; 0x30
 801b400:	f8df 81b0 	ldr.w	r8, [pc, #432]	; 801b5b4 <_vfiprintf_r+0x220>
 801b404:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 801b408:	f04f 0901 	mov.w	r9, #1
 801b40c:	4623      	mov	r3, r4
 801b40e:	469a      	mov	sl, r3
 801b410:	f813 2b01 	ldrb.w	r2, [r3], #1
 801b414:	b10a      	cbz	r2, 801b41a <_vfiprintf_r+0x86>
 801b416:	2a25      	cmp	r2, #37	; 0x25
 801b418:	d1f9      	bne.n	801b40e <_vfiprintf_r+0x7a>
 801b41a:	ebba 0b04 	subs.w	fp, sl, r4
 801b41e:	d00b      	beq.n	801b438 <_vfiprintf_r+0xa4>
 801b420:	465b      	mov	r3, fp
 801b422:	4622      	mov	r2, r4
 801b424:	4629      	mov	r1, r5
 801b426:	4630      	mov	r0, r6
 801b428:	f7ff ffa1 	bl	801b36e <__sfputs_r>
 801b42c:	3001      	adds	r0, #1
 801b42e:	f000 80a9 	beq.w	801b584 <_vfiprintf_r+0x1f0>
 801b432:	9a09      	ldr	r2, [sp, #36]	; 0x24
 801b434:	445a      	add	r2, fp
 801b436:	9209      	str	r2, [sp, #36]	; 0x24
 801b438:	f89a 3000 	ldrb.w	r3, [sl]
 801b43c:	2b00      	cmp	r3, #0
 801b43e:	f000 80a1 	beq.w	801b584 <_vfiprintf_r+0x1f0>
 801b442:	2300      	movs	r3, #0
 801b444:	f04f 32ff 	mov.w	r2, #4294967295
 801b448:	e9cd 2305 	strd	r2, r3, [sp, #20]
 801b44c:	f10a 0a01 	add.w	sl, sl, #1
 801b450:	9304      	str	r3, [sp, #16]
 801b452:	9307      	str	r3, [sp, #28]
 801b454:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 801b458:	931a      	str	r3, [sp, #104]	; 0x68
 801b45a:	4654      	mov	r4, sl
 801b45c:	2205      	movs	r2, #5
 801b45e:	f814 1b01 	ldrb.w	r1, [r4], #1
 801b462:	4854      	ldr	r0, [pc, #336]	; (801b5b4 <_vfiprintf_r+0x220>)
 801b464:	f7e6 f9ac 	bl	80017c0 <memchr>
 801b468:	9a04      	ldr	r2, [sp, #16]
 801b46a:	b9d8      	cbnz	r0, 801b4a4 <_vfiprintf_r+0x110>
 801b46c:	06d1      	lsls	r1, r2, #27
 801b46e:	bf44      	itt	mi
 801b470:	2320      	movmi	r3, #32
 801b472:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 801b476:	0713      	lsls	r3, r2, #28
 801b478:	bf44      	itt	mi
 801b47a:	232b      	movmi	r3, #43	; 0x2b
 801b47c:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 801b480:	f89a 3000 	ldrb.w	r3, [sl]
 801b484:	2b2a      	cmp	r3, #42	; 0x2a
 801b486:	d015      	beq.n	801b4b4 <_vfiprintf_r+0x120>
 801b488:	9a07      	ldr	r2, [sp, #28]
 801b48a:	4654      	mov	r4, sl
 801b48c:	2000      	movs	r0, #0
 801b48e:	f04f 0c0a 	mov.w	ip, #10
 801b492:	4621      	mov	r1, r4
 801b494:	f811 3b01 	ldrb.w	r3, [r1], #1
 801b498:	3b30      	subs	r3, #48	; 0x30
 801b49a:	2b09      	cmp	r3, #9
 801b49c:	d94d      	bls.n	801b53a <_vfiprintf_r+0x1a6>
 801b49e:	b1b0      	cbz	r0, 801b4ce <_vfiprintf_r+0x13a>
 801b4a0:	9207      	str	r2, [sp, #28]
 801b4a2:	e014      	b.n	801b4ce <_vfiprintf_r+0x13a>
 801b4a4:	eba0 0308 	sub.w	r3, r0, r8
 801b4a8:	fa09 f303 	lsl.w	r3, r9, r3
 801b4ac:	4313      	orrs	r3, r2
 801b4ae:	9304      	str	r3, [sp, #16]
 801b4b0:	46a2      	mov	sl, r4
 801b4b2:	e7d2      	b.n	801b45a <_vfiprintf_r+0xc6>
 801b4b4:	9b03      	ldr	r3, [sp, #12]
 801b4b6:	1d19      	adds	r1, r3, #4
 801b4b8:	681b      	ldr	r3, [r3, #0]
 801b4ba:	9103      	str	r1, [sp, #12]
 801b4bc:	2b00      	cmp	r3, #0
 801b4be:	bfbb      	ittet	lt
 801b4c0:	425b      	neglt	r3, r3
 801b4c2:	f042 0202 	orrlt.w	r2, r2, #2
 801b4c6:	9307      	strge	r3, [sp, #28]
 801b4c8:	9307      	strlt	r3, [sp, #28]
 801b4ca:	bfb8      	it	lt
 801b4cc:	9204      	strlt	r2, [sp, #16]
 801b4ce:	7823      	ldrb	r3, [r4, #0]
 801b4d0:	2b2e      	cmp	r3, #46	; 0x2e
 801b4d2:	d10c      	bne.n	801b4ee <_vfiprintf_r+0x15a>
 801b4d4:	7863      	ldrb	r3, [r4, #1]
 801b4d6:	2b2a      	cmp	r3, #42	; 0x2a
 801b4d8:	d134      	bne.n	801b544 <_vfiprintf_r+0x1b0>
 801b4da:	9b03      	ldr	r3, [sp, #12]
 801b4dc:	1d1a      	adds	r2, r3, #4
 801b4de:	681b      	ldr	r3, [r3, #0]
 801b4e0:	9203      	str	r2, [sp, #12]
 801b4e2:	2b00      	cmp	r3, #0
 801b4e4:	bfb8      	it	lt
 801b4e6:	f04f 33ff 	movlt.w	r3, #4294967295
 801b4ea:	3402      	adds	r4, #2
 801b4ec:	9305      	str	r3, [sp, #20]
 801b4ee:	f8df a0d4 	ldr.w	sl, [pc, #212]	; 801b5c4 <_vfiprintf_r+0x230>
 801b4f2:	7821      	ldrb	r1, [r4, #0]
 801b4f4:	2203      	movs	r2, #3
 801b4f6:	4650      	mov	r0, sl
 801b4f8:	f7e6 f962 	bl	80017c0 <memchr>
 801b4fc:	b138      	cbz	r0, 801b50e <_vfiprintf_r+0x17a>
 801b4fe:	9b04      	ldr	r3, [sp, #16]
 801b500:	eba0 000a 	sub.w	r0, r0, sl
 801b504:	2240      	movs	r2, #64	; 0x40
 801b506:	4082      	lsls	r2, r0
 801b508:	4313      	orrs	r3, r2
 801b50a:	3401      	adds	r4, #1
 801b50c:	9304      	str	r3, [sp, #16]
 801b50e:	f814 1b01 	ldrb.w	r1, [r4], #1
 801b512:	4829      	ldr	r0, [pc, #164]	; (801b5b8 <_vfiprintf_r+0x224>)
 801b514:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 801b518:	2206      	movs	r2, #6
 801b51a:	f7e6 f951 	bl	80017c0 <memchr>
 801b51e:	2800      	cmp	r0, #0
 801b520:	d03f      	beq.n	801b5a2 <_vfiprintf_r+0x20e>
 801b522:	4b26      	ldr	r3, [pc, #152]	; (801b5bc <_vfiprintf_r+0x228>)
 801b524:	bb1b      	cbnz	r3, 801b56e <_vfiprintf_r+0x1da>
 801b526:	9b03      	ldr	r3, [sp, #12]
 801b528:	3307      	adds	r3, #7
 801b52a:	f023 0307 	bic.w	r3, r3, #7
 801b52e:	3308      	adds	r3, #8
 801b530:	9303      	str	r3, [sp, #12]
 801b532:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801b534:	443b      	add	r3, r7
 801b536:	9309      	str	r3, [sp, #36]	; 0x24
 801b538:	e768      	b.n	801b40c <_vfiprintf_r+0x78>
 801b53a:	fb0c 3202 	mla	r2, ip, r2, r3
 801b53e:	460c      	mov	r4, r1
 801b540:	2001      	movs	r0, #1
 801b542:	e7a6      	b.n	801b492 <_vfiprintf_r+0xfe>
 801b544:	2300      	movs	r3, #0
 801b546:	3401      	adds	r4, #1
 801b548:	9305      	str	r3, [sp, #20]
 801b54a:	4619      	mov	r1, r3
 801b54c:	f04f 0c0a 	mov.w	ip, #10
 801b550:	4620      	mov	r0, r4
 801b552:	f810 2b01 	ldrb.w	r2, [r0], #1
 801b556:	3a30      	subs	r2, #48	; 0x30
 801b558:	2a09      	cmp	r2, #9
 801b55a:	d903      	bls.n	801b564 <_vfiprintf_r+0x1d0>
 801b55c:	2b00      	cmp	r3, #0
 801b55e:	d0c6      	beq.n	801b4ee <_vfiprintf_r+0x15a>
 801b560:	9105      	str	r1, [sp, #20]
 801b562:	e7c4      	b.n	801b4ee <_vfiprintf_r+0x15a>
 801b564:	fb0c 2101 	mla	r1, ip, r1, r2
 801b568:	4604      	mov	r4, r0
 801b56a:	2301      	movs	r3, #1
 801b56c:	e7f0      	b.n	801b550 <_vfiprintf_r+0x1bc>
 801b56e:	ab03      	add	r3, sp, #12
 801b570:	9300      	str	r3, [sp, #0]
 801b572:	462a      	mov	r2, r5
 801b574:	4b12      	ldr	r3, [pc, #72]	; (801b5c0 <_vfiprintf_r+0x22c>)
 801b576:	a904      	add	r1, sp, #16
 801b578:	4630      	mov	r0, r6
 801b57a:	f7fd fe09 	bl	8019190 <_printf_float>
 801b57e:	4607      	mov	r7, r0
 801b580:	1c78      	adds	r0, r7, #1
 801b582:	d1d6      	bne.n	801b532 <_vfiprintf_r+0x19e>
 801b584:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 801b586:	07d9      	lsls	r1, r3, #31
 801b588:	d405      	bmi.n	801b596 <_vfiprintf_r+0x202>
 801b58a:	89ab      	ldrh	r3, [r5, #12]
 801b58c:	059a      	lsls	r2, r3, #22
 801b58e:	d402      	bmi.n	801b596 <_vfiprintf_r+0x202>
 801b590:	6da8      	ldr	r0, [r5, #88]	; 0x58
 801b592:	f7fe fc37 	bl	8019e04 <__retarget_lock_release_recursive>
 801b596:	89ab      	ldrh	r3, [r5, #12]
 801b598:	065b      	lsls	r3, r3, #25
 801b59a:	f53f af1d 	bmi.w	801b3d8 <_vfiprintf_r+0x44>
 801b59e:	9809      	ldr	r0, [sp, #36]	; 0x24
 801b5a0:	e71c      	b.n	801b3dc <_vfiprintf_r+0x48>
 801b5a2:	ab03      	add	r3, sp, #12
 801b5a4:	9300      	str	r3, [sp, #0]
 801b5a6:	462a      	mov	r2, r5
 801b5a8:	4b05      	ldr	r3, [pc, #20]	; (801b5c0 <_vfiprintf_r+0x22c>)
 801b5aa:	a904      	add	r1, sp, #16
 801b5ac:	4630      	mov	r0, r6
 801b5ae:	f7fe f877 	bl	80196a0 <_printf_i>
 801b5b2:	e7e4      	b.n	801b57e <_vfiprintf_r+0x1ea>
 801b5b4:	0801f0b4 	.word	0x0801f0b4
 801b5b8:	0801f0be 	.word	0x0801f0be
 801b5bc:	08019191 	.word	0x08019191
 801b5c0:	0801b36f 	.word	0x0801b36f
 801b5c4:	0801f0ba 	.word	0x0801f0ba

0801b5c8 <__sflush_r>:
 801b5c8:	898a      	ldrh	r2, [r1, #12]
 801b5ca:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801b5ce:	4605      	mov	r5, r0
 801b5d0:	0710      	lsls	r0, r2, #28
 801b5d2:	460c      	mov	r4, r1
 801b5d4:	d458      	bmi.n	801b688 <__sflush_r+0xc0>
 801b5d6:	684b      	ldr	r3, [r1, #4]
 801b5d8:	2b00      	cmp	r3, #0
 801b5da:	dc05      	bgt.n	801b5e8 <__sflush_r+0x20>
 801b5dc:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 801b5de:	2b00      	cmp	r3, #0
 801b5e0:	dc02      	bgt.n	801b5e8 <__sflush_r+0x20>
 801b5e2:	2000      	movs	r0, #0
 801b5e4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801b5e8:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 801b5ea:	2e00      	cmp	r6, #0
 801b5ec:	d0f9      	beq.n	801b5e2 <__sflush_r+0x1a>
 801b5ee:	2300      	movs	r3, #0
 801b5f0:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 801b5f4:	682f      	ldr	r7, [r5, #0]
 801b5f6:	6a21      	ldr	r1, [r4, #32]
 801b5f8:	602b      	str	r3, [r5, #0]
 801b5fa:	d032      	beq.n	801b662 <__sflush_r+0x9a>
 801b5fc:	6d60      	ldr	r0, [r4, #84]	; 0x54
 801b5fe:	89a3      	ldrh	r3, [r4, #12]
 801b600:	075a      	lsls	r2, r3, #29
 801b602:	d505      	bpl.n	801b610 <__sflush_r+0x48>
 801b604:	6863      	ldr	r3, [r4, #4]
 801b606:	1ac0      	subs	r0, r0, r3
 801b608:	6b63      	ldr	r3, [r4, #52]	; 0x34
 801b60a:	b10b      	cbz	r3, 801b610 <__sflush_r+0x48>
 801b60c:	6c23      	ldr	r3, [r4, #64]	; 0x40
 801b60e:	1ac0      	subs	r0, r0, r3
 801b610:	2300      	movs	r3, #0
 801b612:	4602      	mov	r2, r0
 801b614:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 801b616:	6a21      	ldr	r1, [r4, #32]
 801b618:	4628      	mov	r0, r5
 801b61a:	47b0      	blx	r6
 801b61c:	1c43      	adds	r3, r0, #1
 801b61e:	89a3      	ldrh	r3, [r4, #12]
 801b620:	d106      	bne.n	801b630 <__sflush_r+0x68>
 801b622:	6829      	ldr	r1, [r5, #0]
 801b624:	291d      	cmp	r1, #29
 801b626:	d82b      	bhi.n	801b680 <__sflush_r+0xb8>
 801b628:	4a29      	ldr	r2, [pc, #164]	; (801b6d0 <__sflush_r+0x108>)
 801b62a:	410a      	asrs	r2, r1
 801b62c:	07d6      	lsls	r6, r2, #31
 801b62e:	d427      	bmi.n	801b680 <__sflush_r+0xb8>
 801b630:	2200      	movs	r2, #0
 801b632:	6062      	str	r2, [r4, #4]
 801b634:	04d9      	lsls	r1, r3, #19
 801b636:	6922      	ldr	r2, [r4, #16]
 801b638:	6022      	str	r2, [r4, #0]
 801b63a:	d504      	bpl.n	801b646 <__sflush_r+0x7e>
 801b63c:	1c42      	adds	r2, r0, #1
 801b63e:	d101      	bne.n	801b644 <__sflush_r+0x7c>
 801b640:	682b      	ldr	r3, [r5, #0]
 801b642:	b903      	cbnz	r3, 801b646 <__sflush_r+0x7e>
 801b644:	6560      	str	r0, [r4, #84]	; 0x54
 801b646:	6b61      	ldr	r1, [r4, #52]	; 0x34
 801b648:	602f      	str	r7, [r5, #0]
 801b64a:	2900      	cmp	r1, #0
 801b64c:	d0c9      	beq.n	801b5e2 <__sflush_r+0x1a>
 801b64e:	f104 0344 	add.w	r3, r4, #68	; 0x44
 801b652:	4299      	cmp	r1, r3
 801b654:	d002      	beq.n	801b65c <__sflush_r+0x94>
 801b656:	4628      	mov	r0, r5
 801b658:	f7ff f9f6 	bl	801aa48 <_free_r>
 801b65c:	2000      	movs	r0, #0
 801b65e:	6360      	str	r0, [r4, #52]	; 0x34
 801b660:	e7c0      	b.n	801b5e4 <__sflush_r+0x1c>
 801b662:	2301      	movs	r3, #1
 801b664:	4628      	mov	r0, r5
 801b666:	47b0      	blx	r6
 801b668:	1c41      	adds	r1, r0, #1
 801b66a:	d1c8      	bne.n	801b5fe <__sflush_r+0x36>
 801b66c:	682b      	ldr	r3, [r5, #0]
 801b66e:	2b00      	cmp	r3, #0
 801b670:	d0c5      	beq.n	801b5fe <__sflush_r+0x36>
 801b672:	2b1d      	cmp	r3, #29
 801b674:	d001      	beq.n	801b67a <__sflush_r+0xb2>
 801b676:	2b16      	cmp	r3, #22
 801b678:	d101      	bne.n	801b67e <__sflush_r+0xb6>
 801b67a:	602f      	str	r7, [r5, #0]
 801b67c:	e7b1      	b.n	801b5e2 <__sflush_r+0x1a>
 801b67e:	89a3      	ldrh	r3, [r4, #12]
 801b680:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 801b684:	81a3      	strh	r3, [r4, #12]
 801b686:	e7ad      	b.n	801b5e4 <__sflush_r+0x1c>
 801b688:	690f      	ldr	r7, [r1, #16]
 801b68a:	2f00      	cmp	r7, #0
 801b68c:	d0a9      	beq.n	801b5e2 <__sflush_r+0x1a>
 801b68e:	0793      	lsls	r3, r2, #30
 801b690:	680e      	ldr	r6, [r1, #0]
 801b692:	bf08      	it	eq
 801b694:	694b      	ldreq	r3, [r1, #20]
 801b696:	600f      	str	r7, [r1, #0]
 801b698:	bf18      	it	ne
 801b69a:	2300      	movne	r3, #0
 801b69c:	eba6 0807 	sub.w	r8, r6, r7
 801b6a0:	608b      	str	r3, [r1, #8]
 801b6a2:	f1b8 0f00 	cmp.w	r8, #0
 801b6a6:	dd9c      	ble.n	801b5e2 <__sflush_r+0x1a>
 801b6a8:	6a21      	ldr	r1, [r4, #32]
 801b6aa:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 801b6ac:	4643      	mov	r3, r8
 801b6ae:	463a      	mov	r2, r7
 801b6b0:	4628      	mov	r0, r5
 801b6b2:	47b0      	blx	r6
 801b6b4:	2800      	cmp	r0, #0
 801b6b6:	dc06      	bgt.n	801b6c6 <__sflush_r+0xfe>
 801b6b8:	89a3      	ldrh	r3, [r4, #12]
 801b6ba:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 801b6be:	81a3      	strh	r3, [r4, #12]
 801b6c0:	f04f 30ff 	mov.w	r0, #4294967295
 801b6c4:	e78e      	b.n	801b5e4 <__sflush_r+0x1c>
 801b6c6:	4407      	add	r7, r0
 801b6c8:	eba8 0800 	sub.w	r8, r8, r0
 801b6cc:	e7e9      	b.n	801b6a2 <__sflush_r+0xda>
 801b6ce:	bf00      	nop
 801b6d0:	dfbffffe 	.word	0xdfbffffe

0801b6d4 <_fflush_r>:
 801b6d4:	b538      	push	{r3, r4, r5, lr}
 801b6d6:	690b      	ldr	r3, [r1, #16]
 801b6d8:	4605      	mov	r5, r0
 801b6da:	460c      	mov	r4, r1
 801b6dc:	b913      	cbnz	r3, 801b6e4 <_fflush_r+0x10>
 801b6de:	2500      	movs	r5, #0
 801b6e0:	4628      	mov	r0, r5
 801b6e2:	bd38      	pop	{r3, r4, r5, pc}
 801b6e4:	b118      	cbz	r0, 801b6ee <_fflush_r+0x1a>
 801b6e6:	6a03      	ldr	r3, [r0, #32]
 801b6e8:	b90b      	cbnz	r3, 801b6ee <_fflush_r+0x1a>
 801b6ea:	f7fe f987 	bl	80199fc <__sinit>
 801b6ee:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 801b6f2:	2b00      	cmp	r3, #0
 801b6f4:	d0f3      	beq.n	801b6de <_fflush_r+0xa>
 801b6f6:	6e62      	ldr	r2, [r4, #100]	; 0x64
 801b6f8:	07d0      	lsls	r0, r2, #31
 801b6fa:	d404      	bmi.n	801b706 <_fflush_r+0x32>
 801b6fc:	0599      	lsls	r1, r3, #22
 801b6fe:	d402      	bmi.n	801b706 <_fflush_r+0x32>
 801b700:	6da0      	ldr	r0, [r4, #88]	; 0x58
 801b702:	f7fe fb7e 	bl	8019e02 <__retarget_lock_acquire_recursive>
 801b706:	4628      	mov	r0, r5
 801b708:	4621      	mov	r1, r4
 801b70a:	f7ff ff5d 	bl	801b5c8 <__sflush_r>
 801b70e:	6e63      	ldr	r3, [r4, #100]	; 0x64
 801b710:	07da      	lsls	r2, r3, #31
 801b712:	4605      	mov	r5, r0
 801b714:	d4e4      	bmi.n	801b6e0 <_fflush_r+0xc>
 801b716:	89a3      	ldrh	r3, [r4, #12]
 801b718:	059b      	lsls	r3, r3, #22
 801b71a:	d4e1      	bmi.n	801b6e0 <_fflush_r+0xc>
 801b71c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 801b71e:	f7fe fb71 	bl	8019e04 <__retarget_lock_release_recursive>
 801b722:	e7dd      	b.n	801b6e0 <_fflush_r+0xc>

0801b724 <fiprintf>:
 801b724:	b40e      	push	{r1, r2, r3}
 801b726:	b503      	push	{r0, r1, lr}
 801b728:	4601      	mov	r1, r0
 801b72a:	ab03      	add	r3, sp, #12
 801b72c:	4805      	ldr	r0, [pc, #20]	; (801b744 <fiprintf+0x20>)
 801b72e:	f853 2b04 	ldr.w	r2, [r3], #4
 801b732:	6800      	ldr	r0, [r0, #0]
 801b734:	9301      	str	r3, [sp, #4]
 801b736:	f7ff fe2d 	bl	801b394 <_vfiprintf_r>
 801b73a:	b002      	add	sp, #8
 801b73c:	f85d eb04 	ldr.w	lr, [sp], #4
 801b740:	b003      	add	sp, #12
 801b742:	4770      	bx	lr
 801b744:	200000bc 	.word	0x200000bc

0801b748 <__swhatbuf_r>:
 801b748:	b570      	push	{r4, r5, r6, lr}
 801b74a:	460c      	mov	r4, r1
 801b74c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801b750:	2900      	cmp	r1, #0
 801b752:	b096      	sub	sp, #88	; 0x58
 801b754:	4615      	mov	r5, r2
 801b756:	461e      	mov	r6, r3
 801b758:	da0d      	bge.n	801b776 <__swhatbuf_r+0x2e>
 801b75a:	89a3      	ldrh	r3, [r4, #12]
 801b75c:	f013 0f80 	tst.w	r3, #128	; 0x80
 801b760:	f04f 0100 	mov.w	r1, #0
 801b764:	bf0c      	ite	eq
 801b766:	f44f 6380 	moveq.w	r3, #1024	; 0x400
 801b76a:	2340      	movne	r3, #64	; 0x40
 801b76c:	2000      	movs	r0, #0
 801b76e:	6031      	str	r1, [r6, #0]
 801b770:	602b      	str	r3, [r5, #0]
 801b772:	b016      	add	sp, #88	; 0x58
 801b774:	bd70      	pop	{r4, r5, r6, pc}
 801b776:	466a      	mov	r2, sp
 801b778:	f000 f848 	bl	801b80c <_fstat_r>
 801b77c:	2800      	cmp	r0, #0
 801b77e:	dbec      	blt.n	801b75a <__swhatbuf_r+0x12>
 801b780:	9901      	ldr	r1, [sp, #4]
 801b782:	f401 4170 	and.w	r1, r1, #61440	; 0xf000
 801b786:	f5a1 5300 	sub.w	r3, r1, #8192	; 0x2000
 801b78a:	4259      	negs	r1, r3
 801b78c:	4159      	adcs	r1, r3
 801b78e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 801b792:	e7eb      	b.n	801b76c <__swhatbuf_r+0x24>

0801b794 <__smakebuf_r>:
 801b794:	898b      	ldrh	r3, [r1, #12]
 801b796:	b573      	push	{r0, r1, r4, r5, r6, lr}
 801b798:	079d      	lsls	r5, r3, #30
 801b79a:	4606      	mov	r6, r0
 801b79c:	460c      	mov	r4, r1
 801b79e:	d507      	bpl.n	801b7b0 <__smakebuf_r+0x1c>
 801b7a0:	f104 0347 	add.w	r3, r4, #71	; 0x47
 801b7a4:	6023      	str	r3, [r4, #0]
 801b7a6:	6123      	str	r3, [r4, #16]
 801b7a8:	2301      	movs	r3, #1
 801b7aa:	6163      	str	r3, [r4, #20]
 801b7ac:	b002      	add	sp, #8
 801b7ae:	bd70      	pop	{r4, r5, r6, pc}
 801b7b0:	ab01      	add	r3, sp, #4
 801b7b2:	466a      	mov	r2, sp
 801b7b4:	f7ff ffc8 	bl	801b748 <__swhatbuf_r>
 801b7b8:	9900      	ldr	r1, [sp, #0]
 801b7ba:	4605      	mov	r5, r0
 801b7bc:	4630      	mov	r0, r6
 801b7be:	f7ff f9b7 	bl	801ab30 <_malloc_r>
 801b7c2:	b948      	cbnz	r0, 801b7d8 <__smakebuf_r+0x44>
 801b7c4:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 801b7c8:	059a      	lsls	r2, r3, #22
 801b7ca:	d4ef      	bmi.n	801b7ac <__smakebuf_r+0x18>
 801b7cc:	f023 0303 	bic.w	r3, r3, #3
 801b7d0:	f043 0302 	orr.w	r3, r3, #2
 801b7d4:	81a3      	strh	r3, [r4, #12]
 801b7d6:	e7e3      	b.n	801b7a0 <__smakebuf_r+0xc>
 801b7d8:	89a3      	ldrh	r3, [r4, #12]
 801b7da:	6020      	str	r0, [r4, #0]
 801b7dc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 801b7e0:	81a3      	strh	r3, [r4, #12]
 801b7e2:	9b00      	ldr	r3, [sp, #0]
 801b7e4:	6163      	str	r3, [r4, #20]
 801b7e6:	9b01      	ldr	r3, [sp, #4]
 801b7e8:	6120      	str	r0, [r4, #16]
 801b7ea:	b15b      	cbz	r3, 801b804 <__smakebuf_r+0x70>
 801b7ec:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 801b7f0:	4630      	mov	r0, r6
 801b7f2:	f000 f81d 	bl	801b830 <_isatty_r>
 801b7f6:	b128      	cbz	r0, 801b804 <__smakebuf_r+0x70>
 801b7f8:	89a3      	ldrh	r3, [r4, #12]
 801b7fa:	f023 0303 	bic.w	r3, r3, #3
 801b7fe:	f043 0301 	orr.w	r3, r3, #1
 801b802:	81a3      	strh	r3, [r4, #12]
 801b804:	89a3      	ldrh	r3, [r4, #12]
 801b806:	431d      	orrs	r5, r3
 801b808:	81a5      	strh	r5, [r4, #12]
 801b80a:	e7cf      	b.n	801b7ac <__smakebuf_r+0x18>

0801b80c <_fstat_r>:
 801b80c:	b538      	push	{r3, r4, r5, lr}
 801b80e:	4d07      	ldr	r5, [pc, #28]	; (801b82c <_fstat_r+0x20>)
 801b810:	2300      	movs	r3, #0
 801b812:	4604      	mov	r4, r0
 801b814:	4608      	mov	r0, r1
 801b816:	4611      	mov	r1, r2
 801b818:	602b      	str	r3, [r5, #0]
 801b81a:	f7e7 fd0c 	bl	8003236 <_fstat>
 801b81e:	1c43      	adds	r3, r0, #1
 801b820:	d102      	bne.n	801b828 <_fstat_r+0x1c>
 801b822:	682b      	ldr	r3, [r5, #0]
 801b824:	b103      	cbz	r3, 801b828 <_fstat_r+0x1c>
 801b826:	6023      	str	r3, [r4, #0]
 801b828:	bd38      	pop	{r3, r4, r5, pc}
 801b82a:	bf00      	nop
 801b82c:	200072dc 	.word	0x200072dc

0801b830 <_isatty_r>:
 801b830:	b538      	push	{r3, r4, r5, lr}
 801b832:	4d06      	ldr	r5, [pc, #24]	; (801b84c <_isatty_r+0x1c>)
 801b834:	2300      	movs	r3, #0
 801b836:	4604      	mov	r4, r0
 801b838:	4608      	mov	r0, r1
 801b83a:	602b      	str	r3, [r5, #0]
 801b83c:	f7e7 fd0b 	bl	8003256 <_isatty>
 801b840:	1c43      	adds	r3, r0, #1
 801b842:	d102      	bne.n	801b84a <_isatty_r+0x1a>
 801b844:	682b      	ldr	r3, [r5, #0]
 801b846:	b103      	cbz	r3, 801b84a <_isatty_r+0x1a>
 801b848:	6023      	str	r3, [r4, #0]
 801b84a:	bd38      	pop	{r3, r4, r5, pc}
 801b84c:	200072dc 	.word	0x200072dc

0801b850 <_sbrk_r>:
 801b850:	b538      	push	{r3, r4, r5, lr}
 801b852:	4d06      	ldr	r5, [pc, #24]	; (801b86c <_sbrk_r+0x1c>)
 801b854:	2300      	movs	r3, #0
 801b856:	4604      	mov	r4, r0
 801b858:	4608      	mov	r0, r1
 801b85a:	602b      	str	r3, [r5, #0]
 801b85c:	f7e7 fd14 	bl	8003288 <_sbrk>
 801b860:	1c43      	adds	r3, r0, #1
 801b862:	d102      	bne.n	801b86a <_sbrk_r+0x1a>
 801b864:	682b      	ldr	r3, [r5, #0]
 801b866:	b103      	cbz	r3, 801b86a <_sbrk_r+0x1a>
 801b868:	6023      	str	r3, [r4, #0]
 801b86a:	bd38      	pop	{r3, r4, r5, pc}
 801b86c:	200072dc 	.word	0x200072dc

0801b870 <abort>:
 801b870:	b508      	push	{r3, lr}
 801b872:	2006      	movs	r0, #6
 801b874:	f000 f860 	bl	801b938 <raise>
 801b878:	2001      	movs	r0, #1
 801b87a:	f7e7 fc8d 	bl	8003198 <_exit>

0801b87e <_calloc_r>:
 801b87e:	b537      	push	{r0, r1, r2, r4, r5, lr}
 801b880:	fba1 2402 	umull	r2, r4, r1, r2
 801b884:	b94c      	cbnz	r4, 801b89a <_calloc_r+0x1c>
 801b886:	4611      	mov	r1, r2
 801b888:	9201      	str	r2, [sp, #4]
 801b88a:	f7ff f951 	bl	801ab30 <_malloc_r>
 801b88e:	9a01      	ldr	r2, [sp, #4]
 801b890:	4605      	mov	r5, r0
 801b892:	b930      	cbnz	r0, 801b8a2 <_calloc_r+0x24>
 801b894:	4628      	mov	r0, r5
 801b896:	b003      	add	sp, #12
 801b898:	bd30      	pop	{r4, r5, pc}
 801b89a:	220c      	movs	r2, #12
 801b89c:	6002      	str	r2, [r0, #0]
 801b89e:	2500      	movs	r5, #0
 801b8a0:	e7f8      	b.n	801b894 <_calloc_r+0x16>
 801b8a2:	4621      	mov	r1, r4
 801b8a4:	f7fe fa36 	bl	8019d14 <memset>
 801b8a8:	e7f4      	b.n	801b894 <_calloc_r+0x16>

0801b8aa <__ascii_mbtowc>:
 801b8aa:	b082      	sub	sp, #8
 801b8ac:	b901      	cbnz	r1, 801b8b0 <__ascii_mbtowc+0x6>
 801b8ae:	a901      	add	r1, sp, #4
 801b8b0:	b142      	cbz	r2, 801b8c4 <__ascii_mbtowc+0x1a>
 801b8b2:	b14b      	cbz	r3, 801b8c8 <__ascii_mbtowc+0x1e>
 801b8b4:	7813      	ldrb	r3, [r2, #0]
 801b8b6:	600b      	str	r3, [r1, #0]
 801b8b8:	7812      	ldrb	r2, [r2, #0]
 801b8ba:	1e10      	subs	r0, r2, #0
 801b8bc:	bf18      	it	ne
 801b8be:	2001      	movne	r0, #1
 801b8c0:	b002      	add	sp, #8
 801b8c2:	4770      	bx	lr
 801b8c4:	4610      	mov	r0, r2
 801b8c6:	e7fb      	b.n	801b8c0 <__ascii_mbtowc+0x16>
 801b8c8:	f06f 0001 	mvn.w	r0, #1
 801b8cc:	e7f8      	b.n	801b8c0 <__ascii_mbtowc+0x16>

0801b8ce <__ascii_wctomb>:
 801b8ce:	b149      	cbz	r1, 801b8e4 <__ascii_wctomb+0x16>
 801b8d0:	2aff      	cmp	r2, #255	; 0xff
 801b8d2:	bf85      	ittet	hi
 801b8d4:	238a      	movhi	r3, #138	; 0x8a
 801b8d6:	6003      	strhi	r3, [r0, #0]
 801b8d8:	700a      	strbls	r2, [r1, #0]
 801b8da:	f04f 30ff 	movhi.w	r0, #4294967295
 801b8de:	bf98      	it	ls
 801b8e0:	2001      	movls	r0, #1
 801b8e2:	4770      	bx	lr
 801b8e4:	4608      	mov	r0, r1
 801b8e6:	4770      	bx	lr

0801b8e8 <_raise_r>:
 801b8e8:	291f      	cmp	r1, #31
 801b8ea:	b538      	push	{r3, r4, r5, lr}
 801b8ec:	4604      	mov	r4, r0
 801b8ee:	460d      	mov	r5, r1
 801b8f0:	d904      	bls.n	801b8fc <_raise_r+0x14>
 801b8f2:	2316      	movs	r3, #22
 801b8f4:	6003      	str	r3, [r0, #0]
 801b8f6:	f04f 30ff 	mov.w	r0, #4294967295
 801b8fa:	bd38      	pop	{r3, r4, r5, pc}
 801b8fc:	6bc2      	ldr	r2, [r0, #60]	; 0x3c
 801b8fe:	b112      	cbz	r2, 801b906 <_raise_r+0x1e>
 801b900:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 801b904:	b94b      	cbnz	r3, 801b91a <_raise_r+0x32>
 801b906:	4620      	mov	r0, r4
 801b908:	f000 f830 	bl	801b96c <_getpid_r>
 801b90c:	462a      	mov	r2, r5
 801b90e:	4601      	mov	r1, r0
 801b910:	4620      	mov	r0, r4
 801b912:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 801b916:	f000 b817 	b.w	801b948 <_kill_r>
 801b91a:	2b01      	cmp	r3, #1
 801b91c:	d00a      	beq.n	801b934 <_raise_r+0x4c>
 801b91e:	1c59      	adds	r1, r3, #1
 801b920:	d103      	bne.n	801b92a <_raise_r+0x42>
 801b922:	2316      	movs	r3, #22
 801b924:	6003      	str	r3, [r0, #0]
 801b926:	2001      	movs	r0, #1
 801b928:	e7e7      	b.n	801b8fa <_raise_r+0x12>
 801b92a:	2400      	movs	r4, #0
 801b92c:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 801b930:	4628      	mov	r0, r5
 801b932:	4798      	blx	r3
 801b934:	2000      	movs	r0, #0
 801b936:	e7e0      	b.n	801b8fa <_raise_r+0x12>

0801b938 <raise>:
 801b938:	4b02      	ldr	r3, [pc, #8]	; (801b944 <raise+0xc>)
 801b93a:	4601      	mov	r1, r0
 801b93c:	6818      	ldr	r0, [r3, #0]
 801b93e:	f7ff bfd3 	b.w	801b8e8 <_raise_r>
 801b942:	bf00      	nop
 801b944:	200000bc 	.word	0x200000bc

0801b948 <_kill_r>:
 801b948:	b538      	push	{r3, r4, r5, lr}
 801b94a:	4d07      	ldr	r5, [pc, #28]	; (801b968 <_kill_r+0x20>)
 801b94c:	2300      	movs	r3, #0
 801b94e:	4604      	mov	r4, r0
 801b950:	4608      	mov	r0, r1
 801b952:	4611      	mov	r1, r2
 801b954:	602b      	str	r3, [r5, #0]
 801b956:	f7e7 fc0d 	bl	8003174 <_kill>
 801b95a:	1c43      	adds	r3, r0, #1
 801b95c:	d102      	bne.n	801b964 <_kill_r+0x1c>
 801b95e:	682b      	ldr	r3, [r5, #0]
 801b960:	b103      	cbz	r3, 801b964 <_kill_r+0x1c>
 801b962:	6023      	str	r3, [r4, #0]
 801b964:	bd38      	pop	{r3, r4, r5, pc}
 801b966:	bf00      	nop
 801b968:	200072dc 	.word	0x200072dc

0801b96c <_getpid_r>:
 801b96c:	f7e7 bbfa 	b.w	8003164 <_getpid>

0801b970 <_init>:
 801b970:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801b972:	bf00      	nop
 801b974:	bcf8      	pop	{r3, r4, r5, r6, r7}
 801b976:	bc08      	pop	{r3}
 801b978:	469e      	mov	lr, r3
 801b97a:	4770      	bx	lr

0801b97c <_fini>:
 801b97c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801b97e:	bf00      	nop
 801b980:	bcf8      	pop	{r3, r4, r5, r6, r7}
 801b982:	bc08      	pop	{r3}
 801b984:	469e      	mov	lr, r3
 801b986:	4770      	bx	lr

0801b988 <__MW_update_veneer>:
 801b988:	f85f f000 	ldr.w	pc, [pc]	; 801b98c <__MW_update_veneer+0x4>
 801b98c:	00000d59 	.word	0x00000d59

0801b990 <__start_continuous_MW_sweep_veneer>:
 801b990:	f85f f000 	ldr.w	pc, [pc]	; 801b994 <__start_continuous_MW_sweep_veneer+0x4>
 801b994:	00000d3d 	.word	0x00000d3d

0801b998 <__timer_delay_veneer>:
 801b998:	f85f f000 	ldr.w	pc, [pc]	; 801b99c <__timer_delay_veneer+0x4>
 801b99c:	000012bd 	.word	0x000012bd

0801b9a0 <__stop_pop_veneer>:
 801b9a0:	f85f f000 	ldr.w	pc, [pc]	; 801b9a4 <__stop_pop_veneer+0x4>
 801b9a4:	00001409 	.word	0x00001409

0801b9a8 <__calc_fixed_time_MW_sweep_veneer>:
 801b9a8:	f85f f000 	ldr.w	pc, [pc]	; 801b9ac <__calc_fixed_time_MW_sweep_veneer+0x4>
 801b9ac:	00000809 	.word	0x00000809

0801b9b0 <__set_MW_power_veneer>:
 801b9b0:	f85f f000 	ldr.w	pc, [pc]	; 801b9b4 <__set_MW_power_veneer+0x4>
 801b9b4:	00000123 	.word	0x00000123

0801b9b8 <__start_pop_veneer>:
 801b9b8:	f85f f000 	ldr.w	pc, [pc]	; 801b9bc <__start_pop_veneer+0x4>
 801b9bc:	000013ad 	.word	0x000013ad
